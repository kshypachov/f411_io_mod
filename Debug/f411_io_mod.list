
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000253f4  080101a0  080101a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006238  08035598  08035598  00026598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803b7d0  0803b7d0  0002d870  2**0
                  CONTENTS
  4 .ARM          00000008  0803b7d0  0803b7d0  0002c7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803b7d8  0803b7d8  0002d870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803b7d8  0803b7d8  0002c7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803b7e0  0803b7e0  0002c7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000870  20000000  0803b7e4  0002d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019990  20000870  0803c054  0002d870  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2001a200  0803c054  0002e200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002d870  2**0
                  CONTENTS, READONLY
 12 .debug_info   000596af  00000000  00000000  0002d8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007c3b  00000000  00000000  00086f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00028108  00000000  00000000  0008eb8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002fd8  00000000  00000000  000b6c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002fee  00000000  00000000  000b9c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211ce  00000000  00000000  000bcc5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000485c9  00000000  00000000  000dde2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aa8cb  00000000  00000000  001263f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001d0cc0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bda4  00000000  00000000  001d0d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001dcaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	@ (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	@ (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	@ (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	20000870 	.word	0x20000870
 80101bc:	00000000 	.word	0x00000000
 80101c0:	0803557c 	.word	0x0803557c

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	@ (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	@ (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	@ (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	20000874 	.word	0x20000874
 80101dc:	0803557c 	.word	0x0803557c

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	@ 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_ldivmod>:
 8010cb8:	b97b      	cbnz	r3, 8010cda <__aeabi_ldivmod+0x22>
 8010cba:	b972      	cbnz	r2, 8010cda <__aeabi_ldivmod+0x22>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bfbe      	ittt	lt
 8010cc0:	2000      	movlt	r0, #0
 8010cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8010cc6:	e006      	blt.n	8010cd6 <__aeabi_ldivmod+0x1e>
 8010cc8:	bf08      	it	eq
 8010cca:	2800      	cmpeq	r0, #0
 8010ccc:	bf1c      	itt	ne
 8010cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8010cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010cd6:	f000 b9ff 	b.w	80110d8 <__aeabi_idiv0>
 8010cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010ce2:	2900      	cmp	r1, #0
 8010ce4:	db09      	blt.n	8010cfa <__aeabi_ldivmod+0x42>
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	db1a      	blt.n	8010d20 <__aeabi_ldivmod+0x68>
 8010cea:	f000 f897 	bl	8010e1c <__udivmoddi4>
 8010cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cf6:	b004      	add	sp, #16
 8010cf8:	4770      	bx	lr
 8010cfa:	4240      	negs	r0, r0
 8010cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	db1b      	blt.n	8010d3c <__aeabi_ldivmod+0x84>
 8010d04:	f000 f88a 	bl	8010e1c <__udivmoddi4>
 8010d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d10:	b004      	add	sp, #16
 8010d12:	4240      	negs	r0, r0
 8010d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d18:	4252      	negs	r2, r2
 8010d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d1e:	4770      	bx	lr
 8010d20:	4252      	negs	r2, r2
 8010d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d26:	f000 f879 	bl	8010e1c <__udivmoddi4>
 8010d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d32:	b004      	add	sp, #16
 8010d34:	4240      	negs	r0, r0
 8010d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3a:	4770      	bx	lr
 8010d3c:	4252      	negs	r2, r2
 8010d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d42:	f000 f86b 	bl	8010e1c <__udivmoddi4>
 8010d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d4e:	b004      	add	sp, #16
 8010d50:	4252      	negs	r2, r2
 8010d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d56:	4770      	bx	lr

08010d58 <__aeabi_uldivmod>:
 8010d58:	b953      	cbnz	r3, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5a:	b94a      	cbnz	r2, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	bf08      	it	eq
 8010d60:	2800      	cmpeq	r0, #0
 8010d62:	bf1c      	itt	ne
 8010d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8010d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010d6c:	f000 b9b4 	b.w	80110d8 <__aeabi_idiv0>
 8010d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8010d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010d78:	f000 f850 	bl	8010e1c <__udivmoddi4>
 8010d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d84:	b004      	add	sp, #16
 8010d86:	4770      	bx	lr

08010d88 <__popcountsi2>:
 8010d88:	0843      	lsrs	r3, r0, #1
 8010d8a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8010d8e:	1ac0      	subs	r0, r0, r3
 8010d90:	0883      	lsrs	r3, r0, #2
 8010d92:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8010d96:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8010d9a:	4418      	add	r0, r3
 8010d9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010da0:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8010da4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010da8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010dac:	0e00      	lsrs	r0, r0, #24
 8010dae:	4770      	bx	lr

08010db0 <__aeabi_d2lz>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	2200      	movs	r2, #0
 8010db4:	2300      	movs	r3, #0
 8010db6:	4604      	mov	r4, r0
 8010db8:	460d      	mov	r5, r1
 8010dba:	f7ff fea7 	bl	8010b0c <__aeabi_dcmplt>
 8010dbe:	b928      	cbnz	r0, 8010dcc <__aeabi_d2lz+0x1c>
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc8:	f000 b80a 	b.w	8010de0 <__aeabi_d2ulz>
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8010dd2:	f000 f805 	bl	8010de0 <__aeabi_d2ulz>
 8010dd6:	4240      	negs	r0, r0
 8010dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010ddc:	bd38      	pop	{r3, r4, r5, pc}
 8010dde:	bf00      	nop

08010de0 <__aeabi_d2ulz>:
 8010de0:	b5d0      	push	{r4, r6, r7, lr}
 8010de2:	4b0c      	ldr	r3, [pc, #48]	@ (8010e14 <__aeabi_d2ulz+0x34>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	4606      	mov	r6, r0
 8010de8:	460f      	mov	r7, r1
 8010dea:	f7ff fc1d 	bl	8010628 <__aeabi_dmul>
 8010dee:	f7ff fef3 	bl	8010bd8 <__aeabi_d2uiz>
 8010df2:	4604      	mov	r4, r0
 8010df4:	f7ff fb9e 	bl	8010534 <__aeabi_ui2d>
 8010df8:	4b07      	ldr	r3, [pc, #28]	@ (8010e18 <__aeabi_d2ulz+0x38>)
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f7ff fc14 	bl	8010628 <__aeabi_dmul>
 8010e00:	4602      	mov	r2, r0
 8010e02:	460b      	mov	r3, r1
 8010e04:	4630      	mov	r0, r6
 8010e06:	4639      	mov	r1, r7
 8010e08:	f7ff fa56 	bl	80102b8 <__aeabi_dsub>
 8010e0c:	f7ff fee4 	bl	8010bd8 <__aeabi_d2uiz>
 8010e10:	4621      	mov	r1, r4
 8010e12:	bdd0      	pop	{r4, r6, r7, pc}
 8010e14:	3df00000 	.word	0x3df00000
 8010e18:	41f00000 	.word	0x41f00000

08010e1c <__udivmoddi4>:
 8010e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e20:	9d08      	ldr	r5, [sp, #32]
 8010e22:	460c      	mov	r4, r1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d14e      	bne.n	8010ec6 <__udivmoddi4+0xaa>
 8010e28:	4694      	mov	ip, r2
 8010e2a:	458c      	cmp	ip, r1
 8010e2c:	4686      	mov	lr, r0
 8010e2e:	fab2 f282 	clz	r2, r2
 8010e32:	d962      	bls.n	8010efa <__udivmoddi4+0xde>
 8010e34:	b14a      	cbz	r2, 8010e4a <__udivmoddi4+0x2e>
 8010e36:	f1c2 0320 	rsb	r3, r2, #32
 8010e3a:	4091      	lsls	r1, r2
 8010e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8010e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8010e44:	4319      	orrs	r1, r3
 8010e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8010e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e4e:	fa1f f68c 	uxth.w	r6, ip
 8010e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8010e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8010e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e62:	fb04 f106 	mul.w	r1, r4, r6
 8010e66:	4299      	cmp	r1, r3
 8010e68:	d90a      	bls.n	8010e80 <__udivmoddi4+0x64>
 8010e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8010e72:	f080 8112 	bcs.w	801109a <__udivmoddi4+0x27e>
 8010e76:	4299      	cmp	r1, r3
 8010e78:	f240 810f 	bls.w	801109a <__udivmoddi4+0x27e>
 8010e7c:	3c02      	subs	r4, #2
 8010e7e:	4463      	add	r3, ip
 8010e80:	1a59      	subs	r1, r3, r1
 8010e82:	fa1f f38e 	uxth.w	r3, lr
 8010e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8010e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8010e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e92:	fb00 f606 	mul.w	r6, r0, r6
 8010e96:	429e      	cmp	r6, r3
 8010e98:	d90a      	bls.n	8010eb0 <__udivmoddi4+0x94>
 8010e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8010ea2:	f080 80fc 	bcs.w	801109e <__udivmoddi4+0x282>
 8010ea6:	429e      	cmp	r6, r3
 8010ea8:	f240 80f9 	bls.w	801109e <__udivmoddi4+0x282>
 8010eac:	4463      	add	r3, ip
 8010eae:	3802      	subs	r0, #2
 8010eb0:	1b9b      	subs	r3, r3, r6
 8010eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	b11d      	cbz	r5, 8010ec2 <__udivmoddi4+0xa6>
 8010eba:	40d3      	lsrs	r3, r2
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8010ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec6:	428b      	cmp	r3, r1
 8010ec8:	d905      	bls.n	8010ed6 <__udivmoddi4+0xba>
 8010eca:	b10d      	cbz	r5, 8010ed0 <__udivmoddi4+0xb4>
 8010ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	4608      	mov	r0, r1
 8010ed4:	e7f5      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010ed6:	fab3 f183 	clz	r1, r3
 8010eda:	2900      	cmp	r1, #0
 8010edc:	d146      	bne.n	8010f6c <__udivmoddi4+0x150>
 8010ede:	42a3      	cmp	r3, r4
 8010ee0:	d302      	bcc.n	8010ee8 <__udivmoddi4+0xcc>
 8010ee2:	4290      	cmp	r0, r2
 8010ee4:	f0c0 80f0 	bcc.w	80110c8 <__udivmoddi4+0x2ac>
 8010ee8:	1a86      	subs	r6, r0, r2
 8010eea:	eb64 0303 	sbc.w	r3, r4, r3
 8010eee:	2001      	movs	r0, #1
 8010ef0:	2d00      	cmp	r5, #0
 8010ef2:	d0e6      	beq.n	8010ec2 <__udivmoddi4+0xa6>
 8010ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8010ef8:	e7e3      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010efa:	2a00      	cmp	r2, #0
 8010efc:	f040 8090 	bne.w	8011020 <__udivmoddi4+0x204>
 8010f00:	eba1 040c 	sub.w	r4, r1, ip
 8010f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8010f08:	fa1f f78c 	uxth.w	r7, ip
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8010f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010f16:	fb08 4416 	mls	r4, r8, r6, r4
 8010f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f1e:	fb07 f006 	mul.w	r0, r7, r6
 8010f22:	4298      	cmp	r0, r3
 8010f24:	d908      	bls.n	8010f38 <__udivmoddi4+0x11c>
 8010f26:	eb1c 0303 	adds.w	r3, ip, r3
 8010f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8010f2e:	d202      	bcs.n	8010f36 <__udivmoddi4+0x11a>
 8010f30:	4298      	cmp	r0, r3
 8010f32:	f200 80cd 	bhi.w	80110d0 <__udivmoddi4+0x2b4>
 8010f36:	4626      	mov	r6, r4
 8010f38:	1a1c      	subs	r4, r3, r0
 8010f3a:	fa1f f38e 	uxth.w	r3, lr
 8010f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8010f42:	fb08 4410 	mls	r4, r8, r0, r4
 8010f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f4a:	fb00 f707 	mul.w	r7, r0, r7
 8010f4e:	429f      	cmp	r7, r3
 8010f50:	d908      	bls.n	8010f64 <__udivmoddi4+0x148>
 8010f52:	eb1c 0303 	adds.w	r3, ip, r3
 8010f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8010f5a:	d202      	bcs.n	8010f62 <__udivmoddi4+0x146>
 8010f5c:	429f      	cmp	r7, r3
 8010f5e:	f200 80b0 	bhi.w	80110c2 <__udivmoddi4+0x2a6>
 8010f62:	4620      	mov	r0, r4
 8010f64:	1bdb      	subs	r3, r3, r7
 8010f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010f6a:	e7a5      	b.n	8010eb8 <__udivmoddi4+0x9c>
 8010f6c:	f1c1 0620 	rsb	r6, r1, #32
 8010f70:	408b      	lsls	r3, r1
 8010f72:	fa22 f706 	lsr.w	r7, r2, r6
 8010f76:	431f      	orrs	r7, r3
 8010f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8010f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8010f80:	ea43 030c 	orr.w	r3, r3, ip
 8010f84:	40f4      	lsrs	r4, r6
 8010f86:	fa00 f801 	lsl.w	r8, r0, r1
 8010f8a:	0c38      	lsrs	r0, r7, #16
 8010f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8010f90:	fbb4 fef0 	udiv	lr, r4, r0
 8010f94:	fa1f fc87 	uxth.w	ip, r7
 8010f98:	fb00 441e 	mls	r4, r0, lr, r4
 8010f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8010fa4:	45a1      	cmp	r9, r4
 8010fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8010faa:	d90a      	bls.n	8010fc2 <__udivmoddi4+0x1a6>
 8010fac:	193c      	adds	r4, r7, r4
 8010fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8010fb2:	f080 8084 	bcs.w	80110be <__udivmoddi4+0x2a2>
 8010fb6:	45a1      	cmp	r9, r4
 8010fb8:	f240 8081 	bls.w	80110be <__udivmoddi4+0x2a2>
 8010fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8010fc0:	443c      	add	r4, r7
 8010fc2:	eba4 0409 	sub.w	r4, r4, r9
 8010fc6:	fa1f f983 	uxth.w	r9, r3
 8010fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8010fce:	fb00 4413 	mls	r4, r0, r3, r4
 8010fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8010fda:	45a4      	cmp	ip, r4
 8010fdc:	d907      	bls.n	8010fee <__udivmoddi4+0x1d2>
 8010fde:	193c      	adds	r4, r7, r4
 8010fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8010fe4:	d267      	bcs.n	80110b6 <__udivmoddi4+0x29a>
 8010fe6:	45a4      	cmp	ip, r4
 8010fe8:	d965      	bls.n	80110b6 <__udivmoddi4+0x29a>
 8010fea:	3b02      	subs	r3, #2
 8010fec:	443c      	add	r4, r7
 8010fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8010ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8010ff6:	eba4 040c 	sub.w	r4, r4, ip
 8010ffa:	429c      	cmp	r4, r3
 8010ffc:	46ce      	mov	lr, r9
 8010ffe:	469c      	mov	ip, r3
 8011000:	d351      	bcc.n	80110a6 <__udivmoddi4+0x28a>
 8011002:	d04e      	beq.n	80110a2 <__udivmoddi4+0x286>
 8011004:	b155      	cbz	r5, 801101c <__udivmoddi4+0x200>
 8011006:	ebb8 030e 	subs.w	r3, r8, lr
 801100a:	eb64 040c 	sbc.w	r4, r4, ip
 801100e:	fa04 f606 	lsl.w	r6, r4, r6
 8011012:	40cb      	lsrs	r3, r1
 8011014:	431e      	orrs	r6, r3
 8011016:	40cc      	lsrs	r4, r1
 8011018:	e9c5 6400 	strd	r6, r4, [r5]
 801101c:	2100      	movs	r1, #0
 801101e:	e750      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8011020:	f1c2 0320 	rsb	r3, r2, #32
 8011024:	fa20 f103 	lsr.w	r1, r0, r3
 8011028:	fa0c fc02 	lsl.w	ip, ip, r2
 801102c:	fa24 f303 	lsr.w	r3, r4, r3
 8011030:	4094      	lsls	r4, r2
 8011032:	430c      	orrs	r4, r1
 8011034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8011038:	fa00 fe02 	lsl.w	lr, r0, r2
 801103c:	fa1f f78c 	uxth.w	r7, ip
 8011040:	fbb3 f0f8 	udiv	r0, r3, r8
 8011044:	fb08 3110 	mls	r1, r8, r0, r3
 8011048:	0c23      	lsrs	r3, r4, #16
 801104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801104e:	fb00 f107 	mul.w	r1, r0, r7
 8011052:	4299      	cmp	r1, r3
 8011054:	d908      	bls.n	8011068 <__udivmoddi4+0x24c>
 8011056:	eb1c 0303 	adds.w	r3, ip, r3
 801105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 801105e:	d22c      	bcs.n	80110ba <__udivmoddi4+0x29e>
 8011060:	4299      	cmp	r1, r3
 8011062:	d92a      	bls.n	80110ba <__udivmoddi4+0x29e>
 8011064:	3802      	subs	r0, #2
 8011066:	4463      	add	r3, ip
 8011068:	1a5b      	subs	r3, r3, r1
 801106a:	b2a4      	uxth	r4, r4
 801106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8011070:	fb08 3311 	mls	r3, r8, r1, r3
 8011074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8011078:	fb01 f307 	mul.w	r3, r1, r7
 801107c:	42a3      	cmp	r3, r4
 801107e:	d908      	bls.n	8011092 <__udivmoddi4+0x276>
 8011080:	eb1c 0404 	adds.w	r4, ip, r4
 8011084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8011088:	d213      	bcs.n	80110b2 <__udivmoddi4+0x296>
 801108a:	42a3      	cmp	r3, r4
 801108c:	d911      	bls.n	80110b2 <__udivmoddi4+0x296>
 801108e:	3902      	subs	r1, #2
 8011090:	4464      	add	r4, ip
 8011092:	1ae4      	subs	r4, r4, r3
 8011094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011098:	e739      	b.n	8010f0e <__udivmoddi4+0xf2>
 801109a:	4604      	mov	r4, r0
 801109c:	e6f0      	b.n	8010e80 <__udivmoddi4+0x64>
 801109e:	4608      	mov	r0, r1
 80110a0:	e706      	b.n	8010eb0 <__udivmoddi4+0x94>
 80110a2:	45c8      	cmp	r8, r9
 80110a4:	d2ae      	bcs.n	8011004 <__udivmoddi4+0x1e8>
 80110a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80110aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80110ae:	3801      	subs	r0, #1
 80110b0:	e7a8      	b.n	8011004 <__udivmoddi4+0x1e8>
 80110b2:	4631      	mov	r1, r6
 80110b4:	e7ed      	b.n	8011092 <__udivmoddi4+0x276>
 80110b6:	4603      	mov	r3, r0
 80110b8:	e799      	b.n	8010fee <__udivmoddi4+0x1d2>
 80110ba:	4630      	mov	r0, r6
 80110bc:	e7d4      	b.n	8011068 <__udivmoddi4+0x24c>
 80110be:	46d6      	mov	lr, sl
 80110c0:	e77f      	b.n	8010fc2 <__udivmoddi4+0x1a6>
 80110c2:	4463      	add	r3, ip
 80110c4:	3802      	subs	r0, #2
 80110c6:	e74d      	b.n	8010f64 <__udivmoddi4+0x148>
 80110c8:	4606      	mov	r6, r0
 80110ca:	4623      	mov	r3, r4
 80110cc:	4608      	mov	r0, r1
 80110ce:	e70f      	b.n	8010ef0 <__udivmoddi4+0xd4>
 80110d0:	3e02      	subs	r6, #2
 80110d2:	4463      	add	r3, ip
 80110d4:	e730      	b.n	8010f38 <__udivmoddi4+0x11c>
 80110d6:	bf00      	nop

080110d8 <__aeabi_idiv0>:
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop

080110dc <EthBegin>:

void EthResetEnd(void){
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
}

void EthBegin(void * param){
 80110dc:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 80110de:	2200      	movs	r2, #0
 80110e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80110e4:	4801      	ldr	r0, [pc, #4]	@ (80110ec <EthBegin+0x10>)
 80110e6:	f004 fff6 	bl	80160d6 <HAL_GPIO_WritePin>
}
 80110ea:	bd08      	pop	{r3, pc}
 80110ec:	40020400 	.word	0x40020400

080110f0 <EthEnd>:

void EthEnd(void * param){
 80110f0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 80110f2:	2201      	movs	r2, #1
 80110f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80110f8:	4801      	ldr	r0, [pc, #4]	@ (8011100 <EthEnd+0x10>)
 80110fa:	f004 ffec 	bl	80160d6 <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 80110fe:	bd08      	pop	{r3, pc}
 8011100:	40020400 	.word	0x40020400

08011104 <FlashBegin>:
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
  return rx_data;
}

void FlashBegin(void){
 8011104:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8011106:	2200      	movs	r2, #0
 8011108:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801110c:	4801      	ldr	r0, [pc, #4]	@ (8011114 <FlashBegin+0x10>)
 801110e:	f004 ffe2 	bl	80160d6 <HAL_GPIO_WritePin>
}
 8011112:	bd08      	pop	{r3, pc}
 8011114:	40020000 	.word	0x40020000

08011118 <FlashEnd>:

void FlashEnd(void){
 8011118:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 801111a:	2201      	movs	r2, #1
 801111c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011120:	4801      	ldr	r0, [pc, #4]	@ (8011128 <FlashEnd+0x10>)
 8011122:	f004 ffd8 	bl	80160d6 <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 8011126:	bd08      	pop	{r3, pc}
 8011128:	40020000 	.word	0x40020000

0801112c <StartIOTask>:
{
 801112c:	b510      	push	{r4, lr}
 801112e:	b08e      	sub	sp, #56	@ 0x38
	uint16_t pinCoils[] = {coil1_Pin, coil2_Pin, coil3_Pin};
 8011130:	4b48      	ldr	r3, [pc, #288]	@ (8011254 <StartIOTask+0x128>)
 8011132:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011136:	900c      	str	r0, [sp, #48]	@ 0x30
 8011138:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
	GPIO_TypeDef* portCoils[] = {coil1_GPIO_Port, coil2_GPIO_Port, coil3_GPIO_Port};
 801113c:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 8011140:	f103 0408 	add.w	r4, r3, #8
 8011144:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011148:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	uint16_t pinInputs[] = {input1_Pin, input2_Pin, input3_Pin};
 801114c:	3314      	adds	r3, #20
 801114e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011152:	9007      	str	r0, [sp, #28]
 8011154:	f8ad 1020 	strh.w	r1, [sp, #32]
	GPIO_TypeDef* portInputs[] = {input1_GPIO_Port, input2_GPIO_Port, input3_GPIO_Port};
 8011158:	ab04      	add	r3, sp, #16
 801115a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801115e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if ((sizeof(pinCoils) / sizeof(pinCoils[0])) != OUTPUTS_COUNT ||
 8011162:	e06f      	b.n	8011244 <StartIOTask+0x118>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 8011164:	2300      	movs	r3, #0
 8011166:	461a      	mov	r2, r3
 8011168:	a901      	add	r1, sp, #4
 801116a:	483b      	ldr	r0, [pc, #236]	@ (8011258 <StartIOTask+0x12c>)
 801116c:	6800      	ldr	r0, [r0, #0]
 801116e:	f007 f82c 	bl	80181ca <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011172:	2400      	movs	r4, #0
 8011174:	e00e      	b.n	8011194 <StartIOTask+0x68>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 8011176:	2200      	movs	r2, #0
 8011178:	ab0e      	add	r3, sp, #56	@ 0x38
 801117a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801117e:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 8011182:	ab0e      	add	r3, sp, #56	@ 0x38
 8011184:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011188:	f853 0c14 	ldr.w	r0, [r3, #-20]
 801118c:	f004 ffa3 	bl	80160d6 <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011190:	3401      	adds	r4, #1
 8011192:	b2e4      	uxtb	r4, r4
 8011194:	2c02      	cmp	r4, #2
 8011196:	d85b      	bhi.n	8011250 <StartIOTask+0x124>
		     if (pinOutputs_w[i]) {
 8011198:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801119c:	446b      	add	r3, sp
 801119e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d0e7      	beq.n	8011176 <StartIOTask+0x4a>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 80111a6:	2201      	movs	r2, #1
 80111a8:	ab0e      	add	r3, sp, #56	@ 0x38
 80111aa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80111ae:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 80111b2:	ab0e      	add	r3, sp, #56	@ 0x38
 80111b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80111b8:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80111bc:	f004 ff8b 	bl	80160d6 <HAL_GPIO_WritePin>
 80111c0:	e7e6      	b.n	8011190 <StartIOTask+0x64>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 80111c2:	ab0e      	add	r3, sp, #56	@ 0x38
 80111c4:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 80111c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80111cc:	f832 1c08 	ldrh.w	r1, [r2, #-8]
 80111d0:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80111d4:	f004 ff78 	bl	80160c8 <HAL_GPIO_ReadPin>
 80111d8:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80111dc:	446b      	add	r3, sp
 80111de:	f803 0c30 	strb.w	r0, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80111e2:	3401      	adds	r4, #1
 80111e4:	b2e4      	uxtb	r4, r4
 80111e6:	2c02      	cmp	r4, #2
 80111e8:	d9eb      	bls.n	80111c2 <StartIOTask+0x96>
	osMessageQueueReset(outputReadQHandle);
 80111ea:	4c1c      	ldr	r4, [pc, #112]	@ (801125c <StartIOTask+0x130>)
 80111ec:	6820      	ldr	r0, [r4, #0]
 80111ee:	f007 f83a 	bl	8018266 <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 80111f2:	2300      	movs	r3, #0
 80111f4:	461a      	mov	r2, r3
 80111f6:	a902      	add	r1, sp, #8
 80111f8:	6820      	ldr	r0, [r4, #0]
 80111fa:	f006 ffa4 	bl	8018146 <osMessageQueuePut>
	for (i = 0; i < INPUTS_COUNT; i++) {
 80111fe:	2400      	movs	r4, #0
 8011200:	e011      	b.n	8011226 <StartIOTask+0xfa>
		pinInputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]);
 8011202:	ab0e      	add	r3, sp, #56	@ 0x38
 8011204:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8011208:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801120c:	f832 1c1c 	ldrh.w	r1, [r2, #-28]
 8011210:	f853 0c28 	ldr.w	r0, [r3, #-40]
 8011214:	f004 ff58 	bl	80160c8 <HAL_GPIO_ReadPin>
 8011218:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801121c:	446b      	add	r3, sp
 801121e:	f803 0c2c 	strb.w	r0, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 8011222:	3401      	adds	r4, #1
 8011224:	b2e4      	uxtb	r4, r4
 8011226:	2c02      	cmp	r4, #2
 8011228:	d9eb      	bls.n	8011202 <StartIOTask+0xd6>
	osMessageQueueReset(inputReadQHandle);
 801122a:	4c0d      	ldr	r4, [pc, #52]	@ (8011260 <StartIOTask+0x134>)
 801122c:	6820      	ldr	r0, [r4, #0]
 801122e:	f007 f81a 	bl	8018266 <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 8011232:	2300      	movs	r3, #0
 8011234:	461a      	mov	r2, r3
 8011236:	a903      	add	r1, sp, #12
 8011238:	6820      	ldr	r0, [r4, #0]
 801123a:	f006 ff84 	bl	8018146 <osMessageQueuePut>
    osDelay(1);
 801123e:	2001      	movs	r0, #1
 8011240:	f006 fe89 	bl	8017f56 <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 8011244:	4b04      	ldr	r3, [pc, #16]	@ (8011258 <StartIOTask+0x12c>)
 8011246:	6818      	ldr	r0, [r3, #0]
 8011248:	f007 f800 	bl	801824c <osMessageQueueGetCount>
 801124c:	2800      	cmp	r0, #0
 801124e:	d189      	bne.n	8011164 <StartIOTask+0x38>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011250:	2400      	movs	r4, #0
 8011252:	e7c8      	b.n	80111e6 <StartIOTask+0xba>
 8011254:	08035598 	.word	0x08035598
 8011258:	2000089c 	.word	0x2000089c
 801125c:	200008a0 	.word	0x200008a0
 8011260:	200008a4 	.word	0x200008a4

08011264 <add_log_mess_to_q>:
				xQueueOverwrite(outputWriteQHandle, output);
			}
	}
}

void add_log_mess_to_q(struct log_message mess){
 8011264:	b084      	sub	sp, #16
 8011266:	b508      	push	{r3, lr}
 8011268:	f10d 0c08 	add.w	ip, sp, #8
 801126c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	osMessageQueuePut(loggingQHandle,  &mess, 0, 0);
 8011270:	2300      	movs	r3, #0
 8011272:	461a      	mov	r2, r3
 8011274:	4661      	mov	r1, ip
 8011276:	4804      	ldr	r0, [pc, #16]	@ (8011288 <add_log_mess_to_q+0x24>)
 8011278:	6800      	ldr	r0, [r0, #0]
 801127a:	f006 ff64 	bl	8018146 <osMessageQueuePut>

}
 801127e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011282:	b004      	add	sp, #16
 8011284:	4770      	bx	lr
 8011286:	bf00      	nop
 8011288:	20000894 	.word	0x20000894

0801128c <StartDisplayTask>:
{
 801128c:	b570      	push	{r4, r5, r6, lr}
 801128e:	b08a      	sub	sp, #40	@ 0x28
	osDelay(1000);//
 8011290:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011294:	f006 fe5f 	bl	8017f56 <osDelay>
	SSD1306_Init (); // initialise the display
 8011298:	f006 fcf6 	bl	8017c88 <SSD1306_Init>
	osDelay(100);//
 801129c:	2064      	movs	r0, #100	@ 0x64
 801129e:	f006 fe5a 	bl	8017f56 <osDelay>
    SSD1306_GotoXY(x=1,y=0);
 80112a2:	2100      	movs	r1, #0
 80112a4:	2001      	movs	r0, #1
 80112a6:	f006 fc53 	bl	8017b50 <SSD1306_GotoXY>
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80112aa:	2000      	movs	r0, #0
 80112ac:	f006 fc14 	bl	8017ad8 <SSD1306_Fill>
    SSD1306_Puts("Compiled: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80112b0:	4c48      	ldr	r4, [pc, #288]	@ (80113d4 <StartDisplayTask+0x148>)
 80112b2:	2201      	movs	r2, #1
 80112b4:	4621      	mov	r1, r4
 80112b6:	4848      	ldr	r0, [pc, #288]	@ (80113d8 <StartDisplayTask+0x14c>)
 80112b8:	f006 fc9e 	bl	8017bf8 <SSD1306_Puts>
    SSD1306_Puts(__TIME__, &Font_7x10, SSD1306_COLOR_WHITE);
 80112bc:	2201      	movs	r2, #1
 80112be:	4621      	mov	r1, r4
 80112c0:	4846      	ldr	r0, [pc, #280]	@ (80113dc <StartDisplayTask+0x150>)
 80112c2:	f006 fc99 	bl	8017bf8 <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80112c6:	210b      	movs	r1, #11
 80112c8:	2001      	movs	r0, #1
 80112ca:	f006 fc41 	bl	8017b50 <SSD1306_GotoXY>
    SSD1306_Puts(__DATE__, &Font_7x10, SSD1306_COLOR_WHITE);
 80112ce:	2201      	movs	r2, #1
 80112d0:	4621      	mov	r1, r4
 80112d2:	4843      	ldr	r0, [pc, #268]	@ (80113e0 <StartDisplayTask+0x154>)
 80112d4:	f006 fc90 	bl	8017bf8 <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80112d8:	2116      	movs	r1, #22
 80112da:	2001      	movs	r0, #1
 80112dc:	f006 fc38 	bl	8017b50 <SSD1306_GotoXY>
	SSD1306_Puts("MAC: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80112e0:	2201      	movs	r2, #1
 80112e2:	4621      	mov	r1, r4
 80112e4:	483f      	ldr	r0, [pc, #252]	@ (80113e4 <StartDisplayTask+0x158>)
 80112e6:	f006 fc87 	bl	8017bf8 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 80112ea:	2121      	movs	r1, #33	@ 0x21
 80112ec:	2001      	movs	r0, #1
 80112ee:	f006 fc2f 	bl	8017b50 <SSD1306_GotoXY>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 80112f2:	4b3d      	ldr	r3, [pc, #244]	@ (80113e8 <StartDisplayTask+0x15c>)
 80112f4:	6859      	ldr	r1, [r3, #4]
 80112f6:	780a      	ldrb	r2, [r1, #0]
 80112f8:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 80112fa:	7888      	ldrb	r0, [r1, #2]
 80112fc:	78cd      	ldrb	r5, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 80112fe:	790e      	ldrb	r6, [r1, #4]
 8011300:	7949      	ldrb	r1, [r1, #5]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011302:	9103      	str	r1, [sp, #12]
 8011304:	9602      	str	r6, [sp, #8]
 8011306:	9501      	str	r5, [sp, #4]
 8011308:	9000      	str	r0, [sp, #0]
 801130a:	4938      	ldr	r1, [pc, #224]	@ (80113ec <StartDisplayTask+0x160>)
 801130c:	a805      	add	r0, sp, #20
 801130e:	f01a fbf5 	bl	802bafc <sprintf>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011312:	2201      	movs	r2, #1
 8011314:	4621      	mov	r1, r4
 8011316:	a805      	add	r0, sp, #20
 8011318:	f006 fc6e 	bl	8017bf8 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 801131c:	f006 fd5e 	bl	8017ddc <SSD1306_UpdateScreen>
    vTaskDelay(3000);
 8011320:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011324:	f008 f982 	bl	801962c <vTaskDelay>
    int i=0;
 8011328:	2500      	movs	r5, #0
 801132a:	e003      	b.n	8011334 <StartDisplayTask+0xa8>
		osDelay(1000);
 801132c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011330:	f006 fe11 	bl	8017f56 <osDelay>
		SSD1306_GotoXY(x=1,y=0);
 8011334:	2100      	movs	r1, #0
 8011336:	2001      	movs	r0, #1
 8011338:	f006 fc0a 	bl	8017b50 <SSD1306_GotoXY>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 801133c:	2000      	movs	r0, #0
 801133e:	f006 fbcb 	bl	8017ad8 <SSD1306_Fill>
		SSD1306_Puts("IP:", &Font_7x10, SSD1306_COLOR_WHITE);
 8011342:	4c24      	ldr	r4, [pc, #144]	@ (80113d4 <StartDisplayTask+0x148>)
 8011344:	2201      	movs	r2, #1
 8011346:	4621      	mov	r1, r4
 8011348:	4829      	ldr	r0, [pc, #164]	@ (80113f0 <StartDisplayTask+0x164>)
 801134a:	f006 fc55 	bl	8017bf8 <SSD1306_Puts>
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 801134e:	4b26      	ldr	r3, [pc, #152]	@ (80113e8 <StartDisplayTask+0x15c>)
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011354:	0e13      	lsrs	r3, r2, #24
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 8011356:	9301      	str	r3, [sp, #4]
 8011358:	f3c2 4307 	ubfx	r3, r2, #16, #8
 801135c:	9300      	str	r3, [sp, #0]
 801135e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011362:	b2d2      	uxtb	r2, r2
 8011364:	4923      	ldr	r1, [pc, #140]	@ (80113f4 <StartDisplayTask+0x168>)
 8011366:	a805      	add	r0, sp, #20
 8011368:	f01a fbc8 	bl	802bafc <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801136c:	2201      	movs	r2, #1
 801136e:	4621      	mov	r1, r4
 8011370:	a805      	add	r0, sp, #20
 8011372:	f006 fc41 	bl	8017bf8 <SSD1306_Puts>
	    SSD1306_GotoXY(x=1,y=10);
 8011376:	210a      	movs	r1, #10
 8011378:	2001      	movs	r0, #1
 801137a:	f006 fbe9 	bl	8017b50 <SSD1306_GotoXY>
	    SSD1306_Puts("I=", &Font_7x10, SSD1306_COLOR_WHITE);
 801137e:	2201      	movs	r2, #1
 8011380:	4621      	mov	r1, r4
 8011382:	481d      	ldr	r0, [pc, #116]	@ (80113f8 <StartDisplayTask+0x16c>)
 8011384:	f006 fc38 	bl	8017bf8 <SSD1306_Puts>
	    sprintf(buf,"%d", ++i);
 8011388:	3501      	adds	r5, #1
 801138a:	462a      	mov	r2, r5
 801138c:	491b      	ldr	r1, [pc, #108]	@ (80113fc <StartDisplayTask+0x170>)
 801138e:	a805      	add	r0, sp, #20
 8011390:	f01a fbb4 	bl	802bafc <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011394:	2201      	movs	r2, #1
 8011396:	4621      	mov	r1, r4
 8011398:	a805      	add	r0, sp, #20
 801139a:	f006 fc2d 	bl	8017bf8 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 801139e:	f006 fd1d 	bl	8017ddc <SSD1306_UpdateScreen>
		while(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 80113a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80113a6:	2201      	movs	r2, #1
 80113a8:	2178      	movs	r1, #120	@ 0x78
 80113aa:	4815      	ldr	r0, [pc, #84]	@ (8011400 <StartDisplayTask+0x174>)
 80113ac:	f005 f9de 	bl	801676c <HAL_I2C_IsDeviceReady>
 80113b0:	2800      	cmp	r0, #0
 80113b2:	d0bb      	beq.n	801132c <StartDisplayTask+0xa0>
			HAL_I2C_DeInit(&hi2c1);
 80113b4:	4812      	ldr	r0, [pc, #72]	@ (8011400 <StartDisplayTask+0x174>)
 80113b6:	f005 f903 	bl	80165c0 <HAL_I2C_DeInit>
			vTaskDelay(1000);
 80113ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113be:	f008 f935 	bl	801962c <vTaskDelay>
			MX_I2C1_Init();
 80113c2:	f000 fcdb 	bl	8011d7c <MX_I2C1_Init>
			vTaskDelay(1000);
 80113c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113ca:	f008 f92f 	bl	801962c <vTaskDelay>
			SSD1306_Init ();
 80113ce:	f006 fc5b 	bl	8017c88 <SSD1306_Init>
 80113d2:	e7e6      	b.n	80113a2 <StartDisplayTask+0x116>
 80113d4:	2000010c 	.word	0x2000010c
 80113d8:	08035814 	.word	0x08035814
 80113dc:	08035820 	.word	0x08035820
 80113e0:	0803582c 	.word	0x0803582c
 80113e4:	08035838 	.word	0x08035838
 80113e8:	200008bc 	.word	0x200008bc
 80113ec:	08035840 	.word	0x08035840
 80113f0:	08035860 	.word	0x08035860
 80113f4:	08035864 	.word	0x08035864
 80113f8:	08035874 	.word	0x08035874
 80113fc:	0803a86c 	.word	0x0803a86c
 8011400:	200008c4 	.word	0x200008c4

08011404 <StartSettingsTask>:
{
 8011404:	b570      	push	{r4, r5, r6, lr}
 8011406:	b0ba      	sub	sp, #232	@ 0xe8
	size_t  f_size = 0;
 8011408:	2300      	movs	r3, #0
 801140a:	9339      	str	r3, [sp, #228]	@ 0xe4
  SPI_flash_reg_cb(FlashBegin, FlashEnd, FlashSPIrecvBuff, FlashSPIsendByte);
 801140c:	4b79      	ldr	r3, [pc, #484]	@ (80115f4 <StartSettingsTask+0x1f0>)
 801140e:	4a7a      	ldr	r2, [pc, #488]	@ (80115f8 <StartSettingsTask+0x1f4>)
 8011410:	497a      	ldr	r1, [pc, #488]	@ (80115fc <StartSettingsTask+0x1f8>)
 8011412:	487b      	ldr	r0, [pc, #492]	@ (8011600 <StartSettingsTask+0x1fc>)
 8011414:	f004 f9f2 	bl	80157fc <SPI_flash_reg_cb>
  if (lfs_fs_ll_init(FS_Lock, FS_Unlock) < 0){
 8011418:	497a      	ldr	r1, [pc, #488]	@ (8011604 <StartSettingsTask+0x200>)
 801141a:	487b      	ldr	r0, [pc, #492]	@ (8011608 <StartSettingsTask+0x204>)
 801141c:	f009 f9d6 	bl	801a7cc <lfs_fs_ll_init>
 8011420:	2800      	cmp	r0, #0
 8011422:	db3b      	blt.n	801149c <StartSettingsTask+0x98>
  mg_fs_lfs_mkdir("/web");
 8011424:	4879      	ldr	r0, [pc, #484]	@ (801160c <StartSettingsTask+0x208>)
 8011426:	f009 f9bf 	bl	801a7a8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 801142a:	4c79      	ldr	r4, [pc, #484]	@ (8011610 <StartSettingsTask+0x20c>)
 801142c:	4620      	mov	r0, r4
 801142e:	f009 f9af 	bl	801a790 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 8011432:	4878      	ldr	r0, [pc, #480]	@ (8011614 <StartSettingsTask+0x210>)
 8011434:	f009 f9ac 	bl	801a790 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 8011438:	4620      	mov	r0, r4
 801143a:	f009 f9b5 	bl	801a7a8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 801143e:	4876      	ldr	r0, [pc, #472]	@ (8011618 <StartSettingsTask+0x214>)
 8011440:	f009 f9b2 	bl	801a7a8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/certs");
 8011444:	4875      	ldr	r0, [pc, #468]	@ (801161c <StartSettingsTask+0x218>)
 8011446:	f009 f9af 	bl	801a7a8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/log");
 801144a:	4875      	ldr	r0, [pc, #468]	@ (8011620 <StartSettingsTask+0x21c>)
 801144c:	f009 f9ac 	bl	801a7a8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/auth");
 8011450:	4874      	ldr	r0, [pc, #464]	@ (8011624 <StartSettingsTask+0x220>)
 8011452:	f009 f9a9 	bl	801a7a8 <mg_fs_lfs_mkdir>
  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 8011456:	2200      	movs	r2, #0
 8011458:	a939      	add	r1, sp, #228	@ 0xe4
 801145a:	4873      	ldr	r0, [pc, #460]	@ (8011628 <StartSettingsTask+0x224>)
 801145c:	f009 f8ec 	bl	801a638 <mg_fs_lfs_status>
 8011460:	b1f8      	cbz	r0, 80114a2 <StartSettingsTask+0x9e>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 8011462:	2101      	movs	r1, #1
 8011464:	4870      	ldr	r0, [pc, #448]	@ (8011628 <StartSettingsTask+0x224>)
 8011466:	f009 f925 	bl	801a6b4 <mg_fs_lfs_open>
 801146a:	4604      	mov	r4, r0
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 801146c:	22c6      	movs	r2, #198	@ 0xc6
 801146e:	a907      	add	r1, sp, #28
 8011470:	f009 f950 	bl	801a714 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 8011474:	4620      	mov	r0, r4
 8011476:	f009 f941 	bl	801a6fc <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 801147a:	2200      	movs	r2, #0
 801147c:	f88d 201c 	strb.w	r2, [sp, #28]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011480:	2302      	movs	r3, #2
 8011482:	a907      	add	r1, sp, #28
 8011484:	4869      	ldr	r0, [pc, #420]	@ (801162c <StartSettingsTask+0x228>)
 8011486:	6800      	ldr	r0, [r0, #0]
 8011488:	f007 f8c4 	bl	8018614 <xQueueGenericSend>
  if (mg_fs_lfs_status(WEB_USERS_FILE, &f_size, NULL) == 0){//file not found
 801148c:	2200      	movs	r2, #0
 801148e:	a939      	add	r1, sp, #228	@ 0xe4
 8011490:	4867      	ldr	r0, [pc, #412]	@ (8011630 <StartSettingsTask+0x22c>)
 8011492:	f009 f8d1 	bl	801a638 <mg_fs_lfs_status>
 8011496:	b188      	cbz	r0, 80114bc <StartSettingsTask+0xb8>
{
 8011498:	2400      	movs	r4, #0
 801149a:	e082      	b.n	80115a2 <StartSettingsTask+0x19e>
	  HAL_NVIC_SystemReset(); //TODO fo Release uncomment
 801149c:	f004 fca4 	bl	8015de8 <HAL_NVIC_SystemReset>
 80114a0:	e7c0      	b.n	8011424 <StartSettingsTask+0x20>
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 80114a2:	22c6      	movs	r2, #198	@ 0xc6
 80114a4:	2100      	movs	r1, #0
 80114a6:	a807      	add	r0, sp, #28
 80114a8:	f01a feea 	bl	802c280 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80114ac:	2302      	movs	r3, #2
 80114ae:	2200      	movs	r2, #0
 80114b0:	a907      	add	r1, sp, #28
 80114b2:	485e      	ldr	r0, [pc, #376]	@ (801162c <StartSettingsTask+0x228>)
 80114b4:	6800      	ldr	r0, [r0, #0]
 80114b6:	f007 f8ad 	bl	8018614 <xQueueGenericSend>
 80114ba:	e7e7      	b.n	801148c <StartSettingsTask+0x88>
	  web_users = (users_list_t *)malloc(user_list_size * sizeof(users_list_t));
 80114bc:	f240 609a 	movw	r0, #1690	@ 0x69a
 80114c0:	f008 ff52 	bl	801a368 <pvPortMalloc>
	  if (web_users == NULL) {
 80114c4:	4604      	mov	r4, r0
 80114c6:	b390      	cbz	r0, 801152e <StartSettingsTask+0x12a>
		  logging(L_INFO, "Initialize default login pass for web (admin:admin)'");
 80114c8:	495a      	ldr	r1, [pc, #360]	@ (8011634 <StartSettingsTask+0x230>)
 80114ca:	2001      	movs	r0, #1
 80114cc:	f000 fcea 	bl	8011ea4 <logging>
		  strcpy(web_users[0].user, WEB_ADMIN_DEFAULT);
 80114d0:	4b59      	ldr	r3, [pc, #356]	@ (8011638 <StartSettingsTask+0x234>)
 80114d2:	6818      	ldr	r0, [r3, #0]
 80114d4:	6020      	str	r0, [r4, #0]
 80114d6:	889b      	ldrh	r3, [r3, #4]
 80114d8:	80a3      	strh	r3, [r4, #4]
		  unsigned char pass_digest[] = WEB_ADMIN_PASS_DIGEST;
 80114da:	ad01      	add	r5, sp, #4
 80114dc:	4e57      	ldr	r6, [pc, #348]	@ (801163c <StartSettingsTask+0x238>)
 80114de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80114e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80114e2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80114e6:	f845 0b04 	str.w	r0, [r5], #4
 80114ea:	7029      	strb	r1, [r5, #0]
		  memcpy(web_users[0].pass_digest, pass_digest, sizeof(pass_digest));
 80114ec:	ad01      	add	r5, sp, #4
 80114ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80114f0:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 80114f4:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 80114f8:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 80114fc:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8011500:	6828      	ldr	r0, [r5, #0]
 8011502:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
 8011506:	792b      	ldrb	r3, [r5, #4]
 8011508:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
		  f_pointer = mg_fs_lfs_open(WEB_USERS_FILE, MG_FS_WRITE);
 801150c:	2102      	movs	r1, #2
 801150e:	4848      	ldr	r0, [pc, #288]	@ (8011630 <StartSettingsTask+0x22c>)
 8011510:	f009 f8d0 	bl	801a6b4 <mg_fs_lfs_open>
 8011514:	4605      	mov	r5, r0
		  mg_fs_lfs_write(f_pointer, web_users, user_list_size * sizeof(users_list_t));
 8011516:	f240 629a 	movw	r2, #1690	@ 0x69a
 801151a:	4621      	mov	r1, r4
 801151c:	f009 f906 	bl	801a72c <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8011520:	4628      	mov	r0, r5
 8011522:	f009 f8eb 	bl	801a6fc <mg_fs_lfs_close>
	  free(web_users);
 8011526:	4620      	mov	r0, r4
 8011528:	f008 ffa0 	bl	801a46c <vPortFree>
 801152c:	e7b4      	b.n	8011498 <StartSettingsTask+0x94>
		  logging(L_ERR, "Failed to allocate memory for 'web_users' ");
 801152e:	4944      	ldr	r1, [pc, #272]	@ (8011640 <StartSettingsTask+0x23c>)
 8011530:	2003      	movs	r0, #3
 8011532:	f000 fcb7 	bl	8011ea4 <logging>
 8011536:	e7f6      	b.n	8011526 <StartSettingsTask+0x122>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 8011538:	4d3b      	ldr	r5, [pc, #236]	@ (8011628 <StartSettingsTask+0x224>)
 801153a:	4628      	mov	r0, r5
 801153c:	f009 f928 	bl	801a790 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 8011540:	2102      	movs	r1, #2
 8011542:	4628      	mov	r0, r5
 8011544:	f009 f8b6 	bl	801a6b4 <mg_fs_lfs_open>
 8011548:	4605      	mov	r5, r0
 801154a:	2800      	cmp	r0, #0
 801154c:	d033      	beq.n	80115b6 <StartSettingsTask+0x1b2>
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 801154e:	22c6      	movs	r2, #198	@ 0xc6
 8011550:	a907      	add	r1, sp, #28
 8011552:	f009 f8eb 	bl	801a72c <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 8011556:	4628      	mov	r0, r5
 8011558:	f009 f8d0 	bl	801a6fc <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 801155c:	2200      	movs	r2, #0
 801155e:	f88d 201c 	strb.w	r2, [sp, #28]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011562:	2302      	movs	r3, #2
 8011564:	a907      	add	r1, sp, #28
 8011566:	4831      	ldr	r0, [pc, #196]	@ (801162c <StartSettingsTask+0x228>)
 8011568:	6800      	ldr	r0, [r0, #0]
 801156a:	f007 f853 	bl	8018614 <xQueueGenericSend>
 801156e:	e022      	b.n	80115b6 <StartSettingsTask+0x1b2>
				 osDelay(1);
 8011570:	2001      	movs	r0, #1
 8011572:	f006 fcf0 	bl	8017f56 <osDelay>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 8011576:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801157a:	4832      	ldr	r0, [pc, #200]	@ (8011644 <StartSettingsTask+0x240>)
 801157c:	f004 fda4 	bl	80160c8 <HAL_GPIO_ReadPin>
 8011580:	2800      	cmp	r0, #0
 8011582:	d0f5      	beq.n	8011570 <StartSettingsTask+0x16c>
			 osDelay(1000);
 8011584:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011588:	f006 fce5 	bl	8017f56 <osDelay>
			 mg_fs_lfs_remove(WEB_USERS_FILE);
 801158c:	4828      	ldr	r0, [pc, #160]	@ (8011630 <StartSettingsTask+0x22c>)
 801158e:	f009 f8ff 	bl	801a790 <mg_fs_lfs_remove>
			 HAL_NVIC_SystemReset();
 8011592:	f004 fc29 	bl	8015de8 <HAL_NVIC_SystemReset>
 8011596:	e000      	b.n	801159a <StartSettingsTask+0x196>
		 press_time = 0;
 8011598:	2400      	movs	r4, #0
	  osDelay(1000);
 801159a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801159e:	f006 fcda 	bl	8017f56 <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 80115a2:	2200      	movs	r2, #0
 80115a4:	a907      	add	r1, sp, #28
 80115a6:	4b21      	ldr	r3, [pc, #132]	@ (801162c <StartSettingsTask+0x228>)
 80115a8:	6818      	ldr	r0, [r3, #0]
 80115aa:	f007 fb46 	bl	8018c3a <xQueuePeek>
	  if(mqtt_config.save){
 80115ae:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d1c0      	bne.n	8011538 <StartSettingsTask+0x134>
	 if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){ // If key pressed, more than 8 secons - reset auth file and reset mcu
 80115b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80115ba:	4822      	ldr	r0, [pc, #136]	@ (8011644 <StartSettingsTask+0x240>)
 80115bc:	f004 fd84 	bl	80160c8 <HAL_GPIO_ReadPin>
 80115c0:	2800      	cmp	r0, #0
 80115c2:	d1e9      	bne.n	8011598 <StartSettingsTask+0x194>
		 press_time++;
 80115c4:	3401      	adds	r4, #1
 80115c6:	b2e4      	uxtb	r4, r4
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80115c8:	4d1e      	ldr	r5, [pc, #120]	@ (8011644 <StartSettingsTask+0x240>)
 80115ca:	2201      	movs	r2, #1
 80115cc:	2102      	movs	r1, #2
 80115ce:	4628      	mov	r0, r5
 80115d0:	f004 fd81 	bl	80160d6 <HAL_GPIO_WritePin>
		 osDelay(100);
 80115d4:	2064      	movs	r0, #100	@ 0x64
 80115d6:	f006 fcbe 	bl	8017f56 <osDelay>
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80115da:	2200      	movs	r2, #0
 80115dc:	2102      	movs	r1, #2
 80115de:	4628      	mov	r0, r5
 80115e0:	f004 fd79 	bl	80160d6 <HAL_GPIO_WritePin>
		 if (press_time == 8){
 80115e4:	2c08      	cmp	r4, #8
 80115e6:	d1d8      	bne.n	801159a <StartSettingsTask+0x196>
			 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80115e8:	2201      	movs	r2, #1
 80115ea:	2102      	movs	r1, #2
 80115ec:	4628      	mov	r0, r5
 80115ee:	f004 fd72 	bl	80160d6 <HAL_GPIO_WritePin>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 80115f2:	e7c0      	b.n	8011576 <StartSettingsTask+0x172>
 80115f4:	08011811 	.word	0x08011811
 80115f8:	08011835 	.word	0x08011835
 80115fc:	08011119 	.word	0x08011119
 8011600:	08011105 	.word	0x08011105
 8011604:	08011861 	.word	0x08011861
 8011608:	0801184d 	.word	0x0801184d
 801160c:	08035878 	.word	0x08035878
 8011610:	08035880 	.word	0x08035880
 8011614:	0803588c 	.word	0x0803588c
 8011618:	0803589c 	.word	0x0803589c
 801161c:	080358a8 	.word	0x080358a8
 8011620:	080358b0 	.word	0x080358b0
 8011624:	080358b8 	.word	0x080358b8
 8011628:	080358c0 	.word	0x080358c0
 801162c:	20000898 	.word	0x20000898
 8011630:	080358d4 	.word	0x080358d4
 8011634:	08035910 	.word	0x08035910
 8011638:	08035948 	.word	0x08035948
 801163c:	08035950 	.word	0x08035950
 8011640:	080358e4 	.word	0x080358e4
 8011644:	40020400 	.word	0x40020400

08011648 <RW_parameters_from_queue>:
void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 8011648:	b508      	push	{r3, lr}
	switch (param_type) {
 801164a:	2901      	cmp	r1, #1
 801164c:	d014      	beq.n	8011678 <RW_parameters_from_queue+0x30>
 801164e:	2902      	cmp	r1, #2
 8011650:	d01a      	beq.n	8011688 <RW_parameters_from_queue+0x40>
 8011652:	b101      	cbz	r1, 8011656 <RW_parameters_from_queue+0xe>
}
 8011654:	bd08      	pop	{r3, pc}
			if (direction == S_READ){
 8011656:	b14a      	cbz	r2, 801166c <RW_parameters_from_queue+0x24>
			}else if (direction == S_WRITE){
 8011658:	2a01      	cmp	r2, #1
 801165a:	d1fb      	bne.n	8011654 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(mqttQHandle, pr);
 801165c:	2302      	movs	r3, #2
 801165e:	2200      	movs	r2, #0
 8011660:	4601      	mov	r1, r0
 8011662:	4812      	ldr	r0, [pc, #72]	@ (80116ac <RW_parameters_from_queue+0x64>)
 8011664:	6800      	ldr	r0, [r0, #0]
 8011666:	f006 ffd5 	bl	8018614 <xQueueGenericSend>
 801166a:	e7f3      	b.n	8011654 <RW_parameters_from_queue+0xc>
				xQueuePeek(mqttQHandle, pr, 0);
 801166c:	4601      	mov	r1, r0
 801166e:	4b0f      	ldr	r3, [pc, #60]	@ (80116ac <RW_parameters_from_queue+0x64>)
 8011670:	6818      	ldr	r0, [r3, #0]
 8011672:	f007 fae2 	bl	8018c3a <xQueuePeek>
 8011676:	e7ed      	b.n	8011654 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 8011678:	2a00      	cmp	r2, #0
 801167a:	d1eb      	bne.n	8011654 <RW_parameters_from_queue+0xc>
				xQueuePeek(inputReadQHandle, input, 0);
 801167c:	4601      	mov	r1, r0
 801167e:	4b0c      	ldr	r3, [pc, #48]	@ (80116b0 <RW_parameters_from_queue+0x68>)
 8011680:	6818      	ldr	r0, [r3, #0]
 8011682:	f007 fada 	bl	8018c3a <xQueuePeek>
 8011686:	e7e5      	b.n	8011654 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 8011688:	b14a      	cbz	r2, 801169e <RW_parameters_from_queue+0x56>
			}else if(direction == S_WRITE){
 801168a:	2a01      	cmp	r2, #1
 801168c:	d1e2      	bne.n	8011654 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(outputWriteQHandle, output);
 801168e:	2302      	movs	r3, #2
 8011690:	2200      	movs	r2, #0
 8011692:	4601      	mov	r1, r0
 8011694:	4807      	ldr	r0, [pc, #28]	@ (80116b4 <RW_parameters_from_queue+0x6c>)
 8011696:	6800      	ldr	r0, [r0, #0]
 8011698:	f006 ffbc 	bl	8018614 <xQueueGenericSend>
}
 801169c:	e7da      	b.n	8011654 <RW_parameters_from_queue+0xc>
				xQueuePeek(outputReadQHandle, output, 0);
 801169e:	4601      	mov	r1, r0
 80116a0:	4b05      	ldr	r3, [pc, #20]	@ (80116b8 <RW_parameters_from_queue+0x70>)
 80116a2:	6818      	ldr	r0, [r3, #0]
 80116a4:	f007 fac9 	bl	8018c3a <xQueuePeek>
 80116a8:	e7d4      	b.n	8011654 <RW_parameters_from_queue+0xc>
 80116aa:	bf00      	nop
 80116ac:	20000898 	.word	0x20000898
 80116b0:	200008a4 	.word	0x200008a4
 80116b4:	2000089c 	.word	0x2000089c
 80116b8:	200008a0 	.word	0x200008a0

080116bc <StartLoggingTask>:
{
 80116bc:	b530      	push	{r4, r5, lr}
 80116be:	b0d1      	sub	sp, #324	@ 0x144
	reg_logging_fn(add_log_mess_to_q);
 80116c0:	483e      	ldr	r0, [pc, #248]	@ (80117bc <StartLoggingTask+0x100>)
 80116c2:	f000 fbe3 	bl	8011e8c <reg_logging_fn>
	logger_set_level(L_INFO);
 80116c6:	2001      	movs	r0, #1
 80116c8:	f000 fbe6 	bl	8011e98 <logger_set_level>
	logging(L_INFO, "Device started...");
 80116cc:	493c      	ldr	r1, [pc, #240]	@ (80117c0 <StartLoggingTask+0x104>)
 80116ce:	2001      	movs	r0, #1
 80116d0:	f000 fbe8 	bl	8011ea4 <logging>
	osDelay(2000);
 80116d4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80116d8:	f006 fc3d 	bl	8017f56 <osDelay>
	uint32_t count = 2000;
 80116dc:	f44f 64fa 	mov.w	r4, #2000	@ 0x7d0
 80116e0:	e048      	b.n	8011774 <StartLoggingTask+0xb8>
		  osMessageQueueGet(loggingQHandle, &log, 0, 0);
 80116e2:	2300      	movs	r3, #0
 80116e4:	461a      	mov	r2, r3
 80116e6:	a907      	add	r1, sp, #28
 80116e8:	4836      	ldr	r0, [pc, #216]	@ (80117c4 <StartLoggingTask+0x108>)
 80116ea:	6800      	ldr	r0, [r0, #0]
 80116ec:	f006 fd6d 	bl	80181ca <osMessageQueueGet>
		  f_pointer = mg_fs_lfs_open(LOG_FILE_LOCATION, MG_FS_WRITE);
 80116f0:	2102      	movs	r1, #2
 80116f2:	4835      	ldr	r0, [pc, #212]	@ (80117c8 <StartLoggingTask+0x10c>)
 80116f4:	f008 ffde 	bl	801a6b4 <mg_fs_lfs_open>
 80116f8:	4605      	mov	r5, r0
		  mg_fs_lfs_write(f_pointer, &log.log_text, log.log_len); //
 80116fa:	f89d 211d 	ldrb.w	r2, [sp, #285]	@ 0x11d
 80116fe:	f10d 011d 	add.w	r1, sp, #29
 8011702:	f009 f813 	bl	801a72c <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8011706:	4628      	mov	r0, r5
 8011708:	f008 fff8 	bl	801a6fc <mg_fs_lfs_close>
 801170c:	e038      	b.n	8011780 <StartLoggingTask+0xc4>
    	vPortGetHeapStats(&heap_status);
 801170e:	a848      	add	r0, sp, #288	@ 0x120
 8011710:	f008 feea 	bl	801a4e8 <vPortGetHeapStats>
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
 8011714:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8011716:	9304      	str	r3, [sp, #16]
 8011718:	9b4d      	ldr	r3, [sp, #308]	@ 0x134
 801171a:	9303      	str	r3, [sp, #12]
 801171c:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 801171e:	9302      	str	r3, [sp, #8]
 8011720:	9b4b      	ldr	r3, [sp, #300]	@ 0x12c
 8011722:	9301      	str	r3, [sp, #4]
 8011724:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 8011726:	9300      	str	r3, [sp, #0]
 8011728:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 801172a:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 801172c:	4927      	ldr	r1, [pc, #156]	@ (80117cc <StartLoggingTask+0x110>)
 801172e:	2001      	movs	r0, #1
 8011730:	f000 fbb8 	bl	8011ea4 <logging>
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011734:	4c26      	ldr	r4, [pc, #152]	@ (80117d0 <StartLoggingTask+0x114>)
 8011736:	6863      	ldr	r3, [r4, #4]
 8011738:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 801173a:	0e13      	lsrs	r3, r2, #24
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 801173c:	9301      	str	r3, [sp, #4]
 801173e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011742:	9300      	str	r3, [sp, #0]
 8011744:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011748:	b2d2      	uxtb	r2, r2
 801174a:	4922      	ldr	r1, [pc, #136]	@ (80117d4 <StartLoggingTask+0x118>)
 801174c:	2001      	movs	r0, #1
 801174e:	f000 fba9 	bl	8011ea4 <logging>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8011752:	6861      	ldr	r1, [r4, #4]
 8011754:	780a      	ldrb	r2, [r1, #0]
 8011756:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011758:	7888      	ldrb	r0, [r1, #2]
 801175a:	78cc      	ldrb	r4, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 801175c:	790d      	ldrb	r5, [r1, #4]
 801175e:	7949      	ldrb	r1, [r1, #5]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011760:	9103      	str	r1, [sp, #12]
 8011762:	9502      	str	r5, [sp, #8]
 8011764:	9401      	str	r4, [sp, #4]
 8011766:	9000      	str	r0, [sp, #0]
 8011768:	491b      	ldr	r1, [pc, #108]	@ (80117d8 <StartLoggingTask+0x11c>)
 801176a:	2001      	movs	r0, #1
 801176c:	f000 fb9a 	bl	8011ea4 <logging>
    	count = 0;
 8011770:	2400      	movs	r4, #0
    count ++;
 8011772:	3401      	adds	r4, #1
	  if (osMessageQueueGetCount(loggingQHandle)){
 8011774:	4b13      	ldr	r3, [pc, #76]	@ (80117c4 <StartLoggingTask+0x108>)
 8011776:	6818      	ldr	r0, [r3, #0]
 8011778:	f006 fd68 	bl	801824c <osMessageQueueGetCount>
 801177c:	2800      	cmp	r0, #0
 801177e:	d1b0      	bne.n	80116e2 <StartLoggingTask+0x26>
    osDelay(500);
 8011780:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011784:	f006 fbe7 	bl	8017f56 <osDelay>
    if (count == 2000){
 8011788:	f5b4 6ffa 	cmp.w	r4, #2000	@ 0x7d0
 801178c:	d1f1      	bne.n	8011772 <StartLoggingTask+0xb6>
    	mg_fs_lfs_status(LOG_FILE_LOCATION, &fs_size, NULL);
 801178e:	2200      	movs	r2, #0
 8011790:	a94f      	add	r1, sp, #316	@ 0x13c
 8011792:	480d      	ldr	r0, [pc, #52]	@ (80117c8 <StartLoggingTask+0x10c>)
 8011794:	f008 ff50 	bl	801a638 <mg_fs_lfs_status>
    	if (fs_size > LOG_FILE_MAX_SIZE){
 8011798:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 801179a:	f24c 3350 	movw	r3, #50000	@ 0xc350
 801179e:	429a      	cmp	r2, r3
 80117a0:	d9b5      	bls.n	801170e <StartLoggingTask+0x52>
    		mg_fs_lfs_remove(LOG_FILE_LOCATION_OLD);
 80117a2:	4c0e      	ldr	r4, [pc, #56]	@ (80117dc <StartLoggingTask+0x120>)
 80117a4:	4620      	mov	r0, r4
 80117a6:	f008 fff3 	bl	801a790 <mg_fs_lfs_remove>
    		mg_fs_lfs_rename(LOG_FILE_LOCATION, LOG_FILE_LOCATION_OLD);
 80117aa:	4621      	mov	r1, r4
 80117ac:	4806      	ldr	r0, [pc, #24]	@ (80117c8 <StartLoggingTask+0x10c>)
 80117ae:	f008 ffe3 	bl	801a778 <mg_fs_lfs_rename>
    		logging(L_INFO, "Log file rotated");
 80117b2:	490b      	ldr	r1, [pc, #44]	@ (80117e0 <StartLoggingTask+0x124>)
 80117b4:	2001      	movs	r0, #1
 80117b6:	f000 fb75 	bl	8011ea4 <logging>
 80117ba:	e7a8      	b.n	801170e <StartLoggingTask+0x52>
 80117bc:	08011265 	.word	0x08011265
 80117c0:	08035968 	.word	0x08035968
 80117c4:	20000894 	.word	0x20000894
 80117c8:	0803597c 	.word	0x0803597c
 80117cc:	080359b0 	.word	0x080359b0
 80117d0:	200008bc 	.word	0x200008bc
 80117d4:	08035a44 	.word	0x08035a44
 80117d8:	08035a60 	.word	0x08035a60
 80117dc:	0803598c 	.word	0x0803598c
 80117e0:	0803599c 	.word	0x0803599c

080117e4 <EthTxn>:
uint8_t EthTxn(void *spi, uint8_t data) {
 80117e4:	b500      	push	{lr}
 80117e6:	b087      	sub	sp, #28
 80117e8:	f88d 100f 	strb.w	r1, [sp, #15]
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 80117ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80117f0:	9300      	str	r3, [sp, #0]
 80117f2:	2301      	movs	r3, #1
 80117f4:	f10d 0217 	add.w	r2, sp, #23
 80117f8:	f10d 010f 	add.w	r1, sp, #15
 80117fc:	4803      	ldr	r0, [pc, #12]	@ (801180c <EthTxn+0x28>)
 80117fe:	f005 fe08 	bl	8017412 <HAL_SPI_TransmitReceive>
}
 8011802:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8011806:	b007      	add	sp, #28
 8011808:	f85d fb04 	ldr.w	pc, [sp], #4
 801180c:	2000091c 	.word	0x2000091c

08011810 <FlashSPIsendByte>:
void FlashSPIsendByte(uint8_t byte){
 8011810:	b500      	push	{lr}
 8011812:	b083      	sub	sp, #12
 8011814:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8011818:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801181c:	2201      	movs	r2, #1
 801181e:	f10d 0107 	add.w	r1, sp, #7
 8011822:	4803      	ldr	r0, [pc, #12]	@ (8011830 <FlashSPIsendByte+0x20>)
 8011824:	f005 fd13 	bl	801724e <HAL_SPI_Transmit>
}
 8011828:	b003      	add	sp, #12
 801182a:	f85d fb04 	ldr.w	pc, [sp], #4
 801182e:	bf00      	nop
 8011830:	20000974 	.word	0x20000974

08011834 <FlashSPIrecvBuff>:
int FlashSPIrecvBuff(uint8_t * buffer, uint16_t size){
 8011834:	b508      	push	{r3, lr}
 8011836:	460a      	mov	r2, r1
	return HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8011838:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801183c:	4601      	mov	r1, r0
 801183e:	4802      	ldr	r0, [pc, #8]	@ (8011848 <FlashSPIrecvBuff+0x14>)
 8011840:	f005 ff11 	bl	8017666 <HAL_SPI_Receive>
}
 8011844:	bd08      	pop	{r3, pc}
 8011846:	bf00      	nop
 8011848:	20000974 	.word	0x20000974

0801184c <FS_Lock>:
void FS_Lock(void * param){
 801184c:	b508      	push	{r3, lr}
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 801184e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011852:	4b02      	ldr	r3, [pc, #8]	@ (801185c <FS_Lock+0x10>)
 8011854:	6818      	ldr	r0, [r3, #0]
 8011856:	f006 fbd5 	bl	8018004 <osMutexAcquire>
}
 801185a:	bd08      	pop	{r3, pc}
 801185c:	2000088c 	.word	0x2000088c

08011860 <FS_Unlock>:
void FS_Unlock(void * param){
 8011860:	b508      	push	{r3, lr}
	osMutexRelease(FSMutexHandle);
 8011862:	4b02      	ldr	r3, [pc, #8]	@ (801186c <FS_Unlock+0xc>)
 8011864:	6818      	ldr	r0, [r3, #0]
 8011866:	f006 fbfc 	bl	8018062 <osMutexRelease>
}
 801186a:	bd08      	pop	{r3, pc}
 801186c:	2000088c 	.word	0x2000088c

08011870 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8011870:	b508      	push	{r3, lr}
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 8011872:	4829      	ldr	r0, [pc, #164]	@ (8011918 <MX_FREERTOS_Init+0xa8>)
 8011874:	f006 fb7d 	bl	8017f72 <osMutexNew>
 8011878:	4b28      	ldr	r3, [pc, #160]	@ (801191c <MX_FREERTOS_Init+0xac>)
 801187a:	6018      	str	r0, [r3, #0]
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 801187c:	4828      	ldr	r0, [pc, #160]	@ (8011920 <MX_FREERTOS_Init+0xb0>)
 801187e:	f006 fb78 	bl	8017f72 <osMutexNew>
 8011882:	4b28      	ldr	r3, [pc, #160]	@ (8011924 <MX_FREERTOS_Init+0xb4>)
 8011884:	6018      	str	r0, [r3, #0]
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 8011886:	4a28      	ldr	r2, [pc, #160]	@ (8011928 <MX_FREERTOS_Init+0xb8>)
 8011888:	2103      	movs	r1, #3
 801188a:	2001      	movs	r0, #1
 801188c:	f006 fc10 	bl	80180b0 <osMessageQueueNew>
 8011890:	4b26      	ldr	r3, [pc, #152]	@ (801192c <MX_FREERTOS_Init+0xbc>)
 8011892:	6018      	str	r0, [r3, #0]
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 8011894:	4a26      	ldr	r2, [pc, #152]	@ (8011930 <MX_FREERTOS_Init+0xc0>)
 8011896:	2103      	movs	r1, #3
 8011898:	2001      	movs	r0, #1
 801189a:	f006 fc09 	bl	80180b0 <osMessageQueueNew>
 801189e:	4b25      	ldr	r3, [pc, #148]	@ (8011934 <MX_FREERTOS_Init+0xc4>)
 80118a0:	6018      	str	r0, [r3, #0]
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 80118a2:	4a25      	ldr	r2, [pc, #148]	@ (8011938 <MX_FREERTOS_Init+0xc8>)
 80118a4:	2103      	movs	r1, #3
 80118a6:	2001      	movs	r0, #1
 80118a8:	f006 fc02 	bl	80180b0 <osMessageQueueNew>
 80118ac:	4b23      	ldr	r3, [pc, #140]	@ (801193c <MX_FREERTOS_Init+0xcc>)
 80118ae:	6018      	str	r0, [r3, #0]
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 80118b0:	4a23      	ldr	r2, [pc, #140]	@ (8011940 <MX_FREERTOS_Init+0xd0>)
 80118b2:	21c6      	movs	r1, #198	@ 0xc6
 80118b4:	2001      	movs	r0, #1
 80118b6:	f006 fbfb 	bl	80180b0 <osMessageQueueNew>
 80118ba:	4b22      	ldr	r3, [pc, #136]	@ (8011944 <MX_FREERTOS_Init+0xd4>)
 80118bc:	6018      	str	r0, [r3, #0]
  loggingQHandle = osMessageQueueNew (15, sizeof(log_message_t), &loggingQ_attributes);
 80118be:	4a22      	ldr	r2, [pc, #136]	@ (8011948 <MX_FREERTOS_Init+0xd8>)
 80118c0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80118c4:	200f      	movs	r0, #15
 80118c6:	f006 fbf3 	bl	80180b0 <osMessageQueueNew>
 80118ca:	4b20      	ldr	r3, [pc, #128]	@ (801194c <MX_FREERTOS_Init+0xdc>)
 80118cc:	6018      	str	r0, [r3, #0]
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 80118ce:	4a20      	ldr	r2, [pc, #128]	@ (8011950 <MX_FREERTOS_Init+0xe0>)
 80118d0:	2100      	movs	r1, #0
 80118d2:	4820      	ldr	r0, [pc, #128]	@ (8011954 <MX_FREERTOS_Init+0xe4>)
 80118d4:	f006 fae0 	bl	8017e98 <osThreadNew>
 80118d8:	4b1f      	ldr	r3, [pc, #124]	@ (8011958 <MX_FREERTOS_Init+0xe8>)
 80118da:	6018      	str	r0, [r3, #0]
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 80118dc:	4a1f      	ldr	r2, [pc, #124]	@ (801195c <MX_FREERTOS_Init+0xec>)
 80118de:	2100      	movs	r1, #0
 80118e0:	481f      	ldr	r0, [pc, #124]	@ (8011960 <MX_FREERTOS_Init+0xf0>)
 80118e2:	f006 fad9 	bl	8017e98 <osThreadNew>
 80118e6:	4b1f      	ldr	r3, [pc, #124]	@ (8011964 <MX_FREERTOS_Init+0xf4>)
 80118e8:	6018      	str	r0, [r3, #0]
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 80118ea:	4a1f      	ldr	r2, [pc, #124]	@ (8011968 <MX_FREERTOS_Init+0xf8>)
 80118ec:	2100      	movs	r1, #0
 80118ee:	481f      	ldr	r0, [pc, #124]	@ (801196c <MX_FREERTOS_Init+0xfc>)
 80118f0:	f006 fad2 	bl	8017e98 <osThreadNew>
 80118f4:	4b1e      	ldr	r3, [pc, #120]	@ (8011970 <MX_FREERTOS_Init+0x100>)
 80118f6:	6018      	str	r0, [r3, #0]
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 80118f8:	4a1e      	ldr	r2, [pc, #120]	@ (8011974 <MX_FREERTOS_Init+0x104>)
 80118fa:	2100      	movs	r1, #0
 80118fc:	481e      	ldr	r0, [pc, #120]	@ (8011978 <MX_FREERTOS_Init+0x108>)
 80118fe:	f006 facb 	bl	8017e98 <osThreadNew>
 8011902:	4b1e      	ldr	r3, [pc, #120]	@ (801197c <MX_FREERTOS_Init+0x10c>)
 8011904:	6018      	str	r0, [r3, #0]
  loggingTaskHandle = osThreadNew(StartLoggingTask, NULL, &loggingTask_attributes);
 8011906:	4a1e      	ldr	r2, [pc, #120]	@ (8011980 <MX_FREERTOS_Init+0x110>)
 8011908:	2100      	movs	r1, #0
 801190a:	481e      	ldr	r0, [pc, #120]	@ (8011984 <MX_FREERTOS_Init+0x114>)
 801190c:	f006 fac4 	bl	8017e98 <osThreadNew>
 8011910:	4b1d      	ldr	r3, [pc, #116]	@ (8011988 <MX_FREERTOS_Init+0x118>)
 8011912:	6018      	str	r0, [r3, #0]
}
 8011914:	bd08      	pop	{r3, pc}
 8011916:	bf00      	nop
 8011918:	08035b64 	.word	0x08035b64
 801191c:	20000890 	.word	0x20000890
 8011920:	08035b54 	.word	0x08035b54
 8011924:	2000088c 	.word	0x2000088c
 8011928:	08035bd4 	.word	0x08035bd4
 801192c:	200008a4 	.word	0x200008a4
 8011930:	08035bbc 	.word	0x08035bbc
 8011934:	200008a0 	.word	0x200008a0
 8011938:	08035ba4 	.word	0x08035ba4
 801193c:	2000089c 	.word	0x2000089c
 8011940:	08035b8c 	.word	0x08035b8c
 8011944:	20000898 	.word	0x20000898
 8011948:	08035b74 	.word	0x08035b74
 801194c:	20000894 	.word	0x20000894
 8011950:	08035c7c 	.word	0x08035c7c
 8011954:	080119b5 	.word	0x080119b5
 8011958:	200008b8 	.word	0x200008b8
 801195c:	08035c58 	.word	0x08035c58
 8011960:	0801112d 	.word	0x0801112d
 8011964:	200008b4 	.word	0x200008b4
 8011968:	08035c34 	.word	0x08035c34
 801196c:	0801128d 	.word	0x0801128d
 8011970:	200008b0 	.word	0x200008b0
 8011974:	08035c10 	.word	0x08035c10
 8011978:	08011405 	.word	0x08011405
 801197c:	200008ac 	.word	0x200008ac
 8011980:	08035bec 	.word	0x08035bec
 8011984:	080116bd 	.word	0x080116bd
 8011988:	200008a8 	.word	0x200008a8

0801198c <EthResetBegin>:
void EthResetBegin(void){
 801198c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 801198e:	2200      	movs	r2, #0
 8011990:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011994:	4801      	ldr	r0, [pc, #4]	@ (801199c <EthResetBegin+0x10>)
 8011996:	f004 fb9e 	bl	80160d6 <HAL_GPIO_WritePin>
}
 801199a:	bd08      	pop	{r3, pc}
 801199c:	40020000 	.word	0x40020000

080119a0 <EthResetEnd>:
void EthResetEnd(void){
 80119a0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 80119a2:	2201      	movs	r2, #1
 80119a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80119a8:	4801      	ldr	r0, [pc, #4]	@ (80119b0 <EthResetEnd+0x10>)
 80119aa:	f004 fb94 	bl	80160d6 <HAL_GPIO_WritePin>
}
 80119ae:	bd08      	pop	{r3, pc}
 80119b0:	40020000 	.word	0x40020000

080119b4 <StartEthTask>:
{
 80119b4:	b530      	push	{r4, r5, lr}
 80119b6:	b0eb      	sub	sp, #428	@ 0x1ac
  struct               mg_tcpip_spi spi = {
 80119b8:	ad22      	add	r5, sp, #136	@ 0x88
 80119ba:	4b64      	ldr	r3, [pc, #400]	@ (8011b4c <StartEthTask+0x198>)
 80119bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80119be:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  struct              mg_tcpip_if   mif = {
 80119c2:	ac02      	add	r4, sp, #8
 80119c4:	2280      	movs	r2, #128	@ 0x80
 80119c6:	2100      	movs	r1, #0
 80119c8:	4620      	mov	r0, r4
 80119ca:	f01a fc59 	bl	802c280 <memset>
 80119ce:	2340      	movs	r3, #64	@ 0x40
 80119d0:	f88d 3008 	strb.w	r3, [sp, #8]
 80119d4:	2322      	movs	r3, #34	@ 0x22
 80119d6:	f88d 3009 	strb.w	r3, [sp, #9]
													  *(uint8_t*)(UID_BASE),
 80119da:	4b5d      	ldr	r3, [pc, #372]	@ (8011b50 <StartEthTask+0x19c>)
 80119dc:	7c1a      	ldrb	r2, [r3, #16]
  struct              mg_tcpip_if   mif = {
 80119de:	f88d 200a 	strb.w	r2, [sp, #10]
													  *(uint8_t*)(UID_BASE + 0x02),
 80119e2:	7c9a      	ldrb	r2, [r3, #18]
  struct              mg_tcpip_if   mif = {
 80119e4:	f88d 200b 	strb.w	r2, [sp, #11]
													  *(uint8_t*)(UID_BASE + 0x04),
 80119e8:	7d1a      	ldrb	r2, [r3, #20]
  struct              mg_tcpip_if   mif = {
 80119ea:	f88d 200c 	strb.w	r2, [sp, #12]
													  *(uint8_t*)(UID_BASE + 0x08)
 80119ee:	7e1b      	ldrb	r3, [r3, #24]
  struct              mg_tcpip_if   mif = {
 80119f0:	f88d 300d 	strb.w	r3, [sp, #13]
 80119f4:	2301      	movs	r3, #1
 80119f6:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 80119fa:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80119fe:	4b55      	ldr	r3, [pc, #340]	@ (8011b54 <StartEthTask+0x1a0>)
 8011a00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a02:	950c      	str	r5, [sp, #48]	@ 0x30
  mg_full_info.mgr =  &mgr;
 8011a04:	4b54      	ldr	r3, [pc, #336]	@ (8011b58 <StartEthTask+0x1a4>)
 8011a06:	aa58      	add	r2, sp, #352	@ 0x160
 8011a08:	601a      	str	r2, [r3, #0]
  mg_full_info.mgr_if =  &mif;
 8011a0a:	605c      	str	r4, [r3, #4]
  while (mg_fs_mounted() == 0){
 8011a0c:	e003      	b.n	8011a16 <StartEthTask+0x62>
	  osDelay(500);
 8011a0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011a12:	f006 faa0 	bl	8017f56 <osDelay>
  while (mg_fs_mounted() == 0){
 8011a16:	f008 fed3 	bl	801a7c0 <mg_fs_mounted>
 8011a1a:	2800      	cmp	r0, #0
 8011a1c:	d0f7      	beq.n	8011a0e <StartEthTask+0x5a>
  mg_mgr_init(&mgr);        // Mongoose event manager
 8011a1e:	a858      	add	r0, sp, #352	@ 0x160
 8011a20:	f011 fa5a 	bl	8022ed8 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 8011a24:	4b4d      	ldr	r3, [pc, #308]	@ (8011b5c <StartEthTask+0x1a8>)
 8011a26:	2203      	movs	r2, #3
 8011a28:	601a      	str	r2, [r3, #0]
  web_handler = dash_hdl(); // Get dashboard handler
 8011a2a:	f002 fcc7 	bl	80143bc <dash_hdl>
 8011a2e:	4604      	mov	r4, r0
  while(mif.mtu == 0){
 8011a30:	e00f      	b.n	8011a52 <StartEthTask+0x9e>
	  EthResetBegin();
 8011a32:	f7ff ffab 	bl	801198c <EthResetBegin>
	  osDelay(500);
 8011a36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011a3a:	f006 fa8c 	bl	8017f56 <osDelay>
	  EthResetEnd();
 8011a3e:	f7ff ffaf 	bl	80119a0 <EthResetEnd>
	  osDelay(2000);
 8011a42:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8011a46:	f006 fa86 	bl	8017f56 <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 8011a4a:	a902      	add	r1, sp, #8
 8011a4c:	a858      	add	r0, sp, #352	@ 0x160
 8011a4e:	f016 fe39 	bl	80286c4 <mg_tcpip_init>
  while(mif.mtu == 0){
 8011a52:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d0eb      	beq.n	8011a32 <StartEthTask+0x7e>
  set_device_id(mif.mac, sizeof(mif.mac));
 8011a5a:	2106      	movs	r1, #6
 8011a5c:	a802      	add	r0, sp, #8
 8011a5e:	f003 f8d9 	bl	8014c14 <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 8011a62:	483f      	ldr	r0, [pc, #252]	@ (8011b60 <StartEthTask+0x1ac>)
 8011a64:	f002 fcb8 	bl	80143d8 <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8011a68:	4b3b      	ldr	r3, [pc, #236]	@ (8011b58 <StartEthTask+0x1a4>)
 8011a6a:	4622      	mov	r2, r4
 8011a6c:	493d      	ldr	r1, [pc, #244]	@ (8011b64 <StartEthTask+0x1b0>)
 8011a6e:	a858      	add	r0, sp, #352	@ 0x160
 8011a70:	f015 f856 	bl	8026b20 <mg_http_listen>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011a74:	e006      	b.n	8011a84 <StartEthTask+0xd0>
    mg_mgr_poll(&mgr, 1);
 8011a76:	2101      	movs	r1, #1
 8011a78:	a858      	add	r0, sp, #352	@ 0x160
 8011a7a:	f017 fbbd 	bl	80291f8 <mg_mgr_poll>
    osDelay(1);
 8011a7e:	2001      	movs	r0, #1
 8011a80:	f006 fa69 	bl	8017f56 <osDelay>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011a84:	f89d 3084 	ldrb.w	r3, [sp, #132]	@ 0x84
 8011a88:	2b03      	cmp	r3, #3
 8011a8a:	d1f4      	bne.n	8011a76 <StartEthTask+0xc2>
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011a8c:	4b32      	ldr	r3, [pc, #200]	@ (8011b58 <StartEthTask+0x1a4>)
 8011a8e:	685b      	ldr	r3, [r3, #4]
 8011a90:	689a      	ldr	r2, [r3, #8]
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011a92:	0e13      	lsrs	r3, r2, #24
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011a94:	9301      	str	r3, [sp, #4]
 8011a96:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011a9a:	9300      	str	r3, [sp, #0]
 8011a9c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011aa0:	b2d2      	uxtb	r2, r2
 8011aa2:	4931      	ldr	r1, [pc, #196]	@ (8011b68 <StartEthTask+0x1b4>)
 8011aa4:	2001      	movs	r0, #1
 8011aa6:	f000 f9fd 	bl	8011ea4 <logging>
  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 8011aaa:	2200      	movs	r2, #0
 8011aac:	4611      	mov	r1, r2
 8011aae:	a826      	add	r0, sp, #152	@ 0x98
 8011ab0:	f7ff fdca 	bl	8011648 <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 8011ab4:	f89d 3099 	ldrb.w	r3, [sp, #153]	@ 0x99
 8011ab8:	b1eb      	cbz	r3, 8011af6 <StartEthTask+0x142>
	  logging(L_INFO, "MQTT function enabled.");
 8011aba:	492c      	ldr	r1, [pc, #176]	@ (8011b6c <StartEthTask+0x1b8>)
 8011abc:	2001      	movs	r0, #1
 8011abe:	f000 f9f1 	bl	8011ea4 <logging>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 8011ac2:	4b27      	ldr	r3, [pc, #156]	@ (8011b60 <StartEthTask+0x1ac>)
 8011ac4:	9301      	str	r3, [sp, #4]
 8011ac6:	f20d 133d 	addw	r3, sp, #317	@ 0x13d
 8011aca:	9300      	str	r3, [sp, #0]
 8011acc:	ab47      	add	r3, sp, #284	@ 0x11c
 8011ace:	f10d 029a 	add.w	r2, sp, #154	@ 0x9a
 8011ad2:	a902      	add	r1, sp, #8
 8011ad4:	a858      	add	r0, sp, #352	@ 0x160
 8011ad6:	f002 ffdb 	bl	8014a90 <mqtt_init>
  start_sntp(&mgr);
 8011ada:	a858      	add	r0, sp, #352	@ 0x160
 8011adc:	f003 fc70 	bl	80153c0 <start_sntp>
  ssdp_start_server(&mgr, &mif);
 8011ae0:	a902      	add	r1, sp, #8
 8011ae2:	a858      	add	r0, sp, #352	@ 0x160
 8011ae4:	f003 fe38 	bl	8015758 <ssdp_start_server>
  init_mb_tcp(&mgr);
 8011ae8:	a858      	add	r0, sp, #352	@ 0x160
 8011aea:	f001 f819 	bl	8012b20 <init_mb_tcp>
  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 8011aee:	f007 fc8f 	bl	8019410 <xTaskGetTickCount>
 8011af2:	4605      	mov	r5, r0
 8011af4:	e008      	b.n	8011b08 <StartEthTask+0x154>
	  logging(L_INFO, "MQTT function disabled");
 8011af6:	491e      	ldr	r1, [pc, #120]	@ (8011b70 <StartEthTask+0x1bc>)
 8011af8:	2001      	movs	r0, #1
 8011afa:	f000 f9d3 	bl	8011ea4 <logging>
 8011afe:	e7ec      	b.n	8011ada <StartEthTask+0x126>
      osDelay(1);
 8011b00:	2001      	movs	r0, #1
 8011b02:	f006 fa28 	bl	8017f56 <osDelay>
	  last_tick = current_tick; // обновляем значение тиков
 8011b06:	4625      	mov	r5, r4
	  TickType_t current_tick = xTaskGetTickCount();
 8011b08:	f007 fc82 	bl	8019410 <xTaskGetTickCount>
 8011b0c:	4604      	mov	r4, r0
	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 8011b0e:	1b41      	subs	r1, r0, r5
 8011b10:	a858      	add	r0, sp, #352	@ 0x160
 8011b12:	f017 fb71 	bl	80291f8 <mg_mgr_poll>
      while (mif.driver->up(&mif) == false){
 8011b16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b18:	68db      	ldr	r3, [r3, #12]
 8011b1a:	a802      	add	r0, sp, #8
 8011b1c:	4798      	blx	r3
 8011b1e:	2800      	cmp	r0, #0
 8011b20:	d1ee      	bne.n	8011b00 <StartEthTask+0x14c>
    	  EthResetBegin(); //enable reset state w5500
 8011b22:	f7ff ff33 	bl	801198c <EthResetBegin>
    	  osDelay(100);
 8011b26:	2064      	movs	r0, #100	@ 0x64
 8011b28:	f006 fa15 	bl	8017f56 <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 8011b2c:	f7ff ff38 	bl	80119a0 <EthResetEnd>
    	  osDelay(3000);
 8011b30:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011b34:	f006 fa0f 	bl	8017f56 <osDelay>
    	  mif.driver->init(&mif);
 8011b38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	a802      	add	r0, sp, #8
 8011b3e:	4798      	blx	r3
    	  osDelay(7000);
 8011b40:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8011b44:	f006 fa07 	bl	8017f56 <osDelay>
 8011b48:	e7e5      	b.n	8011b16 <StartEthTask+0x162>
 8011b4a:	bf00      	nop
 8011b4c:	080355b4 	.word	0x080355b4
 8011b50:	1fff7a00 	.word	0x1fff7a00
 8011b54:	20000118 	.word	0x20000118
 8011b58:	200008bc 	.word	0x200008bc
 8011b5c:	2000012c 	.word	0x2000012c
 8011b60:	08011649 	.word	0x08011649
 8011b64:	08035a88 	.word	0x08035a88
 8011b68:	08035a44 	.word	0x08035a44
 8011b6c:	08035a9c 	.word	0x08035a9c
 8011b70:	08035ab4 	.word	0x08035ab4

08011b74 <eMBRegDiscreteCB>:
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete){

	eMBErrorCode eStatus = MB_ENOERR;

	//usAddress --; /* to c-style address */
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011b74:	b20b      	sxth	r3, r1
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	dd20      	ble.n	8011bbc <eMBRegDiscreteCB+0x48>
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete){
 8011b7a:	b570      	push	{r4, r5, r6, lr}
 8011b7c:	b082      	sub	sp, #8
 8011b7e:	4606      	mov	r6, r0
 8011b80:	4615      	mov	r5, r2
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011b82:	188b      	adds	r3, r1, r2
 8011b84:	2b04      	cmp	r3, #4
 8011b86:	dd02      	ble.n	8011b8e <eMBRegDiscreteCB+0x1a>

		for(int i = usAddress; i < usNDiscrete; i++){
			xMBUtilSetBits( pucRegBuffer, i, 1, input[i] );
		}
	}else{
		eStatus = MB_ENOREG;
 8011b88:	2001      	movs	r0, #1
	}
	return eStatus;
}
 8011b8a:	b002      	add	sp, #8
 8011b8c:	bd70      	pop	{r4, r5, r6, pc}
		usAddress --; /* to c-style address */
 8011b8e:	1e4c      	subs	r4, r1, #1
 8011b90:	b2a4      	uxth	r4, r4
		RW_parameters_from_queue(input, S_INPUTS, S_READ);
 8011b92:	2200      	movs	r2, #0
 8011b94:	2101      	movs	r1, #1
 8011b96:	a801      	add	r0, sp, #4
 8011b98:	f7ff fd56 	bl	8011648 <RW_parameters_from_queue>
		for(int i = usAddress; i < usNDiscrete; i++){
 8011b9c:	e00a      	b.n	8011bb4 <eMBRegDiscreteCB+0x40>
			xMBUtilSetBits( pucRegBuffer, i, 1, input[i] );
 8011b9e:	f104 0308 	add.w	r3, r4, #8
 8011ba2:	446b      	add	r3, sp
 8011ba4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8011ba8:	2201      	movs	r2, #1
 8011baa:	b2a1      	uxth	r1, r4
 8011bac:	4630      	mov	r0, r6
 8011bae:	f000 fe2d 	bl	801280c <xMBUtilSetBits>
		for(int i = usAddress; i < usNDiscrete; i++){
 8011bb2:	3401      	adds	r4, #1
 8011bb4:	42a5      	cmp	r5, r4
 8011bb6:	dcf2      	bgt.n	8011b9e <eMBRegDiscreteCB+0x2a>
	eMBErrorCode eStatus = MB_ENOERR;
 8011bb8:	2000      	movs	r0, #0
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011bba:	e7e6      	b.n	8011b8a <eMBRegDiscreteCB+0x16>
		eStatus = MB_ENOREG;
 8011bbc:	2001      	movs	r0, #1
}
 8011bbe:	4770      	bx	lr

08011bc0 <eMBRegCoilsCB>:

eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode)
{
 8011bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bc2:	b083      	sub	sp, #12
 8011bc4:	4616      	mov	r6, r2
	eMBErrorCode eStatus = MB_ENOERR;

	if (((int16_t) usAddress >= OUTPUTS_FIRST_INDEX) && (usAddress + usNCoils <= OUTPUTS_FIRST_INDEX + OUTPUTS_COUNT)){
 8011bc6:	b20a      	sxth	r2, r1
 8011bc8:	2a00      	cmp	r2, #0
 8011bca:	dd43      	ble.n	8011c54 <eMBRegCoilsCB+0x94>
 8011bcc:	4605      	mov	r5, r0
 8011bce:	461f      	mov	r7, r3
 8011bd0:	198b      	adds	r3, r1, r6
 8011bd2:	2b04      	cmp	r3, #4
 8011bd4:	dc41      	bgt.n	8011c5a <eMBRegCoilsCB+0x9a>
		outputs_state_t outputs;

		switch (eMode) {
 8011bd6:	b327      	cbz	r7, 8011c22 <eMBRegCoilsCB+0x62>
 8011bd8:	2f01      	cmp	r7, #1
 8011bda:	d139      	bne.n	8011c50 <eMBRegCoilsCB+0x90>

			case MB_REG_WRITE:
				usAddress --; /* to c-style address */
 8011bdc:	3901      	subs	r1, #1
 8011bde:	b28c      	uxth	r4, r1
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_READ);
 8011be0:	2200      	movs	r2, #0
 8011be2:	2102      	movs	r1, #2
 8011be4:	a801      	add	r0, sp, #4
 8011be6:	f7ff fd2f 	bl	8011648 <RW_parameters_from_queue>
				for(int i = usAddress; i < usNCoils + usAddress; i++){
 8011bea:	4627      	mov	r7, r4
 8011bec:	e00f      	b.n	8011c0e <eMBRegCoilsCB+0x4e>
					UCHAR wbit = xMBUtilGetBits(pucRegBuffer, i, 1 );
 8011bee:	2201      	movs	r2, #1
 8011bf0:	b2b9      	uxth	r1, r7
 8011bf2:	4628      	mov	r0, r5
 8011bf4:	f000 fe3e 	bl	8012874 <xMBUtilGetBits>
					outputs[i] = xMBUtilGetBits(pucRegBuffer, 0, 1 );
 8011bf8:	2201      	movs	r2, #1
 8011bfa:	2100      	movs	r1, #0
 8011bfc:	4628      	mov	r0, r5
 8011bfe:	f000 fe39 	bl	8012874 <xMBUtilGetBits>
 8011c02:	f107 0308 	add.w	r3, r7, #8
 8011c06:	446b      	add	r3, sp
 8011c08:	f803 0c04 	strb.w	r0, [r3, #-4]
				for(int i = usAddress; i < usNCoils + usAddress; i++){
 8011c0c:	3701      	adds	r7, #1
 8011c0e:	1933      	adds	r3, r6, r4
 8011c10:	42bb      	cmp	r3, r7
 8011c12:	dcec      	bgt.n	8011bee <eMBRegCoilsCB+0x2e>
					//xMBUtilSetBits( pucRegBuffer, i, 1, outputs[i] );
				}
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_WRITE);
 8011c14:	2201      	movs	r2, #1
 8011c16:	2102      	movs	r1, #2
 8011c18:	a801      	add	r0, sp, #4
 8011c1a:	f7ff fd15 	bl	8011648 <RW_parameters_from_queue>
				return MB_ENOERR;
 8011c1e:	2000      	movs	r0, #0
 8011c20:	e019      	b.n	8011c56 <eMBRegCoilsCB+0x96>
				break;
			case MB_REG_READ:
				usAddress --; /* to c-style address */
 8011c22:	1e4c      	subs	r4, r1, #1
 8011c24:	b2a4      	uxth	r4, r4
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_READ);
 8011c26:	2200      	movs	r2, #0
 8011c28:	2102      	movs	r1, #2
 8011c2a:	a801      	add	r0, sp, #4
 8011c2c:	f7ff fd0c 	bl	8011648 <RW_parameters_from_queue>
				for(int i = usAddress; i < usNCoils; i++){
 8011c30:	e00a      	b.n	8011c48 <eMBRegCoilsCB+0x88>
					xMBUtilSetBits( pucRegBuffer, i, 1, outputs[i] );
 8011c32:	f104 0308 	add.w	r3, r4, #8
 8011c36:	446b      	add	r3, sp
 8011c38:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8011c3c:	2201      	movs	r2, #1
 8011c3e:	b2a1      	uxth	r1, r4
 8011c40:	4628      	mov	r0, r5
 8011c42:	f000 fde3 	bl	801280c <xMBUtilSetBits>
				for(int i = usAddress; i < usNCoils; i++){
 8011c46:	3401      	adds	r4, #1
 8011c48:	42a6      	cmp	r6, r4
 8011c4a:	dcf2      	bgt.n	8011c32 <eMBRegCoilsCB+0x72>
				}
				return MB_ENOERR;
 8011c4c:	4638      	mov	r0, r7
 8011c4e:	e002      	b.n	8011c56 <eMBRegCoilsCB+0x96>
		switch (eMode) {
 8011c50:	2001      	movs	r0, #1
				break;
			default:
				return MB_ENOREG;
				break;
 8011c52:	e000      	b.n	8011c56 <eMBRegCoilsCB+0x96>
		}
	}
	return MB_ENOREG;
 8011c54:	2001      	movs	r0, #1
}
 8011c56:	b003      	add	sp, #12
 8011c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return MB_ENOREG;
 8011c5a:	2001      	movs	r0, #1
 8011c5c:	e7fb      	b.n	8011c56 <eMBRegCoilsCB+0x96>

08011c5e <eMBRegInputCB>:

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	return MB_ENOREG;
}
 8011c5e:	2001      	movs	r0, #1
 8011c60:	4770      	bx	lr

08011c62 <eMBRegHoldingCB>:

eMBErrorCode eMBRegHoldingCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)
{
	return MB_ENOREG;
}
 8011c62:	2001      	movs	r0, #1
 8011c64:	4770      	bx	lr
	...

08011c68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8011c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c6c:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011c6e:	2400      	movs	r4, #0
 8011c70:	9403      	str	r4, [sp, #12]
 8011c72:	9404      	str	r4, [sp, #16]
 8011c74:	9405      	str	r4, [sp, #20]
 8011c76:	9406      	str	r4, [sp, #24]
 8011c78:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011c7a:	9400      	str	r4, [sp, #0]
 8011c7c:	4b3c      	ldr	r3, [pc, #240]	@ (8011d70 <MX_GPIO_Init+0x108>)
 8011c7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011c80:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8011c84:	631a      	str	r2, [r3, #48]	@ 0x30
 8011c86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011c88:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8011c8c:	9200      	str	r2, [sp, #0]
 8011c8e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011c90:	9401      	str	r4, [sp, #4]
 8011c92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011c94:	f042 0201 	orr.w	r2, r2, #1
 8011c98:	631a      	str	r2, [r3, #48]	@ 0x30
 8011c9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011c9c:	f002 0201 	and.w	r2, r2, #1
 8011ca0:	9201      	str	r2, [sp, #4]
 8011ca2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011ca4:	9402      	str	r4, [sp, #8]
 8011ca6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011ca8:	f042 0202 	orr.w	r2, r2, #2
 8011cac:	631a      	str	r2, [r3, #48]	@ 0x30
 8011cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cb0:	f003 0302 	and.w	r3, r3, #2
 8011cb4:	9302      	str	r3, [sp, #8]
 8011cb6:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 8011cb8:	4e2e      	ldr	r6, [pc, #184]	@ (8011d74 <MX_GPIO_Init+0x10c>)
 8011cba:	4622      	mov	r2, r4
 8011cbc:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8011cc0:	4630      	mov	r0, r6
 8011cc2:	f004 fa08 	bl	80160d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8011cc6:	4d2c      	ldr	r5, [pc, #176]	@ (8011d78 <MX_GPIO_Init+0x110>)
 8011cc8:	4622      	mov	r2, r4
 8011cca:	2107      	movs	r1, #7
 8011ccc:	4628      	mov	r0, r5
 8011cce:	f004 fa02 	bl	80160d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8011cd2:	2201      	movs	r2, #1
 8011cd4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011cd8:	4628      	mov	r0, r5
 8011cda:	f004 f9fc 	bl	80160d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8011cde:	2201      	movs	r2, #1
 8011ce0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011ce4:	4630      	mov	r0, r6
 8011ce6:	f004 f9f6 	bl	80160d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 8011cea:	f04f 0907 	mov.w	r9, #7
 8011cee:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011cf2:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011cf4:	f04f 0802 	mov.w	r8, #2
 8011cf8:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011cfc:	a903      	add	r1, sp, #12
 8011cfe:	4630      	mov	r0, r6
 8011d00:	f004 f876 	bl	8015df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 8011d04:	23e0      	movs	r3, #224	@ 0xe0
 8011d06:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d08:	2701      	movs	r7, #1
 8011d0a:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d0c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d0e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d10:	a903      	add	r1, sp, #12
 8011d12:	4630      	mov	r0, r6
 8011d14:	f004 f86c 	bl	8015df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8011d18:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d1c:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d1e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d20:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011d22:	a903      	add	r1, sp, #12
 8011d24:	4628      	mov	r0, r5
 8011d26:	f004 f863 	bl	8015df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8011d2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011d2e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d30:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d32:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011d34:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8011d38:	a903      	add	r1, sp, #12
 8011d3a:	4628      	mov	r0, r5
 8011d3c:	f004 f858 	bl	8015df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 8011d40:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8011d44:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d46:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d48:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011d4a:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d4e:	a903      	add	r1, sp, #12
 8011d50:	4630      	mov	r0, r6
 8011d52:	f004 f84d 	bl	8015df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8011d56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011d5a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011d5c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d5e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8011d60:	a903      	add	r1, sp, #12
 8011d62:	4628      	mov	r0, r5
 8011d64:	f004 f844 	bl	8015df0 <HAL_GPIO_Init>

}
 8011d68:	b009      	add	sp, #36	@ 0x24
 8011d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d6e:	bf00      	nop
 8011d70:	40023800 	.word	0x40023800
 8011d74:	40020000 	.word	0x40020000
 8011d78:	40020400 	.word	0x40020400

08011d7c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8011d7c:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8011d7e:	480b      	ldr	r0, [pc, #44]	@ (8011dac <MX_I2C1_Init+0x30>)
 8011d80:	4b0b      	ldr	r3, [pc, #44]	@ (8011db0 <MX_I2C1_Init+0x34>)
 8011d82:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 200000;
 8011d84:	4b0b      	ldr	r3, [pc, #44]	@ (8011db4 <MX_I2C1_Init+0x38>)
 8011d86:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8011d88:	2300      	movs	r3, #0
 8011d8a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8011d8c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011d8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8011d92:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011d94:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8011d96:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011d98:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011d9a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8011d9c:	f004 fb32 	bl	8016404 <HAL_I2C_Init>
 8011da0:	b900      	cbnz	r0, 8011da4 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8011da2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011da4:	f000 f928 	bl	8011ff8 <Error_Handler>
}
 8011da8:	e7fb      	b.n	8011da2 <MX_I2C1_Init+0x26>
 8011daa:	bf00      	nop
 8011dac:	200008c4 	.word	0x200008c4
 8011db0:	40005400 	.word	0x40005400
 8011db4:	00030d40 	.word	0x00030d40

08011db8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8011db8:	b530      	push	{r4, r5, lr}
 8011dba:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	9303      	str	r3, [sp, #12]
 8011dc0:	9304      	str	r3, [sp, #16]
 8011dc2:	9305      	str	r3, [sp, #20]
 8011dc4:	9306      	str	r3, [sp, #24]
 8011dc6:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8011dc8:	6802      	ldr	r2, [r0, #0]
 8011dca:	4b15      	ldr	r3, [pc, #84]	@ (8011e20 <HAL_I2C_MspInit+0x68>)
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	d001      	beq.n	8011dd4 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8011dd0:	b009      	add	sp, #36	@ 0x24
 8011dd2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011dd4:	2500      	movs	r5, #0
 8011dd6:	9501      	str	r5, [sp, #4]
 8011dd8:	4c12      	ldr	r4, [pc, #72]	@ (8011e24 <HAL_I2C_MspInit+0x6c>)
 8011dda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011ddc:	f043 0302 	orr.w	r3, r3, #2
 8011de0:	6323      	str	r3, [r4, #48]	@ 0x30
 8011de2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011de4:	f003 0302 	and.w	r3, r3, #2
 8011de8:	9301      	str	r3, [sp, #4]
 8011dea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8011dec:	23c0      	movs	r3, #192	@ 0xc0
 8011dee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011df0:	2312      	movs	r3, #18
 8011df2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011df4:	2301      	movs	r3, #1
 8011df6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011df8:	2303      	movs	r3, #3
 8011dfa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8011dfc:	2304      	movs	r3, #4
 8011dfe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011e00:	a903      	add	r1, sp, #12
 8011e02:	4809      	ldr	r0, [pc, #36]	@ (8011e28 <HAL_I2C_MspInit+0x70>)
 8011e04:	f003 fff4 	bl	8015df0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8011e08:	9502      	str	r5, [sp, #8]
 8011e0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011e0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011e10:	6423      	str	r3, [r4, #64]	@ 0x40
 8011e12:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011e18:	9302      	str	r3, [sp, #8]
 8011e1a:	9b02      	ldr	r3, [sp, #8]
}
 8011e1c:	e7d8      	b.n	8011dd0 <HAL_I2C_MspInit+0x18>
 8011e1e:	bf00      	nop
 8011e20:	40005400 	.word	0x40005400
 8011e24:	40023800 	.word	0x40023800
 8011e28:	40020400 	.word	0x40020400

08011e2c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 8011e2c:	6802      	ldr	r2, [r0, #0]
 8011e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8011e58 <HAL_I2C_MspDeInit+0x2c>)
 8011e30:	429a      	cmp	r2, r3
 8011e32:	d000      	beq.n	8011e36 <HAL_I2C_MspDeInit+0xa>
 8011e34:	4770      	bx	lr
{
 8011e36:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8011e38:	4a08      	ldr	r2, [pc, #32]	@ (8011e5c <HAL_I2C_MspDeInit+0x30>)
 8011e3a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011e3c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011e40:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8011e42:	4c07      	ldr	r4, [pc, #28]	@ (8011e60 <HAL_I2C_MspDeInit+0x34>)
 8011e44:	2140      	movs	r1, #64	@ 0x40
 8011e46:	4620      	mov	r0, r4
 8011e48:	f004 f8b6 	bl	8015fb8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8011e4c:	2180      	movs	r1, #128	@ 0x80
 8011e4e:	4620      	mov	r0, r4
 8011e50:	f004 f8b2 	bl	8015fb8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8011e54:	bd10      	pop	{r4, pc}
 8011e56:	bf00      	nop
 8011e58:	40005400 	.word	0x40005400
 8011e5c:	40023800 	.word	0x40023800
 8011e60:	40020400 	.word	0x40020400

08011e64 <proto>:
#define time_ms_now() mg_now()

logging_level_t _level_ = L_DEBUG;
const char *level_strings[] = {"DEBUG", "INFO", "WARNING", "ERROR"};

static void proto(struct log_message mess ){};
 8011e64:	b084      	sub	sp, #16
 8011e66:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011e6a:	b004      	add	sp, #16
 8011e6c:	4770      	bx	lr

08011e6e <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 8011e6e:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8011e70:	fb01 f400 	mul.w	r4, r1, r0
 8011e74:	4620      	mov	r0, r4
 8011e76:	f008 fa77 	bl	801a368 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8011e7a:	4605      	mov	r5, r0
 8011e7c:	b118      	cbz	r0, 8011e86 <mg_calloc+0x18>
 8011e7e:	4622      	mov	r2, r4
 8011e80:	2100      	movs	r1, #0
 8011e82:	f01a f9fd 	bl	802c280 <memset>
  return p;
}
 8011e86:	4628      	mov	r0, r5
 8011e88:	bd38      	pop	{r3, r4, r5, pc}
	...

08011e8c <reg_logging_fn>:

void (*_send_log_mess)(struct log_message mess) = proto;


void reg_logging_fn(void (* fn)(struct log_message)){
	if (fn != NULL){
 8011e8c:	b108      	cbz	r0, 8011e92 <reg_logging_fn+0x6>
		_send_log_mess = fn;
 8011e8e:	4a01      	ldr	r2, [pc, #4]	@ (8011e94 <reg_logging_fn+0x8>)
 8011e90:	6010      	str	r0, [r2, #0]
	}
}
 8011e92:	4770      	bx	lr
 8011e94:	20000000 	.word	0x20000000

08011e98 <logger_set_level>:

void logger_set_level(logging_level_t l){
	_level_ = l;
 8011e98:	4b01      	ldr	r3, [pc, #4]	@ (8011ea0 <logger_set_level+0x8>)
 8011e9a:	7018      	strb	r0, [r3, #0]
}
 8011e9c:	4770      	bx	lr
 8011e9e:	bf00      	nop
 8011ea0:	20000918 	.word	0x20000918

08011ea4 <logging>:

void logging(logging_level_t level, const char *format, ...){
 8011ea4:	b40e      	push	{r1, r2, r3}
 8011ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ea8:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
    int formatted_len;
    int time_len;

    char * tmp_buf = NULL;

    if (level < _level_) return;
 8011eac:	4b44      	ldr	r3, [pc, #272]	@ (8011fc0 <logging+0x11c>)
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	4283      	cmp	r3, r0
 8011eb2:	d905      	bls.n	8011ec0 <logging+0x1c>
    if (_send_log_mess) {
        _send_log_mess(mess);
    }

    free(tmp_buf);
}
 8011eb4:	f50d 7d1c 	add.w	sp, sp, #624	@ 0x270
 8011eb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011ebc:	b003      	add	sp, #12
 8011ebe:	4770      	bx	lr
 8011ec0:	4604      	mov	r4, r0
    tmp_buf = calloc(LOG_MES_TEXT_LEN, sizeof(char));
 8011ec2:	2101      	movs	r1, #1
 8011ec4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8011ec8:	f7ff ffd1 	bl	8011e6e <mg_calloc>
    if (!tmp_buf){
 8011ecc:	4605      	mov	r5, r0
 8011ece:	2800      	cmp	r0, #0
 8011ed0:	d0f0      	beq.n	8011eb4 <logging+0x10>
    memset(&mess, 0, sizeof(log_message_t));
 8011ed2:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8011ed6:	2100      	movs	r1, #0
 8011ed8:	a85b      	add	r0, sp, #364	@ 0x16c
 8011eda:	f01a f9d1 	bl	802c280 <memset>
    mess.log_level = level;
 8011ede:	f88d 416c 	strb.w	r4, [sp, #364]	@ 0x16c
    double ms_now = time_ms_now();
 8011ee2:	f017 fa1d 	bl	8029320 <mg_now>
 8011ee6:	f7fe fb69 	bl	80105bc <__aeabi_ul2d>
 8011eea:	4606      	mov	r6, r0
 8011eec:	460f      	mov	r7, r1
    time_t now = (time_t)(ms_now / 1000.0);
 8011eee:	2200      	movs	r2, #0
 8011ef0:	4b34      	ldr	r3, [pc, #208]	@ (8011fc4 <logging+0x120>)
 8011ef2:	f7fe fcc3 	bl	801087c <__aeabi_ddiv>
 8011ef6:	f7fe ff5b 	bl	8010db0 <__aeabi_d2lz>
 8011efa:	e9cd 0158 	strd	r0, r1, [sp, #352]	@ 0x160
    localtime_r(&now, &tm_info);
 8011efe:	a94f      	add	r1, sp, #316	@ 0x13c
 8011f00:	a858      	add	r0, sp, #352	@ 0x160
 8011f02:	f01a fa53 	bl	802c3ac <localtime_r>
    time_len = strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", &tm_info);
 8011f06:	ab4f      	add	r3, sp, #316	@ 0x13c
 8011f08:	4a2f      	ldr	r2, [pc, #188]	@ (8011fc8 <logging+0x124>)
 8011f0a:	2140      	movs	r1, #64	@ 0x40
 8011f0c:	a83f      	add	r0, sp, #252	@ 0xfc
 8011f0e:	f01b f85f 	bl	802cfd0 <strftime>
 8011f12:	4604      	mov	r4, r0
    int millis = (int)(ms_now) % 1000;
 8011f14:	4630      	mov	r0, r6
 8011f16:	4639      	mov	r1, r7
 8011f18:	f7fe fe36 	bl	8010b88 <__aeabi_d2iz>
 8011f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8011fcc <logging+0x128>)
 8011f1e:	fb82 3200 	smull	r3, r2, r2, r0
 8011f22:	17c3      	asrs	r3, r0, #31
 8011f24:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    time_len += snprintf(time_str + time_len, sizeof(time_str) - time_len, ".%03d", millis);
 8011f28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011f2c:	fb02 0313 	mls	r3, r2, r3, r0
 8011f30:	4a27      	ldr	r2, [pc, #156]	@ (8011fd0 <logging+0x12c>)
 8011f32:	f1c4 0140 	rsb	r1, r4, #64	@ 0x40
 8011f36:	a83f      	add	r0, sp, #252	@ 0xfc
 8011f38:	4420      	add	r0, r4
 8011f3a:	f019 fc77 	bl	802b82c <snprintf>
 8011f3e:	4404      	add	r4, r0
    time_str[time_len++] = ' ';
 8011f40:	1c63      	adds	r3, r4, #1
 8011f42:	2220      	movs	r2, #32
 8011f44:	a93f      	add	r1, sp, #252	@ 0xfc
 8011f46:	550a      	strb	r2, [r1, r4]
    time_str[time_len++] = '\0';
 8011f48:	2200      	movs	r2, #0
 8011f4a:	54ca      	strb	r2, [r1, r3]
    va_start(args, format);
 8011f4c:	aba2      	add	r3, sp, #648	@ 0x288
 8011f4e:	935a      	str	r3, [sp, #360]	@ 0x168
    formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN - 3, format, args);
 8011f50:	f20d 166d 	addw	r6, sp, #365	@ 0x16d
 8011f54:	9aa1      	ldr	r2, [sp, #644]	@ 0x284
 8011f56:	21fd      	movs	r1, #253	@ 0xfd
 8011f58:	4630      	mov	r0, r6
 8011f5a:	f019 ff2f 	bl	802bdbc <vsnprintf>
 8011f5e:	4604      	mov	r4, r0
    snprintf(tmp_buf ,LOG_MES_TEXT_LEN, "%s %s:%s\r\n", time_str, level_strings[mess.log_level], mess.log_text);
 8011f60:	f89d 216c 	ldrb.w	r2, [sp, #364]	@ 0x16c
 8011f64:	9601      	str	r6, [sp, #4]
 8011f66:	4b1b      	ldr	r3, [pc, #108]	@ (8011fd4 <logging+0x130>)
 8011f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f6c:	9300      	str	r3, [sp, #0]
 8011f6e:	ab3f      	add	r3, sp, #252	@ 0xfc
 8011f70:	4a19      	ldr	r2, [pc, #100]	@ (8011fd8 <logging+0x134>)
 8011f72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011f76:	4628      	mov	r0, r5
 8011f78:	f019 fc58 	bl	802b82c <snprintf>
     if (formatted_len >= 0 && formatted_len < LOG_MES_TEXT_LEN - 10) {
 8011f7c:	2cf5      	cmp	r4, #245	@ 0xf5
 8011f7e:	d81b      	bhi.n	8011fb8 <logging+0x114>
         mess.log_len = strlen(tmp_buf);
 8011f80:	4628      	mov	r0, r5
 8011f82:	f7fe f98d 	bl	80102a0 <strlen>
 8011f86:	f88d 026d 	strb.w	r0, [sp, #621]	@ 0x26d
     strncpy(mess.log_text, tmp_buf, LOG_MES_TEXT_LEN);
 8011f8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011f8e:	4629      	mov	r1, r5
 8011f90:	f20d 106d 	addw	r0, sp, #365	@ 0x16d
 8011f94:	f01a f9bb 	bl	802c30e <strncpy>
    if (_send_log_mess) {
 8011f98:	4b10      	ldr	r3, [pc, #64]	@ (8011fdc <logging+0x138>)
 8011f9a:	681e      	ldr	r6, [r3, #0]
 8011f9c:	b146      	cbz	r6, 8011fb0 <logging+0x10c>
        _send_log_mess(mess);
 8011f9e:	ac5b      	add	r4, sp, #364	@ 0x16c
 8011fa0:	22f2      	movs	r2, #242	@ 0xf2
 8011fa2:	a95f      	add	r1, sp, #380	@ 0x17c
 8011fa4:	4668      	mov	r0, sp
 8011fa6:	f01b fba7 	bl	802d6f8 <memcpy>
 8011faa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011fae:	47b0      	blx	r6
    free(tmp_buf);
 8011fb0:	4628      	mov	r0, r5
 8011fb2:	f008 fa5b 	bl	801a46c <vPortFree>
 8011fb6:	e77d      	b.n	8011eb4 <logging+0x10>
         mess.log_len = LOG_MES_TEXT_LEN - 10;
 8011fb8:	23f6      	movs	r3, #246	@ 0xf6
 8011fba:	f88d 326d 	strb.w	r3, [sp, #621]	@ 0x26d
 8011fbe:	e7e4      	b.n	8011f8a <logging+0xe6>
 8011fc0:	20000918 	.word	0x20000918
 8011fc4:	408f4000 	.word	0x408f4000
 8011fc8:	08035ca0 	.word	0x08035ca0
 8011fcc:	10624dd3 	.word	0x10624dd3
 8011fd0:	08035cb4 	.word	0x08035cb4
 8011fd4:	20000004 	.word	0x20000004
 8011fd8:	08035cbc 	.word	0x08035cbc
 8011fdc:	20000000 	.word	0x20000000

08011fe0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011fe0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8011fe2:	6802      	ldr	r2, [r0, #0]
 8011fe4:	4b03      	ldr	r3, [pc, #12]	@ (8011ff4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d000      	beq.n	8011fec <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8011fea:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8011fec:	f003 fe5c 	bl	8015ca8 <HAL_IncTick>
}
 8011ff0:	e7fb      	b.n	8011fea <HAL_TIM_PeriodElapsedCallback+0xa>
 8011ff2:	bf00      	nop
 8011ff4:	40014000 	.word	0x40014000

08011ff8 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8011ff8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8011ffa:	e7fe      	b.n	8011ffa <Error_Handler+0x2>

08011ffc <SystemClock_Config>:
{
 8011ffc:	b500      	push	{lr}
 8011ffe:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012000:	2230      	movs	r2, #48	@ 0x30
 8012002:	2100      	movs	r1, #0
 8012004:	a808      	add	r0, sp, #32
 8012006:	f01a f93b 	bl	802c280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801200a:	2300      	movs	r3, #0
 801200c:	9303      	str	r3, [sp, #12]
 801200e:	9304      	str	r3, [sp, #16]
 8012010:	9305      	str	r3, [sp, #20]
 8012012:	9306      	str	r3, [sp, #24]
 8012014:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012016:	9301      	str	r3, [sp, #4]
 8012018:	4a1e      	ldr	r2, [pc, #120]	@ (8012094 <SystemClock_Config+0x98>)
 801201a:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 801201c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8012020:	6411      	str	r1, [r2, #64]	@ 0x40
 8012022:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8012024:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8012028:	9201      	str	r2, [sp, #4]
 801202a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801202c:	9302      	str	r3, [sp, #8]
 801202e:	4a1a      	ldr	r2, [pc, #104]	@ (8012098 <SystemClock_Config+0x9c>)
 8012030:	6811      	ldr	r1, [r2, #0]
 8012032:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8012036:	6011      	str	r1, [r2, #0]
 8012038:	6812      	ldr	r2, [r2, #0]
 801203a:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 801203e:	9202      	str	r2, [sp, #8]
 8012040:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8012042:	2202      	movs	r2, #2
 8012044:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8012046:	2101      	movs	r1, #1
 8012048:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801204a:	2110      	movs	r1, #16
 801204c:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801204e:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8012050:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8012052:	2308      	movs	r3, #8
 8012054:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8012056:	2364      	movs	r3, #100	@ 0x64
 8012058:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801205a:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 801205c:	2304      	movs	r3, #4
 801205e:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8012060:	a808      	add	r0, sp, #32
 8012062:	f004 fc4d 	bl	8016900 <HAL_RCC_OscConfig>
 8012066:	b988      	cbnz	r0, 801208c <SystemClock_Config+0x90>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8012068:	230f      	movs	r3, #15
 801206a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801206c:	2302      	movs	r3, #2
 801206e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8012070:	2300      	movs	r3, #0
 8012072:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8012074:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8012078:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801207a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 801207c:	2103      	movs	r1, #3
 801207e:	a803      	add	r0, sp, #12
 8012080:	f004 fea8 	bl	8016dd4 <HAL_RCC_ClockConfig>
 8012084:	b920      	cbnz	r0, 8012090 <SystemClock_Config+0x94>
}
 8012086:	b015      	add	sp, #84	@ 0x54
 8012088:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801208c:	f7ff ffb4 	bl	8011ff8 <Error_Handler>
    Error_Handler();
 8012090:	f7ff ffb2 	bl	8011ff8 <Error_Handler>
 8012094:	40023800 	.word	0x40023800
 8012098:	40007000 	.word	0x40007000

0801209c <main>:
{
 801209c:	b500      	push	{lr}
 801209e:	b083      	sub	sp, #12
 80120a0:	b672      	cpsid	i
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 80120a2:	4b10      	ldr	r3, [pc, #64]	@ (80120e4 <main+0x48>)
 80120a4:	4a10      	ldr	r2, [pc, #64]	@ (80120e8 <main+0x4c>)
 80120a6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80120a8:	b662      	cpsie	i
	volatile int i = 1000000;
 80120aa:	4b10      	ldr	r3, [pc, #64]	@ (80120ec <main+0x50>)
 80120ac:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 80120ae:	e002      	b.n	80120b6 <main+0x1a>
		i--;
 80120b0:	9b01      	ldr	r3, [sp, #4]
 80120b2:	3b01      	subs	r3, #1
 80120b4:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 80120b6:	9b01      	ldr	r3, [sp, #4]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	dcf9      	bgt.n	80120b0 <main+0x14>
  HAL_Init();
 80120bc:	f003 fdda 	bl	8015c74 <HAL_Init>
  SystemClock_Config();
 80120c0:	f7ff ff9c 	bl	8011ffc <SystemClock_Config>
  MX_GPIO_Init();
 80120c4:	f7ff fdd0 	bl	8011c68 <MX_GPIO_Init>
  MX_SPI2_Init();
 80120c8:	f000 f834 	bl	8012134 <MX_SPI2_Init>
  MX_I2C1_Init();
 80120cc:	f7ff fe56 	bl	8011d7c <MX_I2C1_Init>
  MX_SPI1_Init();
 80120d0:	f000 f80e 	bl	80120f0 <MX_SPI1_Init>
  osKernelInitialize();
 80120d4:	f005 feb2 	bl	8017e3c <osKernelInitialize>
  MX_FREERTOS_Init();
 80120d8:	f7ff fbca 	bl	8011870 <MX_FREERTOS_Init>
  osKernelStart();
 80120dc:	f005 fec0 	bl	8017e60 <osKernelStart>
  while (1)
 80120e0:	e7fe      	b.n	80120e0 <main+0x44>
 80120e2:	bf00      	nop
 80120e4:	e000ed00 	.word	0xe000ed00
 80120e8:	08010000 	.word	0x08010000
 80120ec:	000f4240 	.word	0x000f4240

080120f0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80120f0:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80120f2:	480e      	ldr	r0, [pc, #56]	@ (801212c <MX_SPI1_Init+0x3c>)
 80120f4:	4b0e      	ldr	r3, [pc, #56]	@ (8012130 <MX_SPI1_Init+0x40>)
 80120f6:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80120f8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80120fc:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80120fe:	2300      	movs	r3, #0
 8012100:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8012102:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012104:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8012106:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8012108:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801210c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 801210e:	2208      	movs	r2, #8
 8012110:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012112:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8012114:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012116:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8012118:	230a      	movs	r3, #10
 801211a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801211c:	f005 f838 	bl	8017190 <HAL_SPI_Init>
 8012120:	b900      	cbnz	r0, 8012124 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8012122:	bd08      	pop	{r3, pc}
    Error_Handler();
 8012124:	f7ff ff68 	bl	8011ff8 <Error_Handler>
}
 8012128:	e7fb      	b.n	8012122 <MX_SPI1_Init+0x32>
 801212a:	bf00      	nop
 801212c:	20000974 	.word	0x20000974
 8012130:	40013000 	.word	0x40013000

08012134 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8012134:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8012136:	480d      	ldr	r0, [pc, #52]	@ (801216c <MX_SPI2_Init+0x38>)
 8012138:	4b0d      	ldr	r3, [pc, #52]	@ (8012170 <MX_SPI2_Init+0x3c>)
 801213a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 801213c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8012140:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8012142:	2300      	movs	r3, #0
 8012144:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8012146:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012148:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 801214a:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 801214c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012150:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012152:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012154:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8012156:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012158:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 801215a:	230a      	movs	r3, #10
 801215c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 801215e:	f005 f817 	bl	8017190 <HAL_SPI_Init>
 8012162:	b900      	cbnz	r0, 8012166 <MX_SPI2_Init+0x32>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8012164:	bd08      	pop	{r3, pc}
    Error_Handler();
 8012166:	f7ff ff47 	bl	8011ff8 <Error_Handler>
}
 801216a:	e7fb      	b.n	8012164 <MX_SPI2_Init+0x30>
 801216c:	2000091c 	.word	0x2000091c
 8012170:	40003800 	.word	0x40003800

08012174 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8012174:	b500      	push	{lr}
 8012176:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012178:	2300      	movs	r3, #0
 801217a:	9305      	str	r3, [sp, #20]
 801217c:	9306      	str	r3, [sp, #24]
 801217e:	9307      	str	r3, [sp, #28]
 8012180:	9308      	str	r3, [sp, #32]
 8012182:	9309      	str	r3, [sp, #36]	@ 0x24
  if(spiHandle->Instance==SPI1)
 8012184:	6803      	ldr	r3, [r0, #0]
 8012186:	4a28      	ldr	r2, [pc, #160]	@ (8012228 <HAL_SPI_MspInit+0xb4>)
 8012188:	4293      	cmp	r3, r2
 801218a:	d005      	beq.n	8012198 <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 801218c:	4a27      	ldr	r2, [pc, #156]	@ (801222c <HAL_SPI_MspInit+0xb8>)
 801218e:	4293      	cmp	r3, r2
 8012190:	d025      	beq.n	80121de <HAL_SPI_MspInit+0x6a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8012192:	b00b      	add	sp, #44	@ 0x2c
 8012194:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8012198:	2100      	movs	r1, #0
 801219a:	9101      	str	r1, [sp, #4]
 801219c:	4b24      	ldr	r3, [pc, #144]	@ (8012230 <HAL_SPI_MspInit+0xbc>)
 801219e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80121a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80121a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80121a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80121a8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80121ac:	9201      	str	r2, [sp, #4]
 80121ae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80121b0:	9102      	str	r1, [sp, #8]
 80121b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80121b4:	f042 0202 	orr.w	r2, r2, #2
 80121b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80121ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121bc:	f003 0302 	and.w	r3, r3, #2
 80121c0:	9302      	str	r3, [sp, #8]
 80121c2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80121c4:	2338      	movs	r3, #56	@ 0x38
 80121c6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80121c8:	2302      	movs	r3, #2
 80121ca:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80121cc:	2303      	movs	r3, #3
 80121ce:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80121d0:	2305      	movs	r3, #5
 80121d2:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80121d4:	a905      	add	r1, sp, #20
 80121d6:	4817      	ldr	r0, [pc, #92]	@ (8012234 <HAL_SPI_MspInit+0xc0>)
 80121d8:	f003 fe0a 	bl	8015df0 <HAL_GPIO_Init>
 80121dc:	e7d9      	b.n	8012192 <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80121de:	2100      	movs	r1, #0
 80121e0:	9103      	str	r1, [sp, #12]
 80121e2:	4b13      	ldr	r3, [pc, #76]	@ (8012230 <HAL_SPI_MspInit+0xbc>)
 80121e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80121e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80121ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80121ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80121ee:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80121f2:	9203      	str	r2, [sp, #12]
 80121f4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80121f6:	9104      	str	r1, [sp, #16]
 80121f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80121fa:	f042 0202 	orr.w	r2, r2, #2
 80121fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8012200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012202:	f003 0302 	and.w	r3, r3, #2
 8012206:	9304      	str	r3, [sp, #16]
 8012208:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 801220a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 801220e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012210:	2302      	movs	r3, #2
 8012212:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012214:	2303      	movs	r3, #3
 8012216:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8012218:	2305      	movs	r3, #5
 801221a:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801221c:	a905      	add	r1, sp, #20
 801221e:	4805      	ldr	r0, [pc, #20]	@ (8012234 <HAL_SPI_MspInit+0xc0>)
 8012220:	f003 fde6 	bl	8015df0 <HAL_GPIO_Init>
}
 8012224:	e7b5      	b.n	8012192 <HAL_SPI_MspInit+0x1e>
 8012226:	bf00      	nop
 8012228:	40013000 	.word	0x40013000
 801222c:	40003800 	.word	0x40003800
 8012230:	40023800 	.word	0x40023800
 8012234:	40020400 	.word	0x40020400

08012238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012238:	b500      	push	{lr}
 801223a:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801223c:	2200      	movs	r2, #0
 801223e:	9200      	str	r2, [sp, #0]
 8012240:	4b0d      	ldr	r3, [pc, #52]	@ (8012278 <HAL_MspInit+0x40>)
 8012242:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012244:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8012248:	6459      	str	r1, [r3, #68]	@ 0x44
 801224a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 801224c:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8012250:	9100      	str	r1, [sp, #0]
 8012252:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012254:	9201      	str	r2, [sp, #4]
 8012256:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8012258:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 801225c:	6419      	str	r1, [r3, #64]	@ 0x40
 801225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012264:	9301      	str	r3, [sp, #4]
 8012266:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8012268:	210f      	movs	r1, #15
 801226a:	f06f 0001 	mvn.w	r0, #1
 801226e:	f003 fda7 	bl	8015dc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012272:	b003      	add	sp, #12
 8012274:	f85d fb04 	ldr.w	pc, [sp], #4
 8012278:	40023800 	.word	0x40023800

0801227c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801227c:	b530      	push	{r4, r5, lr}
 801227e:	b089      	sub	sp, #36	@ 0x24
 8012280:	4605      	mov	r5, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8012282:	2400      	movs	r4, #0
 8012284:	9401      	str	r4, [sp, #4]
 8012286:	4b1d      	ldr	r3, [pc, #116]	@ (80122fc <HAL_InitTick+0x80>)
 8012288:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801228a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 801228e:	645a      	str	r2, [r3, #68]	@ 0x44
 8012290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012296:	9301      	str	r3, [sp, #4]
 8012298:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801229a:	a902      	add	r1, sp, #8
 801229c:	a803      	add	r0, sp, #12
 801229e:	f004 fe6f 	bl	8016f80 <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80122a2:	f004 fe5d 	bl	8016f60 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80122a6:	4a16      	ldr	r2, [pc, #88]	@ (8012300 <HAL_InitTick+0x84>)
 80122a8:	fba2 2300 	umull	r2, r3, r2, r0
 80122ac:	0c9b      	lsrs	r3, r3, #18
 80122ae:	3b01      	subs	r3, #1

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 80122b0:	4814      	ldr	r0, [pc, #80]	@ (8012304 <HAL_InitTick+0x88>)
 80122b2:	4a15      	ldr	r2, [pc, #84]	@ (8012308 <HAL_InitTick+0x8c>)
 80122b4:	6002      	str	r2, [r0, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 80122b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80122ba:	60c2      	str	r2, [r0, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 80122bc:	6043      	str	r3, [r0, #4]
  htim9.Init.ClockDivision = 0;
 80122be:	6104      	str	r4, [r0, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80122c0:	6084      	str	r4, [r0, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80122c2:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim9);
 80122c4:	f005 fbda 	bl	8017a7c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80122c8:	4604      	mov	r4, r0
 80122ca:	b110      	cbz	r0, 80122d2 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 80122cc:	4620      	mov	r0, r4
 80122ce:	b009      	add	sp, #36	@ 0x24
 80122d0:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim9);
 80122d2:	480c      	ldr	r0, [pc, #48]	@ (8012304 <HAL_InitTick+0x88>)
 80122d4:	f005 fa8c 	bl	80177f0 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80122d8:	4604      	mov	r4, r0
 80122da:	2800      	cmp	r0, #0
 80122dc:	d1f6      	bne.n	80122cc <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80122de:	2018      	movs	r0, #24
 80122e0:	f003 fd7e 	bl	8015de0 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80122e4:	2d0f      	cmp	r5, #15
 80122e6:	d901      	bls.n	80122ec <HAL_InitTick+0x70>
        status = HAL_ERROR;
 80122e8:	2401      	movs	r4, #1
 80122ea:	e7ef      	b.n	80122cc <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 80122ec:	2200      	movs	r2, #0
 80122ee:	4629      	mov	r1, r5
 80122f0:	2018      	movs	r0, #24
 80122f2:	f003 fd65 	bl	8015dc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80122f6:	4b05      	ldr	r3, [pc, #20]	@ (801230c <HAL_InitTick+0x90>)
 80122f8:	601d      	str	r5, [r3, #0]
 80122fa:	e7e7      	b.n	80122cc <HAL_InitTick+0x50>
 80122fc:	40023800 	.word	0x40023800
 8012300:	431bde83 	.word	0x431bde83
 8012304:	200009cc 	.word	0x200009cc
 8012308:	40014000 	.word	0x40014000
 801230c:	20000108 	.word	0x20000108

08012310 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012310:	e7fe      	b.n	8012310 <NMI_Handler>

08012312 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012312:	e7fe      	b.n	8012312 <HardFault_Handler>

08012314 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012314:	e7fe      	b.n	8012314 <MemManage_Handler>

08012316 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012316:	e7fe      	b.n	8012316 <BusFault_Handler>

08012318 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012318:	e7fe      	b.n	8012318 <UsageFault_Handler>

0801231a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801231a:	4770      	bx	lr

0801231c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 801231c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 801231e:	4802      	ldr	r0, [pc, #8]	@ (8012328 <TIM1_BRK_TIM9_IRQHandler+0xc>)
 8012320:	f005 faa6 	bl	8017870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8012324:	bd08      	pop	{r3, pc}
 8012326:	bf00      	nop
 8012328:	200009cc 	.word	0x200009cc

0801232c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 801232c:	2001      	movs	r0, #1
 801232e:	4770      	bx	lr

08012330 <_kill>:

int _kill(int pid, int sig)
{
 8012330:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012332:	f01b f9a9 	bl	802d688 <__errno>
 8012336:	2316      	movs	r3, #22
 8012338:	6003      	str	r3, [r0, #0]
  return -1;
}
 801233a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801233e:	bd08      	pop	{r3, pc}

08012340 <_exit>:

void _exit (int status)
{
 8012340:	b508      	push	{r3, lr}
  _kill(status, -1);
 8012342:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012346:	f7ff fff3 	bl	8012330 <_kill>
  while (1) {}    /* Make sure we hang here */
 801234a:	e7fe      	b.n	801234a <_exit+0xa>

0801234c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801234c:	b570      	push	{r4, r5, r6, lr}
 801234e:	460c      	mov	r4, r1
 8012350:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012352:	2500      	movs	r5, #0
 8012354:	e006      	b.n	8012364 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8012356:	f3af 8000 	nop.w
 801235a:	4621      	mov	r1, r4
 801235c:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012360:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8012362:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012364:	42b5      	cmp	r5, r6
 8012366:	dbf6      	blt.n	8012356 <_read+0xa>
  }

  return len;
}
 8012368:	4630      	mov	r0, r6
 801236a:	bd70      	pop	{r4, r5, r6, pc}

0801236c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801236c:	b570      	push	{r4, r5, r6, lr}
 801236e:	460c      	mov	r4, r1
 8012370:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012372:	2500      	movs	r5, #0
 8012374:	e004      	b.n	8012380 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8012376:	f814 0b01 	ldrb.w	r0, [r4], #1
 801237a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801237e:	3501      	adds	r5, #1
 8012380:	42b5      	cmp	r5, r6
 8012382:	dbf8      	blt.n	8012376 <_write+0xa>
  }
  return len;
}
 8012384:	4630      	mov	r0, r6
 8012386:	bd70      	pop	{r4, r5, r6, pc}

08012388 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8012388:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801238c:	4770      	bx	lr

0801238e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 801238e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012392:	604b      	str	r3, [r1, #4]
  return 0;
}
 8012394:	2000      	movs	r0, #0
 8012396:	4770      	bx	lr

08012398 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8012398:	2001      	movs	r0, #1
 801239a:	4770      	bx	lr

0801239c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 801239c:	2000      	movs	r0, #0
 801239e:	4770      	bx	lr

080123a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80123a0:	b510      	push	{r4, lr}
 80123a2:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80123a4:	4a0c      	ldr	r2, [pc, #48]	@ (80123d8 <_sbrk+0x38>)
 80123a6:	490d      	ldr	r1, [pc, #52]	@ (80123dc <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80123a8:	480d      	ldr	r0, [pc, #52]	@ (80123e0 <_sbrk+0x40>)
 80123aa:	6800      	ldr	r0, [r0, #0]
 80123ac:	b140      	cbz	r0, 80123c0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80123ae:	480c      	ldr	r0, [pc, #48]	@ (80123e0 <_sbrk+0x40>)
 80123b0:	6800      	ldr	r0, [r0, #0]
 80123b2:	4403      	add	r3, r0
 80123b4:	1a52      	subs	r2, r2, r1
 80123b6:	4293      	cmp	r3, r2
 80123b8:	d806      	bhi.n	80123c8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80123ba:	4a09      	ldr	r2, [pc, #36]	@ (80123e0 <_sbrk+0x40>)
 80123bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80123be:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80123c0:	4807      	ldr	r0, [pc, #28]	@ (80123e0 <_sbrk+0x40>)
 80123c2:	4c08      	ldr	r4, [pc, #32]	@ (80123e4 <_sbrk+0x44>)
 80123c4:	6004      	str	r4, [r0, #0]
 80123c6:	e7f2      	b.n	80123ae <_sbrk+0xe>
    errno = ENOMEM;
 80123c8:	f01b f95e 	bl	802d688 <__errno>
 80123cc:	230c      	movs	r3, #12
 80123ce:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80123d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80123d4:	e7f3      	b.n	80123be <_sbrk+0x1e>
 80123d6:	bf00      	nop
 80123d8:	20020000 	.word	0x20020000
 80123dc:	00000800 	.word	0x00000800
 80123e0:	20000a18 	.word	0x20000a18
 80123e4:	2001a200 	.word	0x2001a200

080123e8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80123e8:	4a03      	ldr	r2, [pc, #12]	@ (80123f8 <SystemInit+0x10>)
 80123ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80123ee:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80123f2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80123f6:	4770      	bx	lr
 80123f8:	e000ed00 	.word	0xe000ed00

080123fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80123fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8012434 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8012400:	f7ff fff2 	bl	80123e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8012404:	480c      	ldr	r0, [pc, #48]	@ (8012438 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8012406:	490d      	ldr	r1, [pc, #52]	@ (801243c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8012408:	4a0d      	ldr	r2, [pc, #52]	@ (8012440 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801240a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801240c:	e002      	b.n	8012414 <LoopCopyDataInit>

0801240e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801240e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012412:	3304      	adds	r3, #4

08012414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012418:	d3f9      	bcc.n	801240e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801241a:	4a0a      	ldr	r2, [pc, #40]	@ (8012444 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 801241c:	4c0a      	ldr	r4, [pc, #40]	@ (8012448 <LoopFillZerobss+0x22>)
  movs r3, #0
 801241e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012420:	e001      	b.n	8012426 <LoopFillZerobss>

08012422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012424:	3204      	adds	r2, #4

08012426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012428:	d3fb      	bcc.n	8012422 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801242a:	f01b f93b 	bl	802d6a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801242e:	f7ff fe35 	bl	801209c <main>
  bx  lr    
 8012432:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8012434:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8012438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801243c:	20000870 	.word	0x20000870
  ldr r2, =_sidata
 8012440:	0803b7e4 	.word	0x0803b7e4
  ldr r2, =_sbss
 8012444:	20000870 	.word	0x20000870
  ldr r4, =_ebss
 8012448:	2001a200 	.word	0x2001a200

0801244c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801244c:	e7fe      	b.n	801244c <ADC_IRQHandler>

0801244e <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 801244e:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8012450:	880b      	ldrh	r3, [r1, #0]
 8012452:	2b05      	cmp	r3, #5
 8012454:	d001      	beq.n	801245a <eMBFuncReadCoils+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012456:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8012458:	bd38      	pop	{r3, r4, r5, pc}
 801245a:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 801245c:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 801245e:	7881      	ldrb	r1, [r0, #2]
 8012460:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012464:	3101      	adds	r1, #1
 8012466:	b289      	uxth	r1, r1
        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8012468:	78c3      	ldrb	r3, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 801246a:	7902      	ldrb	r2, [r0, #4]
 801246c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usCoilCount >= 1 ) &&
 8012470:	1e53      	subs	r3, r2, #1
 8012472:	b29b      	uxth	r3, r3
 8012474:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 8012478:	4563      	cmp	r3, ip
 801247a:	d820      	bhi.n	80124be <eMBFuncReadCoils+0x70>
            *usLen = MB_PDU_FUNC_OFF;
 801247c:	2300      	movs	r3, #0
 801247e:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8012480:	2301      	movs	r3, #1
 8012482:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8012484:	8823      	ldrh	r3, [r4, #0]
 8012486:	3301      	adds	r3, #1
 8012488:	8023      	strh	r3, [r4, #0]
            if( ( usCoilCount & 0x0007 ) != 0 )
 801248a:	f012 0f07 	tst.w	r2, #7
 801248e:	d010      	beq.n	80124b2 <eMBFuncReadCoils+0x64>
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8012490:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 8012494:	3301      	adds	r3, #1
 8012496:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 8012498:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 801249a:	8823      	ldrh	r3, [r4, #0]
 801249c:	3301      	adds	r3, #1
 801249e:	8023      	strh	r3, [r4, #0]
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 80124a0:	2300      	movs	r3, #0
 80124a2:	3002      	adds	r0, #2
 80124a4:	f7ff fb8c 	bl	8011bc0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 80124a8:	b930      	cbnz	r0, 80124b8 <eMBFuncReadCoils+0x6a>
                *usLen += ucNBytes;;
 80124aa:	8823      	ldrh	r3, [r4, #0]
 80124ac:	442b      	add	r3, r5
 80124ae:	8023      	strh	r3, [r4, #0]
 80124b0:	e7d2      	b.n	8012458 <eMBFuncReadCoils+0xa>
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 80124b2:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 80124b6:	e7ef      	b.n	8012498 <eMBFuncReadCoils+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 80124b8:	f000 f9f0 	bl	801289c <prveMBError2Exception>
 80124bc:	e7cc      	b.n	8012458 <eMBFuncReadCoils+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80124be:	2003      	movs	r0, #3
 80124c0:	e7ca      	b.n	8012458 <eMBFuncReadCoils+0xa>

080124c2 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80124c2:	880b      	ldrh	r3, [r1, #0]
 80124c4:	2b05      	cmp	r3, #5
 80124c6:	d001      	beq.n	80124cc <eMBFuncWriteCoil+0xa>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80124c8:	2003      	movs	r0, #3
 80124ca:	4770      	bx	lr
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80124cc:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80124ce:	7881      	ldrb	r1, [r0, #2]
 80124d0:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80124d4:	3101      	adds	r1, #1
 80124d6:	b289      	uxth	r1, r1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80124d8:	7903      	ldrb	r3, [r0, #4]
 80124da:	b9f3      	cbnz	r3, 801251a <eMBFuncWriteCoil+0x58>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80124dc:	78c2      	ldrb	r2, [r0, #3]
 80124de:	1e53      	subs	r3, r2, #1
 80124e0:	b2db      	uxtb	r3, r3
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80124e2:	2bfd      	cmp	r3, #253	@ 0xfd
 80124e4:	d91b      	bls.n	801251e <eMBFuncWriteCoil+0x5c>
{
 80124e6:	b500      	push	{lr}
 80124e8:	b083      	sub	sp, #12
            ucBuf[1] = 0;
 80124ea:	2300      	movs	r3, #0
 80124ec:	f88d 3005 	strb.w	r3, [sp, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 80124f0:	2aff      	cmp	r2, #255	@ 0xff
 80124f2:	d00b      	beq.n	801250c <eMBFuncWriteCoil+0x4a>
                ucBuf[0] = 0;
 80124f4:	2300      	movs	r3, #0
 80124f6:	f88d 3004 	strb.w	r3, [sp, #4]
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 80124fa:	2301      	movs	r3, #1
 80124fc:	461a      	mov	r2, r3
 80124fe:	a801      	add	r0, sp, #4
 8012500:	f7ff fb5e 	bl	8011bc0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8012504:	b930      	cbnz	r0, 8012514 <eMBFuncWriteCoil+0x52>
    }
    return eStatus;
}
 8012506:	b003      	add	sp, #12
 8012508:	f85d fb04 	ldr.w	pc, [sp], #4
                ucBuf[0] = 1;
 801250c:	2301      	movs	r3, #1
 801250e:	f88d 3004 	strb.w	r3, [sp, #4]
 8012512:	e7f2      	b.n	80124fa <eMBFuncWriteCoil+0x38>
                eStatus = prveMBError2Exception( eRegStatus );
 8012514:	f000 f9c2 	bl	801289c <prveMBError2Exception>
 8012518:	e7f5      	b.n	8012506 <eMBFuncWriteCoil+0x44>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801251a:	2003      	movs	r0, #3
 801251c:	4770      	bx	lr
 801251e:	2003      	movs	r0, #3
}
 8012520:	4770      	bx	lr

08012522 <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012522:	880b      	ldrh	r3, [r1, #0]
 8012524:	2b05      	cmp	r3, #5
 8012526:	d92d      	bls.n	8012584 <eMBFuncWriteMultipleCoils+0x62>
{
 8012528:	b510      	push	{r4, lr}
 801252a:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 801252c:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 801252e:	7883      	ldrb	r3, [r0, #2]
 8012530:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 8012534:	3301      	adds	r3, #1
 8012536:	b299      	uxth	r1, r3

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8012538:	78c2      	ldrb	r2, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 801253a:	7903      	ldrb	r3, [r0, #4]
 801253c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8012540:	f890 e005 	ldrb.w	lr, [r0, #5]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8012544:	f013 0f07 	tst.w	r3, #7
 8012548:	d00e      	beq.n	8012568 <eMBFuncWriteMultipleCoils+0x46>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 801254a:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 801254e:	f10c 0c01 	add.w	ip, ip, #1
 8012552:	fa5f fc8c 	uxtb.w	ip, ip
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 8012556:	1e53      	subs	r3, r2, #1
 8012558:	b29b      	uxth	r3, r3
 801255a:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 801255e:	d213      	bcs.n	8012588 <eMBFuncWriteMultipleCoils+0x66>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8012560:	45f4      	cmp	ip, lr
 8012562:	d004      	beq.n	801256e <eMBFuncWriteMultipleCoils+0x4c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012564:	2003      	movs	r0, #3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8012566:	bd10      	pop	{r4, pc}
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8012568:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 801256c:	e7f3      	b.n	8012556 <eMBFuncWriteMultipleCoils+0x34>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 801256e:	2301      	movs	r3, #1
 8012570:	3006      	adds	r0, #6
 8012572:	f7ff fb25 	bl	8011bc0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8012576:	b910      	cbnz	r0, 801257e <eMBFuncWriteMultipleCoils+0x5c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8012578:	2305      	movs	r3, #5
 801257a:	8023      	strh	r3, [r4, #0]
 801257c:	e7f3      	b.n	8012566 <eMBFuncWriteMultipleCoils+0x44>
                eStatus = prveMBError2Exception( eRegStatus );
 801257e:	f000 f98d 	bl	801289c <prveMBError2Exception>
 8012582:	e7f0      	b.n	8012566 <eMBFuncWriteMultipleCoils+0x44>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012584:	2003      	movs	r0, #3
}
 8012586:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012588:	2003      	movs	r0, #3
 801258a:	e7ec      	b.n	8012566 <eMBFuncWriteMultipleCoils+0x44>

0801258c <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 801258c:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 801258e:	880b      	ldrh	r3, [r1, #0]
 8012590:	2b05      	cmp	r3, #5
 8012592:	d001      	beq.n	8012598 <eMBFuncReadDiscreteInputs+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012594:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8012596:	bd38      	pop	{r3, r4, r5, pc}
 8012598:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 801259a:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 801259c:	7881      	ldrb	r1, [r0, #2]
 801259e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80125a2:	3101      	adds	r1, #1
 80125a4:	b289      	uxth	r1, r1
        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 80125a6:	78c3      	ldrb	r3, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 80125a8:	7902      	ldrb	r2, [r0, #4]
 80125aa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usDiscreteCnt >= 1 ) &&
 80125ae:	1e53      	subs	r3, r2, #1
 80125b0:	b29b      	uxth	r3, r3
 80125b2:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 80125b6:	4563      	cmp	r3, ip
 80125b8:	d81f      	bhi.n	80125fa <eMBFuncReadDiscreteInputs+0x6e>
            *usLen = MB_PDU_FUNC_OFF;
 80125ba:	2300      	movs	r3, #0
 80125bc:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 80125be:	2302      	movs	r3, #2
 80125c0:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 80125c2:	8823      	ldrh	r3, [r4, #0]
 80125c4:	3301      	adds	r3, #1
 80125c6:	8023      	strh	r3, [r4, #0]
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 80125c8:	f012 0f07 	tst.w	r2, #7
 80125cc:	d00f      	beq.n	80125ee <eMBFuncReadDiscreteInputs+0x62>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 80125ce:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 80125d2:	3301      	adds	r3, #1
 80125d4:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 80125d6:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 80125d8:	8823      	ldrh	r3, [r4, #0]
 80125da:	3301      	adds	r3, #1
 80125dc:	8023      	strh	r3, [r4, #0]
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 80125de:	3002      	adds	r0, #2
 80125e0:	f7ff fac8 	bl	8011b74 <eMBRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 80125e4:	b930      	cbnz	r0, 80125f4 <eMBFuncReadDiscreteInputs+0x68>
                *usLen += ucNBytes;;
 80125e6:	8823      	ldrh	r3, [r4, #0]
 80125e8:	442b      	add	r3, r5
 80125ea:	8023      	strh	r3, [r4, #0]
 80125ec:	e7d3      	b.n	8012596 <eMBFuncReadDiscreteInputs+0xa>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 80125ee:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 80125f2:	e7f0      	b.n	80125d6 <eMBFuncReadDiscreteInputs+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 80125f4:	f000 f952 	bl	801289c <prveMBError2Exception>
 80125f8:	e7cd      	b.n	8012596 <eMBFuncReadDiscreteInputs+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80125fa:	2003      	movs	r0, #3
 80125fc:	e7cb      	b.n	8012596 <eMBFuncReadDiscreteInputs+0xa>

080125fe <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80125fe:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012600:	880b      	ldrh	r3, [r1, #0]
 8012602:	2b05      	cmp	r3, #5
 8012604:	d001      	beq.n	801260a <eMBFuncWriteHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012606:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8012608:	bd08      	pop	{r3, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 801260a:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 801260c:	7881      	ldrb	r1, [r0, #2]
 801260e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012612:	3101      	adds	r1, #1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8012614:	2301      	movs	r3, #1
 8012616:	461a      	mov	r2, r3
 8012618:	b289      	uxth	r1, r1
 801261a:	3003      	adds	r0, #3
 801261c:	f7ff fb21 	bl	8011c62 <eMBRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 8012620:	2800      	cmp	r0, #0
 8012622:	d0f1      	beq.n	8012608 <eMBFuncWriteHoldingRegister+0xa>
            eStatus = prveMBError2Exception( eRegStatus );
 8012624:	f000 f93a 	bl	801289c <prveMBError2Exception>
 8012628:	e7ee      	b.n	8012608 <eMBFuncWriteHoldingRegister+0xa>

0801262a <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 801262a:	880b      	ldrh	r3, [r1, #0]
 801262c:	2b05      	cmp	r3, #5
 801262e:	d922      	bls.n	8012676 <eMBFuncWriteMultipleHoldingRegister+0x4c>
{
 8012630:	b510      	push	{r4, lr}
 8012632:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8012634:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8012636:	7883      	ldrb	r3, [r0, #2]
 8012638:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 801263c:	3301      	adds	r3, #1
 801263e:	b299      	uxth	r1, r3

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8012640:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8012642:	7902      	ldrb	r2, [r0, #4]
 8012644:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8012648:	f890 c005 	ldrb.w	ip, [r0, #5]

        if( ( usRegCount >= 1 ) &&
 801264c:	1e53      	subs	r3, r2, #1
 801264e:	b29b      	uxth	r3, r3
 8012650:	2b77      	cmp	r3, #119	@ 0x77
 8012652:	d812      	bhi.n	801267a <eMBFuncWriteMultipleHoldingRegister+0x50>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8012654:	0053      	lsls	r3, r2, #1
 8012656:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8012658:	4563      	cmp	r3, ip
 801265a:	d001      	beq.n	8012660 <eMBFuncWriteMultipleHoldingRegister+0x36>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801265c:	2003      	movs	r0, #3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 801265e:	bd10      	pop	{r4, pc}
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8012660:	2301      	movs	r3, #1
 8012662:	3006      	adds	r0, #6
 8012664:	f7ff fafd 	bl	8011c62 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8012668:	b910      	cbnz	r0, 8012670 <eMBFuncWriteMultipleHoldingRegister+0x46>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 801266a:	2305      	movs	r3, #5
 801266c:	8023      	strh	r3, [r4, #0]
 801266e:	e7f6      	b.n	801265e <eMBFuncWriteMultipleHoldingRegister+0x34>
                eStatus = prveMBError2Exception( eRegStatus );
 8012670:	f000 f914 	bl	801289c <prveMBError2Exception>
 8012674:	e7f3      	b.n	801265e <eMBFuncWriteMultipleHoldingRegister+0x34>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012676:	2003      	movs	r0, #3
}
 8012678:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801267a:	2003      	movs	r0, #3
 801267c:	e7ef      	b.n	801265e <eMBFuncWriteMultipleHoldingRegister+0x34>

0801267e <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 801267e:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8012680:	880b      	ldrh	r3, [r1, #0]
 8012682:	2b05      	cmp	r3, #5
 8012684:	d001      	beq.n	801268a <eMBFuncReadHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012686:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8012688:	bd38      	pop	{r3, r4, r5, pc}
 801268a:	4602      	mov	r2, r0
 801268c:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 801268e:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8012690:	7881      	ldrb	r1, [r0, #2]
 8012692:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012696:	3101      	adds	r1, #1
 8012698:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 801269a:	7905      	ldrb	r5, [r0, #4]
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 801269c:	1e6b      	subs	r3, r5, #1
 801269e:	b29b      	uxth	r3, r3
 80126a0:	2b7c      	cmp	r3, #124	@ 0x7c
 80126a2:	d901      	bls.n	80126a8 <eMBFuncReadHoldingRegister+0x2a>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80126a4:	2003      	movs	r0, #3
 80126a6:	e7ef      	b.n	8012688 <eMBFuncReadHoldingRegister+0xa>
            *usLen = MB_PDU_FUNC_OFF;
 80126a8:	2300      	movs	r3, #0
 80126aa:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80126ac:	f04f 0c03 	mov.w	ip, #3
 80126b0:	f800 cb02 	strb.w	ip, [r0], #2
            *usLen += 1;
 80126b4:	f8b4 c000 	ldrh.w	ip, [r4]
 80126b8:	f10c 0c01 	add.w	ip, ip, #1
 80126bc:	f8a4 c000 	strh.w	ip, [r4]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80126c0:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 80126c4:	f882 c001 	strb.w	ip, [r2, #1]
            *usLen += 1;
 80126c8:	8822      	ldrh	r2, [r4, #0]
 80126ca:	3201      	adds	r2, #1
 80126cc:	8022      	strh	r2, [r4, #0]
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80126ce:	462a      	mov	r2, r5
 80126d0:	f7ff fac7 	bl	8011c62 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 80126d4:	b920      	cbnz	r0, 80126e0 <eMBFuncReadHoldingRegister+0x62>
                *usLen += usRegCount * 2;
 80126d6:	8823      	ldrh	r3, [r4, #0]
 80126d8:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80126dc:	8023      	strh	r3, [r4, #0]
 80126de:	e7d3      	b.n	8012688 <eMBFuncReadHoldingRegister+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 80126e0:	f000 f8dc 	bl	801289c <prveMBError2Exception>
 80126e4:	e7d0      	b.n	8012688 <eMBFuncReadHoldingRegister+0xa>

080126e6 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80126e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80126e8:	880b      	ldrh	r3, [r1, #0]
 80126ea:	2b09      	cmp	r3, #9
 80126ec:	d943      	bls.n	8012776 <eMBFuncReadWriteMultipleHoldingRegister+0x90>
 80126ee:	4604      	mov	r4, r0
 80126f0:	460d      	mov	r5, r1
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 80126f2:	7843      	ldrb	r3, [r0, #1]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 80126f4:	7881      	ldrb	r1, [r0, #2]
 80126f6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegReadAddress++;
 80126fa:	3101      	adds	r1, #1
 80126fc:	b28e      	uxth	r6, r1

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 80126fe:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8012700:	7907      	ldrb	r7, [r0, #4]
 8012702:	ea47 2703 	orr.w	r7, r7, r3, lsl #8

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8012706:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8012708:	7981      	ldrb	r1, [r0, #6]
 801270a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteAddress++;
 801270e:	3101      	adds	r1, #1
 8012710:	b289      	uxth	r1, r1

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8012712:	79c3      	ldrb	r3, [r0, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8012714:	7a02      	ldrb	r2, [r0, #8]
 8012716:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 801271a:	7a40      	ldrb	r0, [r0, #9]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 801271c:	1e7b      	subs	r3, r7, #1
 801271e:	b29b      	uxth	r3, r3
 8012720:	2b7c      	cmp	r3, #124	@ 0x7c
 8012722:	d82a      	bhi.n	801277a <eMBFuncReadWriteMultipleHoldingRegister+0x94>
 8012724:	b35a      	cbz	r2, 801277e <eMBFuncReadWriteMultipleHoldingRegister+0x98>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8012726:	2a79      	cmp	r2, #121	@ 0x79
 8012728:	d82b      	bhi.n	8012782 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
 801272a:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 801272e:	d001      	beq.n	8012734 <eMBFuncReadWriteMultipleHoldingRegister+0x4e>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012730:	2003      	movs	r0, #3
 8012732:	e021      	b.n	8012778 <eMBFuncReadWriteMultipleHoldingRegister+0x92>
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8012734:	2301      	movs	r3, #1
 8012736:	f104 000a 	add.w	r0, r4, #10
 801273a:	f7ff fa92 	bl	8011c62 <eMBRegHoldingCB>
 801273e:	4603      	mov	r3, r0
            if( eRegStatus == MB_ENOERR )
 8012740:	b9b0      	cbnz	r0, 8012770 <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                *usLen = MB_PDU_FUNC_OFF;
 8012742:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8012744:	4620      	mov	r0, r4
 8012746:	2217      	movs	r2, #23
 8012748:	f800 2b02 	strb.w	r2, [r0], #2
                *usLen += 1;
 801274c:	882a      	ldrh	r2, [r5, #0]
 801274e:	3201      	adds	r2, #1
 8012750:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8012752:	007a      	lsls	r2, r7, #1
 8012754:	7062      	strb	r2, [r4, #1]
                *usLen += 1;
 8012756:	882a      	ldrh	r2, [r5, #0]
 8012758:	3201      	adds	r2, #1
 801275a:	802a      	strh	r2, [r5, #0]
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 801275c:	463a      	mov	r2, r7
 801275e:	4631      	mov	r1, r6
 8012760:	f7ff fa7f 	bl	8011c62 <eMBRegHoldingCB>
                if( eRegStatus == MB_ENOERR )
 8012764:	b920      	cbnz	r0, 8012770 <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                    *usLen += 2 * usRegReadCount;
 8012766:	882b      	ldrh	r3, [r5, #0]
 8012768:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 801276c:	802b      	strh	r3, [r5, #0]
            if( eRegStatus != MB_ENOERR )
 801276e:	e003      	b.n	8012778 <eMBFuncReadWriteMultipleHoldingRegister+0x92>
                eStatus = prveMBError2Exception( eRegStatus );
 8012770:	f000 f894 	bl	801289c <prveMBError2Exception>
 8012774:	e000      	b.n	8012778 <eMBFuncReadWriteMultipleHoldingRegister+0x92>
    eMBException    eStatus = MB_EX_NONE;
 8012776:	2000      	movs	r0, #0
        }
    }
    return eStatus;
}
 8012778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801277a:	2003      	movs	r0, #3
 801277c:	e7fc      	b.n	8012778 <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 801277e:	2003      	movs	r0, #3
 8012780:	e7fa      	b.n	8012778 <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 8012782:	2003      	movs	r0, #3
 8012784:	e7f8      	b.n	8012778 <eMBFuncReadWriteMultipleHoldingRegister+0x92>

08012786 <eMBFuncReadInputRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8012786:	880a      	ldrh	r2, [r1, #0]
 8012788:	2a05      	cmp	r2, #5
 801278a:	d001      	beq.n	8012790 <eMBFuncReadInputRegister+0xa>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801278c:	2003      	movs	r0, #3
    }
    return eStatus;
}
 801278e:	4770      	bx	lr
{
 8012790:	b538      	push	{r3, r4, r5, lr}
 8012792:	4603      	mov	r3, r0
 8012794:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8012796:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8012798:	7881      	ldrb	r1, [r0, #2]
 801279a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
        usRegAddress++;
 801279e:	3101      	adds	r1, #1
 80127a0:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80127a2:	78c2      	ldrb	r2, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80127a4:	7905      	ldrb	r5, [r0, #4]
 80127a6:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80127aa:	1e6a      	subs	r2, r5, #1
 80127ac:	b292      	uxth	r2, r2
        if( ( usRegCount >= 1 )
 80127ae:	2a7b      	cmp	r2, #123	@ 0x7b
 80127b0:	d901      	bls.n	80127b6 <eMBFuncReadInputRegister+0x30>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80127b2:	2003      	movs	r0, #3
}
 80127b4:	bd38      	pop	{r3, r4, r5, pc}
            *usLen = MB_PDU_FUNC_OFF;
 80127b6:	2200      	movs	r2, #0
 80127b8:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 80127ba:	2204      	movs	r2, #4
 80127bc:	f800 2b02 	strb.w	r2, [r0], #2
            *usLen += 1;
 80127c0:	8822      	ldrh	r2, [r4, #0]
 80127c2:	3201      	adds	r2, #1
 80127c4:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80127c6:	006a      	lsls	r2, r5, #1
 80127c8:	705a      	strb	r2, [r3, #1]
            *usLen += 1;
 80127ca:	8823      	ldrh	r3, [r4, #0]
 80127cc:	3301      	adds	r3, #1
 80127ce:	8023      	strh	r3, [r4, #0]
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 80127d0:	462a      	mov	r2, r5
 80127d2:	f7ff fa44 	bl	8011c5e <eMBRegInputCB>
            if( eRegStatus != MB_ENOERR )
 80127d6:	b920      	cbnz	r0, 80127e2 <eMBFuncReadInputRegister+0x5c>
                *usLen += usRegCount * 2;
 80127d8:	8823      	ldrh	r3, [r4, #0]
 80127da:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80127de:	8023      	strh	r3, [r4, #0]
 80127e0:	e7e8      	b.n	80127b4 <eMBFuncReadInputRegister+0x2e>
                eStatus = prveMBError2Exception( eRegStatus );
 80127e2:	f000 f85b 	bl	801289c <prveMBError2Exception>
 80127e6:	e7e5      	b.n	80127b4 <eMBFuncReadInputRegister+0x2e>

080127e8 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 80127e8:	b538      	push	{r3, r4, r5, lr}
 80127ea:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 80127ec:	4b05      	ldr	r3, [pc, #20]	@ (8012804 <eMBFuncReportSlaveID+0x1c>)
 80127ee:	881c      	ldrh	r4, [r3, #0]
 80127f0:	4622      	mov	r2, r4
 80127f2:	4905      	ldr	r1, [pc, #20]	@ (8012808 <eMBFuncReportSlaveID+0x20>)
 80127f4:	3001      	adds	r0, #1
 80127f6:	f01a ff7f 	bl	802d6f8 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 80127fa:	3401      	adds	r4, #1
 80127fc:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 80127fe:	2000      	movs	r0, #0
 8012800:	bd38      	pop	{r3, r4, r5, pc}
 8012802:	bf00      	nop
 8012804:	20000a1c 	.word	0x20000a1c
 8012808:	20000a20 	.word	0x20000a20

0801280c <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 801280c:	b510      	push	{r4, lr}
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 801280e:	2a08      	cmp	r2, #8
 8012810:	d823      	bhi.n	801285a <xMBUtilSetBits+0x4e>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8012812:	ea4f 0ed1 	mov.w	lr, r1, lsr #3

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8012816:	f001 0407 	and.w	r4, r1, #7
 801281a:	fa03 f404 	lsl.w	r4, r3, r4

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 801281e:	f04f 0c01 	mov.w	ip, #1
 8012822:	fa0c f202 	lsl.w	r2, ip, r2
 8012826:	b292      	uxth	r2, r2
 8012828:	3a01      	subs	r2, #1
 801282a:	b292      	uxth	r2, r2
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 801282c:	f001 0107 	and.w	r1, r1, #7
 8012830:	fa02 f101 	lsl.w	r1, r2, r1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8012834:	f810 300e 	ldrb.w	r3, [r0, lr]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8012838:	eb0e 020c 	add.w	r2, lr, ip
 801283c:	f810 c002 	ldrb.w	ip, [r0, r2]
 8012840:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8012844:	b21b      	sxth	r3, r3

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8012846:	ea23 0301 	bic.w	r3, r3, r1
 801284a:	b21b      	sxth	r3, r3
 801284c:	4323      	orrs	r3, r4

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 801284e:	f800 300e 	strb.w	r3, [r0, lr]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8012852:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012856:	5483      	strb	r3, [r0, r2]
}
 8012858:	bd10      	pop	{r4, pc}
    assert( ucNBits <= 8 );
 801285a:	4b03      	ldr	r3, [pc, #12]	@ (8012868 <xMBUtilSetBits+0x5c>)
 801285c:	4a03      	ldr	r2, [pc, #12]	@ (801286c <xMBUtilSetBits+0x60>)
 801285e:	2137      	movs	r1, #55	@ 0x37
 8012860:	4803      	ldr	r0, [pc, #12]	@ (8012870 <xMBUtilSetBits+0x64>)
 8012862:	f016 ffbb 	bl	80297dc <__assert_func>
 8012866:	bf00      	nop
 8012868:	08035d00 	.word	0x08035d00
 801286c:	08035d58 	.word	0x08035d58
 8012870:	08035d10 	.word	0x08035d10

08012874 <xMBUtilGetBits>:
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8012874:	ea4f 0cd1 	mov.w	ip, r1, lsr #3

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8012878:	2301      	movs	r3, #1
 801287a:	4093      	lsls	r3, r2
 801287c:	b29b      	uxth	r3, r3
 801287e:	3b01      	subs	r3, #1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8012880:	f810 200c 	ldrb.w	r2, [r0, ip]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8012884:	4460      	add	r0, ip
 8012886:	7840      	ldrb	r0, [r0, #1]
 8012888:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 801288c:	f001 0107 	and.w	r1, r1, #7
 8012890:	410a      	asrs	r2, r1
 8012892:	b292      	uxth	r2, r2

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 8012894:	ea03 0002 	and.w	r0, r3, r2

    return ( UCHAR ) usWordBuf;
}
 8012898:	b2c0      	uxtb	r0, r0
 801289a:	4770      	bx	lr

0801289c <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
 801289c:	2801      	cmp	r0, #1
 801289e:	d005      	beq.n	80128ac <prveMBError2Exception+0x10>
 80128a0:	2807      	cmp	r0, #7
 80128a2:	d005      	beq.n	80128b0 <prveMBError2Exception+0x14>
 80128a4:	b108      	cbz	r0, 80128aa <prveMBError2Exception+0xe>
        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
            break;

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 80128a6:	2004      	movs	r0, #4
            break;
    }

    return eStatus;
}
 80128a8:	4770      	bx	lr
 80128aa:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 80128ac:	2002      	movs	r0, #2
 80128ae:	4770      	bx	lr
            eStatus = MB_EX_SLAVE_BUSY;
 80128b0:	2006      	movs	r0, #6
 80128b2:	4770      	bx	lr

080128b4 <eMBTCPInit>:
}

#if MB_TCP_ENABLED > 0
eMBErrorCode
eMBTCPInit( USHORT ucTCPPort )
{
 80128b4:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
 80128b6:	f000 f968 	bl	8012b8a <eMBTCPDoInit>
 80128ba:	4604      	mov	r4, r0
 80128bc:	b120      	cbz	r0, 80128c8 <eMBTCPInit+0x14>
    {
        eMBState = STATE_DISABLED;
 80128be:	4b11      	ldr	r3, [pc, #68]	@ (8012904 <eMBTCPInit+0x50>)
 80128c0:	2201      	movs	r2, #1
 80128c2:	701a      	strb	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
        eMBCurrentMode = MB_TCP;
        eMBState = STATE_DISABLED;
    }
    return eStatus;
}
 80128c4:	4620      	mov	r0, r4
 80128c6:	bd10      	pop	{r4, pc}
    else if( !xMBPortEventInit(  ) )
 80128c8:	f000 f8ca 	bl	8012a60 <xMBPortEventInit>
 80128cc:	b1c0      	cbz	r0, 8012900 <eMBTCPInit+0x4c>
        pvMBFrameStartCur = eMBTCPStart;
 80128ce:	4b0e      	ldr	r3, [pc, #56]	@ (8012908 <eMBTCPInit+0x54>)
 80128d0:	4a0e      	ldr	r2, [pc, #56]	@ (801290c <eMBTCPInit+0x58>)
 80128d2:	601a      	str	r2, [r3, #0]
        pvMBFrameStopCur = eMBTCPStop;
 80128d4:	4b0e      	ldr	r3, [pc, #56]	@ (8012910 <eMBTCPInit+0x5c>)
 80128d6:	4a0f      	ldr	r2, [pc, #60]	@ (8012914 <eMBTCPInit+0x60>)
 80128d8:	601a      	str	r2, [r3, #0]
        peMBFrameReceiveCur = eMBTCPReceive;
 80128da:	4b0f      	ldr	r3, [pc, #60]	@ (8012918 <eMBTCPInit+0x64>)
 80128dc:	4a0f      	ldr	r2, [pc, #60]	@ (801291c <eMBTCPInit+0x68>)
 80128de:	601a      	str	r2, [r3, #0]
        peMBFrameSendCur = eMBTCPSend;
 80128e0:	4b0f      	ldr	r3, [pc, #60]	@ (8012920 <eMBTCPInit+0x6c>)
 80128e2:	4a10      	ldr	r2, [pc, #64]	@ (8012924 <eMBTCPInit+0x70>)
 80128e4:	601a      	str	r2, [r3, #0]
        pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
 80128e6:	4b10      	ldr	r3, [pc, #64]	@ (8012928 <eMBTCPInit+0x74>)
 80128e8:	2200      	movs	r2, #0
 80128ea:	601a      	str	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 80128ec:	4b0f      	ldr	r3, [pc, #60]	@ (801292c <eMBTCPInit+0x78>)
 80128ee:	22ff      	movs	r2, #255	@ 0xff
 80128f0:	701a      	strb	r2, [r3, #0]
        eMBCurrentMode = MB_TCP;
 80128f2:	4b0f      	ldr	r3, [pc, #60]	@ (8012930 <eMBTCPInit+0x7c>)
 80128f4:	2202      	movs	r2, #2
 80128f6:	701a      	strb	r2, [r3, #0]
        eMBState = STATE_DISABLED;
 80128f8:	4b02      	ldr	r3, [pc, #8]	@ (8012904 <eMBTCPInit+0x50>)
 80128fa:	2201      	movs	r2, #1
 80128fc:	701a      	strb	r2, [r3, #0]
 80128fe:	e7e1      	b.n	80128c4 <eMBTCPInit+0x10>
        eStatus = MB_EPORTERR;
 8012900:	2403      	movs	r4, #3
 8012902:	e7df      	b.n	80128c4 <eMBTCPInit+0x10>
 8012904:	2000009c 	.word	0x2000009c
 8012908:	20000a58 	.word	0x20000a58
 801290c:	08012b9b 	.word	0x08012b9b
 8012910:	20000a54 	.word	0x20000a54
 8012914:	08012b9d 	.word	0x08012b9d
 8012918:	20000a50 	.word	0x20000a50
 801291c:	08012ba5 	.word	0x08012ba5
 8012920:	20000a5c 	.word	0x20000a5c
 8012924:	08012be5 	.word	0x08012be5
 8012928:	20000a4c 	.word	0x20000a4c
 801292c:	20000a61 	.word	0x20000a61
 8012930:	20000a60 	.word	0x20000a60

08012934 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8012934:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 8012936:	4b06      	ldr	r3, [pc, #24]	@ (8012950 <eMBEnable+0x1c>)
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	2b01      	cmp	r3, #1
 801293c:	d001      	beq.n	8012942 <eMBEnable+0xe>
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
 801293e:	2006      	movs	r0, #6
    }
    return eStatus;
}
 8012940:	bd08      	pop	{r3, pc}
        pvMBFrameStartCur(  );
 8012942:	4b04      	ldr	r3, [pc, #16]	@ (8012954 <eMBEnable+0x20>)
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8012948:	2000      	movs	r0, #0
 801294a:	4b01      	ldr	r3, [pc, #4]	@ (8012950 <eMBEnable+0x1c>)
 801294c:	7018      	strb	r0, [r3, #0]
 801294e:	e7f7      	b.n	8012940 <eMBEnable+0xc>
 8012950:	2000009c 	.word	0x2000009c
 8012954:	20000a58 	.word	0x20000a58

08012958 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8012958:	b530      	push	{r4, r5, lr}
 801295a:	b083      	sub	sp, #12
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 801295c:	4b36      	ldr	r3, [pc, #216]	@ (8012a38 <eMBPoll+0xe0>)
 801295e:	781c      	ldrb	r4, [r3, #0]
 8012960:	2c00      	cmp	r4, #0
 8012962:	d163      	bne.n	8012a2c <eMBPoll+0xd4>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8012964:	f10d 0007 	add.w	r0, sp, #7
 8012968:	f000 f88e 	bl	8012a88 <xMBPortEventGet>
 801296c:	2801      	cmp	r0, #1
 801296e:	d002      	beq.n	8012976 <eMBPoll+0x1e>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
 8012970:	4620      	mov	r0, r4
 8012972:	b003      	add	sp, #12
 8012974:	bd30      	pop	{r4, r5, pc}
        switch ( eEvent )
 8012976:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801297a:	2b01      	cmp	r3, #1
 801297c:	d014      	beq.n	80129a8 <eMBPoll+0x50>
 801297e:	2b02      	cmp	r3, #2
 8012980:	d1f6      	bne.n	8012970 <eMBPoll+0x18>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8012982:	4b2e      	ldr	r3, [pc, #184]	@ (8012a3c <eMBPoll+0xe4>)
 8012984:	6818      	ldr	r0, [r3, #0]
 8012986:	7801      	ldrb	r1, [r0, #0]
 8012988:	4b2d      	ldr	r3, [pc, #180]	@ (8012a40 <eMBPoll+0xe8>)
 801298a:	7019      	strb	r1, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 801298c:	4b2d      	ldr	r3, [pc, #180]	@ (8012a44 <eMBPoll+0xec>)
 801298e:	2201      	movs	r2, #1
 8012990:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8012992:	2300      	movs	r3, #0
 8012994:	2b0f      	cmp	r3, #15
 8012996:	dc25      	bgt.n	80129e4 <eMBPoll+0x8c>
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8012998:	4a2b      	ldr	r2, [pc, #172]	@ (8012a48 <eMBPoll+0xf0>)
 801299a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 801299e:	b30a      	cbz	r2, 80129e4 <eMBPoll+0x8c>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80129a0:	4291      	cmp	r1, r2
 80129a2:	d017      	beq.n	80129d4 <eMBPoll+0x7c>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80129a4:	3301      	adds	r3, #1
 80129a6:	e7f5      	b.n	8012994 <eMBPoll+0x3c>
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 80129a8:	4b28      	ldr	r3, [pc, #160]	@ (8012a4c <eMBPoll+0xf4>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	4a28      	ldr	r2, [pc, #160]	@ (8012a50 <eMBPoll+0xf8>)
 80129ae:	4923      	ldr	r1, [pc, #140]	@ (8012a3c <eMBPoll+0xe4>)
 80129b0:	4828      	ldr	r0, [pc, #160]	@ (8012a54 <eMBPoll+0xfc>)
 80129b2:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 80129b4:	4605      	mov	r5, r0
 80129b6:	2800      	cmp	r0, #0
 80129b8:	d1da      	bne.n	8012970 <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 80129ba:	4b26      	ldr	r3, [pc, #152]	@ (8012a54 <eMBPoll+0xfc>)
 80129bc:	781b      	ldrb	r3, [r3, #0]
 80129be:	4a26      	ldr	r2, [pc, #152]	@ (8012a58 <eMBPoll+0x100>)
 80129c0:	7812      	ldrb	r2, [r2, #0]
 80129c2:	4293      	cmp	r3, r2
 80129c4:	d001      	beq.n	80129ca <eMBPoll+0x72>
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d132      	bne.n	8012a30 <eMBPoll+0xd8>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 80129ca:	2002      	movs	r0, #2
 80129cc:	f000 f850 	bl	8012a70 <xMBPortEventPost>
    return MB_ENOERR;
 80129d0:	462c      	mov	r4, r5
 80129d2:	e7cd      	b.n	8012970 <eMBPoll+0x18>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 80129d4:	4a1c      	ldr	r2, [pc, #112]	@ (8012a48 <eMBPoll+0xf0>)
 80129d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80129da:	685b      	ldr	r3, [r3, #4]
 80129dc:	491c      	ldr	r1, [pc, #112]	@ (8012a50 <eMBPoll+0xf8>)
 80129de:	4798      	blx	r3
 80129e0:	4b18      	ldr	r3, [pc, #96]	@ (8012a44 <eMBPoll+0xec>)
 80129e2:	7018      	strb	r0, [r3, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 80129e4:	4b1b      	ldr	r3, [pc, #108]	@ (8012a54 <eMBPoll+0xfc>)
 80129e6:	781b      	ldrb	r3, [r3, #0]
 80129e8:	b323      	cbz	r3, 8012a34 <eMBPoll+0xdc>
                if( eException != MB_EX_NONE )
 80129ea:	4b16      	ldr	r3, [pc, #88]	@ (8012a44 <eMBPoll+0xec>)
 80129ec:	781b      	ldrb	r3, [r3, #0]
 80129ee:	b19b      	cbz	r3, 8012a18 <eMBPoll+0xc0>
                    usLength = 0;
 80129f0:	4a17      	ldr	r2, [pc, #92]	@ (8012a50 <eMBPoll+0xf8>)
 80129f2:	2100      	movs	r1, #0
 80129f4:	8011      	strh	r1, [r2, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 80129f6:	4912      	ldr	r1, [pc, #72]	@ (8012a40 <eMBPoll+0xe8>)
 80129f8:	7809      	ldrb	r1, [r1, #0]
 80129fa:	4810      	ldr	r0, [pc, #64]	@ (8012a3c <eMBPoll+0xe4>)
 80129fc:	6805      	ldr	r5, [r0, #0]
 80129fe:	f04f 0c01 	mov.w	ip, #1
 8012a02:	f8a2 c000 	strh.w	ip, [r2]
 8012a06:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8012a0a:	7029      	strb	r1, [r5, #0]
                    ucMBFrame[usLength++] = eException;
 8012a0c:	6800      	ldr	r0, [r0, #0]
 8012a0e:	8811      	ldrh	r1, [r2, #0]
 8012a10:	eb01 050c 	add.w	r5, r1, ip
 8012a14:	8015      	strh	r5, [r2, #0]
 8012a16:	5443      	strb	r3, [r0, r1]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8012a18:	4b10      	ldr	r3, [pc, #64]	@ (8012a5c <eMBPoll+0x104>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8012a50 <eMBPoll+0xf8>)
 8012a1e:	8812      	ldrh	r2, [r2, #0]
 8012a20:	4906      	ldr	r1, [pc, #24]	@ (8012a3c <eMBPoll+0xe4>)
 8012a22:	6809      	ldr	r1, [r1, #0]
 8012a24:	480c      	ldr	r0, [pc, #48]	@ (8012a58 <eMBPoll+0x100>)
 8012a26:	7800      	ldrb	r0, [r0, #0]
 8012a28:	4798      	blx	r3
 8012a2a:	e7a1      	b.n	8012970 <eMBPoll+0x18>
        return MB_EILLSTATE;
 8012a2c:	2406      	movs	r4, #6
 8012a2e:	e79f      	b.n	8012970 <eMBPoll+0x18>
    return MB_ENOERR;
 8012a30:	4604      	mov	r4, r0
 8012a32:	e79d      	b.n	8012970 <eMBPoll+0x18>
 8012a34:	461c      	mov	r4, r3
 8012a36:	e79b      	b.n	8012970 <eMBPoll+0x18>
 8012a38:	2000009c 	.word	0x2000009c
 8012a3c:	20000a44 	.word	0x20000a44
 8012a40:	20000a41 	.word	0x20000a41
 8012a44:	20000a40 	.word	0x20000a40
 8012a48:	2000001c 	.word	0x2000001c
 8012a4c:	20000a50 	.word	0x20000a50
 8012a50:	20000a42 	.word	0x20000a42
 8012a54:	20000a48 	.word	0x20000a48
 8012a58:	20000a61 	.word	0x20000a61
 8012a5c:	20000a5c 	.word	0x20000a5c

08012a60 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
 8012a60:	4b02      	ldr	r3, [pc, #8]	@ (8012a6c <xMBPortEventInit+0xc>)
 8012a62:	2200      	movs	r2, #0
 8012a64:	701a      	strb	r2, [r3, #0]
    return TRUE;
}
 8012a66:	2001      	movs	r0, #1
 8012a68:	4770      	bx	lr
 8012a6a:	bf00      	nop
 8012a6c:	20000a62 	.word	0x20000a62

08012a70 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
 8012a70:	2301      	movs	r3, #1
 8012a72:	4a03      	ldr	r2, [pc, #12]	@ (8012a80 <xMBPortEventPost+0x10>)
 8012a74:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 8012a76:	4a03      	ldr	r2, [pc, #12]	@ (8012a84 <xMBPortEventPost+0x14>)
 8012a78:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	4770      	bx	lr
 8012a7e:	bf00      	nop
 8012a80:	20000a62 	.word	0x20000a62
 8012a84:	20000a63 	.word	0x20000a63

08012a88 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8012a88:	4603      	mov	r3, r0
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 8012a8a:	4a05      	ldr	r2, [pc, #20]	@ (8012aa0 <xMBPortEventGet+0x18>)
 8012a8c:	7810      	ldrb	r0, [r2, #0]
 8012a8e:	b130      	cbz	r0, 8012a9e <xMBPortEventGet+0x16>
    {
        *eEvent = eQueuedEvent;
 8012a90:	4a04      	ldr	r2, [pc, #16]	@ (8012aa4 <xMBPortEventGet+0x1c>)
 8012a92:	7812      	ldrb	r2, [r2, #0]
 8012a94:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8012a96:	4b02      	ldr	r3, [pc, #8]	@ (8012aa0 <xMBPortEventGet+0x18>)
 8012a98:	2200      	movs	r2, #0
 8012a9a:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 8012a9c:	2001      	movs	r0, #1
    }
    return xEventHappened;
}
 8012a9e:	4770      	bx	lr
 8012aa0:	20000a62 	.word	0x20000a62
 8012aa4:	20000a63 	.word	0x20000a63

08012aa8 <handler_mb_tcp>:
//}
//

static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_READ){
 8012aa8:	2907      	cmp	r1, #7
 8012aaa:	d000      	beq.n	8012aae <handler_mb_tcp+0x6>
 8012aac:	4770      	bx	lr
static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){
 8012aae:	b538      	push	{r3, r4, r5, lr}
 8012ab0:	4604      	mov	r4, r0
		struct mg_iobuf *r = &c->recv;

		ucTCPRequestLen = r->len;
 8012ab2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8012ab4:	b293      	uxth	r3, r2
 8012ab6:	4915      	ldr	r1, [pc, #84]	@ (8012b0c <handler_mb_tcp+0x64>)
 8012ab8:	800b      	strh	r3, [r1, #0]
		if(ucTCPRequestLen>0){
 8012aba:	b933      	cbnz	r3, 8012aca <handler_mb_tcp+0x22>

			}else{
				c->is_closing = 1;
			}
		}else{
			c->is_closing = 1;
 8012abc:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8012ac0:	f043 0320 	orr.w	r3, r3, #32
 8012ac4:	f880 30ad 	strb.w	r3, [r0, #173]	@ 0xad
		}
	}
}
 8012ac8:	bd38      	pop	{r3, r4, r5, pc}
			memcpy(ucTCPRequestFrame, r->buf, sizeof(uint8_t) * ucTCPRequestLen);
 8012aca:	461a      	mov	r2, r3
 8012acc:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8012ace:	4810      	ldr	r0, [pc, #64]	@ (8012b10 <handler_mb_tcp+0x68>)
 8012ad0:	f01a fe12 	bl	802d6f8 <memcpy>
			xMBPortEventPost (EV_FRAME_RECEIVED);
 8012ad4:	2001      	movs	r0, #1
 8012ad6:	f7ff ffcb 	bl	8012a70 <xMBPortEventPost>
			eMBPoll ();
 8012ada:	f7ff ff3d 	bl	8012958 <eMBPoll>
			eMBPoll ();
 8012ade:	f7ff ff3b 	bl	8012958 <eMBPoll>
			if(bFrameSent){
 8012ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8012b14 <handler_mb_tcp+0x6c>)
 8012ae4:	781b      	ldrb	r3, [r3, #0]
 8012ae6:	b933      	cbnz	r3, 8012af6 <handler_mb_tcp+0x4e>
				c->is_closing = 1;
 8012ae8:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8012aec:	f043 0320 	orr.w	r3, r3, #32
 8012af0:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8012af4:	e7e8      	b.n	8012ac8 <handler_mb_tcp+0x20>
				bFrameSent = FALSE;
 8012af6:	2500      	movs	r5, #0
 8012af8:	4b06      	ldr	r3, [pc, #24]	@ (8012b14 <handler_mb_tcp+0x6c>)
 8012afa:	701d      	strb	r5, [r3, #0]
				mg_send(c, ucTCPResponseFrame, ucTCPResponseLen);
 8012afc:	4b06      	ldr	r3, [pc, #24]	@ (8012b18 <handler_mb_tcp+0x70>)
 8012afe:	881a      	ldrh	r2, [r3, #0]
 8012b00:	4906      	ldr	r1, [pc, #24]	@ (8012b1c <handler_mb_tcp+0x74>)
 8012b02:	4620      	mov	r0, r4
 8012b04:	f014 f874 	bl	8026bf0 <mg_send>
				r->len = 0;                  // Tell Mongoose we've consumed data
 8012b08:	6425      	str	r5, [r4, #64]	@ 0x40
 8012b0a:	e7dd      	b.n	8012ac8 <handler_mb_tcp+0x20>
 8012b0c:	20001268 	.word	0x20001268
 8012b10:	2000126c 	.word	0x2000126c
 8012b14:	20000a64 	.word	0x20000a64
 8012b18:	20000a66 	.word	0x20000a66
 8012b1c:	20000a68 	.word	0x20000a68

08012b20 <init_mb_tcp>:

static const char *s_lsn = "tcp://0.0.0.0:502";   // Listening address ModBusTCP

void init_mb_tcp(void * param){
 8012b20:	b508      	push	{r3, lr}

	struct mg_mgr *mgr = (struct mg_mgr *)param;  // Event manager
	mg_listen(mgr, s_lsn, handler_mb_tcp, NULL);  // Create server connection
 8012b22:	2300      	movs	r3, #0
 8012b24:	4a04      	ldr	r2, [pc, #16]	@ (8012b38 <init_mb_tcp+0x18>)
 8012b26:	4905      	ldr	r1, [pc, #20]	@ (8012b3c <init_mb_tcp+0x1c>)
 8012b28:	f013 ff76 	bl	8026a18 <mg_listen>

	eMBTCPInit(0);
 8012b2c:	2000      	movs	r0, #0
 8012b2e:	f7ff fec1 	bl	80128b4 <eMBTCPInit>
	eMBEnable();
 8012b32:	f7ff feff 	bl	8012934 <eMBEnable>
}
 8012b36:	bd08      	pop	{r3, pc}
 8012b38:	08012aa9 	.word	0x08012aa9
 8012b3c:	08035d68 	.word	0x08035d68

08012b40 <xMBTCPPortInit>:
BOOL  xMBTCPPortInit( USHORT usTCPPort )
{


    return TRUE;
}
 8012b40:	2001      	movs	r0, #1
 8012b42:	4770      	bx	lr

08012b44 <xMBTCPPortGetRequest>:

BOOL  xMBTCPPortGetRequest( UCHAR **ppucMBTCPFrame, USHORT * usTCPLength )
{
    *ppucMBTCPFrame = (uint8_t *) &ucTCPRequestFrame[0];
 8012b44:	4b04      	ldr	r3, [pc, #16]	@ (8012b58 <xMBTCPPortGetRequest+0x14>)
 8012b46:	6003      	str	r3, [r0, #0]
    *usTCPLength = ucTCPRequestLen;
 8012b48:	4b04      	ldr	r3, [pc, #16]	@ (8012b5c <xMBTCPPortGetRequest+0x18>)
 8012b4a:	881a      	ldrh	r2, [r3, #0]
 8012b4c:	800a      	strh	r2, [r1, #0]
    // Reset the buffer.
    ucTCPRequestLen = 0;
 8012b4e:	2200      	movs	r2, #0
 8012b50:	801a      	strh	r2, [r3, #0]
    return TRUE;
}
 8012b52:	2001      	movs	r0, #1
 8012b54:	4770      	bx	lr
 8012b56:	bf00      	nop
 8012b58:	2000126c 	.word	0x2000126c
 8012b5c:	20001268 	.word	0x20001268

08012b60 <xMBTCPPortSendResponse>:


BOOL xMBTCPPortSendResponse( const UCHAR *pucMBTCPFrame, USHORT usTCPLength )
{
 8012b60:	b510      	push	{r4, lr}
 8012b62:	460c      	mov	r4, r1
      memcpy(ucTCPResponseFrame,pucMBTCPFrame , usTCPLength);
 8012b64:	460a      	mov	r2, r1
 8012b66:	4601      	mov	r1, r0
 8012b68:	4804      	ldr	r0, [pc, #16]	@ (8012b7c <xMBTCPPortSendResponse+0x1c>)
 8012b6a:	f01a fdc5 	bl	802d6f8 <memcpy>
      ucTCPResponseLen = usTCPLength;
 8012b6e:	4b04      	ldr	r3, [pc, #16]	@ (8012b80 <xMBTCPPortSendResponse+0x20>)
 8012b70:	801c      	strh	r4, [r3, #0]
      bFrameSent = TRUE;
 8012b72:	2001      	movs	r0, #1
 8012b74:	4b03      	ldr	r3, [pc, #12]	@ (8012b84 <xMBTCPPortSendResponse+0x24>)
 8012b76:	7018      	strb	r0, [r3, #0]
      return bFrameSent;
}
 8012b78:	bd10      	pop	{r4, pc}
 8012b7a:	bf00      	nop
 8012b7c:	20000a68 	.word	0x20000a68
 8012b80:	20000a66 	.word	0x20000a66
 8012b84:	20000a64 	.word	0x20000a64

08012b88 <vMBTCPPortDisable>:
{
};

void vMBTCPPortDisable( void )
{
};
 8012b88:	4770      	bx	lr

08012b8a <eMBTCPDoInit>:


/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBTCPDoInit( USHORT ucTCPPort )
{
 8012b8a:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( xMBTCPPortInit( ucTCPPort ) == FALSE )
 8012b8c:	f7ff ffd8 	bl	8012b40 <xMBTCPPortInit>
 8012b90:	b108      	cbz	r0, 8012b96 <eMBTCPDoInit+0xc>
    eMBErrorCode    eStatus = MB_ENOERR;
 8012b92:	2000      	movs	r0, #0
    {
        eStatus = MB_EPORTERR;
    }
    return eStatus;
}
 8012b94:	bd08      	pop	{r3, pc}
        eStatus = MB_EPORTERR;
 8012b96:	2003      	movs	r0, #3
 8012b98:	e7fc      	b.n	8012b94 <eMBTCPDoInit+0xa>

08012b9a <eMBTCPStart>:

void
eMBTCPStart( void )
{
}
 8012b9a:	4770      	bx	lr

08012b9c <eMBTCPStop>:

void
eMBTCPStop( void )
{
 8012b9c:	b508      	push	{r3, lr}
    /* Make sure that no more clients are connected. */
    vMBTCPPortDisable( );
 8012b9e:	f7ff fff3 	bl	8012b88 <vMBTCPPortDisable>
}
 8012ba2:	bd08      	pop	{r3, pc}

08012ba4 <eMBTCPReceive>:

eMBErrorCode
eMBTCPReceive( UCHAR * pucRcvAddress, UCHAR ** ppucFrame, USHORT * pusLength )
{
 8012ba4:	b570      	push	{r4, r5, r6, lr}
 8012ba6:	b082      	sub	sp, #8
 8012ba8:	4606      	mov	r6, r0
 8012baa:	460d      	mov	r5, r1
 8012bac:	4614      	mov	r4, r2
    eMBErrorCode    eStatus = MB_EIO;
    UCHAR          *pucMBTCPFrame;
    USHORT          usLength;
    USHORT          usPID;

    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 8012bae:	f10d 0102 	add.w	r1, sp, #2
 8012bb2:	a801      	add	r0, sp, #4
 8012bb4:	f7ff ffc6 	bl	8012b44 <xMBTCPPortGetRequest>
 8012bb8:	b180      	cbz	r0, 8012bdc <eMBTCPReceive+0x38>
    {
        usPID = pucMBTCPFrame[MB_TCP_PID] << 8U;
 8012bba:	9b01      	ldr	r3, [sp, #4]
 8012bbc:	7899      	ldrb	r1, [r3, #2]
        usPID |= pucMBTCPFrame[MB_TCP_PID + 1];
 8012bbe:	78da      	ldrb	r2, [r3, #3]

        if( usPID == MB_TCP_PROTOCOL_ID )
 8012bc0:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 8012bc4:	d10c      	bne.n	8012be0 <eMBTCPReceive+0x3c>
        {
            *ppucFrame = &pucMBTCPFrame[MB_TCP_FUNC];
 8012bc6:	3307      	adds	r3, #7
 8012bc8:	602b      	str	r3, [r5, #0]
            *pusLength = usLength - MB_TCP_FUNC;
 8012bca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012bce:	3b07      	subs	r3, #7
 8012bd0:	8023      	strh	r3, [r4, #0]
            eStatus = MB_ENOERR;

            /* Modbus TCP does not use any addresses. Fake the source address such
             * that the processing part deals with this frame.
             */
            *pucRcvAddress = MB_TCP_PSEUDO_ADDRESS;
 8012bd2:	23ff      	movs	r3, #255	@ 0xff
 8012bd4:	7033      	strb	r3, [r6, #0]
            eStatus = MB_ENOERR;
 8012bd6:	2000      	movs	r0, #0
    else
    {
        eStatus = MB_EIO;
    }
    return eStatus;
}
 8012bd8:	b002      	add	sp, #8
 8012bda:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EIO;
 8012bdc:	2005      	movs	r0, #5
 8012bde:	e7fb      	b.n	8012bd8 <eMBTCPReceive+0x34>
    eMBErrorCode    eStatus = MB_EIO;
 8012be0:	2005      	movs	r0, #5
 8012be2:	e7f9      	b.n	8012bd8 <eMBTCPReceive+0x34>

08012be4 <eMBTCPSend>:

eMBErrorCode
eMBTCPSend( UCHAR _unused, const UCHAR * pucFrame, USHORT usLength )
{
 8012be4:	b508      	push	{r3, lr}
 8012be6:	4608      	mov	r0, r1
    eMBErrorCode    eStatus = MB_ENOERR;
    UCHAR          *pucMBTCPFrame = ( UCHAR * ) pucFrame - MB_TCP_FUNC;
    USHORT          usTCPLength = usLength + MB_TCP_FUNC;
 8012be8:	1dd1      	adds	r1, r2, #7
     * function with the buffer returned by the previous call. Therefore we 
     * only have to update the length in the header. Note that the length 
     * header includes the size of the Modbus PDU and the UID Byte. Therefore 
     * the length is usLength plus one.
     */
    pucMBTCPFrame[MB_TCP_LEN] = ( usLength + 1 ) >> 8U;
 8012bea:	1c53      	adds	r3, r2, #1
 8012bec:	121b      	asrs	r3, r3, #8
 8012bee:	f800 3c03 	strb.w	r3, [r0, #-3]
    pucMBTCPFrame[MB_TCP_LEN + 1] = ( usLength + 1 ) & 0xFF;
 8012bf2:	3201      	adds	r2, #1
 8012bf4:	f800 2c02 	strb.w	r2, [r0, #-2]
    if( xMBTCPPortSendResponse( pucMBTCPFrame, usTCPLength ) == FALSE )
 8012bf8:	b289      	uxth	r1, r1
 8012bfa:	3807      	subs	r0, #7
 8012bfc:	f7ff ffb0 	bl	8012b60 <xMBTCPPortSendResponse>
 8012c00:	b108      	cbz	r0, 8012c06 <eMBTCPSend+0x22>
    eMBErrorCode    eStatus = MB_ENOERR;
 8012c02:	2000      	movs	r0, #0
    {
        eStatus = MB_EIO;
    }
    return eStatus;
}
 8012c04:	bd08      	pop	{r3, pc}
        eStatus = MB_EIO;
 8012c06:	2005      	movs	r0, #5
 8012c08:	e7fc      	b.n	8012c04 <eMBTCPSend+0x20>
	...

08012c0c <handle_OPTIONS_method>:
	free(pub_topics_str);
	free(subscr_topics_str);
}


static void handle_OPTIONS_method(struct mg_connection *c){
 8012c0c:	b508      	push	{r3, lr}

	mg_http_reply(c, 200,
 8012c0e:	4b03      	ldr	r3, [pc, #12]	@ (8012c1c <handle_OPTIONS_method+0x10>)
 8012c10:	4a03      	ldr	r2, [pc, #12]	@ (8012c20 <handle_OPTIONS_method+0x14>)
 8012c12:	21c8      	movs	r1, #200	@ 0xc8
 8012c14:	f010 fe76 	bl	8023904 <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 8012c18:	bd08      	pop	{r3, pc}
 8012c1a:	bf00      	nop
 8012c1c:	0803a1cc 	.word	0x0803a1cc
 8012c20:	08035d7c 	.word	0x08035d7c

08012c24 <handle_firmware_deactivate>:
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}

static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 8012c24:	b570      	push	{r4, r5, r6, lr}
 8012c26:	b084      	sub	sp, #16
 8012c28:	4605      	mov	r5, r0
 8012c2a:	460c      	mov	r4, r1

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012c2c:	ae02      	add	r6, sp, #8
 8012c2e:	4914      	ldr	r1, [pc, #80]	@ (8012c80 <handle_firmware_deactivate+0x5c>)
 8012c30:	4630      	mov	r0, r6
 8012c32:	f010 fff1 	bl	8023c18 <mg_str_s>
 8012c36:	2300      	movs	r3, #0
 8012c38:	9300      	str	r3, [sp, #0]
 8012c3a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012c3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012c42:	f011 fa0b 	bl	802405c <mg_match>
 8012c46:	b198      	cbz	r0, 8012c70 <handle_firmware_deactivate+0x4c>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 8012c48:	4b0e      	ldr	r3, [pc, #56]	@ (8012c84 <handle_firmware_deactivate+0x60>)
 8012c4a:	6a1b      	ldr	r3, [r3, #32]
 8012c4c:	480e      	ldr	r0, [pc, #56]	@ (8012c88 <handle_firmware_deactivate+0x64>)
 8012c4e:	4798      	blx	r3
 8012c50:	b138      	cbz	r0, 8012c62 <handle_firmware_deactivate+0x3e>

			mg_http_reply(c, 200, headers, //TODO delete for release,
 8012c52:	4b0e      	ldr	r3, [pc, #56]	@ (8012c8c <handle_firmware_deactivate+0x68>)
 8012c54:	4a0e      	ldr	r2, [pc, #56]	@ (8012c90 <handle_firmware_deactivate+0x6c>)
 8012c56:	21c8      	movs	r1, #200	@ 0xc8
 8012c58:	4628      	mov	r0, r5
 8012c5a:	f010 fe53 	bl	8023904 <mg_http_reply>
				}
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 8012c5e:	b004      	add	sp, #16
 8012c60:	bd70      	pop	{r4, r5, r6, pc}
					mg_http_reply(c, 200, headers, //TODO delete for release,
 8012c62:	4b0c      	ldr	r3, [pc, #48]	@ (8012c94 <handle_firmware_deactivate+0x70>)
 8012c64:	4a0a      	ldr	r2, [pc, #40]	@ (8012c90 <handle_firmware_deactivate+0x6c>)
 8012c66:	21c8      	movs	r1, #200	@ 0xc8
 8012c68:	4628      	mov	r0, r5
 8012c6a:	f010 fe4b 	bl	8023904 <mg_http_reply>
 8012c6e:	e7f6      	b.n	8012c5e <handle_firmware_deactivate+0x3a>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012c70:	4b09      	ldr	r3, [pc, #36]	@ (8012c98 <handle_firmware_deactivate+0x74>)
 8012c72:	4a07      	ldr	r2, [pc, #28]	@ (8012c90 <handle_firmware_deactivate+0x6c>)
 8012c74:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012c78:	4628      	mov	r0, r5
 8012c7a:	f010 fe43 	bl	8023904 <mg_http_reply>
}
 8012c7e:	e7ee      	b.n	8012c5e <handle_firmware_deactivate+0x3a>
 8012c80:	08035e1c 	.word	0x08035e1c
 8012c84:	200000a0 	.word	0x200000a0
 8012c88:	0803588c 	.word	0x0803588c
 8012c8c:	08035e24 	.word	0x08035e24
 8012c90:	08035e60 	.word	0x08035e60
 8012c94:	08035ed0 	.word	0x08035ed0
 8012c98:	08035f14 	.word	0x08035f14

08012c9c <handle_web_files_remove>:

static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 8012c9c:	b570      	push	{r4, r5, r6, lr}
 8012c9e:	b084      	sub	sp, #16
 8012ca0:	4605      	mov	r5, r0
 8012ca2:	460c      	mov	r4, r1

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012ca4:	ae02      	add	r6, sp, #8
 8012ca6:	4912      	ldr	r1, [pc, #72]	@ (8012cf0 <handle_web_files_remove+0x54>)
 8012ca8:	4630      	mov	r0, r6
 8012caa:	f010 ffb5 	bl	8023c18 <mg_str_s>
 8012cae:	2300      	movs	r3, #0
 8012cb0:	9300      	str	r3, [sp, #0]
 8012cb2:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012cb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012cba:	f011 f9cf 	bl	802405c <mg_match>
 8012cbe:	b178      	cbz	r0, 8012ce0 <handle_web_files_remove+0x44>
			mg_fs_lfs.rm("/web");
 8012cc0:	4e0c      	ldr	r6, [pc, #48]	@ (8012cf4 <handle_web_files_remove+0x58>)
 8012cc2:	6a33      	ldr	r3, [r6, #32]
 8012cc4:	4c0c      	ldr	r4, [pc, #48]	@ (8012cf8 <handle_web_files_remove+0x5c>)
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 8012cca:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8012ccc:	4620      	mov	r0, r4
 8012cce:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 8012cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8012cfc <handle_web_files_remove+0x60>)
 8012cd2:	4a0b      	ldr	r2, [pc, #44]	@ (8012d00 <handle_web_files_remove+0x64>)
 8012cd4:	21c8      	movs	r1, #200	@ 0xc8
 8012cd6:	4628      	mov	r0, r5
 8012cd8:	f010 fe14 	bl	8023904 <mg_http_reply>
			    "{\"status\":\"success\",\"message\":\"All web interface files are deleted\"}\r\n");
    }else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
    }
}
 8012cdc:	b004      	add	sp, #16
 8012cde:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012ce0:	4b08      	ldr	r3, [pc, #32]	@ (8012d04 <handle_web_files_remove+0x68>)
 8012ce2:	4a07      	ldr	r2, [pc, #28]	@ (8012d00 <handle_web_files_remove+0x64>)
 8012ce4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012ce8:	4628      	mov	r0, r5
 8012cea:	f010 fe0b 	bl	8023904 <mg_http_reply>
}
 8012cee:	e7f5      	b.n	8012cdc <handle_web_files_remove+0x40>
 8012cf0:	08035e1c 	.word	0x08035e1c
 8012cf4:	200000a0 	.word	0x200000a0
 8012cf8:	08035878 	.word	0x08035878
 8012cfc:	08035f64 	.word	0x08035f64
 8012d00:	08035e60 	.word	0x08035e60
 8012d04:	08035f14 	.word	0x08035f14

08012d08 <handler_logout>:
static void handler_logout(struct mg_connection *c,struct mg_http_message *hm){
 8012d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d0a:	b0c3      	sub	sp, #268	@ 0x10c
 8012d0c:	4606      	mov	r6, r0
 8012d0e:	460d      	mov	r5, r1
	char username[128] = {0};
 8012d10:	2400      	movs	r4, #0
 8012d12:	9422      	str	r4, [sp, #136]	@ 0x88
 8012d14:	277c      	movs	r7, #124	@ 0x7c
 8012d16:	463a      	mov	r2, r7
 8012d18:	4621      	mov	r1, r4
 8012d1a:	a823      	add	r0, sp, #140	@ 0x8c
 8012d1c:	f019 fab0 	bl	802c280 <memset>
	char pass[128] = {0};
 8012d20:	9402      	str	r4, [sp, #8]
 8012d22:	463a      	mov	r2, r7
 8012d24:	4621      	mov	r1, r4
 8012d26:	a803      	add	r0, sp, #12
 8012d28:	f019 faaa 	bl	802c280 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 8012d2c:	2280      	movs	r2, #128	@ 0x80
 8012d2e:	9200      	str	r2, [sp, #0]
 8012d30:	ab02      	add	r3, sp, #8
 8012d32:	a922      	add	r1, sp, #136	@ 0x88
 8012d34:	4628      	mov	r0, r5
 8012d36:	f011 fe97 	bl	8024a68 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 8012d3a:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 8012d3e:	b113      	cbz	r3, 8012d46 <handler_logout+0x3e>
 8012d40:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012d44:	b962      	cbnz	r2, 8012d60 <handler_logout+0x58>
	}else if (username[0] == '\0' && pass[0] != '\0') {
 8012d46:	b913      	cbnz	r3, 8012d4e <handler_logout+0x46>
 8012d48:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012d4c:	bb23      	cbnz	r3, 8012d98 <handler_logout+0x90>
        mg_http_reply(c, 404, headers, //TODO delete for release,
 8012d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8012dc8 <handler_logout+0xc0>)
 8012d50:	4a1e      	ldr	r2, [pc, #120]	@ (8012dcc <handler_logout+0xc4>)
 8012d52:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8012d56:	4630      	mov	r0, r6
 8012d58:	f010 fdd4 	bl	8023904 <mg_http_reply>
}
 8012d5c:	b043      	add	sp, #268	@ 0x10c
 8012d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mg_http_reply(c, 400, headers, //TODO delete for release,
 8012d60:	4b1b      	ldr	r3, [pc, #108]	@ (8012dd0 <handler_logout+0xc8>)
 8012d62:	4a1a      	ldr	r2, [pc, #104]	@ (8012dcc <handler_logout+0xc4>)
 8012d64:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012d68:	4630      	mov	r0, r6
 8012d6a:	f010 fdcb 	bl	8023904 <mg_http_reply>
        return;
 8012d6e:	e7f5      	b.n	8012d5c <handler_logout+0x54>
				web_tokens[i].token[0] = '\0';
 8012d70:	4a18      	ldr	r2, [pc, #96]	@ (8012dd4 <handler_logout+0xcc>)
 8012d72:	23b8      	movs	r3, #184	@ 0xb8
 8012d74:	fb04 f303 	mul.w	r3, r4, r3
 8012d78:	18d0      	adds	r0, r2, r3
 8012d7a:	2100      	movs	r1, #0
 8012d7c:	f880 1080 	strb.w	r1, [r0, #128]	@ 0x80
				web_tokens[i].expare = 0;
 8012d80:	2400      	movs	r4, #0
 8012d82:	2500      	movs	r5, #0
 8012d84:	e9c0 452c 	strd	r4, r5, [r0, #176]	@ 0xb0
				web_tokens[i].user[0] = '\0';
 8012d88:	54d1      	strb	r1, [r2, r3]
		        mg_http_reply(c, 200, headers, //TODO delete for release,
 8012d8a:	4b13      	ldr	r3, [pc, #76]	@ (8012dd8 <handler_logout+0xd0>)
 8012d8c:	4a0f      	ldr	r2, [pc, #60]	@ (8012dcc <handler_logout+0xc4>)
 8012d8e:	21c8      	movs	r1, #200	@ 0xc8
 8012d90:	4630      	mov	r0, r6
 8012d92:	f010 fdb7 	bl	8023904 <mg_http_reply>
		        return;
 8012d96:	e7e1      	b.n	8012d5c <handler_logout+0x54>
		for (i=0;i<user_list_size; i++){
 8012d98:	2400      	movs	r4, #0
 8012d9a:	2c09      	cmp	r4, #9
 8012d9c:	dc0c      	bgt.n	8012db8 <handler_logout+0xb0>
			if((strcmp(web_tokens[i].token, pass) == 0)){
 8012d9e:	23b8      	movs	r3, #184	@ 0xb8
 8012da0:	fb04 f303 	mul.w	r3, r4, r3
 8012da4:	3380      	adds	r3, #128	@ 0x80
 8012da6:	a902      	add	r1, sp, #8
 8012da8:	480a      	ldr	r0, [pc, #40]	@ (8012dd4 <handler_logout+0xcc>)
 8012daa:	4418      	add	r0, r3
 8012dac:	f7fd fa18 	bl	80101e0 <strcmp>
 8012db0:	2800      	cmp	r0, #0
 8012db2:	d0dd      	beq.n	8012d70 <handler_logout+0x68>
		for (i=0;i<user_list_size; i++){
 8012db4:	3401      	adds	r4, #1
 8012db6:	e7f0      	b.n	8012d9a <handler_logout+0x92>
        mg_http_reply(c, 404, headers,
 8012db8:	4b08      	ldr	r3, [pc, #32]	@ (8012ddc <handler_logout+0xd4>)
 8012dba:	4a04      	ldr	r2, [pc, #16]	@ (8012dcc <handler_logout+0xc4>)
 8012dbc:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	f010 fd9f 	bl	8023904 <mg_http_reply>
        return;
 8012dc6:	e7c9      	b.n	8012d5c <handler_logout+0x54>
 8012dc8:	0803609c 	.word	0x0803609c
 8012dcc:	08035e60 	.word	0x08035e60
 8012dd0:	08035fac 	.word	0x08035fac
 8012dd4:	20001a70 	.word	0x20001a70
 8012dd8:	0803602c 	.word	0x0803602c
 8012ddc:	08036068 	.word	0x08036068

08012de0 <handle_login>:
static void handle_login(struct mg_connection *c, tokens_list_t *u) {
 8012de0:	b530      	push	{r4, r5, lr}
 8012de2:	b0c7      	sub	sp, #284	@ 0x11c
 8012de4:	4604      	mov	r4, r0
 8012de6:	460d      	mov	r5, r1
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 8012de8:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8012dec:	f013 0240 	ands.w	r2, r3, #64	@ 0x40
 8012df0:	d01f      	beq.n	8012e32 <handle_login+0x52>
 8012df2:	4b12      	ldr	r3, [pc, #72]	@ (8012e3c <handle_login+0x5c>)
              cookie_name, u->token,
 8012df4:	f105 0180 	add.w	r1, r5, #128	@ 0x80
  mg_snprintf(cookie, sizeof(cookie),
 8012df8:	b1ea      	cbz	r2, 8012e36 <handle_login+0x56>
 8012dfa:	4a11      	ldr	r2, [pc, #68]	@ (8012e40 <handle_login+0x60>)
 8012dfc:	4811      	ldr	r0, [pc, #68]	@ (8012e44 <handle_login+0x64>)
 8012dfe:	9002      	str	r0, [sp, #8]
 8012e00:	9201      	str	r2, [sp, #4]
 8012e02:	9100      	str	r1, [sp, #0]
 8012e04:	4a10      	ldr	r2, [pc, #64]	@ (8012e48 <handle_login+0x68>)
 8012e06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012e0a:	a806      	add	r0, sp, #24
 8012e0c:	f010 f87a 	bl	8022f04 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m}", MG_ESC("user"), MG_ESC(u->user));
 8012e10:	9505      	str	r5, [sp, #20]
 8012e12:	2200      	movs	r2, #0
 8012e14:	9204      	str	r2, [sp, #16]
 8012e16:	4b0d      	ldr	r3, [pc, #52]	@ (8012e4c <handle_login+0x6c>)
 8012e18:	9303      	str	r3, [sp, #12]
 8012e1a:	490d      	ldr	r1, [pc, #52]	@ (8012e50 <handle_login+0x70>)
 8012e1c:	9102      	str	r1, [sp, #8]
 8012e1e:	9201      	str	r2, [sp, #4]
 8012e20:	9300      	str	r3, [sp, #0]
 8012e22:	4b0c      	ldr	r3, [pc, #48]	@ (8012e54 <handle_login+0x74>)
 8012e24:	aa06      	add	r2, sp, #24
 8012e26:	21c8      	movs	r1, #200	@ 0xc8
 8012e28:	4620      	mov	r0, r4
 8012e2a:	f010 fd6b 	bl	8023904 <mg_http_reply>
}
 8012e2e:	b047      	add	sp, #284	@ 0x11c
 8012e30:	bd30      	pop	{r4, r5, pc}
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 8012e32:	4b09      	ldr	r3, [pc, #36]	@ (8012e58 <handle_login+0x78>)
 8012e34:	e7de      	b.n	8012df4 <handle_login+0x14>
  mg_snprintf(cookie, sizeof(cookie),
 8012e36:	4a09      	ldr	r2, [pc, #36]	@ (8012e5c <handle_login+0x7c>)
 8012e38:	e7e0      	b.n	8012dfc <handle_login+0x1c>
 8012e3a:	bf00      	nop
 8012e3c:	08036114 	.word	0x08036114
 8012e40:	08036138 	.word	0x08036138
 8012e44:	0002a300 	.word	0x0002a300
 8012e48:	08036144 	.word	0x08036144
 8012e4c:	08022195 	.word	0x08022195
 8012e50:	08036ef0 	.word	0x08036ef0
 8012e54:	08036188 	.word	0x08036188
 8012e58:	08036128 	.word	0x08036128
 8012e5c:	08036364 	.word	0x08036364

08012e60 <auth>:
static bool auth(struct mg_connection *c, struct mg_http_message *hm, bool set_cookie){
 8012e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e64:	b0e5      	sub	sp, #404	@ 0x194
 8012e66:	4605      	mov	r5, r0
 8012e68:	460c      	mov	r4, r1
 8012e6a:	4616      	mov	r6, r2
	char pass_digest[sha1_str_len] = {0};
 8012e6c:	2100      	movs	r1, #0
 8012e6e:	9159      	str	r1, [sp, #356]	@ 0x164
 8012e70:	2225      	movs	r2, #37	@ 0x25
 8012e72:	a85a      	add	r0, sp, #360	@ 0x168
 8012e74:	f019 fa04 	bl	802c280 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 8012e78:	2280      	movs	r2, #128	@ 0x80
 8012e7a:	9200      	str	r2, [sp, #0]
 8012e7c:	ab02      	add	r3, sp, #8
 8012e7e:	a922      	add	r1, sp, #136	@ 0x88
 8012e80:	4620      	mov	r0, r4
 8012e82:	f011 fdf1 	bl	8024a68 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 8012e86:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 8012e8a:	b113      	cbz	r3, 8012e92 <auth+0x32>
 8012e8c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012e90:	b94a      	cbnz	r2, 8012ea6 <auth+0x46>
	} else if (username[0] == '\0' && pass[0] != '\0') {
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	f040 80ad 	bne.w	8012ff2 <auth+0x192>
 8012e98:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	f040 80a4 	bne.w	8012fea <auth+0x18a>
	return false;
 8012ea2:	2000      	movs	r0, #0
 8012ea4:	e0a6      	b.n	8012ff4 <auth+0x194>
		mg_sha1_init(&sha1_ctx);
 8012ea6:	a842      	add	r0, sp, #264	@ 0x108
 8012ea8:	f010 fe04 	bl	8023ab4 <mg_sha1_init>
		mg_sha1_update(&sha1_ctx, (const unsigned char *)pass, strlen(pass) * sizeof(char));
 8012eac:	a802      	add	r0, sp, #8
 8012eae:	f7fd f9f7 	bl	80102a0 <strlen>
 8012eb2:	4602      	mov	r2, r0
 8012eb4:	a902      	add	r1, sp, #8
 8012eb6:	a842      	add	r0, sp, #264	@ 0x108
 8012eb8:	f010 fe16 	bl	8023ae8 <mg_sha1_update>
		mg_sha1_final((unsigned char *)&pass_digest, &sha1_ctx); // calculate sha1 pass
 8012ebc:	a942      	add	r1, sp, #264	@ 0x108
 8012ebe:	a859      	add	r0, sp, #356	@ 0x164
 8012ec0:	f010 fe4c 	bl	8023b5c <mg_sha1_final>
		for (i=0; i< user_list_size; i++ ){
 8012ec4:	2400      	movs	r4, #0
 8012ec6:	e026      	b.n	8012f16 <auth+0xb6>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 8012ec8:	4649      	mov	r1, r9
 8012eca:	4628      	mov	r0, r5
 8012ecc:	f7ff ff88 	bl	8012de0 <handle_login>
 8012ed0:	e062      	b.n	8012f98 <auth+0x138>
					strncpy(web_tokens[1].user, username, sizeof(web_tokens[1].user));
 8012ed2:	4f4a      	ldr	r7, [pc, #296]	@ (8012ffc <auth+0x19c>)
 8012ed4:	2280      	movs	r2, #128	@ 0x80
 8012ed6:	a922      	add	r1, sp, #136	@ 0x88
 8012ed8:	4638      	mov	r0, r7
 8012eda:	f019 fa18 	bl	802c30e <strncpy>
					web_tokens[1].expare = mg_now() + token_life_time;
 8012ede:	f016 fa1f 	bl	8029320 <mg_now>
 8012ee2:	4b47      	ldr	r3, [pc, #284]	@ (8013000 <auth+0x1a0>)
 8012ee4:	18c3      	adds	r3, r0, r3
 8012ee6:	f141 0100 	adc.w	r1, r1, #0
 8012eea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012eee:	f8c7 10b4 	str.w	r1, [r7, #180]	@ 0xb4
					mg_random_str(web_tokens[1].token, sha1_str_len -1);
 8012ef2:	2128      	movs	r1, #40	@ 0x28
 8012ef4:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8012ef8:	f012 f9fc 	bl	80252f4 <mg_random_str>
					if (set_cookie)handle_login(c, &web_tokens[i]);
 8012efc:	b90e      	cbnz	r6, 8012f02 <auth+0xa2>
					return true;
 8012efe:	2001      	movs	r0, #1
 8012f00:	e078      	b.n	8012ff4 <auth+0x194>
					if (set_cookie)handle_login(c, &web_tokens[i]);
 8012f02:	21b8      	movs	r1, #184	@ 0xb8
 8012f04:	f1a7 03b8 	sub.w	r3, r7, #184	@ 0xb8
 8012f08:	fb01 3104 	mla	r1, r1, r4, r3
 8012f0c:	4628      	mov	r0, r5
 8012f0e:	f7ff ff67 	bl	8012de0 <handle_login>
 8012f12:	e7f4      	b.n	8012efe <auth+0x9e>
		for (i=0; i< user_list_size; i++ ){
 8012f14:	3401      	adds	r4, #1
 8012f16:	2c09      	cmp	r4, #9
 8012f18:	dc40      	bgt.n	8012f9c <auth+0x13c>
			if((strcmp(web_users[i].user, username) == 0) && (strcmp(web_users[i].pass_digest, pass_digest) == 0)){
 8012f1a:	a922      	add	r1, sp, #136	@ 0x88
 8012f1c:	20a9      	movs	r0, #169	@ 0xa9
 8012f1e:	4b39      	ldr	r3, [pc, #228]	@ (8013004 <auth+0x1a4>)
 8012f20:	fb00 3004 	mla	r0, r0, r4, r3
 8012f24:	f7fd f95c 	bl	80101e0 <strcmp>
 8012f28:	2800      	cmp	r0, #0
 8012f2a:	d1f3      	bne.n	8012f14 <auth+0xb4>
 8012f2c:	23a9      	movs	r3, #169	@ 0xa9
 8012f2e:	fb04 f303 	mul.w	r3, r4, r3
 8012f32:	3380      	adds	r3, #128	@ 0x80
 8012f34:	a959      	add	r1, sp, #356	@ 0x164
 8012f36:	4833      	ldr	r0, [pc, #204]	@ (8013004 <auth+0x1a4>)
 8012f38:	4418      	add	r0, r3
 8012f3a:	f7fd f951 	bl	80101e0 <strcmp>
 8012f3e:	2800      	cmp	r0, #0
 8012f40:	d1e8      	bne.n	8012f14 <auth+0xb4>
					if(web_tokens[i].expare < mg_now()){
 8012f42:	4b31      	ldr	r3, [pc, #196]	@ (8013008 <auth+0x1a8>)
 8012f44:	22b8      	movs	r2, #184	@ 0xb8
 8012f46:	fb02 3304 	mla	r3, r2, r4, r3
 8012f4a:	f8d3 80b0 	ldr.w	r8, [r3, #176]	@ 0xb0
 8012f4e:	f8d3 70b4 	ldr.w	r7, [r3, #180]	@ 0xb4
 8012f52:	f016 f9e5 	bl	8029320 <mg_now>
 8012f56:	4580      	cmp	r8, r0
 8012f58:	418f      	sbcs	r7, r1
 8012f5a:	d2ba      	bcs.n	8012ed2 <auth+0x72>
						strncpy(web_tokens[i].user, username, sizeof(web_tokens[i].user));
 8012f5c:	27b8      	movs	r7, #184	@ 0xb8
 8012f5e:	fb04 f707 	mul.w	r7, r4, r7
 8012f62:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8013008 <auth+0x1a8>
 8012f66:	eb07 0908 	add.w	r9, r7, r8
 8012f6a:	2280      	movs	r2, #128	@ 0x80
 8012f6c:	a922      	add	r1, sp, #136	@ 0x88
 8012f6e:	4648      	mov	r0, r9
 8012f70:	f019 f9cd 	bl	802c30e <strncpy>
						web_tokens[i].expare = mg_now() + token_life_time;
 8012f74:	f016 f9d4 	bl	8029320 <mg_now>
 8012f78:	4b21      	ldr	r3, [pc, #132]	@ (8013000 <auth+0x1a0>)
 8012f7a:	18c0      	adds	r0, r0, r3
 8012f7c:	f141 0100 	adc.w	r1, r1, #0
 8012f80:	f8c9 00b0 	str.w	r0, [r9, #176]	@ 0xb0
 8012f84:	f8c9 10b4 	str.w	r1, [r9, #180]	@ 0xb4
						mg_random_str(web_tokens[i].token, sha1_str_len -1);
 8012f88:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8012f8c:	2128      	movs	r1, #40	@ 0x28
 8012f8e:	4440      	add	r0, r8
 8012f90:	f012 f9b0 	bl	80252f4 <mg_random_str>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 8012f94:	2e00      	cmp	r6, #0
 8012f96:	d197      	bne.n	8012ec8 <auth+0x68>
						return true;
 8012f98:	2001      	movs	r0, #1
 8012f9a:	e02b      	b.n	8012ff4 <auth+0x194>
	return false;
 8012f9c:	2000      	movs	r0, #0
 8012f9e:	e029      	b.n	8012ff4 <auth+0x194>
				        		"{\"status\":\"success\",\"message\":\"Token is valid\", \"user\": \"%s\"}\r\n", web_tokens[i].user);
 8012fa0:	22b8      	movs	r2, #184	@ 0xb8
 8012fa2:	4b19      	ldr	r3, [pc, #100]	@ (8013008 <auth+0x1a8>)
 8012fa4:	fb02 3304 	mla	r3, r2, r4, r3
				if (set_cookie) mg_http_reply(c, 200, headers,
 8012fa8:	9300      	str	r3, [sp, #0]
 8012faa:	4b18      	ldr	r3, [pc, #96]	@ (801300c <auth+0x1ac>)
 8012fac:	4a18      	ldr	r2, [pc, #96]	@ (8013010 <auth+0x1b0>)
 8012fae:	21c8      	movs	r1, #200	@ 0xc8
 8012fb0:	4628      	mov	r0, r5
 8012fb2:	f010 fca7 	bl	8023904 <mg_http_reply>
 8012fb6:	e016      	b.n	8012fe6 <auth+0x186>
		for (i=0;i<user_list_size; i++){
 8012fb8:	3401      	adds	r4, #1
 8012fba:	2c09      	cmp	r4, #9
 8012fbc:	dc17      	bgt.n	8012fee <auth+0x18e>
			if((strcmp(web_tokens[i].token, pass) == 0 && web_tokens[i].user[0] != 0)){// && (web_tokens[i].expare > mg_now())
 8012fbe:	23b8      	movs	r3, #184	@ 0xb8
 8012fc0:	fb04 f303 	mul.w	r3, r4, r3
 8012fc4:	3380      	adds	r3, #128	@ 0x80
 8012fc6:	a902      	add	r1, sp, #8
 8012fc8:	480f      	ldr	r0, [pc, #60]	@ (8013008 <auth+0x1a8>)
 8012fca:	4418      	add	r0, r3
 8012fcc:	f7fd f908 	bl	80101e0 <strcmp>
 8012fd0:	2800      	cmp	r0, #0
 8012fd2:	d1f1      	bne.n	8012fb8 <auth+0x158>
 8012fd4:	23b8      	movs	r3, #184	@ 0xb8
 8012fd6:	fb04 f303 	mul.w	r3, r4, r3
 8012fda:	4a0b      	ldr	r2, [pc, #44]	@ (8013008 <auth+0x1a8>)
 8012fdc:	5cd3      	ldrb	r3, [r2, r3]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d0ea      	beq.n	8012fb8 <auth+0x158>
				if (set_cookie) mg_http_reply(c, 200, headers,
 8012fe2:	2e00      	cmp	r6, #0
 8012fe4:	d1dc      	bne.n	8012fa0 <auth+0x140>
				return true;
 8012fe6:	2001      	movs	r0, #1
 8012fe8:	e004      	b.n	8012ff4 <auth+0x194>
		for (i=0;i<user_list_size; i++){
 8012fea:	2400      	movs	r4, #0
 8012fec:	e7e5      	b.n	8012fba <auth+0x15a>
	return false;
 8012fee:	2000      	movs	r0, #0
 8012ff0:	e000      	b.n	8012ff4 <auth+0x194>
 8012ff2:	2000      	movs	r0, #0
}
 8012ff4:	b065      	add	sp, #404	@ 0x194
 8012ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ffa:	bf00      	nop
 8012ffc:	20001b28 	.word	0x20001b28
 8013000:	0a4cb800 	.word	0x0a4cb800
 8013004:	200021a0 	.word	0x200021a0
 8013008:	20001a70 	.word	0x20001a70
 801300c:	08036190 	.word	0x08036190
 8013010:	08035e60 	.word	0x08035e60

08013014 <handler_authanticate>:
static void handler_authanticate(struct mg_connection *c,struct mg_http_message *hm){
 8013014:	b510      	push	{r4, lr}
 8013016:	4604      	mov	r4, r0
	if ( auth(c, hm, 1) ){
 8013018:	2201      	movs	r2, #1
 801301a:	f7ff ff21 	bl	8012e60 <auth>
 801301e:	b100      	cbz	r0, 8013022 <handler_authanticate+0xe>
}
 8013020:	bd10      	pop	{r4, pc}
        mg_http_reply(c, 403, headers, //TODO delete for release,
 8013022:	4b04      	ldr	r3, [pc, #16]	@ (8013034 <handler_authanticate+0x20>)
 8013024:	4a04      	ldr	r2, [pc, #16]	@ (8013038 <handler_authanticate+0x24>)
 8013026:	f240 1193 	movw	r1, #403	@ 0x193
 801302a:	4620      	mov	r0, r4
 801302c:	f010 fc6a 	bl	8023904 <mg_http_reply>
}
 8013030:	e7f6      	b.n	8013020 <handler_authanticate+0xc>
 8013032:	bf00      	nop
 8013034:	080361d0 	.word	0x080361d0
 8013038:	08035e60 	.word	0x08035e60

0801303c <handle_ram_status_get>:
static void handle_ram_status_get(struct mg_connection *c){
 801303c:	b510      	push	{r4, lr}
 801303e:	b090      	sub	sp, #64	@ 0x40
 8013040:	4604      	mov	r4, r0
	vPortGetHeapStats(&heap_status);
 8013042:	a809      	add	r0, sp, #36	@ 0x24
 8013044:	f007 fa50 	bl	801a4e8 <vPortGetHeapStats>
	logging(1, "Start execute API RAM status");
 8013048:	490c      	ldr	r1, [pc, #48]	@ (801307c <handle_ram_status_get+0x40>)
 801304a:	2001      	movs	r0, #1
 801304c:	f7fe ff2a 	bl	8011ea4 <logging>
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 8013050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013052:	9306      	str	r3, [sp, #24]
 8013054:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013056:	9305      	str	r3, [sp, #20]
 8013058:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801305a:	9304      	str	r3, [sp, #16]
 801305c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801305e:	9303      	str	r3, [sp, #12]
 8013060:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013062:	9302      	str	r3, [sp, #8]
 8013064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013066:	9301      	str	r3, [sp, #4]
 8013068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801306a:	9300      	str	r3, [sp, #0]
 801306c:	4b04      	ldr	r3, [pc, #16]	@ (8013080 <handle_ram_status_get+0x44>)
 801306e:	4a05      	ldr	r2, [pc, #20]	@ (8013084 <handle_ram_status_get+0x48>)
 8013070:	21c8      	movs	r1, #200	@ 0xc8
 8013072:	4620      	mov	r0, r4
 8013074:	f010 fc46 	bl	8023904 <mg_http_reply>
}
 8013078:	b010      	add	sp, #64	@ 0x40
 801307a:	bd10      	pop	{r4, pc}
 801307c:	08036200 	.word	0x08036200
 8013080:	08036220 	.word	0x08036220
 8013084:	08036324 	.word	0x08036324

08013088 <handle_io_status_get>:
static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 8013088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801308a:	b091      	sub	sp, #68	@ 0x44
 801308c:	4606      	mov	r6, r0
 801308e:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013090:	ad0c      	add	r5, sp, #48	@ 0x30
 8013092:	494b      	ldr	r1, [pc, #300]	@ (80131c0 <handle_io_status_get+0x138>)
 8013094:	4628      	mov	r0, r5
 8013096:	f010 fdbf 	bl	8023c18 <mg_str_s>
 801309a:	2300      	movs	r3, #0
 801309c:	9300      	str	r3, [sp, #0]
 801309e:	e895 000c 	ldmia.w	r5, {r2, r3}
 80130a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80130a6:	f010 ffd9 	bl	802405c <mg_match>
 80130aa:	b328      	cbz	r0, 80130f8 <handle_io_status_get+0x70>
		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 80130ac:	4c45      	ldr	r4, [pc, #276]	@ (80131c4 <handle_io_status_get+0x13c>)
 80130ae:	6823      	ldr	r3, [r4, #0]
 80130b0:	2200      	movs	r2, #0
 80130b2:	2101      	movs	r1, #1
 80130b4:	a80a      	add	r0, sp, #40	@ 0x28
 80130b6:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 80130b8:	6823      	ldr	r3, [r4, #0]
 80130ba:	2200      	movs	r2, #0
 80130bc:	2102      	movs	r1, #2
 80130be:	f10d 002b 	add.w	r0, sp, #43	@ 0x2b
 80130c2:	4798      	blx	r3
						status.inputs[0], status.inputs[1], status.inputs[2],
 80130c4:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80130c8:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 80130cc:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
						status.outputs[0], status.outputs[1], status.outputs[2]
 80130d0:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 80130d4:	f89d 402c 	ldrb.w	r4, [sp, #44]	@ 0x2c
 80130d8:	f89d 502d 	ldrb.w	r5, [sp, #45]	@ 0x2d
		mg_http_reply(c, 200, headers, //TODO delete for release,
 80130dc:	9505      	str	r5, [sp, #20]
 80130de:	9404      	str	r4, [sp, #16]
 80130e0:	9003      	str	r0, [sp, #12]
 80130e2:	9102      	str	r1, [sp, #8]
 80130e4:	9201      	str	r2, [sp, #4]
 80130e6:	9300      	str	r3, [sp, #0]
 80130e8:	4b37      	ldr	r3, [pc, #220]	@ (80131c8 <handle_io_status_get+0x140>)
 80130ea:	4a38      	ldr	r2, [pc, #224]	@ (80131cc <handle_io_status_get+0x144>)
 80130ec:	21c8      	movs	r1, #200	@ 0xc8
 80130ee:	4630      	mov	r0, r6
 80130f0:	f010 fc08 	bl	8023904 <mg_http_reply>
}
 80130f4:	b011      	add	sp, #68	@ 0x44
 80130f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 80130f8:	ad0e      	add	r5, sp, #56	@ 0x38
 80130fa:	4935      	ldr	r1, [pc, #212]	@ (80131d0 <handle_io_status_get+0x148>)
 80130fc:	4628      	mov	r0, r5
 80130fe:	f010 fd8b 	bl	8023c18 <mg_str_s>
 8013102:	2300      	movs	r3, #0
 8013104:	9300      	str	r3, [sp, #0]
 8013106:	e895 000c 	ldmia.w	r5, {r2, r3}
 801310a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801310e:	f010 ffa5 	bl	802405c <mg_match>
 8013112:	2800      	cmp	r0, #0
 8013114:	d04b      	beq.n	80131ae <handle_io_status_get+0x126>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8013116:	ab08      	add	r3, sp, #32
 8013118:	4a2e      	ldr	r2, [pc, #184]	@ (80131d4 <handle_io_status_get+0x14c>)
 801311a:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 801311e:	c903      	ldmia	r1, {r0, r1}
 8013120:	f00f fcb4 	bl	8022a8c <mg_json_get_num>
 8013124:	2800      	cmp	r0, #0
 8013126:	d03a      	beq.n	801319e <handle_io_status_get+0x116>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 8013128:	ab0a      	add	r3, sp, #40	@ 0x28
 801312a:	4a2b      	ldr	r2, [pc, #172]	@ (80131d8 <handle_io_status_get+0x150>)
 801312c:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013130:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013134:	f00f fcaa 	bl	8022a8c <mg_json_get_num>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8013138:	2800      	cmp	r0, #0
 801313a:	d030      	beq.n	801319e <handle_io_status_get+0x116>
			relay_id = (uint8_t) tmp1;
 801313c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013140:	f7fd fd4a 	bl	8010bd8 <__aeabi_d2uiz>
 8013144:	b2c4      	uxtb	r4, r0
			state = (uint8_t) tmp2;
 8013146:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801314a:	f7fd fd45 	bl	8010bd8 <__aeabi_d2uiz>
 801314e:	b2c5      	uxtb	r5, r0
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8013150:	1e63      	subs	r3, r4, #1
 8013152:	b2db      	uxtb	r3, r3
 8013154:	2b02      	cmp	r3, #2
 8013156:	d801      	bhi.n	801315c <handle_io_status_get+0xd4>
 8013158:	2d01      	cmp	r5, #1
 801315a:	d907      	bls.n	801316c <handle_io_status_get+0xe4>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 801315c:	4b1f      	ldr	r3, [pc, #124]	@ (80131dc <handle_io_status_get+0x154>)
 801315e:	4a1b      	ldr	r2, [pc, #108]	@ (80131cc <handle_io_status_get+0x144>)
 8013160:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013164:	4630      	mov	r0, r6
 8013166:	f010 fbcd 	bl	8023904 <mg_http_reply>
 801316a:	e7c3      	b.n	80130f4 <handle_io_status_get+0x6c>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 801316c:	4f15      	ldr	r7, [pc, #84]	@ (80131c4 <handle_io_status_get+0x13c>)
 801316e:	683b      	ldr	r3, [r7, #0]
 8013170:	2200      	movs	r2, #0
 8013172:	2102      	movs	r1, #2
 8013174:	a807      	add	r0, sp, #28
 8013176:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 8013178:	f104 033f 	add.w	r3, r4, #63	@ 0x3f
 801317c:	446b      	add	r3, sp
 801317e:	f803 5c24 	strb.w	r5, [r3, #-36]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	2201      	movs	r2, #1
 8013186:	2102      	movs	r1, #2
 8013188:	a807      	add	r0, sp, #28
 801318a:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 801318c:	9501      	str	r5, [sp, #4]
 801318e:	9400      	str	r4, [sp, #0]
 8013190:	4b13      	ldr	r3, [pc, #76]	@ (80131e0 <handle_io_status_get+0x158>)
 8013192:	4a0e      	ldr	r2, [pc, #56]	@ (80131cc <handle_io_status_get+0x144>)
 8013194:	21c8      	movs	r1, #200	@ 0xc8
 8013196:	4630      	mov	r0, r6
 8013198:	f010 fbb4 	bl	8023904 <mg_http_reply>
 801319c:	e7aa      	b.n	80130f4 <handle_io_status_get+0x6c>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 801319e:	4b11      	ldr	r3, [pc, #68]	@ (80131e4 <handle_io_status_get+0x15c>)
 80131a0:	4a0a      	ldr	r2, [pc, #40]	@ (80131cc <handle_io_status_get+0x144>)
 80131a2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80131a6:	4630      	mov	r0, r6
 80131a8:	f010 fbac 	bl	8023904 <mg_http_reply>
 80131ac:	e7a2      	b.n	80130f4 <handle_io_status_get+0x6c>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80131ae:	4b0e      	ldr	r3, [pc, #56]	@ (80131e8 <handle_io_status_get+0x160>)
 80131b0:	4a06      	ldr	r2, [pc, #24]	@ (80131cc <handle_io_status_get+0x144>)
 80131b2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80131b6:	4630      	mov	r0, r6
 80131b8:	f010 fba4 	bl	8023904 <mg_http_reply>
}
 80131bc:	e79a      	b.n	80130f4 <handle_io_status_get+0x6c>
 80131be:	bf00      	nop
 80131c0:	08036368 	.word	0x08036368
 80131c4:	2000283c 	.word	0x2000283c
 80131c8:	0803636c 	.word	0x0803636c
 80131cc:	08035e60 	.word	0x08035e60
 80131d0:	08035e1c 	.word	0x08035e1c
 80131d4:	080363a0 	.word	0x080363a0
 80131d8:	080363ac 	.word	0x080363ac
 80131dc:	080363ec 	.word	0x080363ec
 80131e0:	080363b4 	.word	0x080363b4
 80131e4:	08036428 	.word	0x08036428
 80131e8:	08036464 	.word	0x08036464

080131ec <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 80131ec:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80131ee:	fb01 f400 	mul.w	r4, r1, r0
 80131f2:	4620      	mov	r0, r4
 80131f4:	f007 f8b8 	bl	801a368 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80131f8:	4605      	mov	r5, r0
 80131fa:	b118      	cbz	r0, 8013204 <mg_calloc+0x18>
 80131fc:	4622      	mov	r2, r4
 80131fe:	2100      	movs	r1, #0
 8013200:	f019 f83e 	bl	802c280 <memset>
}
 8013204:	4628      	mov	r0, r5
 8013206:	bd38      	pop	{r3, r4, r5, pc}

08013208 <handle_mqtt_conf>:
static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 8013208:	b5f0      	push	{r4, r5, r6, r7, lr}
 801320a:	b08b      	sub	sp, #44	@ 0x2c
 801320c:	4606      	mov	r6, r0
 801320e:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013210:	ad06      	add	r5, sp, #24
 8013212:	4984      	ldr	r1, [pc, #528]	@ (8013424 <handle_mqtt_conf+0x21c>)
 8013214:	4628      	mov	r0, r5
 8013216:	f010 fcff 	bl	8023c18 <mg_str_s>
 801321a:	2300      	movs	r3, #0
 801321c:	9300      	str	r3, [sp, #0]
 801321e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013222:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013226:	f010 ff19 	bl	802405c <mg_match>
 801322a:	2800      	cmp	r0, #0
 801322c:	d03b      	beq.n	80132a6 <handle_mqtt_conf+0x9e>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 801322e:	21c6      	movs	r1, #198	@ 0xc6
 8013230:	2001      	movs	r0, #1
 8013232:	f7ff ffdb 	bl	80131ec <mg_calloc>
		if (mqtt_config == NULL) {
 8013236:	4605      	mov	r5, r0
 8013238:	b340      	cbz	r0, 801328c <handle_mqtt_conf+0x84>
		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 801323a:	4b7b      	ldr	r3, [pc, #492]	@ (8013428 <handle_mqtt_conf+0x220>)
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	2200      	movs	r2, #0
 8013240:	4611      	mov	r1, r2
 8013242:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 8013244:	f105 07a5 	add.w	r7, r5, #165	@ 0xa5
 8013248:	4638      	mov	r0, r7
 801324a:	f7fd f829 	bl	80102a0 <strlen>
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 801324e:	b2c4      	uxtb	r4, r0
 8013250:	4622      	mov	r2, r4
 8013252:	212a      	movs	r1, #42	@ 0x2a
 8013254:	4638      	mov	r0, r7
 8013256:	f019 f813 	bl	802c280 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 801325a:	442c      	add	r4, r5
 801325c:	2300      	movs	r3, #0
 801325e:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8013262:	786b      	ldrb	r3, [r5, #1]
 8013264:	b1eb      	cbz	r3, 80132a2 <handle_mqtt_conf+0x9a>
 8013266:	4b71      	ldr	r3, [pc, #452]	@ (801342c <handle_mqtt_conf+0x224>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 8013268:	1caa      	adds	r2, r5, #2
 801326a:	f105 0184 	add.w	r1, r5, #132	@ 0x84
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 801326e:	9703      	str	r7, [sp, #12]
 8013270:	9102      	str	r1, [sp, #8]
 8013272:	9201      	str	r2, [sp, #4]
 8013274:	9300      	str	r3, [sp, #0]
 8013276:	4b6e      	ldr	r3, [pc, #440]	@ (8013430 <handle_mqtt_conf+0x228>)
 8013278:	4a6e      	ldr	r2, [pc, #440]	@ (8013434 <handle_mqtt_conf+0x22c>)
 801327a:	21c8      	movs	r1, #200	@ 0xc8
 801327c:	4630      	mov	r0, r6
 801327e:	f010 fb41 	bl	8023904 <mg_http_reply>
		free(mqtt_config);
 8013282:	4628      	mov	r0, r5
 8013284:	f007 f8f2 	bl	801a46c <vPortFree>
}
 8013288:	b00b      	add	sp, #44	@ 0x2c
 801328a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 801328c:	4b6a      	ldr	r3, [pc, #424]	@ (8013438 <handle_mqtt_conf+0x230>)
 801328e:	4a69      	ldr	r2, [pc, #420]	@ (8013434 <handle_mqtt_conf+0x22c>)
 8013290:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013294:	4630      	mov	r0, r6
 8013296:	f010 fb35 	bl	8023904 <mg_http_reply>
			free(mqtt_config);
 801329a:	4628      	mov	r0, r5
 801329c:	f007 f8e6 	bl	801a46c <vPortFree>
			return;
 80132a0:	e7f2      	b.n	8013288 <handle_mqtt_conf+0x80>
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 80132a2:	4b66      	ldr	r3, [pc, #408]	@ (801343c <handle_mqtt_conf+0x234>)
 80132a4:	e7e0      	b.n	8013268 <handle_mqtt_conf+0x60>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 80132a6:	ad08      	add	r5, sp, #32
 80132a8:	4965      	ldr	r1, [pc, #404]	@ (8013440 <handle_mqtt_conf+0x238>)
 80132aa:	4628      	mov	r0, r5
 80132ac:	f010 fcb4 	bl	8023c18 <mg_str_s>
 80132b0:	2300      	movs	r3, #0
 80132b2:	9300      	str	r3, [sp, #0]
 80132b4:	e895 000c 	ldmia.w	r5, {r2, r3}
 80132b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80132bc:	f010 fece 	bl	802405c <mg_match>
 80132c0:	2800      	cmp	r0, #0
 80132c2:	f000 80a7 	beq.w	8013414 <handle_mqtt_conf+0x20c>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 80132c6:	21c6      	movs	r1, #198	@ 0xc6
 80132c8:	2001      	movs	r0, #1
 80132ca:	f7ff ff8f 	bl	80131ec <mg_calloc>
		if (mqtt_config == NULL) {
 80132ce:	4605      	mov	r5, r0
 80132d0:	b310      	cbz	r0, 8013318 <handle_mqtt_conf+0x110>
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 80132d2:	ab05      	add	r3, sp, #20
 80132d4:	4a5b      	ldr	r2, [pc, #364]	@ (8013444 <handle_mqtt_conf+0x23c>)
 80132d6:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 80132da:	c903      	ldmia	r1, {r0, r1}
 80132dc:	f00f f96c 	bl	80225b8 <mg_json_get>
 80132e0:	2800      	cmp	r0, #0
 80132e2:	db24      	blt.n	801332e <handle_mqtt_conf+0x126>
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 80132e4:	1c6b      	adds	r3, r5, #1
 80132e6:	4a58      	ldr	r2, [pc, #352]	@ (8013448 <handle_mqtt_conf+0x240>)
 80132e8:	f504 7700 	add.w	r7, r4, #512	@ 0x200
 80132ec:	e897 0003 	ldmia.w	r7, {r0, r1}
 80132f0:	f00f fbf2 	bl	8022ad8 <mg_json_get_bool>
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 80132f4:	4a55      	ldr	r2, [pc, #340]	@ (801344c <handle_mqtt_conf+0x244>)
 80132f6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80132fa:	f011 fd7d 	bl	8024df8 <mg_json_get_str>
 80132fe:	4607      	mov	r7, r0
 8013300:	b328      	cbz	r0, 801334e <handle_mqtt_conf+0x146>
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 8013302:	f016 fa29 	bl	8029758 <is_valid_mqtt_url>
 8013306:	4603      	mov	r3, r0
 8013308:	b1e0      	cbz	r0, 8013344 <handle_mqtt_conf+0x13c>
					switch (err) {
 801330a:	3304      	adds	r3, #4
 801330c:	2b03      	cmp	r3, #3
 801330e:	d879      	bhi.n	8013404 <handle_mqtt_conf+0x1fc>
 8013310:	e8df f003 	tbb	[pc, r3]
 8013314:	52606870 	.word	0x52606870
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8013318:	4b47      	ldr	r3, [pc, #284]	@ (8013438 <handle_mqtt_conf+0x230>)
 801331a:	4a46      	ldr	r2, [pc, #280]	@ (8013434 <handle_mqtt_conf+0x22c>)
 801331c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013320:	4630      	mov	r0, r6
 8013322:	f010 faef 	bl	8023904 <mg_http_reply>
			free(mqtt_config);
 8013326:	4628      	mov	r0, r5
 8013328:	f007 f8a0 	bl	801a46c <vPortFree>
			return;
 801332c:	e7ac      	b.n	8013288 <handle_mqtt_conf+0x80>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 801332e:	4b48      	ldr	r3, [pc, #288]	@ (8013450 <handle_mqtt_conf+0x248>)
 8013330:	4a40      	ldr	r2, [pc, #256]	@ (8013434 <handle_mqtt_conf+0x22c>)
 8013332:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013336:	4630      	mov	r0, r6
 8013338:	f010 fae4 	bl	8023904 <mg_http_reply>
		free(mqtt_config);
 801333c:	4628      	mov	r0, r5
 801333e:	f007 f895 	bl	801a46c <vPortFree>
 8013342:	e7a1      	b.n	8013288 <handle_mqtt_conf+0x80>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 8013344:	227f      	movs	r2, #127	@ 0x7f
 8013346:	4639      	mov	r1, r7
 8013348:	1ca8      	adds	r0, r5, #2
 801334a:	f018 ffe0 	bl	802c30e <strncpy>
			free(broker);
 801334e:	4638      	mov	r0, r7
 8013350:	f007 f88c 	bl	801a46c <vPortFree>
			if((username = mg_json_get_str(hm->body, "$.username"))){
 8013354:	4a3f      	ldr	r2, [pc, #252]	@ (8013454 <handle_mqtt_conf+0x24c>)
 8013356:	f504 7300 	add.w	r3, r4, #512	@ 0x200
 801335a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801335e:	f011 fd4b 	bl	8024df8 <mg_json_get_str>
 8013362:	4607      	mov	r7, r0
 8013364:	b128      	cbz	r0, 8013372 <handle_mqtt_conf+0x16a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 8013366:	2220      	movs	r2, #32
 8013368:	4601      	mov	r1, r0
 801336a:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 801336e:	f018 ffce 	bl	802c30e <strncpy>
			free(username);
 8013372:	4638      	mov	r0, r7
 8013374:	f007 f87a 	bl	801a46c <vPortFree>
			if((password = mg_json_get_str(hm->body, "$.password"))){
 8013378:	4a37      	ldr	r2, [pc, #220]	@ (8013458 <handle_mqtt_conf+0x250>)
 801337a:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 801337e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013382:	f011 fd39 	bl	8024df8 <mg_json_get_str>
 8013386:	4604      	mov	r4, r0
 8013388:	b128      	cbz	r0, 8013396 <handle_mqtt_conf+0x18e>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 801338a:	2220      	movs	r2, #32
 801338c:	4601      	mov	r1, r0
 801338e:	f105 00a5 	add.w	r0, r5, #165	@ 0xa5
 8013392:	f018 ffbc 	bl	802c30e <strncpy>
			free(password);
 8013396:	4620      	mov	r0, r4
 8013398:	f007 f868 	bl	801a46c <vPortFree>
			mqtt_config->save = 1;
 801339c:	2201      	movs	r2, #1
 801339e:	702a      	strb	r2, [r5, #0]
			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 80133a0:	4b21      	ldr	r3, [pc, #132]	@ (8013428 <handle_mqtt_conf+0x220>)
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	2100      	movs	r1, #0
 80133a6:	4628      	mov	r0, r5
 80133a8:	4798      	blx	r3
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80133aa:	4b2c      	ldr	r3, [pc, #176]	@ (801345c <handle_mqtt_conf+0x254>)
 80133ac:	4a21      	ldr	r2, [pc, #132]	@ (8013434 <handle_mqtt_conf+0x22c>)
 80133ae:	21c8      	movs	r1, #200	@ 0xc8
 80133b0:	4630      	mov	r0, r6
 80133b2:	f010 faa7 	bl	8023904 <mg_http_reply>
 80133b6:	e7c1      	b.n	801333c <handle_mqtt_conf+0x134>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80133b8:	4b29      	ldr	r3, [pc, #164]	@ (8013460 <handle_mqtt_conf+0x258>)
 80133ba:	4a1e      	ldr	r2, [pc, #120]	@ (8013434 <handle_mqtt_conf+0x22c>)
 80133bc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80133c0:	4630      	mov	r0, r6
 80133c2:	f010 fa9f 	bl	8023904 <mg_http_reply>
					free(broker);
 80133c6:	4638      	mov	r0, r7
 80133c8:	f007 f850 	bl	801a46c <vPortFree>
					free(mqtt_config);
 80133cc:	4628      	mov	r0, r5
 80133ce:	f007 f84d 	bl	801a46c <vPortFree>
					return;
 80133d2:	e759      	b.n	8013288 <handle_mqtt_conf+0x80>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80133d4:	4b23      	ldr	r3, [pc, #140]	@ (8013464 <handle_mqtt_conf+0x25c>)
 80133d6:	4a17      	ldr	r2, [pc, #92]	@ (8013434 <handle_mqtt_conf+0x22c>)
 80133d8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80133dc:	4630      	mov	r0, r6
 80133de:	f010 fa91 	bl	8023904 <mg_http_reply>
							break;
 80133e2:	e7f0      	b.n	80133c6 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80133e4:	4b20      	ldr	r3, [pc, #128]	@ (8013468 <handle_mqtt_conf+0x260>)
 80133e6:	4a13      	ldr	r2, [pc, #76]	@ (8013434 <handle_mqtt_conf+0x22c>)
 80133e8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80133ec:	4630      	mov	r0, r6
 80133ee:	f010 fa89 	bl	8023904 <mg_http_reply>
							break;
 80133f2:	e7e8      	b.n	80133c6 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80133f4:	4b1d      	ldr	r3, [pc, #116]	@ (801346c <handle_mqtt_conf+0x264>)
 80133f6:	4a0f      	ldr	r2, [pc, #60]	@ (8013434 <handle_mqtt_conf+0x22c>)
 80133f8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80133fc:	4630      	mov	r0, r6
 80133fe:	f010 fa81 	bl	8023904 <mg_http_reply>
							break;
 8013402:	e7e0      	b.n	80133c6 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013404:	4b1a      	ldr	r3, [pc, #104]	@ (8013470 <handle_mqtt_conf+0x268>)
 8013406:	4a0b      	ldr	r2, [pc, #44]	@ (8013434 <handle_mqtt_conf+0x22c>)
 8013408:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801340c:	4630      	mov	r0, r6
 801340e:	f010 fa79 	bl	8023904 <mg_http_reply>
							break;
 8013412:	e7d8      	b.n	80133c6 <handle_mqtt_conf+0x1be>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013414:	4b17      	ldr	r3, [pc, #92]	@ (8013474 <handle_mqtt_conf+0x26c>)
 8013416:	4a07      	ldr	r2, [pc, #28]	@ (8013434 <handle_mqtt_conf+0x22c>)
 8013418:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801341c:	4630      	mov	r0, r6
 801341e:	f010 fa71 	bl	8023904 <mg_http_reply>
 8013422:	e731      	b.n	8013288 <handle_mqtt_conf+0x80>
 8013424:	08036368 	.word	0x08036368
 8013428:	2000283c 	.word	0x2000283c
 801342c:	080364b8 	.word	0x080364b8
 8013430:	08036504 	.word	0x08036504
 8013434:	08035e60 	.word	0x08035e60
 8013438:	080364c8 	.word	0x080364c8
 801343c:	080364c0 	.word	0x080364c0
 8013440:	08035e1c 	.word	0x08035e1c
 8013444:	0803654c 	.word	0x0803654c
 8013448:	08036580 	.word	0x08036580
 801344c:	0803658c 	.word	0x0803658c
 8013450:	08036550 	.word	0x08036550
 8013454:	080366d4 	.word	0x080366d4
 8013458:	080366e0 	.word	0x080366e0
 801345c:	080366ec 	.word	0x080366ec
 8013460:	08036598 	.word	0x08036598
 8013464:	080365dc 	.word	0x080365dc
 8013468:	08036628 	.word	0x08036628
 801346c:	08036668 	.word	0x08036668
 8013470:	080366a0 	.word	0x080366a0
 8013474:	08036464 	.word	0x08036464

08013478 <handle_dev_status>:
static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 8013478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801347c:	b0c7      	sub	sp, #284	@ 0x11c
 801347e:	4681      	mov	r9, r0
 8013480:	468a      	mov	sl, r1
	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 8013482:	2272      	movs	r2, #114	@ 0x72
 8013484:	498e      	ldr	r1, [pc, #568]	@ (80136c0 <handle_dev_status+0x248>)
 8013486:	a827      	add	r0, sp, #156	@ 0x9c
 8013488:	f01a f936 	bl	802d6f8 <memcpy>
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 801348c:	2101      	movs	r1, #1
 801348e:	201e      	movs	r0, #30
 8013490:	f7ff feac 	bl	80131ec <mg_calloc>
 8013494:	4606      	mov	r6, r0
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8013496:	2101      	movs	r1, #1
 8013498:	202e      	movs	r0, #46	@ 0x2e
 801349a:	f7ff fea7 	bl	80131ec <mg_calloc>
 801349e:	4607      	mov	r7, r0
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 80134a0:	2101      	movs	r1, #1
 80134a2:	202e      	movs	r0, #46	@ 0x2e
 80134a4:	f7ff fea2 	bl	80131ec <mg_calloc>
 80134a8:	4680      	mov	r8, r0
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 80134aa:	2101      	movs	r1, #1
 80134ac:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80134b0:	f7ff fe9c 	bl	80131ec <mg_calloc>
 80134b4:	4604      	mov	r4, r0
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 80134b6:	2101      	movs	r1, #1
 80134b8:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80134bc:	f7ff fe96 	bl	80131ec <mg_calloc>
 80134c0:	4605      	mov	r5, r0
	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 80134c2:	2e00      	cmp	r6, #0
 80134c4:	f000 80e3 	beq.w	801368e <handle_dev_status+0x216>
 80134c8:	2f00      	cmp	r7, #0
 80134ca:	f000 80e0 	beq.w	801368e <handle_dev_status+0x216>
 80134ce:	f1b8 0f00 	cmp.w	r8, #0
 80134d2:	f000 80dc 	beq.w	801368e <handle_dev_status+0x216>
 80134d6:	2c00      	cmp	r4, #0
 80134d8:	f000 80d9 	beq.w	801368e <handle_dev_status+0x216>
 80134dc:	2800      	cmp	r0, #0
 80134de:	f000 80d6 	beq.w	801368e <handle_dev_status+0x216>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 80134e2:	f50d 7b88 	add.w	fp, sp, #272	@ 0x110
 80134e6:	4977      	ldr	r1, [pc, #476]	@ (80136c4 <handle_dev_status+0x24c>)
 80134e8:	4658      	mov	r0, fp
 80134ea:	f010 fb95 	bl	8023c18 <mg_str_s>
 80134ee:	2300      	movs	r3, #0
 80134f0:	9300      	str	r3, [sp, #0]
 80134f2:	e89b 000c 	ldmia.w	fp, {r2, r3}
 80134f6:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80134fa:	f010 fdaf 	bl	802405c <mg_match>
 80134fe:	2800      	cmp	r0, #0
 8013500:	f000 80bd 	beq.w	801367e <handle_dev_status+0x206>
			mqtt_connection =  get_mqtt_connection();
 8013504:	f001 fabe 	bl	8014a84 <get_mqtt_connection>
			if(!mqtt_connection){
 8013508:	4682      	mov	sl, r0
 801350a:	b358      	cbz	r0, 8013564 <handle_dev_status+0xec>
				if (mqtt_connection->is_connecting){
 801350c:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8013510:	f013 0f20 	tst.w	r3, #32
 8013514:	d12c      	bne.n	8013570 <handle_dev_status+0xf8>
				}else if(mqtt_connection->is_closing){
 8013516:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 801351a:	f013 0f20 	tst.w	r3, #32
 801351e:	d02d      	beq.n	801357c <handle_dev_status+0x104>
					strncpy(mqtt_status_str, "closing",str_part_len);
 8013520:	221e      	movs	r2, #30
 8013522:	4969      	ldr	r1, [pc, #420]	@ (80136c8 <handle_dev_status+0x250>)
 8013524:	4630      	mov	r0, r6
 8013526:	f018 fef2 	bl	802c30e <strncpy>
				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 801352a:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 80136f0 <handle_dev_status+0x278>
 801352e:	f10a 0308 	add.w	r3, sl, #8
 8013532:	9300      	str	r3, [sp, #0]
 8013534:	465b      	mov	r3, fp
 8013536:	4a65      	ldr	r2, [pc, #404]	@ (80136cc <handle_dev_status+0x254>)
 8013538:	212e      	movs	r1, #46	@ 0x2e
 801353a:	4640      	mov	r0, r8
 801353c:	f00f fce2 	bl	8022f04 <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 8013540:	f10a 031c 	add.w	r3, sl, #28
 8013544:	9300      	str	r3, [sp, #0]
 8013546:	465b      	mov	r3, fp
 8013548:	4a60      	ldr	r2, [pc, #384]	@ (80136cc <handle_dev_status+0x254>)
 801354a:	212e      	movs	r1, #46	@ 0x2e
 801354c:	4638      	mov	r0, r7
 801354e:	f00f fcd9 	bl	8022f04 <mg_snprintf>
			strcat(pub_topics_str, "\"");
 8013552:	4620      	mov	r0, r4
 8013554:	f7fc fea4 	bl	80102a0 <strlen>
 8013558:	4b5d      	ldr	r3, [pc, #372]	@ (80136d0 <handle_dev_status+0x258>)
 801355a:	881b      	ldrh	r3, [r3, #0]
 801355c:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 801355e:	f04f 0a01 	mov.w	sl, #1
 8013562:	e028      	b.n	80135b6 <handle_dev_status+0x13e>
				strncpy(mqtt_status_str, "closed", str_part_len);
 8013564:	221e      	movs	r2, #30
 8013566:	495b      	ldr	r1, [pc, #364]	@ (80136d4 <handle_dev_status+0x25c>)
 8013568:	4630      	mov	r0, r6
 801356a:	f018 fed0 	bl	802c30e <strncpy>
 801356e:	e7f0      	b.n	8013552 <handle_dev_status+0xda>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 8013570:	221e      	movs	r2, #30
 8013572:	4959      	ldr	r1, [pc, #356]	@ (80136d8 <handle_dev_status+0x260>)
 8013574:	4630      	mov	r0, r6
 8013576:	f018 feca 	bl	802c30e <strncpy>
 801357a:	e7d6      	b.n	801352a <handle_dev_status+0xb2>
					strncpy(mqtt_status_str, "established", str_part_len);
 801357c:	221e      	movs	r2, #30
 801357e:	4957      	ldr	r1, [pc, #348]	@ (80136dc <handle_dev_status+0x264>)
 8013580:	4630      	mov	r0, r6
 8013582:	f018 fec4 	bl	802c30e <strncpy>
 8013586:	e7d0      	b.n	801352a <handle_dev_status+0xb2>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 8013588:	fa5f f38a 	uxtb.w	r3, sl
 801358c:	2201      	movs	r2, #1
 801358e:	2180      	movs	r1, #128	@ 0x80
 8013590:	a807      	add	r0, sp, #28
 8013592:	f001 fe67 	bl	8015264 <generate_status_topik>
				strcat(pub_topics_str, topic);
 8013596:	a907      	add	r1, sp, #28
 8013598:	4620      	mov	r0, r4
 801359a:	f018 fe79 	bl	802c290 <strcat>
				strcat(pub_topics_str, "\", \"");
 801359e:	4620      	mov	r0, r4
 80135a0:	f7fc fe7e 	bl	80102a0 <strlen>
 80135a4:	4603      	mov	r3, r0
 80135a6:	1821      	adds	r1, r4, r0
 80135a8:	4a4d      	ldr	r2, [pc, #308]	@ (80136e0 <handle_dev_status+0x268>)
 80135aa:	6810      	ldr	r0, [r2, #0]
 80135ac:	50e0      	str	r0, [r4, r3]
 80135ae:	7913      	ldrb	r3, [r2, #4]
 80135b0:	710b      	strb	r3, [r1, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 80135b2:	f10a 0a01 	add.w	sl, sl, #1
 80135b6:	f1ba 0f03 	cmp.w	sl, #3
 80135ba:	dde5      	ble.n	8013588 <handle_dev_status+0x110>
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 80135bc:	f04f 0a01 	mov.w	sl, #1
 80135c0:	e007      	b.n	80135d2 <handle_dev_status+0x15a>
					strcat(pub_topics_str, "\"");
 80135c2:	4620      	mov	r0, r4
 80135c4:	f7fc fe6c 	bl	80102a0 <strlen>
 80135c8:	4b41      	ldr	r3, [pc, #260]	@ (80136d0 <handle_dev_status+0x258>)
 80135ca:	881b      	ldrh	r3, [r3, #0]
 80135cc:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 80135ce:	f10a 0a01 	add.w	sl, sl, #1
 80135d2:	f1ba 0f03 	cmp.w	sl, #3
 80135d6:	dc18      	bgt.n	801360a <handle_dev_status+0x192>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 80135d8:	fa5f f38a 	uxtb.w	r3, sl
 80135dc:	2202      	movs	r2, #2
 80135de:	2180      	movs	r1, #128	@ 0x80
 80135e0:	a807      	add	r0, sp, #28
 80135e2:	f001 fe3f 	bl	8015264 <generate_status_topik>
				strcat(pub_topics_str, topic);
 80135e6:	a907      	add	r1, sp, #28
 80135e8:	4620      	mov	r0, r4
 80135ea:	f018 fe51 	bl	802c290 <strcat>
				if (i < OUTPUTS_COUNT) {
 80135ee:	f1ba 0f02 	cmp.w	sl, #2
 80135f2:	dce6      	bgt.n	80135c2 <handle_dev_status+0x14a>
					strcat(pub_topics_str, "\", \"");
 80135f4:	4620      	mov	r0, r4
 80135f6:	f7fc fe53 	bl	80102a0 <strlen>
 80135fa:	4603      	mov	r3, r0
 80135fc:	1821      	adds	r1, r4, r0
 80135fe:	4a38      	ldr	r2, [pc, #224]	@ (80136e0 <handle_dev_status+0x268>)
 8013600:	6810      	ldr	r0, [r2, #0]
 8013602:	50e0      	str	r0, [r4, r3]
 8013604:	7913      	ldrb	r3, [r2, #4]
 8013606:	710b      	strb	r3, [r1, #4]
 8013608:	e7e1      	b.n	80135ce <handle_dev_status+0x156>
			strcat(subscr_topics_str, "\"");
 801360a:	4628      	mov	r0, r5
 801360c:	f7fc fe48 	bl	80102a0 <strlen>
 8013610:	4b2f      	ldr	r3, [pc, #188]	@ (80136d0 <handle_dev_status+0x258>)
 8013612:	881b      	ldrh	r3, [r3, #0]
 8013614:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013616:	f04f 0a01 	mov.w	sl, #1
 801361a:	e007      	b.n	801362c <handle_dev_status+0x1b4>
					strcat(subscr_topics_str, "\"");
 801361c:	4628      	mov	r0, r5
 801361e:	f7fc fe3f 	bl	80102a0 <strlen>
 8013622:	4b2b      	ldr	r3, [pc, #172]	@ (80136d0 <handle_dev_status+0x258>)
 8013624:	881b      	ldrh	r3, [r3, #0]
 8013626:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013628:	f10a 0a01 	add.w	sl, sl, #1
 801362c:	f1ba 0f03 	cmp.w	sl, #3
 8013630:	dc18      	bgt.n	8013664 <handle_dev_status+0x1ec>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8013632:	fa5f f38a 	uxtb.w	r3, sl
 8013636:	2202      	movs	r2, #2
 8013638:	2180      	movs	r1, #128	@ 0x80
 801363a:	a807      	add	r0, sp, #28
 801363c:	f001 fdfa 	bl	8015234 <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 8013640:	a907      	add	r1, sp, #28
 8013642:	4628      	mov	r0, r5
 8013644:	f018 fe24 	bl	802c290 <strcat>
				if (i < OUTPUTS_COUNT) {
 8013648:	f1ba 0f02 	cmp.w	sl, #2
 801364c:	dce6      	bgt.n	801361c <handle_dev_status+0x1a4>
					strcat(subscr_topics_str, "\", \"");
 801364e:	4628      	mov	r0, r5
 8013650:	f7fc fe26 	bl	80102a0 <strlen>
 8013654:	4603      	mov	r3, r0
 8013656:	1829      	adds	r1, r5, r0
 8013658:	4a21      	ldr	r2, [pc, #132]	@ (80136e0 <handle_dev_status+0x268>)
 801365a:	6810      	ldr	r0, [r2, #0]
 801365c:	50e8      	str	r0, [r5, r3]
 801365e:	7913      	ldrb	r3, [r2, #4]
 8013660:	710b      	strb	r3, [r1, #4]
 8013662:	e7e1      	b.n	8013628 <handle_dev_status+0x1b0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8013664:	9504      	str	r5, [sp, #16]
 8013666:	9403      	str	r4, [sp, #12]
 8013668:	9702      	str	r7, [sp, #8]
 801366a:	f8cd 8004 	str.w	r8, [sp, #4]
 801366e:	9600      	str	r6, [sp, #0]
 8013670:	ab27      	add	r3, sp, #156	@ 0x9c
 8013672:	4a1c      	ldr	r2, [pc, #112]	@ (80136e4 <handle_dev_status+0x26c>)
 8013674:	21c8      	movs	r1, #200	@ 0xc8
 8013676:	4648      	mov	r0, r9
 8013678:	f010 f944 	bl	8023904 <mg_http_reply>
 801367c:	e00e      	b.n	801369c <handle_dev_status+0x224>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 801367e:	4b1a      	ldr	r3, [pc, #104]	@ (80136e8 <handle_dev_status+0x270>)
 8013680:	4a18      	ldr	r2, [pc, #96]	@ (80136e4 <handle_dev_status+0x26c>)
 8013682:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013686:	4648      	mov	r0, r9
 8013688:	f010 f93c 	bl	8023904 <mg_http_reply>
 801368c:	e006      	b.n	801369c <handle_dev_status+0x224>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 801368e:	4b17      	ldr	r3, [pc, #92]	@ (80136ec <handle_dev_status+0x274>)
 8013690:	4a14      	ldr	r2, [pc, #80]	@ (80136e4 <handle_dev_status+0x26c>)
 8013692:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013696:	4648      	mov	r0, r9
 8013698:	f010 f934 	bl	8023904 <mg_http_reply>
	free(mqtt_status_str);
 801369c:	4630      	mov	r0, r6
 801369e:	f006 fee5 	bl	801a46c <vPortFree>
	free(mqtt_server_addr);
 80136a2:	4638      	mov	r0, r7
 80136a4:	f006 fee2 	bl	801a46c <vPortFree>
	free(mqtt_local_addr);
 80136a8:	4640      	mov	r0, r8
 80136aa:	f006 fedf 	bl	801a46c <vPortFree>
	free(pub_topics_str);
 80136ae:	4620      	mov	r0, r4
 80136b0:	f006 fedc 	bl	801a46c <vPortFree>
	free(subscr_topics_str);
 80136b4:	4628      	mov	r0, r5
 80136b6:	f006 fed9 	bl	801a46c <vPortFree>
}
 80136ba:	b047      	add	sp, #284	@ 0x11c
 80136bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136c0:	08036794 	.word	0x08036794
 80136c4:	08036368 	.word	0x08036368
 80136c8:	08036734 	.word	0x08036734
 80136cc:	08036748 	.word	0x08036748
 80136d0:	0803674c 	.word	0x0803674c
 80136d4:	0803a35c 	.word	0x0803a35c
 80136d8:	08036728 	.word	0x08036728
 80136dc:	0803673c 	.word	0x0803673c
 80136e0:	08036750 	.word	0x08036750
 80136e4:	08035e60 	.word	0x08035e60
 80136e8:	08036464 	.word	0x08036464
 80136ec:	08036758 	.word	0x08036758
 80136f0:	080259b5 	.word	0x080259b5

080136f4 <handle_fs_get_log>:
  }
}

// function for show logging
// function for show logging
static void handle_fs_get_log(struct mg_connection *c, struct mg_http_message *hm, int number){
 80136f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136f6:	b08d      	sub	sp, #52	@ 0x34
 80136f8:	4607      	mov	r7, r0
 80136fa:	460c      	mov	r4, r1
 80136fc:	4615      	mov	r5, r2

	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80136fe:	ae08      	add	r6, sp, #32
 8013700:	4923      	ldr	r1, [pc, #140]	@ (8013790 <handle_fs_get_log+0x9c>)
 8013702:	4630      	mov	r0, r6
 8013704:	f010 fa88 	bl	8023c18 <mg_str_s>
 8013708:	2300      	movs	r3, #0
 801370a:	9300      	str	r3, [sp, #0]
 801370c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013710:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013714:	f010 fca2 	bl	802405c <mg_match>
 8013718:	b318      	cbz	r0, 8013762 <handle_fs_get_log+0x6e>

		struct mg_http_serve_opts opts = {
 801371a:	2300      	movs	r3, #0
 801371c:	9302      	str	r3, [sp, #8]
 801371e:	9303      	str	r3, [sp, #12]
 8013720:	9304      	str	r3, [sp, #16]
 8013722:	9305      	str	r3, [sp, #20]
 8013724:	9306      	str	r3, [sp, #24]
 8013726:	9307      	str	r3, [sp, #28]
 8013728:	4b1a      	ldr	r3, [pc, #104]	@ (8013794 <handle_fs_get_log+0xa0>)
 801372a:	9302      	str	r3, [sp, #8]
 801372c:	4b1a      	ldr	r3, [pc, #104]	@ (8013798 <handle_fs_get_log+0xa4>)
 801372e:	9307      	str	r3, [sp, #28]
			.root_dir = "/log",
			.fs = &mg_fs_lfs
		};

		switch (number) {
 8013730:	b145      	cbz	r5, 8013744 <handle_fs_get_log+0x50>
 8013732:	2d01      	cmp	r5, #1
 8013734:	d00e      	beq.n	8013754 <handle_fs_get_log+0x60>
				break;
			case 1:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
				break;
			default:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8013736:	ab02      	add	r3, sp, #8
 8013738:	4a18      	ldr	r2, [pc, #96]	@ (801379c <handle_fs_get_log+0xa8>)
 801373a:	4621      	mov	r1, r4
 801373c:	4638      	mov	r0, r7
 801373e:	f010 fe49 	bl	80243d4 <mg_http_serve_file>
				break;
 8013742:	e005      	b.n	8013750 <handle_fs_get_log+0x5c>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8013744:	ab02      	add	r3, sp, #8
 8013746:	4a15      	ldr	r2, [pc, #84]	@ (801379c <handle_fs_get_log+0xa8>)
 8013748:	4621      	mov	r1, r4
 801374a:	4638      	mov	r0, r7
 801374c:	f010 fe42 	bl	80243d4 <mg_http_serve_file>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}
}
 8013750:	b00d      	add	sp, #52	@ 0x34
 8013752:	bdf0      	pop	{r4, r5, r6, r7, pc}
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
 8013754:	ab02      	add	r3, sp, #8
 8013756:	4a12      	ldr	r2, [pc, #72]	@ (80137a0 <handle_fs_get_log+0xac>)
 8013758:	4621      	mov	r1, r4
 801375a:	4638      	mov	r0, r7
 801375c:	f010 fe3a 	bl	80243d4 <mg_http_serve_file>
				break;
 8013760:	e7f6      	b.n	8013750 <handle_fs_get_log+0x5c>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013762:	ad0a      	add	r5, sp, #40	@ 0x28
 8013764:	490f      	ldr	r1, [pc, #60]	@ (80137a4 <handle_fs_get_log+0xb0>)
 8013766:	4628      	mov	r0, r5
 8013768:	f010 fa56 	bl	8023c18 <mg_str_s>
 801376c:	2300      	movs	r3, #0
 801376e:	9300      	str	r3, [sp, #0]
 8013770:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013774:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013778:	f010 fc70 	bl	802405c <mg_match>
 801377c:	2800      	cmp	r0, #0
 801377e:	d1e7      	bne.n	8013750 <handle_fs_get_log+0x5c>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013780:	4b09      	ldr	r3, [pc, #36]	@ (80137a8 <handle_fs_get_log+0xb4>)
 8013782:	4a0a      	ldr	r2, [pc, #40]	@ (80137ac <handle_fs_get_log+0xb8>)
 8013784:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013788:	4638      	mov	r0, r7
 801378a:	f010 f8bb 	bl	8023904 <mg_http_reply>
}
 801378e:	e7df      	b.n	8013750 <handle_fs_get_log+0x5c>
 8013790:	08036368 	.word	0x08036368
 8013794:	080358b0 	.word	0x080358b0
 8013798:	200000a0 	.word	0x200000a0
 801379c:	0803597c 	.word	0x0803597c
 80137a0:	0803598c 	.word	0x0803598c
 80137a4:	08035e1c 	.word	0x08035e1c
 80137a8:	08036808 	.word	0x08036808
 80137ac:	08035e60 	.word	0x08035e60

080137b0 <write_users>:
static void write_users(const char *file_path, users_list_t * users, size_t count){
 80137b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137b2:	4604      	mov	r4, r0
 80137b4:	460d      	mov	r5, r1
 80137b6:	4616      	mov	r6, r2
	mg_fs_lfs.rm(file_path);
 80137b8:	4f09      	ldr	r7, [pc, #36]	@ (80137e0 <write_users+0x30>)
 80137ba:	6a3b      	ldr	r3, [r7, #32]
 80137bc:	4798      	blx	r3
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_WRITE);
 80137be:	2202      	movs	r2, #2
 80137c0:	4621      	mov	r1, r4
 80137c2:	4638      	mov	r0, r7
 80137c4:	f00e fe0f 	bl	80223e6 <mg_fs_open>
 80137c8:	4604      	mov	r4, r0
	mg_fs_lfs.wr(fd->fd, users, sizeof(users_list_t) * count);
 80137ca:	697b      	ldr	r3, [r7, #20]
 80137cc:	22a9      	movs	r2, #169	@ 0xa9
 80137ce:	fb06 f202 	mul.w	r2, r6, r2
 80137d2:	4629      	mov	r1, r5
 80137d4:	6800      	ldr	r0, [r0, #0]
 80137d6:	4798      	blx	r3
	mg_fs_close(fd);
 80137d8:	4620      	mov	r0, r4
 80137da:	f00e fe1d 	bl	8022418 <mg_fs_close>
}
 80137de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137e0:	200000a0 	.word	0x200000a0

080137e4 <handle_manage_user>:

static void handle_manage_user(struct mg_connection *c, struct mg_http_message *hm){
 80137e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137e8:	b0ae      	sub	sp, #184	@ 0xb8
 80137ea:	4607      	mov	r7, r0
 80137ec:	460c      	mov	r4, r1

	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80137ee:	ad26      	add	r5, sp, #152	@ 0x98
 80137f0:	49ac      	ldr	r1, [pc, #688]	@ (8013aa4 <handle_manage_user+0x2c0>)
 80137f2:	4628      	mov	r0, r5
 80137f4:	f010 fa10 	bl	8023c18 <mg_str_s>
 80137f8:	2300      	movs	r3, #0
 80137fa:	9300      	str	r3, [sp, #0]
 80137fc:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013800:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013804:	f010 fc2a 	bl	802405c <mg_match>
 8013808:	2800      	cmp	r0, #0
 801380a:	d05e      	beq.n	80138ca <handle_manage_user+0xe6>

		uint32_t response_len = 1024;
		uint32_t user_entry_len = 160;
	    char *response = calloc(response_len, sizeof(char));
 801380c:	2101      	movs	r1, #1
 801380e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8013812:	f7ff fceb 	bl	80131ec <mg_calloc>
 8013816:	4606      	mov	r6, r0
	    char *user_entry = calloc(user_entry_len, sizeof(char));
 8013818:	2101      	movs	r1, #1
 801381a:	20a0      	movs	r0, #160	@ 0xa0
 801381c:	f7ff fce6 	bl	80131ec <mg_calloc>
 8013820:	4680      	mov	r8, r0
	    size_t offset = 0;

	    if (response && user_entry) {
 8013822:	2e00      	cmp	r6, #0
 8013824:	d03d      	beq.n	80138a2 <handle_manage_user+0xbe>
 8013826:	2800      	cmp	r0, #0
 8013828:	d03b      	beq.n	80138a2 <handle_manage_user+0xbe>
	        // Начало JSON-объекта
	        offset += snprintf(response + offset, response_len - offset, "{ \"users\": [");
 801382a:	4b9f      	ldr	r3, [pc, #636]	@ (8013aa8 <handle_manage_user+0x2c4>)
 801382c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801382e:	6030      	str	r0, [r6, #0]
 8013830:	6071      	str	r1, [r6, #4]
 8013832:	60b2      	str	r2, [r6, #8]
 8013834:	781b      	ldrb	r3, [r3, #0]
 8013836:	7333      	strb	r3, [r6, #12]
 8013838:	250c      	movs	r5, #12

	        // Проход по всем пользователям
	        for (int i = 0; i < user_list_size; i++) {
 801383a:	2400      	movs	r4, #0
 801383c:	e008      	b.n	8013850 <handle_manage_user+0x6c>
	                if (offset > 12) { // 12 символов — это длина строки "{ \"users\": ["
	                    offset += snprintf(response + offset, response_len - offset, ",");
	                }

	                // Добавляем объект пользователя в JSON
	                offset += snprintf(response + offset, response_len - offset, "%s", user_entry);
 801383e:	4643      	mov	r3, r8
 8013840:	4a9a      	ldr	r2, [pc, #616]	@ (8013aac <handle_manage_user+0x2c8>)
 8013842:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8013846:	1970      	adds	r0, r6, r5
 8013848:	f017 fff0 	bl	802b82c <snprintf>
 801384c:	4405      	add	r5, r0
	        for (int i = 0; i < user_list_size; i++) {
 801384e:	3401      	adds	r4, #1
 8013850:	2c09      	cmp	r4, #9
 8013852:	dc18      	bgt.n	8013886 <handle_manage_user+0xa2>
	            if (web_users[i].user[0] != '\0') {  // Проверяем, что имя пользователя не пустое
 8013854:	22a9      	movs	r2, #169	@ 0xa9
 8013856:	fb04 f202 	mul.w	r2, r4, r2
 801385a:	4b95      	ldr	r3, [pc, #596]	@ (8013ab0 <handle_manage_user+0x2cc>)
 801385c:	5c9a      	ldrb	r2, [r3, r2]
 801385e:	2a00      	cmp	r2, #0
 8013860:	d0f5      	beq.n	801384e <handle_manage_user+0x6a>
	                snprintf(user_entry, user_entry_len, "{\"user\": \"%s\"}", web_users[i].user);
 8013862:	22a9      	movs	r2, #169	@ 0xa9
 8013864:	fb02 3304 	mla	r3, r2, r4, r3
 8013868:	4a92      	ldr	r2, [pc, #584]	@ (8013ab4 <handle_manage_user+0x2d0>)
 801386a:	21a0      	movs	r1, #160	@ 0xa0
 801386c:	4640      	mov	r0, r8
 801386e:	f017 ffdd 	bl	802b82c <snprintf>
	                if (offset > 12) { // 12 символов — это длина строки "{ \"users\": ["
 8013872:	2d0c      	cmp	r5, #12
 8013874:	d9e3      	bls.n	801383e <handle_manage_user+0x5a>
	                    offset += snprintf(response + offset, response_len - offset, ",");
 8013876:	4a90      	ldr	r2, [pc, #576]	@ (8013ab8 <handle_manage_user+0x2d4>)
 8013878:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 801387c:	1970      	adds	r0, r6, r5
 801387e:	f017 ffd5 	bl	802b82c <snprintf>
 8013882:	4405      	add	r5, r0
 8013884:	e7db      	b.n	801383e <handle_manage_user+0x5a>
	            }
	        }

	        // Завершаем JSON-объект
	        offset += snprintf(response + offset, response_len - offset, "]}");
 8013886:	4a8d      	ldr	r2, [pc, #564]	@ (8013abc <handle_manage_user+0x2d8>)
 8013888:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 801388c:	1970      	adds	r0, r6, r5
 801388e:	f017 ffcd 	bl	802b82c <snprintf>

	        // Отправляем JSON-ответ
	        mg_http_reply(c, 200, headers, "%s", response);
 8013892:	9600      	str	r6, [sp, #0]
 8013894:	4b85      	ldr	r3, [pc, #532]	@ (8013aac <handle_manage_user+0x2c8>)
 8013896:	4a8a      	ldr	r2, [pc, #552]	@ (8013ac0 <handle_manage_user+0x2dc>)
 8013898:	21c8      	movs	r1, #200	@ 0xc8
 801389a:	4638      	mov	r0, r7
 801389c:	f010 f832 	bl	8023904 <mg_http_reply>
 80138a0:	e00a      	b.n	80138b8 <handle_manage_user+0xd4>
	    } else {
	        // Если память не выделена, отправляем ошибку
	    	logging(L_ERR, "Memory allocation failed in handle_manage_user GET");
 80138a2:	4988      	ldr	r1, [pc, #544]	@ (8013ac4 <handle_manage_user+0x2e0>)
 80138a4:	2003      	movs	r0, #3
 80138a6:	f7fe fafd 	bl	8011ea4 <logging>
	        mg_http_reply(c, 500, headers, "{\"error\": \"Memory allocation failed\"}");
 80138aa:	4b87      	ldr	r3, [pc, #540]	@ (8013ac8 <handle_manage_user+0x2e4>)
 80138ac:	4a84      	ldr	r2, [pc, #528]	@ (8013ac0 <handle_manage_user+0x2dc>)
 80138ae:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80138b2:	4638      	mov	r0, r7
 80138b4:	f010 f826 	bl	8023904 <mg_http_reply>
	    }

	    // Освобождаем память
	    free(response);
 80138b8:	4630      	mov	r0, r6
 80138ba:	f006 fdd7 	bl	801a46c <vPortFree>
	    free(user_entry);
 80138be:	4640      	mov	r0, r8
 80138c0:	f006 fdd4 	bl	801a46c <vPortFree>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET POST PUT DELETE methods\"}\r\n");

	}
}
 80138c4:	b02e      	add	sp, #184	@ 0xb8
 80138c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 80138ca:	ad28      	add	r5, sp, #160	@ 0xa0
 80138cc:	497f      	ldr	r1, [pc, #508]	@ (8013acc <handle_manage_user+0x2e8>)
 80138ce:	4628      	mov	r0, r5
 80138d0:	f010 f9a2 	bl	8023c18 <mg_str_s>
 80138d4:	2300      	movs	r3, #0
 80138d6:	9300      	str	r3, [sp, #0]
 80138d8:	e895 000c 	ldmia.w	r5, {r2, r3}
 80138dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80138e0:	f010 fbbc 	bl	802405c <mg_match>
 80138e4:	2800      	cmp	r0, #0
 80138e6:	f000 8096 	beq.w	8013a16 <handle_manage_user+0x232>
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 80138ea:	ab03      	add	r3, sp, #12
 80138ec:	4a78      	ldr	r2, [pc, #480]	@ (8013ad0 <handle_manage_user+0x2ec>)
 80138ee:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 80138f2:	c903      	ldmia	r1, {r0, r1}
 80138f4:	f00e fe60 	bl	80225b8 <mg_json_get>
 80138f8:	2800      	cmp	r0, #0
 80138fa:	db21      	blt.n	8013940 <handle_manage_user+0x15c>
	    username_add = mg_json_get_str(hm->body, "$.user");
 80138fc:	4a75      	ldr	r2, [pc, #468]	@ (8013ad4 <handle_manage_user+0x2f0>)
 80138fe:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013902:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013906:	f011 fa77 	bl	8024df8 <mg_json_get_str>
 801390a:	4605      	mov	r5, r0
	    password_add = mg_json_get_str(hm->body, "$.pass");
 801390c:	4a72      	ldr	r2, [pc, #456]	@ (8013ad8 <handle_manage_user+0x2f4>)
 801390e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013912:	f011 fa71 	bl	8024df8 <mg_json_get_str>
 8013916:	4604      	mov	r4, r0
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 8013918:	b125      	cbz	r5, 8013924 <handle_manage_user+0x140>
 801391a:	b118      	cbz	r0, 8013924 <handle_manage_user+0x140>
 801391c:	782b      	ldrb	r3, [r5, #0]
 801391e:	b10b      	cbz	r3, 8013924 <handle_manage_user+0x140>
 8013920:	7803      	ldrb	r3, [r0, #0]
 8013922:	bb7b      	cbnz	r3, 8013984 <handle_manage_user+0x1a0>
	        mg_http_reply(c, 400, headers,
 8013924:	4b6d      	ldr	r3, [pc, #436]	@ (8013adc <handle_manage_user+0x2f8>)
 8013926:	4a66      	ldr	r2, [pc, #408]	@ (8013ac0 <handle_manage_user+0x2dc>)
 8013928:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801392c:	4638      	mov	r0, r7
 801392e:	f00f ffe9 	bl	8023904 <mg_http_reply>
		free(username_add);
 8013932:	4628      	mov	r0, r5
 8013934:	f006 fd9a 	bl	801a46c <vPortFree>
		free(password_add);
 8013938:	4620      	mov	r0, r4
 801393a:	f006 fd97 	bl	801a46c <vPortFree>
 801393e:	e7c1      	b.n	80138c4 <handle_manage_user+0xe0>
	        mg_http_reply(c, 400, headers,
 8013940:	4b67      	ldr	r3, [pc, #412]	@ (8013ae0 <handle_manage_user+0x2fc>)
 8013942:	4a5f      	ldr	r2, [pc, #380]	@ (8013ac0 <handle_manage_user+0x2dc>)
 8013944:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013948:	4638      	mov	r0, r7
 801394a:	f00f ffdb 	bl	8023904 <mg_http_reply>
	        return;
 801394e:	e7b9      	b.n	80138c4 <handle_manage_user+0xe0>
	        for (int i = 0; i < user_list_size; i++) {
 8013950:	3601      	adds	r6, #1
 8013952:	2e09      	cmp	r6, #9
 8013954:	dc18      	bgt.n	8013988 <handle_manage_user+0x1a4>
	            if (strcmp(web_users[i].user, username_add) == 0) {
 8013956:	4629      	mov	r1, r5
 8013958:	20a9      	movs	r0, #169	@ 0xa9
 801395a:	4b55      	ldr	r3, [pc, #340]	@ (8013ab0 <handle_manage_user+0x2cc>)
 801395c:	fb00 3006 	mla	r0, r0, r6, r3
 8013960:	f7fc fc3e 	bl	80101e0 <strcmp>
 8013964:	2800      	cmp	r0, #0
 8013966:	d1f3      	bne.n	8013950 <handle_manage_user+0x16c>
	                mg_http_reply(c, 400, headers,
 8013968:	4b5e      	ldr	r3, [pc, #376]	@ (8013ae4 <handle_manage_user+0x300>)
 801396a:	4a55      	ldr	r2, [pc, #340]	@ (8013ac0 <handle_manage_user+0x2dc>)
 801396c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013970:	4638      	mov	r0, r7
 8013972:	f00f ffc7 	bl	8023904 <mg_http_reply>
	                free(username_add);
 8013976:	4628      	mov	r0, r5
 8013978:	f006 fd78 	bl	801a46c <vPortFree>
	                free(password_add);
 801397c:	4620      	mov	r0, r4
 801397e:	f006 fd75 	bl	801a46c <vPortFree>
	                return;
 8013982:	e79f      	b.n	80138c4 <handle_manage_user+0xe0>
	        for (int i = 0; i < user_list_size; i++) {
 8013984:	2600      	movs	r6, #0
 8013986:	e7e4      	b.n	8013952 <handle_manage_user+0x16e>
			char add_pass_digest[sha1_str_len] = {0};
 8013988:	2600      	movs	r6, #0
 801398a:	9604      	str	r6, [sp, #16]
 801398c:	2225      	movs	r2, #37	@ 0x25
 801398e:	4631      	mov	r1, r6
 8013990:	a805      	add	r0, sp, #20
 8013992:	f018 fc75 	bl	802c280 <memset>
			mg_sha1_init(&sha1_ctx);
 8013996:	a80f      	add	r0, sp, #60	@ 0x3c
 8013998:	f010 f88c 	bl	8023ab4 <mg_sha1_init>
			mg_sha1_update(&sha1_ctx, (const unsigned char *)password_add, strlen(password_add) * sizeof(char));
 801399c:	4620      	mov	r0, r4
 801399e:	f7fc fc7f 	bl	80102a0 <strlen>
 80139a2:	4602      	mov	r2, r0
 80139a4:	4621      	mov	r1, r4
 80139a6:	a80f      	add	r0, sp, #60	@ 0x3c
 80139a8:	f010 f89e 	bl	8023ae8 <mg_sha1_update>
			mg_sha1_final((unsigned char *)add_pass_digest, &sha1_ctx);
 80139ac:	a90f      	add	r1, sp, #60	@ 0x3c
 80139ae:	a804      	add	r0, sp, #16
 80139b0:	f010 f8d4 	bl	8023b5c <mg_sha1_final>
	        for (int i = 0; i < user_list_size; i++) {
 80139b4:	4633      	mov	r3, r6
 80139b6:	e000      	b.n	80139ba <handle_manage_user+0x1d6>
 80139b8:	3301      	adds	r3, #1
 80139ba:	2b09      	cmp	r3, #9
 80139bc:	dc23      	bgt.n	8013a06 <handle_manage_user+0x222>
	            if (web_users[i].user[0] == '\0') { // Пустая запись
 80139be:	22a9      	movs	r2, #169	@ 0xa9
 80139c0:	fb03 f202 	mul.w	r2, r3, r2
 80139c4:	493a      	ldr	r1, [pc, #232]	@ (8013ab0 <handle_manage_user+0x2cc>)
 80139c6:	5c8a      	ldrb	r2, [r1, r2]
 80139c8:	2a00      	cmp	r2, #0
 80139ca:	d1f5      	bne.n	80139b8 <handle_manage_user+0x1d4>
	                strncpy(web_users[i].user, username_add, sizeof(web_users[i].user) - 1);
 80139cc:	22a9      	movs	r2, #169	@ 0xa9
 80139ce:	fb02 f603 	mul.w	r6, r2, r3
 80139d2:	4688      	mov	r8, r1
 80139d4:	227f      	movs	r2, #127	@ 0x7f
 80139d6:	4629      	mov	r1, r5
 80139d8:	eb08 0006 	add.w	r0, r8, r6
 80139dc:	f018 fc97 	bl	802c30e <strncpy>
	                strncpy(web_users[i].pass_digest, add_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 80139e0:	f106 0080 	add.w	r0, r6, #128	@ 0x80
 80139e4:	2228      	movs	r2, #40	@ 0x28
 80139e6:	a904      	add	r1, sp, #16
 80139e8:	4440      	add	r0, r8
 80139ea:	f018 fc90 	bl	802c30e <strncpy>
	                write_users(user_cred_file, web_users, user_list_size);
 80139ee:	220a      	movs	r2, #10
 80139f0:	4641      	mov	r1, r8
 80139f2:	483d      	ldr	r0, [pc, #244]	@ (8013ae8 <handle_manage_user+0x304>)
 80139f4:	f7ff fedc 	bl	80137b0 <write_users>
	            mg_http_reply(c, 200, headers,
 80139f8:	4b3c      	ldr	r3, [pc, #240]	@ (8013aec <handle_manage_user+0x308>)
 80139fa:	4a31      	ldr	r2, [pc, #196]	@ (8013ac0 <handle_manage_user+0x2dc>)
 80139fc:	21c8      	movs	r1, #200	@ 0xc8
 80139fe:	4638      	mov	r0, r7
 8013a00:	f00f ff80 	bl	8023904 <mg_http_reply>
 8013a04:	e795      	b.n	8013932 <handle_manage_user+0x14e>
	            mg_http_reply(c, 400, headers,
 8013a06:	4b3a      	ldr	r3, [pc, #232]	@ (8013af0 <handle_manage_user+0x30c>)
 8013a08:	4a2d      	ldr	r2, [pc, #180]	@ (8013ac0 <handle_manage_user+0x2dc>)
 8013a0a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013a0e:	4638      	mov	r0, r7
 8013a10:	f00f ff78 	bl	8023904 <mg_http_reply>
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 8013a14:	e78d      	b.n	8013932 <handle_manage_user+0x14e>
	}else if (mg_match(hm->method, mg_str("PUT"), NULL)){
 8013a16:	ad2a      	add	r5, sp, #168	@ 0xa8
 8013a18:	4936      	ldr	r1, [pc, #216]	@ (8013af4 <handle_manage_user+0x310>)
 8013a1a:	4628      	mov	r0, r5
 8013a1c:	f010 f8fc 	bl	8023c18 <mg_str_s>
 8013a20:	2300      	movs	r3, #0
 8013a22:	9300      	str	r3, [sp, #0]
 8013a24:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013a28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013a2c:	f010 fb16 	bl	802405c <mg_match>
 8013a30:	2800      	cmp	r0, #0
 8013a32:	f000 80a9 	beq.w	8013b88 <handle_manage_user+0x3a4>
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 8013a36:	ab03      	add	r3, sp, #12
 8013a38:	4a25      	ldr	r2, [pc, #148]	@ (8013ad0 <handle_manage_user+0x2ec>)
 8013a3a:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013a3e:	c903      	ldmia	r1, {r0, r1}
 8013a40:	f00e fdba 	bl	80225b8 <mg_json_get>
 8013a44:	2800      	cmp	r0, #0
 8013a46:	db22      	blt.n	8013a8e <handle_manage_user+0x2aa>
	        username_edit = mg_json_get_str(hm->body, "$.user");
 8013a48:	4a22      	ldr	r2, [pc, #136]	@ (8013ad4 <handle_manage_user+0x2f0>)
 8013a4a:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013a4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013a52:	f011 f9d1 	bl	8024df8 <mg_json_get_str>
 8013a56:	4605      	mov	r5, r0
	        new_password = mg_json_get_str(hm->body, "$.pass");
 8013a58:	4a1f      	ldr	r2, [pc, #124]	@ (8013ad8 <handle_manage_user+0x2f4>)
 8013a5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013a5e:	f011 f9cb 	bl	8024df8 <mg_json_get_str>
 8013a62:	4604      	mov	r4, r0
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 8013a64:	b12d      	cbz	r5, 8013a72 <handle_manage_user+0x28e>
 8013a66:	b120      	cbz	r0, 8013a72 <handle_manage_user+0x28e>
 8013a68:	782b      	ldrb	r3, [r5, #0]
 8013a6a:	b113      	cbz	r3, 8013a72 <handle_manage_user+0x28e>
 8013a6c:	7803      	ldrb	r3, [r0, #0]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d144      	bne.n	8013afc <handle_manage_user+0x318>
	            mg_http_reply(c, 400, headers,
 8013a72:	4b21      	ldr	r3, [pc, #132]	@ (8013af8 <handle_manage_user+0x314>)
 8013a74:	4a12      	ldr	r2, [pc, #72]	@ (8013ac0 <handle_manage_user+0x2dc>)
 8013a76:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013a7a:	4638      	mov	r0, r7
 8013a7c:	f00f ff42 	bl	8023904 <mg_http_reply>
	    free(username_edit);
 8013a80:	4628      	mov	r0, r5
 8013a82:	f006 fcf3 	bl	801a46c <vPortFree>
	    free(new_password);
 8013a86:	4620      	mov	r0, r4
 8013a88:	f006 fcf0 	bl	801a46c <vPortFree>
 8013a8c:	e71a      	b.n	80138c4 <handle_manage_user+0xe0>
	        mg_http_reply(c, 400, headers,
 8013a8e:	4b14      	ldr	r3, [pc, #80]	@ (8013ae0 <handle_manage_user+0x2fc>)
 8013a90:	4a0b      	ldr	r2, [pc, #44]	@ (8013ac0 <handle_manage_user+0x2dc>)
 8013a92:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013a96:	4638      	mov	r0, r7
 8013a98:	f00f ff34 	bl	8023904 <mg_http_reply>
	    char *new_password = NULL;
 8013a9c:	2400      	movs	r4, #0
	    char *username_edit = NULL;
 8013a9e:	4625      	mov	r5, r4
 8013aa0:	e7ee      	b.n	8013a80 <handle_manage_user+0x29c>
 8013aa2:	bf00      	nop
 8013aa4:	08036368 	.word	0x08036368
 8013aa8:	08036860 	.word	0x08036860
 8013aac:	0803a368 	.word	0x0803a368
 8013ab0:	200021a0 	.word	0x200021a0
 8013ab4:	08036870 	.word	0x08036870
 8013ab8:	08036880 	.word	0x08036880
 8013abc:	08036884 	.word	0x08036884
 8013ac0:	08035e60 	.word	0x08035e60
 8013ac4:	08036888 	.word	0x08036888
 8013ac8:	080368bc 	.word	0x080368bc
 8013acc:	08035e1c 	.word	0x08035e1c
 8013ad0:	0803654c 	.word	0x0803654c
 8013ad4:	080368e4 	.word	0x080368e4
 8013ad8:	080368ec 	.word	0x080368ec
 8013adc:	080369a0 	.word	0x080369a0
 8013ae0:	08036550 	.word	0x08036550
 8013ae4:	080368f4 	.word	0x080368f4
 8013ae8:	080358d4 	.word	0x080358d4
 8013aec:	08036930 	.word	0x08036930
 8013af0:	0803696c 	.word	0x0803696c
 8013af4:	080369e0 	.word	0x080369e0
 8013af8:	08036a58 	.word	0x08036a58
	            char new_pass_digest[sha1_str_len] = {0};
 8013afc:	2600      	movs	r6, #0
 8013afe:	9604      	str	r6, [sp, #16]
 8013b00:	2225      	movs	r2, #37	@ 0x25
 8013b02:	4631      	mov	r1, r6
 8013b04:	a805      	add	r0, sp, #20
 8013b06:	f018 fbbb 	bl	802c280 <memset>
	            mg_sha1_init(&sha1_ctx);
 8013b0a:	a80f      	add	r0, sp, #60	@ 0x3c
 8013b0c:	f00f ffd2 	bl	8023ab4 <mg_sha1_init>
	            mg_sha1_update(&sha1_ctx, (const unsigned char *)new_password, strlen(new_password));
 8013b10:	4620      	mov	r0, r4
 8013b12:	f7fc fbc5 	bl	80102a0 <strlen>
 8013b16:	4602      	mov	r2, r0
 8013b18:	4621      	mov	r1, r4
 8013b1a:	a80f      	add	r0, sp, #60	@ 0x3c
 8013b1c:	f00f ffe4 	bl	8023ae8 <mg_sha1_update>
	            mg_sha1_final((unsigned char *)new_pass_digest, &sha1_ctx);
 8013b20:	a90f      	add	r1, sp, #60	@ 0x3c
 8013b22:	a804      	add	r0, sp, #16
 8013b24:	f010 f81a 	bl	8023b5c <mg_sha1_final>
	            for (int i = 0; i < user_list_size; i++) {
 8013b28:	2e09      	cmp	r6, #9
 8013b2a:	dc25      	bgt.n	8013b78 <handle_manage_user+0x394>
	                if (strcmp(web_users[i].user, username_edit) == 0) {
 8013b2c:	4629      	mov	r1, r5
 8013b2e:	20a9      	movs	r0, #169	@ 0xa9
 8013b30:	4b45      	ldr	r3, [pc, #276]	@ (8013c48 <handle_manage_user+0x464>)
 8013b32:	fb00 3006 	mla	r0, r0, r6, r3
 8013b36:	f7fc fb53 	bl	80101e0 <strcmp>
 8013b3a:	b108      	cbz	r0, 8013b40 <handle_manage_user+0x35c>
	            for (int i = 0; i < user_list_size; i++) {
 8013b3c:	3601      	adds	r6, #1
 8013b3e:	e7f3      	b.n	8013b28 <handle_manage_user+0x344>
	                    strncpy(web_users[i].pass_digest, new_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 8013b40:	23a9      	movs	r3, #169	@ 0xa9
 8013b42:	fb03 f606 	mul.w	r6, r3, r6
 8013b46:	f106 0080 	add.w	r0, r6, #128	@ 0x80
 8013b4a:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 8013c48 <handle_manage_user+0x464>
 8013b4e:	2228      	movs	r2, #40	@ 0x28
 8013b50:	a904      	add	r1, sp, #16
 8013b52:	4440      	add	r0, r8
 8013b54:	f018 fbdb 	bl	802c30e <strncpy>
	                    web_users[i].pass_digest[sizeof(web_users[i].pass_digest) - 1] = '\0';
 8013b58:	4446      	add	r6, r8
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	f886 30a8 	strb.w	r3, [r6, #168]	@ 0xa8
	                    write_users(user_cred_file, web_users, user_list_size);
 8013b60:	220a      	movs	r2, #10
 8013b62:	4641      	mov	r1, r8
 8013b64:	4839      	ldr	r0, [pc, #228]	@ (8013c4c <handle_manage_user+0x468>)
 8013b66:	f7ff fe23 	bl	80137b0 <write_users>
	                mg_http_reply(c, 200, headers,
 8013b6a:	4b39      	ldr	r3, [pc, #228]	@ (8013c50 <handle_manage_user+0x46c>)
 8013b6c:	4a39      	ldr	r2, [pc, #228]	@ (8013c54 <handle_manage_user+0x470>)
 8013b6e:	21c8      	movs	r1, #200	@ 0xc8
 8013b70:	4638      	mov	r0, r7
 8013b72:	f00f fec7 	bl	8023904 <mg_http_reply>
 8013b76:	e783      	b.n	8013a80 <handle_manage_user+0x29c>
	                mg_http_reply(c, 404, headers,
 8013b78:	4b37      	ldr	r3, [pc, #220]	@ (8013c58 <handle_manage_user+0x474>)
 8013b7a:	4a36      	ldr	r2, [pc, #216]	@ (8013c54 <handle_manage_user+0x470>)
 8013b7c:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8013b80:	4638      	mov	r0, r7
 8013b82:	f00f febf 	bl	8023904 <mg_http_reply>
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 8013b86:	e77b      	b.n	8013a80 <handle_manage_user+0x29c>
	}else if (mg_match(hm->method, mg_str("DELETE"), NULL)){
 8013b88:	ad2c      	add	r5, sp, #176	@ 0xb0
 8013b8a:	4934      	ldr	r1, [pc, #208]	@ (8013c5c <handle_manage_user+0x478>)
 8013b8c:	4628      	mov	r0, r5
 8013b8e:	f010 f843 	bl	8023c18 <mg_str_s>
 8013b92:	2300      	movs	r3, #0
 8013b94:	9300      	str	r3, [sp, #0]
 8013b96:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013b9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013b9e:	f010 fa5d 	bl	802405c <mg_match>
 8013ba2:	2800      	cmp	r0, #0
 8013ba4:	d047      	beq.n	8013c36 <handle_manage_user+0x452>
	    username_del = mg_json_get_str(hm->body, "$.user");
 8013ba6:	4a2e      	ldr	r2, [pc, #184]	@ (8013c60 <handle_manage_user+0x47c>)
 8013ba8:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013bac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013bb0:	f011 f922 	bl	8024df8 <mg_json_get_str>
	    if (username_del && strlen(username_del) > 0) {
 8013bb4:	4606      	mov	r6, r0
 8013bb6:	b108      	cbz	r0, 8013bbc <handle_manage_user+0x3d8>
 8013bb8:	7803      	ldrb	r3, [r0, #0]
 8013bba:	bb2b      	cbnz	r3, 8013c08 <handle_manage_user+0x424>
	        mg_http_reply(c, 400, headers,
 8013bbc:	4b29      	ldr	r3, [pc, #164]	@ (8013c64 <handle_manage_user+0x480>)
 8013bbe:	4a25      	ldr	r2, [pc, #148]	@ (8013c54 <handle_manage_user+0x470>)
 8013bc0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013bc4:	4638      	mov	r0, r7
 8013bc6:	f00f fe9d 	bl	8023904 <mg_http_reply>
	    free(username_del);
 8013bca:	4630      	mov	r0, r6
 8013bcc:	f006 fc4e 	bl	801a46c <vPortFree>
 8013bd0:	e678      	b.n	80138c4 <handle_manage_user+0xe0>
	                memset(web_users[i].user, 0, sizeof(web_users[i].user));
 8013bd2:	2280      	movs	r2, #128	@ 0x80
 8013bd4:	2100      	movs	r1, #0
 8013bd6:	4628      	mov	r0, r5
 8013bd8:	f018 fb52 	bl	802c280 <memset>
	                memset(web_users[i].pass_digest, 0, sizeof(web_users[i].pass_digest));
 8013bdc:	23a9      	movs	r3, #169	@ 0xa9
 8013bde:	fb03 f004 	mul.w	r0, r3, r4
 8013be2:	3080      	adds	r0, #128	@ 0x80
 8013be4:	4c18      	ldr	r4, [pc, #96]	@ (8013c48 <handle_manage_user+0x464>)
 8013be6:	2229      	movs	r2, #41	@ 0x29
 8013be8:	2100      	movs	r1, #0
 8013bea:	4420      	add	r0, r4
 8013bec:	f018 fb48 	bl	802c280 <memset>
	                write_users(user_cred_file, web_users, user_list_size);
 8013bf0:	220a      	movs	r2, #10
 8013bf2:	4621      	mov	r1, r4
 8013bf4:	4815      	ldr	r0, [pc, #84]	@ (8013c4c <handle_manage_user+0x468>)
 8013bf6:	f7ff fddb 	bl	80137b0 <write_users>
	            mg_http_reply(c, 200, headers,
 8013bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8013c68 <handle_manage_user+0x484>)
 8013bfc:	4a15      	ldr	r2, [pc, #84]	@ (8013c54 <handle_manage_user+0x470>)
 8013bfe:	21c8      	movs	r1, #200	@ 0xc8
 8013c00:	4638      	mov	r0, r7
 8013c02:	f00f fe7f 	bl	8023904 <mg_http_reply>
 8013c06:	e7e0      	b.n	8013bca <handle_manage_user+0x3e6>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 8013c08:	2401      	movs	r4, #1
 8013c0a:	2c09      	cmp	r4, #9
 8013c0c:	dc0b      	bgt.n	8013c26 <handle_manage_user+0x442>
	            if (strcmp(web_users[i].user, username_del) == 0) {
 8013c0e:	23a9      	movs	r3, #169	@ 0xa9
 8013c10:	4d0d      	ldr	r5, [pc, #52]	@ (8013c48 <handle_manage_user+0x464>)
 8013c12:	fb03 5504 	mla	r5, r3, r4, r5
 8013c16:	4631      	mov	r1, r6
 8013c18:	4628      	mov	r0, r5
 8013c1a:	f7fc fae1 	bl	80101e0 <strcmp>
 8013c1e:	2800      	cmp	r0, #0
 8013c20:	d0d7      	beq.n	8013bd2 <handle_manage_user+0x3ee>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 8013c22:	3401      	adds	r4, #1
 8013c24:	e7f1      	b.n	8013c0a <handle_manage_user+0x426>
	            mg_http_reply(c, 400, headers,
 8013c26:	4b11      	ldr	r3, [pc, #68]	@ (8013c6c <handle_manage_user+0x488>)
 8013c28:	4a0a      	ldr	r2, [pc, #40]	@ (8013c54 <handle_manage_user+0x470>)
 8013c2a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013c2e:	4638      	mov	r0, r7
 8013c30:	f00f fe68 	bl	8023904 <mg_http_reply>
 8013c34:	e7c9      	b.n	8013bca <handle_manage_user+0x3e6>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013c36:	4b0e      	ldr	r3, [pc, #56]	@ (8013c70 <handle_manage_user+0x48c>)
 8013c38:	4a06      	ldr	r2, [pc, #24]	@ (8013c54 <handle_manage_user+0x470>)
 8013c3a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013c3e:	4638      	mov	r0, r7
 8013c40:	f00f fe60 	bl	8023904 <mg_http_reply>
 8013c44:	e63e      	b.n	80138c4 <handle_manage_user+0xe0>
 8013c46:	bf00      	nop
 8013c48:	200021a0 	.word	0x200021a0
 8013c4c:	080358d4 	.word	0x080358d4
 8013c50:	080369e4 	.word	0x080369e4
 8013c54:	08035e60 	.word	0x08035e60
 8013c58:	08036a28 	.word	0x08036a28
 8013c5c:	08036a9c 	.word	0x08036a9c
 8013c60:	080368e4 	.word	0x080368e4
 8013c64:	08036b38 	.word	0x08036b38
 8013c68:	08036aa4 	.word	0x08036aa4
 8013c6c:	08036ae4 	.word	0x08036ae4
 8013c70:	08036b78 	.word	0x08036b78

08013c74 <load_users>:
static bool load_users(const char *file_path, users_list_t * users, size_t count){
 8013c74:	b570      	push	{r4, r5, r6, lr}
 8013c76:	460e      	mov	r6, r1
 8013c78:	4614      	mov	r4, r2
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_READ);
 8013c7a:	2201      	movs	r2, #1
 8013c7c:	4601      	mov	r1, r0
 8013c7e:	480a      	ldr	r0, [pc, #40]	@ (8013ca8 <load_users+0x34>)
 8013c80:	f00e fbb1 	bl	80223e6 <mg_fs_open>
	if (!fd) return false;
 8013c84:	b168      	cbz	r0, 8013ca2 <load_users+0x2e>
 8013c86:	4605      	mov	r5, r0
	mg_fs_lfs.rd(fd->fd, users, sizeof(users_list_t) * count);
 8013c88:	4b07      	ldr	r3, [pc, #28]	@ (8013ca8 <load_users+0x34>)
 8013c8a:	691b      	ldr	r3, [r3, #16]
 8013c8c:	22a9      	movs	r2, #169	@ 0xa9
 8013c8e:	fb04 f202 	mul.w	r2, r4, r2
 8013c92:	4631      	mov	r1, r6
 8013c94:	6800      	ldr	r0, [r0, #0]
 8013c96:	4798      	blx	r3
	mg_fs_close(fd);
 8013c98:	4628      	mov	r0, r5
 8013c9a:	f00e fbbd 	bl	8022418 <mg_fs_close>
	return true;
 8013c9e:	2001      	movs	r0, #1
}
 8013ca0:	bd70      	pop	{r4, r5, r6, pc}
	if (!fd) return false;
 8013ca2:	2000      	movs	r0, #0
 8013ca4:	e7fc      	b.n	8013ca0 <load_users+0x2c>
 8013ca6:	bf00      	nop
 8013ca8:	200000a0 	.word	0x200000a0

08013cac <handle_restart_mcu>:
static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 8013cac:	b570      	push	{r4, r5, r6, lr}
 8013cae:	b086      	sub	sp, #24
 8013cb0:	4605      	mov	r5, r0
 8013cb2:	460c      	mov	r4, r1
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013cb4:	ae04      	add	r6, sp, #16
 8013cb6:	4915      	ldr	r1, [pc, #84]	@ (8013d0c <handle_restart_mcu+0x60>)
 8013cb8:	4630      	mov	r0, r6
 8013cba:	f00f ffad 	bl	8023c18 <mg_str_s>
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	9300      	str	r3, [sp, #0]
 8013cc2:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013cc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013cca:	f010 f9c7 	bl	802405c <mg_match>
 8013cce:	b1a0      	cbz	r0, 8013cfa <handle_restart_mcu+0x4e>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 8013cd0:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
		mg_timer_add(param->mgr, 2000 /* 2 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 8013cd2:	6818      	ldr	r0, [r3, #0]
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	9302      	str	r3, [sp, #8]
 8013cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8013d10 <handle_restart_mcu+0x64>)
 8013cda:	9301      	str	r3, [sp, #4]
 8013cdc:	2301      	movs	r3, #1
 8013cde:	9300      	str	r3, [sp, #0]
 8013ce0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	f011 f979 	bl	8024fdc <mg_timer_add>
		mg_http_reply(c, 200, headers, //TODO delete for release,
 8013cea:	4b0a      	ldr	r3, [pc, #40]	@ (8013d14 <handle_restart_mcu+0x68>)
 8013cec:	4a0a      	ldr	r2, [pc, #40]	@ (8013d18 <handle_restart_mcu+0x6c>)
 8013cee:	21c8      	movs	r1, #200	@ 0xc8
 8013cf0:	4628      	mov	r0, r5
 8013cf2:	f00f fe07 	bl	8023904 <mg_http_reply>
}
 8013cf6:	b006      	add	sp, #24
 8013cf8:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013cfa:	4b08      	ldr	r3, [pc, #32]	@ (8013d1c <handle_restart_mcu+0x70>)
 8013cfc:	4a06      	ldr	r2, [pc, #24]	@ (8013d18 <handle_restart_mcu+0x6c>)
 8013cfe:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013d02:	4628      	mov	r0, r5
 8013d04:	f00f fdfe 	bl	8023904 <mg_http_reply>
}
 8013d08:	e7f5      	b.n	8013cf6 <handle_restart_mcu+0x4a>
 8013d0a:	bf00      	nop
 8013d0c:	08035e1c 	.word	0x08035e1c
 8013d10:	08015de9 	.word	0x08015de9
 8013d14:	08036bd8 	.word	0x08036bd8
 8013d18:	08035e60 	.word	0x08035e60
 8013d1c:	08035f14 	.word	0x08035f14

08013d20 <handle_activete_and_reboot>:
static void handle_activete_and_reboot(struct mg_connection *c, struct mg_http_message *hm){
 8013d20:	b570      	push	{r4, r5, r6, lr}
 8013d22:	b084      	sub	sp, #16
 8013d24:	4605      	mov	r5, r0
 8013d26:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013d28:	ae02      	add	r6, sp, #8
 8013d2a:	4914      	ldr	r1, [pc, #80]	@ (8013d7c <handle_activete_and_reboot+0x5c>)
 8013d2c:	4630      	mov	r0, r6
 8013d2e:	f00f ff73 	bl	8023c18 <mg_str_s>
 8013d32:	2300      	movs	r3, #0
 8013d34:	9300      	str	r3, [sp, #0]
 8013d36:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013d3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013d3e:	f010 f98d 	bl	802405c <mg_match>
 8013d42:	b198      	cbz	r0, 8013d6c <handle_activete_and_reboot+0x4c>
		if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 8013d44:	4b0e      	ldr	r3, [pc, #56]	@ (8013d80 <handle_activete_and_reboot+0x60>)
 8013d46:	69db      	ldr	r3, [r3, #28]
 8013d48:	490e      	ldr	r1, [pc, #56]	@ (8013d84 <handle_activete_and_reboot+0x64>)
 8013d4a:	480f      	ldr	r0, [pc, #60]	@ (8013d88 <handle_activete_and_reboot+0x68>)
 8013d4c:	4798      	blx	r3
 8013d4e:	b128      	cbz	r0, 8013d5c <handle_activete_and_reboot+0x3c>
			handle_restart_mcu(c, hm);
 8013d50:	4621      	mov	r1, r4
 8013d52:	4628      	mov	r0, r5
 8013d54:	f7ff ffaa 	bl	8013cac <handle_restart_mcu>
}
 8013d58:	b004      	add	sp, #16
 8013d5a:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 500, headers, //TODO delete for release,
 8013d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8013d8c <handle_activete_and_reboot+0x6c>)
 8013d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8013d90 <handle_activete_and_reboot+0x70>)
 8013d60:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013d64:	4628      	mov	r0, r5
 8013d66:	f00f fdcd 	bl	8023904 <mg_http_reply>
 8013d6a:	e7f5      	b.n	8013d58 <handle_activete_and_reboot+0x38>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013d6c:	4b09      	ldr	r3, [pc, #36]	@ (8013d94 <handle_activete_and_reboot+0x74>)
 8013d6e:	4a08      	ldr	r2, [pc, #32]	@ (8013d90 <handle_activete_and_reboot+0x70>)
 8013d70:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013d74:	4628      	mov	r0, r5
 8013d76:	f00f fdc5 	bl	8023904 <mg_http_reply>
}
 8013d7a:	e7ed      	b.n	8013d58 <handle_activete_and_reboot+0x38>
 8013d7c:	08035e1c 	.word	0x08035e1c
 8013d80:	200000a0 	.word	0x200000a0
 8013d84:	0803588c 	.word	0x0803588c
 8013d88:	08036c10 	.word	0x08036c10
 8013d8c:	08036c28 	.word	0x08036c28
 8013d90:	08035e60 	.word	0x08035e60
 8013d94:	08035f14 	.word	0x08035f14

08013d98 <handle_firmware_upload>:
static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 8013d98:	b570      	push	{r4, r5, r6, lr}
 8013d9a:	b0a4      	sub	sp, #144	@ 0x90
 8013d9c:	4605      	mov	r5, r0
 8013d9e:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013da0:	ae22      	add	r6, sp, #136	@ 0x88
 8013da2:	491a      	ldr	r1, [pc, #104]	@ (8013e0c <handle_firmware_upload+0x74>)
 8013da4:	4630      	mov	r0, r6
 8013da6:	f00f ff37 	bl	8023c18 <mg_str_s>
 8013daa:	2300      	movs	r3, #0
 8013dac:	9300      	str	r3, [sp, #0]
 8013dae:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013db2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013db6:	f010 f951 	bl	802405c <mg_match>
 8013dba:	b1f0      	cbz	r0, 8013dfa <handle_firmware_upload+0x62>
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8013dbc:	2380      	movs	r3, #128	@ 0x80
 8013dbe:	aa02      	add	r2, sp, #8
 8013dc0:	4913      	ldr	r1, [pc, #76]	@ (8013e10 <handle_firmware_upload+0x78>)
 8013dc2:	f104 0010 	add.w	r0, r4, #16
 8013dc6:	f010 fe14 	bl	80249f2 <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 8013dca:	4912      	ldr	r1, [pc, #72]	@ (8013e14 <handle_firmware_upload+0x7c>)
 8013dcc:	a802      	add	r0, sp, #8
 8013dce:	f7fc fa07 	bl	80101e0 <strcmp>
 8013dd2:	b940      	cbnz	r0, 8013de6 <handle_firmware_upload+0x4e>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 8013dd4:	4b10      	ldr	r3, [pc, #64]	@ (8013e18 <handle_firmware_upload+0x80>)
 8013dd6:	9300      	str	r3, [sp, #0]
 8013dd8:	4b10      	ldr	r3, [pc, #64]	@ (8013e1c <handle_firmware_upload+0x84>)
 8013dda:	4a11      	ldr	r2, [pc, #68]	@ (8013e20 <handle_firmware_upload+0x88>)
 8013ddc:	4621      	mov	r1, r4
 8013dde:	4628      	mov	r0, r5
 8013de0:	f012 fb92 	bl	8026508 <mg_http_upload>
 8013de4:	e010      	b.n	8013e08 <handle_firmware_upload+0x70>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8013de6:	4b0b      	ldr	r3, [pc, #44]	@ (8013e14 <handle_firmware_upload+0x7c>)
 8013de8:	9300      	str	r3, [sp, #0]
 8013dea:	4b0e      	ldr	r3, [pc, #56]	@ (8013e24 <handle_firmware_upload+0x8c>)
 8013dec:	4a0e      	ldr	r2, [pc, #56]	@ (8013e28 <handle_firmware_upload+0x90>)
 8013dee:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013df2:	4628      	mov	r0, r5
 8013df4:	f00f fd86 	bl	8023904 <mg_http_reply>
 8013df8:	e006      	b.n	8013e08 <handle_firmware_upload+0x70>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8013e2c <handle_firmware_upload+0x94>)
 8013dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8013e28 <handle_firmware_upload+0x90>)
 8013dfe:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013e02:	4628      	mov	r0, r5
 8013e04:	f00f fd7e 	bl	8023904 <mg_http_reply>
}
 8013e08:	b024      	add	sp, #144	@ 0x90
 8013e0a:	bd70      	pop	{r4, r5, r6, pc}
 8013e0c:	08035e1c 	.word	0x08035e1c
 8013e10:	0803a2b8 	.word	0x0803a2b8
 8013e14:	08036c6c 	.word	0x08036c6c
 8013e18:	0003d090 	.word	0x0003d090
 8013e1c:	08035880 	.word	0x08035880
 8013e20:	200000a0 	.word	0x200000a0
 8013e24:	08036c7c 	.word	0x08036c7c
 8013e28:	08035e60 	.word	0x08035e60
 8013e2c:	08035f14 	.word	0x08035f14

08013e30 <handle_fs_mkdir>:
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 8013e30:	b570      	push	{r4, r5, r6, lr}
 8013e32:	b0c4      	sub	sp, #272	@ 0x110
 8013e34:	4606      	mov	r6, r0
 8013e36:	460c      	mov	r4, r1
  if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013e38:	ad42      	add	r5, sp, #264	@ 0x108
 8013e3a:	4920      	ldr	r1, [pc, #128]	@ (8013ebc <handle_fs_mkdir+0x8c>)
 8013e3c:	4628      	mov	r0, r5
 8013e3e:	f00f feeb 	bl	8023c18 <mg_str_s>
 8013e42:	2300      	movs	r3, #0
 8013e44:	9300      	str	r3, [sp, #0]
 8013e46:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013e4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013e4e:	f010 f905 	bl	802405c <mg_match>
 8013e52:	b350      	cbz	r0, 8013eaa <handle_fs_mkdir+0x7a>
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 8013e54:	237b      	movs	r3, #123	@ 0x7b
 8013e56:	aa23      	add	r2, sp, #140	@ 0x8c
 8013e58:	4919      	ldr	r1, [pc, #100]	@ (8013ec0 <handle_fs_mkdir+0x90>)
 8013e5a:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 8013e5e:	f010 fdc8 	bl	80249f2 <mg_http_get_var>
 8013e62:	2800      	cmp	r0, #0
 8013e64:	dd19      	ble.n	8013e9a <handle_fs_mkdir+0x6a>
		snprintf(path, sizeof(path), "/web/%s", name);
 8013e66:	ab23      	add	r3, sp, #140	@ 0x8c
 8013e68:	4a16      	ldr	r2, [pc, #88]	@ (8013ec4 <handle_fs_mkdir+0x94>)
 8013e6a:	2180      	movs	r1, #128	@ 0x80
 8013e6c:	a803      	add	r0, sp, #12
 8013e6e:	f017 fcdd 	bl	802b82c <snprintf>
		if (mg_fs_lfs.mkd(path)) {
 8013e72:	4b15      	ldr	r3, [pc, #84]	@ (8013ec8 <handle_fs_mkdir+0x98>)
 8013e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e76:	a803      	add	r0, sp, #12
 8013e78:	4798      	blx	r3
 8013e7a:	b130      	cbz	r0, 8013e8a <handle_fs_mkdir+0x5a>
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 8013e7c:	4b13      	ldr	r3, [pc, #76]	@ (8013ecc <handle_fs_mkdir+0x9c>)
 8013e7e:	4a14      	ldr	r2, [pc, #80]	@ (8013ed0 <handle_fs_mkdir+0xa0>)
 8013e80:	21c8      	movs	r1, #200	@ 0xc8
 8013e82:	4630      	mov	r0, r6
 8013e84:	f00f fd3e 	bl	8023904 <mg_http_reply>
 8013e88:	e016      	b.n	8013eb8 <handle_fs_mkdir+0x88>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 8013e8a:	4b12      	ldr	r3, [pc, #72]	@ (8013ed4 <handle_fs_mkdir+0xa4>)
 8013e8c:	4a10      	ldr	r2, [pc, #64]	@ (8013ed0 <handle_fs_mkdir+0xa0>)
 8013e8e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013e92:	4630      	mov	r0, r6
 8013e94:	f00f fd36 	bl	8023904 <mg_http_reply>
 8013e98:	e00e      	b.n	8013eb8 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8013ed8 <handle_fs_mkdir+0xa8>)
 8013e9c:	4a0c      	ldr	r2, [pc, #48]	@ (8013ed0 <handle_fs_mkdir+0xa0>)
 8013e9e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013ea2:	4630      	mov	r0, r6
 8013ea4:	f00f fd2e 	bl	8023904 <mg_http_reply>
 8013ea8:	e006      	b.n	8013eb8 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8013edc <handle_fs_mkdir+0xac>)
 8013eac:	4a08      	ldr	r2, [pc, #32]	@ (8013ed0 <handle_fs_mkdir+0xa0>)
 8013eae:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013eb2:	4630      	mov	r0, r6
 8013eb4:	f00f fd26 	bl	8023904 <mg_http_reply>
}
 8013eb8:	b044      	add	sp, #272	@ 0x110
 8013eba:	bd70      	pop	{r4, r5, r6, pc}
 8013ebc:	08035e1c 	.word	0x08035e1c
 8013ec0:	08036cc8 	.word	0x08036cc8
 8013ec4:	08036cd0 	.word	0x08036cd0
 8013ec8:	200000a0 	.word	0x200000a0
 8013ecc:	08036cd8 	.word	0x08036cd8
 8013ed0:	08035e60 	.word	0x08035e60
 8013ed4:	08036d0c 	.word	0x08036d0c
 8013ed8:	08036d48 	.word	0x08036d48
 8013edc:	08035f14 	.word	0x08035f14

08013ee0 <calc_file_md5sum>:
static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 8013ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ee2:	b097      	sub	sp, #92	@ 0x5c
 8013ee4:	4604      	mov	r4, r0
 8013ee6:	460e      	mov	r6, r1
	char * buff = calloc(buff_len, 1);
 8013ee8:	2101      	movs	r1, #1
 8013eea:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8013eee:	f7ff f97d 	bl	80131ec <mg_calloc>
	if (buff == NULL){
 8013ef2:	4605      	mov	r5, r0
 8013ef4:	b150      	cbz	r0, 8013f0c <calc_file_md5sum+0x2c>
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 8013ef6:	2201      	movs	r2, #1
 8013ef8:	4621      	mov	r1, r4
 8013efa:	4828      	ldr	r0, [pc, #160]	@ (8013f9c <calc_file_md5sum+0xbc>)
 8013efc:	f00e fa73 	bl	80223e6 <mg_fs_open>
	if (fd==NULL){
 8013f00:	4604      	mov	r4, r0
 8013f02:	b140      	cbz	r0, 8013f16 <calc_file_md5sum+0x36>
	mg_md5_init(&md5_ctx);
 8013f04:	4668      	mov	r0, sp
 8013f06:	f00e fe7d 	bl	8022c04 <mg_md5_init>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8013f0a:	e010      	b.n	8013f2e <calc_file_md5sum+0x4e>
		free(buff);
 8013f0c:	f006 faae 	bl	801a46c <vPortFree>
		return -1;
 8013f10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013f14:	e040      	b.n	8013f98 <calc_file_md5sum+0xb8>
		mg_fs_close(fd);
 8013f16:	f00e fa7f 	bl	8022418 <mg_fs_close>
		free(buff);
 8013f1a:	4628      	mov	r0, r5
 8013f1c:	f006 faa6 	bl	801a46c <vPortFree>
		return -2;
 8013f20:	f06f 0001 	mvn.w	r0, #1
 8013f24:	e038      	b.n	8013f98 <calc_file_md5sum+0xb8>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 8013f26:	4629      	mov	r1, r5
 8013f28:	4668      	mov	r0, sp
 8013f2a:	f00e fe81 	bl	8022c30 <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8013f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8013f9c <calc_file_md5sum+0xbc>)
 8013f30:	691b      	ldr	r3, [r3, #16]
 8013f32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8013f36:	4629      	mov	r1, r5
 8013f38:	6820      	ldr	r0, [r4, #0]
 8013f3a:	4798      	blx	r3
 8013f3c:	4602      	mov	r2, r0
 8013f3e:	2800      	cmp	r0, #0
 8013f40:	d1f1      	bne.n	8013f26 <calc_file_md5sum+0x46>
	mg_fs_close(fd);
 8013f42:	4620      	mov	r0, r4
 8013f44:	f00e fa68 	bl	8022418 <mg_fs_close>
	uint8_t * digest = calloc(digest_len, 1);
 8013f48:	2101      	movs	r1, #1
 8013f4a:	2010      	movs	r0, #16
 8013f4c:	f7ff f94e 	bl	80131ec <mg_calloc>
	if (digest == NULL){
 8013f50:	4607      	mov	r7, r0
 8013f52:	b128      	cbz	r0, 8013f60 <calc_file_md5sum+0x80>
	mg_md5_final(&md5_ctx, digest);
 8013f54:	4601      	mov	r1, r0
 8013f56:	4668      	mov	r0, sp
 8013f58:	f00e fec1 	bl	8022cde <mg_md5_final>
	for (int i = 0; i < 16; ++i) {
 8013f5c:	2400      	movs	r4, #0
 8013f5e:	e012      	b.n	8013f86 <calc_file_md5sum+0xa6>
		free(buff);
 8013f60:	4628      	mov	r0, r5
 8013f62:	f006 fa83 	bl	801a46c <vPortFree>
		free(digest);
 8013f66:	4638      	mov	r0, r7
 8013f68:	f006 fa80 	bl	801a46c <vPortFree>
		return -1;
 8013f6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013f70:	e012      	b.n	8013f98 <calc_file_md5sum+0xb8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 8013f72:	0061      	lsls	r1, r4, #1
 8013f74:	5d3b      	ldrb	r3, [r7, r4]
 8013f76:	4a0a      	ldr	r2, [pc, #40]	@ (8013fa0 <calc_file_md5sum+0xc0>)
 8013f78:	f1c1 0121 	rsb	r1, r1, #33	@ 0x21
 8013f7c:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 8013f80:	f017 fc54 	bl	802b82c <snprintf>
	for (int i = 0; i < 16; ++i) {
 8013f84:	3401      	adds	r4, #1
 8013f86:	2c0f      	cmp	r4, #15
 8013f88:	ddf3      	ble.n	8013f72 <calc_file_md5sum+0x92>
	free(buff);
 8013f8a:	4628      	mov	r0, r5
 8013f8c:	f006 fa6e 	bl	801a46c <vPortFree>
	free(digest);
 8013f90:	4638      	mov	r0, r7
 8013f92:	f006 fa6b 	bl	801a46c <vPortFree>
	return 0;
 8013f96:	2000      	movs	r0, #0
}
 8013f98:	b017      	add	sp, #92	@ 0x5c
 8013f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f9c:	200000a0 	.word	0x200000a0
 8013fa0:	08036d84 	.word	0x08036d84

08013fa4 <handle_firmware_md5>:
static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 8013fa4:	b570      	push	{r4, r5, r6, lr}
 8013fa6:	b084      	sub	sp, #16
 8013fa8:	4605      	mov	r5, r0
 8013faa:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013fac:	ae02      	add	r6, sp, #8
 8013fae:	4919      	ldr	r1, [pc, #100]	@ (8014014 <handle_firmware_md5+0x70>)
 8013fb0:	4630      	mov	r0, r6
 8013fb2:	f00f fe31 	bl	8023c18 <mg_str_s>
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	9300      	str	r3, [sp, #0]
 8013fba:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013fbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013fc2:	f010 f84b 	bl	802405c <mg_match>
 8013fc6:	b1e8      	cbz	r0, 8014004 <handle_firmware_md5+0x60>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 8013fc8:	2101      	movs	r1, #1
 8013fca:	2021      	movs	r0, #33	@ 0x21
 8013fcc:	f7ff f90e 	bl	80131ec <mg_calloc>
 8013fd0:	4604      	mov	r4, r0
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 8013fd2:	4601      	mov	r1, r0
 8013fd4:	4810      	ldr	r0, [pc, #64]	@ (8014018 <handle_firmware_md5+0x74>)
 8013fd6:	f7ff ff83 	bl	8013ee0 <calc_file_md5sum>
 8013fda:	b958      	cbnz	r0, 8013ff4 <handle_firmware_md5+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8013fdc:	9400      	str	r4, [sp, #0]
 8013fde:	4b0f      	ldr	r3, [pc, #60]	@ (801401c <handle_firmware_md5+0x78>)
 8013fe0:	4a0f      	ldr	r2, [pc, #60]	@ (8014020 <handle_firmware_md5+0x7c>)
 8013fe2:	21c8      	movs	r1, #200	@ 0xc8
 8013fe4:	4628      	mov	r0, r5
 8013fe6:	f00f fc8d 	bl	8023904 <mg_http_reply>
		free(md5_str);
 8013fea:	4620      	mov	r0, r4
 8013fec:	f006 fa3e 	bl	801a46c <vPortFree>
}
 8013ff0:	b004      	add	sp, #16
 8013ff2:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 404, headers, //TODO delete for release,
 8013ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8014024 <handle_firmware_md5+0x80>)
 8013ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8014020 <handle_firmware_md5+0x7c>)
 8013ff8:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8013ffc:	4628      	mov	r0, r5
 8013ffe:	f00f fc81 	bl	8023904 <mg_http_reply>
 8014002:	e7f2      	b.n	8013fea <handle_firmware_md5+0x46>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8014004:	4b08      	ldr	r3, [pc, #32]	@ (8014028 <handle_firmware_md5+0x84>)
 8014006:	4a06      	ldr	r2, [pc, #24]	@ (8014020 <handle_firmware_md5+0x7c>)
 8014008:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801400c:	4628      	mov	r0, r5
 801400e:	f00f fc79 	bl	8023904 <mg_http_reply>
}
 8014012:	e7ed      	b.n	8013ff0 <handle_firmware_md5+0x4c>
 8014014:	08036368 	.word	0x08036368
 8014018:	08036c10 	.word	0x08036c10
 801401c:	08036d8c 	.word	0x08036d8c
 8014020:	08035e60 	.word	0x08035e60
 8014024:	08036db0 	.word	0x08036db0
 8014028:	08036df0 	.word	0x08036df0

0801402c <dashboard>:


static void dashboard(struct mg_connection *c, int ev, void *ev_data) {

	if (ev == MG_EV_HTTP_MSG) {
 801402c:	290b      	cmp	r1, #11
 801402e:	d000      	beq.n	8014032 <dashboard+0x6>
 8014030:	4770      	bx	lr
static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 8014032:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014034:	b0af      	sub	sp, #188	@ 0xbc
 8014036:	4605      	mov	r5, r0
 8014038:	4614      	mov	r4, r2
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;

    bool authenticate = auth(c, hm, 0); //Check authentication status
 801403a:	2200      	movs	r2, #0
 801403c:	4621      	mov	r1, r4
 801403e:	f7fe ff0f 	bl	8012e60 <auth>
 8014042:	4607      	mov	r7, r0

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 8014044:	ae08      	add	r6, sp, #32
 8014046:	49a7      	ldr	r1, [pc, #668]	@ (80142e4 <dashboard+0x2b8>)
 8014048:	4630      	mov	r0, r6
 801404a:	f00f fde5 	bl	8023c18 <mg_str_s>
 801404e:	2300      	movs	r3, #0
 8014050:	9300      	str	r3, [sp, #0]
 8014052:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014056:	e894 0003 	ldmia.w	r4, {r0, r1}
 801405a:	f00f ffff 	bl	802405c <mg_match>
 801405e:	b120      	cbz	r0, 801406a <dashboard+0x3e>
            	handle_OPTIONS_method(c);
 8014060:	4628      	mov	r0, r5
 8014062:	f7fe fdd3 	bl	8012c0c <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 8014066:	b02f      	add	sp, #188	@ 0xbc
 8014068:	bdf0      	pop	{r4, r5, r6, r7, pc}
        }else if (mg_match(hm->uri, mg_str("/api/#"), NULL) && !authenticate ) { // All requests to /api should be authenticated
 801406a:	ae0a      	add	r6, sp, #40	@ 0x28
 801406c:	499e      	ldr	r1, [pc, #632]	@ (80142e8 <dashboard+0x2bc>)
 801406e:	4630      	mov	r0, r6
 8014070:	f00f fdd2 	bl	8023c18 <mg_str_s>
 8014074:	2300      	movs	r3, #0
 8014076:	9300      	str	r3, [sp, #0]
 8014078:	e896 000c 	ldmia.w	r6, {r2, r3}
 801407c:	f104 0108 	add.w	r1, r4, #8
 8014080:	c903      	ldmia	r1, {r0, r1}
 8014082:	f00f ffeb 	bl	802405c <mg_match>
 8014086:	b100      	cbz	r0, 801408a <dashboard+0x5e>
 8014088:	b19f      	cbz	r7, 80140b2 <dashboard+0x86>
		}else if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 801408a:	ae0c      	add	r6, sp, #48	@ 0x30
 801408c:	4997      	ldr	r1, [pc, #604]	@ (80142ec <dashboard+0x2c0>)
 801408e:	4630      	mov	r0, r6
 8014090:	f00f fdc2 	bl	8023c18 <mg_str_s>
 8014094:	2300      	movs	r3, #0
 8014096:	9300      	str	r3, [sp, #0]
 8014098:	e896 000c 	ldmia.w	r6, {r2, r3}
 801409c:	f104 0108 	add.w	r1, r4, #8
 80140a0:	c903      	ldmia	r1, {r0, r1}
 80140a2:	f00f ffdb 	bl	802405c <mg_match>
 80140a6:	b160      	cbz	r0, 80140c2 <dashboard+0x96>
        	 handler_authanticate(c,hm);
 80140a8:	4621      	mov	r1, r4
 80140aa:	4628      	mov	r0, r5
 80140ac:	f7fe ffb2 	bl	8013014 <handler_authanticate>
 80140b0:	e7d9      	b.n	8014066 <dashboard+0x3a>
        	mg_http_reply(c, 403, "", "Not Authorised\n");
 80140b2:	4b8f      	ldr	r3, [pc, #572]	@ (80142f0 <dashboard+0x2c4>)
 80140b4:	4a8f      	ldr	r2, [pc, #572]	@ (80142f4 <dashboard+0x2c8>)
 80140b6:	f240 1193 	movw	r1, #403	@ 0x193
 80140ba:	4628      	mov	r0, r5
 80140bc:	f00f fc22 	bl	8023904 <mg_http_reply>
 80140c0:	e7d1      	b.n	8014066 <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 80140c2:	ae0e      	add	r6, sp, #56	@ 0x38
 80140c4:	498c      	ldr	r1, [pc, #560]	@ (80142f8 <dashboard+0x2cc>)
 80140c6:	4630      	mov	r0, r6
 80140c8:	f00f fda6 	bl	8023c18 <mg_str_s>
 80140cc:	2300      	movs	r3, #0
 80140ce:	9300      	str	r3, [sp, #0]
 80140d0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80140d4:	f104 0108 	add.w	r1, r4, #8
 80140d8:	c903      	ldmia	r1, {r0, r1}
 80140da:	f00f ffbf 	bl	802405c <mg_match>
 80140de:	b120      	cbz	r0, 80140ea <dashboard+0xbe>
			handler_logout(c,hm);
 80140e0:	4621      	mov	r1, r4
 80140e2:	4628      	mov	r0, r5
 80140e4:	f7fe fe10 	bl	8012d08 <handler_logout>
 80140e8:	e7bd      	b.n	8014066 <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 80140ea:	ae10      	add	r6, sp, #64	@ 0x40
 80140ec:	4983      	ldr	r1, [pc, #524]	@ (80142fc <dashboard+0x2d0>)
 80140ee:	4630      	mov	r0, r6
 80140f0:	f00f fd92 	bl	8023c18 <mg_str_s>
 80140f4:	2300      	movs	r3, #0
 80140f6:	9300      	str	r3, [sp, #0]
 80140f8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80140fc:	f104 0108 	add.w	r1, r4, #8
 8014100:	c903      	ldmia	r1, {r0, r1}
 8014102:	f00f ffab 	bl	802405c <mg_match>
 8014106:	b118      	cbz	r0, 8014110 <dashboard+0xe4>
			handle_ram_status_get(c);
 8014108:	4628      	mov	r0, r5
 801410a:	f7fe ff97 	bl	801303c <handle_ram_status_get>
 801410e:	e7aa      	b.n	8014066 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 8014110:	ae12      	add	r6, sp, #72	@ 0x48
 8014112:	497b      	ldr	r1, [pc, #492]	@ (8014300 <dashboard+0x2d4>)
 8014114:	4630      	mov	r0, r6
 8014116:	f00f fd7f 	bl	8023c18 <mg_str_s>
 801411a:	2300      	movs	r3, #0
 801411c:	9300      	str	r3, [sp, #0]
 801411e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014122:	f104 0108 	add.w	r1, r4, #8
 8014126:	c903      	ldmia	r1, {r0, r1}
 8014128:	f00f ff98 	bl	802405c <mg_match>
 801412c:	b120      	cbz	r0, 8014138 <dashboard+0x10c>
			handle_io_status_get(c, hm);
 801412e:	4621      	mov	r1, r4
 8014130:	4628      	mov	r0, r5
 8014132:	f7fe ffa9 	bl	8013088 <handle_io_status_get>
 8014136:	e796      	b.n	8014066 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 8014138:	ae14      	add	r6, sp, #80	@ 0x50
 801413a:	4972      	ldr	r1, [pc, #456]	@ (8014304 <dashboard+0x2d8>)
 801413c:	4630      	mov	r0, r6
 801413e:	f00f fd6b 	bl	8023c18 <mg_str_s>
 8014142:	2300      	movs	r3, #0
 8014144:	9300      	str	r3, [sp, #0]
 8014146:	e896 000c 	ldmia.w	r6, {r2, r3}
 801414a:	f104 0108 	add.w	r1, r4, #8
 801414e:	c903      	ldmia	r1, {r0, r1}
 8014150:	f00f ff84 	bl	802405c <mg_match>
 8014154:	b120      	cbz	r0, 8014160 <dashboard+0x134>
			handle_mqtt_conf(c, hm);
 8014156:	4621      	mov	r1, r4
 8014158:	4628      	mov	r0, r5
 801415a:	f7ff f855 	bl	8013208 <handle_mqtt_conf>
 801415e:	e782      	b.n	8014066 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 8014160:	ae16      	add	r6, sp, #88	@ 0x58
 8014162:	4969      	ldr	r1, [pc, #420]	@ (8014308 <dashboard+0x2dc>)
 8014164:	4630      	mov	r0, r6
 8014166:	f00f fd57 	bl	8023c18 <mg_str_s>
 801416a:	2300      	movs	r3, #0
 801416c:	9300      	str	r3, [sp, #0]
 801416e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014172:	f104 0108 	add.w	r1, r4, #8
 8014176:	c903      	ldmia	r1, {r0, r1}
 8014178:	f00f ff70 	bl	802405c <mg_match>
 801417c:	b120      	cbz	r0, 8014188 <dashboard+0x15c>
			handle_dev_status(c, hm);
 801417e:	4621      	mov	r1, r4
 8014180:	4628      	mov	r0, r5
 8014182:	f7ff f979 	bl	8013478 <handle_dev_status>
 8014186:	e76e      	b.n	8014066 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log"), NULL)){
 8014188:	ae18      	add	r6, sp, #96	@ 0x60
 801418a:	4960      	ldr	r1, [pc, #384]	@ (801430c <dashboard+0x2e0>)
 801418c:	4630      	mov	r0, r6
 801418e:	f00f fd43 	bl	8023c18 <mg_str_s>
 8014192:	2300      	movs	r3, #0
 8014194:	9300      	str	r3, [sp, #0]
 8014196:	e896 000c 	ldmia.w	r6, {r2, r3}
 801419a:	f104 0108 	add.w	r1, r4, #8
 801419e:	c903      	ldmia	r1, {r0, r1}
 80141a0:	f00f ff5c 	bl	802405c <mg_match>
 80141a4:	b128      	cbz	r0, 80141b2 <dashboard+0x186>
			handle_fs_get_log(c, hm, 0);
 80141a6:	2200      	movs	r2, #0
 80141a8:	4621      	mov	r1, r4
 80141aa:	4628      	mov	r0, r5
 80141ac:	f7ff faa2 	bl	80136f4 <handle_fs_get_log>
 80141b0:	e759      	b.n	8014066 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log_old"), NULL)){
 80141b2:	ae1a      	add	r6, sp, #104	@ 0x68
 80141b4:	4956      	ldr	r1, [pc, #344]	@ (8014310 <dashboard+0x2e4>)
 80141b6:	4630      	mov	r0, r6
 80141b8:	f00f fd2e 	bl	8023c18 <mg_str_s>
 80141bc:	2300      	movs	r3, #0
 80141be:	9300      	str	r3, [sp, #0]
 80141c0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80141c4:	68e1      	ldr	r1, [r4, #12]
 80141c6:	68a0      	ldr	r0, [r4, #8]
 80141c8:	f00f ff48 	bl	802405c <mg_match>
 80141cc:	b128      	cbz	r0, 80141da <dashboard+0x1ae>
			handle_fs_get_log(c, hm, 1);
 80141ce:	2201      	movs	r2, #1
 80141d0:	4621      	mov	r1, r4
 80141d2:	4628      	mov	r0, r5
 80141d4:	f7ff fa8e 	bl	80136f4 <handle_fs_get_log>
 80141d8:	e745      	b.n	8014066 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/user"), NULL)){
 80141da:	ae1c      	add	r6, sp, #112	@ 0x70
 80141dc:	494d      	ldr	r1, [pc, #308]	@ (8014314 <dashboard+0x2e8>)
 80141de:	4630      	mov	r0, r6
 80141e0:	f00f fd1a 	bl	8023c18 <mg_str_s>
 80141e4:	2300      	movs	r3, #0
 80141e6:	9300      	str	r3, [sp, #0]
 80141e8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80141ec:	68e1      	ldr	r1, [r4, #12]
 80141ee:	68a0      	ldr	r0, [r4, #8]
 80141f0:	f00f ff34 	bl	802405c <mg_match>
 80141f4:	b120      	cbz	r0, 8014200 <dashboard+0x1d4>
			handle_manage_user(c, hm);
 80141f6:	4621      	mov	r1, r4
 80141f8:	4628      	mov	r0, r5
 80141fa:	f7ff faf3 	bl	80137e4 <handle_manage_user>
 80141fe:	e732      	b.n	8014066 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 8014200:	ae1e      	add	r6, sp, #120	@ 0x78
 8014202:	4945      	ldr	r1, [pc, #276]	@ (8014318 <dashboard+0x2ec>)
 8014204:	4630      	mov	r0, r6
 8014206:	f00f fd07 	bl	8023c18 <mg_str_s>
 801420a:	2300      	movs	r3, #0
 801420c:	9300      	str	r3, [sp, #0]
 801420e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014212:	68e1      	ldr	r1, [r4, #12]
 8014214:	68a0      	ldr	r0, [r4, #8]
 8014216:	f00f ff21 	bl	802405c <mg_match>
 801421a:	b120      	cbz	r0, 8014226 <dashboard+0x1fa>
			handle_restart_mcu(c, hm);
 801421c:	4621      	mov	r1, r4
 801421e:	4628      	mov	r0, r5
 8014220:	f7ff fd44 	bl	8013cac <handle_restart_mcu>
 8014224:	e71f      	b.n	8014066 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 8014226:	ae20      	add	r6, sp, #128	@ 0x80
 8014228:	493c      	ldr	r1, [pc, #240]	@ (801431c <dashboard+0x2f0>)
 801422a:	4630      	mov	r0, r6
 801422c:	f00f fcf4 	bl	8023c18 <mg_str_s>
 8014230:	2300      	movs	r3, #0
 8014232:	9300      	str	r3, [sp, #0]
 8014234:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014238:	68e1      	ldr	r1, [r4, #12]
 801423a:	68a0      	ldr	r0, [r4, #8]
 801423c:	f00f ff0e 	bl	802405c <mg_match>
 8014240:	b120      	cbz	r0, 801424c <dashboard+0x220>
			handle_firmware_upload(c, hm);
 8014242:	4621      	mov	r1, r4
 8014244:	4628      	mov	r0, r5
 8014246:	f7ff fda7 	bl	8013d98 <handle_firmware_upload>
 801424a:	e70c      	b.n	8014066 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 801424c:	ae22      	add	r6, sp, #136	@ 0x88
 801424e:	4934      	ldr	r1, [pc, #208]	@ (8014320 <dashboard+0x2f4>)
 8014250:	4630      	mov	r0, r6
 8014252:	f00f fce1 	bl	8023c18 <mg_str_s>
 8014256:	2300      	movs	r3, #0
 8014258:	9300      	str	r3, [sp, #0]
 801425a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801425e:	68e1      	ldr	r1, [r4, #12]
 8014260:	68a0      	ldr	r0, [r4, #8]
 8014262:	f00f fefb 	bl	802405c <mg_match>
 8014266:	b120      	cbz	r0, 8014272 <dashboard+0x246>
			handle_firmware_md5(c, hm);
 8014268:	4621      	mov	r1, r4
 801426a:	4628      	mov	r0, r5
 801426c:	f7ff fe9a 	bl	8013fa4 <handle_firmware_md5>
 8014270:	e6f9      	b.n	8014066 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/activate_and_reboot"), NULL)){
 8014272:	ae24      	add	r6, sp, #144	@ 0x90
 8014274:	492b      	ldr	r1, [pc, #172]	@ (8014324 <dashboard+0x2f8>)
 8014276:	4630      	mov	r0, r6
 8014278:	f00f fcce 	bl	8023c18 <mg_str_s>
 801427c:	2300      	movs	r3, #0
 801427e:	9300      	str	r3, [sp, #0]
 8014280:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014284:	68e1      	ldr	r1, [r4, #12]
 8014286:	68a0      	ldr	r0, [r4, #8]
 8014288:	f00f fee8 	bl	802405c <mg_match>
 801428c:	b120      	cbz	r0, 8014298 <dashboard+0x26c>
			handle_activete_and_reboot(c, hm);
 801428e:	4621      	mov	r1, r4
 8014290:	4628      	mov	r0, r5
 8014292:	f7ff fd45 	bl	8013d20 <handle_activete_and_reboot>
 8014296:	e6e6      	b.n	8014066 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 8014298:	ae26      	add	r6, sp, #152	@ 0x98
 801429a:	4923      	ldr	r1, [pc, #140]	@ (8014328 <dashboard+0x2fc>)
 801429c:	4630      	mov	r0, r6
 801429e:	f00f fcbb 	bl	8023c18 <mg_str_s>
 80142a2:	2300      	movs	r3, #0
 80142a4:	9300      	str	r3, [sp, #0]
 80142a6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80142aa:	68e1      	ldr	r1, [r4, #12]
 80142ac:	68a0      	ldr	r0, [r4, #8]
 80142ae:	f00f fed5 	bl	802405c <mg_match>
 80142b2:	b120      	cbz	r0, 80142be <dashboard+0x292>
			handle_firmware_deactivate(c, hm);
 80142b4:	4621      	mov	r1, r4
 80142b6:	4628      	mov	r0, r5
 80142b8:	f7fe fcb4 	bl	8012c24 <handle_firmware_deactivate>
 80142bc:	e6d3      	b.n	8014066 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 80142be:	ae28      	add	r6, sp, #160	@ 0xa0
 80142c0:	491a      	ldr	r1, [pc, #104]	@ (801432c <dashboard+0x300>)
 80142c2:	4630      	mov	r0, r6
 80142c4:	f00f fca8 	bl	8023c18 <mg_str_s>
 80142c8:	2300      	movs	r3, #0
 80142ca:	9300      	str	r3, [sp, #0]
 80142cc:	e896 000c 	ldmia.w	r6, {r2, r3}
 80142d0:	68e1      	ldr	r1, [r4, #12]
 80142d2:	68a0      	ldr	r0, [r4, #8]
 80142d4:	f00f fec2 	bl	802405c <mg_match>
 80142d8:	b350      	cbz	r0, 8014330 <dashboard+0x304>
			 handle_web_files_remove(c, hm);
 80142da:	4621      	mov	r1, r4
 80142dc:	4628      	mov	r0, r5
 80142de:	f7fe fcdd 	bl	8012c9c <handle_web_files_remove>
 80142e2:	e6c0      	b.n	8014066 <dashboard+0x3a>
 80142e4:	08036e40 	.word	0x08036e40
 80142e8:	08036e48 	.word	0x08036e48
 80142ec:	08036e60 	.word	0x08036e60
 80142f0:	08036e50 	.word	0x08036e50
 80142f4:	08036364 	.word	0x08036364
 80142f8:	08036e6c 	.word	0x08036e6c
 80142fc:	08036e78 	.word	0x08036e78
 8014300:	08036e88 	.word	0x08036e88
 8014304:	08036e98 	.word	0x08036e98
 8014308:	08036eac 	.word	0x08036eac
 801430c:	08036ec0 	.word	0x08036ec0
 8014310:	08036ed0 	.word	0x08036ed0
 8014314:	08036ee4 	.word	0x08036ee4
 8014318:	08036ef8 	.word	0x08036ef8
 801431c:	08036f0c 	.word	0x08036f0c
 8014320:	08036f24 	.word	0x08036f24
 8014324:	08036f38 	.word	0x08036f38
 8014328:	08036f5c 	.word	0x08036f5c
 801432c:	08036f78 	.word	0x08036f78
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 8014330:	ae2a      	add	r6, sp, #168	@ 0xa8
 8014332:	491d      	ldr	r1, [pc, #116]	@ (80143a8 <dashboard+0x37c>)
 8014334:	4630      	mov	r0, r6
 8014336:	f00f fc6f 	bl	8023c18 <mg_str_s>
 801433a:	2300      	movs	r3, #0
 801433c:	9300      	str	r3, [sp, #0]
 801433e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014342:	68e1      	ldr	r1, [r4, #12]
 8014344:	68a0      	ldr	r0, [r4, #8]
 8014346:	f00f fe89 	bl	802405c <mg_match>
 801434a:	b140      	cbz	r0, 801435e <dashboard+0x332>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 801434c:	4b17      	ldr	r3, [pc, #92]	@ (80143ac <dashboard+0x380>)
 801434e:	9300      	str	r3, [sp, #0]
 8014350:	4b17      	ldr	r3, [pc, #92]	@ (80143b0 <dashboard+0x384>)
 8014352:	4a18      	ldr	r2, [pc, #96]	@ (80143b4 <dashboard+0x388>)
 8014354:	4621      	mov	r1, r4
 8014356:	4628      	mov	r0, r5
 8014358:	f012 f8d6 	bl	8026508 <mg_http_upload>
 801435c:	e683      	b.n	8014066 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 801435e:	ae2c      	add	r6, sp, #176	@ 0xb0
 8014360:	4915      	ldr	r1, [pc, #84]	@ (80143b8 <dashboard+0x38c>)
 8014362:	4630      	mov	r0, r6
 8014364:	f00f fc58 	bl	8023c18 <mg_str_s>
 8014368:	2300      	movs	r3, #0
 801436a:	9300      	str	r3, [sp, #0]
 801436c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014370:	68e1      	ldr	r1, [r4, #12]
 8014372:	68a0      	ldr	r0, [r4, #8]
 8014374:	f00f fe72 	bl	802405c <mg_match>
 8014378:	b120      	cbz	r0, 8014384 <dashboard+0x358>
			 handle_fs_mkdir(c, hm);
 801437a:	4621      	mov	r1, r4
 801437c:	4628      	mov	r0, r5
 801437e:	f7ff fd57 	bl	8013e30 <handle_fs_mkdir>
 8014382:	e670      	b.n	8014066 <dashboard+0x3a>
			struct mg_http_serve_opts opts = {
 8014384:	2300      	movs	r3, #0
 8014386:	9302      	str	r3, [sp, #8]
 8014388:	9303      	str	r3, [sp, #12]
 801438a:	9304      	str	r3, [sp, #16]
 801438c:	9305      	str	r3, [sp, #20]
 801438e:	9306      	str	r3, [sp, #24]
 8014390:	9307      	str	r3, [sp, #28]
 8014392:	4b07      	ldr	r3, [pc, #28]	@ (80143b0 <dashboard+0x384>)
 8014394:	9302      	str	r3, [sp, #8]
 8014396:	4b07      	ldr	r3, [pc, #28]	@ (80143b4 <dashboard+0x388>)
 8014398:	9307      	str	r3, [sp, #28]
			mg_http_serve_dir(c, ev_data, &opts);
 801439a:	aa02      	add	r2, sp, #8
 801439c:	4621      	mov	r1, r4
 801439e:	4628      	mov	r0, r5
 80143a0:	f011 ffcc 	bl	802633c <mg_http_serve_dir>
}
 80143a4:	e65f      	b.n	8014066 <dashboard+0x3a>
 80143a6:	bf00      	nop
 80143a8:	08036f94 	.word	0x08036f94
 80143ac:	0016e360 	.word	0x0016e360
 80143b0:	08035878 	.word	0x08035878
 80143b4:	200000a0 	.word	0x200000a0
 80143b8:	08036fb0 	.word	0x08036fb0

080143bc <dash_hdl>:

void * dash_hdl (void){
 80143bc:	b508      	push	{r3, lr}

	load_users(user_cred_file, web_users, user_list_size);
 80143be:	220a      	movs	r2, #10
 80143c0:	4902      	ldr	r1, [pc, #8]	@ (80143cc <dash_hdl+0x10>)
 80143c2:	4803      	ldr	r0, [pc, #12]	@ (80143d0 <dash_hdl+0x14>)
 80143c4:	f7ff fc56 	bl	8013c74 <load_users>

	return &dashboard;
}
 80143c8:	4802      	ldr	r0, [pc, #8]	@ (80143d4 <dash_hdl+0x18>)
 80143ca:	bd08      	pop	{r3, pc}
 80143cc:	200021a0 	.word	0x200021a0
 80143d0:	080358d4 	.word	0x080358d4
 80143d4:	0801402d 	.word	0x0801402d

080143d8 <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
    r_w_parameter = func;
 80143d8:	4b01      	ldr	r3, [pc, #4]	@ (80143e0 <reg_parameter_handler+0x8>)
 80143da:	6018      	str	r0, [r3, #0]
}
 80143dc:	4770      	bx	lr
 80143de:	bf00      	nop
 80143e0:	2000283c 	.word	0x2000283c

080143e4 <_ZL18mqtt_timer_handlerPv>:
	}
}

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
	if (!mqtt_conn){
 80143e4:	4b1a      	ldr	r3, [pc, #104]	@ (8014450 <_ZL18mqtt_timer_handlerPv+0x6c>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	b103      	cbz	r3, 80143ec <_ZL18mqtt_timer_handlerPv+0x8>
 80143ea:	4770      	bx	lr
static void mqtt_timer_handler(void *arg){
 80143ec:	b530      	push	{r4, r5, lr}
 80143ee:	b085      	sub	sp, #20
		logging(L_INFO, "Try to connect to MQTT server");
 80143f0:	4918      	ldr	r1, [pc, #96]	@ (8014454 <_ZL18mqtt_timer_handlerPv+0x70>)
 80143f2:	2001      	movs	r0, #1
 80143f4:	f7fd fd56 	bl	8011ea4 <logging>
		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 80143f8:	4c17      	ldr	r4, [pc, #92]	@ (8014458 <_ZL18mqtt_timer_handlerPv+0x74>)
 80143fa:	2240      	movs	r2, #64	@ 0x40
 80143fc:	2100      	movs	r1, #0
 80143fe:	4620      	mov	r0, r4
 8014400:	f017 ff3e 	bl	802c280 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 8014404:	ad02      	add	r5, sp, #8
 8014406:	4b15      	ldr	r3, [pc, #84]	@ (801445c <_ZL18mqtt_timer_handlerPv+0x78>)
 8014408:	6819      	ldr	r1, [r3, #0]
 801440a:	4628      	mov	r0, r5
 801440c:	f00f fc04 	bl	8023c18 <mg_str_s>
 8014410:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014414:	e884 0003 	stmia.w	r4, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 8014418:	4b11      	ldr	r3, [pc, #68]	@ (8014460 <_ZL18mqtt_timer_handlerPv+0x7c>)
 801441a:	6819      	ldr	r1, [r3, #0]
 801441c:	4628      	mov	r0, r5
 801441e:	f00f fbfb 	bl	8023c18 <mg_str_s>
 8014422:	f104 0308 	add.w	r3, r4, #8
 8014426:	e895 0003 	ldmia.w	r5, {r0, r1}
 801442a:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 801442e:	233c      	movs	r3, #60	@ 0x3c
 8014430:	8563      	strh	r3, [r4, #42]	@ 0x2a
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 8014432:	2300      	movs	r3, #0
 8014434:	9300      	str	r3, [sp, #0]
 8014436:	4b0b      	ldr	r3, [pc, #44]	@ (8014464 <_ZL18mqtt_timer_handlerPv+0x80>)
 8014438:	4622      	mov	r2, r4
 801443a:	490b      	ldr	r1, [pc, #44]	@ (8014468 <_ZL18mqtt_timer_handlerPv+0x84>)
 801443c:	6809      	ldr	r1, [r1, #0]
 801443e:	480b      	ldr	r0, [pc, #44]	@ (801446c <_ZL18mqtt_timer_handlerPv+0x88>)
 8014440:	6800      	ldr	r0, [r0, #0]
 8014442:	f014 f921 	bl	8028688 <mg_mqtt_connect>
 8014446:	4b02      	ldr	r3, [pc, #8]	@ (8014450 <_ZL18mqtt_timer_handlerPv+0x6c>)
 8014448:	6018      	str	r0, [r3, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 801444a:	b005      	add	sp, #20
 801444c:	bd30      	pop	{r4, r5, pc}
 801444e:	bf00      	nop
 8014450:	20002860 	.word	0x20002860
 8014454:	08036fcc 	.word	0x08036fcc
 8014458:	20002864 	.word	0x20002864
 801445c:	200028b8 	.word	0x200028b8
 8014460:	200028b4 	.word	0x200028b4
 8014464:	080149c1 	.word	0x080149c1
 8014468:	200028bc 	.word	0x200028bc
 801446c:	200028a8 	.word	0x200028a8

08014470 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 8014470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014474:	b085      	sub	sp, #20
 8014476:	4681      	mov	r9, r0
 8014478:	4688      	mov	r8, r1
 801447a:	4692      	mov	sl, r2
	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 801447c:	4c2a      	ldr	r4, [pc, #168]	@ (8014528 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xb8>)
 801447e:	f100 0308 	add.w	r3, r0, #8
 8014482:	9300      	str	r3, [sp, #0]
 8014484:	4b29      	ldr	r3, [pc, #164]	@ (801452c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xbc>)
 8014486:	4a2a      	ldr	r2, [pc, #168]	@ (8014530 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc0>)
 8014488:	2128      	movs	r1, #40	@ 0x28
 801448a:	6820      	ldr	r0, [r4, #0]
 801448c:	f00e fd3a 	bl	8022f04 <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 8014490:	6824      	ldr	r4, [r4, #0]
 8014492:	4620      	mov	r0, r4
 8014494:	f7fb ff04 	bl	80102a0 <strlen>
 8014498:	4601      	mov	r1, r0
 801449a:	4620      	mov	r0, r4
 801449c:	f000 fbe0 	bl	8014c60 <set_device_conf_ip>
	for (size_t i = 0; i < sensor_count; i++) {
 80144a0:	2600      	movs	r6, #0
 80144a2:	e03b      	b.n	801451c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xac>
	        int sensor_type = sensors[i].sensor_type;
 80144a4:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 80144a8:	f818 4036 	ldrb.w	r4, [r8, r6, lsl #3]
 80144ac:	791d      	ldrb	r5, [r3, #4]
 80144ae:	4f21      	ldr	r7, [pc, #132]	@ (8014534 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc4>)
 80144b0:	462b      	mov	r3, r5
 80144b2:	4622      	mov	r2, r4
 80144b4:	2180      	movs	r1, #128	@ 0x80
 80144b6:	6838      	ldr	r0, [r7, #0]
 80144b8:	f000 fbf0 	bl	8014c9c <get_config_topik_string>
			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 80144bc:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8014540 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xd0>
 80144c0:	462b      	mov	r3, r5
 80144c2:	4622      	mov	r2, r4
 80144c4:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80144c8:	f8db 0000 	ldr.w	r0, [fp]
 80144cc:	f000 fc96 	bl	8014dfc <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 80144d0:	4d19      	ldr	r5, [pc, #100]	@ (8014538 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc8>)
 80144d2:	ac02      	add	r4, sp, #8
 80144d4:	6839      	ldr	r1, [r7, #0]
 80144d6:	4620      	mov	r0, r4
 80144d8:	f00f fb9e 	bl	8023c18 <mg_str_s>
 80144dc:	f105 0318 	add.w	r3, r5, #24
 80144e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80144e4:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 80144e8:	f8db 1000 	ldr.w	r1, [fp]
 80144ec:	4620      	mov	r0, r4
 80144ee:	f00f fb93 	bl	8023c18 <mg_str_s>
 80144f2:	f105 0320 	add.w	r3, r5, #32
 80144f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80144fa:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 80144fe:	2401      	movs	r4, #1
 8014500:	f885 4028 	strb.w	r4, [r5, #40]	@ 0x28
			mqtt_opts.retain = 1;
 8014504:	f885 402e 	strb.w	r4, [r5, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014508:	4629      	mov	r1, r5
 801450a:	4648      	mov	r0, r9
 801450c:	f012 fe22 	bl	8027154 <mg_mqtt_pub>
			logging(L_INFO, "Sending registration data to: %s", topik_buff);
 8014510:	683a      	ldr	r2, [r7, #0]
 8014512:	490a      	ldr	r1, [pc, #40]	@ (801453c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xcc>)
 8014514:	4620      	mov	r0, r4
 8014516:	f7fd fcc5 	bl	8011ea4 <logging>
	for (size_t i = 0; i < sensor_count; i++) {
 801451a:	4426      	add	r6, r4
 801451c:	4556      	cmp	r6, sl
 801451e:	d3c1      	bcc.n	80144a4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x34>
}
 8014520:	b005      	add	sp, #20
 8014522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014526:	bf00      	nop
 8014528:	2000285c 	.word	0x2000285c
 801452c:	08025999 	.word	0x08025999
 8014530:	08036748 	.word	0x08036748
 8014534:	200028b0 	.word	0x200028b0
 8014538:	20002864 	.word	0x20002864
 801453c:	08036fec 	.word	0x08036fec
 8014540:	200028ac 	.word	0x200028ac

08014544 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:
static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 8014544:	b570      	push	{r4, r5, r6, lr}
 8014546:	b084      	sub	sp, #16
	int relay_number = 0;  // Переменная для хранения номера реле
 8014548:	2300      	movs	r3, #0
 801454a:	9301      	str	r3, [sp, #4]
    const char *topic = mess->topic.buf;
 801454c:	6805      	ldr	r5, [r0, #0]
    const char *message = mess->data.buf;
 801454e:	6886      	ldr	r6, [r0, #8]
    if(message == NULL || topic == NULL){
 8014550:	b326      	cbz	r6, 801459c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x58>
 8014552:	4604      	mov	r4, r0
 8014554:	b315      	cbz	r5, 801459c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x58>
    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8014556:	4b71      	ldr	r3, [pc, #452]	@ (801471c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	2200      	movs	r2, #0
 801455c:	2102      	movs	r1, #2
 801455e:	a803      	add	r0, sp, #12
 8014560:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 8014562:	9b03      	ldr	r3, [sp, #12]
 8014564:	f8ad 3008 	strh.w	r3, [sp, #8]
 8014568:	0c1b      	lsrs	r3, r3, #16
 801456a:	f88d 300a 	strb.w	r3, [sp, #10]
    const char *switch_position = strstr(topic, "switch");
 801456e:	496c      	ldr	r1, [pc, #432]	@ (8014720 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1dc>)
 8014570:	4628      	mov	r0, r5
 8014572:	f017 ff05 	bl	802c380 <strstr>
    if (switch_position != NULL) {
 8014576:	2800      	cmp	r0, #0
 8014578:	f000 80ba 	beq.w	80146f0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ac>
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 801457c:	aa01      	add	r2, sp, #4
 801457e:	4969      	ldr	r1, [pc, #420]	@ (8014724 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e0>)
 8014580:	f017 fadc 	bl	802bb3c <sscanf>
 8014584:	2801      	cmp	r0, #1
 8014586:	d018      	beq.n	80145ba <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x76>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 8014588:	4b67      	ldr	r3, [pc, #412]	@ (8014728 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	2b00      	cmp	r3, #0
 801458e:	f300 80a5 	bgt.w	80146dc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x198>
			logging(L_ERR, "Error: relay number is not found, or incorrect format.");
 8014592:	4966      	ldr	r1, [pc, #408]	@ (801472c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e8>)
 8014594:	2003      	movs	r0, #3
 8014596:	f7fd fc85 	bl	8011ea4 <logging>
 801459a:	e0b2      	b.n	8014702 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 801459c:	4b62      	ldr	r3, [pc, #392]	@ (8014728 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	f340 80ae 	ble.w	8014702 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
 80145a6:	4b62      	ldr	r3, [pc, #392]	@ (8014730 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 80145a8:	2292      	movs	r2, #146	@ 0x92
 80145aa:	4962      	ldr	r1, [pc, #392]	@ (8014734 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 80145ac:	2001      	movs	r0, #1
 80145ae:	f011 fa6b 	bl	8025a88 <mg_log_prefix>
 80145b2:	4861      	ldr	r0, [pc, #388]	@ (8014738 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f4>)
 80145b4:	f00f f952 	bl	802385c <mg_log>
    	return;
 80145b8:	e0a3      	b.n	8014702 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 80145ba:	4b5b      	ldr	r3, [pc, #364]	@ (8014728 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	2b01      	cmp	r3, #1
 80145c0:	dc18      	bgt.n	80145f4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xb0>
    		logging(L_INFO, "Getting relay number %d, from topik %s.", relay_number, topic);
 80145c2:	462b      	mov	r3, r5
 80145c4:	9a01      	ldr	r2, [sp, #4]
 80145c6:	495d      	ldr	r1, [pc, #372]	@ (801473c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f8>)
 80145c8:	2001      	movs	r0, #1
 80145ca:	f7fd fc6b 	bl	8011ea4 <logging>
    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 80145ce:	9d01      	ldr	r5, [sp, #4]
 80145d0:	1e6b      	subs	r3, r5, #1
 80145d2:	2b02      	cmp	r3, #2
 80145d4:	d81a      	bhi.n	801460c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xc8>
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 80145d6:	68e4      	ldr	r4, [r4, #12]
 80145d8:	2c02      	cmp	r4, #2
 80145da:	d02e      	beq.n	801463a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xf6>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 80145dc:	2c03      	cmp	r4, #3
 80145de:	d04f      	beq.n	8014680 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x13c>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 80145e0:	4b51      	ldr	r3, [pc, #324]	@ (8014728 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	dc6e      	bgt.n	80146c6 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x182>
				logging(L_ERR, "Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message);
 80145e8:	4632      	mov	r2, r6
 80145ea:	4955      	ldr	r1, [pc, #340]	@ (8014740 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 80145ec:	2003      	movs	r0, #3
 80145ee:	f7fd fc59 	bl	8011ea4 <logging>
 80145f2:	e086      	b.n	8014702 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 80145f4:	4b4e      	ldr	r3, [pc, #312]	@ (8014730 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 80145f6:	229f      	movs	r2, #159	@ 0x9f
 80145f8:	494e      	ldr	r1, [pc, #312]	@ (8014734 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 80145fa:	2002      	movs	r0, #2
 80145fc:	f011 fa44 	bl	8025a88 <mg_log_prefix>
 8014600:	462a      	mov	r2, r5
 8014602:	9901      	ldr	r1, [sp, #4]
 8014604:	484f      	ldr	r0, [pc, #316]	@ (8014744 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x200>)
 8014606:	f00f f929 	bl	802385c <mg_log>
 801460a:	e7da      	b.n	80145c2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x7e>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 801460c:	4b46      	ldr	r3, [pc, #280]	@ (8014728 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	2b00      	cmp	r3, #0
 8014612:	dc06      	bgt.n	8014622 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xde>
    			logging(L_ERR, "Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number);
 8014614:	9b01      	ldr	r3, [sp, #4]
 8014616:	2203      	movs	r2, #3
 8014618:	494b      	ldr	r1, [pc, #300]	@ (8014748 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x204>)
 801461a:	4610      	mov	r0, r2
 801461c:	f7fd fc42 	bl	8011ea4 <logging>
    			return;
 8014620:	e06f      	b.n	8014702 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8014622:	4b43      	ldr	r3, [pc, #268]	@ (8014730 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014624:	22a4      	movs	r2, #164	@ 0xa4
 8014626:	4943      	ldr	r1, [pc, #268]	@ (8014734 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014628:	2001      	movs	r0, #1
 801462a:	f011 fa2d 	bl	8025a88 <mg_log_prefix>
 801462e:	9a01      	ldr	r2, [sp, #4]
 8014630:	2103      	movs	r1, #3
 8014632:	4845      	ldr	r0, [pc, #276]	@ (8014748 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x204>)
 8014634:	f00f f912 	bl	802385c <mg_log>
 8014638:	e7ec      	b.n	8014614 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xd0>
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 801463a:	2202      	movs	r2, #2
 801463c:	4943      	ldr	r1, [pc, #268]	@ (801474c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x208>)
 801463e:	4630      	mov	r0, r6
 8014640:	f017 fe53 	bl	802c2ea <strncmp>
 8014644:	2800      	cmp	r0, #0
 8014646:	d1c9      	bne.n	80145dc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x98>
				sw_w[relay_number-1] = 1;
 8014648:	f105 030f 	add.w	r3, r5, #15
 801464c:	446b      	add	r3, sp
 801464e:	2201      	movs	r2, #1
 8014650:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 8014654:	4b34      	ldr	r3, [pc, #208]	@ (8014728 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	4293      	cmp	r3, r2
 801465a:	dc06      	bgt.n	801466a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x126>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 801465c:	4b2f      	ldr	r3, [pc, #188]	@ (801471c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	2201      	movs	r2, #1
 8014662:	2102      	movs	r1, #2
 8014664:	a802      	add	r0, sp, #8
 8014666:	4798      	blx	r3
 8014668:	e04b      	b.n	8014702 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
				MG_INFO(("Relay %d is ON.\n", relay_number));
 801466a:	4b31      	ldr	r3, [pc, #196]	@ (8014730 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 801466c:	22ae      	movs	r2, #174	@ 0xae
 801466e:	4931      	ldr	r1, [pc, #196]	@ (8014734 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014670:	2002      	movs	r0, #2
 8014672:	f011 fa09 	bl	8025a88 <mg_log_prefix>
 8014676:	9901      	ldr	r1, [sp, #4]
 8014678:	4835      	ldr	r0, [pc, #212]	@ (8014750 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x20c>)
 801467a:	f00f f8ef 	bl	802385c <mg_log>
 801467e:	e7ed      	b.n	801465c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x118>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 8014680:	2203      	movs	r2, #3
 8014682:	4934      	ldr	r1, [pc, #208]	@ (8014754 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x210>)
 8014684:	4630      	mov	r0, r6
 8014686:	f017 fe30 	bl	802c2ea <strncmp>
 801468a:	2800      	cmp	r0, #0
 801468c:	d1a8      	bne.n	80145e0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x9c>
				sw_w[relay_number-1] = 0;
 801468e:	f105 030f 	add.w	r3, r5, #15
 8014692:	446b      	add	r3, sp
 8014694:	2200      	movs	r2, #0
 8014696:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 801469a:	4b23      	ldr	r3, [pc, #140]	@ (8014728 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	2b01      	cmp	r3, #1
 80146a0:	dc06      	bgt.n	80146b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x16c>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 80146a2:	4b1e      	ldr	r3, [pc, #120]	@ (801471c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	2201      	movs	r2, #1
 80146a8:	2102      	movs	r1, #2
 80146aa:	a802      	add	r0, sp, #8
 80146ac:	4798      	blx	r3
 80146ae:	e028      	b.n	8014702 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 80146b0:	4b1f      	ldr	r3, [pc, #124]	@ (8014730 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 80146b2:	22b2      	movs	r2, #178	@ 0xb2
 80146b4:	491f      	ldr	r1, [pc, #124]	@ (8014734 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 80146b6:	2002      	movs	r0, #2
 80146b8:	f011 f9e6 	bl	8025a88 <mg_log_prefix>
 80146bc:	9901      	ldr	r1, [sp, #4]
 80146be:	4826      	ldr	r0, [pc, #152]	@ (8014758 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x214>)
 80146c0:	f00f f8cc 	bl	802385c <mg_log>
 80146c4:	e7ed      	b.n	80146a2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x15e>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 80146c6:	4b1a      	ldr	r3, [pc, #104]	@ (8014730 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 80146c8:	22b6      	movs	r2, #182	@ 0xb6
 80146ca:	491a      	ldr	r1, [pc, #104]	@ (8014734 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 80146cc:	2001      	movs	r0, #1
 80146ce:	f011 f9db 	bl	8025a88 <mg_log_prefix>
 80146d2:	4631      	mov	r1, r6
 80146d4:	481a      	ldr	r0, [pc, #104]	@ (8014740 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 80146d6:	f00f f8c1 	bl	802385c <mg_log>
 80146da:	e785      	b.n	80145e8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xa4>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 80146dc:	4b14      	ldr	r3, [pc, #80]	@ (8014730 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 80146de:	22bb      	movs	r2, #187	@ 0xbb
 80146e0:	4914      	ldr	r1, [pc, #80]	@ (8014734 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 80146e2:	2001      	movs	r0, #1
 80146e4:	f011 f9d0 	bl	8025a88 <mg_log_prefix>
 80146e8:	481c      	ldr	r0, [pc, #112]	@ (801475c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>)
 80146ea:	f00f f8b7 	bl	802385c <mg_log>
 80146ee:	e750      	b.n	8014592 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x4e>
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 80146f0:	4b0d      	ldr	r3, [pc, #52]	@ (8014728 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	dc06      	bgt.n	8014706 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1c2>
    	logging(L_ERR, "Substring \"switch\" is not fount in topik %s. \n", topic);
 80146f8:	462a      	mov	r2, r5
 80146fa:	4919      	ldr	r1, [pc, #100]	@ (8014760 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21c>)
 80146fc:	2003      	movs	r0, #3
 80146fe:	f7fd fbd1 	bl	8011ea4 <logging>
}
 8014702:	b004      	add	sp, #16
 8014704:	bd70      	pop	{r4, r5, r6, pc}
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 8014706:	4b0a      	ldr	r3, [pc, #40]	@ (8014730 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014708:	22bf      	movs	r2, #191	@ 0xbf
 801470a:	490a      	ldr	r1, [pc, #40]	@ (8014734 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 801470c:	2001      	movs	r0, #1
 801470e:	f011 f9bb 	bl	8025a88 <mg_log_prefix>
 8014712:	4629      	mov	r1, r5
 8014714:	4812      	ldr	r0, [pc, #72]	@ (8014760 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21c>)
 8014716:	f00f f8a1 	bl	802385c <mg_log>
 801471a:	e7ed      	b.n	80146f8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1b4>
 801471c:	20002848 	.word	0x20002848
 8014720:	08037080 	.word	0x08037080
 8014724:	08037088 	.word	0x08037088
 8014728:	2000012c 	.word	0x2000012c
 801472c:	080371dc 	.word	0x080371dc
 8014730:	08037010 	.word	0x08037010
 8014734:	08037030 	.word	0x08037030
 8014738:	0803705c 	.word	0x0803705c
 801473c:	080370c0 	.word	0x080370c0
 8014740:	08037168 	.word	0x08037168
 8014744:	08037094 	.word	0x08037094
 8014748:	080370e8 	.word	0x080370e8
 801474c:	08037138 	.word	0x08037138
 8014750:	0803713c 	.word	0x0803713c
 8014754:	08037150 	.word	0x08037150
 8014758:	08037154 	.word	0x08037154
 801475c:	080371a4 	.word	0x080371a4
 8014760:	08037214 	.word	0x08037214

08014764 <_ZL9my_callocjj>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 8014764:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8014766:	fb01 f400 	mul.w	r4, r1, r0
 801476a:	4620      	mov	r0, r4
 801476c:	f005 fdfc 	bl	801a368 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8014770:	4605      	mov	r5, r0
 8014772:	b118      	cbz	r0, 801477c <_ZL9my_callocjj+0x18>
 8014774:	4622      	mov	r2, r4
 8014776:	2100      	movs	r1, #0
 8014778:	f017 fd82 	bl	802c280 <memset>
  return p;
}
 801477c:	4628      	mov	r0, r5
 801477e:	bd38      	pop	{r3, r4, r5, pc}

08014780 <_ZL19mqtt_send_io_statusP13mg_connectionb>:
static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 8014780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014784:	b087      	sub	sp, #28
 8014786:	4607      	mov	r7, r0
 8014788:	460c      	mov	r4, r1
	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 801478a:	4d58      	ldr	r5, [pc, #352]	@ (80148ec <_ZL19mqtt_send_io_statusP13mg_connectionb+0x16c>)
 801478c:	682b      	ldr	r3, [r5, #0]
 801478e:	2200      	movs	r2, #0
 8014790:	2101      	movs	r1, #1
 8014792:	a804      	add	r0, sp, #16
 8014794:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8014796:	682b      	ldr	r3, [r5, #0]
 8014798:	2200      	movs	r2, #0
 801479a:	2102      	movs	r1, #2
 801479c:	f10d 0013 	add.w	r0, sp, #19
 80147a0:	4798      	blx	r3
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 80147a2:	2203      	movs	r2, #3
 80147a4:	4952      	ldr	r1, [pc, #328]	@ (80148f0 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 80147a6:	a804      	add	r0, sp, #16
 80147a8:	f017 fcd6 	bl	802c158 <memcmp>
 80147ac:	b948      	cbnz	r0, 80147c2 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 80147ae:	2203      	movs	r2, #3
 80147b0:	4950      	ldr	r1, [pc, #320]	@ (80148f4 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x174>)
 80147b2:	f10d 0013 	add.w	r0, sp, #19
 80147b6:	f017 fccf 	bl	802c158 <memcmp>
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 80147ba:	b910      	cbnz	r0, 80147c2 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 80147bc:	2c00      	cmp	r4, #0
 80147be:	f000 8091 	beq.w	80148e4 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x164>
		memcpy(&prev_status, &status, sizeof(status));
 80147c2:	4b4b      	ldr	r3, [pc, #300]	@ (80148f0 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 80147c4:	aa06      	add	r2, sp, #24
 80147c6:	e912 0003 	ldmdb	r2, {r0, r1}
 80147ca:	6018      	str	r0, [r3, #0]
 80147cc:	8099      	strh	r1, [r3, #4]
		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 80147ce:	2101      	movs	r1, #1
 80147d0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80147d4:	f7ff ffc6 	bl	8014764 <_ZL9my_callocjj>
 80147d8:	4606      	mov	r6, r0
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 80147da:	2101      	movs	r1, #1
 80147dc:	2080      	movs	r0, #128	@ 0x80
 80147de:	f7ff ffc1 	bl	8014764 <_ZL9my_callocjj>
 80147e2:	4605      	mov	r5, r0
		for (i = 0; i < INPUTS_COUNT; i++){
 80147e4:	2200      	movs	r2, #0
 80147e6:	e038      	b.n	801485a <_ZL19mqtt_send_io_statusP13mg_connectionb+0xda>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 80147e8:	f102 0801 	add.w	r8, r2, #1
 80147ec:	fa5f f888 	uxtb.w	r8, r8
 80147f0:	f102 0318 	add.w	r3, r2, #24
 80147f4:	eb0d 0203 	add.w	r2, sp, r3
 80147f8:	f812 3c08 	ldrb.w	r3, [r2, #-8]
 80147fc:	9300      	str	r3, [sp, #0]
 80147fe:	4643      	mov	r3, r8
 8014800:	2201      	movs	r2, #1
 8014802:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014806:	4630      	mov	r0, r6
 8014808:	f000 fcec 	bl	80151e4 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 801480c:	4643      	mov	r3, r8
 801480e:	2201      	movs	r2, #1
 8014810:	2180      	movs	r1, #128	@ 0x80
 8014812:	4628      	mov	r0, r5
 8014814:	f000 fd26 	bl	8015264 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8014818:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 80148f8 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 801481c:	ac02      	add	r4, sp, #8
 801481e:	4629      	mov	r1, r5
 8014820:	4620      	mov	r0, r4
 8014822:	f00f f9f9 	bl	8023c18 <mg_str_s>
 8014826:	f109 0318 	add.w	r3, r9, #24
 801482a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801482e:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8014832:	4631      	mov	r1, r6
 8014834:	4620      	mov	r0, r4
 8014836:	f00f f9ef 	bl	8023c18 <mg_str_s>
 801483a:	f109 0320 	add.w	r3, r9, #32
 801483e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014842:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8014846:	2300      	movs	r3, #0
 8014848:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 801484c:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014850:	4649      	mov	r1, r9
 8014852:	4638      	mov	r0, r7
 8014854:	f012 fc7e 	bl	8027154 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 8014858:	4642      	mov	r2, r8
 801485a:	2a02      	cmp	r2, #2
 801485c:	d9c4      	bls.n	80147e8 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x68>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 801485e:	2200      	movs	r2, #0
 8014860:	e038      	b.n	80148d4 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x154>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 8014862:	f102 0801 	add.w	r8, r2, #1
 8014866:	fa5f f888 	uxtb.w	r8, r8
 801486a:	f102 0318 	add.w	r3, r2, #24
 801486e:	eb0d 0203 	add.w	r2, sp, r3
 8014872:	f812 3c05 	ldrb.w	r3, [r2, #-5]
 8014876:	9300      	str	r3, [sp, #0]
 8014878:	4643      	mov	r3, r8
 801487a:	2202      	movs	r2, #2
 801487c:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014880:	4630      	mov	r0, r6
 8014882:	f000 fcaf 	bl	80151e4 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 8014886:	4643      	mov	r3, r8
 8014888:	2202      	movs	r2, #2
 801488a:	2180      	movs	r1, #128	@ 0x80
 801488c:	4628      	mov	r0, r5
 801488e:	f000 fce9 	bl	8015264 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8014892:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 80148f8 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 8014896:	ac02      	add	r4, sp, #8
 8014898:	4629      	mov	r1, r5
 801489a:	4620      	mov	r0, r4
 801489c:	f00f f9bc 	bl	8023c18 <mg_str_s>
 80148a0:	f109 0318 	add.w	r3, r9, #24
 80148a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80148a8:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 80148ac:	4631      	mov	r1, r6
 80148ae:	4620      	mov	r0, r4
 80148b0:	f00f f9b2 	bl	8023c18 <mg_str_s>
 80148b4:	f109 0320 	add.w	r3, r9, #32
 80148b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80148bc:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 80148c0:	2300      	movs	r3, #0
 80148c2:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 80148c6:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 80148ca:	4649      	mov	r1, r9
 80148cc:	4638      	mov	r0, r7
 80148ce:	f012 fc41 	bl	8027154 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 80148d2:	4642      	mov	r2, r8
 80148d4:	2a02      	cmp	r2, #2
 80148d6:	d9c4      	bls.n	8014862 <_ZL19mqtt_send_io_statusP13mg_connectionb+0xe2>
		free(payload);
 80148d8:	4630      	mov	r0, r6
 80148da:	f005 fdc7 	bl	801a46c <vPortFree>
		free(topik);
 80148de:	4628      	mov	r0, r5
 80148e0:	f005 fdc4 	bl	801a46c <vPortFree>
}
 80148e4:	b007      	add	sp, #28
 80148e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148ea:	bf00      	nop
 80148ec:	20002848 	.word	0x20002848
 80148f0:	20002840 	.word	0x20002840
 80148f4:	20002843 	.word	0x20002843
 80148f8:	20002864 	.word	0x20002864

080148fc <_ZL33mqtt_timer_handler_cher_io_statusPv>:

static void mqtt_timer_handler_cher_io_status(void *arg){
 80148fc:	b508      	push	{r3, lr}
	if(mqtt_conn && is_registered){
 80148fe:	4b05      	ldr	r3, [pc, #20]	@ (8014914 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x18>)
 8014900:	6818      	ldr	r0, [r3, #0]
 8014902:	b110      	cbz	r0, 801490a <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8014904:	4b04      	ldr	r3, [pc, #16]	@ (8014918 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x1c>)
 8014906:	781b      	ldrb	r3, [r3, #0]
 8014908:	b903      	cbnz	r3, 801490c <_ZL33mqtt_timer_handler_cher_io_statusPv+0x10>
		mqtt_send_io_status(mqtt_conn, 0);
	}
}
 801490a:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 0);
 801490c:	2100      	movs	r1, #0
 801490e:	f7ff ff37 	bl	8014780 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8014912:	e7fa      	b.n	801490a <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8014914:	20002860 	.word	0x20002860
 8014918:	2000284c 	.word	0x2000284c

0801491c <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:
static void mqtt_pereodic_status_send_timer_handler(void *arg){
 801491c:	b508      	push	{r3, lr}
	if(is_registered){
 801491e:	4b05      	ldr	r3, [pc, #20]	@ (8014934 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x18>)
 8014920:	781b      	ldrb	r3, [r3, #0]
 8014922:	b903      	cbnz	r3, 8014926 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0xa>
}
 8014924:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 1);
 8014926:	2101      	movs	r1, #1
 8014928:	4b03      	ldr	r3, [pc, #12]	@ (8014938 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>)
 801492a:	6818      	ldr	r0, [r3, #0]
 801492c:	f7ff ff28 	bl	8014780 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8014930:	e7f8      	b.n	8014924 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x8>
 8014932:	bf00      	nop
 8014934:	2000284c 	.word	0x2000284c
 8014938:	20002860 	.word	0x20002860

0801493c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:
static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 801493c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014940:	b083      	sub	sp, #12
 8014942:	4681      	mov	r9, r0
 8014944:	460d      	mov	r5, r1
 8014946:	4616      	mov	r6, r2
	for (size_t i = 0; i < sensor_count; i++) {
 8014948:	2400      	movs	r4, #0
 801494a:	e000      	b.n	801494e <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x12>
 801494c:	3401      	adds	r4, #1
 801494e:	42b4      	cmp	r4, r6
 8014950:	d22e      	bcs.n	80149b0 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x74>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 8014952:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
 8014956:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 801495a:	2b02      	cmp	r3, #2
 801495c:	d1f6      	bne.n	801494c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 801495e:	2101      	movs	r1, #1
 8014960:	2080      	movs	r0, #128	@ 0x80
 8014962:	f7ff feff 	bl	8014764 <_ZL9my_callocjj>
 8014966:	4607      	mov	r7, r0
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 8014968:	f898 3004 	ldrb.w	r3, [r8, #4]
 801496c:	2202      	movs	r2, #2
 801496e:	2180      	movs	r1, #128	@ 0x80
 8014970:	f000 fc60 	bl	8015234 <generate_comand_topik_for_subscrabe>
			mqtt_opts.qos = 1;
 8014974:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 80149bc <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x80>
 8014978:	f04f 0b01 	mov.w	fp, #1
 801497c:	f888 b028 	strb.w	fp, [r8, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 8014980:	46ea      	mov	sl, sp
 8014982:	4639      	mov	r1, r7
 8014984:	4650      	mov	r0, sl
 8014986:	f00f f947 	bl	8023c18 <mg_str_s>
 801498a:	f108 0318 	add.w	r3, r8, #24
 801498e:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8014992:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 8014996:	4641      	mov	r1, r8
 8014998:	4648      	mov	r0, r9
 801499a:	f012 fb8d 	bl	80270b8 <mg_mqtt_sub>
			logging(L_INFO, "Subscribe on MQTT topik: %s", topik);
 801499e:	463a      	mov	r2, r7
 80149a0:	4905      	ldr	r1, [pc, #20]	@ (80149b8 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7c>)
 80149a2:	4658      	mov	r0, fp
 80149a4:	f7fd fa7e 	bl	8011ea4 <logging>
			free(topik);
 80149a8:	4638      	mov	r0, r7
 80149aa:	f005 fd5f 	bl	801a46c <vPortFree>
 80149ae:	e7cd      	b.n	801494c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
}
 80149b0:	b003      	add	sp, #12
 80149b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149b6:	bf00      	nop
 80149b8:	08037244 	.word	0x08037244
 80149bc:	20002864 	.word	0x20002864

080149c0 <_ZL18mqtt_event_handlerP13mg_connectioniPv>:
static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 80149c0:	b570      	push	{r4, r5, r6, lr}
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 80149c2:	2910      	cmp	r1, #16
 80149c4:	d031      	beq.n	8014a2a <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x6a>
 80149c6:	4605      	mov	r5, r0
 80149c8:	2911      	cmp	r1, #17
 80149ca:	d002      	beq.n	80149d2 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x12>
 80149cc:	2909      	cmp	r1, #9
 80149ce:	d03a      	beq.n	8014a46 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x86>
}
 80149d0:	bd70      	pop	{r4, r5, r6, pc}
		MG_DEBUG(("MQTT_open_connection"));
 80149d2:	4b22      	ldr	r3, [pc, #136]	@ (8014a5c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9c>)
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	2b02      	cmp	r3, #2
 80149d8:	dc1d      	bgt.n	8014a16 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x56>
		logging(L_INFO, "MQTT Open connection");
 80149da:	4921      	ldr	r1, [pc, #132]	@ (8014a60 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa0>)
 80149dc:	2001      	movs	r0, #1
 80149de:	f7fd fa61 	bl	8011ea4 <logging>
		mqtt_conn = conn;
 80149e2:	4b20      	ldr	r3, [pc, #128]	@ (8014a64 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 80149e4:	601d      	str	r5, [r3, #0]
		if(!is_registered){
 80149e6:	4b20      	ldr	r3, [pc, #128]	@ (8014a68 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 80149e8:	781b      	ldrb	r3, [r3, #0]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d1f0      	bne.n	80149d0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 80149ee:	4e1f      	ldr	r6, [pc, #124]	@ (8014a6c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xac>)
 80149f0:	2206      	movs	r2, #6
 80149f2:	4631      	mov	r1, r6
 80149f4:	4628      	mov	r0, r5
 80149f6:	f7ff fd3b 	bl	8014470 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 80149fa:	4c1a      	ldr	r4, [pc, #104]	@ (8014a64 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 80149fc:	2101      	movs	r1, #1
 80149fe:	6820      	ldr	r0, [r4, #0]
 8014a00:	f7ff febe 	bl	8014780 <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8014a04:	2206      	movs	r2, #6
 8014a06:	4631      	mov	r1, r6
 8014a08:	6820      	ldr	r0, [r4, #0]
 8014a0a:	f7ff ff97 	bl	801493c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 8014a0e:	4b16      	ldr	r3, [pc, #88]	@ (8014a68 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8014a10:	2201      	movs	r2, #1
 8014a12:	701a      	strb	r2, [r3, #0]
 8014a14:	e7dc      	b.n	80149d0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		MG_DEBUG(("MQTT_open_connection"));
 8014a16:	4b16      	ldr	r3, [pc, #88]	@ (8014a70 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb0>)
 8014a18:	22cd      	movs	r2, #205	@ 0xcd
 8014a1a:	4916      	ldr	r1, [pc, #88]	@ (8014a74 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb4>)
 8014a1c:	2003      	movs	r0, #3
 8014a1e:	f011 f833 	bl	8025a88 <mg_log_prefix>
 8014a22:	4815      	ldr	r0, [pc, #84]	@ (8014a78 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb8>)
 8014a24:	f00e ff1a 	bl	802385c <mg_log>
 8014a28:	e7d7      	b.n	80149da <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x1a>
 8014a2a:	4614      	mov	r4, r2
		logging(L_INFO, "Receive message from MQTT server");
 8014a2c:	4913      	ldr	r1, [pc, #76]	@ (8014a7c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbc>)
 8014a2e:	2001      	movs	r0, #1
 8014a30:	f7fd fa38 	bl	8011ea4 <logging>
		 mqtt_subscrabe_recv_cmd_parce(mm);
 8014a34:	4620      	mov	r0, r4
 8014a36:	f7ff fd85 	bl	8014544 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 8014a3a:	2100      	movs	r1, #0
 8014a3c:	4b09      	ldr	r3, [pc, #36]	@ (8014a64 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8014a3e:	6818      	ldr	r0, [r3, #0]
 8014a40:	f7ff fe9e 	bl	8014780 <_ZL19mqtt_send_io_statusP13mg_connectionb>
 8014a44:	e7c4      	b.n	80149d0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		logging(L_INFO, "MQTT Close connection");
 8014a46:	490e      	ldr	r1, [pc, #56]	@ (8014a80 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc0>)
 8014a48:	2001      	movs	r0, #1
 8014a4a:	f7fd fa2b 	bl	8011ea4 <logging>
		mqtt_conn     = NULL;
 8014a4e:	2300      	movs	r3, #0
 8014a50:	4a04      	ldr	r2, [pc, #16]	@ (8014a64 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8014a52:	6013      	str	r3, [r2, #0]
		is_registered = false;
 8014a54:	4a04      	ldr	r2, [pc, #16]	@ (8014a68 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8014a56:	7013      	strb	r3, [r2, #0]
}
 8014a58:	e7ba      	b.n	80149d0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
 8014a5a:	bf00      	nop
 8014a5c:	2000012c 	.word	0x2000012c
 8014a60:	0803728c 	.word	0x0803728c
 8014a64:	20002860 	.word	0x20002860
 8014a68:	2000284c 	.word	0x2000284c
 8014a6c:	200000c8 	.word	0x200000c8
 8014a70:	08037260 	.word	0x08037260
 8014a74:	08037030 	.word	0x08037030
 8014a78:	08037274 	.word	0x08037274
 8014a7c:	080372a4 	.word	0x080372a4
 8014a80:	080372c8 	.word	0x080372c8

08014a84 <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
    return mqtt_conn;
}
 8014a84:	4b01      	ldr	r3, [pc, #4]	@ (8014a8c <get_mqtt_connection+0x8>)
 8014a86:	6818      	ldr	r0, [r3, #0]
 8014a88:	4770      	bx	lr
 8014a8a:	bf00      	nop
 8014a8c:	20002860 	.word	0x20002860

08014a90 <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 8014a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a94:	b086      	sub	sp, #24
 8014a96:	4606      	mov	r6, r0
 8014a98:	460c      	mov	r4, r1
 8014a9a:	4691      	mov	r9, r2
 8014a9c:	461d      	mov	r5, r3

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 8014a9e:	2101      	movs	r1, #1
 8014aa0:	2080      	movs	r0, #128	@ 0x80
 8014aa2:	f7ff fe5f 	bl	8014764 <_ZL9my_callocjj>
 8014aa6:	f8df a148 	ldr.w	sl, [pc, #328]	@ 8014bf0 <mqtt_init+0x160>
 8014aaa:	f8ca 0000 	str.w	r0, [sl]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 8014aae:	2101      	movs	r1, #1
 8014ab0:	2021      	movs	r0, #33	@ 0x21
 8014ab2:	f7ff fe57 	bl	8014764 <_ZL9my_callocjj>
 8014ab6:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 8014bf4 <mqtt_init+0x164>
 8014aba:	f8c8 0000 	str.w	r0, [r8]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 8014abe:	2101      	movs	r1, #1
 8014ac0:	2021      	movs	r0, #33	@ 0x21
 8014ac2:	f7ff fe4f 	bl	8014764 <_ZL9my_callocjj>
 8014ac6:	4f3b      	ldr	r7, [pc, #236]	@ (8014bb4 <mqtt_init+0x124>)
 8014ac8:	6038      	str	r0, [r7, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8014aca:	2101      	movs	r1, #1
 8014acc:	2080      	movs	r0, #128	@ 0x80
 8014ace:	f7ff fe49 	bl	8014764 <_ZL9my_callocjj>
 8014ad2:	4b39      	ldr	r3, [pc, #228]	@ (8014bb8 <mqtt_init+0x128>)
 8014ad4:	6018      	str	r0, [r3, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8014ad6:	2101      	movs	r1, #1
 8014ad8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014adc:	f7ff fe42 	bl	8014764 <_ZL9my_callocjj>
 8014ae0:	4b36      	ldr	r3, [pc, #216]	@ (8014bbc <mqtt_init+0x12c>)
 8014ae2:	6018      	str	r0, [r3, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 8014ae4:	2101      	movs	r1, #1
 8014ae6:	2028      	movs	r0, #40	@ 0x28
 8014ae8:	f7ff fe3c 	bl	8014764 <_ZL9my_callocjj>
 8014aec:	4b34      	ldr	r3, [pc, #208]	@ (8014bc0 <mqtt_init+0x130>)
 8014aee:	6018      	str	r0, [r3, #0]
	r_w_parameter   = fn;
 8014af0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014af2:	4b34      	ldr	r3, [pc, #208]	@ (8014bc4 <mqtt_init+0x134>)
 8014af4:	601a      	str	r2, [r3, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 8014af6:	f8da a000 	ldr.w	sl, [sl]
 8014afa:	4649      	mov	r1, r9
 8014afc:	4650      	mov	r0, sl
 8014afe:	f018 fdc9 	bl	802d694 <strcpy>
	strcpy(mqtt_username,   (char *)username);
 8014b02:	f8d8 9000 	ldr.w	r9, [r8]
 8014b06:	4629      	mov	r1, r5
 8014b08:	4648      	mov	r0, r9
 8014b0a:	f018 fdc3 	bl	802d694 <strcpy>
	strcpy(mqtt_password,   (char *)password);
 8014b0e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8014b10:	6838      	ldr	r0, [r7, #0]
 8014b12:	f018 fdbf 	bl	802d694 <strcpy>

	logging(L_INFO, "Start MQTT task, server: %s, username: %s", mqtt_broker_url, mqtt_username);
 8014b16:	464b      	mov	r3, r9
 8014b18:	4652      	mov	r2, sl
 8014b1a:	492b      	ldr	r1, [pc, #172]	@ (8014bc8 <mqtt_init+0x138>)
 8014b1c:	2001      	movs	r0, #1
 8014b1e:	f7fd f9c1 	bl	8011ea4 <logging>

	mgr = (struct mg_mgr *)     mgr_parameter;
 8014b22:	4d2a      	ldr	r5, [pc, #168]	@ (8014bcc <mqtt_init+0x13c>)
 8014b24:	602e      	str	r6, [r5, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 8014b26:	4b2a      	ldr	r3, [pc, #168]	@ (8014bd0 <mqtt_init+0x140>)
 8014b28:	601c      	str	r4, [r3, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 8014b2a:	2106      	movs	r1, #6
 8014b2c:	4620      	mov	r0, r4
 8014b2e:	f000 f871 	bl	8014c14 <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 8014b32:	4e28      	ldr	r6, [pc, #160]	@ (8014bd4 <mqtt_init+0x144>)
 8014b34:	ac04      	add	r4, sp, #16
 8014b36:	f8d8 1000 	ldr.w	r1, [r8]
 8014b3a:	4620      	mov	r0, r4
 8014b3c:	f00f f86c 	bl	8023c18 <mg_str_s>
 8014b40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014b44:	e886 0003 	stmia.w	r6, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 8014b48:	6839      	ldr	r1, [r7, #0]
 8014b4a:	4620      	mov	r0, r4
 8014b4c:	f00f f864 	bl	8023c18 <mg_str_s>
 8014b50:	f106 0308 	add.w	r3, r6, #8
 8014b54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014b58:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= 60;
 8014b5c:	233c      	movs	r3, #60	@ 0x3c
 8014b5e:	8573      	strh	r3, [r6, #42]	@ 0x2a

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, mqtt_timer_handler,                      NULL); // Timer for following connection and reconnect every 10 seconds if needed
 8014b60:	2400      	movs	r4, #0
 8014b62:	9402      	str	r4, [sp, #8]
 8014b64:	4b1c      	ldr	r3, [pc, #112]	@ (8014bd8 <mqtt_init+0x148>)
 8014b66:	9301      	str	r3, [sp, #4]
 8014b68:	2303      	movs	r3, #3
 8014b6a:	9300      	str	r3, [sp, #0]
 8014b6c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8014b70:	2300      	movs	r3, #0
 8014b72:	6828      	ldr	r0, [r5, #0]
 8014b74:	f010 fa32 	bl	8024fdc <mg_timer_add>
 8014b78:	4b18      	ldr	r3, [pc, #96]	@ (8014bdc <mqtt_init+0x14c>)
 8014b7a:	6018      	str	r0, [r3, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 15000 /* 15 seconds */, MG_TIMER_REPEAT,                mqtt_pereodic_status_send_timer_handler, NULL); // Timer for send io statuses every ~150 seconds
 8014b7c:	9402      	str	r4, [sp, #8]
 8014b7e:	4b18      	ldr	r3, [pc, #96]	@ (8014be0 <mqtt_init+0x150>)
 8014b80:	9301      	str	r3, [sp, #4]
 8014b82:	2601      	movs	r6, #1
 8014b84:	9600      	str	r6, [sp, #0]
 8014b86:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	6828      	ldr	r0, [r5, #0]
 8014b8e:	f010 fa25 	bl	8024fdc <mg_timer_add>
 8014b92:	4b14      	ldr	r3, [pc, #80]	@ (8014be4 <mqtt_init+0x154>)
 8014b94:	6018      	str	r0, [r3, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */, MG_TIMER_REPEAT,                    mqtt_timer_handler_cher_io_status,       NULL); // timer for follow io status every 0.5 seconds
 8014b96:	9402      	str	r4, [sp, #8]
 8014b98:	4b13      	ldr	r3, [pc, #76]	@ (8014be8 <mqtt_init+0x158>)
 8014b9a:	9301      	str	r3, [sp, #4]
 8014b9c:	9600      	str	r6, [sp, #0]
 8014b9e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	6828      	ldr	r0, [r5, #0]
 8014ba6:	f010 fa19 	bl	8024fdc <mg_timer_add>
 8014baa:	4b10      	ldr	r3, [pc, #64]	@ (8014bec <mqtt_init+0x15c>)
 8014bac:	6018      	str	r0, [r3, #0]

}
 8014bae:	b006      	add	sp, #24
 8014bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bb4:	200028b4 	.word	0x200028b4
 8014bb8:	200028b0 	.word	0x200028b0
 8014bbc:	200028ac 	.word	0x200028ac
 8014bc0:	2000285c 	.word	0x2000285c
 8014bc4:	20002848 	.word	0x20002848
 8014bc8:	080372e0 	.word	0x080372e0
 8014bcc:	200028a8 	.word	0x200028a8
 8014bd0:	200028a4 	.word	0x200028a4
 8014bd4:	20002864 	.word	0x20002864
 8014bd8:	080143e5 	.word	0x080143e5
 8014bdc:	20002858 	.word	0x20002858
 8014be0:	0801491d 	.word	0x0801491d
 8014be4:	20002854 	.word	0x20002854
 8014be8:	080148fd 	.word	0x080148fd
 8014bec:	20002850 	.word	0x20002850
 8014bf0:	200028bc 	.word	0x200028bc
 8014bf4:	200028b8 	.word	0x200028b8

08014bf8 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8014bf8:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8014bfa:	fb01 f400 	mul.w	r4, r1, r0
 8014bfe:	4620      	mov	r0, r4
 8014c00:	f005 fbb2 	bl	801a368 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8014c04:	4605      	mov	r5, r0
 8014c06:	b118      	cbz	r0, 8014c10 <_ZL9my_callocjj+0x18>
 8014c08:	4622      	mov	r2, r4
 8014c0a:	2100      	movs	r1, #0
 8014c0c:	f017 fb38 	bl	802c280 <memset>
}
 8014c10:	4628      	mov	r0, r5
 8014c12:	bd38      	pop	{r3, r4, r5, pc}

08014c14 <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 8014c14:	b570      	push	{r4, r5, r6, lr}
 8014c16:	4606      	mov	r6, r0
 8014c18:	460d      	mov	r5, r1

	if ( unical_id){
 8014c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8014c58 <set_device_id+0x44>)
 8014c1c:	6818      	ldr	r0, [r3, #0]
 8014c1e:	b108      	cbz	r0, 8014c24 <set_device_id+0x10>
		free(unical_id);
 8014c20:	f005 fc24 	bl	801a46c <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8014c24:	0068      	lsls	r0, r5, #1
 8014c26:	2101      	movs	r1, #1
 8014c28:	4408      	add	r0, r1
 8014c2a:	f7ff ffe5 	bl	8014bf8 <_ZL9my_callocjj>
 8014c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8014c58 <set_device_id+0x44>)
 8014c30:	6018      	str	r0, [r3, #0]


	if (unical_id){
 8014c32:	b108      	cbz	r0, 8014c38 <set_device_id+0x24>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 8014c34:	2400      	movs	r4, #0
 8014c36:	e00b      	b.n	8014c50 <set_device_id+0x3c>
            // Конвертируем каждый байт в два символа и добавляем в строку
            sprintf(&unical_id[i * 2], "%02X", id[i]);
        }
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 8014c38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014c3c:	e00b      	b.n	8014c56 <set_device_id+0x42>
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 8014c3e:	4b06      	ldr	r3, [pc, #24]	@ (8014c58 <set_device_id+0x44>)
 8014c40:	6818      	ldr	r0, [r3, #0]
 8014c42:	5d32      	ldrb	r2, [r6, r4]
 8014c44:	4905      	ldr	r1, [pc, #20]	@ (8014c5c <set_device_id+0x48>)
 8014c46:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8014c4a:	f016 ff57 	bl	802bafc <sprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 8014c4e:	3401      	adds	r4, #1
 8014c50:	42ac      	cmp	r4, r5
 8014c52:	d3f4      	bcc.n	8014c3e <set_device_id+0x2a>
	}

	return NO_ERR; // Успешно
 8014c54:	2000      	movs	r0, #0
}
 8014c56:	bd70      	pop	{r4, r5, r6, pc}
 8014c58:	200028c4 	.word	0x200028c4
 8014c5c:	0803730c 	.word	0x0803730c

08014c60 <set_device_conf_ip>:

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 8014c60:	b538      	push	{r3, r4, r5, lr}
 8014c62:	4605      	mov	r5, r0
 8014c64:	460c      	mov	r4, r1

	if(dev_conf_ip){
 8014c66:	4b0c      	ldr	r3, [pc, #48]	@ (8014c98 <set_device_conf_ip+0x38>)
 8014c68:	6818      	ldr	r0, [r3, #0]
 8014c6a:	b108      	cbz	r0, 8014c70 <set_device_conf_ip+0x10>
		free(dev_conf_ip);
 8014c6c:	f005 fbfe 	bl	801a46c <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len+1, sizeof(char)); // +1 для нулевого символа
 8014c70:	2101      	movs	r1, #1
 8014c72:	1860      	adds	r0, r4, r1
 8014c74:	f7ff ffc0 	bl	8014bf8 <_ZL9my_callocjj>
 8014c78:	4b07      	ldr	r3, [pc, #28]	@ (8014c98 <set_device_conf_ip+0x38>)
 8014c7a:	6018      	str	r0, [r3, #0]

	if(dev_conf_ip){
 8014c7c:	b140      	cbz	r0, 8014c90 <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 8014c7e:	4622      	mov	r2, r4
 8014c80:	4629      	mov	r1, r5
 8014c82:	f017 fb44 	bl	802c30e <strncpy>
		dev_conf_ip[ip_len] = '\0'; // Явно добавляем нулевой символ
 8014c86:	4b04      	ldr	r3, [pc, #16]	@ (8014c98 <set_device_conf_ip+0x38>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	2000      	movs	r0, #0
 8014c8c:	5518      	strb	r0, [r3, r4]
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
}
 8014c8e:	bd38      	pop	{r3, r4, r5, pc}
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 8014c90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014c94:	e7fb      	b.n	8014c8e <set_device_conf_ip+0x2e>
 8014c96:	bf00      	nop
 8014c98:	200028c0 	.word	0x200028c0

08014c9c <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 8014c9c:	b500      	push	{lr}
 8014c9e:	b087      	sub	sp, #28

	strcpy(buff, "");
 8014ca0:	f04f 0c00 	mov.w	ip, #0
 8014ca4:	f880 c000 	strb.w	ip, [r0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 8014ca8:	3a01      	subs	r2, #1
 8014caa:	2a07      	cmp	r2, #7
 8014cac:	f200 8087 	bhi.w	8014dbe <get_config_topik_string+0x122>
 8014cb0:	e8df f002 	tbb	[pc, r2]
 8014cb4:	45251604 	.word	0x45251604
 8014cb8:	55756535 	.word	0x55756535
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 8014cbc:	9304      	str	r3, [sp, #16]
 8014cbe:	4b41      	ldr	r3, [pc, #260]	@ (8014dc4 <get_config_topik_string+0x128>)
 8014cc0:	9303      	str	r3, [sp, #12]
 8014cc2:	4b41      	ldr	r3, [pc, #260]	@ (8014dc8 <get_config_topik_string+0x12c>)
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	9302      	str	r3, [sp, #8]
 8014cc8:	4b40      	ldr	r3, [pc, #256]	@ (8014dcc <get_config_topik_string+0x130>)
 8014cca:	9301      	str	r3, [sp, #4]
 8014ccc:	4b40      	ldr	r3, [pc, #256]	@ (8014dd0 <get_config_topik_string+0x134>)
 8014cce:	9300      	str	r3, [sp, #0]
 8014cd0:	4b40      	ldr	r3, [pc, #256]	@ (8014dd4 <get_config_topik_string+0x138>)
 8014cd2:	4a41      	ldr	r2, [pc, #260]	@ (8014dd8 <get_config_topik_string+0x13c>)
 8014cd4:	f016 fdaa 	bl	802b82c <snprintf>
			return -1;
			break;
	}


	return 0;
 8014cd8:	2000      	movs	r0, #0
}
 8014cda:	b007      	add	sp, #28
 8014cdc:	f85d fb04 	ldr.w	pc, [sp], #4
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 8014ce0:	9304      	str	r3, [sp, #16]
 8014ce2:	4b3e      	ldr	r3, [pc, #248]	@ (8014ddc <get_config_topik_string+0x140>)
 8014ce4:	9303      	str	r3, [sp, #12]
 8014ce6:	4a38      	ldr	r2, [pc, #224]	@ (8014dc8 <get_config_topik_string+0x12c>)
 8014ce8:	6812      	ldr	r2, [r2, #0]
 8014cea:	9202      	str	r2, [sp, #8]
 8014cec:	4a37      	ldr	r2, [pc, #220]	@ (8014dcc <get_config_topik_string+0x130>)
 8014cee:	9201      	str	r2, [sp, #4]
 8014cf0:	9300      	str	r3, [sp, #0]
 8014cf2:	4b38      	ldr	r3, [pc, #224]	@ (8014dd4 <get_config_topik_string+0x138>)
 8014cf4:	4a38      	ldr	r2, [pc, #224]	@ (8014dd8 <get_config_topik_string+0x13c>)
 8014cf6:	f016 fd99 	bl	802b82c <snprintf>
	return 0;
 8014cfa:	2000      	movs	r0, #0
			break;
 8014cfc:	e7ed      	b.n	8014cda <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 8014cfe:	9304      	str	r3, [sp, #16]
 8014d00:	4b37      	ldr	r3, [pc, #220]	@ (8014de0 <get_config_topik_string+0x144>)
 8014d02:	9303      	str	r3, [sp, #12]
 8014d04:	4b30      	ldr	r3, [pc, #192]	@ (8014dc8 <get_config_topik_string+0x12c>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	9302      	str	r3, [sp, #8]
 8014d0a:	4b30      	ldr	r3, [pc, #192]	@ (8014dcc <get_config_topik_string+0x130>)
 8014d0c:	9301      	str	r3, [sp, #4]
 8014d0e:	4b35      	ldr	r3, [pc, #212]	@ (8014de4 <get_config_topik_string+0x148>)
 8014d10:	9300      	str	r3, [sp, #0]
 8014d12:	4b30      	ldr	r3, [pc, #192]	@ (8014dd4 <get_config_topik_string+0x138>)
 8014d14:	4a30      	ldr	r2, [pc, #192]	@ (8014dd8 <get_config_topik_string+0x13c>)
 8014d16:	f016 fd89 	bl	802b82c <snprintf>
	return 0;
 8014d1a:	2000      	movs	r0, #0
			break;
 8014d1c:	e7dd      	b.n	8014cda <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 8014d1e:	9304      	str	r3, [sp, #16]
 8014d20:	4b31      	ldr	r3, [pc, #196]	@ (8014de8 <get_config_topik_string+0x14c>)
 8014d22:	9303      	str	r3, [sp, #12]
 8014d24:	4b28      	ldr	r3, [pc, #160]	@ (8014dc8 <get_config_topik_string+0x12c>)
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	9302      	str	r3, [sp, #8]
 8014d2a:	4b28      	ldr	r3, [pc, #160]	@ (8014dcc <get_config_topik_string+0x130>)
 8014d2c:	9301      	str	r3, [sp, #4]
 8014d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8014de4 <get_config_topik_string+0x148>)
 8014d30:	9300      	str	r3, [sp, #0]
 8014d32:	4b28      	ldr	r3, [pc, #160]	@ (8014dd4 <get_config_topik_string+0x138>)
 8014d34:	4a28      	ldr	r2, [pc, #160]	@ (8014dd8 <get_config_topik_string+0x13c>)
 8014d36:	f016 fd79 	bl	802b82c <snprintf>
	return 0;
 8014d3a:	2000      	movs	r0, #0
			break;
 8014d3c:	e7cd      	b.n	8014cda <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 8014d3e:	9304      	str	r3, [sp, #16]
 8014d40:	4b2a      	ldr	r3, [pc, #168]	@ (8014dec <get_config_topik_string+0x150>)
 8014d42:	9303      	str	r3, [sp, #12]
 8014d44:	4b20      	ldr	r3, [pc, #128]	@ (8014dc8 <get_config_topik_string+0x12c>)
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	9302      	str	r3, [sp, #8]
 8014d4a:	4b20      	ldr	r3, [pc, #128]	@ (8014dcc <get_config_topik_string+0x130>)
 8014d4c:	9301      	str	r3, [sp, #4]
 8014d4e:	4b25      	ldr	r3, [pc, #148]	@ (8014de4 <get_config_topik_string+0x148>)
 8014d50:	9300      	str	r3, [sp, #0]
 8014d52:	4b20      	ldr	r3, [pc, #128]	@ (8014dd4 <get_config_topik_string+0x138>)
 8014d54:	4a20      	ldr	r2, [pc, #128]	@ (8014dd8 <get_config_topik_string+0x13c>)
 8014d56:	f016 fd69 	bl	802b82c <snprintf>
	return 0;
 8014d5a:	2000      	movs	r0, #0
			break;
 8014d5c:	e7bd      	b.n	8014cda <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 8014d5e:	9304      	str	r3, [sp, #16]
 8014d60:	4b23      	ldr	r3, [pc, #140]	@ (8014df0 <get_config_topik_string+0x154>)
 8014d62:	9303      	str	r3, [sp, #12]
 8014d64:	4b18      	ldr	r3, [pc, #96]	@ (8014dc8 <get_config_topik_string+0x12c>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	9302      	str	r3, [sp, #8]
 8014d6a:	4b18      	ldr	r3, [pc, #96]	@ (8014dcc <get_config_topik_string+0x130>)
 8014d6c:	9301      	str	r3, [sp, #4]
 8014d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8014de4 <get_config_topik_string+0x148>)
 8014d70:	9300      	str	r3, [sp, #0]
 8014d72:	4b18      	ldr	r3, [pc, #96]	@ (8014dd4 <get_config_topik_string+0x138>)
 8014d74:	4a18      	ldr	r2, [pc, #96]	@ (8014dd8 <get_config_topik_string+0x13c>)
 8014d76:	f016 fd59 	bl	802b82c <snprintf>
	return 0;
 8014d7a:	2000      	movs	r0, #0
			break;
 8014d7c:	e7ad      	b.n	8014cda <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 8014d7e:	9304      	str	r3, [sp, #16]
 8014d80:	4b1c      	ldr	r3, [pc, #112]	@ (8014df4 <get_config_topik_string+0x158>)
 8014d82:	9303      	str	r3, [sp, #12]
 8014d84:	4b10      	ldr	r3, [pc, #64]	@ (8014dc8 <get_config_topik_string+0x12c>)
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	9302      	str	r3, [sp, #8]
 8014d8a:	4b10      	ldr	r3, [pc, #64]	@ (8014dcc <get_config_topik_string+0x130>)
 8014d8c:	9301      	str	r3, [sp, #4]
 8014d8e:	4b15      	ldr	r3, [pc, #84]	@ (8014de4 <get_config_topik_string+0x148>)
 8014d90:	9300      	str	r3, [sp, #0]
 8014d92:	4b10      	ldr	r3, [pc, #64]	@ (8014dd4 <get_config_topik_string+0x138>)
 8014d94:	4a10      	ldr	r2, [pc, #64]	@ (8014dd8 <get_config_topik_string+0x13c>)
 8014d96:	f016 fd49 	bl	802b82c <snprintf>
	return 0;
 8014d9a:	2000      	movs	r0, #0
			break;
 8014d9c:	e79d      	b.n	8014cda <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 8014d9e:	9304      	str	r3, [sp, #16]
 8014da0:	4b15      	ldr	r3, [pc, #84]	@ (8014df8 <get_config_topik_string+0x15c>)
 8014da2:	9303      	str	r3, [sp, #12]
 8014da4:	4b08      	ldr	r3, [pc, #32]	@ (8014dc8 <get_config_topik_string+0x12c>)
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	9302      	str	r3, [sp, #8]
 8014daa:	4b08      	ldr	r3, [pc, #32]	@ (8014dcc <get_config_topik_string+0x130>)
 8014dac:	9301      	str	r3, [sp, #4]
 8014dae:	4b0d      	ldr	r3, [pc, #52]	@ (8014de4 <get_config_topik_string+0x148>)
 8014db0:	9300      	str	r3, [sp, #0]
 8014db2:	4b08      	ldr	r3, [pc, #32]	@ (8014dd4 <get_config_topik_string+0x138>)
 8014db4:	4a08      	ldr	r2, [pc, #32]	@ (8014dd8 <get_config_topik_string+0x13c>)
 8014db6:	f016 fd39 	bl	802b82c <snprintf>
	return 0;
 8014dba:	2000      	movs	r0, #0
			break;
 8014dbc:	e78d      	b.n	8014cda <get_config_topik_string+0x3e>
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 8014dbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014dc2:	e78a      	b.n	8014cda <get_config_topik_string+0x3e>
 8014dc4:	0803732c 	.word	0x0803732c
 8014dc8:	200028c4 	.word	0x200028c4
 8014dcc:	08037334 	.word	0x08037334
 8014dd0:	0803733c 	.word	0x0803733c
 8014dd4:	200000f8 	.word	0x200000f8
 8014dd8:	08037314 	.word	0x08037314
 8014ddc:	08037080 	.word	0x08037080
 8014de0:	0803734c 	.word	0x0803734c
 8014de4:	08037354 	.word	0x08037354
 8014de8:	0803735c 	.word	0x0803735c
 8014dec:	08037364 	.word	0x08037364
 8014df0:	0803736c 	.word	0x0803736c
 8014df4:	0803737c 	.word	0x0803737c
 8014df8:	0803738c 	.word	0x0803738c

08014dfc <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 8014dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e00:	b099      	sub	sp, #100	@ 0x64
 8014e02:	9017      	str	r0, [sp, #92]	@ 0x5c
 8014e04:	460d      	mov	r5, r1
 8014e06:	4617      	mov	r7, r2
 8014e08:	461c      	mov	r4, r3

	uint8_t len = 0;
	char * name      = NULL;
	char * com_topik = NULL;
	memset(payload, 0, payload_len * sizeof(char));
 8014e0a:	460a      	mov	r2, r1
 8014e0c:	2100      	movs	r1, #0
 8014e0e:	f017 fa37 	bl	802c280 <memset>

	switch (payload_type) {
 8014e12:	1e7a      	subs	r2, r7, #1
 8014e14:	2a07      	cmp	r2, #7
 8014e16:	f200 81ba 	bhi.w	801518e <get_config_payload_string+0x392>
 8014e1a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8014e1e:	0008      	.short	0x0008
 8014e20:	00a10043 	.word	0x00a10043
 8014e24:	00c500ea 	.word	0x00c500ea
 8014e28:	0193016e 	.word	0x0193016e
 8014e2c:	0149      	.short	0x0149

		case INP_CONF_PAYLOAD:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8014e2e:	2101      	movs	r1, #1
 8014e30:	2080      	movs	r0, #128	@ 0x80
 8014e32:	f7ff fee1 	bl	8014bf8 <_ZL9my_callocjj>
 8014e36:	4607      	mov	r7, r0
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 8014e38:	9400      	str	r4, [sp, #0]
 8014e3a:	4b80      	ldr	r3, [pc, #512]	@ (801503c <get_config_payload_string+0x240>)
 8014e3c:	4a80      	ldr	r2, [pc, #512]	@ (8015040 <get_config_payload_string+0x244>)
 8014e3e:	2180      	movs	r1, #128	@ 0x80
 8014e40:	f016 fcf4 	bl	802b82c <snprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, dev_system, \
 8014e44:	4b7f      	ldr	r3, [pc, #508]	@ (8015044 <get_config_payload_string+0x248>)
 8014e46:	681a      	ldr	r2, [r3, #0]
 8014e48:	4b7f      	ldr	r3, [pc, #508]	@ (8015048 <get_config_payload_string+0x24c>)
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	9314      	str	r3, [sp, #80]	@ 0x50
 8014e4e:	4b7f      	ldr	r3, [pc, #508]	@ (801504c <get_config_payload_string+0x250>)
 8014e50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014e52:	4b7f      	ldr	r3, [pc, #508]	@ (8015050 <get_config_payload_string+0x254>)
 8014e54:	9312      	str	r3, [sp, #72]	@ 0x48
 8014e56:	4b7f      	ldr	r3, [pc, #508]	@ (8015054 <get_config_payload_string+0x258>)
 8014e58:	9311      	str	r3, [sp, #68]	@ 0x44
 8014e5a:	4b7f      	ldr	r3, [pc, #508]	@ (8015058 <get_config_payload_string+0x25c>)
 8014e5c:	9310      	str	r3, [sp, #64]	@ 0x40
 8014e5e:	4b7f      	ldr	r3, [pc, #508]	@ (801505c <get_config_payload_string+0x260>)
 8014e60:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014e62:	920e      	str	r2, [sp, #56]	@ 0x38
 8014e64:	4b7e      	ldr	r3, [pc, #504]	@ (8015060 <get_config_payload_string+0x264>)
 8014e66:	930d      	str	r3, [sp, #52]	@ 0x34
 8014e68:	497e      	ldr	r1, [pc, #504]	@ (8015064 <get_config_payload_string+0x268>)
 8014e6a:	910c      	str	r1, [sp, #48]	@ 0x30
 8014e6c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014e6e:	497e      	ldr	r1, [pc, #504]	@ (8015068 <get_config_payload_string+0x26c>)
 8014e70:	910a      	str	r1, [sp, #40]	@ 0x28
 8014e72:	9209      	str	r2, [sp, #36]	@ 0x24
 8014e74:	9308      	str	r3, [sp, #32]
 8014e76:	9707      	str	r7, [sp, #28]
 8014e78:	487c      	ldr	r0, [pc, #496]	@ (801506c <get_config_payload_string+0x270>)
 8014e7a:	9006      	str	r0, [sp, #24]
 8014e7c:	9405      	str	r4, [sp, #20]
 8014e7e:	9104      	str	r1, [sp, #16]
 8014e80:	9403      	str	r4, [sp, #12]
 8014e82:	9102      	str	r1, [sp, #8]
 8014e84:	9201      	str	r2, [sp, #4]
 8014e86:	9300      	str	r3, [sp, #0]
 8014e88:	4b79      	ldr	r3, [pc, #484]	@ (8015070 <get_config_payload_string+0x274>)
 8014e8a:	4a7a      	ldr	r2, [pc, #488]	@ (8015074 <get_config_payload_string+0x278>)
 8014e8c:	4629      	mov	r1, r5
 8014e8e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014e90:	f016 fccc 	bl	802b82c <snprintf>
 8014e94:	4604      	mov	r4, r0
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 8014e96:	4638      	mov	r0, r7
 8014e98:	f005 fae8 	bl	801a46c <vPortFree>

			return len;
 8014e9c:	b2e0      	uxtb	r0, r4

		default:
			return -1;
			break;
	}
}
 8014e9e:	b019      	add	sp, #100	@ 0x64
 8014ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8014ea4:	2101      	movs	r1, #1
 8014ea6:	2080      	movs	r0, #128	@ 0x80
 8014ea8:	f7ff fea6 	bl	8014bf8 <_ZL9my_callocjj>
 8014eac:	4607      	mov	r7, r0
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8014eae:	2101      	movs	r1, #1
 8014eb0:	2080      	movs	r0, #128	@ 0x80
 8014eb2:	f7ff fea1 	bl	8014bf8 <_ZL9my_callocjj>
 8014eb6:	4680      	mov	r8, r0
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 8014eb8:	f8df 91f0 	ldr.w	r9, [pc, #496]	@ 80150ac <get_config_payload_string+0x2b0>
 8014ebc:	9400      	str	r4, [sp, #0]
 8014ebe:	464b      	mov	r3, r9
 8014ec0:	4a6d      	ldr	r2, [pc, #436]	@ (8015078 <get_config_payload_string+0x27c>)
 8014ec2:	2180      	movs	r1, #128	@ 0x80
 8014ec4:	4638      	mov	r0, r7
 8014ec6:	f016 fcb1 	bl	802b82c <snprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 8014eca:	f8df a194 	ldr.w	sl, [pc, #404]	@ 8015060 <get_config_payload_string+0x264>
 8014ece:	4e65      	ldr	r6, [pc, #404]	@ (8015064 <get_config_payload_string+0x268>)
 8014ed0:	9602      	str	r6, [sp, #8]
 8014ed2:	9701      	str	r7, [sp, #4]
 8014ed4:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8015044 <get_config_payload_string+0x248>
 8014ed8:	f8db 3000 	ldr.w	r3, [fp]
 8014edc:	9300      	str	r3, [sp, #0]
 8014ede:	4653      	mov	r3, sl
 8014ee0:	4a66      	ldr	r2, [pc, #408]	@ (801507c <get_config_payload_string+0x280>)
 8014ee2:	2180      	movs	r1, #128	@ 0x80
 8014ee4:	4640      	mov	r0, r8
 8014ee6:	f016 fca1 	bl	802b82c <snprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 8014eea:	9400      	str	r4, [sp, #0]
 8014eec:	4b64      	ldr	r3, [pc, #400]	@ (8015080 <get_config_payload_string+0x284>)
 8014eee:	4a54      	ldr	r2, [pc, #336]	@ (8015040 <get_config_payload_string+0x244>)
 8014ef0:	2180      	movs	r1, #128	@ 0x80
 8014ef2:	4638      	mov	r0, r7
 8014ef4:	f016 fc9a 	bl	802b82c <snprintf>
			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, dev_system, \
 8014ef8:	f8db 3000 	ldr.w	r3, [fp]
 8014efc:	4a52      	ldr	r2, [pc, #328]	@ (8015048 <get_config_payload_string+0x24c>)
 8014efe:	6812      	ldr	r2, [r2, #0]
 8014f00:	9214      	str	r2, [sp, #80]	@ 0x50
 8014f02:	4a52      	ldr	r2, [pc, #328]	@ (801504c <get_config_payload_string+0x250>)
 8014f04:	9213      	str	r2, [sp, #76]	@ 0x4c
 8014f06:	4a52      	ldr	r2, [pc, #328]	@ (8015050 <get_config_payload_string+0x254>)
 8014f08:	9212      	str	r2, [sp, #72]	@ 0x48
 8014f0a:	4a52      	ldr	r2, [pc, #328]	@ (8015054 <get_config_payload_string+0x258>)
 8014f0c:	9211      	str	r2, [sp, #68]	@ 0x44
 8014f0e:	4a52      	ldr	r2, [pc, #328]	@ (8015058 <get_config_payload_string+0x25c>)
 8014f10:	9210      	str	r2, [sp, #64]	@ 0x40
 8014f12:	4a52      	ldr	r2, [pc, #328]	@ (801505c <get_config_payload_string+0x260>)
 8014f14:	920f      	str	r2, [sp, #60]	@ 0x3c
 8014f16:	930e      	str	r3, [sp, #56]	@ 0x38
 8014f18:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8014f1c:	960c      	str	r6, [sp, #48]	@ 0x30
 8014f1e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014f20:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8014f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f26:	f8cd a020 	str.w	sl, [sp, #32]
 8014f2a:	9707      	str	r7, [sp, #28]
 8014f2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8014f30:	9405      	str	r4, [sp, #20]
 8014f32:	f8cd 9010 	str.w	r9, [sp, #16]
 8014f36:	9403      	str	r4, [sp, #12]
 8014f38:	f8cd 9008 	str.w	r9, [sp, #8]
 8014f3c:	9301      	str	r3, [sp, #4]
 8014f3e:	f8cd a000 	str.w	sl, [sp]
 8014f42:	464b      	mov	r3, r9
 8014f44:	4a4b      	ldr	r2, [pc, #300]	@ (8015074 <get_config_payload_string+0x278>)
 8014f46:	4629      	mov	r1, r5
 8014f48:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014f4a:	f016 fc6f 	bl	802b82c <snprintf>
 8014f4e:	4604      	mov	r4, r0
			free(name);
 8014f50:	4638      	mov	r0, r7
 8014f52:	f005 fa8b 	bl	801a46c <vPortFree>
			free(com_topik);
 8014f56:	4640      	mov	r0, r8
 8014f58:	f005 fa88 	bl	801a46c <vPortFree>
			return len;
 8014f5c:	b2e0      	uxtb	r0, r4
 8014f5e:	e79e      	b.n	8014e9e <get_config_payload_string+0xa2>
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 8014f60:	4b38      	ldr	r3, [pc, #224]	@ (8015044 <get_config_payload_string+0x248>)
 8014f62:	6819      	ldr	r1, [r3, #0]
 8014f64:	4b3e      	ldr	r3, [pc, #248]	@ (8015060 <get_config_payload_string+0x264>)
 8014f66:	4a47      	ldr	r2, [pc, #284]	@ (8015084 <get_config_payload_string+0x288>)
 8014f68:	4837      	ldr	r0, [pc, #220]	@ (8015048 <get_config_payload_string+0x24c>)
 8014f6a:	6800      	ldr	r0, [r0, #0]
 8014f6c:	9010      	str	r0, [sp, #64]	@ 0x40
 8014f6e:	4837      	ldr	r0, [pc, #220]	@ (801504c <get_config_payload_string+0x250>)
 8014f70:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014f72:	4837      	ldr	r0, [pc, #220]	@ (8015050 <get_config_payload_string+0x254>)
 8014f74:	900e      	str	r0, [sp, #56]	@ 0x38
 8014f76:	4837      	ldr	r0, [pc, #220]	@ (8015054 <get_config_payload_string+0x258>)
 8014f78:	900d      	str	r0, [sp, #52]	@ 0x34
 8014f7a:	4837      	ldr	r0, [pc, #220]	@ (8015058 <get_config_payload_string+0x25c>)
 8014f7c:	900c      	str	r0, [sp, #48]	@ 0x30
 8014f7e:	4837      	ldr	r0, [pc, #220]	@ (801505c <get_config_payload_string+0x260>)
 8014f80:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014f82:	910a      	str	r1, [sp, #40]	@ 0x28
 8014f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f86:	4840      	ldr	r0, [pc, #256]	@ (8015088 <get_config_payload_string+0x28c>)
 8014f88:	9008      	str	r0, [sp, #32]
 8014f8a:	9207      	str	r2, [sp, #28]
 8014f8c:	9106      	str	r1, [sp, #24]
 8014f8e:	9305      	str	r3, [sp, #20]
 8014f90:	483e      	ldr	r0, [pc, #248]	@ (801508c <get_config_payload_string+0x290>)
 8014f92:	9004      	str	r0, [sp, #16]
 8014f94:	483e      	ldr	r0, [pc, #248]	@ (8015090 <get_config_payload_string+0x294>)
 8014f96:	9003      	str	r0, [sp, #12]
 8014f98:	9202      	str	r2, [sp, #8]
 8014f9a:	483e      	ldr	r0, [pc, #248]	@ (8015094 <get_config_payload_string+0x298>)
 8014f9c:	9001      	str	r0, [sp, #4]
 8014f9e:	9100      	str	r1, [sp, #0]
 8014fa0:	4934      	ldr	r1, [pc, #208]	@ (8015074 <get_config_payload_string+0x278>)
 8014fa2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014fa4:	f016 fdaa 	bl	802bafc <sprintf>
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8014fa8:	4b26      	ldr	r3, [pc, #152]	@ (8015044 <get_config_payload_string+0x248>)
 8014faa:	6819      	ldr	r1, [r3, #0]
 8014fac:	4b2c      	ldr	r3, [pc, #176]	@ (8015060 <get_config_payload_string+0x264>)
 8014fae:	4a3a      	ldr	r2, [pc, #232]	@ (8015098 <get_config_payload_string+0x29c>)
 8014fb0:	4825      	ldr	r0, [pc, #148]	@ (8015048 <get_config_payload_string+0x24c>)
 8014fb2:	6800      	ldr	r0, [r0, #0]
 8014fb4:	9010      	str	r0, [sp, #64]	@ 0x40
 8014fb6:	4825      	ldr	r0, [pc, #148]	@ (801504c <get_config_payload_string+0x250>)
 8014fb8:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014fba:	4825      	ldr	r0, [pc, #148]	@ (8015050 <get_config_payload_string+0x254>)
 8014fbc:	900e      	str	r0, [sp, #56]	@ 0x38
 8014fbe:	4825      	ldr	r0, [pc, #148]	@ (8015054 <get_config_payload_string+0x258>)
 8014fc0:	900d      	str	r0, [sp, #52]	@ 0x34
 8014fc2:	4825      	ldr	r0, [pc, #148]	@ (8015058 <get_config_payload_string+0x25c>)
 8014fc4:	900c      	str	r0, [sp, #48]	@ 0x30
 8014fc6:	4825      	ldr	r0, [pc, #148]	@ (801505c <get_config_payload_string+0x260>)
 8014fc8:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014fca:	910a      	str	r1, [sp, #40]	@ 0x28
 8014fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8014fce:	4833      	ldr	r0, [pc, #204]	@ (801509c <get_config_payload_string+0x2a0>)
 8014fd0:	9008      	str	r0, [sp, #32]
 8014fd2:	9207      	str	r2, [sp, #28]
 8014fd4:	9106      	str	r1, [sp, #24]
 8014fd6:	9305      	str	r3, [sp, #20]
 8014fd8:	4831      	ldr	r0, [pc, #196]	@ (80150a0 <get_config_payload_string+0x2a4>)
 8014fda:	9004      	str	r0, [sp, #16]
 8014fdc:	4823      	ldr	r0, [pc, #140]	@ (801506c <get_config_payload_string+0x270>)
 8014fde:	9003      	str	r0, [sp, #12]
 8014fe0:	9202      	str	r2, [sp, #8]
 8014fe2:	482c      	ldr	r0, [pc, #176]	@ (8015094 <get_config_payload_string+0x298>)
 8014fe4:	9001      	str	r0, [sp, #4]
 8014fe6:	9100      	str	r1, [sp, #0]
 8014fe8:	4922      	ldr	r1, [pc, #136]	@ (8015074 <get_config_payload_string+0x278>)
 8014fea:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014fec:	f016 fd86 	bl	802bafc <sprintf>
			break;
 8014ff0:	e7da      	b.n	8014fa8 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 8014ff2:	4b14      	ldr	r3, [pc, #80]	@ (8015044 <get_config_payload_string+0x248>)
 8014ff4:	6819      	ldr	r1, [r3, #0]
 8014ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8015060 <get_config_payload_string+0x264>)
 8014ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8015070 <get_config_payload_string+0x274>)
 8014ffa:	4813      	ldr	r0, [pc, #76]	@ (8015048 <get_config_payload_string+0x24c>)
 8014ffc:	6800      	ldr	r0, [r0, #0]
 8014ffe:	9010      	str	r0, [sp, #64]	@ 0x40
 8015000:	4812      	ldr	r0, [pc, #72]	@ (801504c <get_config_payload_string+0x250>)
 8015002:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015004:	4812      	ldr	r0, [pc, #72]	@ (8015050 <get_config_payload_string+0x254>)
 8015006:	900e      	str	r0, [sp, #56]	@ 0x38
 8015008:	4812      	ldr	r0, [pc, #72]	@ (8015054 <get_config_payload_string+0x258>)
 801500a:	900d      	str	r0, [sp, #52]	@ 0x34
 801500c:	4812      	ldr	r0, [pc, #72]	@ (8015058 <get_config_payload_string+0x25c>)
 801500e:	900c      	str	r0, [sp, #48]	@ 0x30
 8015010:	4812      	ldr	r0, [pc, #72]	@ (801505c <get_config_payload_string+0x260>)
 8015012:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015014:	910a      	str	r1, [sp, #40]	@ 0x28
 8015016:	9309      	str	r3, [sp, #36]	@ 0x24
 8015018:	4822      	ldr	r0, [pc, #136]	@ (80150a4 <get_config_payload_string+0x2a8>)
 801501a:	9008      	str	r0, [sp, #32]
 801501c:	9207      	str	r2, [sp, #28]
 801501e:	9106      	str	r1, [sp, #24]
 8015020:	9305      	str	r3, [sp, #20]
 8015022:	4821      	ldr	r0, [pc, #132]	@ (80150a8 <get_config_payload_string+0x2ac>)
 8015024:	9004      	str	r0, [sp, #16]
 8015026:	4811      	ldr	r0, [pc, #68]	@ (801506c <get_config_payload_string+0x270>)
 8015028:	9003      	str	r0, [sp, #12]
 801502a:	9202      	str	r2, [sp, #8]
 801502c:	4819      	ldr	r0, [pc, #100]	@ (8015094 <get_config_payload_string+0x298>)
 801502e:	9001      	str	r0, [sp, #4]
 8015030:	9100      	str	r1, [sp, #0]
 8015032:	4910      	ldr	r1, [pc, #64]	@ (8015074 <get_config_payload_string+0x278>)
 8015034:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015036:	f016 fd61 	bl	802bafc <sprintf>
			break;
 801503a:	e7b5      	b.n	8014fa8 <get_config_payload_string+0x1ac>
 801503c:	08037394 	.word	0x08037394
 8015040:	080373a0 	.word	0x080373a0
 8015044:	200028c4 	.word	0x200028c4
 8015048:	200028c0 	.word	0x200028c0
 801504c:	080373a8 	.word	0x080373a8
 8015050:	080373ac 	.word	0x080373ac
 8015054:	080373b0 	.word	0x080373b0
 8015058:	080373c0 	.word	0x080373c0
 801505c:	080373d4 	.word	0x080373d4
 8015060:	08037334 	.word	0x08037334
 8015064:	08036364 	.word	0x08036364
 8015068:	0803732c 	.word	0x0803732c
 801506c:	08039808 	.word	0x08039808
 8015070:	08037364 	.word	0x08037364
 8015074:	08037538 	.word	0x08037538
 8015078:	080373e0 	.word	0x080373e0
 801507c:	08037510 	.word	0x08037510
 8015080:	080373e8 	.word	0x080373e8
 8015084:	0803734c 	.word	0x0803734c
 8015088:	080373fc 	.word	0x080373fc
 801508c:	08037400 	.word	0x08037400
 8015090:	08037410 	.word	0x08037410
 8015094:	08037434 	.word	0x08037434
 8015098:	0803735c 	.word	0x0803735c
 801509c:	0803743c 	.word	0x0803743c
 80150a0:	08037440 	.word	0x08037440
 80150a4:	08037450 	.word	0x08037450
 80150a8:	08037454 	.word	0x08037454
 80150ac:	08037080 	.word	0x08037080
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 80150b0:	4b38      	ldr	r3, [pc, #224]	@ (8015194 <get_config_payload_string+0x398>)
 80150b2:	6819      	ldr	r1, [r3, #0]
 80150b4:	4b38      	ldr	r3, [pc, #224]	@ (8015198 <get_config_payload_string+0x39c>)
 80150b6:	4a39      	ldr	r2, [pc, #228]	@ (801519c <get_config_payload_string+0x3a0>)
 80150b8:	4839      	ldr	r0, [pc, #228]	@ (80151a0 <get_config_payload_string+0x3a4>)
 80150ba:	6800      	ldr	r0, [r0, #0]
 80150bc:	9010      	str	r0, [sp, #64]	@ 0x40
 80150be:	4839      	ldr	r0, [pc, #228]	@ (80151a4 <get_config_payload_string+0x3a8>)
 80150c0:	900f      	str	r0, [sp, #60]	@ 0x3c
 80150c2:	4839      	ldr	r0, [pc, #228]	@ (80151a8 <get_config_payload_string+0x3ac>)
 80150c4:	900e      	str	r0, [sp, #56]	@ 0x38
 80150c6:	4839      	ldr	r0, [pc, #228]	@ (80151ac <get_config_payload_string+0x3b0>)
 80150c8:	900d      	str	r0, [sp, #52]	@ 0x34
 80150ca:	4839      	ldr	r0, [pc, #228]	@ (80151b0 <get_config_payload_string+0x3b4>)
 80150cc:	900c      	str	r0, [sp, #48]	@ 0x30
 80150ce:	4839      	ldr	r0, [pc, #228]	@ (80151b4 <get_config_payload_string+0x3b8>)
 80150d0:	900b      	str	r0, [sp, #44]	@ 0x2c
 80150d2:	910a      	str	r1, [sp, #40]	@ 0x28
 80150d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80150d6:	4838      	ldr	r0, [pc, #224]	@ (80151b8 <get_config_payload_string+0x3bc>)
 80150d8:	9008      	str	r0, [sp, #32]
 80150da:	9207      	str	r2, [sp, #28]
 80150dc:	9106      	str	r1, [sp, #24]
 80150de:	9305      	str	r3, [sp, #20]
 80150e0:	4836      	ldr	r0, [pc, #216]	@ (80151bc <get_config_payload_string+0x3c0>)
 80150e2:	9004      	str	r0, [sp, #16]
 80150e4:	4836      	ldr	r0, [pc, #216]	@ (80151c0 <get_config_payload_string+0x3c4>)
 80150e6:	9003      	str	r0, [sp, #12]
 80150e8:	9202      	str	r2, [sp, #8]
 80150ea:	4836      	ldr	r0, [pc, #216]	@ (80151c4 <get_config_payload_string+0x3c8>)
 80150ec:	9001      	str	r0, [sp, #4]
 80150ee:	9100      	str	r1, [sp, #0]
 80150f0:	4935      	ldr	r1, [pc, #212]	@ (80151c8 <get_config_payload_string+0x3cc>)
 80150f2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80150f4:	f016 fd02 	bl	802bafc <sprintf>
			break;
 80150f8:	e756      	b.n	8014fa8 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 80150fa:	4b26      	ldr	r3, [pc, #152]	@ (8015194 <get_config_payload_string+0x398>)
 80150fc:	6819      	ldr	r1, [r3, #0]
 80150fe:	4b26      	ldr	r3, [pc, #152]	@ (8015198 <get_config_payload_string+0x39c>)
 8015100:	4a32      	ldr	r2, [pc, #200]	@ (80151cc <get_config_payload_string+0x3d0>)
 8015102:	4827      	ldr	r0, [pc, #156]	@ (80151a0 <get_config_payload_string+0x3a4>)
 8015104:	6800      	ldr	r0, [r0, #0]
 8015106:	9010      	str	r0, [sp, #64]	@ 0x40
 8015108:	4826      	ldr	r0, [pc, #152]	@ (80151a4 <get_config_payload_string+0x3a8>)
 801510a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801510c:	4826      	ldr	r0, [pc, #152]	@ (80151a8 <get_config_payload_string+0x3ac>)
 801510e:	900e      	str	r0, [sp, #56]	@ 0x38
 8015110:	4826      	ldr	r0, [pc, #152]	@ (80151ac <get_config_payload_string+0x3b0>)
 8015112:	900d      	str	r0, [sp, #52]	@ 0x34
 8015114:	4826      	ldr	r0, [pc, #152]	@ (80151b0 <get_config_payload_string+0x3b4>)
 8015116:	900c      	str	r0, [sp, #48]	@ 0x30
 8015118:	4826      	ldr	r0, [pc, #152]	@ (80151b4 <get_config_payload_string+0x3b8>)
 801511a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801511c:	910a      	str	r1, [sp, #40]	@ 0x28
 801511e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015120:	482b      	ldr	r0, [pc, #172]	@ (80151d0 <get_config_payload_string+0x3d4>)
 8015122:	9008      	str	r0, [sp, #32]
 8015124:	9207      	str	r2, [sp, #28]
 8015126:	9106      	str	r1, [sp, #24]
 8015128:	9305      	str	r3, [sp, #20]
 801512a:	482a      	ldr	r0, [pc, #168]	@ (80151d4 <get_config_payload_string+0x3d8>)
 801512c:	9004      	str	r0, [sp, #16]
 801512e:	4824      	ldr	r0, [pc, #144]	@ (80151c0 <get_config_payload_string+0x3c4>)
 8015130:	9003      	str	r0, [sp, #12]
 8015132:	9202      	str	r2, [sp, #8]
 8015134:	4823      	ldr	r0, [pc, #140]	@ (80151c4 <get_config_payload_string+0x3c8>)
 8015136:	9001      	str	r0, [sp, #4]
 8015138:	9100      	str	r1, [sp, #0]
 801513a:	4923      	ldr	r1, [pc, #140]	@ (80151c8 <get_config_payload_string+0x3cc>)
 801513c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801513e:	f016 fcdd 	bl	802bafc <sprintf>
			break;
 8015142:	e731      	b.n	8014fa8 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8015144:	4b13      	ldr	r3, [pc, #76]	@ (8015194 <get_config_payload_string+0x398>)
 8015146:	6819      	ldr	r1, [r3, #0]
 8015148:	4b13      	ldr	r3, [pc, #76]	@ (8015198 <get_config_payload_string+0x39c>)
 801514a:	4a23      	ldr	r2, [pc, #140]	@ (80151d8 <get_config_payload_string+0x3dc>)
 801514c:	4814      	ldr	r0, [pc, #80]	@ (80151a0 <get_config_payload_string+0x3a4>)
 801514e:	6800      	ldr	r0, [r0, #0]
 8015150:	9010      	str	r0, [sp, #64]	@ 0x40
 8015152:	4814      	ldr	r0, [pc, #80]	@ (80151a4 <get_config_payload_string+0x3a8>)
 8015154:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015156:	4814      	ldr	r0, [pc, #80]	@ (80151a8 <get_config_payload_string+0x3ac>)
 8015158:	900e      	str	r0, [sp, #56]	@ 0x38
 801515a:	4814      	ldr	r0, [pc, #80]	@ (80151ac <get_config_payload_string+0x3b0>)
 801515c:	900d      	str	r0, [sp, #52]	@ 0x34
 801515e:	4814      	ldr	r0, [pc, #80]	@ (80151b0 <get_config_payload_string+0x3b4>)
 8015160:	900c      	str	r0, [sp, #48]	@ 0x30
 8015162:	4814      	ldr	r0, [pc, #80]	@ (80151b4 <get_config_payload_string+0x3b8>)
 8015164:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015166:	910a      	str	r1, [sp, #40]	@ 0x28
 8015168:	9309      	str	r3, [sp, #36]	@ 0x24
 801516a:	481c      	ldr	r0, [pc, #112]	@ (80151dc <get_config_payload_string+0x3e0>)
 801516c:	9008      	str	r0, [sp, #32]
 801516e:	9207      	str	r2, [sp, #28]
 8015170:	9106      	str	r1, [sp, #24]
 8015172:	9305      	str	r3, [sp, #20]
 8015174:	481a      	ldr	r0, [pc, #104]	@ (80151e0 <get_config_payload_string+0x3e4>)
 8015176:	9004      	str	r0, [sp, #16]
 8015178:	4811      	ldr	r0, [pc, #68]	@ (80151c0 <get_config_payload_string+0x3c4>)
 801517a:	9003      	str	r0, [sp, #12]
 801517c:	9202      	str	r2, [sp, #8]
 801517e:	4811      	ldr	r0, [pc, #68]	@ (80151c4 <get_config_payload_string+0x3c8>)
 8015180:	9001      	str	r0, [sp, #4]
 8015182:	9100      	str	r1, [sp, #0]
 8015184:	4910      	ldr	r1, [pc, #64]	@ (80151c8 <get_config_payload_string+0x3cc>)
 8015186:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015188:	f016 fcb8 	bl	802bafc <sprintf>
			break;
 801518c:	e70c      	b.n	8014fa8 <get_config_payload_string+0x1ac>
	switch (payload_type) {
 801518e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015192:	e684      	b.n	8014e9e <get_config_payload_string+0xa2>
 8015194:	200028c4 	.word	0x200028c4
 8015198:	08037334 	.word	0x08037334
 801519c:	0803736c 	.word	0x0803736c
 80151a0:	200028c0 	.word	0x200028c0
 80151a4:	080373a8 	.word	0x080373a8
 80151a8:	080373ac 	.word	0x080373ac
 80151ac:	080373b0 	.word	0x080373b0
 80151b0:	080373c0 	.word	0x080373c0
 80151b4:	080373d4 	.word	0x080373d4
 80151b8:	08037478 	.word	0x08037478
 80151bc:	0803747c 	.word	0x0803747c
 80151c0:	08039808 	.word	0x08039808
 80151c4:	08037434 	.word	0x08037434
 80151c8:	08037538 	.word	0x08037538
 80151cc:	0803737c 	.word	0x0803737c
 80151d0:	0803749c 	.word	0x0803749c
 80151d4:	080374a0 	.word	0x080374a0
 80151d8:	0803738c 	.word	0x0803738c
 80151dc:	080374cc 	.word	0x080374cc
 80151e0:	080374d0 	.word	0x080374d0

080151e4 <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 80151e4:	b530      	push	{r4, r5, lr}
 80151e6:	b083      	sub	sp, #12
 80151e8:	461c      	mov	r4, r3
 80151ea:	f89d 5018 	ldrb.w	r5, [sp, #24]

	char * sens_name = NULL;
	switch (sensor_type) {
 80151ee:	2a01      	cmp	r2, #1
 80151f0:	d00b      	beq.n	801520a <gen_bin_sensor_status_payload_JSON+0x26>
 80151f2:	2a02      	cmp	r2, #2
 80151f4:	d10b      	bne.n	801520e <gen_bin_sensor_status_payload_JSON+0x2a>
		case INPUT_SENSOR:
			sens_name = (char *)component_input;
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
 80151f6:	4b0a      	ldr	r3, [pc, #40]	@ (8015220 <gen_bin_sensor_status_payload_JSON+0x3c>)
			break;
		default:
			break;
	}

	if (state){
 80151f8:	b15d      	cbz	r5, 8015212 <gen_bin_sensor_status_payload_JSON+0x2e>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 80151fa:	4a0a      	ldr	r2, [pc, #40]	@ (8015224 <gen_bin_sensor_status_payload_JSON+0x40>)
 80151fc:	9201      	str	r2, [sp, #4]
 80151fe:	9400      	str	r4, [sp, #0]
 8015200:	4a09      	ldr	r2, [pc, #36]	@ (8015228 <gen_bin_sensor_status_payload_JSON+0x44>)
 8015202:	f016 fb13 	bl	802b82c <snprintf>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
	}
}
 8015206:	b003      	add	sp, #12
 8015208:	bd30      	pop	{r4, r5, pc}
			sens_name = (char *)component_input;
 801520a:	4b08      	ldr	r3, [pc, #32]	@ (801522c <gen_bin_sensor_status_payload_JSON+0x48>)
 801520c:	e7f4      	b.n	80151f8 <gen_bin_sensor_status_payload_JSON+0x14>
	switch (sensor_type) {
 801520e:	2300      	movs	r3, #0
 8015210:	e7f2      	b.n	80151f8 <gen_bin_sensor_status_payload_JSON+0x14>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 8015212:	4a07      	ldr	r2, [pc, #28]	@ (8015230 <gen_bin_sensor_status_payload_JSON+0x4c>)
 8015214:	9201      	str	r2, [sp, #4]
 8015216:	9400      	str	r4, [sp, #0]
 8015218:	4a03      	ldr	r2, [pc, #12]	@ (8015228 <gen_bin_sensor_status_payload_JSON+0x44>)
 801521a:	f016 fb07 	bl	802b82c <snprintf>
 801521e:	e7f2      	b.n	8015206 <gen_bin_sensor_status_payload_JSON+0x22>
 8015220:	08037080 	.word	0x08037080
 8015224:	08037138 	.word	0x08037138
 8015228:	08037500 	.word	0x08037500
 801522c:	0803732c 	.word	0x0803732c
 8015230:	08037150 	.word	0x08037150

08015234 <generate_comand_topik_for_subscrabe>:
//	strcat(buff, "\n}");
//
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 8015234:	b500      	push	{lr}
 8015236:	b085      	sub	sp, #20

	switch(sensor_type){

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 8015238:	9302      	str	r3, [sp, #8]
 801523a:	4b06      	ldr	r3, [pc, #24]	@ (8015254 <generate_comand_topik_for_subscrabe+0x20>)
 801523c:	9301      	str	r3, [sp, #4]
 801523e:	4b06      	ldr	r3, [pc, #24]	@ (8015258 <generate_comand_topik_for_subscrabe+0x24>)
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	9300      	str	r3, [sp, #0]
 8015244:	4b05      	ldr	r3, [pc, #20]	@ (801525c <generate_comand_topik_for_subscrabe+0x28>)
 8015246:	4a06      	ldr	r2, [pc, #24]	@ (8015260 <generate_comand_topik_for_subscrabe+0x2c>)
 8015248:	f016 faf0 	bl	802b82c <snprintf>
			break;
	}
}
 801524c:	b005      	add	sp, #20
 801524e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015252:	bf00      	nop
 8015254:	08037080 	.word	0x08037080
 8015258:	200028c4 	.word	0x200028c4
 801525c:	08037334 	.word	0x08037334
 8015260:	080374dc 	.word	0x080374dc

08015264 <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 8015264:	b500      	push	{lr}
 8015266:	b085      	sub	sp, #20

	strcpy(topik, "\0");
 8015268:	f04f 0c00 	mov.w	ip, #0
 801526c:	f880 c000 	strb.w	ip, [r0]

	switch (sensor_type) {
 8015270:	2a01      	cmp	r2, #1
 8015272:	d006      	beq.n	8015282 <generate_status_topik+0x1e>
 8015274:	2a02      	cmp	r2, #2
 8015276:	d00f      	beq.n	8015298 <generate_status_topik+0x34>
 8015278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
			return -1;
			break;
	}

	return 0;
}
 801527c:	b005      	add	sp, #20
 801527e:	f85d fb04 	ldr.w	pc, [sp], #4
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 8015282:	9302      	str	r3, [sp, #8]
 8015284:	4b0a      	ldr	r3, [pc, #40]	@ (80152b0 <generate_status_topik+0x4c>)
 8015286:	9301      	str	r3, [sp, #4]
 8015288:	4b0a      	ldr	r3, [pc, #40]	@ (80152b4 <generate_status_topik+0x50>)
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	9300      	str	r3, [sp, #0]
 801528e:	4b0a      	ldr	r3, [pc, #40]	@ (80152b8 <generate_status_topik+0x54>)
 8015290:	4a0a      	ldr	r2, [pc, #40]	@ (80152bc <generate_status_topik+0x58>)
 8015292:	f016 facb 	bl	802b82c <snprintf>
 8015296:	e7f1      	b.n	801527c <generate_status_topik+0x18>
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 8015298:	9302      	str	r3, [sp, #8]
 801529a:	4b09      	ldr	r3, [pc, #36]	@ (80152c0 <generate_status_topik+0x5c>)
 801529c:	9301      	str	r3, [sp, #4]
 801529e:	4b05      	ldr	r3, [pc, #20]	@ (80152b4 <generate_status_topik+0x50>)
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	9300      	str	r3, [sp, #0]
 80152a4:	4b04      	ldr	r3, [pc, #16]	@ (80152b8 <generate_status_topik+0x54>)
 80152a6:	4a05      	ldr	r2, [pc, #20]	@ (80152bc <generate_status_topik+0x58>)
 80152a8:	f016 fac0 	bl	802b82c <snprintf>
 80152ac:	e7e6      	b.n	801527c <generate_status_topik+0x18>
 80152ae:	bf00      	nop
 80152b0:	0803732c 	.word	0x0803732c
 80152b4:	200028c4 	.word	0x200028c4
 80152b8:	08037334 	.word	0x08037334
 80152bc:	080374ec 	.word	0x080374ec
 80152c0:	08037080 	.word	0x08037080

080152c4 <timer_fn>:
  }
  (void) c;
}


void timer_fn(void *arg) {
 80152c4:	b508      	push	{r3, lr}
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 80152c6:	4b08      	ldr	r3, [pc, #32]	@ (80152e8 <timer_fn+0x24>)
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	b12b      	cbz	r3, 80152d8 <timer_fn+0x14>
  if (s_sntp_conn != NULL) mg_sntp_request(s_sntp_conn);
 80152cc:	4b06      	ldr	r3, [pc, #24]	@ (80152e8 <timer_fn+0x24>)
 80152ce:	6818      	ldr	r0, [r3, #0]
 80152d0:	b108      	cbz	r0, 80152d6 <timer_fn+0x12>
 80152d2:	f014 f8e9 	bl	80294a8 <mg_sntp_request>
}
 80152d6:	bd08      	pop	{r3, pc}
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 80152d8:	4a04      	ldr	r2, [pc, #16]	@ (80152ec <timer_fn+0x28>)
 80152da:	4619      	mov	r1, r3
 80152dc:	f014 f9b6 	bl	802964c <mg_sntp_connect>
 80152e0:	4b01      	ldr	r3, [pc, #4]	@ (80152e8 <timer_fn+0x24>)
 80152e2:	6018      	str	r0, [r3, #0]
 80152e4:	e7f2      	b.n	80152cc <timer_fn+0x8>
 80152e6:	bf00      	nop
 80152e8:	200028c8 	.word	0x200028c8
 80152ec:	080152f1 	.word	0x080152f1

080152f0 <sfn>:
static void sfn(struct mg_connection *c, int ev, void *ev_data) {
 80152f0:	b570      	push	{r4, r5, r6, lr}
  if (ev == MG_EV_SNTP_TIME) {
 80152f2:	2912      	cmp	r1, #18
 80152f4:	d002      	beq.n	80152fc <sfn+0xc>
  } else if (ev == MG_EV_CLOSE) {
 80152f6:	2909      	cmp	r1, #9
 80152f8:	d046      	beq.n	8015388 <sfn+0x98>
}
 80152fa:	bd70      	pop	{r4, r5, r6, pc}
 80152fc:	4614      	mov	r4, r2
	  logging(L_INFO, "Response from NTP server received");
 80152fe:	4926      	ldr	r1, [pc, #152]	@ (8015398 <sfn+0xa8>)
 8015300:	2001      	movs	r0, #1
 8015302:	f7fc fdcf 	bl	8011ea4 <logging>
    uint64_t curtime = mg_now();
 8015306:	f014 f80b 	bl	8029320 <mg_now>
 801530a:	4606      	mov	r6, r0
 801530c:	460d      	mov	r5, r1
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 801530e:	4b23      	ldr	r3, [pc, #140]	@ (801539c <sfn+0xac>)
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	2b01      	cmp	r3, #1
 8015314:	dc20      	bgt.n	8015358 <sfn+0x68>
    logging(L_INFO,"SNTP-updated current time is: %" PRIu64 " ms from epoch", curtime);
 8015316:	4632      	mov	r2, r6
 8015318:	462b      	mov	r3, r5
 801531a:	4921      	ldr	r1, [pc, #132]	@ (80153a0 <sfn+0xb0>)
 801531c:	2001      	movs	r0, #1
 801531e:	f7fc fdc1 	bl	8011ea4 <logging>
      uint64_t t = *(uint64_t *) ev_data;
 8015322:	6825      	ldr	r5, [r4, #0]
 8015324:	6864      	ldr	r4, [r4, #4]
      s_boot_timestamp = (time_t) ((t - mg_millis()) / 1000);
 8015326:	f010 fbaa 	bl	8025a7e <mg_millis>
 801532a:	1a28      	subs	r0, r5, r0
 801532c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015330:	f04f 0300 	mov.w	r3, #0
 8015334:	eb64 0101 	sbc.w	r1, r4, r1
 8015338:	f7fb fd0e 	bl	8010d58 <__aeabi_uldivmod>
 801533c:	4b19      	ldr	r3, [pc, #100]	@ (80153a4 <sfn+0xb4>)
 801533e:	e9c3 0100 	strd	r0, r1, [r3]
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 8015342:	4b16      	ldr	r3, [pc, #88]	@ (801539c <sfn+0xac>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	2b01      	cmp	r3, #1
 8015348:	dc12      	bgt.n	8015370 <sfn+0x80>
      logging(L_INFO,"Got SNTP time: %" PRIu64 " ms from epoch", t);
 801534a:	462a      	mov	r2, r5
 801534c:	4623      	mov	r3, r4
 801534e:	4916      	ldr	r1, [pc, #88]	@ (80153a8 <sfn+0xb8>)
 8015350:	2001      	movs	r0, #1
 8015352:	f7fc fda7 	bl	8011ea4 <logging>
 8015356:	e7d0      	b.n	80152fa <sfn+0xa>
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 8015358:	4b14      	ldr	r3, [pc, #80]	@ (80153ac <sfn+0xbc>)
 801535a:	221b      	movs	r2, #27
 801535c:	4914      	ldr	r1, [pc, #80]	@ (80153b0 <sfn+0xc0>)
 801535e:	2002      	movs	r0, #2
 8015360:	f010 fb92 	bl	8025a88 <mg_log_prefix>
 8015364:	4632      	mov	r2, r6
 8015366:	462b      	mov	r3, r5
 8015368:	480d      	ldr	r0, [pc, #52]	@ (80153a0 <sfn+0xb0>)
 801536a:	f00e fa77 	bl	802385c <mg_log>
 801536e:	e7d2      	b.n	8015316 <sfn+0x26>
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 8015370:	4b0e      	ldr	r3, [pc, #56]	@ (80153ac <sfn+0xbc>)
 8015372:	2221      	movs	r2, #33	@ 0x21
 8015374:	490e      	ldr	r1, [pc, #56]	@ (80153b0 <sfn+0xc0>)
 8015376:	2002      	movs	r0, #2
 8015378:	f010 fb86 	bl	8025a88 <mg_log_prefix>
 801537c:	462a      	mov	r2, r5
 801537e:	4623      	mov	r3, r4
 8015380:	480c      	ldr	r0, [pc, #48]	@ (80153b4 <sfn+0xc4>)
 8015382:	f00e fa6b 	bl	802385c <mg_log>
 8015386:	e7e0      	b.n	801534a <sfn+0x5a>
	  logging(L_INFO, "NTP connection is closed");
 8015388:	490b      	ldr	r1, [pc, #44]	@ (80153b8 <sfn+0xc8>)
 801538a:	2001      	movs	r0, #1
 801538c:	f7fc fd8a 	bl	8011ea4 <logging>
    s_sntp_conn = NULL;
 8015390:	4b0a      	ldr	r3, [pc, #40]	@ (80153bc <sfn+0xcc>)
 8015392:	2200      	movs	r2, #0
 8015394:	601a      	str	r2, [r3, #0]
}
 8015396:	e7b0      	b.n	80152fa <sfn+0xa>
 8015398:	080376b8 	.word	0x080376b8
 801539c:	2000012c 	.word	0x2000012c
 80153a0:	080376fc 	.word	0x080376fc
 80153a4:	200028d0 	.word	0x200028d0
 80153a8:	08037754 	.word	0x08037754
 80153ac:	080377b0 	.word	0x080377b0
 80153b0:	080376dc 	.word	0x080376dc
 80153b4:	08037730 	.word	0x08037730
 80153b8:	08037778 	.word	0x08037778
 80153bc:	200028c8 	.word	0x200028c8

080153c0 <start_sntp>:

void start_sntp(void *arg){
 80153c0:	b530      	push	{r4, r5, lr}
 80153c2:	b085      	sub	sp, #20
 80153c4:	4604      	mov	r4, r0
	logging(L_INFO, "starting NTP client service");
 80153c6:	490d      	ldr	r1, [pc, #52]	@ (80153fc <start_sntp+0x3c>)
 80153c8:	2001      	movs	r0, #1
 80153ca:	f7fc fd6b 	bl	8011ea4 <logging>
	struct mg_mgr *mgr = (struct mg_mgr*)arg;

	mg_timer_add(mgr, 20000,  MG_TIMER_ONCE, timer_fn, mgr); //Run once with delay 20 seconds
 80153ce:	9402      	str	r4, [sp, #8]
 80153d0:	4d0b      	ldr	r5, [pc, #44]	@ (8015400 <start_sntp+0x40>)
 80153d2:	9501      	str	r5, [sp, #4]
 80153d4:	2300      	movs	r3, #0
 80153d6:	9300      	str	r3, [sp, #0]
 80153d8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80153dc:	2300      	movs	r3, #0
 80153de:	4620      	mov	r0, r4
 80153e0:	f00f fdfc 	bl	8024fdc <mg_timer_add>
	mg_timer_add(mgr, 1080000, MG_TIMER_REPEAT, timer_fn, mgr); //Repeat every 30 minutes 1080 seconds
 80153e4:	9402      	str	r4, [sp, #8]
 80153e6:	9501      	str	r5, [sp, #4]
 80153e8:	2301      	movs	r3, #1
 80153ea:	9300      	str	r3, [sp, #0]
 80153ec:	4a05      	ldr	r2, [pc, #20]	@ (8015404 <start_sntp+0x44>)
 80153ee:	2300      	movs	r3, #0
 80153f0:	4620      	mov	r0, r4
 80153f2:	f00f fdf3 	bl	8024fdc <mg_timer_add>

}
 80153f6:	b005      	add	sp, #20
 80153f8:	bd30      	pop	{r4, r5, pc}
 80153fa:	bf00      	nop
 80153fc:	08037794 	.word	0x08037794
 8015400:	080152c5 	.word	0x080152c5
 8015404:	00107ac0 	.word	0x00107ac0

08015408 <my_calloc>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8015408:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801540a:	fb01 f400 	mul.w	r4, r1, r0
 801540e:	4620      	mov	r0, r4
 8015410:	f004 ffaa 	bl	801a368 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8015414:	4605      	mov	r5, r0
 8015416:	b118      	cbz	r0, 8015420 <my_calloc+0x18>
 8015418:	4622      	mov	r2, r4
 801541a:	2100      	movs	r1, #0
 801541c:	f016 ff30 	bl	802c280 <memset>
}
 8015420:	4628      	mov	r0, r5
 8015422:	bd38      	pop	{r3, r4, r5, pc}

08015424 <dev_description_handler>:
		}
	}
}


static void dev_description_handler(struct mg_connection *c, struct mg_http_message *hm){
 8015424:	b570      	push	{r4, r5, r6, lr}
 8015426:	b088      	sub	sp, #32
 8015428:	4605      	mov	r5, r0
 801542a:	460c      	mov	r4, r1
	logging(L_DEBUG, "Call dev_description_handler");
 801542c:	4917      	ldr	r1, [pc, #92]	@ (801548c <dev_description_handler+0x68>)
 801542e:	2000      	movs	r0, #0
 8015430:	f7fc fd38 	bl	8011ea4 <logging>
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8015434:	ae06      	add	r6, sp, #24
 8015436:	4916      	ldr	r1, [pc, #88]	@ (8015490 <dev_description_handler+0x6c>)
 8015438:	4630      	mov	r0, r6
 801543a:	f00e fbed 	bl	8023c18 <mg_str_s>
 801543e:	2300      	movs	r3, #0
 8015440:	9300      	str	r3, [sp, #0]
 8015442:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015446:	e894 0003 	ldmia.w	r4, {r0, r1}
 801544a:	f00e fe07 	bl	802405c <mg_match>
 801544e:	b1a8      	cbz	r0, 801547c <dev_description_handler+0x58>
		mg_http_reply(c, 200, "", device_description, ssdp_dev_name, ssdp_dev_manufacturer_name, ssdp_dev_model_name, ssdp_dev_ver, dev_id, ip_addr_str);
 8015450:	4b10      	ldr	r3, [pc, #64]	@ (8015494 <dev_description_handler+0x70>)
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	9305      	str	r3, [sp, #20]
 8015456:	4b10      	ldr	r3, [pc, #64]	@ (8015498 <dev_description_handler+0x74>)
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	9304      	str	r3, [sp, #16]
 801545c:	4b0f      	ldr	r3, [pc, #60]	@ (801549c <dev_description_handler+0x78>)
 801545e:	9303      	str	r3, [sp, #12]
 8015460:	4b0f      	ldr	r3, [pc, #60]	@ (80154a0 <dev_description_handler+0x7c>)
 8015462:	9302      	str	r3, [sp, #8]
 8015464:	4b0f      	ldr	r3, [pc, #60]	@ (80154a4 <dev_description_handler+0x80>)
 8015466:	9301      	str	r3, [sp, #4]
 8015468:	4b0f      	ldr	r3, [pc, #60]	@ (80154a8 <dev_description_handler+0x84>)
 801546a:	9300      	str	r3, [sp, #0]
 801546c:	4b0f      	ldr	r3, [pc, #60]	@ (80154ac <dev_description_handler+0x88>)
 801546e:	4a10      	ldr	r2, [pc, #64]	@ (80154b0 <dev_description_handler+0x8c>)
 8015470:	21c8      	movs	r1, #200	@ 0xc8
 8015472:	4628      	mov	r0, r5
 8015474:	f00e fa46 	bl	8023904 <mg_http_reply>
	}else{
		mg_http_reply(c, 400, "", //TODO delete for release,
								"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}

}
 8015478:	b008      	add	sp, #32
 801547a:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, "", //TODO delete for release,
 801547c:	4b0d      	ldr	r3, [pc, #52]	@ (80154b4 <dev_description_handler+0x90>)
 801547e:	4a0c      	ldr	r2, [pc, #48]	@ (80154b0 <dev_description_handler+0x8c>)
 8015480:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8015484:	4628      	mov	r0, r5
 8015486:	f00e fa3d 	bl	8023904 <mg_http_reply>
}
 801548a:	e7f5      	b.n	8015478 <dev_description_handler+0x54>
 801548c:	080377b4 	.word	0x080377b4
 8015490:	08036368 	.word	0x08036368
 8015494:	200028e4 	.word	0x200028e4
 8015498:	200028ec 	.word	0x200028ec
 801549c:	080373a8 	.word	0x080373a8
 80154a0:	080373c0 	.word	0x080373c0
 80154a4:	080373b0 	.word	0x080373b0
 80154a8:	080373d4 	.word	0x080373d4
 80154ac:	08037abc 	.word	0x08037abc
 80154b0:	08036364 	.word	0x08036364
 80154b4:	08036808 	.word	0x08036808

080154b8 <dev_404_handler>:


static void dev_404_handler(struct mg_connection *c, struct mg_http_message *hm){
 80154b8:	b510      	push	{r4, lr}
 80154ba:	4604      	mov	r4, r0
	logging(L_DEBUG, "Call  dev_404_handler");
 80154bc:	4905      	ldr	r1, [pc, #20]	@ (80154d4 <dev_404_handler+0x1c>)
 80154be:	2000      	movs	r0, #0
 80154c0:	f7fc fcf0 	bl	8011ea4 <logging>
	mg_http_reply(c, 404, "", //TODO delete for release,
 80154c4:	4b04      	ldr	r3, [pc, #16]	@ (80154d8 <dev_404_handler+0x20>)
 80154c6:	4a05      	ldr	r2, [pc, #20]	@ (80154dc <dev_404_handler+0x24>)
 80154c8:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80154cc:	4620      	mov	r0, r4
 80154ce:	f00e fa19 	bl	8023904 <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Not found\"}\r\n");

}
 80154d2:	bd10      	pop	{r4, pc}
 80154d4:	080377d4 	.word	0x080377d4
 80154d8:	080377ec 	.word	0x080377ec
 80154dc:	08036364 	.word	0x08036364

080154e0 <ssdp_web_handler>:

static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_HTTP_MSG) {
 80154e0:	290b      	cmp	r1, #11
 80154e2:	d000      	beq.n	80154e6 <ssdp_web_handler+0x6>
 80154e4:	4770      	bx	lr
static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){
 80154e6:	b570      	push	{r4, r5, r6, lr}
 80154e8:	b086      	sub	sp, #24
 80154ea:	4605      	mov	r5, r0
 80154ec:	4614      	mov	r4, r2
		logging(L_DEBUG, "Call ssdp_web_handler MG_EV_HTTP_MSG");
 80154ee:	4917      	ldr	r1, [pc, #92]	@ (801554c <ssdp_web_handler+0x6c>)
 80154f0:	2000      	movs	r0, #0
 80154f2:	f7fc fcd7 	bl	8011ea4 <logging>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;

		if (mg_match(hm->uri, mg_str("/device_description.xml"), NULL)) {
 80154f6:	ae02      	add	r6, sp, #8
 80154f8:	4915      	ldr	r1, [pc, #84]	@ (8015550 <ssdp_web_handler+0x70>)
 80154fa:	4630      	mov	r0, r6
 80154fc:	f00e fb8c 	bl	8023c18 <mg_str_s>
 8015500:	2300      	movs	r3, #0
 8015502:	9300      	str	r3, [sp, #0]
 8015504:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015508:	f104 0108 	add.w	r1, r4, #8
 801550c:	c903      	ldmia	r1, {r0, r1}
 801550e:	f00e fda5 	bl	802405c <mg_match>
 8015512:	b128      	cbz	r0, 8015520 <ssdp_web_handler+0x40>
			dev_description_handler(c, hm);
 8015514:	4621      	mov	r1, r4
 8015516:	4628      	mov	r0, r5
 8015518:	f7ff ff84 	bl	8015424 <dev_description_handler>
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
			dev_404_handler(c, hm);
		}
	}
}
 801551c:	b006      	add	sp, #24
 801551e:	bd70      	pop	{r4, r5, r6, pc}
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
 8015520:	ae04      	add	r6, sp, #16
 8015522:	490c      	ldr	r1, [pc, #48]	@ (8015554 <ssdp_web_handler+0x74>)
 8015524:	4630      	mov	r0, r6
 8015526:	f00e fb77 	bl	8023c18 <mg_str_s>
 801552a:	2300      	movs	r3, #0
 801552c:	9300      	str	r3, [sp, #0]
 801552e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015532:	f104 0108 	add.w	r1, r4, #8
 8015536:	c903      	ldmia	r1, {r0, r1}
 8015538:	f00e fd90 	bl	802405c <mg_match>
 801553c:	2800      	cmp	r0, #0
 801553e:	d0ed      	beq.n	801551c <ssdp_web_handler+0x3c>
			dev_404_handler(c, hm);
 8015540:	4621      	mov	r1, r4
 8015542:	4628      	mov	r0, r5
 8015544:	f7ff ffb8 	bl	80154b8 <dev_404_handler>
}
 8015548:	e7e8      	b.n	801551c <ssdp_web_handler+0x3c>
 801554a:	bf00      	nop
 801554c:	08037818 	.word	0x08037818
 8015550:	08037840 	.word	0x08037840
 8015554:	08037858 	.word	0x08037858

08015558 <ip_to_string>:
void ip_to_string(uint32_t ip, char *buffer) {
 8015558:	b510      	push	{r4, lr}
 801555a:	b084      	sub	sp, #16
 801555c:	4602      	mov	r2, r0
 801555e:	4608      	mov	r0, r1
    bytes[3] = (ip >> 24) & 0xFF; // Старший байт
 8015560:	0e14      	lsrs	r4, r2, #24
 8015562:	f88d 400f 	strb.w	r4, [sp, #15]
    bytes[2] = (ip >> 16) & 0xFF;
 8015566:	0c11      	lsrs	r1, r2, #16
 8015568:	f88d 100e 	strb.w	r1, [sp, #14]
    bytes[1] = (ip >> 8) & 0xFF;
 801556c:	0a13      	lsrs	r3, r2, #8
 801556e:	f88d 300d 	strb.w	r3, [sp, #13]
    bytes[0] = ip & 0xFF;         // Младший байт
 8015572:	f88d 200c 	strb.w	r2, [sp, #12]
    sprintf(buffer, "%u.%u.%u.%u", bytes[0], bytes[1], bytes[2], bytes[3]);
 8015576:	9401      	str	r4, [sp, #4]
 8015578:	b2c9      	uxtb	r1, r1
 801557a:	9100      	str	r1, [sp, #0]
 801557c:	b2db      	uxtb	r3, r3
 801557e:	b2d2      	uxtb	r2, r2
 8015580:	4902      	ldr	r1, [pc, #8]	@ (801558c <ip_to_string+0x34>)
 8015582:	f016 fabb 	bl	802bafc <sprintf>
}
 8015586:	b004      	add	sp, #16
 8015588:	bd10      	pop	{r4, pc}
 801558a:	bf00      	nop
 801558c:	0803785c 	.word	0x0803785c

08015590 <send_ssdp_notify>:
static void send_ssdp_notify(void *param){
 8015590:	b570      	push	{r4, r5, r6, lr}
 8015592:	b084      	sub	sp, #16
 8015594:	4606      	mov	r6, r0
	logging(L_DEBUG, "Call send_ssdp_notify");
 8015596:	491e      	ldr	r1, [pc, #120]	@ (8015610 <send_ssdp_notify+0x80>)
 8015598:	2000      	movs	r0, #0
 801559a:	f7fc fc83 	bl	8011ea4 <logging>
	size_t buff_len = (strlen(ssdp_notify_template) + strlen(MG_VERSION) + IP_v6_STR_LEN  + strlen(ssdp_web_port) + strlen(dev_id)+ 20); //20 just for spirit healthy, in rel +1 for \0 is needed
 801559e:	4b1d      	ldr	r3, [pc, #116]	@ (8015614 <send_ssdp_notify+0x84>)
 80155a0:	6818      	ldr	r0, [r3, #0]
 80155a2:	f7fa fe7d 	bl	80102a0 <strlen>
 80155a6:	4604      	mov	r4, r0
	buff = calloc(buff_len, sizeof(char));
 80155a8:	2101      	movs	r1, #1
 80155aa:	f200 1039 	addw	r0, r0, #313	@ 0x139
 80155ae:	f7ff ff2b 	bl	8015408 <my_calloc>
 80155b2:	4a19      	ldr	r2, [pc, #100]	@ (8015618 <send_ssdp_notify+0x88>)
 80155b4:	6010      	str	r0, [r2, #0]
	if (!buff) {
 80155b6:	b330      	cbz	r0, 8015606 <send_ssdp_notify+0x76>
	ip_to_string(mif->ip, ip_addr_str);
 80155b8:	4b18      	ldr	r3, [pc, #96]	@ (801561c <send_ssdp_notify+0x8c>)
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	4d18      	ldr	r5, [pc, #96]	@ (8015620 <send_ssdp_notify+0x90>)
 80155be:	6829      	ldr	r1, [r5, #0]
 80155c0:	6898      	ldr	r0, [r3, #8]
 80155c2:	f7ff ffc9 	bl	8015558 <ip_to_string>
	snprintf(buff, buff_len-1, ssdp_notify_template, MG_VERSION, ip_addr_str, ssdp_web_port, dev_id);
 80155c6:	4b13      	ldr	r3, [pc, #76]	@ (8015614 <send_ssdp_notify+0x84>)
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	9302      	str	r3, [sp, #8]
 80155cc:	4b15      	ldr	r3, [pc, #84]	@ (8015624 <send_ssdp_notify+0x94>)
 80155ce:	9301      	str	r3, [sp, #4]
 80155d0:	682b      	ldr	r3, [r5, #0]
 80155d2:	9300      	str	r3, [sp, #0]
 80155d4:	4b14      	ldr	r3, [pc, #80]	@ (8015628 <send_ssdp_notify+0x98>)
 80155d6:	4a15      	ldr	r2, [pc, #84]	@ (801562c <send_ssdp_notify+0x9c>)
 80155d8:	f504 719c 	add.w	r1, r4, #312	@ 0x138
 80155dc:	480e      	ldr	r0, [pc, #56]	@ (8015618 <send_ssdp_notify+0x88>)
 80155de:	6800      	ldr	r0, [r0, #0]
 80155e0:	f016 f924 	bl	802b82c <snprintf>
    if (udp_conn != NULL) {
 80155e4:	b14e      	cbz	r6, 80155fa <send_ssdp_notify+0x6a>
        mg_send(udp_conn, buff, strlen(buff));
 80155e6:	4b0c      	ldr	r3, [pc, #48]	@ (8015618 <send_ssdp_notify+0x88>)
 80155e8:	681c      	ldr	r4, [r3, #0]
 80155ea:	4620      	mov	r0, r4
 80155ec:	f7fa fe58 	bl	80102a0 <strlen>
 80155f0:	4602      	mov	r2, r0
 80155f2:	4621      	mov	r1, r4
 80155f4:	4630      	mov	r0, r6
 80155f6:	f011 fafb 	bl	8026bf0 <mg_send>
    free(buff);
 80155fa:	4b07      	ldr	r3, [pc, #28]	@ (8015618 <send_ssdp_notify+0x88>)
 80155fc:	6818      	ldr	r0, [r3, #0]
 80155fe:	f004 ff35 	bl	801a46c <vPortFree>
}
 8015602:	b004      	add	sp, #16
 8015604:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Error allocating memory for send SSDP Message");
 8015606:	490a      	ldr	r1, [pc, #40]	@ (8015630 <send_ssdp_notify+0xa0>)
 8015608:	2003      	movs	r0, #3
 801560a:	f7fc fc4b 	bl	8011ea4 <logging>
		return; //TODO add log
 801560e:	e7f8      	b.n	8015602 <send_ssdp_notify+0x72>
 8015610:	08037868 	.word	0x08037868
 8015614:	200028ec 	.word	0x200028ec
 8015618:	200028e8 	.word	0x200028e8
 801561c:	200028dc 	.word	0x200028dc
 8015620:	200028e4 	.word	0x200028e4
 8015624:	080378b8 	.word	0x080378b8
 8015628:	080378b0 	.word	0x080378b0
 801562c:	080379c4 	.word	0x080379c4
 8015630:	08037880 	.word	0x08037880

08015634 <ssdp_listener_handler>:
}

static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
	//char *buffer = NULL;

	if (ev == MG_EV_READ) {
 8015634:	2907      	cmp	r1, #7
 8015636:	d000      	beq.n	801563a <ssdp_listener_handler+0x6>
 8015638:	4770      	bx	lr
static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
 801563a:	b570      	push	{r4, r5, r6, lr}
 801563c:	b088      	sub	sp, #32
 801563e:	4604      	mov	r4, r0
		logging(L_DEBUG, "Call ssdp_listener_handler if (ev == MG_EV_READ)");
 8015640:	491a      	ldr	r1, [pc, #104]	@ (80156ac <ssdp_listener_handler+0x78>)
 8015642:	2000      	movs	r0, #0
 8015644:	f7fc fc2e 	bl	8011ea4 <logging>
		struct mg_str msg = mg_str_n((char *) udp_listen_conn->recv.buf, udp_listen_conn->recv.len);
 8015648:	4b19      	ldr	r3, [pc, #100]	@ (80156b0 <ssdp_listener_handler+0x7c>)
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	ad02      	add	r5, sp, #8
 801564e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015650:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8015652:	4628      	mov	r0, r5
 8015654:	f00e faec 	bl	8023c30 <mg_str_n>
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8015658:	ae04      	add	r6, sp, #16
 801565a:	4916      	ldr	r1, [pc, #88]	@ (80156b4 <ssdp_listener_handler+0x80>)
 801565c:	4630      	mov	r0, r6
 801565e:	f00e fadb 	bl	8023c18 <mg_str_s>
 8015662:	2300      	movs	r3, #0
 8015664:	9300      	str	r3, [sp, #0]
 8015666:	e896 000c 	ldmia.w	r6, {r2, r3}
 801566a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801566e:	f00e fcf5 	bl	802405c <mg_match>
 8015672:	b918      	cbnz	r0, 801567c <ssdp_listener_handler+0x48>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
			send_ssdp_notify(udp_listen_conn);
		}
		c->recv.len = 0;
 8015674:	2300      	movs	r3, #0
 8015676:	6423      	str	r3, [r4, #64]	@ 0x40
	}
}
 8015678:	b008      	add	sp, #32
 801567a:	bd70      	pop	{r4, r5, r6, pc}
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 801567c:	ad06      	add	r5, sp, #24
 801567e:	490e      	ldr	r1, [pc, #56]	@ (80156b8 <ssdp_listener_handler+0x84>)
 8015680:	4628      	mov	r0, r5
 8015682:	f00e fac9 	bl	8023c18 <mg_str_s>
 8015686:	2300      	movs	r3, #0
 8015688:	9300      	str	r3, [sp, #0]
 801568a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801568e:	a902      	add	r1, sp, #8
 8015690:	c903      	ldmia	r1, {r0, r1}
 8015692:	f00e fce3 	bl	802405c <mg_match>
 8015696:	2800      	cmp	r0, #0
 8015698:	d0ec      	beq.n	8015674 <ssdp_listener_handler+0x40>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
 801569a:	4908      	ldr	r1, [pc, #32]	@ (80156bc <ssdp_listener_handler+0x88>)
 801569c:	2000      	movs	r0, #0
 801569e:	f7fc fc01 	bl	8011ea4 <logging>
			send_ssdp_notify(udp_listen_conn);
 80156a2:	4b03      	ldr	r3, [pc, #12]	@ (80156b0 <ssdp_listener_handler+0x7c>)
 80156a4:	6818      	ldr	r0, [r3, #0]
 80156a6:	f7ff ff73 	bl	8015590 <send_ssdp_notify>
 80156aa:	e7e3      	b.n	8015674 <ssdp_listener_handler+0x40>
 80156ac:	080378c0 	.word	0x080378c0
 80156b0:	200028d8 	.word	0x200028d8
 80156b4:	080378f4 	.word	0x080378f4
 80156b8:	08037900 	.word	0x08037900
 80156bc:	08037910 	.word	0x08037910

080156c0 <ssdp_timer_handler>:
static void ssdp_timer_handler(void *param){
 80156c0:	b510      	push	{r4, lr}
	logging(L_DEBUG, "Call ssdp_timer_handler");
 80156c2:	490c      	ldr	r1, [pc, #48]	@ (80156f4 <ssdp_timer_handler+0x34>)
 80156c4:	2000      	movs	r0, #0
 80156c6:	f7fc fbed 	bl	8011ea4 <logging>
	struct mg_connection *conn = mg_connect(mgr, ssdp_addr, NULL, NULL);
 80156ca:	2300      	movs	r3, #0
 80156cc:	461a      	mov	r2, r3
 80156ce:	490a      	ldr	r1, [pc, #40]	@ (80156f8 <ssdp_timer_handler+0x38>)
 80156d0:	480a      	ldr	r0, [pc, #40]	@ (80156fc <ssdp_timer_handler+0x3c>)
 80156d2:	6800      	ldr	r0, [r0, #0]
 80156d4:	f012 ff60 	bl	8028598 <mg_connect>
	if (conn == NULL){
 80156d8:	b130      	cbz	r0, 80156e8 <ssdp_timer_handler+0x28>
 80156da:	4604      	mov	r4, r0
	send_ssdp_notify(conn);
 80156dc:	f7ff ff58 	bl	8015590 <send_ssdp_notify>
	mg_close_conn(conn);
 80156e0:	4620      	mov	r0, r4
 80156e2:	f011 f943 	bl	802696c <mg_close_conn>
}
 80156e6:	bd10      	pop	{r4, pc}
		logging(L_ERR, "Call ssdp_timer_handler error open conn");
 80156e8:	4905      	ldr	r1, [pc, #20]	@ (8015700 <ssdp_timer_handler+0x40>)
 80156ea:	2003      	movs	r0, #3
 80156ec:	f7fc fbda 	bl	8011ea4 <logging>
		return ;
 80156f0:	e7f9      	b.n	80156e6 <ssdp_timer_handler+0x26>
 80156f2:	bf00      	nop
 80156f4:	08037940 	.word	0x08037940
 80156f8:	08037c60 	.word	0x08037c60
 80156fc:	200028e0 	.word	0x200028e0
 8015700:	08037958 	.word	0x08037958

08015704 <ssdp_set_id>:
void ssdp_set_id(const uint8_t* id, uint8_t id_len){
 8015704:	b570      	push	{r4, r5, r6, lr}
 8015706:	4606      	mov	r6, r0
 8015708:	460d      	mov	r5, r1
	logging(L_DEBUG, "Call ssdp_set_id");
 801570a:	4910      	ldr	r1, [pc, #64]	@ (801574c <ssdp_set_id+0x48>)
 801570c:	2000      	movs	r0, #0
 801570e:	f7fc fbc9 	bl	8011ea4 <logging>
	if (id && (id_len > 0)){
 8015712:	b1d6      	cbz	r6, 801574a <ssdp_set_id+0x46>
 8015714:	b1cd      	cbz	r5, 801574a <ssdp_set_id+0x46>
		if(dev_id) free(dev_id);
 8015716:	4b0e      	ldr	r3, [pc, #56]	@ (8015750 <ssdp_set_id+0x4c>)
 8015718:	6818      	ldr	r0, [r3, #0]
 801571a:	b108      	cbz	r0, 8015720 <ssdp_set_id+0x1c>
 801571c:	f004 fea6 	bl	801a46c <vPortFree>
		dev_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8015720:	0068      	lsls	r0, r5, #1
 8015722:	2101      	movs	r1, #1
 8015724:	4408      	add	r0, r1
 8015726:	f7ff fe6f 	bl	8015408 <my_calloc>
 801572a:	4b09      	ldr	r3, [pc, #36]	@ (8015750 <ssdp_set_id+0x4c>)
 801572c:	6018      	str	r0, [r3, #0]
		if (dev_id ){
 801572e:	b160      	cbz	r0, 801574a <ssdp_set_id+0x46>
	        for (unsigned int i = 0; i < id_len; i++) {
 8015730:	2400      	movs	r4, #0
 8015732:	e008      	b.n	8015746 <ssdp_set_id+0x42>
	            sprintf(&dev_id[i * 2], "%02X", id[i]);
 8015734:	4b06      	ldr	r3, [pc, #24]	@ (8015750 <ssdp_set_id+0x4c>)
 8015736:	6818      	ldr	r0, [r3, #0]
 8015738:	5d32      	ldrb	r2, [r6, r4]
 801573a:	4906      	ldr	r1, [pc, #24]	@ (8015754 <ssdp_set_id+0x50>)
 801573c:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8015740:	f016 f9dc 	bl	802bafc <sprintf>
	        for (unsigned int i = 0; i < id_len; i++) {
 8015744:	3401      	adds	r4, #1
 8015746:	42a5      	cmp	r5, r4
 8015748:	d8f4      	bhi.n	8015734 <ssdp_set_id+0x30>
}
 801574a:	bd70      	pop	{r4, r5, r6, pc}
 801574c:	08037980 	.word	0x08037980
 8015750:	200028ec 	.word	0x200028ec
 8015754:	0803730c 	.word	0x0803730c

08015758 <ssdp_start_server>:

void ssdp_start_server(void * param_mgr, void * param_mif){
 8015758:	b530      	push	{r4, r5, lr}
 801575a:	b085      	sub	sp, #20
	mgr 		= (struct mg_mgr *)param_mgr;
 801575c:	4b18      	ldr	r3, [pc, #96]	@ (80157c0 <ssdp_start_server+0x68>)
 801575e:	6018      	str	r0, [r3, #0]
	mif			= (struct mg_tcpip_if *)param_mif;
 8015760:	4b18      	ldr	r3, [pc, #96]	@ (80157c4 <ssdp_start_server+0x6c>)
 8015762:	6019      	str	r1, [r3, #0]
	ip_addr_str = (char *) calloc(IP_v6_STR_LEN, sizeof(char));
 8015764:	2101      	movs	r1, #1
 8015766:	2028      	movs	r0, #40	@ 0x28
 8015768:	f7ff fe4e 	bl	8015408 <my_calloc>
 801576c:	4b16      	ldr	r3, [pc, #88]	@ (80157c8 <ssdp_start_server+0x70>)
 801576e:	6018      	str	r0, [r3, #0]
	if (!ip_addr_str) return; //TODO add logging
 8015770:	b318      	cbz	r0, 80157ba <ssdp_start_server+0x62>

	ssdp_set_id(mif->mac, mac_len);
 8015772:	4d14      	ldr	r5, [pc, #80]	@ (80157c4 <ssdp_start_server+0x6c>)
 8015774:	2106      	movs	r1, #6
 8015776:	6828      	ldr	r0, [r5, #0]
 8015778:	f7ff ffc4 	bl	8015704 <ssdp_set_id>

	logging(L_INFO, "Starting SSDP service");
 801577c:	4913      	ldr	r1, [pc, #76]	@ (80157cc <ssdp_start_server+0x74>)
 801577e:	2001      	movs	r0, #1
 8015780:	f7fc fb90 	bl	8011ea4 <logging>
	mg_timer_add(mgr, 60000, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, ssdp_timer_handler, NULL);
 8015784:	4c0e      	ldr	r4, [pc, #56]	@ (80157c0 <ssdp_start_server+0x68>)
 8015786:	2300      	movs	r3, #0
 8015788:	9302      	str	r3, [sp, #8]
 801578a:	4b11      	ldr	r3, [pc, #68]	@ (80157d0 <ssdp_start_server+0x78>)
 801578c:	9301      	str	r3, [sp, #4]
 801578e:	2303      	movs	r3, #3
 8015790:	9300      	str	r3, [sp, #0]
 8015792:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8015796:	2300      	movs	r3, #0
 8015798:	6820      	ldr	r0, [r4, #0]
 801579a:	f00f fc1f 	bl	8024fdc <mg_timer_add>
	mg_http_listen(mgr, "http://0.0.0.0:40000", ssdp_web_handler, mif);
 801579e:	682b      	ldr	r3, [r5, #0]
 80157a0:	4a0c      	ldr	r2, [pc, #48]	@ (80157d4 <ssdp_start_server+0x7c>)
 80157a2:	490d      	ldr	r1, [pc, #52]	@ (80157d8 <ssdp_start_server+0x80>)
 80157a4:	6820      	ldr	r0, [r4, #0]
 80157a6:	f011 f9bb 	bl	8026b20 <mg_http_listen>
	udp_listen_conn = mg_listen(mgr, ssdp_addr, ssdp_listener_handler, mif);
 80157aa:	682b      	ldr	r3, [r5, #0]
 80157ac:	4a0b      	ldr	r2, [pc, #44]	@ (80157dc <ssdp_start_server+0x84>)
 80157ae:	490c      	ldr	r1, [pc, #48]	@ (80157e0 <ssdp_start_server+0x88>)
 80157b0:	6820      	ldr	r0, [r4, #0]
 80157b2:	f011 f931 	bl	8026a18 <mg_listen>
 80157b6:	4b0b      	ldr	r3, [pc, #44]	@ (80157e4 <ssdp_start_server+0x8c>)
 80157b8:	6018      	str	r0, [r3, #0]
}
 80157ba:	b005      	add	sp, #20
 80157bc:	bd30      	pop	{r4, r5, pc}
 80157be:	bf00      	nop
 80157c0:	200028e0 	.word	0x200028e0
 80157c4:	200028dc 	.word	0x200028dc
 80157c8:	200028e4 	.word	0x200028e4
 80157cc:	08037994 	.word	0x08037994
 80157d0:	080156c1 	.word	0x080156c1
 80157d4:	080154e1 	.word	0x080154e1
 80157d8:	080379ac 	.word	0x080379ac
 80157dc:	08015635 	.word	0x08015635
 80157e0:	08037c60 	.word	0x08037c60
 80157e4:	200028d8 	.word	0x200028d8

080157e8 <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 80157e8:	4770      	bx	lr
	...

080157ec <sFLASH_SPI_ReadBuffer>:
	flash_conf.receive_buffer(&byte, 1);
	return byte;
}


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 80157ec:	b508      	push	{r3, lr}
	flash_conf.receive_buffer(buffer, size);
 80157ee:	4b02      	ldr	r3, [pc, #8]	@ (80157f8 <sFLASH_SPI_ReadBuffer+0xc>)
 80157f0:	685b      	ldr	r3, [r3, #4]
 80157f2:	4798      	blx	r3
}
 80157f4:	bd08      	pop	{r3, pc}
 80157f6:	bf00      	nop
 80157f8:	20002930 	.word	0x20002930

080157fc <SPI_flash_reg_cb>:
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 80157fc:	b410      	push	{r4}
	if (chip_select){
 80157fe:	b158      	cbz	r0, 8015818 <SPI_flash_reg_cb+0x1c>
 8015800:	4604      	mov	r4, r0
		flash_conf.select_chip		= chip_select;
 8015802:	4809      	ldr	r0, [pc, #36]	@ (8015828 <SPI_flash_reg_cb+0x2c>)
 8015804:	60c4      	str	r4, [r0, #12]
	if (chip_deselect){
 8015806:	b159      	cbz	r1, 8015820 <SPI_flash_reg_cb+0x24>
		flash_conf.deselect_chip	= chip_deselect;
 8015808:	4807      	ldr	r0, [pc, #28]	@ (8015828 <SPI_flash_reg_cb+0x2c>)
 801580a:	6101      	str	r1, [r0, #16]
	flash_conf.receive_buffer	= receive_buffer;
 801580c:	4906      	ldr	r1, [pc, #24]	@ (8015828 <SPI_flash_reg_cb+0x2c>)
 801580e:	604a      	str	r2, [r1, #4]
	flash_conf.send_byte		= send_byte;
 8015810:	608b      	str	r3, [r1, #8]
}
 8015812:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015816:	4770      	bx	lr
		flash_conf.select_chip		= function_prototype;
 8015818:	4803      	ldr	r0, [pc, #12]	@ (8015828 <SPI_flash_reg_cb+0x2c>)
 801581a:	4c04      	ldr	r4, [pc, #16]	@ (801582c <SPI_flash_reg_cb+0x30>)
 801581c:	60c4      	str	r4, [r0, #12]
 801581e:	e7f2      	b.n	8015806 <SPI_flash_reg_cb+0xa>
		flash_conf.deselect_chip	= function_prototype;
 8015820:	4901      	ldr	r1, [pc, #4]	@ (8015828 <SPI_flash_reg_cb+0x2c>)
 8015822:	4802      	ldr	r0, [pc, #8]	@ (801582c <SPI_flash_reg_cb+0x30>)
 8015824:	6108      	str	r0, [r1, #16]
 8015826:	e7f1      	b.n	801580c <SPI_flash_reg_cb+0x10>
 8015828:	20002930 	.word	0x20002930
 801582c:	080157e9 	.word	0x080157e9

08015830 <sFLASH_CS_LOW>:
void sFLASH_CS_LOW(void){ //select chip
 8015830:	b508      	push	{r3, lr}
	flash_conf.select_chip();
 8015832:	4b02      	ldr	r3, [pc, #8]	@ (801583c <sFLASH_CS_LOW+0xc>)
 8015834:	68db      	ldr	r3, [r3, #12]
 8015836:	4798      	blx	r3
}
 8015838:	bd08      	pop	{r3, pc}
 801583a:	bf00      	nop
 801583c:	20002930 	.word	0x20002930

08015840 <sFLASH_CS_HIGH>:
void sFLASH_CS_HIGH(void){ //deselect chip
 8015840:	b508      	push	{r3, lr}
	flash_conf.deselect_chip();
 8015842:	4b02      	ldr	r3, [pc, #8]	@ (801584c <sFLASH_CS_HIGH+0xc>)
 8015844:	691b      	ldr	r3, [r3, #16]
 8015846:	4798      	blx	r3
}
 8015848:	bd08      	pop	{r3, pc}
 801584a:	bf00      	nop
 801584c:	20002930 	.word	0x20002930

08015850 <sFLASH_ReadByte>:
{
 8015850:	b500      	push	{lr}
 8015852:	b083      	sub	sp, #12
	flash_conf.receive_buffer(&byte, 1);
 8015854:	4b05      	ldr	r3, [pc, #20]	@ (801586c <sFLASH_ReadByte+0x1c>)
 8015856:	685b      	ldr	r3, [r3, #4]
 8015858:	2101      	movs	r1, #1
 801585a:	f10d 0007 	add.w	r0, sp, #7
 801585e:	4798      	blx	r3
}
 8015860:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8015864:	b003      	add	sp, #12
 8015866:	f85d fb04 	ldr.w	pc, [sp], #4
 801586a:	bf00      	nop
 801586c:	20002930 	.word	0x20002930

08015870 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8015870:	b508      	push	{r3, lr}
	flash_conf.send_byte(byte);
 8015872:	4b02      	ldr	r3, [pc, #8]	@ (801587c <sFLASH_SendByte+0xc>)
 8015874:	689b      	ldr	r3, [r3, #8]
 8015876:	4798      	blx	r3
}
 8015878:	bd08      	pop	{r3, pc}
 801587a:	bf00      	nop
 801587c:	20002930 	.word	0x20002930

08015880 <sFLASH_Reset>:
void sFLASH_Reset(void){
 8015880:	b508      	push	{r3, lr}
    sFLASH_CS_LOW();
 8015882:	f7ff ffd5 	bl	8015830 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8015886:	2066      	movs	r0, #102	@ 0x66
 8015888:	f7ff fff2 	bl	8015870 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 801588c:	2099      	movs	r0, #153	@ 0x99
 801588e:	f7ff ffef 	bl	8015870 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 8015892:	f7ff ffd5 	bl	8015840 <sFLASH_CS_HIGH>
}
 8015896:	bd08      	pop	{r3, pc}

08015898 <sFLASH_Init>:
void sFLASH_Init(void){
 8015898:	b508      	push	{r3, lr}
    HAL_Delay(100);
 801589a:	2064      	movs	r0, #100	@ 0x64
 801589c:	f000 fa16 	bl	8015ccc <HAL_Delay>
    sFLASH_Reset();
 80158a0:	f7ff ffee 	bl	8015880 <sFLASH_Reset>
    HAL_Delay(100);
 80158a4:	2064      	movs	r0, #100	@ 0x64
 80158a6:	f000 fa11 	bl	8015ccc <HAL_Delay>
    HAL_Delay(100);
 80158aa:	2064      	movs	r0, #100	@ 0x64
 80158ac:	f000 fa0e 	bl	8015ccc <HAL_Delay>
}
 80158b0:	bd08      	pop	{r3, pc}

080158b2 <sFLASH_ReadBuffer>:
{
 80158b2:	b570      	push	{r4, r5, r6, lr}
 80158b4:	4606      	mov	r6, r0
 80158b6:	460c      	mov	r4, r1
 80158b8:	4615      	mov	r5, r2
  sFLASH_CS_LOW();
 80158ba:	f7ff ffb9 	bl	8015830 <sFLASH_CS_LOW>
  if (NumByteToRead > 16){
 80158be:	2d10      	cmp	r5, #16
 80158c0:	d917      	bls.n	80158f2 <sFLASH_ReadBuffer+0x40>
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 80158c2:	200b      	movs	r0, #11
 80158c4:	f7ff ffd4 	bl	8015870 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 80158c8:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80158cc:	f7ff ffd0 	bl	8015870 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 80158d0:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80158d4:	f7ff ffcc 	bl	8015870 <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 80158d8:	b2e0      	uxtb	r0, r4
 80158da:	f7ff ffc9 	bl	8015870 <sFLASH_SendByte>
	  sFLASH_SendByte(0x00);
 80158de:	2000      	movs	r0, #0
 80158e0:	f7ff ffc6 	bl	8015870 <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 80158e4:	4629      	mov	r1, r5
 80158e6:	4630      	mov	r0, r6
 80158e8:	f7ff ff80 	bl	80157ec <sFLASH_SPI_ReadBuffer>
  sFLASH_CS_HIGH();
 80158ec:	f7ff ffa8 	bl	8015840 <sFLASH_CS_HIGH>
}
 80158f0:	bd70      	pop	{r4, r5, r6, pc}
	  sFLASH_SendByte(sFLASH_CMD_READ);
 80158f2:	2003      	movs	r0, #3
 80158f4:	f7ff ffbc 	bl	8015870 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 80158f8:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80158fc:	f7ff ffb8 	bl	8015870 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8015900:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8015904:	f7ff ffb4 	bl	8015870 <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8015908:	b2e0      	uxtb	r0, r4
 801590a:	f7ff ffb1 	bl	8015870 <sFLASH_SendByte>
	  while (NumByteToRead--) /*!< while there is data to be read */
 801590e:	e004      	b.n	801591a <sFLASH_ReadBuffer+0x68>
		  *pBuffer = sFLASH_ReadByte();
 8015910:	f7ff ff9e 	bl	8015850 <sFLASH_ReadByte>
 8015914:	f806 0b01 	strb.w	r0, [r6], #1
	  while (NumByteToRead--) /*!< while there is data to be read */
 8015918:	4625      	mov	r5, r4
 801591a:	1e6b      	subs	r3, r5, #1
 801591c:	b29c      	uxth	r4, r3
 801591e:	2d00      	cmp	r5, #0
 8015920:	d1f6      	bne.n	8015910 <sFLASH_ReadBuffer+0x5e>
 8015922:	e7e3      	b.n	80158ec <sFLASH_ReadBuffer+0x3a>

08015924 <sFLASH_ReadID>:
{
 8015924:	b570      	push	{r4, r5, r6, lr}
  sFLASH_CS_LOW();
 8015926:	f7ff ff83 	bl	8015830 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 801592a:	f7ff ff89 	bl	8015840 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 801592e:	f7ff ff7f 	bl	8015830 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8015932:	f7ff ff85 	bl	8015840 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8015936:	f7ff ff7b 	bl	8015830 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_RDID);
 801593a:	209f      	movs	r0, #159	@ 0x9f
 801593c:	f7ff ff98 	bl	8015870 <sFLASH_SendByte>
  Temp0 = sFLASH_ReadByte();
 8015940:	f7ff ff86 	bl	8015850 <sFLASH_ReadByte>
 8015944:	4606      	mov	r6, r0
  Temp1 = sFLASH_ReadByte();
 8015946:	f7ff ff83 	bl	8015850 <sFLASH_ReadByte>
 801594a:	4604      	mov	r4, r0
  Temp2 = sFLASH_ReadByte();
 801594c:	f7ff ff80 	bl	8015850 <sFLASH_ReadByte>
 8015950:	4605      	mov	r5, r0
  sFLASH_CS_HIGH();
 8015952:	f7ff ff75 	bl	8015840 <sFLASH_CS_HIGH>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8015956:	0224      	lsls	r4, r4, #8
 8015958:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
}
 801595c:	ea44 0005 	orr.w	r0, r4, r5
 8015960:	bd70      	pop	{r4, r5, r6, pc}
	...

08015964 <sFLASH_GetInfo>:
struct SPI_flash_info sFLASH_GetInfo(void){
 8015964:	b538      	push	{r3, r4, r5, lr}
 8015966:	4605      	mov	r5, r0
	sFLASH_Init();
 8015968:	f7ff ff96 	bl	8015898 <sFLASH_Init>
	flash_id = sFLASH_ReadID();
 801596c:	f7ff ffda 	bl	8015924 <sFLASH_ReadID>
	switch (flash_id) {
 8015970:	4b52      	ldr	r3, [pc, #328]	@ (8015abc <sFLASH_GetInfo+0x158>)
 8015972:	4298      	cmp	r0, r3
 8015974:	f000 8085 	beq.w	8015a82 <sFLASH_GetInfo+0x11e>
 8015978:	f0c0 809c 	bcc.w	8015ab4 <sFLASH_GetInfo+0x150>
 801597c:	4b50      	ldr	r3, [pc, #320]	@ (8015ac0 <sFLASH_GetInfo+0x15c>)
 801597e:	4298      	cmp	r0, r3
 8015980:	f200 8098 	bhi.w	8015ab4 <sFLASH_GetInfo+0x150>
 8015984:	3b03      	subs	r3, #3
 8015986:	4298      	cmp	r0, r3
 8015988:	f0c0 8094 	bcc.w	8015ab4 <sFLASH_GetInfo+0x150>
 801598c:	4b4d      	ldr	r3, [pc, #308]	@ (8015ac4 <sFLASH_GetInfo+0x160>)
 801598e:	4403      	add	r3, r0
 8015990:	2b03      	cmp	r3, #3
 8015992:	f200 808f 	bhi.w	8015ab4 <sFLASH_GetInfo+0x150>
 8015996:	e8df f003 	tbb	[pc, r3]
 801599a:	2b02      	.short	0x2b02
 801599c:	5d44      	.short	0x5d44
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 801599e:	4c4a      	ldr	r4, [pc, #296]	@ (8015ac8 <sFLASH_GetInfo+0x164>)
 80159a0:	4b4a      	ldr	r3, [pc, #296]	@ (8015acc <sFLASH_GetInfo+0x168>)
 80159a2:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 80159a4:	2301      	movs	r3, #1
 80159a6:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 80159a8:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 80159aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80159ae:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 80159b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80159b4:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 512;
 80159b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80159ba:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q16", sizeof(flash_info.model_name) - 1);
 80159bc:	2231      	movs	r2, #49	@ 0x31
 80159be:	4944      	ldr	r1, [pc, #272]	@ (8015ad0 <sFLASH_GetInfo+0x16c>)
 80159c0:	f104 000e 	add.w	r0, r4, #14
 80159c4:	f016 fca3 	bl	802c30e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 80159c8:	2300      	movs	r3, #0
 80159ca:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
	return flash_info;
 80159ce:	46ac      	mov	ip, r5
 80159d0:	4c3d      	ldr	r4, [pc, #244]	@ (8015ac8 <sFLASH_GetInfo+0x164>)
 80159d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80159d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80159d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80159da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80159de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80159e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80159e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80159e8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 80159ec:	4628      	mov	r0, r5
 80159ee:	bd38      	pop	{r3, r4, r5, pc}
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 80159f0:	4c35      	ldr	r4, [pc, #212]	@ (8015ac8 <sFLASH_GetInfo+0x164>)
 80159f2:	4b38      	ldr	r3, [pc, #224]	@ (8015ad4 <sFLASH_GetInfo+0x170>)
 80159f4:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 80159f6:	2301      	movs	r3, #1
 80159f8:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 80159fa:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 80159fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015a00:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8015a02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015a06:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 8015a08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015a0c:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q32", sizeof(flash_info.model_name) - 1);
 8015a0e:	2231      	movs	r2, #49	@ 0x31
 8015a10:	4931      	ldr	r1, [pc, #196]	@ (8015ad8 <sFLASH_GetInfo+0x174>)
 8015a12:	f104 000e 	add.w	r0, r4, #14
 8015a16:	f016 fc7a 	bl	802c30e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8015a20:	e7d5      	b.n	80159ce <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 8015a22:	4c29      	ldr	r4, [pc, #164]	@ (8015ac8 <sFLASH_GetInfo+0x164>)
 8015a24:	4b2d      	ldr	r3, [pc, #180]	@ (8015adc <sFLASH_GetInfo+0x178>)
 8015a26:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015a28:	2301      	movs	r3, #1
 8015a2a:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8015a2c:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8015a2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015a32:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8015a34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015a38:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 2048;
 8015a3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015a3e:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q64", sizeof(flash_info.model_name) - 1);
 8015a40:	2231      	movs	r2, #49	@ 0x31
 8015a42:	4927      	ldr	r1, [pc, #156]	@ (8015ae0 <sFLASH_GetInfo+0x17c>)
 8015a44:	f104 000e 	add.w	r0, r4, #14
 8015a48:	f016 fc61 	bl	802c30e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8015a52:	e7bc      	b.n	80159ce <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 8015a54:	4c1c      	ldr	r4, [pc, #112]	@ (8015ac8 <sFLASH_GetInfo+0x164>)
 8015a56:	4b1a      	ldr	r3, [pc, #104]	@ (8015ac0 <sFLASH_GetInfo+0x15c>)
 8015a58:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015a5a:	2301      	movs	r3, #1
 8015a5c:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8015a5e:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8015a60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015a64:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8015a66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015a6a:	8162      	strh	r2, [r4, #10]
			flash_info.block_count = 4096;
 8015a6c:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q128", sizeof(flash_info.model_name) - 1);
 8015a6e:	2231      	movs	r2, #49	@ 0x31
 8015a70:	491c      	ldr	r1, [pc, #112]	@ (8015ae4 <sFLASH_GetInfo+0x180>)
 8015a72:	f104 000e 	add.w	r0, r4, #14
 8015a76:	f016 fc4a 	bl	802c30e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8015a80:	e7a5      	b.n	80159ce <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 8015a82:	4c11      	ldr	r4, [pc, #68]	@ (8015ac8 <sFLASH_GetInfo+0x164>)
 8015a84:	4b0d      	ldr	r3, [pc, #52]	@ (8015abc <sFLASH_GetInfo+0x158>)
 8015a86:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015a88:	2301      	movs	r3, #1
 8015a8a:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8015a8c:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8015a8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015a92:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8015a94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015a98:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 8015a9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015a9e:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "MX25L32", sizeof(flash_info.model_name) - 1);
 8015aa0:	2231      	movs	r2, #49	@ 0x31
 8015aa2:	4911      	ldr	r1, [pc, #68]	@ (8015ae8 <sFLASH_GetInfo+0x184>)
 8015aa4:	f104 000e 	add.w	r0, r4, #14
 8015aa8:	f016 fc31 	bl	802c30e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8015aac:	2300      	movs	r3, #0
 8015aae:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8015ab2:	e78c      	b.n	80159ce <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8015ab4:	4b04      	ldr	r3, [pc, #16]	@ (8015ac8 <sFLASH_GetInfo+0x164>)
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	601a      	str	r2, [r3, #0]
			break;
 8015aba:	e788      	b.n	80159ce <sFLASH_GetInfo+0x6a>
 8015abc:	00c22016 	.word	0x00c22016
 8015ac0:	00ef4018 	.word	0x00ef4018
 8015ac4:	ff10bfeb 	.word	0xff10bfeb
 8015ac8:	200028f0 	.word	0x200028f0
 8015acc:	00ef4015 	.word	0x00ef4015
 8015ad0:	08037c7c 	.word	0x08037c7c
 8015ad4:	00ef4016 	.word	0x00ef4016
 8015ad8:	08037c84 	.word	0x08037c84
 8015adc:	00ef4017 	.word	0x00ef4017
 8015ae0:	08037c8c 	.word	0x08037c8c
 8015ae4:	08037c94 	.word	0x08037c94
 8015ae8:	08037c9c 	.word	0x08037c9c

08015aec <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8015aec:	b508      	push	{r3, lr}
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015aee:	f7ff fe9f 	bl	8015830 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8015af2:	2006      	movs	r0, #6
 8015af4:	f7ff febc 	bl	8015870 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015af8:	f7ff fea2 	bl	8015840 <sFLASH_CS_HIGH>
}
 8015afc:	bd08      	pop	{r3, pc}
	...

08015b00 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 8015b00:	b538      	push	{r3, r4, r5, lr}
  uint8_t flashstatus = 0;

  int32_t timeout = 100000;
 8015b02:	4d09      	ldr	r5, [pc, #36]	@ (8015b28 <sFLASH_WaitForWriteEnd+0x28>)
  //(sFLASH_CMD_RDSR);

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  sFLASH_CS_LOW();
 8015b04:	f7ff fe94 	bl	8015830 <sFLASH_CS_LOW>
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8015b08:	2005      	movs	r0, #5
 8015b0a:	f7ff feb1 	bl	8015870 <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 8015b0e:	f7ff fe9f 	bl	8015850 <sFLASH_ReadByte>
 8015b12:	4604      	mov	r4, r0

	  sFLASH_CS_HIGH();
 8015b14:	f7ff fe94 	bl	8015840 <sFLASH_CS_HIGH>

	  /*!< Decrement timeout to avoid infinite loop */
	  if (timeout-- == 0)
 8015b18:	462b      	mov	r3, r5
 8015b1a:	3d01      	subs	r5, #1
 8015b1c:	b113      	cbz	r3, 8015b24 <sFLASH_WaitForWriteEnd+0x24>
		  //printf("Timeout waiting for Write End\n"); Logging
		  return; //Exit if timeout
	  }

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8015b1e:	f014 0f01 	tst.w	r4, #1
 8015b22:	d1ef      	bne.n	8015b04 <sFLASH_WaitForWriteEnd+0x4>

  /*!< Deselect the FLASH: Chip Select high */
  //sFLASH_CS_HIGH();
}
 8015b24:	bd38      	pop	{r3, r4, r5, pc}
 8015b26:	bf00      	nop
 8015b28:	000186a0 	.word	0x000186a0

08015b2c <sFLASH_EraseSector>:
{
 8015b2c:	b510      	push	{r4, lr}
 8015b2e:	4604      	mov	r4, r0
  sFLASH_WriteEnable();
 8015b30:	f7ff ffdc 	bl	8015aec <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 8015b34:	f7ff fe7c 	bl	8015830 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_SE);
 8015b38:	2020      	movs	r0, #32
 8015b3a:	f7ff fe99 	bl	8015870 <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 8015b3e:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8015b42:	f7ff fe95 	bl	8015870 <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 8015b46:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8015b4a:	f7ff fe91 	bl	8015870 <sFLASH_SendByte>
  sFLASH_SendByte(SectorAddr & 0xFF);
 8015b4e:	b2e0      	uxtb	r0, r4
 8015b50:	f7ff fe8e 	bl	8015870 <sFLASH_SendByte>
  sFLASH_CS_HIGH();
 8015b54:	f7ff fe74 	bl	8015840 <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 8015b58:	f7ff ffd2 	bl	8015b00 <sFLASH_WaitForWriteEnd>
}
 8015b5c:	bd10      	pop	{r4, pc}

08015b5e <sFLASH_WritePage>:
{
 8015b5e:	b570      	push	{r4, r5, r6, lr}
 8015b60:	4606      	mov	r6, r0
 8015b62:	460c      	mov	r4, r1
 8015b64:	4615      	mov	r5, r2
  sFLASH_WriteEnable();
 8015b66:	f7ff ffc1 	bl	8015aec <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 8015b6a:	f7ff fe61 	bl	8015830 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 8015b6e:	2002      	movs	r0, #2
 8015b70:	f7ff fe7e 	bl	8015870 <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8015b74:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8015b78:	f7ff fe7a 	bl	8015870 <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 8015b7c:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8015b80:	f7ff fe76 	bl	8015870 <sFLASH_SendByte>
  sFLASH_SendByte(WriteAddr & 0xFF);
 8015b84:	b2e0      	uxtb	r0, r4
 8015b86:	f7ff fe73 	bl	8015870 <sFLASH_SendByte>
  while (NumByteToWrite--)
 8015b8a:	e004      	b.n	8015b96 <sFLASH_WritePage+0x38>
    sFLASH_SendByte(*pBuffer);
 8015b8c:	f816 0b01 	ldrb.w	r0, [r6], #1
 8015b90:	f7ff fe6e 	bl	8015870 <sFLASH_SendByte>
  while (NumByteToWrite--)
 8015b94:	4625      	mov	r5, r4
 8015b96:	1e6b      	subs	r3, r5, #1
 8015b98:	b29c      	uxth	r4, r3
 8015b9a:	2d00      	cmp	r5, #0
 8015b9c:	d1f6      	bne.n	8015b8c <sFLASH_WritePage+0x2e>
  sFLASH_CS_HIGH();
 8015b9e:	f7ff fe4f 	bl	8015840 <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 8015ba2:	f7ff ffad 	bl	8015b00 <sFLASH_WaitForWriteEnd>
}
 8015ba6:	bd70      	pop	{r4, r5, r6, pc}

08015ba8 <sFLASH_WriteBuffer>:
{
 8015ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015bac:	4605      	mov	r5, r0
 8015bae:	460c      	mov	r4, r1
 8015bb0:	4617      	mov	r7, r2
  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 8015bb2:	b2cb      	uxtb	r3, r1
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8015bb4:	0a11      	lsrs	r1, r2, #8
  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 8015bb6:	b9d3      	cbnz	r3, 8015bee <sFLASH_WriteBuffer+0x46>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8015bb8:	b971      	cbnz	r1, 8015bd8 <sFLASH_WriteBuffer+0x30>
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8015bba:	4621      	mov	r1, r4
 8015bbc:	f7ff ffcf 	bl	8015b5e <sFLASH_WritePage>
 8015bc0:	e013      	b.n	8015bea <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8015bc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015bc6:	4621      	mov	r1, r4
 8015bc8:	4628      	mov	r0, r5
 8015bca:	f7ff ffc8 	bl	8015b5e <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8015bce:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 8015bd2:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 8015bd6:	4631      	mov	r1, r6
 8015bd8:	1e4b      	subs	r3, r1, #1
 8015bda:	b2de      	uxtb	r6, r3
 8015bdc:	2900      	cmp	r1, #0
 8015bde:	d1f0      	bne.n	8015bc2 <sFLASH_WriteBuffer+0x1a>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8015be0:	b2fa      	uxtb	r2, r7
 8015be2:	4621      	mov	r1, r4
 8015be4:	4628      	mov	r0, r5
 8015be6:	f7ff ffba 	bl	8015b5e <sFLASH_WritePage>
}
 8015bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bee:	f1c3 0800 	rsb	r8, r3, #0
 8015bf2:	fa5f f888 	uxtb.w	r8, r8
 8015bf6:	b2d2      	uxtb	r2, r2
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8015bf8:	b9a1      	cbnz	r1, 8015c24 <sFLASH_WriteBuffer+0x7c>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 8015bfa:	4590      	cmp	r8, r2
 8015bfc:	d20d      	bcs.n	8015c1a <sFLASH_WriteBuffer+0x72>
        temp = NumOfSingle - count;
 8015bfe:	4413      	add	r3, r2
 8015c00:	b2de      	uxtb	r6, r3
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 8015c02:	4642      	mov	r2, r8
 8015c04:	4621      	mov	r1, r4
 8015c06:	f7ff ffaa 	bl	8015b5e <sFLASH_WritePage>
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 8015c0a:	4632      	mov	r2, r6
 8015c0c:	eb08 0104 	add.w	r1, r8, r4
 8015c10:	eb05 0008 	add.w	r0, r5, r8
 8015c14:	f7ff ffa3 	bl	8015b5e <sFLASH_WritePage>
 8015c18:	e7e7      	b.n	8015bea <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8015c1a:	463a      	mov	r2, r7
 8015c1c:	4621      	mov	r1, r4
 8015c1e:	f7ff ff9e 	bl	8015b5e <sFLASH_WritePage>
 8015c22:	e7e2      	b.n	8015bea <sFLASH_WriteBuffer+0x42>
      NumByteToWrite -= count;
 8015c24:	eba7 0708 	sub.w	r7, r7, r8
 8015c28:	fa1f f987 	uxth.w	r9, r7
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8015c2c:	f3c7 2607 	ubfx	r6, r7, #8, #8
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8015c30:	b2ff      	uxtb	r7, r7
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 8015c32:	4642      	mov	r2, r8
 8015c34:	4621      	mov	r1, r4
 8015c36:	f7ff ff92 	bl	8015b5e <sFLASH_WritePage>
      WriteAddr +=  count;
 8015c3a:	4444      	add	r4, r8
      pBuffer += count;
 8015c3c:	4445      	add	r5, r8
      while (NumOfPage--)
 8015c3e:	e00a      	b.n	8015c56 <sFLASH_WriteBuffer+0xae>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8015c40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015c44:	4621      	mov	r1, r4
 8015c46:	4628      	mov	r0, r5
 8015c48:	f7ff ff89 	bl	8015b5e <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8015c4c:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 8015c50:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 8015c54:	4646      	mov	r6, r8
 8015c56:	1e73      	subs	r3, r6, #1
 8015c58:	fa5f f883 	uxtb.w	r8, r3
 8015c5c:	2e00      	cmp	r6, #0
 8015c5e:	d1ef      	bne.n	8015c40 <sFLASH_WriteBuffer+0x98>
      if (NumOfSingle != 0)
 8015c60:	2f00      	cmp	r7, #0
 8015c62:	d0c2      	beq.n	8015bea <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8015c64:	fa5f f289 	uxtb.w	r2, r9
 8015c68:	4621      	mov	r1, r4
 8015c6a:	4628      	mov	r0, r5
 8015c6c:	f7ff ff77 	bl	8015b5e <sFLASH_WritePage>
}
 8015c70:	e7bb      	b.n	8015bea <sFLASH_WriteBuffer+0x42>
	...

08015c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015c74:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8015c76:	4b0b      	ldr	r3, [pc, #44]	@ (8015ca4 <HAL_Init+0x30>)
 8015c78:	681a      	ldr	r2, [r3, #0]
 8015c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015c7e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8015c80:	681a      	ldr	r2, [r3, #0]
 8015c82:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8015c86:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015c88:	681a      	ldr	r2, [r3, #0]
 8015c8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015c8e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015c90:	2003      	movs	r0, #3
 8015c92:	f000 f883 	bl	8015d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8015c96:	200f      	movs	r0, #15
 8015c98:	f7fc faf0 	bl	801227c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8015c9c:	f7fc facc 	bl	8012238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8015ca0:	2000      	movs	r0, #0
 8015ca2:	bd08      	pop	{r3, pc}
 8015ca4:	40023c00 	.word	0x40023c00

08015ca8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8015ca8:	4a03      	ldr	r2, [pc, #12]	@ (8015cb8 <HAL_IncTick+0x10>)
 8015caa:	6811      	ldr	r1, [r2, #0]
 8015cac:	4b03      	ldr	r3, [pc, #12]	@ (8015cbc <HAL_IncTick+0x14>)
 8015cae:	781b      	ldrb	r3, [r3, #0]
 8015cb0:	440b      	add	r3, r1
 8015cb2:	6013      	str	r3, [r2, #0]
}
 8015cb4:	4770      	bx	lr
 8015cb6:	bf00      	nop
 8015cb8:	20002944 	.word	0x20002944
 8015cbc:	20000106 	.word	0x20000106

08015cc0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8015cc0:	4b01      	ldr	r3, [pc, #4]	@ (8015cc8 <HAL_GetTick+0x8>)
 8015cc2:	6818      	ldr	r0, [r3, #0]
}
 8015cc4:	4770      	bx	lr
 8015cc6:	bf00      	nop
 8015cc8:	20002944 	.word	0x20002944

08015ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8015ccc:	b538      	push	{r3, r4, r5, lr}
 8015cce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8015cd0:	f7ff fff6 	bl	8015cc0 <HAL_GetTick>
 8015cd4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8015cd6:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8015cda:	d002      	beq.n	8015ce2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8015cdc:	4b04      	ldr	r3, [pc, #16]	@ (8015cf0 <HAL_Delay+0x24>)
 8015cde:	781b      	ldrb	r3, [r3, #0]
 8015ce0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8015ce2:	f7ff ffed 	bl	8015cc0 <HAL_GetTick>
 8015ce6:	1b40      	subs	r0, r0, r5
 8015ce8:	42a0      	cmp	r0, r4
 8015cea:	d3fa      	bcc.n	8015ce2 <HAL_Delay+0x16>
  {
  }
}
 8015cec:	bd38      	pop	{r3, r4, r5, pc}
 8015cee:	bf00      	nop
 8015cf0:	20000106 	.word	0x20000106

08015cf4 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8015cf4:	2800      	cmp	r0, #0
 8015cf6:	db07      	blt.n	8015d08 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015cf8:	f000 021f 	and.w	r2, r0, #31
 8015cfc:	0940      	lsrs	r0, r0, #5
 8015cfe:	2301      	movs	r3, #1
 8015d00:	4093      	lsls	r3, r2
 8015d02:	4a02      	ldr	r2, [pc, #8]	@ (8015d0c <__NVIC_EnableIRQ+0x18>)
 8015d04:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8015d08:	4770      	bx	lr
 8015d0a:	bf00      	nop
 8015d0c:	e000e100 	.word	0xe000e100

08015d10 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8015d10:	2800      	cmp	r0, #0
 8015d12:	db08      	blt.n	8015d26 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015d14:	0109      	lsls	r1, r1, #4
 8015d16:	b2c9      	uxtb	r1, r1
 8015d18:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8015d1c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8015d20:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8015d24:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015d26:	f000 000f 	and.w	r0, r0, #15
 8015d2a:	0109      	lsls	r1, r1, #4
 8015d2c:	b2c9      	uxtb	r1, r1
 8015d2e:	4b01      	ldr	r3, [pc, #4]	@ (8015d34 <__NVIC_SetPriority+0x24>)
 8015d30:	5419      	strb	r1, [r3, r0]
  }
}
 8015d32:	4770      	bx	lr
 8015d34:	e000ed14 	.word	0xe000ed14

08015d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015d38:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015d3a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8015d3e:	f1c0 0c07 	rsb	ip, r0, #7
 8015d42:	f1bc 0f04 	cmp.w	ip, #4
 8015d46:	bf28      	it	cs
 8015d48:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8015d4c:	1d03      	adds	r3, r0, #4
 8015d4e:	2b06      	cmp	r3, #6
 8015d50:	d90f      	bls.n	8015d72 <NVIC_EncodePriority+0x3a>
 8015d52:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015d54:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8015d58:	fa0e f00c 	lsl.w	r0, lr, ip
 8015d5c:	ea21 0100 	bic.w	r1, r1, r0
 8015d60:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015d62:	fa0e fe03 	lsl.w	lr, lr, r3
 8015d66:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8015d6a:	ea41 0002 	orr.w	r0, r1, r2
 8015d6e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8015d72:	2300      	movs	r3, #0
 8015d74:	e7ee      	b.n	8015d54 <NVIC_EncodePriority+0x1c>
	...

08015d78 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8015d78:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8015d7c:	4905      	ldr	r1, [pc, #20]	@ (8015d94 <__NVIC_SystemReset+0x1c>)
 8015d7e:	68ca      	ldr	r2, [r1, #12]
 8015d80:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8015d84:	4b04      	ldr	r3, [pc, #16]	@ (8015d98 <__NVIC_SystemReset+0x20>)
 8015d86:	4313      	orrs	r3, r2
 8015d88:	60cb      	str	r3, [r1, #12]
 8015d8a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8015d8e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8015d90:	e7fd      	b.n	8015d8e <__NVIC_SystemReset+0x16>
 8015d92:	bf00      	nop
 8015d94:	e000ed00 	.word	0xe000ed00
 8015d98:	05fa0004 	.word	0x05fa0004

08015d9c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015d9c:	4a07      	ldr	r2, [pc, #28]	@ (8015dbc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8015d9e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8015da0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8015da4:	041b      	lsls	r3, r3, #16
 8015da6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8015da8:	0200      	lsls	r0, r0, #8
 8015daa:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015dae:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8015db0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8015db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8015db8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8015dba:	4770      	bx	lr
 8015dbc:	e000ed00 	.word	0xe000ed00

08015dc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8015dc0:	b510      	push	{r4, lr}
 8015dc2:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015dc4:	4b05      	ldr	r3, [pc, #20]	@ (8015ddc <HAL_NVIC_SetPriority+0x1c>)
 8015dc6:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015dc8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8015dcc:	f7ff ffb4 	bl	8015d38 <NVIC_EncodePriority>
 8015dd0:	4601      	mov	r1, r0
 8015dd2:	4620      	mov	r0, r4
 8015dd4:	f7ff ff9c 	bl	8015d10 <__NVIC_SetPriority>
}
 8015dd8:	bd10      	pop	{r4, pc}
 8015dda:	bf00      	nop
 8015ddc:	e000ed00 	.word	0xe000ed00

08015de0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015de0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015de2:	f7ff ff87 	bl	8015cf4 <__NVIC_EnableIRQ>
}
 8015de6:	bd08      	pop	{r3, pc}

08015de8 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8015de8:	b508      	push	{r3, lr}
  /* System Reset */
  NVIC_SystemReset();
 8015dea:	f7ff ffc5 	bl	8015d78 <__NVIC_SystemReset>
	...

08015df0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015df0:	2300      	movs	r3, #0
 8015df2:	2b0f      	cmp	r3, #15
 8015df4:	f200 80d7 	bhi.w	8015fa6 <HAL_GPIO_Init+0x1b6>
{
 8015df8:	b570      	push	{r4, r5, r6, lr}
 8015dfa:	b082      	sub	sp, #8
 8015dfc:	e065      	b.n	8015eca <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8015dfe:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8015e00:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8015e04:	2403      	movs	r4, #3
 8015e06:	fa04 f40e 	lsl.w	r4, r4, lr
 8015e0a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015e0e:	68cc      	ldr	r4, [r1, #12]
 8015e10:	fa04 f40e 	lsl.w	r4, r4, lr
 8015e14:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8015e16:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015e18:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015e1a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015e1e:	684a      	ldr	r2, [r1, #4]
 8015e20:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8015e24:	409a      	lsls	r2, r3
 8015e26:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8015e28:	6042      	str	r2, [r0, #4]
 8015e2a:	e05c      	b.n	8015ee6 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015e2c:	08dc      	lsrs	r4, r3, #3
 8015e2e:	3408      	adds	r4, #8
 8015e30:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8015e34:	f003 0507 	and.w	r5, r3, #7
 8015e38:	00ad      	lsls	r5, r5, #2
 8015e3a:	f04f 0e0f 	mov.w	lr, #15
 8015e3e:	fa0e fe05 	lsl.w	lr, lr, r5
 8015e42:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8015e46:	690a      	ldr	r2, [r1, #16]
 8015e48:	40aa      	lsls	r2, r5
 8015e4a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8015e4e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8015e52:	e05c      	b.n	8015f0e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8015e54:	2204      	movs	r2, #4
 8015e56:	e000      	b.n	8015e5a <HAL_GPIO_Init+0x6a>
 8015e58:	2200      	movs	r2, #0
 8015e5a:	fa02 f20e 	lsl.w	r2, r2, lr
 8015e5e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015e60:	3402      	adds	r4, #2
 8015e62:	4d51      	ldr	r5, [pc, #324]	@ (8015fa8 <HAL_GPIO_Init+0x1b8>)
 8015e64:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015e68:	4a50      	ldr	r2, [pc, #320]	@ (8015fac <HAL_GPIO_Init+0x1bc>)
 8015e6a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8015e6c:	ea6f 020c 	mvn.w	r2, ip
 8015e70:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015e74:	684e      	ldr	r6, [r1, #4]
 8015e76:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8015e7a:	d001      	beq.n	8015e80 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8015e7c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8015e80:	4c4a      	ldr	r4, [pc, #296]	@ (8015fac <HAL_GPIO_Init+0x1bc>)
 8015e82:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8015e84:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8015e86:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015e8a:	684e      	ldr	r6, [r1, #4]
 8015e8c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8015e90:	d001      	beq.n	8015e96 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8015e92:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8015e96:	4c45      	ldr	r4, [pc, #276]	@ (8015fac <HAL_GPIO_Init+0x1bc>)
 8015e98:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8015e9a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8015e9c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015ea0:	684e      	ldr	r6, [r1, #4]
 8015ea2:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8015ea6:	d001      	beq.n	8015eac <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8015ea8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8015eac:	4c3f      	ldr	r4, [pc, #252]	@ (8015fac <HAL_GPIO_Init+0x1bc>)
 8015eae:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015eb0:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8015eb2:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015eb4:	684d      	ldr	r5, [r1, #4]
 8015eb6:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8015eba:	d001      	beq.n	8015ec0 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8015ebc:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8015ec0:	4c3a      	ldr	r4, [pc, #232]	@ (8015fac <HAL_GPIO_Init+0x1bc>)
 8015ec2:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015ec4:	3301      	adds	r3, #1
 8015ec6:	2b0f      	cmp	r3, #15
 8015ec8:	d86b      	bhi.n	8015fa2 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8015eca:	2201      	movs	r2, #1
 8015ecc:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8015ece:	680c      	ldr	r4, [r1, #0]
 8015ed0:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8015ed4:	ea32 0404 	bics.w	r4, r2, r4
 8015ed8:	d1f4      	bne.n	8015ec4 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8015eda:	684c      	ldr	r4, [r1, #4]
 8015edc:	f004 0403 	and.w	r4, r4, #3
 8015ee0:	3c01      	subs	r4, #1
 8015ee2:	2c01      	cmp	r4, #1
 8015ee4:	d98b      	bls.n	8015dfe <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015ee6:	684a      	ldr	r2, [r1, #4]
 8015ee8:	f002 0203 	and.w	r2, r2, #3
 8015eec:	2a03      	cmp	r2, #3
 8015eee:	d009      	beq.n	8015f04 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8015ef0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8015ef2:	005d      	lsls	r5, r3, #1
 8015ef4:	2203      	movs	r2, #3
 8015ef6:	40aa      	lsls	r2, r5
 8015ef8:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015efc:	688a      	ldr	r2, [r1, #8]
 8015efe:	40aa      	lsls	r2, r5
 8015f00:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8015f02:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015f04:	684a      	ldr	r2, [r1, #4]
 8015f06:	f002 0203 	and.w	r2, r2, #3
 8015f0a:	2a02      	cmp	r2, #2
 8015f0c:	d08e      	beq.n	8015e2c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8015f0e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8015f10:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8015f14:	2203      	movs	r2, #3
 8015f16:	fa02 f20e 	lsl.w	r2, r2, lr
 8015f1a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015f1e:	684a      	ldr	r2, [r1, #4]
 8015f20:	f002 0203 	and.w	r2, r2, #3
 8015f24:	fa02 f20e 	lsl.w	r2, r2, lr
 8015f28:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8015f2a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015f2c:	684a      	ldr	r2, [r1, #4]
 8015f2e:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8015f32:	d0c7      	beq.n	8015ec4 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015f34:	2200      	movs	r2, #0
 8015f36:	9201      	str	r2, [sp, #4]
 8015f38:	4a1d      	ldr	r2, [pc, #116]	@ (8015fb0 <HAL_GPIO_Init+0x1c0>)
 8015f3a:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8015f3c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8015f40:	6454      	str	r4, [r2, #68]	@ 0x44
 8015f42:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8015f44:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8015f48:	9201      	str	r2, [sp, #4]
 8015f4a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8015f4c:	089c      	lsrs	r4, r3, #2
 8015f4e:	1ca5      	adds	r5, r4, #2
 8015f50:	4a15      	ldr	r2, [pc, #84]	@ (8015fa8 <HAL_GPIO_Init+0x1b8>)
 8015f52:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8015f56:	f003 0e03 	and.w	lr, r3, #3
 8015f5a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8015f5e:	220f      	movs	r2, #15
 8015f60:	fa02 f20e 	lsl.w	r2, r2, lr
 8015f64:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8015f68:	4a12      	ldr	r2, [pc, #72]	@ (8015fb4 <HAL_GPIO_Init+0x1c4>)
 8015f6a:	4290      	cmp	r0, r2
 8015f6c:	f43f af74 	beq.w	8015e58 <HAL_GPIO_Init+0x68>
 8015f70:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8015f74:	4290      	cmp	r0, r2
 8015f76:	d00e      	beq.n	8015f96 <HAL_GPIO_Init+0x1a6>
 8015f78:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8015f7c:	4290      	cmp	r0, r2
 8015f7e:	d00c      	beq.n	8015f9a <HAL_GPIO_Init+0x1aa>
 8015f80:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8015f84:	4290      	cmp	r0, r2
 8015f86:	d00a      	beq.n	8015f9e <HAL_GPIO_Init+0x1ae>
 8015f88:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8015f8c:	4290      	cmp	r0, r2
 8015f8e:	f43f af61 	beq.w	8015e54 <HAL_GPIO_Init+0x64>
 8015f92:	2207      	movs	r2, #7
 8015f94:	e761      	b.n	8015e5a <HAL_GPIO_Init+0x6a>
 8015f96:	2201      	movs	r2, #1
 8015f98:	e75f      	b.n	8015e5a <HAL_GPIO_Init+0x6a>
 8015f9a:	2202      	movs	r2, #2
 8015f9c:	e75d      	b.n	8015e5a <HAL_GPIO_Init+0x6a>
 8015f9e:	2203      	movs	r2, #3
 8015fa0:	e75b      	b.n	8015e5a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8015fa2:	b002      	add	sp, #8
 8015fa4:	bd70      	pop	{r4, r5, r6, pc}
 8015fa6:	4770      	bx	lr
 8015fa8:	40013800 	.word	0x40013800
 8015fac:	40013c00 	.word	0x40013c00
 8015fb0:	40023800 	.word	0x40023800
 8015fb4:	40020000 	.word	0x40020000

08015fb8 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015fb8:	2300      	movs	r3, #0
 8015fba:	2b0f      	cmp	r3, #15
 8015fbc:	d87c      	bhi.n	80160b8 <HAL_GPIO_DeInit+0x100>
{
 8015fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fc0:	e02d      	b.n	801601e <HAL_GPIO_DeInit+0x66>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8015fc2:	2504      	movs	r5, #4
 8015fc4:	e000      	b.n	8015fc8 <HAL_GPIO_DeInit+0x10>
 8015fc6:	2500      	movs	r5, #0
 8015fc8:	fa05 f50c 	lsl.w	r5, r5, ip
 8015fcc:	42a5      	cmp	r5, r4
 8015fce:	d057      	beq.n	8016080 <HAL_GPIO_DeInit+0xc8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8015fd0:	6804      	ldr	r4, [r0, #0]
 8015fd2:	005d      	lsls	r5, r3, #1
 8015fd4:	f04f 0c03 	mov.w	ip, #3
 8015fd8:	fa0c fc05 	lsl.w	ip, ip, r5
 8015fdc:	ea24 040c 	bic.w	r4, r4, ip
 8015fe0:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8015fe2:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8015fe6:	f10e 0e08 	add.w	lr, lr, #8
 8015fea:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8015fee:	f003 0607 	and.w	r6, r3, #7
 8015ff2:	00b6      	lsls	r6, r6, #2
 8015ff4:	250f      	movs	r5, #15
 8015ff6:	40b5      	lsls	r5, r6
 8015ff8:	ea24 0405 	bic.w	r4, r4, r5
 8015ffc:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8016000:	68c4      	ldr	r4, [r0, #12]
 8016002:	ea24 040c 	bic.w	r4, r4, ip
 8016006:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016008:	6844      	ldr	r4, [r0, #4]
 801600a:	ea24 0202 	bic.w	r2, r4, r2
 801600e:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8016010:	6882      	ldr	r2, [r0, #8]
 8016012:	ea22 020c 	bic.w	r2, r2, ip
 8016016:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016018:	3301      	adds	r3, #1
 801601a:	2b0f      	cmp	r3, #15
 801601c:	d84b      	bhi.n	80160b6 <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 801601e:	2201      	movs	r2, #1
 8016020:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8016022:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8016026:	ea32 0401 	bics.w	r4, r2, r1
 801602a:	d1f5      	bne.n	8016018 <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2U];
 801602c:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8016030:	f10e 0502 	add.w	r5, lr, #2
 8016034:	4c21      	ldr	r4, [pc, #132]	@ (80160bc <HAL_GPIO_DeInit+0x104>)
 8016036:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801603a:	f003 0c03 	and.w	ip, r3, #3
 801603e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8016042:	250f      	movs	r5, #15
 8016044:	fa05 f70c 	lsl.w	r7, r5, ip
 8016048:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801604a:	4d1d      	ldr	r5, [pc, #116]	@ (80160c0 <HAL_GPIO_DeInit+0x108>)
 801604c:	42a8      	cmp	r0, r5
 801604e:	d0ba      	beq.n	8015fc6 <HAL_GPIO_DeInit+0xe>
 8016050:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8016054:	42a8      	cmp	r0, r5
 8016056:	d00d      	beq.n	8016074 <HAL_GPIO_DeInit+0xbc>
 8016058:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801605c:	42a8      	cmp	r0, r5
 801605e:	d00b      	beq.n	8016078 <HAL_GPIO_DeInit+0xc0>
 8016060:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8016064:	42a8      	cmp	r0, r5
 8016066:	d009      	beq.n	801607c <HAL_GPIO_DeInit+0xc4>
 8016068:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801606c:	42a8      	cmp	r0, r5
 801606e:	d0a8      	beq.n	8015fc2 <HAL_GPIO_DeInit+0xa>
 8016070:	2507      	movs	r5, #7
 8016072:	e7a9      	b.n	8015fc8 <HAL_GPIO_DeInit+0x10>
 8016074:	2501      	movs	r5, #1
 8016076:	e7a7      	b.n	8015fc8 <HAL_GPIO_DeInit+0x10>
 8016078:	2502      	movs	r5, #2
 801607a:	e7a5      	b.n	8015fc8 <HAL_GPIO_DeInit+0x10>
 801607c:	2503      	movs	r5, #3
 801607e:	e7a3      	b.n	8015fc8 <HAL_GPIO_DeInit+0x10>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8016080:	4c10      	ldr	r4, [pc, #64]	@ (80160c4 <HAL_GPIO_DeInit+0x10c>)
 8016082:	6825      	ldr	r5, [r4, #0]
 8016084:	ea25 0506 	bic.w	r5, r5, r6
 8016088:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801608a:	6865      	ldr	r5, [r4, #4]
 801608c:	ea25 0506 	bic.w	r5, r5, r6
 8016090:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8016092:	68e5      	ldr	r5, [r4, #12]
 8016094:	ea25 0506 	bic.w	r5, r5, r6
 8016098:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801609a:	68a5      	ldr	r5, [r4, #8]
 801609c:	ea25 0506 	bic.w	r5, r5, r6
 80160a0:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80160a2:	4e06      	ldr	r6, [pc, #24]	@ (80160bc <HAL_GPIO_DeInit+0x104>)
 80160a4:	f10e 0402 	add.w	r4, lr, #2
 80160a8:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 80160ac:	ea25 0507 	bic.w	r5, r5, r7
 80160b0:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 80160b4:	e78c      	b.n	8015fd0 <HAL_GPIO_DeInit+0x18>
    }
  }
}
 80160b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160b8:	4770      	bx	lr
 80160ba:	bf00      	nop
 80160bc:	40013800 	.word	0x40013800
 80160c0:	40020000 	.word	0x40020000
 80160c4:	40013c00 	.word	0x40013c00

080160c8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80160c8:	6903      	ldr	r3, [r0, #16]
 80160ca:	4219      	tst	r1, r3
 80160cc:	d001      	beq.n	80160d2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80160ce:	2001      	movs	r0, #1
 80160d0:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80160d2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80160d4:	4770      	bx	lr

080160d6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80160d6:	b10a      	cbz	r2, 80160dc <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80160d8:	6181      	str	r1, [r0, #24]
 80160da:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80160dc:	0409      	lsls	r1, r1, #16
 80160de:	6181      	str	r1, [r0, #24]
  }
}
 80160e0:	4770      	bx	lr

080160e2 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80160e2:	6803      	ldr	r3, [r0, #0]
 80160e4:	695a      	ldr	r2, [r3, #20]
 80160e6:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80160ea:	d101      	bne.n	80160f0 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80160ec:	2000      	movs	r0, #0
}
 80160ee:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80160f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80160f4:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80160f6:	2300      	movs	r3, #0
 80160f8:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80160fa:	2220      	movs	r2, #32
 80160fc:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016100:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8016104:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8016106:	f042 0204 	orr.w	r2, r2, #4
 801610a:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 801610c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8016110:	2001      	movs	r0, #1
 8016112:	4770      	bx	lr

08016114 <I2C_WaitOnFlagUntilTimeout>:
{
 8016114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016118:	4606      	mov	r6, r0
 801611a:	460c      	mov	r4, r1
 801611c:	4617      	mov	r7, r2
 801611e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016120:	e03b      	b.n	801619a <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016122:	f7ff fdcd 	bl	8015cc0 <HAL_GetTick>
 8016126:	9b06      	ldr	r3, [sp, #24]
 8016128:	1ac0      	subs	r0, r0, r3
 801612a:	4540      	cmp	r0, r8
 801612c:	d802      	bhi.n	8016134 <I2C_WaitOnFlagUntilTimeout+0x20>
 801612e:	f1b8 0f00 	cmp.w	r8, #0
 8016132:	d132      	bne.n	801619a <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8016134:	2d01      	cmp	r5, #1
 8016136:	d018      	beq.n	801616a <I2C_WaitOnFlagUntilTimeout+0x56>
 8016138:	6833      	ldr	r3, [r6, #0]
 801613a:	699b      	ldr	r3, [r3, #24]
 801613c:	ea24 0303 	bic.w	r3, r4, r3
 8016140:	b29b      	uxth	r3, r3
 8016142:	fab3 f383 	clz	r3, r3
 8016146:	095b      	lsrs	r3, r3, #5
 8016148:	429f      	cmp	r7, r3
 801614a:	d126      	bne.n	801619a <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 801614c:	2300      	movs	r3, #0
 801614e:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8016150:	2220      	movs	r2, #32
 8016152:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8016156:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801615a:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 801615c:	f042 0220 	orr.w	r2, r2, #32
 8016160:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016162:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8016166:	2001      	movs	r0, #1
 8016168:	e027      	b.n	80161ba <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801616a:	6833      	ldr	r3, [r6, #0]
 801616c:	695b      	ldr	r3, [r3, #20]
 801616e:	ea24 0303 	bic.w	r3, r4, r3
 8016172:	b29b      	uxth	r3, r3
 8016174:	fab3 f383 	clz	r3, r3
 8016178:	095b      	lsrs	r3, r3, #5
 801617a:	e7e5      	b.n	8016148 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801617c:	6833      	ldr	r3, [r6, #0]
 801617e:	695b      	ldr	r3, [r3, #20]
 8016180:	ea24 0c03 	bic.w	ip, r4, r3
 8016184:	fa1f fc8c 	uxth.w	ip, ip
 8016188:	fabc fc8c 	clz	ip, ip
 801618c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8016190:	4567      	cmp	r7, ip
 8016192:	d111      	bne.n	80161b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8016194:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8016198:	d1c3      	bne.n	8016122 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801619a:	f3c4 4507 	ubfx	r5, r4, #16, #8
 801619e:	2d01      	cmp	r5, #1
 80161a0:	d0ec      	beq.n	801617c <I2C_WaitOnFlagUntilTimeout+0x68>
 80161a2:	6833      	ldr	r3, [r6, #0]
 80161a4:	699b      	ldr	r3, [r3, #24]
 80161a6:	ea24 0c03 	bic.w	ip, r4, r3
 80161aa:	fa1f fc8c 	uxth.w	ip, ip
 80161ae:	fabc fc8c 	clz	ip, ip
 80161b2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80161b6:	e7eb      	b.n	8016190 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 80161b8:	2000      	movs	r0, #0
}
 80161ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080161be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80161be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161c2:	4605      	mov	r5, r0
 80161c4:	460e      	mov	r6, r1
 80161c6:	4690      	mov	r8, r2
 80161c8:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80161ca:	e053      	b.n	8016274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80161cc:	681a      	ldr	r2, [r3, #0]
 80161ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80161d2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80161d4:	682b      	ldr	r3, [r5, #0]
 80161d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80161da:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80161dc:	2300      	movs	r3, #0
 80161de:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80161e0:	2220      	movs	r2, #32
 80161e2:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80161e6:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80161ea:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80161ec:	f042 0204 	orr.w	r2, r2, #4
 80161f0:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80161f2:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 80161f6:	2001      	movs	r0, #1
 80161f8:	e04a      	b.n	8016290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80161fa:	f7ff fd61 	bl	8015cc0 <HAL_GetTick>
 80161fe:	eba0 0009 	sub.w	r0, r0, r9
 8016202:	4540      	cmp	r0, r8
 8016204:	d802      	bhi.n	801620c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8016206:	f1b8 0f00 	cmp.w	r8, #0
 801620a:	d133      	bne.n	8016274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 801620c:	2f01      	cmp	r7, #1
 801620e:	d017      	beq.n	8016240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8016210:	682b      	ldr	r3, [r5, #0]
 8016212:	699b      	ldr	r3, [r3, #24]
 8016214:	ea26 0303 	bic.w	r3, r6, r3
 8016218:	b29b      	uxth	r3, r3
 801621a:	3b00      	subs	r3, #0
 801621c:	bf18      	it	ne
 801621e:	2301      	movne	r3, #1
 8016220:	b343      	cbz	r3, 8016274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8016222:	2300      	movs	r3, #0
 8016224:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8016226:	2220      	movs	r2, #32
 8016228:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 801622c:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016230:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8016232:	f042 0220 	orr.w	r2, r2, #32
 8016236:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016238:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 801623c:	2001      	movs	r0, #1
 801623e:	e027      	b.n	8016290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8016240:	682b      	ldr	r3, [r5, #0]
 8016242:	695b      	ldr	r3, [r3, #20]
 8016244:	ea26 0303 	bic.w	r3, r6, r3
 8016248:	b29b      	uxth	r3, r3
 801624a:	3b00      	subs	r3, #0
 801624c:	bf18      	it	ne
 801624e:	2301      	movne	r3, #1
 8016250:	e7e6      	b.n	8016220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8016252:	682b      	ldr	r3, [r5, #0]
 8016254:	699c      	ldr	r4, [r3, #24]
 8016256:	ea26 0404 	bic.w	r4, r6, r4
 801625a:	b2a4      	uxth	r4, r4
 801625c:	3c00      	subs	r4, #0
 801625e:	bf18      	it	ne
 8016260:	2401      	movne	r4, #1
 8016262:	b1a4      	cbz	r4, 801628e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8016264:	682b      	ldr	r3, [r5, #0]
 8016266:	695a      	ldr	r2, [r3, #20]
 8016268:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 801626c:	d1ae      	bne.n	80161cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 801626e:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8016272:	d1c2      	bne.n	80161fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8016274:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8016278:	2f01      	cmp	r7, #1
 801627a:	d1ea      	bne.n	8016252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 801627c:	682b      	ldr	r3, [r5, #0]
 801627e:	695c      	ldr	r4, [r3, #20]
 8016280:	ea26 0404 	bic.w	r4, r6, r4
 8016284:	b2a4      	uxth	r4, r4
 8016286:	3c00      	subs	r4, #0
 8016288:	bf18      	it	ne
 801628a:	2401      	movne	r4, #1
 801628c:	e7e9      	b.n	8016262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 801628e:	2000      	movs	r0, #0
}
 8016290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016294 <I2C_MasterRequestWrite>:
{
 8016294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016296:	b083      	sub	sp, #12
 8016298:	4604      	mov	r4, r0
 801629a:	460d      	mov	r5, r1
 801629c:	4616      	mov	r6, r2
 801629e:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80162a0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80162a2:	2b08      	cmp	r3, #8
 80162a4:	d00d      	beq.n	80162c2 <I2C_MasterRequestWrite+0x2e>
 80162a6:	2b01      	cmp	r3, #1
 80162a8:	d00b      	beq.n	80162c2 <I2C_MasterRequestWrite+0x2e>
 80162aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80162ae:	d008      	beq.n	80162c2 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80162b0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80162b2:	2b12      	cmp	r3, #18
 80162b4:	d10a      	bne.n	80162cc <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80162b6:	6802      	ldr	r2, [r0, #0]
 80162b8:	6813      	ldr	r3, [r2, #0]
 80162ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80162be:	6013      	str	r3, [r2, #0]
 80162c0:	e004      	b.n	80162cc <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80162c2:	6822      	ldr	r2, [r4, #0]
 80162c4:	6813      	ldr	r3, [r2, #0]
 80162c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80162ca:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80162cc:	9700      	str	r7, [sp, #0]
 80162ce:	4633      	mov	r3, r6
 80162d0:	2200      	movs	r2, #0
 80162d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80162d6:	4620      	mov	r0, r4
 80162d8:	f7ff ff1c 	bl	8016114 <I2C_WaitOnFlagUntilTimeout>
 80162dc:	b980      	cbnz	r0, 8016300 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80162de:	6923      	ldr	r3, [r4, #16]
 80162e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80162e4:	d116      	bne.n	8016314 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80162e6:	6823      	ldr	r3, [r4, #0]
 80162e8:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80162ec:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80162ee:	463b      	mov	r3, r7
 80162f0:	4632      	mov	r2, r6
 80162f2:	4913      	ldr	r1, [pc, #76]	@ (8016340 <I2C_MasterRequestWrite+0xac>)
 80162f4:	4620      	mov	r0, r4
 80162f6:	f7ff ff62 	bl	80161be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80162fa:	b9f8      	cbnz	r0, 801633c <I2C_MasterRequestWrite+0xa8>
}
 80162fc:	b003      	add	sp, #12
 80162fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8016300:	6823      	ldr	r3, [r4, #0]
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8016308:	d002      	beq.n	8016310 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801630a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801630e:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8016310:	2003      	movs	r0, #3
 8016312:	e7f3      	b.n	80162fc <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8016314:	11eb      	asrs	r3, r5, #7
 8016316:	6822      	ldr	r2, [r4, #0]
 8016318:	f003 0306 	and.w	r3, r3, #6
 801631c:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8016320:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8016322:	463b      	mov	r3, r7
 8016324:	4632      	mov	r2, r6
 8016326:	4907      	ldr	r1, [pc, #28]	@ (8016344 <I2C_MasterRequestWrite+0xb0>)
 8016328:	4620      	mov	r0, r4
 801632a:	f7ff ff48 	bl	80161be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801632e:	b918      	cbnz	r0, 8016338 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8016330:	6823      	ldr	r3, [r4, #0]
 8016332:	b2ed      	uxtb	r5, r5
 8016334:	611d      	str	r5, [r3, #16]
 8016336:	e7da      	b.n	80162ee <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8016338:	2001      	movs	r0, #1
 801633a:	e7df      	b.n	80162fc <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 801633c:	2001      	movs	r0, #1
 801633e:	e7dd      	b.n	80162fc <I2C_MasterRequestWrite+0x68>
 8016340:	00010002 	.word	0x00010002
 8016344:	00010008 	.word	0x00010008

08016348 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8016348:	b570      	push	{r4, r5, r6, lr}
 801634a:	4604      	mov	r4, r0
 801634c:	460d      	mov	r5, r1
 801634e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8016350:	6823      	ldr	r3, [r4, #0]
 8016352:	695b      	ldr	r3, [r3, #20]
 8016354:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016358:	d121      	bne.n	801639e <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801635a:	4620      	mov	r0, r4
 801635c:	f7ff fec1 	bl	80160e2 <I2C_IsAcknowledgeFailed>
 8016360:	b9f8      	cbnz	r0, 80163a2 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8016362:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8016366:	d0f3      	beq.n	8016350 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016368:	f7ff fcaa 	bl	8015cc0 <HAL_GetTick>
 801636c:	1b80      	subs	r0, r0, r6
 801636e:	42a8      	cmp	r0, r5
 8016370:	d801      	bhi.n	8016376 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8016372:	2d00      	cmp	r5, #0
 8016374:	d1ec      	bne.n	8016350 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8016376:	6823      	ldr	r3, [r4, #0]
 8016378:	695b      	ldr	r3, [r3, #20]
 801637a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801637e:	d1e7      	bne.n	8016350 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8016380:	2300      	movs	r3, #0
 8016382:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8016384:	2220      	movs	r2, #32
 8016386:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 801638a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801638e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8016390:	f042 0220 	orr.w	r2, r2, #32
 8016394:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016396:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 801639a:	2001      	movs	r0, #1
 801639c:	e000      	b.n	80163a0 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 801639e:	2000      	movs	r0, #0
}
 80163a0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80163a2:	2001      	movs	r0, #1
 80163a4:	e7fc      	b.n	80163a0 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

080163a6 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80163a6:	b570      	push	{r4, r5, r6, lr}
 80163a8:	4604      	mov	r4, r0
 80163aa:	460d      	mov	r5, r1
 80163ac:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80163ae:	6823      	ldr	r3, [r4, #0]
 80163b0:	695b      	ldr	r3, [r3, #20]
 80163b2:	f013 0f04 	tst.w	r3, #4
 80163b6:	d121      	bne.n	80163fc <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80163b8:	4620      	mov	r0, r4
 80163ba:	f7ff fe92 	bl	80160e2 <I2C_IsAcknowledgeFailed>
 80163be:	b9f8      	cbnz	r0, 8016400 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80163c0:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80163c4:	d0f3      	beq.n	80163ae <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80163c6:	f7ff fc7b 	bl	8015cc0 <HAL_GetTick>
 80163ca:	1b80      	subs	r0, r0, r6
 80163cc:	42a8      	cmp	r0, r5
 80163ce:	d801      	bhi.n	80163d4 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80163d0:	2d00      	cmp	r5, #0
 80163d2:	d1ec      	bne.n	80163ae <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80163d4:	6823      	ldr	r3, [r4, #0]
 80163d6:	695b      	ldr	r3, [r3, #20]
 80163d8:	f013 0f04 	tst.w	r3, #4
 80163dc:	d1e7      	bne.n	80163ae <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80163de:	2300      	movs	r3, #0
 80163e0:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80163e2:	2220      	movs	r2, #32
 80163e4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80163e8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80163ec:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80163ee:	f042 0220 	orr.w	r2, r2, #32
 80163f2:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80163f4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80163f8:	2001      	movs	r0, #1
 80163fa:	e000      	b.n	80163fe <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 80163fc:	2000      	movs	r0, #0
}
 80163fe:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8016400:	2001      	movs	r0, #1
 8016402:	e7fc      	b.n	80163fe <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08016404 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8016404:	2800      	cmp	r0, #0
 8016406:	f000 80cc 	beq.w	80165a2 <HAL_I2C_Init+0x19e>
{
 801640a:	b570      	push	{r4, r5, r6, lr}
 801640c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 801640e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8016412:	2b00      	cmp	r3, #0
 8016414:	d077      	beq.n	8016506 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8016416:	2324      	movs	r3, #36	@ 0x24
 8016418:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 801641c:	6822      	ldr	r2, [r4, #0]
 801641e:	6813      	ldr	r3, [r2, #0]
 8016420:	f023 0301 	bic.w	r3, r3, #1
 8016424:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8016426:	6822      	ldr	r2, [r4, #0]
 8016428:	6813      	ldr	r3, [r2, #0]
 801642a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801642e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8016430:	6822      	ldr	r2, [r4, #0]
 8016432:	6813      	ldr	r3, [r2, #0]
 8016434:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8016438:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801643a:	f000 fd81 	bl	8016f40 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801643e:	6862      	ldr	r2, [r4, #4]
 8016440:	4b5a      	ldr	r3, [pc, #360]	@ (80165ac <HAL_I2C_Init+0x1a8>)
 8016442:	429a      	cmp	r2, r3
 8016444:	d864      	bhi.n	8016510 <HAL_I2C_Init+0x10c>
 8016446:	4b5a      	ldr	r3, [pc, #360]	@ (80165b0 <HAL_I2C_Init+0x1ac>)
 8016448:	4298      	cmp	r0, r3
 801644a:	bf8c      	ite	hi
 801644c:	2300      	movhi	r3, #0
 801644e:	2301      	movls	r3, #1
 8016450:	2b00      	cmp	r3, #0
 8016452:	f040 80a8 	bne.w	80165a6 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8016456:	4957      	ldr	r1, [pc, #348]	@ (80165b4 <HAL_I2C_Init+0x1b0>)
 8016458:	fba1 3100 	umull	r3, r1, r1, r0
 801645c:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801645e:	6825      	ldr	r5, [r4, #0]
 8016460:	686a      	ldr	r2, [r5, #4]
 8016462:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8016466:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 801646a:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801646c:	6821      	ldr	r1, [r4, #0]
 801646e:	6a0a      	ldr	r2, [r1, #32]
 8016470:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8016474:	6866      	ldr	r6, [r4, #4]
 8016476:	4d4d      	ldr	r5, [pc, #308]	@ (80165ac <HAL_I2C_Init+0x1a8>)
 8016478:	42ae      	cmp	r6, r5
 801647a:	d84f      	bhi.n	801651c <HAL_I2C_Init+0x118>
 801647c:	3301      	adds	r3, #1
 801647e:	4313      	orrs	r3, r2
 8016480:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8016482:	6821      	ldr	r1, [r4, #0]
 8016484:	69ca      	ldr	r2, [r1, #28]
 8016486:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 801648a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 801648e:	6865      	ldr	r5, [r4, #4]
 8016490:	4b46      	ldr	r3, [pc, #280]	@ (80165ac <HAL_I2C_Init+0x1a8>)
 8016492:	429d      	cmp	r5, r3
 8016494:	d84c      	bhi.n	8016530 <HAL_I2C_Init+0x12c>
 8016496:	1e43      	subs	r3, r0, #1
 8016498:	006d      	lsls	r5, r5, #1
 801649a:	fbb3 f3f5 	udiv	r3, r3, r5
 801649e:	3301      	adds	r3, #1
 80164a0:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80164a4:	4203      	tst	r3, r0
 80164a6:	d078      	beq.n	801659a <HAL_I2C_Init+0x196>
 80164a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80164ac:	431a      	orrs	r2, r3
 80164ae:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80164b0:	6821      	ldr	r1, [r4, #0]
 80164b2:	680b      	ldr	r3, [r1, #0]
 80164b4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80164b8:	69e2      	ldr	r2, [r4, #28]
 80164ba:	6a20      	ldr	r0, [r4, #32]
 80164bc:	4302      	orrs	r2, r0
 80164be:	4313      	orrs	r3, r2
 80164c0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80164c2:	6821      	ldr	r1, [r4, #0]
 80164c4:	688b      	ldr	r3, [r1, #8]
 80164c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80164ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80164ce:	6922      	ldr	r2, [r4, #16]
 80164d0:	68e0      	ldr	r0, [r4, #12]
 80164d2:	4302      	orrs	r2, r0
 80164d4:	4313      	orrs	r3, r2
 80164d6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80164d8:	6821      	ldr	r1, [r4, #0]
 80164da:	68cb      	ldr	r3, [r1, #12]
 80164dc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80164e0:	6962      	ldr	r2, [r4, #20]
 80164e2:	69a0      	ldr	r0, [r4, #24]
 80164e4:	4302      	orrs	r2, r0
 80164e6:	4313      	orrs	r3, r2
 80164e8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80164ea:	6822      	ldr	r2, [r4, #0]
 80164ec:	6813      	ldr	r3, [r2, #0]
 80164ee:	f043 0301 	orr.w	r3, r3, #1
 80164f2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80164f4:	2000      	movs	r0, #0
 80164f6:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80164f8:	2320      	movs	r3, #32
 80164fa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80164fe:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016500:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8016504:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8016506:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 801650a:	f7fb fc55 	bl	8011db8 <HAL_I2C_MspInit>
 801650e:	e782      	b.n	8016416 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8016510:	4b29      	ldr	r3, [pc, #164]	@ (80165b8 <HAL_I2C_Init+0x1b4>)
 8016512:	4298      	cmp	r0, r3
 8016514:	bf8c      	ite	hi
 8016516:	2300      	movhi	r3, #0
 8016518:	2301      	movls	r3, #1
 801651a:	e799      	b.n	8016450 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801651c:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8016520:	fb05 f303 	mul.w	r3, r5, r3
 8016524:	4d25      	ldr	r5, [pc, #148]	@ (80165bc <HAL_I2C_Init+0x1b8>)
 8016526:	fba5 5303 	umull	r5, r3, r5, r3
 801652a:	099b      	lsrs	r3, r3, #6
 801652c:	3301      	adds	r3, #1
 801652e:	e7a6      	b.n	801647e <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8016530:	68a6      	ldr	r6, [r4, #8]
 8016532:	b9be      	cbnz	r6, 8016564 <HAL_I2C_Init+0x160>
 8016534:	1e43      	subs	r3, r0, #1
 8016536:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801653a:	fbb3 f3fc 	udiv	r3, r3, ip
 801653e:	3301      	adds	r3, #1
 8016540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016544:	fab3 f383 	clz	r3, r3
 8016548:	095b      	lsrs	r3, r3, #5
 801654a:	bb43      	cbnz	r3, 801659e <HAL_I2C_Init+0x19a>
 801654c:	b9c6      	cbnz	r6, 8016580 <HAL_I2C_Init+0x17c>
 801654e:	1e43      	subs	r3, r0, #1
 8016550:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016554:	fbb3 f3f5 	udiv	r3, r3, r5
 8016558:	3301      	adds	r3, #1
 801655a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801655e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8016562:	e7a3      	b.n	80164ac <HAL_I2C_Init+0xa8>
 8016564:	1e43      	subs	r3, r0, #1
 8016566:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 801656a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 801656e:	fbb3 f3fc 	udiv	r3, r3, ip
 8016572:	3301      	adds	r3, #1
 8016574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016578:	fab3 f383 	clz	r3, r3
 801657c:	095b      	lsrs	r3, r3, #5
 801657e:	e7e4      	b.n	801654a <HAL_I2C_Init+0x146>
 8016580:	1e43      	subs	r3, r0, #1
 8016582:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8016586:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801658a:	fbb3 f3f5 	udiv	r3, r3, r5
 801658e:	3301      	adds	r3, #1
 8016590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016594:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8016598:	e788      	b.n	80164ac <HAL_I2C_Init+0xa8>
 801659a:	2304      	movs	r3, #4
 801659c:	e786      	b.n	80164ac <HAL_I2C_Init+0xa8>
 801659e:	2301      	movs	r3, #1
 80165a0:	e784      	b.n	80164ac <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80165a2:	2001      	movs	r0, #1
}
 80165a4:	4770      	bx	lr
    return HAL_ERROR;
 80165a6:	2001      	movs	r0, #1
 80165a8:	e7ac      	b.n	8016504 <HAL_I2C_Init+0x100>
 80165aa:	bf00      	nop
 80165ac:	000186a0 	.word	0x000186a0
 80165b0:	001e847f 	.word	0x001e847f
 80165b4:	431bde83 	.word	0x431bde83
 80165b8:	003d08ff 	.word	0x003d08ff
 80165bc:	10624dd3 	.word	0x10624dd3

080165c0 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80165c0:	b1a8      	cbz	r0, 80165ee <HAL_I2C_DeInit+0x2e>
{
 80165c2:	b510      	push	{r4, lr}
 80165c4:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80165c6:	2324      	movs	r3, #36	@ 0x24
 80165c8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80165cc:	6802      	ldr	r2, [r0, #0]
 80165ce:	6813      	ldr	r3, [r2, #0]
 80165d0:	f023 0301 	bic.w	r3, r3, #1
 80165d4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80165d6:	f7fb fc29 	bl	8011e2c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80165da:	2000      	movs	r0, #0
 80165dc:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80165de:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80165e2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80165e4:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 80165e8:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 80165ec:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80165ee:	2001      	movs	r0, #1
}
 80165f0:	4770      	bx	lr
	...

080165f4 <HAL_I2C_Master_Transmit>:
{
 80165f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80165f8:	b085      	sub	sp, #20
 80165fa:	4604      	mov	r4, r0
 80165fc:	460f      	mov	r7, r1
 80165fe:	4691      	mov	r9, r2
 8016600:	4698      	mov	r8, r3
 8016602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8016604:	f7ff fb5c 	bl	8015cc0 <HAL_GetTick>
 8016608:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 801660a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 801660e:	b2c0      	uxtb	r0, r0
 8016610:	2820      	cmp	r0, #32
 8016612:	d004      	beq.n	801661e <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8016614:	2702      	movs	r7, #2
}
 8016616:	4638      	mov	r0, r7
 8016618:	b005      	add	sp, #20
 801661a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801661e:	9500      	str	r5, [sp, #0]
 8016620:	2319      	movs	r3, #25
 8016622:	2201      	movs	r2, #1
 8016624:	494f      	ldr	r1, [pc, #316]	@ (8016764 <HAL_I2C_Master_Transmit+0x170>)
 8016626:	4620      	mov	r0, r4
 8016628:	f7ff fd74 	bl	8016114 <I2C_WaitOnFlagUntilTimeout>
 801662c:	2800      	cmp	r0, #0
 801662e:	f040 8092 	bne.w	8016756 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8016632:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8016636:	2b01      	cmp	r3, #1
 8016638:	f000 808f 	beq.w	801675a <HAL_I2C_Master_Transmit+0x166>
 801663c:	2301      	movs	r3, #1
 801663e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016642:	6823      	ldr	r3, [r4, #0]
 8016644:	681a      	ldr	r2, [r3, #0]
 8016646:	f012 0f01 	tst.w	r2, #1
 801664a:	d103      	bne.n	8016654 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 801664c:	681a      	ldr	r2, [r3, #0]
 801664e:	f042 0201 	orr.w	r2, r2, #1
 8016652:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016654:	6822      	ldr	r2, [r4, #0]
 8016656:	6813      	ldr	r3, [r2, #0]
 8016658:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801665c:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801665e:	2321      	movs	r3, #33	@ 0x21
 8016660:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8016664:	2310      	movs	r3, #16
 8016666:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801666a:	2300      	movs	r3, #0
 801666c:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 801666e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8016672:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8016676:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8016678:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801667a:	4b3b      	ldr	r3, [pc, #236]	@ (8016768 <HAL_I2C_Master_Transmit+0x174>)
 801667c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 801667e:	462b      	mov	r3, r5
 8016680:	4632      	mov	r2, r6
 8016682:	4639      	mov	r1, r7
 8016684:	4620      	mov	r0, r4
 8016686:	f7ff fe05 	bl	8016294 <I2C_MasterRequestWrite>
 801668a:	4607      	mov	r7, r0
 801668c:	2800      	cmp	r0, #0
 801668e:	d166      	bne.n	801675e <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016690:	2300      	movs	r3, #0
 8016692:	9303      	str	r3, [sp, #12]
 8016694:	6823      	ldr	r3, [r4, #0]
 8016696:	695a      	ldr	r2, [r3, #20]
 8016698:	9203      	str	r2, [sp, #12]
 801669a:	699b      	ldr	r3, [r3, #24]
 801669c:	9303      	str	r3, [sp, #12]
 801669e:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80166a0:	e011      	b.n	80166c6 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80166a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80166a4:	2b04      	cmp	r3, #4
 80166a6:	d001      	beq.n	80166ac <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 80166a8:	2701      	movs	r7, #1
 80166aa:	e7b4      	b.n	8016616 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80166ac:	6822      	ldr	r2, [r4, #0]
 80166ae:	6813      	ldr	r3, [r2, #0]
 80166b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80166b4:	6013      	str	r3, [r2, #0]
 80166b6:	e7f7      	b.n	80166a8 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80166b8:	462a      	mov	r2, r5
 80166ba:	4631      	mov	r1, r6
 80166bc:	4620      	mov	r0, r4
 80166be:	f7ff fe72 	bl	80163a6 <I2C_WaitOnBTFFlagUntilTimeout>
 80166c2:	2800      	cmp	r0, #0
 80166c4:	d12e      	bne.n	8016724 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 80166c6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d036      	beq.n	801673a <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80166cc:	462a      	mov	r2, r5
 80166ce:	4631      	mov	r1, r6
 80166d0:	4620      	mov	r0, r4
 80166d2:	f7ff fe39 	bl	8016348 <I2C_WaitOnTXEFlagUntilTimeout>
 80166d6:	2800      	cmp	r0, #0
 80166d8:	d1e3      	bne.n	80166a2 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80166da:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80166dc:	6823      	ldr	r3, [r4, #0]
 80166de:	7812      	ldrb	r2, [r2, #0]
 80166e0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80166e2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80166e4:	1c43      	adds	r3, r0, #1
 80166e6:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80166e8:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 80166ea:	b289      	uxth	r1, r1
 80166ec:	3901      	subs	r1, #1
 80166ee:	b289      	uxth	r1, r1
 80166f0:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80166f2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80166f4:	3b01      	subs	r3, #1
 80166f6:	b29b      	uxth	r3, r3
 80166f8:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80166fa:	6822      	ldr	r2, [r4, #0]
 80166fc:	6951      	ldr	r1, [r2, #20]
 80166fe:	f011 0f04 	tst.w	r1, #4
 8016702:	d0d9      	beq.n	80166b8 <HAL_I2C_Master_Transmit+0xc4>
 8016704:	2b00      	cmp	r3, #0
 8016706:	d0d7      	beq.n	80166b8 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016708:	7843      	ldrb	r3, [r0, #1]
 801670a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 801670c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801670e:	3301      	adds	r3, #1
 8016710:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8016712:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8016714:	b29b      	uxth	r3, r3
 8016716:	3b01      	subs	r3, #1
 8016718:	b29b      	uxth	r3, r3
 801671a:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 801671c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 801671e:	3b01      	subs	r3, #1
 8016720:	8523      	strh	r3, [r4, #40]	@ 0x28
 8016722:	e7c9      	b.n	80166b8 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8016724:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016726:	2b04      	cmp	r3, #4
 8016728:	d001      	beq.n	801672e <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 801672a:	2701      	movs	r7, #1
 801672c:	e773      	b.n	8016616 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801672e:	6822      	ldr	r2, [r4, #0]
 8016730:	6813      	ldr	r3, [r2, #0]
 8016732:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8016736:	6013      	str	r3, [r2, #0]
 8016738:	e7f7      	b.n	801672a <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801673a:	6822      	ldr	r2, [r4, #0]
 801673c:	6813      	ldr	r3, [r2, #0]
 801673e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8016742:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8016744:	2320      	movs	r3, #32
 8016746:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801674a:	2300      	movs	r3, #0
 801674c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8016750:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8016754:	e75f      	b.n	8016616 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8016756:	2702      	movs	r7, #2
 8016758:	e75d      	b.n	8016616 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 801675a:	2702      	movs	r7, #2
 801675c:	e75b      	b.n	8016616 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 801675e:	2701      	movs	r7, #1
 8016760:	e759      	b.n	8016616 <HAL_I2C_Master_Transmit+0x22>
 8016762:	bf00      	nop
 8016764:	00100002 	.word	0x00100002
 8016768:	ffff0000 	.word	0xffff0000

0801676c <HAL_I2C_IsDeviceReady>:
{
 801676c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016770:	b085      	sub	sp, #20
 8016772:	4604      	mov	r4, r0
 8016774:	4688      	mov	r8, r1
 8016776:	4691      	mov	r9, r2
 8016778:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 801677a:	f7ff faa1 	bl	8015cc0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 801677e:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8016782:	b2db      	uxtb	r3, r3
 8016784:	2b20      	cmp	r3, #32
 8016786:	d003      	beq.n	8016790 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8016788:	2002      	movs	r0, #2
}
 801678a:	b005      	add	sp, #20
 801678c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016790:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016792:	9000      	str	r0, [sp, #0]
 8016794:	2319      	movs	r3, #25
 8016796:	2201      	movs	r2, #1
 8016798:	4957      	ldr	r1, [pc, #348]	@ (80168f8 <HAL_I2C_IsDeviceReady+0x18c>)
 801679a:	4620      	mov	r0, r4
 801679c:	f7ff fcba 	bl	8016114 <I2C_WaitOnFlagUntilTimeout>
 80167a0:	2800      	cmp	r0, #0
 80167a2:	f040 80a0 	bne.w	80168e6 <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 80167a6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80167aa:	2b01      	cmp	r3, #1
 80167ac:	f000 809d 	beq.w	80168ea <HAL_I2C_IsDeviceReady+0x17e>
 80167b0:	2301      	movs	r3, #1
 80167b2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80167b6:	6823      	ldr	r3, [r4, #0]
 80167b8:	681a      	ldr	r2, [r3, #0]
 80167ba:	f012 0f01 	tst.w	r2, #1
 80167be:	d103      	bne.n	80167c8 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 80167c0:	681a      	ldr	r2, [r3, #0]
 80167c2:	f042 0201 	orr.w	r2, r2, #1
 80167c6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80167c8:	6822      	ldr	r2, [r4, #0]
 80167ca:	6813      	ldr	r3, [r2, #0]
 80167cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80167d0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80167d2:	2324      	movs	r3, #36	@ 0x24
 80167d4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80167d8:	2700      	movs	r7, #0
 80167da:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80167dc:	4b47      	ldr	r3, [pc, #284]	@ (80168fc <HAL_I2C_IsDeviceReady+0x190>)
 80167de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80167e0:	e040      	b.n	8016864 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80167e2:	6823      	ldr	r3, [r4, #0]
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80167ea:	d002      	beq.n	80167f2 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80167ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80167f0:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 80167f2:	2003      	movs	r0, #3
 80167f4:	e7c9      	b.n	801678a <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80167f6:	23a0      	movs	r3, #160	@ 0xa0
 80167f8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80167fc:	6822      	ldr	r2, [r4, #0]
 80167fe:	6953      	ldr	r3, [r2, #20]
 8016800:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8016804:	6952      	ldr	r2, [r2, #20]
 8016806:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801680a:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 801680e:	fa5f fc8c 	uxtb.w	ip, ip
 8016812:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 8016816:	d009      	beq.n	801682c <HAL_I2C_IsDeviceReady+0xc0>
 8016818:	b943      	cbnz	r3, 801682c <HAL_I2C_IsDeviceReady+0xc0>
 801681a:	b93a      	cbnz	r2, 801682c <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801681c:	f7ff fa50 	bl	8015cc0 <HAL_GetTick>
 8016820:	1b80      	subs	r0, r0, r6
 8016822:	42a8      	cmp	r0, r5
 8016824:	d8e7      	bhi.n	80167f6 <HAL_I2C_IsDeviceReady+0x8a>
 8016826:	2d00      	cmp	r5, #0
 8016828:	d1e8      	bne.n	80167fc <HAL_I2C_IsDeviceReady+0x90>
 801682a:	e7e4      	b.n	80167f6 <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 801682c:	2320      	movs	r3, #32
 801682e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8016832:	6823      	ldr	r3, [r4, #0]
 8016834:	695a      	ldr	r2, [r3, #20]
 8016836:	f012 0f02 	tst.w	r2, #2
 801683a:	d131      	bne.n	80168a0 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801683c:	681a      	ldr	r2, [r3, #0]
 801683e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016842:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016844:	6823      	ldr	r3, [r4, #0]
 8016846:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 801684a:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801684c:	9600      	str	r6, [sp, #0]
 801684e:	2319      	movs	r3, #25
 8016850:	2201      	movs	r2, #1
 8016852:	4929      	ldr	r1, [pc, #164]	@ (80168f8 <HAL_I2C_IsDeviceReady+0x18c>)
 8016854:	4620      	mov	r0, r4
 8016856:	f7ff fc5d 	bl	8016114 <I2C_WaitOnFlagUntilTimeout>
 801685a:	2800      	cmp	r0, #0
 801685c:	d149      	bne.n	80168f2 <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 801685e:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8016860:	454f      	cmp	r7, r9
 8016862:	d238      	bcs.n	80168d6 <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016864:	6822      	ldr	r2, [r4, #0]
 8016866:	6813      	ldr	r3, [r2, #0]
 8016868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801686c:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 801686e:	9600      	str	r6, [sp, #0]
 8016870:	462b      	mov	r3, r5
 8016872:	2200      	movs	r2, #0
 8016874:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8016878:	4620      	mov	r0, r4
 801687a:	f7ff fc4b 	bl	8016114 <I2C_WaitOnFlagUntilTimeout>
 801687e:	2800      	cmp	r0, #0
 8016880:	d1af      	bne.n	80167e2 <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8016882:	6823      	ldr	r3, [r4, #0]
 8016884:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 8016888:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 801688a:	f7ff fa19 	bl	8015cc0 <HAL_GetTick>
 801688e:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8016890:	6822      	ldr	r2, [r4, #0]
 8016892:	6953      	ldr	r3, [r2, #20]
 8016894:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8016898:	6952      	ldr	r2, [r2, #20]
 801689a:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801689e:	e7b4      	b.n	801680a <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80168a0:	681a      	ldr	r2, [r3, #0]
 80168a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80168a6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80168a8:	2300      	movs	r3, #0
 80168aa:	9303      	str	r3, [sp, #12]
 80168ac:	6823      	ldr	r3, [r4, #0]
 80168ae:	695a      	ldr	r2, [r3, #20]
 80168b0:	9203      	str	r2, [sp, #12]
 80168b2:	699b      	ldr	r3, [r3, #24]
 80168b4:	9303      	str	r3, [sp, #12]
 80168b6:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80168b8:	9600      	str	r6, [sp, #0]
 80168ba:	2319      	movs	r3, #25
 80168bc:	2201      	movs	r2, #1
 80168be:	490e      	ldr	r1, [pc, #56]	@ (80168f8 <HAL_I2C_IsDeviceReady+0x18c>)
 80168c0:	4620      	mov	r0, r4
 80168c2:	f7ff fc27 	bl	8016114 <I2C_WaitOnFlagUntilTimeout>
 80168c6:	b990      	cbnz	r0, 80168ee <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 80168c8:	2320      	movs	r3, #32
 80168ca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 80168ce:	2300      	movs	r3, #0
 80168d0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 80168d4:	e759      	b.n	801678a <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80168d6:	2320      	movs	r3, #32
 80168d8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80168dc:	2300      	movs	r3, #0
 80168de:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 80168e2:	2001      	movs	r0, #1
 80168e4:	e751      	b.n	801678a <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 80168e6:	2002      	movs	r0, #2
 80168e8:	e74f      	b.n	801678a <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 80168ea:	2002      	movs	r0, #2
 80168ec:	e74d      	b.n	801678a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80168ee:	2001      	movs	r0, #1
 80168f0:	e74b      	b.n	801678a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80168f2:	2001      	movs	r0, #1
 80168f4:	e749      	b.n	801678a <HAL_I2C_IsDeviceReady+0x1e>
 80168f6:	bf00      	nop
 80168f8:	00100002 	.word	0x00100002
 80168fc:	ffff0000 	.word	0xffff0000

08016900 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8016900:	2800      	cmp	r0, #0
 8016902:	f000 81e0 	beq.w	8016cc6 <HAL_RCC_OscConfig+0x3c6>
{
 8016906:	b570      	push	{r4, r5, r6, lr}
 8016908:	b082      	sub	sp, #8
 801690a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801690c:	6803      	ldr	r3, [r0, #0]
 801690e:	f013 0f01 	tst.w	r3, #1
 8016912:	d03b      	beq.n	801698c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8016914:	4b9f      	ldr	r3, [pc, #636]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 8016916:	689b      	ldr	r3, [r3, #8]
 8016918:	f003 030c 	and.w	r3, r3, #12
 801691c:	2b04      	cmp	r3, #4
 801691e:	d02c      	beq.n	801697a <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8016920:	4b9c      	ldr	r3, [pc, #624]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 8016922:	689b      	ldr	r3, [r3, #8]
 8016924:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8016928:	2b08      	cmp	r3, #8
 801692a:	d021      	beq.n	8016970 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801692c:	6863      	ldr	r3, [r4, #4]
 801692e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016932:	d04f      	beq.n	80169d4 <HAL_RCC_OscConfig+0xd4>
 8016934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8016938:	d052      	beq.n	80169e0 <HAL_RCC_OscConfig+0xe0>
 801693a:	4b96      	ldr	r3, [pc, #600]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 801693c:	681a      	ldr	r2, [r3, #0]
 801693e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8016942:	601a      	str	r2, [r3, #0]
 8016944:	681a      	ldr	r2, [r3, #0]
 8016946:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801694a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801694c:	6863      	ldr	r3, [r4, #4]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d050      	beq.n	80169f4 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016952:	f7ff f9b5 	bl	8015cc0 <HAL_GetTick>
 8016956:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8016958:	4b8e      	ldr	r3, [pc, #568]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8016960:	d114      	bne.n	801698c <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016962:	f7ff f9ad 	bl	8015cc0 <HAL_GetTick>
 8016966:	1b40      	subs	r0, r0, r5
 8016968:	2864      	cmp	r0, #100	@ 0x64
 801696a:	d9f5      	bls.n	8016958 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 801696c:	2003      	movs	r0, #3
 801696e:	e1b1      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8016970:	4b88      	ldr	r3, [pc, #544]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 8016972:	685b      	ldr	r3, [r3, #4]
 8016974:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8016978:	d0d8      	beq.n	801692c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801697a:	4b86      	ldr	r3, [pc, #536]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8016982:	d003      	beq.n	801698c <HAL_RCC_OscConfig+0x8c>
 8016984:	6863      	ldr	r3, [r4, #4]
 8016986:	2b00      	cmp	r3, #0
 8016988:	f000 819f 	beq.w	8016cca <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801698c:	6823      	ldr	r3, [r4, #0]
 801698e:	f013 0f02 	tst.w	r3, #2
 8016992:	d054      	beq.n	8016a3e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8016994:	4b7f      	ldr	r3, [pc, #508]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 8016996:	689b      	ldr	r3, [r3, #8]
 8016998:	f013 0f0c 	tst.w	r3, #12
 801699c:	d03e      	beq.n	8016a1c <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801699e:	4b7d      	ldr	r3, [pc, #500]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 80169a0:	689b      	ldr	r3, [r3, #8]
 80169a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80169a6:	2b08      	cmp	r3, #8
 80169a8:	d033      	beq.n	8016a12 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80169aa:	68e3      	ldr	r3, [r4, #12]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d068      	beq.n	8016a82 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80169b0:	4b79      	ldr	r3, [pc, #484]	@ (8016b98 <HAL_RCC_OscConfig+0x298>)
 80169b2:	2201      	movs	r2, #1
 80169b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80169b6:	f7ff f983 	bl	8015cc0 <HAL_GetTick>
 80169ba:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80169bc:	4b75      	ldr	r3, [pc, #468]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	f013 0f02 	tst.w	r3, #2
 80169c4:	d154      	bne.n	8016a70 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80169c6:	f7ff f97b 	bl	8015cc0 <HAL_GetTick>
 80169ca:	1b40      	subs	r0, r0, r5
 80169cc:	2802      	cmp	r0, #2
 80169ce:	d9f5      	bls.n	80169bc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80169d0:	2003      	movs	r0, #3
 80169d2:	e17f      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80169d4:	4a6f      	ldr	r2, [pc, #444]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 80169d6:	6813      	ldr	r3, [r2, #0]
 80169d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80169dc:	6013      	str	r3, [r2, #0]
 80169de:	e7b5      	b.n	801694c <HAL_RCC_OscConfig+0x4c>
 80169e0:	4b6c      	ldr	r3, [pc, #432]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 80169e2:	681a      	ldr	r2, [r3, #0]
 80169e4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80169e8:	601a      	str	r2, [r3, #0]
 80169ea:	681a      	ldr	r2, [r3, #0]
 80169ec:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80169f0:	601a      	str	r2, [r3, #0]
 80169f2:	e7ab      	b.n	801694c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80169f4:	f7ff f964 	bl	8015cc0 <HAL_GetTick>
 80169f8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80169fa:	4b66      	ldr	r3, [pc, #408]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8016a02:	d0c3      	beq.n	801698c <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016a04:	f7ff f95c 	bl	8015cc0 <HAL_GetTick>
 8016a08:	1b40      	subs	r0, r0, r5
 8016a0a:	2864      	cmp	r0, #100	@ 0x64
 8016a0c:	d9f5      	bls.n	80169fa <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8016a0e:	2003      	movs	r0, #3
 8016a10:	e160      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8016a12:	4b60      	ldr	r3, [pc, #384]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 8016a14:	685b      	ldr	r3, [r3, #4]
 8016a16:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8016a1a:	d1c6      	bne.n	80169aa <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8016a1c:	4b5d      	ldr	r3, [pc, #372]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	f013 0f02 	tst.w	r3, #2
 8016a24:	d003      	beq.n	8016a2e <HAL_RCC_OscConfig+0x12e>
 8016a26:	68e3      	ldr	r3, [r4, #12]
 8016a28:	2b01      	cmp	r3, #1
 8016a2a:	f040 8150 	bne.w	8016cce <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016a2e:	4a59      	ldr	r2, [pc, #356]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 8016a30:	6813      	ldr	r3, [r2, #0]
 8016a32:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8016a36:	6921      	ldr	r1, [r4, #16]
 8016a38:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8016a3c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8016a3e:	6823      	ldr	r3, [r4, #0]
 8016a40:	f013 0f08 	tst.w	r3, #8
 8016a44:	d042      	beq.n	8016acc <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8016a46:	6963      	ldr	r3, [r4, #20]
 8016a48:	b36b      	cbz	r3, 8016aa6 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8016a4a:	4b53      	ldr	r3, [pc, #332]	@ (8016b98 <HAL_RCC_OscConfig+0x298>)
 8016a4c:	2201      	movs	r2, #1
 8016a4e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016a52:	f7ff f935 	bl	8015cc0 <HAL_GetTick>
 8016a56:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8016a58:	4b4e      	ldr	r3, [pc, #312]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 8016a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016a5c:	f013 0f02 	tst.w	r3, #2
 8016a60:	d134      	bne.n	8016acc <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8016a62:	f7ff f92d 	bl	8015cc0 <HAL_GetTick>
 8016a66:	1b40      	subs	r0, r0, r5
 8016a68:	2802      	cmp	r0, #2
 8016a6a:	d9f5      	bls.n	8016a58 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8016a6c:	2003      	movs	r0, #3
 8016a6e:	e131      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016a70:	4a48      	ldr	r2, [pc, #288]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 8016a72:	6813      	ldr	r3, [r2, #0]
 8016a74:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8016a78:	6921      	ldr	r1, [r4, #16]
 8016a7a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8016a7e:	6013      	str	r3, [r2, #0]
 8016a80:	e7dd      	b.n	8016a3e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8016a82:	4b45      	ldr	r3, [pc, #276]	@ (8016b98 <HAL_RCC_OscConfig+0x298>)
 8016a84:	2200      	movs	r2, #0
 8016a86:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8016a88:	f7ff f91a 	bl	8015cc0 <HAL_GetTick>
 8016a8c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8016a8e:	4b41      	ldr	r3, [pc, #260]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	f013 0f02 	tst.w	r3, #2
 8016a96:	d0d2      	beq.n	8016a3e <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016a98:	f7ff f912 	bl	8015cc0 <HAL_GetTick>
 8016a9c:	1b40      	subs	r0, r0, r5
 8016a9e:	2802      	cmp	r0, #2
 8016aa0:	d9f5      	bls.n	8016a8e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8016aa2:	2003      	movs	r0, #3
 8016aa4:	e116      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8016aa6:	4b3c      	ldr	r3, [pc, #240]	@ (8016b98 <HAL_RCC_OscConfig+0x298>)
 8016aa8:	2200      	movs	r2, #0
 8016aaa:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8016aae:	f7ff f907 	bl	8015cc0 <HAL_GetTick>
 8016ab2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8016ab4:	4b37      	ldr	r3, [pc, #220]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 8016ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ab8:	f013 0f02 	tst.w	r3, #2
 8016abc:	d006      	beq.n	8016acc <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8016abe:	f7ff f8ff 	bl	8015cc0 <HAL_GetTick>
 8016ac2:	1b40      	subs	r0, r0, r5
 8016ac4:	2802      	cmp	r0, #2
 8016ac6:	d9f5      	bls.n	8016ab4 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8016ac8:	2003      	movs	r0, #3
 8016aca:	e103      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8016acc:	6823      	ldr	r3, [r4, #0]
 8016ace:	f013 0f04 	tst.w	r3, #4
 8016ad2:	d077      	beq.n	8016bc4 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8016ad4:	4b2f      	ldr	r3, [pc, #188]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 8016ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016ad8:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8016adc:	d133      	bne.n	8016b46 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8016ade:	2300      	movs	r3, #0
 8016ae0:	9301      	str	r3, [sp, #4]
 8016ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 8016ae4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016ae6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8016aea:	641a      	str	r2, [r3, #64]	@ 0x40
 8016aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8016af2:	9301      	str	r3, [sp, #4]
 8016af4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8016af6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016af8:	4b28      	ldr	r3, [pc, #160]	@ (8016b9c <HAL_RCC_OscConfig+0x29c>)
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8016b00:	d023      	beq.n	8016b4a <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8016b02:	68a3      	ldr	r3, [r4, #8]
 8016b04:	2b01      	cmp	r3, #1
 8016b06:	d034      	beq.n	8016b72 <HAL_RCC_OscConfig+0x272>
 8016b08:	2b05      	cmp	r3, #5
 8016b0a:	d038      	beq.n	8016b7e <HAL_RCC_OscConfig+0x27e>
 8016b0c:	4b21      	ldr	r3, [pc, #132]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 8016b0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016b10:	f022 0201 	bic.w	r2, r2, #1
 8016b14:	671a      	str	r2, [r3, #112]	@ 0x70
 8016b16:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016b18:	f022 0204 	bic.w	r2, r2, #4
 8016b1c:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8016b1e:	68a3      	ldr	r3, [r4, #8]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d03d      	beq.n	8016ba0 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016b24:	f7ff f8cc 	bl	8015cc0 <HAL_GetTick>
 8016b28:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8016b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 8016b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b2e:	f013 0f02 	tst.w	r3, #2
 8016b32:	d146      	bne.n	8016bc2 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016b34:	f7ff f8c4 	bl	8015cc0 <HAL_GetTick>
 8016b38:	1b80      	subs	r0, r0, r6
 8016b3a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8016b3e:	4298      	cmp	r0, r3
 8016b40:	d9f3      	bls.n	8016b2a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8016b42:	2003      	movs	r0, #3
 8016b44:	e0c6      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8016b46:	2500      	movs	r5, #0
 8016b48:	e7d6      	b.n	8016af8 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8016b4a:	4a14      	ldr	r2, [pc, #80]	@ (8016b9c <HAL_RCC_OscConfig+0x29c>)
 8016b4c:	6813      	ldr	r3, [r2, #0]
 8016b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016b52:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8016b54:	f7ff f8b4 	bl	8015cc0 <HAL_GetTick>
 8016b58:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016b5a:	4b10      	ldr	r3, [pc, #64]	@ (8016b9c <HAL_RCC_OscConfig+0x29c>)
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8016b62:	d1ce      	bne.n	8016b02 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8016b64:	f7ff f8ac 	bl	8015cc0 <HAL_GetTick>
 8016b68:	1b80      	subs	r0, r0, r6
 8016b6a:	2802      	cmp	r0, #2
 8016b6c:	d9f5      	bls.n	8016b5a <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8016b6e:	2003      	movs	r0, #3
 8016b70:	e0b0      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8016b72:	4a08      	ldr	r2, [pc, #32]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 8016b74:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8016b76:	f043 0301 	orr.w	r3, r3, #1
 8016b7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8016b7c:	e7cf      	b.n	8016b1e <HAL_RCC_OscConfig+0x21e>
 8016b7e:	4b05      	ldr	r3, [pc, #20]	@ (8016b94 <HAL_RCC_OscConfig+0x294>)
 8016b80:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016b82:	f042 0204 	orr.w	r2, r2, #4
 8016b86:	671a      	str	r2, [r3, #112]	@ 0x70
 8016b88:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016b8a:	f042 0201 	orr.w	r2, r2, #1
 8016b8e:	671a      	str	r2, [r3, #112]	@ 0x70
 8016b90:	e7c5      	b.n	8016b1e <HAL_RCC_OscConfig+0x21e>
 8016b92:	bf00      	nop
 8016b94:	40023800 	.word	0x40023800
 8016b98:	42470000 	.word	0x42470000
 8016b9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8016ba0:	f7ff f88e 	bl	8015cc0 <HAL_GetTick>
 8016ba4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8016ba6:	4b52      	ldr	r3, [pc, #328]	@ (8016cf0 <HAL_RCC_OscConfig+0x3f0>)
 8016ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016baa:	f013 0f02 	tst.w	r3, #2
 8016bae:	d008      	beq.n	8016bc2 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016bb0:	f7ff f886 	bl	8015cc0 <HAL_GetTick>
 8016bb4:	1b80      	subs	r0, r0, r6
 8016bb6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8016bba:	4298      	cmp	r0, r3
 8016bbc:	d9f3      	bls.n	8016ba6 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8016bbe:	2003      	movs	r0, #3
 8016bc0:	e088      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8016bc2:	b9ed      	cbnz	r5, 8016c00 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8016bc4:	69a3      	ldr	r3, [r4, #24]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	f000 8083 	beq.w	8016cd2 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8016bcc:	4a48      	ldr	r2, [pc, #288]	@ (8016cf0 <HAL_RCC_OscConfig+0x3f0>)
 8016bce:	6892      	ldr	r2, [r2, #8]
 8016bd0:	f002 020c 	and.w	r2, r2, #12
 8016bd4:	2a08      	cmp	r2, #8
 8016bd6:	d051      	beq.n	8016c7c <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8016bd8:	2b02      	cmp	r3, #2
 8016bda:	d017      	beq.n	8016c0c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016bdc:	4b45      	ldr	r3, [pc, #276]	@ (8016cf4 <HAL_RCC_OscConfig+0x3f4>)
 8016bde:	2200      	movs	r2, #0
 8016be0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016be2:	f7ff f86d 	bl	8015cc0 <HAL_GetTick>
 8016be6:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016be8:	4b41      	ldr	r3, [pc, #260]	@ (8016cf0 <HAL_RCC_OscConfig+0x3f0>)
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8016bf0:	d042      	beq.n	8016c78 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8016bf2:	f7ff f865 	bl	8015cc0 <HAL_GetTick>
 8016bf6:	1b00      	subs	r0, r0, r4
 8016bf8:	2802      	cmp	r0, #2
 8016bfa:	d9f5      	bls.n	8016be8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8016bfc:	2003      	movs	r0, #3
 8016bfe:	e069      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8016c00:	4a3b      	ldr	r2, [pc, #236]	@ (8016cf0 <HAL_RCC_OscConfig+0x3f0>)
 8016c02:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016c04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8016c0a:	e7db      	b.n	8016bc4 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8016c0c:	4b39      	ldr	r3, [pc, #228]	@ (8016cf4 <HAL_RCC_OscConfig+0x3f4>)
 8016c0e:	2200      	movs	r2, #0
 8016c10:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8016c12:	f7ff f855 	bl	8015cc0 <HAL_GetTick>
 8016c16:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016c18:	4b35      	ldr	r3, [pc, #212]	@ (8016cf0 <HAL_RCC_OscConfig+0x3f0>)
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8016c20:	d006      	beq.n	8016c30 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8016c22:	f7ff f84d 	bl	8015cc0 <HAL_GetTick>
 8016c26:	1b40      	subs	r0, r0, r5
 8016c28:	2802      	cmp	r0, #2
 8016c2a:	d9f5      	bls.n	8016c18 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8016c2c:	2003      	movs	r0, #3
 8016c2e:	e051      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8016c30:	69e3      	ldr	r3, [r4, #28]
 8016c32:	6a22      	ldr	r2, [r4, #32]
 8016c34:	4313      	orrs	r3, r2
 8016c36:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8016c38:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8016c3c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8016c3e:	0852      	lsrs	r2, r2, #1
 8016c40:	3a01      	subs	r2, #1
 8016c42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016c46:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8016c48:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8016c4c:	4a28      	ldr	r2, [pc, #160]	@ (8016cf0 <HAL_RCC_OscConfig+0x3f0>)
 8016c4e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8016c50:	4b28      	ldr	r3, [pc, #160]	@ (8016cf4 <HAL_RCC_OscConfig+0x3f4>)
 8016c52:	2201      	movs	r2, #1
 8016c54:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8016c56:	f7ff f833 	bl	8015cc0 <HAL_GetTick>
 8016c5a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016c5c:	4b24      	ldr	r3, [pc, #144]	@ (8016cf0 <HAL_RCC_OscConfig+0x3f0>)
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8016c64:	d106      	bne.n	8016c74 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8016c66:	f7ff f82b 	bl	8015cc0 <HAL_GetTick>
 8016c6a:	1b00      	subs	r0, r0, r4
 8016c6c:	2802      	cmp	r0, #2
 8016c6e:	d9f5      	bls.n	8016c5c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8016c70:	2003      	movs	r0, #3
 8016c72:	e02f      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8016c74:	2000      	movs	r0, #0
 8016c76:	e02d      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
 8016c78:	2000      	movs	r0, #0
 8016c7a:	e02b      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8016c7c:	2b01      	cmp	r3, #1
 8016c7e:	d02b      	beq.n	8016cd8 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8016c80:	4b1b      	ldr	r3, [pc, #108]	@ (8016cf0 <HAL_RCC_OscConfig+0x3f0>)
 8016c82:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016c84:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8016c88:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8016c8a:	4291      	cmp	r1, r2
 8016c8c:	d126      	bne.n	8016cdc <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8016c8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8016c92:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016c94:	428a      	cmp	r2, r1
 8016c96:	d123      	bne.n	8016ce0 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8016c98:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8016c9a:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8016c9e:	401a      	ands	r2, r3
 8016ca0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8016ca4:	d11e      	bne.n	8016ce4 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8016ca6:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8016caa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8016cac:	0852      	lsrs	r2, r2, #1
 8016cae:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8016cb0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8016cb4:	d118      	bne.n	8016ce8 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8016cb6:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8016cba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8016cbc:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8016cc0:	d114      	bne.n	8016cec <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8016cc2:	2000      	movs	r0, #0
 8016cc4:	e006      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8016cc6:	2001      	movs	r0, #1
}
 8016cc8:	4770      	bx	lr
        return HAL_ERROR;
 8016cca:	2001      	movs	r0, #1
 8016ccc:	e002      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8016cce:	2001      	movs	r0, #1
 8016cd0:	e000      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8016cd2:	2000      	movs	r0, #0
}
 8016cd4:	b002      	add	sp, #8
 8016cd6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8016cd8:	2001      	movs	r0, #1
 8016cda:	e7fb      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8016cdc:	2001      	movs	r0, #1
 8016cde:	e7f9      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
 8016ce0:	2001      	movs	r0, #1
 8016ce2:	e7f7      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
 8016ce4:	2001      	movs	r0, #1
 8016ce6:	e7f5      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
 8016ce8:	2001      	movs	r0, #1
 8016cea:	e7f3      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
 8016cec:	2001      	movs	r0, #1
 8016cee:	e7f1      	b.n	8016cd4 <HAL_RCC_OscConfig+0x3d4>
 8016cf0:	40023800 	.word	0x40023800
 8016cf4:	42470000 	.word	0x42470000

08016cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8016cf8:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8016cfa:	4b33      	ldr	r3, [pc, #204]	@ (8016dc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8016cfc:	689b      	ldr	r3, [r3, #8]
 8016cfe:	f003 030c 	and.w	r3, r3, #12
 8016d02:	2b04      	cmp	r3, #4
 8016d04:	d05b      	beq.n	8016dbe <HAL_RCC_GetSysClockFreq+0xc6>
 8016d06:	2b08      	cmp	r3, #8
 8016d08:	d15b      	bne.n	8016dc2 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8016d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8016dc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8016d0c:	685a      	ldr	r2, [r3, #4]
 8016d0e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8016d12:	685b      	ldr	r3, [r3, #4]
 8016d14:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8016d18:	d02c      	beq.n	8016d74 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8016d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8016dc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8016d1c:	6858      	ldr	r0, [r3, #4]
 8016d1e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8016d22:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8016d26:	ebbc 0c00 	subs.w	ip, ip, r0
 8016d2a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8016d2e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8016d32:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8016d36:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8016d3a:	ebb1 010c 	subs.w	r1, r1, ip
 8016d3e:	eb63 030e 	sbc.w	r3, r3, lr
 8016d42:	00db      	lsls	r3, r3, #3
 8016d44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8016d48:	00c9      	lsls	r1, r1, #3
 8016d4a:	eb11 0c00 	adds.w	ip, r1, r0
 8016d4e:	f143 0300 	adc.w	r3, r3, #0
 8016d52:	0259      	lsls	r1, r3, #9
 8016d54:	2300      	movs	r3, #0
 8016d56:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8016d5a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8016d5e:	f7f9 fffb 	bl	8010d58 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8016d62:	4b19      	ldr	r3, [pc, #100]	@ (8016dc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8016d64:	685b      	ldr	r3, [r3, #4]
 8016d66:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8016d6a:	3301      	adds	r3, #1
 8016d6c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8016d6e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8016d72:	e027      	b.n	8016dc4 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8016d74:	4b14      	ldr	r3, [pc, #80]	@ (8016dc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8016d76:	6858      	ldr	r0, [r3, #4]
 8016d78:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8016d7c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8016d80:	ebbc 0c00 	subs.w	ip, ip, r0
 8016d84:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8016d88:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8016d8c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8016d90:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8016d94:	ebb1 010c 	subs.w	r1, r1, ip
 8016d98:	eb63 030e 	sbc.w	r3, r3, lr
 8016d9c:	00db      	lsls	r3, r3, #3
 8016d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8016da2:	00c9      	lsls	r1, r1, #3
 8016da4:	eb11 0c00 	adds.w	ip, r1, r0
 8016da8:	f143 0300 	adc.w	r3, r3, #0
 8016dac:	0299      	lsls	r1, r3, #10
 8016dae:	2300      	movs	r3, #0
 8016db0:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8016db4:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8016db8:	f7f9 ffce 	bl	8010d58 <__aeabi_uldivmod>
 8016dbc:	e7d1      	b.n	8016d62 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8016dbe:	4803      	ldr	r0, [pc, #12]	@ (8016dcc <HAL_RCC_GetSysClockFreq+0xd4>)
 8016dc0:	e000      	b.n	8016dc4 <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8016dc2:	4803      	ldr	r0, [pc, #12]	@ (8016dd0 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8016dc4:	bd08      	pop	{r3, pc}
 8016dc6:	bf00      	nop
 8016dc8:	40023800 	.word	0x40023800
 8016dcc:	007a1200 	.word	0x007a1200
 8016dd0:	00f42400 	.word	0x00f42400

08016dd4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8016dd4:	2800      	cmp	r0, #0
 8016dd6:	f000 809b 	beq.w	8016f10 <HAL_RCC_ClockConfig+0x13c>
{
 8016dda:	b570      	push	{r4, r5, r6, lr}
 8016ddc:	460d      	mov	r5, r1
 8016dde:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8016de0:	4b4f      	ldr	r3, [pc, #316]	@ (8016f20 <HAL_RCC_ClockConfig+0x14c>)
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	f003 0307 	and.w	r3, r3, #7
 8016de8:	428b      	cmp	r3, r1
 8016dea:	d208      	bcs.n	8016dfe <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016dec:	b2cb      	uxtb	r3, r1
 8016dee:	4a4c      	ldr	r2, [pc, #304]	@ (8016f20 <HAL_RCC_ClockConfig+0x14c>)
 8016df0:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016df2:	6813      	ldr	r3, [r2, #0]
 8016df4:	f003 0307 	and.w	r3, r3, #7
 8016df8:	428b      	cmp	r3, r1
 8016dfa:	f040 808b 	bne.w	8016f14 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8016dfe:	6823      	ldr	r3, [r4, #0]
 8016e00:	f013 0f02 	tst.w	r3, #2
 8016e04:	d017      	beq.n	8016e36 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016e06:	f013 0f04 	tst.w	r3, #4
 8016e0a:	d004      	beq.n	8016e16 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8016e0c:	4a45      	ldr	r2, [pc, #276]	@ (8016f24 <HAL_RCC_ClockConfig+0x150>)
 8016e0e:	6893      	ldr	r3, [r2, #8]
 8016e10:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8016e14:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016e16:	6823      	ldr	r3, [r4, #0]
 8016e18:	f013 0f08 	tst.w	r3, #8
 8016e1c:	d004      	beq.n	8016e28 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8016e1e:	4a41      	ldr	r2, [pc, #260]	@ (8016f24 <HAL_RCC_ClockConfig+0x150>)
 8016e20:	6893      	ldr	r3, [r2, #8]
 8016e22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8016e26:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8016e28:	4a3e      	ldr	r2, [pc, #248]	@ (8016f24 <HAL_RCC_ClockConfig+0x150>)
 8016e2a:	6893      	ldr	r3, [r2, #8]
 8016e2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8016e30:	68a1      	ldr	r1, [r4, #8]
 8016e32:	430b      	orrs	r3, r1
 8016e34:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8016e36:	6823      	ldr	r3, [r4, #0]
 8016e38:	f013 0f01 	tst.w	r3, #1
 8016e3c:	d032      	beq.n	8016ea4 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8016e3e:	6863      	ldr	r3, [r4, #4]
 8016e40:	2b01      	cmp	r3, #1
 8016e42:	d021      	beq.n	8016e88 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8016e44:	1e9a      	subs	r2, r3, #2
 8016e46:	2a01      	cmp	r2, #1
 8016e48:	d925      	bls.n	8016e96 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8016e4a:	4a36      	ldr	r2, [pc, #216]	@ (8016f24 <HAL_RCC_ClockConfig+0x150>)
 8016e4c:	6812      	ldr	r2, [r2, #0]
 8016e4e:	f012 0f02 	tst.w	r2, #2
 8016e52:	d061      	beq.n	8016f18 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8016e54:	4933      	ldr	r1, [pc, #204]	@ (8016f24 <HAL_RCC_ClockConfig+0x150>)
 8016e56:	688a      	ldr	r2, [r1, #8]
 8016e58:	f022 0203 	bic.w	r2, r2, #3
 8016e5c:	4313      	orrs	r3, r2
 8016e5e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8016e60:	f7fe ff2e 	bl	8015cc0 <HAL_GetTick>
 8016e64:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016e66:	4b2f      	ldr	r3, [pc, #188]	@ (8016f24 <HAL_RCC_ClockConfig+0x150>)
 8016e68:	689b      	ldr	r3, [r3, #8]
 8016e6a:	f003 030c 	and.w	r3, r3, #12
 8016e6e:	6862      	ldr	r2, [r4, #4]
 8016e70:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8016e74:	d016      	beq.n	8016ea4 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8016e76:	f7fe ff23 	bl	8015cc0 <HAL_GetTick>
 8016e7a:	1b80      	subs	r0, r0, r6
 8016e7c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8016e80:	4298      	cmp	r0, r3
 8016e82:	d9f0      	bls.n	8016e66 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8016e84:	2003      	movs	r0, #3
 8016e86:	e042      	b.n	8016f0e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8016e88:	4a26      	ldr	r2, [pc, #152]	@ (8016f24 <HAL_RCC_ClockConfig+0x150>)
 8016e8a:	6812      	ldr	r2, [r2, #0]
 8016e8c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8016e90:	d1e0      	bne.n	8016e54 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8016e92:	2001      	movs	r0, #1
 8016e94:	e03b      	b.n	8016f0e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016e96:	4a23      	ldr	r2, [pc, #140]	@ (8016f24 <HAL_RCC_ClockConfig+0x150>)
 8016e98:	6812      	ldr	r2, [r2, #0]
 8016e9a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8016e9e:	d1d9      	bne.n	8016e54 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8016ea0:	2001      	movs	r0, #1
 8016ea2:	e034      	b.n	8016f0e <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8016ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8016f20 <HAL_RCC_ClockConfig+0x14c>)
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	f003 0307 	and.w	r3, r3, #7
 8016eac:	42ab      	cmp	r3, r5
 8016eae:	d907      	bls.n	8016ec0 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016eb0:	b2ea      	uxtb	r2, r5
 8016eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8016f20 <HAL_RCC_ClockConfig+0x14c>)
 8016eb4:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	f003 0307 	and.w	r3, r3, #7
 8016ebc:	42ab      	cmp	r3, r5
 8016ebe:	d12d      	bne.n	8016f1c <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016ec0:	6823      	ldr	r3, [r4, #0]
 8016ec2:	f013 0f04 	tst.w	r3, #4
 8016ec6:	d006      	beq.n	8016ed6 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8016ec8:	4a16      	ldr	r2, [pc, #88]	@ (8016f24 <HAL_RCC_ClockConfig+0x150>)
 8016eca:	6893      	ldr	r3, [r2, #8]
 8016ecc:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8016ed0:	68e1      	ldr	r1, [r4, #12]
 8016ed2:	430b      	orrs	r3, r1
 8016ed4:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016ed6:	6823      	ldr	r3, [r4, #0]
 8016ed8:	f013 0f08 	tst.w	r3, #8
 8016edc:	d007      	beq.n	8016eee <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8016ede:	4a11      	ldr	r2, [pc, #68]	@ (8016f24 <HAL_RCC_ClockConfig+0x150>)
 8016ee0:	6893      	ldr	r3, [r2, #8]
 8016ee2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8016ee6:	6921      	ldr	r1, [r4, #16]
 8016ee8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8016eec:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8016eee:	f7ff ff03 	bl	8016cf8 <HAL_RCC_GetSysClockFreq>
 8016ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8016f24 <HAL_RCC_ClockConfig+0x150>)
 8016ef4:	689b      	ldr	r3, [r3, #8]
 8016ef6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8016efa:	4a0b      	ldr	r2, [pc, #44]	@ (8016f28 <HAL_RCC_ClockConfig+0x154>)
 8016efc:	5cd3      	ldrb	r3, [r2, r3]
 8016efe:	40d8      	lsrs	r0, r3
 8016f00:	4b0a      	ldr	r3, [pc, #40]	@ (8016f2c <HAL_RCC_ClockConfig+0x158>)
 8016f02:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8016f04:	4b0a      	ldr	r3, [pc, #40]	@ (8016f30 <HAL_RCC_ClockConfig+0x15c>)
 8016f06:	6818      	ldr	r0, [r3, #0]
 8016f08:	f7fb f9b8 	bl	801227c <HAL_InitTick>
  return HAL_OK;
 8016f0c:	2000      	movs	r0, #0
}
 8016f0e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8016f10:	2001      	movs	r0, #1
}
 8016f12:	4770      	bx	lr
      return HAL_ERROR;
 8016f14:	2001      	movs	r0, #1
 8016f16:	e7fa      	b.n	8016f0e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8016f18:	2001      	movs	r0, #1
 8016f1a:	e7f8      	b.n	8016f0e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8016f1c:	2001      	movs	r0, #1
 8016f1e:	e7f6      	b.n	8016f0e <HAL_RCC_ClockConfig+0x13a>
 8016f20:	40023c00 	.word	0x40023c00
 8016f24:	40023800 	.word	0x40023800
 8016f28:	08035cf0 	.word	0x08035cf0
 8016f2c:	20000018 	.word	0x20000018
 8016f30:	20000108 	.word	0x20000108

08016f34 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8016f34:	4b01      	ldr	r3, [pc, #4]	@ (8016f3c <HAL_RCC_GetHCLKFreq+0x8>)
 8016f36:	6818      	ldr	r0, [r3, #0]
 8016f38:	4770      	bx	lr
 8016f3a:	bf00      	nop
 8016f3c:	20000018 	.word	0x20000018

08016f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8016f40:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8016f42:	f7ff fff7 	bl	8016f34 <HAL_RCC_GetHCLKFreq>
 8016f46:	4b04      	ldr	r3, [pc, #16]	@ (8016f58 <HAL_RCC_GetPCLK1Freq+0x18>)
 8016f48:	689b      	ldr	r3, [r3, #8]
 8016f4a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8016f4e:	4a03      	ldr	r2, [pc, #12]	@ (8016f5c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8016f50:	5cd3      	ldrb	r3, [r2, r3]
}
 8016f52:	40d8      	lsrs	r0, r3
 8016f54:	bd08      	pop	{r3, pc}
 8016f56:	bf00      	nop
 8016f58:	40023800 	.word	0x40023800
 8016f5c:	08035ce8 	.word	0x08035ce8

08016f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8016f60:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8016f62:	f7ff ffe7 	bl	8016f34 <HAL_RCC_GetHCLKFreq>
 8016f66:	4b04      	ldr	r3, [pc, #16]	@ (8016f78 <HAL_RCC_GetPCLK2Freq+0x18>)
 8016f68:	689b      	ldr	r3, [r3, #8]
 8016f6a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8016f6e:	4a03      	ldr	r2, [pc, #12]	@ (8016f7c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8016f70:	5cd3      	ldrb	r3, [r2, r3]
}
 8016f72:	40d8      	lsrs	r0, r3
 8016f74:	bd08      	pop	{r3, pc}
 8016f76:	bf00      	nop
 8016f78:	40023800 	.word	0x40023800
 8016f7c:	08035ce8 	.word	0x08035ce8

08016f80 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8016f80:	230f      	movs	r3, #15
 8016f82:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8016f84:	4b0b      	ldr	r3, [pc, #44]	@ (8016fb4 <HAL_RCC_GetClockConfig+0x34>)
 8016f86:	689a      	ldr	r2, [r3, #8]
 8016f88:	f002 0203 	and.w	r2, r2, #3
 8016f8c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8016f8e:	689a      	ldr	r2, [r3, #8]
 8016f90:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8016f94:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8016f96:	689a      	ldr	r2, [r3, #8]
 8016f98:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8016f9c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8016f9e:	689b      	ldr	r3, [r3, #8]
 8016fa0:	08db      	lsrs	r3, r3, #3
 8016fa2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8016fa6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8016fa8:	4b03      	ldr	r3, [pc, #12]	@ (8016fb8 <HAL_RCC_GetClockConfig+0x38>)
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	f003 0307 	and.w	r3, r3, #7
 8016fb0:	600b      	str	r3, [r1, #0]
}
 8016fb2:	4770      	bx	lr
 8016fb4:	40023800 	.word	0x40023800
 8016fb8:	40023c00 	.word	0x40023c00

08016fbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8016fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fc0:	b082      	sub	sp, #8
 8016fc2:	4605      	mov	r5, r0
 8016fc4:	4688      	mov	r8, r1
 8016fc6:	4617      	mov	r7, r2
 8016fc8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8016fca:	f7fe fe79 	bl	8015cc0 <HAL_GetTick>
 8016fce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016fd0:	1a1b      	subs	r3, r3, r0
 8016fd2:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8016fd6:	f7fe fe73 	bl	8015cc0 <HAL_GetTick>
 8016fda:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8016fdc:	4b28      	ldr	r3, [pc, #160]	@ (8017080 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8016fe4:	fb09 f303 	mul.w	r3, r9, r3
 8016fe8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8016fea:	682b      	ldr	r3, [r5, #0]
 8016fec:	689c      	ldr	r4, [r3, #8]
 8016fee:	ea38 0404 	bics.w	r4, r8, r4
 8016ff2:	bf0c      	ite	eq
 8016ff4:	2301      	moveq	r3, #1
 8016ff6:	2300      	movne	r3, #0
 8016ff8:	42bb      	cmp	r3, r7
 8016ffa:	d03d      	beq.n	8017078 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8016ffc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017000:	d0f3      	beq.n	8016fea <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8017002:	f7fe fe5d 	bl	8015cc0 <HAL_GetTick>
 8017006:	eba0 000a 	sub.w	r0, r0, sl
 801700a:	4548      	cmp	r0, r9
 801700c:	d207      	bcs.n	801701e <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801700e:	9a01      	ldr	r2, [sp, #4]
 8017010:	b102      	cbz	r2, 8017014 <SPI_WaitFlagStateUntilTimeout+0x58>
 8017012:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8017014:	9b01      	ldr	r3, [sp, #4]
 8017016:	3b01      	subs	r3, #1
 8017018:	9301      	str	r3, [sp, #4]
 801701a:	4691      	mov	r9, r2
 801701c:	e7e5      	b.n	8016fea <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801701e:	682a      	ldr	r2, [r5, #0]
 8017020:	6853      	ldr	r3, [r2, #4]
 8017022:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8017026:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017028:	686b      	ldr	r3, [r5, #4]
 801702a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801702e:	d00b      	beq.n	8017048 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8017030:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8017032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017036:	d014      	beq.n	8017062 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8017038:	2301      	movs	r3, #1
 801703a:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 801703e:	2300      	movs	r3, #0
 8017040:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8017044:	2003      	movs	r0, #3
 8017046:	e018      	b.n	801707a <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017048:	68ab      	ldr	r3, [r5, #8]
 801704a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801704e:	d002      	beq.n	8017056 <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8017050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017054:	d1ec      	bne.n	8017030 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8017056:	682a      	ldr	r2, [r5, #0]
 8017058:	6813      	ldr	r3, [r2, #0]
 801705a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801705e:	6013      	str	r3, [r2, #0]
 8017060:	e7e6      	b.n	8017030 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8017062:	682a      	ldr	r2, [r5, #0]
 8017064:	6813      	ldr	r3, [r2, #0]
 8017066:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801706a:	6013      	str	r3, [r2, #0]
 801706c:	682a      	ldr	r2, [r5, #0]
 801706e:	6813      	ldr	r3, [r2, #0]
 8017070:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017074:	6013      	str	r3, [r2, #0]
 8017076:	e7df      	b.n	8017038 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8017078:	2000      	movs	r0, #0
}
 801707a:	b002      	add	sp, #8
 801707c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017080:	20000018 	.word	0x20000018

08017084 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8017084:	b570      	push	{r4, r5, r6, lr}
 8017086:	b084      	sub	sp, #16
 8017088:	4604      	mov	r4, r0
 801708a:	460d      	mov	r5, r1
 801708c:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 801708e:	9200      	str	r2, [sp, #0]
 8017090:	460b      	mov	r3, r1
 8017092:	2201      	movs	r2, #1
 8017094:	2102      	movs	r1, #2
 8017096:	f7ff ff91 	bl	8016fbc <SPI_WaitFlagStateUntilTimeout>
 801709a:	b9d0      	cbnz	r0, 80170d2 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801709c:	4b17      	ldr	r3, [pc, #92]	@ (80170fc <SPI_EndRxTxTransaction+0x78>)
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	4a17      	ldr	r2, [pc, #92]	@ (8017100 <SPI_EndRxTxTransaction+0x7c>)
 80170a2:	fba2 2303 	umull	r2, r3, r2, r3
 80170a6:	0d5b      	lsrs	r3, r3, #21
 80170a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80170ac:	fb02 f303 	mul.w	r3, r2, r3
 80170b0:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80170b2:	6863      	ldr	r3, [r4, #4]
 80170b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80170b8:	d011      	beq.n	80170de <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80170ba:	9b03      	ldr	r3, [sp, #12]
 80170bc:	b13b      	cbz	r3, 80170ce <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 80170be:	9b03      	ldr	r3, [sp, #12]
 80170c0:	3b01      	subs	r3, #1
 80170c2:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80170c4:	6823      	ldr	r3, [r4, #0]
 80170c6:	689b      	ldr	r3, [r3, #8]
 80170c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80170cc:	d1f5      	bne.n	80170ba <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 80170ce:	b004      	add	sp, #16
 80170d0:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80170d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80170d4:	f043 0320 	orr.w	r3, r3, #32
 80170d8:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 80170da:	2003      	movs	r0, #3
 80170dc:	e7f7      	b.n	80170ce <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80170de:	9600      	str	r6, [sp, #0]
 80170e0:	462b      	mov	r3, r5
 80170e2:	2200      	movs	r2, #0
 80170e4:	2180      	movs	r1, #128	@ 0x80
 80170e6:	4620      	mov	r0, r4
 80170e8:	f7ff ff68 	bl	8016fbc <SPI_WaitFlagStateUntilTimeout>
 80170ec:	2800      	cmp	r0, #0
 80170ee:	d0ee      	beq.n	80170ce <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80170f0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80170f2:	f043 0320 	orr.w	r3, r3, #32
 80170f6:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 80170f8:	2003      	movs	r0, #3
 80170fa:	e7e8      	b.n	80170ce <SPI_EndRxTxTransaction+0x4a>
 80170fc:	20000018 	.word	0x20000018
 8017100:	165e9f81 	.word	0x165e9f81

08017104 <SPI_EndRxTransaction>:
{
 8017104:	b510      	push	{r4, lr}
 8017106:	b082      	sub	sp, #8
 8017108:	4604      	mov	r4, r0
 801710a:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801710c:	6841      	ldr	r1, [r0, #4]
 801710e:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8017112:	d014      	beq.n	801713e <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017114:	6861      	ldr	r1, [r4, #4]
 8017116:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 801711a:	d12a      	bne.n	8017172 <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801711c:	68a1      	ldr	r1, [r4, #8]
 801711e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8017122:	d019      	beq.n	8017158 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8017124:	9200      	str	r2, [sp, #0]
 8017126:	2200      	movs	r2, #0
 8017128:	2180      	movs	r1, #128	@ 0x80
 801712a:	4620      	mov	r0, r4
 801712c:	f7ff ff46 	bl	8016fbc <SPI_WaitFlagStateUntilTimeout>
 8017130:	b330      	cbz	r0, 8017180 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017132:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017134:	f043 0320 	orr.w	r3, r3, #32
 8017138:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 801713a:	2003      	movs	r0, #3
 801713c:	e020      	b.n	8017180 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801713e:	6881      	ldr	r1, [r0, #8]
 8017140:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8017144:	d002      	beq.n	801714c <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8017146:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801714a:	d1e3      	bne.n	8017114 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 801714c:	6820      	ldr	r0, [r4, #0]
 801714e:	6801      	ldr	r1, [r0, #0]
 8017150:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8017154:	6001      	str	r1, [r0, #0]
 8017156:	e7dd      	b.n	8017114 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8017158:	9200      	str	r2, [sp, #0]
 801715a:	2200      	movs	r2, #0
 801715c:	2101      	movs	r1, #1
 801715e:	4620      	mov	r0, r4
 8017160:	f7ff ff2c 	bl	8016fbc <SPI_WaitFlagStateUntilTimeout>
 8017164:	b160      	cbz	r0, 8017180 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017166:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017168:	f043 0320 	orr.w	r3, r3, #32
 801716c:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 801716e:	2003      	movs	r0, #3
 8017170:	e006      	b.n	8017180 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8017172:	9200      	str	r2, [sp, #0]
 8017174:	2200      	movs	r2, #0
 8017176:	2101      	movs	r1, #1
 8017178:	4620      	mov	r0, r4
 801717a:	f7ff ff1f 	bl	8016fbc <SPI_WaitFlagStateUntilTimeout>
 801717e:	b908      	cbnz	r0, 8017184 <SPI_EndRxTransaction+0x80>
}
 8017180:	b002      	add	sp, #8
 8017182:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017184:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017186:	f043 0320 	orr.w	r3, r3, #32
 801718a:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 801718c:	2003      	movs	r0, #3
 801718e:	e7f7      	b.n	8017180 <SPI_EndRxTransaction+0x7c>

08017190 <HAL_SPI_Init>:
  if (hspi == NULL)
 8017190:	2800      	cmp	r0, #0
 8017192:	d05a      	beq.n	801724a <HAL_SPI_Init+0xba>
{
 8017194:	b510      	push	{r4, lr}
 8017196:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8017198:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801719a:	b933      	cbnz	r3, 80171aa <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801719c:	6843      	ldr	r3, [r0, #4]
 801719e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80171a2:	d005      	beq.n	80171b0 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80171a4:	2300      	movs	r3, #0
 80171a6:	61c3      	str	r3, [r0, #28]
 80171a8:	e002      	b.n	80171b0 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80171aa:	2300      	movs	r3, #0
 80171ac:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80171ae:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80171b0:	2300      	movs	r3, #0
 80171b2:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80171b4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d040      	beq.n	801723e <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 80171bc:	2302      	movs	r3, #2
 80171be:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80171c2:	6822      	ldr	r2, [r4, #0]
 80171c4:	6813      	ldr	r3, [r2, #0]
 80171c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80171ca:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80171cc:	6863      	ldr	r3, [r4, #4]
 80171ce:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80171d2:	68a2      	ldr	r2, [r4, #8]
 80171d4:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 80171d8:	4313      	orrs	r3, r2
 80171da:	68e2      	ldr	r2, [r4, #12]
 80171dc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80171e0:	4313      	orrs	r3, r2
 80171e2:	6922      	ldr	r2, [r4, #16]
 80171e4:	f002 0202 	and.w	r2, r2, #2
 80171e8:	4313      	orrs	r3, r2
 80171ea:	6962      	ldr	r2, [r4, #20]
 80171ec:	f002 0201 	and.w	r2, r2, #1
 80171f0:	4313      	orrs	r3, r2
 80171f2:	69a2      	ldr	r2, [r4, #24]
 80171f4:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80171f8:	4313      	orrs	r3, r2
 80171fa:	69e2      	ldr	r2, [r4, #28]
 80171fc:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8017200:	4313      	orrs	r3, r2
 8017202:	6a22      	ldr	r2, [r4, #32]
 8017204:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8017208:	4313      	orrs	r3, r2
 801720a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801720c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8017210:	6821      	ldr	r1, [r4, #0]
 8017212:	4313      	orrs	r3, r2
 8017214:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8017216:	8b63      	ldrh	r3, [r4, #26]
 8017218:	f003 0304 	and.w	r3, r3, #4
 801721c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801721e:	f002 0210 	and.w	r2, r2, #16
 8017222:	6821      	ldr	r1, [r4, #0]
 8017224:	4313      	orrs	r3, r2
 8017226:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8017228:	6822      	ldr	r2, [r4, #0]
 801722a:	69d3      	ldr	r3, [r2, #28]
 801722c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017230:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8017232:	2000      	movs	r0, #0
 8017234:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8017236:	2301      	movs	r3, #1
 8017238:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 801723c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 801723e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8017242:	4620      	mov	r0, r4
 8017244:	f7fa ff96 	bl	8012174 <HAL_SPI_MspInit>
 8017248:	e7b8      	b.n	80171bc <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 801724a:	2001      	movs	r0, #1
}
 801724c:	4770      	bx	lr

0801724e <HAL_SPI_Transmit>:
{
 801724e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017252:	b083      	sub	sp, #12
 8017254:	4604      	mov	r4, r0
 8017256:	4689      	mov	r9, r1
 8017258:	4690      	mov	r8, r2
 801725a:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 801725c:	f7fe fd30 	bl	8015cc0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8017260:	f894 6051 	ldrb.w	r6, [r4, #81]	@ 0x51
 8017264:	b2f6      	uxtb	r6, r6
 8017266:	2e01      	cmp	r6, #1
 8017268:	f040 80cc 	bne.w	8017404 <HAL_SPI_Transmit+0x1b6>
 801726c:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 801726e:	f1b9 0f00 	cmp.w	r9, #0
 8017272:	f000 80c8 	beq.w	8017406 <HAL_SPI_Transmit+0x1b8>
 8017276:	f1b8 0f00 	cmp.w	r8, #0
 801727a:	f000 80c4 	beq.w	8017406 <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 801727e:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8017282:	2b01      	cmp	r3, #1
 8017284:	f000 80c3 	beq.w	801740e <HAL_SPI_Transmit+0x1c0>
 8017288:	2301      	movs	r3, #1
 801728a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801728e:	2303      	movs	r3, #3
 8017290:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017294:	2300      	movs	r3, #0
 8017296:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8017298:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 801729c:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80172a0:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80172a4:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80172a6:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80172a8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80172aa:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80172ac:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80172ae:	68a3      	ldr	r3, [r4, #8]
 80172b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80172b4:	d01e      	beq.n	80172f4 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80172b6:	6823      	ldr	r3, [r4, #0]
 80172b8:	681a      	ldr	r2, [r3, #0]
 80172ba:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80172be:	d103      	bne.n	80172c8 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 80172c0:	681a      	ldr	r2, [r3, #0]
 80172c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80172c6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80172c8:	68e3      	ldr	r3, [r4, #12]
 80172ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80172ce:	d01c      	beq.n	801730a <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80172d0:	6863      	ldr	r3, [r4, #4]
 80172d2:	b113      	cbz	r3, 80172da <HAL_SPI_Transmit+0x8c>
 80172d4:	f1b8 0f01 	cmp.w	r8, #1
 80172d8:	d15f      	bne.n	801739a <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80172da:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80172dc:	6823      	ldr	r3, [r4, #0]
 80172de:	7812      	ldrb	r2, [r2, #0]
 80172e0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80172e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80172e4:	3301      	adds	r3, #1
 80172e6:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80172e8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80172ea:	b29b      	uxth	r3, r3
 80172ec:	3b01      	subs	r3, #1
 80172ee:	b29b      	uxth	r3, r3
 80172f0:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80172f2:	e052      	b.n	801739a <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 80172f4:	6822      	ldr	r2, [r4, #0]
 80172f6:	6813      	ldr	r3, [r2, #0]
 80172f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80172fc:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80172fe:	6822      	ldr	r2, [r4, #0]
 8017300:	6813      	ldr	r3, [r2, #0]
 8017302:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8017306:	6013      	str	r3, [r2, #0]
 8017308:	e7d5      	b.n	80172b6 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801730a:	6863      	ldr	r3, [r4, #4]
 801730c:	b113      	cbz	r3, 8017314 <HAL_SPI_Transmit+0xc6>
 801730e:	f1b8 0f01 	cmp.w	r8, #1
 8017312:	d115      	bne.n	8017340 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017314:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017316:	6823      	ldr	r3, [r4, #0]
 8017318:	8812      	ldrh	r2, [r2, #0]
 801731a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801731c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801731e:	3302      	adds	r3, #2
 8017320:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8017322:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017324:	b29b      	uxth	r3, r3
 8017326:	3b01      	subs	r3, #1
 8017328:	b29b      	uxth	r3, r3
 801732a:	86e3      	strh	r3, [r4, #54]	@ 0x36
 801732c:	e008      	b.n	8017340 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801732e:	f7fe fcc7 	bl	8015cc0 <HAL_GetTick>
 8017332:	1bc0      	subs	r0, r0, r7
 8017334:	42a8      	cmp	r0, r5
 8017336:	d302      	bcc.n	801733e <HAL_SPI_Transmit+0xf0>
 8017338:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 801733c:	d115      	bne.n	801736a <HAL_SPI_Transmit+0x11c>
 801733e:	b1a5      	cbz	r5, 801736a <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 8017340:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017342:	b29b      	uxth	r3, r3
 8017344:	2b00      	cmp	r3, #0
 8017346:	d042      	beq.n	80173ce <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8017348:	6823      	ldr	r3, [r4, #0]
 801734a:	689a      	ldr	r2, [r3, #8]
 801734c:	f012 0f02 	tst.w	r2, #2
 8017350:	d0ed      	beq.n	801732e <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017352:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017354:	8812      	ldrh	r2, [r2, #0]
 8017356:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8017358:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801735a:	3302      	adds	r3, #2
 801735c:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 801735e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017360:	b29b      	uxth	r3, r3
 8017362:	3b01      	subs	r3, #1
 8017364:	b29b      	uxth	r3, r3
 8017366:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8017368:	e7ea      	b.n	8017340 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 801736a:	2301      	movs	r3, #1
 801736c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017370:	2300      	movs	r3, #0
 8017372:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017376:	2603      	movs	r6, #3
 8017378:	e045      	b.n	8017406 <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801737a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801737c:	7812      	ldrb	r2, [r2, #0]
 801737e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8017380:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017382:	3301      	adds	r3, #1
 8017384:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8017386:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 801738a:	fa1f fc8c 	uxth.w	ip, ip
 801738e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8017392:	fa1f fc8c 	uxth.w	ip, ip
 8017396:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 801739a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801739c:	b29b      	uxth	r3, r3
 801739e:	b1b3      	cbz	r3, 80173ce <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80173a0:	6823      	ldr	r3, [r4, #0]
 80173a2:	689a      	ldr	r2, [r3, #8]
 80173a4:	f012 0f02 	tst.w	r2, #2
 80173a8:	d1e7      	bne.n	801737a <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80173aa:	f7fe fc89 	bl	8015cc0 <HAL_GetTick>
 80173ae:	1bc0      	subs	r0, r0, r7
 80173b0:	42a8      	cmp	r0, r5
 80173b2:	d302      	bcc.n	80173ba <HAL_SPI_Transmit+0x16c>
 80173b4:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80173b8:	d101      	bne.n	80173be <HAL_SPI_Transmit+0x170>
 80173ba:	2d00      	cmp	r5, #0
 80173bc:	d1ed      	bne.n	801739a <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 80173be:	2301      	movs	r3, #1
 80173c0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80173c4:	2300      	movs	r3, #0
 80173c6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80173ca:	2603      	movs	r6, #3
 80173cc:	e01b      	b.n	8017406 <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80173ce:	463a      	mov	r2, r7
 80173d0:	4629      	mov	r1, r5
 80173d2:	4620      	mov	r0, r4
 80173d4:	f7ff fe56 	bl	8017084 <SPI_EndRxTxTransaction>
 80173d8:	b108      	cbz	r0, 80173de <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80173da:	2320      	movs	r3, #32
 80173dc:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80173de:	68a3      	ldr	r3, [r4, #8]
 80173e0:	b933      	cbnz	r3, 80173f0 <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80173e2:	9301      	str	r3, [sp, #4]
 80173e4:	6823      	ldr	r3, [r4, #0]
 80173e6:	68da      	ldr	r2, [r3, #12]
 80173e8:	9201      	str	r2, [sp, #4]
 80173ea:	689b      	ldr	r3, [r3, #8]
 80173ec:	9301      	str	r3, [sp, #4]
 80173ee:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80173f0:	2301      	movs	r3, #1
 80173f2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80173f6:	2300      	movs	r3, #0
 80173f8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80173fc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80173fe:	b913      	cbnz	r3, 8017406 <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 8017400:	2600      	movs	r6, #0
 8017402:	e000      	b.n	8017406 <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 8017404:	2602      	movs	r6, #2
}
 8017406:	4630      	mov	r0, r6
 8017408:	b003      	add	sp, #12
 801740a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 801740e:	2602      	movs	r6, #2
 8017410:	e7f9      	b.n	8017406 <HAL_SPI_Transmit+0x1b8>

08017412 <HAL_SPI_TransmitReceive>:
{
 8017412:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017416:	b083      	sub	sp, #12
 8017418:	4604      	mov	r4, r0
 801741a:	4688      	mov	r8, r1
 801741c:	4691      	mov	r9, r2
 801741e:	461f      	mov	r7, r3
 8017420:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8017422:	f7fe fc4d 	bl	8015cc0 <HAL_GetTick>
 8017426:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8017428:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 801742c:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 801742e:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8017430:	2b01      	cmp	r3, #1
 8017432:	d00a      	beq.n	801744a <HAL_SPI_TransmitReceive+0x38>
 8017434:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8017438:	f040 8105 	bne.w	8017646 <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801743c:	68a2      	ldr	r2, [r4, #8]
 801743e:	2a00      	cmp	r2, #0
 8017440:	f040 8105 	bne.w	801764e <HAL_SPI_TransmitReceive+0x23c>
 8017444:	2b04      	cmp	r3, #4
 8017446:	f040 8104 	bne.w	8017652 <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801744a:	f1b8 0f00 	cmp.w	r8, #0
 801744e:	f000 8102 	beq.w	8017656 <HAL_SPI_TransmitReceive+0x244>
 8017452:	f1b9 0f00 	cmp.w	r9, #0
 8017456:	f000 8100 	beq.w	801765a <HAL_SPI_TransmitReceive+0x248>
 801745a:	2f00      	cmp	r7, #0
 801745c:	f000 80ff 	beq.w	801765e <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 8017460:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8017464:	2b01      	cmp	r3, #1
 8017466:	f000 80fc 	beq.w	8017662 <HAL_SPI_TransmitReceive+0x250>
 801746a:	2301      	movs	r3, #1
 801746c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8017470:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8017474:	b2db      	uxtb	r3, r3
 8017476:	2b04      	cmp	r3, #4
 8017478:	d002      	beq.n	8017480 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801747a:	2305      	movs	r3, #5
 801747c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017480:	2300      	movs	r3, #0
 8017482:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8017484:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8017488:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 801748a:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 801748c:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8017490:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8017492:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8017494:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8017496:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017498:	6823      	ldr	r3, [r4, #0]
 801749a:	681a      	ldr	r2, [r3, #0]
 801749c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80174a0:	d103      	bne.n	80174aa <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80174a2:	681a      	ldr	r2, [r3, #0]
 80174a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80174a8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80174aa:	68e3      	ldr	r3, [r4, #12]
 80174ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80174b0:	d011      	beq.n	80174d6 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80174b2:	6863      	ldr	r3, [r4, #4]
 80174b4:	b10b      	cbz	r3, 80174ba <HAL_SPI_TransmitReceive+0xa8>
 80174b6:	2f01      	cmp	r7, #1
 80174b8:	d10b      	bne.n	80174d2 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80174ba:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80174bc:	6823      	ldr	r3, [r4, #0]
 80174be:	7812      	ldrb	r2, [r2, #0]
 80174c0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80174c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80174c4:	3301      	adds	r3, #1
 80174c6:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80174c8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80174ca:	b29b      	uxth	r3, r3
 80174cc:	3b01      	subs	r3, #1
 80174ce:	b29b      	uxth	r3, r3
 80174d0:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80174d2:	2701      	movs	r7, #1
 80174d4:	e071      	b.n	80175ba <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80174d6:	6863      	ldr	r3, [r4, #4]
 80174d8:	b10b      	cbz	r3, 80174de <HAL_SPI_TransmitReceive+0xcc>
 80174da:	2f01      	cmp	r7, #1
 80174dc:	d10b      	bne.n	80174f6 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80174de:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80174e0:	6823      	ldr	r3, [r4, #0]
 80174e2:	8812      	ldrh	r2, [r2, #0]
 80174e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80174e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80174e8:	3302      	adds	r3, #2
 80174ea:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80174ec:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80174ee:	b29b      	uxth	r3, r3
 80174f0:	3b01      	subs	r3, #1
 80174f2:	b29b      	uxth	r3, r3
 80174f4:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80174f6:	2701      	movs	r7, #1
 80174f8:	e01b      	b.n	8017532 <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80174fa:	6823      	ldr	r3, [r4, #0]
 80174fc:	689a      	ldr	r2, [r3, #8]
 80174fe:	f012 0f01 	tst.w	r2, #1
 8017502:	d00e      	beq.n	8017522 <HAL_SPI_TransmitReceive+0x110>
 8017504:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8017506:	b292      	uxth	r2, r2
 8017508:	b15a      	cbz	r2, 8017522 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801750a:	68da      	ldr	r2, [r3, #12]
 801750c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801750e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8017510:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017512:	3302      	adds	r3, #2
 8017514:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8017516:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017518:	b29b      	uxth	r3, r3
 801751a:	3b01      	subs	r3, #1
 801751c:	b29b      	uxth	r3, r3
 801751e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8017520:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8017522:	f7fe fbcd 	bl	8015cc0 <HAL_GetTick>
 8017526:	1b80      	subs	r0, r0, r6
 8017528:	42a8      	cmp	r0, r5
 801752a:	d302      	bcc.n	8017532 <HAL_SPI_TransmitReceive+0x120>
 801752c:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017530:	d11e      	bne.n	8017570 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017532:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017534:	b29b      	uxth	r3, r3
 8017536:	b91b      	cbnz	r3, 8017540 <HAL_SPI_TransmitReceive+0x12e>
 8017538:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801753a:	b29b      	uxth	r3, r3
 801753c:	2b00      	cmp	r3, #0
 801753e:	d062      	beq.n	8017606 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8017540:	6823      	ldr	r3, [r4, #0]
 8017542:	689a      	ldr	r2, [r3, #8]
 8017544:	f012 0f02 	tst.w	r2, #2
 8017548:	d0d7      	beq.n	80174fa <HAL_SPI_TransmitReceive+0xe8>
 801754a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801754c:	b292      	uxth	r2, r2
 801754e:	2a00      	cmp	r2, #0
 8017550:	d0d3      	beq.n	80174fa <HAL_SPI_TransmitReceive+0xe8>
 8017552:	2f00      	cmp	r7, #0
 8017554:	d0d1      	beq.n	80174fa <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017556:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017558:	8812      	ldrh	r2, [r2, #0]
 801755a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801755c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801755e:	3302      	adds	r3, #2
 8017560:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8017562:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017564:	b29b      	uxth	r3, r3
 8017566:	3b01      	subs	r3, #1
 8017568:	b29b      	uxth	r3, r3
 801756a:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 801756c:	2700      	movs	r7, #0
 801756e:	e7c4      	b.n	80174fa <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8017570:	2301      	movs	r3, #1
 8017572:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8017576:	2300      	movs	r3, #0
 8017578:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 801757c:	2003      	movs	r0, #3
 801757e:	e063      	b.n	8017648 <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8017580:	6823      	ldr	r3, [r4, #0]
 8017582:	689a      	ldr	r2, [r3, #8]
 8017584:	f012 0f01 	tst.w	r2, #1
 8017588:	d00e      	beq.n	80175a8 <HAL_SPI_TransmitReceive+0x196>
 801758a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801758c:	b292      	uxth	r2, r2
 801758e:	b15a      	cbz	r2, 80175a8 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8017590:	68da      	ldr	r2, [r3, #12]
 8017592:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017594:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8017596:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017598:	3301      	adds	r3, #1
 801759a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 801759c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801759e:	b29b      	uxth	r3, r3
 80175a0:	3b01      	subs	r3, #1
 80175a2:	b29b      	uxth	r3, r3
 80175a4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80175a6:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80175a8:	f7fe fb8a 	bl	8015cc0 <HAL_GetTick>
 80175ac:	1b83      	subs	r3, r0, r6
 80175ae:	42ab      	cmp	r3, r5
 80175b0:	d302      	bcc.n	80175b8 <HAL_SPI_TransmitReceive+0x1a6>
 80175b2:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80175b6:	d11e      	bne.n	80175f6 <HAL_SPI_TransmitReceive+0x1e4>
 80175b8:	b1ed      	cbz	r5, 80175f6 <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80175ba:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80175bc:	b29b      	uxth	r3, r3
 80175be:	b913      	cbnz	r3, 80175c6 <HAL_SPI_TransmitReceive+0x1b4>
 80175c0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80175c2:	b29b      	uxth	r3, r3
 80175c4:	b1fb      	cbz	r3, 8017606 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80175c6:	6823      	ldr	r3, [r4, #0]
 80175c8:	689a      	ldr	r2, [r3, #8]
 80175ca:	f012 0f02 	tst.w	r2, #2
 80175ce:	d0d7      	beq.n	8017580 <HAL_SPI_TransmitReceive+0x16e>
 80175d0:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80175d2:	b292      	uxth	r2, r2
 80175d4:	2a00      	cmp	r2, #0
 80175d6:	d0d3      	beq.n	8017580 <HAL_SPI_TransmitReceive+0x16e>
 80175d8:	2f00      	cmp	r7, #0
 80175da:	d0d1      	beq.n	8017580 <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80175dc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80175de:	7812      	ldrb	r2, [r2, #0]
 80175e0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80175e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80175e4:	3301      	adds	r3, #1
 80175e6:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80175e8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80175ea:	b29b      	uxth	r3, r3
 80175ec:	3b01      	subs	r3, #1
 80175ee:	b29b      	uxth	r3, r3
 80175f0:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80175f2:	2700      	movs	r7, #0
 80175f4:	e7c4      	b.n	8017580 <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 80175f6:	2301      	movs	r3, #1
 80175f8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80175fc:	2300      	movs	r3, #0
 80175fe:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8017602:	2003      	movs	r0, #3
 8017604:	e020      	b.n	8017648 <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017606:	4632      	mov	r2, r6
 8017608:	4629      	mov	r1, r5
 801760a:	4620      	mov	r0, r4
 801760c:	f7ff fd3a 	bl	8017084 <SPI_EndRxTxTransaction>
 8017610:	b990      	cbnz	r0, 8017638 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8017612:	68a3      	ldr	r3, [r4, #8]
 8017614:	b933      	cbnz	r3, 8017624 <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8017616:	9301      	str	r3, [sp, #4]
 8017618:	6823      	ldr	r3, [r4, #0]
 801761a:	68da      	ldr	r2, [r3, #12]
 801761c:	9201      	str	r2, [sp, #4]
 801761e:	689b      	ldr	r3, [r3, #8]
 8017620:	9301      	str	r3, [sp, #4]
 8017622:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8017624:	2301      	movs	r3, #1
 8017626:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 801762a:	2300      	movs	r3, #0
 801762c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017630:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017632:	b14b      	cbz	r3, 8017648 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8017634:	2001      	movs	r0, #1
 8017636:	e007      	b.n	8017648 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8017638:	2320      	movs	r3, #32
 801763a:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 801763c:	2300      	movs	r3, #0
 801763e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8017642:	2001      	movs	r0, #1
 8017644:	e000      	b.n	8017648 <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 8017646:	2002      	movs	r0, #2
}
 8017648:	b003      	add	sp, #12
 801764a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 801764e:	2002      	movs	r0, #2
 8017650:	e7fa      	b.n	8017648 <HAL_SPI_TransmitReceive+0x236>
 8017652:	2002      	movs	r0, #2
 8017654:	e7f8      	b.n	8017648 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8017656:	2001      	movs	r0, #1
 8017658:	e7f6      	b.n	8017648 <HAL_SPI_TransmitReceive+0x236>
 801765a:	2001      	movs	r0, #1
 801765c:	e7f4      	b.n	8017648 <HAL_SPI_TransmitReceive+0x236>
 801765e:	2001      	movs	r0, #1
 8017660:	e7f2      	b.n	8017648 <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 8017662:	2002      	movs	r0, #2
 8017664:	e7f0      	b.n	8017648 <HAL_SPI_TransmitReceive+0x236>

08017666 <HAL_SPI_Receive>:
{
 8017666:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801766a:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 801766c:	f890 6051 	ldrb.w	r6, [r0, #81]	@ 0x51
 8017670:	b2f6      	uxtb	r6, r6
 8017672:	2e01      	cmp	r6, #1
 8017674:	f040 80b4 	bne.w	80177e0 <HAL_SPI_Receive+0x17a>
 8017678:	4604      	mov	r4, r0
 801767a:	4689      	mov	r9, r1
 801767c:	4690      	mov	r8, r2
 801767e:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8017680:	6843      	ldr	r3, [r0, #4]
 8017682:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017686:	d101      	bne.n	801768c <HAL_SPI_Receive+0x26>
 8017688:	6883      	ldr	r3, [r0, #8]
 801768a:	b393      	cbz	r3, 80176f2 <HAL_SPI_Receive+0x8c>
  tickstart = HAL_GetTick();
 801768c:	f7fe fb18 	bl	8015cc0 <HAL_GetTick>
 8017690:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8017692:	f1b9 0f00 	cmp.w	r9, #0
 8017696:	f000 80a4 	beq.w	80177e2 <HAL_SPI_Receive+0x17c>
 801769a:	f1b8 0f00 	cmp.w	r8, #0
 801769e:	f000 80a0 	beq.w	80177e2 <HAL_SPI_Receive+0x17c>
  __HAL_LOCK(hspi);
 80176a2:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80176a6:	2b01      	cmp	r3, #1
 80176a8:	f000 809f 	beq.w	80177ea <HAL_SPI_Receive+0x184>
 80176ac:	2301      	movs	r3, #1
 80176ae:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80176b2:	2304      	movs	r3, #4
 80176b4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80176b8:	2300      	movs	r3, #0
 80176ba:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80176bc:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80176c0:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80176c4:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80176c8:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80176ca:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80176cc:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80176ce:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80176d0:	6463      	str	r3, [r4, #68]	@ 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80176d2:	68a3      	ldr	r3, [r4, #8]
 80176d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80176d8:	d015      	beq.n	8017706 <HAL_SPI_Receive+0xa0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80176da:	6823      	ldr	r3, [r4, #0]
 80176dc:	681a      	ldr	r2, [r3, #0]
 80176de:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80176e2:	d103      	bne.n	80176ec <HAL_SPI_Receive+0x86>
    __HAL_SPI_ENABLE(hspi);
 80176e4:	681a      	ldr	r2, [r3, #0]
 80176e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80176ea:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80176ec:	68e3      	ldr	r3, [r4, #12]
 80176ee:	b1f3      	cbz	r3, 801772e <HAL_SPI_Receive+0xc8>
 80176f0:	e043      	b.n	801777a <HAL_SPI_Receive+0x114>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80176f2:	2304      	movs	r3, #4
 80176f4:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80176f8:	9500      	str	r5, [sp, #0]
 80176fa:	4613      	mov	r3, r2
 80176fc:	460a      	mov	r2, r1
 80176fe:	f7ff fe88 	bl	8017412 <HAL_SPI_TransmitReceive>
 8017702:	4606      	mov	r6, r0
 8017704:	e06d      	b.n	80177e2 <HAL_SPI_Receive+0x17c>
    __HAL_SPI_DISABLE(hspi);
 8017706:	6822      	ldr	r2, [r4, #0]
 8017708:	6813      	ldr	r3, [r2, #0]
 801770a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801770e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8017710:	6822      	ldr	r2, [r4, #0]
 8017712:	6813      	ldr	r3, [r2, #0]
 8017714:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017718:	6013      	str	r3, [r2, #0]
 801771a:	e7de      	b.n	80176da <HAL_SPI_Receive+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801771c:	f7fe fad0 	bl	8015cc0 <HAL_GetTick>
 8017720:	1bc0      	subs	r0, r0, r7
 8017722:	42a8      	cmp	r0, r5
 8017724:	d302      	bcc.n	801772c <HAL_SPI_Receive+0xc6>
 8017726:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 801772a:	d115      	bne.n	8017758 <HAL_SPI_Receive+0xf2>
 801772c:	b1a5      	cbz	r5, 8017758 <HAL_SPI_Receive+0xf2>
    while (hspi->RxXferCount > 0U)
 801772e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017730:	b29b      	uxth	r3, r3
 8017732:	2b00      	cmp	r3, #0
 8017734:	d042      	beq.n	80177bc <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8017736:	6823      	ldr	r3, [r4, #0]
 8017738:	689a      	ldr	r2, [r3, #8]
 801773a:	f012 0f01 	tst.w	r2, #1
 801773e:	d0ed      	beq.n	801771c <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8017740:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8017742:	7b1b      	ldrb	r3, [r3, #12]
 8017744:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8017746:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017748:	3301      	adds	r3, #1
 801774a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 801774c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801774e:	b29b      	uxth	r3, r3
 8017750:	3b01      	subs	r3, #1
 8017752:	b29b      	uxth	r3, r3
 8017754:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8017756:	e7ea      	b.n	801772e <HAL_SPI_Receive+0xc8>
          hspi->State = HAL_SPI_STATE_READY;
 8017758:	2301      	movs	r3, #1
 801775a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801775e:	2300      	movs	r3, #0
 8017760:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017764:	2603      	movs	r6, #3
 8017766:	e03c      	b.n	80177e2 <HAL_SPI_Receive+0x17c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017768:	f7fe faaa 	bl	8015cc0 <HAL_GetTick>
 801776c:	1bc0      	subs	r0, r0, r7
 801776e:	42a8      	cmp	r0, r5
 8017770:	d302      	bcc.n	8017778 <HAL_SPI_Receive+0x112>
 8017772:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017776:	d119      	bne.n	80177ac <HAL_SPI_Receive+0x146>
 8017778:	b1c5      	cbz	r5, 80177ac <HAL_SPI_Receive+0x146>
    while (hspi->RxXferCount > 0U)
 801777a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801777c:	b29b      	uxth	r3, r3
 801777e:	b1eb      	cbz	r3, 80177bc <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8017780:	6823      	ldr	r3, [r4, #0]
 8017782:	689a      	ldr	r2, [r3, #8]
 8017784:	f012 0f01 	tst.w	r2, #1
 8017788:	d0ee      	beq.n	8017768 <HAL_SPI_Receive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801778a:	68da      	ldr	r2, [r3, #12]
 801778c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801778e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8017790:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017792:	3302      	adds	r3, #2
 8017794:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8017796:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 801779a:	fa1f fc8c 	uxth.w	ip, ip
 801779e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80177a2:	fa1f fc8c 	uxth.w	ip, ip
 80177a6:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 80177aa:	e7e6      	b.n	801777a <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 80177ac:	2301      	movs	r3, #1
 80177ae:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80177b2:	2300      	movs	r3, #0
 80177b4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80177b8:	2603      	movs	r6, #3
 80177ba:	e012      	b.n	80177e2 <HAL_SPI_Receive+0x17c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80177bc:	463a      	mov	r2, r7
 80177be:	4629      	mov	r1, r5
 80177c0:	4620      	mov	r0, r4
 80177c2:	f7ff fc9f 	bl	8017104 <SPI_EndRxTransaction>
 80177c6:	b108      	cbz	r0, 80177cc <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80177c8:	2320      	movs	r3, #32
 80177ca:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80177cc:	2301      	movs	r3, #1
 80177ce:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80177d2:	2300      	movs	r3, #0
 80177d4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80177d8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80177da:	b913      	cbnz	r3, 80177e2 <HAL_SPI_Receive+0x17c>
    return HAL_OK;
 80177dc:	2600      	movs	r6, #0
 80177de:	e000      	b.n	80177e2 <HAL_SPI_Receive+0x17c>
    return HAL_BUSY;
 80177e0:	2602      	movs	r6, #2
}
 80177e2:	4630      	mov	r0, r6
 80177e4:	b003      	add	sp, #12
 80177e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80177ea:	2602      	movs	r6, #2
 80177ec:	e7f9      	b.n	80177e2 <HAL_SPI_Receive+0x17c>

080177ee <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80177ee:	4770      	bx	lr

080177f0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80177f0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80177f4:	b2db      	uxtb	r3, r3
 80177f6:	2b01      	cmp	r3, #1
 80177f8:	d12f      	bne.n	801785a <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80177fa:	2302      	movs	r3, #2
 80177fc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8017800:	6802      	ldr	r2, [r0, #0]
 8017802:	68d3      	ldr	r3, [r2, #12]
 8017804:	f043 0301 	orr.w	r3, r3, #1
 8017808:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801780a:	6803      	ldr	r3, [r0, #0]
 801780c:	4a15      	ldr	r2, [pc, #84]	@ (8017864 <HAL_TIM_Base_Start_IT+0x74>)
 801780e:	4293      	cmp	r3, r2
 8017810:	d018      	beq.n	8017844 <HAL_TIM_Base_Start_IT+0x54>
 8017812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017816:	d015      	beq.n	8017844 <HAL_TIM_Base_Start_IT+0x54>
 8017818:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 801781c:	4293      	cmp	r3, r2
 801781e:	d011      	beq.n	8017844 <HAL_TIM_Base_Start_IT+0x54>
 8017820:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017824:	4293      	cmp	r3, r2
 8017826:	d00d      	beq.n	8017844 <HAL_TIM_Base_Start_IT+0x54>
 8017828:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801782c:	4293      	cmp	r3, r2
 801782e:	d009      	beq.n	8017844 <HAL_TIM_Base_Start_IT+0x54>
 8017830:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8017834:	4293      	cmp	r3, r2
 8017836:	d005      	beq.n	8017844 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8017838:	681a      	ldr	r2, [r3, #0]
 801783a:	f042 0201 	orr.w	r2, r2, #1
 801783e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8017840:	2000      	movs	r0, #0
 8017842:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8017844:	689a      	ldr	r2, [r3, #8]
 8017846:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801784a:	2a06      	cmp	r2, #6
 801784c:	d007      	beq.n	801785e <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 801784e:	681a      	ldr	r2, [r3, #0]
 8017850:	f042 0201 	orr.w	r2, r2, #1
 8017854:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8017856:	2000      	movs	r0, #0
 8017858:	4770      	bx	lr
    return HAL_ERROR;
 801785a:	2001      	movs	r0, #1
 801785c:	4770      	bx	lr
  return HAL_OK;
 801785e:	2000      	movs	r0, #0
}
 8017860:	4770      	bx	lr
 8017862:	bf00      	nop
 8017864:	40010000 	.word	0x40010000

08017868 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8017868:	4770      	bx	lr

0801786a <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801786a:	4770      	bx	lr

0801786c <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801786c:	4770      	bx	lr

0801786e <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801786e:	4770      	bx	lr

08017870 <HAL_TIM_IRQHandler>:
{
 8017870:	b570      	push	{r4, r5, r6, lr}
 8017872:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8017874:	6803      	ldr	r3, [r0, #0]
 8017876:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8017878:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801787a:	f015 0f02 	tst.w	r5, #2
 801787e:	d010      	beq.n	80178a2 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8017880:	f016 0f02 	tst.w	r6, #2
 8017884:	d00d      	beq.n	80178a2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8017886:	f06f 0202 	mvn.w	r2, #2
 801788a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801788c:	2301      	movs	r3, #1
 801788e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8017890:	6803      	ldr	r3, [r0, #0]
 8017892:	699b      	ldr	r3, [r3, #24]
 8017894:	f013 0f03 	tst.w	r3, #3
 8017898:	d05e      	beq.n	8017958 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 801789a:	f7ff ffe6 	bl	801786a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801789e:	2300      	movs	r3, #0
 80178a0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80178a2:	f015 0f04 	tst.w	r5, #4
 80178a6:	d012      	beq.n	80178ce <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80178a8:	f016 0f04 	tst.w	r6, #4
 80178ac:	d00f      	beq.n	80178ce <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80178ae:	6823      	ldr	r3, [r4, #0]
 80178b0:	f06f 0204 	mvn.w	r2, #4
 80178b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80178b6:	2302      	movs	r3, #2
 80178b8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80178ba:	6823      	ldr	r3, [r4, #0]
 80178bc:	699b      	ldr	r3, [r3, #24]
 80178be:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80178c2:	d04f      	beq.n	8017964 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80178c4:	4620      	mov	r0, r4
 80178c6:	f7ff ffd0 	bl	801786a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80178ca:	2300      	movs	r3, #0
 80178cc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80178ce:	f015 0f08 	tst.w	r5, #8
 80178d2:	d012      	beq.n	80178fa <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80178d4:	f016 0f08 	tst.w	r6, #8
 80178d8:	d00f      	beq.n	80178fa <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80178da:	6823      	ldr	r3, [r4, #0]
 80178dc:	f06f 0208 	mvn.w	r2, #8
 80178e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80178e2:	2304      	movs	r3, #4
 80178e4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80178e6:	6823      	ldr	r3, [r4, #0]
 80178e8:	69db      	ldr	r3, [r3, #28]
 80178ea:	f013 0f03 	tst.w	r3, #3
 80178ee:	d040      	beq.n	8017972 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80178f0:	4620      	mov	r0, r4
 80178f2:	f7ff ffba 	bl	801786a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80178f6:	2300      	movs	r3, #0
 80178f8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80178fa:	f015 0f10 	tst.w	r5, #16
 80178fe:	d012      	beq.n	8017926 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8017900:	f016 0f10 	tst.w	r6, #16
 8017904:	d00f      	beq.n	8017926 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8017906:	6823      	ldr	r3, [r4, #0]
 8017908:	f06f 0210 	mvn.w	r2, #16
 801790c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801790e:	2308      	movs	r3, #8
 8017910:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8017912:	6823      	ldr	r3, [r4, #0]
 8017914:	69db      	ldr	r3, [r3, #28]
 8017916:	f413 7f40 	tst.w	r3, #768	@ 0x300
 801791a:	d031      	beq.n	8017980 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 801791c:	4620      	mov	r0, r4
 801791e:	f7ff ffa4 	bl	801786a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017922:	2300      	movs	r3, #0
 8017924:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8017926:	f015 0f01 	tst.w	r5, #1
 801792a:	d002      	beq.n	8017932 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801792c:	f016 0f01 	tst.w	r6, #1
 8017930:	d12d      	bne.n	801798e <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8017932:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8017936:	d002      	beq.n	801793e <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8017938:	f016 0f80 	tst.w	r6, #128	@ 0x80
 801793c:	d12f      	bne.n	801799e <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801793e:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8017942:	d002      	beq.n	801794a <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8017944:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8017948:	d131      	bne.n	80179ae <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801794a:	f015 0f20 	tst.w	r5, #32
 801794e:	d002      	beq.n	8017956 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8017950:	f016 0f20 	tst.w	r6, #32
 8017954:	d133      	bne.n	80179be <HAL_TIM_IRQHandler+0x14e>
}
 8017956:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8017958:	f7ff ff86 	bl	8017868 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801795c:	4620      	mov	r0, r4
 801795e:	f7ff ff85 	bl	801786c <HAL_TIM_PWM_PulseFinishedCallback>
 8017962:	e79c      	b.n	801789e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017964:	4620      	mov	r0, r4
 8017966:	f7ff ff7f 	bl	8017868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801796a:	4620      	mov	r0, r4
 801796c:	f7ff ff7e 	bl	801786c <HAL_TIM_PWM_PulseFinishedCallback>
 8017970:	e7ab      	b.n	80178ca <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017972:	4620      	mov	r0, r4
 8017974:	f7ff ff78 	bl	8017868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017978:	4620      	mov	r0, r4
 801797a:	f7ff ff77 	bl	801786c <HAL_TIM_PWM_PulseFinishedCallback>
 801797e:	e7ba      	b.n	80178f6 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017980:	4620      	mov	r0, r4
 8017982:	f7ff ff71 	bl	8017868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017986:	4620      	mov	r0, r4
 8017988:	f7ff ff70 	bl	801786c <HAL_TIM_PWM_PulseFinishedCallback>
 801798c:	e7c9      	b.n	8017922 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801798e:	6823      	ldr	r3, [r4, #0]
 8017990:	f06f 0201 	mvn.w	r2, #1
 8017994:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8017996:	4620      	mov	r0, r4
 8017998:	f7fa fb22 	bl	8011fe0 <HAL_TIM_PeriodElapsedCallback>
 801799c:	e7c9      	b.n	8017932 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 801799e:	6823      	ldr	r3, [r4, #0]
 80179a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80179a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80179a6:	4620      	mov	r0, r4
 80179a8:	f000 f895 	bl	8017ad6 <HAL_TIMEx_BreakCallback>
 80179ac:	e7c7      	b.n	801793e <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80179ae:	6823      	ldr	r3, [r4, #0]
 80179b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80179b4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80179b6:	4620      	mov	r0, r4
 80179b8:	f7ff ff59 	bl	801786e <HAL_TIM_TriggerCallback>
 80179bc:	e7c5      	b.n	801794a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80179be:	6823      	ldr	r3, [r4, #0]
 80179c0:	f06f 0220 	mvn.w	r2, #32
 80179c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80179c6:	4620      	mov	r0, r4
 80179c8:	f000 f884 	bl	8017ad4 <HAL_TIMEx_CommutCallback>
}
 80179cc:	e7c3      	b.n	8017956 <HAL_TIM_IRQHandler+0xe6>
	...

080179d0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80179d0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80179d2:	4a29      	ldr	r2, [pc, #164]	@ (8017a78 <TIM_Base_SetConfig+0xa8>)
 80179d4:	4290      	cmp	r0, r2
 80179d6:	d00e      	beq.n	80179f6 <TIM_Base_SetConfig+0x26>
 80179d8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80179dc:	d00b      	beq.n	80179f6 <TIM_Base_SetConfig+0x26>
 80179de:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80179e2:	4290      	cmp	r0, r2
 80179e4:	d007      	beq.n	80179f6 <TIM_Base_SetConfig+0x26>
 80179e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80179ea:	4290      	cmp	r0, r2
 80179ec:	d003      	beq.n	80179f6 <TIM_Base_SetConfig+0x26>
 80179ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80179f2:	4290      	cmp	r0, r2
 80179f4:	d103      	bne.n	80179fe <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80179f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80179fa:	684a      	ldr	r2, [r1, #4]
 80179fc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80179fe:	4a1e      	ldr	r2, [pc, #120]	@ (8017a78 <TIM_Base_SetConfig+0xa8>)
 8017a00:	4290      	cmp	r0, r2
 8017a02:	d01a      	beq.n	8017a3a <TIM_Base_SetConfig+0x6a>
 8017a04:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8017a08:	d017      	beq.n	8017a3a <TIM_Base_SetConfig+0x6a>
 8017a0a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8017a0e:	4290      	cmp	r0, r2
 8017a10:	d013      	beq.n	8017a3a <TIM_Base_SetConfig+0x6a>
 8017a12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017a16:	4290      	cmp	r0, r2
 8017a18:	d00f      	beq.n	8017a3a <TIM_Base_SetConfig+0x6a>
 8017a1a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017a1e:	4290      	cmp	r0, r2
 8017a20:	d00b      	beq.n	8017a3a <TIM_Base_SetConfig+0x6a>
 8017a22:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8017a26:	4290      	cmp	r0, r2
 8017a28:	d007      	beq.n	8017a3a <TIM_Base_SetConfig+0x6a>
 8017a2a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017a2e:	4290      	cmp	r0, r2
 8017a30:	d003      	beq.n	8017a3a <TIM_Base_SetConfig+0x6a>
 8017a32:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017a36:	4290      	cmp	r0, r2
 8017a38:	d103      	bne.n	8017a42 <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8017a3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8017a3e:	68ca      	ldr	r2, [r1, #12]
 8017a40:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8017a42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017a46:	694a      	ldr	r2, [r1, #20]
 8017a48:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8017a4a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8017a4c:	688b      	ldr	r3, [r1, #8]
 8017a4e:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017a50:	680b      	ldr	r3, [r1, #0]
 8017a52:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8017a54:	4b08      	ldr	r3, [pc, #32]	@ (8017a78 <TIM_Base_SetConfig+0xa8>)
 8017a56:	4298      	cmp	r0, r3
 8017a58:	d00a      	beq.n	8017a70 <TIM_Base_SetConfig+0xa0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8017a5a:	2301      	movs	r3, #1
 8017a5c:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8017a5e:	6903      	ldr	r3, [r0, #16]
 8017a60:	f013 0f01 	tst.w	r3, #1
 8017a64:	d003      	beq.n	8017a6e <TIM_Base_SetConfig+0x9e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8017a66:	6903      	ldr	r3, [r0, #16]
 8017a68:	f023 0301 	bic.w	r3, r3, #1
 8017a6c:	6103      	str	r3, [r0, #16]
  }
}
 8017a6e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8017a70:	690b      	ldr	r3, [r1, #16]
 8017a72:	6303      	str	r3, [r0, #48]	@ 0x30
 8017a74:	e7f1      	b.n	8017a5a <TIM_Base_SetConfig+0x8a>
 8017a76:	bf00      	nop
 8017a78:	40010000 	.word	0x40010000

08017a7c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8017a7c:	b340      	cbz	r0, 8017ad0 <HAL_TIM_Base_Init+0x54>
{
 8017a7e:	b510      	push	{r4, lr}
 8017a80:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8017a82:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8017a86:	b1f3      	cbz	r3, 8017ac6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8017a88:	2302      	movs	r3, #2
 8017a8a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8017a8e:	4621      	mov	r1, r4
 8017a90:	f851 0b04 	ldr.w	r0, [r1], #4
 8017a94:	f7ff ff9c 	bl	80179d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8017a98:	2301      	movs	r3, #1
 8017a9a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017a9e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8017aa2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8017aa6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8017aaa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017aae:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017ab2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017ab6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8017aba:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8017abe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8017ac2:	2000      	movs	r0, #0
}
 8017ac4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8017ac6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8017aca:	f7ff fe90 	bl	80177ee <HAL_TIM_Base_MspInit>
 8017ace:	e7db      	b.n	8017a88 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8017ad0:	2001      	movs	r0, #1
}
 8017ad2:	4770      	bx	lr

08017ad4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017ad4:	4770      	bx	lr

08017ad6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017ad6:	4770      	bx	lr

08017ad8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8017ad8:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8017ada:	b930      	cbnz	r0, 8017aea <SSD1306_Fill+0x12>
 8017adc:	2100      	movs	r1, #0
 8017ade:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8017ae2:	4803      	ldr	r0, [pc, #12]	@ (8017af0 <SSD1306_Fill+0x18>)
 8017ae4:	f014 fbcc 	bl	802c280 <memset>
}
 8017ae8:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8017aea:	21ff      	movs	r1, #255	@ 0xff
 8017aec:	e7f7      	b.n	8017ade <SSD1306_Fill+0x6>
 8017aee:	bf00      	nop
 8017af0:	20002950 	.word	0x20002950

08017af4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8017af4:	287f      	cmp	r0, #127	@ 0x7f
 8017af6:	d825      	bhi.n	8017b44 <SSD1306_DrawPixel+0x50>
		x >= SSD1306_WIDTH ||
 8017af8:	293f      	cmp	r1, #63	@ 0x3f
 8017afa:	d823      	bhi.n	8017b44 <SSD1306_DrawPixel+0x50>
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8017afc:	b410      	push	{r4}
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8017afe:	4b12      	ldr	r3, [pc, #72]	@ (8017b48 <SSD1306_DrawPixel+0x54>)
 8017b00:	791b      	ldrb	r3, [r3, #4]
 8017b02:	b113      	cbz	r3, 8017b0a <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 8017b04:	fab2 f282 	clz	r2, r2
 8017b08:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8017b0a:	2a01      	cmp	r2, #1
 8017b0c:	d00f      	beq.n	8017b2e <SSD1306_DrawPixel+0x3a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8017b0e:	08cb      	lsrs	r3, r1, #3
 8017b10:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8017b14:	4c0d      	ldr	r4, [pc, #52]	@ (8017b4c <SSD1306_DrawPixel+0x58>)
 8017b16:	5c22      	ldrb	r2, [r4, r0]
 8017b18:	f001 0107 	and.w	r1, r1, #7
 8017b1c:	2301      	movs	r3, #1
 8017b1e:	408b      	lsls	r3, r1
 8017b20:	43db      	mvns	r3, r3
 8017b22:	b25b      	sxtb	r3, r3
 8017b24:	4013      	ands	r3, r2
 8017b26:	5423      	strb	r3, [r4, r0]
	}
}
 8017b28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b2c:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8017b2e:	08cb      	lsrs	r3, r1, #3
 8017b30:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8017b34:	4c05      	ldr	r4, [pc, #20]	@ (8017b4c <SSD1306_DrawPixel+0x58>)
 8017b36:	5c23      	ldrb	r3, [r4, r0]
 8017b38:	f001 0107 	and.w	r1, r1, #7
 8017b3c:	408a      	lsls	r2, r1
 8017b3e:	4313      	orrs	r3, r2
 8017b40:	5423      	strb	r3, [r4, r0]
 8017b42:	e7f1      	b.n	8017b28 <SSD1306_DrawPixel+0x34>
 8017b44:	4770      	bx	lr
 8017b46:	bf00      	nop
 8017b48:	20002948 	.word	0x20002948
 8017b4c:	20002950 	.word	0x20002950

08017b50 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8017b50:	4b01      	ldr	r3, [pc, #4]	@ (8017b58 <SSD1306_GotoXY+0x8>)
 8017b52:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8017b54:	8059      	strh	r1, [r3, #2]
}
 8017b56:	4770      	bx	lr
 8017b58:	20002948 	.word	0x20002948

08017b5c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8017b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b60:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8017b62:	4b24      	ldr	r3, [pc, #144]	@ (8017bf4 <SSD1306_Putc+0x98>)
 8017b64:	881b      	ldrh	r3, [r3, #0]
 8017b66:	780a      	ldrb	r2, [r1, #0]
 8017b68:	4413      	add	r3, r2
	if (
 8017b6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8017b6c:	dc3e      	bgt.n	8017bec <SSD1306_Putc+0x90>
 8017b6e:	4681      	mov	r9, r0
 8017b70:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8017b72:	4b20      	ldr	r3, [pc, #128]	@ (8017bf4 <SSD1306_Putc+0x98>)
 8017b74:	885b      	ldrh	r3, [r3, #2]
 8017b76:	784a      	ldrb	r2, [r1, #1]
 8017b78:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8017b7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8017b7c:	dc38      	bgt.n	8017bf0 <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8017b7e:	2600      	movs	r6, #0
 8017b80:	e020      	b.n	8017bc4 <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8017b82:	4b1c      	ldr	r3, [pc, #112]	@ (8017bf4 <SSD1306_Putc+0x98>)
 8017b84:	8818      	ldrh	r0, [r3, #0]
 8017b86:	8859      	ldrh	r1, [r3, #2]
 8017b88:	4431      	add	r1, r6
 8017b8a:	4420      	add	r0, r4
 8017b8c:	fab8 f288 	clz	r2, r8
 8017b90:	0952      	lsrs	r2, r2, #5
 8017b92:	b289      	uxth	r1, r1
 8017b94:	b280      	uxth	r0, r0
 8017b96:	f7ff ffad 	bl	8017af4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8017b9a:	3401      	adds	r4, #1
 8017b9c:	782b      	ldrb	r3, [r5, #0]
 8017b9e:	42a3      	cmp	r3, r4
 8017ba0:	d90f      	bls.n	8017bc2 <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 8017ba2:	fa07 f304 	lsl.w	r3, r7, r4
 8017ba6:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8017baa:	d0ea      	beq.n	8017b82 <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8017bac:	4b11      	ldr	r3, [pc, #68]	@ (8017bf4 <SSD1306_Putc+0x98>)
 8017bae:	8818      	ldrh	r0, [r3, #0]
 8017bb0:	8859      	ldrh	r1, [r3, #2]
 8017bb2:	4431      	add	r1, r6
 8017bb4:	4420      	add	r0, r4
 8017bb6:	4642      	mov	r2, r8
 8017bb8:	b289      	uxth	r1, r1
 8017bba:	b280      	uxth	r0, r0
 8017bbc:	f7ff ff9a 	bl	8017af4 <SSD1306_DrawPixel>
 8017bc0:	e7eb      	b.n	8017b9a <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 8017bc2:	3601      	adds	r6, #1
 8017bc4:	786a      	ldrb	r2, [r5, #1]
 8017bc6:	42b2      	cmp	r2, r6
 8017bc8:	d908      	bls.n	8017bdc <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8017bca:	6869      	ldr	r1, [r5, #4]
 8017bcc:	f1a9 0320 	sub.w	r3, r9, #32
 8017bd0:	fb02 6303 	mla	r3, r2, r3, r6
 8017bd4:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8017bd8:	2400      	movs	r4, #0
 8017bda:	e7df      	b.n	8017b9c <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8017bdc:	4a05      	ldr	r2, [pc, #20]	@ (8017bf4 <SSD1306_Putc+0x98>)
 8017bde:	8813      	ldrh	r3, [r2, #0]
 8017be0:	7829      	ldrb	r1, [r5, #0]
 8017be2:	440b      	add	r3, r1
 8017be4:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 8017be6:	4648      	mov	r0, r9
}
 8017be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 8017bec:	2000      	movs	r0, #0
 8017bee:	e7fb      	b.n	8017be8 <SSD1306_Putc+0x8c>
 8017bf0:	2000      	movs	r0, #0
 8017bf2:	e7f9      	b.n	8017be8 <SSD1306_Putc+0x8c>
 8017bf4:	20002948 	.word	0x20002948

08017bf8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8017bf8:	b570      	push	{r4, r5, r6, lr}
 8017bfa:	4604      	mov	r4, r0
 8017bfc:	460e      	mov	r6, r1
 8017bfe:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 8017c00:	e000      	b.n	8017c04 <SSD1306_Puts+0xc>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 8017c02:	3401      	adds	r4, #1
	while (*str) {
 8017c04:	7820      	ldrb	r0, [r4, #0]
 8017c06:	b138      	cbz	r0, 8017c18 <SSD1306_Puts+0x20>
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8017c08:	462a      	mov	r2, r5
 8017c0a:	4631      	mov	r1, r6
 8017c0c:	f7ff ffa6 	bl	8017b5c <SSD1306_Putc>
 8017c10:	4603      	mov	r3, r0
 8017c12:	7820      	ldrb	r0, [r4, #0]
 8017c14:	4283      	cmp	r3, r0
 8017c16:	d0f4      	beq.n	8017c02 <SSD1306_Puts+0xa>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8017c18:	bd70      	pop	{r4, r5, r6, pc}
	...

08017c1c <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8017c1c:	b500      	push	{lr}
 8017c1e:	b0c3      	sub	sp, #268	@ 0x10c
uint8_t dt[256];
dt[0] = reg;
 8017c20:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 8017c24:	f04f 0c00 	mov.w	ip, #0
 8017c28:	e009      	b.n	8017c3e <ssd1306_I2C_WriteMulti+0x22>
dt[i+1] = data[i];
 8017c2a:	f10c 0e01 	add.w	lr, ip, #1
 8017c2e:	f812 100c 	ldrb.w	r1, [r2, ip]
 8017c32:	f10d 0c08 	add.w	ip, sp, #8
 8017c36:	f80c 100e 	strb.w	r1, [ip, lr]
for(i = 0; i < count; i++)
 8017c3a:	fa5f fc8e 	uxtb.w	ip, lr
 8017c3e:	459c      	cmp	ip, r3
 8017c40:	d3f3      	bcc.n	8017c2a <ssd1306_I2C_WriteMulti+0xe>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8017c42:	3301      	adds	r3, #1
 8017c44:	220a      	movs	r2, #10
 8017c46:	9200      	str	r2, [sp, #0]
 8017c48:	b29b      	uxth	r3, r3
 8017c4a:	aa02      	add	r2, sp, #8
 8017c4c:	4601      	mov	r1, r0
 8017c4e:	4803      	ldr	r0, [pc, #12]	@ (8017c5c <ssd1306_I2C_WriteMulti+0x40>)
 8017c50:	f7fe fcd0 	bl	80165f4 <HAL_I2C_Master_Transmit>
}
 8017c54:	b043      	add	sp, #268	@ 0x10c
 8017c56:	f85d fb04 	ldr.w	pc, [sp], #4
 8017c5a:	bf00      	nop
 8017c5c:	200008c4 	.word	0x200008c4

08017c60 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8017c60:	b500      	push	{lr}
 8017c62:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 8017c64:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8017c68:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8017c6c:	230a      	movs	r3, #10
 8017c6e:	9300      	str	r3, [sp, #0]
 8017c70:	2302      	movs	r3, #2
 8017c72:	aa03      	add	r2, sp, #12
 8017c74:	4601      	mov	r1, r0
 8017c76:	4803      	ldr	r0, [pc, #12]	@ (8017c84 <ssd1306_I2C_Write+0x24>)
 8017c78:	f7fe fcbc 	bl	80165f4 <HAL_I2C_Master_Transmit>
}
 8017c7c:	b005      	add	sp, #20
 8017c7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017c82:	bf00      	nop
 8017c84:	200008c4 	.word	0x200008c4

08017c88 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8017c88:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8017c8a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8017c8e:	2201      	movs	r2, #1
 8017c90:	2178      	movs	r1, #120	@ 0x78
 8017c92:	4850      	ldr	r0, [pc, #320]	@ (8017dd4 <SSD1306_Init+0x14c>)
 8017c94:	f7fe fd6a 	bl	801676c <HAL_I2C_IsDeviceReady>
 8017c98:	2800      	cmp	r0, #0
 8017c9a:	f040 8099 	bne.w	8017dd0 <SSD1306_Init+0x148>
	uint32_t p = 2500;
 8017c9e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8017ca2:	e000      	b.n	8017ca6 <SSD1306_Init+0x1e>
		p--;
 8017ca4:	3b01      	subs	r3, #1
	while(p>0)
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d1fc      	bne.n	8017ca4 <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8017caa:	22ae      	movs	r2, #174	@ 0xae
 8017cac:	2100      	movs	r1, #0
 8017cae:	2078      	movs	r0, #120	@ 0x78
 8017cb0:	f7ff ffd6 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8017cb4:	2220      	movs	r2, #32
 8017cb6:	2100      	movs	r1, #0
 8017cb8:	2078      	movs	r0, #120	@ 0x78
 8017cba:	f7ff ffd1 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8017cbe:	2210      	movs	r2, #16
 8017cc0:	2100      	movs	r1, #0
 8017cc2:	2078      	movs	r0, #120	@ 0x78
 8017cc4:	f7ff ffcc 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8017cc8:	22b0      	movs	r2, #176	@ 0xb0
 8017cca:	2100      	movs	r1, #0
 8017ccc:	2078      	movs	r0, #120	@ 0x78
 8017cce:	f7ff ffc7 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8017cd2:	22c8      	movs	r2, #200	@ 0xc8
 8017cd4:	2100      	movs	r1, #0
 8017cd6:	2078      	movs	r0, #120	@ 0x78
 8017cd8:	f7ff ffc2 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8017cdc:	2200      	movs	r2, #0
 8017cde:	4611      	mov	r1, r2
 8017ce0:	2078      	movs	r0, #120	@ 0x78
 8017ce2:	f7ff ffbd 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8017ce6:	2210      	movs	r2, #16
 8017ce8:	2100      	movs	r1, #0
 8017cea:	2078      	movs	r0, #120	@ 0x78
 8017cec:	f7ff ffb8 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8017cf0:	2240      	movs	r2, #64	@ 0x40
 8017cf2:	2100      	movs	r1, #0
 8017cf4:	2078      	movs	r0, #120	@ 0x78
 8017cf6:	f7ff ffb3 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8017cfa:	2281      	movs	r2, #129	@ 0x81
 8017cfc:	2100      	movs	r1, #0
 8017cfe:	2078      	movs	r0, #120	@ 0x78
 8017d00:	f7ff ffae 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8017d04:	22ff      	movs	r2, #255	@ 0xff
 8017d06:	2100      	movs	r1, #0
 8017d08:	2078      	movs	r0, #120	@ 0x78
 8017d0a:	f7ff ffa9 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8017d0e:	22a1      	movs	r2, #161	@ 0xa1
 8017d10:	2100      	movs	r1, #0
 8017d12:	2078      	movs	r0, #120	@ 0x78
 8017d14:	f7ff ffa4 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8017d18:	22a6      	movs	r2, #166	@ 0xa6
 8017d1a:	2100      	movs	r1, #0
 8017d1c:	2078      	movs	r0, #120	@ 0x78
 8017d1e:	f7ff ff9f 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8017d22:	22a8      	movs	r2, #168	@ 0xa8
 8017d24:	2100      	movs	r1, #0
 8017d26:	2078      	movs	r0, #120	@ 0x78
 8017d28:	f7ff ff9a 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8017d2c:	223f      	movs	r2, #63	@ 0x3f
 8017d2e:	2100      	movs	r1, #0
 8017d30:	2078      	movs	r0, #120	@ 0x78
 8017d32:	f7ff ff95 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8017d36:	22a4      	movs	r2, #164	@ 0xa4
 8017d38:	2100      	movs	r1, #0
 8017d3a:	2078      	movs	r0, #120	@ 0x78
 8017d3c:	f7ff ff90 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8017d40:	22d3      	movs	r2, #211	@ 0xd3
 8017d42:	2100      	movs	r1, #0
 8017d44:	2078      	movs	r0, #120	@ 0x78
 8017d46:	f7ff ff8b 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8017d4a:	2200      	movs	r2, #0
 8017d4c:	4611      	mov	r1, r2
 8017d4e:	2078      	movs	r0, #120	@ 0x78
 8017d50:	f7ff ff86 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8017d54:	22d5      	movs	r2, #213	@ 0xd5
 8017d56:	2100      	movs	r1, #0
 8017d58:	2078      	movs	r0, #120	@ 0x78
 8017d5a:	f7ff ff81 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8017d5e:	22f0      	movs	r2, #240	@ 0xf0
 8017d60:	2100      	movs	r1, #0
 8017d62:	2078      	movs	r0, #120	@ 0x78
 8017d64:	f7ff ff7c 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8017d68:	22d9      	movs	r2, #217	@ 0xd9
 8017d6a:	2100      	movs	r1, #0
 8017d6c:	2078      	movs	r0, #120	@ 0x78
 8017d6e:	f7ff ff77 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8017d72:	2222      	movs	r2, #34	@ 0x22
 8017d74:	2100      	movs	r1, #0
 8017d76:	2078      	movs	r0, #120	@ 0x78
 8017d78:	f7ff ff72 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8017d7c:	22da      	movs	r2, #218	@ 0xda
 8017d7e:	2100      	movs	r1, #0
 8017d80:	2078      	movs	r0, #120	@ 0x78
 8017d82:	f7ff ff6d 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8017d86:	2212      	movs	r2, #18
 8017d88:	2100      	movs	r1, #0
 8017d8a:	2078      	movs	r0, #120	@ 0x78
 8017d8c:	f7ff ff68 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8017d90:	22db      	movs	r2, #219	@ 0xdb
 8017d92:	2100      	movs	r1, #0
 8017d94:	2078      	movs	r0, #120	@ 0x78
 8017d96:	f7ff ff63 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8017d9a:	2220      	movs	r2, #32
 8017d9c:	2100      	movs	r1, #0
 8017d9e:	2078      	movs	r0, #120	@ 0x78
 8017da0:	f7ff ff5e 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8017da4:	228d      	movs	r2, #141	@ 0x8d
 8017da6:	2100      	movs	r1, #0
 8017da8:	2078      	movs	r0, #120	@ 0x78
 8017daa:	f7ff ff59 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8017dae:	2214      	movs	r2, #20
 8017db0:	2100      	movs	r1, #0
 8017db2:	2078      	movs	r0, #120	@ 0x78
 8017db4:	f7ff ff54 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8017db8:	22af      	movs	r2, #175	@ 0xaf
 8017dba:	2100      	movs	r1, #0
 8017dbc:	2078      	movs	r0, #120	@ 0x78
 8017dbe:	f7ff ff4f 	bl	8017c60 <ssd1306_I2C_Write>
	SSD1306.CurrentX = 0;
 8017dc2:	4b05      	ldr	r3, [pc, #20]	@ (8017dd8 <SSD1306_Init+0x150>)
 8017dc4:	2200      	movs	r2, #0
 8017dc6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8017dc8:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8017dca:	2001      	movs	r0, #1
 8017dcc:	7158      	strb	r0, [r3, #5]
}
 8017dce:	bd08      	pop	{r3, pc}
		return 0;
 8017dd0:	2000      	movs	r0, #0
 8017dd2:	e7fc      	b.n	8017dce <SSD1306_Init+0x146>
 8017dd4:	200008c4 	.word	0x200008c4
 8017dd8:	20002948 	.word	0x20002948

08017ddc <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8017ddc:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 8017dde:	2400      	movs	r4, #0
 8017de0:	e01a      	b.n	8017e18 <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8017de2:	f1a4 0250 	sub.w	r2, r4, #80	@ 0x50
 8017de6:	b2d2      	uxtb	r2, r2
 8017de8:	2100      	movs	r1, #0
 8017dea:	2078      	movs	r0, #120	@ 0x78
 8017dec:	f7ff ff38 	bl	8017c60 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8017df0:	2200      	movs	r2, #0
 8017df2:	4611      	mov	r1, r2
 8017df4:	2078      	movs	r0, #120	@ 0x78
 8017df6:	f7ff ff33 	bl	8017c60 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8017dfa:	2210      	movs	r2, #16
 8017dfc:	2100      	movs	r1, #0
 8017dfe:	2078      	movs	r0, #120	@ 0x78
 8017e00:	f7ff ff2e 	bl	8017c60 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8017e04:	2380      	movs	r3, #128	@ 0x80
 8017e06:	4a06      	ldr	r2, [pc, #24]	@ (8017e20 <SSD1306_UpdateScreen+0x44>)
 8017e08:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8017e0c:	2140      	movs	r1, #64	@ 0x40
 8017e0e:	2078      	movs	r0, #120	@ 0x78
 8017e10:	f7ff ff04 	bl	8017c1c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8017e14:	3401      	adds	r4, #1
 8017e16:	b2e4      	uxtb	r4, r4
 8017e18:	2c07      	cmp	r4, #7
 8017e1a:	d9e2      	bls.n	8017de2 <SSD1306_UpdateScreen+0x6>
}
 8017e1c:	bd10      	pop	{r4, pc}
 8017e1e:	bf00      	nop
 8017e20:	20002950 	.word	0x20002950

08017e24 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8017e24:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8017e26:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017e2a:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8017e2c:	f001 fd4a 	bl	80198c4 <xTaskGetSchedulerState>
 8017e30:	2801      	cmp	r0, #1
 8017e32:	d100      	bne.n	8017e36 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8017e34:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8017e36:	f002 f94d 	bl	801a0d4 <xPortSysTickHandler>
}
 8017e3a:	e7fb      	b.n	8017e34 <SysTick_Handler+0x10>

08017e3c <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017e3c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8017e40:	b92b      	cbnz	r3, 8017e4e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8017e42:	4b06      	ldr	r3, [pc, #24]	@ (8017e5c <osKernelInitialize+0x20>)
 8017e44:	6818      	ldr	r0, [r3, #0]
 8017e46:	b928      	cbnz	r0, 8017e54 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8017e48:	2201      	movs	r2, #1
 8017e4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8017e4c:	4770      	bx	lr
    stat = osErrorISR;
 8017e4e:	f06f 0005 	mvn.w	r0, #5
 8017e52:	4770      	bx	lr
    } else {
      stat = osError;
 8017e54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }
  }

  return (stat);
}
 8017e58:	4770      	bx	lr
 8017e5a:	bf00      	nop
 8017e5c:	20003650 	.word	0x20003650

08017e60 <osKernelStart>:
 8017e60:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8017e64:	b973      	cbnz	r3, 8017e84 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8017e66:	4b0a      	ldr	r3, [pc, #40]	@ (8017e90 <osKernelStart+0x30>)
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	2b01      	cmp	r3, #1
 8017e6c:	d10d      	bne.n	8017e8a <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8017e6e:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017e70:	2400      	movs	r4, #0
 8017e72:	4b08      	ldr	r3, [pc, #32]	@ (8017e94 <osKernelStart+0x34>)
 8017e74:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8017e76:	4b06      	ldr	r3, [pc, #24]	@ (8017e90 <osKernelStart+0x30>)
 8017e78:	2202      	movs	r2, #2
 8017e7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8017e7c:	f001 fa6a 	bl	8019354 <vTaskStartScheduler>
      stat = osOK;
 8017e80:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8017e82:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8017e84:	f06f 0005 	mvn.w	r0, #5
 8017e88:	4770      	bx	lr
      stat = osError;
 8017e8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8017e8e:	4770      	bx	lr
 8017e90:	20003650 	.word	0x20003650
 8017e94:	e000ed00 	.word	0xe000ed00

08017e98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8017e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e9a:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8017e9c:	2400      	movs	r4, #0
 8017e9e:	9405      	str	r4, [sp, #20]
 8017ea0:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8017ea4:	bb7c      	cbnz	r4, 8017f06 <osThreadNew+0x6e>
 8017ea6:	b370      	cbz	r0, 8017f06 <osThreadNew+0x6e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8017ea8:	b32a      	cbz	r2, 8017ef6 <osThreadNew+0x5e>
      if (attr->name != NULL) {
 8017eaa:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8017eac:	6993      	ldr	r3, [r2, #24]
 8017eae:	b903      	cbnz	r3, 8017eb2 <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 8017eb0:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8017eb2:	1e5c      	subs	r4, r3, #1
 8017eb4:	2c37      	cmp	r4, #55	@ 0x37
 8017eb6:	d84a      	bhi.n	8017f4e <osThreadNew+0xb6>
 8017eb8:	6854      	ldr	r4, [r2, #4]
 8017eba:	f014 0f01 	tst.w	r4, #1
 8017ebe:	d148      	bne.n	8017f52 <osThreadNew+0xba>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8017ec0:	6956      	ldr	r6, [r2, #20]
 8017ec2:	b176      	cbz	r6, 8017ee2 <osThreadNew+0x4a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8017ec4:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017ec8:	6894      	ldr	r4, [r2, #8]
 8017eca:	b134      	cbz	r4, 8017eda <osThreadNew+0x42>
 8017ecc:	68d7      	ldr	r7, [r2, #12]
 8017ece:	f5b7 7fc0 	cmp.w	r7, #384	@ 0x180
 8017ed2:	d302      	bcc.n	8017eda <osThreadNew+0x42>
 8017ed4:	6917      	ldr	r7, [r2, #16]
 8017ed6:	b107      	cbz	r7, 8017eda <osThreadNew+0x42>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017ed8:	b9c6      	cbnz	r6, 8017f0c <osThreadNew+0x74>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017eda:	b12c      	cbz	r4, 8017ee8 <osThreadNew+0x50>
    mem  = -1;
 8017edc:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017ee0:	e00e      	b.n	8017f00 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 8017ee2:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8017ee6:	e7ef      	b.n	8017ec8 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017ee8:	68d4      	ldr	r4, [r2, #12]
 8017eea:	b98c      	cbnz	r4, 8017f10 <osThreadNew+0x78>
 8017eec:	6914      	ldr	r4, [r2, #16]
 8017eee:	b194      	cbz	r4, 8017f16 <osThreadNew+0x7e>
    mem  = -1;
 8017ef0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017ef4:	e004      	b.n	8017f00 <osThreadNew+0x68>
    name = NULL;
 8017ef6:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8017ef8:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8017efa:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8017efc:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 8017f00:	2c01      	cmp	r4, #1
 8017f02:	d00a      	beq.n	8017f1a <osThreadNew+0x82>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8017f04:	b1ac      	cbz	r4, 8017f32 <osThreadNew+0x9a>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8017f06:	9805      	ldr	r0, [sp, #20]
}
 8017f08:	b007      	add	sp, #28
 8017f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8017f0c:	2401      	movs	r4, #1
 8017f0e:	e7f7      	b.n	8017f00 <osThreadNew+0x68>
    mem  = -1;
 8017f10:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017f14:	e7f4      	b.n	8017f00 <osThreadNew+0x68>
          mem = 0;
 8017f16:	2400      	movs	r4, #0
 8017f18:	e7f2      	b.n	8017f00 <osThreadNew+0x68>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017f1a:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8017f1c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017f1e:	9202      	str	r2, [sp, #8]
 8017f20:	9401      	str	r4, [sp, #4]
 8017f22:	9300      	str	r3, [sp, #0]
 8017f24:	460b      	mov	r3, r1
 8017f26:	4662      	mov	r2, ip
 8017f28:	4629      	mov	r1, r5
 8017f2a:	f001 f9a3 	bl	8019274 <xTaskCreateStatic>
 8017f2e:	9005      	str	r0, [sp, #20]
 8017f30:	e7e9      	b.n	8017f06 <osThreadNew+0x6e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8017f32:	aa05      	add	r2, sp, #20
 8017f34:	9201      	str	r2, [sp, #4]
 8017f36:	9300      	str	r3, [sp, #0]
 8017f38:	460b      	mov	r3, r1
 8017f3a:	fa1f f28c 	uxth.w	r2, ip
 8017f3e:	4629      	mov	r1, r5
 8017f40:	f001 f9d5 	bl	80192ee <xTaskCreate>
 8017f44:	2801      	cmp	r0, #1
 8017f46:	d0de      	beq.n	8017f06 <osThreadNew+0x6e>
            hTask = NULL;
 8017f48:	2300      	movs	r3, #0
 8017f4a:	9305      	str	r3, [sp, #20]
 8017f4c:	e7db      	b.n	8017f06 <osThreadNew+0x6e>
        return (NULL);
 8017f4e:	2000      	movs	r0, #0
 8017f50:	e7da      	b.n	8017f08 <osThreadNew+0x70>
 8017f52:	2000      	movs	r0, #0
 8017f54:	e7d8      	b.n	8017f08 <osThreadNew+0x70>

08017f56 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8017f56:	b508      	push	{r3, lr}
 8017f58:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8017f5c:	b933      	cbnz	r3, 8017f6c <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8017f5e:	b908      	cbnz	r0, 8017f64 <osDelay+0xe>
    stat = osOK;
 8017f60:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8017f62:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8017f64:	f001 fb62 	bl	801962c <vTaskDelay>
    stat = osOK;
 8017f68:	2000      	movs	r0, #0
 8017f6a:	e7fa      	b.n	8017f62 <osDelay+0xc>
    stat = osErrorISR;
 8017f6c:	f06f 0005 	mvn.w	r0, #5
 8017f70:	e7f7      	b.n	8017f62 <osDelay+0xc>

08017f72 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8017f72:	b570      	push	{r4, r5, r6, lr}
 8017f74:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d13c      	bne.n	8017ff6 <osMutexNew+0x84>
 8017f7c:	4604      	mov	r4, r0
    if (attr != NULL) {
 8017f7e:	b100      	cbz	r0, 8017f82 <osMutexNew+0x10>
      type = attr->attr_bits;
 8017f80:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8017f82:	f013 0601 	ands.w	r6, r3, #1
 8017f86:	d000      	beq.n	8017f8a <osMutexNew+0x18>
      rmtx = 1U;
 8017f88:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8017f8a:	f013 0f08 	tst.w	r3, #8
 8017f8e:	d135      	bne.n	8017ffc <osMutexNew+0x8a>
      mem = -1;

      if (attr != NULL) {
 8017f90:	b344      	cbz	r4, 8017fe4 <osMutexNew+0x72>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8017f92:	68a1      	ldr	r1, [r4, #8]
 8017f94:	b111      	cbz	r1, 8017f9c <osMutexNew+0x2a>
 8017f96:	68e3      	ldr	r3, [r4, #12]
 8017f98:	2b4f      	cmp	r3, #79	@ 0x4f
 8017f9a:	d818      	bhi.n	8017fce <osMutexNew+0x5c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8017f9c:	b191      	cbz	r1, 8017fc4 <osMutexNew+0x52>
      mem = -1;
 8017f9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 8017fa2:	bb6b      	cbnz	r3, 8018000 <osMutexNew+0x8e>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8017fa4:	b316      	cbz	r6, 8017fec <osMutexNew+0x7a>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8017fa6:	2004      	movs	r0, #4
 8017fa8:	f000 fc04 	bl	80187b4 <xQueueCreateMutex>
 8017fac:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8017fae:	b31d      	cbz	r5, 8017ff8 <osMutexNew+0x86>
        if (attr != NULL) {
 8017fb0:	b104      	cbz	r4, 8017fb4 <osMutexNew+0x42>
          name = attr->name;
 8017fb2:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8017fb4:	4621      	mov	r1, r4
 8017fb6:	4628      	mov	r0, r5
 8017fb8:	f000 ff64 	bl	8018e84 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8017fbc:	b1e6      	cbz	r6, 8017ff8 <osMutexNew+0x86>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8017fbe:	f045 0501 	orr.w	r5, r5, #1
 8017fc2:	e019      	b.n	8017ff8 <osMutexNew+0x86>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8017fc4:	68e3      	ldr	r3, [r4, #12]
 8017fc6:	b17b      	cbz	r3, 8017fe8 <osMutexNew+0x76>
      mem = -1;
 8017fc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017fcc:	e7e9      	b.n	8017fa2 <osMutexNew+0x30>
          if (rmtx != 0U) {
 8017fce:	b126      	cbz	r6, 8017fda <osMutexNew+0x68>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8017fd0:	2004      	movs	r0, #4
 8017fd2:	f000 fbfa 	bl	80187ca <xQueueCreateMutexStatic>
 8017fd6:	4605      	mov	r5, r0
 8017fd8:	e7e9      	b.n	8017fae <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8017fda:	2001      	movs	r0, #1
 8017fdc:	f000 fbf5 	bl	80187ca <xQueueCreateMutexStatic>
 8017fe0:	4605      	mov	r5, r0
 8017fe2:	e7e4      	b.n	8017fae <osMutexNew+0x3c>
        mem = 0;
 8017fe4:	2300      	movs	r3, #0
 8017fe6:	e7dc      	b.n	8017fa2 <osMutexNew+0x30>
            mem = 0;
 8017fe8:	2300      	movs	r3, #0
 8017fea:	e7da      	b.n	8017fa2 <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 8017fec:	2001      	movs	r0, #1
 8017fee:	f000 fbe1 	bl	80187b4 <xQueueCreateMutex>
 8017ff2:	4605      	mov	r5, r0
 8017ff4:	e7db      	b.n	8017fae <osMutexNew+0x3c>
  hMutex = NULL;
 8017ff6:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8017ff8:	4628      	mov	r0, r5
 8017ffa:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8017ffc:	2500      	movs	r5, #0
 8017ffe:	e7fb      	b.n	8017ff8 <osMutexNew+0x86>
 8018000:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8018002:	e7f9      	b.n	8017ff8 <osMutexNew+0x86>

08018004 <osMutexAcquire>:
 8018004:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8018008:	b9da      	cbnz	r2, 8018042 <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801800a:	b510      	push	{r4, lr}
 801800c:	4603      	mov	r3, r0
 801800e:	460c      	mov	r4, r1
 8018010:	f020 0001 	bic.w	r0, r0, #1
 8018014:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8018018:	2b01      	cmp	r3, #1
 801801a:	d915      	bls.n	8018048 <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 801801c:	b141      	cbz	r1, 8018030 <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801801e:	4621      	mov	r1, r4
 8018020:	f000 fdeb 	bl	8018bfa <xQueueTakeMutexRecursive>
 8018024:	2801      	cmp	r0, #1
 8018026:	d012      	beq.n	801804e <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 8018028:	b19c      	cbz	r4, 8018052 <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 801802a:	f06f 0001 	mvn.w	r0, #1
 801802e:	e00f      	b.n	8018050 <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8018030:	4621      	mov	r1, r4
 8018032:	f000 fd0f 	bl	8018a54 <xQueueSemaphoreTake>
 8018036:	2801      	cmp	r0, #1
 8018038:	d00e      	beq.n	8018058 <osMutexAcquire+0x54>
        if (timeout != 0U) {
 801803a:	b17c      	cbz	r4, 801805c <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 801803c:	f06f 0001 	mvn.w	r0, #1
 8018040:	e006      	b.n	8018050 <osMutexAcquire+0x4c>
    stat = osErrorISR;
 8018042:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8018046:	4770      	bx	lr
    stat = osErrorParameter;
 8018048:	f06f 0003 	mvn.w	r0, #3
 801804c:	e000      	b.n	8018050 <osMutexAcquire+0x4c>
  stat = osOK;
 801804e:	2000      	movs	r0, #0
}
 8018050:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 8018052:	f06f 0002 	mvn.w	r0, #2
 8018056:	e7fb      	b.n	8018050 <osMutexAcquire+0x4c>
  stat = osOK;
 8018058:	2000      	movs	r0, #0
 801805a:	e7f9      	b.n	8018050 <osMutexAcquire+0x4c>
          stat = osErrorResource;
 801805c:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8018060:	e7f6      	b.n	8018050 <osMutexAcquire+0x4c>

08018062 <osMutexRelease>:
 8018062:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8018066:	b9ba      	cbnz	r2, 8018098 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8018068:	b508      	push	{r3, lr}
 801806a:	4603      	mov	r3, r0
 801806c:	f020 0001 	bic.w	r0, r0, #1
 8018070:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8018074:	2b01      	cmp	r3, #1
 8018076:	d912      	bls.n	801809e <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8018078:	b129      	cbz	r1, 8018086 <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 801807a:	f000 fbb5 	bl	80187e8 <xQueueGiveMutexRecursive>
 801807e:	2801      	cmp	r0, #1
 8018080:	d110      	bne.n	80180a4 <osMutexRelease+0x42>
  stat = osOK;
 8018082:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8018084:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8018086:	2300      	movs	r3, #0
 8018088:	461a      	mov	r2, r3
 801808a:	4619      	mov	r1, r3
 801808c:	f000 fac2 	bl	8018614 <xQueueGenericSend>
 8018090:	2801      	cmp	r0, #1
 8018092:	d10a      	bne.n	80180aa <osMutexRelease+0x48>
  stat = osOK;
 8018094:	2000      	movs	r0, #0
 8018096:	e7f5      	b.n	8018084 <osMutexRelease+0x22>
    stat = osErrorISR;
 8018098:	f06f 0005 	mvn.w	r0, #5
}
 801809c:	4770      	bx	lr
    stat = osErrorParameter;
 801809e:	f06f 0003 	mvn.w	r0, #3
 80180a2:	e7ef      	b.n	8018084 <osMutexRelease+0x22>
        stat = osErrorResource;
 80180a4:	f06f 0002 	mvn.w	r0, #2
 80180a8:	e7ec      	b.n	8018084 <osMutexRelease+0x22>
        stat = osErrorResource;
 80180aa:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80180ae:	e7e9      	b.n	8018084 <osMutexRelease+0x22>

080180b0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80180b0:	b570      	push	{r4, r5, r6, lr}
 80180b2:	b082      	sub	sp, #8
 80180b4:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d13a      	bne.n	8018132 <osMessageQueueNew+0x82>
 80180bc:	4614      	mov	r4, r2
 80180be:	2800      	cmp	r0, #0
 80180c0:	d03b      	beq.n	801813a <osMessageQueueNew+0x8a>
 80180c2:	2900      	cmp	r1, #0
 80180c4:	d03b      	beq.n	801813e <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 80180c6:	b36a      	cbz	r2, 8018124 <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80180c8:	6893      	ldr	r3, [r2, #8]
 80180ca:	b14b      	cbz	r3, 80180e0 <osMessageQueueNew+0x30>
 80180cc:	68d2      	ldr	r2, [r2, #12]
 80180ce:	2a4f      	cmp	r2, #79	@ 0x4f
 80180d0:	d906      	bls.n	80180e0 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80180d2:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80180d4:	b122      	cbz	r2, 80180e0 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80180d6:	fb01 f500 	mul.w	r5, r1, r0
 80180da:	6966      	ldr	r6, [r4, #20]
 80180dc:	42ae      	cmp	r6, r5
 80180de:	d21b      	bcs.n	8018118 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80180e0:	b173      	cbz	r3, 8018100 <osMessageQueueNew+0x50>
    mem = -1;
 80180e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 80180e6:	bb63      	cbnz	r3, 8018142 <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80180e8:	2200      	movs	r2, #0
 80180ea:	f000 fa6f 	bl	80185cc <xQueueGenericCreate>
 80180ee:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80180f0:	b305      	cbz	r5, 8018134 <osMessageQueueNew+0x84>
      if (attr != NULL) {
 80180f2:	b104      	cbz	r4, 80180f6 <osMessageQueueNew+0x46>
        name = attr->name;
 80180f4:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 80180f6:	4621      	mov	r1, r4
 80180f8:	4628      	mov	r0, r5
 80180fa:	f000 fec3 	bl	8018e84 <vQueueAddToRegistry>
 80180fe:	e019      	b.n	8018134 <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8018100:	68e3      	ldr	r3, [r4, #12]
 8018102:	b98b      	cbnz	r3, 8018128 <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8018104:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8018106:	b113      	cbz	r3, 801810e <osMessageQueueNew+0x5e>
    mem = -1;
 8018108:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801810c:	e7eb      	b.n	80180e6 <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801810e:	6963      	ldr	r3, [r4, #20]
 8018110:	b16b      	cbz	r3, 801812e <osMessageQueueNew+0x7e>
    mem = -1;
 8018112:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018116:	e7e6      	b.n	80180e6 <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8018118:	2500      	movs	r5, #0
 801811a:	9500      	str	r5, [sp, #0]
 801811c:	f000 fa0c 	bl	8018538 <xQueueGenericCreateStatic>
 8018120:	4605      	mov	r5, r0
 8018122:	e7e5      	b.n	80180f0 <osMessageQueueNew+0x40>
      mem = 0;
 8018124:	2300      	movs	r3, #0
 8018126:	e7de      	b.n	80180e6 <osMessageQueueNew+0x36>
    mem = -1;
 8018128:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801812c:	e7db      	b.n	80180e6 <osMessageQueueNew+0x36>
          mem = 0;
 801812e:	2300      	movs	r3, #0
 8018130:	e7d9      	b.n	80180e6 <osMessageQueueNew+0x36>
  hQueue = NULL;
 8018132:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8018134:	4628      	mov	r0, r5
 8018136:	b002      	add	sp, #8
 8018138:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 801813a:	2500      	movs	r5, #0
 801813c:	e7fa      	b.n	8018134 <osMessageQueueNew+0x84>
 801813e:	2500      	movs	r5, #0
 8018140:	e7f8      	b.n	8018134 <osMessageQueueNew+0x84>
 8018142:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8018144:	e7f6      	b.n	8018134 <osMessageQueueNew+0x84>

08018146 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8018146:	b510      	push	{r4, lr}
 8018148:	b082      	sub	sp, #8
 801814a:	461c      	mov	r4, r3
 801814c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8018150:	b1c3      	cbz	r3, 8018184 <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8018152:	b318      	cbz	r0, 801819c <osMessageQueuePut+0x56>
 8018154:	b329      	cbz	r1, 80181a2 <osMessageQueuePut+0x5c>
 8018156:	bb3c      	cbnz	r4, 80181a8 <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8018158:	2300      	movs	r3, #0
 801815a:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801815c:	aa01      	add	r2, sp, #4
 801815e:	f000 fb63 	bl	8018828 <xQueueGenericSendFromISR>
 8018162:	2801      	cmp	r0, #1
 8018164:	d123      	bne.n	80181ae <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8018166:	9801      	ldr	r0, [sp, #4]
 8018168:	b150      	cbz	r0, 8018180 <osMessageQueuePut+0x3a>
 801816a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801816e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018172:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018176:	f3bf 8f4f 	dsb	sy
 801817a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 801817e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8018180:	b002      	add	sp, #8
 8018182:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8018184:	b1b0      	cbz	r0, 80181b4 <osMessageQueuePut+0x6e>
 8018186:	b1c1      	cbz	r1, 80181ba <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8018188:	2300      	movs	r3, #0
 801818a:	4622      	mov	r2, r4
 801818c:	f000 fa42 	bl	8018614 <xQueueGenericSend>
 8018190:	2801      	cmp	r0, #1
 8018192:	d015      	beq.n	80181c0 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 8018194:	b1b4      	cbz	r4, 80181c4 <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 8018196:	f06f 0001 	mvn.w	r0, #1
 801819a:	e7f1      	b.n	8018180 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 801819c:	f06f 0003 	mvn.w	r0, #3
 80181a0:	e7ee      	b.n	8018180 <osMessageQueuePut+0x3a>
 80181a2:	f06f 0003 	mvn.w	r0, #3
 80181a6:	e7eb      	b.n	8018180 <osMessageQueuePut+0x3a>
 80181a8:	f06f 0003 	mvn.w	r0, #3
 80181ac:	e7e8      	b.n	8018180 <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 80181ae:	f06f 0002 	mvn.w	r0, #2
 80181b2:	e7e5      	b.n	8018180 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 80181b4:	f06f 0003 	mvn.w	r0, #3
 80181b8:	e7e2      	b.n	8018180 <osMessageQueuePut+0x3a>
 80181ba:	f06f 0003 	mvn.w	r0, #3
 80181be:	e7df      	b.n	8018180 <osMessageQueuePut+0x3a>
  stat = osOK;
 80181c0:	2000      	movs	r0, #0
 80181c2:	e7dd      	b.n	8018180 <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 80181c4:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80181c8:	e7da      	b.n	8018180 <osMessageQueuePut+0x3a>

080181ca <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80181ca:	b510      	push	{r4, lr}
 80181cc:	b082      	sub	sp, #8
 80181ce:	461c      	mov	r4, r3
 80181d0:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80181d4:	b1c3      	cbz	r3, 8018208 <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80181d6:	b310      	cbz	r0, 801821e <osMessageQueueGet+0x54>
 80181d8:	b321      	cbz	r1, 8018224 <osMessageQueueGet+0x5a>
 80181da:	bb34      	cbnz	r4, 801822a <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 80181dc:	2300      	movs	r3, #0
 80181de:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80181e0:	aa01      	add	r2, sp, #4
 80181e2:	f000 fdd9 	bl	8018d98 <xQueueReceiveFromISR>
 80181e6:	2801      	cmp	r0, #1
 80181e8:	d122      	bne.n	8018230 <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80181ea:	9801      	ldr	r0, [sp, #4]
 80181ec:	b150      	cbz	r0, 8018204 <osMessageQueueGet+0x3a>
 80181ee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80181f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80181f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80181fa:	f3bf 8f4f 	dsb	sy
 80181fe:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8018202:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8018204:	b002      	add	sp, #8
 8018206:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8018208:	b1a8      	cbz	r0, 8018236 <osMessageQueueGet+0x6c>
 801820a:	b1b9      	cbz	r1, 801823c <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801820c:	4622      	mov	r2, r4
 801820e:	f000 fb72 	bl	80188f6 <xQueueReceive>
 8018212:	2801      	cmp	r0, #1
 8018214:	d015      	beq.n	8018242 <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 8018216:	b1b4      	cbz	r4, 8018246 <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 8018218:	f06f 0001 	mvn.w	r0, #1
 801821c:	e7f2      	b.n	8018204 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 801821e:	f06f 0003 	mvn.w	r0, #3
 8018222:	e7ef      	b.n	8018204 <osMessageQueueGet+0x3a>
 8018224:	f06f 0003 	mvn.w	r0, #3
 8018228:	e7ec      	b.n	8018204 <osMessageQueueGet+0x3a>
 801822a:	f06f 0003 	mvn.w	r0, #3
 801822e:	e7e9      	b.n	8018204 <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 8018230:	f06f 0002 	mvn.w	r0, #2
 8018234:	e7e6      	b.n	8018204 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8018236:	f06f 0003 	mvn.w	r0, #3
 801823a:	e7e3      	b.n	8018204 <osMessageQueueGet+0x3a>
 801823c:	f06f 0003 	mvn.w	r0, #3
 8018240:	e7e0      	b.n	8018204 <osMessageQueueGet+0x3a>
  stat = osOK;
 8018242:	2000      	movs	r0, #0
 8018244:	e7de      	b.n	8018204 <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 8018246:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 801824a:	e7db      	b.n	8018204 <osMessageQueueGet+0x3a>

0801824c <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 801824c:	b148      	cbz	r0, 8018262 <osMessageQueueGetCount+0x16>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 801824e:	b508      	push	{r3, lr}
 8018250:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8018254:	b112      	cbz	r2, 801825c <osMessageQueueGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8018256:	f000 fe09 	bl	8018e6c <uxQueueMessagesWaitingFromISR>
  else {
    count = uxQueueMessagesWaiting (hQueue);
  }

  return ((uint32_t)count);
}
 801825a:	bd08      	pop	{r3, pc}
    count = uxQueueMessagesWaiting (hQueue);
 801825c:	f000 fdf3 	bl	8018e46 <uxQueueMessagesWaiting>
 8018260:	e7fb      	b.n	801825a <osMessageQueueGetCount+0xe>
    count = 0U;
 8018262:	2000      	movs	r0, #0
}
 8018264:	4770      	bx	lr

08018266 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8018266:	b508      	push	{r3, lr}
 8018268:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 801826c:	b92b      	cbnz	r3, 801827a <osMessageQueueReset+0x14>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 801826e:	b138      	cbz	r0, 8018280 <osMessageQueueReset+0x1a>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 8018270:	2100      	movs	r1, #0
 8018272:	f000 f90e 	bl	8018492 <xQueueGenericReset>
    stat = osOK;
 8018276:	2000      	movs	r0, #0
  }

  return (stat);
}
 8018278:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 801827a:	f06f 0005 	mvn.w	r0, #5
 801827e:	e7fb      	b.n	8018278 <osMessageQueueReset+0x12>
    stat = osErrorParameter;
 8018280:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8018284:	e7f8      	b.n	8018278 <osMessageQueueReset+0x12>
	...

08018288 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8018288:	4b03      	ldr	r3, [pc, #12]	@ (8018298 <vApplicationGetIdleTaskMemory+0x10>)
 801828a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801828c:	4b03      	ldr	r3, [pc, #12]	@ (801829c <vApplicationGetIdleTaskMemory+0x14>)
 801828e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8018290:	2380      	movs	r3, #128	@ 0x80
 8018292:	6013      	str	r3, [r2, #0]
}
 8018294:	4770      	bx	lr
 8018296:	bf00      	nop
 8018298:	200034d0 	.word	0x200034d0
 801829c:	200032d0 	.word	0x200032d0

080182a0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80182a0:	4b03      	ldr	r3, [pc, #12]	@ (80182b0 <vApplicationGetTimerTaskMemory+0x10>)
 80182a2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80182a4:	4b03      	ldr	r3, [pc, #12]	@ (80182b4 <vApplicationGetTimerTaskMemory+0x14>)
 80182a6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80182a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80182ac:	6013      	str	r3, [r2, #0]
}
 80182ae:	4770      	bx	lr
 80182b0:	20003150 	.word	0x20003150
 80182b4:	20002d50 	.word	0x20002d50

080182b8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80182b8:	f100 0308 	add.w	r3, r0, #8
 80182bc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80182be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80182c2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80182c4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80182c6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80182c8:	2300      	movs	r3, #0
 80182ca:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80182cc:	4770      	bx	lr

080182ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80182ce:	2300      	movs	r3, #0
 80182d0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80182d2:	4770      	bx	lr

080182d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80182d4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80182d6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80182d8:	689a      	ldr	r2, [r3, #8]
 80182da:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80182dc:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80182de:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80182e0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80182e2:	6803      	ldr	r3, [r0, #0]
 80182e4:	3301      	adds	r3, #1
 80182e6:	6003      	str	r3, [r0, #0]
}
 80182e8:	4770      	bx	lr

080182ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80182ea:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80182ec:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80182ee:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80182f2:	d011      	beq.n	8018318 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80182f4:	f100 0308 	add.w	r3, r0, #8
 80182f8:	461c      	mov	r4, r3
 80182fa:	685b      	ldr	r3, [r3, #4]
 80182fc:	681a      	ldr	r2, [r3, #0]
 80182fe:	42aa      	cmp	r2, r5
 8018300:	d9fa      	bls.n	80182f8 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8018302:	6863      	ldr	r3, [r4, #4]
 8018304:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018306:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8018308:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 801830a:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801830c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 801830e:	6803      	ldr	r3, [r0, #0]
 8018310:	3301      	adds	r3, #1
 8018312:	6003      	str	r3, [r0, #0]
}
 8018314:	bc30      	pop	{r4, r5}
 8018316:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8018318:	6904      	ldr	r4, [r0, #16]
 801831a:	e7f2      	b.n	8018302 <vListInsert+0x18>

0801831c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801831c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801831e:	6841      	ldr	r1, [r0, #4]
 8018320:	6882      	ldr	r2, [r0, #8]
 8018322:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8018324:	6841      	ldr	r1, [r0, #4]
 8018326:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018328:	685a      	ldr	r2, [r3, #4]
 801832a:	4282      	cmp	r2, r0
 801832c:	d006      	beq.n	801833c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801832e:	2200      	movs	r2, #0
 8018330:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8018332:	681a      	ldr	r2, [r3, #0]
 8018334:	3a01      	subs	r2, #1
 8018336:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018338:	6818      	ldr	r0, [r3, #0]
}
 801833a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801833c:	6882      	ldr	r2, [r0, #8]
 801833e:	605a      	str	r2, [r3, #4]
 8018340:	e7f5      	b.n	801832e <uxListRemove+0x12>

08018342 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8018342:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8018344:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8018346:	b118      	cbz	r0, 8018350 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8018348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801834a:	6818      	ldr	r0, [r3, #0]
 801834c:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8018350:	4770      	bx	lr

08018352 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018352:	b510      	push	{r4, lr}
 8018354:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018356:	f001 fe4d 	bl	8019ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801835a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801835c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801835e:	429a      	cmp	r2, r3
 8018360:	d004      	beq.n	801836c <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8018362:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8018364:	f001 fe68 	bl	801a038 <vPortExitCritical>

	return xReturn;
}
 8018368:	4620      	mov	r0, r4
 801836a:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 801836c:	2401      	movs	r4, #1
 801836e:	e7f9      	b.n	8018364 <prvIsQueueFull+0x12>

08018370 <prvIsQueueEmpty>:
{
 8018370:	b510      	push	{r4, lr}
 8018372:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8018374:	f001 fe3e 	bl	8019ff4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018378:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801837a:	b923      	cbnz	r3, 8018386 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 801837c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 801837e:	f001 fe5b 	bl	801a038 <vPortExitCritical>
}
 8018382:	4620      	mov	r0, r4
 8018384:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8018386:	2400      	movs	r4, #0
 8018388:	e7f9      	b.n	801837e <prvIsQueueEmpty+0xe>

0801838a <prvCopyDataToQueue>:
{
 801838a:	b570      	push	{r4, r5, r6, lr}
 801838c:	4604      	mov	r4, r0
 801838e:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018390:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018392:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8018394:	b95a      	cbnz	r2, 80183ae <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018396:	6803      	ldr	r3, [r0, #0]
 8018398:	b11b      	cbz	r3, 80183a2 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 801839a:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801839c:	3601      	adds	r6, #1
 801839e:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 80183a0:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80183a2:	6880      	ldr	r0, [r0, #8]
 80183a4:	f001 faea 	bl	801997c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80183a8:	2300      	movs	r3, #0
 80183aa:	60a3      	str	r3, [r4, #8]
 80183ac:	e7f6      	b.n	801839c <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80183ae:	b96d      	cbnz	r5, 80183cc <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80183b0:	6840      	ldr	r0, [r0, #4]
 80183b2:	f015 f9a1 	bl	802d6f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80183b6:	6863      	ldr	r3, [r4, #4]
 80183b8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80183ba:	4413      	add	r3, r2
 80183bc:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80183be:	68a2      	ldr	r2, [r4, #8]
 80183c0:	4293      	cmp	r3, r2
 80183c2:	d319      	bcc.n	80183f8 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80183c4:	6823      	ldr	r3, [r4, #0]
 80183c6:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80183c8:	4628      	mov	r0, r5
 80183ca:	e7e7      	b.n	801839c <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80183cc:	68c0      	ldr	r0, [r0, #12]
 80183ce:	f015 f993 	bl	802d6f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80183d2:	68e3      	ldr	r3, [r4, #12]
 80183d4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80183d6:	4251      	negs	r1, r2
 80183d8:	1a9b      	subs	r3, r3, r2
 80183da:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80183dc:	6822      	ldr	r2, [r4, #0]
 80183de:	4293      	cmp	r3, r2
 80183e0:	d202      	bcs.n	80183e8 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80183e2:	68a3      	ldr	r3, [r4, #8]
 80183e4:	440b      	add	r3, r1
 80183e6:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80183e8:	2d02      	cmp	r5, #2
 80183ea:	d001      	beq.n	80183f0 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80183ec:	2000      	movs	r0, #0
 80183ee:	e7d5      	b.n	801839c <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80183f0:	b126      	cbz	r6, 80183fc <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80183f2:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80183f4:	2000      	movs	r0, #0
 80183f6:	e7d1      	b.n	801839c <prvCopyDataToQueue+0x12>
 80183f8:	4628      	mov	r0, r5
 80183fa:	e7cf      	b.n	801839c <prvCopyDataToQueue+0x12>
 80183fc:	2000      	movs	r0, #0
 80183fe:	e7cd      	b.n	801839c <prvCopyDataToQueue+0x12>

08018400 <prvCopyDataFromQueue>:
{
 8018400:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018402:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8018404:	b16a      	cbz	r2, 8018422 <prvCopyDataFromQueue+0x22>
{
 8018406:	b510      	push	{r4, lr}
 8018408:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801840a:	68d9      	ldr	r1, [r3, #12]
 801840c:	4411      	add	r1, r2
 801840e:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018410:	689c      	ldr	r4, [r3, #8]
 8018412:	42a1      	cmp	r1, r4
 8018414:	d301      	bcc.n	801841a <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018416:	6819      	ldr	r1, [r3, #0]
 8018418:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801841a:	68d9      	ldr	r1, [r3, #12]
 801841c:	f015 f96c 	bl	802d6f8 <memcpy>
}
 8018420:	bd10      	pop	{r4, pc}
 8018422:	4770      	bx	lr

08018424 <prvUnlockQueue>:
{
 8018424:	b538      	push	{r3, r4, r5, lr}
 8018426:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8018428:	f001 fde4 	bl	8019ff4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801842c:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8018430:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018432:	e001      	b.n	8018438 <prvUnlockQueue+0x14>
			--cTxLock;
 8018434:	3c01      	subs	r4, #1
 8018436:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018438:	2c00      	cmp	r4, #0
 801843a:	dd0a      	ble.n	8018452 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801843c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801843e:	b143      	cbz	r3, 8018452 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018440:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8018444:	f001 f99e 	bl	8019784 <xTaskRemoveFromEventList>
 8018448:	2800      	cmp	r0, #0
 801844a:	d0f3      	beq.n	8018434 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 801844c:	f001 fa2e 	bl	80198ac <vTaskMissedYield>
 8018450:	e7f0      	b.n	8018434 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8018452:	23ff      	movs	r3, #255	@ 0xff
 8018454:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8018458:	f001 fdee 	bl	801a038 <vPortExitCritical>
	taskENTER_CRITICAL();
 801845c:	f001 fdca 	bl	8019ff4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8018460:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8018464:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018466:	e001      	b.n	801846c <prvUnlockQueue+0x48>
				--cRxLock;
 8018468:	3c01      	subs	r4, #1
 801846a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801846c:	2c00      	cmp	r4, #0
 801846e:	dd0a      	ble.n	8018486 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018470:	692b      	ldr	r3, [r5, #16]
 8018472:	b143      	cbz	r3, 8018486 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018474:	f105 0010 	add.w	r0, r5, #16
 8018478:	f001 f984 	bl	8019784 <xTaskRemoveFromEventList>
 801847c:	2800      	cmp	r0, #0
 801847e:	d0f3      	beq.n	8018468 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8018480:	f001 fa14 	bl	80198ac <vTaskMissedYield>
 8018484:	e7f0      	b.n	8018468 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8018486:	23ff      	movs	r3, #255	@ 0xff
 8018488:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 801848c:	f001 fdd4 	bl	801a038 <vPortExitCritical>
}
 8018490:	bd38      	pop	{r3, r4, r5, pc}

08018492 <xQueueGenericReset>:
{
 8018492:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8018494:	b1e0      	cbz	r0, 80184d0 <xQueueGenericReset+0x3e>
 8018496:	460d      	mov	r5, r1
 8018498:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801849a:	f001 fdab 	bl	8019ff4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801849e:	6823      	ldr	r3, [r4, #0]
 80184a0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80184a2:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80184a4:	fb01 3002 	mla	r0, r1, r2, r3
 80184a8:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80184aa:	2000      	movs	r0, #0
 80184ac:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80184ae:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80184b0:	3a01      	subs	r2, #1
 80184b2:	fb02 3301 	mla	r3, r2, r1, r3
 80184b6:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80184b8:	23ff      	movs	r3, #255	@ 0xff
 80184ba:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80184be:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80184c2:	b9fd      	cbnz	r5, 8018504 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80184c4:	6923      	ldr	r3, [r4, #16]
 80184c6:	b963      	cbnz	r3, 80184e2 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80184c8:	f001 fdb6 	bl	801a038 <vPortExitCritical>
}
 80184cc:	2001      	movs	r0, #1
 80184ce:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80184d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80184d4:	f383 8811 	msr	BASEPRI, r3
 80184d8:	f3bf 8f6f 	isb	sy
 80184dc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80184e0:	e7fe      	b.n	80184e0 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80184e2:	f104 0010 	add.w	r0, r4, #16
 80184e6:	f001 f94d 	bl	8019784 <xTaskRemoveFromEventList>
 80184ea:	2800      	cmp	r0, #0
 80184ec:	d0ec      	beq.n	80184c8 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80184ee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80184f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80184f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80184fa:	f3bf 8f4f 	dsb	sy
 80184fe:	f3bf 8f6f 	isb	sy
 8018502:	e7e1      	b.n	80184c8 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018504:	f104 0010 	add.w	r0, r4, #16
 8018508:	f7ff fed6 	bl	80182b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801850c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018510:	f7ff fed2 	bl	80182b8 <vListInitialise>
 8018514:	e7d8      	b.n	80184c8 <xQueueGenericReset+0x36>

08018516 <prvInitialiseNewQueue>:
{
 8018516:	b538      	push	{r3, r4, r5, lr}
 8018518:	461d      	mov	r5, r3
 801851a:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 801851c:	460b      	mov	r3, r1
 801851e:	b949      	cbnz	r1, 8018534 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018520:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8018522:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018524:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018526:	2101      	movs	r1, #1
 8018528:	4620      	mov	r0, r4
 801852a:	f7ff ffb2 	bl	8018492 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 801852e:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 8018532:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018534:	6022      	str	r2, [r4, #0]
 8018536:	e7f4      	b.n	8018522 <prvInitialiseNewQueue+0xc>

08018538 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018538:	b940      	cbnz	r0, 801854c <xQueueGenericCreateStatic+0x14>
 801853a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801853e:	f383 8811 	msr	BASEPRI, r3
 8018542:	f3bf 8f6f 	isb	sy
 8018546:	f3bf 8f4f 	dsb	sy
 801854a:	e7fe      	b.n	801854a <xQueueGenericCreateStatic+0x12>
	{
 801854c:	b510      	push	{r4, lr}
 801854e:	b084      	sub	sp, #16
 8018550:	461c      	mov	r4, r3
 8018552:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8018554:	b153      	cbz	r3, 801856c <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018556:	b192      	cbz	r2, 801857e <xQueueGenericCreateStatic+0x46>
 8018558:	b989      	cbnz	r1, 801857e <xQueueGenericCreateStatic+0x46>
 801855a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801855e:	f383 8811 	msr	BASEPRI, r3
 8018562:	f3bf 8f6f 	isb	sy
 8018566:	f3bf 8f4f 	dsb	sy
 801856a:	e7fe      	b.n	801856a <xQueueGenericCreateStatic+0x32>
 801856c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018570:	f383 8811 	msr	BASEPRI, r3
 8018574:	f3bf 8f6f 	isb	sy
 8018578:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 801857c:	e7fe      	b.n	801857c <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801857e:	b16a      	cbz	r2, 801859c <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8018580:	2350      	movs	r3, #80	@ 0x50
 8018582:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8018584:	9b03      	ldr	r3, [sp, #12]
 8018586:	2b50      	cmp	r3, #80	@ 0x50
 8018588:	d013      	beq.n	80185b2 <xQueueGenericCreateStatic+0x7a>
 801858a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801858e:	f383 8811 	msr	BASEPRI, r3
 8018592:	f3bf 8f6f 	isb	sy
 8018596:	f3bf 8f4f 	dsb	sy
 801859a:	e7fe      	b.n	801859a <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801859c:	2900      	cmp	r1, #0
 801859e:	d0ef      	beq.n	8018580 <xQueueGenericCreateStatic+0x48>
 80185a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185a4:	f383 8811 	msr	BASEPRI, r3
 80185a8:	f3bf 8f6f 	isb	sy
 80185ac:	f3bf 8f4f 	dsb	sy
 80185b0:	e7fe      	b.n	80185b0 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80185b2:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80185b4:	2301      	movs	r3, #1
 80185b6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80185ba:	9400      	str	r4, [sp, #0]
 80185bc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80185c0:	4660      	mov	r0, ip
 80185c2:	f7ff ffa8 	bl	8018516 <prvInitialiseNewQueue>
	}
 80185c6:	4620      	mov	r0, r4
 80185c8:	b004      	add	sp, #16
 80185ca:	bd10      	pop	{r4, pc}

080185cc <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80185cc:	b940      	cbnz	r0, 80185e0 <xQueueGenericCreate+0x14>
 80185ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185d2:	f383 8811 	msr	BASEPRI, r3
 80185d6:	f3bf 8f6f 	isb	sy
 80185da:	f3bf 8f4f 	dsb	sy
 80185de:	e7fe      	b.n	80185de <xQueueGenericCreate+0x12>
	{
 80185e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185e2:	b083      	sub	sp, #12
 80185e4:	460d      	mov	r5, r1
 80185e6:	4614      	mov	r4, r2
 80185e8:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80185ea:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80185ee:	3050      	adds	r0, #80	@ 0x50
 80185f0:	f001 feba 	bl	801a368 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80185f4:	4607      	mov	r7, r0
 80185f6:	b150      	cbz	r0, 801860e <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80185f8:	2300      	movs	r3, #0
 80185fa:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80185fe:	9000      	str	r0, [sp, #0]
 8018600:	4623      	mov	r3, r4
 8018602:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8018606:	4629      	mov	r1, r5
 8018608:	4630      	mov	r0, r6
 801860a:	f7ff ff84 	bl	8018516 <prvInitialiseNewQueue>
	}
 801860e:	4638      	mov	r0, r7
 8018610:	b003      	add	sp, #12
 8018612:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018614 <xQueueGenericSend>:
{
 8018614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018616:	b085      	sub	sp, #20
 8018618:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 801861a:	b188      	cbz	r0, 8018640 <xQueueGenericSend+0x2c>
 801861c:	460f      	mov	r7, r1
 801861e:	461d      	mov	r5, r3
 8018620:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018622:	b1b1      	cbz	r1, 8018652 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018624:	2d02      	cmp	r5, #2
 8018626:	d120      	bne.n	801866a <xQueueGenericSend+0x56>
 8018628:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801862a:	2b01      	cmp	r3, #1
 801862c:	d01d      	beq.n	801866a <xQueueGenericSend+0x56>
 801862e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018632:	f383 8811 	msr	BASEPRI, r3
 8018636:	f3bf 8f6f 	isb	sy
 801863a:	f3bf 8f4f 	dsb	sy
 801863e:	e7fe      	b.n	801863e <xQueueGenericSend+0x2a>
 8018640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018644:	f383 8811 	msr	BASEPRI, r3
 8018648:	f3bf 8f6f 	isb	sy
 801864c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8018650:	e7fe      	b.n	8018650 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018652:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018654:	2b00      	cmp	r3, #0
 8018656:	d0e5      	beq.n	8018624 <xQueueGenericSend+0x10>
 8018658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801865c:	f383 8811 	msr	BASEPRI, r3
 8018660:	f3bf 8f6f 	isb	sy
 8018664:	f3bf 8f4f 	dsb	sy
 8018668:	e7fe      	b.n	8018668 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801866a:	f001 f92b 	bl	80198c4 <xTaskGetSchedulerState>
 801866e:	4606      	mov	r6, r0
 8018670:	b958      	cbnz	r0, 801868a <xQueueGenericSend+0x76>
 8018672:	9b01      	ldr	r3, [sp, #4]
 8018674:	2b00      	cmp	r3, #0
 8018676:	d048      	beq.n	801870a <xQueueGenericSend+0xf6>
 8018678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801867c:	f383 8811 	msr	BASEPRI, r3
 8018680:	f3bf 8f6f 	isb	sy
 8018684:	f3bf 8f4f 	dsb	sy
 8018688:	e7fe      	b.n	8018688 <xQueueGenericSend+0x74>
 801868a:	2600      	movs	r6, #0
 801868c:	e03d      	b.n	801870a <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801868e:	462a      	mov	r2, r5
 8018690:	4639      	mov	r1, r7
 8018692:	4620      	mov	r0, r4
 8018694:	f7ff fe79 	bl	801838a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018698:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801869a:	b97b      	cbnz	r3, 80186bc <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 801869c:	b148      	cbz	r0, 80186b2 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 801869e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80186a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80186a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80186aa:	f3bf 8f4f 	dsb	sy
 80186ae:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80186b2:	f001 fcc1 	bl	801a038 <vPortExitCritical>
				return pdPASS;
 80186b6:	2001      	movs	r0, #1
}
 80186b8:	b005      	add	sp, #20
 80186ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80186bc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80186c0:	f001 f860 	bl	8019784 <xTaskRemoveFromEventList>
 80186c4:	2800      	cmp	r0, #0
 80186c6:	d0f4      	beq.n	80186b2 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 80186c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80186cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80186d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80186d4:	f3bf 8f4f 	dsb	sy
 80186d8:	f3bf 8f6f 	isb	sy
 80186dc:	e7e9      	b.n	80186b2 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 80186de:	f001 fcab 	bl	801a038 <vPortExitCritical>
					return errQUEUE_FULL;
 80186e2:	2000      	movs	r0, #0
 80186e4:	e7e8      	b.n	80186b8 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80186e6:	a802      	add	r0, sp, #8
 80186e8:	f001 f892 	bl	8019810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80186ec:	2601      	movs	r6, #1
 80186ee:	e019      	b.n	8018724 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 80186f0:	2300      	movs	r3, #0
 80186f2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80186f6:	e021      	b.n	801873c <xQueueGenericSend+0x128>
 80186f8:	2300      	movs	r3, #0
 80186fa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80186fe:	e023      	b.n	8018748 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8018700:	4620      	mov	r0, r4
 8018702:	f7ff fe8f 	bl	8018424 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018706:	f000 ff15 	bl	8019534 <xTaskResumeAll>
		taskENTER_CRITICAL();
 801870a:	f001 fc73 	bl	8019ff4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801870e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8018710:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018712:	429a      	cmp	r2, r3
 8018714:	d3bb      	bcc.n	801868e <xQueueGenericSend+0x7a>
 8018716:	2d02      	cmp	r5, #2
 8018718:	d0b9      	beq.n	801868e <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 801871a:	9b01      	ldr	r3, [sp, #4]
 801871c:	2b00      	cmp	r3, #0
 801871e:	d0de      	beq.n	80186de <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8018720:	2e00      	cmp	r6, #0
 8018722:	d0e0      	beq.n	80186e6 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8018724:	f001 fc88 	bl	801a038 <vPortExitCritical>
		vTaskSuspendAll();
 8018728:	f000 fe6a 	bl	8019400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801872c:	f001 fc62 	bl	8019ff4 <vPortEnterCritical>
 8018730:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8018734:	b252      	sxtb	r2, r2
 8018736:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801873a:	d0d9      	beq.n	80186f0 <xQueueGenericSend+0xdc>
 801873c:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8018740:	b252      	sxtb	r2, r2
 8018742:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8018746:	d0d7      	beq.n	80186f8 <xQueueGenericSend+0xe4>
 8018748:	f001 fc76 	bl	801a038 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801874c:	a901      	add	r1, sp, #4
 801874e:	a802      	add	r0, sp, #8
 8018750:	f001 f86a 	bl	8019828 <xTaskCheckForTimeOut>
 8018754:	b9d8      	cbnz	r0, 801878e <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8018756:	4620      	mov	r0, r4
 8018758:	f7ff fdfb 	bl	8018352 <prvIsQueueFull>
 801875c:	2800      	cmp	r0, #0
 801875e:	d0cf      	beq.n	8018700 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8018760:	9901      	ldr	r1, [sp, #4]
 8018762:	f104 0010 	add.w	r0, r4, #16
 8018766:	f000 ffd9 	bl	801971c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801876a:	4620      	mov	r0, r4
 801876c:	f7ff fe5a 	bl	8018424 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018770:	f000 fee0 	bl	8019534 <xTaskResumeAll>
 8018774:	2800      	cmp	r0, #0
 8018776:	d1c8      	bne.n	801870a <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8018778:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801877c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018780:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018784:	f3bf 8f4f 	dsb	sy
 8018788:	f3bf 8f6f 	isb	sy
 801878c:	e7bd      	b.n	801870a <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 801878e:	4620      	mov	r0, r4
 8018790:	f7ff fe48 	bl	8018424 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018794:	f000 fece 	bl	8019534 <xTaskResumeAll>
			return errQUEUE_FULL;
 8018798:	2000      	movs	r0, #0
 801879a:	e78d      	b.n	80186b8 <xQueueGenericSend+0xa4>

0801879c <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 801879c:	b148      	cbz	r0, 80187b2 <prvInitialiseMutex+0x16>
	{
 801879e:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80187a0:	2100      	movs	r1, #0
 80187a2:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80187a4:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80187a6:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80187a8:	460b      	mov	r3, r1
 80187aa:	460a      	mov	r2, r1
 80187ac:	f7ff ff32 	bl	8018614 <xQueueGenericSend>
	}
 80187b0:	bd08      	pop	{r3, pc}
 80187b2:	4770      	bx	lr

080187b4 <xQueueCreateMutex>:
	{
 80187b4:	b510      	push	{r4, lr}
 80187b6:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80187b8:	2100      	movs	r1, #0
 80187ba:	2001      	movs	r0, #1
 80187bc:	f7ff ff06 	bl	80185cc <xQueueGenericCreate>
 80187c0:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80187c2:	f7ff ffeb 	bl	801879c <prvInitialiseMutex>
	}
 80187c6:	4620      	mov	r0, r4
 80187c8:	bd10      	pop	{r4, pc}

080187ca <xQueueCreateMutexStatic>:
	{
 80187ca:	b510      	push	{r4, lr}
 80187cc:	b082      	sub	sp, #8
 80187ce:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80187d0:	9000      	str	r0, [sp, #0]
 80187d2:	2200      	movs	r2, #0
 80187d4:	4611      	mov	r1, r2
 80187d6:	2001      	movs	r0, #1
 80187d8:	f7ff feae 	bl	8018538 <xQueueGenericCreateStatic>
 80187dc:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80187de:	f7ff ffdd 	bl	801879c <prvInitialiseMutex>
	}
 80187e2:	4620      	mov	r0, r4
 80187e4:	b002      	add	sp, #8
 80187e6:	bd10      	pop	{r4, pc}

080187e8 <xQueueGiveMutexRecursive>:
	{
 80187e8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80187ea:	b138      	cbz	r0, 80187fc <xQueueGiveMutexRecursive+0x14>
 80187ec:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80187ee:	6885      	ldr	r5, [r0, #8]
 80187f0:	f001 f862 	bl	80198b8 <xTaskGetCurrentTaskHandle>
 80187f4:	4285      	cmp	r5, r0
 80187f6:	d00a      	beq.n	801880e <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 80187f8:	2000      	movs	r0, #0
	}
 80187fa:	bd38      	pop	{r3, r4, r5, pc}
 80187fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018800:	f383 8811 	msr	BASEPRI, r3
 8018804:	f3bf 8f6f 	isb	sy
 8018808:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 801880c:	e7fe      	b.n	801880c <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801880e:	68e3      	ldr	r3, [r4, #12]
 8018810:	3b01      	subs	r3, #1
 8018812:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8018814:	b10b      	cbz	r3, 801881a <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8018816:	2001      	movs	r0, #1
		return xReturn;
 8018818:	e7ef      	b.n	80187fa <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801881a:	461a      	mov	r2, r3
 801881c:	4619      	mov	r1, r3
 801881e:	4620      	mov	r0, r4
 8018820:	f7ff fef8 	bl	8018614 <xQueueGenericSend>
			xReturn = pdPASS;
 8018824:	2001      	movs	r0, #1
 8018826:	e7e8      	b.n	80187fa <xQueueGiveMutexRecursive+0x12>

08018828 <xQueueGenericSendFromISR>:
{
 8018828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 801882c:	b190      	cbz	r0, 8018854 <xQueueGenericSendFromISR+0x2c>
 801882e:	460f      	mov	r7, r1
 8018830:	4616      	mov	r6, r2
 8018832:	461c      	mov	r4, r3
 8018834:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018836:	b1b1      	cbz	r1, 8018866 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018838:	2c02      	cmp	r4, #2
 801883a:	d120      	bne.n	801887e <xQueueGenericSendFromISR+0x56>
 801883c:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 801883e:	2b01      	cmp	r3, #1
 8018840:	d01d      	beq.n	801887e <xQueueGenericSendFromISR+0x56>
 8018842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018846:	f383 8811 	msr	BASEPRI, r3
 801884a:	f3bf 8f6f 	isb	sy
 801884e:	f3bf 8f4f 	dsb	sy
 8018852:	e7fe      	b.n	8018852 <xQueueGenericSendFromISR+0x2a>
 8018854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018858:	f383 8811 	msr	BASEPRI, r3
 801885c:	f3bf 8f6f 	isb	sy
 8018860:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8018864:	e7fe      	b.n	8018864 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018866:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018868:	2b00      	cmp	r3, #0
 801886a:	d0e5      	beq.n	8018838 <xQueueGenericSendFromISR+0x10>
 801886c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018870:	f383 8811 	msr	BASEPRI, r3
 8018874:	f3bf 8f6f 	isb	sy
 8018878:	f3bf 8f4f 	dsb	sy
 801887c:	e7fe      	b.n	801887c <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801887e:	f001 fcdf 	bl	801a240 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018882:	f3ef 8811 	mrs	r8, BASEPRI
 8018886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801888a:	f383 8811 	msr	BASEPRI, r3
 801888e:	f3bf 8f6f 	isb	sy
 8018892:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018896:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8018898:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 801889a:	429a      	cmp	r2, r3
 801889c:	d306      	bcc.n	80188ac <xQueueGenericSendFromISR+0x84>
 801889e:	2c02      	cmp	r4, #2
 80188a0:	d004      	beq.n	80188ac <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80188a2:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80188a4:	f388 8811 	msr	BASEPRI, r8
}
 80188a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80188ac:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 80188b0:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80188b4:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80188b6:	4622      	mov	r2, r4
 80188b8:	4639      	mov	r1, r7
 80188ba:	4628      	mov	r0, r5
 80188bc:	f7ff fd65 	bl	801838a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80188c0:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 80188c4:	d006      	beq.n	80188d4 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80188c6:	f109 0301 	add.w	r3, r9, #1
 80188ca:	b25b      	sxtb	r3, r3
 80188cc:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 80188d0:	2001      	movs	r0, #1
 80188d2:	e7e7      	b.n	80188a4 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80188d4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80188d6:	b90b      	cbnz	r3, 80188dc <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 80188d8:	2001      	movs	r0, #1
 80188da:	e7e3      	b.n	80188a4 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80188dc:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80188e0:	f000 ff50 	bl	8019784 <xTaskRemoveFromEventList>
 80188e4:	b118      	cbz	r0, 80188ee <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 80188e6:	b126      	cbz	r6, 80188f2 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80188e8:	2001      	movs	r0, #1
 80188ea:	6030      	str	r0, [r6, #0]
 80188ec:	e7da      	b.n	80188a4 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80188ee:	2001      	movs	r0, #1
 80188f0:	e7d8      	b.n	80188a4 <xQueueGenericSendFromISR+0x7c>
 80188f2:	2001      	movs	r0, #1
 80188f4:	e7d6      	b.n	80188a4 <xQueueGenericSendFromISR+0x7c>

080188f6 <xQueueReceive>:
{
 80188f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188f8:	b085      	sub	sp, #20
 80188fa:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80188fc:	b190      	cbz	r0, 8018924 <xQueueReceive+0x2e>
 80188fe:	460f      	mov	r7, r1
 8018900:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018902:	b1c1      	cbz	r1, 8018936 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018904:	f000 ffde 	bl	80198c4 <xTaskGetSchedulerState>
 8018908:	4606      	mov	r6, r0
 801890a:	bb00      	cbnz	r0, 801894e <xQueueReceive+0x58>
 801890c:	9b01      	ldr	r3, [sp, #4]
 801890e:	2b00      	cmp	r3, #0
 8018910:	d05e      	beq.n	80189d0 <xQueueReceive+0xda>
	__asm volatile
 8018912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018916:	f383 8811 	msr	BASEPRI, r3
 801891a:	f3bf 8f6f 	isb	sy
 801891e:	f3bf 8f4f 	dsb	sy
 8018922:	e7fe      	b.n	8018922 <xQueueReceive+0x2c>
 8018924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018928:	f383 8811 	msr	BASEPRI, r3
 801892c:	f3bf 8f6f 	isb	sy
 8018930:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8018934:	e7fe      	b.n	8018934 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018936:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018938:	2b00      	cmp	r3, #0
 801893a:	d0e3      	beq.n	8018904 <xQueueReceive+0xe>
 801893c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018940:	f383 8811 	msr	BASEPRI, r3
 8018944:	f3bf 8f6f 	isb	sy
 8018948:	f3bf 8f4f 	dsb	sy
 801894c:	e7fe      	b.n	801894c <xQueueReceive+0x56>
 801894e:	2600      	movs	r6, #0
 8018950:	e03e      	b.n	80189d0 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018952:	4639      	mov	r1, r7
 8018954:	4620      	mov	r0, r4
 8018956:	f7ff fd53 	bl	8018400 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801895a:	3d01      	subs	r5, #1
 801895c:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801895e:	6923      	ldr	r3, [r4, #16]
 8018960:	b923      	cbnz	r3, 801896c <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8018962:	f001 fb69 	bl	801a038 <vPortExitCritical>
				return pdPASS;
 8018966:	2001      	movs	r0, #1
}
 8018968:	b005      	add	sp, #20
 801896a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801896c:	f104 0010 	add.w	r0, r4, #16
 8018970:	f000 ff08 	bl	8019784 <xTaskRemoveFromEventList>
 8018974:	2800      	cmp	r0, #0
 8018976:	d0f4      	beq.n	8018962 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8018978:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801897c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018980:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018984:	f3bf 8f4f 	dsb	sy
 8018988:	f3bf 8f6f 	isb	sy
 801898c:	e7e9      	b.n	8018962 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 801898e:	f001 fb53 	bl	801a038 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8018992:	2000      	movs	r0, #0
 8018994:	e7e8      	b.n	8018968 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018996:	a802      	add	r0, sp, #8
 8018998:	f000 ff3a 	bl	8019810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801899c:	2601      	movs	r6, #1
 801899e:	e021      	b.n	80189e4 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 80189a0:	2300      	movs	r3, #0
 80189a2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80189a6:	e029      	b.n	80189fc <xQueueReceive+0x106>
 80189a8:	2300      	movs	r3, #0
 80189aa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80189ae:	e02b      	b.n	8018a08 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 80189b0:	4620      	mov	r0, r4
 80189b2:	f7ff fd37 	bl	8018424 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80189b6:	f000 fdbd 	bl	8019534 <xTaskResumeAll>
 80189ba:	e009      	b.n	80189d0 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 80189bc:	4620      	mov	r0, r4
 80189be:	f7ff fd31 	bl	8018424 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80189c2:	f000 fdb7 	bl	8019534 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80189c6:	4620      	mov	r0, r4
 80189c8:	f7ff fcd2 	bl	8018370 <prvIsQueueEmpty>
 80189cc:	2800      	cmp	r0, #0
 80189ce:	d13f      	bne.n	8018a50 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 80189d0:	f001 fb10 	bl	8019ff4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80189d4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80189d6:	2d00      	cmp	r5, #0
 80189d8:	d1bb      	bne.n	8018952 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80189da:	9b01      	ldr	r3, [sp, #4]
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d0d6      	beq.n	801898e <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 80189e0:	2e00      	cmp	r6, #0
 80189e2:	d0d8      	beq.n	8018996 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 80189e4:	f001 fb28 	bl	801a038 <vPortExitCritical>
		vTaskSuspendAll();
 80189e8:	f000 fd0a 	bl	8019400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80189ec:	f001 fb02 	bl	8019ff4 <vPortEnterCritical>
 80189f0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80189f4:	b25b      	sxtb	r3, r3
 80189f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80189fa:	d0d1      	beq.n	80189a0 <xQueueReceive+0xaa>
 80189fc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8018a00:	b25b      	sxtb	r3, r3
 8018a02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018a06:	d0cf      	beq.n	80189a8 <xQueueReceive+0xb2>
 8018a08:	f001 fb16 	bl	801a038 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018a0c:	a901      	add	r1, sp, #4
 8018a0e:	a802      	add	r0, sp, #8
 8018a10:	f000 ff0a 	bl	8019828 <xTaskCheckForTimeOut>
 8018a14:	2800      	cmp	r0, #0
 8018a16:	d1d1      	bne.n	80189bc <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018a18:	4620      	mov	r0, r4
 8018a1a:	f7ff fca9 	bl	8018370 <prvIsQueueEmpty>
 8018a1e:	2800      	cmp	r0, #0
 8018a20:	d0c6      	beq.n	80189b0 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018a22:	9901      	ldr	r1, [sp, #4]
 8018a24:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018a28:	f000 fe78 	bl	801971c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018a2c:	4620      	mov	r0, r4
 8018a2e:	f7ff fcf9 	bl	8018424 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018a32:	f000 fd7f 	bl	8019534 <xTaskResumeAll>
 8018a36:	2800      	cmp	r0, #0
 8018a38:	d1ca      	bne.n	80189d0 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8018a3a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018a42:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018a46:	f3bf 8f4f 	dsb	sy
 8018a4a:	f3bf 8f6f 	isb	sy
 8018a4e:	e7bf      	b.n	80189d0 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8018a50:	2000      	movs	r0, #0
 8018a52:	e789      	b.n	8018968 <xQueueReceive+0x72>

08018a54 <xQueueSemaphoreTake>:
{
 8018a54:	b570      	push	{r4, r5, r6, lr}
 8018a56:	b084      	sub	sp, #16
 8018a58:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8018a5a:	b158      	cbz	r0, 8018a74 <xQueueSemaphoreTake+0x20>
 8018a5c:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8018a5e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018a60:	b18b      	cbz	r3, 8018a86 <xQueueSemaphoreTake+0x32>
 8018a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a66:	f383 8811 	msr	BASEPRI, r3
 8018a6a:	f3bf 8f6f 	isb	sy
 8018a6e:	f3bf 8f4f 	dsb	sy
 8018a72:	e7fe      	b.n	8018a72 <xQueueSemaphoreTake+0x1e>
 8018a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a78:	f383 8811 	msr	BASEPRI, r3
 8018a7c:	f3bf 8f6f 	isb	sy
 8018a80:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8018a84:	e7fe      	b.n	8018a84 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018a86:	f000 ff1d 	bl	80198c4 <xTaskGetSchedulerState>
 8018a8a:	4605      	mov	r5, r0
 8018a8c:	b950      	cbnz	r0, 8018aa4 <xQueueSemaphoreTake+0x50>
 8018a8e:	9b01      	ldr	r3, [sp, #4]
 8018a90:	b15b      	cbz	r3, 8018aaa <xQueueSemaphoreTake+0x56>
 8018a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a96:	f383 8811 	msr	BASEPRI, r3
 8018a9a:	f3bf 8f6f 	isb	sy
 8018a9e:	f3bf 8f4f 	dsb	sy
 8018aa2:	e7fe      	b.n	8018aa2 <xQueueSemaphoreTake+0x4e>
 8018aa4:	2600      	movs	r6, #0
 8018aa6:	4635      	mov	r5, r6
 8018aa8:	e055      	b.n	8018b56 <xQueueSemaphoreTake+0x102>
 8018aaa:	4606      	mov	r6, r0
 8018aac:	e053      	b.n	8018b56 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8018aae:	3b01      	subs	r3, #1
 8018ab0:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018ab2:	6823      	ldr	r3, [r4, #0]
 8018ab4:	b13b      	cbz	r3, 8018ac6 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018ab6:	6923      	ldr	r3, [r4, #16]
 8018ab8:	b94b      	cbnz	r3, 8018ace <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 8018aba:	f001 fabd 	bl	801a038 <vPortExitCritical>
				return pdPASS;
 8018abe:	2601      	movs	r6, #1
}
 8018ac0:	4630      	mov	r0, r6
 8018ac2:	b004      	add	sp, #16
 8018ac4:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8018ac6:	f000 fff1 	bl	8019aac <pvTaskIncrementMutexHeldCount>
 8018aca:	60a0      	str	r0, [r4, #8]
 8018acc:	e7f3      	b.n	8018ab6 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018ace:	f104 0010 	add.w	r0, r4, #16
 8018ad2:	f000 fe57 	bl	8019784 <xTaskRemoveFromEventList>
 8018ad6:	2800      	cmp	r0, #0
 8018ad8:	d0ef      	beq.n	8018aba <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 8018ada:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018ae2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018ae6:	f3bf 8f4f 	dsb	sy
 8018aea:	f3bf 8f6f 	isb	sy
 8018aee:	e7e4      	b.n	8018aba <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8018af0:	b146      	cbz	r6, 8018b04 <xQueueSemaphoreTake+0xb0>
 8018af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018af6:	f383 8811 	msr	BASEPRI, r3
 8018afa:	f3bf 8f6f 	isb	sy
 8018afe:	f3bf 8f4f 	dsb	sy
 8018b02:	e7fe      	b.n	8018b02 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8018b04:	f001 fa98 	bl	801a038 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8018b08:	e7da      	b.n	8018ac0 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018b0a:	a802      	add	r0, sp, #8
 8018b0c:	f000 fe80 	bl	8019810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018b10:	2501      	movs	r5, #1
 8018b12:	e02a      	b.n	8018b6a <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8018b14:	2300      	movs	r3, #0
 8018b16:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018b1a:	e032      	b.n	8018b82 <xQueueSemaphoreTake+0x12e>
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8018b22:	e034      	b.n	8018b8e <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 8018b24:	f001 fa66 	bl	8019ff4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018b28:	68a0      	ldr	r0, [r4, #8]
 8018b2a:	f000 fedb 	bl	80198e4 <xTaskPriorityInherit>
 8018b2e:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8018b30:	f001 fa82 	bl	801a038 <vPortExitCritical>
 8018b34:	e03b      	b.n	8018bae <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 8018b36:	4620      	mov	r0, r4
 8018b38:	f7ff fc74 	bl	8018424 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018b3c:	f000 fcfa 	bl	8019534 <xTaskResumeAll>
 8018b40:	e009      	b.n	8018b56 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 8018b42:	4620      	mov	r0, r4
 8018b44:	f7ff fc6e 	bl	8018424 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018b48:	f000 fcf4 	bl	8019534 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018b4c:	4620      	mov	r0, r4
 8018b4e:	f7ff fc0f 	bl	8018370 <prvIsQueueEmpty>
 8018b52:	2800      	cmp	r0, #0
 8018b54:	d142      	bne.n	8018bdc <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 8018b56:	f001 fa4d 	bl	8019ff4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8018b5a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d1a6      	bne.n	8018aae <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8018b60:	9b01      	ldr	r3, [sp, #4]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d0c4      	beq.n	8018af0 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 8018b66:	2d00      	cmp	r5, #0
 8018b68:	d0cf      	beq.n	8018b0a <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 8018b6a:	f001 fa65 	bl	801a038 <vPortExitCritical>
		vTaskSuspendAll();
 8018b6e:	f000 fc47 	bl	8019400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018b72:	f001 fa3f 	bl	8019ff4 <vPortEnterCritical>
 8018b76:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8018b7a:	b25b      	sxtb	r3, r3
 8018b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018b80:	d0c8      	beq.n	8018b14 <xQueueSemaphoreTake+0xc0>
 8018b82:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8018b86:	b25b      	sxtb	r3, r3
 8018b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018b8c:	d0c6      	beq.n	8018b1c <xQueueSemaphoreTake+0xc8>
 8018b8e:	f001 fa53 	bl	801a038 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018b92:	a901      	add	r1, sp, #4
 8018b94:	a802      	add	r0, sp, #8
 8018b96:	f000 fe47 	bl	8019828 <xTaskCheckForTimeOut>
 8018b9a:	2800      	cmp	r0, #0
 8018b9c:	d1d1      	bne.n	8018b42 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018b9e:	4620      	mov	r0, r4
 8018ba0:	f7ff fbe6 	bl	8018370 <prvIsQueueEmpty>
 8018ba4:	2800      	cmp	r0, #0
 8018ba6:	d0c6      	beq.n	8018b36 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018ba8:	6823      	ldr	r3, [r4, #0]
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d0ba      	beq.n	8018b24 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018bae:	9901      	ldr	r1, [sp, #4]
 8018bb0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018bb4:	f000 fdb2 	bl	801971c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018bb8:	4620      	mov	r0, r4
 8018bba:	f7ff fc33 	bl	8018424 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018bbe:	f000 fcb9 	bl	8019534 <xTaskResumeAll>
 8018bc2:	2800      	cmp	r0, #0
 8018bc4:	d1c7      	bne.n	8018b56 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 8018bc6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018bce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018bd2:	f3bf 8f4f 	dsb	sy
 8018bd6:	f3bf 8f6f 	isb	sy
 8018bda:	e7bc      	b.n	8018b56 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 8018bdc:	b90e      	cbnz	r6, 8018be2 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 8018bde:	2600      	movs	r6, #0
 8018be0:	e76e      	b.n	8018ac0 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8018be2:	f001 fa07 	bl	8019ff4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8018be6:	4620      	mov	r0, r4
 8018be8:	f7ff fbab 	bl	8018342 <prvGetDisinheritPriorityAfterTimeout>
 8018bec:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8018bee:	68a0      	ldr	r0, [r4, #8]
 8018bf0:	f000 ff0c 	bl	8019a0c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8018bf4:	f001 fa20 	bl	801a038 <vPortExitCritical>
 8018bf8:	e7f1      	b.n	8018bde <xQueueSemaphoreTake+0x18a>

08018bfa <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8018bfa:	b180      	cbz	r0, 8018c1e <xQueueTakeMutexRecursive+0x24>
	{
 8018bfc:	b570      	push	{r4, r5, r6, lr}
 8018bfe:	460c      	mov	r4, r1
 8018c00:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8018c02:	6886      	ldr	r6, [r0, #8]
 8018c04:	f000 fe58 	bl	80198b8 <xTaskGetCurrentTaskHandle>
 8018c08:	4286      	cmp	r6, r0
 8018c0a:	d011      	beq.n	8018c30 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8018c0c:	4621      	mov	r1, r4
 8018c0e:	4628      	mov	r0, r5
 8018c10:	f7ff ff20 	bl	8018a54 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8018c14:	b180      	cbz	r0, 8018c38 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8018c16:	68eb      	ldr	r3, [r5, #12]
 8018c18:	3301      	adds	r3, #1
 8018c1a:	60eb      	str	r3, [r5, #12]
		return xReturn;
 8018c1c:	e00c      	b.n	8018c38 <xQueueTakeMutexRecursive+0x3e>
 8018c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c22:	f383 8811 	msr	BASEPRI, r3
 8018c26:	f3bf 8f6f 	isb	sy
 8018c2a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8018c2e:	e7fe      	b.n	8018c2e <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8018c30:	68eb      	ldr	r3, [r5, #12]
 8018c32:	3301      	adds	r3, #1
 8018c34:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 8018c36:	2001      	movs	r0, #1
	}
 8018c38:	bd70      	pop	{r4, r5, r6, pc}

08018c3a <xQueuePeek>:
{
 8018c3a:	b570      	push	{r4, r5, r6, lr}
 8018c3c:	b084      	sub	sp, #16
 8018c3e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8018c40:	b190      	cbz	r0, 8018c68 <xQueuePeek+0x2e>
 8018c42:	460e      	mov	r6, r1
 8018c44:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018c46:	b1c1      	cbz	r1, 8018c7a <xQueuePeek+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018c48:	f000 fe3c 	bl	80198c4 <xTaskGetSchedulerState>
 8018c4c:	4605      	mov	r5, r0
 8018c4e:	bb00      	cbnz	r0, 8018c92 <xQueuePeek+0x58>
 8018c50:	9b01      	ldr	r3, [sp, #4]
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	d05e      	beq.n	8018d14 <xQueuePeek+0xda>
 8018c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c5a:	f383 8811 	msr	BASEPRI, r3
 8018c5e:	f3bf 8f6f 	isb	sy
 8018c62:	f3bf 8f4f 	dsb	sy
 8018c66:	e7fe      	b.n	8018c66 <xQueuePeek+0x2c>
 8018c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c6c:	f383 8811 	msr	BASEPRI, r3
 8018c70:	f3bf 8f6f 	isb	sy
 8018c74:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8018c78:	e7fe      	b.n	8018c78 <xQueuePeek+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018c7a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d0e3      	beq.n	8018c48 <xQueuePeek+0xe>
 8018c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c84:	f383 8811 	msr	BASEPRI, r3
 8018c88:	f3bf 8f6f 	isb	sy
 8018c8c:	f3bf 8f4f 	dsb	sy
 8018c90:	e7fe      	b.n	8018c90 <xQueuePeek+0x56>
 8018c92:	2500      	movs	r5, #0
 8018c94:	e03e      	b.n	8018d14 <xQueuePeek+0xda>
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8018c96:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018c98:	4631      	mov	r1, r6
 8018c9a:	4620      	mov	r0, r4
 8018c9c:	f7ff fbb0 	bl	8018400 <prvCopyDataFromQueue>
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8018ca0:	60e5      	str	r5, [r4, #12]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018ca2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018ca4:	b923      	cbnz	r3, 8018cb0 <xQueuePeek+0x76>
				taskEXIT_CRITICAL();
 8018ca6:	f001 f9c7 	bl	801a038 <vPortExitCritical>
				return pdPASS;
 8018caa:	2001      	movs	r0, #1
}
 8018cac:	b004      	add	sp, #16
 8018cae:	bd70      	pop	{r4, r5, r6, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018cb0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018cb4:	f000 fd66 	bl	8019784 <xTaskRemoveFromEventList>
 8018cb8:	2800      	cmp	r0, #0
 8018cba:	d0f4      	beq.n	8018ca6 <xQueuePeek+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8018cbc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018cc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018cc4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018cc8:	f3bf 8f4f 	dsb	sy
 8018ccc:	f3bf 8f6f 	isb	sy
 8018cd0:	e7e9      	b.n	8018ca6 <xQueuePeek+0x6c>
					taskEXIT_CRITICAL();
 8018cd2:	f001 f9b1 	bl	801a038 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8018cd6:	2000      	movs	r0, #0
 8018cd8:	e7e8      	b.n	8018cac <xQueuePeek+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018cda:	a802      	add	r0, sp, #8
 8018cdc:	f000 fd98 	bl	8019810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018ce0:	2501      	movs	r5, #1
 8018ce2:	e021      	b.n	8018d28 <xQueuePeek+0xee>
		prvLockQueue( pxQueue );
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018cea:	e029      	b.n	8018d40 <xQueuePeek+0x106>
 8018cec:	2300      	movs	r3, #0
 8018cee:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8018cf2:	e02b      	b.n	8018d4c <xQueuePeek+0x112>
				prvUnlockQueue( pxQueue );
 8018cf4:	4620      	mov	r0, r4
 8018cf6:	f7ff fb95 	bl	8018424 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018cfa:	f000 fc1b 	bl	8019534 <xTaskResumeAll>
 8018cfe:	e009      	b.n	8018d14 <xQueuePeek+0xda>
			prvUnlockQueue( pxQueue );
 8018d00:	4620      	mov	r0, r4
 8018d02:	f7ff fb8f 	bl	8018424 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018d06:	f000 fc15 	bl	8019534 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018d0a:	4620      	mov	r0, r4
 8018d0c:	f7ff fb30 	bl	8018370 <prvIsQueueEmpty>
 8018d10:	2800      	cmp	r0, #0
 8018d12:	d13f      	bne.n	8018d94 <xQueuePeek+0x15a>
		taskENTER_CRITICAL();
 8018d14:	f001 f96e 	bl	8019ff4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018d18:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d1bb      	bne.n	8018c96 <xQueuePeek+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8018d1e:	9b01      	ldr	r3, [sp, #4]
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d0d6      	beq.n	8018cd2 <xQueuePeek+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8018d24:	2d00      	cmp	r5, #0
 8018d26:	d0d8      	beq.n	8018cda <xQueuePeek+0xa0>
		taskEXIT_CRITICAL();
 8018d28:	f001 f986 	bl	801a038 <vPortExitCritical>
		vTaskSuspendAll();
 8018d2c:	f000 fb68 	bl	8019400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018d30:	f001 f960 	bl	8019ff4 <vPortEnterCritical>
 8018d34:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8018d38:	b25b      	sxtb	r3, r3
 8018d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018d3e:	d0d1      	beq.n	8018ce4 <xQueuePeek+0xaa>
 8018d40:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8018d44:	b25b      	sxtb	r3, r3
 8018d46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018d4a:	d0cf      	beq.n	8018cec <xQueuePeek+0xb2>
 8018d4c:	f001 f974 	bl	801a038 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018d50:	a901      	add	r1, sp, #4
 8018d52:	a802      	add	r0, sp, #8
 8018d54:	f000 fd68 	bl	8019828 <xTaskCheckForTimeOut>
 8018d58:	2800      	cmp	r0, #0
 8018d5a:	d1d1      	bne.n	8018d00 <xQueuePeek+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018d5c:	4620      	mov	r0, r4
 8018d5e:	f7ff fb07 	bl	8018370 <prvIsQueueEmpty>
 8018d62:	2800      	cmp	r0, #0
 8018d64:	d0c6      	beq.n	8018cf4 <xQueuePeek+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018d66:	9901      	ldr	r1, [sp, #4]
 8018d68:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018d6c:	f000 fcd6 	bl	801971c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018d70:	4620      	mov	r0, r4
 8018d72:	f7ff fb57 	bl	8018424 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018d76:	f000 fbdd 	bl	8019534 <xTaskResumeAll>
 8018d7a:	2800      	cmp	r0, #0
 8018d7c:	d1ca      	bne.n	8018d14 <xQueuePeek+0xda>
					portYIELD_WITHIN_API();
 8018d7e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018d86:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018d8a:	f3bf 8f4f 	dsb	sy
 8018d8e:	f3bf 8f6f 	isb	sy
 8018d92:	e7bf      	b.n	8018d14 <xQueuePeek+0xda>
				return errQUEUE_EMPTY;
 8018d94:	2000      	movs	r0, #0
 8018d96:	e789      	b.n	8018cac <xQueuePeek+0x72>

08018d98 <xQueueReceiveFromISR>:
{
 8018d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8018d9c:	b1b0      	cbz	r0, 8018dcc <xQueueReceiveFromISR+0x34>
 8018d9e:	460d      	mov	r5, r1
 8018da0:	4690      	mov	r8, r2
 8018da2:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018da4:	b1d9      	cbz	r1, 8018dde <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018da6:	f001 fa4b 	bl	801a240 <vPortValidateInterruptPriority>
	__asm volatile
 8018daa:	f3ef 8711 	mrs	r7, BASEPRI
 8018dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018db2:	f383 8811 	msr	BASEPRI, r3
 8018db6:	f3bf 8f6f 	isb	sy
 8018dba:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018dbe:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018dc0:	b9ce      	cbnz	r6, 8018df6 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8018dc2:	2000      	movs	r0, #0
	__asm volatile
 8018dc4:	f387 8811 	msr	BASEPRI, r7
}
 8018dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8018dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018dd0:	f383 8811 	msr	BASEPRI, r3
 8018dd4:	f3bf 8f6f 	isb	sy
 8018dd8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8018ddc:	e7fe      	b.n	8018ddc <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018dde:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d0e0      	beq.n	8018da6 <xQueueReceiveFromISR+0xe>
 8018de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018de8:	f383 8811 	msr	BASEPRI, r3
 8018dec:	f3bf 8f6f 	isb	sy
 8018df0:	f3bf 8f4f 	dsb	sy
 8018df4:	e7fe      	b.n	8018df4 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8018df6:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 8018dfa:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018dfe:	4629      	mov	r1, r5
 8018e00:	4620      	mov	r0, r4
 8018e02:	f7ff fafd 	bl	8018400 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018e06:	1e73      	subs	r3, r6, #1
 8018e08:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8018e0a:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8018e0e:	d006      	beq.n	8018e1e <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8018e10:	f109 0301 	add.w	r3, r9, #1
 8018e14:	b25b      	sxtb	r3, r3
 8018e16:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8018e1a:	2001      	movs	r0, #1
 8018e1c:	e7d2      	b.n	8018dc4 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018e1e:	6923      	ldr	r3, [r4, #16]
 8018e20:	b90b      	cbnz	r3, 8018e26 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8018e22:	2001      	movs	r0, #1
 8018e24:	e7ce      	b.n	8018dc4 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018e26:	f104 0010 	add.w	r0, r4, #16
 8018e2a:	f000 fcab 	bl	8019784 <xTaskRemoveFromEventList>
 8018e2e:	b130      	cbz	r0, 8018e3e <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 8018e30:	f1b8 0f00 	cmp.w	r8, #0
 8018e34:	d005      	beq.n	8018e42 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8018e36:	2001      	movs	r0, #1
 8018e38:	f8c8 0000 	str.w	r0, [r8]
 8018e3c:	e7c2      	b.n	8018dc4 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8018e3e:	2001      	movs	r0, #1
 8018e40:	e7c0      	b.n	8018dc4 <xQueueReceiveFromISR+0x2c>
 8018e42:	2001      	movs	r0, #1
 8018e44:	e7be      	b.n	8018dc4 <xQueueReceiveFromISR+0x2c>

08018e46 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8018e46:	b140      	cbz	r0, 8018e5a <uxQueueMessagesWaiting+0x14>
{
 8018e48:	b510      	push	{r4, lr}
 8018e4a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8018e4c:	f001 f8d2 	bl	8019ff4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8018e50:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8018e52:	f001 f8f1 	bl	801a038 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8018e56:	4620      	mov	r0, r4
 8018e58:	bd10      	pop	{r4, pc}
 8018e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e5e:	f383 8811 	msr	BASEPRI, r3
 8018e62:	f3bf 8f6f 	isb	sy
 8018e66:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 8018e6a:	e7fe      	b.n	8018e6a <uxQueueMessagesWaiting+0x24>

08018e6c <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8018e6c:	b108      	cbz	r0, 8018e72 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 8018e6e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8018e70:	4770      	bx	lr
 8018e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e76:	f383 8811 	msr	BASEPRI, r3
 8018e7a:	f3bf 8f6f 	isb	sy
 8018e7e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8018e82:	e7fe      	b.n	8018e82 <uxQueueMessagesWaitingFromISR+0x16>

08018e84 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018e84:	2300      	movs	r3, #0
 8018e86:	2b07      	cmp	r3, #7
 8018e88:	d80c      	bhi.n	8018ea4 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018e8a:	4a07      	ldr	r2, [pc, #28]	@ (8018ea8 <vQueueAddToRegistry+0x24>)
 8018e8c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8018e90:	b10a      	cbz	r2, 8018e96 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018e92:	3301      	adds	r3, #1
 8018e94:	e7f7      	b.n	8018e86 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018e96:	4a04      	ldr	r2, [pc, #16]	@ (8018ea8 <vQueueAddToRegistry+0x24>)
 8018e98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8018e9c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018ea0:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8018ea2:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018ea4:	4770      	bx	lr
 8018ea6:	bf00      	nop
 8018ea8:	20003654 	.word	0x20003654

08018eac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018eac:	b570      	push	{r4, r5, r6, lr}
 8018eae:	4604      	mov	r4, r0
 8018eb0:	460d      	mov	r5, r1
 8018eb2:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8018eb4:	f001 f89e 	bl	8019ff4 <vPortEnterCritical>
 8018eb8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8018ebc:	b25b      	sxtb	r3, r3
 8018ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018ec2:	d00d      	beq.n	8018ee0 <vQueueWaitForMessageRestricted+0x34>
 8018ec4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8018ec8:	b25b      	sxtb	r3, r3
 8018eca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018ece:	d00b      	beq.n	8018ee8 <vQueueWaitForMessageRestricted+0x3c>
 8018ed0:	f001 f8b2 	bl	801a038 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018ed4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018ed6:	b15b      	cbz	r3, 8018ef0 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8018ed8:	4620      	mov	r0, r4
 8018eda:	f7ff faa3 	bl	8018424 <prvUnlockQueue>
	}
 8018ede:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8018ee0:	2300      	movs	r3, #0
 8018ee2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018ee6:	e7ed      	b.n	8018ec4 <vQueueWaitForMessageRestricted+0x18>
 8018ee8:	2300      	movs	r3, #0
 8018eea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8018eee:	e7ef      	b.n	8018ed0 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018ef0:	4632      	mov	r2, r6
 8018ef2:	4629      	mov	r1, r5
 8018ef4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018ef8:	f000 fc28 	bl	801974c <vTaskPlaceOnEventListRestricted>
 8018efc:	e7ec      	b.n	8018ed8 <vQueueWaitForMessageRestricted+0x2c>
	...

08018f00 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018f00:	4b08      	ldr	r3, [pc, #32]	@ (8018f24 <prvResetNextTaskUnblockTime+0x24>)
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	b923      	cbnz	r3, 8018f12 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018f08:	4b07      	ldr	r3, [pc, #28]	@ (8018f28 <prvResetNextTaskUnblockTime+0x28>)
 8018f0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018f0e:	601a      	str	r2, [r3, #0]
 8018f10:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018f12:	4b04      	ldr	r3, [pc, #16]	@ (8018f24 <prvResetNextTaskUnblockTime+0x24>)
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	68db      	ldr	r3, [r3, #12]
 8018f18:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018f1a:	685a      	ldr	r2, [r3, #4]
 8018f1c:	4b02      	ldr	r3, [pc, #8]	@ (8018f28 <prvResetNextTaskUnblockTime+0x28>)
 8018f1e:	601a      	str	r2, [r3, #0]
	}
}
 8018f20:	4770      	bx	lr
 8018f22:	bf00      	nop
 8018f24:	20003704 	.word	0x20003704
 8018f28:	2000369c 	.word	0x2000369c

08018f2c <prvInitialiseNewTask>:
{
 8018f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f30:	4680      	mov	r8, r0
 8018f32:	460d      	mov	r5, r1
 8018f34:	4617      	mov	r7, r2
 8018f36:	4699      	mov	r9, r3
 8018f38:	9e08      	ldr	r6, [sp, #32]
 8018f3a:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8018f3e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018f40:	0092      	lsls	r2, r2, #2
 8018f42:	21a5      	movs	r1, #165	@ 0xa5
 8018f44:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8018f46:	f013 f99b 	bl	802c280 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018f4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018f4c:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8018f50:	3a01      	subs	r2, #1
 8018f52:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018f56:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8018f5a:	2d00      	cmp	r5, #0
 8018f5c:	d061      	beq.n	8019022 <prvInitialiseNewTask+0xf6>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018f5e:	f04f 0c00 	mov.w	ip, #0
 8018f62:	f1bc 0f0f 	cmp.w	ip, #15
 8018f66:	d809      	bhi.n	8018f7c <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018f68:	f815 300c 	ldrb.w	r3, [r5, ip]
 8018f6c:	eb04 020c 	add.w	r2, r4, ip
 8018f70:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8018f74:	b113      	cbz	r3, 8018f7c <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018f76:	f10c 0c01 	add.w	ip, ip, #1
 8018f7a:	e7f2      	b.n	8018f62 <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018f7c:	2300      	movs	r3, #0
 8018f7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018f82:	2e37      	cmp	r6, #55	@ 0x37
 8018f84:	d900      	bls.n	8018f88 <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018f86:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8018f88:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8018f8a:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018f8c:	2500      	movs	r5, #0
 8018f8e:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8018f90:	1d20      	adds	r0, r4, #4
 8018f92:	f7ff f99c 	bl	80182ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018f96:	f104 0018 	add.w	r0, r4, #24
 8018f9a:	f7ff f998 	bl	80182ce <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018f9e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018fa0:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8018fa4:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018fa6:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8018fa8:	f8c4 5178 	str.w	r5, [r4, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018fac:	f884 517c 	strb.w	r5, [r4, #380]	@ 0x17c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8018fb0:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8018fb4:	4629      	mov	r1, r5
 8018fb6:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018fba:	f013 f961 	bl	802c280 <memset>
 8018fbe:	4b1b      	ldr	r3, [pc, #108]	@ (801902c <prvInitialiseNewTask+0x100>)
 8018fc0:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8018fc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018fc6:	6622      	str	r2, [r4, #96]	@ 0x60
 8018fc8:	33d0      	adds	r3, #208	@ 0xd0
 8018fca:	6663      	str	r3, [r4, #100]	@ 0x64
 8018fcc:	2201      	movs	r2, #1
 8018fce:	2300      	movs	r3, #0
 8018fd0:	e9c4 233c 	strd	r2, r3, [r4, #240]	@ 0xf0
 8018fd4:	f243 330e 	movw	r3, #13070	@ 0x330e
 8018fd8:	f8a4 30f8 	strh.w	r3, [r4, #248]	@ 0xf8
 8018fdc:	f64a 33cd 	movw	r3, #43981	@ 0xabcd
 8018fe0:	f8a4 30fa 	strh.w	r3, [r4, #250]	@ 0xfa
 8018fe4:	f241 2334 	movw	r3, #4660	@ 0x1234
 8018fe8:	f8a4 30fc 	strh.w	r3, [r4, #252]	@ 0xfc
 8018fec:	f24e 636d 	movw	r3, #58989	@ 0xe66d
 8018ff0:	f8a4 30fe 	strh.w	r3, [r4, #254]	@ 0xfe
 8018ff4:	f64d 63ec 	movw	r3, #57068	@ 0xdeec
 8018ff8:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 8018ffc:	2305      	movs	r3, #5
 8018ffe:	f8a4 3102 	strh.w	r3, [r4, #258]	@ 0x102
 8019002:	230b      	movs	r3, #11
 8019004:	f8a4 3104 	strh.w	r3, [r4, #260]	@ 0x104
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019008:	464a      	mov	r2, r9
 801900a:	4641      	mov	r1, r8
 801900c:	4638      	mov	r0, r7
 801900e:	f000 ffc3 	bl	8019f98 <pxPortInitialiseStack>
 8019012:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8019014:	f1ba 0f00 	cmp.w	sl, #0
 8019018:	d001      	beq.n	801901e <prvInitialiseNewTask+0xf2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801901a:	f8ca 4000 	str.w	r4, [sl]
}
 801901e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8019022:	2300      	movs	r3, #0
 8019024:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8019028:	e7ab      	b.n	8018f82 <prvInitialiseNewTask+0x56>
 801902a:	bf00      	nop
 801902c:	20019ecc 	.word	0x20019ecc

08019030 <prvInitialiseTaskLists>:
{
 8019030:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019032:	2400      	movs	r4, #0
 8019034:	e007      	b.n	8019046 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019036:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 801903a:	0093      	lsls	r3, r2, #2
 801903c:	480e      	ldr	r0, [pc, #56]	@ (8019078 <prvInitialiseTaskLists+0x48>)
 801903e:	4418      	add	r0, r3
 8019040:	f7ff f93a 	bl	80182b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019044:	3401      	adds	r4, #1
 8019046:	2c37      	cmp	r4, #55	@ 0x37
 8019048:	d9f5      	bls.n	8019036 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 801904a:	4d0c      	ldr	r5, [pc, #48]	@ (801907c <prvInitialiseTaskLists+0x4c>)
 801904c:	4628      	mov	r0, r5
 801904e:	f7ff f933 	bl	80182b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8019052:	4c0b      	ldr	r4, [pc, #44]	@ (8019080 <prvInitialiseTaskLists+0x50>)
 8019054:	4620      	mov	r0, r4
 8019056:	f7ff f92f 	bl	80182b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801905a:	480a      	ldr	r0, [pc, #40]	@ (8019084 <prvInitialiseTaskLists+0x54>)
 801905c:	f7ff f92c 	bl	80182b8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8019060:	4809      	ldr	r0, [pc, #36]	@ (8019088 <prvInitialiseTaskLists+0x58>)
 8019062:	f7ff f929 	bl	80182b8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8019066:	4809      	ldr	r0, [pc, #36]	@ (801908c <prvInitialiseTaskLists+0x5c>)
 8019068:	f7ff f926 	bl	80182b8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 801906c:	4b08      	ldr	r3, [pc, #32]	@ (8019090 <prvInitialiseTaskLists+0x60>)
 801906e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019070:	4b08      	ldr	r3, [pc, #32]	@ (8019094 <prvInitialiseTaskLists+0x64>)
 8019072:	601c      	str	r4, [r3, #0]
}
 8019074:	bd38      	pop	{r3, r4, r5, pc}
 8019076:	bf00      	nop
 8019078:	20003730 	.word	0x20003730
 801907c:	2000371c 	.word	0x2000371c
 8019080:	20003708 	.word	0x20003708
 8019084:	200036ec 	.word	0x200036ec
 8019088:	200036d8 	.word	0x200036d8
 801908c:	200036c0 	.word	0x200036c0
 8019090:	20003704 	.word	0x20003704
 8019094:	20003700 	.word	0x20003700

08019098 <prvAddNewTaskToReadyList>:
{
 8019098:	b510      	push	{r4, lr}
 801909a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801909c:	f000 ffaa 	bl	8019ff4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80190a0:	4a22      	ldr	r2, [pc, #136]	@ (801912c <prvAddNewTaskToReadyList+0x94>)
 80190a2:	6813      	ldr	r3, [r2, #0]
 80190a4:	3301      	adds	r3, #1
 80190a6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80190a8:	4b21      	ldr	r3, [pc, #132]	@ (8019130 <prvAddNewTaskToReadyList+0x98>)
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	b15b      	cbz	r3, 80190c6 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80190ae:	4b21      	ldr	r3, [pc, #132]	@ (8019134 <prvAddNewTaskToReadyList+0x9c>)
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	b96b      	cbnz	r3, 80190d0 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80190b4:	4b1e      	ldr	r3, [pc, #120]	@ (8019130 <prvAddNewTaskToReadyList+0x98>)
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80190ba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80190bc:	429a      	cmp	r2, r3
 80190be:	d807      	bhi.n	80190d0 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 80190c0:	4b1b      	ldr	r3, [pc, #108]	@ (8019130 <prvAddNewTaskToReadyList+0x98>)
 80190c2:	601c      	str	r4, [r3, #0]
 80190c4:	e004      	b.n	80190d0 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 80190c6:	4b1a      	ldr	r3, [pc, #104]	@ (8019130 <prvAddNewTaskToReadyList+0x98>)
 80190c8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80190ca:	6813      	ldr	r3, [r2, #0]
 80190cc:	2b01      	cmp	r3, #1
 80190ce:	d029      	beq.n	8019124 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 80190d0:	4a19      	ldr	r2, [pc, #100]	@ (8019138 <prvAddNewTaskToReadyList+0xa0>)
 80190d2:	6813      	ldr	r3, [r2, #0]
 80190d4:	3301      	adds	r3, #1
 80190d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80190d8:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80190da:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80190dc:	4b17      	ldr	r3, [pc, #92]	@ (801913c <prvAddNewTaskToReadyList+0xa4>)
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	4298      	cmp	r0, r3
 80190e2:	d901      	bls.n	80190e8 <prvAddNewTaskToReadyList+0x50>
 80190e4:	4b15      	ldr	r3, [pc, #84]	@ (801913c <prvAddNewTaskToReadyList+0xa4>)
 80190e6:	6018      	str	r0, [r3, #0]
 80190e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80190ec:	1d21      	adds	r1, r4, #4
 80190ee:	4b14      	ldr	r3, [pc, #80]	@ (8019140 <prvAddNewTaskToReadyList+0xa8>)
 80190f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80190f4:	f7ff f8ee 	bl	80182d4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80190f8:	f000 ff9e 	bl	801a038 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80190fc:	4b0d      	ldr	r3, [pc, #52]	@ (8019134 <prvAddNewTaskToReadyList+0x9c>)
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	b17b      	cbz	r3, 8019122 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019102:	4b0b      	ldr	r3, [pc, #44]	@ (8019130 <prvAddNewTaskToReadyList+0x98>)
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019108:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801910a:	429a      	cmp	r2, r3
 801910c:	d209      	bcs.n	8019122 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 801910e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019116:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801911a:	f3bf 8f4f 	dsb	sy
 801911e:	f3bf 8f6f 	isb	sy
}
 8019122:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8019124:	f7ff ff84 	bl	8019030 <prvInitialiseTaskLists>
 8019128:	e7d2      	b.n	80190d0 <prvAddNewTaskToReadyList+0x38>
 801912a:	bf00      	nop
 801912c:	200036bc 	.word	0x200036bc
 8019130:	20003b90 	.word	0x20003b90
 8019134:	200036b0 	.word	0x200036b0
 8019138:	200036a0 	.word	0x200036a0
 801913c:	200036b4 	.word	0x200036b4
 8019140:	20003730 	.word	0x20003730

08019144 <prvDeleteTCB>:
	{
 8019144:	b510      	push	{r4, lr}
 8019146:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8019148:	3058      	adds	r0, #88	@ 0x58
 801914a:	f014 fa3b 	bl	802d5c4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801914e:	f894 317d 	ldrb.w	r3, [r4, #381]	@ 0x17d
 8019152:	b163      	cbz	r3, 801916e <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019154:	2b01      	cmp	r3, #1
 8019156:	d011      	beq.n	801917c <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019158:	2b02      	cmp	r3, #2
 801915a:	d00e      	beq.n	801917a <prvDeleteTCB+0x36>
 801915c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019160:	f383 8811 	msr	BASEPRI, r3
 8019164:	f3bf 8f6f 	isb	sy
 8019168:	f3bf 8f4f 	dsb	sy
 801916c:	e7fe      	b.n	801916c <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 801916e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8019170:	f001 f97c 	bl	801a46c <vPortFree>
				vPortFree( pxTCB );
 8019174:	4620      	mov	r0, r4
 8019176:	f001 f979 	bl	801a46c <vPortFree>
	}
 801917a:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 801917c:	4620      	mov	r0, r4
 801917e:	f001 f975 	bl	801a46c <vPortFree>
 8019182:	e7fa      	b.n	801917a <prvDeleteTCB+0x36>

08019184 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019184:	4b0f      	ldr	r3, [pc, #60]	@ (80191c4 <prvCheckTasksWaitingTermination+0x40>)
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	b1d3      	cbz	r3, 80191c0 <prvCheckTasksWaitingTermination+0x3c>
{
 801918a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 801918c:	f000 ff32 	bl	8019ff4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019190:	4b0d      	ldr	r3, [pc, #52]	@ (80191c8 <prvCheckTasksWaitingTermination+0x44>)
 8019192:	68db      	ldr	r3, [r3, #12]
 8019194:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019196:	1d20      	adds	r0, r4, #4
 8019198:	f7ff f8c0 	bl	801831c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801919c:	4a0b      	ldr	r2, [pc, #44]	@ (80191cc <prvCheckTasksWaitingTermination+0x48>)
 801919e:	6813      	ldr	r3, [r2, #0]
 80191a0:	3b01      	subs	r3, #1
 80191a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80191a4:	4a07      	ldr	r2, [pc, #28]	@ (80191c4 <prvCheckTasksWaitingTermination+0x40>)
 80191a6:	6813      	ldr	r3, [r2, #0]
 80191a8:	3b01      	subs	r3, #1
 80191aa:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80191ac:	f000 ff44 	bl	801a038 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80191b0:	4620      	mov	r0, r4
 80191b2:	f7ff ffc7 	bl	8019144 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80191b6:	4b03      	ldr	r3, [pc, #12]	@ (80191c4 <prvCheckTasksWaitingTermination+0x40>)
 80191b8:	681b      	ldr	r3, [r3, #0]
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d1e6      	bne.n	801918c <prvCheckTasksWaitingTermination+0x8>
}
 80191be:	bd10      	pop	{r4, pc}
 80191c0:	4770      	bx	lr
 80191c2:	bf00      	nop
 80191c4:	200036d4 	.word	0x200036d4
 80191c8:	200036d8 	.word	0x200036d8
 80191cc:	200036bc 	.word	0x200036bc

080191d0 <prvIdleTask>:
{
 80191d0:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80191d2:	f7ff ffd7 	bl	8019184 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80191d6:	4b07      	ldr	r3, [pc, #28]	@ (80191f4 <prvIdleTask+0x24>)
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	2b01      	cmp	r3, #1
 80191dc:	d9f9      	bls.n	80191d2 <prvIdleTask+0x2>
				taskYIELD();
 80191de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80191e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80191e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80191ea:	f3bf 8f4f 	dsb	sy
 80191ee:	f3bf 8f6f 	isb	sy
 80191f2:	e7ee      	b.n	80191d2 <prvIdleTask+0x2>
 80191f4:	20003730 	.word	0x20003730

080191f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80191f8:	b570      	push	{r4, r5, r6, lr}
 80191fa:	4604      	mov	r4, r0
 80191fc:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80191fe:	4b17      	ldr	r3, [pc, #92]	@ (801925c <prvAddCurrentTaskToDelayedList+0x64>)
 8019200:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019202:	4b17      	ldr	r3, [pc, #92]	@ (8019260 <prvAddCurrentTaskToDelayedList+0x68>)
 8019204:	6818      	ldr	r0, [r3, #0]
 8019206:	3004      	adds	r0, #4
 8019208:	f7ff f888 	bl	801831c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801920c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8019210:	d00d      	beq.n	801922e <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019212:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019214:	4b12      	ldr	r3, [pc, #72]	@ (8019260 <prvAddCurrentTaskToDelayedList+0x68>)
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 801921a:	42a6      	cmp	r6, r4
 801921c:	d910      	bls.n	8019240 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801921e:	4b11      	ldr	r3, [pc, #68]	@ (8019264 <prvAddCurrentTaskToDelayedList+0x6c>)
 8019220:	6818      	ldr	r0, [r3, #0]
 8019222:	4b0f      	ldr	r3, [pc, #60]	@ (8019260 <prvAddCurrentTaskToDelayedList+0x68>)
 8019224:	6819      	ldr	r1, [r3, #0]
 8019226:	3104      	adds	r1, #4
 8019228:	f7ff f85f 	bl	80182ea <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801922c:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801922e:	2d00      	cmp	r5, #0
 8019230:	d0ef      	beq.n	8019212 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019232:	4b0b      	ldr	r3, [pc, #44]	@ (8019260 <prvAddCurrentTaskToDelayedList+0x68>)
 8019234:	6819      	ldr	r1, [r3, #0]
 8019236:	3104      	adds	r1, #4
 8019238:	480b      	ldr	r0, [pc, #44]	@ (8019268 <prvAddCurrentTaskToDelayedList+0x70>)
 801923a:	f7ff f84b 	bl	80182d4 <vListInsertEnd>
 801923e:	e7f5      	b.n	801922c <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019240:	4b0a      	ldr	r3, [pc, #40]	@ (801926c <prvAddCurrentTaskToDelayedList+0x74>)
 8019242:	6818      	ldr	r0, [r3, #0]
 8019244:	4b06      	ldr	r3, [pc, #24]	@ (8019260 <prvAddCurrentTaskToDelayedList+0x68>)
 8019246:	6819      	ldr	r1, [r3, #0]
 8019248:	3104      	adds	r1, #4
 801924a:	f7ff f84e 	bl	80182ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801924e:	4b08      	ldr	r3, [pc, #32]	@ (8019270 <prvAddCurrentTaskToDelayedList+0x78>)
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	42a3      	cmp	r3, r4
 8019254:	d9ea      	bls.n	801922c <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8019256:	4b06      	ldr	r3, [pc, #24]	@ (8019270 <prvAddCurrentTaskToDelayedList+0x78>)
 8019258:	601c      	str	r4, [r3, #0]
}
 801925a:	e7e7      	b.n	801922c <prvAddCurrentTaskToDelayedList+0x34>
 801925c:	200036b8 	.word	0x200036b8
 8019260:	20003b90 	.word	0x20003b90
 8019264:	20003700 	.word	0x20003700
 8019268:	200036c0 	.word	0x200036c0
 801926c:	20003704 	.word	0x20003704
 8019270:	2000369c 	.word	0x2000369c

08019274 <xTaskCreateStatic>:
	{
 8019274:	b530      	push	{r4, r5, lr}
 8019276:	b087      	sub	sp, #28
 8019278:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 801927a:	b18c      	cbz	r4, 80192a0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801927c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801927e:	b1c5      	cbz	r5, 80192b2 <xTaskCreateStatic+0x3e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8019280:	f44f 75c0 	mov.w	r5, #384	@ 0x180
 8019284:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019286:	9d04      	ldr	r5, [sp, #16]
 8019288:	f5b5 7fc0 	cmp.w	r5, #384	@ 0x180
 801928c:	d01a      	beq.n	80192c4 <xTaskCreateStatic+0x50>
 801928e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019292:	f383 8811 	msr	BASEPRI, r3
 8019296:	f3bf 8f6f 	isb	sy
 801929a:	f3bf 8f4f 	dsb	sy
 801929e:	e7fe      	b.n	801929e <xTaskCreateStatic+0x2a>
 80192a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192a4:	f383 8811 	msr	BASEPRI, r3
 80192a8:	f3bf 8f6f 	isb	sy
 80192ac:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80192b0:	e7fe      	b.n	80192b0 <xTaskCreateStatic+0x3c>
 80192b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192b6:	f383 8811 	msr	BASEPRI, r3
 80192ba:	f3bf 8f6f 	isb	sy
 80192be:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80192c2:	e7fe      	b.n	80192c2 <xTaskCreateStatic+0x4e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80192c4:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80192c6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80192c8:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80192ca:	2402      	movs	r4, #2
 80192cc:	f885 417d 	strb.w	r4, [r5, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80192d0:	2400      	movs	r4, #0
 80192d2:	9403      	str	r4, [sp, #12]
 80192d4:	9502      	str	r5, [sp, #8]
 80192d6:	ac05      	add	r4, sp, #20
 80192d8:	9401      	str	r4, [sp, #4]
 80192da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80192dc:	9400      	str	r4, [sp, #0]
 80192de:	f7ff fe25 	bl	8018f2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80192e2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80192e4:	f7ff fed8 	bl	8019098 <prvAddNewTaskToReadyList>
	}
 80192e8:	9805      	ldr	r0, [sp, #20]
 80192ea:	b007      	add	sp, #28
 80192ec:	bd30      	pop	{r4, r5, pc}

080192ee <xTaskCreate>:
	{
 80192ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192f2:	b085      	sub	sp, #20
 80192f4:	4607      	mov	r7, r0
 80192f6:	4688      	mov	r8, r1
 80192f8:	4614      	mov	r4, r2
 80192fa:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80192fc:	0090      	lsls	r0, r2, #2
 80192fe:	f001 f833 	bl	801a368 <pvPortMalloc>
			if( pxStack != NULL )
 8019302:	b310      	cbz	r0, 801934a <xTaskCreate+0x5c>
 8019304:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019306:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801930a:	f001 f82d 	bl	801a368 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801930e:	4605      	mov	r5, r0
 8019310:	b1a8      	cbz	r0, 801933e <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8019312:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8019316:	2300      	movs	r3, #0
 8019318:	f880 317d 	strb.w	r3, [r0, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801931c:	9303      	str	r3, [sp, #12]
 801931e:	9002      	str	r0, [sp, #8]
 8019320:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019322:	9301      	str	r3, [sp, #4]
 8019324:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019326:	9300      	str	r3, [sp, #0]
 8019328:	4633      	mov	r3, r6
 801932a:	4622      	mov	r2, r4
 801932c:	4641      	mov	r1, r8
 801932e:	4638      	mov	r0, r7
 8019330:	f7ff fdfc 	bl	8018f2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019334:	4628      	mov	r0, r5
 8019336:	f7ff feaf 	bl	8019098 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801933a:	2001      	movs	r0, #1
 801933c:	e007      	b.n	801934e <xTaskCreate+0x60>
					vPortFree( pxStack );
 801933e:	4648      	mov	r0, r9
 8019340:	f001 f894 	bl	801a46c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019348:	e001      	b.n	801934e <xTaskCreate+0x60>
 801934a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 801934e:	b005      	add	sp, #20
 8019350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08019354 <vTaskStartScheduler>:
{
 8019354:	b510      	push	{r4, lr}
 8019356:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019358:	2400      	movs	r4, #0
 801935a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801935c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801935e:	aa07      	add	r2, sp, #28
 8019360:	a906      	add	r1, sp, #24
 8019362:	a805      	add	r0, sp, #20
 8019364:	f7fe ff90 	bl	8018288 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019368:	9b05      	ldr	r3, [sp, #20]
 801936a:	9302      	str	r3, [sp, #8]
 801936c:	9b06      	ldr	r3, [sp, #24]
 801936e:	9301      	str	r3, [sp, #4]
 8019370:	9400      	str	r4, [sp, #0]
 8019372:	4623      	mov	r3, r4
 8019374:	9a07      	ldr	r2, [sp, #28]
 8019376:	491a      	ldr	r1, [pc, #104]	@ (80193e0 <vTaskStartScheduler+0x8c>)
 8019378:	481a      	ldr	r0, [pc, #104]	@ (80193e4 <vTaskStartScheduler+0x90>)
 801937a:	f7ff ff7b 	bl	8019274 <xTaskCreateStatic>
 801937e:	4b1a      	ldr	r3, [pc, #104]	@ (80193e8 <vTaskStartScheduler+0x94>)
 8019380:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8019382:	b1e8      	cbz	r0, 80193c0 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 8019384:	f000 fc0c 	bl	8019ba0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8019388:	2801      	cmp	r0, #1
 801938a:	d11a      	bne.n	80193c2 <vTaskStartScheduler+0x6e>
 801938c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019390:	f383 8811 	msr	BASEPRI, r3
 8019394:	f3bf 8f6f 	isb	sy
 8019398:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801939c:	4b13      	ldr	r3, [pc, #76]	@ (80193ec <vTaskStartScheduler+0x98>)
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	3358      	adds	r3, #88	@ 0x58
 80193a2:	4a13      	ldr	r2, [pc, #76]	@ (80193f0 <vTaskStartScheduler+0x9c>)
 80193a4:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80193a6:	4b13      	ldr	r3, [pc, #76]	@ (80193f4 <vTaskStartScheduler+0xa0>)
 80193a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80193ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80193ae:	4b12      	ldr	r3, [pc, #72]	@ (80193f8 <vTaskStartScheduler+0xa4>)
 80193b0:	2201      	movs	r2, #1
 80193b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80193b4:	4b11      	ldr	r3, [pc, #68]	@ (80193fc <vTaskStartScheduler+0xa8>)
 80193b6:	2200      	movs	r2, #0
 80193b8:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80193ba:	f000 feb5 	bl	801a128 <xPortStartScheduler>
 80193be:	e003      	b.n	80193c8 <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 80193c0:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80193c2:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 80193c6:	d001      	beq.n	80193cc <vTaskStartScheduler+0x78>
}
 80193c8:	b008      	add	sp, #32
 80193ca:	bd10      	pop	{r4, pc}
 80193cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193d0:	f383 8811 	msr	BASEPRI, r3
 80193d4:	f3bf 8f6f 	isb	sy
 80193d8:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80193dc:	e7fe      	b.n	80193dc <vTaskStartScheduler+0x88>
 80193de:	bf00      	nop
 80193e0:	08038410 	.word	0x08038410
 80193e4:	080191d1 	.word	0x080191d1
 80193e8:	20003698 	.word	0x20003698
 80193ec:	20003b90 	.word	0x20003b90
 80193f0:	200002d8 	.word	0x200002d8
 80193f4:	2000369c 	.word	0x2000369c
 80193f8:	200036b0 	.word	0x200036b0
 80193fc:	200036b8 	.word	0x200036b8

08019400 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8019400:	4a02      	ldr	r2, [pc, #8]	@ (801940c <vTaskSuspendAll+0xc>)
 8019402:	6813      	ldr	r3, [r2, #0]
 8019404:	3301      	adds	r3, #1
 8019406:	6013      	str	r3, [r2, #0]
}
 8019408:	4770      	bx	lr
 801940a:	bf00      	nop
 801940c:	20003694 	.word	0x20003694

08019410 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8019410:	4b01      	ldr	r3, [pc, #4]	@ (8019418 <xTaskGetTickCount+0x8>)
 8019412:	6818      	ldr	r0, [r3, #0]
}
 8019414:	4770      	bx	lr
 8019416:	bf00      	nop
 8019418:	200036b8 	.word	0x200036b8

0801941c <xTaskIncrementTick>:
{
 801941c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801941e:	4b3a      	ldr	r3, [pc, #232]	@ (8019508 <xTaskIncrementTick+0xec>)
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	2b00      	cmp	r3, #0
 8019424:	d169      	bne.n	80194fa <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8019426:	4b39      	ldr	r3, [pc, #228]	@ (801950c <xTaskIncrementTick+0xf0>)
 8019428:	681d      	ldr	r5, [r3, #0]
 801942a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 801942c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801942e:	b9c5      	cbnz	r5, 8019462 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8019430:	4b37      	ldr	r3, [pc, #220]	@ (8019510 <xTaskIncrementTick+0xf4>)
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	b143      	cbz	r3, 801944a <xTaskIncrementTick+0x2e>
 8019438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801943c:	f383 8811 	msr	BASEPRI, r3
 8019440:	f3bf 8f6f 	isb	sy
 8019444:	f3bf 8f4f 	dsb	sy
 8019448:	e7fe      	b.n	8019448 <xTaskIncrementTick+0x2c>
 801944a:	4a31      	ldr	r2, [pc, #196]	@ (8019510 <xTaskIncrementTick+0xf4>)
 801944c:	6811      	ldr	r1, [r2, #0]
 801944e:	4b31      	ldr	r3, [pc, #196]	@ (8019514 <xTaskIncrementTick+0xf8>)
 8019450:	6818      	ldr	r0, [r3, #0]
 8019452:	6010      	str	r0, [r2, #0]
 8019454:	6019      	str	r1, [r3, #0]
 8019456:	4a30      	ldr	r2, [pc, #192]	@ (8019518 <xTaskIncrementTick+0xfc>)
 8019458:	6813      	ldr	r3, [r2, #0]
 801945a:	3301      	adds	r3, #1
 801945c:	6013      	str	r3, [r2, #0]
 801945e:	f7ff fd4f 	bl	8018f00 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8019462:	4b2e      	ldr	r3, [pc, #184]	@ (801951c <xTaskIncrementTick+0x100>)
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	42ab      	cmp	r3, r5
 8019468:	d93d      	bls.n	80194e6 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 801946a:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801946c:	4b2c      	ldr	r3, [pc, #176]	@ (8019520 <xTaskIncrementTick+0x104>)
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019472:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019476:	009a      	lsls	r2, r3, #2
 8019478:	4b2a      	ldr	r3, [pc, #168]	@ (8019524 <xTaskIncrementTick+0x108>)
 801947a:	589b      	ldr	r3, [r3, r2]
 801947c:	2b01      	cmp	r3, #1
 801947e:	d900      	bls.n	8019482 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8019480:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8019482:	4b29      	ldr	r3, [pc, #164]	@ (8019528 <xTaskIncrementTick+0x10c>)
 8019484:	681b      	ldr	r3, [r3, #0]
 8019486:	2b00      	cmp	r3, #0
 8019488:	d03c      	beq.n	8019504 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 801948a:	2701      	movs	r7, #1
	return xSwitchRequired;
 801948c:	e03a      	b.n	8019504 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 801948e:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019490:	4b1f      	ldr	r3, [pc, #124]	@ (8019510 <xTaskIncrementTick+0xf4>)
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	b343      	cbz	r3, 80194ea <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019498:	4b1d      	ldr	r3, [pc, #116]	@ (8019510 <xTaskIncrementTick+0xf4>)
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	68db      	ldr	r3, [r3, #12]
 801949e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80194a0:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80194a2:	429d      	cmp	r5, r3
 80194a4:	d326      	bcc.n	80194f4 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80194a6:	1d26      	adds	r6, r4, #4
 80194a8:	4630      	mov	r0, r6
 80194aa:	f7fe ff37 	bl	801831c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80194ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80194b0:	b11b      	cbz	r3, 80194ba <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80194b2:	f104 0018 	add.w	r0, r4, #24
 80194b6:	f7fe ff31 	bl	801831c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80194ba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80194bc:	4a1b      	ldr	r2, [pc, #108]	@ (801952c <xTaskIncrementTick+0x110>)
 80194be:	6812      	ldr	r2, [r2, #0]
 80194c0:	4293      	cmp	r3, r2
 80194c2:	d901      	bls.n	80194c8 <xTaskIncrementTick+0xac>
 80194c4:	4a19      	ldr	r2, [pc, #100]	@ (801952c <xTaskIncrementTick+0x110>)
 80194c6:	6013      	str	r3, [r2, #0]
 80194c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80194cc:	009a      	lsls	r2, r3, #2
 80194ce:	4631      	mov	r1, r6
 80194d0:	4814      	ldr	r0, [pc, #80]	@ (8019524 <xTaskIncrementTick+0x108>)
 80194d2:	4410      	add	r0, r2
 80194d4:	f7fe fefe 	bl	80182d4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80194d8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80194da:	4b11      	ldr	r3, [pc, #68]	@ (8019520 <xTaskIncrementTick+0x104>)
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80194e0:	429a      	cmp	r2, r3
 80194e2:	d2d4      	bcs.n	801948e <xTaskIncrementTick+0x72>
 80194e4:	e7d4      	b.n	8019490 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 80194e6:	2700      	movs	r7, #0
 80194e8:	e7d2      	b.n	8019490 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80194ea:	4b0c      	ldr	r3, [pc, #48]	@ (801951c <xTaskIncrementTick+0x100>)
 80194ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80194f0:	601a      	str	r2, [r3, #0]
					break;
 80194f2:	e7bb      	b.n	801946c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80194f4:	4a09      	ldr	r2, [pc, #36]	@ (801951c <xTaskIncrementTick+0x100>)
 80194f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80194f8:	e7b8      	b.n	801946c <xTaskIncrementTick+0x50>
		++xPendedTicks;
 80194fa:	4a0d      	ldr	r2, [pc, #52]	@ (8019530 <xTaskIncrementTick+0x114>)
 80194fc:	6813      	ldr	r3, [r2, #0]
 80194fe:	3301      	adds	r3, #1
 8019500:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8019502:	2700      	movs	r7, #0
}
 8019504:	4638      	mov	r0, r7
 8019506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019508:	20003694 	.word	0x20003694
 801950c:	200036b8 	.word	0x200036b8
 8019510:	20003704 	.word	0x20003704
 8019514:	20003700 	.word	0x20003700
 8019518:	200036a4 	.word	0x200036a4
 801951c:	2000369c 	.word	0x2000369c
 8019520:	20003b90 	.word	0x20003b90
 8019524:	20003730 	.word	0x20003730
 8019528:	200036a8 	.word	0x200036a8
 801952c:	200036b4 	.word	0x200036b4
 8019530:	200036ac 	.word	0x200036ac

08019534 <xTaskResumeAll>:
{
 8019534:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8019536:	4b35      	ldr	r3, [pc, #212]	@ (801960c <xTaskResumeAll+0xd8>)
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	b943      	cbnz	r3, 801954e <xTaskResumeAll+0x1a>
 801953c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019540:	f383 8811 	msr	BASEPRI, r3
 8019544:	f3bf 8f6f 	isb	sy
 8019548:	f3bf 8f4f 	dsb	sy
 801954c:	e7fe      	b.n	801954c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 801954e:	f000 fd51 	bl	8019ff4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8019552:	4b2e      	ldr	r3, [pc, #184]	@ (801960c <xTaskResumeAll+0xd8>)
 8019554:	681a      	ldr	r2, [r3, #0]
 8019556:	3a01      	subs	r2, #1
 8019558:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	2b00      	cmp	r3, #0
 801955e:	d14f      	bne.n	8019600 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019560:	4b2b      	ldr	r3, [pc, #172]	@ (8019610 <xTaskResumeAll+0xdc>)
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	b90b      	cbnz	r3, 801956a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8019566:	2400      	movs	r4, #0
 8019568:	e04b      	b.n	8019602 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 801956a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801956c:	4b29      	ldr	r3, [pc, #164]	@ (8019614 <xTaskResumeAll+0xe0>)
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	b31b      	cbz	r3, 80195ba <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019572:	4b28      	ldr	r3, [pc, #160]	@ (8019614 <xTaskResumeAll+0xe0>)
 8019574:	68db      	ldr	r3, [r3, #12]
 8019576:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019578:	f104 0018 	add.w	r0, r4, #24
 801957c:	f7fe fece 	bl	801831c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019580:	1d25      	adds	r5, r4, #4
 8019582:	4628      	mov	r0, r5
 8019584:	f7fe feca 	bl	801831c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019588:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801958a:	4b23      	ldr	r3, [pc, #140]	@ (8019618 <xTaskResumeAll+0xe4>)
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	4298      	cmp	r0, r3
 8019590:	d901      	bls.n	8019596 <xTaskResumeAll+0x62>
 8019592:	4b21      	ldr	r3, [pc, #132]	@ (8019618 <xTaskResumeAll+0xe4>)
 8019594:	6018      	str	r0, [r3, #0]
 8019596:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801959a:	4629      	mov	r1, r5
 801959c:	4b1f      	ldr	r3, [pc, #124]	@ (801961c <xTaskResumeAll+0xe8>)
 801959e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80195a2:	f7fe fe97 	bl	80182d4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80195a6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80195a8:	4b1d      	ldr	r3, [pc, #116]	@ (8019620 <xTaskResumeAll+0xec>)
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80195ae:	429a      	cmp	r2, r3
 80195b0:	d3dc      	bcc.n	801956c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 80195b2:	4b1c      	ldr	r3, [pc, #112]	@ (8019624 <xTaskResumeAll+0xf0>)
 80195b4:	2201      	movs	r2, #1
 80195b6:	601a      	str	r2, [r3, #0]
 80195b8:	e7d8      	b.n	801956c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 80195ba:	b10c      	cbz	r4, 80195c0 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 80195bc:	f7ff fca0 	bl	8018f00 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80195c0:	4b19      	ldr	r3, [pc, #100]	@ (8019628 <xTaskResumeAll+0xf4>)
 80195c2:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80195c4:	b984      	cbnz	r4, 80195e8 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 80195c6:	4b17      	ldr	r3, [pc, #92]	@ (8019624 <xTaskResumeAll+0xf0>)
 80195c8:	681c      	ldr	r4, [r3, #0]
 80195ca:	b1d4      	cbz	r4, 8019602 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 80195cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80195d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80195d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80195d8:	f3bf 8f4f 	dsb	sy
 80195dc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80195e0:	2401      	movs	r4, #1
 80195e2:	e00e      	b.n	8019602 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 80195e4:	3c01      	subs	r4, #1
 80195e6:	d007      	beq.n	80195f8 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 80195e8:	f7ff ff18 	bl	801941c <xTaskIncrementTick>
 80195ec:	2800      	cmp	r0, #0
 80195ee:	d0f9      	beq.n	80195e4 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 80195f0:	4b0c      	ldr	r3, [pc, #48]	@ (8019624 <xTaskResumeAll+0xf0>)
 80195f2:	2201      	movs	r2, #1
 80195f4:	601a      	str	r2, [r3, #0]
 80195f6:	e7f5      	b.n	80195e4 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 80195f8:	4b0b      	ldr	r3, [pc, #44]	@ (8019628 <xTaskResumeAll+0xf4>)
 80195fa:	2200      	movs	r2, #0
 80195fc:	601a      	str	r2, [r3, #0]
 80195fe:	e7e2      	b.n	80195c6 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8019600:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8019602:	f000 fd19 	bl	801a038 <vPortExitCritical>
}
 8019606:	4620      	mov	r0, r4
 8019608:	bd38      	pop	{r3, r4, r5, pc}
 801960a:	bf00      	nop
 801960c:	20003694 	.word	0x20003694
 8019610:	200036bc 	.word	0x200036bc
 8019614:	200036ec 	.word	0x200036ec
 8019618:	200036b4 	.word	0x200036b4
 801961c:	20003730 	.word	0x20003730
 8019620:	20003b90 	.word	0x20003b90
 8019624:	200036a8 	.word	0x200036a8
 8019628:	200036ac 	.word	0x200036ac

0801962c <vTaskDelay>:
	{
 801962c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 801962e:	b1a8      	cbz	r0, 801965c <vTaskDelay+0x30>
 8019630:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8019632:	4b10      	ldr	r3, [pc, #64]	@ (8019674 <vTaskDelay+0x48>)
 8019634:	681b      	ldr	r3, [r3, #0]
 8019636:	b143      	cbz	r3, 801964a <vTaskDelay+0x1e>
 8019638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801963c:	f383 8811 	msr	BASEPRI, r3
 8019640:	f3bf 8f6f 	isb	sy
 8019644:	f3bf 8f4f 	dsb	sy
 8019648:	e7fe      	b.n	8019648 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 801964a:	f7ff fed9 	bl	8019400 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801964e:	2100      	movs	r1, #0
 8019650:	4620      	mov	r0, r4
 8019652:	f7ff fdd1 	bl	80191f8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8019656:	f7ff ff6d 	bl	8019534 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 801965a:	b948      	cbnz	r0, 8019670 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 801965c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019660:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019664:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019668:	f3bf 8f4f 	dsb	sy
 801966c:	f3bf 8f6f 	isb	sy
	}
 8019670:	bd10      	pop	{r4, pc}
 8019672:	bf00      	nop
 8019674:	20003694 	.word	0x20003694

08019678 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8019678:	4b22      	ldr	r3, [pc, #136]	@ (8019704 <vTaskSwitchContext+0x8c>)
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	b11b      	cbz	r3, 8019686 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 801967e:	4b22      	ldr	r3, [pc, #136]	@ (8019708 <vTaskSwitchContext+0x90>)
 8019680:	2201      	movs	r2, #1
 8019682:	601a      	str	r2, [r3, #0]
 8019684:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8019686:	4b20      	ldr	r3, [pc, #128]	@ (8019708 <vTaskSwitchContext+0x90>)
 8019688:	2200      	movs	r2, #0
 801968a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801968c:	4b1f      	ldr	r3, [pc, #124]	@ (801970c <vTaskSwitchContext+0x94>)
 801968e:	681b      	ldr	r3, [r3, #0]
 8019690:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8019694:	008a      	lsls	r2, r1, #2
 8019696:	491e      	ldr	r1, [pc, #120]	@ (8019710 <vTaskSwitchContext+0x98>)
 8019698:	588a      	ldr	r2, [r1, r2]
 801969a:	b95a      	cbnz	r2, 80196b4 <vTaskSwitchContext+0x3c>
 801969c:	b10b      	cbz	r3, 80196a2 <vTaskSwitchContext+0x2a>
 801969e:	3b01      	subs	r3, #1
 80196a0:	e7f6      	b.n	8019690 <vTaskSwitchContext+0x18>
 80196a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80196a6:	f383 8811 	msr	BASEPRI, r3
 80196aa:	f3bf 8f6f 	isb	sy
 80196ae:	f3bf 8f4f 	dsb	sy
 80196b2:	e7fe      	b.n	80196b2 <vTaskSwitchContext+0x3a>
 80196b4:	4608      	mov	r0, r1
 80196b6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80196ba:	008a      	lsls	r2, r1, #2
 80196bc:	4402      	add	r2, r0
 80196be:	6851      	ldr	r1, [r2, #4]
 80196c0:	6849      	ldr	r1, [r1, #4]
 80196c2:	6051      	str	r1, [r2, #4]
 80196c4:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80196c8:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80196cc:	3208      	adds	r2, #8
 80196ce:	4402      	add	r2, r0
 80196d0:	4291      	cmp	r1, r2
 80196d2:	d00f      	beq.n	80196f4 <vTaskSwitchContext+0x7c>
 80196d4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80196d8:	0091      	lsls	r1, r2, #2
 80196da:	4a0d      	ldr	r2, [pc, #52]	@ (8019710 <vTaskSwitchContext+0x98>)
 80196dc:	440a      	add	r2, r1
 80196de:	6852      	ldr	r2, [r2, #4]
 80196e0:	68d1      	ldr	r1, [r2, #12]
 80196e2:	4a0c      	ldr	r2, [pc, #48]	@ (8019714 <vTaskSwitchContext+0x9c>)
 80196e4:	6011      	str	r1, [r2, #0]
 80196e6:	4909      	ldr	r1, [pc, #36]	@ (801970c <vTaskSwitchContext+0x94>)
 80196e8:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80196ea:	6813      	ldr	r3, [r2, #0]
 80196ec:	3358      	adds	r3, #88	@ 0x58
 80196ee:	4a0a      	ldr	r2, [pc, #40]	@ (8019718 <vTaskSwitchContext+0xa0>)
 80196f0:	6013      	str	r3, [r2, #0]
}
 80196f2:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80196f4:	6848      	ldr	r0, [r1, #4]
 80196f6:	4662      	mov	r2, ip
 80196f8:	0091      	lsls	r1, r2, #2
 80196fa:	4a05      	ldr	r2, [pc, #20]	@ (8019710 <vTaskSwitchContext+0x98>)
 80196fc:	440a      	add	r2, r1
 80196fe:	6050      	str	r0, [r2, #4]
 8019700:	e7e8      	b.n	80196d4 <vTaskSwitchContext+0x5c>
 8019702:	bf00      	nop
 8019704:	20003694 	.word	0x20003694
 8019708:	200036a8 	.word	0x200036a8
 801970c:	200036b4 	.word	0x200036b4
 8019710:	20003730 	.word	0x20003730
 8019714:	20003b90 	.word	0x20003b90
 8019718:	200002d8 	.word	0x200002d8

0801971c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 801971c:	b158      	cbz	r0, 8019736 <vTaskPlaceOnEventList+0x1a>
{
 801971e:	b510      	push	{r4, lr}
 8019720:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019722:	4a09      	ldr	r2, [pc, #36]	@ (8019748 <vTaskPlaceOnEventList+0x2c>)
 8019724:	6811      	ldr	r1, [r2, #0]
 8019726:	3118      	adds	r1, #24
 8019728:	f7fe fddf 	bl	80182ea <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801972c:	2101      	movs	r1, #1
 801972e:	4620      	mov	r0, r4
 8019730:	f7ff fd62 	bl	80191f8 <prvAddCurrentTaskToDelayedList>
}
 8019734:	bd10      	pop	{r4, pc}
 8019736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801973a:	f383 8811 	msr	BASEPRI, r3
 801973e:	f3bf 8f6f 	isb	sy
 8019742:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8019746:	e7fe      	b.n	8019746 <vTaskPlaceOnEventList+0x2a>
 8019748:	20003b90 	.word	0x20003b90

0801974c <vTaskPlaceOnEventListRestricted>:
	{
 801974c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 801974e:	b170      	cbz	r0, 801976e <vTaskPlaceOnEventListRestricted+0x22>
 8019750:	460d      	mov	r5, r1
 8019752:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019754:	4a0a      	ldr	r2, [pc, #40]	@ (8019780 <vTaskPlaceOnEventListRestricted+0x34>)
 8019756:	6811      	ldr	r1, [r2, #0]
 8019758:	3118      	adds	r1, #24
 801975a:	f7fe fdbb 	bl	80182d4 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 801975e:	b10c      	cbz	r4, 8019764 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8019760:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8019764:	4621      	mov	r1, r4
 8019766:	4628      	mov	r0, r5
 8019768:	f7ff fd46 	bl	80191f8 <prvAddCurrentTaskToDelayedList>
	}
 801976c:	bd38      	pop	{r3, r4, r5, pc}
 801976e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019772:	f383 8811 	msr	BASEPRI, r3
 8019776:	f3bf 8f6f 	isb	sy
 801977a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 801977e:	e7fe      	b.n	801977e <vTaskPlaceOnEventListRestricted+0x32>
 8019780:	20003b90 	.word	0x20003b90

08019784 <xTaskRemoveFromEventList>:
{
 8019784:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019786:	68c3      	ldr	r3, [r0, #12]
 8019788:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 801978a:	b324      	cbz	r4, 80197d6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801978c:	f104 0518 	add.w	r5, r4, #24
 8019790:	4628      	mov	r0, r5
 8019792:	f7fe fdc3 	bl	801831c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019796:	4b18      	ldr	r3, [pc, #96]	@ (80197f8 <xTaskRemoveFromEventList+0x74>)
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	bb2b      	cbnz	r3, 80197e8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801979c:	1d25      	adds	r5, r4, #4
 801979e:	4628      	mov	r0, r5
 80197a0:	f7fe fdbc 	bl	801831c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80197a4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80197a6:	4b15      	ldr	r3, [pc, #84]	@ (80197fc <xTaskRemoveFromEventList+0x78>)
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	4298      	cmp	r0, r3
 80197ac:	d901      	bls.n	80197b2 <xTaskRemoveFromEventList+0x2e>
 80197ae:	4b13      	ldr	r3, [pc, #76]	@ (80197fc <xTaskRemoveFromEventList+0x78>)
 80197b0:	6018      	str	r0, [r3, #0]
 80197b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80197b6:	4629      	mov	r1, r5
 80197b8:	4b11      	ldr	r3, [pc, #68]	@ (8019800 <xTaskRemoveFromEventList+0x7c>)
 80197ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80197be:	f7fe fd89 	bl	80182d4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80197c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80197c4:	4b0f      	ldr	r3, [pc, #60]	@ (8019804 <xTaskRemoveFromEventList+0x80>)
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80197ca:	429a      	cmp	r2, r3
 80197cc:	d911      	bls.n	80197f2 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 80197ce:	2001      	movs	r0, #1
 80197d0:	4b0d      	ldr	r3, [pc, #52]	@ (8019808 <xTaskRemoveFromEventList+0x84>)
 80197d2:	6018      	str	r0, [r3, #0]
}
 80197d4:	bd38      	pop	{r3, r4, r5, pc}
 80197d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80197da:	f383 8811 	msr	BASEPRI, r3
 80197de:	f3bf 8f6f 	isb	sy
 80197e2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80197e6:	e7fe      	b.n	80197e6 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80197e8:	4629      	mov	r1, r5
 80197ea:	4808      	ldr	r0, [pc, #32]	@ (801980c <xTaskRemoveFromEventList+0x88>)
 80197ec:	f7fe fd72 	bl	80182d4 <vListInsertEnd>
 80197f0:	e7e7      	b.n	80197c2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 80197f2:	2000      	movs	r0, #0
	return xReturn;
 80197f4:	e7ee      	b.n	80197d4 <xTaskRemoveFromEventList+0x50>
 80197f6:	bf00      	nop
 80197f8:	20003694 	.word	0x20003694
 80197fc:	200036b4 	.word	0x200036b4
 8019800:	20003730 	.word	0x20003730
 8019804:	20003b90 	.word	0x20003b90
 8019808:	200036a8 	.word	0x200036a8
 801980c:	200036ec 	.word	0x200036ec

08019810 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019810:	4b03      	ldr	r3, [pc, #12]	@ (8019820 <vTaskInternalSetTimeOutState+0x10>)
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019816:	4b03      	ldr	r3, [pc, #12]	@ (8019824 <vTaskInternalSetTimeOutState+0x14>)
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	6043      	str	r3, [r0, #4]
}
 801981c:	4770      	bx	lr
 801981e:	bf00      	nop
 8019820:	200036a4 	.word	0x200036a4
 8019824:	200036b8 	.word	0x200036b8

08019828 <xTaskCheckForTimeOut>:
{
 8019828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 801982a:	b1c8      	cbz	r0, 8019860 <xTaskCheckForTimeOut+0x38>
 801982c:	460c      	mov	r4, r1
 801982e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8019830:	b1f9      	cbz	r1, 8019872 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8019832:	f000 fbdf 	bl	8019ff4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8019836:	4b1b      	ldr	r3, [pc, #108]	@ (80198a4 <xTaskCheckForTimeOut+0x7c>)
 8019838:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801983a:	686b      	ldr	r3, [r5, #4]
 801983c:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 801983e:	6822      	ldr	r2, [r4, #0]
 8019840:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8019844:	d026      	beq.n	8019894 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019846:	4e18      	ldr	r6, [pc, #96]	@ (80198a8 <xTaskCheckForTimeOut+0x80>)
 8019848:	6836      	ldr	r6, [r6, #0]
 801984a:	682f      	ldr	r7, [r5, #0]
 801984c:	42b7      	cmp	r7, r6
 801984e:	d001      	beq.n	8019854 <xTaskCheckForTimeOut+0x2c>
 8019850:	428b      	cmp	r3, r1
 8019852:	d924      	bls.n	801989e <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8019854:	4282      	cmp	r2, r0
 8019856:	d815      	bhi.n	8019884 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8019858:	2300      	movs	r3, #0
 801985a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 801985c:	2401      	movs	r4, #1
 801985e:	e01a      	b.n	8019896 <xTaskCheckForTimeOut+0x6e>
 8019860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019864:	f383 8811 	msr	BASEPRI, r3
 8019868:	f3bf 8f6f 	isb	sy
 801986c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8019870:	e7fe      	b.n	8019870 <xTaskCheckForTimeOut+0x48>
 8019872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019876:	f383 8811 	msr	BASEPRI, r3
 801987a:	f3bf 8f6f 	isb	sy
 801987e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8019882:	e7fe      	b.n	8019882 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8019884:	1a5b      	subs	r3, r3, r1
 8019886:	4413      	add	r3, r2
 8019888:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801988a:	4628      	mov	r0, r5
 801988c:	f7ff ffc0 	bl	8019810 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8019890:	2400      	movs	r4, #0
 8019892:	e000      	b.n	8019896 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8019894:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8019896:	f000 fbcf 	bl	801a038 <vPortExitCritical>
}
 801989a:	4620      	mov	r0, r4
 801989c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 801989e:	2401      	movs	r4, #1
 80198a0:	e7f9      	b.n	8019896 <xTaskCheckForTimeOut+0x6e>
 80198a2:	bf00      	nop
 80198a4:	200036b8 	.word	0x200036b8
 80198a8:	200036a4 	.word	0x200036a4

080198ac <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80198ac:	4b01      	ldr	r3, [pc, #4]	@ (80198b4 <vTaskMissedYield+0x8>)
 80198ae:	2201      	movs	r2, #1
 80198b0:	601a      	str	r2, [r3, #0]
}
 80198b2:	4770      	bx	lr
 80198b4:	200036a8 	.word	0x200036a8

080198b8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80198b8:	4b01      	ldr	r3, [pc, #4]	@ (80198c0 <xTaskGetCurrentTaskHandle+0x8>)
 80198ba:	6818      	ldr	r0, [r3, #0]
	}
 80198bc:	4770      	bx	lr
 80198be:	bf00      	nop
 80198c0:	20003b90 	.word	0x20003b90

080198c4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80198c4:	4b05      	ldr	r3, [pc, #20]	@ (80198dc <xTaskGetSchedulerState+0x18>)
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	b133      	cbz	r3, 80198d8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80198ca:	4b05      	ldr	r3, [pc, #20]	@ (80198e0 <xTaskGetSchedulerState+0x1c>)
 80198cc:	681b      	ldr	r3, [r3, #0]
 80198ce:	b10b      	cbz	r3, 80198d4 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80198d0:	2000      	movs	r0, #0
	}
 80198d2:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80198d4:	2002      	movs	r0, #2
 80198d6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80198d8:	2001      	movs	r0, #1
 80198da:	4770      	bx	lr
 80198dc:	200036b0 	.word	0x200036b0
 80198e0:	20003694 	.word	0x20003694

080198e4 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80198e4:	2800      	cmp	r0, #0
 80198e6:	d03e      	beq.n	8019966 <xTaskPriorityInherit+0x82>
	{
 80198e8:	b538      	push	{r3, r4, r5, lr}
 80198ea:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80198ec:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80198ee:	4a20      	ldr	r2, [pc, #128]	@ (8019970 <xTaskPriorityInherit+0x8c>)
 80198f0:	6812      	ldr	r2, [r2, #0]
 80198f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80198f4:	4293      	cmp	r3, r2
 80198f6:	d22e      	bcs.n	8019956 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80198f8:	6982      	ldr	r2, [r0, #24]
 80198fa:	2a00      	cmp	r2, #0
 80198fc:	db05      	blt.n	801990a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80198fe:	4a1c      	ldr	r2, [pc, #112]	@ (8019970 <xTaskPriorityInherit+0x8c>)
 8019900:	6812      	ldr	r2, [r2, #0]
 8019902:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8019904:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8019908:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801990a:	6961      	ldr	r1, [r4, #20]
 801990c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019910:	4a18      	ldr	r2, [pc, #96]	@ (8019974 <xTaskPriorityInherit+0x90>)
 8019912:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019916:	4299      	cmp	r1, r3
 8019918:	d005      	beq.n	8019926 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801991a:	4b15      	ldr	r3, [pc, #84]	@ (8019970 <xTaskPriorityInherit+0x8c>)
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019920:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 8019922:	2001      	movs	r0, #1
	}
 8019924:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019926:	1d25      	adds	r5, r4, #4
 8019928:	4628      	mov	r0, r5
 801992a:	f7fe fcf7 	bl	801831c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801992e:	4b10      	ldr	r3, [pc, #64]	@ (8019970 <xTaskPriorityInherit+0x8c>)
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8019934:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8019936:	4b10      	ldr	r3, [pc, #64]	@ (8019978 <xTaskPriorityInherit+0x94>)
 8019938:	681b      	ldr	r3, [r3, #0]
 801993a:	4298      	cmp	r0, r3
 801993c:	d901      	bls.n	8019942 <xTaskPriorityInherit+0x5e>
 801993e:	4b0e      	ldr	r3, [pc, #56]	@ (8019978 <xTaskPriorityInherit+0x94>)
 8019940:	6018      	str	r0, [r3, #0]
 8019942:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019946:	4629      	mov	r1, r5
 8019948:	4b0a      	ldr	r3, [pc, #40]	@ (8019974 <xTaskPriorityInherit+0x90>)
 801994a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801994e:	f7fe fcc1 	bl	80182d4 <vListInsertEnd>
				xReturn = pdTRUE;
 8019952:	2001      	movs	r0, #1
 8019954:	e7e6      	b.n	8019924 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8019956:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8019958:	4b05      	ldr	r3, [pc, #20]	@ (8019970 <xTaskPriorityInherit+0x8c>)
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801995e:	429a      	cmp	r2, r3
 8019960:	d303      	bcc.n	801996a <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 8019962:	2000      	movs	r0, #0
 8019964:	e7de      	b.n	8019924 <xTaskPriorityInherit+0x40>
 8019966:	2000      	movs	r0, #0
	}
 8019968:	4770      	bx	lr
					xReturn = pdTRUE;
 801996a:	2001      	movs	r0, #1
		return xReturn;
 801996c:	e7da      	b.n	8019924 <xTaskPriorityInherit+0x40>
 801996e:	bf00      	nop
 8019970:	20003b90 	.word	0x20003b90
 8019974:	20003730 	.word	0x20003730
 8019978:	200036b4 	.word	0x200036b4

0801997c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 801997c:	2800      	cmp	r0, #0
 801997e:	d03b      	beq.n	80199f8 <xTaskPriorityDisinherit+0x7c>
	{
 8019980:	b538      	push	{r3, r4, r5, lr}
 8019982:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8019984:	4b1e      	ldr	r3, [pc, #120]	@ (8019a00 <xTaskPriorityDisinherit+0x84>)
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	4283      	cmp	r3, r0
 801998a:	d008      	beq.n	801999e <xTaskPriorityDisinherit+0x22>
 801998c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019990:	f383 8811 	msr	BASEPRI, r3
 8019994:	f3bf 8f6f 	isb	sy
 8019998:	f3bf 8f4f 	dsb	sy
 801999c:	e7fe      	b.n	801999c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 801999e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80199a0:	b943      	cbnz	r3, 80199b4 <xTaskPriorityDisinherit+0x38>
 80199a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80199a6:	f383 8811 	msr	BASEPRI, r3
 80199aa:	f3bf 8f6f 	isb	sy
 80199ae:	f3bf 8f4f 	dsb	sy
 80199b2:	e7fe      	b.n	80199b2 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80199b4:	3b01      	subs	r3, #1
 80199b6:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80199b8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80199ba:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80199bc:	4291      	cmp	r1, r2
 80199be:	d01d      	beq.n	80199fc <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80199c0:	b10b      	cbz	r3, 80199c6 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 80199c2:	2000      	movs	r0, #0
	}
 80199c4:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80199c6:	1d05      	adds	r5, r0, #4
 80199c8:	4628      	mov	r0, r5
 80199ca:	f7fe fca7 	bl	801831c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80199ce:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80199d0:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80199d2:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 80199d6:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80199d8:	4b0a      	ldr	r3, [pc, #40]	@ (8019a04 <xTaskPriorityDisinherit+0x88>)
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	4298      	cmp	r0, r3
 80199de:	d901      	bls.n	80199e4 <xTaskPriorityDisinherit+0x68>
 80199e0:	4b08      	ldr	r3, [pc, #32]	@ (8019a04 <xTaskPriorityDisinherit+0x88>)
 80199e2:	6018      	str	r0, [r3, #0]
 80199e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80199e8:	4629      	mov	r1, r5
 80199ea:	4b07      	ldr	r3, [pc, #28]	@ (8019a08 <xTaskPriorityDisinherit+0x8c>)
 80199ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80199f0:	f7fe fc70 	bl	80182d4 <vListInsertEnd>
					xReturn = pdTRUE;
 80199f4:	2001      	movs	r0, #1
 80199f6:	e7e5      	b.n	80199c4 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80199f8:	2000      	movs	r0, #0
	}
 80199fa:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80199fc:	2000      	movs	r0, #0
 80199fe:	e7e1      	b.n	80199c4 <xTaskPriorityDisinherit+0x48>
 8019a00:	20003b90 	.word	0x20003b90
 8019a04:	200036b4 	.word	0x200036b4
 8019a08:	20003730 	.word	0x20003730

08019a0c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8019a0c:	2800      	cmp	r0, #0
 8019a0e:	d046      	beq.n	8019a9e <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 8019a10:	b538      	push	{r3, r4, r5, lr}
 8019a12:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8019a14:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8019a16:	b943      	cbnz	r3, 8019a2a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8019a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a1c:	f383 8811 	msr	BASEPRI, r3
 8019a20:	f3bf 8f6f 	isb	sy
 8019a24:	f3bf 8f4f 	dsb	sy
 8019a28:	e7fe      	b.n	8019a28 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8019a2a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8019a2c:	428a      	cmp	r2, r1
 8019a2e:	d200      	bcs.n	8019a32 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8019a30:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8019a32:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8019a34:	4291      	cmp	r1, r2
 8019a36:	d001      	beq.n	8019a3c <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8019a38:	2b01      	cmp	r3, #1
 8019a3a:	d000      	beq.n	8019a3e <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8019a3c:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8019a3e:	4b18      	ldr	r3, [pc, #96]	@ (8019aa0 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	42a3      	cmp	r3, r4
 8019a44:	d022      	beq.n	8019a8c <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 8019a46:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019a48:	69a3      	ldr	r3, [r4, #24]
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	db02      	blt.n	8019a54 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019a4e:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8019a52:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8019a54:	6962      	ldr	r2, [r4, #20]
 8019a56:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8019a5a:	4b12      	ldr	r3, [pc, #72]	@ (8019aa4 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8019a5c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8019a60:	429a      	cmp	r2, r3
 8019a62:	d1eb      	bne.n	8019a3c <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019a64:	1d25      	adds	r5, r4, #4
 8019a66:	4628      	mov	r0, r5
 8019a68:	f7fe fc58 	bl	801831c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8019a6c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8019a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8019aa8 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	4298      	cmp	r0, r3
 8019a74:	d901      	bls.n	8019a7a <vTaskPriorityDisinheritAfterTimeout+0x6e>
 8019a76:	4b0c      	ldr	r3, [pc, #48]	@ (8019aa8 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8019a78:	6018      	str	r0, [r3, #0]
 8019a7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019a7e:	4629      	mov	r1, r5
 8019a80:	4b08      	ldr	r3, [pc, #32]	@ (8019aa4 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8019a82:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019a86:	f7fe fc25 	bl	80182d4 <vListInsertEnd>
	}
 8019a8a:	e7d7      	b.n	8019a3c <vTaskPriorityDisinheritAfterTimeout+0x30>
 8019a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a90:	f383 8811 	msr	BASEPRI, r3
 8019a94:	f3bf 8f6f 	isb	sy
 8019a98:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8019a9c:	e7fe      	b.n	8019a9c <vTaskPriorityDisinheritAfterTimeout+0x90>
 8019a9e:	4770      	bx	lr
 8019aa0:	20003b90 	.word	0x20003b90
 8019aa4:	20003730 	.word	0x20003730
 8019aa8:	200036b4 	.word	0x200036b4

08019aac <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8019aac:	4b05      	ldr	r3, [pc, #20]	@ (8019ac4 <pvTaskIncrementMutexHeldCount+0x18>)
 8019aae:	681b      	ldr	r3, [r3, #0]
 8019ab0:	b123      	cbz	r3, 8019abc <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8019ab2:	4b04      	ldr	r3, [pc, #16]	@ (8019ac4 <pvTaskIncrementMutexHeldCount+0x18>)
 8019ab4:	681a      	ldr	r2, [r3, #0]
 8019ab6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8019ab8:	3301      	adds	r3, #1
 8019aba:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 8019abc:	4b01      	ldr	r3, [pc, #4]	@ (8019ac4 <pvTaskIncrementMutexHeldCount+0x18>)
 8019abe:	6818      	ldr	r0, [r3, #0]
	}
 8019ac0:	4770      	bx	lr
 8019ac2:	bf00      	nop
 8019ac4:	20003b90 	.word	0x20003b90

08019ac8 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019ac8:	4b06      	ldr	r3, [pc, #24]	@ (8019ae4 <prvGetNextExpireTime+0x1c>)
 8019aca:	681a      	ldr	r2, [r3, #0]
 8019acc:	6813      	ldr	r3, [r2, #0]
 8019ace:	b92b      	cbnz	r3, 8019adc <prvGetNextExpireTime+0x14>
 8019ad0:	2301      	movs	r3, #1
 8019ad2:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019ad4:	b923      	cbnz	r3, 8019ae0 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019ad6:	68d3      	ldr	r3, [r2, #12]
 8019ad8:	6818      	ldr	r0, [r3, #0]
 8019ada:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019adc:	2300      	movs	r3, #0
 8019ade:	e7f8      	b.n	8019ad2 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019ae0:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8019ae2:	4770      	bx	lr
 8019ae4:	20003c94 	.word	0x20003c94

08019ae8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019ae8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019aea:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019aec:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019aee:	4291      	cmp	r1, r2
 8019af0:	d80c      	bhi.n	8019b0c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019af2:	1ad2      	subs	r2, r2, r3
 8019af4:	6983      	ldr	r3, [r0, #24]
 8019af6:	429a      	cmp	r2, r3
 8019af8:	d301      	bcc.n	8019afe <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019afa:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8019afc:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019afe:	1d01      	adds	r1, r0, #4
 8019b00:	4b09      	ldr	r3, [pc, #36]	@ (8019b28 <prvInsertTimerInActiveList+0x40>)
 8019b02:	6818      	ldr	r0, [r3, #0]
 8019b04:	f7fe fbf1 	bl	80182ea <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8019b08:	2000      	movs	r0, #0
 8019b0a:	e7f7      	b.n	8019afc <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019b0c:	429a      	cmp	r2, r3
 8019b0e:	d201      	bcs.n	8019b14 <prvInsertTimerInActiveList+0x2c>
 8019b10:	4299      	cmp	r1, r3
 8019b12:	d206      	bcs.n	8019b22 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019b14:	1d01      	adds	r1, r0, #4
 8019b16:	4b05      	ldr	r3, [pc, #20]	@ (8019b2c <prvInsertTimerInActiveList+0x44>)
 8019b18:	6818      	ldr	r0, [r3, #0]
 8019b1a:	f7fe fbe6 	bl	80182ea <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8019b1e:	2000      	movs	r0, #0
 8019b20:	e7ec      	b.n	8019afc <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8019b22:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8019b24:	e7ea      	b.n	8019afc <prvInsertTimerInActiveList+0x14>
 8019b26:	bf00      	nop
 8019b28:	20003c90 	.word	0x20003c90
 8019b2c:	20003c94 	.word	0x20003c94

08019b30 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019b30:	b530      	push	{r4, r5, lr}
 8019b32:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019b34:	f000 fa5e 	bl	8019ff4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019b38:	4b11      	ldr	r3, [pc, #68]	@ (8019b80 <prvCheckForValidListAndQueue+0x50>)
 8019b3a:	681b      	ldr	r3, [r3, #0]
 8019b3c:	b11b      	cbz	r3, 8019b46 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019b3e:	f000 fa7b 	bl	801a038 <vPortExitCritical>
}
 8019b42:	b003      	add	sp, #12
 8019b44:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8019b46:	4d0f      	ldr	r5, [pc, #60]	@ (8019b84 <prvCheckForValidListAndQueue+0x54>)
 8019b48:	4628      	mov	r0, r5
 8019b4a:	f7fe fbb5 	bl	80182b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019b4e:	4c0e      	ldr	r4, [pc, #56]	@ (8019b88 <prvCheckForValidListAndQueue+0x58>)
 8019b50:	4620      	mov	r0, r4
 8019b52:	f7fe fbb1 	bl	80182b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019b56:	4b0d      	ldr	r3, [pc, #52]	@ (8019b8c <prvCheckForValidListAndQueue+0x5c>)
 8019b58:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8019b90 <prvCheckForValidListAndQueue+0x60>)
 8019b5c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019b5e:	2300      	movs	r3, #0
 8019b60:	9300      	str	r3, [sp, #0]
 8019b62:	4b0c      	ldr	r3, [pc, #48]	@ (8019b94 <prvCheckForValidListAndQueue+0x64>)
 8019b64:	4a0c      	ldr	r2, [pc, #48]	@ (8019b98 <prvCheckForValidListAndQueue+0x68>)
 8019b66:	2110      	movs	r1, #16
 8019b68:	200a      	movs	r0, #10
 8019b6a:	f7fe fce5 	bl	8018538 <xQueueGenericCreateStatic>
 8019b6e:	4b04      	ldr	r3, [pc, #16]	@ (8019b80 <prvCheckForValidListAndQueue+0x50>)
 8019b70:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8019b72:	2800      	cmp	r0, #0
 8019b74:	d0e3      	beq.n	8019b3e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019b76:	4909      	ldr	r1, [pc, #36]	@ (8019b9c <prvCheckForValidListAndQueue+0x6c>)
 8019b78:	f7ff f984 	bl	8018e84 <vQueueAddToRegistry>
 8019b7c:	e7df      	b.n	8019b3e <prvCheckForValidListAndQueue+0xe>
 8019b7e:	bf00      	nop
 8019b80:	20003c8c 	.word	0x20003c8c
 8019b84:	20003cac 	.word	0x20003cac
 8019b88:	20003c98 	.word	0x20003c98
 8019b8c:	20003c94 	.word	0x20003c94
 8019b90:	20003c90 	.word	0x20003c90
 8019b94:	20003b94 	.word	0x20003b94
 8019b98:	20003be4 	.word	0x20003be4
 8019b9c:	08038418 	.word	0x08038418

08019ba0 <xTimerCreateTimerTask>:
{
 8019ba0:	b510      	push	{r4, lr}
 8019ba2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8019ba4:	f7ff ffc4 	bl	8019b30 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8019ba8:	4b12      	ldr	r3, [pc, #72]	@ (8019bf4 <xTimerCreateTimerTask+0x54>)
 8019baa:	681b      	ldr	r3, [r3, #0]
 8019bac:	b1cb      	cbz	r3, 8019be2 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8019bae:	2400      	movs	r4, #0
 8019bb0:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8019bb2:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8019bb4:	aa07      	add	r2, sp, #28
 8019bb6:	a906      	add	r1, sp, #24
 8019bb8:	a805      	add	r0, sp, #20
 8019bba:	f7fe fb71 	bl	80182a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8019bbe:	9b05      	ldr	r3, [sp, #20]
 8019bc0:	9302      	str	r3, [sp, #8]
 8019bc2:	9b06      	ldr	r3, [sp, #24]
 8019bc4:	9301      	str	r3, [sp, #4]
 8019bc6:	2302      	movs	r3, #2
 8019bc8:	9300      	str	r3, [sp, #0]
 8019bca:	4623      	mov	r3, r4
 8019bcc:	9a07      	ldr	r2, [sp, #28]
 8019bce:	490a      	ldr	r1, [pc, #40]	@ (8019bf8 <xTimerCreateTimerTask+0x58>)
 8019bd0:	480a      	ldr	r0, [pc, #40]	@ (8019bfc <xTimerCreateTimerTask+0x5c>)
 8019bd2:	f7ff fb4f 	bl	8019274 <xTaskCreateStatic>
 8019bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8019c00 <xTimerCreateTimerTask+0x60>)
 8019bd8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8019bda:	b110      	cbz	r0, 8019be2 <xTimerCreateTimerTask+0x42>
}
 8019bdc:	2001      	movs	r0, #1
 8019bde:	b008      	add	sp, #32
 8019be0:	bd10      	pop	{r4, pc}
 8019be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019be6:	f383 8811 	msr	BASEPRI, r3
 8019bea:	f3bf 8f6f 	isb	sy
 8019bee:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8019bf2:	e7fe      	b.n	8019bf2 <xTimerCreateTimerTask+0x52>
 8019bf4:	20003c8c 	.word	0x20003c8c
 8019bf8:	08038420 	.word	0x08038420
 8019bfc:	08019f05 	.word	0x08019f05
 8019c00:	20003c88 	.word	0x20003c88

08019c04 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8019c04:	b1b8      	cbz	r0, 8019c36 <xTimerGenericCommand+0x32>
 8019c06:	469c      	mov	ip, r3
 8019c08:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8019c0a:	4818      	ldr	r0, [pc, #96]	@ (8019c6c <xTimerGenericCommand+0x68>)
 8019c0c:	6800      	ldr	r0, [r0, #0]
 8019c0e:	b358      	cbz	r0, 8019c68 <xTimerGenericCommand+0x64>
{
 8019c10:	b500      	push	{lr}
 8019c12:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8019c14:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019c16:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019c18:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019c1a:	2905      	cmp	r1, #5
 8019c1c:	dc1c      	bgt.n	8019c58 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019c1e:	f7ff fe51 	bl	80198c4 <xTaskGetSchedulerState>
 8019c22:	2802      	cmp	r0, #2
 8019c24:	d010      	beq.n	8019c48 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019c26:	2300      	movs	r3, #0
 8019c28:	461a      	mov	r2, r3
 8019c2a:	4669      	mov	r1, sp
 8019c2c:	480f      	ldr	r0, [pc, #60]	@ (8019c6c <xTimerGenericCommand+0x68>)
 8019c2e:	6800      	ldr	r0, [r0, #0]
 8019c30:	f7fe fcf0 	bl	8018614 <xQueueGenericSend>
 8019c34:	e015      	b.n	8019c62 <xTimerGenericCommand+0x5e>
 8019c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c3a:	f383 8811 	msr	BASEPRI, r3
 8019c3e:	f3bf 8f6f 	isb	sy
 8019c42:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8019c46:	e7fe      	b.n	8019c46 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019c48:	2300      	movs	r3, #0
 8019c4a:	9a06      	ldr	r2, [sp, #24]
 8019c4c:	4669      	mov	r1, sp
 8019c4e:	4807      	ldr	r0, [pc, #28]	@ (8019c6c <xTimerGenericCommand+0x68>)
 8019c50:	6800      	ldr	r0, [r0, #0]
 8019c52:	f7fe fcdf 	bl	8018614 <xQueueGenericSend>
 8019c56:	e004      	b.n	8019c62 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019c58:	2300      	movs	r3, #0
 8019c5a:	4662      	mov	r2, ip
 8019c5c:	4669      	mov	r1, sp
 8019c5e:	f7fe fde3 	bl	8018828 <xQueueGenericSendFromISR>
}
 8019c62:	b005      	add	sp, #20
 8019c64:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8019c68:	2000      	movs	r0, #0
}
 8019c6a:	4770      	bx	lr
 8019c6c:	20003c8c 	.word	0x20003c8c

08019c70 <prvSwitchTimerLists>:
{
 8019c70:	b570      	push	{r4, r5, r6, lr}
 8019c72:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019c74:	4b1b      	ldr	r3, [pc, #108]	@ (8019ce4 <prvSwitchTimerLists+0x74>)
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	681a      	ldr	r2, [r3, #0]
 8019c7a:	b362      	cbz	r2, 8019cd6 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019c7c:	68db      	ldr	r3, [r3, #12]
 8019c7e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019c80:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019c82:	1d25      	adds	r5, r4, #4
 8019c84:	4628      	mov	r0, r5
 8019c86:	f7fe fb49 	bl	801831c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019c8a:	6a23      	ldr	r3, [r4, #32]
 8019c8c:	4620      	mov	r0, r4
 8019c8e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019c90:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019c94:	f013 0f04 	tst.w	r3, #4
 8019c98:	d0ec      	beq.n	8019c74 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019c9a:	69a3      	ldr	r3, [r4, #24]
 8019c9c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8019c9e:	429e      	cmp	r6, r3
 8019ca0:	d207      	bcs.n	8019cb2 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019ca2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019ca4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019ca6:	4629      	mov	r1, r5
 8019ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8019ce4 <prvSwitchTimerLists+0x74>)
 8019caa:	6818      	ldr	r0, [r3, #0]
 8019cac:	f7fe fb1d 	bl	80182ea <vListInsert>
 8019cb0:	e7e0      	b.n	8019c74 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019cb2:	2100      	movs	r1, #0
 8019cb4:	9100      	str	r1, [sp, #0]
 8019cb6:	460b      	mov	r3, r1
 8019cb8:	4632      	mov	r2, r6
 8019cba:	4620      	mov	r0, r4
 8019cbc:	f7ff ffa2 	bl	8019c04 <xTimerGenericCommand>
				configASSERT( xResult );
 8019cc0:	2800      	cmp	r0, #0
 8019cc2:	d1d7      	bne.n	8019c74 <prvSwitchTimerLists+0x4>
 8019cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019cc8:	f383 8811 	msr	BASEPRI, r3
 8019ccc:	f3bf 8f6f 	isb	sy
 8019cd0:	f3bf 8f4f 	dsb	sy
 8019cd4:	e7fe      	b.n	8019cd4 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8019cd6:	4a04      	ldr	r2, [pc, #16]	@ (8019ce8 <prvSwitchTimerLists+0x78>)
 8019cd8:	6810      	ldr	r0, [r2, #0]
 8019cda:	4902      	ldr	r1, [pc, #8]	@ (8019ce4 <prvSwitchTimerLists+0x74>)
 8019cdc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8019cde:	6013      	str	r3, [r2, #0]
}
 8019ce0:	b002      	add	sp, #8
 8019ce2:	bd70      	pop	{r4, r5, r6, pc}
 8019ce4:	20003c94 	.word	0x20003c94
 8019ce8:	20003c90 	.word	0x20003c90

08019cec <prvSampleTimeNow>:
{
 8019cec:	b538      	push	{r3, r4, r5, lr}
 8019cee:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8019cf0:	f7ff fb8e 	bl	8019410 <xTaskGetTickCount>
 8019cf4:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8019cf6:	4b07      	ldr	r3, [pc, #28]	@ (8019d14 <prvSampleTimeNow+0x28>)
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	4283      	cmp	r3, r0
 8019cfc:	d805      	bhi.n	8019d0a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8019cfe:	2300      	movs	r3, #0
 8019d00:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8019d02:	4b04      	ldr	r3, [pc, #16]	@ (8019d14 <prvSampleTimeNow+0x28>)
 8019d04:	601c      	str	r4, [r3, #0]
}
 8019d06:	4620      	mov	r0, r4
 8019d08:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8019d0a:	f7ff ffb1 	bl	8019c70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019d0e:	2301      	movs	r3, #1
 8019d10:	602b      	str	r3, [r5, #0]
 8019d12:	e7f6      	b.n	8019d02 <prvSampleTimeNow+0x16>
 8019d14:	20003c84 	.word	0x20003c84

08019d18 <prvProcessExpiredTimer>:
{
 8019d18:	b570      	push	{r4, r5, r6, lr}
 8019d1a:	b082      	sub	sp, #8
 8019d1c:	4606      	mov	r6, r0
 8019d1e:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019d20:	4917      	ldr	r1, [pc, #92]	@ (8019d80 <prvProcessExpiredTimer+0x68>)
 8019d22:	6809      	ldr	r1, [r1, #0]
 8019d24:	68c9      	ldr	r1, [r1, #12]
 8019d26:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019d28:	1d20      	adds	r0, r4, #4
 8019d2a:	f7fe faf7 	bl	801831c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019d2e:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 8019d32:	f01c 0f04 	tst.w	ip, #4
 8019d36:	d108      	bne.n	8019d4a <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019d38:	f02c 0c01 	bic.w	ip, ip, #1
 8019d3c:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019d40:	6a23      	ldr	r3, [r4, #32]
 8019d42:	4620      	mov	r0, r4
 8019d44:	4798      	blx	r3
}
 8019d46:	b002      	add	sp, #8
 8019d48:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019d4a:	69a1      	ldr	r1, [r4, #24]
 8019d4c:	4633      	mov	r3, r6
 8019d4e:	462a      	mov	r2, r5
 8019d50:	4431      	add	r1, r6
 8019d52:	4620      	mov	r0, r4
 8019d54:	f7ff fec8 	bl	8019ae8 <prvInsertTimerInActiveList>
 8019d58:	2800      	cmp	r0, #0
 8019d5a:	d0f1      	beq.n	8019d40 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019d5c:	2100      	movs	r1, #0
 8019d5e:	9100      	str	r1, [sp, #0]
 8019d60:	460b      	mov	r3, r1
 8019d62:	4632      	mov	r2, r6
 8019d64:	4620      	mov	r0, r4
 8019d66:	f7ff ff4d 	bl	8019c04 <xTimerGenericCommand>
			configASSERT( xResult );
 8019d6a:	2800      	cmp	r0, #0
 8019d6c:	d1e8      	bne.n	8019d40 <prvProcessExpiredTimer+0x28>
 8019d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d72:	f383 8811 	msr	BASEPRI, r3
 8019d76:	f3bf 8f6f 	isb	sy
 8019d7a:	f3bf 8f4f 	dsb	sy
 8019d7e:	e7fe      	b.n	8019d7e <prvProcessExpiredTimer+0x66>
 8019d80:	20003c94 	.word	0x20003c94

08019d84 <prvProcessTimerOrBlockTask>:
{
 8019d84:	b570      	push	{r4, r5, r6, lr}
 8019d86:	b082      	sub	sp, #8
 8019d88:	4606      	mov	r6, r0
 8019d8a:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8019d8c:	f7ff fb38 	bl	8019400 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019d90:	a801      	add	r0, sp, #4
 8019d92:	f7ff ffab 	bl	8019cec <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8019d96:	9b01      	ldr	r3, [sp, #4]
 8019d98:	bb33      	cbnz	r3, 8019de8 <prvProcessTimerOrBlockTask+0x64>
 8019d9a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019d9c:	b9e4      	cbnz	r4, 8019dd8 <prvProcessTimerOrBlockTask+0x54>
 8019d9e:	42b0      	cmp	r0, r6
 8019da0:	d213      	bcs.n	8019dca <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019da2:	4622      	mov	r2, r4
 8019da4:	1b71      	subs	r1, r6, r5
 8019da6:	4b12      	ldr	r3, [pc, #72]	@ (8019df0 <prvProcessTimerOrBlockTask+0x6c>)
 8019da8:	6818      	ldr	r0, [r3, #0]
 8019daa:	f7ff f87f 	bl	8018eac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019dae:	f7ff fbc1 	bl	8019534 <xTaskResumeAll>
 8019db2:	b9d8      	cbnz	r0, 8019dec <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8019db4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019db8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019dbc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019dc0:	f3bf 8f4f 	dsb	sy
 8019dc4:	f3bf 8f6f 	isb	sy
 8019dc8:	e010      	b.n	8019dec <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8019dca:	f7ff fbb3 	bl	8019534 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019dce:	4629      	mov	r1, r5
 8019dd0:	4630      	mov	r0, r6
 8019dd2:	f7ff ffa1 	bl	8019d18 <prvProcessExpiredTimer>
 8019dd6:	e009      	b.n	8019dec <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019dd8:	4a06      	ldr	r2, [pc, #24]	@ (8019df4 <prvProcessTimerOrBlockTask+0x70>)
 8019dda:	6812      	ldr	r2, [r2, #0]
 8019ddc:	6812      	ldr	r2, [r2, #0]
 8019dde:	b90a      	cbnz	r2, 8019de4 <prvProcessTimerOrBlockTask+0x60>
 8019de0:	2401      	movs	r4, #1
 8019de2:	e7de      	b.n	8019da2 <prvProcessTimerOrBlockTask+0x1e>
 8019de4:	461c      	mov	r4, r3
 8019de6:	e7dc      	b.n	8019da2 <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 8019de8:	f7ff fba4 	bl	8019534 <xTaskResumeAll>
}
 8019dec:	b002      	add	sp, #8
 8019dee:	bd70      	pop	{r4, r5, r6, pc}
 8019df0:	20003c8c 	.word	0x20003c8c
 8019df4:	20003c90 	.word	0x20003c90

08019df8 <prvProcessReceivedCommands>:
{
 8019df8:	b510      	push	{r4, lr}
 8019dfa:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019dfc:	e002      	b.n	8019e04 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019dfe:	9b04      	ldr	r3, [sp, #16]
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	da0f      	bge.n	8019e24 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019e04:	2200      	movs	r2, #0
 8019e06:	a904      	add	r1, sp, #16
 8019e08:	4b3d      	ldr	r3, [pc, #244]	@ (8019f00 <prvProcessReceivedCommands+0x108>)
 8019e0a:	6818      	ldr	r0, [r3, #0]
 8019e0c:	f7fe fd73 	bl	80188f6 <xQueueReceive>
 8019e10:	2800      	cmp	r0, #0
 8019e12:	d073      	beq.n	8019efc <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019e14:	9b04      	ldr	r3, [sp, #16]
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	daf1      	bge.n	8019dfe <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019e1a:	9907      	ldr	r1, [sp, #28]
 8019e1c:	9806      	ldr	r0, [sp, #24]
 8019e1e:	9b05      	ldr	r3, [sp, #20]
 8019e20:	4798      	blx	r3
 8019e22:	e7ec      	b.n	8019dfe <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019e24:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019e26:	6963      	ldr	r3, [r4, #20]
 8019e28:	b113      	cbz	r3, 8019e30 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019e2a:	1d20      	adds	r0, r4, #4
 8019e2c:	f7fe fa76 	bl	801831c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019e30:	a803      	add	r0, sp, #12
 8019e32:	f7ff ff5b 	bl	8019cec <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8019e36:	9b04      	ldr	r3, [sp, #16]
 8019e38:	2b09      	cmp	r3, #9
 8019e3a:	d8e3      	bhi.n	8019e04 <prvProcessReceivedCommands+0xc>
 8019e3c:	e8df f003 	tbb	[pc, r3]
 8019e40:	30050505 	.word	0x30050505
 8019e44:	05055037 	.word	0x05055037
 8019e48:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019e4a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019e4e:	f043 0301 	orr.w	r3, r3, #1
 8019e52:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019e56:	9b05      	ldr	r3, [sp, #20]
 8019e58:	69a1      	ldr	r1, [r4, #24]
 8019e5a:	4602      	mov	r2, r0
 8019e5c:	4419      	add	r1, r3
 8019e5e:	4620      	mov	r0, r4
 8019e60:	f7ff fe42 	bl	8019ae8 <prvInsertTimerInActiveList>
 8019e64:	2800      	cmp	r0, #0
 8019e66:	d0cd      	beq.n	8019e04 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019e68:	6a23      	ldr	r3, [r4, #32]
 8019e6a:	4620      	mov	r0, r4
 8019e6c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019e6e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019e72:	f013 0f04 	tst.w	r3, #4
 8019e76:	d0c5      	beq.n	8019e04 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019e78:	69a2      	ldr	r2, [r4, #24]
 8019e7a:	2100      	movs	r1, #0
 8019e7c:	9100      	str	r1, [sp, #0]
 8019e7e:	460b      	mov	r3, r1
 8019e80:	9805      	ldr	r0, [sp, #20]
 8019e82:	4402      	add	r2, r0
 8019e84:	4620      	mov	r0, r4
 8019e86:	f7ff febd 	bl	8019c04 <xTimerGenericCommand>
							configASSERT( xResult );
 8019e8a:	2800      	cmp	r0, #0
 8019e8c:	d1ba      	bne.n	8019e04 <prvProcessReceivedCommands+0xc>
 8019e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e92:	f383 8811 	msr	BASEPRI, r3
 8019e96:	f3bf 8f6f 	isb	sy
 8019e9a:	f3bf 8f4f 	dsb	sy
 8019e9e:	e7fe      	b.n	8019e9e <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019ea0:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019ea4:	f023 0301 	bic.w	r3, r3, #1
 8019ea8:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 8019eac:	e7aa      	b.n	8019e04 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019eae:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019eb2:	f043 0301 	orr.w	r3, r3, #1
 8019eb6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019eba:	9905      	ldr	r1, [sp, #20]
 8019ebc:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019ebe:	b131      	cbz	r1, 8019ece <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019ec0:	4603      	mov	r3, r0
 8019ec2:	4602      	mov	r2, r0
 8019ec4:	4401      	add	r1, r0
 8019ec6:	4620      	mov	r0, r4
 8019ec8:	f7ff fe0e 	bl	8019ae8 <prvInsertTimerInActiveList>
					break;
 8019ecc:	e79a      	b.n	8019e04 <prvProcessReceivedCommands+0xc>
 8019ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ed2:	f383 8811 	msr	BASEPRI, r3
 8019ed6:	f3bf 8f6f 	isb	sy
 8019eda:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019ede:	e7fe      	b.n	8019ede <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019ee0:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019ee4:	f013 0f02 	tst.w	r3, #2
 8019ee8:	d004      	beq.n	8019ef4 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019eea:	f023 0301 	bic.w	r3, r3, #1
 8019eee:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8019ef2:	e787      	b.n	8019e04 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8019ef4:	4620      	mov	r0, r4
 8019ef6:	f000 fab9 	bl	801a46c <vPortFree>
 8019efa:	e783      	b.n	8019e04 <prvProcessReceivedCommands+0xc>
}
 8019efc:	b008      	add	sp, #32
 8019efe:	bd10      	pop	{r4, pc}
 8019f00:	20003c8c 	.word	0x20003c8c

08019f04 <prvTimerTask>:
{
 8019f04:	b500      	push	{lr}
 8019f06:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019f08:	a801      	add	r0, sp, #4
 8019f0a:	f7ff fddd 	bl	8019ac8 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019f0e:	9901      	ldr	r1, [sp, #4]
 8019f10:	f7ff ff38 	bl	8019d84 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8019f14:	f7ff ff70 	bl	8019df8 <prvProcessReceivedCommands>
	for( ;; )
 8019f18:	e7f6      	b.n	8019f08 <prvTimerTask+0x4>
	...

08019f1c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019f1c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8019f1e:	2300      	movs	r3, #0
 8019f20:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019f22:	4b0d      	ldr	r3, [pc, #52]	@ (8019f58 <prvTaskExitError+0x3c>)
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019f2a:	d008      	beq.n	8019f3e <prvTaskExitError+0x22>
 8019f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f30:	f383 8811 	msr	BASEPRI, r3
 8019f34:	f3bf 8f6f 	isb	sy
 8019f38:	f3bf 8f4f 	dsb	sy
 8019f3c:	e7fe      	b.n	8019f3c <prvTaskExitError+0x20>
 8019f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f42:	f383 8811 	msr	BASEPRI, r3
 8019f46:	f3bf 8f6f 	isb	sy
 8019f4a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019f4e:	9b01      	ldr	r3, [sp, #4]
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d0fc      	beq.n	8019f4e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019f54:	b002      	add	sp, #8
 8019f56:	4770      	bx	lr
 8019f58:	20000114 	.word	0x20000114

08019f5c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019f5c:	4808      	ldr	r0, [pc, #32]	@ (8019f80 <prvPortStartFirstTask+0x24>)
 8019f5e:	6800      	ldr	r0, [r0, #0]
 8019f60:	6800      	ldr	r0, [r0, #0]
 8019f62:	f380 8808 	msr	MSP, r0
 8019f66:	f04f 0000 	mov.w	r0, #0
 8019f6a:	f380 8814 	msr	CONTROL, r0
 8019f6e:	b662      	cpsie	i
 8019f70:	b661      	cpsie	f
 8019f72:	f3bf 8f4f 	dsb	sy
 8019f76:	f3bf 8f6f 	isb	sy
 8019f7a:	df00      	svc	0
 8019f7c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8019f7e:	0000      	.short	0x0000
 8019f80:	e000ed08 	.word	0xe000ed08

08019f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019f84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8019f94 <vPortEnableVFP+0x10>
 8019f88:	6801      	ldr	r1, [r0, #0]
 8019f8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8019f8e:	6001      	str	r1, [r0, #0]
 8019f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019f92:	0000      	.short	0x0000
 8019f94:	e000ed88 	.word	0xe000ed88

08019f98 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019f98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8019f9c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019fa0:	f021 0101 	bic.w	r1, r1, #1
 8019fa4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019fa8:	4b05      	ldr	r3, [pc, #20]	@ (8019fc0 <pxPortInitialiseStack+0x28>)
 8019faa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019fae:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019fb2:	f06f 0302 	mvn.w	r3, #2
 8019fb6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8019fba:	3844      	subs	r0, #68	@ 0x44
 8019fbc:	4770      	bx	lr
 8019fbe:	bf00      	nop
 8019fc0:	08019f1d 	.word	0x08019f1d
	...

08019fd0 <SVC_Handler>:
	__asm volatile (
 8019fd0:	4b07      	ldr	r3, [pc, #28]	@ (8019ff0 <pxCurrentTCBConst2>)
 8019fd2:	6819      	ldr	r1, [r3, #0]
 8019fd4:	6808      	ldr	r0, [r1, #0]
 8019fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fda:	f380 8809 	msr	PSP, r0
 8019fde:	f3bf 8f6f 	isb	sy
 8019fe2:	f04f 0000 	mov.w	r0, #0
 8019fe6:	f380 8811 	msr	BASEPRI, r0
 8019fea:	4770      	bx	lr
 8019fec:	f3af 8000 	nop.w

08019ff0 <pxCurrentTCBConst2>:
 8019ff0:	20003b90 	.word	0x20003b90

08019ff4 <vPortEnterCritical>:
 8019ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ff8:	f383 8811 	msr	BASEPRI, r3
 8019ffc:	f3bf 8f6f 	isb	sy
 801a000:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 801a004:	4a0b      	ldr	r2, [pc, #44]	@ (801a034 <vPortEnterCritical+0x40>)
 801a006:	6813      	ldr	r3, [r2, #0]
 801a008:	3301      	adds	r3, #1
 801a00a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801a00c:	2b01      	cmp	r3, #1
 801a00e:	d000      	beq.n	801a012 <vPortEnterCritical+0x1e>
}
 801a010:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a012:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a016:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 801a01a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 801a01e:	d0f7      	beq.n	801a010 <vPortEnterCritical+0x1c>
 801a020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a024:	f383 8811 	msr	BASEPRI, r3
 801a028:	f3bf 8f6f 	isb	sy
 801a02c:	f3bf 8f4f 	dsb	sy
 801a030:	e7fe      	b.n	801a030 <vPortEnterCritical+0x3c>
 801a032:	bf00      	nop
 801a034:	20000114 	.word	0x20000114

0801a038 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 801a038:	4b09      	ldr	r3, [pc, #36]	@ (801a060 <vPortExitCritical+0x28>)
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	b943      	cbnz	r3, 801a050 <vPortExitCritical+0x18>
 801a03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a042:	f383 8811 	msr	BASEPRI, r3
 801a046:	f3bf 8f6f 	isb	sy
 801a04a:	f3bf 8f4f 	dsb	sy
 801a04e:	e7fe      	b.n	801a04e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 801a050:	3b01      	subs	r3, #1
 801a052:	4a03      	ldr	r2, [pc, #12]	@ (801a060 <vPortExitCritical+0x28>)
 801a054:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a056:	b90b      	cbnz	r3, 801a05c <vPortExitCritical+0x24>
	__asm volatile
 801a058:	f383 8811 	msr	BASEPRI, r3
}
 801a05c:	4770      	bx	lr
 801a05e:	bf00      	nop
 801a060:	20000114 	.word	0x20000114
	...

0801a070 <PendSV_Handler>:
	__asm volatile
 801a070:	f3ef 8009 	mrs	r0, PSP
 801a074:	f3bf 8f6f 	isb	sy
 801a078:	4b15      	ldr	r3, [pc, #84]	@ (801a0d0 <pxCurrentTCBConst>)
 801a07a:	681a      	ldr	r2, [r3, #0]
 801a07c:	f01e 0f10 	tst.w	lr, #16
 801a080:	bf08      	it	eq
 801a082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a08a:	6010      	str	r0, [r2, #0]
 801a08c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a090:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801a094:	f380 8811 	msr	BASEPRI, r0
 801a098:	f3bf 8f4f 	dsb	sy
 801a09c:	f3bf 8f6f 	isb	sy
 801a0a0:	f7ff faea 	bl	8019678 <vTaskSwitchContext>
 801a0a4:	f04f 0000 	mov.w	r0, #0
 801a0a8:	f380 8811 	msr	BASEPRI, r0
 801a0ac:	bc09      	pop	{r0, r3}
 801a0ae:	6819      	ldr	r1, [r3, #0]
 801a0b0:	6808      	ldr	r0, [r1, #0]
 801a0b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0b6:	f01e 0f10 	tst.w	lr, #16
 801a0ba:	bf08      	it	eq
 801a0bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a0c0:	f380 8809 	msr	PSP, r0
 801a0c4:	f3bf 8f6f 	isb	sy
 801a0c8:	4770      	bx	lr
 801a0ca:	bf00      	nop
 801a0cc:	f3af 8000 	nop.w

0801a0d0 <pxCurrentTCBConst>:
 801a0d0:	20003b90 	.word	0x20003b90

0801a0d4 <xPortSysTickHandler>:
{
 801a0d4:	b508      	push	{r3, lr}
	__asm volatile
 801a0d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a0da:	f383 8811 	msr	BASEPRI, r3
 801a0de:	f3bf 8f6f 	isb	sy
 801a0e2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 801a0e6:	f7ff f999 	bl	801941c <xTaskIncrementTick>
 801a0ea:	b128      	cbz	r0, 801a0f8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a0ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a0f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a0f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 801a0f8:	2300      	movs	r3, #0
 801a0fa:	f383 8811 	msr	BASEPRI, r3
}
 801a0fe:	bd08      	pop	{r3, pc}

0801a100 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a100:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 801a104:	2300      	movs	r3, #0
 801a106:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a108:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a10a:	4b05      	ldr	r3, [pc, #20]	@ (801a120 <vPortSetupTimerInterrupt+0x20>)
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	4905      	ldr	r1, [pc, #20]	@ (801a124 <vPortSetupTimerInterrupt+0x24>)
 801a110:	fba1 1303 	umull	r1, r3, r1, r3
 801a114:	099b      	lsrs	r3, r3, #6
 801a116:	3b01      	subs	r3, #1
 801a118:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a11a:	2307      	movs	r3, #7
 801a11c:	6113      	str	r3, [r2, #16]
}
 801a11e:	4770      	bx	lr
 801a120:	20000018 	.word	0x20000018
 801a124:	10624dd3 	.word	0x10624dd3

0801a128 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801a128:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a12c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801a130:	4b3d      	ldr	r3, [pc, #244]	@ (801a228 <xPortStartScheduler+0x100>)
 801a132:	429a      	cmp	r2, r3
 801a134:	d01c      	beq.n	801a170 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801a136:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a13a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801a13e:	4b3b      	ldr	r3, [pc, #236]	@ (801a22c <xPortStartScheduler+0x104>)
 801a140:	429a      	cmp	r2, r3
 801a142:	d01e      	beq.n	801a182 <xPortStartScheduler+0x5a>
{
 801a144:	b530      	push	{r4, r5, lr}
 801a146:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801a148:	4b39      	ldr	r3, [pc, #228]	@ (801a230 <xPortStartScheduler+0x108>)
 801a14a:	781a      	ldrb	r2, [r3, #0]
 801a14c:	b2d2      	uxtb	r2, r2
 801a14e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a150:	22ff      	movs	r2, #255	@ 0xff
 801a152:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a154:	781b      	ldrb	r3, [r3, #0]
 801a156:	b2db      	uxtb	r3, r3
 801a158:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a15c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801a160:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801a164:	4a33      	ldr	r2, [pc, #204]	@ (801a234 <xPortStartScheduler+0x10c>)
 801a166:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a168:	4b33      	ldr	r3, [pc, #204]	@ (801a238 <xPortStartScheduler+0x110>)
 801a16a:	2207      	movs	r2, #7
 801a16c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a16e:	e01b      	b.n	801a1a8 <xPortStartScheduler+0x80>
	__asm volatile
 801a170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a174:	f383 8811 	msr	BASEPRI, r3
 801a178:	f3bf 8f6f 	isb	sy
 801a17c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801a180:	e7fe      	b.n	801a180 <xPortStartScheduler+0x58>
 801a182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a186:	f383 8811 	msr	BASEPRI, r3
 801a18a:	f3bf 8f6f 	isb	sy
 801a18e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801a192:	e7fe      	b.n	801a192 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 801a194:	4a28      	ldr	r2, [pc, #160]	@ (801a238 <xPortStartScheduler+0x110>)
 801a196:	6813      	ldr	r3, [r2, #0]
 801a198:	3b01      	subs	r3, #1
 801a19a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a19c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801a1a0:	005b      	lsls	r3, r3, #1
 801a1a2:	b2db      	uxtb	r3, r3
 801a1a4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a1a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801a1ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a1b0:	d1f0      	bne.n	801a194 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a1b2:	4b21      	ldr	r3, [pc, #132]	@ (801a238 <xPortStartScheduler+0x110>)
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	2b03      	cmp	r3, #3
 801a1b8:	d008      	beq.n	801a1cc <xPortStartScheduler+0xa4>
 801a1ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a1be:	f383 8811 	msr	BASEPRI, r3
 801a1c2:	f3bf 8f6f 	isb	sy
 801a1c6:	f3bf 8f4f 	dsb	sy
 801a1ca:	e7fe      	b.n	801a1ca <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a1cc:	021b      	lsls	r3, r3, #8
 801a1ce:	4a1a      	ldr	r2, [pc, #104]	@ (801a238 <xPortStartScheduler+0x110>)
 801a1d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a1d2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801a1d6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a1d8:	9b01      	ldr	r3, [sp, #4]
 801a1da:	b2db      	uxtb	r3, r3
 801a1dc:	4a14      	ldr	r2, [pc, #80]	@ (801a230 <xPortStartScheduler+0x108>)
 801a1de:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a1e0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 801a1e4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801a1e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801a1ec:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a1f0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801a1f4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801a1f8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 801a1fc:	f7ff ff80 	bl	801a100 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 801a200:	2500      	movs	r5, #0
 801a202:	4b0e      	ldr	r3, [pc, #56]	@ (801a23c <xPortStartScheduler+0x114>)
 801a204:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 801a206:	f7ff febd 	bl	8019f84 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a20a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 801a20e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801a212:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 801a216:	f7ff fea1 	bl	8019f5c <prvPortStartFirstTask>
	vTaskSwitchContext();
 801a21a:	f7ff fa2d 	bl	8019678 <vTaskSwitchContext>
	prvTaskExitError();
 801a21e:	f7ff fe7d 	bl	8019f1c <prvTaskExitError>
}
 801a222:	4628      	mov	r0, r5
 801a224:	b003      	add	sp, #12
 801a226:	bd30      	pop	{r4, r5, pc}
 801a228:	410fc271 	.word	0x410fc271
 801a22c:	410fc270 	.word	0x410fc270
 801a230:	e000e400 	.word	0xe000e400
 801a234:	20003cc4 	.word	0x20003cc4
 801a238:	20003cc0 	.word	0x20003cc0
 801a23c:	20000114 	.word	0x20000114

0801a240 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a240:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a244:	2b0f      	cmp	r3, #15
 801a246:	d90f      	bls.n	801a268 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a248:	4a11      	ldr	r2, [pc, #68]	@ (801a290 <vPortValidateInterruptPriority+0x50>)
 801a24a:	5c9b      	ldrb	r3, [r3, r2]
 801a24c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a24e:	4a11      	ldr	r2, [pc, #68]	@ (801a294 <vPortValidateInterruptPriority+0x54>)
 801a250:	7812      	ldrb	r2, [r2, #0]
 801a252:	429a      	cmp	r2, r3
 801a254:	d908      	bls.n	801a268 <vPortValidateInterruptPriority+0x28>
 801a256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a25a:	f383 8811 	msr	BASEPRI, r3
 801a25e:	f3bf 8f6f 	isb	sy
 801a262:	f3bf 8f4f 	dsb	sy
 801a266:	e7fe      	b.n	801a266 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a268:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a26c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 801a270:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801a274:	4a08      	ldr	r2, [pc, #32]	@ (801a298 <vPortValidateInterruptPriority+0x58>)
 801a276:	6812      	ldr	r2, [r2, #0]
 801a278:	4293      	cmp	r3, r2
 801a27a:	d908      	bls.n	801a28e <vPortValidateInterruptPriority+0x4e>
 801a27c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a280:	f383 8811 	msr	BASEPRI, r3
 801a284:	f3bf 8f6f 	isb	sy
 801a288:	f3bf 8f4f 	dsb	sy
 801a28c:	e7fe      	b.n	801a28c <vPortValidateInterruptPriority+0x4c>
	}
 801a28e:	4770      	bx	lr
 801a290:	e000e3f0 	.word	0xe000e3f0
 801a294:	20003cc4 	.word	0x20003cc4
 801a298:	20003cc0 	.word	0x20003cc0

0801a29c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a29c:	4a12      	ldr	r2, [pc, #72]	@ (801a2e8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a29e:	f012 0f07 	tst.w	r2, #7
 801a2a2:	d01f      	beq.n	801a2e4 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a2a4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a2a6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a2aa:	f5c1 33b0 	rsb	r3, r1, #90112	@ 0x16000
 801a2ae:	33f8      	adds	r3, #248	@ 0xf8
 801a2b0:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a2b2:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a2b4:	480d      	ldr	r0, [pc, #52]	@ (801a2ec <prvHeapInit+0x50>)
 801a2b6:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a2b8:	2100      	movs	r1, #0
 801a2ba:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a2bc:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 801a2be:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a2c0:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 801a2c4:	480a      	ldr	r0, [pc, #40]	@ (801a2f0 <prvHeapInit+0x54>)
 801a2c6:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 801a2c8:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a2ca:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a2cc:	1a99      	subs	r1, r3, r2
 801a2ce:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a2d0:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a2d2:	4b08      	ldr	r3, [pc, #32]	@ (801a2f4 <prvHeapInit+0x58>)
 801a2d4:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a2d6:	4b08      	ldr	r3, [pc, #32]	@ (801a2f8 <prvHeapInit+0x5c>)
 801a2d8:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a2da:	4b08      	ldr	r3, [pc, #32]	@ (801a2fc <prvHeapInit+0x60>)
 801a2dc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801a2e0:	601a      	str	r2, [r3, #0]
}
 801a2e2:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a2e4:	4b06      	ldr	r3, [pc, #24]	@ (801a300 <prvHeapInit+0x64>)
 801a2e6:	e7e5      	b.n	801a2b4 <prvHeapInit+0x18>
 801a2e8:	20003ce8 	.word	0x20003ce8
 801a2ec:	20003ce0 	.word	0x20003ce0
 801a2f0:	20003cdc 	.word	0x20003cdc
 801a2f4:	20003cd4 	.word	0x20003cd4
 801a2f8:	20003cd8 	.word	0x20003cd8
 801a2fc:	20003cc8 	.word	0x20003cc8
 801a300:	000160f8 	.word	0x000160f8

0801a304 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a304:	4b16      	ldr	r3, [pc, #88]	@ (801a360 <prvInsertBlockIntoFreeList+0x5c>)
 801a306:	461a      	mov	r2, r3
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	4283      	cmp	r3, r0
 801a30c:	d3fb      	bcc.n	801a306 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a30e:	6851      	ldr	r1, [r2, #4]
 801a310:	eb02 0c01 	add.w	ip, r2, r1
 801a314:	4584      	cmp	ip, r0
 801a316:	d009      	beq.n	801a32c <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a318:	6841      	ldr	r1, [r0, #4]
 801a31a:	eb00 0c01 	add.w	ip, r0, r1
 801a31e:	4563      	cmp	r3, ip
 801a320:	d009      	beq.n	801a336 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a322:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a324:	4290      	cmp	r0, r2
 801a326:	d019      	beq.n	801a35c <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a328:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 801a32a:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a32c:	6840      	ldr	r0, [r0, #4]
 801a32e:	4401      	add	r1, r0
 801a330:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 801a332:	4610      	mov	r0, r2
 801a334:	e7f0      	b.n	801a318 <prvInsertBlockIntoFreeList+0x14>
{
 801a336:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a338:	4c0a      	ldr	r4, [pc, #40]	@ (801a364 <prvInsertBlockIntoFreeList+0x60>)
 801a33a:	6824      	ldr	r4, [r4, #0]
 801a33c:	42a3      	cmp	r3, r4
 801a33e:	d00b      	beq.n	801a358 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a340:	685b      	ldr	r3, [r3, #4]
 801a342:	4419      	add	r1, r3
 801a344:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a346:	6813      	ldr	r3, [r2, #0]
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 801a34c:	4290      	cmp	r0, r2
 801a34e:	d000      	beq.n	801a352 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a350:	6010      	str	r0, [r2, #0]
	}
}
 801a352:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a356:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a358:	6004      	str	r4, [r0, #0]
 801a35a:	e7f7      	b.n	801a34c <prvInsertBlockIntoFreeList+0x48>
 801a35c:	4770      	bx	lr
 801a35e:	bf00      	nop
 801a360:	20003ce0 	.word	0x20003ce0
 801a364:	20003cdc 	.word	0x20003cdc

0801a368 <pvPortMalloc>:
{
 801a368:	b538      	push	{r3, r4, r5, lr}
 801a36a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801a36c:	f7ff f848 	bl	8019400 <vTaskSuspendAll>
		if( pxEnd == NULL )
 801a370:	4b38      	ldr	r3, [pc, #224]	@ (801a454 <pvPortMalloc+0xec>)
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	b1b3      	cbz	r3, 801a3a4 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a376:	4b38      	ldr	r3, [pc, #224]	@ (801a458 <pvPortMalloc+0xf0>)
 801a378:	681b      	ldr	r3, [r3, #0]
 801a37a:	421c      	tst	r4, r3
 801a37c:	d150      	bne.n	801a420 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 801a37e:	2c00      	cmp	r4, #0
 801a380:	d050      	beq.n	801a424 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 801a382:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a386:	f014 0f07 	tst.w	r4, #7
 801a38a:	d002      	beq.n	801a392 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a38c:	f022 0207 	bic.w	r2, r2, #7
 801a390:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a392:	2a00      	cmp	r2, #0
 801a394:	d055      	beq.n	801a442 <pvPortMalloc+0xda>
 801a396:	4b31      	ldr	r3, [pc, #196]	@ (801a45c <pvPortMalloc+0xf4>)
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	4293      	cmp	r3, r2
 801a39c:	d353      	bcc.n	801a446 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 801a39e:	4930      	ldr	r1, [pc, #192]	@ (801a460 <pvPortMalloc+0xf8>)
 801a3a0:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a3a2:	e004      	b.n	801a3ae <pvPortMalloc+0x46>
			prvHeapInit();
 801a3a4:	f7ff ff7a 	bl	801a29c <prvHeapInit>
 801a3a8:	e7e5      	b.n	801a376 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 801a3aa:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 801a3ac:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a3ae:	6863      	ldr	r3, [r4, #4]
 801a3b0:	4293      	cmp	r3, r2
 801a3b2:	d202      	bcs.n	801a3ba <pvPortMalloc+0x52>
 801a3b4:	6823      	ldr	r3, [r4, #0]
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d1f7      	bne.n	801a3aa <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 801a3ba:	4b26      	ldr	r3, [pc, #152]	@ (801a454 <pvPortMalloc+0xec>)
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	42a3      	cmp	r3, r4
 801a3c0:	d043      	beq.n	801a44a <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a3c2:	680d      	ldr	r5, [r1, #0]
 801a3c4:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a3c6:	6823      	ldr	r3, [r4, #0]
 801a3c8:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a3ca:	6863      	ldr	r3, [r4, #4]
 801a3cc:	1a9b      	subs	r3, r3, r2
 801a3ce:	2b10      	cmp	r3, #16
 801a3d0:	d910      	bls.n	801a3f4 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a3d2:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a3d4:	f010 0f07 	tst.w	r0, #7
 801a3d8:	d008      	beq.n	801a3ec <pvPortMalloc+0x84>
 801a3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a3de:	f383 8811 	msr	BASEPRI, r3
 801a3e2:	f3bf 8f6f 	isb	sy
 801a3e6:	f3bf 8f4f 	dsb	sy
 801a3ea:	e7fe      	b.n	801a3ea <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a3ec:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a3ee:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a3f0:	f7ff ff88 	bl	801a304 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a3f4:	6862      	ldr	r2, [r4, #4]
 801a3f6:	4919      	ldr	r1, [pc, #100]	@ (801a45c <pvPortMalloc+0xf4>)
 801a3f8:	680b      	ldr	r3, [r1, #0]
 801a3fa:	1a9b      	subs	r3, r3, r2
 801a3fc:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a3fe:	4919      	ldr	r1, [pc, #100]	@ (801a464 <pvPortMalloc+0xfc>)
 801a400:	6809      	ldr	r1, [r1, #0]
 801a402:	428b      	cmp	r3, r1
 801a404:	d201      	bcs.n	801a40a <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a406:	4917      	ldr	r1, [pc, #92]	@ (801a464 <pvPortMalloc+0xfc>)
 801a408:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a40a:	4b13      	ldr	r3, [pc, #76]	@ (801a458 <pvPortMalloc+0xf0>)
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	4313      	orrs	r3, r2
 801a410:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a412:	2300      	movs	r3, #0
 801a414:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 801a416:	4a14      	ldr	r2, [pc, #80]	@ (801a468 <pvPortMalloc+0x100>)
 801a418:	6813      	ldr	r3, [r2, #0]
 801a41a:	3301      	adds	r3, #1
 801a41c:	6013      	str	r3, [r2, #0]
 801a41e:	e002      	b.n	801a426 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 801a420:	2500      	movs	r5, #0
 801a422:	e000      	b.n	801a426 <pvPortMalloc+0xbe>
 801a424:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 801a426:	f7ff f885 	bl	8019534 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a42a:	f015 0f07 	tst.w	r5, #7
 801a42e:	d00e      	beq.n	801a44e <pvPortMalloc+0xe6>
 801a430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a434:	f383 8811 	msr	BASEPRI, r3
 801a438:	f3bf 8f6f 	isb	sy
 801a43c:	f3bf 8f4f 	dsb	sy
 801a440:	e7fe      	b.n	801a440 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 801a442:	2500      	movs	r5, #0
 801a444:	e7ef      	b.n	801a426 <pvPortMalloc+0xbe>
 801a446:	2500      	movs	r5, #0
 801a448:	e7ed      	b.n	801a426 <pvPortMalloc+0xbe>
 801a44a:	2500      	movs	r5, #0
 801a44c:	e7eb      	b.n	801a426 <pvPortMalloc+0xbe>
}
 801a44e:	4628      	mov	r0, r5
 801a450:	bd38      	pop	{r3, r4, r5, pc}
 801a452:	bf00      	nop
 801a454:	20003cdc 	.word	0x20003cdc
 801a458:	20003cc8 	.word	0x20003cc8
 801a45c:	20003cd8 	.word	0x20003cd8
 801a460:	20003ce0 	.word	0x20003ce0
 801a464:	20003cd4 	.word	0x20003cd4
 801a468:	20003cd0 	.word	0x20003cd0

0801a46c <vPortFree>:
	if( pv != NULL )
 801a46c:	2800      	cmp	r0, #0
 801a46e:	d034      	beq.n	801a4da <vPortFree+0x6e>
{
 801a470:	b538      	push	{r3, r4, r5, lr}
 801a472:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 801a474:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a478:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a47c:	4a17      	ldr	r2, [pc, #92]	@ (801a4dc <vPortFree+0x70>)
 801a47e:	6812      	ldr	r2, [r2, #0]
 801a480:	4213      	tst	r3, r2
 801a482:	d108      	bne.n	801a496 <vPortFree+0x2a>
 801a484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a488:	f383 8811 	msr	BASEPRI, r3
 801a48c:	f3bf 8f6f 	isb	sy
 801a490:	f3bf 8f4f 	dsb	sy
 801a494:	e7fe      	b.n	801a494 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a496:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801a49a:	b141      	cbz	r1, 801a4ae <vPortFree+0x42>
 801a49c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4a0:	f383 8811 	msr	BASEPRI, r3
 801a4a4:	f3bf 8f6f 	isb	sy
 801a4a8:	f3bf 8f4f 	dsb	sy
 801a4ac:	e7fe      	b.n	801a4ac <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a4ae:	ea23 0302 	bic.w	r3, r3, r2
 801a4b2:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 801a4b6:	f7fe ffa3 	bl	8019400 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a4ba:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801a4be:	4a08      	ldr	r2, [pc, #32]	@ (801a4e0 <vPortFree+0x74>)
 801a4c0:	6813      	ldr	r3, [r2, #0]
 801a4c2:	440b      	add	r3, r1
 801a4c4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a4c6:	4628      	mov	r0, r5
 801a4c8:	f7ff ff1c 	bl	801a304 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a4cc:	4a05      	ldr	r2, [pc, #20]	@ (801a4e4 <vPortFree+0x78>)
 801a4ce:	6813      	ldr	r3, [r2, #0]
 801a4d0:	3301      	adds	r3, #1
 801a4d2:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 801a4d4:	f7ff f82e 	bl	8019534 <xTaskResumeAll>
}
 801a4d8:	bd38      	pop	{r3, r4, r5, pc}
 801a4da:	4770      	bx	lr
 801a4dc:	20003cc8 	.word	0x20003cc8
 801a4e0:	20003cd8 	.word	0x20003cd8
 801a4e4:	20003ccc 	.word	0x20003ccc

0801a4e8 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 801a4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4ea:	4607      	mov	r7, r0
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */

	vTaskSuspendAll();
 801a4ec:	f7fe ff88 	bl	8019400 <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 801a4f0:	4b17      	ldr	r3, [pc, #92]	@ (801a550 <vPortGetHeapStats+0x68>)
 801a4f2:	681b      	ldr	r3, [r3, #0]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 801a4f4:	b193      	cbz	r3, 801a51c <vPortGetHeapStats+0x34>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801a4f6:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801a4fa:	2500      	movs	r5, #0
 801a4fc:	462c      	mov	r4, r5
 801a4fe:	e004      	b.n	801a50a <vPortGetHeapStats+0x22>
					xMinSize = pxBlock->xBlockSize;
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 801a500:	681b      	ldr	r3, [r3, #0]
			} while( pxBlock != pxEnd );
 801a502:	4a14      	ldr	r2, [pc, #80]	@ (801a554 <vPortGetHeapStats+0x6c>)
 801a504:	6812      	ldr	r2, [r2, #0]
 801a506:	429a      	cmp	r2, r3
 801a508:	d00c      	beq.n	801a524 <vPortGetHeapStats+0x3c>
				xBlocks++;
 801a50a:	3401      	adds	r4, #1
				if( pxBlock->xBlockSize > xMaxSize )
 801a50c:	685a      	ldr	r2, [r3, #4]
 801a50e:	42aa      	cmp	r2, r5
 801a510:	d900      	bls.n	801a514 <vPortGetHeapStats+0x2c>
					xMaxSize = pxBlock->xBlockSize;
 801a512:	4615      	mov	r5, r2
				if( pxBlock->xBlockSize < xMinSize )
 801a514:	42b2      	cmp	r2, r6
 801a516:	d2f3      	bcs.n	801a500 <vPortGetHeapStats+0x18>
					xMinSize = pxBlock->xBlockSize;
 801a518:	4616      	mov	r6, r2
 801a51a:	e7f1      	b.n	801a500 <vPortGetHeapStats+0x18>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801a51c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801a520:	2500      	movs	r5, #0
 801a522:	462c      	mov	r4, r5
		}
	}
	xTaskResumeAll();
 801a524:	f7ff f806 	bl	8019534 <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 801a528:	607d      	str	r5, [r7, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 801a52a:	60be      	str	r6, [r7, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 801a52c:	60fc      	str	r4, [r7, #12]

	taskENTER_CRITICAL();
 801a52e:	f7ff fd61 	bl	8019ff4 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 801a532:	4b09      	ldr	r3, [pc, #36]	@ (801a558 <vPortGetHeapStats+0x70>)
 801a534:	681b      	ldr	r3, [r3, #0]
 801a536:	603b      	str	r3, [r7, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 801a538:	4b08      	ldr	r3, [pc, #32]	@ (801a55c <vPortGetHeapStats+0x74>)
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	617b      	str	r3, [r7, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 801a53e:	4b08      	ldr	r3, [pc, #32]	@ (801a560 <vPortGetHeapStats+0x78>)
 801a540:	681b      	ldr	r3, [r3, #0]
 801a542:	61bb      	str	r3, [r7, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 801a544:	4b07      	ldr	r3, [pc, #28]	@ (801a564 <vPortGetHeapStats+0x7c>)
 801a546:	681b      	ldr	r3, [r3, #0]
 801a548:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801a54a:	f7ff fd75 	bl	801a038 <vPortExitCritical>
}
 801a54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a550:	20003ce0 	.word	0x20003ce0
 801a554:	20003cdc 	.word	0x20003cdc
 801a558:	20003cd8 	.word	0x20003cd8
 801a55c:	20003cd0 	.word	0x20003cd0
 801a560:	20003ccc 	.word	0x20003ccc
 801a564:	20003cd4 	.word	0x20003cd4

0801a568 <block_device_sync>:
	return 0;
}

int block_device_sync(const struct lfs_config *c){
	return 0;
}
 801a568:	2000      	movs	r0, #0
 801a56a:	4770      	bx	lr

0801a56c <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 801a56c:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801a56e:	fb01 f400 	mul.w	r4, r1, r0
 801a572:	4620      	mov	r0, r4
 801a574:	f7ff fef8 	bl	801a368 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801a578:	4605      	mov	r5, r0
 801a57a:	b118      	cbz	r0, 801a584 <mg_calloc+0x18>
 801a57c:	4622      	mov	r2, r4
 801a57e:	2100      	movs	r1, #0
 801a580:	f011 fe7e 	bl	802c280 <memset>
}
 801a584:	4628      	mov	r0, r5
 801a586:	bd38      	pop	{r3, r4, r5, pc}

0801a588 <block_device_read>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 801a588:	b508      	push	{r3, lr}
 801a58a:	4684      	mov	ip, r0
 801a58c:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801a58e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801a592:	428b      	cmp	r3, r1
 801a594:	d90a      	bls.n	801a5ac <block_device_read+0x24>
 801a596:	4696      	mov	lr, r2
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801a598:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801a59c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a5a0:	fb01 e103 	mla	r1, r1, r3, lr
 801a5a4:	f7fb f985 	bl	80158b2 <sFLASH_ReadBuffer>
}
 801a5a8:	2000      	movs	r0, #0
 801a5aa:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801a5ac:	4b03      	ldr	r3, [pc, #12]	@ (801a5bc <block_device_read+0x34>)
 801a5ae:	4a04      	ldr	r2, [pc, #16]	@ (801a5c0 <block_device_read+0x38>)
 801a5b0:	f240 1119 	movw	r1, #281	@ 0x119
 801a5b4:	4803      	ldr	r0, [pc, #12]	@ (801a5c4 <block_device_read+0x3c>)
 801a5b6:	f00f f911 	bl	80297dc <__assert_func>
 801a5ba:	bf00      	nop
 801a5bc:	08038428 	.word	0x08038428
 801a5c0:	080384a4 	.word	0x080384a4
 801a5c4:	08038440 	.word	0x08038440

0801a5c8 <block_device_erase>:
int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 801a5c8:	b508      	push	{r3, lr}
	assert(block < c->block_count);
 801a5ca:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801a5cc:	428b      	cmp	r3, r1
 801a5ce:	d906      	bls.n	801a5de <block_device_erase+0x16>
	sFLASH_EraseSector(block * (c -> block_size));
 801a5d0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801a5d2:	fb01 f000 	mul.w	r0, r1, r0
 801a5d6:	f7fb faa9 	bl	8015b2c <sFLASH_EraseSector>
}
 801a5da:	2000      	movs	r0, #0
 801a5dc:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801a5de:	4b03      	ldr	r3, [pc, #12]	@ (801a5ec <block_device_erase+0x24>)
 801a5e0:	4a03      	ldr	r2, [pc, #12]	@ (801a5f0 <block_device_erase+0x28>)
 801a5e2:	f240 1121 	movw	r1, #289	@ 0x121
 801a5e6:	4803      	ldr	r0, [pc, #12]	@ (801a5f4 <block_device_erase+0x2c>)
 801a5e8:	f00f f8f8 	bl	80297dc <__assert_func>
 801a5ec:	08038428 	.word	0x08038428
 801a5f0:	08038490 	.word	0x08038490
 801a5f4:	08038440 	.word	0x08038440

0801a5f8 <block_device_prog>:
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 801a5f8:	b508      	push	{r3, lr}
 801a5fa:	4684      	mov	ip, r0
 801a5fc:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801a5fe:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801a602:	428b      	cmp	r3, r1
 801a604:	d90a      	bls.n	801a61c <block_device_prog+0x24>
 801a606:	4696      	mov	lr, r2
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801a608:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801a60c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a610:	fb01 e103 	mla	r1, r1, r3, lr
 801a614:	f7fb fac8 	bl	8015ba8 <sFLASH_WriteBuffer>
}
 801a618:	2000      	movs	r0, #0
 801a61a:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801a61c:	4b03      	ldr	r3, [pc, #12]	@ (801a62c <block_device_prog+0x34>)
 801a61e:	4a04      	ldr	r2, [pc, #16]	@ (801a630 <block_device_prog+0x38>)
 801a620:	f240 1129 	movw	r1, #297	@ 0x129
 801a624:	4803      	ldr	r0, [pc, #12]	@ (801a634 <block_device_prog+0x3c>)
 801a626:	f00f f8d9 	bl	80297dc <__assert_func>
 801a62a:	bf00      	nop
 801a62c:	08038428 	.word	0x08038428
 801a630:	0803847c 	.word	0x0803847c
 801a634:	08038440 	.word	0x08038440

0801a638 <mg_fs_lfs_status>:
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 801a638:	b530      	push	{r4, r5, lr}
 801a63a:	b0c3      	sub	sp, #268	@ 0x10c
 801a63c:	460d      	mov	r5, r1
 801a63e:	4614      	mov	r4, r2
    if (lfs_stat(&lfs, path, &info) == 0) {
 801a640:	466a      	mov	r2, sp
 801a642:	4601      	mov	r1, r0
 801a644:	480b      	ldr	r0, [pc, #44]	@ (801a674 <mg_fs_lfs_status+0x3c>)
 801a646:	f004 fd97 	bl	801f178 <lfs_stat>
 801a64a:	b110      	cbz	r0, 801a652 <mg_fs_lfs_status+0x1a>
    return 0;
 801a64c:	2000      	movs	r0, #0
}
 801a64e:	b043      	add	sp, #268	@ 0x10c
 801a650:	bd30      	pop	{r4, r5, pc}
        if (size) *size = info.size;
 801a652:	b10d      	cbz	r5, 801a658 <mg_fs_lfs_status+0x20>
 801a654:	9b01      	ldr	r3, [sp, #4]
 801a656:	602b      	str	r3, [r5, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 801a658:	b11c      	cbz	r4, 801a662 <mg_fs_lfs_status+0x2a>
 801a65a:	2200      	movs	r2, #0
 801a65c:	2300      	movs	r3, #0
 801a65e:	e9c4 2300 	strd	r2, r3, [r4]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 801a662:	f89d 3000 	ldrb.w	r3, [sp]
 801a666:	2b02      	cmp	r3, #2
 801a668:	d001      	beq.n	801a66e <mg_fs_lfs_status+0x36>
 801a66a:	2001      	movs	r0, #1
 801a66c:	e7ef      	b.n	801a64e <mg_fs_lfs_status+0x16>
 801a66e:	2004      	movs	r0, #4
 801a670:	e7ed      	b.n	801a64e <mg_fs_lfs_status+0x16>
 801a672:	bf00      	nop
 801a674:	20019e40 	.word	0x20019e40

0801a678 <mg_fs_lfs_list>:
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 801a678:	b530      	push	{r4, r5, lr}
 801a67a:	b0d1      	sub	sp, #324	@ 0x144
 801a67c:	460d      	mov	r5, r1
 801a67e:	4614      	mov	r4, r2
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 801a680:	4602      	mov	r2, r0
 801a682:	a901      	add	r1, sp, #4
 801a684:	480a      	ldr	r0, [pc, #40]	@ (801a6b0 <mg_fs_lfs_list+0x38>)
 801a686:	f004 fe9d 	bl	801f3c4 <lfs_dir_open>
 801a68a:	b120      	cbz	r0, 801a696 <mg_fs_lfs_list+0x1e>
}
 801a68c:	b051      	add	sp, #324	@ 0x144
 801a68e:	bd30      	pop	{r4, r5, pc}
            fn(info.name, userdata);
 801a690:	4621      	mov	r1, r4
 801a692:	a810      	add	r0, sp, #64	@ 0x40
 801a694:	47a8      	blx	r5
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 801a696:	aa0e      	add	r2, sp, #56	@ 0x38
 801a698:	a901      	add	r1, sp, #4
 801a69a:	4805      	ldr	r0, [pc, #20]	@ (801a6b0 <mg_fs_lfs_list+0x38>)
 801a69c:	f004 fecd 	bl	801f43a <lfs_dir_read>
 801a6a0:	2800      	cmp	r0, #0
 801a6a2:	dcf5      	bgt.n	801a690 <mg_fs_lfs_list+0x18>
        lfs_dir_close(&lfs, &dir);
 801a6a4:	a901      	add	r1, sp, #4
 801a6a6:	4802      	ldr	r0, [pc, #8]	@ (801a6b0 <mg_fs_lfs_list+0x38>)
 801a6a8:	f004 feb4 	bl	801f414 <lfs_dir_close>
}
 801a6ac:	e7ee      	b.n	801a68c <mg_fs_lfs_list+0x14>
 801a6ae:	bf00      	nop
 801a6b0:	20019e40 	.word	0x20019e40

0801a6b4 <mg_fs_lfs_open>:
void *mg_fs_lfs_open(const char *path, int flags) {
 801a6b4:	b570      	push	{r4, r5, r6, lr}
 801a6b6:	4605      	mov	r5, r0
 801a6b8:	460c      	mov	r4, r1
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 801a6ba:	2054      	movs	r0, #84	@ 0x54
 801a6bc:	f7ff fe54 	bl	801a368 <pvPortMalloc>
    if (fd == NULL) return NULL;
 801a6c0:	4606      	mov	r6, r0
 801a6c2:	b188      	cbz	r0, 801a6e8 <mg_fs_lfs_open+0x34>
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 801a6c4:	f014 0301 	ands.w	r3, r4, #1
 801a6c8:	d000      	beq.n	801a6cc <mg_fs_lfs_open+0x18>
 801a6ca:	2301      	movs	r3, #1
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 801a6cc:	f014 0f02 	tst.w	r4, #2
 801a6d0:	d003      	beq.n	801a6da <mg_fs_lfs_open+0x26>
 801a6d2:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 801a6d6:	f043 0302 	orr.w	r3, r3, #2
    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 801a6da:	462a      	mov	r2, r5
 801a6dc:	4631      	mov	r1, r6
 801a6de:	4806      	ldr	r0, [pc, #24]	@ (801a6f8 <mg_fs_lfs_open+0x44>)
 801a6e0:	f004 fd60 	bl	801f1a4 <lfs_file_open>
 801a6e4:	2800      	cmp	r0, #0
 801a6e6:	db01      	blt.n	801a6ec <mg_fs_lfs_open+0x38>
}
 801a6e8:	4630      	mov	r0, r6
 801a6ea:	bd70      	pop	{r4, r5, r6, pc}
        free(fd);
 801a6ec:	4630      	mov	r0, r6
 801a6ee:	f7ff febd 	bl	801a46c <vPortFree>
        return NULL;
 801a6f2:	2600      	movs	r6, #0
 801a6f4:	e7f8      	b.n	801a6e8 <mg_fs_lfs_open+0x34>
 801a6f6:	bf00      	nop
 801a6f8:	20019e40 	.word	0x20019e40

0801a6fc <mg_fs_lfs_close>:
void mg_fs_lfs_close(void *fd) {
 801a6fc:	b510      	push	{r4, lr}
 801a6fe:	4604      	mov	r4, r0
    lfs_file_close(&lfs, &file->file);
 801a700:	4601      	mov	r1, r0
 801a702:	4803      	ldr	r0, [pc, #12]	@ (801a710 <mg_fs_lfs_close+0x14>)
 801a704:	f004 fd7a 	bl	801f1fc <lfs_file_close>
    free(file);
 801a708:	4620      	mov	r0, r4
 801a70a:	f7ff feaf 	bl	801a46c <vPortFree>
}
 801a70e:	bd10      	pop	{r4, pc}
 801a710:	20019e40 	.word	0x20019e40

0801a714 <mg_fs_lfs_read>:
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 801a714:	b508      	push	{r3, lr}
 801a716:	4613      	mov	r3, r2
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 801a718:	460a      	mov	r2, r1
 801a71a:	4601      	mov	r1, r0
 801a71c:	4802      	ldr	r0, [pc, #8]	@ (801a728 <mg_fs_lfs_read+0x14>)
 801a71e:	f004 fd93 	bl	801f248 <lfs_file_read>
}
 801a722:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801a726:	bd08      	pop	{r3, pc}
 801a728:	20019e40 	.word	0x20019e40

0801a72c <mg_fs_lfs_write>:
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 801a72c:	b508      	push	{r3, lr}
 801a72e:	4613      	mov	r3, r2
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 801a730:	460a      	mov	r2, r1
 801a732:	4601      	mov	r1, r0
 801a734:	4802      	ldr	r0, [pc, #8]	@ (801a740 <mg_fs_lfs_write+0x14>)
 801a736:	f004 fdb3 	bl	801f2a0 <lfs_file_write>
}
 801a73a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801a73e:	bd08      	pop	{r3, pc}
 801a740:	20019e40 	.word	0x20019e40

0801a744 <mg_fs_lfs_seek>:
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 801a744:	b510      	push	{r4, lr}
 801a746:	4604      	mov	r4, r0
 801a748:	460a      	mov	r2, r1
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 801a74a:	2300      	movs	r3, #0
 801a74c:	4601      	mov	r1, r0
 801a74e:	4809      	ldr	r0, [pc, #36]	@ (801a774 <mg_fs_lfs_seek+0x30>)
 801a750:	f004 fdd2 	bl	801f2f8 <lfs_file_seek>
 801a754:	2800      	cmp	r0, #0
 801a756:	db06      	blt.n	801a766 <mg_fs_lfs_seek+0x22>
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 801a758:	4621      	mov	r1, r4
 801a75a:	4806      	ldr	r0, [pc, #24]	@ (801a774 <mg_fs_lfs_seek+0x30>)
 801a75c:	f004 fdf8 	bl	801f350 <lfs_file_tell>
     if (pos < 0) {
 801a760:	2800      	cmp	r0, #0
 801a762:	db03      	blt.n	801a76c <mg_fs_lfs_seek+0x28>
}
 801a764:	bd10      	pop	{r4, pc}
        return (size_t)-1;  // Ошибка при перемещении
 801a766:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a76a:	e7fb      	b.n	801a764 <mg_fs_lfs_seek+0x20>
         return (size_t)-1;  // Ошибка при получении позиции
 801a76c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a770:	e7f8      	b.n	801a764 <mg_fs_lfs_seek+0x20>
 801a772:	bf00      	nop
 801a774:	20019e40 	.word	0x20019e40

0801a778 <mg_fs_lfs_rename>:
bool mg_fs_lfs_rename(const char *from, const char *to) {
 801a778:	b508      	push	{r3, lr}
 801a77a:	460a      	mov	r2, r1
    return lfs_rename(&lfs, from, to) == 0;
 801a77c:	4601      	mov	r1, r0
 801a77e:	4803      	ldr	r0, [pc, #12]	@ (801a78c <mg_fs_lfs_rename+0x14>)
 801a780:	f004 fce5 	bl	801f14e <lfs_rename>
}
 801a784:	fab0 f080 	clz	r0, r0
 801a788:	0940      	lsrs	r0, r0, #5
 801a78a:	bd08      	pop	{r3, pc}
 801a78c:	20019e40 	.word	0x20019e40

0801a790 <mg_fs_lfs_remove>:
bool mg_fs_lfs_remove(const char *path) {
 801a790:	b508      	push	{r3, lr}
 801a792:	4601      	mov	r1, r0
    return lfs_remove(&lfs, path) == 0;
 801a794:	4803      	ldr	r0, [pc, #12]	@ (801a7a4 <mg_fs_lfs_remove+0x14>)
 801a796:	f004 fcc7 	bl	801f128 <lfs_remove>
}
 801a79a:	fab0 f080 	clz	r0, r0
 801a79e:	0940      	lsrs	r0, r0, #5
 801a7a0:	bd08      	pop	{r3, pc}
 801a7a2:	bf00      	nop
 801a7a4:	20019e40 	.word	0x20019e40

0801a7a8 <mg_fs_lfs_mkdir>:
bool mg_fs_lfs_mkdir(const char *path) {
 801a7a8:	b508      	push	{r3, lr}
 801a7aa:	4601      	mov	r1, r0
    return lfs_mkdir(&lfs, path) == 0;
 801a7ac:	4803      	ldr	r0, [pc, #12]	@ (801a7bc <mg_fs_lfs_mkdir+0x14>)
 801a7ae:	f004 fdf5 	bl	801f39c <lfs_mkdir>
}
 801a7b2:	fab0 f080 	clz	r0, r0
 801a7b6:	0940      	lsrs	r0, r0, #5
 801a7b8:	bd08      	pop	{r3, pc}
 801a7ba:	bf00      	nop
 801a7bc:	20019e40 	.word	0x20019e40

0801a7c0 <mg_fs_mounted>:
}
 801a7c0:	4b01      	ldr	r3, [pc, #4]	@ (801a7c8 <mg_fs_mounted+0x8>)
 801a7c2:	7818      	ldrb	r0, [r3, #0]
 801a7c4:	4770      	bx	lr
 801a7c6:	bf00      	nop
 801a7c8:	20019de0 	.word	0x20019de0

0801a7cc <lfs_fs_ll_init>:
int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 801a7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7d0:	b090      	sub	sp, #64	@ 0x40
 801a7d2:	4680      	mov	r8, r0
 801a7d4:	460f      	mov	r7, r1
	flash_info = sFLASH_GetInfo();
 801a7d6:	4668      	mov	r0, sp
 801a7d8:	f7fb f8c4 	bl	8015964 <sFLASH_GetInfo>
	if (flash_info.flash_id == 0x0) return -1;
 801a7dc:	9b00      	ldr	r3, [sp, #0]
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	d054      	beq.n	801a88c <lfs_fs_ll_init+0xc0>
	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 801a7e2:	f8bd 400a 	ldrh.w	r4, [sp, #10]
 801a7e6:	4621      	mov	r1, r4
 801a7e8:	2001      	movs	r0, #1
 801a7ea:	f7ff febf 	bl	801a56c <mg_calloc>
 801a7ee:	4605      	mov	r5, r0
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 801a7f0:	4621      	mov	r1, r4
 801a7f2:	2001      	movs	r0, #1
 801a7f4:	f7ff feba 	bl	801a56c <mg_calloc>
 801a7f8:	4606      	mov	r6, r0
	void * lookahead_buff = calloc(1, flash_info.page_size);
 801a7fa:	4621      	mov	r1, r4
 801a7fc:	2001      	movs	r0, #1
 801a7fe:	f7ff feb5 	bl	801a56c <mg_calloc>
	if (!(read_buff || write_buff || lookahead_buff)){
 801a802:	2d00      	cmp	r5, #0
 801a804:	d02b      	beq.n	801a85e <lfs_fs_ll_init+0x92>
	cfg.read_size         = flash_info.read_size;
 801a806:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a80a:	4922      	ldr	r1, [pc, #136]	@ (801a894 <lfs_fs_ll_init+0xc8>)
 801a80c:	61cb      	str	r3, [r1, #28]
	cfg.prog_size         = flash_info.write_size;
 801a80e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a812:	620b      	str	r3, [r1, #32]
    cfg.block_size        = flash_info.erase_size;
 801a814:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a818:	624b      	str	r3, [r1, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 801a81a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801a81e:	628b      	str	r3, [r1, #40]	@ 0x28
    cfg.lookahead_size    = flash_info.page_size;
 801a820:	634c      	str	r4, [r1, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 801a822:	630c      	str	r4, [r1, #48]	@ 0x30
    cfg.read_buffer       = read_buff;
 801a824:	63cd      	str	r5, [r1, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 801a826:	640e      	str	r6, [r1, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 801a828:	6448      	str	r0, [r1, #68]	@ 0x44
    cfg.read   = block_device_read;
 801a82a:	4b1b      	ldr	r3, [pc, #108]	@ (801a898 <lfs_fs_ll_init+0xcc>)
 801a82c:	604b      	str	r3, [r1, #4]
    cfg.prog   = block_device_prog;
 801a82e:	4b1b      	ldr	r3, [pc, #108]	@ (801a89c <lfs_fs_ll_init+0xd0>)
 801a830:	608b      	str	r3, [r1, #8]
    cfg.erase  = block_device_erase;
 801a832:	4b1b      	ldr	r3, [pc, #108]	@ (801a8a0 <lfs_fs_ll_init+0xd4>)
 801a834:	60cb      	str	r3, [r1, #12]
    cfg.sync   = block_device_sync;
 801a836:	4b1b      	ldr	r3, [pc, #108]	@ (801a8a4 <lfs_fs_ll_init+0xd8>)
 801a838:	610b      	str	r3, [r1, #16]
    cfg.lock 	= lock;
 801a83a:	f8c1 8014 	str.w	r8, [r1, #20]
	cfg.unlock	= unlock;
 801a83e:	618f      	str	r7, [r1, #24]
    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 801a840:	f242 7310 	movw	r3, #10000	@ 0x2710
 801a844:	62cb      	str	r3, [r1, #44]	@ 0x2c
    if (lfs_mount(&lfs, &cfg)< 0){
 801a846:	4818      	ldr	r0, [pc, #96]	@ (801a8a8 <lfs_fs_ll_init+0xdc>)
 801a848:	f004 fc5b 	bl	801f102 <lfs_mount>
 801a84c:	2800      	cmp	r0, #0
 801a84e:	db0d      	blt.n	801a86c <lfs_fs_ll_init+0xa0>
    	fs_mounted = 1;
 801a850:	4b16      	ldr	r3, [pc, #88]	@ (801a8ac <lfs_fs_ll_init+0xe0>)
 801a852:	2201      	movs	r2, #1
 801a854:	701a      	strb	r2, [r3, #0]
    	return 0;
 801a856:	2000      	movs	r0, #0
}
 801a858:	b010      	add	sp, #64	@ 0x40
 801a85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(read_buff || write_buff || lookahead_buff)){
 801a85e:	2e00      	cmp	r6, #0
 801a860:	d1d1      	bne.n	801a806 <lfs_fs_ll_init+0x3a>
 801a862:	2800      	cmp	r0, #0
 801a864:	d1cf      	bne.n	801a806 <lfs_fs_ll_init+0x3a>
		return -2;
 801a866:	f06f 0001 	mvn.w	r0, #1
 801a86a:	e7f5      	b.n	801a858 <lfs_fs_ll_init+0x8c>
    	lfs_format(&lfs, &cfg);
 801a86c:	4d09      	ldr	r5, [pc, #36]	@ (801a894 <lfs_fs_ll_init+0xc8>)
 801a86e:	4c0e      	ldr	r4, [pc, #56]	@ (801a8a8 <lfs_fs_ll_init+0xdc>)
 801a870:	4629      	mov	r1, r5
 801a872:	4620      	mov	r0, r4
 801a874:	f004 fc32 	bl	801f0dc <lfs_format>
    	if((err = lfs_mount(&lfs, &cfg)) == 0) fs_mounted = 1;
 801a878:	4629      	mov	r1, r5
 801a87a:	4620      	mov	r0, r4
 801a87c:	f004 fc41 	bl	801f102 <lfs_mount>
 801a880:	2800      	cmp	r0, #0
 801a882:	d1e9      	bne.n	801a858 <lfs_fs_ll_init+0x8c>
 801a884:	4b09      	ldr	r3, [pc, #36]	@ (801a8ac <lfs_fs_ll_init+0xe0>)
 801a886:	2201      	movs	r2, #1
 801a888:	701a      	strb	r2, [r3, #0]
    	return err;
 801a88a:	e7e5      	b.n	801a858 <lfs_fs_ll_init+0x8c>
	if (flash_info.flash_id == 0x0) return -1;
 801a88c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a890:	e7e2      	b.n	801a858 <lfs_fs_ll_init+0x8c>
 801a892:	bf00      	nop
 801a894:	20019de4 	.word	0x20019de4
 801a898:	0801a589 	.word	0x0801a589
 801a89c:	0801a5f9 	.word	0x0801a5f9
 801a8a0:	0801a5c9 	.word	0x0801a5c9
 801a8a4:	0801a569 	.word	0x0801a569
 801a8a8:	20019e40 	.word	0x20019e40
 801a8ac:	20019de0 	.word	0x20019de0

0801a8b0 <lfs_pair_issync>:
}

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801a8b0:	6803      	ldr	r3, [r0, #0]
 801a8b2:	680a      	ldr	r2, [r1, #0]
 801a8b4:	4293      	cmp	r3, r2
 801a8b6:	d004      	beq.n	801a8c2 <lfs_pair_issync+0x12>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801a8b8:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801a8ba:	428b      	cmp	r3, r1
 801a8bc:	d015      	beq.n	801a8ea <lfs_pair_issync+0x3a>
 801a8be:	2000      	movs	r0, #0
 801a8c0:	4770      	bx	lr
        const lfs_block_t pairb[2]) {
 801a8c2:	b430      	push	{r4, r5}
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801a8c4:	6844      	ldr	r4, [r0, #4]
 801a8c6:	684d      	ldr	r5, [r1, #4]
 801a8c8:	42ac      	cmp	r4, r5
 801a8ca:	d00a      	beq.n	801a8e2 <lfs_pair_issync+0x32>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801a8cc:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801a8ce:	428b      	cmp	r3, r1
 801a8d0:	d002      	beq.n	801a8d8 <lfs_pair_issync+0x28>
 801a8d2:	2000      	movs	r0, #0
}
 801a8d4:	bc30      	pop	{r4, r5}
 801a8d6:	4770      	bx	lr
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801a8d8:	6843      	ldr	r3, [r0, #4]
 801a8da:	429a      	cmp	r2, r3
 801a8dc:	d003      	beq.n	801a8e6 <lfs_pair_issync+0x36>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801a8de:	2000      	movs	r0, #0
 801a8e0:	e7f8      	b.n	801a8d4 <lfs_pair_issync+0x24>
 801a8e2:	2001      	movs	r0, #1
 801a8e4:	e7f6      	b.n	801a8d4 <lfs_pair_issync+0x24>
 801a8e6:	2001      	movs	r0, #1
 801a8e8:	e7f4      	b.n	801a8d4 <lfs_pair_issync+0x24>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801a8ea:	6843      	ldr	r3, [r0, #4]
 801a8ec:	429a      	cmp	r2, r3
 801a8ee:	d001      	beq.n	801a8f4 <lfs_pair_issync+0x44>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801a8f0:	2000      	movs	r0, #0
 801a8f2:	4770      	bx	lr
 801a8f4:	2001      	movs	r0, #1
}
 801a8f6:	4770      	bx	lr

0801a8f8 <lfs_gstate_xor>:
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	2b02      	cmp	r3, #2
 801a8fc:	dc0d      	bgt.n	801a91a <lfs_gstate_xor+0x22>
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 801a8fe:	b410      	push	{r4}
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 801a900:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801a904:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 801a908:	4062      	eors	r2, r4
 801a90a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 801a90e:	3301      	adds	r3, #1
 801a910:	2b02      	cmp	r3, #2
 801a912:	ddf5      	ble.n	801a900 <lfs_gstate_xor+0x8>
    }
}
 801a914:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a918:	4770      	bx	lr
 801a91a:	4770      	bx	lr

0801a91c <lfs_gstate_hasmovehere>:
    return lfs_tag_size(a->tag) >> 9;
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801a91c:	6803      	ldr	r3, [r0, #0]
    return (tag & 0x70000000) >> 20;
 801a91e:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801a920:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801a924:	d00f      	beq.n	801a946 <lfs_gstate_hasmovehere+0x2a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801a926:	6843      	ldr	r3, [r0, #4]
 801a928:	680a      	ldr	r2, [r1, #0]
 801a92a:	4293      	cmp	r3, r2
 801a92c:	d00d      	beq.n	801a94a <lfs_gstate_hasmovehere+0x2e>
 801a92e:	6880      	ldr	r0, [r0, #8]
 801a930:	6849      	ldr	r1, [r1, #4]
 801a932:	4288      	cmp	r0, r1
 801a934:	d00b      	beq.n	801a94e <lfs_gstate_hasmovehere+0x32>
 801a936:	428b      	cmp	r3, r1
 801a938:	d00b      	beq.n	801a952 <lfs_gstate_hasmovehere+0x36>
 801a93a:	4282      	cmp	r2, r0
 801a93c:	d001      	beq.n	801a942 <lfs_gstate_hasmovehere+0x26>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801a93e:	2000      	movs	r0, #0
}
 801a940:	4770      	bx	lr
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801a942:	2001      	movs	r0, #1
 801a944:	4770      	bx	lr
 801a946:	2000      	movs	r0, #0
 801a948:	4770      	bx	lr
 801a94a:	2001      	movs	r0, #1
 801a94c:	4770      	bx	lr
 801a94e:	2001      	movs	r0, #1
 801a950:	4770      	bx	lr
 801a952:	2001      	movs	r0, #1
 801a954:	4770      	bx	lr

0801a956 <lfs_mlist_isopen>:
}
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 801a956:	b082      	sub	sp, #8
 801a958:	9001      	str	r0, [sp, #4]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 801a95a:	ab01      	add	r3, sp, #4
 801a95c:	681b      	ldr	r3, [r3, #0]
 801a95e:	b11b      	cbz	r3, 801a968 <lfs_mlist_isopen+0x12>
        if (*p == (struct lfs_mlist*)node) {
 801a960:	428b      	cmp	r3, r1
 801a962:	d1fb      	bne.n	801a95c <lfs_mlist_isopen+0x6>
            return true;
 801a964:	2001      	movs	r0, #1
 801a966:	e000      	b.n	801a96a <lfs_mlist_isopen+0x14>
        }
    }

    return false;
 801a968:	2000      	movs	r0, #0
}
 801a96a:	b002      	add	sp, #8
 801a96c:	4770      	bx	lr

0801a96e <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 801a96e:	3028      	adds	r0, #40	@ 0x28
 801a970:	e000      	b.n	801a974 <lfs_mlist_remove+0x6>
 801a972:	4618      	mov	r0, r3
 801a974:	6803      	ldr	r3, [r0, #0]
 801a976:	b123      	cbz	r3, 801a982 <lfs_mlist_remove+0x14>
        if (*p == mlist) {
 801a978:	428b      	cmp	r3, r1
 801a97a:	d1fa      	bne.n	801a972 <lfs_mlist_remove+0x4>
            *p = (*p)->next;
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	6003      	str	r3, [r0, #0]
            break;
 801a980:	4770      	bx	lr
        }
    }
}
 801a982:	4770      	bx	lr

0801a984 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
    mlist->next = lfs->mlist;
 801a984:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801a986:	600b      	str	r3, [r1, #0]
    lfs->mlist = mlist;
 801a988:	6281      	str	r1, [r0, #40]	@ 0x28
}
 801a98a:	4770      	bx	lr

0801a98c <lfs_fs_disk_version>:
    } else
#endif
    {
        return LFS_DISK_VERSION;
    }
}
 801a98c:	4800      	ldr	r0, [pc, #0]	@ (801a990 <lfs_fs_disk_version+0x4>)
 801a98e:	4770      	bx	lr
 801a990:	00020001 	.word	0x00020001

0801a994 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 801a994:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 801a996:	f7ff fff9 	bl	801a98c <lfs_fs_disk_version>

}
 801a99a:	0c00      	lsrs	r0, r0, #16
 801a99c:	bd08      	pop	{r3, pc}

0801a99e <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 801a99e:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 801a9a0:	f7ff fff4 	bl	801a98c <lfs_fs_disk_version>
}
 801a9a4:	b280      	uxth	r0, r0
 801a9a6:	bd08      	pop	{r3, pc}

0801a9a8 <lfs_alloc_ckpoint>:
// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
    lfs->lookahead.ckpoint = lfs->block_count;
 801a9a8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801a9aa:	6603      	str	r3, [r0, #96]	@ 0x60
}
 801a9ac:	4770      	bx	lr

0801a9ae <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 801a9ae:	b508      	push	{r3, lr}
    lfs->lookahead.size = 0;
 801a9b0:	2200      	movs	r2, #0
 801a9b2:	6582      	str	r2, [r0, #88]	@ 0x58
    lfs->lookahead.next = 0;
 801a9b4:	65c2      	str	r2, [r0, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 801a9b6:	f7ff fff7 	bl	801a9a8 <lfs_alloc_ckpoint>
}
 801a9ba:	bd08      	pop	{r3, pc}

0801a9bc <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->lookahead.start)
 801a9bc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801a9be:	1ac9      	subs	r1, r1, r3
            + lfs->block_count) % lfs->block_count;
 801a9c0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801a9c2:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->lookahead.start)
 801a9c4:	fbb1 f2f3 	udiv	r2, r1, r3
 801a9c8:	fb03 1112 	mls	r1, r3, r2, r1

    if (off < lfs->lookahead.size) {
 801a9cc:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801a9ce:	428b      	cmp	r3, r1
 801a9d0:	d90d      	bls.n	801a9ee <lfs_alloc_lookahead+0x32>
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 801a9d2:	b410      	push	{r4}
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 801a9d4:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 801a9d6:	08c8      	lsrs	r0, r1, #3
 801a9d8:	5c23      	ldrb	r3, [r4, r0]
 801a9da:	f001 0107 	and.w	r1, r1, #7
 801a9de:	2201      	movs	r2, #1
 801a9e0:	408a      	lsls	r2, r1
 801a9e2:	4313      	orrs	r3, r2
 801a9e4:	5423      	strb	r3, [r4, r0]
    }

    return 0;
}
 801a9e6:	2000      	movs	r0, #0
 801a9e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a9ec:	4770      	bx	lr
 801a9ee:	2000      	movs	r0, #0
 801a9f0:	4770      	bx	lr
	...

0801a9f4 <lfs_dir_traverse_filter>:
    return 0;
}

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 801a9f4:	b410      	push	{r4}
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801a9f6:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 801a9fa:	d01c      	beq.n	801aa36 <lfs_dir_traverse_filter+0x42>
 801a9fc:	4a19      	ldr	r2, [pc, #100]	@ (801aa64 <lfs_dir_traverse_filter+0x70>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 801a9fe:	6803      	ldr	r3, [r0, #0]
 801aa00:	ea83 0401 	eor.w	r4, r3, r1
 801aa04:	4214      	tst	r4, r2
 801aa06:	d018      	beq.n	801aa3a <lfs_dir_traverse_filter+0x46>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801aa08:	f343 0209 	sbfx	r2, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
 801aa0c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801aa10:	d013      	beq.n	801aa3a <lfs_dir_traverse_filter+0x46>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 801aa12:	4c14      	ldr	r4, [pc, #80]	@ (801aa64 <lfs_dir_traverse_filter+0x70>)
 801aa14:	400c      	ands	r4, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 801aa16:	4a14      	ldr	r2, [pc, #80]	@ (801aa68 <lfs_dir_traverse_filter+0x74>)
 801aa18:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801aa1a:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801aa1e:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 801aa22:	4294      	cmp	r4, r2
 801aa24:	d009      	beq.n	801aa3a <lfs_dir_traverse_filter+0x46>
    return (tag & 0x70000000) >> 20;
 801aa26:	0d0a      	lsrs	r2, r1, #20
 801aa28:	f402 64e0 	and.w	r4, r2, #1792	@ 0x700
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801aa2c:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 801aa30:	d009      	beq.n	801aa46 <lfs_dir_traverse_filter+0x52>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
 801aa32:	2000      	movs	r0, #0
 801aa34:	e004      	b.n	801aa40 <lfs_dir_traverse_filter+0x4c>
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801aa36:	4a0d      	ldr	r2, [pc, #52]	@ (801aa6c <lfs_dir_traverse_filter+0x78>)
 801aa38:	e7e1      	b.n	801a9fe <lfs_dir_traverse_filter+0xa>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 801aa3a:	2300      	movs	r3, #0
 801aa3c:	6003      	str	r3, [r0, #0]
        return true;
 801aa3e:	2001      	movs	r0, #1
}
 801aa40:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa44:	4770      	bx	lr
    return (tag & 0x000ffc00) >> 10;
 801aa46:	f3c1 2189 	ubfx	r1, r1, #10, #10
 801aa4a:	f3c3 2489 	ubfx	r4, r3, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801aa4e:	428c      	cmp	r4, r1
 801aa50:	d305      	bcc.n	801aa5e <lfs_dir_traverse_filter+0x6a>
    return (int8_t)lfs_tag_chunk(tag);
 801aa52:	b252      	sxtb	r2, r2
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801aa54:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 801aa58:	6003      	str	r3, [r0, #0]
    return false;
 801aa5a:	2000      	movs	r0, #0
 801aa5c:	e7f0      	b.n	801aa40 <lfs_dir_traverse_filter+0x4c>
 801aa5e:	2000      	movs	r0, #0
 801aa60:	e7ee      	b.n	801aa40 <lfs_dir_traverse_filter+0x4c>
 801aa62:	bf00      	nop
 801aa64:	7ffffc00 	.word	0x7ffffc00
 801aa68:	000ffc00 	.word	0x000ffc00
 801aa6c:	700ffc00 	.word	0x700ffc00

0801aa70 <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
 801aa70:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801aa74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801aa78:	bf08      	it	eq
 801aa7a:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
 801aa7c:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801aa80:	3104      	adds	r1, #4
#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 801aa82:	6803      	ldr	r3, [r0, #0]
 801aa84:	440b      	add	r3, r1
 801aa86:	6003      	str	r3, [r0, #0]
    return 0;
}
 801aa88:	2000      	movs	r0, #0
 801aa8a:	4770      	bx	lr

0801aa8c <lfs_dir_needsrelocation>:
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 801aa8c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801aa8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	dd0b      	ble.n	801aaac <lfs_dir_needsrelocation+0x20>
 801aa94:	688a      	ldr	r2, [r1, #8]
 801aa96:	3201      	adds	r2, #1
 801aa98:	3301      	adds	r3, #1
 801aa9a:	f043 0301 	orr.w	r3, r3, #1
 801aa9e:	fbb2 f1f3 	udiv	r1, r2, r3
 801aaa2:	fb03 2211 	mls	r2, r3, r1, r2
 801aaa6:	b11a      	cbz	r2, 801aab0 <lfs_dir_needsrelocation+0x24>
 801aaa8:	2000      	movs	r0, #0
 801aaaa:	4770      	bx	lr
 801aaac:	2000      	movs	r0, #0
 801aaae:	4770      	bx	lr
 801aab0:	2001      	movs	r0, #1
}
 801aab2:	4770      	bx	lr

0801aab4 <lfs_dir_close_>:
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);

    return 0;
}

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 801aab4:	b508      	push	{r3, lr}
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 801aab6:	f7ff ff5a 	bl	801a96e <lfs_mlist_remove>

    return 0;
}
 801aaba:	2000      	movs	r0, #0
 801aabc:	bd08      	pop	{r3, pc}

0801aabe <lfs_file_tell_>:
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}
 801aabe:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801aac0:	4770      	bx	lr

0801aac2 <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 801aac2:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801aac4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801aac8:	d101      	bne.n	801aace <lfs_file_size_+0xc>
        return lfs_max(file->pos, file->ctz.size);
    }
#endif

    return file->ctz.size;
 801aaca:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
}
 801aacc:	4770      	bx	lr
        return lfs_max(file->pos, file->ctz.size);
 801aace:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801aad0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801aad2:	4298      	cmp	r0, r3
 801aad4:	bf38      	it	cc
 801aad6:	4618      	movcc	r0, r3
 801aad8:	4770      	bx	lr

0801aada <lfs_fs_prepsuperblock>:
    return LFS_ERR_NOENT;
}
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801aada:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801aadc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 801aae0:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801aae4:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801aae6:	4770      	bx	lr

0801aae8 <lfs_fs_prepmove>:
}
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 801aae8:	b410      	push	{r4}
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801aaea:	4b13      	ldr	r3, [pc, #76]	@ (801ab38 <lfs_fs_prepmove+0x50>)
 801aaec:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801aaee:	4023      	ands	r3, r4
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801aaf0:	f240 3cff 	movw	ip, #1023	@ 0x3ff
 801aaf4:	4561      	cmp	r1, ip
 801aaf6:	d017      	beq.n	801ab28 <lfs_fs_prepmove+0x40>
 801aaf8:	ea4f 2c81 	mov.w	ip, r1, lsl #10
 801aafc:	f04c 4c9f 	orr.w	ip, ip, #1333788672	@ 0x4f800000
 801ab00:	f44c 0ce0 	orr.w	ip, ip, #7340032	@ 0x700000
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801ab04:	ea43 030c 	orr.w	r3, r3, ip
 801ab08:	6303      	str	r3, [r0, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801ab0a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ab0e:	4299      	cmp	r1, r3
 801ab10:	d00d      	beq.n	801ab2e <lfs_fs_prepmove+0x46>
 801ab12:	6813      	ldr	r3, [r2, #0]
 801ab14:	6343      	str	r3, [r0, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801ab16:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ab1a:	4299      	cmp	r1, r3
 801ab1c:	d009      	beq.n	801ab32 <lfs_fs_prepmove+0x4a>
 801ab1e:	6853      	ldr	r3, [r2, #4]
 801ab20:	6383      	str	r3, [r0, #56]	@ 0x38
}
 801ab22:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab26:	4770      	bx	lr
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801ab28:	f04f 0c00 	mov.w	ip, #0
 801ab2c:	e7ea      	b.n	801ab04 <lfs_fs_prepmove+0x1c>
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801ab2e:	2300      	movs	r3, #0
 801ab30:	e7f0      	b.n	801ab14 <lfs_fs_prepmove+0x2c>
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801ab32:	2300      	movs	r3, #0
 801ab34:	e7f4      	b.n	801ab20 <lfs_fs_prepmove+0x38>
 801ab36:	bf00      	nop
 801ab38:	800003ff 	.word	0x800003ff

0801ab3c <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 801ab3c:	6803      	ldr	r3, [r0, #0]
 801ab3e:	3301      	adds	r3, #1
 801ab40:	6003      	str	r3, [r0, #0]
    return 0;
}
 801ab42:	2000      	movs	r0, #0
 801ab44:	4770      	bx	lr
	...

0801ab48 <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 801ab48:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->block_count);
 801ab4a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801ab4c:	428b      	cmp	r3, r1
 801ab4e:	d905      	bls.n	801ab5c <lfs_bd_erase+0x14>
    int err = lfs->cfg->erase(lfs->cfg, block);
 801ab50:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801ab52:	68c3      	ldr	r3, [r0, #12]
 801ab54:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801ab56:	2800      	cmp	r0, #0
 801ab58:	dc07      	bgt.n	801ab6a <lfs_bd_erase+0x22>
}
 801ab5a:	bd08      	pop	{r3, pc}
    LFS_ASSERT(block < lfs->block_count);
 801ab5c:	4b06      	ldr	r3, [pc, #24]	@ (801ab78 <lfs_bd_erase+0x30>)
 801ab5e:	4a07      	ldr	r2, [pc, #28]	@ (801ab7c <lfs_bd_erase+0x34>)
 801ab60:	f44f 718a 	mov.w	r1, #276	@ 0x114
 801ab64:	4806      	ldr	r0, [pc, #24]	@ (801ab80 <lfs_bd_erase+0x38>)
 801ab66:	f00e fe39 	bl	80297dc <__assert_func>
    LFS_ASSERT(err <= 0);
 801ab6a:	4b06      	ldr	r3, [pc, #24]	@ (801ab84 <lfs_bd_erase+0x3c>)
 801ab6c:	4a03      	ldr	r2, [pc, #12]	@ (801ab7c <lfs_bd_erase+0x34>)
 801ab6e:	f44f 718b 	mov.w	r1, #278	@ 0x116
 801ab72:	4803      	ldr	r0, [pc, #12]	@ (801ab80 <lfs_bd_erase+0x38>)
 801ab74:	f00e fe32 	bl	80297dc <__assert_func>
 801ab78:	080385a4 	.word	0x080385a4
 801ab7c:	08039204 	.word	0x08039204
 801ab80:	080384b8 	.word	0x080384b8
 801ab84:	080384e8 	.word	0x080384e8

0801ab88 <lfs_fs_preporphans>:
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 801ab88:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801ab8a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801ab8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801ab90:	b90a      	cbnz	r2, 801ab96 <lfs_fs_preporphans+0xe>
 801ab92:	2900      	cmp	r1, #0
 801ab94:	db12      	blt.n	801abbc <lfs_fs_preporphans+0x34>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801ab96:	f5b2 7fff 	cmp.w	r2, #510	@ 0x1fe
 801ab9a:	d901      	bls.n	801aba0 <lfs_fs_preporphans+0x18>
 801ab9c:	2900      	cmp	r1, #0
 801ab9e:	dc14      	bgt.n	801abca <lfs_fs_preporphans+0x42>
    lfs->gstate.tag += orphans;
 801aba0:	4419      	add	r1, r3
 801aba2:	6301      	str	r1, [r0, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801aba4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
    return tag & 0x000003ff;
 801aba8:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return lfs_tag_size(a->tag);
 801abac:	3900      	subs	r1, #0
 801abae:	bf18      	it	ne
 801abb0:	2101      	movne	r1, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801abb2:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 801abb6:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801abb8:	2000      	movs	r0, #0
 801abba:	bd08      	pop	{r3, pc}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801abbc:	4b06      	ldr	r3, [pc, #24]	@ (801abd8 <lfs_fs_preporphans+0x50>)
 801abbe:	4a07      	ldr	r2, [pc, #28]	@ (801abdc <lfs_fs_preporphans+0x54>)
 801abc0:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 801abc4:	4806      	ldr	r0, [pc, #24]	@ (801abe0 <lfs_fs_preporphans+0x58>)
 801abc6:	f00e fe09 	bl	80297dc <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801abca:	4b06      	ldr	r3, [pc, #24]	@ (801abe4 <lfs_fs_preporphans+0x5c>)
 801abcc:	4a03      	ldr	r2, [pc, #12]	@ (801abdc <lfs_fs_preporphans+0x54>)
 801abce:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 801abd2:	4803      	ldr	r0, [pc, #12]	@ (801abe0 <lfs_fs_preporphans+0x58>)
 801abd4:	f00e fe02 	bl	80297dc <__assert_func>
 801abd8:	080384f4 	.word	0x080384f4
 801abdc:	080391d4 	.word	0x080391d4
 801abe0:	080384b8 	.word	0x080384b8
 801abe4:	0803852c 	.word	0x0803852c

0801abe8 <lfs_cache_zero>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 801abe8:	b510      	push	{r4, lr}
 801abea:	460c      	mov	r4, r1
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 801abec:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801abee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801abf0:	21ff      	movs	r1, #255	@ 0xff
 801abf2:	68e0      	ldr	r0, [r4, #12]
 801abf4:	f011 fb44 	bl	802c280 <memset>
    pcache->block = LFS_BLOCK_NULL;
 801abf8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801abfc:	6023      	str	r3, [r4, #0]
}
 801abfe:	bd10      	pop	{r4, pc}

0801ac00 <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 801ac00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
 801ac02:	680d      	ldr	r5, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 801ac04:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801ac06:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
 801ac08:	3f08      	subs	r7, #8
    lfs_off_t i = size / b;
 801ac0a:	fbb5 f0f7 	udiv	r0, r5, r7
    if (i == 0) {
 801ac0e:	42bd      	cmp	r5, r7
 801ac10:	d312      	bcc.n	801ac38 <lfs_ctz_index+0x38>
 801ac12:	460e      	mov	r6, r1
}

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 801ac14:	3801      	subs	r0, #1
 801ac16:	f7f6 f8b7 	bl	8010d88 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 801ac1a:	1c84      	adds	r4, r0, #2
 801ac1c:	eba5 0484 	sub.w	r4, r5, r4, lsl #2
 801ac20:	fbb4 f4f7 	udiv	r4, r4, r7
    *off = size - b*i - 4*lfs_popc(i);
 801ac24:	fb04 5517 	mls	r5, r4, r7, r5
 801ac28:	4620      	mov	r0, r4
 801ac2a:	f7f6 f8ad 	bl	8010d88 <__popcountsi2>
 801ac2e:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
 801ac32:	6035      	str	r5, [r6, #0]
    return i;
 801ac34:	4620      	mov	r0, r4
}
 801ac36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 801ac38:	2000      	movs	r0, #0
 801ac3a:	e7fc      	b.n	801ac36 <lfs_ctz_index+0x36>

0801ac3c <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
 801ac3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac40:	b087      	sub	sp, #28
 801ac42:	4615      	mov	r5, r2
 801ac44:	469b      	mov	fp, r3
 801ac46:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801ac48:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ac4a:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
    if (off+size > lfs->cfg->block_size
 801ac4e:	eb04 020a 	add.w	r2, r4, sl
 801ac52:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801ac54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ac56:	429a      	cmp	r2, r3
 801ac58:	f200 80d0 	bhi.w	801adfc <lfs_bd_read+0x1c0>
 801ac5c:	4689      	mov	r9, r1
            || (lfs->block_count && block >= lfs->block_count)) {
 801ac5e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	f000 80c7 	beq.w	801adf4 <lfs_bd_read+0x1b8>
 801ac66:	42bb      	cmp	r3, r7
 801ac68:	f240 80cb 	bls.w	801ae02 <lfs_bd_read+0x1c6>
 801ac6c:	9003      	str	r0, [sp, #12]
 801ac6e:	e084      	b.n	801ad7a <lfs_bd_read+0x13e>
                off < pcache->off + pcache->size) {
 801ac70:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ac74:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ac78:	1899      	adds	r1, r3, r2
        if (pcache && block == pcache->block &&
 801ac7a:	42a1      	cmp	r1, r4
 801ac7c:	d91e      	bls.n	801acbc <lfs_bd_read+0x80>
            if (off >= pcache->off) {
 801ac7e:	42a3      	cmp	r3, r4
 801ac80:	d905      	bls.n	801ac8e <lfs_bd_read+0x52>
            diff = lfs_min(diff, pcache->off-off);
 801ac82:	1b1b      	subs	r3, r3, r4
    return (a < b) ? a : b;
 801ac84:	4553      	cmp	r3, sl
 801ac86:	bf28      	it	cs
 801ac88:	4653      	movcs	r3, sl
 801ac8a:	4698      	mov	r8, r3
 801ac8c:	e081      	b.n	801ad92 <lfs_bd_read+0x156>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801ac8e:	1b19      	subs	r1, r3, r4
 801ac90:	eb02 0801 	add.w	r8, r2, r1
 801ac94:	45d0      	cmp	r8, sl
 801ac96:	bf28      	it	cs
 801ac98:	46d0      	movcs	r8, sl
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801ac9a:	f8d9 100c 	ldr.w	r1, [r9, #12]
 801ac9e:	1ae3      	subs	r3, r4, r3
 801aca0:	4642      	mov	r2, r8
 801aca2:	4419      	add	r1, r3
 801aca4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801aca6:	f012 fd27 	bl	802d6f8 <memcpy>
                data += diff;
 801acaa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801acac:	4443      	add	r3, r8
 801acae:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801acb0:	4444      	add	r4, r8
                size -= diff;
 801acb2:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801acb6:	e060      	b.n	801ad7a <lfs_bd_read+0x13e>
        lfs_size_t diff = size;
 801acb8:	46d0      	mov	r8, sl
 801acba:	e06a      	b.n	801ad92 <lfs_bd_read+0x156>
 801acbc:	46d0      	mov	r8, sl
 801acbe:	e068      	b.n	801ad92 <lfs_bd_read+0x156>
                off < rcache->off + rcache->size) {
 801acc0:	686b      	ldr	r3, [r5, #4]
 801acc2:	68aa      	ldr	r2, [r5, #8]
 801acc4:	1899      	adds	r1, r3, r2
        if (block == rcache->block &&
 801acc6:	42a1      	cmp	r1, r4
 801acc8:	d966      	bls.n	801ad98 <lfs_bd_read+0x15c>
            if (off >= rcache->off) {
 801acca:	42a3      	cmp	r3, r4
 801accc:	d904      	bls.n	801acd8 <lfs_bd_read+0x9c>
            diff = lfs_min(diff, rcache->off-off);
 801acce:	1b1b      	subs	r3, r3, r4
 801acd0:	4598      	cmp	r8, r3
 801acd2:	bf28      	it	cs
 801acd4:	4698      	movcs	r8, r3
 801acd6:	e05f      	b.n	801ad98 <lfs_bd_read+0x15c>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801acd8:	1b19      	subs	r1, r3, r4
 801acda:	440a      	add	r2, r1
 801acdc:	4590      	cmp	r8, r2
 801acde:	bf28      	it	cs
 801ace0:	4690      	movcs	r8, r2
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801ace2:	68e9      	ldr	r1, [r5, #12]
 801ace4:	1ae3      	subs	r3, r4, r3
 801ace6:	4642      	mov	r2, r8
 801ace8:	4419      	add	r1, r3
 801acea:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801acec:	f012 fd04 	bl	802d6f8 <memcpy>
                data += diff;
 801acf0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801acf2:	4443      	add	r3, r8
 801acf4:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801acf6:	4444      	add	r4, r8
                size -= diff;
 801acf8:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801acfc:	e03d      	b.n	801ad7a <lfs_bd_read+0x13e>
            data += diff;
 801acfe:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ad00:	9b04      	ldr	r3, [sp, #16]
 801ad02:	441a      	add	r2, r3
 801ad04:	9212      	str	r2, [sp, #72]	@ 0x48
            off += diff;
 801ad06:	441c      	add	r4, r3
            size -= diff;
 801ad08:	9b05      	ldr	r3, [sp, #20]
 801ad0a:	eba3 0308 	sub.w	r3, r3, r8
 801ad0e:	449a      	add	sl, r3
            continue;
 801ad10:	e033      	b.n	801ad7a <lfs_bd_read+0x13e>
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801ad12:	9b03      	ldr	r3, [sp, #12]
 801ad14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ad16:	b10b      	cbz	r3, 801ad1c <lfs_bd_read+0xe0>
 801ad18:	42bb      	cmp	r3, r7
 801ad1a:	d95f      	bls.n	801addc <lfs_bd_read+0x1a0>
        rcache->block = block;
 801ad1c:	602f      	str	r7, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801ad1e:	9e03      	ldr	r6, [sp, #12]
 801ad20:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801ad22:	69da      	ldr	r2, [r3, #28]
    return a - (a % alignment);
 801ad24:	fbb4 f3f2 	udiv	r3, r4, r2
 801ad28:	fb02 4313 	mls	r3, r2, r3, r4
 801ad2c:	1ae2      	subs	r2, r4, r3
 801ad2e:	606a      	str	r2, [r5, #4]
                lfs_min(
 801ad30:	eb04 010b 	add.w	r1, r4, fp
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 801ad34:	f8d6 c068 	ldr.w	ip, [r6, #104]	@ 0x68
 801ad38:	f8dc 001c 	ldr.w	r0, [ip, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801ad3c:	4401      	add	r1, r0
 801ad3e:	3901      	subs	r1, #1
    return a - (a % alignment);
 801ad40:	fbb1 fef0 	udiv	lr, r1, r0
 801ad44:	fb00 101e 	mls	r0, r0, lr, r1
 801ad48:	1a09      	subs	r1, r1, r0
                    lfs->cfg->block_size)
 801ad4a:	f8dc 0024 	ldr.w	r0, [ip, #36]	@ 0x24
        rcache->size = lfs_min(
 801ad4e:	1b1b      	subs	r3, r3, r4
 801ad50:	4288      	cmp	r0, r1
 801ad52:	bf94      	ite	ls
 801ad54:	181b      	addls	r3, r3, r0
 801ad56:	185b      	addhi	r3, r3, r1
                lfs->cfg->cache_size);
 801ad58:	f8dc 1030 	ldr.w	r1, [ip, #48]	@ 0x30
    return (a < b) ? a : b;
 801ad5c:	428b      	cmp	r3, r1
 801ad5e:	bf28      	it	cs
 801ad60:	460b      	movcs	r3, r1
        rcache->size = lfs_min(
 801ad62:	60ab      	str	r3, [r5, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 801ad64:	6eb0      	ldr	r0, [r6, #104]	@ 0x68
 801ad66:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801ad6a:	9300      	str	r3, [sp, #0]
 801ad6c:	68eb      	ldr	r3, [r5, #12]
 801ad6e:	4639      	mov	r1, r7
 801ad70:	47c0      	blx	r8
        LFS_ASSERT(err <= 0);
 801ad72:	1e03      	subs	r3, r0, #0
 801ad74:	dc38      	bgt.n	801ade8 <lfs_bd_read+0x1ac>
        if (err) {
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d146      	bne.n	801ae08 <lfs_bd_read+0x1cc>
    while (size > 0) {
 801ad7a:	f1ba 0f00 	cmp.w	sl, #0
 801ad7e:	d03b      	beq.n	801adf8 <lfs_bd_read+0x1bc>
        if (pcache && block == pcache->block &&
 801ad80:	f1b9 0f00 	cmp.w	r9, #0
 801ad84:	d098      	beq.n	801acb8 <lfs_bd_read+0x7c>
 801ad86:	f8d9 3000 	ldr.w	r3, [r9]
 801ad8a:	42bb      	cmp	r3, r7
 801ad8c:	f43f af70 	beq.w	801ac70 <lfs_bd_read+0x34>
        lfs_size_t diff = size;
 801ad90:	46d0      	mov	r8, sl
        if (block == rcache->block &&
 801ad92:	682b      	ldr	r3, [r5, #0]
 801ad94:	42bb      	cmp	r3, r7
 801ad96:	d093      	beq.n	801acc0 <lfs_bd_read+0x84>
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 801ad98:	45da      	cmp	sl, fp
 801ad9a:	d3ba      	bcc.n	801ad12 <lfs_bd_read+0xd6>
 801ad9c:	9b03      	ldr	r3, [sp, #12]
 801ad9e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801ada0:	69c2      	ldr	r2, [r0, #28]
 801ada2:	fbb4 f3f2 	udiv	r3, r4, r2
 801ada6:	fb02 4313 	mls	r3, r2, r3, r4
 801adaa:	2b00      	cmp	r3, #0
 801adac:	d1b1      	bne.n	801ad12 <lfs_bd_read+0xd6>
 801adae:	4552      	cmp	r2, sl
 801adb0:	d8af      	bhi.n	801ad12 <lfs_bd_read+0xd6>
    return a - (a % alignment);
 801adb2:	fbb8 f3f2 	udiv	r3, r8, r2
 801adb6:	fb02 8313 	mls	r3, r2, r3, r8
 801adba:	9305      	str	r3, [sp, #20]
 801adbc:	eba8 0203 	sub.w	r2, r8, r3
 801adc0:	4613      	mov	r3, r2
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 801adc2:	6842      	ldr	r2, [r0, #4]
 801adc4:	4616      	mov	r6, r2
 801adc6:	9304      	str	r3, [sp, #16]
 801adc8:	9300      	str	r3, [sp, #0]
 801adca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801adcc:	4622      	mov	r2, r4
 801adce:	4639      	mov	r1, r7
 801add0:	47b0      	blx	r6
            if (err) {
 801add2:	2800      	cmp	r0, #0
 801add4:	d093      	beq.n	801acfe <lfs_bd_read+0xc2>
}
 801add6:	b007      	add	sp, #28
 801add8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801addc:	4b0b      	ldr	r3, [pc, #44]	@ (801ae0c <lfs_bd_read+0x1d0>)
 801adde:	4a0c      	ldr	r2, [pc, #48]	@ (801ae10 <lfs_bd_read+0x1d4>)
 801ade0:	216b      	movs	r1, #107	@ 0x6b
 801ade2:	480c      	ldr	r0, [pc, #48]	@ (801ae14 <lfs_bd_read+0x1d8>)
 801ade4:	f00e fcfa 	bl	80297dc <__assert_func>
        LFS_ASSERT(err <= 0);
 801ade8:	4b0b      	ldr	r3, [pc, #44]	@ (801ae18 <lfs_bd_read+0x1dc>)
 801adea:	4a09      	ldr	r2, [pc, #36]	@ (801ae10 <lfs_bd_read+0x1d4>)
 801adec:	2176      	movs	r1, #118	@ 0x76
 801adee:	4809      	ldr	r0, [pc, #36]	@ (801ae14 <lfs_bd_read+0x1d8>)
 801adf0:	f00e fcf4 	bl	80297dc <__assert_func>
 801adf4:	9003      	str	r0, [sp, #12]
 801adf6:	e7c0      	b.n	801ad7a <lfs_bd_read+0x13e>
    return 0;
 801adf8:	2000      	movs	r0, #0
 801adfa:	e7ec      	b.n	801add6 <lfs_bd_read+0x19a>
        return LFS_ERR_CORRUPT;
 801adfc:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801ae00:	e7e9      	b.n	801add6 <lfs_bd_read+0x19a>
 801ae02:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801ae06:	e7e6      	b.n	801add6 <lfs_bd_read+0x19a>
 801ae08:	4618      	mov	r0, r3
 801ae0a:	e7e4      	b.n	801add6 <lfs_bd_read+0x19a>
 801ae0c:	08038564 	.word	0x08038564
 801ae10:	0803922c 	.word	0x0803922c
 801ae14:	080384b8 	.word	0x080384b8
 801ae18:	080384e8 	.word	0x080384e8

0801ae1c <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 801ae1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae20:	b089      	sub	sp, #36	@ 0x24
 801ae22:	4607      	mov	r7, r0
 801ae24:	468a      	mov	sl, r1
 801ae26:	4690      	mov	r8, r2
 801ae28:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
 801ae2a:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
 801ae2c:	690b      	ldr	r3, [r1, #16]
 801ae2e:	9307      	str	r3, [sp, #28]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801ae30:	303c      	adds	r0, #60	@ 0x3c
 801ae32:	f7ff fd73 	bl	801a91c <lfs_gstate_hasmovehere>
 801ae36:	2800      	cmp	r0, #0
 801ae38:	f000 808d 	beq.w	801af56 <lfs_dir_getslice+0x13a>
    return (tag & 0x000ffc00) >> 10;
 801ae3c:	f3c8 2389 	ubfx	r3, r8, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	f000 808a 	beq.w	801af5a <lfs_dir_getslice+0x13e>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801ae46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801ae48:	f3c2 238f 	ubfx	r3, r2, #10, #16
 801ae4c:	f3c2 2289 	ubfx	r2, r2, #10, #10
 801ae50:	f3cb 218f 	ubfx	r1, fp, #10, #16
 801ae54:	f3cb 2089 	ubfx	r0, fp, #10, #10
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801ae58:	404b      	eors	r3, r1
 801ae5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	f000 8085 	beq.w	801af6e <lfs_dir_getslice+0x152>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 801ae64:	4282      	cmp	r2, r0
 801ae66:	d37a      	bcc.n	801af5e <lfs_dir_getslice+0x142>
    lfs_stag_t gdiff = 0;
 801ae68:	2600      	movs	r6, #0
 801ae6a:	e006      	b.n	801ae7a <lfs_dir_getslice+0x5e>
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 801ae6c:	9605      	str	r6, [sp, #20]
 801ae6e:	ebab 0306 	sub.w	r3, fp, r6
 801ae72:	4063      	eors	r3, r4
 801ae74:	ea13 0f08 	tst.w	r3, r8
 801ae78:	d048      	beq.n	801af0c <lfs_dir_getslice+0xf0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801ae7a:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
 801ae7c:	f344 0909 	sbfx	r9, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801ae80:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801ae84:	bf14      	ite	ne
 801ae86:	4623      	movne	r3, r4
 801ae88:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
 801ae8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801ae8e:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801ae90:	3308      	adds	r3, #8
 801ae92:	42ab      	cmp	r3, r5
 801ae94:	d865      	bhi.n	801af62 <lfs_dir_getslice+0x146>
        off -= lfs_tag_dsize(ntag);
 801ae96:	1aad      	subs	r5, r5, r2
                dir->pair[0], off, &ntag, sizeof(ntag));
 801ae98:	f8da 2000 	ldr.w	r2, [sl]
        int err = lfs_bd_read(lfs,
 801ae9c:	2304      	movs	r3, #4
 801ae9e:	9303      	str	r3, [sp, #12]
 801aea0:	a907      	add	r1, sp, #28
 801aea2:	9102      	str	r1, [sp, #8]
 801aea4:	9501      	str	r5, [sp, #4]
 801aea6:	9200      	str	r2, [sp, #0]
 801aea8:	463a      	mov	r2, r7
 801aeaa:	2100      	movs	r1, #0
 801aeac:	4638      	mov	r0, r7
 801aeae:	f7ff fec5 	bl	801ac3c <lfs_bd_read>
        if (err) {
 801aeb2:	4603      	mov	r3, r0
 801aeb4:	2800      	cmp	r0, #0
 801aeb6:	d156      	bne.n	801af66 <lfs_dir_getslice+0x14a>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 801aeb8:	9b07      	ldr	r3, [sp, #28]
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 801aeba:	ba1b      	rev	r3, r3
 801aebc:	4063      	eors	r3, r4
 801aebe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801aec2:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
 801aec4:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	d0cf      	beq.n	801ae6c <lfs_dir_getslice+0x50>
    return (tag & 0x70000000) >> 20;
 801aecc:	0d23      	lsrs	r3, r4, #20
 801aece:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
        if (lfs_tag_id(gmask) != 0 &&
 801aed2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801aed6:	d1c9      	bne.n	801ae6c <lfs_dir_getslice+0x50>
    return (tag & 0x000ffc00) >> 10;
 801aed8:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 801aedc:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
 801aee0:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801aee4:	4584      	cmp	ip, r0
 801aee6:	d3c1      	bcc.n	801ae6c <lfs_dir_getslice+0x50>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 801aee8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801aeec:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801aef0:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801aef4:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 801aef8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 801aefc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801af00:	42a2      	cmp	r2, r4
 801af02:	d037      	beq.n	801af74 <lfs_dir_getslice+0x158>
    return (int8_t)lfs_tag_chunk(tag);
 801af04:	b25b      	sxtb	r3, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801af06:	eb06 2683 	add.w	r6, r6, r3, lsl #10
 801af0a:	e7af      	b.n	801ae6c <lfs_dir_getslice+0x50>
            if (lfs_tag_isdelete(tag)) {
 801af0c:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801af10:	d033      	beq.n	801af7a <lfs_dir_getslice+0x15e>
    return tag & 0x000003ff;
 801af12:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
 801af16:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801af18:	429e      	cmp	r6, r3
 801af1a:	bf28      	it	cs
 801af1c:	461e      	movcs	r6, r3
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 801af1e:	f8da 2000 	ldr.w	r2, [sl]
 801af22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801af24:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
 801af26:	9603      	str	r6, [sp, #12]
 801af28:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801af2a:	9102      	str	r1, [sp, #8]
 801af2c:	3304      	adds	r3, #4
 801af2e:	9301      	str	r3, [sp, #4]
 801af30:	9200      	str	r2, [sp, #0]
 801af32:	4633      	mov	r3, r6
 801af34:	463a      	mov	r2, r7
 801af36:	2100      	movs	r1, #0
 801af38:	4638      	mov	r0, r7
 801af3a:	f7ff fe7f 	bl	801ac3c <lfs_bd_read>
            if (err) {
 801af3e:	4603      	mov	r3, r0
 801af40:	b988      	cbnz	r0, 801af66 <lfs_dir_getslice+0x14a>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 801af42:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801af44:	1b9a      	subs	r2, r3, r6
 801af46:	2100      	movs	r1, #0
 801af48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801af4a:	1998      	adds	r0, r3, r6
 801af4c:	f011 f998 	bl	802c280 <memset>
            return tag + gdiff;
 801af50:	9b05      	ldr	r3, [sp, #20]
 801af52:	4423      	add	r3, r4
 801af54:	e007      	b.n	801af66 <lfs_dir_getslice+0x14a>
    lfs_stag_t gdiff = 0;
 801af56:	2600      	movs	r6, #0
 801af58:	e78f      	b.n	801ae7a <lfs_dir_getslice+0x5e>
 801af5a:	2600      	movs	r6, #0
 801af5c:	e78d      	b.n	801ae7a <lfs_dir_getslice+0x5e>
            gdiff -= LFS_MKTAG(0, 1, 0);
 801af5e:	4e08      	ldr	r6, [pc, #32]	@ (801af80 <lfs_dir_getslice+0x164>)
 801af60:	e78b      	b.n	801ae7a <lfs_dir_getslice+0x5e>
    return LFS_ERR_NOENT;
 801af62:	f06f 0301 	mvn.w	r3, #1
}
 801af66:	4618      	mov	r0, r3
 801af68:	b009      	add	sp, #36	@ 0x24
 801af6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOENT;
 801af6e:	f06f 0301 	mvn.w	r3, #1
 801af72:	e7f8      	b.n	801af66 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801af74:	f06f 0301 	mvn.w	r3, #1
 801af78:	e7f5      	b.n	801af66 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801af7a:	f06f 0301 	mvn.w	r3, #1
 801af7e:	e7f2      	b.n	801af66 <lfs_dir_getslice+0x14a>
 801af80:	fffffc00 	.word	0xfffffc00

0801af84 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 801af84:	b510      	push	{r4, lr}
 801af86:	b084      	sub	sp, #16
    return tag & 0x000003ff;
 801af88:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 801af8c:	9402      	str	r4, [sp, #8]
 801af8e:	9c06      	ldr	r4, [sp, #24]
 801af90:	9401      	str	r4, [sp, #4]
 801af92:	2400      	movs	r4, #0
 801af94:	9400      	str	r4, [sp, #0]
 801af96:	f7ff ff41 	bl	801ae1c <lfs_dir_getslice>
}
 801af9a:	b004      	add	sp, #16
 801af9c:	bd10      	pop	{r4, pc}
	...

0801afa0 <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
 801afa0:	b510      	push	{r4, lr}
 801afa2:	b086      	sub	sp, #24
 801afa4:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 801afa6:	ab03      	add	r3, sp, #12
 801afa8:	9300      	str	r3, [sp, #0]
 801afaa:	4b09      	ldr	r3, [pc, #36]	@ (801afd0 <lfs_dir_getgstate+0x30>)
 801afac:	4a09      	ldr	r2, [pc, #36]	@ (801afd4 <lfs_dir_getgstate+0x34>)
 801afae:	f7ff ffe9 	bl	801af84 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 801afb2:	2800      	cmp	r0, #0
 801afb4:	da04      	bge.n	801afc0 <lfs_dir_getgstate+0x20>
 801afb6:	f110 0f02 	cmn.w	r0, #2
 801afba:	d106      	bne.n	801afca <lfs_dir_getgstate+0x2a>
    return 0;
 801afbc:	2000      	movs	r0, #0
 801afbe:	e004      	b.n	801afca <lfs_dir_getgstate+0x2a>
        lfs_gstate_xor(gstate, &temp);
 801afc0:	a903      	add	r1, sp, #12
 801afc2:	4620      	mov	r0, r4
 801afc4:	f7ff fc98 	bl	801a8f8 <lfs_gstate_xor>
    return 0;
 801afc8:	2000      	movs	r0, #0
}
 801afca:	b006      	add	sp, #24
 801afcc:	bd10      	pop	{r4, pc}
 801afce:	bf00      	nop
 801afd0:	7ff0000c 	.word	0x7ff0000c
 801afd4:	7ff00000 	.word	0x7ff00000

0801afd8 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
 801afd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afdc:	b089      	sub	sp, #36	@ 0x24
 801afde:	461c      	mov	r4, r3
 801afe0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801afe2:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801afe4:	9f14      	ldr	r7, [sp, #80]	@ 0x50
    if (size == 0) {
 801afe6:	b923      	cbnz	r3, 801aff2 <lfs_ctz_traverse+0x1a>
        return 0;
 801afe8:	2300      	movs	r3, #0
}
 801afea:	4618      	mov	r0, r3
 801afec:	b009      	add	sp, #36	@ 0x24
 801afee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aff2:	4680      	mov	r8, r0
 801aff4:	4689      	mov	r9, r1
 801aff6:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801aff8:	3b01      	subs	r3, #1
 801affa:	9307      	str	r3, [sp, #28]
 801affc:	a907      	add	r1, sp, #28
 801affe:	f7ff fdff 	bl	801ac00 <lfs_ctz_index>
 801b002:	4605      	mov	r5, r0
        int err = cb(data, head);
 801b004:	4621      	mov	r1, r4
 801b006:	4638      	mov	r0, r7
 801b008:	47b0      	blx	r6
        if (err) {
 801b00a:	4603      	mov	r3, r0
 801b00c:	2800      	cmp	r0, #0
 801b00e:	d1ec      	bne.n	801afea <lfs_ctz_traverse+0x12>
        if (index == 0) {
 801b010:	2d00      	cmp	r5, #0
 801b012:	d0ea      	beq.n	801afea <lfs_ctz_traverse+0x12>
        int count = 2 - (index & 1);
 801b014:	f005 0b01 	and.w	fp, r5, #1
 801b018:	f1cb 0302 	rsb	r3, fp, #2
                pcache, rcache, count*sizeof(head),
 801b01c:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 801b01e:	9303      	str	r3, [sp, #12]
 801b020:	aa05      	add	r2, sp, #20
 801b022:	9202      	str	r2, [sp, #8]
 801b024:	2200      	movs	r2, #0
 801b026:	9201      	str	r2, [sp, #4]
 801b028:	9400      	str	r4, [sp, #0]
 801b02a:	4652      	mov	r2, sl
 801b02c:	4649      	mov	r1, r9
 801b02e:	4640      	mov	r0, r8
 801b030:	f7ff fe04 	bl	801ac3c <lfs_bd_read>
        if (err) {
 801b034:	4604      	mov	r4, r0
 801b036:	b9c8      	cbnz	r0, 801b06c <lfs_ctz_traverse+0x94>
        for (int i = 0; i < count-1; i++) {
 801b038:	43eb      	mvns	r3, r5
 801b03a:	f003 0301 	and.w	r3, r3, #1
 801b03e:	42a3      	cmp	r3, r4
 801b040:	dd0b      	ble.n	801b05a <lfs_ctz_traverse+0x82>
            err = cb(data, heads[i]);
 801b042:	ab08      	add	r3, sp, #32
 801b044:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b048:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 801b04c:	4638      	mov	r0, r7
 801b04e:	47b0      	blx	r6
            if (err) {
 801b050:	4603      	mov	r3, r0
 801b052:	2800      	cmp	r0, #0
 801b054:	d1c9      	bne.n	801afea <lfs_ctz_traverse+0x12>
        for (int i = 0; i < count-1; i++) {
 801b056:	3401      	adds	r4, #1
 801b058:	e7ee      	b.n	801b038 <lfs_ctz_traverse+0x60>
        head = heads[count-1];
 801b05a:	aa08      	add	r2, sp, #32
 801b05c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b060:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
 801b064:	f1ab 0b02 	sub.w	fp, fp, #2
 801b068:	445d      	add	r5, fp
    while (true) {
 801b06a:	e7cb      	b.n	801b004 <lfs_ctz_traverse+0x2c>
            return err;
 801b06c:	4603      	mov	r3, r0
 801b06e:	e7bc      	b.n	801afea <lfs_ctz_traverse+0x12>

0801b070 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 801b070:	b530      	push	{r4, r5, lr}
 801b072:	b087      	sub	sp, #28
 801b074:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
 801b076:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 801b078:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b07a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 801b07c:	6811      	ldr	r1, [r2, #0]
 801b07e:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 801b080:	2508      	movs	r5, #8
 801b082:	9503      	str	r5, [sp, #12]
 801b084:	ad04      	add	r5, sp, #16
 801b086:	9502      	str	r5, [sp, #8]
 801b088:	9201      	str	r2, [sp, #4]
 801b08a:	9100      	str	r1, [sp, #0]
 801b08c:	4602      	mov	r2, r0
 801b08e:	f100 0110 	add.w	r1, r0, #16
 801b092:	f7ff fdd3 	bl	801ac3c <lfs_bd_read>
    if (err) {
 801b096:	4603      	mov	r3, r0
 801b098:	b978      	cbnz	r0, 801b0ba <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801b09a:	9a04      	ldr	r2, [sp, #16]
 801b09c:	6861      	ldr	r1, [r4, #4]
 801b09e:	4291      	cmp	r1, r2
 801b0a0:	d008      	beq.n	801b0b4 <lfs_fs_parent_match+0x44>
 801b0a2:	9d05      	ldr	r5, [sp, #20]
 801b0a4:	68a0      	ldr	r0, [r4, #8]
 801b0a6:	4285      	cmp	r5, r0
 801b0a8:	d004      	beq.n	801b0b4 <lfs_fs_parent_match+0x44>
 801b0aa:	4282      	cmp	r2, r0
 801b0ac:	d002      	beq.n	801b0b4 <lfs_fs_parent_match+0x44>
 801b0ae:	42a9      	cmp	r1, r5
 801b0b0:	d000      	beq.n	801b0b4 <lfs_fs_parent_match+0x44>
 801b0b2:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 801b0b4:	3b00      	subs	r3, #0
 801b0b6:	bf18      	it	ne
 801b0b8:	2301      	movne	r3, #1
}
 801b0ba:	4618      	mov	r0, r3
 801b0bc:	b007      	add	sp, #28
 801b0be:	bd30      	pop	{r4, r5, pc}

0801b0c0 <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0c4:	b0af      	sub	sp, #188	@ 0xbc
 801b0c6:	9007      	str	r0, [sp, #28]
 801b0c8:	460e      	mov	r6, r1
 801b0ca:	4617      	mov	r7, r2
 801b0cc:	461c      	mov	r4, r3
 801b0ce:	f8dd 80e0 	ldr.w	r8, [sp, #224]	@ 0xe0
 801b0d2:	f8dd b0e4 	ldr.w	fp, [sp, #228]	@ 0xe4
 801b0d6:	f8dd a0e8 	ldr.w	sl, [sp, #232]	@ 0xe8
 801b0da:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
 801b0de:	9304      	str	r3, [sp, #16]
 801b0e0:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	@ 0xf4
 801b0e4:	9305      	str	r3, [sp, #20]
 801b0e6:	f9bd 30f8 	ldrsh.w	r3, [sp, #248]	@ 0xf8
 801b0ea:	9306      	str	r3, [sp, #24]
    struct lfs_diskoff disk = {0};
 801b0ec:	2500      	movs	r5, #0
 801b0ee:	950d      	str	r5, [sp, #52]	@ 0x34
 801b0f0:	950e      	str	r5, [sp, #56]	@ 0x38
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b0f2:	f344 0309 	sbfx	r3, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b0f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b0fa:	bf14      	ite	ne
 801b0fc:	46a1      	movne	r9, r4
 801b0fe:	f104 0901 	addeq.w	r9, r4, #1
    return tag & 0x000003ff;
 801b102:	f3c9 0909 	ubfx	r9, r9, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b106:	f109 0904 	add.w	r9, r9, #4
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 801b10a:	44b9      	add	r9, r7
 801b10c:	68f3      	ldr	r3, [r6, #12]
 801b10e:	4599      	cmp	r9, r3
 801b110:	d35e      	bcc.n	801b1d0 <lfs_dir_traverse+0x110>
            } else if (attrcount > 0) {
 801b112:	f1bb 0f00 	cmp.w	fp, #0
 801b116:	f340 80fa 	ble.w	801b30e <lfs_dir_traverse+0x24e>
                tag = attrs[0].tag;
 801b11a:	f8d8 3000 	ldr.w	r3, [r8]
 801b11e:	930f      	str	r3, [sp, #60]	@ 0x3c
                buffer = attrs[0].buffer;
 801b120:	f8d8 9004 	ldr.w	r9, [r8, #4]
                attrs += 1;
 801b124:	f108 0808 	add.w	r8, r8, #8
                attrcount -= 1;
 801b128:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 801b12c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801b12e:	4ba9      	ldr	r3, [pc, #676]	@ (801b3d4 <lfs_dir_traverse+0x314>)
 801b130:	ea0a 0303 	and.w	r3, sl, r3
 801b134:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801b136:	404a      	eors	r2, r1
 801b138:	401a      	ands	r2, r3
 801b13a:	d1da      	bne.n	801b0f2 <lfs_dir_traverse+0x32>
    return (tag & 0x000ffc00) >> 10;
 801b13c:	f3ca 2389 	ubfx	r3, sl, #10, #10
            if (lfs_tag_id(tmask) != 0) {
 801b140:	2b00      	cmp	r3, #0
 801b142:	f000 8116 	beq.w	801b372 <lfs_dir_traverse+0x2b2>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801b146:	2d02      	cmp	r5, #2
 801b148:	d862      	bhi.n	801b210 <lfs_dir_traverse+0x150>
                stack[sp] = (struct lfs_dir_traverse){
 801b14a:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801b14e:	a82e      	add	r0, sp, #184	@ 0xb8
 801b150:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801b154:	f843 6c78 	str.w	r6, [r3, #-120]
 801b158:	f843 7c74 	str.w	r7, [r3, #-116]
 801b15c:	f843 4c70 	str.w	r4, [r3, #-112]
 801b160:	f843 8c6c 	str.w	r8, [r3, #-108]
 801b164:	f843 bc68 	str.w	fp, [r3, #-104]
 801b168:	f843 ac64 	str.w	sl, [r3, #-100]
 801b16c:	983b      	ldr	r0, [sp, #236]	@ 0xec
 801b16e:	f843 0c60 	str.w	r0, [r3, #-96]
 801b172:	9804      	ldr	r0, [sp, #16]
 801b174:	f823 0c5c 	strh.w	r0, [r3, #-92]
 801b178:	9805      	ldr	r0, [sp, #20]
 801b17a:	f823 0c5a 	strh.w	r0, [r3, #-90]
 801b17e:	9806      	ldr	r0, [sp, #24]
 801b180:	f823 0c58 	strh.w	r0, [r3, #-88]
 801b184:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 801b186:	f843 0c54 	str.w	r0, [r3, #-84]
 801b18a:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801b18c:	f843 0c50 	str.w	r0, [r3, #-80]
 801b190:	f843 1c4c 	str.w	r1, [r3, #-76]
 801b194:	f843 9c48 	str.w	r9, [r3, #-72]
 801b198:	3b44      	subs	r3, #68	@ 0x44
 801b19a:	a90d      	add	r1, sp, #52	@ 0x34
 801b19c:	c903      	ldmia	r1, {r0, r1}
 801b19e:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
 801b1a2:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801b1a6:	009b      	lsls	r3, r3, #2
 801b1a8:	3328      	adds	r3, #40	@ 0x28
 801b1aa:	a910      	add	r1, sp, #64	@ 0x40
 801b1ac:	440b      	add	r3, r1
 801b1ae:	3304      	adds	r3, #4
 801b1b0:	9340      	str	r3, [sp, #256]	@ 0x100
                sp += 1;
 801b1b2:	3501      	adds	r5, #1
                ttag = 0;
 801b1b4:	923b      	str	r2, [sp, #236]	@ 0xec
                tmask = 0;
 801b1b6:	4692      	mov	sl, r2
                cb = lfs_dir_traverse_filter;
 801b1b8:	4b87      	ldr	r3, [pc, #540]	@ (801b3d8 <lfs_dir_traverse+0x318>)
 801b1ba:	933f      	str	r3, [sp, #252]	@ 0xfc
                diff = 0;
 801b1bc:	2300      	movs	r3, #0
 801b1be:	9306      	str	r3, [sp, #24]
                end = 0;
 801b1c0:	9305      	str	r3, [sp, #20]
                begin = 0;
 801b1c2:	9304      	str	r3, [sp, #16]
 801b1c4:	e795      	b.n	801b0f2 <lfs_dir_traverse+0x32>
 801b1c6:	9d08      	ldr	r5, [sp, #32]
 801b1c8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801b1ca:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801b1cc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b1ce:	e790      	b.n	801b0f2 <lfs_dir_traverse+0x32>
                        dir->pair[0], off, &tag, sizeof(tag));
 801b1d0:	6832      	ldr	r2, [r6, #0]
                int err = lfs_bd_read(lfs,
 801b1d2:	2304      	movs	r3, #4
 801b1d4:	9303      	str	r3, [sp, #12]
 801b1d6:	a90f      	add	r1, sp, #60	@ 0x3c
 801b1d8:	9102      	str	r1, [sp, #8]
 801b1da:	f8cd 9004 	str.w	r9, [sp, #4]
 801b1de:	9200      	str	r2, [sp, #0]
 801b1e0:	9a07      	ldr	r2, [sp, #28]
 801b1e2:	2100      	movs	r1, #0
 801b1e4:	4610      	mov	r0, r2
 801b1e6:	f7ff fd29 	bl	801ac3c <lfs_bd_read>
                if (err) {
 801b1ea:	4603      	mov	r3, r0
 801b1ec:	2800      	cmp	r0, #0
 801b1ee:	f040 80ec 	bne.w	801b3ca <lfs_dir_traverse+0x30a>
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 801b1f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return __builtin_bswap32(a);
 801b1f4:	ba1b      	rev	r3, r3
 801b1f6:	4063      	eors	r3, r4
 801b1f8:	f043 4400 	orr.w	r4, r3, #2147483648	@ 0x80000000
 801b1fc:	940f      	str	r4, [sp, #60]	@ 0x3c
                disk.block = dir->pair[0];
 801b1fe:	6833      	ldr	r3, [r6, #0]
 801b200:	930d      	str	r3, [sp, #52]	@ 0x34
                disk.off = off+sizeof(lfs_tag_t);
 801b202:	f109 0304 	add.w	r3, r9, #4
 801b206:	930e      	str	r3, [sp, #56]	@ 0x38
                off += lfs_tag_dsize(ptag);
 801b208:	464f      	mov	r7, r9
                buffer = &disk;
 801b20a:	f10d 0934 	add.w	r9, sp, #52	@ 0x34
 801b20e:	e78d      	b.n	801b12c <lfs_dir_traverse+0x6c>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801b210:	4b72      	ldr	r3, [pc, #456]	@ (801b3dc <lfs_dir_traverse+0x31c>)
 801b212:	4a73      	ldr	r2, [pc, #460]	@ (801b3e0 <lfs_dir_traverse+0x320>)
 801b214:	f240 31b6 	movw	r1, #950	@ 0x3b6
 801b218:	4872      	ldr	r0, [pc, #456]	@ (801b3e4 <lfs_dir_traverse+0x324>)
 801b21a:	f00e fadf 	bl	80297dc <__assert_func>
            if (cb == lfs_dir_traverse_filter) {
 801b21e:	4b6e      	ldr	r3, [pc, #440]	@ (801b3d8 <lfs_dir_traverse+0x318>)
 801b220:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801b222:	429a      	cmp	r2, r3
 801b224:	f43f af65 	beq.w	801b0f2 <lfs_dir_traverse+0x32>
            stack[sp] = (struct lfs_dir_traverse){
 801b228:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801b22c:	aa2e      	add	r2, sp, #184	@ 0xb8
 801b22e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b232:	223c      	movs	r2, #60	@ 0x3c
 801b234:	2100      	movs	r1, #0
 801b236:	9309      	str	r3, [sp, #36]	@ 0x24
 801b238:	f1a3 0078 	sub.w	r0, r3, #120	@ 0x78
 801b23c:	f011 f820 	bl	802c280 <memset>
 801b240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b242:	f843 6c78 	str.w	r6, [r3, #-120]
 801b246:	f843 7c74 	str.w	r7, [r3, #-116]
 801b24a:	f843 4c70 	str.w	r4, [r3, #-112]
 801b24e:	f843 8c6c 	str.w	r8, [r3, #-108]
 801b252:	f843 bc68 	str.w	fp, [r3, #-104]
 801b256:	f843 ac64 	str.w	sl, [r3, #-100]
 801b25a:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801b25c:	f843 2c60 	str.w	r2, [r3, #-96]
 801b260:	9a04      	ldr	r2, [sp, #16]
 801b262:	f823 2c5c 	strh.w	r2, [r3, #-92]
 801b266:	9a05      	ldr	r2, [sp, #20]
 801b268:	f823 2c5a 	strh.w	r2, [r3, #-90]
 801b26c:	9906      	ldr	r1, [sp, #24]
 801b26e:	f823 1c58 	strh.w	r1, [r3, #-88]
 801b272:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801b274:	f843 2c54 	str.w	r2, [r3, #-84]
 801b278:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 801b27a:	f843 2c50 	str.w	r2, [r3, #-80]
            sp += 1;
 801b27e:	3501      	adds	r5, #1
            uint16_t fromid = lfs_tag_size(tag);
 801b280:	9b08      	ldr	r3, [sp, #32]
 801b282:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801b286:	9204      	str	r2, [sp, #16]
    return (tag & 0x000ffc00) >> 10;
 801b288:	f3c3 2389 	ubfx	r3, r3, #10, #10
            end = fromid+1;
 801b28c:	1c50      	adds	r0, r2, #1
 801b28e:	9005      	str	r0, [sp, #20]
            diff = toid-fromid+diff;
 801b290:	1a9b      	subs	r3, r3, r2
 801b292:	fa11 f383 	uxtah	r3, r1, r3
 801b296:	b21b      	sxth	r3, r3
 801b298:	9306      	str	r3, [sp, #24]
            dir = buffer;
 801b29a:	464e      	mov	r6, r9
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 801b29c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801b2a0:	933b      	str	r3, [sp, #236]	@ 0xec
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 801b2a2:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801b3e8 <lfs_dir_traverse+0x328>
            attrcount = 0;
 801b2a6:	f04f 0b00 	mov.w	fp, #0
            attrs = NULL;
 801b2aa:	46d8      	mov	r8, fp
            ptag = 0xffffffff;
 801b2ac:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
            off = 0;
 801b2b0:	465f      	mov	r7, fp
 801b2b2:	e71e      	b.n	801b0f2 <lfs_dir_traverse+0x32>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801b2b4:	2300      	movs	r3, #0
 801b2b6:	9508      	str	r5, [sp, #32]
 801b2b8:	9609      	str	r6, [sp, #36]	@ 0x24
 801b2ba:	970a      	str	r7, [sp, #40]	@ 0x28
 801b2bc:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b2be:	461c      	mov	r4, r3
 801b2c0:	9d06      	ldr	r5, [sp, #24]
 801b2c2:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 801b2c4:	9f40      	ldr	r7, [sp, #256]	@ 0x100
 801b2c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return tag & 0x000003ff;
 801b2c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801b2cc:	4294      	cmp	r4, r2
 801b2ce:	d219      	bcs.n	801b304 <lfs_dir_traverse+0x244>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801b2d0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801b2d4:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 801b2d8:	f819 1021 	ldrb.w	r1, [r9, r1, lsl #2]
 801b2dc:	f501 7140 	add.w	r1, r1, #768	@ 0x300
    return (tag & 0x000ffc00) >> 10;
 801b2e0:	f3c3 2389 	ubfx	r3, r3, #10, #10
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801b2e4:	442b      	add	r3, r5
 801b2e6:	029b      	lsls	r3, r3, #10
 801b2e8:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 801b2ec:	6891      	ldr	r1, [r2, #8]
 801b2ee:	6852      	ldr	r2, [r2, #4]
 801b2f0:	4319      	orrs	r1, r3
 801b2f2:	4638      	mov	r0, r7
 801b2f4:	47b0      	blx	r6
                if (res < 0) {
 801b2f6:	2800      	cmp	r0, #0
 801b2f8:	db66      	blt.n	801b3c8 <lfs_dir_traverse+0x308>
                if (res) {
 801b2fa:	2800      	cmp	r0, #0
 801b2fc:	f47f af63 	bne.w	801b1c6 <lfs_dir_traverse+0x106>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801b300:	3401      	adds	r4, #1
 801b302:	e7e0      	b.n	801b2c6 <lfs_dir_traverse+0x206>
 801b304:	9d08      	ldr	r5, [sp, #32]
 801b306:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801b308:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801b30a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b30c:	e6f1      	b.n	801b0f2 <lfs_dir_traverse+0x32>
                res = 0;
 801b30e:	2300      	movs	r3, #0
    if (sp > 0) {
 801b310:	2d00      	cmp	r5, #0
 801b312:	d05a      	beq.n	801b3ca <lfs_dir_traverse+0x30a>
        dir         = stack[sp-1].dir;
 801b314:	3d01      	subs	r5, #1
 801b316:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801b31a:	aa2e      	add	r2, sp, #184	@ 0xb8
 801b31c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b320:	f853 6c78 	ldr.w	r6, [r3, #-120]
        off         = stack[sp-1].off;
 801b324:	f853 7c74 	ldr.w	r7, [r3, #-116]
        ptag        = stack[sp-1].ptag;
 801b328:	f853 4c70 	ldr.w	r4, [r3, #-112]
        attrs       = stack[sp-1].attrs;
 801b32c:	f853 8c6c 	ldr.w	r8, [r3, #-108]
        attrcount   = stack[sp-1].attrcount;
 801b330:	f853 bc68 	ldr.w	fp, [r3, #-104]
        tmask       = stack[sp-1].tmask;
 801b334:	f853 ac64 	ldr.w	sl, [r3, #-100]
        ttag        = stack[sp-1].ttag;
 801b338:	f853 2c60 	ldr.w	r2, [r3, #-96]
 801b33c:	923b      	str	r2, [sp, #236]	@ 0xec
        begin       = stack[sp-1].begin;
 801b33e:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 801b342:	9204      	str	r2, [sp, #16]
        end         = stack[sp-1].end;
 801b344:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
 801b348:	9205      	str	r2, [sp, #20]
        diff        = stack[sp-1].diff;
 801b34a:	f933 2c58 	ldrsh.w	r2, [r3, #-88]
 801b34e:	9206      	str	r2, [sp, #24]
        cb          = stack[sp-1].cb;
 801b350:	f853 2c54 	ldr.w	r2, [r3, #-84]
 801b354:	923f      	str	r2, [sp, #252]	@ 0xfc
        data        = stack[sp-1].data;
 801b356:	f853 2c50 	ldr.w	r2, [r3, #-80]
 801b35a:	9240      	str	r2, [sp, #256]	@ 0x100
        tag         = stack[sp-1].tag;
 801b35c:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 801b360:	920f      	str	r2, [sp, #60]	@ 0x3c
        buffer      = stack[sp-1].buffer;
 801b362:	f853 9c48 	ldr.w	r9, [r3, #-72]
        disk        = stack[sp-1].disk;
 801b366:	aa0d      	add	r2, sp, #52	@ 0x34
 801b368:	3b44      	subs	r3, #68	@ 0x44
 801b36a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b36e:	e882 0003 	stmia.w	r2, {r0, r1}
    return (tag & 0x000ffc00) >> 10;
 801b372:	f3ca 2389 	ubfx	r3, sl, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801b376:	b153      	cbz	r3, 801b38e <lfs_dir_traverse+0x2ce>
    return (tag & 0x000ffc00) >> 10;
 801b378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b37a:	f3c3 2389 	ubfx	r3, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801b37e:	9a04      	ldr	r2, [sp, #16]
 801b380:	429a      	cmp	r2, r3
 801b382:	f63f aeb6 	bhi.w	801b0f2 <lfs_dir_traverse+0x32>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 801b386:	9a05      	ldr	r2, [sp, #20]
 801b388:	429a      	cmp	r2, r3
 801b38a:	f67f aeb2 	bls.w	801b0f2 <lfs_dir_traverse+0x32>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801b38e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b390:	9308      	str	r3, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801b392:	f3c3 530a 	ubfx	r3, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801b396:	2b00      	cmp	r3, #0
 801b398:	f43f aeab 	beq.w	801b0f2 <lfs_dir_traverse+0x32>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 801b39c:	f240 1201 	movw	r2, #257	@ 0x101
 801b3a0:	4293      	cmp	r3, r2
 801b3a2:	f43f af3c 	beq.w	801b21e <lfs_dir_traverse+0x15e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 801b3a6:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 801b3aa:	d083      	beq.n	801b2b4 <lfs_dir_traverse+0x1f4>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 801b3ac:	464a      	mov	r2, r9
 801b3ae:	9b08      	ldr	r3, [sp, #32]
 801b3b0:	9906      	ldr	r1, [sp, #24]
 801b3b2:	eb03 2181 	add.w	r1, r3, r1, lsl #10
 801b3b6:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801b3b8:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 801b3ba:	4798      	blx	r3
            if (res < 0) {
 801b3bc:	1e03      	subs	r3, r0, #0
 801b3be:	db04      	blt.n	801b3ca <lfs_dir_traverse+0x30a>
            if (res) {
 801b3c0:	2b00      	cmp	r3, #0
 801b3c2:	f43f ae96 	beq.w	801b0f2 <lfs_dir_traverse+0x32>
 801b3c6:	e7a3      	b.n	801b310 <lfs_dir_traverse+0x250>
 801b3c8:	4603      	mov	r3, r0
}
 801b3ca:	4618      	mov	r0, r3
 801b3cc:	b02f      	add	sp, #188	@ 0xbc
 801b3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3d2:	bf00      	nop
 801b3d4:	7ff00000 	.word	0x7ff00000
 801b3d8:	0801a9f5 	.word	0x0801a9f5
 801b3dc:	08038594 	.word	0x08038594
 801b3e0:	080391a4 	.word	0x080391a4
 801b3e4:	080384b8 	.word	0x080384b8
 801b3e8:	600ffc00 	.word	0x600ffc00

0801b3ec <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
 801b3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3f0:	b087      	sub	sp, #28
 801b3f2:	4606      	mov	r6, r0
 801b3f4:	468a      	mov	sl, r1
 801b3f6:	4617      	mov	r7, r2
 801b3f8:	461c      	mov	r4, r3
 801b3fa:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 801b3fe:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 801b402:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801b404:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
    if (off+size > lfs->cfg->block_size) {
 801b408:	eb05 0208 	add.w	r2, r5, r8
 801b40c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b40e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b410:	429a      	cmp	r2, r3
 801b412:	d94d      	bls.n	801b4b0 <lfs_dir_getread+0xc4>
        return LFS_ERR_CORRUPT;
 801b414:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801b418:	e076      	b.n	801b508 <lfs_dir_getread+0x11c>
                off < pcache->off + pcache->size) {
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	68ba      	ldr	r2, [r7, #8]
 801b41e:	1899      	adds	r1, r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801b420:	42a9      	cmp	r1, r5
 801b422:	d91c      	bls.n	801b45e <lfs_dir_getread+0x72>
            if (off >= pcache->off) {
 801b424:	42ab      	cmp	r3, r5
 801b426:	d904      	bls.n	801b432 <lfs_dir_getread+0x46>
            diff = lfs_min(diff, pcache->off-off);
 801b428:	1b5b      	subs	r3, r3, r5
    return (a < b) ? a : b;
 801b42a:	4543      	cmp	r3, r8
 801b42c:	bf28      	it	cs
 801b42e:	4643      	movcs	r3, r8
 801b430:	e048      	b.n	801b4c4 <lfs_dir_getread+0xd8>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801b432:	1b59      	subs	r1, r3, r5
 801b434:	440a      	add	r2, r1
 801b436:	4542      	cmp	r2, r8
 801b438:	bf28      	it	cs
 801b43a:	4642      	movcs	r2, r8
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801b43c:	68f9      	ldr	r1, [r7, #12]
 801b43e:	1aeb      	subs	r3, r5, r3
 801b440:	9205      	str	r2, [sp, #20]
 801b442:	4419      	add	r1, r3
 801b444:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801b446:	f012 f957 	bl	802d6f8 <memcpy>
                data += diff;
 801b44a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801b44c:	9b05      	ldr	r3, [sp, #20]
 801b44e:	4419      	add	r1, r3
 801b450:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801b452:	441d      	add	r5, r3
                size -= diff;
 801b454:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801b458:	e02a      	b.n	801b4b0 <lfs_dir_getread+0xc4>
        lfs_size_t diff = size;
 801b45a:	4643      	mov	r3, r8
 801b45c:	e032      	b.n	801b4c4 <lfs_dir_getread+0xd8>
 801b45e:	4643      	mov	r3, r8
 801b460:	e030      	b.n	801b4c4 <lfs_dir_getread+0xd8>
        rcache->block = LFS_BLOCK_INLINE;
 801b462:	f06f 0301 	mvn.w	r3, #1
 801b466:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801b468:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801b46a:	69db      	ldr	r3, [r3, #28]
    return a - (a % alignment);
 801b46c:	fbb5 f2f3 	udiv	r2, r5, r3
 801b470:	fb03 5212 	mls	r2, r3, r2, r5
 801b474:	1aaa      	subs	r2, r5, r2
 801b476:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801b478:	eb05 030b 	add.w	r3, r5, fp
 801b47c:	6eb1      	ldr	r1, [r6, #104]	@ 0x68
 801b47e:	69c8      	ldr	r0, [r1, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801b480:	4403      	add	r3, r0
 801b482:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801b484:	fbb3 fcf0 	udiv	ip, r3, r0
 801b488:	fb00 301c 	mls	r0, r0, ip, r3
 801b48c:	1a1b      	subs	r3, r3, r0
                lfs->cfg->cache_size);
 801b48e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
    return (a < b) ? a : b;
 801b490:	428b      	cmp	r3, r1
 801b492:	bf28      	it	cs
 801b494:	460b      	movcs	r3, r1
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801b496:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
 801b498:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 801b49a:	9302      	str	r3, [sp, #8]
 801b49c:	9101      	str	r1, [sp, #4]
 801b49e:	9200      	str	r2, [sp, #0]
 801b4a0:	464b      	mov	r3, r9
 801b4a2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b4a4:	4651      	mov	r1, sl
 801b4a6:	4630      	mov	r0, r6
 801b4a8:	f7ff fcb8 	bl	801ae1c <lfs_dir_getslice>
        if (err < 0) {
 801b4ac:	2800      	cmp	r0, #0
 801b4ae:	db2b      	blt.n	801b508 <lfs_dir_getread+0x11c>
    while (size > 0) {
 801b4b0:	f1b8 0f00 	cmp.w	r8, #0
 801b4b4:	d027      	beq.n	801b506 <lfs_dir_getread+0x11a>
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801b4b6:	2f00      	cmp	r7, #0
 801b4b8:	d0cf      	beq.n	801b45a <lfs_dir_getread+0x6e>
 801b4ba:	683b      	ldr	r3, [r7, #0]
 801b4bc:	f113 0f02 	cmn.w	r3, #2
 801b4c0:	d0ab      	beq.n	801b41a <lfs_dir_getread+0x2e>
        lfs_size_t diff = size;
 801b4c2:	4643      	mov	r3, r8
        if (rcache->block == LFS_BLOCK_INLINE &&
 801b4c4:	6822      	ldr	r2, [r4, #0]
 801b4c6:	f112 0f02 	cmn.w	r2, #2
 801b4ca:	d1ca      	bne.n	801b462 <lfs_dir_getread+0x76>
                off < rcache->off + rcache->size) {
 801b4cc:	6862      	ldr	r2, [r4, #4]
 801b4ce:	68a1      	ldr	r1, [r4, #8]
 801b4d0:	1850      	adds	r0, r2, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
 801b4d2:	42a8      	cmp	r0, r5
 801b4d4:	d9c5      	bls.n	801b462 <lfs_dir_getread+0x76>
            if (off >= rcache->off) {
 801b4d6:	42aa      	cmp	r2, r5
 801b4d8:	d8c3      	bhi.n	801b462 <lfs_dir_getread+0x76>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801b4da:	1b50      	subs	r0, r2, r5
 801b4dc:	4401      	add	r1, r0
 801b4de:	4608      	mov	r0, r1
 801b4e0:	4299      	cmp	r1, r3
 801b4e2:	bf28      	it	cs
 801b4e4:	4618      	movcs	r0, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801b4e6:	68e3      	ldr	r3, [r4, #12]
 801b4e8:	1aa9      	subs	r1, r5, r2
 801b4ea:	9005      	str	r0, [sp, #20]
 801b4ec:	4602      	mov	r2, r0
 801b4ee:	4419      	add	r1, r3
 801b4f0:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801b4f2:	f012 f901 	bl	802d6f8 <memcpy>
                data += diff;
 801b4f6:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801b4f8:	9b05      	ldr	r3, [sp, #20]
 801b4fa:	4419      	add	r1, r3
 801b4fc:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801b4fe:	441d      	add	r5, r3
                size -= diff;
 801b500:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801b504:	e7d4      	b.n	801b4b0 <lfs_dir_getread+0xc4>
    return 0;
 801b506:	2000      	movs	r0, #0
}
 801b508:	b007      	add	sp, #28
 801b50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b50e <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
 801b50e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b512:	b089      	sub	sp, #36	@ 0x24
 801b514:	4682      	mov	sl, r0
 801b516:	4689      	mov	r9, r1
 801b518:	9205      	str	r2, [sp, #20]
 801b51a:	461f      	mov	r7, r3
 801b51c:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 801b520:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 801b524:	9e15      	ldr	r6, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801b526:	2400      	movs	r4, #0
 801b528:	e002      	b.n	801b530 <lfs_bd_cmp+0x22>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801b52a:	2301      	movs	r3, #1
 801b52c:	e023      	b.n	801b576 <lfs_bd_cmp+0x68>
    for (lfs_off_t i = 0; i < size; i += diff) {
 801b52e:	442c      	add	r4, r5
 801b530:	42b4      	cmp	r4, r6
 801b532:	d21f      	bcs.n	801b574 <lfs_bd_cmp+0x66>
        diff = lfs_min(size-i, sizeof(dat));
 801b534:	1b35      	subs	r5, r6, r4
 801b536:	2d08      	cmp	r5, #8
 801b538:	bf28      	it	cs
 801b53a:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801b53c:	9503      	str	r5, [sp, #12]
 801b53e:	ab06      	add	r3, sp, #24
 801b540:	9302      	str	r3, [sp, #8]
 801b542:	eb04 0308 	add.w	r3, r4, r8
 801b546:	9301      	str	r3, [sp, #4]
 801b548:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b54a:	9300      	str	r3, [sp, #0]
 801b54c:	1b3b      	subs	r3, r7, r4
 801b54e:	9a05      	ldr	r2, [sp, #20]
 801b550:	4649      	mov	r1, r9
 801b552:	4650      	mov	r0, sl
 801b554:	f7ff fb72 	bl	801ac3c <lfs_bd_read>
        if (err) {
 801b558:	4603      	mov	r3, r0
 801b55a:	b960      	cbnz	r0, 801b576 <lfs_bd_cmp+0x68>
        int res = memcmp(dat, data + i, diff);
 801b55c:	462a      	mov	r2, r5
 801b55e:	eb0b 0104 	add.w	r1, fp, r4
 801b562:	a806      	add	r0, sp, #24
 801b564:	f010 fdf8 	bl	802c158 <memcmp>
        if (res) {
 801b568:	2800      	cmp	r0, #0
 801b56a:	d0e0      	beq.n	801b52e <lfs_bd_cmp+0x20>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801b56c:	2800      	cmp	r0, #0
 801b56e:	dbdc      	blt.n	801b52a <lfs_bd_cmp+0x1c>
 801b570:	2302      	movs	r3, #2
 801b572:	e000      	b.n	801b576 <lfs_bd_cmp+0x68>
    return LFS_CMP_EQ;
 801b574:	2300      	movs	r3, #0
}
 801b576:	4618      	mov	r0, r3
 801b578:	b009      	add	sp, #36	@ 0x24
 801b57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b580 <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801b580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b584:	b085      	sub	sp, #20
 801b586:	460c      	mov	r4, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 801b588:	6809      	ldr	r1, [r1, #0]
 801b58a:	f111 0f03 	cmn.w	r1, #3
 801b58e:	d83f      	bhi.n	801b610 <lfs_bd_flush+0x90>
 801b590:	4607      	mov	r7, r0
 801b592:	4691      	mov	r9, r2
 801b594:	4698      	mov	r8, r3
        LFS_ASSERT(pcache->block < lfs->block_count);
 801b596:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b598:	4299      	cmp	r1, r3
 801b59a:	d22d      	bcs.n	801b5f8 <lfs_bd_flush+0x78>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 801b59c:	68a5      	ldr	r5, [r4, #8]
 801b59e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b5a0:	6a02      	ldr	r2, [r0, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801b5a2:	4415      	add	r5, r2
 801b5a4:	3d01      	subs	r5, #1
    return a - (a % alignment);
 801b5a6:	fbb5 f3f2 	udiv	r3, r5, r2
 801b5aa:	fb02 5313 	mls	r3, r2, r3, r5
 801b5ae:	1aee      	subs	r6, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 801b5b0:	6885      	ldr	r5, [r0, #8]
 801b5b2:	9600      	str	r6, [sp, #0]
 801b5b4:	68e3      	ldr	r3, [r4, #12]
 801b5b6:	6862      	ldr	r2, [r4, #4]
 801b5b8:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
 801b5ba:	1e05      	subs	r5, r0, #0
 801b5bc:	dc22      	bgt.n	801b604 <lfs_bd_flush+0x84>
        if (err) {
 801b5be:	bb45      	cbnz	r5, 801b612 <lfs_bd_flush+0x92>
        if (validate) {
 801b5c0:	f1b8 0f00 	cmp.w	r8, #0
 801b5c4:	d013      	beq.n	801b5ee <lfs_bd_flush+0x6e>
    rcache->block = LFS_BLOCK_NULL;
 801b5c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b5ca:	f8c9 3000 	str.w	r3, [r9]
                    pcache->block, pcache->off, pcache->buffer, diff);
 801b5ce:	68e3      	ldr	r3, [r4, #12]
            int res = lfs_bd_cmp(lfs,
 801b5d0:	9603      	str	r6, [sp, #12]
 801b5d2:	9302      	str	r3, [sp, #8]
 801b5d4:	6863      	ldr	r3, [r4, #4]
 801b5d6:	9301      	str	r3, [sp, #4]
 801b5d8:	6823      	ldr	r3, [r4, #0]
 801b5da:	9300      	str	r3, [sp, #0]
 801b5dc:	4633      	mov	r3, r6
 801b5de:	464a      	mov	r2, r9
 801b5e0:	2100      	movs	r1, #0
 801b5e2:	4638      	mov	r0, r7
 801b5e4:	f7ff ff93 	bl	801b50e <lfs_bd_cmp>
            if (res < 0) {
 801b5e8:	2800      	cmp	r0, #0
 801b5ea:	db16      	blt.n	801b61a <lfs_bd_flush+0x9a>
            if (res != LFS_CMP_EQ) {
 801b5ec:	b9b8      	cbnz	r0, 801b61e <lfs_bd_flush+0x9e>
        lfs_cache_zero(lfs, pcache);
 801b5ee:	4621      	mov	r1, r4
 801b5f0:	4638      	mov	r0, r7
 801b5f2:	f7ff faf9 	bl	801abe8 <lfs_cache_zero>
 801b5f6:	e00c      	b.n	801b612 <lfs_bd_flush+0x92>
        LFS_ASSERT(pcache->block < lfs->block_count);
 801b5f8:	4b0a      	ldr	r3, [pc, #40]	@ (801b624 <lfs_bd_flush+0xa4>)
 801b5fa:	4a0b      	ldr	r2, [pc, #44]	@ (801b628 <lfs_bd_flush+0xa8>)
 801b5fc:	21b3      	movs	r1, #179	@ 0xb3
 801b5fe:	480b      	ldr	r0, [pc, #44]	@ (801b62c <lfs_bd_flush+0xac>)
 801b600:	f00e f8ec 	bl	80297dc <__assert_func>
        LFS_ASSERT(err <= 0);
 801b604:	4b0a      	ldr	r3, [pc, #40]	@ (801b630 <lfs_bd_flush+0xb0>)
 801b606:	4a08      	ldr	r2, [pc, #32]	@ (801b628 <lfs_bd_flush+0xa8>)
 801b608:	21b7      	movs	r1, #183	@ 0xb7
 801b60a:	4808      	ldr	r0, [pc, #32]	@ (801b62c <lfs_bd_flush+0xac>)
 801b60c:	f00e f8e6 	bl	80297dc <__assert_func>
    return 0;
 801b610:	2500      	movs	r5, #0
}
 801b612:	4628      	mov	r0, r5
 801b614:	b005      	add	sp, #20
 801b616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return res;
 801b61a:	4605      	mov	r5, r0
 801b61c:	e7f9      	b.n	801b612 <lfs_bd_flush+0x92>
                return LFS_ERR_CORRUPT;
 801b61e:	f06f 0553 	mvn.w	r5, #83	@ 0x53
 801b622:	e7f6      	b.n	801b612 <lfs_bd_flush+0x92>
 801b624:	0803859c 	.word	0x0803859c
 801b628:	080391e8 	.word	0x080391e8
 801b62c:	080384b8 	.word	0x080384b8
 801b630:	080384e8 	.word	0x080384e8

0801b634 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 801b634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b638:	b083      	sub	sp, #12
 801b63a:	4607      	mov	r7, r0
 801b63c:	460c      	mov	r4, r1
 801b63e:	9201      	str	r2, [sp, #4]
 801b640:	469b      	mov	fp, r3
 801b642:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b644:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801b646:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801b64a:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801b64e:	f116 0f02 	cmn.w	r6, #2
 801b652:	d002      	beq.n	801b65a <lfs_bd_prog+0x26>
 801b654:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b656:	42b3      	cmp	r3, r6
 801b658:	d90b      	bls.n	801b672 <lfs_bd_prog+0x3e>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 801b65a:	eb05 0308 	add.w	r3, r5, r8
 801b65e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801b660:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801b662:	4293      	cmp	r3, r2
 801b664:	d919      	bls.n	801b69a <lfs_bd_prog+0x66>
 801b666:	4b2b      	ldr	r3, [pc, #172]	@ (801b714 <lfs_bd_prog+0xe0>)
 801b668:	4a2b      	ldr	r2, [pc, #172]	@ (801b718 <lfs_bd_prog+0xe4>)
 801b66a:	21e9      	movs	r1, #233	@ 0xe9
 801b66c:	482b      	ldr	r0, [pc, #172]	@ (801b71c <lfs_bd_prog+0xe8>)
 801b66e:	f00e f8b5 	bl	80297dc <__assert_func>
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801b672:	4b2b      	ldr	r3, [pc, #172]	@ (801b720 <lfs_bd_prog+0xec>)
 801b674:	4a28      	ldr	r2, [pc, #160]	@ (801b718 <lfs_bd_prog+0xe4>)
 801b676:	21e8      	movs	r1, #232	@ 0xe8
 801b678:	4828      	ldr	r0, [pc, #160]	@ (801b71c <lfs_bd_prog+0xe8>)
 801b67a:	f00e f8af 	bl	80297dc <__assert_func>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801b67e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b682:	d13c      	bne.n	801b6fe <lfs_bd_prog+0xca>
        pcache->block = block;
 801b684:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 801b686:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b688:	6a1a      	ldr	r2, [r3, #32]
 801b68a:	fbb5 f3f2 	udiv	r3, r5, r2
 801b68e:	fb02 5313 	mls	r3, r2, r3, r5
 801b692:	1aeb      	subs	r3, r5, r3
 801b694:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
 801b696:	2300      	movs	r3, #0
 801b698:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
 801b69a:	f1b8 0f00 	cmp.w	r8, #0
 801b69e:	d035      	beq.n	801b70c <lfs_bd_prog+0xd8>
        if (block == pcache->block &&
 801b6a0:	6823      	ldr	r3, [r4, #0]
 801b6a2:	42b3      	cmp	r3, r6
 801b6a4:	d1eb      	bne.n	801b67e <lfs_bd_prog+0x4a>
                off >= pcache->off &&
 801b6a6:	6862      	ldr	r2, [r4, #4]
        if (block == pcache->block &&
 801b6a8:	42aa      	cmp	r2, r5
 801b6aa:	d8e8      	bhi.n	801b67e <lfs_bd_prog+0x4a>
                off < pcache->off + lfs->cfg->cache_size) {
 801b6ac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801b6ae:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 801b6b0:	1850      	adds	r0, r2, r1
                off >= pcache->off &&
 801b6b2:	42a8      	cmp	r0, r5
 801b6b4:	d9e3      	bls.n	801b67e <lfs_bd_prog+0x4a>
                    lfs->cfg->cache_size - (off-pcache->off));
 801b6b6:	1b53      	subs	r3, r2, r5
            lfs_size_t diff = lfs_min(size,
 801b6b8:	eb01 0903 	add.w	r9, r1, r3
    return (a < b) ? a : b;
 801b6bc:	45c1      	cmp	r9, r8
 801b6be:	bf28      	it	cs
 801b6c0:	46c1      	movcs	r9, r8
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 801b6c2:	68e3      	ldr	r3, [r4, #12]
 801b6c4:	1aa8      	subs	r0, r5, r2
 801b6c6:	464a      	mov	r2, r9
 801b6c8:	4651      	mov	r1, sl
 801b6ca:	4418      	add	r0, r3
 801b6cc:	f012 f814 	bl	802d6f8 <memcpy>
            data += diff;
 801b6d0:	44ca      	add	sl, r9
            off += diff;
 801b6d2:	444d      	add	r5, r9
            size -= diff;
 801b6d4:	eba8 0809 	sub.w	r8, r8, r9
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 801b6d8:	68a2      	ldr	r2, [r4, #8]
 801b6da:	6863      	ldr	r3, [r4, #4]
 801b6dc:	1aeb      	subs	r3, r5, r3
    return (a > b) ? a : b;
 801b6de:	4293      	cmp	r3, r2
 801b6e0:	bf38      	it	cc
 801b6e2:	4613      	movcc	r3, r2
 801b6e4:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 801b6e6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801b6e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801b6ea:	429a      	cmp	r2, r3
 801b6ec:	d1d5      	bne.n	801b69a <lfs_bd_prog+0x66>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801b6ee:	465b      	mov	r3, fp
 801b6f0:	9a01      	ldr	r2, [sp, #4]
 801b6f2:	4621      	mov	r1, r4
 801b6f4:	4638      	mov	r0, r7
 801b6f6:	f7ff ff43 	bl	801b580 <lfs_bd_flush>
                if (err) {
 801b6fa:	b940      	cbnz	r0, 801b70e <lfs_bd_prog+0xda>
 801b6fc:	e7cd      	b.n	801b69a <lfs_bd_prog+0x66>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801b6fe:	4b09      	ldr	r3, [pc, #36]	@ (801b724 <lfs_bd_prog+0xf0>)
 801b700:	4a05      	ldr	r2, [pc, #20]	@ (801b718 <lfs_bd_prog+0xe4>)
 801b702:	f44f 7183 	mov.w	r1, #262	@ 0x106
 801b706:	4805      	ldr	r0, [pc, #20]	@ (801b71c <lfs_bd_prog+0xe8>)
 801b708:	f00e f868 	bl	80297dc <__assert_func>
    return 0;
 801b70c:	2000      	movs	r0, #0
}
 801b70e:	b003      	add	sp, #12
 801b710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b714:	080385f8 	.word	0x080385f8
 801b718:	080391f8 	.word	0x080391f8
 801b71c:	080384b8 	.word	0x080384b8
 801b720:	080385c0 	.word	0x080385c0
 801b724:	0803861c 	.word	0x0803861c

0801b728 <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801b728:	b538      	push	{r3, r4, r5, lr}
 801b72a:	4604      	mov	r4, r0
    rcache->block = LFS_BLOCK_NULL;
 801b72c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801b730:	6015      	str	r5, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801b732:	f7ff ff25 	bl	801b580 <lfs_bd_flush>
    if (err) {
 801b736:	4603      	mov	r3, r0
 801b738:	b920      	cbnz	r0, 801b744 <lfs_bd_sync+0x1c>
    err = lfs->cfg->sync(lfs->cfg);
 801b73a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801b73c:	6903      	ldr	r3, [r0, #16]
 801b73e:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801b740:	1e03      	subs	r3, r0, #0
 801b742:	dc01      	bgt.n	801b748 <lfs_bd_sync+0x20>
}
 801b744:	4618      	mov	r0, r3
 801b746:	bd38      	pop	{r3, r4, r5, pc}
    LFS_ASSERT(err <= 0);
 801b748:	4b02      	ldr	r3, [pc, #8]	@ (801b754 <lfs_bd_sync+0x2c>)
 801b74a:	4a03      	ldr	r2, [pc, #12]	@ (801b758 <lfs_bd_sync+0x30>)
 801b74c:	21dd      	movs	r1, #221	@ 0xdd
 801b74e:	4803      	ldr	r0, [pc, #12]	@ (801b75c <lfs_bd_sync+0x34>)
 801b750:	f00e f844 	bl	80297dc <__assert_func>
 801b754:	080384e8 	.word	0x080384e8
 801b758:	08039198 	.word	0x08039198
 801b75c:	080384b8 	.word	0x080384b8

0801b760 <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 801b760:	b570      	push	{r4, r5, r6, lr}
 801b762:	b084      	sub	sp, #16
 801b764:	4604      	mov	r4, r0
 801b766:	4694      	mov	ip, r2
    lfs_t *lfs = name->lfs;
 801b768:	6800      	ldr	r0, [r0, #0]
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 801b76a:	68a3      	ldr	r3, [r4, #8]
    return tag & 0x000003ff;
 801b76c:	f3c1 0509 	ubfx	r5, r1, #0, #10
    return (a < b) ? a : b;
 801b770:	42ab      	cmp	r3, r5
 801b772:	bf28      	it	cs
 801b774:	462b      	movcs	r3, r5
            disk->block, disk->off, name->name, diff);
 801b776:	6812      	ldr	r2, [r2, #0]
 801b778:	f8dc 1004 	ldr.w	r1, [ip, #4]
    int res = lfs_bd_cmp(lfs,
 801b77c:	9303      	str	r3, [sp, #12]
 801b77e:	6866      	ldr	r6, [r4, #4]
 801b780:	9602      	str	r6, [sp, #8]
 801b782:	9101      	str	r1, [sp, #4]
 801b784:	9200      	str	r2, [sp, #0]
 801b786:	4602      	mov	r2, r0
 801b788:	2100      	movs	r1, #0
 801b78a:	f7ff fec0 	bl	801b50e <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
 801b78e:	b920      	cbnz	r0, 801b79a <lfs_dir_find_match+0x3a>
    if (name->size != lfs_tag_size(tag)) {
 801b790:	68a3      	ldr	r3, [r4, #8]
 801b792:	42ab      	cmp	r3, r5
 801b794:	d001      	beq.n	801b79a <lfs_dir_find_match+0x3a>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801b796:	d202      	bcs.n	801b79e <lfs_dir_find_match+0x3e>
 801b798:	2001      	movs	r0, #1
}
 801b79a:	b004      	add	sp, #16
 801b79c:	bd70      	pop	{r4, r5, r6, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801b79e:	2002      	movs	r0, #2
 801b7a0:	e7fb      	b.n	801b79a <lfs_dir_find_match+0x3a>

0801b7a2 <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 801b7a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b7a6:	b089      	sub	sp, #36	@ 0x24
 801b7a8:	9305      	str	r3, [sp, #20]
 801b7aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (size == 0) {
 801b7ac:	b953      	cbnz	r3, 801b7c4 <lfs_ctz_find+0x22>
        *block = LFS_BLOCK_NULL;
 801b7ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b7b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b7b4:	6013      	str	r3, [r2, #0]
        *off = 0;
 801b7b6:	2300      	movs	r3, #0
 801b7b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b7ba:	6013      	str	r3, [r2, #0]
}
 801b7bc:	4618      	mov	r0, r3
 801b7be:	b009      	add	sp, #36	@ 0x24
 801b7c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b7c4:	4607      	mov	r7, r0
 801b7c6:	4688      	mov	r8, r1
 801b7c8:	4691      	mov	r9, r2
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801b7ca:	3b01      	subs	r3, #1
 801b7cc:	9307      	str	r3, [sp, #28]
 801b7ce:	a907      	add	r1, sp, #28
 801b7d0:	f7ff fa16 	bl	801ac00 <lfs_ctz_index>
 801b7d4:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 801b7d6:	a911      	add	r1, sp, #68	@ 0x44
 801b7d8:	4638      	mov	r0, r7
 801b7da:	f7ff fa11 	bl	801ac00 <lfs_ctz_index>
 801b7de:	4606      	mov	r6, r0
    while (current > target) {
 801b7e0:	42b5      	cmp	r5, r6
 801b7e2:	d91f      	bls.n	801b824 <lfs_ctz_find+0x82>
                lfs_npw2(current-target+1) - 1,
 801b7e4:	1bac      	subs	r4, r5, r6
    return 32 - __builtin_clz(a-1);
 801b7e6:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
 801b7ea:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
 801b7ee:	fa95 f3a5 	rbit	r3, r5
 801b7f2:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
 801b7f6:	429c      	cmp	r4, r3
 801b7f8:	bf28      	it	cs
 801b7fa:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 801b7fc:	2304      	movs	r3, #4
 801b7fe:	9303      	str	r3, [sp, #12]
 801b800:	aa05      	add	r2, sp, #20
 801b802:	9202      	str	r2, [sp, #8]
 801b804:	00a2      	lsls	r2, r4, #2
 801b806:	9201      	str	r2, [sp, #4]
 801b808:	9a05      	ldr	r2, [sp, #20]
 801b80a:	9200      	str	r2, [sp, #0]
 801b80c:	464a      	mov	r2, r9
 801b80e:	4641      	mov	r1, r8
 801b810:	4638      	mov	r0, r7
 801b812:	f7ff fa13 	bl	801ac3c <lfs_bd_read>
        if (err) {
 801b816:	4603      	mov	r3, r0
 801b818:	2800      	cmp	r0, #0
 801b81a:	d1cf      	bne.n	801b7bc <lfs_ctz_find+0x1a>
        current -= 1 << skip;
 801b81c:	2301      	movs	r3, #1
 801b81e:	40a3      	lsls	r3, r4
 801b820:	1aed      	subs	r5, r5, r3
 801b822:	e7dd      	b.n	801b7e0 <lfs_ctz_find+0x3e>
    *block = head;
 801b824:	9b05      	ldr	r3, [sp, #20]
 801b826:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b828:	6013      	str	r3, [r2, #0]
    *off = pos;
 801b82a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b82c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b82e:	6013      	str	r3, [r2, #0]
    return 0;
 801b830:	2300      	movs	r3, #0
 801b832:	e7c3      	b.n	801b7bc <lfs_ctz_find+0x1a>

0801b834 <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
 801b834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b838:	b087      	sub	sp, #28
 801b83a:	460c      	mov	r4, r1
 801b83c:	4617      	mov	r7, r2
    if (file->pos >= file->ctz.size) {
 801b83e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801b840:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801b842:	4291      	cmp	r1, r2
 801b844:	d272      	bcs.n	801b92c <lfs_file_flushedread+0xf8>
 801b846:	4680      	mov	r8, r0
    size = lfs_min(size, file->ctz.size - file->pos);
 801b848:	eba2 0901 	sub.w	r9, r2, r1
 801b84c:	4599      	cmp	r9, r3
 801b84e:	bf28      	it	cs
 801b850:	4699      	movcs	r9, r3
    nsize = size;
 801b852:	464e      	mov	r6, r9
    while (nsize > 0) {
 801b854:	e037      	b.n	801b8c6 <lfs_file_flushedread+0x92>
            if (!(file->flags & LFS_F_INLINE)) {
 801b856:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801b85a:	d041      	beq.n	801b8e0 <lfs_file_flushedread+0xac>
                file->block = LFS_BLOCK_INLINE;
 801b85c:	f06f 0301 	mvn.w	r3, #1
 801b860:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801b862:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b864:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_READING;
 801b866:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b868:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801b86c:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801b86e:	f8d8 3068 	ldr.w	r3, [r8, #104]	@ 0x68
 801b872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b874:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801b876:	1a9d      	subs	r5, r3, r2
 801b878:	42b5      	cmp	r5, r6
 801b87a:	bf28      	it	cs
 801b87c:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
 801b87e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b880:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 801b884:	d041      	beq.n	801b90a <lfs_file_flushedread+0xd6>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801b886:	88a1      	ldrh	r1, [r4, #4]
 801b888:	0289      	lsls	r1, r1, #10
            int err = lfs_dir_getread(lfs, &file->m,
 801b88a:	9505      	str	r5, [sp, #20]
 801b88c:	9704      	str	r7, [sp, #16]
 801b88e:	9203      	str	r2, [sp, #12]
 801b890:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801b894:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 801b898:	9102      	str	r1, [sp, #8]
 801b89a:	4a27      	ldr	r2, [pc, #156]	@ (801b938 <lfs_file_flushedread+0x104>)
 801b89c:	9201      	str	r2, [sp, #4]
 801b89e:	9300      	str	r3, [sp, #0]
 801b8a0:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801b8a4:	2200      	movs	r2, #0
 801b8a6:	f104 0108 	add.w	r1, r4, #8
 801b8aa:	4640      	mov	r0, r8
 801b8ac:	f7ff fd9e 	bl	801b3ec <lfs_dir_getread>
            if (err) {
 801b8b0:	4603      	mov	r3, r0
 801b8b2:	2800      	cmp	r0, #0
 801b8b4:	d13b      	bne.n	801b92e <lfs_file_flushedread+0xfa>
        file->pos += diff;
 801b8b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b8b8:	442b      	add	r3, r5
 801b8ba:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801b8bc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801b8be:	442b      	add	r3, r5
 801b8c0:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801b8c2:	442f      	add	r7, r5
        nsize -= diff;
 801b8c4:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
 801b8c6:	2e00      	cmp	r6, #0
 801b8c8:	d02e      	beq.n	801b928 <lfs_file_flushedread+0xf4>
        if (!(file->flags & LFS_F_READING) ||
 801b8ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b8cc:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801b8d0:	d0c1      	beq.n	801b856 <lfs_file_flushedread+0x22>
                file->off == lfs->cfg->block_size) {
 801b8d2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801b8d4:	f8d8 2068 	ldr.w	r2, [r8, #104]	@ 0x68
 801b8d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 801b8da:	4291      	cmp	r1, r2
 801b8dc:	d1c7      	bne.n	801b86e <lfs_file_flushedread+0x3a>
 801b8de:	e7ba      	b.n	801b856 <lfs_file_flushedread+0x22>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801b8e0:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801b8e4:	9303      	str	r3, [sp, #12]
 801b8e6:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801b8ea:	9302      	str	r3, [sp, #8]
 801b8ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b8ee:	9301      	str	r3, [sp, #4]
 801b8f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801b8f2:	9300      	str	r3, [sp, #0]
 801b8f4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801b8f6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801b8fa:	2100      	movs	r1, #0
 801b8fc:	4640      	mov	r0, r8
 801b8fe:	f7ff ff50 	bl	801b7a2 <lfs_ctz_find>
                if (err) {
 801b902:	4603      	mov	r3, r0
 801b904:	2800      	cmp	r0, #0
 801b906:	d0ae      	beq.n	801b866 <lfs_file_flushedread+0x32>
 801b908:	e011      	b.n	801b92e <lfs_file_flushedread+0xfa>
            int err = lfs_bd_read(lfs,
 801b90a:	9503      	str	r5, [sp, #12]
 801b90c:	9702      	str	r7, [sp, #8]
 801b90e:	9201      	str	r2, [sp, #4]
 801b910:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801b912:	9200      	str	r2, [sp, #0]
 801b914:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801b918:	2100      	movs	r1, #0
 801b91a:	4640      	mov	r0, r8
 801b91c:	f7ff f98e 	bl	801ac3c <lfs_bd_read>
            if (err) {
 801b920:	4603      	mov	r3, r0
 801b922:	2800      	cmp	r0, #0
 801b924:	d0c7      	beq.n	801b8b6 <lfs_file_flushedread+0x82>
 801b926:	e002      	b.n	801b92e <lfs_file_flushedread+0xfa>
    return size;
 801b928:	464b      	mov	r3, r9
 801b92a:	e000      	b.n	801b92e <lfs_file_flushedread+0xfa>
        return 0;
 801b92c:	2300      	movs	r3, #0
}
 801b92e:	4618      	mov	r0, r3
 801b930:	b007      	add	sp, #28
 801b932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b936:	bf00      	nop
 801b938:	fff7fc00 	.word	0xfff7fc00

0801b93c <lfs_bd_crc>:
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 801b93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b940:	b089      	sub	sp, #36	@ 0x24
 801b942:	4683      	mov	fp, r0
 801b944:	468a      	mov	sl, r1
 801b946:	9205      	str	r2, [sp, #20]
 801b948:	4698      	mov	r8, r3
 801b94a:	f8dd 904c 	ldr.w	r9, [sp, #76]	@ 0x4c
 801b94e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801b950:	9f15      	ldr	r7, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801b952:	2400      	movs	r4, #0
 801b954:	e006      	b.n	801b964 <lfs_bd_crc+0x28>
        *crc = lfs_crc(*crc, &dat, diff);
 801b956:	462a      	mov	r2, r5
 801b958:	a906      	add	r1, sp, #24
 801b95a:	6838      	ldr	r0, [r7, #0]
 801b95c:	f003 fd82 	bl	801f464 <lfs_crc>
 801b960:	6038      	str	r0, [r7, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 801b962:	442c      	add	r4, r5
 801b964:	42b4      	cmp	r4, r6
 801b966:	d216      	bcs.n	801b996 <lfs_bd_crc+0x5a>
        diff = lfs_min(size-i, sizeof(dat));
 801b968:	1b35      	subs	r5, r6, r4
 801b96a:	2d08      	cmp	r5, #8
 801b96c:	bf28      	it	cs
 801b96e:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801b970:	9503      	str	r5, [sp, #12]
 801b972:	ab06      	add	r3, sp, #24
 801b974:	9302      	str	r3, [sp, #8]
 801b976:	eb04 0309 	add.w	r3, r4, r9
 801b97a:	9301      	str	r3, [sp, #4]
 801b97c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b97e:	9300      	str	r3, [sp, #0]
 801b980:	eba8 0304 	sub.w	r3, r8, r4
 801b984:	9a05      	ldr	r2, [sp, #20]
 801b986:	4651      	mov	r1, sl
 801b988:	4658      	mov	r0, fp
 801b98a:	f7ff f957 	bl	801ac3c <lfs_bd_read>
        if (err) {
 801b98e:	4603      	mov	r3, r0
 801b990:	2800      	cmp	r0, #0
 801b992:	d0e0      	beq.n	801b956 <lfs_bd_crc+0x1a>
 801b994:	e000      	b.n	801b998 <lfs_bd_crc+0x5c>
    return 0;
 801b996:	2300      	movs	r3, #0
}
 801b998:	4618      	mov	r0, r3
 801b99a:	b009      	add	sp, #36	@ 0x24
 801b99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b9a0 <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801b9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9a4:	b097      	sub	sp, #92	@ 0x5c
 801b9a6:	4605      	mov	r5, r0
 801b9a8:	460e      	mov	r6, r1
 801b9aa:	4617      	mov	r7, r2
 801b9ac:	9305      	str	r3, [sp, #20]
    if (lfs->block_count 
 801b9ae:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b9b0:	b13b      	cbz	r3, 801b9c2 <lfs_dir_fetchmatch+0x22>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 801b9b2:	6812      	ldr	r2, [r2, #0]
 801b9b4:	4293      	cmp	r3, r2
 801b9b6:	f240 825a 	bls.w	801be6e <lfs_dir_fetchmatch+0x4ce>
 801b9ba:	687a      	ldr	r2, [r7, #4]
 801b9bc:	4293      	cmp	r3, r2
 801b9be:	f240 8259 	bls.w	801be74 <lfs_dir_fetchmatch+0x4d4>
    uint32_t revs[2] = {0, 0};
 801b9c2:	2400      	movs	r4, #0
 801b9c4:	9412      	str	r4, [sp, #72]	@ 0x48
 801b9c6:	9413      	str	r4, [sp, #76]	@ 0x4c
    for (int i = 0; i < 2; i++) {
 801b9c8:	46a0      	mov	r8, r4
 801b9ca:	e010      	b.n	801b9ee <lfs_dir_fetchmatch+0x4e>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 801b9cc:	f118 0301 	adds.w	r3, r8, #1
 801b9d0:	f003 0301 	and.w	r3, r3, #1
 801b9d4:	bf48      	it	mi
 801b9d6:	425b      	negmi	r3, r3
 801b9d8:	a916      	add	r1, sp, #88	@ 0x58
 801b9da:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b9de:	f853 3c10 	ldr.w	r3, [r3, #-16]
    return (int)(unsigned)(a - b);
 801b9e2:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
 801b9e4:	2a00      	cmp	r2, #0
 801b9e6:	dd00      	ble.n	801b9ea <lfs_dir_fetchmatch+0x4a>
            r = i;
 801b9e8:	4644      	mov	r4, r8
    for (int i = 0; i < 2; i++) {
 801b9ea:	f108 0801 	add.w	r8, r8, #1
 801b9ee:	f1b8 0f01 	cmp.w	r8, #1
 801b9f2:	dc1d      	bgt.n	801ba30 <lfs_dir_fetchmatch+0x90>
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801b9f4:	ea4f 0988 	mov.w	r9, r8, lsl #2
 801b9f8:	ab12      	add	r3, sp, #72	@ 0x48
 801b9fa:	eb03 0288 	add.w	r2, r3, r8, lsl #2
        int err = lfs_bd_read(lfs,
 801b9fe:	2304      	movs	r3, #4
 801ba00:	9303      	str	r3, [sp, #12]
 801ba02:	9202      	str	r2, [sp, #8]
 801ba04:	2100      	movs	r1, #0
 801ba06:	9101      	str	r1, [sp, #4]
 801ba08:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 801ba0c:	9200      	str	r2, [sp, #0]
 801ba0e:	462a      	mov	r2, r5
 801ba10:	4628      	mov	r0, r5
 801ba12:	f7ff f913 	bl	801ac3c <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
 801ba16:	f109 0358 	add.w	r3, r9, #88	@ 0x58
 801ba1a:	eb0d 0903 	add.w	r9, sp, r3
 801ba1e:	f859 2c10 	ldr.w	r2, [r9, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
 801ba22:	4683      	mov	fp, r0
 801ba24:	2800      	cmp	r0, #0
 801ba26:	d0d1      	beq.n	801b9cc <lfs_dir_fetchmatch+0x2c>
 801ba28:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801ba2c:	d0dd      	beq.n	801b9ea <lfs_dir_fetchmatch+0x4a>
 801ba2e:	e21a      	b.n	801be66 <lfs_dir_fetchmatch+0x4c6>
    dir->pair[0] = pair[(r+0)%2];
 801ba30:	2c00      	cmp	r4, #0
 801ba32:	f004 0301 	and.w	r3, r4, #1
 801ba36:	bfb8      	it	lt
 801ba38:	425b      	neglt	r3, r3
 801ba3a:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 801ba3e:	6032      	str	r2, [r6, #0]
    dir->pair[1] = pair[(r+1)%2];
 801ba40:	f114 0c01 	adds.w	ip, r4, #1
 801ba44:	f00c 0c01 	and.w	ip, ip, #1
 801ba48:	bf48      	it	mi
 801ba4a:	f1cc 0c00 	rsbmi	ip, ip, #0
 801ba4e:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 801ba52:	6072      	str	r2, [r6, #4]
    dir->rev = revs[(r+0)%2];
 801ba54:	aa16      	add	r2, sp, #88	@ 0x58
 801ba56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ba5a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801ba5e:	60b3      	str	r3, [r6, #8]
    dir->off = 0; // nonzero = found some commits
 801ba60:	2400      	movs	r4, #0
 801ba62:	60f4      	str	r4, [r6, #12]
    lfs_stag_t besttag = -1;
 801ba64:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801ba68:	f8cd c01c 	str.w	ip, [sp, #28]
 801ba6c:	46a1      	mov	r9, r4
    for (int i = 0; i < 2; i++) {
 801ba6e:	f1b9 0f01 	cmp.w	r9, #1
 801ba72:	f300 81eb 	bgt.w	801be4c <lfs_dir_fetchmatch+0x4ac>
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801ba76:	4a90      	ldr	r2, [pc, #576]	@ (801bcb8 <lfs_dir_fetchmatch+0x318>)
 801ba78:	ab0e      	add	r3, sp, #56	@ 0x38
 801ba7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ba7e:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 801ba82:	2204      	movs	r2, #4
 801ba84:	f106 0108 	add.w	r1, r6, #8
 801ba88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ba8c:	f003 fcea 	bl	801f464 <lfs_crc>
 801ba90:	900b      	str	r0, [sp, #44]	@ 0x2c
        lfs_stag_t tempbesttag = besttag;
 801ba92:	f8cd b018 	str.w	fp, [sp, #24]
        bool hasfcrc = false;
 801ba96:	2300      	movs	r3, #0
 801ba98:	461c      	mov	r4, r3
 801ba9a:	9308      	str	r3, [sp, #32]
        bool tempsplit = false;
 801ba9c:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_tag_t ptag = 0xffffffff;
 801ba9e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
        lfs_off_t off = 0;
 801baa2:	461f      	mov	r7, r3
 801baa4:	e110      	b.n	801bcc8 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801baa6:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801baaa:	d101      	bne.n	801bab0 <lfs_dir_fetchmatch+0x110>
        bool maybeerased = false;
 801baac:	2300      	movs	r3, #0
 801baae:	e01e      	b.n	801baee <lfs_dir_fetchmatch+0x14e>
                return err;
 801bab0:	4683      	mov	fp, r0
 801bab2:	e1d8      	b.n	801be66 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x78000000) >> 20;
 801bab4:	ea4f 5318 	mov.w	r3, r8, lsr #20
 801bab8:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 801babc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801bac0:	bf14      	ite	ne
 801bac2:	2300      	movne	r3, #0
 801bac4:	2301      	moveq	r3, #1
                break;
 801bac6:	e012      	b.n	801baee <lfs_dir_fetchmatch+0x14e>
                err = lfs_bd_read(lfs,
 801bac8:	2204      	movs	r2, #4
 801baca:	9203      	str	r2, [sp, #12]
 801bacc:	aa0d      	add	r2, sp, #52	@ 0x34
 801bace:	9202      	str	r2, [sp, #8]
 801bad0:	1d22      	adds	r2, r4, #4
 801bad2:	9201      	str	r2, [sp, #4]
 801bad4:	6832      	ldr	r2, [r6, #0]
 801bad6:	9200      	str	r2, [sp, #0]
 801bad8:	462a      	mov	r2, r5
 801bada:	2100      	movs	r1, #0
 801badc:	4628      	mov	r0, r5
 801bade:	f7ff f8ad 	bl	801ac3c <lfs_bd_read>
                if (err) {
 801bae2:	bb80      	cbnz	r0, 801bb46 <lfs_dir_fetchmatch+0x1a6>
                if (crc != dcrc) {
 801bae4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bae8:	429a      	cmp	r2, r3
 801baea:	d031      	beq.n	801bb50 <lfs_dir_fetchmatch+0x1b0>
        bool maybeerased = false;
 801baec:	2300      	movs	r3, #0
        if (dir->off == 0) {
 801baee:	68f2      	ldr	r2, [r6, #12]
 801baf0:	2a00      	cmp	r2, #0
 801baf2:	f000 8165 	beq.w	801bdc0 <lfs_dir_fetchmatch+0x420>
        dir->erased = false;
 801baf6:	2100      	movs	r1, #0
 801baf8:	75b1      	strb	r1, [r6, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 801bafa:	b153      	cbz	r3, 801bb12 <lfs_dir_fetchmatch+0x172>
 801bafc:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 801bafe:	6a01      	ldr	r1, [r0, #32]
 801bb00:	fbb2 f3f1 	udiv	r3, r2, r1
 801bb04:	fb01 2313 	mls	r3, r1, r3, r2
 801bb08:	b91b      	cbnz	r3, 801bb12 <lfs_dir_fetchmatch+0x172>
            if (hasfcrc) {
 801bb0a:	9b08      	ldr	r3, [sp, #32]
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	f040 8165 	bne.w	801bddc <lfs_dir_fetchmatch+0x43c>
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 801bb12:	4631      	mov	r1, r6
 801bb14:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 801bb18:	f7fe ff00 	bl	801a91c <lfs_gstate_hasmovehere>
 801bb1c:	2800      	cmp	r0, #0
 801bb1e:	f000 817d 	beq.w	801be1c <lfs_dir_fetchmatch+0x47c>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801bb22:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801bb24:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801bb28:	f3cb 2289 	ubfx	r2, fp, #10, #10
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801bb2c:	429a      	cmp	r2, r3
 801bb2e:	f000 8173 	beq.w	801be18 <lfs_dir_fetchmatch+0x478>
            } else if (besttag != -1 &&
 801bb32:	f1bb 3fff 	cmp.w	fp, #4294967295	@ 0xffffffff
 801bb36:	f000 8171 	beq.w	801be1c <lfs_dir_fetchmatch+0x47c>
 801bb3a:	429a      	cmp	r2, r3
 801bb3c:	f240 816e 	bls.w	801be1c <lfs_dir_fetchmatch+0x47c>
                besttag -= LFS_MKTAG(0, 1, 0);
 801bb40:	f5ab 6b80 	sub.w	fp, fp, #1024	@ 0x400
 801bb44:	e16a      	b.n	801be1c <lfs_dir_fetchmatch+0x47c>
                    if (err == LFS_ERR_CORRUPT) {
 801bb46:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bb4a:	d0cf      	beq.n	801baec <lfs_dir_fetchmatch+0x14c>
                    return err;
 801bb4c:	4683      	mov	fp, r0
 801bb4e:	e18a      	b.n	801be66 <lfs_dir_fetchmatch+0x4c6>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 801bb50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bb52:	f3c3 5307 	ubfx	r3, r3, #20, #8
 801bb56:	ea8a 78c3 	eor.w	r8, sl, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 801bb5a:	2204      	movs	r2, #4
 801bb5c:	a90b      	add	r1, sp, #44	@ 0x2c
 801bb5e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801bb60:	f003 fc80 	bl	801f464 <lfs_crc>
 801bb64:	62e8      	str	r0, [r5, #44]	@ 0x2c
                dir->off = off + lfs_tag_dsize(tag);
 801bb66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 801bb68:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801bb6c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801bb70:	bf08      	it	eq
 801bb72:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 801bb74:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801bb78:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
 801bb7a:	4423      	add	r3, r4
 801bb7c:	60f3      	str	r3, [r6, #12]
                dir->etag = ptag;
 801bb7e:	f8c6 8010 	str.w	r8, [r6, #16]
                dir->count = tempcount;
 801bb82:	82b7      	strh	r7, [r6, #20]
                dir->tail[0] = temptail[0];
 801bb84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bb86:	61b3      	str	r3, [r6, #24]
                dir->tail[1] = temptail[1];
 801bb88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bb8a:	61f3      	str	r3, [r6, #28]
                dir->split = tempsplit;
 801bb8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bb8e:	75f3      	strb	r3, [r6, #23]
                crc = 0xffffffff;
 801bb90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bb94:	930b      	str	r3, [sp, #44]	@ 0x2c
                besttag = tempbesttag;
 801bb96:	f8dd b018 	ldr.w	fp, [sp, #24]
 801bb9a:	e095      	b.n	801bcc8 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801bb9c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bba0:	d101      	bne.n	801bba6 <lfs_dir_fetchmatch+0x206>
        bool maybeerased = false;
 801bba2:	2300      	movs	r3, #0
 801bba4:	e7a3      	b.n	801baee <lfs_dir_fetchmatch+0x14e>
                return err;
 801bba6:	4683      	mov	fp, r0
 801bba8:	e15d      	b.n	801be66 <lfs_dir_fetchmatch+0x4c6>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 801bbaa:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801bbae:	d021      	beq.n	801bbf4 <lfs_dir_fetchmatch+0x254>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 801bbb0:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801bbb4:	d046      	beq.n	801bc44 <lfs_dir_fetchmatch+0x2a4>
    return (tag & 0x7ff00000) >> 20;
 801bbb6:	f3c0 020a 	ubfx	r2, r0, #0, #11
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 801bbba:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 801bbbe:	429a      	cmp	r2, r3
 801bbc0:	f040 80e3 	bne.w	801bd8a <lfs_dir_fetchmatch+0x3ea>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801bbc4:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801bbc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801bbc8:	2208      	movs	r2, #8
 801bbca:	9203      	str	r2, [sp, #12]
 801bbcc:	aa10      	add	r2, sp, #64	@ 0x40
 801bbce:	9202      	str	r2, [sp, #8]
 801bbd0:	f8cd 8004 	str.w	r8, [sp, #4]
 801bbd4:	6832      	ldr	r2, [r6, #0]
 801bbd6:	9200      	str	r2, [sp, #0]
 801bbd8:	462a      	mov	r2, r5
 801bbda:	2100      	movs	r1, #0
 801bbdc:	4628      	mov	r0, r5
 801bbde:	f7ff f82d 	bl	801ac3c <lfs_bd_read>
                if (err) {
 801bbe2:	2800      	cmp	r0, #0
 801bbe4:	d04a      	beq.n	801bc7c <lfs_dir_fetchmatch+0x2dc>
                    if (err == LFS_ERR_CORRUPT) {
 801bbe6:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bbea:	f000 80e7 	beq.w	801bdbc <lfs_dir_fetchmatch+0x41c>
                hasfcrc = true;
 801bbee:	2301      	movs	r3, #1
 801bbf0:	9308      	str	r3, [sp, #32]
 801bbf2:	e0ca      	b.n	801bd8a <lfs_dir_fetchmatch+0x3ea>
    return (int8_t)lfs_tag_chunk(tag);
 801bbf4:	b240      	sxtb	r0, r0
                tempcount += lfs_tag_splice(tag);
 801bbf6:	fa17 f280 	uxtah	r2, r7, r0
 801bbfa:	b297      	uxth	r7, r2
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 801bbfc:	9a06      	ldr	r2, [sp, #24]
 801bbfe:	4611      	mov	r1, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801bc00:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801bc04:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801bc08:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801bc0c:	f022 0203 	bic.w	r2, r2, #3
 801bc10:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801bc14:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
 801bc18:	4293      	cmp	r3, r2
 801bc1a:	d00f      	beq.n	801bc3c <lfs_dir_fetchmatch+0x29c>
                } else if (tempbesttag != -1 &&
 801bc1c:	9a06      	ldr	r2, [sp, #24]
 801bc1e:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801bc22:	f000 80b2 	beq.w	801bd8a <lfs_dir_fetchmatch+0x3ea>
    return (tag & 0x000ffc00) >> 10;
 801bc26:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801bc2a:	f3c1 2289 	ubfx	r2, r1, #10, #10
                } else if (tempbesttag != -1 &&
 801bc2e:	429a      	cmp	r2, r3
 801bc30:	f0c0 80ab 	bcc.w	801bd8a <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801bc34:	eb01 2380 	add.w	r3, r1, r0, lsl #10
 801bc38:	9306      	str	r3, [sp, #24]
 801bc3a:	e0a6      	b.n	801bd8a <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag |= 0x80000000;
 801bc3c:	f041 4300 	orr.w	r3, r1, #2147483648	@ 0x80000000
 801bc40:	9306      	str	r3, [sp, #24]
 801bc42:	e0a2      	b.n	801bd8a <lfs_dir_fetchmatch+0x3ea>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 801bc44:	f000 0301 	and.w	r3, r0, #1
 801bc48:	9309      	str	r3, [sp, #36]	@ 0x24
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801bc4a:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801bc4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801bc4e:	2208      	movs	r2, #8
 801bc50:	9203      	str	r2, [sp, #12]
 801bc52:	aa0e      	add	r2, sp, #56	@ 0x38
 801bc54:	9202      	str	r2, [sp, #8]
 801bc56:	f8cd 8004 	str.w	r8, [sp, #4]
 801bc5a:	6832      	ldr	r2, [r6, #0]
 801bc5c:	9200      	str	r2, [sp, #0]
 801bc5e:	462a      	mov	r2, r5
 801bc60:	2100      	movs	r1, #0
 801bc62:	4628      	mov	r0, r5
 801bc64:	f7fe ffea 	bl	801ac3c <lfs_bd_read>
                if (err) {
 801bc68:	2800      	cmp	r0, #0
 801bc6a:	f000 808e 	beq.w	801bd8a <lfs_dir_fetchmatch+0x3ea>
                    if (err == LFS_ERR_CORRUPT) {
 801bc6e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bc72:	d101      	bne.n	801bc78 <lfs_dir_fetchmatch+0x2d8>
        bool maybeerased = false;
 801bc74:	2300      	movs	r3, #0
 801bc76:	e73a      	b.n	801baee <lfs_dir_fetchmatch+0x14e>
                    return err;
 801bc78:	4683      	mov	fp, r0
 801bc7a:	e0f4      	b.n	801be66 <lfs_dir_fetchmatch+0x4c6>
                hasfcrc = true;
 801bc7c:	2301      	movs	r3, #1
 801bc7e:	9308      	str	r3, [sp, #32]
 801bc80:	e083      	b.n	801bd8a <lfs_dir_fetchmatch+0x3ea>
                    if (res == LFS_ERR_CORRUPT) {
 801bc82:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bc86:	d101      	bne.n	801bc8c <lfs_dir_fetchmatch+0x2ec>
        bool maybeerased = false;
 801bc88:	2300      	movs	r3, #0
 801bc8a:	e730      	b.n	801baee <lfs_dir_fetchmatch+0x14e>
                    return res;
 801bc8c:	4683      	mov	fp, r0
 801bc8e:	e0ea      	b.n	801be66 <lfs_dir_fetchmatch+0x4c6>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 801bc90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bc92:	9b06      	ldr	r3, [sp, #24]
 801bc94:	469c      	mov	ip, r3
 801bc96:	ea82 0103 	eor.w	r1, r2, r3
 801bc9a:	4b08      	ldr	r3, [pc, #32]	@ (801bcbc <lfs_dir_fetchmatch+0x31c>)
 801bc9c:	400b      	ands	r3, r1
 801bc9e:	b17b      	cbz	r3, 801bcc0 <lfs_dir_fetchmatch+0x320>
                } else if (res == LFS_CMP_GT &&
 801bca0:	2802      	cmp	r0, #2
 801bca2:	d110      	bne.n	801bcc6 <lfs_dir_fetchmatch+0x326>
    return (tag & 0x000ffc00) >> 10;
 801bca4:	f3c2 2389 	ubfx	r3, r2, #10, #10
 801bca8:	f3cc 2c89 	ubfx	ip, ip, #10, #10
                } else if (res == LFS_CMP_GT &&
 801bcac:	459c      	cmp	ip, r3
 801bcae:	d30a      	bcc.n	801bcc6 <lfs_dir_fetchmatch+0x326>
                    tempbesttag = tag | 0x80000000;
 801bcb0:	f042 4300 	orr.w	r3, r2, #2147483648	@ 0x80000000
 801bcb4:	9306      	str	r3, [sp, #24]
 801bcb6:	e006      	b.n	801bcc6 <lfs_dir_fetchmatch+0x326>
 801bcb8:	080355c4 	.word	0x080355c4
 801bcbc:	7ffffc00 	.word	0x7ffffc00
                    tempbesttag = -1;
 801bcc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bcc4:	9306      	str	r3, [sp, #24]
            ptag = tag;
 801bcc6:	46d0      	mov	r8, sl
    return ((int32_t)(tag << 22) >> 22) == -1;
 801bcc8:	f348 0209 	sbfx	r2, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801bccc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801bcd0:	bf14      	ite	ne
 801bcd2:	4643      	movne	r3, r8
 801bcd4:	f108 0301 	addeq.w	r3, r8, #1
    return tag & 0x000003ff;
 801bcd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801bcdc:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
 801bcde:	441c      	add	r4, r3
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 801bce0:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801bce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 801bce4:	2204      	movs	r2, #4
 801bce6:	9203      	str	r2, [sp, #12]
 801bce8:	aa0c      	add	r2, sp, #48	@ 0x30
 801bcea:	9202      	str	r2, [sp, #8]
 801bcec:	9401      	str	r4, [sp, #4]
 801bcee:	6832      	ldr	r2, [r6, #0]
 801bcf0:	9200      	str	r2, [sp, #0]
 801bcf2:	462a      	mov	r2, r5
 801bcf4:	2100      	movs	r1, #0
 801bcf6:	4628      	mov	r0, r5
 801bcf8:	f7fe ffa0 	bl	801ac3c <lfs_bd_read>
            if (err) {
 801bcfc:	2800      	cmp	r0, #0
 801bcfe:	f47f aed2 	bne.w	801baa6 <lfs_dir_fetchmatch+0x106>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 801bd02:	2204      	movs	r2, #4
 801bd04:	a90c      	add	r1, sp, #48	@ 0x30
 801bd06:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801bd08:	f003 fbac 	bl	801f464 <lfs_crc>
 801bd0c:	900b      	str	r0, [sp, #44]	@ 0x2c
            tag = lfs_frombe32(tag) ^ ptag;
 801bd0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return __builtin_bswap32(a);
 801bd10:	ba1b      	rev	r3, r3
 801bd12:	ea88 0a03 	eor.w	sl, r8, r3
 801bd16:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
            if (!lfs_tag_isvalid(tag)) {
 801bd1a:	f1ba 0f00 	cmp.w	sl, #0
 801bd1e:	f6ff aec9 	blt.w	801bab4 <lfs_dir_fetchmatch+0x114>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801bd22:	f34a 0309 	sbfx	r3, sl, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801bd26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801bd2a:	bf14      	ite	ne
 801bd2c:	4652      	movne	r2, sl
 801bd2e:	f10a 0201 	addeq.w	r2, sl, #1
    return tag & 0x000003ff;
 801bd32:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801bd36:	1d11      	adds	r1, r2, #4
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 801bd38:	4421      	add	r1, r4
 801bd3a:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801bd3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bd3e:	4299      	cmp	r1, r3
 801bd40:	d83a      	bhi.n	801bdb8 <lfs_dir_fetchmatch+0x418>
    return (tag & 0x78000000) >> 20;
 801bd42:	ea4f 511a 	mov.w	r1, sl, lsr #20
 801bd46:	f401 61f0 	and.w	r1, r1, #1920	@ 0x780
            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 801bd4a:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 801bd4e:	f43f aebb 	beq.w	801bac8 <lfs_dir_fetchmatch+0x128>
            err = lfs_bd_crc(lfs,
 801bd52:	f104 0804 	add.w	r8, r4, #4
 801bd56:	a90b      	add	r1, sp, #44	@ 0x2c
 801bd58:	9103      	str	r1, [sp, #12]
 801bd5a:	9202      	str	r2, [sp, #8]
 801bd5c:	f8cd 8004 	str.w	r8, [sp, #4]
 801bd60:	6832      	ldr	r2, [r6, #0]
 801bd62:	9200      	str	r2, [sp, #0]
 801bd64:	462a      	mov	r2, r5
 801bd66:	2100      	movs	r1, #0
 801bd68:	4628      	mov	r0, r5
 801bd6a:	f7ff fde7 	bl	801b93c <lfs_bd_crc>
            if (err) {
 801bd6e:	2800      	cmp	r0, #0
 801bd70:	f47f af14 	bne.w	801bb9c <lfs_dir_fetchmatch+0x1fc>
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801bd74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801bd76:	0d18      	lsrs	r0, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801bd78:	f410 61e0 	ands.w	r1, r0, #1792	@ 0x700
 801bd7c:	f47f af15 	bne.w	801bbaa <lfs_dir_fetchmatch+0x20a>
    return (tag & 0x000ffc00) >> 10;
 801bd80:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 801bd84:	429f      	cmp	r7, r3
 801bd86:	d800      	bhi.n	801bd8a <lfs_dir_fetchmatch+0x3ea>
                    tempcount = lfs_tag_id(tag) + 1;
 801bd88:	1c5f      	adds	r7, r3, #1
            if ((fmask & tag) == (fmask & ftag)) {
 801bd8a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801bd8c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801bd8e:	404b      	eors	r3, r1
 801bd90:	9a05      	ldr	r2, [sp, #20]
 801bd92:	4213      	tst	r3, r2
 801bd94:	d197      	bne.n	801bcc6 <lfs_dir_fetchmatch+0x326>
                        dir->pair[0], off+sizeof(tag)});
 801bd96:	6833      	ldr	r3, [r6, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 801bd98:	9314      	str	r3, [sp, #80]	@ 0x50
 801bd9a:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 801bd9e:	aa14      	add	r2, sp, #80	@ 0x50
 801bda0:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801bda2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801bda4:	4798      	blx	r3
                if (res < 0) {
 801bda6:	2800      	cmp	r0, #0
 801bda8:	f6ff af6b 	blt.w	801bc82 <lfs_dir_fetchmatch+0x2e2>
                if (res == LFS_CMP_EQ) {
 801bdac:	2800      	cmp	r0, #0
 801bdae:	f47f af6f 	bne.w	801bc90 <lfs_dir_fetchmatch+0x2f0>
                    tempbesttag = tag;
 801bdb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bdb4:	9306      	str	r3, [sp, #24]
 801bdb6:	e786      	b.n	801bcc6 <lfs_dir_fetchmatch+0x326>
        bool maybeerased = false;
 801bdb8:	2300      	movs	r3, #0
 801bdba:	e698      	b.n	801baee <lfs_dir_fetchmatch+0x14e>
 801bdbc:	2300      	movs	r3, #0
 801bdbe:	e696      	b.n	801baee <lfs_dir_fetchmatch+0x14e>
    lfs_block_t t = pair[0];
 801bdc0:	6833      	ldr	r3, [r6, #0]
    pair[0] = pair[1];
 801bdc2:	6872      	ldr	r2, [r6, #4]
 801bdc4:	6032      	str	r2, [r6, #0]
    pair[1] = t;
 801bdc6:	6073      	str	r3, [r6, #4]
            dir->rev = revs[(r+1)%2];
 801bdc8:	aa16      	add	r2, sp, #88	@ 0x58
 801bdca:	9b07      	ldr	r3, [sp, #28]
 801bdcc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bdd0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801bdd4:	60b3      	str	r3, [r6, #8]
    for (int i = 0; i < 2; i++) {
 801bdd6:	f109 0901 	add.w	r9, r9, #1
 801bdda:	e648      	b.n	801ba6e <lfs_dir_fetchmatch+0xce>
                uint32_t fcrc_ = 0xffffffff;
 801bddc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bde0:	930d      	str	r3, [sp, #52]	@ 0x34
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801bde2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 801bde4:	a90d      	add	r1, sp, #52	@ 0x34
 801bde6:	9103      	str	r1, [sp, #12]
 801bde8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801bdea:	9102      	str	r1, [sp, #8]
 801bdec:	9201      	str	r2, [sp, #4]
 801bdee:	6832      	ldr	r2, [r6, #0]
 801bdf0:	9200      	str	r2, [sp, #0]
 801bdf2:	462a      	mov	r2, r5
 801bdf4:	2100      	movs	r1, #0
 801bdf6:	4628      	mov	r0, r5
 801bdf8:	f7ff fda0 	bl	801b93c <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801bdfc:	b120      	cbz	r0, 801be08 <lfs_dir_fetchmatch+0x468>
 801bdfe:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801be02:	d001      	beq.n	801be08 <lfs_dir_fetchmatch+0x468>
                    return err;
 801be04:	4683      	mov	fp, r0
 801be06:	e02e      	b.n	801be66 <lfs_dir_fetchmatch+0x4c6>
                dir->erased = (fcrc_ == fcrc.crc);
 801be08:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801be0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801be0c:	4293      	cmp	r3, r2
 801be0e:	bf14      	ite	ne
 801be10:	2300      	movne	r3, #0
 801be12:	2301      	moveq	r3, #1
 801be14:	75b3      	strb	r3, [r6, #22]
 801be16:	e67c      	b.n	801bb12 <lfs_dir_fetchmatch+0x172>
                besttag |= 0x80000000;
 801be18:	f04b 4b00 	orr.w	fp, fp, #2147483648	@ 0x80000000
        if (id) {
 801be1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801be1e:	b13b      	cbz	r3, 801be30 <lfs_dir_fetchmatch+0x490>
    return (tag & 0x000ffc00) >> 10;
 801be20:	f3cb 2389 	ubfx	r3, fp, #10, #10
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 801be24:	8ab2      	ldrh	r2, [r6, #20]
    return (a < b) ? a : b;
 801be26:	4293      	cmp	r3, r2
 801be28:	bf28      	it	cs
 801be2a:	4613      	movcs	r3, r2
 801be2c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801be2e:	8013      	strh	r3, [r2, #0]
        if (lfs_tag_isvalid(besttag)) {
 801be30:	f1bb 0f00 	cmp.w	fp, #0
 801be34:	da17      	bge.n	801be66 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x000ffc00) >> 10;
 801be36:	f3cb 2389 	ubfx	r3, fp, #10, #10
        } else if (lfs_tag_id(besttag) < dir->count) {
 801be3a:	8ab2      	ldrh	r2, [r6, #20]
 801be3c:	429a      	cmp	r2, r3
 801be3e:	d902      	bls.n	801be46 <lfs_dir_fetchmatch+0x4a6>
            return LFS_ERR_NOENT;
 801be40:	f06f 0b01 	mvn.w	fp, #1
 801be44:	e00f      	b.n	801be66 <lfs_dir_fetchmatch+0x4c6>
            return 0;
 801be46:	f04f 0b00 	mov.w	fp, #0
 801be4a:	e00c      	b.n	801be66 <lfs_dir_fetchmatch+0x4c6>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 801be4c:	4b0b      	ldr	r3, [pc, #44]	@ (801be7c <lfs_dir_fetchmatch+0x4dc>)
 801be4e:	9301      	str	r3, [sp, #4]
 801be50:	6873      	ldr	r3, [r6, #4]
 801be52:	9300      	str	r3, [sp, #0]
 801be54:	6833      	ldr	r3, [r6, #0]
 801be56:	f240 5259 	movw	r2, #1369	@ 0x559
 801be5a:	4909      	ldr	r1, [pc, #36]	@ (801be80 <lfs_dir_fetchmatch+0x4e0>)
 801be5c:	4809      	ldr	r0, [pc, #36]	@ (801be84 <lfs_dir_fetchmatch+0x4e4>)
 801be5e:	f00d fcf1 	bl	8029844 <printf>
    return LFS_ERR_CORRUPT;
 801be62:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
}
 801be66:	4658      	mov	r0, fp
 801be68:	b017      	add	sp, #92	@ 0x5c
 801be6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801be6e:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801be72:	e7f8      	b.n	801be66 <lfs_dir_fetchmatch+0x4c6>
 801be74:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801be78:	e7f5      	b.n	801be66 <lfs_dir_fetchmatch+0x4c6>
 801be7a:	bf00      	nop
 801be7c:	08036364 	.word	0x08036364
 801be80:	080384b8 	.word	0x080384b8
 801be84:	08038640 	.word	0x08038640

0801be88 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 801be88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be8c:	b08a      	sub	sp, #40	@ 0x28
 801be8e:	4681      	mov	r9, r0
 801be90:	4688      	mov	r8, r1
 801be92:	4614      	mov	r4, r2
    parent->tail[0] = 0;
 801be94:	2300      	movs	r3, #0
 801be96:	6193      	str	r3, [r2, #24]
    parent->tail[1] = 1;
 801be98:	2501      	movs	r5, #1
 801be9a:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801be9c:	4a29      	ldr	r2, [pc, #164]	@ (801bf44 <lfs_fs_parent+0xbc>)
 801be9e:	ab05      	add	r3, sp, #20
 801bea0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bea4:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801bea8:	46aa      	mov	sl, r5
    while (!lfs_pair_isnull(parent->tail)) {
 801beaa:	e03a      	b.n	801bf22 <lfs_fs_parent+0x9a>
            LFS_WARN("Cycle detected in tail list");
 801beac:	4b26      	ldr	r3, [pc, #152]	@ (801bf48 <lfs_fs_parent+0xc0>)
 801beae:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 801beb2:	4926      	ldr	r1, [pc, #152]	@ (801bf4c <lfs_fs_parent+0xc4>)
 801beb4:	4826      	ldr	r0, [pc, #152]	@ (801bf50 <lfs_fs_parent+0xc8>)
 801beb6:	f00d fcc5 	bl	8029844 <printf>
            return LFS_ERR_CORRUPT;
 801beba:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801bebe:	e03c      	b.n	801bf3a <lfs_fs_parent+0xb2>
            tortoise[0] = parent->tail[0];
 801bec0:	9705      	str	r7, [sp, #20]
            tortoise[1] = parent->tail[1];
 801bec2:	69e3      	ldr	r3, [r4, #28]
 801bec4:	9306      	str	r3, [sp, #24]
            tortoise_period *= 2;
 801bec6:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801beca:	2500      	movs	r5, #0
 801becc:	e00d      	b.n	801beea <lfs_fs_parent+0x62>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801bece:	2301      	movs	r3, #1
 801bed0:	e000      	b.n	801bed4 <lfs_fs_parent+0x4c>
 801bed2:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(parent->tail)) {
 801bed4:	bb7b      	cbnz	r3, 801bf36 <lfs_fs_parent+0xae>
        if (lfs_pair_issync(parent->tail, tortoise)) {
 801bed6:	f104 0618 	add.w	r6, r4, #24
 801beda:	a905      	add	r1, sp, #20
 801bedc:	4630      	mov	r0, r6
 801bede:	f7fe fce7 	bl	801a8b0 <lfs_pair_issync>
 801bee2:	2800      	cmp	r0, #0
 801bee4:	d1e2      	bne.n	801beac <lfs_fs_parent+0x24>
        if (tortoise_i == tortoise_period) {
 801bee6:	4555      	cmp	r5, sl
 801bee8:	d0ea      	beq.n	801bec0 <lfs_fs_parent+0x38>
        tortoise_i += 1;
 801beea:	3501      	adds	r5, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801beec:	f8cd 901c 	str.w	r9, [sp, #28]
                    lfs, {pair[0], pair[1]}});
 801bef0:	f8d8 3000 	ldr.w	r3, [r8]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801bef4:	9308      	str	r3, [sp, #32]
                    lfs, {pair[0], pair[1]}});
 801bef6:	f8d8 3004 	ldr.w	r3, [r8, #4]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801befa:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 801befc:	ab07      	add	r3, sp, #28
 801befe:	9303      	str	r3, [sp, #12]
 801bf00:	4b14      	ldr	r3, [pc, #80]	@ (801bf54 <lfs_fs_parent+0xcc>)
 801bf02:	9302      	str	r3, [sp, #8]
 801bf04:	2300      	movs	r3, #0
 801bf06:	9301      	str	r3, [sp, #4]
 801bf08:	4b13      	ldr	r3, [pc, #76]	@ (801bf58 <lfs_fs_parent+0xd0>)
 801bf0a:	9300      	str	r3, [sp, #0]
 801bf0c:	4b13      	ldr	r3, [pc, #76]	@ (801bf5c <lfs_fs_parent+0xd4>)
 801bf0e:	4632      	mov	r2, r6
 801bf10:	4621      	mov	r1, r4
 801bf12:	4648      	mov	r0, r9
 801bf14:	f7ff fd44 	bl	801b9a0 <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 801bf18:	4603      	mov	r3, r0
 801bf1a:	b110      	cbz	r0, 801bf22 <lfs_fs_parent+0x9a>
 801bf1c:	f110 0f02 	cmn.w	r0, #2
 801bf20:	d10b      	bne.n	801bf3a <lfs_fs_parent+0xb2>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801bf22:	69a7      	ldr	r7, [r4, #24]
 801bf24:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801bf28:	d0d3      	beq.n	801bed2 <lfs_fs_parent+0x4a>
 801bf2a:	69e3      	ldr	r3, [r4, #28]
 801bf2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801bf30:	d0cd      	beq.n	801bece <lfs_fs_parent+0x46>
 801bf32:	2300      	movs	r3, #0
 801bf34:	e7ce      	b.n	801bed4 <lfs_fs_parent+0x4c>
    return LFS_ERR_NOENT;
 801bf36:	f06f 0301 	mvn.w	r3, #1
}
 801bf3a:	4618      	mov	r0, r3
 801bf3c:	b00a      	add	sp, #40	@ 0x28
 801bf3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf42:	bf00      	nop
 801bf44:	080355c4 	.word	0x080355c4
 801bf48:	08036364 	.word	0x08036364
 801bf4c:	080384b8 	.word	0x080384b8
 801bf50:	08038678 	.word	0x08038678
 801bf54:	0801b071 	.word	0x0801b071
 801bf58:	20000008 	.word	0x20000008
 801bf5c:	7ff003ff 	.word	0x7ff003ff

0801bf60 <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 801bf60:	b500      	push	{lr}
 801bf62:	b085      	sub	sp, #20
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 801bf64:	2300      	movs	r3, #0
 801bf66:	9303      	str	r3, [sp, #12]
 801bf68:	9302      	str	r3, [sp, #8]
 801bf6a:	9301      	str	r3, [sp, #4]
 801bf6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bf70:	9300      	str	r3, [sp, #0]
 801bf72:	f7ff fd15 	bl	801b9a0 <lfs_dir_fetchmatch>
}
 801bf76:	b005      	add	sp, #20
 801bf78:	f85d fb04 	ldr.w	pc, [sp], #4

0801bf7c <lfs_fs_traverse_>:
        bool includeorphans) {
 801bf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf80:	b093      	sub	sp, #76	@ 0x4c
 801bf82:	4606      	mov	r6, r0
 801bf84:	460f      	mov	r7, r1
 801bf86:	4690      	mov	r8, r2
 801bf88:	4699      	mov	r9, r3
    lfs_mdir_t dir = {.tail = {0, 1}};
 801bf8a:	2220      	movs	r2, #32
 801bf8c:	2100      	movs	r1, #0
 801bf8e:	a80a      	add	r0, sp, #40	@ 0x28
 801bf90:	f010 f976 	bl	802c280 <memset>
 801bf94:	2501      	movs	r5, #1
 801bf96:	9511      	str	r5, [sp, #68]	@ 0x44
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801bf98:	4a62      	ldr	r2, [pc, #392]	@ (801c124 <lfs_fs_traverse_+0x1a8>)
 801bf9a:	ab08      	add	r3, sp, #32
 801bf9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bfa0:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801bfa4:	46aa      	mov	sl, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801bfa6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801bfa8:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801bfac:	f000 8081 	beq.w	801c0b2 <lfs_fs_traverse_+0x136>
 801bfb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801bfb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801bfb6:	d07a      	beq.n	801c0ae <lfs_fs_traverse_+0x132>
 801bfb8:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d17b      	bne.n	801c0b6 <lfs_fs_traverse_+0x13a>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801bfbe:	a908      	add	r1, sp, #32
 801bfc0:	a810      	add	r0, sp, #64	@ 0x40
 801bfc2:	f7fe fc75 	bl	801a8b0 <lfs_pair_issync>
 801bfc6:	b988      	cbnz	r0, 801bfec <lfs_fs_traverse_+0x70>
        if (tortoise_i == tortoise_period) {
 801bfc8:	4555      	cmp	r5, sl
 801bfca:	d019      	beq.n	801c000 <lfs_fs_traverse_+0x84>
        tortoise_i += 1;
 801bfcc:	3501      	adds	r5, #1
        for (int i = 0; i < 2; i++) {
 801bfce:	2400      	movs	r4, #0
 801bfd0:	2c01      	cmp	r4, #1
 801bfd2:	dc1c      	bgt.n	801c00e <lfs_fs_traverse_+0x92>
            int err = cb(data, dir.tail[i]);
 801bfd4:	1da3      	adds	r3, r4, #6
 801bfd6:	aa12      	add	r2, sp, #72	@ 0x48
 801bfd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bfdc:	f853 1c20 	ldr.w	r1, [r3, #-32]
 801bfe0:	4640      	mov	r0, r8
 801bfe2:	47b8      	blx	r7
            if (err) {
 801bfe4:	4603      	mov	r3, r0
 801bfe6:	b9f8      	cbnz	r0, 801c028 <lfs_fs_traverse_+0xac>
        for (int i = 0; i < 2; i++) {
 801bfe8:	3401      	adds	r4, #1
 801bfea:	e7f1      	b.n	801bfd0 <lfs_fs_traverse_+0x54>
            LFS_WARN("Cycle detected in tail list");
 801bfec:	4b4e      	ldr	r3, [pc, #312]	@ (801c128 <lfs_fs_traverse_+0x1ac>)
 801bfee:	f241 2222 	movw	r2, #4642	@ 0x1222
 801bff2:	494e      	ldr	r1, [pc, #312]	@ (801c12c <lfs_fs_traverse_+0x1b0>)
 801bff4:	484e      	ldr	r0, [pc, #312]	@ (801c130 <lfs_fs_traverse_+0x1b4>)
 801bff6:	f00d fc25 	bl	8029844 <printf>
            return LFS_ERR_CORRUPT;
 801bffa:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801bffe:	e013      	b.n	801c028 <lfs_fs_traverse_+0xac>
            tortoise[0] = dir.tail[0];
 801c000:	9408      	str	r4, [sp, #32]
            tortoise[1] = dir.tail[1];
 801c002:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c004:	9309      	str	r3, [sp, #36]	@ 0x24
            tortoise_period *= 2;
 801c006:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801c00a:	2500      	movs	r5, #0
 801c00c:	e7de      	b.n	801bfcc <lfs_fs_traverse_+0x50>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 801c00e:	aa10      	add	r2, sp, #64	@ 0x40
 801c010:	a90a      	add	r1, sp, #40	@ 0x28
 801c012:	4630      	mov	r0, r6
 801c014:	f7ff ffa4 	bl	801bf60 <lfs_dir_fetch>
        if (err) {
 801c018:	9005      	str	r0, [sp, #20]
 801c01a:	2800      	cmp	r0, #0
 801c01c:	d17f      	bne.n	801c11e <lfs_fs_traverse_+0x1a2>
        for (uint16_t id = 0; id < dir.count; id++) {
 801c01e:	2400      	movs	r4, #0
 801c020:	e016      	b.n	801c050 <lfs_fs_traverse_+0xd4>
                if (tag == LFS_ERR_NOENT) {
 801c022:	f113 0f02 	cmn.w	r3, #2
 801c026:	d011      	beq.n	801c04c <lfs_fs_traverse_+0xd0>
}
 801c028:	4618      	mov	r0, r3
 801c02a:	b013      	add	sp, #76	@ 0x4c
 801c02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 801c030:	f8cd 8008 	str.w	r8, [sp, #8]
 801c034:	9701      	str	r7, [sp, #4]
 801c036:	9b07      	ldr	r3, [sp, #28]
 801c038:	9300      	str	r3, [sp, #0]
 801c03a:	9b06      	ldr	r3, [sp, #24]
 801c03c:	4632      	mov	r2, r6
 801c03e:	2100      	movs	r1, #0
 801c040:	4630      	mov	r0, r6
 801c042:	f7fe ffc9 	bl	801afd8 <lfs_ctz_traverse>
                if (err) {
 801c046:	4603      	mov	r3, r0
 801c048:	2800      	cmp	r0, #0
 801c04a:	d1ed      	bne.n	801c028 <lfs_fs_traverse_+0xac>
        for (uint16_t id = 0; id < dir.count; id++) {
 801c04c:	3401      	adds	r4, #1
 801c04e:	b2a4      	uxth	r4, r4
 801c050:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801c054:	42a3      	cmp	r3, r4
 801c056:	d9a6      	bls.n	801bfa6 <lfs_fs_traverse_+0x2a>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 801c058:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801c05a:	aa06      	add	r2, sp, #24
 801c05c:	9200      	str	r2, [sp, #0]
 801c05e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801c062:	f043 0308 	orr.w	r3, r3, #8
 801c066:	4a33      	ldr	r2, [pc, #204]	@ (801c134 <lfs_fs_traverse_+0x1b8>)
 801c068:	a90a      	add	r1, sp, #40	@ 0x28
 801c06a:	4630      	mov	r0, r6
 801c06c:	f7fe ff8a 	bl	801af84 <lfs_dir_get>
            if (tag < 0) {
 801c070:	1e03      	subs	r3, r0, #0
 801c072:	dbd6      	blt.n	801c022 <lfs_fs_traverse_+0xa6>
    return (tag & 0x7ff00000) >> 20;
 801c074:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801c078:	f240 2202 	movw	r2, #514	@ 0x202
 801c07c:	4293      	cmp	r3, r2
 801c07e:	d0d7      	beq.n	801c030 <lfs_fs_traverse_+0xb4>
            } else if (includeorphans &&
 801c080:	f1b9 0f00 	cmp.w	r9, #0
 801c084:	d0e2      	beq.n	801c04c <lfs_fs_traverse_+0xd0>
 801c086:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c08a:	d1df      	bne.n	801c04c <lfs_fs_traverse_+0xd0>
                for (int i = 0; i < 2; i++) {
 801c08c:	f8dd b014 	ldr.w	fp, [sp, #20]
 801c090:	e001      	b.n	801c096 <lfs_fs_traverse_+0x11a>
 801c092:	f10b 0b01 	add.w	fp, fp, #1
 801c096:	f1bb 0f01 	cmp.w	fp, #1
 801c09a:	dcd7      	bgt.n	801c04c <lfs_fs_traverse_+0xd0>
                    err = cb(data, (&ctz.head)[i]);
 801c09c:	ab06      	add	r3, sp, #24
 801c09e:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 801c0a2:	4640      	mov	r0, r8
 801c0a4:	47b8      	blx	r7
                    if (err) {
 801c0a6:	4603      	mov	r3, r0
 801c0a8:	2800      	cmp	r0, #0
 801c0aa:	d0f2      	beq.n	801c092 <lfs_fs_traverse_+0x116>
 801c0ac:	e7bc      	b.n	801c028 <lfs_fs_traverse_+0xac>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c0ae:	2301      	movs	r3, #1
 801c0b0:	e783      	b.n	801bfba <lfs_fs_traverse_+0x3e>
 801c0b2:	2301      	movs	r3, #1
 801c0b4:	e781      	b.n	801bfba <lfs_fs_traverse_+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801c0b6:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
 801c0b8:	e00f      	b.n	801c0da <lfs_fs_traverse_+0x15e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801c0ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801c0bc:	f8cd 8008 	str.w	r8, [sp, #8]
 801c0c0:	9701      	str	r7, [sp, #4]
 801c0c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c0c4:	9200      	str	r2, [sp, #0]
 801c0c6:	4632      	mov	r2, r6
 801c0c8:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801c0cc:	4630      	mov	r0, r6
 801c0ce:	f7fe ff83 	bl	801afd8 <lfs_ctz_traverse>
            if (err) {
 801c0d2:	4603      	mov	r3, r0
 801c0d4:	b158      	cbz	r0, 801c0ee <lfs_fs_traverse_+0x172>
 801c0d6:	e7a7      	b.n	801c028 <lfs_fs_traverse_+0xac>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801c0d8:	6824      	ldr	r4, [r4, #0]
 801c0da:	b1f4      	cbz	r4, 801c11a <lfs_fs_traverse_+0x19e>
        if (f->type != LFS_TYPE_REG) {
 801c0dc:	79a3      	ldrb	r3, [r4, #6]
 801c0de:	2b01      	cmp	r3, #1
 801c0e0:	d1fa      	bne.n	801c0d8 <lfs_fs_traverse_+0x15c>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 801c0e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c0e4:	f403 1388 	and.w	r3, r3, #1114112	@ 0x110000
 801c0e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c0ec:	d0e5      	beq.n	801c0ba <lfs_fs_traverse_+0x13e>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 801c0ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c0f0:	f403 1390 	and.w	r3, r3, #1179648	@ 0x120000
 801c0f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801c0f8:	d1ee      	bne.n	801c0d8 <lfs_fs_traverse_+0x15c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801c0fa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801c0fc:	f8cd 8008 	str.w	r8, [sp, #8]
 801c100:	9701      	str	r7, [sp, #4]
 801c102:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801c104:	9200      	str	r2, [sp, #0]
 801c106:	4632      	mov	r2, r6
 801c108:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801c10c:	4630      	mov	r0, r6
 801c10e:	f7fe ff63 	bl	801afd8 <lfs_ctz_traverse>
            if (err) {
 801c112:	4603      	mov	r3, r0
 801c114:	2800      	cmp	r0, #0
 801c116:	d0df      	beq.n	801c0d8 <lfs_fs_traverse_+0x15c>
 801c118:	e786      	b.n	801c028 <lfs_fs_traverse_+0xac>
    return 0;
 801c11a:	2300      	movs	r3, #0
 801c11c:	e784      	b.n	801c028 <lfs_fs_traverse_+0xac>
            return err;
 801c11e:	9b05      	ldr	r3, [sp, #20]
 801c120:	e782      	b.n	801c028 <lfs_fs_traverse_+0xac>
 801c122:	bf00      	nop
 801c124:	080355c4 	.word	0x080355c4
 801c128:	08036364 	.word	0x08036364
 801c12c:	080384b8 	.word	0x080384b8
 801c130:	08038678 	.word	0x08038678
 801c134:	700ffc00 	.word	0x700ffc00

0801c138 <lfs_alloc_scan>:
static int lfs_alloc_scan(lfs_t *lfs) {
 801c138:	b538      	push	{r3, r4, r5, lr}
 801c13a:	4604      	mov	r4, r0
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801c13c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801c13e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 801c140:	4413      	add	r3, r2
            % lfs->block_count;
 801c142:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 801c144:	fbb3 f1f2 	udiv	r1, r3, r2
 801c148:	fb02 3311 	mls	r3, r2, r1, r3
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801c14c:	6543      	str	r3, [r0, #84]	@ 0x54
    lfs->lookahead.next = 0;
 801c14e:	2100      	movs	r1, #0
 801c150:	65c1      	str	r1, [r0, #92]	@ 0x5c
            8*lfs->cfg->lookahead_size,
 801c152:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801c154:	6b53      	ldr	r3, [r2, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 801c156:	00db      	lsls	r3, r3, #3
 801c158:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801c15a:	4283      	cmp	r3, r0
 801c15c:	bf28      	it	cs
 801c15e:	4603      	movcs	r3, r0
 801c160:	65a3      	str	r3, [r4, #88]	@ 0x58
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801c162:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801c164:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801c166:	f010 f88b 	bl	802c280 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 801c16a:	2301      	movs	r3, #1
 801c16c:	4622      	mov	r2, r4
 801c16e:	4906      	ldr	r1, [pc, #24]	@ (801c188 <lfs_alloc_scan+0x50>)
 801c170:	4620      	mov	r0, r4
 801c172:	f7ff ff03 	bl	801bf7c <lfs_fs_traverse_>
    if (err) {
 801c176:	4605      	mov	r5, r0
 801c178:	b908      	cbnz	r0, 801c17e <lfs_alloc_scan+0x46>
}
 801c17a:	4628      	mov	r0, r5
 801c17c:	bd38      	pop	{r3, r4, r5, pc}
        lfs_alloc_drop(lfs);
 801c17e:	4620      	mov	r0, r4
 801c180:	f7fe fc15 	bl	801a9ae <lfs_alloc_drop>
        return err;
 801c184:	e7f9      	b.n	801c17a <lfs_alloc_scan+0x42>
 801c186:	bf00      	nop
 801c188:	0801a9bd 	.word	0x0801a9bd

0801c18c <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 801c18c:	b530      	push	{r4, r5, lr}
 801c18e:	b083      	sub	sp, #12
 801c190:	4604      	mov	r4, r0
 801c192:	460d      	mov	r5, r1
        while (lfs->lookahead.next < lfs->lookahead.size) {
 801c194:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801c196:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801c198:	4293      	cmp	r3, r2
 801c19a:	d22b      	bcs.n	801c1f4 <lfs_alloc+0x68>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801c19c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801c19e:	08da      	lsrs	r2, r3, #3
 801c1a0:	5c8a      	ldrb	r2, [r1, r2]
                    & (1U << (lfs->lookahead.next % 8)))) {
 801c1a2:	f003 0107 	and.w	r1, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801c1a6:	40ca      	lsrs	r2, r1
 801c1a8:	f012 0f01 	tst.w	r2, #1
 801c1ac:	d005      	beq.n	801c1ba <lfs_alloc+0x2e>
            lfs->lookahead.next += 1;
 801c1ae:	3301      	adds	r3, #1
 801c1b0:	65e3      	str	r3, [r4, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 801c1b2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801c1b4:	3b01      	subs	r3, #1
 801c1b6:	6623      	str	r3, [r4, #96]	@ 0x60
 801c1b8:	e7ec      	b.n	801c194 <lfs_alloc+0x8>
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801c1ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c1bc:	4413      	add	r3, r2
                        % lfs->block_count;
 801c1be:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801c1c0:	fbb3 f1f2 	udiv	r1, r3, r2
 801c1c4:	fb02 3311 	mls	r3, r2, r1, r3
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801c1c8:	602b      	str	r3, [r5, #0]
                    lfs->lookahead.next += 1;
 801c1ca:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801c1cc:	3301      	adds	r3, #1
 801c1ce:	65e3      	str	r3, [r4, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 801c1d0:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801c1d2:	3a01      	subs	r2, #1
 801c1d4:	6622      	str	r2, [r4, #96]	@ 0x60
                    if (lfs->lookahead.next >= lfs->lookahead.size
 801c1d6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801c1d8:	4293      	cmp	r3, r2
 801c1da:	d225      	bcs.n	801c228 <lfs_alloc+0x9c>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801c1dc:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801c1de:	08da      	lsrs	r2, r3, #3
 801c1e0:	5c8a      	ldrb	r2, [r1, r2]
                                & (1U << (lfs->lookahead.next % 8)))) {
 801c1e2:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801c1e6:	fa22 f303 	lsr.w	r3, r2, r3
 801c1ea:	f013 0f01 	tst.w	r3, #1
 801c1ee:	d1ec      	bne.n	801c1ca <lfs_alloc+0x3e>
                        return 0;
 801c1f0:	2000      	movs	r0, #0
 801c1f2:	e01a      	b.n	801c22a <lfs_alloc+0x9e>
        if (lfs->lookahead.ckpoint <= 0) {
 801c1f4:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801c1f6:	b12a      	cbz	r2, 801c204 <lfs_alloc+0x78>
        int err = lfs_alloc_scan(lfs);
 801c1f8:	4620      	mov	r0, r4
 801c1fa:	f7ff ff9d 	bl	801c138 <lfs_alloc_scan>
        if(err) {
 801c1fe:	2800      	cmp	r0, #0
 801c200:	d0c8      	beq.n	801c194 <lfs_alloc+0x8>
 801c202:	e012      	b.n	801c22a <lfs_alloc+0x9e>
            LFS_ERROR("No more free space 0x%"PRIx32,
 801c204:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c206:	4413      	add	r3, r2
 801c208:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801c20a:	fbb3 f1f2 	udiv	r1, r3, r2
 801c20e:	4808      	ldr	r0, [pc, #32]	@ (801c230 <lfs_alloc+0xa4>)
 801c210:	9000      	str	r0, [sp, #0]
 801c212:	fb02 3311 	mls	r3, r2, r1, r3
 801c216:	f240 22b1 	movw	r2, #689	@ 0x2b1
 801c21a:	4906      	ldr	r1, [pc, #24]	@ (801c234 <lfs_alloc+0xa8>)
 801c21c:	4806      	ldr	r0, [pc, #24]	@ (801c238 <lfs_alloc+0xac>)
 801c21e:	f00d fb11 	bl	8029844 <printf>
            return LFS_ERR_NOSPC;
 801c222:	f06f 001b 	mvn.w	r0, #27
 801c226:	e000      	b.n	801c22a <lfs_alloc+0x9e>
                        return 0;
 801c228:	2000      	movs	r0, #0
}
 801c22a:	b003      	add	sp, #12
 801c22c:	bd30      	pop	{r4, r5, pc}
 801c22e:	bf00      	nop
 801c230:	08036364 	.word	0x08036364
 801c234:	080384b8 	.word	0x080384b8
 801c238:	080386a4 	.word	0x080386a4

0801c23c <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 801c23c:	b570      	push	{r4, r5, r6, lr}
 801c23e:	b084      	sub	sp, #16
 801c240:	4606      	mov	r6, r0
 801c242:	460c      	mov	r4, r1
    for (int i = 0; i < 2; i++) {
 801c244:	2500      	movs	r5, #0
 801c246:	2d01      	cmp	r5, #1
 801c248:	dc0d      	bgt.n	801c266 <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 801c24a:	3501      	adds	r5, #1
 801c24c:	f005 0101 	and.w	r1, r5, #1
 801c250:	bf48      	it	mi
 801c252:	4249      	negmi	r1, r1
 801c254:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801c258:	4630      	mov	r0, r6
 801c25a:	f7ff ff97 	bl	801c18c <lfs_alloc>
        if (err) {
 801c25e:	4603      	mov	r3, r0
 801c260:	2800      	cmp	r0, #0
 801c262:	d0f0      	beq.n	801c246 <lfs_dir_alloc+0xa>
 801c264:	e02d      	b.n	801c2c2 <lfs_dir_alloc+0x86>
    dir->rev = 0;
 801c266:	2100      	movs	r1, #0
 801c268:	4622      	mov	r2, r4
 801c26a:	f842 1f08 	str.w	r1, [r2, #8]!
    int err = lfs_bd_read(lfs,
 801c26e:	2304      	movs	r3, #4
 801c270:	9303      	str	r3, [sp, #12]
 801c272:	9202      	str	r2, [sp, #8]
 801c274:	9101      	str	r1, [sp, #4]
 801c276:	6822      	ldr	r2, [r4, #0]
 801c278:	9200      	str	r2, [sp, #0]
 801c27a:	4632      	mov	r2, r6
 801c27c:	4630      	mov	r0, r6
 801c27e:	f7fe fcdd 	bl	801ac3c <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
 801c282:	68a2      	ldr	r2, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 801c284:	4603      	mov	r3, r0
 801c286:	b110      	cbz	r0, 801c28e <lfs_dir_alloc+0x52>
 801c288:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c28c:	d119      	bne.n	801c2c2 <lfs_dir_alloc+0x86>
    if (lfs->cfg->block_cycles > 0) {
 801c28e:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801c290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c292:	2b00      	cmp	r3, #0
 801c294:	dd0a      	ble.n	801c2ac <lfs_dir_alloc+0x70>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 801c296:	3301      	adds	r3, #1
 801c298:	f043 0101 	orr.w	r1, r3, #1
    return lfs_aligndown(a + alignment-1, alignment);
 801c29c:	1853      	adds	r3, r2, r1
 801c29e:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801c2a0:	fbb3 f2f1 	udiv	r2, r3, r1
 801c2a4:	fb01 3212 	mls	r2, r1, r2, r3
 801c2a8:	1a9b      	subs	r3, r3, r2
 801c2aa:	60a3      	str	r3, [r4, #8]
    dir->off = sizeof(dir->rev);
 801c2ac:	2304      	movs	r3, #4
 801c2ae:	60e3      	str	r3, [r4, #12]
    dir->etag = 0xffffffff;
 801c2b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c2b4:	6122      	str	r2, [r4, #16]
    dir->count = 0;
 801c2b6:	2300      	movs	r3, #0
 801c2b8:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 801c2ba:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 801c2bc:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
 801c2be:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
 801c2c0:	75e3      	strb	r3, [r4, #23]
}
 801c2c2:	4618      	mov	r0, r3
 801c2c4:	b004      	add	sp, #16
 801c2c6:	bd70      	pop	{r4, r5, r6, pc}

0801c2c8 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 801c2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c2ca:	b089      	sub	sp, #36	@ 0x24
 801c2cc:	4605      	mov	r5, r0
 801c2ce:	460e      	mov	r6, r1
 801c2d0:	e053      	b.n	801c37a <lfs_file_relocate+0xb2>
                err = lfs_bd_read(lfs,
 801c2d2:	2201      	movs	r2, #1
 801c2d4:	9203      	str	r2, [sp, #12]
 801c2d6:	f10d 021b 	add.w	r2, sp, #27
 801c2da:	9202      	str	r2, [sp, #8]
 801c2dc:	9401      	str	r4, [sp, #4]
 801c2de:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 801c2e0:	9200      	str	r2, [sp, #0]
 801c2e2:	1b1b      	subs	r3, r3, r4
 801c2e4:	462a      	mov	r2, r5
 801c2e6:	f106 0140 	add.w	r1, r6, #64	@ 0x40
 801c2ea:	4628      	mov	r0, r5
 801c2ec:	f7fe fca6 	bl	801ac3c <lfs_bd_read>
                if (err) {
 801c2f0:	2800      	cmp	r0, #0
 801c2f2:	d152      	bne.n	801c39a <lfs_file_relocate+0xd2>
            err = lfs_bd_prog(lfs,
 801c2f4:	2301      	movs	r3, #1
 801c2f6:	9303      	str	r3, [sp, #12]
 801c2f8:	f10d 021b 	add.w	r2, sp, #27
 801c2fc:	9202      	str	r2, [sp, #8]
 801c2fe:	9401      	str	r4, [sp, #4]
 801c300:	9a07      	ldr	r2, [sp, #28]
 801c302:	9200      	str	r2, [sp, #0]
 801c304:	462a      	mov	r2, r5
 801c306:	f105 0110 	add.w	r1, r5, #16
 801c30a:	4628      	mov	r0, r5
 801c30c:	f7ff f992 	bl	801b634 <lfs_bd_prog>
            if (err) {
 801c310:	bb20      	cbnz	r0, 801c35c <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801c312:	3401      	adds	r4, #1
 801c314:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 801c316:	42a3      	cmp	r3, r4
 801c318:	d945      	bls.n	801c3a6 <lfs_file_relocate+0xde>
            if (file->flags & LFS_F_INLINE) {
 801c31a:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 801c31c:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 801c320:	d0d7      	beq.n	801c2d2 <lfs_file_relocate+0xa>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801c322:	88b2      	ldrh	r2, [r6, #4]
 801c324:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
 801c326:	2101      	movs	r1, #1
 801c328:	9105      	str	r1, [sp, #20]
 801c32a:	f10d 011b 	add.w	r1, sp, #27
 801c32e:	9104      	str	r1, [sp, #16]
 801c330:	9403      	str	r4, [sp, #12]
 801c332:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 801c336:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801c33a:	9202      	str	r2, [sp, #8]
 801c33c:	4a27      	ldr	r2, [pc, #156]	@ (801c3dc <lfs_file_relocate+0x114>)
 801c33e:	9201      	str	r2, [sp, #4]
 801c340:	1b1b      	subs	r3, r3, r4
 801c342:	9300      	str	r3, [sp, #0]
 801c344:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 801c348:	2200      	movs	r2, #0
 801c34a:	f106 0108 	add.w	r1, r6, #8
 801c34e:	4628      	mov	r0, r5
 801c350:	f7ff f84c 	bl	801b3ec <lfs_dir_getread>
                if (err) {
 801c354:	2800      	cmp	r0, #0
 801c356:	d0cd      	beq.n	801c2f4 <lfs_file_relocate+0x2c>
                    return err;
 801c358:	4607      	mov	r7, r0
 801c35a:	e03b      	b.n	801c3d4 <lfs_file_relocate+0x10c>
                if (err == LFS_ERR_CORRUPT) {
 801c35c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c360:	d11d      	bne.n	801c39e <lfs_file_relocate+0xd6>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801c362:	4b1f      	ldr	r3, [pc, #124]	@ (801c3e0 <lfs_file_relocate+0x118>)
 801c364:	9300      	str	r3, [sp, #0]
 801c366:	9b07      	ldr	r3, [sp, #28]
 801c368:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 801c36c:	491d      	ldr	r1, [pc, #116]	@ (801c3e4 <lfs_file_relocate+0x11c>)
 801c36e:	481e      	ldr	r0, [pc, #120]	@ (801c3e8 <lfs_file_relocate+0x120>)
 801c370:	f00d fa68 	bl	8029844 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801c374:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c378:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
 801c37a:	a907      	add	r1, sp, #28
 801c37c:	4628      	mov	r0, r5
 801c37e:	f7ff ff05 	bl	801c18c <lfs_alloc>
        if (err) {
 801c382:	4607      	mov	r7, r0
 801c384:	bb30      	cbnz	r0, 801c3d4 <lfs_file_relocate+0x10c>
        err = lfs_bd_erase(lfs, nblock);
 801c386:	9907      	ldr	r1, [sp, #28]
 801c388:	4628      	mov	r0, r5
 801c38a:	f7fe fbdd 	bl	801ab48 <lfs_bd_erase>
        if (err) {
 801c38e:	4607      	mov	r7, r0
 801c390:	b138      	cbz	r0, 801c3a2 <lfs_file_relocate+0xda>
            if (err == LFS_ERR_CORRUPT) {
 801c392:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c396:	d0e4      	beq.n	801c362 <lfs_file_relocate+0x9a>
 801c398:	e01c      	b.n	801c3d4 <lfs_file_relocate+0x10c>
                    return err;
 801c39a:	4607      	mov	r7, r0
 801c39c:	e01a      	b.n	801c3d4 <lfs_file_relocate+0x10c>
                return err;
 801c39e:	4607      	mov	r7, r0
 801c3a0:	e018      	b.n	801c3d4 <lfs_file_relocate+0x10c>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801c3a2:	2400      	movs	r4, #0
 801c3a4:	e7b6      	b.n	801c314 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 801c3a6:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c3a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801c3aa:	69e9      	ldr	r1, [r5, #28]
 801c3ac:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801c3ae:	f011 f9a3 	bl	802d6f8 <memcpy>
        file->cache.block = lfs->pcache.block;
 801c3b2:	692b      	ldr	r3, [r5, #16]
 801c3b4:	6433      	str	r3, [r6, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 801c3b6:	696b      	ldr	r3, [r5, #20]
 801c3b8:	6473      	str	r3, [r6, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 801c3ba:	69ab      	ldr	r3, [r5, #24]
 801c3bc:	64b3      	str	r3, [r6, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 801c3be:	f105 0110 	add.w	r1, r5, #16
 801c3c2:	4628      	mov	r0, r5
 801c3c4:	f7fe fc10 	bl	801abe8 <lfs_cache_zero>
        file->block = nblock;
 801c3c8:	9b07      	ldr	r3, [sp, #28]
 801c3ca:	63b3      	str	r3, [r6, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 801c3cc:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 801c3ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c3d2:	6333      	str	r3, [r6, #48]	@ 0x30
}
 801c3d4:	4638      	mov	r0, r7
 801c3d6:	b009      	add	sp, #36	@ 0x24
 801c3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c3da:	bf00      	nop
 801c3dc:	fff7fc00 	.word	0xfff7fc00
 801c3e0:	08036364 	.word	0x08036364
 801c3e4:	080384b8 	.word	0x080384b8
 801c3e8:	080386d0 	.word	0x080386d0

0801c3ec <lfs_file_outline>:
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 801c3ec:	b538      	push	{r3, r4, r5, lr}
 801c3ee:	4605      	mov	r5, r0
 801c3f0:	460c      	mov	r4, r1
    file->off = file->pos;
 801c3f2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801c3f4:	63cb      	str	r3, [r1, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 801c3f6:	f7fe fad7 	bl	801a9a8 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 801c3fa:	4621      	mov	r1, r4
 801c3fc:	4628      	mov	r0, r5
 801c3fe:	f7ff ff63 	bl	801c2c8 <lfs_file_relocate>
    if (err) {
 801c402:	b918      	cbnz	r0, 801c40c <lfs_file_outline+0x20>
    file->flags &= ~LFS_F_INLINE;
 801c404:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c406:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801c40a:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801c40c:	bd38      	pop	{r3, r4, r5, pc}
	...

0801c410 <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
 801c410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c414:	b08b      	sub	sp, #44	@ 0x2c
 801c416:	4605      	mov	r5, r0
 801c418:	460f      	mov	r7, r1
 801c41a:	4616      	mov	r6, r2
 801c41c:	9305      	str	r3, [sp, #20]
 801c41e:	e04d      	b.n	801c4bc <lfs_ctz_extend+0xac>
            if (size == 0) {
 801c420:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c422:	2b00      	cmp	r3, #0
 801c424:	d032      	beq.n	801c48c <lfs_ctz_extend+0x7c>
            lfs_size_t noff = size - 1;
 801c426:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c428:	3b01      	subs	r3, #1
 801c42a:	9308      	str	r3, [sp, #32]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 801c42c:	a908      	add	r1, sp, #32
 801c42e:	4628      	mov	r0, r5
 801c430:	f7fe fbe6 	bl	801ac00 <lfs_ctz_index>
            noff = noff + 1;
 801c434:	9b08      	ldr	r3, [sp, #32]
 801c436:	3301      	adds	r3, #1
 801c438:	9308      	str	r3, [sp, #32]
            if (noff != lfs->cfg->block_size) {
 801c43a:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801c43c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801c43e:	4293      	cmp	r3, r2
 801c440:	d05b      	beq.n	801c4fa <lfs_ctz_extend+0xea>
                for (lfs_off_t i = 0; i < noff; i++) {
 801c442:	2400      	movs	r4, #0
 801c444:	46b9      	mov	r9, r7
 801c446:	9f05      	ldr	r7, [sp, #20]
 801c448:	9b08      	ldr	r3, [sp, #32]
 801c44a:	42a3      	cmp	r3, r4
 801c44c:	d94a      	bls.n	801c4e4 <lfs_ctz_extend+0xd4>
                    err = lfs_bd_read(lfs,
 801c44e:	2201      	movs	r2, #1
 801c450:	9203      	str	r2, [sp, #12]
 801c452:	aa09      	add	r2, sp, #36	@ 0x24
 801c454:	9202      	str	r2, [sp, #8]
 801c456:	9401      	str	r4, [sp, #4]
 801c458:	9700      	str	r7, [sp, #0]
 801c45a:	1b1b      	subs	r3, r3, r4
 801c45c:	4632      	mov	r2, r6
 801c45e:	2100      	movs	r1, #0
 801c460:	4628      	mov	r0, r5
 801c462:	f7fe fbeb 	bl	801ac3c <lfs_bd_read>
                    if (err) {
 801c466:	4603      	mov	r3, r0
 801c468:	2800      	cmp	r0, #0
 801c46a:	d139      	bne.n	801c4e0 <lfs_ctz_extend+0xd0>
                    err = lfs_bd_prog(lfs,
 801c46c:	2301      	movs	r3, #1
 801c46e:	9303      	str	r3, [sp, #12]
 801c470:	aa09      	add	r2, sp, #36	@ 0x24
 801c472:	9202      	str	r2, [sp, #8]
 801c474:	9401      	str	r4, [sp, #4]
 801c476:	9a07      	ldr	r2, [sp, #28]
 801c478:	9200      	str	r2, [sp, #0]
 801c47a:	4632      	mov	r2, r6
 801c47c:	4649      	mov	r1, r9
 801c47e:	4628      	mov	r0, r5
 801c480:	f7ff f8d8 	bl	801b634 <lfs_bd_prog>
                    if (err) {
 801c484:	4603      	mov	r3, r0
 801c486:	b948      	cbnz	r0, 801c49c <lfs_ctz_extend+0x8c>
                for (lfs_off_t i = 0; i < noff; i++) {
 801c488:	3401      	adds	r4, #1
 801c48a:	e7dd      	b.n	801c448 <lfs_ctz_extend+0x38>
                *block = nblock;
 801c48c:	4682      	mov	sl, r0
 801c48e:	9b07      	ldr	r3, [sp, #28]
 801c490:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801c492:	6013      	str	r3, [r2, #0]
                *off = 0;
 801c494:	2300      	movs	r3, #0
 801c496:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c498:	6013      	str	r3, [r2, #0]
                return 0;
 801c49a:	e02a      	b.n	801c4f2 <lfs_ctz_extend+0xe2>
                        if (err == LFS_ERR_CORRUPT) {
 801c49c:	464f      	mov	r7, r9
 801c49e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c4a2:	d11d      	bne.n	801c4e0 <lfs_ctz_extend+0xd0>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801c4a4:	4b36      	ldr	r3, [pc, #216]	@ (801c580 <lfs_ctz_extend+0x170>)
 801c4a6:	9300      	str	r3, [sp, #0]
 801c4a8:	9b07      	ldr	r3, [sp, #28]
 801c4aa:	f640 32a6 	movw	r2, #2982	@ 0xba6
 801c4ae:	4935      	ldr	r1, [pc, #212]	@ (801c584 <lfs_ctz_extend+0x174>)
 801c4b0:	4835      	ldr	r0, [pc, #212]	@ (801c588 <lfs_ctz_extend+0x178>)
 801c4b2:	f00d f9c7 	bl	8029844 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801c4b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c4ba:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
 801c4bc:	a907      	add	r1, sp, #28
 801c4be:	4628      	mov	r0, r5
 801c4c0:	f7ff fe64 	bl	801c18c <lfs_alloc>
        if (err) {
 801c4c4:	2800      	cmp	r0, #0
 801c4c6:	d159      	bne.n	801c57c <lfs_ctz_extend+0x16c>
            err = lfs_bd_erase(lfs, nblock);
 801c4c8:	9907      	ldr	r1, [sp, #28]
 801c4ca:	4628      	mov	r0, r5
 801c4cc:	f7fe fb3c 	bl	801ab48 <lfs_bd_erase>
            if (err) {
 801c4d0:	4680      	mov	r8, r0
 801c4d2:	2800      	cmp	r0, #0
 801c4d4:	d0a4      	beq.n	801c420 <lfs_ctz_extend+0x10>
                if (err == LFS_ERR_CORRUPT) {
 801c4d6:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c4da:	d0e3      	beq.n	801c4a4 <lfs_ctz_extend+0x94>
 801c4dc:	4682      	mov	sl, r0
 801c4de:	e008      	b.n	801c4f2 <lfs_ctz_extend+0xe2>
                        return err;
 801c4e0:	469a      	mov	sl, r3
 801c4e2:	e006      	b.n	801c4f2 <lfs_ctz_extend+0xe2>
                *block = nblock;
 801c4e4:	46c2      	mov	sl, r8
 801c4e6:	9b07      	ldr	r3, [sp, #28]
 801c4e8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801c4ea:	6013      	str	r3, [r2, #0]
                *off = noff;
 801c4ec:	9b08      	ldr	r3, [sp, #32]
 801c4ee:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c4f0:	6013      	str	r3, [r2, #0]
}
 801c4f2:	4650      	mov	r0, sl
 801c4f4:	b00b      	add	sp, #44	@ 0x2c
 801c4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
 801c4fa:	3001      	adds	r0, #1
    return __builtin_ctz(a);
 801c4fc:	fa90 f9a0 	rbit	r9, r0
 801c500:	fab9 f989 	clz	r9, r9
            lfs_size_t skips = lfs_ctz(index) + 1;
 801c504:	f109 0a01 	add.w	sl, r9, #1
            lfs_block_t nhead = head;
 801c508:	9b05      	ldr	r3, [sp, #20]
 801c50a:	9309      	str	r3, [sp, #36]	@ 0x24
            for (lfs_off_t i = 0; i < skips; i++) {
 801c50c:	2400      	movs	r4, #0
 801c50e:	46ab      	mov	fp, r5
 801c510:	e006      	b.n	801c520 <lfs_ctz_extend+0x110>
                    if (err == LFS_ERR_CORRUPT) {
 801c512:	465d      	mov	r5, fp
 801c514:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c518:	d0c4      	beq.n	801c4a4 <lfs_ctz_extend+0x94>
                    return err;
 801c51a:	4682      	mov	sl, r0
 801c51c:	e7e9      	b.n	801c4f2 <lfs_ctz_extend+0xe2>
            for (lfs_off_t i = 0; i < skips; i++) {
 801c51e:	3401      	adds	r4, #1
 801c520:	4554      	cmp	r4, sl
 801c522:	d221      	bcs.n	801c568 <lfs_ctz_extend+0x158>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 801c524:	00a5      	lsls	r5, r4, #2
 801c526:	2304      	movs	r3, #4
 801c528:	9303      	str	r3, [sp, #12]
 801c52a:	ab09      	add	r3, sp, #36	@ 0x24
 801c52c:	9302      	str	r3, [sp, #8]
 801c52e:	9501      	str	r5, [sp, #4]
 801c530:	9b07      	ldr	r3, [sp, #28]
 801c532:	9300      	str	r3, [sp, #0]
 801c534:	2301      	movs	r3, #1
 801c536:	4632      	mov	r2, r6
 801c538:	4639      	mov	r1, r7
 801c53a:	4658      	mov	r0, fp
 801c53c:	f7ff f87a 	bl	801b634 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
 801c540:	9a09      	ldr	r2, [sp, #36]	@ 0x24
                if (err) {
 801c542:	2800      	cmp	r0, #0
 801c544:	d1e5      	bne.n	801c512 <lfs_ctz_extend+0x102>
                if (i != skips-1) {
 801c546:	454c      	cmp	r4, r9
 801c548:	d0e9      	beq.n	801c51e <lfs_ctz_extend+0x10e>
                    err = lfs_bd_read(lfs,
 801c54a:	2304      	movs	r3, #4
 801c54c:	9303      	str	r3, [sp, #12]
 801c54e:	a909      	add	r1, sp, #36	@ 0x24
 801c550:	9102      	str	r1, [sp, #8]
 801c552:	9501      	str	r5, [sp, #4]
 801c554:	9200      	str	r2, [sp, #0]
 801c556:	4632      	mov	r2, r6
 801c558:	2100      	movs	r1, #0
 801c55a:	4658      	mov	r0, fp
 801c55c:	f7fe fb6e 	bl	801ac3c <lfs_bd_read>
                    if (err) {
 801c560:	2800      	cmp	r0, #0
 801c562:	d0dc      	beq.n	801c51e <lfs_ctz_extend+0x10e>
                        return err;
 801c564:	4682      	mov	sl, r0
 801c566:	e7c4      	b.n	801c4f2 <lfs_ctz_extend+0xe2>
            *block = nblock;
 801c568:	46d1      	mov	r9, sl
 801c56a:	46c2      	mov	sl, r8
 801c56c:	9b07      	ldr	r3, [sp, #28]
 801c56e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801c570:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
 801c572:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801c576:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c578:	6019      	str	r1, [r3, #0]
            return 0;
 801c57a:	e7ba      	b.n	801c4f2 <lfs_ctz_extend+0xe2>
 801c57c:	4682      	mov	sl, r0
 801c57e:	e7b8      	b.n	801c4f2 <lfs_ctz_extend+0xe2>
 801c580:	08036364 	.word	0x08036364
 801c584:	080384b8 	.word	0x080384b8
 801c588:	080386d0 	.word	0x080386d0

0801c58c <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
 801c58c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c590:	b087      	sub	sp, #28
 801c592:	4605      	mov	r5, r0
 801c594:	460c      	mov	r4, r1
 801c596:	4617      	mov	r7, r2
 801c598:	4699      	mov	r9, r3
    if ((file->flags & LFS_F_INLINE) &&
 801c59a:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801c59c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801c5a0:	d008      	beq.n	801c5b4 <lfs_file_flushedwrite+0x28>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 801c5a2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801c5a4:	444b      	add	r3, r9
 801c5a6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
    return (a > b) ? a : b;
 801c5a8:	4293      	cmp	r3, r2
 801c5aa:	bf38      	it	cc
 801c5ac:	4613      	movcc	r3, r2
 801c5ae:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 801c5b0:	429a      	cmp	r2, r3
 801c5b2:	d32d      	bcc.n	801c610 <lfs_file_flushedwrite+0x84>
        const void *buffer, lfs_size_t size) {
 801c5b4:	46c8      	mov	r8, r9
    while (nsize > 0) {
 801c5b6:	f1b8 0f00 	cmp.w	r8, #0
 801c5ba:	f000 8094 	beq.w	801c6e6 <lfs_file_flushedwrite+0x15a>
        if (!(file->flags & LFS_F_WRITING) ||
 801c5be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c5c0:	f413 3200 	ands.w	r2, r3, #131072	@ 0x20000
 801c5c4:	d004      	beq.n	801c5d0 <lfs_file_flushedwrite+0x44>
                file->off == lfs->cfg->block_size) {
 801c5c6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801c5c8:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 801c5ca:	6a49      	ldr	r1, [r1, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 801c5cc:	4288      	cmp	r0, r1
 801c5ce:	d150      	bne.n	801c672 <lfs_file_flushedwrite+0xe6>
            if (!(file->flags & LFS_F_INLINE)) {
 801c5d0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801c5d4:	d144      	bne.n	801c660 <lfs_file_flushedwrite+0xd4>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 801c5d6:	b90a      	cbnz	r2, 801c5dc <lfs_file_flushedwrite+0x50>
 801c5d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c5da:	bb1b      	cbnz	r3, 801c624 <lfs_file_flushedwrite+0x98>
                lfs_alloc_ckpoint(lfs);
 801c5dc:	4628      	mov	r0, r5
 801c5de:	f7fe f9e3 	bl	801a9a8 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 801c5e2:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801c5e6:	9302      	str	r3, [sp, #8]
 801c5e8:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801c5ec:	9301      	str	r3, [sp, #4]
 801c5ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c5f0:	9300      	str	r3, [sp, #0]
 801c5f2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801c5f4:	462a      	mov	r2, r5
 801c5f6:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801c5fa:	4628      	mov	r0, r5
 801c5fc:	f7ff ff08 	bl	801c410 <lfs_ctz_extend>
                if (err) {
 801c600:	4601      	mov	r1, r0
 801c602:	2800      	cmp	r0, #0
 801c604:	d031      	beq.n	801c66a <lfs_file_flushedwrite+0xde>
                    file->flags |= LFS_F_ERRED;
 801c606:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c608:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801c60c:	6323      	str	r3, [r4, #48]	@ 0x30
                    return err;
 801c60e:	e059      	b.n	801c6c4 <lfs_file_flushedwrite+0x138>
        int err = lfs_file_outline(lfs, file);
 801c610:	f7ff feec 	bl	801c3ec <lfs_file_outline>
        if (err) {
 801c614:	4601      	mov	r1, r0
 801c616:	2800      	cmp	r0, #0
 801c618:	d0cc      	beq.n	801c5b4 <lfs_file_flushedwrite+0x28>
            file->flags |= LFS_F_ERRED;
 801c61a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c61c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801c620:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801c622:	e04f      	b.n	801c6c4 <lfs_file_flushedwrite+0x138>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801c624:	f104 0640 	add.w	r6, r4, #64	@ 0x40
 801c628:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                            file->pos-1, &file->block, &(lfs_off_t){0});
 801c62a:	2100      	movs	r1, #0
 801c62c:	9105      	str	r1, [sp, #20]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801c62e:	a805      	add	r0, sp, #20
 801c630:	9003      	str	r0, [sp, #12]
 801c632:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801c636:	9002      	str	r0, [sp, #8]
 801c638:	3b01      	subs	r3, #1
 801c63a:	9301      	str	r3, [sp, #4]
 801c63c:	9200      	str	r2, [sp, #0]
 801c63e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801c640:	4632      	mov	r2, r6
 801c642:	4628      	mov	r0, r5
 801c644:	f7ff f8ad 	bl	801b7a2 <lfs_ctz_find>
                    if (err) {
 801c648:	4601      	mov	r1, r0
 801c64a:	b920      	cbnz	r0, 801c656 <lfs_file_flushedwrite+0xca>
                    lfs_cache_zero(lfs, &file->cache);
 801c64c:	4631      	mov	r1, r6
 801c64e:	4628      	mov	r0, r5
 801c650:	f7fe faca 	bl	801abe8 <lfs_cache_zero>
 801c654:	e7c2      	b.n	801c5dc <lfs_file_flushedwrite+0x50>
                        file->flags |= LFS_F_ERRED;
 801c656:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c658:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801c65c:	6323      	str	r3, [r4, #48]	@ 0x30
                        return err;
 801c65e:	e031      	b.n	801c6c4 <lfs_file_flushedwrite+0x138>
                file->block = LFS_BLOCK_INLINE;
 801c660:	f06f 0301 	mvn.w	r3, #1
 801c664:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801c666:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c668:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_WRITING;
 801c66a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c66c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c670:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801c672:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c674:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 801c676:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801c678:	1af6      	subs	r6, r6, r3
    return (a < b) ? a : b;
 801c67a:	4546      	cmp	r6, r8
 801c67c:	bf28      	it	cs
 801c67e:	4646      	movcs	r6, r8
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 801c680:	9603      	str	r6, [sp, #12]
 801c682:	9702      	str	r7, [sp, #8]
 801c684:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801c686:	9301      	str	r3, [sp, #4]
 801c688:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801c68a:	9300      	str	r3, [sp, #0]
 801c68c:	2301      	movs	r3, #1
 801c68e:	462a      	mov	r2, r5
 801c690:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801c694:	4628      	mov	r0, r5
 801c696:	f7fe ffcd 	bl	801b634 <lfs_bd_prog>
            if (err) {
 801c69a:	4601      	mov	r1, r0
 801c69c:	b1b0      	cbz	r0, 801c6cc <lfs_file_flushedwrite+0x140>
                if (err == LFS_ERR_CORRUPT) {
 801c69e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c6a2:	d10b      	bne.n	801c6bc <lfs_file_flushedwrite+0x130>
            err = lfs_file_relocate(lfs, file);
 801c6a4:	4621      	mov	r1, r4
 801c6a6:	4628      	mov	r0, r5
 801c6a8:	f7ff fe0e 	bl	801c2c8 <lfs_file_relocate>
            if (err) {
 801c6ac:	4601      	mov	r1, r0
 801c6ae:	2800      	cmp	r0, #0
 801c6b0:	d0e6      	beq.n	801c680 <lfs_file_flushedwrite+0xf4>
                file->flags |= LFS_F_ERRED;
 801c6b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801c6b8:	6323      	str	r3, [r4, #48]	@ 0x30
                return err;
 801c6ba:	e003      	b.n	801c6c4 <lfs_file_flushedwrite+0x138>
                file->flags |= LFS_F_ERRED;
 801c6bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801c6c2:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801c6c4:	4608      	mov	r0, r1
 801c6c6:	b007      	add	sp, #28
 801c6c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
 801c6cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c6ce:	4433      	add	r3, r6
 801c6d0:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801c6d2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801c6d4:	4433      	add	r3, r6
 801c6d6:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801c6d8:	4437      	add	r7, r6
        nsize -= diff;
 801c6da:	eba8 0806 	sub.w	r8, r8, r6
        lfs_alloc_ckpoint(lfs);
 801c6de:	4628      	mov	r0, r5
 801c6e0:	f7fe f962 	bl	801a9a8 <lfs_alloc_ckpoint>
 801c6e4:	e767      	b.n	801c5b6 <lfs_file_flushedwrite+0x2a>
    return size;
 801c6e6:	4649      	mov	r1, r9
 801c6e8:	e7ec      	b.n	801c6c4 <lfs_file_flushedwrite+0x138>
	...

0801c6ec <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 801c6ec:	b570      	push	{r4, r5, r6, lr}
 801c6ee:	b098      	sub	sp, #96	@ 0x60
 801c6f0:	4605      	mov	r5, r0
 801c6f2:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 801c6f4:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801c6f6:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801c6fa:	d008      	beq.n	801c70e <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
 801c6fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801c700:	d102      	bne.n	801c708 <lfs_file_flush+0x1c>
    rcache->block = LFS_BLOCK_NULL;
 801c702:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c706:	640a      	str	r2, [r1, #64]	@ 0x40
        file->flags &= ~LFS_F_READING;
 801c708:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c70c:	6323      	str	r3, [r4, #48]	@ 0x30
    if (file->flags & LFS_F_WRITING) {
 801c70e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c710:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801c714:	d068      	beq.n	801c7e8 <lfs_file_flush+0xfc>
        lfs_off_t pos = file->pos;
 801c716:	6b66      	ldr	r6, [r4, #52]	@ 0x34
        if (!(file->flags & LFS_F_INLINE)) {
 801c718:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801c71c:	d151      	bne.n	801c7c2 <lfs_file_flush+0xd6>
            lfs_file_t orig = {
 801c71e:	2254      	movs	r2, #84	@ 0x54
 801c720:	2100      	movs	r1, #0
 801c722:	a803      	add	r0, sp, #12
 801c724:	f00f fdac 	bl	802c280 <memset>
                .ctz.head = file->ctz.head,
 801c728:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            lfs_file_t orig = {
 801c72a:	930d      	str	r3, [sp, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 801c72c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            lfs_file_t orig = {
 801c72e:	930e      	str	r3, [sp, #56]	@ 0x38
 801c730:	2301      	movs	r3, #1
 801c732:	930f      	str	r3, [sp, #60]	@ 0x3c
                .pos = file->pos,
 801c734:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            lfs_file_t orig = {
 801c736:	9310      	str	r3, [sp, #64]	@ 0x40
 801c738:	f10d 0c4c 	add.w	ip, sp, #76	@ 0x4c
 801c73c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801c740:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
 801c744:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c748:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
 801c74a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801c74c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801c74e:	429a      	cmp	r2, r3
 801c750:	d21a      	bcs.n	801c788 <lfs_file_flush+0x9c>
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 801c752:	2301      	movs	r3, #1
 801c754:	f10d 020b 	add.w	r2, sp, #11
 801c758:	a903      	add	r1, sp, #12
 801c75a:	4628      	mov	r0, r5
 801c75c:	f7ff f86a 	bl	801b834 <lfs_file_flushedread>
                if (res < 0) {
 801c760:	1e03      	subs	r3, r0, #0
 801c762:	db42      	blt.n	801c7ea <lfs_file_flush+0xfe>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 801c764:	2301      	movs	r3, #1
 801c766:	f10d 020b 	add.w	r2, sp, #11
 801c76a:	4621      	mov	r1, r4
 801c76c:	4628      	mov	r0, r5
 801c76e:	f7ff ff0d 	bl	801c58c <lfs_file_flushedwrite>
                if (res < 0) {
 801c772:	1e03      	subs	r3, r0, #0
 801c774:	db39      	blt.n	801c7ea <lfs_file_flush+0xfe>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 801c776:	682b      	ldr	r3, [r5, #0]
 801c778:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c77c:	d0e5      	beq.n	801c74a <lfs_file_flush+0x5e>
    rcache->block = LFS_BLOCK_NULL;
 801c77e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c782:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c784:	602b      	str	r3, [r5, #0]
}
 801c786:	e7e0      	b.n	801c74a <lfs_file_flush+0x5e>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 801c788:	2301      	movs	r3, #1
 801c78a:	462a      	mov	r2, r5
 801c78c:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801c790:	4628      	mov	r0, r5
 801c792:	f7fe fef5 	bl	801b580 <lfs_bd_flush>
                if (err) {
 801c796:	4603      	mov	r3, r0
 801c798:	b1c0      	cbz	r0, 801c7cc <lfs_file_flush+0xe0>
                    if (err == LFS_ERR_CORRUPT) {
 801c79a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c79e:	d124      	bne.n	801c7ea <lfs_file_flush+0xfe>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 801c7a0:	4b13      	ldr	r3, [pc, #76]	@ (801c7f0 <lfs_file_flush+0x104>)
 801c7a2:	9300      	str	r3, [sp, #0]
 801c7a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801c7a6:	f640 522b 	movw	r2, #3371	@ 0xd2b
 801c7aa:	4912      	ldr	r1, [pc, #72]	@ (801c7f4 <lfs_file_flush+0x108>)
 801c7ac:	4812      	ldr	r0, [pc, #72]	@ (801c7f8 <lfs_file_flush+0x10c>)
 801c7ae:	f00d f849 	bl	8029844 <printf>
                err = lfs_file_relocate(lfs, file);
 801c7b2:	4621      	mov	r1, r4
 801c7b4:	4628      	mov	r0, r5
 801c7b6:	f7ff fd87 	bl	801c2c8 <lfs_file_relocate>
                if (err) {
 801c7ba:	4603      	mov	r3, r0
 801c7bc:	2800      	cmp	r0, #0
 801c7be:	d0e3      	beq.n	801c788 <lfs_file_flush+0x9c>
 801c7c0:	e013      	b.n	801c7ea <lfs_file_flush+0xfe>
            file->pos = lfs_max(file->pos, file->ctz.size);
 801c7c2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    return (a > b) ? a : b;
 801c7c4:	42b3      	cmp	r3, r6
 801c7c6:	bf38      	it	cc
 801c7c8:	4633      	movcc	r3, r6
 801c7ca:	6363      	str	r3, [r4, #52]	@ 0x34
        file->ctz.head = file->block;
 801c7cc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801c7ce:	62a3      	str	r3, [r4, #40]	@ 0x28
        file->ctz.size = file->pos;
 801c7d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c7d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 801c7d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c7d6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801c7da:	6323      	str	r3, [r4, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 801c7dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c7e0:	6323      	str	r3, [r4, #48]	@ 0x30
        file->pos = pos;
 801c7e2:	6366      	str	r6, [r4, #52]	@ 0x34
    return 0;
 801c7e4:	2300      	movs	r3, #0
 801c7e6:	e000      	b.n	801c7ea <lfs_file_flush+0xfe>
 801c7e8:	2300      	movs	r3, #0
}
 801c7ea:	4618      	mov	r0, r3
 801c7ec:	b018      	add	sp, #96	@ 0x60
 801c7ee:	bd70      	pop	{r4, r5, r6, pc}
 801c7f0:	08036364 	.word	0x08036364
 801c7f4:	080384b8 	.word	0x080384b8
 801c7f8:	080386d0 	.word	0x080386d0

0801c7fc <lfs_file_read_>:
        void *buffer, lfs_size_t size) {
 801c7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7fe:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801c800:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801c802:	f013 0f01 	tst.w	r3, #1
 801c806:	d00f      	beq.n	801c828 <lfs_file_read_+0x2c>
 801c808:	4605      	mov	r5, r0
 801c80a:	460c      	mov	r4, r1
 801c80c:	4616      	mov	r6, r2
    if (file->flags & LFS_F_WRITING) {
 801c80e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801c812:	d002      	beq.n	801c81a <lfs_file_read_+0x1e>
        int err = lfs_file_flush(lfs, file);
 801c814:	f7ff ff6a 	bl	801c6ec <lfs_file_flush>
        if (err) {
 801c818:	b928      	cbnz	r0, 801c826 <lfs_file_read_+0x2a>
    return lfs_file_flushedread(lfs, file, buffer, size);
 801c81a:	463b      	mov	r3, r7
 801c81c:	4632      	mov	r2, r6
 801c81e:	4621      	mov	r1, r4
 801c820:	4628      	mov	r0, r5
 801c822:	f7ff f807 	bl	801b834 <lfs_file_flushedread>
}
 801c826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801c828:	4b03      	ldr	r3, [pc, #12]	@ (801c838 <lfs_file_read_+0x3c>)
 801c82a:	4a04      	ldr	r2, [pc, #16]	@ (801c83c <lfs_file_read_+0x40>)
 801c82c:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 801c830:	4803      	ldr	r0, [pc, #12]	@ (801c840 <lfs_file_read_+0x44>)
 801c832:	f00c ffd3 	bl	80297dc <__assert_func>
 801c836:	bf00      	nop
 801c838:	080386f4 	.word	0x080386f4
 801c83c:	0803912c 	.word	0x0803912c
 801c840:	080384b8 	.word	0x080384b8

0801c844 <lfs_file_seek_>:
        lfs_soff_t off, int whence) {
 801c844:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c846:	b083      	sub	sp, #12
 801c848:	4606      	mov	r6, r0
 801c84a:	460d      	mov	r5, r1
 801c84c:	4614      	mov	r4, r2
    lfs_off_t npos = file->pos;
 801c84e:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
    if (whence == LFS_SEEK_SET) {
 801c850:	b123      	cbz	r3, 801c85c <lfs_file_seek_+0x18>
    } else if (whence == LFS_SEEK_CUR) {
 801c852:	2b01      	cmp	r3, #1
 801c854:	d021      	beq.n	801c89a <lfs_file_seek_+0x56>
    } else if (whence == LFS_SEEK_END) {
 801c856:	2b02      	cmp	r3, #2
 801c858:	d023      	beq.n	801c8a2 <lfs_file_seek_+0x5e>
    lfs_off_t npos = file->pos;
 801c85a:	463c      	mov	r4, r7
    if (npos > lfs->file_max) {
 801c85c:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 801c85e:	42a3      	cmp	r3, r4
 801c860:	d339      	bcc.n	801c8d6 <lfs_file_seek_+0x92>
    if (file->pos == npos) {
 801c862:	42bc      	cmp	r4, r7
 801c864:	d023      	beq.n	801c8ae <lfs_file_seek_+0x6a>
        !(file->flags & LFS_F_WRITING)
 801c866:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    if (
 801c868:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801c86c:	d10c      	bne.n	801c888 <lfs_file_seek_+0x44>
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 801c86e:	9701      	str	r7, [sp, #4]
 801c870:	a901      	add	r1, sp, #4
 801c872:	4630      	mov	r0, r6
 801c874:	f7fe f9c4 	bl	801ac00 <lfs_ctz_index>
 801c878:	4607      	mov	r7, r0
        lfs_off_t noff = npos;
 801c87a:	9400      	str	r4, [sp, #0]
        int nindex = lfs_ctz_index(lfs, &noff);
 801c87c:	4669      	mov	r1, sp
 801c87e:	4630      	mov	r0, r6
 801c880:	f7fe f9be 	bl	801ac00 <lfs_ctz_index>
        if (oindex == nindex
 801c884:	4287      	cmp	r7, r0
 801c886:	d014      	beq.n	801c8b2 <lfs_file_seek_+0x6e>
    int err = lfs_file_flush(lfs, file);
 801c888:	4629      	mov	r1, r5
 801c88a:	4630      	mov	r0, r6
 801c88c:	f7ff ff2e 	bl	801c6ec <lfs_file_flush>
    if (err) {
 801c890:	b908      	cbnz	r0, 801c896 <lfs_file_seek_+0x52>
    file->pos = npos;
 801c892:	636c      	str	r4, [r5, #52]	@ 0x34
    return npos;
 801c894:	4620      	mov	r0, r4
}
 801c896:	b003      	add	sp, #12
 801c898:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((lfs_soff_t)file->pos + off < 0) {
 801c89a:	42e7      	cmn	r7, r4
 801c89c:	d415      	bmi.n	801c8ca <lfs_file_seek_+0x86>
            npos = file->pos + off;
 801c89e:	443c      	add	r4, r7
 801c8a0:	e7dc      	b.n	801c85c <lfs_file_seek_+0x18>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 801c8a2:	f7fe f90e 	bl	801aac2 <lfs_file_size_>
        if (res < 0) {
 801c8a6:	1900      	adds	r0, r0, r4
 801c8a8:	d412      	bmi.n	801c8d0 <lfs_file_seek_+0x8c>
            npos = res;
 801c8aa:	4604      	mov	r4, r0
 801c8ac:	e7d6      	b.n	801c85c <lfs_file_seek_+0x18>
        return npos;
 801c8ae:	4620      	mov	r0, r4
 801c8b0:	e7f1      	b.n	801c896 <lfs_file_seek_+0x52>
                && noff >= file->cache.off
 801c8b2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801c8b4:	9a00      	ldr	r2, [sp, #0]
 801c8b6:	4293      	cmp	r3, r2
 801c8b8:	d8e6      	bhi.n	801c888 <lfs_file_seek_+0x44>
                && noff < file->cache.off + file->cache.size) {
 801c8ba:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 801c8bc:	440b      	add	r3, r1
 801c8be:	429a      	cmp	r2, r3
 801c8c0:	d2e2      	bcs.n	801c888 <lfs_file_seek_+0x44>
            file->pos = npos;
 801c8c2:	636c      	str	r4, [r5, #52]	@ 0x34
            file->off = noff;
 801c8c4:	63ea      	str	r2, [r5, #60]	@ 0x3c
            return npos;
 801c8c6:	4620      	mov	r0, r4
 801c8c8:	e7e5      	b.n	801c896 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801c8ca:	f06f 0015 	mvn.w	r0, #21
 801c8ce:	e7e2      	b.n	801c896 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801c8d0:	f06f 0015 	mvn.w	r0, #21
 801c8d4:	e7df      	b.n	801c896 <lfs_file_seek_+0x52>
        return LFS_ERR_INVAL;
 801c8d6:	f06f 0015 	mvn.w	r0, #21
 801c8da:	e7dc      	b.n	801c896 <lfs_file_seek_+0x52>

0801c8dc <lfs_file_write_>:
        const void *buffer, lfs_size_t size) {
 801c8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8e0:	b082      	sub	sp, #8
 801c8e2:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801c8e4:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801c8e6:	f013 0f02 	tst.w	r3, #2
 801c8ea:	d02a      	beq.n	801c942 <lfs_file_write_+0x66>
 801c8ec:	4605      	mov	r5, r0
 801c8ee:	460c      	mov	r4, r1
 801c8f0:	4690      	mov	r8, r2
    if (file->flags & LFS_F_READING) {
 801c8f2:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801c8f6:	d12b      	bne.n	801c950 <lfs_file_write_+0x74>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 801c8f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c8fa:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 801c8fe:	d004      	beq.n	801c90a <lfs_file_write_+0x2e>
 801c900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c902:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c904:	4291      	cmp	r1, r2
 801c906:	d200      	bcs.n	801c90a <lfs_file_write_+0x2e>
        file->pos = file->ctz.size;
 801c908:	6362      	str	r2, [r4, #52]	@ 0x34
    if (file->pos + size > lfs->file_max) {
 801c90a:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 801c90c:	19f1      	adds	r1, r6, r7
 801c90e:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 801c910:	4291      	cmp	r1, r2
 801c912:	d831      	bhi.n	801c978 <lfs_file_write_+0x9c>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 801c914:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801c918:	d11f      	bne.n	801c95a <lfs_file_write_+0x7e>
 801c91a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801c91c:	429e      	cmp	r6, r3
 801c91e:	d91c      	bls.n	801c95a <lfs_file_write_+0x7e>
        file->pos = file->ctz.size;
 801c920:	6363      	str	r3, [r4, #52]	@ 0x34
        while (file->pos < pos) {
 801c922:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c924:	428e      	cmp	r6, r1
 801c926:	d918      	bls.n	801c95a <lfs_file_write_+0x7e>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 801c928:	2300      	movs	r3, #0
 801c92a:	f88d 3007 	strb.w	r3, [sp, #7]
 801c92e:	2301      	movs	r3, #1
 801c930:	f10d 0207 	add.w	r2, sp, #7
 801c934:	4621      	mov	r1, r4
 801c936:	4628      	mov	r0, r5
 801c938:	f7ff fe28 	bl	801c58c <lfs_file_flushedwrite>
            if (res < 0) {
 801c93c:	2800      	cmp	r0, #0
 801c93e:	daf0      	bge.n	801c922 <lfs_file_write_+0x46>
 801c940:	e017      	b.n	801c972 <lfs_file_write_+0x96>
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801c942:	4b0f      	ldr	r3, [pc, #60]	@ (801c980 <lfs_file_write_+0xa4>)
 801c944:	4a0f      	ldr	r2, [pc, #60]	@ (801c984 <lfs_file_write_+0xa8>)
 801c946:	f640 6126 	movw	r1, #3622	@ 0xe26
 801c94a:	480f      	ldr	r0, [pc, #60]	@ (801c988 <lfs_file_write_+0xac>)
 801c94c:	f00c ff46 	bl	80297dc <__assert_func>
        int err = lfs_file_flush(lfs, file);
 801c950:	f7ff fecc 	bl	801c6ec <lfs_file_flush>
        if (err) {
 801c954:	2800      	cmp	r0, #0
 801c956:	d0cf      	beq.n	801c8f8 <lfs_file_write_+0x1c>
 801c958:	e00b      	b.n	801c972 <lfs_file_write_+0x96>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 801c95a:	463b      	mov	r3, r7
 801c95c:	4642      	mov	r2, r8
 801c95e:	4621      	mov	r1, r4
 801c960:	4628      	mov	r0, r5
 801c962:	f7ff fe13 	bl	801c58c <lfs_file_flushedwrite>
    if (nsize < 0) {
 801c966:	2800      	cmp	r0, #0
 801c968:	db03      	blt.n	801c972 <lfs_file_write_+0x96>
    file->flags &= ~LFS_F_ERRED;
 801c96a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c96c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 801c970:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801c972:	b002      	add	sp, #8
 801c974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LFS_ERR_FBIG;
 801c978:	f06f 001a 	mvn.w	r0, #26
 801c97c:	e7f9      	b.n	801c972 <lfs_file_write_+0x96>
 801c97e:	bf00      	nop
 801c980:	08038724 	.word	0x08038724
 801c984:	0803910c 	.word	0x0803910c
 801c988:	080384b8 	.word	0x080384b8

0801c98c <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 801c98c:	b500      	push	{lr}
 801c98e:	b083      	sub	sp, #12
    lfs_size_t size = 0;
 801c990:	2300      	movs	r3, #0
 801c992:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 801c994:	aa01      	add	r2, sp, #4
 801c996:	4904      	ldr	r1, [pc, #16]	@ (801c9a8 <lfs_fs_size_+0x1c>)
 801c998:	f7ff faf0 	bl	801bf7c <lfs_fs_traverse_>
    if (err) {
 801c99c:	b900      	cbnz	r0, 801c9a0 <lfs_fs_size_+0x14>
        return err;
    }

    return size;
 801c99e:	9801      	ldr	r0, [sp, #4]
}
 801c9a0:	b003      	add	sp, #12
 801c9a2:	f85d fb04 	ldr.w	pc, [sp], #4
 801c9a6:	bf00      	nop
 801c9a8:	0801ab3d 	.word	0x0801ab3d

0801c9ac <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 801c9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c9b0:	b082      	sub	sp, #8
 801c9b2:	4680      	mov	r8, r0
 801c9b4:	460e      	mov	r6, r1
 801c9b6:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
 801c9b8:	2300      	movs	r3, #0
 801c9ba:	6193      	str	r3, [r2, #24]
    pdir->tail[1] = 1;
 801c9bc:	2501      	movs	r5, #1
 801c9be:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801c9c0:	4b27      	ldr	r3, [pc, #156]	@ (801ca60 <lfs_fs_pred+0xb4>)
 801c9c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c9c6:	ab02      	add	r3, sp, #8
 801c9c8:	e903 0003 	stmdb	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801c9cc:	46a9      	mov	r9, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c9ce:	69a7      	ldr	r7, [r4, #24]
 801c9d0:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801c9d4:	d035      	beq.n	801ca42 <lfs_fs_pred+0x96>
 801c9d6:	69e3      	ldr	r3, [r4, #28]
 801c9d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c9dc:	d02f      	beq.n	801ca3e <lfs_fs_pred+0x92>
 801c9de:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(pdir->tail)) {
 801c9e0:	bb8b      	cbnz	r3, 801ca46 <lfs_fs_pred+0x9a>
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 801c9e2:	f104 0a18 	add.w	sl, r4, #24
 801c9e6:	4669      	mov	r1, sp
 801c9e8:	4650      	mov	r0, sl
 801c9ea:	f7fd ff61 	bl	801a8b0 <lfs_pair_issync>
 801c9ee:	b9a8      	cbnz	r0, 801ca1c <lfs_fs_pred+0x70>
        if (tortoise_i == tortoise_period) {
 801c9f0:	454d      	cmp	r5, r9
 801c9f2:	d01d      	beq.n	801ca30 <lfs_fs_pred+0x84>
        tortoise_i += 1;
 801c9f4:	3501      	adds	r5, #1
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c9f6:	6833      	ldr	r3, [r6, #0]
 801c9f8:	42bb      	cmp	r3, r7
 801c9fa:	d027      	beq.n	801ca4c <lfs_fs_pred+0xa0>
 801c9fc:	69e1      	ldr	r1, [r4, #28]
 801c9fe:	6872      	ldr	r2, [r6, #4]
 801ca00:	4291      	cmp	r1, r2
 801ca02:	d027      	beq.n	801ca54 <lfs_fs_pred+0xa8>
 801ca04:	42ba      	cmp	r2, r7
 801ca06:	d027      	beq.n	801ca58 <lfs_fs_pred+0xac>
 801ca08:	4299      	cmp	r1, r3
 801ca0a:	d027      	beq.n	801ca5c <lfs_fs_pred+0xb0>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 801ca0c:	4652      	mov	r2, sl
 801ca0e:	4621      	mov	r1, r4
 801ca10:	4640      	mov	r0, r8
 801ca12:	f7ff faa5 	bl	801bf60 <lfs_dir_fetch>
        if (err) {
 801ca16:	2800      	cmp	r0, #0
 801ca18:	d0d9      	beq.n	801c9ce <lfs_fs_pred+0x22>
 801ca1a:	e018      	b.n	801ca4e <lfs_fs_pred+0xa2>
            LFS_WARN("Cycle detected in tail list");
 801ca1c:	4b11      	ldr	r3, [pc, #68]	@ (801ca64 <lfs_fs_pred+0xb8>)
 801ca1e:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 801ca22:	4911      	ldr	r1, [pc, #68]	@ (801ca68 <lfs_fs_pred+0xbc>)
 801ca24:	4811      	ldr	r0, [pc, #68]	@ (801ca6c <lfs_fs_pred+0xc0>)
 801ca26:	f00c ff0d 	bl	8029844 <printf>
            return LFS_ERR_CORRUPT;
 801ca2a:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801ca2e:	e00e      	b.n	801ca4e <lfs_fs_pred+0xa2>
            tortoise[0] = pdir->tail[0];
 801ca30:	9700      	str	r7, [sp, #0]
            tortoise[1] = pdir->tail[1];
 801ca32:	69e3      	ldr	r3, [r4, #28]
 801ca34:	9301      	str	r3, [sp, #4]
            tortoise_period *= 2;
 801ca36:	ea4f 0949 	mov.w	r9, r9, lsl #1
            tortoise_i = 0;
 801ca3a:	2500      	movs	r5, #0
 801ca3c:	e7da      	b.n	801c9f4 <lfs_fs_pred+0x48>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801ca3e:	2301      	movs	r3, #1
 801ca40:	e7ce      	b.n	801c9e0 <lfs_fs_pred+0x34>
 801ca42:	2301      	movs	r3, #1
 801ca44:	e7cc      	b.n	801c9e0 <lfs_fs_pred+0x34>
    return LFS_ERR_NOENT;
 801ca46:	f06f 0001 	mvn.w	r0, #1
 801ca4a:	e000      	b.n	801ca4e <lfs_fs_pred+0xa2>
            return 0;
 801ca4c:	2000      	movs	r0, #0
}
 801ca4e:	b002      	add	sp, #8
 801ca50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return 0;
 801ca54:	2000      	movs	r0, #0
 801ca56:	e7fa      	b.n	801ca4e <lfs_fs_pred+0xa2>
 801ca58:	2000      	movs	r0, #0
 801ca5a:	e7f8      	b.n	801ca4e <lfs_fs_pred+0xa2>
 801ca5c:	2000      	movs	r0, #0
 801ca5e:	e7f6      	b.n	801ca4e <lfs_fs_pred+0xa2>
 801ca60:	080355c4 	.word	0x080355c4
 801ca64:	08036364 	.word	0x08036364
 801ca68:	080384b8 	.word	0x080384b8
 801ca6c:	08038678 	.word	0x08038678

0801ca70 <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 801ca70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca72:	b085      	sub	sp, #20
 801ca74:	460c      	mov	r4, r1
 801ca76:	4616      	mov	r6, r2
 801ca78:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
 801ca7a:	9303      	str	r3, [sp, #12]
 801ca7c:	9202      	str	r2, [sp, #8]
 801ca7e:	684b      	ldr	r3, [r1, #4]
 801ca80:	9301      	str	r3, [sp, #4]
 801ca82:	680b      	ldr	r3, [r1, #0]
 801ca84:	9300      	str	r3, [sp, #0]
 801ca86:	2300      	movs	r3, #0
 801ca88:	4602      	mov	r2, r0
 801ca8a:	f100 0110 	add.w	r1, r0, #16
 801ca8e:	f7fe fdd1 	bl	801b634 <lfs_bd_prog>
    if (err) {
 801ca92:	4607      	mov	r7, r0
 801ca94:	b110      	cbz	r0, 801ca9c <lfs_dir_commitprog+0x2c>
}
 801ca96:	4638      	mov	r0, r7
 801ca98:	b005      	add	sp, #20
 801ca9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
 801ca9c:	462a      	mov	r2, r5
 801ca9e:	4631      	mov	r1, r6
 801caa0:	68e0      	ldr	r0, [r4, #12]
 801caa2:	f002 fcdf 	bl	801f464 <lfs_crc>
 801caa6:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 801caa8:	6863      	ldr	r3, [r4, #4]
 801caaa:	442b      	add	r3, r5
 801caac:	6063      	str	r3, [r4, #4]
    return 0;
 801caae:	e7f2      	b.n	801ca96 <lfs_dir_commitprog+0x26>

0801cab0 <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 801cab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cab4:	b087      	sub	sp, #28
 801cab6:	4614      	mov	r4, r2
 801cab8:	461f      	mov	r7, r3
    return ((int32_t)(tag << 22) >> 22) == -1;
 801caba:	f342 0309 	sbfx	r3, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801cabe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cac2:	bf14      	ite	ne
 801cac4:	4690      	movne	r8, r2
 801cac6:	f102 0801 	addeq.w	r8, r2, #1
    return tag & 0x000003ff;
 801caca:	f3c8 0809 	ubfx	r8, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801cace:	f108 0904 	add.w	r9, r8, #4
    if (commit->off + dsize > commit->end) {
 801cad2:	684b      	ldr	r3, [r1, #4]
 801cad4:	444b      	add	r3, r9
 801cad6:	694a      	ldr	r2, [r1, #20]
 801cad8:	4293      	cmp	r3, r2
 801cada:	d841      	bhi.n	801cb60 <lfs_dir_commitattr+0xb0>
 801cadc:	4605      	mov	r5, r0
 801cade:	460e      	mov	r6, r1
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 801cae0:	f024 4b00 	bic.w	fp, r4, #2147483648	@ 0x80000000
 801cae4:	688b      	ldr	r3, [r1, #8]
 801cae6:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
 801caea:	ba1b      	rev	r3, r3
 801caec:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 801caee:	2304      	movs	r3, #4
 801caf0:	aa05      	add	r2, sp, #20
 801caf2:	f7ff ffbd 	bl	801ca70 <lfs_dir_commitprog>
    if (err) {
 801caf6:	4682      	mov	sl, r0
 801caf8:	bb60      	cbnz	r0, 801cb54 <lfs_dir_commitattr+0xa4>
    if (!(tag & 0x80000000)) {
 801cafa:	2c00      	cmp	r4, #0
 801cafc:	da21      	bge.n	801cb42 <lfs_dir_commitattr+0x92>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801cafe:	2400      	movs	r4, #0
 801cb00:	4544      	cmp	r4, r8
 801cb02:	d225      	bcs.n	801cb50 <lfs_dir_commitattr+0xa0>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 801cb04:	eba9 0304 	sub.w	r3, r9, r4
                    disk->block, disk->off+i, &dat, 1);
 801cb08:	6839      	ldr	r1, [r7, #0]
 801cb0a:	687a      	ldr	r2, [r7, #4]
            err = lfs_bd_read(lfs,
 801cb0c:	2001      	movs	r0, #1
 801cb0e:	9003      	str	r0, [sp, #12]
 801cb10:	f10d 0013 	add.w	r0, sp, #19
 801cb14:	9002      	str	r0, [sp, #8]
 801cb16:	4422      	add	r2, r4
 801cb18:	9201      	str	r2, [sp, #4]
 801cb1a:	9100      	str	r1, [sp, #0]
 801cb1c:	3b04      	subs	r3, #4
 801cb1e:	462a      	mov	r2, r5
 801cb20:	2100      	movs	r1, #0
 801cb22:	4628      	mov	r0, r5
 801cb24:	f7fe f88a 	bl	801ac3c <lfs_bd_read>
            if (err) {
 801cb28:	4603      	mov	r3, r0
 801cb2a:	b9b8      	cbnz	r0, 801cb5c <lfs_dir_commitattr+0xac>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 801cb2c:	2301      	movs	r3, #1
 801cb2e:	f10d 0213 	add.w	r2, sp, #19
 801cb32:	4631      	mov	r1, r6
 801cb34:	4628      	mov	r0, r5
 801cb36:	f7ff ff9b 	bl	801ca70 <lfs_dir_commitprog>
            if (err) {
 801cb3a:	4603      	mov	r3, r0
 801cb3c:	b970      	cbnz	r0, 801cb5c <lfs_dir_commitattr+0xac>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801cb3e:	3401      	adds	r4, #1
 801cb40:	e7de      	b.n	801cb00 <lfs_dir_commitattr+0x50>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 801cb42:	4643      	mov	r3, r8
 801cb44:	463a      	mov	r2, r7
 801cb46:	4631      	mov	r1, r6
 801cb48:	4628      	mov	r0, r5
 801cb4a:	f7ff ff91 	bl	801ca70 <lfs_dir_commitprog>
        if (err) {
 801cb4e:	b950      	cbnz	r0, 801cb66 <lfs_dir_commitattr+0xb6>
    commit->ptag = tag & 0x7fffffff;
 801cb50:	f8c6 b008 	str.w	fp, [r6, #8]
}
 801cb54:	4650      	mov	r0, sl
 801cb56:	b007      	add	sp, #28
 801cb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return err;
 801cb5c:	469a      	mov	sl, r3
 801cb5e:	e7f9      	b.n	801cb54 <lfs_dir_commitattr+0xa4>
        return LFS_ERR_NOSPC;
 801cb60:	f06f 0a1b 	mvn.w	sl, #27
 801cb64:	e7f6      	b.n	801cb54 <lfs_dir_commitattr+0xa4>
            return err;
 801cb66:	4682      	mov	sl, r0
 801cb68:	e7f4      	b.n	801cb54 <lfs_dir_commitattr+0xa4>

0801cb6a <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 801cb6a:	b508      	push	{r3, lr}
 801cb6c:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 801cb6e:	460a      	mov	r2, r1
 801cb70:	6841      	ldr	r1, [r0, #4]
 801cb72:	6800      	ldr	r0, [r0, #0]
 801cb74:	f7ff ff9c 	bl	801cab0 <lfs_dir_commitattr>
}
 801cb78:	bd08      	pop	{r3, pc}
	...

0801cb7c <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 801cb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb80:	b08b      	sub	sp, #44	@ 0x2c
 801cb82:	4607      	mov	r7, r0
 801cb84:	460e      	mov	r6, r1
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801cb86:	684b      	ldr	r3, [r1, #4]
    const lfs_off_t end = lfs_alignup(
 801cb88:	3314      	adds	r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801cb8a:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801cb8c:	6a51      	ldr	r1, [r2, #36]	@ 0x24
            lfs->cfg->prog_size);
 801cb8e:	6a12      	ldr	r2, [r2, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801cb90:	428b      	cmp	r3, r1
 801cb92:	bf94      	ite	ls
 801cb94:	eb02 0803 	addls.w	r8, r2, r3
 801cb98:	eb02 0801 	addhi.w	r8, r2, r1
 801cb9c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
    return a - (a % alignment);
 801cba0:	fbb8 f3f2 	udiv	r3, r8, r2
 801cba4:	fb02 8313 	mls	r3, r2, r3, r8
 801cba8:	eba8 0803 	sub.w	r8, r8, r3
    uint32_t crc1 = 0;
 801cbac:	2300      	movs	r3, #0
 801cbae:	9305      	str	r3, [sp, #20]
    lfs_off_t off1 = 0;
 801cbb0:	469b      	mov	fp, r3
    while (commit->off < end) {
 801cbb2:	e03c      	b.n	801cc2e <lfs_dir_commitcrc+0xb2>
            int err = lfs_bd_read(lfs,
 801cbb4:	2201      	movs	r2, #1
 801cbb6:	9203      	str	r2, [sp, #12]
 801cbb8:	f10d 021b 	add.w	r2, sp, #27
 801cbbc:	9202      	str	r2, [sp, #8]
 801cbbe:	9401      	str	r4, [sp, #4]
 801cbc0:	6832      	ldr	r2, [r6, #0]
 801cbc2:	9200      	str	r2, [sp, #0]
 801cbc4:	463a      	mov	r2, r7
 801cbc6:	2100      	movs	r1, #0
 801cbc8:	4638      	mov	r0, r7
 801cbca:	f7fe f837 	bl	801ac3c <lfs_bd_read>
            if (err && err != LFS_ERR_CORRUPT) {
 801cbce:	4603      	mov	r3, r0
 801cbd0:	b118      	cbz	r0, 801cbda <lfs_dir_commitcrc+0x5e>
 801cbd2:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cbd6:	f040 80c0 	bne.w	801cd5a <lfs_dir_commitcrc+0x1de>
                    .size = lfs->cfg->prog_size,
 801cbda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cbdc:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 801cbde:	9307      	str	r3, [sp, #28]
 801cbe0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cbe4:	9208      	str	r2, [sp, #32]
                err = lfs_bd_crc(lfs,
 801cbe6:	aa08      	add	r2, sp, #32
 801cbe8:	9203      	str	r2, [sp, #12]
 801cbea:	9302      	str	r3, [sp, #8]
 801cbec:	9401      	str	r4, [sp, #4]
 801cbee:	6832      	ldr	r2, [r6, #0]
 801cbf0:	9200      	str	r2, [sp, #0]
 801cbf2:	463a      	mov	r2, r7
 801cbf4:	2100      	movs	r1, #0
 801cbf6:	4638      	mov	r0, r7
 801cbf8:	f7fe fea0 	bl	801b93c <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801cbfc:	4603      	mov	r3, r0
 801cbfe:	b118      	cbz	r0, 801cc08 <lfs_dir_commitcrc+0x8c>
 801cc00:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cc04:	f040 80a9 	bne.w	801cd5a <lfs_dir_commitcrc+0x1de>
                err = lfs_dir_commitattr(lfs, commit,
 801cc08:	ab07      	add	r3, sp, #28
 801cc0a:	4a59      	ldr	r2, [pc, #356]	@ (801cd70 <lfs_dir_commitcrc+0x1f4>)
 801cc0c:	4631      	mov	r1, r6
 801cc0e:	4638      	mov	r0, r7
 801cc10:	f7ff ff4e 	bl	801cab0 <lfs_dir_commitattr>
                if (err) {
 801cc14:	4603      	mov	r3, r0
 801cc16:	b348      	cbz	r0, 801cc6c <lfs_dir_commitcrc+0xf0>
 801cc18:	e09f      	b.n	801cd5a <lfs_dir_commitcrc+0x1de>
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801cc1a:	2300      	movs	r3, #0
 801cc1c:	463a      	mov	r2, r7
 801cc1e:	4651      	mov	r1, sl
 801cc20:	4638      	mov	r0, r7
 801cc22:	f7fe fd81 	bl	801b728 <lfs_bd_sync>
            if (err) {
 801cc26:	4603      	mov	r3, r0
 801cc28:	2800      	cmp	r0, #0
 801cc2a:	f040 8096 	bne.w	801cd5a <lfs_dir_commitcrc+0x1de>
    while (commit->off < end) {
 801cc2e:	6874      	ldr	r4, [r6, #4]
 801cc30:	4544      	cmp	r4, r8
 801cc32:	d268      	bcs.n	801cd06 <lfs_dir_commitcrc+0x18a>
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 801cc34:	eba8 0304 	sub.w	r3, r8, r4
 801cc38:	3b04      	subs	r3, #4
                + (commit->off+sizeof(lfs_tag_t)));
 801cc3a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801cc3e:	4293      	cmp	r3, r2
 801cc40:	bf94      	ite	ls
 801cc42:	18e4      	addls	r4, r4, r3
 801cc44:	18a4      	addhi	r4, r4, r2
        lfs_off_t noff = (
 801cc46:	3404      	adds	r4, #4
        if (noff < end) {
 801cc48:	4544      	cmp	r4, r8
 801cc4a:	d204      	bcs.n	801cc56 <lfs_dir_commitcrc+0xda>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 801cc4c:	f1a8 0314 	sub.w	r3, r8, #20
    return (a < b) ? a : b;
 801cc50:	429c      	cmp	r4, r3
 801cc52:	bf28      	it	cs
 801cc54:	461c      	movcs	r4, r3
        uint8_t eperturb = (uint8_t)-1;
 801cc56:	23ff      	movs	r3, #255	@ 0xff
 801cc58:	f88d 301b 	strb.w	r3, [sp, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 801cc5c:	4544      	cmp	r4, r8
 801cc5e:	d305      	bcc.n	801cc6c <lfs_dir_commitcrc+0xf0>
 801cc60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cc62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801cc64:	6a1b      	ldr	r3, [r3, #32]
 801cc66:	1ad2      	subs	r2, r2, r3
 801cc68:	42a2      	cmp	r2, r4
 801cc6a:	d2a3      	bcs.n	801cbb4 <lfs_dir_commitcrc+0x38>
        lfs_tag_t ntag = LFS_MKTAG(
 801cc6c:	f89d 201b 	ldrb.w	r2, [sp, #27]
 801cc70:	43d2      	mvns	r2, r2
 801cc72:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 801cc76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801cc7a:	6873      	ldr	r3, [r6, #4]
 801cc7c:	1ae5      	subs	r5, r4, r3
 801cc7e:	3d04      	subs	r5, #4
 801cc80:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 801cc84:	f445 257f 	orr.w	r5, r5, #1044480	@ 0xff000
 801cc88:	f445 6540 	orr.w	r5, r5, #3072	@ 0xc00
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 801cc8c:	68b3      	ldr	r3, [r6, #8]
 801cc8e:	406b      	eors	r3, r5
    return __builtin_bswap32(a);
 801cc90:	ba1b      	rev	r3, r3
 801cc92:	9307      	str	r3, [sp, #28]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 801cc94:	f10d 091c 	add.w	r9, sp, #28
 801cc98:	2204      	movs	r2, #4
 801cc9a:	4649      	mov	r1, r9
 801cc9c:	68f0      	ldr	r0, [r6, #12]
 801cc9e:	f002 fbe1 	bl	801f464 <lfs_crc>
 801cca2:	60f0      	str	r0, [r6, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 801cca4:	9008      	str	r0, [sp, #32]
        int err = lfs_bd_prog(lfs,
 801cca6:	f107 0a10 	add.w	sl, r7, #16
 801ccaa:	2308      	movs	r3, #8
 801ccac:	9303      	str	r3, [sp, #12]
 801ccae:	f8cd 9008 	str.w	r9, [sp, #8]
 801ccb2:	6873      	ldr	r3, [r6, #4]
 801ccb4:	9301      	str	r3, [sp, #4]
 801ccb6:	6833      	ldr	r3, [r6, #0]
 801ccb8:	9300      	str	r3, [sp, #0]
 801ccba:	2300      	movs	r3, #0
 801ccbc:	463a      	mov	r2, r7
 801ccbe:	4651      	mov	r1, sl
 801ccc0:	4638      	mov	r0, r7
 801ccc2:	f7fe fcb7 	bl	801b634 <lfs_bd_prog>
        if (err) {
 801ccc6:	4603      	mov	r3, r0
 801ccc8:	2800      	cmp	r0, #0
 801ccca:	d146      	bne.n	801cd5a <lfs_dir_commitcrc+0x1de>
        if (off1 == 0) {
 801cccc:	f1bb 0f00 	cmp.w	fp, #0
 801ccd0:	d104      	bne.n	801ccdc <lfs_dir_commitcrc+0x160>
            off1 = commit->off + sizeof(lfs_tag_t);
 801ccd2:	6873      	ldr	r3, [r6, #4]
 801ccd4:	f103 0b04 	add.w	fp, r3, #4
            crc1 = commit->crc;
 801ccd8:	68f3      	ldr	r3, [r6, #12]
 801ccda:	9305      	str	r3, [sp, #20]
        commit->off = noff;
 801ccdc:	6074      	str	r4, [r6, #4]
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 801ccde:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801cce2:	43db      	mvns	r3, r3
 801cce4:	061b      	lsls	r3, r3, #24
 801cce6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801ccea:	406b      	eors	r3, r5
 801ccec:	60b3      	str	r3, [r6, #8]
        commit->crc = 0xffffffff;
 801ccee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ccf2:	60f3      	str	r3, [r6, #12]
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 801ccf4:	4544      	cmp	r4, r8
 801ccf6:	d290      	bcs.n	801cc1a <lfs_dir_commitcrc+0x9e>
 801ccf8:	697b      	ldr	r3, [r7, #20]
 801ccfa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801ccfc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801ccfe:	4413      	add	r3, r2
 801cd00:	42a3      	cmp	r3, r4
 801cd02:	d894      	bhi.n	801cc2e <lfs_dir_commitcrc+0xb2>
 801cd04:	e789      	b.n	801cc1a <lfs_dir_commitcrc+0x9e>
    lfs_off_t off = commit->begin;
 801cd06:	6933      	ldr	r3, [r6, #16]
    uint32_t crc = 0xffffffff;
 801cd08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cd0c:	9209      	str	r2, [sp, #36]	@ 0x24
    int err = lfs_bd_crc(lfs,
 801cd0e:	aa09      	add	r2, sp, #36	@ 0x24
 801cd10:	9203      	str	r2, [sp, #12]
 801cd12:	ebab 0203 	sub.w	r2, fp, r3
 801cd16:	9202      	str	r2, [sp, #8]
 801cd18:	9301      	str	r3, [sp, #4]
 801cd1a:	6833      	ldr	r3, [r6, #0]
 801cd1c:	9300      	str	r3, [sp, #0]
 801cd1e:	f10b 0304 	add.w	r3, fp, #4
 801cd22:	463a      	mov	r2, r7
 801cd24:	2100      	movs	r1, #0
 801cd26:	4638      	mov	r0, r7
 801cd28:	f7fe fe08 	bl	801b93c <lfs_bd_crc>
    if (err) {
 801cd2c:	4603      	mov	r3, r0
 801cd2e:	b9a0      	cbnz	r0, 801cd5a <lfs_dir_commitcrc+0x1de>
    if (crc != crc1) {
 801cd30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd32:	9a05      	ldr	r2, [sp, #20]
 801cd34:	4293      	cmp	r3, r2
 801cd36:	d114      	bne.n	801cd62 <lfs_dir_commitcrc+0x1e6>
    err = lfs_bd_crc(lfs,
 801cd38:	ab09      	add	r3, sp, #36	@ 0x24
 801cd3a:	9303      	str	r3, [sp, #12]
 801cd3c:	2304      	movs	r3, #4
 801cd3e:	9302      	str	r3, [sp, #8]
 801cd40:	f8cd b004 	str.w	fp, [sp, #4]
 801cd44:	6832      	ldr	r2, [r6, #0]
 801cd46:	9200      	str	r2, [sp, #0]
 801cd48:	463a      	mov	r2, r7
 801cd4a:	2100      	movs	r1, #0
 801cd4c:	4638      	mov	r0, r7
 801cd4e:	f7fe fdf5 	bl	801b93c <lfs_bd_crc>
    if (err) {
 801cd52:	4603      	mov	r3, r0
 801cd54:	b908      	cbnz	r0, 801cd5a <lfs_dir_commitcrc+0x1de>
    if (crc != 0) {
 801cd56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cd58:	b932      	cbnz	r2, 801cd68 <lfs_dir_commitcrc+0x1ec>
}
 801cd5a:	4618      	mov	r0, r3
 801cd5c:	b00b      	add	sp, #44	@ 0x2c
 801cd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801cd62:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801cd66:	e7f8      	b.n	801cd5a <lfs_dir_commitcrc+0x1de>
        return LFS_ERR_CORRUPT;
 801cd68:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801cd6c:	e7f5      	b.n	801cd5a <lfs_dir_commitcrc+0x1de>
 801cd6e:	bf00      	nop
 801cd70:	5ffffc08 	.word	0x5ffffc08

0801cd74 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801cd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd78:	b09b      	sub	sp, #108	@ 0x6c
 801cd7a:	4605      	mov	r5, r0
 801cd7c:	460c      	mov	r4, r1
 801cd7e:	4616      	mov	r6, r2
 801cd80:	461f      	mov	r7, r3
 801cd82:	f8bd 8094 	ldrh.w	r8, [sp, #148]	@ 0x94
 801cd86:	f8bd a098 	ldrh.w	sl, [sp, #152]	@ 0x98
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 801cd8a:	f7fd fe7f 	bl	801aa8c <lfs_dir_needsrelocation>
    dir->rev += 1;
 801cd8e:	68a3      	ldr	r3, [r4, #8]
 801cd90:	3301      	adds	r3, #1
 801cd92:	60a3      	str	r3, [r4, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 801cd94:	4681      	mov	r9, r0
 801cd96:	2800      	cmp	r0, #0
 801cd98:	d034      	beq.n	801ce04 <lfs_dir_compact+0x90>
 801cd9a:	2300      	movs	r3, #0
 801cd9c:	9314      	str	r3, [sp, #80]	@ 0x50
 801cd9e:	2301      	movs	r3, #1
 801cda0:	9315      	str	r3, [sp, #84]	@ 0x54
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801cda2:	6823      	ldr	r3, [r4, #0]
 801cda4:	b373      	cbz	r3, 801ce04 <lfs_dir_compact+0x90>
 801cda6:	6862      	ldr	r2, [r4, #4]
 801cda8:	2a01      	cmp	r2, #1
 801cdaa:	d02b      	beq.n	801ce04 <lfs_dir_compact+0x90>
 801cdac:	2b01      	cmp	r3, #1
 801cdae:	d029      	beq.n	801ce04 <lfs_dir_compact+0x90>
 801cdb0:	b342      	cbz	r2, 801ce04 <lfs_dir_compact+0x90>
    rcache->block = LFS_BLOCK_NULL;
 801cdb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cdb6:	612b      	str	r3, [r5, #16]
        if (!tired) {
 801cdb8:	f1b9 0f00 	cmp.w	r9, #0
 801cdbc:	f000 810d 	beq.w	801cfda <lfs_dir_compact+0x266>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801cdc0:	2300      	movs	r3, #0
 801cdc2:	9318      	str	r3, [sp, #96]	@ 0x60
 801cdc4:	2301      	movs	r3, #1
 801cdc6:	9319      	str	r3, [sp, #100]	@ 0x64
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801cdc8:	6823      	ldr	r3, [r4, #0]
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	f000 810f 	beq.w	801cfee <lfs_dir_compact+0x27a>
 801cdd0:	6862      	ldr	r2, [r4, #4]
 801cdd2:	2a01      	cmp	r2, #1
 801cdd4:	f000 810b 	beq.w	801cfee <lfs_dir_compact+0x27a>
 801cdd8:	2b01      	cmp	r3, #1
 801cdda:	f000 8108 	beq.w	801cfee <lfs_dir_compact+0x27a>
 801cdde:	2a00      	cmp	r2, #0
 801cde0:	f000 8105 	beq.w	801cfee <lfs_dir_compact+0x27a>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 801cde4:	1d21      	adds	r1, r4, #4
 801cde6:	4628      	mov	r0, r5
 801cde8:	f7ff f9d0 	bl	801c18c <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 801cdec:	4603      	mov	r3, r0
 801cdee:	b330      	cbz	r0, 801ce3e <lfs_dir_compact+0xca>
 801cdf0:	f110 0f1c 	cmn.w	r0, #28
 801cdf4:	d11f      	bne.n	801ce36 <lfs_dir_compact+0xc2>
 801cdf6:	f1b9 0f00 	cmp.w	r9, #0
 801cdfa:	d01c      	beq.n	801ce36 <lfs_dir_compact+0xc2>
        relocated = true;
 801cdfc:	46cb      	mov	fp, r9
        tired = false;
 801cdfe:	f04f 0900 	mov.w	r9, #0
 801ce02:	e001      	b.n	801ce08 <lfs_dir_compact+0x94>
    bool relocated = false;
 801ce04:	f04f 0b00 	mov.w	fp, #0
                .block = dir->pair[1],
 801ce08:	6863      	ldr	r3, [r4, #4]
            struct lfs_commit commit = {
 801ce0a:	930e      	str	r3, [sp, #56]	@ 0x38
 801ce0c:	2300      	movs	r3, #0
 801ce0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ce10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ce14:	9210      	str	r2, [sp, #64]	@ 0x40
 801ce16:	9211      	str	r2, [sp, #68]	@ 0x44
 801ce18:	9312      	str	r3, [sp, #72]	@ 0x48
                .end = (lfs->cfg->metadata_max ?
 801ce1a:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801ce1c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801ce1e:	b19b      	cbz	r3, 801ce48 <lfs_dir_compact+0xd4>
 801ce20:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 801ce22:	9313      	str	r3, [sp, #76]	@ 0x4c
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 801ce24:	6861      	ldr	r1, [r4, #4]
 801ce26:	4628      	mov	r0, r5
 801ce28:	f7fd fe8e 	bl	801ab48 <lfs_bd_erase>
            if (err) {
 801ce2c:	4603      	mov	r3, r0
 801ce2e:	b170      	cbz	r0, 801ce4e <lfs_dir_compact+0xda>
                if (err == LFS_ERR_CORRUPT) {
 801ce30:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801ce34:	d0bd      	beq.n	801cdb2 <lfs_dir_compact+0x3e>
}
 801ce36:	4618      	mov	r0, r3
 801ce38:	b01b      	add	sp, #108	@ 0x6c
 801ce3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tired = false;
 801ce3e:	f04f 0900 	mov.w	r9, #0
        relocated = true;
 801ce42:	f04f 0b01 	mov.w	fp, #1
 801ce46:	e7df      	b.n	801ce08 <lfs_dir_compact+0x94>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801ce48:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801ce4a:	3b08      	subs	r3, #8
 801ce4c:	e7e9      	b.n	801ce22 <lfs_dir_compact+0xae>
            err = lfs_dir_commitprog(lfs, &commit,
 801ce4e:	2304      	movs	r3, #4
 801ce50:	f104 0208 	add.w	r2, r4, #8
 801ce54:	a90e      	add	r1, sp, #56	@ 0x38
 801ce56:	4628      	mov	r0, r5
 801ce58:	f7ff fe0a 	bl	801ca70 <lfs_dir_commitprog>
            if (err) {
 801ce5c:	4603      	mov	r3, r0
 801ce5e:	b118      	cbz	r0, 801ce68 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 801ce60:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801ce64:	d1e7      	bne.n	801ce36 <lfs_dir_compact+0xc2>
 801ce66:	e7a4      	b.n	801cdb2 <lfs_dir_compact+0x3e>
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801ce68:	9516      	str	r5, [sp, #88]	@ 0x58
 801ce6a:	ab0e      	add	r3, sp, #56	@ 0x38
 801ce6c:	9317      	str	r3, [sp, #92]	@ 0x5c
            err = lfs_dir_traverse(lfs,
 801ce6e:	ab16      	add	r3, sp, #88	@ 0x58
 801ce70:	9308      	str	r3, [sp, #32]
 801ce72:	4b65      	ldr	r3, [pc, #404]	@ (801d008 <lfs_dir_compact+0x294>)
 801ce74:	9307      	str	r3, [sp, #28]
 801ce76:	f1c8 0300 	rsb	r3, r8, #0
 801ce7a:	b21b      	sxth	r3, r3
 801ce7c:	9306      	str	r3, [sp, #24]
 801ce7e:	f8cd a014 	str.w	sl, [sp, #20]
 801ce82:	f8cd 8010 	str.w	r8, [sp, #16]
 801ce86:	2200      	movs	r2, #0
 801ce88:	9203      	str	r2, [sp, #12]
 801ce8a:	4b60      	ldr	r3, [pc, #384]	@ (801d00c <lfs_dir_compact+0x298>)
 801ce8c:	9302      	str	r3, [sp, #8]
 801ce8e:	9701      	str	r7, [sp, #4]
 801ce90:	9600      	str	r6, [sp, #0]
 801ce92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ce96:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801ce98:	4628      	mov	r0, r5
 801ce9a:	f7fe f911 	bl	801b0c0 <lfs_dir_traverse>
            if (err) {
 801ce9e:	4603      	mov	r3, r0
 801cea0:	b118      	cbz	r0, 801ceaa <lfs_dir_compact+0x136>
                if (err == LFS_ERR_CORRUPT) {
 801cea2:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cea6:	d1c6      	bne.n	801ce36 <lfs_dir_compact+0xc2>
 801cea8:	e783      	b.n	801cdb2 <lfs_dir_compact+0x3e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801ceaa:	69a2      	ldr	r2, [r4, #24]
 801ceac:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801ceb0:	d02c      	beq.n	801cf0c <lfs_dir_compact+0x198>
 801ceb2:	69e2      	ldr	r2, [r4, #28]
 801ceb4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801ceb8:	d026      	beq.n	801cf08 <lfs_dir_compact+0x194>
            if (!lfs_pair_isnull(dir->tail)) {
 801ceba:	f013 0f01 	tst.w	r3, #1
 801cebe:	d027      	beq.n	801cf10 <lfs_dir_compact+0x19c>
            lfs_gstate_t delta = {0};
 801cec0:	2300      	movs	r3, #0
 801cec2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cec4:	930c      	str	r3, [sp, #48]	@ 0x30
 801cec6:	930d      	str	r3, [sp, #52]	@ 0x34
            if (!relocated) {
 801cec8:	f1bb 0f00 	cmp.w	fp, #0
 801cecc:	d033      	beq.n	801cf36 <lfs_dir_compact+0x1c2>
            lfs_gstate_xor(&delta, &lfs->gdelta);
 801cece:	f105 0148 	add.w	r1, r5, #72	@ 0x48
 801ced2:	a80b      	add	r0, sp, #44	@ 0x2c
 801ced4:	f7fd fd10 	bl	801a8f8 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801ced8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ceda:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801cede:	f023 0303 	bic.w	r3, r3, #3
 801cee2:	930b      	str	r3, [sp, #44]	@ 0x2c
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801cee4:	aa0b      	add	r2, sp, #44	@ 0x2c
 801cee6:	4621      	mov	r1, r4
 801cee8:	4628      	mov	r0, r5
 801ceea:	f7fe f859 	bl	801afa0 <lfs_dir_getgstate>
            if (err) {
 801ceee:	4603      	mov	r3, r0
 801cef0:	2800      	cmp	r0, #0
 801cef2:	d1a0      	bne.n	801ce36 <lfs_dir_compact+0xc2>
    for (int i = 0; i < 3; i++) {
 801cef4:	2b02      	cmp	r3, #2
 801cef6:	dc29      	bgt.n	801cf4c <lfs_dir_compact+0x1d8>
        if (((uint32_t*)a)[i] != 0) {
 801cef8:	aa1a      	add	r2, sp, #104	@ 0x68
 801cefa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801cefe:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 801cf02:	bb92      	cbnz	r2, 801cf6a <lfs_dir_compact+0x1f6>
    for (int i = 0; i < 3; i++) {
 801cf04:	3301      	adds	r3, #1
 801cf06:	e7f5      	b.n	801cef4 <lfs_dir_compact+0x180>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801cf08:	2301      	movs	r3, #1
 801cf0a:	e7d6      	b.n	801ceba <lfs_dir_compact+0x146>
 801cf0c:	2301      	movs	r3, #1
 801cf0e:	e7d4      	b.n	801ceba <lfs_dir_compact+0x146>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 801cf10:	7de2      	ldrb	r2, [r4, #23]
 801cf12:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 801cf16:	f104 0318 	add.w	r3, r4, #24
 801cf1a:	493d      	ldr	r1, [pc, #244]	@ (801d010 <lfs_dir_compact+0x29c>)
 801cf1c:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 801cf20:	a90e      	add	r1, sp, #56	@ 0x38
 801cf22:	4628      	mov	r0, r5
 801cf24:	f7ff fdc4 	bl	801cab0 <lfs_dir_commitattr>
                if (err) {
 801cf28:	4603      	mov	r3, r0
 801cf2a:	2800      	cmp	r0, #0
 801cf2c:	d0c8      	beq.n	801cec0 <lfs_dir_compact+0x14c>
                    if (err == LFS_ERR_CORRUPT) {
 801cf2e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cf32:	d180      	bne.n	801ce36 <lfs_dir_compact+0xc2>
 801cf34:	e73d      	b.n	801cdb2 <lfs_dir_compact+0x3e>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 801cf36:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
 801cf3a:	a80b      	add	r0, sp, #44	@ 0x2c
 801cf3c:	f7fd fcdc 	bl	801a8f8 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 801cf40:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 801cf44:	a80b      	add	r0, sp, #44	@ 0x2c
 801cf46:	f7fd fcd7 	bl	801a8f8 <lfs_gstate_xor>
 801cf4a:	e7c0      	b.n	801cece <lfs_dir_compact+0x15a>
    return true;
 801cf4c:	2301      	movs	r3, #1
            if (!lfs_gstate_iszero(&delta)) {
 801cf4e:	b973      	cbnz	r3, 801cf6e <lfs_dir_compact+0x1fa>
                err = lfs_dir_commitattr(lfs, &commit,
 801cf50:	ab0b      	add	r3, sp, #44	@ 0x2c
 801cf52:	4a30      	ldr	r2, [pc, #192]	@ (801d014 <lfs_dir_compact+0x2a0>)
 801cf54:	a90e      	add	r1, sp, #56	@ 0x38
 801cf56:	4628      	mov	r0, r5
 801cf58:	f7ff fdaa 	bl	801cab0 <lfs_dir_commitattr>
                if (err) {
 801cf5c:	4603      	mov	r3, r0
 801cf5e:	b130      	cbz	r0, 801cf6e <lfs_dir_compact+0x1fa>
                    if (err == LFS_ERR_CORRUPT) {
 801cf60:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cf64:	f47f af67 	bne.w	801ce36 <lfs_dir_compact+0xc2>
 801cf68:	e723      	b.n	801cdb2 <lfs_dir_compact+0x3e>
            return false;
 801cf6a:	2300      	movs	r3, #0
 801cf6c:	e7ef      	b.n	801cf4e <lfs_dir_compact+0x1da>
            err = lfs_dir_commitcrc(lfs, &commit);
 801cf6e:	a90e      	add	r1, sp, #56	@ 0x38
 801cf70:	4628      	mov	r0, r5
 801cf72:	f7ff fe03 	bl	801cb7c <lfs_dir_commitcrc>
            if (err) {
 801cf76:	4603      	mov	r3, r0
 801cf78:	b120      	cbz	r0, 801cf84 <lfs_dir_compact+0x210>
                if (err == LFS_ERR_CORRUPT) {
 801cf7a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cf7e:	f47f af5a 	bne.w	801ce36 <lfs_dir_compact+0xc2>
 801cf82:	e716      	b.n	801cdb2 <lfs_dir_compact+0x3e>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801cf84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cf86:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801cf88:	6a12      	ldr	r2, [r2, #32]
 801cf8a:	fbb3 f1f2 	udiv	r1, r3, r2
 801cf8e:	fb02 3311 	mls	r3, r2, r1, r3
 801cf92:	b9db      	cbnz	r3, 801cfcc <lfs_dir_compact+0x258>
    lfs_block_t t = pair[0];
 801cf94:	6823      	ldr	r3, [r4, #0]
    pair[0] = pair[1];
 801cf96:	6862      	ldr	r2, [r4, #4]
 801cf98:	6022      	str	r2, [r4, #0]
    pair[1] = t;
 801cf9a:	6063      	str	r3, [r4, #4]
            dir->count = end - begin;
 801cf9c:	ebaa 0808 	sub.w	r8, sl, r8
 801cfa0:	f8a4 8014 	strh.w	r8, [r4, #20]
            dir->off = commit.off;
 801cfa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cfa6:	60e3      	str	r3, [r4, #12]
            dir->etag = commit.ptag;
 801cfa8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cfaa:	6123      	str	r3, [r4, #16]
            lfs->gdelta = (lfs_gstate_t){0};
 801cfac:	2200      	movs	r2, #0
 801cfae:	64aa      	str	r2, [r5, #72]	@ 0x48
 801cfb0:	64ea      	str	r2, [r5, #76]	@ 0x4c
 801cfb2:	652a      	str	r2, [r5, #80]	@ 0x50
            if (!relocated) {
 801cfb4:	f1bb 0f00 	cmp.w	fp, #0
 801cfb8:	d106      	bne.n	801cfc8 <lfs_dir_compact+0x254>
                lfs->gdisk = lfs->gstate;
 801cfba:	f105 033c 	add.w	r3, r5, #60	@ 0x3c
 801cfbe:	3530      	adds	r5, #48	@ 0x30
 801cfc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801cfc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
 801cfc8:	465b      	mov	r3, fp
 801cfca:	e734      	b.n	801ce36 <lfs_dir_compact+0xc2>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801cfcc:	4b12      	ldr	r3, [pc, #72]	@ (801d018 <lfs_dir_compact+0x2a4>)
 801cfce:	4a13      	ldr	r2, [pc, #76]	@ (801d01c <lfs_dir_compact+0x2a8>)
 801cfd0:	f640 0106 	movw	r1, #2054	@ 0x806
 801cfd4:	4812      	ldr	r0, [pc, #72]	@ (801d020 <lfs_dir_compact+0x2ac>)
 801cfd6:	f00c fc01 	bl	80297dc <__assert_func>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 801cfda:	4b12      	ldr	r3, [pc, #72]	@ (801d024 <lfs_dir_compact+0x2b0>)
 801cfdc:	9300      	str	r3, [sp, #0]
 801cfde:	6863      	ldr	r3, [r4, #4]
 801cfe0:	f640 0218 	movw	r2, #2072	@ 0x818
 801cfe4:	490e      	ldr	r1, [pc, #56]	@ (801d020 <lfs_dir_compact+0x2ac>)
 801cfe6:	4810      	ldr	r0, [pc, #64]	@ (801d028 <lfs_dir_compact+0x2b4>)
 801cfe8:	f00c fc2c 	bl	8029844 <printf>
 801cfec:	e6e8      	b.n	801cdc0 <lfs_dir_compact+0x4c>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 801cfee:	4b0d      	ldr	r3, [pc, #52]	@ (801d024 <lfs_dir_compact+0x2b0>)
 801cff0:	9300      	str	r3, [sp, #0]
 801cff2:	6863      	ldr	r3, [r4, #4]
 801cff4:	f640 021d 	movw	r2, #2077	@ 0x81d
 801cff8:	4909      	ldr	r1, [pc, #36]	@ (801d020 <lfs_dir_compact+0x2ac>)
 801cffa:	480c      	ldr	r0, [pc, #48]	@ (801d02c <lfs_dir_compact+0x2b8>)
 801cffc:	f00c fc22 	bl	8029844 <printf>
            return LFS_ERR_NOSPC;
 801d000:	f06f 031b 	mvn.w	r3, #27
 801d004:	e717      	b.n	801ce36 <lfs_dir_compact+0xc2>
 801d006:	bf00      	nop
 801d008:	0801cb6b 	.word	0x0801cb6b
 801d00c:	400ffc00 	.word	0x400ffc00
 801d010:	000ffc08 	.word	0x000ffc08
 801d014:	7ffffc0c 	.word	0x7ffffc0c
 801d018:	08038754 	.word	0x08038754
 801d01c:	08039188 	.word	0x08039188
 801d020:	080384b8 	.word	0x080384b8
 801d024:	08036364 	.word	0x08036364
 801d028:	080386d0 	.word	0x080386d0
 801d02c:	0803877c 	.word	0x0803877c

0801d030 <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 801d030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d034:	b08d      	sub	sp, #52	@ 0x34
 801d036:	4605      	mov	r5, r0
 801d038:	460c      	mov	r4, r1
 801d03a:	4691      	mov	r9, r2
 801d03c:	461e      	mov	r6, r3
 801d03e:	f8bd 8054 	ldrh.w	r8, [sp, #84]	@ 0x54
    int err = lfs_dir_alloc(lfs, &tail);
 801d042:	a904      	add	r1, sp, #16
 801d044:	f7ff f8fa 	bl	801c23c <lfs_dir_alloc>
    if (err) {
 801d048:	4607      	mov	r7, r0
 801d04a:	b118      	cbz	r0, 801d054 <lfs_dir_split+0x24>
}
 801d04c:	4638      	mov	r0, r7
 801d04e:	b00d      	add	sp, #52	@ 0x34
 801d050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tail.split = dir->split;
 801d054:	7de3      	ldrb	r3, [r4, #23]
 801d056:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 801d05a:	69a3      	ldr	r3, [r4, #24]
 801d05c:	930a      	str	r3, [sp, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 801d05e:	69e3      	ldr	r3, [r4, #28]
 801d060:	930b      	str	r3, [sp, #44]	@ 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 801d062:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801d066:	9302      	str	r3, [sp, #8]
 801d068:	f8cd 8004 	str.w	r8, [sp, #4]
 801d06c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d06e:	9300      	str	r3, [sp, #0]
 801d070:	4633      	mov	r3, r6
 801d072:	464a      	mov	r2, r9
 801d074:	a904      	add	r1, sp, #16
 801d076:	4628      	mov	r0, r5
 801d078:	f7ff fe7c 	bl	801cd74 <lfs_dir_compact>
    if (res < 0) {
 801d07c:	2800      	cmp	r0, #0
 801d07e:	db17      	blt.n	801d0b0 <lfs_dir_split+0x80>
    dir->tail[0] = tail.pair[0];
 801d080:	9904      	ldr	r1, [sp, #16]
 801d082:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
 801d084:	9a05      	ldr	r2, [sp, #20]
 801d086:	61e2      	str	r2, [r4, #28]
    dir->split = true;
 801d088:	2301      	movs	r3, #1
 801d08a:	75e3      	strb	r3, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d08c:	6823      	ldr	r3, [r4, #0]
 801d08e:	6a28      	ldr	r0, [r5, #32]
 801d090:	4283      	cmp	r3, r0
 801d092:	d007      	beq.n	801d0a4 <lfs_dir_split+0x74>
 801d094:	6866      	ldr	r6, [r4, #4]
 801d096:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 801d098:	42a6      	cmp	r6, r4
 801d09a:	d003      	beq.n	801d0a4 <lfs_dir_split+0x74>
 801d09c:	42a3      	cmp	r3, r4
 801d09e:	d001      	beq.n	801d0a4 <lfs_dir_split+0x74>
 801d0a0:	42b0      	cmp	r0, r6
 801d0a2:	d1d3      	bne.n	801d04c <lfs_dir_split+0x1c>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 801d0a4:	f1b8 0f00 	cmp.w	r8, #0
 801d0a8:	d1d0      	bne.n	801d04c <lfs_dir_split+0x1c>
        lfs->root[0] = tail.pair[0];
 801d0aa:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
 801d0ac:	626a      	str	r2, [r5, #36]	@ 0x24
 801d0ae:	e7cd      	b.n	801d04c <lfs_dir_split+0x1c>
        return res;
 801d0b0:	4607      	mov	r7, r0
 801d0b2:	e7cb      	b.n	801d04c <lfs_dir_split+0x1c>

0801d0b4 <lfs_dir_splittingcompact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801d0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0b8:	b091      	sub	sp, #68	@ 0x44
 801d0ba:	4607      	mov	r7, r0
 801d0bc:	4615      	mov	r5, r2
 801d0be:	4699      	mov	r9, r3
 801d0c0:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801d0c4:	f8bd b06c 	ldrh.w	fp, [sp, #108]	@ 0x6c
 801d0c8:	f8bd 6070 	ldrh.w	r6, [sp, #112]	@ 0x70
 801d0cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d0ce:	e04c      	b.n	801d16a <lfs_dir_splittingcompact+0xb6>
                    && size <= lfs_min(
 801d0d0:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 801d0d2:	6a08      	ldr	r0, [r1, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801d0d4:	4403      	add	r3, r0
 801d0d6:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801d0d8:	fbb3 f1f0 	udiv	r1, r3, r0
 801d0dc:	fb00 3111 	mls	r1, r0, r1, r3
 801d0e0:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 801d0e2:	4293      	cmp	r3, r2
 801d0e4:	bf28      	it	cs
 801d0e6:	4613      	movcs	r3, r2
                    && size <= lfs_min(
 801d0e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d0ea:	429a      	cmp	r2, r3
 801d0ec:	d92d      	bls.n	801d14a <lfs_dir_splittingcompact+0x96>
            split = split + ((end - split) / 2);
 801d0ee:	eb04 0458 	add.w	r4, r4, r8, lsr #1
        while (end - split > 1) {
 801d0f2:	eba6 0804 	sub.w	r8, r6, r4
 801d0f6:	f1b8 0f01 	cmp.w	r8, #1
 801d0fa:	d926      	bls.n	801d14a <lfs_dir_splittingcompact+0x96>
            lfs_size_t size = 0;
 801d0fc:	2200      	movs	r2, #0
 801d0fe:	920d      	str	r2, [sp, #52]	@ 0x34
            int err = lfs_dir_traverse(lfs,
 801d100:	b2a1      	uxth	r1, r4
 801d102:	ab0d      	add	r3, sp, #52	@ 0x34
 801d104:	9308      	str	r3, [sp, #32]
 801d106:	4b4d      	ldr	r3, [pc, #308]	@ (801d23c <lfs_dir_splittingcompact+0x188>)
 801d108:	9307      	str	r3, [sp, #28]
 801d10a:	424b      	negs	r3, r1
 801d10c:	b21b      	sxth	r3, r3
 801d10e:	9306      	str	r3, [sp, #24]
 801d110:	9605      	str	r6, [sp, #20]
 801d112:	9104      	str	r1, [sp, #16]
 801d114:	9203      	str	r2, [sp, #12]
 801d116:	4b4a      	ldr	r3, [pc, #296]	@ (801d240 <lfs_dir_splittingcompact+0x18c>)
 801d118:	9302      	str	r3, [sp, #8]
 801d11a:	f8cd 9004 	str.w	r9, [sp, #4]
 801d11e:	9500      	str	r5, [sp, #0]
 801d120:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d124:	4651      	mov	r1, sl
 801d126:	4638      	mov	r0, r7
 801d128:	f7fd ffca 	bl	801b0c0 <lfs_dir_traverse>
            if (err) {
 801d12c:	4603      	mov	r3, r0
 801d12e:	2800      	cmp	r0, #0
 801d130:	d15b      	bne.n	801d1ea <lfs_dir_splittingcompact+0x136>
            if (end - split < 0xff
 801d132:	f1b8 0ffe 	cmp.w	r8, #254	@ 0xfe
 801d136:	d8da      	bhi.n	801d0ee <lfs_dir_splittingcompact+0x3a>
                        lfs->cfg->block_size - 40,
 801d138:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801d13a:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
                    && size <= lfs_min(
 801d13c:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
                            (lfs->cfg->metadata_max
 801d140:	6d48      	ldr	r0, [r1, #84]	@ 0x54
                    && size <= lfs_min(
 801d142:	2800      	cmp	r0, #0
 801d144:	d0c4      	beq.n	801d0d0 <lfs_dir_splittingcompact+0x1c>
 801d146:	0843      	lsrs	r3, r0, #1
 801d148:	e7c3      	b.n	801d0d2 <lfs_dir_splittingcompact+0x1e>
        if (split == begin) {
 801d14a:	455c      	cmp	r4, fp
 801d14c:	d022      	beq.n	801d194 <lfs_dir_splittingcompact+0xe0>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801d14e:	b2a4      	uxth	r4, r4
 801d150:	9602      	str	r6, [sp, #8]
 801d152:	9401      	str	r4, [sp, #4]
 801d154:	f8cd a000 	str.w	sl, [sp]
 801d158:	464b      	mov	r3, r9
 801d15a:	462a      	mov	r2, r5
 801d15c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d15e:	4638      	mov	r0, r7
 801d160:	f7ff ff66 	bl	801d030 <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
 801d164:	4603      	mov	r3, r0
 801d166:	b910      	cbnz	r0, 801d16e <lfs_dir_splittingcompact+0xba>
            end = split;
 801d168:	4626      	mov	r6, r4
        lfs_size_t split = begin;
 801d16a:	465c      	mov	r4, fp
        while (end - split > 1) {
 801d16c:	e7c1      	b.n	801d0f2 <lfs_dir_splittingcompact+0x3e>
        if (err && err != LFS_ERR_NOSPC) {
 801d16e:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 801d172:	f110 0f1c 	cmn.w	r0, #28
 801d176:	d138      	bne.n	801d1ea <lfs_dir_splittingcompact+0x136>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 801d178:	4b32      	ldr	r3, [pc, #200]	@ (801d244 <lfs_dir_splittingcompact+0x190>)
 801d17a:	9301      	str	r3, [sp, #4]
 801d17c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d180:	9300      	str	r3, [sp, #0]
 801d182:	f8d8 3000 	ldr.w	r3, [r8]
 801d186:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 801d18a:	492f      	ldr	r1, [pc, #188]	@ (801d248 <lfs_dir_splittingcompact+0x194>)
 801d18c:	482f      	ldr	r0, [pc, #188]	@ (801d24c <lfs_dir_splittingcompact+0x198>)
 801d18e:	f00c fb59 	bl	8029844 <printf>
            break;
 801d192:	e001      	b.n	801d198 <lfs_dir_splittingcompact+0xe4>
 801d194:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
    if (lfs_dir_needsrelocation(lfs, dir)
 801d198:	4641      	mov	r1, r8
 801d19a:	4638      	mov	r0, r7
 801d19c:	f7fd fc76 	bl	801aa8c <lfs_dir_needsrelocation>
 801d1a0:	b1b8      	cbz	r0, 801d1d2 <lfs_dir_splittingcompact+0x11e>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801d1a2:	2300      	movs	r3, #0
 801d1a4:	930e      	str	r3, [sp, #56]	@ 0x38
 801d1a6:	2301      	movs	r3, #1
 801d1a8:	930f      	str	r3, [sp, #60]	@ 0x3c
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d1aa:	f8d8 2000 	ldr.w	r2, [r8]
 801d1ae:	b132      	cbz	r2, 801d1be <lfs_dir_splittingcompact+0x10a>
 801d1b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d1b4:	2b01      	cmp	r3, #1
 801d1b6:	d002      	beq.n	801d1be <lfs_dir_splittingcompact+0x10a>
 801d1b8:	2a01      	cmp	r2, #1
 801d1ba:	d000      	beq.n	801d1be <lfs_dir_splittingcompact+0x10a>
 801d1bc:	b94b      	cbnz	r3, 801d1d2 <lfs_dir_splittingcompact+0x11e>
        lfs_ssize_t size = lfs_fs_size_(lfs);
 801d1be:	4638      	mov	r0, r7
 801d1c0:	f7ff fbe4 	bl	801c98c <lfs_fs_size_>
        if (size < 0) {
 801d1c4:	1e03      	subs	r3, r0, #0
 801d1c6:	db10      	blt.n	801d1ea <lfs_dir_splittingcompact+0x136>
        if (lfs->block_count - size > lfs->block_count/8) {
 801d1c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801d1ca:	1ad3      	subs	r3, r2, r3
 801d1cc:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 801d1d0:	d80f      	bhi.n	801d1f2 <lfs_dir_splittingcompact+0x13e>
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 801d1d2:	9602      	str	r6, [sp, #8]
 801d1d4:	f8cd b004 	str.w	fp, [sp, #4]
 801d1d8:	f8cd a000 	str.w	sl, [sp]
 801d1dc:	464b      	mov	r3, r9
 801d1de:	462a      	mov	r2, r5
 801d1e0:	4641      	mov	r1, r8
 801d1e2:	4638      	mov	r0, r7
 801d1e4:	f7ff fdc6 	bl	801cd74 <lfs_dir_compact>
 801d1e8:	4603      	mov	r3, r0
}
 801d1ea:	4618      	mov	r0, r3
 801d1ec:	b011      	add	sp, #68	@ 0x44
 801d1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 801d1f2:	4b14      	ldr	r3, [pc, #80]	@ (801d244 <lfs_dir_splittingcompact+0x190>)
 801d1f4:	9300      	str	r3, [sp, #0]
 801d1f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d1fa:	f640 0286 	movw	r2, #2182	@ 0x886
 801d1fe:	4912      	ldr	r1, [pc, #72]	@ (801d248 <lfs_dir_splittingcompact+0x194>)
 801d200:	4813      	ldr	r0, [pc, #76]	@ (801d250 <lfs_dir_splittingcompact+0x19c>)
 801d202:	f00c fb1f 	bl	8029844 <printf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801d206:	9602      	str	r6, [sp, #8]
 801d208:	f8cd b004 	str.w	fp, [sp, #4]
 801d20c:	f8cd a000 	str.w	sl, [sp]
 801d210:	464b      	mov	r3, r9
 801d212:	462a      	mov	r2, r5
 801d214:	4641      	mov	r1, r8
 801d216:	4638      	mov	r0, r7
 801d218:	f7ff ff0a 	bl	801d030 <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
 801d21c:	4603      	mov	r3, r0
 801d21e:	b150      	cbz	r0, 801d236 <lfs_dir_splittingcompact+0x182>
 801d220:	f110 0f1c 	cmn.w	r0, #28
 801d224:	d1e1      	bne.n	801d1ea <lfs_dir_splittingcompact+0x136>
                LFS_WARN("Unable to expand superblock");
 801d226:	4b07      	ldr	r3, [pc, #28]	@ (801d244 <lfs_dir_splittingcompact+0x190>)
 801d228:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 801d22c:	4906      	ldr	r1, [pc, #24]	@ (801d248 <lfs_dir_splittingcompact+0x194>)
 801d22e:	4809      	ldr	r0, [pc, #36]	@ (801d254 <lfs_dir_splittingcompact+0x1a0>)
 801d230:	f00c fb08 	bl	8029844 <printf>
 801d234:	e7cd      	b.n	801d1d2 <lfs_dir_splittingcompact+0x11e>
                end = 1;
 801d236:	2601      	movs	r6, #1
 801d238:	e7cb      	b.n	801d1d2 <lfs_dir_splittingcompact+0x11e>
 801d23a:	bf00      	nop
 801d23c:	0801aa71 	.word	0x0801aa71
 801d240:	400ffc00 	.word	0x400ffc00
 801d244:	08036364 	.word	0x08036364
 801d248:	080384b8 	.word	0x080384b8
 801d24c:	080387b4 	.word	0x080387b4
 801d250:	080387e4 	.word	0x080387e4
 801d254:	08038814 	.word	0x08038814

0801d258 <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
 801d258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d25c:	b09b      	sub	sp, #108	@ 0x6c
 801d25e:	4607      	mov	r7, r0
 801d260:	460e      	mov	r6, r1
 801d262:	4691      	mov	r9, r2
 801d264:	461d      	mov	r5, r3
 801d266:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
    for (int i = 0; i < attrcount; i++) {
 801d26a:	2300      	movs	r3, #0
    bool hasdelete = false;
 801d26c:	469c      	mov	ip, r3
    for (int i = 0; i < attrcount; i++) {
 801d26e:	e003      	b.n	801d278 <lfs_dir_relocatingcommit+0x20>
            dir->count += 1;
 801d270:	8ab2      	ldrh	r2, [r6, #20]
 801d272:	3201      	adds	r2, #1
 801d274:	82b2      	strh	r2, [r6, #20]
    for (int i = 0; i < attrcount; i++) {
 801d276:	3301      	adds	r3, #1
 801d278:	4543      	cmp	r3, r8
 801d27a:	da2d      	bge.n	801d2d8 <lfs_dir_relocatingcommit+0x80>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801d27c:	00d8      	lsls	r0, r3, #3
 801d27e:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 801d282:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801d286:	0d11      	lsrs	r1, r2, #20
 801d288:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801d28c:	f240 4e01 	movw	lr, #1025	@ 0x401
 801d290:	4572      	cmp	r2, lr
 801d292:	d0ed      	beq.n	801d270 <lfs_dir_relocatingcommit+0x18>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 801d294:	f240 4eff 	movw	lr, #1279	@ 0x4ff
 801d298:	4572      	cmp	r2, lr
 801d29a:	d00f      	beq.n	801d2bc <lfs_dir_relocatingcommit+0x64>
    return (tag & 0x70000000) >> 20;
 801d29c:	f401 61e0 	and.w	r1, r1, #1792	@ 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 801d2a0:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801d2a4:	d1e7      	bne.n	801d276 <lfs_dir_relocatingcommit+0x1e>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 801d2a6:	6862      	ldr	r2, [r4, #4]
 801d2a8:	6812      	ldr	r2, [r2, #0]
 801d2aa:	61b2      	str	r2, [r6, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 801d2ac:	6862      	ldr	r2, [r4, #4]
 801d2ae:	6852      	ldr	r2, [r2, #4]
 801d2b0:	61f2      	str	r2, [r6, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 801d2b2:	582a      	ldr	r2, [r5, r0]
 801d2b4:	f3c2 5200 	ubfx	r2, r2, #20, #1
 801d2b8:	75f2      	strb	r2, [r6, #23]
            lfs_pair_fromle32(dir->tail);
 801d2ba:	e7dc      	b.n	801d276 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801d2bc:	8ab2      	ldrh	r2, [r6, #20]
 801d2be:	b122      	cbz	r2, 801d2ca <lfs_dir_relocatingcommit+0x72>
            dir->count -= 1;
 801d2c0:	3a01      	subs	r2, #1
 801d2c2:	82b2      	strh	r2, [r6, #20]
            hasdelete = true;
 801d2c4:	f04f 0c01 	mov.w	ip, #1
 801d2c8:	e7d5      	b.n	801d276 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801d2ca:	4ba0      	ldr	r3, [pc, #640]	@ (801d54c <lfs_dir_relocatingcommit+0x2f4>)
 801d2cc:	4aa0      	ldr	r2, [pc, #640]	@ (801d550 <lfs_dir_relocatingcommit+0x2f8>)
 801d2ce:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 801d2d2:	48a0      	ldr	r0, [pc, #640]	@ (801d554 <lfs_dir_relocatingcommit+0x2fc>)
 801d2d4:	f00c fa82 	bl	80297dc <__assert_func>
    if (hasdelete && dir->count == 0) {
 801d2d8:	f1bc 0f00 	cmp.w	ip, #0
 801d2dc:	d01b      	beq.n	801d316 <lfs_dir_relocatingcommit+0xbe>
 801d2de:	8ab3      	ldrh	r3, [r6, #20]
 801d2e0:	b9cb      	cbnz	r3, 801d316 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801d2e2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d2e4:	b15b      	cbz	r3, 801d2fe <lfs_dir_relocatingcommit+0xa6>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 801d2e6:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801d2e8:	4631      	mov	r1, r6
 801d2ea:	4638      	mov	r0, r7
 801d2ec:	f7ff fb5e 	bl	801c9ac <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801d2f0:	4682      	mov	sl, r0
 801d2f2:	b158      	cbz	r0, 801d30c <lfs_dir_relocatingcommit+0xb4>
 801d2f4:	f110 0f02 	cmn.w	r0, #2
 801d2f8:	f040 8159 	bne.w	801d5ae <lfs_dir_relocatingcommit+0x356>
 801d2fc:	e00b      	b.n	801d316 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801d2fe:	4b96      	ldr	r3, [pc, #600]	@ (801d558 <lfs_dir_relocatingcommit+0x300>)
 801d300:	4a93      	ldr	r2, [pc, #588]	@ (801d550 <lfs_dir_relocatingcommit+0x2f8>)
 801d302:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 801d306:	4893      	ldr	r0, [pc, #588]	@ (801d554 <lfs_dir_relocatingcommit+0x2fc>)
 801d308:	f00c fa68 	bl	80297dc <__assert_func>
        if (err != LFS_ERR_NOENT && pdir->split) {
 801d30c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d30e:	7ddb      	ldrb	r3, [r3, #23]
 801d310:	2b00      	cmp	r3, #0
 801d312:	f040 80bf 	bne.w	801d494 <lfs_dir_relocatingcommit+0x23c>
    if (dir->erased) {
 801d316:	7db4      	ldrb	r4, [r6, #22]
 801d318:	2c00      	cmp	r4, #0
 801d31a:	d02e      	beq.n	801d37a <lfs_dir_relocatingcommit+0x122>
            .block = dir->pair[0],
 801d31c:	6833      	ldr	r3, [r6, #0]
        struct lfs_commit commit = {
 801d31e:	9310      	str	r3, [sp, #64]	@ 0x40
            .off = dir->off,
 801d320:	68f3      	ldr	r3, [r6, #12]
        struct lfs_commit commit = {
 801d322:	9311      	str	r3, [sp, #68]	@ 0x44
            .ptag = dir->etag,
 801d324:	6932      	ldr	r2, [r6, #16]
        struct lfs_commit commit = {
 801d326:	9212      	str	r2, [sp, #72]	@ 0x48
 801d328:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d32c:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d32e:	9314      	str	r3, [sp, #80]	@ 0x50
            .end = (lfs->cfg->metadata_max ?
 801d330:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801d332:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801d334:	2b00      	cmp	r3, #0
 801d336:	d03c      	beq.n	801d3b2 <lfs_dir_relocatingcommit+0x15a>
 801d338:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 801d33a:	9315      	str	r3, [sp, #84]	@ 0x54
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801d33c:	9718      	str	r7, [sp, #96]	@ 0x60
 801d33e:	ab10      	add	r3, sp, #64	@ 0x40
 801d340:	9319      	str	r3, [sp, #100]	@ 0x64
        int err = lfs_dir_traverse(lfs,
 801d342:	ab18      	add	r3, sp, #96	@ 0x60
 801d344:	9308      	str	r3, [sp, #32]
 801d346:	4b85      	ldr	r3, [pc, #532]	@ (801d55c <lfs_dir_relocatingcommit+0x304>)
 801d348:	9307      	str	r3, [sp, #28]
 801d34a:	2300      	movs	r3, #0
 801d34c:	9306      	str	r3, [sp, #24]
 801d34e:	9305      	str	r3, [sp, #20]
 801d350:	9304      	str	r3, [sp, #16]
 801d352:	9303      	str	r3, [sp, #12]
 801d354:	9302      	str	r3, [sp, #8]
 801d356:	f8cd 8004 	str.w	r8, [sp, #4]
 801d35a:	9500      	str	r5, [sp, #0]
 801d35c:	6933      	ldr	r3, [r6, #16]
 801d35e:	68f2      	ldr	r2, [r6, #12]
 801d360:	4631      	mov	r1, r6
 801d362:	4638      	mov	r0, r7
 801d364:	f7fd feac 	bl	801b0c0 <lfs_dir_traverse>
        if (err) {
 801d368:	4682      	mov	sl, r0
 801d36a:	b328      	cbz	r0, 801d3b8 <lfs_dir_relocatingcommit+0x160>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801d36c:	f110 0f1c 	cmn.w	r0, #28
 801d370:	d003      	beq.n	801d37a <lfs_dir_relocatingcommit+0x122>
 801d372:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d376:	f040 811a 	bne.w	801d5ae <lfs_dir_relocatingcommit+0x356>
    rcache->block = LFS_BLOCK_NULL;
 801d37a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d37e:	613b      	str	r3, [r7, #16]
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 801d380:	8ab3      	ldrh	r3, [r6, #20]
 801d382:	9302      	str	r3, [sp, #8]
 801d384:	2300      	movs	r3, #0
 801d386:	9301      	str	r3, [sp, #4]
 801d388:	9600      	str	r6, [sp, #0]
 801d38a:	4643      	mov	r3, r8
 801d38c:	462a      	mov	r2, r5
 801d38e:	4631      	mov	r1, r6
 801d390:	4638      	mov	r0, r7
 801d392:	f7ff fe8f 	bl	801d0b4 <lfs_dir_splittingcompact>
    if (state < 0) {
 801d396:	1e01      	subs	r1, r0, #0
 801d398:	f2c0 8106 	blt.w	801d5a8 <lfs_dir_relocatingcommit+0x350>
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 801d39c:	f8d9 b000 	ldr.w	fp, [r9]
 801d3a0:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 801d3a4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801d3a8:	9217      	str	r2, [sp, #92]	@ 0x5c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801d3aa:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 801d3ac:	4692      	mov	sl, r2
 801d3ae:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d3b0:	e0db      	b.n	801d56a <lfs_dir_relocatingcommit+0x312>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801d3b2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801d3b4:	3b08      	subs	r3, #8
 801d3b6:	e7c0      	b.n	801d33a <lfs_dir_relocatingcommit+0xe2>
        lfs_gstate_t delta = {0};
 801d3b8:	2300      	movs	r3, #0
 801d3ba:	930d      	str	r3, [sp, #52]	@ 0x34
 801d3bc:	930e      	str	r3, [sp, #56]	@ 0x38
 801d3be:	930f      	str	r3, [sp, #60]	@ 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
 801d3c0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801d3c4:	a80d      	add	r0, sp, #52	@ 0x34
 801d3c6:	f7fd fa97 	bl	801a8f8 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 801d3ca:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 801d3ce:	a80d      	add	r0, sp, #52	@ 0x34
 801d3d0:	f7fd fa92 	bl	801a8f8 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 801d3d4:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801d3d8:	a80d      	add	r0, sp, #52	@ 0x34
 801d3da:	f7fd fa8d 	bl	801a8f8 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801d3de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d3e0:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801d3e4:	f023 0303 	bic.w	r3, r3, #3
 801d3e8:	930d      	str	r3, [sp, #52]	@ 0x34
    for (int i = 0; i < 3; i++) {
 801d3ea:	e001      	b.n	801d3f0 <lfs_dir_relocatingcommit+0x198>
 801d3ec:	f10a 0a01 	add.w	sl, sl, #1
 801d3f0:	f1ba 0f02 	cmp.w	sl, #2
 801d3f4:	dc07      	bgt.n	801d406 <lfs_dir_relocatingcommit+0x1ae>
        if (((uint32_t*)a)[i] != 0) {
 801d3f6:	ab1a      	add	r3, sp, #104	@ 0x68
 801d3f8:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801d3fc:	f853 3c34 	ldr.w	r3, [r3, #-52]
 801d400:	2b00      	cmp	r3, #0
 801d402:	d0f3      	beq.n	801d3ec <lfs_dir_relocatingcommit+0x194>
            return false;
 801d404:	2400      	movs	r4, #0
        if (!lfs_gstate_iszero(&delta)) {
 801d406:	b9c4      	cbnz	r4, 801d43a <lfs_dir_relocatingcommit+0x1e2>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801d408:	aa0d      	add	r2, sp, #52	@ 0x34
 801d40a:	4631      	mov	r1, r6
 801d40c:	4638      	mov	r0, r7
 801d40e:	f7fd fdc7 	bl	801afa0 <lfs_dir_getgstate>
            if (err) {
 801d412:	4682      	mov	sl, r0
 801d414:	2800      	cmp	r0, #0
 801d416:	f040 80ca 	bne.w	801d5ae <lfs_dir_relocatingcommit+0x356>
            err = lfs_dir_commitattr(lfs, &commit,
 801d41a:	ab0d      	add	r3, sp, #52	@ 0x34
 801d41c:	4a50      	ldr	r2, [pc, #320]	@ (801d560 <lfs_dir_relocatingcommit+0x308>)
 801d41e:	a910      	add	r1, sp, #64	@ 0x40
 801d420:	4638      	mov	r0, r7
 801d422:	f7ff fb45 	bl	801cab0 <lfs_dir_commitattr>
            if (err) {
 801d426:	4682      	mov	sl, r0
 801d428:	b138      	cbz	r0, 801d43a <lfs_dir_relocatingcommit+0x1e2>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801d42a:	f110 0f1c 	cmn.w	r0, #28
 801d42e:	d0a4      	beq.n	801d37a <lfs_dir_relocatingcommit+0x122>
 801d430:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d434:	f040 80bb 	bne.w	801d5ae <lfs_dir_relocatingcommit+0x356>
 801d438:	e79f      	b.n	801d37a <lfs_dir_relocatingcommit+0x122>
        err = lfs_dir_commitcrc(lfs, &commit);
 801d43a:	a910      	add	r1, sp, #64	@ 0x40
 801d43c:	4638      	mov	r0, r7
 801d43e:	f7ff fb9d 	bl	801cb7c <lfs_dir_commitcrc>
        if (err) {
 801d442:	4682      	mov	sl, r0
 801d444:	b138      	cbz	r0, 801d456 <lfs_dir_relocatingcommit+0x1fe>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801d446:	f110 0f1c 	cmn.w	r0, #28
 801d44a:	d096      	beq.n	801d37a <lfs_dir_relocatingcommit+0x122>
 801d44c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d450:	f040 80ad 	bne.w	801d5ae <lfs_dir_relocatingcommit+0x356>
 801d454:	e791      	b.n	801d37a <lfs_dir_relocatingcommit+0x122>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801d456:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d458:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801d45a:	6a11      	ldr	r1, [r2, #32]
 801d45c:	fbb3 f2f1 	udiv	r2, r3, r1
 801d460:	fb01 3212 	mls	r2, r1, r2, r3
 801d464:	b97a      	cbnz	r2, 801d486 <lfs_dir_relocatingcommit+0x22e>
        dir->off = commit.off;
 801d466:	60f3      	str	r3, [r6, #12]
        dir->etag = commit.ptag;
 801d468:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d46a:	6133      	str	r3, [r6, #16]
        lfs->gdisk = lfs->gstate;
 801d46c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801d470:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d474:	ca07      	ldmia	r2, {r0, r1, r2}
 801d476:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 801d47a:	2200      	movs	r2, #0
 801d47c:	64ba      	str	r2, [r7, #72]	@ 0x48
 801d47e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801d480:	653a      	str	r2, [r7, #80]	@ 0x50
    int state = 0;
 801d482:	4651      	mov	r1, sl
 801d484:	e78a      	b.n	801d39c <lfs_dir_relocatingcommit+0x144>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801d486:	4b37      	ldr	r3, [pc, #220]	@ (801d564 <lfs_dir_relocatingcommit+0x30c>)
 801d488:	4a31      	ldr	r2, [pc, #196]	@ (801d550 <lfs_dir_relocatingcommit+0x2f8>)
 801d48a:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 801d48e:	4831      	ldr	r0, [pc, #196]	@ (801d554 <lfs_dir_relocatingcommit+0x2fc>)
 801d490:	f00c f9a4 	bl	80297dc <__assert_func>
            state = LFS_OK_DROPPED;
 801d494:	2102      	movs	r1, #2
 801d496:	e781      	b.n	801d39c <lfs_dir_relocatingcommit+0x144>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 801d498:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801d49c:	f3c1 2089 	ubfx	r0, r1, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801d4a0:	4584      	cmp	ip, r0
 801d4a2:	d10e      	bne.n	801d4c2 <lfs_dir_relocatingcommit+0x26a>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 801d4a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d4a8:	60a2      	str	r2, [r4, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 801d4aa:	60e2      	str	r2, [r4, #12]
                for (int i = 0; i < attrcount; i++) {
 801d4ac:	3301      	adds	r3, #1
 801d4ae:	4543      	cmp	r3, r8
 801d4b0:	da34      	bge.n	801d51c <lfs_dir_relocatingcommit+0x2c4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801d4b2:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801d4b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801d4ba:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801d4be:	4282      	cmp	r2, r0
 801d4c0:	d0ea      	beq.n	801d498 <lfs_dir_relocatingcommit+0x240>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801d4c2:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801d4c6:	4282      	cmp	r2, r0
 801d4c8:	d011      	beq.n	801d4ee <lfs_dir_relocatingcommit+0x296>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801d4ca:	f240 4001 	movw	r0, #1025	@ 0x401
 801d4ce:	4282      	cmp	r2, r0
 801d4d0:	d1ec      	bne.n	801d4ac <lfs_dir_relocatingcommit+0x254>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 801d4d2:	88a2      	ldrh	r2, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801d4d4:	f3c1 2189 	ubfx	r1, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801d4d8:	428a      	cmp	r2, r1
 801d4da:	d3e7      	bcc.n	801d4ac <lfs_dir_relocatingcommit+0x254>
                        d->id += 1;
 801d4dc:	3201      	adds	r2, #1
 801d4de:	80a2      	strh	r2, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801d4e0:	79a2      	ldrb	r2, [r4, #6]
 801d4e2:	2a02      	cmp	r2, #2
 801d4e4:	d1e2      	bne.n	801d4ac <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos += 1;
 801d4e6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801d4e8:	3201      	adds	r2, #1
 801d4ea:	62a2      	str	r2, [r4, #40]	@ 0x28
 801d4ec:	e7de      	b.n	801d4ac <lfs_dir_relocatingcommit+0x254>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 801d4ee:	88a0      	ldrh	r0, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801d4f0:	f3c1 2c89 	ubfx	ip, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801d4f4:	4560      	cmp	r0, ip
 801d4f6:	d9e8      	bls.n	801d4ca <lfs_dir_relocatingcommit+0x272>
                        d->id -= 1;
 801d4f8:	3801      	subs	r0, #1
 801d4fa:	80a0      	strh	r0, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801d4fc:	79a2      	ldrb	r2, [r4, #6]
 801d4fe:	2a02      	cmp	r2, #2
 801d500:	d1d4      	bne.n	801d4ac <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos -= 1;
 801d502:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801d504:	3a01      	subs	r2, #1
 801d506:	62a2      	str	r2, [r4, #40]	@ 0x28
 801d508:	e7d0      	b.n	801d4ac <lfs_dir_relocatingcommit+0x254>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 801d50a:	f104 0220 	add.w	r2, r4, #32
 801d50e:	f104 0108 	add.w	r1, r4, #8
 801d512:	4638      	mov	r0, r7
 801d514:	f7fe fd24 	bl	801bf60 <lfs_dir_fetch>
                if (err) {
 801d518:	2800      	cmp	r0, #0
 801d51a:	d147      	bne.n	801d5ac <lfs_dir_relocatingcommit+0x354>
            while (d->id >= d->m.count && d->m.split) {
 801d51c:	88a3      	ldrh	r3, [r4, #4]
 801d51e:	8ba1      	ldrh	r1, [r4, #28]
 801d520:	428b      	cmp	r3, r1
 801d522:	d321      	bcc.n	801d568 <lfs_dir_relocatingcommit+0x310>
 801d524:	7fe2      	ldrb	r2, [r4, #31]
 801d526:	b1fa      	cbz	r2, 801d568 <lfs_dir_relocatingcommit+0x310>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d528:	6a22      	ldr	r2, [r4, #32]
 801d52a:	6a38      	ldr	r0, [r7, #32]
 801d52c:	4282      	cmp	r2, r0
 801d52e:	d0ec      	beq.n	801d50a <lfs_dir_relocatingcommit+0x2b2>
 801d530:	f8d4 e024 	ldr.w	lr, [r4, #36]	@ 0x24
 801d534:	f8d7 c024 	ldr.w	ip, [r7, #36]	@ 0x24
 801d538:	45e6      	cmp	lr, ip
 801d53a:	d0e6      	beq.n	801d50a <lfs_dir_relocatingcommit+0x2b2>
 801d53c:	4562      	cmp	r2, ip
 801d53e:	d0e4      	beq.n	801d50a <lfs_dir_relocatingcommit+0x2b2>
 801d540:	4570      	cmp	r0, lr
 801d542:	d0e2      	beq.n	801d50a <lfs_dir_relocatingcommit+0x2b2>
                    d->id -= d->m.count;
 801d544:	1a5b      	subs	r3, r3, r1
 801d546:	80a3      	strh	r3, [r4, #4]
 801d548:	e7df      	b.n	801d50a <lfs_dir_relocatingcommit+0x2b2>
 801d54a:	bf00      	nop
 801d54c:	08038840 	.word	0x08038840
 801d550:	080391b8 	.word	0x080391b8
 801d554:	080384b8 	.word	0x080384b8
 801d558:	08038850 	.word	0x08038850
 801d55c:	0801cb6b 	.word	0x0801cb6b
 801d560:	7ffffc0c 	.word	0x7ffffc0c
 801d564:	08038754 	.word	0x08038754
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801d568:	6824      	ldr	r4, [r4, #0]
 801d56a:	b1d4      	cbz	r4, 801d5a2 <lfs_dir_relocatingcommit+0x34a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d56c:	68a3      	ldr	r3, [r4, #8]
 801d56e:	459b      	cmp	fp, r3
 801d570:	d006      	beq.n	801d580 <lfs_dir_relocatingcommit+0x328>
 801d572:	68e2      	ldr	r2, [r4, #12]
 801d574:	4592      	cmp	sl, r2
 801d576:	d003      	beq.n	801d580 <lfs_dir_relocatingcommit+0x328>
 801d578:	459a      	cmp	sl, r3
 801d57a:	d001      	beq.n	801d580 <lfs_dir_relocatingcommit+0x328>
 801d57c:	4593      	cmp	fp, r2
 801d57e:	d1f3      	bne.n	801d568 <lfs_dir_relocatingcommit+0x310>
            d->m = *dir;
 801d580:	f104 0c08 	add.w	ip, r4, #8
 801d584:	46b6      	mov	lr, r6
 801d586:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d58a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d58e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801d592:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 801d596:	f104 0308 	add.w	r3, r4, #8
 801d59a:	454b      	cmp	r3, r9
 801d59c:	d0be      	beq.n	801d51c <lfs_dir_relocatingcommit+0x2c4>
                for (int i = 0; i < attrcount; i++) {
 801d59e:	2300      	movs	r3, #0
 801d5a0:	e785      	b.n	801d4ae <lfs_dir_relocatingcommit+0x256>
    return state;
 801d5a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d5a4:	468a      	mov	sl, r1
 801d5a6:	e002      	b.n	801d5ae <lfs_dir_relocatingcommit+0x356>
        return state;
 801d5a8:	468a      	mov	sl, r1
 801d5aa:	e000      	b.n	801d5ae <lfs_dir_relocatingcommit+0x356>
 801d5ac:	4682      	mov	sl, r0
}
 801d5ae:	4650      	mov	r0, sl
 801d5b0:	b01b      	add	sp, #108	@ 0x6c
 801d5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5b6:	bf00      	nop

0801d5b8 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801d5b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d5bc:	b0a3      	sub	sp, #140	@ 0x8c
 801d5be:	4605      	mov	r5, r0
 801d5c0:	460e      	mov	r6, r1
 801d5c2:	4690      	mov	r8, r2
 801d5c4:	4699      	mov	r9, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801d5c6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801d5c8:	e003      	b.n	801d5d2 <lfs_dir_orphaningcommit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801d5ca:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801d5cc:	2b01      	cmp	r3, #1
 801d5ce:	d012      	beq.n	801d5f6 <lfs_dir_orphaningcommit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801d5d0:	6824      	ldr	r4, [r4, #0]
 801d5d2:	b34c      	cbz	r4, 801d628 <lfs_dir_orphaningcommit+0x70>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801d5d4:	f104 0108 	add.w	r1, r4, #8
 801d5d8:	42b1      	cmp	r1, r6
 801d5da:	d0f9      	beq.n	801d5d0 <lfs_dir_orphaningcommit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d5dc:	68a1      	ldr	r1, [r4, #8]
 801d5de:	6833      	ldr	r3, [r6, #0]
 801d5e0:	428b      	cmp	r3, r1
 801d5e2:	d0f2      	beq.n	801d5ca <lfs_dir_orphaningcommit+0x12>
 801d5e4:	68e0      	ldr	r0, [r4, #12]
 801d5e6:	6872      	ldr	r2, [r6, #4]
 801d5e8:	4282      	cmp	r2, r0
 801d5ea:	d0ee      	beq.n	801d5ca <lfs_dir_orphaningcommit+0x12>
 801d5ec:	428a      	cmp	r2, r1
 801d5ee:	d0ec      	beq.n	801d5ca <lfs_dir_orphaningcommit+0x12>
 801d5f0:	4298      	cmp	r0, r3
 801d5f2:	d1ed      	bne.n	801d5d0 <lfs_dir_orphaningcommit+0x18>
 801d5f4:	e7e9      	b.n	801d5ca <lfs_dir_orphaningcommit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801d5f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d5f8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801d5fc:	d0e8      	beq.n	801d5d0 <lfs_dir_orphaningcommit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
 801d5fe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801d600:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801d602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801d604:	429a      	cmp	r2, r3
 801d606:	d9e3      	bls.n	801d5d0 <lfs_dir_orphaningcommit+0x18>
            int err = lfs_file_outline(lfs, f);
 801d608:	4621      	mov	r1, r4
 801d60a:	4628      	mov	r0, r5
 801d60c:	f7fe feee 	bl	801c3ec <lfs_file_outline>
            if (err) {
 801d610:	4607      	mov	r7, r0
 801d612:	2800      	cmp	r0, #0
 801d614:	f040 81bc 	bne.w	801d990 <lfs_dir_orphaningcommit+0x3d8>
            err = lfs_file_flush(lfs, f);
 801d618:	4621      	mov	r1, r4
 801d61a:	4628      	mov	r0, r5
 801d61c:	f7ff f866 	bl	801c6ec <lfs_file_flush>
            if (err) {
 801d620:	4607      	mov	r7, r0
 801d622:	2800      	cmp	r0, #0
 801d624:	d0d4      	beq.n	801d5d0 <lfs_dir_orphaningcommit+0x18>
 801d626:	e1b3      	b.n	801d990 <lfs_dir_orphaningcommit+0x3d8>
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 801d628:	6833      	ldr	r3, [r6, #0]
 801d62a:	9316      	str	r3, [sp, #88]	@ 0x58
 801d62c:	6873      	ldr	r3, [r6, #4]
 801d62e:	9317      	str	r3, [sp, #92]	@ 0x5c
    lfs_mdir_t ldir = *dir;
 801d630:	ac0e      	add	r4, sp, #56	@ 0x38
 801d632:	4637      	mov	r7, r6
 801d634:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801d636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d638:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801d63c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 801d640:	ab06      	add	r3, sp, #24
 801d642:	9301      	str	r3, [sp, #4]
 801d644:	f8cd 9000 	str.w	r9, [sp]
 801d648:	4643      	mov	r3, r8
 801d64a:	4632      	mov	r2, r6
 801d64c:	a90e      	add	r1, sp, #56	@ 0x38
 801d64e:	4628      	mov	r0, r5
 801d650:	f7ff fe02 	bl	801d258 <lfs_dir_relocatingcommit>
    if (state < 0) {
 801d654:	1e07      	subs	r7, r0, #0
 801d656:	f2c0 819b 	blt.w	801d990 <lfs_dir_orphaningcommit+0x3d8>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d65a:	6833      	ldr	r3, [r6, #0]
 801d65c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d65e:	429a      	cmp	r2, r3
 801d660:	d007      	beq.n	801d672 <lfs_dir_orphaningcommit+0xba>
 801d662:	6870      	ldr	r0, [r6, #4]
 801d664:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d666:	4281      	cmp	r1, r0
 801d668:	d003      	beq.n	801d672 <lfs_dir_orphaningcommit+0xba>
 801d66a:	4299      	cmp	r1, r3
 801d66c:	d001      	beq.n	801d672 <lfs_dir_orphaningcommit+0xba>
 801d66e:	4290      	cmp	r0, r2
 801d670:	d109      	bne.n	801d686 <lfs_dir_orphaningcommit+0xce>
        *dir = ldir;
 801d672:	4634      	mov	r4, r6
 801d674:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801d678:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801d67c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d67e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801d682:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
 801d686:	2f02      	cmp	r7, #2
 801d688:	d001      	beq.n	801d68e <lfs_dir_orphaningcommit+0xd6>
                orphans = true;
 801d68a:	2600      	movs	r6, #0
 801d68c:	e0b8      	b.n	801d800 <lfs_dir_orphaningcommit+0x248>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 801d68e:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801d692:	4631      	mov	r1, r6
 801d694:	4628      	mov	r0, r5
 801d696:	f7fd fc83 	bl	801afa0 <lfs_dir_getgstate>
        if (err) {
 801d69a:	4607      	mov	r7, r0
 801d69c:	2800      	cmp	r0, #0
 801d69e:	f040 8177 	bne.w	801d990 <lfs_dir_orphaningcommit+0x3d8>
        lpair[0] = pdir.pair[0];
 801d6a2:	9b06      	ldr	r3, [sp, #24]
 801d6a4:	9316      	str	r3, [sp, #88]	@ 0x58
        lpair[1] = pdir.pair[1];
 801d6a6:	9b07      	ldr	r3, [sp, #28]
 801d6a8:	9317      	str	r3, [sp, #92]	@ 0x5c
        lfs_pair_tole32(dir->tail);
 801d6aa:	f106 0118 	add.w	r1, r6, #24
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801d6ae:	7df2      	ldrb	r2, [r6, #23]
 801d6b0:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801d6b4:	4ba2      	ldr	r3, [pc, #648]	@ (801d940 <lfs_dir_orphaningcommit+0x388>)
 801d6b6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801d6ba:	9318      	str	r3, [sp, #96]	@ 0x60
 801d6bc:	9119      	str	r1, [sp, #100]	@ 0x64
 801d6be:	2300      	movs	r3, #0
 801d6c0:	9301      	str	r3, [sp, #4]
 801d6c2:	2301      	movs	r3, #1
 801d6c4:	9300      	str	r3, [sp, #0]
 801d6c6:	ab18      	add	r3, sp, #96	@ 0x60
 801d6c8:	aa16      	add	r2, sp, #88	@ 0x58
 801d6ca:	a906      	add	r1, sp, #24
 801d6cc:	4628      	mov	r0, r5
 801d6ce:	f7ff fdc3 	bl	801d258 <lfs_dir_relocatingcommit>
        if (state < 0) {
 801d6d2:	1e07      	subs	r7, r0, #0
 801d6d4:	f2c0 815c 	blt.w	801d990 <lfs_dir_orphaningcommit+0x3d8>
        ldir = pdir;
 801d6d8:	ac0e      	add	r4, sp, #56	@ 0x38
 801d6da:	ae06      	add	r6, sp, #24
 801d6dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d6de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d6e0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801d6e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801d6e8:	e7cf      	b.n	801d68a <lfs_dir_orphaningcommit+0xd2>
                d->m.pair[0] = ldir.pair[0];
 801d6ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d6ec:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 801d6ee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d6f0:	60da      	str	r2, [r3, #12]
            if (d->type == LFS_TYPE_DIR &&
 801d6f2:	799a      	ldrb	r2, [r3, #6]
 801d6f4:	2a02      	cmp	r2, #2
 801d6f6:	d00d      	beq.n	801d714 <lfs_dir_orphaningcommit+0x15c>
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801d6f8:	681b      	ldr	r3, [r3, #0]
 801d6fa:	b1db      	cbz	r3, 801d734 <lfs_dir_orphaningcommit+0x17c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d6fc:	689a      	ldr	r2, [r3, #8]
 801d6fe:	4291      	cmp	r1, r2
 801d700:	d0f3      	beq.n	801d6ea <lfs_dir_orphaningcommit+0x132>
 801d702:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801d704:	68dc      	ldr	r4, [r3, #12]
 801d706:	4284      	cmp	r4, r0
 801d708:	d0ef      	beq.n	801d6ea <lfs_dir_orphaningcommit+0x132>
 801d70a:	428c      	cmp	r4, r1
 801d70c:	d0ed      	beq.n	801d6ea <lfs_dir_orphaningcommit+0x132>
 801d70e:	4290      	cmp	r0, r2
 801d710:	d1ef      	bne.n	801d6f2 <lfs_dir_orphaningcommit+0x13a>
 801d712:	e7ea      	b.n	801d6ea <lfs_dir_orphaningcommit+0x132>
 801d714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801d716:	428a      	cmp	r2, r1
 801d718:	d007      	beq.n	801d72a <lfs_dir_orphaningcommit+0x172>
 801d71a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801d71c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801d71e:	42a0      	cmp	r0, r4
 801d720:	d003      	beq.n	801d72a <lfs_dir_orphaningcommit+0x172>
 801d722:	4288      	cmp	r0, r1
 801d724:	d001      	beq.n	801d72a <lfs_dir_orphaningcommit+0x172>
 801d726:	4294      	cmp	r4, r2
 801d728:	d1e6      	bne.n	801d6f8 <lfs_dir_orphaningcommit+0x140>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 801d72a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d72c:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 801d72e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d730:	631a      	str	r2, [r3, #48]	@ 0x30
 801d732:	e7e1      	b.n	801d6f8 <lfs_dir_orphaningcommit+0x140>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801d734:	aa06      	add	r2, sp, #24
 801d736:	a916      	add	r1, sp, #88	@ 0x58
 801d738:	4628      	mov	r0, r5
 801d73a:	f7fe fba5 	bl	801be88 <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 801d73e:	1e04      	subs	r4, r0, #0
 801d740:	f280 8082 	bge.w	801d848 <lfs_dir_orphaningcommit+0x290>
 801d744:	f114 0f02 	cmn.w	r4, #2
 801d748:	f040 8128 	bne.w	801d99c <lfs_dir_orphaningcommit+0x3e4>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801d74c:	f114 0802 	adds.w	r8, r4, #2
 801d750:	bf18      	it	ne
 801d752:	f04f 0801 	movne.w	r8, #1
        state = 0;
 801d756:	2700      	movs	r7, #0
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 801d758:	aa06      	add	r2, sp, #24
 801d75a:	a916      	add	r1, sp, #88	@ 0x58
 801d75c:	4628      	mov	r0, r5
 801d75e:	f7ff f925 	bl	801c9ac <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801d762:	4603      	mov	r3, r0
 801d764:	b118      	cbz	r0, 801d76e <lfs_dir_orphaningcommit+0x1b6>
 801d766:	f110 0f02 	cmn.w	r0, #2
 801d76a:	f040 8119 	bne.w	801d9a0 <lfs_dir_orphaningcommit+0x3e8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801d76e:	f114 0f02 	cmn.w	r4, #2
 801d772:	f000 80d6 	beq.w	801d922 <lfs_dir_orphaningcommit+0x36a>
 801d776:	f113 0f02 	cmn.w	r3, #2
 801d77a:	f000 80cb 	beq.w	801d914 <lfs_dir_orphaningcommit+0x35c>
    return lfs_tag_size(a->tag);
 801d77e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    return tag & 0x000003ff;
 801d780:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 801d784:	2b00      	cmp	r3, #0
 801d786:	f040 80d1 	bne.w	801d92c <lfs_dir_orphaningcommit+0x374>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801d78a:	a906      	add	r1, sp, #24
 801d78c:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801d790:	f7fd f8c4 	bl	801a91c <lfs_gstate_hasmovehere>
 801d794:	2800      	cmp	r0, #0
 801d796:	f040 80e1 	bne.w	801d95c <lfs_dir_orphaningcommit+0x3a4>
            uint16_t moveid = 0x3ff;
 801d79a:	f240 34ff 	movw	r4, #1023	@ 0x3ff
            lpair[0] = pdir.pair[0];
 801d79e:	9b06      	ldr	r3, [sp, #24]
 801d7a0:	9316      	str	r3, [sp, #88]	@ 0x58
            lpair[1] = pdir.pair[1];
 801d7a2:	9b07      	ldr	r3, [sp, #28]
 801d7a4:	9317      	str	r3, [sp, #92]	@ 0x5c
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801d7a6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d7aa:	429c      	cmp	r4, r3
 801d7ac:	f000 80ec 	beq.w	801d988 <lfs_dir_orphaningcommit+0x3d0>
 801d7b0:	02a3      	lsls	r3, r4, #10
 801d7b2:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801d7b6:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801d7ba:	931e      	str	r3, [sp, #120]	@ 0x78
 801d7bc:	2100      	movs	r1, #0
 801d7be:	911f      	str	r1, [sp, #124]	@ 0x7c
 801d7c0:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 801d7c4:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801d7c8:	4b5d      	ldr	r3, [pc, #372]	@ (801d940 <lfs_dir_orphaningcommit+0x388>)
 801d7ca:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801d7ce:	9320      	str	r3, [sp, #128]	@ 0x80
 801d7d0:	ab0e      	add	r3, sp, #56	@ 0x38
 801d7d2:	9321      	str	r3, [sp, #132]	@ 0x84
 801d7d4:	9101      	str	r1, [sp, #4]
 801d7d6:	2302      	movs	r3, #2
 801d7d8:	9300      	str	r3, [sp, #0]
 801d7da:	ab1e      	add	r3, sp, #120	@ 0x78
 801d7dc:	aa16      	add	r2, sp, #88	@ 0x58
 801d7de:	a906      	add	r1, sp, #24
 801d7e0:	4628      	mov	r0, r5
 801d7e2:	f7ff fd39 	bl	801d258 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801d7e6:	1e07      	subs	r7, r0, #0
 801d7e8:	f2c0 80d2 	blt.w	801d990 <lfs_dir_orphaningcommit+0x3d8>
            ldir = pdir;
 801d7ec:	ac0e      	add	r4, sp, #56	@ 0x38
 801d7ee:	f10d 0c18 	add.w	ip, sp, #24
 801d7f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801d7f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d7f8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801d7fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 801d800:	2f01      	cmp	r7, #1
 801d802:	f040 80c3 	bne.w	801d98c <lfs_dir_orphaningcommit+0x3d4>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 801d806:	4b4f      	ldr	r3, [pc, #316]	@ (801d944 <lfs_dir_orphaningcommit+0x38c>)
 801d808:	9303      	str	r3, [sp, #12]
 801d80a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d80c:	9302      	str	r3, [sp, #8]
 801d80e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d810:	9301      	str	r3, [sp, #4]
 801d812:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d814:	9300      	str	r3, [sp, #0]
 801d816:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d818:	f640 128c 	movw	r2, #2444	@ 0x98c
 801d81c:	494a      	ldr	r1, [pc, #296]	@ (801d948 <lfs_dir_orphaningcommit+0x390>)
 801d81e:	484b      	ldr	r0, [pc, #300]	@ (801d94c <lfs_dir_orphaningcommit+0x394>)
 801d820:	f00c f810 	bl	8029844 <printf>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d824:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801d826:	6a2b      	ldr	r3, [r5, #32]
 801d828:	428b      	cmp	r3, r1
 801d82a:	d007      	beq.n	801d83c <lfs_dir_orphaningcommit+0x284>
 801d82c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801d82e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801d830:	4282      	cmp	r2, r0
 801d832:	d003      	beq.n	801d83c <lfs_dir_orphaningcommit+0x284>
 801d834:	428a      	cmp	r2, r1
 801d836:	d001      	beq.n	801d83c <lfs_dir_orphaningcommit+0x284>
 801d838:	4298      	cmp	r0, r3
 801d83a:	d103      	bne.n	801d844 <lfs_dir_orphaningcommit+0x28c>
            lfs->root[0] = ldir.pair[0];
 801d83c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d83e:	622b      	str	r3, [r5, #32]
            lfs->root[1] = ldir.pair[1];
 801d840:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d842:	626b      	str	r3, [r5, #36]	@ 0x24
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801d844:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801d846:	e758      	b.n	801d6fa <lfs_dir_orphaningcommit+0x142>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801d848:	f114 0802 	adds.w	r8, r4, #2
 801d84c:	bf18      	it	ne
 801d84e:	f04f 0801 	movne.w	r8, #1
            int err = lfs_fs_preporphans(lfs, +1);
 801d852:	2101      	movs	r1, #1
 801d854:	4628      	mov	r0, r5
 801d856:	f7fd f997 	bl	801ab88 <lfs_fs_preporphans>
            if (err) {
 801d85a:	4607      	mov	r7, r0
 801d85c:	2800      	cmp	r0, #0
 801d85e:	f040 8097 	bne.w	801d990 <lfs_dir_orphaningcommit+0x3d8>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801d862:	a906      	add	r1, sp, #24
 801d864:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801d868:	f7fd f858 	bl	801a91c <lfs_gstate_hasmovehere>
 801d86c:	2800      	cmp	r0, #0
 801d86e:	d131      	bne.n	801d8d4 <lfs_dir_orphaningcommit+0x31c>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801d870:	4622      	mov	r2, r4
            uint16_t moveid = 0x3ff;
 801d872:	f240 37ff 	movw	r7, #1023	@ 0x3ff
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 801d876:	9b06      	ldr	r3, [sp, #24]
 801d878:	9304      	str	r3, [sp, #16]
 801d87a:	9b07      	ldr	r3, [sp, #28]
 801d87c:	9305      	str	r3, [sp, #20]
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801d87e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d882:	429f      	cmp	r7, r3
 801d884:	d044      	beq.n	801d910 <lfs_dir_orphaningcommit+0x358>
 801d886:	02bb      	lsls	r3, r7, #10
 801d888:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801d88c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801d890:	931a      	str	r3, [sp, #104]	@ 0x68
 801d892:	2300      	movs	r3, #0
 801d894:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d896:	921c      	str	r2, [sp, #112]	@ 0x70
 801d898:	aa0e      	add	r2, sp, #56	@ 0x38
 801d89a:	921d      	str	r2, [sp, #116]	@ 0x74
 801d89c:	9301      	str	r3, [sp, #4]
 801d89e:	2302      	movs	r3, #2
 801d8a0:	9300      	str	r3, [sp, #0]
 801d8a2:	ab1a      	add	r3, sp, #104	@ 0x68
 801d8a4:	aa04      	add	r2, sp, #16
 801d8a6:	a906      	add	r1, sp, #24
 801d8a8:	4628      	mov	r0, r5
 801d8aa:	f7ff fcd5 	bl	801d258 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801d8ae:	1e07      	subs	r7, r0, #0
 801d8b0:	db6e      	blt.n	801d990 <lfs_dir_orphaningcommit+0x3d8>
            if (state == LFS_OK_RELOCATED) {
 801d8b2:	2f01      	cmp	r7, #1
 801d8b4:	f47f af50 	bne.w	801d758 <lfs_dir_orphaningcommit+0x1a0>
                lpair[0] = ppair[0];
 801d8b8:	9b04      	ldr	r3, [sp, #16]
 801d8ba:	9316      	str	r3, [sp, #88]	@ 0x58
                lpair[1] = ppair[1];
 801d8bc:	9b05      	ldr	r3, [sp, #20]
 801d8be:	9317      	str	r3, [sp, #92]	@ 0x5c
                ldir = pdir;
 801d8c0:	ac0e      	add	r4, sp, #56	@ 0x38
 801d8c2:	ae06      	add	r6, sp, #24
 801d8c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d8c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d8c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801d8cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 801d8d0:	2601      	movs	r6, #1
 801d8d2:	e795      	b.n	801d800 <lfs_dir_orphaningcommit+0x248>
                moveid = lfs_tag_id(lfs->gstate.tag);
 801d8d4:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801d8d6:	f3c7 2789 	ubfx	r7, r7, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801d8da:	4b1a      	ldr	r3, [pc, #104]	@ (801d944 <lfs_dir_orphaningcommit+0x38c>)
 801d8dc:	9302      	str	r3, [sp, #8]
 801d8de:	9701      	str	r7, [sp, #4]
 801d8e0:	9b07      	ldr	r3, [sp, #28]
 801d8e2:	9300      	str	r3, [sp, #0]
 801d8e4:	9b06      	ldr	r3, [sp, #24]
 801d8e6:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 801d8ea:	4917      	ldr	r1, [pc, #92]	@ (801d948 <lfs_dir_orphaningcommit+0x390>)
 801d8ec:	4818      	ldr	r0, [pc, #96]	@ (801d950 <lfs_dir_orphaningcommit+0x398>)
 801d8ee:	f00b ffa9 	bl	8029844 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801d8f2:	2200      	movs	r2, #0
 801d8f4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801d8f8:	4628      	mov	r0, r5
 801d8fa:	f7fd f8f5 	bl	801aae8 <lfs_fs_prepmove>
    return (tag & 0x000ffc00) >> 10;
 801d8fe:	f3c4 2389 	ubfx	r3, r4, #10, #10
                if (moveid < lfs_tag_id(tag)) {
 801d902:	42bb      	cmp	r3, r7
 801d904:	d902      	bls.n	801d90c <lfs_dir_orphaningcommit+0x354>
                    tag -= LFS_MKTAG(0, 1, 0);
 801d906:	f5a4 6280 	sub.w	r2, r4, #1024	@ 0x400
 801d90a:	e7b4      	b.n	801d876 <lfs_dir_orphaningcommit+0x2be>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801d90c:	4622      	mov	r2, r4
 801d90e:	e7b2      	b.n	801d876 <lfs_dir_orphaningcommit+0x2be>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801d910:	2300      	movs	r3, #0
 801d912:	e7bd      	b.n	801d890 <lfs_dir_orphaningcommit+0x2d8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801d914:	4b0f      	ldr	r3, [pc, #60]	@ (801d954 <lfs_dir_orphaningcommit+0x39c>)
 801d916:	4a10      	ldr	r2, [pc, #64]	@ (801d958 <lfs_dir_orphaningcommit+0x3a0>)
 801d918:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 801d91c:	480a      	ldr	r0, [pc, #40]	@ (801d948 <lfs_dir_orphaningcommit+0x390>)
 801d91e:	f00b ff5d 	bl	80297dc <__assert_func>
        if (err != LFS_ERR_NOENT) {
 801d922:	f113 0f02 	cmn.w	r3, #2
 801d926:	f47f af2a 	bne.w	801d77e <lfs_dir_orphaningcommit+0x1c6>
 801d92a:	e769      	b.n	801d800 <lfs_dir_orphaningcommit+0x248>
                err = lfs_fs_preporphans(lfs, -hasparent);
 801d92c:	f1c8 0100 	rsb	r1, r8, #0
 801d930:	4628      	mov	r0, r5
 801d932:	f7fd f929 	bl	801ab88 <lfs_fs_preporphans>
                if (err) {
 801d936:	4607      	mov	r7, r0
 801d938:	2800      	cmp	r0, #0
 801d93a:	f43f af26 	beq.w	801d78a <lfs_dir_orphaningcommit+0x1d2>
 801d93e:	e027      	b.n	801d990 <lfs_dir_orphaningcommit+0x3d8>
 801d940:	000ffc08 	.word	0x000ffc08
 801d944:	08036364 	.word	0x08036364
 801d948:	080384b8 	.word	0x080384b8
 801d94c:	08038858 	.word	0x08038858
 801d950:	08038894 	.word	0x08038894
 801d954:	080388d8 	.word	0x080388d8
 801d958:	08039214 	.word	0x08039214
                moveid = lfs_tag_id(lfs->gstate.tag);
 801d95c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801d95e:	f3c4 2489 	ubfx	r4, r4, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801d962:	4b10      	ldr	r3, [pc, #64]	@ (801d9a4 <lfs_dir_orphaningcommit+0x3ec>)
 801d964:	9302      	str	r3, [sp, #8]
 801d966:	9401      	str	r4, [sp, #4]
 801d968:	9b07      	ldr	r3, [sp, #28]
 801d96a:	9300      	str	r3, [sp, #0]
 801d96c:	9b06      	ldr	r3, [sp, #24]
 801d96e:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 801d972:	490d      	ldr	r1, [pc, #52]	@ (801d9a8 <lfs_dir_orphaningcommit+0x3f0>)
 801d974:	480d      	ldr	r0, [pc, #52]	@ (801d9ac <lfs_dir_orphaningcommit+0x3f4>)
 801d976:	f00b ff65 	bl	8029844 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801d97a:	2200      	movs	r2, #0
 801d97c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801d980:	4628      	mov	r0, r5
 801d982:	f7fd f8b1 	bl	801aae8 <lfs_fs_prepmove>
 801d986:	e70a      	b.n	801d79e <lfs_dir_orphaningcommit+0x1e6>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801d988:	2300      	movs	r3, #0
 801d98a:	e716      	b.n	801d7ba <lfs_dir_orphaningcommit+0x202>
    return orphans ? LFS_OK_ORPHANED : 0;
 801d98c:	b926      	cbnz	r6, 801d998 <lfs_dir_orphaningcommit+0x3e0>
 801d98e:	2700      	movs	r7, #0
}
 801d990:	4638      	mov	r0, r7
 801d992:	b023      	add	sp, #140	@ 0x8c
 801d994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return orphans ? LFS_OK_ORPHANED : 0;
 801d998:	2703      	movs	r7, #3
 801d99a:	e7f9      	b.n	801d990 <lfs_dir_orphaningcommit+0x3d8>
            return tag;
 801d99c:	4627      	mov	r7, r4
 801d99e:	e7f7      	b.n	801d990 <lfs_dir_orphaningcommit+0x3d8>
            return err;
 801d9a0:	4607      	mov	r7, r0
 801d9a2:	e7f5      	b.n	801d990 <lfs_dir_orphaningcommit+0x3d8>
 801d9a4:	08036364 	.word	0x08036364
 801d9a8:	080384b8 	.word	0x080384b8
 801d9ac:	08038894 	.word	0x08038894

0801d9b0 <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 801d9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9b4:	b0a4      	sub	sp, #144	@ 0x90
    return lfs_tag_size(a->tag);
 801d9b6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801d9b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 801d9bc:	2b00      	cmp	r3, #0
 801d9be:	f000 80ea 	beq.w	801db96 <lfs_fs_deorphan+0x1e6>
 801d9c2:	4605      	mov	r5, r0
 801d9c4:	460f      	mov	r7, r1
    int pass = 0;
 801d9c6:	2600      	movs	r6, #0
    while (pass < 2) {
 801d9c8:	2e01      	cmp	r6, #1
 801d9ca:	f300 80db 	bgt.w	801db84 <lfs_fs_deorphan+0x1d4>
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 801d9ce:	2220      	movs	r2, #32
 801d9d0:	2100      	movs	r1, #0
 801d9d2:	a806      	add	r0, sp, #24
 801d9d4:	f00e fc54 	bl	802c280 <memset>
 801d9d8:	2301      	movs	r3, #1
 801d9da:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
 801d9de:	930d      	str	r3, [sp, #52]	@ 0x34
        bool moreorphans = false;
 801d9e0:	f04f 0800 	mov.w	r8, #0
        while (!lfs_pair_isnull(pdir.tail)) {
 801d9e4:	e0bd      	b.n	801db62 <lfs_fs_deorphan+0x1b2>
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 801d9e6:	aa16      	add	r2, sp, #88	@ 0x58
 801d9e8:	a90c      	add	r1, sp, #48	@ 0x30
 801d9ea:	4628      	mov	r0, r5
 801d9ec:	f7fe fa4c 	bl	801be88 <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801d9f0:	1e04      	subs	r4, r0, #0
 801d9f2:	db39      	blt.n	801da68 <lfs_fs_deorphan+0xb8>
                if (pass == 0 && tag != LFS_ERR_NOENT) {
 801d9f4:	b916      	cbnz	r6, 801d9fc <lfs_fs_deorphan+0x4c>
 801d9f6:	f114 0f02 	cmn.w	r4, #2
 801d9fa:	d139      	bne.n	801da70 <lfs_fs_deorphan+0xc0>
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 801d9fc:	2e01      	cmp	r6, #1
 801d9fe:	f040 80a4 	bne.w	801db4a <lfs_fs_deorphan+0x19a>
 801da02:	f114 0f02 	cmn.w	r4, #2
 801da06:	f040 80a0 	bne.w	801db4a <lfs_fs_deorphan+0x19a>
 801da0a:	2f00      	cmp	r7, #0
 801da0c:	f000 809d 	beq.w	801db4a <lfs_fs_deorphan+0x19a>
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 801da10:	4b63      	ldr	r3, [pc, #396]	@ (801dba0 <lfs_fs_deorphan+0x1f0>)
 801da12:	9301      	str	r3, [sp, #4]
 801da14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801da16:	9300      	str	r3, [sp, #0]
 801da18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801da1a:	f241 329c 	movw	r2, #5020	@ 0x139c
 801da1e:	4961      	ldr	r1, [pc, #388]	@ (801dba4 <lfs_fs_deorphan+0x1f4>)
 801da20:	4861      	ldr	r0, [pc, #388]	@ (801dba8 <lfs_fs_deorphan+0x1f8>)
 801da22:	f00b ff0f 	bl	8029844 <printf>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 801da26:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801da2a:	a90e      	add	r1, sp, #56	@ 0x38
 801da2c:	4628      	mov	r0, r5
 801da2e:	f7fd fab7 	bl	801afa0 <lfs_dir_getgstate>
                    if (err) {
 801da32:	4604      	mov	r4, r0
 801da34:	2800      	cmp	r0, #0
 801da36:	f040 80af 	bne.w	801db98 <lfs_fs_deorphan+0x1e8>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801da3a:	f89d 204f 	ldrb.w	r2, [sp, #79]	@ 0x4f
 801da3e:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801da42:	4b5a      	ldr	r3, [pc, #360]	@ (801dbac <lfs_fs_deorphan+0x1fc>)
 801da44:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801da48:	9322      	str	r3, [sp, #136]	@ 0x88
 801da4a:	ab14      	add	r3, sp, #80	@ 0x50
 801da4c:	9323      	str	r3, [sp, #140]	@ 0x8c
 801da4e:	2301      	movs	r3, #1
 801da50:	aa22      	add	r2, sp, #136	@ 0x88
 801da52:	a906      	add	r1, sp, #24
 801da54:	4628      	mov	r0, r5
 801da56:	f7ff fdaf 	bl	801d5b8 <lfs_dir_orphaningcommit>
                    if (state < 0) {
 801da5a:	1e04      	subs	r4, r0, #0
 801da5c:	f2c0 809c 	blt.w	801db98 <lfs_fs_deorphan+0x1e8>
                    if (state == LFS_OK_ORPHANED) {
 801da60:	2c03      	cmp	r4, #3
 801da62:	d17e      	bne.n	801db62 <lfs_fs_deorphan+0x1b2>
                        moreorphans = true;
 801da64:	46b8      	mov	r8, r7
                    continue;
 801da66:	e07c      	b.n	801db62 <lfs_fs_deorphan+0x1b2>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801da68:	f114 0f02 	cmn.w	r4, #2
 801da6c:	d0c2      	beq.n	801d9f4 <lfs_fs_deorphan+0x44>
 801da6e:	e093      	b.n	801db98 <lfs_fs_deorphan+0x1e8>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 801da70:	ab04      	add	r3, sp, #16
 801da72:	9300      	str	r3, [sp, #0]
 801da74:	4623      	mov	r3, r4
 801da76:	4a4e      	ldr	r2, [pc, #312]	@ (801dbb0 <lfs_fs_deorphan+0x200>)
 801da78:	a916      	add	r1, sp, #88	@ 0x58
 801da7a:	4628      	mov	r0, r5
 801da7c:	f7fd fa82 	bl	801af84 <lfs_dir_get>
                    if (state < 0) {
 801da80:	2800      	cmp	r0, #0
 801da82:	db50      	blt.n	801db26 <lfs_fs_deorphan+0x176>
                    if (!lfs_pair_issync(pair, pdir.tail)) {
 801da84:	a90c      	add	r1, sp, #48	@ 0x30
 801da86:	a804      	add	r0, sp, #16
 801da88:	f7fc ff12 	bl	801a8b0 <lfs_pair_issync>
 801da8c:	2800      	cmp	r0, #0
 801da8e:	d1b5      	bne.n	801d9fc <lfs_fs_deorphan+0x4c>
                        LFS_DEBUG("Fixing half-orphan "
 801da90:	4b43      	ldr	r3, [pc, #268]	@ (801dba0 <lfs_fs_deorphan+0x1f0>)
 801da92:	9303      	str	r3, [sp, #12]
 801da94:	9b05      	ldr	r3, [sp, #20]
 801da96:	9302      	str	r3, [sp, #8]
 801da98:	9b04      	ldr	r3, [sp, #16]
 801da9a:	9301      	str	r3, [sp, #4]
 801da9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801da9e:	9300      	str	r3, [sp, #0]
 801daa0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801daa2:	f241 3271 	movw	r2, #4977	@ 0x1371
 801daa6:	493f      	ldr	r1, [pc, #252]	@ (801dba4 <lfs_fs_deorphan+0x1f4>)
 801daa8:	4842      	ldr	r0, [pc, #264]	@ (801dbb4 <lfs_fs_deorphan+0x204>)
 801daaa:	f00b fecb 	bl	8029844 <printf>
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801daae:	a906      	add	r1, sp, #24
 801dab0:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801dab4:	f7fc ff32 	bl	801a91c <lfs_gstate_hasmovehere>
 801dab8:	b9a0      	cbnz	r0, 801dae4 <lfs_fs_deorphan+0x134>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801daba:	2300      	movs	r3, #0
 801dabc:	931e      	str	r3, [sp, #120]	@ 0x78
 801dabe:	2300      	movs	r3, #0
 801dac0:	931f      	str	r3, [sp, #124]	@ 0x7c
 801dac2:	4b3d      	ldr	r3, [pc, #244]	@ (801dbb8 <lfs_fs_deorphan+0x208>)
 801dac4:	9320      	str	r3, [sp, #128]	@ 0x80
 801dac6:	ab04      	add	r3, sp, #16
 801dac8:	9321      	str	r3, [sp, #132]	@ 0x84
 801daca:	2302      	movs	r3, #2
 801dacc:	aa1e      	add	r2, sp, #120	@ 0x78
 801dace:	a906      	add	r1, sp, #24
 801dad0:	4628      	mov	r0, r5
 801dad2:	f7ff fd71 	bl	801d5b8 <lfs_dir_orphaningcommit>
                        if (state < 0) {
 801dad6:	1e04      	subs	r4, r0, #0
 801dad8:	db5e      	blt.n	801db98 <lfs_fs_deorphan+0x1e8>
                        if (state == LFS_OK_ORPHANED) {
 801dada:	2c03      	cmp	r4, #3
 801dadc:	d141      	bne.n	801db62 <lfs_fs_deorphan+0x1b2>
                            moreorphans = true;
 801dade:	f04f 0801 	mov.w	r8, #1
                        continue;
 801dae2:	e03e      	b.n	801db62 <lfs_fs_deorphan+0x1b2>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 801dae4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801dae6:	f3c4 2489 	ubfx	r4, r4, #10, #10
                            LFS_DEBUG("Fixing move while fixing orphans "
 801daea:	4b2d      	ldr	r3, [pc, #180]	@ (801dba0 <lfs_fs_deorphan+0x1f0>)
 801daec:	9302      	str	r3, [sp, #8]
 801daee:	9401      	str	r4, [sp, #4]
 801daf0:	9b07      	ldr	r3, [sp, #28]
 801daf2:	9300      	str	r3, [sp, #0]
 801daf4:	9b06      	ldr	r3, [sp, #24]
 801daf6:	f241 327c 	movw	r2, #4988	@ 0x137c
 801dafa:	492a      	ldr	r1, [pc, #168]	@ (801dba4 <lfs_fs_deorphan+0x1f4>)
 801dafc:	482f      	ldr	r0, [pc, #188]	@ (801dbbc <lfs_fs_deorphan+0x20c>)
 801dafe:	f00b fea1 	bl	8029844 <printf>
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801db02:	2200      	movs	r2, #0
 801db04:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801db08:	4628      	mov	r0, r5
 801db0a:	f7fc ffed 	bl	801aae8 <lfs_fs_prepmove>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801db0e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801db12:	429c      	cmp	r4, r3
 801db14:	d005      	beq.n	801db22 <lfs_fs_deorphan+0x172>
 801db16:	02a3      	lsls	r3, r4, #10
 801db18:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801db1c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801db20:	e7cc      	b.n	801dabc <lfs_fs_deorphan+0x10c>
 801db22:	2300      	movs	r3, #0
 801db24:	e7ca      	b.n	801dabc <lfs_fs_deorphan+0x10c>
                        return state;
 801db26:	4604      	mov	r4, r0
 801db28:	e036      	b.n	801db98 <lfs_fs_deorphan+0x1e8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801db2a:	2301      	movs	r3, #1
 801db2c:	e000      	b.n	801db30 <lfs_fs_deorphan+0x180>
 801db2e:	2301      	movs	r3, #1
        while (!lfs_pair_isnull(pdir.tail)) {
 801db30:	bb0b      	cbnz	r3, 801db76 <lfs_fs_deorphan+0x1c6>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 801db32:	aa0c      	add	r2, sp, #48	@ 0x30
 801db34:	a90e      	add	r1, sp, #56	@ 0x38
 801db36:	4628      	mov	r0, r5
 801db38:	f7fe fa12 	bl	801bf60 <lfs_dir_fetch>
            if (err) {
 801db3c:	4604      	mov	r4, r0
 801db3e:	bb58      	cbnz	r0, 801db98 <lfs_fs_deorphan+0x1e8>
            if (!pdir.split) {
 801db40:	f89d 302f 	ldrb.w	r3, [sp, #47]	@ 0x2f
 801db44:	2b00      	cmp	r3, #0
 801db46:	f43f af4e 	beq.w	801d9e6 <lfs_fs_deorphan+0x36>
            pdir = dir;
 801db4a:	f10d 0c18 	add.w	ip, sp, #24
 801db4e:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 801db52:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801db56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801db5a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801db5e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801db62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801db64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801db68:	d0e1      	beq.n	801db2e <lfs_fs_deorphan+0x17e>
 801db6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801db6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801db70:	d0db      	beq.n	801db2a <lfs_fs_deorphan+0x17a>
 801db72:	2300      	movs	r3, #0
 801db74:	e7dc      	b.n	801db30 <lfs_fs_deorphan+0x180>
        pass = moreorphans ? 0 : pass+1;
 801db76:	f1b8 0f00 	cmp.w	r8, #0
 801db7a:	d101      	bne.n	801db80 <lfs_fs_deorphan+0x1d0>
 801db7c:	3601      	adds	r6, #1
 801db7e:	e723      	b.n	801d9c8 <lfs_fs_deorphan+0x18>
 801db80:	2600      	movs	r6, #0
 801db82:	e721      	b.n	801d9c8 <lfs_fs_deorphan+0x18>
    return lfs_tag_size(a->tag) & 0x1ff;
 801db84:	f895 1030 	ldrb.w	r1, [r5, #48]	@ 0x30
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 801db88:	4249      	negs	r1, r1
 801db8a:	b249      	sxtb	r1, r1
 801db8c:	4628      	mov	r0, r5
 801db8e:	f7fc fffb 	bl	801ab88 <lfs_fs_preporphans>
 801db92:	4604      	mov	r4, r0
 801db94:	e000      	b.n	801db98 <lfs_fs_deorphan+0x1e8>
        return 0;
 801db96:	2400      	movs	r4, #0
}
 801db98:	4620      	mov	r0, r4
 801db9a:	b024      	add	sp, #144	@ 0x90
 801db9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dba0:	08036364 	.word	0x08036364
 801dba4:	080384b8 	.word	0x080384b8
 801dba8:	0803898c 	.word	0x0803898c
 801dbac:	000ffc08 	.word	0x000ffc08
 801dbb0:	7ffffc00 	.word	0x7ffffc00
 801dbb4:	08038900 	.word	0x08038900
 801dbb8:	600ffc08 	.word	0x600ffc08
 801dbbc:	08038944 	.word	0x08038944

0801dbc0 <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801dbc0:	b510      	push	{r4, lr}
 801dbc2:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 801dbc4:	f7ff fcf8 	bl	801d5b8 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
 801dbc8:	2800      	cmp	r0, #0
 801dbca:	db00      	blt.n	801dbce <lfs_dir_commit+0xe>
    if (orphans) {
 801dbcc:	b900      	cbnz	r0, 801dbd0 <lfs_dir_commit+0x10>
}
 801dbce:	bd10      	pop	{r4, pc}
        int err = lfs_fs_deorphan(lfs, false);
 801dbd0:	2100      	movs	r1, #0
 801dbd2:	4620      	mov	r0, r4
 801dbd4:	f7ff feec 	bl	801d9b0 <lfs_fs_deorphan>
        if (err) {
 801dbd8:	e7f9      	b.n	801dbce <lfs_dir_commit+0xe>
	...

0801dbdc <lfs_fs_desuperblock>:
static int lfs_fs_desuperblock(lfs_t *lfs) {
 801dbdc:	b530      	push	{r4, r5, lr}
 801dbde:	b093      	sub	sp, #76	@ 0x4c
    return lfs_tag_size(a->tag) >> 9;
 801dbe0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 801dbe2:	f413 7f00 	tst.w	r3, #512	@ 0x200
 801dbe6:	d103      	bne.n	801dbf0 <lfs_fs_desuperblock+0x14>
        return 0;
 801dbe8:	2500      	movs	r5, #0
}
 801dbea:	4628      	mov	r0, r5
 801dbec:	b013      	add	sp, #76	@ 0x4c
 801dbee:	bd30      	pop	{r4, r5, pc}
 801dbf0:	4604      	mov	r4, r0
    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 801dbf2:	4b1a      	ldr	r3, [pc, #104]	@ (801dc5c <lfs_fs_desuperblock+0x80>)
 801dbf4:	9301      	str	r3, [sp, #4]
 801dbf6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801dbf8:	9300      	str	r3, [sp, #0]
 801dbfa:	6a03      	ldr	r3, [r0, #32]
 801dbfc:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 801dc00:	4917      	ldr	r1, [pc, #92]	@ (801dc60 <lfs_fs_desuperblock+0x84>)
 801dc02:	4818      	ldr	r0, [pc, #96]	@ (801dc64 <lfs_fs_desuperblock+0x88>)
 801dc04:	f00b fe1e 	bl	8029844 <printf>
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 801dc08:	f104 0220 	add.w	r2, r4, #32
 801dc0c:	a908      	add	r1, sp, #32
 801dc0e:	4620      	mov	r0, r4
 801dc10:	f7fe f9a6 	bl	801bf60 <lfs_dir_fetch>
    if (err) {
 801dc14:	4605      	mov	r5, r0
 801dc16:	2800      	cmp	r0, #0
 801dc18:	d1e7      	bne.n	801dbea <lfs_fs_desuperblock+0xe>
        .version     = lfs_fs_disk_version(lfs),
 801dc1a:	4620      	mov	r0, r4
 801dc1c:	f7fc feb6 	bl	801a98c <lfs_fs_disk_version>
    lfs_superblock_t superblock = {
 801dc20:	9002      	str	r0, [sp, #8]
        .block_size  = lfs->cfg->block_size,
 801dc22:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801dc24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 801dc26:	9303      	str	r3, [sp, #12]
        .block_count = lfs->block_count,
 801dc28:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 801dc2a:	9304      	str	r3, [sp, #16]
        .name_max    = lfs->name_max,
 801dc2c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
    lfs_superblock_t superblock = {
 801dc2e:	9305      	str	r3, [sp, #20]
        .file_max    = lfs->file_max,
 801dc30:	6f63      	ldr	r3, [r4, #116]	@ 0x74
    lfs_superblock_t superblock = {
 801dc32:	9306      	str	r3, [sp, #24]
        .attr_max    = lfs->attr_max,
 801dc34:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    lfs_superblock_t superblock = {
 801dc36:	9307      	str	r3, [sp, #28]
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801dc38:	4b0b      	ldr	r3, [pc, #44]	@ (801dc68 <lfs_fs_desuperblock+0x8c>)
 801dc3a:	9310      	str	r3, [sp, #64]	@ 0x40
 801dc3c:	ab02      	add	r3, sp, #8
 801dc3e:	9311      	str	r3, [sp, #68]	@ 0x44
 801dc40:	2301      	movs	r3, #1
 801dc42:	aa10      	add	r2, sp, #64	@ 0x40
 801dc44:	a908      	add	r1, sp, #32
 801dc46:	4620      	mov	r0, r4
 801dc48:	f7ff ffba 	bl	801dbc0 <lfs_dir_commit>
    if (err) {
 801dc4c:	4605      	mov	r5, r0
 801dc4e:	2800      	cmp	r0, #0
 801dc50:	d1cb      	bne.n	801dbea <lfs_fs_desuperblock+0xe>
    lfs_fs_prepsuperblock(lfs, false);
 801dc52:	2100      	movs	r1, #0
 801dc54:	4620      	mov	r0, r4
 801dc56:	f7fc ff40 	bl	801aada <lfs_fs_prepsuperblock>
    return 0;
 801dc5a:	e7c6      	b.n	801dbea <lfs_fs_desuperblock+0xe>
 801dc5c:	08036364 	.word	0x08036364
 801dc60:	080384b8 	.word	0x080384b8
 801dc64:	080389bc 	.word	0x080389bc
 801dc68:	20100018 	.word	0x20100018

0801dc6c <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
 801dc6c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
    return (tag & 0x70000000) >> 20;
 801dc6e:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 801dc70:	f412 6fe0 	tst.w	r2, #1792	@ 0x700
 801dc74:	d101      	bne.n	801dc7a <lfs_fs_demove+0xe>
        return 0;
 801dc76:	2000      	movs	r0, #0
}
 801dc78:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
 801dc7a:	b530      	push	{r4, r5, lr}
 801dc7c:	b08f      	sub	sp, #60	@ 0x3c
 801dc7e:	4604      	mov	r4, r0
    return (tag & 0x000ffc00) >> 10;
 801dc80:	f3c3 2389 	ubfx	r3, r3, #10, #10
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 801dc84:	4a1d      	ldr	r2, [pc, #116]	@ (801dcfc <lfs_fs_demove+0x90>)
 801dc86:	9202      	str	r2, [sp, #8]
 801dc88:	9301      	str	r3, [sp, #4]
 801dc8a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801dc8c:	9300      	str	r3, [sp, #0]
 801dc8e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801dc90:	f241 3224 	movw	r2, #4900	@ 0x1324
 801dc94:	491a      	ldr	r1, [pc, #104]	@ (801dd00 <lfs_fs_demove+0x94>)
 801dc96:	481b      	ldr	r0, [pc, #108]	@ (801dd04 <lfs_fs_demove+0x98>)
 801dc98:	f00b fdd4 	bl	8029844 <printf>
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801dc9c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    return (tag & 0x7ff00000) >> 20;
 801dc9e:	f3c3 530a 	ubfx	r3, r3, #20, #11
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801dca2:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 801dca6:	4293      	cmp	r3, r2
 801dca8:	d108      	bne.n	801dcbc <lfs_fs_demove+0x50>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 801dcaa:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801dcae:	a904      	add	r1, sp, #16
 801dcb0:	4620      	mov	r0, r4
 801dcb2:	f7fe f955 	bl	801bf60 <lfs_dir_fetch>
    if (err) {
 801dcb6:	b140      	cbz	r0, 801dcca <lfs_fs_demove+0x5e>
}
 801dcb8:	b00f      	add	sp, #60	@ 0x3c
 801dcba:	bd30      	pop	{r4, r5, pc}
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801dcbc:	4b12      	ldr	r3, [pc, #72]	@ (801dd08 <lfs_fs_demove+0x9c>)
 801dcbe:	4a13      	ldr	r2, [pc, #76]	@ (801dd0c <lfs_fs_demove+0xa0>)
 801dcc0:	f241 312b 	movw	r1, #4907	@ 0x132b
 801dcc4:	480e      	ldr	r0, [pc, #56]	@ (801dd00 <lfs_fs_demove+0x94>)
 801dcc6:	f00b fd89 	bl	80297dc <__assert_func>
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 801dcca:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801dccc:	f3c5 2589 	ubfx	r5, r5, #10, #10
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801dcd0:	2200      	movs	r2, #0
 801dcd2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801dcd6:	4620      	mov	r0, r4
 801dcd8:	f7fc ff06 	bl	801aae8 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 801dcdc:	02ab      	lsls	r3, r5, #10
 801dcde:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801dce2:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801dce6:	930c      	str	r3, [sp, #48]	@ 0x30
 801dce8:	2300      	movs	r3, #0
 801dcea:	930d      	str	r3, [sp, #52]	@ 0x34
 801dcec:	2301      	movs	r3, #1
 801dcee:	aa0c      	add	r2, sp, #48	@ 0x30
 801dcf0:	a904      	add	r1, sp, #16
 801dcf2:	4620      	mov	r0, r4
 801dcf4:	f7ff ff64 	bl	801dbc0 <lfs_dir_commit>
    if (err) {
 801dcf8:	e7de      	b.n	801dcb8 <lfs_fs_demove+0x4c>
 801dcfa:	bf00      	nop
 801dcfc:	08036364 	.word	0x08036364
 801dd00:	080384b8 	.word	0x080384b8
 801dd04:	080389f0 	.word	0x080389f0
 801dd08:	08038a24 	.word	0x08038a24
 801dd0c:	08039178 	.word	0x08039178

0801dd10 <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 801dd10:	b510      	push	{r4, lr}
 801dd12:	4604      	mov	r4, r0
    int err = lfs_fs_desuperblock(lfs);
 801dd14:	f7ff ff62 	bl	801dbdc <lfs_fs_desuperblock>
    if (err) {
 801dd18:	4603      	mov	r3, r0
 801dd1a:	b108      	cbz	r0, 801dd20 <lfs_fs_forceconsistency+0x10>
}
 801dd1c:	4618      	mov	r0, r3
 801dd1e:	bd10      	pop	{r4, pc}
    err = lfs_fs_demove(lfs);
 801dd20:	4620      	mov	r0, r4
 801dd22:	f7ff ffa3 	bl	801dc6c <lfs_fs_demove>
    if (err) {
 801dd26:	4603      	mov	r3, r0
 801dd28:	2800      	cmp	r0, #0
 801dd2a:	d1f7      	bne.n	801dd1c <lfs_fs_forceconsistency+0xc>
    err = lfs_fs_deorphan(lfs, true);
 801dd2c:	2101      	movs	r1, #1
 801dd2e:	4620      	mov	r0, r4
 801dd30:	f7ff fe3e 	bl	801d9b0 <lfs_fs_deorphan>
 801dd34:	4603      	mov	r3, r0
    if (err) {
 801dd36:	e7f1      	b.n	801dd1c <lfs_fs_forceconsistency+0xc>

0801dd38 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 801dd38:	b570      	push	{r4, r5, r6, lr}
 801dd3a:	b082      	sub	sp, #8
 801dd3c:	4605      	mov	r5, r0
 801dd3e:	460e      	mov	r6, r1
 801dd40:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 801dd42:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 801dd46:	4621      	mov	r1, r4
 801dd48:	f7fd f92a 	bl	801afa0 <lfs_dir_getgstate>
    if (err) {
 801dd4c:	b108      	cbz	r0, 801dd52 <lfs_dir_drop+0x1a>
}
 801dd4e:	b002      	add	sp, #8
 801dd50:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
 801dd52:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 801dd56:	7de2      	ldrb	r2, [r4, #23]
 801dd58:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801dd5c:	4b05      	ldr	r3, [pc, #20]	@ (801dd74 <lfs_dir_drop+0x3c>)
 801dd5e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801dd62:	9300      	str	r3, [sp, #0]
 801dd64:	9101      	str	r1, [sp, #4]
 801dd66:	2301      	movs	r3, #1
 801dd68:	466a      	mov	r2, sp
 801dd6a:	4631      	mov	r1, r6
 801dd6c:	4628      	mov	r0, r5
 801dd6e:	f7ff ff27 	bl	801dbc0 <lfs_dir_commit>
    if (err) {
 801dd72:	e7ec      	b.n	801dd4e <lfs_dir_drop+0x16>
 801dd74:	000ffc08 	.word	0x000ffc08

0801dd78 <lfs_file_sync_>:
    if (file->flags & LFS_F_ERRED) {
 801dd78:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801dd7a:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 801dd7e:	d001      	beq.n	801dd84 <lfs_file_sync_+0xc>
        return 0;
 801dd80:	2000      	movs	r0, #0
}
 801dd82:	4770      	bx	lr
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 801dd84:	b530      	push	{r4, r5, lr}
 801dd86:	b087      	sub	sp, #28
 801dd88:	4605      	mov	r5, r0
 801dd8a:	460c      	mov	r4, r1
    int err = lfs_file_flush(lfs, file);
 801dd8c:	f7fe fcae 	bl	801c6ec <lfs_file_flush>
    if (err) {
 801dd90:	2800      	cmp	r0, #0
 801dd92:	d136      	bne.n	801de02 <lfs_file_sync_+0x8a>
    if ((file->flags & LFS_F_DIRTY) &&
 801dd94:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801dd96:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 801dd9a:	d036      	beq.n	801de0a <lfs_file_sync_+0x92>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801dd9c:	68a2      	ldr	r2, [r4, #8]
 801dd9e:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801dda2:	d036      	beq.n	801de12 <lfs_file_sync_+0x9a>
 801dda4:	68e2      	ldr	r2, [r4, #12]
 801dda6:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801ddaa:	d030      	beq.n	801de0e <lfs_file_sync_+0x96>
 801ddac:	4602      	mov	r2, r0
    if ((file->flags & LFS_F_DIRTY) &&
 801ddae:	f012 0f01 	tst.w	r2, #1
 801ddb2:	d12a      	bne.n	801de0a <lfs_file_sync_+0x92>
        if (!(file->flags & LFS_F_INLINE)) {
 801ddb4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801ddb8:	d02d      	beq.n	801de16 <lfs_file_sync_+0x9e>
        if (file->flags & LFS_F_INLINE) {
 801ddba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ddbc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801ddc0:	d033      	beq.n	801de2a <lfs_file_sync_+0xb2>
            buffer = file->cache.buffer;
 801ddc2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
            size = file->ctz.size;
 801ddc4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
            type = LFS_TYPE_INLINESTRUCT;
 801ddc6:	f240 2201 	movw	r2, #513	@ 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801ddca:	88a3      	ldrh	r3, [r4, #4]
 801ddcc:	029b      	lsls	r3, r3, #10
 801ddce:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
 801ddd2:	4302      	orrs	r2, r0
 801ddd4:	9202      	str	r2, [sp, #8]
 801ddd6:	9103      	str	r1, [sp, #12]
 801ddd8:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801ddda:	6891      	ldr	r1, [r2, #8]
 801dddc:	430b      	orrs	r3, r1
 801ddde:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 801dde2:	9304      	str	r3, [sp, #16]
 801dde4:	6853      	ldr	r3, [r2, #4]
 801dde6:	9305      	str	r3, [sp, #20]
 801dde8:	2302      	movs	r3, #2
 801ddea:	aa02      	add	r2, sp, #8
 801ddec:	f104 0108 	add.w	r1, r4, #8
 801ddf0:	4628      	mov	r0, r5
 801ddf2:	f7ff fee5 	bl	801dbc0 <lfs_dir_commit>
        if (err) {
 801ddf6:	bb20      	cbnz	r0, 801de42 <lfs_file_sync_+0xca>
        file->flags &= ~LFS_F_DIRTY;
 801ddf8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ddfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801ddfe:	6323      	str	r3, [r4, #48]	@ 0x30
 801de00:	e003      	b.n	801de0a <lfs_file_sync_+0x92>
        file->flags |= LFS_F_ERRED;
 801de02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801de04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801de08:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801de0a:	b007      	add	sp, #28
 801de0c:	bd30      	pop	{r4, r5, pc}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801de0e:	2201      	movs	r2, #1
 801de10:	e7cd      	b.n	801ddae <lfs_file_sync_+0x36>
 801de12:	2201      	movs	r2, #1
 801de14:	e7cb      	b.n	801ddae <lfs_file_sync_+0x36>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801de16:	2300      	movs	r3, #0
 801de18:	462a      	mov	r2, r5
 801de1a:	f105 0110 	add.w	r1, r5, #16
 801de1e:	4628      	mov	r0, r5
 801de20:	f7fd fc82 	bl	801b728 <lfs_bd_sync>
            if (err) {
 801de24:	2800      	cmp	r0, #0
 801de26:	d0c8      	beq.n	801ddba <lfs_file_sync_+0x42>
 801de28:	e7ef      	b.n	801de0a <lfs_file_sync_+0x92>
            ctz = file->ctz;
 801de2a:	466b      	mov	r3, sp
 801de2c:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 801de30:	e892 0003 	ldmia.w	r2, {r0, r1}
 801de34:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
 801de38:	2008      	movs	r0, #8
            buffer = &ctz;
 801de3a:	4619      	mov	r1, r3
            type = LFS_TYPE_CTZSTRUCT;
 801de3c:	f240 2202 	movw	r2, #514	@ 0x202
 801de40:	e7c3      	b.n	801ddca <lfs_file_sync_+0x52>
            file->flags |= LFS_F_ERRED;
 801de42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801de44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801de48:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801de4a:	e7de      	b.n	801de0a <lfs_file_sync_+0x92>

0801de4c <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
 801de4c:	b510      	push	{r4, lr}
 801de4e:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 801de50:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801de52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801de54:	b13b      	cbz	r3, 801de66 <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
 801de56:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801de58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801de5a:	b143      	cbz	r3, 801de6e <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
 801de5c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801de5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801de60:	b14b      	cbz	r3, 801de76 <lfs_deinit+0x2a>
}
 801de62:	2000      	movs	r0, #0
 801de64:	bd10      	pop	{r4, pc}
// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 801de66:	68c0      	ldr	r0, [r0, #12]
 801de68:	f7fc fb00 	bl	801a46c <vPortFree>
#else
    (void)p;
#endif
}
 801de6c:	e7f3      	b.n	801de56 <lfs_deinit+0xa>
    free(p);
 801de6e:	69e0      	ldr	r0, [r4, #28]
 801de70:	f7fc fafc 	bl	801a46c <vPortFree>
}
 801de74:	e7f2      	b.n	801de5c <lfs_deinit+0x10>
    free(p);
 801de76:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801de78:	f7fc faf8 	bl	801a46c <vPortFree>
}
 801de7c:	e7f1      	b.n	801de62 <lfs_deinit+0x16>
	...

0801de80 <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 801de80:	b538      	push	{r3, r4, r5, lr}
    lfs->cfg = cfg;
 801de82:	6681      	str	r1, [r0, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 801de84:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801de86:	66c3      	str	r3, [r0, #108]	@ 0x6c
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801de88:	69cb      	ldr	r3, [r1, #28]
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	f000 80b1 	beq.w	801dff2 <lfs_init+0x172>
 801de90:	4604      	mov	r4, r0
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801de92:	6a0a      	ldr	r2, [r1, #32]
 801de94:	2a00      	cmp	r2, #0
 801de96:	f000 80b3 	beq.w	801e000 <lfs_init+0x180>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801de9a:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 801de9c:	2800      	cmp	r0, #0
 801de9e:	f000 80b6 	beq.w	801e00e <lfs_init+0x18e>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801dea2:	fbb0 fcf3 	udiv	ip, r0, r3
 801dea6:	fb03 031c 	mls	r3, r3, ip, r0
 801deaa:	2b00      	cmp	r3, #0
 801deac:	f040 80b6 	bne.w	801e01c <lfs_init+0x19c>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801deb0:	fbb0 f3f2 	udiv	r3, r0, r2
 801deb4:	fb02 0313 	mls	r3, r2, r3, r0
 801deb8:	2b00      	cmp	r3, #0
 801deba:	f040 80b6 	bne.w	801e02a <lfs_init+0x1aa>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801debe:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801dec0:	fbb2 f3f0 	udiv	r3, r2, r0
 801dec4:	fb00 2313 	mls	r3, r0, r3, r2
 801dec8:	2b00      	cmp	r3, #0
 801deca:	f040 80b5 	bne.w	801e038 <lfs_init+0x1b8>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801dece:	2a7f      	cmp	r2, #127	@ 0x7f
 801ded0:	f240 80b9 	bls.w	801e046 <lfs_init+0x1c6>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801ded4:	f1a2 0c08 	sub.w	ip, r2, #8
 801ded8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dedc:	fbb3 f3fc 	udiv	r3, r3, ip
    return 32 - __builtin_clz(a-1);
 801dee0:	3b01      	subs	r3, #1
 801dee2:	fab3 f383 	clz	r3, r3
 801dee6:	f1c3 0320 	rsb	r3, r3, #32
 801deea:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 801deee:	f0c0 80b1 	bcc.w	801e054 <lfs_init+0x1d4>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801def2:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801def4:	2b00      	cmp	r3, #0
 801def6:	f000 80b4 	beq.w	801e062 <lfs_init+0x1e2>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801defa:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 801defc:	b11b      	cbz	r3, 801df06 <lfs_init+0x86>
 801defe:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 801df02:	f0c0 80b5 	bcc.w	801e070 <lfs_init+0x1f0>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801df06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801df0a:	d002      	beq.n	801df12 <lfs_init+0x92>
 801df0c:	429a      	cmp	r2, r3
 801df0e:	f0c0 80b6 	bcc.w	801e07e <lfs_init+0x1fe>
    if (lfs->cfg->read_buffer) {
 801df12:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801df14:	2b00      	cmp	r3, #0
 801df16:	f000 80b9 	beq.w	801e08c <lfs_init+0x20c>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 801df1a:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 801df1c:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801df1e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801df20:	2b00      	cmp	r3, #0
 801df22:	f000 80bf 	beq.w	801e0a4 <lfs_init+0x224>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 801df26:	61e3      	str	r3, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
 801df28:	4621      	mov	r1, r4
 801df2a:	4620      	mov	r0, r4
 801df2c:	f7fc fe5c 	bl	801abe8 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 801df30:	f104 0110 	add.w	r1, r4, #16
 801df34:	4620      	mov	r0, r4
 801df36:	f7fc fe57 	bl	801abe8 <lfs_cache_zero>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801df3a:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801df3c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801df3e:	2800      	cmp	r0, #0
 801df40:	f000 80b8 	beq.w	801e0b4 <lfs_init+0x234>
    if (lfs->cfg->lookahead_buffer) {
 801df44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801df46:	2b00      	cmp	r3, #0
 801df48:	f000 80bb 	beq.w	801e0c2 <lfs_init+0x242>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 801df4c:	6663      	str	r3, [r4, #100]	@ 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801df4e:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801df50:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 801df52:	2bff      	cmp	r3, #255	@ 0xff
 801df54:	f200 80bc 	bhi.w	801e0d0 <lfs_init+0x250>
    lfs->name_max = lfs->cfg->name_max;
 801df58:	6723      	str	r3, [r4, #112]	@ 0x70
    if (!lfs->name_max) {
 801df5a:	b90b      	cbnz	r3, 801df60 <lfs_init+0xe0>
        lfs->name_max = LFS_NAME_MAX;
 801df5c:	23ff      	movs	r3, #255	@ 0xff
 801df5e:	6723      	str	r3, [r4, #112]	@ 0x70
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801df60:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 801df62:	2b00      	cmp	r3, #0
 801df64:	f2c0 80bb 	blt.w	801e0de <lfs_init+0x25e>
    lfs->file_max = lfs->cfg->file_max;
 801df68:	6763      	str	r3, [r4, #116]	@ 0x74
    if (!lfs->file_max) {
 801df6a:	b913      	cbnz	r3, 801df72 <lfs_init+0xf2>
        lfs->file_max = LFS_FILE_MAX;
 801df6c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801df70:	6763      	str	r3, [r4, #116]	@ 0x74
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801df72:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801df74:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 801df78:	428b      	cmp	r3, r1
 801df7a:	f200 80b7 	bhi.w	801e0ec <lfs_init+0x26c>
    lfs->attr_max = lfs->cfg->attr_max;
 801df7e:	67a3      	str	r3, [r4, #120]	@ 0x78
    if (!lfs->attr_max) {
 801df80:	b913      	cbnz	r3, 801df88 <lfs_init+0x108>
        lfs->attr_max = LFS_ATTR_MAX;
 801df82:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801df86:	67a3      	str	r3, [r4, #120]	@ 0x78
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801df88:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 801df8a:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 801df8c:	4288      	cmp	r0, r1
 801df8e:	f200 80b4 	bhi.w	801e0fa <lfs_init+0x27a>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801df92:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 801df94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801df98:	d003      	beq.n	801dfa2 <lfs_init+0x122>
 801df9a:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 801df9c:	42ab      	cmp	r3, r5
 801df9e:	f200 80b3 	bhi.w	801e108 <lfs_init+0x288>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801dfa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801dfa6:	d003      	beq.n	801dfb0 <lfs_init+0x130>
 801dfa8:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 801dfaa:	42ab      	cmp	r3, r5
 801dfac:	f200 80b3 	bhi.w	801e116 <lfs_init+0x296>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801dfb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801dfb4:	d006      	beq.n	801dfc4 <lfs_init+0x144>
 801dfb6:	2800      	cmp	r0, #0
 801dfb8:	f000 80b4 	beq.w	801e124 <lfs_init+0x2a4>
 801dfbc:	08c1      	lsrs	r1, r0, #3
 801dfbe:	428b      	cmp	r3, r1
 801dfc0:	f200 80b2 	bhi.w	801e128 <lfs_init+0x2a8>
    lfs->inline_max = lfs->cfg->inline_max;
 801dfc4:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 801dfc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801dfca:	f000 80b4 	beq.w	801e136 <lfs_init+0x2b6>
    } else if (lfs->inline_max == 0) {
 801dfce:	2b00      	cmp	r3, #0
 801dfd0:	f040 80b3 	bne.w	801e13a <lfs_init+0x2ba>
                lfs->cfg->cache_size,
 801dfd4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 801dfd6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
                    ((lfs->cfg->metadata_max)
 801dfd8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 801dfda:	2b00      	cmp	r3, #0
 801dfdc:	f000 80be 	beq.w	801e15c <lfs_init+0x2dc>
 801dfe0:	08db      	lsrs	r3, r3, #3
    return (a < b) ? a : b;
 801dfe2:	4283      	cmp	r3, r0
 801dfe4:	bf28      	it	cs
 801dfe6:	4603      	movcs	r3, r0
 801dfe8:	428b      	cmp	r3, r1
 801dfea:	bf28      	it	cs
 801dfec:	460b      	movcs	r3, r1
 801dfee:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801dff0:	e0a3      	b.n	801e13a <lfs_init+0x2ba>
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801dff2:	4b5c      	ldr	r3, [pc, #368]	@ (801e164 <lfs_init+0x2e4>)
 801dff4:	4a5c      	ldr	r2, [pc, #368]	@ (801e168 <lfs_init+0x2e8>)
 801dff6:	f241 0152 	movw	r1, #4178	@ 0x1052
 801dffa:	485c      	ldr	r0, [pc, #368]	@ (801e16c <lfs_init+0x2ec>)
 801dffc:	f00b fbee 	bl	80297dc <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801e000:	4b5b      	ldr	r3, [pc, #364]	@ (801e170 <lfs_init+0x2f0>)
 801e002:	4a59      	ldr	r2, [pc, #356]	@ (801e168 <lfs_init+0x2e8>)
 801e004:	f241 0153 	movw	r1, #4179	@ 0x1053
 801e008:	4858      	ldr	r0, [pc, #352]	@ (801e16c <lfs_init+0x2ec>)
 801e00a:	f00b fbe7 	bl	80297dc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801e00e:	4b59      	ldr	r3, [pc, #356]	@ (801e174 <lfs_init+0x2f4>)
 801e010:	4a55      	ldr	r2, [pc, #340]	@ (801e168 <lfs_init+0x2e8>)
 801e012:	f241 0154 	movw	r1, #4180	@ 0x1054
 801e016:	4855      	ldr	r0, [pc, #340]	@ (801e16c <lfs_init+0x2ec>)
 801e018:	f00b fbe0 	bl	80297dc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801e01c:	4b56      	ldr	r3, [pc, #344]	@ (801e178 <lfs_init+0x2f8>)
 801e01e:	4a52      	ldr	r2, [pc, #328]	@ (801e168 <lfs_init+0x2e8>)
 801e020:	f241 0158 	movw	r1, #4184	@ 0x1058
 801e024:	4851      	ldr	r0, [pc, #324]	@ (801e16c <lfs_init+0x2ec>)
 801e026:	f00b fbd9 	bl	80297dc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801e02a:	4b54      	ldr	r3, [pc, #336]	@ (801e17c <lfs_init+0x2fc>)
 801e02c:	4a4e      	ldr	r2, [pc, #312]	@ (801e168 <lfs_init+0x2e8>)
 801e02e:	f241 0159 	movw	r1, #4185	@ 0x1059
 801e032:	484e      	ldr	r0, [pc, #312]	@ (801e16c <lfs_init+0x2ec>)
 801e034:	f00b fbd2 	bl	80297dc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801e038:	4b51      	ldr	r3, [pc, #324]	@ (801e180 <lfs_init+0x300>)
 801e03a:	4a4b      	ldr	r2, [pc, #300]	@ (801e168 <lfs_init+0x2e8>)
 801e03c:	f241 015a 	movw	r1, #4186	@ 0x105a
 801e040:	484a      	ldr	r0, [pc, #296]	@ (801e16c <lfs_init+0x2ec>)
 801e042:	f00b fbcb 	bl	80297dc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801e046:	4b4f      	ldr	r3, [pc, #316]	@ (801e184 <lfs_init+0x304>)
 801e048:	4a47      	ldr	r2, [pc, #284]	@ (801e168 <lfs_init+0x2e8>)
 801e04a:	f241 015d 	movw	r1, #4189	@ 0x105d
 801e04e:	4847      	ldr	r0, [pc, #284]	@ (801e16c <lfs_init+0x2ec>)
 801e050:	f00b fbc4 	bl	80297dc <__assert_func>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801e054:	4b4c      	ldr	r3, [pc, #304]	@ (801e188 <lfs_init+0x308>)
 801e056:	4a44      	ldr	r2, [pc, #272]	@ (801e168 <lfs_init+0x2e8>)
 801e058:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 801e05c:	4843      	ldr	r0, [pc, #268]	@ (801e16c <lfs_init+0x2ec>)
 801e05e:	f00b fbbd 	bl	80297dc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801e062:	4b4a      	ldr	r3, [pc, #296]	@ (801e18c <lfs_init+0x30c>)
 801e064:	4a40      	ldr	r2, [pc, #256]	@ (801e168 <lfs_init+0x2e8>)
 801e066:	f241 0169 	movw	r1, #4201	@ 0x1069
 801e06a:	4840      	ldr	r0, [pc, #256]	@ (801e16c <lfs_init+0x2ec>)
 801e06c:	f00b fbb6 	bl	80297dc <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801e070:	4b47      	ldr	r3, [pc, #284]	@ (801e190 <lfs_init+0x310>)
 801e072:	4a3d      	ldr	r2, [pc, #244]	@ (801e168 <lfs_init+0x2e8>)
 801e074:	f241 016f 	movw	r1, #4207	@ 0x106f
 801e078:	483c      	ldr	r0, [pc, #240]	@ (801e16c <lfs_init+0x2ec>)
 801e07a:	f00b fbaf 	bl	80297dc <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801e07e:	4b45      	ldr	r3, [pc, #276]	@ (801e194 <lfs_init+0x314>)
 801e080:	4a39      	ldr	r2, [pc, #228]	@ (801e168 <lfs_init+0x2e8>)
 801e082:	f241 0171 	movw	r1, #4209	@ 0x1071
 801e086:	4839      	ldr	r0, [pc, #228]	@ (801e16c <lfs_init+0x2ec>)
 801e088:	f00b fba8 	bl	80297dc <__assert_func>
    return malloc(size);
 801e08c:	f7fc f96c 	bl	801a368 <pvPortMalloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801e090:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 801e092:	2800      	cmp	r0, #0
 801e094:	f47f af42 	bne.w	801df1c <lfs_init+0x9c>
    lfs_deinit(lfs);
 801e098:	4620      	mov	r0, r4
 801e09a:	f7ff fed7 	bl	801de4c <lfs_deinit>
    return err;
 801e09e:	f06f 000b 	mvn.w	r0, #11
 801e0a2:	e05a      	b.n	801e15a <lfs_init+0x2da>
 801e0a4:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 801e0a6:	f7fc f95f 	bl	801a368 <pvPortMalloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801e0aa:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 801e0ac:	2800      	cmp	r0, #0
 801e0ae:	f47f af3b 	bne.w	801df28 <lfs_init+0xa8>
 801e0b2:	e7f1      	b.n	801e098 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801e0b4:	4b38      	ldr	r3, [pc, #224]	@ (801e198 <lfs_init+0x318>)
 801e0b6:	4a2c      	ldr	r2, [pc, #176]	@ (801e168 <lfs_init+0x2e8>)
 801e0b8:	f241 0190 	movw	r1, #4240	@ 0x1090
 801e0bc:	482b      	ldr	r0, [pc, #172]	@ (801e16c <lfs_init+0x2ec>)
 801e0be:	f00b fb8d 	bl	80297dc <__assert_func>
 801e0c2:	f7fc f951 	bl	801a368 <pvPortMalloc>
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 801e0c6:	6660      	str	r0, [r4, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 801e0c8:	2800      	cmp	r0, #0
 801e0ca:	f47f af40 	bne.w	801df4e <lfs_init+0xce>
 801e0ce:	e7e3      	b.n	801e098 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801e0d0:	4b32      	ldr	r3, [pc, #200]	@ (801e19c <lfs_init+0x31c>)
 801e0d2:	4a25      	ldr	r2, [pc, #148]	@ (801e168 <lfs_init+0x2e8>)
 801e0d4:	f241 019c 	movw	r1, #4252	@ 0x109c
 801e0d8:	4824      	ldr	r0, [pc, #144]	@ (801e16c <lfs_init+0x2ec>)
 801e0da:	f00b fb7f 	bl	80297dc <__assert_func>
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801e0de:	4b30      	ldr	r3, [pc, #192]	@ (801e1a0 <lfs_init+0x320>)
 801e0e0:	4a21      	ldr	r2, [pc, #132]	@ (801e168 <lfs_init+0x2e8>)
 801e0e2:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 801e0e6:	4821      	ldr	r0, [pc, #132]	@ (801e16c <lfs_init+0x2ec>)
 801e0e8:	f00b fb78 	bl	80297dc <__assert_func>
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801e0ec:	4b2d      	ldr	r3, [pc, #180]	@ (801e1a4 <lfs_init+0x324>)
 801e0ee:	4a1e      	ldr	r2, [pc, #120]	@ (801e168 <lfs_init+0x2e8>)
 801e0f0:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 801e0f4:	481d      	ldr	r0, [pc, #116]	@ (801e16c <lfs_init+0x2ec>)
 801e0f6:	f00b fb71 	bl	80297dc <__assert_func>
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801e0fa:	4b2b      	ldr	r3, [pc, #172]	@ (801e1a8 <lfs_init+0x328>)
 801e0fc:	4a1a      	ldr	r2, [pc, #104]	@ (801e168 <lfs_init+0x2e8>)
 801e0fe:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 801e102:	481a      	ldr	r0, [pc, #104]	@ (801e16c <lfs_init+0x2ec>)
 801e104:	f00b fb6a 	bl	80297dc <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e108:	4b28      	ldr	r3, [pc, #160]	@ (801e1ac <lfs_init+0x32c>)
 801e10a:	4a17      	ldr	r2, [pc, #92]	@ (801e168 <lfs_init+0x2e8>)
 801e10c:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 801e110:	4816      	ldr	r0, [pc, #88]	@ (801e16c <lfs_init+0x2ec>)
 801e112:	f00b fb63 	bl	80297dc <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e116:	4b26      	ldr	r3, [pc, #152]	@ (801e1b0 <lfs_init+0x330>)
 801e118:	4a13      	ldr	r2, [pc, #76]	@ (801e168 <lfs_init+0x2e8>)
 801e11a:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 801e11e:	4813      	ldr	r0, [pc, #76]	@ (801e16c <lfs_init+0x2ec>)
 801e120:	f00b fb5c 	bl	80297dc <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e124:	08c9      	lsrs	r1, r1, #3
 801e126:	e74a      	b.n	801dfbe <lfs_init+0x13e>
 801e128:	4b22      	ldr	r3, [pc, #136]	@ (801e1b4 <lfs_init+0x334>)
 801e12a:	4a0f      	ldr	r2, [pc, #60]	@ (801e168 <lfs_init+0x2e8>)
 801e12c:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 801e130:	480e      	ldr	r0, [pc, #56]	@ (801e16c <lfs_init+0x2ec>)
 801e132:	f00b fb53 	bl	80297dc <__assert_func>
        lfs->inline_max = 0;
 801e136:	2300      	movs	r3, #0
 801e138:	67e3      	str	r3, [r4, #124]	@ 0x7c
    lfs->root[0] = LFS_BLOCK_NULL;
 801e13a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e13e:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801e140:	6263      	str	r3, [r4, #36]	@ 0x24
    lfs->mlist = NULL;
 801e142:	2000      	movs	r0, #0
 801e144:	62a0      	str	r0, [r4, #40]	@ 0x28
    lfs->seed = 0;
 801e146:	62e0      	str	r0, [r4, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 801e148:	63e0      	str	r0, [r4, #60]	@ 0x3c
 801e14a:	6420      	str	r0, [r4, #64]	@ 0x40
 801e14c:	6460      	str	r0, [r4, #68]	@ 0x44
    lfs->gstate = (lfs_gstate_t){0};
 801e14e:	6320      	str	r0, [r4, #48]	@ 0x30
 801e150:	6360      	str	r0, [r4, #52]	@ 0x34
 801e152:	63a0      	str	r0, [r4, #56]	@ 0x38
    lfs->gdelta = (lfs_gstate_t){0};
 801e154:	64a0      	str	r0, [r4, #72]	@ 0x48
 801e156:	64e0      	str	r0, [r4, #76]	@ 0x4c
 801e158:	6520      	str	r0, [r4, #80]	@ 0x50
}
 801e15a:	bd38      	pop	{r3, r4, r5, pc}
                        : lfs->cfg->block_size)/8));
 801e15c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 801e15e:	08db      	lsrs	r3, r3, #3
 801e160:	e73f      	b.n	801dfe2 <lfs_init+0x162>
 801e162:	bf00      	nop
 801e164:	08038a58 	.word	0x08038a58
 801e168:	08039238 	.word	0x08039238
 801e16c:	080384b8 	.word	0x080384b8
 801e170:	08038a74 	.word	0x08038a74
 801e174:	08038a90 	.word	0x08038a90
 801e178:	08038aac 	.word	0x08038aac
 801e17c:	08038adc 	.word	0x08038adc
 801e180:	08038b0c 	.word	0x08038b0c
 801e184:	08038b40 	.word	0x08038b40
 801e188:	08038b5c 	.word	0x08038b5c
 801e18c:	08038ba8 	.word	0x08038ba8
 801e190:	08038bc4 	.word	0x08038bc4
 801e194:	08038c18 	.word	0x08038c18
 801e198:	08038c78 	.word	0x08038c78
 801e19c:	08038c98 	.word	0x08038c98
 801e1a0:	08038cb4 	.word	0x08038cb4
 801e1a4:	08038cd8 	.word	0x08038cd8
 801e1a8:	08038cf4 	.word	0x08038cf4
 801e1ac:	08038d24 	.word	0x08038d24
 801e1b0:	08038d7c 	.word	0x08038d7c
 801e1b4:	08038dcc 	.word	0x08038dcc

0801e1b8 <lfs_format_>:
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 801e1b8:	b570      	push	{r4, r5, r6, lr}
 801e1ba:	b096      	sub	sp, #88	@ 0x58
 801e1bc:	4604      	mov	r4, r0
 801e1be:	460d      	mov	r5, r1
        err = lfs_init(lfs, cfg);
 801e1c0:	f7ff fe5e 	bl	801de80 <lfs_init>
        if (err) {
 801e1c4:	4606      	mov	r6, r0
 801e1c6:	b9f0      	cbnz	r0, 801e206 <lfs_format_+0x4e>
        LFS_ASSERT(cfg->block_count != 0);
 801e1c8:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801e1ca:	b1fb      	cbz	r3, 801e20c <lfs_format_+0x54>
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801e1cc:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e1ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e1d0:	2100      	movs	r1, #0
 801e1d2:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801e1d4:	f00e f854 	bl	802c280 <memset>
        lfs->lookahead.start = 0;
 801e1d8:	2200      	movs	r2, #0
 801e1da:	6562      	str	r2, [r4, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 801e1dc:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e1de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e1e0:	00db      	lsls	r3, r3, #3
 801e1e2:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
    return (a < b) ? a : b;
 801e1e4:	428b      	cmp	r3, r1
 801e1e6:	bf28      	it	cs
 801e1e8:	460b      	movcs	r3, r1
 801e1ea:	65a3      	str	r3, [r4, #88]	@ 0x58
        lfs->lookahead.next = 0;
 801e1ec:	65e2      	str	r2, [r4, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 801e1ee:	4620      	mov	r0, r4
 801e1f0:	f7fc fbda 	bl	801a9a8 <lfs_alloc_ckpoint>
        err = lfs_dir_alloc(lfs, &root);
 801e1f4:	a906      	add	r1, sp, #24
 801e1f6:	4620      	mov	r0, r4
 801e1f8:	f7fe f820 	bl	801c23c <lfs_dir_alloc>
        if (err) {
 801e1fc:	4606      	mov	r6, r0
 801e1fe:	b160      	cbz	r0, 801e21a <lfs_format_+0x62>
    lfs_deinit(lfs);
 801e200:	4620      	mov	r0, r4
 801e202:	f7ff fe23 	bl	801de4c <lfs_deinit>
}
 801e206:	4630      	mov	r0, r6
 801e208:	b016      	add	sp, #88	@ 0x58
 801e20a:	bd70      	pop	{r4, r5, r6, pc}
        LFS_ASSERT(cfg->block_count != 0);
 801e20c:	4b20      	ldr	r3, [pc, #128]	@ (801e290 <lfs_format_+0xd8>)
 801e20e:	4a21      	ldr	r2, [pc, #132]	@ (801e294 <lfs_format_+0xdc>)
 801e210:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 801e214:	4820      	ldr	r0, [pc, #128]	@ (801e298 <lfs_format_+0xe0>)
 801e216:	f00b fae1 	bl	80297dc <__assert_func>
            .version     = lfs_fs_disk_version(lfs),
 801e21a:	4620      	mov	r0, r4
 801e21c:	f7fc fbb6 	bl	801a98c <lfs_fs_disk_version>
        lfs_superblock_t superblock = {
 801e220:	9000      	str	r0, [sp, #0]
            .block_size  = lfs->cfg->block_size,
 801e222:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 801e226:	9301      	str	r3, [sp, #4]
            .block_count = lfs->block_count,
 801e228:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 801e22a:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
 801e22c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
        lfs_superblock_t superblock = {
 801e22e:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
 801e230:	6f63      	ldr	r3, [r4, #116]	@ 0x74
        lfs_superblock_t superblock = {
 801e232:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
 801e234:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        lfs_superblock_t superblock = {
 801e236:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801e238:	4b18      	ldr	r3, [pc, #96]	@ (801e29c <lfs_format_+0xe4>)
 801e23a:	930e      	str	r3, [sp, #56]	@ 0x38
 801e23c:	2300      	movs	r3, #0
 801e23e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e240:	4b17      	ldr	r3, [pc, #92]	@ (801e2a0 <lfs_format_+0xe8>)
 801e242:	9310      	str	r3, [sp, #64]	@ 0x40
 801e244:	4b17      	ldr	r3, [pc, #92]	@ (801e2a4 <lfs_format_+0xec>)
 801e246:	9311      	str	r3, [sp, #68]	@ 0x44
 801e248:	4b17      	ldr	r3, [pc, #92]	@ (801e2a8 <lfs_format_+0xf0>)
 801e24a:	9312      	str	r3, [sp, #72]	@ 0x48
 801e24c:	f8cd d04c 	str.w	sp, [sp, #76]	@ 0x4c
 801e250:	2303      	movs	r3, #3
 801e252:	aa0e      	add	r2, sp, #56	@ 0x38
 801e254:	a906      	add	r1, sp, #24
 801e256:	4620      	mov	r0, r4
 801e258:	f7ff fcb2 	bl	801dbc0 <lfs_dir_commit>
        if (err) {
 801e25c:	4606      	mov	r6, r0
 801e25e:	2800      	cmp	r0, #0
 801e260:	d1ce      	bne.n	801e200 <lfs_format_+0x48>
        root.erased = false;
 801e262:	2200      	movs	r2, #0
 801e264:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 801e268:	4613      	mov	r3, r2
 801e26a:	a906      	add	r1, sp, #24
 801e26c:	4620      	mov	r0, r4
 801e26e:	f7ff fca7 	bl	801dbc0 <lfs_dir_commit>
        if (err) {
 801e272:	4606      	mov	r6, r0
 801e274:	2800      	cmp	r0, #0
 801e276:	d1c3      	bne.n	801e200 <lfs_format_+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 801e278:	2300      	movs	r3, #0
 801e27a:	9314      	str	r3, [sp, #80]	@ 0x50
 801e27c:	2301      	movs	r3, #1
 801e27e:	9315      	str	r3, [sp, #84]	@ 0x54
 801e280:	aa14      	add	r2, sp, #80	@ 0x50
 801e282:	a906      	add	r1, sp, #24
 801e284:	4620      	mov	r0, r4
 801e286:	f7fd fe6b 	bl	801bf60 <lfs_dir_fetch>
 801e28a:	4606      	mov	r6, r0
        if (err) {
 801e28c:	e7b8      	b.n	801e200 <lfs_format_+0x48>
 801e28e:	bf00      	nop
 801e290:	08038e5c 	.word	0x08038e5c
 801e294:	08039244 	.word	0x08039244
 801e298:	080384b8 	.word	0x080384b8
 801e29c:	40100000 	.word	0x40100000
 801e2a0:	0ff00008 	.word	0x0ff00008
 801e2a4:	08038e74 	.word	0x08038e74
 801e2a8:	20100018 	.word	0x20100018

0801e2ac <lfs_unmount_>:
static int lfs_unmount_(lfs_t *lfs) {
 801e2ac:	b508      	push	{r3, lr}
    return lfs_deinit(lfs);
 801e2ae:	f7ff fdcd 	bl	801de4c <lfs_deinit>
}
 801e2b2:	bd08      	pop	{r3, pc}

0801e2b4 <lfs_mount_>:
static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 801e2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2b8:	b09b      	sub	sp, #108	@ 0x6c
 801e2ba:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 801e2bc:	f7ff fde0 	bl	801de80 <lfs_init>
    if (err) {
 801e2c0:	9005      	str	r0, [sp, #20]
 801e2c2:	b9d8      	cbnz	r0, 801e2fc <lfs_mount_+0x48>
    lfs_mdir_t dir = {.tail = {0, 1}};
 801e2c4:	2220      	movs	r2, #32
 801e2c6:	2100      	movs	r1, #0
 801e2c8:	a80f      	add	r0, sp, #60	@ 0x3c
 801e2ca:	f00d ffd9 	bl	802c280 <memset>
 801e2ce:	2501      	movs	r5, #1
 801e2d0:	9516      	str	r5, [sp, #88]	@ 0x58
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801e2d2:	4aa1      	ldr	r2, [pc, #644]	@ (801e558 <lfs_mount_+0x2a4>)
 801e2d4:	ab0d      	add	r3, sp, #52	@ 0x34
 801e2d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e2da:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801e2de:	462e      	mov	r6, r5
    while (!lfs_pair_isnull(dir.tail)) {
 801e2e0:	e073      	b.n	801e3ca <lfs_mount_+0x116>
            LFS_WARN("Cycle detected in tail list");
 801e2e2:	4b9e      	ldr	r3, [pc, #632]	@ (801e55c <lfs_mount_+0x2a8>)
 801e2e4:	f241 123d 	movw	r2, #4413	@ 0x113d
 801e2e8:	499d      	ldr	r1, [pc, #628]	@ (801e560 <lfs_mount_+0x2ac>)
 801e2ea:	489e      	ldr	r0, [pc, #632]	@ (801e564 <lfs_mount_+0x2b0>)
 801e2ec:	f00b faaa 	bl	8029844 <printf>
            err = LFS_ERR_CORRUPT;
 801e2f0:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801e2f4:	9305      	str	r3, [sp, #20]
    lfs_unmount_(lfs);
 801e2f6:	4620      	mov	r0, r4
 801e2f8:	f7ff ffd8 	bl	801e2ac <lfs_unmount_>
}
 801e2fc:	9805      	ldr	r0, [sp, #20]
 801e2fe:	b01b      	add	sp, #108	@ 0x6c
 801e300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            tortoise[0] = dir.tail[0];
 801e304:	970d      	str	r7, [sp, #52]	@ 0x34
            tortoise[1] = dir.tail[1];
 801e306:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e308:	930e      	str	r3, [sp, #56]	@ 0x38
            tortoise_period *= 2;
 801e30a:	0076      	lsls	r6, r6, #1
            tortoise_i = 0;
 801e30c:	2500      	movs	r5, #0
 801e30e:	e075      	b.n	801e3fc <lfs_mount_+0x148>
                LFS_ERROR("Invalid version "
 801e310:	4620      	mov	r0, r4
 801e312:	f7fc fb44 	bl	801a99e <lfs_fs_disk_version_minor>
 801e316:	4b91      	ldr	r3, [pc, #580]	@ (801e55c <lfs_mount_+0x2a8>)
 801e318:	9303      	str	r3, [sp, #12]
 801e31a:	9002      	str	r0, [sp, #8]
 801e31c:	f8cd 9004 	str.w	r9, [sp, #4]
 801e320:	b2bf      	uxth	r7, r7
 801e322:	9700      	str	r7, [sp, #0]
 801e324:	4643      	mov	r3, r8
 801e326:	f241 126b 	movw	r2, #4459	@ 0x116b
 801e32a:	498d      	ldr	r1, [pc, #564]	@ (801e560 <lfs_mount_+0x2ac>)
 801e32c:	488e      	ldr	r0, [pc, #568]	@ (801e568 <lfs_mount_+0x2b4>)
 801e32e:	f00b fa89 	bl	8029844 <printf>
                err = LFS_ERR_INVAL;
 801e332:	f06f 0315 	mvn.w	r3, #21
 801e336:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801e338:	e7dd      	b.n	801e2f6 <lfs_mount_+0x42>
                LFS_DEBUG("Found older minor version "
 801e33a:	4b88      	ldr	r3, [pc, #544]	@ (801e55c <lfs_mount_+0x2a8>)
 801e33c:	9303      	str	r3, [sp, #12]
 801e33e:	9002      	str	r0, [sp, #8]
 801e340:	f8cd 9004 	str.w	r9, [sp, #4]
 801e344:	b2bf      	uxth	r7, r7
 801e346:	9700      	str	r7, [sp, #0]
 801e348:	4643      	mov	r3, r8
 801e34a:	f241 127a 	movw	r2, #4474	@ 0x117a
 801e34e:	4984      	ldr	r1, [pc, #528]	@ (801e560 <lfs_mount_+0x2ac>)
 801e350:	4886      	ldr	r0, [pc, #536]	@ (801e56c <lfs_mount_+0x2b8>)
 801e352:	f00b fa77 	bl	8029844 <printf>
                needssuperblock = true;
 801e356:	2301      	movs	r3, #1
 801e358:	9304      	str	r3, [sp, #16]
 801e35a:	e08f      	b.n	801e47c <lfs_mount_+0x1c8>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 801e35c:	497f      	ldr	r1, [pc, #508]	@ (801e55c <lfs_mount_+0x2a8>)
 801e35e:	9101      	str	r1, [sp, #4]
 801e360:	9200      	str	r2, [sp, #0]
 801e362:	f241 1289 	movw	r2, #4489	@ 0x1189
 801e366:	497e      	ldr	r1, [pc, #504]	@ (801e560 <lfs_mount_+0x2ac>)
 801e368:	4881      	ldr	r0, [pc, #516]	@ (801e570 <lfs_mount_+0x2bc>)
 801e36a:	f00b fa6b 	bl	8029844 <printf>
                    err = LFS_ERR_INVAL;
 801e36e:	f06f 0315 	mvn.w	r3, #21
 801e372:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801e374:	e7bf      	b.n	801e2f6 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 801e376:	4979      	ldr	r1, [pc, #484]	@ (801e55c <lfs_mount_+0x2a8>)
 801e378:	9101      	str	r1, [sp, #4]
 801e37a:	9200      	str	r2, [sp, #0]
 801e37c:	f241 1294 	movw	r2, #4500	@ 0x1194
 801e380:	4977      	ldr	r1, [pc, #476]	@ (801e560 <lfs_mount_+0x2ac>)
 801e382:	487c      	ldr	r0, [pc, #496]	@ (801e574 <lfs_mount_+0x2c0>)
 801e384:	f00b fa5e 	bl	8029844 <printf>
                    err = LFS_ERR_INVAL;
 801e388:	f06f 0315 	mvn.w	r3, #21
 801e38c:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801e38e:	e7b2      	b.n	801e2f6 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 801e390:	4972      	ldr	r1, [pc, #456]	@ (801e55c <lfs_mount_+0x2a8>)
 801e392:	9101      	str	r1, [sp, #4]
 801e394:	9200      	str	r2, [sp, #0]
 801e396:	f241 129f 	movw	r2, #4511	@ 0x119f
 801e39a:	4971      	ldr	r1, [pc, #452]	@ (801e560 <lfs_mount_+0x2ac>)
 801e39c:	4876      	ldr	r0, [pc, #472]	@ (801e578 <lfs_mount_+0x2c4>)
 801e39e:	f00b fa51 	bl	8029844 <printf>
                    err = LFS_ERR_INVAL;
 801e3a2:	f06f 0315 	mvn.w	r3, #21
 801e3a6:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801e3a8:	e7a5      	b.n	801e2f6 <lfs_mount_+0x42>
            lfs->block_count = superblock.block_count;
 801e3aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e3ac:	66e3      	str	r3, [r4, #108]	@ 0x6c
            if (superblock.block_size != lfs->cfg->block_size) {
 801e3ae:	9b08      	ldr	r3, [sp, #32]
 801e3b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801e3b2:	4293      	cmp	r3, r2
 801e3b4:	f040 8096 	bne.w	801e4e4 <lfs_mount_+0x230>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801e3b8:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801e3bc:	a90f      	add	r1, sp, #60	@ 0x3c
 801e3be:	4620      	mov	r0, r4
 801e3c0:	f7fc fdee 	bl	801afa0 <lfs_dir_getgstate>
        if (err) {
 801e3c4:	2800      	cmp	r0, #0
 801e3c6:	f040 809e 	bne.w	801e506 <lfs_mount_+0x252>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e3ca:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801e3cc:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801e3d0:	f000 809d 	beq.w	801e50e <lfs_mount_+0x25a>
 801e3d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e3d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e3da:	f000 8096 	beq.w	801e50a <lfs_mount_+0x256>
 801e3de:	9b05      	ldr	r3, [sp, #20]
    while (!lfs_pair_isnull(dir.tail)) {
 801e3e0:	f013 0301 	ands.w	r3, r3, #1
 801e3e4:	f040 8095 	bne.w	801e512 <lfs_mount_+0x25e>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801e3e8:	a90d      	add	r1, sp, #52	@ 0x34
 801e3ea:	a815      	add	r0, sp, #84	@ 0x54
 801e3ec:	f7fc fa60 	bl	801a8b0 <lfs_pair_issync>
 801e3f0:	9004      	str	r0, [sp, #16]
 801e3f2:	2800      	cmp	r0, #0
 801e3f4:	f47f af75 	bne.w	801e2e2 <lfs_mount_+0x2e>
        if (tortoise_i == tortoise_period) {
 801e3f8:	42b5      	cmp	r5, r6
 801e3fa:	d083      	beq.n	801e304 <lfs_mount_+0x50>
        tortoise_i += 1;
 801e3fc:	3501      	adds	r5, #1
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 801e3fe:	9417      	str	r4, [sp, #92]	@ 0x5c
 801e400:	4b5e      	ldr	r3, [pc, #376]	@ (801e57c <lfs_mount_+0x2c8>)
 801e402:	9318      	str	r3, [sp, #96]	@ 0x60
 801e404:	2308      	movs	r3, #8
 801e406:	9319      	str	r3, [sp, #100]	@ 0x64
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 801e408:	ab17      	add	r3, sp, #92	@ 0x5c
 801e40a:	9303      	str	r3, [sp, #12]
 801e40c:	4b5c      	ldr	r3, [pc, #368]	@ (801e580 <lfs_mount_+0x2cc>)
 801e40e:	9302      	str	r3, [sp, #8]
 801e410:	2300      	movs	r3, #0
 801e412:	9301      	str	r3, [sp, #4]
 801e414:	4b5b      	ldr	r3, [pc, #364]	@ (801e584 <lfs_mount_+0x2d0>)
 801e416:	9300      	str	r3, [sp, #0]
 801e418:	4b5b      	ldr	r3, [pc, #364]	@ (801e588 <lfs_mount_+0x2d4>)
 801e41a:	aa15      	add	r2, sp, #84	@ 0x54
 801e41c:	a90f      	add	r1, sp, #60	@ 0x3c
 801e41e:	4620      	mov	r0, r4
 801e420:	f7fd fabe 	bl	801b9a0 <lfs_dir_fetchmatch>
        if (tag < 0) {
 801e424:	2800      	cmp	r0, #0
 801e426:	db6c      	blt.n	801e502 <lfs_mount_+0x24e>
        if (tag && !lfs_tag_isdelete(tag)) {
 801e428:	2800      	cmp	r0, #0
 801e42a:	d0c5      	beq.n	801e3b8 <lfs_mount_+0x104>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801e42c:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 801e430:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801e434:	d0c0      	beq.n	801e3b8 <lfs_mount_+0x104>
            lfs->root[0] = dir.pair[0];
 801e436:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e438:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 801e43a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e43c:	6263      	str	r3, [r4, #36]	@ 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 801e43e:	ab07      	add	r3, sp, #28
 801e440:	9300      	str	r3, [sp, #0]
 801e442:	4b52      	ldr	r3, [pc, #328]	@ (801e58c <lfs_mount_+0x2d8>)
 801e444:	4a50      	ldr	r2, [pc, #320]	@ (801e588 <lfs_mount_+0x2d4>)
 801e446:	a90f      	add	r1, sp, #60	@ 0x3c
 801e448:	4620      	mov	r0, r4
 801e44a:	f7fc fd9b 	bl	801af84 <lfs_dir_get>
            if (tag < 0) {
 801e44e:	2800      	cmp	r0, #0
 801e450:	db55      	blt.n	801e4fe <lfs_mount_+0x24a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 801e452:	9f07      	ldr	r7, [sp, #28]
 801e454:	ea4f 4817 	mov.w	r8, r7, lsr #16
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 801e458:	fa1f fa87 	uxth.w	sl, r7
            if (major_version != lfs_fs_disk_version_major(lfs)
 801e45c:	4620      	mov	r0, r4
 801e45e:	f7fc fa99 	bl	801a994 <lfs_fs_disk_version_major>
 801e462:	4681      	mov	r9, r0
 801e464:	4540      	cmp	r0, r8
 801e466:	f47f af53 	bne.w	801e310 <lfs_mount_+0x5c>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 801e46a:	4620      	mov	r0, r4
 801e46c:	f7fc fa97 	bl	801a99e <lfs_fs_disk_version_minor>
 801e470:	4550      	cmp	r0, sl
 801e472:	f4ff af4d 	bcc.w	801e310 <lfs_mount_+0x5c>
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 801e476:	4550      	cmp	r0, sl
 801e478:	f63f af5f 	bhi.w	801e33a <lfs_mount_+0x86>
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 801e47c:	9904      	ldr	r1, [sp, #16]
 801e47e:	4620      	mov	r0, r4
 801e480:	f7fc fb2b 	bl	801aada <lfs_fs_prepsuperblock>
            if (superblock.name_max) {
 801e484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e486:	b123      	cbz	r3, 801e492 <lfs_mount_+0x1de>
                if (superblock.name_max > lfs->name_max) {
 801e488:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801e48a:	4293      	cmp	r3, r2
 801e48c:	f63f af66 	bhi.w	801e35c <lfs_mount_+0xa8>
                lfs->name_max = superblock.name_max;
 801e490:	6723      	str	r3, [r4, #112]	@ 0x70
            if (superblock.file_max) {
 801e492:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e494:	b123      	cbz	r3, 801e4a0 <lfs_mount_+0x1ec>
                if (superblock.file_max > lfs->file_max) {
 801e496:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 801e498:	4293      	cmp	r3, r2
 801e49a:	f63f af6c 	bhi.w	801e376 <lfs_mount_+0xc2>
                lfs->file_max = superblock.file_max;
 801e49e:	6763      	str	r3, [r4, #116]	@ 0x74
            if (superblock.attr_max) {
 801e4a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e4a2:	b14b      	cbz	r3, 801e4b8 <lfs_mount_+0x204>
                if (superblock.attr_max > lfs->attr_max) {
 801e4a4:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e4a6:	4293      	cmp	r3, r2
 801e4a8:	f63f af72 	bhi.w	801e390 <lfs_mount_+0xdc>
                lfs->attr_max = superblock.attr_max;
 801e4ac:	67a3      	str	r3, [r4, #120]	@ 0x78
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 801e4ae:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801e4b0:	4293      	cmp	r3, r2
 801e4b2:	bf28      	it	cs
 801e4b4:	4613      	movcs	r3, r2
 801e4b6:	67e3      	str	r3, [r4, #124]	@ 0x7c
            if (lfs->cfg->block_count
 801e4b8:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801e4ba:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801e4bc:	2900      	cmp	r1, #0
 801e4be:	f43f af74 	beq.w	801e3aa <lfs_mount_+0xf6>
                    && superblock.block_count != lfs->cfg->block_count) {
 801e4c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e4c4:	4299      	cmp	r1, r3
 801e4c6:	f43f af70 	beq.w	801e3aa <lfs_mount_+0xf6>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 801e4ca:	4a24      	ldr	r2, [pc, #144]	@ (801e55c <lfs_mount_+0x2a8>)
 801e4cc:	9201      	str	r2, [sp, #4]
 801e4ce:	9100      	str	r1, [sp, #0]
 801e4d0:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 801e4d4:	4922      	ldr	r1, [pc, #136]	@ (801e560 <lfs_mount_+0x2ac>)
 801e4d6:	482e      	ldr	r0, [pc, #184]	@ (801e590 <lfs_mount_+0x2dc>)
 801e4d8:	f00b f9b4 	bl	8029844 <printf>
                err = LFS_ERR_INVAL;
 801e4dc:	f06f 0315 	mvn.w	r3, #21
 801e4e0:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801e4e2:	e708      	b.n	801e2f6 <lfs_mount_+0x42>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 801e4e4:	491d      	ldr	r1, [pc, #116]	@ (801e55c <lfs_mount_+0x2a8>)
 801e4e6:	9101      	str	r1, [sp, #4]
 801e4e8:	9200      	str	r2, [sp, #0]
 801e4ea:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 801e4ee:	491c      	ldr	r1, [pc, #112]	@ (801e560 <lfs_mount_+0x2ac>)
 801e4f0:	4828      	ldr	r0, [pc, #160]	@ (801e594 <lfs_mount_+0x2e0>)
 801e4f2:	f00b f9a7 	bl	8029844 <printf>
                err = LFS_ERR_INVAL;
 801e4f6:	f06f 0315 	mvn.w	r3, #21
 801e4fa:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801e4fc:	e6fb      	b.n	801e2f6 <lfs_mount_+0x42>
                err = tag;
 801e4fe:	9005      	str	r0, [sp, #20]
 801e500:	e6f9      	b.n	801e2f6 <lfs_mount_+0x42>
            err = tag;
 801e502:	9005      	str	r0, [sp, #20]
 801e504:	e6f7      	b.n	801e2f6 <lfs_mount_+0x42>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801e506:	9005      	str	r0, [sp, #20]
 801e508:	e6f5      	b.n	801e2f6 <lfs_mount_+0x42>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e50a:	2301      	movs	r3, #1
 801e50c:	e768      	b.n	801e3e0 <lfs_mount_+0x12c>
 801e50e:	2301      	movs	r3, #1
 801e510:	e766      	b.n	801e3e0 <lfs_mount_+0x12c>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801e512:	f104 0030 	add.w	r0, r4, #48	@ 0x30
    for (int i = 0; i < 3; i++) {
 801e516:	9a05      	ldr	r2, [sp, #20]
 801e518:	2a02      	cmp	r2, #2
 801e51a:	dc05      	bgt.n	801e528 <lfs_mount_+0x274>
        if (((uint32_t*)a)[i] != 0) {
 801e51c:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 801e520:	b909      	cbnz	r1, 801e526 <lfs_mount_+0x272>
    for (int i = 0; i < 3; i++) {
 801e522:	3201      	adds	r2, #1
 801e524:	e7f8      	b.n	801e518 <lfs_mount_+0x264>
            return false;
 801e526:	2300      	movs	r3, #0
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801e528:	b3b3      	cbz	r3, 801e598 <lfs_mount_+0x2e4>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 801e52a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e52c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801e530:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 801e532:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801e536:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801e53a:	ca07      	ldmia	r2, {r0, r1, r2}
 801e53c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 801e540:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801e542:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801e544:	fbb3 f1f2 	udiv	r1, r3, r2
 801e548:	fb02 3311 	mls	r3, r2, r1, r3
 801e54c:	6563      	str	r3, [r4, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 801e54e:	4620      	mov	r0, r4
 801e550:	f7fc fa2d 	bl	801a9ae <lfs_alloc_drop>
    return 0;
 801e554:	e6d2      	b.n	801e2fc <lfs_mount_+0x48>
 801e556:	bf00      	nop
 801e558:	080355c4 	.word	0x080355c4
 801e55c:	08036364 	.word	0x08036364
 801e560:	080384b8 	.word	0x080384b8
 801e564:	08038678 	.word	0x08038678
 801e568:	08038e80 	.word	0x08038e80
 801e56c:	08038eb8 	.word	0x08038eb8
 801e570:	08038ef8 	.word	0x08038ef8
 801e574:	08038f2c 	.word	0x08038f2c
 801e578:	08038f60 	.word	0x08038f60
 801e57c:	08038e74 	.word	0x08038e74
 801e580:	0801b761 	.word	0x0801b761
 801e584:	0ff00008 	.word	0x0ff00008
 801e588:	7ffffc00 	.word	0x7ffffc00
 801e58c:	20100018 	.word	0x20100018
 801e590:	08038f94 	.word	0x08038f94
 801e594:	08038fc8 	.word	0x08038fc8
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 801e598:	4b06      	ldr	r3, [pc, #24]	@ (801e5b4 <lfs_mount_+0x300>)
 801e59a:	9302      	str	r3, [sp, #8]
 801e59c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801e59e:	9301      	str	r3, [sp, #4]
 801e5a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e5a2:	9300      	str	r3, [sp, #0]
 801e5a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e5a6:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 801e5aa:	4903      	ldr	r1, [pc, #12]	@ (801e5b8 <lfs_mount_+0x304>)
 801e5ac:	4803      	ldr	r0, [pc, #12]	@ (801e5bc <lfs_mount_+0x308>)
 801e5ae:	f00b f949 	bl	8029844 <printf>
 801e5b2:	e7ba      	b.n	801e52a <lfs_mount_+0x276>
 801e5b4:	08036364 	.word	0x08036364
 801e5b8:	080384b8 	.word	0x080384b8
 801e5bc:	08038ff8 	.word	0x08038ff8

0801e5c0 <lfs_file_close_>:
static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 801e5c0:	b570      	push	{r4, r5, r6, lr}
 801e5c2:	4606      	mov	r6, r0
 801e5c4:	460c      	mov	r4, r1
    int err = lfs_file_sync_(lfs, file);
 801e5c6:	f7ff fbd7 	bl	801dd78 <lfs_file_sync_>
 801e5ca:	4605      	mov	r5, r0
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 801e5cc:	4621      	mov	r1, r4
 801e5ce:	4630      	mov	r0, r6
 801e5d0:	f7fc f9cd 	bl	801a96e <lfs_mlist_remove>
    if (!file->cfg->buffer) {
 801e5d4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801e5d6:	681b      	ldr	r3, [r3, #0]
 801e5d8:	b10b      	cbz	r3, 801e5de <lfs_file_close_+0x1e>
}
 801e5da:	4628      	mov	r0, r5
 801e5dc:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
 801e5de:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801e5e0:	f7fb ff44 	bl	801a46c <vPortFree>
    return err;
 801e5e4:	e7f9      	b.n	801e5da <lfs_file_close_+0x1a>
	...

0801e5e8 <lfs_dir_find>:
        const char **path, uint16_t *id) {
 801e5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5ec:	b08d      	sub	sp, #52	@ 0x34
 801e5ee:	4682      	mov	sl, r0
 801e5f0:	4688      	mov	r8, r1
 801e5f2:	9207      	str	r2, [sp, #28]
    const char *name = *path;
 801e5f4:	6812      	ldr	r2, [r2, #0]
 801e5f6:	9205      	str	r2, [sp, #20]
    if (id) {
 801e5f8:	9306      	str	r3, [sp, #24]
 801e5fa:	b11b      	cbz	r3, 801e604 <lfs_dir_find+0x1c>
 801e5fc:	461a      	mov	r2, r3
        *id = 0x3ff;
 801e5fe:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e602:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 801e604:	f8da 3020 	ldr.w	r3, [sl, #32]
 801e608:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
 801e60c:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 801e610:	f8c8 301c 	str.w	r3, [r8, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 801e614:	4e4d      	ldr	r6, [pc, #308]	@ (801e74c <lfs_dir_find+0x164>)
        name += strspn(name, "/");
 801e616:	4d4e      	ldr	r5, [pc, #312]	@ (801e750 <lfs_dir_find+0x168>)
 801e618:	4629      	mov	r1, r5
 801e61a:	9f05      	ldr	r7, [sp, #20]
 801e61c:	4638      	mov	r0, r7
 801e61e:	f00d fe9f 	bl	802c360 <strspn>
 801e622:	4604      	mov	r4, r0
 801e624:	eb07 0900 	add.w	r9, r7, r0
        lfs_size_t namelen = strcspn(name, "/");
 801e628:	4629      	mov	r1, r5
 801e62a:	4648      	mov	r0, r9
 801e62c:	f00d fe4c 	bl	802c2c8 <strcspn>
 801e630:	4605      	mov	r5, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801e632:	2801      	cmp	r0, #1
 801e634:	d00a      	beq.n	801e64c <lfs_dir_find+0x64>
 801e636:	2d02      	cmp	r5, #2
 801e638:	d00c      	beq.n	801e654 <lfs_dir_find+0x6c>
        const char *suffix = name + namelen;
 801e63a:	eb09 0305 	add.w	r3, r9, r5
 801e63e:	9305      	str	r3, [sp, #20]
 801e640:	469b      	mov	fp, r3
        int depth = 1;
 801e642:	2701      	movs	r7, #1
 801e644:	e013      	b.n	801e66e <lfs_dir_find+0x86>
 801e646:	46b2      	mov	sl, r6
 801e648:	4606      	mov	r6, r0
 801e64a:	e7e4      	b.n	801e616 <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801e64c:	5d3b      	ldrb	r3, [r7, r4]
 801e64e:	2b2e      	cmp	r3, #46	@ 0x2e
 801e650:	d1f1      	bne.n	801e636 <lfs_dir_find+0x4e>
 801e652:	e006      	b.n	801e662 <lfs_dir_find+0x7a>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 801e654:	2202      	movs	r2, #2
 801e656:	493f      	ldr	r1, [pc, #252]	@ (801e754 <lfs_dir_find+0x16c>)
 801e658:	4648      	mov	r0, r9
 801e65a:	f00d fd7d 	bl	802c158 <memcmp>
 801e65e:	2800      	cmp	r0, #0
 801e660:	d1eb      	bne.n	801e63a <lfs_dir_find+0x52>
            name += namelen;
 801e662:	eb09 0305 	add.w	r3, r9, r5
 801e666:	9305      	str	r3, [sp, #20]
            goto nextname;
 801e668:	e7d5      	b.n	801e616 <lfs_dir_find+0x2e>
                depth += 1;
 801e66a:	3701      	adds	r7, #1
            suffix += sufflen;
 801e66c:	44a3      	add	fp, r4
            suffix += strspn(suffix, "/");
 801e66e:	4c38      	ldr	r4, [pc, #224]	@ (801e750 <lfs_dir_find+0x168>)
 801e670:	4621      	mov	r1, r4
 801e672:	4658      	mov	r0, fp
 801e674:	f00d fe74 	bl	802c360 <strspn>
 801e678:	4483      	add	fp, r0
            sufflen = strcspn(suffix, "/");
 801e67a:	4621      	mov	r1, r4
 801e67c:	4658      	mov	r0, fp
 801e67e:	f00d fe23 	bl	802c2c8 <strcspn>
            if (sufflen == 0) {
 801e682:	4604      	mov	r4, r0
 801e684:	b170      	cbz	r0, 801e6a4 <lfs_dir_find+0xbc>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 801e686:	2802      	cmp	r0, #2
 801e688:	d1ef      	bne.n	801e66a <lfs_dir_find+0x82>
 801e68a:	2202      	movs	r2, #2
 801e68c:	4931      	ldr	r1, [pc, #196]	@ (801e754 <lfs_dir_find+0x16c>)
 801e68e:	4658      	mov	r0, fp
 801e690:	f00d fd62 	bl	802c158 <memcmp>
 801e694:	2800      	cmp	r0, #0
 801e696:	d1e8      	bne.n	801e66a <lfs_dir_find+0x82>
                if (depth == 0) {
 801e698:	3f01      	subs	r7, #1
 801e69a:	d1e7      	bne.n	801e66c <lfs_dir_find+0x84>
                    name = suffix + sufflen;
 801e69c:	eb0b 0304 	add.w	r3, fp, r4
 801e6a0:	9305      	str	r3, [sp, #20]
                    goto nextname;
 801e6a2:	e7b8      	b.n	801e616 <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
 801e6a4:	f899 3000 	ldrb.w	r3, [r9]
 801e6a8:	2b00      	cmp	r3, #0
 801e6aa:	d04a      	beq.n	801e742 <lfs_dir_find+0x15a>
        *path = name;
 801e6ac:	9b07      	ldr	r3, [sp, #28]
 801e6ae:	f8c3 9000 	str.w	r9, [r3]
    return (tag & 0x7ff00000) >> 20;
 801e6b2:	f3c6 530a 	ubfx	r3, r6, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801e6b6:	2b02      	cmp	r3, #2
 801e6b8:	d13f      	bne.n	801e73a <lfs_dir_find+0x152>
    return (tag & 0x000ffc00) >> 10;
 801e6ba:	f3c6 2689 	ubfx	r6, r6, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 801e6be:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e6c2:	429e      	cmp	r6, r3
 801e6c4:	d102      	bne.n	801e6cc <lfs_dir_find+0xe4>
 801e6c6:	464c      	mov	r4, r9
 801e6c8:	4656      	mov	r6, sl
 801e6ca:	e029      	b.n	801e720 <lfs_dir_find+0x138>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 801e6cc:	02b6      	lsls	r6, r6, #10
 801e6ce:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801e6d2:	9300      	str	r3, [sp, #0]
 801e6d4:	f046 5300 	orr.w	r3, r6, #536870912	@ 0x20000000
 801e6d8:	f043 0308 	orr.w	r3, r3, #8
 801e6dc:	4a1e      	ldr	r2, [pc, #120]	@ (801e758 <lfs_dir_find+0x170>)
 801e6de:	4641      	mov	r1, r8
 801e6e0:	4650      	mov	r0, sl
 801e6e2:	f7fc fc4f 	bl	801af84 <lfs_dir_get>
            if (res < 0) {
 801e6e6:	1e06      	subs	r6, r0, #0
 801e6e8:	db2b      	blt.n	801e742 <lfs_dir_find+0x15a>
 801e6ea:	464c      	mov	r4, r9
 801e6ec:	4656      	mov	r6, sl
 801e6ee:	e017      	b.n	801e720 <lfs_dir_find+0x138>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801e6f0:	9b06      	ldr	r3, [sp, #24]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 801e6f2:	9609      	str	r6, [sp, #36]	@ 0x24
 801e6f4:	940a      	str	r4, [sp, #40]	@ 0x28
 801e6f6:	950b      	str	r5, [sp, #44]	@ 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801e6f8:	aa09      	add	r2, sp, #36	@ 0x24
 801e6fa:	9203      	str	r2, [sp, #12]
 801e6fc:	4a17      	ldr	r2, [pc, #92]	@ (801e75c <lfs_dir_find+0x174>)
 801e6fe:	9202      	str	r2, [sp, #8]
 801e700:	9301      	str	r3, [sp, #4]
 801e702:	9500      	str	r5, [sp, #0]
 801e704:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 801e708:	463a      	mov	r2, r7
 801e70a:	4641      	mov	r1, r8
 801e70c:	4630      	mov	r0, r6
 801e70e:	f7fd f947 	bl	801b9a0 <lfs_dir_fetchmatch>
            if (tag < 0) {
 801e712:	2800      	cmp	r0, #0
 801e714:	db14      	blt.n	801e740 <lfs_dir_find+0x158>
            if (tag) {
 801e716:	2800      	cmp	r0, #0
 801e718:	d195      	bne.n	801e646 <lfs_dir_find+0x5e>
            if (!dir->split) {
 801e71a:	f898 3017 	ldrb.w	r3, [r8, #23]
 801e71e:	b14b      	cbz	r3, 801e734 <lfs_dir_find+0x14c>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801e720:	f108 0718 	add.w	r7, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
 801e724:	212f      	movs	r1, #47	@ 0x2f
 801e726:	4620      	mov	r0, r4
 801e728:	f00d fdc1 	bl	802c2ae <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801e72c:	2800      	cmp	r0, #0
 801e72e:	d0df      	beq.n	801e6f0 <lfs_dir_find+0x108>
 801e730:	2300      	movs	r3, #0
 801e732:	e7de      	b.n	801e6f2 <lfs_dir_find+0x10a>
                return LFS_ERR_NOENT;
 801e734:	f06f 0601 	mvn.w	r6, #1
 801e738:	e003      	b.n	801e742 <lfs_dir_find+0x15a>
            return LFS_ERR_NOTDIR;
 801e73a:	f06f 0613 	mvn.w	r6, #19
 801e73e:	e000      	b.n	801e742 <lfs_dir_find+0x15a>
 801e740:	4606      	mov	r6, r0
}
 801e742:	4630      	mov	r0, r6
 801e744:	b00d      	add	sp, #52	@ 0x34
 801e746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e74a:	bf00      	nop
 801e74c:	002ffc00 	.word	0x002ffc00
 801e750:	0803984c 	.word	0x0803984c
 801e754:	08039030 	.word	0x08039030
 801e758:	700ffc00 	.word	0x700ffc00
 801e75c:	0801b761 	.word	0x0801b761

0801e760 <lfs_remove_>:
static int lfs_remove_(lfs_t *lfs, const char *path) {
 801e760:	b570      	push	{r4, r5, r6, lr}
 801e762:	b09a      	sub	sp, #104	@ 0x68
 801e764:	4604      	mov	r4, r0
 801e766:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
 801e768:	f7ff fad2 	bl	801dd10 <lfs_fs_forceconsistency>
    if (err) {
 801e76c:	4603      	mov	r3, r0
 801e76e:	b110      	cbz	r0, 801e776 <lfs_remove_+0x16>
}
 801e770:	4618      	mov	r0, r3
 801e772:	b01a      	add	sp, #104	@ 0x68
 801e774:	bd70      	pop	{r4, r5, r6, pc}
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801e776:	2300      	movs	r3, #0
 801e778:	aa03      	add	r2, sp, #12
 801e77a:	a910      	add	r1, sp, #64	@ 0x40
 801e77c:	4620      	mov	r0, r4
 801e77e:	f7ff ff33 	bl	801e5e8 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801e782:	1e03      	subs	r3, r0, #0
 801e784:	dbf4      	blt.n	801e770 <lfs_remove_+0x10>
    return (tag & 0x000ffc00) >> 10;
 801e786:	f3c3 2589 	ubfx	r5, r3, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801e78a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801e78e:	4295      	cmp	r5, r2
 801e790:	d031      	beq.n	801e7f6 <lfs_remove_+0x96>
    dir.next = lfs->mlist;
 801e792:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801e794:	9206      	str	r2, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
 801e796:	f3c3 560a 	ubfx	r6, r3, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801e79a:	2e02      	cmp	r6, #2
 801e79c:	d02e      	beq.n	801e7fc <lfs_remove_+0x9c>
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 801e79e:	02ad      	lsls	r5, r5, #10
 801e7a0:	f045 459f 	orr.w	r5, r5, #1333788672	@ 0x4f800000
 801e7a4:	f445 05e0 	orr.w	r5, r5, #7340032	@ 0x700000
 801e7a8:	9518      	str	r5, [sp, #96]	@ 0x60
 801e7aa:	2300      	movs	r3, #0
 801e7ac:	9319      	str	r3, [sp, #100]	@ 0x64
 801e7ae:	2301      	movs	r3, #1
 801e7b0:	aa18      	add	r2, sp, #96	@ 0x60
 801e7b2:	a910      	add	r1, sp, #64	@ 0x40
 801e7b4:	4620      	mov	r0, r4
 801e7b6:	f7ff fa03 	bl	801dbc0 <lfs_dir_commit>
    if (err) {
 801e7ba:	4603      	mov	r3, r0
 801e7bc:	2800      	cmp	r0, #0
 801e7be:	d142      	bne.n	801e846 <lfs_remove_+0xe6>
    lfs->mlist = dir.next;
 801e7c0:	9a06      	ldr	r2, [sp, #24]
 801e7c2:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801e7c4:	2e02      	cmp	r6, #2
 801e7c6:	d1d3      	bne.n	801e770 <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, -1);
 801e7c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801e7cc:	4620      	mov	r0, r4
 801e7ce:	f7fc f9db 	bl	801ab88 <lfs_fs_preporphans>
        if (err) {
 801e7d2:	4603      	mov	r3, r0
 801e7d4:	2800      	cmp	r0, #0
 801e7d6:	d1cb      	bne.n	801e770 <lfs_remove_+0x10>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 801e7d8:	aa10      	add	r2, sp, #64	@ 0x40
 801e7da:	a908      	add	r1, sp, #32
 801e7dc:	4620      	mov	r0, r4
 801e7de:	f7fe f8e5 	bl	801c9ac <lfs_fs_pred>
        if (err) {
 801e7e2:	4603      	mov	r3, r0
 801e7e4:	2800      	cmp	r0, #0
 801e7e6:	d1c3      	bne.n	801e770 <lfs_remove_+0x10>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 801e7e8:	aa08      	add	r2, sp, #32
 801e7ea:	a910      	add	r1, sp, #64	@ 0x40
 801e7ec:	4620      	mov	r0, r4
 801e7ee:	f7ff faa3 	bl	801dd38 <lfs_dir_drop>
 801e7f2:	4603      	mov	r3, r0
        if (err) {
 801e7f4:	e7bc      	b.n	801e770 <lfs_remove_+0x10>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 801e7f6:	f06f 0315 	mvn.w	r3, #21
 801e7fa:	e7b9      	b.n	801e770 <lfs_remove_+0x10>
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801e7fc:	02ab      	lsls	r3, r5, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801e7fe:	aa04      	add	r2, sp, #16
 801e800:	9200      	str	r2, [sp, #0]
 801e802:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801e806:	f043 0308 	orr.w	r3, r3, #8
 801e80a:	4a10      	ldr	r2, [pc, #64]	@ (801e84c <lfs_remove_+0xec>)
 801e80c:	a910      	add	r1, sp, #64	@ 0x40
 801e80e:	4620      	mov	r0, r4
 801e810:	f7fc fbb8 	bl	801af84 <lfs_dir_get>
        if (res < 0) {
 801e814:	1e03      	subs	r3, r0, #0
 801e816:	dbab      	blt.n	801e770 <lfs_remove_+0x10>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
 801e818:	aa04      	add	r2, sp, #16
 801e81a:	a908      	add	r1, sp, #32
 801e81c:	4620      	mov	r0, r4
 801e81e:	f7fd fb9f 	bl	801bf60 <lfs_dir_fetch>
        if (err) {
 801e822:	4603      	mov	r3, r0
 801e824:	2800      	cmp	r0, #0
 801e826:	d1a3      	bne.n	801e770 <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801e828:	2101      	movs	r1, #1
 801e82a:	4620      	mov	r0, r4
 801e82c:	f7fc f9ac 	bl	801ab88 <lfs_fs_preporphans>
        if (err) {
 801e830:	4603      	mov	r3, r0
 801e832:	2800      	cmp	r0, #0
 801e834:	d19c      	bne.n	801e770 <lfs_remove_+0x10>
        dir.type = 0;
 801e836:	2300      	movs	r3, #0
 801e838:	f88d 301e 	strb.w	r3, [sp, #30]
        dir.id = 0;
 801e83c:	f8ad 301c 	strh.w	r3, [sp, #28]
        lfs->mlist = &dir;
 801e840:	ab06      	add	r3, sp, #24
 801e842:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e844:	e7ab      	b.n	801e79e <lfs_remove_+0x3e>
        lfs->mlist = dir.next;
 801e846:	9a06      	ldr	r2, [sp, #24]
 801e848:	62a2      	str	r2, [r4, #40]	@ 0x28
        return err;
 801e84a:	e791      	b.n	801e770 <lfs_remove_+0x10>
 801e84c:	700ffc00 	.word	0x700ffc00

0801e850 <lfs_dir_open_>:
static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801e850:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e852:	b087      	sub	sp, #28
 801e854:	4607      	mov	r7, r0
 801e856:	460d      	mov	r5, r1
 801e858:	9203      	str	r2, [sp, #12]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 801e85a:	f101 0608 	add.w	r6, r1, #8
 801e85e:	2300      	movs	r3, #0
 801e860:	aa03      	add	r2, sp, #12
 801e862:	4631      	mov	r1, r6
 801e864:	f7ff fec0 	bl	801e5e8 <lfs_dir_find>
    if (tag < 0) {
 801e868:	1e04      	subs	r4, r0, #0
 801e86a:	db14      	blt.n	801e896 <lfs_dir_open_+0x46>
    return (tag & 0x7ff00000) >> 20;
 801e86c:	f3c4 530a 	ubfx	r3, r4, #20, #11
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801e870:	2b02      	cmp	r3, #2
 801e872:	d130      	bne.n	801e8d6 <lfs_dir_open_+0x86>
    return (tag & 0x000ffc00) >> 10;
 801e874:	f3c4 2489 	ubfx	r4, r4, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
 801e878:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e87c:	429c      	cmp	r4, r3
 801e87e:	d10d      	bne.n	801e89c <lfs_dir_open_+0x4c>
        pair[0] = lfs->root[0];
 801e880:	6a3b      	ldr	r3, [r7, #32]
 801e882:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
 801e884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e886:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 801e888:	aa04      	add	r2, sp, #16
 801e88a:	4631      	mov	r1, r6
 801e88c:	4638      	mov	r0, r7
 801e88e:	f7fd fb67 	bl	801bf60 <lfs_dir_fetch>
    if (err) {
 801e892:	4604      	mov	r4, r0
 801e894:	b188      	cbz	r0, 801e8ba <lfs_dir_open_+0x6a>
}
 801e896:	4620      	mov	r0, r4
 801e898:	b007      	add	sp, #28
 801e89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801e89c:	02a4      	lsls	r4, r4, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801e89e:	ab04      	add	r3, sp, #16
 801e8a0:	9300      	str	r3, [sp, #0]
 801e8a2:	f044 5300 	orr.w	r3, r4, #536870912	@ 0x20000000
 801e8a6:	f043 0308 	orr.w	r3, r3, #8
 801e8aa:	4a0c      	ldr	r2, [pc, #48]	@ (801e8dc <lfs_dir_open_+0x8c>)
 801e8ac:	4631      	mov	r1, r6
 801e8ae:	4638      	mov	r0, r7
 801e8b0:	f7fc fb68 	bl	801af84 <lfs_dir_get>
        if (res < 0) {
 801e8b4:	1e04      	subs	r4, r0, #0
 801e8b6:	dae7      	bge.n	801e888 <lfs_dir_open_+0x38>
 801e8b8:	e7ed      	b.n	801e896 <lfs_dir_open_+0x46>
    dir->head[0] = dir->m.pair[0];
 801e8ba:	68ab      	ldr	r3, [r5, #8]
 801e8bc:	62eb      	str	r3, [r5, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 801e8be:	68eb      	ldr	r3, [r5, #12]
 801e8c0:	632b      	str	r3, [r5, #48]	@ 0x30
    dir->id = 0;
 801e8c2:	2300      	movs	r3, #0
 801e8c4:	80ab      	strh	r3, [r5, #4]
    dir->pos = 0;
 801e8c6:	62ab      	str	r3, [r5, #40]	@ 0x28
    dir->type = LFS_TYPE_DIR;
 801e8c8:	2302      	movs	r3, #2
 801e8ca:	71ab      	strb	r3, [r5, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 801e8cc:	4629      	mov	r1, r5
 801e8ce:	4638      	mov	r0, r7
 801e8d0:	f7fc f858 	bl	801a984 <lfs_mlist_append>
    return 0;
 801e8d4:	e7df      	b.n	801e896 <lfs_dir_open_+0x46>
        return LFS_ERR_NOTDIR;
 801e8d6:	f06f 0413 	mvn.w	r4, #19
 801e8da:	e7dc      	b.n	801e896 <lfs_dir_open_+0x46>
 801e8dc:	700ffc00 	.word	0x700ffc00

0801e8e0 <lfs_rename_>:
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801e8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8e4:	b0ad      	sub	sp, #180	@ 0xb4
 801e8e6:	4604      	mov	r4, r0
 801e8e8:	9103      	str	r1, [sp, #12]
 801e8ea:	9202      	str	r2, [sp, #8]
    int err = lfs_fs_forceconsistency(lfs);
 801e8ec:	f7ff fa10 	bl	801dd10 <lfs_fs_forceconsistency>
    if (err) {
 801e8f0:	4606      	mov	r6, r0
 801e8f2:	b118      	cbz	r0, 801e8fc <lfs_rename_+0x1c>
}
 801e8f4:	4630      	mov	r0, r6
 801e8f6:	b02d      	add	sp, #180	@ 0xb4
 801e8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 801e8fc:	2300      	movs	r3, #0
 801e8fe:	aa03      	add	r2, sp, #12
 801e900:	a922      	add	r1, sp, #136	@ 0x88
 801e902:	4620      	mov	r0, r4
 801e904:	f7ff fe70 	bl	801e5e8 <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801e908:	2800      	cmp	r0, #0
 801e90a:	f2c0 809e 	blt.w	801ea4a <lfs_rename_+0x16a>
 801e90e:	4680      	mov	r8, r0
    return (tag & 0x000ffc00) >> 10;
 801e910:	f3c0 2589 	ubfx	r5, r0, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801e914:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e918:	429d      	cmp	r5, r3
 801e91a:	f000 8094 	beq.w	801ea46 <lfs_rename_+0x166>
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 801e91e:	f10d 0366 	add.w	r3, sp, #102	@ 0x66
 801e922:	aa02      	add	r2, sp, #8
 801e924:	a91a      	add	r1, sp, #104	@ 0x68
 801e926:	4620      	mov	r0, r4
 801e928:	f7ff fe5e 	bl	801e5e8 <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801e92c:	f1b0 0900 	subs.w	r9, r0, #0
 801e930:	f2c0 808d 	blt.w	801ea4e <lfs_rename_+0x16e>
    return (tag & 0x000ffc00) >> 10;
 801e934:	f3c9 2289 	ubfx	r2, r9, #10, #10
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801e938:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e93c:	429a      	cmp	r2, r3
 801e93e:	f000 8086 	beq.w	801ea4e <lfs_rename_+0x16e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e942:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e944:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e946:	429a      	cmp	r2, r3
 801e948:	d008      	beq.n	801e95c <lfs_rename_+0x7c>
 801e94a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801e94c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801e94e:	4281      	cmp	r1, r0
 801e950:	d004      	beq.n	801e95c <lfs_rename_+0x7c>
 801e952:	4299      	cmp	r1, r3
 801e954:	d002      	beq.n	801e95c <lfs_rename_+0x7c>
 801e956:	4290      	cmp	r0, r2
 801e958:	d000      	beq.n	801e95c <lfs_rename_+0x7c>
 801e95a:	2601      	movs	r6, #1
    prevdir.next = lfs->mlist;
 801e95c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801e95e:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (prevtag == LFS_ERR_NOENT) {
 801e960:	f119 0f02 	cmn.w	r9, #2
 801e964:	f000 8085 	beq.w	801ea72 <lfs_rename_+0x192>
    return (tag & 0x7ff00000) >> 20;
 801e968:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801e96c:	ea4f 5318 	mov.w	r3, r8, lsr #20
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 801e970:	ea83 5319 	eor.w	r3, r3, r9, lsr #20
 801e974:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e978:	2b00      	cmp	r3, #0
 801e97a:	f040 808a 	bne.w	801ea92 <lfs_rename_+0x1b2>
    } else if (samepair && newid == newoldid) {
 801e97e:	b91e      	cbnz	r6, 801e988 <lfs_rename_+0xa8>
 801e980:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801e984:	42ab      	cmp	r3, r5
 801e986:	d0b5      	beq.n	801e8f4 <lfs_rename_+0x14>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801e988:	2a02      	cmp	r2, #2
 801e98a:	f000 808a 	beq.w	801eaa2 <lfs_rename_+0x1c2>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801e98e:	46aa      	mov	sl, r5
    if (!samepair) {
 801e990:	b126      	cbz	r6, 801e99c <lfs_rename_+0xbc>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 801e992:	aa22      	add	r2, sp, #136	@ 0x88
 801e994:	4651      	mov	r1, sl
 801e996:	4620      	mov	r0, r4
 801e998:	f7fc f8a6 	bl	801aae8 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801e99c:	f119 0f02 	cmn.w	r9, #2
 801e9a0:	f000 80b4 	beq.w	801eb0c <lfs_rename_+0x22c>
 801e9a4:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801e9a8:	029b      	lsls	r3, r3, #10
 801e9aa:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e9ae:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e9b2:	9305      	str	r3, [sp, #20]
 801e9b4:	2200      	movs	r2, #0
 801e9b6:	9206      	str	r2, [sp, #24]
 801e9b8:	f8bd 7066 	ldrh.w	r7, [sp, #102]	@ 0x66
 801e9bc:	02bf      	lsls	r7, r7, #10
 801e9be:	f047 4380 	orr.w	r3, r7, #1073741824	@ 0x40000000
 801e9c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e9c6:	9307      	str	r3, [sp, #28]
 801e9c8:	9208      	str	r2, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801e9ca:	f3c8 580a 	ubfx	r8, r8, #20, #11
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801e9ce:	ea47 5808 	orr.w	r8, r7, r8, lsl #20
 801e9d2:	f8dd b008 	ldr.w	fp, [sp, #8]
 801e9d6:	4658      	mov	r0, fp
 801e9d8:	f7f1 fc62 	bl	80102a0 <strlen>
 801e9dc:	ea48 0000 	orr.w	r0, r8, r0
 801e9e0:	9009      	str	r0, [sp, #36]	@ 0x24
 801e9e2:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801e9e6:	432f      	orrs	r7, r5
 801e9e8:	f047 5780 	orr.w	r7, r7, #268435456	@ 0x10000000
 801e9ec:	f447 1780 	orr.w	r7, r7, #1048576	@ 0x100000
 801e9f0:	970b      	str	r7, [sp, #44]	@ 0x2c
 801e9f2:	ab22      	add	r3, sp, #136	@ 0x88
 801e9f4:	930c      	str	r3, [sp, #48]	@ 0x30
 801e9f6:	2e00      	cmp	r6, #0
 801e9f8:	f040 808a 	bne.w	801eb10 <lfs_rename_+0x230>
 801e9fc:	ea4f 2a8a 	mov.w	sl, sl, lsl #10
 801ea00:	f04a 439f 	orr.w	r3, sl, #1333788672	@ 0x4f800000
 801ea04:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801ea08:	930d      	str	r3, [sp, #52]	@ 0x34
 801ea0a:	2300      	movs	r3, #0
 801ea0c:	930e      	str	r3, [sp, #56]	@ 0x38
 801ea0e:	2305      	movs	r3, #5
 801ea10:	aa05      	add	r2, sp, #20
 801ea12:	a91a      	add	r1, sp, #104	@ 0x68
 801ea14:	4620      	mov	r0, r4
 801ea16:	f7ff f8d3 	bl	801dbc0 <lfs_dir_commit>
    if (err) {
 801ea1a:	4607      	mov	r7, r0
 801ea1c:	2800      	cmp	r0, #0
 801ea1e:	d179      	bne.n	801eb14 <lfs_rename_+0x234>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801ea20:	b126      	cbz	r6, 801ea2c <lfs_rename_+0x14c>
    return lfs_tag_type1(a->tag);
 801ea22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801ea24:	0d1b      	lsrs	r3, r3, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801ea26:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801ea2a:	d177      	bne.n	801eb1c <lfs_rename_+0x23c>
    lfs->mlist = prevdir.next;
 801ea2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ea2e:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 801ea30:	f119 0f02 	cmn.w	r9, #2
 801ea34:	f000 80a9 	beq.w	801eb8a <lfs_rename_+0x2aa>
    return (tag & 0x7ff00000) >> 20;
 801ea38:	f3c9 500a 	ubfx	r0, r9, #20, #11
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801ea3c:	2802      	cmp	r0, #2
 801ea3e:	f000 8088 	beq.w	801eb52 <lfs_rename_+0x272>
    return 0;
 801ea42:	463e      	mov	r6, r7
 801ea44:	e756      	b.n	801e8f4 <lfs_rename_+0x14>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 801ea46:	f06f 0015 	mvn.w	r0, #21
 801ea4a:	4606      	mov	r6, r0
 801ea4c:	e752      	b.n	801e8f4 <lfs_rename_+0x14>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801ea4e:	f119 0f02 	cmn.w	r9, #2
 801ea52:	d106      	bne.n	801ea62 <lfs_rename_+0x182>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 801ea54:	f8bd 2066 	ldrh.w	r2, [sp, #102]	@ 0x66
 801ea58:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ea5c:	429a      	cmp	r2, r3
 801ea5e:	f47f af70 	bne.w	801e942 <lfs_rename_+0x62>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 801ea62:	f1b9 0f00 	cmp.w	r9, #0
 801ea66:	db02      	blt.n	801ea6e <lfs_rename_+0x18e>
 801ea68:	f06f 0615 	mvn.w	r6, #21
 801ea6c:	e742      	b.n	801e8f4 <lfs_rename_+0x14>
 801ea6e:	464e      	mov	r6, r9
 801ea70:	e740      	b.n	801e8f4 <lfs_rename_+0x14>
        lfs_size_t nlen = strlen(newpath);
 801ea72:	9802      	ldr	r0, [sp, #8]
 801ea74:	f7f1 fc14 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801ea78:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801ea7a:	4283      	cmp	r3, r0
 801ea7c:	f0c0 8082 	bcc.w	801eb84 <lfs_rename_+0x2a4>
        if (samepair && newid <= newoldid) {
 801ea80:	2e00      	cmp	r6, #0
 801ea82:	d141      	bne.n	801eb08 <lfs_rename_+0x228>
 801ea84:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801ea88:	42ab      	cmp	r3, r5
 801ea8a:	d83b      	bhi.n	801eb04 <lfs_rename_+0x224>
            newoldid += 1;
 801ea8c:	f105 0a01 	add.w	sl, r5, #1
 801ea90:	e77e      	b.n	801e990 <lfs_rename_+0xb0>
                : LFS_ERR_NOTDIR;
 801ea92:	2a02      	cmp	r2, #2
 801ea94:	d002      	beq.n	801ea9c <lfs_rename_+0x1bc>
 801ea96:	f06f 0613 	mvn.w	r6, #19
 801ea9a:	e72b      	b.n	801e8f4 <lfs_rename_+0x14>
 801ea9c:	f06f 0614 	mvn.w	r6, #20
 801eaa0:	e728      	b.n	801e8f4 <lfs_rename_+0x14>
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 801eaa2:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801eaa6:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801eaa8:	aa05      	add	r2, sp, #20
 801eaaa:	9200      	str	r2, [sp, #0]
 801eaac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801eab0:	f043 0308 	orr.w	r3, r3, #8
 801eab4:	4a36      	ldr	r2, [pc, #216]	@ (801eb90 <lfs_rename_+0x2b0>)
 801eab6:	a91a      	add	r1, sp, #104	@ 0x68
 801eab8:	4620      	mov	r0, r4
 801eaba:	f7fc fa63 	bl	801af84 <lfs_dir_get>
        if (res < 0) {
 801eabe:	2800      	cmp	r0, #0
 801eac0:	db1a      	blt.n	801eaf8 <lfs_rename_+0x218>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 801eac2:	aa05      	add	r2, sp, #20
 801eac4:	a911      	add	r1, sp, #68	@ 0x44
 801eac6:	4620      	mov	r0, r4
 801eac8:	f7fd fa4a 	bl	801bf60 <lfs_dir_fetch>
        if (err) {
 801eacc:	b9b0      	cbnz	r0, 801eafc <lfs_rename_+0x21c>
        if (prevdir.m.count > 0 || prevdir.m.split) {
 801eace:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ead0:	f433 037f 	bics.w	r3, r3, #16711680	@ 0xff0000
 801ead4:	d002      	beq.n	801eadc <lfs_rename_+0x1fc>
            return LFS_ERR_NOTEMPTY;
 801ead6:	f06f 0626 	mvn.w	r6, #38	@ 0x26
 801eada:	e70b      	b.n	801e8f4 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, +1);
 801eadc:	2101      	movs	r1, #1
 801eade:	4620      	mov	r0, r4
 801eae0:	f7fc f852 	bl	801ab88 <lfs_fs_preporphans>
        if (err) {
 801eae4:	b960      	cbnz	r0, 801eb00 <lfs_rename_+0x220>
        prevdir.type = 0;
 801eae6:	2300      	movs	r3, #0
 801eae8:	f88d 3042 	strb.w	r3, [sp, #66]	@ 0x42
        prevdir.id = 0;
 801eaec:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
        lfs->mlist = &prevdir;
 801eaf0:	ab0f      	add	r3, sp, #60	@ 0x3c
 801eaf2:	62a3      	str	r3, [r4, #40]	@ 0x28
    uint16_t newoldid = lfs_tag_id(oldtag);
 801eaf4:	46aa      	mov	sl, r5
 801eaf6:	e74b      	b.n	801e990 <lfs_rename_+0xb0>
            return (int)res;
 801eaf8:	4606      	mov	r6, r0
 801eafa:	e6fb      	b.n	801e8f4 <lfs_rename_+0x14>
            return err;
 801eafc:	4606      	mov	r6, r0
 801eafe:	e6f9      	b.n	801e8f4 <lfs_rename_+0x14>
            return err;
 801eb00:	4606      	mov	r6, r0
 801eb02:	e6f7      	b.n	801e8f4 <lfs_rename_+0x14>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801eb04:	46aa      	mov	sl, r5
 801eb06:	e743      	b.n	801e990 <lfs_rename_+0xb0>
 801eb08:	46aa      	mov	sl, r5
 801eb0a:	e742      	b.n	801e992 <lfs_rename_+0xb2>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801eb0c:	2300      	movs	r3, #0
 801eb0e:	e750      	b.n	801e9b2 <lfs_rename_+0xd2>
 801eb10:	2300      	movs	r3, #0
 801eb12:	e779      	b.n	801ea08 <lfs_rename_+0x128>
        lfs->mlist = prevdir.next;
 801eb14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eb16:	62a3      	str	r3, [r4, #40]	@ 0x28
        return err;
 801eb18:	4606      	mov	r6, r0
 801eb1a:	e6eb      	b.n	801e8f4 <lfs_rename_+0x14>
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801eb1c:	2200      	movs	r2, #0
 801eb1e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801eb22:	4620      	mov	r0, r4
 801eb24:	f7fb ffe0 	bl	801aae8 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 801eb28:	02ab      	lsls	r3, r5, #10
 801eb2a:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801eb2e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801eb32:	932a      	str	r3, [sp, #168]	@ 0xa8
 801eb34:	2300      	movs	r3, #0
 801eb36:	932b      	str	r3, [sp, #172]	@ 0xac
 801eb38:	2301      	movs	r3, #1
 801eb3a:	aa2a      	add	r2, sp, #168	@ 0xa8
 801eb3c:	a922      	add	r1, sp, #136	@ 0x88
 801eb3e:	4620      	mov	r0, r4
 801eb40:	f7ff f83e 	bl	801dbc0 <lfs_dir_commit>
        if (err) {
 801eb44:	4606      	mov	r6, r0
 801eb46:	2800      	cmp	r0, #0
 801eb48:	f43f af70 	beq.w	801ea2c <lfs_rename_+0x14c>
            lfs->mlist = prevdir.next;
 801eb4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eb4e:	62a3      	str	r3, [r4, #40]	@ 0x28
            return err;
 801eb50:	e6d0      	b.n	801e8f4 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, -1);
 801eb52:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801eb56:	4620      	mov	r0, r4
 801eb58:	f7fc f816 	bl	801ab88 <lfs_fs_preporphans>
        if (err) {
 801eb5c:	4606      	mov	r6, r0
 801eb5e:	2800      	cmp	r0, #0
 801eb60:	f47f aec8 	bne.w	801e8f4 <lfs_rename_+0x14>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 801eb64:	aa1a      	add	r2, sp, #104	@ 0x68
 801eb66:	a911      	add	r1, sp, #68	@ 0x44
 801eb68:	4620      	mov	r0, r4
 801eb6a:	f7fd ff1f 	bl	801c9ac <lfs_fs_pred>
        if (err) {
 801eb6e:	4606      	mov	r6, r0
 801eb70:	2800      	cmp	r0, #0
 801eb72:	f47f aebf 	bne.w	801e8f4 <lfs_rename_+0x14>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 801eb76:	aa11      	add	r2, sp, #68	@ 0x44
 801eb78:	a91a      	add	r1, sp, #104	@ 0x68
 801eb7a:	4620      	mov	r0, r4
 801eb7c:	f7ff f8dc 	bl	801dd38 <lfs_dir_drop>
 801eb80:	4606      	mov	r6, r0
        if (err) {
 801eb82:	e6b7      	b.n	801e8f4 <lfs_rename_+0x14>
            return LFS_ERR_NAMETOOLONG;
 801eb84:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801eb88:	e6b4      	b.n	801e8f4 <lfs_rename_+0x14>
    return 0;
 801eb8a:	463e      	mov	r6, r7
 801eb8c:	e6b2      	b.n	801e8f4 <lfs_rename_+0x14>
 801eb8e:	bf00      	nop
 801eb90:	700ffc00 	.word	0x700ffc00

0801eb94 <lfs_file_opencfg_>:
        const struct lfs_file_config *cfg) {
 801eb94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801eb98:	b08b      	sub	sp, #44	@ 0x2c
 801eb9a:	4607      	mov	r7, r0
 801eb9c:	460c      	mov	r4, r1
 801eb9e:	9203      	str	r2, [sp, #12]
 801eba0:	461d      	mov	r5, r3
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801eba2:	f013 0f02 	tst.w	r3, #2
 801eba6:	d005      	beq.n	801ebb4 <lfs_file_opencfg_+0x20>
        int err = lfs_fs_forceconsistency(lfs);
 801eba8:	f7ff f8b2 	bl	801dd10 <lfs_fs_forceconsistency>
        if (err) {
 801ebac:	4606      	mov	r6, r0
 801ebae:	2800      	cmp	r0, #0
 801ebb0:	f040 8109 	bne.w	801edc6 <lfs_file_opencfg_+0x232>
    file->cfg = cfg;
 801ebb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ebb6:	6523      	str	r3, [r4, #80]	@ 0x50
    file->flags = flags;
 801ebb8:	6325      	str	r5, [r4, #48]	@ 0x30
    file->pos = 0;
 801ebba:	2300      	movs	r3, #0
 801ebbc:	6363      	str	r3, [r4, #52]	@ 0x34
    file->off = 0;
 801ebbe:	63e3      	str	r3, [r4, #60]	@ 0x3c
    file->cache.buffer = NULL;
 801ebc0:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 801ebc2:	f104 0808 	add.w	r8, r4, #8
 801ebc6:	1d23      	adds	r3, r4, #4
 801ebc8:	aa03      	add	r2, sp, #12
 801ebca:	4641      	mov	r1, r8
 801ebcc:	4638      	mov	r0, r7
 801ebce:	f7ff fd0b 	bl	801e5e8 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 801ebd2:	1e06      	subs	r6, r0, #0
 801ebd4:	da09      	bge.n	801ebea <lfs_file_opencfg_+0x56>
 801ebd6:	f116 0f02 	cmn.w	r6, #2
 801ebda:	f040 80ec 	bne.w	801edb6 <lfs_file_opencfg_+0x222>
 801ebde:	88a2      	ldrh	r2, [r4, #4]
 801ebe0:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ebe4:	429a      	cmp	r2, r3
 801ebe6:	f000 80e6 	beq.w	801edb6 <lfs_file_opencfg_+0x222>
    file->type = LFS_TYPE_REG;
 801ebea:	2301      	movs	r3, #1
 801ebec:	71a3      	strb	r3, [r4, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 801ebee:	4621      	mov	r1, r4
 801ebf0:	4638      	mov	r0, r7
 801ebf2:	f7fb fec7 	bl	801a984 <lfs_mlist_append>
    if (tag == LFS_ERR_NOENT) {
 801ebf6:	f116 0f02 	cmn.w	r6, #2
 801ebfa:	d019      	beq.n	801ec30 <lfs_file_opencfg_+0x9c>
    } else if (flags & LFS_O_EXCL) {
 801ebfc:	f415 7f00 	tst.w	r5, #512	@ 0x200
 801ec00:	f040 80d7 	bne.w	801edb2 <lfs_file_opencfg_+0x21e>
    return (tag & 0x7ff00000) >> 20;
 801ec04:	f3c6 560a 	ubfx	r6, r6, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 801ec08:	2e01      	cmp	r6, #1
 801ec0a:	f040 80e0 	bne.w	801edce <lfs_file_opencfg_+0x23a>
    } else if (flags & LFS_O_TRUNC) {
 801ec0e:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 801ec12:	d042      	beq.n	801ec9a <lfs_file_opencfg_+0x106>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 801ec14:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 801ec18:	ea4f 2989 	mov.w	r9, r9, lsl #10
 801ec1c:	f049 5900 	orr.w	r9, r9, #536870912	@ 0x20000000
 801ec20:	f449 1980 	orr.w	r9, r9, #1048576	@ 0x100000
        file->flags |= LFS_F_DIRTY;
 801ec24:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ec26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ec2a:	6323      	str	r3, [r4, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801ec2c:	2500      	movs	r5, #0
 801ec2e:	e064      	b.n	801ecfa <lfs_file_opencfg_+0x166>
        if (!(flags & LFS_O_CREAT)) {
 801ec30:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801ec34:	f000 80bf 	beq.w	801edb6 <lfs_file_opencfg_+0x222>
        lfs_size_t nlen = strlen(path);
 801ec38:	9d03      	ldr	r5, [sp, #12]
 801ec3a:	4628      	mov	r0, r5
 801ec3c:	f7f1 fb30 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801ec40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ec42:	4283      	cmp	r3, r0
 801ec44:	d202      	bcs.n	801ec4c <lfs_file_opencfg_+0xb8>
            err = LFS_ERR_NAMETOOLONG;
 801ec46:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801ec4a:	e0b4      	b.n	801edb6 <lfs_file_opencfg_+0x222>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801ec4c:	88a3      	ldrh	r3, [r4, #4]
 801ec4e:	029b      	lsls	r3, r3, #10
 801ec50:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801ec54:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801ec58:	9204      	str	r2, [sp, #16]
 801ec5a:	2200      	movs	r2, #0
 801ec5c:	9205      	str	r2, [sp, #20]
 801ec5e:	4318      	orrs	r0, r3
 801ec60:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 801ec64:	9006      	str	r0, [sp, #24]
 801ec66:	9507      	str	r5, [sp, #28]
 801ec68:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801ec6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ec70:	9308      	str	r3, [sp, #32]
 801ec72:	9209      	str	r2, [sp, #36]	@ 0x24
 801ec74:	2303      	movs	r3, #3
 801ec76:	aa04      	add	r2, sp, #16
 801ec78:	4641      	mov	r1, r8
 801ec7a:	4638      	mov	r0, r7
 801ec7c:	f7fe ffa0 	bl	801dbc0 <lfs_dir_commit>
 801ec80:	4606      	mov	r6, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801ec82:	f110 0f1c 	cmn.w	r0, #28
 801ec86:	d005      	beq.n	801ec94 <lfs_file_opencfg_+0x100>
        if (err) {
 801ec88:	2800      	cmp	r0, #0
 801ec8a:	f040 8094 	bne.w	801edb6 <lfs_file_opencfg_+0x222>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 801ec8e:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 801ede4 <lfs_file_opencfg_+0x250>
 801ec92:	e7cb      	b.n	801ec2c <lfs_file_opencfg_+0x98>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801ec94:	f06f 0623 	mvn.w	r6, #35	@ 0x23
            goto cleanup;
 801ec98:	e08d      	b.n	801edb6 <lfs_file_opencfg_+0x222>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 801ec9a:	88a3      	ldrh	r3, [r4, #4]
 801ec9c:	029b      	lsls	r3, r3, #10
 801ec9e:	f104 0228 	add.w	r2, r4, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801eca2:	9200      	str	r2, [sp, #0]
 801eca4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801eca8:	f043 0308 	orr.w	r3, r3, #8
 801ecac:	4a4b      	ldr	r2, [pc, #300]	@ (801eddc <lfs_file_opencfg_+0x248>)
 801ecae:	4641      	mov	r1, r8
 801ecb0:	4638      	mov	r0, r7
 801ecb2:	f7fc f967 	bl	801af84 <lfs_dir_get>
        if (tag < 0) {
 801ecb6:	f1b0 0900 	subs.w	r9, r0, #0
 801ecba:	dab7      	bge.n	801ec2c <lfs_file_opencfg_+0x98>
            err = tag;
 801ecbc:	464e      	mov	r6, r9
 801ecbe:	e07a      	b.n	801edb6 <lfs_file_opencfg_+0x222>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 801ecc0:	685b      	ldr	r3, [r3, #4]
 801ecc2:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801ecc6:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 801ecca:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 801ecce:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 801ecd2:	88a3      	ldrh	r3, [r4, #4]
 801ecd4:	029b      	lsls	r3, r3, #10
 801ecd6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801ecda:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801ecdc:	6849      	ldr	r1, [r1, #4]
 801ecde:	9100      	str	r1, [sp, #0]
 801ece0:	4313      	orrs	r3, r2
 801ece2:	4a3f      	ldr	r2, [pc, #252]	@ (801ede0 <lfs_file_opencfg_+0x24c>)
 801ece4:	4641      	mov	r1, r8
 801ece6:	4638      	mov	r0, r7
 801ece8:	f7fc f94c 	bl	801af84 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 801ecec:	1e06      	subs	r6, r0, #0
 801ecee:	da0c      	bge.n	801ed0a <lfs_file_opencfg_+0x176>
 801ecf0:	f116 0f02 	cmn.w	r6, #2
 801ecf4:	d009      	beq.n	801ed0a <lfs_file_opencfg_+0x176>
 801ecf6:	e05e      	b.n	801edb6 <lfs_file_opencfg_+0x222>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801ecf8:	3501      	adds	r5, #1
 801ecfa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801ecfc:	689a      	ldr	r2, [r3, #8]
 801ecfe:	42aa      	cmp	r2, r5
 801ed00:	d915      	bls.n	801ed2e <lfs_file_opencfg_+0x19a>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 801ed02:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801ed04:	f012 0f01 	tst.w	r2, #1
 801ed08:	d1da      	bne.n	801ecc0 <lfs_file_opencfg_+0x12c>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801ed0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ed0c:	f013 0f02 	tst.w	r3, #2
 801ed10:	d0f2      	beq.n	801ecf8 <lfs_file_opencfg_+0x164>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 801ed12:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801ed14:	6852      	ldr	r2, [r2, #4]
 801ed16:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801ed1a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801ed1e:	6891      	ldr	r1, [r2, #8]
 801ed20:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801ed22:	4291      	cmp	r1, r2
 801ed24:	d856      	bhi.n	801edd4 <lfs_file_opencfg_+0x240>
            file->flags |= LFS_F_DIRTY;
 801ed26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ed2a:	6323      	str	r3, [r4, #48]	@ 0x30
 801ed2c:	e7e4      	b.n	801ecf8 <lfs_file_opencfg_+0x164>
    if (file->cfg->buffer) {
 801ed2e:	681b      	ldr	r3, [r3, #0]
 801ed30:	b16b      	cbz	r3, 801ed4e <lfs_file_opencfg_+0x1ba>
        file->cache.buffer = file->cfg->buffer;
 801ed32:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_cache_zero(lfs, &file->cache);
 801ed34:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801ed38:	4638      	mov	r0, r7
 801ed3a:	f7fb ff55 	bl	801abe8 <lfs_cache_zero>
    return (tag & 0x7ff00000) >> 20;
 801ed3e:	f3c9 520a 	ubfx	r2, r9, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801ed42:	f240 2301 	movw	r3, #513	@ 0x201
 801ed46:	429a      	cmp	r2, r3
 801ed48:	d00b      	beq.n	801ed62 <lfs_file_opencfg_+0x1ce>
    return 0;
 801ed4a:	2600      	movs	r6, #0
 801ed4c:	e03b      	b.n	801edc6 <lfs_file_opencfg_+0x232>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801ed4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
    return malloc(size);
 801ed50:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801ed52:	f7fb fb09 	bl	801a368 <pvPortMalloc>
 801ed56:	64e0      	str	r0, [r4, #76]	@ 0x4c
        if (!file->cache.buffer) {
 801ed58:	2800      	cmp	r0, #0
 801ed5a:	d1eb      	bne.n	801ed34 <lfs_file_opencfg_+0x1a0>
            err = LFS_ERR_NOMEM;
 801ed5c:	f06f 060b 	mvn.w	r6, #11
 801ed60:	e029      	b.n	801edb6 <lfs_file_opencfg_+0x222>
        file->ctz.head = LFS_BLOCK_INLINE;
 801ed62:	f06f 0101 	mvn.w	r1, #1
 801ed66:	62a1      	str	r1, [r4, #40]	@ 0x28
    return tag & 0x000003ff;
 801ed68:	f3c9 0209 	ubfx	r2, r9, #0, #10
        file->ctz.size = lfs_tag_size(tag);
 801ed6c:	62e2      	str	r2, [r4, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 801ed6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ed70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ed74:	6323      	str	r3, [r4, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 801ed76:	6421      	str	r1, [r4, #64]	@ 0x40
        file->cache.off = 0;
 801ed78:	2300      	movs	r3, #0
 801ed7a:	6463      	str	r3, [r4, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 801ed7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ed7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ed80:	64a3      	str	r3, [r4, #72]	@ 0x48
        if (file->ctz.size > 0) {
 801ed82:	b90a      	cbnz	r2, 801ed88 <lfs_file_opencfg_+0x1f4>
    return 0;
 801ed84:	2600      	movs	r6, #0
 801ed86:	e01e      	b.n	801edc6 <lfs_file_opencfg_+0x232>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 801ed88:	88a1      	ldrh	r1, [r4, #4]
    return (a < b) ? a : b;
 801ed8a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801ed8e:	4293      	cmp	r3, r2
 801ed90:	bf28      	it	cs
 801ed92:	4613      	movcs	r3, r2
 801ed94:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
                    file->cache.buffer);
 801ed98:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801ed9a:	9200      	str	r2, [sp, #0]
 801ed9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801eda0:	4a0e      	ldr	r2, [pc, #56]	@ (801eddc <lfs_file_opencfg_+0x248>)
 801eda2:	4641      	mov	r1, r8
 801eda4:	4638      	mov	r0, r7
 801eda6:	f7fc f8ed 	bl	801af84 <lfs_dir_get>
            if (res < 0) {
 801edaa:	1e06      	subs	r6, r0, #0
 801edac:	db03      	blt.n	801edb6 <lfs_file_opencfg_+0x222>
    return 0;
 801edae:	2600      	movs	r6, #0
 801edb0:	e009      	b.n	801edc6 <lfs_file_opencfg_+0x232>
        err = LFS_ERR_EXIST;
 801edb2:	f06f 0610 	mvn.w	r6, #16
    file->flags |= LFS_F_ERRED;
 801edb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801edb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801edbc:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs_file_close_(lfs, file);
 801edbe:	4621      	mov	r1, r4
 801edc0:	4638      	mov	r0, r7
 801edc2:	f7ff fbfd 	bl	801e5c0 <lfs_file_close_>
}
 801edc6:	4630      	mov	r0, r6
 801edc8:	b00b      	add	sp, #44	@ 0x2c
 801edca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = LFS_ERR_ISDIR;
 801edce:	f06f 0614 	mvn.w	r6, #20
 801edd2:	e7f0      	b.n	801edb6 <lfs_file_opencfg_+0x222>
                err = LFS_ERR_NOSPC;
 801edd4:	f06f 061b 	mvn.w	r6, #27
 801edd8:	e7ed      	b.n	801edb6 <lfs_file_opencfg_+0x222>
 801edda:	bf00      	nop
 801eddc:	700ffc00 	.word	0x700ffc00
 801ede0:	7ffffc00 	.word	0x7ffffc00
 801ede4:	20100000 	.word	0x20100000

0801ede8 <lfs_file_open_>:
        const char *path, int flags) {
 801ede8:	b510      	push	{r4, lr}
 801edea:	b082      	sub	sp, #8
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 801edec:	4c02      	ldr	r4, [pc, #8]	@ (801edf8 <lfs_file_open_+0x10>)
 801edee:	9400      	str	r4, [sp, #0]
 801edf0:	f7ff fed0 	bl	801eb94 <lfs_file_opencfg_>
}
 801edf4:	b002      	add	sp, #8
 801edf6:	bd10      	pop	{r4, pc}
 801edf8:	0803915c 	.word	0x0803915c

0801edfc <lfs_mkdir_>:
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 801edfc:	b530      	push	{r4, r5, lr}
 801edfe:	b0ab      	sub	sp, #172	@ 0xac
 801ee00:	4604      	mov	r4, r0
 801ee02:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
 801ee04:	f7fe ff84 	bl	801dd10 <lfs_fs_forceconsistency>
    if (err) {
 801ee08:	4603      	mov	r3, r0
 801ee0a:	b110      	cbz	r0, 801ee12 <lfs_mkdir_+0x16>
}
 801ee0c:	4618      	mov	r0, r3
 801ee0e:	b02b      	add	sp, #172	@ 0xac
 801ee10:	bd30      	pop	{r4, r5, pc}
    cwd.next = lfs->mlist;
 801ee12:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801ee14:	931c      	str	r3, [sp, #112]	@ 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 801ee16:	f10d 036e 	add.w	r3, sp, #110	@ 0x6e
 801ee1a:	aa01      	add	r2, sp, #4
 801ee1c:	a91e      	add	r1, sp, #120	@ 0x78
 801ee1e:	4620      	mov	r0, r4
 801ee20:	f7ff fbe2 	bl	801e5e8 <lfs_dir_find>
 801ee24:	4603      	mov	r3, r0
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 801ee26:	f110 0f02 	cmn.w	r0, #2
 801ee2a:	d12f      	bne.n	801ee8c <lfs_mkdir_+0x90>
 801ee2c:	f8bd 106e 	ldrh.w	r1, [sp, #110]	@ 0x6e
 801ee30:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801ee34:	4291      	cmp	r1, r2
 801ee36:	d029      	beq.n	801ee8c <lfs_mkdir_+0x90>
    lfs_size_t nlen = strlen(path);
 801ee38:	9801      	ldr	r0, [sp, #4]
 801ee3a:	f7f1 fa31 	bl	80102a0 <strlen>
 801ee3e:	4605      	mov	r5, r0
    if (nlen > lfs->name_max) {
 801ee40:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801ee42:	4283      	cmp	r3, r0
 801ee44:	f0c0 8089 	bcc.w	801ef5a <lfs_mkdir_+0x15e>
    lfs_alloc_ckpoint(lfs);
 801ee48:	4620      	mov	r0, r4
 801ee4a:	f7fb fdad 	bl	801a9a8 <lfs_alloc_ckpoint>
    err = lfs_dir_alloc(lfs, &dir);
 801ee4e:	a913      	add	r1, sp, #76	@ 0x4c
 801ee50:	4620      	mov	r0, r4
 801ee52:	f7fd f9f3 	bl	801c23c <lfs_dir_alloc>
    if (err) {
 801ee56:	4603      	mov	r3, r0
 801ee58:	2800      	cmp	r0, #0
 801ee5a:	d1d7      	bne.n	801ee0c <lfs_mkdir_+0x10>
    lfs_mdir_t pred = cwd.m;
 801ee5c:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 801ee60:	f10d 0e78 	add.w	lr, sp, #120	@ 0x78
 801ee64:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ee68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ee6c:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801ee70:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while (pred.split) {
 801ee74:	f89d 3043 	ldrb.w	r3, [sp, #67]	@ 0x43
 801ee78:	b16b      	cbz	r3, 801ee96 <lfs_mkdir_+0x9a>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 801ee7a:	aa11      	add	r2, sp, #68	@ 0x44
 801ee7c:	a90b      	add	r1, sp, #44	@ 0x2c
 801ee7e:	4620      	mov	r0, r4
 801ee80:	f7fd f86e 	bl	801bf60 <lfs_dir_fetch>
        if (err) {
 801ee84:	4603      	mov	r3, r0
 801ee86:	2800      	cmp	r0, #0
 801ee88:	d0f4      	beq.n	801ee74 <lfs_mkdir_+0x78>
 801ee8a:	e7bf      	b.n	801ee0c <lfs_mkdir_+0x10>
        return (err < 0) ? err : LFS_ERR_EXIST;
 801ee8c:	2b00      	cmp	r3, #0
 801ee8e:	dbbd      	blt.n	801ee0c <lfs_mkdir_+0x10>
 801ee90:	f06f 0310 	mvn.w	r3, #16
 801ee94:	e7ba      	b.n	801ee0c <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 801ee96:	4b32      	ldr	r3, [pc, #200]	@ (801ef60 <lfs_mkdir_+0x164>)
 801ee98:	9326      	str	r3, [sp, #152]	@ 0x98
 801ee9a:	ab11      	add	r3, sp, #68	@ 0x44
 801ee9c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ee9e:	2301      	movs	r3, #1
 801eea0:	aa26      	add	r2, sp, #152	@ 0x98
 801eea2:	a913      	add	r1, sp, #76	@ 0x4c
 801eea4:	4620      	mov	r0, r4
 801eea6:	f7fe fe8b 	bl	801dbc0 <lfs_dir_commit>
    if (err) {
 801eeaa:	4603      	mov	r3, r0
 801eeac:	2800      	cmp	r0, #0
 801eeae:	d1ad      	bne.n	801ee0c <lfs_mkdir_+0x10>
    if (cwd.m.split) {
 801eeb0:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801eeb4:	bb33      	cbnz	r3, 801ef04 <lfs_mkdir_+0x108>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801eeb6:	f8bd 306e 	ldrh.w	r3, [sp, #110]	@ 0x6e
 801eeba:	029b      	lsls	r3, r3, #10
 801eebc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801eec0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801eec4:	9203      	str	r2, [sp, #12]
 801eec6:	2200      	movs	r2, #0
 801eec8:	9204      	str	r2, [sp, #16]
 801eeca:	431d      	orrs	r5, r3
 801eecc:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 801eed0:	9505      	str	r5, [sp, #20]
 801eed2:	9a01      	ldr	r2, [sp, #4]
 801eed4:	9206      	str	r2, [sp, #24]
 801eed6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801eeda:	f043 0308 	orr.w	r3, r3, #8
 801eede:	9307      	str	r3, [sp, #28]
 801eee0:	ab13      	add	r3, sp, #76	@ 0x4c
 801eee2:	9308      	str	r3, [sp, #32]
 801eee4:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801eee8:	2b00      	cmp	r3, #0
 801eeea:	d134      	bne.n	801ef56 <lfs_mkdir_+0x15a>
 801eeec:	4b1c      	ldr	r3, [pc, #112]	@ (801ef60 <lfs_mkdir_+0x164>)
 801eeee:	9309      	str	r3, [sp, #36]	@ 0x24
 801eef0:	ab13      	add	r3, sp, #76	@ 0x4c
 801eef2:	930a      	str	r3, [sp, #40]	@ 0x28
 801eef4:	2304      	movs	r3, #4
 801eef6:	aa03      	add	r2, sp, #12
 801eef8:	a91e      	add	r1, sp, #120	@ 0x78
 801eefa:	4620      	mov	r0, r4
 801eefc:	f7fe fe60 	bl	801dbc0 <lfs_dir_commit>
 801ef00:	4603      	mov	r3, r0
    if (err) {
 801ef02:	e783      	b.n	801ee0c <lfs_mkdir_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801ef04:	2101      	movs	r1, #1
 801ef06:	4620      	mov	r0, r4
 801ef08:	f7fb fe3e 	bl	801ab88 <lfs_fs_preporphans>
        if (err) {
 801ef0c:	4603      	mov	r3, r0
 801ef0e:	2800      	cmp	r0, #0
 801ef10:	f47f af7c 	bne.w	801ee0c <lfs_mkdir_+0x10>
        cwd.type = 0;
 801ef14:	2300      	movs	r3, #0
 801ef16:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
        cwd.id = 0;
 801ef1a:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
        lfs->mlist = &cwd;
 801ef1e:	ab1c      	add	r3, sp, #112	@ 0x70
 801ef20:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 801ef22:	4b0f      	ldr	r3, [pc, #60]	@ (801ef60 <lfs_mkdir_+0x164>)
 801ef24:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ef26:	ab13      	add	r3, sp, #76	@ 0x4c
 801ef28:	9329      	str	r3, [sp, #164]	@ 0xa4
 801ef2a:	2301      	movs	r3, #1
 801ef2c:	aa28      	add	r2, sp, #160	@ 0xa0
 801ef2e:	a90b      	add	r1, sp, #44	@ 0x2c
 801ef30:	4620      	mov	r0, r4
 801ef32:	f7fe fe45 	bl	801dbc0 <lfs_dir_commit>
        if (err) {
 801ef36:	4603      	mov	r3, r0
 801ef38:	b110      	cbz	r0, 801ef40 <lfs_mkdir_+0x144>
            lfs->mlist = cwd.next;
 801ef3a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801ef3c:	62a2      	str	r2, [r4, #40]	@ 0x28
            return err;
 801ef3e:	e765      	b.n	801ee0c <lfs_mkdir_+0x10>
        lfs->mlist = cwd.next;
 801ef40:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ef42:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 801ef44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801ef48:	4620      	mov	r0, r4
 801ef4a:	f7fb fe1d 	bl	801ab88 <lfs_fs_preporphans>
        if (err) {
 801ef4e:	4603      	mov	r3, r0
 801ef50:	2800      	cmp	r0, #0
 801ef52:	d0b0      	beq.n	801eeb6 <lfs_mkdir_+0xba>
 801ef54:	e75a      	b.n	801ee0c <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801ef56:	2300      	movs	r3, #0
 801ef58:	e7c9      	b.n	801eeee <lfs_mkdir_+0xf2>
        return LFS_ERR_NAMETOOLONG;
 801ef5a:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 801ef5e:	e755      	b.n	801ee0c <lfs_mkdir_+0x10>
 801ef60:	600ffc08 	.word	0x600ffc08

0801ef64 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
 801ef64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ef66:	b085      	sub	sp, #20
 801ef68:	461d      	mov	r5, r3
    if (id == 0x3ff) {
 801ef6a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ef6e:	429a      	cmp	r2, r3
 801ef70:	d02b      	beq.n	801efca <lfs_dir_getinfo+0x66>
 801ef72:	4604      	mov	r4, r0
 801ef74:	460e      	mov	r6, r1
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 801ef76:	0297      	lsls	r7, r2, #10
 801ef78:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801ef7a:	3301      	adds	r3, #1
 801ef7c:	f105 0108 	add.w	r1, r5, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 801ef80:	9100      	str	r1, [sp, #0]
 801ef82:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 801ef86:	4a19      	ldr	r2, [pc, #100]	@ (801efec <lfs_dir_getinfo+0x88>)
 801ef88:	4631      	mov	r1, r6
 801ef8a:	f7fb fffb 	bl	801af84 <lfs_dir_get>
    if (tag < 0) {
 801ef8e:	2800      	cmp	r0, #0
 801ef90:	db21      	blt.n	801efd6 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801ef92:	f3c0 520a 	ubfx	r2, r0, #20, #11
    info->type = lfs_tag_type3(tag);
 801ef96:	702a      	strb	r2, [r5, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801ef98:	ab02      	add	r3, sp, #8
 801ef9a:	9300      	str	r3, [sp, #0]
 801ef9c:	f047 5300 	orr.w	r3, r7, #536870912	@ 0x20000000
 801efa0:	f043 0308 	orr.w	r3, r3, #8
 801efa4:	4a12      	ldr	r2, [pc, #72]	@ (801eff0 <lfs_dir_getinfo+0x8c>)
 801efa6:	4631      	mov	r1, r6
 801efa8:	4620      	mov	r0, r4
 801efaa:	f7fb ffeb 	bl	801af84 <lfs_dir_get>
    if (tag < 0) {
 801efae:	2800      	cmp	r0, #0
 801efb0:	db11      	blt.n	801efd6 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801efb2:	f3c0 530a 	ubfx	r3, r0, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801efb6:	f240 2202 	movw	r2, #514	@ 0x202
 801efba:	4293      	cmp	r3, r2
 801efbc:	d00d      	beq.n	801efda <lfs_dir_getinfo+0x76>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801efbe:	f240 2201 	movw	r2, #513	@ 0x201
 801efc2:	4293      	cmp	r3, r2
 801efc4:	d00d      	beq.n	801efe2 <lfs_dir_getinfo+0x7e>
    return 0;
 801efc6:	2000      	movs	r0, #0
 801efc8:	e005      	b.n	801efd6 <lfs_dir_getinfo+0x72>
        strcpy(info->name, "/");
 801efca:	4b0a      	ldr	r3, [pc, #40]	@ (801eff4 <lfs_dir_getinfo+0x90>)
 801efcc:	881b      	ldrh	r3, [r3, #0]
 801efce:	812b      	strh	r3, [r5, #8]
        info->type = LFS_TYPE_DIR;
 801efd0:	2302      	movs	r3, #2
 801efd2:	702b      	strb	r3, [r5, #0]
        return 0;
 801efd4:	2000      	movs	r0, #0
}
 801efd6:	b005      	add	sp, #20
 801efd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        info->size = ctz.size;
 801efda:	9b03      	ldr	r3, [sp, #12]
 801efdc:	606b      	str	r3, [r5, #4]
    return 0;
 801efde:	2000      	movs	r0, #0
 801efe0:	e7f9      	b.n	801efd6 <lfs_dir_getinfo+0x72>
    return tag & 0x000003ff;
 801efe2:	f3c0 0009 	ubfx	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
 801efe6:	6068      	str	r0, [r5, #4]
    return 0;
 801efe8:	2000      	movs	r0, #0
 801efea:	e7f4      	b.n	801efd6 <lfs_dir_getinfo+0x72>
 801efec:	780ffc00 	.word	0x780ffc00
 801eff0:	700ffc00 	.word	0x700ffc00
 801eff4:	0803984c 	.word	0x0803984c

0801eff8 <lfs_stat_>:
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801eff8:	b530      	push	{r4, r5, lr}
 801effa:	b08b      	sub	sp, #44	@ 0x2c
 801effc:	4604      	mov	r4, r0
 801effe:	9101      	str	r1, [sp, #4]
 801f000:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801f002:	2300      	movs	r3, #0
 801f004:	aa01      	add	r2, sp, #4
 801f006:	a902      	add	r1, sp, #8
 801f008:	f7ff faee 	bl	801e5e8 <lfs_dir_find>
    if (tag < 0) {
 801f00c:	2800      	cmp	r0, #0
 801f00e:	db06      	blt.n	801f01e <lfs_stat_+0x26>
    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 801f010:	462b      	mov	r3, r5
 801f012:	f3c0 2289 	ubfx	r2, r0, #10, #10
 801f016:	a902      	add	r1, sp, #8
 801f018:	4620      	mov	r0, r4
 801f01a:	f7ff ffa3 	bl	801ef64 <lfs_dir_getinfo>
}
 801f01e:	b00b      	add	sp, #44	@ 0x2c
 801f020:	bd30      	pop	{r4, r5, pc}
	...

0801f024 <lfs_dir_read_>:
static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801f024:	b570      	push	{r4, r5, r6, lr}
 801f026:	4605      	mov	r5, r0
 801f028:	460c      	mov	r4, r1
 801f02a:	4616      	mov	r6, r2
    memset(info, 0, sizeof(*info));
 801f02c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 801f030:	2100      	movs	r1, #0
 801f032:	4630      	mov	r0, r6
 801f034:	f00d f924 	bl	802c280 <memset>
    if (dir->pos == 0) {
 801f038:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f03a:	b183      	cbz	r3, 801f05e <lfs_dir_read_+0x3a>
    } else if (dir->pos == 1) {
 801f03c:	2b01      	cmp	r3, #1
 801f03e:	d11f      	bne.n	801f080 <lfs_dir_read_+0x5c>
        info->type = LFS_TYPE_DIR;
 801f040:	4633      	mov	r3, r6
 801f042:	2202      	movs	r2, #2
 801f044:	f803 2b08 	strb.w	r2, [r3], #8
        strcpy(info->name, "..");
 801f048:	4a22      	ldr	r2, [pc, #136]	@ (801f0d4 <lfs_dir_read_+0xb0>)
 801f04a:	8811      	ldrh	r1, [r2, #0]
 801f04c:	7892      	ldrb	r2, [r2, #2]
 801f04e:	8131      	strh	r1, [r6, #8]
 801f050:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 801f052:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f054:	3301      	adds	r3, #1
 801f056:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801f058:	f04f 0c01 	mov.w	ip, #1
 801f05c:	e034      	b.n	801f0c8 <lfs_dir_read_+0xa4>
        info->type = LFS_TYPE_DIR;
 801f05e:	2302      	movs	r3, #2
 801f060:	7033      	strb	r3, [r6, #0]
        strcpy(info->name, ".");
 801f062:	4b1d      	ldr	r3, [pc, #116]	@ (801f0d8 <lfs_dir_read_+0xb4>)
 801f064:	881b      	ldrh	r3, [r3, #0]
 801f066:	8133      	strh	r3, [r6, #8]
        dir->pos += 1;
 801f068:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f06a:	3301      	adds	r3, #1
 801f06c:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801f06e:	f04f 0c01 	mov.w	ip, #1
 801f072:	e029      	b.n	801f0c8 <lfs_dir_read_+0xa4>
        dir->id += 1;
 801f074:	88a1      	ldrh	r1, [r4, #4]
 801f076:	3101      	adds	r1, #1
 801f078:	80a1      	strh	r1, [r4, #4]
        if (err != LFS_ERR_NOENT) {
 801f07a:	f11c 0f02 	cmn.w	ip, #2
 801f07e:	d11e      	bne.n	801f0be <lfs_dir_read_+0x9a>
        if (dir->id == dir->m.count) {
 801f080:	88a3      	ldrh	r3, [r4, #4]
 801f082:	8ba1      	ldrh	r1, [r4, #28]
 801f084:	428b      	cmp	r3, r1
 801f086:	d10c      	bne.n	801f0a2 <lfs_dir_read_+0x7e>
            if (!dir->m.split) {
 801f088:	7fe3      	ldrb	r3, [r4, #31]
 801f08a:	b1fb      	cbz	r3, 801f0cc <lfs_dir_read_+0xa8>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 801f08c:	f104 0220 	add.w	r2, r4, #32
 801f090:	f104 0108 	add.w	r1, r4, #8
 801f094:	4628      	mov	r0, r5
 801f096:	f7fc ff63 	bl	801bf60 <lfs_dir_fetch>
            if (err) {
 801f09a:	4684      	mov	ip, r0
 801f09c:	b9a0      	cbnz	r0, 801f0c8 <lfs_dir_read_+0xa4>
            dir->id = 0;
 801f09e:	2300      	movs	r3, #0
 801f0a0:	80a3      	strh	r3, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 801f0a2:	4633      	mov	r3, r6
 801f0a4:	88a2      	ldrh	r2, [r4, #4]
 801f0a6:	f104 0108 	add.w	r1, r4, #8
 801f0aa:	4628      	mov	r0, r5
 801f0ac:	f7ff ff5a 	bl	801ef64 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
 801f0b0:	4684      	mov	ip, r0
 801f0b2:	2800      	cmp	r0, #0
 801f0b4:	d0de      	beq.n	801f074 <lfs_dir_read_+0x50>
 801f0b6:	f110 0f02 	cmn.w	r0, #2
 801f0ba:	d0db      	beq.n	801f074 <lfs_dir_read_+0x50>
 801f0bc:	e004      	b.n	801f0c8 <lfs_dir_read_+0xa4>
    dir->pos += 1;
 801f0be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f0c0:	3301      	adds	r3, #1
 801f0c2:	62a3      	str	r3, [r4, #40]	@ 0x28
    return true;
 801f0c4:	f04f 0c01 	mov.w	ip, #1
}
 801f0c8:	4660      	mov	r0, ip
 801f0ca:	bd70      	pop	{r4, r5, r6, pc}
                return false;
 801f0cc:	f04f 0c00 	mov.w	ip, #0
 801f0d0:	e7fa      	b.n	801f0c8 <lfs_dir_read_+0xa4>
 801f0d2:	bf00      	nop
 801f0d4:	08039030 	.word	0x08039030
 801f0d8:	08035978 	.word	0x08035978

0801f0dc <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 801f0dc:	b570      	push	{r4, r5, r6, lr}
 801f0de:	4605      	mov	r5, r0
 801f0e0:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801f0e2:	694b      	ldr	r3, [r1, #20]
 801f0e4:	4608      	mov	r0, r1
 801f0e6:	4798      	blx	r3
    if (err) {
 801f0e8:	4606      	mov	r6, r0
 801f0ea:	b108      	cbz	r0, 801f0f0 <lfs_format+0x14>
    err = lfs_format_(lfs, cfg);

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801f0ec:	4630      	mov	r0, r6
 801f0ee:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_format_(lfs, cfg);
 801f0f0:	4621      	mov	r1, r4
 801f0f2:	4628      	mov	r0, r5
 801f0f4:	f7ff f860 	bl	801e1b8 <lfs_format_>
 801f0f8:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801f0fa:	69a3      	ldr	r3, [r4, #24]
 801f0fc:	4620      	mov	r0, r4
 801f0fe:	4798      	blx	r3
    return err;
 801f100:	e7f4      	b.n	801f0ec <lfs_format+0x10>

0801f102 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 801f102:	b570      	push	{r4, r5, r6, lr}
 801f104:	4605      	mov	r5, r0
 801f106:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801f108:	694b      	ldr	r3, [r1, #20]
 801f10a:	4608      	mov	r0, r1
 801f10c:	4798      	blx	r3
    if (err) {
 801f10e:	4606      	mov	r6, r0
 801f110:	b108      	cbz	r0, 801f116 <lfs_mount+0x14>
    err = lfs_mount_(lfs, cfg);

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801f112:	4630      	mov	r0, r6
 801f114:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mount_(lfs, cfg);
 801f116:	4621      	mov	r1, r4
 801f118:	4628      	mov	r0, r5
 801f11a:	f7ff f8cb 	bl	801e2b4 <lfs_mount_>
 801f11e:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801f120:	69a3      	ldr	r3, [r4, #24]
 801f122:	4620      	mov	r0, r4
 801f124:	4798      	blx	r3
    return err;
 801f126:	e7f4      	b.n	801f112 <lfs_mount+0x10>

0801f128 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 801f128:	b570      	push	{r4, r5, r6, lr}
 801f12a:	4604      	mov	r4, r0
 801f12c:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f12e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f130:	6943      	ldr	r3, [r0, #20]
 801f132:	4798      	blx	r3
    if (err) {
 801f134:	4606      	mov	r6, r0
 801f136:	b108      	cbz	r0, 801f13c <lfs_remove+0x14>
    err = lfs_remove_(lfs, path);

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f138:	4630      	mov	r0, r6
 801f13a:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_remove_(lfs, path);
 801f13c:	4629      	mov	r1, r5
 801f13e:	4620      	mov	r0, r4
 801f140:	f7ff fb0e 	bl	801e760 <lfs_remove_>
 801f144:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f146:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f148:	6983      	ldr	r3, [r0, #24]
 801f14a:	4798      	blx	r3
    return err;
 801f14c:	e7f4      	b.n	801f138 <lfs_remove+0x10>

0801f14e <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801f14e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f150:	4604      	mov	r4, r0
 801f152:	460d      	mov	r5, r1
 801f154:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801f156:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f158:	6943      	ldr	r3, [r0, #20]
 801f15a:	4798      	blx	r3
    if (err) {
 801f15c:	4607      	mov	r7, r0
 801f15e:	b108      	cbz	r0, 801f164 <lfs_rename+0x16>
    err = lfs_rename_(lfs, oldpath, newpath);

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f160:	4638      	mov	r0, r7
 801f162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_rename_(lfs, oldpath, newpath);
 801f164:	4632      	mov	r2, r6
 801f166:	4629      	mov	r1, r5
 801f168:	4620      	mov	r0, r4
 801f16a:	f7ff fbb9 	bl	801e8e0 <lfs_rename_>
 801f16e:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f170:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f172:	6983      	ldr	r3, [r0, #24]
 801f174:	4798      	blx	r3
    return err;
 801f176:	e7f3      	b.n	801f160 <lfs_rename+0x12>

0801f178 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801f178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f17a:	4604      	mov	r4, r0
 801f17c:	460d      	mov	r5, r1
 801f17e:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801f180:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f182:	6943      	ldr	r3, [r0, #20]
 801f184:	4798      	blx	r3
    if (err) {
 801f186:	4607      	mov	r7, r0
 801f188:	b108      	cbz	r0, 801f18e <lfs_stat+0x16>
    err = lfs_stat_(lfs, path, info);

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f18a:	4638      	mov	r0, r7
 801f18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_stat_(lfs, path, info);
 801f18e:	4632      	mov	r2, r6
 801f190:	4629      	mov	r1, r5
 801f192:	4620      	mov	r0, r4
 801f194:	f7ff ff30 	bl	801eff8 <lfs_stat_>
 801f198:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f19a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f19c:	6983      	ldr	r3, [r0, #24]
 801f19e:	4798      	blx	r3
    return err;
 801f1a0:	e7f3      	b.n	801f18a <lfs_stat+0x12>
	...

0801f1a4 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 801f1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1a8:	4604      	mov	r4, r0
 801f1aa:	460d      	mov	r5, r1
 801f1ac:	4616      	mov	r6, r2
 801f1ae:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801f1b0:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f1b2:	6942      	ldr	r2, [r0, #20]
 801f1b4:	4790      	blx	r2
    if (err) {
 801f1b6:	4607      	mov	r7, r0
 801f1b8:	b110      	cbz	r0, 801f1c0 <lfs_file_open+0x1c>
    err = lfs_file_open_(lfs, file, path, flags);

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f1ba:	4638      	mov	r0, r7
 801f1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f1c0:	4629      	mov	r1, r5
 801f1c2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f1c4:	f7fb fbc7 	bl	801a956 <lfs_mlist_isopen>
 801f1c8:	b950      	cbnz	r0, 801f1e0 <lfs_file_open+0x3c>
    err = lfs_file_open_(lfs, file, path, flags);
 801f1ca:	4643      	mov	r3, r8
 801f1cc:	4632      	mov	r2, r6
 801f1ce:	4629      	mov	r1, r5
 801f1d0:	4620      	mov	r0, r4
 801f1d2:	f7ff fe09 	bl	801ede8 <lfs_file_open_>
 801f1d6:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f1d8:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f1da:	6983      	ldr	r3, [r0, #24]
 801f1dc:	4798      	blx	r3
    return err;
 801f1de:	e7ec      	b.n	801f1ba <lfs_file_open+0x16>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f1e0:	4b03      	ldr	r3, [pc, #12]	@ (801f1f0 <lfs_file_open+0x4c>)
 801f1e2:	4a04      	ldr	r2, [pc, #16]	@ (801f1f4 <lfs_file_open+0x50>)
 801f1e4:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 801f1e8:	4803      	ldr	r0, [pc, #12]	@ (801f1f8 <lfs_file_open+0x54>)
 801f1ea:	f00a faf7 	bl	80297dc <__assert_func>
 801f1ee:	bf00      	nop
 801f1f0:	08039034 	.word	0x08039034
 801f1f4:	08039168 	.word	0x08039168
 801f1f8:	080384b8 	.word	0x080384b8

0801f1fc <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 801f1fc:	b570      	push	{r4, r5, r6, lr}
 801f1fe:	4604      	mov	r4, r0
 801f200:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f202:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f204:	6943      	ldr	r3, [r0, #20]
 801f206:	4798      	blx	r3
    if (err) {
 801f208:	4606      	mov	r6, r0
 801f20a:	b108      	cbz	r0, 801f210 <lfs_file_close+0x14>
    err = lfs_file_close_(lfs, file);

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f20c:	4630      	mov	r0, r6
 801f20e:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f210:	4629      	mov	r1, r5
 801f212:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f214:	f7fb fb9f 	bl	801a956 <lfs_mlist_isopen>
 801f218:	b140      	cbz	r0, 801f22c <lfs_file_close+0x30>
    err = lfs_file_close_(lfs, file);
 801f21a:	4629      	mov	r1, r5
 801f21c:	4620      	mov	r0, r4
 801f21e:	f7ff f9cf 	bl	801e5c0 <lfs_file_close_>
 801f222:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f224:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f226:	6983      	ldr	r3, [r0, #24]
 801f228:	4798      	blx	r3
    return err;
 801f22a:	e7ef      	b.n	801f20c <lfs_file_close+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f22c:	4b03      	ldr	r3, [pc, #12]	@ (801f23c <lfs_file_close+0x40>)
 801f22e:	4a04      	ldr	r2, [pc, #16]	@ (801f240 <lfs_file_close+0x44>)
 801f230:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 801f234:	4803      	ldr	r0, [pc, #12]	@ (801f244 <lfs_file_close+0x48>)
 801f236:	f00a fad1 	bl	80297dc <__assert_func>
 801f23a:	bf00      	nop
 801f23c:	0803906c 	.word	0x0803906c
 801f240:	0803914c 	.word	0x0803914c
 801f244:	080384b8 	.word	0x080384b8

0801f248 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 801f248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f24c:	4604      	mov	r4, r0
 801f24e:	460d      	mov	r5, r1
 801f250:	4616      	mov	r6, r2
 801f252:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801f254:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f256:	6942      	ldr	r2, [r0, #20]
 801f258:	4790      	blx	r2
    if (err) {
 801f25a:	4607      	mov	r7, r0
 801f25c:	b110      	cbz	r0, 801f264 <lfs_file_read+0x1c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801f25e:	4638      	mov	r0, r7
 801f260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f264:	4629      	mov	r1, r5
 801f266:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f268:	f7fb fb75 	bl	801a956 <lfs_mlist_isopen>
 801f26c:	b150      	cbz	r0, 801f284 <lfs_file_read+0x3c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 801f26e:	4643      	mov	r3, r8
 801f270:	4632      	mov	r2, r6
 801f272:	4629      	mov	r1, r5
 801f274:	4620      	mov	r0, r4
 801f276:	f7fd fac1 	bl	801c7fc <lfs_file_read_>
 801f27a:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f27c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f27e:	6983      	ldr	r3, [r0, #24]
 801f280:	4798      	blx	r3
    return res;
 801f282:	e7ec      	b.n	801f25e <lfs_file_read+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f284:	4b03      	ldr	r3, [pc, #12]	@ (801f294 <lfs_file_read+0x4c>)
 801f286:	4a04      	ldr	r2, [pc, #16]	@ (801f298 <lfs_file_read+0x50>)
 801f288:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 801f28c:	4803      	ldr	r0, [pc, #12]	@ (801f29c <lfs_file_read+0x54>)
 801f28e:	f00a faa5 	bl	80297dc <__assert_func>
 801f292:	bf00      	nop
 801f294:	0803906c 	.word	0x0803906c
 801f298:	0803913c 	.word	0x0803913c
 801f29c:	080384b8 	.word	0x080384b8

0801f2a0 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 801f2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f2a4:	4604      	mov	r4, r0
 801f2a6:	460d      	mov	r5, r1
 801f2a8:	4616      	mov	r6, r2
 801f2aa:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801f2ac:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f2ae:	6942      	ldr	r2, [r0, #20]
 801f2b0:	4790      	blx	r2
    if (err) {
 801f2b2:	4607      	mov	r7, r0
 801f2b4:	b110      	cbz	r0, 801f2bc <lfs_file_write+0x1c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801f2b6:	4638      	mov	r0, r7
 801f2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f2bc:	4629      	mov	r1, r5
 801f2be:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f2c0:	f7fb fb49 	bl	801a956 <lfs_mlist_isopen>
 801f2c4:	b150      	cbz	r0, 801f2dc <lfs_file_write+0x3c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 801f2c6:	4643      	mov	r3, r8
 801f2c8:	4632      	mov	r2, r6
 801f2ca:	4629      	mov	r1, r5
 801f2cc:	4620      	mov	r0, r4
 801f2ce:	f7fd fb05 	bl	801c8dc <lfs_file_write_>
 801f2d2:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f2d4:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f2d6:	6983      	ldr	r3, [r0, #24]
 801f2d8:	4798      	blx	r3
    return res;
 801f2da:	e7ec      	b.n	801f2b6 <lfs_file_write+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f2dc:	4b03      	ldr	r3, [pc, #12]	@ (801f2ec <lfs_file_write+0x4c>)
 801f2de:	4a04      	ldr	r2, [pc, #16]	@ (801f2f0 <lfs_file_write+0x50>)
 801f2e0:	f641 0105 	movw	r1, #6149	@ 0x1805
 801f2e4:	4803      	ldr	r0, [pc, #12]	@ (801f2f4 <lfs_file_write+0x54>)
 801f2e6:	f00a fa79 	bl	80297dc <__assert_func>
 801f2ea:	bf00      	nop
 801f2ec:	0803906c 	.word	0x0803906c
 801f2f0:	0803911c 	.word	0x0803911c
 801f2f4:	080384b8 	.word	0x080384b8

0801f2f8 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 801f2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f2fc:	4604      	mov	r4, r0
 801f2fe:	460d      	mov	r5, r1
 801f300:	4616      	mov	r6, r2
 801f302:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801f304:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f306:	6942      	ldr	r2, [r0, #20]
 801f308:	4790      	blx	r2
    if (err) {
 801f30a:	4607      	mov	r7, r0
 801f30c:	b110      	cbz	r0, 801f314 <lfs_file_seek+0x1c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801f30e:	4638      	mov	r0, r7
 801f310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f314:	4629      	mov	r1, r5
 801f316:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f318:	f7fb fb1d 	bl	801a956 <lfs_mlist_isopen>
 801f31c:	b150      	cbz	r0, 801f334 <lfs_file_seek+0x3c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 801f31e:	4643      	mov	r3, r8
 801f320:	4632      	mov	r2, r6
 801f322:	4629      	mov	r1, r5
 801f324:	4620      	mov	r0, r4
 801f326:	f7fd fa8d 	bl	801c844 <lfs_file_seek_>
 801f32a:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f32c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f32e:	6983      	ldr	r3, [r0, #24]
 801f330:	4798      	blx	r3
    return res;
 801f332:	e7ec      	b.n	801f30e <lfs_file_seek+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f334:	4b03      	ldr	r3, [pc, #12]	@ (801f344 <lfs_file_seek+0x4c>)
 801f336:	4a04      	ldr	r2, [pc, #16]	@ (801f348 <lfs_file_seek+0x50>)
 801f338:	f641 0117 	movw	r1, #6167	@ 0x1817
 801f33c:	4803      	ldr	r0, [pc, #12]	@ (801f34c <lfs_file_seek+0x54>)
 801f33e:	f00a fa4d 	bl	80297dc <__assert_func>
 801f342:	bf00      	nop
 801f344:	0803906c 	.word	0x0803906c
 801f348:	080390fc 	.word	0x080390fc
 801f34c:	080384b8 	.word	0x080384b8

0801f350 <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 801f350:	b570      	push	{r4, r5, r6, lr}
 801f352:	4604      	mov	r4, r0
 801f354:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f356:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f358:	6943      	ldr	r3, [r0, #20]
 801f35a:	4798      	blx	r3
    if (err) {
 801f35c:	4606      	mov	r6, r0
 801f35e:	b108      	cbz	r0, 801f364 <lfs_file_tell+0x14>
    lfs_soff_t res = lfs_file_tell_(lfs, file);

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801f360:	4630      	mov	r0, r6
 801f362:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f364:	4629      	mov	r1, r5
 801f366:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f368:	f7fb faf5 	bl	801a956 <lfs_mlist_isopen>
 801f36c:	b140      	cbz	r0, 801f380 <lfs_file_tell+0x30>
    lfs_soff_t res = lfs_file_tell_(lfs, file);
 801f36e:	4629      	mov	r1, r5
 801f370:	4620      	mov	r0, r4
 801f372:	f7fb fba4 	bl	801aabe <lfs_file_tell_>
 801f376:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f378:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f37a:	6983      	ldr	r3, [r0, #24]
 801f37c:	4798      	blx	r3
    return res;
 801f37e:	e7ef      	b.n	801f360 <lfs_file_tell+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f380:	4b03      	ldr	r3, [pc, #12]	@ (801f390 <lfs_file_tell+0x40>)
 801f382:	4a04      	ldr	r2, [pc, #16]	@ (801f394 <lfs_file_tell+0x44>)
 801f384:	f641 0138 	movw	r1, #6200	@ 0x1838
 801f388:	4803      	ldr	r0, [pc, #12]	@ (801f398 <lfs_file_tell+0x48>)
 801f38a:	f00a fa27 	bl	80297dc <__assert_func>
 801f38e:	bf00      	nop
 801f390:	0803906c 	.word	0x0803906c
 801f394:	080390ec 	.word	0x080390ec
 801f398:	080384b8 	.word	0x080384b8

0801f39c <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 801f39c:	b570      	push	{r4, r5, r6, lr}
 801f39e:	4604      	mov	r4, r0
 801f3a0:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f3a2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f3a4:	6943      	ldr	r3, [r0, #20]
 801f3a6:	4798      	blx	r3
    if (err) {
 801f3a8:	4606      	mov	r6, r0
 801f3aa:	b108      	cbz	r0, 801f3b0 <lfs_mkdir+0x14>
    err = lfs_mkdir_(lfs, path);

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f3ac:	4630      	mov	r0, r6
 801f3ae:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mkdir_(lfs, path);
 801f3b0:	4629      	mov	r1, r5
 801f3b2:	4620      	mov	r0, r4
 801f3b4:	f7ff fd22 	bl	801edfc <lfs_mkdir_>
 801f3b8:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f3ba:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f3bc:	6983      	ldr	r3, [r0, #24]
 801f3be:	4798      	blx	r3
    return err;
 801f3c0:	e7f4      	b.n	801f3ac <lfs_mkdir+0x10>
	...

0801f3c4 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801f3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f3c6:	4604      	mov	r4, r0
 801f3c8:	460f      	mov	r7, r1
 801f3ca:	4615      	mov	r5, r2
    int err = LFS_LOCK(lfs->cfg);
 801f3cc:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f3ce:	6943      	ldr	r3, [r0, #20]
 801f3d0:	4798      	blx	r3
    if (err) {
 801f3d2:	4606      	mov	r6, r0
 801f3d4:	b108      	cbz	r0, 801f3da <lfs_dir_open+0x16>
    err = lfs_dir_open_(lfs, dir, path);

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f3d6:	4630      	mov	r0, r6
 801f3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801f3da:	4639      	mov	r1, r7
 801f3dc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f3de:	f7fb faba 	bl	801a956 <lfs_mlist_isopen>
 801f3e2:	b948      	cbnz	r0, 801f3f8 <lfs_dir_open+0x34>
    err = lfs_dir_open_(lfs, dir, path);
 801f3e4:	462a      	mov	r2, r5
 801f3e6:	4639      	mov	r1, r7
 801f3e8:	4620      	mov	r0, r4
 801f3ea:	f7ff fa31 	bl	801e850 <lfs_dir_open_>
 801f3ee:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f3f0:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f3f2:	6983      	ldr	r3, [r0, #24]
 801f3f4:	4798      	blx	r3
    return err;
 801f3f6:	e7ee      	b.n	801f3d6 <lfs_dir_open+0x12>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801f3f8:	4b03      	ldr	r3, [pc, #12]	@ (801f408 <lfs_dir_open+0x44>)
 801f3fa:	4a04      	ldr	r2, [pc, #16]	@ (801f40c <lfs_dir_open+0x48>)
 801f3fc:	f641 0174 	movw	r1, #6260	@ 0x1874
 801f400:	4803      	ldr	r0, [pc, #12]	@ (801f410 <lfs_dir_open+0x4c>)
 801f402:	f00a f9eb 	bl	80297dc <__assert_func>
 801f406:	bf00      	nop
 801f408:	080390a4 	.word	0x080390a4
 801f40c:	080390dc 	.word	0x080390dc
 801f410:	080384b8 	.word	0x080384b8

0801f414 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 801f414:	b570      	push	{r4, r5, r6, lr}
 801f416:	4604      	mov	r4, r0
 801f418:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f41a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f41c:	6943      	ldr	r3, [r0, #20]
 801f41e:	4798      	blx	r3
    if (err) {
 801f420:	4606      	mov	r6, r0
 801f422:	b108      	cbz	r0, 801f428 <lfs_dir_close+0x14>
    err = lfs_dir_close_(lfs, dir);

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f424:	4630      	mov	r0, r6
 801f426:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_dir_close_(lfs, dir);
 801f428:	4629      	mov	r1, r5
 801f42a:	4620      	mov	r0, r4
 801f42c:	f7fb fb42 	bl	801aab4 <lfs_dir_close_>
 801f430:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f432:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f434:	6983      	ldr	r3, [r0, #24]
 801f436:	4798      	blx	r3
    return err;
 801f438:	e7f4      	b.n	801f424 <lfs_dir_close+0x10>

0801f43a <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801f43a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f43c:	4604      	mov	r4, r0
 801f43e:	460d      	mov	r5, r1
 801f440:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801f442:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f444:	6943      	ldr	r3, [r0, #20]
 801f446:	4798      	blx	r3
    if (err) {
 801f448:	4607      	mov	r7, r0
 801f44a:	b108      	cbz	r0, 801f450 <lfs_dir_read+0x16>
    err = lfs_dir_read_(lfs, dir, info);

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f44c:	4638      	mov	r0, r7
 801f44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_dir_read_(lfs, dir, info);
 801f450:	4632      	mov	r2, r6
 801f452:	4629      	mov	r1, r5
 801f454:	4620      	mov	r0, r4
 801f456:	f7ff fde5 	bl	801f024 <lfs_dir_read_>
 801f45a:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f45c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f45e:	6983      	ldr	r3, [r0, #24]
 801f460:	4798      	blx	r3
    return err;
 801f462:	e7f3      	b.n	801f44c <lfs_dir_read+0x12>

0801f464 <lfs_crc>:
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
 801f464:	f04f 0c00 	mov.w	ip, #0
 801f468:	4594      	cmp	ip, r2
 801f46a:	d218      	bcs.n	801f49e <lfs_crc+0x3a>
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 801f46c:	b530      	push	{r4, r5, lr}
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 801f46e:	f811 300c 	ldrb.w	r3, [r1, ip]
 801f472:	ea83 0e00 	eor.w	lr, r3, r0
 801f476:	f00e 0e0f 	and.w	lr, lr, #15
 801f47a:	4c09      	ldr	r4, [pc, #36]	@ (801f4a0 <lfs_crc+0x3c>)
 801f47c:	f854 502e 	ldr.w	r5, [r4, lr, lsl #2]
 801f480:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 801f484:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 801f488:	f003 030f 	and.w	r3, r3, #15
 801f48c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801f490:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
 801f494:	f10c 0c01 	add.w	ip, ip, #1
 801f498:	4594      	cmp	ip, r2
 801f49a:	d3e8      	bcc.n	801f46e <lfs_crc+0xa>
    }

    return crc;
}
 801f49c:	bd30      	pop	{r4, r5, pc}
 801f49e:	4770      	bx	lr
 801f4a0:	08039250 	.word	0x08039250

0801f4a4 <mg_base64_decode_single>:
    return c == 62 ? '+' : '/';
  }
}

static int mg_base64_decode_single(int c) {
  if (c >= 'A' && c <= 'Z') {
 801f4a4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801f4a8:	2b19      	cmp	r3, #25
 801f4aa:	d913      	bls.n	801f4d4 <mg_base64_decode_single+0x30>
    return c - 'A';
  } else if (c >= 'a' && c <= 'z') {
 801f4ac:	283d      	cmp	r0, #61	@ 0x3d
 801f4ae:	dc18      	bgt.n	801f4e2 <mg_base64_decode_single+0x3e>
 801f4b0:	282b      	cmp	r0, #43	@ 0x2b
 801f4b2:	db20      	blt.n	801f4f6 <mg_base64_decode_single+0x52>
 801f4b4:	f1a0 032b 	sub.w	r3, r0, #43	@ 0x2b
 801f4b8:	2b12      	cmp	r3, #18
 801f4ba:	d80f      	bhi.n	801f4dc <mg_base64_decode_single+0x38>
 801f4bc:	e8df f003 	tbb	[pc, r3]
 801f4c0:	0e0e0e0c 	.word	0x0e0e0e0c
 801f4c4:	1717171e 	.word	0x1717171e
 801f4c8:	17171717 	.word	0x17171717
 801f4cc:	0e171717 	.word	0x0e171717
 801f4d0:	0e0e      	.short	0x0e0e
 801f4d2:	19          	.byte	0x19
 801f4d3:	00          	.byte	0x00
    return c - 'A';
 801f4d4:	4618      	mov	r0, r3
 801f4d6:	4770      	bx	lr
  if (c >= 'A' && c <= 'Z') {
 801f4d8:	203e      	movs	r0, #62	@ 0x3e
 801f4da:	4770      	bx	lr
  } else if (c == '/') {
    return 63;
  } else if (c == '=') {
    return 64;
  } else {
    return -1;
 801f4dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f4e0:	4770      	bx	lr
 801f4e2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801f4e6:	2b19      	cmp	r3, #25
 801f4e8:	d80a      	bhi.n	801f500 <mg_base64_decode_single+0x5c>
    return c + 26 - 'a';
 801f4ea:	3847      	subs	r0, #71	@ 0x47
 801f4ec:	4770      	bx	lr
    return c + 52 - '0';
 801f4ee:	3004      	adds	r0, #4
 801f4f0:	4770      	bx	lr
    return 64;
 801f4f2:	2040      	movs	r0, #64	@ 0x40
 801f4f4:	4770      	bx	lr
    return -1;
 801f4f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f4fa:	4770      	bx	lr
    return 63;
 801f4fc:	203f      	movs	r0, #63	@ 0x3f
 801f4fe:	4770      	bx	lr
    return -1;
 801f500:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  }
}
 801f504:	4770      	bx	lr

0801f506 <is_digit>:




static bool is_digit(int c) {
  return c >= '0' && c <= '9';
 801f506:	3830      	subs	r0, #48	@ 0x30
}
 801f508:	2809      	cmp	r0, #9
 801f50a:	bf8c      	ite	hi
 801f50c:	2000      	movhi	r0, #0
 801f50e:	2001      	movls	r0, #1
 801f510:	4770      	bx	lr
	...

0801f514 <addexp>:

static int addexp(char *buf, int e, int sign) {
 801f514:	4684      	mov	ip, r0
  int n = 0;
  buf[n++] = 'e';
 801f516:	2365      	movs	r3, #101	@ 0x65
 801f518:	7003      	strb	r3, [r0, #0]
  buf[n++] = (char) sign;
 801f51a:	7042      	strb	r2, [r0, #1]
  if (e > 400) return 0;
 801f51c:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 801f520:	dc2c      	bgt.n	801f57c <addexp+0x68>
  if (e < 10) buf[n++] = '0';
 801f522:	2909      	cmp	r1, #9
 801f524:	dc03      	bgt.n	801f52e <addexp+0x1a>
 801f526:	2330      	movs	r3, #48	@ 0x30
 801f528:	7083      	strb	r3, [r0, #2]
 801f52a:	2303      	movs	r3, #3
 801f52c:	e000      	b.n	801f530 <addexp+0x1c>
  buf[n++] = (char) sign;
 801f52e:	2302      	movs	r3, #2
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 801f530:	2963      	cmp	r1, #99	@ 0x63
 801f532:	dd0d      	ble.n	801f550 <addexp+0x3c>
 801f534:	4812      	ldr	r0, [pc, #72]	@ (801f580 <addexp+0x6c>)
 801f536:	fb80 2001 	smull	r2, r0, r0, r1
 801f53a:	17ca      	asrs	r2, r1, #31
 801f53c:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 801f540:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 801f544:	f80c 0003 	strb.w	r0, [ip, r3]
 801f548:	2064      	movs	r0, #100	@ 0x64
 801f54a:	fb00 1112 	mls	r1, r0, r2, r1
 801f54e:	3301      	adds	r3, #1
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 801f550:	2909      	cmp	r1, #9
 801f552:	dd0e      	ble.n	801f572 <addexp+0x5e>
 801f554:	480b      	ldr	r0, [pc, #44]	@ (801f584 <addexp+0x70>)
 801f556:	fb80 2001 	smull	r2, r0, r0, r1
 801f55a:	17ca      	asrs	r2, r1, #31
 801f55c:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 801f560:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 801f564:	f80c 0003 	strb.w	r0, [ip, r3]
 801f568:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801f56c:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
 801f570:	3301      	adds	r3, #1
  buf[n++] = (char) (e + '0');
 801f572:	1c58      	adds	r0, r3, #1
 801f574:	3130      	adds	r1, #48	@ 0x30
 801f576:	f80c 1003 	strb.w	r1, [ip, r3]
  return n;
 801f57a:	4770      	bx	lr
  if (e > 400) return 0;
 801f57c:	2000      	movs	r0, #0
}
 801f57e:	4770      	bx	lr
 801f580:	51eb851f 	.word	0x51eb851f
 801f584:	66666667 	.word	0x66666667

0801f588 <xisinf>:

static int xisinf(double x) {
 801f588:	ec53 2b10 	vmov	r2, r3, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 801f58c:	4611      	mov	r1, r2
 801f58e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f592:	4a05      	ldr	r2, [pc, #20]	@ (801f5a8 <xisinf+0x20>)
 801f594:	4293      	cmp	r3, r2
 801f596:	d001      	beq.n	801f59c <xisinf+0x14>
 801f598:	2000      	movs	r0, #0
 801f59a:	4770      	bx	lr
 801f59c:	b109      	cbz	r1, 801f5a2 <xisinf+0x1a>
 801f59e:	2000      	movs	r0, #0
 801f5a0:	4770      	bx	lr
 801f5a2:	2001      	movs	r0, #1
         ((unsigned) ieee754.u == 0);
}
 801f5a4:	4770      	bx	lr
 801f5a6:	bf00      	nop
 801f5a8:	7ff00000 	.word	0x7ff00000

0801f5ac <xisnan>:

static int xisnan(double x) {
 801f5ac:	ec51 0b10 	vmov	r0, r1, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 801f5b0:	4602      	mov	r2, r0
 801f5b2:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 801f5b6:	2a00      	cmp	r2, #0
 801f5b8:	bf18      	it	ne
 801f5ba:	3001      	addne	r0, #1
             ((unsigned) ieee754.u != 0) >
         0x7ff00000;
}
 801f5bc:	4b02      	ldr	r3, [pc, #8]	@ (801f5c8 <xisnan+0x1c>)
 801f5be:	4298      	cmp	r0, r3
 801f5c0:	bf94      	ite	ls
 801f5c2:	2000      	movls	r0, #0
 801f5c4:	2001      	movhi	r0, #1
 801f5c6:	4770      	bx	lr
 801f5c8:	7ff00000 	.word	0x7ff00000

0801f5cc <mg_lld>:
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
  buf[n] = '\0';
  return mg_snprintf(dst, dstlen, "%s", buf);
}

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 801f5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f5d0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801f5d4:	f89d 101c 	ldrb.w	r1, [sp, #28]
  const char *letters = "0123456789abcdef";
  uint64_t v = (uint64_t) val;
 801f5d8:	4694      	mov	ip, r2
 801f5da:	469e      	mov	lr, r3
  size_t s = 0, n, i;
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 801f5dc:	b15c      	cbz	r4, 801f5f6 <mg_lld+0x2a>
 801f5de:	2b00      	cmp	r3, #0
 801f5e0:	db01      	blt.n	801f5e6 <mg_lld+0x1a>
  size_t s = 0, n, i;
 801f5e2:	2500      	movs	r5, #0
 801f5e4:	e008      	b.n	801f5f8 <mg_lld+0x2c>
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 801f5e6:	242d      	movs	r4, #45	@ 0x2d
 801f5e8:	7004      	strb	r4, [r0, #0]
 801f5ea:	f1d2 0c00 	rsbs	ip, r2, #0
 801f5ee:	eb63 0e43 	sbc.w	lr, r3, r3, lsl #1
 801f5f2:	2501      	movs	r5, #1
 801f5f4:	e000      	b.n	801f5f8 <mg_lld+0x2c>
  size_t s = 0, n, i;
 801f5f6:	2500      	movs	r5, #0
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 801f5f8:	b909      	cbnz	r1, 801f5fe <mg_lld+0x32>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 801f5fa:	2400      	movs	r4, #0
 801f5fc:	e02f      	b.n	801f65e <mg_lld+0x92>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 801f5fe:	2400      	movs	r4, #0
 801f600:	ea5c 010e 	orrs.w	r1, ip, lr
 801f604:	d05a      	beq.n	801f6bc <mg_lld+0xf0>
 801f606:	f00c 060f 	and.w	r6, ip, #15
 801f60a:	1929      	adds	r1, r5, r4
 801f60c:	4f38      	ldr	r7, [pc, #224]	@ (801f6f0 <mg_lld+0x124>)
 801f60e:	5dbe      	ldrb	r6, [r7, r6]
 801f610:	5446      	strb	r6, [r0, r1]
 801f612:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 801f616:	ea4c 7c0e 	orr.w	ip, ip, lr, lsl #28
 801f61a:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801f61e:	3401      	adds	r4, #1
 801f620:	e7ee      	b.n	801f600 <mg_lld+0x34>
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 801f622:	2601      	movs	r6, #1
 801f624:	e022      	b.n	801f66c <mg_lld+0xa0>
 801f626:	4421      	add	r1, r4
 801f628:	4f32      	ldr	r7, [pc, #200]	@ (801f6f4 <mg_lld+0x128>)
 801f62a:	fba7 4801 	umull	r4, r8, r7, r1
 801f62e:	f028 0403 	bic.w	r4, r8, #3
 801f632:	eb04 0498 	add.w	r4, r4, r8, lsr #2
 801f636:	1b09      	subs	r1, r1, r4
 801f638:	ebbc 0101 	subs.w	r1, ip, r1
 801f63c:	f16e 0e00 	sbc.w	lr, lr, #0
 801f640:	f04f 34cc 	mov.w	r4, #3435973836	@ 0xcccccccc
 801f644:	fb01 f404 	mul.w	r4, r1, r4
 801f648:	fb07 440e 	mla	r4, r7, lr, r4
 801f64c:	fba1 1707 	umull	r1, r7, r1, r7
 801f650:	443c      	add	r4, r7
 801f652:	0849      	lsrs	r1, r1, #1
 801f654:	ea41 7cc4 	orr.w	ip, r1, r4, lsl #31
 801f658:	ea4f 0e54 	mov.w	lr, r4, lsr #1
 801f65c:	4634      	mov	r4, r6
 801f65e:	ea5c 010e 	orrs.w	r1, ip, lr
 801f662:	d02b      	beq.n	801f6bc <mg_lld+0xf0>
 801f664:	2600      	movs	r6, #0
 801f666:	eb1c 010e 	adds.w	r1, ip, lr
 801f66a:	d2da      	bcs.n	801f622 <mg_lld+0x56>
 801f66c:	4431      	add	r1, r6
 801f66e:	4f21      	ldr	r7, [pc, #132]	@ (801f6f4 <mg_lld+0x128>)
 801f670:	fba7 6801 	umull	r6, r8, r7, r1
 801f674:	f028 0603 	bic.w	r6, r8, #3
 801f678:	eb06 0698 	add.w	r6, r6, r8, lsr #2
 801f67c:	1b89      	subs	r1, r1, r6
 801f67e:	ebbc 0101 	subs.w	r1, ip, r1
 801f682:	f16e 0800 	sbc.w	r8, lr, #0
 801f686:	f04f 36cc 	mov.w	r6, #3435973836	@ 0xcccccccc
 801f68a:	fb01 f606 	mul.w	r6, r1, r6
 801f68e:	fb07 6608 	mla	r6, r7, r8, r6
 801f692:	fba1 1707 	umull	r1, r7, r1, r7
 801f696:	443e      	add	r6, r7
 801f698:	0849      	lsrs	r1, r1, #1
 801f69a:	ea41 71c6 	orr.w	r1, r1, r6, lsl #31
 801f69e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801f6a2:	ebac 0141 	sub.w	r1, ip, r1, lsl #1
 801f6a6:	1c66      	adds	r6, r4, #1
 801f6a8:	442c      	add	r4, r5
 801f6aa:	4f11      	ldr	r7, [pc, #68]	@ (801f6f0 <mg_lld+0x124>)
 801f6ac:	5c79      	ldrb	r1, [r7, r1]
 801f6ae:	5501      	strb	r1, [r0, r4]
 801f6b0:	2400      	movs	r4, #0
 801f6b2:	eb1c 010e 	adds.w	r1, ip, lr
 801f6b6:	d3b6      	bcc.n	801f626 <mg_lld+0x5a>
 801f6b8:	2401      	movs	r4, #1
 801f6ba:	e7b4      	b.n	801f626 <mg_lld+0x5a>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 801f6bc:	2600      	movs	r6, #0
 801f6be:	e00c      	b.n	801f6da <mg_lld+0x10e>
    char t = buf[s + i];
 801f6c0:	19af      	adds	r7, r5, r6
 801f6c2:	f810 c007 	ldrb.w	ip, [r0, r7]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 801f6c6:	1929      	adds	r1, r5, r4
 801f6c8:	1b89      	subs	r1, r1, r6
 801f6ca:	3901      	subs	r1, #1
 801f6cc:	f810 e001 	ldrb.w	lr, [r0, r1]
 801f6d0:	f800 e007 	strb.w	lr, [r0, r7]
 801f6d4:	f800 c001 	strb.w	ip, [r0, r1]
  for (i = 0; i < n / 2; i++) {
 801f6d8:	3601      	adds	r6, #1
 801f6da:	ebb6 0f54 	cmp.w	r6, r4, lsr #1
 801f6de:	d3ef      	bcc.n	801f6c0 <mg_lld+0xf4>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 801f6e0:	4313      	orrs	r3, r2
 801f6e2:	d102      	bne.n	801f6ea <mg_lld+0x11e>
 801f6e4:	2330      	movs	r3, #48	@ 0x30
 801f6e6:	5503      	strb	r3, [r0, r4]
 801f6e8:	3401      	adds	r4, #1
  return n + s;
}
 801f6ea:	1928      	adds	r0, r5, r4
 801f6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f6f0:	08039290 	.word	0x08039290
 801f6f4:	cccccccd 	.word	0xcccccccd

0801f6f8 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 801f6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6fc:	4680      	mov	r8, r0
 801f6fe:	460f      	mov	r7, r1
 801f700:	4616      	mov	r6, r2
 801f702:	461d      	mov	r5, r3
  size_t i = 0;
 801f704:	2400      	movs	r4, #0
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 801f706:	e002      	b.n	801f70e <scpy+0x16>
 801f708:	3401      	adds	r4, #1
 801f70a:	4639      	mov	r1, r7
 801f70c:	47c0      	blx	r8
 801f70e:	42ac      	cmp	r4, r5
 801f710:	d202      	bcs.n	801f718 <scpy+0x20>
 801f712:	5d30      	ldrb	r0, [r6, r4]
 801f714:	2800      	cmp	r0, #0
 801f716:	d1f7      	bne.n	801f708 <scpy+0x10>
  return i;
}
 801f718:	4620      	mov	r0, r4
 801f71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f71e <p_stat>:
#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
  (void) path, (void) size, (void) mtime;
  return 0;
}
 801f71e:	2000      	movs	r0, #0
 801f720:	4770      	bx	lr

0801f722 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
  (void) path, (void) fn, (void) userdata;
}
 801f722:	4770      	bx	lr

0801f724 <p_open>:
static void *p_open(const char *path, int flags) {
  (void) path, (void) flags;
  return NULL;
}
 801f724:	2000      	movs	r0, #0
 801f726:	4770      	bx	lr

0801f728 <p_close>:
static void p_close(void *fp) {
  (void) fp;
}
 801f728:	4770      	bx	lr

0801f72a <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 801f72a:	2000      	movs	r0, #0
 801f72c:	4770      	bx	lr

0801f72e <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 801f72e:	2000      	movs	r0, #0
 801f730:	4770      	bx	lr

0801f732 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
  (void) fd, (void) offset;
  return (size_t) ~0;
}
 801f732:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f736:	4770      	bx	lr

0801f738 <p_rename>:
static bool p_rename(const char *from, const char *to) {
  (void) from, (void) to;
  return false;
}
 801f738:	2000      	movs	r0, #0
 801f73a:	4770      	bx	lr

0801f73c <p_remove>:
static bool p_remove(const char *path) {
  (void) path;
  return false;
}
 801f73c:	2000      	movs	r0, #0
 801f73e:	4770      	bx	lr

0801f740 <p_mkdir>:
static bool p_mkdir(const char *path) {
  (void) path;
  return false;
}
 801f740:	2000      	movs	r0, #0
 801f742:	4770      	bx	lr

0801f744 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 801f744:	b530      	push	{r4, r5, lr}
 801f746:	4686      	mov	lr, r0
  int diff = 0;
  if (len > 0) do {
 801f748:	4614      	mov	r4, r2
 801f74a:	b94a      	cbnz	r2, 801f760 <mg_ncasecmp+0x1c>
  int diff = 0;
 801f74c:	2000      	movs	r0, #0
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
      diff = c - d;
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
  return diff;
}
 801f74e:	bd30      	pop	{r4, r5, pc}
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 801f750:	f10c 0020 	add.w	r0, ip, #32
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 801f754:	1a18      	subs	r0, r3, r0
 801f756:	d1fa      	bne.n	801f74e <mg_ncasecmp+0xa>
 801f758:	2a00      	cmp	r2, #0
 801f75a:	d0f8      	beq.n	801f74e <mg_ncasecmp+0xa>
 801f75c:	3c01      	subs	r4, #1
 801f75e:	d0f6      	beq.n	801f74e <mg_ncasecmp+0xa>
      int c = *s1++, d = *s2++;
 801f760:	f89e 2000 	ldrb.w	r2, [lr]
 801f764:	f10e 0e01 	add.w	lr, lr, #1
 801f768:	4613      	mov	r3, r2
 801f76a:	f891 c000 	ldrb.w	ip, [r1]
 801f76e:	3101      	adds	r1, #1
 801f770:	4660      	mov	r0, ip
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 801f772:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801f776:	2d19      	cmp	r5, #25
 801f778:	d801      	bhi.n	801f77e <mg_ncasecmp+0x3a>
 801f77a:	f102 0320 	add.w	r3, r2, #32
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 801f77e:	f1ac 0541 	sub.w	r5, ip, #65	@ 0x41
 801f782:	2d19      	cmp	r5, #25
 801f784:	d8e6      	bhi.n	801f754 <mg_ncasecmp+0x10>
 801f786:	e7e3      	b.n	801f750 <mg_ncasecmp+0xc>

0801f788 <isx>:
  }
  return len;
}

static bool isx(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801f788:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801f78c:	2b09      	cmp	r3, #9
 801f78e:	d908      	bls.n	801f7a2 <isx+0x1a>
 801f790:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801f794:	2b05      	cmp	r3, #5
 801f796:	d906      	bls.n	801f7a6 <isx+0x1e>
         (c >= 'A' && c <= 'F');
 801f798:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801f79a:	2805      	cmp	r0, #5
 801f79c:	d805      	bhi.n	801f7aa <isx+0x22>
 801f79e:	2001      	movs	r0, #1
 801f7a0:	4770      	bx	lr
 801f7a2:	2001      	movs	r0, #1
 801f7a4:	4770      	bx	lr
 801f7a6:	2001      	movs	r0, #1
 801f7a8:	4770      	bx	lr
 801f7aa:	2000      	movs	r0, #0
}
 801f7ac:	4770      	bx	lr

0801f7ae <isok>:
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
  return i >= src_len && j < dst_len ? (int) j : -1;
}

static bool isok(uint8_t c) {
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 801f7ae:	280a      	cmp	r0, #10
 801f7b0:	d007      	beq.n	801f7c2 <isok+0x14>
 801f7b2:	280d      	cmp	r0, #13
 801f7b4:	d007      	beq.n	801f7c6 <isok+0x18>
 801f7b6:	2809      	cmp	r0, #9
 801f7b8:	d007      	beq.n	801f7ca <isok+0x1c>
 801f7ba:	281f      	cmp	r0, #31
 801f7bc:	d907      	bls.n	801f7ce <isok+0x20>
 801f7be:	2001      	movs	r0, #1
 801f7c0:	4770      	bx	lr
 801f7c2:	2001      	movs	r0, #1
 801f7c4:	4770      	bx	lr
 801f7c6:	2001      	movs	r0, #1
 801f7c8:	4770      	bx	lr
 801f7ca:	2001      	movs	r0, #1
 801f7cc:	4770      	bx	lr
 801f7ce:	2000      	movs	r0, #0
}
 801f7d0:	4770      	bx	lr

0801f7d2 <vcb>:
  return NULL;
}

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
  return (c & 0xc0) == 0x80;
 801f7d2:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
}
 801f7d6:	2880      	cmp	r0, #128	@ 0x80
 801f7d8:	bf14      	ite	ne
 801f7da:	2000      	movne	r0, #0
 801f7dc:	2001      	moveq	r0, #1
 801f7de:	4770      	bx	lr

0801f7e0 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 801f7e0:	b570      	push	{r4, r5, r6, lr}
  const unsigned char *u = (unsigned char *) s, c = *u;
 801f7e2:	7805      	ldrb	r5, [r0, #0]
  long n = (long) (end - s);
 801f7e4:	1a0e      	subs	r6, r1, r0
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 801f7e6:	f1a5 0321 	sub.w	r3, r5, #33	@ 0x21
 801f7ea:	b2db      	uxtb	r3, r3
 801f7ec:	2b5c      	cmp	r3, #92	@ 0x5c
 801f7ee:	d936      	bls.n	801f85e <clen+0x7e>
 801f7f0:	4604      	mov	r4, r0
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 801f7f2:	f005 03e0 	and.w	r3, r5, #224	@ 0xe0
 801f7f6:	2bc0      	cmp	r3, #192	@ 0xc0
 801f7f8:	d009      	beq.n	801f80e <clen+0x2e>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 801f7fa:	f005 03f0 	and.w	r3, r5, #240	@ 0xf0
 801f7fe:	2be0      	cmp	r3, #224	@ 0xe0
 801f800:	d00e      	beq.n	801f820 <clen+0x40>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 801f802:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801f806:	2df0      	cmp	r5, #240	@ 0xf0
 801f808:	d018      	beq.n	801f83c <clen+0x5c>
    return 4;
  return 0;
 801f80a:	2000      	movs	r0, #0
}
 801f80c:	bd70      	pop	{r4, r5, r6, pc}
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 801f80e:	2e01      	cmp	r6, #1
 801f810:	ddf3      	ble.n	801f7fa <clen+0x1a>
 801f812:	7840      	ldrb	r0, [r0, #1]
 801f814:	f7ff ffdd 	bl	801f7d2 <vcb>
 801f818:	2800      	cmp	r0, #0
 801f81a:	d0ee      	beq.n	801f7fa <clen+0x1a>
 801f81c:	2002      	movs	r0, #2
 801f81e:	e7f5      	b.n	801f80c <clen+0x2c>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 801f820:	2e02      	cmp	r6, #2
 801f822:	ddee      	ble.n	801f802 <clen+0x22>
 801f824:	7860      	ldrb	r0, [r4, #1]
 801f826:	f7ff ffd4 	bl	801f7d2 <vcb>
 801f82a:	2800      	cmp	r0, #0
 801f82c:	d0e9      	beq.n	801f802 <clen+0x22>
 801f82e:	78a0      	ldrb	r0, [r4, #2]
 801f830:	f7ff ffcf 	bl	801f7d2 <vcb>
 801f834:	2800      	cmp	r0, #0
 801f836:	d0e4      	beq.n	801f802 <clen+0x22>
 801f838:	2003      	movs	r0, #3
 801f83a:	e7e7      	b.n	801f80c <clen+0x2c>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 801f83c:	2e03      	cmp	r6, #3
 801f83e:	dd10      	ble.n	801f862 <clen+0x82>
 801f840:	7860      	ldrb	r0, [r4, #1]
 801f842:	f7ff ffc6 	bl	801f7d2 <vcb>
 801f846:	b170      	cbz	r0, 801f866 <clen+0x86>
 801f848:	78a0      	ldrb	r0, [r4, #2]
 801f84a:	f7ff ffc2 	bl	801f7d2 <vcb>
 801f84e:	b160      	cbz	r0, 801f86a <clen+0x8a>
 801f850:	78e0      	ldrb	r0, [r4, #3]
 801f852:	f7ff ffbe 	bl	801f7d2 <vcb>
 801f856:	2800      	cmp	r0, #0
 801f858:	d0d8      	beq.n	801f80c <clen+0x2c>
    return 4;
 801f85a:	2004      	movs	r0, #4
 801f85c:	e7d6      	b.n	801f80c <clen+0x2c>
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 801f85e:	2001      	movs	r0, #1
 801f860:	e7d4      	b.n	801f80c <clen+0x2c>
  return 0;
 801f862:	2000      	movs	r0, #0
 801f864:	e7d2      	b.n	801f80c <clen+0x2c>
 801f866:	2000      	movs	r0, #0
 801f868:	e7d0      	b.n	801f80c <clen+0x2c>
 801f86a:	2000      	movs	r0, #0
 801f86c:	e7ce      	b.n	801f80c <clen+0x2c>

0801f86e <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
  v->buf = (char *) s;
 801f86e:	6010      	str	r0, [r2, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 801f870:	e003      	b.n	801f87a <skiptorn+0xc>
 801f872:	3001      	adds	r0, #1
 801f874:	6853      	ldr	r3, [r2, #4]
 801f876:	3301      	adds	r3, #1
 801f878:	6053      	str	r3, [r2, #4]
 801f87a:	4288      	cmp	r0, r1
 801f87c:	d204      	bcs.n	801f888 <skiptorn+0x1a>
 801f87e:	7803      	ldrb	r3, [r0, #0]
 801f880:	2b0a      	cmp	r3, #10
 801f882:	d001      	beq.n	801f888 <skiptorn+0x1a>
 801f884:	2b0d      	cmp	r3, #13
 801f886:	d1f4      	bne.n	801f872 <skiptorn+0x4>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801f888:	4288      	cmp	r0, r1
 801f88a:	d212      	bcs.n	801f8b2 <skiptorn+0x44>
 801f88c:	7803      	ldrb	r3, [r0, #0]
 801f88e:	2b0d      	cmp	r3, #13
 801f890:	d008      	beq.n	801f8a4 <skiptorn+0x36>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 801f892:	2b0d      	cmp	r3, #13
 801f894:	d00b      	beq.n	801f8ae <skiptorn+0x40>
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 801f896:	4288      	cmp	r0, r1
 801f898:	d20d      	bcs.n	801f8b6 <skiptorn+0x48>
 801f89a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f89e:	2b0a      	cmp	r3, #10
 801f8a0:	d10b      	bne.n	801f8ba <skiptorn+0x4c>
  return s;
}
 801f8a2:	4770      	bx	lr
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801f8a4:	7842      	ldrb	r2, [r0, #1]
 801f8a6:	2a0a      	cmp	r2, #10
 801f8a8:	d0f3      	beq.n	801f892 <skiptorn+0x24>
 801f8aa:	2000      	movs	r0, #0
 801f8ac:	4770      	bx	lr
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 801f8ae:	3001      	adds	r0, #1
 801f8b0:	e7f1      	b.n	801f896 <skiptorn+0x28>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801f8b2:	2000      	movs	r0, #0
 801f8b4:	4770      	bx	lr
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 801f8b6:	2000      	movs	r0, #0
 801f8b8:	4770      	bx	lr
 801f8ba:	2000      	movs	r0, #0
 801f8bc:	e7f1      	b.n	801f8a2 <skiptorn+0x34>

0801f8be <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 801f8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f8c2:	b084      	sub	sp, #16
 801f8c4:	4604      	mov	r4, r0
 801f8c6:	460d      	mov	r5, r1
 801f8c8:	4690      	mov	r8, r2
 801f8ca:	461f      	mov	r7, r3
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 801f8cc:	2600      	movs	r6, #0
 801f8ce:	e04d      	b.n	801f96c <mg_http_parse_headers+0xae>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
    if (s >= end) return false;
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 801f8d0:	7863      	ldrb	r3, [r4, #1]
 801f8d2:	2b0a      	cmp	r3, #10
 801f8d4:	d158      	bne.n	801f988 <mg_http_parse_headers+0xca>
      v.len--;  // Trim spaces
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
  }
  return true;
 801f8d6:	2001      	movs	r0, #1
 801f8d8:	e01e      	b.n	801f918 <mg_http_parse_headers+0x5a>
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 801f8da:	4414      	add	r4, r2
 801f8dc:	9b01      	ldr	r3, [sp, #4]
 801f8de:	4413      	add	r3, r2
 801f8e0:	9301      	str	r3, [sp, #4]
 801f8e2:	42ac      	cmp	r4, r5
 801f8e4:	d209      	bcs.n	801f8fa <mg_http_parse_headers+0x3c>
 801f8e6:	7823      	ldrb	r3, [r4, #0]
 801f8e8:	2b3a      	cmp	r3, #58	@ 0x3a
 801f8ea:	d006      	beq.n	801f8fa <mg_http_parse_headers+0x3c>
 801f8ec:	4629      	mov	r1, r5
 801f8ee:	4620      	mov	r0, r4
 801f8f0:	f7ff ff76 	bl	801f7e0 <clen>
 801f8f4:	4602      	mov	r2, r0
 801f8f6:	2800      	cmp	r0, #0
 801f8f8:	d1ef      	bne.n	801f8da <mg_http_parse_headers+0x1c>
    if (k.len == 0) return false;                     // Empty name
 801f8fa:	9b01      	ldr	r3, [sp, #4]
 801f8fc:	b15b      	cbz	r3, 801f916 <mg_http_parse_headers+0x58>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 801f8fe:	42ac      	cmp	r4, r5
 801f900:	d209      	bcs.n	801f916 <mg_http_parse_headers+0x58>
 801f902:	4629      	mov	r1, r5
 801f904:	4620      	mov	r0, r4
 801f906:	f7ff ff6b 	bl	801f7e0 <clen>
 801f90a:	b120      	cbz	r0, 801f916 <mg_http_parse_headers+0x58>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 801f90c:	4620      	mov	r0, r4
 801f90e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f912:	2b3a      	cmp	r3, #58	@ 0x3a
 801f914:	d004      	beq.n	801f920 <mg_http_parse_headers+0x62>
    if (s >= end) return false;
 801f916:	2000      	movs	r0, #0
}
 801f918:	b004      	add	sp, #16
 801f91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 801f91e:	3001      	adds	r0, #1
 801f920:	42a8      	cmp	r0, r5
 801f922:	d204      	bcs.n	801f92e <mg_http_parse_headers+0x70>
 801f924:	7803      	ldrb	r3, [r0, #0]
 801f926:	2b20      	cmp	r3, #32
 801f928:	d0f9      	beq.n	801f91e <mg_http_parse_headers+0x60>
 801f92a:	2b09      	cmp	r3, #9
 801f92c:	d0f7      	beq.n	801f91e <mg_http_parse_headers+0x60>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 801f92e:	aa02      	add	r2, sp, #8
 801f930:	4629      	mov	r1, r5
 801f932:	f7ff ff9c 	bl	801f86e <skiptorn>
 801f936:	4604      	mov	r4, r0
 801f938:	b908      	cbnz	r0, 801f93e <mg_http_parse_headers+0x80>
 801f93a:	e7ec      	b.n	801f916 <mg_http_parse_headers+0x58>
      v.len--;  // Trim spaces
 801f93c:	9003      	str	r0, [sp, #12]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 801f93e:	9803      	ldr	r0, [sp, #12]
 801f940:	b130      	cbz	r0, 801f950 <mg_http_parse_headers+0x92>
 801f942:	3801      	subs	r0, #1
 801f944:	9b02      	ldr	r3, [sp, #8]
 801f946:	5c1b      	ldrb	r3, [r3, r0]
 801f948:	2b20      	cmp	r3, #32
 801f94a:	d0f7      	beq.n	801f93c <mg_http_parse_headers+0x7e>
 801f94c:	2b09      	cmp	r3, #9
 801f94e:	d0f5      	beq.n	801f93c <mg_http_parse_headers+0x7e>
    h[i].name = k, h[i].value = v;  // Success. Assign values
 801f950:	eb08 1306 	add.w	r3, r8, r6, lsl #4
 801f954:	466a      	mov	r2, sp
 801f956:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f95a:	e883 0003 	stmia.w	r3, {r0, r1}
 801f95e:	3308      	adds	r3, #8
 801f960:	aa04      	add	r2, sp, #16
 801f962:	e912 0003 	ldmdb	r2, {r0, r1}
 801f966:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 801f96a:	3601      	adds	r6, #1
 801f96c:	42be      	cmp	r6, r7
 801f96e:	d20d      	bcs.n	801f98c <mg_http_parse_headers+0xce>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 801f970:	2300      	movs	r3, #0
 801f972:	9300      	str	r3, [sp, #0]
 801f974:	9301      	str	r3, [sp, #4]
 801f976:	9302      	str	r3, [sp, #8]
 801f978:	9303      	str	r3, [sp, #12]
    if (s >= end) return false;
 801f97a:	42ac      	cmp	r4, r5
 801f97c:	d2cb      	bcs.n	801f916 <mg_http_parse_headers+0x58>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 801f97e:	7823      	ldrb	r3, [r4, #0]
 801f980:	2b0a      	cmp	r3, #10
 801f982:	d0a8      	beq.n	801f8d6 <mg_http_parse_headers+0x18>
 801f984:	2b0d      	cmp	r3, #13
 801f986:	d0a3      	beq.n	801f8d0 <mg_http_parse_headers+0x12>
    k.buf = (char *) s;
 801f988:	9400      	str	r4, [sp, #0]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 801f98a:	e7aa      	b.n	801f8e2 <mg_http_parse_headers+0x24>
  return true;
 801f98c:	2001      	movs	r0, #1
 801f98e:	e7c3      	b.n	801f918 <mg_http_parse_headers+0x5a>

0801f990 <mg_http_status_code_str>:
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
  switch (status_code) {
 801f990:	3864      	subs	r0, #100	@ 0x64
 801f992:	f240 13f3 	movw	r3, #499	@ 0x1f3
 801f996:	4298      	cmp	r0, r3
 801f998:	f200 8272 	bhi.w	801fe80 <mg_http_status_code_str+0x4f0>
 801f99c:	e8df f010 	tbh	[pc, r0, lsl #1]
 801f9a0:	027201f4 	.word	0x027201f4
 801f9a4:	027001f6 	.word	0x027001f6
 801f9a8:	02700270 	.word	0x02700270
 801f9ac:	02700270 	.word	0x02700270
 801f9b0:	02700270 	.word	0x02700270
 801f9b4:	02700270 	.word	0x02700270
 801f9b8:	02700270 	.word	0x02700270
 801f9bc:	02700270 	.word	0x02700270
 801f9c0:	02700270 	.word	0x02700270
 801f9c4:	02700270 	.word	0x02700270
 801f9c8:	02700270 	.word	0x02700270
 801f9cc:	02700270 	.word	0x02700270
 801f9d0:	02700270 	.word	0x02700270
 801f9d4:	02700270 	.word	0x02700270
 801f9d8:	02700270 	.word	0x02700270
 801f9dc:	02700270 	.word	0x02700270
 801f9e0:	02700270 	.word	0x02700270
 801f9e4:	02700270 	.word	0x02700270
 801f9e8:	02700270 	.word	0x02700270
 801f9ec:	02700270 	.word	0x02700270
 801f9f0:	02700270 	.word	0x02700270
 801f9f4:	02700270 	.word	0x02700270
 801f9f8:	02700270 	.word	0x02700270
 801f9fc:	02700270 	.word	0x02700270
 801fa00:	02700270 	.word	0x02700270
 801fa04:	02700270 	.word	0x02700270
 801fa08:	02700270 	.word	0x02700270
 801fa0c:	02700270 	.word	0x02700270
 801fa10:	02700270 	.word	0x02700270
 801fa14:	02700270 	.word	0x02700270
 801fa18:	02700270 	.word	0x02700270
 801fa1c:	02700270 	.word	0x02700270
 801fa20:	02700270 	.word	0x02700270
 801fa24:	02700270 	.word	0x02700270
 801fa28:	02700270 	.word	0x02700270
 801fa2c:	02700270 	.word	0x02700270
 801fa30:	02700270 	.word	0x02700270
 801fa34:	02700270 	.word	0x02700270
 801fa38:	02700270 	.word	0x02700270
 801fa3c:	02700270 	.word	0x02700270
 801fa40:	02700270 	.word	0x02700270
 801fa44:	02700270 	.word	0x02700270
 801fa48:	02700270 	.word	0x02700270
 801fa4c:	02700270 	.word	0x02700270
 801fa50:	02700270 	.word	0x02700270
 801fa54:	02700270 	.word	0x02700270
 801fa58:	02700270 	.word	0x02700270
 801fa5c:	02700270 	.word	0x02700270
 801fa60:	02700270 	.word	0x02700270
 801fa64:	02700270 	.word	0x02700270
 801fa68:	01fa01f8 	.word	0x01fa01f8
 801fa6c:	01fe01fc 	.word	0x01fe01fc
 801fa70:	02020200 	.word	0x02020200
 801fa74:	02060204 	.word	0x02060204
 801fa78:	02700208 	.word	0x02700208
 801fa7c:	02700270 	.word	0x02700270
 801fa80:	02700270 	.word	0x02700270
 801fa84:	02700270 	.word	0x02700270
 801fa88:	02700270 	.word	0x02700270
 801fa8c:	02700270 	.word	0x02700270
 801fa90:	02700270 	.word	0x02700270
 801fa94:	02700270 	.word	0x02700270
 801fa98:	02700270 	.word	0x02700270
 801fa9c:	0270020a 	.word	0x0270020a
 801faa0:	02700270 	.word	0x02700270
 801faa4:	02700270 	.word	0x02700270
 801faa8:	02700270 	.word	0x02700270
 801faac:	02700270 	.word	0x02700270
 801fab0:	02700270 	.word	0x02700270
 801fab4:	02700270 	.word	0x02700270
 801fab8:	02700270 	.word	0x02700270
 801fabc:	02700270 	.word	0x02700270
 801fac0:	02700270 	.word	0x02700270
 801fac4:	02700270 	.word	0x02700270
 801fac8:	02700270 	.word	0x02700270
 801facc:	02700270 	.word	0x02700270
 801fad0:	02700270 	.word	0x02700270
 801fad4:	02700270 	.word	0x02700270
 801fad8:	02700270 	.word	0x02700270
 801fadc:	02700270 	.word	0x02700270
 801fae0:	02700270 	.word	0x02700270
 801fae4:	02700270 	.word	0x02700270
 801fae8:	02700270 	.word	0x02700270
 801faec:	02700270 	.word	0x02700270
 801faf0:	02700270 	.word	0x02700270
 801faf4:	02700270 	.word	0x02700270
 801faf8:	02700270 	.word	0x02700270
 801fafc:	02700270 	.word	0x02700270
 801fb00:	02700270 	.word	0x02700270
 801fb04:	02700270 	.word	0x02700270
 801fb08:	02700270 	.word	0x02700270
 801fb0c:	02700270 	.word	0x02700270
 801fb10:	02700270 	.word	0x02700270
 801fb14:	02700270 	.word	0x02700270
 801fb18:	02700270 	.word	0x02700270
 801fb1c:	02700270 	.word	0x02700270
 801fb20:	02700270 	.word	0x02700270
 801fb24:	02700270 	.word	0x02700270
 801fb28:	02700270 	.word	0x02700270
 801fb2c:	02700270 	.word	0x02700270
 801fb30:	020e020c 	.word	0x020e020c
 801fb34:	02120210 	.word	0x02120210
 801fb38:	02160214 	.word	0x02160214
 801fb3c:	02180270 	.word	0x02180270
 801fb40:	0270021a 	.word	0x0270021a
 801fb44:	02700270 	.word	0x02700270
 801fb48:	02700270 	.word	0x02700270
 801fb4c:	02700270 	.word	0x02700270
 801fb50:	02700270 	.word	0x02700270
 801fb54:	02700270 	.word	0x02700270
 801fb58:	02700270 	.word	0x02700270
 801fb5c:	02700270 	.word	0x02700270
 801fb60:	02700270 	.word	0x02700270
 801fb64:	02700270 	.word	0x02700270
 801fb68:	02700270 	.word	0x02700270
 801fb6c:	02700270 	.word	0x02700270
 801fb70:	02700270 	.word	0x02700270
 801fb74:	02700270 	.word	0x02700270
 801fb78:	02700270 	.word	0x02700270
 801fb7c:	02700270 	.word	0x02700270
 801fb80:	02700270 	.word	0x02700270
 801fb84:	02700270 	.word	0x02700270
 801fb88:	02700270 	.word	0x02700270
 801fb8c:	02700270 	.word	0x02700270
 801fb90:	02700270 	.word	0x02700270
 801fb94:	02700270 	.word	0x02700270
 801fb98:	02700270 	.word	0x02700270
 801fb9c:	02700270 	.word	0x02700270
 801fba0:	02700270 	.word	0x02700270
 801fba4:	02700270 	.word	0x02700270
 801fba8:	02700270 	.word	0x02700270
 801fbac:	02700270 	.word	0x02700270
 801fbb0:	02700270 	.word	0x02700270
 801fbb4:	02700270 	.word	0x02700270
 801fbb8:	02700270 	.word	0x02700270
 801fbbc:	02700270 	.word	0x02700270
 801fbc0:	02700270 	.word	0x02700270
 801fbc4:	02700270 	.word	0x02700270
 801fbc8:	02700270 	.word	0x02700270
 801fbcc:	02700270 	.word	0x02700270
 801fbd0:	02700270 	.word	0x02700270
 801fbd4:	02700270 	.word	0x02700270
 801fbd8:	02700270 	.word	0x02700270
 801fbdc:	02700270 	.word	0x02700270
 801fbe0:	02700270 	.word	0x02700270
 801fbe4:	02700270 	.word	0x02700270
 801fbe8:	02700270 	.word	0x02700270
 801fbec:	02700270 	.word	0x02700270
 801fbf0:	02700270 	.word	0x02700270
 801fbf4:	02700270 	.word	0x02700270
 801fbf8:	021e021c 	.word	0x021e021c
 801fbfc:	02220220 	.word	0x02220220
 801fc00:	02260224 	.word	0x02260224
 801fc04:	022a0228 	.word	0x022a0228
 801fc08:	022e022c 	.word	0x022e022c
 801fc0c:	02320230 	.word	0x02320230
 801fc10:	02360234 	.word	0x02360234
 801fc14:	023a0238 	.word	0x023a0238
 801fc18:	023e023c 	.word	0x023e023c
 801fc1c:	02700240 	.word	0x02700240
 801fc20:	02420270 	.word	0x02420270
 801fc24:	02460244 	.word	0x02460244
 801fc28:	02700248 	.word	0x02700248
 801fc2c:	0270024a 	.word	0x0270024a
 801fc30:	024e024c 	.word	0x024e024c
 801fc34:	02500270 	.word	0x02500270
 801fc38:	02700270 	.word	0x02700270
 801fc3c:	02700270 	.word	0x02700270
 801fc40:	02700270 	.word	0x02700270
 801fc44:	02700270 	.word	0x02700270
 801fc48:	02700270 	.word	0x02700270
 801fc4c:	02700270 	.word	0x02700270
 801fc50:	02700252 	.word	0x02700252
 801fc54:	02700270 	.word	0x02700270
 801fc58:	02700270 	.word	0x02700270
 801fc5c:	02540270 	.word	0x02540270
 801fc60:	02700270 	.word	0x02700270
 801fc64:	02700270 	.word	0x02700270
 801fc68:	02700270 	.word	0x02700270
 801fc6c:	02700270 	.word	0x02700270
 801fc70:	02700270 	.word	0x02700270
 801fc74:	02700270 	.word	0x02700270
 801fc78:	02700270 	.word	0x02700270
 801fc7c:	02700270 	.word	0x02700270
 801fc80:	02700270 	.word	0x02700270
 801fc84:	02700270 	.word	0x02700270
 801fc88:	02700270 	.word	0x02700270
 801fc8c:	02700270 	.word	0x02700270
 801fc90:	02700270 	.word	0x02700270
 801fc94:	02700270 	.word	0x02700270
 801fc98:	02700270 	.word	0x02700270
 801fc9c:	02700270 	.word	0x02700270
 801fca0:	02700270 	.word	0x02700270
 801fca4:	02700270 	.word	0x02700270
 801fca8:	02700270 	.word	0x02700270
 801fcac:	02700270 	.word	0x02700270
 801fcb0:	02700270 	.word	0x02700270
 801fcb4:	02700270 	.word	0x02700270
 801fcb8:	02700270 	.word	0x02700270
 801fcbc:	02560270 	.word	0x02560270
 801fcc0:	025a0258 	.word	0x025a0258
 801fcc4:	025e025c 	.word	0x025e025c
 801fcc8:	02620260 	.word	0x02620260
 801fccc:	02660264 	.word	0x02660264
 801fcd0:	02700268 	.word	0x02700268
 801fcd4:	026c026a 	.word	0x026c026a
 801fcd8:	02700270 	.word	0x02700270
 801fcdc:	02700270 	.word	0x02700270
 801fce0:	02700270 	.word	0x02700270
 801fce4:	02700270 	.word	0x02700270
 801fce8:	02700270 	.word	0x02700270
 801fcec:	02700270 	.word	0x02700270
 801fcf0:	02700270 	.word	0x02700270
 801fcf4:	02700270 	.word	0x02700270
 801fcf8:	02700270 	.word	0x02700270
 801fcfc:	02700270 	.word	0x02700270
 801fd00:	02700270 	.word	0x02700270
 801fd04:	02700270 	.word	0x02700270
 801fd08:	02700270 	.word	0x02700270
 801fd0c:	02700270 	.word	0x02700270
 801fd10:	02700270 	.word	0x02700270
 801fd14:	02700270 	.word	0x02700270
 801fd18:	02700270 	.word	0x02700270
 801fd1c:	02700270 	.word	0x02700270
 801fd20:	02700270 	.word	0x02700270
 801fd24:	02700270 	.word	0x02700270
 801fd28:	02700270 	.word	0x02700270
 801fd2c:	02700270 	.word	0x02700270
 801fd30:	02700270 	.word	0x02700270
 801fd34:	02700270 	.word	0x02700270
 801fd38:	02700270 	.word	0x02700270
 801fd3c:	02700270 	.word	0x02700270
 801fd40:	02700270 	.word	0x02700270
 801fd44:	02700270 	.word	0x02700270
 801fd48:	02700270 	.word	0x02700270
 801fd4c:	02700270 	.word	0x02700270
 801fd50:	02700270 	.word	0x02700270
 801fd54:	02700270 	.word	0x02700270
 801fd58:	02700270 	.word	0x02700270
 801fd5c:	02700270 	.word	0x02700270
 801fd60:	02700270 	.word	0x02700270
 801fd64:	02700270 	.word	0x02700270
 801fd68:	02700270 	.word	0x02700270
 801fd6c:	02700270 	.word	0x02700270
 801fd70:	02700270 	.word	0x02700270
 801fd74:	02700270 	.word	0x02700270
 801fd78:	02700270 	.word	0x02700270
 801fd7c:	02700270 	.word	0x02700270
 801fd80:	02700270 	.word	0x02700270
 801fd84:	026e0270 	.word	0x026e0270
 801fd88:	483f      	ldr	r0, [pc, #252]	@ (801fe88 <mg_http_status_code_str+0x4f8>)
 801fd8a:	4770      	bx	lr
    case 100: return "Continue";
    case 101: return "Switching Protocols";
    case 102: return "Processing";
 801fd8c:	483f      	ldr	r0, [pc, #252]	@ (801fe8c <mg_http_status_code_str+0x4fc>)
 801fd8e:	4770      	bx	lr
    case 200: return "OK";
 801fd90:	483f      	ldr	r0, [pc, #252]	@ (801fe90 <mg_http_status_code_str+0x500>)
 801fd92:	4770      	bx	lr
    case 201: return "Created";
 801fd94:	483f      	ldr	r0, [pc, #252]	@ (801fe94 <mg_http_status_code_str+0x504>)
 801fd96:	4770      	bx	lr
    case 202: return "Accepted";
 801fd98:	483f      	ldr	r0, [pc, #252]	@ (801fe98 <mg_http_status_code_str+0x508>)
 801fd9a:	4770      	bx	lr
    case 203: return "Non-authoritative Information";
 801fd9c:	483f      	ldr	r0, [pc, #252]	@ (801fe9c <mg_http_status_code_str+0x50c>)
 801fd9e:	4770      	bx	lr
    case 204: return "No Content";
 801fda0:	483f      	ldr	r0, [pc, #252]	@ (801fea0 <mg_http_status_code_str+0x510>)
 801fda2:	4770      	bx	lr
    case 205: return "Reset Content";
 801fda4:	483f      	ldr	r0, [pc, #252]	@ (801fea4 <mg_http_status_code_str+0x514>)
 801fda6:	4770      	bx	lr
    case 206: return "Partial Content";
 801fda8:	483f      	ldr	r0, [pc, #252]	@ (801fea8 <mg_http_status_code_str+0x518>)
 801fdaa:	4770      	bx	lr
    case 207: return "Multi-Status";
 801fdac:	483f      	ldr	r0, [pc, #252]	@ (801feac <mg_http_status_code_str+0x51c>)
 801fdae:	4770      	bx	lr
    case 208: return "Already Reported";
 801fdb0:	483f      	ldr	r0, [pc, #252]	@ (801feb0 <mg_http_status_code_str+0x520>)
 801fdb2:	4770      	bx	lr
    case 226: return "IM Used";
 801fdb4:	483f      	ldr	r0, [pc, #252]	@ (801feb4 <mg_http_status_code_str+0x524>)
 801fdb6:	4770      	bx	lr
    case 300: return "Multiple Choices";
 801fdb8:	483f      	ldr	r0, [pc, #252]	@ (801feb8 <mg_http_status_code_str+0x528>)
 801fdba:	4770      	bx	lr
    case 301: return "Moved Permanently";
 801fdbc:	483f      	ldr	r0, [pc, #252]	@ (801febc <mg_http_status_code_str+0x52c>)
 801fdbe:	4770      	bx	lr
    case 302: return "Found";
 801fdc0:	483f      	ldr	r0, [pc, #252]	@ (801fec0 <mg_http_status_code_str+0x530>)
 801fdc2:	4770      	bx	lr
    case 303: return "See Other";
 801fdc4:	483f      	ldr	r0, [pc, #252]	@ (801fec4 <mg_http_status_code_str+0x534>)
 801fdc6:	4770      	bx	lr
    case 304: return "Not Modified";
 801fdc8:	483f      	ldr	r0, [pc, #252]	@ (801fec8 <mg_http_status_code_str+0x538>)
 801fdca:	4770      	bx	lr
    case 305: return "Use Proxy";
 801fdcc:	483f      	ldr	r0, [pc, #252]	@ (801fecc <mg_http_status_code_str+0x53c>)
 801fdce:	4770      	bx	lr
    case 307: return "Temporary Redirect";
 801fdd0:	483f      	ldr	r0, [pc, #252]	@ (801fed0 <mg_http_status_code_str+0x540>)
 801fdd2:	4770      	bx	lr
    case 308: return "Permanent Redirect";
 801fdd4:	483f      	ldr	r0, [pc, #252]	@ (801fed4 <mg_http_status_code_str+0x544>)
 801fdd6:	4770      	bx	lr
    case 400: return "Bad Request";
 801fdd8:	483f      	ldr	r0, [pc, #252]	@ (801fed8 <mg_http_status_code_str+0x548>)
 801fdda:	4770      	bx	lr
    case 401: return "Unauthorized";
 801fddc:	483f      	ldr	r0, [pc, #252]	@ (801fedc <mg_http_status_code_str+0x54c>)
 801fdde:	4770      	bx	lr
    case 402: return "Payment Required";
 801fde0:	483f      	ldr	r0, [pc, #252]	@ (801fee0 <mg_http_status_code_str+0x550>)
 801fde2:	4770      	bx	lr
    case 403: return "Forbidden";
 801fde4:	483f      	ldr	r0, [pc, #252]	@ (801fee4 <mg_http_status_code_str+0x554>)
 801fde6:	4770      	bx	lr
    case 404: return "Not Found";
 801fde8:	483f      	ldr	r0, [pc, #252]	@ (801fee8 <mg_http_status_code_str+0x558>)
 801fdea:	4770      	bx	lr
    case 405: return "Method Not Allowed";
 801fdec:	483f      	ldr	r0, [pc, #252]	@ (801feec <mg_http_status_code_str+0x55c>)
 801fdee:	4770      	bx	lr
    case 406: return "Not Acceptable";
 801fdf0:	483f      	ldr	r0, [pc, #252]	@ (801fef0 <mg_http_status_code_str+0x560>)
 801fdf2:	4770      	bx	lr
    case 407: return "Proxy Authentication Required";
 801fdf4:	483f      	ldr	r0, [pc, #252]	@ (801fef4 <mg_http_status_code_str+0x564>)
 801fdf6:	4770      	bx	lr
    case 408: return "Request Timeout";
 801fdf8:	483f      	ldr	r0, [pc, #252]	@ (801fef8 <mg_http_status_code_str+0x568>)
 801fdfa:	4770      	bx	lr
    case 409: return "Conflict";
 801fdfc:	483f      	ldr	r0, [pc, #252]	@ (801fefc <mg_http_status_code_str+0x56c>)
 801fdfe:	4770      	bx	lr
    case 410: return "Gone";
 801fe00:	483f      	ldr	r0, [pc, #252]	@ (801ff00 <mg_http_status_code_str+0x570>)
 801fe02:	4770      	bx	lr
    case 411: return "Length Required";
 801fe04:	483f      	ldr	r0, [pc, #252]	@ (801ff04 <mg_http_status_code_str+0x574>)
 801fe06:	4770      	bx	lr
    case 412: return "Precondition Failed";
 801fe08:	483f      	ldr	r0, [pc, #252]	@ (801ff08 <mg_http_status_code_str+0x578>)
 801fe0a:	4770      	bx	lr
    case 413: return "Payload Too Large";
 801fe0c:	483f      	ldr	r0, [pc, #252]	@ (801ff0c <mg_http_status_code_str+0x57c>)
 801fe0e:	4770      	bx	lr
    case 414: return "Request-URI Too Long";
 801fe10:	483f      	ldr	r0, [pc, #252]	@ (801ff10 <mg_http_status_code_str+0x580>)
 801fe12:	4770      	bx	lr
    case 415: return "Unsupported Media Type";
 801fe14:	483f      	ldr	r0, [pc, #252]	@ (801ff14 <mg_http_status_code_str+0x584>)
 801fe16:	4770      	bx	lr
    case 416: return "Requested Range Not Satisfiable";
 801fe18:	483f      	ldr	r0, [pc, #252]	@ (801ff18 <mg_http_status_code_str+0x588>)
 801fe1a:	4770      	bx	lr
    case 417: return "Expectation Failed";
 801fe1c:	483f      	ldr	r0, [pc, #252]	@ (801ff1c <mg_http_status_code_str+0x58c>)
 801fe1e:	4770      	bx	lr
    case 418: return "I'm a teapot";
 801fe20:	483f      	ldr	r0, [pc, #252]	@ (801ff20 <mg_http_status_code_str+0x590>)
 801fe22:	4770      	bx	lr
    case 421: return "Misdirected Request";
 801fe24:	483f      	ldr	r0, [pc, #252]	@ (801ff24 <mg_http_status_code_str+0x594>)
 801fe26:	4770      	bx	lr
    case 422: return "Unprocessable Entity";
 801fe28:	483f      	ldr	r0, [pc, #252]	@ (801ff28 <mg_http_status_code_str+0x598>)
 801fe2a:	4770      	bx	lr
    case 423: return "Locked";
 801fe2c:	483f      	ldr	r0, [pc, #252]	@ (801ff2c <mg_http_status_code_str+0x59c>)
 801fe2e:	4770      	bx	lr
    case 424: return "Failed Dependency";
 801fe30:	483f      	ldr	r0, [pc, #252]	@ (801ff30 <mg_http_status_code_str+0x5a0>)
 801fe32:	4770      	bx	lr
    case 426: return "Upgrade Required";
 801fe34:	483f      	ldr	r0, [pc, #252]	@ (801ff34 <mg_http_status_code_str+0x5a4>)
 801fe36:	4770      	bx	lr
    case 428: return "Precondition Required";
 801fe38:	483f      	ldr	r0, [pc, #252]	@ (801ff38 <mg_http_status_code_str+0x5a8>)
 801fe3a:	4770      	bx	lr
    case 429: return "Too Many Requests";
 801fe3c:	483f      	ldr	r0, [pc, #252]	@ (801ff3c <mg_http_status_code_str+0x5ac>)
 801fe3e:	4770      	bx	lr
    case 431: return "Request Header Fields Too Large";
 801fe40:	483f      	ldr	r0, [pc, #252]	@ (801ff40 <mg_http_status_code_str+0x5b0>)
 801fe42:	4770      	bx	lr
    case 444: return "Connection Closed Without Response";
 801fe44:	483f      	ldr	r0, [pc, #252]	@ (801ff44 <mg_http_status_code_str+0x5b4>)
 801fe46:	4770      	bx	lr
    case 451: return "Unavailable For Legal Reasons";
 801fe48:	483f      	ldr	r0, [pc, #252]	@ (801ff48 <mg_http_status_code_str+0x5b8>)
 801fe4a:	4770      	bx	lr
    case 499: return "Client Closed Request";
 801fe4c:	483f      	ldr	r0, [pc, #252]	@ (801ff4c <mg_http_status_code_str+0x5bc>)
 801fe4e:	4770      	bx	lr
    case 500: return "Internal Server Error";
 801fe50:	483f      	ldr	r0, [pc, #252]	@ (801ff50 <mg_http_status_code_str+0x5c0>)
 801fe52:	4770      	bx	lr
    case 501: return "Not Implemented";
 801fe54:	483f      	ldr	r0, [pc, #252]	@ (801ff54 <mg_http_status_code_str+0x5c4>)
 801fe56:	4770      	bx	lr
    case 502: return "Bad Gateway";
 801fe58:	483f      	ldr	r0, [pc, #252]	@ (801ff58 <mg_http_status_code_str+0x5c8>)
 801fe5a:	4770      	bx	lr
    case 503: return "Service Unavailable";
 801fe5c:	483f      	ldr	r0, [pc, #252]	@ (801ff5c <mg_http_status_code_str+0x5cc>)
 801fe5e:	4770      	bx	lr
    case 504: return "Gateway Timeout";
 801fe60:	483f      	ldr	r0, [pc, #252]	@ (801ff60 <mg_http_status_code_str+0x5d0>)
 801fe62:	4770      	bx	lr
    case 505: return "HTTP Version Not Supported";
 801fe64:	483f      	ldr	r0, [pc, #252]	@ (801ff64 <mg_http_status_code_str+0x5d4>)
 801fe66:	4770      	bx	lr
    case 506: return "Variant Also Negotiates";
 801fe68:	483f      	ldr	r0, [pc, #252]	@ (801ff68 <mg_http_status_code_str+0x5d8>)
 801fe6a:	4770      	bx	lr
    case 507: return "Insufficient Storage";
 801fe6c:	483f      	ldr	r0, [pc, #252]	@ (801ff6c <mg_http_status_code_str+0x5dc>)
 801fe6e:	4770      	bx	lr
    case 508: return "Loop Detected";
 801fe70:	483f      	ldr	r0, [pc, #252]	@ (801ff70 <mg_http_status_code_str+0x5e0>)
 801fe72:	4770      	bx	lr
    case 510: return "Not Extended";
 801fe74:	483f      	ldr	r0, [pc, #252]	@ (801ff74 <mg_http_status_code_str+0x5e4>)
 801fe76:	4770      	bx	lr
    case 511: return "Network Authentication Required";
 801fe78:	483f      	ldr	r0, [pc, #252]	@ (801ff78 <mg_http_status_code_str+0x5e8>)
 801fe7a:	4770      	bx	lr
    case 599: return "Network Connect Timeout Error";
 801fe7c:	483f      	ldr	r0, [pc, #252]	@ (801ff7c <mg_http_status_code_str+0x5ec>)
 801fe7e:	4770      	bx	lr
    default: return "";
 801fe80:	483f      	ldr	r0, [pc, #252]	@ (801ff80 <mg_http_status_code_str+0x5f0>)
 801fe82:	4770      	bx	lr
    case 101: return "Switching Protocols";
 801fe84:	483f      	ldr	r0, [pc, #252]	@ (801ff84 <mg_http_status_code_str+0x5f4>)
  }
}
 801fe86:	4770      	bx	lr
 801fe88:	080392a4 	.word	0x080392a4
 801fe8c:	080392c4 	.word	0x080392c4
 801fe90:	080392d0 	.word	0x080392d0
 801fe94:	080392d4 	.word	0x080392d4
 801fe98:	080392dc 	.word	0x080392dc
 801fe9c:	080392e8 	.word	0x080392e8
 801fea0:	08039308 	.word	0x08039308
 801fea4:	08039314 	.word	0x08039314
 801fea8:	08039324 	.word	0x08039324
 801feac:	08039334 	.word	0x08039334
 801feb0:	08039344 	.word	0x08039344
 801feb4:	08039358 	.word	0x08039358
 801feb8:	08039360 	.word	0x08039360
 801febc:	08039374 	.word	0x08039374
 801fec0:	08039418 	.word	0x08039418
 801fec4:	08039388 	.word	0x08039388
 801fec8:	08039394 	.word	0x08039394
 801fecc:	080393a4 	.word	0x080393a4
 801fed0:	080393b0 	.word	0x080393b0
 801fed4:	080393c4 	.word	0x080393c4
 801fed8:	080393d8 	.word	0x080393d8
 801fedc:	080393e4 	.word	0x080393e4
 801fee0:	080393f4 	.word	0x080393f4
 801fee4:	08039408 	.word	0x08039408
 801fee8:	08039414 	.word	0x08039414
 801feec:	08039420 	.word	0x08039420
 801fef0:	08039434 	.word	0x08039434
 801fef4:	08039444 	.word	0x08039444
 801fef8:	08039464 	.word	0x08039464
 801fefc:	08039474 	.word	0x08039474
 801ff00:	08039480 	.word	0x08039480
 801ff04:	08039488 	.word	0x08039488
 801ff08:	08039498 	.word	0x08039498
 801ff0c:	080394ac 	.word	0x080394ac
 801ff10:	080394c0 	.word	0x080394c0
 801ff14:	080394d8 	.word	0x080394d8
 801ff18:	080394f0 	.word	0x080394f0
 801ff1c:	08039510 	.word	0x08039510
 801ff20:	08039524 	.word	0x08039524
 801ff24:	08039534 	.word	0x08039534
 801ff28:	08039548 	.word	0x08039548
 801ff2c:	08039560 	.word	0x08039560
 801ff30:	08039568 	.word	0x08039568
 801ff34:	0803957c 	.word	0x0803957c
 801ff38:	08039590 	.word	0x08039590
 801ff3c:	080395a8 	.word	0x080395a8
 801ff40:	080395bc 	.word	0x080395bc
 801ff44:	080395dc 	.word	0x080395dc
 801ff48:	08039600 	.word	0x08039600
 801ff4c:	08039620 	.word	0x08039620
 801ff50:	08039638 	.word	0x08039638
 801ff54:	08039650 	.word	0x08039650
 801ff58:	08039660 	.word	0x08039660
 801ff5c:	0803966c 	.word	0x0803966c
 801ff60:	08039680 	.word	0x08039680
 801ff64:	08039690 	.word	0x08039690
 801ff68:	080396ac 	.word	0x080396ac
 801ff6c:	080396c4 	.word	0x080396c4
 801ff70:	080396dc 	.word	0x080396dc
 801ff74:	080396ec 	.word	0x080396ec
 801ff78:	080396fc 	.word	0x080396fc
 801ff7c:	0803971c 	.word	0x0803971c
 801ff80:	08036364 	.word	0x08036364
 801ff84:	080392b0 	.word	0x080392b0

0801ff88 <mg_is_url_safe>:
    mg_http_serve_file(c, hm, path, opts);
  }
}

static bool mg_is_url_safe(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 801ff88:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 801ff8c:	2b09      	cmp	r3, #9
 801ff8e:	d91c      	bls.n	801ffca <mg_is_url_safe+0x42>
 801ff90:	285f      	cmp	r0, #95	@ 0x5f
 801ff92:	d01c      	beq.n	801ffce <mg_is_url_safe+0x46>
 801ff94:	dc0d      	bgt.n	801ffb2 <mg_is_url_safe+0x2a>
 801ff96:	282e      	cmp	r0, #46	@ 0x2e
 801ff98:	d01b      	beq.n	801ffd2 <mg_is_url_safe+0x4a>
 801ff9a:	dd04      	ble.n	801ffa6 <mg_is_url_safe+0x1e>
 801ff9c:	3841      	subs	r0, #65	@ 0x41
 801ff9e:	2819      	cmp	r0, #25
 801ffa0:	d805      	bhi.n	801ffae <mg_is_url_safe+0x26>
 801ffa2:	2001      	movs	r0, #1
 801ffa4:	4770      	bx	lr
 801ffa6:	282d      	cmp	r0, #45	@ 0x2d
 801ffa8:	d115      	bne.n	801ffd6 <mg_is_url_safe+0x4e>
 801ffaa:	2001      	movs	r0, #1
 801ffac:	4770      	bx	lr
 801ffae:	2000      	movs	r0, #0
 801ffb0:	4770      	bx	lr
 801ffb2:	287a      	cmp	r0, #122	@ 0x7a
 801ffb4:	dd03      	ble.n	801ffbe <mg_is_url_safe+0x36>
 801ffb6:	287e      	cmp	r0, #126	@ 0x7e
 801ffb8:	d10f      	bne.n	801ffda <mg_is_url_safe+0x52>
 801ffba:	2001      	movs	r0, #1
 801ffbc:	4770      	bx	lr
 801ffbe:	2861      	cmp	r0, #97	@ 0x61
 801ffc0:	da01      	bge.n	801ffc6 <mg_is_url_safe+0x3e>
 801ffc2:	2000      	movs	r0, #0
 801ffc4:	4770      	bx	lr
 801ffc6:	2001      	movs	r0, #1
 801ffc8:	4770      	bx	lr
 801ffca:	2001      	movs	r0, #1
 801ffcc:	4770      	bx	lr
 801ffce:	2001      	movs	r0, #1
 801ffd0:	4770      	bx	lr
 801ffd2:	2001      	movs	r0, #1
 801ffd4:	4770      	bx	lr
 801ffd6:	2000      	movs	r0, #0
 801ffd8:	4770      	bx	lr
 801ffda:	2000      	movs	r0, #0
}
 801ffdc:	4770      	bx	lr

0801ffde <is_hex_digit>:
int mg_http_status(const struct mg_http_message *hm) {
  return atoi(hm->uri.buf);
}

static bool is_hex_digit(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801ffde:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801ffe2:	2b09      	cmp	r3, #9
 801ffe4:	d908      	bls.n	801fff8 <is_hex_digit+0x1a>
 801ffe6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801ffea:	2b05      	cmp	r3, #5
 801ffec:	d906      	bls.n	801fffc <is_hex_digit+0x1e>
         (c >= 'A' && c <= 'F');
 801ffee:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801fff0:	2805      	cmp	r0, #5
 801fff2:	d805      	bhi.n	8020000 <is_hex_digit+0x22>
 801fff4:	2001      	movs	r0, #1
 801fff6:	4770      	bx	lr
 801fff8:	2001      	movs	r0, #1
 801fffa:	4770      	bx	lr
 801fffc:	2001      	movs	r0, #1
 801fffe:	4770      	bx	lr
 8020000:	2000      	movs	r0, #0
}
 8020002:	4770      	bx	lr

08020004 <roundup>:




static size_t roundup(size_t size, size_t align) {
  return align == 0 ? size : (size + align - 1) / align * align;
 8020004:	b129      	cbz	r1, 8020012 <roundup+0xe>
 8020006:	4408      	add	r0, r1
 8020008:	3801      	subs	r0, #1
 802000a:	fbb0 f0f1 	udiv	r0, r0, r1
 802000e:	fb01 f000 	mul.w	r0, r1, r0
}
 8020012:	4770      	bx	lr

08020014 <escapeseq>:




static const char *escapeseq(int esc) {
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 8020014:	b108      	cbz	r0, 802001a <escapeseq+0x6>
 8020016:	4802      	ldr	r0, [pc, #8]	@ (8020020 <escapeseq+0xc>)
 8020018:	4770      	bx	lr
 802001a:	4802      	ldr	r0, [pc, #8]	@ (8020024 <escapeseq+0x10>)
}
 802001c:	4770      	bx	lr
 802001e:	bf00      	nop
 8020020:	0803973c 	.word	0x0803973c
 8020024:	08039744 	.word	0x08039744

08020028 <json_esc>:

static char json_esc(int c, int esc) {
 8020028:	b570      	push	{r4, r5, r6, lr}
 802002a:	4604      	mov	r4, r0
 802002c:	460d      	mov	r5, r1
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 802002e:	4608      	mov	r0, r1
 8020030:	f7ff fff0 	bl	8020014 <escapeseq>
 8020034:	4606      	mov	r6, r0
 8020036:	fab5 f085 	clz	r0, r5
 802003a:	0940      	lsrs	r0, r0, #5
 802003c:	f7ff ffea 	bl	8020014 <escapeseq>
 8020040:	4602      	mov	r2, r0
  for (p = esc1; *p != '\0'; p++) {
 8020042:	4633      	mov	r3, r6
 8020044:	e000      	b.n	8020048 <json_esc+0x20>
 8020046:	3301      	adds	r3, #1
 8020048:	7818      	ldrb	r0, [r3, #0]
 802004a:	b118      	cbz	r0, 8020054 <json_esc+0x2c>
    if (*p == c) return esc2[p - esc1];
 802004c:	42a0      	cmp	r0, r4
 802004e:	d1fa      	bne.n	8020046 <json_esc+0x1e>
 8020050:	1b9b      	subs	r3, r3, r6
 8020052:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 8020054:	bd70      	pop	{r4, r5, r6, pc}

08020056 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 8020056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802005a:	4607      	mov	r7, r0
 802005c:	460e      	mov	r6, r1
  int i;
  for (i = 0; i < len; i++) {
 802005e:	2400      	movs	r4, #0
 8020060:	e003      	b.n	802006a <mg_pass_string+0x14>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
      i++;
    } else if (s[i] == '\0') {
 8020062:	b1d5      	cbz	r5, 802009a <mg_pass_string+0x44>
      return MG_JSON_INVALID;
    } else if (s[i] == '"') {
 8020064:	2d22      	cmp	r5, #34	@ 0x22
 8020066:	d015      	beq.n	8020094 <mg_pass_string+0x3e>
  for (i = 0; i < len; i++) {
 8020068:	3401      	adds	r4, #1
 802006a:	42b4      	cmp	r4, r6
 802006c:	da10      	bge.n	8020090 <mg_pass_string+0x3a>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 802006e:	4623      	mov	r3, r4
 8020070:	5d3d      	ldrb	r5, [r7, r4]
 8020072:	2d5c      	cmp	r5, #92	@ 0x5c
 8020074:	d1f5      	bne.n	8020062 <mg_pass_string+0xc>
 8020076:	f104 0801 	add.w	r8, r4, #1
 802007a:	45b0      	cmp	r8, r6
 802007c:	daf1      	bge.n	8020062 <mg_pass_string+0xc>
 802007e:	443b      	add	r3, r7
 8020080:	2101      	movs	r1, #1
 8020082:	7858      	ldrb	r0, [r3, #1]
 8020084:	f7ff ffd0 	bl	8020028 <json_esc>
 8020088:	2800      	cmp	r0, #0
 802008a:	d0ea      	beq.n	8020062 <mg_pass_string+0xc>
      i++;
 802008c:	4644      	mov	r4, r8
 802008e:	e7eb      	b.n	8020068 <mg_pass_string+0x12>
      return i;
    }
  }
  return MG_JSON_INVALID;
 8020090:	f06f 0401 	mvn.w	r4, #1
}
 8020094:	4620      	mov	r0, r4
 8020096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MG_JSON_INVALID;
 802009a:	f06f 0401 	mvn.w	r4, #1
 802009e:	e7f9      	b.n	8020094 <mg_pass_string+0x3e>

080200a0 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 80200a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200a4:	ed2d 8b02 	vpush	{d8}
 80200a8:	b085      	sub	sp, #20
 80200aa:	4681      	mov	r9, r0
 80200ac:	9201      	str	r2, [sp, #4]
  double d = 0.0;
  int i = 0, sign = 1;

  // Sign
  if (i < len && *p == '-') {
 80200ae:	f1b1 0800 	subs.w	r8, r1, #0
 80200b2:	dd49      	ble.n	8020148 <mg_atod+0xa8>
 80200b4:	7803      	ldrb	r3, [r0, #0]
 80200b6:	2b2d      	cmp	r3, #45	@ 0x2d
 80200b8:	d04c      	beq.n	8020154 <mg_atod+0xb4>
    sign = -1, i++;
  } else if (i < len && *p == '+') {
 80200ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80200bc:	d04e      	beq.n	802015c <mg_atod+0xbc>
  int i = 0, sign = 1;
 80200be:	f04f 0a01 	mov.w	sl, #1
 80200c2:	2400      	movs	r4, #0
 80200c4:	e043      	b.n	802014e <mg_atod+0xae>
    i++;
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
    d *= 10.0;
 80200c6:	2200      	movs	r2, #0
 80200c8:	4b71      	ldr	r3, [pc, #452]	@ (8020290 <mg_atod+0x1f0>)
 80200ca:	4630      	mov	r0, r6
 80200cc:	4639      	mov	r1, r7
 80200ce:	f7f0 faab 	bl	8010628 <__aeabi_dmul>
 80200d2:	4606      	mov	r6, r0
 80200d4:	460f      	mov	r7, r1
    d += p[i] - '0';
 80200d6:	f1a5 0030 	sub.w	r0, r5, #48	@ 0x30
 80200da:	f7f0 fa3b 	bl	8010554 <__aeabi_i2d>
 80200de:	4632      	mov	r2, r6
 80200e0:	463b      	mov	r3, r7
 80200e2:	f7f0 f8eb 	bl	80102bc <__adddf3>
 80200e6:	4606      	mov	r6, r0
 80200e8:	460f      	mov	r7, r1
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80200ea:	3401      	adds	r4, #1
 80200ec:	4544      	cmp	r4, r8
 80200ee:	da05      	bge.n	80200fc <mg_atod+0x5c>
 80200f0:	f819 5004 	ldrb.w	r5, [r9, r4]
 80200f4:	2d2f      	cmp	r5, #47	@ 0x2f
 80200f6:	d901      	bls.n	80200fc <mg_atod+0x5c>
 80200f8:	2d39      	cmp	r5, #57	@ 0x39
 80200fa:	d9e4      	bls.n	80200c6 <mg_atod+0x26>
  }
  d *= sign;
 80200fc:	4650      	mov	r0, sl
 80200fe:	f7f0 fa29 	bl	8010554 <__aeabi_i2d>
 8020102:	4602      	mov	r2, r0
 8020104:	460b      	mov	r3, r1
 8020106:	ec43 2b18 	vmov	d8, r2, r3
 802010a:	4632      	mov	r2, r6
 802010c:	463b      	mov	r3, r7
 802010e:	f7f0 fa8b 	bl	8010628 <__aeabi_dmul>
 8020112:	4606      	mov	r6, r0
 8020114:	460f      	mov	r7, r1

  // Fractional
  if (i < len && p[i] == '.') {
 8020116:	4544      	cmp	r4, r8
 8020118:	da03      	bge.n	8020122 <mg_atod+0x82>
 802011a:	f819 3004 	ldrb.w	r3, [r9, r4]
 802011e:	2b2e      	cmp	r3, #46	@ 0x2e
 8020120:	d020      	beq.n	8020164 <mg_atod+0xc4>
    }
    d += frac * sign;
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 8020122:	4544      	cmp	r4, r8
 8020124:	f280 80a1 	bge.w	802026a <mg_atod+0x1ca>
 8020128:	f819 3004 	ldrb.w	r3, [r9, r4]
 802012c:	2b65      	cmp	r3, #101	@ 0x65
 802012e:	d002      	beq.n	8020136 <mg_atod+0x96>
 8020130:	2b45      	cmp	r3, #69	@ 0x45
 8020132:	f040 809a 	bne.w	802026a <mg_atod+0x1ca>
    int j, exp = 0, minus = 0;
    i++;
 8020136:	1c63      	adds	r3, r4, #1
    if (i < len && p[i] == '-') minus = 1, i++;
 8020138:	4598      	cmp	r8, r3
 802013a:	dd58      	ble.n	80201ee <mg_atod+0x14e>
 802013c:	f819 2003 	ldrb.w	r2, [r9, r3]
 8020140:	2a2d      	cmp	r2, #45	@ 0x2d
 8020142:	d051      	beq.n	80201e8 <mg_atod+0x148>
    int j, exp = 0, minus = 0;
 8020144:	2200      	movs	r2, #0
 8020146:	e053      	b.n	80201f0 <mg_atod+0x150>
  int i = 0, sign = 1;
 8020148:	f04f 0a01 	mov.w	sl, #1
 802014c:	2400      	movs	r4, #0
    i++;
 802014e:	2600      	movs	r6, #0
 8020150:	2700      	movs	r7, #0
 8020152:	e7cb      	b.n	80200ec <mg_atod+0x4c>
    sign = -1, i++;
 8020154:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8020158:	2401      	movs	r4, #1
 802015a:	e7f8      	b.n	802014e <mg_atod+0xae>
  int i = 0, sign = 1;
 802015c:	f04f 0a01 	mov.w	sl, #1
    i++;
 8020160:	4654      	mov	r4, sl
 8020162:	e7f4      	b.n	802014e <mg_atod+0xae>
    i++;
 8020164:	3401      	adds	r4, #1
    double frac = 0.0, base = 0.1;
 8020166:	f20f 1b18 	addw	fp, pc, #280	@ 0x118
 802016a:	e9db ab00 	ldrd	sl, fp, [fp]
 802016e:	ed9f 7b46 	vldr	d7, [pc, #280]	@ 8020288 <mg_atod+0x1e8>
 8020172:	ec53 2b17 	vmov	r2, r3, d7
 8020176:	e9cd 6702 	strd	r6, r7, [sp, #8]
 802017a:	464f      	mov	r7, r9
 802017c:	4645      	mov	r5, r8
 802017e:	4690      	mov	r8, r2
 8020180:	4699      	mov	r9, r3
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8020182:	e017      	b.n	80201b4 <mg_atod+0x114>
      frac += base * (p[i] - '0');
 8020184:	3830      	subs	r0, #48	@ 0x30
 8020186:	f7f0 f9e5 	bl	8010554 <__aeabi_i2d>
 802018a:	4652      	mov	r2, sl
 802018c:	465b      	mov	r3, fp
 802018e:	f7f0 fa4b 	bl	8010628 <__aeabi_dmul>
 8020192:	4602      	mov	r2, r0
 8020194:	460b      	mov	r3, r1
 8020196:	4640      	mov	r0, r8
 8020198:	4649      	mov	r1, r9
 802019a:	f7f0 f88f 	bl	80102bc <__adddf3>
 802019e:	4680      	mov	r8, r0
 80201a0:	4689      	mov	r9, r1
      base /= 10.0;
 80201a2:	2200      	movs	r2, #0
 80201a4:	4b3a      	ldr	r3, [pc, #232]	@ (8020290 <mg_atod+0x1f0>)
 80201a6:	4650      	mov	r0, sl
 80201a8:	4659      	mov	r1, fp
 80201aa:	f7f0 fb67 	bl	801087c <__aeabi_ddiv>
 80201ae:	4682      	mov	sl, r0
 80201b0:	468b      	mov	fp, r1
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80201b2:	3401      	adds	r4, #1
 80201b4:	42ac      	cmp	r4, r5
 80201b6:	da04      	bge.n	80201c2 <mg_atod+0x122>
 80201b8:	5d38      	ldrb	r0, [r7, r4]
 80201ba:	282f      	cmp	r0, #47	@ 0x2f
 80201bc:	d901      	bls.n	80201c2 <mg_atod+0x122>
 80201be:	2839      	cmp	r0, #57	@ 0x39
 80201c0:	d9e0      	bls.n	8020184 <mg_atod+0xe4>
    d += frac * sign;
 80201c2:	4642      	mov	r2, r8
 80201c4:	464b      	mov	r3, r9
 80201c6:	46b9      	mov	r9, r7
 80201c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80201cc:	46a8      	mov	r8, r5
 80201ce:	ec51 0b18 	vmov	r0, r1, d8
 80201d2:	f7f0 fa29 	bl	8010628 <__aeabi_dmul>
 80201d6:	4602      	mov	r2, r0
 80201d8:	460b      	mov	r3, r1
 80201da:	4630      	mov	r0, r6
 80201dc:	4639      	mov	r1, r7
 80201de:	f7f0 f86d 	bl	80102bc <__adddf3>
 80201e2:	4606      	mov	r6, r0
 80201e4:	460f      	mov	r7, r1
 80201e6:	e79c      	b.n	8020122 <mg_atod+0x82>
    if (i < len && p[i] == '-') minus = 1, i++;
 80201e8:	1ca3      	adds	r3, r4, #2
 80201ea:	2201      	movs	r2, #1
 80201ec:	e000      	b.n	80201f0 <mg_atod+0x150>
    int j, exp = 0, minus = 0;
 80201ee:	2200      	movs	r2, #0
    if (i < len && p[i] == '+') i++;
 80201f0:	4543      	cmp	r3, r8
 80201f2:	da03      	bge.n	80201fc <mg_atod+0x15c>
 80201f4:	f819 1003 	ldrb.w	r1, [r9, r3]
 80201f8:	292b      	cmp	r1, #43	@ 0x2b
 80201fa:	d013      	beq.n	8020224 <mg_atod+0x184>
    if (i < len && p[i] == '-') minus = 1, i++;
 80201fc:	461c      	mov	r4, r3
 80201fe:	2500      	movs	r5, #0
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8020200:	4544      	cmp	r4, r8
 8020202:	da11      	bge.n	8020228 <mg_atod+0x188>
 8020204:	f819 3004 	ldrb.w	r3, [r9, r4]
 8020208:	2b2f      	cmp	r3, #47	@ 0x2f
 802020a:	d90d      	bls.n	8020228 <mg_atod+0x188>
 802020c:	2b39      	cmp	r3, #57	@ 0x39
 802020e:	d80b      	bhi.n	8020228 <mg_atod+0x188>
 8020210:	f5b5 7f9a 	cmp.w	r5, #308	@ 0x134
 8020214:	da08      	bge.n	8020228 <mg_atod+0x188>
      exp = exp * 10 + (p[i++] - '0');
 8020216:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 802021a:	3401      	adds	r4, #1
 802021c:	3b30      	subs	r3, #48	@ 0x30
 802021e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8020222:	e7ed      	b.n	8020200 <mg_atod+0x160>
    if (i < len && p[i] == '+') i++;
 8020224:	3301      	adds	r3, #1
 8020226:	e7e9      	b.n	80201fc <mg_atod+0x15c>
    if (minus) exp = -exp;
 8020228:	b102      	cbz	r2, 802022c <mg_atod+0x18c>
 802022a:	426d      	negs	r5, r5
    for (j = 0; j < exp; j++) d *= 10.0;
 802022c:	f04f 0800 	mov.w	r8, #0
 8020230:	e009      	b.n	8020246 <mg_atod+0x1a6>
 8020232:	2200      	movs	r2, #0
 8020234:	4b16      	ldr	r3, [pc, #88]	@ (8020290 <mg_atod+0x1f0>)
 8020236:	4630      	mov	r0, r6
 8020238:	4639      	mov	r1, r7
 802023a:	f7f0 f9f5 	bl	8010628 <__aeabi_dmul>
 802023e:	4606      	mov	r6, r0
 8020240:	460f      	mov	r7, r1
 8020242:	f108 0801 	add.w	r8, r8, #1
 8020246:	45a8      	cmp	r8, r5
 8020248:	dbf3      	blt.n	8020232 <mg_atod+0x192>
    for (j = 0; j < -exp; j++) d /= 10.0;
 802024a:	f04f 0800 	mov.w	r8, #0
 802024e:	e009      	b.n	8020264 <mg_atod+0x1c4>
 8020250:	2200      	movs	r2, #0
 8020252:	4b0f      	ldr	r3, [pc, #60]	@ (8020290 <mg_atod+0x1f0>)
 8020254:	4630      	mov	r0, r6
 8020256:	4639      	mov	r1, r7
 8020258:	f7f0 fb10 	bl	801087c <__aeabi_ddiv>
 802025c:	4606      	mov	r6, r0
 802025e:	460f      	mov	r7, r1
 8020260:	f108 0801 	add.w	r8, r8, #1
 8020264:	426b      	negs	r3, r5
 8020266:	4543      	cmp	r3, r8
 8020268:	dcf2      	bgt.n	8020250 <mg_atod+0x1b0>
  }

  if (numlen != NULL) *numlen = i;
 802026a:	9b01      	ldr	r3, [sp, #4]
 802026c:	b103      	cbz	r3, 8020270 <mg_atod+0x1d0>
 802026e:	601c      	str	r4, [r3, #0]
  return d;
}
 8020270:	ec47 6b10 	vmov	d0, r6, r7
 8020274:	b005      	add	sp, #20
 8020276:	ecbd 8b02 	vpop	{d8}
 802027a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802027e:	bf00      	nop
 8020280:	9999999a 	.word	0x9999999a
 8020284:	3fb99999 	.word	0x3fb99999
	...
 8020290:	40240000 	.word	0x40240000

08020294 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8020294:	b508      	push	{r3, lr}
  s_log_func((char) c, s_log_func_param);
 8020296:	4b03      	ldr	r3, [pc, #12]	@ (80202a4 <logc+0x10>)
 8020298:	681b      	ldr	r3, [r3, #0]
 802029a:	4a03      	ldr	r2, [pc, #12]	@ (80202a8 <logc+0x14>)
 802029c:	6811      	ldr	r1, [r2, #0]
 802029e:	4798      	blx	r3
}
 80202a0:	bd08      	pop	{r3, pc}
 80202a2:	bf00      	nop
 80202a4:	20000128 	.word	0x20000128
 80202a8:	20019ec8 	.word	0x20019ec8

080202ac <logs>:

static void logs(const char *buf, size_t len) {
 80202ac:	b570      	push	{r4, r5, r6, lr}
 80202ae:	4606      	mov	r6, r0
 80202b0:	460d      	mov	r5, r1
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 80202b2:	2400      	movs	r4, #0
 80202b4:	e003      	b.n	80202be <logs+0x12>
 80202b6:	5d30      	ldrb	r0, [r6, r4]
 80202b8:	f7ff ffec 	bl	8020294 <logc>
 80202bc:	3401      	adds	r4, #1
 80202be:	42ac      	cmp	r4, r5
 80202c0:	d3f9      	bcc.n	80202b6 <logs+0xa>
}
 80202c2:	bd70      	pop	{r4, r5, r6, pc}

080202c4 <nibble>:
  logs("\r\n", 2);
}
#endif

static unsigned char nibble(unsigned c) {
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 80202c4:	2809      	cmp	r0, #9
 80202c6:	d803      	bhi.n	80202d0 <nibble+0xc>
 80202c8:	b2c0      	uxtb	r0, r0
 80202ca:	3030      	adds	r0, #48	@ 0x30
 80202cc:	b2c0      	uxtb	r0, r0
 80202ce:	4770      	bx	lr
 80202d0:	b2c0      	uxtb	r0, r0
 80202d2:	3057      	adds	r0, #87	@ 0x57
 80202d4:	b2c0      	uxtb	r0, r0
}
 80202d6:	4770      	bx	lr

080202d8 <mg_md5_transform>:

  ctx->bits[0] = 0;
  ctx->bits[1] = 0;
}

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 80202d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202dc:	b08d      	sub	sp, #52	@ 0x34
  uint32_t a, b, c, d;

  a = buf[0];
  b = buf[1];
 80202de:	6846      	ldr	r6, [r0, #4]
  c = buf[2];
  d = buf[3];

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 80202e0:	6883      	ldr	r3, [r0, #8]
 80202e2:	68c2      	ldr	r2, [r0, #12]
 80202e4:	4053      	eors	r3, r2
 80202e6:	4033      	ands	r3, r6
 80202e8:	4053      	eors	r3, r2
 80202ea:	f8d1 a000 	ldr.w	sl, [r1]
 80202ee:	4453      	add	r3, sl
 80202f0:	6802      	ldr	r2, [r0, #0]
 80202f2:	4413      	add	r3, r2
 80202f4:	4ae0      	ldr	r2, [pc, #896]	@ (8020678 <mg_md5_transform+0x3a0>)
 80202f6:	441a      	add	r2, r3
 80202f8:	eb06 6272 	add.w	r2, r6, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 80202fc:	6883      	ldr	r3, [r0, #8]
 80202fe:	ea86 0503 	eor.w	r5, r6, r3
 8020302:	4015      	ands	r5, r2
 8020304:	405d      	eors	r5, r3
 8020306:	684b      	ldr	r3, [r1, #4]
 8020308:	9301      	str	r3, [sp, #4]
 802030a:	441d      	add	r5, r3
 802030c:	68c4      	ldr	r4, [r0, #12]
 802030e:	4425      	add	r5, r4
 8020310:	4bda      	ldr	r3, [pc, #872]	@ (802067c <mg_md5_transform+0x3a4>)
 8020312:	442b      	add	r3, r5
 8020314:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 8020318:	ea86 0502 	eor.w	r5, r6, r2
 802031c:	401d      	ands	r5, r3
 802031e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8020320:	4075      	eors	r5, r6
 8020322:	688c      	ldr	r4, [r1, #8]
 8020324:	4425      	add	r5, r4
 8020326:	6886      	ldr	r6, [r0, #8]
 8020328:	4435      	add	r5, r6
 802032a:	4ed5      	ldr	r6, [pc, #852]	@ (8020680 <mg_md5_transform+0x3a8>)
 802032c:	442e      	add	r6, r5
 802032e:	eb03 3cf6 	add.w	ip, r3, r6, ror #15
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 8020332:	ea82 0703 	eor.w	r7, r2, r3
 8020336:	ea07 070c 	and.w	r7, r7, ip
 802033a:	4057      	eors	r7, r2
 802033c:	68cd      	ldr	r5, [r1, #12]
 802033e:	950a      	str	r5, [sp, #40]	@ 0x28
 8020340:	442f      	add	r7, r5
 8020342:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8020344:	4437      	add	r7, r6
 8020346:	4dcf      	ldr	r5, [pc, #828]	@ (8020684 <mg_md5_transform+0x3ac>)
 8020348:	443d      	add	r5, r7
 802034a:	eb0c 25b5 	add.w	r5, ip, r5, ror #10
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 802034e:	ea83 070c 	eor.w	r7, r3, ip
 8020352:	402f      	ands	r7, r5
 8020354:	405f      	eors	r7, r3
 8020356:	690e      	ldr	r6, [r1, #16]
 8020358:	9602      	str	r6, [sp, #8]
 802035a:	4437      	add	r7, r6
 802035c:	4417      	add	r7, r2
 802035e:	4aca      	ldr	r2, [pc, #808]	@ (8020688 <mg_md5_transform+0x3b0>)
 8020360:	443a      	add	r2, r7
 8020362:	eb05 6272 	add.w	r2, r5, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 8020366:	ea8c 0705 	eor.w	r7, ip, r5
 802036a:	4017      	ands	r7, r2
 802036c:	ea87 070c 	eor.w	r7, r7, ip
 8020370:	694e      	ldr	r6, [r1, #20]
 8020372:	9603      	str	r6, [sp, #12]
 8020374:	4437      	add	r7, r6
 8020376:	441f      	add	r7, r3
 8020378:	4bc4      	ldr	r3, [pc, #784]	@ (802068c <mg_md5_transform+0x3b4>)
 802037a:	443b      	add	r3, r7
 802037c:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 8020380:	ea85 0702 	eor.w	r7, r5, r2
 8020384:	401f      	ands	r7, r3
 8020386:	406f      	eors	r7, r5
 8020388:	698e      	ldr	r6, [r1, #24]
 802038a:	9604      	str	r6, [sp, #16]
 802038c:	4437      	add	r7, r6
 802038e:	eb0c 0607 	add.w	r6, ip, r7
 8020392:	4fbf      	ldr	r7, [pc, #764]	@ (8020690 <mg_md5_transform+0x3b8>)
 8020394:	4437      	add	r7, r6
 8020396:	eb03 3cf7 	add.w	ip, r3, r7, ror #15
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 802039a:	ea82 0603 	eor.w	r6, r2, r3
 802039e:	ea06 060c 	and.w	r6, r6, ip
 80203a2:	4056      	eors	r6, r2
 80203a4:	f8d1 901c 	ldr.w	r9, [r1, #28]
 80203a8:	444e      	add	r6, r9
 80203aa:	4435      	add	r5, r6
 80203ac:	4fb9      	ldr	r7, [pc, #740]	@ (8020694 <mg_md5_transform+0x3bc>)
 80203ae:	442f      	add	r7, r5
 80203b0:	eb0c 27b7 	add.w	r7, ip, r7, ror #10
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 80203b4:	ea83 050c 	eor.w	r5, r3, ip
 80203b8:	403d      	ands	r5, r7
 80203ba:	405d      	eors	r5, r3
 80203bc:	6a0e      	ldr	r6, [r1, #32]
 80203be:	9605      	str	r6, [sp, #20]
 80203c0:	4435      	add	r5, r6
 80203c2:	442a      	add	r2, r5
 80203c4:	4eb4      	ldr	r6, [pc, #720]	@ (8020698 <mg_md5_transform+0x3c0>)
 80203c6:	4416      	add	r6, r2
 80203c8:	eb07 6676 	add.w	r6, r7, r6, ror #25
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 80203cc:	ea8c 0207 	eor.w	r2, ip, r7
 80203d0:	4032      	ands	r2, r6
 80203d2:	ea82 020c 	eor.w	r2, r2, ip
 80203d6:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80203d8:	9506      	str	r5, [sp, #24]
 80203da:	442a      	add	r2, r5
 80203dc:	4413      	add	r3, r2
 80203de:	4daf      	ldr	r5, [pc, #700]	@ (802069c <mg_md5_transform+0x3c4>)
 80203e0:	441d      	add	r5, r3
 80203e2:	eb06 5535 	add.w	r5, r6, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 80203e6:	ea87 0306 	eor.w	r3, r7, r6
 80203ea:	402b      	ands	r3, r5
 80203ec:	407b      	eors	r3, r7
 80203ee:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80203f0:	9207      	str	r2, [sp, #28]
 80203f2:	4413      	add	r3, r2
 80203f4:	4463      	add	r3, ip
 80203f6:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 80203fa:	3b4f      	subs	r3, #79	@ 0x4f
 80203fc:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 8020400:	ea86 0c05 	eor.w	ip, r6, r5
 8020404:	ea0c 0c03 	and.w	ip, ip, r3
 8020408:	ea8c 0c06 	eor.w	ip, ip, r6
 802040c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 802040e:	9208      	str	r2, [sp, #32]
 8020410:	4494      	add	ip, r2
 8020412:	4467      	add	r7, ip
 8020414:	f8df e2a8 	ldr.w	lr, [pc, #680]	@ 80206c0 <mg_md5_transform+0x3e8>
 8020418:	44be      	add	lr, r7
 802041a:	eb03 2ebe 	add.w	lr, r3, lr, ror #10
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 802041e:	ea85 0c03 	eor.w	ip, r5, r3
 8020422:	ea0c 0c0e 	and.w	ip, ip, lr
 8020426:	ea8c 0c05 	eor.w	ip, ip, r5
 802042a:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 802042c:	44bc      	add	ip, r7
 802042e:	4466      	add	r6, ip
 8020430:	f8df c290 	ldr.w	ip, [pc, #656]	@ 80206c4 <mg_md5_transform+0x3ec>
 8020434:	44b4      	add	ip, r6
 8020436:	eb0e 6c7c 	add.w	ip, lr, ip, ror #25
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 802043a:	ea83 080e 	eor.w	r8, r3, lr
 802043e:	ea08 080c 	and.w	r8, r8, ip
 8020442:	ea88 0803 	eor.w	r8, r8, r3
 8020446:	6b4e      	ldr	r6, [r1, #52]	@ 0x34
 8020448:	44b0      	add	r8, r6
 802044a:	44a8      	add	r8, r5
 802044c:	4d94      	ldr	r5, [pc, #592]	@ (80206a0 <mg_md5_transform+0x3c8>)
 802044e:	4445      	add	r5, r8
 8020450:	eb0c 5535 	add.w	r5, ip, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 8020454:	ea8e 0b0c 	eor.w	fp, lr, ip
 8020458:	ea0b 0b05 	and.w	fp, fp, r5
 802045c:	ea8b 0b0e 	eor.w	fp, fp, lr
 8020460:	f8d1 8038 	ldr.w	r8, [r1, #56]	@ 0x38
 8020464:	44c3      	add	fp, r8
 8020466:	449b      	add	fp, r3
 8020468:	4b8e      	ldr	r3, [pc, #568]	@ (80206a4 <mg_md5_transform+0x3cc>)
 802046a:	445b      	add	r3, fp
 802046c:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 8020470:	ea8c 0b05 	eor.w	fp, ip, r5
 8020474:	ea0b 0b03 	and.w	fp, fp, r3
 8020478:	ea8b 0b0c 	eor.w	fp, fp, ip
 802047c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 802047e:	9109      	str	r1, [sp, #36]	@ 0x24
 8020480:	448b      	add	fp, r1
 8020482:	44f3      	add	fp, lr
 8020484:	f8df e240 	ldr.w	lr, [pc, #576]	@ 80206c8 <mg_md5_transform+0x3f0>
 8020488:	44de      	add	lr, fp
 802048a:	eb03 2ebe 	add.w	lr, r3, lr, ror #10

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 802048e:	ea83 0b0e 	eor.w	fp, r3, lr
 8020492:	ea0b 0b05 	and.w	fp, fp, r5
 8020496:	ea8b 0b03 	eor.w	fp, fp, r3
 802049a:	9a01      	ldr	r2, [sp, #4]
 802049c:	4493      	add	fp, r2
 802049e:	44e3      	add	fp, ip
 80204a0:	f8df c228 	ldr.w	ip, [pc, #552]	@ 80206cc <mg_md5_transform+0x3f4>
 80204a4:	44dc      	add	ip, fp
 80204a6:	eb0e 6cfc 	add.w	ip, lr, ip, ror #27
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 80204aa:	ea8e 0b0c 	eor.w	fp, lr, ip
 80204ae:	ea0b 0b03 	and.w	fp, fp, r3
 80204b2:	ea8b 0b0e 	eor.w	fp, fp, lr
 80204b6:	9a04      	ldr	r2, [sp, #16]
 80204b8:	4493      	add	fp, r2
 80204ba:	44ab      	add	fp, r5
 80204bc:	4d7a      	ldr	r5, [pc, #488]	@ (80206a8 <mg_md5_transform+0x3d0>)
 80204be:	445d      	add	r5, fp
 80204c0:	eb0c 55f5 	add.w	r5, ip, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 80204c4:	ea8c 0b05 	eor.w	fp, ip, r5
 80204c8:	ea0b 0b0e 	and.w	fp, fp, lr
 80204cc:	ea8b 0b0c 	eor.w	fp, fp, ip
 80204d0:	9908      	ldr	r1, [sp, #32]
 80204d2:	448b      	add	fp, r1
 80204d4:	445b      	add	r3, fp
 80204d6:	f8df b1f8 	ldr.w	fp, [pc, #504]	@ 80206d0 <mg_md5_transform+0x3f8>
 80204da:	449b      	add	fp, r3
 80204dc:	eb05 4bbb 	add.w	fp, r5, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 80204e0:	ea85 030b 	eor.w	r3, r5, fp
 80204e4:	ea03 030c 	and.w	r3, r3, ip
 80204e8:	406b      	eors	r3, r5
 80204ea:	4453      	add	r3, sl
 80204ec:	4473      	add	r3, lr
 80204ee:	f8df e1e4 	ldr.w	lr, [pc, #484]	@ 80206d4 <mg_md5_transform+0x3fc>
 80204f2:	449e      	add	lr, r3
 80204f4:	eb0b 3e3e 	add.w	lr, fp, lr, ror #12
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 80204f8:	ea8b 030e 	eor.w	r3, fp, lr
 80204fc:	402b      	ands	r3, r5
 80204fe:	ea83 030b 	eor.w	r3, r3, fp
 8020502:	9a03      	ldr	r2, [sp, #12]
 8020504:	4413      	add	r3, r2
 8020506:	449c      	add	ip, r3
 8020508:	4b68      	ldr	r3, [pc, #416]	@ (80206ac <mg_md5_transform+0x3d4>)
 802050a:	4463      	add	r3, ip
 802050c:	eb0e 63f3 	add.w	r3, lr, r3, ror #27
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 8020510:	ea8e 0c03 	eor.w	ip, lr, r3
 8020514:	ea0c 0c0b 	and.w	ip, ip, fp
 8020518:	ea8c 0c0e 	eor.w	ip, ip, lr
 802051c:	9a07      	ldr	r2, [sp, #28]
 802051e:	4494      	add	ip, r2
 8020520:	4465      	add	r5, ip
 8020522:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 80206d8 <mg_md5_transform+0x400>
 8020526:	44ac      	add	ip, r5
 8020528:	eb03 5cfc 	add.w	ip, r3, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 802052c:	ea83 050c 	eor.w	r5, r3, ip
 8020530:	ea05 050e 	and.w	r5, r5, lr
 8020534:	405d      	eors	r5, r3
 8020536:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020538:	440d      	add	r5, r1
 802053a:	445d      	add	r5, fp
 802053c:	f8df b19c 	ldr.w	fp, [pc, #412]	@ 80206dc <mg_md5_transform+0x404>
 8020540:	44ab      	add	fp, r5
 8020542:	eb0c 4bbb 	add.w	fp, ip, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 8020546:	ea8c 050b 	eor.w	r5, ip, fp
 802054a:	401d      	ands	r5, r3
 802054c:	ea85 050c 	eor.w	r5, r5, ip
 8020550:	9a02      	ldr	r2, [sp, #8]
 8020552:	4415      	add	r5, r2
 8020554:	44ae      	add	lr, r5
 8020556:	4d56      	ldr	r5, [pc, #344]	@ (80206b0 <mg_md5_transform+0x3d8>)
 8020558:	4475      	add	r5, lr
 802055a:	eb0b 3535 	add.w	r5, fp, r5, ror #12
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 802055e:	ea8b 0e05 	eor.w	lr, fp, r5
 8020562:	ea0e 0e0c 	and.w	lr, lr, ip
 8020566:	ea8e 0e0b 	eor.w	lr, lr, fp
 802056a:	9906      	ldr	r1, [sp, #24]
 802056c:	448e      	add	lr, r1
 802056e:	4473      	add	r3, lr
 8020570:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 80206e0 <mg_md5_transform+0x408>
 8020574:	449e      	add	lr, r3
 8020576:	eb05 6efe 	add.w	lr, r5, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 802057a:	ea85 030e 	eor.w	r3, r5, lr
 802057e:	ea03 030b 	and.w	r3, r3, fp
 8020582:	406b      	eors	r3, r5
 8020584:	4443      	add	r3, r8
 8020586:	4463      	add	r3, ip
 8020588:	f8df c158 	ldr.w	ip, [pc, #344]	@ 80206e4 <mg_md5_transform+0x40c>
 802058c:	449c      	add	ip, r3
 802058e:	eb0e 5cfc 	add.w	ip, lr, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 8020592:	ea8e 030c 	eor.w	r3, lr, ip
 8020596:	402b      	ands	r3, r5
 8020598:	ea83 030e 	eor.w	r3, r3, lr
 802059c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802059e:	4413      	add	r3, r2
 80205a0:	449b      	add	fp, r3
 80205a2:	4b44      	ldr	r3, [pc, #272]	@ (80206b4 <mg_md5_transform+0x3dc>)
 80205a4:	445b      	add	r3, fp
 80205a6:	eb0c 43b3 	add.w	r3, ip, r3, ror #18
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 80205aa:	ea8c 0b03 	eor.w	fp, ip, r3
 80205ae:	ea0b 0b0e 	and.w	fp, fp, lr
 80205b2:	ea8b 0b0c 	eor.w	fp, fp, ip
 80205b6:	9905      	ldr	r1, [sp, #20]
 80205b8:	448b      	add	fp, r1
 80205ba:	445d      	add	r5, fp
 80205bc:	f8df b128 	ldr.w	fp, [pc, #296]	@ 80206e8 <mg_md5_transform+0x410>
 80205c0:	44ab      	add	fp, r5
 80205c2:	eb03 3b3b 	add.w	fp, r3, fp, ror #12
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 80205c6:	ea83 050b 	eor.w	r5, r3, fp
 80205ca:	ea05 050c 	and.w	r5, r5, ip
 80205ce:	405d      	eors	r5, r3
 80205d0:	4435      	add	r5, r6
 80205d2:	4475      	add	r5, lr
 80205d4:	f8df e114 	ldr.w	lr, [pc, #276]	@ 80206ec <mg_md5_transform+0x414>
 80205d8:	44ae      	add	lr, r5
 80205da:	eb0b 6efe 	add.w	lr, fp, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 80205de:	ea8b 050e 	eor.w	r5, fp, lr
 80205e2:	401d      	ands	r5, r3
 80205e4:	ea85 050b 	eor.w	r5, r5, fp
 80205e8:	4425      	add	r5, r4
 80205ea:	44ac      	add	ip, r5
 80205ec:	4d32      	ldr	r5, [pc, #200]	@ (80206b8 <mg_md5_transform+0x3e0>)
 80205ee:	4465      	add	r5, ip
 80205f0:	eb0e 55f5 	add.w	r5, lr, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 80205f4:	ea8e 0c05 	eor.w	ip, lr, r5
 80205f8:	ea0c 0c0b 	and.w	ip, ip, fp
 80205fc:	ea8c 0c0e 	eor.w	ip, ip, lr
 8020600:	44cc      	add	ip, r9
 8020602:	4463      	add	r3, ip
 8020604:	f8df c0e8 	ldr.w	ip, [pc, #232]	@ 80206f0 <mg_md5_transform+0x418>
 8020608:	449c      	add	ip, r3
 802060a:	eb05 4cbc 	add.w	ip, r5, ip, ror #18
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 802060e:	ea85 030c 	eor.w	r3, r5, ip
 8020612:	ea03 030e 	and.w	r3, r3, lr
 8020616:	406b      	eors	r3, r5
 8020618:	443b      	add	r3, r7
 802061a:	445b      	add	r3, fp
 802061c:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 80206f4 <mg_md5_transform+0x41c>
 8020620:	449b      	add	fp, r3
 8020622:	eb0c 3b3b 	add.w	fp, ip, fp, ror #12

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 8020626:	ea8c 030b 	eor.w	r3, ip, fp
 802062a:	406b      	eors	r3, r5
 802062c:	9a03      	ldr	r2, [sp, #12]
 802062e:	4413      	add	r3, r2
 8020630:	4473      	add	r3, lr
 8020632:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 8020636:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 802063a:	eb0b 7333 	add.w	r3, fp, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 802063e:	ea8b 0e03 	eor.w	lr, fp, r3
 8020642:	ea8e 0e0c 	eor.w	lr, lr, ip
 8020646:	448e      	add	lr, r1
 8020648:	44ae      	add	lr, r5
 802064a:	4d1c      	ldr	r5, [pc, #112]	@ (80206bc <mg_md5_transform+0x3e4>)
 802064c:	4475      	add	r5, lr
 802064e:	eb03 5575 	add.w	r5, r3, r5, ror #21
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 8020652:	ea83 0e05 	eor.w	lr, r3, r5
 8020656:	ea8e 0e0b 	eor.w	lr, lr, fp
 802065a:	9908      	ldr	r1, [sp, #32]
 802065c:	448e      	add	lr, r1
 802065e:	44f4      	add	ip, lr
 8020660:	f8df e094 	ldr.w	lr, [pc, #148]	@ 80206f8 <mg_md5_transform+0x420>
 8020664:	44e6      	add	lr, ip
 8020666:	eb05 4e3e 	add.w	lr, r5, lr, ror #16
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 802066a:	ea85 0c0e 	eor.w	ip, r5, lr
 802066e:	ea8c 0c03 	eor.w	ip, ip, r3
 8020672:	44c4      	add	ip, r8
 8020674:	44e3      	add	fp, ip
 8020676:	e041      	b.n	80206fc <mg_md5_transform+0x424>
 8020678:	d76aa478 	.word	0xd76aa478
 802067c:	e8c7b756 	.word	0xe8c7b756
 8020680:	242070db 	.word	0x242070db
 8020684:	c1bdceee 	.word	0xc1bdceee
 8020688:	f57c0faf 	.word	0xf57c0faf
 802068c:	4787c62a 	.word	0x4787c62a
 8020690:	a8304613 	.word	0xa8304613
 8020694:	fd469501 	.word	0xfd469501
 8020698:	698098d8 	.word	0x698098d8
 802069c:	8b44f7af 	.word	0x8b44f7af
 80206a0:	fd987193 	.word	0xfd987193
 80206a4:	a679438e 	.word	0xa679438e
 80206a8:	c040b340 	.word	0xc040b340
 80206ac:	d62f105d 	.word	0xd62f105d
 80206b0:	e7d3fbc8 	.word	0xe7d3fbc8
 80206b4:	f4d50d87 	.word	0xf4d50d87
 80206b8:	fcefa3f8 	.word	0xfcefa3f8
 80206bc:	8771f681 	.word	0x8771f681
 80206c0:	895cd7be 	.word	0x895cd7be
 80206c4:	6b901122 	.word	0x6b901122
 80206c8:	49b40821 	.word	0x49b40821
 80206cc:	f61e2562 	.word	0xf61e2562
 80206d0:	265e5a51 	.word	0x265e5a51
 80206d4:	e9b6c7aa 	.word	0xe9b6c7aa
 80206d8:	02441453 	.word	0x02441453
 80206dc:	d8a1e681 	.word	0xd8a1e681
 80206e0:	21e1cde6 	.word	0x21e1cde6
 80206e4:	c33707d6 	.word	0xc33707d6
 80206e8:	455a14ed 	.word	0x455a14ed
 80206ec:	a9e3e905 	.word	0xa9e3e905
 80206f0:	676f02d9 	.word	0x676f02d9
 80206f4:	8d2a4c8a 	.word	0x8d2a4c8a
 80206f8:	6d9d6122 	.word	0x6d9d6122
 80206fc:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 80209c4 <mg_md5_transform+0x6ec>
 8020700:	44dc      	add	ip, fp
 8020702:	eb0e 2c7c 	add.w	ip, lr, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 8020706:	ea8e 0b0c 	eor.w	fp, lr, ip
 802070a:	ea8b 0b05 	eor.w	fp, fp, r5
 802070e:	9a01      	ldr	r2, [sp, #4]
 8020710:	4493      	add	fp, r2
 8020712:	449b      	add	fp, r3
 8020714:	4b99      	ldr	r3, [pc, #612]	@ (802097c <mg_md5_transform+0x6a4>)
 8020716:	445b      	add	r3, fp
 8020718:	eb0c 7333 	add.w	r3, ip, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 802071c:	ea8c 0b03 	eor.w	fp, ip, r3
 8020720:	ea8b 0b0e 	eor.w	fp, fp, lr
 8020724:	9a02      	ldr	r2, [sp, #8]
 8020726:	4493      	add	fp, r2
 8020728:	445d      	add	r5, fp
 802072a:	f8df b29c 	ldr.w	fp, [pc, #668]	@ 80209c8 <mg_md5_transform+0x6f0>
 802072e:	44ab      	add	fp, r5
 8020730:	eb03 5b7b 	add.w	fp, r3, fp, ror #21
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 8020734:	ea83 050b 	eor.w	r5, r3, fp
 8020738:	ea85 050c 	eor.w	r5, r5, ip
 802073c:	444d      	add	r5, r9
 802073e:	44ae      	add	lr, r5
 8020740:	4d8f      	ldr	r5, [pc, #572]	@ (8020980 <mg_md5_transform+0x6a8>)
 8020742:	4475      	add	r5, lr
 8020744:	eb0b 4535 	add.w	r5, fp, r5, ror #16
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 8020748:	ea8b 0e05 	eor.w	lr, fp, r5
 802074c:	ea8e 0e03 	eor.w	lr, lr, r3
 8020750:	9a07      	ldr	r2, [sp, #28]
 8020752:	4496      	add	lr, r2
 8020754:	44e6      	add	lr, ip
 8020756:	f8df c274 	ldr.w	ip, [pc, #628]	@ 80209cc <mg_md5_transform+0x6f4>
 802075a:	44f4      	add	ip, lr
 802075c:	eb05 2c7c 	add.w	ip, r5, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 8020760:	ea85 0e0c 	eor.w	lr, r5, ip
 8020764:	ea8e 0e0b 	eor.w	lr, lr, fp
 8020768:	44b6      	add	lr, r6
 802076a:	4473      	add	r3, lr
 802076c:	f8df e260 	ldr.w	lr, [pc, #608]	@ 80209d0 <mg_md5_transform+0x6f8>
 8020770:	449e      	add	lr, r3
 8020772:	eb0c 7e3e 	add.w	lr, ip, lr, ror #28
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 8020776:	ea8c 030e 	eor.w	r3, ip, lr
 802077a:	406b      	eors	r3, r5
 802077c:	4453      	add	r3, sl
 802077e:	449b      	add	fp, r3
 8020780:	4b80      	ldr	r3, [pc, #512]	@ (8020984 <mg_md5_transform+0x6ac>)
 8020782:	445b      	add	r3, fp
 8020784:	eb0e 5373 	add.w	r3, lr, r3, ror #21
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 8020788:	ea8e 0b03 	eor.w	fp, lr, r3
 802078c:	ea8b 0b0c 	eor.w	fp, fp, ip
 8020790:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020792:	4493      	add	fp, r2
 8020794:	445d      	add	r5, fp
 8020796:	f8df b23c 	ldr.w	fp, [pc, #572]	@ 80209d4 <mg_md5_transform+0x6fc>
 802079a:	44ab      	add	fp, r5
 802079c:	eb03 4b3b 	add.w	fp, r3, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 80207a0:	ea83 050b 	eor.w	r5, r3, fp
 80207a4:	ea85 050e 	eor.w	r5, r5, lr
 80207a8:	9904      	ldr	r1, [sp, #16]
 80207aa:	440d      	add	r5, r1
 80207ac:	4465      	add	r5, ip
 80207ae:	f8df c228 	ldr.w	ip, [pc, #552]	@ 80209d8 <mg_md5_transform+0x700>
 80207b2:	44ac      	add	ip, r5
 80207b4:	eb0b 2c7c 	add.w	ip, fp, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 80207b8:	ea8b 050c 	eor.w	r5, fp, ip
 80207bc:	405d      	eors	r5, r3
 80207be:	9906      	ldr	r1, [sp, #24]
 80207c0:	440d      	add	r5, r1
 80207c2:	44ae      	add	lr, r5
 80207c4:	4d70      	ldr	r5, [pc, #448]	@ (8020988 <mg_md5_transform+0x6b0>)
 80207c6:	4475      	add	r5, lr
 80207c8:	eb0c 7535 	add.w	r5, ip, r5, ror #28
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 80207cc:	ea8c 0e05 	eor.w	lr, ip, r5
 80207d0:	ea8e 0e0b 	eor.w	lr, lr, fp
 80207d4:	44be      	add	lr, r7
 80207d6:	4473      	add	r3, lr
 80207d8:	f8df e200 	ldr.w	lr, [pc, #512]	@ 80209dc <mg_md5_transform+0x704>
 80207dc:	449e      	add	lr, r3
 80207de:	eb05 5e7e 	add.w	lr, r5, lr, ror #21
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 80207e2:	ea85 030e 	eor.w	r3, r5, lr
 80207e6:	ea83 030c 	eor.w	r3, r3, ip
 80207ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80207ec:	440b      	add	r3, r1
 80207ee:	445b      	add	r3, fp
 80207f0:	f8df b1ec 	ldr.w	fp, [pc, #492]	@ 80209e0 <mg_md5_transform+0x708>
 80207f4:	449b      	add	fp, r3
 80207f6:	eb0e 4b3b 	add.w	fp, lr, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 80207fa:	ea8e 030b 	eor.w	r3, lr, fp
 80207fe:	406b      	eors	r3, r5
 8020800:	940a      	str	r4, [sp, #40]	@ 0x28
 8020802:	4423      	add	r3, r4
 8020804:	449c      	add	ip, r3
 8020806:	4b61      	ldr	r3, [pc, #388]	@ (802098c <mg_md5_transform+0x6b4>)
 8020808:	4463      	add	r3, ip
 802080a:	eb0b 2373 	add.w	r3, fp, r3, ror #9

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 802080e:	ea63 0c0e 	orn	ip, r3, lr
 8020812:	ea8c 0c0b 	eor.w	ip, ip, fp
 8020816:	44e2      	add	sl, ip
 8020818:	44aa      	add	sl, r5
 802081a:	4d5d      	ldr	r5, [pc, #372]	@ (8020990 <mg_md5_transform+0x6b8>)
 802081c:	4455      	add	r5, sl
 802081e:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 8020822:	ea65 0c0b 	orn	ip, r5, fp
 8020826:	ea8c 0c03 	eor.w	ip, ip, r3
 802082a:	44e1      	add	r9, ip
 802082c:	44f1      	add	r9, lr
 802082e:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 80209e4 <mg_md5_transform+0x70c>
 8020832:	44cc      	add	ip, r9
 8020834:	eb05 5cbc 	add.w	ip, r5, ip, ror #22
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 8020838:	ea6c 0e03 	orn	lr, ip, r3
 802083c:	ea8e 0e05 	eor.w	lr, lr, r5
 8020840:	44f0      	add	r8, lr
 8020842:	44d8      	add	r8, fp
 8020844:	f8df e1a0 	ldr.w	lr, [pc, #416]	@ 80209e8 <mg_md5_transform+0x710>
 8020848:	44c6      	add	lr, r8
 802084a:	eb0c 4e7e 	add.w	lr, ip, lr, ror #17
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 802084e:	ea6e 0805 	orn	r8, lr, r5
 8020852:	ea88 080c 	eor.w	r8, r8, ip
 8020856:	9c03      	ldr	r4, [sp, #12]
 8020858:	44a0      	add	r8, r4
 802085a:	4498      	add	r8, r3
 802085c:	4b4d      	ldr	r3, [pc, #308]	@ (8020994 <mg_md5_transform+0x6bc>)
 802085e:	4443      	add	r3, r8
 8020860:	eb0e 23f3 	add.w	r3, lr, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 8020864:	ea63 080c 	orn	r8, r3, ip
 8020868:	ea88 080e 	eor.w	r8, r8, lr
 802086c:	4447      	add	r7, r8
 802086e:	442f      	add	r7, r5
 8020870:	4d49      	ldr	r5, [pc, #292]	@ (8020998 <mg_md5_transform+0x6c0>)
 8020872:	443d      	add	r5, r7
 8020874:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 8020878:	ea65 070e 	orn	r7, r5, lr
 802087c:	405f      	eors	r7, r3
 802087e:	4417      	add	r7, r2
 8020880:	44bc      	add	ip, r7
 8020882:	4f46      	ldr	r7, [pc, #280]	@ (802099c <mg_md5_transform+0x6c4>)
 8020884:	4467      	add	r7, ip
 8020886:	eb05 57b7 	add.w	r7, r5, r7, ror #22
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 802088a:	ea67 0c03 	orn	ip, r7, r3
 802088e:	ea8c 0c05 	eor.w	ip, ip, r5
 8020892:	9a07      	ldr	r2, [sp, #28]
 8020894:	4462      	add	r2, ip
 8020896:	4472      	add	r2, lr
 8020898:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 802089c:	f6a2 3283 	subw	r2, r2, #2947	@ 0xb83
 80208a0:	eb07 4272 	add.w	r2, r7, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 80208a4:	ea62 0c05 	orn	ip, r2, r5
 80208a8:	ea8c 0c07 	eor.w	ip, ip, r7
 80208ac:	9c01      	ldr	r4, [sp, #4]
 80208ae:	44a4      	add	ip, r4
 80208b0:	449c      	add	ip, r3
 80208b2:	4b3b      	ldr	r3, [pc, #236]	@ (80209a0 <mg_md5_transform+0x6c8>)
 80208b4:	4463      	add	r3, ip
 80208b6:	eb02 23f3 	add.w	r3, r2, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 80208ba:	ea63 0c07 	orn	ip, r3, r7
 80208be:	ea8c 0c02 	eor.w	ip, ip, r2
 80208c2:	9905      	ldr	r1, [sp, #20]
 80208c4:	448c      	add	ip, r1
 80208c6:	44ac      	add	ip, r5
 80208c8:	4d36      	ldr	r5, [pc, #216]	@ (80209a4 <mg_md5_transform+0x6cc>)
 80208ca:	4465      	add	r5, ip
 80208cc:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 80208d0:	ea65 0c02 	orn	ip, r5, r2
 80208d4:	ea8c 0c03 	eor.w	ip, ip, r3
 80208d8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80208da:	4461      	add	r1, ip
 80208dc:	440f      	add	r7, r1
 80208de:	4932      	ldr	r1, [pc, #200]	@ (80209a8 <mg_md5_transform+0x6d0>)
 80208e0:	4439      	add	r1, r7
 80208e2:	eb05 51b1 	add.w	r1, r5, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 80208e6:	ea61 0703 	orn	r7, r1, r3
 80208ea:	406f      	eors	r7, r5
 80208ec:	9c04      	ldr	r4, [sp, #16]
 80208ee:	4427      	add	r7, r4
 80208f0:	4417      	add	r7, r2
 80208f2:	4a2e      	ldr	r2, [pc, #184]	@ (80209ac <mg_md5_transform+0x6d4>)
 80208f4:	443a      	add	r2, r7
 80208f6:	eb01 4272 	add.w	r2, r1, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 80208fa:	ea62 0705 	orn	r7, r2, r5
 80208fe:	404f      	eors	r7, r1
 8020900:	443e      	add	r6, r7
 8020902:	4433      	add	r3, r6
 8020904:	4e2a      	ldr	r6, [pc, #168]	@ (80209b0 <mg_md5_transform+0x6d8>)
 8020906:	441e      	add	r6, r3
 8020908:	eb02 26f6 	add.w	r6, r2, r6, ror #11
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 802090c:	ea66 0301 	orn	r3, r6, r1
 8020910:	4053      	eors	r3, r2
 8020912:	9f02      	ldr	r7, [sp, #8]
 8020914:	443b      	add	r3, r7
 8020916:	441d      	add	r5, r3
 8020918:	4b26      	ldr	r3, [pc, #152]	@ (80209b4 <mg_md5_transform+0x6dc>)
 802091a:	442b      	add	r3, r5
 802091c:	eb06 63b3 	add.w	r3, r6, r3, ror #26
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 8020920:	ea63 0502 	orn	r5, r3, r2
 8020924:	4075      	eors	r5, r6
 8020926:	9f08      	ldr	r7, [sp, #32]
 8020928:	443d      	add	r5, r7
 802092a:	440d      	add	r5, r1
 802092c:	4922      	ldr	r1, [pc, #136]	@ (80209b8 <mg_md5_transform+0x6e0>)
 802092e:	4429      	add	r1, r5
 8020930:	eb03 51b1 	add.w	r1, r3, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 8020934:	ea61 0506 	orn	r5, r1, r6
 8020938:	405d      	eors	r5, r3
 802093a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802093c:	4425      	add	r5, r4
 802093e:	442a      	add	r2, r5
 8020940:	4d1e      	ldr	r5, [pc, #120]	@ (80209bc <mg_md5_transform+0x6e4>)
 8020942:	4415      	add	r5, r2
 8020944:	eb01 4575 	add.w	r5, r1, r5, ror #17
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 8020948:	ea65 0203 	orn	r2, r5, r3
 802094c:	404a      	eors	r2, r1
 802094e:	9c06      	ldr	r4, [sp, #24]
 8020950:	4422      	add	r2, r4
 8020952:	4432      	add	r2, r6
 8020954:	4e1a      	ldr	r6, [pc, #104]	@ (80209c0 <mg_md5_transform+0x6e8>)
 8020956:	4416      	add	r6, r2
 8020958:	eb05 26f6 	add.w	r6, r5, r6, ror #11

  buf[0] += a;
 802095c:	6802      	ldr	r2, [r0, #0]
 802095e:	4413      	add	r3, r2
 8020960:	6003      	str	r3, [r0, #0]
  buf[1] += b;
 8020962:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020964:	4434      	add	r4, r6
 8020966:	6044      	str	r4, [r0, #4]
  buf[2] += c;
 8020968:	6883      	ldr	r3, [r0, #8]
 802096a:	441d      	add	r5, r3
 802096c:	6085      	str	r5, [r0, #8]
  buf[3] += d;
 802096e:	68c3      	ldr	r3, [r0, #12]
 8020970:	4419      	add	r1, r3
 8020972:	60c1      	str	r1, [r0, #12]
}
 8020974:	b00d      	add	sp, #52	@ 0x34
 8020976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802097a:	bf00      	nop
 802097c:	a4beea44 	.word	0xa4beea44
 8020980:	f6bb4b60 	.word	0xf6bb4b60
 8020984:	eaa127fa 	.word	0xeaa127fa
 8020988:	d9d4d039 	.word	0xd9d4d039
 802098c:	c4ac5665 	.word	0xc4ac5665
 8020990:	f4292244 	.word	0xf4292244
 8020994:	fc93a039 	.word	0xfc93a039
 8020998:	655b59c3 	.word	0x655b59c3
 802099c:	8f0ccc92 	.word	0x8f0ccc92
 80209a0:	85845dd1 	.word	0x85845dd1
 80209a4:	6fa87e4f 	.word	0x6fa87e4f
 80209a8:	fe2ce6e0 	.word	0xfe2ce6e0
 80209ac:	a3014314 	.word	0xa3014314
 80209b0:	4e0811a1 	.word	0x4e0811a1
 80209b4:	f7537e82 	.word	0xf7537e82
 80209b8:	bd3af235 	.word	0xbd3af235
 80209bc:	2ad7d2bb 	.word	0x2ad7d2bb
 80209c0:	eb86d391 	.word	0xeb86d391
 80209c4:	fde5380c 	.word	0xfde5380c
 80209c8:	4bdecfa9 	.word	0x4bdecfa9
 80209cc:	bebfbc70 	.word	0xbebfbc70
 80209d0:	289b7ec6 	.word	0x289b7ec6
 80209d4:	d4ef3085 	.word	0xd4ef3085
 80209d8:	04881d05 	.word	0x04881d05
 80209dc:	e6db99e5 	.word	0xe6db99e5
 80209e0:	1fa27cf8 	.word	0x1fa27cf8
 80209e4:	432aff97 	.word	0x432aff97
 80209e8:	ab9423a7 	.word	0xab9423a7

080209ec <varint_size>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
  mg_send(c, &value, sizeof(value));
}

static uint8_t varint_size(size_t length) {
 80209ec:	4602      	mov	r2, r0
  uint8_t bytes_needed = 0;
 80209ee:	2000      	movs	r0, #0
  do {
    bytes_needed++;
 80209f0:	3001      	adds	r0, #1
 80209f2:	b2c0      	uxtb	r0, r0
    length /= 0x80;
  } while (length > 0);
 80209f4:	2a7f      	cmp	r2, #127	@ 0x7f
 80209f6:	ea4f 12d2 	mov.w	r2, r2, lsr #7
 80209fa:	d8f9      	bhi.n	80209f0 <varint_size+0x4>
  return bytes_needed;
}
 80209fc:	4770      	bx	lr

080209fe <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 80209fe:	b500      	push	{lr}
 8020a00:	4686      	mov	lr, r0
  size_t len = 0;
 8020a02:	2300      	movs	r3, #0
 8020a04:	e007      	b.n	8020a16 <encode_varint+0x18>

  do {
    uint8_t b = (uint8_t) (value % 128);
    value /= 128;
    if (value > 0) b |= 0x80;
 8020a06:	f04c 0c80 	orr.w	ip, ip, #128	@ 0x80
    buf[len++] = b;
 8020a0a:	1c58      	adds	r0, r3, #1
 8020a0c:	f80e c003 	strb.w	ip, [lr, r3]
  } while (value > 0);
 8020a10:	2a7f      	cmp	r2, #127	@ 0x7f
 8020a12:	d907      	bls.n	8020a24 <encode_varint+0x26>
    buf[len++] = b;
 8020a14:	4603      	mov	r3, r0
    uint8_t b = (uint8_t) (value % 128);
 8020a16:	f001 0c7f 	and.w	ip, r1, #127	@ 0x7f
    value /= 128;
 8020a1a:	460a      	mov	r2, r1
 8020a1c:	09c9      	lsrs	r1, r1, #7
    if (value > 0) b |= 0x80;
 8020a1e:	2a7f      	cmp	r2, #127	@ 0x7f
 8020a20:	d9f3      	bls.n	8020a0a <encode_varint+0xc>
 8020a22:	e7f0      	b.n	8020a06 <encode_varint+0x8>

  return len;
}
 8020a24:	f85d fb04 	ldr.w	pc, [sp], #4

08020a28 <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
  size_t multiplier = 1, offset;
  *value = 0;
 8020a28:	2300      	movs	r3, #0
 8020a2a:	6013      	str	r3, [r2, #0]
  size_t multiplier = 1, offset;
 8020a2c:	f04f 0c01 	mov.w	ip, #1

  for (offset = 0; offset < 4 && offset < len; offset++) {
 8020a30:	2b03      	cmp	r3, #3
 8020a32:	d81d      	bhi.n	8020a70 <decode_varint+0x48>
 8020a34:	428b      	cmp	r3, r1
 8020a36:	d219      	bcs.n	8020a6c <decode_varint+0x44>
static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 8020a38:	b530      	push	{r4, r5, lr}
 8020a3a:	e003      	b.n	8020a44 <decode_varint+0x1c>
    uint8_t encoded_byte = buf[offset];
    *value += (encoded_byte & 0x7f) * multiplier;
    multiplier *= 128;

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 8020a3c:	1c58      	adds	r0, r3, #1
 8020a3e:	e012      	b.n	8020a66 <decode_varint+0x3e>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 8020a40:	428b      	cmp	r3, r1
 8020a42:	d211      	bcs.n	8020a68 <decode_varint+0x40>
    uint8_t encoded_byte = buf[offset];
 8020a44:	f810 e003 	ldrb.w	lr, [r0, r3]
    *value += (encoded_byte & 0x7f) * multiplier;
 8020a48:	f00e 047f 	and.w	r4, lr, #127	@ 0x7f
 8020a4c:	6815      	ldr	r5, [r2, #0]
 8020a4e:	fb0c 5404 	mla	r4, ip, r4, r5
 8020a52:	6014      	str	r4, [r2, #0]
    multiplier *= 128;
 8020a54:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
    if ((encoded_byte & 0x80) == 0) return offset + 1;
 8020a58:	f01e 0f80 	tst.w	lr, #128	@ 0x80
 8020a5c:	d0ee      	beq.n	8020a3c <decode_varint+0x14>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 8020a5e:	3301      	adds	r3, #1
 8020a60:	2b03      	cmp	r3, #3
 8020a62:	d9ed      	bls.n	8020a40 <decode_varint+0x18>
  }

  return 0;
 8020a64:	2000      	movs	r0, #0
}
 8020a66:	bd30      	pop	{r4, r5, pc}
  return 0;
 8020a68:	2000      	movs	r0, #0
 8020a6a:	e7fc      	b.n	8020a66 <decode_varint+0x3e>
 8020a6c:	2000      	movs	r0, #0
 8020a6e:	4770      	bx	lr
 8020a70:	2000      	movs	r0, #0
}
 8020a72:	4770      	bx	lr

08020a74 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
  for (i = 0; i < num_properties; ++i) {
 8020a74:	2300      	movs	r3, #0
 8020a76:	2b1a      	cmp	r3, #26
 8020a78:	d80b      	bhi.n	8020a92 <mqtt_prop_type_by_id+0x1e>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 8020a7a:	4a07      	ldr	r2, [pc, #28]	@ (8020a98 <mqtt_prop_type_by_id+0x24>)
 8020a7c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8020a80:	4282      	cmp	r2, r0
 8020a82:	d001      	beq.n	8020a88 <mqtt_prop_type_by_id+0x14>
  for (i = 0; i < num_properties; ++i) {
 8020a84:	3301      	adds	r3, #1
 8020a86:	e7f6      	b.n	8020a76 <mqtt_prop_type_by_id+0x2>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 8020a88:	4a03      	ldr	r2, [pc, #12]	@ (8020a98 <mqtt_prop_type_by_id+0x24>)
 8020a8a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020a8e:	7858      	ldrb	r0, [r3, #1]
 8020a90:	4770      	bx	lr
  }
  return -1;  // Property ID not found
 8020a92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8020a96:	4770      	bx	lr
 8020a98:	0803aae0 	.word	0x0803aae0

08020a9c <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 8020a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020aa0:	4606      	mov	r6, r0
 8020aa2:	4688      	mov	r8, r1
  size_t i, size = 0;
 8020aa4:	2500      	movs	r5, #0
  for (i = 0; i < count; i++) {
 8020aa6:	462c      	mov	r4, r5
 8020aa8:	e005      	b.n	8020ab6 <get_properties_length+0x1a>
    size++;  // identifier
    switch (mqtt_prop_type_by_id(props[i].id)) {
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 8020aaa:	697d      	ldr	r5, [r7, #20]
 8020aac:	68fb      	ldr	r3, [r7, #12]
 8020aae:	441d      	add	r5, r3
 8020ab0:	444d      	add	r5, r9
 8020ab2:	3504      	adds	r5, #4
  for (i = 0; i < count; i++) {
 8020ab4:	3401      	adds	r4, #1
 8020ab6:	4544      	cmp	r4, r8
 8020ab8:	d231      	bcs.n	8020b1e <get_properties_length+0x82>
    size++;  // identifier
 8020aba:	f105 0901 	add.w	r9, r5, #1
    switch (mqtt_prop_type_by_id(props[i].id)) {
 8020abe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8020ac2:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
 8020ac6:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
 8020aca:	f7ff ffd3 	bl	8020a74 <mqtt_prop_type_by_id>
 8020ace:	2806      	cmp	r0, #6
 8020ad0:	d824      	bhi.n	8020b1c <get_properties_length+0x80>
 8020ad2:	a301      	add	r3, pc, #4	@ (adr r3, 8020ad8 <get_properties_length+0x3c>)
 8020ad4:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8020ad8:	08020b19 	.word	0x08020b19
 8020adc:	08020af5 	.word	0x08020af5
 8020ae0:	08020aab 	.word	0x08020aab
 8020ae4:	08020afd 	.word	0x08020afd
 8020ae8:	08020b05 	.word	0x08020b05
 8020aec:	08020b11 	.word	0x08020b11
 8020af0:	08020b15 	.word	0x08020b15
                            2 * sizeof(uint16_t));
        break;
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8020af4:	697d      	ldr	r5, [r7, #20]
 8020af6:	444d      	add	r5, r9
 8020af8:	3502      	adds	r5, #2
        break;
 8020afa:	e7db      	b.n	8020ab4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8020afc:	697d      	ldr	r5, [r7, #20]
 8020afe:	444d      	add	r5, r9
 8020b00:	3502      	adds	r5, #2
        break;
 8020b02:	e7d7      	b.n	8020ab4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 8020b04:	6878      	ldr	r0, [r7, #4]
 8020b06:	f7ff ff71 	bl	80209ec <varint_size>
 8020b0a:	eb00 0509 	add.w	r5, r0, r9
        break;
 8020b0e:	e7d1      	b.n	8020ab4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 8020b10:	3505      	adds	r5, #5
        break;
 8020b12:	e7cf      	b.n	8020ab4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 8020b14:	3503      	adds	r5, #3
        break;
 8020b16:	e7cd      	b.n	8020ab4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 8020b18:	3502      	adds	r5, #2
        break;
 8020b1a:	e7cb      	b.n	8020ab4 <get_properties_length+0x18>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 8020b1c:	464d      	mov	r5, r9
        return size;  // cannot parse further down
    }
  }

  return size;
}
 8020b1e:	4628      	mov	r0, r5
 8020b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08020b24 <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 8020b24:	b510      	push	{r4, lr}
  size_t size = get_properties_length(props, count);
 8020b26:	f7ff ffb9 	bl	8020a9c <get_properties_length>
 8020b2a:	4604      	mov	r4, r0
  size += varint_size(size);
 8020b2c:	f7ff ff5e 	bl	80209ec <varint_size>
  return size;
}
 8020b30:	4420      	add	r0, r4
 8020b32:	bd10      	pop	{r4, pc}

08020b34 <mg_aton4>:
  memset(addr->ip, 0, sizeof(addr->ip));
  addr->is_ip6 = false;
  return true;
}

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 8020b34:	b410      	push	{r4}
 8020b36:	b085      	sub	sp, #20
 8020b38:	466b      	mov	r3, sp
 8020b3a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t data[4] = {0, 0, 0, 0};
 8020b3e:	2300      	movs	r3, #0
 8020b40:	9303      	str	r3, [sp, #12]
  size_t i, num_dots = 0;
 8020b42:	469c      	mov	ip, r3
  for (i = 0; i < str.len; i++) {
 8020b44:	9901      	ldr	r1, [sp, #4]
 8020b46:	4299      	cmp	r1, r3
 8020b48:	d92c      	bls.n	8020ba4 <mg_aton4+0x70>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 8020b4a:	9c00      	ldr	r4, [sp, #0]
 8020b4c:	5ce1      	ldrb	r1, [r4, r3]
 8020b4e:	f1a1 0030 	sub.w	r0, r1, #48	@ 0x30
 8020b52:	b2c0      	uxtb	r0, r0
 8020b54:	2809      	cmp	r0, #9
 8020b56:	d812      	bhi.n	8020b7e <mg_aton4+0x4a>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 8020b58:	f10c 0010 	add.w	r0, ip, #16
 8020b5c:	4468      	add	r0, sp
 8020b5e:	f810 0c04 	ldrb.w	r0, [r0, #-4]
 8020b62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8020b66:	3930      	subs	r1, #48	@ 0x30
 8020b68:	eb01 0140 	add.w	r1, r1, r0, lsl #1
      if (octet > 255) return false;
 8020b6c:	29ff      	cmp	r1, #255	@ 0xff
 8020b6e:	dc28      	bgt.n	8020bc2 <mg_aton4+0x8e>
      data[num_dots] = (uint8_t) octet;
 8020b70:	f10c 0010 	add.w	r0, ip, #16
 8020b74:	4468      	add	r0, sp
 8020b76:	f800 1c04 	strb.w	r1, [r0, #-4]
  for (i = 0; i < str.len; i++) {
 8020b7a:	3301      	adds	r3, #1
 8020b7c:	e7e2      	b.n	8020b44 <mg_aton4+0x10>
    } else if (str.buf[i] == '.') {
 8020b7e:	292e      	cmp	r1, #46	@ 0x2e
 8020b80:	d121      	bne.n	8020bc6 <mg_aton4+0x92>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8020b82:	f1bc 0f02 	cmp.w	ip, #2
 8020b86:	d820      	bhi.n	8020bca <mg_aton4+0x96>
 8020b88:	b923      	cbnz	r3, 8020b94 <mg_aton4+0x60>
 8020b8a:	2000      	movs	r0, #0
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
  memcpy(&addr->ip, data, sizeof(data));
  addr->is_ip6 = false;
  return true;
}
 8020b8c:	b005      	add	sp, #20
 8020b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020b92:	4770      	bx	lr
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8020b94:	441c      	add	r4, r3
 8020b96:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8020b9a:	292e      	cmp	r1, #46	@ 0x2e
 8020b9c:	d017      	beq.n	8020bce <mg_aton4+0x9a>
      num_dots++;
 8020b9e:	f10c 0c01 	add.w	ip, ip, #1
 8020ba2:	e7ea      	b.n	8020b7a <mg_aton4+0x46>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 8020ba4:	f1bc 0f03 	cmp.w	ip, #3
 8020ba8:	d113      	bne.n	8020bd2 <mg_aton4+0x9e>
 8020baa:	9900      	ldr	r1, [sp, #0]
 8020bac:	4419      	add	r1, r3
 8020bae:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 8020bb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8020bb4:	d00f      	beq.n	8020bd6 <mg_aton4+0xa2>
  memcpy(&addr->ip, data, sizeof(data));
 8020bb6:	9b03      	ldr	r3, [sp, #12]
 8020bb8:	6013      	str	r3, [r2, #0]
  addr->is_ip6 = false;
 8020bba:	2300      	movs	r3, #0
 8020bbc:	74d3      	strb	r3, [r2, #19]
  return true;
 8020bbe:	2001      	movs	r0, #1
 8020bc0:	e7e4      	b.n	8020b8c <mg_aton4+0x58>
      if (octet > 255) return false;
 8020bc2:	2000      	movs	r0, #0
 8020bc4:	e7e2      	b.n	8020b8c <mg_aton4+0x58>
      return false;
 8020bc6:	2000      	movs	r0, #0
 8020bc8:	e7e0      	b.n	8020b8c <mg_aton4+0x58>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8020bca:	2000      	movs	r0, #0
 8020bcc:	e7de      	b.n	8020b8c <mg_aton4+0x58>
 8020bce:	2000      	movs	r0, #0
 8020bd0:	e7dc      	b.n	8020b8c <mg_aton4+0x58>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 8020bd2:	2000      	movs	r0, #0
 8020bd4:	e7da      	b.n	8020b8c <mg_aton4+0x58>
 8020bd6:	2000      	movs	r0, #0
 8020bd8:	e7d8      	b.n	8020b8c <mg_aton4+0x58>

08020bda <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 8020bda:	b508      	push	{r3, lr}
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 8020bdc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8020bde:	b103      	cbz	r3, 8020be2 <mg_tcpip_call+0x8>
 8020be0:	4798      	blx	r3
}
 8020be2:	bd08      	pop	{r3, pc}

08020be4 <csumup>:
}

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 8020be4:	2300      	movs	r3, #0
 8020be6:	e005      	b.n	8020bf4 <csumup+0x10>
 8020be8:	f811 c003 	ldrb.w	ip, [r1, r3]
 8020bec:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8020bf0:	4460      	add	r0, ip
 8020bf2:	3301      	adds	r3, #1
 8020bf4:	4293      	cmp	r3, r2
 8020bf6:	d205      	bcs.n	8020c04 <csumup+0x20>
 8020bf8:	f013 0f01 	tst.w	r3, #1
 8020bfc:	d0f4      	beq.n	8020be8 <csumup+0x4>
 8020bfe:	f811 c003 	ldrb.w	ip, [r1, r3]
 8020c02:	e7f5      	b.n	8020bf0 <csumup+0xc>
  return sum;
}
 8020c04:	4770      	bx	lr

08020c06 <ether_output>:
  s->timer = ifp->now + n;
  s->ttype = type;
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
}

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 8020c06:	b538      	push	{r3, r4, r5, lr}
 8020c08:	4604      	mov	r4, r0
 8020c0a:	460d      	mov	r5, r1
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 8020c0c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8020c0e:	685b      	ldr	r3, [r3, #4]
 8020c10:	4602      	mov	r2, r0
 8020c12:	6940      	ldr	r0, [r0, #20]
 8020c14:	4798      	blx	r3
  if (n == len) ifp->nsent++;
 8020c16:	4285      	cmp	r5, r0
 8020c18:	d000      	beq.n	8020c1c <ether_output+0x16>
  return n;
}
 8020c1a:	bd38      	pop	{r3, r4, r5, pc}
  if (n == len) ifp->nsent++;
 8020c1c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8020c1e:	3301      	adds	r3, #1
 8020c20:	6763      	str	r3, [r4, #116]	@ 0x74
  return n;
 8020c22:	e7fa      	b.n	8020c1a <ether_output+0x14>

08020c24 <can_write>:
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
  mg_close_conn(c);
}

static bool can_write(struct mg_connection *c) {
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8020c24:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8020c28:	f013 0f28 	tst.w	r3, #40	@ 0x28
 8020c2c:	d106      	bne.n	8020c3c <can_write+0x18>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8020c2e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8020c30:	b132      	cbz	r2, 8020c40 <can_write+0x1c>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8020c32:	f013 0f90 	tst.w	r3, #144	@ 0x90
 8020c36:	d005      	beq.n	8020c44 <can_write+0x20>
 8020c38:	2000      	movs	r0, #0
 8020c3a:	4770      	bx	lr
 8020c3c:	2000      	movs	r0, #0
 8020c3e:	4770      	bx	lr
 8020c40:	2000      	movs	r0, #0
 8020c42:	4770      	bx	lr
 8020c44:	2001      	movs	r0, #1
}
 8020c46:	4770      	bx	lr

08020c48 <mg_esc>:
  uint8_t *p = va_arg(*ap, uint8_t *);
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
                    p[3], p[4], p[5]);
}

static char mg_esc(int c, bool esc) {
 8020c48:	b410      	push	{r4}
 8020c4a:	4602      	mov	r2, r0
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8020c4c:	460c      	mov	r4, r1
 8020c4e:	b109      	cbz	r1, 8020c54 <mg_esc+0xc>
 8020c50:	4b0b      	ldr	r3, [pc, #44]	@ (8020c80 <mg_esc+0x38>)
 8020c52:	e007      	b.n	8020c64 <mg_esc+0x1c>
 8020c54:	4b0b      	ldr	r3, [pc, #44]	@ (8020c84 <mg_esc+0x3c>)
 8020c56:	e005      	b.n	8020c64 <mg_esc+0x1c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8020c58:	4a0a      	ldr	r2, [pc, #40]	@ (8020c84 <mg_esc+0x3c>)
 8020c5a:	1a9b      	subs	r3, r3, r2
 8020c5c:	4a08      	ldr	r2, [pc, #32]	@ (8020c80 <mg_esc+0x38>)
 8020c5e:	5cd0      	ldrb	r0, [r2, r3]
 8020c60:	e00a      	b.n	8020c78 <mg_esc+0x30>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8020c62:	3301      	adds	r3, #1
 8020c64:	7818      	ldrb	r0, [r3, #0]
 8020c66:	b138      	cbz	r0, 8020c78 <mg_esc+0x30>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8020c68:	4290      	cmp	r0, r2
 8020c6a:	d1fa      	bne.n	8020c62 <mg_esc+0x1a>
 8020c6c:	2c00      	cmp	r4, #0
 8020c6e:	d0f3      	beq.n	8020c58 <mg_esc+0x10>
 8020c70:	4a03      	ldr	r2, [pc, #12]	@ (8020c80 <mg_esc+0x38>)
 8020c72:	1a9b      	subs	r3, r3, r2
 8020c74:	4a03      	ldr	r2, [pc, #12]	@ (8020c84 <mg_esc+0x3c>)
 8020c76:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 8020c78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020c7c:	4770      	bx	lr
 8020c7e:	bf00      	nop
 8020c80:	0803973c 	.word	0x0803973c
 8020c84:	08039744 	.word	0x08039744

08020c88 <mg_escape>:

static char mg_escape(int c) {
 8020c88:	b508      	push	{r3, lr}
  return mg_esc(c, true);
 8020c8a:	2101      	movs	r1, #1
 8020c8c:	f7ff ffdc 	bl	8020c48 <mg_esc>
}
 8020c90:	bd08      	pop	{r3, pc}

08020c92 <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8020c92:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c96:	4607      	mov	r7, r0
 8020c98:	460e      	mov	r6, r1
 8020c9a:	4692      	mov	sl, r2
 8020c9c:	4699      	mov	r9, r3
  size_t i = 0, extra = 0;
 8020c9e:	f04f 0b00 	mov.w	fp, #0
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8020ca2:	465c      	mov	r4, fp
 8020ca4:	e003      	b.n	8020cae <qcpy+0x1c>
    char c = mg_escape(buf[i]);
    if (c) {
      out('\\', ptr), out(c, ptr), extra++;
    } else {
      out(buf[i], ptr);
 8020ca6:	4631      	mov	r1, r6
 8020ca8:	4628      	mov	r0, r5
 8020caa:	47b8      	blx	r7
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8020cac:	3401      	adds	r4, #1
 8020cae:	454c      	cmp	r4, r9
 8020cb0:	d211      	bcs.n	8020cd6 <qcpy+0x44>
 8020cb2:	f81a 5004 	ldrb.w	r5, [sl, r4]
 8020cb6:	b175      	cbz	r5, 8020cd6 <qcpy+0x44>
    char c = mg_escape(buf[i]);
 8020cb8:	4628      	mov	r0, r5
 8020cba:	f7ff ffe5 	bl	8020c88 <mg_escape>
    if (c) {
 8020cbe:	4680      	mov	r8, r0
 8020cc0:	2800      	cmp	r0, #0
 8020cc2:	d0f0      	beq.n	8020ca6 <qcpy+0x14>
      out('\\', ptr), out(c, ptr), extra++;
 8020cc4:	4631      	mov	r1, r6
 8020cc6:	205c      	movs	r0, #92	@ 0x5c
 8020cc8:	47b8      	blx	r7
 8020cca:	4631      	mov	r1, r6
 8020ccc:	4640      	mov	r0, r8
 8020cce:	47b8      	blx	r7
 8020cd0:	f10b 0b01 	add.w	fp, fp, #1
 8020cd4:	e7ea      	b.n	8020cac <qcpy+0x1a>
    }
  }
  return i + extra;
}
 8020cd6:	eb04 000b 	add.w	r0, r4, fp
 8020cda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020ce0 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 8020ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020ce4:	4607      	mov	r7, r0
 8020ce6:	460e      	mov	r6, r1
  size_t bl = (size_t) va_arg(*ap, int);
 8020ce8:	6811      	ldr	r1, [r2, #0]
 8020cea:	1d0b      	adds	r3, r1, #4
 8020cec:	6013      	str	r3, [r2, #0]
 8020cee:	f8d1 9000 	ldr.w	r9, [r1]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8020cf2:	f101 0308 	add.w	r3, r1, #8
 8020cf6:	6013      	str	r3, [r2, #0]
 8020cf8:	f8d1 8004 	ldr.w	r8, [r1, #4]
  const char *hex = "0123456789abcdef";
  size_t j;
  for (j = 0; j < bl; j++) {
 8020cfc:	2400      	movs	r4, #0
 8020cfe:	e00e      	b.n	8020d1e <mg_print_hex+0x3e>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 8020d00:	f818 3004 	ldrb.w	r3, [r8, r4]
 8020d04:	091b      	lsrs	r3, r3, #4
 8020d06:	4d09      	ldr	r5, [pc, #36]	@ (8020d2c <mg_print_hex+0x4c>)
 8020d08:	4631      	mov	r1, r6
 8020d0a:	5ce8      	ldrb	r0, [r5, r3]
 8020d0c:	47b8      	blx	r7
    out(hex[p[j] & 0x0F], arg);
 8020d0e:	f818 3004 	ldrb.w	r3, [r8, r4]
 8020d12:	f003 030f 	and.w	r3, r3, #15
 8020d16:	4631      	mov	r1, r6
 8020d18:	5ce8      	ldrb	r0, [r5, r3]
 8020d1a:	47b8      	blx	r7
  for (j = 0; j < bl; j++) {
 8020d1c:	3401      	adds	r4, #1
 8020d1e:	454c      	cmp	r4, r9
 8020d20:	d3ee      	bcc.n	8020d00 <mg_print_hex+0x20>
  }
  return 2 * bl;
}
 8020d22:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8020d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020d2a:	bf00      	nop
 8020d2c:	08039290 	.word	0x08039290

08020d30 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 8020d30:	4684      	mov	ip, r0
  if (MG_BIG_ENDIAN) {
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8020d32:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 8020d36:	ea4f 2332 	mov.w	r3, r2, ror #8
 8020d3a:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 8020d3e:	ea4f 6232 	mov.w	r2, r2, ror #24
 8020d42:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8020d46:	ea43 0002 	orr.w	r0, r3, r2
 8020d4a:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
  }
  return block->l[i];
}
 8020d4e:	4770      	bx	lr

08020d50 <mg_tolc>:
  struct mg_str str = {(char *) s, n};
  return str;
}

static int mg_tolc(char c) {
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 8020d50:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8020d54:	b2db      	uxtb	r3, r3
 8020d56:	2b19      	cmp	r3, #25
 8020d58:	d800      	bhi.n	8020d5c <mg_tolc+0xc>
 8020d5a:	3020      	adds	r0, #32
}
 8020d5c:	4770      	bx	lr

08020d5e <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 8020d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d62:	b082      	sub	sp, #8
 8020d64:	4605      	mov	r5, r0
 8020d66:	9e08      	ldr	r6, [sp, #32]
 8020d68:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  size_t i;
  uint8_t *p = (uint8_t *) buf;
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8020d6a:	0a10      	lsrs	r0, r2, #8
 8020d6c:	f88d 0004 	strb.w	r0, [sp, #4]
 8020d70:	f88d 2005 	strb.w	r2, [sp, #5]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 8020d74:	00c9      	lsls	r1, r1, #3
 8020d76:	b249      	sxtb	r1, r1
 8020d78:	4698      	mov	r8, r3
 8020d7a:	b143      	cbz	r3, 8020d8e <w5500_txn+0x30>
 8020d7c:	2304      	movs	r3, #4
 8020d7e:	4319      	orrs	r1, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8020d80:	f88d 1006 	strb.w	r1, [sp, #6]
  s->begin(s->spi);
 8020d84:	686b      	ldr	r3, [r5, #4]
 8020d86:	6828      	ldr	r0, [r5, #0]
 8020d88:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 8020d8a:	2400      	movs	r4, #0
 8020d8c:	e00a      	b.n	8020da4 <w5500_txn+0x46>
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 8020d8e:	2300      	movs	r3, #0
 8020d90:	e7f5      	b.n	8020d7e <w5500_txn+0x20>
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 8020d92:	68eb      	ldr	r3, [r5, #12]
 8020d94:	f104 0208 	add.w	r2, r4, #8
 8020d98:	446a      	add	r2, sp
 8020d9a:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8020d9e:	6828      	ldr	r0, [r5, #0]
 8020da0:	4798      	blx	r3
 8020da2:	3401      	adds	r4, #1
 8020da4:	2c02      	cmp	r4, #2
 8020da6:	d9f4      	bls.n	8020d92 <w5500_txn+0x34>
  for (i = 0; i < len; i++) {
 8020da8:	2400      	movs	r4, #0
 8020daa:	e000      	b.n	8020dae <w5500_txn+0x50>
 8020dac:	3401      	adds	r4, #1
 8020dae:	42bc      	cmp	r4, r7
 8020db0:	d208      	bcs.n	8020dc4 <w5500_txn+0x66>
    uint8_t r = s->txn(s->spi, p[i]);
 8020db2:	68eb      	ldr	r3, [r5, #12]
 8020db4:	5d31      	ldrb	r1, [r6, r4]
 8020db6:	6828      	ldr	r0, [r5, #0]
 8020db8:	4798      	blx	r3
    if (!wr) p[i] = r;
 8020dba:	f1b8 0f00 	cmp.w	r8, #0
 8020dbe:	d1f5      	bne.n	8020dac <w5500_txn+0x4e>
 8020dc0:	5530      	strb	r0, [r6, r4]
 8020dc2:	e7f3      	b.n	8020dac <w5500_txn+0x4e>
  }
  s->end(s->spi);
 8020dc4:	68ab      	ldr	r3, [r5, #8]
 8020dc6:	6828      	ldr	r0, [r5, #0]
 8020dc8:	4798      	blx	r3
}
 8020dca:	b002      	add	sp, #8
 8020dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020dd0 <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 8020dd0:	b510      	push	{r4, lr}
 8020dd2:	b082      	sub	sp, #8
 8020dd4:	9c04      	ldr	r4, [sp, #16]
 8020dd6:	9401      	str	r4, [sp, #4]
 8020dd8:	9300      	str	r3, [sp, #0]
 8020dda:	2301      	movs	r3, #1
 8020ddc:	f7ff ffbf 	bl	8020d5e <w5500_txn>
 8020de0:	b002      	add	sp, #8
 8020de2:	bd10      	pop	{r4, pc}

08020de4 <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 8020de4:	b500      	push	{lr}
 8020de6:	b085      	sub	sp, #20
 8020de8:	f88d 300f 	strb.w	r3, [sp, #15]
 8020dec:	2301      	movs	r3, #1
 8020dee:	9300      	str	r3, [sp, #0]
 8020df0:	f10d 030f 	add.w	r3, sp, #15
 8020df4:	f7ff ffec 	bl	8020dd0 <w5500_wn>
 8020df8:	b005      	add	sp, #20
 8020dfa:	f85d fb04 	ldr.w	pc, [sp], #4

08020dfe <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 8020dfe:	b500      	push	{lr}
 8020e00:	b085      	sub	sp, #20
 8020e02:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8020e06:	f88d c00c 	strb.w	ip, [sp, #12]
 8020e0a:	f88d 300d 	strb.w	r3, [sp, #13]
 8020e0e:	2302      	movs	r3, #2
 8020e10:	9300      	str	r3, [sp, #0]
 8020e12:	ab03      	add	r3, sp, #12
 8020e14:	f7ff ffdc 	bl	8020dd0 <w5500_wn>
 8020e18:	b005      	add	sp, #20
 8020e1a:	f85d fb04 	ldr.w	pc, [sp], #4

08020e1e <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 8020e1e:	b510      	push	{r4, lr}
 8020e20:	b082      	sub	sp, #8
 8020e22:	9c04      	ldr	r4, [sp, #16]
 8020e24:	9401      	str	r4, [sp, #4]
 8020e26:	9300      	str	r3, [sp, #0]
 8020e28:	2300      	movs	r3, #0
 8020e2a:	f7ff ff98 	bl	8020d5e <w5500_txn>
 8020e2e:	b002      	add	sp, #8
 8020e30:	bd10      	pop	{r4, pc}

08020e32 <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 8020e32:	b500      	push	{lr}
 8020e34:	b085      	sub	sp, #20
 8020e36:	2300      	movs	r3, #0
 8020e38:	f88d 300f 	strb.w	r3, [sp, #15]
 8020e3c:	2301      	movs	r3, #1
 8020e3e:	9300      	str	r3, [sp, #0]
 8020e40:	f10d 030f 	add.w	r3, sp, #15
 8020e44:	f7ff ffeb 	bl	8020e1e <w5500_rn>
 8020e48:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8020e4c:	b005      	add	sp, #20
 8020e4e:	f85d fb04 	ldr.w	pc, [sp], #4

08020e52 <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 8020e52:	b500      	push	{lr}
 8020e54:	b085      	sub	sp, #20
 8020e56:	2300      	movs	r3, #0
 8020e58:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020e5c:	2302      	movs	r3, #2
 8020e5e:	9300      	str	r3, [sp, #0]
 8020e60:	ab03      	add	r3, sp, #12
 8020e62:	f7ff ffdc 	bl	8020e1e <w5500_rn>
 8020e66:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8020e6a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8020e6e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8020e72:	b005      	add	sp, #20
 8020e74:	f85d fb04 	ldr.w	pc, [sp], #4

08020e78 <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 8020e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020e7c:	b083      	sub	sp, #12
 8020e7e:	4606      	mov	r6, r0
 8020e80:	4688      	mov	r8, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8020e82:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8020e84:	2000      	movs	r0, #0
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 8020e86:	4604      	mov	r4, r0
 8020e88:	2226      	movs	r2, #38	@ 0x26
 8020e8a:	2101      	movs	r1, #1
 8020e8c:	4628      	mov	r0, r5
 8020e8e:	f7ff ffe0 	bl	8020e52 <w5500_r2>
 8020e92:	4284      	cmp	r4, r0
 8020e94:	d3f7      	bcc.n	8020e86 <w5500_rx+0xe>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 8020e96:	b91c      	cbnz	r4, 8020ea0 <w5500_rx+0x28>
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
}
 8020e98:	4620      	mov	r0, r4
 8020e9a:	b003      	add	sp, #12
 8020e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 8020ea0:	2228      	movs	r2, #40	@ 0x28
 8020ea2:	2101      	movs	r1, #1
 8020ea4:	4628      	mov	r0, r5
 8020ea6:	f7ff ffd4 	bl	8020e52 <w5500_r2>
 8020eaa:	4607      	mov	r7, r0
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 8020eac:	4602      	mov	r2, r0
 8020eae:	2103      	movs	r1, #3
 8020eb0:	4628      	mov	r0, r5
 8020eb2:	f7ff ffce 	bl	8020e52 <w5500_r2>
 8020eb6:	4681      	mov	r9, r0
    if (n <= len + 2 && n > 1) {
 8020eb8:	fa1f f188 	uxth.w	r1, r8
 8020ebc:	3102      	adds	r1, #2
 8020ebe:	4288      	cmp	r0, r1
 8020ec0:	dc0e      	bgt.n	8020ee0 <w5500_rx+0x68>
 8020ec2:	2801      	cmp	r0, #1
 8020ec4:	d801      	bhi.n	8020eca <w5500_rx+0x52>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8020ec6:	2400      	movs	r4, #0
 8020ec8:	e00b      	b.n	8020ee2 <w5500_rx+0x6a>
      r = (uint16_t) (n - 2);
 8020eca:	1e84      	subs	r4, r0, #2
 8020ecc:	b2a4      	uxth	r4, r4
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 8020ece:	1cba      	adds	r2, r7, #2
 8020ed0:	9400      	str	r4, [sp, #0]
 8020ed2:	4633      	mov	r3, r6
 8020ed4:	b292      	uxth	r2, r2
 8020ed6:	2103      	movs	r1, #3
 8020ed8:	4628      	mov	r0, r5
 8020eda:	f7ff ffa0 	bl	8020e1e <w5500_rn>
 8020ede:	e000      	b.n	8020ee2 <w5500_rx+0x6a>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8020ee0:	2400      	movs	r4, #0
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 8020ee2:	eb07 0309 	add.w	r3, r7, r9
 8020ee6:	b29b      	uxth	r3, r3
 8020ee8:	2228      	movs	r2, #40	@ 0x28
 8020eea:	2101      	movs	r1, #1
 8020eec:	4628      	mov	r0, r5
 8020eee:	f7ff ff86 	bl	8020dfe <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 8020ef2:	2340      	movs	r3, #64	@ 0x40
 8020ef4:	2201      	movs	r2, #1
 8020ef6:	4611      	mov	r1, r2
 8020ef8:	4628      	mov	r0, r5
 8020efa:	f7ff ff73 	bl	8020de4 <w5500_w1>
 8020efe:	e7cb      	b.n	8020e98 <w5500_rx+0x20>

08020f00 <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 8020f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020f04:	b082      	sub	sp, #8
 8020f06:	4680      	mov	r8, r0
 8020f08:	460d      	mov	r5, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8020f0a:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 8020f0c:	b28f      	uxth	r7, r1
 8020f0e:	2000      	movs	r0, #0
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 8020f10:	e004      	b.n	8020f1c <w5500_tx+0x1c>
 8020f12:	2220      	movs	r2, #32
 8020f14:	2101      	movs	r1, #1
 8020f16:	4630      	mov	r0, r6
 8020f18:	f7ff ff9b 	bl	8020e52 <w5500_r2>
 8020f1c:	42b8      	cmp	r0, r7
 8020f1e:	d3f8      	bcc.n	8020f12 <w5500_tx+0x12>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 8020f20:	2224      	movs	r2, #36	@ 0x24
 8020f22:	2101      	movs	r1, #1
 8020f24:	4630      	mov	r0, r6
 8020f26:	f7ff ff94 	bl	8020e52 <w5500_r2>
 8020f2a:	4604      	mov	r4, r0
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 8020f2c:	b2ad      	uxth	r5, r5
 8020f2e:	9500      	str	r5, [sp, #0]
 8020f30:	4643      	mov	r3, r8
 8020f32:	4602      	mov	r2, r0
 8020f34:	2102      	movs	r1, #2
 8020f36:	4630      	mov	r0, r6
 8020f38:	f7ff ff4a 	bl	8020dd0 <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 8020f3c:	193b      	adds	r3, r7, r4
 8020f3e:	b29b      	uxth	r3, r3
 8020f40:	2224      	movs	r2, #36	@ 0x24
 8020f42:	2101      	movs	r1, #1
 8020f44:	4630      	mov	r0, r6
 8020f46:	f7ff ff5a 	bl	8020dfe <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 8020f4a:	2320      	movs	r3, #32
 8020f4c:	2201      	movs	r2, #1
 8020f4e:	4611      	mov	r1, r2
 8020f50:	4630      	mov	r0, r6
 8020f52:	f7ff ff47 	bl	8020de4 <w5500_w1>
  for (i = 0; i < 40; i++) {
 8020f56:	2400      	movs	r4, #0
 8020f58:	e004      	b.n	8020f64 <w5500_tx+0x64>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
    if (ir == 0) continue;
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
    if (ir & 8) len = 0;           // Timeout. Report error
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 8020f5a:	f015 0f18 	tst.w	r5, #24
 8020f5e:	d116      	bne.n	8020f8e <w5500_tx+0x8e>
  for (i = 0; i < 40; i++) {
 8020f60:	3401      	adds	r4, #1
 8020f62:	b2a4      	uxth	r4, r4
 8020f64:	2c27      	cmp	r4, #39	@ 0x27
 8020f66:	d812      	bhi.n	8020f8e <w5500_tx+0x8e>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 8020f68:	2202      	movs	r2, #2
 8020f6a:	2101      	movs	r1, #1
 8020f6c:	4630      	mov	r0, r6
 8020f6e:	f7ff ff60 	bl	8020e32 <w5500_r1>
    if (ir == 0) continue;
 8020f72:	4605      	mov	r5, r0
 8020f74:	2800      	cmp	r0, #0
 8020f76:	d0f3      	beq.n	8020f60 <w5500_tx+0x60>
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 8020f78:	4603      	mov	r3, r0
 8020f7a:	2202      	movs	r2, #2
 8020f7c:	2101      	movs	r1, #1
 8020f7e:	4630      	mov	r0, r6
 8020f80:	f7ff ff30 	bl	8020de4 <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 8020f84:	f015 0f08 	tst.w	r5, #8
 8020f88:	d0e7      	beq.n	8020f5a <w5500_tx+0x5a>
 8020f8a:	2700      	movs	r7, #0
 8020f8c:	e7e5      	b.n	8020f5a <w5500_tx+0x5a>
  }
  return len;
}
 8020f8e:	4638      	mov	r0, r7
 8020f90:	b002      	add	sp, #8
 8020f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020f96 <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 8020f96:	b510      	push	{r4, lr}
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8020f98:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  s->end(s->spi);
 8020f9a:	68a3      	ldr	r3, [r4, #8]
 8020f9c:	6820      	ldr	r0, [r4, #0]
 8020f9e:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 8020fa0:	2380      	movs	r3, #128	@ 0x80
 8020fa2:	2200      	movs	r2, #0
 8020fa4:	4611      	mov	r1, r2
 8020fa6:	4620      	mov	r0, r4
 8020fa8:	f7ff ff1c 	bl	8020de4 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 8020fac:	2300      	movs	r3, #0
 8020fae:	222e      	movs	r2, #46	@ 0x2e
 8020fb0:	4619      	mov	r1, r3
 8020fb2:	4620      	mov	r0, r4
 8020fb4:	f7ff ff16 	bl	8020de4 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 8020fb8:	23f8      	movs	r3, #248	@ 0xf8
 8020fba:	222e      	movs	r2, #46	@ 0x2e
 8020fbc:	2100      	movs	r1, #0
 8020fbe:	4620      	mov	r0, r4
 8020fc0:	f7ff ff10 	bl	8020de4 <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 8020fc4:	2310      	movs	r3, #16
 8020fc6:	221e      	movs	r2, #30
 8020fc8:	2101      	movs	r1, #1
 8020fca:	4620      	mov	r0, r4
 8020fcc:	f7ff ff0a 	bl	8020de4 <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 8020fd0:	2310      	movs	r3, #16
 8020fd2:	221f      	movs	r2, #31
 8020fd4:	2101      	movs	r1, #1
 8020fd6:	4620      	mov	r0, r4
 8020fd8:	f7ff ff04 	bl	8020de4 <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 8020fdc:	2304      	movs	r3, #4
 8020fde:	2200      	movs	r2, #0
 8020fe0:	2101      	movs	r1, #1
 8020fe2:	4620      	mov	r0, r4
 8020fe4:	f7ff fefe 	bl	8020de4 <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 8020fe8:	2301      	movs	r3, #1
 8020fea:	461a      	mov	r2, r3
 8020fec:	4619      	mov	r1, r3
 8020fee:	4620      	mov	r0, r4
 8020ff0:	f7ff fef8 	bl	8020de4 <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 8020ff4:	2203      	movs	r2, #3
 8020ff6:	2101      	movs	r1, #1
 8020ff8:	4620      	mov	r0, r4
 8020ffa:	f7ff ff1a 	bl	8020e32 <w5500_r1>
}
 8020ffe:	2842      	cmp	r0, #66	@ 0x42
 8021000:	bf14      	ite	ne
 8021002:	2000      	movne	r0, #0
 8021004:	2001      	moveq	r0, #1
 8021006:	bd10      	pop	{r4, pc}

08021008 <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 8021008:	b508      	push	{r3, lr}
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 802100a:	222e      	movs	r2, #46	@ 0x2e
 802100c:	2100      	movs	r1, #0
 802100e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8021010:	f7ff ff0f 	bl	8020e32 <w5500_r1>
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
}
 8021014:	f000 0001 	and.w	r0, r0, #1
 8021018:	bd08      	pop	{r3, pc}

0802101a <mg_dns_free>:
static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 802101a:	b508      	push	{r3, lr}
 802101c:	4602      	mov	r2, r0
 802101e:	4608      	mov	r0, r1
  LIST_DELETE(struct dns_data, head, d);
 8021020:	e000      	b.n	8021024 <mg_dns_free+0xa>
 8021022:	461a      	mov	r2, r3
 8021024:	6813      	ldr	r3, [r2, #0]
 8021026:	4283      	cmp	r3, r0
 8021028:	d1fb      	bne.n	8021022 <mg_dns_free+0x8>
 802102a:	6803      	ldr	r3, [r0, #0]
 802102c:	6013      	str	r3, [r2, #0]
  free(d);
 802102e:	f7f9 fa1d 	bl	801a46c <vPortFree>
}
 8021032:	bd08      	pop	{r3, pc}

08021034 <mg_atone>:
static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 8021034:	b082      	sub	sp, #8
 8021036:	ab02      	add	r3, sp, #8
 8021038:	e903 0003 	stmdb	r3, {r0, r1}
  if (str.len > 0) return false;
 802103c:	b111      	cbz	r1, 8021044 <mg_atone+0x10>
 802103e:	2000      	movs	r0, #0
}
 8021040:	b002      	add	sp, #8
 8021042:	4770      	bx	lr
  memset(addr->ip, 0, sizeof(addr->ip));
 8021044:	6011      	str	r1, [r2, #0]
 8021046:	6051      	str	r1, [r2, #4]
 8021048:	6091      	str	r1, [r2, #8]
 802104a:	60d1      	str	r1, [r2, #12]
  addr->is_ip6 = false;
 802104c:	74d1      	strb	r1, [r2, #19]
  return true;
 802104e:	2001      	movs	r0, #1
 8021050:	e7f6      	b.n	8021040 <mg_atone+0xc>

08021052 <urlparse>:
static struct url urlparse(const char *url) {
 8021052:	b510      	push	{r4, lr}
 8021054:	b088      	sub	sp, #32
 8021056:	4604      	mov	r4, r0
  memset(&u, 0, sizeof(u));
 8021058:	2200      	movs	r2, #0
 802105a:	9201      	str	r2, [sp, #4]
 802105c:	9202      	str	r2, [sp, #8]
 802105e:	9203      	str	r2, [sp, #12]
 8021060:	9204      	str	r2, [sp, #16]
 8021062:	9205      	str	r2, [sp, #20]
 8021064:	9206      	str	r2, [sp, #24]
 8021066:	9207      	str	r2, [sp, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8021068:	e00f      	b.n	802108a <urlparse+0x38>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 802106a:	b19a      	cbz	r2, 8021094 <urlparse+0x42>
 802106c:	9804      	ldr	r0, [sp, #16]
 802106e:	b988      	cbnz	r0, 8021094 <urlparse+0x42>
 8021070:	1888      	adds	r0, r1, r2
 8021072:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 8021076:	282f      	cmp	r0, #47	@ 0x2f
 8021078:	d10c      	bne.n	8021094 <urlparse+0x42>
      u.host = i + 1;
 802107a:	1c53      	adds	r3, r2, #1
 802107c:	9304      	str	r3, [sp, #16]
      u.port = 0;
 802107e:	2300      	movs	r3, #0
 8021080:	9305      	str	r3, [sp, #20]
 8021082:	e001      	b.n	8021088 <urlparse+0x36>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8021084:	2300      	movs	r3, #0
 8021086:	9305      	str	r3, [sp, #20]
  for (i = 0; url[i] != '\0'; i++) {
 8021088:	3201      	adds	r2, #1
 802108a:	5c8b      	ldrb	r3, [r1, r2]
 802108c:	2b00      	cmp	r3, #0
 802108e:	d02c      	beq.n	80210ea <urlparse+0x98>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8021090:	2b2f      	cmp	r3, #47	@ 0x2f
 8021092:	d0ea      	beq.n	802106a <urlparse+0x18>
    } else if (url[i] == ']') {
 8021094:	2b5d      	cmp	r3, #93	@ 0x5d
 8021096:	d0f5      	beq.n	8021084 <urlparse+0x32>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8021098:	2b3a      	cmp	r3, #58	@ 0x3a
 802109a:	d00b      	beq.n	80210b4 <urlparse+0x62>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 802109c:	2b40      	cmp	r3, #64	@ 0x40
 802109e:	d012      	beq.n	80210c6 <urlparse+0x74>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 80210a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80210a2:	d1f1      	bne.n	8021088 <urlparse+0x36>
 80210a4:	9b04      	ldr	r3, [sp, #16]
 80210a6:	2b00      	cmp	r3, #0
 80210a8:	d0ee      	beq.n	8021088 <urlparse+0x36>
 80210aa:	9b06      	ldr	r3, [sp, #24]
 80210ac:	2b00      	cmp	r3, #0
 80210ae:	d1eb      	bne.n	8021088 <urlparse+0x36>
      u.uri = i;
 80210b0:	9206      	str	r2, [sp, #24]
 80210b2:	e7e9      	b.n	8021088 <urlparse+0x36>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 80210b4:	9805      	ldr	r0, [sp, #20]
 80210b6:	2800      	cmp	r0, #0
 80210b8:	d1f0      	bne.n	802109c <urlparse+0x4a>
 80210ba:	9806      	ldr	r0, [sp, #24]
 80210bc:	2800      	cmp	r0, #0
 80210be:	d1ed      	bne.n	802109c <urlparse+0x4a>
      u.port = i + 1;
 80210c0:	1c53      	adds	r3, r2, #1
 80210c2:	9305      	str	r3, [sp, #20]
 80210c4:	e7e0      	b.n	8021088 <urlparse+0x36>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 80210c6:	9802      	ldr	r0, [sp, #8]
 80210c8:	2800      	cmp	r0, #0
 80210ca:	d1e9      	bne.n	80210a0 <urlparse+0x4e>
 80210cc:	9803      	ldr	r0, [sp, #12]
 80210ce:	2800      	cmp	r0, #0
 80210d0:	d1e6      	bne.n	80210a0 <urlparse+0x4e>
 80210d2:	9806      	ldr	r0, [sp, #24]
 80210d4:	2800      	cmp	r0, #0
 80210d6:	d1e3      	bne.n	80210a0 <urlparse+0x4e>
      u.user = u.host;
 80210d8:	9b04      	ldr	r3, [sp, #16]
 80210da:	9302      	str	r3, [sp, #8]
      u.pass = u.port;
 80210dc:	9b05      	ldr	r3, [sp, #20]
 80210de:	9303      	str	r3, [sp, #12]
      u.host = i + 1;
 80210e0:	1c53      	adds	r3, r2, #1
 80210e2:	9304      	str	r3, [sp, #16]
      u.port = 0;
 80210e4:	2300      	movs	r3, #0
 80210e6:	9305      	str	r3, [sp, #20]
 80210e8:	e7ce      	b.n	8021088 <urlparse+0x36>
  u.end = i;
 80210ea:	9207      	str	r2, [sp, #28]
  return u;
 80210ec:	46a4      	mov	ip, r4
 80210ee:	f10d 0e04 	add.w	lr, sp, #4
 80210f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80210f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80210fa:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80210fe:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
}
 8021102:	4620      	mov	r0, r4
 8021104:	b008      	add	sp, #32
 8021106:	bd10      	pop	{r4, pc}

08021108 <mg_dns_parse_name_depth>:
                                      int depth) {
 8021108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802110c:	b085      	sub	sp, #20
 802110e:	4681      	mov	r9, r0
 8021110:	4688      	mov	r8, r1
 8021112:	4693      	mov	fp, r2
 8021114:	469a      	mov	sl, r3
 8021116:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8021118:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
  if (tolen > 0 && depth == 0) to[0] = '\0';
 802111a:	b11f      	cbz	r7, 8021124 <mg_dns_parse_name_depth+0x1c>
 802111c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802111e:	b90b      	cbnz	r3, 8021124 <mg_dns_parse_name_depth+0x1c>
 8021120:	f88a 3000 	strb.w	r3, [sl]
  if (depth > 5) return 0;
 8021124:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021126:	2b05      	cmp	r3, #5
 8021128:	dc4f      	bgt.n	80211ca <mg_dns_parse_name_depth+0xc2>
  size_t i = 0;
 802112a:	2600      	movs	r6, #0
 802112c:	e02f      	b.n	802118e <mg_dns_parse_name_depth+0x86>
      i++;
 802112e:	3601      	adds	r6, #1
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 8021130:	2f00      	cmp	r7, #0
 8021132:	d04b      	beq.n	80211cc <mg_dns_parse_name_depth+0xc4>
 8021134:	3f01      	subs	r7, #1
 8021136:	2300      	movs	r3, #0
 8021138:	f80a 3007 	strb.w	r3, [sl, r7]
 802113c:	e046      	b.n	80211cc <mg_dns_parse_name_depth+0xc4>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 802113e:	0222      	lsls	r2, r4, #8
 8021140:	f402 527c 	and.w	r2, r2, #16128	@ 0x3f00
 8021144:	f819 3001 	ldrb.w	r3, [r9, r1]
 8021148:	431a      	orrs	r2, r3
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 802114a:	1c53      	adds	r3, r2, #1
 802114c:	4543      	cmp	r3, r8
 802114e:	d203      	bcs.n	8021158 <mg_dns_parse_name_depth+0x50>
 8021150:	f819 3002 	ldrb.w	r3, [r9, r2]
 8021154:	2b3f      	cmp	r3, #63	@ 0x3f
 8021156:	d901      	bls.n	802115c <mg_dns_parse_name_depth+0x54>
      i += 2;
 8021158:	3602      	adds	r6, #2
      break;
 802115a:	e7e9      	b.n	8021130 <mg_dns_parse_name_depth+0x28>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 802115c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802115e:	3301      	adds	r3, #1
 8021160:	9302      	str	r3, [sp, #8]
 8021162:	9501      	str	r5, [sp, #4]
 8021164:	9700      	str	r7, [sp, #0]
 8021166:	4653      	mov	r3, sl
 8021168:	4641      	mov	r1, r8
 802116a:	4648      	mov	r0, r9
 802116c:	f7ff ffcc 	bl	8021108 <mg_dns_parse_name_depth>
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8021170:	2800      	cmp	r0, #0
 8021172:	d1f1      	bne.n	8021158 <mg_dns_parse_name_depth+0x50>
        return 0;
 8021174:	4606      	mov	r6, r0
 8021176:	e029      	b.n	80211cc <mg_dns_parse_name_depth+0xc4>
 8021178:	4628      	mov	r0, r5
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 802117a:	1905      	adds	r5, r0, r4
 802117c:	42bd      	cmp	r5, r7
 802117e:	d31e      	bcc.n	80211be <mg_dns_parse_name_depth+0xb6>
    i += n + 1;
 8021180:	4426      	add	r6, r4
 8021182:	3601      	adds	r6, #1
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8021184:	42bd      	cmp	r5, r7
 8021186:	d202      	bcs.n	802118e <mg_dns_parse_name_depth+0x86>
 8021188:	2300      	movs	r3, #0
 802118a:	f80a 3005 	strb.w	r3, [sl, r5]
  while (ofs + i + 1 < len) {
 802118e:	eb06 030b 	add.w	r3, r6, fp
 8021192:	1c59      	adds	r1, r3, #1
 8021194:	4541      	cmp	r1, r8
 8021196:	d2cb      	bcs.n	8021130 <mg_dns_parse_name_depth+0x28>
    size_t n = s[ofs + i];
 8021198:	f819 4003 	ldrb.w	r4, [r9, r3]
    if (n == 0) {
 802119c:	2c00      	cmp	r4, #0
 802119e:	d0c6      	beq.n	802112e <mg_dns_parse_name_depth+0x26>
    if (n & 0xc0) {
 80211a0:	2c3f      	cmp	r4, #63	@ 0x3f
 80211a2:	d8cc      	bhi.n	802113e <mg_dns_parse_name_depth+0x36>
    if (ofs + i + n + 1 >= len) return 0;
 80211a4:	4423      	add	r3, r4
 80211a6:	3301      	adds	r3, #1
 80211a8:	4543      	cmp	r3, r8
 80211aa:	d213      	bcs.n	80211d4 <mg_dns_parse_name_depth+0xcc>
    if (j > 0) {
 80211ac:	2d00      	cmp	r5, #0
 80211ae:	d0e3      	beq.n	8021178 <mg_dns_parse_name_depth+0x70>
      if (j < tolen) to[j] = '.';
 80211b0:	42bd      	cmp	r5, r7
 80211b2:	d202      	bcs.n	80211ba <mg_dns_parse_name_depth+0xb2>
 80211b4:	232e      	movs	r3, #46	@ 0x2e
 80211b6:	f80a 3005 	strb.w	r3, [sl, r5]
      j++;
 80211ba:	1c68      	adds	r0, r5, #1
 80211bc:	e7dd      	b.n	802117a <mg_dns_parse_name_depth+0x72>
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 80211be:	4622      	mov	r2, r4
 80211c0:	4449      	add	r1, r9
 80211c2:	4450      	add	r0, sl
 80211c4:	f00c fa98 	bl	802d6f8 <memcpy>
 80211c8:	e7da      	b.n	8021180 <mg_dns_parse_name_depth+0x78>
  if (depth > 5) return 0;
 80211ca:	2600      	movs	r6, #0
}
 80211cc:	4630      	mov	r0, r6
 80211ce:	b005      	add	sp, #20
 80211d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ofs + i + n + 1 >= len) return 0;
 80211d4:	2600      	movs	r6, #0
 80211d6:	e7f9      	b.n	80211cc <mg_dns_parse_name_depth+0xc4>

080211d8 <mg_dns_parse_name>:
                                char *dst, size_t dstlen) {
 80211d8:	b510      	push	{r4, lr}
 80211da:	b084      	sub	sp, #16
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 80211dc:	2400      	movs	r4, #0
 80211de:	9402      	str	r4, [sp, #8]
 80211e0:	9401      	str	r4, [sp, #4]
 80211e2:	9c06      	ldr	r4, [sp, #24]
 80211e4:	9400      	str	r4, [sp, #0]
 80211e6:	f7ff ff8f 	bl	8021108 <mg_dns_parse_name_depth>
}
 80211ea:	b004      	add	sp, #16
 80211ec:	bd10      	pop	{r4, pc}
	...

080211f0 <mg_sha1_transform>:
                              const unsigned char *buffer) {
 80211f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211f4:	b09f      	sub	sp, #124	@ 0x7c
 80211f6:	900d      	str	r0, [sp, #52]	@ 0x34
  memcpy(block, buffer, 64);
 80211f8:	460c      	mov	r4, r1
 80211fa:	af0e      	add	r7, sp, #56	@ 0x38
 80211fc:	f101 0540 	add.w	r5, r1, #64	@ 0x40
 8021200:	463e      	mov	r6, r7
 8021202:	6820      	ldr	r0, [r4, #0]
 8021204:	6861      	ldr	r1, [r4, #4]
 8021206:	68a2      	ldr	r2, [r4, #8]
 8021208:	68e3      	ldr	r3, [r4, #12]
 802120a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 802120c:	3410      	adds	r4, #16
 802120e:	4637      	mov	r7, r6
 8021210:	42ac      	cmp	r4, r5
 8021212:	d1f5      	bne.n	8021200 <mg_sha1_transform+0x10>
  a = state[0];
 8021214:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021216:	6805      	ldr	r5, [r0, #0]
  b = state[1];
 8021218:	6847      	ldr	r7, [r0, #4]
  c = state[2];
 802121a:	6884      	ldr	r4, [r0, #8]
  d = state[3];
 802121c:	f8d0 800c 	ldr.w	r8, [r0, #12]
  e = state[4];
 8021220:	f8d0 9010 	ldr.w	r9, [r0, #16]
  R0(a, b, c, d, e, 0);
 8021224:	ea84 0608 	eor.w	r6, r4, r8
 8021228:	403e      	ands	r6, r7
 802122a:	ea86 0608 	eor.w	r6, r6, r8
 802122e:	2100      	movs	r1, #0
 8021230:	a80e      	add	r0, sp, #56	@ 0x38
 8021232:	f7ff fd7d 	bl	8020d30 <blk0>
 8021236:	1833      	adds	r3, r6, r0
 8021238:	eb03 63f5 	add.w	r3, r3, r5, ror #27
 802123c:	4ee4      	ldr	r6, [pc, #912]	@ (80215d0 <mg_sha1_transform+0x3e0>)
 802123e:	4433      	add	r3, r6
 8021240:	4499      	add	r9, r3
 8021242:	ea4f 0ab7 	mov.w	sl, r7, ror #2
  R0(e, a, b, c, d, 1);
 8021246:	ea84 07b7 	eor.w	r7, r4, r7, ror #2
 802124a:	402f      	ands	r7, r5
 802124c:	4067      	eors	r7, r4
 802124e:	2101      	movs	r1, #1
 8021250:	a80e      	add	r0, sp, #56	@ 0x38
 8021252:	f7ff fd6d 	bl	8020d30 <blk0>
 8021256:	4407      	add	r7, r0
 8021258:	eb07 67f9 	add.w	r7, r7, r9, ror #27
 802125c:	4437      	add	r7, r6
 802125e:	4447      	add	r7, r8
 8021260:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(d, e, a, b, c, 2);
 8021264:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8021268:	ea05 0509 	and.w	r5, r5, r9
 802126c:	ea85 050a 	eor.w	r5, r5, sl
 8021270:	2102      	movs	r1, #2
 8021272:	a80e      	add	r0, sp, #56	@ 0x38
 8021274:	f7ff fd5c 	bl	8020d30 <blk0>
 8021278:	4405      	add	r5, r0
 802127a:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 802127e:	4435      	add	r5, r6
 8021280:	442c      	add	r4, r5
 8021282:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(c, d, e, a, b, 3);
 8021286:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 802128a:	ea09 0907 	and.w	r9, r9, r7
 802128e:	ea89 0908 	eor.w	r9, r9, r8
 8021292:	2103      	movs	r1, #3
 8021294:	a80e      	add	r0, sp, #56	@ 0x38
 8021296:	f7ff fd4b 	bl	8020d30 <blk0>
 802129a:	4481      	add	r9, r0
 802129c:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 80212a0:	44b1      	add	r9, r6
 80212a2:	44ca      	add	sl, r9
 80212a4:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(b, c, d, e, a, 4);
 80212a8:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 80212ac:	4027      	ands	r7, r4
 80212ae:	406f      	eors	r7, r5
 80212b0:	2104      	movs	r1, #4
 80212b2:	a80e      	add	r0, sp, #56	@ 0x38
 80212b4:	f7ff fd3c 	bl	8020d30 <blk0>
 80212b8:	4407      	add	r7, r0
 80212ba:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 80212be:	4437      	add	r7, r6
 80212c0:	44b8      	add	r8, r7
 80212c2:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(a, b, c, d, e, 5);
 80212c6:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 80212ca:	ea04 040a 	and.w	r4, r4, sl
 80212ce:	ea84 0409 	eor.w	r4, r4, r9
 80212d2:	2105      	movs	r1, #5
 80212d4:	a80e      	add	r0, sp, #56	@ 0x38
 80212d6:	f7ff fd2b 	bl	8020d30 <blk0>
 80212da:	4404      	add	r4, r0
 80212dc:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 80212e0:	4434      	add	r4, r6
 80212e2:	4425      	add	r5, r4
 80212e4:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(e, a, b, c, d, 6);
 80212e8:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 80212ec:	ea0a 0a08 	and.w	sl, sl, r8
 80212f0:	ea8a 0a07 	eor.w	sl, sl, r7
 80212f4:	2106      	movs	r1, #6
 80212f6:	a80e      	add	r0, sp, #56	@ 0x38
 80212f8:	f7ff fd1a 	bl	8020d30 <blk0>
 80212fc:	4482      	add	sl, r0
 80212fe:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 8021302:	44b2      	add	sl, r6
 8021304:	44d1      	add	r9, sl
 8021306:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(d, e, a, b, c, 7);
 802130a:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 802130e:	ea08 0805 	and.w	r8, r8, r5
 8021312:	ea88 0804 	eor.w	r8, r8, r4
 8021316:	2107      	movs	r1, #7
 8021318:	a80e      	add	r0, sp, #56	@ 0x38
 802131a:	f7ff fd09 	bl	8020d30 <blk0>
 802131e:	4480      	add	r8, r0
 8021320:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 8021324:	44b0      	add	r8, r6
 8021326:	4447      	add	r7, r8
 8021328:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(c, d, e, a, b, 8);
 802132c:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8021330:	ea05 0509 	and.w	r5, r5, r9
 8021334:	ea85 050a 	eor.w	r5, r5, sl
 8021338:	2108      	movs	r1, #8
 802133a:	a80e      	add	r0, sp, #56	@ 0x38
 802133c:	f7ff fcf8 	bl	8020d30 <blk0>
 8021340:	4405      	add	r5, r0
 8021342:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 8021346:	4435      	add	r5, r6
 8021348:	442c      	add	r4, r5
 802134a:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(b, c, d, e, a, 9);
 802134e:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 8021352:	ea09 0907 	and.w	r9, r9, r7
 8021356:	ea89 0908 	eor.w	r9, r9, r8
 802135a:	2109      	movs	r1, #9
 802135c:	a80e      	add	r0, sp, #56	@ 0x38
 802135e:	f7ff fce7 	bl	8020d30 <blk0>
 8021362:	4481      	add	r9, r0
 8021364:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8021368:	44b1      	add	r9, r6
 802136a:	44ca      	add	sl, r9
 802136c:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(a, b, c, d, e, 10);
 8021370:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 8021374:	4027      	ands	r7, r4
 8021376:	406f      	eors	r7, r5
 8021378:	210a      	movs	r1, #10
 802137a:	a80e      	add	r0, sp, #56	@ 0x38
 802137c:	f7ff fcd8 	bl	8020d30 <blk0>
 8021380:	4407      	add	r7, r0
 8021382:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 8021386:	4437      	add	r7, r6
 8021388:	44b8      	add	r8, r7
 802138a:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(e, a, b, c, d, 11);
 802138e:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 8021392:	ea04 040a 	and.w	r4, r4, sl
 8021396:	ea84 0409 	eor.w	r4, r4, r9
 802139a:	210b      	movs	r1, #11
 802139c:	a80e      	add	r0, sp, #56	@ 0x38
 802139e:	f7ff fcc7 	bl	8020d30 <blk0>
 80213a2:	4404      	add	r4, r0
 80213a4:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 80213a8:	4434      	add	r4, r6
 80213aa:	4425      	add	r5, r4
 80213ac:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(d, e, a, b, c, 12);
 80213b0:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 80213b4:	ea0a 0a08 	and.w	sl, sl, r8
 80213b8:	ea8a 0a07 	eor.w	sl, sl, r7
 80213bc:	210c      	movs	r1, #12
 80213be:	a80e      	add	r0, sp, #56	@ 0x38
 80213c0:	f7ff fcb6 	bl	8020d30 <blk0>
 80213c4:	4482      	add	sl, r0
 80213c6:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 80213ca:	44b2      	add	sl, r6
 80213cc:	44d1      	add	r9, sl
 80213ce:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(c, d, e, a, b, 13);
 80213d2:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 80213d6:	ea08 0805 	and.w	r8, r8, r5
 80213da:	ea88 0804 	eor.w	r8, r8, r4
 80213de:	210d      	movs	r1, #13
 80213e0:	a80e      	add	r0, sp, #56	@ 0x38
 80213e2:	f7ff fca5 	bl	8020d30 <blk0>
 80213e6:	4480      	add	r8, r0
 80213e8:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 80213ec:	44b0      	add	r8, r6
 80213ee:	4447      	add	r7, r8
 80213f0:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(b, c, d, e, a, 14);
 80213f4:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 80213f8:	ea05 0509 	and.w	r5, r5, r9
 80213fc:	ea85 050a 	eor.w	r5, r5, sl
 8021400:	210e      	movs	r1, #14
 8021402:	a80e      	add	r0, sp, #56	@ 0x38
 8021404:	f7ff fc94 	bl	8020d30 <blk0>
 8021408:	4405      	add	r5, r0
 802140a:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 802140e:	4435      	add	r5, r6
 8021410:	442c      	add	r4, r5
 8021412:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(a, b, c, d, e, 15);
 8021416:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 802141a:	ea09 0907 	and.w	r9, r9, r7
 802141e:	ea89 0908 	eor.w	r9, r9, r8
 8021422:	210f      	movs	r1, #15
 8021424:	a80e      	add	r0, sp, #56	@ 0x38
 8021426:	f7ff fc83 	bl	8020d30 <blk0>
 802142a:	4481      	add	r9, r0
 802142c:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8021430:	44b1      	add	r9, r6
 8021432:	eb0a 0109 	add.w	r1, sl, r9
  R1(e, a, b, c, d, 16);
 8021436:	ea85 03b7 	eor.w	r3, r5, r7, ror #2
 802143a:	4023      	ands	r3, r4
 802143c:	ea83 0205 	eor.w	r2, r3, r5
 8021440:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021442:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8021444:	4043      	eors	r3, r0
 8021446:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021448:	ea83 0c00 	eor.w	ip, r3, r0
 802144c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802144e:	ea8c 0303 	eor.w	r3, ip, r3
 8021452:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8021456:	930e      	str	r3, [sp, #56]	@ 0x38
 8021458:	9300      	str	r3, [sp, #0]
 802145a:	18d3      	adds	r3, r2, r3
 802145c:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8021460:	4433      	add	r3, r6
 8021462:	eb08 0203 	add.w	r2, r8, r3
 8021466:	ea4f 08b4 	mov.w	r8, r4, ror #2
  R1(d, e, a, b, c, 17);
 802146a:	ea88 0cb7 	eor.w	ip, r8, r7, ror #2
 802146e:	ea0c 0c01 	and.w	ip, ip, r1
 8021472:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8021476:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021478:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802147a:	ea83 0e04 	eor.w	lr, r3, r4
 802147e:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8021482:	ea8e 0e09 	eor.w	lr, lr, r9
 8021486:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021488:	ea8e 0e03 	eor.w	lr, lr, r3
 802148c:	ea4f 74fe 	mov.w	r4, lr, ror #31
 8021490:	940f      	str	r4, [sp, #60]	@ 0x3c
 8021492:	9401      	str	r4, [sp, #4]
 8021494:	44a4      	add	ip, r4
 8021496:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
 802149a:	44b4      	add	ip, r6
 802149c:	44ac      	add	ip, r5
  R1(c, d, e, a, b, 18);
 802149e:	ea88 05b1 	eor.w	r5, r8, r1, ror #2
 80214a2:	4015      	ands	r5, r2
 80214a4:	ea85 0508 	eor.w	r5, r5, r8
 80214a8:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 80214aa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80214ac:	ea84 0e03 	eor.w	lr, r4, r3
 80214b0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80214b2:	ea8e 0e03 	eor.w	lr, lr, r3
 80214b6:	ea80 000e 	eor.w	r0, r0, lr
 80214ba:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80214be:	9010      	str	r0, [sp, #64]	@ 0x40
 80214c0:	9002      	str	r0, [sp, #8]
 80214c2:	4405      	add	r5, r0
 80214c4:	eb05 65fc 	add.w	r5, r5, ip, ror #27
 80214c8:	4435      	add	r5, r6
 80214ca:	eb05 05b7 	add.w	r5, r5, r7, ror #2
 80214ce:	ea4f 02b2 	mov.w	r2, r2, ror #2
  R1(b, c, d, e, a, 19);
 80214d2:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 80214d6:	ea00 000c 	and.w	r0, r0, ip
 80214da:	ea80 00b1 	eor.w	r0, r0, r1, ror #2
 80214de:	9f00      	ldr	r7, [sp, #0]
 80214e0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80214e2:	4067      	eors	r7, r4
 80214e4:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 80214e8:	ea87 070e 	eor.w	r7, r7, lr
 80214ec:	ea89 0907 	eor.w	r9, r9, r7
 80214f0:	ea4f 79f9 	mov.w	r9, r9, ror #31
 80214f4:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 80214f8:	4448      	add	r0, r9
 80214fa:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 80214fe:	4430      	add	r0, r6
 8021500:	eb08 0400 	add.w	r4, r8, r0
  R2(a, b, c, d, e, 20);
 8021504:	ea85 00bc 	eor.w	r0, r5, ip, ror #2
 8021508:	4050      	eors	r0, r2
 802150a:	9e01      	ldr	r6, [sp, #4]
 802150c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 802150e:	ea86 0807 	eor.w	r8, r6, r7
 8021512:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8021516:	ea88 080a 	eor.w	r8, r8, sl
 802151a:	ea83 0808 	eor.w	r8, r3, r8
 802151e:	ea4f 78f8 	mov.w	r8, r8, ror #31
 8021522:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8021526:	4440      	add	r0, r8
 8021528:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 802152c:	4b29      	ldr	r3, [pc, #164]	@ (80215d4 <mg_sha1_transform+0x3e4>)
 802152e:	4418      	add	r0, r3
 8021530:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(e, a, b, c, d, 21);
 8021534:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8021538:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 802153c:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 802153e:	9f02      	ldr	r7, [sp, #8]
 8021540:	4077      	eors	r7, r6
 8021542:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8021544:	4077      	eors	r7, r6
 8021546:	ea8e 0707 	eor.w	r7, lr, r7
 802154a:	ea4f 77f7 	mov.w	r7, r7, ror #31
 802154e:	9713      	str	r7, [sp, #76]	@ 0x4c
 8021550:	9703      	str	r7, [sp, #12]
 8021552:	4439      	add	r1, r7
 8021554:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8021558:	4419      	add	r1, r3
 802155a:	440a      	add	r2, r1
  R2(d, e, a, b, c, 22);
 802155c:	ea80 01b4 	eor.w	r1, r0, r4, ror #2
 8021560:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8021564:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8021566:	ea87 0e09 	eor.w	lr, r7, r9
 802156a:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 802156c:	ea87 0e0e 	eor.w	lr, r7, lr
 8021570:	ea8a 0e0e 	eor.w	lr, sl, lr
 8021574:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8021578:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 802157c:	4471      	add	r1, lr
 802157e:	eb01 61f2 	add.w	r1, r1, r2, ror #27
 8021582:	4419      	add	r1, r3
 8021584:	eb01 01bc 	add.w	r1, r1, ip, ror #2
  R2(c, d, e, a, b, 23);
 8021588:	ea82 0bb0 	eor.w	fp, r2, r0, ror #2
 802158c:	ea8b 0bb4 	eor.w	fp, fp, r4, ror #2
 8021590:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8021592:	ea87 0c08 	eor.w	ip, r7, r8
 8021596:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8021598:	ea87 0c0c 	eor.w	ip, r7, ip
 802159c:	ea86 0c0c 	eor.w	ip, r6, ip
 80215a0:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 80215a4:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 80215a8:	44e3      	add	fp, ip
 80215aa:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
 80215ae:	449b      	add	fp, r3
 80215b0:	eb0b 0bb5 	add.w	fp, fp, r5, ror #2
  R2(b, c, d, e, a, 24);
 80215b4:	ea81 0ab2 	eor.w	sl, r1, r2, ror #2
 80215b8:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
 80215bc:	9d00      	ldr	r5, [sp, #0]
 80215be:	9e03      	ldr	r6, [sp, #12]
 80215c0:	406e      	eors	r6, r5
 80215c2:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80215c4:	406e      	eors	r6, r5
 80215c6:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80215c8:	406e      	eors	r6, r5
 80215ca:	ea4f 77f6 	mov.w	r7, r6, ror #31
 80215ce:	e003      	b.n	80215d8 <mg_sha1_transform+0x3e8>
 80215d0:	5a827999 	.word	0x5a827999
 80215d4:	6ed9eba1 	.word	0x6ed9eba1
 80215d8:	9716      	str	r7, [sp, #88]	@ 0x58
 80215da:	9704      	str	r7, [sp, #16]
 80215dc:	44ba      	add	sl, r7
 80215de:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
 80215e2:	449a      	add	sl, r3
 80215e4:	eb0a 0ab4 	add.w	sl, sl, r4, ror #2
  R2(a, b, c, d, e, 25);
 80215e8:	ea8b 05b1 	eor.w	r5, fp, r1, ror #2
 80215ec:	ea85 05b2 	eor.w	r5, r5, r2, ror #2
 80215f0:	9e01      	ldr	r6, [sp, #4]
 80215f2:	ea86 040e 	eor.w	r4, r6, lr
 80215f6:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 80215f8:	407c      	eors	r4, r7
 80215fa:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80215fc:	407c      	eors	r4, r7
 80215fe:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8021602:	9417      	str	r4, [sp, #92]	@ 0x5c
 8021604:	9405      	str	r4, [sp, #20]
 8021606:	4425      	add	r5, r4
 8021608:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 802160c:	441d      	add	r5, r3
 802160e:	eb05 05b0 	add.w	r5, r5, r0, ror #2
  R2(e, a, b, c, d, 26);
 8021612:	ea8a 04bb 	eor.w	r4, sl, fp, ror #2
 8021616:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 802161a:	9e02      	ldr	r6, [sp, #8]
 802161c:	ea86 000c 	eor.w	r0, r6, ip
 8021620:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8021622:	4078      	eors	r0, r7
 8021624:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8021626:	4078      	eors	r0, r7
 8021628:	ea4f 70f0 	mov.w	r0, r0, ror #31
 802162c:	4606      	mov	r6, r0
 802162e:	9018      	str	r0, [sp, #96]	@ 0x60
 8021630:	4404      	add	r4, r0
 8021632:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8021636:	441c      	add	r4, r3
 8021638:	eb04 04b2 	add.w	r4, r4, r2, ror #2
  R2(d, e, a, b, c, 27);
 802163c:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 8021640:	ea80 00bb 	eor.w	r0, r0, fp, ror #2
 8021644:	9f04      	ldr	r7, [sp, #16]
 8021646:	ea89 0207 	eor.w	r2, r9, r7
 802164a:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 802164c:	407a      	eors	r2, r7
 802164e:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8021650:	407a      	eors	r2, r7
 8021652:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8021656:	9219      	str	r2, [sp, #100]	@ 0x64
 8021658:	9206      	str	r2, [sp, #24]
 802165a:	4410      	add	r0, r2
 802165c:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8021660:	4418      	add	r0, r3
 8021662:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(c, d, e, a, b, 28);
 8021666:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 802166a:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 802166e:	9a05      	ldr	r2, [sp, #20]
 8021670:	ea88 0202 	eor.w	r2, r8, r2
 8021674:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8021676:	407a      	eors	r2, r7
 8021678:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 802167a:	407a      	eors	r2, r7
 802167c:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8021680:	921a      	str	r2, [sp, #104]	@ 0x68
 8021682:	9207      	str	r2, [sp, #28]
 8021684:	4411      	add	r1, r2
 8021686:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 802168a:	4419      	add	r1, r3
 802168c:	eb01 01bb 	add.w	r1, r1, fp, ror #2
  R2(b, c, d, e, a, 29);
 8021690:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 8021694:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 8021698:	960b      	str	r6, [sp, #44]	@ 0x2c
 802169a:	9f03      	ldr	r7, [sp, #12]
 802169c:	ea87 0b06 	eor.w	fp, r7, r6
 80216a0:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 80216a2:	ea87 0b0b 	eor.w	fp, r7, fp
 80216a6:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 80216a8:	ea87 0b0b 	eor.w	fp, r7, fp
 80216ac:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 80216b0:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
 80216b4:	f8cd b020 	str.w	fp, [sp, #32]
 80216b8:	445a      	add	r2, fp
 80216ba:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 80216be:	441a      	add	r2, r3
 80216c0:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(a, b, c, d, e, 30);
 80216c4:	ea81 0ab0 	eor.w	sl, r1, r0, ror #2
 80216c8:	ea8a 0ab4 	eor.w	sl, sl, r4, ror #2
 80216cc:	9e06      	ldr	r6, [sp, #24]
 80216ce:	ea8e 0b06 	eor.w	fp, lr, r6
 80216d2:	9e00      	ldr	r6, [sp, #0]
 80216d4:	ea86 0b0b 	eor.w	fp, r6, fp
 80216d8:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 80216da:	ea87 0b0b 	eor.w	fp, r7, fp
 80216de:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 80216e2:	f8cd b070 	str.w	fp, [sp, #112]	@ 0x70
 80216e6:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80216ea:	44da      	add	sl, fp
 80216ec:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
 80216f0:	449a      	add	sl, r3
 80216f2:	eb0a 0ab5 	add.w	sl, sl, r5, ror #2
  R2(e, a, b, c, d, 31);
 80216f6:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 80216fa:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 80216fe:	9e07      	ldr	r6, [sp, #28]
 8021700:	ea8c 0b06 	eor.w	fp, ip, r6
 8021704:	9e01      	ldr	r6, [sp, #4]
 8021706:	ea86 0b0b 	eor.w	fp, r6, fp
 802170a:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 802170c:	ea87 0b0b 	eor.w	fp, r7, fp
 8021710:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021714:	f8cd b074 	str.w	fp, [sp, #116]	@ 0x74
 8021718:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 802171c:	445d      	add	r5, fp
 802171e:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 8021722:	441d      	add	r5, r3
 8021724:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(d, e, a, b, c, 32);
 8021728:	ea8a 04b2 	eor.w	r4, sl, r2, ror #2
 802172c:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8021730:	9e08      	ldr	r6, [sp, #32]
 8021732:	9f04      	ldr	r7, [sp, #16]
 8021734:	ea87 0b06 	eor.w	fp, r7, r6
 8021738:	9e02      	ldr	r6, [sp, #8]
 802173a:	ea86 0b0b 	eor.w	fp, r6, fp
 802173e:	9e00      	ldr	r6, [sp, #0]
 8021740:	ea86 0b0b 	eor.w	fp, r6, fp
 8021744:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021748:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 802174c:	f8cd b000 	str.w	fp, [sp]
 8021750:	445c      	add	r4, fp
 8021752:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8021756:	441c      	add	r4, r3
 8021758:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(c, d, e, a, b, 33);
 802175c:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 8021760:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 8021764:	9e05      	ldr	r6, [sp, #20]
 8021766:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8021768:	ea86 0b07 	eor.w	fp, r6, r7
 802176c:	ea89 0b0b 	eor.w	fp, r9, fp
 8021770:	9e01      	ldr	r6, [sp, #4]
 8021772:	ea86 0b0b 	eor.w	fp, r6, fp
 8021776:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 802177a:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 802177e:	f8cd b004 	str.w	fp, [sp, #4]
 8021782:	4458      	add	r0, fp
 8021784:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8021788:	4418      	add	r0, r3
 802178a:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(b, c, d, e, a, 34);
 802178e:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8021792:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 8021796:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021798:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802179a:	ea86 0b07 	eor.w	fp, r6, r7
 802179e:	ea88 0b0b 	eor.w	fp, r8, fp
 80217a2:	9e02      	ldr	r6, [sp, #8]
 80217a4:	ea86 0b0b 	eor.w	fp, r6, fp
 80217a8:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 80217ac:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 80217b0:	f8cd b008 	str.w	fp, [sp, #8]
 80217b4:	4459      	add	r1, fp
 80217b6:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 80217ba:	4419      	add	r1, r3
 80217bc:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R2(a, b, c, d, e, 35);
 80217c0:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 80217c4:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 80217c8:	9e06      	ldr	r6, [sp, #24]
 80217ca:	9f00      	ldr	r7, [sp, #0]
 80217cc:	ea86 0b07 	eor.w	fp, r6, r7
 80217d0:	9e03      	ldr	r6, [sp, #12]
 80217d2:	ea86 0b0b 	eor.w	fp, r6, fp
 80217d6:	ea89 090b 	eor.w	r9, r9, fp
 80217da:	ea4f 7bf9 	mov.w	fp, r9, ror #31
 80217de:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 80217e2:	445a      	add	r2, fp
 80217e4:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 80217e8:	441a      	add	r2, r3
 80217ea:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(e, a, b, c, d, 36);
 80217ee:	ea81 09b0 	eor.w	r9, r1, r0, ror #2
 80217f2:	ea89 09b4 	eor.w	r9, r9, r4, ror #2
 80217f6:	9e07      	ldr	r6, [sp, #28]
 80217f8:	9f01      	ldr	r7, [sp, #4]
 80217fa:	ea86 0a07 	eor.w	sl, r6, r7
 80217fe:	ea8e 0a0a 	eor.w	sl, lr, sl
 8021802:	ea88 080a 	eor.w	r8, r8, sl
 8021806:	ea4f 7af8 	mov.w	sl, r8, ror #31
 802180a:	f8cd a048 	str.w	sl, [sp, #72]	@ 0x48
 802180e:	44d1      	add	r9, sl
 8021810:	eb09 69f2 	add.w	r9, r9, r2, ror #27
 8021814:	4499      	add	r9, r3
 8021816:	eb09 08b5 	add.w	r8, r9, r5, ror #2
  R2(d, e, a, b, c, 37);
 802181a:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 802181e:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 8021822:	9e08      	ldr	r6, [sp, #32]
 8021824:	9f02      	ldr	r7, [sp, #8]
 8021826:	ea86 0907 	eor.w	r9, r6, r7
 802182a:	ea8c 0909 	eor.w	r9, ip, r9
 802182e:	9e03      	ldr	r6, [sp, #12]
 8021830:	ea86 0709 	eor.w	r7, r6, r9
 8021834:	ea4f 79f7 	mov.w	r9, r7, ror #31
 8021838:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 802183c:	444d      	add	r5, r9
 802183e:	eb05 65f8 	add.w	r5, r5, r8, ror #27
 8021842:	441d      	add	r5, r3
 8021844:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(c, d, e, a, b, 38);
 8021848:	ea88 04b2 	eor.w	r4, r8, r2, ror #2
 802184c:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8021850:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8021852:	ea87 070b 	eor.w	r7, r7, fp
 8021856:	9e04      	ldr	r6, [sp, #16]
 8021858:	4077      	eors	r7, r6
 802185a:	ea8e 0e07 	eor.w	lr, lr, r7
 802185e:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8021862:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 8021866:	4474      	add	r4, lr
 8021868:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 802186c:	441c      	add	r4, r3
 802186e:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(b, c, d, e, a, 39);
 8021872:	ea85 00b8 	eor.w	r0, r5, r8, ror #2
 8021876:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 802187a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802187c:	ea87 070a 	eor.w	r7, r7, sl
 8021880:	9e05      	ldr	r6, [sp, #20]
 8021882:	4077      	eors	r7, r6
 8021884:	ea8c 0c07 	eor.w	ip, ip, r7
 8021888:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 802188c:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8021890:	f8cd c00c 	str.w	ip, [sp, #12]
 8021894:	4460      	add	r0, ip
 8021896:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 802189a:	4418      	add	r0, r3
 802189c:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(a, b, c, d, e, 40);
 80218a0:	ea44 01b5 	orr.w	r1, r4, r5, ror #2
 80218a4:	ea01 01b8 	and.w	r1, r1, r8, ror #2
 80218a8:	ea04 03b5 	and.w	r3, r4, r5, ror #2
 80218ac:	4319      	orrs	r1, r3
 80218ae:	9b00      	ldr	r3, [sp, #0]
 80218b0:	ea83 0309 	eor.w	r3, r3, r9
 80218b4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80218b6:	4073      	eors	r3, r6
 80218b8:	9e04      	ldr	r6, [sp, #16]
 80218ba:	405e      	eors	r6, r3
 80218bc:	ea4f 73f6 	mov.w	r3, r6, ror #31
 80218c0:	9316      	str	r3, [sp, #88]	@ 0x58
 80218c2:	9304      	str	r3, [sp, #16]
 80218c4:	4419      	add	r1, r3
 80218c6:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 80218ca:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 80218ce:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 80218d2:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 80218d6:	311c      	adds	r1, #28
 80218d8:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(e, a, b, c, d, 41);
 80218dc:	ea40 02b4 	orr.w	r2, r0, r4, ror #2
 80218e0:	ea02 02b5 	and.w	r2, r2, r5, ror #2
 80218e4:	ea00 06b4 	and.w	r6, r0, r4, ror #2
 80218e8:	4332      	orrs	r2, r6
 80218ea:	9b01      	ldr	r3, [sp, #4]
 80218ec:	ea83 060e 	eor.w	r6, r3, lr
 80218f0:	9b06      	ldr	r3, [sp, #24]
 80218f2:	405e      	eors	r6, r3
 80218f4:	9f05      	ldr	r7, [sp, #20]
 80218f6:	407e      	eors	r6, r7
 80218f8:	ea4f 77f6 	mov.w	r7, r6, ror #31
 80218fc:	9717      	str	r7, [sp, #92]	@ 0x5c
 80218fe:	9705      	str	r7, [sp, #20]
 8021900:	443a      	add	r2, r7
 8021902:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021906:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 802190a:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 802190e:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 8021912:	321c      	adds	r2, #28
 8021914:	eb02 02b8 	add.w	r2, r2, r8, ror #2
  R3(d, e, a, b, c, 42);
 8021918:	ea41 06b0 	orr.w	r6, r1, r0, ror #2
 802191c:	ea06 06b4 	and.w	r6, r6, r4, ror #2
 8021920:	ea01 07b0 	and.w	r7, r1, r0, ror #2
 8021924:	433e      	orrs	r6, r7
 8021926:	9f02      	ldr	r7, [sp, #8]
 8021928:	4663      	mov	r3, ip
 802192a:	405f      	eors	r7, r3
 802192c:	9b07      	ldr	r3, [sp, #28]
 802192e:	405f      	eors	r7, r3
 8021930:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021932:	405f      	eors	r7, r3
 8021934:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8021938:	9718      	str	r7, [sp, #96]	@ 0x60
 802193a:	970b      	str	r7, [sp, #44]	@ 0x2c
 802193c:	443e      	add	r6, r7
 802193e:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 8021942:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 8021946:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 802194a:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 802194e:	361c      	adds	r6, #28
 8021950:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R3(c, d, e, a, b, 43);
 8021954:	ea42 07b1 	orr.w	r7, r2, r1, ror #2
 8021958:	ea07 07b0 	and.w	r7, r7, r0, ror #2
 802195c:	ea02 05b1 	and.w	r5, r2, r1, ror #2
 8021960:	432f      	orrs	r7, r5
 8021962:	9d04      	ldr	r5, [sp, #16]
 8021964:	ea8b 0505 	eor.w	r5, fp, r5
 8021968:	9b08      	ldr	r3, [sp, #32]
 802196a:	405d      	eors	r5, r3
 802196c:	9b06      	ldr	r3, [sp, #24]
 802196e:	405d      	eors	r5, r3
 8021970:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8021974:	9519      	str	r5, [sp, #100]	@ 0x64
 8021976:	9506      	str	r5, [sp, #24]
 8021978:	442f      	add	r7, r5
 802197a:	eb07 67f6 	add.w	r7, r7, r6, ror #27
 802197e:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 8021982:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 8021986:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 802198a:	371c      	adds	r7, #28
 802198c:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R3(b, c, d, e, a, 44);
 8021990:	ea46 0cb2 	orr.w	ip, r6, r2, ror #2
 8021994:	ea0c 0cb1 	and.w	ip, ip, r1, ror #2
 8021998:	ea06 04b2 	and.w	r4, r6, r2, ror #2
 802199c:	ea4c 0c04 	orr.w	ip, ip, r4
 80219a0:	9c05      	ldr	r4, [sp, #20]
 80219a2:	ea8a 0404 	eor.w	r4, sl, r4
 80219a6:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80219a8:	406c      	eors	r4, r5
 80219aa:	9b07      	ldr	r3, [sp, #28]
 80219ac:	405c      	eors	r4, r3
 80219ae:	ea4f 74f4 	mov.w	r4, r4, ror #31
 80219b2:	941a      	str	r4, [sp, #104]	@ 0x68
 80219b4:	9407      	str	r4, [sp, #28]
 80219b6:	44a4      	add	ip, r4
 80219b8:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
 80219bc:	f10c 4c0f 	add.w	ip, ip, #2399141888	@ 0x8f000000
 80219c0:	f50c 1cdd 	add.w	ip, ip, #1810432	@ 0x1ba000
 80219c4:	f50c 5ce6 	add.w	ip, ip, #7360	@ 0x1cc0
 80219c8:	f10c 0c1c 	add.w	ip, ip, #28
 80219cc:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R3(a, b, c, d, e, 45);
 80219d0:	ea47 00b6 	orr.w	r0, r7, r6, ror #2
 80219d4:	ea00 00b2 	and.w	r0, r0, r2, ror #2
 80219d8:	ea07 04b6 	and.w	r4, r7, r6, ror #2
 80219dc:	4320      	orrs	r0, r4
 80219de:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80219e0:	ea89 0404 	eor.w	r4, r9, r4
 80219e4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80219e6:	406c      	eors	r4, r5
 80219e8:	9b08      	ldr	r3, [sp, #32]
 80219ea:	405c      	eors	r4, r3
 80219ec:	ea4f 74f4 	mov.w	r4, r4, ror #31
 80219f0:	941b      	str	r4, [sp, #108]	@ 0x6c
 80219f2:	9408      	str	r4, [sp, #32]
 80219f4:	4420      	add	r0, r4
 80219f6:	eb00 60fc 	add.w	r0, r0, ip, ror #27
 80219fa:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 80219fe:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 8021a02:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 8021a06:	301c      	adds	r0, #28
 8021a08:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(e, a, b, c, d, 46);
 8021a0c:	ea4c 05b7 	orr.w	r5, ip, r7, ror #2
 8021a10:	ea05 05b6 	and.w	r5, r5, r6, ror #2
 8021a14:	ea0c 01b7 	and.w	r1, ip, r7, ror #2
 8021a18:	430d      	orrs	r5, r1
 8021a1a:	9906      	ldr	r1, [sp, #24]
 8021a1c:	ea8e 0101 	eor.w	r1, lr, r1
 8021a20:	9c00      	ldr	r4, [sp, #0]
 8021a22:	4061      	eors	r1, r4
 8021a24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021a26:	4059      	eors	r1, r3
 8021a28:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8021a2c:	911c      	str	r1, [sp, #112]	@ 0x70
 8021a2e:	9109      	str	r1, [sp, #36]	@ 0x24
 8021a30:	440d      	add	r5, r1
 8021a32:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 8021a36:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 8021a3a:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 8021a3e:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 8021a42:	351c      	adds	r5, #28
 8021a44:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R3(d, e, a, b, c, 47);
 8021a48:	ea40 04bc 	orr.w	r4, r0, ip, ror #2
 8021a4c:	ea04 04b7 	and.w	r4, r4, r7, ror #2
 8021a50:	ea00 02bc 	and.w	r2, r0, ip, ror #2
 8021a54:	4314      	orrs	r4, r2
 8021a56:	9903      	ldr	r1, [sp, #12]
 8021a58:	9a07      	ldr	r2, [sp, #28]
 8021a5a:	404a      	eors	r2, r1
 8021a5c:	9901      	ldr	r1, [sp, #4]
 8021a5e:	404a      	eors	r2, r1
 8021a60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021a62:	405a      	eors	r2, r3
 8021a64:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8021a68:	921d      	str	r2, [sp, #116]	@ 0x74
 8021a6a:	920a      	str	r2, [sp, #40]	@ 0x28
 8021a6c:	4414      	add	r4, r2
 8021a6e:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8021a72:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 8021a76:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 8021a7a:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 8021a7e:	341c      	adds	r4, #28
 8021a80:	eb04 04b6 	add.w	r4, r4, r6, ror #2
  R3(c, d, e, a, b, 48);
 8021a84:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 8021a88:	ea01 01bc 	and.w	r1, r1, ip, ror #2
 8021a8c:	ea05 02b0 	and.w	r2, r5, r0, ror #2
 8021a90:	4311      	orrs	r1, r2
 8021a92:	9a04      	ldr	r2, [sp, #16]
 8021a94:	9e08      	ldr	r6, [sp, #32]
 8021a96:	4072      	eors	r2, r6
 8021a98:	9e02      	ldr	r6, [sp, #8]
 8021a9a:	4072      	eors	r2, r6
 8021a9c:	9b00      	ldr	r3, [sp, #0]
 8021a9e:	405a      	eors	r2, r3
 8021aa0:	ea4f 76f2 	mov.w	r6, r2, ror #31
 8021aa4:	960e      	str	r6, [sp, #56]	@ 0x38
 8021aa6:	9600      	str	r6, [sp, #0]
 8021aa8:	4431      	add	r1, r6
 8021aaa:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 8021aae:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 8021ab2:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 8021ab6:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 8021aba:	311c      	adds	r1, #28
 8021abc:	eb01 01b7 	add.w	r1, r1, r7, ror #2
  R3(b, c, d, e, a, 49);
 8021ac0:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 8021ac4:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 8021ac8:	ea04 06b5 	and.w	r6, r4, r5, ror #2
 8021acc:	4332      	orrs	r2, r6
 8021ace:	9f05      	ldr	r7, [sp, #20]
 8021ad0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8021ad2:	407e      	eors	r6, r7
 8021ad4:	ea8b 0606 	eor.w	r6, fp, r6
 8021ad8:	9b01      	ldr	r3, [sp, #4]
 8021ada:	405e      	eors	r6, r3
 8021adc:	ea4f 73f6 	mov.w	r3, r6, ror #31
 8021ae0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021ae2:	9301      	str	r3, [sp, #4]
 8021ae4:	441a      	add	r2, r3
 8021ae6:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021aea:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 8021aee:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 8021af2:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 8021af6:	321c      	adds	r2, #28
 8021af8:	eb02 02bc 	add.w	r2, r2, ip, ror #2
  R3(a, b, c, d, e, 50);
 8021afc:	ea41 06b4 	orr.w	r6, r1, r4, ror #2
 8021b00:	ea06 06b5 	and.w	r6, r6, r5, ror #2
 8021b04:	ea01 07b4 	and.w	r7, r1, r4, ror #2
 8021b08:	433e      	orrs	r6, r7
 8021b0a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8021b0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021b0e:	405f      	eors	r7, r3
 8021b10:	ea8a 0707 	eor.w	r7, sl, r7
 8021b14:	9b02      	ldr	r3, [sp, #8]
 8021b16:	405f      	eors	r7, r3
 8021b18:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8021b1c:	9710      	str	r7, [sp, #64]	@ 0x40
 8021b1e:	9702      	str	r7, [sp, #8]
 8021b20:	443e      	add	r6, r7
 8021b22:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 8021b26:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 8021b2a:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 8021b2e:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 8021b32:	361c      	adds	r6, #28
 8021b34:	eb06 06b0 	add.w	r6, r6, r0, ror #2
  R3(e, a, b, c, d, 51);
 8021b38:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 8021b3c:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 8021b40:	ea02 07b1 	and.w	r7, r2, r1, ror #2
 8021b44:	4338      	orrs	r0, r7
 8021b46:	9b06      	ldr	r3, [sp, #24]
 8021b48:	9f00      	ldr	r7, [sp, #0]
 8021b4a:	405f      	eors	r7, r3
 8021b4c:	ea89 0707 	eor.w	r7, r9, r7
 8021b50:	ea8b 0b07 	eor.w	fp, fp, r7
 8021b54:	ea4f 7cfb 	mov.w	ip, fp, ror #31
 8021b58:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 8021b5c:	4460      	add	r0, ip
 8021b5e:	eb00 60f6 	add.w	r0, r0, r6, ror #27
 8021b62:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 8021b66:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 8021b6a:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 8021b6e:	301c      	adds	r0, #28
 8021b70:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(d, e, a, b, c, 52);
 8021b74:	ea46 05b2 	orr.w	r5, r6, r2, ror #2
 8021b78:	ea05 05b1 	and.w	r5, r5, r1, ror #2
 8021b7c:	ea06 07b2 	and.w	r7, r6, r2, ror #2
 8021b80:	433d      	orrs	r5, r7
 8021b82:	9f07      	ldr	r7, [sp, #28]
 8021b84:	9b01      	ldr	r3, [sp, #4]
 8021b86:	405f      	eors	r7, r3
 8021b88:	ea8e 0707 	eor.w	r7, lr, r7
 8021b8c:	ea8a 0a07 	eor.w	sl, sl, r7
 8021b90:	ea4f 78fa 	mov.w	r8, sl, ror #31
 8021b94:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8021b98:	4445      	add	r5, r8
 8021b9a:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 8021b9e:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 8021ba2:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 8021ba6:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 8021baa:	351c      	adds	r5, #28
 8021bac:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R3(c, d, e, a, b, 53);
 8021bb0:	ea40 04b6 	orr.w	r4, r0, r6, ror #2
 8021bb4:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 8021bb8:	ea00 07b6 	and.w	r7, r0, r6, ror #2
 8021bbc:	433c      	orrs	r4, r7
 8021bbe:	9b08      	ldr	r3, [sp, #32]
 8021bc0:	9f02      	ldr	r7, [sp, #8]
 8021bc2:	405f      	eors	r7, r3
 8021bc4:	9b03      	ldr	r3, [sp, #12]
 8021bc6:	405f      	eors	r7, r3
 8021bc8:	ea89 0707 	eor.w	r7, r9, r7
 8021bcc:	ea4f 79f7 	mov.w	r9, r7, ror #31
 8021bd0:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 8021bd4:	444c      	add	r4, r9
 8021bd6:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8021bda:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 8021bde:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 8021be2:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 8021be6:	341c      	adds	r4, #28
 8021be8:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R3(b, c, d, e, a, 54);
 8021bec:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 8021bf0:	ea01 01b6 	and.w	r1, r1, r6, ror #2
 8021bf4:	ea05 07b0 	and.w	r7, r5, r0, ror #2
 8021bf8:	4339      	orrs	r1, r7
 8021bfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021bfc:	ea83 070c 	eor.w	r7, r3, ip
 8021c00:	9b04      	ldr	r3, [sp, #16]
 8021c02:	405f      	eors	r7, r3
 8021c04:	ea8e 0707 	eor.w	r7, lr, r7
 8021c08:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8021c0c:	9714      	str	r7, [sp, #80]	@ 0x50
 8021c0e:	970c      	str	r7, [sp, #48]	@ 0x30
 8021c10:	4439      	add	r1, r7
 8021c12:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 8021c16:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 8021c1a:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 8021c1e:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 8021c22:	311c      	adds	r1, #28
 8021c24:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(a, b, c, d, e, 55);
 8021c28:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 8021c2c:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 8021c30:	ea04 07b5 	and.w	r7, r4, r5, ror #2
 8021c34:	433a      	orrs	r2, r7
 8021c36:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8021c38:	ea87 0708 	eor.w	r7, r7, r8
 8021c3c:	9b05      	ldr	r3, [sp, #20]
 8021c3e:	405f      	eors	r7, r3
 8021c40:	9b03      	ldr	r3, [sp, #12]
 8021c42:	405f      	eors	r7, r3
 8021c44:	ea4f 7bf7 	mov.w	fp, r7, ror #31
 8021c48:	f8cd b054 	str.w	fp, [sp, #84]	@ 0x54
 8021c4c:	445a      	add	r2, fp
 8021c4e:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021c52:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 8021c56:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 8021c5a:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 8021c5e:	321c      	adds	r2, #28
 8021c60:	eb02 02b6 	add.w	r2, r2, r6, ror #2
  R3(e, a, b, c, d, 56);
 8021c64:	ea41 07b4 	orr.w	r7, r1, r4, ror #2
 8021c68:	ea07 07b5 	and.w	r7, r7, r5, ror #2
 8021c6c:	ea01 06b4 	and.w	r6, r1, r4, ror #2
 8021c70:	4337      	orrs	r7, r6
 8021c72:	9e00      	ldr	r6, [sp, #0]
 8021c74:	ea86 0609 	eor.w	r6, r6, r9
 8021c78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021c7a:	405e      	eors	r6, r3
 8021c7c:	9b04      	ldr	r3, [sp, #16]
 8021c7e:	405e      	eors	r6, r3
 8021c80:	ea4f 7af6 	mov.w	sl, r6, ror #31
 8021c84:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
 8021c88:	4457      	add	r7, sl
 8021c8a:	eb07 67f2 	add.w	r7, r7, r2, ror #27
 8021c8e:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 8021c92:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 8021c96:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 8021c9a:	371c      	adds	r7, #28
 8021c9c:	eb07 07b0 	add.w	r7, r7, r0, ror #2
  R3(d, e, a, b, c, 57);
 8021ca0:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 8021ca4:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 8021ca8:	ea02 06b1 	and.w	r6, r2, r1, ror #2
 8021cac:	4330      	orrs	r0, r6
 8021cae:	9e01      	ldr	r6, [sp, #4]
 8021cb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021cb2:	405e      	eors	r6, r3
 8021cb4:	9b06      	ldr	r3, [sp, #24]
 8021cb6:	405e      	eors	r6, r3
 8021cb8:	9b05      	ldr	r3, [sp, #20]
 8021cba:	405e      	eors	r6, r3
 8021cbc:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8021cc0:	9617      	str	r6, [sp, #92]	@ 0x5c
 8021cc2:	9603      	str	r6, [sp, #12]
 8021cc4:	4430      	add	r0, r6
 8021cc6:	eb00 60f7 	add.w	r0, r0, r7, ror #27
 8021cca:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 8021cce:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 8021cd2:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 8021cd6:	301c      	adds	r0, #28
 8021cd8:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(c, d, e, a, b, 58);
 8021cdc:	ea47 06b2 	orr.w	r6, r7, r2, ror #2
 8021ce0:	ea06 06b1 	and.w	r6, r6, r1, ror #2
 8021ce4:	ea07 05b2 	and.w	r5, r7, r2, ror #2
 8021ce8:	432e      	orrs	r6, r5
 8021cea:	9d02      	ldr	r5, [sp, #8]
 8021cec:	ea85 050b 	eor.w	r5, r5, fp
 8021cf0:	9b07      	ldr	r3, [sp, #28]
 8021cf2:	405d      	eors	r5, r3
 8021cf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021cf6:	405d      	eors	r5, r3
 8021cf8:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8021cfc:	9518      	str	r5, [sp, #96]	@ 0x60
 8021cfe:	9504      	str	r5, [sp, #16]
 8021d00:	442e      	add	r6, r5
 8021d02:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 8021d06:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 8021d0a:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 8021d0e:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 8021d12:	361c      	adds	r6, #28
 8021d14:	eb06 06b4 	add.w	r6, r6, r4, ror #2
  R3(b, c, d, e, a, 59);
 8021d18:	ea40 04b7 	orr.w	r4, r0, r7, ror #2
 8021d1c:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 8021d20:	ea00 05b7 	and.w	r5, r0, r7, ror #2
 8021d24:	432c      	orrs	r4, r5
 8021d26:	ea8c 050a 	eor.w	r5, ip, sl
 8021d2a:	9b08      	ldr	r3, [sp, #32]
 8021d2c:	405d      	eors	r5, r3
 8021d2e:	9b06      	ldr	r3, [sp, #24]
 8021d30:	405d      	eors	r5, r3
 8021d32:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8021d36:	9519      	str	r5, [sp, #100]	@ 0x64
 8021d38:	9505      	str	r5, [sp, #20]
 8021d3a:	442c      	add	r4, r5
 8021d3c:	eb04 64f6 	add.w	r4, r4, r6, ror #27
 8021d40:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 8021d44:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 8021d48:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 8021d4c:	341c      	adds	r4, #28
 8021d4e:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R4(a, b, c, d, e, 60);
 8021d52:	ea86 01b0 	eor.w	r1, r6, r0, ror #2
 8021d56:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
 8021d5a:	9d03      	ldr	r5, [sp, #12]
 8021d5c:	ea88 0305 	eor.w	r3, r8, r5
 8021d60:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021d62:	406b      	eors	r3, r5
 8021d64:	9d07      	ldr	r5, [sp, #28]
 8021d66:	406b      	eors	r3, r5
 8021d68:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8021d6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8021d6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021d70:	4419      	add	r1, r3
 8021d72:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 8021d76:	f8df e3fc 	ldr.w	lr, [pc, #1020]	@ 8022174 <mg_sha1_transform+0xf84>
 8021d7a:	4471      	add	r1, lr
 8021d7c:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R4(e, a, b, c, d, 61);
 8021d80:	ea84 02b6 	eor.w	r2, r4, r6, ror #2
 8021d84:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8021d88:	9b04      	ldr	r3, [sp, #16]
 8021d8a:	ea89 0303 	eor.w	r3, r9, r3
 8021d8e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8021d90:	406b      	eors	r3, r5
 8021d92:	9d08      	ldr	r5, [sp, #32]
 8021d94:	406b      	eors	r3, r5
 8021d96:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8021d9a:	931b      	str	r3, [sp, #108]	@ 0x6c
 8021d9c:	9306      	str	r3, [sp, #24]
 8021d9e:	441a      	add	r2, r3
 8021da0:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021da4:	4472      	add	r2, lr
 8021da6:	eb02 02b7 	add.w	r2, r2, r7, ror #2
  R4(d, e, a, b, c, 62);
 8021daa:	ea81 03b4 	eor.w	r3, r1, r4, ror #2
 8021dae:	ea83 03b6 	eor.w	r3, r3, r6, ror #2
 8021db2:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8021db4:	9d05      	ldr	r5, [sp, #20]
 8021db6:	406f      	eors	r7, r5
 8021db8:	9d00      	ldr	r5, [sp, #0]
 8021dba:	406f      	eors	r7, r5
 8021dbc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021dbe:	406f      	eors	r7, r5
 8021dc0:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8021dc4:	971c      	str	r7, [sp, #112]	@ 0x70
 8021dc6:	9707      	str	r7, [sp, #28]
 8021dc8:	443b      	add	r3, r7
 8021dca:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 8021dce:	4473      	add	r3, lr
 8021dd0:	eb03 03b0 	add.w	r3, r3, r0, ror #2
  R4(c, d, e, a, b, 63);
 8021dd4:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 8021dd8:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
 8021ddc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8021dde:	ea8b 0707 	eor.w	r7, fp, r7
 8021de2:	9d01      	ldr	r5, [sp, #4]
 8021de4:	406f      	eors	r7, r5
 8021de6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8021de8:	406f      	eors	r7, r5
 8021dea:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8021dee:	971d      	str	r7, [sp, #116]	@ 0x74
 8021df0:	9708      	str	r7, [sp, #32]
 8021df2:	4438      	add	r0, r7
 8021df4:	eb00 60f3 	add.w	r0, r0, r3, ror #27
 8021df8:	4470      	add	r0, lr
 8021dfa:	eb00 00b6 	add.w	r0, r0, r6, ror #2
  R4(b, c, d, e, a, 64);
 8021dfe:	ea83 07b2 	eor.w	r7, r3, r2, ror #2
 8021e02:	ea87 07b1 	eor.w	r7, r7, r1, ror #2
 8021e06:	9e06      	ldr	r6, [sp, #24]
 8021e08:	ea8a 0606 	eor.w	r6, sl, r6
 8021e0c:	9d02      	ldr	r5, [sp, #8]
 8021e0e:	406e      	eors	r6, r5
 8021e10:	9d00      	ldr	r5, [sp, #0]
 8021e12:	406e      	eors	r6, r5
 8021e14:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8021e18:	960e      	str	r6, [sp, #56]	@ 0x38
 8021e1a:	9600      	str	r6, [sp, #0]
 8021e1c:	4437      	add	r7, r6
 8021e1e:	eb07 67f0 	add.w	r7, r7, r0, ror #27
 8021e22:	4477      	add	r7, lr
 8021e24:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R4(a, b, c, d, e, 65);
 8021e28:	ea80 06b3 	eor.w	r6, r0, r3, ror #2
 8021e2c:	ea86 06b2 	eor.w	r6, r6, r2, ror #2
 8021e30:	9c03      	ldr	r4, [sp, #12]
 8021e32:	9d07      	ldr	r5, [sp, #28]
 8021e34:	406c      	eors	r4, r5
 8021e36:	ea8c 0404 	eor.w	r4, ip, r4
 8021e3a:	9d01      	ldr	r5, [sp, #4]
 8021e3c:	406c      	eors	r4, r5
 8021e3e:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8021e42:	940f      	str	r4, [sp, #60]	@ 0x3c
 8021e44:	9401      	str	r4, [sp, #4]
 8021e46:	4426      	add	r6, r4
 8021e48:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8021e4c:	4476      	add	r6, lr
 8021e4e:	eb06 06b1 	add.w	r6, r6, r1, ror #2
  R4(e, a, b, c, d, 66);
 8021e52:	ea87 05b0 	eor.w	r5, r7, r0, ror #2
 8021e56:	ea85 05b3 	eor.w	r5, r5, r3, ror #2
 8021e5a:	9904      	ldr	r1, [sp, #16]
 8021e5c:	9c08      	ldr	r4, [sp, #32]
 8021e5e:	4061      	eors	r1, r4
 8021e60:	ea88 0101 	eor.w	r1, r8, r1
 8021e64:	9c02      	ldr	r4, [sp, #8]
 8021e66:	4061      	eors	r1, r4
 8021e68:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8021e6c:	9110      	str	r1, [sp, #64]	@ 0x40
 8021e6e:	440d      	add	r5, r1
 8021e70:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 8021e74:	4475      	add	r5, lr
 8021e76:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R4(d, e, a, b, c, 67);
 8021e7a:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 8021e7e:	ea8e 0eb0 	eor.w	lr, lr, r0, ror #2
 8021e82:	9a05      	ldr	r2, [sp, #20]
 8021e84:	9c00      	ldr	r4, [sp, #0]
 8021e86:	4062      	eors	r2, r4
 8021e88:	ea89 0202 	eor.w	r2, r9, r2
 8021e8c:	ea8c 0202 	eor.w	r2, ip, r2
 8021e90:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8021e94:	9211      	str	r2, [sp, #68]	@ 0x44
 8021e96:	4496      	add	lr, r2
 8021e98:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 8021e9c:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 8021ea0:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 8021ea4:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 8021ea8:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 8021eac:	eb0e 0eb3 	add.w	lr, lr, r3, ror #2
  R4(c, d, e, a, b, 68);
 8021eb0:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 8021eb4:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8021eb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021eba:	9c01      	ldr	r4, [sp, #4]
 8021ebc:	4063      	eors	r3, r4
 8021ebe:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021ec0:	4063      	eors	r3, r4
 8021ec2:	ea88 0303 	eor.w	r3, r8, r3
 8021ec6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8021eca:	9312      	str	r3, [sp, #72]	@ 0x48
 8021ecc:	449c      	add	ip, r3
 8021ece:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 8021ed2:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 8021ed6:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 8021eda:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 8021ede:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 8021ee2:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R4(b, c, d, e, a, 69);
 8021ee6:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 8021eea:	ea88 08b6 	eor.w	r8, r8, r6, ror #2
 8021eee:	9806      	ldr	r0, [sp, #24]
 8021ef0:	4048      	eors	r0, r1
 8021ef2:	ea8b 0000 	eor.w	r0, fp, r0
 8021ef6:	ea89 0000 	eor.w	r0, r9, r0
 8021efa:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8021efe:	9013      	str	r0, [sp, #76]	@ 0x4c
 8021f00:	4480      	add	r8, r0
 8021f02:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 8021f06:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 8021f0a:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 8021f0e:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 8021f12:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 8021f16:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(a, b, c, d, e, 70);
 8021f1a:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 8021f1e:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 8021f22:	9702      	str	r7, [sp, #8]
 8021f24:	9f07      	ldr	r7, [sp, #28]
 8021f26:	ea87 0902 	eor.w	r9, r7, r2
 8021f2a:	ea8a 0909 	eor.w	r9, sl, r9
 8021f2e:	ea84 0909 	eor.w	r9, r4, r9
 8021f32:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8021f36:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 8021f3a:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8021f3e:	9c02      	ldr	r4, [sp, #8]
 8021f40:	444c      	add	r4, r9
 8021f42:	eb04 67f8 	add.w	r7, r4, r8, ror #27
 8021f46:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 8021f4a:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 8021f4e:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 8021f52:	3756      	adds	r7, #86	@ 0x56
 8021f54:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(e, a, b, c, d, 71);
 8021f58:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 8021f5c:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 8021f60:	9c08      	ldr	r4, [sp, #32]
 8021f62:	ea84 0903 	eor.w	r9, r4, r3
 8021f66:	9c03      	ldr	r4, [sp, #12]
 8021f68:	ea84 0909 	eor.w	r9, r4, r9
 8021f6c:	ea8b 0909 	eor.w	r9, fp, r9
 8021f70:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8021f74:	f8cd 9054 	str.w	r9, [sp, #84]	@ 0x54
 8021f78:	444e      	add	r6, r9
 8021f7a:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8021f7e:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 8021f82:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 8021f86:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 8021f8a:	3656      	adds	r6, #86	@ 0x56
 8021f8c:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(d, e, a, b, c, 72);
 8021f90:	ea87 05b8 	eor.w	r5, r7, r8, ror #2
 8021f94:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
 8021f98:	9c00      	ldr	r4, [sp, #0]
 8021f9a:	ea84 0b00 	eor.w	fp, r4, r0
 8021f9e:	9c04      	ldr	r4, [sp, #16]
 8021fa0:	ea84 0b0b 	eor.w	fp, r4, fp
 8021fa4:	ea8a 0b0b 	eor.w	fp, sl, fp
 8021fa8:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021fac:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 8021fb0:	445d      	add	r5, fp
 8021fb2:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 8021fb6:	f105 454a 	add.w	r5, r5, #3388997632	@ 0xca000000
 8021fba:	f505 05c5 	add.w	r5, r5, #6455296	@ 0x628000
 8021fbe:	f505 4583 	add.w	r5, r5, #16768	@ 0x4180
 8021fc2:	3556      	adds	r5, #86	@ 0x56
 8021fc4:	eb05 05be 	add.w	r5, r5, lr, ror #2
  R4(c, d, e, a, b, 73);
 8021fc8:	9602      	str	r6, [sp, #8]
 8021fca:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 8021fce:	ea8e 0eb8 	eor.w	lr, lr, r8, ror #2
 8021fd2:	9c01      	ldr	r4, [sp, #4]
 8021fd4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8021fd6:	ea84 0a06 	eor.w	sl, r4, r6
 8021fda:	9c05      	ldr	r4, [sp, #20]
 8021fdc:	ea84 0a0a 	eor.w	sl, r4, sl
 8021fe0:	9c03      	ldr	r4, [sp, #12]
 8021fe2:	ea84 0a0a 	eor.w	sl, r4, sl
 8021fe6:	ea4f 7afa 	mov.w	sl, sl, ror #31
 8021fea:	f8cd a05c 	str.w	sl, [sp, #92]	@ 0x5c
 8021fee:	44d6      	add	lr, sl
 8021ff0:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 8021ff4:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 8021ff8:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 8021ffc:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 8022000:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 8022004:	eb0e 0ebc 	add.w	lr, lr, ip, ror #2
  R4(b, c, d, e, a, 74);
 8022008:	9e02      	ldr	r6, [sp, #8]
 802200a:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 802200e:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8022012:	ea81 0109 	eor.w	r1, r1, r9
 8022016:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8022018:	4071      	eors	r1, r6
 802201a:	9c04      	ldr	r4, [sp, #16]
 802201c:	4061      	eors	r1, r4
 802201e:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8022022:	9118      	str	r1, [sp, #96]	@ 0x60
 8022024:	448c      	add	ip, r1
 8022026:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 802202a:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 802202e:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 8022032:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 8022036:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 802203a:	eb0c 0cb8 	add.w	ip, ip, r8, ror #2
  R4(a, b, c, d, e, 75);
 802203e:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 8022042:	9c02      	ldr	r4, [sp, #8]
 8022044:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
 8022048:	ea82 020b 	eor.w	r2, r2, fp
 802204c:	9c06      	ldr	r4, [sp, #24]
 802204e:	4062      	eors	r2, r4
 8022050:	9c05      	ldr	r4, [sp, #20]
 8022052:	4062      	eors	r2, r4
 8022054:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022058:	9219      	str	r2, [sp, #100]	@ 0x64
 802205a:	4490      	add	r8, r2
 802205c:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 8022060:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 8022064:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 8022068:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 802206c:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 8022070:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(e, a, b, c, d, 76);
 8022074:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 8022078:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 802207c:	ea83 030a 	eor.w	r3, r3, sl
 8022080:	9c07      	ldr	r4, [sp, #28]
 8022082:	4063      	eors	r3, r4
 8022084:	4073      	eors	r3, r6
 8022086:	ea4f 73f3 	mov.w	r3, r3, ror #31
 802208a:	931a      	str	r3, [sp, #104]	@ 0x68
 802208c:	441f      	add	r7, r3
 802208e:	eb07 67f8 	add.w	r7, r7, r8, ror #27
 8022092:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 8022096:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 802209a:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 802209e:	3756      	adds	r7, #86	@ 0x56
 80220a0:	9e02      	ldr	r6, [sp, #8]
 80220a2:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(d, e, a, b, c, 77);
 80220a6:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 80220aa:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 80220ae:	4048      	eors	r0, r1
 80220b0:	9908      	ldr	r1, [sp, #32]
 80220b2:	4048      	eors	r0, r1
 80220b4:	9c06      	ldr	r4, [sp, #24]
 80220b6:	4060      	eors	r0, r4
 80220b8:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80220bc:	901b      	str	r0, [sp, #108]	@ 0x6c
 80220be:	4406      	add	r6, r0
 80220c0:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 80220c4:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 80220c8:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 80220cc:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 80220d0:	3656      	adds	r6, #86	@ 0x56
 80220d2:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(c, d, e, a, b, 78);
 80220d6:	ea87 01b8 	eor.w	r1, r7, r8, ror #2
 80220da:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 80220de:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80220e0:	406a      	eors	r2, r5
 80220e2:	9d00      	ldr	r5, [sp, #0]
 80220e4:	406a      	eors	r2, r5
 80220e6:	9c07      	ldr	r4, [sp, #28]
 80220e8:	4062      	eors	r2, r4
 80220ea:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80220ee:	921c      	str	r2, [sp, #112]	@ 0x70
 80220f0:	4411      	add	r1, r2
 80220f2:	eb01 61f6 	add.w	r1, r1, r6, ror #27
 80220f6:	f101 414a 	add.w	r1, r1, #3388997632	@ 0xca000000
 80220fa:	f501 01c5 	add.w	r1, r1, #6455296	@ 0x628000
 80220fe:	f501 4183 	add.w	r1, r1, #16768	@ 0x4180
 8022102:	3156      	adds	r1, #86	@ 0x56
 8022104:	eb01 01be 	add.w	r1, r1, lr, ror #2
  R4(b, c, d, e, a, 79);
 8022108:	ea86 02b7 	eor.w	r2, r6, r7, ror #2
 802210c:	ea82 02b8 	eor.w	r2, r2, r8, ror #2
 8022110:	ea89 0903 	eor.w	r9, r9, r3
 8022114:	9b01      	ldr	r3, [sp, #4]
 8022116:	ea83 0909 	eor.w	r9, r3, r9
 802211a:	9c08      	ldr	r4, [sp, #32]
 802211c:	ea84 0309 	eor.w	r3, r4, r9
 8022120:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022124:	931d      	str	r3, [sp, #116]	@ 0x74
 8022126:	4413      	add	r3, r2
 8022128:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 802212c:	f103 434a 	add.w	r3, r3, #3388997632	@ 0xca000000
 8022130:	f503 03c5 	add.w	r3, r3, #6455296	@ 0x628000
 8022134:	f503 4383 	add.w	r3, r3, #16768	@ 0x4180
 8022138:	3356      	adds	r3, #86	@ 0x56
 802213a:	eb03 03bc 	add.w	r3, r3, ip, ror #2
  state[0] += a;
 802213e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022140:	6802      	ldr	r2, [r0, #0]
 8022142:	441a      	add	r2, r3
 8022144:	6002      	str	r2, [r0, #0]
  state[1] += b;
 8022146:	6843      	ldr	r3, [r0, #4]
 8022148:	440b      	add	r3, r1
 802214a:	6043      	str	r3, [r0, #4]
  state[2] += c;
 802214c:	6883      	ldr	r3, [r0, #8]
 802214e:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 8022152:	6083      	str	r3, [r0, #8]
  state[3] += d;
 8022154:	68c3      	ldr	r3, [r0, #12]
 8022156:	eb03 03b7 	add.w	r3, r3, r7, ror #2
 802215a:	60c3      	str	r3, [r0, #12]
  state[4] += e;
 802215c:	6903      	ldr	r3, [r0, #16]
 802215e:	eb03 03b8 	add.w	r3, r3, r8, ror #2
 8022162:	6103      	str	r3, [r0, #16]
  memset(block, 0, sizeof(block));
 8022164:	2240      	movs	r2, #64	@ 0x40
 8022166:	2100      	movs	r1, #0
 8022168:	a80e      	add	r0, sp, #56	@ 0x38
 802216a:	f00a f889 	bl	802c280 <memset>
}
 802216e:	b01f      	add	sp, #124	@ 0x7c
 8022170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022174:	ca62c1d6 	.word	0xca62c1d6

08022178 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8022178:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 802217a:	fb01 f400 	mul.w	r4, r1, r0
 802217e:	4620      	mov	r0, r4
 8022180:	f7f8 f8f2 	bl	801a368 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8022184:	4605      	mov	r5, r0
 8022186:	b118      	cbz	r0, 8022190 <mg_calloc+0x18>
 8022188:	4622      	mov	r2, r4
 802218a:	2100      	movs	r1, #0
 802218c:	f00a f878 	bl	802c280 <memset>
}
 8022190:	4628      	mov	r0, r5
 8022192:	bd38      	pop	{r3, r4, r5, pc}

08022194 <mg_print_esc>:
size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 8022194:	b570      	push	{r4, r5, r6, lr}
 8022196:	4605      	mov	r5, r0
 8022198:	460e      	mov	r6, r1
  size_t len = (size_t) va_arg(*ap, int);
 802219a:	6811      	ldr	r1, [r2, #0]
 802219c:	1d0c      	adds	r4, r1, #4
 802219e:	6014      	str	r4, [r2, #0]
 80221a0:	680b      	ldr	r3, [r1, #0]
  char *p = va_arg(*ap, char *);
 80221a2:	f101 0408 	add.w	r4, r1, #8
 80221a6:	6014      	str	r4, [r2, #0]
 80221a8:	684c      	ldr	r4, [r1, #4]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 80221aa:	b923      	cbnz	r3, 80221b6 <mg_print_esc+0x22>
 80221ac:	b11c      	cbz	r4, 80221b6 <mg_print_esc+0x22>
 80221ae:	4620      	mov	r0, r4
 80221b0:	f7ee f876 	bl	80102a0 <strlen>
 80221b4:	4603      	mov	r3, r0
  return qcpy(out, arg, p, len);
 80221b6:	4622      	mov	r2, r4
 80221b8:	4631      	mov	r1, r6
 80221ba:	4628      	mov	r0, r5
 80221bc:	f7fe fd69 	bl	8020c92 <qcpy>
}
 80221c0:	bd70      	pop	{r4, r5, r6, pc}

080221c2 <getpeer>:
                                     bool lsn) {
 80221c2:	b570      	push	{r4, r5, r6, lr}
 80221c4:	460d      	mov	r5, r1
 80221c6:	4616      	mov	r6, r2
  for (c = mgr->conns; c != NULL; c = c->next) {
 80221c8:	6804      	ldr	r4, [r0, #0]
 80221ca:	e000      	b.n	80221ce <getpeer+0xc>
 80221cc:	6824      	ldr	r4, [r4, #0]
 80221ce:	b364      	cbz	r4, 802222a <getpeer+0x68>
    if (c->is_arplooking && pkt->arp &&
 80221d0:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80221d4:	f013 0f10 	tst.w	r3, #16
 80221d8:	d008      	beq.n	80221ec <getpeer+0x2a>
 80221da:	69a8      	ldr	r0, [r5, #24]
 80221dc:	b130      	cbz	r0, 80221ec <getpeer+0x2a>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 80221de:	2204      	movs	r2, #4
 80221e0:	f104 011c 	add.w	r1, r4, #28
 80221e4:	300e      	adds	r0, #14
 80221e6:	f009 ffb7 	bl	802c158 <memcmp>
    if (c->is_arplooking && pkt->arp &&
 80221ea:	b1f0      	cbz	r0, 802222a <getpeer+0x68>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 80221ec:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80221f0:	f013 0301 	ands.w	r3, r3, #1
 80221f4:	d005      	beq.n	8022202 <getpeer+0x40>
 80221f6:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 80221f8:	b11a      	cbz	r2, 8022202 <getpeer+0x40>
 80221fa:	8b21      	ldrh	r1, [r4, #24]
 80221fc:	8852      	ldrh	r2, [r2, #2]
 80221fe:	4291      	cmp	r1, r2
 8022200:	d013      	beq.n	802222a <getpeer+0x68>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8022202:	2b00      	cmp	r3, #0
 8022204:	d1e2      	bne.n	80221cc <getpeer+0xa>
 8022206:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8022208:	2b00      	cmp	r3, #0
 802220a:	d0df      	beq.n	80221cc <getpeer+0xa>
 802220c:	8b21      	ldrh	r1, [r4, #24]
 802220e:	885a      	ldrh	r2, [r3, #2]
 8022210:	4291      	cmp	r1, r2
 8022212:	d1db      	bne.n	80221cc <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8022214:	f894 20ac 	ldrb.w	r2, [r4, #172]	@ 0xac
 8022218:	f002 0201 	and.w	r2, r2, #1
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 802221c:	42b2      	cmp	r2, r6
 802221e:	d1d5      	bne.n	80221cc <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8022220:	b91e      	cbnz	r6, 802222a <getpeer+0x68>
 8022222:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8022224:	881b      	ldrh	r3, [r3, #0]
 8022226:	429a      	cmp	r2, r3
 8022228:	d1d0      	bne.n	80221cc <getpeer+0xa>
}
 802222a:	4620      	mov	r0, r4
 802222c:	bd70      	pop	{r4, r5, r6, pc}

0802222e <mg_pfn_stdout>:
void mg_pfn_stdout(char c, void *param) {
 802222e:	b508      	push	{r3, lr}
  putchar(c);
 8022230:	f009 fa80 	bl	802b734 <putchar>
}
 8022234:	bd08      	pop	{r3, pc}

08022236 <mg_queue_read_len>:
  MG_MEMORY_BARRIER();
 8022236:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 802223a:	6802      	ldr	r2, [r0, #0]
 802223c:	6883      	ldr	r3, [r0, #8]
}
 802223e:	58d0      	ldr	r0, [r2, r3]
 8022240:	4770      	bx	lr

08022242 <mg_base64_decode>:
size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 8022242:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022246:	4691      	mov	r9, r2
 8022248:	469b      	mov	fp, r3
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 802224a:	4604      	mov	r4, r0
 802224c:	b150      	cbz	r0, 8022264 <mg_base64_decode+0x22>
 802224e:	eb00 0a01 	add.w	sl, r0, r1
  if (dl < n / 4 * 3 + 1) goto fail;
 8022252:	0889      	lsrs	r1, r1, #2
 8022254:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022258:	3101      	adds	r1, #1
 802225a:	4559      	cmp	r1, fp
 802225c:	d847      	bhi.n	80222ee <mg_base64_decode+0xac>
  size_t len = 0;
 802225e:	f04f 0800 	mov.w	r8, #0
 8022262:	e003      	b.n	802226c <mg_base64_decode+0x2a>
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8022264:	4682      	mov	sl, r0
 8022266:	e7f4      	b.n	8022252 <mg_base64_decode+0x10>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8022268:	4690      	mov	r8, r2
    src += 4;
 802226a:	3404      	adds	r4, #4
  while (src != NULL && src + 3 < end) {
 802226c:	2c00      	cmp	r4, #0
 802226e:	d03a      	beq.n	80222e6 <mg_base64_decode+0xa4>
 8022270:	1ce3      	adds	r3, r4, #3
 8022272:	4553      	cmp	r3, sl
 8022274:	d237      	bcs.n	80222e6 <mg_base64_decode+0xa4>
    int a = mg_base64_decode_single(src[0]),
 8022276:	7820      	ldrb	r0, [r4, #0]
 8022278:	f7fd f914 	bl	801f4a4 <mg_base64_decode_single>
 802227c:	4606      	mov	r6, r0
        b = mg_base64_decode_single(src[1]),
 802227e:	7860      	ldrb	r0, [r4, #1]
 8022280:	f7fd f910 	bl	801f4a4 <mg_base64_decode_single>
 8022284:	4605      	mov	r5, r0
        c = mg_base64_decode_single(src[2]),
 8022286:	78a0      	ldrb	r0, [r4, #2]
 8022288:	f7fd f90c 	bl	801f4a4 <mg_base64_decode_single>
 802228c:	4607      	mov	r7, r0
        d = mg_base64_decode_single(src[3]);
 802228e:	78e0      	ldrb	r0, [r4, #3]
 8022290:	f7fd f908 	bl	801f4a4 <mg_base64_decode_single>
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 8022294:	2e40      	cmp	r6, #64	@ 0x40
 8022296:	d02a      	beq.n	80222ee <mg_base64_decode+0xac>
 8022298:	2e00      	cmp	r6, #0
 802229a:	db28      	blt.n	80222ee <mg_base64_decode+0xac>
 802229c:	2d40      	cmp	r5, #64	@ 0x40
 802229e:	d026      	beq.n	80222ee <mg_base64_decode+0xac>
 80222a0:	2d00      	cmp	r5, #0
 80222a2:	db24      	blt.n	80222ee <mg_base64_decode+0xac>
 80222a4:	2f00      	cmp	r7, #0
 80222a6:	db22      	blt.n	80222ee <mg_base64_decode+0xac>
 80222a8:	2800      	cmp	r0, #0
 80222aa:	db20      	blt.n	80222ee <mg_base64_decode+0xac>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 80222ac:	112b      	asrs	r3, r5, #4
 80222ae:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
 80222b2:	f108 0201 	add.w	r2, r8, #1
 80222b6:	f809 3008 	strb.w	r3, [r9, r8]
    if (src[2] != '=') {
 80222ba:	78a3      	ldrb	r3, [r4, #2]
 80222bc:	2b3d      	cmp	r3, #61	@ 0x3d
 80222be:	d0d3      	beq.n	8022268 <mg_base64_decode+0x26>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 80222c0:	10bb      	asrs	r3, r7, #2
 80222c2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80222c6:	f108 0102 	add.w	r1, r8, #2
 80222ca:	f809 3002 	strb.w	r3, [r9, r2]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 80222ce:	78e3      	ldrb	r3, [r4, #3]
 80222d0:	2b3d      	cmp	r3, #61	@ 0x3d
 80222d2:	d006      	beq.n	80222e2 <mg_base64_decode+0xa0>
 80222d4:	ea40 1087 	orr.w	r0, r0, r7, lsl #6
 80222d8:	f108 0803 	add.w	r8, r8, #3
 80222dc:	f809 0001 	strb.w	r0, [r9, r1]
 80222e0:	e7c3      	b.n	802226a <mg_base64_decode+0x28>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 80222e2:	4688      	mov	r8, r1
 80222e4:	e7c1      	b.n	802226a <mg_base64_decode+0x28>
  dst[len] = '\0';
 80222e6:	2300      	movs	r3, #0
 80222e8:	f809 3008 	strb.w	r3, [r9, r8]
  return len;
 80222ec:	e006      	b.n	80222fc <mg_base64_decode+0xba>
  if (dl > 0) dst[0] = '\0';
 80222ee:	f1bb 0f00 	cmp.w	fp, #0
 80222f2:	d006      	beq.n	8022302 <mg_base64_decode+0xc0>
 80222f4:	f04f 0800 	mov.w	r8, #0
 80222f8:	f889 8000 	strb.w	r8, [r9]
}
 80222fc:	4640      	mov	r0, r8
 80222fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return 0;
 8022302:	46d8      	mov	r8, fp
 8022304:	e7fa      	b.n	80222fc <mg_base64_decode+0xba>

08022306 <mg_resolve_cancel>:
void mg_resolve_cancel(struct mg_connection *c) {
 8022306:	b570      	push	{r4, r5, r6, lr}
 8022308:	4605      	mov	r5, r0
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 802230a:	6843      	ldr	r3, [r0, #4]
 802230c:	f103 0630 	add.w	r6, r3, #48	@ 0x30
  for (d = *head; d != NULL; d = tmp) {
 8022310:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8022312:	e000      	b.n	8022316 <mg_resolve_cancel+0x10>
void mg_resolve_cancel(struct mg_connection *c) {
 8022314:	4621      	mov	r1, r4
  for (d = *head; d != NULL; d = tmp) {
 8022316:	b139      	cbz	r1, 8022328 <mg_resolve_cancel+0x22>
    tmp = d->next;
 8022318:	680c      	ldr	r4, [r1, #0]
    if (d->c == c) mg_dns_free(head, d);
 802231a:	684b      	ldr	r3, [r1, #4]
 802231c:	42ab      	cmp	r3, r5
 802231e:	d1f9      	bne.n	8022314 <mg_resolve_cancel+0xe>
 8022320:	4630      	mov	r0, r6
 8022322:	f7fe fe7a 	bl	802101a <mg_dns_free>
 8022326:	e7f5      	b.n	8022314 <mg_resolve_cancel+0xe>
}
 8022328:	bd70      	pop	{r4, r5, r6, pc}

0802232a <mg_dns_parse_rr>:
                       bool is_question, struct mg_dns_rr *rr) {
 802232a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802232c:	b083      	sub	sp, #12
 802232e:	9c08      	ldr	r4, [sp, #32]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8022330:	1886      	adds	r6, r0, r2
 8022332:	1847      	adds	r7, r0, r1
  memset(rr, 0, sizeof(*rr));
 8022334:	f04f 0c00 	mov.w	ip, #0
 8022338:	f8c4 c000 	str.w	ip, [r4]
 802233c:	f8c4 c004 	str.w	ip, [r4, #4]
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8022340:	290b      	cmp	r1, #11
 8022342:	d934      	bls.n	80223ae <mg_dns_parse_rr+0x84>
 8022344:	461d      	mov	r5, r3
  if (len > 512) return 0;  //  Too large, we don't expect that
 8022346:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802234a:	d833      	bhi.n	80223b4 <mg_dns_parse_rr+0x8a>
  if (s >= e) return 0;     //  Overflow
 802234c:	42be      	cmp	r6, r7
 802234e:	d301      	bcc.n	8022354 <mg_dns_parse_rr+0x2a>
 8022350:	2000      	movs	r0, #0
 8022352:	e02d      	b.n	80223b0 <mg_dns_parse_rr+0x86>
  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 8022354:	4663      	mov	r3, ip
 8022356:	f8cd c000 	str.w	ip, [sp]
 802235a:	f7fe ff3d 	bl	80211d8 <mg_dns_parse_name>
 802235e:	b283      	uxth	r3, r0
 8022360:	8023      	strh	r3, [r4, #0]
 8022362:	b34b      	cbz	r3, 80223b8 <mg_dns_parse_rr+0x8e>
  s += rr->nlen + 4;
 8022364:	3304      	adds	r3, #4
 8022366:	441e      	add	r6, r3
  if (s > e) return 0;
 8022368:	42b7      	cmp	r7, r6
 802236a:	d327      	bcc.n	80223bc <mg_dns_parse_rr+0x92>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 802236c:	f816 2c04 	ldrb.w	r2, [r6, #-4]
 8022370:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 8022374:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022378:	8063      	strh	r3, [r4, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 802237a:	f816 2c02 	ldrb.w	r2, [r6, #-2]
 802237e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8022382:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022386:	80a3      	strh	r3, [r4, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8022388:	b975      	cbnz	r5, 80223a8 <mg_dns_parse_rr+0x7e>
  s += 6;
 802238a:	1db3      	adds	r3, r6, #6
  if (s > e) return 0;
 802238c:	429f      	cmp	r7, r3
 802238e:	d317      	bcc.n	80223c0 <mg_dns_parse_rr+0x96>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8022390:	7931      	ldrb	r1, [r6, #4]
 8022392:	7972      	ldrb	r2, [r6, #5]
 8022394:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8022398:	80e2      	strh	r2, [r4, #6]
  if (s + rr->alen > e) return 0;
 802239a:	4413      	add	r3, r2
 802239c:	42bb      	cmp	r3, r7
 802239e:	d811      	bhi.n	80223c4 <mg_dns_parse_rr+0x9a>
  return (size_t) (rr->nlen + rr->alen + 10);
 80223a0:	fa12 f080 	uxtah	r0, r2, r0
 80223a4:	300a      	adds	r0, #10
 80223a6:	e003      	b.n	80223b0 <mg_dns_parse_rr+0x86>
  if (is_question) return (size_t) (rr->nlen + 4);
 80223a8:	b280      	uxth	r0, r0
 80223aa:	3004      	adds	r0, #4
 80223ac:	e000      	b.n	80223b0 <mg_dns_parse_rr+0x86>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 80223ae:	2000      	movs	r0, #0
}
 80223b0:	b003      	add	sp, #12
 80223b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (len > 512) return 0;  //  Too large, we don't expect that
 80223b4:	2000      	movs	r0, #0
 80223b6:	e7fb      	b.n	80223b0 <mg_dns_parse_rr+0x86>
    return 0;
 80223b8:	2000      	movs	r0, #0
 80223ba:	e7f9      	b.n	80223b0 <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 80223bc:	2000      	movs	r0, #0
 80223be:	e7f7      	b.n	80223b0 <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 80223c0:	2000      	movs	r0, #0
 80223c2:	e7f5      	b.n	80223b0 <mg_dns_parse_rr+0x86>
  if (s + rr->alen > e) return 0;
 80223c4:	2000      	movs	r0, #0
 80223c6:	e7f3      	b.n	80223b0 <mg_dns_parse_rr+0x86>

080223c8 <mg_call>:
void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 80223c8:	b570      	push	{r4, r5, r6, lr}
 80223ca:	4604      	mov	r4, r0
 80223cc:	460d      	mov	r5, r1
 80223ce:	4616      	mov	r6, r2
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 80223d0:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80223d4:	b103      	cbz	r3, 80223d8 <mg_call+0x10>
 80223d6:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 80223d8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80223da:	b11b      	cbz	r3, 80223e4 <mg_call+0x1c>
 80223dc:	4632      	mov	r2, r6
 80223de:	4629      	mov	r1, r5
 80223e0:	4620      	mov	r0, r4
 80223e2:	4798      	blx	r3
}
 80223e4:	bd70      	pop	{r4, r5, r6, pc}

080223e6 <mg_fs_open>:
struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 80223e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80223e8:	4604      	mov	r4, r0
 80223ea:	460d      	mov	r5, r1
 80223ec:	4616      	mov	r6, r2
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 80223ee:	2108      	movs	r1, #8
 80223f0:	2001      	movs	r0, #1
 80223f2:	f7ff fec1 	bl	8022178 <mg_calloc>
  if (fd != NULL) {
 80223f6:	4607      	mov	r7, r0
 80223f8:	b138      	cbz	r0, 802240a <mg_fs_open+0x24>
    fd->fd = fs->op(path, flags);
 80223fa:	68a3      	ldr	r3, [r4, #8]
 80223fc:	4631      	mov	r1, r6
 80223fe:	4628      	mov	r0, r5
 8022400:	4798      	blx	r3
 8022402:	4605      	mov	r5, r0
 8022404:	6038      	str	r0, [r7, #0]
    fd->fs = fs;
 8022406:	607c      	str	r4, [r7, #4]
    if (fd->fd == NULL) {
 8022408:	b108      	cbz	r0, 802240e <mg_fs_open+0x28>
}
 802240a:	4638      	mov	r0, r7
 802240c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      free(fd);
 802240e:	4638      	mov	r0, r7
 8022410:	f7f8 f82c 	bl	801a46c <vPortFree>
      fd = NULL;
 8022414:	462f      	mov	r7, r5
  return fd;
 8022416:	e7f8      	b.n	802240a <mg_fs_open+0x24>

08022418 <mg_fs_close>:
  if (fd != NULL) {
 8022418:	b148      	cbz	r0, 802242e <mg_fs_close+0x16>
void mg_fs_close(struct mg_fd *fd) {
 802241a:	b510      	push	{r4, lr}
 802241c:	4604      	mov	r4, r0
    fd->fs->cl(fd->fd);
 802241e:	6843      	ldr	r3, [r0, #4]
 8022420:	68db      	ldr	r3, [r3, #12]
 8022422:	6800      	ldr	r0, [r0, #0]
 8022424:	4798      	blx	r3
    free(fd);
 8022426:	4620      	mov	r0, r4
 8022428:	f7f8 f820 	bl	801a46c <vPortFree>
}
 802242c:	bd10      	pop	{r4, pc}
 802242e:	4770      	bx	lr

08022430 <restore_http_cb>:
static void restore_http_cb(struct mg_connection *c) {
 8022430:	b510      	push	{r4, lr}
 8022432:	4604      	mov	r4, r0
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8022434:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8022438:	f7ff ffee 	bl	8022418 <mg_fs_close>
  c->pfn_data = NULL;
 802243c:	2200      	movs	r2, #0
 802243e:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  c->pfn = http_cb;
 8022442:	4b05      	ldr	r3, [pc, #20]	@ (8022458 <restore_http_cb+0x28>)
 8022444:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->is_resp = 0;
 8022448:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802244c:	f362 13c7 	bfi	r3, r2, #7, #1
 8022450:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8022454:	bd10      	pop	{r4, pc}
 8022456:	bf00      	nop
 8022458:	08025d0d 	.word	0x08025d0d

0802245c <mg_to_size_t>:
bool mg_to_size_t(struct mg_str str, size_t *val) {
 802245c:	b470      	push	{r4, r5, r6}
 802245e:	b083      	sub	sp, #12
 8022460:	ab02      	add	r3, sp, #8
 8022462:	e903 0003 	stmdb	r3, {r0, r1}
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 8022466:	2300      	movs	r3, #0
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8022468:	e000      	b.n	802246c <mg_to_size_t+0x10>
 802246a:	3301      	adds	r3, #1
 802246c:	9c01      	ldr	r4, [sp, #4]
 802246e:	429c      	cmp	r4, r3
 8022470:	d905      	bls.n	802247e <mg_to_size_t+0x22>
 8022472:	9900      	ldr	r1, [sp, #0]
 8022474:	5cc9      	ldrb	r1, [r1, r3]
 8022476:	2920      	cmp	r1, #32
 8022478:	d0f7      	beq.n	802246a <mg_to_size_t+0xe>
 802247a:	2909      	cmp	r1, #9
 802247c:	d0f5      	beq.n	802246a <mg_to_size_t+0xe>
  if (i < str.len && str.buf[i] == '-') return false;
 802247e:	429c      	cmp	r4, r3
 8022480:	d906      	bls.n	8022490 <mg_to_size_t+0x34>
 8022482:	9900      	ldr	r1, [sp, #0]
 8022484:	5cc9      	ldrb	r1, [r1, r3]
 8022486:	292d      	cmp	r1, #45	@ 0x2d
 8022488:	d02c      	beq.n	80224e4 <mg_to_size_t+0x88>
 802248a:	2500      	movs	r5, #0
 802248c:	4628      	mov	r0, r5
 802248e:	e001      	b.n	8022494 <mg_to_size_t+0x38>
 8022490:	2500      	movs	r5, #0
 8022492:	4628      	mov	r0, r5
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8022494:	429c      	cmp	r4, r3
 8022496:	d917      	bls.n	80224c8 <mg_to_size_t+0x6c>
 8022498:	9900      	ldr	r1, [sp, #0]
 802249a:	5cc9      	ldrb	r1, [r1, r3]
 802249c:	292f      	cmp	r1, #47	@ 0x2f
 802249e:	d913      	bls.n	80224c8 <mg_to_size_t+0x6c>
 80224a0:	2939      	cmp	r1, #57	@ 0x39
 80224a2:	d811      	bhi.n	80224c8 <mg_to_size_t+0x6c>
    size_t digit = (size_t) (str.buf[i] - '0');
 80224a4:	3930      	subs	r1, #48	@ 0x30
    if (result > max2) return false;  // Overflow
 80224a6:	4e15      	ldr	r6, [pc, #84]	@ (80224fc <mg_to_size_t+0xa0>)
 80224a8:	42b0      	cmp	r0, r6
 80224aa:	d81d      	bhi.n	80224e8 <mg_to_size_t+0x8c>
    result *= 10;
 80224ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80224b0:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    if (result > max - digit) return false;  // Overflow
 80224b4:	43ce      	mvns	r6, r1
 80224b6:	ebb6 0f40 	cmp.w	r6, r0, lsl #1
 80224ba:	d317      	bcc.n	80224ec <mg_to_size_t+0x90>
    result += digit;
 80224bc:	eb01 000c 	add.w	r0, r1, ip
    i++, ndigits++;
 80224c0:	3301      	adds	r3, #1
 80224c2:	3501      	adds	r5, #1
 80224c4:	e7e6      	b.n	8022494 <mg_to_size_t+0x38>
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 80224c6:	3301      	adds	r3, #1
 80224c8:	429c      	cmp	r4, r3
 80224ca:	d905      	bls.n	80224d8 <mg_to_size_t+0x7c>
 80224cc:	9900      	ldr	r1, [sp, #0]
 80224ce:	5cc9      	ldrb	r1, [r1, r3]
 80224d0:	2920      	cmp	r1, #32
 80224d2:	d0f8      	beq.n	80224c6 <mg_to_size_t+0x6a>
 80224d4:	2909      	cmp	r1, #9
 80224d6:	d0f6      	beq.n	80224c6 <mg_to_size_t+0x6a>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 80224d8:	b155      	cbz	r5, 80224f0 <mg_to_size_t+0x94>
  if (i != str.len) return false;  // Ditto
 80224da:	429c      	cmp	r4, r3
 80224dc:	d10c      	bne.n	80224f8 <mg_to_size_t+0x9c>
  *val = (size_t) result;
 80224de:	6010      	str	r0, [r2, #0]
  return true;
 80224e0:	2001      	movs	r0, #1
 80224e2:	e006      	b.n	80224f2 <mg_to_size_t+0x96>
  if (i < str.len && str.buf[i] == '-') return false;
 80224e4:	2000      	movs	r0, #0
 80224e6:	e004      	b.n	80224f2 <mg_to_size_t+0x96>
    if (result > max2) return false;  // Overflow
 80224e8:	2000      	movs	r0, #0
 80224ea:	e002      	b.n	80224f2 <mg_to_size_t+0x96>
    if (result > max - digit) return false;  // Overflow
 80224ec:	2000      	movs	r0, #0
 80224ee:	e000      	b.n	80224f2 <mg_to_size_t+0x96>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 80224f0:	2000      	movs	r0, #0
}
 80224f2:	b003      	add	sp, #12
 80224f4:	bc70      	pop	{r4, r5, r6}
 80224f6:	4770      	bx	lr
  if (i != str.len) return false;  // Ditto
 80224f8:	2000      	movs	r0, #0
 80224fa:	e7fa      	b.n	80224f2 <mg_to_size_t+0x96>
 80224fc:	19999999 	.word	0x19999999

08022500 <mg_http_get_request_len>:
int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8022500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022502:	4606      	mov	r6, r0
 8022504:	460f      	mov	r7, r1
  for (i = 0; i < buf_len; i++) {
 8022506:	2400      	movs	r4, #0
 8022508:	e007      	b.n	802251a <mg_http_get_request_len+0x1a>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 802250a:	1933      	adds	r3, r6, r4
 802250c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022510:	2b0a      	cmp	r3, #10
 8022512:	d10d      	bne.n	8022530 <mg_http_get_request_len+0x30>
      return (int) i + 1;
 8022514:	1c60      	adds	r0, r4, #1
 8022516:	e01b      	b.n	8022550 <mg_http_get_request_len+0x50>
  for (i = 0; i < buf_len; i++) {
 8022518:	3401      	adds	r4, #1
 802251a:	42bc      	cmp	r4, r7
 802251c:	d217      	bcs.n	802254e <mg_http_get_request_len+0x4e>
    if (!isok(buf[i])) return -1;
 802251e:	5d35      	ldrb	r5, [r6, r4]
 8022520:	4628      	mov	r0, r5
 8022522:	f7fd f944 	bl	801f7ae <isok>
 8022526:	b1a0      	cbz	r0, 8022552 <mg_http_get_request_len+0x52>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8022528:	2c00      	cmp	r4, #0
 802252a:	d0f5      	beq.n	8022518 <mg_http_get_request_len+0x18>
 802252c:	2d0a      	cmp	r5, #10
 802252e:	d0ec      	beq.n	802250a <mg_http_get_request_len+0xa>
 8022530:	2c03      	cmp	r4, #3
 8022532:	d9f1      	bls.n	8022518 <mg_http_get_request_len+0x18>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8022534:	2d0a      	cmp	r5, #10
 8022536:	d1ef      	bne.n	8022518 <mg_http_get_request_len+0x18>
 8022538:	1933      	adds	r3, r6, r4
 802253a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802253e:	2b0d      	cmp	r3, #13
 8022540:	d1ea      	bne.n	8022518 <mg_http_get_request_len+0x18>
 8022542:	1933      	adds	r3, r6, r4
 8022544:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 8022548:	2b0a      	cmp	r3, #10
 802254a:	d1e5      	bne.n	8022518 <mg_http_get_request_len+0x18>
 802254c:	e7e2      	b.n	8022514 <mg_http_get_request_len+0x14>
  return 0;
 802254e:	2000      	movs	r0, #0
}
 8022550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!isok(buf[i])) return -1;
 8022552:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022556:	e7fb      	b.n	8022550 <mg_http_get_request_len+0x50>

08022558 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8022558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802255c:	4605      	mov	r5, r0
 802255e:	460f      	mov	r7, r1
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 8022560:	4608      	mov	r0, r1
 8022562:	f7ed fe9d 	bl	80102a0 <strlen>
 8022566:	4606      	mov	r6, r0
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8022568:	2400      	movs	r4, #0
 802256a:	e000      	b.n	802256e <mg_http_get_header+0x16>
 802256c:	3401      	adds	r4, #1
 802256e:	2c1d      	cmp	r4, #29
 8022570:	d819      	bhi.n	80225a6 <mg_http_get_header+0x4e>
 8022572:	1ca3      	adds	r3, r4, #2
 8022574:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8022578:	685a      	ldr	r2, [r3, #4]
 802257a:	b17a      	cbz	r2, 802259c <mg_http_get_header+0x44>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 802257c:	0123      	lsls	r3, r4, #4
 802257e:	3328      	adds	r3, #40	@ 0x28
 8022580:	eb05 0803 	add.w	r8, r5, r3
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 8022584:	42b2      	cmp	r2, r6
 8022586:	d1f1      	bne.n	802256c <mg_http_get_header+0x14>
 8022588:	1ca3      	adds	r3, r4, #2
 802258a:	011b      	lsls	r3, r3, #4
 802258c:	4632      	mov	r2, r6
 802258e:	4639      	mov	r1, r7
 8022590:	58e8      	ldr	r0, [r5, r3]
 8022592:	f7fd f8d7 	bl	801f744 <mg_ncasecmp>
 8022596:	2800      	cmp	r0, #0
 8022598:	d1e8      	bne.n	802256c <mg_http_get_header+0x14>
 802259a:	e001      	b.n	80225a0 <mg_http_get_header+0x48>
  return NULL;
 802259c:	f04f 0800 	mov.w	r8, #0
}
 80225a0:	4640      	mov	r0, r8
 80225a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 80225a6:	f04f 0800 	mov.w	r8, #0
 80225aa:	e7f9      	b.n	80225a0 <mg_http_get_header+0x48>

080225ac <mg_http_status>:
int mg_http_status(const struct mg_http_message *hm) {
 80225ac:	b508      	push	{r3, lr}
  return atoi(hm->uri.buf);
 80225ae:	6880      	ldr	r0, [r0, #8]
 80225b0:	f007 f932 	bl	8029818 <atoi>
}
 80225b4:	bd08      	pop	{r3, pc}
	...

080225b8 <mg_json_get>:
int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 80225b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225bc:	b095      	sub	sp, #84	@ 0x54
 80225be:	ac08      	add	r4, sp, #32
 80225c0:	e884 0003 	stmia.w	r4, {r0, r1}
 80225c4:	9202      	str	r2, [sp, #8]
  const char *s = json.buf;
 80225c6:	4606      	mov	r6, r0
  int len = (int) json.len;
 80225c8:	4688      	mov	r8, r1
  if (toklen) *toklen = 0;
 80225ca:	469a      	mov	sl, r3
 80225cc:	b113      	cbz	r3, 80225d4 <mg_json_get+0x1c>
 80225ce:	2300      	movs	r3, #0
 80225d0:	f8ca 3000 	str.w	r3, [sl]
  if (path[0] != '$') return MG_JSON_INVALID;
 80225d4:	9b02      	ldr	r3, [sp, #8]
 80225d6:	781b      	ldrb	r3, [r3, #0]
 80225d8:	2b24      	cmp	r3, #36	@ 0x24
 80225da:	f040 8232 	bne.w	8022a42 <mg_json_get+0x48a>
  int ci = -1, ei = -1;  // Current and expected index in array
 80225de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80225e2:	9303      	str	r3, [sp, #12]
 80225e4:	9301      	str	r3, [sp, #4]
  int pos = 1;           // Current position in `path`
 80225e6:	2301      	movs	r3, #1
 80225e8:	9304      	str	r3, [sp, #16]
  int ed = 0;            // Expected depth
 80225ea:	f04f 0b00 	mov.w	fp, #0
  int depth = 0;         // Current depth (nesting level)
 80225ee:	465f      	mov	r7, fp
  int j = 0;             // Offset in `s` we're looking for (return value)
 80225f0:	f8cd b014 	str.w	fp, [sp, #20]
  for (i = 0; i < len; i++) {
 80225f4:	465c      	mov	r4, fp
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 80225f6:	465b      	mov	r3, fp
 80225f8:	f8cd a018 	str.w	sl, [sp, #24]
 80225fc:	e190      	b.n	8022920 <mg_json_get+0x368>
        if (depth == ed) j = i;
 80225fe:	455f      	cmp	r7, fp
 8022600:	d029      	beq.n	8022656 <mg_json_get+0x9e>
        if (c == '{') {
 8022602:	2d7b      	cmp	r5, #123	@ 0x7b
 8022604:	d029      	beq.n	802265a <mg_json_get+0xa2>
        } else if (c == '[') {
 8022606:	2d5b      	cmp	r5, #91	@ 0x5b
 8022608:	d047      	beq.n	802269a <mg_json_get+0xe2>
        } else if (c == ']' && depth > 0) {  // Empty array
 802260a:	2d5d      	cmp	r5, #93	@ 0x5d
 802260c:	d07a      	beq.n	8022704 <mg_json_get+0x14c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 802260e:	2d74      	cmp	r5, #116	@ 0x74
 8022610:	f000 80a4 	beq.w	802275c <mg_json_get+0x1a4>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8022614:	2d6e      	cmp	r5, #110	@ 0x6e
 8022616:	f000 80b0 	beq.w	802277a <mg_json_get+0x1c2>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 802261a:	2d66      	cmp	r5, #102	@ 0x66
 802261c:	f000 80bc 	beq.w	8022798 <mg_json_get+0x1e0>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8022620:	2d2d      	cmp	r5, #45	@ 0x2d
 8022622:	d005      	beq.n	8022630 <mg_json_get+0x78>
 8022624:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8022628:	b2db      	uxtb	r3, r3
 802262a:	2b09      	cmp	r3, #9
 802262c:	f200 80c3 	bhi.w	80227b6 <mg_json_get+0x1fe>
          int numlen = 0;
 8022630:	2300      	movs	r3, #0
 8022632:	930b      	str	r3, [sp, #44]	@ 0x2c
          mg_atod(&s[i], len - i, &numlen);
 8022634:	aa0b      	add	r2, sp, #44	@ 0x2c
 8022636:	eba8 0104 	sub.w	r1, r8, r4
 802263a:	4648      	mov	r0, r9
 802263c:	f7fd fd30 	bl	80200a0 <mg_atod>
          i += numlen - 1;
 8022640:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022642:	3b01      	subs	r3, #1
 8022644:	441c      	add	r4, r3
        MG_CHECKRET('V');
 8022646:	455f      	cmp	r7, fp
 8022648:	f000 80c6 	beq.w	80227d8 <mg_json_get+0x220>
        if (depth == ed && ei >= 0) ci++;
 802264c:	455f      	cmp	r7, fp
 802264e:	f000 80da 	beq.w	8022806 <mg_json_get+0x24e>
        expecting = S_COMMA_OR_EOO;
 8022652:	2303      	movs	r3, #3
 8022654:	e163      	b.n	802291e <mg_json_get+0x366>
        if (depth == ed) j = i;
 8022656:	9405      	str	r4, [sp, #20]
 8022658:	e7d3      	b.n	8022602 <mg_json_get+0x4a>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 802265a:	2f1d      	cmp	r7, #29
 802265c:	f300 81f4 	bgt.w	8022a48 <mg_json_get+0x490>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8022660:	455f      	cmp	r7, fp
 8022662:	d007      	beq.n	8022674 <mg_json_get+0xbc>
          nesting[depth++] = c;
 8022664:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8022668:	446b      	add	r3, sp
 802266a:	f803 5c20 	strb.w	r5, [r3, #-32]
 802266e:	3701      	adds	r7, #1
          expecting = S_KEY;
 8022670:	2301      	movs	r3, #1
          break;
 8022672:	e154      	b.n	802291e <mg_json_get+0x366>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8022674:	9b02      	ldr	r3, [sp, #8]
 8022676:	9a04      	ldr	r2, [sp, #16]
 8022678:	5c9b      	ldrb	r3, [r3, r2]
 802267a:	2b2e      	cmp	r3, #46	@ 0x2e
 802267c:	d1f2      	bne.n	8022664 <mg_json_get+0xac>
 802267e:	9b01      	ldr	r3, [sp, #4]
 8022680:	9a03      	ldr	r2, [sp, #12]
 8022682:	4293      	cmp	r3, r2
 8022684:	d1ee      	bne.n	8022664 <mg_json_get+0xac>
            ed++, pos++, ci = ei = -1;
 8022686:	f10b 0b01 	add.w	fp, fp, #1
 802268a:	9b04      	ldr	r3, [sp, #16]
 802268c:	3301      	adds	r3, #1
 802268e:	9304      	str	r3, [sp, #16]
 8022690:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022694:	9303      	str	r3, [sp, #12]
 8022696:	9301      	str	r3, [sp, #4]
 8022698:	e7e4      	b.n	8022664 <mg_json_get+0xac>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 802269a:	2f1d      	cmp	r7, #29
 802269c:	f300 81d7 	bgt.w	8022a4e <mg_json_get+0x496>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 80226a0:	455f      	cmp	r7, fp
 80226a2:	d006      	beq.n	80226b2 <mg_json_get+0xfa>
          nesting[depth++] = c;
 80226a4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80226a8:	446a      	add	r2, sp
 80226aa:	f802 5c20 	strb.w	r5, [r2, #-32]
 80226ae:	3701      	adds	r7, #1
          break;
 80226b0:	e135      	b.n	802291e <mg_json_get+0x366>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 80226b2:	9a02      	ldr	r2, [sp, #8]
 80226b4:	9904      	ldr	r1, [sp, #16]
 80226b6:	5c52      	ldrb	r2, [r2, r1]
 80226b8:	2a5b      	cmp	r2, #91	@ 0x5b
 80226ba:	d1f3      	bne.n	80226a4 <mg_json_get+0xec>
 80226bc:	9a01      	ldr	r2, [sp, #4]
 80226be:	9903      	ldr	r1, [sp, #12]
 80226c0:	428a      	cmp	r2, r1
 80226c2:	d1ef      	bne.n	80226a4 <mg_json_get+0xec>
            ed++, pos++, ci = 0;
 80226c4:	f10b 0b01 	add.w	fp, fp, #1
 80226c8:	9804      	ldr	r0, [sp, #16]
 80226ca:	3001      	adds	r0, #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 80226cc:	2100      	movs	r1, #0
 80226ce:	f8dd c008 	ldr.w	ip, [sp, #8]
 80226d2:	e005      	b.n	80226e0 <mg_json_get+0x128>
              ei *= 10;
 80226d4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
              ei += path[pos] - '0';
 80226d8:	3a30      	subs	r2, #48	@ 0x30
 80226da:	eb02 0141 	add.w	r1, r2, r1, lsl #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 80226de:	3001      	adds	r0, #1
 80226e0:	f81c 2000 	ldrb.w	r2, [ip, r0]
 80226e4:	2a5d      	cmp	r2, #93	@ 0x5d
 80226e6:	d001      	beq.n	80226ec <mg_json_get+0x134>
 80226e8:	2a00      	cmp	r2, #0
 80226ea:	d1f3      	bne.n	80226d4 <mg_json_get+0x11c>
            if (path[pos] != 0) pos++;
 80226ec:	9004      	str	r0, [sp, #16]
 80226ee:	9103      	str	r1, [sp, #12]
 80226f0:	b12a      	cbz	r2, 80226fe <mg_json_get+0x146>
 80226f2:	4602      	mov	r2, r0
 80226f4:	3201      	adds	r2, #1
 80226f6:	9204      	str	r2, [sp, #16]
            ed++, pos++, ci = 0;
 80226f8:	2200      	movs	r2, #0
 80226fa:	9201      	str	r2, [sp, #4]
 80226fc:	e7d2      	b.n	80226a4 <mg_json_get+0xec>
 80226fe:	2200      	movs	r2, #0
 8022700:	9201      	str	r2, [sp, #4]
 8022702:	e7cf      	b.n	80226a4 <mg_json_get+0xec>
        } else if (c == ']' && depth > 0) {  // Empty array
 8022704:	2f00      	cmp	r7, #0
 8022706:	dd82      	ble.n	802260e <mg_json_get+0x56>
          MG_EOO(']');
 8022708:	455f      	cmp	r7, fp
 802270a:	d020      	beq.n	802274e <mg_json_get+0x196>
 802270c:	3f01      	subs	r7, #1
 802270e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8022712:	446b      	add	r3, sp
 8022714:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8022718:	3302      	adds	r3, #2
 802271a:	429d      	cmp	r5, r3
 802271c:	f040 819a 	bne.w	8022a54 <mg_json_get+0x49c>
 8022720:	455f      	cmp	r7, fp
 8022722:	d190      	bne.n	8022646 <mg_json_get+0x8e>
 8022724:	9b02      	ldr	r3, [sp, #8]
 8022726:	9a04      	ldr	r2, [sp, #16]
 8022728:	5c9b      	ldrb	r3, [r3, r2]
 802272a:	2b00      	cmp	r3, #0
 802272c:	d18b      	bne.n	8022646 <mg_json_get+0x8e>
 802272e:	9b01      	ldr	r3, [sp, #4]
 8022730:	9a03      	ldr	r2, [sp, #12]
 8022732:	4293      	cmp	r3, r2
 8022734:	d187      	bne.n	8022646 <mg_json_get+0x8e>
 8022736:	f8dd a018 	ldr.w	sl, [sp, #24]
 802273a:	f1ba 0f00 	cmp.w	sl, #0
 802273e:	d004      	beq.n	802274a <mg_json_get+0x192>
 8022740:	9b05      	ldr	r3, [sp, #20]
 8022742:	1ae3      	subs	r3, r4, r3
 8022744:	3301      	adds	r3, #1
 8022746:	f8ca 3000 	str.w	r3, [sl]
 802274a:	9d05      	ldr	r5, [sp, #20]
 802274c:	e175      	b.n	8022a3a <mg_json_get+0x482>
 802274e:	9b01      	ldr	r3, [sp, #4]
 8022750:	9a03      	ldr	r2, [sp, #12]
 8022752:	4293      	cmp	r3, r2
 8022754:	d0da      	beq.n	802270c <mg_json_get+0x154>
 8022756:	f06f 0502 	mvn.w	r5, #2
 802275a:	e16e      	b.n	8022a3a <mg_json_get+0x482>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 802275c:	1ce3      	adds	r3, r4, #3
 802275e:	9307      	str	r3, [sp, #28]
 8022760:	4543      	cmp	r3, r8
 8022762:	f6bf af57 	bge.w	8022614 <mg_json_get+0x5c>
 8022766:	2204      	movs	r2, #4
 8022768:	49a3      	ldr	r1, [pc, #652]	@ (80229f8 <mg_json_get+0x440>)
 802276a:	4648      	mov	r0, r9
 802276c:	f009 fcf4 	bl	802c158 <memcmp>
 8022770:	2800      	cmp	r0, #0
 8022772:	f47f af4f 	bne.w	8022614 <mg_json_get+0x5c>
          i += 3;
 8022776:	9c07      	ldr	r4, [sp, #28]
 8022778:	e765      	b.n	8022646 <mg_json_get+0x8e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 802277a:	1ce3      	adds	r3, r4, #3
 802277c:	9307      	str	r3, [sp, #28]
 802277e:	4543      	cmp	r3, r8
 8022780:	f6bf af4b 	bge.w	802261a <mg_json_get+0x62>
 8022784:	2204      	movs	r2, #4
 8022786:	499d      	ldr	r1, [pc, #628]	@ (80229fc <mg_json_get+0x444>)
 8022788:	4648      	mov	r0, r9
 802278a:	f009 fce5 	bl	802c158 <memcmp>
 802278e:	2800      	cmp	r0, #0
 8022790:	f47f af43 	bne.w	802261a <mg_json_get+0x62>
          i += 3;
 8022794:	9c07      	ldr	r4, [sp, #28]
 8022796:	e756      	b.n	8022646 <mg_json_get+0x8e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8022798:	1d23      	adds	r3, r4, #4
 802279a:	9307      	str	r3, [sp, #28]
 802279c:	4543      	cmp	r3, r8
 802279e:	f6bf af3f 	bge.w	8022620 <mg_json_get+0x68>
 80227a2:	2205      	movs	r2, #5
 80227a4:	4996      	ldr	r1, [pc, #600]	@ (8022a00 <mg_json_get+0x448>)
 80227a6:	4648      	mov	r0, r9
 80227a8:	f009 fcd6 	bl	802c158 <memcmp>
 80227ac:	2800      	cmp	r0, #0
 80227ae:	f47f af37 	bne.w	8022620 <mg_json_get+0x68>
          i += 4;
 80227b2:	9c07      	ldr	r4, [sp, #28]
 80227b4:	e747      	b.n	8022646 <mg_json_get+0x8e>
        } else if (c == '"') {
 80227b6:	2d22      	cmp	r5, #34	@ 0x22
 80227b8:	f040 814f 	bne.w	8022a5a <mg_json_get+0x4a2>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 80227bc:	f10a 0001 	add.w	r0, sl, #1
 80227c0:	eba8 0104 	sub.w	r1, r8, r4
 80227c4:	3901      	subs	r1, #1
 80227c6:	4430      	add	r0, r6
 80227c8:	f7fd fc45 	bl	8020056 <mg_pass_string>
          if (n < 0) return n;
 80227cc:	1e05      	subs	r5, r0, #0
 80227ce:	f2c0 8134 	blt.w	8022a3a <mg_json_get+0x482>
          i += n + 1;
 80227d2:	3501      	adds	r5, #1
 80227d4:	442c      	add	r4, r5
 80227d6:	e736      	b.n	8022646 <mg_json_get+0x8e>
        MG_CHECKRET('V');
 80227d8:	9b02      	ldr	r3, [sp, #8]
 80227da:	9a04      	ldr	r2, [sp, #16]
 80227dc:	5c9b      	ldrb	r3, [r3, r2]
 80227de:	2b00      	cmp	r3, #0
 80227e0:	f47f af34 	bne.w	802264c <mg_json_get+0x94>
 80227e4:	9b01      	ldr	r3, [sp, #4]
 80227e6:	9a03      	ldr	r2, [sp, #12]
 80227e8:	4293      	cmp	r3, r2
 80227ea:	f47f af2f 	bne.w	802264c <mg_json_get+0x94>
 80227ee:	f8dd a018 	ldr.w	sl, [sp, #24]
 80227f2:	f1ba 0f00 	cmp.w	sl, #0
 80227f6:	d004      	beq.n	8022802 <mg_json_get+0x24a>
 80227f8:	9b05      	ldr	r3, [sp, #20]
 80227fa:	1ae3      	subs	r3, r4, r3
 80227fc:	3301      	adds	r3, #1
 80227fe:	f8ca 3000 	str.w	r3, [sl]
 8022802:	9d05      	ldr	r5, [sp, #20]
 8022804:	e119      	b.n	8022a3a <mg_json_get+0x482>
        if (depth == ed && ei >= 0) ci++;
 8022806:	9b03      	ldr	r3, [sp, #12]
 8022808:	2b00      	cmp	r3, #0
 802280a:	f2c0 8110 	blt.w	8022a2e <mg_json_get+0x476>
 802280e:	9b01      	ldr	r3, [sp, #4]
 8022810:	3301      	adds	r3, #1
 8022812:	9301      	str	r3, [sp, #4]
        expecting = S_COMMA_OR_EOO;
 8022814:	2303      	movs	r3, #3
 8022816:	e082      	b.n	802291e <mg_json_get+0x366>
        if (c == '"') {
 8022818:	2d22      	cmp	r5, #34	@ 0x22
 802281a:	d014      	beq.n	8022846 <mg_json_get+0x28e>
        } else if (c == '}') {  // Empty object
 802281c:	2d7d      	cmp	r5, #125	@ 0x7d
 802281e:	f040 8125 	bne.w	8022a6c <mg_json_get+0x4b4>
          MG_EOO('}');
 8022822:	455f      	cmp	r7, fp
 8022824:	d053      	beq.n	80228ce <mg_json_get+0x316>
 8022826:	3f01      	subs	r7, #1
 8022828:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 802282c:	446b      	add	r3, sp
 802282e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8022832:	3302      	adds	r3, #2
 8022834:	429d      	cmp	r5, r3
 8022836:	f040 811c 	bne.w	8022a72 <mg_json_get+0x4ba>
 802283a:	455f      	cmp	r7, fp
 802283c:	d04e      	beq.n	80228dc <mg_json_get+0x324>
          if (depth == ed && ei >= 0) ci++;
 802283e:	455f      	cmp	r7, fp
 8022840:	d061      	beq.n	8022906 <mg_json_get+0x34e>
          expecting = S_COMMA_OR_EOO;
 8022842:	2303      	movs	r3, #3
 8022844:	e06b      	b.n	802291e <mg_json_get+0x366>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8022846:	f104 0901 	add.w	r9, r4, #1
 802284a:	44b1      	add	r9, r6
 802284c:	eba8 0104 	sub.w	r1, r8, r4
 8022850:	3901      	subs	r1, #1
 8022852:	4648      	mov	r0, r9
 8022854:	f7fd fbff 	bl	8020056 <mg_pass_string>
          if (n < 0) return n;
 8022858:	1e05      	subs	r5, r0, #0
 802285a:	f2c0 80ee 	blt.w	8022a3a <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 802285e:	1c63      	adds	r3, r4, #1
 8022860:	442b      	add	r3, r5
 8022862:	4543      	cmp	r3, r8
 8022864:	f280 80fc 	bge.w	8022a60 <mg_json_get+0x4a8>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8022868:	455f      	cmp	r7, fp
 802286a:	f2c0 80fc 	blt.w	8022a66 <mg_json_get+0x4ae>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 802286e:	d005      	beq.n	802287c <mg_json_get+0x2c4>
          if (depth == ed && path[pos - 1] == '.' &&
 8022870:	455f      	cmp	r7, fp
 8022872:	d00d      	beq.n	8022890 <mg_json_get+0x2d8>
          i += n + 1;
 8022874:	3501      	adds	r5, #1
 8022876:	442c      	add	r4, r5
          expecting = S_COLON;
 8022878:	2302      	movs	r3, #2
 802287a:	e050      	b.n	802291e <mg_json_get+0x366>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 802287c:	9b02      	ldr	r3, [sp, #8]
 802287e:	9a04      	ldr	r2, [sp, #16]
 8022880:	4413      	add	r3, r2
 8022882:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022886:	2b2e      	cmp	r3, #46	@ 0x2e
 8022888:	d0f2      	beq.n	8022870 <mg_json_get+0x2b8>
 802288a:	f06f 0502 	mvn.w	r5, #2
 802288e:	e0d4      	b.n	8022a3a <mg_json_get+0x482>
          if (depth == ed && path[pos - 1] == '.' &&
 8022890:	9b02      	ldr	r3, [sp, #8]
 8022892:	9a04      	ldr	r2, [sp, #16]
 8022894:	4413      	add	r3, r2
 8022896:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802289a:	2b2e      	cmp	r3, #46	@ 0x2e
 802289c:	d1ea      	bne.n	8022874 <mg_json_get+0x2bc>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 802289e:	462a      	mov	r2, r5
 80228a0:	9b02      	ldr	r3, [sp, #8]
 80228a2:	9904      	ldr	r1, [sp, #16]
 80228a4:	1859      	adds	r1, r3, r1
 80228a6:	4648      	mov	r0, r9
 80228a8:	f009 fd1f 	bl	802c2ea <strncmp>
          if (depth == ed && path[pos - 1] == '.' &&
 80228ac:	2800      	cmp	r0, #0
 80228ae:	d1e1      	bne.n	8022874 <mg_json_get+0x2bc>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 80228b0:	9904      	ldr	r1, [sp, #16]
 80228b2:	194b      	adds	r3, r1, r5
 80228b4:	9a02      	ldr	r2, [sp, #8]
 80228b6:	5cd2      	ldrb	r2, [r2, r3]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 80228b8:	b12a      	cbz	r2, 80228c6 <mg_json_get+0x30e>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 80228ba:	2a2e      	cmp	r2, #46	@ 0x2e
 80228bc:	d005      	beq.n	80228ca <mg_json_get+0x312>
 80228be:	2a5b      	cmp	r2, #91	@ 0x5b
 80228c0:	d1d8      	bne.n	8022874 <mg_json_get+0x2bc>
            pos += n;
 80228c2:	9304      	str	r3, [sp, #16]
 80228c4:	e7d6      	b.n	8022874 <mg_json_get+0x2bc>
 80228c6:	9304      	str	r3, [sp, #16]
 80228c8:	e7d4      	b.n	8022874 <mg_json_get+0x2bc>
 80228ca:	9304      	str	r3, [sp, #16]
 80228cc:	e7d2      	b.n	8022874 <mg_json_get+0x2bc>
          MG_EOO('}');
 80228ce:	9b01      	ldr	r3, [sp, #4]
 80228d0:	9a03      	ldr	r2, [sp, #12]
 80228d2:	4293      	cmp	r3, r2
 80228d4:	d0a7      	beq.n	8022826 <mg_json_get+0x26e>
 80228d6:	f06f 0502 	mvn.w	r5, #2
 80228da:	e0ae      	b.n	8022a3a <mg_json_get+0x482>
 80228dc:	9b02      	ldr	r3, [sp, #8]
 80228de:	9a04      	ldr	r2, [sp, #16]
 80228e0:	5c9b      	ldrb	r3, [r3, r2]
 80228e2:	2b00      	cmp	r3, #0
 80228e4:	d1ab      	bne.n	802283e <mg_json_get+0x286>
 80228e6:	9b01      	ldr	r3, [sp, #4]
 80228e8:	9a03      	ldr	r2, [sp, #12]
 80228ea:	4293      	cmp	r3, r2
 80228ec:	d1a7      	bne.n	802283e <mg_json_get+0x286>
 80228ee:	f8dd a018 	ldr.w	sl, [sp, #24]
 80228f2:	f1ba 0f00 	cmp.w	sl, #0
 80228f6:	d004      	beq.n	8022902 <mg_json_get+0x34a>
 80228f8:	9b05      	ldr	r3, [sp, #20]
 80228fa:	1ae3      	subs	r3, r4, r3
 80228fc:	3301      	adds	r3, #1
 80228fe:	f8ca 3000 	str.w	r3, [sl]
 8022902:	9d05      	ldr	r5, [sp, #20]
 8022904:	e099      	b.n	8022a3a <mg_json_get+0x482>
          if (depth == ed && ei >= 0) ci++;
 8022906:	9b03      	ldr	r3, [sp, #12]
 8022908:	2b00      	cmp	r3, #0
 802290a:	f2c0 8092 	blt.w	8022a32 <mg_json_get+0x47a>
 802290e:	9b01      	ldr	r3, [sp, #4]
 8022910:	3301      	adds	r3, #1
 8022912:	9301      	str	r3, [sp, #4]
          expecting = S_COMMA_OR_EOO;
 8022914:	2303      	movs	r3, #3
 8022916:	e002      	b.n	802291e <mg_json_get+0x366>
        if (c == ':') {
 8022918:	2d3a      	cmp	r5, #58	@ 0x3a
 802291a:	d11d      	bne.n	8022958 <mg_json_get+0x3a0>
          expecting = S_VALUE;
 802291c:	2300      	movs	r3, #0
  for (i = 0; i < len; i++) {
 802291e:	3401      	adds	r4, #1
 8022920:	4544      	cmp	r4, r8
 8022922:	f280 8088 	bge.w	8022a36 <mg_json_get+0x47e>
    unsigned char c = ((unsigned char *) s)[i];
 8022926:	46a2      	mov	sl, r4
 8022928:	eb06 0904 	add.w	r9, r6, r4
 802292c:	5d35      	ldrb	r5, [r6, r4]
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 802292e:	2d20      	cmp	r5, #32
 8022930:	d0f5      	beq.n	802291e <mg_json_get+0x366>
 8022932:	2d09      	cmp	r5, #9
 8022934:	d0f3      	beq.n	802291e <mg_json_get+0x366>
 8022936:	2d0a      	cmp	r5, #10
 8022938:	d0f1      	beq.n	802291e <mg_json_get+0x366>
 802293a:	2d0d      	cmp	r5, #13
 802293c:	d0ef      	beq.n	802291e <mg_json_get+0x366>
    switch (expecting) {
 802293e:	2b03      	cmp	r3, #3
 8022940:	d8ed      	bhi.n	802291e <mg_json_get+0x366>
 8022942:	a201      	add	r2, pc, #4	@ (adr r2, 8022948 <mg_json_get+0x390>)
 8022944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022948:	080225ff 	.word	0x080225ff
 802294c:	08022819 	.word	0x08022819
 8022950:	08022919 	.word	0x08022919
 8022954:	0802295f 	.word	0x0802295f
          return MG_JSON_INVALID;
 8022958:	f06f 0501 	mvn.w	r5, #1
 802295c:	e06d      	b.n	8022a3a <mg_json_get+0x482>
        if (depth <= 0) {
 802295e:	2f00      	cmp	r7, #0
 8022960:	f340 808a 	ble.w	8022a78 <mg_json_get+0x4c0>
        } else if (c == ',') {
 8022964:	2d2c      	cmp	r5, #44	@ 0x2c
 8022966:	d01e      	beq.n	80229a6 <mg_json_get+0x3ee>
        } else if (c == ']' || c == '}') {
 8022968:	2d5d      	cmp	r5, #93	@ 0x5d
 802296a:	d002      	beq.n	8022972 <mg_json_get+0x3ba>
 802296c:	2d7d      	cmp	r5, #125	@ 0x7d
 802296e:	f040 8086 	bne.w	8022a7e <mg_json_get+0x4c6>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 8022972:	455f      	cmp	r7, fp
 8022974:	d021      	beq.n	80229ba <mg_json_get+0x402>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 8022976:	455f      	cmp	r7, fp
 8022978:	d02b      	beq.n	80229d2 <mg_json_get+0x41a>
          MG_EOO('O');
 802297a:	455f      	cmp	r7, fp
 802297c:	d035      	beq.n	80229ea <mg_json_get+0x432>
 802297e:	3f01      	subs	r7, #1
 8022980:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8022984:	446a      	add	r2, sp
 8022986:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 802298a:	3202      	adds	r2, #2
 802298c:	4295      	cmp	r5, r2
 802298e:	d179      	bne.n	8022a84 <mg_json_get+0x4cc>
 8022990:	455f      	cmp	r7, fp
 8022992:	d037      	beq.n	8022a04 <mg_json_get+0x44c>
          if (depth == ed && ei >= 0) ci++;
 8022994:	455f      	cmp	r7, fp
 8022996:	d1c2      	bne.n	802291e <mg_json_get+0x366>
 8022998:	9a03      	ldr	r2, [sp, #12]
 802299a:	2a00      	cmp	r2, #0
 802299c:	dbbf      	blt.n	802291e <mg_json_get+0x366>
 802299e:	9a01      	ldr	r2, [sp, #4]
 80229a0:	3201      	adds	r2, #1
 80229a2:	9201      	str	r2, [sp, #4]
 80229a4:	e7bb      	b.n	802291e <mg_json_get+0x366>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 80229a6:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 80229aa:	446b      	add	r3, sp
 80229ac:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80229b0:	2b7b      	cmp	r3, #123	@ 0x7b
 80229b2:	bf14      	ite	ne
 80229b4:	2300      	movne	r3, #0
 80229b6:	2301      	moveq	r3, #1
 80229b8:	e7b1      	b.n	802291e <mg_json_get+0x366>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 80229ba:	2d7d      	cmp	r5, #125	@ 0x7d
 80229bc:	d1db      	bne.n	8022976 <mg_json_get+0x3be>
 80229be:	9a02      	ldr	r2, [sp, #8]
 80229c0:	9904      	ldr	r1, [sp, #16]
 80229c2:	440a      	add	r2, r1
 80229c4:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80229c8:	2a2e      	cmp	r2, #46	@ 0x2e
 80229ca:	d1d4      	bne.n	8022976 <mg_json_get+0x3be>
            return MG_JSON_NOT_FOUND;
 80229cc:	f06f 0502 	mvn.w	r5, #2
 80229d0:	e033      	b.n	8022a3a <mg_json_get+0x482>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 80229d2:	2d5d      	cmp	r5, #93	@ 0x5d
 80229d4:	d1d1      	bne.n	802297a <mg_json_get+0x3c2>
 80229d6:	9a02      	ldr	r2, [sp, #8]
 80229d8:	9904      	ldr	r1, [sp, #16]
 80229da:	440a      	add	r2, r1
 80229dc:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80229e0:	2a2c      	cmp	r2, #44	@ 0x2c
 80229e2:	d1ca      	bne.n	802297a <mg_json_get+0x3c2>
            return MG_JSON_NOT_FOUND;
 80229e4:	f06f 0502 	mvn.w	r5, #2
 80229e8:	e027      	b.n	8022a3a <mg_json_get+0x482>
          MG_EOO('O');
 80229ea:	9a01      	ldr	r2, [sp, #4]
 80229ec:	9903      	ldr	r1, [sp, #12]
 80229ee:	428a      	cmp	r2, r1
 80229f0:	d0c5      	beq.n	802297e <mg_json_get+0x3c6>
 80229f2:	f06f 0502 	mvn.w	r5, #2
 80229f6:	e020      	b.n	8022a3a <mg_json_get+0x482>
 80229f8:	080364b8 	.word	0x080364b8
 80229fc:	0803974c 	.word	0x0803974c
 8022a00:	080364c0 	.word	0x080364c0
 8022a04:	9a02      	ldr	r2, [sp, #8]
 8022a06:	9904      	ldr	r1, [sp, #16]
 8022a08:	5c52      	ldrb	r2, [r2, r1]
 8022a0a:	2a00      	cmp	r2, #0
 8022a0c:	d1c2      	bne.n	8022994 <mg_json_get+0x3dc>
 8022a0e:	9a01      	ldr	r2, [sp, #4]
 8022a10:	9903      	ldr	r1, [sp, #12]
 8022a12:	428a      	cmp	r2, r1
 8022a14:	d1be      	bne.n	8022994 <mg_json_get+0x3dc>
 8022a16:	f8dd a018 	ldr.w	sl, [sp, #24]
 8022a1a:	f1ba 0f00 	cmp.w	sl, #0
 8022a1e:	d004      	beq.n	8022a2a <mg_json_get+0x472>
 8022a20:	9b05      	ldr	r3, [sp, #20]
 8022a22:	1ae3      	subs	r3, r4, r3
 8022a24:	3301      	adds	r3, #1
 8022a26:	f8ca 3000 	str.w	r3, [sl]
 8022a2a:	9d05      	ldr	r5, [sp, #20]
 8022a2c:	e005      	b.n	8022a3a <mg_json_get+0x482>
        expecting = S_COMMA_OR_EOO;
 8022a2e:	2303      	movs	r3, #3
 8022a30:	e775      	b.n	802291e <mg_json_get+0x366>
          expecting = S_COMMA_OR_EOO;
 8022a32:	2303      	movs	r3, #3
 8022a34:	e773      	b.n	802291e <mg_json_get+0x366>
  return MG_JSON_NOT_FOUND;
 8022a36:	f06f 0502 	mvn.w	r5, #2
}
 8022a3a:	4628      	mov	r0, r5
 8022a3c:	b015      	add	sp, #84	@ 0x54
 8022a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (path[0] != '$') return MG_JSON_INVALID;
 8022a42:	f06f 0501 	mvn.w	r5, #1
 8022a46:	e7f8      	b.n	8022a3a <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8022a48:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8022a4c:	e7f5      	b.n	8022a3a <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8022a4e:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8022a52:	e7f2      	b.n	8022a3a <mg_json_get+0x482>
          MG_EOO(']');
 8022a54:	f06f 0501 	mvn.w	r5, #1
 8022a58:	e7ef      	b.n	8022a3a <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8022a5a:	f06f 0501 	mvn.w	r5, #1
 8022a5e:	e7ec      	b.n	8022a3a <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8022a60:	f06f 0502 	mvn.w	r5, #2
 8022a64:	e7e9      	b.n	8022a3a <mg_json_get+0x482>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8022a66:	f06f 0502 	mvn.w	r5, #2
 8022a6a:	e7e6      	b.n	8022a3a <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8022a6c:	f06f 0501 	mvn.w	r5, #1
 8022a70:	e7e3      	b.n	8022a3a <mg_json_get+0x482>
          MG_EOO('}');
 8022a72:	f06f 0501 	mvn.w	r5, #1
 8022a76:	e7e0      	b.n	8022a3a <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8022a78:	f06f 0501 	mvn.w	r5, #1
 8022a7c:	e7dd      	b.n	8022a3a <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8022a7e:	f06f 0501 	mvn.w	r5, #1
 8022a82:	e7da      	b.n	8022a3a <mg_json_get+0x482>
          MG_EOO('O');
 8022a84:	f06f 0501 	mvn.w	r5, #1
 8022a88:	e7d7      	b.n	8022a3a <mg_json_get+0x482>
 8022a8a:	bf00      	nop

08022a8c <mg_json_get_num>:
bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 8022a8c:	b510      	push	{r4, lr}
 8022a8e:	b084      	sub	sp, #16
 8022a90:	46ec      	mov	ip, sp
 8022a92:	e88c 0003 	stmia.w	ip, {r0, r1}
 8022a96:	461c      	mov	r4, r3
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8022a98:	ab03      	add	r3, sp, #12
 8022a9a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8022a9e:	f7ff fd8b 	bl	80225b8 <mg_json_get>
 8022aa2:	1e02      	subs	r2, r0, #0
 8022aa4:	db11      	blt.n	8022aca <mg_json_get_num+0x3e>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8022aa6:	9b00      	ldr	r3, [sp, #0]
 8022aa8:	1898      	adds	r0, r3, r2
 8022aaa:	5c9a      	ldrb	r2, [r3, r2]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8022aac:	2a2d      	cmp	r2, #45	@ 0x2d
 8022aae:	d003      	beq.n	8022ab8 <mg_json_get_num+0x2c>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8022ab0:	3a30      	subs	r2, #48	@ 0x30
 8022ab2:	b2d2      	uxtb	r2, r2
 8022ab4:	2a09      	cmp	r2, #9
 8022ab6:	d80b      	bhi.n	8022ad0 <mg_json_get_num+0x44>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 8022ab8:	b164      	cbz	r4, 8022ad4 <mg_json_get_num+0x48>
 8022aba:	2200      	movs	r2, #0
 8022abc:	9903      	ldr	r1, [sp, #12]
 8022abe:	f7fd faef 	bl	80200a0 <mg_atod>
 8022ac2:	ed84 0b00 	vstr	d0, [r4]
    found = 1;
 8022ac6:	2001      	movs	r0, #1
 8022ac8:	e000      	b.n	8022acc <mg_json_get_num+0x40>
  int n, toklen, found = 0;
 8022aca:	2000      	movs	r0, #0
}
 8022acc:	b004      	add	sp, #16
 8022ace:	bd10      	pop	{r4, pc}
  int n, toklen, found = 0;
 8022ad0:	2000      	movs	r0, #0
 8022ad2:	e7fb      	b.n	8022acc <mg_json_get_num+0x40>
    found = 1;
 8022ad4:	2001      	movs	r0, #1
 8022ad6:	e7f9      	b.n	8022acc <mg_json_get_num+0x40>

08022ad8 <mg_json_get_bool>:
bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 8022ad8:	b510      	push	{r4, lr}
 8022ada:	b082      	sub	sp, #8
 8022adc:	46ec      	mov	ip, sp
 8022ade:	e88c 0003 	stmia.w	ip, {r0, r1}
 8022ae2:	461c      	mov	r4, r3
  int found = 0, off = mg_json_get(json, path, NULL);
 8022ae4:	2300      	movs	r3, #0
 8022ae6:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8022aea:	f7ff fd65 	bl	80225b8 <mg_json_get>
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 8022aee:	2800      	cmp	r0, #0
 8022af0:	db0f      	blt.n	8022b12 <mg_json_get_bool+0x3a>
 8022af2:	9b00      	ldr	r3, [sp, #0]
 8022af4:	5c1b      	ldrb	r3, [r3, r0]
 8022af6:	2b74      	cmp	r3, #116	@ 0x74
 8022af8:	d003      	beq.n	8022b02 <mg_json_get_bool+0x2a>
 8022afa:	2b66      	cmp	r3, #102	@ 0x66
 8022afc:	d001      	beq.n	8022b02 <mg_json_get_bool+0x2a>
  int found = 0, off = mg_json_get(json, path, NULL);
 8022afe:	2000      	movs	r0, #0
 8022b00:	e008      	b.n	8022b14 <mg_json_get_bool+0x3c>
    if (v != NULL) *v = json.buf[off] == 't';
 8022b02:	b14c      	cbz	r4, 8022b18 <mg_json_get_bool+0x40>
 8022b04:	2b74      	cmp	r3, #116	@ 0x74
 8022b06:	bf14      	ite	ne
 8022b08:	2300      	movne	r3, #0
 8022b0a:	2301      	moveq	r3, #1
 8022b0c:	7023      	strb	r3, [r4, #0]
    found = 1;
 8022b0e:	2001      	movs	r0, #1
 8022b10:	e000      	b.n	8022b14 <mg_json_get_bool+0x3c>
  int found = 0, off = mg_json_get(json, path, NULL);
 8022b12:	2000      	movs	r0, #0
}
 8022b14:	b002      	add	sp, #8
 8022b16:	bd10      	pop	{r4, pc}
    found = 1;
 8022b18:	2001      	movs	r0, #1
 8022b1a:	e7fb      	b.n	8022b14 <mg_json_get_bool+0x3c>

08022b1c <mg_hexdump>:
void mg_hexdump(const void *buf, size_t len) {
 8022b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022b1e:	b085      	sub	sp, #20
 8022b20:	4606      	mov	r6, r0
 8022b22:	460f      	mov	r7, r1
  for (i = 0; i < len; i++) {
 8022b24:	2500      	movs	r5, #0
  unsigned char ascii[16], alen = 0;
 8022b26:	462c      	mov	r4, r5
  for (i = 0; i < len; i++) {
 8022b28:	e038      	b.n	8022b9c <mg_hexdump+0x80>
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 8022b2a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022b2e:	f7fd fbc9 	bl	80202c4 <nibble>
 8022b32:	f7fd fbaf 	bl	8020294 <logc>
 8022b36:	f3c5 2003 	ubfx	r0, r5, #8, #4
 8022b3a:	f7fd fbc3 	bl	80202c4 <nibble>
 8022b3e:	f7fd fba9 	bl	8020294 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 8022b42:	f3c5 1003 	ubfx	r0, r5, #4, #4
 8022b46:	f7fd fbbd 	bl	80202c4 <nibble>
 8022b4a:	f7fd fba3 	bl	8020294 <logc>
 8022b4e:	2030      	movs	r0, #48	@ 0x30
 8022b50:	f7fd fba0 	bl	8020294 <logc>
 8022b54:	2103      	movs	r1, #3
 8022b56:	4829      	ldr	r0, [pc, #164]	@ (8022bfc <mg_hexdump+0xe0>)
 8022b58:	f7fd fba8 	bl	80202ac <logs>
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 8022b5c:	5d70      	ldrb	r0, [r6, r5]
 8022b5e:	0900      	lsrs	r0, r0, #4
 8022b60:	f7fd fbb0 	bl	80202c4 <nibble>
 8022b64:	f7fd fb96 	bl	8020294 <logc>
 8022b68:	5d70      	ldrb	r0, [r6, r5]
 8022b6a:	f000 000f 	and.w	r0, r0, #15
 8022b6e:	f7fd fba9 	bl	80202c4 <nibble>
 8022b72:	f7fd fb8f 	bl	8020294 <logc>
    logc(' ');                                         // Space after hex number
 8022b76:	2020      	movs	r0, #32
 8022b78:	f7fd fb8c 	bl	8020294 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8022b7c:	5d72      	ldrb	r2, [r6, r5]
 8022b7e:	f1a2 0320 	sub.w	r3, r2, #32
 8022b82:	b2db      	uxtb	r3, r3
 8022b84:	2b5e      	cmp	r3, #94	@ 0x5e
 8022b86:	d900      	bls.n	8022b8a <mg_hexdump+0x6e>
 8022b88:	222e      	movs	r2, #46	@ 0x2e
 8022b8a:	1c63      	adds	r3, r4, #1
 8022b8c:	f104 0110 	add.w	r1, r4, #16
 8022b90:	eb0d 0401 	add.w	r4, sp, r1
 8022b94:	f804 2c10 	strb.w	r2, [r4, #-16]
  for (i = 0; i < len; i++) {
 8022b98:	3501      	adds	r5, #1
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8022b9a:	b2dc      	uxtb	r4, r3
  for (i = 0; i < len; i++) {
 8022b9c:	42bd      	cmp	r5, r7
 8022b9e:	d21e      	bcs.n	8022bde <mg_hexdump+0xc2>
    if ((i % 16) == 0) {
 8022ba0:	f015 0f0f 	tst.w	r5, #15
 8022ba4:	d1da      	bne.n	8022b5c <mg_hexdump+0x40>
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 8022ba6:	2d00      	cmp	r5, #0
 8022ba8:	d0bf      	beq.n	8022b2a <mg_hexdump+0xe>
 8022baa:	2102      	movs	r1, #2
 8022bac:	4814      	ldr	r0, [pc, #80]	@ (8022c00 <mg_hexdump+0xe4>)
 8022bae:	f7fd fb7d 	bl	80202ac <logs>
 8022bb2:	2110      	movs	r1, #16
 8022bb4:	4668      	mov	r0, sp
 8022bb6:	f7fd fb79 	bl	80202ac <logs>
 8022bba:	200a      	movs	r0, #10
 8022bbc:	f7fd fb6a 	bl	8020294 <logc>
 8022bc0:	2400      	movs	r4, #0
 8022bc2:	e7b2      	b.n	8022b2a <mg_hexdump+0xe>
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 8022bc4:	2103      	movs	r1, #3
 8022bc6:	480d      	ldr	r0, [pc, #52]	@ (8022bfc <mg_hexdump+0xe0>)
 8022bc8:	f7fd fb70 	bl	80202ac <logs>
 8022bcc:	1c63      	adds	r3, r4, #1
 8022bce:	f104 0210 	add.w	r2, r4, #16
 8022bd2:	eb0d 0402 	add.w	r4, sp, r2
 8022bd6:	2220      	movs	r2, #32
 8022bd8:	f804 2c10 	strb.w	r2, [r4, #-16]
 8022bdc:	b2dc      	uxtb	r4, r3
 8022bde:	2c0f      	cmp	r4, #15
 8022be0:	d9f0      	bls.n	8022bc4 <mg_hexdump+0xa8>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 8022be2:	2102      	movs	r1, #2
 8022be4:	4806      	ldr	r0, [pc, #24]	@ (8022c00 <mg_hexdump+0xe4>)
 8022be6:	f7fd fb61 	bl	80202ac <logs>
 8022bea:	2110      	movs	r1, #16
 8022bec:	4668      	mov	r0, sp
 8022bee:	f7fd fb5d 	bl	80202ac <logs>
 8022bf2:	200a      	movs	r0, #10
 8022bf4:	f7fd fb4e 	bl	8020294 <logc>
}
 8022bf8:	b005      	add	sp, #20
 8022bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022bfc:	08039758 	.word	0x08039758
 8022c00:	08039754 	.word	0x08039754

08022c04 <mg_md5_init>:
  ctx->buf[0] = 0x67452301;
 8022c04:	4b09      	ldr	r3, [pc, #36]	@ (8022c2c <mg_md5_init+0x28>)
 8022c06:	6003      	str	r3, [r0, #0]
  ctx->buf[1] = 0xefcdab89;
 8022c08:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 8022c0c:	6043      	str	r3, [r0, #4]
  ctx->buf[2] = 0x98badcfe;
 8022c0e:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 8022c12:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 8022c16:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 8022c1a:	6083      	str	r3, [r0, #8]
  ctx->buf[3] = 0x10325476;
 8022c1c:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 8022c20:	60c3      	str	r3, [r0, #12]
  ctx->bits[0] = 0;
 8022c22:	2300      	movs	r3, #0
 8022c24:	6103      	str	r3, [r0, #16]
  ctx->bits[1] = 0;
 8022c26:	6143      	str	r3, [r0, #20]
}
 8022c28:	4770      	bx	lr
 8022c2a:	bf00      	nop
 8022c2c:	67452301 	.word	0x67452301

08022c30 <mg_md5_update>:
void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 8022c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022c34:	4606      	mov	r6, r0
 8022c36:	460c      	mov	r4, r1
 8022c38:	4615      	mov	r5, r2
  t = ctx->bits[0];
 8022c3a:	6903      	ldr	r3, [r0, #16]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 8022c3c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8022c40:	6102      	str	r2, [r0, #16]
 8022c42:	429a      	cmp	r2, r3
 8022c44:	d202      	bcs.n	8022c4c <mg_md5_update+0x1c>
 8022c46:	6942      	ldr	r2, [r0, #20]
 8022c48:	3201      	adds	r2, #1
 8022c4a:	6142      	str	r2, [r0, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 8022c4c:	6972      	ldr	r2, [r6, #20]
 8022c4e:	eb02 7255 	add.w	r2, r2, r5, lsr #29
 8022c52:	6172      	str	r2, [r6, #20]
  t = (t >> 3) & 0x3f;
 8022c54:	f3c3 07c5 	ubfx	r7, r3, #3, #6
  if (t) {
 8022c58:	f413 7ffc 	tst.w	r3, #504	@ 0x1f8
 8022c5c:	d035      	beq.n	8022cca <mg_md5_update+0x9a>
    unsigned char *p = (unsigned char *) ctx->in + t;
 8022c5e:	f106 0918 	add.w	r9, r6, #24
 8022c62:	eb09 0007 	add.w	r0, r9, r7
    t = 64 - t;
 8022c66:	f1c7 0840 	rsb	r8, r7, #64	@ 0x40
    if (len < t) {
 8022c6a:	4545      	cmp	r5, r8
 8022c6c:	d30b      	bcc.n	8022c86 <mg_md5_update+0x56>
    memcpy(p, buf, t);
 8022c6e:	4642      	mov	r2, r8
 8022c70:	4621      	mov	r1, r4
 8022c72:	f00a fd41 	bl	802d6f8 <memcpy>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8022c76:	4649      	mov	r1, r9
 8022c78:	4630      	mov	r0, r6
 8022c7a:	f7fd fb2d 	bl	80202d8 <mg_md5_transform>
    buf += t;
 8022c7e:	4444      	add	r4, r8
    len -= t;
 8022c80:	3f40      	subs	r7, #64	@ 0x40
 8022c82:	443d      	add	r5, r7
 8022c84:	e021      	b.n	8022cca <mg_md5_update+0x9a>
      memcpy(p, buf, len);
 8022c86:	462a      	mov	r2, r5
 8022c88:	4621      	mov	r1, r4
 8022c8a:	f00a fd35 	bl	802d6f8 <memcpy>
      return;
 8022c8e:	e024      	b.n	8022cda <mg_md5_update+0xaa>
    memcpy(ctx->in, buf, 64);
 8022c90:	f106 0118 	add.w	r1, r6, #24
 8022c94:	4623      	mov	r3, r4
 8022c96:	468c      	mov	ip, r1
 8022c98:	f104 0840 	add.w	r8, r4, #64	@ 0x40
 8022c9c:	681f      	ldr	r7, [r3, #0]
 8022c9e:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8022ca2:	6898      	ldr	r0, [r3, #8]
 8022ca4:	68da      	ldr	r2, [r3, #12]
 8022ca6:	f8cc 7000 	str.w	r7, [ip]
 8022caa:	f8cc e004 	str.w	lr, [ip, #4]
 8022cae:	f8cc 0008 	str.w	r0, [ip, #8]
 8022cb2:	f8cc 200c 	str.w	r2, [ip, #12]
 8022cb6:	3310      	adds	r3, #16
 8022cb8:	f10c 0c10 	add.w	ip, ip, #16
 8022cbc:	4543      	cmp	r3, r8
 8022cbe:	d1ed      	bne.n	8022c9c <mg_md5_update+0x6c>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8022cc0:	4630      	mov	r0, r6
 8022cc2:	f7fd fb09 	bl	80202d8 <mg_md5_transform>
    buf += 64;
 8022cc6:	3440      	adds	r4, #64	@ 0x40
    len -= 64;
 8022cc8:	3d40      	subs	r5, #64	@ 0x40
  while (len >= 64) {
 8022cca:	2d3f      	cmp	r5, #63	@ 0x3f
 8022ccc:	d8e0      	bhi.n	8022c90 <mg_md5_update+0x60>
  memcpy(ctx->in, buf, len);
 8022cce:	462a      	mov	r2, r5
 8022cd0:	4621      	mov	r1, r4
 8022cd2:	f106 0018 	add.w	r0, r6, #24
 8022cd6:	f00a fd0f 	bl	802d6f8 <memcpy>
}
 8022cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08022cde <mg_md5_final>:
void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 8022cde:	b570      	push	{r4, r5, r6, lr}
 8022ce0:	4604      	mov	r4, r0
 8022ce2:	460d      	mov	r5, r1
  count = (ctx->bits[0] >> 3) & 0x3F;
 8022ce4:	6903      	ldr	r3, [r0, #16]
 8022ce6:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  p = ctx->in + count;
 8022cea:	f100 0618 	add.w	r6, r0, #24
 8022cee:	18f0      	adds	r0, r6, r3
  *p++ = 0x80;
 8022cf0:	3001      	adds	r0, #1
 8022cf2:	2280      	movs	r2, #128	@ 0x80
 8022cf4:	54f2      	strb	r2, [r6, r3]
  count = 64 - 1 - count;
 8022cf6:	f1c3 023f 	rsb	r2, r3, #63	@ 0x3f
  if (count < 8) {
 8022cfa:	2a07      	cmp	r2, #7
 8022cfc:	d821      	bhi.n	8022d42 <mg_md5_final+0x64>
    memset(p, 0, count);
 8022cfe:	2100      	movs	r1, #0
 8022d00:	f009 fabe 	bl	802c280 <memset>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8022d04:	4631      	mov	r1, r6
 8022d06:	4620      	mov	r0, r4
 8022d08:	f7fd fae6 	bl	80202d8 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 8022d0c:	2238      	movs	r2, #56	@ 0x38
 8022d0e:	2100      	movs	r1, #0
 8022d10:	4630      	mov	r0, r6
 8022d12:	f009 fab5 	bl	802c280 <memset>
  a[14] = ctx->bits[0];
 8022d16:	6923      	ldr	r3, [r4, #16]
 8022d18:	6523      	str	r3, [r4, #80]	@ 0x50
  a[15] = ctx->bits[1];
 8022d1a:	6963      	ldr	r3, [r4, #20]
 8022d1c:	6563      	str	r3, [r4, #84]	@ 0x54
  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8022d1e:	4631      	mov	r1, r6
 8022d20:	4620      	mov	r0, r4
 8022d22:	f7fd fad9 	bl	80202d8 <mg_md5_transform>
  memcpy(digest, ctx->buf, 16);
 8022d26:	6820      	ldr	r0, [r4, #0]
 8022d28:	6861      	ldr	r1, [r4, #4]
 8022d2a:	68a2      	ldr	r2, [r4, #8]
 8022d2c:	68e3      	ldr	r3, [r4, #12]
 8022d2e:	6028      	str	r0, [r5, #0]
 8022d30:	6069      	str	r1, [r5, #4]
 8022d32:	60aa      	str	r2, [r5, #8]
 8022d34:	60eb      	str	r3, [r5, #12]
  memset((char *) ctx, 0, sizeof(*ctx));
 8022d36:	2258      	movs	r2, #88	@ 0x58
 8022d38:	2100      	movs	r1, #0
 8022d3a:	4620      	mov	r0, r4
 8022d3c:	f009 faa0 	bl	802c280 <memset>
}
 8022d40:	bd70      	pop	{r4, r5, r6, pc}
    memset(p, 0, count - 8);
 8022d42:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 8022d46:	2100      	movs	r1, #0
 8022d48:	f009 fa9a 	bl	802c280 <memset>
 8022d4c:	e7e3      	b.n	8022d16 <mg_md5_final+0x38>

08022d4e <mg_mqtt_parse>:
                  struct mg_mqtt_message *m) {
 8022d4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022d52:	4604      	mov	r4, r0
 8022d54:	460d      	mov	r5, r1
 8022d56:	4617      	mov	r7, r2
 8022d58:	461e      	mov	r6, r3
  memset(m, 0, sizeof(*m));
 8022d5a:	2228      	movs	r2, #40	@ 0x28
 8022d5c:	2100      	movs	r1, #0
 8022d5e:	4618      	mov	r0, r3
 8022d60:	f009 fa8e 	bl	802c280 <memset>
  m->dgram.buf = (char *) buf;
 8022d64:	6134      	str	r4, [r6, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 8022d66:	2d01      	cmp	r5, #1
 8022d68:	f240 8088 	bls.w	8022e7c <mg_mqtt_parse+0x12e>
  m->cmd = (uint8_t) (buf[0] >> 4);
 8022d6c:	7820      	ldrb	r0, [r4, #0]
 8022d6e:	0900      	lsrs	r0, r0, #4
 8022d70:	76b0      	strb	r0, [r6, #26]
  m->qos = (buf[0] >> 1) & 3;
 8022d72:	46a4      	mov	ip, r4
 8022d74:	f81c 9b01 	ldrb.w	r9, [ip], #1
 8022d78:	f3c9 0941 	ubfx	r9, r9, #1, #2
 8022d7c:	f886 901b 	strb.w	r9, [r6, #27]
  n = len_len = 0;
 8022d80:	2300      	movs	r3, #0
 8022d82:	4619      	mov	r1, r3
  uint8_t lc = 0, *p, *end;
 8022d84:	461a      	mov	r2, r3
  while ((size_t) (p - buf) < len) {
 8022d86:	ebac 0e04 	sub.w	lr, ip, r4
 8022d8a:	45ae      	cmp	lr, r5
 8022d8c:	d211      	bcs.n	8022db2 <mg_mqtt_parse+0x64>
    lc = *((uint8_t *) p++);
 8022d8e:	f81c 2b01 	ldrb.w	r2, [ip], #1
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 8022d92:	f002 0e7f 	and.w	lr, r2, #127	@ 0x7f
 8022d96:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
 8022d9a:	fa0e fe08 	lsl.w	lr, lr, r8
 8022d9e:	4471      	add	r1, lr
    len_len++;
 8022da0:	3301      	adds	r3, #1
    if (!(lc & 0x80)) break;
 8022da2:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8022da6:	d004      	beq.n	8022db2 <mg_mqtt_parse+0x64>
    if (len_len >= 4) return MQTT_MALFORMED;
 8022da8:	2b03      	cmp	r3, #3
 8022daa:	d9ec      	bls.n	8022d86 <mg_mqtt_parse+0x38>
 8022dac:	2002      	movs	r0, #2
}
 8022dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  end = p + n;
 8022db2:	eb0c 0801 	add.w	r8, ip, r1
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8022db6:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8022dba:	d161      	bne.n	8022e80 <mg_mqtt_parse+0x132>
 8022dbc:	4425      	add	r5, r4
 8022dbe:	4545      	cmp	r5, r8
 8022dc0:	d360      	bcc.n	8022e84 <mg_mqtt_parse+0x136>
  m->dgram.len = (size_t) (end - buf);
 8022dc2:	eba8 0304 	sub.w	r3, r8, r4
 8022dc6:	6173      	str	r3, [r6, #20]
  switch (m->cmd) {
 8022dc8:	2803      	cmp	r0, #3
 8022dca:	d01c      	beq.n	8022e06 <mg_mqtt_parse+0xb8>
 8022dcc:	d80a      	bhi.n	8022de4 <mg_mqtt_parse+0x96>
 8022dce:	2802      	cmp	r0, #2
 8022dd0:	d106      	bne.n	8022de0 <mg_mqtt_parse+0x92>
      if (end - p < 2) return MQTT_MALFORMED;
 8022dd2:	2901      	cmp	r1, #1
 8022dd4:	dd5a      	ble.n	8022e8c <mg_mqtt_parse+0x13e>
      m->ack = p[1];
 8022dd6:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022dda:	7733      	strb	r3, [r6, #28]
  return MQTT_OK;
 8022ddc:	2000      	movs	r0, #0
      break;
 8022dde:	e7e6      	b.n	8022dae <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 8022de0:	2000      	movs	r0, #0
 8022de2:	e7e4      	b.n	8022dae <mg_mqtt_parse+0x60>
 8022de4:	3804      	subs	r0, #4
 8022de6:	b2c0      	uxtb	r0, r0
 8022de8:	2807      	cmp	r0, #7
 8022dea:	d84d      	bhi.n	8022e88 <mg_mqtt_parse+0x13a>
      if (p + 2 > end) return MQTT_MALFORMED;
 8022dec:	f10c 0302 	add.w	r3, ip, #2
 8022df0:	4543      	cmp	r3, r8
 8022df2:	d84d      	bhi.n	8022e90 <mg_mqtt_parse+0x142>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8022df4:	f89c 2000 	ldrb.w	r2, [ip]
 8022df8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022dfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022e00:	8333      	strh	r3, [r6, #24]
  return MQTT_OK;
 8022e02:	2000      	movs	r0, #0
      break;
 8022e04:	e7d3      	b.n	8022dae <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8022e06:	f10c 0202 	add.w	r2, ip, #2
 8022e0a:	4542      	cmp	r2, r8
 8022e0c:	d842      	bhi.n	8022e94 <mg_mqtt_parse+0x146>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8022e0e:	f89c 1000 	ldrb.w	r1, [ip]
 8022e12:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022e16:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8022e1a:	6073      	str	r3, [r6, #4]
      m->topic.buf = (char *) p + 2;
 8022e1c:	6032      	str	r2, [r6, #0]
      p += 2 + m->topic.len;
 8022e1e:	3302      	adds	r3, #2
 8022e20:	eb0c 0503 	add.w	r5, ip, r3
      if (p > end) return MQTT_MALFORMED;
 8022e24:	45a8      	cmp	r8, r5
 8022e26:	d337      	bcc.n	8022e98 <mg_mqtt_parse+0x14a>
      if (m->qos > 0) {
 8022e28:	f1b9 0f00 	cmp.w	r9, #0
 8022e2c:	d008      	beq.n	8022e40 <mg_mqtt_parse+0xf2>
        if (p + 2 > end) return MQTT_MALFORMED;
 8022e2e:	1caa      	adds	r2, r5, #2
 8022e30:	4542      	cmp	r2, r8
 8022e32:	d833      	bhi.n	8022e9c <mg_mqtt_parse+0x14e>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8022e34:	7829      	ldrb	r1, [r5, #0]
 8022e36:	786b      	ldrb	r3, [r5, #1]
 8022e38:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8022e3c:	8333      	strh	r3, [r6, #24]
        p += 2;
 8022e3e:	4615      	mov	r5, r2
      if (p > end) return MQTT_MALFORMED;
 8022e40:	4545      	cmp	r5, r8
 8022e42:	d82d      	bhi.n	8022ea0 <mg_mqtt_parse+0x152>
      if (version == 5 && p + 2 < end) {
 8022e44:	2f05      	cmp	r7, #5
 8022e46:	d007      	beq.n	8022e58 <mg_mqtt_parse+0x10a>
      if (p > end) return MQTT_MALFORMED;
 8022e48:	4545      	cmp	r5, r8
 8022e4a:	d82d      	bhi.n	8022ea8 <mg_mqtt_parse+0x15a>
      m->data.buf = (char *) p;
 8022e4c:	60b5      	str	r5, [r6, #8]
      m->data.len = (size_t) (end - p);
 8022e4e:	eba8 0505 	sub.w	r5, r8, r5
 8022e52:	60f5      	str	r5, [r6, #12]
  return MQTT_OK;
 8022e54:	2000      	movs	r0, #0
      break;
 8022e56:	e7aa      	b.n	8022dae <mg_mqtt_parse+0x60>
      if (version == 5 && p + 2 < end) {
 8022e58:	1cab      	adds	r3, r5, #2
 8022e5a:	4543      	cmp	r3, r8
 8022e5c:	d2f4      	bcs.n	8022e48 <mg_mqtt_parse+0xfa>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 8022e5e:	f106 0224 	add.w	r2, r6, #36	@ 0x24
 8022e62:	eba8 0105 	sub.w	r1, r8, r5
 8022e66:	4628      	mov	r0, r5
 8022e68:	f7fd fdde 	bl	8020a28 <decode_varint>
        if (!len_len) return MQTT_MALFORMED;
 8022e6c:	b1d0      	cbz	r0, 8022ea4 <mg_mqtt_parse+0x156>
        m->props_start = (size_t) (p + len_len - buf);
 8022e6e:	182b      	adds	r3, r5, r0
 8022e70:	1b1b      	subs	r3, r3, r4
 8022e72:	6233      	str	r3, [r6, #32]
        p += len_len + m->props_size;
 8022e74:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8022e76:	4403      	add	r3, r0
 8022e78:	441d      	add	r5, r3
 8022e7a:	e7e5      	b.n	8022e48 <mg_mqtt_parse+0xfa>
  if (len < 2) return MQTT_INCOMPLETE;
 8022e7c:	2001      	movs	r0, #1
 8022e7e:	e796      	b.n	8022dae <mg_mqtt_parse+0x60>
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8022e80:	2001      	movs	r0, #1
 8022e82:	e794      	b.n	8022dae <mg_mqtt_parse+0x60>
 8022e84:	2001      	movs	r0, #1
 8022e86:	e792      	b.n	8022dae <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 8022e88:	2000      	movs	r0, #0
 8022e8a:	e790      	b.n	8022dae <mg_mqtt_parse+0x60>
      if (end - p < 2) return MQTT_MALFORMED;
 8022e8c:	2002      	movs	r0, #2
 8022e8e:	e78e      	b.n	8022dae <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8022e90:	2002      	movs	r0, #2
 8022e92:	e78c      	b.n	8022dae <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8022e94:	2002      	movs	r0, #2
 8022e96:	e78a      	b.n	8022dae <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8022e98:	2002      	movs	r0, #2
 8022e9a:	e788      	b.n	8022dae <mg_mqtt_parse+0x60>
        if (p + 2 > end) return MQTT_MALFORMED;
 8022e9c:	2002      	movs	r0, #2
 8022e9e:	e786      	b.n	8022dae <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8022ea0:	2002      	movs	r0, #2
 8022ea2:	e784      	b.n	8022dae <mg_mqtt_parse+0x60>
        if (!len_len) return MQTT_MALFORMED;
 8022ea4:	2002      	movs	r0, #2
 8022ea6:	e782      	b.n	8022dae <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8022ea8:	2002      	movs	r0, #2
 8022eaa:	e780      	b.n	8022dae <mg_mqtt_parse+0x60>

08022eac <mg_alloc_conn>:
struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 8022eac:	b510      	push	{r4, lr}
 8022eae:	4604      	mov	r4, r0
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 8022eb0:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8022eb2:	31b0      	adds	r1, #176	@ 0xb0
 8022eb4:	2001      	movs	r0, #1
 8022eb6:	f7ff f95f 	bl	8022178 <mg_calloc>
  if (c != NULL) {
 8022eba:	4603      	mov	r3, r0
 8022ebc:	b148      	cbz	r0, 8022ed2 <mg_alloc_conn+0x26>
    c->mgr = mgr;
 8022ebe:	6044      	str	r4, [r0, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 8022ec0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8022ec4:	6742      	str	r2, [r0, #116]	@ 0x74
 8022ec6:	6442      	str	r2, [r0, #68]	@ 0x44
 8022ec8:	6542      	str	r2, [r0, #84]	@ 0x54
    c->id = ++mgr->nextid;
 8022eca:	69e2      	ldr	r2, [r4, #28]
 8022ecc:	3201      	adds	r2, #1
 8022ece:	61e2      	str	r2, [r4, #28]
 8022ed0:	6342      	str	r2, [r0, #52]	@ 0x34
}
 8022ed2:	4618      	mov	r0, r3
 8022ed4:	bd10      	pop	{r4, pc}
	...

08022ed8 <mg_mgr_init>:
void mg_mgr_init(struct mg_mgr *mgr) {
 8022ed8:	b510      	push	{r4, lr}
 8022eda:	4604      	mov	r4, r0
  memset(mgr, 0, sizeof(*mgr));
 8022edc:	2248      	movs	r2, #72	@ 0x48
 8022ede:	2100      	movs	r1, #0
 8022ee0:	f009 f9ce 	bl	802c280 <memset>
  mgr->epoll_fd = -1;
 8022ee4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022ee8:	63a3      	str	r3, [r4, #56]	@ 0x38
  mgr->pipe = MG_INVALID_SOCKET;
 8022eea:	6463      	str	r3, [r4, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 8022eec:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8022ef0:	6163      	str	r3, [r4, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 8022ef2:	4b02      	ldr	r3, [pc, #8]	@ (8022efc <mg_mgr_init+0x24>)
 8022ef4:	6063      	str	r3, [r4, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8022ef6:	4b02      	ldr	r3, [pc, #8]	@ (8022f00 <mg_mgr_init+0x28>)
 8022ef8:	60e3      	str	r3, [r4, #12]
}
 8022efa:	bd10      	pop	{r4, pc}
 8022efc:	0803975c 	.word	0x0803975c
 8022f00:	08039770 	.word	0x08039770

08022f04 <mg_snprintf>:
size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8022f04:	b40c      	push	{r2, r3}
 8022f06:	b500      	push	{lr}
 8022f08:	b083      	sub	sp, #12
 8022f0a:	ab04      	add	r3, sp, #16
 8022f0c:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8022f10:	9301      	str	r3, [sp, #4]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8022f12:	ab01      	add	r3, sp, #4
 8022f14:	f000 fce0 	bl	80238d8 <mg_vsnprintf>
}
 8022f18:	b003      	add	sp, #12
 8022f1a:	f85d eb04 	ldr.w	lr, [sp], #4
 8022f1e:	b002      	add	sp, #8
 8022f20:	4770      	bx	lr
 8022f22:	0000      	movs	r0, r0
 8022f24:	0000      	movs	r0, r0
	...

08022f28 <mg_dtoa>:
static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8022f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f2c:	b093      	sub	sp, #76	@ 0x4c
 8022f2e:	9005      	str	r0, [sp, #20]
 8022f30:	9106      	str	r1, [sp, #24]
 8022f32:	ec51 0b10 	vmov	r0, r1, d0
 8022f36:	ed8d 0b02 	vstr	d0, [sp, #8]
 8022f3a:	4690      	mov	r8, r2
 8022f3c:	9307      	str	r3, [sp, #28]
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8022f3e:	2200      	movs	r2, #0
 8022f40:	2300      	movs	r3, #0
 8022f42:	f7ed fdd9 	bl	8010af8 <__aeabi_dcmpeq>
 8022f46:	b9c8      	cbnz	r0, 8022f7c <mg_dtoa+0x54>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8022f48:	ed9d 0b02 	vldr	d0, [sp, #8]
 8022f4c:	f7fc fb1c 	bl	801f588 <xisinf>
 8022f50:	b9d8      	cbnz	r0, 8022f8a <mg_dtoa+0x62>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8022f52:	ed9d 0b02 	vldr	d0, [sp, #8]
 8022f56:	f7fc fb29 	bl	801f5ac <xisnan>
 8022f5a:	4606      	mov	r6, r0
 8022f5c:	bb28      	cbnz	r0, 8022faa <mg_dtoa+0x82>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8022f5e:	2200      	movs	r2, #0
 8022f60:	2300      	movs	r3, #0
 8022f62:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8022f66:	4620      	mov	r0, r4
 8022f68:	4629      	mov	r1, r5
 8022f6a:	f7ed fdcf 	bl	8010b0c <__aeabi_dcmplt>
 8022f6e:	bb18      	cbnz	r0, 8022fb8 <mg_dtoa+0x90>
  int i, s = 0, n = 0, e = 0;
 8022f70:	4637      	mov	r7, r6
  mul = 1.0;
 8022f72:	2400      	movs	r4, #0
 8022f74:	4dba      	ldr	r5, [pc, #744]	@ (8023260 <mg_dtoa+0x338>)
 8022f76:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8022f7a:	e02f      	b.n	8022fdc <mg_dtoa+0xb4>
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8022f7c:	4bb9      	ldr	r3, [pc, #740]	@ (8023264 <mg_dtoa+0x33c>)
 8022f7e:	4aba      	ldr	r2, [pc, #744]	@ (8023268 <mg_dtoa+0x340>)
 8022f80:	9906      	ldr	r1, [sp, #24]
 8022f82:	9805      	ldr	r0, [sp, #20]
 8022f84:	f7ff ffbe 	bl	8022f04 <mg_snprintf>
 8022f88:	e1d3      	b.n	8023332 <mg_dtoa+0x40a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8022f8a:	2200      	movs	r2, #0
 8022f8c:	2300      	movs	r3, #0
 8022f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022f92:	f7ed fdd9 	bl	8010b48 <__aeabi_dcmpgt>
 8022f96:	b130      	cbz	r0, 8022fa6 <mg_dtoa+0x7e>
 8022f98:	4bb4      	ldr	r3, [pc, #720]	@ (802326c <mg_dtoa+0x344>)
 8022f9a:	4ab3      	ldr	r2, [pc, #716]	@ (8023268 <mg_dtoa+0x340>)
 8022f9c:	9906      	ldr	r1, [sp, #24]
 8022f9e:	9805      	ldr	r0, [sp, #20]
 8022fa0:	f7ff ffb0 	bl	8022f04 <mg_snprintf>
 8022fa4:	e1c5      	b.n	8023332 <mg_dtoa+0x40a>
 8022fa6:	4bb2      	ldr	r3, [pc, #712]	@ (8023270 <mg_dtoa+0x348>)
 8022fa8:	e7f7      	b.n	8022f9a <mg_dtoa+0x72>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8022faa:	4bb2      	ldr	r3, [pc, #712]	@ (8023274 <mg_dtoa+0x34c>)
 8022fac:	4aae      	ldr	r2, [pc, #696]	@ (8023268 <mg_dtoa+0x340>)
 8022fae:	9906      	ldr	r1, [sp, #24]
 8022fb0:	9805      	ldr	r0, [sp, #20]
 8022fb2:	f7ff ffa7 	bl	8022f04 <mg_snprintf>
 8022fb6:	e1bc      	b.n	8023332 <mg_dtoa+0x40a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8022fb8:	4622      	mov	r2, r4
 8022fba:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8022fbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022fc2:	232d      	movs	r3, #45	@ 0x2d
 8022fc4:	f88d 3020 	strb.w	r3, [sp, #32]
 8022fc8:	2701      	movs	r7, #1
 8022fca:	e7d2      	b.n	8022f72 <mg_dtoa+0x4a>
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8022fcc:	2200      	movs	r2, #0
 8022fce:	4baa      	ldr	r3, [pc, #680]	@ (8023278 <mg_dtoa+0x350>)
 8022fd0:	4620      	mov	r0, r4
 8022fd2:	4629      	mov	r1, r5
 8022fd4:	f7ed fb28 	bl	8010628 <__aeabi_dmul>
 8022fd8:	4604      	mov	r4, r0
 8022fda:	460d      	mov	r5, r1
 8022fdc:	2200      	movs	r2, #0
 8022fde:	4ba6      	ldr	r3, [pc, #664]	@ (8023278 <mg_dtoa+0x350>)
 8022fe0:	4650      	mov	r0, sl
 8022fe2:	4659      	mov	r1, fp
 8022fe4:	f7ed fda6 	bl	8010b34 <__aeabi_dcmpge>
 8022fe8:	b1b0      	cbz	r0, 8023018 <mg_dtoa+0xf0>
 8022fea:	4622      	mov	r2, r4
 8022fec:	462b      	mov	r3, r5
 8022fee:	4650      	mov	r0, sl
 8022ff0:	4659      	mov	r1, fp
 8022ff2:	f7ed fc43 	bl	801087c <__aeabi_ddiv>
 8022ff6:	2200      	movs	r2, #0
 8022ff8:	4b9f      	ldr	r3, [pc, #636]	@ (8023278 <mg_dtoa+0x350>)
 8022ffa:	f7ed fd9b 	bl	8010b34 <__aeabi_dcmpge>
 8022ffe:	2800      	cmp	r0, #0
 8023000:	d1e4      	bne.n	8022fcc <mg_dtoa+0xa4>
 8023002:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8023006:	e007      	b.n	8023018 <mg_dtoa+0xf0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8023008:	2200      	movs	r2, #0
 802300a:	4b9b      	ldr	r3, [pc, #620]	@ (8023278 <mg_dtoa+0x350>)
 802300c:	4620      	mov	r0, r4
 802300e:	4629      	mov	r1, r5
 8023010:	f7ed fc34 	bl	801087c <__aeabi_ddiv>
 8023014:	4604      	mov	r4, r0
 8023016:	460d      	mov	r5, r1
 8023018:	2200      	movs	r2, #0
 802301a:	4b91      	ldr	r3, [pc, #580]	@ (8023260 <mg_dtoa+0x338>)
 802301c:	4650      	mov	r0, sl
 802301e:	4659      	mov	r1, fp
 8023020:	f7ed fd7e 	bl	8010b20 <__aeabi_dcmple>
 8023024:	b158      	cbz	r0, 802303e <mg_dtoa+0x116>
 8023026:	4622      	mov	r2, r4
 8023028:	462b      	mov	r3, r5
 802302a:	4650      	mov	r0, sl
 802302c:	4659      	mov	r1, fp
 802302e:	f7ed fc25 	bl	801087c <__aeabi_ddiv>
 8023032:	2200      	movs	r2, #0
 8023034:	4b8a      	ldr	r3, [pc, #552]	@ (8023260 <mg_dtoa+0x338>)
 8023036:	f7ed fd73 	bl	8010b20 <__aeabi_dcmple>
 802303a:	2800      	cmp	r0, #0
 802303c:	d1e4      	bne.n	8023008 <mg_dtoa+0xe0>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 802303e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8023042:	2200      	movs	r2, #0
 8023044:	4b8d      	ldr	r3, [pc, #564]	@ (802327c <mg_dtoa+0x354>)
 8023046:	4620      	mov	r0, r4
 8023048:	4629      	mov	r1, r5
 802304a:	f7ed faed 	bl	8010628 <__aeabi_dmul>
 802304e:	4634      	mov	r4, r6
 8023050:	e004      	b.n	802305c <mg_dtoa+0x134>
 8023052:	2200      	movs	r2, #0
 8023054:	4b88      	ldr	r3, [pc, #544]	@ (8023278 <mg_dtoa+0x350>)
 8023056:	f7ed fc11 	bl	801087c <__aeabi_ddiv>
 802305a:	3401      	adds	r4, #1
 802305c:	4544      	cmp	r4, r8
 802305e:	dbf8      	blt.n	8023052 <mg_dtoa+0x12a>
  d += t;
 8023060:	4602      	mov	r2, r0
 8023062:	460b      	mov	r3, r1
 8023064:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023068:	f7ed f928 	bl	80102bc <__adddf3>
 802306c:	4682      	mov	sl, r0
 802306e:	468b      	mov	fp, r1
  int i, s = 0, n = 0, e = 0;
 8023070:	46b1      	mov	r9, r6
  mul = 1.0;
 8023072:	2400      	movs	r4, #0
 8023074:	4d7a      	ldr	r5, [pc, #488]	@ (8023260 <mg_dtoa+0x338>)
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8023076:	e009      	b.n	802308c <mg_dtoa+0x164>
 8023078:	2200      	movs	r2, #0
 802307a:	4b7f      	ldr	r3, [pc, #508]	@ (8023278 <mg_dtoa+0x350>)
 802307c:	4620      	mov	r0, r4
 802307e:	4629      	mov	r1, r5
 8023080:	f7ed fad2 	bl	8010628 <__aeabi_dmul>
 8023084:	4604      	mov	r4, r0
 8023086:	460d      	mov	r5, r1
 8023088:	f109 0901 	add.w	r9, r9, #1
 802308c:	2200      	movs	r2, #0
 802308e:	4b7a      	ldr	r3, [pc, #488]	@ (8023278 <mg_dtoa+0x350>)
 8023090:	4650      	mov	r0, sl
 8023092:	4659      	mov	r1, fp
 8023094:	f7ed fd4e 	bl	8010b34 <__aeabi_dcmpge>
 8023098:	b1b0      	cbz	r0, 80230c8 <mg_dtoa+0x1a0>
 802309a:	4622      	mov	r2, r4
 802309c:	462b      	mov	r3, r5
 802309e:	4650      	mov	r0, sl
 80230a0:	4659      	mov	r1, fp
 80230a2:	f7ed fbeb 	bl	801087c <__aeabi_ddiv>
 80230a6:	2200      	movs	r2, #0
 80230a8:	4b73      	ldr	r3, [pc, #460]	@ (8023278 <mg_dtoa+0x350>)
 80230aa:	f7ed fd43 	bl	8010b34 <__aeabi_dcmpge>
 80230ae:	2800      	cmp	r0, #0
 80230b0:	d1e2      	bne.n	8023078 <mg_dtoa+0x150>
 80230b2:	e009      	b.n	80230c8 <mg_dtoa+0x1a0>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 80230b4:	2200      	movs	r2, #0
 80230b6:	4b70      	ldr	r3, [pc, #448]	@ (8023278 <mg_dtoa+0x350>)
 80230b8:	4620      	mov	r0, r4
 80230ba:	4629      	mov	r1, r5
 80230bc:	f7ed fbde 	bl	801087c <__aeabi_ddiv>
 80230c0:	4604      	mov	r4, r0
 80230c2:	460d      	mov	r5, r1
 80230c4:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80230c8:	2200      	movs	r2, #0
 80230ca:	4b65      	ldr	r3, [pc, #404]	@ (8023260 <mg_dtoa+0x338>)
 80230cc:	4650      	mov	r0, sl
 80230ce:	4659      	mov	r1, fp
 80230d0:	f7ed fd1c 	bl	8010b0c <__aeabi_dcmplt>
 80230d4:	b158      	cbz	r0, 80230ee <mg_dtoa+0x1c6>
 80230d6:	4622      	mov	r2, r4
 80230d8:	462b      	mov	r3, r5
 80230da:	4650      	mov	r0, sl
 80230dc:	4659      	mov	r1, fp
 80230de:	f7ed fbcd 	bl	801087c <__aeabi_ddiv>
 80230e2:	2200      	movs	r2, #0
 80230e4:	4b5e      	ldr	r3, [pc, #376]	@ (8023260 <mg_dtoa+0x338>)
 80230e6:	f7ed fd11 	bl	8010b0c <__aeabi_dcmplt>
 80230ea:	2800      	cmp	r0, #0
 80230ec:	d1e2      	bne.n	80230b4 <mg_dtoa+0x18c>
  if (e >= width && width > 1) {
 80230ee:	45c1      	cmp	r9, r8
 80230f0:	db02      	blt.n	80230f8 <mg_dtoa+0x1d0>
 80230f2:	f1b8 0f01 	cmp.w	r8, #1
 80230f6:	dc25      	bgt.n	8023144 <mg_dtoa+0x21c>
  } else if (e <= -width && width > 1) {
 80230f8:	f1c8 0300 	rsb	r3, r8, #0
 80230fc:	454b      	cmp	r3, r9
 80230fe:	db5e      	blt.n	80231be <mg_dtoa+0x296>
 8023100:	f1b8 0f01 	cmp.w	r8, #1
 8023104:	dd5b      	ble.n	80231be <mg_dtoa+0x296>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8023106:	4622      	mov	r2, r4
 8023108:	462b      	mov	r3, r5
 802310a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802310e:	f7ed fbb5 	bl	801087c <__aeabi_ddiv>
 8023112:	ad08      	add	r5, sp, #32
 8023114:	9b07      	ldr	r3, [sp, #28]
 8023116:	4642      	mov	r2, r8
 8023118:	ec41 0b10 	vmov	d0, r0, r1
 802311c:	2128      	movs	r1, #40	@ 0x28
 802311e:	4628      	mov	r0, r5
 8023120:	f7ff ff02 	bl	8022f28 <mg_dtoa>
 8023124:	4604      	mov	r4, r0
    n += addexp(buf + s + n, -e, '-');
 8023126:	1838      	adds	r0, r7, r0
 8023128:	222d      	movs	r2, #45	@ 0x2d
 802312a:	f1c9 0100 	rsb	r1, r9, #0
 802312e:	4428      	add	r0, r5
 8023130:	f7fc f9f0 	bl	801f514 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8023134:	9500      	str	r5, [sp, #0]
 8023136:	1823      	adds	r3, r4, r0
 8023138:	4a51      	ldr	r2, [pc, #324]	@ (8023280 <mg_dtoa+0x358>)
 802313a:	9906      	ldr	r1, [sp, #24]
 802313c:	9805      	ldr	r0, [sp, #20]
 802313e:	f7ff fee1 	bl	8022f04 <mg_snprintf>
 8023142:	e0f6      	b.n	8023332 <mg_dtoa+0x40a>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8023144:	4622      	mov	r2, r4
 8023146:	462b      	mov	r3, r5
 8023148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802314c:	f7ed fb96 	bl	801087c <__aeabi_ddiv>
 8023150:	ad08      	add	r5, sp, #32
 8023152:	9b07      	ldr	r3, [sp, #28]
 8023154:	4642      	mov	r2, r8
 8023156:	ec41 0b10 	vmov	d0, r0, r1
 802315a:	2128      	movs	r1, #40	@ 0x28
 802315c:	4628      	mov	r0, r5
 802315e:	f7ff fee3 	bl	8022f28 <mg_dtoa>
 8023162:	4604      	mov	r4, r0
    n += addexp(buf + s + n, e, '+');
 8023164:	1838      	adds	r0, r7, r0
 8023166:	222b      	movs	r2, #43	@ 0x2b
 8023168:	4649      	mov	r1, r9
 802316a:	4428      	add	r0, r5
 802316c:	f7fc f9d2 	bl	801f514 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8023170:	9500      	str	r5, [sp, #0]
 8023172:	1823      	adds	r3, r4, r0
 8023174:	4a42      	ldr	r2, [pc, #264]	@ (8023280 <mg_dtoa+0x358>)
 8023176:	9906      	ldr	r1, [sp, #24]
 8023178:	9805      	ldr	r0, [sp, #20]
 802317a:	f7ff fec3 	bl	8022f04 <mg_snprintf>
 802317e:	e0d8      	b.n	8023332 <mg_dtoa+0x40a>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8023180:	3601      	adds	r6, #1
 8023182:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8023186:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 802318a:	eb0d 0902 	add.w	r9, sp, r2
 802318e:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 8023192:	f7ed f9df 	bl	8010554 <__aeabi_i2d>
 8023196:	4622      	mov	r2, r4
 8023198:	462b      	mov	r3, r5
 802319a:	f7ed fa45 	bl	8010628 <__aeabi_dmul>
 802319e:	4602      	mov	r2, r0
 80231a0:	460b      	mov	r3, r1
 80231a2:	4650      	mov	r0, sl
 80231a4:	4659      	mov	r1, fp
 80231a6:	f7ed f887 	bl	80102b8 <__aeabi_dsub>
 80231aa:	4682      	mov	sl, r0
 80231ac:	468b      	mov	fp, r1
      t /= 10.0;
 80231ae:	2200      	movs	r2, #0
 80231b0:	4b31      	ldr	r3, [pc, #196]	@ (8023278 <mg_dtoa+0x350>)
 80231b2:	4620      	mov	r0, r4
 80231b4:	4629      	mov	r1, r5
 80231b6:	f7ed fb61 	bl	801087c <__aeabi_ddiv>
 80231ba:	4604      	mov	r4, r0
 80231bc:	460d      	mov	r5, r1
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 80231be:	2200      	movs	r2, #0
 80231c0:	4b27      	ldr	r3, [pc, #156]	@ (8023260 <mg_dtoa+0x338>)
 80231c2:	4620      	mov	r0, r4
 80231c4:	4629      	mov	r1, r5
 80231c6:	f7ed fcb5 	bl	8010b34 <__aeabi_dcmpge>
 80231ca:	b188      	cbz	r0, 80231f0 <mg_dtoa+0x2c8>
 80231cc:	eb07 0906 	add.w	r9, r7, r6
 80231d0:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 80231d4:	dc0c      	bgt.n	80231f0 <mg_dtoa+0x2c8>
      int ch = (int) (d / t);
 80231d6:	4622      	mov	r2, r4
 80231d8:	462b      	mov	r3, r5
 80231da:	4650      	mov	r0, sl
 80231dc:	4659      	mov	r1, fp
 80231de:	f7ed fb4d 	bl	801087c <__aeabi_ddiv>
 80231e2:	f7ed fcd1 	bl	8010b88 <__aeabi_d2iz>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 80231e6:	2e00      	cmp	r6, #0
 80231e8:	dcca      	bgt.n	8023180 <mg_dtoa+0x258>
 80231ea:	2800      	cmp	r0, #0
 80231ec:	dcc8      	bgt.n	8023180 <mg_dtoa+0x258>
 80231ee:	e7d0      	b.n	8023192 <mg_dtoa+0x26a>
    if (n == 0) buf[s++] = '0';
 80231f0:	b9ce      	cbnz	r6, 8023226 <mg_dtoa+0x2fe>
 80231f2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80231f6:	446b      	add	r3, sp
 80231f8:	2230      	movs	r2, #48	@ 0x30
 80231fa:	f803 2c28 	strb.w	r2, [r3, #-40]
 80231fe:	3701      	adds	r7, #1
 8023200:	e011      	b.n	8023226 <mg_dtoa+0x2fe>
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8023202:	f106 0901 	add.w	r9, r6, #1
 8023206:	f106 0348 	add.w	r3, r6, #72	@ 0x48
 802320a:	eb0d 0603 	add.w	r6, sp, r3
 802320e:	2330      	movs	r3, #48	@ 0x30
 8023210:	f806 3c28 	strb.w	r3, [r6, #-40]
 8023214:	2200      	movs	r2, #0
 8023216:	4b18      	ldr	r3, [pc, #96]	@ (8023278 <mg_dtoa+0x350>)
 8023218:	4620      	mov	r0, r4
 802321a:	4629      	mov	r1, r5
 802321c:	f7ed fb2e 	bl	801087c <__aeabi_ddiv>
 8023220:	4604      	mov	r4, r0
 8023222:	460d      	mov	r5, r1
 8023224:	464e      	mov	r6, r9
 8023226:	2200      	movs	r2, #0
 8023228:	4b0d      	ldr	r3, [pc, #52]	@ (8023260 <mg_dtoa+0x338>)
 802322a:	4620      	mov	r0, r4
 802322c:	4629      	mov	r1, r5
 802322e:	f7ed fc81 	bl	8010b34 <__aeabi_dcmpge>
 8023232:	b110      	cbz	r0, 802323a <mg_dtoa+0x312>
 8023234:	19f3      	adds	r3, r6, r7
 8023236:	2b27      	cmp	r3, #39	@ 0x27
 8023238:	dde3      	ble.n	8023202 <mg_dtoa+0x2da>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 802323a:	19f3      	adds	r3, r6, r7
 802323c:	2b27      	cmp	r3, #39	@ 0x27
 802323e:	dc05      	bgt.n	802324c <mg_dtoa+0x324>
 8023240:	3701      	adds	r7, #1
 8023242:	3348      	adds	r3, #72	@ 0x48
 8023244:	446b      	add	r3, sp
 8023246:	222e      	movs	r2, #46	@ 0x2e
 8023248:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 802324c:	a502      	add	r5, pc, #8	@ (adr r5, 8023258 <mg_dtoa+0x330>)
 802324e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8023252:	e03e      	b.n	80232d2 <mg_dtoa+0x3aa>
 8023254:	f3af 8000 	nop.w
 8023258:	9999999a 	.word	0x9999999a
 802325c:	3fb99999 	.word	0x3fb99999
 8023260:	3ff00000 	.word	0x3ff00000
 8023264:	08038aa8 	.word	0x08038aa8
 8023268:	0803a368 	.word	0x0803a368
 802326c:	08039790 	.word	0x08039790
 8023270:	08039794 	.word	0x08039794
 8023274:	0803979c 	.word	0x0803979c
 8023278:	40240000 	.word	0x40240000
 802327c:	40140000 	.word	0x40140000
 8023280:	080397a0 	.word	0x080397a0
      int ch = (int) (d / t);
 8023284:	4622      	mov	r2, r4
 8023286:	462b      	mov	r3, r5
 8023288:	4650      	mov	r0, sl
 802328a:	4659      	mov	r1, fp
 802328c:	f7ed faf6 	bl	801087c <__aeabi_ddiv>
 8023290:	f7ed fc7a 	bl	8010b88 <__aeabi_d2iz>
      buf[s + n++] = (char) (ch + '0');
 8023294:	3601      	adds	r6, #1
 8023296:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 802329a:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 802329e:	eb0d 0902 	add.w	r9, sp, r2
 80232a2:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 80232a6:	f7ed f955 	bl	8010554 <__aeabi_i2d>
 80232aa:	4622      	mov	r2, r4
 80232ac:	462b      	mov	r3, r5
 80232ae:	f7ed f9bb 	bl	8010628 <__aeabi_dmul>
 80232b2:	4602      	mov	r2, r0
 80232b4:	460b      	mov	r3, r1
 80232b6:	4650      	mov	r0, sl
 80232b8:	4659      	mov	r1, fp
 80232ba:	f7ec fffd 	bl	80102b8 <__aeabi_dsub>
 80232be:	4682      	mov	sl, r0
 80232c0:	468b      	mov	fp, r1
      t /= 10.0;
 80232c2:	2200      	movs	r2, #0
 80232c4:	4b1d      	ldr	r3, [pc, #116]	@ (802333c <mg_dtoa+0x414>)
 80232c6:	4620      	mov	r0, r4
 80232c8:	4629      	mov	r1, r5
 80232ca:	f7ed fad7 	bl	801087c <__aeabi_ddiv>
 80232ce:	4604      	mov	r4, r0
 80232d0:	460d      	mov	r5, r1
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 80232d2:	eb07 0906 	add.w	r9, r7, r6
 80232d6:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 80232da:	dc03      	bgt.n	80232e4 <mg_dtoa+0x3bc>
 80232dc:	4546      	cmp	r6, r8
 80232de:	dbd1      	blt.n	8023284 <mg_dtoa+0x35c>
 80232e0:	9a07      	ldr	r2, [sp, #28]
 80232e2:	e000      	b.n	80232e6 <mg_dtoa+0x3be>
 80232e4:	9a07      	ldr	r2, [sp, #28]
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 80232e6:	b152      	cbz	r2, 80232fe <mg_dtoa+0x3d6>
 80232e8:	2e00      	cmp	r6, #0
 80232ea:	dd08      	ble.n	80232fe <mg_dtoa+0x3d6>
 80232ec:	19bb      	adds	r3, r7, r6
 80232ee:	3347      	adds	r3, #71	@ 0x47
 80232f0:	446b      	add	r3, sp
 80232f2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80232f6:	2b30      	cmp	r3, #48	@ 0x30
 80232f8:	d101      	bne.n	80232fe <mg_dtoa+0x3d6>
 80232fa:	3e01      	subs	r6, #1
 80232fc:	e7f3      	b.n	80232e6 <mg_dtoa+0x3be>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 80232fe:	2e00      	cmp	r6, #0
 8023300:	dd06      	ble.n	8023310 <mg_dtoa+0x3e8>
 8023302:	19bb      	adds	r3, r7, r6
 8023304:	3347      	adds	r3, #71	@ 0x47
 8023306:	446b      	add	r3, sp
 8023308:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 802330c:	2b2e      	cmp	r3, #46	@ 0x2e
 802330e:	d013      	beq.n	8023338 <mg_dtoa+0x410>
  n += s;
 8023310:	4437      	add	r7, r6
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8023312:	2f27      	cmp	r7, #39	@ 0x27
 8023314:	dd00      	ble.n	8023318 <mg_dtoa+0x3f0>
 8023316:	2727      	movs	r7, #39	@ 0x27
  buf[n] = '\0';
 8023318:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802331c:	eb0d 0703 	add.w	r7, sp, r3
 8023320:	2300      	movs	r3, #0
 8023322:	f807 3c28 	strb.w	r3, [r7, #-40]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8023326:	ab08      	add	r3, sp, #32
 8023328:	4a05      	ldr	r2, [pc, #20]	@ (8023340 <mg_dtoa+0x418>)
 802332a:	9906      	ldr	r1, [sp, #24]
 802332c:	9805      	ldr	r0, [sp, #20]
 802332e:	f7ff fde9 	bl	8022f04 <mg_snprintf>
}
 8023332:	b013      	add	sp, #76	@ 0x4c
 8023334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8023338:	3e01      	subs	r6, #1
 802333a:	e7e9      	b.n	8023310 <mg_dtoa+0x3e8>
 802333c:	40240000 	.word	0x40240000
 8023340:	0803a368 	.word	0x0803a368

08023344 <mg_vxprintf>:
                   va_list *ap) {
 8023344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023348:	b093      	sub	sp, #76	@ 0x4c
 802334a:	4681      	mov	r9, r0
 802334c:	468a      	mov	sl, r1
 802334e:	4693      	mov	fp, r2
 8023350:	9303      	str	r3, [sp, #12]
  size_t i = 0, n = 0;
 8023352:	2700      	movs	r7, #0
 8023354:	463c      	mov	r4, r7
  while (fmt[i] != '\0') {
 8023356:	e1bc      	b.n	80236d2 <mg_vxprintf+0x38e>
      char pad = ' ', minus = 0, c = fmt[++i];
 8023358:	2320      	movs	r3, #32
 802335a:	f88d 301f 	strb.w	r3, [sp, #31]
 802335e:	1c66      	adds	r6, r4, #1
 8023360:	f81b 5006 	ldrb.w	r5, [fp, r6]
      if (c == '#') x++, c = fmt[++i];
 8023364:	2d23      	cmp	r5, #35	@ 0x23
 8023366:	d00c      	beq.n	8023382 <mg_vxprintf+0x3e>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8023368:	2300      	movs	r3, #0
 802336a:	9302      	str	r3, [sp, #8]
      if (c == '-') minus++, c = fmt[++i];
 802336c:	2d2d      	cmp	r5, #45	@ 0x2d
 802336e:	d10e      	bne.n	802338e <mg_vxprintf+0x4a>
 8023370:	3601      	adds	r6, #1
 8023372:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023376:	2301      	movs	r3, #1
 8023378:	9304      	str	r3, [sp, #16]
      if (c == '0') pad = '0', c = fmt[++i];
 802337a:	2d30      	cmp	r5, #48	@ 0x30
 802337c:	d00a      	beq.n	8023394 <mg_vxprintf+0x50>
      if (c == '-') minus++, c = fmt[++i];
 802337e:	2400      	movs	r4, #0
 8023380:	e017      	b.n	80233b2 <mg_vxprintf+0x6e>
      if (c == '#') x++, c = fmt[++i];
 8023382:	1ca6      	adds	r6, r4, #2
 8023384:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023388:	2301      	movs	r3, #1
 802338a:	9302      	str	r3, [sp, #8]
 802338c:	e7ee      	b.n	802336c <mg_vxprintf+0x28>
      char pad = ' ', minus = 0, c = fmt[++i];
 802338e:	2300      	movs	r3, #0
 8023390:	9304      	str	r3, [sp, #16]
 8023392:	e7f2      	b.n	802337a <mg_vxprintf+0x36>
      if (c == '0') pad = '0', c = fmt[++i];
 8023394:	2330      	movs	r3, #48	@ 0x30
 8023396:	f88d 301f 	strb.w	r3, [sp, #31]
 802339a:	3601      	adds	r6, #1
 802339c:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80233a0:	e7ed      	b.n	802337e <mg_vxprintf+0x3a>
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 80233a2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80233a6:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80233aa:	3c30      	subs	r4, #48	@ 0x30
 80233ac:	3601      	adds	r6, #1
 80233ae:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80233b2:	4628      	mov	r0, r5
 80233b4:	f7fc f8a7 	bl	801f506 <is_digit>
 80233b8:	4601      	mov	r1, r0
 80233ba:	2800      	cmp	r0, #0
 80233bc:	d1f1      	bne.n	80233a2 <mg_vxprintf+0x5e>
      if (c == '.') {
 80233be:	2d2e      	cmp	r5, #46	@ 0x2e
 80233c0:	d002      	beq.n	80233c8 <mg_vxprintf+0x84>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 80233c2:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80233c6:	e026      	b.n	8023416 <mg_vxprintf+0xd2>
        c = fmt[++i];
 80233c8:	1c73      	adds	r3, r6, #1
 80233ca:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == '*') {
 80233ce:	2d2a      	cmp	r5, #42	@ 0x2a
 80233d0:	d119      	bne.n	8023406 <mg_vxprintf+0xc2>
          pr = (size_t) va_arg(*ap, int);
 80233d2:	9803      	ldr	r0, [sp, #12]
 80233d4:	6803      	ldr	r3, [r0, #0]
 80233d6:	1d1a      	adds	r2, r3, #4
 80233d8:	6002      	str	r2, [r0, #0]
 80233da:	f8d3 8000 	ldr.w	r8, [r3]
          c = fmt[++i];
 80233de:	3602      	adds	r6, #2
 80233e0:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80233e4:	e017      	b.n	8023416 <mg_vxprintf+0xd2>
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 80233e6:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80233ea:	eb05 0848 	add.w	r8, r5, r8, lsl #1
 80233ee:	f1a8 0830 	sub.w	r8, r8, #48	@ 0x30
 80233f2:	3601      	adds	r6, #1
 80233f4:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80233f8:	4628      	mov	r0, r5
 80233fa:	f7fc f884 	bl	801f506 <is_digit>
 80233fe:	2800      	cmp	r0, #0
 8023400:	d1f1      	bne.n	80233e6 <mg_vxprintf+0xa2>
 8023402:	9905      	ldr	r1, [sp, #20]
 8023404:	e007      	b.n	8023416 <mg_vxprintf+0xd2>
          pr = 0;
 8023406:	f04f 0800 	mov.w	r8, #0
 802340a:	461e      	mov	r6, r3
 802340c:	9005      	str	r0, [sp, #20]
 802340e:	e7f3      	b.n	80233f8 <mg_vxprintf+0xb4>
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8023410:	3601      	adds	r6, #1
 8023412:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023416:	2d68      	cmp	r5, #104	@ 0x68
 8023418:	d0fa      	beq.n	8023410 <mg_vxprintf+0xcc>
      if (c == 'l') {
 802341a:	2d6c      	cmp	r5, #108	@ 0x6c
 802341c:	d05f      	beq.n	80234de <mg_vxprintf+0x19a>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 802341e:	2200      	movs	r2, #0
      if (c == 'p') x = 1, is_long = 1;
 8023420:	2d70      	cmp	r5, #112	@ 0x70
 8023422:	d069      	beq.n	80234f8 <mg_vxprintf+0x1b4>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8023424:	2d64      	cmp	r5, #100	@ 0x64
 8023426:	d06a      	beq.n	80234fe <mg_vxprintf+0x1ba>
 8023428:	f1a5 0325 	sub.w	r3, r5, #37	@ 0x25
 802342c:	2b53      	cmp	r3, #83	@ 0x53
 802342e:	f200 81bc 	bhi.w	80237aa <mg_vxprintf+0x466>
 8023432:	e8df f013 	tbh	[pc, r3, lsl #1]
 8023436:	01b5      	.short	0x01b5
 8023438:	01ba01ba 	.word	0x01ba01ba
 802343c:	01ba01ba 	.word	0x01ba01ba
 8023440:	01ba01ba 	.word	0x01ba01ba
 8023444:	01ba01ba 	.word	0x01ba01ba
 8023448:	01ba01ba 	.word	0x01ba01ba
 802344c:	01ba01ba 	.word	0x01ba01ba
 8023450:	01ba01ba 	.word	0x01ba01ba
 8023454:	01ba01ba 	.word	0x01ba01ba
 8023458:	01ba01ba 	.word	0x01ba01ba
 802345c:	01ba01ba 	.word	0x01ba01ba
 8023460:	01ba01ba 	.word	0x01ba01ba
 8023464:	01ba01ba 	.word	0x01ba01ba
 8023468:	01ba01ba 	.word	0x01ba01ba
 802346c:	01ba01ba 	.word	0x01ba01ba
 8023470:	01ba01ba 	.word	0x01ba01ba
 8023474:	01ba01ba 	.word	0x01ba01ba
 8023478:	01ba01ba 	.word	0x01ba01ba
 802347c:	01ba01ba 	.word	0x01ba01ba
 8023480:	01ba01ba 	.word	0x01ba01ba
 8023484:	014101ba 	.word	0x014101ba
 8023488:	01ba01ba 	.word	0x01ba01ba
 802348c:	01ba01ba 	.word	0x01ba01ba
 8023490:	01ba01ba 	.word	0x01ba01ba
 8023494:	01ba01ba 	.word	0x01ba01ba
 8023498:	01ba01ba 	.word	0x01ba01ba
 802349c:	01ba0065 	.word	0x01ba0065
 80234a0:	01ba01ba 	.word	0x01ba01ba
 80234a4:	01ba01ba 	.word	0x01ba01ba
 80234a8:	01ba01ba 	.word	0x01ba01ba
 80234ac:	01ba01ba 	.word	0x01ba01ba
 80234b0:	016801ba 	.word	0x016801ba
 80234b4:	01ba01ba 	.word	0x01ba01ba
 80234b8:	00650065 	.word	0x00650065
 80234bc:	01ba01ba 	.word	0x01ba01ba
 80234c0:	01ba01ba 	.word	0x01ba01ba
 80234c4:	015a01ba 	.word	0x015a01ba
 80234c8:	01ba01ba 	.word	0x01ba01ba
 80234cc:	01ba0065 	.word	0x01ba0065
 80234d0:	017101ba 	.word	0x017101ba
 80234d4:	006501ba 	.word	0x006501ba
 80234d8:	01ba01ba 	.word	0x01ba01ba
 80234dc:	008d      	.short	0x008d
        is_long++, c = fmt[++i];
 80234de:	1c73      	adds	r3, r6, #1
 80234e0:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == 'l') is_long++, c = fmt[++i];
 80234e4:	2d6c      	cmp	r5, #108	@ 0x6c
 80234e6:	d002      	beq.n	80234ee <mg_vxprintf+0x1aa>
        is_long++, c = fmt[++i];
 80234e8:	461e      	mov	r6, r3
 80234ea:	2201      	movs	r2, #1
 80234ec:	e798      	b.n	8023420 <mg_vxprintf+0xdc>
        if (c == 'l') is_long++, c = fmt[++i];
 80234ee:	3602      	adds	r6, #2
 80234f0:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80234f4:	2202      	movs	r2, #2
 80234f6:	e793      	b.n	8023420 <mg_vxprintf+0xdc>
      if (c == 'p') x = 1, is_long = 1;
 80234f8:	2201      	movs	r2, #1
 80234fa:	9202      	str	r2, [sp, #8]
 80234fc:	e792      	b.n	8023424 <mg_vxprintf+0xe0>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 80234fe:	2101      	movs	r1, #1
 8023500:	2d58      	cmp	r5, #88	@ 0x58
 8023502:	d027      	beq.n	8023554 <mg_vxprintf+0x210>
 8023504:	2d70      	cmp	r5, #112	@ 0x70
 8023506:	d021      	beq.n	802354c <mg_vxprintf+0x208>
 8023508:	2300      	movs	r3, #0
 802350a:	4618      	mov	r0, r3
        size_t xl = x ? 2 : 0;
 802350c:	9b02      	ldr	r3, [sp, #8]
 802350e:	b10b      	cbz	r3, 8023514 <mg_vxprintf+0x1d0>
 8023510:	2302      	movs	r3, #2
 8023512:	9302      	str	r3, [sp, #8]
        if (c == 'g' || c == 'f') {
 8023514:	f1a5 0366 	sub.w	r3, r5, #102	@ 0x66
 8023518:	b2db      	uxtb	r3, r3
 802351a:	2b01      	cmp	r3, #1
 802351c:	d91c      	bls.n	8023558 <mg_vxprintf+0x214>
        } else if (is_long == 2) {
 802351e:	2a02      	cmp	r2, #2
 8023520:	d037      	beq.n	8023592 <mg_vxprintf+0x24e>
        } else if (is_long == 1) {
 8023522:	2a01      	cmp	r2, #1
 8023524:	d046      	beq.n	80235b4 <mg_vxprintf+0x270>
          int v = va_arg(*ap, int);
 8023526:	9b03      	ldr	r3, [sp, #12]
 8023528:	f8d3 c000 	ldr.w	ip, [r3]
 802352c:	f10c 0204 	add.w	r2, ip, #4
 8023530:	601a      	str	r2, [r3, #0]
 8023532:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8023536:	2d64      	cmp	r5, #100	@ 0x64
 8023538:	d052      	beq.n	80235e0 <mg_vxprintf+0x29c>
 802353a:	461a      	mov	r2, r3
 802353c:	2300      	movs	r3, #0
 802353e:	9001      	str	r0, [sp, #4]
 8023540:	9100      	str	r1, [sp, #0]
 8023542:	a808      	add	r0, sp, #32
 8023544:	f7fc f842 	bl	801f5cc <mg_lld>
 8023548:	4605      	mov	r5, r0
 802354a:	e01c      	b.n	8023586 <mg_vxprintf+0x242>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 802354c:	2301      	movs	r3, #1
 802354e:	e7dc      	b.n	802350a <mg_vxprintf+0x1c6>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8023550:	2301      	movs	r3, #1
 8023552:	e7da      	b.n	802350a <mg_vxprintf+0x1c6>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8023554:	2301      	movs	r3, #1
 8023556:	e7d8      	b.n	802350a <mg_vxprintf+0x1c6>
          double v = va_arg(*ap, double);
 8023558:	9903      	ldr	r1, [sp, #12]
 802355a:	680b      	ldr	r3, [r1, #0]
 802355c:	3307      	adds	r3, #7
 802355e:	f023 0307 	bic.w	r3, r3, #7
 8023562:	f103 0208 	add.w	r2, r3, #8
 8023566:	600a      	str	r2, [r1, #0]
 8023568:	ed93 0b00 	vldr	d0, [r3]
          if (pr == ~0U) pr = 6;
 802356c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8023570:	d00c      	beq.n	802358c <mg_vxprintf+0x248>
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8023572:	2d67      	cmp	r5, #103	@ 0x67
 8023574:	bf14      	ite	ne
 8023576:	2300      	movne	r3, #0
 8023578:	2301      	moveq	r3, #1
 802357a:	4642      	mov	r2, r8
 802357c:	2128      	movs	r1, #40	@ 0x28
 802357e:	a808      	add	r0, sp, #32
 8023580:	f7ff fcd2 	bl	8022f28 <mg_dtoa>
 8023584:	4605      	mov	r5, r0
        for (j = 0; j < xl && w > 0; j++) w--;
 8023586:	2300      	movs	r3, #0
 8023588:	9a02      	ldr	r2, [sp, #8]
 802358a:	e02e      	b.n	80235ea <mg_vxprintf+0x2a6>
          if (pr == ~0U) pr = 6;
 802358c:	f04f 0806 	mov.w	r8, #6
 8023590:	e7ef      	b.n	8023572 <mg_vxprintf+0x22e>
          int64_t v = va_arg(*ap, int64_t);
 8023592:	9d03      	ldr	r5, [sp, #12]
 8023594:	682b      	ldr	r3, [r5, #0]
 8023596:	3307      	adds	r3, #7
 8023598:	f023 0307 	bic.w	r3, r3, #7
 802359c:	f103 0208 	add.w	r2, r3, #8
 80235a0:	602a      	str	r2, [r5, #0]
 80235a2:	e9d3 2300 	ldrd	r2, r3, [r3]
          k = mg_lld(tmp, v, s, h);
 80235a6:	9001      	str	r0, [sp, #4]
 80235a8:	9100      	str	r1, [sp, #0]
 80235aa:	a808      	add	r0, sp, #32
 80235ac:	f7fc f80e 	bl	801f5cc <mg_lld>
 80235b0:	4605      	mov	r5, r0
 80235b2:	e7e8      	b.n	8023586 <mg_vxprintf+0x242>
          long v = va_arg(*ap, long);
 80235b4:	9b03      	ldr	r3, [sp, #12]
 80235b6:	f8d3 c000 	ldr.w	ip, [r3]
 80235ba:	f10c 0204 	add.w	r2, ip, #4
 80235be:	601a      	str	r2, [r3, #0]
 80235c0:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 80235c4:	2d64      	cmp	r5, #100	@ 0x64
 80235c6:	d008      	beq.n	80235da <mg_vxprintf+0x296>
 80235c8:	461a      	mov	r2, r3
 80235ca:	2300      	movs	r3, #0
 80235cc:	9001      	str	r0, [sp, #4]
 80235ce:	9100      	str	r1, [sp, #0]
 80235d0:	a808      	add	r0, sp, #32
 80235d2:	f7fb fffb 	bl	801f5cc <mg_lld>
 80235d6:	4605      	mov	r5, r0
 80235d8:	e7d5      	b.n	8023586 <mg_vxprintf+0x242>
 80235da:	461a      	mov	r2, r3
 80235dc:	17db      	asrs	r3, r3, #31
 80235de:	e7f5      	b.n	80235cc <mg_vxprintf+0x288>
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 80235e0:	461a      	mov	r2, r3
 80235e2:	17db      	asrs	r3, r3, #31
 80235e4:	e7ab      	b.n	802353e <mg_vxprintf+0x1fa>
        for (j = 0; j < xl && w > 0; j++) w--;
 80235e6:	3c01      	subs	r4, #1
 80235e8:	3301      	adds	r3, #1
 80235ea:	4293      	cmp	r3, r2
 80235ec:	d225      	bcs.n	802363a <mg_vxprintf+0x2f6>
 80235ee:	2c00      	cmp	r4, #0
 80235f0:	d1f9      	bne.n	80235e6 <mg_vxprintf+0x2a2>
 80235f2:	46a0      	mov	r8, r4
 80235f4:	9605      	str	r6, [sp, #20]
 80235f6:	9e04      	ldr	r6, [sp, #16]
 80235f8:	e009      	b.n	802360e <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 80235fa:	2301      	movs	r3, #1
 80235fc:	f10d 021f 	add.w	r2, sp, #31
 8023600:	4651      	mov	r1, sl
 8023602:	4648      	mov	r0, r9
 8023604:	f7fc f878 	bl	801f6f8 <scpy>
 8023608:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 802360a:	f108 0801 	add.w	r8, r8, #1
 802360e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8023612:	2b20      	cmp	r3, #32
 8023614:	d106      	bne.n	8023624 <mg_vxprintf+0x2e0>
 8023616:	b92e      	cbnz	r6, 8023624 <mg_vxprintf+0x2e0>
 8023618:	42a5      	cmp	r5, r4
 802361a:	d203      	bcs.n	8023624 <mg_vxprintf+0x2e0>
 802361c:	eb08 0305 	add.w	r3, r8, r5
 8023620:	42a3      	cmp	r3, r4
 8023622:	d3ea      	bcc.n	80235fa <mg_vxprintf+0x2b6>
        n += scpy(out, param, (char *) "0x", xl);
 8023624:	9e05      	ldr	r6, [sp, #20]
 8023626:	9b02      	ldr	r3, [sp, #8]
 8023628:	4a6b      	ldr	r2, [pc, #428]	@ (80237d8 <mg_vxprintf+0x494>)
 802362a:	4651      	mov	r1, sl
 802362c:	4648      	mov	r0, r9
 802362e:	f7fc f863 	bl	801f6f8 <scpy>
 8023632:	eb07 0800 	add.w	r8, r7, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8023636:	2700      	movs	r7, #0
 8023638:	e00d      	b.n	8023656 <mg_vxprintf+0x312>
 802363a:	f04f 0800 	mov.w	r8, #0
 802363e:	9605      	str	r6, [sp, #20]
 8023640:	9e04      	ldr	r6, [sp, #16]
 8023642:	e7e4      	b.n	802360e <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 8023644:	2301      	movs	r3, #1
 8023646:	f10d 021f 	add.w	r2, sp, #31
 802364a:	4651      	mov	r1, sl
 802364c:	4648      	mov	r0, r9
 802364e:	f7fc f853 	bl	801f6f8 <scpy>
 8023652:	4480      	add	r8, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8023654:	3701      	adds	r7, #1
 8023656:	f89d 301f 	ldrb.w	r3, [sp, #31]
 802365a:	2b30      	cmp	r3, #48	@ 0x30
 802365c:	d104      	bne.n	8023668 <mg_vxprintf+0x324>
 802365e:	42a5      	cmp	r5, r4
 8023660:	d202      	bcs.n	8023668 <mg_vxprintf+0x324>
 8023662:	197b      	adds	r3, r7, r5
 8023664:	42a3      	cmp	r3, r4
 8023666:	d3ed      	bcc.n	8023644 <mg_vxprintf+0x300>
        n += scpy(out, param, tmp, k);
 8023668:	462b      	mov	r3, r5
 802366a:	aa08      	add	r2, sp, #32
 802366c:	4651      	mov	r1, sl
 802366e:	4648      	mov	r0, r9
 8023670:	f7fc f842 	bl	801f6f8 <scpy>
 8023674:	eb08 0700 	add.w	r7, r8, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8023678:	f04f 0800 	mov.w	r8, #0
 802367c:	9602      	str	r6, [sp, #8]
 802367e:	9e04      	ldr	r6, [sp, #16]
 8023680:	e009      	b.n	8023696 <mg_vxprintf+0x352>
          n += scpy(out, param, &pad, 1);
 8023682:	2301      	movs	r3, #1
 8023684:	f10d 021f 	add.w	r2, sp, #31
 8023688:	4651      	mov	r1, sl
 802368a:	4648      	mov	r0, r9
 802368c:	f7fc f834 	bl	801f6f8 <scpy>
 8023690:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8023692:	f108 0801 	add.w	r8, r8, #1
 8023696:	f89d 301f 	ldrb.w	r3, [sp, #31]
 802369a:	2b20      	cmp	r3, #32
 802369c:	f040 808d 	bne.w	80237ba <mg_vxprintf+0x476>
 80236a0:	2e00      	cmp	r6, #0
 80236a2:	f000 808c 	beq.w	80237be <mg_vxprintf+0x47a>
 80236a6:	42a5      	cmp	r5, r4
 80236a8:	f080 808b 	bcs.w	80237c2 <mg_vxprintf+0x47e>
 80236ac:	eb08 0305 	add.w	r3, r8, r5
 80236b0:	42a3      	cmp	r3, r4
 80236b2:	d3e6      	bcc.n	8023682 <mg_vxprintf+0x33e>
 80236b4:	9e02      	ldr	r6, [sp, #8]
 80236b6:	e00b      	b.n	80236d0 <mg_vxprintf+0x38c>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 80236b8:	9903      	ldr	r1, [sp, #12]
 80236ba:	680b      	ldr	r3, [r1, #0]
 80236bc:	1d1a      	adds	r2, r3, #4
 80236be:	600a      	str	r2, [r1, #0]
 80236c0:	681c      	ldr	r4, [r3, #0]
        n += f(out, param, ap);
 80236c2:	9a03      	ldr	r2, [sp, #12]
 80236c4:	4651      	mov	r1, sl
 80236c6:	4648      	mov	r0, r9
 80236c8:	47a0      	blx	r4
 80236ca:	4407      	add	r7, r0
        if (c == 'm') n += 2, out('"', param);
 80236cc:	2d6d      	cmp	r5, #109	@ 0x6d
 80236ce:	d015      	beq.n	80236fc <mg_vxprintf+0x3b8>
      i++;
 80236d0:	1c74      	adds	r4, r6, #1
  while (fmt[i] != '\0') {
 80236d2:	f81b 0004 	ldrb.w	r0, [fp, r4]
 80236d6:	2800      	cmp	r0, #0
 80236d8:	d079      	beq.n	80237ce <mg_vxprintf+0x48a>
    if (fmt[i] == '%') {
 80236da:	2825      	cmp	r0, #37	@ 0x25
 80236dc:	f43f ae3c 	beq.w	8023358 <mg_vxprintf+0x14>
      out(fmt[i], param), n++, i++;
 80236e0:	4651      	mov	r1, sl
 80236e2:	47c8      	blx	r9
 80236e4:	3701      	adds	r7, #1
 80236e6:	3401      	adds	r4, #1
 80236e8:	e7f3      	b.n	80236d2 <mg_vxprintf+0x38e>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 80236ea:	9903      	ldr	r1, [sp, #12]
 80236ec:	680b      	ldr	r3, [r1, #0]
 80236ee:	1d1a      	adds	r2, r3, #4
 80236f0:	600a      	str	r2, [r1, #0]
 80236f2:	681c      	ldr	r4, [r3, #0]
        if (c == 'm') out('"', param);
 80236f4:	4651      	mov	r1, sl
 80236f6:	2022      	movs	r0, #34	@ 0x22
 80236f8:	47c8      	blx	r9
 80236fa:	e7e2      	b.n	80236c2 <mg_vxprintf+0x37e>
        if (c == 'm') n += 2, out('"', param);
 80236fc:	3702      	adds	r7, #2
 80236fe:	4651      	mov	r1, sl
 8023700:	2022      	movs	r0, #34	@ 0x22
 8023702:	47c8      	blx	r9
 8023704:	e7e4      	b.n	80236d0 <mg_vxprintf+0x38c>
        int ch = va_arg(*ap, int);
 8023706:	9903      	ldr	r1, [sp, #12]
 8023708:	680b      	ldr	r3, [r1, #0]
 802370a:	1d1a      	adds	r2, r3, #4
 802370c:	600a      	str	r2, [r1, #0]
        out((char) ch, param);
 802370e:	4651      	mov	r1, sl
 8023710:	7818      	ldrb	r0, [r3, #0]
 8023712:	47c8      	blx	r9
        n++;
 8023714:	3701      	adds	r7, #1
 8023716:	e7db      	b.n	80236d0 <mg_vxprintf+0x38c>
        char *p = va_arg(*ap, char *);
 8023718:	9903      	ldr	r1, [sp, #12]
 802371a:	680b      	ldr	r3, [r1, #0]
 802371c:	1d1a      	adds	r2, r3, #4
 802371e:	600a      	str	r2, [r1, #0]
 8023720:	681b      	ldr	r3, [r3, #0]
 8023722:	9302      	str	r3, [sp, #8]
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8023724:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8023728:	d003      	beq.n	8023732 <mg_vxprintf+0x3ee>
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 802372a:	2500      	movs	r5, #0
 802372c:	9605      	str	r6, [sp, #20]
 802372e:	9e04      	ldr	r6, [sp, #16]
 8023730:	e011      	b.n	8023756 <mg_vxprintf+0x412>
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8023732:	4618      	mov	r0, r3
 8023734:	b11b      	cbz	r3, 802373e <mg_vxprintf+0x3fa>
 8023736:	f7ec fdb3 	bl	80102a0 <strlen>
 802373a:	4680      	mov	r8, r0
 802373c:	e7f5      	b.n	802372a <mg_vxprintf+0x3e6>
 802373e:	f04f 0800 	mov.w	r8, #0
 8023742:	e7f2      	b.n	802372a <mg_vxprintf+0x3e6>
          n += scpy(out, param, &pad, 1);
 8023744:	2301      	movs	r3, #1
 8023746:	f10d 021f 	add.w	r2, sp, #31
 802374a:	4651      	mov	r1, sl
 802374c:	4648      	mov	r0, r9
 802374e:	f7fb ffd3 	bl	801f6f8 <scpy>
 8023752:	4407      	add	r7, r0
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8023754:	3501      	adds	r5, #1
 8023756:	b92e      	cbnz	r6, 8023764 <mg_vxprintf+0x420>
 8023758:	4544      	cmp	r4, r8
 802375a:	d903      	bls.n	8023764 <mg_vxprintf+0x420>
 802375c:	eb05 0308 	add.w	r3, r5, r8
 8023760:	42a3      	cmp	r3, r4
 8023762:	d3ef      	bcc.n	8023744 <mg_vxprintf+0x400>
        n += scpy(out, param, p, pr);
 8023764:	9e05      	ldr	r6, [sp, #20]
 8023766:	4643      	mov	r3, r8
 8023768:	9a02      	ldr	r2, [sp, #8]
 802376a:	4651      	mov	r1, sl
 802376c:	4648      	mov	r0, r9
 802376e:	f7fb ffc3 	bl	801f6f8 <scpy>
 8023772:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8023774:	2500      	movs	r5, #0
 8023776:	9602      	str	r6, [sp, #8]
 8023778:	9e04      	ldr	r6, [sp, #16]
 802377a:	e008      	b.n	802378e <mg_vxprintf+0x44a>
          n += scpy(out, param, &pad, 1);
 802377c:	2301      	movs	r3, #1
 802377e:	f10d 021f 	add.w	r2, sp, #31
 8023782:	4651      	mov	r1, sl
 8023784:	4648      	mov	r0, r9
 8023786:	f7fb ffb7 	bl	801f6f8 <scpy>
 802378a:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 802378c:	3501      	adds	r5, #1
 802378e:	b1d6      	cbz	r6, 80237c6 <mg_vxprintf+0x482>
 8023790:	4544      	cmp	r4, r8
 8023792:	d91a      	bls.n	80237ca <mg_vxprintf+0x486>
 8023794:	eb05 0308 	add.w	r3, r5, r8
 8023798:	42a3      	cmp	r3, r4
 802379a:	d3ef      	bcc.n	802377c <mg_vxprintf+0x438>
 802379c:	9e02      	ldr	r6, [sp, #8]
 802379e:	e797      	b.n	80236d0 <mg_vxprintf+0x38c>
        out('%', param);
 80237a0:	4651      	mov	r1, sl
 80237a2:	2025      	movs	r0, #37	@ 0x25
 80237a4:	47c8      	blx	r9
        n++;
 80237a6:	3701      	adds	r7, #1
 80237a8:	e792      	b.n	80236d0 <mg_vxprintf+0x38c>
        out('%', param);
 80237aa:	4651      	mov	r1, sl
 80237ac:	2025      	movs	r0, #37	@ 0x25
 80237ae:	47c8      	blx	r9
        out(c, param);
 80237b0:	4651      	mov	r1, sl
 80237b2:	4628      	mov	r0, r5
 80237b4:	47c8      	blx	r9
        n += 2;
 80237b6:	3702      	adds	r7, #2
 80237b8:	e78a      	b.n	80236d0 <mg_vxprintf+0x38c>
 80237ba:	9e02      	ldr	r6, [sp, #8]
 80237bc:	e788      	b.n	80236d0 <mg_vxprintf+0x38c>
 80237be:	9e02      	ldr	r6, [sp, #8]
 80237c0:	e786      	b.n	80236d0 <mg_vxprintf+0x38c>
 80237c2:	9e02      	ldr	r6, [sp, #8]
 80237c4:	e784      	b.n	80236d0 <mg_vxprintf+0x38c>
 80237c6:	9e02      	ldr	r6, [sp, #8]
 80237c8:	e782      	b.n	80236d0 <mg_vxprintf+0x38c>
 80237ca:	9e02      	ldr	r6, [sp, #8]
 80237cc:	e780      	b.n	80236d0 <mg_vxprintf+0x38c>
}
 80237ce:	4638      	mov	r0, r7
 80237d0:	b013      	add	sp, #76	@ 0x4c
 80237d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237d6:	bf00      	nop
 80237d8:	080397a8 	.word	0x080397a8

080237dc <mg_xprintf>:
size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 80237dc:	b40c      	push	{r2, r3}
 80237de:	b500      	push	{lr}
 80237e0:	b083      	sub	sp, #12
 80237e2:	ab04      	add	r3, sp, #16
 80237e4:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 80237e8:	9301      	str	r3, [sp, #4]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 80237ea:	ab01      	add	r3, sp, #4
 80237ec:	f7ff fdaa 	bl	8023344 <mg_vxprintf>
}
 80237f0:	b003      	add	sp, #12
 80237f2:	f85d eb04 	ldr.w	lr, [sp], #4
 80237f6:	b002      	add	sp, #8
 80237f8:	4770      	bx	lr
	...

080237fc <print_ip4>:
static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 80237fc:	b530      	push	{r4, r5, lr}
 80237fe:	b085      	sub	sp, #20
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8023800:	7853      	ldrb	r3, [r2, #1]
 8023802:	7894      	ldrb	r4, [r2, #2]
 8023804:	78d5      	ldrb	r5, [r2, #3]
 8023806:	9502      	str	r5, [sp, #8]
 8023808:	9401      	str	r4, [sp, #4]
 802380a:	9300      	str	r3, [sp, #0]
 802380c:	7813      	ldrb	r3, [r2, #0]
 802380e:	4a02      	ldr	r2, [pc, #8]	@ (8023818 <print_ip4+0x1c>)
 8023810:	f7ff ffe4 	bl	80237dc <mg_xprintf>
}
 8023814:	b005      	add	sp, #20
 8023816:	bd30      	pop	{r4, r5, pc}
 8023818:	080397ac 	.word	0x080397ac

0802381c <mg_print_ip4>:
size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 802381c:	b510      	push	{r4, lr}
  uint8_t *p = va_arg(*ap, uint8_t *);
 802381e:	6813      	ldr	r3, [r2, #0]
 8023820:	1d1c      	adds	r4, r3, #4
 8023822:	6014      	str	r4, [r2, #0]
  return print_ip4(out, arg, p);
 8023824:	681a      	ldr	r2, [r3, #0]
 8023826:	f7ff ffe9 	bl	80237fc <print_ip4>
}
 802382a:	bd10      	pop	{r4, pc}

0802382c <mg_print_mac>:
size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 802382c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802382e:	b087      	sub	sp, #28
  uint8_t *p = va_arg(*ap, uint8_t *);
 8023830:	6813      	ldr	r3, [r2, #0]
 8023832:	1d1c      	adds	r4, r3, #4
 8023834:	6014      	str	r4, [r2, #0]
 8023836:	681a      	ldr	r2, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8023838:	7813      	ldrb	r3, [r2, #0]
 802383a:	7854      	ldrb	r4, [r2, #1]
 802383c:	7895      	ldrb	r5, [r2, #2]
                    p[3], p[4], p[5]);
 802383e:	78d6      	ldrb	r6, [r2, #3]
 8023840:	7917      	ldrb	r7, [r2, #4]
 8023842:	7952      	ldrb	r2, [r2, #5]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8023844:	9204      	str	r2, [sp, #16]
 8023846:	9703      	str	r7, [sp, #12]
 8023848:	9602      	str	r6, [sp, #8]
 802384a:	9501      	str	r5, [sp, #4]
 802384c:	9400      	str	r4, [sp, #0]
 802384e:	4a02      	ldr	r2, [pc, #8]	@ (8023858 <mg_print_mac+0x2c>)
 8023850:	f7ff ffc4 	bl	80237dc <mg_xprintf>
}
 8023854:	b007      	add	sp, #28
 8023856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023858:	080397b8 	.word	0x080397b8

0802385c <mg_log>:
void mg_log(const char *fmt, ...) {
 802385c:	b40f      	push	{r0, r1, r2, r3}
 802385e:	b500      	push	{lr}
 8023860:	b083      	sub	sp, #12
 8023862:	ab04      	add	r3, sp, #16
 8023864:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8023868:	9301      	str	r3, [sp, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 802386a:	ab01      	add	r3, sp, #4
 802386c:	4907      	ldr	r1, [pc, #28]	@ (802388c <mg_log+0x30>)
 802386e:	6809      	ldr	r1, [r1, #0]
 8023870:	4807      	ldr	r0, [pc, #28]	@ (8023890 <mg_log+0x34>)
 8023872:	6800      	ldr	r0, [r0, #0]
 8023874:	f7ff fd66 	bl	8023344 <mg_vxprintf>
  logs("\r\n", 2);
 8023878:	2102      	movs	r1, #2
 802387a:	4806      	ldr	r0, [pc, #24]	@ (8023894 <mg_log+0x38>)
 802387c:	f7fc fd16 	bl	80202ac <logs>
}
 8023880:	b003      	add	sp, #12
 8023882:	f85d eb04 	ldr.w	lr, [sp], #4
 8023886:	b004      	add	sp, #16
 8023888:	4770      	bx	lr
 802388a:	bf00      	nop
 802388c:	20019ec8 	.word	0x20019ec8
 8023890:	20000128 	.word	0x20000128
 8023894:	0803a1cc 	.word	0x0803a1cc

08023898 <mg_vprintf>:
size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8023898:	b538      	push	{r3, r4, r5, lr}
 802389a:	4604      	mov	r4, r0
 802389c:	4613      	mov	r3, r2
  size_t old = c->send.len;
 802389e:	6d05      	ldr	r5, [r0, #80]	@ 0x50
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 80238a0:	460a      	mov	r2, r1
 80238a2:	f100 0148 	add.w	r1, r0, #72	@ 0x48
 80238a6:	4803      	ldr	r0, [pc, #12]	@ (80238b4 <mg_vprintf+0x1c>)
 80238a8:	f7ff fd4c 	bl	8023344 <mg_vxprintf>
  return c->send.len - old;
 80238ac:	6d20      	ldr	r0, [r4, #80]	@ 0x50
}
 80238ae:	1b40      	subs	r0, r0, r5
 80238b0:	bd38      	pop	{r3, r4, r5, pc}
 80238b2:	bf00      	nop
 80238b4:	08026957 	.word	0x08026957

080238b8 <mg_printf>:
size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 80238b8:	b40e      	push	{r1, r2, r3}
 80238ba:	b500      	push	{lr}
 80238bc:	b082      	sub	sp, #8
 80238be:	ab03      	add	r3, sp, #12
 80238c0:	f853 1b04 	ldr.w	r1, [r3], #4
  va_start(ap, fmt);
 80238c4:	9301      	str	r3, [sp, #4]
  len = mg_vprintf(c, fmt, &ap);
 80238c6:	aa01      	add	r2, sp, #4
 80238c8:	f7ff ffe6 	bl	8023898 <mg_vprintf>
}
 80238cc:	b002      	add	sp, #8
 80238ce:	f85d eb04 	ldr.w	lr, [sp], #4
 80238d2:	b003      	add	sp, #12
 80238d4:	4770      	bx	lr
	...

080238d8 <mg_vsnprintf>:
size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 80238d8:	b530      	push	{r4, r5, lr}
 80238da:	b085      	sub	sp, #20
 80238dc:	4605      	mov	r5, r0
 80238de:	460c      	mov	r4, r1
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 80238e0:	9000      	str	r0, [sp, #0]
 80238e2:	9101      	str	r1, [sp, #4]
 80238e4:	2100      	movs	r1, #0
 80238e6:	9102      	str	r1, [sp, #8]
 80238e8:	9103      	str	r1, [sp, #12]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 80238ea:	4669      	mov	r1, sp
 80238ec:	4804      	ldr	r0, [pc, #16]	@ (8023900 <mg_vsnprintf+0x28>)
 80238ee:	f7ff fd29 	bl	8023344 <mg_vxprintf>
  if (n < len) buf[n] = '\0';
 80238f2:	4284      	cmp	r4, r0
 80238f4:	d901      	bls.n	80238fa <mg_vsnprintf+0x22>
 80238f6:	2300      	movs	r3, #0
 80238f8:	542b      	strb	r3, [r5, r0]
}
 80238fa:	b005      	add	sp, #20
 80238fc:	bd30      	pop	{r4, r5, pc}
 80238fe:	bf00      	nop
 8023900:	08026961 	.word	0x08026961

08023904 <mg_http_reply>:
                   const char *fmt, ...) {
 8023904:	b408      	push	{r3}
 8023906:	b570      	push	{r4, r5, r6, lr}
 8023908:	b085      	sub	sp, #20
 802390a:	4604      	mov	r4, r0
 802390c:	460e      	mov	r6, r1
 802390e:	4615      	mov	r5, r2
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8023910:	4608      	mov	r0, r1
 8023912:	f7fc f83d 	bl	801f990 <mg_http_status_code_str>
 8023916:	4603      	mov	r3, r0
 8023918:	b1ed      	cbz	r5, 8023956 <mg_http_reply+0x52>
 802391a:	9500      	str	r5, [sp, #0]
 802391c:	4632      	mov	r2, r6
 802391e:	4916      	ldr	r1, [pc, #88]	@ (8023978 <mg_http_reply+0x74>)
 8023920:	4620      	mov	r0, r4
 8023922:	f7ff ffc9 	bl	80238b8 <mg_printf>
  len = c->send.len;
 8023926:	6d25      	ldr	r5, [r4, #80]	@ 0x50
  va_start(ap, fmt);
 8023928:	ab0a      	add	r3, sp, #40	@ 0x28
 802392a:	9303      	str	r3, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 802392c:	ab03      	add	r3, sp, #12
 802392e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023930:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 8023934:	4811      	ldr	r0, [pc, #68]	@ (802397c <mg_http_reply+0x78>)
 8023936:	f7ff fd05 	bl	8023344 <mg_vxprintf>
  if (c->send.len > 16) {
 802393a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802393c:	2b10      	cmp	r3, #16
 802393e:	d80c      	bhi.n	802395a <mg_http_reply+0x56>
  c->is_resp = 0;
 8023940:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8023944:	f36f 13c7 	bfc	r3, #7, #1
 8023948:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 802394c:	b005      	add	sp, #20
 802394e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023952:	b001      	add	sp, #4
 8023954:	4770      	bx	lr
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8023956:	4d0a      	ldr	r5, [pc, #40]	@ (8023980 <mg_http_reply+0x7c>)
 8023958:	e7df      	b.n	802391a <mg_http_reply+0x16>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 802395a:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
 802395c:	f1a5 000f 	sub.w	r0, r5, #15
 8023960:	1b5b      	subs	r3, r3, r5
 8023962:	4a08      	ldr	r2, [pc, #32]	@ (8023984 <mg_http_reply+0x80>)
 8023964:	210b      	movs	r1, #11
 8023966:	4430      	add	r0, r6
 8023968:	f7ff facc 	bl	8022f04 <mg_snprintf>
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 802396c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 802396e:	4405      	add	r5, r0
 8023970:	3d0f      	subs	r5, #15
 8023972:	2220      	movs	r2, #32
 8023974:	555a      	strb	r2, [r3, r5]
 8023976:	e7e3      	b.n	8023940 <mg_http_reply+0x3c>
 8023978:	080397d8 	.word	0x080397d8
 802397c:	08026957 	.word	0x08026957
 8023980:	08036364 	.word	0x08036364
 8023984:	0803980c 	.word	0x0803980c

08023988 <mg_http_etag>:
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8023988:	b510      	push	{r4, lr}
 802398a:	b084      	sub	sp, #16
 802398c:	4604      	mov	r4, r0
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 802398e:	9202      	str	r2, [sp, #8]
 8023990:	2300      	movs	r3, #0
 8023992:	9303      	str	r3, [sp, #12]
 8023994:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023998:	e9cd 2300 	strd	r2, r3, [sp]
 802399c:	4a02      	ldr	r2, [pc, #8]	@ (80239a8 <mg_http_etag+0x20>)
 802399e:	f7ff fab1 	bl	8022f04 <mg_snprintf>
}
 80239a2:	4620      	mov	r0, r4
 80239a4:	b004      	add	sp, #16
 80239a6:	bd10      	pop	{r4, pc}
 80239a8:	08039814 	.word	0x08039814

080239ac <mg_url_encode>:
size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 80239ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239b0:	b083      	sub	sp, #12
 80239b2:	4607      	mov	r7, r0
 80239b4:	4689      	mov	r9, r1
 80239b6:	4692      	mov	sl, r2
 80239b8:	4698      	mov	r8, r3
  size_t i, n = 0;
 80239ba:	2500      	movs	r5, #0
  for (i = 0; i < sl; i++) {
 80239bc:	462c      	mov	r4, r5
 80239be:	e00c      	b.n	80239da <mg_url_encode+0x2e>
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 80239c0:	f8cd b004 	str.w	fp, [sp, #4]
 80239c4:	2301      	movs	r3, #1
 80239c6:	9300      	str	r3, [sp, #0]
 80239c8:	4b16      	ldr	r3, [pc, #88]	@ (8023a24 <mg_url_encode+0x78>)
 80239ca:	4a17      	ldr	r2, [pc, #92]	@ (8023a28 <mg_url_encode+0x7c>)
 80239cc:	2104      	movs	r1, #4
 80239ce:	eb0a 0005 	add.w	r0, sl, r5
 80239d2:	f7ff fa97 	bl	8022f04 <mg_snprintf>
      n += 3;
 80239d6:	3503      	adds	r5, #3
  for (i = 0; i < sl; i++) {
 80239d8:	3401      	adds	r4, #1
 80239da:	454c      	cmp	r4, r9
 80239dc:	d20e      	bcs.n	80239fc <mg_url_encode+0x50>
    int c = *(unsigned char *) &s[i];
 80239de:	eb07 0b04 	add.w	fp, r7, r4
 80239e2:	5d3e      	ldrb	r6, [r7, r4]
    if (n + 4 >= len) return 0;
 80239e4:	1d2b      	adds	r3, r5, #4
 80239e6:	4543      	cmp	r3, r8
 80239e8:	d216      	bcs.n	8023a18 <mg_url_encode+0x6c>
    if (mg_is_url_safe(c)) {
 80239ea:	4630      	mov	r0, r6
 80239ec:	f7fc facc 	bl	801ff88 <mg_is_url_safe>
 80239f0:	2800      	cmp	r0, #0
 80239f2:	d0e5      	beq.n	80239c0 <mg_url_encode+0x14>
      buf[n++] = s[i];
 80239f4:	f80a 6005 	strb.w	r6, [sl, r5]
 80239f8:	3501      	adds	r5, #1
 80239fa:	e7ed      	b.n	80239d8 <mg_url_encode+0x2c>
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 80239fc:	f1b8 0f00 	cmp.w	r8, #0
 8023a00:	d00b      	beq.n	8023a1a <mg_url_encode+0x6e>
 8023a02:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8023a06:	45a8      	cmp	r8, r5
 8023a08:	d902      	bls.n	8023a10 <mg_url_encode+0x64>
 8023a0a:	2300      	movs	r3, #0
 8023a0c:	f80a 3005 	strb.w	r3, [sl, r5]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 8023a10:	2300      	movs	r3, #0
 8023a12:	f80a 3008 	strb.w	r3, [sl, r8]
 8023a16:	e000      	b.n	8023a1a <mg_url_encode+0x6e>
    if (n + 4 >= len) return 0;
 8023a18:	2500      	movs	r5, #0
}
 8023a1a:	4628      	mov	r0, r5
 8023a1c:	b003      	add	sp, #12
 8023a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a22:	bf00      	nop
 8023a24:	08020ce1 	.word	0x08020ce1
 8023a28:	08039820 	.word	0x08039820

08023a2c <mg_vmprintf>:
char *mg_vmprintf(const char *fmt, va_list *ap) {
 8023a2c:	b510      	push	{r4, lr}
 8023a2e:	b084      	sub	sp, #16
 8023a30:	4602      	mov	r2, r0
 8023a32:	460b      	mov	r3, r1
  struct mg_iobuf io = {0, 0, 0, 256};
 8023a34:	2400      	movs	r4, #0
 8023a36:	9400      	str	r4, [sp, #0]
 8023a38:	9401      	str	r4, [sp, #4]
 8023a3a:	9402      	str	r4, [sp, #8]
 8023a3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8023a40:	9103      	str	r1, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 8023a42:	4669      	mov	r1, sp
 8023a44:	4802      	ldr	r0, [pc, #8]	@ (8023a50 <mg_vmprintf+0x24>)
 8023a46:	f7ff fc7d 	bl	8023344 <mg_vxprintf>
}
 8023a4a:	9800      	ldr	r0, [sp, #0]
 8023a4c:	b004      	add	sp, #16
 8023a4e:	bd10      	pop	{r4, pc}
 8023a50:	08026957 	.word	0x08026957

08023a54 <mg_mprintf>:
char *mg_mprintf(const char *fmt, ...) {
 8023a54:	b40f      	push	{r0, r1, r2, r3}
 8023a56:	b500      	push	{lr}
 8023a58:	b083      	sub	sp, #12
 8023a5a:	ab04      	add	r3, sp, #16
 8023a5c:	f853 0b04 	ldr.w	r0, [r3], #4
  va_start(ap, fmt);
 8023a60:	9301      	str	r3, [sp, #4]
  s = mg_vmprintf(fmt, &ap);
 8023a62:	a901      	add	r1, sp, #4
 8023a64:	f7ff ffe2 	bl	8023a2c <mg_vmprintf>
}
 8023a68:	b003      	add	sp, #12
 8023a6a:	f85d eb04 	ldr.w	lr, [sp], #4
 8023a6e:	b004      	add	sp, #16
 8023a70:	4770      	bx	lr

08023a72 <mg_queue_next>:
size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8023a72:	b538      	push	{r3, r4, r5, lr}
 8023a74:	4604      	mov	r4, r0
 8023a76:	460d      	mov	r5, r1
  if (q->tail != q->head) {
 8023a78:	6882      	ldr	r2, [r0, #8]
 8023a7a:	68c3      	ldr	r3, [r0, #12]
 8023a7c:	429a      	cmp	r2, r3
 8023a7e:	d107      	bne.n	8023a90 <mg_queue_next+0x1e>
  size_t len = 0;
 8023a80:	2000      	movs	r0, #0
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8023a82:	b125      	cbz	r5, 8023a8e <mg_queue_next+0x1c>
 8023a84:	6823      	ldr	r3, [r4, #0]
 8023a86:	68a2      	ldr	r2, [r4, #8]
 8023a88:	3204      	adds	r2, #4
 8023a8a:	4413      	add	r3, r2
 8023a8c:	602b      	str	r3, [r5, #0]
}
 8023a8e:	bd38      	pop	{r3, r4, r5, pc}
    len = mg_queue_read_len(q);
 8023a90:	f7fe fbd1 	bl	8022236 <mg_queue_read_len>
    if (len == 0) {  // Zero (head wrapped) ?
 8023a94:	2800      	cmp	r0, #0
 8023a96:	d1f4      	bne.n	8023a82 <mg_queue_next+0x10>
      q->tail = 0;   // Reset tail to the start
 8023a98:	60a0      	str	r0, [r4, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 8023a9a:	68e2      	ldr	r2, [r4, #12]
 8023a9c:	68a3      	ldr	r3, [r4, #8]
 8023a9e:	429a      	cmp	r2, r3
 8023aa0:	d9ef      	bls.n	8023a82 <mg_queue_next+0x10>
 8023aa2:	4620      	mov	r0, r4
 8023aa4:	f7fe fbc7 	bl	8022236 <mg_queue_read_len>
 8023aa8:	e7eb      	b.n	8023a82 <mg_queue_next+0x10>

08023aaa <mg_queue_del>:
  q->tail += len + sizeof(uint32_t);
 8023aaa:	6883      	ldr	r3, [r0, #8]
 8023aac:	440b      	add	r3, r1
 8023aae:	3304      	adds	r3, #4
 8023ab0:	6083      	str	r3, [r0, #8]
}
 8023ab2:	4770      	bx	lr

08023ab4 <mg_sha1_init>:
  context->state[0] = 0x67452301;
 8023ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8023ae0 <mg_sha1_init+0x2c>)
 8023ab6:	6003      	str	r3, [r0, #0]
  context->state[1] = 0xEFCDAB89;
 8023ab8:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 8023abc:	6043      	str	r3, [r0, #4]
  context->state[2] = 0x98BADCFE;
 8023abe:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 8023ac2:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 8023ac6:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 8023aca:	6083      	str	r3, [r0, #8]
  context->state[3] = 0x10325476;
 8023acc:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 8023ad0:	60c3      	str	r3, [r0, #12]
  context->state[4] = 0xC3D2E1F0;
 8023ad2:	4b04      	ldr	r3, [pc, #16]	@ (8023ae4 <mg_sha1_init+0x30>)
 8023ad4:	6103      	str	r3, [r0, #16]
  context->count[0] = context->count[1] = 0;
 8023ad6:	2300      	movs	r3, #0
 8023ad8:	6183      	str	r3, [r0, #24]
 8023ada:	6143      	str	r3, [r0, #20]
}
 8023adc:	4770      	bx	lr
 8023ade:	bf00      	nop
 8023ae0:	67452301 	.word	0x67452301
 8023ae4:	c3d2e1f0 	.word	0xc3d2e1f0

08023ae8 <mg_sha1_update>:
                    size_t len) {
 8023ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023aea:	4604      	mov	r4, r0
 8023aec:	460f      	mov	r7, r1
 8023aee:	4616      	mov	r6, r2
  j = context->count[0];
 8023af0:	6943      	ldr	r3, [r0, #20]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 8023af2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8023af6:	6142      	str	r2, [r0, #20]
 8023af8:	429a      	cmp	r2, r3
 8023afa:	d202      	bcs.n	8023b02 <mg_sha1_update+0x1a>
 8023afc:	6982      	ldr	r2, [r0, #24]
 8023afe:	3201      	adds	r2, #1
 8023b00:	6182      	str	r2, [r0, #24]
  context->count[1] += (uint32_t) (len >> 29);
 8023b02:	69a2      	ldr	r2, [r4, #24]
 8023b04:	eb02 7256 	add.w	r2, r2, r6, lsr #29
 8023b08:	61a2      	str	r2, [r4, #24]
  j = (j >> 3) & 63;
 8023b0a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  if ((j + len) > 63) {
 8023b0e:	18f2      	adds	r2, r6, r3
 8023b10:	2a3f      	cmp	r2, #63	@ 0x3f
 8023b12:	d808      	bhi.n	8023b26 <mg_sha1_update+0x3e>
    i = 0;
 8023b14:	2500      	movs	r5, #0
  memcpy(&context->buffer[j], &data[i], len - i);
 8023b16:	3318      	adds	r3, #24
 8023b18:	18e0      	adds	r0, r4, r3
 8023b1a:	1b72      	subs	r2, r6, r5
 8023b1c:	1979      	adds	r1, r7, r5
 8023b1e:	3004      	adds	r0, #4
 8023b20:	f009 fdea 	bl	802d6f8 <memcpy>
}
 8023b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(&context->buffer[j], data, (i = 64 - j));
 8023b26:	f103 0018 	add.w	r0, r3, #24
 8023b2a:	4420      	add	r0, r4
 8023b2c:	f1c3 0540 	rsb	r5, r3, #64	@ 0x40
 8023b30:	462a      	mov	r2, r5
 8023b32:	4639      	mov	r1, r7
 8023b34:	3004      	adds	r0, #4
 8023b36:	f009 fddf 	bl	802d6f8 <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 8023b3a:	f104 011c 	add.w	r1, r4, #28
 8023b3e:	4620      	mov	r0, r4
 8023b40:	f7fd fb56 	bl	80211f0 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8023b44:	e004      	b.n	8023b50 <mg_sha1_update+0x68>
      mg_sha1_transform(context->state, &data[i]);
 8023b46:	1979      	adds	r1, r7, r5
 8023b48:	4620      	mov	r0, r4
 8023b4a:	f7fd fb51 	bl	80211f0 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8023b4e:	3540      	adds	r5, #64	@ 0x40
 8023b50:	f105 033f 	add.w	r3, r5, #63	@ 0x3f
 8023b54:	42b3      	cmp	r3, r6
 8023b56:	d3f6      	bcc.n	8023b46 <mg_sha1_update+0x5e>
    j = 0;
 8023b58:	2300      	movs	r3, #0
 8023b5a:	e7dc      	b.n	8023b16 <mg_sha1_update+0x2e>

08023b5c <mg_sha1_final>:
void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 8023b5c:	b570      	push	{r4, r5, r6, lr}
 8023b5e:	b084      	sub	sp, #16
 8023b60:	4606      	mov	r6, r0
 8023b62:	460d      	mov	r5, r1
  for (i = 0; i < 8; i++) {
 8023b64:	2300      	movs	r3, #0
 8023b66:	e013      	b.n	8023b90 <mg_sha1_final+0x34>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8023b68:	2b03      	cmp	r3, #3
 8023b6a:	bf8c      	ite	hi
 8023b6c:	2200      	movhi	r2, #0
 8023b6e:	2201      	movls	r2, #1
 8023b70:	3204      	adds	r2, #4
 8023b72:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8023b76:	6851      	ldr	r1, [r2, #4]
                                      ((3 - (i & 3)) * 8)) &
 8023b78:	43da      	mvns	r2, r3
 8023b7a:	f002 0203 	and.w	r2, r2, #3
 8023b7e:	00d2      	lsls	r2, r2, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8023b80:	fa21 f202 	lsr.w	r2, r1, r2
 8023b84:	f103 0110 	add.w	r1, r3, #16
 8023b88:	4469      	add	r1, sp
 8023b8a:	f801 2c08 	strb.w	r2, [r1, #-8]
  for (i = 0; i < 8; i++) {
 8023b8e:	3301      	adds	r3, #1
 8023b90:	2b07      	cmp	r3, #7
 8023b92:	d9e9      	bls.n	8023b68 <mg_sha1_final+0xc>
  c = 0200;
 8023b94:	2380      	movs	r3, #128	@ 0x80
 8023b96:	f88d 3007 	strb.w	r3, [sp, #7]
  mg_sha1_update(context, &c, 1);
 8023b9a:	2201      	movs	r2, #1
 8023b9c:	f10d 0107 	add.w	r1, sp, #7
 8023ba0:	4628      	mov	r0, r5
 8023ba2:	f7ff ffa1 	bl	8023ae8 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8023ba6:	e008      	b.n	8023bba <mg_sha1_final+0x5e>
    c = 0000;
 8023ba8:	2300      	movs	r3, #0
 8023baa:	f88d 3007 	strb.w	r3, [sp, #7]
    mg_sha1_update(context, &c, 1);
 8023bae:	2201      	movs	r2, #1
 8023bb0:	f10d 0107 	add.w	r1, sp, #7
 8023bb4:	4628      	mov	r0, r5
 8023bb6:	f7ff ff97 	bl	8023ae8 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8023bba:	696b      	ldr	r3, [r5, #20]
 8023bbc:	f403 73fc 	and.w	r3, r3, #504	@ 0x1f8
 8023bc0:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8023bc4:	d1f0      	bne.n	8023ba8 <mg_sha1_final+0x4c>
  mg_sha1_update(context, finalcount, 8);
 8023bc6:	2208      	movs	r2, #8
 8023bc8:	eb0d 0102 	add.w	r1, sp, r2
 8023bcc:	4628      	mov	r0, r5
 8023bce:	f7ff ff8b 	bl	8023ae8 <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 8023bd2:	2300      	movs	r3, #0
 8023bd4:	e00a      	b.n	8023bec <mg_sha1_final+0x90>
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 8023bd6:	089a      	lsrs	r2, r3, #2
 8023bd8:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
 8023bdc:	43da      	mvns	r2, r3
 8023bde:	f002 0203 	and.w	r2, r2, #3
 8023be2:	00d2      	lsls	r2, r2, #3
 8023be4:	fa24 f202 	lsr.w	r2, r4, r2
    digest[i] =
 8023be8:	54f2      	strb	r2, [r6, r3]
  for (i = 0; i < 20; i++) {
 8023bea:	3301      	adds	r3, #1
 8023bec:	2b13      	cmp	r3, #19
 8023bee:	d9f2      	bls.n	8023bd6 <mg_sha1_final+0x7a>
  memset(context, '\0', sizeof(*context));
 8023bf0:	225c      	movs	r2, #92	@ 0x5c
 8023bf2:	2100      	movs	r1, #0
 8023bf4:	4628      	mov	r0, r5
 8023bf6:	f008 fb43 	bl	802c280 <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 8023bfa:	2300      	movs	r3, #0
 8023bfc:	9302      	str	r3, [sp, #8]
 8023bfe:	9303      	str	r3, [sp, #12]
}
 8023c00:	b004      	add	sp, #16
 8023c02:	bd70      	pop	{r4, r5, r6, pc}

08023c04 <mg_http_serve_ssi>:
                       const char *fullpath) {
 8023c04:	b508      	push	{r3, lr}
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8023c06:	4b03      	ldr	r3, [pc, #12]	@ (8023c14 <mg_http_serve_ssi+0x10>)
 8023c08:	2200      	movs	r2, #0
 8023c0a:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8023c0e:	f7ff fe79 	bl	8023904 <mg_http_reply>
}
 8023c12:	bd08      	pop	{r3, pc}
 8023c14:	08039828 	.word	0x08039828

08023c18 <mg_str_s>:
struct mg_str mg_str_s(const char *s) {
 8023c18:	b510      	push	{r4, lr}
 8023c1a:	4604      	mov	r4, r0
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8023c1c:	6001      	str	r1, [r0, #0]
 8023c1e:	b129      	cbz	r1, 8023c2c <mg_str_s+0x14>
 8023c20:	4608      	mov	r0, r1
 8023c22:	f7ec fb3d 	bl	80102a0 <strlen>
 8023c26:	6060      	str	r0, [r4, #4]
}
 8023c28:	4620      	mov	r0, r4
 8023c2a:	bd10      	pop	{r4, pc}
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8023c2c:	2000      	movs	r0, #0
 8023c2e:	e7fa      	b.n	8023c26 <mg_str_s+0xe>

08023c30 <mg_str_n>:
  struct mg_str str = {(char *) s, n};
 8023c30:	6001      	str	r1, [r0, #0]
 8023c32:	6042      	str	r2, [r0, #4]
}
 8023c34:	4770      	bx	lr

08023c36 <stripquotes>:
static struct mg_str stripquotes(struct mg_str s) {
 8023c36:	b510      	push	{r4, lr}
 8023c38:	b082      	sub	sp, #8
 8023c3a:	4604      	mov	r4, r0
 8023c3c:	ab02      	add	r3, sp, #8
 8023c3e:	e903 0006 	stmdb	r3, {r1, r2}
             : s;
 8023c42:	2a01      	cmp	r2, #1
 8023c44:	d902      	bls.n	8023c4c <stripquotes+0x16>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 8023c46:	780b      	ldrb	r3, [r1, #0]
 8023c48:	2b22      	cmp	r3, #34	@ 0x22
 8023c4a:	d007      	beq.n	8023c5c <stripquotes+0x26>
             : s;
 8023c4c:	ab02      	add	r3, sp, #8
 8023c4e:	e913 0003 	ldmdb	r3, {r0, r1}
 8023c52:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8023c56:	4620      	mov	r0, r4
 8023c58:	b002      	add	sp, #8
 8023c5a:	bd10      	pop	{r4, pc}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 8023c5c:	188b      	adds	r3, r1, r2
 8023c5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8023c62:	2b22      	cmp	r3, #34	@ 0x22
 8023c64:	d1f2      	bne.n	8023c4c <stripquotes+0x16>
             ? mg_str_n(s.buf + 1, s.len - 2)
 8023c66:	3a02      	subs	r2, #2
 8023c68:	3101      	adds	r1, #1
 8023c6a:	f7ff ffe1 	bl	8023c30 <mg_str_n>
             : s;
 8023c6e:	e7f2      	b.n	8023c56 <stripquotes+0x20>

08023c70 <mg_http_get_header_var>:
struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 8023c70:	b082      	sub	sp, #8
 8023c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023c76:	b084      	sub	sp, #16
 8023c78:	4680      	mov	r8, r0
 8023c7a:	4668      	mov	r0, sp
 8023c7c:	e880 0006 	stmia.w	r0, {r1, r2}
 8023c80:	930b      	str	r3, [sp, #44]	@ 0x2c
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8023c82:	2400      	movs	r4, #0
 8023c84:	e01f      	b.n	8023cc6 <mg_http_get_header_var+0x56>
      int q = p < x && *p == '"' ? 1 : 0;
 8023c86:	2201      	movs	r2, #1
 8023c88:	e037      	b.n	8023cfa <mg_http_get_header_var+0x8a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8023c8a:	7818      	ldrb	r0, [r3, #0]
 8023c8c:	283b      	cmp	r0, #59	@ 0x3b
 8023c8e:	d00d      	beq.n	8023cac <mg_http_get_header_var+0x3c>
 8023c90:	2820      	cmp	r0, #32
 8023c92:	d00b      	beq.n	8023cac <mg_http_get_header_var+0x3c>
 8023c94:	282c      	cmp	r0, #44	@ 0x2c
 8023c96:	d009      	beq.n	8023cac <mg_http_get_header_var+0x3c>
        p++;
 8023c98:	3301      	adds	r3, #1
      while (p < x &&
 8023c9a:	42bb      	cmp	r3, r7
 8023c9c:	d206      	bcs.n	8023cac <mg_http_get_header_var+0x3c>
 8023c9e:	2a00      	cmp	r2, #0
 8023ca0:	d0f3      	beq.n	8023c8a <mg_http_get_header_var+0x1a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8023ca2:	428b      	cmp	r3, r1
 8023ca4:	d0f8      	beq.n	8023c98 <mg_http_get_header_var+0x28>
 8023ca6:	7818      	ldrb	r0, [r3, #0]
 8023ca8:	2822      	cmp	r0, #34	@ 0x22
 8023caa:	d1f5      	bne.n	8023c98 <mg_http_get_header_var+0x28>
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 8023cac:	1a5b      	subs	r3, r3, r1
 8023cae:	ac02      	add	r4, sp, #8
 8023cb0:	441a      	add	r2, r3
 8023cb2:	4620      	mov	r0, r4
 8023cb4:	f7ff ffbc 	bl	8023c30 <mg_str_n>
 8023cb8:	e894 0006 	ldmia.w	r4, {r1, r2}
 8023cbc:	4640      	mov	r0, r8
 8023cbe:	f7ff ffba 	bl	8023c36 <stripquotes>
 8023cc2:	e021      	b.n	8023d08 <mg_http_get_header_var+0x98>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8023cc4:	3401      	adds	r4, #1
 8023cc6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023cc8:	b1ca      	cbz	r2, 8023cfe <mg_http_get_header_var+0x8e>
 8023cca:	1915      	adds	r5, r2, r4
 8023ccc:	1cab      	adds	r3, r5, #2
 8023cce:	9f01      	ldr	r7, [sp, #4]
 8023cd0:	42bb      	cmp	r3, r7
 8023cd2:	d214      	bcs.n	8023cfe <mg_http_get_header_var+0x8e>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 8023cd4:	9e00      	ldr	r6, [sp, #0]
 8023cd6:	5d73      	ldrb	r3, [r6, r5]
 8023cd8:	2b3d      	cmp	r3, #61	@ 0x3d
 8023cda:	d1f3      	bne.n	8023cc4 <mg_http_get_header_var+0x54>
 8023cdc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023cde:	1930      	adds	r0, r6, r4
 8023ce0:	f008 fa3a 	bl	802c158 <memcmp>
 8023ce4:	4602      	mov	r2, r0
 8023ce6:	2800      	cmp	r0, #0
 8023ce8:	d1ec      	bne.n	8023cc4 <mg_http_get_header_var+0x54>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 8023cea:	3501      	adds	r5, #1
 8023cec:	1971      	adds	r1, r6, r5
 8023cee:	4437      	add	r7, r6
      int q = p < x && *p == '"' ? 1 : 0;
 8023cf0:	42b9      	cmp	r1, r7
 8023cf2:	d202      	bcs.n	8023cfa <mg_http_get_header_var+0x8a>
 8023cf4:	5d73      	ldrb	r3, [r6, r5]
 8023cf6:	2b22      	cmp	r3, #34	@ 0x22
 8023cf8:	d0c5      	beq.n	8023c86 <mg_http_get_header_var+0x16>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 8023cfa:	460b      	mov	r3, r1
      while (p < x &&
 8023cfc:	e7cd      	b.n	8023c9a <mg_http_get_header_var+0x2a>
  return mg_str_n(NULL, 0);
 8023cfe:	2200      	movs	r2, #0
 8023d00:	4611      	mov	r1, r2
 8023d02:	4640      	mov	r0, r8
 8023d04:	f7ff ff94 	bl	8023c30 <mg_str_n>
}
 8023d08:	4640      	mov	r0, r8
 8023d0a:	b004      	add	sp, #16
 8023d0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023d10:	b002      	add	sp, #8
 8023d12:	4770      	bx	lr

08023d14 <mg_v4mapped>:
static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 8023d14:	b530      	push	{r4, r5, lr}
 8023d16:	b085      	sub	sp, #20
 8023d18:	466b      	mov	r3, sp
 8023d1a:	e883 0003 	stmia.w	r3, {r0, r1}
  if (str.len < 14) return false;
 8023d1e:	290d      	cmp	r1, #13
 8023d20:	d930      	bls.n	8023d84 <mg_v4mapped+0x70>
 8023d22:	4614      	mov	r4, r2
 8023d24:	460b      	mov	r3, r1
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 8023d26:	4601      	mov	r1, r0
 8023d28:	7802      	ldrb	r2, [r0, #0]
 8023d2a:	2a3a      	cmp	r2, #58	@ 0x3a
 8023d2c:	d12d      	bne.n	8023d8a <mg_v4mapped+0x76>
 8023d2e:	7842      	ldrb	r2, [r0, #1]
 8023d30:	2a3a      	cmp	r2, #58	@ 0x3a
 8023d32:	d12c      	bne.n	8023d8e <mg_v4mapped+0x7a>
 8023d34:	7982      	ldrb	r2, [r0, #6]
 8023d36:	2a3a      	cmp	r2, #58	@ 0x3a
 8023d38:	d12b      	bne.n	8023d92 <mg_v4mapped+0x7e>
  for (i = 2; i < 6; i++) {
 8023d3a:	2202      	movs	r2, #2
 8023d3c:	e000      	b.n	8023d40 <mg_v4mapped+0x2c>
 8023d3e:	3201      	adds	r2, #1
 8023d40:	2a05      	cmp	r2, #5
 8023d42:	dc06      	bgt.n	8023d52 <mg_v4mapped+0x3e>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 8023d44:	5c88      	ldrb	r0, [r1, r2]
 8023d46:	2866      	cmp	r0, #102	@ 0x66
 8023d48:	d0f9      	beq.n	8023d3e <mg_v4mapped+0x2a>
 8023d4a:	2846      	cmp	r0, #70	@ 0x46
 8023d4c:	d0f7      	beq.n	8023d3e <mg_v4mapped+0x2a>
 8023d4e:	2000      	movs	r0, #0
 8023d50:	e019      	b.n	8023d86 <mg_v4mapped+0x72>
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 8023d52:	ad02      	add	r5, sp, #8
 8023d54:	1fda      	subs	r2, r3, #7
 8023d56:	3107      	adds	r1, #7
 8023d58:	4628      	mov	r0, r5
 8023d5a:	f7ff ff69 	bl	8023c30 <mg_str_n>
 8023d5e:	4622      	mov	r2, r4
 8023d60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8023d64:	f7fc fee6 	bl	8020b34 <mg_aton4>
 8023d68:	b168      	cbz	r0, 8023d86 <mg_v4mapped+0x72>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 8023d6a:	6822      	ldr	r2, [r4, #0]
  memset(addr->ip, 0, sizeof(addr->ip));
 8023d6c:	2300      	movs	r3, #0
 8023d6e:	6023      	str	r3, [r4, #0]
 8023d70:	6063      	str	r3, [r4, #4]
 8023d72:	60a3      	str	r3, [r4, #8]
 8023d74:	60e3      	str	r3, [r4, #12]
  addr->ip[10] = addr->ip[11] = 255;
 8023d76:	23ff      	movs	r3, #255	@ 0xff
 8023d78:	72e3      	strb	r3, [r4, #11]
 8023d7a:	72a3      	strb	r3, [r4, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 8023d7c:	60e2      	str	r2, [r4, #12]
  addr->is_ip6 = true;
 8023d7e:	2301      	movs	r3, #1
 8023d80:	74e3      	strb	r3, [r4, #19]
  return true;
 8023d82:	e000      	b.n	8023d86 <mg_v4mapped+0x72>
  if (str.len < 14) return false;
 8023d84:	2000      	movs	r0, #0
}
 8023d86:	b005      	add	sp, #20
 8023d88:	bd30      	pop	{r4, r5, pc}
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 8023d8a:	2000      	movs	r0, #0
 8023d8c:	e7fb      	b.n	8023d86 <mg_v4mapped+0x72>
 8023d8e:	2000      	movs	r0, #0
 8023d90:	e7f9      	b.n	8023d86 <mg_v4mapped+0x72>
 8023d92:	2000      	movs	r0, #0
 8023d94:	e7f7      	b.n	8023d86 <mg_v4mapped+0x72>

08023d96 <mkpay>:
static void mkpay(struct pkt *pkt, void *p) {
 8023d96:	b530      	push	{r4, r5, lr}
 8023d98:	b083      	sub	sp, #12
 8023d9a:	4604      	mov	r4, r0
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 8023d9c:	6803      	ldr	r3, [r0, #0]
 8023d9e:	6842      	ldr	r2, [r0, #4]
 8023da0:	441a      	add	r2, r3
 8023da2:	466d      	mov	r5, sp
 8023da4:	1a52      	subs	r2, r2, r1
 8023da6:	4628      	mov	r0, r5
 8023da8:	f7ff ff42 	bl	8023c30 <mg_str_n>
 8023dac:	3408      	adds	r4, #8
 8023dae:	e895 0003 	ldmia.w	r5, {r0, r1}
 8023db2:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8023db6:	b003      	add	sp, #12
 8023db8:	bd30      	pop	{r4, r5, pc}

08023dba <mg_strcmp>:
int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 8023dba:	b084      	sub	sp, #16
 8023dbc:	f10d 0c10 	add.w	ip, sp, #16
 8023dc0:	e90c 0003 	stmdb	ip, {r0, r1}
 8023dc4:	4669      	mov	r1, sp
 8023dc6:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8023dca:	2300      	movs	r3, #0
  while (i < str1.len && i < str2.len) {
 8023dcc:	9a03      	ldr	r2, [sp, #12]
 8023dce:	429a      	cmp	r2, r3
 8023dd0:	d90b      	bls.n	8023dea <mg_strcmp+0x30>
 8023dd2:	9901      	ldr	r1, [sp, #4]
 8023dd4:	4299      	cmp	r1, r3
 8023dd6:	d908      	bls.n	8023dea <mg_strcmp+0x30>
    int c1 = str1.buf[i];
 8023dd8:	9a02      	ldr	r2, [sp, #8]
 8023dda:	5cd1      	ldrb	r1, [r2, r3]
    int c2 = str2.buf[i];
 8023ddc:	9a00      	ldr	r2, [sp, #0]
 8023dde:	5cd2      	ldrb	r2, [r2, r3]
    if (c1 < c2) return -1;
 8023de0:	4291      	cmp	r1, r2
 8023de2:	db09      	blt.n	8023df8 <mg_strcmp+0x3e>
    if (c1 > c2) return 1;
 8023de4:	dc0c      	bgt.n	8023e00 <mg_strcmp+0x46>
    i++;
 8023de6:	3301      	adds	r3, #1
 8023de8:	e7f0      	b.n	8023dcc <mg_strcmp+0x12>
  if (i < str1.len) return 1;
 8023dea:	429a      	cmp	r2, r3
 8023dec:	d80a      	bhi.n	8023e04 <mg_strcmp+0x4a>
  if (i < str2.len) return -1;
 8023dee:	9a01      	ldr	r2, [sp, #4]
 8023df0:	429a      	cmp	r2, r3
 8023df2:	d809      	bhi.n	8023e08 <mg_strcmp+0x4e>
  return 0;
 8023df4:	2000      	movs	r0, #0
 8023df6:	e001      	b.n	8023dfc <mg_strcmp+0x42>
    if (c1 < c2) return -1;
 8023df8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8023dfc:	b004      	add	sp, #16
 8023dfe:	4770      	bx	lr
    if (c1 > c2) return 1;
 8023e00:	2001      	movs	r0, #1
 8023e02:	e7fb      	b.n	8023dfc <mg_strcmp+0x42>
  if (i < str1.len) return 1;
 8023e04:	2001      	movs	r0, #1
 8023e06:	e7f9      	b.n	8023dfc <mg_strcmp+0x42>
  if (i < str2.len) return -1;
 8023e08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023e0c:	e7f6      	b.n	8023dfc <mg_strcmp+0x42>

08023e0e <mg_strcasecmp>:
int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8023e0e:	b530      	push	{r4, r5, lr}
 8023e10:	b085      	sub	sp, #20
 8023e12:	ac04      	add	r4, sp, #16
 8023e14:	e904 0003 	stmdb	r4, {r0, r1}
 8023e18:	4669      	mov	r1, sp
 8023e1a:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8023e1e:	2400      	movs	r4, #0
  while (i < str1.len && i < str2.len) {
 8023e20:	9b03      	ldr	r3, [sp, #12]
 8023e22:	42a3      	cmp	r3, r4
 8023e24:	d910      	bls.n	8023e48 <mg_strcasecmp+0x3a>
 8023e26:	9a01      	ldr	r2, [sp, #4]
 8023e28:	42a2      	cmp	r2, r4
 8023e2a:	d90d      	bls.n	8023e48 <mg_strcasecmp+0x3a>
    int c1 = mg_tolc(str1.buf[i]);
 8023e2c:	9b02      	ldr	r3, [sp, #8]
 8023e2e:	5d18      	ldrb	r0, [r3, r4]
 8023e30:	f7fc ff8e 	bl	8020d50 <mg_tolc>
 8023e34:	4605      	mov	r5, r0
    int c2 = mg_tolc(str2.buf[i]);
 8023e36:	9b00      	ldr	r3, [sp, #0]
 8023e38:	5d18      	ldrb	r0, [r3, r4]
 8023e3a:	f7fc ff89 	bl	8020d50 <mg_tolc>
    if (c1 < c2) return -1;
 8023e3e:	4285      	cmp	r5, r0
 8023e40:	db09      	blt.n	8023e56 <mg_strcasecmp+0x48>
    if (c1 > c2) return 1;
 8023e42:	dc0c      	bgt.n	8023e5e <mg_strcasecmp+0x50>
    i++;
 8023e44:	3401      	adds	r4, #1
 8023e46:	e7eb      	b.n	8023e20 <mg_strcasecmp+0x12>
  if (i < str1.len) return 1;
 8023e48:	42a3      	cmp	r3, r4
 8023e4a:	d80a      	bhi.n	8023e62 <mg_strcasecmp+0x54>
  if (i < str2.len) return -1;
 8023e4c:	9b01      	ldr	r3, [sp, #4]
 8023e4e:	42a3      	cmp	r3, r4
 8023e50:	d809      	bhi.n	8023e66 <mg_strcasecmp+0x58>
  return 0;
 8023e52:	2000      	movs	r0, #0
 8023e54:	e001      	b.n	8023e5a <mg_strcasecmp+0x4c>
    if (c1 < c2) return -1;
 8023e56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8023e5a:	b005      	add	sp, #20
 8023e5c:	bd30      	pop	{r4, r5, pc}
    if (c1 > c2) return 1;
 8023e5e:	2001      	movs	r0, #1
 8023e60:	e7fb      	b.n	8023e5a <mg_strcasecmp+0x4c>
  if (i < str1.len) return 1;
 8023e62:	2001      	movs	r0, #1
 8023e64:	e7f9      	b.n	8023e5a <mg_strcasecmp+0x4c>
  if (i < str2.len) return -1;
 8023e66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023e6a:	e7f6      	b.n	8023e5a <mg_strcasecmp+0x4c>

08023e6c <mg_http_parse>:
int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8023e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023e70:	b086      	sub	sp, #24
 8023e72:	4604      	mov	r4, r0
 8023e74:	4616      	mov	r6, r2
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8023e76:	f7fe fb43 	bl	8022500 <mg_http_get_request_len>
 8023e7a:	4607      	mov	r7, r0
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8023e7c:	b1d4      	cbz	r4, 8023eb4 <mg_http_parse+0x48>
 8023e7e:	1825      	adds	r5, r4, r0
  memset(hm, 0, sizeof(*hm));
 8023e80:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8023e84:	2100      	movs	r1, #0
 8023e86:	4630      	mov	r0, r6
 8023e88:	f008 f9fa 	bl	802c280 <memset>
  if (req_len <= 0) return req_len;
 8023e8c:	2f00      	cmp	r7, #0
 8023e8e:	f340 808d 	ble.w	8023fac <mg_http_parse+0x140>
  hm->message.buf = hm->head.buf = (char *) s;
 8023e92:	f8c6 4208 	str.w	r4, [r6, #520]	@ 0x208
 8023e96:	f8c6 4210 	str.w	r4, [r6, #528]	@ 0x210
  hm->body.buf = (char *) end;
 8023e9a:	f8c6 5200 	str.w	r5, [r6, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8023e9e:	46b8      	mov	r8, r7
 8023ea0:	f8c6 720c 	str.w	r7, [r6, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 8023ea4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023ea8:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
 8023eac:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  hm->method.buf = (char *) s;
 8023eb0:	6034      	str	r4, [r6, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8023eb2:	e005      	b.n	8023ec0 <mg_http_parse+0x54>
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8023eb4:	4625      	mov	r5, r4
 8023eb6:	e7e3      	b.n	8023e80 <mg_http_parse+0x14>
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8023eb8:	4414      	add	r4, r2
 8023eba:	6873      	ldr	r3, [r6, #4]
 8023ebc:	4413      	add	r3, r2
 8023ebe:	6073      	str	r3, [r6, #4]
 8023ec0:	42ac      	cmp	r4, r5
 8023ec2:	d208      	bcs.n	8023ed6 <mg_http_parse+0x6a>
 8023ec4:	4629      	mov	r1, r5
 8023ec6:	4620      	mov	r0, r4
 8023ec8:	f7fb fc8a 	bl	801f7e0 <clen>
 8023ecc:	4602      	mov	r2, r0
 8023ece:	2800      	cmp	r0, #0
 8023ed0:	d1f2      	bne.n	8023eb8 <mg_http_parse+0x4c>
 8023ed2:	e000      	b.n	8023ed6 <mg_http_parse+0x6a>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8023ed4:	3401      	adds	r4, #1
 8023ed6:	42ac      	cmp	r4, r5
 8023ed8:	d202      	bcs.n	8023ee0 <mg_http_parse+0x74>
 8023eda:	7823      	ldrb	r3, [r4, #0]
 8023edc:	2b20      	cmp	r3, #32
 8023ede:	d0f9      	beq.n	8023ed4 <mg_http_parse+0x68>
  hm->uri.buf = (char *) s;
 8023ee0:	60b4      	str	r4, [r6, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 8023ee2:	e003      	b.n	8023eec <mg_http_parse+0x80>
 8023ee4:	4414      	add	r4, r2
 8023ee6:	68f3      	ldr	r3, [r6, #12]
 8023ee8:	4413      	add	r3, r2
 8023eea:	60f3      	str	r3, [r6, #12]
 8023eec:	42ac      	cmp	r4, r5
 8023eee:	d208      	bcs.n	8023f02 <mg_http_parse+0x96>
 8023ef0:	4629      	mov	r1, r5
 8023ef2:	4620      	mov	r0, r4
 8023ef4:	f7fb fc74 	bl	801f7e0 <clen>
 8023ef8:	4602      	mov	r2, r0
 8023efa:	2800      	cmp	r0, #0
 8023efc:	d1f2      	bne.n	8023ee4 <mg_http_parse+0x78>
 8023efe:	e000      	b.n	8023f02 <mg_http_parse+0x96>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8023f00:	3401      	adds	r4, #1
 8023f02:	42ac      	cmp	r4, r5
 8023f04:	d202      	bcs.n	8023f0c <mg_http_parse+0xa0>
 8023f06:	7823      	ldrb	r3, [r4, #0]
 8023f08:	2b20      	cmp	r3, #32
 8023f0a:	d0f9      	beq.n	8023f00 <mg_http_parse+0x94>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8023f0c:	f106 0218 	add.w	r2, r6, #24
 8023f10:	4629      	mov	r1, r5
 8023f12:	4620      	mov	r0, r4
 8023f14:	f7fb fcab 	bl	801f86e <skiptorn>
 8023f18:	4682      	mov	sl, r0
 8023f1a:	2800      	cmp	r0, #0
 8023f1c:	f000 8082 	beq.w	8024024 <mg_http_parse+0x1b8>
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8023f20:	f8d6 9008 	ldr.w	r9, [r6, #8]
 8023f24:	68f4      	ldr	r4, [r6, #12]
 8023f26:	4622      	mov	r2, r4
 8023f28:	213f      	movs	r1, #63	@ 0x3f
 8023f2a:	4648      	mov	r0, r9
 8023f2c:	f7ec f968 	bl	8010200 <memchr>
 8023f30:	b138      	cbz	r0, 8023f42 <mg_http_parse+0xd6>
    hm->query.buf = (char *) qs + 1;
 8023f32:	1c42      	adds	r2, r0, #1
 8023f34:	6132      	str	r2, [r6, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 8023f36:	444c      	add	r4, r9
 8023f38:	1aa4      	subs	r4, r4, r2
 8023f3a:	6174      	str	r4, [r6, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8023f3c:	eba0 0309 	sub.w	r3, r0, r9
 8023f40:	60f3      	str	r3, [r6, #12]
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8023f42:	6873      	ldr	r3, [r6, #4]
 8023f44:	2b00      	cmp	r3, #0
 8023f46:	d06f      	beq.n	8024028 <mg_http_parse+0x1bc>
 8023f48:	68f3      	ldr	r3, [r6, #12]
 8023f4a:	2b00      	cmp	r3, #0
 8023f4c:	d06f      	beq.n	802402e <mg_http_parse+0x1c2>
  if (!mg_http_parse_headers(s, end, hm->headers,
 8023f4e:	231e      	movs	r3, #30
 8023f50:	f106 0220 	add.w	r2, r6, #32
 8023f54:	4629      	mov	r1, r5
 8023f56:	4650      	mov	r0, sl
 8023f58:	f7fb fcb1 	bl	801f8be <mg_http_parse_headers>
 8023f5c:	2800      	cmp	r0, #0
 8023f5e:	d069      	beq.n	8024034 <mg_http_parse+0x1c8>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8023f60:	4939      	ldr	r1, [pc, #228]	@ (8024048 <mg_http_parse+0x1dc>)
 8023f62:	4630      	mov	r0, r6
 8023f64:	f7fe faf8 	bl	8022558 <mg_http_get_header>
 8023f68:	b160      	cbz	r0, 8023f84 <mg_http_parse+0x118>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8023f6a:	f506 7201 	add.w	r2, r6, #516	@ 0x204
 8023f6e:	e9d0 0100 	ldrd	r0, r1, [r0]
 8023f72:	f7fe fa73 	bl	802245c <mg_to_size_t>
 8023f76:	2800      	cmp	r0, #0
 8023f78:	d05f      	beq.n	802403a <mg_http_parse+0x1ce>
    hm->message.len = (size_t) req_len + hm->body.len;
 8023f7a:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8023f7e:	4443      	add	r3, r8
 8023f80:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 8023f84:	2205      	movs	r2, #5
 8023f86:	4931      	ldr	r1, [pc, #196]	@ (802404c <mg_http_parse+0x1e0>)
 8023f88:	6830      	ldr	r0, [r6, #0]
 8023f8a:	f7fb fbdb 	bl	801f744 <mg_ncasecmp>
 8023f8e:	4604      	mov	r4, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8023f90:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8023f94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8023f98:	d00c      	beq.n	8023fb4 <mg_http_parse+0x148>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8023f9a:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8023f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8023fa2:	d029      	beq.n	8023ff8 <mg_http_parse+0x18c>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8023fa4:	f8d6 3214 	ldr.w	r3, [r6, #532]	@ 0x214
 8023fa8:	4598      	cmp	r8, r3
 8023faa:	d849      	bhi.n	8024040 <mg_http_parse+0x1d4>
}
 8023fac:	4638      	mov	r0, r7
 8023fae:	b006      	add	sp, #24
 8023fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8023fb4:	2800      	cmp	r0, #0
 8023fb6:	d0f0      	beq.n	8023f9a <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8023fb8:	466d      	mov	r5, sp
 8023fba:	4925      	ldr	r1, [pc, #148]	@ (8024050 <mg_http_parse+0x1e4>)
 8023fbc:	4628      	mov	r0, r5
 8023fbe:	f7ff fe2b 	bl	8023c18 <mg_str_s>
 8023fc2:	e895 000c 	ldmia.w	r5, {r2, r3}
 8023fc6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8023fca:	f7ff ff20 	bl	8023e0e <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8023fce:	2800      	cmp	r0, #0
 8023fd0:	d0e3      	beq.n	8023f9a <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 8023fd2:	ad02      	add	r5, sp, #8
 8023fd4:	491f      	ldr	r1, [pc, #124]	@ (8024054 <mg_http_parse+0x1e8>)
 8023fd6:	4628      	mov	r0, r5
 8023fd8:	f7ff fe1e 	bl	8023c18 <mg_str_s>
 8023fdc:	e895 000c 	ldmia.w	r5, {r2, r3}
 8023fe0:	e896 0003 	ldmia.w	r6, {r0, r1}
 8023fe4:	f7ff ff13 	bl	8023e0e <mg_strcasecmp>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8023fe8:	2800      	cmp	r0, #0
 8023fea:	d0d6      	beq.n	8023f9a <mg_http_parse+0x12e>
    hm->body.len = 0;
 8023fec:	2300      	movs	r3, #0
 8023fee:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8023ff2:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 8023ff6:	e7d0      	b.n	8023f9a <mg_http_parse+0x12e>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8023ff8:	2c00      	cmp	r4, #0
 8023ffa:	d1d3      	bne.n	8023fa4 <mg_http_parse+0x138>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8023ffc:	ac04      	add	r4, sp, #16
 8023ffe:	4916      	ldr	r1, [pc, #88]	@ (8024058 <mg_http_parse+0x1ec>)
 8024000:	4620      	mov	r0, r4
 8024002:	f7ff fe09 	bl	8023c18 <mg_str_s>
 8024006:	e894 000c 	ldmia.w	r4, {r2, r3}
 802400a:	f106 0108 	add.w	r1, r6, #8
 802400e:	c903      	ldmia	r1, {r0, r1}
 8024010:	f7ff fefd 	bl	8023e0e <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8024014:	2800      	cmp	r0, #0
 8024016:	d1c5      	bne.n	8023fa4 <mg_http_parse+0x138>
    hm->body.len = 0;
 8024018:	2300      	movs	r3, #0
 802401a:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 802401e:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 8024022:	e7bf      	b.n	8023fa4 <mg_http_parse+0x138>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8024024:	2700      	movs	r7, #0
 8024026:	e7c1      	b.n	8023fac <mg_http_parse+0x140>
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8024028:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802402c:	e7be      	b.n	8023fac <mg_http_parse+0x140>
 802402e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024032:	e7bb      	b.n	8023fac <mg_http_parse+0x140>
    return -1;  // error when parsing
 8024034:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024038:	e7b8      	b.n	8023fac <mg_http_parse+0x140>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 802403a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802403e:	e7b5      	b.n	8023fac <mg_http_parse+0x140>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8024040:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024044:	e7b2      	b.n	8023fac <mg_http_parse+0x140>
 8024046:	bf00      	nop
 8024048:	08039838 	.word	0x08039838
 802404c:	08039848 	.word	0x08039848
 8024050:	080369e0 	.word	0x080369e0
 8024054:	08035e1c 	.word	0x08035e1c
 8024058:	08039850 	.word	0x08039850

0802405c <mg_match>:
bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 802405c:	b530      	push	{r4, r5, lr}
 802405e:	b085      	sub	sp, #20
 8024060:	ac04      	add	r4, sp, #16
 8024062:	e904 0003 	stmdb	r4, {r0, r1}
 8024066:	4669      	mov	r1, sp
 8024068:	e881 000c 	stmia.w	r1, {r2, r3}
 802406c:	9808      	ldr	r0, [sp, #32]
  if (caps) caps->buf = NULL, caps->len = 0;
 802406e:	b110      	cbz	r0, 8024076 <mg_match+0x1a>
 8024070:	2300      	movs	r3, #0
 8024072:	6003      	str	r3, [r0, #0]
 8024074:	6043      	str	r3, [r0, #4]
      ni = i++, nj = j + 1;
 8024076:	2400      	movs	r4, #0
 8024078:	46a4      	mov	ip, r4
 802407a:	4621      	mov	r1, r4
 802407c:	4623      	mov	r3, r4
 802407e:	e028      	b.n	80240d2 <mg_match+0x76>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8024080:	9a02      	ldr	r2, [sp, #8]
 8024082:	440a      	add	r2, r1
 8024084:	6002      	str	r2, [r0, #0]
 8024086:	2201      	movs	r2, #1
 8024088:	6042      	str	r2, [r0, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 802408a:	2200      	movs	r2, #0
 802408c:	6082      	str	r2, [r0, #8]
 802408e:	60c2      	str	r2, [r0, #12]
 8024090:	3008      	adds	r0, #8
      i++, j++;
 8024092:	3301      	adds	r3, #1
 8024094:	3101      	adds	r1, #1
 8024096:	e01c      	b.n	80240d2 <mg_match+0x76>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8024098:	429a      	cmp	r2, r3
 802409a:	d905      	bls.n	80240a8 <mg_match+0x4c>
 802409c:	9a00      	ldr	r2, [sp, #0]
 802409e:	5cd2      	ldrb	r2, [r2, r3]
 80240a0:	2a2a      	cmp	r2, #42	@ 0x2a
 80240a2:	d045      	beq.n	8024130 <mg_match+0xd4>
 80240a4:	2a23      	cmp	r2, #35	@ 0x23
 80240a6:	d043      	beq.n	8024130 <mg_match+0xd4>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 80240a8:	2c00      	cmp	r4, #0
 80240aa:	d065      	beq.n	8024178 <mg_match+0x11c>
 80240ac:	9b03      	ldr	r3, [sp, #12]
 80240ae:	42a3      	cmp	r3, r4
 80240b0:	d365      	bcc.n	802417e <mg_match+0x122>
 80240b2:	9b00      	ldr	r3, [sp, #0]
 80240b4:	f813 300c 	ldrb.w	r3, [r3, ip]
 80240b8:	2b23      	cmp	r3, #35	@ 0x23
 80240ba:	d003      	beq.n	80240c4 <mg_match+0x68>
 80240bc:	9b02      	ldr	r3, [sp, #8]
 80240be:	5c5b      	ldrb	r3, [r3, r1]
 80240c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80240c2:	d05e      	beq.n	8024182 <mg_match+0x126>
      if (caps && caps->buf == NULL && caps->len == 0) {
 80240c4:	2800      	cmp	r0, #0
 80240c6:	d046      	beq.n	8024156 <mg_match+0xfa>
 80240c8:	6803      	ldr	r3, [r0, #0]
 80240ca:	2b00      	cmp	r3, #0
 80240cc:	d03c      	beq.n	8024148 <mg_match+0xec>
      i = ni, j = nj;
 80240ce:	4621      	mov	r1, r4
 80240d0:	4663      	mov	r3, ip
  while (i < p.len || j < s.len) {
 80240d2:	9a01      	ldr	r2, [sp, #4]
 80240d4:	429a      	cmp	r2, r3
 80240d6:	d802      	bhi.n	80240de <mg_match+0x82>
 80240d8:	9d03      	ldr	r5, [sp, #12]
 80240da:	428d      	cmp	r5, r1
 80240dc:	d941      	bls.n	8024162 <mg_match+0x106>
    if (i < p.len && j < s.len &&
 80240de:	429a      	cmp	r2, r3
 80240e0:	d9da      	bls.n	8024098 <mg_match+0x3c>
 80240e2:	9d03      	ldr	r5, [sp, #12]
 80240e4:	428d      	cmp	r5, r1
 80240e6:	d9d7      	bls.n	8024098 <mg_match+0x3c>
        (p.buf[i] == '?' ||
 80240e8:	9d00      	ldr	r5, [sp, #0]
 80240ea:	f815 e003 	ldrb.w	lr, [r5, r3]
    if (i < p.len && j < s.len &&
 80240ee:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 80240f2:	d009      	beq.n	8024108 <mg_match+0xac>
        (p.buf[i] == '?' ||
 80240f4:	f1be 0f2a 	cmp.w	lr, #42	@ 0x2a
 80240f8:	d0ce      	beq.n	8024098 <mg_match+0x3c>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 80240fa:	f1be 0f23 	cmp.w	lr, #35	@ 0x23
 80240fe:	d0cb      	beq.n	8024098 <mg_match+0x3c>
 8024100:	9d02      	ldr	r5, [sp, #8]
 8024102:	5c6d      	ldrb	r5, [r5, r1]
 8024104:	45ae      	cmp	lr, r5
 8024106:	d1c7      	bne.n	8024098 <mg_match+0x3c>
      if (caps == NULL) {
 8024108:	2800      	cmp	r0, #0
 802410a:	d0c2      	beq.n	8024092 <mg_match+0x36>
      } else if (p.buf[i] == '?') {
 802410c:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 8024110:	d0b6      	beq.n	8024080 <mg_match+0x24>
      } else if (caps->buf != NULL && caps->len == 0) {
 8024112:	6802      	ldr	r2, [r0, #0]
 8024114:	2a00      	cmp	r2, #0
 8024116:	d0bc      	beq.n	8024092 <mg_match+0x36>
 8024118:	6845      	ldr	r5, [r0, #4]
 802411a:	2d00      	cmp	r5, #0
 802411c:	d1b9      	bne.n	8024092 <mg_match+0x36>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 802411e:	9d02      	ldr	r5, [sp, #8]
 8024120:	440d      	add	r5, r1
 8024122:	1aad      	subs	r5, r5, r2
 8024124:	6045      	str	r5, [r0, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8024126:	2200      	movs	r2, #0
 8024128:	60c2      	str	r2, [r0, #12]
 802412a:	6082      	str	r2, [r0, #8]
 802412c:	3008      	adds	r0, #8
 802412e:	e7b0      	b.n	8024092 <mg_match+0x36>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8024130:	b108      	cbz	r0, 8024136 <mg_match+0xda>
 8024132:	6802      	ldr	r2, [r0, #0]
 8024134:	b11a      	cbz	r2, 802413e <mg_match+0xe2>
      ni = i++, nj = j + 1;
 8024136:	1c4c      	adds	r4, r1, #1
 8024138:	469c      	mov	ip, r3
 802413a:	3301      	adds	r3, #1
 802413c:	e7c9      	b.n	80240d2 <mg_match+0x76>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 802413e:	6042      	str	r2, [r0, #4]
 8024140:	9a02      	ldr	r2, [sp, #8]
 8024142:	440a      	add	r2, r1
 8024144:	6002      	str	r2, [r0, #0]
 8024146:	e7f6      	b.n	8024136 <mg_match+0xda>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8024148:	6843      	ldr	r3, [r0, #4]
 802414a:	b93b      	cbnz	r3, 802415c <mg_match+0x100>
        caps--, caps->len = 0;  // Restart previous cap
 802414c:	3808      	subs	r0, #8
 802414e:	6043      	str	r3, [r0, #4]
      i = ni, j = nj;
 8024150:	4621      	mov	r1, r4
 8024152:	4663      	mov	r3, ip
 8024154:	e7bd      	b.n	80240d2 <mg_match+0x76>
 8024156:	4621      	mov	r1, r4
 8024158:	4663      	mov	r3, ip
 802415a:	e7ba      	b.n	80240d2 <mg_match+0x76>
 802415c:	4621      	mov	r1, r4
 802415e:	4663      	mov	r3, ip
 8024160:	e7b7      	b.n	80240d2 <mg_match+0x76>
  if (caps && caps->buf && caps->len == 0) {
 8024162:	b180      	cbz	r0, 8024186 <mg_match+0x12a>
 8024164:	6803      	ldr	r3, [r0, #0]
 8024166:	b183      	cbz	r3, 802418a <mg_match+0x12e>
 8024168:	6842      	ldr	r2, [r0, #4]
 802416a:	b982      	cbnz	r2, 802418e <mg_match+0x132>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 802416c:	9a02      	ldr	r2, [sp, #8]
 802416e:	440a      	add	r2, r1
 8024170:	1ad3      	subs	r3, r2, r3
 8024172:	6043      	str	r3, [r0, #4]
  return true;
 8024174:	2001      	movs	r0, #1
 8024176:	e000      	b.n	802417a <mg_match+0x11e>
      return false;
 8024178:	2000      	movs	r0, #0
}
 802417a:	b005      	add	sp, #20
 802417c:	bd30      	pop	{r4, r5, pc}
      return false;
 802417e:	2000      	movs	r0, #0
 8024180:	e7fb      	b.n	802417a <mg_match+0x11e>
 8024182:	2000      	movs	r0, #0
 8024184:	e7f9      	b.n	802417a <mg_match+0x11e>
  return true;
 8024186:	2001      	movs	r0, #1
 8024188:	e7f7      	b.n	802417a <mg_match+0x11e>
 802418a:	2001      	movs	r0, #1
 802418c:	e7f5      	b.n	802417a <mg_match+0x11e>
 802418e:	2001      	movs	r0, #1
 8024190:	e7f3      	b.n	802417a <mg_match+0x11e>

08024192 <mg_span>:
bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8024192:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024196:	b085      	sub	sp, #20
 8024198:	ac04      	add	r4, sp, #16
 802419a:	e904 0003 	stmdb	r4, {r0, r1}
 802419e:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
  if (s.len == 0 || s.buf == NULL) {
 80241a2:	b379      	cbz	r1, 8024204 <mg_span+0x72>
 80241a4:	4690      	mov	r8, r2
 80241a6:	461f      	mov	r7, r3
 80241a8:	460d      	mov	r5, r1
 80241aa:	9e02      	ldr	r6, [sp, #8]
 80241ac:	b366      	cbz	r6, 8024208 <mg_span+0x76>
    size_t len = 0;
 80241ae:	2400      	movs	r4, #0
 80241b0:	e000      	b.n	80241b4 <mg_span+0x22>
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 80241b2:	3401      	adds	r4, #1
 80241b4:	42a5      	cmp	r5, r4
 80241b6:	d902      	bls.n	80241be <mg_span+0x2c>
 80241b8:	5d31      	ldrb	r1, [r6, r4]
 80241ba:	4281      	cmp	r1, r0
 80241bc:	d1f9      	bne.n	80241b2 <mg_span+0x20>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 80241be:	f1b8 0f00 	cmp.w	r8, #0
 80241c2:	d009      	beq.n	80241d8 <mg_span+0x46>
 80241c4:	46e9      	mov	r9, sp
 80241c6:	4622      	mov	r2, r4
 80241c8:	4631      	mov	r1, r6
 80241ca:	4648      	mov	r0, r9
 80241cc:	f7ff fd30 	bl	8023c30 <mg_str_n>
 80241d0:	e899 0003 	ldmia.w	r9, {r0, r1}
 80241d4:	e888 0003 	stmia.w	r8, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 80241d8:	b187      	cbz	r7, 80241fc <mg_span+0x6a>
 80241da:	46e8      	mov	r8, sp
 80241dc:	1b2a      	subs	r2, r5, r4
 80241de:	1931      	adds	r1, r6, r4
 80241e0:	4640      	mov	r0, r8
 80241e2:	f7ff fd25 	bl	8023c30 <mg_str_n>
 80241e6:	e898 0003 	ldmia.w	r8, {r0, r1}
 80241ea:	e887 0003 	stmia.w	r7, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 80241ee:	42a5      	cmp	r5, r4
 80241f0:	d904      	bls.n	80241fc <mg_span+0x6a>
 80241f2:	4603      	mov	r3, r0
 80241f4:	3301      	adds	r3, #1
 80241f6:	603b      	str	r3, [r7, #0]
 80241f8:	1e4b      	subs	r3, r1, #1
 80241fa:	607b      	str	r3, [r7, #4]
    return true;
 80241fc:	2001      	movs	r0, #1
}
 80241fe:	b005      	add	sp, #20
 8024200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;  // Empty string, nothing to span - fail
 8024204:	2000      	movs	r0, #0
 8024206:	e7fa      	b.n	80241fe <mg_span+0x6c>
 8024208:	2000      	movs	r0, #0
 802420a:	e7f8      	b.n	80241fe <mg_span+0x6c>

0802420c <mg_http_var>:
struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 802420c:	b082      	sub	sp, #8
 802420e:	b510      	push	{r4, lr}
 8024210:	b08a      	sub	sp, #40	@ 0x28
 8024212:	4604      	mov	r4, r0
 8024214:	f10d 0c08 	add.w	ip, sp, #8
 8024218:	e88c 0006 	stmia.w	ip, {r1, r2}
 802421c:	930d      	str	r3, [sp, #52]	@ 0x34
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 802421e:	2200      	movs	r2, #0
 8024220:	4611      	mov	r1, r2
 8024222:	f7ff fd05 	bl	8023c30 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8024226:	ab02      	add	r3, sp, #8
 8024228:	2226      	movs	r2, #38	@ 0x26
 802422a:	9200      	str	r2, [sp, #0]
 802422c:	aa08      	add	r2, sp, #32
 802422e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024232:	f7ff ffae 	bl	8024192 <mg_span>
 8024236:	b1c8      	cbz	r0, 802426c <mg_http_var+0x60>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8024238:	233d      	movs	r3, #61	@ 0x3d
 802423a:	9300      	str	r3, [sp, #0]
 802423c:	ab04      	add	r3, sp, #16
 802423e:	aa06      	add	r2, sp, #24
 8024240:	a90a      	add	r1, sp, #40	@ 0x28
 8024242:	e911 0003 	ldmdb	r1, {r0, r1}
 8024246:	f7ff ffa4 	bl	8024192 <mg_span>
 802424a:	2800      	cmp	r0, #0
 802424c:	d0eb      	beq.n	8024226 <mg_http_var+0x1a>
 802424e:	9a07      	ldr	r2, [sp, #28]
 8024250:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024252:	4293      	cmp	r3, r2
 8024254:	d1e7      	bne.n	8024226 <mg_http_var+0x1a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 8024256:	9906      	ldr	r1, [sp, #24]
 8024258:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802425a:	f7fb fa73 	bl	801f744 <mg_ncasecmp>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 802425e:	2800      	cmp	r0, #0
 8024260:	d1e1      	bne.n	8024226 <mg_http_var+0x1a>
      result = v;
 8024262:	ab04      	add	r3, sp, #16
 8024264:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024268:	e884 0003 	stmia.w	r4, {r0, r1}
}
 802426c:	4620      	mov	r0, r4
 802426e:	b00a      	add	sp, #40	@ 0x28
 8024270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024274:	b002      	add	sp, #8
 8024276:	4770      	bx	lr

08024278 <guess_content_type>:
static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8024278:	b530      	push	{r4, r5, lr}
 802427a:	b08d      	sub	sp, #52	@ 0x34
 802427c:	4604      	mov	r4, r0
 802427e:	a802      	add	r0, sp, #8
 8024280:	e880 0006 	stmia.w	r0, {r1, r2}
  struct mg_str entry, k, v, s = mg_str(extra);
 8024284:	4619      	mov	r1, r3
 8024286:	a804      	add	r0, sp, #16
 8024288:	f7ff fcc6 	bl	8023c18 <mg_str_s>
  size_t i = 0;
 802428c:	2300      	movs	r3, #0
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 802428e:	e000      	b.n	8024292 <guess_content_type+0x1a>
 8024290:	3301      	adds	r3, #1
 8024292:	9803      	ldr	r0, [sp, #12]
 8024294:	4298      	cmp	r0, r3
 8024296:	d906      	bls.n	80242a6 <guess_content_type+0x2e>
 8024298:	1ac1      	subs	r1, r0, r3
 802429a:	9a02      	ldr	r2, [sp, #8]
 802429c:	440a      	add	r2, r1
 802429e:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80242a2:	2a2e      	cmp	r2, #46	@ 0x2e
 80242a4:	d1f4      	bne.n	8024290 <guess_content_type+0x18>
  path.buf += path.len - i;
 80242a6:	1ac0      	subs	r0, r0, r3
 80242a8:	9a02      	ldr	r2, [sp, #8]
 80242aa:	4402      	add	r2, r0
 80242ac:	9202      	str	r2, [sp, #8]
  path.len = i;
 80242ae:	9303      	str	r3, [sp, #12]
  while (mg_span(s, &entry, &s, ',')) {
 80242b0:	ab04      	add	r3, sp, #16
 80242b2:	222c      	movs	r2, #44	@ 0x2c
 80242b4:	9200      	str	r2, [sp, #0]
 80242b6:	aa0a      	add	r2, sp, #40	@ 0x28
 80242b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80242bc:	f7ff ff69 	bl	8024192 <mg_span>
 80242c0:	b1c0      	cbz	r0, 80242f4 <guess_content_type+0x7c>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 80242c2:	233d      	movs	r3, #61	@ 0x3d
 80242c4:	9300      	str	r3, [sp, #0]
 80242c6:	ab06      	add	r3, sp, #24
 80242c8:	aa08      	add	r2, sp, #32
 80242ca:	a90c      	add	r1, sp, #48	@ 0x30
 80242cc:	e911 0003 	ldmdb	r1, {r0, r1}
 80242d0:	f7ff ff5f 	bl	8024192 <mg_span>
 80242d4:	2800      	cmp	r0, #0
 80242d6:	d0eb      	beq.n	80242b0 <guess_content_type+0x38>
 80242d8:	ab08      	add	r3, sp, #32
 80242da:	cb0c      	ldmia	r3, {r2, r3}
 80242dc:	a902      	add	r1, sp, #8
 80242de:	c903      	ldmia	r1, {r0, r1}
 80242e0:	f7ff fd6b 	bl	8023dba <mg_strcmp>
 80242e4:	2800      	cmp	r0, #0
 80242e6:	d1e3      	bne.n	80242b0 <guess_content_type+0x38>
 80242e8:	ab06      	add	r3, sp, #24
 80242ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80242ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80242f2:	e01c      	b.n	802432e <guess_content_type+0xb6>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 80242f4:	2500      	movs	r5, #0
 80242f6:	4b0f      	ldr	r3, [pc, #60]	@ (8024334 <guess_content_type+0xbc>)
 80242f8:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
 80242fc:	b19b      	cbz	r3, 8024326 <guess_content_type+0xae>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 80242fe:	4b0d      	ldr	r3, [pc, #52]	@ (8024334 <guess_content_type+0xbc>)
 8024300:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8024304:	cb0c      	ldmia	r3, {r2, r3}
 8024306:	a902      	add	r1, sp, #8
 8024308:	c903      	ldmia	r1, {r0, r1}
 802430a:	f7ff fd56 	bl	8023dba <mg_strcmp>
 802430e:	b108      	cbz	r0, 8024314 <guess_content_type+0x9c>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8024310:	3502      	adds	r5, #2
 8024312:	e7f0      	b.n	80242f6 <guess_content_type+0x7e>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8024314:	3501      	adds	r5, #1
 8024316:	4b07      	ldr	r3, [pc, #28]	@ (8024334 <guess_content_type+0xbc>)
 8024318:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802431c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024320:	e884 0003 	stmia.w	r4, {r0, r1}
 8024324:	e003      	b.n	802432e <guess_content_type+0xb6>
  return mg_str("text/plain; charset=utf-8");
 8024326:	4904      	ldr	r1, [pc, #16]	@ (8024338 <guess_content_type+0xc0>)
 8024328:	4620      	mov	r0, r4
 802432a:	f7ff fc75 	bl	8023c18 <mg_str_s>
}
 802432e:	4620      	mov	r0, r4
 8024330:	b00d      	add	sp, #52	@ 0x34
 8024332:	bd30      	pop	{r4, r5, pc}
 8024334:	0803ad40 	.word	0x0803ad40
 8024338:	08039854 	.word	0x08039854

0802433c <getrange>:
static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 802433c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802433e:	b087      	sub	sp, #28
 8024340:	4604      	mov	r4, r0
 8024342:	460e      	mov	r6, r1
 8024344:	4617      	mov	r7, r2
  for (i = 0; i + 6 < s->len; i++) {
 8024346:	2500      	movs	r5, #0
 8024348:	1da8      	adds	r0, r5, #6
 802434a:	6863      	ldr	r3, [r4, #4]
 802434c:	4298      	cmp	r0, r3
 802434e:	d23c      	bcs.n	80243ca <getrange+0x8e>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 8024350:	6821      	ldr	r1, [r4, #0]
 8024352:	1b5b      	subs	r3, r3, r5
 8024354:	1f9a      	subs	r2, r3, #6
 8024356:	4401      	add	r1, r0
 8024358:	a804      	add	r0, sp, #16
 802435a:	f7ff fc69 	bl	8023c30 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 802435e:	6820      	ldr	r0, [r4, #0]
 8024360:	2206      	movs	r2, #6
 8024362:	491b      	ldr	r1, [pc, #108]	@ (80243d0 <getrange+0x94>)
 8024364:	4428      	add	r0, r5
 8024366:	f007 fef7 	bl	802c158 <memcmp>
 802436a:	b108      	cbz	r0, 8024370 <getrange+0x34>
  for (i = 0; i + 6 < s->len; i++) {
 802436c:	3501      	adds	r5, #1
 802436e:	e7eb      	b.n	8024348 <getrange+0xc>
    if (mg_span(v, &k, &v, '-')) {
 8024370:	ab04      	add	r3, sp, #16
 8024372:	222d      	movs	r2, #45	@ 0x2d
 8024374:	9200      	str	r2, [sp, #0]
 8024376:	aa02      	add	r2, sp, #8
 8024378:	e893 0003 	ldmia.w	r3, {r0, r1}
 802437c:	f7ff ff09 	bl	8024192 <mg_span>
 8024380:	b1c0      	cbz	r0, 80243b4 <getrange+0x78>
      if (mg_to_size_t(k, a)) numparsed++;
 8024382:	4632      	mov	r2, r6
 8024384:	ab02      	add	r3, sp, #8
 8024386:	e893 0003 	ldmia.w	r3, {r0, r1}
 802438a:	f7fe f867 	bl	802245c <mg_to_size_t>
 802438e:	b928      	cbnz	r0, 802439c <getrange+0x60>
  size_t i, numparsed = 0;
 8024390:	2400      	movs	r4, #0
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8024392:	9b05      	ldr	r3, [sp, #20]
 8024394:	b923      	cbnz	r3, 80243a0 <getrange+0x64>
}
 8024396:	4620      	mov	r0, r4
 8024398:	b007      	add	sp, #28
 802439a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (mg_to_size_t(k, a)) numparsed++;
 802439c:	2401      	movs	r4, #1
 802439e:	e7f8      	b.n	8024392 <getrange+0x56>
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 80243a0:	463a      	mov	r2, r7
 80243a2:	ab06      	add	r3, sp, #24
 80243a4:	e913 0003 	ldmdb	r3, {r0, r1}
 80243a8:	f7fe f858 	bl	802245c <mg_to_size_t>
 80243ac:	2800      	cmp	r0, #0
 80243ae:	d0f2      	beq.n	8024396 <getrange+0x5a>
 80243b0:	3401      	adds	r4, #1
 80243b2:	e7f0      	b.n	8024396 <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 80243b4:	4632      	mov	r2, r6
 80243b6:	ab06      	add	r3, sp, #24
 80243b8:	e913 0003 	ldmdb	r3, {r0, r1}
 80243bc:	f7fe f84e 	bl	802245c <mg_to_size_t>
 80243c0:	b908      	cbnz	r0, 80243c6 <getrange+0x8a>
  size_t i, numparsed = 0;
 80243c2:	2400      	movs	r4, #0
 80243c4:	e7e7      	b.n	8024396 <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 80243c6:	2401      	movs	r4, #1
    break;
 80243c8:	e7e5      	b.n	8024396 <getrange+0x5a>
  size_t i, numparsed = 0;
 80243ca:	2400      	movs	r4, #0
 80243cc:	e7e3      	b.n	8024396 <getrange+0x5a>
 80243ce:	bf00      	nop
 80243d0:	08039870 	.word	0x08039870

080243d4 <mg_http_serve_file>:
                        const struct mg_http_serve_opts *opts) {
 80243d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243d8:	b0e7      	sub	sp, #412	@ 0x19c
 80243da:	4607      	mov	r7, r0
 80243dc:	4688      	mov	r8, r1
 80243de:	4614      	mov	r4, r2
 80243e0:	461d      	mov	r5, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80243e2:	f8d3 9014 	ldr.w	r9, [r3, #20]
 80243e6:	f1b9 0f00 	cmp.w	r9, #0
 80243ea:	d036      	beq.n	802445a <mg_http_serve_file+0x86>
  size_t size = 0;
 80243ec:	2300      	movs	r3, #0
 80243ee:	932d      	str	r3, [sp, #180]	@ 0xb4
  time_t mtime = 0;
 80243f0:	2200      	movs	r2, #0
 80243f2:	2300      	movs	r3, #0
 80243f4:	e9cd 232a 	strd	r2, r3, [sp, #168]	@ 0xa8
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 80243f8:	ae5e      	add	r6, sp, #376	@ 0x178
 80243fa:	4621      	mov	r1, r4
 80243fc:	4630      	mov	r0, r6
 80243fe:	f7ff fc0b 	bl	8023c18 <mg_str_s>
 8024402:	68eb      	ldr	r3, [r5, #12]
 8024404:	e896 0006 	ldmia.w	r6, {r1, r2}
 8024408:	a828      	add	r0, sp, #160	@ 0xa0
 802440a:	f7ff ff35 	bl	8024278 <guess_content_type>
  if (path != NULL) {
 802440e:	2c00      	cmp	r4, #0
 8024410:	d053      	beq.n	80244ba <mg_http_serve_file+0xe6>
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8024412:	4995      	ldr	r1, [pc, #596]	@ (8024668 <mg_http_serve_file+0x294>)
 8024414:	4640      	mov	r0, r8
 8024416:	f7fe f89f 	bl	8022558 <mg_http_get_header>
    if (ae != NULL) {
 802441a:	4606      	mov	r6, r0
 802441c:	2800      	cmp	r0, #0
 802441e:	d042      	beq.n	80244a6 <mg_http_serve_file+0xd2>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 8024420:	6802      	ldr	r2, [r0, #0]
 8024422:	6841      	ldr	r1, [r0, #4]
 8024424:	4891      	ldr	r0, [pc, #580]	@ (802466c <mg_http_serve_file+0x298>)
 8024426:	f7ff fb15 	bl	8023a54 <mg_mprintf>
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 802442a:	4683      	mov	fp, r0
 802442c:	b1d8      	cbz	r0, 8024466 <mg_http_serve_file+0x92>
 802442e:	4990      	ldr	r1, [pc, #576]	@ (8024670 <mg_http_serve_file+0x29c>)
 8024430:	f007 ffa6 	bl	802c380 <strstr>
 8024434:	4606      	mov	r6, r0
 8024436:	b1d0      	cbz	r0, 802446e <mg_http_serve_file+0x9a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8024438:	4623      	mov	r3, r4
 802443a:	4a8e      	ldr	r2, [pc, #568]	@ (8024674 <mg_http_serve_file+0x2a0>)
 802443c:	2180      	movs	r1, #128	@ 0x80
 802443e:	a82e      	add	r0, sp, #184	@ 0xb8
 8024440:	f7fe fd60 	bl	8022f04 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 8024444:	2201      	movs	r2, #1
 8024446:	a92e      	add	r1, sp, #184	@ 0xb8
 8024448:	4648      	mov	r0, r9
 802444a:	f7fd ffcc 	bl	80223e6 <mg_fs_open>
        if (fd != NULL) gzip = true, path = tmp;
 802444e:	4606      	mov	r6, r0
 8024450:	b130      	cbz	r0, 8024460 <mg_http_serve_file+0x8c>
 8024452:	f04f 0a01 	mov.w	sl, #1
 8024456:	ac2e      	add	r4, sp, #184	@ 0xb8
 8024458:	e00b      	b.n	8024472 <mg_http_serve_file+0x9e>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 802445a:	f8df 9240 	ldr.w	r9, [pc, #576]	@ 802469c <mg_http_serve_file+0x2c8>
 802445e:	e7c5      	b.n	80243ec <mg_http_serve_file+0x18>
  bool gzip = false;
 8024460:	f04f 0a00 	mov.w	sl, #0
 8024464:	e005      	b.n	8024472 <mg_http_serve_file+0x9e>
  struct mg_fd *fd = NULL;
 8024466:	4606      	mov	r6, r0
  bool gzip = false;
 8024468:	f04f 0a00 	mov.w	sl, #0
 802446c:	e001      	b.n	8024472 <mg_http_serve_file+0x9e>
 802446e:	f04f 0a00 	mov.w	sl, #0
      free(ae_);
 8024472:	4658      	mov	r0, fp
 8024474:	f7f5 fffa 	bl	801a46c <vPortFree>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8024478:	b1c6      	cbz	r6, 80244ac <mg_http_serve_file+0xd8>
  if (fd == NULL && opts->page404 != NULL) {
 802447a:	b316      	cbz	r6, 80244c2 <mg_http_serve_file+0xee>
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 802447c:	f8d9 3000 	ldr.w	r3, [r9]
 8024480:	aa2a      	add	r2, sp, #168	@ 0xa8
 8024482:	a92d      	add	r1, sp, #180	@ 0xb4
 8024484:	4620      	mov	r0, r4
 8024486:	4798      	blx	r3
 8024488:	2800      	cmp	r0, #0
 802448a:	d137      	bne.n	80244fc <mg_http_serve_file+0x128>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 802448c:	4b7a      	ldr	r3, [pc, #488]	@ (8024678 <mg_http_serve_file+0x2a4>)
 802448e:	68aa      	ldr	r2, [r5, #8]
 8024490:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8024494:	4638      	mov	r0, r7
 8024496:	f7ff fa35 	bl	8023904 <mg_http_reply>
    mg_fs_close(fd);
 802449a:	4630      	mov	r0, r6
 802449c:	f7fd ffbc 	bl	8022418 <mg_fs_close>
}
 80244a0:	b067      	add	sp, #412	@ 0x19c
 80244a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool gzip = false;
 80244a6:	f04f 0a00 	mov.w	sl, #0
 80244aa:	e7e5      	b.n	8024478 <mg_http_serve_file+0xa4>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 80244ac:	2201      	movs	r2, #1
 80244ae:	4621      	mov	r1, r4
 80244b0:	4648      	mov	r0, r9
 80244b2:	f7fd ff98 	bl	80223e6 <mg_fs_open>
 80244b6:	4606      	mov	r6, r0
 80244b8:	e7df      	b.n	802447a <mg_http_serve_file+0xa6>
  struct mg_fd *fd = NULL;
 80244ba:	4626      	mov	r6, r4
  bool gzip = false;
 80244bc:	f04f 0a00 	mov.w	sl, #0
 80244c0:	e7db      	b.n	802447a <mg_http_serve_file+0xa6>
  if (fd == NULL && opts->page404 != NULL) {
 80244c2:	6929      	ldr	r1, [r5, #16]
 80244c4:	b1b9      	cbz	r1, 80244f6 <mg_http_serve_file+0x122>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 80244c6:	2201      	movs	r2, #1
 80244c8:	4648      	mov	r0, r9
 80244ca:	f7fd ff8c 	bl	80223e6 <mg_fs_open>
 80244ce:	4606      	mov	r6, r0
    path = opts->page404;
 80244d0:	692c      	ldr	r4, [r5, #16]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 80244d2:	f50d 7bc0 	add.w	fp, sp, #384	@ 0x180
 80244d6:	4621      	mov	r1, r4
 80244d8:	4658      	mov	r0, fp
 80244da:	f7ff fb9d 	bl	8023c18 <mg_str_s>
 80244de:	68eb      	ldr	r3, [r5, #12]
 80244e0:	e89b 0006 	ldmia.w	fp, {r1, r2}
 80244e4:	a80a      	add	r0, sp, #40	@ 0x28
 80244e6:	f7ff fec7 	bl	8024278 <guess_content_type>
 80244ea:	ab28      	add	r3, sp, #160	@ 0xa0
 80244ec:	aa0a      	add	r2, sp, #40	@ 0x28
 80244ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80244f2:	e883 0003 	stmia.w	r3, {r0, r1}
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 80244f6:	2e00      	cmp	r6, #0
 80244f8:	d1c0      	bne.n	802447c <mg_http_serve_file+0xa8>
 80244fa:	e7c7      	b.n	802448c <mg_http_serve_file+0xb8>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 80244fc:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8024500:	e9cd 2300 	strd	r2, r3, [sp]
 8024504:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8024506:	2140      	movs	r1, #64	@ 0x40
 8024508:	a84e      	add	r0, sp, #312	@ 0x138
 802450a:	f7ff fa3d 	bl	8023988 <mg_http_etag>
 802450e:	b190      	cbz	r0, 8024536 <mg_http_serve_file+0x162>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8024510:	495a      	ldr	r1, [pc, #360]	@ (802467c <mg_http_serve_file+0x2a8>)
 8024512:	4640      	mov	r0, r8
 8024514:	f7fe f820 	bl	8022558 <mg_http_get_header>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8024518:	4604      	mov	r4, r0
 802451a:	b160      	cbz	r0, 8024536 <mg_http_serve_file+0x162>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 802451c:	f50d 7bc4 	add.w	fp, sp, #392	@ 0x188
 8024520:	a94e      	add	r1, sp, #312	@ 0x138
 8024522:	4658      	mov	r0, fp
 8024524:	f7ff fb78 	bl	8023c18 <mg_str_s>
 8024528:	e89b 000c 	ldmia.w	fp, {r2, r3}
 802452c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024530:	f7ff fc6d 	bl	8023e0e <mg_strcasecmp>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8024534:	b340      	cbz	r0, 8024588 <mg_http_serve_file+0x1b4>
    size_t r1 = 0, r2 = 0, cl = size;
 8024536:	f04f 0b00 	mov.w	fp, #0
 802453a:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 802453e:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8024542:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8024544:	494e      	ldr	r1, [pc, #312]	@ (8024680 <mg_http_serve_file+0x2ac>)
 8024546:	4640      	mov	r0, r8
 8024548:	f7fe f806 	bl	8022558 <mg_http_get_header>
    range[0] = '\0';
 802454c:	f88d b03c 	strb.w	fp, [sp, #60]	@ 0x3c
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8024550:	2800      	cmp	r0, #0
 8024552:	d040      	beq.n	80245d6 <mg_http_serve_file+0x202>
 8024554:	aa0e      	add	r2, sp, #56	@ 0x38
 8024556:	a90d      	add	r1, sp, #52	@ 0x34
 8024558:	f7ff fef0 	bl	802433c <getrange>
 802455c:	2800      	cmp	r0, #0
 802455e:	dd70      	ble.n	8024642 <mg_http_serve_file+0x26e>
      if (n == 1) r2 = cl - 1;
 8024560:	2801      	cmp	r0, #1
 8024562:	d01c      	beq.n	802459e <mg_http_serve_file+0x1ca>
      if (r1 > r2 || r2 >= cl) {
 8024564:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024566:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024568:	429a      	cmp	r2, r3
 802456a:	d801      	bhi.n	8024570 <mg_http_serve_file+0x19c>
 802456c:	42a3      	cmp	r3, r4
 802456e:	d319      	bcc.n	80245a4 <mg_http_serve_file+0x1d0>
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8024570:	2400      	movs	r4, #0
 8024572:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8024574:	9300      	str	r3, [sp, #0]
 8024576:	9401      	str	r4, [sp, #4]
 8024578:	4a42      	ldr	r2, [pc, #264]	@ (8024684 <mg_http_serve_file+0x2b0>)
 802457a:	2164      	movs	r1, #100	@ 0x64
 802457c:	a80f      	add	r0, sp, #60	@ 0x3c
 802457e:	f7fe fcc1 	bl	8022f04 <mg_snprintf>
        status = 416;
 8024582:	f44f 79d0 	mov.w	r9, #416	@ 0x1a0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8024586:	e028      	b.n	80245da <mg_http_serve_file+0x206>
    mg_fs_close(fd);
 8024588:	4630      	mov	r0, r6
 802458a:	f7fd ff45 	bl	8022418 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 802458e:	4b3e      	ldr	r3, [pc, #248]	@ (8024688 <mg_http_serve_file+0x2b4>)
 8024590:	68aa      	ldr	r2, [r5, #8]
 8024592:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8024596:	4638      	mov	r0, r7
 8024598:	f7ff f9b4 	bl	8023904 <mg_http_reply>
 802459c:	e780      	b.n	80244a0 <mg_http_serve_file+0xcc>
      if (n == 1) r2 = cl - 1;
 802459e:	1e63      	subs	r3, r4, #1
 80245a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80245a2:	e7df      	b.n	8024564 <mg_http_serve_file+0x190>
        cl = r2 - r1 + 1;
 80245a4:	1a9b      	subs	r3, r3, r2
 80245a6:	1c5c      	adds	r4, r3, #1
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 80245a8:	1911      	adds	r1, r2, r4
 80245aa:	3901      	subs	r1, #1
        mg_snprintf(range, sizeof(range),
 80245ac:	2300      	movs	r3, #0
 80245ae:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 80245b0:	9004      	str	r0, [sp, #16]
 80245b2:	9305      	str	r3, [sp, #20]
 80245b4:	9102      	str	r1, [sp, #8]
 80245b6:	9303      	str	r3, [sp, #12]
 80245b8:	9200      	str	r2, [sp, #0]
 80245ba:	9301      	str	r3, [sp, #4]
 80245bc:	4a33      	ldr	r2, [pc, #204]	@ (802468c <mg_http_serve_file+0x2b8>)
 80245be:	2164      	movs	r1, #100	@ 0x64
 80245c0:	a80f      	add	r0, sp, #60	@ 0x3c
 80245c2:	f7fe fc9f 	bl	8022f04 <mg_snprintf>
        fs->sk(fd->fd, r1);
 80245c6:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80245ca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80245cc:	6830      	ldr	r0, [r6, #0]
 80245ce:	4798      	blx	r3
        status = 206;
 80245d0:	f04f 09ce 	mov.w	r9, #206	@ 0xce
 80245d4:	e001      	b.n	80245da <mg_http_serve_file+0x206>
    int n, status = 200;
 80245d6:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
    mg_printf(c,
 80245da:	4648      	mov	r0, r9
 80245dc:	f7fb f9d8 	bl	801f990 <mg_http_status_code_str>
 80245e0:	4603      	mov	r3, r0
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 80245e2:	9929      	ldr	r1, [sp, #164]	@ 0xa4
    mg_printf(c,
 80245e4:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 80245e6:	46a4      	mov	ip, r4
 80245e8:	f1ba 0f00 	cmp.w	sl, #0
 80245ec:	d02c      	beq.n	8024648 <mg_http_serve_file+0x274>
 80245ee:	f8df e0b0 	ldr.w	lr, [pc, #176]	@ 80246a0 <mg_http_serve_file+0x2cc>
              range, opts->extra_headers ? opts->extra_headers : "");
 80245f2:	68aa      	ldr	r2, [r5, #8]
    mg_printf(c,
 80245f4:	b35a      	cbz	r2, 802464e <mg_http_serve_file+0x27a>
 80245f6:	9208      	str	r2, [sp, #32]
 80245f8:	aa0f      	add	r2, sp, #60	@ 0x3c
 80245fa:	9207      	str	r2, [sp, #28]
 80245fc:	f8cd e018 	str.w	lr, [sp, #24]
 8024600:	f8cd c010 	str.w	ip, [sp, #16]
 8024604:	2200      	movs	r2, #0
 8024606:	9205      	str	r2, [sp, #20]
 8024608:	aa4e      	add	r2, sp, #312	@ 0x138
 802460a:	9202      	str	r2, [sp, #8]
 802460c:	9001      	str	r0, [sp, #4]
 802460e:	9100      	str	r1, [sp, #0]
 8024610:	464a      	mov	r2, r9
 8024612:	491f      	ldr	r1, [pc, #124]	@ (8024690 <mg_http_serve_file+0x2bc>)
 8024614:	4638      	mov	r0, r7
 8024616:	f7ff f94f 	bl	80238b8 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 802461a:	ad64      	add	r5, sp, #400	@ 0x190
 802461c:	491d      	ldr	r1, [pc, #116]	@ (8024694 <mg_http_serve_file+0x2c0>)
 802461e:	4628      	mov	r0, r5
 8024620:	f7ff fafa 	bl	8023c18 <mg_str_s>
 8024624:	e895 000c 	ldmia.w	r5, {r2, r3}
 8024628:	e898 0003 	ldmia.w	r8, {r0, r1}
 802462c:	f7ff fbef 	bl	8023e0e <mg_strcasecmp>
 8024630:	b178      	cbz	r0, 8024652 <mg_http_serve_file+0x27e>
      c->pfn = static_cb;
 8024632:	4b19      	ldr	r3, [pc, #100]	@ (8024698 <mg_http_serve_file+0x2c4>)
 8024634:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      c->pfn_data = fd;
 8024638:	f8c7 6084 	str.w	r6, [r7, #132]	@ 0x84
      *clp = cl;
 802463c:	f8c7 40a4 	str.w	r4, [r7, #164]	@ 0xa4
}
 8024640:	e72e      	b.n	80244a0 <mg_http_serve_file+0xcc>
    int n, status = 200;
 8024642:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
 8024646:	e7c8      	b.n	80245da <mg_http_serve_file+0x206>
    mg_printf(c,
 8024648:	f8df e03c 	ldr.w	lr, [pc, #60]	@ 8024688 <mg_http_serve_file+0x2b4>
 802464c:	e7d1      	b.n	80245f2 <mg_http_serve_file+0x21e>
 802464e:	4a0e      	ldr	r2, [pc, #56]	@ (8024688 <mg_http_serve_file+0x2b4>)
 8024650:	e7d1      	b.n	80245f6 <mg_http_serve_file+0x222>
      c->is_resp = 0;
 8024652:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8024656:	f36f 13c7 	bfc	r3, #7, #1
 802465a:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_fs_close(fd);
 802465e:	4630      	mov	r0, r6
 8024660:	f7fd feda 	bl	8022418 <mg_fs_close>
 8024664:	e71c      	b.n	80244a0 <mg_http_serve_file+0xcc>
 8024666:	bf00      	nop
 8024668:	08039894 	.word	0x08039894
 802466c:	080397a0 	.word	0x080397a0
 8024670:	0803ac54 	.word	0x0803ac54
 8024674:	080398a4 	.word	0x080398a4
 8024678:	080398ac 	.word	0x080398ac
 802467c:	080398b8 	.word	0x080398b8
 8024680:	080398c8 	.word	0x080398c8
 8024684:	080398d0 	.word	0x080398d0
 8024688:	08036364 	.word	0x08036364
 802468c:	080398f0 	.word	0x080398f0
 8024690:	08039918 	.word	0x08039918
 8024694:	08039968 	.word	0x08039968
 8024698:	080267ad 	.word	0x080267ad
 802469c:	20000130 	.word	0x20000130
 80246a0:	08039878 	.word	0x08039878

080246a4 <mg_str_to_num>:
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 80246a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246a8:	b083      	sub	sp, #12
 80246aa:	ac02      	add	r4, sp, #8
 80246ac:	e904 0003 	stmdb	r4, {r0, r1}
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 80246b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80246b2:	3901      	subs	r1, #1
 80246b4:	2907      	cmp	r1, #7
 80246b6:	f200 8128 	bhi.w	802490a <mg_str_to_num+0x266>
 80246ba:	e8df f011 	tbh	[pc, r1, lsl #1]
 80246be:	0008      	.short	0x0008
 80246c0:	01260020 	.word	0x01260020
 80246c4:	0126000c 	.word	0x0126000c
 80246c8:	01260126 	.word	0x01260126
 80246cc:	001c      	.short	0x001c
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 80246ce:	20ff      	movs	r0, #255	@ 0xff
 80246d0:	f04f 0e00 	mov.w	lr, #0
 80246d4:	e003      	b.n	80246de <mg_str_to_num+0x3a>
 80246d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80246da:	f04f 0e00 	mov.w	lr, #0
  if (base == 0 && str.len >= 2) {
 80246de:	b9e2      	cbnz	r2, 802471a <mg_str_to_num+0x76>
 80246e0:	9901      	ldr	r1, [sp, #4]
 80246e2:	2901      	cmp	r1, #1
 80246e4:	d926      	bls.n	8024734 <mg_str_to_num+0x90>
    if (str.buf[i] == '0') {
 80246e6:	9a00      	ldr	r2, [sp, #0]
 80246e8:	7811      	ldrb	r1, [r2, #0]
 80246ea:	2930      	cmp	r1, #48	@ 0x30
 80246ec:	d00c      	beq.n	8024708 <mg_str_to_num+0x64>
  size_t i = 0, ndigits = 0;
 80246ee:	f04f 0c00 	mov.w	ip, #0
      base = 10;
 80246f2:	220a      	movs	r2, #10
 80246f4:	e013      	b.n	802471e <mg_str_to_num+0x7a>
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 80246f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80246fa:	4686      	mov	lr, r0
 80246fc:	e7ef      	b.n	80246de <mg_str_to_num+0x3a>
 80246fe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8024702:	f04f 0e00 	mov.w	lr, #0
 8024706:	e7ea      	b.n	80246de <mg_str_to_num+0x3a>
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8024708:	7852      	ldrb	r2, [r2, #1]
 802470a:	2a62      	cmp	r2, #98	@ 0x62
 802470c:	d015      	beq.n	802473a <mg_str_to_num+0x96>
 802470e:	2a78      	cmp	r2, #120	@ 0x78
 8024710:	d017      	beq.n	8024742 <mg_str_to_num+0x9e>
      i++;
 8024712:	f04f 0c01 	mov.w	ip, #1
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8024716:	220a      	movs	r2, #10
 8024718:	e001      	b.n	802471e <mg_str_to_num+0x7a>
  size_t i = 0, ndigits = 0;
 802471a:	f04f 0c00 	mov.w	ip, #0
  switch (base) {
 802471e:	2a0a      	cmp	r2, #10
 8024720:	d044      	beq.n	80247ac <mg_str_to_num+0x108>
 8024722:	2a10      	cmp	r2, #16
 8024724:	f000 80d4 	beq.w	80248d0 <mg_str_to_num+0x22c>
 8024728:	2a02      	cmp	r2, #2
 802472a:	d00e      	beq.n	802474a <mg_str_to_num+0xa6>
 802472c:	2000      	movs	r0, #0
}
 802472e:	b003      	add	sp, #12
 8024730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t i = 0, ndigits = 0;
 8024734:	f04f 0c00 	mov.w	ip, #0
 8024738:	e7f1      	b.n	802471e <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 802473a:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 802473e:	4662      	mov	r2, ip
 8024740:	e7ed      	b.n	802471e <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 8024742:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8024746:	2210      	movs	r2, #16
 8024748:	e7e9      	b.n	802471e <mg_str_to_num+0x7a>
  switch (base) {
 802474a:	2200      	movs	r2, #0
 802474c:	4611      	mov	r1, r2
 802474e:	4614      	mov	r4, r2
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 8024750:	9d01      	ldr	r5, [sp, #4]
 8024752:	4565      	cmp	r5, ip
 8024754:	f240 80c0 	bls.w	80248d8 <mg_str_to_num+0x234>
 8024758:	9d00      	ldr	r5, [sp, #0]
 802475a:	f815 600c 	ldrb.w	r6, [r5, ip]
 802475e:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 8024762:	b2ff      	uxtb	r7, r7
 8024764:	2f01      	cmp	r7, #1
 8024766:	f200 80b7 	bhi.w	80248d8 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 802476a:	3e30      	subs	r6, #48	@ 0x30
 802476c:	ea4f 78e6 	mov.w	r8, r6, asr #31
        if (result > max / 2) return false;  // Overflow
 8024770:	ea4f 0950 	mov.w	r9, r0, lsr #1
 8024774:	ea49 79ce 	orr.w	r9, r9, lr, lsl #31
 8024778:	ea4f 075e 	mov.w	r7, lr, lsr #1
 802477c:	4591      	cmp	r9, r2
 802477e:	418f      	sbcs	r7, r1
 8024780:	f0c0 80c5 	bcc.w	802490e <mg_str_to_num+0x26a>
        result *= 2;
 8024784:	1892      	adds	r2, r2, r2
 8024786:	4149      	adcs	r1, r1
        if (result > max - digit) return false;  // Overflow
 8024788:	ebb0 0a06 	subs.w	sl, r0, r6
 802478c:	eb6e 0708 	sbc.w	r7, lr, r8
 8024790:	4592      	cmp	sl, r2
 8024792:	418f      	sbcs	r7, r1
 8024794:	f0c0 80bd 	bcc.w	8024912 <mg_str_to_num+0x26e>
        result += digit;
 8024798:	18b2      	adds	r2, r6, r2
 802479a:	eb48 0101 	adc.w	r1, r8, r1
        i++, ndigits++;
 802479e:	f10c 0c01 	add.w	ip, ip, #1
 80247a2:	3401      	adds	r4, #1
 80247a4:	e7d4      	b.n	8024750 <mg_str_to_num+0xac>
        if (result > max / 10) return false;  // Overflow
 80247a6:	f04f 0901 	mov.w	r9, #1
 80247aa:	e017      	b.n	80247dc <mg_str_to_num+0x138>
  switch (base) {
 80247ac:	2200      	movs	r2, #0
 80247ae:	4611      	mov	r1, r2
 80247b0:	4614      	mov	r4, r2
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 80247b2:	9d01      	ldr	r5, [sp, #4]
 80247b4:	4565      	cmp	r5, ip
 80247b6:	f240 808f 	bls.w	80248d8 <mg_str_to_num+0x234>
 80247ba:	9d00      	ldr	r5, [sp, #0]
 80247bc:	f815 700c 	ldrb.w	r7, [r5, ip]
 80247c0:	2f2f      	cmp	r7, #47	@ 0x2f
 80247c2:	f240 8089 	bls.w	80248d8 <mg_str_to_num+0x234>
 80247c6:	2f39      	cmp	r7, #57	@ 0x39
 80247c8:	f200 8086 	bhi.w	80248d8 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 80247cc:	3f30      	subs	r7, #48	@ 0x30
 80247ce:	ea4f 78e7 	mov.w	r8, r7, asr #31
        if (result > max / 10) return false;  // Overflow
 80247d2:	f04f 0900 	mov.w	r9, #0
 80247d6:	eb10 060e 	adds.w	r6, r0, lr
 80247da:	d2e4      	bcs.n	80247a6 <mg_str_to_num+0x102>
 80247dc:	444e      	add	r6, r9
 80247de:	4d54      	ldr	r5, [pc, #336]	@ (8024930 <mg_str_to_num+0x28c>)
 80247e0:	fba5 9b06 	umull	r9, fp, r5, r6
 80247e4:	f02b 0903 	bic.w	r9, fp, #3
 80247e8:	eb09 099b 	add.w	r9, r9, fp, lsr #2
 80247ec:	eba6 0609 	sub.w	r6, r6, r9
 80247f0:	1b86      	subs	r6, r0, r6
 80247f2:	f16e 0b00 	sbc.w	fp, lr, #0
 80247f6:	f04f 39cc 	mov.w	r9, #3435973836	@ 0xcccccccc
 80247fa:	fb09 f906 	mul.w	r9, r9, r6
 80247fe:	fb05 990b 	mla	r9, r5, fp, r9
 8024802:	fba6 6a05 	umull	r6, sl, r6, r5
 8024806:	44d1      	add	r9, sl
 8024808:	0876      	lsrs	r6, r6, #1
 802480a:	ea46 76c9 	orr.w	r6, r6, r9, lsl #31
 802480e:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8024812:	4296      	cmp	r6, r2
 8024814:	eb79 0901 	sbcs.w	r9, r9, r1
 8024818:	d37d      	bcc.n	8024916 <mg_str_to_num+0x272>
        result *= 10;
 802481a:	ea4f 0981 	mov.w	r9, r1, lsl #2
 802481e:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
 8024822:	0096      	lsls	r6, r2, #2
 8024824:	18b2      	adds	r2, r6, r2
 8024826:	eb41 0909 	adc.w	r9, r1, r9
 802482a:	1892      	adds	r2, r2, r2
 802482c:	eb49 0909 	adc.w	r9, r9, r9
        if (result > max - digit) return false;  // Overflow
 8024830:	ebb0 0a07 	subs.w	sl, r0, r7
 8024834:	eb6e 0108 	sbc.w	r1, lr, r8
 8024838:	4592      	cmp	sl, r2
 802483a:	eb71 0109 	sbcs.w	r1, r1, r9
 802483e:	d36c      	bcc.n	802491a <mg_str_to_num+0x276>
        result += digit;
 8024840:	18ba      	adds	r2, r7, r2
 8024842:	eb48 0109 	adc.w	r1, r8, r9
        i++, ndigits++;
 8024846:	f10c 0c01 	add.w	ip, ip, #1
 802484a:	3401      	adds	r4, #1
 802484c:	e7b1      	b.n	80247b2 <mg_str_to_num+0x10e>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 802484e:	f1a6 0741 	sub.w	r7, r6, #65	@ 0x41
 8024852:	b2ff      	uxtb	r7, r7
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8024854:	2f05      	cmp	r7, #5
 8024856:	d832      	bhi.n	80248be <mg_str_to_num+0x21a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8024858:	3e37      	subs	r6, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 802485a:	46b0      	mov	r8, r6
 802485c:	17f6      	asrs	r6, r6, #31
        if (digit == (uint64_t) ~0) break;
 802485e:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8024862:	bf08      	it	eq
 8024864:	f1b8 3fff 	cmpeq.w	r8, #4294967295	@ 0xffffffff
 8024868:	d036      	beq.n	80248d8 <mg_str_to_num+0x234>
        if (result > max / 16) return false;  // Overflow
 802486a:	ea4f 1910 	mov.w	r9, r0, lsr #4
 802486e:	ea49 790e 	orr.w	r9, r9, lr, lsl #28
 8024872:	ea4f 171e 	mov.w	r7, lr, lsr #4
 8024876:	4591      	cmp	r9, r2
 8024878:	418f      	sbcs	r7, r1
 802487a:	d350      	bcc.n	802491e <mg_str_to_num+0x27a>
        result *= 16;
 802487c:	0109      	lsls	r1, r1, #4
 802487e:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8024882:	0112      	lsls	r2, r2, #4
        if (result > max - digit) return false;  // Overflow
 8024884:	ebb0 0908 	subs.w	r9, r0, r8
 8024888:	eb6e 0706 	sbc.w	r7, lr, r6
 802488c:	4591      	cmp	r9, r2
 802488e:	418f      	sbcs	r7, r1
 8024890:	d347      	bcc.n	8024922 <mg_str_to_num+0x27e>
        result += digit;
 8024892:	eb18 0202 	adds.w	r2, r8, r2
 8024896:	eb46 0101 	adc.w	r1, r6, r1
        i++, ndigits++;
 802489a:	f10c 0c01 	add.w	ip, ip, #1
 802489e:	3401      	adds	r4, #1
      while (i < str.len) {
 80248a0:	9d01      	ldr	r5, [sp, #4]
 80248a2:	4565      	cmp	r5, ip
 80248a4:	d918      	bls.n	80248d8 <mg_str_to_num+0x234>
        char c = str.buf[i];
 80248a6:	9d00      	ldr	r5, [sp, #0]
 80248a8:	f815 600c 	ldrb.w	r6, [r5, ip]
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 80248ac:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 80248b0:	b2ff      	uxtb	r7, r7
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80248b2:	2f09      	cmp	r7, #9
 80248b4:	d8cb      	bhi.n	802484e <mg_str_to_num+0x1aa>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 80248b6:	3e30      	subs	r6, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80248b8:	46b0      	mov	r8, r6
 80248ba:	17f6      	asrs	r6, r6, #31
 80248bc:	e7cf      	b.n	802485e <mg_str_to_num+0x1ba>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80248be:	f1a6 0761 	sub.w	r7, r6, #97	@ 0x61
 80248c2:	b2ff      	uxtb	r7, r7
                                                  : (uint64_t) ~0;
 80248c4:	2f05      	cmp	r7, #5
 80248c6:	d807      	bhi.n	80248d8 <mg_str_to_num+0x234>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80248c8:	3e57      	subs	r6, #87	@ 0x57
                                                  : (uint64_t) ~0;
 80248ca:	46b0      	mov	r8, r6
 80248cc:	17f6      	asrs	r6, r6, #31
 80248ce:	e7c6      	b.n	802485e <mg_str_to_num+0x1ba>
  switch (base) {
 80248d0:	2200      	movs	r2, #0
 80248d2:	4611      	mov	r1, r2
 80248d4:	4614      	mov	r4, r2
 80248d6:	e7e3      	b.n	80248a0 <mg_str_to_num+0x1fc>
  if (ndigits == 0) return false;
 80248d8:	b32c      	cbz	r4, 8024926 <mg_str_to_num+0x282>
  if (i != str.len) return false;
 80248da:	9801      	ldr	r0, [sp, #4]
 80248dc:	4560      	cmp	r0, ip
 80248de:	d124      	bne.n	802492a <mg_str_to_num+0x286>
  if (val_len == 1) {
 80248e0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80248e2:	2801      	cmp	r0, #1
 80248e4:	d009      	beq.n	80248fa <mg_str_to_num+0x256>
  } else if (val_len == 2) {
 80248e6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80248e8:	2802      	cmp	r0, #2
 80248ea:	d008      	beq.n	80248fe <mg_str_to_num+0x25a>
  } else if (val_len == 4) {
 80248ec:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80248ee:	2804      	cmp	r0, #4
 80248f0:	d008      	beq.n	8024904 <mg_str_to_num+0x260>
    *((uint64_t *) val) = (uint64_t) result;
 80248f2:	601a      	str	r2, [r3, #0]
 80248f4:	6059      	str	r1, [r3, #4]
  return true;
 80248f6:	2001      	movs	r0, #1
 80248f8:	e719      	b.n	802472e <mg_str_to_num+0x8a>
    *((uint8_t *) val) = (uint8_t) result;
 80248fa:	701a      	strb	r2, [r3, #0]
 80248fc:	e717      	b.n	802472e <mg_str_to_num+0x8a>
    *((uint16_t *) val) = (uint16_t) result;
 80248fe:	801a      	strh	r2, [r3, #0]
  return true;
 8024900:	2001      	movs	r0, #1
 8024902:	e714      	b.n	802472e <mg_str_to_num+0x8a>
    *((uint32_t *) val) = (uint32_t) result;
 8024904:	601a      	str	r2, [r3, #0]
  return true;
 8024906:	2001      	movs	r0, #1
 8024908:	e711      	b.n	802472e <mg_str_to_num+0x8a>
  switch (base) {
 802490a:	2000      	movs	r0, #0
 802490c:	e70f      	b.n	802472e <mg_str_to_num+0x8a>
        if (result > max / 2) return false;  // Overflow
 802490e:	2000      	movs	r0, #0
 8024910:	e70d      	b.n	802472e <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8024912:	2000      	movs	r0, #0
 8024914:	e70b      	b.n	802472e <mg_str_to_num+0x8a>
        if (result > max / 10) return false;  // Overflow
 8024916:	2000      	movs	r0, #0
 8024918:	e709      	b.n	802472e <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 802491a:	2000      	movs	r0, #0
 802491c:	e707      	b.n	802472e <mg_str_to_num+0x8a>
        if (result > max / 16) return false;  // Overflow
 802491e:	2000      	movs	r0, #0
 8024920:	e705      	b.n	802472e <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8024922:	2000      	movs	r0, #0
 8024924:	e703      	b.n	802472e <mg_str_to_num+0x8a>
  if (ndigits == 0) return false;
 8024926:	2000      	movs	r0, #0
 8024928:	e701      	b.n	802472e <mg_str_to_num+0x8a>
  if (i != str.len) return false;
 802492a:	2000      	movs	r0, #0
 802492c:	e6ff      	b.n	802472e <mg_str_to_num+0x8a>
 802492e:	bf00      	nop
 8024930:	cccccccd 	.word	0xcccccccd

08024934 <mg_url_decode>:
                  int is_form_url_encoded) {
 8024934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024938:	b087      	sub	sp, #28
 802493a:	4606      	mov	r6, r0
 802493c:	460f      	mov	r7, r1
 802493e:	4693      	mov	fp, r2
 8024940:	4699      	mov	r9, r3
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8024942:	2400      	movs	r4, #0
 8024944:	4623      	mov	r3, r4
 8024946:	e027      	b.n	8024998 <mg_url_decode+0x64>
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8024948:	f103 0802 	add.w	r8, r3, #2
 802494c:	45b8      	cmp	r8, r7
 802494e:	d241      	bcs.n	80249d4 <mg_url_decode+0xa0>
 8024950:	3301      	adds	r3, #1
 8024952:	18f2      	adds	r2, r6, r3
 8024954:	9203      	str	r2, [sp, #12]
 8024956:	5cf0      	ldrb	r0, [r6, r3]
 8024958:	f7fa ff16 	bl	801f788 <isx>
 802495c:	2800      	cmp	r0, #0
 802495e:	d03c      	beq.n	80249da <mg_url_decode+0xa6>
 8024960:	f816 0008 	ldrb.w	r0, [r6, r8]
 8024964:	f7fa ff10 	bl	801f788 <isx>
 8024968:	2800      	cmp	r0, #0
 802496a:	d039      	beq.n	80249e0 <mg_url_decode+0xac>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 802496c:	f10d 0a10 	add.w	sl, sp, #16
 8024970:	2202      	movs	r2, #2
 8024972:	9903      	ldr	r1, [sp, #12]
 8024974:	4650      	mov	r0, sl
 8024976:	f7ff f95b 	bl	8023c30 <mg_str_n>
 802497a:	2301      	movs	r3, #1
 802497c:	9300      	str	r3, [sp, #0]
 802497e:	eb0b 0304 	add.w	r3, fp, r4
 8024982:	2210      	movs	r2, #16
 8024984:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8024988:	f7ff fe8c 	bl	80246a4 <mg_str_to_num>
        i += 2;
 802498c:	4643      	mov	r3, r8
 802498e:	e001      	b.n	8024994 <mg_url_decode+0x60>
      dst[j] = src[i];
 8024990:	f80b 2004 	strb.w	r2, [fp, r4]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8024994:	3301      	adds	r3, #1
 8024996:	462c      	mov	r4, r5
 8024998:	42bb      	cmp	r3, r7
 802499a:	d20e      	bcs.n	80249ba <mg_url_decode+0x86>
 802499c:	1c65      	adds	r5, r4, #1
 802499e:	454d      	cmp	r5, r9
 80249a0:	d20b      	bcs.n	80249ba <mg_url_decode+0x86>
    if (src[i] == '%') {
 80249a2:	5cf2      	ldrb	r2, [r6, r3]
 80249a4:	2a25      	cmp	r2, #37	@ 0x25
 80249a6:	d0cf      	beq.n	8024948 <mg_url_decode+0x14>
    } else if (is_form_url_encoded && src[i] == '+') {
 80249a8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80249aa:	2900      	cmp	r1, #0
 80249ac:	d0f0      	beq.n	8024990 <mg_url_decode+0x5c>
 80249ae:	2a2b      	cmp	r2, #43	@ 0x2b
 80249b0:	d1ee      	bne.n	8024990 <mg_url_decode+0x5c>
      dst[j] = ' ';
 80249b2:	2220      	movs	r2, #32
 80249b4:	f80b 2004 	strb.w	r2, [fp, r4]
 80249b8:	e7ec      	b.n	8024994 <mg_url_decode+0x60>
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 80249ba:	454c      	cmp	r4, r9
 80249bc:	d202      	bcs.n	80249c4 <mg_url_decode+0x90>
 80249be:	2200      	movs	r2, #0
 80249c0:	f80b 2004 	strb.w	r2, [fp, r4]
  return i >= src_len && j < dst_len ? (int) j : -1;
 80249c4:	42bb      	cmp	r3, r7
 80249c6:	d30e      	bcc.n	80249e6 <mg_url_decode+0xb2>
 80249c8:	454c      	cmp	r4, r9
 80249ca:	d20f      	bcs.n	80249ec <mg_url_decode+0xb8>
 80249cc:	4620      	mov	r0, r4
}
 80249ce:	b007      	add	sp, #28
 80249d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
 80249d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80249d8:	e7f9      	b.n	80249ce <mg_url_decode+0x9a>
 80249da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80249de:	e7f6      	b.n	80249ce <mg_url_decode+0x9a>
 80249e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80249e4:	e7f3      	b.n	80249ce <mg_url_decode+0x9a>
  return i >= src_len && j < dst_len ? (int) j : -1;
 80249e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80249ea:	e7f0      	b.n	80249ce <mg_url_decode+0x9a>
 80249ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80249f0:	e7ed      	b.n	80249ce <mg_url_decode+0x9a>

080249f2 <mg_http_get_var>:
  if (dst != NULL && dst_len > 0) {
 80249f2:	b352      	cbz	r2, 8024a4a <mg_http_get_var+0x58>
                    size_t dst_len) {
 80249f4:	b570      	push	{r4, r5, r6, lr}
 80249f6:	b086      	sub	sp, #24
 80249f8:	4604      	mov	r4, r0
 80249fa:	461d      	mov	r5, r3
 80249fc:	4616      	mov	r6, r2
  if (dst != NULL && dst_len > 0) {
 80249fe:	b10b      	cbz	r3, 8024a04 <mg_http_get_var+0x12>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8024a00:	2300      	movs	r3, #0
 8024a02:	7013      	strb	r3, [r2, #0]
  if (dst == NULL || dst_len == 0) {
 8024a04:	b325      	cbz	r5, 8024a50 <mg_http_get_var+0x5e>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 8024a06:	6823      	ldr	r3, [r4, #0]
 8024a08:	b32b      	cbz	r3, 8024a56 <mg_http_get_var+0x64>
 8024a0a:	b339      	cbz	r1, 8024a5c <mg_http_get_var+0x6a>
 8024a0c:	6863      	ldr	r3, [r4, #4]
 8024a0e:	b343      	cbz	r3, 8024a62 <mg_http_get_var+0x70>
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8024a10:	a804      	add	r0, sp, #16
 8024a12:	f7ff f901 	bl	8023c18 <mg_str_s>
 8024a16:	9b05      	ldr	r3, [sp, #20]
 8024a18:	9300      	str	r3, [sp, #0]
 8024a1a:	9b04      	ldr	r3, [sp, #16]
 8024a1c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8024a20:	a802      	add	r0, sp, #8
 8024a22:	f7ff fbf3 	bl	802420c <mg_http_var>
    if (v.buf == NULL) {
 8024a26:	9802      	ldr	r0, [sp, #8]
 8024a28:	b158      	cbz	r0, 8024a42 <mg_http_get_var+0x50>
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 8024a2a:	2301      	movs	r3, #1
 8024a2c:	9300      	str	r3, [sp, #0]
 8024a2e:	462b      	mov	r3, r5
 8024a30:	4632      	mov	r2, r6
 8024a32:	9903      	ldr	r1, [sp, #12]
 8024a34:	f7ff ff7e 	bl	8024934 <mg_url_decode>
      if (len < 0) len = -3;  // Failed to decode
 8024a38:	2800      	cmp	r0, #0
 8024a3a:	da04      	bge.n	8024a46 <mg_http_get_var+0x54>
 8024a3c:	f06f 0002 	mvn.w	r0, #2
 8024a40:	e001      	b.n	8024a46 <mg_http_get_var+0x54>
      len = -4;  // Name does not exist
 8024a42:	f06f 0003 	mvn.w	r0, #3
}
 8024a46:	b006      	add	sp, #24
 8024a48:	bd70      	pop	{r4, r5, r6, pc}
    len = -2;  // Bad destination
 8024a4a:	f06f 0001 	mvn.w	r0, #1
}
 8024a4e:	4770      	bx	lr
    len = -2;  // Bad destination
 8024a50:	f06f 0001 	mvn.w	r0, #1
 8024a54:	e7f7      	b.n	8024a46 <mg_http_get_var+0x54>
    len = -1;  // Bad source
 8024a56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024a5a:	e7f4      	b.n	8024a46 <mg_http_get_var+0x54>
 8024a5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024a60:	e7f1      	b.n	8024a46 <mg_http_get_var+0x54>
 8024a62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  return len;
 8024a66:	e7ee      	b.n	8024a46 <mg_http_get_var+0x54>

08024a68 <mg_http_creds>:
                   char *pass, size_t passlen) {
 8024a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024a6c:	b0c4      	sub	sp, #272	@ 0x110
 8024a6e:	4606      	mov	r6, r0
 8024a70:	460d      	mov	r5, r1
 8024a72:	4617      	mov	r7, r2
 8024a74:	461c      	mov	r4, r3
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 8024a76:	493f      	ldr	r1, [pc, #252]	@ (8024b74 <mg_http_creds+0x10c>)
 8024a78:	f7fd fd6e 	bl	8022558 <mg_http_get_header>
  user[0] = pass[0] = '\0';
 8024a7c:	2300      	movs	r3, #0
 8024a7e:	7023      	strb	r3, [r4, #0]
 8024a80:	702b      	strb	r3, [r5, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 8024a82:	b1c8      	cbz	r0, 8024ab8 <mg_http_creds+0x50>
 8024a84:	4680      	mov	r8, r0
 8024a86:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8024a8a:	f1b9 0f06 	cmp.w	r9, #6
 8024a8e:	d907      	bls.n	8024aa0 <mg_http_creds+0x38>
 8024a90:	f8d0 a000 	ldr.w	sl, [r0]
 8024a94:	2206      	movs	r2, #6
 8024a96:	4938      	ldr	r1, [pc, #224]	@ (8024b78 <mg_http_creds+0x110>)
 8024a98:	4650      	mov	r0, sl
 8024a9a:	f007 fb5d 	bl	802c158 <memcmp>
 8024a9e:	b328      	cbz	r0, 8024aec <mg_http_creds+0x84>
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 8024aa0:	f1b9 0f07 	cmp.w	r9, #7
 8024aa4:	d908      	bls.n	8024ab8 <mg_http_creds+0x50>
 8024aa6:	f8d8 5000 	ldr.w	r5, [r8]
 8024aaa:	2207      	movs	r2, #7
 8024aac:	4933      	ldr	r1, [pc, #204]	@ (8024b7c <mg_http_creds+0x114>)
 8024aae:	4628      	mov	r0, r5
 8024ab0:	f007 fb52 	bl	802c158 <memcmp>
 8024ab4:	2800      	cmp	r0, #0
 8024ab6:	d043      	beq.n	8024b40 <mg_http_creds+0xd8>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 8024ab8:	4931      	ldr	r1, [pc, #196]	@ (8024b80 <mg_http_creds+0x118>)
 8024aba:	4630      	mov	r0, r6
 8024abc:	f7fd fd4c 	bl	8022558 <mg_http_get_header>
 8024ac0:	4605      	mov	r5, r0
 8024ac2:	2800      	cmp	r0, #0
 8024ac4:	d04e      	beq.n	8024b64 <mg_http_creds+0xfc>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 8024ac6:	220c      	movs	r2, #12
 8024ac8:	492e      	ldr	r1, [pc, #184]	@ (8024b84 <mg_http_creds+0x11c>)
 8024aca:	a842      	add	r0, sp, #264	@ 0x108
 8024acc:	f7ff f8b0 	bl	8023c30 <mg_str_n>
 8024ad0:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8024ad2:	9300      	str	r3, [sp, #0]
 8024ad4:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 8024ad6:	e895 0006 	ldmia.w	r5, {r1, r2}
 8024ada:	a802      	add	r0, sp, #8
 8024adc:	f7ff f8c8 	bl	8023c70 <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 8024ae0:	9b03      	ldr	r3, [sp, #12]
 8024ae2:	2b00      	cmp	r3, #0
 8024ae4:	d136      	bne.n	8024b54 <mg_http_creds+0xec>
}
 8024ae6:	b044      	add	sp, #272	@ 0x110
 8024ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 8024aec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8024af0:	aa02      	add	r2, sp, #8
 8024af2:	f1a9 0106 	sub.w	r1, r9, #6
 8024af6:	f10a 0006 	add.w	r0, sl, #6
 8024afa:	f7fd fba2 	bl	8022242 <mg_base64_decode>
 8024afe:	4606      	mov	r6, r0
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 8024b00:	4602      	mov	r2, r0
 8024b02:	213a      	movs	r1, #58	@ 0x3a
 8024b04:	a802      	add	r0, sp, #8
 8024b06:	f7eb fb7b 	bl	8010200 <memchr>
    if (p != NULL) {
 8024b0a:	4680      	mov	r8, r0
 8024b0c:	2800      	cmp	r0, #0
 8024b0e:	d0ea      	beq.n	8024ae6 <mg_http_creds+0x7e>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 8024b10:	ab02      	add	r3, sp, #8
 8024b12:	eba0 0a03 	sub.w	sl, r0, r3
 8024b16:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 8024b88 <mg_http_creds+0x120>
 8024b1a:	9300      	str	r3, [sp, #0]
 8024b1c:	4653      	mov	r3, sl
 8024b1e:	464a      	mov	r2, r9
 8024b20:	4639      	mov	r1, r7
 8024b22:	4628      	mov	r0, r5
 8024b24:	f7fe f9ee 	bl	8022f04 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 8024b28:	eba6 030a 	sub.w	r3, r6, sl
 8024b2c:	f108 0201 	add.w	r2, r8, #1
 8024b30:	9200      	str	r2, [sp, #0]
 8024b32:	3b01      	subs	r3, #1
 8024b34:	464a      	mov	r2, r9
 8024b36:	994c      	ldr	r1, [sp, #304]	@ 0x130
 8024b38:	4620      	mov	r0, r4
 8024b3a:	f7fe f9e3 	bl	8022f04 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 8024b3e:	e7d2      	b.n	8024ae6 <mg_http_creds+0x7e>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 8024b40:	3507      	adds	r5, #7
 8024b42:	9500      	str	r5, [sp, #0]
 8024b44:	f1a9 0307 	sub.w	r3, r9, #7
 8024b48:	4a0f      	ldr	r2, [pc, #60]	@ (8024b88 <mg_http_creds+0x120>)
 8024b4a:	994c      	ldr	r1, [sp, #304]	@ 0x130
 8024b4c:	4620      	mov	r0, r4
 8024b4e:	f7fe f9d9 	bl	8022f04 <mg_snprintf>
 8024b52:	e7c8      	b.n	8024ae6 <mg_http_creds+0x7e>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 8024b54:	9a02      	ldr	r2, [sp, #8]
 8024b56:	9200      	str	r2, [sp, #0]
 8024b58:	4a0b      	ldr	r2, [pc, #44]	@ (8024b88 <mg_http_creds+0x120>)
 8024b5a:	994c      	ldr	r1, [sp, #304]	@ 0x130
 8024b5c:	4620      	mov	r0, r4
 8024b5e:	f7fe f9d1 	bl	8022f04 <mg_snprintf>
 8024b62:	e7c0      	b.n	8024ae6 <mg_http_creds+0x7e>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 8024b64:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 8024b66:	4622      	mov	r2, r4
 8024b68:	4906      	ldr	r1, [pc, #24]	@ (8024b84 <mg_http_creds+0x11c>)
 8024b6a:	f106 0010 	add.w	r0, r6, #16
 8024b6e:	f7ff ff40 	bl	80249f2 <mg_http_get_var>
}
 8024b72:	e7b8      	b.n	8024ae6 <mg_http_creds+0x7e>
 8024b74:	08039970 	.word	0x08039970
 8024b78:	08039980 	.word	0x08039980
 8024b7c:	08039988 	.word	0x08039988
 8024b80:	08039990 	.word	0x08039990
 8024b84:	08036128 	.word	0x08036128
 8024b88:	080397a0 	.word	0x080397a0

08024b8c <listdir>:
                    const struct mg_http_serve_opts *opts, char *dir) {
 8024b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024b90:	b0ae      	sub	sp, #184	@ 0xb8
 8024b92:	4604      	mov	r4, r0
 8024b94:	460d      	mov	r5, r1
 8024b96:	4616      	mov	r6, r2
 8024b98:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8024b9a:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8024b9e:	f1b8 0f00 	cmp.w	r8, #0
 8024ba2:	d04f      	beq.n	8024c44 <listdir+0xb8>
  struct printdirentrydata d = {c, hm, opts, dir};
 8024ba4:	942a      	str	r4, [sp, #168]	@ 0xa8
 8024ba6:	952b      	str	r5, [sp, #172]	@ 0xac
 8024ba8:	962c      	str	r6, [sp, #176]	@ 0xb0
 8024baa:	972d      	str	r7, [sp, #180]	@ 0xb4
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 8024bac:	2300      	movs	r3, #0
 8024bae:	9300      	str	r3, [sp, #0]
 8024bb0:	2380      	movs	r3, #128	@ 0x80
 8024bb2:	aa07      	add	r2, sp, #28
 8024bb4:	68e9      	ldr	r1, [r5, #12]
 8024bb6:	68a8      	ldr	r0, [r5, #8]
 8024bb8:	f7ff febc 	bl	8024934 <mg_url_decode>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 8024bbc:	1e02      	subs	r2, r0, #0
 8024bbe:	dd44      	ble.n	8024c4a <listdir+0xbe>
 8024bc0:	a907      	add	r1, sp, #28
 8024bc2:	a805      	add	r0, sp, #20
 8024bc4:	f7ff f834 	bl	8023c30 <mg_str_n>
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 8024bc8:	68b2      	ldr	r2, [r6, #8]
  mg_printf(c,
 8024bca:	2a00      	cmp	r2, #0
 8024bcc:	d044      	beq.n	8024c58 <listdir+0xcc>
 8024bce:	4923      	ldr	r1, [pc, #140]	@ (8024c5c <listdir+0xd0>)
 8024bd0:	4620      	mov	r0, r4
 8024bd2:	f7fe fe71 	bl	80238b8 <mg_printf>
  off = c->send.len;  // Start of body
 8024bd6:	6d25      	ldr	r5, [r4, #80]	@ 0x50
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 8024bd8:	9a06      	ldr	r2, [sp, #24]
  mg_printf(c,
 8024bda:	9b05      	ldr	r3, [sp, #20]
 8024bdc:	9303      	str	r3, [sp, #12]
 8024bde:	9202      	str	r2, [sp, #8]
 8024be0:	491f      	ldr	r1, [pc, #124]	@ (8024c60 <listdir+0xd4>)
 8024be2:	9101      	str	r1, [sp, #4]
 8024be4:	491f      	ldr	r1, [pc, #124]	@ (8024c64 <listdir+0xd8>)
 8024be6:	9100      	str	r1, [sp, #0]
 8024be8:	491f      	ldr	r1, [pc, #124]	@ (8024c68 <listdir+0xdc>)
 8024bea:	4620      	mov	r0, r4
 8024bec:	f7fe fe64 	bl	80238b8 <mg_printf>
  mg_printf(c, "%s",
 8024bf0:	4a1e      	ldr	r2, [pc, #120]	@ (8024c6c <listdir+0xe0>)
 8024bf2:	491f      	ldr	r1, [pc, #124]	@ (8024c70 <listdir+0xe4>)
 8024bf4:	4620      	mov	r0, r4
 8024bf6:	f7fe fe5f 	bl	80238b8 <mg_printf>
  fs->ls(dir, printdirentry, &d);
 8024bfa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8024bfe:	aa2a      	add	r2, sp, #168	@ 0xa8
 8024c00:	491c      	ldr	r1, [pc, #112]	@ (8024c74 <listdir+0xe8>)
 8024c02:	4638      	mov	r0, r7
 8024c04:	4798      	blx	r3
  mg_printf(c,
 8024c06:	4a1c      	ldr	r2, [pc, #112]	@ (8024c78 <listdir+0xec>)
 8024c08:	491c      	ldr	r1, [pc, #112]	@ (8024c7c <listdir+0xf0>)
 8024c0a:	4620      	mov	r0, r4
 8024c0c:	f7fe fe54 	bl	80238b8 <mg_printf>
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 8024c10:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8024c12:	1b5b      	subs	r3, r3, r5
 8024c14:	4a1a      	ldr	r2, [pc, #104]	@ (8024c80 <listdir+0xf4>)
 8024c16:	210a      	movs	r1, #10
 8024c18:	a827      	add	r0, sp, #156	@ 0x9c
 8024c1a:	f7fe f973 	bl	8022f04 <mg_snprintf>
 8024c1e:	4602      	mov	r2, r0
  if (n > sizeof(tmp)) n = 0;
 8024c20:	280a      	cmp	r0, #10
 8024c22:	d900      	bls.n	8024c26 <listdir+0x9a>
 8024c24:	2200      	movs	r2, #0
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 8024c26:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8024c28:	3d0c      	subs	r5, #12
 8024c2a:	a927      	add	r1, sp, #156	@ 0x9c
 8024c2c:	4428      	add	r0, r5
 8024c2e:	f008 fd63 	bl	802d6f8 <memcpy>
  c->is_resp = 0;                          // Mark response end
 8024c32:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8024c36:	f36f 13c7 	bfc	r3, #7, #1
 8024c3a:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8024c3e:	b02e      	add	sp, #184	@ 0xb8
 8024c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8024c44:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8024c88 <listdir+0xfc>
 8024c48:	e7ac      	b.n	8024ba4 <listdir+0x18>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 8024c4a:	ab05      	add	r3, sp, #20
 8024c4c:	3508      	adds	r5, #8
 8024c4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8024c52:	e883 0003 	stmia.w	r3, {r0, r1}
 8024c56:	e7b7      	b.n	8024bc8 <listdir+0x3c>
  mg_printf(c,
 8024c58:	4a0a      	ldr	r2, [pc, #40]	@ (8024c84 <listdir+0xf8>)
 8024c5a:	e7b8      	b.n	8024bce <listdir+0x42>
 8024c5c:	08039998 	.word	0x08039998
 8024c60:	08039b78 	.word	0x08039b78
 8024c64:	08039d3c 	.word	0x08039d3c
 8024c68:	080399f0 	.word	0x080399f0
 8024c6c:	08039f04 	.word	0x08039f04
 8024c70:	0803a368 	.word	0x0803a368
 8024c74:	080263bd 	.word	0x080263bd
 8024c78:	080378b0 	.word	0x080378b0
 8024c7c:	08039f54 	.word	0x08039f54
 8024c80:	0803a618 	.word	0x0803a618
 8024c84:	08036364 	.word	0x08036364
 8024c88:	20000130 	.word	0x20000130

08024c8c <skip_chunk>:
static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 8024c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024c90:	b087      	sub	sp, #28
 8024c92:	461f      	mov	r7, r3
  int i = 0, n = 0;
 8024c94:	2300      	movs	r3, #0
 8024c96:	9303      	str	r3, [sp, #12]
  if (len < 3) return 0;
 8024c98:	2902      	cmp	r1, #2
 8024c9a:	dd42      	ble.n	8024d22 <skip_chunk+0x96>
 8024c9c:	4606      	mov	r6, r0
 8024c9e:	460d      	mov	r5, r1
 8024ca0:	4690      	mov	r8, r2
  int i = 0, n = 0;
 8024ca2:	461c      	mov	r4, r3
  while (i < len && is_hex_digit(buf[i])) i++;
 8024ca4:	42ac      	cmp	r4, r5
 8024ca6:	da05      	bge.n	8024cb4 <skip_chunk+0x28>
 8024ca8:	5d30      	ldrb	r0, [r6, r4]
 8024caa:	f7fb f998 	bl	801ffde <is_hex_digit>
 8024cae:	b108      	cbz	r0, 8024cb4 <skip_chunk+0x28>
 8024cb0:	3401      	adds	r4, #1
 8024cb2:	e7f7      	b.n	8024ca4 <skip_chunk+0x18>
  if (i == 0) return -1;                     // Error, no length specified
 8024cb4:	2c00      	cmp	r4, #0
 8024cb6:	d036      	beq.n	8024d26 <skip_chunk+0x9a>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8024cb8:	2c08      	cmp	r4, #8
 8024cba:	dc37      	bgt.n	8024d2c <skip_chunk+0xa0>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8024cbc:	42ac      	cmp	r4, r5
 8024cbe:	da38      	bge.n	8024d32 <skip_chunk+0xa6>
 8024cc0:	4622      	mov	r2, r4
 8024cc2:	5d33      	ldrb	r3, [r6, r4]
 8024cc4:	2b0d      	cmp	r3, #13
 8024cc6:	d137      	bne.n	8024d38 <skip_chunk+0xac>
 8024cc8:	1933      	adds	r3, r6, r4
 8024cca:	785b      	ldrb	r3, [r3, #1]
 8024ccc:	2b0a      	cmp	r3, #10
 8024cce:	d136      	bne.n	8024d3e <skip_chunk+0xb2>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 8024cd0:	f10d 0910 	add.w	r9, sp, #16
 8024cd4:	4631      	mov	r1, r6
 8024cd6:	4648      	mov	r0, r9
 8024cd8:	f7fe ffaa 	bl	8023c30 <mg_str_n>
 8024cdc:	2304      	movs	r3, #4
 8024cde:	9300      	str	r3, [sp, #0]
 8024ce0:	ab03      	add	r3, sp, #12
 8024ce2:	2210      	movs	r2, #16
 8024ce4:	e899 0003 	ldmia.w	r9, {r0, r1}
 8024ce8:	f7ff fcdc 	bl	80246a4 <mg_str_to_num>
 8024cec:	b350      	cbz	r0, 8024d44 <skip_chunk+0xb8>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8024cee:	9b03      	ldr	r3, [sp, #12]
 8024cf0:	2b00      	cmp	r3, #0
 8024cf2:	db2a      	blt.n	8024d4a <skip_chunk+0xbe>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8024cf4:	1b2d      	subs	r5, r5, r4
 8024cf6:	3d03      	subs	r5, #3
 8024cf8:	42ab      	cmp	r3, r5
 8024cfa:	da29      	bge.n	8024d50 <skip_chunk+0xc4>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8024cfc:	4423      	add	r3, r4
 8024cfe:	18f2      	adds	r2, r6, r3
 8024d00:	7892      	ldrb	r2, [r2, #2]
 8024d02:	2a0d      	cmp	r2, #13
 8024d04:	d126      	bne.n	8024d54 <skip_chunk+0xc8>
 8024d06:	441e      	add	r6, r3
 8024d08:	78f3      	ldrb	r3, [r6, #3]
 8024d0a:	2b0a      	cmp	r3, #10
 8024d0c:	d125      	bne.n	8024d5a <skip_chunk+0xce>
  *pl = i + 2, *dl = n;
 8024d0e:	3402      	adds	r4, #2
 8024d10:	f8c8 4000 	str.w	r4, [r8]
 8024d14:	9b03      	ldr	r3, [sp, #12]
 8024d16:	603b      	str	r3, [r7, #0]
  return i + 2 + n + 2;
 8024d18:	441c      	add	r4, r3
 8024d1a:	1ca0      	adds	r0, r4, #2
}
 8024d1c:	b007      	add	sp, #28
 8024d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (len < 3) return 0;
 8024d22:	2000      	movs	r0, #0
 8024d24:	e7fa      	b.n	8024d1c <skip_chunk+0x90>
  if (i == 0) return -1;                     // Error, no length specified
 8024d26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024d2a:	e7f7      	b.n	8024d1c <skip_chunk+0x90>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8024d2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024d30:	e7f4      	b.n	8024d1c <skip_chunk+0x90>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8024d32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024d36:	e7f1      	b.n	8024d1c <skip_chunk+0x90>
 8024d38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024d3c:	e7ee      	b.n	8024d1c <skip_chunk+0x90>
 8024d3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024d42:	e7eb      	b.n	8024d1c <skip_chunk+0x90>
    return -1;                    // Decode chunk length, overflow
 8024d44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024d48:	e7e8      	b.n	8024d1c <skip_chunk+0x90>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8024d4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024d4e:	e7e5      	b.n	8024d1c <skip_chunk+0x90>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8024d50:	2000      	movs	r0, #0
 8024d52:	e7e3      	b.n	8024d1c <skip_chunk+0x90>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8024d54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024d58:	e7e0      	b.n	8024d1c <skip_chunk+0x90>
 8024d5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024d5e:	e7dd      	b.n	8024d1c <skip_chunk+0x90>

08024d60 <mg_json_unescape>:
bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 8024d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024d64:	b086      	sub	sp, #24
 8024d66:	ac02      	add	r4, sp, #8
 8024d68:	e884 0003 	stmia.w	r4, {r0, r1}
 8024d6c:	4617      	mov	r7, r2
 8024d6e:	461e      	mov	r6, r3
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8024d70:	2400      	movs	r4, #0
 8024d72:	4621      	mov	r1, r4
 8024d74:	e01c      	b.n	8024db0 <mg_json_unescape+0x50>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 8024d76:	f101 0805 	add.w	r8, r1, #5
 8024d7a:	45a8      	cmp	r8, r5
 8024d7c:	d221      	bcs.n	8024dc2 <mg_json_unescape+0x62>
 8024d7e:	185a      	adds	r2, r3, r1
 8024d80:	7852      	ldrb	r2, [r2, #1]
 8024d82:	2a75      	cmp	r2, #117	@ 0x75
 8024d84:	d11d      	bne.n	8024dc2 <mg_json_unescape+0x62>
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 8024d86:	3102      	adds	r1, #2
 8024d88:	ad04      	add	r5, sp, #16
 8024d8a:	2204      	movs	r2, #4
 8024d8c:	4419      	add	r1, r3
 8024d8e:	4628      	mov	r0, r5
 8024d90:	f7fe ff4e 	bl	8023c30 <mg_str_n>
 8024d94:	2301      	movs	r3, #1
 8024d96:	9300      	str	r3, [sp, #0]
 8024d98:	193b      	adds	r3, r7, r4
 8024d9a:	2210      	movs	r2, #16
 8024d9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8024da0:	f7ff fc80 	bl	80246a4 <mg_str_to_num>
 8024da4:	b308      	cbz	r0, 8024dea <mg_json_unescape+0x8a>
      i += 5;
 8024da6:	4641      	mov	r1, r8
 8024da8:	e000      	b.n	8024dac <mg_json_unescape+0x4c>
      to[j] = s.buf[i];
 8024daa:	5538      	strb	r0, [r7, r4]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8024dac:	3101      	adds	r1, #1
 8024dae:	3401      	adds	r4, #1
 8024db0:	9d03      	ldr	r5, [sp, #12]
 8024db2:	428d      	cmp	r5, r1
 8024db4:	d914      	bls.n	8024de0 <mg_json_unescape+0x80>
 8024db6:	42b4      	cmp	r4, r6
 8024db8:	d212      	bcs.n	8024de0 <mg_json_unescape+0x80>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 8024dba:	9b02      	ldr	r3, [sp, #8]
 8024dbc:	5c58      	ldrb	r0, [r3, r1]
 8024dbe:	285c      	cmp	r0, #92	@ 0x5c
 8024dc0:	d0d9      	beq.n	8024d76 <mg_json_unescape+0x16>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8024dc2:	285c      	cmp	r0, #92	@ 0x5c
 8024dc4:	d1f1      	bne.n	8024daa <mg_json_unescape+0x4a>
 8024dc6:	f101 0801 	add.w	r8, r1, #1
 8024dca:	45a8      	cmp	r8, r5
 8024dcc:	d2ed      	bcs.n	8024daa <mg_json_unescape+0x4a>
      char c = json_esc(s.buf[i + 1], 0);
 8024dce:	2100      	movs	r1, #0
 8024dd0:	f813 0008 	ldrb.w	r0, [r3, r8]
 8024dd4:	f7fb f928 	bl	8020028 <json_esc>
      if (c == 0) return false;
 8024dd8:	b150      	cbz	r0, 8024df0 <mg_json_unescape+0x90>
      to[j] = c;
 8024dda:	5538      	strb	r0, [r7, r4]
      i++;
 8024ddc:	4641      	mov	r1, r8
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8024dde:	e7e5      	b.n	8024dac <mg_json_unescape+0x4c>
  if (j >= n) return false;
 8024de0:	42b4      	cmp	r4, r6
 8024de2:	d207      	bcs.n	8024df4 <mg_json_unescape+0x94>
  if (n > 0) to[j] = '\0';
 8024de4:	2300      	movs	r3, #0
 8024de6:	553b      	strb	r3, [r7, r4]
  return true;
 8024de8:	2001      	movs	r0, #1
}
 8024dea:	b006      	add	sp, #24
 8024dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (c == 0) return false;
 8024df0:	2000      	movs	r0, #0
 8024df2:	e7fa      	b.n	8024dea <mg_json_unescape+0x8a>
  if (j >= n) return false;
 8024df4:	2000      	movs	r0, #0
 8024df6:	e7f8      	b.n	8024dea <mg_json_unescape+0x8a>

08024df8 <mg_json_get_str>:
char *mg_json_get_str(struct mg_str json, const char *path) {
 8024df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024dfa:	b087      	sub	sp, #28
 8024dfc:	46ec      	mov	ip, sp
 8024dfe:	e88c 0003 	stmia.w	ip, {r0, r1}
  int len = 0, off = mg_json_get(json, path, &len);
 8024e02:	2300      	movs	r3, #0
 8024e04:	9303      	str	r3, [sp, #12]
 8024e06:	ab03      	add	r3, sp, #12
 8024e08:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8024e0c:	f7fd fbd4 	bl	80225b8 <mg_json_get>
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 8024e10:	1e04      	subs	r4, r0, #0
 8024e12:	db25      	blt.n	8024e60 <mg_json_get_str+0x68>
 8024e14:	9903      	ldr	r1, [sp, #12]
 8024e16:	2901      	cmp	r1, #1
 8024e18:	dd24      	ble.n	8024e64 <mg_json_get_str+0x6c>
 8024e1a:	9e00      	ldr	r6, [sp, #0]
 8024e1c:	5d33      	ldrb	r3, [r6, r4]
 8024e1e:	2b22      	cmp	r3, #34	@ 0x22
 8024e20:	d003      	beq.n	8024e2a <mg_json_get_str+0x32>
  char *result = NULL;
 8024e22:	2500      	movs	r5, #0
}
 8024e24:	4628      	mov	r0, r5
 8024e26:	b007      	add	sp, #28
 8024e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8024e2a:	2001      	movs	r0, #1
 8024e2c:	f7fd f9a4 	bl	8022178 <mg_calloc>
 8024e30:	4605      	mov	r5, r0
 8024e32:	2800      	cmp	r0, #0
 8024e34:	d0f6      	beq.n	8024e24 <mg_json_get_str+0x2c>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 8024e36:	1c61      	adds	r1, r4, #1
 8024e38:	9f03      	ldr	r7, [sp, #12]
 8024e3a:	ac04      	add	r4, sp, #16
 8024e3c:	1eba      	subs	r2, r7, #2
 8024e3e:	4431      	add	r1, r6
 8024e40:	4620      	mov	r0, r4
 8024e42:	f7fe fef5 	bl	8023c30 <mg_str_n>
 8024e46:	463b      	mov	r3, r7
 8024e48:	462a      	mov	r2, r5
 8024e4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024e4e:	f7ff ff87 	bl	8024d60 <mg_json_unescape>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8024e52:	2800      	cmp	r0, #0
 8024e54:	d1e6      	bne.n	8024e24 <mg_json_get_str+0x2c>
      free(result);
 8024e56:	4628      	mov	r0, r5
 8024e58:	f7f5 fb08 	bl	801a46c <vPortFree>
      result = NULL;
 8024e5c:	2500      	movs	r5, #0
 8024e5e:	e7e1      	b.n	8024e24 <mg_json_get_str+0x2c>
  char *result = NULL;
 8024e60:	2500      	movs	r5, #0
 8024e62:	e7df      	b.n	8024e24 <mg_json_get_str+0x2c>
 8024e64:	2500      	movs	r5, #0
 8024e66:	e7dd      	b.n	8024e24 <mg_json_get_str+0x2c>

08024e68 <mg_aton6>:
static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 8024e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024e6c:	b08a      	sub	sp, #40	@ 0x28
 8024e6e:	ab02      	add	r3, sp, #8
 8024e70:	e883 0003 	stmia.w	r3, {r0, r1}
 8024e74:	4617      	mov	r7, r2
  addr->scope_id = 0;
 8024e76:	2300      	movs	r3, #0
 8024e78:	7493      	strb	r3, [r2, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8024e7a:	2902      	cmp	r1, #2
 8024e7c:	d904      	bls.n	8024e88 <mg_aton6+0x20>
 8024e7e:	460b      	mov	r3, r1
 8024e80:	4602      	mov	r2, r0
 8024e82:	7801      	ldrb	r1, [r0, #0]
 8024e84:	295b      	cmp	r1, #91	@ 0x5b
 8024e86:	d00f      	beq.n	8024ea8 <mg_aton6+0x40>
  if (mg_v4mapped(str, addr)) return true;
 8024e88:	463a      	mov	r2, r7
 8024e8a:	ab02      	add	r3, sp, #8
 8024e8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024e90:	f7fe ff40 	bl	8023d14 <mg_v4mapped>
 8024e94:	4680      	mov	r8, r0
 8024e96:	2800      	cmp	r0, #0
 8024e98:	f040 8087 	bne.w	8024faa <mg_aton6+0x142>
  size_t i, j = 0, n = 0, dc = 42;
 8024e9c:	f04f 092a 	mov.w	r9, #42	@ 0x2a
 8024ea0:	2600      	movs	r6, #0
 8024ea2:	4635      	mov	r5, r6
  for (i = 0; i < str.len; i++) {
 8024ea4:	4634      	mov	r4, r6
 8024ea6:	e020      	b.n	8024eea <mg_aton6+0x82>
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8024ea8:	3201      	adds	r2, #1
 8024eaa:	9202      	str	r2, [sp, #8]
 8024eac:	3b02      	subs	r3, #2
 8024eae:	9303      	str	r3, [sp, #12]
 8024eb0:	e7ea      	b.n	8024e88 <mg_aton6+0x20>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 8024eb2:	2300      	movs	r3, #0
 8024eb4:	9305      	str	r3, [sp, #20]
      if (i > j + 3) return false;
 8024eb6:	1ceb      	adds	r3, r5, #3
 8024eb8:	42a3      	cmp	r3, r4
 8024eba:	d376      	bcc.n	8024faa <mg_aton6+0x142>
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 8024ebc:	1b62      	subs	r2, r4, r5
 8024ebe:	f10d 0a18 	add.w	sl, sp, #24
 8024ec2:	3201      	adds	r2, #1
 8024ec4:	4429      	add	r1, r5
 8024ec6:	4650      	mov	r0, sl
 8024ec8:	f7fe feb2 	bl	8023c30 <mg_str_n>
 8024ecc:	2304      	movs	r3, #4
 8024ece:	9300      	str	r3, [sp, #0]
 8024ed0:	ab05      	add	r3, sp, #20
 8024ed2:	2210      	movs	r2, #16
 8024ed4:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8024ed8:	f7ff fbe4 	bl	80246a4 <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 8024edc:	9b05      	ldr	r3, [sp, #20]
 8024ede:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8024ee2:	55ba      	strb	r2, [r7, r6]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 8024ee4:	1c72      	adds	r2, r6, #1
 8024ee6:	54bb      	strb	r3, [r7, r2]
  for (i = 0; i < str.len; i++) {
 8024ee8:	3401      	adds	r4, #1
 8024eea:	9803      	ldr	r0, [sp, #12]
 8024eec:	42a0      	cmp	r0, r4
 8024eee:	d941      	bls.n	8024f74 <mg_aton6+0x10c>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8024ef0:	9902      	ldr	r1, [sp, #8]
 8024ef2:	5d0a      	ldrb	r2, [r1, r4]
 8024ef4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8024ef8:	b2db      	uxtb	r3, r3
 8024efa:	2b09      	cmp	r3, #9
 8024efc:	d9d9      	bls.n	8024eb2 <mg_aton6+0x4a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8024efe:	f1a2 0361 	sub.w	r3, r2, #97	@ 0x61
 8024f02:	b2db      	uxtb	r3, r3
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8024f04:	2b05      	cmp	r3, #5
 8024f06:	d9d4      	bls.n	8024eb2 <mg_aton6+0x4a>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 8024f08:	f1a2 0341 	sub.w	r3, r2, #65	@ 0x41
 8024f0c:	b2db      	uxtb	r3, r3
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8024f0e:	2b05      	cmp	r3, #5
 8024f10:	d9cf      	bls.n	8024eb2 <mg_aton6+0x4a>
    } else if (str.buf[i] == ':') {
 8024f12:	2a3a      	cmp	r2, #58	@ 0x3a
 8024f14:	d119      	bne.n	8024f4a <mg_aton6+0xe2>
      j = i + 1;
 8024f16:	1c65      	adds	r5, r4, #1
      if (i > 0 && str.buf[i - 1] == ':') {
 8024f18:	b12c      	cbz	r4, 8024f26 <mg_aton6+0xbe>
 8024f1a:	190b      	adds	r3, r1, r4
 8024f1c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8024f20:	2b3a      	cmp	r3, #58	@ 0x3a
 8024f22:	d007      	beq.n	8024f34 <mg_aton6+0xcc>
        n += 2;
 8024f24:	3602      	adds	r6, #2
      if (n > 14) return false;
 8024f26:	2e0e      	cmp	r6, #14
 8024f28:	d83f      	bhi.n	8024faa <mg_aton6+0x142>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 8024f2a:	1c73      	adds	r3, r6, #1
 8024f2c:	2200      	movs	r2, #0
 8024f2e:	54fa      	strb	r2, [r7, r3]
 8024f30:	55ba      	strb	r2, [r7, r6]
 8024f32:	e7d9      	b.n	8024ee8 <mg_aton6+0x80>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 8024f34:	2c01      	cmp	r4, #1
 8024f36:	d906      	bls.n	8024f46 <mg_aton6+0xde>
 8024f38:	4421      	add	r1, r4
 8024f3a:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8024f3e:	2b3a      	cmp	r3, #58	@ 0x3a
 8024f40:	d033      	beq.n	8024faa <mg_aton6+0x142>
        dc = n;  // Double colon
 8024f42:	46b1      	mov	r9, r6
 8024f44:	e7ef      	b.n	8024f26 <mg_aton6+0xbe>
 8024f46:	46b1      	mov	r9, r6
 8024f48:	e7ed      	b.n	8024f26 <mg_aton6+0xbe>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 8024f4a:	2a25      	cmp	r2, #37	@ 0x25
 8024f4c:	d12d      	bne.n	8024faa <mg_aton6+0x142>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 8024f4e:	1c63      	adds	r3, r4, #1
 8024f50:	1b02      	subs	r2, r0, r4
 8024f52:	ac08      	add	r4, sp, #32
 8024f54:	3a01      	subs	r2, #1
 8024f56:	4419      	add	r1, r3
 8024f58:	4620      	mov	r0, r4
 8024f5a:	f7fe fe69 	bl	8023c30 <mg_str_n>
 8024f5e:	2301      	movs	r3, #1
 8024f60:	9300      	str	r3, [sp, #0]
 8024f62:	f107 0312 	add.w	r3, r7, #18
 8024f66:	220a      	movs	r2, #10
 8024f68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024f6c:	f7ff fb9a 	bl	80246a4 <mg_str_to_num>
 8024f70:	4680      	mov	r8, r0
 8024f72:	e01a      	b.n	8024faa <mg_aton6+0x142>
  if (n < 14 && dc == 42) return false;
 8024f74:	2e0d      	cmp	r6, #13
 8024f76:	d814      	bhi.n	8024fa2 <mg_aton6+0x13a>
 8024f78:	f1b9 0f2a 	cmp.w	r9, #42	@ 0x2a
 8024f7c:	d015      	beq.n	8024faa <mg_aton6+0x142>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 8024f7e:	eba9 0006 	sub.w	r0, r9, r6
 8024f82:	300e      	adds	r0, #14
 8024f84:	eb07 0409 	add.w	r4, r7, r9
 8024f88:	eba6 0209 	sub.w	r2, r6, r9
 8024f8c:	3202      	adds	r2, #2
 8024f8e:	4621      	mov	r1, r4
 8024f90:	4438      	add	r0, r7
 8024f92:	f007 f95b 	bl	802c24c <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 8024f96:	f1c6 020e 	rsb	r2, r6, #14
 8024f9a:	2100      	movs	r1, #0
 8024f9c:	4620      	mov	r0, r4
 8024f9e:	f007 f96f 	bl	802c280 <memset>
  addr->is_ip6 = true;
 8024fa2:	f04f 0801 	mov.w	r8, #1
 8024fa6:	f887 8013 	strb.w	r8, [r7, #19]
}
 8024faa:	4640      	mov	r0, r8
 8024fac:	b00a      	add	sp, #40	@ 0x28
 8024fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08024fb2 <mg_timer_init>:
                   unsigned flags, void (*fn)(void *), void *arg) {
 8024fb2:	b410      	push	{r4}
  t->id = 0, t->period_ms = ms, t->expire = 0;
 8024fb4:	2400      	movs	r4, #0
 8024fb6:	600c      	str	r4, [r1, #0]
 8024fb8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8024fbc:	2200      	movs	r2, #0
 8024fbe:	2300      	movs	r3, #0
 8024fc0:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 8024fc4:	9b01      	ldr	r3, [sp, #4]
 8024fc6:	618b      	str	r3, [r1, #24]
 8024fc8:	9b02      	ldr	r3, [sp, #8]
 8024fca:	61cb      	str	r3, [r1, #28]
 8024fcc:	9b03      	ldr	r3, [sp, #12]
 8024fce:	620b      	str	r3, [r1, #32]
 8024fd0:	6803      	ldr	r3, [r0, #0]
 8024fd2:	624b      	str	r3, [r1, #36]	@ 0x24
  *head = t;
 8024fd4:	6001      	str	r1, [r0, #0]
}
 8024fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024fda:	4770      	bx	lr

08024fdc <mg_timer_add>:
                              unsigned flags, void (*fn)(void *), void *arg) {
 8024fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024fde:	b085      	sub	sp, #20
 8024fe0:	4604      	mov	r4, r0
 8024fe2:	4616      	mov	r6, r2
 8024fe4:	461d      	mov	r5, r3
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 8024fe6:	2128      	movs	r1, #40	@ 0x28
 8024fe8:	2001      	movs	r0, #1
 8024fea:	f7fd f8c5 	bl	8022178 <mg_calloc>
  if (t != NULL) {
 8024fee:	4607      	mov	r7, r0
 8024ff0:	b180      	cbz	r0, 8025014 <mg_timer_add+0x38>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 8024ff2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024ff4:	9302      	str	r3, [sp, #8]
 8024ff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024ff8:	9301      	str	r3, [sp, #4]
 8024ffa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024ffc:	9300      	str	r3, [sp, #0]
 8024ffe:	4632      	mov	r2, r6
 8025000:	462b      	mov	r3, r5
 8025002:	4601      	mov	r1, r0
 8025004:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8025008:	f7ff ffd3 	bl	8024fb2 <mg_timer_init>
    t->id = mgr->timerid++;
 802500c:	6a23      	ldr	r3, [r4, #32]
 802500e:	1c5a      	adds	r2, r3, #1
 8025010:	6222      	str	r2, [r4, #32]
 8025012:	603b      	str	r3, [r7, #0]
}
 8025014:	4638      	mov	r0, r7
 8025016:	b005      	add	sp, #20
 8025018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802501a:	0000      	movs	r0, r0
 802501c:	0000      	movs	r0, r0
	...

08025020 <mg_timer_expired>:
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8025020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025024:	4698      	mov	r8, r3
 8025026:	9906      	ldr	r1, [sp, #24]
 8025028:	9c07      	ldr	r4, [sp, #28]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 802502a:	188e      	adds	r6, r1, r2
 802502c:	eb43 0504 	adc.w	r5, r3, r4
 8025030:	6847      	ldr	r7, [r0, #4]
 8025032:	6803      	ldr	r3, [r0, #0]
 8025034:	429e      	cmp	r6, r3
 8025036:	eb75 0707 	sbcs.w	r7, r5, r7
 802503a:	d203      	bcs.n	8025044 <mg_timer_expired+0x24>
 802503c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8025080 <mg_timer_expired+0x60>
 8025040:	ed80 7b00 	vstr	d7, [r0]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8025044:	6847      	ldr	r7, [r0, #4]
 8025046:	6803      	ldr	r3, [r0, #0]
 8025048:	431f      	orrs	r7, r3
 802504a:	d101      	bne.n	8025050 <mg_timer_expired+0x30>
 802504c:	6006      	str	r6, [r0, #0]
 802504e:	6045      	str	r5, [r0, #4]
  if (*t > now) return false;                    // Not expired yet, return
 8025050:	6807      	ldr	r7, [r0, #0]
 8025052:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8025056:	42b9      	cmp	r1, r7
 8025058:	eb74 0e0c 	sbcs.w	lr, r4, ip
 802505c:	d30e      	bcc.n	802507c <mg_timer_expired+0x5c>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 802505e:	1bc9      	subs	r1, r1, r7
 8025060:	eb64 040c 	sbc.w	r4, r4, ip
 8025064:	428a      	cmp	r2, r1
 8025066:	eb78 0404 	sbcs.w	r4, r8, r4
 802506a:	d302      	bcc.n	8025072 <mg_timer_expired+0x52>
 802506c:	18be      	adds	r6, r7, r2
 802506e:	eb4c 0508 	adc.w	r5, ip, r8
 8025072:	6006      	str	r6, [r0, #0]
 8025074:	6045      	str	r5, [r0, #4]
  return true;                                   // Expired, return true
 8025076:	2001      	movs	r0, #1
}
 8025078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (*t > now) return false;                    // Not expired yet, return
 802507c:	2000      	movs	r0, #0
 802507e:	e7fb      	b.n	8025078 <mg_timer_expired+0x58>
	...

08025088 <mg_timer_poll>:
void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8025088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802508c:	b082      	sub	sp, #8
 802508e:	4617      	mov	r7, r2
 8025090:	461e      	mov	r6, r3
  for (t = *head; t != NULL; t = tmp) {
 8025092:	6804      	ldr	r4, [r0, #0]
 8025094:	e019      	b.n	80250ca <mg_timer_poll+0x42>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8025096:	2500      	movs	r5, #0
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8025098:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 802509c:	9700      	str	r7, [sp, #0]
 802509e:	9601      	str	r6, [sp, #4]
 80250a0:	f104 0010 	add.w	r0, r4, #16
 80250a4:	f7ff ffbc 	bl	8025020 <mg_timer_expired>
    tmp = t->next;
 80250a8:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
    if (!once && !expired) continue;
 80250ac:	b905      	cbnz	r5, 80250b0 <mg_timer_poll+0x28>
 80250ae:	b158      	cbz	r0, 80250c8 <mg_timer_poll+0x40>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 80250b0:	69a3      	ldr	r3, [r4, #24]
 80250b2:	f003 0305 	and.w	r3, r3, #5
 80250b6:	2b04      	cmp	r3, #4
 80250b8:	d002      	beq.n	80250c0 <mg_timer_poll+0x38>
      t->fn(t->arg);
 80250ba:	69e3      	ldr	r3, [r4, #28]
 80250bc:	6a20      	ldr	r0, [r4, #32]
 80250be:	4798      	blx	r3
    t->flags |= MG_TIMER_CALLED;
 80250c0:	69a1      	ldr	r1, [r4, #24]
 80250c2:	f041 0104 	orr.w	r1, r1, #4
 80250c6:	61a1      	str	r1, [r4, #24]
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80250c8:	4644      	mov	r4, r8
  for (t = *head; t != NULL; t = tmp) {
 80250ca:	b164      	cbz	r4, 80250e6 <mg_timer_poll+0x5e>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80250cc:	6923      	ldr	r3, [r4, #16]
 80250ce:	6962      	ldr	r2, [r4, #20]
 80250d0:	4313      	orrs	r3, r2
 80250d2:	d1e0      	bne.n	8025096 <mg_timer_poll+0xe>
 80250d4:	69a3      	ldr	r3, [r4, #24]
 80250d6:	f003 0306 	and.w	r3, r3, #6
 80250da:	2b02      	cmp	r3, #2
 80250dc:	d001      	beq.n	80250e2 <mg_timer_poll+0x5a>
 80250de:	2500      	movs	r5, #0
 80250e0:	e7da      	b.n	8025098 <mg_timer_poll+0x10>
 80250e2:	2501      	movs	r5, #1
 80250e4:	e7d8      	b.n	8025098 <mg_timer_poll+0x10>
}
 80250e6:	b002      	add	sp, #8
 80250e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080250ec <mg_tls_recv>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 80250ec:	b118      	cbz	r0, 80250f6 <mg_tls_recv+0xa>
 80250ee:	b121      	cbz	r1, 80250fa <mg_tls_recv+0xe>
 80250f0:	b92a      	cbnz	r2, 80250fe <mg_tls_recv+0x12>
 80250f2:	2000      	movs	r0, #0
 80250f4:	4770      	bx	lr
 80250f6:	2000      	movs	r0, #0
 80250f8:	4770      	bx	lr
 80250fa:	2000      	movs	r0, #0
 80250fc:	4770      	bx	lr
 80250fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8025102:	4770      	bx	lr

08025104 <mg_tls_send>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8025104:	b118      	cbz	r0, 802510e <mg_tls_send+0xa>
 8025106:	b121      	cbz	r1, 8025112 <mg_tls_send+0xe>
 8025108:	b92a      	cbnz	r2, 8025116 <mg_tls_send+0x12>
 802510a:	2000      	movs	r0, #0
 802510c:	4770      	bx	lr
 802510e:	2000      	movs	r0, #0
 8025110:	4770      	bx	lr
 8025112:	2000      	movs	r0, #0
 8025114:	4770      	bx	lr
 8025116:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 802511a:	4770      	bx	lr

0802511c <mg_tls_pending>:
}
 802511c:	2000      	movs	r0, #0
 802511e:	4770      	bx	lr

08025120 <mg_url_is_ssl>:
int mg_url_is_ssl(const char *url) {
 8025120:	b510      	push	{r4, lr}
 8025122:	4604      	mov	r4, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8025124:	2204      	movs	r2, #4
 8025126:	4918      	ldr	r1, [pc, #96]	@ (8025188 <mg_url_is_ssl+0x68>)
 8025128:	f007 f8df 	bl	802c2ea <strncmp>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 802512c:	b1f8      	cbz	r0, 802516e <mg_url_is_ssl+0x4e>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 802512e:	2206      	movs	r2, #6
 8025130:	4916      	ldr	r1, [pc, #88]	@ (802518c <mg_url_is_ssl+0x6c>)
 8025132:	4620      	mov	r0, r4
 8025134:	f007 f8d9 	bl	802c2ea <strncmp>
 8025138:	b1d8      	cbz	r0, 8025172 <mg_url_is_ssl+0x52>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 802513a:	2206      	movs	r2, #6
 802513c:	4914      	ldr	r1, [pc, #80]	@ (8025190 <mg_url_is_ssl+0x70>)
 802513e:	4620      	mov	r0, r4
 8025140:	f007 f8d3 	bl	802c2ea <strncmp>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8025144:	b1b8      	cbz	r0, 8025176 <mg_url_is_ssl+0x56>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8025146:	2204      	movs	r2, #4
 8025148:	4912      	ldr	r1, [pc, #72]	@ (8025194 <mg_url_is_ssl+0x74>)
 802514a:	4620      	mov	r0, r4
 802514c:	f007 f8cd 	bl	802c2ea <strncmp>
 8025150:	b198      	cbz	r0, 802517a <mg_url_is_ssl+0x5a>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8025152:	2204      	movs	r2, #4
 8025154:	4910      	ldr	r1, [pc, #64]	@ (8025198 <mg_url_is_ssl+0x78>)
 8025156:	4620      	mov	r0, r4
 8025158:	f007 f8c7 	bl	802c2ea <strncmp>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 802515c:	b178      	cbz	r0, 802517e <mg_url_is_ssl+0x5e>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 802515e:	2205      	movs	r2, #5
 8025160:	490e      	ldr	r1, [pc, #56]	@ (802519c <mg_url_is_ssl+0x7c>)
 8025162:	4620      	mov	r0, r4
 8025164:	f007 f8c1 	bl	802c2ea <strncmp>
 8025168:	b958      	cbnz	r0, 8025182 <mg_url_is_ssl+0x62>
 802516a:	2001      	movs	r0, #1
 802516c:	e000      	b.n	8025170 <mg_url_is_ssl+0x50>
 802516e:	2001      	movs	r0, #1
}
 8025170:	bd10      	pop	{r4, pc}
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8025172:	2001      	movs	r0, #1
 8025174:	e7fc      	b.n	8025170 <mg_url_is_ssl+0x50>
 8025176:	2001      	movs	r0, #1
 8025178:	e7fa      	b.n	8025170 <mg_url_is_ssl+0x50>
 802517a:	2001      	movs	r0, #1
 802517c:	e7f8      	b.n	8025170 <mg_url_is_ssl+0x50>
 802517e:	2001      	movs	r0, #1
 8025180:	e7f6      	b.n	8025170 <mg_url_is_ssl+0x50>
 8025182:	2000      	movs	r0, #0
 8025184:	e7f4      	b.n	8025170 <mg_url_is_ssl+0x50>
 8025186:	bf00      	nop
 8025188:	08039fc8 	.word	0x08039fc8
 802518c:	08039fd0 	.word	0x08039fd0
 8025190:	08039fd8 	.word	0x08039fd8
 8025194:	08039fe0 	.word	0x08039fe0
 8025198:	08039fe8 	.word	0x08039fe8
 802519c:	08039ff0 	.word	0x08039ff0

080251a0 <mg_url_host>:
struct mg_str mg_url_host(const char *url) {
 80251a0:	b530      	push	{r4, r5, lr}
 80251a2:	b089      	sub	sp, #36	@ 0x24
 80251a4:	4604      	mov	r4, r0
 80251a6:	460d      	mov	r5, r1
  struct url u = urlparse(url);
 80251a8:	a801      	add	r0, sp, #4
 80251aa:	f7fb ff52 	bl	8021052 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 80251ae:	9a05      	ldr	r2, [sp, #20]
             : u.uri ? u.uri - u.host
 80251b0:	b152      	cbz	r2, 80251c8 <mg_url_host+0x28>
  size_t n = u.port  ? u.port - u.host - 1
 80251b2:	9b04      	ldr	r3, [sp, #16]
 80251b4:	1ad2      	subs	r2, r2, r3
             : u.uri ? u.uri - u.host
 80251b6:	3a01      	subs	r2, #1
  struct mg_str s = mg_str_n(url + u.host, n);
 80251b8:	9904      	ldr	r1, [sp, #16]
 80251ba:	4429      	add	r1, r5
 80251bc:	4620      	mov	r0, r4
 80251be:	f7fe fd37 	bl	8023c30 <mg_str_n>
}
 80251c2:	4620      	mov	r0, r4
 80251c4:	b009      	add	sp, #36	@ 0x24
 80251c6:	bd30      	pop	{r4, r5, pc}
             : u.uri ? u.uri - u.host
 80251c8:	9a06      	ldr	r2, [sp, #24]
                     : u.end - u.host;
 80251ca:	b112      	cbz	r2, 80251d2 <mg_url_host+0x32>
             : u.uri ? u.uri - u.host
 80251cc:	9b04      	ldr	r3, [sp, #16]
                     : u.end - u.host;
 80251ce:	1ad2      	subs	r2, r2, r3
 80251d0:	e7f2      	b.n	80251b8 <mg_url_host+0x18>
 80251d2:	9a07      	ldr	r2, [sp, #28]
 80251d4:	9b04      	ldr	r3, [sp, #16]
 80251d6:	1ad2      	subs	r2, r2, r3
 80251d8:	e7ee      	b.n	80251b8 <mg_url_host+0x18>
	...

080251dc <mg_url_port>:
unsigned short mg_url_port(const char *url) {
 80251dc:	b530      	push	{r4, r5, lr}
 80251de:	b089      	sub	sp, #36	@ 0x24
 80251e0:	4604      	mov	r4, r0
  struct url u = urlparse(url);
 80251e2:	4601      	mov	r1, r0
 80251e4:	a801      	add	r0, sp, #4
 80251e6:	f7fb ff34 	bl	8021052 <urlparse>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 80251ea:	2205      	movs	r2, #5
 80251ec:	491d      	ldr	r1, [pc, #116]	@ (8025264 <mg_url_port+0x88>)
 80251ee:	4620      	mov	r0, r4
 80251f0:	f007 f87b 	bl	802c2ea <strncmp>
 80251f4:	b138      	cbz	r0, 8025206 <mg_url_port+0x2a>
 80251f6:	2203      	movs	r2, #3
 80251f8:	491b      	ldr	r1, [pc, #108]	@ (8025268 <mg_url_port+0x8c>)
 80251fa:	4620      	mov	r0, r4
 80251fc:	f007 f875 	bl	802c2ea <strncmp>
 8025200:	b188      	cbz	r0, 8025226 <mg_url_port+0x4a>
  unsigned short port = 0;
 8025202:	2500      	movs	r5, #0
 8025204:	e000      	b.n	8025208 <mg_url_port+0x2c>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8025206:	2550      	movs	r5, #80	@ 0x50
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8025208:	2204      	movs	r2, #4
 802520a:	4918      	ldr	r1, [pc, #96]	@ (802526c <mg_url_port+0x90>)
 802520c:	4620      	mov	r0, r4
 802520e:	f007 f86c 	bl	802c2ea <strncmp>
 8025212:	b150      	cbz	r0, 802522a <mg_url_port+0x4e>
 8025214:	2206      	movs	r2, #6
 8025216:	4916      	ldr	r1, [pc, #88]	@ (8025270 <mg_url_port+0x94>)
 8025218:	4620      	mov	r0, r4
 802521a:	f007 f866 	bl	802c2ea <strncmp>
 802521e:	b930      	cbnz	r0, 802522e <mg_url_port+0x52>
    port = 443;
 8025220:	f240 15bb 	movw	r5, #443	@ 0x1bb
 8025224:	e003      	b.n	802522e <mg_url_port+0x52>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8025226:	2550      	movs	r5, #80	@ 0x50
 8025228:	e7ee      	b.n	8025208 <mg_url_port+0x2c>
    port = 443;
 802522a:	f240 15bb 	movw	r5, #443	@ 0x1bb
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 802522e:	2205      	movs	r2, #5
 8025230:	4910      	ldr	r1, [pc, #64]	@ (8025274 <mg_url_port+0x98>)
 8025232:	4620      	mov	r0, r4
 8025234:	f007 f859 	bl	802c2ea <strncmp>
 8025238:	b908      	cbnz	r0, 802523e <mg_url_port+0x62>
 802523a:	f240 755b 	movw	r5, #1883	@ 0x75b
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 802523e:	2206      	movs	r2, #6
 8025240:	490d      	ldr	r1, [pc, #52]	@ (8025278 <mg_url_port+0x9c>)
 8025242:	4620      	mov	r0, r4
 8025244:	f007 f851 	bl	802c2ea <strncmp>
 8025248:	b908      	cbnz	r0, 802524e <mg_url_port+0x72>
 802524a:	f242 25b3 	movw	r5, #8883	@ 0x22b3
  if (u.port) port = (unsigned short) atoi(url + u.port);
 802524e:	9805      	ldr	r0, [sp, #20]
 8025250:	b910      	cbnz	r0, 8025258 <mg_url_port+0x7c>
}
 8025252:	4628      	mov	r0, r5
 8025254:	b009      	add	sp, #36	@ 0x24
 8025256:	bd30      	pop	{r4, r5, pc}
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8025258:	4420      	add	r0, r4
 802525a:	f004 fadd 	bl	8029818 <atoi>
 802525e:	b285      	uxth	r5, r0
 8025260:	e7f7      	b.n	8025252 <mg_url_port+0x76>
 8025262:	bf00      	nop
 8025264:	08039ff8 	.word	0x08039ff8
 8025268:	0803a000 	.word	0x0803a000
 802526c:	08039fc8 	.word	0x08039fc8
 8025270:	08039fd0 	.word	0x08039fd0
 8025274:	0803a004 	.word	0x0803a004
 8025278:	08039fd8 	.word	0x08039fd8

0802527c <mg_bzero>:
  if (buf != NULL) {
 802527c:	4603      	mov	r3, r0
 802527e:	b920      	cbnz	r0, 802528a <mg_bzero+0xe>
 8025280:	4770      	bx	lr
    while (len--) *buf++ = 0;
 8025282:	2100      	movs	r1, #0
 8025284:	f803 1b01 	strb.w	r1, [r3], #1
 8025288:	4611      	mov	r1, r2
 802528a:	1e4a      	subs	r2, r1, #1
 802528c:	2900      	cmp	r1, #0
 802528e:	d1f8      	bne.n	8025282 <mg_bzero+0x6>
}
 8025290:	4770      	bx	lr

08025292 <mg_iobuf_del>:
size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 8025292:	b538      	push	{r3, r4, r5, lr}
 8025294:	4605      	mov	r5, r0
 8025296:	4608      	mov	r0, r1
 8025298:	4614      	mov	r4, r2
  if (ofs > io->len) ofs = io->len;
 802529a:	68aa      	ldr	r2, [r5, #8]
 802529c:	428a      	cmp	r2, r1
 802529e:	d200      	bcs.n	80252a2 <mg_iobuf_del+0x10>
 80252a0:	4610      	mov	r0, r2
  if (ofs + len > io->len) len = io->len - ofs;
 80252a2:	1903      	adds	r3, r0, r4
 80252a4:	429a      	cmp	r2, r3
 80252a6:	d200      	bcs.n	80252aa <mg_iobuf_del+0x18>
 80252a8:	1a14      	subs	r4, r2, r0
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 80252aa:	682b      	ldr	r3, [r5, #0]
 80252ac:	b133      	cbz	r3, 80252bc <mg_iobuf_del+0x2a>
 80252ae:	1901      	adds	r1, r0, r4
 80252b0:	1a12      	subs	r2, r2, r0
 80252b2:	1b12      	subs	r2, r2, r4
 80252b4:	4419      	add	r1, r3
 80252b6:	4418      	add	r0, r3
 80252b8:	f006 ffc8 	bl	802c24c <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 80252bc:	682b      	ldr	r3, [r5, #0]
 80252be:	b12b      	cbz	r3, 80252cc <mg_iobuf_del+0x3a>
 80252c0:	68a8      	ldr	r0, [r5, #8]
 80252c2:	1b00      	subs	r0, r0, r4
 80252c4:	4621      	mov	r1, r4
 80252c6:	4418      	add	r0, r3
 80252c8:	f7ff ffd8 	bl	802527c <mg_bzero>
  io->len -= len;
 80252cc:	68ab      	ldr	r3, [r5, #8]
 80252ce:	1b1b      	subs	r3, r3, r4
 80252d0:	60ab      	str	r3, [r5, #8]
}
 80252d2:	4620      	mov	r0, r4
 80252d4:	bd38      	pop	{r3, r4, r5, pc}

080252d6 <mg_random>:
void mg_random(void *buf, size_t len) {
 80252d6:	b538      	push	{r3, r4, r5, lr}
 80252d8:	4604      	mov	r4, r0
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 80252da:	e006      	b.n	80252ea <mg_random+0x14>
 80252dc:	f006 fa8a 	bl	802b7f4 <rand>
 80252e0:	4623      	mov	r3, r4
 80252e2:	f803 0b01 	strb.w	r0, [r3], #1
 80252e6:	461c      	mov	r4, r3
 80252e8:	4629      	mov	r1, r5
 80252ea:	1e4d      	subs	r5, r1, #1
 80252ec:	2900      	cmp	r1, #0
 80252ee:	d1f5      	bne.n	80252dc <mg_random+0x6>
}
 80252f0:	bd38      	pop	{r3, r4, r5, pc}
	...

080252f4 <mg_random_str>:
char *mg_random_str(char *buf, size_t len) {
 80252f4:	b570      	push	{r4, r5, r6, lr}
 80252f6:	4604      	mov	r4, r0
 80252f8:	460d      	mov	r5, r1
  mg_random(buf, len);
 80252fa:	f7ff ffec 	bl	80252d6 <mg_random>
  for (i = 0; i < len; i++) {
 80252fe:	2100      	movs	r1, #0
 8025300:	e00a      	b.n	8025318 <mg_random_str+0x24>
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8025302:	2b33      	cmp	r3, #51	@ 0x33
 8025304:	d802      	bhi.n	802530c <mg_random_str+0x18>
 8025306:	3327      	adds	r3, #39	@ 0x27
 8025308:	b2db      	uxtb	r3, r3
 802530a:	e003      	b.n	8025314 <mg_random_str+0x20>
 802530c:	3b04      	subs	r3, #4
 802530e:	b2db      	uxtb	r3, r3
 8025310:	e000      	b.n	8025314 <mg_random_str+0x20>
 8025312:	2300      	movs	r3, #0
 8025314:	7003      	strb	r3, [r0, #0]
  for (i = 0; i < len; i++) {
 8025316:	3101      	adds	r1, #1
 8025318:	42a9      	cmp	r1, r5
 802531a:	d213      	bcs.n	8025344 <mg_random_str+0x50>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 802531c:	1860      	adds	r0, r4, r1
 802531e:	5c63      	ldrb	r3, [r4, r1]
 8025320:	085a      	lsrs	r2, r3, #1
 8025322:	4e09      	ldr	r6, [pc, #36]	@ (8025348 <mg_random_str+0x54>)
 8025324:	fba6 6202 	umull	r6, r2, r6, r2
 8025328:	0912      	lsrs	r2, r2, #4
 802532a:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 802532e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8025332:	b2db      	uxtb	r3, r3
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8025334:	1e6a      	subs	r2, r5, #1
 8025336:	428a      	cmp	r2, r1
 8025338:	d0eb      	beq.n	8025312 <mg_random_str+0x1e>
 802533a:	2b19      	cmp	r3, #25
 802533c:	d8e1      	bhi.n	8025302 <mg_random_str+0xe>
 802533e:	3361      	adds	r3, #97	@ 0x61
 8025340:	b2db      	uxtb	r3, r3
 8025342:	e7e7      	b.n	8025314 <mg_random_str+0x20>
}
 8025344:	4620      	mov	r0, r4
 8025346:	bd70      	pop	{r4, r5, r6, pc}
 8025348:	84210843 	.word	0x84210843

0802534c <mg_ntohl>:
uint32_t mg_ntohl(uint32_t net) {
 802534c:	b082      	sub	sp, #8
  uint8_t data[4] = {0, 0, 0, 0};
 802534e:	2300      	movs	r3, #0
 8025350:	9301      	str	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 8025352:	9001      	str	r0, [sp, #4]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8025354:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8025358:	021b      	lsls	r3, r3, #8
 802535a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 802535e:	f3c0 2207 	ubfx	r2, r0, #8, #8
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8025362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
}
 8025366:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 802536a:	b002      	add	sp, #8
 802536c:	4770      	bx	lr
	...

08025370 <mg_atonl>:
static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 8025370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025372:	b085      	sub	sp, #20
 8025374:	466c      	mov	r4, sp
 8025376:	e884 0003 	stmia.w	r4, {r0, r1}
 802537a:	4615      	mov	r5, r2
  uint32_t localhost = mg_htonl(0x7f000001);
 802537c:	480b      	ldr	r0, [pc, #44]	@ (80253ac <mg_atonl+0x3c>)
 802537e:	f7ff ffe5 	bl	802534c <mg_ntohl>
 8025382:	4607      	mov	r7, r0
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8025384:	ae02      	add	r6, sp, #8
 8025386:	490a      	ldr	r1, [pc, #40]	@ (80253b0 <mg_atonl+0x40>)
 8025388:	4630      	mov	r0, r6
 802538a:	f7fe fc45 	bl	8023c18 <mg_str_s>
 802538e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8025392:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025396:	f7fe fd3a 	bl	8023e0e <mg_strcasecmp>
 802539a:	b928      	cbnz	r0, 80253a8 <mg_atonl+0x38>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 802539c:	602f      	str	r7, [r5, #0]
  addr->is_ip6 = false;
 802539e:	2300      	movs	r3, #0
 80253a0:	74eb      	strb	r3, [r5, #19]
  return true;
 80253a2:	2001      	movs	r0, #1
}
 80253a4:	b005      	add	sp, #20
 80253a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 80253a8:	2000      	movs	r0, #0
 80253aa:	e7fb      	b.n	80253a4 <mg_atonl+0x34>
 80253ac:	7f000001 	.word	0x7f000001
 80253b0:	0803a00c 	.word	0x0803a00c

080253b4 <mg_aton>:
bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 80253b4:	b510      	push	{r4, lr}
 80253b6:	b082      	sub	sp, #8
 80253b8:	466b      	mov	r3, sp
 80253ba:	e883 0003 	stmia.w	r3, {r0, r1}
 80253be:	4614      	mov	r4, r2
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 80253c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80253c4:	f7fb fe36 	bl	8021034 <mg_atone>
 80253c8:	b110      	cbz	r0, 80253d0 <mg_aton+0x1c>
 80253ca:	2001      	movs	r0, #1
}
 80253cc:	b002      	add	sp, #8
 80253ce:	bd10      	pop	{r4, pc}
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 80253d0:	4622      	mov	r2, r4
 80253d2:	ab02      	add	r3, sp, #8
 80253d4:	e913 0003 	ldmdb	r3, {r0, r1}
 80253d8:	f7ff ffca 	bl	8025370 <mg_atonl>
 80253dc:	b108      	cbz	r0, 80253e2 <mg_aton+0x2e>
 80253de:	2001      	movs	r0, #1
 80253e0:	e7f4      	b.n	80253cc <mg_aton+0x18>
 80253e2:	4622      	mov	r2, r4
 80253e4:	ab02      	add	r3, sp, #8
 80253e6:	e913 0003 	ldmdb	r3, {r0, r1}
 80253ea:	f7fb fba3 	bl	8020b34 <mg_aton4>
 80253ee:	b108      	cbz	r0, 80253f4 <mg_aton+0x40>
 80253f0:	2001      	movs	r0, #1
 80253f2:	e7eb      	b.n	80253cc <mg_aton+0x18>
         mg_aton6(str, addr);
 80253f4:	4622      	mov	r2, r4
 80253f6:	ab02      	add	r3, sp, #8
 80253f8:	e913 0003 	ldmdb	r3, {r0, r1}
 80253fc:	f7ff fd34 	bl	8024e68 <mg_aton6>
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8025400:	2800      	cmp	r0, #0
 8025402:	d0e3      	beq.n	80253cc <mg_aton+0x18>
 8025404:	2001      	movs	r0, #1
 8025406:	e7e1      	b.n	80253cc <mg_aton+0x18>

08025408 <gettimestamp>:
static int64_t gettimestamp(const uint32_t *data) {
 8025408:	b570      	push	{r4, r5, r6, lr}
 802540a:	4604      	mov	r4, r0
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 802540c:	6800      	ldr	r0, [r0, #0]
 802540e:	f7ff ff9d 	bl	802534c <mg_ntohl>
 8025412:	4606      	mov	r6, r0
 8025414:	6860      	ldr	r0, [r4, #4]
 8025416:	f7ff ff99 	bl	802534c <mg_ntohl>
  if (sec) sec -= SNTP_TIME_OFFSET;
 802541a:	b12e      	cbz	r6, 8025428 <gettimestamp+0x20>
 802541c:	f106 46f8 	add.w	r6, r6, #2080374784	@ 0x7c000000
 8025420:	f506 06ab 	add.w	r6, r6, #5603328	@ 0x558000
 8025424:	f506 76c0 	add.w	r6, r6, #384	@ 0x180
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 8025428:	0ef5      	lsrs	r5, r6, #27
 802542a:	0174      	lsls	r4, r6, #5
 802542c:	1ba4      	subs	r4, r4, r6
 802542e:	f165 0500 	sbc.w	r5, r5, #0
 8025432:	00ad      	lsls	r5, r5, #2
 8025434:	ea45 7594 	orr.w	r5, r5, r4, lsr #30
 8025438:	00a4      	lsls	r4, r4, #2
 802543a:	19a4      	adds	r4, r4, r6
 802543c:	f145 0500 	adc.w	r5, r5, #0
 8025440:	00ed      	lsls	r5, r5, #3
 8025442:	ea45 7554 	orr.w	r5, r5, r4, lsr #29
 8025446:	00e4      	lsls	r4, r4, #3
 8025448:	f7eb f874 	bl	8010534 <__aeabi_ui2d>
 802544c:	a309      	add	r3, pc, #36	@ (adr r3, 8025474 <gettimestamp+0x6c>)
 802544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025452:	f7eb fa13 	bl	801087c <__aeabi_ddiv>
 8025456:	2200      	movs	r2, #0
 8025458:	4b05      	ldr	r3, [pc, #20]	@ (8025470 <gettimestamp+0x68>)
 802545a:	f7eb f8e5 	bl	8010628 <__aeabi_dmul>
 802545e:	f7eb fca7 	bl	8010db0 <__aeabi_d2lz>
 8025462:	1820      	adds	r0, r4, r0
}
 8025464:	eb45 0101 	adc.w	r1, r5, r1
 8025468:	bd70      	pop	{r4, r5, r6, pc}
 802546a:	bf00      	nop
 802546c:	f3af 8000 	nop.w
 8025470:	408f4000 	.word	0x408f4000
 8025474:	ffe00000 	.word	0xffe00000
 8025478:	41efffff 	.word	0x41efffff

0802547c <mg_ntohs>:
uint16_t mg_ntohs(uint16_t net) {
 802547c:	b082      	sub	sp, #8
  uint8_t data[2] = {0, 0};
 802547e:	2300      	movs	r3, #0
 8025480:	f8ad 3004 	strh.w	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 8025484:	f8ad 0004 	strh.w	r0, [sp, #4]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8025488:	b2c3      	uxtb	r3, r0
 802548a:	021b      	lsls	r3, r3, #8
}
 802548c:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
 8025490:	b002      	add	sp, #8
 8025492:	4770      	bx	lr

08025494 <csumfin>:
static uint16_t csumfin(uint32_t sum) {
 8025494:	b508      	push	{r3, lr}
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8025496:	e001      	b.n	802549c <csumfin+0x8>
 8025498:	fa13 f080 	uxtah	r0, r3, r0
 802549c:	0c03      	lsrs	r3, r0, #16
 802549e:	d1fb      	bne.n	8025498 <csumfin+0x4>
  return mg_htons(~sum & 0xffff);
 80254a0:	43c0      	mvns	r0, r0
 80254a2:	b280      	uxth	r0, r0
 80254a4:	f7ff ffea 	bl	802547c <mg_ntohs>
}
 80254a8:	bd08      	pop	{r3, pc}

080254aa <ipcsum>:
static uint16_t ipcsum(const void *buf, size_t len) {
 80254aa:	b508      	push	{r3, lr}
 80254ac:	460a      	mov	r2, r1
  uint32_t sum = csumup(0, buf, len);
 80254ae:	4601      	mov	r1, r0
 80254b0:	2000      	movs	r0, #0
 80254b2:	f7fb fb97 	bl	8020be4 <csumup>
  return csumfin(sum);
 80254b6:	f7ff ffed 	bl	8025494 <csumfin>
}
 80254ba:	bd08      	pop	{r3, pc}

080254bc <tx_ip>:
                        size_t plen) {
 80254bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80254be:	4617      	mov	r7, r2
 80254c0:	461e      	mov	r6, r3
  struct eth *eth = (struct eth *) ifp->tx.buf;
 80254c2:	6944      	ldr	r4, [r0, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 80254c4:	4625      	mov	r5, r4
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 80254c6:	680b      	ldr	r3, [r1, #0]
 80254c8:	f845 3b0e 	str.w	r3, [r5], #14
 80254cc:	888b      	ldrh	r3, [r1, #4]
 80254ce:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 80254d0:	6803      	ldr	r3, [r0, #0]
 80254d2:	f8c4 3006 	str.w	r3, [r4, #6]
 80254d6:	8883      	ldrh	r3, [r0, #4]
 80254d8:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x800);
 80254da:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80254de:	f7ff ffcd 	bl	802547c <mg_ntohs>
 80254e2:	81a0      	strh	r0, [r4, #12]
  memset(ip, 0, sizeof(*ip));
 80254e4:	2100      	movs	r1, #0
 80254e6:	f8c4 100e 	str.w	r1, [r4, #14]
 80254ea:	6069      	str	r1, [r5, #4]
 80254ec:	60a9      	str	r1, [r5, #8]
 80254ee:	60e9      	str	r1, [r5, #12]
 80254f0:	6129      	str	r1, [r5, #16]
  ip->ver = 0x45;   // Version 4, header length 5 words
 80254f2:	2345      	movs	r3, #69	@ 0x45
 80254f4:	73a3      	strb	r3, [r4, #14]
  ip->frag = 0x40;  // Don't fragment
 80254f6:	2340      	movs	r3, #64	@ 0x40
 80254f8:	7523      	strb	r3, [r4, #20]
 80254fa:	7561      	strb	r1, [r4, #21]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 80254fc:	9807      	ldr	r0, [sp, #28]
 80254fe:	3014      	adds	r0, #20
 8025500:	b280      	uxth	r0, r0
 8025502:	f7ff ffbb 	bl	802547c <mg_ntohs>
 8025506:	8220      	strh	r0, [r4, #16]
  ip->ttl = 64;
 8025508:	2340      	movs	r3, #64	@ 0x40
 802550a:	75a3      	strb	r3, [r4, #22]
  ip->proto = proto;
 802550c:	75e7      	strb	r7, [r4, #23]
  ip->src = ip_src;
 802550e:	f8c4 601a 	str.w	r6, [r4, #26]
  ip->dst = ip_dst;
 8025512:	9b06      	ldr	r3, [sp, #24]
 8025514:	f8c4 301e 	str.w	r3, [r4, #30]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8025518:	2114      	movs	r1, #20
 802551a:	4628      	mov	r0, r5
 802551c:	f7ff ffc5 	bl	80254aa <ipcsum>
 8025520:	8320      	strh	r0, [r4, #24]
}
 8025522:	4628      	mov	r0, r5
 8025524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08025526 <rx_icmp>:
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8025526:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8025528:	781b      	ldrb	r3, [r3, #0]
 802552a:	2b08      	cmp	r3, #8
 802552c:	d000      	beq.n	8025530 <rx_icmp+0xa>
 802552e:	4770      	bx	lr
static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8025530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025534:	b083      	sub	sp, #12
 8025536:	4605      	mov	r5, r0
 8025538:	460c      	mov	r4, r1
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 802553a:	69ca      	ldr	r2, [r1, #28]
 802553c:	b11a      	cbz	r2, 8025546 <rx_icmp+0x20>
 802553e:	6911      	ldr	r1, [r2, #16]
 8025540:	6883      	ldr	r3, [r0, #8]
 8025542:	4299      	cmp	r1, r3
 8025544:	d002      	beq.n	802554c <rx_icmp+0x26>
}
 8025546:	b003      	add	sp, #12
 8025548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 802554c:	6986      	ldr	r6, [r0, #24]
 802554e:	3e26      	subs	r6, #38	@ 0x26
 8025550:	68e1      	ldr	r1, [r4, #12]
    if (plen > space) plen = space;
 8025552:	428e      	cmp	r6, r1
 8025554:	d300      	bcc.n	8025558 <rx_icmp+0x32>
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8025556:	460e      	mov	r6, r1
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 8025558:	6921      	ldr	r1, [r4, #16]
 802555a:	f106 0804 	add.w	r8, r6, #4
 802555e:	f8cd 8004 	str.w	r8, [sp, #4]
 8025562:	68d2      	ldr	r2, [r2, #12]
 8025564:	9200      	str	r2, [sp, #0]
 8025566:	2201      	movs	r2, #1
 8025568:	3106      	adds	r1, #6
 802556a:	4628      	mov	r0, r5
 802556c:	f7ff ffa6 	bl	80254bc <tx_ip>
 8025570:	4607      	mov	r7, r0
    struct icmp *icmp = (struct icmp *) (ip + 1);
 8025572:	f100 0914 	add.w	r9, r0, #20
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 8025576:	2300      	movs	r3, #0
 8025578:	6143      	str	r3, [r0, #20]
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 802557a:	4632      	mov	r2, r6
 802557c:	68a1      	ldr	r1, [r4, #8]
 802557e:	3018      	adds	r0, #24
 8025580:	f008 f8ba 	bl	802d6f8 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 8025584:	4641      	mov	r1, r8
 8025586:	4648      	mov	r0, r9
 8025588:	f7ff ff8f 	bl	80254aa <ipcsum>
 802558c:	82f8      	strh	r0, [r7, #22]
    ether_output(ifp, hlen + plen);
 802558e:	f106 0126 	add.w	r1, r6, #38	@ 0x26
 8025592:	4628      	mov	r0, r5
 8025594:	f7fb fb37 	bl	8020c06 <ether_output>
}
 8025598:	e7d5      	b.n	8025546 <rx_icmp+0x20>

0802559a <rx_ip6>:
static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802559a:	b538      	push	{r3, r4, r5, lr}
 802559c:	4605      	mov	r5, r0
 802559e:	460c      	mov	r4, r1
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 80255a0:	6a09      	ldr	r1, [r1, #32]
 80255a2:	798b      	ldrb	r3, [r1, #6]
 80255a4:	2b01      	cmp	r3, #1
 80255a6:	d00e      	beq.n	80255c6 <rx_ip6+0x2c>
 80255a8:	2b3a      	cmp	r3, #58	@ 0x3a
 80255aa:	d00c      	beq.n	80255c6 <rx_ip6+0x2c>
  } else if (pkt->ip6->proto == 17) {
 80255ac:	2b11      	cmp	r3, #17
 80255ae:	d110      	bne.n	80255d2 <rx_ip6+0x38>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 80255b0:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 80255b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 80255b6:	68e3      	ldr	r3, [r4, #12]
 80255b8:	2b07      	cmp	r3, #7
 80255ba:	d90a      	bls.n	80255d2 <rx_ip6+0x38>
    mkpay(pkt, pkt->udp + 1);
 80255bc:	3130      	adds	r1, #48	@ 0x30
 80255be:	4620      	mov	r0, r4
 80255c0:	f7fe fbe9 	bl	8023d96 <mkpay>
 80255c4:	e005      	b.n	80255d2 <rx_ip6+0x38>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 80255c6:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 80255ca:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 80255cc:	68e3      	ldr	r3, [r4, #12]
 80255ce:	2b03      	cmp	r3, #3
 80255d0:	d800      	bhi.n	80255d4 <rx_ip6+0x3a>
}
 80255d2:	bd38      	pop	{r3, r4, r5, pc}
    mkpay(pkt, pkt->icmp + 1);
 80255d4:	312c      	adds	r1, #44	@ 0x2c
 80255d6:	4620      	mov	r0, r4
 80255d8:	f7fe fbdd 	bl	8023d96 <mkpay>
    rx_icmp(ifp, pkt);
 80255dc:	4621      	mov	r1, r4
 80255de:	4628      	mov	r0, r5
 80255e0:	f7ff ffa1 	bl	8025526 <rx_icmp>
 80255e4:	e7f5      	b.n	80255d2 <rx_ip6+0x38>

080255e6 <tx_udp>:
                   const void *buf, size_t len) {
 80255e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80255ea:	b083      	sub	sp, #12
 80255ec:	4606      	mov	r6, r0
 80255ee:	4698      	mov	r8, r3
 80255f0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80255f2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 80255f4:	f105 0308 	add.w	r3, r5, #8
 80255f8:	9301      	str	r3, [sp, #4]
 80255fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80255fc:	9300      	str	r3, [sp, #0]
 80255fe:	4613      	mov	r3, r2
 8025600:	2211      	movs	r2, #17
 8025602:	f7ff ff5b 	bl	80254bc <tx_ip>
 8025606:	4604      	mov	r4, r0
  struct udp *udp = (struct udp *) (ip + 1);
 8025608:	f100 0914 	add.w	r9, r0, #20
  udp->sport = sport;
 802560c:	f8a0 8014 	strh.w	r8, [r0, #20]
  udp->dport = dport;
 8025610:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8025614:	82c3      	strh	r3, [r0, #22]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8025616:	f105 0008 	add.w	r0, r5, #8
 802561a:	b280      	uxth	r0, r0
 802561c:	f7ff ff2e 	bl	802547c <mg_ntohs>
 8025620:	8320      	strh	r0, [r4, #24]
  udp->csum = 0;
 8025622:	2000      	movs	r0, #0
 8025624:	76a0      	strb	r0, [r4, #26]
 8025626:	76e0      	strb	r0, [r4, #27]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8025628:	2208      	movs	r2, #8
 802562a:	4649      	mov	r1, r9
 802562c:	f7fb fada 	bl	8020be4 <csumup>
  cs = csumup(cs, buf, len);
 8025630:	462a      	mov	r2, r5
 8025632:	4639      	mov	r1, r7
 8025634:	f7fb fad6 	bl	8020be4 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8025638:	2204      	movs	r2, #4
 802563a:	f104 010c 	add.w	r1, r4, #12
 802563e:	f7fb fad1 	bl	8020be4 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8025642:	2204      	movs	r2, #4
 8025644:	f104 0110 	add.w	r1, r4, #16
 8025648:	f7fb facc 	bl	8020be4 <csumup>
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 802564c:	7a63      	ldrb	r3, [r4, #9]
 802564e:	442b      	add	r3, r5
 8025650:	4418      	add	r0, r3
  udp->csum = csumfin(cs);
 8025652:	3008      	adds	r0, #8
 8025654:	f7ff ff1e 	bl	8025494 <csumfin>
 8025658:	8360      	strh	r0, [r4, #26]
  memmove(udp + 1, buf, len);
 802565a:	462a      	mov	r2, r5
 802565c:	4639      	mov	r1, r7
 802565e:	f104 001c 	add.w	r0, r4, #28
 8025662:	f006 fdf3 	bl	802c24c <memmove>
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 8025666:	f105 012a 	add.w	r1, r5, #42	@ 0x2a
 802566a:	4630      	mov	r0, r6
 802566c:	f7fb facb 	bl	8020c06 <ether_output>
}
 8025670:	b003      	add	sp, #12
 8025672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08025676 <arp_ask>:
static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 8025676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025678:	4605      	mov	r5, r0
 802567a:	460f      	mov	r7, r1
  struct eth *eth = (struct eth *) ifp->tx.buf;
 802567c:	6944      	ldr	r4, [r0, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 802567e:	4626      	mov	r6, r4
  memset(eth->dst, 255, sizeof(eth->dst));
 8025680:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025684:	f846 3b0e 	str.w	r3, [r6], #14
 8025688:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 802568a:	6803      	ldr	r3, [r0, #0]
 802568c:	f8c4 3006 	str.w	r3, [r4, #6]
 8025690:	8883      	ldrh	r3, [r0, #4]
 8025692:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x806);
 8025694:	f640 0006 	movw	r0, #2054	@ 0x806
 8025698:	f7ff fef0 	bl	802547c <mg_ntohs>
 802569c:	81a0      	strh	r0, [r4, #12]
  memset(arp, 0, sizeof(*arp));
 802569e:	2300      	movs	r3, #0
 80256a0:	f8c4 300e 	str.w	r3, [r4, #14]
 80256a4:	6073      	str	r3, [r6, #4]
 80256a6:	60b3      	str	r3, [r6, #8]
 80256a8:	60f3      	str	r3, [r6, #12]
 80256aa:	6133      	str	r3, [r6, #16]
 80256ac:	6173      	str	r3, [r6, #20]
 80256ae:	61b3      	str	r3, [r6, #24]
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 80256b0:	2001      	movs	r0, #1
 80256b2:	f7ff fee3 	bl	802547c <mg_ntohs>
 80256b6:	4606      	mov	r6, r0
 80256b8:	81e0      	strh	r0, [r4, #14]
 80256ba:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80256be:	f7ff fedd 	bl	802547c <mg_ntohs>
 80256c2:	8220      	strh	r0, [r4, #16]
 80256c4:	2306      	movs	r3, #6
 80256c6:	74a3      	strb	r3, [r4, #18]
  arp->plen = 4;
 80256c8:	2304      	movs	r3, #4
 80256ca:	74e3      	strb	r3, [r4, #19]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 80256cc:	82a6      	strh	r6, [r4, #20]
 80256ce:	f8c4 7026 	str.w	r7, [r4, #38]	@ 0x26
 80256d2:	68ab      	ldr	r3, [r5, #8]
 80256d4:	61e3      	str	r3, [r4, #28]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 80256d6:	682b      	ldr	r3, [r5, #0]
 80256d8:	f8c4 3016 	str.w	r3, [r4, #22]
 80256dc:	88ab      	ldrh	r3, [r5, #4]
 80256de:	8363      	strh	r3, [r4, #26]
  ether_output(ifp, PDIFF(eth, arp + 1));
 80256e0:	212a      	movs	r1, #42	@ 0x2a
 80256e2:	4628      	mov	r0, r5
 80256e4:	f7fb fa8f 	bl	8020c06 <ether_output>
}
 80256e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080256ea <mg_open_listener>:
bool mg_open_listener(struct mg_connection *c, const char *url) {
 80256ea:	b510      	push	{r4, lr}
 80256ec:	4604      	mov	r4, r0
  c->loc.port = mg_htons(mg_url_port(url));
 80256ee:	4608      	mov	r0, r1
 80256f0:	f7ff fd74 	bl	80251dc <mg_url_port>
 80256f4:	f7ff fec2 	bl	802547c <mg_ntohs>
 80256f8:	8320      	strh	r0, [r4, #24]
}
 80256fa:	2001      	movs	r0, #1
 80256fc:	bd10      	pop	{r4, pc}
	...

08025700 <tx_dhcp>:
                    bool ciaddr) {
 8025700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025704:	b0c8      	sub	sp, #288	@ 0x120
 8025706:	4604      	mov	r4, r0
 8025708:	460e      	mov	r6, r1
 802570a:	4615      	mov	r5, r2
 802570c:	4698      	mov	r8, r3
 802570e:	f89d 7140 	ldrb.w	r7, [sp, #320]	@ 0x140
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8025712:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8025716:	4917      	ldr	r1, [pc, #92]	@ (8025774 <tx_dhcp+0x74>)
 8025718:	a804      	add	r0, sp, #16
 802571a:	f007 ffed 	bl	802d6f8 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 802571e:	4816      	ldr	r0, [pc, #88]	@ (8025778 <tx_dhcp+0x78>)
 8025720:	f7ff fe14 	bl	802534c <mg_ntohl>
 8025724:	903f      	str	r0, [sp, #252]	@ 0xfc
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 8025726:	6820      	ldr	r0, [r4, #0]
 8025728:	900b      	str	r0, [sp, #44]	@ 0x2c
 802572a:	88a3      	ldrh	r3, [r4, #4]
 802572c:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 8025730:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8025734:	9305      	str	r3, [sp, #20]
  memcpy(&dhcp.options, opts, optslen);
 8025736:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 8025738:	994e      	ldr	r1, [sp, #312]	@ 0x138
 802573a:	a840      	add	r0, sp, #256	@ 0x100
 802573c:	f007 ffdc 	bl	802d6f8 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 8025740:	b107      	cbz	r7, 8025744 <tx_dhcp+0x44>
 8025742:	9507      	str	r5, [sp, #28]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 8025744:	2044      	movs	r0, #68	@ 0x44
 8025746:	f7ff fe99 	bl	802547c <mg_ntohs>
 802574a:	4607      	mov	r7, r0
 802574c:	2043      	movs	r0, #67	@ 0x43
 802574e:	f7ff fe95 	bl	802547c <mg_ntohs>
 8025752:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8025756:	9303      	str	r3, [sp, #12]
 8025758:	ab04      	add	r3, sp, #16
 802575a:	9302      	str	r3, [sp, #8]
 802575c:	9001      	str	r0, [sp, #4]
 802575e:	f8cd 8000 	str.w	r8, [sp]
 8025762:	463b      	mov	r3, r7
 8025764:	462a      	mov	r2, r5
 8025766:	4631      	mov	r1, r6
 8025768:	4620      	mov	r0, r4
 802576a:	f7ff ff3c 	bl	80255e6 <tx_udp>
}
 802576e:	b048      	add	sp, #288	@ 0x120
 8025770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025774:	080355cc 	.word	0x080355cc
 8025778:	63825363 	.word	0x63825363

0802577c <rx_dhcp_server>:
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802577c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025780:	b0d0      	sub	sp, #320	@ 0x140
 8025782:	460d      	mov	r5, r1
  uint8_t op = 0, *p = pkt->dhcp->options,
 8025784:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8025786:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 802578a:	6809      	ldr	r1, [r1, #0]
 802578c:	686a      	ldr	r2, [r5, #4]
 802578e:	eb01 0802 	add.w	r8, r1, r2
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8025792:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8025796:	4543      	cmp	r3, r8
 8025798:	d827      	bhi.n	80257ea <rx_dhcp_server+0x6e>
 802579a:	4606      	mov	r6, r0
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 802579c:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80257a0:	495e      	ldr	r1, [pc, #376]	@ (802591c <rx_dhcp_server+0x1a0>)
 80257a2:	a80c      	add	r0, sp, #48	@ 0x30
 80257a4:	f007 ffa8 	bl	802d6f8 <memcpy>
  res.yiaddr = ifp->ip;
 80257a8:	68b3      	ldr	r3, [r6, #8]
 80257aa:	9310      	str	r3, [sp, #64]	@ 0x40
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 80257ac:	f3c3 6307 	ubfx	r3, r3, #24, #8
 80257b0:	3301      	adds	r3, #1
 80257b2:	f88d 3043 	strb.w	r3, [sp, #67]	@ 0x43
  uint8_t op = 0, *p = pkt->dhcp->options,
 80257b6:	2700      	movs	r7, #0
  while (p + 1 < end && p[0] != 255) {             // Parse options
 80257b8:	e002      	b.n	80257c0 <rx_dhcp_server+0x44>
    p += p[1] + 2;
 80257ba:	7863      	ldrb	r3, [r4, #1]
 80257bc:	3302      	adds	r3, #2
 80257be:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {             // Parse options
 80257c0:	1c63      	adds	r3, r4, #1
 80257c2:	4543      	cmp	r3, r8
 80257c4:	d20c      	bcs.n	80257e0 <rx_dhcp_server+0x64>
 80257c6:	7823      	ldrb	r3, [r4, #0]
 80257c8:	2bff      	cmp	r3, #255	@ 0xff
 80257ca:	d009      	beq.n	80257e0 <rx_dhcp_server+0x64>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 80257cc:	2b35      	cmp	r3, #53	@ 0x35
 80257ce:	d1f4      	bne.n	80257ba <rx_dhcp_server+0x3e>
 80257d0:	7863      	ldrb	r3, [r4, #1]
 80257d2:	2b01      	cmp	r3, #1
 80257d4:	d1f1      	bne.n	80257ba <rx_dhcp_server+0x3e>
 80257d6:	1ca3      	adds	r3, r4, #2
 80257d8:	4543      	cmp	r3, r8
 80257da:	d2ee      	bcs.n	80257ba <rx_dhcp_server+0x3e>
      op = p[2];
 80257dc:	78a7      	ldrb	r7, [r4, #2]
 80257de:	e7ec      	b.n	80257ba <rx_dhcp_server+0x3e>
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 80257e0:	2f01      	cmp	r7, #1
 80257e2:	f000 808a 	beq.w	80258fa <rx_dhcp_server+0x17e>
 80257e6:	2f03      	cmp	r7, #3
 80257e8:	d002      	beq.n	80257f0 <rx_dhcp_server+0x74>
}
 80257ea:	b050      	add	sp, #320	@ 0x140
 80257ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 80257f0:	2205      	movs	r2, #5
    uint8_t opts[] = {
 80257f2:	2335      	movs	r3, #53	@ 0x35
 80257f4:	f88d 3014 	strb.w	r3, [sp, #20]
 80257f8:	2301      	movs	r3, #1
 80257fa:	f88d 3015 	strb.w	r3, [sp, #21]
 80257fe:	f88d 2016 	strb.w	r2, [sp, #22]
 8025802:	f88d 3017 	strb.w	r3, [sp, #23]
 8025806:	2204      	movs	r2, #4
 8025808:	f88d 2018 	strb.w	r2, [sp, #24]
 802580c:	2300      	movs	r3, #0
 802580e:	f88d 3019 	strb.w	r3, [sp, #25]
 8025812:	f88d 301a 	strb.w	r3, [sp, #26]
 8025816:	f88d 301b 	strb.w	r3, [sp, #27]
 802581a:	f88d 301c 	strb.w	r3, [sp, #28]
 802581e:	2136      	movs	r1, #54	@ 0x36
 8025820:	f88d 101d 	strb.w	r1, [sp, #29]
 8025824:	f88d 201e 	strb.w	r2, [sp, #30]
 8025828:	f88d 301f 	strb.w	r3, [sp, #31]
 802582c:	f88d 3020 	strb.w	r3, [sp, #32]
 8025830:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8025834:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 8025838:	230c      	movs	r3, #12
 802583a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 802583e:	2303      	movs	r3, #3
 8025840:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8025844:	236d      	movs	r3, #109	@ 0x6d
 8025846:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
 802584a:	2369      	movs	r3, #105	@ 0x69
 802584c:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
 8025850:	2370      	movs	r3, #112	@ 0x70
 8025852:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8025856:	2333      	movs	r3, #51	@ 0x33
 8025858:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 802585c:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
 8025860:	23ff      	movs	r3, #255	@ 0xff
 8025862:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8025866:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 802586a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 802586e:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
 8025872:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 8025876:	f8d5 e030 	ldr.w	lr, [r5, #48]	@ 0x30
 802587a:	f8de 001c 	ldr.w	r0, [lr, #28]
 802587e:	9013      	str	r0, [sp, #76]	@ 0x4c
 8025880:	f8be 3020 	ldrh.w	r3, [lr, #32]
 8025884:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 8025888:	68f3      	ldr	r3, [r6, #12]
 802588a:	f8cd 3019 	str.w	r3, [sp, #25]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 802588e:	68b3      	ldr	r3, [r6, #8]
 8025890:	f8cd 301f 	str.w	r3, [sp, #31]
    memcpy(&res.options, opts, sizeof(opts));
 8025894:	f50d 7c90 	add.w	ip, sp, #288	@ 0x120
 8025898:	ac05      	add	r4, sp, #20
 802589a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802589c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80258a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80258a4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80258a8:	f82c 2b02 	strh.w	r2, [ip], #2
 80258ac:	0c12      	lsrs	r2, r2, #16
 80258ae:	f88c 2000 	strb.w	r2, [ip]
    res.magic = pkt->dhcp->magic;
 80258b2:	f8de 30ec 	ldr.w	r3, [lr, #236]	@ 0xec
 80258b6:	9347      	str	r3, [sp, #284]	@ 0x11c
    res.xid = pkt->dhcp->xid;
 80258b8:	f8de 3004 	ldr.w	r3, [lr, #4]
 80258bc:	930d      	str	r3, [sp, #52]	@ 0x34
    if (ifp->enable_get_gateway) {
 80258be:	7fb3      	ldrb	r3, [r6, #30]
 80258c0:	b9eb      	cbnz	r3, 80258fe <rx_dhcp_server+0x182>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 80258c2:	692c      	ldr	r4, [r5, #16]
 80258c4:	3406      	adds	r4, #6
 80258c6:	f8d6 8008 	ldr.w	r8, [r6, #8]
 80258ca:	2043      	movs	r0, #67	@ 0x43
 80258cc:	f7ff fdd6 	bl	802547c <mg_ntohs>
 80258d0:	4605      	mov	r5, r0
 80258d2:	2f01      	cmp	r7, #1
 80258d4:	d01e      	beq.n	8025914 <rx_dhcp_server+0x198>
 80258d6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80258d8:	2044      	movs	r0, #68	@ 0x44
 80258da:	f7ff fdcf 	bl	802547c <mg_ntohs>
 80258de:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80258e2:	9303      	str	r3, [sp, #12]
 80258e4:	ab0c      	add	r3, sp, #48	@ 0x30
 80258e6:	9302      	str	r3, [sp, #8]
 80258e8:	9001      	str	r0, [sp, #4]
 80258ea:	9700      	str	r7, [sp, #0]
 80258ec:	462b      	mov	r3, r5
 80258ee:	4642      	mov	r2, r8
 80258f0:	4621      	mov	r1, r4
 80258f2:	4630      	mov	r0, r6
 80258f4:	f7ff fe77 	bl	80255e6 <tx_udp>
 80258f8:	e777      	b.n	80257ea <rx_dhcp_server+0x6e>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 80258fa:	2202      	movs	r2, #2
 80258fc:	e779      	b.n	80257f2 <rx_dhcp_server+0x76>
      ifp->gw = res.yiaddr;
 80258fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025900:	6133      	str	r3, [r6, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8025902:	692b      	ldr	r3, [r5, #16]
 8025904:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8025908:	f8c6 2046 	str.w	r2, [r6, #70]	@ 0x46
 802590c:	895b      	ldrh	r3, [r3, #10]
 802590e:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 8025912:	e7d6      	b.n	80258c2 <rx_dhcp_server+0x146>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8025914:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8025918:	e7de      	b.n	80258d8 <rx_dhcp_server+0x15c>
 802591a:	bf00      	nop
 802591c:	080356dc 	.word	0x080356dc

08025920 <print_ip6>:
static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8025920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025924:	b08b      	sub	sp, #44	@ 0x2c
 8025926:	4605      	mov	r5, r0
 8025928:	9108      	str	r1, [sp, #32]
 802592a:	4614      	mov	r4, r2
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 802592c:	8810      	ldrh	r0, [r2, #0]
 802592e:	f7ff fda5 	bl	802547c <mg_ntohs>
 8025932:	9009      	str	r0, [sp, #36]	@ 0x24
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8025934:	8860      	ldrh	r0, [r4, #2]
 8025936:	f7ff fda1 	bl	802547c <mg_ntohs>
 802593a:	4606      	mov	r6, r0
 802593c:	88a0      	ldrh	r0, [r4, #4]
 802593e:	f7ff fd9d 	bl	802547c <mg_ntohs>
 8025942:	4607      	mov	r7, r0
 8025944:	88e0      	ldrh	r0, [r4, #6]
 8025946:	f7ff fd99 	bl	802547c <mg_ntohs>
 802594a:	4680      	mov	r8, r0
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 802594c:	8920      	ldrh	r0, [r4, #8]
 802594e:	f7ff fd95 	bl	802547c <mg_ntohs>
 8025952:	4681      	mov	r9, r0
 8025954:	8960      	ldrh	r0, [r4, #10]
 8025956:	f7ff fd91 	bl	802547c <mg_ntohs>
 802595a:	4682      	mov	sl, r0
 802595c:	89a0      	ldrh	r0, [r4, #12]
 802595e:	f7ff fd8d 	bl	802547c <mg_ntohs>
 8025962:	4683      	mov	fp, r0
                    mg_ntohs(p[7]));
 8025964:	89e0      	ldrh	r0, [r4, #14]
 8025966:	f7ff fd89 	bl	802547c <mg_ntohs>
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 802596a:	9006      	str	r0, [sp, #24]
 802596c:	f8cd b014 	str.w	fp, [sp, #20]
 8025970:	f8cd a010 	str.w	sl, [sp, #16]
 8025974:	f8cd 900c 	str.w	r9, [sp, #12]
 8025978:	f8cd 8008 	str.w	r8, [sp, #8]
 802597c:	9701      	str	r7, [sp, #4]
 802597e:	9600      	str	r6, [sp, #0]
 8025980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025982:	4a04      	ldr	r2, [pc, #16]	@ (8025994 <print_ip6+0x74>)
 8025984:	9908      	ldr	r1, [sp, #32]
 8025986:	4628      	mov	r0, r5
 8025988:	f7fd ff28 	bl	80237dc <mg_xprintf>
}
 802598c:	b00b      	add	sp, #44	@ 0x2c
 802598e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025992:	bf00      	nop
 8025994:	0803a018 	.word	0x0803a018

08025998 <mg_print_ip>:
size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8025998:	b510      	push	{r4, lr}
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 802599a:	6813      	ldr	r3, [r2, #0]
 802599c:	1d1c      	adds	r4, r3, #4
 802599e:	6014      	str	r4, [r2, #0]
 80259a0:	681a      	ldr	r2, [r3, #0]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 80259a2:	7cd3      	ldrb	r3, [r2, #19]
 80259a4:	b913      	cbnz	r3, 80259ac <mg_print_ip+0x14>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 80259a6:	f7fd ff29 	bl	80237fc <print_ip4>
}
 80259aa:	bd10      	pop	{r4, pc}
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 80259ac:	f7ff ffb8 	bl	8025920 <print_ip6>
 80259b0:	e7fb      	b.n	80259aa <mg_print_ip+0x12>
	...

080259b4 <mg_print_ip_port>:
size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 80259b4:	b570      	push	{r4, r5, r6, lr}
 80259b6:	b082      	sub	sp, #8
 80259b8:	4604      	mov	r4, r0
 80259ba:	460d      	mov	r5, r1
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 80259bc:	6813      	ldr	r3, [r2, #0]
 80259be:	1d19      	adds	r1, r3, #4
 80259c0:	6011      	str	r1, [r2, #0]
 80259c2:	681e      	ldr	r6, [r3, #0]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 80259c4:	8a30      	ldrh	r0, [r6, #16]
 80259c6:	f7ff fd59 	bl	802547c <mg_ntohs>
 80259ca:	9001      	str	r0, [sp, #4]
 80259cc:	9600      	str	r6, [sp, #0]
 80259ce:	4b04      	ldr	r3, [pc, #16]	@ (80259e0 <mg_print_ip_port+0x2c>)
 80259d0:	4a04      	ldr	r2, [pc, #16]	@ (80259e4 <mg_print_ip_port+0x30>)
 80259d2:	4629      	mov	r1, r5
 80259d4:	4620      	mov	r0, r4
 80259d6:	f7fd ff01 	bl	80237dc <mg_xprintf>
}
 80259da:	b002      	add	sp, #8
 80259dc:	bd70      	pop	{r4, r5, r6, pc}
 80259de:	bf00      	nop
 80259e0:	08025999 	.word	0x08025999
 80259e4:	0803a034 	.word	0x0803a034

080259e8 <mg_crc32>:
  crc = ~crc;
 80259e8:	43c0      	mvns	r0, r0
  while (len--) {
 80259ea:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 80259ee:	b1e2      	cbz	r2, 8025a2a <mg_crc32+0x42>
uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 80259f0:	b410      	push	{r4}
    uint8_t b = *(uint8_t *) buf++;
 80259f2:	f811 3b01 	ldrb.w	r3, [r1], #1
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 80259f6:	ea83 0200 	eor.w	r2, r3, r0
 80259fa:	f002 020f 	and.w	r2, r2, #15
 80259fe:	4c0c      	ldr	r4, [pc, #48]	@ (8025a30 <mg_crc32+0x48>)
 8025a00:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8025a04:	ea82 1010 	eor.w	r0, r2, r0, lsr #4
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8025a08:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 8025a0c:	f003 030f 	and.w	r3, r3, #15
 8025a10:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8025a14:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
  while (len--) {
 8025a18:	4662      	mov	r2, ip
 8025a1a:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8025a1e:	2a00      	cmp	r2, #0
 8025a20:	d1e7      	bne.n	80259f2 <mg_crc32+0xa>
}
 8025a22:	43c0      	mvns	r0, r0
 8025a24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025a28:	4770      	bx	lr
 8025a2a:	43c0      	mvns	r0, r0
 8025a2c:	4770      	bx	lr
 8025a2e:	bf00      	nop
 8025a30:	0803a8c8 	.word	0x0803a8c8

08025a34 <mg_path_is_sane>:
bool mg_path_is_sane(const struct mg_str path) {
 8025a34:	b082      	sub	sp, #8
 8025a36:	ab02      	add	r3, sp, #8
 8025a38:	e903 0003 	stmdb	r3, {r0, r1}
  const char *s = path.buf;
 8025a3c:	4602      	mov	r2, r0
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 8025a3e:	7803      	ldrb	r3, [r0, #0]
 8025a40:	2b2e      	cmp	r3, #46	@ 0x2e
 8025a42:	d106      	bne.n	8025a52 <mg_path_is_sane+0x1e>
 8025a44:	7843      	ldrb	r3, [r0, #1]
 8025a46:	2b2e      	cmp	r3, #46	@ 0x2e
 8025a48:	d103      	bne.n	8025a52 <mg_path_is_sane+0x1e>
 8025a4a:	2000      	movs	r0, #0
 8025a4c:	e015      	b.n	8025a7a <mg_path_is_sane+0x46>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 8025a4e:	3201      	adds	r2, #1
 8025a50:	3901      	subs	r1, #1
 8025a52:	7813      	ldrb	r3, [r2, #0]
 8025a54:	b183      	cbz	r3, 8025a78 <mg_path_is_sane+0x44>
 8025a56:	b169      	cbz	r1, 8025a74 <mg_path_is_sane+0x40>
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 8025a58:	2b2f      	cmp	r3, #47	@ 0x2f
 8025a5a:	d001      	beq.n	8025a60 <mg_path_is_sane+0x2c>
 8025a5c:	2b5c      	cmp	r3, #92	@ 0x5c
 8025a5e:	d1f6      	bne.n	8025a4e <mg_path_is_sane+0x1a>
 8025a60:	2901      	cmp	r1, #1
 8025a62:	d9f4      	bls.n	8025a4e <mg_path_is_sane+0x1a>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8025a64:	7853      	ldrb	r3, [r2, #1]
 8025a66:	2b2e      	cmp	r3, #46	@ 0x2e
 8025a68:	d1f1      	bne.n	8025a4e <mg_path_is_sane+0x1a>
 8025a6a:	7893      	ldrb	r3, [r2, #2]
 8025a6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8025a6e:	d1ee      	bne.n	8025a4e <mg_path_is_sane+0x1a>
 8025a70:	2000      	movs	r0, #0
 8025a72:	e002      	b.n	8025a7a <mg_path_is_sane+0x46>
  return true;
 8025a74:	2001      	movs	r0, #1
 8025a76:	e000      	b.n	8025a7a <mg_path_is_sane+0x46>
 8025a78:	2001      	movs	r0, #1
}
 8025a7a:	b002      	add	sp, #8
 8025a7c:	4770      	bx	lr

08025a7e <mg_millis>:
uint64_t mg_millis(void) {
 8025a7e:	b508      	push	{r3, lr}
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 8025a80:	f7f3 fcc6 	bl	8019410 <xTaskGetTickCount>
}
 8025a84:	2100      	movs	r1, #0
 8025a86:	bd08      	pop	{r3, pc}

08025a88 <mg_log_prefix>:
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 8025a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025a8c:	b092      	sub	sp, #72	@ 0x48
 8025a8e:	4605      	mov	r5, r0
 8025a90:	460c      	mov	r4, r1
 8025a92:	4616      	mov	r6, r2
 8025a94:	461f      	mov	r7, r3
  const char *p = strrchr(file, '/');
 8025a96:	212f      	movs	r1, #47	@ 0x2f
 8025a98:	4620      	mov	r0, r4
 8025a9a:	f006 fc4b 	bl	802c334 <strrchr>
  if (p == NULL) p = strrchr(file, '\\');
 8025a9e:	4680      	mov	r8, r0
 8025aa0:	b1a8      	cbz	r0, 8025ace <mg_log_prefix+0x46>
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 8025aa2:	f7ff ffec 	bl	8025a7e <mg_millis>
 8025aa6:	f1b8 0f00 	cmp.w	r8, #0
 8025aaa:	d001      	beq.n	8025ab0 <mg_log_prefix+0x28>
 8025aac:	f108 0401 	add.w	r4, r8, #1
 8025ab0:	9705      	str	r7, [sp, #20]
 8025ab2:	9604      	str	r6, [sp, #16]
 8025ab4:	9403      	str	r4, [sp, #12]
 8025ab6:	9502      	str	r5, [sp, #8]
 8025ab8:	9000      	str	r0, [sp, #0]
 8025aba:	9101      	str	r1, [sp, #4]
 8025abc:	4a0f      	ldr	r2, [pc, #60]	@ (8025afc <mg_log_prefix+0x74>)
 8025abe:	2129      	movs	r1, #41	@ 0x29
 8025ac0:	a807      	add	r0, sp, #28
 8025ac2:	f7fd fa1f 	bl	8022f04 <mg_snprintf>
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 8025ac6:	2827      	cmp	r0, #39	@ 0x27
 8025ac8:	d90e      	bls.n	8025ae8 <mg_log_prefix+0x60>
 8025aca:	2027      	movs	r0, #39	@ 0x27
 8025acc:	e00c      	b.n	8025ae8 <mg_log_prefix+0x60>
  if (p == NULL) p = strrchr(file, '\\');
 8025ace:	215c      	movs	r1, #92	@ 0x5c
 8025ad0:	4620      	mov	r0, r4
 8025ad2:	f006 fc2f 	bl	802c334 <strrchr>
 8025ad6:	4680      	mov	r8, r0
 8025ad8:	e7e3      	b.n	8025aa2 <mg_log_prefix+0x1a>
  while (n < sizeof(buf)) buf[n++] = ' ';
 8025ada:	f100 0348 	add.w	r3, r0, #72	@ 0x48
 8025ade:	446b      	add	r3, sp
 8025ae0:	2220      	movs	r2, #32
 8025ae2:	f803 2c2c 	strb.w	r2, [r3, #-44]
 8025ae6:	3001      	adds	r0, #1
 8025ae8:	2828      	cmp	r0, #40	@ 0x28
 8025aea:	d9f6      	bls.n	8025ada <mg_log_prefix+0x52>
  logs(buf, n - 1);
 8025aec:	1e41      	subs	r1, r0, #1
 8025aee:	a807      	add	r0, sp, #28
 8025af0:	f7fa fbdc 	bl	80202ac <logs>
}
 8025af4:	b012      	add	sp, #72	@ 0x48
 8025af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025afa:	bf00      	nop
 8025afc:	0803a03c 	.word	0x0803a03c

08025b00 <mg_dns_parse>:
bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8025b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025b04:	b084      	sub	sp, #16
 8025b06:	4605      	mov	r5, r0
 8025b08:	460e      	mov	r6, r1
 8025b0a:	4690      	mov	r8, r2
  memset(dm, 0, sizeof(*dm));
 8025b0c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8025b10:	2100      	movs	r1, #0
 8025b12:	4640      	mov	r0, r8
 8025b14:	f006 fbb4 	bl	802c280 <memset>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8025b18:	2e0b      	cmp	r6, #11
 8025b1a:	f240 808b 	bls.w	8025c34 <mg_dns_parse+0x134>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 8025b1e:	88a8      	ldrh	r0, [r5, #4]
 8025b20:	f7ff fcac 	bl	802547c <mg_ntohs>
 8025b24:	2801      	cmp	r0, #1
 8025b26:	f200 8089 	bhi.w	8025c3c <mg_dns_parse+0x13c>
  num_answers = mg_ntohs(h->num_answers);
 8025b2a:	88e8      	ldrh	r0, [r5, #6]
 8025b2c:	f7ff fca6 	bl	802547c <mg_ntohs>
 8025b30:	4604      	mov	r4, r0
 8025b32:	4681      	mov	r9, r0
  if (num_answers > 10) {
 8025b34:	280a      	cmp	r0, #10
 8025b36:	d905      	bls.n	8025b44 <mg_dns_parse+0x44>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8025b38:	4b43      	ldr	r3, [pc, #268]	@ (8025c48 <mg_dns_parse+0x148>)
 8025b3a:	681b      	ldr	r3, [r3, #0]
 8025b3c:	2b02      	cmp	r3, #2
 8025b3e:	dc1a      	bgt.n	8025b76 <mg_dns_parse+0x76>
    num_answers = 10;  // Sanity cap
 8025b40:	f04f 090a 	mov.w	r9, #10
  dm->txnid = mg_ntohs(h->txnid);
 8025b44:	8828      	ldrh	r0, [r5, #0]
 8025b46:	f7ff fc99 	bl	802547c <mg_ntohs>
 8025b4a:	f8a8 0000 	strh.w	r0, [r8]
  size_t i, n, num_answers, ofs = sizeof(*h);
 8025b4e:	240c      	movs	r4, #12
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8025b50:	2700      	movs	r7, #0
 8025b52:	88a8      	ldrh	r0, [r5, #4]
 8025b54:	f7ff fc92 	bl	802547c <mg_ntohs>
 8025b58:	42b8      	cmp	r0, r7
 8025b5a:	d91a      	bls.n	8025b92 <mg_dns_parse+0x92>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8025b5c:	ab02      	add	r3, sp, #8
 8025b5e:	9300      	str	r3, [sp, #0]
 8025b60:	2301      	movs	r3, #1
 8025b62:	4622      	mov	r2, r4
 8025b64:	4631      	mov	r1, r6
 8025b66:	4628      	mov	r0, r5
 8025b68:	f7fc fbdf 	bl	802232a <mg_dns_parse_rr>
 8025b6c:	2800      	cmp	r0, #0
 8025b6e:	d067      	beq.n	8025c40 <mg_dns_parse+0x140>
    ofs += n;
 8025b70:	4404      	add	r4, r0
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8025b72:	3701      	adds	r7, #1
 8025b74:	e7ed      	b.n	8025b52 <mg_dns_parse+0x52>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8025b76:	4b35      	ldr	r3, [pc, #212]	@ (8025c4c <mg_dns_parse+0x14c>)
 8025b78:	f240 4293 	movw	r2, #1171	@ 0x493
 8025b7c:	4934      	ldr	r1, [pc, #208]	@ (8025c50 <mg_dns_parse+0x150>)
 8025b7e:	2003      	movs	r0, #3
 8025b80:	f7ff ff82 	bl	8025a88 <mg_log_prefix>
 8025b84:	4621      	mov	r1, r4
 8025b86:	4833      	ldr	r0, [pc, #204]	@ (8025c54 <mg_dns_parse+0x154>)
 8025b88:	f7fd fe68 	bl	802385c <mg_log>
    num_answers = 10;  // Sanity cap
 8025b8c:	f04f 090a 	mov.w	r9, #10
 8025b90:	e7d8      	b.n	8025b44 <mg_dns_parse+0x44>
  for (i = 0; i < num_answers; i++) {
 8025b92:	2700      	movs	r7, #0
 8025b94:	e013      	b.n	8025bbe <mg_dns_parse+0xbe>
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8025b96:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8025b9a:	2a01      	cmp	r2, #1
 8025b9c:	d12a      	bne.n	8025bf4 <mg_dns_parse+0xf4>
 8025b9e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8025ba2:	2a01      	cmp	r2, #1
 8025ba4:	d126      	bne.n	8025bf4 <mg_dns_parse+0xf4>
      dm->addr.is_ip6 = false;
 8025ba6:	2300      	movs	r3, #0
 8025ba8:	f888 3017 	strb.w	r3, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 8025bac:	3c04      	subs	r4, #4
 8025bae:	592b      	ldr	r3, [r5, r4]
 8025bb0:	f8c8 3004 	str.w	r3, [r8, #4]
      dm->resolved = true;
 8025bb4:	2001      	movs	r0, #1
 8025bb6:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 8025bba:	e03c      	b.n	8025c36 <mg_dns_parse+0x136>
  for (i = 0; i < num_answers; i++) {
 8025bbc:	3701      	adds	r7, #1
 8025bbe:	454f      	cmp	r7, r9
 8025bc0:	d236      	bcs.n	8025c30 <mg_dns_parse+0x130>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8025bc2:	ab02      	add	r3, sp, #8
 8025bc4:	9300      	str	r3, [sp, #0]
 8025bc6:	2300      	movs	r3, #0
 8025bc8:	4622      	mov	r2, r4
 8025bca:	4631      	mov	r1, r6
 8025bcc:	4628      	mov	r0, r5
 8025bce:	f7fc fbac 	bl	802232a <mg_dns_parse_rr>
 8025bd2:	4682      	mov	sl, r0
 8025bd4:	b3b0      	cbz	r0, 8025c44 <mg_dns_parse+0x144>
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8025bd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025bda:	9300      	str	r3, [sp, #0]
 8025bdc:	f108 0318 	add.w	r3, r8, #24
 8025be0:	4622      	mov	r2, r4
 8025be2:	4631      	mov	r1, r6
 8025be4:	4628      	mov	r0, r5
 8025be6:	f7fb faf7 	bl	80211d8 <mg_dns_parse_name>
    ofs += n;
 8025bea:	4454      	add	r4, sl
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8025bec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8025bf0:	2b04      	cmp	r3, #4
 8025bf2:	d0d0      	beq.n	8025b96 <mg_dns_parse+0x96>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8025bf4:	2b10      	cmp	r3, #16
 8025bf6:	d1e1      	bne.n	8025bbc <mg_dns_parse+0xbc>
 8025bf8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8025bfc:	2b1c      	cmp	r3, #28
 8025bfe:	d1dd      	bne.n	8025bbc <mg_dns_parse+0xbc>
 8025c00:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8025c04:	2b01      	cmp	r3, #1
 8025c06:	d1d9      	bne.n	8025bbc <mg_dns_parse+0xbc>
      dm->addr.is_ip6 = true;
 8025c08:	2001      	movs	r0, #1
 8025c0a:	f888 0017 	strb.w	r0, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 8025c0e:	3c10      	subs	r4, #16
 8025c10:	192b      	adds	r3, r5, r4
 8025c12:	592c      	ldr	r4, [r5, r4]
 8025c14:	6859      	ldr	r1, [r3, #4]
 8025c16:	689a      	ldr	r2, [r3, #8]
 8025c18:	68db      	ldr	r3, [r3, #12]
 8025c1a:	f8c8 4004 	str.w	r4, [r8, #4]
 8025c1e:	f8c8 1008 	str.w	r1, [r8, #8]
 8025c22:	f8c8 200c 	str.w	r2, [r8, #12]
 8025c26:	f8c8 3010 	str.w	r3, [r8, #16]
      dm->resolved = true;
 8025c2a:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 8025c2e:	e002      	b.n	8025c36 <mg_dns_parse+0x136>
  return true;
 8025c30:	2001      	movs	r0, #1
 8025c32:	e000      	b.n	8025c36 <mg_dns_parse+0x136>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8025c34:	2000      	movs	r0, #0
}
 8025c36:	b004      	add	sp, #16
 8025c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 8025c3c:	2000      	movs	r0, #0
 8025c3e:	e7fa      	b.n	8025c36 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8025c40:	2000      	movs	r0, #0
 8025c42:	e7f8      	b.n	8025c36 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8025c44:	2000      	movs	r0, #0
 8025c46:	e7f6      	b.n	8025c36 <mg_dns_parse+0x136>
 8025c48:	2000012c 	.word	0x2000012c
 8025c4c:	0803aac8 	.word	0x0803aac8
 8025c50:	0803a050 	.word	0x0803a050
 8025c54:	0803a080 	.word	0x0803a080

08025c58 <mg_error>:
void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8025c58:	b40e      	push	{r1, r2, r3}
 8025c5a:	b510      	push	{r4, lr}
 8025c5c:	b093      	sub	sp, #76	@ 0x4c
 8025c5e:	4604      	mov	r4, r0
 8025c60:	ab15      	add	r3, sp, #84	@ 0x54
 8025c62:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8025c66:	9301      	str	r3, [sp, #4]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8025c68:	ab01      	add	r3, sp, #4
 8025c6a:	2140      	movs	r1, #64	@ 0x40
 8025c6c:	a802      	add	r0, sp, #8
 8025c6e:	f7fd fe33 	bl	80238d8 <mg_vsnprintf>
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8025c72:	4b11      	ldr	r3, [pc, #68]	@ (8025cb8 <mg_error+0x60>)
 8025c74:	681b      	ldr	r3, [r3, #0]
 8025c76:	2b00      	cmp	r3, #0
 8025c78:	dc0f      	bgt.n	8025c9a <mg_error+0x42>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8025c7a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8025c7e:	f043 0320 	orr.w	r3, r3, #32
 8025c82:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8025c86:	aa02      	add	r2, sp, #8
 8025c88:	2100      	movs	r1, #0
 8025c8a:	4620      	mov	r0, r4
 8025c8c:	f7fc fb9c 	bl	80223c8 <mg_call>
}
 8025c90:	b013      	add	sp, #76	@ 0x4c
 8025c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025c96:	b003      	add	sp, #12
 8025c98:	4770      	bx	lr
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8025c9a:	4b08      	ldr	r3, [pc, #32]	@ (8025cbc <mg_error+0x64>)
 8025c9c:	f240 5253 	movw	r2, #1363	@ 0x553
 8025ca0:	4907      	ldr	r1, [pc, #28]	@ (8025cc0 <mg_error+0x68>)
 8025ca2:	2001      	movs	r0, #1
 8025ca4:	f7ff fef0 	bl	8025a88 <mg_log_prefix>
 8025ca8:	ab02      	add	r3, sp, #8
 8025caa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8025cac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025cae:	4805      	ldr	r0, [pc, #20]	@ (8025cc4 <mg_error+0x6c>)
 8025cb0:	f7fd fdd4 	bl	802385c <mg_log>
 8025cb4:	e7e1      	b.n	8025c7a <mg_error+0x22>
 8025cb6:	bf00      	nop
 8025cb8:	2000012c 	.word	0x2000012c
 8025cbc:	0803aaa4 	.word	0x0803aaa4
 8025cc0:	0803a050 	.word	0x0803a050
 8025cc4:	0803a0ac 	.word	0x0803a0ac

08025cc8 <handle_tls_recv>:
static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 8025cc8:	b570      	push	{r4, r5, r6, lr}
 8025cca:	b082      	sub	sp, #8
 8025ccc:	4606      	mov	r6, r0
 8025cce:	460c      	mov	r4, r1
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 8025cd0:	6809      	ldr	r1, [r1, #0]
 8025cd2:	68a5      	ldr	r5, [r4, #8]
 8025cd4:	6862      	ldr	r2, [r4, #4]
 8025cd6:	1b52      	subs	r2, r2, r5
 8025cd8:	4429      	add	r1, r5
 8025cda:	f7ff fa07 	bl	80250ec <mg_tls_recv>
 8025cde:	9001      	str	r0, [sp, #4]
  if (n == MG_IO_ERR) {
 8025ce0:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8025ce4:	d003      	beq.n	8025cee <handle_tls_recv+0x26>
  } else if (n > 0) {
 8025ce6:	2800      	cmp	r0, #0
 8025ce8:	dc06      	bgt.n	8025cf8 <handle_tls_recv+0x30>
}
 8025cea:	b002      	add	sp, #8
 8025cec:	bd70      	pop	{r4, r5, r6, pc}
    mg_error(c, "TLS recv error");
 8025cee:	4906      	ldr	r1, [pc, #24]	@ (8025d08 <handle_tls_recv+0x40>)
 8025cf0:	4630      	mov	r0, r6
 8025cf2:	f7ff ffb1 	bl	8025c58 <mg_error>
 8025cf6:	e7f8      	b.n	8025cea <handle_tls_recv+0x22>
    io->len += (size_t) n;
 8025cf8:	4405      	add	r5, r0
 8025cfa:	60a5      	str	r5, [r4, #8]
    mg_call(c, MG_EV_READ, &n);
 8025cfc:	aa01      	add	r2, sp, #4
 8025cfe:	2107      	movs	r1, #7
 8025d00:	4630      	mov	r0, r6
 8025d02:	f7fc fb61 	bl	80223c8 <mg_call>
}
 8025d06:	e7f0      	b.n	8025cea <handle_tls_recv+0x22>
 8025d08:	0803a0b8 	.word	0x0803a0b8

08025d0c <http_cb>:
static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 8025d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d10:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8025d14:	4607      	mov	r7, r0
 8025d16:	468a      	mov	sl, r1
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 8025d18:	2907      	cmp	r1, #7
 8025d1a:	f000 80e3 	beq.w	8025ee4 <http_cb+0x1d8>
 8025d1e:	2909      	cmp	r1, #9
 8025d20:	f000 814a 	beq.w	8025fb8 <http_cb+0x2ac>
 8025d24:	2902      	cmp	r1, #2
 8025d26:	f040 80d9 	bne.w	8025edc <http_cb+0x1d0>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8025d2a:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 8025d2e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8025d32:	f023 030b 	bic.w	r3, r3, #11
 8025d36:	04db      	lsls	r3, r3, #19
 8025d38:	0cdb      	lsrs	r3, r3, #19
 8025d3a:	2b04      	cmp	r3, #4
 8025d3c:	f040 80ce 	bne.w	8025edc <http_cb+0x1d0>
       c->recv.len > 0)) {  // see #2796
 8025d40:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8025d42:	2b00      	cmp	r3, #0
 8025d44:	f000 80ca 	beq.w	8025edc <http_cb+0x1d0>
 8025d48:	f04f 0900 	mov.w	r9, #0
 8025d4c:	e0cc      	b.n	8025ee8 <http_cb+0x1dc>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8025d4e:	4b9f      	ldr	r3, [pc, #636]	@ (8025fcc <http_cb+0x2c0>)
 8025d50:	681b      	ldr	r3, [r3, #0]
 8025d52:	2b00      	cmp	r3, #0
 8025d54:	dc11      	bgt.n	8025d7a <http_cb+0x6e>
        c->is_draining = 1;
 8025d56:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8025d5a:	f043 0310 	orr.w	r3, r3, #16
 8025d5e:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 8025d62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025d64:	eba3 0109 	sub.w	r1, r3, r9
 8025d68:	2910      	cmp	r1, #16
 8025d6a:	bf28      	it	cs
 8025d6c:	2110      	movcs	r1, #16
 8025d6e:	4620      	mov	r0, r4
 8025d70:	f7fc fed4 	bl	8022b1c <mg_hexdump>
        c->recv.len = 0;
 8025d74:	2300      	movs	r3, #0
 8025d76:	643b      	str	r3, [r7, #64]	@ 0x40
        return;
 8025d78:	e0b0      	b.n	8025edc <http_cb+0x1d0>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8025d7a:	4b95      	ldr	r3, [pc, #596]	@ (8025fd0 <http_cb+0x2c4>)
 8025d7c:	f640 42a3 	movw	r2, #3235	@ 0xca3
 8025d80:	4994      	ldr	r1, [pc, #592]	@ (8025fd4 <http_cb+0x2c8>)
 8025d82:	2001      	movs	r0, #1
 8025d84:	f7ff fe80 	bl	8025a88 <mg_log_prefix>
 8025d88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8025d8a:	4893      	ldr	r0, [pc, #588]	@ (8025fd8 <http_cb+0x2cc>)
 8025d8c:	f7fd fd66 	bl	802385c <mg_log>
 8025d90:	e7e1      	b.n	8025d56 <http_cb+0x4a>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 8025d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025d94:	eba3 0309 	sub.w	r3, r3, r9
 8025d98:	9387      	str	r3, [sp, #540]	@ 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 8025d9a:	9a82      	ldr	r2, [sp, #520]	@ 0x208
 8025d9c:	9986      	ldr	r1, [sp, #536]	@ 0x218
 8025d9e:	1a52      	subs	r2, r2, r1
 8025da0:	1a9b      	subs	r3, r3, r2
 8025da2:	9383      	str	r3, [sp, #524]	@ 0x20c
 8025da4:	e0bf      	b.n	8025f26 <http_cb+0x21a>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8025da6:	ad88      	add	r5, sp, #544	@ 0x220
 8025da8:	498c      	ldr	r1, [pc, #560]	@ (8025fdc <http_cb+0x2d0>)
 8025daa:	4628      	mov	r0, r5
 8025dac:	f7fd ff34 	bl	8023c18 <mg_str_s>
 8025db0:	e895 000c 	ldmia.w	r5, {r2, r3}
 8025db4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025db8:	f7fe f829 	bl	8023e0e <mg_strcasecmp>
 8025dbc:	4604      	mov	r4, r0
 8025dbe:	b950      	cbnz	r0, 8025dd6 <http_cb+0xca>
        char *s = (char *) c->recv.buf + ofs + n;
 8025dc0:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8025dc2:	eb08 0309 	add.w	r3, r8, r9
 8025dc6:	441d      	add	r5, r3
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8025dc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025dca:	eba3 0309 	sub.w	r3, r3, r9
 8025dce:	eba3 0b08 	sub.w	fp, r3, r8
 8025dd2:	4606      	mov	r6, r0
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8025dd4:	e04a      	b.n	8025e6c <http_cb+0x160>
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 8025dd6:	4982      	ldr	r1, [pc, #520]	@ (8025fe0 <http_cb+0x2d4>)
 8025dd8:	4638      	mov	r0, r7
 8025dda:	f7ff ff3d 	bl	8025c58 <mg_error>
          return;
 8025dde:	e07d      	b.n	8025edc <http_cb+0x1d0>
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 8025de0:	2205      	movs	r2, #5
 8025de2:	4980      	ldr	r1, [pc, #512]	@ (8025fe4 <http_cb+0x2d8>)
 8025de4:	9802      	ldr	r0, [sp, #8]
 8025de6:	f7f9 fcad 	bl	801f744 <mg_ncasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8025dea:	2800      	cmp	r0, #0
 8025dec:	d032      	beq.n	8025e54 <http_cb+0x148>
 8025dee:	ac8a      	add	r4, sp, #552	@ 0x228
 8025df0:	497d      	ldr	r1, [pc, #500]	@ (8025fe8 <http_cb+0x2dc>)
 8025df2:	4620      	mov	r0, r4
 8025df4:	f7fd ff10 	bl	8023c18 <mg_str_s>
 8025df8:	a902      	add	r1, sp, #8
 8025dfa:	e894 000c 	ldmia.w	r4, {r2, r3}
 8025dfe:	c903      	ldmia	r1, {r0, r1}
 8025e00:	f7fe f805 	bl	8023e0e <mg_strcasecmp>
 8025e04:	b9c0      	cbnz	r0, 8025e38 <http_cb+0x12c>
          ofs += (size_t) n;  // this request has been processed
 8025e06:	44c1      	add	r9, r8
          mg_http_reply(c, 411, "", "");
 8025e08:	4a78      	ldr	r2, [pc, #480]	@ (8025fec <http_cb+0x2e0>)
 8025e0a:	4613      	mov	r3, r2
 8025e0c:	f240 119b 	movw	r1, #411	@ 0x19b
 8025e10:	4638      	mov	r0, r7
 8025e12:	f7fd fd77 	bl	8023904 <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 8025e16:	4b6d      	ldr	r3, [pc, #436]	@ (8025fcc <http_cb+0x2c0>)
 8025e18:	681b      	ldr	r3, [r3, #0]
 8025e1a:	2b00      	cmp	r3, #0
 8025e1c:	f340 8092 	ble.w	8025f44 <http_cb+0x238>
 8025e20:	4b6b      	ldr	r3, [pc, #428]	@ (8025fd0 <http_cb+0x2c4>)
 8025e22:	f640 42ca 	movw	r2, #3274	@ 0xcca
 8025e26:	496b      	ldr	r1, [pc, #428]	@ (8025fd4 <http_cb+0x2c8>)
 8025e28:	2001      	movs	r0, #1
 8025e2a:	f7ff fe2d 	bl	8025a88 <mg_log_prefix>
 8025e2e:	4970      	ldr	r1, [pc, #448]	@ (8025ff0 <http_cb+0x2e4>)
 8025e30:	4870      	ldr	r0, [pc, #448]	@ (8025ff4 <http_cb+0x2e8>)
 8025e32:	f7fd fd13 	bl	802385c <mg_log>
      if (is_chunked) {
 8025e36:	e085      	b.n	8025f44 <http_cb+0x238>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8025e38:	ac8c      	add	r4, sp, #560	@ 0x230
 8025e3a:	496f      	ldr	r1, [pc, #444]	@ (8025ff8 <http_cb+0x2ec>)
 8025e3c:	4620      	mov	r0, r4
 8025e3e:	f7fd feeb 	bl	8023c18 <mg_str_s>
 8025e42:	a902      	add	r1, sp, #8
 8025e44:	e894 000c 	ldmia.w	r4, {r2, r3}
 8025e48:	c903      	ldmia	r1, {r0, r1}
 8025e4a:	f7fd ffe0 	bl	8023e0e <mg_strcasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8025e4e:	2800      	cmp	r0, #0
 8025e50:	d178      	bne.n	8025f44 <http_cb+0x238>
 8025e52:	e7d8      	b.n	8025e06 <http_cb+0xfa>
          int status = mg_http_status(&hm);
 8025e54:	a802      	add	r0, sp, #8
 8025e56:	f7fc fba9 	bl	80225ac <mg_http_status>
          require_content_len = status >= 200 && status != 204 && status != 304;
 8025e5a:	28c7      	cmp	r0, #199	@ 0xc7
 8025e5c:	dd72      	ble.n	8025f44 <http_cb+0x238>
 8025e5e:	28cc      	cmp	r0, #204	@ 0xcc
 8025e60:	d070      	beq.n	8025f44 <http_cb+0x238>
 8025e62:	f5b0 7f98 	cmp.w	r0, #304	@ 0x130
 8025e66:	d1cf      	bne.n	8025e08 <http_cb+0xfc>
 8025e68:	e06c      	b.n	8025f44 <http_cb+0x238>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8025e6a:	4406      	add	r6, r0
 8025e6c:	ab01      	add	r3, sp, #4
 8025e6e:	466a      	mov	r2, sp
 8025e70:	ebab 0106 	sub.w	r1, fp, r6
 8025e74:	19a8      	adds	r0, r5, r6
 8025e76:	f7fe ff09 	bl	8024c8c <skip_chunk>
 8025e7a:	2800      	cmp	r0, #0
 8025e7c:	dd02      	ble.n	8025e84 <http_cb+0x178>
 8025e7e:	9b01      	ldr	r3, [sp, #4]
 8025e80:	2b00      	cmp	r3, #0
 8025e82:	d1f2      	bne.n	8025e6a <http_cb+0x15e>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8025e84:	b338      	cbz	r0, 8025ed6 <http_cb+0x1ca>
        if (cl < 0) {
 8025e86:	2800      	cmp	r0, #0
 8025e88:	db21      	blt.n	8025ece <http_cb+0x1c2>
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 8025e8a:	2300      	movs	r3, #0
 8025e8c:	9383      	str	r3, [sp, #524]	@ 0x20c
 8025e8e:	f8cd 821c 	str.w	r8, [sp, #540]	@ 0x21c
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8025e92:	ab01      	add	r3, sp, #4
 8025e94:	466a      	mov	r2, sp
 8025e96:	ebab 0104 	sub.w	r1, fp, r4
 8025e9a:	1928      	adds	r0, r5, r4
 8025e9c:	f7fe fef6 	bl	8024c8c <skip_chunk>
 8025ea0:	1e06      	subs	r6, r0, #0
 8025ea2:	dd11      	ble.n	8025ec8 <http_cb+0x1bc>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8025ea4:	9883      	ldr	r0, [sp, #524]	@ 0x20c
 8025ea6:	9900      	ldr	r1, [sp, #0]
 8025ea8:	4421      	add	r1, r4
 8025eaa:	9a01      	ldr	r2, [sp, #4]
 8025eac:	4429      	add	r1, r5
 8025eae:	4428      	add	r0, r5
 8025eb0:	f006 f9cc 	bl	802c24c <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8025eb4:	4434      	add	r4, r6
 8025eb6:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 8025eb8:	9b01      	ldr	r3, [sp, #4]
 8025eba:	441a      	add	r2, r3
 8025ebc:	9283      	str	r2, [sp, #524]	@ 0x20c
 8025ebe:	9a87      	ldr	r2, [sp, #540]	@ 0x21c
 8025ec0:	441a      	add	r2, r3
 8025ec2:	9287      	str	r2, [sp, #540]	@ 0x21c
          if (dl == 0) break;
 8025ec4:	2b00      	cmp	r3, #0
 8025ec6:	d1e4      	bne.n	8025e92 <http_cb+0x186>
        ofs += (size_t) (n + o);
 8025ec8:	4444      	add	r4, r8
 8025eca:	44a1      	add	r9, r4
 8025ecc:	e044      	b.n	8025f58 <http_cb+0x24c>
          mg_error(c, "Invalid chunk");
 8025ece:	494b      	ldr	r1, [pc, #300]	@ (8025ffc <http_cb+0x2f0>)
 8025ed0:	4638      	mov	r0, r7
 8025ed2:	f7ff fec1 	bl	8025c58 <mg_error>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8025ed6:	f1b9 0f00 	cmp.w	r9, #0
 8025eda:	d170      	bne.n	8025fbe <http_cb+0x2b2>
}
 8025edc:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 8025ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ee4:	f04f 0900 	mov.w	r9, #0
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8025ee8:	f997 30ad 	ldrsb.w	r3, [r7, #173]	@ 0xad
 8025eec:	2b00      	cmp	r3, #0
 8025eee:	dbf2      	blt.n	8025ed6 <http_cb+0x1ca>
 8025ef0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8025ef2:	4549      	cmp	r1, r9
 8025ef4:	d9ef      	bls.n	8025ed6 <http_cb+0x1ca>
      const char *buf = (char *) c->recv.buf + ofs;
 8025ef6:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8025ef8:	444c      	add	r4, r9
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 8025efa:	aa02      	add	r2, sp, #8
 8025efc:	eba1 0109 	sub.w	r1, r1, r9
 8025f00:	4620      	mov	r0, r4
 8025f02:	f7fd ffb3 	bl	8023e6c <mg_http_parse>
      if (n < 0) {
 8025f06:	f1b0 0800 	subs.w	r8, r0, #0
 8025f0a:	f6ff af20 	blt.w	8025d4e <http_cb+0x42>
      if (n == 0) break;                 // Request is not buffered yet
 8025f0e:	f1b8 0f00 	cmp.w	r8, #0
 8025f12:	d0e0      	beq.n	8025ed6 <http_cb+0x1ca>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 8025f14:	aa02      	add	r2, sp, #8
 8025f16:	210a      	movs	r1, #10
 8025f18:	4638      	mov	r0, r7
 8025f1a:	f7fc fa55 	bl	80223c8 <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 8025f1e:	f1ba 0f09 	cmp.w	sl, #9
 8025f22:	f43f af36 	beq.w	8025d92 <http_cb+0x86>
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8025f26:	4936      	ldr	r1, [pc, #216]	@ (8026000 <http_cb+0x2f4>)
 8025f28:	a802      	add	r0, sp, #8
 8025f2a:	f7fc fb15 	bl	8022558 <mg_http_get_header>
 8025f2e:	4604      	mov	r4, r0
 8025f30:	2800      	cmp	r0, #0
 8025f32:	f47f af38 	bne.w	8025da6 <http_cb+0x9a>
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 8025f36:	4933      	ldr	r1, [pc, #204]	@ (8026004 <http_cb+0x2f8>)
 8025f38:	a802      	add	r0, sp, #8
 8025f3a:	f7fc fb0d 	bl	8022558 <mg_http_get_header>
 8025f3e:	2800      	cmp	r0, #0
 8025f40:	f43f af4e 	beq.w	8025de0 <http_cb+0xd4>
        size_t len = c->recv.len - ofs - (size_t) n;
 8025f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025f46:	eba3 0309 	sub.w	r3, r3, r9
 8025f4a:	eba3 0308 	sub.w	r3, r3, r8
        if (hm.body.len > len) break;  // Buffer more data
 8025f4e:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 8025f50:	429a      	cmp	r2, r3
 8025f52:	d8c0      	bhi.n	8025ed6 <http_cb+0x1ca>
        ofs += (size_t) n + hm.body.len;
 8025f54:	4490      	add	r8, r2
 8025f56:	44c1      	add	r9, r8
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8025f58:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8025f5c:	f013 0f04 	tst.w	r3, #4
 8025f60:	d005      	beq.n	8025f6e <http_cb+0x262>
 8025f62:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8025f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8025f6a:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 8025f6e:	aa02      	add	r2, sp, #8
 8025f70:	210b      	movs	r1, #11
 8025f72:	4638      	mov	r0, r7
 8025f74:	f7fc fa28 	bl	80223c8 <mg_call>
      if (c->is_accepted) {
 8025f78:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8025f7c:	f013 0f04 	tst.w	r3, #4
 8025f80:	d0b2      	beq.n	8025ee8 <http_cb+0x1dc>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 8025f82:	4921      	ldr	r1, [pc, #132]	@ (8026008 <http_cb+0x2fc>)
 8025f84:	a802      	add	r0, sp, #8
 8025f86:	f7fc fae7 	bl	8022558 <mg_http_get_header>
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 8025f8a:	4605      	mov	r5, r0
 8025f8c:	2800      	cmp	r0, #0
 8025f8e:	d0ab      	beq.n	8025ee8 <http_cb+0x1dc>
 8025f90:	ac8e      	add	r4, sp, #568	@ 0x238
 8025f92:	491e      	ldr	r1, [pc, #120]	@ (802600c <http_cb+0x300>)
 8025f94:	4620      	mov	r0, r4
 8025f96:	f7fd fe3f 	bl	8023c18 <mg_str_s>
 8025f9a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8025f9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025fa2:	f7fd ff34 	bl	8023e0e <mg_strcasecmp>
 8025fa6:	2800      	cmp	r0, #0
 8025fa8:	d19e      	bne.n	8025ee8 <http_cb+0x1dc>
          c->is_draining = 1;  // honor "Connection: close"
 8025faa:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8025fae:	f043 0310 	orr.w	r3, r3, #16
 8025fb2:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
          break;
 8025fb6:	e78e      	b.n	8025ed6 <http_cb+0x1ca>
 8025fb8:	f04f 0900 	mov.w	r9, #0
 8025fbc:	e794      	b.n	8025ee8 <http_cb+0x1dc>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8025fbe:	464a      	mov	r2, r9
 8025fc0:	2100      	movs	r1, #0
 8025fc2:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8025fc6:	f7ff f964 	bl	8025292 <mg_iobuf_del>
 8025fca:	e787      	b.n	8025edc <http_cb+0x1d0>
 8025fcc:	2000012c 	.word	0x2000012c
 8025fd0:	0803aa9c 	.word	0x0803aa9c
 8025fd4:	0803a050 	.word	0x0803a050
 8025fd8:	0803a0c8 	.word	0x0803a0c8
 8025fdc:	0803a0e0 	.word	0x0803a0e0
 8025fe0:	0803a0e8 	.word	0x0803a0e8
 8025fe4:	08039848 	.word	0x08039848
 8025fe8:	08035e1c 	.word	0x08035e1c
 8025fec:	08036364 	.word	0x08036364
 8025ff0:	0803a114 	.word	0x0803a114
 8025ff4:	0803a368 	.word	0x0803a368
 8025ff8:	080369e0 	.word	0x080369e0
 8025ffc:	0803a138 	.word	0x0803a138
 8026000:	0803a0f0 	.word	0x0803a0f0
 8026004:	0803a104 	.word	0x0803a104
 8026008:	0803a148 	.word	0x0803a148
 802600c:	0803a154 	.word	0x0803a154

08026010 <uri_to_path2>:
                        char *path, size_t path_size) {
 8026010:	b082      	sub	sp, #8
 8026012:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026016:	b086      	sub	sp, #24
 8026018:	4681      	mov	r9, r0
 802601a:	460e      	mov	r6, r1
 802601c:	4690      	mov	r8, r2
 802601e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026020:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8026022:	9f14      	ldr	r7, [sp, #80]	@ 0x50
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8026024:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026026:	9300      	str	r3, [sp, #0]
 8026028:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802602a:	4a6f      	ldr	r2, [pc, #444]	@ (80261e8 <uri_to_path2+0x1d8>)
 802602c:	4639      	mov	r1, r7
 802602e:	4628      	mov	r0, r5
 8026030:	f7fc ff68 	bl	8022f04 <mg_snprintf>
  if (n + 2 >= path_size) {
 8026034:	1c83      	adds	r3, r0, #2
 8026036:	42bb      	cmp	r3, r7
 8026038:	d227      	bcs.n	802608a <uri_to_path2+0x7a>
  path[path_size - 1] = '\0';
 802603a:	f107 3aff 	add.w	sl, r7, #4294967295	@ 0xffffffff
 802603e:	2300      	movs	r3, #0
 8026040:	f805 300a 	strb.w	r3, [r5, sl]
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8026044:	b150      	cbz	r0, 802605c <uri_to_path2+0x4c>
 8026046:	182b      	adds	r3, r5, r0
 8026048:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802604c:	2b2f      	cmp	r3, #47	@ 0x2f
 802604e:	d005      	beq.n	802605c <uri_to_path2+0x4c>
 8026050:	1c43      	adds	r3, r0, #1
 8026052:	222f      	movs	r2, #47	@ 0x2f
 8026054:	542a      	strb	r2, [r5, r0]
 8026056:	2200      	movs	r2, #0
 8026058:	54ea      	strb	r2, [r5, r3]
 802605a:	4618      	mov	r0, r3
  if (url.len < hm->uri.len) {
 802605c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802605e:	68f1      	ldr	r1, [r6, #12]
 8026060:	428c      	cmp	r4, r1
 8026062:	d31c      	bcc.n	802609e <uri_to_path2+0x8e>
  path[path_size - 1] = '\0';  // Double-check
 8026064:	2300      	movs	r3, #0
 8026066:	f805 300a 	strb.w	r3, [r5, sl]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 802606a:	ac02      	add	r4, sp, #8
 802606c:	463a      	mov	r2, r7
 802606e:	4629      	mov	r1, r5
 8026070:	4620      	mov	r0, r4
 8026072:	f7fd fddd 	bl	8023c30 <mg_str_n>
 8026076:	e894 0003 	ldmia.w	r4, {r0, r1}
 802607a:	f7ff fcdb 	bl	8025a34 <mg_path_is_sane>
 802607e:	b1c0      	cbz	r0, 80260b2 <uri_to_path2+0xa2>
  n = strlen(path);
 8026080:	4628      	mov	r0, r5
 8026082:	f7ea f90d 	bl	80102a0 <strlen>
 8026086:	4604      	mov	r4, r0
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8026088:	e020      	b.n	80260cc <uri_to_path2+0xbc>
    mg_http_reply(c, 400, "", "Exceeded path size");
 802608a:	4b58      	ldr	r3, [pc, #352]	@ (80261ec <uri_to_path2+0x1dc>)
 802608c:	4a58      	ldr	r2, [pc, #352]	@ (80261f0 <uri_to_path2+0x1e0>)
 802608e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026092:	4648      	mov	r0, r9
 8026094:	f7fd fc36 	bl	8023904 <mg_http_reply>
    return -1;
 8026098:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802609c:	e046      	b.n	802612c <uri_to_path2+0x11c>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 802609e:	2300      	movs	r3, #0
 80260a0:	9300      	str	r3, [sp, #0]
 80260a2:	1a3b      	subs	r3, r7, r0
 80260a4:	182a      	adds	r2, r5, r0
 80260a6:	1b09      	subs	r1, r1, r4
 80260a8:	68b0      	ldr	r0, [r6, #8]
 80260aa:	4420      	add	r0, r4
 80260ac:	f7fe fc42 	bl	8024934 <mg_url_decode>
 80260b0:	e7d8      	b.n	8026064 <uri_to_path2+0x54>
    mg_http_reply(c, 400, "", "Invalid path");
 80260b2:	4b50      	ldr	r3, [pc, #320]	@ (80261f4 <uri_to_path2+0x1e4>)
 80260b4:	4a4e      	ldr	r2, [pc, #312]	@ (80261f0 <uri_to_path2+0x1e0>)
 80260b6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80260ba:	4648      	mov	r0, r9
 80260bc:	f7fd fc22 	bl	8023904 <mg_http_reply>
    return -1;
 80260c0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80260c4:	e032      	b.n	802612c <uri_to_path2+0x11c>
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 80260c6:	2200      	movs	r2, #0
 80260c8:	54ea      	strb	r2, [r5, r3]
 80260ca:	461c      	mov	r4, r3
 80260cc:	2c01      	cmp	r4, #1
 80260ce:	d905      	bls.n	80260dc <uri_to_path2+0xcc>
 80260d0:	1e63      	subs	r3, r4, #1
 80260d2:	f815 c003 	ldrb.w	ip, [r5, r3]
 80260d6:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 80260da:	d0f4      	beq.n	80260c6 <uri_to_path2+0xb6>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 80260dc:	f10d 0a10 	add.w	sl, sp, #16
 80260e0:	4945      	ldr	r1, [pc, #276]	@ (80261f8 <uri_to_path2+0x1e8>)
 80260e2:	4650      	mov	r0, sl
 80260e4:	f7fd fd98 	bl	8023c18 <mg_str_s>
 80260e8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80260ec:	f106 0108 	add.w	r1, r6, #8
 80260f0:	c903      	ldmia	r1, {r0, r1}
 80260f2:	f7fd fe62 	bl	8023dba <mg_strcmp>
                                               : fs->st(path, NULL, NULL);
 80260f6:	b1f8      	cbz	r0, 8026138 <uri_to_path2+0x128>
 80260f8:	f8d8 3000 	ldr.w	r3, [r8]
 80260fc:	2200      	movs	r2, #0
 80260fe:	4611      	mov	r1, r2
 8026100:	4628      	mov	r0, r5
 8026102:	4798      	blx	r3
 8026104:	4682      	mov	sl, r0
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8026106:	4b3d      	ldr	r3, [pc, #244]	@ (80261fc <uri_to_path2+0x1ec>)
 8026108:	681b      	ldr	r3, [r3, #0]
 802610a:	2b03      	cmp	r3, #3
 802610c:	dc17      	bgt.n	802613e <uri_to_path2+0x12e>
  if (flags == 0) {
 802610e:	f1ba 0f00 	cmp.w	sl, #0
 8026112:	d00b      	beq.n	802612c <uri_to_path2+0x11c>
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8026114:	f01a 0104 	ands.w	r1, sl, #4
 8026118:	d007      	beq.n	802612a <uri_to_path2+0x11a>
 802611a:	68f2      	ldr	r2, [r6, #12]
 802611c:	b12a      	cbz	r2, 802612a <uri_to_path2+0x11a>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 802611e:	68b3      	ldr	r3, [r6, #8]
 8026120:	1898      	adds	r0, r3, r2
 8026122:	f810 0c01 	ldrb.w	r0, [r0, #-1]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8026126:	282f      	cmp	r0, #47	@ 0x2f
 8026128:	d11b      	bne.n	8026162 <uri_to_path2+0x152>
  } else if (flags & MG_FS_DIR) {
 802612a:	bb39      	cbnz	r1, 802617c <uri_to_path2+0x16c>
}
 802612c:	4650      	mov	r0, sl
 802612e:	b006      	add	sp, #24
 8026130:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026134:	b002      	add	sp, #8
 8026136:	4770      	bx	lr
                                               : fs->st(path, NULL, NULL);
 8026138:	f04f 0a04 	mov.w	sl, #4
 802613c:	e7e3      	b.n	8026106 <uri_to_path2+0xf6>
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 802613e:	4b30      	ldr	r3, [pc, #192]	@ (8026200 <uri_to_path2+0x1f0>)
 8026140:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 8026144:	492f      	ldr	r1, [pc, #188]	@ (8026204 <uri_to_path2+0x1f4>)
 8026146:	2004      	movs	r0, #4
 8026148:	f7ff fc9e 	bl	8025a88 <mg_log_prefix>
 802614c:	f8cd a004 	str.w	sl, [sp, #4]
 8026150:	9500      	str	r5, [sp, #0]
 8026152:	68b3      	ldr	r3, [r6, #8]
 8026154:	68f2      	ldr	r2, [r6, #12]
 8026156:	f8d9 1034 	ldr.w	r1, [r9, #52]	@ 0x34
 802615a:	482b      	ldr	r0, [pc, #172]	@ (8026208 <uri_to_path2+0x1f8>)
 802615c:	f7fd fb7e 	bl	802385c <mg_log>
 8026160:	e7d5      	b.n	802610e <uri_to_path2+0xfe>
    mg_printf(c,
 8026162:	492a      	ldr	r1, [pc, #168]	@ (802620c <uri_to_path2+0x1fc>)
 8026164:	4648      	mov	r0, r9
 8026166:	f7fd fba7 	bl	80238b8 <mg_printf>
    c->is_resp = 0;
 802616a:	f899 30ad 	ldrb.w	r3, [r9, #173]	@ 0xad
 802616e:	f36f 13c7 	bfc	r3, #7, #1
 8026172:	f889 30ad 	strb.w	r3, [r9, #173]	@ 0xad
    flags = -1;
 8026176:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802617a:	e7d7      	b.n	802612c <uri_to_path2+0x11c>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 802617c:	192e      	adds	r6, r5, r4
 802617e:	1b3f      	subs	r7, r7, r4
 8026180:	4a23      	ldr	r2, [pc, #140]	@ (8026210 <uri_to_path2+0x200>)
 8026182:	4639      	mov	r1, r7
 8026184:	4630      	mov	r0, r6
 8026186:	f7fc febd 	bl	8022f04 <mg_snprintf>
 802618a:	b130      	cbz	r0, 802619a <uri_to_path2+0x18a>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 802618c:	f8d8 3000 	ldr.w	r3, [r8]
 8026190:	2200      	movs	r2, #0
 8026192:	4611      	mov	r1, r2
 8026194:	4628      	mov	r0, r5
 8026196:	4798      	blx	r3
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8026198:	bb08      	cbnz	r0, 80261de <uri_to_path2+0x1ce>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 802619a:	4a1e      	ldr	r2, [pc, #120]	@ (8026214 <uri_to_path2+0x204>)
 802619c:	4639      	mov	r1, r7
 802619e:	4630      	mov	r0, r6
 80261a0:	f7fc feb0 	bl	8022f04 <mg_snprintf>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80261a4:	b130      	cbz	r0, 80261b4 <uri_to_path2+0x1a4>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 80261a6:	f8d8 3000 	ldr.w	r3, [r8]
 80261aa:	2200      	movs	r2, #0
 80261ac:	4611      	mov	r1, r2
 80261ae:	4628      	mov	r0, r5
 80261b0:	4798      	blx	r3
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 80261b2:	b9b0      	cbnz	r0, 80261e2 <uri_to_path2+0x1d2>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 80261b4:	4a18      	ldr	r2, [pc, #96]	@ (8026218 <uri_to_path2+0x208>)
 80261b6:	4639      	mov	r1, r7
 80261b8:	4630      	mov	r0, r6
 80261ba:	f7fc fea3 	bl	8022f04 <mg_snprintf>
 80261be:	b158      	cbz	r0, 80261d8 <uri_to_path2+0x1c8>
                (tmp = fs->st(path, NULL, NULL)) !=
 80261c0:	f8d8 3000 	ldr.w	r3, [r8]
 80261c4:	2200      	movs	r2, #0
 80261c6:	4611      	mov	r1, r2
 80261c8:	4628      	mov	r0, r5
 80261ca:	4798      	blx	r3
                    0 &&
 80261cc:	b120      	cbz	r0, 80261d8 <uri_to_path2+0x1c8>
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 80261ce:	340b      	adds	r4, #11
 80261d0:	2200      	movs	r2, #0
 80261d2:	552a      	strb	r2, [r5, r4]
      flags = tmp;
 80261d4:	4682      	mov	sl, r0
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 80261d6:	e7a9      	b.n	802612c <uri_to_path2+0x11c>
      path[n] = '\0';  // Remove appended index file name
 80261d8:	2300      	movs	r3, #0
 80261da:	7033      	strb	r3, [r6, #0]
 80261dc:	e7a6      	b.n	802612c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80261de:	4682      	mov	sl, r0
 80261e0:	e7a4      	b.n	802612c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 80261e2:	4682      	mov	sl, r0
 80261e4:	e7a2      	b.n	802612c <uri_to_path2+0x11c>
 80261e6:	bf00      	nop
 80261e8:	080397a0 	.word	0x080397a0
 80261ec:	0803a15c 	.word	0x0803a15c
 80261f0:	08036364 	.word	0x08036364
 80261f4:	0803a170 	.word	0x0803a170
 80261f8:	0803984c 	.word	0x0803984c
 80261fc:	2000012c 	.word	0x2000012c
 8026200:	0803aa8c 	.word	0x0803aa8c
 8026204:	0803a050 	.word	0x0803a050
 8026208:	0803a180 	.word	0x0803a180
 802620c:	0803a194 	.word	0x0803a194
 8026210:	0803a1d0 	.word	0x0803a1d0
 8026214:	0803a1dc 	.word	0x0803a1dc
 8026218:	0803a1ec 	.word	0x0803a1ec

0802621c <uri_to_path>:
                       size_t path_size) {
 802621c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026220:	b096      	sub	sp, #88	@ 0x58
 8026222:	4606      	mov	r6, r0
 8026224:	460d      	mov	r5, r1
 8026226:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8026228:	f8d2 8014 	ldr.w	r8, [r2, #20]
 802622c:	f1b8 0f00 	cmp.w	r8, #0
 8026230:	d069      	beq.n	8026306 <uri_to_path+0xea>
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 8026232:	6811      	ldr	r1, [r2, #0]
 8026234:	a80c      	add	r0, sp, #48	@ 0x30
 8026236:	f7fd fcef 	bl	8023c18 <mg_str_s>
 802623a:	2300      	movs	r3, #0
 802623c:	930a      	str	r3, [sp, #40]	@ 0x28
 802623e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026240:	ab08      	add	r3, sp, #32
 8026242:	aa0a      	add	r2, sp, #40	@ 0x28
 8026244:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026248:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 802624c:	ab0c      	add	r3, sp, #48	@ 0x30
 802624e:	222c      	movs	r2, #44	@ 0x2c
 8026250:	9200      	str	r2, [sp, #0]
 8026252:	aa0e      	add	r2, sp, #56	@ 0x38
 8026254:	e893 0003 	ldmia.w	r3, {r0, r1}
 8026258:	f7fd ff9b 	bl	8024192 <mg_span>
 802625c:	2800      	cmp	r0, #0
 802625e:	d055      	beq.n	802630c <uri_to_path+0xf0>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 8026260:	233d      	movs	r3, #61	@ 0x3d
 8026262:	9300      	str	r3, [sp, #0]
 8026264:	ab10      	add	r3, sp, #64	@ 0x40
 8026266:	aa12      	add	r2, sp, #72	@ 0x48
 8026268:	ac0e      	add	r4, sp, #56	@ 0x38
 802626a:	e894 0003 	ldmia.w	r4, {r0, r1}
 802626e:	f7fd ff90 	bl	8024192 <mg_span>
 8026272:	b978      	cbnz	r0, 8026294 <uri_to_path+0x78>
 8026274:	ab12      	add	r3, sp, #72	@ 0x48
 8026276:	e9d4 0100 	ldrd	r0, r1, [r4]
 802627a:	e883 0003 	stmia.w	r3, {r0, r1}
 802627e:	ac06      	add	r4, sp, #24
 8026280:	2200      	movs	r2, #0
 8026282:	4611      	mov	r1, r2
 8026284:	4620      	mov	r0, r4
 8026286:	f7fd fcd3 	bl	8023c30 <mg_str_n>
 802628a:	ab10      	add	r3, sp, #64	@ 0x40
 802628c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026290:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 8026294:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026296:	b9c3      	cbnz	r3, 80262ca <uri_to_path+0xae>
 8026298:	f10d 0940 	add.w	r9, sp, #64	@ 0x40
 802629c:	ac12      	add	r4, sp, #72	@ 0x48
 802629e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80262a2:	e889 0003 	stmia.w	r9, {r0, r1}
 80262a6:	f10d 0a18 	add.w	sl, sp, #24
 80262aa:	4922      	ldr	r1, [pc, #136]	@ (8026334 <uri_to_path+0x118>)
 80262ac:	4650      	mov	r0, sl
 80262ae:	f7fd fcb3 	bl	8023c18 <mg_str_s>
 80262b2:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80262b6:	e884 0003 	stmia.w	r4, {r0, r1}
 80262ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80262bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80262c0:	ab08      	add	r3, sp, #32
 80262c2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80262c6:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 80262ca:	68eb      	ldr	r3, [r5, #12]
 80262cc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80262ce:	4293      	cmp	r3, r2
 80262d0:	d3bc      	bcc.n	802624c <uri_to_path+0x30>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 80262d2:	ac14      	add	r4, sp, #80	@ 0x50
 80262d4:	68a9      	ldr	r1, [r5, #8]
 80262d6:	4620      	mov	r0, r4
 80262d8:	f7fd fcaa 	bl	8023c30 <mg_str_n>
 80262dc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80262e0:	a912      	add	r1, sp, #72	@ 0x48
 80262e2:	c903      	ldmia	r1, {r0, r1}
 80262e4:	f7fd fd69 	bl	8023dba <mg_strcmp>
 80262e8:	2800      	cmp	r0, #0
 80262ea:	d1af      	bne.n	802624c <uri_to_path+0x30>
    u = k, p = v;
 80262ec:	ab0a      	add	r3, sp, #40	@ 0x28
 80262ee:	aa12      	add	r2, sp, #72	@ 0x48
 80262f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80262f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80262f8:	ab08      	add	r3, sp, #32
 80262fa:	aa10      	add	r2, sp, #64	@ 0x40
 80262fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026300:	e883 0003 	stmia.w	r3, {r0, r1}
 8026304:	e7a2      	b.n	802624c <uri_to_path+0x30>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8026306:	f8df 8030 	ldr.w	r8, [pc, #48]	@ 8026338 <uri_to_path+0x11c>
 802630a:	e792      	b.n	8026232 <uri_to_path+0x16>
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 802630c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802630e:	9304      	str	r3, [sp, #16]
 8026310:	9703      	str	r7, [sp, #12]
 8026312:	ab01      	add	r3, sp, #4
 8026314:	aa08      	add	r2, sp, #32
 8026316:	e892 0003 	ldmia.w	r2, {r0, r1}
 802631a:	e883 0003 	stmia.w	r3, {r0, r1}
 802631e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026320:	9300      	str	r3, [sp, #0]
 8026322:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026324:	4642      	mov	r2, r8
 8026326:	4629      	mov	r1, r5
 8026328:	4630      	mov	r0, r6
 802632a:	f7ff fe71 	bl	8026010 <uri_to_path2>
}
 802632e:	b016      	add	sp, #88	@ 0x58
 8026330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026334:	0803984c 	.word	0x0803984c
 8026338:	20000130 	.word	0x20000130

0802633c <mg_http_serve_dir>:
                       const struct mg_http_serve_opts *opts) {
 802633c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026340:	b0a7      	sub	sp, #156	@ 0x9c
 8026342:	4607      	mov	r7, r0
 8026344:	460e      	mov	r6, r1
 8026346:	4615      	mov	r5, r2
  const char *sp = opts->ssi_pattern;
 8026348:	f8d2 8004 	ldr.w	r8, [r2, #4]
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 802634c:	2380      	movs	r3, #128	@ 0x80
 802634e:	9300      	str	r3, [sp, #0]
 8026350:	ab02      	add	r3, sp, #8
 8026352:	f7ff ff63 	bl	802621c <uri_to_path>
  if (flags < 0) {
 8026356:	2800      	cmp	r0, #0
 8026358:	db20      	blt.n	802639c <mg_http_serve_dir+0x60>
  } else if (flags & MG_FS_DIR) {
 802635a:	f010 0f04 	tst.w	r0, #4
 802635e:	d120      	bne.n	80263a2 <mg_http_serve_dir+0x66>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 8026360:	b1b0      	cbz	r0, 8026390 <mg_http_serve_dir+0x54>
 8026362:	f1b8 0f00 	cmp.w	r8, #0
 8026366:	d013      	beq.n	8026390 <mg_http_serve_dir+0x54>
 8026368:	ac22      	add	r4, sp, #136	@ 0x88
 802636a:	a902      	add	r1, sp, #8
 802636c:	4620      	mov	r0, r4
 802636e:	f7fd fc53 	bl	8023c18 <mg_str_s>
 8026372:	f10d 0990 	add.w	r9, sp, #144	@ 0x90
 8026376:	4641      	mov	r1, r8
 8026378:	4648      	mov	r0, r9
 802637a:	f7fd fc4d 	bl	8023c18 <mg_str_s>
 802637e:	2300      	movs	r3, #0
 8026380:	9300      	str	r3, [sp, #0]
 8026382:	e899 000c 	ldmia.w	r9, {r2, r3}
 8026386:	e894 0003 	ldmia.w	r4, {r0, r1}
 802638a:	f7fd fe67 	bl	802405c <mg_match>
 802638e:	b978      	cbnz	r0, 80263b0 <mg_http_serve_dir+0x74>
    mg_http_serve_file(c, hm, path, opts);
 8026390:	462b      	mov	r3, r5
 8026392:	aa02      	add	r2, sp, #8
 8026394:	4631      	mov	r1, r6
 8026396:	4638      	mov	r0, r7
 8026398:	f7fe f81c 	bl	80243d4 <mg_http_serve_file>
}
 802639c:	b027      	add	sp, #156	@ 0x9c
 802639e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    listdir(c, hm, opts, path);
 80263a2:	ab02      	add	r3, sp, #8
 80263a4:	462a      	mov	r2, r5
 80263a6:	4631      	mov	r1, r6
 80263a8:	4638      	mov	r0, r7
 80263aa:	f7fe fbef 	bl	8024b8c <listdir>
 80263ae:	e7f5      	b.n	802639c <mg_http_serve_dir+0x60>
    mg_http_serve_ssi(c, opts->root_dir, path);
 80263b0:	aa02      	add	r2, sp, #8
 80263b2:	6829      	ldr	r1, [r5, #0]
 80263b4:	4638      	mov	r0, r7
 80263b6:	f7fd fc25 	bl	8023c04 <mg_http_serve_ssi>
 80263ba:	e7ef      	b.n	802639c <mg_http_serve_dir+0x60>

080263bc <printdirentry>:
static void printdirentry(const char *name, void *userdata) {
 80263bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80263be:	b0c3      	sub	sp, #268	@ 0x10c
 80263c0:	4605      	mov	r5, r0
 80263c2:	460c      	mov	r4, r1
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 80263c4:	688b      	ldr	r3, [r1, #8]
 80263c6:	695e      	ldr	r6, [r3, #20]
 80263c8:	b1b6      	cbz	r6, 80263f8 <printdirentry+0x3c>
  size_t size = 0;
 80263ca:	2300      	movs	r3, #0
 80263cc:	9341      	str	r3, [sp, #260]	@ 0x104
  time_t t = 0;
 80263ce:	2200      	movs	r2, #0
 80263d0:	2300      	movs	r3, #0
 80263d2:	e9cd 233e 	strd	r2, r3, [sp, #248]	@ 0xf8
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 80263d6:	9501      	str	r5, [sp, #4]
 80263d8:	232f      	movs	r3, #47	@ 0x2f
 80263da:	9300      	str	r3, [sp, #0]
 80263dc:	68e3      	ldr	r3, [r4, #12]
 80263de:	4a3c      	ldr	r2, [pc, #240]	@ (80264d0 <printdirentry+0x114>)
 80263e0:	2180      	movs	r1, #128	@ 0x80
 80263e2:	a81e      	add	r0, sp, #120	@ 0x78
 80263e4:	f7fc fd8e 	bl	8022f04 <mg_snprintf>
 80263e8:	2880      	cmp	r0, #128	@ 0x80
 80263ea:	d913      	bls.n	8026414 <printdirentry+0x58>
    MG_ERROR(("%s truncated", name));
 80263ec:	4b39      	ldr	r3, [pc, #228]	@ (80264d4 <printdirentry+0x118>)
 80263ee:	681b      	ldr	r3, [r3, #0]
 80263f0:	2b00      	cmp	r3, #0
 80263f2:	dc03      	bgt.n	80263fc <printdirentry+0x40>
}
 80263f4:	b043      	add	sp, #268	@ 0x10c
 80263f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 80263f8:	4e37      	ldr	r6, [pc, #220]	@ (80264d8 <printdirentry+0x11c>)
 80263fa:	e7e6      	b.n	80263ca <printdirentry+0xe>
    MG_ERROR(("%s truncated", name));
 80263fc:	4b37      	ldr	r3, [pc, #220]	@ (80264dc <printdirentry+0x120>)
 80263fe:	f640 3248 	movw	r2, #2888	@ 0xb48
 8026402:	4937      	ldr	r1, [pc, #220]	@ (80264e0 <printdirentry+0x124>)
 8026404:	2001      	movs	r0, #1
 8026406:	f7ff fb3f 	bl	8025a88 <mg_log_prefix>
 802640a:	4629      	mov	r1, r5
 802640c:	4835      	ldr	r0, [pc, #212]	@ (80264e4 <printdirentry+0x128>)
 802640e:	f7fd fa25 	bl	802385c <mg_log>
 8026412:	e7ef      	b.n	80263f4 <printdirentry+0x38>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 8026414:	6833      	ldr	r3, [r6, #0]
 8026416:	aa3e      	add	r2, sp, #248	@ 0xf8
 8026418:	a941      	add	r1, sp, #260	@ 0x104
 802641a:	a81e      	add	r0, sp, #120	@ 0x78
 802641c:	4798      	blx	r3
 802641e:	b9a8      	cbnz	r0, 802644c <printdirentry+0x90>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 8026420:	4b2c      	ldr	r3, [pc, #176]	@ (80264d4 <printdirentry+0x118>)
 8026422:	681b      	ldr	r3, [r3, #0]
 8026424:	2b00      	cmp	r3, #0
 8026426:	dde5      	ble.n	80263f4 <printdirentry+0x38>
 8026428:	4b2c      	ldr	r3, [pc, #176]	@ (80264dc <printdirentry+0x120>)
 802642a:	f640 324a 	movw	r2, #2890	@ 0xb4a
 802642e:	492c      	ldr	r1, [pc, #176]	@ (80264e0 <printdirentry+0x124>)
 8026430:	2001      	movs	r0, #1
 8026432:	f7ff fb29 	bl	8025a88 <mg_log_prefix>
 8026436:	6823      	ldr	r3, [r4, #0]
 8026438:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 802643a:	f007 f925 	bl	802d688 <__errno>
 802643e:	6803      	ldr	r3, [r0, #0]
 8026440:	aa1e      	add	r2, sp, #120	@ 0x78
 8026442:	4621      	mov	r1, r4
 8026444:	4828      	ldr	r0, [pc, #160]	@ (80264e8 <printdirentry+0x12c>)
 8026446:	f7fd fa09 	bl	802385c <mg_log>
 802644a:	e7d3      	b.n	80263f4 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 802644c:	f010 0604 	ands.w	r6, r0, #4
 8026450:	d02d      	beq.n	80264ae <printdirentry+0xf2>
 8026452:	4f26      	ldr	r7, [pc, #152]	@ (80264ec <printdirentry+0x130>)
    if (flags & MG_FS_DIR) {
 8026454:	2e00      	cmp	r6, #0
 8026456:	d02c      	beq.n	80264b2 <printdirentry+0xf6>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 8026458:	4b25      	ldr	r3, [pc, #148]	@ (80264f0 <printdirentry+0x134>)
 802645a:	4a26      	ldr	r2, [pc, #152]	@ (80264f4 <printdirentry+0x138>)
 802645c:	2128      	movs	r1, #40	@ 0x28
 802645e:	a814      	add	r0, sp, #80	@ 0x50
 8026460:	f7fc fd50 	bl	8022f04 <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 8026464:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8026466:	4a24      	ldr	r2, [pc, #144]	@ (80264f8 <printdirentry+0x13c>)
 8026468:	2128      	movs	r1, #40	@ 0x28
 802646a:	eb0d 0001 	add.w	r0, sp, r1
 802646e:	f7fc fd49 	bl	8022f04 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 8026472:	4628      	mov	r0, r5
 8026474:	f7e9 ff14 	bl	80102a0 <strlen>
 8026478:	4601      	mov	r1, r0
 802647a:	2380      	movs	r3, #128	@ 0x80
 802647c:	aa1e      	add	r2, sp, #120	@ 0x78
 802647e:	4628      	mov	r0, r5
 8026480:	f7fd fa94 	bl	80239ac <mg_url_encode>
 8026484:	4602      	mov	r2, r0
    mg_printf(d->c,
 8026486:	6820      	ldr	r0, [r4, #0]
 8026488:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 802648a:	b9e6      	cbnz	r6, 80264c6 <printdirentry+0x10a>
 802648c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802648e:	2400      	movs	r4, #0
 8026490:	ae14      	add	r6, sp, #80	@ 0x50
 8026492:	9608      	str	r6, [sp, #32]
 8026494:	9306      	str	r3, [sp, #24]
 8026496:	9407      	str	r4, [sp, #28]
 8026498:	ab0a      	add	r3, sp, #40	@ 0x28
 802649a:	9304      	str	r3, [sp, #16]
 802649c:	9103      	str	r1, [sp, #12]
 802649e:	9702      	str	r7, [sp, #8]
 80264a0:	9501      	str	r5, [sp, #4]
 80264a2:	9700      	str	r7, [sp, #0]
 80264a4:	ab1e      	add	r3, sp, #120	@ 0x78
 80264a6:	4915      	ldr	r1, [pc, #84]	@ (80264fc <printdirentry+0x140>)
 80264a8:	f7fd fa06 	bl	80238b8 <mg_printf>
}
 80264ac:	e7a2      	b.n	80263f4 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 80264ae:	4f14      	ldr	r7, [pc, #80]	@ (8026500 <printdirentry+0x144>)
 80264b0:	e7d0      	b.n	8026454 <printdirentry+0x98>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 80264b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80264b4:	9300      	str	r3, [sp, #0]
 80264b6:	2300      	movs	r3, #0
 80264b8:	9301      	str	r3, [sp, #4]
 80264ba:	4a12      	ldr	r2, [pc, #72]	@ (8026504 <printdirentry+0x148>)
 80264bc:	2128      	movs	r1, #40	@ 0x28
 80264be:	a814      	add	r0, sp, #80	@ 0x50
 80264c0:	f7fc fd20 	bl	8022f04 <mg_snprintf>
 80264c4:	e7ce      	b.n	8026464 <printdirentry+0xa8>
    mg_printf(d->c,
 80264c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80264ca:	461c      	mov	r4, r3
 80264cc:	e7e0      	b.n	8026490 <printdirentry+0xd4>
 80264ce:	bf00      	nop
 80264d0:	0803a1fc 	.word	0x0803a1fc
 80264d4:	2000012c 	.word	0x2000012c
 80264d8:	20000130 	.word	0x20000130
 80264dc:	0803aa7c 	.word	0x0803aa7c
 80264e0:	0803a050 	.word	0x0803a050
 80264e4:	0803a204 	.word	0x0803a204
 80264e8:	0803a214 	.word	0x0803a214
 80264ec:	0803984c 	.word	0x0803984c
 80264f0:	0803a228 	.word	0x0803a228
 80264f4:	0803a368 	.word	0x0803a368
 80264f8:	0803a618 	.word	0x0803a618
 80264fc:	0803a238 	.word	0x0803a238
 8026500:	08036364 	.word	0x08036364
 8026504:	0803a230 	.word	0x0803a230

08026508 <mg_http_upload>:
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 8026508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802650c:	b0ca      	sub	sp, #296	@ 0x128
 802650e:	4607      	mov	r7, r0
 8026510:	460d      	mov	r5, r1
 8026512:	4616      	mov	r6, r2
 8026514:	4698      	mov	r8, r3
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 8026516:	2330      	movs	r3, #48	@ 0x30
 8026518:	9343      	str	r3, [sp, #268]	@ 0x10c
 802651a:	2400      	movs	r4, #0
 802651c:	9444      	str	r4, [sp, #272]	@ 0x110
 802651e:	9445      	str	r4, [sp, #276]	@ 0x114
 8026520:	9446      	str	r4, [sp, #280]	@ 0x118
 8026522:	9447      	str	r4, [sp, #284]	@ 0x11c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 8026524:	f101 0a10 	add.w	sl, r1, #16
 8026528:	2314      	movs	r3, #20
 802652a:	aa43      	add	r2, sp, #268	@ 0x10c
 802652c:	4964      	ldr	r1, [pc, #400]	@ (80266c0 <mg_http_upload+0x1b8>)
 802652e:	4650      	mov	r0, sl
 8026530:	f7fe fa5f 	bl	80249f2 <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8026534:	f10d 098c 	add.w	r9, sp, #140	@ 0x8c
 8026538:	2380      	movs	r3, #128	@ 0x80
 802653a:	464a      	mov	r2, r9
 802653c:	4961      	ldr	r1, [pc, #388]	@ (80266c4 <mg_http_upload+0x1bc>)
 802653e:	4650      	mov	r0, sl
 8026540:	f7fe fa57 	bl	80249f2 <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 8026544:	4622      	mov	r2, r4
 8026546:	4621      	mov	r1, r4
 8026548:	a843      	add	r0, sp, #268	@ 0x10c
 802654a:	f005 fa1f 	bl	802b98c <strtol>
 802654e:	4604      	mov	r4, r0
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 8026550:	f8cd 9004 	str.w	r9, [sp, #4]
 8026554:	232f      	movs	r3, #47	@ 0x2f
 8026556:	9300      	str	r3, [sp, #0]
 8026558:	4643      	mov	r3, r8
 802655a:	4a5b      	ldr	r2, [pc, #364]	@ (80266c8 <mg_http_upload+0x1c0>)
 802655c:	2180      	movs	r1, #128	@ 0x80
 802655e:	a803      	add	r0, sp, #12
 8026560:	f7fc fcd0 	bl	8022f04 <mg_snprintf>
  if (hm->body.len == 0) {
 8026564:	f8d5 8204 	ldr.w	r8, [r5, #516]	@ 0x204
 8026568:	f1b8 0f00 	cmp.w	r8, #0
 802656c:	d047      	beq.n	80265fe <mg_http_upload+0xf6>
  } else if (file[0] == '\0') {
 802656e:	f89d 308c 	ldrb.w	r3, [sp, #140]	@ 0x8c
 8026572:	2b00      	cmp	r3, #0
 8026574:	d04c      	beq.n	8026610 <mg_http_upload+0x108>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 8026576:	f50d 7990 	add.w	r9, sp, #288	@ 0x120
 802657a:	a923      	add	r1, sp, #140	@ 0x8c
 802657c:	4648      	mov	r0, r9
 802657e:	f7fd fb4b 	bl	8023c18 <mg_str_s>
 8026582:	e899 0003 	ldmia.w	r9, {r0, r1}
 8026586:	f7ff fa55 	bl	8025a34 <mg_path_is_sane>
 802658a:	2800      	cmp	r0, #0
 802658c:	d04a      	beq.n	8026624 <mg_http_upload+0x11c>
  } else if (offset < 0) {
 802658e:	2c00      	cmp	r4, #0
 8026590:	db54      	blt.n	802663c <mg_http_upload+0x134>
  } else if ((size_t) offset + hm->body.len > max_size) {
 8026592:	44a0      	add	r8, r4
 8026594:	9b52      	ldr	r3, [sp, #328]	@ 0x148
 8026596:	4598      	cmp	r8, r3
 8026598:	d85a      	bhi.n	8026650 <mg_http_upload+0x148>
    size_t current_size = 0;
 802659a:	2300      	movs	r3, #0
 802659c:	9302      	str	r3, [sp, #8]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 802659e:	4b4b      	ldr	r3, [pc, #300]	@ (80266cc <mg_http_upload+0x1c4>)
 80265a0:	681b      	ldr	r3, [r3, #0]
 80265a2:	2b02      	cmp	r3, #2
 80265a4:	dc61      	bgt.n	802666a <mg_http_upload+0x162>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 80265a6:	b914      	cbnz	r4, 80265ae <mg_http_upload+0xa6>
 80265a8:	6a33      	ldr	r3, [r6, #32]
 80265aa:	a803      	add	r0, sp, #12
 80265ac:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 80265ae:	6833      	ldr	r3, [r6, #0]
 80265b0:	2200      	movs	r2, #0
 80265b2:	a902      	add	r1, sp, #8
 80265b4:	a803      	add	r0, sp, #12
 80265b6:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 80265b8:	2c00      	cmp	r4, #0
 80265ba:	dd02      	ble.n	80265c2 <mg_http_upload+0xba>
 80265bc:	9b02      	ldr	r3, [sp, #8]
 80265be:	429c      	cmp	r4, r3
 80265c0:	d162      	bne.n	8026688 <mg_http_upload+0x180>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 80265c2:	2202      	movs	r2, #2
 80265c4:	a903      	add	r1, sp, #12
 80265c6:	4630      	mov	r0, r6
 80265c8:	f7fb ff0d 	bl	80223e6 <mg_fs_open>
 80265cc:	4680      	mov	r8, r0
 80265ce:	2800      	cmp	r0, #0
 80265d0:	d066      	beq.n	80266a0 <mg_http_upload+0x198>
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 80265d2:	6973      	ldr	r3, [r6, #20]
 80265d4:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 80265d8:	f8d5 1200 	ldr.w	r1, [r5, #512]	@ 0x200
 80265dc:	6800      	ldr	r0, [r0, #0]
 80265de:	4798      	blx	r3
 80265e0:	4404      	add	r4, r0
      mg_fs_close(fd);
 80265e2:	4640      	mov	r0, r8
 80265e4:	f7fb ff18 	bl	8022418 <mg_fs_close>
      mg_http_reply(c, 200, headers_tmp, "%ld", res);  //TODO DELETE HEADERS!!!!!
 80265e8:	9400      	str	r4, [sp, #0]
 80265ea:	4b39      	ldr	r3, [pc, #228]	@ (80266d0 <mg_http_upload+0x1c8>)
 80265ec:	4a39      	ldr	r2, [pc, #228]	@ (80266d4 <mg_http_upload+0x1cc>)
 80265ee:	21c8      	movs	r1, #200	@ 0xc8
 80265f0:	4638      	mov	r0, r7
 80265f2:	f7fd f987 	bl	8023904 <mg_http_reply>
}
 80265f6:	4620      	mov	r0, r4
 80265f8:	b04a      	add	sp, #296	@ 0x128
 80265fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    mg_http_reply(c, 200, headers_tmp, "%ld", res);  // Nothing to write  //TODO DELETE HEADERS!!!!!
 80265fe:	2400      	movs	r4, #0
 8026600:	9400      	str	r4, [sp, #0]
 8026602:	4b33      	ldr	r3, [pc, #204]	@ (80266d0 <mg_http_upload+0x1c8>)
 8026604:	4a33      	ldr	r2, [pc, #204]	@ (80266d4 <mg_http_upload+0x1cc>)
 8026606:	21c8      	movs	r1, #200	@ 0xc8
 8026608:	4638      	mov	r0, r7
 802660a:	f7fd f97b 	bl	8023904 <mg_http_reply>
 802660e:	e7f2      	b.n	80265f6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "file required");
 8026610:	4b31      	ldr	r3, [pc, #196]	@ (80266d8 <mg_http_upload+0x1d0>)
 8026612:	4a32      	ldr	r2, [pc, #200]	@ (80266dc <mg_http_upload+0x1d4>)
 8026614:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026618:	4638      	mov	r0, r7
 802661a:	f7fd f973 	bl	8023904 <mg_http_reply>
    res = -1;
 802661e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8026622:	e7e8      	b.n	80265f6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 8026624:	ab23      	add	r3, sp, #140	@ 0x8c
 8026626:	9300      	str	r3, [sp, #0]
 8026628:	4b2d      	ldr	r3, [pc, #180]	@ (80266e0 <mg_http_upload+0x1d8>)
 802662a:	4a2c      	ldr	r2, [pc, #176]	@ (80266dc <mg_http_upload+0x1d4>)
 802662c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026630:	4638      	mov	r0, r7
 8026632:	f7fd f967 	bl	8023904 <mg_http_reply>
    res = -2;
 8026636:	f06f 0401 	mvn.w	r4, #1
 802663a:	e7dc      	b.n	80265f6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "offset required");
 802663c:	4b29      	ldr	r3, [pc, #164]	@ (80266e4 <mg_http_upload+0x1dc>)
 802663e:	4a27      	ldr	r2, [pc, #156]	@ (80266dc <mg_http_upload+0x1d4>)
 8026640:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026644:	4638      	mov	r0, r7
 8026646:	f7fd f95d 	bl	8023904 <mg_http_reply>
    res = -3;
 802664a:	f06f 0402 	mvn.w	r4, #2
 802664e:	e7d2      	b.n	80265f6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 8026650:	9301      	str	r3, [sp, #4]
 8026652:	ab03      	add	r3, sp, #12
 8026654:	9300      	str	r3, [sp, #0]
 8026656:	4b24      	ldr	r3, [pc, #144]	@ (80266e8 <mg_http_upload+0x1e0>)
 8026658:	4a20      	ldr	r2, [pc, #128]	@ (80266dc <mg_http_upload+0x1d4>)
 802665a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802665e:	4638      	mov	r0, r7
 8026660:	f7fd f950 	bl	8023904 <mg_http_reply>
    res = -4;
 8026664:	f06f 0403 	mvn.w	r4, #3
 8026668:	e7c5      	b.n	80265f6 <mg_http_upload+0xee>
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 802666a:	4b20      	ldr	r3, [pc, #128]	@ (80266ec <mg_http_upload+0x1e4>)
 802666c:	f640 426a 	movw	r2, #3178	@ 0xc6a
 8026670:	491f      	ldr	r1, [pc, #124]	@ (80266f0 <mg_http_upload+0x1e8>)
 8026672:	2003      	movs	r0, #3
 8026674:	f7ff fa08 	bl	8025a88 <mg_log_prefix>
 8026678:	4623      	mov	r3, r4
 802667a:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 802667e:	a903      	add	r1, sp, #12
 8026680:	481c      	ldr	r0, [pc, #112]	@ (80266f4 <mg_http_upload+0x1ec>)
 8026682:	f7fd f8eb 	bl	802385c <mg_log>
 8026686:	e78e      	b.n	80265a6 <mg_http_upload+0x9e>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 8026688:	ab03      	add	r3, sp, #12
 802668a:	9300      	str	r3, [sp, #0]
 802668c:	4b1a      	ldr	r3, [pc, #104]	@ (80266f8 <mg_http_upload+0x1f0>)
 802668e:	4a13      	ldr	r2, [pc, #76]	@ (80266dc <mg_http_upload+0x1d4>)
 8026690:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026694:	4638      	mov	r0, r7
 8026696:	f7fd f935 	bl	8023904 <mg_http_reply>
      res = -5;
 802669a:	f06f 0404 	mvn.w	r4, #4
 802669e:	e7aa      	b.n	80265f6 <mg_http_upload+0xee>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 80266a0:	f006 fff2 	bl	802d688 <__errno>
 80266a4:	6803      	ldr	r3, [r0, #0]
 80266a6:	9301      	str	r3, [sp, #4]
 80266a8:	ab03      	add	r3, sp, #12
 80266aa:	9300      	str	r3, [sp, #0]
 80266ac:	4b13      	ldr	r3, [pc, #76]	@ (80266fc <mg_http_upload+0x1f4>)
 80266ae:	4a0b      	ldr	r2, [pc, #44]	@ (80266dc <mg_http_upload+0x1d4>)
 80266b0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80266b4:	4638      	mov	r0, r7
 80266b6:	f7fd f925 	bl	8023904 <mg_http_reply>
      res = -6;
 80266ba:	f06f 0405 	mvn.w	r4, #5
 80266be:	e79a      	b.n	80265f6 <mg_http_upload+0xee>
 80266c0:	0803a290 	.word	0x0803a290
 80266c4:	0803a2b8 	.word	0x0803a2b8
 80266c8:	0803a1fc 	.word	0x0803a1fc
 80266cc:	2000012c 	.word	0x2000012c
 80266d0:	0803a298 	.word	0x0803a298
 80266d4:	08035e60 	.word	0x08035e60
 80266d8:	0803a29c 	.word	0x0803a29c
 80266dc:	08036364 	.word	0x08036364
 80266e0:	0803a2ac 	.word	0x0803a2ac
 80266e4:	0803a2c0 	.word	0x0803a2c0
 80266e8:	0803a2d0 	.word	0x0803a2d0
 80266ec:	0803aa6c 	.word	0x0803aa6c
 80266f0:	0803a050 	.word	0x0803a050
 80266f4:	0803a2ec 	.word	0x0803a2ec
 80266f8:	0803a304 	.word	0x0803a304
 80266fc:	0803a318 	.word	0x0803a318

08026700 <mg_iobuf_resize>:
int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8026700:	b570      	push	{r4, r5, r6, lr}
 8026702:	b082      	sub	sp, #8
 8026704:	4604      	mov	r4, r0
 8026706:	4608      	mov	r0, r1
  new_size = roundup(new_size, io->align);
 8026708:	68e1      	ldr	r1, [r4, #12]
 802670a:	f7f9 fc7b 	bl	8020004 <roundup>
  if (new_size == 0) {
 802670e:	b130      	cbz	r0, 802671e <mg_iobuf_resize+0x1e>
 8026710:	4605      	mov	r5, r0
  } else if (new_size != io->size) {
 8026712:	6863      	ldr	r3, [r4, #4]
 8026714:	4283      	cmp	r3, r0
 8026716:	d10f      	bne.n	8026738 <mg_iobuf_resize+0x38>
  int ok = 1;
 8026718:	2001      	movs	r0, #1
}
 802671a:	b002      	add	sp, #8
 802671c:	bd70      	pop	{r4, r5, r6, pc}
    mg_bzero(io->buf, io->size);
 802671e:	6861      	ldr	r1, [r4, #4]
 8026720:	6820      	ldr	r0, [r4, #0]
 8026722:	f7fe fdab 	bl	802527c <mg_bzero>
    free(io->buf);
 8026726:	6820      	ldr	r0, [r4, #0]
 8026728:	f7f3 fea0 	bl	801a46c <vPortFree>
    io->buf = NULL;
 802672c:	2300      	movs	r3, #0
 802672e:	6023      	str	r3, [r4, #0]
    io->len = io->size = 0;
 8026730:	6063      	str	r3, [r4, #4]
 8026732:	60a3      	str	r3, [r4, #8]
  int ok = 1;
 8026734:	2001      	movs	r0, #1
 8026736:	e7f0      	b.n	802671a <mg_iobuf_resize+0x1a>
    void *p = calloc(1, new_size);
 8026738:	4601      	mov	r1, r0
 802673a:	2001      	movs	r0, #1
 802673c:	f7fb fd1c 	bl	8022178 <mg_calloc>
    if (p != NULL) {
 8026740:	4606      	mov	r6, r0
 8026742:	b198      	cbz	r0, 802676c <mg_iobuf_resize+0x6c>
      size_t len = new_size < io->len ? new_size : io->len;
 8026744:	68a2      	ldr	r2, [r4, #8]
 8026746:	42aa      	cmp	r2, r5
 8026748:	bf28      	it	cs
 802674a:	462a      	movcs	r2, r5
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 802674c:	b11a      	cbz	r2, 8026756 <mg_iobuf_resize+0x56>
 802674e:	6821      	ldr	r1, [r4, #0]
 8026750:	b109      	cbz	r1, 8026756 <mg_iobuf_resize+0x56>
 8026752:	f005 fd7b 	bl	802c24c <memmove>
      mg_bzero(io->buf, io->size);
 8026756:	6861      	ldr	r1, [r4, #4]
 8026758:	6820      	ldr	r0, [r4, #0]
 802675a:	f7fe fd8f 	bl	802527c <mg_bzero>
      free(io->buf);
 802675e:	6820      	ldr	r0, [r4, #0]
 8026760:	f7f3 fe84 	bl	801a46c <vPortFree>
      io->buf = (unsigned char *) p;
 8026764:	6026      	str	r6, [r4, #0]
      io->size = new_size;
 8026766:	6065      	str	r5, [r4, #4]
  int ok = 1;
 8026768:	2001      	movs	r0, #1
 802676a:	e7d6      	b.n	802671a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 802676c:	4b0b      	ldr	r3, [pc, #44]	@ (802679c <mg_iobuf_resize+0x9c>)
 802676e:	681b      	ldr	r3, [r3, #0]
 8026770:	2b00      	cmp	r3, #0
 8026772:	dc01      	bgt.n	8026778 <mg_iobuf_resize+0x78>
      ok = 0;
 8026774:	2000      	movs	r0, #0
  return ok;
 8026776:	e7d0      	b.n	802671a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8026778:	4b09      	ldr	r3, [pc, #36]	@ (80267a0 <mg_iobuf_resize+0xa0>)
 802677a:	f640 5244 	movw	r2, #3396	@ 0xd44
 802677e:	4909      	ldr	r1, [pc, #36]	@ (80267a4 <mg_iobuf_resize+0xa4>)
 8026780:	2001      	movs	r0, #1
 8026782:	f7ff f981 	bl	8025a88 <mg_log_prefix>
 8026786:	2600      	movs	r6, #0
 8026788:	9500      	str	r5, [sp, #0]
 802678a:	9601      	str	r6, [sp, #4]
 802678c:	6862      	ldr	r2, [r4, #4]
 802678e:	4633      	mov	r3, r6
 8026790:	4805      	ldr	r0, [pc, #20]	@ (80267a8 <mg_iobuf_resize+0xa8>)
 8026792:	f7fd f863 	bl	802385c <mg_log>
      ok = 0;
 8026796:	4630      	mov	r0, r6
 8026798:	e7bf      	b.n	802671a <mg_iobuf_resize+0x1a>
 802679a:	bf00      	nop
 802679c:	2000012c 	.word	0x2000012c
 80267a0:	0803aa5c 	.word	0x0803aa5c
 80267a4:	0803a050 	.word	0x0803a050
 80267a8:	0803a328 	.word	0x0803a328

080267ac <static_cb>:
static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 80267ac:	b538      	push	{r3, r4, r5, lr}
 80267ae:	4604      	mov	r4, r0
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80267b0:	2908      	cmp	r1, #8
 80267b2:	d004      	beq.n	80267be <static_cb+0x12>
 80267b4:	2902      	cmp	r1, #2
 80267b6:	d002      	beq.n	80267be <static_cb+0x12>
  } else if (ev == MG_EV_CLOSE) {
 80267b8:	2909      	cmp	r1, #9
 80267ba:	d02b      	beq.n	8026814 <static_cb+0x68>
}
 80267bc:	bd38      	pop	{r3, r4, r5, pc}
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 80267be:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 80267c2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80267c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80267c8:	d31d      	bcc.n	8026806 <static_cb+0x5a>
    if (c->send.len >= c->send.size) return;  // Rate limit
 80267ca:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80267cc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80267ce:	4299      	cmp	r1, r3
 80267d0:	d2f4      	bcs.n	80267bc <static_cb+0x10>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 80267d2:	1a5b      	subs	r3, r3, r1
 80267d4:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 80267d8:	429a      	cmp	r2, r3
 80267da:	d300      	bcc.n	80267de <static_cb+0x32>
 80267dc:	461a      	mov	r2, r3
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 80267de:	686b      	ldr	r3, [r5, #4]
 80267e0:	691b      	ldr	r3, [r3, #16]
 80267e2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80267e4:	4401      	add	r1, r0
 80267e6:	6828      	ldr	r0, [r5, #0]
 80267e8:	4798      	blx	r3
    c->send.len += n;
 80267ea:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80267ec:	4403      	add	r3, r0
 80267ee:	6523      	str	r3, [r4, #80]	@ 0x50
    *cl -= n;
 80267f0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80267f4:	1a1b      	subs	r3, r3, r0
 80267f6:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    if (n == 0) restore_http_cb(c);
 80267fa:	2800      	cmp	r0, #0
 80267fc:	d1de      	bne.n	80267bc <static_cb+0x10>
 80267fe:	4620      	mov	r0, r4
 8026800:	f7fb fe16 	bl	8022430 <restore_http_cb>
 8026804:	e7da      	b.n	80267bc <static_cb+0x10>
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8026806:	f44f 7100 	mov.w	r1, #512	@ 0x200
 802680a:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 802680e:	f7ff ff77 	bl	8026700 <mg_iobuf_resize>
 8026812:	e7da      	b.n	80267ca <static_cb+0x1e>
    restore_http_cb(c);
 8026814:	f7fb fe0c 	bl	8022430 <restore_http_cb>
  (void) ev_data;
 8026818:	e7d0      	b.n	80267bc <static_cb+0x10>

0802681a <mg_iobuf_add>:
                    size_t len) {
 802681a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802681e:	4604      	mov	r4, r0
 8026820:	460f      	mov	r7, r1
 8026822:	4690      	mov	r8, r2
 8026824:	461d      	mov	r5, r3
  size_t new_size = roundup(io->len + len, io->align);
 8026826:	6880      	ldr	r0, [r0, #8]
 8026828:	68e1      	ldr	r1, [r4, #12]
 802682a:	4418      	add	r0, r3
 802682c:	f7f9 fbea 	bl	8020004 <roundup>
 8026830:	4606      	mov	r6, r0
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 8026832:	4601      	mov	r1, r0
 8026834:	4620      	mov	r0, r4
 8026836:	f7ff ff63 	bl	8026700 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 802683a:	6863      	ldr	r3, [r4, #4]
 802683c:	42b3      	cmp	r3, r6
 802683e:	d000      	beq.n	8026842 <mg_iobuf_add+0x28>
 8026840:	2500      	movs	r5, #0
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8026842:	68a2      	ldr	r2, [r4, #8]
 8026844:	42ba      	cmp	r2, r7
 8026846:	d812      	bhi.n	802686e <mg_iobuf_add+0x54>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 8026848:	f1b8 0f00 	cmp.w	r8, #0
 802684c:	d005      	beq.n	802685a <mg_iobuf_add+0x40>
 802684e:	6820      	ldr	r0, [r4, #0]
 8026850:	462a      	mov	r2, r5
 8026852:	4641      	mov	r1, r8
 8026854:	4438      	add	r0, r7
 8026856:	f005 fcf9 	bl	802c24c <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 802685a:	68a3      	ldr	r3, [r4, #8]
 802685c:	42bb      	cmp	r3, r7
 802685e:	d200      	bcs.n	8026862 <mg_iobuf_add+0x48>
 8026860:	60a7      	str	r7, [r4, #8]
  io->len += len;
 8026862:	68a3      	ldr	r3, [r4, #8]
 8026864:	442b      	add	r3, r5
 8026866:	60a3      	str	r3, [r4, #8]
}
 8026868:	4628      	mov	r0, r5
 802686a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 802686e:	6823      	ldr	r3, [r4, #0]
 8026870:	19e8      	adds	r0, r5, r7
 8026872:	1bd2      	subs	r2, r2, r7
 8026874:	19d9      	adds	r1, r3, r7
 8026876:	4418      	add	r0, r3
 8026878:	f005 fce8 	bl	802c24c <memmove>
 802687c:	e7e4      	b.n	8026848 <mg_iobuf_add+0x2e>

0802687e <mg_iobuf_free>:
void mg_iobuf_free(struct mg_iobuf *io) {
 802687e:	b508      	push	{r3, lr}
  mg_iobuf_resize(io, 0);
 8026880:	2100      	movs	r1, #0
 8026882:	f7ff ff3d 	bl	8026700 <mg_iobuf_resize>
}
 8026886:	bd08      	pop	{r3, pc}

08026888 <rx_udp>:
static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8026888:	b538      	push	{r3, r4, r5, lr}
 802688a:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 802688c:	2201      	movs	r2, #1
 802688e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8026890:	f7fb fc97 	bl	80221c2 <getpeer>
  if (c == NULL) {
 8026894:	b368      	cbz	r0, 80268f2 <rx_udp+0x6a>
 8026896:	4605      	mov	r5, r0
    c->rem.port = pkt->udp->sport;
 8026898:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 802689a:	881b      	ldrh	r3, [r3, #0]
 802689c:	8583      	strh	r3, [r0, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 802689e:	69e3      	ldr	r3, [r4, #28]
 80268a0:	68db      	ldr	r3, [r3, #12]
 80268a2:	61c3      	str	r3, [r0, #28]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 80268a4:	6923      	ldr	r3, [r4, #16]
 80268a6:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80268aa:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
 80268ae:	895b      	ldrh	r3, [r3, #10]
 80268b0:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 80268b4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80268b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80268ba:	d21b      	bcs.n	80268f4 <rx_udp+0x6c>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 80268bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80268be:	1ad2      	subs	r2, r2, r3
 80268c0:	68e1      	ldr	r1, [r4, #12]
 80268c2:	428a      	cmp	r2, r1
 80268c4:	d204      	bcs.n	80268d0 <rx_udp+0x48>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 80268c6:	4419      	add	r1, r3
 80268c8:	3038      	adds	r0, #56	@ 0x38
 80268ca:	f7ff ff19 	bl	8026700 <mg_iobuf_resize>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 80268ce:	b1a8      	cbz	r0, 80268fc <rx_udp+0x74>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 80268d0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80268d2:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80268d4:	68e2      	ldr	r2, [r4, #12]
 80268d6:	68a1      	ldr	r1, [r4, #8]
 80268d8:	4418      	add	r0, r3
 80268da:	f006 ff0d 	bl	802d6f8 <memcpy>
      c->recv.len += pkt->pay.len;
 80268de:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80268e0:	4622      	mov	r2, r4
 80268e2:	f852 1f0c 	ldr.w	r1, [r2, #12]!
 80268e6:	440b      	add	r3, r1
 80268e8:	642b      	str	r3, [r5, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 80268ea:	2107      	movs	r1, #7
 80268ec:	4628      	mov	r0, r5
 80268ee:	f7fb fd6b 	bl	80223c8 <mg_call>
}
 80268f2:	bd38      	pop	{r3, r4, r5, pc}
      mg_error(c, "max_recv_buf_size reached");
 80268f4:	4904      	ldr	r1, [pc, #16]	@ (8026908 <rx_udp+0x80>)
 80268f6:	f7ff f9af 	bl	8025c58 <mg_error>
 80268fa:	e7fa      	b.n	80268f2 <rx_udp+0x6a>
      mg_error(c, "oom");
 80268fc:	4903      	ldr	r1, [pc, #12]	@ (802690c <rx_udp+0x84>)
 80268fe:	4628      	mov	r0, r5
 8026900:	f7ff f9aa 	bl	8025c58 <mg_error>
 8026904:	e7f5      	b.n	80268f2 <rx_udp+0x6a>
 8026906:	bf00      	nop
 8026908:	0803a334 	.word	0x0803a334
 802690c:	0803a350 	.word	0x0803a350

08026910 <mg_pfn_iobuf_private>:
static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8026910:	b538      	push	{r3, r4, r5, lr}
 8026912:	4605      	mov	r5, r0
 8026914:	460c      	mov	r4, r1
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8026916:	b122      	cbz	r2, 8026922 <mg_pfn_iobuf_private+0x12>
 8026918:	6889      	ldr	r1, [r1, #8]
 802691a:	3102      	adds	r1, #2
 802691c:	6863      	ldr	r3, [r4, #4]
 802691e:	4299      	cmp	r1, r3
 8026920:	d80d      	bhi.n	802693e <mg_pfn_iobuf_private+0x2e>
  if (io->len + 2 <= io->size) {
 8026922:	68a3      	ldr	r3, [r4, #8]
 8026924:	1c99      	adds	r1, r3, #2
 8026926:	6862      	ldr	r2, [r4, #4]
 8026928:	4291      	cmp	r1, r2
 802692a:	d80c      	bhi.n	8026946 <mg_pfn_iobuf_private+0x36>
    io->buf[io->len++] = (uint8_t) ch;
 802692c:	6822      	ldr	r2, [r4, #0]
 802692e:	1c59      	adds	r1, r3, #1
 8026930:	60a1      	str	r1, [r4, #8]
 8026932:	54d5      	strb	r5, [r2, r3]
    io->buf[io->len] = 0;
 8026934:	6822      	ldr	r2, [r4, #0]
 8026936:	68a3      	ldr	r3, [r4, #8]
 8026938:	2100      	movs	r1, #0
 802693a:	54d1      	strb	r1, [r2, r3]
}
 802693c:	bd38      	pop	{r3, r4, r5, pc}
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 802693e:	4620      	mov	r0, r4
 8026940:	f7ff fede 	bl	8026700 <mg_iobuf_resize>
 8026944:	e7ed      	b.n	8026922 <mg_pfn_iobuf_private+0x12>
  } else if (io->len < io->size) {
 8026946:	4293      	cmp	r3, r2
 8026948:	d2f8      	bcs.n	802693c <mg_pfn_iobuf_private+0x2c>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 802694a:	6822      	ldr	r2, [r4, #0]
 802694c:	1c59      	adds	r1, r3, #1
 802694e:	60a1      	str	r1, [r4, #8]
 8026950:	2100      	movs	r1, #0
 8026952:	54d1      	strb	r1, [r2, r3]
}
 8026954:	e7f2      	b.n	802693c <mg_pfn_iobuf_private+0x2c>

08026956 <mg_pfn_iobuf>:
void mg_pfn_iobuf(char ch, void *param) {
 8026956:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, true);
 8026958:	2201      	movs	r2, #1
 802695a:	f7ff ffd9 	bl	8026910 <mg_pfn_iobuf_private>
}
 802695e:	bd08      	pop	{r3, pc}

08026960 <mg_putchar_iobuf_static>:
static void mg_putchar_iobuf_static(char ch, void *param) {
 8026960:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, false);
 8026962:	2200      	movs	r2, #0
 8026964:	f7ff ffd4 	bl	8026910 <mg_pfn_iobuf_private>
}
 8026968:	bd08      	pop	{r3, pc}
	...

0802696c <mg_close_conn>:
void mg_close_conn(struct mg_connection *c) {
 802696c:	b510      	push	{r4, lr}
 802696e:	4604      	mov	r4, r0
  mg_resolve_cancel(c);  // Close any pending DNS query
 8026970:	f7fb fcc9 	bl	8022306 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 8026974:	6862      	ldr	r2, [r4, #4]
 8026976:	e000      	b.n	802697a <mg_close_conn+0xe>
 8026978:	461a      	mov	r2, r3
 802697a:	6813      	ldr	r3, [r2, #0]
 802697c:	42a3      	cmp	r3, r4
 802697e:	d1fb      	bne.n	8026978 <mg_close_conn+0xc>
 8026980:	6823      	ldr	r3, [r4, #0]
 8026982:	6013      	str	r3, [r2, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 8026984:	6863      	ldr	r3, [r4, #4]
 8026986:	689a      	ldr	r2, [r3, #8]
 8026988:	42a2      	cmp	r2, r4
 802698a:	d020      	beq.n	80269ce <mg_close_conn+0x62>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 802698c:	6863      	ldr	r3, [r4, #4]
 802698e:	691a      	ldr	r2, [r3, #16]
 8026990:	42a2      	cmp	r2, r4
 8026992:	d01f      	beq.n	80269d4 <mg_close_conn+0x68>
  mg_call(c, MG_EV_CLOSE, NULL);
 8026994:	2200      	movs	r2, #0
 8026996:	2109      	movs	r1, #9
 8026998:	4620      	mov	r0, r4
 802699a:	f7fb fd15 	bl	80223c8 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 802699e:	4b15      	ldr	r3, [pc, #84]	@ (80269f4 <mg_close_conn+0x88>)
 80269a0:	681b      	ldr	r3, [r3, #0]
 80269a2:	2b02      	cmp	r3, #2
 80269a4:	dc19      	bgt.n	80269da <mg_close_conn+0x6e>
  mg_iobuf_free(&c->recv);
 80269a6:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80269aa:	f7ff ff68 	bl	802687e <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 80269ae:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 80269b2:	f7ff ff64 	bl	802687e <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 80269b6:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80269ba:	f7ff ff60 	bl	802687e <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 80269be:	21b0      	movs	r1, #176	@ 0xb0
 80269c0:	4620      	mov	r0, r4
 80269c2:	f7fe fc5b 	bl	802527c <mg_bzero>
  free(c);
 80269c6:	4620      	mov	r0, r4
 80269c8:	f7f3 fd50 	bl	801a46c <vPortFree>
}
 80269cc:	bd10      	pop	{r4, pc}
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 80269ce:	2200      	movs	r2, #0
 80269d0:	609a      	str	r2, [r3, #8]
 80269d2:	e7db      	b.n	802698c <mg_close_conn+0x20>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 80269d4:	2200      	movs	r2, #0
 80269d6:	611a      	str	r2, [r3, #16]
 80269d8:	e7dc      	b.n	8026994 <mg_close_conn+0x28>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 80269da:	4b07      	ldr	r3, [pc, #28]	@ (80269f8 <mg_close_conn+0x8c>)
 80269dc:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 80269e0:	4906      	ldr	r1, [pc, #24]	@ (80269fc <mg_close_conn+0x90>)
 80269e2:	2003      	movs	r0, #3
 80269e4:	f7ff f850 	bl	8025a88 <mg_log_prefix>
 80269e8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80269ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80269ec:	4804      	ldr	r0, [pc, #16]	@ (8026a00 <mg_close_conn+0x94>)
 80269ee:	f7fc ff35 	bl	802385c <mg_log>
 80269f2:	e7d8      	b.n	80269a6 <mg_close_conn+0x3a>
 80269f4:	2000012c 	.word	0x2000012c
 80269f8:	0803aa38 	.word	0x0803aa38
 80269fc:	0803a050 	.word	0x0803a050
 8026a00:	0803a354 	.word	0x0803a354

08026a04 <close_conn>:
static void close_conn(struct mg_connection *c) {
 8026a04:	b510      	push	{r4, lr}
 8026a06:	4604      	mov	r4, r0
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8026a08:	30d0      	adds	r0, #208	@ 0xd0
 8026a0a:	f7ff ff38 	bl	802687e <mg_iobuf_free>
  mg_close_conn(c);
 8026a0e:	4620      	mov	r0, r4
 8026a10:	f7ff ffac 	bl	802696c <mg_close_conn>
}
 8026a14:	bd10      	pop	{r4, pc}
	...

08026a18 <mg_listen>:
                                mg_event_handler_t fn, void *fn_data) {
 8026a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026a1c:	4606      	mov	r6, r0
 8026a1e:	460d      	mov	r5, r1
 8026a20:	4690      	mov	r8, r2
 8026a22:	461f      	mov	r7, r3
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 8026a24:	f7fc fa42 	bl	8022eac <mg_alloc_conn>
 8026a28:	4604      	mov	r4, r0
 8026a2a:	2800      	cmp	r0, #0
 8026a2c:	d03f      	beq.n	8026aae <mg_listen+0x96>
  } else if (!mg_open_listener(c, url)) {
 8026a2e:	4629      	mov	r1, r5
 8026a30:	f7fe fe5b 	bl	80256ea <mg_open_listener>
 8026a34:	2800      	cmp	r0, #0
 8026a36:	d04d      	beq.n	8026ad4 <mg_listen+0xbc>
    c->is_listening = 1;
 8026a38:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8026a3c:	f043 0301 	orr.w	r3, r3, #1
 8026a40:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 8026a44:	2204      	movs	r2, #4
 8026a46:	492f      	ldr	r1, [pc, #188]	@ (8026b04 <mg_listen+0xec>)
 8026a48:	4628      	mov	r0, r5
 8026a4a:	f005 fc4e 	bl	802c2ea <strncmp>
 8026a4e:	fab0 f080 	clz	r0, r0
 8026a52:	0940      	lsrs	r0, r0, #5
 8026a54:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8026a58:	f360 0300 	bfi	r3, r0, #0, #1
 8026a5c:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8026a60:	6833      	ldr	r3, [r6, #0]
 8026a62:	6023      	str	r3, [r4, #0]
 8026a64:	6034      	str	r4, [r6, #0]
    c->fn = fn;
 8026a66:	f8c4 8078 	str.w	r8, [r4, #120]	@ 0x78
    c->fn_data = fn_data;
 8026a6a:	67e7      	str	r7, [r4, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 8026a6c:	2200      	movs	r2, #0
 8026a6e:	2101      	movs	r1, #1
 8026a70:	4620      	mov	r0, r4
 8026a72:	f7fb fca9 	bl	80223c8 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 8026a76:	4628      	mov	r0, r5
 8026a78:	f7fe fb52 	bl	8025120 <mg_url_is_ssl>
 8026a7c:	b128      	cbz	r0, 8026a8a <mg_listen+0x72>
 8026a7e:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8026a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026a86:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8026a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8026b08 <mg_listen+0xf0>)
 8026a8c:	681b      	ldr	r3, [r3, #0]
 8026a8e:	2b02      	cmp	r3, #2
 8026a90:	dd11      	ble.n	8026ab6 <mg_listen+0x9e>
 8026a92:	4b1e      	ldr	r3, [pc, #120]	@ (8026b0c <mg_listen+0xf4>)
 8026a94:	f241 22e1 	movw	r2, #4833	@ 0x12e1
 8026a98:	491d      	ldr	r1, [pc, #116]	@ (8026b10 <mg_listen+0xf8>)
 8026a9a:	2003      	movs	r0, #3
 8026a9c:	f7fe fff4 	bl	8025a88 <mg_log_prefix>
 8026aa0:	462b      	mov	r3, r5
 8026aa2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8026aa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026aa6:	481b      	ldr	r0, [pc, #108]	@ (8026b14 <mg_listen+0xfc>)
 8026aa8:	f7fc fed8 	bl	802385c <mg_log>
  return c;
 8026aac:	e003      	b.n	8026ab6 <mg_listen+0x9e>
    MG_ERROR(("OOM %s", url));
 8026aae:	4b16      	ldr	r3, [pc, #88]	@ (8026b08 <mg_listen+0xf0>)
 8026ab0:	681b      	ldr	r3, [r3, #0]
 8026ab2:	2b00      	cmp	r3, #0
 8026ab4:	dc02      	bgt.n	8026abc <mg_listen+0xa4>
}
 8026ab6:	4620      	mov	r0, r4
 8026ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("OOM %s", url));
 8026abc:	4b13      	ldr	r3, [pc, #76]	@ (8026b0c <mg_listen+0xf4>)
 8026abe:	f241 22d3 	movw	r2, #4819	@ 0x12d3
 8026ac2:	4913      	ldr	r1, [pc, #76]	@ (8026b10 <mg_listen+0xf8>)
 8026ac4:	2001      	movs	r0, #1
 8026ac6:	f7fe ffdf 	bl	8025a88 <mg_log_prefix>
 8026aca:	4629      	mov	r1, r5
 8026acc:	4812      	ldr	r0, [pc, #72]	@ (8026b18 <mg_listen+0x100>)
 8026ace:	f7fc fec5 	bl	802385c <mg_log>
 8026ad2:	e7f0      	b.n	8026ab6 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8026ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8026b08 <mg_listen+0xf0>)
 8026ad6:	681b      	ldr	r3, [r3, #0]
 8026ad8:	2b00      	cmp	r3, #0
 8026ada:	dc04      	bgt.n	8026ae6 <mg_listen+0xce>
    free(c);
 8026adc:	4620      	mov	r0, r4
 8026ade:	f7f3 fcc5 	bl	801a46c <vPortFree>
    c = NULL;
 8026ae2:	2400      	movs	r4, #0
 8026ae4:	e7e7      	b.n	8026ab6 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8026ae6:	4b09      	ldr	r3, [pc, #36]	@ (8026b0c <mg_listen+0xf4>)
 8026ae8:	f241 22d5 	movw	r2, #4821	@ 0x12d5
 8026aec:	4908      	ldr	r1, [pc, #32]	@ (8026b10 <mg_listen+0xf8>)
 8026aee:	2001      	movs	r0, #1
 8026af0:	f7fe ffca 	bl	8025a88 <mg_log_prefix>
 8026af4:	f006 fdc8 	bl	802d688 <__errno>
 8026af8:	6802      	ldr	r2, [r0, #0]
 8026afa:	4629      	mov	r1, r5
 8026afc:	4807      	ldr	r0, [pc, #28]	@ (8026b1c <mg_listen+0x104>)
 8026afe:	f7fc fead 	bl	802385c <mg_log>
 8026b02:	e7eb      	b.n	8026adc <mg_listen+0xc4>
 8026b04:	0803a384 	.word	0x0803a384
 8026b08:	2000012c 	.word	0x2000012c
 8026b0c:	0803aa20 	.word	0x0803aa20
 8026b10:	0803a050 	.word	0x0803a050
 8026b14:	0803a0ac 	.word	0x0803a0ac
 8026b18:	0803a364 	.word	0x0803a364
 8026b1c:	0803a36c 	.word	0x0803a36c

08026b20 <mg_http_listen>:
                                     mg_event_handler_t fn, void *fn_data) {
 8026b20:	b508      	push	{r3, lr}
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8026b22:	f7ff ff79 	bl	8026a18 <mg_listen>
  if (c != NULL) c->pfn = http_cb;
 8026b26:	b110      	cbz	r0, 8026b2e <mg_http_listen+0xe>
 8026b28:	4b01      	ldr	r3, [pc, #4]	@ (8026b30 <mg_http_listen+0x10>)
 8026b2a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 8026b2e:	bd08      	pop	{r3, pc}
 8026b30:	08025d0d 	.word	0x08025d0d

08026b34 <trim_len>:
static size_t trim_len(struct mg_connection *c, size_t len) {
 8026b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026b38:	4605      	mov	r5, r0
 8026b3a:	460c      	mov	r4, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8026b3c:	6843      	ldr	r3, [r0, #4]
 8026b3e:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8026b40:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8026b44:	f013 0301 	ands.w	r3, r3, #1
 8026b48:	d02c      	beq.n	8026ba4 <trim_len+0x70>
 8026b4a:	2608      	movs	r6, #8
  size_t max_headers_len =
 8026b4c:	f106 0826 	add.w	r8, r6, #38	@ 0x26
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 8026b50:	bb53      	cbnz	r3, 8026ba8 <trim_len+0x74>
 8026b52:	3618      	adds	r6, #24
  if (len + max_headers_len > ifp->tx.len) {
 8026b54:	eb08 0304 	add.w	r3, r8, r4
 8026b58:	69ba      	ldr	r2, [r7, #24]
 8026b5a:	4293      	cmp	r3, r2
 8026b5c:	d901      	bls.n	8026b62 <trim_len+0x2e>
    len = ifp->tx.len - max_headers_len;
 8026b5e:	eba2 0408 	sub.w	r4, r2, r8
  if (ifp->mtu < min_mtu) {
 8026b62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8026b66:	42b3      	cmp	r3, r6
 8026b68:	d205      	bcs.n	8026b76 <trim_len+0x42>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 8026b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8026bdc <trim_len+0xa8>)
 8026b6c:	681b      	ldr	r3, [r3, #0]
 8026b6e:	2b00      	cmp	r3, #0
 8026b70:	dc1c      	bgt.n	8026bac <trim_len+0x78>
    ifp->mtu = (uint16_t) min_mtu;
 8026b72:	f8a7 6044 	strh.w	r6, [r7, #68]	@ 0x44
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 8026b76:	eb04 0308 	add.w	r3, r4, r8
 8026b7a:	3b0e      	subs	r3, #14
 8026b7c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8026b80:	4293      	cmp	r3, r2
 8026b82:	d90c      	bls.n	8026b9e <trim_len+0x6a>
    len = ifp->mtu - max_headers_len + eth_h_len;
 8026b84:	eba2 0208 	sub.w	r2, r2, r8
 8026b88:	f102 040e 	add.w	r4, r2, #14
    if (c->is_udp) {
 8026b8c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8026b90:	f013 0f01 	tst.w	r3, #1
 8026b94:	d003      	beq.n	8026b9e <trim_len+0x6a>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8026b96:	4b11      	ldr	r3, [pc, #68]	@ (8026bdc <trim_len+0xa8>)
 8026b98:	681b      	ldr	r3, [r3, #0]
 8026b9a:	2b00      	cmp	r3, #0
 8026b9c:	dc12      	bgt.n	8026bc4 <trim_len+0x90>
}
 8026b9e:	4620      	mov	r0, r4
 8026ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8026ba4:	263c      	movs	r6, #60	@ 0x3c
 8026ba6:	e7d1      	b.n	8026b4c <trim_len+0x18>
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 8026ba8:	2644      	movs	r6, #68	@ 0x44
 8026baa:	e7d3      	b.n	8026b54 <trim_len+0x20>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 8026bac:	4b0c      	ldr	r3, [pc, #48]	@ (8026be0 <trim_len+0xac>)
 8026bae:	f241 528c 	movw	r2, #5516	@ 0x158c
 8026bb2:	490c      	ldr	r1, [pc, #48]	@ (8026be4 <trim_len+0xb0>)
 8026bb4:	2001      	movs	r0, #1
 8026bb6:	f7fe ff67 	bl	8025a88 <mg_log_prefix>
 8026bba:	4631      	mov	r1, r6
 8026bbc:	480a      	ldr	r0, [pc, #40]	@ (8026be8 <trim_len+0xb4>)
 8026bbe:	f7fc fe4d 	bl	802385c <mg_log>
 8026bc2:	e7d6      	b.n	8026b72 <trim_len+0x3e>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8026bc4:	4b06      	ldr	r3, [pc, #24]	@ (8026be0 <trim_len+0xac>)
 8026bc6:	f241 5293 	movw	r2, #5523	@ 0x1593
 8026bca:	4906      	ldr	r1, [pc, #24]	@ (8026be4 <trim_len+0xb0>)
 8026bcc:	2001      	movs	r0, #1
 8026bce:	f7fe ff5b 	bl	8025a88 <mg_log_prefix>
 8026bd2:	4806      	ldr	r0, [pc, #24]	@ (8026bec <trim_len+0xb8>)
 8026bd4:	f7fc fe42 	bl	802385c <mg_log>
 8026bd8:	e7e1      	b.n	8026b9e <trim_len+0x6a>
 8026bda:	bf00      	nop
 8026bdc:	2000012c 	.word	0x2000012c
 8026be0:	0803aa14 	.word	0x0803aa14
 8026be4:	0803a050 	.word	0x0803a050
 8026be8:	0803a38c 	.word	0x0803a38c
 8026bec:	0803a3b8 	.word	0x0803a3b8

08026bf0 <mg_send>:
bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8026bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026bf2:	b085      	sub	sp, #20
 8026bf4:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8026bf6:	6843      	ldr	r3, [r0, #4]
 8026bf8:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8026bfa:	69c7      	ldr	r7, [r0, #28]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 8026bfc:	68ab      	ldr	r3, [r5, #8]
 8026bfe:	b123      	cbz	r3, 8026c0a <mg_send+0x1a>
 8026c00:	460e      	mov	r6, r1
 8026c02:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8026c06:	2b03      	cmp	r3, #3
 8026c08:	d006      	beq.n	8026c18 <mg_send+0x28>
    mg_error(c, "net down");
 8026c0a:	4913      	ldr	r1, [pc, #76]	@ (8026c58 <mg_send+0x68>)
 8026c0c:	4620      	mov	r0, r4
 8026c0e:	f7ff f823 	bl	8025c58 <mg_error>
  bool res = false;
 8026c12:	2000      	movs	r0, #0
}
 8026c14:	b005      	add	sp, #20
 8026c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (c->is_udp) {
 8026c18:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8026c1c:	f013 0f01 	tst.w	r3, #1
 8026c20:	d010      	beq.n	8026c44 <mg_send+0x54>
    len = trim_len(c, len);  // Trimming length if necessary
 8026c22:	4611      	mov	r1, r2
 8026c24:	f7ff ff86 	bl	8026b34 <trim_len>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8026c28:	68aa      	ldr	r2, [r5, #8]
 8026c2a:	9003      	str	r0, [sp, #12]
 8026c2c:	9602      	str	r6, [sp, #8]
 8026c2e:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8026c30:	9301      	str	r3, [sp, #4]
 8026c32:	9700      	str	r7, [sp, #0]
 8026c34:	8b23      	ldrh	r3, [r4, #24]
 8026c36:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8026c3a:	4628      	mov	r0, r5
 8026c3c:	f7fe fcd3 	bl	80255e6 <tx_udp>
    res = true;
 8026c40:	2001      	movs	r0, #1
 8026c42:	e7e7      	b.n	8026c14 <mg_send+0x24>
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 8026c44:	4613      	mov	r3, r2
 8026c46:	460a      	mov	r2, r1
 8026c48:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8026c4a:	3048      	adds	r0, #72	@ 0x48
 8026c4c:	f7ff fde5 	bl	802681a <mg_iobuf_add>
 8026c50:	3800      	subs	r0, #0
 8026c52:	bf18      	it	ne
 8026c54:	2001      	movne	r0, #1
 8026c56:	e7dd      	b.n	8026c14 <mg_send+0x24>
 8026c58:	0803a3e4 	.word	0x0803a3e4

08026c5c <mg_dns_send>:
                        uint16_t txnid, bool ipv6) {
 8026c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026c5e:	b0c5      	sub	sp, #276	@ 0x114
 8026c60:	4606      	mov	r6, r0
 8026c62:	460d      	mov	r5, r1
 8026c64:	4614      	mov	r4, r2
 8026c66:	461f      	mov	r7, r3
  memset(&pkt, 0, sizeof(pkt));
 8026c68:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8026c6c:	2100      	movs	r1, #0
 8026c6e:	a801      	add	r0, sp, #4
 8026c70:	f005 fb06 	bl	802c280 <memset>
  pkt.header.txnid = mg_htons(txnid);
 8026c74:	4620      	mov	r0, r4
 8026c76:	f7fe fc01 	bl	802547c <mg_ntohs>
 8026c7a:	f8ad 0004 	strh.w	r0, [sp, #4]
  pkt.header.flags = mg_htons(0x100);
 8026c7e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8026c82:	f7fe fbfb 	bl	802547c <mg_ntohs>
 8026c86:	f8ad 0006 	strh.w	r0, [sp, #6]
  pkt.header.num_questions = mg_htons(1);
 8026c8a:	2001      	movs	r0, #1
 8026c8c:	f7fe fbf6 	bl	802547c <mg_ntohs>
 8026c90:	f8ad 0008 	strh.w	r0, [sp, #8]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8026c94:	f04f 0c00 	mov.w	ip, #0
 8026c98:	4664      	mov	r4, ip
 8026c9a:	e015      	b.n	8026cc8 <mg_dns_send+0x6c>
      pkt.data[n] = (uint8_t) (i - n);
 8026c9c:	eba4 020c 	sub.w	r2, r4, ip
 8026ca0:	ab01      	add	r3, sp, #4
 8026ca2:	4463      	add	r3, ip
 8026ca4:	731a      	strb	r2, [r3, #12]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8026ca6:	f10c 0309 	add.w	r3, ip, #9
 8026caa:	aa01      	add	r2, sp, #4
 8026cac:	18d0      	adds	r0, r2, r3
 8026cae:	6829      	ldr	r1, [r5, #0]
 8026cb0:	eba4 020c 	sub.w	r2, r4, ip
 8026cb4:	4461      	add	r1, ip
 8026cb6:	3004      	adds	r0, #4
 8026cb8:	f006 fd1e 	bl	802d6f8 <memcpy>
      n = i + 1;
 8026cbc:	f104 0c01 	add.w	ip, r4, #1
    if (i >= name->len) break;
 8026cc0:	686a      	ldr	r2, [r5, #4]
 8026cc2:	42a2      	cmp	r2, r4
 8026cc4:	d90a      	bls.n	8026cdc <mg_dns_send+0x80>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8026cc6:	3401      	adds	r4, #1
 8026cc8:	2cfa      	cmp	r4, #250	@ 0xfa
 8026cca:	d807      	bhi.n	8026cdc <mg_dns_send+0x80>
    if (name->buf[i] == '.' || i >= name->len) {
 8026ccc:	682b      	ldr	r3, [r5, #0]
 8026cce:	5d1a      	ldrb	r2, [r3, r4]
 8026cd0:	2a2e      	cmp	r2, #46	@ 0x2e
 8026cd2:	d0e3      	beq.n	8026c9c <mg_dns_send+0x40>
 8026cd4:	686b      	ldr	r3, [r5, #4]
 8026cd6:	42a3      	cmp	r3, r4
 8026cd8:	d8f2      	bhi.n	8026cc0 <mg_dns_send+0x64>
 8026cda:	e7df      	b.n	8026c9c <mg_dns_send+0x40>
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 8026cdc:	f10c 0308 	add.w	r3, ip, #8
 8026ce0:	aa01      	add	r2, sp, #4
 8026ce2:	4413      	add	r3, r2
 8026ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8026d10 <mg_dns_send+0xb4>)
 8026ce6:	f8d2 0220 	ldr.w	r0, [r2, #544]	@ 0x220
 8026cea:	6058      	str	r0, [r3, #4]
 8026cec:	f892 2224 	ldrb.w	r2, [r2, #548]	@ 0x224
 8026cf0:	721a      	strb	r2, [r3, #8]
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8026cf2:	b12f      	cbz	r7, 8026d00 <mg_dns_send+0xa4>
 8026cf4:	f10c 0302 	add.w	r3, ip, #2
 8026cf8:	aa01      	add	r2, sp, #4
 8026cfa:	4413      	add	r3, r2
 8026cfc:	221c      	movs	r2, #28
 8026cfe:	731a      	strb	r2, [r3, #12]
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8026d00:	f10c 0211 	add.w	r2, ip, #17
 8026d04:	a901      	add	r1, sp, #4
 8026d06:	4630      	mov	r0, r6
 8026d08:	f7ff ff72 	bl	8026bf0 <mg_send>
}
 8026d0c:	b045      	add	sp, #276	@ 0x114
 8026d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026d10:	080355cc 	.word	0x080355cc

08026d14 <mg_mqtt_send_header>:
                         uint32_t len) {
 8026d14:	b500      	push	{lr}
 8026d16:	b083      	sub	sp, #12
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 8026d18:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8026d1c:	f88d 2000 	strb.w	r2, [sp]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 8026d20:	f10d 0201 	add.w	r2, sp, #1
    *vlen = len % 0x80;
 8026d24:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8026d28:	7011      	strb	r1, [r2, #0]
    if (len > 0) *vlen |= 0x80;
 8026d2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8026d2c:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8026d30:	d90e      	bls.n	8026d50 <mg_mqtt_send_header+0x3c>
 8026d32:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 8026d36:	f802 1b01 	strb.w	r1, [r2], #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 8026d3a:	f10d 0105 	add.w	r1, sp, #5
 8026d3e:	428a      	cmp	r2, r1
 8026d40:	d3f0      	bcc.n	8026d24 <mg_mqtt_send_header+0x10>
  mg_send(c, buf, (size_t) (vlen - buf));
 8026d42:	4669      	mov	r1, sp
 8026d44:	1a52      	subs	r2, r2, r1
 8026d46:	f7ff ff53 	bl	8026bf0 <mg_send>
}
 8026d4a:	b003      	add	sp, #12
 8026d4c:	f85d fb04 	ldr.w	pc, [sp], #4
    vlen++;
 8026d50:	3201      	adds	r2, #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 8026d52:	e7f6      	b.n	8026d42 <mg_mqtt_send_header+0x2e>

08026d54 <mg_send_u32>:
static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 8026d54:	b500      	push	{lr}
 8026d56:	b083      	sub	sp, #12
 8026d58:	9101      	str	r1, [sp, #4]
  mg_send(c, &value, sizeof(value));
 8026d5a:	2204      	movs	r2, #4
 8026d5c:	eb0d 0102 	add.w	r1, sp, r2
 8026d60:	f7ff ff46 	bl	8026bf0 <mg_send>
}
 8026d64:	b003      	add	sp, #12
 8026d66:	f85d fb04 	ldr.w	pc, [sp], #4

08026d6a <mg_send_u16>:
static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 8026d6a:	b500      	push	{lr}
 8026d6c:	b083      	sub	sp, #12
 8026d6e:	f8ad 1006 	strh.w	r1, [sp, #6]
  mg_send(c, &value, sizeof(value));
 8026d72:	2202      	movs	r2, #2
 8026d74:	f10d 0106 	add.w	r1, sp, #6
 8026d78:	f7ff ff3a 	bl	8026bf0 <mg_send>
}
 8026d7c:	b003      	add	sp, #12
 8026d7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08026d84 <mg_send_mqtt_properties>:
                                    struct mg_mqtt_prop *props, size_t nprops) {
 8026d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026d88:	b083      	sub	sp, #12
 8026d8a:	4606      	mov	r6, r0
 8026d8c:	460f      	mov	r7, r1
 8026d8e:	4691      	mov	r9, r2
  size_t total_size = get_properties_length(props, nprops);
 8026d90:	4611      	mov	r1, r2
 8026d92:	4638      	mov	r0, r7
 8026d94:	f7f9 fe82 	bl	8020a9c <get_properties_length>
 8026d98:	4601      	mov	r1, r0
  uint8_t buf_v[4] = {0, 0, 0, 0};
 8026d9a:	2500      	movs	r5, #0
 8026d9c:	9501      	str	r5, [sp, #4]
  uint8_t buf[4] = {0, 0, 0, 0};
 8026d9e:	9500      	str	r5, [sp, #0]
  size_t i, len = encode_varint(buf, total_size);
 8026da0:	4668      	mov	r0, sp
 8026da2:	f7f9 fe2c 	bl	80209fe <encode_varint>
 8026da6:	4602      	mov	r2, r0
  mg_send(c, buf, (size_t) len);
 8026da8:	4669      	mov	r1, sp
 8026daa:	4630      	mov	r0, r6
 8026dac:	f7ff ff20 	bl	8026bf0 <mg_send>
  for (i = 0; i < nprops; i++) {
 8026db0:	e018      	b.n	8026de4 <mg_send_mqtt_properties+0x60>
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 8026db2:	89a0      	ldrh	r0, [r4, #12]
 8026db4:	f7fe fb62 	bl	802547c <mg_ntohs>
 8026db8:	4601      	mov	r1, r0
 8026dba:	4630      	mov	r0, r6
 8026dbc:	f7ff ffd5 	bl	8026d6a <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 8026dc0:	68e2      	ldr	r2, [r4, #12]
 8026dc2:	68a1      	ldr	r1, [r4, #8]
 8026dc4:	4630      	mov	r0, r6
 8026dc6:	f7ff ff13 	bl	8026bf0 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8026dca:	8aa0      	ldrh	r0, [r4, #20]
 8026dcc:	f7fe fb56 	bl	802547c <mg_ntohs>
 8026dd0:	4601      	mov	r1, r0
 8026dd2:	4630      	mov	r0, r6
 8026dd4:	f7ff ffc9 	bl	8026d6a <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8026dd8:	6962      	ldr	r2, [r4, #20]
 8026dda:	6921      	ldr	r1, [r4, #16]
 8026ddc:	4630      	mov	r0, r6
 8026dde:	f7ff ff07 	bl	8026bf0 <mg_send>
  for (i = 0; i < nprops; i++) {
 8026de2:	3501      	adds	r5, #1
 8026de4:	454d      	cmp	r5, r9
 8026de6:	d25b      	bcs.n	8026ea0 <mg_send_mqtt_properties+0x11c>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 8026de8:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8026dec:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8026df0:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8026df4:	2201      	movs	r2, #1
 8026df6:	4621      	mov	r1, r4
 8026df8:	4630      	mov	r0, r6
 8026dfa:	f7ff fef9 	bl	8026bf0 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 8026dfe:	f817 0008 	ldrb.w	r0, [r7, r8]
 8026e02:	f7f9 fe37 	bl	8020a74 <mqtt_prop_type_by_id>
 8026e06:	2806      	cmp	r0, #6
 8026e08:	d8eb      	bhi.n	8026de2 <mg_send_mqtt_properties+0x5e>
 8026e0a:	a301      	add	r3, pc, #4	@ (adr r3, 8026e10 <mg_send_mqtt_properties+0x8c>)
 8026e0c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8026e10:	08026e2d 	.word	0x08026e2d
 8026e14:	08026e59 	.word	0x08026e59
 8026e18:	08026db3 	.word	0x08026db3
 8026e1c:	08026e73 	.word	0x08026e73
 8026e20:	08026e8d 	.word	0x08026e8d
 8026e24:	08026e49 	.word	0x08026e49
 8026e28:	08026e39 	.word	0x08026e39
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 8026e2c:	2201      	movs	r2, #1
 8026e2e:	1d21      	adds	r1, r4, #4
 8026e30:	4630      	mov	r0, r6
 8026e32:	f7ff fedd 	bl	8026bf0 <mg_send>
        break;
 8026e36:	e7d4      	b.n	8026de2 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 8026e38:	88a0      	ldrh	r0, [r4, #4]
 8026e3a:	f7fe fb1f 	bl	802547c <mg_ntohs>
 8026e3e:	4601      	mov	r1, r0
 8026e40:	4630      	mov	r0, r6
 8026e42:	f7ff ff92 	bl	8026d6a <mg_send_u16>
        break;
 8026e46:	e7cc      	b.n	8026de2 <mg_send_mqtt_properties+0x5e>
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 8026e48:	6860      	ldr	r0, [r4, #4]
 8026e4a:	f7fe fa7f 	bl	802534c <mg_ntohl>
 8026e4e:	4601      	mov	r1, r0
 8026e50:	4630      	mov	r0, r6
 8026e52:	f7ff ff7f 	bl	8026d54 <mg_send_u32>
        break;
 8026e56:	e7c4      	b.n	8026de2 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8026e58:	8aa0      	ldrh	r0, [r4, #20]
 8026e5a:	f7fe fb0f 	bl	802547c <mg_ntohs>
 8026e5e:	4601      	mov	r1, r0
 8026e60:	4630      	mov	r0, r6
 8026e62:	f7ff ff82 	bl	8026d6a <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8026e66:	6962      	ldr	r2, [r4, #20]
 8026e68:	6921      	ldr	r1, [r4, #16]
 8026e6a:	4630      	mov	r0, r6
 8026e6c:	f7ff fec0 	bl	8026bf0 <mg_send>
        break;
 8026e70:	e7b7      	b.n	8026de2 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8026e72:	8aa0      	ldrh	r0, [r4, #20]
 8026e74:	f7fe fb02 	bl	802547c <mg_ntohs>
 8026e78:	4601      	mov	r1, r0
 8026e7a:	4630      	mov	r0, r6
 8026e7c:	f7ff ff75 	bl	8026d6a <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8026e80:	6962      	ldr	r2, [r4, #20]
 8026e82:	6921      	ldr	r1, [r4, #16]
 8026e84:	4630      	mov	r0, r6
 8026e86:	f7ff feb3 	bl	8026bf0 <mg_send>
        break;
 8026e8a:	e7aa      	b.n	8026de2 <mg_send_mqtt_properties+0x5e>
        len = encode_varint(buf_v, props[i].iv);
 8026e8c:	6861      	ldr	r1, [r4, #4]
 8026e8e:	a801      	add	r0, sp, #4
 8026e90:	f7f9 fdb5 	bl	80209fe <encode_varint>
 8026e94:	4602      	mov	r2, r0
        mg_send(c, buf_v, (size_t) len);
 8026e96:	a901      	add	r1, sp, #4
 8026e98:	4630      	mov	r0, r6
 8026e9a:	f7ff fea9 	bl	8026bf0 <mg_send>
        break;
 8026e9e:	e7a0      	b.n	8026de2 <mg_send_mqtt_properties+0x5e>
}
 8026ea0:	b003      	add	sp, #12
 8026ea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026ea6:	bf00      	nop

08026ea8 <mg_mqtt_login>:
void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8026ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026eaa:	b08b      	sub	sp, #44	@ 0x2c
 8026eac:	4605      	mov	r5, r0
 8026eae:	460c      	mov	r4, r1
  struct mg_str cid = opts->client_id;
 8026eb0:	ab02      	add	r3, sp, #8
 8026eb2:	f101 0210 	add.w	r2, r1, #16
 8026eb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026eba:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 8026ebe:	2300      	movs	r3, #0
 8026ec0:	f88d 3000 	strb.w	r3, [sp]
 8026ec4:	2204      	movs	r2, #4
 8026ec6:	f88d 2001 	strb.w	r2, [sp, #1]
 8026eca:	224d      	movs	r2, #77	@ 0x4d
 8026ecc:	f88d 2002 	strb.w	r2, [sp, #2]
 8026ed0:	2251      	movs	r2, #81	@ 0x51
 8026ed2:	f88d 2003 	strb.w	r2, [sp, #3]
 8026ed6:	2254      	movs	r2, #84	@ 0x54
 8026ed8:	f88d 2004 	strb.w	r2, [sp, #4]
 8026edc:	f88d 2005 	strb.w	r2, [sp, #5]
 8026ee0:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 8026ee4:	f88d 2006 	strb.w	r2, [sp, #6]
 8026ee8:	f88d 3007 	strb.w	r3, [sp, #7]
  if (cid.len == 0) {
 8026eec:	2900      	cmp	r1, #0
 8026eee:	f000 809f 	beq.w	8027030 <mg_mqtt_login+0x188>
  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 8026ef2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8026ef6:	b913      	cbnz	r3, 8026efe <mg_mqtt_login+0x56>
 8026ef8:	2304      	movs	r3, #4
 8026efa:	f88d 3006 	strb.w	r3, [sp, #6]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 8026efe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8026f02:	2b05      	cmp	r3, #5
 8026f04:	bf14      	ite	ne
 8026f06:	2300      	movne	r3, #0
 8026f08:	2301      	moveq	r3, #1
 8026f0a:	f895 20ad 	ldrb.w	r2, [r5, #173]	@ 0xad
 8026f0e:	f363 0282 	bfi	r2, r3, #2, #1
 8026f12:	f885 20ad 	strb.w	r2, [r5, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 8026f16:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8026f1a:	00d2      	lsls	r2, r2, #3
 8026f1c:	f002 0218 	and.w	r2, r2, #24
 8026f20:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->user.len > 0) {
 8026f24:	6863      	ldr	r3, [r4, #4]
 8026f26:	2b00      	cmp	r3, #0
 8026f28:	f000 808e 	beq.w	8027048 <mg_mqtt_login+0x1a0>
    total_len += 2 + (uint32_t) opts->user.len;
 8026f2c:	330e      	adds	r3, #14
    hdr[7] |= MQTT_HAS_USER_NAME;
 8026f2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8026f32:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->pass.len > 0) {
 8026f36:	68e2      	ldr	r2, [r4, #12]
 8026f38:	b13a      	cbz	r2, 8026f4a <mg_mqtt_login+0xa2>
    total_len += 2 + (uint32_t) opts->pass.len;
 8026f3a:	441a      	add	r2, r3
 8026f3c:	1c93      	adds	r3, r2, #2
    hdr[7] |= MQTT_HAS_PASSWORD;
 8026f3e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8026f42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8026f46:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 8026f4a:	69e2      	ldr	r2, [r4, #28]
 8026f4c:	b14a      	cbz	r2, 8026f62 <mg_mqtt_login+0xba>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 8026f4e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8026f50:	440a      	add	r2, r1
 8026f52:	441a      	add	r2, r3
 8026f54:	1d13      	adds	r3, r2, #4
    hdr[7] |= MQTT_HAS_WILL;
 8026f56:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8026f5a:	f042 0204 	orr.w	r2, r2, #4
 8026f5e:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 8026f62:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
 8026f66:	b90a      	cbnz	r2, 8026f6c <mg_mqtt_login+0xc4>
 8026f68:	9a03      	ldr	r2, [sp, #12]
 8026f6a:	b92a      	cbnz	r2, 8026f78 <mg_mqtt_login+0xd0>
 8026f6c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8026f70:	f042 0202 	orr.w	r2, r2, #2
 8026f74:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 8026f78:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 8026f7c:	b12a      	cbz	r2, 8026f8a <mg_mqtt_login+0xe2>
 8026f7e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8026f82:	f042 0220 	orr.w	r2, r2, #32
 8026f86:	f88d 2007 	strb.w	r2, [sp, #7]
  total_len += (uint32_t) cid.len;
 8026f8a:	9f03      	ldr	r7, [sp, #12]
 8026f8c:	18fe      	adds	r6, r7, r3
  if (c->is_mqtt5) {
 8026f8e:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8026f92:	f013 0f04 	tst.w	r3, #4
 8026f96:	d159      	bne.n	802704c <mg_mqtt_login+0x1a4>
  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 8026f98:	4633      	mov	r3, r6
 8026f9a:	2200      	movs	r2, #0
 8026f9c:	2101      	movs	r1, #1
 8026f9e:	4628      	mov	r0, r5
 8026fa0:	f7ff feb8 	bl	8026d14 <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 8026fa4:	2208      	movs	r2, #8
 8026fa6:	4669      	mov	r1, sp
 8026fa8:	4628      	mov	r0, r5
 8026faa:	f7ff fe21 	bl	8026bf0 <mg_send>
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 8026fae:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8026fb0:	f7fe fa64 	bl	802547c <mg_ntohs>
 8026fb4:	4601      	mov	r1, r0
 8026fb6:	4628      	mov	r0, r5
 8026fb8:	f7ff fed7 	bl	8026d6a <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8026fbc:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8026fc0:	f013 0f04 	tst.w	r3, #4
 8026fc4:	d152      	bne.n	802706c <mg_mqtt_login+0x1c4>
  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 8026fc6:	b2b8      	uxth	r0, r7
 8026fc8:	f7fe fa58 	bl	802547c <mg_ntohs>
 8026fcc:	4601      	mov	r1, r0
 8026fce:	4628      	mov	r0, r5
 8026fd0:	f7ff fecb 	bl	8026d6a <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 8026fd4:	463a      	mov	r2, r7
 8026fd6:	9902      	ldr	r1, [sp, #8]
 8026fd8:	4628      	mov	r0, r5
 8026fda:	f7ff fe09 	bl	8026bf0 <mg_send>
  if (hdr[7] & MQTT_HAS_WILL) {
 8026fde:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8026fe2:	f013 0f04 	tst.w	r3, #4
 8026fe6:	d01c      	beq.n	8027022 <mg_mqtt_login+0x17a>
    if (c->is_mqtt5)
 8026fe8:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8026fec:	f013 0f04 	tst.w	r3, #4
 8026ff0:	d142      	bne.n	8027078 <mg_mqtt_login+0x1d0>
    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8026ff2:	8ba0      	ldrh	r0, [r4, #28]
 8026ff4:	f7fe fa42 	bl	802547c <mg_ntohs>
 8026ff8:	4601      	mov	r1, r0
 8026ffa:	4628      	mov	r0, r5
 8026ffc:	f7ff feb5 	bl	8026d6a <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 8027000:	69e2      	ldr	r2, [r4, #28]
 8027002:	69a1      	ldr	r1, [r4, #24]
 8027004:	4628      	mov	r0, r5
 8027006:	f7ff fdf3 	bl	8026bf0 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 802700a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 802700c:	f7fe fa36 	bl	802547c <mg_ntohs>
 8027010:	4601      	mov	r1, r0
 8027012:	4628      	mov	r0, r5
 8027014:	f7ff fea9 	bl	8026d6a <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 8027018:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 802701a:	6a21      	ldr	r1, [r4, #32]
 802701c:	4628      	mov	r0, r5
 802701e:	f7ff fde7 	bl	8026bf0 <mg_send>
  if (opts->user.len > 0) {
 8027022:	6860      	ldr	r0, [r4, #4]
 8027024:	bb70      	cbnz	r0, 8027084 <mg_mqtt_login+0x1dc>
  if (opts->pass.len > 0) {
 8027026:	68e0      	ldr	r0, [r4, #12]
 8027028:	2800      	cmp	r0, #0
 802702a:	d138      	bne.n	802709e <mg_mqtt_login+0x1f6>
}
 802702c:	b00b      	add	sp, #44	@ 0x2c
 802702e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mg_random_str(client_id, sizeof(client_id) - 1);
 8027030:	2114      	movs	r1, #20
 8027032:	a804      	add	r0, sp, #16
 8027034:	f7fe f95e 	bl	80252f4 <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 8027038:	2300      	movs	r3, #0
 802703a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    cid = mg_str(client_id);
 802703e:	a904      	add	r1, sp, #16
 8027040:	a802      	add	r0, sp, #8
 8027042:	f7fc fde9 	bl	8023c18 <mg_str_s>
 8027046:	e754      	b.n	8026ef2 <mg_mqtt_login+0x4a>
  size_t total_len = 7 + 1 + 2 + 2;
 8027048:	230c      	movs	r3, #12
 802704a:	e774      	b.n	8026f36 <mg_mqtt_login+0x8e>
    total_len += get_props_size(opts->props, opts->num_props);
 802704c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802704e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8027050:	f7f9 fd68 	bl	8020b24 <get_props_size>
 8027054:	4406      	add	r6, r0
    if (hdr[7] & MQTT_HAS_WILL)
 8027056:	f89d 3007 	ldrb.w	r3, [sp, #7]
 802705a:	f013 0f04 	tst.w	r3, #4
 802705e:	d09b      	beq.n	8026f98 <mg_mqtt_login+0xf0>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 8027060:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8027062:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8027064:	f7f9 fd5e 	bl	8020b24 <get_props_size>
 8027068:	4406      	add	r6, r0
 802706a:	e795      	b.n	8026f98 <mg_mqtt_login+0xf0>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802706c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 802706e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8027070:	4628      	mov	r0, r5
 8027072:	f7ff fe87 	bl	8026d84 <mg_send_mqtt_properties>
 8027076:	e7a6      	b.n	8026fc6 <mg_mqtt_login+0x11e>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 8027078:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 802707a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802707c:	4628      	mov	r0, r5
 802707e:	f7ff fe81 	bl	8026d84 <mg_send_mqtt_properties>
 8027082:	e7b6      	b.n	8026ff2 <mg_mqtt_login+0x14a>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 8027084:	b280      	uxth	r0, r0
 8027086:	f7fe f9f9 	bl	802547c <mg_ntohs>
 802708a:	4601      	mov	r1, r0
 802708c:	4628      	mov	r0, r5
 802708e:	f7ff fe6c 	bl	8026d6a <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 8027092:	6862      	ldr	r2, [r4, #4]
 8027094:	6821      	ldr	r1, [r4, #0]
 8027096:	4628      	mov	r0, r5
 8027098:	f7ff fdaa 	bl	8026bf0 <mg_send>
 802709c:	e7c3      	b.n	8027026 <mg_mqtt_login+0x17e>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 802709e:	b280      	uxth	r0, r0
 80270a0:	f7fe f9ec 	bl	802547c <mg_ntohs>
 80270a4:	4601      	mov	r1, r0
 80270a6:	4628      	mov	r0, r5
 80270a8:	f7ff fe5f 	bl	8026d6a <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 80270ac:	68e2      	ldr	r2, [r4, #12]
 80270ae:	68a1      	ldr	r1, [r4, #8]
 80270b0:	4628      	mov	r0, r5
 80270b2:	f7ff fd9d 	bl	8026bf0 <mg_send>
}
 80270b6:	e7b9      	b.n	802702c <mg_mqtt_login+0x184>

080270b8 <mg_mqtt_sub>:
void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 80270b8:	b530      	push	{r4, r5, lr}
 80270ba:	b083      	sub	sp, #12
 80270bc:	4604      	mov	r4, r0
 80270be:	460d      	mov	r5, r1
  uint8_t qos_ = opts->qos & 3;
 80270c0:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80270c4:	f003 0303 	and.w	r3, r3, #3
 80270c8:	f88d 3007 	strb.w	r3, [sp, #7]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 80270cc:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 80270d0:	f013 0f04 	tst.w	r3, #4
 80270d4:	d133      	bne.n	802713e <mg_mqtt_sub+0x86>
 80270d6:	2000      	movs	r0, #0
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 80270d8:	69eb      	ldr	r3, [r5, #28]
 80270da:	4403      	add	r3, r0
  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 80270dc:	3305      	adds	r3, #5
 80270de:	2202      	movs	r2, #2
 80270e0:	2108      	movs	r1, #8
 80270e2:	4620      	mov	r0, r4
 80270e4:	f7ff fe16 	bl	8026d14 <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 80270e8:	6862      	ldr	r2, [r4, #4]
 80270ea:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80270ec:	3301      	adds	r3, #1
 80270ee:	b29b      	uxth	r3, r3
 80270f0:	8593      	strh	r3, [r2, #44]	@ 0x2c
 80270f2:	b91b      	cbnz	r3, 80270fc <mg_mqtt_sub+0x44>
 80270f4:	6862      	ldr	r2, [r4, #4]
 80270f6:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80270f8:	3301      	adds	r3, #1
 80270fa:	8593      	strh	r3, [r2, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 80270fc:	6863      	ldr	r3, [r4, #4]
 80270fe:	8d98      	ldrh	r0, [r3, #44]	@ 0x2c
 8027100:	f7fe f9bc 	bl	802547c <mg_ntohs>
 8027104:	4601      	mov	r1, r0
 8027106:	4620      	mov	r0, r4
 8027108:	f7ff fe2f 	bl	8026d6a <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802710c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027110:	f013 0f04 	tst.w	r3, #4
 8027114:	d118      	bne.n	8027148 <mg_mqtt_sub+0x90>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8027116:	8ba8      	ldrh	r0, [r5, #28]
 8027118:	f7fe f9b0 	bl	802547c <mg_ntohs>
 802711c:	4601      	mov	r1, r0
 802711e:	4620      	mov	r0, r4
 8027120:	f7ff fe23 	bl	8026d6a <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8027124:	69ea      	ldr	r2, [r5, #28]
 8027126:	69a9      	ldr	r1, [r5, #24]
 8027128:	4620      	mov	r0, r4
 802712a:	f7ff fd61 	bl	8026bf0 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 802712e:	2201      	movs	r2, #1
 8027130:	f10d 0107 	add.w	r1, sp, #7
 8027134:	4620      	mov	r0, r4
 8027136:	f7ff fd5b 	bl	8026bf0 <mg_send>
}
 802713a:	b003      	add	sp, #12
 802713c:	bd30      	pop	{r4, r5, pc}
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 802713e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8027140:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8027142:	f7f9 fcef 	bl	8020b24 <get_props_size>
 8027146:	e7c7      	b.n	80270d8 <mg_mqtt_sub+0x20>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8027148:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 802714a:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 802714c:	4620      	mov	r0, r4
 802714e:	f7ff fe19 	bl	8026d84 <mg_send_mqtt_properties>
 8027152:	e7e0      	b.n	8027116 <mg_mqtt_sub+0x5e>

08027154 <mg_mqtt_pub>:
uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8027154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027158:	b083      	sub	sp, #12
 802715a:	4605      	mov	r5, r0
 802715c:	460c      	mov	r4, r1
  uint16_t id = opts->retransmit_id;
 802715e:	f8b1 802c 	ldrh.w	r8, [r1, #44]	@ 0x2c
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8027162:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8027166:	005b      	lsls	r3, r3, #1
 8027168:	f003 0306 	and.w	r3, r3, #6
 802716c:	f891 202e 	ldrb.w	r2, [r1, #46]	@ 0x2e
 8027170:	2a00      	cmp	r2, #0
 8027172:	d057      	beq.n	8027224 <mg_mqtt_pub+0xd0>
 8027174:	2201      	movs	r2, #1
 8027176:	ea43 0a02 	orr.w	sl, r3, r2
 802717a:	4656      	mov	r6, sl
  size_t len = 2 + opts->topic.len + opts->message.len;
 802717c:	69e7      	ldr	r7, [r4, #28]
 802717e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8027180:	441f      	add	r7, r3
 8027182:	f107 0902 	add.w	r9, r7, #2
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8027186:	4b3a      	ldr	r3, [pc, #232]	@ (8027270 <mg_mqtt_pub+0x11c>)
 8027188:	681b      	ldr	r3, [r3, #0]
 802718a:	2b02      	cmp	r3, #2
 802718c:	dc4c      	bgt.n	8027228 <mg_mqtt_pub+0xd4>
  if (opts->qos > 0) len += 2;
 802718e:	f894 b028 	ldrb.w	fp, [r4, #40]	@ 0x28
 8027192:	f1bb 0f00 	cmp.w	fp, #0
 8027196:	d001      	beq.n	802719c <mg_mqtt_pub+0x48>
 8027198:	f107 0904 	add.w	r9, r7, #4
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 802719c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80271a0:	f013 0f04 	tst.w	r3, #4
 80271a4:	d152      	bne.n	802724c <mg_mqtt_pub+0xf8>
  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 80271a6:	f1bb 0f00 	cmp.w	fp, #0
 80271aa:	d004      	beq.n	80271b6 <mg_mqtt_pub+0x62>
 80271ac:	f1b8 0f00 	cmp.w	r8, #0
 80271b0:	d001      	beq.n	80271b6 <mg_mqtt_pub+0x62>
 80271b2:	f04a 0608 	orr.w	r6, sl, #8
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 80271b6:	464b      	mov	r3, r9
 80271b8:	4632      	mov	r2, r6
 80271ba:	2103      	movs	r1, #3
 80271bc:	4628      	mov	r0, r5
 80271be:	f7ff fda9 	bl	8026d14 <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 80271c2:	8ba0      	ldrh	r0, [r4, #28]
 80271c4:	f7fe f95a 	bl	802547c <mg_ntohs>
 80271c8:	4601      	mov	r1, r0
 80271ca:	4628      	mov	r0, r5
 80271cc:	f7ff fdcd 	bl	8026d6a <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 80271d0:	69e2      	ldr	r2, [r4, #28]
 80271d2:	69a1      	ldr	r1, [r4, #24]
 80271d4:	4628      	mov	r0, r5
 80271d6:	f7ff fd0b 	bl	8026bf0 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 80271da:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80271de:	b1b3      	cbz	r3, 802720e <mg_mqtt_pub+0xba>
    if (id == 0) {  // generate new one if not resending
 80271e0:	f1b8 0f00 	cmp.w	r8, #0
 80271e4:	d10c      	bne.n	8027200 <mg_mqtt_pub+0xac>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 80271e6:	686a      	ldr	r2, [r5, #4]
 80271e8:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80271ea:	3301      	adds	r3, #1
 80271ec:	b29b      	uxth	r3, r3
 80271ee:	8593      	strh	r3, [r2, #44]	@ 0x2c
 80271f0:	b91b      	cbnz	r3, 80271fa <mg_mqtt_pub+0xa6>
 80271f2:	686a      	ldr	r2, [r5, #4]
 80271f4:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80271f6:	3301      	adds	r3, #1
 80271f8:	8593      	strh	r3, [r2, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 80271fa:	686b      	ldr	r3, [r5, #4]
 80271fc:	f8b3 802c 	ldrh.w	r8, [r3, #44]	@ 0x2c
    mg_send_u16(c, mg_htons(id));
 8027200:	4640      	mov	r0, r8
 8027202:	f7fe f93b 	bl	802547c <mg_ntohs>
 8027206:	4601      	mov	r1, r0
 8027208:	4628      	mov	r0, r5
 802720a:	f7ff fdae 	bl	8026d6a <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802720e:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027212:	f013 0f04 	tst.w	r3, #4
 8027216:	d11f      	bne.n	8027258 <mg_mqtt_pub+0x104>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8027218:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 802721a:	bb1a      	cbnz	r2, 8027264 <mg_mqtt_pub+0x110>
}
 802721c:	4640      	mov	r0, r8
 802721e:	b003      	add	sp, #12
 8027220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8027224:	2200      	movs	r2, #0
 8027226:	e7a6      	b.n	8027176 <mg_mqtt_pub+0x22>
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8027228:	4b12      	ldr	r3, [pc, #72]	@ (8027274 <mg_mqtt_pub+0x120>)
 802722a:	f241 123c 	movw	r2, #4412	@ 0x113c
 802722e:	4912      	ldr	r1, [pc, #72]	@ (8027278 <mg_mqtt_pub+0x124>)
 8027230:	2003      	movs	r0, #3
 8027232:	f7fe fc29 	bl	8025a88 <mg_log_prefix>
 8027236:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8027238:	6a22      	ldr	r2, [r4, #32]
 802723a:	9201      	str	r2, [sp, #4]
 802723c:	9300      	str	r3, [sp, #0]
 802723e:	69a3      	ldr	r3, [r4, #24]
 8027240:	69e2      	ldr	r2, [r4, #28]
 8027242:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8027244:	480d      	ldr	r0, [pc, #52]	@ (802727c <mg_mqtt_pub+0x128>)
 8027246:	f7fc fb09 	bl	802385c <mg_log>
 802724a:	e7a0      	b.n	802718e <mg_mqtt_pub+0x3a>
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 802724c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802724e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8027250:	f7f9 fc68 	bl	8020b24 <get_props_size>
 8027254:	4481      	add	r9, r0
 8027256:	e7a6      	b.n	80271a6 <mg_mqtt_pub+0x52>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8027258:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 802725a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802725c:	4628      	mov	r0, r5
 802725e:	f7ff fd91 	bl	8026d84 <mg_send_mqtt_properties>
 8027262:	e7d9      	b.n	8027218 <mg_mqtt_pub+0xc4>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8027264:	6a21      	ldr	r1, [r4, #32]
 8027266:	4628      	mov	r0, r5
 8027268:	f7ff fcc2 	bl	8026bf0 <mg_send>
 802726c:	e7d6      	b.n	802721c <mg_mqtt_pub+0xc8>
 802726e:	bf00      	nop
 8027270:	2000012c 	.word	0x2000012c
 8027274:	0803aa50 	.word	0x0803aa50
 8027278:	0803a050 	.word	0x0803a050
 802727c:	0803a3f0 	.word	0x0803a3f0

08027280 <mqtt_cb>:
static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 8027280:	b530      	push	{r4, r5, lr}
 8027282:	b08f      	sub	sp, #60	@ 0x3c
 8027284:	4604      	mov	r4, r0
  if (ev == MG_EV_READ) {
 8027286:	2907      	cmp	r1, #7
 8027288:	f000 808f 	beq.w	80273aa <mqtt_cb+0x12a>
}
 802728c:	b00f      	add	sp, #60	@ 0x3c
 802728e:	bd30      	pop	{r4, r5, pc}
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8027290:	2204      	movs	r2, #4
 8027292:	e091      	b.n	80273b8 <mqtt_cb+0x138>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8027294:	4b73      	ldr	r3, [pc, #460]	@ (8027464 <mqtt_cb+0x1e4>)
 8027296:	681b      	ldr	r3, [r3, #0]
 8027298:	2b00      	cmp	r3, #0
 802729a:	dc06      	bgt.n	80272aa <mqtt_cb+0x2a>
        c->is_closing = 1;
 802729c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80272a0:	f043 0320 	orr.w	r3, r3, #32
 80272a4:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        break;
 80272a8:	e7f0      	b.n	802728c <mqtt_cb+0xc>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 80272aa:	4b6f      	ldr	r3, [pc, #444]	@ (8027468 <mqtt_cb+0x1e8>)
 80272ac:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 80272b0:	496e      	ldr	r1, [pc, #440]	@ (802746c <mqtt_cb+0x1ec>)
 80272b2:	2001      	movs	r0, #1
 80272b4:	f7fe fbe8 	bl	8025a88 <mg_log_prefix>
 80272b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80272ba:	486d      	ldr	r0, [pc, #436]	@ (8027470 <mqtt_cb+0x1f0>)
 80272bc:	f7fc face 	bl	802385c <mg_log>
 80272c0:	e7ec      	b.n	802729c <mqtt_cb+0x1c>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 80272c2:	4b69      	ldr	r3, [pc, #420]	@ (8027468 <mqtt_cb+0x1e8>)
 80272c4:	f241 12b5 	movw	r2, #4533	@ 0x11b5
 80272c8:	4968      	ldr	r1, [pc, #416]	@ (802746c <mqtt_cb+0x1ec>)
 80272ca:	2004      	movs	r0, #4
 80272cc:	f7fe fbdc 	bl	8025a88 <mg_log_prefix>
 80272d0:	9b06      	ldr	r3, [sp, #24]
 80272d2:	9301      	str	r3, [sp, #4]
 80272d4:	9b07      	ldr	r3, [sp, #28]
 80272d6:	9300      	str	r3, [sp, #0]
 80272d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80272da:	f89d 202a 	ldrb.w	r2, [sp, #42]	@ 0x2a
 80272de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80272e0:	4864      	ldr	r0, [pc, #400]	@ (8027474 <mqtt_cb+0x1f4>)
 80272e2:	f7fc fabb 	bl	802385c <mg_log>
 80272e6:	e077      	b.n	80273d8 <mqtt_cb+0x158>
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 80272e8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80272ea:	2111      	movs	r1, #17
 80272ec:	4620      	mov	r0, r4
 80272ee:	f7fb f86b 	bl	80223c8 <mg_call>
            if (mm.ack == 0) {
 80272f2:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 80272f6:	b97b      	cbnz	r3, 8027318 <mqtt_cb+0x98>
              MG_DEBUG(("%lu Connected", c->id));
 80272f8:	4b5a      	ldr	r3, [pc, #360]	@ (8027464 <mqtt_cb+0x1e4>)
 80272fa:	681b      	ldr	r3, [r3, #0]
 80272fc:	2b02      	cmp	r3, #2
 80272fe:	dd49      	ble.n	8027394 <mqtt_cb+0x114>
 8027300:	4b59      	ldr	r3, [pc, #356]	@ (8027468 <mqtt_cb+0x1e8>)
 8027302:	f241 12bb 	movw	r2, #4539	@ 0x11bb
 8027306:	4959      	ldr	r1, [pc, #356]	@ (802746c <mqtt_cb+0x1ec>)
 8027308:	2003      	movs	r0, #3
 802730a:	f7fe fbbd 	bl	8025a88 <mg_log_prefix>
 802730e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027310:	4859      	ldr	r0, [pc, #356]	@ (8027478 <mqtt_cb+0x1f8>)
 8027312:	f7fc faa3 	bl	802385c <mg_log>
 8027316:	e03d      	b.n	8027394 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8027318:	4b52      	ldr	r3, [pc, #328]	@ (8027464 <mqtt_cb+0x1e4>)
 802731a:	681b      	ldr	r3, [r3, #0]
 802731c:	2b00      	cmp	r3, #0
 802731e:	dc06      	bgt.n	802732e <mqtt_cb+0xae>
              c->is_closing = 1;
 8027320:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027324:	f043 0320 	orr.w	r3, r3, #32
 8027328:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 802732c:	e032      	b.n	8027394 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 802732e:	4b4e      	ldr	r3, [pc, #312]	@ (8027468 <mqtt_cb+0x1e8>)
 8027330:	f241 12bd 	movw	r2, #4541	@ 0x11bd
 8027334:	494d      	ldr	r1, [pc, #308]	@ (802746c <mqtt_cb+0x1ec>)
 8027336:	2001      	movs	r0, #1
 8027338:	f7fe fba6 	bl	8025a88 <mg_log_prefix>
 802733c:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 8027340:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027342:	484e      	ldr	r0, [pc, #312]	@ (802747c <mqtt_cb+0x1fc>)
 8027344:	f7fc fa8a 	bl	802385c <mg_log>
 8027348:	e7ea      	b.n	8027320 <mqtt_cb+0xa0>
            if (mm.qos > 0) {
 802734a:	f89d 502b 	ldrb.w	r5, [sp, #43]	@ 0x2b
 802734e:	b1e5      	cbz	r5, 802738a <mqtt_cb+0x10a>
              uint16_t id = mg_ntohs(mm.id);
 8027350:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8027354:	f7fe f892 	bl	802547c <mg_ntohs>
 8027358:	f8ad 000c 	strh.w	r0, [sp, #12]
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 802735c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027360:	f013 0f04 	tst.w	r3, #4
 8027364:	d14a      	bne.n	80273fc <mqtt_cb+0x17c>
              uint32_t remaining_len = sizeof(id);
 8027366:	2302      	movs	r3, #2
              mg_mqtt_send_header(
 8027368:	2d02      	cmp	r5, #2
 802736a:	d049      	beq.n	8027400 <mqtt_cb+0x180>
 802736c:	2104      	movs	r1, #4
 802736e:	2200      	movs	r2, #0
 8027370:	4620      	mov	r0, r4
 8027372:	f7ff fccf 	bl	8026d14 <mg_mqtt_send_header>
              mg_send(c, &id, sizeof(id));
 8027376:	2202      	movs	r2, #2
 8027378:	a903      	add	r1, sp, #12
 802737a:	4620      	mov	r0, r4
 802737c:	f7ff fc38 	bl	8026bf0 <mg_send>
              if (c->is_mqtt5) {
 8027380:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027384:	f013 0f04 	tst.w	r3, #4
 8027388:	d13c      	bne.n	8027404 <mqtt_cb+0x184>
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 802738a:	aa04      	add	r2, sp, #16
 802738c:	2110      	movs	r1, #16
 802738e:	4620      	mov	r0, r4
 8027390:	f7fb f81a 	bl	80223c8 <mg_call>
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 8027394:	aa04      	add	r2, sp, #16
 8027396:	210f      	movs	r1, #15
 8027398:	4620      	mov	r0, r4
 802739a:	f7fb f815 	bl	80223c8 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 802739e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80273a0:	2100      	movs	r1, #0
 80273a2:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80273a6:	f7fd ff74 	bl	8025292 <mg_iobuf_del>
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 80273aa:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80273ae:	f013 0f04 	tst.w	r3, #4
 80273b2:	f43f af6d 	beq.w	8027290 <mqtt_cb+0x10>
 80273b6:	2205      	movs	r2, #5
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 80273b8:	ab04      	add	r3, sp, #16
 80273ba:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80273bc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80273be:	f7fb fcc6 	bl	8022d4e <mg_mqtt_parse>
      if (rc == MQTT_MALFORMED) {
 80273c2:	2802      	cmp	r0, #2
 80273c4:	f43f af66 	beq.w	8027294 <mqtt_cb+0x14>
      } else if (rc == MQTT_OK) {
 80273c8:	2800      	cmp	r0, #0
 80273ca:	f47f af5f 	bne.w	802728c <mqtt_cb+0xc>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 80273ce:	4b25      	ldr	r3, [pc, #148]	@ (8027464 <mqtt_cb+0x1e4>)
 80273d0:	681b      	ldr	r3, [r3, #0]
 80273d2:	2b03      	cmp	r3, #3
 80273d4:	f73f af75 	bgt.w	80272c2 <mqtt_cb+0x42>
        switch (mm.cmd) {
 80273d8:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 80273dc:	3b02      	subs	r3, #2
 80273de:	2b04      	cmp	r3, #4
 80273e0:	d8d8      	bhi.n	8027394 <mqtt_cb+0x114>
 80273e2:	a201      	add	r2, pc, #4	@ (adr r2, 80273e8 <mqtt_cb+0x168>)
 80273e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80273e8:	080272e9 	.word	0x080272e9
 80273ec:	0802734b 	.word	0x0802734b
 80273f0:	08027395 	.word	0x08027395
 80273f4:	08027419 	.word	0x08027419
 80273f8:	0802743f 	.word	0x0802743f
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 80273fc:	2304      	movs	r3, #4
 80273fe:	e7b3      	b.n	8027368 <mqtt_cb+0xe8>
              mg_mqtt_send_header(
 8027400:	2105      	movs	r1, #5
 8027402:	e7b4      	b.n	802736e <mqtt_cb+0xee>
                uint16_t zero = 0;
 8027404:	2300      	movs	r3, #0
 8027406:	f8ad 300e 	strh.w	r3, [sp, #14]
                mg_send(c, &zero, sizeof(zero));
 802740a:	2202      	movs	r2, #2
 802740c:	f10d 010e 	add.w	r1, sp, #14
 8027410:	4620      	mov	r0, r4
 8027412:	f7ff fbed 	bl	8026bf0 <mg_send>
 8027416:	e7b8      	b.n	802738a <mqtt_cb+0x10a>
            uint16_t id = mg_ntohs(mm.id);
 8027418:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 802741c:	f7fe f82e 	bl	802547c <mg_ntohs>
 8027420:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 8027424:	2302      	movs	r3, #2
 8027426:	461a      	mov	r2, r3
 8027428:	2106      	movs	r1, #6
 802742a:	4620      	mov	r0, r4
 802742c:	f7ff fc72 	bl	8026d14 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 8027430:	2202      	movs	r2, #2
 8027432:	f10d 010e 	add.w	r1, sp, #14
 8027436:	4620      	mov	r0, r4
 8027438:	f7ff fbda 	bl	8026bf0 <mg_send>
            break;
 802743c:	e7aa      	b.n	8027394 <mqtt_cb+0x114>
            uint16_t id = mg_ntohs(mm.id);
 802743e:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8027442:	f7fe f81b 	bl	802547c <mg_ntohs>
 8027446:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 802744a:	2302      	movs	r3, #2
 802744c:	2200      	movs	r2, #0
 802744e:	2107      	movs	r1, #7
 8027450:	4620      	mov	r0, r4
 8027452:	f7ff fc5f 	bl	8026d14 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 8027456:	2202      	movs	r2, #2
 8027458:	f10d 010e 	add.w	r1, sp, #14
 802745c:	4620      	mov	r0, r4
 802745e:	f7ff fbc7 	bl	8026bf0 <mg_send>
            break;
 8027462:	e797      	b.n	8027394 <mqtt_cb+0x114>
 8027464:	2000012c 	.word	0x2000012c
 8027468:	0803aa48 	.word	0x0803aa48
 802746c:	0803a050 	.word	0x0803a050
 8027470:	0803a408 	.word	0x0803a408
 8027474:	0803a424 	.word	0x0803a424
 8027478:	0803a444 	.word	0x0803a444
 802747c:	0803a454 	.word	0x0803a454

08027480 <tx_tcp>:
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 8027480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027484:	b088      	sub	sp, #32
 8027486:	4605      	mov	r5, r0
 8027488:	469a      	mov	sl, r3
 802748a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 802748c:	f107 0614 	add.w	r6, r7, #20
 8027490:	9601      	str	r6, [sp, #4]
 8027492:	9200      	str	r2, [sp, #0]
 8027494:	6883      	ldr	r3, [r0, #8]
 8027496:	2206      	movs	r2, #6
 8027498:	f7fe f810 	bl	80254bc <tx_ip>
 802749c:	4604      	mov	r4, r0
  struct tcp *tcp = (struct tcp *) (ip + 1);
 802749e:	f100 0914 	add.w	r9, r0, #20
  memset(tcp, 0, sizeof(*tcp));
 80274a2:	2200      	movs	r2, #0
 80274a4:	6142      	str	r2, [r0, #20]
 80274a6:	6182      	str	r2, [r0, #24]
 80274a8:	61c2      	str	r2, [r0, #28]
 80274aa:	6202      	str	r2, [r0, #32]
 80274ac:	6242      	str	r2, [r0, #36]	@ 0x24
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 80274ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80274b0:	b10b      	cbz	r3, 80274b6 <tx_tcp+0x36>
 80274b2:	2f00      	cmp	r7, #0
 80274b4:	d147      	bne.n	8027546 <tx_tcp+0xc6>
  tcp->sport = sport;
 80274b6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80274ba:	82a3      	strh	r3, [r4, #20]
  tcp->dport = dport;
 80274bc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80274c0:	82e3      	strh	r3, [r4, #22]
  tcp->seq = seq;
 80274c2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80274c4:	61a3      	str	r3, [r4, #24]
  tcp->ack = ack;
 80274c6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80274c8:	61e3      	str	r3, [r4, #28]
  tcp->flags = flags;
 80274ca:	f884 a021 	strb.w	sl, [r4, #33]	@ 0x21
  tcp->win = mg_htons(MIP_TCP_WIN);
 80274ce:	f241 7070 	movw	r0, #6000	@ 0x1770
 80274d2:	f7fd ffd3 	bl	802547c <mg_ntohs>
 80274d6:	8460      	strh	r0, [r4, #34]	@ 0x22
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 80274d8:	2350      	movs	r3, #80	@ 0x50
 80274da:	f884 3020 	strb.w	r3, [r4, #32]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 80274de:	b2bb      	uxth	r3, r7
 80274e0:	3314      	adds	r3, #20
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 80274e2:	2000      	movs	r0, #0
 80274e4:	f88d 001c 	strb.w	r0, [sp, #28]
 80274e8:	7a62      	ldrb	r2, [r4, #9]
 80274ea:	f88d 201d 	strb.w	r2, [sp, #29]
 80274ee:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80274f2:	f88d 201e 	strb.w	r2, [sp, #30]
 80274f6:	f88d 301f 	strb.w	r3, [sp, #31]
  cs = csumup(cs, tcp, n);
 80274fa:	b2b2      	uxth	r2, r6
 80274fc:	4649      	mov	r1, r9
 80274fe:	f7f9 fb71 	bl	8020be4 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8027502:	f104 060c 	add.w	r6, r4, #12
 8027506:	2204      	movs	r2, #4
 8027508:	4631      	mov	r1, r6
 802750a:	f7f9 fb6b 	bl	8020be4 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 802750e:	f104 0810 	add.w	r8, r4, #16
 8027512:	2204      	movs	r2, #4
 8027514:	4641      	mov	r1, r8
 8027516:	f7f9 fb65 	bl	8020be4 <csumup>
  cs = csumup(cs, pseudo, sizeof(pseudo));
 802751a:	2204      	movs	r2, #4
 802751c:	a907      	add	r1, sp, #28
 802751e:	f7f9 fb61 	bl	8020be4 <csumup>
  tcp->csum = csumfin(cs);
 8027522:	f7fd ffb7 	bl	8025494 <csumfin>
 8027526:	84a0      	strh	r0, [r4, #36]	@ 0x24
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8027528:	4b18      	ldr	r3, [pc, #96]	@ (802758c <tx_tcp+0x10c>)
 802752a:	681b      	ldr	r3, [r3, #0]
 802752c:	2b03      	cmp	r3, #3
 802752e:	dc10      	bgt.n	8027552 <tx_tcp+0xd2>
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 8027530:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8027534:	696b      	ldr	r3, [r5, #20]
 8027536:	1ac9      	subs	r1, r1, r3
 8027538:	4439      	add	r1, r7
 802753a:	4628      	mov	r0, r5
 802753c:	f7f9 fb63 	bl	8020c06 <ether_output>
}
 8027540:	b008      	add	sp, #32
 8027542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8027546:	463a      	mov	r2, r7
 8027548:	4619      	mov	r1, r3
 802754a:	3028      	adds	r0, #40	@ 0x28
 802754c:	f004 fe7e 	bl	802c24c <memmove>
 8027550:	e7b1      	b.n	80274b6 <tx_tcp+0x36>
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8027552:	4b0f      	ldr	r3, [pc, #60]	@ (8027590 <tx_tcp+0x110>)
 8027554:	f241 5254 	movw	r2, #5460	@ 0x1554
 8027558:	490e      	ldr	r1, [pc, #56]	@ (8027594 <tx_tcp+0x114>)
 802755a:	2004      	movs	r0, #4
 802755c:	f7fe fa94 	bl	8025a88 <mg_log_prefix>
 8027560:	8aa0      	ldrh	r0, [r4, #20]
 8027562:	f7fd ff8b 	bl	802547c <mg_ntohs>
 8027566:	4681      	mov	r9, r0
 8027568:	8ae0      	ldrh	r0, [r4, #22]
 802756a:	f7fd ff87 	bl	802547c <mg_ntohs>
 802756e:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8027572:	4909      	ldr	r1, [pc, #36]	@ (8027598 <tx_tcp+0x118>)
 8027574:	9704      	str	r7, [sp, #16]
 8027576:	9303      	str	r3, [sp, #12]
 8027578:	9002      	str	r0, [sp, #8]
 802757a:	f8cd 8004 	str.w	r8, [sp, #4]
 802757e:	9100      	str	r1, [sp, #0]
 8027580:	464b      	mov	r3, r9
 8027582:	4632      	mov	r2, r6
 8027584:	4805      	ldr	r0, [pc, #20]	@ (802759c <tx_tcp+0x11c>)
 8027586:	f7fc f969 	bl	802385c <mg_log>
 802758a:	e7d1      	b.n	8027530 <tx_tcp+0xb0>
 802758c:	2000012c 	.word	0x2000012c
 8027590:	0803aa0c 	.word	0x0803aa0c
 8027594:	0803a050 	.word	0x0803a050
 8027598:	0802381d 	.word	0x0802381d
 802759c:	0803a474 	.word	0x0803a474

080275a0 <send_syn>:
static void send_syn(struct mg_connection *c) {
 80275a0:	b530      	push	{r4, r5, lr}
 80275a2:	b087      	sub	sp, #28
 80275a4:	4604      	mov	r4, r0
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 80275a6:	8b05      	ldrh	r5, [r0, #24]
 80275a8:	4628      	mov	r0, r5
 80275aa:	f7fd ff67 	bl	802547c <mg_ntohs>
 80275ae:	f7fd fecd 	bl	802534c <mg_ntohl>
 80275b2:	4602      	mov	r2, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80275b4:	6863      	ldr	r3, [r4, #4]
 80275b6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 80275b8:	2300      	movs	r3, #0
 80275ba:	9305      	str	r3, [sp, #20]
 80275bc:	9304      	str	r3, [sp, #16]
 80275be:	9303      	str	r3, [sp, #12]
 80275c0:	9202      	str	r2, [sp, #8]
 80275c2:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 80275c4:	9301      	str	r3, [sp, #4]
 80275c6:	9500      	str	r5, [sp, #0]
 80275c8:	2302      	movs	r3, #2
 80275ca:	69e2      	ldr	r2, [r4, #28]
 80275cc:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 80275d0:	f7ff ff56 	bl	8027480 <tx_tcp>
}
 80275d4:	b007      	add	sp, #28
 80275d6:	bd30      	pop	{r4, r5, pc}

080275d8 <tx_tcp_pkt>:
                         size_t len) {
 80275d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80275dc:	b087      	sub	sp, #28
 80275de:	4605      	mov	r5, r0
 80275e0:	4617      	mov	r7, r2
 80275e2:	4698      	mov	r8, r3
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 80275e4:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80275e6:	7b5c      	ldrb	r4, [r3, #13]
 80275e8:	f014 0403 	ands.w	r4, r4, #3
 80275ec:	bf18      	it	ne
 80275ee:	2401      	movne	r4, #1
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 80275f0:	690e      	ldr	r6, [r1, #16]
 80275f2:	3606      	adds	r6, #6
 80275f4:	69ca      	ldr	r2, [r1, #28]
 80275f6:	f8d2 900c 	ldr.w	r9, [r2, #12]
 80275fa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80275fe:	f8b3 b000 	ldrh.w	fp, [r3]
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8027602:	6858      	ldr	r0, [r3, #4]
 8027604:	f7fd fea2 	bl	802534c <mg_ntohl>
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8027608:	4420      	add	r0, r4
 802760a:	f7fd fe9f 	bl	802534c <mg_ntohl>
 802760e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027610:	9305      	str	r3, [sp, #20]
 8027612:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027614:	9304      	str	r3, [sp, #16]
 8027616:	9003      	str	r0, [sp, #12]
 8027618:	f8cd 8008 	str.w	r8, [sp, #8]
 802761c:	f8cd b004 	str.w	fp, [sp, #4]
 8027620:	f8cd a000 	str.w	sl, [sp]
 8027624:	463b      	mov	r3, r7
 8027626:	464a      	mov	r2, r9
 8027628:	4631      	mov	r1, r6
 802762a:	4628      	mov	r0, r5
 802762c:	f7ff ff28 	bl	8027480 <tx_tcp>
}
 8027630:	b007      	add	sp, #28
 8027632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08027638 <settmout>:
static void settmout(struct mg_connection *c, uint8_t type) {
 8027638:	b530      	push	{r4, r5, lr}
 802763a:	b083      	sub	sp, #12
 802763c:	4604      	mov	r4, r0
 802763e:	460d      	mov	r5, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8027640:	6843      	ldr	r3, [r0, #4]
 8027642:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 8027644:	2901      	cmp	r1, #1
 8027646:	d01a      	beq.n	802767e <settmout+0x46>
 8027648:	2903      	cmp	r1, #3
 802764a:	d01a      	beq.n	8027682 <settmout+0x4a>
 802764c:	2904      	cmp	r1, #4
 802764e:	d01b      	beq.n	8027688 <settmout+0x50>
 8027650:	2902      	cmp	r1, #2
 8027652:	d012      	beq.n	802767a <settmout+0x42>
 8027654:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
  s->timer = ifp->now + n;
 8027658:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 802765a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 802765c:	185b      	adds	r3, r3, r1
 802765e:	f142 0200 	adc.w	r2, r2, #0
 8027662:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8027666:	f8c4 20bc 	str.w	r2, [r4, #188]	@ 0xbc
  s->ttype = type;
 802766a:	f884 50ce 	strb.w	r5, [r4, #206]	@ 0xce
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 802766e:	4b10      	ldr	r3, [pc, #64]	@ (80276b0 <settmout+0x78>)
 8027670:	681b      	ldr	r3, [r3, #0]
 8027672:	2b03      	cmp	r3, #3
 8027674:	dc0b      	bgt.n	802768e <settmout+0x56>
}
 8027676:	b003      	add	sp, #12
 8027678:	bd30      	pop	{r4, r5, pc}
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 802767a:	2364      	movs	r3, #100	@ 0x64
 802767c:	e7ec      	b.n	8027658 <settmout+0x20>
 802767e:	2396      	movs	r3, #150	@ 0x96
 8027680:	e7ea      	b.n	8027658 <settmout+0x20>
 8027682:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8027686:	e7e7      	b.n	8027658 <settmout+0x20>
 8027688:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 802768c:	e7e4      	b.n	8027658 <settmout+0x20>
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 802768e:	4b09      	ldr	r3, [pc, #36]	@ (80276b4 <settmout+0x7c>)
 8027690:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 8027694:	4908      	ldr	r1, [pc, #32]	@ (80276b8 <settmout+0x80>)
 8027696:	2004      	movs	r0, #4
 8027698:	f7fe f9f6 	bl	8025a88 <mg_log_prefix>
 802769c:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	@ 0xb8
 80276a0:	e9cd 2300 	strd	r2, r3, [sp]
 80276a4:	462a      	mov	r2, r5
 80276a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80276a8:	4804      	ldr	r0, [pc, #16]	@ (80276bc <settmout+0x84>)
 80276aa:	f7fc f8d7 	bl	802385c <mg_log>
}
 80276ae:	e7e2      	b.n	8027676 <settmout+0x3e>
 80276b0:	2000012c 	.word	0x2000012c
 80276b4:	0803aa00 	.word	0x0803aa00
 80276b8:	0803a050 	.word	0x0803a050
 80276bc:	0803a498 	.word	0x0803a498

080276c0 <mg_io_send>:
long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 80276c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80276c4:	b089      	sub	sp, #36	@ 0x24
 80276c6:	4604      	mov	r4, r0
 80276c8:	460e      	mov	r6, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80276ca:	6843      	ldr	r3, [r0, #4]
 80276cc:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 80276ce:	f8d0 801c 	ldr.w	r8, [r0, #28]
  len = trim_len(c, len);
 80276d2:	4611      	mov	r1, r2
 80276d4:	f7ff fa2e 	bl	8026b34 <trim_len>
 80276d8:	4605      	mov	r5, r0
  if (c->is_udp) {
 80276da:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80276de:	f013 0f01 	tst.w	r3, #1
 80276e2:	d010      	beq.n	8027706 <mg_io_send+0x46>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 80276e4:	68ba      	ldr	r2, [r7, #8]
 80276e6:	9003      	str	r0, [sp, #12]
 80276e8:	9602      	str	r6, [sp, #8]
 80276ea:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 80276ec:	9301      	str	r3, [sp, #4]
 80276ee:	f8cd 8000 	str.w	r8, [sp]
 80276f2:	8b23      	ldrh	r3, [r4, #24]
 80276f4:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 80276f8:	4638      	mov	r0, r7
 80276fa:	f7fd ff74 	bl	80255e6 <tx_udp>
  return (long) len;
 80276fe:	4628      	mov	r0, r5
}
 8027700:	b009      	add	sp, #36	@ 0x24
 8027702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 8027706:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 802770a:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 802770e:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8027712:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8027716:	f7fd fe19 	bl	802534c <mg_ntohl>
 802771a:	9007      	str	r0, [sp, #28]
 802771c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8027720:	f7fd fe14 	bl	802534c <mg_ntohl>
 8027724:	9505      	str	r5, [sp, #20]
 8027726:	9604      	str	r6, [sp, #16]
 8027728:	9003      	str	r0, [sp, #12]
 802772a:	9b07      	ldr	r3, [sp, #28]
 802772c:	9302      	str	r3, [sp, #8]
 802772e:	f8cd b004 	str.w	fp, [sp, #4]
 8027732:	f8cd a000 	str.w	sl, [sp]
 8027736:	2318      	movs	r3, #24
 8027738:	4642      	mov	r2, r8
 802773a:	4649      	mov	r1, r9
 802773c:	4638      	mov	r0, r7
 802773e:	f7ff fe9f 	bl	8027480 <tx_tcp>
    if (sent == 0) {
 8027742:	b180      	cbz	r0, 8027766 <mg_io_send+0xa6>
    } else if (sent == (size_t) -1) {
 8027744:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8027748:	d010      	beq.n	802776c <mg_io_send+0xac>
      s->seq += (uint32_t) len;
 802774a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 802774e:	442b      	add	r3, r5
 8027750:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 8027754:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8027758:	2b01      	cmp	r3, #1
 802775a:	d1d0      	bne.n	80276fe <mg_io_send+0x3e>
 802775c:	2100      	movs	r1, #0
 802775e:	4620      	mov	r0, r4
 8027760:	f7ff ff6a 	bl	8027638 <settmout>
 8027764:	e7cb      	b.n	80276fe <mg_io_send+0x3e>
      return MG_IO_WAIT;
 8027766:	f06f 0001 	mvn.w	r0, #1
 802776a:	e7c9      	b.n	8027700 <mg_io_send+0x40>
      return MG_IO_ERR;
 802776c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8027770:	e7c6      	b.n	8027700 <mg_io_send+0x40>
	...

08027774 <write_conn>:
static void write_conn(struct mg_connection *c) {
 8027774:	b510      	push	{r4, lr}
 8027776:	b082      	sub	sp, #8
 8027778:	4604      	mov	r4, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 802777a:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
                       : mg_io_send(c, c->send.buf, c->send.len);
 802777e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8027782:	d00b      	beq.n	802779c <write_conn+0x28>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8027784:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8027786:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8027788:	f7fd fcbc 	bl	8025104 <mg_tls_send>
 802778c:	9001      	str	r0, [sp, #4]
  if (len == MG_IO_ERR) {
 802778e:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8027792:	d008      	beq.n	80277a6 <write_conn+0x32>
  } else if (len > 0) {
 8027794:	2800      	cmp	r0, #0
 8027796:	dc0b      	bgt.n	80277b0 <write_conn+0x3c>
}
 8027798:	b002      	add	sp, #8
 802779a:	bd10      	pop	{r4, pc}
                       : mg_io_send(c, c->send.buf, c->send.len);
 802779c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 802779e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80277a0:	f7ff ff8e 	bl	80276c0 <mg_io_send>
 80277a4:	e7f2      	b.n	802778c <write_conn+0x18>
    mg_error(c, "tx err");
 80277a6:	4908      	ldr	r1, [pc, #32]	@ (80277c8 <write_conn+0x54>)
 80277a8:	4620      	mov	r0, r4
 80277aa:	f7fe fa55 	bl	8025c58 <mg_error>
 80277ae:	e7f3      	b.n	8027798 <write_conn+0x24>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 80277b0:	4602      	mov	r2, r0
 80277b2:	2100      	movs	r1, #0
 80277b4:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 80277b8:	f7fd fd6b 	bl	8025292 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 80277bc:	aa01      	add	r2, sp, #4
 80277be:	2108      	movs	r1, #8
 80277c0:	4620      	mov	r0, r4
 80277c2:	f7fa fe01 	bl	80223c8 <mg_call>
}
 80277c6:	e7e7      	b.n	8027798 <write_conn+0x24>
 80277c8:	0803a4a8 	.word	0x0803a4a8

080277cc <init_closure>:
  if (c->is_udp == false && c->is_listening == false &&
 80277cc:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 80277d0:	f240 1221 	movw	r2, #289	@ 0x121
 80277d4:	421a      	tst	r2, r3
 80277d6:	d000      	beq.n	80277da <init_closure+0xe>
 80277d8:	4770      	bx	lr
static void init_closure(struct mg_connection *c) {
 80277da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80277de:	b086      	sub	sp, #24
 80277e0:	4604      	mov	r4, r0
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 80277e2:	6843      	ldr	r3, [r0, #4]
    struct mg_tcpip_if *ifp =
 80277e4:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80277e6:	f8d0 801c 	ldr.w	r8, [r0, #28]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 80277ea:	f100 07c8 	add.w	r7, r0, #200	@ 0xc8
 80277ee:	f8b0 9018 	ldrh.w	r9, [r0, #24]
 80277f2:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	@ 0x2c
 80277f6:	f8d0 00b0 	ldr.w	r0, [r0, #176]	@ 0xb0
 80277fa:	f7fd fda7 	bl	802534c <mg_ntohl>
 80277fe:	4605      	mov	r5, r0
 8027800:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8027804:	f7fd fda2 	bl	802534c <mg_ntohl>
 8027808:	2300      	movs	r3, #0
 802780a:	9305      	str	r3, [sp, #20]
 802780c:	9304      	str	r3, [sp, #16]
 802780e:	9003      	str	r0, [sp, #12]
 8027810:	9502      	str	r5, [sp, #8]
 8027812:	f8cd a004 	str.w	sl, [sp, #4]
 8027816:	f8cd 9000 	str.w	r9, [sp]
 802781a:	2311      	movs	r3, #17
 802781c:	4642      	mov	r2, r8
 802781e:	4639      	mov	r1, r7
 8027820:	4630      	mov	r0, r6
 8027822:	f7ff fe2d 	bl	8027480 <tx_tcp>
    settmout(c, MIP_TTYPE_FIN);
 8027826:	2104      	movs	r1, #4
 8027828:	4620      	mov	r0, r4
 802782a:	f7ff ff05 	bl	8027638 <settmout>
}
 802782e:	b006      	add	sp, #24
 8027830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08027834 <mg_connect_resolved>:
void mg_connect_resolved(struct mg_connection *c) {
 8027834:	b530      	push	{r4, r5, lr}
 8027836:	b085      	sub	sp, #20
 8027838:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802783a:	6843      	ldr	r3, [r0, #4]
 802783c:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 802783e:	69c3      	ldr	r3, [r0, #28]
 8027840:	9303      	str	r3, [sp, #12]
  c->is_resolving = 0;
 8027842:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8027846:	f36f 03c3 	bfc	r3, #3, #1
 802784a:	f880 30ac 	strb.w	r3, [r0, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 802784e:	f9b5 3068 	ldrsh.w	r3, [r5, #104]	@ 0x68
 8027852:	2b00      	cmp	r3, #0
 8027854:	db03      	blt.n	802785e <mg_connect_resolved+0x2a>
 8027856:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 802785a:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 802785e:	68ab      	ldr	r3, [r5, #8]
 8027860:	60a3      	str	r3, [r4, #8]
  c->loc.port = mg_htons(ifp->eport++);
 8027862:	f8b5 0068 	ldrh.w	r0, [r5, #104]	@ 0x68
 8027866:	1c43      	adds	r3, r0, #1
 8027868:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
 802786c:	f7fd fe06 	bl	802547c <mg_ntohs>
 8027870:	8320      	strh	r0, [r4, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8027872:	4b51      	ldr	r3, [pc, #324]	@ (80279b8 <mg_connect_resolved+0x184>)
 8027874:	681b      	ldr	r3, [r3, #0]
 8027876:	2b02      	cmp	r3, #2
 8027878:	dc36      	bgt.n	80278e8 <mg_connect_resolved+0xb4>
  mg_call(c, MG_EV_RESOLVE, NULL);
 802787a:	2200      	movs	r2, #0
 802787c:	2103      	movs	r1, #3
 802787e:	4620      	mov	r0, r4
 8027880:	f7fa fda2 	bl	80223c8 <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8027884:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027888:	f013 0301 	ands.w	r3, r3, #1
 802788c:	d009      	beq.n	80278a2 <mg_connect_resolved+0x6e>
 802788e:	9903      	ldr	r1, [sp, #12]
 8027890:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
 8027894:	d03b      	beq.n	802790e <mg_connect_resolved+0xda>
 8027896:	68aa      	ldr	r2, [r5, #8]
 8027898:	68e8      	ldr	r0, [r5, #12]
 802789a:	ea62 0200 	orn	r2, r2, r0
 802789e:	4291      	cmp	r1, r2
 80278a0:	d035      	beq.n	802790e <mg_connect_resolved+0xda>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 80278a2:	68aa      	ldr	r2, [r5, #8]
 80278a4:	2a00      	cmp	r2, #0
 80278a6:	d046      	beq.n	8027936 <mg_connect_resolved+0x102>
 80278a8:	9903      	ldr	r1, [sp, #12]
 80278aa:	68e8      	ldr	r0, [r5, #12]
 80278ac:	404a      	eors	r2, r1
 80278ae:	4202      	tst	r2, r0
 80278b0:	d141      	bne.n	8027936 <mg_connect_resolved+0x102>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 80278b2:	692a      	ldr	r2, [r5, #16]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 80278b4:	4291      	cmp	r1, r2
 80278b6:	d03e      	beq.n	8027936 <mg_connect_resolved+0x102>
    MG_DEBUG(("%lu ARP lookup...", c->id));
 80278b8:	4b3f      	ldr	r3, [pc, #252]	@ (80279b8 <mg_connect_resolved+0x184>)
 80278ba:	681b      	ldr	r3, [r3, #0]
 80278bc:	2b02      	cmp	r3, #2
 80278be:	dc2e      	bgt.n	802791e <mg_connect_resolved+0xea>
    arp_ask(ifp, rem_ip);
 80278c0:	9903      	ldr	r1, [sp, #12]
 80278c2:	4628      	mov	r0, r5
 80278c4:	f7fd fed7 	bl	8025676 <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 80278c8:	2102      	movs	r1, #2
 80278ca:	4620      	mov	r0, r4
 80278cc:	f7ff feb4 	bl	8027638 <settmout>
    c->is_arplooking = 1;
 80278d0:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80278d4:	f043 0310 	orr.w	r3, r3, #16
 80278d8:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_connecting = 1;
 80278dc:	b2db      	uxtb	r3, r3
 80278de:	f043 0320 	orr.w	r3, r3, #32
 80278e2:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
 80278e6:	e018      	b.n	802791a <mg_connect_resolved+0xe6>
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 80278e8:	4b34      	ldr	r3, [pc, #208]	@ (80279bc <mg_connect_resolved+0x188>)
 80278ea:	f241 724f 	movw	r2, #5967	@ 0x174f
 80278ee:	4934      	ldr	r1, [pc, #208]	@ (80279c0 <mg_connect_resolved+0x18c>)
 80278f0:	2003      	movs	r0, #3
 80278f2:	f7fe f8c9 	bl	8025a88 <mg_log_prefix>
 80278f6:	4a33      	ldr	r2, [pc, #204]	@ (80279c4 <mg_connect_resolved+0x190>)
 80278f8:	f104 031c 	add.w	r3, r4, #28
 80278fc:	9301      	str	r3, [sp, #4]
 80278fe:	9200      	str	r2, [sp, #0]
 8027900:	f104 0308 	add.w	r3, r4, #8
 8027904:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027906:	4830      	ldr	r0, [pc, #192]	@ (80279c8 <mg_connect_resolved+0x194>)
 8027908:	f7fb ffa8 	bl	802385c <mg_log>
 802790c:	e7b5      	b.n	802787a <mg_connect_resolved+0x46>
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 802790e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027912:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8027916:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
}
 802791a:	b005      	add	sp, #20
 802791c:	bd30      	pop	{r4, r5, pc}
    MG_DEBUG(("%lu ARP lookup...", c->id));
 802791e:	4b27      	ldr	r3, [pc, #156]	@ (80279bc <mg_connect_resolved+0x188>)
 8027920:	f241 7258 	movw	r2, #5976	@ 0x1758
 8027924:	4926      	ldr	r1, [pc, #152]	@ (80279c0 <mg_connect_resolved+0x18c>)
 8027926:	2003      	movs	r0, #3
 8027928:	f7fe f8ae 	bl	8025a88 <mg_log_prefix>
 802792c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802792e:	4827      	ldr	r0, [pc, #156]	@ (80279cc <mg_connect_resolved+0x198>)
 8027930:	f7fb ff94 	bl	802385c <mg_log>
 8027934:	e7c4      	b.n	80278c0 <mg_connect_resolved+0x8c>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 8027936:	f89d 200c 	ldrb.w	r2, [sp, #12]
 802793a:	f002 02e0 	and.w	r2, r2, #224	@ 0xe0
 802793e:	2ae0      	cmp	r2, #224	@ 0xe0
 8027940:	d00e      	beq.n	8027960 <mg_connect_resolved+0x12c>
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 8027942:	f8d5 2046 	ldr.w	r2, [r5, #70]	@ 0x46
 8027946:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 802794a:	f8b5 204a 	ldrh.w	r2, [r5, #74]	@ 0x4a
 802794e:	f8a4 20cc 	strh.w	r2, [r4, #204]	@ 0xcc
    if (c->is_udp) {
 8027952:	b31b      	cbz	r3, 802799c <mg_connect_resolved+0x168>
      mg_call(c, MG_EV_CONNECT, NULL);
 8027954:	2200      	movs	r2, #0
 8027956:	2104      	movs	r1, #4
 8027958:	4620      	mov	r0, r4
 802795a:	f7fa fd35 	bl	80223c8 <mg_call>
 802795e:	e7dc      	b.n	802791a <mg_connect_resolved+0xe6>
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 8027960:	4b1b      	ldr	r3, [pc, #108]	@ (80279d0 <mg_connect_resolved+0x19c>)
 8027962:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8027966:	f8ad 3008 	strh.w	r3, [sp, #8]
 802796a:	0c1b      	lsrs	r3, r3, #16
 802796c:	f88d 300a 	strb.w	r3, [sp, #10]
    memcpy(s->mac, mcastp, 3);
 8027970:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8027974:	b2db      	uxtb	r3, r3
 8027976:	f8a4 20c8 	strh.w	r2, [r4, #200]	@ 0xc8
 802797a:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 802797e:	f8bd 200d 	ldrh.w	r2, [sp, #13]
 8027982:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8027986:	f8a4 20cb 	strh.w	r2, [r4, #203]	@ 0xcb
 802798a:	f884 30cd 	strb.w	r3, [r4, #205]	@ 0xcd
    s->mac[3] &= 0x7F;
 802798e:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 8027992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8027996:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
 802799a:	e7be      	b.n	802791a <mg_connect_resolved+0xe6>
      send_syn(c);
 802799c:	4620      	mov	r0, r4
 802799e:	f7ff fdff 	bl	80275a0 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 80279a2:	2103      	movs	r1, #3
 80279a4:	4620      	mov	r0, r4
 80279a6:	f7ff fe47 	bl	8027638 <settmout>
      c->is_connecting = 1;
 80279aa:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80279ae:	f043 0320 	orr.w	r3, r3, #32
 80279b2:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
}
 80279b6:	e7b0      	b.n	802791a <mg_connect_resolved+0xe6>
 80279b8:	2000012c 	.word	0x2000012c
 80279bc:	0803a9dc 	.word	0x0803a9dc
 80279c0:	0803a050 	.word	0x0803a050
 80279c4:	080259b5 	.word	0x080259b5
 80279c8:	0803a4b0 	.word	0x0803a4b0
 80279cc:	0803a4c0 	.word	0x0803a4c0
 80279d0:	080355cc 	.word	0x080355cc

080279d4 <dns_cb>:
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 80279d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80279d6:	b0c9      	sub	sp, #292	@ 0x124
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 80279d8:	6847      	ldr	r7, [r0, #4]
  if (ev == MG_EV_POLL) {
 80279da:	2902      	cmp	r1, #2
 80279dc:	d009      	beq.n	80279f2 <dns_cb+0x1e>
 80279de:	4604      	mov	r4, r0
 80279e0:	f107 0630 	add.w	r6, r7, #48	@ 0x30
  } else if (ev == MG_EV_READ) {
 80279e4:	2907      	cmp	r1, #7
 80279e6:	d016      	beq.n	8027a16 <dns_cb+0x42>
  } else if (ev == MG_EV_CLOSE) {
 80279e8:	2909      	cmp	r1, #9
 80279ea:	f000 809a 	beq.w	8027b22 <dns_cb+0x14e>
}
 80279ee:	b049      	add	sp, #292	@ 0x124
 80279f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint64_t now = *(uint64_t *) ev_data;
 80279f2:	6816      	ldr	r6, [r2, #0]
 80279f4:	6855      	ldr	r5, [r2, #4]
    for (d = *head; d != NULL; d = tmp) {
 80279f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80279f8:	e000      	b.n	80279fc <dns_cb+0x28>
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 80279fa:	4623      	mov	r3, r4
    for (d = *head; d != NULL; d = tmp) {
 80279fc:	2b00      	cmp	r3, #0
 80279fe:	d0f6      	beq.n	80279ee <dns_cb+0x1a>
      tmp = d->next;
 8027a00:	681c      	ldr	r4, [r3, #0]
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8027a02:	6899      	ldr	r1, [r3, #8]
 8027a04:	68da      	ldr	r2, [r3, #12]
 8027a06:	42b1      	cmp	r1, r6
 8027a08:	41aa      	sbcs	r2, r5
 8027a0a:	d2f6      	bcs.n	80279fa <dns_cb+0x26>
 8027a0c:	494c      	ldr	r1, [pc, #304]	@ (8027b40 <dns_cb+0x16c>)
 8027a0e:	6858      	ldr	r0, [r3, #4]
 8027a10:	f7fe f922 	bl	8025c58 <mg_error>
 8027a14:	e7f1      	b.n	80279fa <dns_cb+0x26>
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8027a16:	aa02      	add	r2, sp, #8
 8027a18:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8027a1a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8027a1c:	f7fe f870 	bl	8025b00 <mg_dns_parse>
 8027a20:	b9c8      	cbnz	r0, 8027a56 <dns_cb+0x82>
      MG_ERROR(("Unexpected DNS response:"));
 8027a22:	4b48      	ldr	r3, [pc, #288]	@ (8027b44 <dns_cb+0x170>)
 8027a24:	681b      	ldr	r3, [r3, #0]
 8027a26:	2b00      	cmp	r3, #0
 8027a28:	dc0a      	bgt.n	8027a40 <dns_cb+0x6c>
      mg_hexdump(c->recv.buf, c->recv.len);
 8027a2a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8027a2c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8027a2e:	f7fb f875 	bl	8022b1c <mg_hexdump>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8027a32:	4b44      	ldr	r3, [pc, #272]	@ (8027b44 <dns_cb+0x170>)
 8027a34:	681b      	ldr	r3, [r3, #0]
 8027a36:	2b00      	cmp	r3, #0
 8027a38:	dc68      	bgt.n	8027b0c <dns_cb+0x138>
    c->recv.len = 0;
 8027a3a:	2300      	movs	r3, #0
 8027a3c:	6423      	str	r3, [r4, #64]	@ 0x40
 8027a3e:	e7d6      	b.n	80279ee <dns_cb+0x1a>
      MG_ERROR(("Unexpected DNS response:"));
 8027a40:	4b41      	ldr	r3, [pc, #260]	@ (8027b48 <dns_cb+0x174>)
 8027a42:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 8027a46:	4941      	ldr	r1, [pc, #260]	@ (8027b4c <dns_cb+0x178>)
 8027a48:	2001      	movs	r0, #1
 8027a4a:	f7fe f81d 	bl	8025a88 <mg_log_prefix>
 8027a4e:	4840      	ldr	r0, [pc, #256]	@ (8027b50 <dns_cb+0x17c>)
 8027a50:	f7fb ff04 	bl	802385c <mg_log>
 8027a54:	e7e9      	b.n	8027a2a <dns_cb+0x56>
      for (d = *head; d != NULL; d = tmp) {
 8027a56:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
    int resolved = 0;
 8027a58:	2100      	movs	r1, #0
      for (d = *head; d != NULL; d = tmp) {
 8027a5a:	e008      	b.n	8027a6e <dns_cb+0x9a>
            mg_connect_resolved(d->c);
 8027a5c:	6868      	ldr	r0, [r5, #4]
 8027a5e:	f7ff fee9 	bl	8027834 <mg_connect_resolved>
        mg_dns_free(head, d);
 8027a62:	4629      	mov	r1, r5
 8027a64:	4630      	mov	r0, r6
 8027a66:	f7f9 fad8 	bl	802101a <mg_dns_free>
        resolved = 1;
 8027a6a:	2101      	movs	r1, #1
 8027a6c:	463d      	mov	r5, r7
      for (d = *head; d != NULL; d = tmp) {
 8027a6e:	2d00      	cmp	r5, #0
 8027a70:	d049      	beq.n	8027b06 <dns_cb+0x132>
        tmp = d->next;
 8027a72:	682f      	ldr	r7, [r5, #0]
        if (dm.txnid != d->txnid) continue;
 8027a74:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8027a78:	8a2b      	ldrh	r3, [r5, #16]
 8027a7a:	429a      	cmp	r2, r3
 8027a7c:	d1f6      	bne.n	8027a6c <dns_cb+0x98>
        if (d->c->is_resolving) {
 8027a7e:	6868      	ldr	r0, [r5, #4]
 8027a80:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8027a84:	f013 0f08 	tst.w	r3, #8
 8027a88:	d02c      	beq.n	8027ae4 <dns_cb+0x110>
          if (dm.resolved) {
 8027a8a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8027a8e:	b323      	cbz	r3, 8027ada <dns_cb+0x106>
            dm.addr.port = d->c->rem.port;  // Save port
 8027a90:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8027a92:	f8ad 301c 	strh.w	r3, [sp, #28]
            d->c->rem = dm.addr;            // Copy resolved address
 8027a96:	686b      	ldr	r3, [r5, #4]
 8027a98:	f103 0c1c 	add.w	ip, r3, #28
 8027a9c:	f10d 0e0c 	add.w	lr, sp, #12
 8027aa0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8027aa4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8027aa8:	f8de 3000 	ldr.w	r3, [lr]
 8027aac:	f8cc 3000 	str.w	r3, [ip]
            MG_DEBUG(
 8027ab0:	4b24      	ldr	r3, [pc, #144]	@ (8027b44 <dns_cb+0x170>)
 8027ab2:	681b      	ldr	r3, [r3, #0]
 8027ab4:	2b02      	cmp	r3, #2
 8027ab6:	ddd1      	ble.n	8027a5c <dns_cb+0x88>
 8027ab8:	4b23      	ldr	r3, [pc, #140]	@ (8027b48 <dns_cb+0x174>)
 8027aba:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 8027abe:	4923      	ldr	r1, [pc, #140]	@ (8027b4c <dns_cb+0x178>)
 8027ac0:	2003      	movs	r0, #3
 8027ac2:	f7fd ffe1 	bl	8025a88 <mg_log_prefix>
 8027ac6:	686b      	ldr	r3, [r5, #4]
 8027ac8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8027aca:	331c      	adds	r3, #28
 8027acc:	9300      	str	r3, [sp, #0]
 8027ace:	4b21      	ldr	r3, [pc, #132]	@ (8027b54 <dns_cb+0x180>)
 8027ad0:	aa08      	add	r2, sp, #32
 8027ad2:	4821      	ldr	r0, [pc, #132]	@ (8027b58 <dns_cb+0x184>)
 8027ad4:	f7fb fec2 	bl	802385c <mg_log>
 8027ad8:	e7c0      	b.n	8027a5c <dns_cb+0x88>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8027ada:	aa08      	add	r2, sp, #32
 8027adc:	491f      	ldr	r1, [pc, #124]	@ (8027b5c <dns_cb+0x188>)
 8027ade:	f7fe f8bb 	bl	8025c58 <mg_error>
 8027ae2:	e7be      	b.n	8027a62 <dns_cb+0x8e>
          MG_ERROR(("%lu already resolved", d->c->id));
 8027ae4:	4b17      	ldr	r3, [pc, #92]	@ (8027b44 <dns_cb+0x170>)
 8027ae6:	681b      	ldr	r3, [r3, #0]
 8027ae8:	2b00      	cmp	r3, #0
 8027aea:	ddba      	ble.n	8027a62 <dns_cb+0x8e>
 8027aec:	4b16      	ldr	r3, [pc, #88]	@ (8027b48 <dns_cb+0x174>)
 8027aee:	f240 42da 	movw	r2, #1242	@ 0x4da
 8027af2:	4916      	ldr	r1, [pc, #88]	@ (8027b4c <dns_cb+0x178>)
 8027af4:	2001      	movs	r0, #1
 8027af6:	f7fd ffc7 	bl	8025a88 <mg_log_prefix>
 8027afa:	686b      	ldr	r3, [r5, #4]
 8027afc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8027afe:	4818      	ldr	r0, [pc, #96]	@ (8027b60 <dns_cb+0x18c>)
 8027b00:	f7fb feac 	bl	802385c <mg_log>
 8027b04:	e7ad      	b.n	8027a62 <dns_cb+0x8e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8027b06:	2900      	cmp	r1, #0
 8027b08:	d197      	bne.n	8027a3a <dns_cb+0x66>
 8027b0a:	e792      	b.n	8027a32 <dns_cb+0x5e>
 8027b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8027b48 <dns_cb+0x174>)
 8027b0e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8027b12:	490e      	ldr	r1, [pc, #56]	@ (8027b4c <dns_cb+0x178>)
 8027b14:	2001      	movs	r0, #1
 8027b16:	f7fd ffb7 	bl	8025a88 <mg_log_prefix>
 8027b1a:	4812      	ldr	r0, [pc, #72]	@ (8027b64 <dns_cb+0x190>)
 8027b1c:	f7fb fe9e 	bl	802385c <mg_log>
 8027b20:	e78b      	b.n	8027a3a <dns_cb+0x66>
    for (d = *head; d != NULL; d = tmp) {
 8027b22:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8027b24:	2c00      	cmp	r4, #0
 8027b26:	f43f af62 	beq.w	80279ee <dns_cb+0x1a>
      tmp = d->next;
 8027b2a:	6825      	ldr	r5, [r4, #0]
      mg_error(d->c, "DNS error");
 8027b2c:	490e      	ldr	r1, [pc, #56]	@ (8027b68 <dns_cb+0x194>)
 8027b2e:	6860      	ldr	r0, [r4, #4]
 8027b30:	f7fe f892 	bl	8025c58 <mg_error>
      mg_dns_free(head, d);
 8027b34:	4621      	mov	r1, r4
 8027b36:	4630      	mov	r0, r6
 8027b38:	f7f9 fa6f 	bl	802101a <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 8027b3c:	462c      	mov	r4, r5
 8027b3e:	e7f1      	b.n	8027b24 <dns_cb+0x150>
 8027b40:	0803a4d4 	.word	0x0803a4d4
 8027b44:	2000012c 	.word	0x2000012c
 8027b48:	0803aab0 	.word	0x0803aab0
 8027b4c:	0803a050 	.word	0x0803a050
 8027b50:	0803a4e0 	.word	0x0803a4e0
 8027b54:	08025999 	.word	0x08025999
 8027b58:	0803a4fc 	.word	0x0803a4fc
 8027b5c:	0803a50c 	.word	0x0803a50c
 8027b60:	0803a524 	.word	0x0803a524
 8027b64:	0803a53c 	.word	0x0803a53c
 8027b68:	0803a54c 	.word	0x0803a54c

08027b6c <tx_dhcp_discover>:
static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 8027b6c:	b510      	push	{r4, lr}
 8027b6e:	b086      	sub	sp, #24
 8027b70:	4604      	mov	r4, r0
  uint8_t opts[] = {
 8027b72:	4a12      	ldr	r2, [pc, #72]	@ (8027bbc <tx_dhcp_discover+0x50>)
 8027b74:	ab04      	add	r3, sp, #16
 8027b76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8027b7a:	e883 0003 	stmia.w	r3, {r0, r1}
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 8027b7e:	2200      	movs	r2, #0
 8027b80:	9202      	str	r2, [sp, #8]
 8027b82:	2108      	movs	r1, #8
 8027b84:	9101      	str	r1, [sp, #4]
 8027b86:	9300      	str	r3, [sp, #0]
 8027b88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027b8c:	490c      	ldr	r1, [pc, #48]	@ (8027bc0 <tx_dhcp_discover+0x54>)
 8027b8e:	4620      	mov	r0, r4
 8027b90:	f7fd fdb6 	bl	8025700 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8027b94:	4b0b      	ldr	r3, [pc, #44]	@ (8027bc4 <tx_dhcp_discover+0x58>)
 8027b96:	681b      	ldr	r3, [r3, #0]
 8027b98:	2b02      	cmp	r3, #2
 8027b9a:	dc01      	bgt.n	8027ba0 <tx_dhcp_discover+0x34>
}
 8027b9c:	b006      	add	sp, #24
 8027b9e:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8027ba0:	4b09      	ldr	r3, [pc, #36]	@ (8027bc8 <tx_dhcp_discover+0x5c>)
 8027ba2:	f241 4270 	movw	r2, #5232	@ 0x1470
 8027ba6:	4909      	ldr	r1, [pc, #36]	@ (8027bcc <tx_dhcp_discover+0x60>)
 8027ba8:	2003      	movs	r0, #3
 8027baa:	f7fd ff6d 	bl	8025a88 <mg_log_prefix>
 8027bae:	4622      	mov	r2, r4
 8027bb0:	4907      	ldr	r1, [pc, #28]	@ (8027bd0 <tx_dhcp_discover+0x64>)
 8027bb2:	4808      	ldr	r0, [pc, #32]	@ (8027bd4 <tx_dhcp_discover+0x68>)
 8027bb4:	f7fb fe52 	bl	802385c <mg_log>
}
 8027bb8:	e7f0      	b.n	8027b9c <tx_dhcp_discover+0x30>
 8027bba:	bf00      	nop
 8027bbc:	0803a578 	.word	0x0803a578
 8027bc0:	0803aad8 	.word	0x0803aad8
 8027bc4:	2000012c 	.word	0x2000012c
 8027bc8:	0803a9ac 	.word	0x0803a9ac
 8027bcc:	0803a050 	.word	0x0803a050
 8027bd0:	0802382d 	.word	0x0802382d
 8027bd4:	0803a558 	.word	0x0803a558

08027bd8 <tx_dhcp_request_re>:
                               uint32_t ip_src, uint32_t ip_dst) {
 8027bd8:	b510      	push	{r4, lr}
 8027bda:	b086      	sub	sp, #24
  uint8_t opts[] = {
 8027bdc:	4c0d      	ldr	r4, [pc, #52]	@ (8027c14 <tx_dhcp_request_re+0x3c>)
 8027bde:	9405      	str	r4, [sp, #20]
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 8027be0:	2401      	movs	r4, #1
 8027be2:	9402      	str	r4, [sp, #8]
 8027be4:	2404      	movs	r4, #4
 8027be6:	9401      	str	r4, [sp, #4]
 8027be8:	ac05      	add	r4, sp, #20
 8027bea:	9400      	str	r4, [sp, #0]
 8027bec:	f7fd fd88 	bl	8025700 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8027bf0:	4b09      	ldr	r3, [pc, #36]	@ (8027c18 <tx_dhcp_request_re+0x40>)
 8027bf2:	681b      	ldr	r3, [r3, #0]
 8027bf4:	2b02      	cmp	r3, #2
 8027bf6:	dc01      	bgt.n	8027bfc <tx_dhcp_request_re+0x24>
}
 8027bf8:	b006      	add	sp, #24
 8027bfa:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP req sent"));
 8027bfc:	4b07      	ldr	r3, [pc, #28]	@ (8027c1c <tx_dhcp_request_re+0x44>)
 8027bfe:	f241 4266 	movw	r2, #5222	@ 0x1466
 8027c02:	4907      	ldr	r1, [pc, #28]	@ (8027c20 <tx_dhcp_request_re+0x48>)
 8027c04:	2003      	movs	r0, #3
 8027c06:	f7fd ff3f 	bl	8025a88 <mg_log_prefix>
 8027c0a:	4806      	ldr	r0, [pc, #24]	@ (8027c24 <tx_dhcp_request_re+0x4c>)
 8027c0c:	f7fb fe26 	bl	802385c <mg_log>
}
 8027c10:	e7f2      	b.n	8027bf8 <tx_dhcp_request_re+0x20>
 8027c12:	bf00      	nop
 8027c14:	ff030135 	.word	0xff030135
 8027c18:	2000012c 	.word	0x2000012c
 8027c1c:	0803a988 	.word	0x0803a988
 8027c20:	0803a050 	.word	0x0803a050
 8027c24:	0803a584 	.word	0x0803a584

08027c28 <rx_arp>:
static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8027c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027c2a:	b083      	sub	sp, #12
 8027c2c:	4604      	mov	r4, r0
 8027c2e:	460d      	mov	r5, r1
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8027c30:	698e      	ldr	r6, [r1, #24]
 8027c32:	88f7      	ldrh	r7, [r6, #6]
 8027c34:	2001      	movs	r0, #1
 8027c36:	f7fd fc21 	bl	802547c <mg_ntohs>
 8027c3a:	4287      	cmp	r7, r0
 8027c3c:	d006      	beq.n	8027c4c <rx_arp+0x24>
  } else if (pkt->arp->op == mg_htons(2)) {
 8027c3e:	2002      	movs	r0, #2
 8027c40:	f7fd fc1c 	bl	802547c <mg_ntohs>
 8027c44:	4287      	cmp	r7, r0
 8027c46:	d05a      	beq.n	8027cfe <rx_arp+0xd6>
}
 8027c48:	b003      	add	sp, #12
 8027c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8027c4c:	69b2      	ldr	r2, [r6, #24]
 8027c4e:	68a3      	ldr	r3, [r4, #8]
 8027c50:	429a      	cmp	r2, r3
 8027c52:	d1f4      	bne.n	8027c3e <rx_arp+0x16>
    struct eth *eth = (struct eth *) ifp->tx.buf;
 8027c54:	6966      	ldr	r6, [r4, #20]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 8027c56:	692b      	ldr	r3, [r5, #16]
 8027c58:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8027c5c:	6032      	str	r2, [r6, #0]
 8027c5e:	895b      	ldrh	r3, [r3, #10]
 8027c60:	80b3      	strh	r3, [r6, #4]
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8027c62:	6823      	ldr	r3, [r4, #0]
 8027c64:	f8c6 3006 	str.w	r3, [r6, #6]
 8027c68:	88a3      	ldrh	r3, [r4, #4]
 8027c6a:	8173      	strh	r3, [r6, #10]
    eth->type = mg_htons(0x806);
 8027c6c:	f640 0006 	movw	r0, #2054	@ 0x806
 8027c70:	f7fd fc04 	bl	802547c <mg_ntohs>
 8027c74:	81b0      	strh	r0, [r6, #12]
    *arp = *pkt->arp;
 8027c76:	69ab      	ldr	r3, [r5, #24]
 8027c78:	6818      	ldr	r0, [r3, #0]
 8027c7a:	6859      	ldr	r1, [r3, #4]
 8027c7c:	689a      	ldr	r2, [r3, #8]
 8027c7e:	68df      	ldr	r7, [r3, #12]
 8027c80:	f8c6 000e 	str.w	r0, [r6, #14]
 8027c84:	f8c6 1012 	str.w	r1, [r6, #18]
 8027c88:	f8c6 2016 	str.w	r2, [r6, #22]
 8027c8c:	f8c6 701a 	str.w	r7, [r6, #26]
 8027c90:	6918      	ldr	r0, [r3, #16]
 8027c92:	6959      	ldr	r1, [r3, #20]
 8027c94:	699a      	ldr	r2, [r3, #24]
 8027c96:	f8c6 001e 	str.w	r0, [r6, #30]
 8027c9a:	f8c6 1022 	str.w	r1, [r6, #34]	@ 0x22
 8027c9e:	f8c6 2026 	str.w	r2, [r6, #38]	@ 0x26
    arp->op = mg_htons(2);
 8027ca2:	2002      	movs	r0, #2
 8027ca4:	f7fd fbea 	bl	802547c <mg_ntohs>
 8027ca8:	82b0      	strh	r0, [r6, #20]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 8027caa:	69ab      	ldr	r3, [r5, #24]
 8027cac:	689a      	ldr	r2, [r3, #8]
 8027cae:	6232      	str	r2, [r6, #32]
 8027cb0:	899b      	ldrh	r3, [r3, #12]
 8027cb2:	84b3      	strh	r3, [r6, #36]	@ 0x24
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 8027cb4:	6823      	ldr	r3, [r4, #0]
 8027cb6:	f8c6 3016 	str.w	r3, [r6, #22]
 8027cba:	88a3      	ldrh	r3, [r4, #4]
 8027cbc:	8373      	strh	r3, [r6, #26]
    arp->tpa = pkt->arp->spa;
 8027cbe:	69ab      	ldr	r3, [r5, #24]
 8027cc0:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8027cc4:	f8c6 3026 	str.w	r3, [r6, #38]	@ 0x26
    arp->spa = ifp->ip;
 8027cc8:	68a3      	ldr	r3, [r4, #8]
 8027cca:	61f3      	str	r3, [r6, #28]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 8027ccc:	4b32      	ldr	r3, [pc, #200]	@ (8027d98 <rx_arp+0x170>)
 8027cce:	681b      	ldr	r3, [r3, #0]
 8027cd0:	2b02      	cmp	r3, #2
 8027cd2:	dc04      	bgt.n	8027cde <rx_arp+0xb6>
    ether_output(ifp, PDIFF(eth, arp + 1));
 8027cd4:	212a      	movs	r1, #42	@ 0x2a
 8027cd6:	4620      	mov	r0, r4
 8027cd8:	f7f8 ff95 	bl	8020c06 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8027cdc:	e7b4      	b.n	8027c48 <rx_arp+0x20>
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 8027cde:	4b2f      	ldr	r3, [pc, #188]	@ (8027d9c <rx_arp+0x174>)
 8027ce0:	f241 4292 	movw	r2, #5266	@ 0x1492
 8027ce4:	492e      	ldr	r1, [pc, #184]	@ (8027da0 <rx_arp+0x178>)
 8027ce6:	2003      	movs	r0, #3
 8027ce8:	f7fd fece 	bl	8025a88 <mg_log_prefix>
 8027cec:	9400      	str	r4, [sp, #0]
 8027cee:	4b2d      	ldr	r3, [pc, #180]	@ (8027da4 <rx_arp+0x17c>)
 8027cf0:	f106 0226 	add.w	r2, r6, #38	@ 0x26
 8027cf4:	492c      	ldr	r1, [pc, #176]	@ (8027da8 <rx_arp+0x180>)
 8027cf6:	482d      	ldr	r0, [pc, #180]	@ (8027dac <rx_arp+0x184>)
 8027cf8:	f7fb fdb0 	bl	802385c <mg_log>
 8027cfc:	e7ea      	b.n	8027cd4 <rx_arp+0xac>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 8027cfe:	2206      	movs	r2, #6
 8027d00:	4621      	mov	r1, r4
 8027d02:	f106 0012 	add.w	r0, r6, #18
 8027d06:	f004 fa27 	bl	802c158 <memcmp>
 8027d0a:	2800      	cmp	r0, #0
 8027d0c:	d19c      	bne.n	8027c48 <rx_arp+0x20>
    if (pkt->arp->spa == ifp->gw) {
 8027d0e:	f8d6 200e 	ldr.w	r2, [r6, #14]
 8027d12:	6923      	ldr	r3, [r4, #16]
 8027d14:	429a      	cmp	r2, r3
 8027d16:	d026      	beq.n	8027d66 <rx_arp+0x13e>
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8027d18:	2200      	movs	r2, #0
 8027d1a:	4629      	mov	r1, r5
 8027d1c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8027d1e:	f7fa fa50 	bl	80221c2 <getpeer>
      if (c != NULL && c->is_arplooking) {
 8027d22:	4604      	mov	r4, r0
 8027d24:	2800      	cmp	r0, #0
 8027d26:	d08f      	beq.n	8027c48 <rx_arp+0x20>
 8027d28:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8027d2c:	f013 0f10 	tst.w	r3, #16
 8027d30:	d08a      	beq.n	8027c48 <rx_arp+0x20>
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 8027d32:	f100 05c8 	add.w	r5, r0, #200	@ 0xc8
 8027d36:	68b3      	ldr	r3, [r6, #8]
 8027d38:	f8c0 30c8 	str.w	r3, [r0, #200]	@ 0xc8
 8027d3c:	89b3      	ldrh	r3, [r6, #12]
 8027d3e:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8027d42:	4b15      	ldr	r3, [pc, #84]	@ (8027d98 <rx_arp+0x170>)
 8027d44:	681b      	ldr	r3, [r3, #0]
 8027d46:	2b02      	cmp	r3, #2
 8027d48:	dc14      	bgt.n	8027d74 <rx_arp+0x14c>
        c->is_arplooking = 0;
 8027d4a:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8027d4e:	f36f 1304 	bfc	r3, #4, #1
 8027d52:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
        send_syn(c);
 8027d56:	4620      	mov	r0, r4
 8027d58:	f7ff fc22 	bl	80275a0 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 8027d5c:	2103      	movs	r1, #3
 8027d5e:	4620      	mov	r0, r4
 8027d60:	f7ff fc6a 	bl	8027638 <settmout>
 8027d64:	e770      	b.n	8027c48 <rx_arp+0x20>
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 8027d66:	68b3      	ldr	r3, [r6, #8]
 8027d68:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 8027d6c:	89b3      	ldrh	r3, [r6, #12]
 8027d6e:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8027d72:	e769      	b.n	8027c48 <rx_arp+0x20>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8027d74:	4b09      	ldr	r3, [pc, #36]	@ (8027d9c <rx_arp+0x174>)
 8027d76:	f241 429f 	movw	r2, #5279	@ 0x149f
 8027d7a:	4909      	ldr	r1, [pc, #36]	@ (8027da0 <rx_arp+0x178>)
 8027d7c:	2003      	movs	r0, #3
 8027d7e:	f7fd fe83 	bl	8025a88 <mg_log_prefix>
 8027d82:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027d84:	9501      	str	r5, [sp, #4]
 8027d86:	4b07      	ldr	r3, [pc, #28]	@ (8027da4 <rx_arp+0x17c>)
 8027d88:	9300      	str	r3, [sp, #0]
 8027d8a:	f104 031c 	add.w	r3, r4, #28
 8027d8e:	4a06      	ldr	r2, [pc, #24]	@ (8027da8 <rx_arp+0x180>)
 8027d90:	4807      	ldr	r0, [pc, #28]	@ (8027db0 <rx_arp+0x188>)
 8027d92:	f7fb fd63 	bl	802385c <mg_log>
 8027d96:	e7d8      	b.n	8027d4a <rx_arp+0x122>
 8027d98:	2000012c 	.word	0x2000012c
 8027d9c:	0803a974 	.word	0x0803a974
 8027da0:	0803a050 	.word	0x0803a050
 8027da4:	0802382d 	.word	0x0802382d
 8027da8:	0802381d 	.word	0x0802381d
 8027dac:	0803a594 	.word	0x0803a594
 8027db0:	0803a5ac 	.word	0x0803a5ac

08027db4 <tx_dhcp_request_sel>:
                                uint32_t ip_srv) {
 8027db4:	b570      	push	{r4, r5, r6, lr}
 8027db6:	b08c      	sub	sp, #48	@ 0x30
 8027db8:	4686      	mov	lr, r0
 8027dba:	460d      	mov	r5, r1
 8027dbc:	4616      	mov	r6, r2
  uint8_t opts[] = {
 8027dbe:	f10d 0c14 	add.w	ip, sp, #20
 8027dc2:	4c22      	ldr	r4, [pc, #136]	@ (8027e4c <tx_dhcp_request_sel+0x98>)
 8027dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8027dc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8027dca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8027dce:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8027dd2:	f82c 2b02 	strh.w	r2, [ip], #2
 8027dd6:	0c12      	lsrs	r2, r2, #16
 8027dd8:	f88c 2000 	strb.w	r2, [ip]
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 8027ddc:	f8cd 601e 	str.w	r6, [sp, #30]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 8027de0:	9509      	str	r5, [sp, #36]	@ 0x24
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 8027de2:	f89e 301f 	ldrb.w	r3, [lr, #31]
 8027de6:	b323      	cbz	r3, 8027e32 <tx_dhcp_request_sel+0x7e>
 8027de8:	2306      	movs	r3, #6
 8027dea:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8027dee:	2301      	movs	r3, #1
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 8027df0:	f89e 2020 	ldrb.w	r2, [lr, #32]
 8027df4:	b132      	cbz	r2, 8027e04 <tx_dhcp_request_sel+0x50>
 8027df6:	1c5a      	adds	r2, r3, #1
 8027df8:	3348      	adds	r3, #72	@ 0x48
 8027dfa:	446b      	add	r3, sp
 8027dfc:	212a      	movs	r1, #42	@ 0x2a
 8027dfe:	f803 1c1c 	strb.w	r1, [r3, #-28]
 8027e02:	b2d3      	uxtb	r3, r2
  opts[21] += addopts;
 8027e04:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8027e08:	441a      	add	r2, r3
 8027e0a:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 8027e0e:	2200      	movs	r2, #0
 8027e10:	9202      	str	r2, [sp, #8]
 8027e12:	3319      	adds	r3, #25
 8027e14:	9301      	str	r3, [sp, #4]
 8027e16:	ab05      	add	r3, sp, #20
 8027e18:	9300      	str	r3, [sp, #0]
 8027e1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027e1e:	490c      	ldr	r1, [pc, #48]	@ (8027e50 <tx_dhcp_request_sel+0x9c>)
 8027e20:	4670      	mov	r0, lr
 8027e22:	f7fd fc6d 	bl	8025700 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8027e26:	4b0b      	ldr	r3, [pc, #44]	@ (8027e54 <tx_dhcp_request_sel+0xa0>)
 8027e28:	681b      	ldr	r3, [r3, #0]
 8027e2a:	2b02      	cmp	r3, #2
 8027e2c:	dc03      	bgt.n	8027e36 <tx_dhcp_request_sel+0x82>
}
 8027e2e:	b00c      	add	sp, #48	@ 0x30
 8027e30:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t addopts = 0;
 8027e32:	2300      	movs	r3, #0
 8027e34:	e7dc      	b.n	8027df0 <tx_dhcp_request_sel+0x3c>
  MG_DEBUG(("DHCP req sent"));
 8027e36:	4b08      	ldr	r3, [pc, #32]	@ (8027e58 <tx_dhcp_request_sel+0xa4>)
 8027e38:	f241 425b 	movw	r2, #5211	@ 0x145b
 8027e3c:	4907      	ldr	r1, [pc, #28]	@ (8027e5c <tx_dhcp_request_sel+0xa8>)
 8027e3e:	2003      	movs	r0, #3
 8027e40:	f7fd fe22 	bl	8025a88 <mg_log_prefix>
 8027e44:	4806      	ldr	r0, [pc, #24]	@ (8027e60 <tx_dhcp_request_sel+0xac>)
 8027e46:	f7fb fd09 	bl	802385c <mg_log>
}
 8027e4a:	e7f0      	b.n	8027e2e <tx_dhcp_request_sel+0x7a>
 8027e4c:	080357f8 	.word	0x080357f8
 8027e50:	0803aad8 	.word	0x0803aad8
 8027e54:	2000012c 	.word	0x2000012c
 8027e58:	0803a948 	.word	0x0803a948
 8027e5c:	0803a050 	.word	0x0803a050
 8027e60:	0803a584 	.word	0x0803a584

08027e64 <read_conn>:
static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 8027e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e68:	b089      	sub	sp, #36	@ 0x24
 8027e6a:	4604      	mov	r4, r0
 8027e6c:	460d      	mov	r5, r1
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 8027e6e:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8027e72:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8027e76:	d049      	beq.n	8027f0c <read_conn+0xa8>
 8027e78:	f100 0968 	add.w	r9, r0, #104	@ 0x68
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 8027e7c:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 8027e7e:	6878      	ldr	r0, [r7, #4]
 8027e80:	f7fd fa64 	bl	802534c <mg_ntohl>
 8027e84:	4680      	mov	r8, r0
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8027e86:	69e6      	ldr	r6, [r4, #28]
  if (pkt->tcp->flags & TH_FIN) {
 8027e88:	7b7b      	ldrb	r3, [r7, #13]
 8027e8a:	f013 0f01 	tst.w	r3, #1
 8027e8e:	d053      	beq.n	8027f38 <read_conn+0xd4>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 8027e90:	68eb      	ldr	r3, [r5, #12]
 8027e92:	4403      	add	r3, r0
 8027e94:	3301      	adds	r3, #1
 8027e96:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 8027e9a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027e9e:	f013 0f10 	tst.w	r3, #16
 8027ea2:	d003      	beq.n	8027eac <read_conn+0x48>
 8027ea4:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8027ea8:	2b04      	cmp	r3, #4
 8027eaa:	d032      	beq.n	8027f12 <read_conn+0xae>
      c->is_draining = 1;
 8027eac:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027eb0:	f043 0310 	orr.w	r3, r3, #16
 8027eb4:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 8027eb8:	2104      	movs	r1, #4
 8027eba:	4620      	mov	r0, r4
 8027ebc:	f7ff fbbc 	bl	8027638 <settmout>
      flags |= TH_FIN;
 8027ec0:	f04f 0b11 	mov.w	fp, #17
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 8027ec4:	6863      	ldr	r3, [r4, #4]
 8027ec6:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8027ec8:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 8027ecc:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8027ed0:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8027ed4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8027ed8:	f7fd fa38 	bl	802534c <mg_ntohl>
 8027edc:	4605      	mov	r5, r0
 8027ede:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8027ee2:	f7fd fa33 	bl	802534c <mg_ntohl>
 8027ee6:	2300      	movs	r3, #0
 8027ee8:	9305      	str	r3, [sp, #20]
 8027eea:	4b9b      	ldr	r3, [pc, #620]	@ (8028158 <read_conn+0x2f4>)
 8027eec:	9304      	str	r3, [sp, #16]
 8027eee:	9003      	str	r0, [sp, #12]
 8027ef0:	9502      	str	r5, [sp, #8]
 8027ef2:	f8cd a004 	str.w	sl, [sp, #4]
 8027ef6:	f8cd 9000 	str.w	r9, [sp]
 8027efa:	465b      	mov	r3, fp
 8027efc:	4632      	mov	r2, r6
 8027efe:	4641      	mov	r1, r8
 8027f00:	4638      	mov	r0, r7
 8027f02:	f7ff fabd 	bl	8027480 <tx_tcp>
}
 8027f06:	b009      	add	sp, #36	@ 0x24
 8027f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 8027f0c:	f100 0938 	add.w	r9, r0, #56	@ 0x38
 8027f10:	e7b4      	b.n	8027e7c <read_conn+0x18>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 8027f12:	f8d4 70b0 	ldr.w	r7, [r4, #176]	@ 0xb0
 8027f16:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8027f18:	6898      	ldr	r0, [r3, #8]
 8027f1a:	f7fd fa17 	bl	802534c <mg_ntohl>
 8027f1e:	4287      	cmp	r7, r0
 8027f20:	d004      	beq.n	8027f2c <read_conn+0xc8>
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 8027f22:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8027f26:	f04f 0b10 	mov.w	fp, #16
 8027f2a:	e7cb      	b.n	8027ec4 <read_conn+0x60>
        s->seq++;                               // Yes. Increment our SEQ
 8027f2c:	3701      	adds	r7, #1
 8027f2e:	f8c4 70b0 	str.w	r7, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8027f32:	f04f 0b10 	mov.w	fp, #16
 8027f36:	e7c5      	b.n	8027ec4 <read_conn+0x60>
  } else if (pkt->pay.len == 0) {
 8027f38:	68eb      	ldr	r3, [r5, #12]
 8027f3a:	2b00      	cmp	r3, #0
 8027f3c:	d0e3      	beq.n	8027f06 <read_conn+0xa2>
  } else if (seq != s->ack) {
 8027f3e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8027f42:	4282      	cmp	r2, r0
 8027f44:	d046      	beq.n	8027fd4 <read_conn+0x170>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8027f46:	181d      	adds	r5, r3, r0
    if (s->ack == ack) {
 8027f48:	42aa      	cmp	r2, r5
 8027f4a:	d025      	beq.n	8027f98 <read_conn+0x134>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8027f4c:	4b83      	ldr	r3, [pc, #524]	@ (802815c <read_conn+0x2f8>)
 8027f4e:	681b      	ldr	r3, [r3, #0]
 8027f50:	2b03      	cmp	r3, #3
 8027f52:	dc30      	bgt.n	8027fb6 <read_conn+0x152>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8027f54:	6863      	ldr	r3, [r4, #4]
 8027f56:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8027f58:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 8027f5c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8027f60:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8027f64:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8027f68:	f7fd f9f0 	bl	802534c <mg_ntohl>
 8027f6c:	4605      	mov	r5, r0
 8027f6e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8027f72:	f7fd f9eb 	bl	802534c <mg_ntohl>
 8027f76:	2300      	movs	r3, #0
 8027f78:	9305      	str	r3, [sp, #20]
 8027f7a:	4b77      	ldr	r3, [pc, #476]	@ (8028158 <read_conn+0x2f4>)
 8027f7c:	9304      	str	r3, [sp, #16]
 8027f7e:	9003      	str	r0, [sp, #12]
 8027f80:	9502      	str	r5, [sp, #8]
 8027f82:	f8cd a004 	str.w	sl, [sp, #4]
 8027f86:	f8cd 9000 	str.w	r9, [sp]
 8027f8a:	2310      	movs	r3, #16
 8027f8c:	4632      	mov	r2, r6
 8027f8e:	4641      	mov	r1, r8
 8027f90:	4638      	mov	r0, r7
 8027f92:	f7ff fa75 	bl	8027480 <tx_tcp>
 8027f96:	e7b6      	b.n	8027f06 <read_conn+0xa2>
      MG_VERBOSE(("ignoring duplicate pkt"));
 8027f98:	4b70      	ldr	r3, [pc, #448]	@ (802815c <read_conn+0x2f8>)
 8027f9a:	681b      	ldr	r3, [r3, #0]
 8027f9c:	2b03      	cmp	r3, #3
 8027f9e:	ddb2      	ble.n	8027f06 <read_conn+0xa2>
 8027fa0:	4b6f      	ldr	r3, [pc, #444]	@ (8028160 <read_conn+0x2fc>)
 8027fa2:	f241 52da 	movw	r2, #5594	@ 0x15da
 8027fa6:	496f      	ldr	r1, [pc, #444]	@ (8028164 <read_conn+0x300>)
 8027fa8:	2004      	movs	r0, #4
 8027faa:	f7fd fd6d 	bl	8025a88 <mg_log_prefix>
 8027fae:	486e      	ldr	r0, [pc, #440]	@ (8028168 <read_conn+0x304>)
 8027fb0:	f7fb fc54 	bl	802385c <mg_log>
 8027fb4:	e7a7      	b.n	8027f06 <read_conn+0xa2>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8027fb6:	4b6a      	ldr	r3, [pc, #424]	@ (8028160 <read_conn+0x2fc>)
 8027fb8:	f241 52dc 	movw	r2, #5596	@ 0x15dc
 8027fbc:	4969      	ldr	r1, [pc, #420]	@ (8028164 <read_conn+0x300>)
 8027fbe:	2004      	movs	r0, #4
 8027fc0:	f7fd fd62 	bl	8025a88 <mg_log_prefix>
 8027fc4:	462b      	mov	r3, r5
 8027fc6:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8027fca:	4641      	mov	r1, r8
 8027fcc:	4867      	ldr	r0, [pc, #412]	@ (802816c <read_conn+0x308>)
 8027fce:	f7fb fc45 	bl	802385c <mg_log>
 8027fd2:	e7bf      	b.n	8027f54 <read_conn+0xf0>
  } else if (io->size - io->len < pkt->pay.len &&
 8027fd4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8027fd8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8027fdc:	1a52      	subs	r2, r2, r1
 8027fde:	4293      	cmp	r3, r2
 8027fe0:	d905      	bls.n	8027fee <read_conn+0x18a>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8027fe2:	4419      	add	r1, r3
 8027fe4:	4648      	mov	r0, r9
 8027fe6:	f7fe fb8b 	bl	8026700 <mg_iobuf_resize>
  } else if (io->size - io->len < pkt->pay.len &&
 8027fea:	2800      	cmp	r0, #0
 8027fec:	d05c      	beq.n	80280a8 <read_conn+0x244>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 8027fee:	f8d9 0000 	ldr.w	r0, [r9]
 8027ff2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8027ff6:	68ea      	ldr	r2, [r5, #12]
 8027ff8:	68a9      	ldr	r1, [r5, #8]
 8027ffa:	4418      	add	r0, r3
 8027ffc:	f005 fb7c 	bl	802d6f8 <memcpy>
    io->len += pkt->pay.len;
 8028000:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8028004:	68ea      	ldr	r2, [r5, #12]
 8028006:	4413      	add	r3, r2
 8028008:	f8c9 3008 	str.w	r3, [r9, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 802800c:	4b53      	ldr	r3, [pc, #332]	@ (802815c <read_conn+0x2f8>)
 802800e:	681b      	ldr	r3, [r3, #0]
 8028010:	2b03      	cmp	r3, #3
 8028012:	dc4e      	bgt.n	80280b2 <read_conn+0x24e>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8028014:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8028016:	6858      	ldr	r0, [r3, #4]
 8028018:	f7fd f998 	bl	802534c <mg_ntohl>
 802801c:	68eb      	ldr	r3, [r5, #12]
 802801e:	4418      	add	r0, r3
 8028020:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    s->unacked += pkt->pay.len;
 8028024:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8028028:	68ea      	ldr	r2, [r5, #12]
 802802a:	4413      	add	r3, r2
 802802c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 8028030:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8028034:	4293      	cmp	r3, r2
 8028036:	d95e      	bls.n	80280f6 <read_conn+0x292>
 8028038:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 802803c:	4298      	cmp	r0, r3
 802803e:	d05a      	beq.n	80280f6 <read_conn+0x292>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 8028040:	4b46      	ldr	r3, [pc, #280]	@ (802815c <read_conn+0x2f8>)
 8028042:	681b      	ldr	r3, [r3, #0]
 8028044:	2b03      	cmp	r3, #3
 8028046:	dc48      	bgt.n	80280da <read_conn+0x276>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8028048:	6863      	ldr	r3, [r4, #4]
 802804a:	f8d3 903c 	ldr.w	r9, [r3, #60]	@ 0x3c
 802804e:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 8028052:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8028056:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 802805a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 802805e:	f7fd f975 	bl	802534c <mg_ntohl>
 8028062:	9007      	str	r0, [sp, #28]
 8028064:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028068:	f7fd f970 	bl	802534c <mg_ntohl>
 802806c:	2700      	movs	r7, #0
 802806e:	9705      	str	r7, [sp, #20]
 8028070:	9704      	str	r7, [sp, #16]
 8028072:	9003      	str	r0, [sp, #12]
 8028074:	9b07      	ldr	r3, [sp, #28]
 8028076:	9302      	str	r3, [sp, #8]
 8028078:	f8cd b004 	str.w	fp, [sp, #4]
 802807c:	f8cd a000 	str.w	sl, [sp]
 8028080:	2310      	movs	r3, #16
 8028082:	4632      	mov	r2, r6
 8028084:	4641      	mov	r1, r8
 8028086:	4648      	mov	r0, r9
 8028088:	f7ff f9fa 	bl	8027480 <tx_tcp>
      s->unacked = 0;
 802808c:	f8c4 70c4 	str.w	r7, [r4, #196]	@ 0xc4
      s->acked = s->ack;
 8028090:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8028094:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 8028098:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 802809c:	b37b      	cbz	r3, 80280fe <read_conn+0x29a>
 802809e:	4639      	mov	r1, r7
 80280a0:	4620      	mov	r0, r4
 80280a2:	f7ff fac9 	bl	8027638 <settmout>
 80280a6:	e02a      	b.n	80280fe <read_conn+0x29a>
    mg_error(c, "oom");
 80280a8:	4931      	ldr	r1, [pc, #196]	@ (8028170 <read_conn+0x30c>)
 80280aa:	4620      	mov	r0, r4
 80280ac:	f7fd fdd4 	bl	8025c58 <mg_error>
 80280b0:	e729      	b.n	8027f06 <read_conn+0xa2>
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 80280b2:	4b2b      	ldr	r3, [pc, #172]	@ (8028160 <read_conn+0x2fc>)
 80280b4:	f241 52ed 	movw	r2, #5613	@ 0x15ed
 80280b8:	492a      	ldr	r1, [pc, #168]	@ (8028164 <read_conn+0x300>)
 80280ba:	2004      	movs	r0, #4
 80280bc:	f7fd fce4 	bl	8025a88 <mg_log_prefix>
 80280c0:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 80280c2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80280c4:	6858      	ldr	r0, [r3, #4]
 80280c6:	f7fd f941 	bl	802534c <mg_ntohl>
 80280ca:	4602      	mov	r2, r0
 80280cc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80280d0:	4639      	mov	r1, r7
 80280d2:	4828      	ldr	r0, [pc, #160]	@ (8028174 <read_conn+0x310>)
 80280d4:	f7fb fbc2 	bl	802385c <mg_log>
 80280d8:	e79c      	b.n	8028014 <read_conn+0x1b0>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 80280da:	4b21      	ldr	r3, [pc, #132]	@ (8028160 <read_conn+0x2fc>)
 80280dc:	f241 52f4 	movw	r2, #5620	@ 0x15f4
 80280e0:	4920      	ldr	r1, [pc, #128]	@ (8028164 <read_conn+0x300>)
 80280e2:	2004      	movs	r0, #4
 80280e4:	f7fd fcd0 	bl	8025a88 <mg_log_prefix>
 80280e8:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
 80280ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80280ee:	4822      	ldr	r0, [pc, #136]	@ (8028178 <read_conn+0x314>)
 80280f0:	f7fb fbb4 	bl	802385c <mg_log>
 80280f4:	e7a8      	b.n	8028048 <read_conn+0x1e4>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 80280f6:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80280fa:	2b01      	cmp	r3, #1
 80280fc:	d11b      	bne.n	8028136 <read_conn+0x2d2>
    if (c->is_tls && c->is_tls_hs) {
 80280fe:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028102:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8028106:	2ac0      	cmp	r2, #192	@ 0xc0
 8028108:	f43f aefd 	beq.w	8027f06 <read_conn+0xa2>
    } else if (c->is_tls) {
 802810c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8028110:	d01b      	beq.n	802814a <read_conn+0x2e6>
      io = &c->recv;
 8028112:	f104 0638 	add.w	r6, r4, #56	@ 0x38
      if (io->size - io->len < pkt->pay.len &&
 8028116:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8028118:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802811a:	1a5b      	subs	r3, r3, r1
 802811c:	68ea      	ldr	r2, [r5, #12]
 802811e:	4293      	cmp	r3, r2
 8028120:	d204      	bcs.n	802812c <read_conn+0x2c8>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8028122:	4411      	add	r1, r2
 8028124:	4630      	mov	r0, r6
 8028126:	f7fe faeb 	bl	8026700 <mg_iobuf_resize>
      if (io->size - io->len < pkt->pay.len &&
 802812a:	b148      	cbz	r0, 8028140 <read_conn+0x2dc>
        handle_tls_recv(c, io);
 802812c:	4631      	mov	r1, r6
 802812e:	4620      	mov	r0, r4
 8028130:	f7fd fdca 	bl	8025cc8 <handle_tls_recv>
 8028134:	e6e7      	b.n	8027f06 <read_conn+0xa2>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8028136:	2101      	movs	r1, #1
 8028138:	4620      	mov	r0, r4
 802813a:	f7ff fa7d 	bl	8027638 <settmout>
 802813e:	e7de      	b.n	80280fe <read_conn+0x29a>
        mg_error(c, "oom");
 8028140:	490b      	ldr	r1, [pc, #44]	@ (8028170 <read_conn+0x30c>)
 8028142:	4620      	mov	r0, r4
 8028144:	f7fd fd88 	bl	8025c58 <mg_error>
 8028148:	e6dd      	b.n	8027f06 <read_conn+0xa2>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 802814a:	f105 020c 	add.w	r2, r5, #12
 802814e:	2107      	movs	r1, #7
 8028150:	4620      	mov	r0, r4
 8028152:	f7fa f939 	bl	80223c8 <mg_call>
}
 8028156:	e6d6      	b.n	8027f06 <read_conn+0xa2>
 8028158:	08036364 	.word	0x08036364
 802815c:	2000012c 	.word	0x2000012c
 8028160:	0803a93c 	.word	0x0803a93c
 8028164:	0803a050 	.word	0x0803a050
 8028168:	0803a5c8 	.word	0x0803a5c8
 802816c:	0803a5e0 	.word	0x0803a5e0
 8028170:	0803a350 	.word	0x0803a350
 8028174:	0803a5f8 	.word	0x0803a5f8
 8028178:	0803a60c 	.word	0x0803a60c

0802817c <accept_conn>:
                                         struct pkt *pkt) {
 802817c:	b570      	push	{r4, r5, r6, lr}
 802817e:	4605      	mov	r5, r0
 8028180:	460e      	mov	r6, r1
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 8028182:	6840      	ldr	r0, [r0, #4]
 8028184:	f7fa fe92 	bl	8022eac <mg_alloc_conn>
  if (c == NULL) {
 8028188:	4604      	mov	r4, r0
 802818a:	2800      	cmp	r0, #0
 802818c:	d058      	beq.n	8028240 <accept_conn+0xc4>
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 802818e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8028190:	6898      	ldr	r0, [r3, #8]
 8028192:	f7fd f8db 	bl	802534c <mg_ntohl>
 8028196:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
 802819a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 802819c:	6858      	ldr	r0, [r3, #4]
 802819e:	f7fd f8d5 	bl	802534c <mg_ntohl>
 80281a2:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 80281a6:	6933      	ldr	r3, [r6, #16]
 80281a8:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80281ac:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 80281b0:	895b      	ldrh	r3, [r3, #10]
 80281b2:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
  settmout(c, MIP_TTYPE_KEEPALIVE);
 80281b6:	2100      	movs	r1, #0
 80281b8:	4620      	mov	r0, r4
 80281ba:	f7ff fa3d 	bl	8027638 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 80281be:	69f3      	ldr	r3, [r6, #28]
 80281c0:	68db      	ldr	r3, [r3, #12]
 80281c2:	61e3      	str	r3, [r4, #28]
  c->rem.port = pkt->tcp->sport;
 80281c4:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80281c6:	881b      	ldrh	r3, [r3, #0]
 80281c8:	85a3      	strh	r3, [r4, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 80281ca:	4b2c      	ldr	r3, [pc, #176]	@ (802827c <accept_conn+0x100>)
 80281cc:	681b      	ldr	r3, [r3, #0]
 80281ce:	2b02      	cmp	r3, #2
 80281d0:	dc45      	bgt.n	802825e <accept_conn+0xe2>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 80281d2:	686b      	ldr	r3, [r5, #4]
 80281d4:	681b      	ldr	r3, [r3, #0]
 80281d6:	6023      	str	r3, [r4, #0]
 80281d8:	686b      	ldr	r3, [r5, #4]
 80281da:	601c      	str	r4, [r3, #0]
  c->is_accepted = 1;
 80281dc:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80281e0:	f043 0304 	orr.w	r3, r3, #4
 80281e4:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 80281e8:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80281ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80281f0:	f894 20ad 	ldrb.w	r2, [r4, #173]	@ 0xad
 80281f4:	f363 02c3 	bfi	r2, r3, #3, #1
 80281f8:	f884 20ad 	strb.w	r2, [r4, #173]	@ 0xad
  c->pfn = lsn->pfn;
 80281fc:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 8028200:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->loc = lsn->loc;
 8028204:	f104 0608 	add.w	r6, r4, #8
 8028208:	f105 0c08 	add.w	ip, r5, #8
 802820c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8028210:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8028212:	f8dc 3000 	ldr.w	r3, [ip]
 8028216:	6033      	str	r3, [r6, #0]
  c->pfn_data = lsn->pfn_data;
 8028218:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 802821c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  c->fn = lsn->fn;
 8028220:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8028222:	67a3      	str	r3, [r4, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 8028224:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8028226:	67e3      	str	r3, [r4, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 8028228:	2200      	movs	r2, #0
 802822a:	2101      	movs	r1, #1
 802822c:	4620      	mov	r0, r4
 802822e:	f7fa f8cb 	bl	80223c8 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 8028232:	2200      	movs	r2, #0
 8028234:	2105      	movs	r1, #5
 8028236:	4620      	mov	r0, r4
 8028238:	f7fa f8c6 	bl	80223c8 <mg_call>
}
 802823c:	4620      	mov	r0, r4
 802823e:	bd70      	pop	{r4, r5, r6, pc}
    MG_ERROR(("OOM"));
 8028240:	4b0e      	ldr	r3, [pc, #56]	@ (802827c <accept_conn+0x100>)
 8028242:	681b      	ldr	r3, [r3, #0]
 8028244:	2b00      	cmp	r3, #0
 8028246:	ddf9      	ble.n	802823c <accept_conn+0xc0>
 8028248:	4b0d      	ldr	r3, [pc, #52]	@ (8028280 <accept_conn+0x104>)
 802824a:	f241 5268 	movw	r2, #5480	@ 0x1568
 802824e:	490d      	ldr	r1, [pc, #52]	@ (8028284 <accept_conn+0x108>)
 8028250:	2001      	movs	r0, #1
 8028252:	f7fd fc19 	bl	8025a88 <mg_log_prefix>
 8028256:	480c      	ldr	r0, [pc, #48]	@ (8028288 <accept_conn+0x10c>)
 8028258:	f7fb fb00 	bl	802385c <mg_log>
    return NULL;
 802825c:	e7ee      	b.n	802823c <accept_conn+0xc0>
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 802825e:	4b08      	ldr	r3, [pc, #32]	@ (8028280 <accept_conn+0x104>)
 8028260:	f241 5271 	movw	r2, #5489	@ 0x1571
 8028264:	4907      	ldr	r1, [pc, #28]	@ (8028284 <accept_conn+0x108>)
 8028266:	2003      	movs	r0, #3
 8028268:	f7fd fc0e 	bl	8025a88 <mg_log_prefix>
 802826c:	f104 031c 	add.w	r3, r4, #28
 8028270:	4a06      	ldr	r2, [pc, #24]	@ (802828c <accept_conn+0x110>)
 8028272:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028274:	4806      	ldr	r0, [pc, #24]	@ (8028290 <accept_conn+0x114>)
 8028276:	f7fb faf1 	bl	802385c <mg_log>
 802827a:	e7aa      	b.n	80281d2 <accept_conn+0x56>
 802827c:	2000012c 	.word	0x2000012c
 8028280:	0803a930 	.word	0x0803a930
 8028284:	0803a050 	.word	0x0803a050
 8028288:	0803a678 	.word	0x0803a678
 802828c:	080259b5 	.word	0x080259b5
 8028290:	0803a61c 	.word	0x0803a61c

08028294 <rx_tcp>:
static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8028294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028298:	b083      	sub	sp, #12
 802829a:	4606      	mov	r6, r0
 802829c:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 802829e:	6b07      	ldr	r7, [r0, #48]	@ 0x30
 80282a0:	2200      	movs	r2, #0
 80282a2:	4638      	mov	r0, r7
 80282a4:	f7f9 ff8d 	bl	80221c2 <getpeer>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 80282a8:	4605      	mov	r5, r0
 80282aa:	b380      	cbz	r0, 802830e <rx_tcp+0x7a>
 80282ac:	f100 08b0 	add.w	r8, r0, #176	@ 0xb0
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 80282b0:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80282b4:	f013 0f20 	tst.w	r3, #32
 80282b8:	d02b      	beq.n	8028312 <rx_tcp+0x7e>
 80282ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80282bc:	7b5a      	ldrb	r2, [r3, #13]
 80282be:	2a12      	cmp	r2, #18
 80282c0:	d126      	bne.n	8028310 <rx_tcp+0x7c>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 80282c2:	6898      	ldr	r0, [r3, #8]
 80282c4:	f7fd f842 	bl	802534c <mg_ntohl>
 80282c8:	f8c5 00b0 	str.w	r0, [r5, #176]	@ 0xb0
 80282cc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80282ce:	6858      	ldr	r0, [r3, #4]
 80282d0:	f7fd f83c 	bl	802534c <mg_ntohl>
 80282d4:	3001      	adds	r0, #1
 80282d6:	f8c8 0004 	str.w	r0, [r8, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 80282da:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80282dc:	689b      	ldr	r3, [r3, #8]
 80282de:	2700      	movs	r7, #0
 80282e0:	9701      	str	r7, [sp, #4]
 80282e2:	9700      	str	r7, [sp, #0]
 80282e4:	2210      	movs	r2, #16
 80282e6:	4621      	mov	r1, r4
 80282e8:	4630      	mov	r0, r6
 80282ea:	f7ff f975 	bl	80275d8 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 80282ee:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 80282f2:	f367 1345 	bfi	r3, r7, #5, #1
 80282f6:	f885 30ac 	strb.w	r3, [r5, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 80282fa:	4639      	mov	r1, r7
 80282fc:	4628      	mov	r0, r5
 80282fe:	f7ff f99b 	bl	8027638 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 8028302:	463a      	mov	r2, r7
 8028304:	2104      	movs	r1, #4
 8028306:	4628      	mov	r0, r5
 8028308:	f7fa f85e 	bl	80223c8 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 802830c:	e01b      	b.n	8028346 <rx_tcp+0xb2>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 802830e:	4680      	mov	r8, r0
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 8028310:	b385      	cbz	r5, 8028374 <rx_tcp+0xe0>
 8028312:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 8028316:	f013 0f20 	tst.w	r3, #32
 802831a:	d004      	beq.n	8028326 <rx_tcp+0x92>
 802831c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802831e:	7b5a      	ldrb	r2, [r3, #13]
 8028320:	2a10      	cmp	r2, #16
 8028322:	d113      	bne.n	802834c <rx_tcp+0xb8>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 8028324:	b335      	cbz	r5, 8028374 <rx_tcp+0xe0>
 8028326:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028328:	7b5b      	ldrb	r3, [r3, #13]
 802832a:	f013 0f04 	tst.w	r3, #4
 802832e:	d117      	bne.n	8028360 <rx_tcp+0xcc>
  } else if (c != NULL) {
 8028330:	b305      	cbz	r5, 8028374 <rx_tcp+0xe0>
    s->tmiss = 0;                         // Reset missed keep-alive counter
 8028332:	2300      	movs	r3, #0
 8028334:	f888 301f 	strb.w	r3, [r8, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 8028338:	f898 301e 	ldrb.w	r3, [r8, #30]
 802833c:	b1ab      	cbz	r3, 802836a <rx_tcp+0xd6>
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 802833e:	4621      	mov	r1, r4
 8028340:	4628      	mov	r0, r5
 8028342:	f7ff fd8f 	bl	8027e64 <read_conn>
}
 8028346:	b003      	add	sp, #12
 8028348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 802834c:	689b      	ldr	r3, [r3, #8]
 802834e:	2200      	movs	r2, #0
 8028350:	9201      	str	r2, [sp, #4]
 8028352:	9200      	str	r2, [sp, #0]
 8028354:	2214      	movs	r2, #20
 8028356:	4621      	mov	r1, r4
 8028358:	4630      	mov	r0, r6
 802835a:	f7ff f93d 	bl	80275d8 <tx_tcp_pkt>
 802835e:	e7f2      	b.n	8028346 <rx_tcp+0xb2>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8028360:	4934      	ldr	r1, [pc, #208]	@ (8028434 <rx_tcp+0x1a0>)
 8028362:	4628      	mov	r0, r5
 8028364:	f7fd fc78 	bl	8025c58 <mg_error>
 8028368:	e7ed      	b.n	8028346 <rx_tcp+0xb2>
      settmout(c,
 802836a:	2100      	movs	r1, #0
 802836c:	4628      	mov	r0, r5
 802836e:	f7ff f963 	bl	8027638 <settmout>
 8028372:	e7e4      	b.n	802833e <rx_tcp+0xaa>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 8028374:	2201      	movs	r2, #1
 8028376:	4621      	mov	r1, r4
 8028378:	4638      	mov	r0, r7
 802837a:	f7f9 ff22 	bl	80221c2 <getpeer>
 802837e:	4607      	mov	r7, r0
 8028380:	b168      	cbz	r0, 802839e <rx_tcp+0x10a>
  } else if (pkt->tcp->flags & TH_RST) {
 8028382:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8028384:	7b6b      	ldrb	r3, [r5, #13]
 8028386:	f013 0f04 	tst.w	r3, #4
 802838a:	d013      	beq.n	80283b4 <rx_tcp+0x120>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 802838c:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028390:	f013 0f04 	tst.w	r3, #4
 8028394:	d0d7      	beq.n	8028346 <rx_tcp+0xb2>
 8028396:	4927      	ldr	r1, [pc, #156]	@ (8028434 <rx_tcp+0x1a0>)
 8028398:	f7fd fc5e 	bl	8025c58 <mg_error>
 802839c:	e7d3      	b.n	8028346 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 802839e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80283a0:	689b      	ldr	r3, [r3, #8]
 80283a2:	2200      	movs	r2, #0
 80283a4:	9201      	str	r2, [sp, #4]
 80283a6:	9200      	str	r2, [sp, #0]
 80283a8:	2214      	movs	r2, #20
 80283aa:	4621      	mov	r1, r4
 80283ac:	4630      	mov	r0, r6
 80283ae:	f7ff f913 	bl	80275d8 <tx_tcp_pkt>
 80283b2:	e7c8      	b.n	8028346 <rx_tcp+0xb2>
  } else if (pkt->tcp->flags & TH_SYN) {
 80283b4:	f013 0f02 	tst.w	r3, #2
 80283b8:	d11d      	bne.n	80283f6 <rx_tcp+0x162>
  } else if (pkt->tcp->flags & TH_FIN) {
 80283ba:	f013 0f01 	tst.w	r3, #1
 80283be:	d129      	bne.n	8028414 <rx_tcp+0x180>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 80283c0:	f8d5 9008 	ldr.w	r9, [r5, #8]
 80283c4:	4648      	mov	r0, r9
 80283c6:	f7fc ffc1 	bl	802534c <mg_ntohl>
 80283ca:	4680      	mov	r8, r0
 80283cc:	8828      	ldrh	r0, [r5, #0]
 80283ce:	f7fd f855 	bl	802547c <mg_ntohs>
 80283d2:	1c43      	adds	r3, r0, #1
 80283d4:	4598      	cmp	r8, r3
 80283d6:	d027      	beq.n	8028428 <rx_tcp+0x194>
  } else if (!c->is_accepted) {  // no peer
 80283d8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80283dc:	f013 0f04 	tst.w	r3, #4
 80283e0:	d1b1      	bne.n	8028346 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 80283e2:	2300      	movs	r3, #0
 80283e4:	9301      	str	r3, [sp, #4]
 80283e6:	9300      	str	r3, [sp, #0]
 80283e8:	464b      	mov	r3, r9
 80283ea:	2214      	movs	r2, #20
 80283ec:	4621      	mov	r1, r4
 80283ee:	4630      	mov	r0, r6
 80283f0:	f7ff f8f2 	bl	80275d8 <tx_tcp_pkt>
}
 80283f4:	e7a7      	b.n	8028346 <rx_tcp+0xb2>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 80283f6:	8828      	ldrh	r0, [r5, #0]
 80283f8:	f7fd f840 	bl	802547c <mg_ntohs>
 80283fc:	f7fc ffa6 	bl	802534c <mg_ntohl>
 8028400:	4603      	mov	r3, r0
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 8028402:	2200      	movs	r2, #0
 8028404:	9201      	str	r2, [sp, #4]
 8028406:	9200      	str	r2, [sp, #0]
 8028408:	2212      	movs	r2, #18
 802840a:	4621      	mov	r1, r4
 802840c:	4630      	mov	r0, r6
 802840e:	f7ff f8e3 	bl	80275d8 <tx_tcp_pkt>
 8028412:	e798      	b.n	8028346 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 8028414:	68ab      	ldr	r3, [r5, #8]
 8028416:	2200      	movs	r2, #0
 8028418:	9201      	str	r2, [sp, #4]
 802841a:	9200      	str	r2, [sp, #0]
 802841c:	2211      	movs	r2, #17
 802841e:	4621      	mov	r1, r4
 8028420:	4630      	mov	r0, r6
 8028422:	f7ff f8d9 	bl	80275d8 <tx_tcp_pkt>
 8028426:	e78e      	b.n	8028346 <rx_tcp+0xb2>
    accept_conn(c, pkt);
 8028428:	4621      	mov	r1, r4
 802842a:	4638      	mov	r0, r7
 802842c:	f7ff fea6 	bl	802817c <accept_conn>
 8028430:	e789      	b.n	8028346 <rx_tcp+0xb2>
 8028432:	bf00      	nop
 8028434:	0803a62c 	.word	0x0803a62c

08028438 <mg_sendnsreq>:
                         struct mg_dns *dnsc, bool ipv6) {
 8028438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802843c:	b082      	sub	sp, #8
 802843e:	4604      	mov	r4, r0
 8028440:	4688      	mov	r8, r1
 8028442:	4617      	mov	r7, r2
 8028444:	461d      	mov	r5, r3
  if (dnsc->url == NULL) {
 8028446:	6819      	ldr	r1, [r3, #0]
 8028448:	2900      	cmp	r1, #0
 802844a:	d037      	beq.n	80284bc <mg_sendnsreq+0x84>
  } else if (dnsc->c == NULL) {
 802844c:	685b      	ldr	r3, [r3, #4]
 802844e:	2b00      	cmp	r3, #0
 8028450:	d038      	beq.n	80284c4 <mg_sendnsreq+0x8c>
  if (dnsc->c == NULL) {
 8028452:	686b      	ldr	r3, [r5, #4]
 8028454:	2b00      	cmp	r3, #0
 8028456:	d040      	beq.n	80284da <mg_sendnsreq+0xa2>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8028458:	2118      	movs	r1, #24
 802845a:	2001      	movs	r0, #1
 802845c:	f7f9 fe8c 	bl	8022178 <mg_calloc>
 8028460:	4606      	mov	r6, r0
 8028462:	2800      	cmp	r0, #0
 8028464:	d03e      	beq.n	80284e4 <mg_sendnsreq+0xac>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8028466:	6863      	ldr	r3, [r4, #4]
 8028468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 802846a:	2b00      	cmp	r3, #0
 802846c:	d03f      	beq.n	80284ee <mg_sendnsreq+0xb6>
 802846e:	8a1b      	ldrh	r3, [r3, #16]
 8028470:	3301      	adds	r3, #1
 8028472:	b29b      	uxth	r3, r3
 8028474:	8233      	strh	r3, [r6, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8028476:	6863      	ldr	r3, [r4, #4]
 8028478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802847a:	6033      	str	r3, [r6, #0]
    c->mgr->active_dns_requests = d;
 802847c:	6863      	ldr	r3, [r4, #4]
 802847e:	631e      	str	r6, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8028480:	f7fd fafd 	bl	8025a7e <mg_millis>
 8028484:	19c0      	adds	r0, r0, r7
 8028486:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
 802848a:	60b0      	str	r0, [r6, #8]
 802848c:	60f1      	str	r1, [r6, #12]
    d->c = c;
 802848e:	6074      	str	r4, [r6, #4]
    c->is_resolving = 1;
 8028490:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028494:	f043 0308 	orr.w	r3, r3, #8
 8028498:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 802849c:	4b21      	ldr	r3, [pc, #132]	@ (8028524 <mg_sendnsreq+0xec>)
 802849e:	681b      	ldr	r3, [r3, #0]
 80284a0:	2b03      	cmp	r3, #3
 80284a2:	dc26      	bgt.n	80284f2 <mg_sendnsreq+0xba>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 80284a4:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80284a8:	8a32      	ldrh	r2, [r6, #16]
 80284aa:	4641      	mov	r1, r8
 80284ac:	6868      	ldr	r0, [r5, #4]
 80284ae:	f7fe fbd5 	bl	8026c5c <mg_dns_send>
 80284b2:	2800      	cmp	r0, #0
 80284b4:	d031      	beq.n	802851a <mg_sendnsreq+0xe2>
}
 80284b6:	b002      	add	sp, #8
 80284b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 80284bc:	491a      	ldr	r1, [pc, #104]	@ (8028528 <mg_sendnsreq+0xf0>)
 80284be:	f7fd fbcb 	bl	8025c58 <mg_error>
 80284c2:	e7c6      	b.n	8028452 <mg_sendnsreq+0x1a>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 80284c4:	461a      	mov	r2, r3
 80284c6:	6840      	ldr	r0, [r0, #4]
 80284c8:	f000 f866 	bl	8028598 <mg_connect>
 80284cc:	6068      	str	r0, [r5, #4]
    if (dnsc->c != NULL) {
 80284ce:	2800      	cmp	r0, #0
 80284d0:	d0bf      	beq.n	8028452 <mg_sendnsreq+0x1a>
      dnsc->c->pfn = dns_cb;
 80284d2:	4b16      	ldr	r3, [pc, #88]	@ (802852c <mg_sendnsreq+0xf4>)
 80284d4:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 80284d8:	e7bb      	b.n	8028452 <mg_sendnsreq+0x1a>
    mg_error(c, "resolver");
 80284da:	4915      	ldr	r1, [pc, #84]	@ (8028530 <mg_sendnsreq+0xf8>)
 80284dc:	4620      	mov	r0, r4
 80284de:	f7fd fbbb 	bl	8025c58 <mg_error>
 80284e2:	e7e8      	b.n	80284b6 <mg_sendnsreq+0x7e>
    mg_error(c, "resolve OOM");
 80284e4:	4913      	ldr	r1, [pc, #76]	@ (8028534 <mg_sendnsreq+0xfc>)
 80284e6:	4620      	mov	r0, r4
 80284e8:	f7fd fbb6 	bl	8025c58 <mg_error>
 80284ec:	e7e3      	b.n	80284b6 <mg_sendnsreq+0x7e>
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 80284ee:	2301      	movs	r3, #1
 80284f0:	e7c0      	b.n	8028474 <mg_sendnsreq+0x3c>
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 80284f2:	4b11      	ldr	r3, [pc, #68]	@ (8028538 <mg_sendnsreq+0x100>)
 80284f4:	f240 521e 	movw	r2, #1310	@ 0x51e
 80284f8:	4910      	ldr	r1, [pc, #64]	@ (802853c <mg_sendnsreq+0x104>)
 80284fa:	2004      	movs	r0, #4
 80284fc:	f7fd fac4 	bl	8025a88 <mg_log_prefix>
 8028500:	8a33      	ldrh	r3, [r6, #16]
 8028502:	9301      	str	r3, [sp, #4]
 8028504:	682b      	ldr	r3, [r5, #0]
 8028506:	9300      	str	r3, [sp, #0]
 8028508:	f8d8 3000 	ldr.w	r3, [r8]
 802850c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8028510:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028512:	480b      	ldr	r0, [pc, #44]	@ (8028540 <mg_sendnsreq+0x108>)
 8028514:	f7fb f9a2 	bl	802385c <mg_log>
 8028518:	e7c4      	b.n	80284a4 <mg_sendnsreq+0x6c>
      mg_error(dnsc->c, "DNS send");
 802851a:	490a      	ldr	r1, [pc, #40]	@ (8028544 <mg_sendnsreq+0x10c>)
 802851c:	6868      	ldr	r0, [r5, #4]
 802851e:	f7fd fb9b 	bl	8025c58 <mg_error>
}
 8028522:	e7c8      	b.n	80284b6 <mg_sendnsreq+0x7e>
 8028524:	2000012c 	.word	0x2000012c
 8028528:	0803a638 	.word	0x0803a638
 802852c:	080279d5 	.word	0x080279d5
 8028530:	0803a664 	.word	0x0803a664
 8028534:	0803a670 	.word	0x0803a670
 8028538:	0803aab8 	.word	0x0803aab8
 802853c:	0803a050 	.word	0x0803a050
 8028540:	0803a67c 	.word	0x0803a67c
 8028544:	0803a6a0 	.word	0x0803a6a0

08028548 <mg_resolve>:
void mg_resolve(struct mg_connection *c, const char *url) {
 8028548:	b570      	push	{r4, r5, r6, lr}
 802854a:	b084      	sub	sp, #16
 802854c:	4604      	mov	r4, r0
 802854e:	460e      	mov	r6, r1
  struct mg_str host = mg_url_host(url);
 8028550:	ad02      	add	r5, sp, #8
 8028552:	4628      	mov	r0, r5
 8028554:	f7fc fe24 	bl	80251a0 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8028558:	4630      	mov	r0, r6
 802855a:	f7fc fe3f 	bl	80251dc <mg_url_port>
 802855e:	f7fc ff8d 	bl	802547c <mg_ntohs>
 8028562:	85a0      	strh	r0, [r4, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8028564:	f104 021c 	add.w	r2, r4, #28
 8028568:	e895 0003 	ldmia.w	r5, {r0, r1}
 802856c:	f7fc ff22 	bl	80253b4 <mg_aton>
 8028570:	b960      	cbnz	r0, 802858c <mg_resolve+0x44>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8028572:	6862      	ldr	r2, [r4, #4]
 8028574:	7e11      	ldrb	r1, [r2, #24]
 8028576:	b169      	cbz	r1, 8028594 <mg_resolve+0x4c>
 8028578:	f102 030c 	add.w	r3, r2, #12
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 802857c:	6952      	ldr	r2, [r2, #20]
 802857e:	9100      	str	r1, [sp, #0]
 8028580:	a902      	add	r1, sp, #8
 8028582:	4620      	mov	r0, r4
 8028584:	f7ff ff58 	bl	8028438 <mg_sendnsreq>
}
 8028588:	b004      	add	sp, #16
 802858a:	bd70      	pop	{r4, r5, r6, pc}
    mg_connect_resolved(c);
 802858c:	4620      	mov	r0, r4
 802858e:	f7ff f951 	bl	8027834 <mg_connect_resolved>
 8028592:	e7f9      	b.n	8028588 <mg_resolve+0x40>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8028594:	1d13      	adds	r3, r2, #4
 8028596:	e7f1      	b.n	802857c <mg_resolve+0x34>

08028598 <mg_connect>:
                                 mg_event_handler_t fn, void *fn_data) {
 8028598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (url == NULL || url[0] == '\0') {
 802859c:	b129      	cbz	r1, 80285aa <mg_connect+0x12>
 802859e:	4680      	mov	r8, r0
 80285a0:	4617      	mov	r7, r2
 80285a2:	461e      	mov	r6, r3
 80285a4:	460d      	mov	r5, r1
 80285a6:	780b      	ldrb	r3, [r1, #0]
 80285a8:	b99b      	cbnz	r3, 80285d2 <mg_connect+0x3a>
    MG_ERROR(("null url"));
 80285aa:	4b30      	ldr	r3, [pc, #192]	@ (802866c <mg_connect+0xd4>)
 80285ac:	681b      	ldr	r3, [r3, #0]
 80285ae:	2b00      	cmp	r3, #0
 80285b0:	dc03      	bgt.n	80285ba <mg_connect+0x22>
  struct mg_connection *c = NULL;
 80285b2:	2400      	movs	r4, #0
}
 80285b4:	4620      	mov	r0, r4
 80285b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("null url"));
 80285ba:	4b2d      	ldr	r3, [pc, #180]	@ (8028670 <mg_connect+0xd8>)
 80285bc:	f241 22be 	movw	r2, #4798	@ 0x12be
 80285c0:	492c      	ldr	r1, [pc, #176]	@ (8028674 <mg_connect+0xdc>)
 80285c2:	2001      	movs	r0, #1
 80285c4:	f7fd fa60 	bl	8025a88 <mg_log_prefix>
 80285c8:	482b      	ldr	r0, [pc, #172]	@ (8028678 <mg_connect+0xe0>)
 80285ca:	f7fb f947 	bl	802385c <mg_log>
  struct mg_connection *c = NULL;
 80285ce:	2400      	movs	r4, #0
 80285d0:	e7f0      	b.n	80285b4 <mg_connect+0x1c>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 80285d2:	f7fa fc6b 	bl	8022eac <mg_alloc_conn>
 80285d6:	4604      	mov	r4, r0
 80285d8:	b358      	cbz	r0, 8028632 <mg_connect+0x9a>
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 80285da:	f8d8 3000 	ldr.w	r3, [r8]
 80285de:	6003      	str	r3, [r0, #0]
 80285e0:	f8c8 0000 	str.w	r0, [r8]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 80285e4:	2204      	movs	r2, #4
 80285e6:	4925      	ldr	r1, [pc, #148]	@ (802867c <mg_connect+0xe4>)
 80285e8:	4628      	mov	r0, r5
 80285ea:	f003 fe7e 	bl	802c2ea <strncmp>
 80285ee:	fab0 f080 	clz	r0, r0
 80285f2:	0940      	lsrs	r0, r0, #5
 80285f4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80285f8:	f360 0300 	bfi	r3, r0, #0, #1
 80285fc:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 8028600:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028604:	6323      	str	r3, [r4, #48]	@ 0x30
    c->fn = fn;
 8028606:	67a7      	str	r7, [r4, #120]	@ 0x78
    c->is_client = true;
 8028608:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802860c:	f043 0302 	orr.w	r3, r3, #2
 8028610:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->fn_data = fn_data;
 8028614:	67e6      	str	r6, [r4, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8028616:	4b15      	ldr	r3, [pc, #84]	@ (802866c <mg_connect+0xd4>)
 8028618:	681b      	ldr	r3, [r3, #0]
 802861a:	2b02      	cmp	r3, #2
 802861c:	dc18      	bgt.n	8028650 <mg_connect+0xb8>
    mg_call(c, MG_EV_OPEN, (void *) url);
 802861e:	462a      	mov	r2, r5
 8028620:	2101      	movs	r1, #1
 8028622:	4620      	mov	r0, r4
 8028624:	f7f9 fed0 	bl	80223c8 <mg_call>
    mg_resolve(c, url);
 8028628:	4629      	mov	r1, r5
 802862a:	4620      	mov	r0, r4
 802862c:	f7ff ff8c 	bl	8028548 <mg_resolve>
 8028630:	e7c0      	b.n	80285b4 <mg_connect+0x1c>
    MG_ERROR(("OOM"));
 8028632:	4b0e      	ldr	r3, [pc, #56]	@ (802866c <mg_connect+0xd4>)
 8028634:	681b      	ldr	r3, [r3, #0]
 8028636:	2b00      	cmp	r3, #0
 8028638:	ddbc      	ble.n	80285b4 <mg_connect+0x1c>
 802863a:	4b0d      	ldr	r3, [pc, #52]	@ (8028670 <mg_connect+0xd8>)
 802863c:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8028640:	490c      	ldr	r1, [pc, #48]	@ (8028674 <mg_connect+0xdc>)
 8028642:	2001      	movs	r0, #1
 8028644:	f7fd fa20 	bl	8025a88 <mg_log_prefix>
 8028648:	480d      	ldr	r0, [pc, #52]	@ (8028680 <mg_connect+0xe8>)
 802864a:	f7fb f907 	bl	802385c <mg_log>
 802864e:	e7b1      	b.n	80285b4 <mg_connect+0x1c>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8028650:	4b07      	ldr	r3, [pc, #28]	@ (8028670 <mg_connect+0xd8>)
 8028652:	f241 22c8 	movw	r2, #4808	@ 0x12c8
 8028656:	4907      	ldr	r1, [pc, #28]	@ (8028674 <mg_connect+0xdc>)
 8028658:	2003      	movs	r0, #3
 802865a:	f7fd fa15 	bl	8025a88 <mg_log_prefix>
 802865e:	462b      	mov	r3, r5
 8028660:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8028662:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028664:	4807      	ldr	r0, [pc, #28]	@ (8028684 <mg_connect+0xec>)
 8028666:	f7fb f8f9 	bl	802385c <mg_log>
 802866a:	e7d8      	b.n	802861e <mg_connect+0x86>
 802866c:	2000012c 	.word	0x2000012c
 8028670:	0803aa2c 	.word	0x0803aa2c
 8028674:	0803a050 	.word	0x0803a050
 8028678:	0803a6ac 	.word	0x0803a6ac
 802867c:	0803a384 	.word	0x0803a384
 8028680:	0803a678 	.word	0x0803a678
 8028684:	0803a0ac 	.word	0x0803a0ac

08028688 <mg_mqtt_connect>:
                                      mg_event_handler_t fn, void *fn_data) {
 8028688:	b530      	push	{r4, r5, lr}
 802868a:	b091      	sub	sp, #68	@ 0x44
 802868c:	4614      	mov	r4, r2
 802868e:	461a      	mov	r2, r3
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 8028690:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8028692:	f7ff ff81 	bl	8028598 <mg_connect>
  if (c != NULL) {
 8028696:	4605      	mov	r5, r0
 8028698:	b160      	cbz	r0, 80286b4 <mg_mqtt_connect+0x2c>
    memset(&empty, 0, sizeof(empty));
 802869a:	2240      	movs	r2, #64	@ 0x40
 802869c:	2100      	movs	r1, #0
 802869e:	4668      	mov	r0, sp
 80286a0:	f003 fdee 	bl	802c280 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 80286a4:	b14c      	cbz	r4, 80286ba <mg_mqtt_connect+0x32>
 80286a6:	4621      	mov	r1, r4
 80286a8:	4628      	mov	r0, r5
 80286aa:	f7fe fbfd 	bl	8026ea8 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 80286ae:	4b04      	ldr	r3, [pc, #16]	@ (80286c0 <mg_mqtt_connect+0x38>)
 80286b0:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
}
 80286b4:	4628      	mov	r0, r5
 80286b6:	b011      	add	sp, #68	@ 0x44
 80286b8:	bd30      	pop	{r4, r5, pc}
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 80286ba:	466c      	mov	r4, sp
 80286bc:	e7f3      	b.n	80286a6 <mg_mqtt_connect+0x1e>
 80286be:	bf00      	nop
 80286c0:	08027281 	.word	0x08027281

080286c4 <mg_tcpip_init>:
void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 80286c4:	b538      	push	{r3, r4, r5, lr}
 80286c6:	4605      	mov	r5, r0
 80286c8:	460c      	mov	r4, r1
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 80286ca:	680b      	ldr	r3, [r1, #0]
 80286cc:	b90b      	cbnz	r3, 80286d2 <mg_tcpip_init+0xe>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 80286ce:	888b      	ldrh	r3, [r1, #4]
 80286d0:	b1a3      	cbz	r3, 80286fc <mg_tcpip_init+0x38>
  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 80286d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80286d4:	681b      	ldr	r3, [r3, #0]
 80286d6:	b34b      	cbz	r3, 802872c <mg_tcpip_init+0x68>
 80286d8:	4620      	mov	r0, r4
 80286da:	4798      	blx	r3
 80286dc:	bb30      	cbnz	r0, 802872c <mg_tcpip_init+0x68>
    MG_ERROR(("driver init failed"));
 80286de:	4b3b      	ldr	r3, [pc, #236]	@ (80287cc <mg_tcpip_init+0x108>)
 80286e0:	681b      	ldr	r3, [r3, #0]
 80286e2:	2b00      	cmp	r3, #0
 80286e4:	dd5f      	ble.n	80287a6 <mg_tcpip_init+0xe2>
 80286e6:	4b3a      	ldr	r3, [pc, #232]	@ (80287d0 <mg_tcpip_init+0x10c>)
 80286e8:	f241 7223 	movw	r2, #5923	@ 0x1723
 80286ec:	4939      	ldr	r1, [pc, #228]	@ (80287d4 <mg_tcpip_init+0x110>)
 80286ee:	2001      	movs	r0, #1
 80286f0:	f7fd f9ca 	bl	8025a88 <mg_log_prefix>
 80286f4:	4838      	ldr	r0, [pc, #224]	@ (80287d8 <mg_tcpip_init+0x114>)
 80286f6:	f7fb f8b1 	bl	802385c <mg_log>
 80286fa:	e054      	b.n	80287a6 <mg_tcpip_init+0xe2>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 80286fc:	4608      	mov	r0, r1
 80286fe:	2302      	movs	r3, #2
 8028700:	f800 3b01 	strb.w	r3, [r0], #1
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 8028704:	2105      	movs	r1, #5
 8028706:	f7fc fde6 	bl	80252d6 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 802870a:	4b30      	ldr	r3, [pc, #192]	@ (80287cc <mg_tcpip_init+0x108>)
 802870c:	681b      	ldr	r3, [r3, #0]
 802870e:	2b01      	cmp	r3, #1
 8028710:	dddf      	ble.n	80286d2 <mg_tcpip_init+0xe>
 8028712:	4b2f      	ldr	r3, [pc, #188]	@ (80287d0 <mg_tcpip_init+0x10c>)
 8028714:	f241 721f 	movw	r2, #5919	@ 0x171f
 8028718:	492e      	ldr	r1, [pc, #184]	@ (80287d4 <mg_tcpip_init+0x110>)
 802871a:	2002      	movs	r0, #2
 802871c:	f7fd f9b4 	bl	8025a88 <mg_log_prefix>
 8028720:	4622      	mov	r2, r4
 8028722:	492e      	ldr	r1, [pc, #184]	@ (80287dc <mg_tcpip_init+0x118>)
 8028724:	482e      	ldr	r0, [pc, #184]	@ (80287e0 <mg_tcpip_init+0x11c>)
 8028726:	f7fb f899 	bl	802385c <mg_log>
 802872a:	e7d2      	b.n	80286d2 <mg_tcpip_init+0xe>
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 802872c:	f240 6104 	movw	r1, #1540	@ 0x604
 8028730:	2001      	movs	r0, #1
 8028732:	f7f9 fd21 	bl	8022178 <mg_calloc>
 8028736:	6160      	str	r0, [r4, #20]
 8028738:	f240 6304 	movw	r3, #1540	@ 0x604
 802873c:	61a3      	str	r3, [r4, #24]
    if (ifp->recv_queue.size == 0)
 802873e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8028740:	b92b      	cbnz	r3, 802874e <mg_tcpip_init+0x8a>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8028742:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8028744:	689b      	ldr	r3, [r3, #8]
 8028746:	b37b      	cbz	r3, 80287a8 <mg_tcpip_init+0xe4>
 8028748:	f240 6304 	movw	r3, #1540	@ 0x604
 802874c:	63a3      	str	r3, [r4, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 802874e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8028750:	2001      	movs	r0, #1
 8028752:	f7f9 fd11 	bl	8022178 <mg_calloc>
 8028756:	6360      	str	r0, [r4, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 8028758:	f7fd f991 	bl	8025a7e <mg_millis>
 802875c:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
    mgr->priv = ifp;
 8028760:	63ec      	str	r4, [r5, #60]	@ 0x3c
    ifp->mgr = mgr;
 8028762:	6325      	str	r5, [r4, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 8028764:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8028768:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 802876c:	2330      	movs	r3, #48	@ 0x30
 802876e:	642b      	str	r3, [r5, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 8028770:	68a3      	ldr	r3, [r4, #8]
 8028772:	b90b      	cbnz	r3, 8028778 <mg_tcpip_init+0xb4>
 8028774:	2301      	movs	r3, #1
 8028776:	7723      	strb	r3, [r4, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 8028778:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802877c:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 8028780:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 8028784:	2102      	movs	r1, #2
 8028786:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802878a:	f7fc fda4 	bl	80252d6 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 802878e:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 8028792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8028796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 802879a:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 802879e:	6963      	ldr	r3, [r4, #20]
 80287a0:	b12b      	cbz	r3, 80287ae <mg_tcpip_init+0xea>
 80287a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80287a4:	b11b      	cbz	r3, 80287ae <mg_tcpip_init+0xea>
}
 80287a6:	bd38      	pop	{r3, r4, r5, pc}
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 80287a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80287ac:	e7ce      	b.n	802874c <mg_tcpip_init+0x88>
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 80287ae:	4b07      	ldr	r3, [pc, #28]	@ (80287cc <mg_tcpip_init+0x108>)
 80287b0:	681b      	ldr	r3, [r3, #0]
 80287b2:	2b00      	cmp	r3, #0
 80287b4:	ddf7      	ble.n	80287a6 <mg_tcpip_init+0xe2>
 80287b6:	4b06      	ldr	r3, [pc, #24]	@ (80287d0 <mg_tcpip_init+0x10c>)
 80287b8:	f241 7234 	movw	r2, #5940	@ 0x1734
 80287bc:	4905      	ldr	r1, [pc, #20]	@ (80287d4 <mg_tcpip_init+0x110>)
 80287be:	2001      	movs	r0, #1
 80287c0:	f7fd f962 	bl	8025a88 <mg_log_prefix>
 80287c4:	4807      	ldr	r0, [pc, #28]	@ (80287e4 <mg_tcpip_init+0x120>)
 80287c6:	f7fb f849 	bl	802385c <mg_log>
}
 80287ca:	e7ec      	b.n	80287a6 <mg_tcpip_init+0xe2>
 80287cc:	2000012c 	.word	0x2000012c
 80287d0:	0803a9f0 	.word	0x0803a9f0
 80287d4:	0803a050 	.word	0x0803a050
 80287d8:	0803a6dc 	.word	0x0803a6dc
 80287dc:	0802382d 	.word	0x0802382d
 80287e0:	0803a6b8 	.word	0x0803a6b8
 80287e4:	0803a678 	.word	0x0803a678

080287e8 <onstatechange>:
static void onstatechange(struct mg_tcpip_if *ifp) {
 80287e8:	b510      	push	{r4, lr}
 80287ea:	4604      	mov	r4, r0
  if (ifp->state == MG_TCPIP_STATE_READY) {
 80287ec:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
 80287f0:	2b03      	cmp	r3, #3
 80287f2:	d011      	beq.n	8028818 <onstatechange+0x30>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 80287f4:	2b01      	cmp	r3, #1
 80287f6:	d04f      	beq.n	8028898 <onstatechange+0xb0>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 80287f8:	b9f3      	cbnz	r3, 8028838 <onstatechange+0x50>
    MG_ERROR(("Link down"));
 80287fa:	4b31      	ldr	r3, [pc, #196]	@ (80288c0 <onstatechange+0xd8>)
 80287fc:	681b      	ldr	r3, [r3, #0]
 80287fe:	2b00      	cmp	r3, #0
 8028800:	dd1a      	ble.n	8028838 <onstatechange+0x50>
 8028802:	4b30      	ldr	r3, [pc, #192]	@ (80288c4 <onstatechange+0xdc>)
 8028804:	f241 4209 	movw	r2, #5129	@ 0x1409
 8028808:	492f      	ldr	r1, [pc, #188]	@ (80288c8 <onstatechange+0xe0>)
 802880a:	2001      	movs	r0, #1
 802880c:	f7fd f93c 	bl	8025a88 <mg_log_prefix>
 8028810:	482e      	ldr	r0, [pc, #184]	@ (80288cc <onstatechange+0xe4>)
 8028812:	f7fb f823 	bl	802385c <mg_log>
 8028816:	e00f      	b.n	8028838 <onstatechange+0x50>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8028818:	4b29      	ldr	r3, [pc, #164]	@ (80288c0 <onstatechange+0xd8>)
 802881a:	681b      	ldr	r3, [r3, #0]
 802881c:	2b01      	cmp	r3, #1
 802881e:	dc12      	bgt.n	8028846 <onstatechange+0x5e>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8028820:	4b27      	ldr	r3, [pc, #156]	@ (80288c0 <onstatechange+0xd8>)
 8028822:	681b      	ldr	r3, [r3, #0]
 8028824:	2b01      	cmp	r3, #1
 8028826:	dc1c      	bgt.n	8028862 <onstatechange+0x7a>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8028828:	4b25      	ldr	r3, [pc, #148]	@ (80288c0 <onstatechange+0xd8>)
 802882a:	681b      	ldr	r3, [r3, #0]
 802882c:	2b01      	cmp	r3, #1
 802882e:	dc26      	bgt.n	802887e <onstatechange+0x96>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 8028830:	6921      	ldr	r1, [r4, #16]
 8028832:	4620      	mov	r0, r4
 8028834:	f7fc ff1f 	bl	8025676 <arp_ask>
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 8028838:	f104 027c 	add.w	r2, r4, #124	@ 0x7c
 802883c:	2100      	movs	r1, #0
 802883e:	4620      	mov	r0, r4
 8028840:	f7f8 f9cb 	bl	8020bda <mg_tcpip_call>
}
 8028844:	bd10      	pop	{r4, pc}
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8028846:	4b1f      	ldr	r3, [pc, #124]	@ (80288c4 <onstatechange+0xdc>)
 8028848:	f241 4201 	movw	r2, #5121	@ 0x1401
 802884c:	491e      	ldr	r1, [pc, #120]	@ (80288c8 <onstatechange+0xe0>)
 802884e:	2002      	movs	r0, #2
 8028850:	f7fd f91a 	bl	8025a88 <mg_log_prefix>
 8028854:	f104 0208 	add.w	r2, r4, #8
 8028858:	491d      	ldr	r1, [pc, #116]	@ (80288d0 <onstatechange+0xe8>)
 802885a:	481e      	ldr	r0, [pc, #120]	@ (80288d4 <onstatechange+0xec>)
 802885c:	f7fa fffe 	bl	802385c <mg_log>
 8028860:	e7de      	b.n	8028820 <onstatechange+0x38>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8028862:	4b18      	ldr	r3, [pc, #96]	@ (80288c4 <onstatechange+0xdc>)
 8028864:	f241 4202 	movw	r2, #5122	@ 0x1402
 8028868:	4917      	ldr	r1, [pc, #92]	@ (80288c8 <onstatechange+0xe0>)
 802886a:	2002      	movs	r0, #2
 802886c:	f7fd f90c 	bl	8025a88 <mg_log_prefix>
 8028870:	f104 0210 	add.w	r2, r4, #16
 8028874:	4916      	ldr	r1, [pc, #88]	@ (80288d0 <onstatechange+0xe8>)
 8028876:	4818      	ldr	r0, [pc, #96]	@ (80288d8 <onstatechange+0xf0>)
 8028878:	f7fa fff0 	bl	802385c <mg_log>
 802887c:	e7d4      	b.n	8028828 <onstatechange+0x40>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 802887e:	4b11      	ldr	r3, [pc, #68]	@ (80288c4 <onstatechange+0xdc>)
 8028880:	f241 4203 	movw	r2, #5123	@ 0x1403
 8028884:	4910      	ldr	r1, [pc, #64]	@ (80288c8 <onstatechange+0xe0>)
 8028886:	2002      	movs	r0, #2
 8028888:	f7fd f8fe 	bl	8025a88 <mg_log_prefix>
 802888c:	4622      	mov	r2, r4
 802888e:	4913      	ldr	r1, [pc, #76]	@ (80288dc <onstatechange+0xf4>)
 8028890:	4813      	ldr	r0, [pc, #76]	@ (80288e0 <onstatechange+0xf8>)
 8028892:	f7fa ffe3 	bl	802385c <mg_log>
 8028896:	e7cb      	b.n	8028830 <onstatechange+0x48>
    MG_ERROR(("Link up"));
 8028898:	4b09      	ldr	r3, [pc, #36]	@ (80288c0 <onstatechange+0xd8>)
 802889a:	681b      	ldr	r3, [r3, #0]
 802889c:	2b00      	cmp	r3, #0
 802889e:	dc04      	bgt.n	80288aa <onstatechange+0xc2>
    srand((unsigned int) mg_millis());
 80288a0:	f7fd f8ed 	bl	8025a7e <mg_millis>
 80288a4:	f002 ff9c 	bl	802b7e0 <srand>
 80288a8:	e7c6      	b.n	8028838 <onstatechange+0x50>
    MG_ERROR(("Link up"));
 80288aa:	4b06      	ldr	r3, [pc, #24]	@ (80288c4 <onstatechange+0xdc>)
 80288ac:	f241 4206 	movw	r2, #5126	@ 0x1406
 80288b0:	4905      	ldr	r1, [pc, #20]	@ (80288c8 <onstatechange+0xe0>)
 80288b2:	2001      	movs	r0, #1
 80288b4:	f7fd f8e8 	bl	8025a88 <mg_log_prefix>
 80288b8:	480a      	ldr	r0, [pc, #40]	@ (80288e4 <onstatechange+0xfc>)
 80288ba:	f7fa ffcf 	bl	802385c <mg_log>
 80288be:	e7ef      	b.n	80288a0 <onstatechange+0xb8>
 80288c0:	2000012c 	.word	0x2000012c
 80288c4:	0803a99c 	.word	0x0803a99c
 80288c8:	0803a050 	.word	0x0803a050
 80288cc:	0803a728 	.word	0x0803a728
 80288d0:	0802381d 	.word	0x0802381d
 80288d4:	0803a6f0 	.word	0x0803a6f0
 80288d8:	0803a700 	.word	0x0803a700
 80288dc:	0802382d 	.word	0x0802382d
 80288e0:	0803a710 	.word	0x0803a710
 80288e4:	0803a720 	.word	0x0803a720

080288e8 <rx_dhcp_client>:
static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80288e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80288ec:	b087      	sub	sp, #28
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 80288ee:	2300      	movs	r3, #0
 80288f0:	9305      	str	r3, [sp, #20]
 80288f2:	9304      	str	r3, [sp, #16]
  uint8_t msgtype = 0, state = ifp->state;
 80288f4:	f890 a07c 	ldrb.w	sl, [r0, #124]	@ 0x7c
  uint8_t *p = pkt->dhcp->options,
 80288f8:	f8d1 8030 	ldr.w	r8, [r1, #48]	@ 0x30
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 80288fc:	680e      	ldr	r6, [r1, #0]
 80288fe:	684b      	ldr	r3, [r1, #4]
 8028900:	441e      	add	r6, r3
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8028902:	f508 7388 	add.w	r3, r8, #272	@ 0x110
 8028906:	42b3      	cmp	r3, r6
 8028908:	d87b      	bhi.n	8028a02 <rx_dhcp_client+0x11a>
 802890a:	4605      	mov	r5, r0
 802890c:	460f      	mov	r7, r1
 802890e:	f108 04f0 	add.w	r4, r8, #240	@ 0xf0
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8028912:	2204      	movs	r2, #4
 8028914:	1c81      	adds	r1, r0, #2
 8028916:	eb08 0002 	add.w	r0, r8, r2
 802891a:	f003 fc1d 	bl	802c158 <memcmp>
 802891e:	2800      	cmp	r0, #0
 8028920:	d16f      	bne.n	8028a02 <rx_dhcp_client+0x11a>
  uint8_t msgtype = 0, state = ifp->state;
 8028922:	f04f 0900 	mov.w	r9, #0
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 8028926:	4648      	mov	r0, r9
 8028928:	f8cd 9004 	str.w	r9, [sp, #4]
 802892c:	f8cd 9000 	str.w	r9, [sp]
 8028930:	46cb      	mov	fp, r9
 8028932:	e026      	b.n	8028982 <rx_dhcp_client+0x9a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 8028934:	7862      	ldrb	r2, [r4, #1]
 8028936:	2a04      	cmp	r2, #4
 8028938:	d12b      	bne.n	8028992 <rx_dhcp_client+0xaa>
 802893a:	1da2      	adds	r2, r4, #6
 802893c:	42b2      	cmp	r2, r6
 802893e:	d228      	bcs.n	8028992 <rx_dhcp_client+0xaa>
      memcpy(&mask, p + 2, sizeof(mask));
 8028940:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8028944:	9301      	str	r3, [sp, #4]
 8028946:	e019      	b.n	802897c <rx_dhcp_client+0x94>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8028948:	7862      	ldrb	r2, [r4, #1]
 802894a:	2a04      	cmp	r2, #4
 802894c:	d123      	bne.n	8028996 <rx_dhcp_client+0xae>
 802894e:	1da2      	adds	r2, r4, #6
 8028950:	42b2      	cmp	r2, r6
 8028952:	d220      	bcs.n	8028996 <rx_dhcp_client+0xae>
      ip = pkt->dhcp->yiaddr;
 8028954:	f8d8 b010 	ldr.w	fp, [r8, #16]
      memcpy(&gw, p + 2, sizeof(gw));
 8028958:	f8d4 3002 	ldr.w	r3, [r4, #2]
 802895c:	9300      	str	r3, [sp, #0]
      ip = pkt->dhcp->yiaddr;
 802895e:	e00d      	b.n	802897c <rx_dhcp_client+0x94>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8028960:	7862      	ldrb	r2, [r4, #1]
 8028962:	2a04      	cmp	r2, #4
 8028964:	d11b      	bne.n	802899e <rx_dhcp_client+0xb6>
               p + 6 < end) {  // DNS
 8028966:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8028968:	42b2      	cmp	r2, r6
 802896a:	d218      	bcs.n	802899e <rx_dhcp_client+0xb6>
      memcpy(&dns, p + 2, sizeof(dns));
 802896c:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8028970:	9305      	str	r3, [sp, #20]
 8028972:	e003      	b.n	802897c <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 8028974:	2b33      	cmp	r3, #51	@ 0x33
 8028976:	d022      	beq.n	80289be <rx_dhcp_client+0xd6>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 8028978:	2b35      	cmp	r3, #53	@ 0x35
 802897a:	d02b      	beq.n	80289d4 <rx_dhcp_client+0xec>
    p += p[1] + 2;
 802897c:	7863      	ldrb	r3, [r4, #1]
 802897e:	3302      	adds	r3, #2
 8028980:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 8028982:	1c63      	adds	r3, r4, #1
 8028984:	42b3      	cmp	r3, r6
 8028986:	d22e      	bcs.n	80289e6 <rx_dhcp_client+0xfe>
 8028988:	7823      	ldrb	r3, [r4, #0]
 802898a:	2bff      	cmp	r3, #255	@ 0xff
 802898c:	d02b      	beq.n	80289e6 <rx_dhcp_client+0xfe>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 802898e:	2b01      	cmp	r3, #1
 8028990:	d0d0      	beq.n	8028934 <rx_dhcp_client+0x4c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8028992:	2b03      	cmp	r3, #3
 8028994:	d0d8      	beq.n	8028948 <rx_dhcp_client+0x60>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8028996:	7fea      	ldrb	r2, [r5, #31]
 8028998:	b10a      	cbz	r2, 802899e <rx_dhcp_client+0xb6>
 802899a:	2b06      	cmp	r3, #6
 802899c:	d0e0      	beq.n	8028960 <rx_dhcp_client+0x78>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 802899e:	f895 2020 	ldrb.w	r2, [r5, #32]
 80289a2:	2a00      	cmp	r2, #0
 80289a4:	d0e6      	beq.n	8028974 <rx_dhcp_client+0x8c>
 80289a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80289a8:	d1e4      	bne.n	8028974 <rx_dhcp_client+0x8c>
 80289aa:	7862      	ldrb	r2, [r4, #1]
 80289ac:	2a04      	cmp	r2, #4
 80289ae:	d1e1      	bne.n	8028974 <rx_dhcp_client+0x8c>
               p + 6 < end) {  // SNTP
 80289b0:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 80289b2:	42b2      	cmp	r2, r6
 80289b4:	d2de      	bcs.n	8028974 <rx_dhcp_client+0x8c>
      memcpy(&sntp, p + 2, sizeof(sntp));
 80289b6:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80289ba:	9304      	str	r3, [sp, #16]
 80289bc:	e7de      	b.n	802897c <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 80289be:	7862      	ldrb	r2, [r4, #1]
 80289c0:	2a04      	cmp	r2, #4
 80289c2:	d1d9      	bne.n	8028978 <rx_dhcp_client+0x90>
 80289c4:	1da2      	adds	r2, r4, #6
 80289c6:	42b2      	cmp	r2, r6
 80289c8:	d2d6      	bcs.n	8028978 <rx_dhcp_client+0x90>
      lease = mg_ntohl(lease);
 80289ca:	f8d4 0002 	ldr.w	r0, [r4, #2]
 80289ce:	f7fc fcbd 	bl	802534c <mg_ntohl>
 80289d2:	e7d3      	b.n	802897c <rx_dhcp_client+0x94>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 80289d4:	7863      	ldrb	r3, [r4, #1]
 80289d6:	2b01      	cmp	r3, #1
 80289d8:	d1d0      	bne.n	802897c <rx_dhcp_client+0x94>
 80289da:	1da3      	adds	r3, r4, #6
 80289dc:	42b3      	cmp	r3, r6
 80289de:	d2cd      	bcs.n	802897c <rx_dhcp_client+0x94>
      msgtype = p[2];
 80289e0:	f894 9002 	ldrb.w	r9, [r4, #2]
 80289e4:	e7ca      	b.n	802897c <rx_dhcp_client+0x94>
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 80289e6:	f1b9 0f06 	cmp.w	r9, #6
 80289ea:	d00d      	beq.n	8028a08 <rx_dhcp_client+0x120>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 80289ec:	f1b9 0f02 	cmp.w	r9, #2
 80289f0:	d013      	beq.n	8028a1a <rx_dhcp_client+0x132>
  } else if (msgtype == 5) {          // DHCPACK
 80289f2:	f1b9 0f05 	cmp.w	r9, #5
 80289f6:	d028      	beq.n	8028a4a <rx_dhcp_client+0x162>
  if (ifp->state != state) onstatechange(ifp);
 80289f8:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 80289fc:	4553      	cmp	r3, sl
 80289fe:	f040 80b4 	bne.w	8028b6a <rx_dhcp_client+0x282>
}
 8028a02:	b007      	add	sp, #28
 8028a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8028a08:	68ab      	ldr	r3, [r5, #8]
 8028a0a:	455b      	cmp	r3, fp
 8028a0c:	d1ee      	bne.n	80289ec <rx_dhcp_client+0x104>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 8028a0e:	2301      	movs	r3, #1
 8028a10:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8028a14:	2300      	movs	r3, #0
 8028a16:	60ab      	str	r3, [r5, #8]
 8028a18:	e7ee      	b.n	80289f8 <rx_dhcp_client+0x110>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 8028a1a:	f1ba 0f01 	cmp.w	sl, #1
 8028a1e:	d1e8      	bne.n	80289f2 <rx_dhcp_client+0x10a>
 8028a20:	f1bb 0f00 	cmp.w	fp, #0
 8028a24:	d0e5      	beq.n	80289f2 <rx_dhcp_client+0x10a>
 8028a26:	9b00      	ldr	r3, [sp, #0]
 8028a28:	2b00      	cmp	r3, #0
 8028a2a:	d0e2      	beq.n	80289f2 <rx_dhcp_client+0x10a>
 8028a2c:	2800      	cmp	r0, #0
 8028a2e:	d0e0      	beq.n	80289f2 <rx_dhcp_client+0x10a>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8028a30:	f8d8 2014 	ldr.w	r2, [r8, #20]
    tx_dhcp_request_sel(ifp, ip,
 8028a34:	b90a      	cbnz	r2, 8028a3a <rx_dhcp_client+0x152>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8028a36:	69fb      	ldr	r3, [r7, #28]
    tx_dhcp_request_sel(ifp, ip,
 8028a38:	68da      	ldr	r2, [r3, #12]
 8028a3a:	4659      	mov	r1, fp
 8028a3c:	4628      	mov	r0, r5
 8028a3e:	f7ff f9b9 	bl	8027db4 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 8028a42:	2302      	movs	r3, #2
 8028a44:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8028a48:	e7d6      	b.n	80289f8 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8028a4a:	f1ba 0f02 	cmp.w	sl, #2
 8028a4e:	d02a      	beq.n	8028aa6 <rx_dhcp_client+0x1be>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 8028a50:	f1ba 0f03 	cmp.w	sl, #3
 8028a54:	d1d0      	bne.n	80289f8 <rx_dhcp_client+0x110>
 8028a56:	68ab      	ldr	r3, [r5, #8]
 8028a58:	455b      	cmp	r3, fp
 8028a5a:	d1cd      	bne.n	80289f8 <rx_dhcp_client+0x110>
      ifp->lease_expire = ifp->now + lease * 1000;
 8028a5c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8028a5e:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8028a60:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8028a64:	4604      	mov	r4, r0
 8028a66:	fb00 f202 	mul.w	r2, r0, r2
 8028a6a:	189b      	adds	r3, r3, r2
 8028a6c:	f141 0100 	adc.w	r1, r1, #0
 8028a70:	662b      	str	r3, [r5, #96]	@ 0x60
 8028a72:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8028a74:	4b3f      	ldr	r3, [pc, #252]	@ (8028b74 <rx_dhcp_client+0x28c>)
 8028a76:	681b      	ldr	r3, [r3, #0]
 8028a78:	2b01      	cmp	r3, #1
 8028a7a:	ddbd      	ble.n	80289f8 <rx_dhcp_client+0x110>
 8028a7c:	4b3e      	ldr	r3, [pc, #248]	@ (8028b78 <rx_dhcp_client+0x290>)
 8028a7e:	f241 42ef 	movw	r2, #5359	@ 0x14ef
 8028a82:	493e      	ldr	r1, [pc, #248]	@ (8028b7c <rx_dhcp_client+0x294>)
 8028a84:	2002      	movs	r0, #2
 8028a86:	f7fc ffff 	bl	8025a88 <mg_log_prefix>
 8028a8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8028a8e:	2300      	movs	r3, #0
 8028a90:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 8028a94:	f7e8 f960 	bl	8010d58 <__aeabi_uldivmod>
 8028a98:	4602      	mov	r2, r0
 8028a9a:	460b      	mov	r3, r1
 8028a9c:	4621      	mov	r1, r4
 8028a9e:	4838      	ldr	r0, [pc, #224]	@ (8028b80 <rx_dhcp_client+0x298>)
 8028aa0:	f7fa fedc 	bl	802385c <mg_log>
 8028aa4:	e7a8      	b.n	80289f8 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8028aa6:	f1bb 0f00 	cmp.w	fp, #0
 8028aaa:	d0d1      	beq.n	8028a50 <rx_dhcp_client+0x168>
 8028aac:	9b00      	ldr	r3, [sp, #0]
 8028aae:	2b00      	cmp	r3, #0
 8028ab0:	d0ce      	beq.n	8028a50 <rx_dhcp_client+0x168>
 8028ab2:	4604      	mov	r4, r0
 8028ab4:	2800      	cmp	r0, #0
 8028ab6:	d0cb      	beq.n	8028a50 <rx_dhcp_client+0x168>
      ifp->lease_expire = ifp->now + lease * 1000;
 8028ab8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8028aba:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8028abc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8028ac0:	fb00 f202 	mul.w	r2, r0, r2
 8028ac4:	189b      	adds	r3, r3, r2
 8028ac6:	f141 0100 	adc.w	r1, r1, #0
 8028aca:	662b      	str	r3, [r5, #96]	@ 0x60
 8028acc:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8028ace:	4b29      	ldr	r3, [pc, #164]	@ (8028b74 <rx_dhcp_client+0x28c>)
 8028ad0:	681b      	ldr	r3, [r3, #0]
 8028ad2:	2b01      	cmp	r3, #1
 8028ad4:	dc2e      	bgt.n	8028b34 <rx_dhcp_client+0x24c>
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8028ad6:	693b      	ldr	r3, [r7, #16]
 8028ad8:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8028adc:	f8c5 2046 	str.w	r2, [r5, #70]	@ 0x46
 8028ae0:	895b      	ldrh	r3, [r3, #10]
 8028ae2:	f8a5 304a 	strh.w	r3, [r5, #74]	@ 0x4a
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 8028ae6:	f8c5 b008 	str.w	fp, [r5, #8]
 8028aea:	9b00      	ldr	r3, [sp, #0]
 8028aec:	612b      	str	r3, [r5, #16]
 8028aee:	9b01      	ldr	r3, [sp, #4]
 8028af0:	60eb      	str	r3, [r5, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 8028af2:	2303      	movs	r3, #3
 8028af4:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      mg_random(&rand, sizeof(rand));
 8028af8:	2108      	movs	r1, #8
 8028afa:	eb0d 0001 	add.w	r0, sp, r1
 8028afe:	f7fc fbea 	bl	80252d6 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 8028b02:	9c02      	ldr	r4, [sp, #8]
 8028b04:	f7fc ffbb 	bl	8025a7e <mg_millis>
 8028b08:	4420      	add	r0, r4
 8028b0a:	f002 fe69 	bl	802b7e0 <srand>
      if (ifp->enable_req_dns && dns != 0)
 8028b0e:	7feb      	ldrb	r3, [r5, #31]
 8028b10:	b10b      	cbz	r3, 8028b16 <rx_dhcp_client+0x22e>
 8028b12:	9b05      	ldr	r3, [sp, #20]
 8028b14:	bb1b      	cbnz	r3, 8028b5e <rx_dhcp_client+0x276>
      if (ifp->enable_req_sntp && sntp != 0)
 8028b16:	f895 3020 	ldrb.w	r3, [r5, #32]
 8028b1a:	2b00      	cmp	r3, #0
 8028b1c:	f43f af6c 	beq.w	80289f8 <rx_dhcp_client+0x110>
 8028b20:	9b04      	ldr	r3, [sp, #16]
 8028b22:	2b00      	cmp	r3, #0
 8028b24:	f43f af68 	beq.w	80289f8 <rx_dhcp_client+0x110>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 8028b28:	aa04      	add	r2, sp, #16
 8028b2a:	2102      	movs	r1, #2
 8028b2c:	4628      	mov	r0, r5
 8028b2e:	f7f8 f854 	bl	8020bda <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8028b32:	e761      	b.n	80289f8 <rx_dhcp_client+0x110>
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8028b34:	4b10      	ldr	r3, [pc, #64]	@ (8028b78 <rx_dhcp_client+0x290>)
 8028b36:	f241 42e1 	movw	r2, #5345	@ 0x14e1
 8028b3a:	4910      	ldr	r1, [pc, #64]	@ (8028b7c <rx_dhcp_client+0x294>)
 8028b3c:	2002      	movs	r0, #2
 8028b3e:	f7fc ffa3 	bl	8025a88 <mg_log_prefix>
 8028b42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8028b46:	2300      	movs	r3, #0
 8028b48:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 8028b4c:	f7e8 f904 	bl	8010d58 <__aeabi_uldivmod>
 8028b50:	4602      	mov	r2, r0
 8028b52:	460b      	mov	r3, r1
 8028b54:	4621      	mov	r1, r4
 8028b56:	480a      	ldr	r0, [pc, #40]	@ (8028b80 <rx_dhcp_client+0x298>)
 8028b58:	f7fa fe80 	bl	802385c <mg_log>
 8028b5c:	e7bb      	b.n	8028ad6 <rx_dhcp_client+0x1ee>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 8028b5e:	aa05      	add	r2, sp, #20
 8028b60:	2101      	movs	r1, #1
 8028b62:	4628      	mov	r0, r5
 8028b64:	f7f8 f839 	bl	8020bda <mg_tcpip_call>
 8028b68:	e7d5      	b.n	8028b16 <rx_dhcp_client+0x22e>
  if (ifp->state != state) onstatechange(ifp);
 8028b6a:	4628      	mov	r0, r5
 8028b6c:	f7ff fe3c 	bl	80287e8 <onstatechange>
 8028b70:	e747      	b.n	8028a02 <rx_dhcp_client+0x11a>
 8028b72:	bf00      	nop
 8028b74:	2000012c 	.word	0x2000012c
 8028b78:	0803a95c 	.word	0x0803a95c
 8028b7c:	0803a050 	.word	0x0803a050
 8028b80:	0803a734 	.word	0x0803a734

08028b84 <rx_ip>:
static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8028b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028b88:	b084      	sub	sp, #16
 8028b8a:	4605      	mov	r5, r0
 8028b8c:	460c      	mov	r4, r1
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 8028b8e:	69c9      	ldr	r1, [r1, #28]
 8028b90:	88cb      	ldrh	r3, [r1, #6]
 8028b92:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8028b96:	b29b      	uxth	r3, r3
 8028b98:	b1c3      	cbz	r3, 8028bcc <rx_ip+0x48>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 8028b9a:	7a4b      	ldrb	r3, [r1, #9]
 8028b9c:	2b11      	cmp	r3, #17
 8028b9e:	d00e      	beq.n	8028bbe <rx_ip+0x3a>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8028ba0:	7a4b      	ldrb	r3, [r1, #9]
 8028ba2:	2b06      	cmp	r3, #6
 8028ba4:	d00f      	beq.n	8028bc6 <rx_ip+0x42>
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8028ba6:	2200      	movs	r2, #0
 8028ba8:	4621      	mov	r1, r4
 8028baa:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8028bac:	f7f9 fb09 	bl	80221c2 <getpeer>
    if (c) mg_error(c, "Received fragmented packet");
 8028bb0:	b110      	cbz	r0, 8028bb8 <rx_ip+0x34>
 8028bb2:	4963      	ldr	r1, [pc, #396]	@ (8028d40 <rx_ip+0x1bc>)
 8028bb4:	f7fd f850 	bl	8025c58 <mg_error>
}
 8028bb8:	b004      	add	sp, #16
 8028bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 8028bbe:	f101 0314 	add.w	r3, r1, #20
 8028bc2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8028bc4:	e7ec      	b.n	8028ba0 <rx_ip+0x1c>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8028bc6:	3114      	adds	r1, #20
 8028bc8:	62a1      	str	r1, [r4, #40]	@ 0x28
 8028bca:	e7ec      	b.n	8028ba6 <rx_ip+0x22>
  } else if (pkt->ip->proto == 1) {
 8028bcc:	7a4b      	ldrb	r3, [r1, #9]
 8028bce:	2b01      	cmp	r3, #1
 8028bd0:	d024      	beq.n	8028c1c <rx_ip+0x98>
  } else if (pkt->ip->proto == 17) {
 8028bd2:	2b11      	cmp	r3, #17
 8028bd4:	d031      	beq.n	8028c3a <rx_ip+0xb6>
  } else if (pkt->ip->proto == 6) {
 8028bd6:	2b06      	cmp	r3, #6
 8028bd8:	d1ee      	bne.n	8028bb8 <rx_ip+0x34>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8028bda:	f101 0314 	add.w	r3, r1, #20
 8028bde:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8028be0:	68e3      	ldr	r3, [r4, #12]
 8028be2:	2b13      	cmp	r3, #19
 8028be4:	d9e8      	bls.n	8028bb8 <rx_ip+0x34>
    mkpay(pkt, pkt->tcp + 1);
 8028be6:	3128      	adds	r1, #40	@ 0x28
 8028be8:	4620      	mov	r0, r4
 8028bea:	f7fb f8d4 	bl	8023d96 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 8028bee:	69e3      	ldr	r3, [r4, #28]
 8028bf0:	8858      	ldrh	r0, [r3, #2]
 8028bf2:	f7fc fc43 	bl	802547c <mg_ntohs>
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 8028bf6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028bf8:	7b1b      	ldrb	r3, [r3, #12]
 8028bfa:	091b      	lsrs	r3, r3, #4
 8028bfc:	3305      	adds	r3, #5
 8028bfe:	009a      	lsls	r2, r3, #2
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 8028c00:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8028c04:	d301      	bcc.n	8028c0a <rx_ip+0x86>
 8028c06:	1a80      	subs	r0, r0, r2
 8028c08:	60e0      	str	r0, [r4, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8028c0a:	4b4e      	ldr	r3, [pc, #312]	@ (8028d44 <rx_ip+0x1c0>)
 8028c0c:	681b      	ldr	r3, [r3, #0]
 8028c0e:	2b03      	cmp	r3, #3
 8028c10:	dc74      	bgt.n	8028cfc <rx_ip+0x178>
    rx_tcp(ifp, pkt);
 8028c12:	4621      	mov	r1, r4
 8028c14:	4628      	mov	r0, r5
 8028c16:	f7ff fb3d 	bl	8028294 <rx_tcp>
 8028c1a:	e7cd      	b.n	8028bb8 <rx_ip+0x34>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 8028c1c:	f101 0314 	add.w	r3, r1, #20
 8028c20:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8028c22:	68e3      	ldr	r3, [r4, #12]
 8028c24:	2b03      	cmp	r3, #3
 8028c26:	d9c7      	bls.n	8028bb8 <rx_ip+0x34>
    mkpay(pkt, pkt->icmp + 1);
 8028c28:	3118      	adds	r1, #24
 8028c2a:	4620      	mov	r0, r4
 8028c2c:	f7fb f8b3 	bl	8023d96 <mkpay>
    rx_icmp(ifp, pkt);
 8028c30:	4621      	mov	r1, r4
 8028c32:	4628      	mov	r0, r5
 8028c34:	f7fc fc77 	bl	8025526 <rx_icmp>
 8028c38:	e7be      	b.n	8028bb8 <rx_ip+0x34>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 8028c3a:	f101 0314 	add.w	r3, r1, #20
 8028c3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8028c40:	68e3      	ldr	r3, [r4, #12]
 8028c42:	2b07      	cmp	r3, #7
 8028c44:	d9b8      	bls.n	8028bb8 <rx_ip+0x34>
    mkpay(pkt, pkt->udp + 1);
 8028c46:	311c      	adds	r1, #28
 8028c48:	4620      	mov	r0, r4
 8028c4a:	f7fb f8a4 	bl	8023d96 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8028c4e:	4b3d      	ldr	r3, [pc, #244]	@ (8028d44 <rx_ip+0x1c0>)
 8028c50:	681b      	ldr	r3, [r3, #0]
 8028c52:	2b03      	cmp	r3, #3
 8028c54:	dc16      	bgt.n	8028c84 <rx_ip+0x100>
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 8028c56:	7f2b      	ldrb	r3, [r5, #28]
 8028c58:	b133      	cbz	r3, 8028c68 <rx_ip+0xe4>
 8028c5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8028c5c:	8877      	ldrh	r7, [r6, #2]
 8028c5e:	2044      	movs	r0, #68	@ 0x44
 8028c60:	f7fc fc0c 	bl	802547c <mg_ntohs>
 8028c64:	4287      	cmp	r7, r0
 8028c66:	d02f      	beq.n	8028cc8 <rx_ip+0x144>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 8028c68:	7f6b      	ldrb	r3, [r5, #29]
 8028c6a:	b133      	cbz	r3, 8028c7a <rx_ip+0xf6>
 8028c6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8028c6e:	8877      	ldrh	r7, [r6, #2]
 8028c70:	2043      	movs	r0, #67	@ 0x43
 8028c72:	f7fc fc03 	bl	802547c <mg_ntohs>
 8028c76:	4287      	cmp	r7, r0
 8028c78:	d033      	beq.n	8028ce2 <rx_ip+0x15e>
      rx_udp(ifp, pkt);
 8028c7a:	4621      	mov	r1, r4
 8028c7c:	4628      	mov	r0, r5
 8028c7e:	f7fd fe03 	bl	8026888 <rx_udp>
 8028c82:	e799      	b.n	8028bb8 <rx_ip+0x34>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8028c84:	4b30      	ldr	r3, [pc, #192]	@ (8028d48 <rx_ip+0x1c4>)
 8028c86:	f241 6255 	movw	r2, #5717	@ 0x1655
 8028c8a:	4930      	ldr	r1, [pc, #192]	@ (8028d4c <rx_ip+0x1c8>)
 8028c8c:	2004      	movs	r0, #4
 8028c8e:	f7fc fefb 	bl	8025a88 <mg_log_prefix>
 8028c92:	69e7      	ldr	r7, [r4, #28]
 8028c94:	f8d4 802c 	ldr.w	r8, [r4, #44]	@ 0x2c
 8028c98:	f8b8 0000 	ldrh.w	r0, [r8]
 8028c9c:	f7fc fbee 	bl	802547c <mg_ntohs>
 8028ca0:	4606      	mov	r6, r0
 8028ca2:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8028ca6:	f7fc fbe9 	bl	802547c <mg_ntohs>
 8028caa:	68e3      	ldr	r3, [r4, #12]
 8028cac:	4928      	ldr	r1, [pc, #160]	@ (8028d50 <rx_ip+0x1cc>)
 8028cae:	9303      	str	r3, [sp, #12]
 8028cb0:	9002      	str	r0, [sp, #8]
 8028cb2:	f107 0310 	add.w	r3, r7, #16
 8028cb6:	9301      	str	r3, [sp, #4]
 8028cb8:	9100      	str	r1, [sp, #0]
 8028cba:	4633      	mov	r3, r6
 8028cbc:	f107 020c 	add.w	r2, r7, #12
 8028cc0:	4824      	ldr	r0, [pc, #144]	@ (8028d54 <rx_ip+0x1d0>)
 8028cc2:	f7fa fdcb 	bl	802385c <mg_log>
 8028cc6:	e7c6      	b.n	8028c56 <rx_ip+0xd2>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8028cc8:	f106 0308 	add.w	r3, r6, #8
 8028ccc:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8028cce:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 8028cd2:	4620      	mov	r0, r4
 8028cd4:	f7fb f85f 	bl	8023d96 <mkpay>
      rx_dhcp_client(ifp, pkt);
 8028cd8:	4621      	mov	r1, r4
 8028cda:	4628      	mov	r0, r5
 8028cdc:	f7ff fe04 	bl	80288e8 <rx_dhcp_client>
 8028ce0:	e76a      	b.n	8028bb8 <rx_ip+0x34>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8028ce2:	f106 0308 	add.w	r3, r6, #8
 8028ce6:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8028ce8:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 8028cec:	4620      	mov	r0, r4
 8028cee:	f7fb f852 	bl	8023d96 <mkpay>
      rx_dhcp_server(ifp, pkt);
 8028cf2:	4621      	mov	r1, r4
 8028cf4:	4628      	mov	r0, r5
 8028cf6:	f7fc fd41 	bl	802577c <rx_dhcp_server>
 8028cfa:	e75d      	b.n	8028bb8 <rx_ip+0x34>
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8028cfc:	4b12      	ldr	r3, [pc, #72]	@ (8028d48 <rx_ip+0x1c4>)
 8028cfe:	f241 626a 	movw	r2, #5738	@ 0x166a
 8028d02:	4912      	ldr	r1, [pc, #72]	@ (8028d4c <rx_ip+0x1c8>)
 8028d04:	2004      	movs	r0, #4
 8028d06:	f7fc febf 	bl	8025a88 <mg_log_prefix>
 8028d0a:	69e7      	ldr	r7, [r4, #28]
 8028d0c:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 8028d10:	f8b8 0000 	ldrh.w	r0, [r8]
 8028d14:	f7fc fbb2 	bl	802547c <mg_ntohs>
 8028d18:	4606      	mov	r6, r0
 8028d1a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8028d1e:	f7fc fbad 	bl	802547c <mg_ntohs>
 8028d22:	68e3      	ldr	r3, [r4, #12]
 8028d24:	490a      	ldr	r1, [pc, #40]	@ (8028d50 <rx_ip+0x1cc>)
 8028d26:	9303      	str	r3, [sp, #12]
 8028d28:	9002      	str	r0, [sp, #8]
 8028d2a:	f107 0310 	add.w	r3, r7, #16
 8028d2e:	9301      	str	r3, [sp, #4]
 8028d30:	9100      	str	r1, [sp, #0]
 8028d32:	4633      	mov	r3, r6
 8028d34:	f107 020c 	add.w	r2, r7, #12
 8028d38:	4807      	ldr	r0, [pc, #28]	@ (8028d58 <rx_ip+0x1d4>)
 8028d3a:	f7fa fd8f 	bl	802385c <mg_log>
 8028d3e:	e768      	b.n	8028c12 <rx_ip+0x8e>
 8028d40:	0803a74c 	.word	0x0803a74c
 8028d44:	2000012c 	.word	0x2000012c
 8028d48:	0803a96c 	.word	0x0803a96c
 8028d4c:	0803a050 	.word	0x0803a050
 8028d50:	0802381d 	.word	0x0802381d
 8028d54:	0803a768 	.word	0x0803a768
 8028d58:	0803a784 	.word	0x0803a784

08028d5c <mg_tcpip_rx>:
static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 8028d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028d60:	b08e      	sub	sp, #56	@ 0x38
 8028d62:	4606      	mov	r6, r0
 8028d64:	460c      	mov	r4, r1
 8028d66:	4615      	mov	r5, r2
  memset(&pkt, 0, sizeof(pkt));
 8028d68:	2234      	movs	r2, #52	@ 0x34
 8028d6a:	2100      	movs	r1, #0
 8028d6c:	a801      	add	r0, sp, #4
 8028d6e:	f003 fa87 	bl	802c280 <memset>
  pkt.raw.buf = (char *) buf;
 8028d72:	9401      	str	r4, [sp, #4]
  pkt.raw.len = len;
 8028d74:	9502      	str	r5, [sp, #8]
  pkt.eth = (struct eth *) buf;
 8028d76:	9405      	str	r4, [sp, #20]
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8028d78:	2d0d      	cmp	r5, #13
 8028d7a:	d93f      	bls.n	8028dfc <mg_tcpip_rx+0xa0>
  if (ifp->enable_mac_check &&
 8028d7c:	f896 3022 	ldrb.w	r3, [r6, #34]	@ 0x22
 8028d80:	b15b      	cbz	r3, 8028d9a <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8028d82:	2206      	movs	r2, #6
 8028d84:	4631      	mov	r1, r6
 8028d86:	4620      	mov	r0, r4
 8028d88:	f003 f9e6 	bl	802c158 <memcmp>
  if (ifp->enable_mac_check &&
 8028d8c:	b128      	cbz	r0, 8028d9a <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 8028d8e:	2206      	movs	r2, #6
 8028d90:	4945      	ldr	r1, [pc, #276]	@ (8028ea8 <mg_tcpip_rx+0x14c>)
 8028d92:	4620      	mov	r0, r4
 8028d94:	f003 f9e0 	bl	802c158 <memcmp>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8028d98:	bb80      	cbnz	r0, 8028dfc <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 8028d9a:	f896 3021 	ldrb.w	r3, [r6, #33]	@ 0x21
 8028d9e:	b18b      	cbz	r3, 8028dc4 <mg_tcpip_rx+0x68>
 8028da0:	2d04      	cmp	r5, #4
 8028da2:	d92e      	bls.n	8028e02 <mg_tcpip_rx+0xa6>
    len -= 4;  // TODO(scaprile): check on bigendian
 8028da4:	f1a5 0804 	sub.w	r8, r5, #4
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 8028da8:	4642      	mov	r2, r8
 8028daa:	4621      	mov	r1, r4
 8028dac:	2000      	movs	r0, #0
 8028dae:	f7fc fe1b 	bl	80259e8 <mg_crc32>
 8028db2:	9000      	str	r0, [sp, #0]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8028db4:	2204      	movs	r2, #4
 8028db6:	4669      	mov	r1, sp
 8028db8:	eb04 0008 	add.w	r0, r4, r8
 8028dbc:	f003 f9cc 	bl	802c158 <memcmp>
 8028dc0:	b108      	cbz	r0, 8028dc6 <mg_tcpip_rx+0x6a>
 8028dc2:	e01b      	b.n	8028dfc <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 8028dc4:	46a8      	mov	r8, r5
  if (pkt.eth->type == mg_htons(0x806)) {
 8028dc6:	89a7      	ldrh	r7, [r4, #12]
 8028dc8:	f640 0006 	movw	r0, #2054	@ 0x806
 8028dcc:	f7fc fb56 	bl	802547c <mg_ntohs>
 8028dd0:	4287      	cmp	r7, r0
 8028dd2:	d018      	beq.n	8028e06 <mg_tcpip_rx+0xaa>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 8028dd4:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 8028dd8:	f7fc fb50 	bl	802547c <mg_ntohs>
 8028ddc:	4287      	cmp	r7, r0
 8028dde:	d01b      	beq.n	8028e18 <mg_tcpip_rx+0xbc>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 8028de0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8028de4:	f7fc fb4a 	bl	802547c <mg_ntohs>
 8028de8:	4287      	cmp	r7, r0
 8028dea:	d028      	beq.n	8028e3e <mg_tcpip_rx+0xe2>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8028dec:	4b2f      	ldr	r3, [pc, #188]	@ (8028eac <mg_tcpip_rx+0x150>)
 8028dee:	681b      	ldr	r3, [r3, #0]
 8028df0:	2b02      	cmp	r3, #2
 8028df2:	dc41      	bgt.n	8028e78 <mg_tcpip_rx+0x11c>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8028df4:	4b2d      	ldr	r3, [pc, #180]	@ (8028eac <mg_tcpip_rx+0x150>)
 8028df6:	681b      	ldr	r3, [r3, #0]
 8028df8:	2b03      	cmp	r3, #3
 8028dfa:	dc4d      	bgt.n	8028e98 <mg_tcpip_rx+0x13c>
}
 8028dfc:	b00e      	add	sp, #56	@ 0x38
 8028dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ifp->enable_crc32_check && len > 4) {
 8028e02:	46a8      	mov	r8, r5
 8028e04:	e7df      	b.n	8028dc6 <mg_tcpip_rx+0x6a>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 8028e06:	340e      	adds	r4, #14
 8028e08:	9407      	str	r4, [sp, #28]
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 8028e0a:	2d29      	cmp	r5, #41	@ 0x29
 8028e0c:	d9f6      	bls.n	8028dfc <mg_tcpip_rx+0xa0>
    rx_arp(ifp, &pkt);
 8028e0e:	a901      	add	r1, sp, #4
 8028e10:	4630      	mov	r0, r6
 8028e12:	f7fe ff09 	bl	8027c28 <rx_arp>
 8028e16:	e7f1      	b.n	8028dfc <mg_tcpip_rx+0xa0>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 8028e18:	f104 030e 	add.w	r3, r4, #14
 8028e1c:	9309      	str	r3, [sp, #36]	@ 0x24
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 8028e1e:	2d35      	cmp	r5, #53	@ 0x35
 8028e20:	d9ec      	bls.n	8028dfc <mg_tcpip_rx+0xa0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8028e22:	7ba3      	ldrb	r3, [r4, #14]
 8028e24:	091b      	lsrs	r3, r3, #4
 8028e26:	2b06      	cmp	r3, #6
 8028e28:	d1e8      	bne.n	8028dfc <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip6 + 1);
 8028e2a:	f104 0136 	add.w	r1, r4, #54	@ 0x36
 8028e2e:	a801      	add	r0, sp, #4
 8028e30:	f7fa ffb1 	bl	8023d96 <mkpay>
    rx_ip6(ifp, &pkt);
 8028e34:	a901      	add	r1, sp, #4
 8028e36:	4630      	mov	r0, r6
 8028e38:	f7fc fbaf 	bl	802559a <rx_ip6>
 8028e3c:	e7de      	b.n	8028dfc <mg_tcpip_rx+0xa0>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 8028e3e:	f104 030e 	add.w	r3, r4, #14
 8028e42:	9308      	str	r3, [sp, #32]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8028e44:	2d21      	cmp	r5, #33	@ 0x21
 8028e46:	d9d9      	bls.n	8028dfc <mg_tcpip_rx+0xa0>
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 8028e48:	8a20      	ldrh	r0, [r4, #16]
 8028e4a:	f7fc fb17 	bl	802547c <mg_ntohs>
 8028e4e:	300e      	adds	r0, #14
 8028e50:	42a8      	cmp	r0, r5
 8028e52:	d200      	bcs.n	8028e56 <mg_tcpip_rx+0xfa>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 8028e54:	9002      	str	r0, [sp, #8]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8028e56:	9b02      	ldr	r3, [sp, #8]
 8028e58:	2b21      	cmp	r3, #33	@ 0x21
 8028e5a:	d9cf      	bls.n	8028dfc <mg_tcpip_rx+0xa0>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 8028e5c:	7ba3      	ldrb	r3, [r4, #14]
 8028e5e:	091b      	lsrs	r3, r3, #4
 8028e60:	2b04      	cmp	r3, #4
 8028e62:	d1cb      	bne.n	8028dfc <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip + 1);
 8028e64:	f104 0122 	add.w	r1, r4, #34	@ 0x22
 8028e68:	a801      	add	r0, sp, #4
 8028e6a:	f7fa ff94 	bl	8023d96 <mkpay>
    rx_ip(ifp, &pkt);
 8028e6e:	a901      	add	r1, sp, #4
 8028e70:	4630      	mov	r0, r6
 8028e72:	f7ff fe87 	bl	8028b84 <rx_ip>
 8028e76:	e7c1      	b.n	8028dfc <mg_tcpip_rx+0xa0>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8028e78:	4b0d      	ldr	r3, [pc, #52]	@ (8028eb0 <mg_tcpip_rx+0x154>)
 8028e7a:	f241 62a8 	movw	r2, #5800	@ 0x16a8
 8028e7e:	490d      	ldr	r1, [pc, #52]	@ (8028eb4 <mg_tcpip_rx+0x158>)
 8028e80:	2003      	movs	r0, #3
 8028e82:	f7fc fe01 	bl	8025a88 <mg_log_prefix>
 8028e86:	9b05      	ldr	r3, [sp, #20]
 8028e88:	8998      	ldrh	r0, [r3, #12]
 8028e8a:	f7fc faf7 	bl	802547c <mg_ntohs>
 8028e8e:	4601      	mov	r1, r0
 8028e90:	4809      	ldr	r0, [pc, #36]	@ (8028eb8 <mg_tcpip_rx+0x15c>)
 8028e92:	f7fa fce3 	bl	802385c <mg_log>
 8028e96:	e7ad      	b.n	8028df4 <mg_tcpip_rx+0x98>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8028e98:	4641      	mov	r1, r8
 8028e9a:	2920      	cmp	r1, #32
 8028e9c:	bf28      	it	cs
 8028e9e:	2120      	movcs	r1, #32
 8028ea0:	4620      	mov	r0, r4
 8028ea2:	f7f9 fe3b 	bl	8022b1c <mg_hexdump>
 8028ea6:	e7a9      	b.n	8028dfc <mg_tcpip_rx+0xa0>
 8028ea8:	0803aad8 	.word	0x0803aad8
 8028eac:	2000012c 	.word	0x2000012c
 8028eb0:	0803a97c 	.word	0x0803a97c
 8028eb4:	0803a050 	.word	0x0803a050
 8028eb8:	0803a7a0 	.word	0x0803a7a0

08028ebc <mg_tcpip_poll>:
static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 8028ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028ec0:	b08b      	sub	sp, #44	@ 0x2c
 8028ec2:	4605      	mov	r5, r0
 8028ec4:	4616      	mov	r6, r2
 8028ec6:	461f      	mov	r7, r3
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 8028ec8:	9200      	str	r2, [sp, #0]
 8028eca:	9301      	str	r3, [sp, #4]
 8028ecc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8028ed0:	2300      	movs	r3, #0
 8028ed2:	3058      	adds	r0, #88	@ 0x58
 8028ed4:	f7fc f8a4 	bl	8025020 <mg_timer_expired>
  ifp->now = now;
 8028ed8:	652e      	str	r6, [r5, #80]	@ 0x50
 8028eda:	656f      	str	r7, [r5, #84]	@ 0x54
  if (expired_1000ms && ifp->driver->up) {
 8028edc:	4604      	mov	r4, r0
 8028ede:	b318      	cbz	r0, 8028f28 <mg_tcpip_poll+0x6c>
 8028ee0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8028ee2:	68db      	ldr	r3, [r3, #12]
 8028ee4:	b303      	cbz	r3, 8028f28 <mg_tcpip_poll+0x6c>
    bool up = ifp->driver->up(ifp);
 8028ee6:	4628      	mov	r0, r5
 8028ee8:	4798      	blx	r3
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 8028eea:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8028eee:	3b00      	subs	r3, #0
 8028ef0:	bf18      	it	ne
 8028ef2:	2301      	movne	r3, #1
    if (up != current) {
 8028ef4:	4298      	cmp	r0, r3
 8028ef6:	d010      	beq.n	8028f1a <mg_tcpip_poll+0x5e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8028ef8:	b120      	cbz	r0, 8028f04 <mg_tcpip_poll+0x48>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 8028efa:	7f2b      	ldrb	r3, [r5, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8028efc:	2b00      	cmp	r3, #0
 8028efe:	d06e      	beq.n	8028fde <mg_tcpip_poll+0x122>
 8028f00:	2301      	movs	r3, #1
 8028f02:	e000      	b.n	8028f06 <mg_tcpip_poll+0x4a>
 8028f04:	2300      	movs	r3, #0
 8028f06:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 8028f0a:	b918      	cbnz	r0, 8028f14 <mg_tcpip_poll+0x58>
 8028f0c:	7f2b      	ldrb	r3, [r5, #28]
 8028f0e:	b10b      	cbz	r3, 8028f14 <mg_tcpip_poll+0x58>
 8028f10:	2300      	movs	r3, #0
 8028f12:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8028f14:	4628      	mov	r0, r5
 8028f16:	f7ff fc67 	bl	80287e8 <onstatechange>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 8028f1a:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8028f1e:	b91b      	cbnz	r3, 8028f28 <mg_tcpip_poll+0x6c>
 8028f20:	4ba8      	ldr	r3, [pc, #672]	@ (80291c4 <mg_tcpip_poll+0x308>)
 8028f22:	681b      	ldr	r3, [r3, #0]
 8028f24:	2b00      	cmp	r3, #0
 8028f26:	dc5c      	bgt.n	8028fe2 <mg_tcpip_poll+0x126>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8028f28:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8028f2c:	2b00      	cmp	r3, #0
 8028f2e:	f000 8146 	beq.w	80291be <mg_tcpip_poll+0x302>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 8028f32:	2b01      	cmp	r3, #1
 8028f34:	d060      	beq.n	8028ff8 <mg_tcpip_poll+0x13c>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8028f36:	2c00      	cmp	r4, #0
 8028f38:	d05f      	beq.n	8028ffa <mg_tcpip_poll+0x13e>
 8028f3a:	2b03      	cmp	r3, #3
 8028f3c:	d15d      	bne.n	8028ffa <mg_tcpip_poll+0x13e>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 8028f3e:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8028f40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8028f42:	ea52 0103 	orrs.w	r1, r2, r3
 8028f46:	d058      	beq.n	8028ffa <mg_tcpip_poll+0x13e>
    if (ifp->now >= ifp->lease_expire) {
 8028f48:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8028f4a:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8028f4c:	4290      	cmp	r0, r2
 8028f4e:	eb71 0403 	sbcs.w	r4, r1, r3
 8028f52:	d262      	bcs.n	802901a <mg_tcpip_poll+0x15e>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 8028f54:	4c9c      	ldr	r4, [pc, #624]	@ (80291c8 <mg_tcpip_poll+0x30c>)
 8028f56:	1904      	adds	r4, r0, r4
 8028f58:	f141 0c00 	adc.w	ip, r1, #0
 8028f5c:	42a2      	cmp	r2, r4
 8028f5e:	eb73 030c 	sbcs.w	r3, r3, ip
 8028f62:	d24a      	bcs.n	8028ffa <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 8028f64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8028f68:	2300      	movs	r3, #0
 8028f6a:	f7e7 fef5 	bl	8010d58 <__aeabi_uldivmod>
 8028f6e:	4602      	mov	r2, r0
 8028f70:	2000      	movs	r0, #0
 8028f72:	1853      	adds	r3, r2, r1
 8028f74:	d25a      	bcs.n	802902c <mg_tcpip_poll+0x170>
 8028f76:	4403      	add	r3, r0
 8028f78:	4894      	ldr	r0, [pc, #592]	@ (80291cc <mg_tcpip_poll+0x310>)
 8028f7a:	fba0 4003 	umull	r4, r0, r0, r3
 8028f7e:	08c0      	lsrs	r0, r0, #3
 8028f80:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8028f84:	1a1b      	subs	r3, r3, r0
 8028f86:	1ad3      	subs	r3, r2, r3
 8028f88:	f161 0c00 	sbc.w	ip, r1, #0
 8028f8c:	4c90      	ldr	r4, [pc, #576]	@ (80291d0 <mg_tcpip_poll+0x314>)
 8028f8e:	f04f 30ee 	mov.w	r0, #4008636142	@ 0xeeeeeeee
 8028f92:	fb03 f000 	mul.w	r0, r3, r0
 8028f96:	fb04 000c 	mla	r0, r4, ip, r0
 8028f9a:	fba3 3404 	umull	r3, r4, r3, r4
 8028f9e:	4420      	add	r0, r4
 8028fa0:	089b      	lsrs	r3, r3, #2
 8028fa2:	ea43 7380 	orr.w	r3, r3, r0, lsl #30
 8028fa6:	0880      	lsrs	r0, r0, #2
 8028fa8:	0104      	lsls	r4, r0, #4
 8028faa:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 8028fae:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8028fb2:	ebbc 0c03 	subs.w	ip, ip, r3
 8028fb6:	eb64 0300 	sbc.w	r3, r4, r0
 8028fba:	009b      	lsls	r3, r3, #2
 8028fbc:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8028fc0:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8028fc4:	1a12      	subs	r2, r2, r0
 8028fc6:	eb61 0103 	sbc.w	r1, r1, r3
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 8028fca:	430a      	orrs	r2, r1
 8028fcc:	d115      	bne.n	8028ffa <mg_tcpip_poll+0x13e>
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 8028fce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028fd2:	68aa      	ldr	r2, [r5, #8]
 8028fd4:	497f      	ldr	r1, [pc, #508]	@ (80291d4 <mg_tcpip_poll+0x318>)
 8028fd6:	4628      	mov	r0, r5
 8028fd8:	f7fe fdfe 	bl	8027bd8 <tx_dhcp_request_re>
 8028fdc:	e00d      	b.n	8028ffa <mg_tcpip_poll+0x13e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8028fde:	2303      	movs	r3, #3
 8028fe0:	e791      	b.n	8028f06 <mg_tcpip_poll+0x4a>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 8028fe2:	4b7d      	ldr	r3, [pc, #500]	@ (80291d8 <mg_tcpip_poll+0x31c>)
 8028fe4:	f241 62c5 	movw	r2, #5829	@ 0x16c5
 8028fe8:	497c      	ldr	r1, [pc, #496]	@ (80291dc <mg_tcpip_poll+0x320>)
 8028fea:	2001      	movs	r0, #1
 8028fec:	f7fc fd4c 	bl	8025a88 <mg_log_prefix>
 8028ff0:	487b      	ldr	r0, [pc, #492]	@ (80291e0 <mg_tcpip_poll+0x324>)
 8028ff2:	f7fa fc33 	bl	802385c <mg_log>
 8028ff6:	e797      	b.n	8028f28 <mg_tcpip_poll+0x6c>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 8028ff8:	b95c      	cbnz	r4, 8029012 <mg_tcpip_poll+0x156>
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 8028ffa:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8028ffc:	689b      	ldr	r3, [r3, #8]
 8028ffe:	b1fb      	cbz	r3, 8029040 <mg_tcpip_poll+0x184>
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 8029000:	462a      	mov	r2, r5
 8029002:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8029004:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8029006:	4798      	blx	r3
    if (len > 0) {
 8029008:	4602      	mov	r2, r0
 802900a:	b988      	cbnz	r0, 8029030 <mg_tcpip_poll+0x174>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 802900c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802900e:	681c      	ldr	r4, [r3, #0]
 8029010:	e0a3      	b.n	802915a <mg_tcpip_poll+0x29e>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 8029012:	4628      	mov	r0, r5
 8029014:	f7fe fdaa 	bl	8027b6c <tx_dhcp_discover>
 8029018:	e7ef      	b.n	8028ffa <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 802901a:	2301      	movs	r3, #1
 802901c:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8029020:	2300      	movs	r3, #0
 8029022:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8029024:	4628      	mov	r0, r5
 8029026:	f7ff fbdf 	bl	80287e8 <onstatechange>
 802902a:	e7e6      	b.n	8028ffa <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 802902c:	2001      	movs	r0, #1
 802902e:	e7a2      	b.n	8028f76 <mg_tcpip_poll+0xba>
      ifp->nrecv++;
 8029030:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8029032:	3301      	adds	r3, #1
 8029034:	672b      	str	r3, [r5, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 8029036:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8029038:	4628      	mov	r0, r5
 802903a:	f7ff fe8f 	bl	8028d5c <mg_tcpip_rx>
 802903e:	e7e5      	b.n	802900c <mg_tcpip_poll+0x150>
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 8029040:	f105 0434 	add.w	r4, r5, #52	@ 0x34
 8029044:	a909      	add	r1, sp, #36	@ 0x24
 8029046:	4620      	mov	r0, r4
 8029048:	f7fa fd13 	bl	8023a72 <mg_queue_next>
    if (len > 0) {
 802904c:	4680      	mov	r8, r0
 802904e:	2800      	cmp	r0, #0
 8029050:	d0dc      	beq.n	802900c <mg_tcpip_poll+0x150>
      mg_tcpip_rx(ifp, buf, len);
 8029052:	4602      	mov	r2, r0
 8029054:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029056:	4628      	mov	r0, r5
 8029058:	f7ff fe80 	bl	8028d5c <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 802905c:	4641      	mov	r1, r8
 802905e:	4620      	mov	r0, r4
 8029060:	f7fa fd23 	bl	8023aaa <mg_queue_del>
 8029064:	e7d2      	b.n	802900c <mg_tcpip_poll+0x150>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 8029066:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 802906a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 802906e:	4291      	cmp	r1, r2
 8029070:	f000 8088 	beq.w	8029184 <mg_tcpip_poll+0x2c8>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8029074:	4b53      	ldr	r3, [pc, #332]	@ (80291c4 <mg_tcpip_poll+0x308>)
 8029076:	681b      	ldr	r3, [r3, #0]
 8029078:	2b03      	cmp	r3, #3
 802907a:	dc23      	bgt.n	80290c4 <mg_tcpip_poll+0x208>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 802907c:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8029080:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8029084:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8029088:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 802908c:	f7fc f95e 	bl	802534c <mg_ntohl>
 8029090:	9007      	str	r0, [sp, #28]
 8029092:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8029096:	f7fc f959 	bl	802534c <mg_ntohl>
 802909a:	2300      	movs	r3, #0
 802909c:	9305      	str	r3, [sp, #20]
 802909e:	9304      	str	r3, [sp, #16]
 80290a0:	9003      	str	r0, [sp, #12]
 80290a2:	9b07      	ldr	r3, [sp, #28]
 80290a4:	9302      	str	r3, [sp, #8]
 80290a6:	f8cd b004 	str.w	fp, [sp, #4]
 80290aa:	f8cd a000 	str.w	sl, [sp]
 80290ae:	2310      	movs	r3, #16
 80290b0:	4642      	mov	r2, r8
 80290b2:	4649      	mov	r1, r9
 80290b4:	4628      	mov	r0, r5
 80290b6:	f7fe f9e3 	bl	8027480 <tx_tcp>
        s->acked = s->ack;
 80290ba:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80290be:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 80290c2:	e045      	b.n	8029150 <mg_tcpip_poll+0x294>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 80290c4:	4b44      	ldr	r3, [pc, #272]	@ (80291d8 <mg_tcpip_poll+0x31c>)
 80290c6:	f241 62f1 	movw	r2, #5873	@ 0x16f1
 80290ca:	4944      	ldr	r1, [pc, #272]	@ (80291dc <mg_tcpip_poll+0x320>)
 80290cc:	2004      	movs	r0, #4
 80290ce:	f7fc fcdb 	bl	8025a88 <mg_log_prefix>
 80290d2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80290d6:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 80290da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80290dc:	4841      	ldr	r0, [pc, #260]	@ (80291e4 <mg_tcpip_poll+0x328>)
 80290de:	f7fa fbbd 	bl	802385c <mg_log>
 80290e2:	e7cb      	b.n	802907c <mg_tcpip_poll+0x1c0>
        mg_error(c, "ARP timeout");
 80290e4:	4940      	ldr	r1, [pc, #256]	@ (80291e8 <mg_tcpip_poll+0x32c>)
 80290e6:	4620      	mov	r0, r4
 80290e8:	f7fc fdb6 	bl	8025c58 <mg_error>
 80290ec:	e030      	b.n	8029150 <mg_tcpip_poll+0x294>
        mg_error(c, "Connection timeout");
 80290ee:	493f      	ldr	r1, [pc, #252]	@ (80291ec <mg_tcpip_poll+0x330>)
 80290f0:	4620      	mov	r0, r4
 80290f2:	f7fc fdb1 	bl	8025c58 <mg_error>
 80290f6:	e02b      	b.n	8029150 <mg_tcpip_poll+0x294>
        c->is_closing = 1;
 80290f8:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80290fc:	f043 0320 	orr.w	r3, r3, #32
 8029100:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        continue;
 8029104:	e028      	b.n	8029158 <mg_tcpip_poll+0x29c>
          mg_error(c, "keepalive");
 8029106:	493a      	ldr	r1, [pc, #232]	@ (80291f0 <mg_tcpip_poll+0x334>)
 8029108:	4620      	mov	r0, r4
 802910a:	f7fc fda5 	bl	8025c58 <mg_error>
 802910e:	e01f      	b.n	8029150 <mg_tcpip_poll+0x294>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8029110:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8029114:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8029118:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 802911c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8029120:	3801      	subs	r0, #1
 8029122:	f7fc f913 	bl	802534c <mg_ntohl>
 8029126:	9007      	str	r0, [sp, #28]
 8029128:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 802912c:	f7fc f90e 	bl	802534c <mg_ntohl>
 8029130:	2300      	movs	r3, #0
 8029132:	9305      	str	r3, [sp, #20]
 8029134:	9304      	str	r3, [sp, #16]
 8029136:	9003      	str	r0, [sp, #12]
 8029138:	9b07      	ldr	r3, [sp, #28]
 802913a:	9302      	str	r3, [sp, #8]
 802913c:	f8cd b004 	str.w	fp, [sp, #4]
 8029140:	f8cd a000 	str.w	sl, [sp]
 8029144:	2310      	movs	r3, #16
 8029146:	4642      	mov	r2, r8
 8029148:	4649      	mov	r1, r9
 802914a:	4628      	mov	r0, r5
 802914c:	f7fe f998 	bl	8027480 <tx_tcp>
      settmout(c, MIP_TTYPE_KEEPALIVE);
 8029150:	2100      	movs	r1, #0
 8029152:	4620      	mov	r0, r4
 8029154:	f7fe fa70 	bl	8027638 <settmout>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8029158:	6824      	ldr	r4, [r4, #0]
 802915a:	b384      	cbz	r4, 80291be <mg_tcpip_poll+0x302>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 802915c:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	@ 0xac
 8029160:	f240 1209 	movw	r2, #265	@ 0x109
 8029164:	421a      	tst	r2, r3
 8029166:	d1f7      	bne.n	8029158 <mg_tcpip_poll+0x29c>
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8029168:	f8d4 801c 	ldr.w	r8, [r4, #28]
    if (now > s->timer) {
 802916c:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 8029170:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 8029174:	42b2      	cmp	r2, r6
 8029176:	41bb      	sbcs	r3, r7
 8029178:	d2ee      	bcs.n	8029158 <mg_tcpip_poll+0x29c>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 802917a:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 802917e:	2b01      	cmp	r3, #1
 8029180:	f43f af71 	beq.w	8029066 <mg_tcpip_poll+0x1aa>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 8029184:	2b02      	cmp	r3, #2
 8029186:	d0ad      	beq.n	80290e4 <mg_tcpip_poll+0x228>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 8029188:	2b03      	cmp	r3, #3
 802918a:	d0b0      	beq.n	80290ee <mg_tcpip_poll+0x232>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 802918c:	2b04      	cmp	r3, #4
 802918e:	d0b3      	beq.n	80290f8 <mg_tcpip_poll+0x23c>
        if (s->tmiss++ > 2) {
 8029190:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 8029194:	1c5a      	adds	r2, r3, #1
 8029196:	f884 20cf 	strb.w	r2, [r4, #207]	@ 0xcf
 802919a:	2b02      	cmp	r3, #2
 802919c:	d8b3      	bhi.n	8029106 <mg_tcpip_poll+0x24a>
          MG_VERBOSE(("%lu keepalive", c->id));
 802919e:	4b09      	ldr	r3, [pc, #36]	@ (80291c4 <mg_tcpip_poll+0x308>)
 80291a0:	681b      	ldr	r3, [r3, #0]
 80291a2:	2b03      	cmp	r3, #3
 80291a4:	ddb4      	ble.n	8029110 <mg_tcpip_poll+0x254>
 80291a6:	4b0c      	ldr	r3, [pc, #48]	@ (80291d8 <mg_tcpip_poll+0x31c>)
 80291a8:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80291ac:	490b      	ldr	r1, [pc, #44]	@ (80291dc <mg_tcpip_poll+0x320>)
 80291ae:	2004      	movs	r0, #4
 80291b0:	f7fc fc6a 	bl	8025a88 <mg_log_prefix>
 80291b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80291b6:	480f      	ldr	r0, [pc, #60]	@ (80291f4 <mg_tcpip_poll+0x338>)
 80291b8:	f7fa fb50 	bl	802385c <mg_log>
 80291bc:	e7a8      	b.n	8029110 <mg_tcpip_poll+0x254>
}
 80291be:	b00b      	add	sp, #44	@ 0x2c
 80291c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80291c4:	2000012c 	.word	0x2000012c
 80291c8:	001b7740 	.word	0x001b7740
 80291cc:	88888889 	.word	0x88888889
 80291d0:	eeeeeeef 	.word	0xeeeeeeef
 80291d4:	0803aad8 	.word	0x0803aad8
 80291d8:	0803a9c0 	.word	0x0803a9c0
 80291dc:	0803a050 	.word	0x0803a050
 80291e0:	0803a7b4 	.word	0x0803a7b4
 80291e4:	0803a7c4 	.word	0x0803a7c4
 80291e8:	0803a7d4 	.word	0x0803a7d4
 80291ec:	0803a7e0 	.word	0x0803a7e0
 80291f0:	0803a7f8 	.word	0x0803a7f8
 80291f4:	0803a7f4 	.word	0x0803a7f4

080291f8 <mg_mgr_poll>:
void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 80291f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80291fa:	b087      	sub	sp, #28
 80291fc:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 80291fe:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
  uint64_t now = mg_millis();
 8029200:	f7fc fc3d 	bl	8025a7e <mg_millis>
 8029204:	4602      	mov	r2, r0
 8029206:	460b      	mov	r3, r1
 8029208:	9004      	str	r0, [sp, #16]
 802920a:	9105      	str	r1, [sp, #20]
  mg_timer_poll(&mgr->timers, now);
 802920c:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8029210:	f7fb ff3a 	bl	8025088 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 8029214:	2d00      	cmp	r5, #0
 8029216:	d078      	beq.n	802930a <mg_mgr_poll+0x112>
 8029218:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 802921a:	2b00      	cmp	r3, #0
 802921c:	d075      	beq.n	802930a <mg_mgr_poll+0x112>
  mg_tcpip_poll(ifp, now);
 802921e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8029222:	4628      	mov	r0, r5
 8029224:	f7ff fe4a 	bl	8028ebc <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8029228:	6824      	ldr	r4, [r4, #0]
 802922a:	e040      	b.n	80292ae <mg_mgr_poll+0xb6>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 802922c:	4b38      	ldr	r3, [pc, #224]	@ (8029310 <mg_mgr_poll+0x118>)
 802922e:	f241 72a4 	movw	r2, #6052	@ 0x17a4
 8029232:	4938      	ldr	r1, [pc, #224]	@ (8029314 <mg_mgr_poll+0x11c>)
 8029234:	2004      	movs	r0, #4
 8029236:	f7fc fc27 	bl	8025a88 <mg_log_prefix>
 802923a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802923c:	f894 00ac 	ldrb.w	r0, [r4, #172]	@ 0xac
 8029240:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8029244:	d019      	beq.n	802927a <mg_mgr_poll+0x82>
 8029246:	2254      	movs	r2, #84	@ 0x54
 8029248:	f010 0f20 	tst.w	r0, #32
 802924c:	d017      	beq.n	802927e <mg_mgr_poll+0x86>
 802924e:	2343      	movs	r3, #67	@ 0x43
 8029250:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8029254:	d115      	bne.n	8029282 <mg_mgr_poll+0x8a>
 8029256:	2668      	movs	r6, #104	@ 0x68
 8029258:	f010 0f08 	tst.w	r0, #8
 802925c:	d013      	beq.n	8029286 <mg_mgr_poll+0x8e>
 802925e:	2752      	movs	r7, #82	@ 0x52
 8029260:	f894 00ad 	ldrb.w	r0, [r4, #173]	@ 0xad
 8029264:	f010 0f20 	tst.w	r0, #32
 8029268:	d00f      	beq.n	802928a <mg_mgr_poll+0x92>
 802926a:	2043      	movs	r0, #67	@ 0x43
 802926c:	9002      	str	r0, [sp, #8]
 802926e:	9701      	str	r7, [sp, #4]
 8029270:	9600      	str	r6, [sp, #0]
 8029272:	4829      	ldr	r0, [pc, #164]	@ (8029318 <mg_mgr_poll+0x120>)
 8029274:	f7fa faf2 	bl	802385c <mg_log>
 8029278:	e024      	b.n	80292c4 <mg_mgr_poll+0xcc>
 802927a:	2274      	movs	r2, #116	@ 0x74
 802927c:	e7e4      	b.n	8029248 <mg_mgr_poll+0x50>
 802927e:	2363      	movs	r3, #99	@ 0x63
 8029280:	e7e6      	b.n	8029250 <mg_mgr_poll+0x58>
 8029282:	2648      	movs	r6, #72	@ 0x48
 8029284:	e7e8      	b.n	8029258 <mg_mgr_poll+0x60>
 8029286:	2772      	movs	r7, #114	@ 0x72
 8029288:	e7ea      	b.n	8029260 <mg_mgr_poll+0x68>
 802928a:	2063      	movs	r0, #99	@ 0x63
 802928c:	e7ee      	b.n	802926c <mg_mgr_poll+0x74>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 802928e:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 8029292:	4620      	mov	r0, r4
 8029294:	f7fc fd18 	bl	8025cc8 <handle_tls_recv>
 8029298:	e01e      	b.n	80292d8 <mg_mgr_poll+0xe0>
    if (can_write(c)) write_conn(c);
 802929a:	4620      	mov	r0, r4
 802929c:	f7fe fa6a 	bl	8027774 <write_conn>
 80292a0:	e01f      	b.n	80292e2 <mg_mgr_poll+0xea>
    if (c->is_closing) close_conn(c);
 80292a2:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80292a6:	f013 0f20 	tst.w	r3, #32
 80292aa:	d12a      	bne.n	8029302 <mg_mgr_poll+0x10a>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 80292ac:	462c      	mov	r4, r5
  for (c = mgr->conns; c != NULL; c = tmp) {
 80292ae:	b364      	cbz	r4, 802930a <mg_mgr_poll+0x112>
    tmp = c->next;
 80292b0:	6825      	ldr	r5, [r4, #0]
    mg_call(c, MG_EV_POLL, &now);
 80292b2:	aa04      	add	r2, sp, #16
 80292b4:	2102      	movs	r1, #2
 80292b6:	4620      	mov	r0, r4
 80292b8:	f7f9 f886 	bl	80223c8 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 80292bc:	4b17      	ldr	r3, [pc, #92]	@ (802931c <mg_mgr_poll+0x124>)
 80292be:	681b      	ldr	r3, [r3, #0]
 80292c0:	2b03      	cmp	r3, #3
 80292c2:	dcb3      	bgt.n	802922c <mg_mgr_poll+0x34>
    if (c->is_tls && mg_tls_pending(c) > 0)
 80292c4:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80292c8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80292cc:	d004      	beq.n	80292d8 <mg_mgr_poll+0xe0>
 80292ce:	4620      	mov	r0, r4
 80292d0:	f7fb ff24 	bl	802511c <mg_tls_pending>
 80292d4:	2800      	cmp	r0, #0
 80292d6:	d1da      	bne.n	802928e <mg_mgr_poll+0x96>
    if (can_write(c)) write_conn(c);
 80292d8:	4620      	mov	r0, r4
 80292da:	f7f7 fca3 	bl	8020c24 <can_write>
 80292de:	2800      	cmp	r0, #0
 80292e0:	d1db      	bne.n	802929a <mg_mgr_poll+0xa2>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 80292e2:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80292e6:	f013 0f10 	tst.w	r3, #16
 80292ea:	d0da      	beq.n	80292a2 <mg_mgr_poll+0xaa>
 80292ec:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80292ee:	2b00      	cmp	r3, #0
 80292f0:	d1d7      	bne.n	80292a2 <mg_mgr_poll+0xaa>
 80292f2:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80292f6:	2b04      	cmp	r3, #4
 80292f8:	d0d3      	beq.n	80292a2 <mg_mgr_poll+0xaa>
      init_closure(c);
 80292fa:	4620      	mov	r0, r4
 80292fc:	f7fe fa66 	bl	80277cc <init_closure>
 8029300:	e7cf      	b.n	80292a2 <mg_mgr_poll+0xaa>
    if (c->is_closing) close_conn(c);
 8029302:	4620      	mov	r0, r4
 8029304:	f7fd fb7e 	bl	8026a04 <close_conn>
 8029308:	e7d0      	b.n	80292ac <mg_mgr_poll+0xb4>
}
 802930a:	b007      	add	sp, #28
 802930c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802930e:	bf00      	nop
 8029310:	0803a9d0 	.word	0x0803a9d0
 8029314:	0803a050 	.word	0x0803a050
 8029318:	0803a804 	.word	0x0803a804
 802931c:	2000012c 	.word	0x2000012c

08029320 <mg_now>:
uint64_t mg_now(void) {
 8029320:	b508      	push	{r3, lr}
  return mg_millis() + s_boot_timestamp;
 8029322:	f7fc fbac 	bl	8025a7e <mg_millis>
 8029326:	4a03      	ldr	r2, [pc, #12]	@ (8029334 <mg_now+0x14>)
 8029328:	6813      	ldr	r3, [r2, #0]
 802932a:	6852      	ldr	r2, [r2, #4]
 802932c:	18c0      	adds	r0, r0, r3
}
 802932e:	eb42 0101 	adc.w	r1, r2, r1
 8029332:	bd08      	pop	{r3, pc}
 8029334:	20019ec0 	.word	0x20019ec0

08029338 <mg_sntp_parse>:
int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 8029338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802933c:	4604      	mov	r4, r0
  int mode = len > 0 ? buf[0] & 7 : 0;
 802933e:	460a      	mov	r2, r1
 8029340:	b129      	cbz	r1, 802934e <mg_sntp_parse+0x16>
 8029342:	7801      	ldrb	r1, [r0, #0]
 8029344:	f001 0307 	and.w	r3, r1, #7
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8029348:	f3c1 05c2 	ubfx	r5, r1, #3, #3
 802934c:	e001      	b.n	8029352 <mg_sntp_parse+0x1a>
  int mode = len > 0 ? buf[0] & 7 : 0;
 802934e:	2300      	movs	r3, #0
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8029350:	461d      	mov	r5, r3
  if (len < 48) {
 8029352:	2a2f      	cmp	r2, #47	@ 0x2f
 8029354:	d817      	bhi.n	8029386 <mg_sntp_parse+0x4e>
    MG_ERROR(("%s", "corrupt packet"));
 8029356:	4b4b      	ldr	r3, [pc, #300]	@ (8029484 <mg_sntp_parse+0x14c>)
 8029358:	681b      	ldr	r3, [r3, #0]
 802935a:	2b00      	cmp	r3, #0
 802935c:	dc04      	bgt.n	8029368 <mg_sntp_parse+0x30>
  int64_t epoch_milliseconds = -1;
 802935e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029362:	4601      	mov	r1, r0
}
 8029364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    MG_ERROR(("%s", "corrupt packet"));
 8029368:	4b47      	ldr	r3, [pc, #284]	@ (8029488 <mg_sntp_parse+0x150>)
 802936a:	f641 420e 	movw	r2, #7182	@ 0x1c0e
 802936e:	4947      	ldr	r1, [pc, #284]	@ (802948c <mg_sntp_parse+0x154>)
 8029370:	2001      	movs	r0, #1
 8029372:	f7fc fb89 	bl	8025a88 <mg_log_prefix>
 8029376:	4946      	ldr	r1, [pc, #280]	@ (8029490 <mg_sntp_parse+0x158>)
 8029378:	4846      	ldr	r0, [pc, #280]	@ (8029494 <mg_sntp_parse+0x15c>)
 802937a:	f7fa fa6f 	bl	802385c <mg_log>
  int64_t epoch_milliseconds = -1;
 802937e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029382:	4601      	mov	r1, r0
 8029384:	e7ee      	b.n	8029364 <mg_sntp_parse+0x2c>
  } else if (mode != 4 && mode != 5) {
 8029386:	3b04      	subs	r3, #4
 8029388:	2b01      	cmp	r3, #1
 802938a:	d916      	bls.n	80293ba <mg_sntp_parse+0x82>
    MG_ERROR(("%s", "not a server reply"));
 802938c:	4b3d      	ldr	r3, [pc, #244]	@ (8029484 <mg_sntp_parse+0x14c>)
 802938e:	681b      	ldr	r3, [r3, #0]
 8029390:	2b00      	cmp	r3, #0
 8029392:	dc03      	bgt.n	802939c <mg_sntp_parse+0x64>
  int64_t epoch_milliseconds = -1;
 8029394:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029398:	4601      	mov	r1, r0
 802939a:	e7e3      	b.n	8029364 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "not a server reply"));
 802939c:	4b3a      	ldr	r3, [pc, #232]	@ (8029488 <mg_sntp_parse+0x150>)
 802939e:	f641 4210 	movw	r2, #7184	@ 0x1c10
 80293a2:	493a      	ldr	r1, [pc, #232]	@ (802948c <mg_sntp_parse+0x154>)
 80293a4:	2001      	movs	r0, #1
 80293a6:	f7fc fb6f 	bl	8025a88 <mg_log_prefix>
 80293aa:	493b      	ldr	r1, [pc, #236]	@ (8029498 <mg_sntp_parse+0x160>)
 80293ac:	4839      	ldr	r0, [pc, #228]	@ (8029494 <mg_sntp_parse+0x15c>)
 80293ae:	f7fa fa55 	bl	802385c <mg_log>
  int64_t epoch_milliseconds = -1;
 80293b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80293b6:	4601      	mov	r1, r0
 80293b8:	e7d4      	b.n	8029364 <mg_sntp_parse+0x2c>
  } else if (buf[1] == 0) {
 80293ba:	7863      	ldrb	r3, [r4, #1]
 80293bc:	b9b3      	cbnz	r3, 80293ec <mg_sntp_parse+0xb4>
    MG_ERROR(("%s", "server sent a kiss of death"));
 80293be:	4b31      	ldr	r3, [pc, #196]	@ (8029484 <mg_sntp_parse+0x14c>)
 80293c0:	681b      	ldr	r3, [r3, #0]
 80293c2:	2b00      	cmp	r3, #0
 80293c4:	dc03      	bgt.n	80293ce <mg_sntp_parse+0x96>
  int64_t epoch_milliseconds = -1;
 80293c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80293ca:	4601      	mov	r1, r0
 80293cc:	e7ca      	b.n	8029364 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "server sent a kiss of death"));
 80293ce:	4b2e      	ldr	r3, [pc, #184]	@ (8029488 <mg_sntp_parse+0x150>)
 80293d0:	f641 4212 	movw	r2, #7186	@ 0x1c12
 80293d4:	492d      	ldr	r1, [pc, #180]	@ (802948c <mg_sntp_parse+0x154>)
 80293d6:	2001      	movs	r0, #1
 80293d8:	f7fc fb56 	bl	8025a88 <mg_log_prefix>
 80293dc:	492f      	ldr	r1, [pc, #188]	@ (802949c <mg_sntp_parse+0x164>)
 80293de:	482d      	ldr	r0, [pc, #180]	@ (8029494 <mg_sntp_parse+0x15c>)
 80293e0:	f7fa fa3c 	bl	802385c <mg_log>
  int64_t epoch_milliseconds = -1;
 80293e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80293e8:	4601      	mov	r1, r0
 80293ea:	e7bb      	b.n	8029364 <mg_sntp_parse+0x2c>
  } else if (version == 4 || version == 3) {
 80293ec:	1eeb      	subs	r3, r5, #3
 80293ee:	2b01      	cmp	r3, #1
 80293f0:	d907      	bls.n	8029402 <mg_sntp_parse+0xca>
    MG_ERROR(("unexpected version: %d", version));
 80293f2:	4b24      	ldr	r3, [pc, #144]	@ (8029484 <mg_sntp_parse+0x14c>)
 80293f4:	681b      	ldr	r3, [r3, #0]
 80293f6:	2b00      	cmp	r3, #0
 80293f8:	dc35      	bgt.n	8029466 <mg_sntp_parse+0x12e>
  int64_t epoch_milliseconds = -1;
 80293fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80293fe:	4601      	mov	r1, r0
  return epoch_milliseconds;
 8029400:	e7b0      	b.n	8029364 <mg_sntp_parse+0x2c>
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 8029402:	f104 0018 	add.w	r0, r4, #24
 8029406:	f7fb ffff 	bl	8025408 <gettimestamp>
 802940a:	4606      	mov	r6, r0
 802940c:	468a      	mov	sl, r1
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 802940e:	f104 0020 	add.w	r0, r4, #32
 8029412:	f7fb fff9 	bl	8025408 <gettimestamp>
 8029416:	4680      	mov	r8, r0
 8029418:	4689      	mov	r9, r1
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 802941a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 802941e:	f7fb fff3 	bl	8025408 <gettimestamp>
 8029422:	4607      	mov	r7, r0
 8029424:	460c      	mov	r4, r1
    int64_t now = (int64_t) mg_millis();
 8029426:	f7fc fb2a 	bl	8025a7e <mg_millis>
 802942a:	4605      	mov	r5, r0
 802942c:	468c      	mov	ip, r1
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 802942e:	1b86      	subs	r6, r0, r6
 8029430:	eb61 020a 	sbc.w	r2, r1, sl
 8029434:	ebb7 0808 	subs.w	r8, r7, r8
 8029438:	eb64 0909 	sbc.w	r9, r4, r9
 802943c:	ebb6 0608 	subs.w	r6, r6, r8
 8029440:	eb62 0209 	sbc.w	r2, r2, r9
    epoch_milliseconds = transmit_time + latency / 2;
 8029444:	0fd3      	lsrs	r3, r2, #31
 8029446:	199b      	adds	r3, r3, r6
 8029448:	f142 0200 	adc.w	r2, r2, #0
 802944c:	085b      	lsrs	r3, r3, #1
 802944e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8029452:	19d8      	adds	r0, r3, r7
 8029454:	eb44 0162 	adc.w	r1, r4, r2, asr #1
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 8029458:	1b45      	subs	r5, r0, r5
 802945a:	eb61 030c 	sbc.w	r3, r1, ip
 802945e:	4a10      	ldr	r2, [pc, #64]	@ (80294a0 <mg_sntp_parse+0x168>)
 8029460:	6015      	str	r5, [r2, #0]
 8029462:	6053      	str	r3, [r2, #4]
 8029464:	e77e      	b.n	8029364 <mg_sntp_parse+0x2c>
    MG_ERROR(("unexpected version: %d", version));
 8029466:	4b08      	ldr	r3, [pc, #32]	@ (8029488 <mg_sntp_parse+0x150>)
 8029468:	f641 421d 	movw	r2, #7197	@ 0x1c1d
 802946c:	4907      	ldr	r1, [pc, #28]	@ (802948c <mg_sntp_parse+0x154>)
 802946e:	2001      	movs	r0, #1
 8029470:	f7fc fb0a 	bl	8025a88 <mg_log_prefix>
 8029474:	4629      	mov	r1, r5
 8029476:	480b      	ldr	r0, [pc, #44]	@ (80294a4 <mg_sntp_parse+0x16c>)
 8029478:	f7fa f9f0 	bl	802385c <mg_log>
  int64_t epoch_milliseconds = -1;
 802947c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029480:	4601      	mov	r1, r0
 8029482:	e76f      	b.n	8029364 <mg_sntp_parse+0x2c>
 8029484:	2000012c 	.word	0x2000012c
 8029488:	0803a920 	.word	0x0803a920
 802948c:	0803a050 	.word	0x0803a050
 8029490:	0803a818 	.word	0x0803a818
 8029494:	0803a368 	.word	0x0803a368
 8029498:	0803a828 	.word	0x0803a828
 802949c:	0803a83c 	.word	0x0803a83c
 80294a0:	20019ec0 	.word	0x20019ec0
 80294a4:	0803a858 	.word	0x0803a858

080294a8 <mg_sntp_request>:
void mg_sntp_request(struct mg_connection *c) {
 80294a8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80294ac:	b08c      	sub	sp, #48	@ 0x30
 80294ae:	4604      	mov	r4, r0
  if (c->is_resolving) {
 80294b0:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80294b4:	f013 0f08 	tst.w	r3, #8
 80294b8:	d012      	beq.n	80294e0 <mg_sntp_request+0x38>
    MG_ERROR(("%lu wait until resolved", c->id));
 80294ba:	4b2b      	ldr	r3, [pc, #172]	@ (8029568 <mg_sntp_request+0xc0>)
 80294bc:	681b      	ldr	r3, [r3, #0]
 80294be:	2b00      	cmp	r3, #0
 80294c0:	dc02      	bgt.n	80294c8 <mg_sntp_request+0x20>
}
 80294c2:	b00c      	add	sp, #48	@ 0x30
 80294c4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    MG_ERROR(("%lu wait until resolved", c->id));
 80294c8:	4b28      	ldr	r3, [pc, #160]	@ (802956c <mg_sntp_request+0xc4>)
 80294ca:	f641 423a 	movw	r2, #7226	@ 0x1c3a
 80294ce:	4928      	ldr	r1, [pc, #160]	@ (8029570 <mg_sntp_request+0xc8>)
 80294d0:	2001      	movs	r0, #1
 80294d2:	f7fc fad9 	bl	8025a88 <mg_log_prefix>
 80294d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80294d8:	4826      	ldr	r0, [pc, #152]	@ (8029574 <mg_sntp_request+0xcc>)
 80294da:	f7fa f9bf 	bl	802385c <mg_log>
 80294de:	e7f0      	b.n	80294c2 <mg_sntp_request+0x1a>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 80294e0:	f7fc facd 	bl	8025a7e <mg_millis>
 80294e4:	4606      	mov	r6, r0
 80294e6:	460d      	mov	r5, r1
    uint8_t buf[48] = {0};
 80294e8:	2100      	movs	r1, #0
 80294ea:	9100      	str	r1, [sp, #0]
 80294ec:	222c      	movs	r2, #44	@ 0x2c
 80294ee:	a801      	add	r0, sp, #4
 80294f0:	f002 fec6 	bl	802c280 <memset>
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 80294f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80294f8:	2300      	movs	r3, #0
 80294fa:	4630      	mov	r0, r6
 80294fc:	4629      	mov	r1, r5
 80294fe:	f7e7 fbdb 	bl	8010cb8 <__aeabi_ldivmod>
 8029502:	4610      	mov	r0, r2
 8029504:	4619      	mov	r1, r3
 8029506:	f7e7 f861 	bl	80105cc <__aeabi_l2d>
 802950a:	2200      	movs	r2, #0
 802950c:	4b1a      	ldr	r3, [pc, #104]	@ (8029578 <mg_sntp_request+0xd0>)
 802950e:	f7e7 f9b5 	bl	801087c <__aeabi_ddiv>
 8029512:	a313      	add	r3, pc, #76	@ (adr r3, 8029560 <mg_sntp_request+0xb8>)
 8029514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029518:	f7e7 f886 	bl	8010628 <__aeabi_dmul>
 802951c:	4680      	mov	r8, r0
 802951e:	4689      	mov	r9, r1
    buf[0] = (0 << 6) | (4 << 3) | 3;
 8029520:	2323      	movs	r3, #35	@ 0x23
 8029522:	f88d 3000 	strb.w	r3, [sp]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 8029526:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802952a:	2300      	movs	r3, #0
 802952c:	4630      	mov	r0, r6
 802952e:	4629      	mov	r1, r5
 8029530:	f7e7 fbc2 	bl	8010cb8 <__aeabi_ldivmod>
 8029534:	f100 4003 	add.w	r0, r0, #2197815296	@ 0x83000000
 8029538:	f500 002a 	add.w	r0, r0, #11141120	@ 0xaa0000
 802953c:	f500 40fd 	add.w	r0, r0, #32384	@ 0x7e80
 8029540:	f7fb ff04 	bl	802534c <mg_ntohl>
 8029544:	900a      	str	r0, [sp, #40]	@ 0x28
    t[1] = mg_htonl((uint32_t) frac);
 8029546:	4640      	mov	r0, r8
 8029548:	4649      	mov	r1, r9
 802954a:	f7e7 fb45 	bl	8010bd8 <__aeabi_d2uiz>
 802954e:	f7fb fefd 	bl	802534c <mg_ntohl>
 8029552:	900b      	str	r0, [sp, #44]	@ 0x2c
    mg_send(c, buf, sizeof(buf));
 8029554:	2230      	movs	r2, #48	@ 0x30
 8029556:	4669      	mov	r1, sp
 8029558:	4620      	mov	r0, r4
 802955a:	f7fd fb49 	bl	8026bf0 <mg_send>
}
 802955e:	e7b0      	b.n	80294c2 <mg_sntp_request+0x1a>
 8029560:	ffe00000 	.word	0xffe00000
 8029564:	41efffff 	.word	0x41efffff
 8029568:	2000012c 	.word	0x2000012c
 802956c:	0803a910 	.word	0x0803a910
 8029570:	0803a050 	.word	0x0803a050
 8029574:	0803a870 	.word	0x0803a870
 8029578:	408f4000 	.word	0x408f4000

0802957c <sntp_cb>:
static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 802957c:	b570      	push	{r4, r5, r6, lr}
 802957e:	b082      	sub	sp, #8
 8029580:	4604      	mov	r4, r0
  if (ev == MG_EV_OPEN) {
 8029582:	3901      	subs	r1, #1
 8029584:	2906      	cmp	r1, #6
 8029586:	d810      	bhi.n	80295aa <sntp_cb+0x2e>
 8029588:	e8df f001 	tbb	[pc, r1]
 802958c:	110f4604 	.word	0x110f4604
 8029590:	0f0f      	.short	0x0f0f
 8029592:	14          	.byte	0x14
 8029593:	00          	.byte	0x00
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 8029594:	f7fc fa73 	bl	8025a7e <mg_millis>
 8029598:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 802959c:	18c0      	adds	r0, r0, r3
 802959e:	f141 0100 	adc.w	r1, r1, #0
 80295a2:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 80295a6:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
}
 80295aa:	b002      	add	sp, #8
 80295ac:	bd70      	pop	{r4, r5, r6, pc}
    mg_sntp_request(c);
 80295ae:	f7ff ff7b 	bl	80294a8 <mg_sntp_request>
 80295b2:	e7fa      	b.n	80295aa <sntp_cb+0x2e>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 80295b4:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80295b6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80295b8:	f7ff febe 	bl	8029338 <mg_sntp_parse>
 80295bc:	4605      	mov	r5, r0
 80295be:	460e      	mov	r6, r1
 80295c0:	9000      	str	r0, [sp, #0]
 80295c2:	9101      	str	r1, [sp, #4]
    if (milliseconds > 0) {
 80295c4:	2801      	cmp	r0, #1
 80295c6:	f171 0300 	sbcs.w	r3, r1, #0
 80295ca:	da06      	bge.n	80295da <sntp_cb+0x5e>
    c->is_closing = 1;
 80295cc:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80295d0:	f043 0320 	orr.w	r3, r3, #32
 80295d4:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 80295d8:	e7e7      	b.n	80295aa <sntp_cb+0x2e>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 80295da:	f7fc fa50 	bl	8025a7e <mg_millis>
 80295de:	1a2d      	subs	r5, r5, r0
 80295e0:	eb66 0601 	sbc.w	r6, r6, r1
 80295e4:	4b14      	ldr	r3, [pc, #80]	@ (8029638 <sntp_cb+0xbc>)
 80295e6:	601d      	str	r5, [r3, #0]
 80295e8:	605e      	str	r6, [r3, #4]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 80295ea:	466a      	mov	r2, sp
 80295ec:	2112      	movs	r1, #18
 80295ee:	4620      	mov	r0, r4
 80295f0:	f7f8 feea 	bl	80223c8 <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 80295f4:	4b11      	ldr	r3, [pc, #68]	@ (802963c <sntp_cb+0xc0>)
 80295f6:	681b      	ldr	r3, [r3, #0]
 80295f8:	2b02      	cmp	r3, #2
 80295fa:	dde7      	ble.n	80295cc <sntp_cb+0x50>
 80295fc:	4b10      	ldr	r3, [pc, #64]	@ (8029640 <sntp_cb+0xc4>)
 80295fe:	f641 422d 	movw	r2, #7213	@ 0x1c2d
 8029602:	4910      	ldr	r1, [pc, #64]	@ (8029644 <sntp_cb+0xc8>)
 8029604:	2003      	movs	r0, #3
 8029606:	f7fc fa3f 	bl	8025a88 <mg_log_prefix>
 802960a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802960e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029610:	480d      	ldr	r0, [pc, #52]	@ (8029648 <sntp_cb+0xcc>)
 8029612:	f7fa f923 	bl	802385c <mg_log>
 8029616:	e7d9      	b.n	80295cc <sntp_cb+0x50>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 8029618:	f7fc fa31 	bl	8025a7e <mg_millis>
 802961c:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 8029620:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8029624:	4282      	cmp	r2, r0
 8029626:	418b      	sbcs	r3, r1
 8029628:	d2bf      	bcs.n	80295aa <sntp_cb+0x2e>
 802962a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802962e:	f043 0320 	orr.w	r3, r3, #32
 8029632:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8029636:	e7b8      	b.n	80295aa <sntp_cb+0x2e>
 8029638:	20019ec0 	.word	0x20019ec0
 802963c:	2000012c 	.word	0x2000012c
 8029640:	0803a908 	.word	0x0803a908
 8029644:	0803a050 	.word	0x0803a050
 8029648:	0803a888 	.word	0x0803a888

0802964c <mg_sntp_connect>:
                                      mg_event_handler_t fn, void *fnd) {
 802964c:	b538      	push	{r3, r4, r5, lr}
  if (url == NULL) url = "udp://time.google.com:123";
 802964e:	460d      	mov	r5, r1
 8029650:	b169      	cbz	r1, 802966e <mg_sntp_connect+0x22>
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 8029652:	4629      	mov	r1, r5
 8029654:	f7fe ffa0 	bl	8028598 <mg_connect>
 8029658:	4604      	mov	r4, r0
 802965a:	b130      	cbz	r0, 802966a <mg_sntp_connect+0x1e>
    c->pfn = sntp_cb;
 802965c:	4b05      	ldr	r3, [pc, #20]	@ (8029674 <mg_sntp_connect+0x28>)
 802965e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 8029662:	462a      	mov	r2, r5
 8029664:	2101      	movs	r1, #1
 8029666:	f7ff ff89 	bl	802957c <sntp_cb>
}
 802966a:	4620      	mov	r0, r4
 802966c:	bd38      	pop	{r3, r4, r5, pc}
  if (url == NULL) url = "udp://time.google.com:123";
 802966e:	4d02      	ldr	r5, [pc, #8]	@ (8029678 <mg_sntp_connect+0x2c>)
 8029670:	e7ef      	b.n	8029652 <mg_sntp_connect+0x6>
 8029672:	bf00      	nop
 8029674:	0802957d 	.word	0x0802957d
 8029678:	0803a8ac 	.word	0x0803a8ac

0802967c <has_mqtt_prefix>:
#include <ctype.h>

#define PREFIX "mqtt://"
#define MAX_PORT 65535

int has_mqtt_prefix(const char *url) {
 802967c:	b508      	push	{r3, lr}
    return strncmp(url, PREFIX, strlen(PREFIX)) == 0;
 802967e:	2207      	movs	r2, #7
 8029680:	4903      	ldr	r1, [pc, #12]	@ (8029690 <has_mqtt_prefix+0x14>)
 8029682:	f002 fe32 	bl	802c2ea <strncmp>
}
 8029686:	fab0 f080 	clz	r0, r0
 802968a:	0940      	lsrs	r0, r0, #5
 802968c:	bd08      	pop	{r3, pc}
 802968e:	bf00      	nop
 8029690:	0803af28 	.word	0x0803af28

08029694 <is_valid_ip_or_domain>:

int is_valid_ip_or_domain(const char *host) {
 8029694:	b570      	push	{r4, r5, r6, lr}
 8029696:	4604      	mov	r4, r0
    int dot_count = 0;
    int is_ip_format = 1;

    // Проверка, является ли это IP-адресом
    for (int i = 0; host[i] != '\0'; i++) {
 8029698:	2200      	movs	r2, #0
    int dot_count = 0;
 802969a:	4610      	mov	r0, r2
    for (int i = 0; host[i] != '\0'; i++) {
 802969c:	e001      	b.n	80296a2 <is_valid_ip_or_domain+0xe>
        if (host[i] == '.') {
            dot_count++;
 802969e:	3001      	adds	r0, #1
    for (int i = 0; host[i] != '\0'; i++) {
 80296a0:	3201      	adds	r2, #1
 80296a2:	5ca3      	ldrb	r3, [r4, r2]
 80296a4:	b143      	cbz	r3, 80296b8 <is_valid_ip_or_domain+0x24>
        if (host[i] == '.') {
 80296a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80296a8:	d0f9      	beq.n	802969e <is_valid_ip_or_domain+0xa>
        } else if (!isdigit(host[i])) {
 80296aa:	491d      	ldr	r1, [pc, #116]	@ (8029720 <is_valid_ip_or_domain+0x8c>)
 80296ac:	5ccb      	ldrb	r3, [r1, r3]
 80296ae:	f013 0f04 	tst.w	r3, #4
 80296b2:	d1f5      	bne.n	80296a0 <is_valid_ip_or_domain+0xc>
            is_ip_format = 0;
 80296b4:	2500      	movs	r5, #0
 80296b6:	e000      	b.n	80296ba <is_valid_ip_or_domain+0x26>
    int is_ip_format = 1;
 80296b8:	2501      	movs	r5, #1
            break;
        }
    }

    // Если это может быть IP-адрес
    if (is_ip_format && dot_count == 3) {
 80296ba:	b335      	cbz	r5, 802970a <is_valid_ip_or_domain+0x76>
 80296bc:	2803      	cmp	r0, #3
 80296be:	d013      	beq.n	80296e8 <is_valid_ip_or_domain+0x54>
 80296c0:	2200      	movs	r2, #0
 80296c2:	4615      	mov	r5, r2
 80296c4:	e014      	b.n	80296f0 <is_valid_ip_or_domain+0x5c>
        int octet;
        const char *ptr = host;

        for (int i = 0; i < 4; i++) {
 80296c6:	3601      	adds	r6, #1
 80296c8:	2e03      	cmp	r6, #3
 80296ca:	dc24      	bgt.n	8029716 <is_valid_ip_or_domain+0x82>
            octet = atoi(ptr);
 80296cc:	4620      	mov	r0, r4
 80296ce:	f000 f8a3 	bl	8029818 <atoi>
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 80296d2:	28ff      	cmp	r0, #255	@ 0xff
 80296d4:	d821      	bhi.n	802971a <is_valid_ip_or_domain+0x86>

            // Переход к следующему октету
            ptr = strchr(ptr, '.');
 80296d6:	212e      	movs	r1, #46	@ 0x2e
 80296d8:	4620      	mov	r0, r4
 80296da:	f002 fde8 	bl	802c2ae <strchr>
            if (ptr != NULL) ptr++;
 80296de:	4604      	mov	r4, r0
 80296e0:	2800      	cmp	r0, #0
 80296e2:	d0f0      	beq.n	80296c6 <is_valid_ip_or_domain+0x32>
 80296e4:	3401      	adds	r4, #1
 80296e6:	e7ee      	b.n	80296c6 <is_valid_ip_or_domain+0x32>
        for (int i = 0; i < 4; i++) {
 80296e8:	2600      	movs	r6, #0
 80296ea:	e7ed      	b.n	80296c8 <is_valid_ip_or_domain+0x34>

    // Проверка на корректность доменного имени (буквы, цифры, точки и дефисы)
    dot_count = 0;
    for (int i = 0; host[i] != '\0'; i++) {
        if (host[i] == '.') {
            dot_count++;
 80296ec:	3501      	adds	r5, #1
    for (int i = 0; host[i] != '\0'; i++) {
 80296ee:	3201      	adds	r2, #1
 80296f0:	5ca3      	ldrb	r3, [r4, r2]
 80296f2:	b163      	cbz	r3, 802970e <is_valid_ip_or_domain+0x7a>
        if (host[i] == '.') {
 80296f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80296f6:	d0f9      	beq.n	80296ec <is_valid_ip_or_domain+0x58>
        } else if (!isalnum(host[i]) && host[i] != '-') {
 80296f8:	4909      	ldr	r1, [pc, #36]	@ (8029720 <is_valid_ip_or_domain+0x8c>)
 80296fa:	5cc9      	ldrb	r1, [r1, r3]
 80296fc:	f011 0f07 	tst.w	r1, #7
 8029700:	d1f5      	bne.n	80296ee <is_valid_ip_or_domain+0x5a>
 8029702:	2b2d      	cmp	r3, #45	@ 0x2d
 8029704:	d0f3      	beq.n	80296ee <is_valid_ip_or_domain+0x5a>
            return 0;  // Некорректный символ для доменного имени
 8029706:	2500      	movs	r5, #0
 8029708:	e005      	b.n	8029716 <is_valid_ip_or_domain+0x82>
 802970a:	462a      	mov	r2, r5
 802970c:	e7f0      	b.n	80296f0 <is_valid_ip_or_domain+0x5c>
        }
    }
    return dot_count > 0; // Доменное имя должно содержать хотя бы одну точку
 802970e:	2d00      	cmp	r5, #0
 8029710:	bfd4      	ite	le
 8029712:	2500      	movle	r5, #0
 8029714:	2501      	movgt	r5, #1
}
 8029716:	4628      	mov	r0, r5
 8029718:	bd70      	pop	{r4, r5, r6, pc}
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 802971a:	2500      	movs	r5, #0
 802971c:	e7fb      	b.n	8029716 <is_valid_ip_or_domain+0x82>
 802971e:	bf00      	nop
 8029720:	0803b3c9 	.word	0x0803b3c9

08029724 <is_valid_port>:

int is_valid_port(const char *port_str) {
 8029724:	b510      	push	{r4, lr}
 8029726:	4604      	mov	r4, r0
    int port = atoi(port_str);
 8029728:	f000 f876 	bl	8029818 <atoi>
    if (port < 1 || port > MAX_PORT) {
 802972c:	3801      	subs	r0, #1
 802972e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8029732:	4298      	cmp	r0, r3
 8029734:	d80a      	bhi.n	802974c <is_valid_port+0x28>
        return 0; // Порт вне диапазона
    }
    // Проверить, что порт состоит только из цифр
    while (*port_str) {
 8029736:	7823      	ldrb	r3, [r4, #0]
 8029738:	b133      	cbz	r3, 8029748 <is_valid_port+0x24>
        if (!isdigit(*port_str)) {
 802973a:	4a06      	ldr	r2, [pc, #24]	@ (8029754 <is_valid_port+0x30>)
 802973c:	5cd3      	ldrb	r3, [r2, r3]
 802973e:	f013 0f04 	tst.w	r3, #4
 8029742:	d005      	beq.n	8029750 <is_valid_port+0x2c>
            return 0;
        }
        port_str++;
 8029744:	3401      	adds	r4, #1
 8029746:	e7f6      	b.n	8029736 <is_valid_port+0x12>
    }
    return 1;
 8029748:	2001      	movs	r0, #1
 802974a:	e000      	b.n	802974e <is_valid_port+0x2a>
        return 0; // Порт вне диапазона
 802974c:	2000      	movs	r0, #0
}
 802974e:	bd10      	pop	{r4, pc}
            return 0;
 8029750:	2000      	movs	r0, #0
 8029752:	e7fc      	b.n	802974e <is_valid_port+0x2a>
 8029754:	0803b3c9 	.word	0x0803b3c9

08029758 <is_valid_mqtt_url>:

int is_valid_mqtt_url(const char *url) {
 8029758:	b570      	push	{r4, r5, r6, lr}
 802975a:	b0c0      	sub	sp, #256	@ 0x100
 802975c:	4604      	mov	r4, r0
    if (!has_mqtt_prefix(url)) {
 802975e:	f7ff ff8d 	bl	802967c <has_mqtt_prefix>
 8029762:	b1d0      	cbz	r0, 802979a <is_valid_mqtt_url+0x42>
        printf("Error: URL does not start with 'mqtt://'\n");
        return -1;
    }

    // Найти первый символ после "mqtt://"
    const char *host_start = url + strlen(PREFIX);
 8029764:	3407      	adds	r4, #7
    const char *colon = strchr(host_start, ':');
 8029766:	213a      	movs	r1, #58	@ 0x3a
 8029768:	4620      	mov	r0, r4
 802976a:	f002 fda0 	bl	802c2ae <strchr>
    if (!colon) {
 802976e:	4606      	mov	r6, r0
 8029770:	b1c8      	cbz	r0, 80297a6 <is_valid_mqtt_url+0x4e>
        return -2;
    }

    // Извлечь доменное имя или IP-адрес
    char host[256];
    strncpy(host, host_start, colon - host_start);
 8029772:	1b05      	subs	r5, r0, r4
 8029774:	462a      	mov	r2, r5
 8029776:	4621      	mov	r1, r4
 8029778:	4668      	mov	r0, sp
 802977a:	f002 fdc8 	bl	802c30e <strncpy>
    host[colon - host_start] = '\0';
 802977e:	2300      	movs	r3, #0
 8029780:	f80d 3005 	strb.w	r3, [sp, r5]

    if (!is_valid_ip_or_domain(host)) {
 8029784:	4668      	mov	r0, sp
 8029786:	f7ff ff85 	bl	8029694 <is_valid_ip_or_domain>
 802978a:	b190      	cbz	r0, 80297b2 <is_valid_mqtt_url+0x5a>
        return -3;
    }

    // Проверить порт
    const char *port_str = colon + 1;
    if (!is_valid_port(port_str)) {
 802978c:	1c70      	adds	r0, r6, #1
 802978e:	f7ff ffc9 	bl	8029724 <is_valid_port>
 8029792:	b1a0      	cbz	r0, 80297be <is_valid_mqtt_url+0x66>
        printf("Error: Invalid port number\n");
        return -4;
    }

    return 0; // URL прошел все проверки
 8029794:	2000      	movs	r0, #0
}
 8029796:	b040      	add	sp, #256	@ 0x100
 8029798:	bd70      	pop	{r4, r5, r6, pc}
        printf("Error: URL does not start with 'mqtt://'\n");
 802979a:	480c      	ldr	r0, [pc, #48]	@ (80297cc <is_valid_mqtt_url+0x74>)
 802979c:	f002 f818 	bl	802b7d0 <puts>
        return -1;
 80297a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80297a4:	e7f7      	b.n	8029796 <is_valid_mqtt_url+0x3e>
        printf("Error: URL does not contain a port separator ':'\n");
 80297a6:	480a      	ldr	r0, [pc, #40]	@ (80297d0 <is_valid_mqtt_url+0x78>)
 80297a8:	f002 f812 	bl	802b7d0 <puts>
        return -2;
 80297ac:	f06f 0001 	mvn.w	r0, #1
 80297b0:	e7f1      	b.n	8029796 <is_valid_mqtt_url+0x3e>
        printf("Error: Invalid domain or IP address\n");
 80297b2:	4808      	ldr	r0, [pc, #32]	@ (80297d4 <is_valid_mqtt_url+0x7c>)
 80297b4:	f002 f80c 	bl	802b7d0 <puts>
        return -3;
 80297b8:	f06f 0002 	mvn.w	r0, #2
 80297bc:	e7eb      	b.n	8029796 <is_valid_mqtt_url+0x3e>
        printf("Error: Invalid port number\n");
 80297be:	4806      	ldr	r0, [pc, #24]	@ (80297d8 <is_valid_mqtt_url+0x80>)
 80297c0:	f002 f806 	bl	802b7d0 <puts>
        return -4;
 80297c4:	f06f 0003 	mvn.w	r0, #3
 80297c8:	e7e5      	b.n	8029796 <is_valid_mqtt_url+0x3e>
 80297ca:	bf00      	nop
 80297cc:	0803af30 	.word	0x0803af30
 80297d0:	0803af5c 	.word	0x0803af5c
 80297d4:	0803af90 	.word	0x0803af90
 80297d8:	0803afb4 	.word	0x0803afb4

080297dc <__assert_func>:
 80297dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80297de:	4614      	mov	r4, r2
 80297e0:	461a      	mov	r2, r3
 80297e2:	4b09      	ldr	r3, [pc, #36]	@ (8029808 <__assert_func+0x2c>)
 80297e4:	681b      	ldr	r3, [r3, #0]
 80297e6:	4605      	mov	r5, r0
 80297e8:	68d8      	ldr	r0, [r3, #12]
 80297ea:	b954      	cbnz	r4, 8029802 <__assert_func+0x26>
 80297ec:	4b07      	ldr	r3, [pc, #28]	@ (802980c <__assert_func+0x30>)
 80297ee:	461c      	mov	r4, r3
 80297f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80297f4:	9100      	str	r1, [sp, #0]
 80297f6:	462b      	mov	r3, r5
 80297f8:	4905      	ldr	r1, [pc, #20]	@ (8029810 <__assert_func+0x34>)
 80297fa:	f000 f811 	bl	8029820 <fiprintf>
 80297fe:	f003 ffdf 	bl	802d7c0 <abort>
 8029802:	4b04      	ldr	r3, [pc, #16]	@ (8029814 <__assert_func+0x38>)
 8029804:	e7f4      	b.n	80297f0 <__assert_func+0x14>
 8029806:	bf00      	nop
 8029808:	200002d8 	.word	0x200002d8
 802980c:	0803b00a 	.word	0x0803b00a
 8029810:	0803afdc 	.word	0x0803afdc
 8029814:	0803afcf 	.word	0x0803afcf

08029818 <atoi>:
 8029818:	220a      	movs	r2, #10
 802981a:	2100      	movs	r1, #0
 802981c:	f002 b8b6 	b.w	802b98c <strtol>

08029820 <fiprintf>:
 8029820:	b40e      	push	{r1, r2, r3}
 8029822:	b503      	push	{r0, r1, lr}
 8029824:	4601      	mov	r1, r0
 8029826:	ab03      	add	r3, sp, #12
 8029828:	4805      	ldr	r0, [pc, #20]	@ (8029840 <fiprintf+0x20>)
 802982a:	f853 2b04 	ldr.w	r2, [r3], #4
 802982e:	6800      	ldr	r0, [r0, #0]
 8029830:	9301      	str	r3, [sp, #4]
 8029832:	f001 fab7 	bl	802ada4 <_vfiprintf_r>
 8029836:	b002      	add	sp, #8
 8029838:	f85d eb04 	ldr.w	lr, [sp], #4
 802983c:	b003      	add	sp, #12
 802983e:	4770      	bx	lr
 8029840:	200002d8 	.word	0x200002d8

08029844 <printf>:
 8029844:	b40f      	push	{r0, r1, r2, r3}
 8029846:	b507      	push	{r0, r1, r2, lr}
 8029848:	4906      	ldr	r1, [pc, #24]	@ (8029864 <printf+0x20>)
 802984a:	ab04      	add	r3, sp, #16
 802984c:	6808      	ldr	r0, [r1, #0]
 802984e:	f853 2b04 	ldr.w	r2, [r3], #4
 8029852:	6881      	ldr	r1, [r0, #8]
 8029854:	9301      	str	r3, [sp, #4]
 8029856:	f000 f807 	bl	8029868 <_vfprintf_r>
 802985a:	b003      	add	sp, #12
 802985c:	f85d eb04 	ldr.w	lr, [sp], #4
 8029860:	b004      	add	sp, #16
 8029862:	4770      	bx	lr
 8029864:	200002d8 	.word	0x200002d8

08029868 <_vfprintf_r>:
 8029868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802986c:	b0d3      	sub	sp, #332	@ 0x14c
 802986e:	468b      	mov	fp, r1
 8029870:	4690      	mov	r8, r2
 8029872:	461c      	mov	r4, r3
 8029874:	461e      	mov	r6, r3
 8029876:	9003      	str	r0, [sp, #12]
 8029878:	f003 fe90 	bl	802d59c <_localeconv_r>
 802987c:	6803      	ldr	r3, [r0, #0]
 802987e:	9316      	str	r3, [sp, #88]	@ 0x58
 8029880:	4618      	mov	r0, r3
 8029882:	f7e6 fd0d 	bl	80102a0 <strlen>
 8029886:	9b03      	ldr	r3, [sp, #12]
 8029888:	900d      	str	r0, [sp, #52]	@ 0x34
 802988a:	b123      	cbz	r3, 8029896 <_vfprintf_r+0x2e>
 802988c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802988e:	b913      	cbnz	r3, 8029896 <_vfprintf_r+0x2e>
 8029890:	9803      	ldr	r0, [sp, #12]
 8029892:	f002 fa4f 	bl	802bd34 <__sinit>
 8029896:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802989a:	07da      	lsls	r2, r3, #31
 802989c:	d407      	bmi.n	80298ae <_vfprintf_r+0x46>
 802989e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80298a2:	059b      	lsls	r3, r3, #22
 80298a4:	d403      	bmi.n	80298ae <_vfprintf_r+0x46>
 80298a6:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80298aa:	f003 ff22 	bl	802d6f2 <__retarget_lock_acquire_recursive>
 80298ae:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 80298b2:	049f      	lsls	r7, r3, #18
 80298b4:	d409      	bmi.n	80298ca <_vfprintf_r+0x62>
 80298b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80298ba:	f8ab 300c 	strh.w	r3, [fp, #12]
 80298be:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80298c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80298c6:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 80298ca:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80298ce:	071d      	lsls	r5, r3, #28
 80298d0:	d502      	bpl.n	80298d8 <_vfprintf_r+0x70>
 80298d2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80298d6:	b9c3      	cbnz	r3, 802990a <_vfprintf_r+0xa2>
 80298d8:	9803      	ldr	r0, [sp, #12]
 80298da:	4659      	mov	r1, fp
 80298dc:	f002 fbe6 	bl	802c0ac <__swsetup_r>
 80298e0:	b198      	cbz	r0, 802990a <_vfprintf_r+0xa2>
 80298e2:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80298e6:	07d8      	lsls	r0, r3, #31
 80298e8:	d506      	bpl.n	80298f8 <_vfprintf_r+0x90>
 80298ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80298ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80298f0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80298f2:	b053      	add	sp, #332	@ 0x14c
 80298f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80298f8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80298fc:	0599      	lsls	r1, r3, #22
 80298fe:	d4f4      	bmi.n	80298ea <_vfprintf_r+0x82>
 8029900:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8029904:	f003 fef7 	bl	802d6f6 <__retarget_lock_release_recursive>
 8029908:	e7ef      	b.n	80298ea <_vfprintf_r+0x82>
 802990a:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 802990e:	f003 021a 	and.w	r2, r3, #26
 8029912:	2a0a      	cmp	r2, #10
 8029914:	d116      	bne.n	8029944 <_vfprintf_r+0xdc>
 8029916:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 802991a:	2a00      	cmp	r2, #0
 802991c:	db12      	blt.n	8029944 <_vfprintf_r+0xdc>
 802991e:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 8029922:	07d2      	lsls	r2, r2, #31
 8029924:	d405      	bmi.n	8029932 <_vfprintf_r+0xca>
 8029926:	059b      	lsls	r3, r3, #22
 8029928:	d403      	bmi.n	8029932 <_vfprintf_r+0xca>
 802992a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802992e:	f003 fee2 	bl	802d6f6 <__retarget_lock_release_recursive>
 8029932:	9803      	ldr	r0, [sp, #12]
 8029934:	4623      	mov	r3, r4
 8029936:	4642      	mov	r2, r8
 8029938:	4659      	mov	r1, fp
 802993a:	b053      	add	sp, #332	@ 0x14c
 802993c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029940:	f001 b9be 	b.w	802acc0 <__sbprintf>
 8029944:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 8029b90 <_vfprintf_r+0x328>
 8029948:	2300      	movs	r3, #0
 802994a:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 802994e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8029952:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8029956:	ac29      	add	r4, sp, #164	@ 0xa4
 8029958:	9426      	str	r4, [sp, #152]	@ 0x98
 802995a:	9304      	str	r3, [sp, #16]
 802995c:	9309      	str	r3, [sp, #36]	@ 0x24
 802995e:	9312      	str	r3, [sp, #72]	@ 0x48
 8029960:	9317      	str	r3, [sp, #92]	@ 0x5c
 8029962:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029964:	4643      	mov	r3, r8
 8029966:	461d      	mov	r5, r3
 8029968:	f813 2b01 	ldrb.w	r2, [r3], #1
 802996c:	b10a      	cbz	r2, 8029972 <_vfprintf_r+0x10a>
 802996e:	2a25      	cmp	r2, #37	@ 0x25
 8029970:	d1f9      	bne.n	8029966 <_vfprintf_r+0xfe>
 8029972:	ebb5 0708 	subs.w	r7, r5, r8
 8029976:	d00d      	beq.n	8029994 <_vfprintf_r+0x12c>
 8029978:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802997a:	443b      	add	r3, r7
 802997c:	9328      	str	r3, [sp, #160]	@ 0xa0
 802997e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8029980:	3301      	adds	r3, #1
 8029982:	2b07      	cmp	r3, #7
 8029984:	e9c4 8700 	strd	r8, r7, [r4]
 8029988:	9327      	str	r3, [sp, #156]	@ 0x9c
 802998a:	dc75      	bgt.n	8029a78 <_vfprintf_r+0x210>
 802998c:	3408      	adds	r4, #8
 802998e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8029990:	443b      	add	r3, r7
 8029992:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029994:	782b      	ldrb	r3, [r5, #0]
 8029996:	2b00      	cmp	r3, #0
 8029998:	f001 814f 	beq.w	802ac3a <_vfprintf_r+0x13d2>
 802999c:	2200      	movs	r2, #0
 802999e:	1c6b      	adds	r3, r5, #1
 80299a0:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 80299a4:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 80299a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80299aa:	4615      	mov	r5, r2
 80299ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80299b0:	9206      	str	r2, [sp, #24]
 80299b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80299b4:	9b06      	ldr	r3, [sp, #24]
 80299b6:	3b20      	subs	r3, #32
 80299b8:	2b5a      	cmp	r3, #90	@ 0x5a
 80299ba:	f200 85aa 	bhi.w	802a512 <_vfprintf_r+0xcaa>
 80299be:	e8df f013 	tbh	[pc, r3, lsl #1]
 80299c2:	009d      	.short	0x009d
 80299c4:	05a805a8 	.word	0x05a805a8
 80299c8:	05a800a5 	.word	0x05a800a5
 80299cc:	05a805a8 	.word	0x05a805a8
 80299d0:	05a80085 	.word	0x05a80085
 80299d4:	00a805a8 	.word	0x00a805a8
 80299d8:	05a800b2 	.word	0x05a800b2
 80299dc:	00b400af 	.word	0x00b400af
 80299e0:	00ce05a8 	.word	0x00ce05a8
 80299e4:	00d100d1 	.word	0x00d100d1
 80299e8:	00d100d1 	.word	0x00d100d1
 80299ec:	00d100d1 	.word	0x00d100d1
 80299f0:	00d100d1 	.word	0x00d100d1
 80299f4:	05a800d1 	.word	0x05a800d1
 80299f8:	05a805a8 	.word	0x05a805a8
 80299fc:	05a805a8 	.word	0x05a805a8
 8029a00:	05a805a8 	.word	0x05a805a8
 8029a04:	05a80146 	.word	0x05a80146
 8029a08:	011a0107 	.word	0x011a0107
 8029a0c:	01460146 	.word	0x01460146
 8029a10:	05a80146 	.word	0x05a80146
 8029a14:	05a805a8 	.word	0x05a805a8
 8029a18:	00e205a8 	.word	0x00e205a8
 8029a1c:	05a805a8 	.word	0x05a805a8
 8029a20:	05a804a3 	.word	0x05a804a3
 8029a24:	05a805a8 	.word	0x05a805a8
 8029a28:	05a804ed 	.word	0x05a804ed
 8029a2c:	05a8050e 	.word	0x05a8050e
 8029a30:	053005a8 	.word	0x053005a8
 8029a34:	05a805a8 	.word	0x05a805a8
 8029a38:	05a805a8 	.word	0x05a805a8
 8029a3c:	05a805a8 	.word	0x05a805a8
 8029a40:	05a805a8 	.word	0x05a805a8
 8029a44:	05a80146 	.word	0x05a80146
 8029a48:	011c0107 	.word	0x011c0107
 8029a4c:	01460146 	.word	0x01460146
 8029a50:	00ed0146 	.word	0x00ed0146
 8029a54:	0101011c 	.word	0x0101011c
 8029a58:	00fa05a8 	.word	0x00fa05a8
 8029a5c:	048705a8 	.word	0x048705a8
 8029a60:	04dc04a5 	.word	0x04dc04a5
 8029a64:	05a80101 	.word	0x05a80101
 8029a68:	009b04ed 	.word	0x009b04ed
 8029a6c:	05a80510 	.word	0x05a80510
 8029a70:	006505a8 	.word	0x006505a8
 8029a74:	009b05a8 	.word	0x009b05a8
 8029a78:	9803      	ldr	r0, [sp, #12]
 8029a7a:	aa26      	add	r2, sp, #152	@ 0x98
 8029a7c:	4659      	mov	r1, fp
 8029a7e:	f001 f95f 	bl	802ad40 <__sprint_r>
 8029a82:	2800      	cmp	r0, #0
 8029a84:	f040 814d 	bne.w	8029d22 <_vfprintf_r+0x4ba>
 8029a88:	ac29      	add	r4, sp, #164	@ 0xa4
 8029a8a:	e780      	b.n	802998e <_vfprintf_r+0x126>
 8029a8c:	4b42      	ldr	r3, [pc, #264]	@ (8029b98 <_vfprintf_r+0x330>)
 8029a8e:	9319      	str	r3, [sp, #100]	@ 0x64
 8029a90:	f015 0320 	ands.w	r3, r5, #32
 8029a94:	f000 84c8 	beq.w	802a428 <_vfprintf_r+0xbc0>
 8029a98:	3607      	adds	r6, #7
 8029a9a:	f026 0307 	bic.w	r3, r6, #7
 8029a9e:	461a      	mov	r2, r3
 8029aa0:	685f      	ldr	r7, [r3, #4]
 8029aa2:	f852 6b08 	ldr.w	r6, [r2], #8
 8029aa6:	9207      	str	r2, [sp, #28]
 8029aa8:	07eb      	lsls	r3, r5, #31
 8029aaa:	d50a      	bpl.n	8029ac2 <_vfprintf_r+0x25a>
 8029aac:	ea56 0307 	orrs.w	r3, r6, r7
 8029ab0:	d007      	beq.n	8029ac2 <_vfprintf_r+0x25a>
 8029ab2:	2330      	movs	r3, #48	@ 0x30
 8029ab4:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8029ab8:	9b06      	ldr	r3, [sp, #24]
 8029aba:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8029abe:	f045 0502 	orr.w	r5, r5, #2
 8029ac2:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8029ac6:	2302      	movs	r3, #2
 8029ac8:	f000 bc2e 	b.w	802a328 <_vfprintf_r+0xac0>
 8029acc:	9803      	ldr	r0, [sp, #12]
 8029ace:	f003 fd65 	bl	802d59c <_localeconv_r>
 8029ad2:	6843      	ldr	r3, [r0, #4]
 8029ad4:	9317      	str	r3, [sp, #92]	@ 0x5c
 8029ad6:	4618      	mov	r0, r3
 8029ad8:	f7e6 fbe2 	bl	80102a0 <strlen>
 8029adc:	9012      	str	r0, [sp, #72]	@ 0x48
 8029ade:	9803      	ldr	r0, [sp, #12]
 8029ae0:	f003 fd5c 	bl	802d59c <_localeconv_r>
 8029ae4:	6883      	ldr	r3, [r0, #8]
 8029ae6:	9309      	str	r3, [sp, #36]	@ 0x24
 8029ae8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8029aea:	b12b      	cbz	r3, 8029af8 <_vfprintf_r+0x290>
 8029aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029aee:	b11b      	cbz	r3, 8029af8 <_vfprintf_r+0x290>
 8029af0:	781b      	ldrb	r3, [r3, #0]
 8029af2:	b10b      	cbz	r3, 8029af8 <_vfprintf_r+0x290>
 8029af4:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8029af8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029afa:	e757      	b.n	80299ac <_vfprintf_r+0x144>
 8029afc:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8029b00:	2b00      	cmp	r3, #0
 8029b02:	d1f9      	bne.n	8029af8 <_vfprintf_r+0x290>
 8029b04:	2320      	movs	r3, #32
 8029b06:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8029b0a:	e7f5      	b.n	8029af8 <_vfprintf_r+0x290>
 8029b0c:	f045 0501 	orr.w	r5, r5, #1
 8029b10:	e7f2      	b.n	8029af8 <_vfprintf_r+0x290>
 8029b12:	f856 3b04 	ldr.w	r3, [r6], #4
 8029b16:	930e      	str	r3, [sp, #56]	@ 0x38
 8029b18:	2b00      	cmp	r3, #0
 8029b1a:	daed      	bge.n	8029af8 <_vfprintf_r+0x290>
 8029b1c:	425b      	negs	r3, r3
 8029b1e:	930e      	str	r3, [sp, #56]	@ 0x38
 8029b20:	f045 0504 	orr.w	r5, r5, #4
 8029b24:	e7e8      	b.n	8029af8 <_vfprintf_r+0x290>
 8029b26:	232b      	movs	r3, #43	@ 0x2b
 8029b28:	e7ed      	b.n	8029b06 <_vfprintf_r+0x29e>
 8029b2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029b30:	9206      	str	r2, [sp, #24]
 8029b32:	2a2a      	cmp	r2, #42	@ 0x2a
 8029b34:	d10f      	bne.n	8029b56 <_vfprintf_r+0x2ee>
 8029b36:	f856 2b04 	ldr.w	r2, [r6], #4
 8029b3a:	930c      	str	r3, [sp, #48]	@ 0x30
 8029b3c:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 8029b40:	e7da      	b.n	8029af8 <_vfprintf_r+0x290>
 8029b42:	fb01 2909 	mla	r9, r1, r9, r2
 8029b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029b4a:	9206      	str	r2, [sp, #24]
 8029b4c:	9a06      	ldr	r2, [sp, #24]
 8029b4e:	3a30      	subs	r2, #48	@ 0x30
 8029b50:	2a09      	cmp	r2, #9
 8029b52:	d9f6      	bls.n	8029b42 <_vfprintf_r+0x2da>
 8029b54:	e72d      	b.n	80299b2 <_vfprintf_r+0x14a>
 8029b56:	f04f 0900 	mov.w	r9, #0
 8029b5a:	210a      	movs	r1, #10
 8029b5c:	e7f6      	b.n	8029b4c <_vfprintf_r+0x2e4>
 8029b5e:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8029b62:	e7c9      	b.n	8029af8 <_vfprintf_r+0x290>
 8029b64:	2200      	movs	r2, #0
 8029b66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029b68:	920e      	str	r2, [sp, #56]	@ 0x38
 8029b6a:	210a      	movs	r1, #10
 8029b6c:	9a06      	ldr	r2, [sp, #24]
 8029b6e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8029b70:	3a30      	subs	r2, #48	@ 0x30
 8029b72:	fb01 2200 	mla	r2, r1, r0, r2
 8029b76:	920e      	str	r2, [sp, #56]	@ 0x38
 8029b78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029b7c:	9206      	str	r2, [sp, #24]
 8029b7e:	3a30      	subs	r2, #48	@ 0x30
 8029b80:	2a09      	cmp	r2, #9
 8029b82:	d9f3      	bls.n	8029b6c <_vfprintf_r+0x304>
 8029b84:	e715      	b.n	80299b2 <_vfprintf_r+0x14a>
 8029b86:	f045 0508 	orr.w	r5, r5, #8
 8029b8a:	e7b5      	b.n	8029af8 <_vfprintf_r+0x290>
 8029b8c:	f3af 8000 	nop.w
	...
 8029b98:	0803b01b 	.word	0x0803b01b
 8029b9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029b9e:	781b      	ldrb	r3, [r3, #0]
 8029ba0:	2b68      	cmp	r3, #104	@ 0x68
 8029ba2:	bf01      	itttt	eq
 8029ba4:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8029ba6:	3301      	addeq	r3, #1
 8029ba8:	930c      	streq	r3, [sp, #48]	@ 0x30
 8029baa:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 8029bae:	bf18      	it	ne
 8029bb0:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8029bb4:	e7a0      	b.n	8029af8 <_vfprintf_r+0x290>
 8029bb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029bb8:	781b      	ldrb	r3, [r3, #0]
 8029bba:	2b6c      	cmp	r3, #108	@ 0x6c
 8029bbc:	d105      	bne.n	8029bca <_vfprintf_r+0x362>
 8029bbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029bc0:	3301      	adds	r3, #1
 8029bc2:	930c      	str	r3, [sp, #48]	@ 0x30
 8029bc4:	f045 0520 	orr.w	r5, r5, #32
 8029bc8:	e796      	b.n	8029af8 <_vfprintf_r+0x290>
 8029bca:	f045 0510 	orr.w	r5, r5, #16
 8029bce:	e793      	b.n	8029af8 <_vfprintf_r+0x290>
 8029bd0:	4632      	mov	r2, r6
 8029bd2:	f852 3b04 	ldr.w	r3, [r2], #4
 8029bd6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8029bda:	2300      	movs	r3, #0
 8029bdc:	9207      	str	r2, [sp, #28]
 8029bde:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8029be2:	469a      	mov	sl, r3
 8029be4:	f04f 0901 	mov.w	r9, #1
 8029be8:	9310      	str	r3, [sp, #64]	@ 0x40
 8029bea:	461f      	mov	r7, r3
 8029bec:	9308      	str	r3, [sp, #32]
 8029bee:	461e      	mov	r6, r3
 8029bf0:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8029bf4:	e1da      	b.n	8029fac <_vfprintf_r+0x744>
 8029bf6:	f045 0510 	orr.w	r5, r5, #16
 8029bfa:	06af      	lsls	r7, r5, #26
 8029bfc:	d512      	bpl.n	8029c24 <_vfprintf_r+0x3bc>
 8029bfe:	3607      	adds	r6, #7
 8029c00:	f026 0307 	bic.w	r3, r6, #7
 8029c04:	461a      	mov	r2, r3
 8029c06:	685f      	ldr	r7, [r3, #4]
 8029c08:	f852 6b08 	ldr.w	r6, [r2], #8
 8029c0c:	9207      	str	r2, [sp, #28]
 8029c0e:	2f00      	cmp	r7, #0
 8029c10:	da06      	bge.n	8029c20 <_vfprintf_r+0x3b8>
 8029c12:	4276      	negs	r6, r6
 8029c14:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8029c18:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8029c1c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8029c20:	2301      	movs	r3, #1
 8029c22:	e384      	b.n	802a32e <_vfprintf_r+0xac6>
 8029c24:	4633      	mov	r3, r6
 8029c26:	06ee      	lsls	r6, r5, #27
 8029c28:	f853 7b04 	ldr.w	r7, [r3], #4
 8029c2c:	9307      	str	r3, [sp, #28]
 8029c2e:	d502      	bpl.n	8029c36 <_vfprintf_r+0x3ce>
 8029c30:	463e      	mov	r6, r7
 8029c32:	17ff      	asrs	r7, r7, #31
 8029c34:	e7eb      	b.n	8029c0e <_vfprintf_r+0x3a6>
 8029c36:	0668      	lsls	r0, r5, #25
 8029c38:	d503      	bpl.n	8029c42 <_vfprintf_r+0x3da>
 8029c3a:	b23e      	sxth	r6, r7
 8029c3c:	f347 37c0 	sbfx	r7, r7, #15, #1
 8029c40:	e7e5      	b.n	8029c0e <_vfprintf_r+0x3a6>
 8029c42:	05a9      	lsls	r1, r5, #22
 8029c44:	d5f4      	bpl.n	8029c30 <_vfprintf_r+0x3c8>
 8029c46:	b27e      	sxtb	r6, r7
 8029c48:	f347 17c0 	sbfx	r7, r7, #7, #1
 8029c4c:	e7df      	b.n	8029c0e <_vfprintf_r+0x3a6>
 8029c4e:	3607      	adds	r6, #7
 8029c50:	f026 0307 	bic.w	r3, r6, #7
 8029c54:	ecb3 7b02 	vldmia	r3!, {d7}
 8029c58:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8029c5c:	9307      	str	r3, [sp, #28]
 8029c5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029c60:	931a      	str	r3, [sp, #104]	@ 0x68
 8029c62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029c64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8029c68:	931b      	str	r3, [sp, #108]	@ 0x6c
 8029c6a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8029c6e:	4b85      	ldr	r3, [pc, #532]	@ (8029e84 <_vfprintf_r+0x61c>)
 8029c70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8029c74:	f7e6 ff72 	bl	8010b5c <__aeabi_dcmpun>
 8029c78:	bb10      	cbnz	r0, 8029cc0 <_vfprintf_r+0x458>
 8029c7a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8029c7e:	4b81      	ldr	r3, [pc, #516]	@ (8029e84 <_vfprintf_r+0x61c>)
 8029c80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8029c84:	f7e6 ff4c 	bl	8010b20 <__aeabi_dcmple>
 8029c88:	b9d0      	cbnz	r0, 8029cc0 <_vfprintf_r+0x458>
 8029c8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8029c8e:	2200      	movs	r2, #0
 8029c90:	2300      	movs	r3, #0
 8029c92:	f7e6 ff3b 	bl	8010b0c <__aeabi_dcmplt>
 8029c96:	b110      	cbz	r0, 8029c9e <_vfprintf_r+0x436>
 8029c98:	232d      	movs	r3, #45	@ 0x2d
 8029c9a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8029c9e:	4a7a      	ldr	r2, [pc, #488]	@ (8029e88 <_vfprintf_r+0x620>)
 8029ca0:	4b7a      	ldr	r3, [pc, #488]	@ (8029e8c <_vfprintf_r+0x624>)
 8029ca2:	9906      	ldr	r1, [sp, #24]
 8029ca4:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8029ca8:	2947      	cmp	r1, #71	@ 0x47
 8029caa:	bfd4      	ite	le
 8029cac:	4690      	movle	r8, r2
 8029cae:	4698      	movgt	r8, r3
 8029cb0:	f04f 0a00 	mov.w	sl, #0
 8029cb4:	f04f 0903 	mov.w	r9, #3
 8029cb8:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 8029cbc:	f000 bff8 	b.w	802acb0 <_vfprintf_r+0x1448>
 8029cc0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8029cc4:	4610      	mov	r0, r2
 8029cc6:	4619      	mov	r1, r3
 8029cc8:	f7e6 ff48 	bl	8010b5c <__aeabi_dcmpun>
 8029ccc:	4682      	mov	sl, r0
 8029cce:	b140      	cbz	r0, 8029ce2 <_vfprintf_r+0x47a>
 8029cd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029cd2:	4a6f      	ldr	r2, [pc, #444]	@ (8029e90 <_vfprintf_r+0x628>)
 8029cd4:	2b00      	cmp	r3, #0
 8029cd6:	bfbc      	itt	lt
 8029cd8:	232d      	movlt	r3, #45	@ 0x2d
 8029cda:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 8029cde:	4b6d      	ldr	r3, [pc, #436]	@ (8029e94 <_vfprintf_r+0x62c>)
 8029ce0:	e7df      	b.n	8029ca2 <_vfprintf_r+0x43a>
 8029ce2:	9b06      	ldr	r3, [sp, #24]
 8029ce4:	2b61      	cmp	r3, #97	@ 0x61
 8029ce6:	d02e      	beq.n	8029d46 <_vfprintf_r+0x4de>
 8029ce8:	2b41      	cmp	r3, #65	@ 0x41
 8029cea:	d12e      	bne.n	8029d4a <_vfprintf_r+0x4e2>
 8029cec:	2358      	movs	r3, #88	@ 0x58
 8029cee:	2230      	movs	r2, #48	@ 0x30
 8029cf0:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 8029cf4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8029cf8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8029cfc:	f045 0502 	orr.w	r5, r5, #2
 8029d00:	f340 80ae 	ble.w	8029e60 <_vfprintf_r+0x5f8>
 8029d04:	9803      	ldr	r0, [sp, #12]
 8029d06:	f109 0101 	add.w	r1, r9, #1
 8029d0a:	f004 fd0f 	bl	802e72c <_malloc_r>
 8029d0e:	4680      	mov	r8, r0
 8029d10:	2800      	cmp	r0, #0
 8029d12:	f040 80aa 	bne.w	8029e6a <_vfprintf_r+0x602>
 8029d16:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8029d1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029d1e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8029d22:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8029d26:	07d9      	lsls	r1, r3, #31
 8029d28:	d407      	bmi.n	8029d3a <_vfprintf_r+0x4d2>
 8029d2a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8029d2e:	059a      	lsls	r2, r3, #22
 8029d30:	d403      	bmi.n	8029d3a <_vfprintf_r+0x4d2>
 8029d32:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8029d36:	f003 fcde 	bl	802d6f6 <__retarget_lock_release_recursive>
 8029d3a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8029d3e:	065b      	lsls	r3, r3, #25
 8029d40:	f57f add6 	bpl.w	80298f0 <_vfprintf_r+0x88>
 8029d44:	e5d1      	b.n	80298ea <_vfprintf_r+0x82>
 8029d46:	2378      	movs	r3, #120	@ 0x78
 8029d48:	e7d1      	b.n	8029cee <_vfprintf_r+0x486>
 8029d4a:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8029d4e:	f000 808e 	beq.w	8029e6e <_vfprintf_r+0x606>
 8029d52:	9b06      	ldr	r3, [sp, #24]
 8029d54:	f023 0320 	bic.w	r3, r3, #32
 8029d58:	2b47      	cmp	r3, #71	@ 0x47
 8029d5a:	d105      	bne.n	8029d68 <_vfprintf_r+0x500>
 8029d5c:	f1b9 0f00 	cmp.w	r9, #0
 8029d60:	d102      	bne.n	8029d68 <_vfprintf_r+0x500>
 8029d62:	46ca      	mov	sl, r9
 8029d64:	f04f 0901 	mov.w	r9, #1
 8029d68:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8029d6c:	9311      	str	r3, [sp, #68]	@ 0x44
 8029d6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029d70:	2b00      	cmp	r3, #0
 8029d72:	da7f      	bge.n	8029e74 <_vfprintf_r+0x60c>
 8029d74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029d76:	9314      	str	r3, [sp, #80]	@ 0x50
 8029d78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029d7a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8029d7e:	9315      	str	r3, [sp, #84]	@ 0x54
 8029d80:	232d      	movs	r3, #45	@ 0x2d
 8029d82:	931c      	str	r3, [sp, #112]	@ 0x70
 8029d84:	9b06      	ldr	r3, [sp, #24]
 8029d86:	f023 0320 	bic.w	r3, r3, #32
 8029d8a:	2b41      	cmp	r3, #65	@ 0x41
 8029d8c:	9308      	str	r3, [sp, #32]
 8029d8e:	f040 81e7 	bne.w	802a160 <_vfprintf_r+0x8f8>
 8029d92:	a820      	add	r0, sp, #128	@ 0x80
 8029d94:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8029d98:	f003 fcd2 	bl	802d740 <frexp>
 8029d9c:	2200      	movs	r2, #0
 8029d9e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8029da2:	ec51 0b10 	vmov	r0, r1, d0
 8029da6:	f7e6 fc3f 	bl	8010628 <__aeabi_dmul>
 8029daa:	4602      	mov	r2, r0
 8029dac:	460b      	mov	r3, r1
 8029dae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8029db2:	2200      	movs	r2, #0
 8029db4:	2300      	movs	r3, #0
 8029db6:	f7e6 fe9f 	bl	8010af8 <__aeabi_dcmpeq>
 8029dba:	b108      	cbz	r0, 8029dc0 <_vfprintf_r+0x558>
 8029dbc:	2301      	movs	r3, #1
 8029dbe:	9320      	str	r3, [sp, #128]	@ 0x80
 8029dc0:	4a35      	ldr	r2, [pc, #212]	@ (8029e98 <_vfprintf_r+0x630>)
 8029dc2:	4b36      	ldr	r3, [pc, #216]	@ (8029e9c <_vfprintf_r+0x634>)
 8029dc4:	9906      	ldr	r1, [sp, #24]
 8029dc6:	2961      	cmp	r1, #97	@ 0x61
 8029dc8:	bf18      	it	ne
 8029dca:	461a      	movne	r2, r3
 8029dcc:	9210      	str	r2, [sp, #64]	@ 0x40
 8029dce:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 8029dd2:	4646      	mov	r6, r8
 8029dd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8029dd8:	4b31      	ldr	r3, [pc, #196]	@ (8029ea0 <_vfprintf_r+0x638>)
 8029dda:	2200      	movs	r2, #0
 8029ddc:	f7e6 fc24 	bl	8010628 <__aeabi_dmul>
 8029de0:	4602      	mov	r2, r0
 8029de2:	460b      	mov	r3, r1
 8029de4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8029de8:	f7e6 fece 	bl	8010b88 <__aeabi_d2iz>
 8029dec:	9013      	str	r0, [sp, #76]	@ 0x4c
 8029dee:	f7e6 fbb1 	bl	8010554 <__aeabi_i2d>
 8029df2:	4602      	mov	r2, r0
 8029df4:	460b      	mov	r3, r1
 8029df6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8029dfa:	f7e6 fa5d 	bl	80102b8 <__aeabi_dsub>
 8029dfe:	4602      	mov	r2, r0
 8029e00:	460b      	mov	r3, r1
 8029e02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8029e06:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8029e08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8029e0a:	5c9b      	ldrb	r3, [r3, r2]
 8029e0c:	f806 3b01 	strb.w	r3, [r6], #1
 8029e10:	1c7a      	adds	r2, r7, #1
 8029e12:	d006      	beq.n	8029e22 <_vfprintf_r+0x5ba>
 8029e14:	1e7b      	subs	r3, r7, #1
 8029e16:	931d      	str	r3, [sp, #116]	@ 0x74
 8029e18:	2200      	movs	r2, #0
 8029e1a:	2300      	movs	r3, #0
 8029e1c:	f7e6 fe6c 	bl	8010af8 <__aeabi_dcmpeq>
 8029e20:	b370      	cbz	r0, 8029e80 <_vfprintf_r+0x618>
 8029e22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8029e26:	4b1f      	ldr	r3, [pc, #124]	@ (8029ea4 <_vfprintf_r+0x63c>)
 8029e28:	2200      	movs	r2, #0
 8029e2a:	f7e6 fe8d 	bl	8010b48 <__aeabi_dcmpgt>
 8029e2e:	2800      	cmp	r0, #0
 8029e30:	d13a      	bne.n	8029ea8 <_vfprintf_r+0x640>
 8029e32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8029e36:	4b1b      	ldr	r3, [pc, #108]	@ (8029ea4 <_vfprintf_r+0x63c>)
 8029e38:	2200      	movs	r2, #0
 8029e3a:	f7e6 fe5d 	bl	8010af8 <__aeabi_dcmpeq>
 8029e3e:	b110      	cbz	r0, 8029e46 <_vfprintf_r+0x5de>
 8029e40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029e42:	07db      	lsls	r3, r3, #31
 8029e44:	d430      	bmi.n	8029ea8 <_vfprintf_r+0x640>
 8029e46:	4633      	mov	r3, r6
 8029e48:	19f1      	adds	r1, r6, r7
 8029e4a:	2030      	movs	r0, #48	@ 0x30
 8029e4c:	1aca      	subs	r2, r1, r3
 8029e4e:	2a00      	cmp	r2, #0
 8029e50:	f280 8183 	bge.w	802a15a <_vfprintf_r+0x8f2>
 8029e54:	1c7b      	adds	r3, r7, #1
 8029e56:	3701      	adds	r7, #1
 8029e58:	bfb8      	it	lt
 8029e5a:	2300      	movlt	r3, #0
 8029e5c:	441e      	add	r6, r3
 8029e5e:	e037      	b.n	8029ed0 <_vfprintf_r+0x668>
 8029e60:	f04f 0a00 	mov.w	sl, #0
 8029e64:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8029e68:	e77e      	b.n	8029d68 <_vfprintf_r+0x500>
 8029e6a:	4682      	mov	sl, r0
 8029e6c:	e77c      	b.n	8029d68 <_vfprintf_r+0x500>
 8029e6e:	f04f 0906 	mov.w	r9, #6
 8029e72:	e779      	b.n	8029d68 <_vfprintf_r+0x500>
 8029e74:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8029e78:	2300      	movs	r3, #0
 8029e7a:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8029e7e:	e780      	b.n	8029d82 <_vfprintf_r+0x51a>
 8029e80:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8029e82:	e7a7      	b.n	8029dd4 <_vfprintf_r+0x56c>
 8029e84:	7fefffff 	.word	0x7fefffff
 8029e88:	0803b00b 	.word	0x0803b00b
 8029e8c:	0803b00f 	.word	0x0803b00f
 8029e90:	0803b013 	.word	0x0803b013
 8029e94:	0803b017 	.word	0x0803b017
 8029e98:	0803b01b 	.word	0x0803b01b
 8029e9c:	0803b02c 	.word	0x0803b02c
 8029ea0:	40300000 	.word	0x40300000
 8029ea4:	3fe00000 	.word	0x3fe00000
 8029ea8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8029eaa:	9624      	str	r6, [sp, #144]	@ 0x90
 8029eac:	7bd9      	ldrb	r1, [r3, #15]
 8029eae:	2030      	movs	r0, #48	@ 0x30
 8029eb0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8029eb2:	1e53      	subs	r3, r2, #1
 8029eb4:	9324      	str	r3, [sp, #144]	@ 0x90
 8029eb6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8029eba:	428b      	cmp	r3, r1
 8029ebc:	f000 814a 	beq.w	802a154 <_vfprintf_r+0x8ec>
 8029ec0:	2b39      	cmp	r3, #57	@ 0x39
 8029ec2:	bf0b      	itete	eq
 8029ec4:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8029ec6:	3301      	addne	r3, #1
 8029ec8:	7a9b      	ldrbeq	r3, [r3, #10]
 8029eca:	b2db      	uxtbne	r3, r3
 8029ecc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8029ed0:	eba6 0308 	sub.w	r3, r6, r8
 8029ed4:	9304      	str	r3, [sp, #16]
 8029ed6:	9b08      	ldr	r3, [sp, #32]
 8029ed8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8029eda:	2b47      	cmp	r3, #71	@ 0x47
 8029edc:	f040 8189 	bne.w	802a1f2 <_vfprintf_r+0x98a>
 8029ee0:	1cf1      	adds	r1, r6, #3
 8029ee2:	db02      	blt.n	8029eea <_vfprintf_r+0x682>
 8029ee4:	45b1      	cmp	r9, r6
 8029ee6:	f280 81a7 	bge.w	802a238 <_vfprintf_r+0x9d0>
 8029eea:	9b06      	ldr	r3, [sp, #24]
 8029eec:	3b02      	subs	r3, #2
 8029eee:	9306      	str	r3, [sp, #24]
 8029ef0:	9906      	ldr	r1, [sp, #24]
 8029ef2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8029ef6:	f021 0120 	bic.w	r1, r1, #32
 8029efa:	2941      	cmp	r1, #65	@ 0x41
 8029efc:	bf08      	it	eq
 8029efe:	320f      	addeq	r2, #15
 8029f00:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 8029f04:	bf06      	itte	eq
 8029f06:	b2d2      	uxtbeq	r2, r2
 8029f08:	2101      	moveq	r1, #1
 8029f0a:	2100      	movne	r1, #0
 8029f0c:	2b00      	cmp	r3, #0
 8029f0e:	9320      	str	r3, [sp, #128]	@ 0x80
 8029f10:	bfb8      	it	lt
 8029f12:	f1c6 0301 	rsblt	r3, r6, #1
 8029f16:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 8029f1a:	bfb4      	ite	lt
 8029f1c:	222d      	movlt	r2, #45	@ 0x2d
 8029f1e:	222b      	movge	r2, #43	@ 0x2b
 8029f20:	2b09      	cmp	r3, #9
 8029f22:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8029f26:	f340 817a 	ble.w	802a21e <_vfprintf_r+0x9b6>
 8029f2a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8029f2e:	270a      	movs	r7, #10
 8029f30:	4602      	mov	r2, r0
 8029f32:	fbb3 f6f7 	udiv	r6, r3, r7
 8029f36:	fb07 3116 	mls	r1, r7, r6, r3
 8029f3a:	3130      	adds	r1, #48	@ 0x30
 8029f3c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8029f40:	4619      	mov	r1, r3
 8029f42:	2963      	cmp	r1, #99	@ 0x63
 8029f44:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8029f48:	4633      	mov	r3, r6
 8029f4a:	dcf1      	bgt.n	8029f30 <_vfprintf_r+0x6c8>
 8029f4c:	3330      	adds	r3, #48	@ 0x30
 8029f4e:	1e91      	subs	r1, r2, #2
 8029f50:	f800 3c01 	strb.w	r3, [r0, #-1]
 8029f54:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8029f58:	460b      	mov	r3, r1
 8029f5a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8029f5e:	4283      	cmp	r3, r0
 8029f60:	f0c0 8158 	bcc.w	802a214 <_vfprintf_r+0x9ac>
 8029f64:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8029f68:	1a9b      	subs	r3, r3, r2
 8029f6a:	4281      	cmp	r1, r0
 8029f6c:	bf88      	it	hi
 8029f6e:	2300      	movhi	r3, #0
 8029f70:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8029f74:	441a      	add	r2, r3
 8029f76:	ab22      	add	r3, sp, #136	@ 0x88
 8029f78:	1ad3      	subs	r3, r2, r3
 8029f7a:	9a04      	ldr	r2, [sp, #16]
 8029f7c:	9318      	str	r3, [sp, #96]	@ 0x60
 8029f7e:	2a01      	cmp	r2, #1
 8029f80:	eb03 0902 	add.w	r9, r3, r2
 8029f84:	dc01      	bgt.n	8029f8a <_vfprintf_r+0x722>
 8029f86:	07ea      	lsls	r2, r5, #31
 8029f88:	d501      	bpl.n	8029f8e <_vfprintf_r+0x726>
 8029f8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029f8c:	4499      	add	r9, r3
 8029f8e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8029f92:	2700      	movs	r7, #0
 8029f94:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8029f98:	9311      	str	r3, [sp, #68]	@ 0x44
 8029f9a:	9708      	str	r7, [sp, #32]
 8029f9c:	463e      	mov	r6, r7
 8029f9e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029fa0:	2b00      	cmp	r3, #0
 8029fa2:	f040 8191 	bne.w	802a2c8 <_vfprintf_r+0xa60>
 8029fa6:	2300      	movs	r3, #0
 8029fa8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029faa:	9310      	str	r3, [sp, #64]	@ 0x40
 8029fac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8029fae:	454b      	cmp	r3, r9
 8029fb0:	bfb8      	it	lt
 8029fb2:	464b      	movlt	r3, r9
 8029fb4:	9311      	str	r3, [sp, #68]	@ 0x44
 8029fb6:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8029fba:	b113      	cbz	r3, 8029fc2 <_vfprintf_r+0x75a>
 8029fbc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8029fbe:	3301      	adds	r3, #1
 8029fc0:	9311      	str	r3, [sp, #68]	@ 0x44
 8029fc2:	f015 0302 	ands.w	r3, r5, #2
 8029fc6:	931c      	str	r3, [sp, #112]	@ 0x70
 8029fc8:	bf1e      	ittt	ne
 8029fca:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 8029fcc:	3302      	addne	r3, #2
 8029fce:	9311      	strne	r3, [sp, #68]	@ 0x44
 8029fd0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8029fd4:	931d      	str	r3, [sp, #116]	@ 0x74
 8029fd6:	d122      	bne.n	802a01e <_vfprintf_r+0x7b6>
 8029fd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029fda:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8029fdc:	1a9b      	subs	r3, r3, r2
 8029fde:	2b00      	cmp	r3, #0
 8029fe0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8029fe2:	dd1c      	ble.n	802a01e <_vfprintf_r+0x7b6>
 8029fe4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8029fe6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8029fea:	2810      	cmp	r0, #16
 8029fec:	489f      	ldr	r0, [pc, #636]	@ (802a26c <_vfprintf_r+0xa04>)
 8029fee:	6020      	str	r0, [r4, #0]
 8029ff0:	f102 0201 	add.w	r2, r2, #1
 8029ff4:	f104 0108 	add.w	r1, r4, #8
 8029ff8:	f300 8297 	bgt.w	802a52a <_vfprintf_r+0xcc2>
 8029ffc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8029ffe:	6060      	str	r0, [r4, #4]
 802a000:	4403      	add	r3, r0
 802a002:	2a07      	cmp	r2, #7
 802a004:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a008:	f340 82a4 	ble.w	802a554 <_vfprintf_r+0xcec>
 802a00c:	9803      	ldr	r0, [sp, #12]
 802a00e:	aa26      	add	r2, sp, #152	@ 0x98
 802a010:	4659      	mov	r1, fp
 802a012:	f000 fe95 	bl	802ad40 <__sprint_r>
 802a016:	2800      	cmp	r0, #0
 802a018:	f040 85ed 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a01c:	ac29      	add	r4, sp, #164	@ 0xa4
 802a01e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 802a022:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a024:	b16a      	cbz	r2, 802a042 <_vfprintf_r+0x7da>
 802a026:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 802a02a:	6022      	str	r2, [r4, #0]
 802a02c:	2201      	movs	r2, #1
 802a02e:	4413      	add	r3, r2
 802a030:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a032:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a034:	6062      	str	r2, [r4, #4]
 802a036:	4413      	add	r3, r2
 802a038:	2b07      	cmp	r3, #7
 802a03a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a03c:	f300 828c 	bgt.w	802a558 <_vfprintf_r+0xcf0>
 802a040:	3408      	adds	r4, #8
 802a042:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802a044:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a046:	b162      	cbz	r2, 802a062 <_vfprintf_r+0x7fa>
 802a048:	aa1f      	add	r2, sp, #124	@ 0x7c
 802a04a:	6022      	str	r2, [r4, #0]
 802a04c:	2202      	movs	r2, #2
 802a04e:	4413      	add	r3, r2
 802a050:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a052:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a054:	6062      	str	r2, [r4, #4]
 802a056:	3301      	adds	r3, #1
 802a058:	2b07      	cmp	r3, #7
 802a05a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a05c:	f300 8286 	bgt.w	802a56c <_vfprintf_r+0xd04>
 802a060:	3408      	adds	r4, #8
 802a062:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802a064:	2b80      	cmp	r3, #128	@ 0x80
 802a066:	d122      	bne.n	802a0ae <_vfprintf_r+0x846>
 802a068:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a06a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a06c:	1a9b      	subs	r3, r3, r2
 802a06e:	2b00      	cmp	r3, #0
 802a070:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a072:	dd1c      	ble.n	802a0ae <_vfprintf_r+0x846>
 802a074:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a076:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a07a:	2810      	cmp	r0, #16
 802a07c:	487c      	ldr	r0, [pc, #496]	@ (802a270 <_vfprintf_r+0xa08>)
 802a07e:	6020      	str	r0, [r4, #0]
 802a080:	f102 0201 	add.w	r2, r2, #1
 802a084:	f104 0108 	add.w	r1, r4, #8
 802a088:	f300 827a 	bgt.w	802a580 <_vfprintf_r+0xd18>
 802a08c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a08e:	6060      	str	r0, [r4, #4]
 802a090:	4403      	add	r3, r0
 802a092:	2a07      	cmp	r2, #7
 802a094:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a098:	f340 8287 	ble.w	802a5aa <_vfprintf_r+0xd42>
 802a09c:	9803      	ldr	r0, [sp, #12]
 802a09e:	aa26      	add	r2, sp, #152	@ 0x98
 802a0a0:	4659      	mov	r1, fp
 802a0a2:	f000 fe4d 	bl	802ad40 <__sprint_r>
 802a0a6:	2800      	cmp	r0, #0
 802a0a8:	f040 85a5 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a0ac:	ac29      	add	r4, sp, #164	@ 0xa4
 802a0ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a0b0:	eba3 0309 	sub.w	r3, r3, r9
 802a0b4:	2b00      	cmp	r3, #0
 802a0b6:	9310      	str	r3, [sp, #64]	@ 0x40
 802a0b8:	dd1c      	ble.n	802a0f4 <_vfprintf_r+0x88c>
 802a0ba:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802a0bc:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a0c0:	2810      	cmp	r0, #16
 802a0c2:	486b      	ldr	r0, [pc, #428]	@ (802a270 <_vfprintf_r+0xa08>)
 802a0c4:	6020      	str	r0, [r4, #0]
 802a0c6:	f102 0201 	add.w	r2, r2, #1
 802a0ca:	f104 0108 	add.w	r1, r4, #8
 802a0ce:	f300 826e 	bgt.w	802a5ae <_vfprintf_r+0xd46>
 802a0d2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802a0d4:	6060      	str	r0, [r4, #4]
 802a0d6:	4403      	add	r3, r0
 802a0d8:	2a07      	cmp	r2, #7
 802a0da:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a0de:	f340 827b 	ble.w	802a5d8 <_vfprintf_r+0xd70>
 802a0e2:	9803      	ldr	r0, [sp, #12]
 802a0e4:	aa26      	add	r2, sp, #152	@ 0x98
 802a0e6:	4659      	mov	r1, fp
 802a0e8:	f000 fe2a 	bl	802ad40 <__sprint_r>
 802a0ec:	2800      	cmp	r0, #0
 802a0ee:	f040 8582 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a0f2:	ac29      	add	r4, sp, #164	@ 0xa4
 802a0f4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a0f6:	9310      	str	r3, [sp, #64]	@ 0x40
 802a0f8:	05e8      	lsls	r0, r5, #23
 802a0fa:	f100 8273 	bmi.w	802a5e4 <_vfprintf_r+0xd7c>
 802a0fe:	444b      	add	r3, r9
 802a100:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a102:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a104:	3301      	adds	r3, #1
 802a106:	2b07      	cmp	r3, #7
 802a108:	e9c4 8900 	strd	r8, r9, [r4]
 802a10c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a10e:	f300 82af 	bgt.w	802a670 <_vfprintf_r+0xe08>
 802a112:	3408      	adds	r4, #8
 802a114:	0768      	lsls	r0, r5, #29
 802a116:	f100 8550 	bmi.w	802abba <_vfprintf_r+0x1352>
 802a11a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802a11e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802a120:	428a      	cmp	r2, r1
 802a122:	bfac      	ite	ge
 802a124:	189b      	addge	r3, r3, r2
 802a126:	185b      	addlt	r3, r3, r1
 802a128:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a12a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a12c:	b13b      	cbz	r3, 802a13e <_vfprintf_r+0x8d6>
 802a12e:	9803      	ldr	r0, [sp, #12]
 802a130:	aa26      	add	r2, sp, #152	@ 0x98
 802a132:	4659      	mov	r1, fp
 802a134:	f000 fe04 	bl	802ad40 <__sprint_r>
 802a138:	2800      	cmp	r0, #0
 802a13a:	f040 855c 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a13e:	2300      	movs	r3, #0
 802a140:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a142:	f1ba 0f00 	cmp.w	sl, #0
 802a146:	f040 8572 	bne.w	802ac2e <_vfprintf_r+0x13c6>
 802a14a:	9e07      	ldr	r6, [sp, #28]
 802a14c:	ac29      	add	r4, sp, #164	@ 0xa4
 802a14e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 802a152:	e407      	b.n	8029964 <_vfprintf_r+0xfc>
 802a154:	f802 0c01 	strb.w	r0, [r2, #-1]
 802a158:	e6aa      	b.n	8029eb0 <_vfprintf_r+0x648>
 802a15a:	f803 0b01 	strb.w	r0, [r3], #1
 802a15e:	e675      	b.n	8029e4c <_vfprintf_r+0x5e4>
 802a160:	9b08      	ldr	r3, [sp, #32]
 802a162:	2b46      	cmp	r3, #70	@ 0x46
 802a164:	d005      	beq.n	802a172 <_vfprintf_r+0x90a>
 802a166:	2b45      	cmp	r3, #69	@ 0x45
 802a168:	d11a      	bne.n	802a1a0 <_vfprintf_r+0x938>
 802a16a:	f109 0601 	add.w	r6, r9, #1
 802a16e:	2102      	movs	r1, #2
 802a170:	e001      	b.n	802a176 <_vfprintf_r+0x90e>
 802a172:	464e      	mov	r6, r9
 802a174:	2103      	movs	r1, #3
 802a176:	ab24      	add	r3, sp, #144	@ 0x90
 802a178:	9301      	str	r3, [sp, #4]
 802a17a:	ab21      	add	r3, sp, #132	@ 0x84
 802a17c:	9300      	str	r3, [sp, #0]
 802a17e:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802a182:	ab20      	add	r3, sp, #128	@ 0x80
 802a184:	9803      	ldr	r0, [sp, #12]
 802a186:	4632      	mov	r2, r6
 802a188:	f003 fbb6 	bl	802d8f8 <_dtoa_r>
 802a18c:	9b08      	ldr	r3, [sp, #32]
 802a18e:	2b47      	cmp	r3, #71	@ 0x47
 802a190:	4680      	mov	r8, r0
 802a192:	d119      	bne.n	802a1c8 <_vfprintf_r+0x960>
 802a194:	07e8      	lsls	r0, r5, #31
 802a196:	d405      	bmi.n	802a1a4 <_vfprintf_r+0x93c>
 802a198:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a19a:	eba3 0308 	sub.w	r3, r3, r8
 802a19e:	e699      	b.n	8029ed4 <_vfprintf_r+0x66c>
 802a1a0:	464e      	mov	r6, r9
 802a1a2:	e7e4      	b.n	802a16e <_vfprintf_r+0x906>
 802a1a4:	eb08 0706 	add.w	r7, r8, r6
 802a1a8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802a1ac:	2200      	movs	r2, #0
 802a1ae:	2300      	movs	r3, #0
 802a1b0:	f7e6 fca2 	bl	8010af8 <__aeabi_dcmpeq>
 802a1b4:	b100      	cbz	r0, 802a1b8 <_vfprintf_r+0x950>
 802a1b6:	9724      	str	r7, [sp, #144]	@ 0x90
 802a1b8:	2230      	movs	r2, #48	@ 0x30
 802a1ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a1bc:	429f      	cmp	r7, r3
 802a1be:	d9eb      	bls.n	802a198 <_vfprintf_r+0x930>
 802a1c0:	1c59      	adds	r1, r3, #1
 802a1c2:	9124      	str	r1, [sp, #144]	@ 0x90
 802a1c4:	701a      	strb	r2, [r3, #0]
 802a1c6:	e7f8      	b.n	802a1ba <_vfprintf_r+0x952>
 802a1c8:	9b08      	ldr	r3, [sp, #32]
 802a1ca:	2b46      	cmp	r3, #70	@ 0x46
 802a1cc:	eb00 0706 	add.w	r7, r0, r6
 802a1d0:	d1ea      	bne.n	802a1a8 <_vfprintf_r+0x940>
 802a1d2:	7803      	ldrb	r3, [r0, #0]
 802a1d4:	2b30      	cmp	r3, #48	@ 0x30
 802a1d6:	d109      	bne.n	802a1ec <_vfprintf_r+0x984>
 802a1d8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802a1dc:	2200      	movs	r2, #0
 802a1de:	2300      	movs	r3, #0
 802a1e0:	f7e6 fc8a 	bl	8010af8 <__aeabi_dcmpeq>
 802a1e4:	b910      	cbnz	r0, 802a1ec <_vfprintf_r+0x984>
 802a1e6:	f1c6 0601 	rsb	r6, r6, #1
 802a1ea:	9620      	str	r6, [sp, #128]	@ 0x80
 802a1ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a1ee:	441f      	add	r7, r3
 802a1f0:	e7da      	b.n	802a1a8 <_vfprintf_r+0x940>
 802a1f2:	9b08      	ldr	r3, [sp, #32]
 802a1f4:	2b46      	cmp	r3, #70	@ 0x46
 802a1f6:	f47f ae7b 	bne.w	8029ef0 <_vfprintf_r+0x688>
 802a1fa:	f005 0301 	and.w	r3, r5, #1
 802a1fe:	2e00      	cmp	r6, #0
 802a200:	ea43 0309 	orr.w	r3, r3, r9
 802a204:	dd25      	ble.n	802a252 <_vfprintf_r+0x9ea>
 802a206:	b37b      	cbz	r3, 802a268 <_vfprintf_r+0xa00>
 802a208:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a20a:	18f3      	adds	r3, r6, r3
 802a20c:	4499      	add	r9, r3
 802a20e:	2366      	movs	r3, #102	@ 0x66
 802a210:	9306      	str	r3, [sp, #24]
 802a212:	e033      	b.n	802a27c <_vfprintf_r+0xa14>
 802a214:	f813 7b01 	ldrb.w	r7, [r3], #1
 802a218:	f806 7f01 	strb.w	r7, [r6, #1]!
 802a21c:	e69f      	b.n	8029f5e <_vfprintf_r+0x6f6>
 802a21e:	b941      	cbnz	r1, 802a232 <_vfprintf_r+0x9ca>
 802a220:	2230      	movs	r2, #48	@ 0x30
 802a222:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 802a226:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 802a22a:	3330      	adds	r3, #48	@ 0x30
 802a22c:	f802 3b01 	strb.w	r3, [r2], #1
 802a230:	e6a1      	b.n	8029f76 <_vfprintf_r+0x70e>
 802a232:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802a236:	e7f8      	b.n	802a22a <_vfprintf_r+0x9c2>
 802a238:	9b04      	ldr	r3, [sp, #16]
 802a23a:	42b3      	cmp	r3, r6
 802a23c:	dd0d      	ble.n	802a25a <_vfprintf_r+0x9f2>
 802a23e:	9b04      	ldr	r3, [sp, #16]
 802a240:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a242:	2e00      	cmp	r6, #0
 802a244:	eb03 0902 	add.w	r9, r3, r2
 802a248:	dc0c      	bgt.n	802a264 <_vfprintf_r+0x9fc>
 802a24a:	f1c6 0301 	rsb	r3, r6, #1
 802a24e:	4499      	add	r9, r3
 802a250:	e008      	b.n	802a264 <_vfprintf_r+0x9fc>
 802a252:	b17b      	cbz	r3, 802a274 <_vfprintf_r+0xa0c>
 802a254:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a256:	3301      	adds	r3, #1
 802a258:	e7d8      	b.n	802a20c <_vfprintf_r+0x9a4>
 802a25a:	07eb      	lsls	r3, r5, #31
 802a25c:	d521      	bpl.n	802a2a2 <_vfprintf_r+0xa3a>
 802a25e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a260:	eb06 0903 	add.w	r9, r6, r3
 802a264:	2367      	movs	r3, #103	@ 0x67
 802a266:	e7d3      	b.n	802a210 <_vfprintf_r+0x9a8>
 802a268:	46b1      	mov	r9, r6
 802a26a:	e7d0      	b.n	802a20e <_vfprintf_r+0x9a6>
 802a26c:	0803b04f 	.word	0x0803b04f
 802a270:	0803b03f 	.word	0x0803b03f
 802a274:	2366      	movs	r3, #102	@ 0x66
 802a276:	9306      	str	r3, [sp, #24]
 802a278:	f04f 0901 	mov.w	r9, #1
 802a27c:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 802a280:	9308      	str	r3, [sp, #32]
 802a282:	d01f      	beq.n	802a2c4 <_vfprintf_r+0xa5c>
 802a284:	2700      	movs	r7, #0
 802a286:	2e00      	cmp	r6, #0
 802a288:	9708      	str	r7, [sp, #32]
 802a28a:	f77f ae88 	ble.w	8029f9e <_vfprintf_r+0x736>
 802a28e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a290:	781b      	ldrb	r3, [r3, #0]
 802a292:	2bff      	cmp	r3, #255	@ 0xff
 802a294:	d107      	bne.n	802a2a6 <_vfprintf_r+0xa3e>
 802a296:	9b08      	ldr	r3, [sp, #32]
 802a298:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802a29a:	443b      	add	r3, r7
 802a29c:	fb02 9903 	mla	r9, r2, r3, r9
 802a2a0:	e67d      	b.n	8029f9e <_vfprintf_r+0x736>
 802a2a2:	46b1      	mov	r9, r6
 802a2a4:	e7de      	b.n	802a264 <_vfprintf_r+0x9fc>
 802a2a6:	42b3      	cmp	r3, r6
 802a2a8:	daf5      	bge.n	802a296 <_vfprintf_r+0xa2e>
 802a2aa:	1af6      	subs	r6, r6, r3
 802a2ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a2ae:	785b      	ldrb	r3, [r3, #1]
 802a2b0:	b133      	cbz	r3, 802a2c0 <_vfprintf_r+0xa58>
 802a2b2:	9b08      	ldr	r3, [sp, #32]
 802a2b4:	3301      	adds	r3, #1
 802a2b6:	9308      	str	r3, [sp, #32]
 802a2b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a2ba:	3301      	adds	r3, #1
 802a2bc:	9309      	str	r3, [sp, #36]	@ 0x24
 802a2be:	e7e6      	b.n	802a28e <_vfprintf_r+0xa26>
 802a2c0:	3701      	adds	r7, #1
 802a2c2:	e7e4      	b.n	802a28e <_vfprintf_r+0xa26>
 802a2c4:	9f08      	ldr	r7, [sp, #32]
 802a2c6:	e66a      	b.n	8029f9e <_vfprintf_r+0x736>
 802a2c8:	232d      	movs	r3, #45	@ 0x2d
 802a2ca:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a2ce:	e66a      	b.n	8029fa6 <_vfprintf_r+0x73e>
 802a2d0:	06af      	lsls	r7, r5, #26
 802a2d2:	d507      	bpl.n	802a2e4 <_vfprintf_r+0xa7c>
 802a2d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a2d6:	6833      	ldr	r3, [r6, #0]
 802a2d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802a2da:	17d2      	asrs	r2, r2, #31
 802a2dc:	e9c3 1200 	strd	r1, r2, [r3]
 802a2e0:	3604      	adds	r6, #4
 802a2e2:	e734      	b.n	802a14e <_vfprintf_r+0x8e6>
 802a2e4:	06e8      	lsls	r0, r5, #27
 802a2e6:	d503      	bpl.n	802a2f0 <_vfprintf_r+0xa88>
 802a2e8:	6833      	ldr	r3, [r6, #0]
 802a2ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a2ec:	601a      	str	r2, [r3, #0]
 802a2ee:	e7f7      	b.n	802a2e0 <_vfprintf_r+0xa78>
 802a2f0:	0669      	lsls	r1, r5, #25
 802a2f2:	d503      	bpl.n	802a2fc <_vfprintf_r+0xa94>
 802a2f4:	6833      	ldr	r3, [r6, #0]
 802a2f6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a2f8:	801a      	strh	r2, [r3, #0]
 802a2fa:	e7f1      	b.n	802a2e0 <_vfprintf_r+0xa78>
 802a2fc:	05aa      	lsls	r2, r5, #22
 802a2fe:	d5f3      	bpl.n	802a2e8 <_vfprintf_r+0xa80>
 802a300:	6833      	ldr	r3, [r6, #0]
 802a302:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a304:	701a      	strb	r2, [r3, #0]
 802a306:	e7eb      	b.n	802a2e0 <_vfprintf_r+0xa78>
 802a308:	f045 0510 	orr.w	r5, r5, #16
 802a30c:	f015 0320 	ands.w	r3, r5, #32
 802a310:	d020      	beq.n	802a354 <_vfprintf_r+0xaec>
 802a312:	3607      	adds	r6, #7
 802a314:	f026 0307 	bic.w	r3, r6, #7
 802a318:	461a      	mov	r2, r3
 802a31a:	685f      	ldr	r7, [r3, #4]
 802a31c:	f852 6b08 	ldr.w	r6, [r2], #8
 802a320:	9207      	str	r2, [sp, #28]
 802a322:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802a326:	2300      	movs	r3, #0
 802a328:	2200      	movs	r2, #0
 802a32a:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802a32e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802a332:	f000 8491 	beq.w	802ac58 <_vfprintf_r+0x13f0>
 802a336:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 802a33a:	9208      	str	r2, [sp, #32]
 802a33c:	ea56 0207 	orrs.w	r2, r6, r7
 802a340:	f040 848f 	bne.w	802ac62 <_vfprintf_r+0x13fa>
 802a344:	f1b9 0f00 	cmp.w	r9, #0
 802a348:	f000 80db 	beq.w	802a502 <_vfprintf_r+0xc9a>
 802a34c:	2b01      	cmp	r3, #1
 802a34e:	f040 848b 	bne.w	802ac68 <_vfprintf_r+0x1400>
 802a352:	e083      	b.n	802a45c <_vfprintf_r+0xbf4>
 802a354:	4632      	mov	r2, r6
 802a356:	f015 0710 	ands.w	r7, r5, #16
 802a35a:	f852 6b04 	ldr.w	r6, [r2], #4
 802a35e:	9207      	str	r2, [sp, #28]
 802a360:	d001      	beq.n	802a366 <_vfprintf_r+0xafe>
 802a362:	461f      	mov	r7, r3
 802a364:	e7dd      	b.n	802a322 <_vfprintf_r+0xaba>
 802a366:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802a36a:	d001      	beq.n	802a370 <_vfprintf_r+0xb08>
 802a36c:	b2b6      	uxth	r6, r6
 802a36e:	e7d8      	b.n	802a322 <_vfprintf_r+0xaba>
 802a370:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802a374:	d0d5      	beq.n	802a322 <_vfprintf_r+0xaba>
 802a376:	b2f6      	uxtb	r6, r6
 802a378:	e7f3      	b.n	802a362 <_vfprintf_r+0xafa>
 802a37a:	4633      	mov	r3, r6
 802a37c:	2278      	movs	r2, #120	@ 0x78
 802a37e:	f853 6b04 	ldr.w	r6, [r3], #4
 802a382:	9307      	str	r3, [sp, #28]
 802a384:	f647 0330 	movw	r3, #30768	@ 0x7830
 802a388:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 802a38c:	4b93      	ldr	r3, [pc, #588]	@ (802a5dc <_vfprintf_r+0xd74>)
 802a38e:	9319      	str	r3, [sp, #100]	@ 0x64
 802a390:	2700      	movs	r7, #0
 802a392:	f045 0502 	orr.w	r5, r5, #2
 802a396:	2302      	movs	r3, #2
 802a398:	9206      	str	r2, [sp, #24]
 802a39a:	e7c5      	b.n	802a328 <_vfprintf_r+0xac0>
 802a39c:	4633      	mov	r3, r6
 802a39e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802a3a2:	f853 8b04 	ldr.w	r8, [r3], #4
 802a3a6:	9307      	str	r3, [sp, #28]
 802a3a8:	f04f 0600 	mov.w	r6, #0
 802a3ac:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 802a3b0:	d00f      	beq.n	802a3d2 <_vfprintf_r+0xb6a>
 802a3b2:	464a      	mov	r2, r9
 802a3b4:	4631      	mov	r1, r6
 802a3b6:	4640      	mov	r0, r8
 802a3b8:	f7e5 ff22 	bl	8010200 <memchr>
 802a3bc:	4682      	mov	sl, r0
 802a3be:	2800      	cmp	r0, #0
 802a3c0:	f43f ac7a 	beq.w	8029cb8 <_vfprintf_r+0x450>
 802a3c4:	eba0 0908 	sub.w	r9, r0, r8
 802a3c8:	46b2      	mov	sl, r6
 802a3ca:	9610      	str	r6, [sp, #64]	@ 0x40
 802a3cc:	4637      	mov	r7, r6
 802a3ce:	9608      	str	r6, [sp, #32]
 802a3d0:	e5ec      	b.n	8029fac <_vfprintf_r+0x744>
 802a3d2:	4640      	mov	r0, r8
 802a3d4:	f7e5 ff64 	bl	80102a0 <strlen>
 802a3d8:	46b2      	mov	sl, r6
 802a3da:	4681      	mov	r9, r0
 802a3dc:	e46c      	b.n	8029cb8 <_vfprintf_r+0x450>
 802a3de:	f045 0510 	orr.w	r5, r5, #16
 802a3e2:	f015 0320 	ands.w	r3, r5, #32
 802a3e6:	d009      	beq.n	802a3fc <_vfprintf_r+0xb94>
 802a3e8:	3607      	adds	r6, #7
 802a3ea:	f026 0307 	bic.w	r3, r6, #7
 802a3ee:	461a      	mov	r2, r3
 802a3f0:	685f      	ldr	r7, [r3, #4]
 802a3f2:	f852 6b08 	ldr.w	r6, [r2], #8
 802a3f6:	9207      	str	r2, [sp, #28]
 802a3f8:	2301      	movs	r3, #1
 802a3fa:	e795      	b.n	802a328 <_vfprintf_r+0xac0>
 802a3fc:	4632      	mov	r2, r6
 802a3fe:	f015 0710 	ands.w	r7, r5, #16
 802a402:	f852 6b04 	ldr.w	r6, [r2], #4
 802a406:	9207      	str	r2, [sp, #28]
 802a408:	d001      	beq.n	802a40e <_vfprintf_r+0xba6>
 802a40a:	461f      	mov	r7, r3
 802a40c:	e7f4      	b.n	802a3f8 <_vfprintf_r+0xb90>
 802a40e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802a412:	d001      	beq.n	802a418 <_vfprintf_r+0xbb0>
 802a414:	b2b6      	uxth	r6, r6
 802a416:	e7ef      	b.n	802a3f8 <_vfprintf_r+0xb90>
 802a418:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802a41c:	d0ec      	beq.n	802a3f8 <_vfprintf_r+0xb90>
 802a41e:	b2f6      	uxtb	r6, r6
 802a420:	e7f3      	b.n	802a40a <_vfprintf_r+0xba2>
 802a422:	4b6f      	ldr	r3, [pc, #444]	@ (802a5e0 <_vfprintf_r+0xd78>)
 802a424:	f7ff bb33 	b.w	8029a8e <_vfprintf_r+0x226>
 802a428:	4632      	mov	r2, r6
 802a42a:	f015 0710 	ands.w	r7, r5, #16
 802a42e:	f852 6b04 	ldr.w	r6, [r2], #4
 802a432:	9207      	str	r2, [sp, #28]
 802a434:	d002      	beq.n	802a43c <_vfprintf_r+0xbd4>
 802a436:	461f      	mov	r7, r3
 802a438:	f7ff bb36 	b.w	8029aa8 <_vfprintf_r+0x240>
 802a43c:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802a440:	d002      	beq.n	802a448 <_vfprintf_r+0xbe0>
 802a442:	b2b6      	uxth	r6, r6
 802a444:	f7ff bb30 	b.w	8029aa8 <_vfprintf_r+0x240>
 802a448:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802a44c:	f43f ab2c 	beq.w	8029aa8 <_vfprintf_r+0x240>
 802a450:	b2f6      	uxtb	r6, r6
 802a452:	e7f0      	b.n	802a436 <_vfprintf_r+0xbce>
 802a454:	2e0a      	cmp	r6, #10
 802a456:	f177 0300 	sbcs.w	r3, r7, #0
 802a45a:	d207      	bcs.n	802a46c <_vfprintf_r+0xc04>
 802a45c:	3630      	adds	r6, #48	@ 0x30
 802a45e:	b2f6      	uxtb	r6, r6
 802a460:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 802a464:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 802a468:	f000 bc1a 	b.w	802aca0 <_vfprintf_r+0x1438>
 802a46c:	2300      	movs	r3, #0
 802a46e:	9304      	str	r3, [sp, #16]
 802a470:	9b08      	ldr	r3, [sp, #32]
 802a472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802a476:	ad52      	add	r5, sp, #328	@ 0x148
 802a478:	9310      	str	r3, [sp, #64]	@ 0x40
 802a47a:	220a      	movs	r2, #10
 802a47c:	2300      	movs	r3, #0
 802a47e:	4630      	mov	r0, r6
 802a480:	4639      	mov	r1, r7
 802a482:	f7e6 fc69 	bl	8010d58 <__aeabi_uldivmod>
 802a486:	9b04      	ldr	r3, [sp, #16]
 802a488:	9011      	str	r0, [sp, #68]	@ 0x44
 802a48a:	3301      	adds	r3, #1
 802a48c:	9304      	str	r3, [sp, #16]
 802a48e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a490:	3230      	adds	r2, #48	@ 0x30
 802a492:	468a      	mov	sl, r1
 802a494:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 802a498:	f805 2c01 	strb.w	r2, [r5, #-1]
 802a49c:	b1d3      	cbz	r3, 802a4d4 <_vfprintf_r+0xc6c>
 802a49e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a4a0:	9a04      	ldr	r2, [sp, #16]
 802a4a2:	781b      	ldrb	r3, [r3, #0]
 802a4a4:	429a      	cmp	r2, r3
 802a4a6:	d115      	bne.n	802a4d4 <_vfprintf_r+0xc6c>
 802a4a8:	2aff      	cmp	r2, #255	@ 0xff
 802a4aa:	d013      	beq.n	802a4d4 <_vfprintf_r+0xc6c>
 802a4ac:	2e0a      	cmp	r6, #10
 802a4ae:	f177 0300 	sbcs.w	r3, r7, #0
 802a4b2:	d30f      	bcc.n	802a4d4 <_vfprintf_r+0xc6c>
 802a4b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a4b6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802a4b8:	eba8 0803 	sub.w	r8, r8, r3
 802a4bc:	461a      	mov	r2, r3
 802a4be:	4640      	mov	r0, r8
 802a4c0:	f001 ff25 	bl	802c30e <strncpy>
 802a4c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a4c6:	785b      	ldrb	r3, [r3, #1]
 802a4c8:	b11b      	cbz	r3, 802a4d2 <_vfprintf_r+0xc6a>
 802a4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a4cc:	3301      	adds	r3, #1
 802a4ce:	9309      	str	r3, [sp, #36]	@ 0x24
 802a4d0:	2300      	movs	r3, #0
 802a4d2:	9304      	str	r3, [sp, #16]
 802a4d4:	2e0a      	cmp	r6, #10
 802a4d6:	f177 0700 	sbcs.w	r7, r7, #0
 802a4da:	f0c0 83e1 	bcc.w	802aca0 <_vfprintf_r+0x1438>
 802a4de:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802a4e0:	4657      	mov	r7, sl
 802a4e2:	4645      	mov	r5, r8
 802a4e4:	e7c9      	b.n	802a47a <_vfprintf_r+0xc12>
 802a4e6:	f006 030f 	and.w	r3, r6, #15
 802a4ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802a4ec:	0936      	lsrs	r6, r6, #4
 802a4ee:	5cd3      	ldrb	r3, [r2, r3]
 802a4f0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802a4f4:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 802a4f8:	093f      	lsrs	r7, r7, #4
 802a4fa:	ea56 0307 	orrs.w	r3, r6, r7
 802a4fe:	d1f2      	bne.n	802a4e6 <_vfprintf_r+0xc7e>
 802a500:	e3ce      	b.n	802aca0 <_vfprintf_r+0x1438>
 802a502:	b91b      	cbnz	r3, 802a50c <_vfprintf_r+0xca4>
 802a504:	07ed      	lsls	r5, r5, #31
 802a506:	d501      	bpl.n	802a50c <_vfprintf_r+0xca4>
 802a508:	2630      	movs	r6, #48	@ 0x30
 802a50a:	e7a9      	b.n	802a460 <_vfprintf_r+0xbf8>
 802a50c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802a510:	e3c6      	b.n	802aca0 <_vfprintf_r+0x1438>
 802a512:	9b06      	ldr	r3, [sp, #24]
 802a514:	2b00      	cmp	r3, #0
 802a516:	f000 8390 	beq.w	802ac3a <_vfprintf_r+0x13d2>
 802a51a:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802a51e:	2300      	movs	r3, #0
 802a520:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a524:	9607      	str	r6, [sp, #28]
 802a526:	f7ff bb5c 	b.w	8029be2 <_vfprintf_r+0x37a>
 802a52a:	2010      	movs	r0, #16
 802a52c:	4403      	add	r3, r0
 802a52e:	2a07      	cmp	r2, #7
 802a530:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a534:	6060      	str	r0, [r4, #4]
 802a536:	dd08      	ble.n	802a54a <_vfprintf_r+0xce2>
 802a538:	9803      	ldr	r0, [sp, #12]
 802a53a:	aa26      	add	r2, sp, #152	@ 0x98
 802a53c:	4659      	mov	r1, fp
 802a53e:	f000 fbff 	bl	802ad40 <__sprint_r>
 802a542:	2800      	cmp	r0, #0
 802a544:	f040 8357 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a548:	a929      	add	r1, sp, #164	@ 0xa4
 802a54a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a54c:	3b10      	subs	r3, #16
 802a54e:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a550:	460c      	mov	r4, r1
 802a552:	e547      	b.n	8029fe4 <_vfprintf_r+0x77c>
 802a554:	460c      	mov	r4, r1
 802a556:	e562      	b.n	802a01e <_vfprintf_r+0x7b6>
 802a558:	9803      	ldr	r0, [sp, #12]
 802a55a:	aa26      	add	r2, sp, #152	@ 0x98
 802a55c:	4659      	mov	r1, fp
 802a55e:	f000 fbef 	bl	802ad40 <__sprint_r>
 802a562:	2800      	cmp	r0, #0
 802a564:	f040 8347 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a568:	ac29      	add	r4, sp, #164	@ 0xa4
 802a56a:	e56a      	b.n	802a042 <_vfprintf_r+0x7da>
 802a56c:	9803      	ldr	r0, [sp, #12]
 802a56e:	aa26      	add	r2, sp, #152	@ 0x98
 802a570:	4659      	mov	r1, fp
 802a572:	f000 fbe5 	bl	802ad40 <__sprint_r>
 802a576:	2800      	cmp	r0, #0
 802a578:	f040 833d 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a57c:	ac29      	add	r4, sp, #164	@ 0xa4
 802a57e:	e570      	b.n	802a062 <_vfprintf_r+0x7fa>
 802a580:	2010      	movs	r0, #16
 802a582:	4403      	add	r3, r0
 802a584:	2a07      	cmp	r2, #7
 802a586:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a58a:	6060      	str	r0, [r4, #4]
 802a58c:	dd08      	ble.n	802a5a0 <_vfprintf_r+0xd38>
 802a58e:	9803      	ldr	r0, [sp, #12]
 802a590:	aa26      	add	r2, sp, #152	@ 0x98
 802a592:	4659      	mov	r1, fp
 802a594:	f000 fbd4 	bl	802ad40 <__sprint_r>
 802a598:	2800      	cmp	r0, #0
 802a59a:	f040 832c 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a59e:	a929      	add	r1, sp, #164	@ 0xa4
 802a5a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a5a2:	3b10      	subs	r3, #16
 802a5a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a5a6:	460c      	mov	r4, r1
 802a5a8:	e564      	b.n	802a074 <_vfprintf_r+0x80c>
 802a5aa:	460c      	mov	r4, r1
 802a5ac:	e57f      	b.n	802a0ae <_vfprintf_r+0x846>
 802a5ae:	2010      	movs	r0, #16
 802a5b0:	4403      	add	r3, r0
 802a5b2:	2a07      	cmp	r2, #7
 802a5b4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a5b8:	6060      	str	r0, [r4, #4]
 802a5ba:	dd08      	ble.n	802a5ce <_vfprintf_r+0xd66>
 802a5bc:	9803      	ldr	r0, [sp, #12]
 802a5be:	aa26      	add	r2, sp, #152	@ 0x98
 802a5c0:	4659      	mov	r1, fp
 802a5c2:	f000 fbbd 	bl	802ad40 <__sprint_r>
 802a5c6:	2800      	cmp	r0, #0
 802a5c8:	f040 8315 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a5cc:	a929      	add	r1, sp, #164	@ 0xa4
 802a5ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a5d0:	3b10      	subs	r3, #16
 802a5d2:	9310      	str	r3, [sp, #64]	@ 0x40
 802a5d4:	460c      	mov	r4, r1
 802a5d6:	e570      	b.n	802a0ba <_vfprintf_r+0x852>
 802a5d8:	460c      	mov	r4, r1
 802a5da:	e58b      	b.n	802a0f4 <_vfprintf_r+0x88c>
 802a5dc:	0803b01b 	.word	0x0803b01b
 802a5e0:	0803b02c 	.word	0x0803b02c
 802a5e4:	9b06      	ldr	r3, [sp, #24]
 802a5e6:	2b65      	cmp	r3, #101	@ 0x65
 802a5e8:	f340 8245 	ble.w	802aa76 <_vfprintf_r+0x120e>
 802a5ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802a5f0:	2200      	movs	r2, #0
 802a5f2:	2300      	movs	r3, #0
 802a5f4:	f7e6 fa80 	bl	8010af8 <__aeabi_dcmpeq>
 802a5f8:	2800      	cmp	r0, #0
 802a5fa:	d06a      	beq.n	802a6d2 <_vfprintf_r+0xe6a>
 802a5fc:	4b73      	ldr	r3, [pc, #460]	@ (802a7cc <_vfprintf_r+0xf64>)
 802a5fe:	6023      	str	r3, [r4, #0]
 802a600:	2301      	movs	r3, #1
 802a602:	6063      	str	r3, [r4, #4]
 802a604:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a606:	3301      	adds	r3, #1
 802a608:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a60a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a60c:	3301      	adds	r3, #1
 802a60e:	2b07      	cmp	r3, #7
 802a610:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a612:	dc37      	bgt.n	802a684 <_vfprintf_r+0xe1c>
 802a614:	3408      	adds	r4, #8
 802a616:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a618:	9a04      	ldr	r2, [sp, #16]
 802a61a:	4293      	cmp	r3, r2
 802a61c:	db02      	blt.n	802a624 <_vfprintf_r+0xdbc>
 802a61e:	07e9      	lsls	r1, r5, #31
 802a620:	f57f ad78 	bpl.w	802a114 <_vfprintf_r+0x8ac>
 802a624:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a626:	6023      	str	r3, [r4, #0]
 802a628:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a62a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a62c:	6063      	str	r3, [r4, #4]
 802a62e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a630:	4413      	add	r3, r2
 802a632:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a634:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a636:	3301      	adds	r3, #1
 802a638:	2b07      	cmp	r3, #7
 802a63a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a63c:	dc2c      	bgt.n	802a698 <_vfprintf_r+0xe30>
 802a63e:	3408      	adds	r4, #8
 802a640:	9b04      	ldr	r3, [sp, #16]
 802a642:	1e5e      	subs	r6, r3, #1
 802a644:	2e00      	cmp	r6, #0
 802a646:	f77f ad65 	ble.w	802a114 <_vfprintf_r+0x8ac>
 802a64a:	4f61      	ldr	r7, [pc, #388]	@ (802a7d0 <_vfprintf_r+0xf68>)
 802a64c:	f04f 0810 	mov.w	r8, #16
 802a650:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802a654:	2e10      	cmp	r6, #16
 802a656:	f103 0301 	add.w	r3, r3, #1
 802a65a:	f104 0108 	add.w	r1, r4, #8
 802a65e:	6027      	str	r7, [r4, #0]
 802a660:	dc24      	bgt.n	802a6ac <_vfprintf_r+0xe44>
 802a662:	6066      	str	r6, [r4, #4]
 802a664:	2b07      	cmp	r3, #7
 802a666:	4416      	add	r6, r2
 802a668:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802a66c:	f340 82a2 	ble.w	802abb4 <_vfprintf_r+0x134c>
 802a670:	9803      	ldr	r0, [sp, #12]
 802a672:	aa26      	add	r2, sp, #152	@ 0x98
 802a674:	4659      	mov	r1, fp
 802a676:	f000 fb63 	bl	802ad40 <__sprint_r>
 802a67a:	2800      	cmp	r0, #0
 802a67c:	f040 82bb 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a680:	ac29      	add	r4, sp, #164	@ 0xa4
 802a682:	e547      	b.n	802a114 <_vfprintf_r+0x8ac>
 802a684:	9803      	ldr	r0, [sp, #12]
 802a686:	aa26      	add	r2, sp, #152	@ 0x98
 802a688:	4659      	mov	r1, fp
 802a68a:	f000 fb59 	bl	802ad40 <__sprint_r>
 802a68e:	2800      	cmp	r0, #0
 802a690:	f040 82b1 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a694:	ac29      	add	r4, sp, #164	@ 0xa4
 802a696:	e7be      	b.n	802a616 <_vfprintf_r+0xdae>
 802a698:	9803      	ldr	r0, [sp, #12]
 802a69a:	aa26      	add	r2, sp, #152	@ 0x98
 802a69c:	4659      	mov	r1, fp
 802a69e:	f000 fb4f 	bl	802ad40 <__sprint_r>
 802a6a2:	2800      	cmp	r0, #0
 802a6a4:	f040 82a7 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a6a8:	ac29      	add	r4, sp, #164	@ 0xa4
 802a6aa:	e7c9      	b.n	802a640 <_vfprintf_r+0xdd8>
 802a6ac:	3210      	adds	r2, #16
 802a6ae:	2b07      	cmp	r3, #7
 802a6b0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802a6b4:	f8c4 8004 	str.w	r8, [r4, #4]
 802a6b8:	dd08      	ble.n	802a6cc <_vfprintf_r+0xe64>
 802a6ba:	9803      	ldr	r0, [sp, #12]
 802a6bc:	aa26      	add	r2, sp, #152	@ 0x98
 802a6be:	4659      	mov	r1, fp
 802a6c0:	f000 fb3e 	bl	802ad40 <__sprint_r>
 802a6c4:	2800      	cmp	r0, #0
 802a6c6:	f040 8296 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a6ca:	a929      	add	r1, sp, #164	@ 0xa4
 802a6cc:	3e10      	subs	r6, #16
 802a6ce:	460c      	mov	r4, r1
 802a6d0:	e7be      	b.n	802a650 <_vfprintf_r+0xde8>
 802a6d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a6d4:	2b00      	cmp	r3, #0
 802a6d6:	dc7d      	bgt.n	802a7d4 <_vfprintf_r+0xf6c>
 802a6d8:	4b3c      	ldr	r3, [pc, #240]	@ (802a7cc <_vfprintf_r+0xf64>)
 802a6da:	6023      	str	r3, [r4, #0]
 802a6dc:	2301      	movs	r3, #1
 802a6de:	6063      	str	r3, [r4, #4]
 802a6e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a6e2:	3301      	adds	r3, #1
 802a6e4:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a6e6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a6e8:	3301      	adds	r3, #1
 802a6ea:	2b07      	cmp	r3, #7
 802a6ec:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a6ee:	dc46      	bgt.n	802a77e <_vfprintf_r+0xf16>
 802a6f0:	3408      	adds	r4, #8
 802a6f2:	9904      	ldr	r1, [sp, #16]
 802a6f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a6f6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802a6f8:	430b      	orrs	r3, r1
 802a6fa:	f005 0101 	and.w	r1, r5, #1
 802a6fe:	430b      	orrs	r3, r1
 802a700:	f43f ad08 	beq.w	802a114 <_vfprintf_r+0x8ac>
 802a704:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a706:	6023      	str	r3, [r4, #0]
 802a708:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a70a:	6063      	str	r3, [r4, #4]
 802a70c:	441a      	add	r2, r3
 802a70e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a710:	9228      	str	r2, [sp, #160]	@ 0xa0
 802a712:	3301      	adds	r3, #1
 802a714:	2b07      	cmp	r3, #7
 802a716:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a718:	dc3b      	bgt.n	802a792 <_vfprintf_r+0xf2a>
 802a71a:	f104 0308 	add.w	r3, r4, #8
 802a71e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802a720:	2e00      	cmp	r6, #0
 802a722:	da1b      	bge.n	802a75c <_vfprintf_r+0xef4>
 802a724:	4f2a      	ldr	r7, [pc, #168]	@ (802a7d0 <_vfprintf_r+0xf68>)
 802a726:	4276      	negs	r6, r6
 802a728:	461a      	mov	r2, r3
 802a72a:	2410      	movs	r4, #16
 802a72c:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 802a730:	2e10      	cmp	r6, #16
 802a732:	f101 0101 	add.w	r1, r1, #1
 802a736:	f103 0308 	add.w	r3, r3, #8
 802a73a:	6017      	str	r7, [r2, #0]
 802a73c:	dc33      	bgt.n	802a7a6 <_vfprintf_r+0xf3e>
 802a73e:	6056      	str	r6, [r2, #4]
 802a740:	2907      	cmp	r1, #7
 802a742:	4406      	add	r6, r0
 802a744:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 802a748:	dd08      	ble.n	802a75c <_vfprintf_r+0xef4>
 802a74a:	9803      	ldr	r0, [sp, #12]
 802a74c:	aa26      	add	r2, sp, #152	@ 0x98
 802a74e:	4659      	mov	r1, fp
 802a750:	f000 faf6 	bl	802ad40 <__sprint_r>
 802a754:	2800      	cmp	r0, #0
 802a756:	f040 824e 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a75a:	ab29      	add	r3, sp, #164	@ 0xa4
 802a75c:	9a04      	ldr	r2, [sp, #16]
 802a75e:	9904      	ldr	r1, [sp, #16]
 802a760:	605a      	str	r2, [r3, #4]
 802a762:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802a764:	f8c3 8000 	str.w	r8, [r3]
 802a768:	440a      	add	r2, r1
 802a76a:	9228      	str	r2, [sp, #160]	@ 0xa0
 802a76c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802a76e:	3201      	adds	r2, #1
 802a770:	2a07      	cmp	r2, #7
 802a772:	9227      	str	r2, [sp, #156]	@ 0x9c
 802a774:	f73f af7c 	bgt.w	802a670 <_vfprintf_r+0xe08>
 802a778:	f103 0408 	add.w	r4, r3, #8
 802a77c:	e4ca      	b.n	802a114 <_vfprintf_r+0x8ac>
 802a77e:	9803      	ldr	r0, [sp, #12]
 802a780:	aa26      	add	r2, sp, #152	@ 0x98
 802a782:	4659      	mov	r1, fp
 802a784:	f000 fadc 	bl	802ad40 <__sprint_r>
 802a788:	2800      	cmp	r0, #0
 802a78a:	f040 8234 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a78e:	ac29      	add	r4, sp, #164	@ 0xa4
 802a790:	e7af      	b.n	802a6f2 <_vfprintf_r+0xe8a>
 802a792:	9803      	ldr	r0, [sp, #12]
 802a794:	aa26      	add	r2, sp, #152	@ 0x98
 802a796:	4659      	mov	r1, fp
 802a798:	f000 fad2 	bl	802ad40 <__sprint_r>
 802a79c:	2800      	cmp	r0, #0
 802a79e:	f040 822a 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a7a2:	ab29      	add	r3, sp, #164	@ 0xa4
 802a7a4:	e7bb      	b.n	802a71e <_vfprintf_r+0xeb6>
 802a7a6:	3010      	adds	r0, #16
 802a7a8:	2907      	cmp	r1, #7
 802a7aa:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 802a7ae:	6054      	str	r4, [r2, #4]
 802a7b0:	dd08      	ble.n	802a7c4 <_vfprintf_r+0xf5c>
 802a7b2:	9803      	ldr	r0, [sp, #12]
 802a7b4:	aa26      	add	r2, sp, #152	@ 0x98
 802a7b6:	4659      	mov	r1, fp
 802a7b8:	f000 fac2 	bl	802ad40 <__sprint_r>
 802a7bc:	2800      	cmp	r0, #0
 802a7be:	f040 821a 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a7c2:	ab29      	add	r3, sp, #164	@ 0xa4
 802a7c4:	3e10      	subs	r6, #16
 802a7c6:	461a      	mov	r2, r3
 802a7c8:	e7b0      	b.n	802a72c <_vfprintf_r+0xec4>
 802a7ca:	bf00      	nop
 802a7cc:	0803b03d 	.word	0x0803b03d
 802a7d0:	0803b03f 	.word	0x0803b03f
 802a7d4:	9b04      	ldr	r3, [sp, #16]
 802a7d6:	4443      	add	r3, r8
 802a7d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a7da:	9b04      	ldr	r3, [sp, #16]
 802a7dc:	42b3      	cmp	r3, r6
 802a7de:	bfa8      	it	ge
 802a7e0:	4633      	movge	r3, r6
 802a7e2:	2b00      	cmp	r3, #0
 802a7e4:	4699      	mov	r9, r3
 802a7e6:	dd0b      	ble.n	802a800 <_vfprintf_r+0xf98>
 802a7e8:	e9c4 8300 	strd	r8, r3, [r4]
 802a7ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a7ee:	444b      	add	r3, r9
 802a7f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a7f2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a7f4:	3301      	adds	r3, #1
 802a7f6:	2b07      	cmp	r3, #7
 802a7f8:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a7fa:	f300 8089 	bgt.w	802a910 <_vfprintf_r+0x10a8>
 802a7fe:	3408      	adds	r4, #8
 802a800:	f1b9 0f00 	cmp.w	r9, #0
 802a804:	bfac      	ite	ge
 802a806:	eba6 0309 	subge.w	r3, r6, r9
 802a80a:	4633      	movlt	r3, r6
 802a80c:	2b00      	cmp	r3, #0
 802a80e:	9306      	str	r3, [sp, #24]
 802a810:	dd1c      	ble.n	802a84c <_vfprintf_r+0xfe4>
 802a812:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 802ab78 <_vfprintf_r+0x1310>
 802a816:	9806      	ldr	r0, [sp, #24]
 802a818:	f8c4 9000 	str.w	r9, [r4]
 802a81c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a820:	2810      	cmp	r0, #16
 802a822:	f102 0201 	add.w	r2, r2, #1
 802a826:	f104 0108 	add.w	r1, r4, #8
 802a82a:	dc7b      	bgt.n	802a924 <_vfprintf_r+0x10bc>
 802a82c:	4403      	add	r3, r0
 802a82e:	2a07      	cmp	r2, #7
 802a830:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a834:	6060      	str	r0, [r4, #4]
 802a836:	f340 808a 	ble.w	802a94e <_vfprintf_r+0x10e6>
 802a83a:	9803      	ldr	r0, [sp, #12]
 802a83c:	aa26      	add	r2, sp, #152	@ 0x98
 802a83e:	4659      	mov	r1, fp
 802a840:	f000 fa7e 	bl	802ad40 <__sprint_r>
 802a844:	2800      	cmp	r0, #0
 802a846:	f040 81d6 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a84a:	ac29      	add	r4, sp, #164	@ 0xa4
 802a84c:	056a      	lsls	r2, r5, #21
 802a84e:	44b0      	add	r8, r6
 802a850:	d508      	bpl.n	802a864 <_vfprintf_r+0xffc>
 802a852:	9b08      	ldr	r3, [sp, #32]
 802a854:	2b00      	cmp	r3, #0
 802a856:	d17c      	bne.n	802a952 <_vfprintf_r+0x10ea>
 802a858:	2f00      	cmp	r7, #0
 802a85a:	d17c      	bne.n	802a956 <_vfprintf_r+0x10ee>
 802a85c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a85e:	4598      	cmp	r8, r3
 802a860:	bf28      	it	cs
 802a862:	4698      	movcs	r8, r3
 802a864:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a866:	9a04      	ldr	r2, [sp, #16]
 802a868:	4293      	cmp	r3, r2
 802a86a:	db01      	blt.n	802a870 <_vfprintf_r+0x1008>
 802a86c:	07eb      	lsls	r3, r5, #31
 802a86e:	d50e      	bpl.n	802a88e <_vfprintf_r+0x1026>
 802a870:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a872:	6023      	str	r3, [r4, #0]
 802a874:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a876:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a878:	6063      	str	r3, [r4, #4]
 802a87a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a87c:	4413      	add	r3, r2
 802a87e:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a880:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a882:	3301      	adds	r3, #1
 802a884:	2b07      	cmp	r3, #7
 802a886:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a888:	f300 80e1 	bgt.w	802aa4e <_vfprintf_r+0x11e6>
 802a88c:	3408      	adds	r4, #8
 802a88e:	9b04      	ldr	r3, [sp, #16]
 802a890:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 802a892:	1bdf      	subs	r7, r3, r7
 802a894:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a896:	eba3 0308 	sub.w	r3, r3, r8
 802a89a:	429f      	cmp	r7, r3
 802a89c:	bfa8      	it	ge
 802a89e:	461f      	movge	r7, r3
 802a8a0:	2f00      	cmp	r7, #0
 802a8a2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a8a4:	dd0a      	ble.n	802a8bc <_vfprintf_r+0x1054>
 802a8a6:	443b      	add	r3, r7
 802a8a8:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a8aa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a8ac:	3301      	adds	r3, #1
 802a8ae:	2b07      	cmp	r3, #7
 802a8b0:	e9c4 8700 	strd	r8, r7, [r4]
 802a8b4:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a8b6:	f300 80d4 	bgt.w	802aa62 <_vfprintf_r+0x11fa>
 802a8ba:	3408      	adds	r4, #8
 802a8bc:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802a8be:	9b04      	ldr	r3, [sp, #16]
 802a8c0:	2f00      	cmp	r7, #0
 802a8c2:	eba3 0606 	sub.w	r6, r3, r6
 802a8c6:	bfa8      	it	ge
 802a8c8:	1bf6      	subge	r6, r6, r7
 802a8ca:	2e00      	cmp	r6, #0
 802a8cc:	f77f ac22 	ble.w	802a114 <_vfprintf_r+0x8ac>
 802a8d0:	4fa9      	ldr	r7, [pc, #676]	@ (802ab78 <_vfprintf_r+0x1310>)
 802a8d2:	f04f 0810 	mov.w	r8, #16
 802a8d6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802a8da:	2e10      	cmp	r6, #16
 802a8dc:	f103 0301 	add.w	r3, r3, #1
 802a8e0:	f104 0108 	add.w	r1, r4, #8
 802a8e4:	6027      	str	r7, [r4, #0]
 802a8e6:	f77f aebc 	ble.w	802a662 <_vfprintf_r+0xdfa>
 802a8ea:	3210      	adds	r2, #16
 802a8ec:	2b07      	cmp	r3, #7
 802a8ee:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802a8f2:	f8c4 8004 	str.w	r8, [r4, #4]
 802a8f6:	dd08      	ble.n	802a90a <_vfprintf_r+0x10a2>
 802a8f8:	9803      	ldr	r0, [sp, #12]
 802a8fa:	aa26      	add	r2, sp, #152	@ 0x98
 802a8fc:	4659      	mov	r1, fp
 802a8fe:	f000 fa1f 	bl	802ad40 <__sprint_r>
 802a902:	2800      	cmp	r0, #0
 802a904:	f040 8177 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a908:	a929      	add	r1, sp, #164	@ 0xa4
 802a90a:	3e10      	subs	r6, #16
 802a90c:	460c      	mov	r4, r1
 802a90e:	e7e2      	b.n	802a8d6 <_vfprintf_r+0x106e>
 802a910:	9803      	ldr	r0, [sp, #12]
 802a912:	aa26      	add	r2, sp, #152	@ 0x98
 802a914:	4659      	mov	r1, fp
 802a916:	f000 fa13 	bl	802ad40 <__sprint_r>
 802a91a:	2800      	cmp	r0, #0
 802a91c:	f040 816b 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a920:	ac29      	add	r4, sp, #164	@ 0xa4
 802a922:	e76d      	b.n	802a800 <_vfprintf_r+0xf98>
 802a924:	2010      	movs	r0, #16
 802a926:	4403      	add	r3, r0
 802a928:	2a07      	cmp	r2, #7
 802a92a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a92e:	6060      	str	r0, [r4, #4]
 802a930:	dd08      	ble.n	802a944 <_vfprintf_r+0x10dc>
 802a932:	9803      	ldr	r0, [sp, #12]
 802a934:	aa26      	add	r2, sp, #152	@ 0x98
 802a936:	4659      	mov	r1, fp
 802a938:	f000 fa02 	bl	802ad40 <__sprint_r>
 802a93c:	2800      	cmp	r0, #0
 802a93e:	f040 815a 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a942:	a929      	add	r1, sp, #164	@ 0xa4
 802a944:	9b06      	ldr	r3, [sp, #24]
 802a946:	3b10      	subs	r3, #16
 802a948:	9306      	str	r3, [sp, #24]
 802a94a:	460c      	mov	r4, r1
 802a94c:	e763      	b.n	802a816 <_vfprintf_r+0xfae>
 802a94e:	460c      	mov	r4, r1
 802a950:	e77c      	b.n	802a84c <_vfprintf_r+0xfe4>
 802a952:	2f00      	cmp	r7, #0
 802a954:	d04b      	beq.n	802a9ee <_vfprintf_r+0x1186>
 802a956:	3f01      	subs	r7, #1
 802a958:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802a95a:	6023      	str	r3, [r4, #0]
 802a95c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a95e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802a960:	6063      	str	r3, [r4, #4]
 802a962:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a964:	4413      	add	r3, r2
 802a966:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a968:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a96a:	3301      	adds	r3, #1
 802a96c:	2b07      	cmp	r3, #7
 802a96e:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a970:	dc44      	bgt.n	802a9fc <_vfprintf_r+0x1194>
 802a972:	3408      	adds	r4, #8
 802a974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a976:	f893 9000 	ldrb.w	r9, [r3]
 802a97a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a97c:	eba3 0308 	sub.w	r3, r3, r8
 802a980:	4599      	cmp	r9, r3
 802a982:	bfa8      	it	ge
 802a984:	4699      	movge	r9, r3
 802a986:	f1b9 0f00 	cmp.w	r9, #0
 802a98a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a98c:	dd09      	ble.n	802a9a2 <_vfprintf_r+0x113a>
 802a98e:	444b      	add	r3, r9
 802a990:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a992:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a994:	3301      	adds	r3, #1
 802a996:	2b07      	cmp	r3, #7
 802a998:	e9c4 8900 	strd	r8, r9, [r4]
 802a99c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a99e:	dc37      	bgt.n	802aa10 <_vfprintf_r+0x11a8>
 802a9a0:	3408      	adds	r4, #8
 802a9a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a9a4:	781e      	ldrb	r6, [r3, #0]
 802a9a6:	f1b9 0f00 	cmp.w	r9, #0
 802a9aa:	bfa8      	it	ge
 802a9ac:	eba6 0609 	subge.w	r6, r6, r9
 802a9b0:	2e00      	cmp	r6, #0
 802a9b2:	dd18      	ble.n	802a9e6 <_vfprintf_r+0x117e>
 802a9b4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802a9b8:	486f      	ldr	r0, [pc, #444]	@ (802ab78 <_vfprintf_r+0x1310>)
 802a9ba:	6020      	str	r0, [r4, #0]
 802a9bc:	2e10      	cmp	r6, #16
 802a9be:	f103 0301 	add.w	r3, r3, #1
 802a9c2:	f104 0108 	add.w	r1, r4, #8
 802a9c6:	dc2d      	bgt.n	802aa24 <_vfprintf_r+0x11bc>
 802a9c8:	6066      	str	r6, [r4, #4]
 802a9ca:	2b07      	cmp	r3, #7
 802a9cc:	4416      	add	r6, r2
 802a9ce:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802a9d2:	dd3a      	ble.n	802aa4a <_vfprintf_r+0x11e2>
 802a9d4:	9803      	ldr	r0, [sp, #12]
 802a9d6:	aa26      	add	r2, sp, #152	@ 0x98
 802a9d8:	4659      	mov	r1, fp
 802a9da:	f000 f9b1 	bl	802ad40 <__sprint_r>
 802a9de:	2800      	cmp	r0, #0
 802a9e0:	f040 8109 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802a9e4:	ac29      	add	r4, sp, #164	@ 0xa4
 802a9e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a9e8:	781b      	ldrb	r3, [r3, #0]
 802a9ea:	4498      	add	r8, r3
 802a9ec:	e731      	b.n	802a852 <_vfprintf_r+0xfea>
 802a9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a9f0:	3b01      	subs	r3, #1
 802a9f2:	9309      	str	r3, [sp, #36]	@ 0x24
 802a9f4:	9b08      	ldr	r3, [sp, #32]
 802a9f6:	3b01      	subs	r3, #1
 802a9f8:	9308      	str	r3, [sp, #32]
 802a9fa:	e7ad      	b.n	802a958 <_vfprintf_r+0x10f0>
 802a9fc:	9803      	ldr	r0, [sp, #12]
 802a9fe:	aa26      	add	r2, sp, #152	@ 0x98
 802aa00:	4659      	mov	r1, fp
 802aa02:	f000 f99d 	bl	802ad40 <__sprint_r>
 802aa06:	2800      	cmp	r0, #0
 802aa08:	f040 80f5 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802aa0c:	ac29      	add	r4, sp, #164	@ 0xa4
 802aa0e:	e7b1      	b.n	802a974 <_vfprintf_r+0x110c>
 802aa10:	9803      	ldr	r0, [sp, #12]
 802aa12:	aa26      	add	r2, sp, #152	@ 0x98
 802aa14:	4659      	mov	r1, fp
 802aa16:	f000 f993 	bl	802ad40 <__sprint_r>
 802aa1a:	2800      	cmp	r0, #0
 802aa1c:	f040 80eb 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802aa20:	ac29      	add	r4, sp, #164	@ 0xa4
 802aa22:	e7be      	b.n	802a9a2 <_vfprintf_r+0x113a>
 802aa24:	2010      	movs	r0, #16
 802aa26:	4402      	add	r2, r0
 802aa28:	2b07      	cmp	r3, #7
 802aa2a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802aa2e:	6060      	str	r0, [r4, #4]
 802aa30:	dd08      	ble.n	802aa44 <_vfprintf_r+0x11dc>
 802aa32:	9803      	ldr	r0, [sp, #12]
 802aa34:	aa26      	add	r2, sp, #152	@ 0x98
 802aa36:	4659      	mov	r1, fp
 802aa38:	f000 f982 	bl	802ad40 <__sprint_r>
 802aa3c:	2800      	cmp	r0, #0
 802aa3e:	f040 80da 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802aa42:	a929      	add	r1, sp, #164	@ 0xa4
 802aa44:	3e10      	subs	r6, #16
 802aa46:	460c      	mov	r4, r1
 802aa48:	e7b4      	b.n	802a9b4 <_vfprintf_r+0x114c>
 802aa4a:	460c      	mov	r4, r1
 802aa4c:	e7cb      	b.n	802a9e6 <_vfprintf_r+0x117e>
 802aa4e:	9803      	ldr	r0, [sp, #12]
 802aa50:	aa26      	add	r2, sp, #152	@ 0x98
 802aa52:	4659      	mov	r1, fp
 802aa54:	f000 f974 	bl	802ad40 <__sprint_r>
 802aa58:	2800      	cmp	r0, #0
 802aa5a:	f040 80cc 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802aa5e:	ac29      	add	r4, sp, #164	@ 0xa4
 802aa60:	e715      	b.n	802a88e <_vfprintf_r+0x1026>
 802aa62:	9803      	ldr	r0, [sp, #12]
 802aa64:	aa26      	add	r2, sp, #152	@ 0x98
 802aa66:	4659      	mov	r1, fp
 802aa68:	f000 f96a 	bl	802ad40 <__sprint_r>
 802aa6c:	2800      	cmp	r0, #0
 802aa6e:	f040 80c2 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802aa72:	ac29      	add	r4, sp, #164	@ 0xa4
 802aa74:	e722      	b.n	802a8bc <_vfprintf_r+0x1054>
 802aa76:	9904      	ldr	r1, [sp, #16]
 802aa78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802aa7a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802aa7c:	2901      	cmp	r1, #1
 802aa7e:	f103 0301 	add.w	r3, r3, #1
 802aa82:	f102 0201 	add.w	r2, r2, #1
 802aa86:	f104 0608 	add.w	r6, r4, #8
 802aa8a:	dc02      	bgt.n	802aa92 <_vfprintf_r+0x122a>
 802aa8c:	07ef      	lsls	r7, r5, #31
 802aa8e:	f140 8086 	bpl.w	802ab9e <_vfprintf_r+0x1336>
 802aa92:	2101      	movs	r1, #1
 802aa94:	2a07      	cmp	r2, #7
 802aa96:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802aa9a:	f8c4 8000 	str.w	r8, [r4]
 802aa9e:	6061      	str	r1, [r4, #4]
 802aaa0:	dd08      	ble.n	802aab4 <_vfprintf_r+0x124c>
 802aaa2:	9803      	ldr	r0, [sp, #12]
 802aaa4:	aa26      	add	r2, sp, #152	@ 0x98
 802aaa6:	4659      	mov	r1, fp
 802aaa8:	f000 f94a 	bl	802ad40 <__sprint_r>
 802aaac:	2800      	cmp	r0, #0
 802aaae:	f040 80a2 	bne.w	802abf6 <_vfprintf_r+0x138e>
 802aab2:	ae29      	add	r6, sp, #164	@ 0xa4
 802aab4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802aab6:	6033      	str	r3, [r6, #0]
 802aab8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802aaba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802aabc:	6073      	str	r3, [r6, #4]
 802aabe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802aac0:	4413      	add	r3, r2
 802aac2:	9328      	str	r3, [sp, #160]	@ 0xa0
 802aac4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802aac6:	3301      	adds	r3, #1
 802aac8:	2b07      	cmp	r3, #7
 802aaca:	9327      	str	r3, [sp, #156]	@ 0x9c
 802aacc:	dc33      	bgt.n	802ab36 <_vfprintf_r+0x12ce>
 802aace:	3608      	adds	r6, #8
 802aad0:	9b04      	ldr	r3, [sp, #16]
 802aad2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802aad6:	1e5c      	subs	r4, r3, #1
 802aad8:	2200      	movs	r2, #0
 802aada:	2300      	movs	r3, #0
 802aadc:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 802aae0:	f7e6 f80a 	bl	8010af8 <__aeabi_dcmpeq>
 802aae4:	2800      	cmp	r0, #0
 802aae6:	d12f      	bne.n	802ab48 <_vfprintf_r+0x12e0>
 802aae8:	f108 0201 	add.w	r2, r8, #1
 802aaec:	e9c6 2400 	strd	r2, r4, [r6]
 802aaf0:	9a04      	ldr	r2, [sp, #16]
 802aaf2:	f109 0301 	add.w	r3, r9, #1
 802aaf6:	3f01      	subs	r7, #1
 802aaf8:	4417      	add	r7, r2
 802aafa:	2b07      	cmp	r3, #7
 802aafc:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 802ab00:	dd56      	ble.n	802abb0 <_vfprintf_r+0x1348>
 802ab02:	9803      	ldr	r0, [sp, #12]
 802ab04:	aa26      	add	r2, sp, #152	@ 0x98
 802ab06:	4659      	mov	r1, fp
 802ab08:	f000 f91a 	bl	802ad40 <__sprint_r>
 802ab0c:	2800      	cmp	r0, #0
 802ab0e:	d172      	bne.n	802abf6 <_vfprintf_r+0x138e>
 802ab10:	ae29      	add	r6, sp, #164	@ 0xa4
 802ab12:	ab22      	add	r3, sp, #136	@ 0x88
 802ab14:	6033      	str	r3, [r6, #0]
 802ab16:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802ab18:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802ab1a:	6073      	str	r3, [r6, #4]
 802ab1c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ab1e:	4413      	add	r3, r2
 802ab20:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ab22:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ab24:	3301      	adds	r3, #1
 802ab26:	2b07      	cmp	r3, #7
 802ab28:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ab2a:	f73f ada1 	bgt.w	802a670 <_vfprintf_r+0xe08>
 802ab2e:	f106 0408 	add.w	r4, r6, #8
 802ab32:	f7ff baef 	b.w	802a114 <_vfprintf_r+0x8ac>
 802ab36:	9803      	ldr	r0, [sp, #12]
 802ab38:	aa26      	add	r2, sp, #152	@ 0x98
 802ab3a:	4659      	mov	r1, fp
 802ab3c:	f000 f900 	bl	802ad40 <__sprint_r>
 802ab40:	2800      	cmp	r0, #0
 802ab42:	d158      	bne.n	802abf6 <_vfprintf_r+0x138e>
 802ab44:	ae29      	add	r6, sp, #164	@ 0xa4
 802ab46:	e7c3      	b.n	802aad0 <_vfprintf_r+0x1268>
 802ab48:	9b04      	ldr	r3, [sp, #16]
 802ab4a:	2b01      	cmp	r3, #1
 802ab4c:	dde1      	ble.n	802ab12 <_vfprintf_r+0x12aa>
 802ab4e:	4f0a      	ldr	r7, [pc, #40]	@ (802ab78 <_vfprintf_r+0x1310>)
 802ab50:	f04f 0810 	mov.w	r8, #16
 802ab54:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802ab58:	2c10      	cmp	r4, #16
 802ab5a:	f103 0301 	add.w	r3, r3, #1
 802ab5e:	f106 0108 	add.w	r1, r6, #8
 802ab62:	6037      	str	r7, [r6, #0]
 802ab64:	dc0a      	bgt.n	802ab7c <_vfprintf_r+0x1314>
 802ab66:	6074      	str	r4, [r6, #4]
 802ab68:	2b07      	cmp	r3, #7
 802ab6a:	4414      	add	r4, r2
 802ab6c:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 802ab70:	dcc7      	bgt.n	802ab02 <_vfprintf_r+0x129a>
 802ab72:	460e      	mov	r6, r1
 802ab74:	e7cd      	b.n	802ab12 <_vfprintf_r+0x12aa>
 802ab76:	bf00      	nop
 802ab78:	0803b03f 	.word	0x0803b03f
 802ab7c:	3210      	adds	r2, #16
 802ab7e:	2b07      	cmp	r3, #7
 802ab80:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802ab84:	f8c6 8004 	str.w	r8, [r6, #4]
 802ab88:	dd06      	ble.n	802ab98 <_vfprintf_r+0x1330>
 802ab8a:	9803      	ldr	r0, [sp, #12]
 802ab8c:	aa26      	add	r2, sp, #152	@ 0x98
 802ab8e:	4659      	mov	r1, fp
 802ab90:	f000 f8d6 	bl	802ad40 <__sprint_r>
 802ab94:	bb78      	cbnz	r0, 802abf6 <_vfprintf_r+0x138e>
 802ab96:	a929      	add	r1, sp, #164	@ 0xa4
 802ab98:	3c10      	subs	r4, #16
 802ab9a:	460e      	mov	r6, r1
 802ab9c:	e7da      	b.n	802ab54 <_vfprintf_r+0x12ec>
 802ab9e:	2101      	movs	r1, #1
 802aba0:	2a07      	cmp	r2, #7
 802aba2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802aba6:	f8c4 8000 	str.w	r8, [r4]
 802abaa:	6061      	str	r1, [r4, #4]
 802abac:	ddb1      	ble.n	802ab12 <_vfprintf_r+0x12aa>
 802abae:	e7a8      	b.n	802ab02 <_vfprintf_r+0x129a>
 802abb0:	3608      	adds	r6, #8
 802abb2:	e7ae      	b.n	802ab12 <_vfprintf_r+0x12aa>
 802abb4:	460c      	mov	r4, r1
 802abb6:	f7ff baad 	b.w	802a114 <_vfprintf_r+0x8ac>
 802abba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802abbc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802abbe:	1a9d      	subs	r5, r3, r2
 802abc0:	2d00      	cmp	r5, #0
 802abc2:	f77f aaaa 	ble.w	802a11a <_vfprintf_r+0x8b2>
 802abc6:	4e3d      	ldr	r6, [pc, #244]	@ (802acbc <_vfprintf_r+0x1454>)
 802abc8:	2710      	movs	r7, #16
 802abca:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802abce:	2d10      	cmp	r5, #16
 802abd0:	f103 0301 	add.w	r3, r3, #1
 802abd4:	6026      	str	r6, [r4, #0]
 802abd6:	dc18      	bgt.n	802ac0a <_vfprintf_r+0x13a2>
 802abd8:	6065      	str	r5, [r4, #4]
 802abda:	2b07      	cmp	r3, #7
 802abdc:	4415      	add	r5, r2
 802abde:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 802abe2:	f77f aa9a 	ble.w	802a11a <_vfprintf_r+0x8b2>
 802abe6:	9803      	ldr	r0, [sp, #12]
 802abe8:	aa26      	add	r2, sp, #152	@ 0x98
 802abea:	4659      	mov	r1, fp
 802abec:	f000 f8a8 	bl	802ad40 <__sprint_r>
 802abf0:	2800      	cmp	r0, #0
 802abf2:	f43f aa92 	beq.w	802a11a <_vfprintf_r+0x8b2>
 802abf6:	f1ba 0f00 	cmp.w	sl, #0
 802abfa:	f43f a892 	beq.w	8029d22 <_vfprintf_r+0x4ba>
 802abfe:	9803      	ldr	r0, [sp, #12]
 802ac00:	4651      	mov	r1, sl
 802ac02:	f003 fc7b 	bl	802e4fc <_free_r>
 802ac06:	f7ff b88c 	b.w	8029d22 <_vfprintf_r+0x4ba>
 802ac0a:	3210      	adds	r2, #16
 802ac0c:	2b07      	cmp	r3, #7
 802ac0e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802ac12:	6067      	str	r7, [r4, #4]
 802ac14:	dc02      	bgt.n	802ac1c <_vfprintf_r+0x13b4>
 802ac16:	3408      	adds	r4, #8
 802ac18:	3d10      	subs	r5, #16
 802ac1a:	e7d6      	b.n	802abca <_vfprintf_r+0x1362>
 802ac1c:	9803      	ldr	r0, [sp, #12]
 802ac1e:	aa26      	add	r2, sp, #152	@ 0x98
 802ac20:	4659      	mov	r1, fp
 802ac22:	f000 f88d 	bl	802ad40 <__sprint_r>
 802ac26:	2800      	cmp	r0, #0
 802ac28:	d1e5      	bne.n	802abf6 <_vfprintf_r+0x138e>
 802ac2a:	ac29      	add	r4, sp, #164	@ 0xa4
 802ac2c:	e7f4      	b.n	802ac18 <_vfprintf_r+0x13b0>
 802ac2e:	9803      	ldr	r0, [sp, #12]
 802ac30:	4651      	mov	r1, sl
 802ac32:	f003 fc63 	bl	802e4fc <_free_r>
 802ac36:	f7ff ba88 	b.w	802a14a <_vfprintf_r+0x8e2>
 802ac3a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ac3c:	b91b      	cbnz	r3, 802ac46 <_vfprintf_r+0x13de>
 802ac3e:	2300      	movs	r3, #0
 802ac40:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ac42:	f7ff b86e 	b.w	8029d22 <_vfprintf_r+0x4ba>
 802ac46:	9803      	ldr	r0, [sp, #12]
 802ac48:	aa26      	add	r2, sp, #152	@ 0x98
 802ac4a:	4659      	mov	r1, fp
 802ac4c:	f000 f878 	bl	802ad40 <__sprint_r>
 802ac50:	2800      	cmp	r0, #0
 802ac52:	d0f4      	beq.n	802ac3e <_vfprintf_r+0x13d6>
 802ac54:	f7ff b865 	b.w	8029d22 <_vfprintf_r+0x4ba>
 802ac58:	ea56 0207 	orrs.w	r2, r6, r7
 802ac5c:	9508      	str	r5, [sp, #32]
 802ac5e:	f43f ab75 	beq.w	802a34c <_vfprintf_r+0xae4>
 802ac62:	2b01      	cmp	r3, #1
 802ac64:	f43f abf6 	beq.w	802a454 <_vfprintf_r+0xbec>
 802ac68:	2b02      	cmp	r3, #2
 802ac6a:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802ac6e:	f43f ac3a 	beq.w	802a4e6 <_vfprintf_r+0xc7e>
 802ac72:	f006 0307 	and.w	r3, r6, #7
 802ac76:	08f6      	lsrs	r6, r6, #3
 802ac78:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802ac7c:	08ff      	lsrs	r7, r7, #3
 802ac7e:	3330      	adds	r3, #48	@ 0x30
 802ac80:	ea56 0107 	orrs.w	r1, r6, r7
 802ac84:	4642      	mov	r2, r8
 802ac86:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802ac8a:	d1f2      	bne.n	802ac72 <_vfprintf_r+0x140a>
 802ac8c:	9908      	ldr	r1, [sp, #32]
 802ac8e:	07ce      	lsls	r6, r1, #31
 802ac90:	d506      	bpl.n	802aca0 <_vfprintf_r+0x1438>
 802ac92:	2b30      	cmp	r3, #48	@ 0x30
 802ac94:	d004      	beq.n	802aca0 <_vfprintf_r+0x1438>
 802ac96:	2330      	movs	r3, #48	@ 0x30
 802ac98:	f808 3c01 	strb.w	r3, [r8, #-1]
 802ac9c:	f1a2 0802 	sub.w	r8, r2, #2
 802aca0:	ab52      	add	r3, sp, #328	@ 0x148
 802aca2:	9d08      	ldr	r5, [sp, #32]
 802aca4:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 802aca8:	f04f 0a00 	mov.w	sl, #0
 802acac:	eba3 0908 	sub.w	r9, r3, r8
 802acb0:	4657      	mov	r7, sl
 802acb2:	f8cd a020 	str.w	sl, [sp, #32]
 802acb6:	4656      	mov	r6, sl
 802acb8:	f7ff b978 	b.w	8029fac <_vfprintf_r+0x744>
 802acbc:	0803b04f 	.word	0x0803b04f

0802acc0 <__sbprintf>:
 802acc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802acc2:	461f      	mov	r7, r3
 802acc4:	898b      	ldrh	r3, [r1, #12]
 802acc6:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802acca:	f023 0302 	bic.w	r3, r3, #2
 802acce:	f8ad 300c 	strh.w	r3, [sp, #12]
 802acd2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802acd4:	9319      	str	r3, [sp, #100]	@ 0x64
 802acd6:	89cb      	ldrh	r3, [r1, #14]
 802acd8:	f8ad 300e 	strh.w	r3, [sp, #14]
 802acdc:	69cb      	ldr	r3, [r1, #28]
 802acde:	9307      	str	r3, [sp, #28]
 802ace0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802ace2:	9309      	str	r3, [sp, #36]	@ 0x24
 802ace4:	ab1a      	add	r3, sp, #104	@ 0x68
 802ace6:	9300      	str	r3, [sp, #0]
 802ace8:	9304      	str	r3, [sp, #16]
 802acea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802acee:	4615      	mov	r5, r2
 802acf0:	4606      	mov	r6, r0
 802acf2:	9302      	str	r3, [sp, #8]
 802acf4:	9305      	str	r3, [sp, #20]
 802acf6:	a816      	add	r0, sp, #88	@ 0x58
 802acf8:	2300      	movs	r3, #0
 802acfa:	460c      	mov	r4, r1
 802acfc:	9306      	str	r3, [sp, #24]
 802acfe:	f002 fcf5 	bl	802d6ec <__retarget_lock_init_recursive>
 802ad02:	462a      	mov	r2, r5
 802ad04:	463b      	mov	r3, r7
 802ad06:	4669      	mov	r1, sp
 802ad08:	4630      	mov	r0, r6
 802ad0a:	f7fe fdad 	bl	8029868 <_vfprintf_r>
 802ad0e:	1e05      	subs	r5, r0, #0
 802ad10:	db07      	blt.n	802ad22 <__sbprintf+0x62>
 802ad12:	4669      	mov	r1, sp
 802ad14:	4630      	mov	r0, r6
 802ad16:	f000 fecb 	bl	802bab0 <_fflush_r>
 802ad1a:	2800      	cmp	r0, #0
 802ad1c:	bf18      	it	ne
 802ad1e:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802ad22:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802ad26:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802ad28:	065b      	lsls	r3, r3, #25
 802ad2a:	bf42      	ittt	mi
 802ad2c:	89a3      	ldrhmi	r3, [r4, #12]
 802ad2e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802ad32:	81a3      	strhmi	r3, [r4, #12]
 802ad34:	f002 fcdb 	bl	802d6ee <__retarget_lock_close_recursive>
 802ad38:	4628      	mov	r0, r5
 802ad3a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802ad3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802ad40 <__sprint_r>:
 802ad40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ad44:	6893      	ldr	r3, [r2, #8]
 802ad46:	4680      	mov	r8, r0
 802ad48:	460e      	mov	r6, r1
 802ad4a:	4614      	mov	r4, r2
 802ad4c:	b343      	cbz	r3, 802ada0 <__sprint_r+0x60>
 802ad4e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802ad50:	049d      	lsls	r5, r3, #18
 802ad52:	d522      	bpl.n	802ad9a <__sprint_r+0x5a>
 802ad54:	6815      	ldr	r5, [r2, #0]
 802ad56:	68a0      	ldr	r0, [r4, #8]
 802ad58:	3508      	adds	r5, #8
 802ad5a:	b928      	cbnz	r0, 802ad68 <__sprint_r+0x28>
 802ad5c:	2300      	movs	r3, #0
 802ad5e:	60a3      	str	r3, [r4, #8]
 802ad60:	2300      	movs	r3, #0
 802ad62:	6063      	str	r3, [r4, #4]
 802ad64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ad68:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 802ad6c:	f04f 0900 	mov.w	r9, #0
 802ad70:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 802ad74:	45ca      	cmp	sl, r9
 802ad76:	dc05      	bgt.n	802ad84 <__sprint_r+0x44>
 802ad78:	68a3      	ldr	r3, [r4, #8]
 802ad7a:	f027 0703 	bic.w	r7, r7, #3
 802ad7e:	1bdb      	subs	r3, r3, r7
 802ad80:	60a3      	str	r3, [r4, #8]
 802ad82:	e7e8      	b.n	802ad56 <__sprint_r+0x16>
 802ad84:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 802ad88:	4632      	mov	r2, r6
 802ad8a:	4640      	mov	r0, r8
 802ad8c:	f001 fa35 	bl	802c1fa <_fputwc_r>
 802ad90:	1c43      	adds	r3, r0, #1
 802ad92:	d0e3      	beq.n	802ad5c <__sprint_r+0x1c>
 802ad94:	f109 0901 	add.w	r9, r9, #1
 802ad98:	e7ec      	b.n	802ad74 <__sprint_r+0x34>
 802ad9a:	f001 f81d 	bl	802bdd8 <__sfvwrite_r>
 802ad9e:	e7dd      	b.n	802ad5c <__sprint_r+0x1c>
 802ada0:	4618      	mov	r0, r3
 802ada2:	e7dd      	b.n	802ad60 <__sprint_r+0x20>

0802ada4 <_vfiprintf_r>:
 802ada4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ada8:	b0bb      	sub	sp, #236	@ 0xec
 802adaa:	460f      	mov	r7, r1
 802adac:	4693      	mov	fp, r2
 802adae:	461c      	mov	r4, r3
 802adb0:	461d      	mov	r5, r3
 802adb2:	9000      	str	r0, [sp, #0]
 802adb4:	b118      	cbz	r0, 802adbe <_vfiprintf_r+0x1a>
 802adb6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802adb8:	b90b      	cbnz	r3, 802adbe <_vfiprintf_r+0x1a>
 802adba:	f000 ffbb 	bl	802bd34 <__sinit>
 802adbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802adc0:	07db      	lsls	r3, r3, #31
 802adc2:	d405      	bmi.n	802add0 <_vfiprintf_r+0x2c>
 802adc4:	89bb      	ldrh	r3, [r7, #12]
 802adc6:	059e      	lsls	r6, r3, #22
 802adc8:	d402      	bmi.n	802add0 <_vfiprintf_r+0x2c>
 802adca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802adcc:	f002 fc91 	bl	802d6f2 <__retarget_lock_acquire_recursive>
 802add0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802add4:	0498      	lsls	r0, r3, #18
 802add6:	d406      	bmi.n	802ade6 <_vfiprintf_r+0x42>
 802add8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802addc:	81bb      	strh	r3, [r7, #12]
 802adde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802ade0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802ade4:	667b      	str	r3, [r7, #100]	@ 0x64
 802ade6:	89bb      	ldrh	r3, [r7, #12]
 802ade8:	0719      	lsls	r1, r3, #28
 802adea:	d501      	bpl.n	802adf0 <_vfiprintf_r+0x4c>
 802adec:	693b      	ldr	r3, [r7, #16]
 802adee:	b9ab      	cbnz	r3, 802ae1c <_vfiprintf_r+0x78>
 802adf0:	9800      	ldr	r0, [sp, #0]
 802adf2:	4639      	mov	r1, r7
 802adf4:	f001 f95a 	bl	802c0ac <__swsetup_r>
 802adf8:	b180      	cbz	r0, 802ae1c <_vfiprintf_r+0x78>
 802adfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802adfc:	07da      	lsls	r2, r3, #31
 802adfe:	d506      	bpl.n	802ae0e <_vfiprintf_r+0x6a>
 802ae00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802ae04:	9303      	str	r3, [sp, #12]
 802ae06:	9803      	ldr	r0, [sp, #12]
 802ae08:	b03b      	add	sp, #236	@ 0xec
 802ae0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ae0e:	89bb      	ldrh	r3, [r7, #12]
 802ae10:	059b      	lsls	r3, r3, #22
 802ae12:	d4f5      	bmi.n	802ae00 <_vfiprintf_r+0x5c>
 802ae14:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802ae16:	f002 fc6e 	bl	802d6f6 <__retarget_lock_release_recursive>
 802ae1a:	e7f1      	b.n	802ae00 <_vfiprintf_r+0x5c>
 802ae1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802ae20:	f003 021a 	and.w	r2, r3, #26
 802ae24:	2a0a      	cmp	r2, #10
 802ae26:	d114      	bne.n	802ae52 <_vfiprintf_r+0xae>
 802ae28:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802ae2c:	2a00      	cmp	r2, #0
 802ae2e:	db10      	blt.n	802ae52 <_vfiprintf_r+0xae>
 802ae30:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802ae32:	07d6      	lsls	r6, r2, #31
 802ae34:	d404      	bmi.n	802ae40 <_vfiprintf_r+0x9c>
 802ae36:	059d      	lsls	r5, r3, #22
 802ae38:	d402      	bmi.n	802ae40 <_vfiprintf_r+0x9c>
 802ae3a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802ae3c:	f002 fc5b 	bl	802d6f6 <__retarget_lock_release_recursive>
 802ae40:	9800      	ldr	r0, [sp, #0]
 802ae42:	4623      	mov	r3, r4
 802ae44:	465a      	mov	r2, fp
 802ae46:	4639      	mov	r1, r7
 802ae48:	b03b      	add	sp, #236	@ 0xec
 802ae4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ae4e:	f000 bc31 	b.w	802b6b4 <__sbprintf>
 802ae52:	2300      	movs	r3, #0
 802ae54:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802ae58:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802ae5c:	ae11      	add	r6, sp, #68	@ 0x44
 802ae5e:	960e      	str	r6, [sp, #56]	@ 0x38
 802ae60:	9307      	str	r3, [sp, #28]
 802ae62:	9309      	str	r3, [sp, #36]	@ 0x24
 802ae64:	9303      	str	r3, [sp, #12]
 802ae66:	465b      	mov	r3, fp
 802ae68:	461c      	mov	r4, r3
 802ae6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ae6e:	b10a      	cbz	r2, 802ae74 <_vfiprintf_r+0xd0>
 802ae70:	2a25      	cmp	r2, #37	@ 0x25
 802ae72:	d1f9      	bne.n	802ae68 <_vfiprintf_r+0xc4>
 802ae74:	ebb4 080b 	subs.w	r8, r4, fp
 802ae78:	d00d      	beq.n	802ae96 <_vfiprintf_r+0xf2>
 802ae7a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ae7c:	4443      	add	r3, r8
 802ae7e:	9310      	str	r3, [sp, #64]	@ 0x40
 802ae80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ae82:	3301      	adds	r3, #1
 802ae84:	2b07      	cmp	r3, #7
 802ae86:	e9c6 b800 	strd	fp, r8, [r6]
 802ae8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802ae8c:	dc75      	bgt.n	802af7a <_vfiprintf_r+0x1d6>
 802ae8e:	3608      	adds	r6, #8
 802ae90:	9b03      	ldr	r3, [sp, #12]
 802ae92:	4443      	add	r3, r8
 802ae94:	9303      	str	r3, [sp, #12]
 802ae96:	7823      	ldrb	r3, [r4, #0]
 802ae98:	2b00      	cmp	r3, #0
 802ae9a:	f000 83cd 	beq.w	802b638 <_vfiprintf_r+0x894>
 802ae9e:	2300      	movs	r3, #0
 802aea0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802aea4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 802aea8:	3401      	adds	r4, #1
 802aeaa:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802aeae:	469a      	mov	sl, r3
 802aeb0:	46a3      	mov	fp, r4
 802aeb2:	f81b 3b01 	ldrb.w	r3, [fp], #1
 802aeb6:	f1a3 0220 	sub.w	r2, r3, #32
 802aeba:	2a5a      	cmp	r2, #90	@ 0x5a
 802aebc:	f200 8316 	bhi.w	802b4ec <_vfiprintf_r+0x748>
 802aec0:	e8df f012 	tbh	[pc, r2, lsl #1]
 802aec4:	0314009a 	.word	0x0314009a
 802aec8:	00a20314 	.word	0x00a20314
 802aecc:	03140314 	.word	0x03140314
 802aed0:	00820314 	.word	0x00820314
 802aed4:	03140314 	.word	0x03140314
 802aed8:	00af00a5 	.word	0x00af00a5
 802aedc:	00ac0314 	.word	0x00ac0314
 802aee0:	031400b1 	.word	0x031400b1
 802aee4:	00d000cd 	.word	0x00d000cd
 802aee8:	00d000d0 	.word	0x00d000d0
 802aeec:	00d000d0 	.word	0x00d000d0
 802aef0:	00d000d0 	.word	0x00d000d0
 802aef4:	00d000d0 	.word	0x00d000d0
 802aef8:	03140314 	.word	0x03140314
 802aefc:	03140314 	.word	0x03140314
 802af00:	03140314 	.word	0x03140314
 802af04:	03140314 	.word	0x03140314
 802af08:	00f70314 	.word	0x00f70314
 802af0c:	03140104 	.word	0x03140104
 802af10:	03140314 	.word	0x03140314
 802af14:	03140314 	.word	0x03140314
 802af18:	03140314 	.word	0x03140314
 802af1c:	03140314 	.word	0x03140314
 802af20:	01520314 	.word	0x01520314
 802af24:	03140314 	.word	0x03140314
 802af28:	019a0314 	.word	0x019a0314
 802af2c:	027a0314 	.word	0x027a0314
 802af30:	03140314 	.word	0x03140314
 802af34:	0314029a 	.word	0x0314029a
 802af38:	03140314 	.word	0x03140314
 802af3c:	03140314 	.word	0x03140314
 802af40:	03140314 	.word	0x03140314
 802af44:	03140314 	.word	0x03140314
 802af48:	00f70314 	.word	0x00f70314
 802af4c:	03140106 	.word	0x03140106
 802af50:	03140314 	.word	0x03140314
 802af54:	010600e0 	.word	0x010600e0
 802af58:	031400f1 	.word	0x031400f1
 802af5c:	031400eb 	.word	0x031400eb
 802af60:	01540132 	.word	0x01540132
 802af64:	00f10189 	.word	0x00f10189
 802af68:	019a0314 	.word	0x019a0314
 802af6c:	027c0098 	.word	0x027c0098
 802af70:	03140314 	.word	0x03140314
 802af74:	03140065 	.word	0x03140065
 802af78:	0098      	.short	0x0098
 802af7a:	9800      	ldr	r0, [sp, #0]
 802af7c:	aa0e      	add	r2, sp, #56	@ 0x38
 802af7e:	4639      	mov	r1, r7
 802af80:	f7ff fede 	bl	802ad40 <__sprint_r>
 802af84:	2800      	cmp	r0, #0
 802af86:	f040 8336 	bne.w	802b5f6 <_vfiprintf_r+0x852>
 802af8a:	ae11      	add	r6, sp, #68	@ 0x44
 802af8c:	e780      	b.n	802ae90 <_vfiprintf_r+0xec>
 802af8e:	4a99      	ldr	r2, [pc, #612]	@ (802b1f4 <_vfiprintf_r+0x450>)
 802af90:	9205      	str	r2, [sp, #20]
 802af92:	f01a 0220 	ands.w	r2, sl, #32
 802af96:	f000 8231 	beq.w	802b3fc <_vfiprintf_r+0x658>
 802af9a:	3507      	adds	r5, #7
 802af9c:	f025 0507 	bic.w	r5, r5, #7
 802afa0:	46a8      	mov	r8, r5
 802afa2:	686d      	ldr	r5, [r5, #4]
 802afa4:	f858 4b08 	ldr.w	r4, [r8], #8
 802afa8:	f01a 0f01 	tst.w	sl, #1
 802afac:	d009      	beq.n	802afc2 <_vfiprintf_r+0x21e>
 802afae:	ea54 0205 	orrs.w	r2, r4, r5
 802afb2:	bf1f      	itttt	ne
 802afb4:	2230      	movne	r2, #48	@ 0x30
 802afb6:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802afba:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802afbe:	f04a 0a02 	orrne.w	sl, sl, #2
 802afc2:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802afc6:	e112      	b.n	802b1ee <_vfiprintf_r+0x44a>
 802afc8:	9800      	ldr	r0, [sp, #0]
 802afca:	f002 fae7 	bl	802d59c <_localeconv_r>
 802afce:	6843      	ldr	r3, [r0, #4]
 802afd0:	9309      	str	r3, [sp, #36]	@ 0x24
 802afd2:	4618      	mov	r0, r3
 802afd4:	f7e5 f964 	bl	80102a0 <strlen>
 802afd8:	9007      	str	r0, [sp, #28]
 802afda:	9800      	ldr	r0, [sp, #0]
 802afdc:	f002 fade 	bl	802d59c <_localeconv_r>
 802afe0:	6883      	ldr	r3, [r0, #8]
 802afe2:	9306      	str	r3, [sp, #24]
 802afe4:	9b07      	ldr	r3, [sp, #28]
 802afe6:	b12b      	cbz	r3, 802aff4 <_vfiprintf_r+0x250>
 802afe8:	9b06      	ldr	r3, [sp, #24]
 802afea:	b11b      	cbz	r3, 802aff4 <_vfiprintf_r+0x250>
 802afec:	781b      	ldrb	r3, [r3, #0]
 802afee:	b10b      	cbz	r3, 802aff4 <_vfiprintf_r+0x250>
 802aff0:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 802aff4:	465c      	mov	r4, fp
 802aff6:	e75b      	b.n	802aeb0 <_vfiprintf_r+0x10c>
 802aff8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802affc:	2b00      	cmp	r3, #0
 802affe:	d1f9      	bne.n	802aff4 <_vfiprintf_r+0x250>
 802b000:	2320      	movs	r3, #32
 802b002:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802b006:	e7f5      	b.n	802aff4 <_vfiprintf_r+0x250>
 802b008:	f04a 0a01 	orr.w	sl, sl, #1
 802b00c:	e7f2      	b.n	802aff4 <_vfiprintf_r+0x250>
 802b00e:	f855 3b04 	ldr.w	r3, [r5], #4
 802b012:	9302      	str	r3, [sp, #8]
 802b014:	2b00      	cmp	r3, #0
 802b016:	daed      	bge.n	802aff4 <_vfiprintf_r+0x250>
 802b018:	425b      	negs	r3, r3
 802b01a:	9302      	str	r3, [sp, #8]
 802b01c:	f04a 0a04 	orr.w	sl, sl, #4
 802b020:	e7e8      	b.n	802aff4 <_vfiprintf_r+0x250>
 802b022:	232b      	movs	r3, #43	@ 0x2b
 802b024:	e7ed      	b.n	802b002 <_vfiprintf_r+0x25e>
 802b026:	465a      	mov	r2, fp
 802b028:	f812 3b01 	ldrb.w	r3, [r2], #1
 802b02c:	2b2a      	cmp	r3, #42	@ 0x2a
 802b02e:	d112      	bne.n	802b056 <_vfiprintf_r+0x2b2>
 802b030:	f855 3b04 	ldr.w	r3, [r5], #4
 802b034:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802b038:	9301      	str	r3, [sp, #4]
 802b03a:	4693      	mov	fp, r2
 802b03c:	e7da      	b.n	802aff4 <_vfiprintf_r+0x250>
 802b03e:	9b01      	ldr	r3, [sp, #4]
 802b040:	fb00 1303 	mla	r3, r0, r3, r1
 802b044:	9301      	str	r3, [sp, #4]
 802b046:	f812 3b01 	ldrb.w	r3, [r2], #1
 802b04a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802b04e:	2909      	cmp	r1, #9
 802b050:	d9f5      	bls.n	802b03e <_vfiprintf_r+0x29a>
 802b052:	4693      	mov	fp, r2
 802b054:	e72f      	b.n	802aeb6 <_vfiprintf_r+0x112>
 802b056:	2100      	movs	r1, #0
 802b058:	9101      	str	r1, [sp, #4]
 802b05a:	200a      	movs	r0, #10
 802b05c:	e7f5      	b.n	802b04a <_vfiprintf_r+0x2a6>
 802b05e:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 802b062:	e7c7      	b.n	802aff4 <_vfiprintf_r+0x250>
 802b064:	2100      	movs	r1, #0
 802b066:	465a      	mov	r2, fp
 802b068:	9102      	str	r1, [sp, #8]
 802b06a:	200a      	movs	r0, #10
 802b06c:	9902      	ldr	r1, [sp, #8]
 802b06e:	3b30      	subs	r3, #48	@ 0x30
 802b070:	fb00 3301 	mla	r3, r0, r1, r3
 802b074:	9302      	str	r3, [sp, #8]
 802b076:	f812 3b01 	ldrb.w	r3, [r2], #1
 802b07a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802b07e:	2909      	cmp	r1, #9
 802b080:	d9f4      	bls.n	802b06c <_vfiprintf_r+0x2c8>
 802b082:	e7e6      	b.n	802b052 <_vfiprintf_r+0x2ae>
 802b084:	f89b 3000 	ldrb.w	r3, [fp]
 802b088:	2b68      	cmp	r3, #104	@ 0x68
 802b08a:	bf06      	itte	eq
 802b08c:	f10b 0b01 	addeq.w	fp, fp, #1
 802b090:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 802b094:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 802b098:	e7ac      	b.n	802aff4 <_vfiprintf_r+0x250>
 802b09a:	f89b 3000 	ldrb.w	r3, [fp]
 802b09e:	2b6c      	cmp	r3, #108	@ 0x6c
 802b0a0:	d104      	bne.n	802b0ac <_vfiprintf_r+0x308>
 802b0a2:	f10b 0b01 	add.w	fp, fp, #1
 802b0a6:	f04a 0a20 	orr.w	sl, sl, #32
 802b0aa:	e7a3      	b.n	802aff4 <_vfiprintf_r+0x250>
 802b0ac:	f04a 0a10 	orr.w	sl, sl, #16
 802b0b0:	e7a0      	b.n	802aff4 <_vfiprintf_r+0x250>
 802b0b2:	46a8      	mov	r8, r5
 802b0b4:	2400      	movs	r4, #0
 802b0b6:	f858 3b04 	ldr.w	r3, [r8], #4
 802b0ba:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802b0be:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802b0c2:	2301      	movs	r3, #1
 802b0c4:	9301      	str	r3, [sp, #4]
 802b0c6:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 802b0ca:	e0ab      	b.n	802b224 <_vfiprintf_r+0x480>
 802b0cc:	f04a 0a10 	orr.w	sl, sl, #16
 802b0d0:	f01a 0f20 	tst.w	sl, #32
 802b0d4:	d011      	beq.n	802b0fa <_vfiprintf_r+0x356>
 802b0d6:	3507      	adds	r5, #7
 802b0d8:	f025 0507 	bic.w	r5, r5, #7
 802b0dc:	46a8      	mov	r8, r5
 802b0de:	686d      	ldr	r5, [r5, #4]
 802b0e0:	f858 4b08 	ldr.w	r4, [r8], #8
 802b0e4:	2d00      	cmp	r5, #0
 802b0e6:	da06      	bge.n	802b0f6 <_vfiprintf_r+0x352>
 802b0e8:	4264      	negs	r4, r4
 802b0ea:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802b0ee:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802b0f2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802b0f6:	2301      	movs	r3, #1
 802b0f8:	e048      	b.n	802b18c <_vfiprintf_r+0x3e8>
 802b0fa:	46a8      	mov	r8, r5
 802b0fc:	f01a 0f10 	tst.w	sl, #16
 802b100:	f858 5b04 	ldr.w	r5, [r8], #4
 802b104:	d002      	beq.n	802b10c <_vfiprintf_r+0x368>
 802b106:	462c      	mov	r4, r5
 802b108:	17ed      	asrs	r5, r5, #31
 802b10a:	e7eb      	b.n	802b0e4 <_vfiprintf_r+0x340>
 802b10c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802b110:	d003      	beq.n	802b11a <_vfiprintf_r+0x376>
 802b112:	b22c      	sxth	r4, r5
 802b114:	f345 35c0 	sbfx	r5, r5, #15, #1
 802b118:	e7e4      	b.n	802b0e4 <_vfiprintf_r+0x340>
 802b11a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802b11e:	d0f2      	beq.n	802b106 <_vfiprintf_r+0x362>
 802b120:	b26c      	sxtb	r4, r5
 802b122:	f345 15c0 	sbfx	r5, r5, #7, #1
 802b126:	e7dd      	b.n	802b0e4 <_vfiprintf_r+0x340>
 802b128:	f01a 0f20 	tst.w	sl, #32
 802b12c:	d007      	beq.n	802b13e <_vfiprintf_r+0x39a>
 802b12e:	9a03      	ldr	r2, [sp, #12]
 802b130:	682b      	ldr	r3, [r5, #0]
 802b132:	9903      	ldr	r1, [sp, #12]
 802b134:	17d2      	asrs	r2, r2, #31
 802b136:	e9c3 1200 	strd	r1, r2, [r3]
 802b13a:	3504      	adds	r5, #4
 802b13c:	e693      	b.n	802ae66 <_vfiprintf_r+0xc2>
 802b13e:	f01a 0f10 	tst.w	sl, #16
 802b142:	d003      	beq.n	802b14c <_vfiprintf_r+0x3a8>
 802b144:	682b      	ldr	r3, [r5, #0]
 802b146:	9a03      	ldr	r2, [sp, #12]
 802b148:	601a      	str	r2, [r3, #0]
 802b14a:	e7f6      	b.n	802b13a <_vfiprintf_r+0x396>
 802b14c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802b150:	d003      	beq.n	802b15a <_vfiprintf_r+0x3b6>
 802b152:	682b      	ldr	r3, [r5, #0]
 802b154:	9a03      	ldr	r2, [sp, #12]
 802b156:	801a      	strh	r2, [r3, #0]
 802b158:	e7ef      	b.n	802b13a <_vfiprintf_r+0x396>
 802b15a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802b15e:	d0f1      	beq.n	802b144 <_vfiprintf_r+0x3a0>
 802b160:	682b      	ldr	r3, [r5, #0]
 802b162:	9a03      	ldr	r2, [sp, #12]
 802b164:	701a      	strb	r2, [r3, #0]
 802b166:	e7e8      	b.n	802b13a <_vfiprintf_r+0x396>
 802b168:	f04a 0a10 	orr.w	sl, sl, #16
 802b16c:	f01a 0320 	ands.w	r3, sl, #32
 802b170:	d01f      	beq.n	802b1b2 <_vfiprintf_r+0x40e>
 802b172:	3507      	adds	r5, #7
 802b174:	f025 0507 	bic.w	r5, r5, #7
 802b178:	46a8      	mov	r8, r5
 802b17a:	686d      	ldr	r5, [r5, #4]
 802b17c:	f858 4b08 	ldr.w	r4, [r8], #8
 802b180:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802b184:	2300      	movs	r3, #0
 802b186:	2200      	movs	r2, #0
 802b188:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802b18c:	9a01      	ldr	r2, [sp, #4]
 802b18e:	3201      	adds	r2, #1
 802b190:	f000 825f 	beq.w	802b652 <_vfiprintf_r+0x8ae>
 802b194:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 802b198:	9204      	str	r2, [sp, #16]
 802b19a:	ea54 0205 	orrs.w	r2, r4, r5
 802b19e:	f040 825e 	bne.w	802b65e <_vfiprintf_r+0x8ba>
 802b1a2:	9a01      	ldr	r2, [sp, #4]
 802b1a4:	2a00      	cmp	r2, #0
 802b1a6:	f000 8198 	beq.w	802b4da <_vfiprintf_r+0x736>
 802b1aa:	2b01      	cmp	r3, #1
 802b1ac:	f040 825a 	bne.w	802b664 <_vfiprintf_r+0x8c0>
 802b1b0:	e13b      	b.n	802b42a <_vfiprintf_r+0x686>
 802b1b2:	46a8      	mov	r8, r5
 802b1b4:	f01a 0510 	ands.w	r5, sl, #16
 802b1b8:	f858 4b04 	ldr.w	r4, [r8], #4
 802b1bc:	d001      	beq.n	802b1c2 <_vfiprintf_r+0x41e>
 802b1be:	461d      	mov	r5, r3
 802b1c0:	e7de      	b.n	802b180 <_vfiprintf_r+0x3dc>
 802b1c2:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802b1c6:	d001      	beq.n	802b1cc <_vfiprintf_r+0x428>
 802b1c8:	b2a4      	uxth	r4, r4
 802b1ca:	e7d9      	b.n	802b180 <_vfiprintf_r+0x3dc>
 802b1cc:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802b1d0:	d0d6      	beq.n	802b180 <_vfiprintf_r+0x3dc>
 802b1d2:	b2e4      	uxtb	r4, r4
 802b1d4:	e7f3      	b.n	802b1be <_vfiprintf_r+0x41a>
 802b1d6:	46a8      	mov	r8, r5
 802b1d8:	f647 0330 	movw	r3, #30768	@ 0x7830
 802b1dc:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802b1e0:	f858 4b04 	ldr.w	r4, [r8], #4
 802b1e4:	4b03      	ldr	r3, [pc, #12]	@ (802b1f4 <_vfiprintf_r+0x450>)
 802b1e6:	9305      	str	r3, [sp, #20]
 802b1e8:	2500      	movs	r5, #0
 802b1ea:	f04a 0a02 	orr.w	sl, sl, #2
 802b1ee:	2302      	movs	r3, #2
 802b1f0:	e7c9      	b.n	802b186 <_vfiprintf_r+0x3e2>
 802b1f2:	bf00      	nop
 802b1f4:	0803b01b 	.word	0x0803b01b
 802b1f8:	9b01      	ldr	r3, [sp, #4]
 802b1fa:	46a8      	mov	r8, r5
 802b1fc:	1c5c      	adds	r4, r3, #1
 802b1fe:	f04f 0500 	mov.w	r5, #0
 802b202:	f858 9b04 	ldr.w	r9, [r8], #4
 802b206:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802b20a:	f000 80d0 	beq.w	802b3ae <_vfiprintf_r+0x60a>
 802b20e:	461a      	mov	r2, r3
 802b210:	4629      	mov	r1, r5
 802b212:	4648      	mov	r0, r9
 802b214:	f7e4 fff4 	bl	8010200 <memchr>
 802b218:	4604      	mov	r4, r0
 802b21a:	b118      	cbz	r0, 802b224 <_vfiprintf_r+0x480>
 802b21c:	eba0 0309 	sub.w	r3, r0, r9
 802b220:	9301      	str	r3, [sp, #4]
 802b222:	462c      	mov	r4, r5
 802b224:	9b01      	ldr	r3, [sp, #4]
 802b226:	42a3      	cmp	r3, r4
 802b228:	bfb8      	it	lt
 802b22a:	4623      	movlt	r3, r4
 802b22c:	9304      	str	r3, [sp, #16]
 802b22e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802b232:	b113      	cbz	r3, 802b23a <_vfiprintf_r+0x496>
 802b234:	9b04      	ldr	r3, [sp, #16]
 802b236:	3301      	adds	r3, #1
 802b238:	9304      	str	r3, [sp, #16]
 802b23a:	f01a 0302 	ands.w	r3, sl, #2
 802b23e:	9308      	str	r3, [sp, #32]
 802b240:	bf1e      	ittt	ne
 802b242:	9b04      	ldrne	r3, [sp, #16]
 802b244:	3302      	addne	r3, #2
 802b246:	9304      	strne	r3, [sp, #16]
 802b248:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 802b24c:	930a      	str	r3, [sp, #40]	@ 0x28
 802b24e:	d11f      	bne.n	802b290 <_vfiprintf_r+0x4ec>
 802b250:	9b02      	ldr	r3, [sp, #8]
 802b252:	9a04      	ldr	r2, [sp, #16]
 802b254:	1a9d      	subs	r5, r3, r2
 802b256:	2d00      	cmp	r5, #0
 802b258:	dd1a      	ble.n	802b290 <_vfiprintf_r+0x4ec>
 802b25a:	4ba9      	ldr	r3, [pc, #676]	@ (802b500 <_vfiprintf_r+0x75c>)
 802b25c:	6033      	str	r3, [r6, #0]
 802b25e:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802b262:	2d10      	cmp	r5, #16
 802b264:	f102 0201 	add.w	r2, r2, #1
 802b268:	f106 0008 	add.w	r0, r6, #8
 802b26c:	f300 814e 	bgt.w	802b50c <_vfiprintf_r+0x768>
 802b270:	6075      	str	r5, [r6, #4]
 802b272:	2a07      	cmp	r2, #7
 802b274:	4465      	add	r5, ip
 802b276:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802b27a:	f340 815a 	ble.w	802b532 <_vfiprintf_r+0x78e>
 802b27e:	9800      	ldr	r0, [sp, #0]
 802b280:	aa0e      	add	r2, sp, #56	@ 0x38
 802b282:	4639      	mov	r1, r7
 802b284:	f7ff fd5c 	bl	802ad40 <__sprint_r>
 802b288:	2800      	cmp	r0, #0
 802b28a:	f040 81b4 	bne.w	802b5f6 <_vfiprintf_r+0x852>
 802b28e:	ae11      	add	r6, sp, #68	@ 0x44
 802b290:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802b294:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802b298:	b161      	cbz	r1, 802b2b4 <_vfiprintf_r+0x510>
 802b29a:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802b29e:	3301      	adds	r3, #1
 802b2a0:	6031      	str	r1, [r6, #0]
 802b2a2:	2101      	movs	r1, #1
 802b2a4:	440a      	add	r2, r1
 802b2a6:	2b07      	cmp	r3, #7
 802b2a8:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802b2ac:	6071      	str	r1, [r6, #4]
 802b2ae:	f300 8142 	bgt.w	802b536 <_vfiprintf_r+0x792>
 802b2b2:	3608      	adds	r6, #8
 802b2b4:	9908      	ldr	r1, [sp, #32]
 802b2b6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802b2ba:	b159      	cbz	r1, 802b2d4 <_vfiprintf_r+0x530>
 802b2bc:	a90d      	add	r1, sp, #52	@ 0x34
 802b2be:	3301      	adds	r3, #1
 802b2c0:	6031      	str	r1, [r6, #0]
 802b2c2:	2102      	movs	r1, #2
 802b2c4:	440a      	add	r2, r1
 802b2c6:	2b07      	cmp	r3, #7
 802b2c8:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802b2cc:	6071      	str	r1, [r6, #4]
 802b2ce:	f300 813b 	bgt.w	802b548 <_vfiprintf_r+0x7a4>
 802b2d2:	3608      	adds	r6, #8
 802b2d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b2d6:	2b80      	cmp	r3, #128	@ 0x80
 802b2d8:	d11f      	bne.n	802b31a <_vfiprintf_r+0x576>
 802b2da:	9b02      	ldr	r3, [sp, #8]
 802b2dc:	9a04      	ldr	r2, [sp, #16]
 802b2de:	1a9d      	subs	r5, r3, r2
 802b2e0:	2d00      	cmp	r5, #0
 802b2e2:	dd1a      	ble.n	802b31a <_vfiprintf_r+0x576>
 802b2e4:	4b87      	ldr	r3, [pc, #540]	@ (802b504 <_vfiprintf_r+0x760>)
 802b2e6:	6033      	str	r3, [r6, #0]
 802b2e8:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802b2ec:	2d10      	cmp	r5, #16
 802b2ee:	f102 0201 	add.w	r2, r2, #1
 802b2f2:	f106 0008 	add.w	r0, r6, #8
 802b2f6:	f300 8130 	bgt.w	802b55a <_vfiprintf_r+0x7b6>
 802b2fa:	6075      	str	r5, [r6, #4]
 802b2fc:	2a07      	cmp	r2, #7
 802b2fe:	4465      	add	r5, ip
 802b300:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802b304:	f340 813c 	ble.w	802b580 <_vfiprintf_r+0x7dc>
 802b308:	9800      	ldr	r0, [sp, #0]
 802b30a:	aa0e      	add	r2, sp, #56	@ 0x38
 802b30c:	4639      	mov	r1, r7
 802b30e:	f7ff fd17 	bl	802ad40 <__sprint_r>
 802b312:	2800      	cmp	r0, #0
 802b314:	f040 816f 	bne.w	802b5f6 <_vfiprintf_r+0x852>
 802b318:	ae11      	add	r6, sp, #68	@ 0x44
 802b31a:	9b01      	ldr	r3, [sp, #4]
 802b31c:	1ae4      	subs	r4, r4, r3
 802b31e:	2c00      	cmp	r4, #0
 802b320:	dd1a      	ble.n	802b358 <_vfiprintf_r+0x5b4>
 802b322:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802b326:	4877      	ldr	r0, [pc, #476]	@ (802b504 <_vfiprintf_r+0x760>)
 802b328:	6030      	str	r0, [r6, #0]
 802b32a:	2c10      	cmp	r4, #16
 802b32c:	f103 0301 	add.w	r3, r3, #1
 802b330:	f106 0108 	add.w	r1, r6, #8
 802b334:	f300 8126 	bgt.w	802b584 <_vfiprintf_r+0x7e0>
 802b338:	6074      	str	r4, [r6, #4]
 802b33a:	2b07      	cmp	r3, #7
 802b33c:	4414      	add	r4, r2
 802b33e:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802b342:	f340 8130 	ble.w	802b5a6 <_vfiprintf_r+0x802>
 802b346:	9800      	ldr	r0, [sp, #0]
 802b348:	aa0e      	add	r2, sp, #56	@ 0x38
 802b34a:	4639      	mov	r1, r7
 802b34c:	f7ff fcf8 	bl	802ad40 <__sprint_r>
 802b350:	2800      	cmp	r0, #0
 802b352:	f040 8150 	bne.w	802b5f6 <_vfiprintf_r+0x852>
 802b356:	ae11      	add	r6, sp, #68	@ 0x44
 802b358:	9b01      	ldr	r3, [sp, #4]
 802b35a:	9a01      	ldr	r2, [sp, #4]
 802b35c:	6073      	str	r3, [r6, #4]
 802b35e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b360:	f8c6 9000 	str.w	r9, [r6]
 802b364:	4413      	add	r3, r2
 802b366:	9310      	str	r3, [sp, #64]	@ 0x40
 802b368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b36a:	3301      	adds	r3, #1
 802b36c:	2b07      	cmp	r3, #7
 802b36e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b370:	f300 811b 	bgt.w	802b5aa <_vfiprintf_r+0x806>
 802b374:	f106 0308 	add.w	r3, r6, #8
 802b378:	f01a 0f04 	tst.w	sl, #4
 802b37c:	f040 811d 	bne.w	802b5ba <_vfiprintf_r+0x816>
 802b380:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b384:	9904      	ldr	r1, [sp, #16]
 802b386:	428a      	cmp	r2, r1
 802b388:	bfac      	ite	ge
 802b38a:	189b      	addge	r3, r3, r2
 802b38c:	185b      	addlt	r3, r3, r1
 802b38e:	9303      	str	r3, [sp, #12]
 802b390:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b392:	b13b      	cbz	r3, 802b3a4 <_vfiprintf_r+0x600>
 802b394:	9800      	ldr	r0, [sp, #0]
 802b396:	aa0e      	add	r2, sp, #56	@ 0x38
 802b398:	4639      	mov	r1, r7
 802b39a:	f7ff fcd1 	bl	802ad40 <__sprint_r>
 802b39e:	2800      	cmp	r0, #0
 802b3a0:	f040 8129 	bne.w	802b5f6 <_vfiprintf_r+0x852>
 802b3a4:	2300      	movs	r3, #0
 802b3a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b3a8:	4645      	mov	r5, r8
 802b3aa:	ae11      	add	r6, sp, #68	@ 0x44
 802b3ac:	e55b      	b.n	802ae66 <_vfiprintf_r+0xc2>
 802b3ae:	4648      	mov	r0, r9
 802b3b0:	f7e4 ff76 	bl	80102a0 <strlen>
 802b3b4:	9001      	str	r0, [sp, #4]
 802b3b6:	e734      	b.n	802b222 <_vfiprintf_r+0x47e>
 802b3b8:	f04a 0a10 	orr.w	sl, sl, #16
 802b3bc:	f01a 0320 	ands.w	r3, sl, #32
 802b3c0:	d008      	beq.n	802b3d4 <_vfiprintf_r+0x630>
 802b3c2:	3507      	adds	r5, #7
 802b3c4:	f025 0507 	bic.w	r5, r5, #7
 802b3c8:	46a8      	mov	r8, r5
 802b3ca:	686d      	ldr	r5, [r5, #4]
 802b3cc:	f858 4b08 	ldr.w	r4, [r8], #8
 802b3d0:	2301      	movs	r3, #1
 802b3d2:	e6d8      	b.n	802b186 <_vfiprintf_r+0x3e2>
 802b3d4:	46a8      	mov	r8, r5
 802b3d6:	f01a 0510 	ands.w	r5, sl, #16
 802b3da:	f858 4b04 	ldr.w	r4, [r8], #4
 802b3de:	d001      	beq.n	802b3e4 <_vfiprintf_r+0x640>
 802b3e0:	461d      	mov	r5, r3
 802b3e2:	e7f5      	b.n	802b3d0 <_vfiprintf_r+0x62c>
 802b3e4:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802b3e8:	d001      	beq.n	802b3ee <_vfiprintf_r+0x64a>
 802b3ea:	b2a4      	uxth	r4, r4
 802b3ec:	e7f0      	b.n	802b3d0 <_vfiprintf_r+0x62c>
 802b3ee:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802b3f2:	d0ed      	beq.n	802b3d0 <_vfiprintf_r+0x62c>
 802b3f4:	b2e4      	uxtb	r4, r4
 802b3f6:	e7f3      	b.n	802b3e0 <_vfiprintf_r+0x63c>
 802b3f8:	4a43      	ldr	r2, [pc, #268]	@ (802b508 <_vfiprintf_r+0x764>)
 802b3fa:	e5c9      	b.n	802af90 <_vfiprintf_r+0x1ec>
 802b3fc:	46a8      	mov	r8, r5
 802b3fe:	f01a 0510 	ands.w	r5, sl, #16
 802b402:	f858 4b04 	ldr.w	r4, [r8], #4
 802b406:	d001      	beq.n	802b40c <_vfiprintf_r+0x668>
 802b408:	4615      	mov	r5, r2
 802b40a:	e5cd      	b.n	802afa8 <_vfiprintf_r+0x204>
 802b40c:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 802b410:	d001      	beq.n	802b416 <_vfiprintf_r+0x672>
 802b412:	b2a4      	uxth	r4, r4
 802b414:	e5c8      	b.n	802afa8 <_vfiprintf_r+0x204>
 802b416:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802b41a:	f43f adc5 	beq.w	802afa8 <_vfiprintf_r+0x204>
 802b41e:	b2e4      	uxtb	r4, r4
 802b420:	e7f2      	b.n	802b408 <_vfiprintf_r+0x664>
 802b422:	2c0a      	cmp	r4, #10
 802b424:	f175 0300 	sbcs.w	r3, r5, #0
 802b428:	d206      	bcs.n	802b438 <_vfiprintf_r+0x694>
 802b42a:	3430      	adds	r4, #48	@ 0x30
 802b42c:	b2e4      	uxtb	r4, r4
 802b42e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802b432:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 802b436:	e131      	b.n	802b69c <_vfiprintf_r+0x8f8>
 802b438:	ab3a      	add	r3, sp, #232	@ 0xe8
 802b43a:	9308      	str	r3, [sp, #32]
 802b43c:	9b04      	ldr	r3, [sp, #16]
 802b43e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802b442:	f04f 0a00 	mov.w	sl, #0
 802b446:	930a      	str	r3, [sp, #40]	@ 0x28
 802b448:	220a      	movs	r2, #10
 802b44a:	2300      	movs	r3, #0
 802b44c:	4620      	mov	r0, r4
 802b44e:	4629      	mov	r1, r5
 802b450:	f7e5 fc82 	bl	8010d58 <__aeabi_uldivmod>
 802b454:	460b      	mov	r3, r1
 802b456:	9908      	ldr	r1, [sp, #32]
 802b458:	900b      	str	r0, [sp, #44]	@ 0x2c
 802b45a:	3230      	adds	r2, #48	@ 0x30
 802b45c:	f801 2c01 	strb.w	r2, [r1, #-1]
 802b460:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802b462:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 802b466:	f10a 0a01 	add.w	sl, sl, #1
 802b46a:	b1e2      	cbz	r2, 802b4a6 <_vfiprintf_r+0x702>
 802b46c:	9a06      	ldr	r2, [sp, #24]
 802b46e:	7812      	ldrb	r2, [r2, #0]
 802b470:	4552      	cmp	r2, sl
 802b472:	d118      	bne.n	802b4a6 <_vfiprintf_r+0x702>
 802b474:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802b478:	d015      	beq.n	802b4a6 <_vfiprintf_r+0x702>
 802b47a:	2c0a      	cmp	r4, #10
 802b47c:	f175 0200 	sbcs.w	r2, r5, #0
 802b480:	d311      	bcc.n	802b4a6 <_vfiprintf_r+0x702>
 802b482:	9308      	str	r3, [sp, #32]
 802b484:	9b07      	ldr	r3, [sp, #28]
 802b486:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802b488:	eba9 0903 	sub.w	r9, r9, r3
 802b48c:	461a      	mov	r2, r3
 802b48e:	4648      	mov	r0, r9
 802b490:	f000 ff3d 	bl	802c30e <strncpy>
 802b494:	9b06      	ldr	r3, [sp, #24]
 802b496:	785a      	ldrb	r2, [r3, #1]
 802b498:	9b08      	ldr	r3, [sp, #32]
 802b49a:	b172      	cbz	r2, 802b4ba <_vfiprintf_r+0x716>
 802b49c:	9a06      	ldr	r2, [sp, #24]
 802b49e:	3201      	adds	r2, #1
 802b4a0:	9206      	str	r2, [sp, #24]
 802b4a2:	f04f 0a00 	mov.w	sl, #0
 802b4a6:	2c0a      	cmp	r4, #10
 802b4a8:	f175 0500 	sbcs.w	r5, r5, #0
 802b4ac:	f0c0 80f6 	bcc.w	802b69c <_vfiprintf_r+0x8f8>
 802b4b0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802b4b2:	f8cd 9020 	str.w	r9, [sp, #32]
 802b4b6:	461d      	mov	r5, r3
 802b4b8:	e7c6      	b.n	802b448 <_vfiprintf_r+0x6a4>
 802b4ba:	4692      	mov	sl, r2
 802b4bc:	e7f3      	b.n	802b4a6 <_vfiprintf_r+0x702>
 802b4be:	f004 030f 	and.w	r3, r4, #15
 802b4c2:	9a05      	ldr	r2, [sp, #20]
 802b4c4:	0924      	lsrs	r4, r4, #4
 802b4c6:	5cd3      	ldrb	r3, [r2, r3]
 802b4c8:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802b4cc:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802b4d0:	092d      	lsrs	r5, r5, #4
 802b4d2:	ea54 0305 	orrs.w	r3, r4, r5
 802b4d6:	d1f2      	bne.n	802b4be <_vfiprintf_r+0x71a>
 802b4d8:	e0e0      	b.n	802b69c <_vfiprintf_r+0x8f8>
 802b4da:	b923      	cbnz	r3, 802b4e6 <_vfiprintf_r+0x742>
 802b4dc:	f01a 0f01 	tst.w	sl, #1
 802b4e0:	d001      	beq.n	802b4e6 <_vfiprintf_r+0x742>
 802b4e2:	2430      	movs	r4, #48	@ 0x30
 802b4e4:	e7a3      	b.n	802b42e <_vfiprintf_r+0x68a>
 802b4e6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802b4ea:	e0d7      	b.n	802b69c <_vfiprintf_r+0x8f8>
 802b4ec:	2b00      	cmp	r3, #0
 802b4ee:	f000 80a3 	beq.w	802b638 <_vfiprintf_r+0x894>
 802b4f2:	2400      	movs	r4, #0
 802b4f4:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802b4f8:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802b4fc:	46a8      	mov	r8, r5
 802b4fe:	e5e0      	b.n	802b0c2 <_vfiprintf_r+0x31e>
 802b500:	0803b06f 	.word	0x0803b06f
 802b504:	0803b05f 	.word	0x0803b05f
 802b508:	0803b02c 	.word	0x0803b02c
 802b50c:	2110      	movs	r1, #16
 802b50e:	6071      	str	r1, [r6, #4]
 802b510:	2a07      	cmp	r2, #7
 802b512:	4461      	add	r1, ip
 802b514:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802b518:	dd08      	ble.n	802b52c <_vfiprintf_r+0x788>
 802b51a:	9800      	ldr	r0, [sp, #0]
 802b51c:	aa0e      	add	r2, sp, #56	@ 0x38
 802b51e:	4639      	mov	r1, r7
 802b520:	f7ff fc0e 	bl	802ad40 <__sprint_r>
 802b524:	2800      	cmp	r0, #0
 802b526:	d166      	bne.n	802b5f6 <_vfiprintf_r+0x852>
 802b528:	4b60      	ldr	r3, [pc, #384]	@ (802b6ac <_vfiprintf_r+0x908>)
 802b52a:	a811      	add	r0, sp, #68	@ 0x44
 802b52c:	3d10      	subs	r5, #16
 802b52e:	4606      	mov	r6, r0
 802b530:	e694      	b.n	802b25c <_vfiprintf_r+0x4b8>
 802b532:	4606      	mov	r6, r0
 802b534:	e6ac      	b.n	802b290 <_vfiprintf_r+0x4ec>
 802b536:	9800      	ldr	r0, [sp, #0]
 802b538:	aa0e      	add	r2, sp, #56	@ 0x38
 802b53a:	4639      	mov	r1, r7
 802b53c:	f7ff fc00 	bl	802ad40 <__sprint_r>
 802b540:	2800      	cmp	r0, #0
 802b542:	d158      	bne.n	802b5f6 <_vfiprintf_r+0x852>
 802b544:	ae11      	add	r6, sp, #68	@ 0x44
 802b546:	e6b5      	b.n	802b2b4 <_vfiprintf_r+0x510>
 802b548:	9800      	ldr	r0, [sp, #0]
 802b54a:	aa0e      	add	r2, sp, #56	@ 0x38
 802b54c:	4639      	mov	r1, r7
 802b54e:	f7ff fbf7 	bl	802ad40 <__sprint_r>
 802b552:	2800      	cmp	r0, #0
 802b554:	d14f      	bne.n	802b5f6 <_vfiprintf_r+0x852>
 802b556:	ae11      	add	r6, sp, #68	@ 0x44
 802b558:	e6bc      	b.n	802b2d4 <_vfiprintf_r+0x530>
 802b55a:	2110      	movs	r1, #16
 802b55c:	6071      	str	r1, [r6, #4]
 802b55e:	2a07      	cmp	r2, #7
 802b560:	4461      	add	r1, ip
 802b562:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802b566:	dd08      	ble.n	802b57a <_vfiprintf_r+0x7d6>
 802b568:	9800      	ldr	r0, [sp, #0]
 802b56a:	aa0e      	add	r2, sp, #56	@ 0x38
 802b56c:	4639      	mov	r1, r7
 802b56e:	f7ff fbe7 	bl	802ad40 <__sprint_r>
 802b572:	2800      	cmp	r0, #0
 802b574:	d13f      	bne.n	802b5f6 <_vfiprintf_r+0x852>
 802b576:	4b4e      	ldr	r3, [pc, #312]	@ (802b6b0 <_vfiprintf_r+0x90c>)
 802b578:	a811      	add	r0, sp, #68	@ 0x44
 802b57a:	3d10      	subs	r5, #16
 802b57c:	4606      	mov	r6, r0
 802b57e:	e6b2      	b.n	802b2e6 <_vfiprintf_r+0x542>
 802b580:	4606      	mov	r6, r0
 802b582:	e6ca      	b.n	802b31a <_vfiprintf_r+0x576>
 802b584:	2010      	movs	r0, #16
 802b586:	4402      	add	r2, r0
 802b588:	2b07      	cmp	r3, #7
 802b58a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802b58e:	6070      	str	r0, [r6, #4]
 802b590:	dd06      	ble.n	802b5a0 <_vfiprintf_r+0x7fc>
 802b592:	9800      	ldr	r0, [sp, #0]
 802b594:	aa0e      	add	r2, sp, #56	@ 0x38
 802b596:	4639      	mov	r1, r7
 802b598:	f7ff fbd2 	bl	802ad40 <__sprint_r>
 802b59c:	bb58      	cbnz	r0, 802b5f6 <_vfiprintf_r+0x852>
 802b59e:	a911      	add	r1, sp, #68	@ 0x44
 802b5a0:	3c10      	subs	r4, #16
 802b5a2:	460e      	mov	r6, r1
 802b5a4:	e6bd      	b.n	802b322 <_vfiprintf_r+0x57e>
 802b5a6:	460e      	mov	r6, r1
 802b5a8:	e6d6      	b.n	802b358 <_vfiprintf_r+0x5b4>
 802b5aa:	9800      	ldr	r0, [sp, #0]
 802b5ac:	aa0e      	add	r2, sp, #56	@ 0x38
 802b5ae:	4639      	mov	r1, r7
 802b5b0:	f7ff fbc6 	bl	802ad40 <__sprint_r>
 802b5b4:	b9f8      	cbnz	r0, 802b5f6 <_vfiprintf_r+0x852>
 802b5b6:	ab11      	add	r3, sp, #68	@ 0x44
 802b5b8:	e6de      	b.n	802b378 <_vfiprintf_r+0x5d4>
 802b5ba:	9a02      	ldr	r2, [sp, #8]
 802b5bc:	9904      	ldr	r1, [sp, #16]
 802b5be:	1a54      	subs	r4, r2, r1
 802b5c0:	2c00      	cmp	r4, #0
 802b5c2:	f77f aedd 	ble.w	802b380 <_vfiprintf_r+0x5dc>
 802b5c6:	4d39      	ldr	r5, [pc, #228]	@ (802b6ac <_vfiprintf_r+0x908>)
 802b5c8:	2610      	movs	r6, #16
 802b5ca:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802b5ce:	2c10      	cmp	r4, #16
 802b5d0:	f102 0201 	add.w	r2, r2, #1
 802b5d4:	601d      	str	r5, [r3, #0]
 802b5d6:	dc1d      	bgt.n	802b614 <_vfiprintf_r+0x870>
 802b5d8:	605c      	str	r4, [r3, #4]
 802b5da:	2a07      	cmp	r2, #7
 802b5dc:	440c      	add	r4, r1
 802b5de:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802b5e2:	f77f aecd 	ble.w	802b380 <_vfiprintf_r+0x5dc>
 802b5e6:	9800      	ldr	r0, [sp, #0]
 802b5e8:	aa0e      	add	r2, sp, #56	@ 0x38
 802b5ea:	4639      	mov	r1, r7
 802b5ec:	f7ff fba8 	bl	802ad40 <__sprint_r>
 802b5f0:	2800      	cmp	r0, #0
 802b5f2:	f43f aec5 	beq.w	802b380 <_vfiprintf_r+0x5dc>
 802b5f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802b5f8:	07d9      	lsls	r1, r3, #31
 802b5fa:	d405      	bmi.n	802b608 <_vfiprintf_r+0x864>
 802b5fc:	89bb      	ldrh	r3, [r7, #12]
 802b5fe:	059a      	lsls	r2, r3, #22
 802b600:	d402      	bmi.n	802b608 <_vfiprintf_r+0x864>
 802b602:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802b604:	f002 f877 	bl	802d6f6 <__retarget_lock_release_recursive>
 802b608:	89bb      	ldrh	r3, [r7, #12]
 802b60a:	065b      	lsls	r3, r3, #25
 802b60c:	f57f abfb 	bpl.w	802ae06 <_vfiprintf_r+0x62>
 802b610:	f7ff bbf6 	b.w	802ae00 <_vfiprintf_r+0x5c>
 802b614:	3110      	adds	r1, #16
 802b616:	2a07      	cmp	r2, #7
 802b618:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802b61c:	605e      	str	r6, [r3, #4]
 802b61e:	dc02      	bgt.n	802b626 <_vfiprintf_r+0x882>
 802b620:	3308      	adds	r3, #8
 802b622:	3c10      	subs	r4, #16
 802b624:	e7d1      	b.n	802b5ca <_vfiprintf_r+0x826>
 802b626:	9800      	ldr	r0, [sp, #0]
 802b628:	aa0e      	add	r2, sp, #56	@ 0x38
 802b62a:	4639      	mov	r1, r7
 802b62c:	f7ff fb88 	bl	802ad40 <__sprint_r>
 802b630:	2800      	cmp	r0, #0
 802b632:	d1e0      	bne.n	802b5f6 <_vfiprintf_r+0x852>
 802b634:	ab11      	add	r3, sp, #68	@ 0x44
 802b636:	e7f4      	b.n	802b622 <_vfiprintf_r+0x87e>
 802b638:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b63a:	b913      	cbnz	r3, 802b642 <_vfiprintf_r+0x89e>
 802b63c:	2300      	movs	r3, #0
 802b63e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b640:	e7d9      	b.n	802b5f6 <_vfiprintf_r+0x852>
 802b642:	9800      	ldr	r0, [sp, #0]
 802b644:	aa0e      	add	r2, sp, #56	@ 0x38
 802b646:	4639      	mov	r1, r7
 802b648:	f7ff fb7a 	bl	802ad40 <__sprint_r>
 802b64c:	2800      	cmp	r0, #0
 802b64e:	d0f5      	beq.n	802b63c <_vfiprintf_r+0x898>
 802b650:	e7d1      	b.n	802b5f6 <_vfiprintf_r+0x852>
 802b652:	ea54 0205 	orrs.w	r2, r4, r5
 802b656:	f8cd a010 	str.w	sl, [sp, #16]
 802b65a:	f43f ada6 	beq.w	802b1aa <_vfiprintf_r+0x406>
 802b65e:	2b01      	cmp	r3, #1
 802b660:	f43f aedf 	beq.w	802b422 <_vfiprintf_r+0x67e>
 802b664:	2b02      	cmp	r3, #2
 802b666:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802b66a:	f43f af28 	beq.w	802b4be <_vfiprintf_r+0x71a>
 802b66e:	f004 0307 	and.w	r3, r4, #7
 802b672:	08e4      	lsrs	r4, r4, #3
 802b674:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802b678:	08ed      	lsrs	r5, r5, #3
 802b67a:	3330      	adds	r3, #48	@ 0x30
 802b67c:	ea54 0105 	orrs.w	r1, r4, r5
 802b680:	464a      	mov	r2, r9
 802b682:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802b686:	d1f2      	bne.n	802b66e <_vfiprintf_r+0x8ca>
 802b688:	9904      	ldr	r1, [sp, #16]
 802b68a:	07c8      	lsls	r0, r1, #31
 802b68c:	d506      	bpl.n	802b69c <_vfiprintf_r+0x8f8>
 802b68e:	2b30      	cmp	r3, #48	@ 0x30
 802b690:	d004      	beq.n	802b69c <_vfiprintf_r+0x8f8>
 802b692:	2330      	movs	r3, #48	@ 0x30
 802b694:	f809 3c01 	strb.w	r3, [r9, #-1]
 802b698:	f1a2 0902 	sub.w	r9, r2, #2
 802b69c:	ab3a      	add	r3, sp, #232	@ 0xe8
 802b69e:	eba3 0309 	sub.w	r3, r3, r9
 802b6a2:	9c01      	ldr	r4, [sp, #4]
 802b6a4:	f8dd a010 	ldr.w	sl, [sp, #16]
 802b6a8:	9301      	str	r3, [sp, #4]
 802b6aa:	e5bb      	b.n	802b224 <_vfiprintf_r+0x480>
 802b6ac:	0803b06f 	.word	0x0803b06f
 802b6b0:	0803b05f 	.word	0x0803b05f

0802b6b4 <__sbprintf>:
 802b6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b6b6:	461f      	mov	r7, r3
 802b6b8:	898b      	ldrh	r3, [r1, #12]
 802b6ba:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802b6be:	f023 0302 	bic.w	r3, r3, #2
 802b6c2:	f8ad 300c 	strh.w	r3, [sp, #12]
 802b6c6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802b6c8:	9319      	str	r3, [sp, #100]	@ 0x64
 802b6ca:	89cb      	ldrh	r3, [r1, #14]
 802b6cc:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b6d0:	69cb      	ldr	r3, [r1, #28]
 802b6d2:	9307      	str	r3, [sp, #28]
 802b6d4:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802b6d6:	9309      	str	r3, [sp, #36]	@ 0x24
 802b6d8:	ab1a      	add	r3, sp, #104	@ 0x68
 802b6da:	9300      	str	r3, [sp, #0]
 802b6dc:	9304      	str	r3, [sp, #16]
 802b6de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b6e2:	4615      	mov	r5, r2
 802b6e4:	4606      	mov	r6, r0
 802b6e6:	9302      	str	r3, [sp, #8]
 802b6e8:	9305      	str	r3, [sp, #20]
 802b6ea:	a816      	add	r0, sp, #88	@ 0x58
 802b6ec:	2300      	movs	r3, #0
 802b6ee:	460c      	mov	r4, r1
 802b6f0:	9306      	str	r3, [sp, #24]
 802b6f2:	f001 fffb 	bl	802d6ec <__retarget_lock_init_recursive>
 802b6f6:	462a      	mov	r2, r5
 802b6f8:	463b      	mov	r3, r7
 802b6fa:	4669      	mov	r1, sp
 802b6fc:	4630      	mov	r0, r6
 802b6fe:	f7ff fb51 	bl	802ada4 <_vfiprintf_r>
 802b702:	1e05      	subs	r5, r0, #0
 802b704:	db07      	blt.n	802b716 <__sbprintf+0x62>
 802b706:	4669      	mov	r1, sp
 802b708:	4630      	mov	r0, r6
 802b70a:	f000 f9d1 	bl	802bab0 <_fflush_r>
 802b70e:	2800      	cmp	r0, #0
 802b710:	bf18      	it	ne
 802b712:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802b716:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802b71a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802b71c:	065b      	lsls	r3, r3, #25
 802b71e:	bf42      	ittt	mi
 802b720:	89a3      	ldrhmi	r3, [r4, #12]
 802b722:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802b726:	81a3      	strhmi	r3, [r4, #12]
 802b728:	f001 ffe1 	bl	802d6ee <__retarget_lock_close_recursive>
 802b72c:	4628      	mov	r0, r5
 802b72e:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802b732:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802b734 <putchar>:
 802b734:	4b02      	ldr	r3, [pc, #8]	@ (802b740 <putchar+0xc>)
 802b736:	4601      	mov	r1, r0
 802b738:	6818      	ldr	r0, [r3, #0]
 802b73a:	6882      	ldr	r2, [r0, #8]
 802b73c:	f007 bacc 	b.w	8032cd8 <_putc_r>
 802b740:	200002d8 	.word	0x200002d8

0802b744 <_puts_r>:
 802b744:	b530      	push	{r4, r5, lr}
 802b746:	4605      	mov	r5, r0
 802b748:	b089      	sub	sp, #36	@ 0x24
 802b74a:	4608      	mov	r0, r1
 802b74c:	460c      	mov	r4, r1
 802b74e:	f7e4 fda7 	bl	80102a0 <strlen>
 802b752:	4b1e      	ldr	r3, [pc, #120]	@ (802b7cc <_puts_r+0x88>)
 802b754:	9306      	str	r3, [sp, #24]
 802b756:	2301      	movs	r3, #1
 802b758:	e9cd 4004 	strd	r4, r0, [sp, #16]
 802b75c:	9307      	str	r3, [sp, #28]
 802b75e:	4418      	add	r0, r3
 802b760:	ab04      	add	r3, sp, #16
 802b762:	9301      	str	r3, [sp, #4]
 802b764:	2302      	movs	r3, #2
 802b766:	9302      	str	r3, [sp, #8]
 802b768:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 802b76a:	68ac      	ldr	r4, [r5, #8]
 802b76c:	9003      	str	r0, [sp, #12]
 802b76e:	b913      	cbnz	r3, 802b776 <_puts_r+0x32>
 802b770:	4628      	mov	r0, r5
 802b772:	f000 fadf 	bl	802bd34 <__sinit>
 802b776:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b778:	07db      	lsls	r3, r3, #31
 802b77a:	d405      	bmi.n	802b788 <_puts_r+0x44>
 802b77c:	89a3      	ldrh	r3, [r4, #12]
 802b77e:	0598      	lsls	r0, r3, #22
 802b780:	d402      	bmi.n	802b788 <_puts_r+0x44>
 802b782:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b784:	f001 ffb5 	bl	802d6f2 <__retarget_lock_acquire_recursive>
 802b788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b78c:	0499      	lsls	r1, r3, #18
 802b78e:	d406      	bmi.n	802b79e <_puts_r+0x5a>
 802b790:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802b794:	81a3      	strh	r3, [r4, #12]
 802b796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b798:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802b79c:	6663      	str	r3, [r4, #100]	@ 0x64
 802b79e:	4628      	mov	r0, r5
 802b7a0:	aa01      	add	r2, sp, #4
 802b7a2:	4621      	mov	r1, r4
 802b7a4:	f000 fb18 	bl	802bdd8 <__sfvwrite_r>
 802b7a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b7aa:	2800      	cmp	r0, #0
 802b7ac:	bf0c      	ite	eq
 802b7ae:	250a      	moveq	r5, #10
 802b7b0:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802b7b4:	07da      	lsls	r2, r3, #31
 802b7b6:	d405      	bmi.n	802b7c4 <_puts_r+0x80>
 802b7b8:	89a3      	ldrh	r3, [r4, #12]
 802b7ba:	059b      	lsls	r3, r3, #22
 802b7bc:	d402      	bmi.n	802b7c4 <_puts_r+0x80>
 802b7be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b7c0:	f001 ff99 	bl	802d6f6 <__retarget_lock_release_recursive>
 802b7c4:	4628      	mov	r0, r5
 802b7c6:	b009      	add	sp, #36	@ 0x24
 802b7c8:	bd30      	pop	{r4, r5, pc}
 802b7ca:	bf00      	nop
 802b7cc:	0803b009 	.word	0x0803b009

0802b7d0 <puts>:
 802b7d0:	4b02      	ldr	r3, [pc, #8]	@ (802b7dc <puts+0xc>)
 802b7d2:	4601      	mov	r1, r0
 802b7d4:	6818      	ldr	r0, [r3, #0]
 802b7d6:	f7ff bfb5 	b.w	802b744 <_puts_r>
 802b7da:	bf00      	nop
 802b7dc:	200002d8 	.word	0x200002d8

0802b7e0 <srand>:
 802b7e0:	4b03      	ldr	r3, [pc, #12]	@ (802b7f0 <srand+0x10>)
 802b7e2:	681b      	ldr	r3, [r3, #0]
 802b7e4:	2200      	movs	r2, #0
 802b7e6:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
 802b7ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 802b7ee:	4770      	bx	lr
 802b7f0:	200002d8 	.word	0x200002d8

0802b7f4 <rand>:
 802b7f4:	4b0a      	ldr	r3, [pc, #40]	@ (802b820 <rand+0x2c>)
 802b7f6:	480b      	ldr	r0, [pc, #44]	@ (802b824 <rand+0x30>)
 802b7f8:	6819      	ldr	r1, [r3, #0]
 802b7fa:	4a0b      	ldr	r2, [pc, #44]	@ (802b828 <rand+0x34>)
 802b7fc:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 802b800:	b510      	push	{r4, lr}
 802b802:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 802b806:	4358      	muls	r0, r3
 802b808:	fb02 0004 	mla	r0, r2, r4, r0
 802b80c:	fba3 3202 	umull	r3, r2, r3, r2
 802b810:	3301      	adds	r3, #1
 802b812:	eb40 0002 	adc.w	r0, r0, r2
 802b816:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 802b81a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802b81e:	bd10      	pop	{r4, pc}
 802b820:	200002d8 	.word	0x200002d8
 802b824:	5851f42d 	.word	0x5851f42d
 802b828:	4c957f2d 	.word	0x4c957f2d

0802b82c <snprintf>:
 802b82c:	b40c      	push	{r2, r3}
 802b82e:	b530      	push	{r4, r5, lr}
 802b830:	4b17      	ldr	r3, [pc, #92]	@ (802b890 <snprintf+0x64>)
 802b832:	1e0c      	subs	r4, r1, #0
 802b834:	681d      	ldr	r5, [r3, #0]
 802b836:	b09d      	sub	sp, #116	@ 0x74
 802b838:	da08      	bge.n	802b84c <snprintf+0x20>
 802b83a:	238b      	movs	r3, #139	@ 0x8b
 802b83c:	602b      	str	r3, [r5, #0]
 802b83e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b842:	b01d      	add	sp, #116	@ 0x74
 802b844:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802b848:	b002      	add	sp, #8
 802b84a:	4770      	bx	lr
 802b84c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802b850:	f8ad 3014 	strh.w	r3, [sp, #20]
 802b854:	bf14      	ite	ne
 802b856:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802b85a:	4623      	moveq	r3, r4
 802b85c:	9304      	str	r3, [sp, #16]
 802b85e:	9307      	str	r3, [sp, #28]
 802b860:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802b864:	9002      	str	r0, [sp, #8]
 802b866:	9006      	str	r0, [sp, #24]
 802b868:	f8ad 3016 	strh.w	r3, [sp, #22]
 802b86c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802b86e:	ab21      	add	r3, sp, #132	@ 0x84
 802b870:	a902      	add	r1, sp, #8
 802b872:	4628      	mov	r0, r5
 802b874:	9301      	str	r3, [sp, #4]
 802b876:	f004 fe7b 	bl	8030570 <_svfprintf_r>
 802b87a:	1c43      	adds	r3, r0, #1
 802b87c:	bfbc      	itt	lt
 802b87e:	238b      	movlt	r3, #139	@ 0x8b
 802b880:	602b      	strlt	r3, [r5, #0]
 802b882:	2c00      	cmp	r4, #0
 802b884:	d0dd      	beq.n	802b842 <snprintf+0x16>
 802b886:	9b02      	ldr	r3, [sp, #8]
 802b888:	2200      	movs	r2, #0
 802b88a:	701a      	strb	r2, [r3, #0]
 802b88c:	e7d9      	b.n	802b842 <snprintf+0x16>
 802b88e:	bf00      	nop
 802b890:	200002d8 	.word	0x200002d8

0802b894 <_strtol_l.constprop.0>:
 802b894:	2b24      	cmp	r3, #36	@ 0x24
 802b896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b89a:	4686      	mov	lr, r0
 802b89c:	4690      	mov	r8, r2
 802b89e:	d801      	bhi.n	802b8a4 <_strtol_l.constprop.0+0x10>
 802b8a0:	2b01      	cmp	r3, #1
 802b8a2:	d106      	bne.n	802b8b2 <_strtol_l.constprop.0+0x1e>
 802b8a4:	f001 fef0 	bl	802d688 <__errno>
 802b8a8:	2316      	movs	r3, #22
 802b8aa:	6003      	str	r3, [r0, #0]
 802b8ac:	2000      	movs	r0, #0
 802b8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b8b2:	4834      	ldr	r0, [pc, #208]	@ (802b984 <_strtol_l.constprop.0+0xf0>)
 802b8b4:	460d      	mov	r5, r1
 802b8b6:	462a      	mov	r2, r5
 802b8b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 802b8bc:	5d06      	ldrb	r6, [r0, r4]
 802b8be:	f016 0608 	ands.w	r6, r6, #8
 802b8c2:	d1f8      	bne.n	802b8b6 <_strtol_l.constprop.0+0x22>
 802b8c4:	2c2d      	cmp	r4, #45	@ 0x2d
 802b8c6:	d12d      	bne.n	802b924 <_strtol_l.constprop.0+0x90>
 802b8c8:	782c      	ldrb	r4, [r5, #0]
 802b8ca:	2601      	movs	r6, #1
 802b8cc:	1c95      	adds	r5, r2, #2
 802b8ce:	f033 0210 	bics.w	r2, r3, #16
 802b8d2:	d109      	bne.n	802b8e8 <_strtol_l.constprop.0+0x54>
 802b8d4:	2c30      	cmp	r4, #48	@ 0x30
 802b8d6:	d12a      	bne.n	802b92e <_strtol_l.constprop.0+0x9a>
 802b8d8:	782a      	ldrb	r2, [r5, #0]
 802b8da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802b8de:	2a58      	cmp	r2, #88	@ 0x58
 802b8e0:	d125      	bne.n	802b92e <_strtol_l.constprop.0+0x9a>
 802b8e2:	786c      	ldrb	r4, [r5, #1]
 802b8e4:	2310      	movs	r3, #16
 802b8e6:	3502      	adds	r5, #2
 802b8e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802b8ec:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 802b8f0:	2200      	movs	r2, #0
 802b8f2:	fbbc f9f3 	udiv	r9, ip, r3
 802b8f6:	4610      	mov	r0, r2
 802b8f8:	fb03 ca19 	mls	sl, r3, r9, ip
 802b8fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802b900:	2f09      	cmp	r7, #9
 802b902:	d81b      	bhi.n	802b93c <_strtol_l.constprop.0+0xa8>
 802b904:	463c      	mov	r4, r7
 802b906:	42a3      	cmp	r3, r4
 802b908:	dd27      	ble.n	802b95a <_strtol_l.constprop.0+0xc6>
 802b90a:	1c57      	adds	r7, r2, #1
 802b90c:	d007      	beq.n	802b91e <_strtol_l.constprop.0+0x8a>
 802b90e:	4581      	cmp	r9, r0
 802b910:	d320      	bcc.n	802b954 <_strtol_l.constprop.0+0xc0>
 802b912:	d101      	bne.n	802b918 <_strtol_l.constprop.0+0x84>
 802b914:	45a2      	cmp	sl, r4
 802b916:	db1d      	blt.n	802b954 <_strtol_l.constprop.0+0xc0>
 802b918:	fb00 4003 	mla	r0, r0, r3, r4
 802b91c:	2201      	movs	r2, #1
 802b91e:	f815 4b01 	ldrb.w	r4, [r5], #1
 802b922:	e7eb      	b.n	802b8fc <_strtol_l.constprop.0+0x68>
 802b924:	2c2b      	cmp	r4, #43	@ 0x2b
 802b926:	bf04      	itt	eq
 802b928:	782c      	ldrbeq	r4, [r5, #0]
 802b92a:	1c95      	addeq	r5, r2, #2
 802b92c:	e7cf      	b.n	802b8ce <_strtol_l.constprop.0+0x3a>
 802b92e:	2b00      	cmp	r3, #0
 802b930:	d1da      	bne.n	802b8e8 <_strtol_l.constprop.0+0x54>
 802b932:	2c30      	cmp	r4, #48	@ 0x30
 802b934:	bf0c      	ite	eq
 802b936:	2308      	moveq	r3, #8
 802b938:	230a      	movne	r3, #10
 802b93a:	e7d5      	b.n	802b8e8 <_strtol_l.constprop.0+0x54>
 802b93c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 802b940:	2f19      	cmp	r7, #25
 802b942:	d801      	bhi.n	802b948 <_strtol_l.constprop.0+0xb4>
 802b944:	3c37      	subs	r4, #55	@ 0x37
 802b946:	e7de      	b.n	802b906 <_strtol_l.constprop.0+0x72>
 802b948:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802b94c:	2f19      	cmp	r7, #25
 802b94e:	d804      	bhi.n	802b95a <_strtol_l.constprop.0+0xc6>
 802b950:	3c57      	subs	r4, #87	@ 0x57
 802b952:	e7d8      	b.n	802b906 <_strtol_l.constprop.0+0x72>
 802b954:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802b958:	e7e1      	b.n	802b91e <_strtol_l.constprop.0+0x8a>
 802b95a:	1c53      	adds	r3, r2, #1
 802b95c:	d108      	bne.n	802b970 <_strtol_l.constprop.0+0xdc>
 802b95e:	2322      	movs	r3, #34	@ 0x22
 802b960:	f8ce 3000 	str.w	r3, [lr]
 802b964:	4660      	mov	r0, ip
 802b966:	f1b8 0f00 	cmp.w	r8, #0
 802b96a:	d0a0      	beq.n	802b8ae <_strtol_l.constprop.0+0x1a>
 802b96c:	1e69      	subs	r1, r5, #1
 802b96e:	e006      	b.n	802b97e <_strtol_l.constprop.0+0xea>
 802b970:	b106      	cbz	r6, 802b974 <_strtol_l.constprop.0+0xe0>
 802b972:	4240      	negs	r0, r0
 802b974:	f1b8 0f00 	cmp.w	r8, #0
 802b978:	d099      	beq.n	802b8ae <_strtol_l.constprop.0+0x1a>
 802b97a:	2a00      	cmp	r2, #0
 802b97c:	d1f6      	bne.n	802b96c <_strtol_l.constprop.0+0xd8>
 802b97e:	f8c8 1000 	str.w	r1, [r8]
 802b982:	e794      	b.n	802b8ae <_strtol_l.constprop.0+0x1a>
 802b984:	0803b3c9 	.word	0x0803b3c9

0802b988 <_strtol_r>:
 802b988:	f7ff bf84 	b.w	802b894 <_strtol_l.constprop.0>

0802b98c <strtol>:
 802b98c:	4613      	mov	r3, r2
 802b98e:	460a      	mov	r2, r1
 802b990:	4601      	mov	r1, r0
 802b992:	4802      	ldr	r0, [pc, #8]	@ (802b99c <strtol+0x10>)
 802b994:	6800      	ldr	r0, [r0, #0]
 802b996:	f7ff bf7d 	b.w	802b894 <_strtol_l.constprop.0>
 802b99a:	bf00      	nop
 802b99c:	200002d8 	.word	0x200002d8

0802b9a0 <__sflush_r>:
 802b9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b9a4:	4605      	mov	r5, r0
 802b9a6:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 802b9aa:	0706      	lsls	r6, r0, #28
 802b9ac:	460c      	mov	r4, r1
 802b9ae:	d457      	bmi.n	802ba60 <__sflush_r+0xc0>
 802b9b0:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 802b9b4:	818b      	strh	r3, [r1, #12]
 802b9b6:	684b      	ldr	r3, [r1, #4]
 802b9b8:	2b00      	cmp	r3, #0
 802b9ba:	dc02      	bgt.n	802b9c2 <__sflush_r+0x22>
 802b9bc:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 802b9be:	2b00      	cmp	r3, #0
 802b9c0:	dd4c      	ble.n	802ba5c <__sflush_r+0xbc>
 802b9c2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802b9c4:	2e00      	cmp	r6, #0
 802b9c6:	d049      	beq.n	802ba5c <__sflush_r+0xbc>
 802b9c8:	2300      	movs	r3, #0
 802b9ca:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 802b9ce:	682f      	ldr	r7, [r5, #0]
 802b9d0:	69e1      	ldr	r1, [r4, #28]
 802b9d2:	602b      	str	r3, [r5, #0]
 802b9d4:	d034      	beq.n	802ba40 <__sflush_r+0xa0>
 802b9d6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 802b9d8:	89a3      	ldrh	r3, [r4, #12]
 802b9da:	0759      	lsls	r1, r3, #29
 802b9dc:	d505      	bpl.n	802b9ea <__sflush_r+0x4a>
 802b9de:	6863      	ldr	r3, [r4, #4]
 802b9e0:	1ad2      	subs	r2, r2, r3
 802b9e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802b9e4:	b10b      	cbz	r3, 802b9ea <__sflush_r+0x4a>
 802b9e6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802b9e8:	1ad2      	subs	r2, r2, r3
 802b9ea:	2300      	movs	r3, #0
 802b9ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802b9ee:	69e1      	ldr	r1, [r4, #28]
 802b9f0:	4628      	mov	r0, r5
 802b9f2:	47b0      	blx	r6
 802b9f4:	1c43      	adds	r3, r0, #1
 802b9f6:	d106      	bne.n	802ba06 <__sflush_r+0x66>
 802b9f8:	682a      	ldr	r2, [r5, #0]
 802b9fa:	2a1d      	cmp	r2, #29
 802b9fc:	d848      	bhi.n	802ba90 <__sflush_r+0xf0>
 802b9fe:	4b2b      	ldr	r3, [pc, #172]	@ (802baac <__sflush_r+0x10c>)
 802ba00:	4113      	asrs	r3, r2
 802ba02:	07de      	lsls	r6, r3, #31
 802ba04:	d444      	bmi.n	802ba90 <__sflush_r+0xf0>
 802ba06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ba0a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 802ba0e:	81a2      	strh	r2, [r4, #12]
 802ba10:	2200      	movs	r2, #0
 802ba12:	6062      	str	r2, [r4, #4]
 802ba14:	04d9      	lsls	r1, r3, #19
 802ba16:	6922      	ldr	r2, [r4, #16]
 802ba18:	6022      	str	r2, [r4, #0]
 802ba1a:	d504      	bpl.n	802ba26 <__sflush_r+0x86>
 802ba1c:	1c42      	adds	r2, r0, #1
 802ba1e:	d101      	bne.n	802ba24 <__sflush_r+0x84>
 802ba20:	682b      	ldr	r3, [r5, #0]
 802ba22:	b903      	cbnz	r3, 802ba26 <__sflush_r+0x86>
 802ba24:	6520      	str	r0, [r4, #80]	@ 0x50
 802ba26:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802ba28:	602f      	str	r7, [r5, #0]
 802ba2a:	b1b9      	cbz	r1, 802ba5c <__sflush_r+0xbc>
 802ba2c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802ba30:	4299      	cmp	r1, r3
 802ba32:	d002      	beq.n	802ba3a <__sflush_r+0x9a>
 802ba34:	4628      	mov	r0, r5
 802ba36:	f002 fd61 	bl	802e4fc <_free_r>
 802ba3a:	2300      	movs	r3, #0
 802ba3c:	6323      	str	r3, [r4, #48]	@ 0x30
 802ba3e:	e00d      	b.n	802ba5c <__sflush_r+0xbc>
 802ba40:	2301      	movs	r3, #1
 802ba42:	4628      	mov	r0, r5
 802ba44:	47b0      	blx	r6
 802ba46:	4602      	mov	r2, r0
 802ba48:	1c50      	adds	r0, r2, #1
 802ba4a:	d1c5      	bne.n	802b9d8 <__sflush_r+0x38>
 802ba4c:	682b      	ldr	r3, [r5, #0]
 802ba4e:	2b00      	cmp	r3, #0
 802ba50:	d0c2      	beq.n	802b9d8 <__sflush_r+0x38>
 802ba52:	2b1d      	cmp	r3, #29
 802ba54:	d001      	beq.n	802ba5a <__sflush_r+0xba>
 802ba56:	2b16      	cmp	r3, #22
 802ba58:	d11a      	bne.n	802ba90 <__sflush_r+0xf0>
 802ba5a:	602f      	str	r7, [r5, #0]
 802ba5c:	2000      	movs	r0, #0
 802ba5e:	e01e      	b.n	802ba9e <__sflush_r+0xfe>
 802ba60:	690f      	ldr	r7, [r1, #16]
 802ba62:	2f00      	cmp	r7, #0
 802ba64:	d0fa      	beq.n	802ba5c <__sflush_r+0xbc>
 802ba66:	0783      	lsls	r3, r0, #30
 802ba68:	680e      	ldr	r6, [r1, #0]
 802ba6a:	bf08      	it	eq
 802ba6c:	694b      	ldreq	r3, [r1, #20]
 802ba6e:	600f      	str	r7, [r1, #0]
 802ba70:	bf18      	it	ne
 802ba72:	2300      	movne	r3, #0
 802ba74:	eba6 0807 	sub.w	r8, r6, r7
 802ba78:	608b      	str	r3, [r1, #8]
 802ba7a:	f1b8 0f00 	cmp.w	r8, #0
 802ba7e:	dded      	ble.n	802ba5c <__sflush_r+0xbc>
 802ba80:	69e1      	ldr	r1, [r4, #28]
 802ba82:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 802ba84:	4643      	mov	r3, r8
 802ba86:	463a      	mov	r2, r7
 802ba88:	4628      	mov	r0, r5
 802ba8a:	47b0      	blx	r6
 802ba8c:	2800      	cmp	r0, #0
 802ba8e:	dc08      	bgt.n	802baa2 <__sflush_r+0x102>
 802ba90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ba94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802ba98:	81a3      	strh	r3, [r4, #12]
 802ba9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802ba9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802baa2:	4407      	add	r7, r0
 802baa4:	eba8 0800 	sub.w	r8, r8, r0
 802baa8:	e7e7      	b.n	802ba7a <__sflush_r+0xda>
 802baaa:	bf00      	nop
 802baac:	dfbffffe 	.word	0xdfbffffe

0802bab0 <_fflush_r>:
 802bab0:	b538      	push	{r3, r4, r5, lr}
 802bab2:	460c      	mov	r4, r1
 802bab4:	4605      	mov	r5, r0
 802bab6:	b118      	cbz	r0, 802bac0 <_fflush_r+0x10>
 802bab8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802baba:	b90b      	cbnz	r3, 802bac0 <_fflush_r+0x10>
 802babc:	f000 f93a 	bl	802bd34 <__sinit>
 802bac0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 802bac4:	b1b8      	cbz	r0, 802baf6 <_fflush_r+0x46>
 802bac6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802bac8:	07db      	lsls	r3, r3, #31
 802baca:	d404      	bmi.n	802bad6 <_fflush_r+0x26>
 802bacc:	0581      	lsls	r1, r0, #22
 802bace:	d402      	bmi.n	802bad6 <_fflush_r+0x26>
 802bad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802bad2:	f001 fe0e 	bl	802d6f2 <__retarget_lock_acquire_recursive>
 802bad6:	4628      	mov	r0, r5
 802bad8:	4621      	mov	r1, r4
 802bada:	f7ff ff61 	bl	802b9a0 <__sflush_r>
 802bade:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802bae0:	07da      	lsls	r2, r3, #31
 802bae2:	4605      	mov	r5, r0
 802bae4:	d405      	bmi.n	802baf2 <_fflush_r+0x42>
 802bae6:	89a3      	ldrh	r3, [r4, #12]
 802bae8:	059b      	lsls	r3, r3, #22
 802baea:	d402      	bmi.n	802baf2 <_fflush_r+0x42>
 802baec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802baee:	f001 fe02 	bl	802d6f6 <__retarget_lock_release_recursive>
 802baf2:	4628      	mov	r0, r5
 802baf4:	bd38      	pop	{r3, r4, r5, pc}
 802baf6:	4605      	mov	r5, r0
 802baf8:	e7fb      	b.n	802baf2 <_fflush_r+0x42>
	...

0802bafc <sprintf>:
 802bafc:	b40e      	push	{r1, r2, r3}
 802bafe:	b500      	push	{lr}
 802bb00:	b09c      	sub	sp, #112	@ 0x70
 802bb02:	ab1d      	add	r3, sp, #116	@ 0x74
 802bb04:	9002      	str	r0, [sp, #8]
 802bb06:	9006      	str	r0, [sp, #24]
 802bb08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802bb0c:	4809      	ldr	r0, [pc, #36]	@ (802bb34 <sprintf+0x38>)
 802bb0e:	9107      	str	r1, [sp, #28]
 802bb10:	9104      	str	r1, [sp, #16]
 802bb12:	4909      	ldr	r1, [pc, #36]	@ (802bb38 <sprintf+0x3c>)
 802bb14:	f853 2b04 	ldr.w	r2, [r3], #4
 802bb18:	9105      	str	r1, [sp, #20]
 802bb1a:	6800      	ldr	r0, [r0, #0]
 802bb1c:	9301      	str	r3, [sp, #4]
 802bb1e:	a902      	add	r1, sp, #8
 802bb20:	f004 fd26 	bl	8030570 <_svfprintf_r>
 802bb24:	9b02      	ldr	r3, [sp, #8]
 802bb26:	2200      	movs	r2, #0
 802bb28:	701a      	strb	r2, [r3, #0]
 802bb2a:	b01c      	add	sp, #112	@ 0x70
 802bb2c:	f85d eb04 	ldr.w	lr, [sp], #4
 802bb30:	b003      	add	sp, #12
 802bb32:	4770      	bx	lr
 802bb34:	200002d8 	.word	0x200002d8
 802bb38:	ffff0208 	.word	0xffff0208

0802bb3c <sscanf>:
 802bb3c:	b40e      	push	{r1, r2, r3}
 802bb3e:	b530      	push	{r4, r5, lr}
 802bb40:	b09c      	sub	sp, #112	@ 0x70
 802bb42:	ac1f      	add	r4, sp, #124	@ 0x7c
 802bb44:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802bb48:	f854 5b04 	ldr.w	r5, [r4], #4
 802bb4c:	f8ad 2014 	strh.w	r2, [sp, #20]
 802bb50:	9002      	str	r0, [sp, #8]
 802bb52:	9006      	str	r0, [sp, #24]
 802bb54:	f7e4 fba4 	bl	80102a0 <strlen>
 802bb58:	4b0b      	ldr	r3, [pc, #44]	@ (802bb88 <sscanf+0x4c>)
 802bb5a:	9003      	str	r0, [sp, #12]
 802bb5c:	9007      	str	r0, [sp, #28]
 802bb5e:	930a      	str	r3, [sp, #40]	@ 0x28
 802bb60:	480a      	ldr	r0, [pc, #40]	@ (802bb8c <sscanf+0x50>)
 802bb62:	9401      	str	r4, [sp, #4]
 802bb64:	2300      	movs	r3, #0
 802bb66:	930e      	str	r3, [sp, #56]	@ 0x38
 802bb68:	9313      	str	r3, [sp, #76]	@ 0x4c
 802bb6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802bb6e:	f8ad 3016 	strh.w	r3, [sp, #22]
 802bb72:	462a      	mov	r2, r5
 802bb74:	4623      	mov	r3, r4
 802bb76:	a902      	add	r1, sp, #8
 802bb78:	6800      	ldr	r0, [r0, #0]
 802bb7a:	f005 ff3b 	bl	80319f4 <__ssvfscanf_r>
 802bb7e:	b01c      	add	sp, #112	@ 0x70
 802bb80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802bb84:	b003      	add	sp, #12
 802bb86:	4770      	bx	lr
 802bb88:	0802bbb3 	.word	0x0802bbb3
 802bb8c:	200002d8 	.word	0x200002d8

0802bb90 <__sread>:
 802bb90:	b510      	push	{r4, lr}
 802bb92:	460c      	mov	r4, r1
 802bb94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bb98:	f001 fd52 	bl	802d640 <_read_r>
 802bb9c:	2800      	cmp	r0, #0
 802bb9e:	bfab      	itete	ge
 802bba0:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 802bba2:	89a3      	ldrhlt	r3, [r4, #12]
 802bba4:	181b      	addge	r3, r3, r0
 802bba6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802bbaa:	bfac      	ite	ge
 802bbac:	6523      	strge	r3, [r4, #80]	@ 0x50
 802bbae:	81a3      	strhlt	r3, [r4, #12]
 802bbb0:	bd10      	pop	{r4, pc}

0802bbb2 <__seofread>:
 802bbb2:	2000      	movs	r0, #0
 802bbb4:	4770      	bx	lr

0802bbb6 <__swrite>:
 802bbb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bbba:	461f      	mov	r7, r3
 802bbbc:	898b      	ldrh	r3, [r1, #12]
 802bbbe:	05db      	lsls	r3, r3, #23
 802bbc0:	4605      	mov	r5, r0
 802bbc2:	460c      	mov	r4, r1
 802bbc4:	4616      	mov	r6, r2
 802bbc6:	d505      	bpl.n	802bbd4 <__swrite+0x1e>
 802bbc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bbcc:	2302      	movs	r3, #2
 802bbce:	2200      	movs	r2, #0
 802bbd0:	f001 fd24 	bl	802d61c <_lseek_r>
 802bbd4:	89a3      	ldrh	r3, [r4, #12]
 802bbd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802bbda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802bbde:	81a3      	strh	r3, [r4, #12]
 802bbe0:	4632      	mov	r2, r6
 802bbe2:	463b      	mov	r3, r7
 802bbe4:	4628      	mov	r0, r5
 802bbe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802bbea:	f001 bd3b 	b.w	802d664 <_write_r>

0802bbee <__sseek>:
 802bbee:	b510      	push	{r4, lr}
 802bbf0:	460c      	mov	r4, r1
 802bbf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bbf6:	f001 fd11 	bl	802d61c <_lseek_r>
 802bbfa:	1c43      	adds	r3, r0, #1
 802bbfc:	89a3      	ldrh	r3, [r4, #12]
 802bbfe:	bf15      	itete	ne
 802bc00:	6520      	strne	r0, [r4, #80]	@ 0x50
 802bc02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802bc06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802bc0a:	81a3      	strheq	r3, [r4, #12]
 802bc0c:	bf18      	it	ne
 802bc0e:	81a3      	strhne	r3, [r4, #12]
 802bc10:	bd10      	pop	{r4, pc}

0802bc12 <__sclose>:
 802bc12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bc16:	f001 bcc5 	b.w	802d5a4 <_close_r>
	...

0802bc1c <std>:
 802bc1c:	2300      	movs	r3, #0
 802bc1e:	b510      	push	{r4, lr}
 802bc20:	4604      	mov	r4, r0
 802bc22:	e9c0 3300 	strd	r3, r3, [r0]
 802bc26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802bc2a:	6083      	str	r3, [r0, #8]
 802bc2c:	8181      	strh	r1, [r0, #12]
 802bc2e:	6643      	str	r3, [r0, #100]	@ 0x64
 802bc30:	81c2      	strh	r2, [r0, #14]
 802bc32:	6183      	str	r3, [r0, #24]
 802bc34:	4619      	mov	r1, r3
 802bc36:	2208      	movs	r2, #8
 802bc38:	305c      	adds	r0, #92	@ 0x5c
 802bc3a:	f000 fb21 	bl	802c280 <memset>
 802bc3e:	4b0d      	ldr	r3, [pc, #52]	@ (802bc74 <std+0x58>)
 802bc40:	6223      	str	r3, [r4, #32]
 802bc42:	4b0d      	ldr	r3, [pc, #52]	@ (802bc78 <std+0x5c>)
 802bc44:	6263      	str	r3, [r4, #36]	@ 0x24
 802bc46:	4b0d      	ldr	r3, [pc, #52]	@ (802bc7c <std+0x60>)
 802bc48:	62a3      	str	r3, [r4, #40]	@ 0x28
 802bc4a:	4b0d      	ldr	r3, [pc, #52]	@ (802bc80 <std+0x64>)
 802bc4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802bc4e:	4b0d      	ldr	r3, [pc, #52]	@ (802bc84 <std+0x68>)
 802bc50:	61e4      	str	r4, [r4, #28]
 802bc52:	429c      	cmp	r4, r3
 802bc54:	d006      	beq.n	802bc64 <std+0x48>
 802bc56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802bc5a:	4294      	cmp	r4, r2
 802bc5c:	d002      	beq.n	802bc64 <std+0x48>
 802bc5e:	33d0      	adds	r3, #208	@ 0xd0
 802bc60:	429c      	cmp	r4, r3
 802bc62:	d105      	bne.n	802bc70 <std+0x54>
 802bc64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802bc68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bc6c:	f001 bd3e 	b.w	802d6ec <__retarget_lock_init_recursive>
 802bc70:	bd10      	pop	{r4, pc}
 802bc72:	bf00      	nop
 802bc74:	0802bb91 	.word	0x0802bb91
 802bc78:	0802bbb7 	.word	0x0802bbb7
 802bc7c:	0802bbef 	.word	0x0802bbef
 802bc80:	0802bc13 	.word	0x0802bc13
 802bc84:	20019ecc 	.word	0x20019ecc

0802bc88 <stdio_exit_handler>:
 802bc88:	4a02      	ldr	r2, [pc, #8]	@ (802bc94 <stdio_exit_handler+0xc>)
 802bc8a:	4903      	ldr	r1, [pc, #12]	@ (802bc98 <stdio_exit_handler+0x10>)
 802bc8c:	4803      	ldr	r0, [pc, #12]	@ (802bc9c <stdio_exit_handler+0x14>)
 802bc8e:	f000 b9ef 	b.w	802c070 <_fwalk_sglue>
 802bc92:	bf00      	nop
 802bc94:	20000158 	.word	0x20000158
 802bc98:	08033631 	.word	0x08033631
 802bc9c:	200002e0 	.word	0x200002e0

0802bca0 <cleanup_stdio>:
 802bca0:	6841      	ldr	r1, [r0, #4]
 802bca2:	4b0c      	ldr	r3, [pc, #48]	@ (802bcd4 <cleanup_stdio+0x34>)
 802bca4:	4299      	cmp	r1, r3
 802bca6:	b510      	push	{r4, lr}
 802bca8:	4604      	mov	r4, r0
 802bcaa:	d001      	beq.n	802bcb0 <cleanup_stdio+0x10>
 802bcac:	f007 fcc0 	bl	8033630 <_fclose_r>
 802bcb0:	68a1      	ldr	r1, [r4, #8]
 802bcb2:	4b09      	ldr	r3, [pc, #36]	@ (802bcd8 <cleanup_stdio+0x38>)
 802bcb4:	4299      	cmp	r1, r3
 802bcb6:	d002      	beq.n	802bcbe <cleanup_stdio+0x1e>
 802bcb8:	4620      	mov	r0, r4
 802bcba:	f007 fcb9 	bl	8033630 <_fclose_r>
 802bcbe:	68e1      	ldr	r1, [r4, #12]
 802bcc0:	4b06      	ldr	r3, [pc, #24]	@ (802bcdc <cleanup_stdio+0x3c>)
 802bcc2:	4299      	cmp	r1, r3
 802bcc4:	d004      	beq.n	802bcd0 <cleanup_stdio+0x30>
 802bcc6:	4620      	mov	r0, r4
 802bcc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bccc:	f007 bcb0 	b.w	8033630 <_fclose_r>
 802bcd0:	bd10      	pop	{r4, pc}
 802bcd2:	bf00      	nop
 802bcd4:	20019ecc 	.word	0x20019ecc
 802bcd8:	20019f34 	.word	0x20019f34
 802bcdc:	20019f9c 	.word	0x20019f9c

0802bce0 <global_stdio_init.part.0>:
 802bce0:	b510      	push	{r4, lr}
 802bce2:	4b0b      	ldr	r3, [pc, #44]	@ (802bd10 <global_stdio_init.part.0+0x30>)
 802bce4:	4c0b      	ldr	r4, [pc, #44]	@ (802bd14 <global_stdio_init.part.0+0x34>)
 802bce6:	4a0c      	ldr	r2, [pc, #48]	@ (802bd18 <global_stdio_init.part.0+0x38>)
 802bce8:	601a      	str	r2, [r3, #0]
 802bcea:	4620      	mov	r0, r4
 802bcec:	2200      	movs	r2, #0
 802bcee:	2104      	movs	r1, #4
 802bcf0:	f7ff ff94 	bl	802bc1c <std>
 802bcf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802bcf8:	2201      	movs	r2, #1
 802bcfa:	2109      	movs	r1, #9
 802bcfc:	f7ff ff8e 	bl	802bc1c <std>
 802bd00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802bd04:	2202      	movs	r2, #2
 802bd06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bd0a:	2112      	movs	r1, #18
 802bd0c:	f7ff bf86 	b.w	802bc1c <std>
 802bd10:	2001a004 	.word	0x2001a004
 802bd14:	20019ecc 	.word	0x20019ecc
 802bd18:	0802bc89 	.word	0x0802bc89

0802bd1c <__sfp_lock_acquire>:
 802bd1c:	4801      	ldr	r0, [pc, #4]	@ (802bd24 <__sfp_lock_acquire+0x8>)
 802bd1e:	f001 bce8 	b.w	802d6f2 <__retarget_lock_acquire_recursive>
 802bd22:	bf00      	nop
 802bd24:	2001a034 	.word	0x2001a034

0802bd28 <__sfp_lock_release>:
 802bd28:	4801      	ldr	r0, [pc, #4]	@ (802bd30 <__sfp_lock_release+0x8>)
 802bd2a:	f001 bce4 	b.w	802d6f6 <__retarget_lock_release_recursive>
 802bd2e:	bf00      	nop
 802bd30:	2001a034 	.word	0x2001a034

0802bd34 <__sinit>:
 802bd34:	b510      	push	{r4, lr}
 802bd36:	4604      	mov	r4, r0
 802bd38:	f7ff fff0 	bl	802bd1c <__sfp_lock_acquire>
 802bd3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802bd3e:	b11b      	cbz	r3, 802bd48 <__sinit+0x14>
 802bd40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bd44:	f7ff bff0 	b.w	802bd28 <__sfp_lock_release>
 802bd48:	4b04      	ldr	r3, [pc, #16]	@ (802bd5c <__sinit+0x28>)
 802bd4a:	6363      	str	r3, [r4, #52]	@ 0x34
 802bd4c:	4b04      	ldr	r3, [pc, #16]	@ (802bd60 <__sinit+0x2c>)
 802bd4e:	681b      	ldr	r3, [r3, #0]
 802bd50:	2b00      	cmp	r3, #0
 802bd52:	d1f5      	bne.n	802bd40 <__sinit+0xc>
 802bd54:	f7ff ffc4 	bl	802bce0 <global_stdio_init.part.0>
 802bd58:	e7f2      	b.n	802bd40 <__sinit+0xc>
 802bd5a:	bf00      	nop
 802bd5c:	0802bca1 	.word	0x0802bca1
 802bd60:	2001a004 	.word	0x2001a004

0802bd64 <_vsnprintf_r>:
 802bd64:	b530      	push	{r4, r5, lr}
 802bd66:	4614      	mov	r4, r2
 802bd68:	2c00      	cmp	r4, #0
 802bd6a:	b09b      	sub	sp, #108	@ 0x6c
 802bd6c:	4605      	mov	r5, r0
 802bd6e:	461a      	mov	r2, r3
 802bd70:	da05      	bge.n	802bd7e <_vsnprintf_r+0x1a>
 802bd72:	238b      	movs	r3, #139	@ 0x8b
 802bd74:	6003      	str	r3, [r0, #0]
 802bd76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802bd7a:	b01b      	add	sp, #108	@ 0x6c
 802bd7c:	bd30      	pop	{r4, r5, pc}
 802bd7e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802bd82:	f8ad 300c 	strh.w	r3, [sp, #12]
 802bd86:	bf14      	ite	ne
 802bd88:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802bd8c:	4623      	moveq	r3, r4
 802bd8e:	9302      	str	r3, [sp, #8]
 802bd90:	9305      	str	r3, [sp, #20]
 802bd92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802bd96:	9100      	str	r1, [sp, #0]
 802bd98:	9104      	str	r1, [sp, #16]
 802bd9a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802bd9e:	4669      	mov	r1, sp
 802bda0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802bda2:	f004 fbe5 	bl	8030570 <_svfprintf_r>
 802bda6:	1c43      	adds	r3, r0, #1
 802bda8:	bfbc      	itt	lt
 802bdaa:	238b      	movlt	r3, #139	@ 0x8b
 802bdac:	602b      	strlt	r3, [r5, #0]
 802bdae:	2c00      	cmp	r4, #0
 802bdb0:	d0e3      	beq.n	802bd7a <_vsnprintf_r+0x16>
 802bdb2:	9b00      	ldr	r3, [sp, #0]
 802bdb4:	2200      	movs	r2, #0
 802bdb6:	701a      	strb	r2, [r3, #0]
 802bdb8:	e7df      	b.n	802bd7a <_vsnprintf_r+0x16>
	...

0802bdbc <vsnprintf>:
 802bdbc:	b507      	push	{r0, r1, r2, lr}
 802bdbe:	9300      	str	r3, [sp, #0]
 802bdc0:	4613      	mov	r3, r2
 802bdc2:	460a      	mov	r2, r1
 802bdc4:	4601      	mov	r1, r0
 802bdc6:	4803      	ldr	r0, [pc, #12]	@ (802bdd4 <vsnprintf+0x18>)
 802bdc8:	6800      	ldr	r0, [r0, #0]
 802bdca:	f7ff ffcb 	bl	802bd64 <_vsnprintf_r>
 802bdce:	b003      	add	sp, #12
 802bdd0:	f85d fb04 	ldr.w	pc, [sp], #4
 802bdd4:	200002d8 	.word	0x200002d8

0802bdd8 <__sfvwrite_r>:
 802bdd8:	6893      	ldr	r3, [r2, #8]
 802bdda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bdde:	4606      	mov	r6, r0
 802bde0:	460c      	mov	r4, r1
 802bde2:	4691      	mov	r9, r2
 802bde4:	b91b      	cbnz	r3, 802bdee <__sfvwrite_r+0x16>
 802bde6:	2000      	movs	r0, #0
 802bde8:	b003      	add	sp, #12
 802bdea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bdee:	898b      	ldrh	r3, [r1, #12]
 802bdf0:	0718      	lsls	r0, r3, #28
 802bdf2:	d550      	bpl.n	802be96 <__sfvwrite_r+0xbe>
 802bdf4:	690b      	ldr	r3, [r1, #16]
 802bdf6:	2b00      	cmp	r3, #0
 802bdf8:	d04d      	beq.n	802be96 <__sfvwrite_r+0xbe>
 802bdfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bdfe:	f8d9 8000 	ldr.w	r8, [r9]
 802be02:	f013 0702 	ands.w	r7, r3, #2
 802be06:	d16b      	bne.n	802bee0 <__sfvwrite_r+0x108>
 802be08:	f013 0301 	ands.w	r3, r3, #1
 802be0c:	f000 809c 	beq.w	802bf48 <__sfvwrite_r+0x170>
 802be10:	4638      	mov	r0, r7
 802be12:	46ba      	mov	sl, r7
 802be14:	46bb      	mov	fp, r7
 802be16:	f1bb 0f00 	cmp.w	fp, #0
 802be1a:	f000 8103 	beq.w	802c024 <__sfvwrite_r+0x24c>
 802be1e:	b950      	cbnz	r0, 802be36 <__sfvwrite_r+0x5e>
 802be20:	465a      	mov	r2, fp
 802be22:	210a      	movs	r1, #10
 802be24:	4650      	mov	r0, sl
 802be26:	f7e4 f9eb 	bl	8010200 <memchr>
 802be2a:	2800      	cmp	r0, #0
 802be2c:	f000 8100 	beq.w	802c030 <__sfvwrite_r+0x258>
 802be30:	3001      	adds	r0, #1
 802be32:	eba0 070a 	sub.w	r7, r0, sl
 802be36:	6820      	ldr	r0, [r4, #0]
 802be38:	6921      	ldr	r1, [r4, #16]
 802be3a:	68a5      	ldr	r5, [r4, #8]
 802be3c:	6963      	ldr	r3, [r4, #20]
 802be3e:	455f      	cmp	r7, fp
 802be40:	463a      	mov	r2, r7
 802be42:	bf28      	it	cs
 802be44:	465a      	movcs	r2, fp
 802be46:	4288      	cmp	r0, r1
 802be48:	f240 80f5 	bls.w	802c036 <__sfvwrite_r+0x25e>
 802be4c:	441d      	add	r5, r3
 802be4e:	42aa      	cmp	r2, r5
 802be50:	f340 80f1 	ble.w	802c036 <__sfvwrite_r+0x25e>
 802be54:	4651      	mov	r1, sl
 802be56:	462a      	mov	r2, r5
 802be58:	f000 f9f8 	bl	802c24c <memmove>
 802be5c:	6823      	ldr	r3, [r4, #0]
 802be5e:	442b      	add	r3, r5
 802be60:	6023      	str	r3, [r4, #0]
 802be62:	4621      	mov	r1, r4
 802be64:	4630      	mov	r0, r6
 802be66:	f7ff fe23 	bl	802bab0 <_fflush_r>
 802be6a:	2800      	cmp	r0, #0
 802be6c:	d167      	bne.n	802bf3e <__sfvwrite_r+0x166>
 802be6e:	1b7f      	subs	r7, r7, r5
 802be70:	f040 80f9 	bne.w	802c066 <__sfvwrite_r+0x28e>
 802be74:	4621      	mov	r1, r4
 802be76:	4630      	mov	r0, r6
 802be78:	f7ff fe1a 	bl	802bab0 <_fflush_r>
 802be7c:	2800      	cmp	r0, #0
 802be7e:	d15e      	bne.n	802bf3e <__sfvwrite_r+0x166>
 802be80:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802be84:	1b5b      	subs	r3, r3, r5
 802be86:	44aa      	add	sl, r5
 802be88:	ebab 0b05 	sub.w	fp, fp, r5
 802be8c:	f8c9 3008 	str.w	r3, [r9, #8]
 802be90:	2b00      	cmp	r3, #0
 802be92:	d1c0      	bne.n	802be16 <__sfvwrite_r+0x3e>
 802be94:	e7a7      	b.n	802bde6 <__sfvwrite_r+0xe>
 802be96:	4621      	mov	r1, r4
 802be98:	4630      	mov	r0, r6
 802be9a:	f000 f907 	bl	802c0ac <__swsetup_r>
 802be9e:	2800      	cmp	r0, #0
 802bea0:	d0ab      	beq.n	802bdfa <__sfvwrite_r+0x22>
 802bea2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802bea6:	e79f      	b.n	802bde8 <__sfvwrite_r+0x10>
 802bea8:	e9d8 a500 	ldrd	sl, r5, [r8]
 802beac:	f108 0808 	add.w	r8, r8, #8
 802beb0:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 802beb4:	69e1      	ldr	r1, [r4, #28]
 802beb6:	2d00      	cmp	r5, #0
 802beb8:	d0f6      	beq.n	802bea8 <__sfvwrite_r+0xd0>
 802beba:	42bd      	cmp	r5, r7
 802bebc:	462b      	mov	r3, r5
 802bebe:	4652      	mov	r2, sl
 802bec0:	bf28      	it	cs
 802bec2:	463b      	movcs	r3, r7
 802bec4:	4630      	mov	r0, r6
 802bec6:	47d8      	blx	fp
 802bec8:	2800      	cmp	r0, #0
 802beca:	dd38      	ble.n	802bf3e <__sfvwrite_r+0x166>
 802becc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802bed0:	1a1b      	subs	r3, r3, r0
 802bed2:	4482      	add	sl, r0
 802bed4:	1a2d      	subs	r5, r5, r0
 802bed6:	f8c9 3008 	str.w	r3, [r9, #8]
 802beda:	2b00      	cmp	r3, #0
 802bedc:	d1e8      	bne.n	802beb0 <__sfvwrite_r+0xd8>
 802bede:	e782      	b.n	802bde6 <__sfvwrite_r+0xe>
 802bee0:	f04f 0a00 	mov.w	sl, #0
 802bee4:	4f61      	ldr	r7, [pc, #388]	@ (802c06c <__sfvwrite_r+0x294>)
 802bee6:	4655      	mov	r5, sl
 802bee8:	e7e2      	b.n	802beb0 <__sfvwrite_r+0xd8>
 802beea:	e9d8 7a00 	ldrd	r7, sl, [r8]
 802beee:	f108 0808 	add.w	r8, r8, #8
 802bef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bef6:	6820      	ldr	r0, [r4, #0]
 802bef8:	68a2      	ldr	r2, [r4, #8]
 802befa:	f1ba 0f00 	cmp.w	sl, #0
 802befe:	d0f4      	beq.n	802beea <__sfvwrite_r+0x112>
 802bf00:	0599      	lsls	r1, r3, #22
 802bf02:	d563      	bpl.n	802bfcc <__sfvwrite_r+0x1f4>
 802bf04:	4552      	cmp	r2, sl
 802bf06:	d836      	bhi.n	802bf76 <__sfvwrite_r+0x19e>
 802bf08:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 802bf0c:	d033      	beq.n	802bf76 <__sfvwrite_r+0x19e>
 802bf0e:	6921      	ldr	r1, [r4, #16]
 802bf10:	6965      	ldr	r5, [r4, #20]
 802bf12:	eba0 0b01 	sub.w	fp, r0, r1
 802bf16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802bf1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802bf1e:	f10b 0201 	add.w	r2, fp, #1
 802bf22:	106d      	asrs	r5, r5, #1
 802bf24:	4452      	add	r2, sl
 802bf26:	4295      	cmp	r5, r2
 802bf28:	bf38      	it	cc
 802bf2a:	4615      	movcc	r5, r2
 802bf2c:	055b      	lsls	r3, r3, #21
 802bf2e:	d53d      	bpl.n	802bfac <__sfvwrite_r+0x1d4>
 802bf30:	4629      	mov	r1, r5
 802bf32:	4630      	mov	r0, r6
 802bf34:	f002 fbfa 	bl	802e72c <_malloc_r>
 802bf38:	b948      	cbnz	r0, 802bf4e <__sfvwrite_r+0x176>
 802bf3a:	230c      	movs	r3, #12
 802bf3c:	6033      	str	r3, [r6, #0]
 802bf3e:	89a3      	ldrh	r3, [r4, #12]
 802bf40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802bf44:	81a3      	strh	r3, [r4, #12]
 802bf46:	e7ac      	b.n	802bea2 <__sfvwrite_r+0xca>
 802bf48:	461f      	mov	r7, r3
 802bf4a:	469a      	mov	sl, r3
 802bf4c:	e7d1      	b.n	802bef2 <__sfvwrite_r+0x11a>
 802bf4e:	465a      	mov	r2, fp
 802bf50:	6921      	ldr	r1, [r4, #16]
 802bf52:	9001      	str	r0, [sp, #4]
 802bf54:	f001 fbd0 	bl	802d6f8 <memcpy>
 802bf58:	89a2      	ldrh	r2, [r4, #12]
 802bf5a:	9b01      	ldr	r3, [sp, #4]
 802bf5c:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802bf60:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802bf64:	81a2      	strh	r2, [r4, #12]
 802bf66:	6123      	str	r3, [r4, #16]
 802bf68:	6165      	str	r5, [r4, #20]
 802bf6a:	445b      	add	r3, fp
 802bf6c:	eba5 050b 	sub.w	r5, r5, fp
 802bf70:	6023      	str	r3, [r4, #0]
 802bf72:	4652      	mov	r2, sl
 802bf74:	60a5      	str	r5, [r4, #8]
 802bf76:	4552      	cmp	r2, sl
 802bf78:	bf28      	it	cs
 802bf7a:	4652      	movcs	r2, sl
 802bf7c:	6820      	ldr	r0, [r4, #0]
 802bf7e:	9201      	str	r2, [sp, #4]
 802bf80:	4639      	mov	r1, r7
 802bf82:	f000 f963 	bl	802c24c <memmove>
 802bf86:	68a3      	ldr	r3, [r4, #8]
 802bf88:	9a01      	ldr	r2, [sp, #4]
 802bf8a:	1a9b      	subs	r3, r3, r2
 802bf8c:	60a3      	str	r3, [r4, #8]
 802bf8e:	6823      	ldr	r3, [r4, #0]
 802bf90:	4413      	add	r3, r2
 802bf92:	4655      	mov	r5, sl
 802bf94:	6023      	str	r3, [r4, #0]
 802bf96:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802bf9a:	1b5b      	subs	r3, r3, r5
 802bf9c:	442f      	add	r7, r5
 802bf9e:	ebaa 0a05 	sub.w	sl, sl, r5
 802bfa2:	f8c9 3008 	str.w	r3, [r9, #8]
 802bfa6:	2b00      	cmp	r3, #0
 802bfa8:	d1a3      	bne.n	802bef2 <__sfvwrite_r+0x11a>
 802bfaa:	e71c      	b.n	802bde6 <__sfvwrite_r+0xe>
 802bfac:	462a      	mov	r2, r5
 802bfae:	4630      	mov	r0, r6
 802bfb0:	f007 fbcc 	bl	803374c <_realloc_r>
 802bfb4:	4603      	mov	r3, r0
 802bfb6:	2800      	cmp	r0, #0
 802bfb8:	d1d5      	bne.n	802bf66 <__sfvwrite_r+0x18e>
 802bfba:	6921      	ldr	r1, [r4, #16]
 802bfbc:	4630      	mov	r0, r6
 802bfbe:	f002 fa9d 	bl	802e4fc <_free_r>
 802bfc2:	89a3      	ldrh	r3, [r4, #12]
 802bfc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802bfc8:	81a3      	strh	r3, [r4, #12]
 802bfca:	e7b6      	b.n	802bf3a <__sfvwrite_r+0x162>
 802bfcc:	6923      	ldr	r3, [r4, #16]
 802bfce:	4283      	cmp	r3, r0
 802bfd0:	d302      	bcc.n	802bfd8 <__sfvwrite_r+0x200>
 802bfd2:	6961      	ldr	r1, [r4, #20]
 802bfd4:	4551      	cmp	r1, sl
 802bfd6:	d915      	bls.n	802c004 <__sfvwrite_r+0x22c>
 802bfd8:	4552      	cmp	r2, sl
 802bfda:	bf28      	it	cs
 802bfdc:	4652      	movcs	r2, sl
 802bfde:	4639      	mov	r1, r7
 802bfe0:	4615      	mov	r5, r2
 802bfe2:	f000 f933 	bl	802c24c <memmove>
 802bfe6:	68a3      	ldr	r3, [r4, #8]
 802bfe8:	6822      	ldr	r2, [r4, #0]
 802bfea:	1b5b      	subs	r3, r3, r5
 802bfec:	442a      	add	r2, r5
 802bfee:	60a3      	str	r3, [r4, #8]
 802bff0:	6022      	str	r2, [r4, #0]
 802bff2:	2b00      	cmp	r3, #0
 802bff4:	d1cf      	bne.n	802bf96 <__sfvwrite_r+0x1be>
 802bff6:	4621      	mov	r1, r4
 802bff8:	4630      	mov	r0, r6
 802bffa:	f7ff fd59 	bl	802bab0 <_fflush_r>
 802bffe:	2800      	cmp	r0, #0
 802c000:	d0c9      	beq.n	802bf96 <__sfvwrite_r+0x1be>
 802c002:	e79c      	b.n	802bf3e <__sfvwrite_r+0x166>
 802c004:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 802c008:	4553      	cmp	r3, sl
 802c00a:	bf28      	it	cs
 802c00c:	4653      	movcs	r3, sl
 802c00e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802c010:	fb93 f3f1 	sdiv	r3, r3, r1
 802c014:	463a      	mov	r2, r7
 802c016:	434b      	muls	r3, r1
 802c018:	4630      	mov	r0, r6
 802c01a:	69e1      	ldr	r1, [r4, #28]
 802c01c:	47a8      	blx	r5
 802c01e:	1e05      	subs	r5, r0, #0
 802c020:	dcb9      	bgt.n	802bf96 <__sfvwrite_r+0x1be>
 802c022:	e78c      	b.n	802bf3e <__sfvwrite_r+0x166>
 802c024:	e9d8 ab00 	ldrd	sl, fp, [r8]
 802c028:	2000      	movs	r0, #0
 802c02a:	f108 0808 	add.w	r8, r8, #8
 802c02e:	e6f2      	b.n	802be16 <__sfvwrite_r+0x3e>
 802c030:	f10b 0701 	add.w	r7, fp, #1
 802c034:	e6ff      	b.n	802be36 <__sfvwrite_r+0x5e>
 802c036:	4293      	cmp	r3, r2
 802c038:	dc08      	bgt.n	802c04c <__sfvwrite_r+0x274>
 802c03a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802c03c:	69e1      	ldr	r1, [r4, #28]
 802c03e:	4652      	mov	r2, sl
 802c040:	4630      	mov	r0, r6
 802c042:	47a8      	blx	r5
 802c044:	1e05      	subs	r5, r0, #0
 802c046:	f73f af12 	bgt.w	802be6e <__sfvwrite_r+0x96>
 802c04a:	e778      	b.n	802bf3e <__sfvwrite_r+0x166>
 802c04c:	4651      	mov	r1, sl
 802c04e:	9201      	str	r2, [sp, #4]
 802c050:	f000 f8fc 	bl	802c24c <memmove>
 802c054:	9a01      	ldr	r2, [sp, #4]
 802c056:	68a3      	ldr	r3, [r4, #8]
 802c058:	1a9b      	subs	r3, r3, r2
 802c05a:	60a3      	str	r3, [r4, #8]
 802c05c:	6823      	ldr	r3, [r4, #0]
 802c05e:	4413      	add	r3, r2
 802c060:	6023      	str	r3, [r4, #0]
 802c062:	4615      	mov	r5, r2
 802c064:	e703      	b.n	802be6e <__sfvwrite_r+0x96>
 802c066:	2001      	movs	r0, #1
 802c068:	e70a      	b.n	802be80 <__sfvwrite_r+0xa8>
 802c06a:	bf00      	nop
 802c06c:	7ffffc00 	.word	0x7ffffc00

0802c070 <_fwalk_sglue>:
 802c070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c074:	4607      	mov	r7, r0
 802c076:	4688      	mov	r8, r1
 802c078:	4614      	mov	r4, r2
 802c07a:	2600      	movs	r6, #0
 802c07c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802c080:	f1b9 0901 	subs.w	r9, r9, #1
 802c084:	d505      	bpl.n	802c092 <_fwalk_sglue+0x22>
 802c086:	6824      	ldr	r4, [r4, #0]
 802c088:	2c00      	cmp	r4, #0
 802c08a:	d1f7      	bne.n	802c07c <_fwalk_sglue+0xc>
 802c08c:	4630      	mov	r0, r6
 802c08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c092:	89ab      	ldrh	r3, [r5, #12]
 802c094:	2b01      	cmp	r3, #1
 802c096:	d907      	bls.n	802c0a8 <_fwalk_sglue+0x38>
 802c098:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802c09c:	3301      	adds	r3, #1
 802c09e:	d003      	beq.n	802c0a8 <_fwalk_sglue+0x38>
 802c0a0:	4629      	mov	r1, r5
 802c0a2:	4638      	mov	r0, r7
 802c0a4:	47c0      	blx	r8
 802c0a6:	4306      	orrs	r6, r0
 802c0a8:	3568      	adds	r5, #104	@ 0x68
 802c0aa:	e7e9      	b.n	802c080 <_fwalk_sglue+0x10>

0802c0ac <__swsetup_r>:
 802c0ac:	b538      	push	{r3, r4, r5, lr}
 802c0ae:	4b29      	ldr	r3, [pc, #164]	@ (802c154 <__swsetup_r+0xa8>)
 802c0b0:	4605      	mov	r5, r0
 802c0b2:	6818      	ldr	r0, [r3, #0]
 802c0b4:	460c      	mov	r4, r1
 802c0b6:	b118      	cbz	r0, 802c0c0 <__swsetup_r+0x14>
 802c0b8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802c0ba:	b90b      	cbnz	r3, 802c0c0 <__swsetup_r+0x14>
 802c0bc:	f7ff fe3a 	bl	802bd34 <__sinit>
 802c0c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c0c4:	0719      	lsls	r1, r3, #28
 802c0c6:	d422      	bmi.n	802c10e <__swsetup_r+0x62>
 802c0c8:	06da      	lsls	r2, r3, #27
 802c0ca:	d407      	bmi.n	802c0dc <__swsetup_r+0x30>
 802c0cc:	2209      	movs	r2, #9
 802c0ce:	602a      	str	r2, [r5, #0]
 802c0d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c0d4:	81a3      	strh	r3, [r4, #12]
 802c0d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c0da:	e033      	b.n	802c144 <__swsetup_r+0x98>
 802c0dc:	0758      	lsls	r0, r3, #29
 802c0de:	d512      	bpl.n	802c106 <__swsetup_r+0x5a>
 802c0e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802c0e2:	b141      	cbz	r1, 802c0f6 <__swsetup_r+0x4a>
 802c0e4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802c0e8:	4299      	cmp	r1, r3
 802c0ea:	d002      	beq.n	802c0f2 <__swsetup_r+0x46>
 802c0ec:	4628      	mov	r0, r5
 802c0ee:	f002 fa05 	bl	802e4fc <_free_r>
 802c0f2:	2300      	movs	r3, #0
 802c0f4:	6323      	str	r3, [r4, #48]	@ 0x30
 802c0f6:	89a3      	ldrh	r3, [r4, #12]
 802c0f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802c0fc:	81a3      	strh	r3, [r4, #12]
 802c0fe:	2300      	movs	r3, #0
 802c100:	6063      	str	r3, [r4, #4]
 802c102:	6923      	ldr	r3, [r4, #16]
 802c104:	6023      	str	r3, [r4, #0]
 802c106:	89a3      	ldrh	r3, [r4, #12]
 802c108:	f043 0308 	orr.w	r3, r3, #8
 802c10c:	81a3      	strh	r3, [r4, #12]
 802c10e:	6923      	ldr	r3, [r4, #16]
 802c110:	b94b      	cbnz	r3, 802c126 <__swsetup_r+0x7a>
 802c112:	89a3      	ldrh	r3, [r4, #12]
 802c114:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802c118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802c11c:	d003      	beq.n	802c126 <__swsetup_r+0x7a>
 802c11e:	4621      	mov	r1, r4
 802c120:	4628      	mov	r0, r5
 802c122:	f005 fc2b 	bl	803197c <__smakebuf_r>
 802c126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c12a:	f013 0201 	ands.w	r2, r3, #1
 802c12e:	d00a      	beq.n	802c146 <__swsetup_r+0x9a>
 802c130:	2200      	movs	r2, #0
 802c132:	60a2      	str	r2, [r4, #8]
 802c134:	6962      	ldr	r2, [r4, #20]
 802c136:	4252      	negs	r2, r2
 802c138:	61a2      	str	r2, [r4, #24]
 802c13a:	6922      	ldr	r2, [r4, #16]
 802c13c:	b942      	cbnz	r2, 802c150 <__swsetup_r+0xa4>
 802c13e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802c142:	d1c5      	bne.n	802c0d0 <__swsetup_r+0x24>
 802c144:	bd38      	pop	{r3, r4, r5, pc}
 802c146:	0799      	lsls	r1, r3, #30
 802c148:	bf58      	it	pl
 802c14a:	6962      	ldrpl	r2, [r4, #20]
 802c14c:	60a2      	str	r2, [r4, #8]
 802c14e:	e7f4      	b.n	802c13a <__swsetup_r+0x8e>
 802c150:	2000      	movs	r0, #0
 802c152:	e7f7      	b.n	802c144 <__swsetup_r+0x98>
 802c154:	200002d8 	.word	0x200002d8

0802c158 <memcmp>:
 802c158:	b510      	push	{r4, lr}
 802c15a:	3901      	subs	r1, #1
 802c15c:	4402      	add	r2, r0
 802c15e:	4290      	cmp	r0, r2
 802c160:	d101      	bne.n	802c166 <memcmp+0xe>
 802c162:	2000      	movs	r0, #0
 802c164:	e005      	b.n	802c172 <memcmp+0x1a>
 802c166:	7803      	ldrb	r3, [r0, #0]
 802c168:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802c16c:	42a3      	cmp	r3, r4
 802c16e:	d001      	beq.n	802c174 <memcmp+0x1c>
 802c170:	1b18      	subs	r0, r3, r4
 802c172:	bd10      	pop	{r4, pc}
 802c174:	3001      	adds	r0, #1
 802c176:	e7f2      	b.n	802c15e <memcmp+0x6>

0802c178 <__fputwc>:
 802c178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802c17c:	4680      	mov	r8, r0
 802c17e:	460f      	mov	r7, r1
 802c180:	4614      	mov	r4, r2
 802c182:	f001 fa05 	bl	802d590 <__locale_mb_cur_max>
 802c186:	2801      	cmp	r0, #1
 802c188:	4605      	mov	r5, r0
 802c18a:	d11b      	bne.n	802c1c4 <__fputwc+0x4c>
 802c18c:	1e7b      	subs	r3, r7, #1
 802c18e:	2bfe      	cmp	r3, #254	@ 0xfe
 802c190:	d818      	bhi.n	802c1c4 <__fputwc+0x4c>
 802c192:	f88d 7004 	strb.w	r7, [sp, #4]
 802c196:	2600      	movs	r6, #0
 802c198:	f10d 0904 	add.w	r9, sp, #4
 802c19c:	42ae      	cmp	r6, r5
 802c19e:	d021      	beq.n	802c1e4 <__fputwc+0x6c>
 802c1a0:	68a3      	ldr	r3, [r4, #8]
 802c1a2:	f816 1009 	ldrb.w	r1, [r6, r9]
 802c1a6:	3b01      	subs	r3, #1
 802c1a8:	2b00      	cmp	r3, #0
 802c1aa:	60a3      	str	r3, [r4, #8]
 802c1ac:	da04      	bge.n	802c1b8 <__fputwc+0x40>
 802c1ae:	69a2      	ldr	r2, [r4, #24]
 802c1b0:	4293      	cmp	r3, r2
 802c1b2:	db1b      	blt.n	802c1ec <__fputwc+0x74>
 802c1b4:	290a      	cmp	r1, #10
 802c1b6:	d019      	beq.n	802c1ec <__fputwc+0x74>
 802c1b8:	6823      	ldr	r3, [r4, #0]
 802c1ba:	1c5a      	adds	r2, r3, #1
 802c1bc:	6022      	str	r2, [r4, #0]
 802c1be:	7019      	strb	r1, [r3, #0]
 802c1c0:	3601      	adds	r6, #1
 802c1c2:	e7eb      	b.n	802c19c <__fputwc+0x24>
 802c1c4:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 802c1c8:	463a      	mov	r2, r7
 802c1ca:	a901      	add	r1, sp, #4
 802c1cc:	4640      	mov	r0, r8
 802c1ce:	f001 faa1 	bl	802d714 <_wcrtomb_r>
 802c1d2:	1c43      	adds	r3, r0, #1
 802c1d4:	4605      	mov	r5, r0
 802c1d6:	d1de      	bne.n	802c196 <__fputwc+0x1e>
 802c1d8:	89a3      	ldrh	r3, [r4, #12]
 802c1da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c1de:	81a3      	strh	r3, [r4, #12]
 802c1e0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802c1e4:	4638      	mov	r0, r7
 802c1e6:	b003      	add	sp, #12
 802c1e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802c1ec:	4622      	mov	r2, r4
 802c1ee:	4640      	mov	r0, r8
 802c1f0:	f008 fb1d 	bl	803482e <__swbuf_r>
 802c1f4:	3001      	adds	r0, #1
 802c1f6:	d1e3      	bne.n	802c1c0 <__fputwc+0x48>
 802c1f8:	e7f2      	b.n	802c1e0 <__fputwc+0x68>

0802c1fa <_fputwc_r>:
 802c1fa:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 802c1fc:	07db      	lsls	r3, r3, #31
 802c1fe:	b570      	push	{r4, r5, r6, lr}
 802c200:	4605      	mov	r5, r0
 802c202:	460e      	mov	r6, r1
 802c204:	4614      	mov	r4, r2
 802c206:	d405      	bmi.n	802c214 <_fputwc_r+0x1a>
 802c208:	8993      	ldrh	r3, [r2, #12]
 802c20a:	0598      	lsls	r0, r3, #22
 802c20c:	d402      	bmi.n	802c214 <_fputwc_r+0x1a>
 802c20e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 802c210:	f001 fa6f 	bl	802d6f2 <__retarget_lock_acquire_recursive>
 802c214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c218:	0499      	lsls	r1, r3, #18
 802c21a:	d406      	bmi.n	802c22a <_fputwc_r+0x30>
 802c21c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802c220:	81a3      	strh	r3, [r4, #12]
 802c222:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c224:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802c228:	6663      	str	r3, [r4, #100]	@ 0x64
 802c22a:	4622      	mov	r2, r4
 802c22c:	4628      	mov	r0, r5
 802c22e:	4631      	mov	r1, r6
 802c230:	f7ff ffa2 	bl	802c178 <__fputwc>
 802c234:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c236:	07da      	lsls	r2, r3, #31
 802c238:	4605      	mov	r5, r0
 802c23a:	d405      	bmi.n	802c248 <_fputwc_r+0x4e>
 802c23c:	89a3      	ldrh	r3, [r4, #12]
 802c23e:	059b      	lsls	r3, r3, #22
 802c240:	d402      	bmi.n	802c248 <_fputwc_r+0x4e>
 802c242:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c244:	f001 fa57 	bl	802d6f6 <__retarget_lock_release_recursive>
 802c248:	4628      	mov	r0, r5
 802c24a:	bd70      	pop	{r4, r5, r6, pc}

0802c24c <memmove>:
 802c24c:	4288      	cmp	r0, r1
 802c24e:	b510      	push	{r4, lr}
 802c250:	eb01 0402 	add.w	r4, r1, r2
 802c254:	d902      	bls.n	802c25c <memmove+0x10>
 802c256:	4284      	cmp	r4, r0
 802c258:	4623      	mov	r3, r4
 802c25a:	d807      	bhi.n	802c26c <memmove+0x20>
 802c25c:	1e43      	subs	r3, r0, #1
 802c25e:	42a1      	cmp	r1, r4
 802c260:	d008      	beq.n	802c274 <memmove+0x28>
 802c262:	f811 2b01 	ldrb.w	r2, [r1], #1
 802c266:	f803 2f01 	strb.w	r2, [r3, #1]!
 802c26a:	e7f8      	b.n	802c25e <memmove+0x12>
 802c26c:	4402      	add	r2, r0
 802c26e:	4601      	mov	r1, r0
 802c270:	428a      	cmp	r2, r1
 802c272:	d100      	bne.n	802c276 <memmove+0x2a>
 802c274:	bd10      	pop	{r4, pc}
 802c276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802c27a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802c27e:	e7f7      	b.n	802c270 <memmove+0x24>

0802c280 <memset>:
 802c280:	4402      	add	r2, r0
 802c282:	4603      	mov	r3, r0
 802c284:	4293      	cmp	r3, r2
 802c286:	d100      	bne.n	802c28a <memset+0xa>
 802c288:	4770      	bx	lr
 802c28a:	f803 1b01 	strb.w	r1, [r3], #1
 802c28e:	e7f9      	b.n	802c284 <memset+0x4>

0802c290 <strcat>:
 802c290:	b510      	push	{r4, lr}
 802c292:	4602      	mov	r2, r0
 802c294:	7814      	ldrb	r4, [r2, #0]
 802c296:	4613      	mov	r3, r2
 802c298:	3201      	adds	r2, #1
 802c29a:	2c00      	cmp	r4, #0
 802c29c:	d1fa      	bne.n	802c294 <strcat+0x4>
 802c29e:	3b01      	subs	r3, #1
 802c2a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 802c2a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 802c2a8:	2a00      	cmp	r2, #0
 802c2aa:	d1f9      	bne.n	802c2a0 <strcat+0x10>
 802c2ac:	bd10      	pop	{r4, pc}

0802c2ae <strchr>:
 802c2ae:	b2c9      	uxtb	r1, r1
 802c2b0:	4603      	mov	r3, r0
 802c2b2:	4618      	mov	r0, r3
 802c2b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c2b8:	b112      	cbz	r2, 802c2c0 <strchr+0x12>
 802c2ba:	428a      	cmp	r2, r1
 802c2bc:	d1f9      	bne.n	802c2b2 <strchr+0x4>
 802c2be:	4770      	bx	lr
 802c2c0:	2900      	cmp	r1, #0
 802c2c2:	bf18      	it	ne
 802c2c4:	2000      	movne	r0, #0
 802c2c6:	4770      	bx	lr

0802c2c8 <strcspn>:
 802c2c8:	b570      	push	{r4, r5, r6, lr}
 802c2ca:	4603      	mov	r3, r0
 802c2cc:	461e      	mov	r6, r3
 802c2ce:	f813 4b01 	ldrb.w	r4, [r3], #1
 802c2d2:	b144      	cbz	r4, 802c2e6 <strcspn+0x1e>
 802c2d4:	1e4a      	subs	r2, r1, #1
 802c2d6:	e001      	b.n	802c2dc <strcspn+0x14>
 802c2d8:	42a5      	cmp	r5, r4
 802c2da:	d004      	beq.n	802c2e6 <strcspn+0x1e>
 802c2dc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802c2e0:	2d00      	cmp	r5, #0
 802c2e2:	d1f9      	bne.n	802c2d8 <strcspn+0x10>
 802c2e4:	e7f2      	b.n	802c2cc <strcspn+0x4>
 802c2e6:	1a30      	subs	r0, r6, r0
 802c2e8:	bd70      	pop	{r4, r5, r6, pc}

0802c2ea <strncmp>:
 802c2ea:	b510      	push	{r4, lr}
 802c2ec:	b16a      	cbz	r2, 802c30a <strncmp+0x20>
 802c2ee:	3901      	subs	r1, #1
 802c2f0:	1884      	adds	r4, r0, r2
 802c2f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 802c2f6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802c2fa:	429a      	cmp	r2, r3
 802c2fc:	d103      	bne.n	802c306 <strncmp+0x1c>
 802c2fe:	42a0      	cmp	r0, r4
 802c300:	d001      	beq.n	802c306 <strncmp+0x1c>
 802c302:	2a00      	cmp	r2, #0
 802c304:	d1f5      	bne.n	802c2f2 <strncmp+0x8>
 802c306:	1ad0      	subs	r0, r2, r3
 802c308:	bd10      	pop	{r4, pc}
 802c30a:	4610      	mov	r0, r2
 802c30c:	e7fc      	b.n	802c308 <strncmp+0x1e>

0802c30e <strncpy>:
 802c30e:	b510      	push	{r4, lr}
 802c310:	3901      	subs	r1, #1
 802c312:	4603      	mov	r3, r0
 802c314:	b132      	cbz	r2, 802c324 <strncpy+0x16>
 802c316:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802c31a:	f803 4b01 	strb.w	r4, [r3], #1
 802c31e:	3a01      	subs	r2, #1
 802c320:	2c00      	cmp	r4, #0
 802c322:	d1f7      	bne.n	802c314 <strncpy+0x6>
 802c324:	441a      	add	r2, r3
 802c326:	2100      	movs	r1, #0
 802c328:	4293      	cmp	r3, r2
 802c32a:	d100      	bne.n	802c32e <strncpy+0x20>
 802c32c:	bd10      	pop	{r4, pc}
 802c32e:	f803 1b01 	strb.w	r1, [r3], #1
 802c332:	e7f9      	b.n	802c328 <strncpy+0x1a>

0802c334 <strrchr>:
 802c334:	b538      	push	{r3, r4, r5, lr}
 802c336:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 802c33a:	4603      	mov	r3, r0
 802c33c:	d10e      	bne.n	802c35c <strrchr+0x28>
 802c33e:	4621      	mov	r1, r4
 802c340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c344:	f7ff bfb3 	b.w	802c2ae <strchr>
 802c348:	1c43      	adds	r3, r0, #1
 802c34a:	4605      	mov	r5, r0
 802c34c:	4621      	mov	r1, r4
 802c34e:	4618      	mov	r0, r3
 802c350:	f7ff ffad 	bl	802c2ae <strchr>
 802c354:	2800      	cmp	r0, #0
 802c356:	d1f7      	bne.n	802c348 <strrchr+0x14>
 802c358:	4628      	mov	r0, r5
 802c35a:	bd38      	pop	{r3, r4, r5, pc}
 802c35c:	2500      	movs	r5, #0
 802c35e:	e7f5      	b.n	802c34c <strrchr+0x18>

0802c360 <strspn>:
 802c360:	b570      	push	{r4, r5, r6, lr}
 802c362:	4603      	mov	r3, r0
 802c364:	461e      	mov	r6, r3
 802c366:	f813 4b01 	ldrb.w	r4, [r3], #1
 802c36a:	b13c      	cbz	r4, 802c37c <strspn+0x1c>
 802c36c:	1e4a      	subs	r2, r1, #1
 802c36e:	e001      	b.n	802c374 <strspn+0x14>
 802c370:	42a5      	cmp	r5, r4
 802c372:	d0f7      	beq.n	802c364 <strspn+0x4>
 802c374:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802c378:	2d00      	cmp	r5, #0
 802c37a:	d1f9      	bne.n	802c370 <strspn+0x10>
 802c37c:	1a30      	subs	r0, r6, r0
 802c37e:	bd70      	pop	{r4, r5, r6, pc}

0802c380 <strstr>:
 802c380:	780a      	ldrb	r2, [r1, #0]
 802c382:	b570      	push	{r4, r5, r6, lr}
 802c384:	b96a      	cbnz	r2, 802c3a2 <strstr+0x22>
 802c386:	bd70      	pop	{r4, r5, r6, pc}
 802c388:	429a      	cmp	r2, r3
 802c38a:	d109      	bne.n	802c3a0 <strstr+0x20>
 802c38c:	460c      	mov	r4, r1
 802c38e:	4605      	mov	r5, r0
 802c390:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802c394:	2b00      	cmp	r3, #0
 802c396:	d0f6      	beq.n	802c386 <strstr+0x6>
 802c398:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802c39c:	429e      	cmp	r6, r3
 802c39e:	d0f7      	beq.n	802c390 <strstr+0x10>
 802c3a0:	3001      	adds	r0, #1
 802c3a2:	7803      	ldrb	r3, [r0, #0]
 802c3a4:	2b00      	cmp	r3, #0
 802c3a6:	d1ef      	bne.n	802c388 <strstr+0x8>
 802c3a8:	4618      	mov	r0, r3
 802c3aa:	e7ec      	b.n	802c386 <strstr+0x6>

0802c3ac <localtime_r>:
 802c3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c3b0:	460c      	mov	r4, r1
 802c3b2:	4680      	mov	r8, r0
 802c3b4:	f008 fab6 	bl	8034924 <__gettzinfo>
 802c3b8:	4621      	mov	r1, r4
 802c3ba:	4605      	mov	r5, r0
 802c3bc:	4640      	mov	r0, r8
 802c3be:	f008 fab5 	bl	803492c <gmtime_r>
 802c3c2:	6943      	ldr	r3, [r0, #20]
 802c3c4:	0799      	lsls	r1, r3, #30
 802c3c6:	4604      	mov	r4, r0
 802c3c8:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 802c3cc:	d106      	bne.n	802c3dc <localtime_r+0x30>
 802c3ce:	2264      	movs	r2, #100	@ 0x64
 802c3d0:	fb97 f3f2 	sdiv	r3, r7, r2
 802c3d4:	fb02 7313 	mls	r3, r2, r3, r7
 802c3d8:	2b00      	cmp	r3, #0
 802c3da:	d170      	bne.n	802c4be <localtime_r+0x112>
 802c3dc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802c3e0:	fb97 f3f2 	sdiv	r3, r7, r2
 802c3e4:	fb02 7313 	mls	r3, r2, r3, r7
 802c3e8:	fab3 f383 	clz	r3, r3
 802c3ec:	095b      	lsrs	r3, r3, #5
 802c3ee:	4e64      	ldr	r6, [pc, #400]	@ (802c580 <localtime_r+0x1d4>)
 802c3f0:	2230      	movs	r2, #48	@ 0x30
 802c3f2:	fb02 6603 	mla	r6, r2, r3, r6
 802c3f6:	f000 fe97 	bl	802d128 <__tz_lock>
 802c3fa:	f000 fea1 	bl	802d140 <_tzset_unlocked>
 802c3fe:	4b61      	ldr	r3, [pc, #388]	@ (802c584 <localtime_r+0x1d8>)
 802c400:	681b      	ldr	r3, [r3, #0]
 802c402:	2b00      	cmp	r3, #0
 802c404:	d06a      	beq.n	802c4dc <localtime_r+0x130>
 802c406:	686b      	ldr	r3, [r5, #4]
 802c408:	42bb      	cmp	r3, r7
 802c40a:	d15a      	bne.n	802c4c2 <localtime_r+0x116>
 802c40c:	682f      	ldr	r7, [r5, #0]
 802c40e:	e9d8 2300 	ldrd	r2, r3, [r8]
 802c412:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 802c416:	2f00      	cmp	r7, #0
 802c418:	d15b      	bne.n	802c4d2 <localtime_r+0x126>
 802c41a:	4282      	cmp	r2, r0
 802c41c:	eb73 0101 	sbcs.w	r1, r3, r1
 802c420:	db5e      	blt.n	802c4e0 <localtime_r+0x134>
 802c422:	2301      	movs	r3, #1
 802c424:	6223      	str	r3, [r4, #32]
 802c426:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802c428:	6861      	ldr	r1, [r4, #4]
 802c42a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802c42e:	fb93 f0f2 	sdiv	r0, r3, r2
 802c432:	fb02 3310 	mls	r3, r2, r0, r3
 802c436:	223c      	movs	r2, #60	@ 0x3c
 802c438:	fb93 f5f2 	sdiv	r5, r3, r2
 802c43c:	fb02 3215 	mls	r2, r2, r5, r3
 802c440:	6823      	ldr	r3, [r4, #0]
 802c442:	1a9b      	subs	r3, r3, r2
 802c444:	68a2      	ldr	r2, [r4, #8]
 802c446:	6023      	str	r3, [r4, #0]
 802c448:	1b49      	subs	r1, r1, r5
 802c44a:	1a12      	subs	r2, r2, r0
 802c44c:	2b3b      	cmp	r3, #59	@ 0x3b
 802c44e:	6061      	str	r1, [r4, #4]
 802c450:	60a2      	str	r2, [r4, #8]
 802c452:	dd51      	ble.n	802c4f8 <localtime_r+0x14c>
 802c454:	3101      	adds	r1, #1
 802c456:	6061      	str	r1, [r4, #4]
 802c458:	3b3c      	subs	r3, #60	@ 0x3c
 802c45a:	6023      	str	r3, [r4, #0]
 802c45c:	6863      	ldr	r3, [r4, #4]
 802c45e:	2b3b      	cmp	r3, #59	@ 0x3b
 802c460:	dd50      	ble.n	802c504 <localtime_r+0x158>
 802c462:	3201      	adds	r2, #1
 802c464:	60a2      	str	r2, [r4, #8]
 802c466:	3b3c      	subs	r3, #60	@ 0x3c
 802c468:	6063      	str	r3, [r4, #4]
 802c46a:	68a3      	ldr	r3, [r4, #8]
 802c46c:	2b17      	cmp	r3, #23
 802c46e:	dd4f      	ble.n	802c510 <localtime_r+0x164>
 802c470:	69e2      	ldr	r2, [r4, #28]
 802c472:	3201      	adds	r2, #1
 802c474:	61e2      	str	r2, [r4, #28]
 802c476:	69a2      	ldr	r2, [r4, #24]
 802c478:	3201      	adds	r2, #1
 802c47a:	2a07      	cmp	r2, #7
 802c47c:	bfa8      	it	ge
 802c47e:	2200      	movge	r2, #0
 802c480:	61a2      	str	r2, [r4, #24]
 802c482:	68e2      	ldr	r2, [r4, #12]
 802c484:	3b18      	subs	r3, #24
 802c486:	3201      	adds	r2, #1
 802c488:	60a3      	str	r3, [r4, #8]
 802c48a:	6923      	ldr	r3, [r4, #16]
 802c48c:	60e2      	str	r2, [r4, #12]
 802c48e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802c492:	428a      	cmp	r2, r1
 802c494:	dd0e      	ble.n	802c4b4 <localtime_r+0x108>
 802c496:	2b0b      	cmp	r3, #11
 802c498:	eba2 0201 	sub.w	r2, r2, r1
 802c49c:	60e2      	str	r2, [r4, #12]
 802c49e:	f103 0201 	add.w	r2, r3, #1
 802c4a2:	bf09      	itett	eq
 802c4a4:	6963      	ldreq	r3, [r4, #20]
 802c4a6:	6122      	strne	r2, [r4, #16]
 802c4a8:	2200      	moveq	r2, #0
 802c4aa:	3301      	addeq	r3, #1
 802c4ac:	bf02      	ittt	eq
 802c4ae:	6122      	streq	r2, [r4, #16]
 802c4b0:	6163      	streq	r3, [r4, #20]
 802c4b2:	61e2      	streq	r2, [r4, #28]
 802c4b4:	f000 fe3e 	bl	802d134 <__tz_unlock>
 802c4b8:	4620      	mov	r0, r4
 802c4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c4be:	2301      	movs	r3, #1
 802c4c0:	e795      	b.n	802c3ee <localtime_r+0x42>
 802c4c2:	4638      	mov	r0, r7
 802c4c4:	f000 fd86 	bl	802cfd4 <__tzcalc_limits>
 802c4c8:	2800      	cmp	r0, #0
 802c4ca:	d19f      	bne.n	802c40c <localtime_r+0x60>
 802c4cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802c4d0:	e004      	b.n	802c4dc <localtime_r+0x130>
 802c4d2:	4282      	cmp	r2, r0
 802c4d4:	eb73 0101 	sbcs.w	r1, r3, r1
 802c4d8:	da02      	bge.n	802c4e0 <localtime_r+0x134>
 802c4da:	2300      	movs	r3, #0
 802c4dc:	6223      	str	r3, [r4, #32]
 802c4de:	e009      	b.n	802c4f4 <localtime_r+0x148>
 802c4e0:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 802c4e4:	4282      	cmp	r2, r0
 802c4e6:	418b      	sbcs	r3, r1
 802c4e8:	bfb4      	ite	lt
 802c4ea:	2301      	movlt	r3, #1
 802c4ec:	2300      	movge	r3, #0
 802c4ee:	6223      	str	r3, [r4, #32]
 802c4f0:	2b00      	cmp	r3, #0
 802c4f2:	d198      	bne.n	802c426 <localtime_r+0x7a>
 802c4f4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 802c4f6:	e797      	b.n	802c428 <localtime_r+0x7c>
 802c4f8:	2b00      	cmp	r3, #0
 802c4fa:	daaf      	bge.n	802c45c <localtime_r+0xb0>
 802c4fc:	3901      	subs	r1, #1
 802c4fe:	6061      	str	r1, [r4, #4]
 802c500:	333c      	adds	r3, #60	@ 0x3c
 802c502:	e7aa      	b.n	802c45a <localtime_r+0xae>
 802c504:	2b00      	cmp	r3, #0
 802c506:	dab0      	bge.n	802c46a <localtime_r+0xbe>
 802c508:	3a01      	subs	r2, #1
 802c50a:	60a2      	str	r2, [r4, #8]
 802c50c:	333c      	adds	r3, #60	@ 0x3c
 802c50e:	e7ab      	b.n	802c468 <localtime_r+0xbc>
 802c510:	2b00      	cmp	r3, #0
 802c512:	dacf      	bge.n	802c4b4 <localtime_r+0x108>
 802c514:	69e2      	ldr	r2, [r4, #28]
 802c516:	3a01      	subs	r2, #1
 802c518:	61e2      	str	r2, [r4, #28]
 802c51a:	69a2      	ldr	r2, [r4, #24]
 802c51c:	3a01      	subs	r2, #1
 802c51e:	bf48      	it	mi
 802c520:	2206      	movmi	r2, #6
 802c522:	61a2      	str	r2, [r4, #24]
 802c524:	68e2      	ldr	r2, [r4, #12]
 802c526:	3318      	adds	r3, #24
 802c528:	3a01      	subs	r2, #1
 802c52a:	60e2      	str	r2, [r4, #12]
 802c52c:	60a3      	str	r3, [r4, #8]
 802c52e:	2a00      	cmp	r2, #0
 802c530:	d1c0      	bne.n	802c4b4 <localtime_r+0x108>
 802c532:	6923      	ldr	r3, [r4, #16]
 802c534:	3b01      	subs	r3, #1
 802c536:	d405      	bmi.n	802c544 <localtime_r+0x198>
 802c538:	6123      	str	r3, [r4, #16]
 802c53a:	6923      	ldr	r3, [r4, #16]
 802c53c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802c540:	60e3      	str	r3, [r4, #12]
 802c542:	e7b7      	b.n	802c4b4 <localtime_r+0x108>
 802c544:	230b      	movs	r3, #11
 802c546:	6123      	str	r3, [r4, #16]
 802c548:	6963      	ldr	r3, [r4, #20]
 802c54a:	1e5a      	subs	r2, r3, #1
 802c54c:	6162      	str	r2, [r4, #20]
 802c54e:	0792      	lsls	r2, r2, #30
 802c550:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 802c554:	d105      	bne.n	802c562 <localtime_r+0x1b6>
 802c556:	2164      	movs	r1, #100	@ 0x64
 802c558:	fb93 f2f1 	sdiv	r2, r3, r1
 802c55c:	fb01 3212 	mls	r2, r1, r2, r3
 802c560:	b962      	cbnz	r2, 802c57c <localtime_r+0x1d0>
 802c562:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802c566:	fb93 f1f2 	sdiv	r1, r3, r2
 802c56a:	fb02 3311 	mls	r3, r2, r1, r3
 802c56e:	fab3 f383 	clz	r3, r3
 802c572:	095b      	lsrs	r3, r3, #5
 802c574:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 802c578:	61e3      	str	r3, [r4, #28]
 802c57a:	e7de      	b.n	802c53a <localtime_r+0x18e>
 802c57c:	2301      	movs	r3, #1
 802c57e:	e7f9      	b.n	802c574 <localtime_r+0x1c8>
 802c580:	0803b080 	.word	0x0803b080
 802c584:	2001a028 	.word	0x2001a028

0802c588 <iso_year_adjust>:
 802c588:	6942      	ldr	r2, [r0, #20]
 802c58a:	2a00      	cmp	r2, #0
 802c58c:	f240 736c 	movw	r3, #1900	@ 0x76c
 802c590:	bfa8      	it	ge
 802c592:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 802c596:	4413      	add	r3, r2
 802c598:	0792      	lsls	r2, r2, #30
 802c59a:	d105      	bne.n	802c5a8 <iso_year_adjust+0x20>
 802c59c:	2164      	movs	r1, #100	@ 0x64
 802c59e:	fb93 f2f1 	sdiv	r2, r3, r1
 802c5a2:	fb01 3212 	mls	r2, r1, r2, r3
 802c5a6:	b9ca      	cbnz	r2, 802c5dc <iso_year_adjust+0x54>
 802c5a8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802c5ac:	fb93 f1f2 	sdiv	r1, r3, r2
 802c5b0:	fb02 3311 	mls	r3, r2, r1, r3
 802c5b4:	fab3 f383 	clz	r3, r3
 802c5b8:	095b      	lsrs	r3, r3, #5
 802c5ba:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 802c5be:	0040      	lsls	r0, r0, #1
 802c5c0:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 802c5c4:	4418      	add	r0, r3
 802c5c6:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 802c5ca:	4298      	cmp	r0, r3
 802c5cc:	d027      	beq.n	802c61e <iso_year_adjust+0x96>
 802c5ce:	dc11      	bgt.n	802c5f4 <iso_year_adjust+0x6c>
 802c5d0:	2801      	cmp	r0, #1
 802c5d2:	dc0a      	bgt.n	802c5ea <iso_year_adjust+0x62>
 802c5d4:	43c0      	mvns	r0, r0
 802c5d6:	0fc0      	lsrs	r0, r0, #31
 802c5d8:	4240      	negs	r0, r0
 802c5da:	4770      	bx	lr
 802c5dc:	2301      	movs	r3, #1
 802c5de:	e7ec      	b.n	802c5ba <iso_year_adjust+0x32>
 802c5e0:	4b10      	ldr	r3, [pc, #64]	@ (802c624 <iso_year_adjust+0x9c>)
 802c5e2:	40c3      	lsrs	r3, r0
 802c5e4:	f343 0000 	sbfx	r0, r3, #0, #1
 802c5e8:	4770      	bx	lr
 802c5ea:	380a      	subs	r0, #10
 802c5ec:	2817      	cmp	r0, #23
 802c5ee:	d9f7      	bls.n	802c5e0 <iso_year_adjust+0x58>
 802c5f0:	2000      	movs	r0, #0
 802c5f2:	4770      	bx	lr
 802c5f4:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 802c5f8:	4298      	cmp	r0, r3
 802c5fa:	dc06      	bgt.n	802c60a <iso_year_adjust+0x82>
 802c5fc:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 802c600:	4298      	cmp	r0, r3
 802c602:	bfd4      	ite	le
 802c604:	2000      	movle	r0, #0
 802c606:	2001      	movgt	r0, #1
 802c608:	4770      	bx	lr
 802c60a:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 802c60e:	3802      	subs	r0, #2
 802c610:	2815      	cmp	r0, #21
 802c612:	d8ed      	bhi.n	802c5f0 <iso_year_adjust+0x68>
 802c614:	4b04      	ldr	r3, [pc, #16]	@ (802c628 <iso_year_adjust+0xa0>)
 802c616:	40c3      	lsrs	r3, r0
 802c618:	f003 0001 	and.w	r0, r3, #1
 802c61c:	4770      	bx	lr
 802c61e:	2001      	movs	r0, #1
 802c620:	4770      	bx	lr
 802c622:	bf00      	nop
 802c624:	00cc00cf 	.word	0x00cc00cf
 802c628:	002a001f 	.word	0x002a001f

0802c62c <__strftime.isra.0>:
 802c62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c630:	b08f      	sub	sp, #60	@ 0x3c
 802c632:	461e      	mov	r6, r3
 802c634:	2300      	movs	r3, #0
 802c636:	4607      	mov	r7, r0
 802c638:	460d      	mov	r5, r1
 802c63a:	9302      	str	r3, [sp, #8]
 802c63c:	461c      	mov	r4, r3
 802c63e:	7813      	ldrb	r3, [r2, #0]
 802c640:	2b00      	cmp	r3, #0
 802c642:	f000 84ae 	beq.w	802cfa2 <__strftime.isra.0+0x976>
 802c646:	2b25      	cmp	r3, #37	@ 0x25
 802c648:	d11f      	bne.n	802c68a <__strftime.isra.0+0x5e>
 802c64a:	f892 9001 	ldrb.w	r9, [r2, #1]
 802c64e:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 802c652:	d024      	beq.n	802c69e <__strftime.isra.0+0x72>
 802c654:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802c658:	d021      	beq.n	802c69e <__strftime.isra.0+0x72>
 802c65a:	f102 0801 	add.w	r8, r2, #1
 802c65e:	f04f 0900 	mov.w	r9, #0
 802c662:	f898 2000 	ldrb.w	r2, [r8]
 802c666:	3a31      	subs	r2, #49	@ 0x31
 802c668:	2a08      	cmp	r2, #8
 802c66a:	d81b      	bhi.n	802c6a4 <__strftime.isra.0+0x78>
 802c66c:	220a      	movs	r2, #10
 802c66e:	4640      	mov	r0, r8
 802c670:	a906      	add	r1, sp, #24
 802c672:	f008 f88b 	bl	803478c <strtoul>
 802c676:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802c67a:	4602      	mov	r2, r0
 802c67c:	f898 1000 	ldrb.w	r1, [r8]
 802c680:	2945      	cmp	r1, #69	@ 0x45
 802c682:	d111      	bne.n	802c6a8 <__strftime.isra.0+0x7c>
 802c684:	f108 0801 	add.w	r8, r8, #1
 802c688:	e010      	b.n	802c6ac <__strftime.isra.0+0x80>
 802c68a:	1e69      	subs	r1, r5, #1
 802c68c:	42a1      	cmp	r1, r4
 802c68e:	f240 815d 	bls.w	802c94c <__strftime.isra.0+0x320>
 802c692:	553b      	strb	r3, [r7, r4]
 802c694:	3201      	adds	r2, #1
 802c696:	f104 0a01 	add.w	sl, r4, #1
 802c69a:	4654      	mov	r4, sl
 802c69c:	e7cf      	b.n	802c63e <__strftime.isra.0+0x12>
 802c69e:	f102 0802 	add.w	r8, r2, #2
 802c6a2:	e7de      	b.n	802c662 <__strftime.isra.0+0x36>
 802c6a4:	2200      	movs	r2, #0
 802c6a6:	e7e9      	b.n	802c67c <__strftime.isra.0+0x50>
 802c6a8:	294f      	cmp	r1, #79	@ 0x4f
 802c6aa:	d0eb      	beq.n	802c684 <__strftime.isra.0+0x58>
 802c6ac:	f898 0000 	ldrb.w	r0, [r8]
 802c6b0:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 802c6b4:	2955      	cmp	r1, #85	@ 0x55
 802c6b6:	f200 8149 	bhi.w	802c94c <__strftime.isra.0+0x320>
 802c6ba:	e8df f011 	tbh	[pc, r1, lsl #1]
 802c6be:	046a      	.short	0x046a
 802c6c0:	01470147 	.word	0x01470147
 802c6c4:	01470147 	.word	0x01470147
 802c6c8:	01470147 	.word	0x01470147
 802c6cc:	01470147 	.word	0x01470147
 802c6d0:	01470147 	.word	0x01470147
 802c6d4:	01470147 	.word	0x01470147
 802c6d8:	01470147 	.word	0x01470147
 802c6dc:	01470147 	.word	0x01470147
 802c6e0:	01470147 	.word	0x01470147
 802c6e4:	01470147 	.word	0x01470147
 802c6e8:	01470147 	.word	0x01470147
 802c6ec:	01470147 	.word	0x01470147
 802c6f0:	01470147 	.word	0x01470147
 802c6f4:	00750147 	.word	0x00750147
 802c6f8:	00dc00a3 	.word	0x00dc00a3
 802c6fc:	01470128 	.word	0x01470128
 802c700:	01cb0159 	.word	0x01cb0159
 802c704:	02590252 	.word	0x02590252
 802c708:	01470147 	.word	0x01470147
 802c70c:	02710147 	.word	0x02710147
 802c710:	01470147 	.word	0x01470147
 802c714:	0147027c 	.word	0x0147027c
 802c718:	033402ac 	.word	0x033402ac
 802c71c:	036a033e 	.word	0x036a033e
 802c720:	03d80372 	.word	0x03d80372
 802c724:	03ee00d8 	.word	0x03ee00d8
 802c728:	01470440 	.word	0x01470440
 802c72c:	01470147 	.word	0x01470147
 802c730:	01470147 	.word	0x01470147
 802c734:	00560147 	.word	0x00560147
 802c738:	00ba008d 	.word	0x00ba008d
 802c73c:	011d011d 	.word	0x011d011d
 802c740:	017e0147 	.word	0x017e0147
 802c744:	0147008d 	.word	0x0147008d
 802c748:	0252026a 	.word	0x0252026a
 802c74c:	026e0259 	.word	0x026e0259
 802c750:	01470273 	.word	0x01470273
 802c754:	02a5027c 	.word	0x02a5027c
 802c758:	02b500d0 	.word	0x02b500d0
 802c75c:	035d0336 	.word	0x035d0336
 802c760:	03cf03a4 	.word	0x03cf03a4
 802c764:	03e000d4 	.word	0x03e000d4
 802c768:	0403      	.short	0x0403
 802c76a:	69b3      	ldr	r3, [r6, #24]
 802c76c:	4aad      	ldr	r2, [pc, #692]	@ (802ca24 <__strftime.isra.0+0x3f8>)
 802c76e:	3318      	adds	r3, #24
 802c770:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802c774:	4658      	mov	r0, fp
 802c776:	f7e3 fd93 	bl	80102a0 <strlen>
 802c77a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802c77e:	eb04 0a00 	add.w	sl, r4, r0
 802c782:	1e6b      	subs	r3, r5, #1
 802c784:	45a2      	cmp	sl, r4
 802c786:	d107      	bne.n	802c798 <__strftime.isra.0+0x16c>
 802c788:	f898 3000 	ldrb.w	r3, [r8]
 802c78c:	2b00      	cmp	r3, #0
 802c78e:	f000 8409 	beq.w	802cfa4 <__strftime.isra.0+0x978>
 802c792:	f108 0201 	add.w	r2, r8, #1
 802c796:	e780      	b.n	802c69a <__strftime.isra.0+0x6e>
 802c798:	42a3      	cmp	r3, r4
 802c79a:	f240 80d7 	bls.w	802c94c <__strftime.isra.0+0x320>
 802c79e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802c7a2:	553a      	strb	r2, [r7, r4]
 802c7a4:	3401      	adds	r4, #1
 802c7a6:	e7ed      	b.n	802c784 <__strftime.isra.0+0x158>
 802c7a8:	69b2      	ldr	r2, [r6, #24]
 802c7aa:	4b9e      	ldr	r3, [pc, #632]	@ (802ca24 <__strftime.isra.0+0x3f8>)
 802c7ac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802c7b0:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 802c7b4:	4658      	mov	r0, fp
 802c7b6:	f7e3 fd73 	bl	80102a0 <strlen>
 802c7ba:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802c7be:	eb04 0a00 	add.w	sl, r4, r0
 802c7c2:	1e6b      	subs	r3, r5, #1
 802c7c4:	4554      	cmp	r4, sl
 802c7c6:	d0df      	beq.n	802c788 <__strftime.isra.0+0x15c>
 802c7c8:	42a3      	cmp	r3, r4
 802c7ca:	f240 80bf 	bls.w	802c94c <__strftime.isra.0+0x320>
 802c7ce:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802c7d2:	553a      	strb	r2, [r7, r4]
 802c7d4:	3401      	adds	r4, #1
 802c7d6:	e7f5      	b.n	802c7c4 <__strftime.isra.0+0x198>
 802c7d8:	4b92      	ldr	r3, [pc, #584]	@ (802ca24 <__strftime.isra.0+0x3f8>)
 802c7da:	6932      	ldr	r2, [r6, #16]
 802c7dc:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 802c7e0:	4658      	mov	r0, fp
 802c7e2:	f7e3 fd5d 	bl	80102a0 <strlen>
 802c7e6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802c7ea:	eb04 0a00 	add.w	sl, r4, r0
 802c7ee:	1e6b      	subs	r3, r5, #1
 802c7f0:	45a2      	cmp	sl, r4
 802c7f2:	d0c9      	beq.n	802c788 <__strftime.isra.0+0x15c>
 802c7f4:	42a3      	cmp	r3, r4
 802c7f6:	f240 80a9 	bls.w	802c94c <__strftime.isra.0+0x320>
 802c7fa:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802c7fe:	553a      	strb	r2, [r7, r4]
 802c800:	3401      	adds	r4, #1
 802c802:	e7f5      	b.n	802c7f0 <__strftime.isra.0+0x1c4>
 802c804:	6933      	ldr	r3, [r6, #16]
 802c806:	4a87      	ldr	r2, [pc, #540]	@ (802ca24 <__strftime.isra.0+0x3f8>)
 802c808:	330c      	adds	r3, #12
 802c80a:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802c80e:	4658      	mov	r0, fp
 802c810:	f7e3 fd46 	bl	80102a0 <strlen>
 802c814:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802c818:	eb04 0a00 	add.w	sl, r4, r0
 802c81c:	1e6b      	subs	r3, r5, #1
 802c81e:	45a2      	cmp	sl, r4
 802c820:	d0b2      	beq.n	802c788 <__strftime.isra.0+0x15c>
 802c822:	42a3      	cmp	r3, r4
 802c824:	f240 8092 	bls.w	802c94c <__strftime.isra.0+0x320>
 802c828:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802c82c:	553a      	strb	r2, [r7, r4]
 802c82e:	3401      	adds	r4, #1
 802c830:	e7f5      	b.n	802c81e <__strftime.isra.0+0x1f2>
 802c832:	4b7c      	ldr	r3, [pc, #496]	@ (802ca24 <__strftime.isra.0+0x3f8>)
 802c834:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 802c838:	4650      	mov	r0, sl
 802c83a:	f7e3 fd31 	bl	80102a0 <strlen>
 802c83e:	f89a 3000 	ldrb.w	r3, [sl]
 802c842:	2b00      	cmp	r3, #0
 802c844:	f000 8341 	beq.w	802ceca <__strftime.isra.0+0x89e>
 802c848:	4633      	mov	r3, r6
 802c84a:	4652      	mov	r2, sl
 802c84c:	1b29      	subs	r1, r5, r4
 802c84e:	1938      	adds	r0, r7, r4
 802c850:	f7ff feec 	bl	802c62c <__strftime.isra.0>
 802c854:	2800      	cmp	r0, #0
 802c856:	dd79      	ble.n	802c94c <__strftime.isra.0+0x320>
 802c858:	eb04 0a00 	add.w	sl, r4, r0
 802c85c:	e794      	b.n	802c788 <__strftime.isra.0+0x15c>
 802c85e:	4b71      	ldr	r3, [pc, #452]	@ (802ca24 <__strftime.isra.0+0x3f8>)
 802c860:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 802c864:	e7e8      	b.n	802c838 <__strftime.isra.0+0x20c>
 802c866:	4b6f      	ldr	r3, [pc, #444]	@ (802ca24 <__strftime.isra.0+0x3f8>)
 802c868:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 802c86c:	e7e4      	b.n	802c838 <__strftime.isra.0+0x20c>
 802c86e:	4b6d      	ldr	r3, [pc, #436]	@ (802ca24 <__strftime.isra.0+0x3f8>)
 802c870:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 802c874:	e7e0      	b.n	802c838 <__strftime.isra.0+0x20c>
 802c876:	f8d6 a014 	ldr.w	sl, [r6, #20]
 802c87a:	496b      	ldr	r1, [pc, #428]	@ (802ca28 <__strftime.isra.0+0x3fc>)
 802c87c:	458a      	cmp	sl, r1
 802c87e:	bfac      	ite	ge
 802c880:	f04f 0b00 	movge.w	fp, #0
 802c884:	f04f 0b01 	movlt.w	fp, #1
 802c888:	f1ba 0f00 	cmp.w	sl, #0
 802c88c:	db12      	blt.n	802c8b4 <__strftime.isra.0+0x288>
 802c88e:	2064      	movs	r0, #100	@ 0x64
 802c890:	fb9a f0f0 	sdiv	r0, sl, r0
 802c894:	3013      	adds	r0, #19
 802c896:	f1b9 0f00 	cmp.w	r9, #0
 802c89a:	d015      	beq.n	802c8c8 <__strftime.isra.0+0x29c>
 802c89c:	2863      	cmp	r0, #99	@ 0x63
 802c89e:	dd28      	ble.n	802c8f2 <__strftime.isra.0+0x2c6>
 802c8a0:	4b62      	ldr	r3, [pc, #392]	@ (802ca2c <__strftime.isra.0+0x400>)
 802c8a2:	4963      	ldr	r1, [pc, #396]	@ (802ca30 <__strftime.isra.0+0x404>)
 802c8a4:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802c8a8:	bf0c      	ite	eq
 802c8aa:	469c      	moveq	ip, r3
 802c8ac:	468c      	movne	ip, r1
 802c8ae:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 802ca4c <__strftime.isra.0+0x420>
 802c8b2:	e00d      	b.n	802c8d0 <__strftime.isra.0+0x2a4>
 802c8b4:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 802c8b8:	9203      	str	r2, [sp, #12]
 802c8ba:	f000 ff88 	bl	802d7ce <abs>
 802c8be:	2164      	movs	r1, #100	@ 0x64
 802c8c0:	9a03      	ldr	r2, [sp, #12]
 802c8c2:	fb90 f0f1 	sdiv	r0, r0, r1
 802c8c6:	e7e6      	b.n	802c896 <__strftime.isra.0+0x26a>
 802c8c8:	f8df c164 	ldr.w	ip, [pc, #356]	@ 802ca30 <__strftime.isra.0+0x404>
 802c8cc:	f8df e180 	ldr.w	lr, [pc, #384]	@ 802ca50 <__strftime.isra.0+0x424>
 802c8d0:	4b58      	ldr	r3, [pc, #352]	@ (802ca34 <__strftime.isra.0+0x408>)
 802c8d2:	9001      	str	r0, [sp, #4]
 802c8d4:	2a02      	cmp	r2, #2
 802c8d6:	bf2c      	ite	cs
 802c8d8:	ebcb 0102 	rsbcs	r1, fp, r2
 802c8dc:	f1cb 0102 	rsbcc	r1, fp, #2
 802c8e0:	4a51      	ldr	r2, [pc, #324]	@ (802ca28 <__strftime.isra.0+0x3fc>)
 802c8e2:	9100      	str	r1, [sp, #0]
 802c8e4:	4592      	cmp	sl, r2
 802c8e6:	bfa8      	it	ge
 802c8e8:	4663      	movge	r3, ip
 802c8ea:	4672      	mov	r2, lr
 802c8ec:	1b29      	subs	r1, r5, r4
 802c8ee:	1938      	adds	r0, r7, r4
 802c8f0:	e023      	b.n	802c93a <__strftime.isra.0+0x30e>
 802c8f2:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 802ca30 <__strftime.isra.0+0x404>
 802c8f6:	e7da      	b.n	802c8ae <__strftime.isra.0+0x282>
 802c8f8:	494f      	ldr	r1, [pc, #316]	@ (802ca38 <__strftime.isra.0+0x40c>)
 802c8fa:	4a50      	ldr	r2, [pc, #320]	@ (802ca3c <__strftime.isra.0+0x410>)
 802c8fc:	68f3      	ldr	r3, [r6, #12]
 802c8fe:	2864      	cmp	r0, #100	@ 0x64
 802c900:	bf18      	it	ne
 802c902:	460a      	movne	r2, r1
 802c904:	1b29      	subs	r1, r5, r4
 802c906:	1938      	adds	r0, r7, r4
 802c908:	f002 f986 	bl	802ec18 <sniprintf>
 802c90c:	e017      	b.n	802c93e <__strftime.isra.0+0x312>
 802c90e:	6970      	ldr	r0, [r6, #20]
 802c910:	6933      	ldr	r3, [r6, #16]
 802c912:	2800      	cmp	r0, #0
 802c914:	f103 0a01 	add.w	sl, r3, #1
 802c918:	eb07 0b04 	add.w	fp, r7, r4
 802c91c:	68f3      	ldr	r3, [r6, #12]
 802c91e:	eba5 0904 	sub.w	r9, r5, r4
 802c922:	db19      	blt.n	802c958 <__strftime.isra.0+0x32c>
 802c924:	2264      	movs	r2, #100	@ 0x64
 802c926:	fb90 fcf2 	sdiv	ip, r0, r2
 802c92a:	fb02 001c 	mls	r0, r2, ip, r0
 802c92e:	4a44      	ldr	r2, [pc, #272]	@ (802ca40 <__strftime.isra.0+0x414>)
 802c930:	e9cd 3000 	strd	r3, r0, [sp]
 802c934:	4649      	mov	r1, r9
 802c936:	4653      	mov	r3, sl
 802c938:	4658      	mov	r0, fp
 802c93a:	f002 f96d 	bl	802ec18 <sniprintf>
 802c93e:	2800      	cmp	r0, #0
 802c940:	db04      	blt.n	802c94c <__strftime.isra.0+0x320>
 802c942:	eb00 0a04 	add.w	sl, r0, r4
 802c946:	4555      	cmp	r5, sl
 802c948:	f63f af1e 	bhi.w	802c788 <__strftime.isra.0+0x15c>
 802c94c:	f04f 0a00 	mov.w	sl, #0
 802c950:	4650      	mov	r0, sl
 802c952:	b00f      	add	sp, #60	@ 0x3c
 802c954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c958:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802c95c:	9303      	str	r3, [sp, #12]
 802c95e:	f000 ff36 	bl	802d7ce <abs>
 802c962:	2264      	movs	r2, #100	@ 0x64
 802c964:	9b03      	ldr	r3, [sp, #12]
 802c966:	fb90 fcf2 	sdiv	ip, r0, r2
 802c96a:	fb0c 0012 	mls	r0, ip, r2, r0
 802c96e:	e7de      	b.n	802c92e <__strftime.isra.0+0x302>
 802c970:	2125      	movs	r1, #37	@ 0x25
 802c972:	f88d 1018 	strb.w	r1, [sp, #24]
 802c976:	f1b9 0f00 	cmp.w	r9, #0
 802c97a:	d00b      	beq.n	802c994 <__strftime.isra.0+0x368>
 802c97c:	2a05      	cmp	r2, #5
 802c97e:	f88d 9019 	strb.w	r9, [sp, #25]
 802c982:	d817      	bhi.n	802c9b4 <__strftime.isra.0+0x388>
 802c984:	f10d 001a 	add.w	r0, sp, #26
 802c988:	492e      	ldr	r1, [pc, #184]	@ (802ca44 <__strftime.isra.0+0x418>)
 802c98a:	f000 fe83 	bl	802d694 <strcpy>
 802c98e:	4633      	mov	r3, r6
 802c990:	aa06      	add	r2, sp, #24
 802c992:	e75b      	b.n	802c84c <__strftime.isra.0+0x220>
 802c994:	232b      	movs	r3, #43	@ 0x2b
 802c996:	f88d 3019 	strb.w	r3, [sp, #25]
 802c99a:	2304      	movs	r3, #4
 802c99c:	4a2a      	ldr	r2, [pc, #168]	@ (802ca48 <__strftime.isra.0+0x41c>)
 802c99e:	211e      	movs	r1, #30
 802c9a0:	f10d 001a 	add.w	r0, sp, #26
 802c9a4:	f002 f938 	bl	802ec18 <sniprintf>
 802c9a8:	2800      	cmp	r0, #0
 802c9aa:	ddeb      	ble.n	802c984 <__strftime.isra.0+0x358>
 802c9ac:	f10d 031a 	add.w	r3, sp, #26
 802c9b0:	4418      	add	r0, r3
 802c9b2:	e7e9      	b.n	802c988 <__strftime.isra.0+0x35c>
 802c9b4:	1f93      	subs	r3, r2, #6
 802c9b6:	d0e5      	beq.n	802c984 <__strftime.isra.0+0x358>
 802c9b8:	e7f0      	b.n	802c99c <__strftime.isra.0+0x370>
 802c9ba:	4630      	mov	r0, r6
 802c9bc:	f7ff fde4 	bl	802c588 <iso_year_adjust>
 802c9c0:	4682      	mov	sl, r0
 802c9c2:	6970      	ldr	r0, [r6, #20]
 802c9c4:	2800      	cmp	r0, #0
 802c9c6:	db11      	blt.n	802c9ec <__strftime.isra.0+0x3c0>
 802c9c8:	2364      	movs	r3, #100	@ 0x64
 802c9ca:	fb90 f2f3 	sdiv	r2, r0, r3
 802c9ce:	fb03 0012 	mls	r0, r3, r2, r0
 802c9d2:	2364      	movs	r3, #100	@ 0x64
 802c9d4:	4482      	add	sl, r0
 802c9d6:	fb9a f2f3 	sdiv	r2, sl, r3
 802c9da:	fb03 aa12 	mls	sl, r3, r2, sl
 802c9de:	449a      	add	sl, r3
 802c9e0:	fbba f2f3 	udiv	r2, sl, r3
 802c9e4:	fb03 a312 	mls	r3, r3, r2, sl
 802c9e8:	4a14      	ldr	r2, [pc, #80]	@ (802ca3c <__strftime.isra.0+0x410>)
 802c9ea:	e78b      	b.n	802c904 <__strftime.isra.0+0x2d8>
 802c9ec:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802c9f0:	f000 feed 	bl	802d7ce <abs>
 802c9f4:	2364      	movs	r3, #100	@ 0x64
 802c9f6:	f1ba 0f00 	cmp.w	sl, #0
 802c9fa:	fb90 f2f3 	sdiv	r2, r0, r3
 802c9fe:	fb02 0013 	mls	r0, r2, r3, r0
 802ca02:	da07      	bge.n	802ca14 <__strftime.isra.0+0x3e8>
 802ca04:	6972      	ldr	r2, [r6, #20]
 802ca06:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 802ca0a:	429a      	cmp	r2, r3
 802ca0c:	bfb8      	it	lt
 802ca0e:	f04f 0a01 	movlt.w	sl, #1
 802ca12:	e7de      	b.n	802c9d2 <__strftime.isra.0+0x3a6>
 802ca14:	d0dd      	beq.n	802c9d2 <__strftime.isra.0+0x3a6>
 802ca16:	6972      	ldr	r2, [r6, #20]
 802ca18:	4b03      	ldr	r3, [pc, #12]	@ (802ca28 <__strftime.isra.0+0x3fc>)
 802ca1a:	429a      	cmp	r2, r3
 802ca1c:	bfb8      	it	lt
 802ca1e:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802ca22:	e7d6      	b.n	802c9d2 <__strftime.isra.0+0x3a6>
 802ca24:	0803b2cc 	.word	0x0803b2cc
 802ca28:	fffff894 	.word	0xfffff894
 802ca2c:	0803b0ef 	.word	0x0803b0ef
 802ca30:	0803b00a 	.word	0x0803b00a
 802ca34:	0803b0f1 	.word	0x0803b0f1
 802ca38:	0803b0f3 	.word	0x0803b0f3
 802ca3c:	0803b101 	.word	0x0803b101
 802ca40:	0803b0f7 	.word	0x0803b0f7
 802ca44:	0803b10a 	.word	0x0803b10a
 802ca48:	0803b106 	.word	0x0803b106
 802ca4c:	0803b0e7 	.word	0x0803b0e7
 802ca50:	0803b0e0 	.word	0x0803b0e0
 802ca54:	6971      	ldr	r1, [r6, #20]
 802ca56:	48bc      	ldr	r0, [pc, #752]	@ (802cd48 <__strftime.isra.0+0x71c>)
 802ca58:	9205      	str	r2, [sp, #20]
 802ca5a:	4281      	cmp	r1, r0
 802ca5c:	bfac      	ite	ge
 802ca5e:	2300      	movge	r3, #0
 802ca60:	2301      	movlt	r3, #1
 802ca62:	4630      	mov	r0, r6
 802ca64:	e9cd 3103 	strd	r3, r1, [sp, #12]
 802ca68:	f7ff fd8e 	bl	802c588 <iso_year_adjust>
 802ca6c:	9904      	ldr	r1, [sp, #16]
 802ca6e:	9a05      	ldr	r2, [sp, #20]
 802ca70:	2900      	cmp	r1, #0
 802ca72:	4682      	mov	sl, r0
 802ca74:	db3a      	blt.n	802caec <__strftime.isra.0+0x4c0>
 802ca76:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802ca7a:	fb91 fbfb 	sdiv	fp, r1, fp
 802ca7e:	f10b 0b13 	add.w	fp, fp, #19
 802ca82:	6970      	ldr	r0, [r6, #20]
 802ca84:	2800      	cmp	r0, #0
 802ca86:	db3e      	blt.n	802cb06 <__strftime.isra.0+0x4da>
 802ca88:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802ca8c:	f1ba 0f00 	cmp.w	sl, #0
 802ca90:	fb90 fefc 	sdiv	lr, r0, ip
 802ca94:	fb0c 001e 	mls	r0, ip, lr, r0
 802ca98:	da4f      	bge.n	802cb3a <__strftime.isra.0+0x50e>
 802ca9a:	4482      	add	sl, r0
 802ca9c:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 802caa0:	d157      	bne.n	802cb52 <__strftime.isra.0+0x526>
 802caa2:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802caa6:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 802caaa:	9b03      	ldr	r3, [sp, #12]
 802caac:	2164      	movs	r1, #100	@ 0x64
 802caae:	fb01 aa0b 	mla	sl, r1, fp, sl
 802cab2:	2b00      	cmp	r3, #0
 802cab4:	f040 81f7 	bne.w	802cea6 <__strftime.isra.0+0x87a>
 802cab8:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802cabc:	d104      	bne.n	802cac8 <__strftime.isra.0+0x49c>
 802cabe:	f242 710f 	movw	r1, #9999	@ 0x270f
 802cac2:	458a      	cmp	sl, r1
 802cac4:	f200 8275 	bhi.w	802cfb2 <__strftime.isra.0+0x986>
 802cac8:	a906      	add	r1, sp, #24
 802caca:	2025      	movs	r0, #37	@ 0x25
 802cacc:	7008      	strb	r0, [r1, #0]
 802cace:	f1b9 0f00 	cmp.w	r9, #0
 802cad2:	f040 81f3 	bne.w	802cebc <__strftime.isra.0+0x890>
 802cad6:	1c48      	adds	r0, r1, #1
 802cad8:	499c      	ldr	r1, [pc, #624]	@ (802cd4c <__strftime.isra.0+0x720>)
 802cada:	9203      	str	r2, [sp, #12]
 802cadc:	f000 fdda 	bl	802d694 <strcpy>
 802cae0:	9a03      	ldr	r2, [sp, #12]
 802cae2:	f8cd a000 	str.w	sl, [sp]
 802cae6:	4613      	mov	r3, r2
 802cae8:	aa06      	add	r2, sp, #24
 802caea:	e098      	b.n	802cc1e <__strftime.isra.0+0x5f2>
 802caec:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 802caf0:	9205      	str	r2, [sp, #20]
 802caf2:	9104      	str	r1, [sp, #16]
 802caf4:	f000 fe6b 	bl	802d7ce <abs>
 802caf8:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802cafc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 802cb00:	fb90 fbfc 	sdiv	fp, r0, ip
 802cb04:	e7bd      	b.n	802ca82 <__strftime.isra.0+0x456>
 802cb06:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802cb0a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 802cb0e:	f000 fe5e 	bl	802d7ce <abs>
 802cb12:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802cb16:	f1ba 0f00 	cmp.w	sl, #0
 802cb1a:	fb90 fefc 	sdiv	lr, r0, ip
 802cb1e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 802cb22:	fb0e 001c 	mls	r0, lr, ip, r0
 802cb26:	da08      	bge.n	802cb3a <__strftime.isra.0+0x50e>
 802cb28:	6971      	ldr	r1, [r6, #20]
 802cb2a:	4b89      	ldr	r3, [pc, #548]	@ (802cd50 <__strftime.isra.0+0x724>)
 802cb2c:	4299      	cmp	r1, r3
 802cb2e:	dab4      	bge.n	802ca9a <__strftime.isra.0+0x46e>
 802cb30:	f04f 0a01 	mov.w	sl, #1
 802cb34:	f8cd a00c 	str.w	sl, [sp, #12]
 802cb38:	e7af      	b.n	802ca9a <__strftime.isra.0+0x46e>
 802cb3a:	f1ba 0f00 	cmp.w	sl, #0
 802cb3e:	d0ac      	beq.n	802ca9a <__strftime.isra.0+0x46e>
 802cb40:	4b81      	ldr	r3, [pc, #516]	@ (802cd48 <__strftime.isra.0+0x71c>)
 802cb42:	4299      	cmp	r1, r3
 802cb44:	9b03      	ldr	r3, [sp, #12]
 802cb46:	bfbc      	itt	lt
 802cb48:	2301      	movlt	r3, #1
 802cb4a:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802cb4e:	9303      	str	r3, [sp, #12]
 802cb50:	e7a3      	b.n	802ca9a <__strftime.isra.0+0x46e>
 802cb52:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 802cb56:	bf04      	itt	eq
 802cb58:	f10b 0b01 	addeq.w	fp, fp, #1
 802cb5c:	f04f 0a00 	moveq.w	sl, #0
 802cb60:	e7a3      	b.n	802caaa <__strftime.isra.0+0x47e>
 802cb62:	497c      	ldr	r1, [pc, #496]	@ (802cd54 <__strftime.isra.0+0x728>)
 802cb64:	4a7c      	ldr	r2, [pc, #496]	@ (802cd58 <__strftime.isra.0+0x72c>)
 802cb66:	68b3      	ldr	r3, [r6, #8]
 802cb68:	286b      	cmp	r0, #107	@ 0x6b
 802cb6a:	bf18      	it	ne
 802cb6c:	460a      	movne	r2, r1
 802cb6e:	e6c9      	b.n	802c904 <__strftime.isra.0+0x2d8>
 802cb70:	68b3      	ldr	r3, [r6, #8]
 802cb72:	b163      	cbz	r3, 802cb8e <__strftime.isra.0+0x562>
 802cb74:	2b0c      	cmp	r3, #12
 802cb76:	d004      	beq.n	802cb82 <__strftime.isra.0+0x556>
 802cb78:	210c      	movs	r1, #12
 802cb7a:	fb93 f2f1 	sdiv	r2, r3, r1
 802cb7e:	fb01 3312 	mls	r3, r1, r2, r3
 802cb82:	4975      	ldr	r1, [pc, #468]	@ (802cd58 <__strftime.isra.0+0x72c>)
 802cb84:	4a73      	ldr	r2, [pc, #460]	@ (802cd54 <__strftime.isra.0+0x728>)
 802cb86:	2849      	cmp	r0, #73	@ 0x49
 802cb88:	bf18      	it	ne
 802cb8a:	460a      	movne	r2, r1
 802cb8c:	e6ba      	b.n	802c904 <__strftime.isra.0+0x2d8>
 802cb8e:	230c      	movs	r3, #12
 802cb90:	e7f7      	b.n	802cb82 <__strftime.isra.0+0x556>
 802cb92:	69f3      	ldr	r3, [r6, #28]
 802cb94:	4a71      	ldr	r2, [pc, #452]	@ (802cd5c <__strftime.isra.0+0x730>)
 802cb96:	3301      	adds	r3, #1
 802cb98:	e6b4      	b.n	802c904 <__strftime.isra.0+0x2d8>
 802cb9a:	6933      	ldr	r3, [r6, #16]
 802cb9c:	3301      	adds	r3, #1
 802cb9e:	e723      	b.n	802c9e8 <__strftime.isra.0+0x3bc>
 802cba0:	6873      	ldr	r3, [r6, #4]
 802cba2:	e721      	b.n	802c9e8 <__strftime.isra.0+0x3bc>
 802cba4:	1e6b      	subs	r3, r5, #1
 802cba6:	429c      	cmp	r4, r3
 802cba8:	f4bf aed0 	bcs.w	802c94c <__strftime.isra.0+0x320>
 802cbac:	f104 0a01 	add.w	sl, r4, #1
 802cbb0:	230a      	movs	r3, #10
 802cbb2:	553b      	strb	r3, [r7, r4]
 802cbb4:	e5e8      	b.n	802c788 <__strftime.isra.0+0x15c>
 802cbb6:	68b3      	ldr	r3, [r6, #8]
 802cbb8:	2b0b      	cmp	r3, #11
 802cbba:	4b69      	ldr	r3, [pc, #420]	@ (802cd60 <__strftime.isra.0+0x734>)
 802cbbc:	bfd4      	ite	le
 802cbbe:	2200      	movle	r2, #0
 802cbc0:	2201      	movgt	r2, #1
 802cbc2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802cbc6:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 802cbca:	4658      	mov	r0, fp
 802cbcc:	f7e3 fb68 	bl	80102a0 <strlen>
 802cbd0:	eb04 0a00 	add.w	sl, r4, r0
 802cbd4:	4863      	ldr	r0, [pc, #396]	@ (802cd64 <__strftime.isra.0+0x738>)
 802cbd6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802cbda:	1e69      	subs	r1, r5, #1
 802cbdc:	45a2      	cmp	sl, r4
 802cbde:	f43f add3 	beq.w	802c788 <__strftime.isra.0+0x15c>
 802cbe2:	42a1      	cmp	r1, r4
 802cbe4:	f67f aeb2 	bls.w	802c94c <__strftime.isra.0+0x320>
 802cbe8:	f898 2000 	ldrb.w	r2, [r8]
 802cbec:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 802cbf0:	2a50      	cmp	r2, #80	@ 0x50
 802cbf2:	d106      	bne.n	802cc02 <__strftime.isra.0+0x5d6>
 802cbf4:	5cc2      	ldrb	r2, [r0, r3]
 802cbf6:	f002 0203 	and.w	r2, r2, #3
 802cbfa:	2a01      	cmp	r2, #1
 802cbfc:	bf08      	it	eq
 802cbfe:	3320      	addeq	r3, #32
 802cc00:	b2db      	uxtb	r3, r3
 802cc02:	553b      	strb	r3, [r7, r4]
 802cc04:	3401      	adds	r4, #1
 802cc06:	e7e9      	b.n	802cbdc <__strftime.isra.0+0x5b0>
 802cc08:	2203      	movs	r2, #3
 802cc0a:	6933      	ldr	r3, [r6, #16]
 802cc0c:	fb93 f3f2 	sdiv	r3, r3, r2
 802cc10:	4a55      	ldr	r2, [pc, #340]	@ (802cd68 <__strftime.isra.0+0x73c>)
 802cc12:	3301      	adds	r3, #1
 802cc14:	e676      	b.n	802c904 <__strftime.isra.0+0x2d8>
 802cc16:	6873      	ldr	r3, [r6, #4]
 802cc18:	9300      	str	r3, [sp, #0]
 802cc1a:	68b3      	ldr	r3, [r6, #8]
 802cc1c:	4a53      	ldr	r2, [pc, #332]	@ (802cd6c <__strftime.isra.0+0x740>)
 802cc1e:	1b29      	subs	r1, r5, r4
 802cc20:	1938      	adds	r0, r7, r4
 802cc22:	f001 fff9 	bl	802ec18 <sniprintf>
 802cc26:	e68a      	b.n	802c93e <__strftime.isra.0+0x312>
 802cc28:	6a33      	ldr	r3, [r6, #32]
 802cc2a:	2b00      	cmp	r3, #0
 802cc2c:	db78      	blt.n	802cd20 <__strftime.isra.0+0x6f4>
 802cc2e:	f000 fa7b 	bl	802d128 <__tz_lock>
 802cc32:	9b02      	ldr	r3, [sp, #8]
 802cc34:	b90b      	cbnz	r3, 802cc3a <__strftime.isra.0+0x60e>
 802cc36:	f000 fa83 	bl	802d140 <_tzset_unlocked>
 802cc3a:	f007 fe73 	bl	8034924 <__gettzinfo>
 802cc3e:	6a33      	ldr	r3, [r6, #32]
 802cc40:	2b00      	cmp	r3, #0
 802cc42:	bfd4      	ite	le
 802cc44:	2200      	movle	r2, #0
 802cc46:	2201      	movgt	r2, #1
 802cc48:	2328      	movs	r3, #40	@ 0x28
 802cc4a:	fb02 3303 	mla	r3, r2, r3, r3
 802cc4e:	58c3      	ldr	r3, [r0, r3]
 802cc50:	f1c3 0a00 	rsb	sl, r3, #0
 802cc54:	f000 fa6e 	bl	802d134 <__tz_unlock>
 802cc58:	2301      	movs	r3, #1
 802cc5a:	9302      	str	r3, [sp, #8]
 802cc5c:	6972      	ldr	r2, [r6, #20]
 802cc5e:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 802cc62:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 802cc66:	f16c 0c00 	sbc.w	ip, ip, #0
 802cc6a:	f1bc 0f00 	cmp.w	ip, #0
 802cc6e:	eba5 0104 	sub.w	r1, r5, r4
 802cc72:	eb07 0004 	add.w	r0, r7, r4
 802cc76:	da02      	bge.n	802cc7e <__strftime.isra.0+0x652>
 802cc78:	3303      	adds	r3, #3
 802cc7a:	f14c 0c00 	adc.w	ip, ip, #0
 802cc7e:	089b      	lsrs	r3, r3, #2
 802cc80:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 802cc84:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 802cc88:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802cc8c:	ea4f 0cac 	mov.w	ip, ip, asr #2
 802cc90:	fb9e fefb 	sdiv	lr, lr, fp
 802cc94:	ebb3 030e 	subs.w	r3, r3, lr
 802cc98:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 802cc9c:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 802cca0:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 802cca4:	fb9e fefb 	sdiv	lr, lr, fp
 802cca8:	eb13 030e 	adds.w	r3, r3, lr
 802ccac:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 802ccb0:	3a46      	subs	r2, #70	@ 0x46
 802ccb2:	f240 1e6d 	movw	lr, #365	@ 0x16d
 802ccb6:	fb0e f202 	mul.w	r2, lr, r2
 802ccba:	189b      	adds	r3, r3, r2
 802ccbc:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802ccc0:	69f2      	ldr	r2, [r6, #28]
 802ccc2:	f8d6 b004 	ldr.w	fp, [r6, #4]
 802ccc6:	189b      	adds	r3, r3, r2
 802ccc8:	f04f 0e18 	mov.w	lr, #24
 802cccc:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802ccd0:	fba3 230e 	umull	r2, r3, r3, lr
 802ccd4:	fb0e 330c 	mla	r3, lr, ip, r3
 802ccd8:	f8d6 c008 	ldr.w	ip, [r6, #8]
 802ccdc:	eb12 020c 	adds.w	r2, r2, ip
 802cce0:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802cce4:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 802cce8:	fba2 2e0c 	umull	r2, lr, r2, ip
 802ccec:	fb0c ee03 	mla	lr, ip, r3, lr
 802ccf0:	eb12 030b 	adds.w	r3, r2, fp
 802ccf4:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 802ccf8:	fba3 e30c 	umull	lr, r3, r3, ip
 802ccfc:	fb0c 3302 	mla	r3, ip, r2, r3
 802cd00:	f8d6 c000 	ldr.w	ip, [r6]
 802cd04:	eb1e 020c 	adds.w	r2, lr, ip
 802cd08:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802cd0c:	ebb2 020a 	subs.w	r2, r2, sl
 802cd10:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 802cd14:	e9cd 2300 	strd	r2, r3, [sp]
 802cd18:	4a15      	ldr	r2, [pc, #84]	@ (802cd70 <__strftime.isra.0+0x744>)
 802cd1a:	f001 ff7d 	bl	802ec18 <sniprintf>
 802cd1e:	e60e      	b.n	802c93e <__strftime.isra.0+0x312>
 802cd20:	f04f 0a00 	mov.w	sl, #0
 802cd24:	e79a      	b.n	802cc5c <__strftime.isra.0+0x630>
 802cd26:	6833      	ldr	r3, [r6, #0]
 802cd28:	e65e      	b.n	802c9e8 <__strftime.isra.0+0x3bc>
 802cd2a:	1e6b      	subs	r3, r5, #1
 802cd2c:	429c      	cmp	r4, r3
 802cd2e:	f4bf ae0d 	bcs.w	802c94c <__strftime.isra.0+0x320>
 802cd32:	f104 0a01 	add.w	sl, r4, #1
 802cd36:	2309      	movs	r3, #9
 802cd38:	e73b      	b.n	802cbb2 <__strftime.isra.0+0x586>
 802cd3a:	6833      	ldr	r3, [r6, #0]
 802cd3c:	9301      	str	r3, [sp, #4]
 802cd3e:	6873      	ldr	r3, [r6, #4]
 802cd40:	9300      	str	r3, [sp, #0]
 802cd42:	68b3      	ldr	r3, [r6, #8]
 802cd44:	4a0b      	ldr	r2, [pc, #44]	@ (802cd74 <__strftime.isra.0+0x748>)
 802cd46:	e5d1      	b.n	802c8ec <__strftime.isra.0+0x2c0>
 802cd48:	fffff894 	.word	0xfffff894
 802cd4c:	0803b112 	.word	0x0803b112
 802cd50:	fffff895 	.word	0xfffff895
 802cd54:	0803b101 	.word	0x0803b101
 802cd58:	0803b0f3 	.word	0x0803b0f3
 802cd5c:	0803b116 	.word	0x0803b116
 802cd60:	0803b2cc 	.word	0x0803b2cc
 802cd64:	0803b3c9 	.word	0x0803b3c9
 802cd68:	0803b11b 	.word	0x0803b11b
 802cd6c:	0803b12a 	.word	0x0803b12a
 802cd70:	0803b120 	.word	0x0803b120
 802cd74:	0803b125 	.word	0x0803b125
 802cd78:	1e6b      	subs	r3, r5, #1
 802cd7a:	429c      	cmp	r4, r3
 802cd7c:	f4bf ade6 	bcs.w	802c94c <__strftime.isra.0+0x320>
 802cd80:	69b3      	ldr	r3, [r6, #24]
 802cd82:	b91b      	cbnz	r3, 802cd8c <__strftime.isra.0+0x760>
 802cd84:	2337      	movs	r3, #55	@ 0x37
 802cd86:	f104 0a01 	add.w	sl, r4, #1
 802cd8a:	e712      	b.n	802cbb2 <__strftime.isra.0+0x586>
 802cd8c:	3330      	adds	r3, #48	@ 0x30
 802cd8e:	b2db      	uxtb	r3, r3
 802cd90:	e7f9      	b.n	802cd86 <__strftime.isra.0+0x75a>
 802cd92:	69f3      	ldr	r3, [r6, #28]
 802cd94:	69b2      	ldr	r2, [r6, #24]
 802cd96:	3307      	adds	r3, #7
 802cd98:	1a9b      	subs	r3, r3, r2
 802cd9a:	2207      	movs	r2, #7
 802cd9c:	fb93 f3f2 	sdiv	r3, r3, r2
 802cda0:	e622      	b.n	802c9e8 <__strftime.isra.0+0x3bc>
 802cda2:	4630      	mov	r0, r6
 802cda4:	f7ff fbf0 	bl	802c588 <iso_year_adjust>
 802cda8:	69b2      	ldr	r2, [r6, #24]
 802cdaa:	b132      	cbz	r2, 802cdba <__strftime.isra.0+0x78e>
 802cdac:	3a01      	subs	r2, #1
 802cdae:	2800      	cmp	r0, #0
 802cdb0:	69f3      	ldr	r3, [r6, #28]
 802cdb2:	dc26      	bgt.n	802ce02 <__strftime.isra.0+0x7d6>
 802cdb4:	d103      	bne.n	802cdbe <__strftime.isra.0+0x792>
 802cdb6:	330a      	adds	r3, #10
 802cdb8:	e7ee      	b.n	802cd98 <__strftime.isra.0+0x76c>
 802cdba:	2206      	movs	r2, #6
 802cdbc:	e7f7      	b.n	802cdae <__strftime.isra.0+0x782>
 802cdbe:	1ad2      	subs	r2, r2, r3
 802cdc0:	6973      	ldr	r3, [r6, #20]
 802cdc2:	2b00      	cmp	r3, #0
 802cdc4:	f240 716b 	movw	r1, #1899	@ 0x76b
 802cdc8:	bfa8      	it	ge
 802cdca:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 802cdce:	440b      	add	r3, r1
 802cdd0:	0799      	lsls	r1, r3, #30
 802cdd2:	d105      	bne.n	802cde0 <__strftime.isra.0+0x7b4>
 802cdd4:	2064      	movs	r0, #100	@ 0x64
 802cdd6:	fb93 f1f0 	sdiv	r1, r3, r0
 802cdda:	fb00 3111 	mls	r1, r0, r1, r3
 802cdde:	b971      	cbnz	r1, 802cdfe <__strftime.isra.0+0x7d2>
 802cde0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802cde4:	fb93 f0f1 	sdiv	r0, r3, r1
 802cde8:	fb01 3310 	mls	r3, r1, r0, r3
 802cdec:	fab3 f383 	clz	r3, r3
 802cdf0:	095b      	lsrs	r3, r3, #5
 802cdf2:	1ad2      	subs	r2, r2, r3
 802cdf4:	2a04      	cmp	r2, #4
 802cdf6:	bfcc      	ite	gt
 802cdf8:	2334      	movgt	r3, #52	@ 0x34
 802cdfa:	2335      	movle	r3, #53	@ 0x35
 802cdfc:	e5f4      	b.n	802c9e8 <__strftime.isra.0+0x3bc>
 802cdfe:	2301      	movs	r3, #1
 802ce00:	e7f7      	b.n	802cdf2 <__strftime.isra.0+0x7c6>
 802ce02:	2301      	movs	r3, #1
 802ce04:	e5f0      	b.n	802c9e8 <__strftime.isra.0+0x3bc>
 802ce06:	496c      	ldr	r1, [pc, #432]	@ (802cfb8 <__strftime.isra.0+0x98c>)
 802ce08:	9203      	str	r2, [sp, #12]
 802ce0a:	a806      	add	r0, sp, #24
 802ce0c:	f000 fc42 	bl	802d694 <strcpy>
 802ce10:	a806      	add	r0, sp, #24
 802ce12:	f7e3 fa45 	bl	80102a0 <strlen>
 802ce16:	ab06      	add	r3, sp, #24
 802ce18:	eb03 0a00 	add.w	sl, r3, r0
 802ce1c:	f10a 0a01 	add.w	sl, sl, #1
 802ce20:	46d3      	mov	fp, sl
 802ce22:	f1b9 0f00 	cmp.w	r9, #0
 802ce26:	d009      	beq.n	802ce3c <__strftime.isra.0+0x810>
 802ce28:	9a03      	ldr	r2, [sp, #12]
 802ce2a:	f803 9000 	strb.w	r9, [r3, r0]
 802ce2e:	2a05      	cmp	r2, #5
 802ce30:	d901      	bls.n	802ce36 <__strftime.isra.0+0x80a>
 802ce32:	1f93      	subs	r3, r2, #6
 802ce34:	d106      	bne.n	802ce44 <__strftime.isra.0+0x818>
 802ce36:	4961      	ldr	r1, [pc, #388]	@ (802cfbc <__strftime.isra.0+0x990>)
 802ce38:	4658      	mov	r0, fp
 802ce3a:	e5a6      	b.n	802c98a <__strftime.isra.0+0x35e>
 802ce3c:	aa06      	add	r2, sp, #24
 802ce3e:	232b      	movs	r3, #43	@ 0x2b
 802ce40:	5413      	strb	r3, [r2, r0]
 802ce42:	2304      	movs	r3, #4
 802ce44:	a90e      	add	r1, sp, #56	@ 0x38
 802ce46:	4a5e      	ldr	r2, [pc, #376]	@ (802cfc0 <__strftime.isra.0+0x994>)
 802ce48:	eba1 010a 	sub.w	r1, r1, sl
 802ce4c:	4650      	mov	r0, sl
 802ce4e:	f001 fee3 	bl	802ec18 <sniprintf>
 802ce52:	2800      	cmp	r0, #0
 802ce54:	bfc8      	it	gt
 802ce56:	eb0a 0b00 	addgt.w	fp, sl, r0
 802ce5a:	e7ec      	b.n	802ce36 <__strftime.isra.0+0x80a>
 802ce5c:	1e6b      	subs	r3, r5, #1
 802ce5e:	429c      	cmp	r4, r3
 802ce60:	f4bf ad74 	bcs.w	802c94c <__strftime.isra.0+0x320>
 802ce64:	69b3      	ldr	r3, [r6, #24]
 802ce66:	f104 0a01 	add.w	sl, r4, #1
 802ce6a:	3330      	adds	r3, #48	@ 0x30
 802ce6c:	e6a1      	b.n	802cbb2 <__strftime.isra.0+0x586>
 802ce6e:	69b2      	ldr	r2, [r6, #24]
 802ce70:	b11a      	cbz	r2, 802ce7a <__strftime.isra.0+0x84e>
 802ce72:	3a01      	subs	r2, #1
 802ce74:	69f3      	ldr	r3, [r6, #28]
 802ce76:	3307      	adds	r3, #7
 802ce78:	e78e      	b.n	802cd98 <__strftime.isra.0+0x76c>
 802ce7a:	2206      	movs	r2, #6
 802ce7c:	e7fa      	b.n	802ce74 <__strftime.isra.0+0x848>
 802ce7e:	6970      	ldr	r0, [r6, #20]
 802ce80:	2800      	cmp	r0, #0
 802ce82:	db05      	blt.n	802ce90 <__strftime.isra.0+0x864>
 802ce84:	2364      	movs	r3, #100	@ 0x64
 802ce86:	fb90 f2f3 	sdiv	r2, r0, r3
 802ce8a:	fb02 0313 	mls	r3, r2, r3, r0
 802ce8e:	e5ab      	b.n	802c9e8 <__strftime.isra.0+0x3bc>
 802ce90:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802ce94:	f000 fc9b 	bl	802d7ce <abs>
 802ce98:	e7f4      	b.n	802ce84 <__strftime.isra.0+0x858>
 802ce9a:	6971      	ldr	r1, [r6, #20]
 802ce9c:	4849      	ldr	r0, [pc, #292]	@ (802cfc4 <__strftime.isra.0+0x998>)
 802ce9e:	4281      	cmp	r1, r0
 802cea0:	da09      	bge.n	802ceb6 <__strftime.isra.0+0x88a>
 802cea2:	eba0 0a01 	sub.w	sl, r0, r1
 802cea6:	212d      	movs	r1, #45	@ 0x2d
 802cea8:	f88d 1018 	strb.w	r1, [sp, #24]
 802ceac:	b102      	cbz	r2, 802ceb0 <__strftime.isra.0+0x884>
 802ceae:	3a01      	subs	r2, #1
 802ceb0:	f10d 0119 	add.w	r1, sp, #25
 802ceb4:	e609      	b.n	802caca <__strftime.isra.0+0x49e>
 802ceb6:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 802ceba:	e5fd      	b.n	802cab8 <__strftime.isra.0+0x48c>
 802cebc:	2330      	movs	r3, #48	@ 0x30
 802cebe:	1c88      	adds	r0, r1, #2
 802cec0:	704b      	strb	r3, [r1, #1]
 802cec2:	e609      	b.n	802cad8 <__strftime.isra.0+0x4ac>
 802cec4:	6a33      	ldr	r3, [r6, #32]
 802cec6:	2b00      	cmp	r3, #0
 802cec8:	da01      	bge.n	802cece <__strftime.isra.0+0x8a2>
 802ceca:	46a2      	mov	sl, r4
 802cecc:	e45c      	b.n	802c788 <__strftime.isra.0+0x15c>
 802cece:	f000 f92b 	bl	802d128 <__tz_lock>
 802ced2:	9b02      	ldr	r3, [sp, #8]
 802ced4:	b90b      	cbnz	r3, 802ceda <__strftime.isra.0+0x8ae>
 802ced6:	f000 f933 	bl	802d140 <_tzset_unlocked>
 802ceda:	f007 fd23 	bl	8034924 <__gettzinfo>
 802cede:	6a33      	ldr	r3, [r6, #32]
 802cee0:	2b00      	cmp	r3, #0
 802cee2:	bfd4      	ite	le
 802cee4:	2200      	movle	r2, #0
 802cee6:	2201      	movgt	r2, #1
 802cee8:	2328      	movs	r3, #40	@ 0x28
 802ceea:	fb02 3303 	mla	r3, r2, r3, r3
 802ceee:	eb07 0a04 	add.w	sl, r7, r4
 802cef2:	58c3      	ldr	r3, [r0, r3]
 802cef4:	f1c3 0900 	rsb	r9, r3, #0
 802cef8:	f000 f91c 	bl	802d134 <__tz_unlock>
 802cefc:	233c      	movs	r3, #60	@ 0x3c
 802cefe:	fb99 f0f3 	sdiv	r0, r9, r3
 802cf02:	f001 fbfe 	bl	802e702 <labs>
 802cf06:	233c      	movs	r3, #60	@ 0x3c
 802cf08:	eba5 0b04 	sub.w	fp, r5, r4
 802cf0c:	fb90 f2f3 	sdiv	r2, r0, r3
 802cf10:	fb02 0013 	mls	r0, r2, r3, r0
 802cf14:	9000      	str	r0, [sp, #0]
 802cf16:	4a2c      	ldr	r2, [pc, #176]	@ (802cfc8 <__strftime.isra.0+0x99c>)
 802cf18:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 802cf1c:	4659      	mov	r1, fp
 802cf1e:	4650      	mov	r0, sl
 802cf20:	fb99 f3f3 	sdiv	r3, r9, r3
 802cf24:	f001 fe78 	bl	802ec18 <sniprintf>
 802cf28:	2800      	cmp	r0, #0
 802cf2a:	f6ff ad0f 	blt.w	802c94c <__strftime.isra.0+0x320>
 802cf2e:	eb00 0a04 	add.w	sl, r0, r4
 802cf32:	4555      	cmp	r5, sl
 802cf34:	f67f ad0a 	bls.w	802c94c <__strftime.isra.0+0x320>
 802cf38:	2301      	movs	r3, #1
 802cf3a:	9302      	str	r3, [sp, #8]
 802cf3c:	e424      	b.n	802c788 <__strftime.isra.0+0x15c>
 802cf3e:	6a33      	ldr	r3, [r6, #32]
 802cf40:	2b00      	cmp	r3, #0
 802cf42:	dbc2      	blt.n	802ceca <__strftime.isra.0+0x89e>
 802cf44:	f000 f8f0 	bl	802d128 <__tz_lock>
 802cf48:	9b02      	ldr	r3, [sp, #8]
 802cf4a:	b90b      	cbnz	r3, 802cf50 <__strftime.isra.0+0x924>
 802cf4c:	f000 f8f8 	bl	802d140 <_tzset_unlocked>
 802cf50:	6a33      	ldr	r3, [r6, #32]
 802cf52:	4a1e      	ldr	r2, [pc, #120]	@ (802cfcc <__strftime.isra.0+0x9a0>)
 802cf54:	2b00      	cmp	r3, #0
 802cf56:	bfd4      	ite	le
 802cf58:	2300      	movle	r3, #0
 802cf5a:	2301      	movgt	r3, #1
 802cf5c:	46a2      	mov	sl, r4
 802cf5e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802cf62:	4648      	mov	r0, r9
 802cf64:	f7e3 f99c 	bl	80102a0 <strlen>
 802cf68:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802cf6c:	4420      	add	r0, r4
 802cf6e:	1e6b      	subs	r3, r5, #1
 802cf70:	4550      	cmp	r0, sl
 802cf72:	d102      	bne.n	802cf7a <__strftime.isra.0+0x94e>
 802cf74:	f000 f8de 	bl	802d134 <__tz_unlock>
 802cf78:	e7de      	b.n	802cf38 <__strftime.isra.0+0x90c>
 802cf7a:	4553      	cmp	r3, sl
 802cf7c:	d906      	bls.n	802cf8c <__strftime.isra.0+0x960>
 802cf7e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802cf82:	f807 200a 	strb.w	r2, [r7, sl]
 802cf86:	f10a 0a01 	add.w	sl, sl, #1
 802cf8a:	e7f1      	b.n	802cf70 <__strftime.isra.0+0x944>
 802cf8c:	f000 f8d2 	bl	802d134 <__tz_unlock>
 802cf90:	e4dc      	b.n	802c94c <__strftime.isra.0+0x320>
 802cf92:	1e6b      	subs	r3, r5, #1
 802cf94:	429c      	cmp	r4, r3
 802cf96:	f4bf acd9 	bcs.w	802c94c <__strftime.isra.0+0x320>
 802cf9a:	f104 0a01 	add.w	sl, r4, #1
 802cf9e:	2325      	movs	r3, #37	@ 0x25
 802cfa0:	e607      	b.n	802cbb2 <__strftime.isra.0+0x586>
 802cfa2:	46a2      	mov	sl, r4
 802cfa4:	2d00      	cmp	r5, #0
 802cfa6:	f43f acd3 	beq.w	802c950 <__strftime.isra.0+0x324>
 802cfaa:	2300      	movs	r3, #0
 802cfac:	f807 300a 	strb.w	r3, [r7, sl]
 802cfb0:	e4ce      	b.n	802c950 <__strftime.isra.0+0x324>
 802cfb2:	4649      	mov	r1, r9
 802cfb4:	e778      	b.n	802cea8 <__strftime.isra.0+0x87c>
 802cfb6:	bf00      	nop
 802cfb8:	0803b134 	.word	0x0803b134
 802cfbc:	0803b29c 	.word	0x0803b29c
 802cfc0:	0803b106 	.word	0x0803b106
 802cfc4:	fffff894 	.word	0xfffff894
 802cfc8:	0803b13c 	.word	0x0803b13c
 802cfcc:	20000164 	.word	0x20000164

0802cfd0 <strftime>:
 802cfd0:	f7ff bb2c 	b.w	802c62c <__strftime.isra.0>

0802cfd4 <__tzcalc_limits>:
 802cfd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802cfd8:	4604      	mov	r4, r0
 802cfda:	f007 fca3 	bl	8034924 <__gettzinfo>
 802cfde:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 802cfe2:	429c      	cmp	r4, r3
 802cfe4:	f340 8099 	ble.w	802d11a <__tzcalc_limits+0x146>
 802cfe8:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 802cfec:	19e5      	adds	r5, r4, r7
 802cfee:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 802cff2:	f240 126d 	movw	r2, #365	@ 0x16d
 802cff6:	10ad      	asrs	r5, r5, #2
 802cff8:	fb02 5503 	mla	r5, r2, r3, r5
 802cffc:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 802d000:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 802d004:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 802d008:	4f45      	ldr	r7, [pc, #276]	@ (802d120 <__tzcalc_limits+0x14c>)
 802d00a:	fb93 f3f2 	sdiv	r3, r3, r2
 802d00e:	441d      	add	r5, r3
 802d010:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802d014:	eb04 030c 	add.w	r3, r4, ip
 802d018:	6044      	str	r4, [r0, #4]
 802d01a:	fbb3 f3f2 	udiv	r3, r3, r2
 802d01e:	4601      	mov	r1, r0
 802d020:	441d      	add	r5, r3
 802d022:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 802d026:	7a0b      	ldrb	r3, [r1, #8]
 802d028:	694a      	ldr	r2, [r1, #20]
 802d02a:	2b4a      	cmp	r3, #74	@ 0x4a
 802d02c:	d133      	bne.n	802d096 <__tzcalc_limits+0xc2>
 802d02e:	07a6      	lsls	r6, r4, #30
 802d030:	eb05 0302 	add.w	r3, r5, r2
 802d034:	d106      	bne.n	802d044 <__tzcalc_limits+0x70>
 802d036:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 802d03a:	fb94 f6fe 	sdiv	r6, r4, lr
 802d03e:	fb0e 4616 	mls	r6, lr, r6, r4
 802d042:	b936      	cbnz	r6, 802d052 <__tzcalc_limits+0x7e>
 802d044:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 802d048:	fb94 f6fe 	sdiv	r6, r4, lr
 802d04c:	fb0e 4616 	mls	r6, lr, r6, r4
 802d050:	b9fe      	cbnz	r6, 802d092 <__tzcalc_limits+0xbe>
 802d052:	2a3b      	cmp	r2, #59	@ 0x3b
 802d054:	bfd4      	ite	le
 802d056:	2200      	movle	r2, #0
 802d058:	2201      	movgt	r2, #1
 802d05a:	4413      	add	r3, r2
 802d05c:	3b01      	subs	r3, #1
 802d05e:	698a      	ldr	r2, [r1, #24]
 802d060:	17d6      	asrs	r6, r2, #31
 802d062:	fbc3 2607 	smlal	r2, r6, r3, r7
 802d066:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 802d068:	18d2      	adds	r2, r2, r3
 802d06a:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 802d06e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 802d072:	3128      	adds	r1, #40	@ 0x28
 802d074:	458c      	cmp	ip, r1
 802d076:	d1d6      	bne.n	802d026 <__tzcalc_limits+0x52>
 802d078:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 802d07c:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 802d080:	428c      	cmp	r4, r1
 802d082:	4193      	sbcs	r3, r2
 802d084:	bfb4      	ite	lt
 802d086:	2301      	movlt	r3, #1
 802d088:	2300      	movge	r3, #0
 802d08a:	6003      	str	r3, [r0, #0]
 802d08c:	2001      	movs	r0, #1
 802d08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d092:	2200      	movs	r2, #0
 802d094:	e7e1      	b.n	802d05a <__tzcalc_limits+0x86>
 802d096:	2b44      	cmp	r3, #68	@ 0x44
 802d098:	d101      	bne.n	802d09e <__tzcalc_limits+0xca>
 802d09a:	18ab      	adds	r3, r5, r2
 802d09c:	e7df      	b.n	802d05e <__tzcalc_limits+0x8a>
 802d09e:	07a3      	lsls	r3, r4, #30
 802d0a0:	d105      	bne.n	802d0ae <__tzcalc_limits+0xda>
 802d0a2:	2664      	movs	r6, #100	@ 0x64
 802d0a4:	fb94 f3f6 	sdiv	r3, r4, r6
 802d0a8:	fb06 4313 	mls	r3, r6, r3, r4
 802d0ac:	bb7b      	cbnz	r3, 802d10e <__tzcalc_limits+0x13a>
 802d0ae:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 802d0b2:	fb94 f6f3 	sdiv	r6, r4, r3
 802d0b6:	fb03 4616 	mls	r6, r3, r6, r4
 802d0ba:	fab6 f686 	clz	r6, r6
 802d0be:	0976      	lsrs	r6, r6, #5
 802d0c0:	f8df e060 	ldr.w	lr, [pc, #96]	@ 802d124 <__tzcalc_limits+0x150>
 802d0c4:	f8d1 900c 	ldr.w	r9, [r1, #12]
 802d0c8:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 802d0cc:	462b      	mov	r3, r5
 802d0ce:	f04f 0800 	mov.w	r8, #0
 802d0d2:	fb0a e606 	mla	r6, sl, r6, lr
 802d0d6:	f108 0801 	add.w	r8, r8, #1
 802d0da:	45c1      	cmp	r9, r8
 802d0dc:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 802d0e0:	dc17      	bgt.n	802d112 <__tzcalc_limits+0x13e>
 802d0e2:	f103 0804 	add.w	r8, r3, #4
 802d0e6:	2607      	movs	r6, #7
 802d0e8:	fb98 f6f6 	sdiv	r6, r8, r6
 802d0ec:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802d0f0:	eba8 0606 	sub.w	r6, r8, r6
 802d0f4:	1b92      	subs	r2, r2, r6
 802d0f6:	690e      	ldr	r6, [r1, #16]
 802d0f8:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 802d0fc:	bf48      	it	mi
 802d0fe:	3207      	addmi	r2, #7
 802d100:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802d104:	4432      	add	r2, r6
 802d106:	4572      	cmp	r2, lr
 802d108:	da05      	bge.n	802d116 <__tzcalc_limits+0x142>
 802d10a:	4413      	add	r3, r2
 802d10c:	e7a7      	b.n	802d05e <__tzcalc_limits+0x8a>
 802d10e:	2601      	movs	r6, #1
 802d110:	e7d6      	b.n	802d0c0 <__tzcalc_limits+0xec>
 802d112:	4473      	add	r3, lr
 802d114:	e7df      	b.n	802d0d6 <__tzcalc_limits+0x102>
 802d116:	3a07      	subs	r2, #7
 802d118:	e7f5      	b.n	802d106 <__tzcalc_limits+0x132>
 802d11a:	2000      	movs	r0, #0
 802d11c:	e7b7      	b.n	802d08e <__tzcalc_limits+0xba>
 802d11e:	bf00      	nop
 802d120:	00015180 	.word	0x00015180
 802d124:	0803b07c 	.word	0x0803b07c

0802d128 <__tz_lock>:
 802d128:	4801      	ldr	r0, [pc, #4]	@ (802d130 <__tz_lock+0x8>)
 802d12a:	f000 bae1 	b.w	802d6f0 <__retarget_lock_acquire>
 802d12e:	bf00      	nop
 802d130:	2001a030 	.word	0x2001a030

0802d134 <__tz_unlock>:
 802d134:	4801      	ldr	r0, [pc, #4]	@ (802d13c <__tz_unlock+0x8>)
 802d136:	f000 badd 	b.w	802d6f4 <__retarget_lock_release>
 802d13a:	bf00      	nop
 802d13c:	2001a030 	.word	0x2001a030

0802d140 <_tzset_unlocked>:
 802d140:	4b01      	ldr	r3, [pc, #4]	@ (802d148 <_tzset_unlocked+0x8>)
 802d142:	6818      	ldr	r0, [r3, #0]
 802d144:	f000 b802 	b.w	802d14c <_tzset_unlocked_r>
 802d148:	200002d8 	.word	0x200002d8

0802d14c <_tzset_unlocked_r>:
 802d14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d150:	b08d      	sub	sp, #52	@ 0x34
 802d152:	4607      	mov	r7, r0
 802d154:	f007 fbe6 	bl	8034924 <__gettzinfo>
 802d158:	49bc      	ldr	r1, [pc, #752]	@ (802d44c <_tzset_unlocked_r+0x300>)
 802d15a:	4dbd      	ldr	r5, [pc, #756]	@ (802d450 <_tzset_unlocked_r+0x304>)
 802d15c:	4604      	mov	r4, r0
 802d15e:	4638      	mov	r0, r7
 802d160:	f001 fac8 	bl	802e6f4 <_getenv_r>
 802d164:	4606      	mov	r6, r0
 802d166:	bb10      	cbnz	r0, 802d1ae <_tzset_unlocked_r+0x62>
 802d168:	4bba      	ldr	r3, [pc, #744]	@ (802d454 <_tzset_unlocked_r+0x308>)
 802d16a:	4abb      	ldr	r2, [pc, #748]	@ (802d458 <_tzset_unlocked_r+0x30c>)
 802d16c:	6018      	str	r0, [r3, #0]
 802d16e:	4bbb      	ldr	r3, [pc, #748]	@ (802d45c <_tzset_unlocked_r+0x310>)
 802d170:	62a0      	str	r0, [r4, #40]	@ 0x28
 802d172:	6018      	str	r0, [r3, #0]
 802d174:	4bba      	ldr	r3, [pc, #744]	@ (802d460 <_tzset_unlocked_r+0x314>)
 802d176:	6520      	str	r0, [r4, #80]	@ 0x50
 802d178:	e9c3 2200 	strd	r2, r2, [r3]
 802d17c:	214a      	movs	r1, #74	@ 0x4a
 802d17e:	2200      	movs	r2, #0
 802d180:	2300      	movs	r3, #0
 802d182:	e9c4 0003 	strd	r0, r0, [r4, #12]
 802d186:	e9c4 0005 	strd	r0, r0, [r4, #20]
 802d18a:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 802d18e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 802d192:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802d196:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802d19a:	6828      	ldr	r0, [r5, #0]
 802d19c:	7221      	strb	r1, [r4, #8]
 802d19e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802d1a2:	f001 fabb 	bl	802e71c <free>
 802d1a6:	602e      	str	r6, [r5, #0]
 802d1a8:	b00d      	add	sp, #52	@ 0x34
 802d1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d1ae:	6829      	ldr	r1, [r5, #0]
 802d1b0:	2900      	cmp	r1, #0
 802d1b2:	f040 808e 	bne.w	802d2d2 <_tzset_unlocked_r+0x186>
 802d1b6:	6828      	ldr	r0, [r5, #0]
 802d1b8:	f001 fab0 	bl	802e71c <free>
 802d1bc:	4630      	mov	r0, r6
 802d1be:	f7e3 f86f 	bl	80102a0 <strlen>
 802d1c2:	1c41      	adds	r1, r0, #1
 802d1c4:	4638      	mov	r0, r7
 802d1c6:	f001 fab1 	bl	802e72c <_malloc_r>
 802d1ca:	6028      	str	r0, [r5, #0]
 802d1cc:	2800      	cmp	r0, #0
 802d1ce:	f040 8086 	bne.w	802d2de <_tzset_unlocked_r+0x192>
 802d1d2:	4aa2      	ldr	r2, [pc, #648]	@ (802d45c <_tzset_unlocked_r+0x310>)
 802d1d4:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 802d460 <_tzset_unlocked_r+0x314>
 802d1d8:	f8df a278 	ldr.w	sl, [pc, #632]	@ 802d454 <_tzset_unlocked_r+0x308>
 802d1dc:	2300      	movs	r3, #0
 802d1de:	6013      	str	r3, [r2, #0]
 802d1e0:	4aa0      	ldr	r2, [pc, #640]	@ (802d464 <_tzset_unlocked_r+0x318>)
 802d1e2:	f8ca 3000 	str.w	r3, [sl]
 802d1e6:	2000      	movs	r0, #0
 802d1e8:	2100      	movs	r1, #0
 802d1ea:	e9c8 2200 	strd	r2, r2, [r8]
 802d1ee:	e9c4 3303 	strd	r3, r3, [r4, #12]
 802d1f2:	e9c4 3305 	strd	r3, r3, [r4, #20]
 802d1f6:	e9c4 0108 	strd	r0, r1, [r4, #32]
 802d1fa:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 802d1fe:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 802d202:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 802d206:	224a      	movs	r2, #74	@ 0x4a
 802d208:	7222      	strb	r2, [r4, #8]
 802d20a:	62a3      	str	r3, [r4, #40]	@ 0x28
 802d20c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 802d210:	6523      	str	r3, [r4, #80]	@ 0x50
 802d212:	7833      	ldrb	r3, [r6, #0]
 802d214:	2b3a      	cmp	r3, #58	@ 0x3a
 802d216:	bf08      	it	eq
 802d218:	3601      	addeq	r6, #1
 802d21a:	7833      	ldrb	r3, [r6, #0]
 802d21c:	2b3c      	cmp	r3, #60	@ 0x3c
 802d21e:	d162      	bne.n	802d2e6 <_tzset_unlocked_r+0x19a>
 802d220:	1c75      	adds	r5, r6, #1
 802d222:	4a91      	ldr	r2, [pc, #580]	@ (802d468 <_tzset_unlocked_r+0x31c>)
 802d224:	4991      	ldr	r1, [pc, #580]	@ (802d46c <_tzset_unlocked_r+0x320>)
 802d226:	ab0a      	add	r3, sp, #40	@ 0x28
 802d228:	4628      	mov	r0, r5
 802d22a:	f001 fccb 	bl	802ebc4 <siscanf>
 802d22e:	2800      	cmp	r0, #0
 802d230:	ddba      	ble.n	802d1a8 <_tzset_unlocked_r+0x5c>
 802d232:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d234:	1eda      	subs	r2, r3, #3
 802d236:	2a07      	cmp	r2, #7
 802d238:	d8b6      	bhi.n	802d1a8 <_tzset_unlocked_r+0x5c>
 802d23a:	5ceb      	ldrb	r3, [r5, r3]
 802d23c:	2b3e      	cmp	r3, #62	@ 0x3e
 802d23e:	d1b3      	bne.n	802d1a8 <_tzset_unlocked_r+0x5c>
 802d240:	3602      	adds	r6, #2
 802d242:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d244:	18f5      	adds	r5, r6, r3
 802d246:	5cf3      	ldrb	r3, [r6, r3]
 802d248:	2b2d      	cmp	r3, #45	@ 0x2d
 802d24a:	d15a      	bne.n	802d302 <_tzset_unlocked_r+0x1b6>
 802d24c:	3501      	adds	r5, #1
 802d24e:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802d252:	2300      	movs	r3, #0
 802d254:	f8ad 301e 	strh.w	r3, [sp, #30]
 802d258:	f8ad 3020 	strh.w	r3, [sp, #32]
 802d25c:	af08      	add	r7, sp, #32
 802d25e:	ab0a      	add	r3, sp, #40	@ 0x28
 802d260:	e9cd 3701 	strd	r3, r7, [sp, #4]
 802d264:	9303      	str	r3, [sp, #12]
 802d266:	f10d 031e 	add.w	r3, sp, #30
 802d26a:	9300      	str	r3, [sp, #0]
 802d26c:	4980      	ldr	r1, [pc, #512]	@ (802d470 <_tzset_unlocked_r+0x324>)
 802d26e:	ab0a      	add	r3, sp, #40	@ 0x28
 802d270:	aa07      	add	r2, sp, #28
 802d272:	4628      	mov	r0, r5
 802d274:	f001 fca6 	bl	802ebc4 <siscanf>
 802d278:	2800      	cmp	r0, #0
 802d27a:	dd95      	ble.n	802d1a8 <_tzset_unlocked_r+0x5c>
 802d27c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802d280:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 802d284:	223c      	movs	r2, #60	@ 0x3c
 802d286:	fb02 6603 	mla	r6, r2, r3, r6
 802d28a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802d28e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802d292:	fb02 6603 	mla	r6, r2, r3, r6
 802d296:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d298:	fb09 f606 	mul.w	r6, r9, r6
 802d29c:	eb05 0903 	add.w	r9, r5, r3
 802d2a0:	5ceb      	ldrb	r3, [r5, r3]
 802d2a2:	2b3c      	cmp	r3, #60	@ 0x3c
 802d2a4:	f040 80ee 	bne.w	802d484 <_tzset_unlocked_r+0x338>
 802d2a8:	f109 0501 	add.w	r5, r9, #1
 802d2ac:	4a71      	ldr	r2, [pc, #452]	@ (802d474 <_tzset_unlocked_r+0x328>)
 802d2ae:	496f      	ldr	r1, [pc, #444]	@ (802d46c <_tzset_unlocked_r+0x320>)
 802d2b0:	ab0a      	add	r3, sp, #40	@ 0x28
 802d2b2:	4628      	mov	r0, r5
 802d2b4:	f001 fc86 	bl	802ebc4 <siscanf>
 802d2b8:	2800      	cmp	r0, #0
 802d2ba:	dc28      	bgt.n	802d30e <_tzset_unlocked_r+0x1c2>
 802d2bc:	f899 3001 	ldrb.w	r3, [r9, #1]
 802d2c0:	2b3e      	cmp	r3, #62	@ 0x3e
 802d2c2:	d124      	bne.n	802d30e <_tzset_unlocked_r+0x1c2>
 802d2c4:	4b68      	ldr	r3, [pc, #416]	@ (802d468 <_tzset_unlocked_r+0x31c>)
 802d2c6:	62a6      	str	r6, [r4, #40]	@ 0x28
 802d2c8:	e9c8 3300 	strd	r3, r3, [r8]
 802d2cc:	f8ca 6000 	str.w	r6, [sl]
 802d2d0:	e76a      	b.n	802d1a8 <_tzset_unlocked_r+0x5c>
 802d2d2:	f7e2 ff85 	bl	80101e0 <strcmp>
 802d2d6:	2800      	cmp	r0, #0
 802d2d8:	f47f af6d 	bne.w	802d1b6 <_tzset_unlocked_r+0x6a>
 802d2dc:	e764      	b.n	802d1a8 <_tzset_unlocked_r+0x5c>
 802d2de:	4631      	mov	r1, r6
 802d2e0:	f000 f9d8 	bl	802d694 <strcpy>
 802d2e4:	e775      	b.n	802d1d2 <_tzset_unlocked_r+0x86>
 802d2e6:	4a60      	ldr	r2, [pc, #384]	@ (802d468 <_tzset_unlocked_r+0x31c>)
 802d2e8:	4963      	ldr	r1, [pc, #396]	@ (802d478 <_tzset_unlocked_r+0x32c>)
 802d2ea:	ab0a      	add	r3, sp, #40	@ 0x28
 802d2ec:	4630      	mov	r0, r6
 802d2ee:	f001 fc69 	bl	802ebc4 <siscanf>
 802d2f2:	2800      	cmp	r0, #0
 802d2f4:	f77f af58 	ble.w	802d1a8 <_tzset_unlocked_r+0x5c>
 802d2f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d2fa:	3b03      	subs	r3, #3
 802d2fc:	2b07      	cmp	r3, #7
 802d2fe:	d9a0      	bls.n	802d242 <_tzset_unlocked_r+0xf6>
 802d300:	e752      	b.n	802d1a8 <_tzset_unlocked_r+0x5c>
 802d302:	2b2b      	cmp	r3, #43	@ 0x2b
 802d304:	bf08      	it	eq
 802d306:	3501      	addeq	r5, #1
 802d308:	f04f 0901 	mov.w	r9, #1
 802d30c:	e7a1      	b.n	802d252 <_tzset_unlocked_r+0x106>
 802d30e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d310:	1eda      	subs	r2, r3, #3
 802d312:	2a07      	cmp	r2, #7
 802d314:	f63f af48 	bhi.w	802d1a8 <_tzset_unlocked_r+0x5c>
 802d318:	5ceb      	ldrb	r3, [r5, r3]
 802d31a:	2b3e      	cmp	r3, #62	@ 0x3e
 802d31c:	f47f af44 	bne.w	802d1a8 <_tzset_unlocked_r+0x5c>
 802d320:	f109 0902 	add.w	r9, r9, #2
 802d324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d326:	eb09 0503 	add.w	r5, r9, r3
 802d32a:	f819 3003 	ldrb.w	r3, [r9, r3]
 802d32e:	2b2d      	cmp	r3, #45	@ 0x2d
 802d330:	f040 80b7 	bne.w	802d4a2 <_tzset_unlocked_r+0x356>
 802d334:	3501      	adds	r5, #1
 802d336:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802d33a:	2300      	movs	r3, #0
 802d33c:	f8ad 301c 	strh.w	r3, [sp, #28]
 802d340:	f8ad 301e 	strh.w	r3, [sp, #30]
 802d344:	f8ad 3020 	strh.w	r3, [sp, #32]
 802d348:	930a      	str	r3, [sp, #40]	@ 0x28
 802d34a:	ab0a      	add	r3, sp, #40	@ 0x28
 802d34c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 802d350:	9301      	str	r3, [sp, #4]
 802d352:	f10d 031e 	add.w	r3, sp, #30
 802d356:	9300      	str	r3, [sp, #0]
 802d358:	4945      	ldr	r1, [pc, #276]	@ (802d470 <_tzset_unlocked_r+0x324>)
 802d35a:	ab0a      	add	r3, sp, #40	@ 0x28
 802d35c:	aa07      	add	r2, sp, #28
 802d35e:	4628      	mov	r0, r5
 802d360:	f001 fc30 	bl	802ebc4 <siscanf>
 802d364:	2800      	cmp	r0, #0
 802d366:	f300 80a2 	bgt.w	802d4ae <_tzset_unlocked_r+0x362>
 802d36a:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 802d36e:	9304      	str	r3, [sp, #16]
 802d370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d372:	4627      	mov	r7, r4
 802d374:	441d      	add	r5, r3
 802d376:	f04f 0b00 	mov.w	fp, #0
 802d37a:	782b      	ldrb	r3, [r5, #0]
 802d37c:	2b2c      	cmp	r3, #44	@ 0x2c
 802d37e:	bf08      	it	eq
 802d380:	3501      	addeq	r5, #1
 802d382:	f895 9000 	ldrb.w	r9, [r5]
 802d386:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 802d38a:	f040 80a3 	bne.w	802d4d4 <_tzset_unlocked_r+0x388>
 802d38e:	ab0a      	add	r3, sp, #40	@ 0x28
 802d390:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 802d394:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802d398:	aa09      	add	r2, sp, #36	@ 0x24
 802d39a:	9200      	str	r2, [sp, #0]
 802d39c:	4937      	ldr	r1, [pc, #220]	@ (802d47c <_tzset_unlocked_r+0x330>)
 802d39e:	9303      	str	r3, [sp, #12]
 802d3a0:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 802d3a4:	4628      	mov	r0, r5
 802d3a6:	f001 fc0d 	bl	802ebc4 <siscanf>
 802d3aa:	2803      	cmp	r0, #3
 802d3ac:	f47f aefc 	bne.w	802d1a8 <_tzset_unlocked_r+0x5c>
 802d3b0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 802d3b4:	1e4b      	subs	r3, r1, #1
 802d3b6:	2b0b      	cmp	r3, #11
 802d3b8:	f63f aef6 	bhi.w	802d1a8 <_tzset_unlocked_r+0x5c>
 802d3bc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 802d3c0:	1e53      	subs	r3, r2, #1
 802d3c2:	2b04      	cmp	r3, #4
 802d3c4:	f63f aef0 	bhi.w	802d1a8 <_tzset_unlocked_r+0x5c>
 802d3c8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 802d3cc:	2b06      	cmp	r3, #6
 802d3ce:	f63f aeeb 	bhi.w	802d1a8 <_tzset_unlocked_r+0x5c>
 802d3d2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802d3d6:	f887 9008 	strb.w	r9, [r7, #8]
 802d3da:	617b      	str	r3, [r7, #20]
 802d3dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d3de:	eb05 0903 	add.w	r9, r5, r3
 802d3e2:	2500      	movs	r5, #0
 802d3e4:	f04f 0302 	mov.w	r3, #2
 802d3e8:	f8ad 301c 	strh.w	r3, [sp, #28]
 802d3ec:	f8ad 501e 	strh.w	r5, [sp, #30]
 802d3f0:	f8ad 5020 	strh.w	r5, [sp, #32]
 802d3f4:	950a      	str	r5, [sp, #40]	@ 0x28
 802d3f6:	f899 3000 	ldrb.w	r3, [r9]
 802d3fa:	2b2f      	cmp	r3, #47	@ 0x2f
 802d3fc:	f040 8096 	bne.w	802d52c <_tzset_unlocked_r+0x3e0>
 802d400:	ab0a      	add	r3, sp, #40	@ 0x28
 802d402:	aa08      	add	r2, sp, #32
 802d404:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802d408:	f10d 021e 	add.w	r2, sp, #30
 802d40c:	9200      	str	r2, [sp, #0]
 802d40e:	491c      	ldr	r1, [pc, #112]	@ (802d480 <_tzset_unlocked_r+0x334>)
 802d410:	9303      	str	r3, [sp, #12]
 802d412:	aa07      	add	r2, sp, #28
 802d414:	4648      	mov	r0, r9
 802d416:	f001 fbd5 	bl	802ebc4 <siscanf>
 802d41a:	42a8      	cmp	r0, r5
 802d41c:	f300 8086 	bgt.w	802d52c <_tzset_unlocked_r+0x3e0>
 802d420:	214a      	movs	r1, #74	@ 0x4a
 802d422:	2200      	movs	r2, #0
 802d424:	2300      	movs	r3, #0
 802d426:	e9c4 5503 	strd	r5, r5, [r4, #12]
 802d42a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802d42e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802d432:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 802d436:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 802d43a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802d43e:	7221      	strb	r1, [r4, #8]
 802d440:	62a5      	str	r5, [r4, #40]	@ 0x28
 802d442:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802d446:	6525      	str	r5, [r4, #80]	@ 0x50
 802d448:	e6ae      	b.n	802d1a8 <_tzset_unlocked_r+0x5c>
 802d44a:	bf00      	nop
 802d44c:	0803b148 	.word	0x0803b148
 802d450:	2001a008 	.word	0x2001a008
 802d454:	2001a024 	.word	0x2001a024
 802d458:	0803b14b 	.word	0x0803b14b
 802d45c:	2001a028 	.word	0x2001a028
 802d460:	20000164 	.word	0x20000164
 802d464:	0803b00a 	.word	0x0803b00a
 802d468:	2001a018 	.word	0x2001a018
 802d46c:	0803b14f 	.word	0x0803b14f
 802d470:	0803b184 	.word	0x0803b184
 802d474:	2001a00c 	.word	0x2001a00c
 802d478:	0803b162 	.word	0x0803b162
 802d47c:	0803b170 	.word	0x0803b170
 802d480:	0803b183 	.word	0x0803b183
 802d484:	4a3e      	ldr	r2, [pc, #248]	@ (802d580 <_tzset_unlocked_r+0x434>)
 802d486:	493f      	ldr	r1, [pc, #252]	@ (802d584 <_tzset_unlocked_r+0x438>)
 802d488:	ab0a      	add	r3, sp, #40	@ 0x28
 802d48a:	4648      	mov	r0, r9
 802d48c:	f001 fb9a 	bl	802ebc4 <siscanf>
 802d490:	2800      	cmp	r0, #0
 802d492:	f77f af17 	ble.w	802d2c4 <_tzset_unlocked_r+0x178>
 802d496:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d498:	3b03      	subs	r3, #3
 802d49a:	2b07      	cmp	r3, #7
 802d49c:	f67f af42 	bls.w	802d324 <_tzset_unlocked_r+0x1d8>
 802d4a0:	e682      	b.n	802d1a8 <_tzset_unlocked_r+0x5c>
 802d4a2:	2b2b      	cmp	r3, #43	@ 0x2b
 802d4a4:	bf08      	it	eq
 802d4a6:	3501      	addeq	r5, #1
 802d4a8:	f04f 0901 	mov.w	r9, #1
 802d4ac:	e745      	b.n	802d33a <_tzset_unlocked_r+0x1ee>
 802d4ae:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802d4b2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802d4b6:	213c      	movs	r1, #60	@ 0x3c
 802d4b8:	fb01 3302 	mla	r3, r1, r2, r3
 802d4bc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802d4c0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802d4c4:	fb01 3302 	mla	r3, r1, r2, r3
 802d4c8:	fb09 f303 	mul.w	r3, r9, r3
 802d4cc:	e74f      	b.n	802d36e <_tzset_unlocked_r+0x222>
 802d4ce:	f04f 0b01 	mov.w	fp, #1
 802d4d2:	e752      	b.n	802d37a <_tzset_unlocked_r+0x22e>
 802d4d4:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 802d4d8:	bf06      	itte	eq
 802d4da:	3501      	addeq	r5, #1
 802d4dc:	464b      	moveq	r3, r9
 802d4de:	2344      	movne	r3, #68	@ 0x44
 802d4e0:	220a      	movs	r2, #10
 802d4e2:	a90b      	add	r1, sp, #44	@ 0x2c
 802d4e4:	4628      	mov	r0, r5
 802d4e6:	9305      	str	r3, [sp, #20]
 802d4e8:	f007 f950 	bl	803478c <strtoul>
 802d4ec:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 802d4f0:	9b05      	ldr	r3, [sp, #20]
 802d4f2:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 802d4f6:	45a9      	cmp	r9, r5
 802d4f8:	d114      	bne.n	802d524 <_tzset_unlocked_r+0x3d8>
 802d4fa:	234d      	movs	r3, #77	@ 0x4d
 802d4fc:	f1bb 0f00 	cmp.w	fp, #0
 802d500:	d107      	bne.n	802d512 <_tzset_unlocked_r+0x3c6>
 802d502:	7223      	strb	r3, [r4, #8]
 802d504:	2103      	movs	r1, #3
 802d506:	2302      	movs	r3, #2
 802d508:	e9c4 1303 	strd	r1, r3, [r4, #12]
 802d50c:	f8c4 b014 	str.w	fp, [r4, #20]
 802d510:	e767      	b.n	802d3e2 <_tzset_unlocked_r+0x296>
 802d512:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 802d516:	220b      	movs	r2, #11
 802d518:	2301      	movs	r3, #1
 802d51a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 802d51e:	2300      	movs	r3, #0
 802d520:	63e3      	str	r3, [r4, #60]	@ 0x3c
 802d522:	e75e      	b.n	802d3e2 <_tzset_unlocked_r+0x296>
 802d524:	b280      	uxth	r0, r0
 802d526:	723b      	strb	r3, [r7, #8]
 802d528:	6178      	str	r0, [r7, #20]
 802d52a:	e75a      	b.n	802d3e2 <_tzset_unlocked_r+0x296>
 802d52c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802d530:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802d534:	213c      	movs	r1, #60	@ 0x3c
 802d536:	fb01 3302 	mla	r3, r1, r2, r3
 802d53a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802d53e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802d542:	fb01 3302 	mla	r3, r1, r2, r3
 802d546:	61bb      	str	r3, [r7, #24]
 802d548:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802d54a:	3728      	adds	r7, #40	@ 0x28
 802d54c:	444d      	add	r5, r9
 802d54e:	f1bb 0f00 	cmp.w	fp, #0
 802d552:	d0bc      	beq.n	802d4ce <_tzset_unlocked_r+0x382>
 802d554:	9b04      	ldr	r3, [sp, #16]
 802d556:	6523      	str	r3, [r4, #80]	@ 0x50
 802d558:	4b0b      	ldr	r3, [pc, #44]	@ (802d588 <_tzset_unlocked_r+0x43c>)
 802d55a:	f8c8 3000 	str.w	r3, [r8]
 802d55e:	6860      	ldr	r0, [r4, #4]
 802d560:	4b07      	ldr	r3, [pc, #28]	@ (802d580 <_tzset_unlocked_r+0x434>)
 802d562:	62a6      	str	r6, [r4, #40]	@ 0x28
 802d564:	f8c8 3004 	str.w	r3, [r8, #4]
 802d568:	f7ff fd34 	bl	802cfd4 <__tzcalc_limits>
 802d56c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 802d56e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802d570:	f8ca 2000 	str.w	r2, [sl]
 802d574:	1a9b      	subs	r3, r3, r2
 802d576:	4a05      	ldr	r2, [pc, #20]	@ (802d58c <_tzset_unlocked_r+0x440>)
 802d578:	bf18      	it	ne
 802d57a:	2301      	movne	r3, #1
 802d57c:	6013      	str	r3, [r2, #0]
 802d57e:	e613      	b.n	802d1a8 <_tzset_unlocked_r+0x5c>
 802d580:	2001a00c 	.word	0x2001a00c
 802d584:	0803b162 	.word	0x0803b162
 802d588:	2001a018 	.word	0x2001a018
 802d58c:	2001a028 	.word	0x2001a028

0802d590 <__locale_mb_cur_max>:
 802d590:	4b01      	ldr	r3, [pc, #4]	@ (802d598 <__locale_mb_cur_max+0x8>)
 802d592:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 802d596:	4770      	bx	lr
 802d598:	2000016c 	.word	0x2000016c

0802d59c <_localeconv_r>:
 802d59c:	4800      	ldr	r0, [pc, #0]	@ (802d5a0 <_localeconv_r+0x4>)
 802d59e:	4770      	bx	lr
 802d5a0:	2000025c 	.word	0x2000025c

0802d5a4 <_close_r>:
 802d5a4:	b538      	push	{r3, r4, r5, lr}
 802d5a6:	4d06      	ldr	r5, [pc, #24]	@ (802d5c0 <_close_r+0x1c>)
 802d5a8:	2300      	movs	r3, #0
 802d5aa:	4604      	mov	r4, r0
 802d5ac:	4608      	mov	r0, r1
 802d5ae:	602b      	str	r3, [r5, #0]
 802d5b0:	f7e4 feea 	bl	8012388 <_close>
 802d5b4:	1c43      	adds	r3, r0, #1
 802d5b6:	d102      	bne.n	802d5be <_close_r+0x1a>
 802d5b8:	682b      	ldr	r3, [r5, #0]
 802d5ba:	b103      	cbz	r3, 802d5be <_close_r+0x1a>
 802d5bc:	6023      	str	r3, [r4, #0]
 802d5be:	bd38      	pop	{r3, r4, r5, pc}
 802d5c0:	2001a02c 	.word	0x2001a02c

0802d5c4 <_reclaim_reent>:
 802d5c4:	4b14      	ldr	r3, [pc, #80]	@ (802d618 <_reclaim_reent+0x54>)
 802d5c6:	681b      	ldr	r3, [r3, #0]
 802d5c8:	4283      	cmp	r3, r0
 802d5ca:	b570      	push	{r4, r5, r6, lr}
 802d5cc:	4604      	mov	r4, r0
 802d5ce:	d022      	beq.n	802d616 <_reclaim_reent+0x52>
 802d5d0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802d5d2:	b153      	cbz	r3, 802d5ea <_reclaim_reent+0x26>
 802d5d4:	2500      	movs	r5, #0
 802d5d6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 802d5d8:	5959      	ldr	r1, [r3, r5]
 802d5da:	b9b1      	cbnz	r1, 802d60a <_reclaim_reent+0x46>
 802d5dc:	3504      	adds	r5, #4
 802d5de:	2d80      	cmp	r5, #128	@ 0x80
 802d5e0:	d1f9      	bne.n	802d5d6 <_reclaim_reent+0x12>
 802d5e2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802d5e4:	4620      	mov	r0, r4
 802d5e6:	f000 ff89 	bl	802e4fc <_free_r>
 802d5ea:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802d5ec:	b111      	cbz	r1, 802d5f4 <_reclaim_reent+0x30>
 802d5ee:	4620      	mov	r0, r4
 802d5f0:	f000 ff84 	bl	802e4fc <_free_r>
 802d5f4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 802d5f6:	b111      	cbz	r1, 802d5fe <_reclaim_reent+0x3a>
 802d5f8:	4620      	mov	r0, r4
 802d5fa:	f000 ff7f 	bl	802e4fc <_free_r>
 802d5fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802d600:	b14b      	cbz	r3, 802d616 <_reclaim_reent+0x52>
 802d602:	4620      	mov	r0, r4
 802d604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802d608:	4718      	bx	r3
 802d60a:	680e      	ldr	r6, [r1, #0]
 802d60c:	4620      	mov	r0, r4
 802d60e:	f000 ff75 	bl	802e4fc <_free_r>
 802d612:	4631      	mov	r1, r6
 802d614:	e7e1      	b.n	802d5da <_reclaim_reent+0x16>
 802d616:	bd70      	pop	{r4, r5, r6, pc}
 802d618:	200002d8 	.word	0x200002d8

0802d61c <_lseek_r>:
 802d61c:	b538      	push	{r3, r4, r5, lr}
 802d61e:	4d07      	ldr	r5, [pc, #28]	@ (802d63c <_lseek_r+0x20>)
 802d620:	4604      	mov	r4, r0
 802d622:	4608      	mov	r0, r1
 802d624:	4611      	mov	r1, r2
 802d626:	2200      	movs	r2, #0
 802d628:	602a      	str	r2, [r5, #0]
 802d62a:	461a      	mov	r2, r3
 802d62c:	f7e4 feb6 	bl	801239c <_lseek>
 802d630:	1c43      	adds	r3, r0, #1
 802d632:	d102      	bne.n	802d63a <_lseek_r+0x1e>
 802d634:	682b      	ldr	r3, [r5, #0]
 802d636:	b103      	cbz	r3, 802d63a <_lseek_r+0x1e>
 802d638:	6023      	str	r3, [r4, #0]
 802d63a:	bd38      	pop	{r3, r4, r5, pc}
 802d63c:	2001a02c 	.word	0x2001a02c

0802d640 <_read_r>:
 802d640:	b538      	push	{r3, r4, r5, lr}
 802d642:	4d07      	ldr	r5, [pc, #28]	@ (802d660 <_read_r+0x20>)
 802d644:	4604      	mov	r4, r0
 802d646:	4608      	mov	r0, r1
 802d648:	4611      	mov	r1, r2
 802d64a:	2200      	movs	r2, #0
 802d64c:	602a      	str	r2, [r5, #0]
 802d64e:	461a      	mov	r2, r3
 802d650:	f7e4 fe7c 	bl	801234c <_read>
 802d654:	1c43      	adds	r3, r0, #1
 802d656:	d102      	bne.n	802d65e <_read_r+0x1e>
 802d658:	682b      	ldr	r3, [r5, #0]
 802d65a:	b103      	cbz	r3, 802d65e <_read_r+0x1e>
 802d65c:	6023      	str	r3, [r4, #0]
 802d65e:	bd38      	pop	{r3, r4, r5, pc}
 802d660:	2001a02c 	.word	0x2001a02c

0802d664 <_write_r>:
 802d664:	b538      	push	{r3, r4, r5, lr}
 802d666:	4d07      	ldr	r5, [pc, #28]	@ (802d684 <_write_r+0x20>)
 802d668:	4604      	mov	r4, r0
 802d66a:	4608      	mov	r0, r1
 802d66c:	4611      	mov	r1, r2
 802d66e:	2200      	movs	r2, #0
 802d670:	602a      	str	r2, [r5, #0]
 802d672:	461a      	mov	r2, r3
 802d674:	f7e4 fe7a 	bl	801236c <_write>
 802d678:	1c43      	adds	r3, r0, #1
 802d67a:	d102      	bne.n	802d682 <_write_r+0x1e>
 802d67c:	682b      	ldr	r3, [r5, #0]
 802d67e:	b103      	cbz	r3, 802d682 <_write_r+0x1e>
 802d680:	6023      	str	r3, [r4, #0]
 802d682:	bd38      	pop	{r3, r4, r5, pc}
 802d684:	2001a02c 	.word	0x2001a02c

0802d688 <__errno>:
 802d688:	4b01      	ldr	r3, [pc, #4]	@ (802d690 <__errno+0x8>)
 802d68a:	6818      	ldr	r0, [r3, #0]
 802d68c:	4770      	bx	lr
 802d68e:	bf00      	nop
 802d690:	200002d8 	.word	0x200002d8

0802d694 <strcpy>:
 802d694:	4603      	mov	r3, r0
 802d696:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d69a:	f803 2b01 	strb.w	r2, [r3], #1
 802d69e:	2a00      	cmp	r2, #0
 802d6a0:	d1f9      	bne.n	802d696 <strcpy+0x2>
 802d6a2:	4770      	bx	lr

0802d6a4 <__libc_init_array>:
 802d6a4:	b570      	push	{r4, r5, r6, lr}
 802d6a6:	4d0d      	ldr	r5, [pc, #52]	@ (802d6dc <__libc_init_array+0x38>)
 802d6a8:	4c0d      	ldr	r4, [pc, #52]	@ (802d6e0 <__libc_init_array+0x3c>)
 802d6aa:	1b64      	subs	r4, r4, r5
 802d6ac:	10a4      	asrs	r4, r4, #2
 802d6ae:	2600      	movs	r6, #0
 802d6b0:	42a6      	cmp	r6, r4
 802d6b2:	d109      	bne.n	802d6c8 <__libc_init_array+0x24>
 802d6b4:	4d0b      	ldr	r5, [pc, #44]	@ (802d6e4 <__libc_init_array+0x40>)
 802d6b6:	4c0c      	ldr	r4, [pc, #48]	@ (802d6e8 <__libc_init_array+0x44>)
 802d6b8:	f007 ff60 	bl	803557c <_init>
 802d6bc:	1b64      	subs	r4, r4, r5
 802d6be:	10a4      	asrs	r4, r4, #2
 802d6c0:	2600      	movs	r6, #0
 802d6c2:	42a6      	cmp	r6, r4
 802d6c4:	d105      	bne.n	802d6d2 <__libc_init_array+0x2e>
 802d6c6:	bd70      	pop	{r4, r5, r6, pc}
 802d6c8:	f855 3b04 	ldr.w	r3, [r5], #4
 802d6cc:	4798      	blx	r3
 802d6ce:	3601      	adds	r6, #1
 802d6d0:	e7ee      	b.n	802d6b0 <__libc_init_array+0xc>
 802d6d2:	f855 3b04 	ldr.w	r3, [r5], #4
 802d6d6:	4798      	blx	r3
 802d6d8:	3601      	adds	r6, #1
 802d6da:	e7f2      	b.n	802d6c2 <__libc_init_array+0x1e>
 802d6dc:	0803b7d8 	.word	0x0803b7d8
 802d6e0:	0803b7d8 	.word	0x0803b7d8
 802d6e4:	0803b7d8 	.word	0x0803b7d8
 802d6e8:	0803b7e0 	.word	0x0803b7e0

0802d6ec <__retarget_lock_init_recursive>:
 802d6ec:	4770      	bx	lr

0802d6ee <__retarget_lock_close_recursive>:
 802d6ee:	4770      	bx	lr

0802d6f0 <__retarget_lock_acquire>:
 802d6f0:	4770      	bx	lr

0802d6f2 <__retarget_lock_acquire_recursive>:
 802d6f2:	4770      	bx	lr

0802d6f4 <__retarget_lock_release>:
 802d6f4:	4770      	bx	lr

0802d6f6 <__retarget_lock_release_recursive>:
 802d6f6:	4770      	bx	lr

0802d6f8 <memcpy>:
 802d6f8:	440a      	add	r2, r1
 802d6fa:	4291      	cmp	r1, r2
 802d6fc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802d700:	d100      	bne.n	802d704 <memcpy+0xc>
 802d702:	4770      	bx	lr
 802d704:	b510      	push	{r4, lr}
 802d706:	f811 4b01 	ldrb.w	r4, [r1], #1
 802d70a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802d70e:	4291      	cmp	r1, r2
 802d710:	d1f9      	bne.n	802d706 <memcpy+0xe>
 802d712:	bd10      	pop	{r4, pc}

0802d714 <_wcrtomb_r>:
 802d714:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d716:	4c09      	ldr	r4, [pc, #36]	@ (802d73c <_wcrtomb_r+0x28>)
 802d718:	b085      	sub	sp, #20
 802d71a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 802d71e:	4605      	mov	r5, r0
 802d720:	461e      	mov	r6, r3
 802d722:	b909      	cbnz	r1, 802d728 <_wcrtomb_r+0x14>
 802d724:	460a      	mov	r2, r1
 802d726:	a901      	add	r1, sp, #4
 802d728:	47b8      	blx	r7
 802d72a:	1c43      	adds	r3, r0, #1
 802d72c:	bf01      	itttt	eq
 802d72e:	2300      	moveq	r3, #0
 802d730:	6033      	streq	r3, [r6, #0]
 802d732:	238a      	moveq	r3, #138	@ 0x8a
 802d734:	602b      	streq	r3, [r5, #0]
 802d736:	b005      	add	sp, #20
 802d738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d73a:	bf00      	nop
 802d73c:	2000016c 	.word	0x2000016c

0802d740 <frexp>:
 802d740:	b570      	push	{r4, r5, r6, lr}
 802d742:	2100      	movs	r1, #0
 802d744:	ec55 4b10 	vmov	r4, r5, d0
 802d748:	6001      	str	r1, [r0, #0]
 802d74a:	4915      	ldr	r1, [pc, #84]	@ (802d7a0 <frexp+0x60>)
 802d74c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 802d750:	428a      	cmp	r2, r1
 802d752:	4606      	mov	r6, r0
 802d754:	462b      	mov	r3, r5
 802d756:	d820      	bhi.n	802d79a <frexp+0x5a>
 802d758:	4621      	mov	r1, r4
 802d75a:	4311      	orrs	r1, r2
 802d75c:	d01d      	beq.n	802d79a <frexp+0x5a>
 802d75e:	4911      	ldr	r1, [pc, #68]	@ (802d7a4 <frexp+0x64>)
 802d760:	4029      	ands	r1, r5
 802d762:	b961      	cbnz	r1, 802d77e <frexp+0x3e>
 802d764:	4b10      	ldr	r3, [pc, #64]	@ (802d7a8 <frexp+0x68>)
 802d766:	2200      	movs	r2, #0
 802d768:	4620      	mov	r0, r4
 802d76a:	4629      	mov	r1, r5
 802d76c:	f7e2 ff5c 	bl	8010628 <__aeabi_dmul>
 802d770:	460b      	mov	r3, r1
 802d772:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 802d776:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 802d77a:	4604      	mov	r4, r0
 802d77c:	6031      	str	r1, [r6, #0]
 802d77e:	6831      	ldr	r1, [r6, #0]
 802d780:	1512      	asrs	r2, r2, #20
 802d782:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802d786:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 802d78a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 802d78e:	4411      	add	r1, r2
 802d790:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 802d794:	6031      	str	r1, [r6, #0]
 802d796:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 802d79a:	ec45 4b10 	vmov	d0, r4, r5
 802d79e:	bd70      	pop	{r4, r5, r6, pc}
 802d7a0:	7fefffff 	.word	0x7fefffff
 802d7a4:	7ff00000 	.word	0x7ff00000
 802d7a8:	43500000 	.word	0x43500000

0802d7ac <register_fini>:
 802d7ac:	4b02      	ldr	r3, [pc, #8]	@ (802d7b8 <register_fini+0xc>)
 802d7ae:	b113      	cbz	r3, 802d7b6 <register_fini+0xa>
 802d7b0:	4802      	ldr	r0, [pc, #8]	@ (802d7bc <register_fini+0x10>)
 802d7b2:	f000 b810 	b.w	802d7d6 <atexit>
 802d7b6:	4770      	bx	lr
 802d7b8:	00000000 	.word	0x00000000
 802d7bc:	08034c3d 	.word	0x08034c3d

0802d7c0 <abort>:
 802d7c0:	b508      	push	{r3, lr}
 802d7c2:	2006      	movs	r0, #6
 802d7c4:	f007 f8a6 	bl	8034914 <raise>
 802d7c8:	2001      	movs	r0, #1
 802d7ca:	f7e4 fdb9 	bl	8012340 <_exit>

0802d7ce <abs>:
 802d7ce:	2800      	cmp	r0, #0
 802d7d0:	bfb8      	it	lt
 802d7d2:	4240      	neglt	r0, r0
 802d7d4:	4770      	bx	lr

0802d7d6 <atexit>:
 802d7d6:	2300      	movs	r3, #0
 802d7d8:	4601      	mov	r1, r0
 802d7da:	461a      	mov	r2, r3
 802d7dc:	4618      	mov	r0, r3
 802d7de:	f007 bb01 	b.w	8034de4 <__register_exitproc>

0802d7e2 <quorem>:
 802d7e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d7e6:	6903      	ldr	r3, [r0, #16]
 802d7e8:	690c      	ldr	r4, [r1, #16]
 802d7ea:	42a3      	cmp	r3, r4
 802d7ec:	4607      	mov	r7, r0
 802d7ee:	db7e      	blt.n	802d8ee <quorem+0x10c>
 802d7f0:	3c01      	subs	r4, #1
 802d7f2:	f101 0814 	add.w	r8, r1, #20
 802d7f6:	00a3      	lsls	r3, r4, #2
 802d7f8:	f100 0514 	add.w	r5, r0, #20
 802d7fc:	9300      	str	r3, [sp, #0]
 802d7fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802d802:	9301      	str	r3, [sp, #4]
 802d804:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802d808:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802d80c:	3301      	adds	r3, #1
 802d80e:	429a      	cmp	r2, r3
 802d810:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802d814:	fbb2 f6f3 	udiv	r6, r2, r3
 802d818:	d32e      	bcc.n	802d878 <quorem+0x96>
 802d81a:	f04f 0a00 	mov.w	sl, #0
 802d81e:	46c4      	mov	ip, r8
 802d820:	46ae      	mov	lr, r5
 802d822:	46d3      	mov	fp, sl
 802d824:	f85c 3b04 	ldr.w	r3, [ip], #4
 802d828:	b298      	uxth	r0, r3
 802d82a:	fb06 a000 	mla	r0, r6, r0, sl
 802d82e:	0c02      	lsrs	r2, r0, #16
 802d830:	0c1b      	lsrs	r3, r3, #16
 802d832:	fb06 2303 	mla	r3, r6, r3, r2
 802d836:	f8de 2000 	ldr.w	r2, [lr]
 802d83a:	b280      	uxth	r0, r0
 802d83c:	b292      	uxth	r2, r2
 802d83e:	1a12      	subs	r2, r2, r0
 802d840:	445a      	add	r2, fp
 802d842:	f8de 0000 	ldr.w	r0, [lr]
 802d846:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802d84a:	b29b      	uxth	r3, r3
 802d84c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802d850:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802d854:	b292      	uxth	r2, r2
 802d856:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802d85a:	45e1      	cmp	r9, ip
 802d85c:	f84e 2b04 	str.w	r2, [lr], #4
 802d860:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802d864:	d2de      	bcs.n	802d824 <quorem+0x42>
 802d866:	9b00      	ldr	r3, [sp, #0]
 802d868:	58eb      	ldr	r3, [r5, r3]
 802d86a:	b92b      	cbnz	r3, 802d878 <quorem+0x96>
 802d86c:	9b01      	ldr	r3, [sp, #4]
 802d86e:	3b04      	subs	r3, #4
 802d870:	429d      	cmp	r5, r3
 802d872:	461a      	mov	r2, r3
 802d874:	d32f      	bcc.n	802d8d6 <quorem+0xf4>
 802d876:	613c      	str	r4, [r7, #16]
 802d878:	4638      	mov	r0, r7
 802d87a:	f005 fce3 	bl	8033244 <__mcmp>
 802d87e:	2800      	cmp	r0, #0
 802d880:	db25      	blt.n	802d8ce <quorem+0xec>
 802d882:	4629      	mov	r1, r5
 802d884:	2000      	movs	r0, #0
 802d886:	f858 2b04 	ldr.w	r2, [r8], #4
 802d88a:	f8d1 c000 	ldr.w	ip, [r1]
 802d88e:	fa1f fe82 	uxth.w	lr, r2
 802d892:	fa1f f38c 	uxth.w	r3, ip
 802d896:	eba3 030e 	sub.w	r3, r3, lr
 802d89a:	4403      	add	r3, r0
 802d89c:	0c12      	lsrs	r2, r2, #16
 802d89e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802d8a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802d8a6:	b29b      	uxth	r3, r3
 802d8a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802d8ac:	45c1      	cmp	r9, r8
 802d8ae:	f841 3b04 	str.w	r3, [r1], #4
 802d8b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 802d8b6:	d2e6      	bcs.n	802d886 <quorem+0xa4>
 802d8b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802d8bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802d8c0:	b922      	cbnz	r2, 802d8cc <quorem+0xea>
 802d8c2:	3b04      	subs	r3, #4
 802d8c4:	429d      	cmp	r5, r3
 802d8c6:	461a      	mov	r2, r3
 802d8c8:	d30b      	bcc.n	802d8e2 <quorem+0x100>
 802d8ca:	613c      	str	r4, [r7, #16]
 802d8cc:	3601      	adds	r6, #1
 802d8ce:	4630      	mov	r0, r6
 802d8d0:	b003      	add	sp, #12
 802d8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d8d6:	6812      	ldr	r2, [r2, #0]
 802d8d8:	3b04      	subs	r3, #4
 802d8da:	2a00      	cmp	r2, #0
 802d8dc:	d1cb      	bne.n	802d876 <quorem+0x94>
 802d8de:	3c01      	subs	r4, #1
 802d8e0:	e7c6      	b.n	802d870 <quorem+0x8e>
 802d8e2:	6812      	ldr	r2, [r2, #0]
 802d8e4:	3b04      	subs	r3, #4
 802d8e6:	2a00      	cmp	r2, #0
 802d8e8:	d1ef      	bne.n	802d8ca <quorem+0xe8>
 802d8ea:	3c01      	subs	r4, #1
 802d8ec:	e7ea      	b.n	802d8c4 <quorem+0xe2>
 802d8ee:	2000      	movs	r0, #0
 802d8f0:	e7ee      	b.n	802d8d0 <quorem+0xee>
 802d8f2:	0000      	movs	r0, r0
 802d8f4:	0000      	movs	r0, r0
	...

0802d8f8 <_dtoa_r>:
 802d8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d8fc:	b099      	sub	sp, #100	@ 0x64
 802d8fe:	ed8d 0b02 	vstr	d0, [sp, #8]
 802d902:	9109      	str	r1, [sp, #36]	@ 0x24
 802d904:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 802d906:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802d908:	920e      	str	r2, [sp, #56]	@ 0x38
 802d90a:	ec55 4b10 	vmov	r4, r5, d0
 802d90e:	4683      	mov	fp, r0
 802d910:	9313      	str	r3, [sp, #76]	@ 0x4c
 802d912:	b149      	cbz	r1, 802d928 <_dtoa_r+0x30>
 802d914:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802d916:	604a      	str	r2, [r1, #4]
 802d918:	2301      	movs	r3, #1
 802d91a:	4093      	lsls	r3, r2
 802d91c:	608b      	str	r3, [r1, #8]
 802d91e:	f005 fa40 	bl	8032da2 <_Bfree>
 802d922:	2300      	movs	r3, #0
 802d924:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 802d928:	1e2b      	subs	r3, r5, #0
 802d92a:	bfb9      	ittee	lt
 802d92c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802d930:	9303      	strlt	r3, [sp, #12]
 802d932:	2300      	movge	r3, #0
 802d934:	6033      	strge	r3, [r6, #0]
 802d936:	9f03      	ldr	r7, [sp, #12]
 802d938:	4b97      	ldr	r3, [pc, #604]	@ (802db98 <_dtoa_r+0x2a0>)
 802d93a:	bfbc      	itt	lt
 802d93c:	2201      	movlt	r2, #1
 802d93e:	6032      	strlt	r2, [r6, #0]
 802d940:	43bb      	bics	r3, r7
 802d942:	d114      	bne.n	802d96e <_dtoa_r+0x76>
 802d944:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802d946:	f242 730f 	movw	r3, #9999	@ 0x270f
 802d94a:	6013      	str	r3, [r2, #0]
 802d94c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802d950:	4323      	orrs	r3, r4
 802d952:	f000 854c 	beq.w	802e3ee <_dtoa_r+0xaf6>
 802d956:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802d958:	f8df a254 	ldr.w	sl, [pc, #596]	@ 802dbb0 <_dtoa_r+0x2b8>
 802d95c:	b11b      	cbz	r3, 802d966 <_dtoa_r+0x6e>
 802d95e:	f10a 0303 	add.w	r3, sl, #3
 802d962:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802d964:	6013      	str	r3, [r2, #0]
 802d966:	4650      	mov	r0, sl
 802d968:	b019      	add	sp, #100	@ 0x64
 802d96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d96e:	ed9d 7b02 	vldr	d7, [sp, #8]
 802d972:	2200      	movs	r2, #0
 802d974:	ec51 0b17 	vmov	r0, r1, d7
 802d978:	2300      	movs	r3, #0
 802d97a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 802d97e:	f7e3 f8bb 	bl	8010af8 <__aeabi_dcmpeq>
 802d982:	4680      	mov	r8, r0
 802d984:	b150      	cbz	r0, 802d99c <_dtoa_r+0xa4>
 802d986:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802d988:	2301      	movs	r3, #1
 802d98a:	6013      	str	r3, [r2, #0]
 802d98c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802d98e:	b113      	cbz	r3, 802d996 <_dtoa_r+0x9e>
 802d990:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802d992:	4b82      	ldr	r3, [pc, #520]	@ (802db9c <_dtoa_r+0x2a4>)
 802d994:	6013      	str	r3, [r2, #0]
 802d996:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 802dbb4 <_dtoa_r+0x2bc>
 802d99a:	e7e4      	b.n	802d966 <_dtoa_r+0x6e>
 802d99c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802d9a0:	aa16      	add	r2, sp, #88	@ 0x58
 802d9a2:	a917      	add	r1, sp, #92	@ 0x5c
 802d9a4:	4658      	mov	r0, fp
 802d9a6:	f005 fd6d 	bl	8033484 <__d2b>
 802d9aa:	f3c7 560a 	ubfx	r6, r7, #20, #11
 802d9ae:	4681      	mov	r9, r0
 802d9b0:	2e00      	cmp	r6, #0
 802d9b2:	d077      	beq.n	802daa4 <_dtoa_r+0x1ac>
 802d9b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802d9b6:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 802d9ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802d9be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802d9c2:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 802d9c6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802d9ca:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 802d9ce:	4619      	mov	r1, r3
 802d9d0:	2200      	movs	r2, #0
 802d9d2:	4b73      	ldr	r3, [pc, #460]	@ (802dba0 <_dtoa_r+0x2a8>)
 802d9d4:	f7e2 fc70 	bl	80102b8 <__aeabi_dsub>
 802d9d8:	a369      	add	r3, pc, #420	@ (adr r3, 802db80 <_dtoa_r+0x288>)
 802d9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d9de:	f7e2 fe23 	bl	8010628 <__aeabi_dmul>
 802d9e2:	a369      	add	r3, pc, #420	@ (adr r3, 802db88 <_dtoa_r+0x290>)
 802d9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d9e8:	f7e2 fc68 	bl	80102bc <__adddf3>
 802d9ec:	4604      	mov	r4, r0
 802d9ee:	4630      	mov	r0, r6
 802d9f0:	460d      	mov	r5, r1
 802d9f2:	f7e2 fdaf 	bl	8010554 <__aeabi_i2d>
 802d9f6:	a366      	add	r3, pc, #408	@ (adr r3, 802db90 <_dtoa_r+0x298>)
 802d9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d9fc:	f7e2 fe14 	bl	8010628 <__aeabi_dmul>
 802da00:	4602      	mov	r2, r0
 802da02:	460b      	mov	r3, r1
 802da04:	4620      	mov	r0, r4
 802da06:	4629      	mov	r1, r5
 802da08:	f7e2 fc58 	bl	80102bc <__adddf3>
 802da0c:	4604      	mov	r4, r0
 802da0e:	460d      	mov	r5, r1
 802da10:	f7e3 f8ba 	bl	8010b88 <__aeabi_d2iz>
 802da14:	2200      	movs	r2, #0
 802da16:	4607      	mov	r7, r0
 802da18:	2300      	movs	r3, #0
 802da1a:	4620      	mov	r0, r4
 802da1c:	4629      	mov	r1, r5
 802da1e:	f7e3 f875 	bl	8010b0c <__aeabi_dcmplt>
 802da22:	b140      	cbz	r0, 802da36 <_dtoa_r+0x13e>
 802da24:	4638      	mov	r0, r7
 802da26:	f7e2 fd95 	bl	8010554 <__aeabi_i2d>
 802da2a:	4622      	mov	r2, r4
 802da2c:	462b      	mov	r3, r5
 802da2e:	f7e3 f863 	bl	8010af8 <__aeabi_dcmpeq>
 802da32:	b900      	cbnz	r0, 802da36 <_dtoa_r+0x13e>
 802da34:	3f01      	subs	r7, #1
 802da36:	2f16      	cmp	r7, #22
 802da38:	d851      	bhi.n	802dade <_dtoa_r+0x1e6>
 802da3a:	4b5a      	ldr	r3, [pc, #360]	@ (802dba4 <_dtoa_r+0x2ac>)
 802da3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802da40:	e9d3 2300 	ldrd	r2, r3, [r3]
 802da44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802da48:	f7e3 f860 	bl	8010b0c <__aeabi_dcmplt>
 802da4c:	2800      	cmp	r0, #0
 802da4e:	d048      	beq.n	802dae2 <_dtoa_r+0x1ea>
 802da50:	3f01      	subs	r7, #1
 802da52:	2300      	movs	r3, #0
 802da54:	9312      	str	r3, [sp, #72]	@ 0x48
 802da56:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802da58:	1b9b      	subs	r3, r3, r6
 802da5a:	1e5a      	subs	r2, r3, #1
 802da5c:	bf44      	itt	mi
 802da5e:	f1c3 0801 	rsbmi	r8, r3, #1
 802da62:	2300      	movmi	r3, #0
 802da64:	9208      	str	r2, [sp, #32]
 802da66:	bf54      	ite	pl
 802da68:	f04f 0800 	movpl.w	r8, #0
 802da6c:	9308      	strmi	r3, [sp, #32]
 802da6e:	2f00      	cmp	r7, #0
 802da70:	db39      	blt.n	802dae6 <_dtoa_r+0x1ee>
 802da72:	9b08      	ldr	r3, [sp, #32]
 802da74:	970f      	str	r7, [sp, #60]	@ 0x3c
 802da76:	443b      	add	r3, r7
 802da78:	9308      	str	r3, [sp, #32]
 802da7a:	2300      	movs	r3, #0
 802da7c:	930a      	str	r3, [sp, #40]	@ 0x28
 802da7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802da80:	2b09      	cmp	r3, #9
 802da82:	d865      	bhi.n	802db50 <_dtoa_r+0x258>
 802da84:	2b05      	cmp	r3, #5
 802da86:	bfc4      	itt	gt
 802da88:	3b04      	subgt	r3, #4
 802da8a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802da8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802da8e:	f1a3 0302 	sub.w	r3, r3, #2
 802da92:	bfcc      	ite	gt
 802da94:	2400      	movgt	r4, #0
 802da96:	2401      	movle	r4, #1
 802da98:	2b03      	cmp	r3, #3
 802da9a:	d864      	bhi.n	802db66 <_dtoa_r+0x26e>
 802da9c:	e8df f003 	tbb	[pc, r3]
 802daa0:	5635372a 	.word	0x5635372a
 802daa4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 802daa8:	441e      	add	r6, r3
 802daaa:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 802daae:	2b20      	cmp	r3, #32
 802dab0:	bfc1      	itttt	gt
 802dab2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 802dab6:	409f      	lslgt	r7, r3
 802dab8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802dabc:	fa24 f303 	lsrgt.w	r3, r4, r3
 802dac0:	bfd6      	itet	le
 802dac2:	f1c3 0320 	rsble	r3, r3, #32
 802dac6:	ea47 0003 	orrgt.w	r0, r7, r3
 802daca:	fa04 f003 	lslle.w	r0, r4, r3
 802dace:	f7e2 fd31 	bl	8010534 <__aeabi_ui2d>
 802dad2:	2201      	movs	r2, #1
 802dad4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802dad8:	3e01      	subs	r6, #1
 802dada:	9214      	str	r2, [sp, #80]	@ 0x50
 802dadc:	e777      	b.n	802d9ce <_dtoa_r+0xd6>
 802dade:	2301      	movs	r3, #1
 802dae0:	e7b8      	b.n	802da54 <_dtoa_r+0x15c>
 802dae2:	9012      	str	r0, [sp, #72]	@ 0x48
 802dae4:	e7b7      	b.n	802da56 <_dtoa_r+0x15e>
 802dae6:	427b      	negs	r3, r7
 802dae8:	930a      	str	r3, [sp, #40]	@ 0x28
 802daea:	2300      	movs	r3, #0
 802daec:	eba8 0807 	sub.w	r8, r8, r7
 802daf0:	930f      	str	r3, [sp, #60]	@ 0x3c
 802daf2:	e7c4      	b.n	802da7e <_dtoa_r+0x186>
 802daf4:	2300      	movs	r3, #0
 802daf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 802daf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802dafa:	2b00      	cmp	r3, #0
 802dafc:	dc36      	bgt.n	802db6c <_dtoa_r+0x274>
 802dafe:	2301      	movs	r3, #1
 802db00:	9300      	str	r3, [sp, #0]
 802db02:	9307      	str	r3, [sp, #28]
 802db04:	461a      	mov	r2, r3
 802db06:	920e      	str	r2, [sp, #56]	@ 0x38
 802db08:	e00b      	b.n	802db22 <_dtoa_r+0x22a>
 802db0a:	2301      	movs	r3, #1
 802db0c:	e7f3      	b.n	802daf6 <_dtoa_r+0x1fe>
 802db0e:	2300      	movs	r3, #0
 802db10:	930b      	str	r3, [sp, #44]	@ 0x2c
 802db12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802db14:	18fb      	adds	r3, r7, r3
 802db16:	9300      	str	r3, [sp, #0]
 802db18:	3301      	adds	r3, #1
 802db1a:	2b01      	cmp	r3, #1
 802db1c:	9307      	str	r3, [sp, #28]
 802db1e:	bfb8      	it	lt
 802db20:	2301      	movlt	r3, #1
 802db22:	2100      	movs	r1, #0
 802db24:	2204      	movs	r2, #4
 802db26:	f102 0014 	add.w	r0, r2, #20
 802db2a:	4298      	cmp	r0, r3
 802db2c:	d922      	bls.n	802db74 <_dtoa_r+0x27c>
 802db2e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 802db32:	4658      	mov	r0, fp
 802db34:	f005 f910 	bl	8032d58 <_Balloc>
 802db38:	4682      	mov	sl, r0
 802db3a:	2800      	cmp	r0, #0
 802db3c:	d13c      	bne.n	802dbb8 <_dtoa_r+0x2c0>
 802db3e:	4b1a      	ldr	r3, [pc, #104]	@ (802dba8 <_dtoa_r+0x2b0>)
 802db40:	4602      	mov	r2, r0
 802db42:	f240 11af 	movw	r1, #431	@ 0x1af
 802db46:	4819      	ldr	r0, [pc, #100]	@ (802dbac <_dtoa_r+0x2b4>)
 802db48:	f7fb fe48 	bl	80297dc <__assert_func>
 802db4c:	2301      	movs	r3, #1
 802db4e:	e7df      	b.n	802db10 <_dtoa_r+0x218>
 802db50:	2401      	movs	r4, #1
 802db52:	2300      	movs	r3, #0
 802db54:	9309      	str	r3, [sp, #36]	@ 0x24
 802db56:	940b      	str	r4, [sp, #44]	@ 0x2c
 802db58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802db5c:	9300      	str	r3, [sp, #0]
 802db5e:	9307      	str	r3, [sp, #28]
 802db60:	2200      	movs	r2, #0
 802db62:	2312      	movs	r3, #18
 802db64:	e7cf      	b.n	802db06 <_dtoa_r+0x20e>
 802db66:	2301      	movs	r3, #1
 802db68:	930b      	str	r3, [sp, #44]	@ 0x2c
 802db6a:	e7f5      	b.n	802db58 <_dtoa_r+0x260>
 802db6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802db6e:	9300      	str	r3, [sp, #0]
 802db70:	9307      	str	r3, [sp, #28]
 802db72:	e7d6      	b.n	802db22 <_dtoa_r+0x22a>
 802db74:	3101      	adds	r1, #1
 802db76:	0052      	lsls	r2, r2, #1
 802db78:	e7d5      	b.n	802db26 <_dtoa_r+0x22e>
 802db7a:	bf00      	nop
 802db7c:	f3af 8000 	nop.w
 802db80:	636f4361 	.word	0x636f4361
 802db84:	3fd287a7 	.word	0x3fd287a7
 802db88:	8b60c8b3 	.word	0x8b60c8b3
 802db8c:	3fc68a28 	.word	0x3fc68a28
 802db90:	509f79fb 	.word	0x509f79fb
 802db94:	3fd34413 	.word	0x3fd34413
 802db98:	7ff00000 	.word	0x7ff00000
 802db9c:	0803b03e 	.word	0x0803b03e
 802dba0:	3ff80000 	.word	0x3ff80000
 802dba4:	0803b658 	.word	0x0803b658
 802dba8:	0803b4d6 	.word	0x0803b4d6
 802dbac:	0803b4e7 	.word	0x0803b4e7
 802dbb0:	0803b4d2 	.word	0x0803b4d2
 802dbb4:	0803b03d 	.word	0x0803b03d
 802dbb8:	9b07      	ldr	r3, [sp, #28]
 802dbba:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 802dbbe:	2b0e      	cmp	r3, #14
 802dbc0:	f200 80a4 	bhi.w	802dd0c <_dtoa_r+0x414>
 802dbc4:	2c00      	cmp	r4, #0
 802dbc6:	f000 80a1 	beq.w	802dd0c <_dtoa_r+0x414>
 802dbca:	2f00      	cmp	r7, #0
 802dbcc:	dd33      	ble.n	802dc36 <_dtoa_r+0x33e>
 802dbce:	4bae      	ldr	r3, [pc, #696]	@ (802de88 <_dtoa_r+0x590>)
 802dbd0:	f007 020f 	and.w	r2, r7, #15
 802dbd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802dbd8:	ed93 7b00 	vldr	d7, [r3]
 802dbdc:	05f8      	lsls	r0, r7, #23
 802dbde:	ed8d 7b04 	vstr	d7, [sp, #16]
 802dbe2:	ea4f 1427 	mov.w	r4, r7, asr #4
 802dbe6:	d516      	bpl.n	802dc16 <_dtoa_r+0x31e>
 802dbe8:	4ba8      	ldr	r3, [pc, #672]	@ (802de8c <_dtoa_r+0x594>)
 802dbea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802dbee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802dbf2:	f7e2 fe43 	bl	801087c <__aeabi_ddiv>
 802dbf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802dbfa:	f004 040f 	and.w	r4, r4, #15
 802dbfe:	2603      	movs	r6, #3
 802dc00:	4da2      	ldr	r5, [pc, #648]	@ (802de8c <_dtoa_r+0x594>)
 802dc02:	b954      	cbnz	r4, 802dc1a <_dtoa_r+0x322>
 802dc04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802dc08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802dc0c:	f7e2 fe36 	bl	801087c <__aeabi_ddiv>
 802dc10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802dc14:	e028      	b.n	802dc68 <_dtoa_r+0x370>
 802dc16:	2602      	movs	r6, #2
 802dc18:	e7f2      	b.n	802dc00 <_dtoa_r+0x308>
 802dc1a:	07e1      	lsls	r1, r4, #31
 802dc1c:	d508      	bpl.n	802dc30 <_dtoa_r+0x338>
 802dc1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802dc22:	e9d5 2300 	ldrd	r2, r3, [r5]
 802dc26:	f7e2 fcff 	bl	8010628 <__aeabi_dmul>
 802dc2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802dc2e:	3601      	adds	r6, #1
 802dc30:	1064      	asrs	r4, r4, #1
 802dc32:	3508      	adds	r5, #8
 802dc34:	e7e5      	b.n	802dc02 <_dtoa_r+0x30a>
 802dc36:	f000 80d2 	beq.w	802ddde <_dtoa_r+0x4e6>
 802dc3a:	427c      	negs	r4, r7
 802dc3c:	4b92      	ldr	r3, [pc, #584]	@ (802de88 <_dtoa_r+0x590>)
 802dc3e:	4d93      	ldr	r5, [pc, #588]	@ (802de8c <_dtoa_r+0x594>)
 802dc40:	f004 020f 	and.w	r2, r4, #15
 802dc44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802dc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dc4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802dc50:	f7e2 fcea 	bl	8010628 <__aeabi_dmul>
 802dc54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802dc58:	1124      	asrs	r4, r4, #4
 802dc5a:	2300      	movs	r3, #0
 802dc5c:	2602      	movs	r6, #2
 802dc5e:	2c00      	cmp	r4, #0
 802dc60:	f040 80b2 	bne.w	802ddc8 <_dtoa_r+0x4d0>
 802dc64:	2b00      	cmp	r3, #0
 802dc66:	d1d3      	bne.n	802dc10 <_dtoa_r+0x318>
 802dc68:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802dc6a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802dc6e:	2b00      	cmp	r3, #0
 802dc70:	f000 80b7 	beq.w	802dde2 <_dtoa_r+0x4ea>
 802dc74:	4b86      	ldr	r3, [pc, #536]	@ (802de90 <_dtoa_r+0x598>)
 802dc76:	2200      	movs	r2, #0
 802dc78:	4620      	mov	r0, r4
 802dc7a:	4629      	mov	r1, r5
 802dc7c:	f7e2 ff46 	bl	8010b0c <__aeabi_dcmplt>
 802dc80:	2800      	cmp	r0, #0
 802dc82:	f000 80ae 	beq.w	802dde2 <_dtoa_r+0x4ea>
 802dc86:	9b07      	ldr	r3, [sp, #28]
 802dc88:	2b00      	cmp	r3, #0
 802dc8a:	f000 80aa 	beq.w	802dde2 <_dtoa_r+0x4ea>
 802dc8e:	9b00      	ldr	r3, [sp, #0]
 802dc90:	2b00      	cmp	r3, #0
 802dc92:	dd37      	ble.n	802dd04 <_dtoa_r+0x40c>
 802dc94:	1e7b      	subs	r3, r7, #1
 802dc96:	9304      	str	r3, [sp, #16]
 802dc98:	4620      	mov	r0, r4
 802dc9a:	4b7e      	ldr	r3, [pc, #504]	@ (802de94 <_dtoa_r+0x59c>)
 802dc9c:	2200      	movs	r2, #0
 802dc9e:	4629      	mov	r1, r5
 802dca0:	f7e2 fcc2 	bl	8010628 <__aeabi_dmul>
 802dca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802dca8:	9c00      	ldr	r4, [sp, #0]
 802dcaa:	3601      	adds	r6, #1
 802dcac:	4630      	mov	r0, r6
 802dcae:	f7e2 fc51 	bl	8010554 <__aeabi_i2d>
 802dcb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802dcb6:	f7e2 fcb7 	bl	8010628 <__aeabi_dmul>
 802dcba:	4b77      	ldr	r3, [pc, #476]	@ (802de98 <_dtoa_r+0x5a0>)
 802dcbc:	2200      	movs	r2, #0
 802dcbe:	f7e2 fafd 	bl	80102bc <__adddf3>
 802dcc2:	4605      	mov	r5, r0
 802dcc4:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 802dcc8:	2c00      	cmp	r4, #0
 802dcca:	f040 808d 	bne.w	802dde8 <_dtoa_r+0x4f0>
 802dcce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802dcd2:	4b72      	ldr	r3, [pc, #456]	@ (802de9c <_dtoa_r+0x5a4>)
 802dcd4:	2200      	movs	r2, #0
 802dcd6:	f7e2 faef 	bl	80102b8 <__aeabi_dsub>
 802dcda:	4602      	mov	r2, r0
 802dcdc:	460b      	mov	r3, r1
 802dcde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802dce2:	462a      	mov	r2, r5
 802dce4:	4633      	mov	r3, r6
 802dce6:	f7e2 ff2f 	bl	8010b48 <__aeabi_dcmpgt>
 802dcea:	2800      	cmp	r0, #0
 802dcec:	f040 828c 	bne.w	802e208 <_dtoa_r+0x910>
 802dcf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802dcf4:	462a      	mov	r2, r5
 802dcf6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 802dcfa:	f7e2 ff07 	bl	8010b0c <__aeabi_dcmplt>
 802dcfe:	2800      	cmp	r0, #0
 802dd00:	f040 8129 	bne.w	802df56 <_dtoa_r+0x65e>
 802dd04:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 802dd08:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802dd0c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802dd0e:	2b00      	cmp	r3, #0
 802dd10:	f2c0 815b 	blt.w	802dfca <_dtoa_r+0x6d2>
 802dd14:	2f0e      	cmp	r7, #14
 802dd16:	f300 8158 	bgt.w	802dfca <_dtoa_r+0x6d2>
 802dd1a:	4b5b      	ldr	r3, [pc, #364]	@ (802de88 <_dtoa_r+0x590>)
 802dd1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802dd20:	ed93 7b00 	vldr	d7, [r3]
 802dd24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802dd26:	2b00      	cmp	r3, #0
 802dd28:	ed8d 7b00 	vstr	d7, [sp]
 802dd2c:	da03      	bge.n	802dd36 <_dtoa_r+0x43e>
 802dd2e:	9b07      	ldr	r3, [sp, #28]
 802dd30:	2b00      	cmp	r3, #0
 802dd32:	f340 8102 	ble.w	802df3a <_dtoa_r+0x642>
 802dd36:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802dd3a:	4656      	mov	r6, sl
 802dd3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 802dd40:	4620      	mov	r0, r4
 802dd42:	4629      	mov	r1, r5
 802dd44:	f7e2 fd9a 	bl	801087c <__aeabi_ddiv>
 802dd48:	f7e2 ff1e 	bl	8010b88 <__aeabi_d2iz>
 802dd4c:	4680      	mov	r8, r0
 802dd4e:	f7e2 fc01 	bl	8010554 <__aeabi_i2d>
 802dd52:	e9dd 2300 	ldrd	r2, r3, [sp]
 802dd56:	f7e2 fc67 	bl	8010628 <__aeabi_dmul>
 802dd5a:	4602      	mov	r2, r0
 802dd5c:	460b      	mov	r3, r1
 802dd5e:	4620      	mov	r0, r4
 802dd60:	4629      	mov	r1, r5
 802dd62:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 802dd66:	f7e2 faa7 	bl	80102b8 <__aeabi_dsub>
 802dd6a:	f806 4b01 	strb.w	r4, [r6], #1
 802dd6e:	9d07      	ldr	r5, [sp, #28]
 802dd70:	eba6 040a 	sub.w	r4, r6, sl
 802dd74:	42a5      	cmp	r5, r4
 802dd76:	4602      	mov	r2, r0
 802dd78:	460b      	mov	r3, r1
 802dd7a:	f040 8118 	bne.w	802dfae <_dtoa_r+0x6b6>
 802dd7e:	f7e2 fa9d 	bl	80102bc <__adddf3>
 802dd82:	e9dd 2300 	ldrd	r2, r3, [sp]
 802dd86:	4604      	mov	r4, r0
 802dd88:	460d      	mov	r5, r1
 802dd8a:	f7e2 fedd 	bl	8010b48 <__aeabi_dcmpgt>
 802dd8e:	2800      	cmp	r0, #0
 802dd90:	f040 80fa 	bne.w	802df88 <_dtoa_r+0x690>
 802dd94:	e9dd 2300 	ldrd	r2, r3, [sp]
 802dd98:	4620      	mov	r0, r4
 802dd9a:	4629      	mov	r1, r5
 802dd9c:	f7e2 feac 	bl	8010af8 <__aeabi_dcmpeq>
 802dda0:	b118      	cbz	r0, 802ddaa <_dtoa_r+0x4b2>
 802dda2:	f018 0f01 	tst.w	r8, #1
 802dda6:	f040 80ef 	bne.w	802df88 <_dtoa_r+0x690>
 802ddaa:	4649      	mov	r1, r9
 802ddac:	4658      	mov	r0, fp
 802ddae:	f004 fff8 	bl	8032da2 <_Bfree>
 802ddb2:	2300      	movs	r3, #0
 802ddb4:	7033      	strb	r3, [r6, #0]
 802ddb6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802ddb8:	3701      	adds	r7, #1
 802ddba:	601f      	str	r7, [r3, #0]
 802ddbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802ddbe:	2b00      	cmp	r3, #0
 802ddc0:	f43f add1 	beq.w	802d966 <_dtoa_r+0x6e>
 802ddc4:	601e      	str	r6, [r3, #0]
 802ddc6:	e5ce      	b.n	802d966 <_dtoa_r+0x6e>
 802ddc8:	07e2      	lsls	r2, r4, #31
 802ddca:	d505      	bpl.n	802ddd8 <_dtoa_r+0x4e0>
 802ddcc:	e9d5 2300 	ldrd	r2, r3, [r5]
 802ddd0:	f7e2 fc2a 	bl	8010628 <__aeabi_dmul>
 802ddd4:	3601      	adds	r6, #1
 802ddd6:	2301      	movs	r3, #1
 802ddd8:	1064      	asrs	r4, r4, #1
 802ddda:	3508      	adds	r5, #8
 802dddc:	e73f      	b.n	802dc5e <_dtoa_r+0x366>
 802ddde:	2602      	movs	r6, #2
 802dde0:	e742      	b.n	802dc68 <_dtoa_r+0x370>
 802dde2:	9c07      	ldr	r4, [sp, #28]
 802dde4:	9704      	str	r7, [sp, #16]
 802dde6:	e761      	b.n	802dcac <_dtoa_r+0x3b4>
 802dde8:	4b27      	ldr	r3, [pc, #156]	@ (802de88 <_dtoa_r+0x590>)
 802ddea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802ddec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802ddf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802ddf4:	4454      	add	r4, sl
 802ddf6:	2900      	cmp	r1, #0
 802ddf8:	d054      	beq.n	802dea4 <_dtoa_r+0x5ac>
 802ddfa:	4929      	ldr	r1, [pc, #164]	@ (802dea0 <_dtoa_r+0x5a8>)
 802ddfc:	2000      	movs	r0, #0
 802ddfe:	f7e2 fd3d 	bl	801087c <__aeabi_ddiv>
 802de02:	4633      	mov	r3, r6
 802de04:	462a      	mov	r2, r5
 802de06:	f7e2 fa57 	bl	80102b8 <__aeabi_dsub>
 802de0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802de0e:	4656      	mov	r6, sl
 802de10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802de14:	f7e2 feb8 	bl	8010b88 <__aeabi_d2iz>
 802de18:	4605      	mov	r5, r0
 802de1a:	f7e2 fb9b 	bl	8010554 <__aeabi_i2d>
 802de1e:	4602      	mov	r2, r0
 802de20:	460b      	mov	r3, r1
 802de22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802de26:	f7e2 fa47 	bl	80102b8 <__aeabi_dsub>
 802de2a:	3530      	adds	r5, #48	@ 0x30
 802de2c:	4602      	mov	r2, r0
 802de2e:	460b      	mov	r3, r1
 802de30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802de34:	f806 5b01 	strb.w	r5, [r6], #1
 802de38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802de3c:	f7e2 fe66 	bl	8010b0c <__aeabi_dcmplt>
 802de40:	2800      	cmp	r0, #0
 802de42:	d172      	bne.n	802df2a <_dtoa_r+0x632>
 802de44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802de48:	4911      	ldr	r1, [pc, #68]	@ (802de90 <_dtoa_r+0x598>)
 802de4a:	2000      	movs	r0, #0
 802de4c:	f7e2 fa34 	bl	80102b8 <__aeabi_dsub>
 802de50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802de54:	f7e2 fe5a 	bl	8010b0c <__aeabi_dcmplt>
 802de58:	2800      	cmp	r0, #0
 802de5a:	f040 8096 	bne.w	802df8a <_dtoa_r+0x692>
 802de5e:	42a6      	cmp	r6, r4
 802de60:	f43f af50 	beq.w	802dd04 <_dtoa_r+0x40c>
 802de64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802de68:	4b0a      	ldr	r3, [pc, #40]	@ (802de94 <_dtoa_r+0x59c>)
 802de6a:	2200      	movs	r2, #0
 802de6c:	f7e2 fbdc 	bl	8010628 <__aeabi_dmul>
 802de70:	4b08      	ldr	r3, [pc, #32]	@ (802de94 <_dtoa_r+0x59c>)
 802de72:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802de76:	2200      	movs	r2, #0
 802de78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802de7c:	f7e2 fbd4 	bl	8010628 <__aeabi_dmul>
 802de80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802de84:	e7c4      	b.n	802de10 <_dtoa_r+0x518>
 802de86:	bf00      	nop
 802de88:	0803b658 	.word	0x0803b658
 802de8c:	0803b630 	.word	0x0803b630
 802de90:	3ff00000 	.word	0x3ff00000
 802de94:	40240000 	.word	0x40240000
 802de98:	401c0000 	.word	0x401c0000
 802de9c:	40140000 	.word	0x40140000
 802dea0:	3fe00000 	.word	0x3fe00000
 802dea4:	4631      	mov	r1, r6
 802dea6:	4628      	mov	r0, r5
 802dea8:	f7e2 fbbe 	bl	8010628 <__aeabi_dmul>
 802deac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802deb0:	9415      	str	r4, [sp, #84]	@ 0x54
 802deb2:	4656      	mov	r6, sl
 802deb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802deb8:	f7e2 fe66 	bl	8010b88 <__aeabi_d2iz>
 802debc:	4605      	mov	r5, r0
 802debe:	f7e2 fb49 	bl	8010554 <__aeabi_i2d>
 802dec2:	4602      	mov	r2, r0
 802dec4:	460b      	mov	r3, r1
 802dec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802deca:	f7e2 f9f5 	bl	80102b8 <__aeabi_dsub>
 802dece:	3530      	adds	r5, #48	@ 0x30
 802ded0:	f806 5b01 	strb.w	r5, [r6], #1
 802ded4:	4602      	mov	r2, r0
 802ded6:	460b      	mov	r3, r1
 802ded8:	42a6      	cmp	r6, r4
 802deda:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802dede:	f04f 0200 	mov.w	r2, #0
 802dee2:	d124      	bne.n	802df2e <_dtoa_r+0x636>
 802dee4:	4bac      	ldr	r3, [pc, #688]	@ (802e198 <_dtoa_r+0x8a0>)
 802dee6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802deea:	f7e2 f9e7 	bl	80102bc <__adddf3>
 802deee:	4602      	mov	r2, r0
 802def0:	460b      	mov	r3, r1
 802def2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802def6:	f7e2 fe27 	bl	8010b48 <__aeabi_dcmpgt>
 802defa:	2800      	cmp	r0, #0
 802defc:	d145      	bne.n	802df8a <_dtoa_r+0x692>
 802defe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802df02:	49a5      	ldr	r1, [pc, #660]	@ (802e198 <_dtoa_r+0x8a0>)
 802df04:	2000      	movs	r0, #0
 802df06:	f7e2 f9d7 	bl	80102b8 <__aeabi_dsub>
 802df0a:	4602      	mov	r2, r0
 802df0c:	460b      	mov	r3, r1
 802df0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802df12:	f7e2 fdfb 	bl	8010b0c <__aeabi_dcmplt>
 802df16:	2800      	cmp	r0, #0
 802df18:	f43f aef4 	beq.w	802dd04 <_dtoa_r+0x40c>
 802df1c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 802df1e:	1e73      	subs	r3, r6, #1
 802df20:	9315      	str	r3, [sp, #84]	@ 0x54
 802df22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802df26:	2b30      	cmp	r3, #48	@ 0x30
 802df28:	d0f8      	beq.n	802df1c <_dtoa_r+0x624>
 802df2a:	9f04      	ldr	r7, [sp, #16]
 802df2c:	e73d      	b.n	802ddaa <_dtoa_r+0x4b2>
 802df2e:	4b9b      	ldr	r3, [pc, #620]	@ (802e19c <_dtoa_r+0x8a4>)
 802df30:	f7e2 fb7a 	bl	8010628 <__aeabi_dmul>
 802df34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802df38:	e7bc      	b.n	802deb4 <_dtoa_r+0x5bc>
 802df3a:	d10c      	bne.n	802df56 <_dtoa_r+0x65e>
 802df3c:	4b98      	ldr	r3, [pc, #608]	@ (802e1a0 <_dtoa_r+0x8a8>)
 802df3e:	2200      	movs	r2, #0
 802df40:	e9dd 0100 	ldrd	r0, r1, [sp]
 802df44:	f7e2 fb70 	bl	8010628 <__aeabi_dmul>
 802df48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802df4c:	f7e2 fdf2 	bl	8010b34 <__aeabi_dcmpge>
 802df50:	2800      	cmp	r0, #0
 802df52:	f000 8157 	beq.w	802e204 <_dtoa_r+0x90c>
 802df56:	2400      	movs	r4, #0
 802df58:	4625      	mov	r5, r4
 802df5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802df5c:	43db      	mvns	r3, r3
 802df5e:	9304      	str	r3, [sp, #16]
 802df60:	4656      	mov	r6, sl
 802df62:	2700      	movs	r7, #0
 802df64:	4621      	mov	r1, r4
 802df66:	4658      	mov	r0, fp
 802df68:	f004 ff1b 	bl	8032da2 <_Bfree>
 802df6c:	2d00      	cmp	r5, #0
 802df6e:	d0dc      	beq.n	802df2a <_dtoa_r+0x632>
 802df70:	b12f      	cbz	r7, 802df7e <_dtoa_r+0x686>
 802df72:	42af      	cmp	r7, r5
 802df74:	d003      	beq.n	802df7e <_dtoa_r+0x686>
 802df76:	4639      	mov	r1, r7
 802df78:	4658      	mov	r0, fp
 802df7a:	f004 ff12 	bl	8032da2 <_Bfree>
 802df7e:	4629      	mov	r1, r5
 802df80:	4658      	mov	r0, fp
 802df82:	f004 ff0e 	bl	8032da2 <_Bfree>
 802df86:	e7d0      	b.n	802df2a <_dtoa_r+0x632>
 802df88:	9704      	str	r7, [sp, #16]
 802df8a:	4633      	mov	r3, r6
 802df8c:	461e      	mov	r6, r3
 802df8e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802df92:	2a39      	cmp	r2, #57	@ 0x39
 802df94:	d107      	bne.n	802dfa6 <_dtoa_r+0x6ae>
 802df96:	459a      	cmp	sl, r3
 802df98:	d1f8      	bne.n	802df8c <_dtoa_r+0x694>
 802df9a:	9a04      	ldr	r2, [sp, #16]
 802df9c:	3201      	adds	r2, #1
 802df9e:	9204      	str	r2, [sp, #16]
 802dfa0:	2230      	movs	r2, #48	@ 0x30
 802dfa2:	f88a 2000 	strb.w	r2, [sl]
 802dfa6:	781a      	ldrb	r2, [r3, #0]
 802dfa8:	3201      	adds	r2, #1
 802dfaa:	701a      	strb	r2, [r3, #0]
 802dfac:	e7bd      	b.n	802df2a <_dtoa_r+0x632>
 802dfae:	4b7b      	ldr	r3, [pc, #492]	@ (802e19c <_dtoa_r+0x8a4>)
 802dfb0:	2200      	movs	r2, #0
 802dfb2:	f7e2 fb39 	bl	8010628 <__aeabi_dmul>
 802dfb6:	2200      	movs	r2, #0
 802dfb8:	2300      	movs	r3, #0
 802dfba:	4604      	mov	r4, r0
 802dfbc:	460d      	mov	r5, r1
 802dfbe:	f7e2 fd9b 	bl	8010af8 <__aeabi_dcmpeq>
 802dfc2:	2800      	cmp	r0, #0
 802dfc4:	f43f aeba 	beq.w	802dd3c <_dtoa_r+0x444>
 802dfc8:	e6ef      	b.n	802ddaa <_dtoa_r+0x4b2>
 802dfca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802dfcc:	2a00      	cmp	r2, #0
 802dfce:	f000 80db 	beq.w	802e188 <_dtoa_r+0x890>
 802dfd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802dfd4:	2a01      	cmp	r2, #1
 802dfd6:	f300 80bf 	bgt.w	802e158 <_dtoa_r+0x860>
 802dfda:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802dfdc:	2a00      	cmp	r2, #0
 802dfde:	f000 80b7 	beq.w	802e150 <_dtoa_r+0x858>
 802dfe2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802dfe6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802dfe8:	4646      	mov	r6, r8
 802dfea:	9a08      	ldr	r2, [sp, #32]
 802dfec:	2101      	movs	r1, #1
 802dfee:	441a      	add	r2, r3
 802dff0:	4658      	mov	r0, fp
 802dff2:	4498      	add	r8, r3
 802dff4:	9208      	str	r2, [sp, #32]
 802dff6:	f004 ffb9 	bl	8032f6c <__i2b>
 802dffa:	4605      	mov	r5, r0
 802dffc:	b15e      	cbz	r6, 802e016 <_dtoa_r+0x71e>
 802dffe:	9b08      	ldr	r3, [sp, #32]
 802e000:	2b00      	cmp	r3, #0
 802e002:	dd08      	ble.n	802e016 <_dtoa_r+0x71e>
 802e004:	42b3      	cmp	r3, r6
 802e006:	9a08      	ldr	r2, [sp, #32]
 802e008:	bfa8      	it	ge
 802e00a:	4633      	movge	r3, r6
 802e00c:	eba8 0803 	sub.w	r8, r8, r3
 802e010:	1af6      	subs	r6, r6, r3
 802e012:	1ad3      	subs	r3, r2, r3
 802e014:	9308      	str	r3, [sp, #32]
 802e016:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e018:	b1f3      	cbz	r3, 802e058 <_dtoa_r+0x760>
 802e01a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e01c:	2b00      	cmp	r3, #0
 802e01e:	f000 80b7 	beq.w	802e190 <_dtoa_r+0x898>
 802e022:	b18c      	cbz	r4, 802e048 <_dtoa_r+0x750>
 802e024:	4629      	mov	r1, r5
 802e026:	4622      	mov	r2, r4
 802e028:	4658      	mov	r0, fp
 802e02a:	f005 f85f 	bl	80330ec <__pow5mult>
 802e02e:	464a      	mov	r2, r9
 802e030:	4601      	mov	r1, r0
 802e032:	4605      	mov	r5, r0
 802e034:	4658      	mov	r0, fp
 802e036:	f004 ffaf 	bl	8032f98 <__multiply>
 802e03a:	4649      	mov	r1, r9
 802e03c:	9004      	str	r0, [sp, #16]
 802e03e:	4658      	mov	r0, fp
 802e040:	f004 feaf 	bl	8032da2 <_Bfree>
 802e044:	9b04      	ldr	r3, [sp, #16]
 802e046:	4699      	mov	r9, r3
 802e048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e04a:	1b1a      	subs	r2, r3, r4
 802e04c:	d004      	beq.n	802e058 <_dtoa_r+0x760>
 802e04e:	4649      	mov	r1, r9
 802e050:	4658      	mov	r0, fp
 802e052:	f005 f84b 	bl	80330ec <__pow5mult>
 802e056:	4681      	mov	r9, r0
 802e058:	2101      	movs	r1, #1
 802e05a:	4658      	mov	r0, fp
 802e05c:	f004 ff86 	bl	8032f6c <__i2b>
 802e060:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802e062:	4604      	mov	r4, r0
 802e064:	2b00      	cmp	r3, #0
 802e066:	f000 81cc 	beq.w	802e402 <_dtoa_r+0xb0a>
 802e06a:	461a      	mov	r2, r3
 802e06c:	4601      	mov	r1, r0
 802e06e:	4658      	mov	r0, fp
 802e070:	f005 f83c 	bl	80330ec <__pow5mult>
 802e074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e076:	2b01      	cmp	r3, #1
 802e078:	4604      	mov	r4, r0
 802e07a:	f300 8095 	bgt.w	802e1a8 <_dtoa_r+0x8b0>
 802e07e:	9b02      	ldr	r3, [sp, #8]
 802e080:	2b00      	cmp	r3, #0
 802e082:	f040 8087 	bne.w	802e194 <_dtoa_r+0x89c>
 802e086:	9b03      	ldr	r3, [sp, #12]
 802e088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e08c:	2b00      	cmp	r3, #0
 802e08e:	f040 8089 	bne.w	802e1a4 <_dtoa_r+0x8ac>
 802e092:	9b03      	ldr	r3, [sp, #12]
 802e094:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802e098:	0d1b      	lsrs	r3, r3, #20
 802e09a:	051b      	lsls	r3, r3, #20
 802e09c:	b12b      	cbz	r3, 802e0aa <_dtoa_r+0x7b2>
 802e09e:	9b08      	ldr	r3, [sp, #32]
 802e0a0:	3301      	adds	r3, #1
 802e0a2:	9308      	str	r3, [sp, #32]
 802e0a4:	f108 0801 	add.w	r8, r8, #1
 802e0a8:	2301      	movs	r3, #1
 802e0aa:	930a      	str	r3, [sp, #40]	@ 0x28
 802e0ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802e0ae:	2b00      	cmp	r3, #0
 802e0b0:	f000 81ad 	beq.w	802e40e <_dtoa_r+0xb16>
 802e0b4:	6923      	ldr	r3, [r4, #16]
 802e0b6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802e0ba:	6918      	ldr	r0, [r3, #16]
 802e0bc:	f004 ff0a 	bl	8032ed4 <__hi0bits>
 802e0c0:	f1c0 0020 	rsb	r0, r0, #32
 802e0c4:	9b08      	ldr	r3, [sp, #32]
 802e0c6:	4418      	add	r0, r3
 802e0c8:	f010 001f 	ands.w	r0, r0, #31
 802e0cc:	d077      	beq.n	802e1be <_dtoa_r+0x8c6>
 802e0ce:	f1c0 0320 	rsb	r3, r0, #32
 802e0d2:	2b04      	cmp	r3, #4
 802e0d4:	dd6b      	ble.n	802e1ae <_dtoa_r+0x8b6>
 802e0d6:	9b08      	ldr	r3, [sp, #32]
 802e0d8:	f1c0 001c 	rsb	r0, r0, #28
 802e0dc:	4403      	add	r3, r0
 802e0de:	4480      	add	r8, r0
 802e0e0:	4406      	add	r6, r0
 802e0e2:	9308      	str	r3, [sp, #32]
 802e0e4:	f1b8 0f00 	cmp.w	r8, #0
 802e0e8:	dd05      	ble.n	802e0f6 <_dtoa_r+0x7fe>
 802e0ea:	4649      	mov	r1, r9
 802e0ec:	4642      	mov	r2, r8
 802e0ee:	4658      	mov	r0, fp
 802e0f0:	f005 f83c 	bl	803316c <__lshift>
 802e0f4:	4681      	mov	r9, r0
 802e0f6:	9b08      	ldr	r3, [sp, #32]
 802e0f8:	2b00      	cmp	r3, #0
 802e0fa:	dd05      	ble.n	802e108 <_dtoa_r+0x810>
 802e0fc:	4621      	mov	r1, r4
 802e0fe:	461a      	mov	r2, r3
 802e100:	4658      	mov	r0, fp
 802e102:	f005 f833 	bl	803316c <__lshift>
 802e106:	4604      	mov	r4, r0
 802e108:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802e10a:	2b00      	cmp	r3, #0
 802e10c:	d059      	beq.n	802e1c2 <_dtoa_r+0x8ca>
 802e10e:	4621      	mov	r1, r4
 802e110:	4648      	mov	r0, r9
 802e112:	f005 f897 	bl	8033244 <__mcmp>
 802e116:	2800      	cmp	r0, #0
 802e118:	da53      	bge.n	802e1c2 <_dtoa_r+0x8ca>
 802e11a:	1e7b      	subs	r3, r7, #1
 802e11c:	9304      	str	r3, [sp, #16]
 802e11e:	4649      	mov	r1, r9
 802e120:	2300      	movs	r3, #0
 802e122:	220a      	movs	r2, #10
 802e124:	4658      	mov	r0, fp
 802e126:	f004 fe45 	bl	8032db4 <__multadd>
 802e12a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e12c:	4681      	mov	r9, r0
 802e12e:	2b00      	cmp	r3, #0
 802e130:	f000 816f 	beq.w	802e412 <_dtoa_r+0xb1a>
 802e134:	2300      	movs	r3, #0
 802e136:	4629      	mov	r1, r5
 802e138:	220a      	movs	r2, #10
 802e13a:	4658      	mov	r0, fp
 802e13c:	f004 fe3a 	bl	8032db4 <__multadd>
 802e140:	9b00      	ldr	r3, [sp, #0]
 802e142:	2b00      	cmp	r3, #0
 802e144:	4605      	mov	r5, r0
 802e146:	dc67      	bgt.n	802e218 <_dtoa_r+0x920>
 802e148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e14a:	2b02      	cmp	r3, #2
 802e14c:	dc41      	bgt.n	802e1d2 <_dtoa_r+0x8da>
 802e14e:	e063      	b.n	802e218 <_dtoa_r+0x920>
 802e150:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802e152:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802e156:	e746      	b.n	802dfe6 <_dtoa_r+0x6ee>
 802e158:	9b07      	ldr	r3, [sp, #28]
 802e15a:	1e5c      	subs	r4, r3, #1
 802e15c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e15e:	42a3      	cmp	r3, r4
 802e160:	bfbf      	itttt	lt
 802e162:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802e164:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802e166:	940a      	strlt	r4, [sp, #40]	@ 0x28
 802e168:	1ae3      	sublt	r3, r4, r3
 802e16a:	bfb4      	ite	lt
 802e16c:	18d2      	addlt	r2, r2, r3
 802e16e:	1b1c      	subge	r4, r3, r4
 802e170:	9b07      	ldr	r3, [sp, #28]
 802e172:	bfbc      	itt	lt
 802e174:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 802e176:	2400      	movlt	r4, #0
 802e178:	2b00      	cmp	r3, #0
 802e17a:	bfb5      	itete	lt
 802e17c:	eba8 0603 	sublt.w	r6, r8, r3
 802e180:	9b07      	ldrge	r3, [sp, #28]
 802e182:	2300      	movlt	r3, #0
 802e184:	4646      	movge	r6, r8
 802e186:	e730      	b.n	802dfea <_dtoa_r+0x6f2>
 802e188:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802e18a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802e18c:	4646      	mov	r6, r8
 802e18e:	e735      	b.n	802dffc <_dtoa_r+0x704>
 802e190:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802e192:	e75c      	b.n	802e04e <_dtoa_r+0x756>
 802e194:	2300      	movs	r3, #0
 802e196:	e788      	b.n	802e0aa <_dtoa_r+0x7b2>
 802e198:	3fe00000 	.word	0x3fe00000
 802e19c:	40240000 	.word	0x40240000
 802e1a0:	40140000 	.word	0x40140000
 802e1a4:	9b02      	ldr	r3, [sp, #8]
 802e1a6:	e780      	b.n	802e0aa <_dtoa_r+0x7b2>
 802e1a8:	2300      	movs	r3, #0
 802e1aa:	930a      	str	r3, [sp, #40]	@ 0x28
 802e1ac:	e782      	b.n	802e0b4 <_dtoa_r+0x7bc>
 802e1ae:	d099      	beq.n	802e0e4 <_dtoa_r+0x7ec>
 802e1b0:	9a08      	ldr	r2, [sp, #32]
 802e1b2:	331c      	adds	r3, #28
 802e1b4:	441a      	add	r2, r3
 802e1b6:	4498      	add	r8, r3
 802e1b8:	441e      	add	r6, r3
 802e1ba:	9208      	str	r2, [sp, #32]
 802e1bc:	e792      	b.n	802e0e4 <_dtoa_r+0x7ec>
 802e1be:	4603      	mov	r3, r0
 802e1c0:	e7f6      	b.n	802e1b0 <_dtoa_r+0x8b8>
 802e1c2:	9b07      	ldr	r3, [sp, #28]
 802e1c4:	9704      	str	r7, [sp, #16]
 802e1c6:	2b00      	cmp	r3, #0
 802e1c8:	dc20      	bgt.n	802e20c <_dtoa_r+0x914>
 802e1ca:	9300      	str	r3, [sp, #0]
 802e1cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e1ce:	2b02      	cmp	r3, #2
 802e1d0:	dd1e      	ble.n	802e210 <_dtoa_r+0x918>
 802e1d2:	9b00      	ldr	r3, [sp, #0]
 802e1d4:	2b00      	cmp	r3, #0
 802e1d6:	f47f aec0 	bne.w	802df5a <_dtoa_r+0x662>
 802e1da:	4621      	mov	r1, r4
 802e1dc:	2205      	movs	r2, #5
 802e1de:	4658      	mov	r0, fp
 802e1e0:	f004 fde8 	bl	8032db4 <__multadd>
 802e1e4:	4601      	mov	r1, r0
 802e1e6:	4604      	mov	r4, r0
 802e1e8:	4648      	mov	r0, r9
 802e1ea:	f005 f82b 	bl	8033244 <__mcmp>
 802e1ee:	2800      	cmp	r0, #0
 802e1f0:	f77f aeb3 	ble.w	802df5a <_dtoa_r+0x662>
 802e1f4:	4656      	mov	r6, sl
 802e1f6:	2331      	movs	r3, #49	@ 0x31
 802e1f8:	f806 3b01 	strb.w	r3, [r6], #1
 802e1fc:	9b04      	ldr	r3, [sp, #16]
 802e1fe:	3301      	adds	r3, #1
 802e200:	9304      	str	r3, [sp, #16]
 802e202:	e6ae      	b.n	802df62 <_dtoa_r+0x66a>
 802e204:	9c07      	ldr	r4, [sp, #28]
 802e206:	9704      	str	r7, [sp, #16]
 802e208:	4625      	mov	r5, r4
 802e20a:	e7f3      	b.n	802e1f4 <_dtoa_r+0x8fc>
 802e20c:	9b07      	ldr	r3, [sp, #28]
 802e20e:	9300      	str	r3, [sp, #0]
 802e210:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e212:	2b00      	cmp	r3, #0
 802e214:	f000 8101 	beq.w	802e41a <_dtoa_r+0xb22>
 802e218:	2e00      	cmp	r6, #0
 802e21a:	dd05      	ble.n	802e228 <_dtoa_r+0x930>
 802e21c:	4629      	mov	r1, r5
 802e21e:	4632      	mov	r2, r6
 802e220:	4658      	mov	r0, fp
 802e222:	f004 ffa3 	bl	803316c <__lshift>
 802e226:	4605      	mov	r5, r0
 802e228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e22a:	2b00      	cmp	r3, #0
 802e22c:	d059      	beq.n	802e2e2 <_dtoa_r+0x9ea>
 802e22e:	6869      	ldr	r1, [r5, #4]
 802e230:	4658      	mov	r0, fp
 802e232:	f004 fd91 	bl	8032d58 <_Balloc>
 802e236:	4606      	mov	r6, r0
 802e238:	b920      	cbnz	r0, 802e244 <_dtoa_r+0x94c>
 802e23a:	4b83      	ldr	r3, [pc, #524]	@ (802e448 <_dtoa_r+0xb50>)
 802e23c:	4602      	mov	r2, r0
 802e23e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802e242:	e480      	b.n	802db46 <_dtoa_r+0x24e>
 802e244:	692a      	ldr	r2, [r5, #16]
 802e246:	3202      	adds	r2, #2
 802e248:	0092      	lsls	r2, r2, #2
 802e24a:	f105 010c 	add.w	r1, r5, #12
 802e24e:	300c      	adds	r0, #12
 802e250:	f7ff fa52 	bl	802d6f8 <memcpy>
 802e254:	2201      	movs	r2, #1
 802e256:	4631      	mov	r1, r6
 802e258:	4658      	mov	r0, fp
 802e25a:	f004 ff87 	bl	803316c <__lshift>
 802e25e:	f10a 0301 	add.w	r3, sl, #1
 802e262:	9307      	str	r3, [sp, #28]
 802e264:	9b00      	ldr	r3, [sp, #0]
 802e266:	4453      	add	r3, sl
 802e268:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e26a:	9b02      	ldr	r3, [sp, #8]
 802e26c:	f003 0301 	and.w	r3, r3, #1
 802e270:	462f      	mov	r7, r5
 802e272:	930a      	str	r3, [sp, #40]	@ 0x28
 802e274:	4605      	mov	r5, r0
 802e276:	9b07      	ldr	r3, [sp, #28]
 802e278:	4621      	mov	r1, r4
 802e27a:	3b01      	subs	r3, #1
 802e27c:	4648      	mov	r0, r9
 802e27e:	9300      	str	r3, [sp, #0]
 802e280:	f7ff faaf 	bl	802d7e2 <quorem>
 802e284:	4639      	mov	r1, r7
 802e286:	9002      	str	r0, [sp, #8]
 802e288:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802e28c:	4648      	mov	r0, r9
 802e28e:	f004 ffd9 	bl	8033244 <__mcmp>
 802e292:	462a      	mov	r2, r5
 802e294:	9008      	str	r0, [sp, #32]
 802e296:	4621      	mov	r1, r4
 802e298:	4658      	mov	r0, fp
 802e29a:	f004 ffef 	bl	803327c <__mdiff>
 802e29e:	68c2      	ldr	r2, [r0, #12]
 802e2a0:	4606      	mov	r6, r0
 802e2a2:	bb02      	cbnz	r2, 802e2e6 <_dtoa_r+0x9ee>
 802e2a4:	4601      	mov	r1, r0
 802e2a6:	4648      	mov	r0, r9
 802e2a8:	f004 ffcc 	bl	8033244 <__mcmp>
 802e2ac:	4602      	mov	r2, r0
 802e2ae:	4631      	mov	r1, r6
 802e2b0:	4658      	mov	r0, fp
 802e2b2:	920e      	str	r2, [sp, #56]	@ 0x38
 802e2b4:	f004 fd75 	bl	8032da2 <_Bfree>
 802e2b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e2ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802e2bc:	9e07      	ldr	r6, [sp, #28]
 802e2be:	ea43 0102 	orr.w	r1, r3, r2
 802e2c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e2c4:	4319      	orrs	r1, r3
 802e2c6:	d110      	bne.n	802e2ea <_dtoa_r+0x9f2>
 802e2c8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802e2cc:	d029      	beq.n	802e322 <_dtoa_r+0xa2a>
 802e2ce:	9b08      	ldr	r3, [sp, #32]
 802e2d0:	2b00      	cmp	r3, #0
 802e2d2:	dd02      	ble.n	802e2da <_dtoa_r+0x9e2>
 802e2d4:	9b02      	ldr	r3, [sp, #8]
 802e2d6:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 802e2da:	9b00      	ldr	r3, [sp, #0]
 802e2dc:	f883 8000 	strb.w	r8, [r3]
 802e2e0:	e640      	b.n	802df64 <_dtoa_r+0x66c>
 802e2e2:	4628      	mov	r0, r5
 802e2e4:	e7bb      	b.n	802e25e <_dtoa_r+0x966>
 802e2e6:	2201      	movs	r2, #1
 802e2e8:	e7e1      	b.n	802e2ae <_dtoa_r+0x9b6>
 802e2ea:	9b08      	ldr	r3, [sp, #32]
 802e2ec:	2b00      	cmp	r3, #0
 802e2ee:	db04      	blt.n	802e2fa <_dtoa_r+0xa02>
 802e2f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802e2f2:	430b      	orrs	r3, r1
 802e2f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802e2f6:	430b      	orrs	r3, r1
 802e2f8:	d120      	bne.n	802e33c <_dtoa_r+0xa44>
 802e2fa:	2a00      	cmp	r2, #0
 802e2fc:	dded      	ble.n	802e2da <_dtoa_r+0x9e2>
 802e2fe:	4649      	mov	r1, r9
 802e300:	2201      	movs	r2, #1
 802e302:	4658      	mov	r0, fp
 802e304:	f004 ff32 	bl	803316c <__lshift>
 802e308:	4621      	mov	r1, r4
 802e30a:	4681      	mov	r9, r0
 802e30c:	f004 ff9a 	bl	8033244 <__mcmp>
 802e310:	2800      	cmp	r0, #0
 802e312:	dc03      	bgt.n	802e31c <_dtoa_r+0xa24>
 802e314:	d1e1      	bne.n	802e2da <_dtoa_r+0x9e2>
 802e316:	f018 0f01 	tst.w	r8, #1
 802e31a:	d0de      	beq.n	802e2da <_dtoa_r+0x9e2>
 802e31c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802e320:	d1d8      	bne.n	802e2d4 <_dtoa_r+0x9dc>
 802e322:	9a00      	ldr	r2, [sp, #0]
 802e324:	2339      	movs	r3, #57	@ 0x39
 802e326:	7013      	strb	r3, [r2, #0]
 802e328:	4633      	mov	r3, r6
 802e32a:	461e      	mov	r6, r3
 802e32c:	3b01      	subs	r3, #1
 802e32e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802e332:	2a39      	cmp	r2, #57	@ 0x39
 802e334:	d052      	beq.n	802e3dc <_dtoa_r+0xae4>
 802e336:	3201      	adds	r2, #1
 802e338:	701a      	strb	r2, [r3, #0]
 802e33a:	e613      	b.n	802df64 <_dtoa_r+0x66c>
 802e33c:	2a00      	cmp	r2, #0
 802e33e:	dd07      	ble.n	802e350 <_dtoa_r+0xa58>
 802e340:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802e344:	d0ed      	beq.n	802e322 <_dtoa_r+0xa2a>
 802e346:	9a00      	ldr	r2, [sp, #0]
 802e348:	f108 0301 	add.w	r3, r8, #1
 802e34c:	7013      	strb	r3, [r2, #0]
 802e34e:	e609      	b.n	802df64 <_dtoa_r+0x66c>
 802e350:	9b07      	ldr	r3, [sp, #28]
 802e352:	9a07      	ldr	r2, [sp, #28]
 802e354:	f803 8c01 	strb.w	r8, [r3, #-1]
 802e358:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e35a:	4293      	cmp	r3, r2
 802e35c:	d028      	beq.n	802e3b0 <_dtoa_r+0xab8>
 802e35e:	4649      	mov	r1, r9
 802e360:	2300      	movs	r3, #0
 802e362:	220a      	movs	r2, #10
 802e364:	4658      	mov	r0, fp
 802e366:	f004 fd25 	bl	8032db4 <__multadd>
 802e36a:	42af      	cmp	r7, r5
 802e36c:	4681      	mov	r9, r0
 802e36e:	f04f 0300 	mov.w	r3, #0
 802e372:	f04f 020a 	mov.w	r2, #10
 802e376:	4639      	mov	r1, r7
 802e378:	4658      	mov	r0, fp
 802e37a:	d107      	bne.n	802e38c <_dtoa_r+0xa94>
 802e37c:	f004 fd1a 	bl	8032db4 <__multadd>
 802e380:	4607      	mov	r7, r0
 802e382:	4605      	mov	r5, r0
 802e384:	9b07      	ldr	r3, [sp, #28]
 802e386:	3301      	adds	r3, #1
 802e388:	9307      	str	r3, [sp, #28]
 802e38a:	e774      	b.n	802e276 <_dtoa_r+0x97e>
 802e38c:	f004 fd12 	bl	8032db4 <__multadd>
 802e390:	4629      	mov	r1, r5
 802e392:	4607      	mov	r7, r0
 802e394:	2300      	movs	r3, #0
 802e396:	220a      	movs	r2, #10
 802e398:	4658      	mov	r0, fp
 802e39a:	f004 fd0b 	bl	8032db4 <__multadd>
 802e39e:	4605      	mov	r5, r0
 802e3a0:	e7f0      	b.n	802e384 <_dtoa_r+0xa8c>
 802e3a2:	9b00      	ldr	r3, [sp, #0]
 802e3a4:	2b00      	cmp	r3, #0
 802e3a6:	bfcc      	ite	gt
 802e3a8:	461e      	movgt	r6, r3
 802e3aa:	2601      	movle	r6, #1
 802e3ac:	4456      	add	r6, sl
 802e3ae:	2700      	movs	r7, #0
 802e3b0:	4649      	mov	r1, r9
 802e3b2:	2201      	movs	r2, #1
 802e3b4:	4658      	mov	r0, fp
 802e3b6:	f004 fed9 	bl	803316c <__lshift>
 802e3ba:	4621      	mov	r1, r4
 802e3bc:	4681      	mov	r9, r0
 802e3be:	f004 ff41 	bl	8033244 <__mcmp>
 802e3c2:	2800      	cmp	r0, #0
 802e3c4:	dcb0      	bgt.n	802e328 <_dtoa_r+0xa30>
 802e3c6:	d102      	bne.n	802e3ce <_dtoa_r+0xad6>
 802e3c8:	f018 0f01 	tst.w	r8, #1
 802e3cc:	d1ac      	bne.n	802e328 <_dtoa_r+0xa30>
 802e3ce:	4633      	mov	r3, r6
 802e3d0:	461e      	mov	r6, r3
 802e3d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802e3d6:	2a30      	cmp	r2, #48	@ 0x30
 802e3d8:	d0fa      	beq.n	802e3d0 <_dtoa_r+0xad8>
 802e3da:	e5c3      	b.n	802df64 <_dtoa_r+0x66c>
 802e3dc:	459a      	cmp	sl, r3
 802e3de:	d1a4      	bne.n	802e32a <_dtoa_r+0xa32>
 802e3e0:	9b04      	ldr	r3, [sp, #16]
 802e3e2:	3301      	adds	r3, #1
 802e3e4:	9304      	str	r3, [sp, #16]
 802e3e6:	2331      	movs	r3, #49	@ 0x31
 802e3e8:	f88a 3000 	strb.w	r3, [sl]
 802e3ec:	e5ba      	b.n	802df64 <_dtoa_r+0x66c>
 802e3ee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e3f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 802e44c <_dtoa_r+0xb54>
 802e3f4:	2b00      	cmp	r3, #0
 802e3f6:	f43f aab6 	beq.w	802d966 <_dtoa_r+0x6e>
 802e3fa:	f10a 0308 	add.w	r3, sl, #8
 802e3fe:	f7ff bab0 	b.w	802d962 <_dtoa_r+0x6a>
 802e402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e404:	2b01      	cmp	r3, #1
 802e406:	f77f ae3a 	ble.w	802e07e <_dtoa_r+0x786>
 802e40a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802e40c:	930a      	str	r3, [sp, #40]	@ 0x28
 802e40e:	2001      	movs	r0, #1
 802e410:	e658      	b.n	802e0c4 <_dtoa_r+0x7cc>
 802e412:	9b00      	ldr	r3, [sp, #0]
 802e414:	2b00      	cmp	r3, #0
 802e416:	f77f aed9 	ble.w	802e1cc <_dtoa_r+0x8d4>
 802e41a:	4656      	mov	r6, sl
 802e41c:	4621      	mov	r1, r4
 802e41e:	4648      	mov	r0, r9
 802e420:	f7ff f9df 	bl	802d7e2 <quorem>
 802e424:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802e428:	f806 8b01 	strb.w	r8, [r6], #1
 802e42c:	9b00      	ldr	r3, [sp, #0]
 802e42e:	eba6 020a 	sub.w	r2, r6, sl
 802e432:	4293      	cmp	r3, r2
 802e434:	ddb5      	ble.n	802e3a2 <_dtoa_r+0xaaa>
 802e436:	4649      	mov	r1, r9
 802e438:	2300      	movs	r3, #0
 802e43a:	220a      	movs	r2, #10
 802e43c:	4658      	mov	r0, fp
 802e43e:	f004 fcb9 	bl	8032db4 <__multadd>
 802e442:	4681      	mov	r9, r0
 802e444:	e7ea      	b.n	802e41c <_dtoa_r+0xb24>
 802e446:	bf00      	nop
 802e448:	0803b4d6 	.word	0x0803b4d6
 802e44c:	0803b4c9 	.word	0x0803b4c9

0802e450 <_malloc_trim_r>:
 802e450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e454:	4606      	mov	r6, r0
 802e456:	2008      	movs	r0, #8
 802e458:	4689      	mov	r9, r1
 802e45a:	f006 fb53 	bl	8034b04 <sysconf>
 802e45e:	4f24      	ldr	r7, [pc, #144]	@ (802e4f0 <_malloc_trim_r+0xa0>)
 802e460:	4680      	mov	r8, r0
 802e462:	4630      	mov	r0, r6
 802e464:	f004 fc6c 	bl	8032d40 <__malloc_lock>
 802e468:	68bb      	ldr	r3, [r7, #8]
 802e46a:	685d      	ldr	r5, [r3, #4]
 802e46c:	f025 0503 	bic.w	r5, r5, #3
 802e470:	f1a5 0411 	sub.w	r4, r5, #17
 802e474:	eba4 0409 	sub.w	r4, r4, r9
 802e478:	4444      	add	r4, r8
 802e47a:	fbb4 f4f8 	udiv	r4, r4, r8
 802e47e:	3c01      	subs	r4, #1
 802e480:	fb08 f404 	mul.w	r4, r8, r4
 802e484:	45a0      	cmp	r8, r4
 802e486:	dd05      	ble.n	802e494 <_malloc_trim_r+0x44>
 802e488:	4630      	mov	r0, r6
 802e48a:	f004 fc5f 	bl	8032d4c <__malloc_unlock>
 802e48e:	2000      	movs	r0, #0
 802e490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e494:	2100      	movs	r1, #0
 802e496:	4630      	mov	r0, r6
 802e498:	f006 fb24 	bl	8034ae4 <_sbrk_r>
 802e49c:	68bb      	ldr	r3, [r7, #8]
 802e49e:	442b      	add	r3, r5
 802e4a0:	4298      	cmp	r0, r3
 802e4a2:	d1f1      	bne.n	802e488 <_malloc_trim_r+0x38>
 802e4a4:	4261      	negs	r1, r4
 802e4a6:	4630      	mov	r0, r6
 802e4a8:	f006 fb1c 	bl	8034ae4 <_sbrk_r>
 802e4ac:	3001      	adds	r0, #1
 802e4ae:	d110      	bne.n	802e4d2 <_malloc_trim_r+0x82>
 802e4b0:	2100      	movs	r1, #0
 802e4b2:	4630      	mov	r0, r6
 802e4b4:	f006 fb16 	bl	8034ae4 <_sbrk_r>
 802e4b8:	68ba      	ldr	r2, [r7, #8]
 802e4ba:	1a83      	subs	r3, r0, r2
 802e4bc:	2b0f      	cmp	r3, #15
 802e4be:	dde3      	ble.n	802e488 <_malloc_trim_r+0x38>
 802e4c0:	490c      	ldr	r1, [pc, #48]	@ (802e4f4 <_malloc_trim_r+0xa4>)
 802e4c2:	6809      	ldr	r1, [r1, #0]
 802e4c4:	1a40      	subs	r0, r0, r1
 802e4c6:	490c      	ldr	r1, [pc, #48]	@ (802e4f8 <_malloc_trim_r+0xa8>)
 802e4c8:	f043 0301 	orr.w	r3, r3, #1
 802e4cc:	6008      	str	r0, [r1, #0]
 802e4ce:	6053      	str	r3, [r2, #4]
 802e4d0:	e7da      	b.n	802e488 <_malloc_trim_r+0x38>
 802e4d2:	68bb      	ldr	r3, [r7, #8]
 802e4d4:	4a08      	ldr	r2, [pc, #32]	@ (802e4f8 <_malloc_trim_r+0xa8>)
 802e4d6:	1b2d      	subs	r5, r5, r4
 802e4d8:	f045 0501 	orr.w	r5, r5, #1
 802e4dc:	605d      	str	r5, [r3, #4]
 802e4de:	6813      	ldr	r3, [r2, #0]
 802e4e0:	4630      	mov	r0, r6
 802e4e2:	1b1b      	subs	r3, r3, r4
 802e4e4:	6013      	str	r3, [r2, #0]
 802e4e6:	f004 fc31 	bl	8032d4c <__malloc_unlock>
 802e4ea:	2001      	movs	r0, #1
 802e4ec:	e7d0      	b.n	802e490 <_malloc_trim_r+0x40>
 802e4ee:	bf00      	nop
 802e4f0:	2000040c 	.word	0x2000040c
 802e4f4:	20000404 	.word	0x20000404
 802e4f8:	2001a03c 	.word	0x2001a03c

0802e4fc <_free_r>:
 802e4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e4fe:	4604      	mov	r4, r0
 802e500:	460f      	mov	r7, r1
 802e502:	2900      	cmp	r1, #0
 802e504:	f000 80b1 	beq.w	802e66a <_free_r+0x16e>
 802e508:	f004 fc1a 	bl	8032d40 <__malloc_lock>
 802e50c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 802e510:	4d56      	ldr	r5, [pc, #344]	@ (802e66c <_free_r+0x170>)
 802e512:	f022 0001 	bic.w	r0, r2, #1
 802e516:	f1a7 0308 	sub.w	r3, r7, #8
 802e51a:	eb03 0c00 	add.w	ip, r3, r0
 802e51e:	68a9      	ldr	r1, [r5, #8]
 802e520:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802e524:	4561      	cmp	r1, ip
 802e526:	f026 0603 	bic.w	r6, r6, #3
 802e52a:	f002 0201 	and.w	r2, r2, #1
 802e52e:	d11b      	bne.n	802e568 <_free_r+0x6c>
 802e530:	4406      	add	r6, r0
 802e532:	b93a      	cbnz	r2, 802e544 <_free_r+0x48>
 802e534:	f857 2c08 	ldr.w	r2, [r7, #-8]
 802e538:	1a9b      	subs	r3, r3, r2
 802e53a:	4416      	add	r6, r2
 802e53c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 802e540:	60ca      	str	r2, [r1, #12]
 802e542:	6091      	str	r1, [r2, #8]
 802e544:	f046 0201 	orr.w	r2, r6, #1
 802e548:	605a      	str	r2, [r3, #4]
 802e54a:	60ab      	str	r3, [r5, #8]
 802e54c:	4b48      	ldr	r3, [pc, #288]	@ (802e670 <_free_r+0x174>)
 802e54e:	681b      	ldr	r3, [r3, #0]
 802e550:	42b3      	cmp	r3, r6
 802e552:	d804      	bhi.n	802e55e <_free_r+0x62>
 802e554:	4b47      	ldr	r3, [pc, #284]	@ (802e674 <_free_r+0x178>)
 802e556:	4620      	mov	r0, r4
 802e558:	6819      	ldr	r1, [r3, #0]
 802e55a:	f7ff ff79 	bl	802e450 <_malloc_trim_r>
 802e55e:	4620      	mov	r0, r4
 802e560:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802e564:	f004 bbf2 	b.w	8032d4c <__malloc_unlock>
 802e568:	f8cc 6004 	str.w	r6, [ip, #4]
 802e56c:	2a00      	cmp	r2, #0
 802e56e:	d138      	bne.n	802e5e2 <_free_r+0xe6>
 802e570:	f857 1c08 	ldr.w	r1, [r7, #-8]
 802e574:	1a5b      	subs	r3, r3, r1
 802e576:	4408      	add	r0, r1
 802e578:	6899      	ldr	r1, [r3, #8]
 802e57a:	f105 0708 	add.w	r7, r5, #8
 802e57e:	42b9      	cmp	r1, r7
 802e580:	d031      	beq.n	802e5e6 <_free_r+0xea>
 802e582:	68df      	ldr	r7, [r3, #12]
 802e584:	60cf      	str	r7, [r1, #12]
 802e586:	60b9      	str	r1, [r7, #8]
 802e588:	eb0c 0106 	add.w	r1, ip, r6
 802e58c:	6849      	ldr	r1, [r1, #4]
 802e58e:	07c9      	lsls	r1, r1, #31
 802e590:	d40b      	bmi.n	802e5aa <_free_r+0xae>
 802e592:	f8dc 1008 	ldr.w	r1, [ip, #8]
 802e596:	4430      	add	r0, r6
 802e598:	bb3a      	cbnz	r2, 802e5ea <_free_r+0xee>
 802e59a:	4e37      	ldr	r6, [pc, #220]	@ (802e678 <_free_r+0x17c>)
 802e59c:	42b1      	cmp	r1, r6
 802e59e:	d124      	bne.n	802e5ea <_free_r+0xee>
 802e5a0:	e9c5 3304 	strd	r3, r3, [r5, #16]
 802e5a4:	e9c3 1102 	strd	r1, r1, [r3, #8]
 802e5a8:	2201      	movs	r2, #1
 802e5aa:	f040 0101 	orr.w	r1, r0, #1
 802e5ae:	6059      	str	r1, [r3, #4]
 802e5b0:	5018      	str	r0, [r3, r0]
 802e5b2:	2a00      	cmp	r2, #0
 802e5b4:	d1d3      	bne.n	802e55e <_free_r+0x62>
 802e5b6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 802e5ba:	d21b      	bcs.n	802e5f4 <_free_r+0xf8>
 802e5bc:	08c2      	lsrs	r2, r0, #3
 802e5be:	2101      	movs	r1, #1
 802e5c0:	0940      	lsrs	r0, r0, #5
 802e5c2:	4081      	lsls	r1, r0
 802e5c4:	6868      	ldr	r0, [r5, #4]
 802e5c6:	3201      	adds	r2, #1
 802e5c8:	4301      	orrs	r1, r0
 802e5ca:	6069      	str	r1, [r5, #4]
 802e5cc:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 802e5d0:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 802e5d4:	3908      	subs	r1, #8
 802e5d6:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802e5da:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 802e5de:	60c3      	str	r3, [r0, #12]
 802e5e0:	e7bd      	b.n	802e55e <_free_r+0x62>
 802e5e2:	2200      	movs	r2, #0
 802e5e4:	e7d0      	b.n	802e588 <_free_r+0x8c>
 802e5e6:	2201      	movs	r2, #1
 802e5e8:	e7ce      	b.n	802e588 <_free_r+0x8c>
 802e5ea:	f8dc 600c 	ldr.w	r6, [ip, #12]
 802e5ee:	60ce      	str	r6, [r1, #12]
 802e5f0:	60b1      	str	r1, [r6, #8]
 802e5f2:	e7da      	b.n	802e5aa <_free_r+0xae>
 802e5f4:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 802e5f8:	ea4f 2250 	mov.w	r2, r0, lsr #9
 802e5fc:	d214      	bcs.n	802e628 <_free_r+0x12c>
 802e5fe:	0982      	lsrs	r2, r0, #6
 802e600:	3238      	adds	r2, #56	@ 0x38
 802e602:	1c51      	adds	r1, r2, #1
 802e604:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 802e608:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 802e60c:	428e      	cmp	r6, r1
 802e60e:	d125      	bne.n	802e65c <_free_r+0x160>
 802e610:	2001      	movs	r0, #1
 802e612:	1092      	asrs	r2, r2, #2
 802e614:	fa00 f202 	lsl.w	r2, r0, r2
 802e618:	6868      	ldr	r0, [r5, #4]
 802e61a:	4302      	orrs	r2, r0
 802e61c:	606a      	str	r2, [r5, #4]
 802e61e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 802e622:	60b3      	str	r3, [r6, #8]
 802e624:	60cb      	str	r3, [r1, #12]
 802e626:	e79a      	b.n	802e55e <_free_r+0x62>
 802e628:	2a14      	cmp	r2, #20
 802e62a:	d801      	bhi.n	802e630 <_free_r+0x134>
 802e62c:	325b      	adds	r2, #91	@ 0x5b
 802e62e:	e7e8      	b.n	802e602 <_free_r+0x106>
 802e630:	2a54      	cmp	r2, #84	@ 0x54
 802e632:	d802      	bhi.n	802e63a <_free_r+0x13e>
 802e634:	0b02      	lsrs	r2, r0, #12
 802e636:	326e      	adds	r2, #110	@ 0x6e
 802e638:	e7e3      	b.n	802e602 <_free_r+0x106>
 802e63a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802e63e:	d802      	bhi.n	802e646 <_free_r+0x14a>
 802e640:	0bc2      	lsrs	r2, r0, #15
 802e642:	3277      	adds	r2, #119	@ 0x77
 802e644:	e7dd      	b.n	802e602 <_free_r+0x106>
 802e646:	f240 5154 	movw	r1, #1364	@ 0x554
 802e64a:	428a      	cmp	r2, r1
 802e64c:	bf9a      	itte	ls
 802e64e:	0c82      	lsrls	r2, r0, #18
 802e650:	327c      	addls	r2, #124	@ 0x7c
 802e652:	227e      	movhi	r2, #126	@ 0x7e
 802e654:	e7d5      	b.n	802e602 <_free_r+0x106>
 802e656:	6889      	ldr	r1, [r1, #8]
 802e658:	428e      	cmp	r6, r1
 802e65a:	d004      	beq.n	802e666 <_free_r+0x16a>
 802e65c:	684a      	ldr	r2, [r1, #4]
 802e65e:	f022 0203 	bic.w	r2, r2, #3
 802e662:	4282      	cmp	r2, r0
 802e664:	d8f7      	bhi.n	802e656 <_free_r+0x15a>
 802e666:	68ce      	ldr	r6, [r1, #12]
 802e668:	e7d9      	b.n	802e61e <_free_r+0x122>
 802e66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e66c:	2000040c 	.word	0x2000040c
 802e670:	20000408 	.word	0x20000408
 802e674:	2001a06c 	.word	0x2001a06c
 802e678:	20000414 	.word	0x20000414

0802e67c <_findenv_r>:
 802e67c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e680:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 802e6f0 <_findenv_r+0x74>
 802e684:	4606      	mov	r6, r0
 802e686:	4689      	mov	r9, r1
 802e688:	4617      	mov	r7, r2
 802e68a:	f006 fc31 	bl	8034ef0 <__env_lock>
 802e68e:	f8da 4000 	ldr.w	r4, [sl]
 802e692:	b134      	cbz	r4, 802e6a2 <_findenv_r+0x26>
 802e694:	464b      	mov	r3, r9
 802e696:	4698      	mov	r8, r3
 802e698:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e69c:	b13a      	cbz	r2, 802e6ae <_findenv_r+0x32>
 802e69e:	2a3d      	cmp	r2, #61	@ 0x3d
 802e6a0:	d1f9      	bne.n	802e696 <_findenv_r+0x1a>
 802e6a2:	4630      	mov	r0, r6
 802e6a4:	f006 fc2a 	bl	8034efc <__env_unlock>
 802e6a8:	2000      	movs	r0, #0
 802e6aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e6ae:	eba8 0809 	sub.w	r8, r8, r9
 802e6b2:	46a3      	mov	fp, r4
 802e6b4:	f854 0b04 	ldr.w	r0, [r4], #4
 802e6b8:	2800      	cmp	r0, #0
 802e6ba:	d0f2      	beq.n	802e6a2 <_findenv_r+0x26>
 802e6bc:	4642      	mov	r2, r8
 802e6be:	4649      	mov	r1, r9
 802e6c0:	f7fd fe13 	bl	802c2ea <strncmp>
 802e6c4:	2800      	cmp	r0, #0
 802e6c6:	d1f4      	bne.n	802e6b2 <_findenv_r+0x36>
 802e6c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802e6cc:	eb03 0508 	add.w	r5, r3, r8
 802e6d0:	f813 3008 	ldrb.w	r3, [r3, r8]
 802e6d4:	2b3d      	cmp	r3, #61	@ 0x3d
 802e6d6:	d1ec      	bne.n	802e6b2 <_findenv_r+0x36>
 802e6d8:	f8da 3000 	ldr.w	r3, [sl]
 802e6dc:	ebab 0303 	sub.w	r3, fp, r3
 802e6e0:	109b      	asrs	r3, r3, #2
 802e6e2:	4630      	mov	r0, r6
 802e6e4:	603b      	str	r3, [r7, #0]
 802e6e6:	f006 fc09 	bl	8034efc <__env_unlock>
 802e6ea:	1c68      	adds	r0, r5, #1
 802e6ec:	e7dd      	b.n	802e6aa <_findenv_r+0x2e>
 802e6ee:	bf00      	nop
 802e6f0:	20000014 	.word	0x20000014

0802e6f4 <_getenv_r>:
 802e6f4:	b507      	push	{r0, r1, r2, lr}
 802e6f6:	aa01      	add	r2, sp, #4
 802e6f8:	f7ff ffc0 	bl	802e67c <_findenv_r>
 802e6fc:	b003      	add	sp, #12
 802e6fe:	f85d fb04 	ldr.w	pc, [sp], #4

0802e702 <labs>:
 802e702:	2800      	cmp	r0, #0
 802e704:	bfb8      	it	lt
 802e706:	4240      	neglt	r0, r0
 802e708:	4770      	bx	lr
	...

0802e70c <malloc>:
 802e70c:	4b02      	ldr	r3, [pc, #8]	@ (802e718 <malloc+0xc>)
 802e70e:	4601      	mov	r1, r0
 802e710:	6818      	ldr	r0, [r3, #0]
 802e712:	f000 b80b 	b.w	802e72c <_malloc_r>
 802e716:	bf00      	nop
 802e718:	200002d8 	.word	0x200002d8

0802e71c <free>:
 802e71c:	4b02      	ldr	r3, [pc, #8]	@ (802e728 <free+0xc>)
 802e71e:	4601      	mov	r1, r0
 802e720:	6818      	ldr	r0, [r3, #0]
 802e722:	f7ff beeb 	b.w	802e4fc <_free_r>
 802e726:	bf00      	nop
 802e728:	200002d8 	.word	0x200002d8

0802e72c <_malloc_r>:
 802e72c:	f101 030b 	add.w	r3, r1, #11
 802e730:	2b16      	cmp	r3, #22
 802e732:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e736:	4605      	mov	r5, r0
 802e738:	d906      	bls.n	802e748 <_malloc_r+0x1c>
 802e73a:	f033 0707 	bics.w	r7, r3, #7
 802e73e:	d504      	bpl.n	802e74a <_malloc_r+0x1e>
 802e740:	230c      	movs	r3, #12
 802e742:	602b      	str	r3, [r5, #0]
 802e744:	2400      	movs	r4, #0
 802e746:	e1a3      	b.n	802ea90 <_malloc_r+0x364>
 802e748:	2710      	movs	r7, #16
 802e74a:	42b9      	cmp	r1, r7
 802e74c:	d8f8      	bhi.n	802e740 <_malloc_r+0x14>
 802e74e:	4628      	mov	r0, r5
 802e750:	f004 faf6 	bl	8032d40 <__malloc_lock>
 802e754:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 802e758:	4eaf      	ldr	r6, [pc, #700]	@ (802ea18 <_malloc_r+0x2ec>)
 802e75a:	d237      	bcs.n	802e7cc <_malloc_r+0xa0>
 802e75c:	f107 0208 	add.w	r2, r7, #8
 802e760:	4432      	add	r2, r6
 802e762:	f1a2 0108 	sub.w	r1, r2, #8
 802e766:	6854      	ldr	r4, [r2, #4]
 802e768:	428c      	cmp	r4, r1
 802e76a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 802e76e:	d102      	bne.n	802e776 <_malloc_r+0x4a>
 802e770:	68d4      	ldr	r4, [r2, #12]
 802e772:	42a2      	cmp	r2, r4
 802e774:	d010      	beq.n	802e798 <_malloc_r+0x6c>
 802e776:	6863      	ldr	r3, [r4, #4]
 802e778:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 802e77c:	f023 0303 	bic.w	r3, r3, #3
 802e780:	60ca      	str	r2, [r1, #12]
 802e782:	4423      	add	r3, r4
 802e784:	6091      	str	r1, [r2, #8]
 802e786:	685a      	ldr	r2, [r3, #4]
 802e788:	f042 0201 	orr.w	r2, r2, #1
 802e78c:	605a      	str	r2, [r3, #4]
 802e78e:	4628      	mov	r0, r5
 802e790:	f004 fadc 	bl	8032d4c <__malloc_unlock>
 802e794:	3408      	adds	r4, #8
 802e796:	e17b      	b.n	802ea90 <_malloc_r+0x364>
 802e798:	3302      	adds	r3, #2
 802e79a:	6934      	ldr	r4, [r6, #16]
 802e79c:	499f      	ldr	r1, [pc, #636]	@ (802ea1c <_malloc_r+0x2f0>)
 802e79e:	428c      	cmp	r4, r1
 802e7a0:	d077      	beq.n	802e892 <_malloc_r+0x166>
 802e7a2:	6862      	ldr	r2, [r4, #4]
 802e7a4:	f022 0c03 	bic.w	ip, r2, #3
 802e7a8:	ebac 0007 	sub.w	r0, ip, r7
 802e7ac:	280f      	cmp	r0, #15
 802e7ae:	dd48      	ble.n	802e842 <_malloc_r+0x116>
 802e7b0:	19e2      	adds	r2, r4, r7
 802e7b2:	f040 0301 	orr.w	r3, r0, #1
 802e7b6:	f047 0701 	orr.w	r7, r7, #1
 802e7ba:	6067      	str	r7, [r4, #4]
 802e7bc:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802e7c0:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802e7c4:	6053      	str	r3, [r2, #4]
 802e7c6:	f844 000c 	str.w	r0, [r4, ip]
 802e7ca:	e7e0      	b.n	802e78e <_malloc_r+0x62>
 802e7cc:	0a7b      	lsrs	r3, r7, #9
 802e7ce:	d02a      	beq.n	802e826 <_malloc_r+0xfa>
 802e7d0:	2b04      	cmp	r3, #4
 802e7d2:	d812      	bhi.n	802e7fa <_malloc_r+0xce>
 802e7d4:	09bb      	lsrs	r3, r7, #6
 802e7d6:	3338      	adds	r3, #56	@ 0x38
 802e7d8:	1c5a      	adds	r2, r3, #1
 802e7da:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 802e7de:	f1a2 0c08 	sub.w	ip, r2, #8
 802e7e2:	6854      	ldr	r4, [r2, #4]
 802e7e4:	4564      	cmp	r4, ip
 802e7e6:	d006      	beq.n	802e7f6 <_malloc_r+0xca>
 802e7e8:	6862      	ldr	r2, [r4, #4]
 802e7ea:	f022 0203 	bic.w	r2, r2, #3
 802e7ee:	1bd0      	subs	r0, r2, r7
 802e7f0:	280f      	cmp	r0, #15
 802e7f2:	dd1c      	ble.n	802e82e <_malloc_r+0x102>
 802e7f4:	3b01      	subs	r3, #1
 802e7f6:	3301      	adds	r3, #1
 802e7f8:	e7cf      	b.n	802e79a <_malloc_r+0x6e>
 802e7fa:	2b14      	cmp	r3, #20
 802e7fc:	d801      	bhi.n	802e802 <_malloc_r+0xd6>
 802e7fe:	335b      	adds	r3, #91	@ 0x5b
 802e800:	e7ea      	b.n	802e7d8 <_malloc_r+0xac>
 802e802:	2b54      	cmp	r3, #84	@ 0x54
 802e804:	d802      	bhi.n	802e80c <_malloc_r+0xe0>
 802e806:	0b3b      	lsrs	r3, r7, #12
 802e808:	336e      	adds	r3, #110	@ 0x6e
 802e80a:	e7e5      	b.n	802e7d8 <_malloc_r+0xac>
 802e80c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 802e810:	d802      	bhi.n	802e818 <_malloc_r+0xec>
 802e812:	0bfb      	lsrs	r3, r7, #15
 802e814:	3377      	adds	r3, #119	@ 0x77
 802e816:	e7df      	b.n	802e7d8 <_malloc_r+0xac>
 802e818:	f240 5254 	movw	r2, #1364	@ 0x554
 802e81c:	4293      	cmp	r3, r2
 802e81e:	d804      	bhi.n	802e82a <_malloc_r+0xfe>
 802e820:	0cbb      	lsrs	r3, r7, #18
 802e822:	337c      	adds	r3, #124	@ 0x7c
 802e824:	e7d8      	b.n	802e7d8 <_malloc_r+0xac>
 802e826:	233f      	movs	r3, #63	@ 0x3f
 802e828:	e7d6      	b.n	802e7d8 <_malloc_r+0xac>
 802e82a:	237e      	movs	r3, #126	@ 0x7e
 802e82c:	e7d4      	b.n	802e7d8 <_malloc_r+0xac>
 802e82e:	2800      	cmp	r0, #0
 802e830:	68e1      	ldr	r1, [r4, #12]
 802e832:	db04      	blt.n	802e83e <_malloc_r+0x112>
 802e834:	68a3      	ldr	r3, [r4, #8]
 802e836:	60d9      	str	r1, [r3, #12]
 802e838:	608b      	str	r3, [r1, #8]
 802e83a:	18a3      	adds	r3, r4, r2
 802e83c:	e7a3      	b.n	802e786 <_malloc_r+0x5a>
 802e83e:	460c      	mov	r4, r1
 802e840:	e7d0      	b.n	802e7e4 <_malloc_r+0xb8>
 802e842:	2800      	cmp	r0, #0
 802e844:	e9c6 1104 	strd	r1, r1, [r6, #16]
 802e848:	db07      	blt.n	802e85a <_malloc_r+0x12e>
 802e84a:	44a4      	add	ip, r4
 802e84c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802e850:	f043 0301 	orr.w	r3, r3, #1
 802e854:	f8cc 3004 	str.w	r3, [ip, #4]
 802e858:	e799      	b.n	802e78e <_malloc_r+0x62>
 802e85a:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 802e85e:	6870      	ldr	r0, [r6, #4]
 802e860:	f080 8095 	bcs.w	802e98e <_malloc_r+0x262>
 802e864:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 802e868:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 802e86c:	f04f 0c01 	mov.w	ip, #1
 802e870:	3201      	adds	r2, #1
 802e872:	fa0c fc0e 	lsl.w	ip, ip, lr
 802e876:	ea4c 0000 	orr.w	r0, ip, r0
 802e87a:	6070      	str	r0, [r6, #4]
 802e87c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 802e880:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 802e884:	3808      	subs	r0, #8
 802e886:	e9c4 c002 	strd	ip, r0, [r4, #8]
 802e88a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 802e88e:	f8cc 400c 	str.w	r4, [ip, #12]
 802e892:	1098      	asrs	r0, r3, #2
 802e894:	2201      	movs	r2, #1
 802e896:	4082      	lsls	r2, r0
 802e898:	6870      	ldr	r0, [r6, #4]
 802e89a:	4290      	cmp	r0, r2
 802e89c:	d326      	bcc.n	802e8ec <_malloc_r+0x1c0>
 802e89e:	4210      	tst	r0, r2
 802e8a0:	d106      	bne.n	802e8b0 <_malloc_r+0x184>
 802e8a2:	f023 0303 	bic.w	r3, r3, #3
 802e8a6:	0052      	lsls	r2, r2, #1
 802e8a8:	4210      	tst	r0, r2
 802e8aa:	f103 0304 	add.w	r3, r3, #4
 802e8ae:	d0fa      	beq.n	802e8a6 <_malloc_r+0x17a>
 802e8b0:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 802e8b4:	46c1      	mov	r9, r8
 802e8b6:	469e      	mov	lr, r3
 802e8b8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 802e8bc:	454c      	cmp	r4, r9
 802e8be:	f040 80b9 	bne.w	802ea34 <_malloc_r+0x308>
 802e8c2:	f10e 0e01 	add.w	lr, lr, #1
 802e8c6:	f01e 0f03 	tst.w	lr, #3
 802e8ca:	f109 0908 	add.w	r9, r9, #8
 802e8ce:	d1f3      	bne.n	802e8b8 <_malloc_r+0x18c>
 802e8d0:	0798      	lsls	r0, r3, #30
 802e8d2:	f040 80e3 	bne.w	802ea9c <_malloc_r+0x370>
 802e8d6:	6873      	ldr	r3, [r6, #4]
 802e8d8:	ea23 0302 	bic.w	r3, r3, r2
 802e8dc:	6073      	str	r3, [r6, #4]
 802e8de:	6870      	ldr	r0, [r6, #4]
 802e8e0:	0052      	lsls	r2, r2, #1
 802e8e2:	4290      	cmp	r0, r2
 802e8e4:	d302      	bcc.n	802e8ec <_malloc_r+0x1c0>
 802e8e6:	2a00      	cmp	r2, #0
 802e8e8:	f040 80e5 	bne.w	802eab6 <_malloc_r+0x38a>
 802e8ec:	f8d6 a008 	ldr.w	sl, [r6, #8]
 802e8f0:	f8da 3004 	ldr.w	r3, [sl, #4]
 802e8f4:	f023 0903 	bic.w	r9, r3, #3
 802e8f8:	45b9      	cmp	r9, r7
 802e8fa:	d304      	bcc.n	802e906 <_malloc_r+0x1da>
 802e8fc:	eba9 0207 	sub.w	r2, r9, r7
 802e900:	2a0f      	cmp	r2, #15
 802e902:	f300 8141 	bgt.w	802eb88 <_malloc_r+0x45c>
 802e906:	4b46      	ldr	r3, [pc, #280]	@ (802ea20 <_malloc_r+0x2f4>)
 802e908:	6819      	ldr	r1, [r3, #0]
 802e90a:	3110      	adds	r1, #16
 802e90c:	4439      	add	r1, r7
 802e90e:	2008      	movs	r0, #8
 802e910:	9101      	str	r1, [sp, #4]
 802e912:	f006 f8f7 	bl	8034b04 <sysconf>
 802e916:	4a43      	ldr	r2, [pc, #268]	@ (802ea24 <_malloc_r+0x2f8>)
 802e918:	9901      	ldr	r1, [sp, #4]
 802e91a:	6813      	ldr	r3, [r2, #0]
 802e91c:	3301      	adds	r3, #1
 802e91e:	bf1f      	itttt	ne
 802e920:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 802e924:	1809      	addne	r1, r1, r0
 802e926:	4243      	negne	r3, r0
 802e928:	4019      	andne	r1, r3
 802e92a:	4680      	mov	r8, r0
 802e92c:	4628      	mov	r0, r5
 802e92e:	9101      	str	r1, [sp, #4]
 802e930:	f006 f8d8 	bl	8034ae4 <_sbrk_r>
 802e934:	1c42      	adds	r2, r0, #1
 802e936:	eb0a 0b09 	add.w	fp, sl, r9
 802e93a:	4604      	mov	r4, r0
 802e93c:	f000 80f7 	beq.w	802eb2e <_malloc_r+0x402>
 802e940:	4583      	cmp	fp, r0
 802e942:	9901      	ldr	r1, [sp, #4]
 802e944:	4a37      	ldr	r2, [pc, #220]	@ (802ea24 <_malloc_r+0x2f8>)
 802e946:	d902      	bls.n	802e94e <_malloc_r+0x222>
 802e948:	45b2      	cmp	sl, r6
 802e94a:	f040 80f0 	bne.w	802eb2e <_malloc_r+0x402>
 802e94e:	4b36      	ldr	r3, [pc, #216]	@ (802ea28 <_malloc_r+0x2fc>)
 802e950:	6818      	ldr	r0, [r3, #0]
 802e952:	45a3      	cmp	fp, r4
 802e954:	eb00 0e01 	add.w	lr, r0, r1
 802e958:	f8c3 e000 	str.w	lr, [r3]
 802e95c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 802e960:	f040 80ab 	bne.w	802eaba <_malloc_r+0x38e>
 802e964:	ea1b 0f0c 	tst.w	fp, ip
 802e968:	f040 80a7 	bne.w	802eaba <_malloc_r+0x38e>
 802e96c:	68b2      	ldr	r2, [r6, #8]
 802e96e:	4449      	add	r1, r9
 802e970:	f041 0101 	orr.w	r1, r1, #1
 802e974:	6051      	str	r1, [r2, #4]
 802e976:	4a2d      	ldr	r2, [pc, #180]	@ (802ea2c <_malloc_r+0x300>)
 802e978:	681b      	ldr	r3, [r3, #0]
 802e97a:	6811      	ldr	r1, [r2, #0]
 802e97c:	428b      	cmp	r3, r1
 802e97e:	bf88      	it	hi
 802e980:	6013      	strhi	r3, [r2, #0]
 802e982:	4a2b      	ldr	r2, [pc, #172]	@ (802ea30 <_malloc_r+0x304>)
 802e984:	6811      	ldr	r1, [r2, #0]
 802e986:	428b      	cmp	r3, r1
 802e988:	bf88      	it	hi
 802e98a:	6013      	strhi	r3, [r2, #0]
 802e98c:	e0cf      	b.n	802eb2e <_malloc_r+0x402>
 802e98e:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 802e992:	ea4f 225c 	mov.w	r2, ip, lsr #9
 802e996:	d218      	bcs.n	802e9ca <_malloc_r+0x29e>
 802e998:	ea4f 129c 	mov.w	r2, ip, lsr #6
 802e99c:	3238      	adds	r2, #56	@ 0x38
 802e99e:	f102 0e01 	add.w	lr, r2, #1
 802e9a2:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 802e9a6:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 802e9aa:	45f0      	cmp	r8, lr
 802e9ac:	d12b      	bne.n	802ea06 <_malloc_r+0x2da>
 802e9ae:	1092      	asrs	r2, r2, #2
 802e9b0:	f04f 0c01 	mov.w	ip, #1
 802e9b4:	fa0c f202 	lsl.w	r2, ip, r2
 802e9b8:	4302      	orrs	r2, r0
 802e9ba:	6072      	str	r2, [r6, #4]
 802e9bc:	e9c4 e802 	strd	lr, r8, [r4, #8]
 802e9c0:	f8c8 4008 	str.w	r4, [r8, #8]
 802e9c4:	f8ce 400c 	str.w	r4, [lr, #12]
 802e9c8:	e763      	b.n	802e892 <_malloc_r+0x166>
 802e9ca:	2a14      	cmp	r2, #20
 802e9cc:	d801      	bhi.n	802e9d2 <_malloc_r+0x2a6>
 802e9ce:	325b      	adds	r2, #91	@ 0x5b
 802e9d0:	e7e5      	b.n	802e99e <_malloc_r+0x272>
 802e9d2:	2a54      	cmp	r2, #84	@ 0x54
 802e9d4:	d803      	bhi.n	802e9de <_malloc_r+0x2b2>
 802e9d6:	ea4f 321c 	mov.w	r2, ip, lsr #12
 802e9da:	326e      	adds	r2, #110	@ 0x6e
 802e9dc:	e7df      	b.n	802e99e <_malloc_r+0x272>
 802e9de:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802e9e2:	d803      	bhi.n	802e9ec <_malloc_r+0x2c0>
 802e9e4:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 802e9e8:	3277      	adds	r2, #119	@ 0x77
 802e9ea:	e7d8      	b.n	802e99e <_malloc_r+0x272>
 802e9ec:	f240 5e54 	movw	lr, #1364	@ 0x554
 802e9f0:	4572      	cmp	r2, lr
 802e9f2:	bf9a      	itte	ls
 802e9f4:	ea4f 429c 	movls.w	r2, ip, lsr #18
 802e9f8:	327c      	addls	r2, #124	@ 0x7c
 802e9fa:	227e      	movhi	r2, #126	@ 0x7e
 802e9fc:	e7cf      	b.n	802e99e <_malloc_r+0x272>
 802e9fe:	f8de e008 	ldr.w	lr, [lr, #8]
 802ea02:	45f0      	cmp	r8, lr
 802ea04:	d005      	beq.n	802ea12 <_malloc_r+0x2e6>
 802ea06:	f8de 2004 	ldr.w	r2, [lr, #4]
 802ea0a:	f022 0203 	bic.w	r2, r2, #3
 802ea0e:	4562      	cmp	r2, ip
 802ea10:	d8f5      	bhi.n	802e9fe <_malloc_r+0x2d2>
 802ea12:	f8de 800c 	ldr.w	r8, [lr, #12]
 802ea16:	e7d1      	b.n	802e9bc <_malloc_r+0x290>
 802ea18:	2000040c 	.word	0x2000040c
 802ea1c:	20000414 	.word	0x20000414
 802ea20:	2001a06c 	.word	0x2001a06c
 802ea24:	20000404 	.word	0x20000404
 802ea28:	2001a03c 	.word	0x2001a03c
 802ea2c:	2001a068 	.word	0x2001a068
 802ea30:	2001a064 	.word	0x2001a064
 802ea34:	6860      	ldr	r0, [r4, #4]
 802ea36:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802ea3a:	f020 0003 	bic.w	r0, r0, #3
 802ea3e:	eba0 0a07 	sub.w	sl, r0, r7
 802ea42:	f1ba 0f0f 	cmp.w	sl, #15
 802ea46:	dd12      	ble.n	802ea6e <_malloc_r+0x342>
 802ea48:	68a3      	ldr	r3, [r4, #8]
 802ea4a:	19e2      	adds	r2, r4, r7
 802ea4c:	f047 0701 	orr.w	r7, r7, #1
 802ea50:	6067      	str	r7, [r4, #4]
 802ea52:	f8c3 c00c 	str.w	ip, [r3, #12]
 802ea56:	f8cc 3008 	str.w	r3, [ip, #8]
 802ea5a:	f04a 0301 	orr.w	r3, sl, #1
 802ea5e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802ea62:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802ea66:	6053      	str	r3, [r2, #4]
 802ea68:	f844 a000 	str.w	sl, [r4, r0]
 802ea6c:	e68f      	b.n	802e78e <_malloc_r+0x62>
 802ea6e:	f1ba 0f00 	cmp.w	sl, #0
 802ea72:	db11      	blt.n	802ea98 <_malloc_r+0x36c>
 802ea74:	4420      	add	r0, r4
 802ea76:	6843      	ldr	r3, [r0, #4]
 802ea78:	f043 0301 	orr.w	r3, r3, #1
 802ea7c:	6043      	str	r3, [r0, #4]
 802ea7e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 802ea82:	4628      	mov	r0, r5
 802ea84:	f8c3 c00c 	str.w	ip, [r3, #12]
 802ea88:	f8cc 3008 	str.w	r3, [ip, #8]
 802ea8c:	f004 f95e 	bl	8032d4c <__malloc_unlock>
 802ea90:	4620      	mov	r0, r4
 802ea92:	b003      	add	sp, #12
 802ea94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ea98:	4664      	mov	r4, ip
 802ea9a:	e70f      	b.n	802e8bc <_malloc_r+0x190>
 802ea9c:	f858 0908 	ldr.w	r0, [r8], #-8
 802eaa0:	4540      	cmp	r0, r8
 802eaa2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 802eaa6:	f43f af13 	beq.w	802e8d0 <_malloc_r+0x1a4>
 802eaaa:	e718      	b.n	802e8de <_malloc_r+0x1b2>
 802eaac:	3304      	adds	r3, #4
 802eaae:	0052      	lsls	r2, r2, #1
 802eab0:	4210      	tst	r0, r2
 802eab2:	d0fb      	beq.n	802eaac <_malloc_r+0x380>
 802eab4:	e6fc      	b.n	802e8b0 <_malloc_r+0x184>
 802eab6:	4673      	mov	r3, lr
 802eab8:	e7fa      	b.n	802eab0 <_malloc_r+0x384>
 802eaba:	6810      	ldr	r0, [r2, #0]
 802eabc:	3001      	adds	r0, #1
 802eabe:	bf1b      	ittet	ne
 802eac0:	eba4 0b0b 	subne.w	fp, r4, fp
 802eac4:	eb0b 020e 	addne.w	r2, fp, lr
 802eac8:	6014      	streq	r4, [r2, #0]
 802eaca:	601a      	strne	r2, [r3, #0]
 802eacc:	f014 0b07 	ands.w	fp, r4, #7
 802ead0:	bf1a      	itte	ne
 802ead2:	f1cb 0008 	rsbne	r0, fp, #8
 802ead6:	1824      	addne	r4, r4, r0
 802ead8:	4658      	moveq	r0, fp
 802eada:	1862      	adds	r2, r4, r1
 802eadc:	ea02 010c 	and.w	r1, r2, ip
 802eae0:	4480      	add	r8, r0
 802eae2:	eba8 0801 	sub.w	r8, r8, r1
 802eae6:	ea08 080c 	and.w	r8, r8, ip
 802eaea:	4641      	mov	r1, r8
 802eaec:	4628      	mov	r0, r5
 802eaee:	9201      	str	r2, [sp, #4]
 802eaf0:	f005 fff8 	bl	8034ae4 <_sbrk_r>
 802eaf4:	1c43      	adds	r3, r0, #1
 802eaf6:	9a01      	ldr	r2, [sp, #4]
 802eaf8:	4b28      	ldr	r3, [pc, #160]	@ (802eb9c <_malloc_r+0x470>)
 802eafa:	d107      	bne.n	802eb0c <_malloc_r+0x3e0>
 802eafc:	f1bb 0f00 	cmp.w	fp, #0
 802eb00:	d023      	beq.n	802eb4a <_malloc_r+0x41e>
 802eb02:	f1ab 0008 	sub.w	r0, fp, #8
 802eb06:	4410      	add	r0, r2
 802eb08:	f04f 0800 	mov.w	r8, #0
 802eb0c:	681a      	ldr	r2, [r3, #0]
 802eb0e:	60b4      	str	r4, [r6, #8]
 802eb10:	1b00      	subs	r0, r0, r4
 802eb12:	4440      	add	r0, r8
 802eb14:	4442      	add	r2, r8
 802eb16:	f040 0001 	orr.w	r0, r0, #1
 802eb1a:	45b2      	cmp	sl, r6
 802eb1c:	601a      	str	r2, [r3, #0]
 802eb1e:	6060      	str	r0, [r4, #4]
 802eb20:	f43f af29 	beq.w	802e976 <_malloc_r+0x24a>
 802eb24:	f1b9 0f0f 	cmp.w	r9, #15
 802eb28:	d812      	bhi.n	802eb50 <_malloc_r+0x424>
 802eb2a:	2301      	movs	r3, #1
 802eb2c:	6063      	str	r3, [r4, #4]
 802eb2e:	68b3      	ldr	r3, [r6, #8]
 802eb30:	685b      	ldr	r3, [r3, #4]
 802eb32:	f023 0303 	bic.w	r3, r3, #3
 802eb36:	42bb      	cmp	r3, r7
 802eb38:	eba3 0207 	sub.w	r2, r3, r7
 802eb3c:	d301      	bcc.n	802eb42 <_malloc_r+0x416>
 802eb3e:	2a0f      	cmp	r2, #15
 802eb40:	dc22      	bgt.n	802eb88 <_malloc_r+0x45c>
 802eb42:	4628      	mov	r0, r5
 802eb44:	f004 f902 	bl	8032d4c <__malloc_unlock>
 802eb48:	e5fc      	b.n	802e744 <_malloc_r+0x18>
 802eb4a:	4610      	mov	r0, r2
 802eb4c:	46d8      	mov	r8, fp
 802eb4e:	e7dd      	b.n	802eb0c <_malloc_r+0x3e0>
 802eb50:	f8da 2004 	ldr.w	r2, [sl, #4]
 802eb54:	f1a9 090c 	sub.w	r9, r9, #12
 802eb58:	f029 0907 	bic.w	r9, r9, #7
 802eb5c:	f002 0201 	and.w	r2, r2, #1
 802eb60:	ea42 0209 	orr.w	r2, r2, r9
 802eb64:	f8ca 2004 	str.w	r2, [sl, #4]
 802eb68:	2105      	movs	r1, #5
 802eb6a:	eb0a 0209 	add.w	r2, sl, r9
 802eb6e:	f1b9 0f0f 	cmp.w	r9, #15
 802eb72:	e9c2 1101 	strd	r1, r1, [r2, #4]
 802eb76:	f67f aefe 	bls.w	802e976 <_malloc_r+0x24a>
 802eb7a:	f10a 0108 	add.w	r1, sl, #8
 802eb7e:	4628      	mov	r0, r5
 802eb80:	f7ff fcbc 	bl	802e4fc <_free_r>
 802eb84:	4b05      	ldr	r3, [pc, #20]	@ (802eb9c <_malloc_r+0x470>)
 802eb86:	e6f6      	b.n	802e976 <_malloc_r+0x24a>
 802eb88:	68b4      	ldr	r4, [r6, #8]
 802eb8a:	f047 0301 	orr.w	r3, r7, #1
 802eb8e:	4427      	add	r7, r4
 802eb90:	f042 0201 	orr.w	r2, r2, #1
 802eb94:	6063      	str	r3, [r4, #4]
 802eb96:	60b7      	str	r7, [r6, #8]
 802eb98:	607a      	str	r2, [r7, #4]
 802eb9a:	e5f8      	b.n	802e78e <_malloc_r+0x62>
 802eb9c:	2001a03c 	.word	0x2001a03c

0802eba0 <__ascii_mbtowc>:
 802eba0:	b082      	sub	sp, #8
 802eba2:	b901      	cbnz	r1, 802eba6 <__ascii_mbtowc+0x6>
 802eba4:	a901      	add	r1, sp, #4
 802eba6:	b142      	cbz	r2, 802ebba <__ascii_mbtowc+0x1a>
 802eba8:	b14b      	cbz	r3, 802ebbe <__ascii_mbtowc+0x1e>
 802ebaa:	7813      	ldrb	r3, [r2, #0]
 802ebac:	600b      	str	r3, [r1, #0]
 802ebae:	7812      	ldrb	r2, [r2, #0]
 802ebb0:	1e10      	subs	r0, r2, #0
 802ebb2:	bf18      	it	ne
 802ebb4:	2001      	movne	r0, #1
 802ebb6:	b002      	add	sp, #8
 802ebb8:	4770      	bx	lr
 802ebba:	4610      	mov	r0, r2
 802ebbc:	e7fb      	b.n	802ebb6 <__ascii_mbtowc+0x16>
 802ebbe:	f06f 0001 	mvn.w	r0, #1
 802ebc2:	e7f8      	b.n	802ebb6 <__ascii_mbtowc+0x16>

0802ebc4 <siscanf>:
 802ebc4:	b40e      	push	{r1, r2, r3}
 802ebc6:	b530      	push	{r4, r5, lr}
 802ebc8:	b09c      	sub	sp, #112	@ 0x70
 802ebca:	ac1f      	add	r4, sp, #124	@ 0x7c
 802ebcc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802ebd0:	f854 5b04 	ldr.w	r5, [r4], #4
 802ebd4:	f8ad 2014 	strh.w	r2, [sp, #20]
 802ebd8:	9002      	str	r0, [sp, #8]
 802ebda:	9006      	str	r0, [sp, #24]
 802ebdc:	f7e1 fb60 	bl	80102a0 <strlen>
 802ebe0:	4b0b      	ldr	r3, [pc, #44]	@ (802ec10 <siscanf+0x4c>)
 802ebe2:	9003      	str	r0, [sp, #12]
 802ebe4:	9007      	str	r0, [sp, #28]
 802ebe6:	930a      	str	r3, [sp, #40]	@ 0x28
 802ebe8:	480a      	ldr	r0, [pc, #40]	@ (802ec14 <siscanf+0x50>)
 802ebea:	9401      	str	r4, [sp, #4]
 802ebec:	2300      	movs	r3, #0
 802ebee:	930e      	str	r3, [sp, #56]	@ 0x38
 802ebf0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802ebf2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802ebf6:	f8ad 3016 	strh.w	r3, [sp, #22]
 802ebfa:	462a      	mov	r2, r5
 802ebfc:	4623      	mov	r3, r4
 802ebfe:	a902      	add	r1, sp, #8
 802ec00:	6800      	ldr	r0, [r0, #0]
 802ec02:	f000 fd99 	bl	802f738 <__ssvfiscanf_r>
 802ec06:	b01c      	add	sp, #112	@ 0x70
 802ec08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ec0c:	b003      	add	sp, #12
 802ec0e:	4770      	bx	lr
 802ec10:	0802bbb3 	.word	0x0802bbb3
 802ec14:	200002d8 	.word	0x200002d8

0802ec18 <sniprintf>:
 802ec18:	b40c      	push	{r2, r3}
 802ec1a:	b530      	push	{r4, r5, lr}
 802ec1c:	4b17      	ldr	r3, [pc, #92]	@ (802ec7c <sniprintf+0x64>)
 802ec1e:	1e0c      	subs	r4, r1, #0
 802ec20:	681d      	ldr	r5, [r3, #0]
 802ec22:	b09d      	sub	sp, #116	@ 0x74
 802ec24:	da08      	bge.n	802ec38 <sniprintf+0x20>
 802ec26:	238b      	movs	r3, #139	@ 0x8b
 802ec28:	602b      	str	r3, [r5, #0]
 802ec2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802ec2e:	b01d      	add	sp, #116	@ 0x74
 802ec30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ec34:	b002      	add	sp, #8
 802ec36:	4770      	bx	lr
 802ec38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802ec3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 802ec40:	bf14      	ite	ne
 802ec42:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802ec46:	4623      	moveq	r3, r4
 802ec48:	9304      	str	r3, [sp, #16]
 802ec4a:	9307      	str	r3, [sp, #28]
 802ec4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802ec50:	9002      	str	r0, [sp, #8]
 802ec52:	9006      	str	r0, [sp, #24]
 802ec54:	f8ad 3016 	strh.w	r3, [sp, #22]
 802ec58:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802ec5a:	ab21      	add	r3, sp, #132	@ 0x84
 802ec5c:	a902      	add	r1, sp, #8
 802ec5e:	4628      	mov	r0, r5
 802ec60:	9301      	str	r3, [sp, #4]
 802ec62:	f000 f88b 	bl	802ed7c <_svfiprintf_r>
 802ec66:	1c43      	adds	r3, r0, #1
 802ec68:	bfbc      	itt	lt
 802ec6a:	238b      	movlt	r3, #139	@ 0x8b
 802ec6c:	602b      	strlt	r3, [r5, #0]
 802ec6e:	2c00      	cmp	r4, #0
 802ec70:	d0dd      	beq.n	802ec2e <sniprintf+0x16>
 802ec72:	9b02      	ldr	r3, [sp, #8]
 802ec74:	2200      	movs	r2, #0
 802ec76:	701a      	strb	r2, [r3, #0]
 802ec78:	e7d9      	b.n	802ec2e <sniprintf+0x16>
 802ec7a:	bf00      	nop
 802ec7c:	200002d8 	.word	0x200002d8

0802ec80 <__ssprint_r>:
 802ec80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ec84:	6893      	ldr	r3, [r2, #8]
 802ec86:	f8d2 b000 	ldr.w	fp, [r2]
 802ec8a:	9001      	str	r0, [sp, #4]
 802ec8c:	460c      	mov	r4, r1
 802ec8e:	4617      	mov	r7, r2
 802ec90:	2b00      	cmp	r3, #0
 802ec92:	d157      	bne.n	802ed44 <__ssprint_r+0xc4>
 802ec94:	2000      	movs	r0, #0
 802ec96:	2300      	movs	r3, #0
 802ec98:	607b      	str	r3, [r7, #4]
 802ec9a:	b003      	add	sp, #12
 802ec9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802eca0:	e9db a800 	ldrd	sl, r8, [fp]
 802eca4:	f10b 0b08 	add.w	fp, fp, #8
 802eca8:	68a6      	ldr	r6, [r4, #8]
 802ecaa:	6820      	ldr	r0, [r4, #0]
 802ecac:	f1b8 0f00 	cmp.w	r8, #0
 802ecb0:	d0f6      	beq.n	802eca0 <__ssprint_r+0x20>
 802ecb2:	45b0      	cmp	r8, r6
 802ecb4:	d32e      	bcc.n	802ed14 <__ssprint_r+0x94>
 802ecb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ecba:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802ecbe:	d029      	beq.n	802ed14 <__ssprint_r+0x94>
 802ecc0:	6921      	ldr	r1, [r4, #16]
 802ecc2:	6965      	ldr	r5, [r4, #20]
 802ecc4:	eba0 0901 	sub.w	r9, r0, r1
 802ecc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802eccc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802ecd0:	f109 0001 	add.w	r0, r9, #1
 802ecd4:	106d      	asrs	r5, r5, #1
 802ecd6:	4440      	add	r0, r8
 802ecd8:	4285      	cmp	r5, r0
 802ecda:	bf38      	it	cc
 802ecdc:	4605      	movcc	r5, r0
 802ecde:	0553      	lsls	r3, r2, #21
 802ece0:	d534      	bpl.n	802ed4c <__ssprint_r+0xcc>
 802ece2:	9801      	ldr	r0, [sp, #4]
 802ece4:	4629      	mov	r1, r5
 802ece6:	f7ff fd21 	bl	802e72c <_malloc_r>
 802ecea:	4606      	mov	r6, r0
 802ecec:	2800      	cmp	r0, #0
 802ecee:	d038      	beq.n	802ed62 <__ssprint_r+0xe2>
 802ecf0:	464a      	mov	r2, r9
 802ecf2:	6921      	ldr	r1, [r4, #16]
 802ecf4:	f7fe fd00 	bl	802d6f8 <memcpy>
 802ecf8:	89a2      	ldrh	r2, [r4, #12]
 802ecfa:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802ecfe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802ed02:	81a2      	strh	r2, [r4, #12]
 802ed04:	6126      	str	r6, [r4, #16]
 802ed06:	6165      	str	r5, [r4, #20]
 802ed08:	444e      	add	r6, r9
 802ed0a:	eba5 0509 	sub.w	r5, r5, r9
 802ed0e:	6026      	str	r6, [r4, #0]
 802ed10:	60a5      	str	r5, [r4, #8]
 802ed12:	4646      	mov	r6, r8
 802ed14:	4546      	cmp	r6, r8
 802ed16:	bf28      	it	cs
 802ed18:	4646      	movcs	r6, r8
 802ed1a:	4632      	mov	r2, r6
 802ed1c:	4651      	mov	r1, sl
 802ed1e:	6820      	ldr	r0, [r4, #0]
 802ed20:	f7fd fa94 	bl	802c24c <memmove>
 802ed24:	68a2      	ldr	r2, [r4, #8]
 802ed26:	1b92      	subs	r2, r2, r6
 802ed28:	60a2      	str	r2, [r4, #8]
 802ed2a:	6822      	ldr	r2, [r4, #0]
 802ed2c:	4432      	add	r2, r6
 802ed2e:	6022      	str	r2, [r4, #0]
 802ed30:	68ba      	ldr	r2, [r7, #8]
 802ed32:	eba2 0308 	sub.w	r3, r2, r8
 802ed36:	44c2      	add	sl, r8
 802ed38:	60bb      	str	r3, [r7, #8]
 802ed3a:	2b00      	cmp	r3, #0
 802ed3c:	d0aa      	beq.n	802ec94 <__ssprint_r+0x14>
 802ed3e:	f04f 0800 	mov.w	r8, #0
 802ed42:	e7b1      	b.n	802eca8 <__ssprint_r+0x28>
 802ed44:	f04f 0a00 	mov.w	sl, #0
 802ed48:	46d0      	mov	r8, sl
 802ed4a:	e7ad      	b.n	802eca8 <__ssprint_r+0x28>
 802ed4c:	9801      	ldr	r0, [sp, #4]
 802ed4e:	462a      	mov	r2, r5
 802ed50:	f004 fcfc 	bl	803374c <_realloc_r>
 802ed54:	4606      	mov	r6, r0
 802ed56:	2800      	cmp	r0, #0
 802ed58:	d1d4      	bne.n	802ed04 <__ssprint_r+0x84>
 802ed5a:	6921      	ldr	r1, [r4, #16]
 802ed5c:	9801      	ldr	r0, [sp, #4]
 802ed5e:	f7ff fbcd 	bl	802e4fc <_free_r>
 802ed62:	9a01      	ldr	r2, [sp, #4]
 802ed64:	230c      	movs	r3, #12
 802ed66:	6013      	str	r3, [r2, #0]
 802ed68:	89a3      	ldrh	r3, [r4, #12]
 802ed6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802ed6e:	81a3      	strh	r3, [r4, #12]
 802ed70:	2300      	movs	r3, #0
 802ed72:	60bb      	str	r3, [r7, #8]
 802ed74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802ed78:	e78d      	b.n	802ec96 <__ssprint_r+0x16>
	...

0802ed7c <_svfiprintf_r>:
 802ed7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ed80:	461d      	mov	r5, r3
 802ed82:	898b      	ldrh	r3, [r1, #12]
 802ed84:	b0bb      	sub	sp, #236	@ 0xec
 802ed86:	468b      	mov	fp, r1
 802ed88:	0619      	lsls	r1, r3, #24
 802ed8a:	9001      	str	r0, [sp, #4]
 802ed8c:	9202      	str	r2, [sp, #8]
 802ed8e:	d514      	bpl.n	802edba <_svfiprintf_r+0x3e>
 802ed90:	f8db 3010 	ldr.w	r3, [fp, #16]
 802ed94:	b98b      	cbnz	r3, 802edba <_svfiprintf_r+0x3e>
 802ed96:	2140      	movs	r1, #64	@ 0x40
 802ed98:	f7ff fcc8 	bl	802e72c <_malloc_r>
 802ed9c:	f8cb 0000 	str.w	r0, [fp]
 802eda0:	f8cb 0010 	str.w	r0, [fp, #16]
 802eda4:	b930      	cbnz	r0, 802edb4 <_svfiprintf_r+0x38>
 802eda6:	9a01      	ldr	r2, [sp, #4]
 802eda8:	230c      	movs	r3, #12
 802edaa:	6013      	str	r3, [r2, #0]
 802edac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802edb0:	9304      	str	r3, [sp, #16]
 802edb2:	e3df      	b.n	802f574 <_svfiprintf_r+0x7f8>
 802edb4:	2340      	movs	r3, #64	@ 0x40
 802edb6:	f8cb 3014 	str.w	r3, [fp, #20]
 802edba:	2300      	movs	r3, #0
 802edbc:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802edc0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802edc4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 802edc8:	ae11      	add	r6, sp, #68	@ 0x44
 802edca:	960e      	str	r6, [sp, #56]	@ 0x38
 802edcc:	9304      	str	r3, [sp, #16]
 802edce:	9b02      	ldr	r3, [sp, #8]
 802edd0:	461c      	mov	r4, r3
 802edd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 802edd6:	b10a      	cbz	r2, 802eddc <_svfiprintf_r+0x60>
 802edd8:	2a25      	cmp	r2, #37	@ 0x25
 802edda:	d1f9      	bne.n	802edd0 <_svfiprintf_r+0x54>
 802eddc:	9a02      	ldr	r2, [sp, #8]
 802edde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ede0:	1aa7      	subs	r7, r4, r2
 802ede2:	d00c      	beq.n	802edfe <_svfiprintf_r+0x82>
 802ede4:	443b      	add	r3, r7
 802ede6:	9310      	str	r3, [sp, #64]	@ 0x40
 802ede8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802edea:	3301      	adds	r3, #1
 802edec:	2b07      	cmp	r3, #7
 802edee:	e9c6 2700 	strd	r2, r7, [r6]
 802edf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 802edf4:	dc76      	bgt.n	802eee4 <_svfiprintf_r+0x168>
 802edf6:	3608      	adds	r6, #8
 802edf8:	9b04      	ldr	r3, [sp, #16]
 802edfa:	443b      	add	r3, r7
 802edfc:	9304      	str	r3, [sp, #16]
 802edfe:	7823      	ldrb	r3, [r4, #0]
 802ee00:	2b00      	cmp	r3, #0
 802ee02:	f000 83ce 	beq.w	802f5a2 <_svfiprintf_r+0x826>
 802ee06:	2300      	movs	r3, #0
 802ee08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802ee0c:	3401      	adds	r4, #1
 802ee0e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802ee12:	9200      	str	r2, [sp, #0]
 802ee14:	9303      	str	r3, [sp, #12]
 802ee16:	4699      	mov	r9, r3
 802ee18:	4622      	mov	r2, r4
 802ee1a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802ee1e:	9202      	str	r2, [sp, #8]
 802ee20:	f1a3 0220 	sub.w	r2, r3, #32
 802ee24:	2a5a      	cmp	r2, #90	@ 0x5a
 802ee26:	f200 8318 	bhi.w	802f45a <_svfiprintf_r+0x6de>
 802ee2a:	e8df f012 	tbh	[pc, r2, lsl #1]
 802ee2e:	009a      	.short	0x009a
 802ee30:	03160316 	.word	0x03160316
 802ee34:	031600a2 	.word	0x031600a2
 802ee38:	03160316 	.word	0x03160316
 802ee3c:	03160082 	.word	0x03160082
 802ee40:	00a50316 	.word	0x00a50316
 802ee44:	031600af 	.word	0x031600af
 802ee48:	00b100ac 	.word	0x00b100ac
 802ee4c:	00cc0316 	.word	0x00cc0316
 802ee50:	00cf00cf 	.word	0x00cf00cf
 802ee54:	00cf00cf 	.word	0x00cf00cf
 802ee58:	00cf00cf 	.word	0x00cf00cf
 802ee5c:	00cf00cf 	.word	0x00cf00cf
 802ee60:	031600cf 	.word	0x031600cf
 802ee64:	03160316 	.word	0x03160316
 802ee68:	03160316 	.word	0x03160316
 802ee6c:	03160316 	.word	0x03160316
 802ee70:	03160316 	.word	0x03160316
 802ee74:	010600f9 	.word	0x010600f9
 802ee78:	03160316 	.word	0x03160316
 802ee7c:	03160316 	.word	0x03160316
 802ee80:	03160316 	.word	0x03160316
 802ee84:	03160316 	.word	0x03160316
 802ee88:	03160316 	.word	0x03160316
 802ee8c:	03160154 	.word	0x03160154
 802ee90:	03160316 	.word	0x03160316
 802ee94:	0316019b 	.word	0x0316019b
 802ee98:	0316027d 	.word	0x0316027d
 802ee9c:	029d0316 	.word	0x029d0316
 802eea0:	03160316 	.word	0x03160316
 802eea4:	03160316 	.word	0x03160316
 802eea8:	03160316 	.word	0x03160316
 802eeac:	03160316 	.word	0x03160316
 802eeb0:	03160316 	.word	0x03160316
 802eeb4:	010800f9 	.word	0x010800f9
 802eeb8:	03160316 	.word	0x03160316
 802eebc:	00df0316 	.word	0x00df0316
 802eec0:	00f30108 	.word	0x00f30108
 802eec4:	00ec0316 	.word	0x00ec0316
 802eec8:	01340316 	.word	0x01340316
 802eecc:	018a0156 	.word	0x018a0156
 802eed0:	031600f3 	.word	0x031600f3
 802eed4:	0098019b 	.word	0x0098019b
 802eed8:	0316027f 	.word	0x0316027f
 802eedc:	00650316 	.word	0x00650316
 802eee0:	00980316 	.word	0x00980316
 802eee4:	9801      	ldr	r0, [sp, #4]
 802eee6:	aa0e      	add	r2, sp, #56	@ 0x38
 802eee8:	4659      	mov	r1, fp
 802eeea:	f7ff fec9 	bl	802ec80 <__ssprint_r>
 802eeee:	2800      	cmp	r0, #0
 802eef0:	f040 833b 	bne.w	802f56a <_svfiprintf_r+0x7ee>
 802eef4:	ae11      	add	r6, sp, #68	@ 0x44
 802eef6:	e77f      	b.n	802edf8 <_svfiprintf_r+0x7c>
 802eef8:	4a99      	ldr	r2, [pc, #612]	@ (802f160 <_svfiprintf_r+0x3e4>)
 802eefa:	9205      	str	r2, [sp, #20]
 802eefc:	f019 0220 	ands.w	r2, r9, #32
 802ef00:	f000 8234 	beq.w	802f36c <_svfiprintf_r+0x5f0>
 802ef04:	3507      	adds	r5, #7
 802ef06:	f025 0507 	bic.w	r5, r5, #7
 802ef0a:	462f      	mov	r7, r5
 802ef0c:	686d      	ldr	r5, [r5, #4]
 802ef0e:	f857 4b08 	ldr.w	r4, [r7], #8
 802ef12:	f019 0f01 	tst.w	r9, #1
 802ef16:	d009      	beq.n	802ef2c <_svfiprintf_r+0x1b0>
 802ef18:	ea54 0205 	orrs.w	r2, r4, r5
 802ef1c:	bf1f      	itttt	ne
 802ef1e:	2230      	movne	r2, #48	@ 0x30
 802ef20:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802ef24:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802ef28:	f049 0902 	orrne.w	r9, r9, #2
 802ef2c:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802ef30:	e113      	b.n	802f15a <_svfiprintf_r+0x3de>
 802ef32:	9801      	ldr	r0, [sp, #4]
 802ef34:	f7fe fb32 	bl	802d59c <_localeconv_r>
 802ef38:	6843      	ldr	r3, [r0, #4]
 802ef3a:	9308      	str	r3, [sp, #32]
 802ef3c:	4618      	mov	r0, r3
 802ef3e:	f7e1 f9af 	bl	80102a0 <strlen>
 802ef42:	9007      	str	r0, [sp, #28]
 802ef44:	9801      	ldr	r0, [sp, #4]
 802ef46:	f7fe fb29 	bl	802d59c <_localeconv_r>
 802ef4a:	6883      	ldr	r3, [r0, #8]
 802ef4c:	9306      	str	r3, [sp, #24]
 802ef4e:	9b07      	ldr	r3, [sp, #28]
 802ef50:	b12b      	cbz	r3, 802ef5e <_svfiprintf_r+0x1e2>
 802ef52:	9b06      	ldr	r3, [sp, #24]
 802ef54:	b11b      	cbz	r3, 802ef5e <_svfiprintf_r+0x1e2>
 802ef56:	781b      	ldrb	r3, [r3, #0]
 802ef58:	b10b      	cbz	r3, 802ef5e <_svfiprintf_r+0x1e2>
 802ef5a:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 802ef5e:	9c02      	ldr	r4, [sp, #8]
 802ef60:	e75a      	b.n	802ee18 <_svfiprintf_r+0x9c>
 802ef62:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802ef66:	2b00      	cmp	r3, #0
 802ef68:	d1f9      	bne.n	802ef5e <_svfiprintf_r+0x1e2>
 802ef6a:	2320      	movs	r3, #32
 802ef6c:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802ef70:	e7f5      	b.n	802ef5e <_svfiprintf_r+0x1e2>
 802ef72:	f049 0901 	orr.w	r9, r9, #1
 802ef76:	e7f2      	b.n	802ef5e <_svfiprintf_r+0x1e2>
 802ef78:	f855 3b04 	ldr.w	r3, [r5], #4
 802ef7c:	9303      	str	r3, [sp, #12]
 802ef7e:	2b00      	cmp	r3, #0
 802ef80:	daed      	bge.n	802ef5e <_svfiprintf_r+0x1e2>
 802ef82:	425b      	negs	r3, r3
 802ef84:	9303      	str	r3, [sp, #12]
 802ef86:	f049 0904 	orr.w	r9, r9, #4
 802ef8a:	e7e8      	b.n	802ef5e <_svfiprintf_r+0x1e2>
 802ef8c:	232b      	movs	r3, #43	@ 0x2b
 802ef8e:	e7ed      	b.n	802ef6c <_svfiprintf_r+0x1f0>
 802ef90:	9a02      	ldr	r2, [sp, #8]
 802ef92:	f812 3b01 	ldrb.w	r3, [r2], #1
 802ef96:	2b2a      	cmp	r3, #42	@ 0x2a
 802ef98:	d111      	bne.n	802efbe <_svfiprintf_r+0x242>
 802ef9a:	f855 3b04 	ldr.w	r3, [r5], #4
 802ef9e:	9202      	str	r2, [sp, #8]
 802efa0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802efa4:	9300      	str	r3, [sp, #0]
 802efa6:	e7da      	b.n	802ef5e <_svfiprintf_r+0x1e2>
 802efa8:	9b00      	ldr	r3, [sp, #0]
 802efaa:	fb00 1303 	mla	r3, r0, r3, r1
 802efae:	9300      	str	r3, [sp, #0]
 802efb0:	f812 3b01 	ldrb.w	r3, [r2], #1
 802efb4:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802efb8:	2909      	cmp	r1, #9
 802efba:	d9f5      	bls.n	802efa8 <_svfiprintf_r+0x22c>
 802efbc:	e72f      	b.n	802ee1e <_svfiprintf_r+0xa2>
 802efbe:	2100      	movs	r1, #0
 802efc0:	9100      	str	r1, [sp, #0]
 802efc2:	200a      	movs	r0, #10
 802efc4:	e7f6      	b.n	802efb4 <_svfiprintf_r+0x238>
 802efc6:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 802efca:	e7c8      	b.n	802ef5e <_svfiprintf_r+0x1e2>
 802efcc:	2100      	movs	r1, #0
 802efce:	9a02      	ldr	r2, [sp, #8]
 802efd0:	9103      	str	r1, [sp, #12]
 802efd2:	200a      	movs	r0, #10
 802efd4:	9903      	ldr	r1, [sp, #12]
 802efd6:	3b30      	subs	r3, #48	@ 0x30
 802efd8:	fb00 3301 	mla	r3, r0, r1, r3
 802efdc:	9303      	str	r3, [sp, #12]
 802efde:	f812 3b01 	ldrb.w	r3, [r2], #1
 802efe2:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802efe6:	2909      	cmp	r1, #9
 802efe8:	d9f4      	bls.n	802efd4 <_svfiprintf_r+0x258>
 802efea:	e718      	b.n	802ee1e <_svfiprintf_r+0xa2>
 802efec:	9b02      	ldr	r3, [sp, #8]
 802efee:	781b      	ldrb	r3, [r3, #0]
 802eff0:	2b68      	cmp	r3, #104	@ 0x68
 802eff2:	bf01      	itttt	eq
 802eff4:	9b02      	ldreq	r3, [sp, #8]
 802eff6:	3301      	addeq	r3, #1
 802eff8:	9302      	streq	r3, [sp, #8]
 802effa:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 802effe:	bf18      	it	ne
 802f000:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 802f004:	e7ab      	b.n	802ef5e <_svfiprintf_r+0x1e2>
 802f006:	9b02      	ldr	r3, [sp, #8]
 802f008:	781b      	ldrb	r3, [r3, #0]
 802f00a:	2b6c      	cmp	r3, #108	@ 0x6c
 802f00c:	d105      	bne.n	802f01a <_svfiprintf_r+0x29e>
 802f00e:	9b02      	ldr	r3, [sp, #8]
 802f010:	3301      	adds	r3, #1
 802f012:	9302      	str	r3, [sp, #8]
 802f014:	f049 0920 	orr.w	r9, r9, #32
 802f018:	e7a1      	b.n	802ef5e <_svfiprintf_r+0x1e2>
 802f01a:	f049 0910 	orr.w	r9, r9, #16
 802f01e:	e79e      	b.n	802ef5e <_svfiprintf_r+0x1e2>
 802f020:	462f      	mov	r7, r5
 802f022:	2400      	movs	r4, #0
 802f024:	f857 3b04 	ldr.w	r3, [r7], #4
 802f028:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802f02c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802f030:	2301      	movs	r3, #1
 802f032:	9300      	str	r3, [sp, #0]
 802f034:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 802f038:	e0aa      	b.n	802f190 <_svfiprintf_r+0x414>
 802f03a:	f049 0910 	orr.w	r9, r9, #16
 802f03e:	f019 0f20 	tst.w	r9, #32
 802f042:	d011      	beq.n	802f068 <_svfiprintf_r+0x2ec>
 802f044:	3507      	adds	r5, #7
 802f046:	f025 0507 	bic.w	r5, r5, #7
 802f04a:	462f      	mov	r7, r5
 802f04c:	686d      	ldr	r5, [r5, #4]
 802f04e:	f857 4b08 	ldr.w	r4, [r7], #8
 802f052:	2d00      	cmp	r5, #0
 802f054:	da06      	bge.n	802f064 <_svfiprintf_r+0x2e8>
 802f056:	4264      	negs	r4, r4
 802f058:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802f05c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802f060:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802f064:	2301      	movs	r3, #1
 802f066:	e048      	b.n	802f0fa <_svfiprintf_r+0x37e>
 802f068:	462f      	mov	r7, r5
 802f06a:	f019 0f10 	tst.w	r9, #16
 802f06e:	f857 5b04 	ldr.w	r5, [r7], #4
 802f072:	d002      	beq.n	802f07a <_svfiprintf_r+0x2fe>
 802f074:	462c      	mov	r4, r5
 802f076:	17ed      	asrs	r5, r5, #31
 802f078:	e7eb      	b.n	802f052 <_svfiprintf_r+0x2d6>
 802f07a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802f07e:	d003      	beq.n	802f088 <_svfiprintf_r+0x30c>
 802f080:	b22c      	sxth	r4, r5
 802f082:	f345 35c0 	sbfx	r5, r5, #15, #1
 802f086:	e7e4      	b.n	802f052 <_svfiprintf_r+0x2d6>
 802f088:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802f08c:	d0f2      	beq.n	802f074 <_svfiprintf_r+0x2f8>
 802f08e:	b26c      	sxtb	r4, r5
 802f090:	f345 15c0 	sbfx	r5, r5, #7, #1
 802f094:	e7dd      	b.n	802f052 <_svfiprintf_r+0x2d6>
 802f096:	f019 0f20 	tst.w	r9, #32
 802f09a:	d007      	beq.n	802f0ac <_svfiprintf_r+0x330>
 802f09c:	9a04      	ldr	r2, [sp, #16]
 802f09e:	682b      	ldr	r3, [r5, #0]
 802f0a0:	9904      	ldr	r1, [sp, #16]
 802f0a2:	17d2      	asrs	r2, r2, #31
 802f0a4:	e9c3 1200 	strd	r1, r2, [r3]
 802f0a8:	3504      	adds	r5, #4
 802f0aa:	e690      	b.n	802edce <_svfiprintf_r+0x52>
 802f0ac:	f019 0f10 	tst.w	r9, #16
 802f0b0:	d003      	beq.n	802f0ba <_svfiprintf_r+0x33e>
 802f0b2:	682b      	ldr	r3, [r5, #0]
 802f0b4:	9a04      	ldr	r2, [sp, #16]
 802f0b6:	601a      	str	r2, [r3, #0]
 802f0b8:	e7f6      	b.n	802f0a8 <_svfiprintf_r+0x32c>
 802f0ba:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802f0be:	d003      	beq.n	802f0c8 <_svfiprintf_r+0x34c>
 802f0c0:	682b      	ldr	r3, [r5, #0]
 802f0c2:	9a04      	ldr	r2, [sp, #16]
 802f0c4:	801a      	strh	r2, [r3, #0]
 802f0c6:	e7ef      	b.n	802f0a8 <_svfiprintf_r+0x32c>
 802f0c8:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802f0cc:	d0f1      	beq.n	802f0b2 <_svfiprintf_r+0x336>
 802f0ce:	682b      	ldr	r3, [r5, #0]
 802f0d0:	9a04      	ldr	r2, [sp, #16]
 802f0d2:	701a      	strb	r2, [r3, #0]
 802f0d4:	e7e8      	b.n	802f0a8 <_svfiprintf_r+0x32c>
 802f0d6:	f049 0910 	orr.w	r9, r9, #16
 802f0da:	f019 0320 	ands.w	r3, r9, #32
 802f0de:	d01e      	beq.n	802f11e <_svfiprintf_r+0x3a2>
 802f0e0:	3507      	adds	r5, #7
 802f0e2:	f025 0507 	bic.w	r5, r5, #7
 802f0e6:	462f      	mov	r7, r5
 802f0e8:	686d      	ldr	r5, [r5, #4]
 802f0ea:	f857 4b08 	ldr.w	r4, [r7], #8
 802f0ee:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802f0f2:	2300      	movs	r3, #0
 802f0f4:	2200      	movs	r2, #0
 802f0f6:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802f0fa:	9a00      	ldr	r2, [sp, #0]
 802f0fc:	3201      	adds	r2, #1
 802f0fe:	f000 8259 	beq.w	802f5b4 <_svfiprintf_r+0x838>
 802f102:	ea54 0205 	orrs.w	r2, r4, r5
 802f106:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 802f10a:	f040 8258 	bne.w	802f5be <_svfiprintf_r+0x842>
 802f10e:	9a00      	ldr	r2, [sp, #0]
 802f110:	2a00      	cmp	r2, #0
 802f112:	f000 8199 	beq.w	802f448 <_svfiprintf_r+0x6cc>
 802f116:	2b01      	cmp	r3, #1
 802f118:	f040 8254 	bne.w	802f5c4 <_svfiprintf_r+0x848>
 802f11c:	e13d      	b.n	802f39a <_svfiprintf_r+0x61e>
 802f11e:	462f      	mov	r7, r5
 802f120:	f019 0510 	ands.w	r5, r9, #16
 802f124:	f857 4b04 	ldr.w	r4, [r7], #4
 802f128:	d001      	beq.n	802f12e <_svfiprintf_r+0x3b2>
 802f12a:	461d      	mov	r5, r3
 802f12c:	e7df      	b.n	802f0ee <_svfiprintf_r+0x372>
 802f12e:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802f132:	d001      	beq.n	802f138 <_svfiprintf_r+0x3bc>
 802f134:	b2a4      	uxth	r4, r4
 802f136:	e7da      	b.n	802f0ee <_svfiprintf_r+0x372>
 802f138:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802f13c:	d0d7      	beq.n	802f0ee <_svfiprintf_r+0x372>
 802f13e:	b2e4      	uxtb	r4, r4
 802f140:	e7f3      	b.n	802f12a <_svfiprintf_r+0x3ae>
 802f142:	462f      	mov	r7, r5
 802f144:	f647 0330 	movw	r3, #30768	@ 0x7830
 802f148:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802f14c:	f857 4b04 	ldr.w	r4, [r7], #4
 802f150:	4b03      	ldr	r3, [pc, #12]	@ (802f160 <_svfiprintf_r+0x3e4>)
 802f152:	9305      	str	r3, [sp, #20]
 802f154:	2500      	movs	r5, #0
 802f156:	f049 0902 	orr.w	r9, r9, #2
 802f15a:	2302      	movs	r3, #2
 802f15c:	e7ca      	b.n	802f0f4 <_svfiprintf_r+0x378>
 802f15e:	bf00      	nop
 802f160:	0803b01b 	.word	0x0803b01b
 802f164:	9b00      	ldr	r3, [sp, #0]
 802f166:	462f      	mov	r7, r5
 802f168:	1c5a      	adds	r2, r3, #1
 802f16a:	f04f 0500 	mov.w	r5, #0
 802f16e:	f857 8b04 	ldr.w	r8, [r7], #4
 802f172:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802f176:	f000 80d2 	beq.w	802f31e <_svfiprintf_r+0x5a2>
 802f17a:	461a      	mov	r2, r3
 802f17c:	4629      	mov	r1, r5
 802f17e:	4640      	mov	r0, r8
 802f180:	f7e1 f83e 	bl	8010200 <memchr>
 802f184:	4604      	mov	r4, r0
 802f186:	b118      	cbz	r0, 802f190 <_svfiprintf_r+0x414>
 802f188:	eba0 0308 	sub.w	r3, r0, r8
 802f18c:	9300      	str	r3, [sp, #0]
 802f18e:	462c      	mov	r4, r5
 802f190:	9d00      	ldr	r5, [sp, #0]
 802f192:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802f196:	42a5      	cmp	r5, r4
 802f198:	bfb8      	it	lt
 802f19a:	4625      	movlt	r5, r4
 802f19c:	b103      	cbz	r3, 802f1a0 <_svfiprintf_r+0x424>
 802f19e:	3501      	adds	r5, #1
 802f1a0:	f019 0302 	ands.w	r3, r9, #2
 802f1a4:	9309      	str	r3, [sp, #36]	@ 0x24
 802f1a6:	bf18      	it	ne
 802f1a8:	3502      	addne	r5, #2
 802f1aa:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 802f1ae:	930a      	str	r3, [sp, #40]	@ 0x28
 802f1b0:	d123      	bne.n	802f1fa <_svfiprintf_r+0x47e>
 802f1b2:	9b03      	ldr	r3, [sp, #12]
 802f1b4:	eba3 0a05 	sub.w	sl, r3, r5
 802f1b8:	f1ba 0f00 	cmp.w	sl, #0
 802f1bc:	dd1d      	ble.n	802f1fa <_svfiprintf_r+0x47e>
 802f1be:	4bac      	ldr	r3, [pc, #688]	@ (802f470 <_svfiprintf_r+0x6f4>)
 802f1c0:	6033      	str	r3, [r6, #0]
 802f1c2:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802f1c6:	f1ba 0f10 	cmp.w	sl, #16
 802f1ca:	f102 0201 	add.w	r2, r2, #1
 802f1ce:	f106 0008 	add.w	r0, r6, #8
 802f1d2:	f300 8153 	bgt.w	802f47c <_svfiprintf_r+0x700>
 802f1d6:	eb0c 010a 	add.w	r1, ip, sl
 802f1da:	2a07      	cmp	r2, #7
 802f1dc:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802f1e0:	f8c6 a004 	str.w	sl, [r6, #4]
 802f1e4:	f340 815e 	ble.w	802f4a4 <_svfiprintf_r+0x728>
 802f1e8:	9801      	ldr	r0, [sp, #4]
 802f1ea:	aa0e      	add	r2, sp, #56	@ 0x38
 802f1ec:	4659      	mov	r1, fp
 802f1ee:	f7ff fd47 	bl	802ec80 <__ssprint_r>
 802f1f2:	2800      	cmp	r0, #0
 802f1f4:	f040 81b9 	bne.w	802f56a <_svfiprintf_r+0x7ee>
 802f1f8:	ae11      	add	r6, sp, #68	@ 0x44
 802f1fa:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802f1fe:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802f202:	b161      	cbz	r1, 802f21e <_svfiprintf_r+0x4a2>
 802f204:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802f208:	3301      	adds	r3, #1
 802f20a:	6031      	str	r1, [r6, #0]
 802f20c:	2101      	movs	r1, #1
 802f20e:	440a      	add	r2, r1
 802f210:	2b07      	cmp	r3, #7
 802f212:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802f216:	6071      	str	r1, [r6, #4]
 802f218:	f300 8146 	bgt.w	802f4a8 <_svfiprintf_r+0x72c>
 802f21c:	3608      	adds	r6, #8
 802f21e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802f220:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802f224:	b159      	cbz	r1, 802f23e <_svfiprintf_r+0x4c2>
 802f226:	a90d      	add	r1, sp, #52	@ 0x34
 802f228:	3301      	adds	r3, #1
 802f22a:	6031      	str	r1, [r6, #0]
 802f22c:	2102      	movs	r1, #2
 802f22e:	440a      	add	r2, r1
 802f230:	2b07      	cmp	r3, #7
 802f232:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802f236:	6071      	str	r1, [r6, #4]
 802f238:	f300 813f 	bgt.w	802f4ba <_svfiprintf_r+0x73e>
 802f23c:	3608      	adds	r6, #8
 802f23e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802f240:	2b80      	cmp	r3, #128	@ 0x80
 802f242:	d123      	bne.n	802f28c <_svfiprintf_r+0x510>
 802f244:	9b03      	ldr	r3, [sp, #12]
 802f246:	eba3 0a05 	sub.w	sl, r3, r5
 802f24a:	f1ba 0f00 	cmp.w	sl, #0
 802f24e:	dd1d      	ble.n	802f28c <_svfiprintf_r+0x510>
 802f250:	4b88      	ldr	r3, [pc, #544]	@ (802f474 <_svfiprintf_r+0x6f8>)
 802f252:	6033      	str	r3, [r6, #0]
 802f254:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802f258:	f1ba 0f10 	cmp.w	sl, #16
 802f25c:	f102 0201 	add.w	r2, r2, #1
 802f260:	f106 0008 	add.w	r0, r6, #8
 802f264:	f300 8132 	bgt.w	802f4cc <_svfiprintf_r+0x750>
 802f268:	eb0c 010a 	add.w	r1, ip, sl
 802f26c:	2a07      	cmp	r2, #7
 802f26e:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802f272:	f8c6 a004 	str.w	sl, [r6, #4]
 802f276:	f340 813d 	ble.w	802f4f4 <_svfiprintf_r+0x778>
 802f27a:	9801      	ldr	r0, [sp, #4]
 802f27c:	aa0e      	add	r2, sp, #56	@ 0x38
 802f27e:	4659      	mov	r1, fp
 802f280:	f7ff fcfe 	bl	802ec80 <__ssprint_r>
 802f284:	2800      	cmp	r0, #0
 802f286:	f040 8170 	bne.w	802f56a <_svfiprintf_r+0x7ee>
 802f28a:	ae11      	add	r6, sp, #68	@ 0x44
 802f28c:	9b00      	ldr	r3, [sp, #0]
 802f28e:	1ae4      	subs	r4, r4, r3
 802f290:	2c00      	cmp	r4, #0
 802f292:	dd1a      	ble.n	802f2ca <_svfiprintf_r+0x54e>
 802f294:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802f298:	4876      	ldr	r0, [pc, #472]	@ (802f474 <_svfiprintf_r+0x6f8>)
 802f29a:	6030      	str	r0, [r6, #0]
 802f29c:	2c10      	cmp	r4, #16
 802f29e:	f103 0301 	add.w	r3, r3, #1
 802f2a2:	f106 0108 	add.w	r1, r6, #8
 802f2a6:	f300 8127 	bgt.w	802f4f8 <_svfiprintf_r+0x77c>
 802f2aa:	6074      	str	r4, [r6, #4]
 802f2ac:	2b07      	cmp	r3, #7
 802f2ae:	4414      	add	r4, r2
 802f2b0:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802f2b4:	f340 8131 	ble.w	802f51a <_svfiprintf_r+0x79e>
 802f2b8:	9801      	ldr	r0, [sp, #4]
 802f2ba:	aa0e      	add	r2, sp, #56	@ 0x38
 802f2bc:	4659      	mov	r1, fp
 802f2be:	f7ff fcdf 	bl	802ec80 <__ssprint_r>
 802f2c2:	2800      	cmp	r0, #0
 802f2c4:	f040 8151 	bne.w	802f56a <_svfiprintf_r+0x7ee>
 802f2c8:	ae11      	add	r6, sp, #68	@ 0x44
 802f2ca:	9b00      	ldr	r3, [sp, #0]
 802f2cc:	9a00      	ldr	r2, [sp, #0]
 802f2ce:	6073      	str	r3, [r6, #4]
 802f2d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802f2d2:	f8c6 8000 	str.w	r8, [r6]
 802f2d6:	4413      	add	r3, r2
 802f2d8:	9310      	str	r3, [sp, #64]	@ 0x40
 802f2da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802f2dc:	3301      	adds	r3, #1
 802f2de:	2b07      	cmp	r3, #7
 802f2e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 802f2e2:	f300 811c 	bgt.w	802f51e <_svfiprintf_r+0x7a2>
 802f2e6:	f106 0308 	add.w	r3, r6, #8
 802f2ea:	f019 0f04 	tst.w	r9, #4
 802f2ee:	f040 811e 	bne.w	802f52e <_svfiprintf_r+0x7b2>
 802f2f2:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 802f2f6:	42aa      	cmp	r2, r5
 802f2f8:	bfac      	ite	ge
 802f2fa:	189b      	addge	r3, r3, r2
 802f2fc:	195b      	addlt	r3, r3, r5
 802f2fe:	9304      	str	r3, [sp, #16]
 802f300:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802f302:	b13b      	cbz	r3, 802f314 <_svfiprintf_r+0x598>
 802f304:	9801      	ldr	r0, [sp, #4]
 802f306:	aa0e      	add	r2, sp, #56	@ 0x38
 802f308:	4659      	mov	r1, fp
 802f30a:	f7ff fcb9 	bl	802ec80 <__ssprint_r>
 802f30e:	2800      	cmp	r0, #0
 802f310:	f040 812b 	bne.w	802f56a <_svfiprintf_r+0x7ee>
 802f314:	2300      	movs	r3, #0
 802f316:	930f      	str	r3, [sp, #60]	@ 0x3c
 802f318:	463d      	mov	r5, r7
 802f31a:	ae11      	add	r6, sp, #68	@ 0x44
 802f31c:	e557      	b.n	802edce <_svfiprintf_r+0x52>
 802f31e:	4640      	mov	r0, r8
 802f320:	f7e0 ffbe 	bl	80102a0 <strlen>
 802f324:	9000      	str	r0, [sp, #0]
 802f326:	e732      	b.n	802f18e <_svfiprintf_r+0x412>
 802f328:	f049 0910 	orr.w	r9, r9, #16
 802f32c:	f019 0320 	ands.w	r3, r9, #32
 802f330:	d008      	beq.n	802f344 <_svfiprintf_r+0x5c8>
 802f332:	3507      	adds	r5, #7
 802f334:	f025 0507 	bic.w	r5, r5, #7
 802f338:	462f      	mov	r7, r5
 802f33a:	686d      	ldr	r5, [r5, #4]
 802f33c:	f857 4b08 	ldr.w	r4, [r7], #8
 802f340:	2301      	movs	r3, #1
 802f342:	e6d7      	b.n	802f0f4 <_svfiprintf_r+0x378>
 802f344:	462f      	mov	r7, r5
 802f346:	f019 0510 	ands.w	r5, r9, #16
 802f34a:	f857 4b04 	ldr.w	r4, [r7], #4
 802f34e:	d001      	beq.n	802f354 <_svfiprintf_r+0x5d8>
 802f350:	461d      	mov	r5, r3
 802f352:	e7f5      	b.n	802f340 <_svfiprintf_r+0x5c4>
 802f354:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802f358:	d001      	beq.n	802f35e <_svfiprintf_r+0x5e2>
 802f35a:	b2a4      	uxth	r4, r4
 802f35c:	e7f0      	b.n	802f340 <_svfiprintf_r+0x5c4>
 802f35e:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802f362:	d0ed      	beq.n	802f340 <_svfiprintf_r+0x5c4>
 802f364:	b2e4      	uxtb	r4, r4
 802f366:	e7f3      	b.n	802f350 <_svfiprintf_r+0x5d4>
 802f368:	4a43      	ldr	r2, [pc, #268]	@ (802f478 <_svfiprintf_r+0x6fc>)
 802f36a:	e5c6      	b.n	802eefa <_svfiprintf_r+0x17e>
 802f36c:	462f      	mov	r7, r5
 802f36e:	f019 0510 	ands.w	r5, r9, #16
 802f372:	f857 4b04 	ldr.w	r4, [r7], #4
 802f376:	d001      	beq.n	802f37c <_svfiprintf_r+0x600>
 802f378:	4615      	mov	r5, r2
 802f37a:	e5ca      	b.n	802ef12 <_svfiprintf_r+0x196>
 802f37c:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 802f380:	d001      	beq.n	802f386 <_svfiprintf_r+0x60a>
 802f382:	b2a4      	uxth	r4, r4
 802f384:	e5c5      	b.n	802ef12 <_svfiprintf_r+0x196>
 802f386:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802f38a:	f43f adc2 	beq.w	802ef12 <_svfiprintf_r+0x196>
 802f38e:	b2e4      	uxtb	r4, r4
 802f390:	e7f2      	b.n	802f378 <_svfiprintf_r+0x5fc>
 802f392:	2c0a      	cmp	r4, #10
 802f394:	f175 0300 	sbcs.w	r3, r5, #0
 802f398:	d206      	bcs.n	802f3a8 <_svfiprintf_r+0x62c>
 802f39a:	3430      	adds	r4, #48	@ 0x30
 802f39c:	b2e4      	uxtb	r4, r4
 802f39e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802f3a2:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 802f3a6:	e129      	b.n	802f5fc <_svfiprintf_r+0x880>
 802f3a8:	ab3a      	add	r3, sp, #232	@ 0xe8
 802f3aa:	9309      	str	r3, [sp, #36]	@ 0x24
 802f3ac:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 802f3b0:	f04f 0900 	mov.w	r9, #0
 802f3b4:	930a      	str	r3, [sp, #40]	@ 0x28
 802f3b6:	220a      	movs	r2, #10
 802f3b8:	2300      	movs	r3, #0
 802f3ba:	4620      	mov	r0, r4
 802f3bc:	4629      	mov	r1, r5
 802f3be:	f7e1 fccb 	bl	8010d58 <__aeabi_uldivmod>
 802f3c2:	460b      	mov	r3, r1
 802f3c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802f3c6:	900b      	str	r0, [sp, #44]	@ 0x2c
 802f3c8:	3230      	adds	r2, #48	@ 0x30
 802f3ca:	f801 2c01 	strb.w	r2, [r1, #-1]
 802f3ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802f3d0:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 802f3d4:	f109 0901 	add.w	r9, r9, #1
 802f3d8:	b1e2      	cbz	r2, 802f414 <_svfiprintf_r+0x698>
 802f3da:	9a06      	ldr	r2, [sp, #24]
 802f3dc:	7812      	ldrb	r2, [r2, #0]
 802f3de:	454a      	cmp	r2, r9
 802f3e0:	d118      	bne.n	802f414 <_svfiprintf_r+0x698>
 802f3e2:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802f3e6:	d015      	beq.n	802f414 <_svfiprintf_r+0x698>
 802f3e8:	2c0a      	cmp	r4, #10
 802f3ea:	f175 0200 	sbcs.w	r2, r5, #0
 802f3ee:	d311      	bcc.n	802f414 <_svfiprintf_r+0x698>
 802f3f0:	9309      	str	r3, [sp, #36]	@ 0x24
 802f3f2:	9b07      	ldr	r3, [sp, #28]
 802f3f4:	9908      	ldr	r1, [sp, #32]
 802f3f6:	eba8 0803 	sub.w	r8, r8, r3
 802f3fa:	461a      	mov	r2, r3
 802f3fc:	4640      	mov	r0, r8
 802f3fe:	f7fc ff86 	bl	802c30e <strncpy>
 802f402:	9b06      	ldr	r3, [sp, #24]
 802f404:	785a      	ldrb	r2, [r3, #1]
 802f406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802f408:	b172      	cbz	r2, 802f428 <_svfiprintf_r+0x6ac>
 802f40a:	9a06      	ldr	r2, [sp, #24]
 802f40c:	3201      	adds	r2, #1
 802f40e:	9206      	str	r2, [sp, #24]
 802f410:	f04f 0900 	mov.w	r9, #0
 802f414:	2c0a      	cmp	r4, #10
 802f416:	f175 0500 	sbcs.w	r5, r5, #0
 802f41a:	f0c0 80ef 	bcc.w	802f5fc <_svfiprintf_r+0x880>
 802f41e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802f420:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802f424:	461d      	mov	r5, r3
 802f426:	e7c6      	b.n	802f3b6 <_svfiprintf_r+0x63a>
 802f428:	4691      	mov	r9, r2
 802f42a:	e7f3      	b.n	802f414 <_svfiprintf_r+0x698>
 802f42c:	f004 030f 	and.w	r3, r4, #15
 802f430:	9a05      	ldr	r2, [sp, #20]
 802f432:	0924      	lsrs	r4, r4, #4
 802f434:	5cd3      	ldrb	r3, [r2, r3]
 802f436:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802f43a:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802f43e:	092d      	lsrs	r5, r5, #4
 802f440:	ea54 0305 	orrs.w	r3, r4, r5
 802f444:	d1f2      	bne.n	802f42c <_svfiprintf_r+0x6b0>
 802f446:	e0d9      	b.n	802f5fc <_svfiprintf_r+0x880>
 802f448:	b923      	cbnz	r3, 802f454 <_svfiprintf_r+0x6d8>
 802f44a:	f019 0f01 	tst.w	r9, #1
 802f44e:	d001      	beq.n	802f454 <_svfiprintf_r+0x6d8>
 802f450:	2430      	movs	r4, #48	@ 0x30
 802f452:	e7a4      	b.n	802f39e <_svfiprintf_r+0x622>
 802f454:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802f458:	e0d0      	b.n	802f5fc <_svfiprintf_r+0x880>
 802f45a:	2b00      	cmp	r3, #0
 802f45c:	f000 80a1 	beq.w	802f5a2 <_svfiprintf_r+0x826>
 802f460:	2400      	movs	r4, #0
 802f462:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802f466:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802f46a:	462f      	mov	r7, r5
 802f46c:	e5e0      	b.n	802f030 <_svfiprintf_r+0x2b4>
 802f46e:	bf00      	nop
 802f470:	0803b54f 	.word	0x0803b54f
 802f474:	0803b53f 	.word	0x0803b53f
 802f478:	0803b02c 	.word	0x0803b02c
 802f47c:	2110      	movs	r1, #16
 802f47e:	6071      	str	r1, [r6, #4]
 802f480:	2a07      	cmp	r2, #7
 802f482:	4461      	add	r1, ip
 802f484:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802f488:	dd08      	ble.n	802f49c <_svfiprintf_r+0x720>
 802f48a:	9801      	ldr	r0, [sp, #4]
 802f48c:	aa0e      	add	r2, sp, #56	@ 0x38
 802f48e:	4659      	mov	r1, fp
 802f490:	f7ff fbf6 	bl	802ec80 <__ssprint_r>
 802f494:	2800      	cmp	r0, #0
 802f496:	d168      	bne.n	802f56a <_svfiprintf_r+0x7ee>
 802f498:	4b5c      	ldr	r3, [pc, #368]	@ (802f60c <_svfiprintf_r+0x890>)
 802f49a:	a811      	add	r0, sp, #68	@ 0x44
 802f49c:	f1aa 0a10 	sub.w	sl, sl, #16
 802f4a0:	4606      	mov	r6, r0
 802f4a2:	e68d      	b.n	802f1c0 <_svfiprintf_r+0x444>
 802f4a4:	4606      	mov	r6, r0
 802f4a6:	e6a8      	b.n	802f1fa <_svfiprintf_r+0x47e>
 802f4a8:	9801      	ldr	r0, [sp, #4]
 802f4aa:	aa0e      	add	r2, sp, #56	@ 0x38
 802f4ac:	4659      	mov	r1, fp
 802f4ae:	f7ff fbe7 	bl	802ec80 <__ssprint_r>
 802f4b2:	2800      	cmp	r0, #0
 802f4b4:	d159      	bne.n	802f56a <_svfiprintf_r+0x7ee>
 802f4b6:	ae11      	add	r6, sp, #68	@ 0x44
 802f4b8:	e6b1      	b.n	802f21e <_svfiprintf_r+0x4a2>
 802f4ba:	9801      	ldr	r0, [sp, #4]
 802f4bc:	aa0e      	add	r2, sp, #56	@ 0x38
 802f4be:	4659      	mov	r1, fp
 802f4c0:	f7ff fbde 	bl	802ec80 <__ssprint_r>
 802f4c4:	2800      	cmp	r0, #0
 802f4c6:	d150      	bne.n	802f56a <_svfiprintf_r+0x7ee>
 802f4c8:	ae11      	add	r6, sp, #68	@ 0x44
 802f4ca:	e6b8      	b.n	802f23e <_svfiprintf_r+0x4c2>
 802f4cc:	2110      	movs	r1, #16
 802f4ce:	6071      	str	r1, [r6, #4]
 802f4d0:	2a07      	cmp	r2, #7
 802f4d2:	4461      	add	r1, ip
 802f4d4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802f4d8:	dd08      	ble.n	802f4ec <_svfiprintf_r+0x770>
 802f4da:	9801      	ldr	r0, [sp, #4]
 802f4dc:	aa0e      	add	r2, sp, #56	@ 0x38
 802f4de:	4659      	mov	r1, fp
 802f4e0:	f7ff fbce 	bl	802ec80 <__ssprint_r>
 802f4e4:	2800      	cmp	r0, #0
 802f4e6:	d140      	bne.n	802f56a <_svfiprintf_r+0x7ee>
 802f4e8:	4b49      	ldr	r3, [pc, #292]	@ (802f610 <_svfiprintf_r+0x894>)
 802f4ea:	a811      	add	r0, sp, #68	@ 0x44
 802f4ec:	f1aa 0a10 	sub.w	sl, sl, #16
 802f4f0:	4606      	mov	r6, r0
 802f4f2:	e6ae      	b.n	802f252 <_svfiprintf_r+0x4d6>
 802f4f4:	4606      	mov	r6, r0
 802f4f6:	e6c9      	b.n	802f28c <_svfiprintf_r+0x510>
 802f4f8:	2010      	movs	r0, #16
 802f4fa:	4402      	add	r2, r0
 802f4fc:	2b07      	cmp	r3, #7
 802f4fe:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802f502:	6070      	str	r0, [r6, #4]
 802f504:	dd06      	ble.n	802f514 <_svfiprintf_r+0x798>
 802f506:	9801      	ldr	r0, [sp, #4]
 802f508:	aa0e      	add	r2, sp, #56	@ 0x38
 802f50a:	4659      	mov	r1, fp
 802f50c:	f7ff fbb8 	bl	802ec80 <__ssprint_r>
 802f510:	bb58      	cbnz	r0, 802f56a <_svfiprintf_r+0x7ee>
 802f512:	a911      	add	r1, sp, #68	@ 0x44
 802f514:	3c10      	subs	r4, #16
 802f516:	460e      	mov	r6, r1
 802f518:	e6bc      	b.n	802f294 <_svfiprintf_r+0x518>
 802f51a:	460e      	mov	r6, r1
 802f51c:	e6d5      	b.n	802f2ca <_svfiprintf_r+0x54e>
 802f51e:	9801      	ldr	r0, [sp, #4]
 802f520:	aa0e      	add	r2, sp, #56	@ 0x38
 802f522:	4659      	mov	r1, fp
 802f524:	f7ff fbac 	bl	802ec80 <__ssprint_r>
 802f528:	b9f8      	cbnz	r0, 802f56a <_svfiprintf_r+0x7ee>
 802f52a:	ab11      	add	r3, sp, #68	@ 0x44
 802f52c:	e6dd      	b.n	802f2ea <_svfiprintf_r+0x56e>
 802f52e:	9a03      	ldr	r2, [sp, #12]
 802f530:	1b54      	subs	r4, r2, r5
 802f532:	2c00      	cmp	r4, #0
 802f534:	f77f aedd 	ble.w	802f2f2 <_svfiprintf_r+0x576>
 802f538:	4e34      	ldr	r6, [pc, #208]	@ (802f60c <_svfiprintf_r+0x890>)
 802f53a:	f04f 0810 	mov.w	r8, #16
 802f53e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802f542:	2c10      	cmp	r4, #16
 802f544:	f102 0201 	add.w	r2, r2, #1
 802f548:	601e      	str	r6, [r3, #0]
 802f54a:	dc17      	bgt.n	802f57c <_svfiprintf_r+0x800>
 802f54c:	605c      	str	r4, [r3, #4]
 802f54e:	2a07      	cmp	r2, #7
 802f550:	440c      	add	r4, r1
 802f552:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802f556:	f77f aecc 	ble.w	802f2f2 <_svfiprintf_r+0x576>
 802f55a:	9801      	ldr	r0, [sp, #4]
 802f55c:	aa0e      	add	r2, sp, #56	@ 0x38
 802f55e:	4659      	mov	r1, fp
 802f560:	f7ff fb8e 	bl	802ec80 <__ssprint_r>
 802f564:	2800      	cmp	r0, #0
 802f566:	f43f aec4 	beq.w	802f2f2 <_svfiprintf_r+0x576>
 802f56a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802f56e:	065b      	lsls	r3, r3, #25
 802f570:	f53f ac1c 	bmi.w	802edac <_svfiprintf_r+0x30>
 802f574:	9804      	ldr	r0, [sp, #16]
 802f576:	b03b      	add	sp, #236	@ 0xec
 802f578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f57c:	3110      	adds	r1, #16
 802f57e:	2a07      	cmp	r2, #7
 802f580:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802f584:	f8c3 8004 	str.w	r8, [r3, #4]
 802f588:	dc02      	bgt.n	802f590 <_svfiprintf_r+0x814>
 802f58a:	3308      	adds	r3, #8
 802f58c:	3c10      	subs	r4, #16
 802f58e:	e7d6      	b.n	802f53e <_svfiprintf_r+0x7c2>
 802f590:	9801      	ldr	r0, [sp, #4]
 802f592:	aa0e      	add	r2, sp, #56	@ 0x38
 802f594:	4659      	mov	r1, fp
 802f596:	f7ff fb73 	bl	802ec80 <__ssprint_r>
 802f59a:	2800      	cmp	r0, #0
 802f59c:	d1e5      	bne.n	802f56a <_svfiprintf_r+0x7ee>
 802f59e:	ab11      	add	r3, sp, #68	@ 0x44
 802f5a0:	e7f4      	b.n	802f58c <_svfiprintf_r+0x810>
 802f5a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802f5a4:	2b00      	cmp	r3, #0
 802f5a6:	d0e0      	beq.n	802f56a <_svfiprintf_r+0x7ee>
 802f5a8:	9801      	ldr	r0, [sp, #4]
 802f5aa:	aa0e      	add	r2, sp, #56	@ 0x38
 802f5ac:	4659      	mov	r1, fp
 802f5ae:	f7ff fb67 	bl	802ec80 <__ssprint_r>
 802f5b2:	e7da      	b.n	802f56a <_svfiprintf_r+0x7ee>
 802f5b4:	ea54 0205 	orrs.w	r2, r4, r5
 802f5b8:	46ca      	mov	sl, r9
 802f5ba:	f43f adac 	beq.w	802f116 <_svfiprintf_r+0x39a>
 802f5be:	2b01      	cmp	r3, #1
 802f5c0:	f43f aee7 	beq.w	802f392 <_svfiprintf_r+0x616>
 802f5c4:	2b02      	cmp	r3, #2
 802f5c6:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802f5ca:	f43f af2f 	beq.w	802f42c <_svfiprintf_r+0x6b0>
 802f5ce:	f004 0307 	and.w	r3, r4, #7
 802f5d2:	08e4      	lsrs	r4, r4, #3
 802f5d4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802f5d8:	08ed      	lsrs	r5, r5, #3
 802f5da:	3330      	adds	r3, #48	@ 0x30
 802f5dc:	ea54 0105 	orrs.w	r1, r4, r5
 802f5e0:	4642      	mov	r2, r8
 802f5e2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802f5e6:	d1f2      	bne.n	802f5ce <_svfiprintf_r+0x852>
 802f5e8:	f01a 0f01 	tst.w	sl, #1
 802f5ec:	d006      	beq.n	802f5fc <_svfiprintf_r+0x880>
 802f5ee:	2b30      	cmp	r3, #48	@ 0x30
 802f5f0:	d004      	beq.n	802f5fc <_svfiprintf_r+0x880>
 802f5f2:	2330      	movs	r3, #48	@ 0x30
 802f5f4:	f808 3c01 	strb.w	r3, [r8, #-1]
 802f5f8:	f1a2 0802 	sub.w	r8, r2, #2
 802f5fc:	ab3a      	add	r3, sp, #232	@ 0xe8
 802f5fe:	eba3 0308 	sub.w	r3, r3, r8
 802f602:	9c00      	ldr	r4, [sp, #0]
 802f604:	9300      	str	r3, [sp, #0]
 802f606:	46d1      	mov	r9, sl
 802f608:	e5c2      	b.n	802f190 <_svfiprintf_r+0x414>
 802f60a:	bf00      	nop
 802f60c:	0803b54f 	.word	0x0803b54f
 802f610:	0803b53f 	.word	0x0803b53f

0802f614 <_sungetc_r>:
 802f614:	b538      	push	{r3, r4, r5, lr}
 802f616:	1c4b      	adds	r3, r1, #1
 802f618:	4614      	mov	r4, r2
 802f61a:	d103      	bne.n	802f624 <_sungetc_r+0x10>
 802f61c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 802f620:	4628      	mov	r0, r5
 802f622:	bd38      	pop	{r3, r4, r5, pc}
 802f624:	8993      	ldrh	r3, [r2, #12]
 802f626:	f023 0320 	bic.w	r3, r3, #32
 802f62a:	8193      	strh	r3, [r2, #12]
 802f62c:	6853      	ldr	r3, [r2, #4]
 802f62e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 802f630:	b2cd      	uxtb	r5, r1
 802f632:	b18a      	cbz	r2, 802f658 <_sungetc_r+0x44>
 802f634:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 802f636:	429a      	cmp	r2, r3
 802f638:	dd08      	ble.n	802f64c <_sungetc_r+0x38>
 802f63a:	6823      	ldr	r3, [r4, #0]
 802f63c:	1e5a      	subs	r2, r3, #1
 802f63e:	6022      	str	r2, [r4, #0]
 802f640:	f803 5c01 	strb.w	r5, [r3, #-1]
 802f644:	6863      	ldr	r3, [r4, #4]
 802f646:	3301      	adds	r3, #1
 802f648:	6063      	str	r3, [r4, #4]
 802f64a:	e7e9      	b.n	802f620 <_sungetc_r+0xc>
 802f64c:	4621      	mov	r1, r4
 802f64e:	f005 f8a7 	bl	80347a0 <__submore>
 802f652:	2800      	cmp	r0, #0
 802f654:	d0f1      	beq.n	802f63a <_sungetc_r+0x26>
 802f656:	e7e1      	b.n	802f61c <_sungetc_r+0x8>
 802f658:	6921      	ldr	r1, [r4, #16]
 802f65a:	6822      	ldr	r2, [r4, #0]
 802f65c:	b141      	cbz	r1, 802f670 <_sungetc_r+0x5c>
 802f65e:	4291      	cmp	r1, r2
 802f660:	d206      	bcs.n	802f670 <_sungetc_r+0x5c>
 802f662:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 802f666:	42a9      	cmp	r1, r5
 802f668:	d102      	bne.n	802f670 <_sungetc_r+0x5c>
 802f66a:	3a01      	subs	r2, #1
 802f66c:	6022      	str	r2, [r4, #0]
 802f66e:	e7ea      	b.n	802f646 <_sungetc_r+0x32>
 802f670:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 802f674:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802f678:	6323      	str	r3, [r4, #48]	@ 0x30
 802f67a:	2303      	movs	r3, #3
 802f67c:	6363      	str	r3, [r4, #52]	@ 0x34
 802f67e:	4623      	mov	r3, r4
 802f680:	f803 5f42 	strb.w	r5, [r3, #66]!
 802f684:	6023      	str	r3, [r4, #0]
 802f686:	2301      	movs	r3, #1
 802f688:	e7de      	b.n	802f648 <_sungetc_r+0x34>

0802f68a <__ssrefill_r>:
 802f68a:	b510      	push	{r4, lr}
 802f68c:	460c      	mov	r4, r1
 802f68e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 802f690:	b169      	cbz	r1, 802f6ae <__ssrefill_r+0x24>
 802f692:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802f696:	4299      	cmp	r1, r3
 802f698:	d001      	beq.n	802f69e <__ssrefill_r+0x14>
 802f69a:	f7fe ff2f 	bl	802e4fc <_free_r>
 802f69e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802f6a0:	6063      	str	r3, [r4, #4]
 802f6a2:	2000      	movs	r0, #0
 802f6a4:	6320      	str	r0, [r4, #48]	@ 0x30
 802f6a6:	b113      	cbz	r3, 802f6ae <__ssrefill_r+0x24>
 802f6a8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 802f6aa:	6023      	str	r3, [r4, #0]
 802f6ac:	bd10      	pop	{r4, pc}
 802f6ae:	6923      	ldr	r3, [r4, #16]
 802f6b0:	6023      	str	r3, [r4, #0]
 802f6b2:	2300      	movs	r3, #0
 802f6b4:	6063      	str	r3, [r4, #4]
 802f6b6:	89a3      	ldrh	r3, [r4, #12]
 802f6b8:	f043 0320 	orr.w	r3, r3, #32
 802f6bc:	81a3      	strh	r3, [r4, #12]
 802f6be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802f6c2:	e7f3      	b.n	802f6ac <__ssrefill_r+0x22>

0802f6c4 <_sfread_r>:
 802f6c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f6c8:	461f      	mov	r7, r3
 802f6ca:	4613      	mov	r3, r2
 802f6cc:	437b      	muls	r3, r7
 802f6ce:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802f6d0:	9000      	str	r0, [sp, #0]
 802f6d2:	4688      	mov	r8, r1
 802f6d4:	4691      	mov	r9, r2
 802f6d6:	d028      	beq.n	802f72a <_sfread_r+0x66>
 802f6d8:	461e      	mov	r6, r3
 802f6da:	f04f 0b00 	mov.w	fp, #0
 802f6de:	e9d4 1500 	ldrd	r1, r5, [r4]
 802f6e2:	42b5      	cmp	r5, r6
 802f6e4:	d30b      	bcc.n	802f6fe <_sfread_r+0x3a>
 802f6e6:	4632      	mov	r2, r6
 802f6e8:	4640      	mov	r0, r8
 802f6ea:	f7fe f805 	bl	802d6f8 <memcpy>
 802f6ee:	6862      	ldr	r2, [r4, #4]
 802f6f0:	6821      	ldr	r1, [r4, #0]
 802f6f2:	1b92      	subs	r2, r2, r6
 802f6f4:	4431      	add	r1, r6
 802f6f6:	6062      	str	r2, [r4, #4]
 802f6f8:	6021      	str	r1, [r4, #0]
 802f6fa:	463b      	mov	r3, r7
 802f6fc:	e015      	b.n	802f72a <_sfread_r+0x66>
 802f6fe:	462a      	mov	r2, r5
 802f700:	4640      	mov	r0, r8
 802f702:	9301      	str	r3, [sp, #4]
 802f704:	f7fd fff8 	bl	802d6f8 <memcpy>
 802f708:	6822      	ldr	r2, [r4, #0]
 802f70a:	9800      	ldr	r0, [sp, #0]
 802f70c:	442a      	add	r2, r5
 802f70e:	e9c4 2b00 	strd	r2, fp, [r4]
 802f712:	4621      	mov	r1, r4
 802f714:	f7ff ffb9 	bl	802f68a <__ssrefill_r>
 802f718:	44a8      	add	r8, r5
 802f71a:	9b01      	ldr	r3, [sp, #4]
 802f71c:	eba6 0a05 	sub.w	sl, r6, r5
 802f720:	b138      	cbz	r0, 802f732 <_sfread_r+0x6e>
 802f722:	441d      	add	r5, r3
 802f724:	1bad      	subs	r5, r5, r6
 802f726:	fbb5 f3f9 	udiv	r3, r5, r9
 802f72a:	4618      	mov	r0, r3
 802f72c:	b003      	add	sp, #12
 802f72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f732:	4656      	mov	r6, sl
 802f734:	e7d3      	b.n	802f6de <_sfread_r+0x1a>
	...

0802f738 <__ssvfiscanf_r>:
 802f738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f73c:	b0df      	sub	sp, #380	@ 0x17c
 802f73e:	af02      	add	r7, sp, #8
 802f740:	460c      	mov	r4, r1
 802f742:	623b      	str	r3, [r7, #32]
 802f744:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 802f748:	6278      	str	r0, [r7, #36]	@ 0x24
 802f74a:	049d      	lsls	r5, r3, #18
 802f74c:	60ba      	str	r2, [r7, #8]
 802f74e:	d406      	bmi.n	802f75e <__ssvfiscanf_r+0x26>
 802f750:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802f754:	818b      	strh	r3, [r1, #12]
 802f756:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802f758:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802f75c:	664b      	str	r3, [r1, #100]	@ 0x64
 802f75e:	2300      	movs	r3, #0
 802f760:	e9c7 3305 	strd	r3, r3, [r7, #20]
 802f764:	60fb      	str	r3, [r7, #12]
 802f766:	469b      	mov	fp, r3
 802f768:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f76a:	61fb      	str	r3, [r7, #28]
 802f76c:	e005      	b.n	802f77a <__ssvfiscanf_r+0x42>
 802f76e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f770:	4621      	mov	r1, r4
 802f772:	f7ff ff8a 	bl	802f68a <__ssrefill_r>
 802f776:	b168      	cbz	r0, 802f794 <__ssvfiscanf_r+0x5c>
 802f778:	60bd      	str	r5, [r7, #8]
 802f77a:	68bd      	ldr	r5, [r7, #8]
 802f77c:	f815 3b01 	ldrb.w	r3, [r5], #1
 802f780:	637b      	str	r3, [r7, #52]	@ 0x34
 802f782:	b333      	cbz	r3, 802f7d2 <__ssvfiscanf_r+0x9a>
 802f784:	4a75      	ldr	r2, [pc, #468]	@ (802f95c <__ssvfiscanf_r+0x224>)
 802f786:	5cd6      	ldrb	r6, [r2, r3]
 802f788:	f016 0608 	ands.w	r6, r6, #8
 802f78c:	d011      	beq.n	802f7b2 <__ssvfiscanf_r+0x7a>
 802f78e:	6863      	ldr	r3, [r4, #4]
 802f790:	2b00      	cmp	r3, #0
 802f792:	ddec      	ble.n	802f76e <__ssvfiscanf_r+0x36>
 802f794:	6823      	ldr	r3, [r4, #0]
 802f796:	4971      	ldr	r1, [pc, #452]	@ (802f95c <__ssvfiscanf_r+0x224>)
 802f798:	781a      	ldrb	r2, [r3, #0]
 802f79a:	5c8a      	ldrb	r2, [r1, r2]
 802f79c:	0710      	lsls	r0, r2, #28
 802f79e:	d5eb      	bpl.n	802f778 <__ssvfiscanf_r+0x40>
 802f7a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f7a2:	3201      	adds	r2, #1
 802f7a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802f7a6:	6862      	ldr	r2, [r4, #4]
 802f7a8:	3301      	adds	r3, #1
 802f7aa:	3a01      	subs	r2, #1
 802f7ac:	6062      	str	r2, [r4, #4]
 802f7ae:	6023      	str	r3, [r4, #0]
 802f7b0:	e7ed      	b.n	802f78e <__ssvfiscanf_r+0x56>
 802f7b2:	2b25      	cmp	r3, #37	@ 0x25
 802f7b4:	d15f      	bne.n	802f876 <__ssvfiscanf_r+0x13e>
 802f7b6:	62be      	str	r6, [r7, #40]	@ 0x28
 802f7b8:	462a      	mov	r2, r5
 802f7ba:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f7be:	60ba      	str	r2, [r7, #8]
 802f7c0:	2b7a      	cmp	r3, #122	@ 0x7a
 802f7c2:	d806      	bhi.n	802f7d2 <__ssvfiscanf_r+0x9a>
 802f7c4:	2b42      	cmp	r3, #66	@ 0x42
 802f7c6:	d809      	bhi.n	802f7dc <__ssvfiscanf_r+0xa4>
 802f7c8:	2b2a      	cmp	r3, #42	@ 0x2a
 802f7ca:	d079      	beq.n	802f8c0 <__ssvfiscanf_r+0x188>
 802f7cc:	d844      	bhi.n	802f858 <__ssvfiscanf_r+0x120>
 802f7ce:	2b25      	cmp	r3, #37	@ 0x25
 802f7d0:	d050      	beq.n	802f874 <__ssvfiscanf_r+0x13c>
 802f7d2:	f1bb 0f00 	cmp.w	fp, #0
 802f7d6:	f000 810e 	beq.w	802f9f6 <__ssvfiscanf_r+0x2be>
 802f7da:	e107      	b.n	802f9ec <__ssvfiscanf_r+0x2b4>
 802f7dc:	3b43      	subs	r3, #67	@ 0x43
 802f7de:	2b37      	cmp	r3, #55	@ 0x37
 802f7e0:	f200 80fd 	bhi.w	802f9de <__ssvfiscanf_r+0x2a6>
 802f7e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 802f7e8:	00a40117 	.word	0x00a40117
 802f7ec:	00fb00fb 	.word	0x00fb00fb
 802f7f0:	00fb00fb 	.word	0x00fb00fb
 802f7f4:	00fb00fb 	.word	0x00fb00fb
 802f7f8:	008e00fb 	.word	0x008e00fb
 802f7fc:	00fb00fb 	.word	0x00fb00fb
 802f800:	00fb00a8 	.word	0x00fb00a8
 802f804:	00fb00fb 	.word	0x00fb00fb
 802f808:	00fb00c0 	.word	0x00fb00c0
 802f80c:	00fb00fb 	.word	0x00fb00fb
 802f810:	00b400fb 	.word	0x00b400fb
 802f814:	00fb00fb 	.word	0x00fb00fb
 802f818:	00fb010d 	.word	0x00fb010d
 802f81c:	00fb00fb 	.word	0x00fb00fb
 802f820:	00fb00fb 	.word	0x00fb00fb
 802f824:	00fb00fb 	.word	0x00fb00fb
 802f828:	00a60119 	.word	0x00a60119
 802f82c:	00fb00fb 	.word	0x00fb00fb
 802f830:	008100fb 	.word	0x008100fb
 802f834:	008e013e 	.word	0x008e013e
 802f838:	007300fb 	.word	0x007300fb
 802f83c:	01200095 	.word	0x01200095
 802f840:	011d00aa 	.word	0x011d00aa
 802f844:	00fb00fb 	.word	0x00fb00fb
 802f848:	009200c2 	.word	0x009200c2
 802f84c:	00fb00b0 	.word	0x00fb00b0
 802f850:	00b400fb 	.word	0x00b400fb
 802f854:	009200fb 	.word	0x009200fb
 802f858:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 802f85c:	2a09      	cmp	r2, #9
 802f85e:	d8b8      	bhi.n	802f7d2 <__ssvfiscanf_r+0x9a>
 802f860:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 802f864:	d1b5      	bne.n	802f7d2 <__ssvfiscanf_r+0x9a>
 802f866:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802f868:	220a      	movs	r2, #10
 802f86a:	fb02 3301 	mla	r3, r2, r1, r3
 802f86e:	3b30      	subs	r3, #48	@ 0x30
 802f870:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f872:	e02a      	b.n	802f8ca <__ssvfiscanf_r+0x192>
 802f874:	68bd      	ldr	r5, [r7, #8]
 802f876:	6863      	ldr	r3, [r4, #4]
 802f878:	2b00      	cmp	r3, #0
 802f87a:	dd0e      	ble.n	802f89a <__ssvfiscanf_r+0x162>
 802f87c:	6823      	ldr	r3, [r4, #0]
 802f87e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802f882:	7819      	ldrb	r1, [r3, #0]
 802f884:	4291      	cmp	r1, r2
 802f886:	d1a4      	bne.n	802f7d2 <__ssvfiscanf_r+0x9a>
 802f888:	3301      	adds	r3, #1
 802f88a:	6862      	ldr	r2, [r4, #4]
 802f88c:	6023      	str	r3, [r4, #0]
 802f88e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802f890:	3a01      	subs	r2, #1
 802f892:	3301      	adds	r3, #1
 802f894:	6062      	str	r2, [r4, #4]
 802f896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f898:	e76e      	b.n	802f778 <__ssvfiscanf_r+0x40>
 802f89a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f89c:	4621      	mov	r1, r4
 802f89e:	f7ff fef4 	bl	802f68a <__ssrefill_r>
 802f8a2:	2800      	cmp	r0, #0
 802f8a4:	d0ea      	beq.n	802f87c <__ssvfiscanf_r+0x144>
 802f8a6:	69fb      	ldr	r3, [r7, #28]
 802f8a8:	b113      	cbz	r3, 802f8b0 <__ssvfiscanf_r+0x178>
 802f8aa:	89a3      	ldrh	r3, [r4, #12]
 802f8ac:	065b      	lsls	r3, r3, #25
 802f8ae:	d590      	bpl.n	802f7d2 <__ssvfiscanf_r+0x9a>
 802f8b0:	f1bb 0f00 	cmp.w	fp, #0
 802f8b4:	f040 8654 	bne.w	8030560 <__ssvfiscanf_r+0xe28>
 802f8b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802f8bc:	61fb      	str	r3, [r7, #28]
 802f8be:	e09a      	b.n	802f9f6 <__ssvfiscanf_r+0x2be>
 802f8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f8c2:	4333      	orrs	r3, r6
 802f8c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f8c6:	d184      	bne.n	802f7d2 <__ssvfiscanf_r+0x9a>
 802f8c8:	2610      	movs	r6, #16
 802f8ca:	68bd      	ldr	r5, [r7, #8]
 802f8cc:	e774      	b.n	802f7b8 <__ssvfiscanf_r+0x80>
 802f8ce:	0731      	lsls	r1, r6, #28
 802f8d0:	f47f af7f 	bne.w	802f7d2 <__ssvfiscanf_r+0x9a>
 802f8d4:	786b      	ldrb	r3, [r5, #1]
 802f8d6:	2b6c      	cmp	r3, #108	@ 0x6c
 802f8d8:	d104      	bne.n	802f8e4 <__ssvfiscanf_r+0x1ac>
 802f8da:	1cab      	adds	r3, r5, #2
 802f8dc:	60bb      	str	r3, [r7, #8]
 802f8de:	f046 0602 	orr.w	r6, r6, #2
 802f8e2:	e7f2      	b.n	802f8ca <__ssvfiscanf_r+0x192>
 802f8e4:	f046 0601 	orr.w	r6, r6, #1
 802f8e8:	e7ef      	b.n	802f8ca <__ssvfiscanf_r+0x192>
 802f8ea:	0732      	lsls	r2, r6, #28
 802f8ec:	f47f af71 	bne.w	802f7d2 <__ssvfiscanf_r+0x9a>
 802f8f0:	786b      	ldrb	r3, [r5, #1]
 802f8f2:	2b68      	cmp	r3, #104	@ 0x68
 802f8f4:	bf03      	ittte	eq
 802f8f6:	1cab      	addeq	r3, r5, #2
 802f8f8:	60bb      	streq	r3, [r7, #8]
 802f8fa:	f046 0608 	orreq.w	r6, r6, #8
 802f8fe:	f046 0604 	orrne.w	r6, r6, #4
 802f902:	e7e2      	b.n	802f8ca <__ssvfiscanf_r+0x192>
 802f904:	0733      	lsls	r3, r6, #28
 802f906:	f47f af64 	bne.w	802f7d2 <__ssvfiscanf_r+0x9a>
 802f90a:	e7e8      	b.n	802f8de <__ssvfiscanf_r+0x1a6>
 802f90c:	0735      	lsls	r5, r6, #28
 802f90e:	d0dc      	beq.n	802f8ca <__ssvfiscanf_r+0x192>
 802f910:	e75f      	b.n	802f7d2 <__ssvfiscanf_r+0x9a>
 802f912:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 802f916:	f47f af5c 	bne.w	802f7d2 <__ssvfiscanf_r+0x9a>
 802f91a:	f1bb 0f00 	cmp.w	fp, #0
 802f91e:	d104      	bne.n	802f92a <__ssvfiscanf_r+0x1f2>
 802f920:	b082      	sub	sp, #8
 802f922:	f10d 0b08 	add.w	fp, sp, #8
 802f926:	e9cb 3300 	strd	r3, r3, [fp]
 802f92a:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 802f92e:	e7cc      	b.n	802f8ca <__ssvfiscanf_r+0x192>
 802f930:	f046 0601 	orr.w	r6, r6, #1
 802f934:	4b0a      	ldr	r3, [pc, #40]	@ (802f960 <__ssvfiscanf_r+0x228>)
 802f936:	e008      	b.n	802f94a <__ssvfiscanf_r+0x212>
 802f938:	f046 0601 	orr.w	r6, r6, #1
 802f93c:	4b09      	ldr	r3, [pc, #36]	@ (802f964 <__ssvfiscanf_r+0x22c>)
 802f93e:	60fb      	str	r3, [r7, #12]
 802f940:	2308      	movs	r3, #8
 802f942:	617b      	str	r3, [r7, #20]
 802f944:	2503      	movs	r5, #3
 802f946:	e012      	b.n	802f96e <__ssvfiscanf_r+0x236>
 802f948:	4b06      	ldr	r3, [pc, #24]	@ (802f964 <__ssvfiscanf_r+0x22c>)
 802f94a:	60fb      	str	r3, [r7, #12]
 802f94c:	230a      	movs	r3, #10
 802f94e:	e7f8      	b.n	802f942 <__ssvfiscanf_r+0x20a>
 802f950:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 802f954:	4b03      	ldr	r3, [pc, #12]	@ (802f964 <__ssvfiscanf_r+0x22c>)
 802f956:	60fb      	str	r3, [r7, #12]
 802f958:	2310      	movs	r3, #16
 802f95a:	e7f2      	b.n	802f942 <__ssvfiscanf_r+0x20a>
 802f95c:	0803b3c9 	.word	0x0803b3c9
 802f960:	0802b989 	.word	0x0802b989
 802f964:	08034789 	.word	0x08034789
 802f968:	f046 0601 	orr.w	r6, r6, #1
 802f96c:	2502      	movs	r5, #2
 802f96e:	6863      	ldr	r3, [r4, #4]
 802f970:	2b00      	cmp	r3, #0
 802f972:	dd7b      	ble.n	802fa6c <__ssvfiscanf_r+0x334>
 802f974:	0671      	lsls	r1, r6, #25
 802f976:	d407      	bmi.n	802f988 <__ssvfiscanf_r+0x250>
 802f978:	f8df 8388 	ldr.w	r8, [pc, #904]	@ 802fd04 <__ssvfiscanf_r+0x5cc>
 802f97c:	6823      	ldr	r3, [r4, #0]
 802f97e:	781a      	ldrb	r2, [r3, #0]
 802f980:	f818 2002 	ldrb.w	r2, [r8, r2]
 802f984:	0712      	lsls	r2, r2, #28
 802f986:	d479      	bmi.n	802fa7c <__ssvfiscanf_r+0x344>
 802f988:	2d02      	cmp	r5, #2
 802f98a:	f000 836f 	beq.w	803006c <__ssvfiscanf_r+0x934>
 802f98e:	2d03      	cmp	r5, #3
 802f990:	f000 84f6 	beq.w	8030380 <__ssvfiscanf_r+0xc48>
 802f994:	f006 0310 	and.w	r3, r6, #16
 802f998:	2d01      	cmp	r5, #1
 802f99a:	613b      	str	r3, [r7, #16]
 802f99c:	f006 0501 	and.w	r5, r6, #1
 802f9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f9a2:	f000 81b1 	beq.w	802fd08 <__ssvfiscanf_r+0x5d0>
 802f9a6:	2b01      	cmp	r3, #1
 802f9a8:	bf38      	it	cc
 802f9aa:	2301      	movcc	r3, #1
 802f9ac:	4698      	mov	r8, r3
 802f9ae:	693b      	ldr	r3, [r7, #16]
 802f9b0:	2d00      	cmp	r5, #0
 802f9b2:	f000 813b 	beq.w	802fc2c <__ssvfiscanf_r+0x4f4>
 802f9b6:	2b00      	cmp	r3, #0
 802f9b8:	f040 80d8 	bne.w	802fb6c <__ssvfiscanf_r+0x434>
 802f9bc:	6a3b      	ldr	r3, [r7, #32]
 802f9be:	0636      	lsls	r6, r6, #24
 802f9c0:	f853 5b04 	ldr.w	r5, [r3], #4
 802f9c4:	623b      	str	r3, [r7, #32]
 802f9c6:	f140 80d7 	bpl.w	802fb78 <__ssvfiscanf_r+0x440>
 802f9ca:	b145      	cbz	r5, 802f9de <__ssvfiscanf_r+0x2a6>
 802f9cc:	2080      	movs	r0, #128	@ 0x80
 802f9ce:	f7fe fe9d 	bl	802e70c <malloc>
 802f9d2:	4606      	mov	r6, r0
 802f9d4:	2800      	cmp	r0, #0
 802f9d6:	d164      	bne.n	802faa2 <__ssvfiscanf_r+0x36a>
 802f9d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802f9dc:	61fb      	str	r3, [r7, #28]
 802f9de:	f1bb 0f00 	cmp.w	fp, #0
 802f9e2:	d008      	beq.n	802f9f6 <__ssvfiscanf_r+0x2be>
 802f9e4:	69fb      	ldr	r3, [r7, #28]
 802f9e6:	3301      	adds	r3, #1
 802f9e8:	f000 85ba 	beq.w	8030560 <__ssvfiscanf_r+0xe28>
 802f9ec:	f8db 0000 	ldr.w	r0, [fp]
 802f9f0:	b108      	cbz	r0, 802f9f6 <__ssvfiscanf_r+0x2be>
 802f9f2:	f7fe fe93 	bl	802e71c <free>
 802f9f6:	69f8      	ldr	r0, [r7, #28]
 802f9f8:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 802f9fc:	46bd      	mov	sp, r7
 802f9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802fa02:	68b9      	ldr	r1, [r7, #8]
 802fa04:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 802fa08:	f003 fe67 	bl	80336da <__sccl>
 802fa0c:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802fa10:	60b8      	str	r0, [r7, #8]
 802fa12:	2501      	movs	r5, #1
 802fa14:	e7ab      	b.n	802f96e <__ssvfiscanf_r+0x236>
 802fa16:	f046 0601 	orr.w	r6, r6, #1
 802fa1a:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802fa1e:	2500      	movs	r5, #0
 802fa20:	e7a5      	b.n	802f96e <__ssvfiscanf_r+0x236>
 802fa22:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 802fa26:	e795      	b.n	802f954 <__ssvfiscanf_r+0x21c>
 802fa28:	06f0      	lsls	r0, r6, #27
 802fa2a:	f53f aea6 	bmi.w	802f77a <__ssvfiscanf_r+0x42>
 802fa2e:	6a3a      	ldr	r2, [r7, #32]
 802fa30:	0731      	lsls	r1, r6, #28
 802fa32:	f852 3b04 	ldr.w	r3, [r2], #4
 802fa36:	623a      	str	r2, [r7, #32]
 802fa38:	d502      	bpl.n	802fa40 <__ssvfiscanf_r+0x308>
 802fa3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802fa3c:	701a      	strb	r2, [r3, #0]
 802fa3e:	e69c      	b.n	802f77a <__ssvfiscanf_r+0x42>
 802fa40:	0772      	lsls	r2, r6, #29
 802fa42:	d502      	bpl.n	802fa4a <__ssvfiscanf_r+0x312>
 802fa44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802fa46:	801a      	strh	r2, [r3, #0]
 802fa48:	e697      	b.n	802f77a <__ssvfiscanf_r+0x42>
 802fa4a:	07f5      	lsls	r5, r6, #31
 802fa4c:	d502      	bpl.n	802fa54 <__ssvfiscanf_r+0x31c>
 802fa4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802fa50:	601a      	str	r2, [r3, #0]
 802fa52:	e692      	b.n	802f77a <__ssvfiscanf_r+0x42>
 802fa54:	07b0      	lsls	r0, r6, #30
 802fa56:	d5fa      	bpl.n	802fa4e <__ssvfiscanf_r+0x316>
 802fa58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802fa5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802fa5c:	17d2      	asrs	r2, r2, #31
 802fa5e:	e9c3 1200 	strd	r1, r2, [r3]
 802fa62:	e68a      	b.n	802f77a <__ssvfiscanf_r+0x42>
 802fa64:	4ba6      	ldr	r3, [pc, #664]	@ (802fd00 <__ssvfiscanf_r+0x5c8>)
 802fa66:	60fb      	str	r3, [r7, #12]
 802fa68:	2300      	movs	r3, #0
 802fa6a:	e76a      	b.n	802f942 <__ssvfiscanf_r+0x20a>
 802fa6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fa6e:	4621      	mov	r1, r4
 802fa70:	f7ff fe0b 	bl	802f68a <__ssrefill_r>
 802fa74:	2800      	cmp	r0, #0
 802fa76:	f43f af7d 	beq.w	802f974 <__ssvfiscanf_r+0x23c>
 802fa7a:	e714      	b.n	802f8a6 <__ssvfiscanf_r+0x16e>
 802fa7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802fa7e:	3201      	adds	r2, #1
 802fa80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802fa82:	6862      	ldr	r2, [r4, #4]
 802fa84:	3a01      	subs	r2, #1
 802fa86:	2a00      	cmp	r2, #0
 802fa88:	6062      	str	r2, [r4, #4]
 802fa8a:	dd02      	ble.n	802fa92 <__ssvfiscanf_r+0x35a>
 802fa8c:	3301      	adds	r3, #1
 802fa8e:	6023      	str	r3, [r4, #0]
 802fa90:	e774      	b.n	802f97c <__ssvfiscanf_r+0x244>
 802fa92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fa94:	4621      	mov	r1, r4
 802fa96:	f7ff fdf8 	bl	802f68a <__ssrefill_r>
 802fa9a:	2800      	cmp	r0, #0
 802fa9c:	f43f af6e 	beq.w	802f97c <__ssvfiscanf_r+0x244>
 802faa0:	e701      	b.n	802f8a6 <__ssvfiscanf_r+0x16e>
 802faa2:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802faa6:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802faaa:	6028      	str	r0, [r5, #0]
 802faac:	4599      	cmp	r9, r3
 802faae:	d314      	bcc.n	802fada <__ssvfiscanf_r+0x3a2>
 802fab0:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802fab4:	4293      	cmp	r3, r2
 802fab6:	f200 8553 	bhi.w	8030560 <__ssvfiscanf_r+0xe28>
 802faba:	3308      	adds	r3, #8
 802fabc:	fa1f fa83 	uxth.w	sl, r3
 802fac0:	f8db 0000 	ldr.w	r0, [fp]
 802fac4:	ea4f 018a 	mov.w	r1, sl, lsl #2
 802fac8:	f003 fdaa 	bl	8033620 <realloc>
 802facc:	2800      	cmp	r0, #0
 802face:	f000 8547 	beq.w	8030560 <__ssvfiscanf_r+0xe28>
 802fad2:	f8cb 0000 	str.w	r0, [fp]
 802fad6:	f8ab a004 	strh.w	sl, [fp, #4]
 802fada:	f8db 3000 	ldr.w	r3, [fp]
 802fade:	f109 0201 	add.w	r2, r9, #1
 802fae2:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802fae6:	46aa      	mov	sl, r5
 802fae8:	f8ab 2006 	strh.w	r2, [fp, #6]
 802faec:	4635      	mov	r5, r6
 802faee:	f04f 0920 	mov.w	r9, #32
 802faf2:	2200      	movs	r2, #0
 802faf4:	62ba      	str	r2, [r7, #40]	@ 0x28
 802faf6:	f7fd fd4b 	bl	802d590 <__locale_mb_cur_max>
 802fafa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802fafc:	4290      	cmp	r0, r2
 802fafe:	f43f aed2 	beq.w	802f8a6 <__ssvfiscanf_r+0x16e>
 802fb02:	6821      	ldr	r1, [r4, #0]
 802fb04:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 802fb08:	f811 0b01 	ldrb.w	r0, [r1], #1
 802fb0c:	f80c 0002 	strb.w	r0, [ip, r2]
 802fb10:	1c53      	adds	r3, r2, #1
 802fb12:	6862      	ldr	r2, [r4, #4]
 802fb14:	3a01      	subs	r2, #1
 802fb16:	e9c4 1200 	strd	r1, r2, [r4]
 802fb1a:	69ba      	ldr	r2, [r7, #24]
 802fb1c:	2a03      	cmp	r2, #3
 802fb1e:	d102      	bne.n	802fb26 <__ssvfiscanf_r+0x3ee>
 802fb20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802fb22:	2a04      	cmp	r2, #4
 802fb24:	d007      	beq.n	802fb36 <__ssvfiscanf_r+0x3fe>
 802fb26:	2208      	movs	r2, #8
 802fb28:	2100      	movs	r1, #0
 802fb2a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802fb2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fb30:	f7fc fba6 	bl	802c280 <memset>
 802fb34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fb36:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 802fb3a:	9200      	str	r2, [sp, #0]
 802fb3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fb3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fb40:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802fb44:	4629      	mov	r1, r5
 802fb46:	f005 f925 	bl	8034d94 <_mbrtowc_r>
 802fb4a:	4603      	mov	r3, r0
 802fb4c:	61b8      	str	r0, [r7, #24]
 802fb4e:	1c58      	adds	r0, r3, #1
 802fb50:	f43f aea9 	beq.w	802f8a6 <__ssvfiscanf_r+0x16e>
 802fb54:	461a      	mov	r2, r3
 802fb56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fb58:	b9b2      	cbnz	r2, 802fb88 <__ssvfiscanf_r+0x450>
 802fb5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802fb5c:	441a      	add	r2, r3
 802fb5e:	4613      	mov	r3, r2
 802fb60:	693a      	ldr	r2, [r7, #16]
 802fb62:	b172      	cbz	r2, 802fb82 <__ssvfiscanf_r+0x44a>
 802fb64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802fb66:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802fb6a:	e019      	b.n	802fba0 <__ssvfiscanf_r+0x468>
 802fb6c:	f04f 0900 	mov.w	r9, #0
 802fb70:	464e      	mov	r6, r9
 802fb72:	46ca      	mov	sl, r9
 802fb74:	464d      	mov	r5, r9
 802fb76:	e7bc      	b.n	802faf2 <__ssvfiscanf_r+0x3ba>
 802fb78:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802fb7c:	464e      	mov	r6, r9
 802fb7e:	46ca      	mov	sl, r9
 802fb80:	e7b7      	b.n	802faf2 <__ssvfiscanf_r+0x3ba>
 802fb82:	693a      	ldr	r2, [r7, #16]
 802fb84:	602a      	str	r2, [r5, #0]
 802fb86:	e7ed      	b.n	802fb64 <__ssvfiscanf_r+0x42c>
 802fb88:	69ba      	ldr	r2, [r7, #24]
 802fb8a:	3202      	adds	r2, #2
 802fb8c:	d024      	beq.n	802fbd8 <__ssvfiscanf_r+0x4a0>
 802fb8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802fb90:	441a      	add	r2, r3
 802fb92:	69bb      	ldr	r3, [r7, #24]
 802fb94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802fb96:	2b03      	cmp	r3, #3
 802fb98:	d1e5      	bne.n	802fb66 <__ssvfiscanf_r+0x42e>
 802fb9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802fb9c:	2b04      	cmp	r3, #4
 802fb9e:	d1e2      	bne.n	802fb66 <__ssvfiscanf_r+0x42e>
 802fba0:	693b      	ldr	r3, [r7, #16]
 802fba2:	b9bb      	cbnz	r3, 802fbd4 <__ssvfiscanf_r+0x49c>
 802fba4:	f1ba 0f00 	cmp.w	sl, #0
 802fba8:	d013      	beq.n	802fbd2 <__ssvfiscanf_r+0x49a>
 802fbaa:	1bab      	subs	r3, r5, r6
 802fbac:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 802fbb0:	d80f      	bhi.n	802fbd2 <__ssvfiscanf_r+0x49a>
 802fbb2:	4630      	mov	r0, r6
 802fbb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802fbb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fbba:	f003 fd31 	bl	8033620 <realloc>
 802fbbe:	4606      	mov	r6, r0
 802fbc0:	2800      	cmp	r0, #0
 802fbc2:	f43f af09 	beq.w	802f9d8 <__ssvfiscanf_r+0x2a0>
 802fbc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fbc8:	f8ca 0000 	str.w	r0, [sl]
 802fbcc:	18c5      	adds	r5, r0, r3
 802fbce:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802fbd2:	3504      	adds	r5, #4
 802fbd4:	2200      	movs	r2, #0
 802fbd6:	e000      	b.n	802fbda <__ssvfiscanf_r+0x4a2>
 802fbd8:	461a      	mov	r2, r3
 802fbda:	6863      	ldr	r3, [r4, #4]
 802fbdc:	2b00      	cmp	r3, #0
 802fbde:	dc13      	bgt.n	802fc08 <__ssvfiscanf_r+0x4d0>
 802fbe0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fbe2:	62ba      	str	r2, [r7, #40]	@ 0x28
 802fbe4:	4621      	mov	r1, r4
 802fbe6:	f7ff fd50 	bl	802f68a <__ssrefill_r>
 802fbea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802fbec:	b160      	cbz	r0, 802fc08 <__ssvfiscanf_r+0x4d0>
 802fbee:	2a00      	cmp	r2, #0
 802fbf0:	f47f ae59 	bne.w	802f8a6 <__ssvfiscanf_r+0x16e>
 802fbf4:	f1ba 0f00 	cmp.w	sl, #0
 802fbf8:	d10b      	bne.n	802fc12 <__ssvfiscanf_r+0x4da>
 802fbfa:	693b      	ldr	r3, [r7, #16]
 802fbfc:	2b00      	cmp	r3, #0
 802fbfe:	f47f adbc 	bne.w	802f77a <__ssvfiscanf_r+0x42>
 802fc02:	69fb      	ldr	r3, [r7, #28]
 802fc04:	3301      	adds	r3, #1
 802fc06:	e5b0      	b.n	802f76a <__ssvfiscanf_r+0x32>
 802fc08:	f1b8 0f00 	cmp.w	r8, #0
 802fc0c:	f47f af72 	bne.w	802faf4 <__ssvfiscanf_r+0x3bc>
 802fc10:	e7f0      	b.n	802fbf4 <__ssvfiscanf_r+0x4bc>
 802fc12:	1ba9      	subs	r1, r5, r6
 802fc14:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 802fc18:	d9ef      	bls.n	802fbfa <__ssvfiscanf_r+0x4c2>
 802fc1a:	f8da 0000 	ldr.w	r0, [sl]
 802fc1e:	f003 fcff 	bl	8033620 <realloc>
 802fc22:	2800      	cmp	r0, #0
 802fc24:	d0e9      	beq.n	802fbfa <__ssvfiscanf_r+0x4c2>
 802fc26:	f8ca 0000 	str.w	r0, [sl]
 802fc2a:	e7e6      	b.n	802fbfa <__ssvfiscanf_r+0x4c2>
 802fc2c:	b1db      	cbz	r3, 802fc66 <__ssvfiscanf_r+0x52e>
 802fc2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 802fc32:	4598      	cmp	r8, r3
 802fc34:	dd10      	ble.n	802fc58 <__ssvfiscanf_r+0x520>
 802fc36:	441a      	add	r2, r3
 802fc38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fc3a:	6022      	str	r2, [r4, #0]
 802fc3c:	4621      	mov	r1, r4
 802fc3e:	441d      	add	r5, r3
 802fc40:	eba8 0803 	sub.w	r8, r8, r3
 802fc44:	f7ff fd21 	bl	802f68a <__ssrefill_r>
 802fc48:	2800      	cmp	r0, #0
 802fc4a:	d0f0      	beq.n	802fc2e <__ssvfiscanf_r+0x4f6>
 802fc4c:	2d00      	cmp	r5, #0
 802fc4e:	f43f ae2a 	beq.w	802f8a6 <__ssvfiscanf_r+0x16e>
 802fc52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fc54:	442b      	add	r3, r5
 802fc56:	e201      	b.n	803005c <__ssvfiscanf_r+0x924>
 802fc58:	eba3 0308 	sub.w	r3, r3, r8
 802fc5c:	4442      	add	r2, r8
 802fc5e:	4445      	add	r5, r8
 802fc60:	6063      	str	r3, [r4, #4]
 802fc62:	6022      	str	r2, [r4, #0]
 802fc64:	e7f5      	b.n	802fc52 <__ssvfiscanf_r+0x51a>
 802fc66:	6a3b      	ldr	r3, [r7, #32]
 802fc68:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802fc6c:	f853 5b04 	ldr.w	r5, [r3], #4
 802fc70:	623b      	str	r3, [r7, #32]
 802fc72:	d02d      	beq.n	802fcd0 <__ssvfiscanf_r+0x598>
 802fc74:	2d00      	cmp	r5, #0
 802fc76:	f43f adac 	beq.w	802f7d2 <__ssvfiscanf_r+0x9a>
 802fc7a:	4640      	mov	r0, r8
 802fc7c:	f7fe fd46 	bl	802e70c <malloc>
 802fc80:	4681      	mov	r9, r0
 802fc82:	2800      	cmp	r0, #0
 802fc84:	f43f ae14 	beq.w	802f8b0 <__ssvfiscanf_r+0x178>
 802fc88:	f8bb a006 	ldrh.w	sl, [fp, #6]
 802fc8c:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 802fc90:	6028      	str	r0, [r5, #0]
 802fc92:	45b2      	cmp	sl, r6
 802fc94:	d312      	bcc.n	802fcbc <__ssvfiscanf_r+0x584>
 802fc96:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802fc9a:	429e      	cmp	r6, r3
 802fc9c:	f200 8460 	bhi.w	8030560 <__ssvfiscanf_r+0xe28>
 802fca0:	3608      	adds	r6, #8
 802fca2:	b2b6      	uxth	r6, r6
 802fca4:	f8db 0000 	ldr.w	r0, [fp]
 802fca8:	00b1      	lsls	r1, r6, #2
 802fcaa:	f003 fcb9 	bl	8033620 <realloc>
 802fcae:	2800      	cmp	r0, #0
 802fcb0:	f000 8456 	beq.w	8030560 <__ssvfiscanf_r+0xe28>
 802fcb4:	f8cb 0000 	str.w	r0, [fp]
 802fcb8:	f8ab 6004 	strh.w	r6, [fp, #4]
 802fcbc:	f8db 3000 	ldr.w	r3, [fp]
 802fcc0:	f10a 0201 	add.w	r2, sl, #1
 802fcc4:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 802fcc8:	462e      	mov	r6, r5
 802fcca:	f8ab 2006 	strh.w	r2, [fp, #6]
 802fcce:	464d      	mov	r5, r9
 802fcd0:	9400      	str	r4, [sp, #0]
 802fcd2:	4629      	mov	r1, r5
 802fcd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fcd6:	4643      	mov	r3, r8
 802fcd8:	2201      	movs	r2, #1
 802fcda:	f7ff fcf3 	bl	802f6c4 <_sfread_r>
 802fcde:	4605      	mov	r5, r0
 802fce0:	2800      	cmp	r0, #0
 802fce2:	f43f ade0 	beq.w	802f8a6 <__ssvfiscanf_r+0x16e>
 802fce6:	b13e      	cbz	r6, 802fcf8 <__ssvfiscanf_r+0x5c0>
 802fce8:	4580      	cmp	r8, r0
 802fcea:	d905      	bls.n	802fcf8 <__ssvfiscanf_r+0x5c0>
 802fcec:	4601      	mov	r1, r0
 802fcee:	6830      	ldr	r0, [r6, #0]
 802fcf0:	f003 fc96 	bl	8033620 <realloc>
 802fcf4:	b100      	cbz	r0, 802fcf8 <__ssvfiscanf_r+0x5c0>
 802fcf6:	6030      	str	r0, [r6, #0]
 802fcf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fcfa:	442b      	add	r3, r5
 802fcfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802fcfe:	e780      	b.n	802fc02 <__ssvfiscanf_r+0x4ca>
 802fd00:	0802b989 	.word	0x0802b989
 802fd04:	0803b3c9 	.word	0x0803b3c9
 802fd08:	2b00      	cmp	r3, #0
 802fd0a:	bf08      	it	eq
 802fd0c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802fd10:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fd12:	693b      	ldr	r3, [r7, #16]
 802fd14:	2d00      	cmp	r5, #0
 802fd16:	f000 8100 	beq.w	802ff1a <__ssvfiscanf_r+0x7e2>
 802fd1a:	2b00      	cmp	r3, #0
 802fd1c:	f040 80a5 	bne.w	802fe6a <__ssvfiscanf_r+0x732>
 802fd20:	6a3b      	ldr	r3, [r7, #32]
 802fd22:	0631      	lsls	r1, r6, #24
 802fd24:	f853 5b04 	ldr.w	r5, [r3], #4
 802fd28:	623b      	str	r3, [r7, #32]
 802fd2a:	f140 80a5 	bpl.w	802fe78 <__ssvfiscanf_r+0x740>
 802fd2e:	2d00      	cmp	r5, #0
 802fd30:	f43f ae55 	beq.w	802f9de <__ssvfiscanf_r+0x2a6>
 802fd34:	2080      	movs	r0, #128	@ 0x80
 802fd36:	f7fe fce9 	bl	802e70c <malloc>
 802fd3a:	4680      	mov	r8, r0
 802fd3c:	2800      	cmp	r0, #0
 802fd3e:	f43f ae4b 	beq.w	802f9d8 <__ssvfiscanf_r+0x2a0>
 802fd42:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 802fd46:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802fd4a:	6028      	str	r0, [r5, #0]
 802fd4c:	429e      	cmp	r6, r3
 802fd4e:	d314      	bcc.n	802fd7a <__ssvfiscanf_r+0x642>
 802fd50:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802fd54:	4293      	cmp	r3, r2
 802fd56:	f200 8403 	bhi.w	8030560 <__ssvfiscanf_r+0xe28>
 802fd5a:	3308      	adds	r3, #8
 802fd5c:	fa1f f983 	uxth.w	r9, r3
 802fd60:	f8db 0000 	ldr.w	r0, [fp]
 802fd64:	ea4f 0189 	mov.w	r1, r9, lsl #2
 802fd68:	f003 fc5a 	bl	8033620 <realloc>
 802fd6c:	2800      	cmp	r0, #0
 802fd6e:	f000 83f7 	beq.w	8030560 <__ssvfiscanf_r+0xe28>
 802fd72:	f8cb 0000 	str.w	r0, [fp]
 802fd76:	f8ab 9004 	strh.w	r9, [fp, #4]
 802fd7a:	f8db 3000 	ldr.w	r3, [fp]
 802fd7e:	1c72      	adds	r2, r6, #1
 802fd80:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 802fd84:	46aa      	mov	sl, r5
 802fd86:	f8ab 2006 	strh.w	r2, [fp, #6]
 802fd8a:	4645      	mov	r5, r8
 802fd8c:	f04f 0920 	mov.w	r9, #32
 802fd90:	2600      	movs	r6, #0
 802fd92:	f7fd fbfd 	bl	802d590 <__locale_mb_cur_max>
 802fd96:	4286      	cmp	r6, r0
 802fd98:	f43f ad85 	beq.w	802f8a6 <__ssvfiscanf_r+0x16e>
 802fd9c:	1c73      	adds	r3, r6, #1
 802fd9e:	607b      	str	r3, [r7, #4]
 802fda0:	6823      	ldr	r3, [r4, #0]
 802fda2:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802fda6:	f813 2b01 	ldrb.w	r2, [r3], #1
 802fdaa:	558a      	strb	r2, [r1, r6]
 802fdac:	6862      	ldr	r2, [r4, #4]
 802fdae:	3a01      	subs	r2, #1
 802fdb0:	e9c4 3200 	strd	r3, r2, [r4]
 802fdb4:	69bb      	ldr	r3, [r7, #24]
 802fdb6:	2b03      	cmp	r3, #3
 802fdb8:	d102      	bne.n	802fdc0 <__ssvfiscanf_r+0x688>
 802fdba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802fdbc:	2b04      	cmp	r3, #4
 802fdbe:	d005      	beq.n	802fdcc <__ssvfiscanf_r+0x694>
 802fdc0:	2208      	movs	r2, #8
 802fdc2:	2100      	movs	r1, #0
 802fdc4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 802fdc8:	f7fc fa5a 	bl	802c280 <memset>
 802fdcc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 802fdd0:	9300      	str	r3, [sp, #0]
 802fdd2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802fdd6:	687b      	ldr	r3, [r7, #4]
 802fdd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fdda:	4629      	mov	r1, r5
 802fddc:	f004 ffda 	bl	8034d94 <_mbrtowc_r>
 802fde0:	1c42      	adds	r2, r0, #1
 802fde2:	61b8      	str	r0, [r7, #24]
 802fde4:	f43f ad5f 	beq.w	802f8a6 <__ssvfiscanf_r+0x16e>
 802fde8:	2800      	cmp	r0, #0
 802fdea:	d14a      	bne.n	802fe82 <__ssvfiscanf_r+0x74a>
 802fdec:	6028      	str	r0, [r5, #0]
 802fdee:	682e      	ldr	r6, [r5, #0]
 802fdf0:	1c73      	adds	r3, r6, #1
 802fdf2:	d056      	beq.n	802fea2 <__ssvfiscanf_r+0x76a>
 802fdf4:	2208      	movs	r2, #8
 802fdf6:	2100      	movs	r1, #0
 802fdf8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802fdfc:	f7fc fa40 	bl	802c280 <memset>
 802fe00:	4b99      	ldr	r3, [pc, #612]	@ (8030068 <__ssvfiscanf_r+0x930>)
 802fe02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fe04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 802fe08:	603b      	str	r3, [r7, #0]
 802fe0a:	4632      	mov	r2, r6
 802fe0c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802fe10:	683e      	ldr	r6, [r7, #0]
 802fe12:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 802fe16:	47b0      	blx	r6
 802fe18:	2801      	cmp	r0, #1
 802fe1a:	d144      	bne.n	802fea6 <__ssvfiscanf_r+0x76e>
 802fe1c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 802fe20:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 802fe24:	5c9b      	ldrb	r3, [r3, r2]
 802fe26:	2b00      	cmp	r3, #0
 802fe28:	d148      	bne.n	802febc <__ssvfiscanf_r+0x784>
 802fe2a:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 802fe2e:	687b      	ldr	r3, [r7, #4]
 802fe30:	2b00      	cmp	r3, #0
 802fe32:	d13a      	bne.n	802feaa <__ssvfiscanf_r+0x772>
 802fe34:	693b      	ldr	r3, [r7, #16]
 802fe36:	2b00      	cmp	r3, #0
 802fe38:	f47f ac9f 	bne.w	802f77a <__ssvfiscanf_r+0x42>
 802fe3c:	602b      	str	r3, [r5, #0]
 802fe3e:	f1ba 0f00 	cmp.w	sl, #0
 802fe42:	f43f aede 	beq.w	802fc02 <__ssvfiscanf_r+0x4ca>
 802fe46:	eba5 0108 	sub.w	r1, r5, r8
 802fe4a:	108b      	asrs	r3, r1, #2
 802fe4c:	3301      	adds	r3, #1
 802fe4e:	4599      	cmp	r9, r3
 802fe50:	f67f aed7 	bls.w	802fc02 <__ssvfiscanf_r+0x4ca>
 802fe54:	f8da 0000 	ldr.w	r0, [sl]
 802fe58:	3104      	adds	r1, #4
 802fe5a:	f003 fbe1 	bl	8033620 <realloc>
 802fe5e:	2800      	cmp	r0, #0
 802fe60:	f43f aecf 	beq.w	802fc02 <__ssvfiscanf_r+0x4ca>
 802fe64:	f8ca 0000 	str.w	r0, [sl]
 802fe68:	e6cb      	b.n	802fc02 <__ssvfiscanf_r+0x4ca>
 802fe6a:	f04f 0900 	mov.w	r9, #0
 802fe6e:	46c8      	mov	r8, r9
 802fe70:	46ca      	mov	sl, r9
 802fe72:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 802fe76:	e78b      	b.n	802fd90 <__ssvfiscanf_r+0x658>
 802fe78:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802fe7c:	46c8      	mov	r8, r9
 802fe7e:	46ca      	mov	sl, r9
 802fe80:	e786      	b.n	802fd90 <__ssvfiscanf_r+0x658>
 802fe82:	69bb      	ldr	r3, [r7, #24]
 802fe84:	3302      	adds	r3, #2
 802fe86:	d1b2      	bne.n	802fdee <__ssvfiscanf_r+0x6b6>
 802fe88:	687e      	ldr	r6, [r7, #4]
 802fe8a:	6863      	ldr	r3, [r4, #4]
 802fe8c:	2b00      	cmp	r3, #0
 802fe8e:	dc3f      	bgt.n	802ff10 <__ssvfiscanf_r+0x7d8>
 802fe90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fe92:	4621      	mov	r1, r4
 802fe94:	f7ff fbf9 	bl	802f68a <__ssrefill_r>
 802fe98:	2800      	cmp	r0, #0
 802fe9a:	d039      	beq.n	802ff10 <__ssvfiscanf_r+0x7d8>
 802fe9c:	2e00      	cmp	r6, #0
 802fe9e:	d0c9      	beq.n	802fe34 <__ssvfiscanf_r+0x6fc>
 802fea0:	e501      	b.n	802f8a6 <__ssvfiscanf_r+0x16e>
 802fea2:	4632      	mov	r2, r6
 802fea4:	e7bc      	b.n	802fe20 <__ssvfiscanf_r+0x6e8>
 802fea6:	2200      	movs	r2, #0
 802fea8:	e7ba      	b.n	802fe20 <__ssvfiscanf_r+0x6e8>
 802feaa:	687b      	ldr	r3, [r7, #4]
 802feac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802feae:	3b01      	subs	r3, #1
 802feb0:	4622      	mov	r2, r4
 802feb2:	5cf1      	ldrb	r1, [r6, r3]
 802feb4:	607b      	str	r3, [r7, #4]
 802feb6:	f7ff fbad 	bl	802f614 <_sungetc_r>
 802feba:	e7b8      	b.n	802fe2e <__ssvfiscanf_r+0x6f6>
 802febc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802febe:	687a      	ldr	r2, [r7, #4]
 802fec0:	4413      	add	r3, r2
 802fec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802fec4:	69bb      	ldr	r3, [r7, #24]
 802fec6:	2b03      	cmp	r3, #3
 802fec8:	d102      	bne.n	802fed0 <__ssvfiscanf_r+0x798>
 802feca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802fecc:	2b04      	cmp	r3, #4
 802fece:	d002      	beq.n	802fed6 <__ssvfiscanf_r+0x79e>
 802fed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fed2:	3b01      	subs	r3, #1
 802fed4:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fed6:	693b      	ldr	r3, [r7, #16]
 802fed8:	b9c3      	cbnz	r3, 802ff0c <__ssvfiscanf_r+0x7d4>
 802feda:	3504      	adds	r5, #4
 802fedc:	f1ba 0f00 	cmp.w	sl, #0
 802fee0:	d014      	beq.n	802ff0c <__ssvfiscanf_r+0x7d4>
 802fee2:	eba5 0608 	sub.w	r6, r5, r8
 802fee6:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 802feea:	d80d      	bhi.n	802ff08 <__ssvfiscanf_r+0x7d0>
 802feec:	4640      	mov	r0, r8
 802feee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802fef2:	f003 fb95 	bl	8033620 <realloc>
 802fef6:	4680      	mov	r8, r0
 802fef8:	2800      	cmp	r0, #0
 802fefa:	f43f ad6d 	beq.w	802f9d8 <__ssvfiscanf_r+0x2a0>
 802fefe:	1985      	adds	r5, r0, r6
 802ff00:	f8ca 0000 	str.w	r0, [sl]
 802ff04:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802ff08:	693e      	ldr	r6, [r7, #16]
 802ff0a:	e7be      	b.n	802fe8a <__ssvfiscanf_r+0x752>
 802ff0c:	2600      	movs	r6, #0
 802ff0e:	e7bc      	b.n	802fe8a <__ssvfiscanf_r+0x752>
 802ff10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802ff12:	2b00      	cmp	r3, #0
 802ff14:	f47f af3d 	bne.w	802fd92 <__ssvfiscanf_r+0x65a>
 802ff18:	e78c      	b.n	802fe34 <__ssvfiscanf_r+0x6fc>
 802ff1a:	b1e3      	cbz	r3, 802ff56 <__ssvfiscanf_r+0x81e>
 802ff1c:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 802ff20:	6823      	ldr	r3, [r4, #0]
 802ff22:	781a      	ldrb	r2, [r3, #0]
 802ff24:	5cb2      	ldrb	r2, [r6, r2]
 802ff26:	b91a      	cbnz	r2, 802ff30 <__ssvfiscanf_r+0x7f8>
 802ff28:	2d00      	cmp	r5, #0
 802ff2a:	f47f ae92 	bne.w	802fc52 <__ssvfiscanf_r+0x51a>
 802ff2e:	e450      	b.n	802f7d2 <__ssvfiscanf_r+0x9a>
 802ff30:	3301      	adds	r3, #1
 802ff32:	6862      	ldr	r2, [r4, #4]
 802ff34:	6023      	str	r3, [r4, #0]
 802ff36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802ff38:	3501      	adds	r5, #1
 802ff3a:	3a01      	subs	r2, #1
 802ff3c:	42ab      	cmp	r3, r5
 802ff3e:	6062      	str	r2, [r4, #4]
 802ff40:	f43f ae87 	beq.w	802fc52 <__ssvfiscanf_r+0x51a>
 802ff44:	2a00      	cmp	r2, #0
 802ff46:	dceb      	bgt.n	802ff20 <__ssvfiscanf_r+0x7e8>
 802ff48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802ff4a:	4621      	mov	r1, r4
 802ff4c:	f7ff fb9d 	bl	802f68a <__ssrefill_r>
 802ff50:	2800      	cmp	r0, #0
 802ff52:	d0e5      	beq.n	802ff20 <__ssvfiscanf_r+0x7e8>
 802ff54:	e67d      	b.n	802fc52 <__ssvfiscanf_r+0x51a>
 802ff56:	6a3b      	ldr	r3, [r7, #32]
 802ff58:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 802ff5c:	f853 5b04 	ldr.w	r5, [r3], #4
 802ff60:	623b      	str	r3, [r7, #32]
 802ff62:	d07e      	beq.n	8030062 <__ssvfiscanf_r+0x92a>
 802ff64:	2d00      	cmp	r5, #0
 802ff66:	f43f ac34 	beq.w	802f7d2 <__ssvfiscanf_r+0x9a>
 802ff6a:	2020      	movs	r0, #32
 802ff6c:	f7fe fbce 	bl	802e70c <malloc>
 802ff70:	4680      	mov	r8, r0
 802ff72:	2800      	cmp	r0, #0
 802ff74:	f43f ac9c 	beq.w	802f8b0 <__ssvfiscanf_r+0x178>
 802ff78:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802ff7c:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 802ff80:	6028      	str	r0, [r5, #0]
 802ff82:	45b1      	cmp	r9, r6
 802ff84:	d312      	bcc.n	802ffac <__ssvfiscanf_r+0x874>
 802ff86:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802ff8a:	429e      	cmp	r6, r3
 802ff8c:	f200 82e8 	bhi.w	8030560 <__ssvfiscanf_r+0xe28>
 802ff90:	3608      	adds	r6, #8
 802ff92:	b2b6      	uxth	r6, r6
 802ff94:	f8db 0000 	ldr.w	r0, [fp]
 802ff98:	00b1      	lsls	r1, r6, #2
 802ff9a:	f003 fb41 	bl	8033620 <realloc>
 802ff9e:	2800      	cmp	r0, #0
 802ffa0:	f000 82de 	beq.w	8030560 <__ssvfiscanf_r+0xe28>
 802ffa4:	f8cb 0000 	str.w	r0, [fp]
 802ffa8:	f8ab 6004 	strh.w	r6, [fp, #4]
 802ffac:	f8db 3000 	ldr.w	r3, [fp]
 802ffb0:	f109 0201 	add.w	r2, r9, #1
 802ffb4:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802ffb8:	46aa      	mov	sl, r5
 802ffba:	f8ab 2006 	strh.w	r2, [fp, #6]
 802ffbe:	4645      	mov	r5, r8
 802ffc0:	f04f 0920 	mov.w	r9, #32
 802ffc4:	462e      	mov	r6, r5
 802ffc6:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 802ffca:	6823      	ldr	r3, [r4, #0]
 802ffcc:	781a      	ldrb	r2, [r3, #0]
 802ffce:	f818 2002 	ldrb.w	r2, [r8, r2]
 802ffd2:	b362      	cbz	r2, 803002e <__ssvfiscanf_r+0x8f6>
 802ffd4:	6862      	ldr	r2, [r4, #4]
 802ffd6:	3a01      	subs	r2, #1
 802ffd8:	6062      	str	r2, [r4, #4]
 802ffda:	1c5a      	adds	r2, r3, #1
 802ffdc:	6022      	str	r2, [r4, #0]
 802ffde:	781b      	ldrb	r3, [r3, #0]
 802ffe0:	f805 3b01 	strb.w	r3, [r5], #1
 802ffe4:	f1ba 0f00 	cmp.w	sl, #0
 802ffe8:	d011      	beq.n	803000e <__ssvfiscanf_r+0x8d6>
 802ffea:	1bab      	subs	r3, r5, r6
 802ffec:	454b      	cmp	r3, r9
 802ffee:	d30e      	bcc.n	803000e <__ssvfiscanf_r+0x8d6>
 802fff0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802fff4:	4630      	mov	r0, r6
 802fff6:	4649      	mov	r1, r9
 802fff8:	613b      	str	r3, [r7, #16]
 802fffa:	f003 fb11 	bl	8033620 <realloc>
 802fffe:	4606      	mov	r6, r0
 8030000:	2800      	cmp	r0, #0
 8030002:	f43f ac55 	beq.w	802f8b0 <__ssvfiscanf_r+0x178>
 8030006:	693b      	ldr	r3, [r7, #16]
 8030008:	f8ca 0000 	str.w	r0, [sl]
 803000c:	18c5      	adds	r5, r0, r3
 803000e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030010:	3b01      	subs	r3, #1
 8030012:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030014:	d00b      	beq.n	803002e <__ssvfiscanf_r+0x8f6>
 8030016:	6863      	ldr	r3, [r4, #4]
 8030018:	2b00      	cmp	r3, #0
 803001a:	dcd6      	bgt.n	802ffca <__ssvfiscanf_r+0x892>
 803001c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803001e:	4621      	mov	r1, r4
 8030020:	f7ff fb33 	bl	802f68a <__ssrefill_r>
 8030024:	2800      	cmp	r0, #0
 8030026:	d0d0      	beq.n	802ffca <__ssvfiscanf_r+0x892>
 8030028:	42b5      	cmp	r5, r6
 803002a:	f43f ac3c 	beq.w	802f8a6 <__ssvfiscanf_r+0x16e>
 803002e:	1bae      	subs	r6, r5, r6
 8030030:	f43f abcf 	beq.w	802f7d2 <__ssvfiscanf_r+0x9a>
 8030034:	2300      	movs	r3, #0
 8030036:	702b      	strb	r3, [r5, #0]
 8030038:	f1ba 0f00 	cmp.w	sl, #0
 803003c:	d009      	beq.n	8030052 <__ssvfiscanf_r+0x91a>
 803003e:	1c71      	adds	r1, r6, #1
 8030040:	4589      	cmp	r9, r1
 8030042:	d906      	bls.n	8030052 <__ssvfiscanf_r+0x91a>
 8030044:	f8da 0000 	ldr.w	r0, [sl]
 8030048:	f003 faea 	bl	8033620 <realloc>
 803004c:	b108      	cbz	r0, 8030052 <__ssvfiscanf_r+0x91a>
 803004e:	f8ca 0000 	str.w	r0, [sl]
 8030052:	69fb      	ldr	r3, [r7, #28]
 8030054:	3301      	adds	r3, #1
 8030056:	61fb      	str	r3, [r7, #28]
 8030058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803005a:	4433      	add	r3, r6
 803005c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803005e:	f7ff bb8c 	b.w	802f77a <__ssvfiscanf_r+0x42>
 8030062:	46ca      	mov	sl, r9
 8030064:	e7ae      	b.n	802ffc4 <__ssvfiscanf_r+0x88c>
 8030066:	bf00      	nop
 8030068:	2000016c 	.word	0x2000016c
 803006c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803006e:	2b00      	cmp	r3, #0
 8030070:	bf08      	it	eq
 8030072:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8030076:	f016 0501 	ands.w	r5, r6, #1
 803007a:	62bb      	str	r3, [r7, #40]	@ 0x28
 803007c:	f006 0810 	and.w	r8, r6, #16
 8030080:	f000 80e1 	beq.w	8030246 <__ssvfiscanf_r+0xb0e>
 8030084:	f1b8 0f00 	cmp.w	r8, #0
 8030088:	f040 8089 	bne.w	803019e <__ssvfiscanf_r+0xa66>
 803008c:	6a3b      	ldr	r3, [r7, #32]
 803008e:	0636      	lsls	r6, r6, #24
 8030090:	f853 5b04 	ldr.w	r5, [r3], #4
 8030094:	623b      	str	r3, [r7, #32]
 8030096:	f140 8089 	bpl.w	80301ac <__ssvfiscanf_r+0xa74>
 803009a:	2d00      	cmp	r5, #0
 803009c:	f43f ac9f 	beq.w	802f9de <__ssvfiscanf_r+0x2a6>
 80300a0:	2080      	movs	r0, #128	@ 0x80
 80300a2:	f7fe fb33 	bl	802e70c <malloc>
 80300a6:	4606      	mov	r6, r0
 80300a8:	2800      	cmp	r0, #0
 80300aa:	f43f ac95 	beq.w	802f9d8 <__ssvfiscanf_r+0x2a0>
 80300ae:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 80300b2:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80300b6:	6028      	str	r0, [r5, #0]
 80300b8:	4599      	cmp	r9, r3
 80300ba:	d314      	bcc.n	80300e6 <__ssvfiscanf_r+0x9ae>
 80300bc:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80300c0:	4293      	cmp	r3, r2
 80300c2:	f200 824d 	bhi.w	8030560 <__ssvfiscanf_r+0xe28>
 80300c6:	3308      	adds	r3, #8
 80300c8:	fa1f fa83 	uxth.w	sl, r3
 80300cc:	f8db 0000 	ldr.w	r0, [fp]
 80300d0:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80300d4:	f003 faa4 	bl	8033620 <realloc>
 80300d8:	2800      	cmp	r0, #0
 80300da:	f000 8241 	beq.w	8030560 <__ssvfiscanf_r+0xe28>
 80300de:	f8cb 0000 	str.w	r0, [fp]
 80300e2:	f8ab a004 	strh.w	sl, [fp, #4]
 80300e6:	f8db 3000 	ldr.w	r3, [fp]
 80300ea:	f109 0201 	add.w	r2, r9, #1
 80300ee:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80300f2:	46aa      	mov	sl, r5
 80300f4:	f8ab 2006 	strh.w	r2, [fp, #6]
 80300f8:	4635      	mov	r5, r6
 80300fa:	f04f 0920 	mov.w	r9, #32
 80300fe:	2300      	movs	r3, #0
 8030100:	6822      	ldr	r2, [r4, #0]
 8030102:	499e      	ldr	r1, [pc, #632]	@ (803037c <__ssvfiscanf_r+0xc44>)
 8030104:	7812      	ldrb	r2, [r2, #0]
 8030106:	5c8a      	ldrb	r2, [r1, r2]
 8030108:	0711      	lsls	r1, r2, #28
 803010a:	d43c      	bmi.n	8030186 <__ssvfiscanf_r+0xa4e>
 803010c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 803010e:	2a00      	cmp	r2, #0
 8030110:	d039      	beq.n	8030186 <__ssvfiscanf_r+0xa4e>
 8030112:	613b      	str	r3, [r7, #16]
 8030114:	f7fd fa3c 	bl	802d590 <__locale_mb_cur_max>
 8030118:	693b      	ldr	r3, [r7, #16]
 803011a:	4298      	cmp	r0, r3
 803011c:	f43f abc3 	beq.w	802f8a6 <__ssvfiscanf_r+0x16e>
 8030120:	1c5a      	adds	r2, r3, #1
 8030122:	613a      	str	r2, [r7, #16]
 8030124:	6822      	ldr	r2, [r4, #0]
 8030126:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 803012a:	f812 0b01 	ldrb.w	r0, [r2], #1
 803012e:	54c8      	strb	r0, [r1, r3]
 8030130:	6863      	ldr	r3, [r4, #4]
 8030132:	3b01      	subs	r3, #1
 8030134:	e9c4 2300 	strd	r2, r3, [r4]
 8030138:	69bb      	ldr	r3, [r7, #24]
 803013a:	2b03      	cmp	r3, #3
 803013c:	d102      	bne.n	8030144 <__ssvfiscanf_r+0xa0c>
 803013e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8030140:	2b04      	cmp	r3, #4
 8030142:	d005      	beq.n	8030150 <__ssvfiscanf_r+0xa18>
 8030144:	2208      	movs	r2, #8
 8030146:	2100      	movs	r1, #0
 8030148:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803014c:	f7fc f898 	bl	802c280 <memset>
 8030150:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8030154:	9300      	str	r3, [sp, #0]
 8030156:	693b      	ldr	r3, [r7, #16]
 8030158:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803015a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 803015e:	4629      	mov	r1, r5
 8030160:	f004 fe18 	bl	8034d94 <_mbrtowc_r>
 8030164:	4603      	mov	r3, r0
 8030166:	61b8      	str	r0, [r7, #24]
 8030168:	1c58      	adds	r0, r3, #1
 803016a:	f43f ab9c 	beq.w	802f8a6 <__ssvfiscanf_r+0x16e>
 803016e:	bb0b      	cbnz	r3, 80301b4 <__ssvfiscanf_r+0xa7c>
 8030170:	602b      	str	r3, [r5, #0]
 8030172:	6828      	ldr	r0, [r5, #0]
 8030174:	f004 fe28 	bl	8034dc8 <iswspace>
 8030178:	4603      	mov	r3, r0
 803017a:	2800      	cmp	r0, #0
 803017c:	d037      	beq.n	80301ee <__ssvfiscanf_r+0xab6>
 803017e:	693a      	ldr	r2, [r7, #16]
 8030180:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030184:	bb4a      	cbnz	r2, 80301da <__ssvfiscanf_r+0xaa2>
 8030186:	f1b8 0f00 	cmp.w	r8, #0
 803018a:	f47f aaf6 	bne.w	802f77a <__ssvfiscanf_r+0x42>
 803018e:	f8c5 8000 	str.w	r8, [r5]
 8030192:	f1ba 0f00 	cmp.w	sl, #0
 8030196:	f43f ad34 	beq.w	802fc02 <__ssvfiscanf_r+0x4ca>
 803019a:	1ba9      	subs	r1, r5, r6
 803019c:	e655      	b.n	802fe4a <__ssvfiscanf_r+0x712>
 803019e:	f04f 0900 	mov.w	r9, #0
 80301a2:	464e      	mov	r6, r9
 80301a4:	46ca      	mov	sl, r9
 80301a6:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 80301aa:	e7a8      	b.n	80300fe <__ssvfiscanf_r+0x9c6>
 80301ac:	46c1      	mov	r9, r8
 80301ae:	4646      	mov	r6, r8
 80301b0:	46c2      	mov	sl, r8
 80301b2:	e7a4      	b.n	80300fe <__ssvfiscanf_r+0x9c6>
 80301b4:	69bb      	ldr	r3, [r7, #24]
 80301b6:	3302      	adds	r3, #2
 80301b8:	d1db      	bne.n	8030172 <__ssvfiscanf_r+0xa3a>
 80301ba:	693b      	ldr	r3, [r7, #16]
 80301bc:	6862      	ldr	r2, [r4, #4]
 80301be:	2a00      	cmp	r2, #0
 80301c0:	dc9e      	bgt.n	8030100 <__ssvfiscanf_r+0x9c8>
 80301c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80301c4:	613b      	str	r3, [r7, #16]
 80301c6:	4621      	mov	r1, r4
 80301c8:	f7ff fa5f 	bl	802f68a <__ssrefill_r>
 80301cc:	693b      	ldr	r3, [r7, #16]
 80301ce:	2800      	cmp	r0, #0
 80301d0:	d096      	beq.n	8030100 <__ssvfiscanf_r+0x9c8>
 80301d2:	2b00      	cmp	r3, #0
 80301d4:	f47f ab67 	bne.w	802f8a6 <__ssvfiscanf_r+0x16e>
 80301d8:	e7d5      	b.n	8030186 <__ssvfiscanf_r+0xa4e>
 80301da:	693a      	ldr	r2, [r7, #16]
 80301dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80301de:	3a01      	subs	r2, #1
 80301e0:	613a      	str	r2, [r7, #16]
 80301e2:	6939      	ldr	r1, [r7, #16]
 80301e4:	4622      	mov	r2, r4
 80301e6:	5c59      	ldrb	r1, [r3, r1]
 80301e8:	f7ff fa14 	bl	802f614 <_sungetc_r>
 80301ec:	e7c7      	b.n	803017e <__ssvfiscanf_r+0xa46>
 80301ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80301f0:	6939      	ldr	r1, [r7, #16]
 80301f2:	440a      	add	r2, r1
 80301f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80301f6:	69ba      	ldr	r2, [r7, #24]
 80301f8:	2a03      	cmp	r2, #3
 80301fa:	d102      	bne.n	8030202 <__ssvfiscanf_r+0xaca>
 80301fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80301fe:	2a04      	cmp	r2, #4
 8030200:	d002      	beq.n	8030208 <__ssvfiscanf_r+0xad0>
 8030202:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8030204:	3a01      	subs	r2, #1
 8030206:	62ba      	str	r2, [r7, #40]	@ 0x28
 8030208:	f1b8 0f00 	cmp.w	r8, #0
 803020c:	d1d6      	bne.n	80301bc <__ssvfiscanf_r+0xa84>
 803020e:	3504      	adds	r5, #4
 8030210:	f1ba 0f00 	cmp.w	sl, #0
 8030214:	d015      	beq.n	8030242 <__ssvfiscanf_r+0xb0a>
 8030216:	1bab      	subs	r3, r5, r6
 8030218:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 803021c:	d80f      	bhi.n	803023e <__ssvfiscanf_r+0xb06>
 803021e:	4630      	mov	r0, r6
 8030220:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8030224:	613b      	str	r3, [r7, #16]
 8030226:	f003 f9fb 	bl	8033620 <realloc>
 803022a:	4606      	mov	r6, r0
 803022c:	2800      	cmp	r0, #0
 803022e:	f43f abd3 	beq.w	802f9d8 <__ssvfiscanf_r+0x2a0>
 8030232:	693b      	ldr	r3, [r7, #16]
 8030234:	f8ca 0000 	str.w	r0, [sl]
 8030238:	18c5      	adds	r5, r0, r3
 803023a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 803023e:	4643      	mov	r3, r8
 8030240:	e7bc      	b.n	80301bc <__ssvfiscanf_r+0xa84>
 8030242:	4653      	mov	r3, sl
 8030244:	e7ba      	b.n	80301bc <__ssvfiscanf_r+0xa84>
 8030246:	f1b8 0f00 	cmp.w	r8, #0
 803024a:	d019      	beq.n	8030280 <__ssvfiscanf_r+0xb48>
 803024c:	4e4b      	ldr	r6, [pc, #300]	@ (803037c <__ssvfiscanf_r+0xc44>)
 803024e:	6823      	ldr	r3, [r4, #0]
 8030250:	781a      	ldrb	r2, [r3, #0]
 8030252:	5cb2      	ldrb	r2, [r6, r2]
 8030254:	0712      	lsls	r2, r2, #28
 8030256:	f53f acfc 	bmi.w	802fc52 <__ssvfiscanf_r+0x51a>
 803025a:	3301      	adds	r3, #1
 803025c:	6862      	ldr	r2, [r4, #4]
 803025e:	6023      	str	r3, [r4, #0]
 8030260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030262:	3501      	adds	r5, #1
 8030264:	3a01      	subs	r2, #1
 8030266:	429d      	cmp	r5, r3
 8030268:	6062      	str	r2, [r4, #4]
 803026a:	f43f acf2 	beq.w	802fc52 <__ssvfiscanf_r+0x51a>
 803026e:	2a00      	cmp	r2, #0
 8030270:	dced      	bgt.n	803024e <__ssvfiscanf_r+0xb16>
 8030272:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030274:	4621      	mov	r1, r4
 8030276:	f7ff fa08 	bl	802f68a <__ssrefill_r>
 803027a:	2800      	cmp	r0, #0
 803027c:	d0e7      	beq.n	803024e <__ssvfiscanf_r+0xb16>
 803027e:	e4e8      	b.n	802fc52 <__ssvfiscanf_r+0x51a>
 8030280:	6a3b      	ldr	r3, [r7, #32]
 8030282:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8030286:	f853 5b04 	ldr.w	r5, [r3], #4
 803028a:	623b      	str	r3, [r7, #32]
 803028c:	d074      	beq.n	8030378 <__ssvfiscanf_r+0xc40>
 803028e:	2d00      	cmp	r5, #0
 8030290:	f43f aa9f 	beq.w	802f7d2 <__ssvfiscanf_r+0x9a>
 8030294:	2020      	movs	r0, #32
 8030296:	f7fe fa39 	bl	802e70c <malloc>
 803029a:	4680      	mov	r8, r0
 803029c:	2800      	cmp	r0, #0
 803029e:	f43f ab07 	beq.w	802f8b0 <__ssvfiscanf_r+0x178>
 80302a2:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 80302a6:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 80302aa:	6028      	str	r0, [r5, #0]
 80302ac:	45b1      	cmp	r9, r6
 80302ae:	d312      	bcc.n	80302d6 <__ssvfiscanf_r+0xb9e>
 80302b0:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 80302b4:	429e      	cmp	r6, r3
 80302b6:	f200 8153 	bhi.w	8030560 <__ssvfiscanf_r+0xe28>
 80302ba:	3608      	adds	r6, #8
 80302bc:	b2b6      	uxth	r6, r6
 80302be:	f8db 0000 	ldr.w	r0, [fp]
 80302c2:	00b1      	lsls	r1, r6, #2
 80302c4:	f003 f9ac 	bl	8033620 <realloc>
 80302c8:	2800      	cmp	r0, #0
 80302ca:	f000 8149 	beq.w	8030560 <__ssvfiscanf_r+0xe28>
 80302ce:	f8cb 0000 	str.w	r0, [fp]
 80302d2:	f8ab 6004 	strh.w	r6, [fp, #4]
 80302d6:	f8db 3000 	ldr.w	r3, [fp]
 80302da:	f109 0201 	add.w	r2, r9, #1
 80302de:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80302e2:	46aa      	mov	sl, r5
 80302e4:	f8ab 2006 	strh.w	r2, [fp, #6]
 80302e8:	4645      	mov	r5, r8
 80302ea:	2620      	movs	r6, #32
 80302ec:	46a9      	mov	r9, r5
 80302ee:	6823      	ldr	r3, [r4, #0]
 80302f0:	4922      	ldr	r1, [pc, #136]	@ (803037c <__ssvfiscanf_r+0xc44>)
 80302f2:	781a      	ldrb	r2, [r3, #0]
 80302f4:	5c8a      	ldrb	r2, [r1, r2]
 80302f6:	0710      	lsls	r0, r2, #28
 80302f8:	d428      	bmi.n	803034c <__ssvfiscanf_r+0xc14>
 80302fa:	6862      	ldr	r2, [r4, #4]
 80302fc:	3a01      	subs	r2, #1
 80302fe:	6062      	str	r2, [r4, #4]
 8030300:	1c5a      	adds	r2, r3, #1
 8030302:	6022      	str	r2, [r4, #0]
 8030304:	781b      	ldrb	r3, [r3, #0]
 8030306:	f805 3b01 	strb.w	r3, [r5], #1
 803030a:	f1ba 0f00 	cmp.w	sl, #0
 803030e:	d010      	beq.n	8030332 <__ssvfiscanf_r+0xbfa>
 8030310:	eba5 0809 	sub.w	r8, r5, r9
 8030314:	45b0      	cmp	r8, r6
 8030316:	d30c      	bcc.n	8030332 <__ssvfiscanf_r+0xbfa>
 8030318:	0076      	lsls	r6, r6, #1
 803031a:	4648      	mov	r0, r9
 803031c:	4631      	mov	r1, r6
 803031e:	f003 f97f 	bl	8033620 <realloc>
 8030322:	4681      	mov	r9, r0
 8030324:	2800      	cmp	r0, #0
 8030326:	f43f aac3 	beq.w	802f8b0 <__ssvfiscanf_r+0x178>
 803032a:	eb00 0508 	add.w	r5, r0, r8
 803032e:	f8ca 0000 	str.w	r0, [sl]
 8030332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030334:	3b01      	subs	r3, #1
 8030336:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030338:	d008      	beq.n	803034c <__ssvfiscanf_r+0xc14>
 803033a:	6863      	ldr	r3, [r4, #4]
 803033c:	2b00      	cmp	r3, #0
 803033e:	dcd6      	bgt.n	80302ee <__ssvfiscanf_r+0xbb6>
 8030340:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030342:	4621      	mov	r1, r4
 8030344:	f7ff f9a1 	bl	802f68a <__ssrefill_r>
 8030348:	2800      	cmp	r0, #0
 803034a:	d0d0      	beq.n	80302ee <__ssvfiscanf_r+0xbb6>
 803034c:	2300      	movs	r3, #0
 803034e:	702b      	strb	r3, [r5, #0]
 8030350:	eba5 0509 	sub.w	r5, r5, r9
 8030354:	f1ba 0f00 	cmp.w	sl, #0
 8030358:	f43f acce 	beq.w	802fcf8 <__ssvfiscanf_r+0x5c0>
 803035c:	1c69      	adds	r1, r5, #1
 803035e:	428e      	cmp	r6, r1
 8030360:	f67f acca 	bls.w	802fcf8 <__ssvfiscanf_r+0x5c0>
 8030364:	f8da 0000 	ldr.w	r0, [sl]
 8030368:	f003 f95a 	bl	8033620 <realloc>
 803036c:	2800      	cmp	r0, #0
 803036e:	f43f acc3 	beq.w	802fcf8 <__ssvfiscanf_r+0x5c0>
 8030372:	f8ca 0000 	str.w	r0, [sl]
 8030376:	e4bf      	b.n	802fcf8 <__ssvfiscanf_r+0x5c0>
 8030378:	46b2      	mov	sl, r6
 803037a:	e7b7      	b.n	80302ec <__ssvfiscanf_r+0xbb4>
 803037c:	0803b3c9 	.word	0x0803b3c9
 8030380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030382:	3b01      	subs	r3, #1
 8030384:	2b26      	cmp	r3, #38	@ 0x26
 8030386:	bf81      	itttt	hi
 8030388:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 803038a:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 803038e:	2327      	movhi	r3, #39	@ 0x27
 8030390:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 8030392:	bf98      	it	ls
 8030394:	f04f 0800 	movls.w	r8, #0
 8030398:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 803039c:	f04f 0900 	mov.w	r9, #0
 80303a0:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 80303a4:	6822      	ldr	r2, [r4, #0]
 80303a6:	7813      	ldrb	r3, [r2, #0]
 80303a8:	2b39      	cmp	r3, #57	@ 0x39
 80303aa:	d80f      	bhi.n	80303cc <__ssvfiscanf_r+0xc94>
 80303ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80303ae:	d91a      	bls.n	80303e6 <__ssvfiscanf_r+0xcae>
 80303b0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80303b4:	290e      	cmp	r1, #14
 80303b6:	d816      	bhi.n	80303e6 <__ssvfiscanf_r+0xcae>
 80303b8:	e8df f001 	tbb	[pc, r1]
 80303bc:	15771577 	.word	0x15771577
 80303c0:	67673e15 	.word	0x67673e15
 80303c4:	67676767 	.word	0x67676767
 80303c8:	6f67      	.short	0x6f67
 80303ca:	6f          	.byte	0x6f
 80303cb:	00          	.byte	0x00
 80303cc:	2b66      	cmp	r3, #102	@ 0x66
 80303ce:	d831      	bhi.n	8030434 <__ssvfiscanf_r+0xcfc>
 80303d0:	2b60      	cmp	r3, #96	@ 0x60
 80303d2:	d803      	bhi.n	80303dc <__ssvfiscanf_r+0xca4>
 80303d4:	2b46      	cmp	r3, #70	@ 0x46
 80303d6:	d804      	bhi.n	80303e2 <__ssvfiscanf_r+0xcaa>
 80303d8:	2b40      	cmp	r3, #64	@ 0x40
 80303da:	d904      	bls.n	80303e6 <__ssvfiscanf_r+0xcae>
 80303dc:	6979      	ldr	r1, [r7, #20]
 80303de:	290a      	cmp	r1, #10
 80303e0:	e061      	b.n	80304a6 <__ssvfiscanf_r+0xd6e>
 80303e2:	2b58      	cmp	r3, #88	@ 0x58
 80303e4:	d066      	beq.n	80304b4 <__ssvfiscanf_r+0xd7c>
 80303e6:	05f1      	lsls	r1, r6, #23
 80303e8:	d511      	bpl.n	803040e <__ssvfiscanf_r+0xcd6>
 80303ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80303ee:	459a      	cmp	sl, r3
 80303f0:	d908      	bls.n	8030404 <__ssvfiscanf_r+0xccc>
 80303f2:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 80303f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80303f8:	4622      	mov	r2, r4
 80303fa:	f7ff f90b 	bl	802f614 <_sungetc_r>
 80303fe:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
 8030402:	46c2      	mov	sl, r8
 8030404:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030408:	459a      	cmp	sl, r3
 803040a:	f43f a9e2 	beq.w	802f7d2 <__ssvfiscanf_r+0x9a>
 803040e:	f016 0210 	ands.w	r2, r6, #16
 8030412:	d16b      	bne.n	80304ec <__ssvfiscanf_r+0xdb4>
 8030414:	697b      	ldr	r3, [r7, #20]
 8030416:	f88a 2000 	strb.w	r2, [sl]
 803041a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803041c:	68fd      	ldr	r5, [r7, #12]
 803041e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030422:	47a8      	blx	r5
 8030424:	6a3b      	ldr	r3, [r7, #32]
 8030426:	06b2      	lsls	r2, r6, #26
 8030428:	f103 0804 	add.w	r8, r3, #4
 803042c:	d555      	bpl.n	80304da <__ssvfiscanf_r+0xda2>
 803042e:	681b      	ldr	r3, [r3, #0]
 8030430:	6018      	str	r0, [r3, #0]
 8030432:	e057      	b.n	80304e4 <__ssvfiscanf_r+0xdac>
 8030434:	2b78      	cmp	r3, #120	@ 0x78
 8030436:	e7d5      	b.n	80303e4 <__ssvfiscanf_r+0xcac>
 8030438:	0531      	lsls	r1, r6, #20
 803043a:	d509      	bpl.n	8030450 <__ssvfiscanf_r+0xd18>
 803043c:	6979      	ldr	r1, [r7, #20]
 803043e:	b919      	cbnz	r1, 8030448 <__ssvfiscanf_r+0xd10>
 8030440:	2108      	movs	r1, #8
 8030442:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8030446:	6179      	str	r1, [r7, #20]
 8030448:	0575      	lsls	r5, r6, #21
 803044a:	d506      	bpl.n	803045a <__ssvfiscanf_r+0xd22>
 803044c:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 8030450:	4655      	mov	r5, sl
 8030452:	f805 3b01 	strb.w	r3, [r5], #1
 8030456:	46aa      	mov	sl, r5
 8030458:	e00b      	b.n	8030472 <__ssvfiscanf_r+0xd3a>
 803045a:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 803045e:	f1b8 0f00 	cmp.w	r8, #0
 8030462:	d004      	beq.n	803046e <__ssvfiscanf_r+0xd36>
 8030464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030466:	3301      	adds	r3, #1
 8030468:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 803046c:	62bb      	str	r3, [r7, #40]	@ 0x28
 803046e:	f109 0901 	add.w	r9, r9, #1
 8030472:	6863      	ldr	r3, [r4, #4]
 8030474:	3b01      	subs	r3, #1
 8030476:	2b00      	cmp	r3, #0
 8030478:	6063      	str	r3, [r4, #4]
 803047a:	dd27      	ble.n	80304cc <__ssvfiscanf_r+0xd94>
 803047c:	3201      	adds	r2, #1
 803047e:	6022      	str	r2, [r4, #0]
 8030480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030482:	3b01      	subs	r3, #1
 8030484:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030486:	d18d      	bne.n	80303a4 <__ssvfiscanf_r+0xc6c>
 8030488:	e7ad      	b.n	80303e6 <__ssvfiscanf_r+0xcae>
 803048a:	6978      	ldr	r0, [r7, #20]
 803048c:	4936      	ldr	r1, [pc, #216]	@ (8030568 <__ssvfiscanf_r+0xe30>)
 803048e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8030492:	6179      	str	r1, [r7, #20]
 8030494:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 8030498:	e7da      	b.n	8030450 <__ssvfiscanf_r+0xd18>
 803049a:	6978      	ldr	r0, [r7, #20]
 803049c:	4932      	ldr	r1, [pc, #200]	@ (8030568 <__ssvfiscanf_r+0xe30>)
 803049e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 80304a2:	6179      	str	r1, [r7, #20]
 80304a4:	2908      	cmp	r1, #8
 80304a6:	dcf5      	bgt.n	8030494 <__ssvfiscanf_r+0xd5c>
 80304a8:	e79d      	b.n	80303e6 <__ssvfiscanf_r+0xcae>
 80304aa:	0630      	lsls	r0, r6, #24
 80304ac:	d59b      	bpl.n	80303e6 <__ssvfiscanf_r+0xcae>
 80304ae:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 80304b2:	e7cd      	b.n	8030450 <__ssvfiscanf_r+0xd18>
 80304b4:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 80304b8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80304bc:	d193      	bne.n	80303e6 <__ssvfiscanf_r+0xcae>
 80304be:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 80304c2:	2110      	movs	r1, #16
 80304c4:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 80304c8:	6179      	str	r1, [r7, #20]
 80304ca:	e7c1      	b.n	8030450 <__ssvfiscanf_r+0xd18>
 80304cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80304ce:	4621      	mov	r1, r4
 80304d0:	f7ff f8db 	bl	802f68a <__ssrefill_r>
 80304d4:	2800      	cmp	r0, #0
 80304d6:	d0d3      	beq.n	8030480 <__ssvfiscanf_r+0xd48>
 80304d8:	e785      	b.n	80303e6 <__ssvfiscanf_r+0xcae>
 80304da:	0733      	lsls	r3, r6, #28
 80304dc:	d50d      	bpl.n	80304fa <__ssvfiscanf_r+0xdc2>
 80304de:	6a3b      	ldr	r3, [r7, #32]
 80304e0:	681b      	ldr	r3, [r3, #0]
 80304e2:	7018      	strb	r0, [r3, #0]
 80304e4:	69fb      	ldr	r3, [r7, #28]
 80304e6:	3301      	adds	r3, #1
 80304e8:	e9c7 3807 	strd	r3, r8, [r7, #28]
 80304ec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80304f0:	ebaa 0503 	sub.w	r5, sl, r3
 80304f4:	444d      	add	r5, r9
 80304f6:	f7ff bbac 	b.w	802fc52 <__ssvfiscanf_r+0x51a>
 80304fa:	0775      	lsls	r5, r6, #29
 80304fc:	d503      	bpl.n	8030506 <__ssvfiscanf_r+0xdce>
 80304fe:	6a3b      	ldr	r3, [r7, #32]
 8030500:	681b      	ldr	r3, [r3, #0]
 8030502:	8018      	strh	r0, [r3, #0]
 8030504:	e7ee      	b.n	80304e4 <__ssvfiscanf_r+0xdac>
 8030506:	f016 0201 	ands.w	r2, r6, #1
 803050a:	d001      	beq.n	8030510 <__ssvfiscanf_r+0xdd8>
 803050c:	6a3b      	ldr	r3, [r7, #32]
 803050e:	e78e      	b.n	803042e <__ssvfiscanf_r+0xcf6>
 8030510:	07b1      	lsls	r1, r6, #30
 8030512:	d5fb      	bpl.n	803050c <__ssvfiscanf_r+0xdd4>
 8030514:	4b15      	ldr	r3, [pc, #84]	@ (803056c <__ssvfiscanf_r+0xe34>)
 8030516:	68f9      	ldr	r1, [r7, #12]
 8030518:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803051a:	4299      	cmp	r1, r3
 803051c:	697b      	ldr	r3, [r7, #20]
 803051e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030522:	d106      	bne.n	8030532 <__ssvfiscanf_r+0xdfa>
 8030524:	f004 fc34 	bl	8034d90 <_strtoull_r>
 8030528:	6a3b      	ldr	r3, [r7, #32]
 803052a:	681b      	ldr	r3, [r3, #0]
 803052c:	e9c3 0100 	strd	r0, r1, [r3]
 8030530:	e7d8      	b.n	80304e4 <__ssvfiscanf_r+0xdac>
 8030532:	f004 fb81 	bl	8034c38 <_strtoll_r>
 8030536:	e7f7      	b.n	8030528 <__ssvfiscanf_r+0xdf0>
 8030538:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 803053c:	6818      	ldr	r0, [r3, #0]
 803053e:	f7fe f8ed 	bl	802e71c <free>
 8030542:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8030546:	3401      	adds	r4, #1
 8030548:	601e      	str	r6, [r3, #0]
 803054a:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 803054e:	f8db 5000 	ldr.w	r5, [fp]
 8030552:	42a3      	cmp	r3, r4
 8030554:	dcf0      	bgt.n	8030538 <__ssvfiscanf_r+0xe00>
 8030556:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803055a:	61fb      	str	r3, [r7, #28]
 803055c:	f7ff ba46 	b.w	802f9ec <__ssvfiscanf_r+0x2b4>
 8030560:	2400      	movs	r4, #0
 8030562:	4626      	mov	r6, r4
 8030564:	e7f1      	b.n	803054a <__ssvfiscanf_r+0xe12>
 8030566:	bf00      	nop
 8030568:	0803b560 	.word	0x0803b560
 803056c:	08034789 	.word	0x08034789

08030570 <_svfprintf_r>:
 8030570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030574:	b0d3      	sub	sp, #332	@ 0x14c
 8030576:	468b      	mov	fp, r1
 8030578:	4691      	mov	r9, r2
 803057a:	461e      	mov	r6, r3
 803057c:	9003      	str	r0, [sp, #12]
 803057e:	f7fd f80d 	bl	802d59c <_localeconv_r>
 8030582:	6803      	ldr	r3, [r0, #0]
 8030584:	9316      	str	r3, [sp, #88]	@ 0x58
 8030586:	4618      	mov	r0, r3
 8030588:	f7df fe8a 	bl	80102a0 <strlen>
 803058c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8030590:	900d      	str	r0, [sp, #52]	@ 0x34
 8030592:	061b      	lsls	r3, r3, #24
 8030594:	d515      	bpl.n	80305c2 <_svfprintf_r+0x52>
 8030596:	f8db 3010 	ldr.w	r3, [fp, #16]
 803059a:	b993      	cbnz	r3, 80305c2 <_svfprintf_r+0x52>
 803059c:	9803      	ldr	r0, [sp, #12]
 803059e:	2140      	movs	r1, #64	@ 0x40
 80305a0:	f7fe f8c4 	bl	802e72c <_malloc_r>
 80305a4:	f8cb 0000 	str.w	r0, [fp]
 80305a8:	f8cb 0010 	str.w	r0, [fp, #16]
 80305ac:	b930      	cbnz	r0, 80305bc <_svfprintf_r+0x4c>
 80305ae:	9a03      	ldr	r2, [sp, #12]
 80305b0:	230c      	movs	r3, #12
 80305b2:	6013      	str	r3, [r2, #0]
 80305b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80305b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80305ba:	e1f7      	b.n	80309ac <_svfprintf_r+0x43c>
 80305bc:	2340      	movs	r3, #64	@ 0x40
 80305be:	f8cb 3014 	str.w	r3, [fp, #20]
 80305c2:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8030810 <_svfprintf_r+0x2a0>
 80305c6:	2300      	movs	r3, #0
 80305c8:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 80305cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80305d0:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 80305d4:	ac29      	add	r4, sp, #164	@ 0xa4
 80305d6:	9426      	str	r4, [sp, #152]	@ 0x98
 80305d8:	9304      	str	r3, [sp, #16]
 80305da:	9309      	str	r3, [sp, #36]	@ 0x24
 80305dc:	9312      	str	r3, [sp, #72]	@ 0x48
 80305de:	9317      	str	r3, [sp, #92]	@ 0x5c
 80305e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80305e2:	464b      	mov	r3, r9
 80305e4:	461d      	mov	r5, r3
 80305e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80305ea:	b10a      	cbz	r2, 80305f0 <_svfprintf_r+0x80>
 80305ec:	2a25      	cmp	r2, #37	@ 0x25
 80305ee:	d1f9      	bne.n	80305e4 <_svfprintf_r+0x74>
 80305f0:	ebb5 0709 	subs.w	r7, r5, r9
 80305f4:	d00d      	beq.n	8030612 <_svfprintf_r+0xa2>
 80305f6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80305f8:	443b      	add	r3, r7
 80305fa:	9328      	str	r3, [sp, #160]	@ 0xa0
 80305fc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80305fe:	3301      	adds	r3, #1
 8030600:	2b07      	cmp	r3, #7
 8030602:	e9c4 9700 	strd	r9, r7, [r4]
 8030606:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030608:	dc75      	bgt.n	80306f6 <_svfprintf_r+0x186>
 803060a:	3408      	adds	r4, #8
 803060c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803060e:	443b      	add	r3, r7
 8030610:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030612:	782b      	ldrb	r3, [r5, #0]
 8030614:	2b00      	cmp	r3, #0
 8030616:	f001 8148 	beq.w	80318aa <_svfprintf_r+0x133a>
 803061a:	2200      	movs	r2, #0
 803061c:	1c6b      	adds	r3, r5, #1
 803061e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8030622:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8030626:	920e      	str	r2, [sp, #56]	@ 0x38
 8030628:	4615      	mov	r5, r2
 803062a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803062e:	9206      	str	r2, [sp, #24]
 8030630:	930c      	str	r3, [sp, #48]	@ 0x30
 8030632:	9b06      	ldr	r3, [sp, #24]
 8030634:	3b20      	subs	r3, #32
 8030636:	2b5a      	cmp	r3, #90	@ 0x5a
 8030638:	f200 85a4 	bhi.w	8031184 <_svfprintf_r+0xc14>
 803063c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8030640:	05a2009d 	.word	0x05a2009d
 8030644:	00a505a2 	.word	0x00a505a2
 8030648:	05a205a2 	.word	0x05a205a2
 803064c:	008505a2 	.word	0x008505a2
 8030650:	05a205a2 	.word	0x05a205a2
 8030654:	00b200a8 	.word	0x00b200a8
 8030658:	00af05a2 	.word	0x00af05a2
 803065c:	05a200b4 	.word	0x05a200b4
 8030660:	00d100ce 	.word	0x00d100ce
 8030664:	00d100d1 	.word	0x00d100d1
 8030668:	00d100d1 	.word	0x00d100d1
 803066c:	00d100d1 	.word	0x00d100d1
 8030670:	00d100d1 	.word	0x00d100d1
 8030674:	05a205a2 	.word	0x05a205a2
 8030678:	05a205a2 	.word	0x05a205a2
 803067c:	05a205a2 	.word	0x05a205a2
 8030680:	014705a2 	.word	0x014705a2
 8030684:	010805a2 	.word	0x010805a2
 8030688:	0147011b 	.word	0x0147011b
 803068c:	01470147 	.word	0x01470147
 8030690:	05a205a2 	.word	0x05a205a2
 8030694:	05a205a2 	.word	0x05a205a2
 8030698:	05a200e2 	.word	0x05a200e2
 803069c:	049d05a2 	.word	0x049d05a2
 80306a0:	05a205a2 	.word	0x05a205a2
 80306a4:	04e705a2 	.word	0x04e705a2
 80306a8:	050805a2 	.word	0x050805a2
 80306ac:	05a205a2 	.word	0x05a205a2
 80306b0:	05a2052a 	.word	0x05a2052a
 80306b4:	05a205a2 	.word	0x05a205a2
 80306b8:	05a205a2 	.word	0x05a205a2
 80306bc:	05a205a2 	.word	0x05a205a2
 80306c0:	014705a2 	.word	0x014705a2
 80306c4:	010805a2 	.word	0x010805a2
 80306c8:	0147011d 	.word	0x0147011d
 80306cc:	01470147 	.word	0x01470147
 80306d0:	011d00ee 	.word	0x011d00ee
 80306d4:	05a20102 	.word	0x05a20102
 80306d8:	05a200fb 	.word	0x05a200fb
 80306dc:	049f047e 	.word	0x049f047e
 80306e0:	010204d6 	.word	0x010204d6
 80306e4:	04e705a2 	.word	0x04e705a2
 80306e8:	050a009b 	.word	0x050a009b
 80306ec:	05a205a2 	.word	0x05a205a2
 80306f0:	05a20065 	.word	0x05a20065
 80306f4:	009b      	.short	0x009b
 80306f6:	9803      	ldr	r0, [sp, #12]
 80306f8:	aa26      	add	r2, sp, #152	@ 0x98
 80306fa:	4659      	mov	r1, fp
 80306fc:	f7fe fac0 	bl	802ec80 <__ssprint_r>
 8030700:	2800      	cmp	r0, #0
 8030702:	f040 814e 	bne.w	80309a2 <_svfprintf_r+0x432>
 8030706:	ac29      	add	r4, sp, #164	@ 0xa4
 8030708:	e780      	b.n	803060c <_svfprintf_r+0x9c>
 803070a:	4b43      	ldr	r3, [pc, #268]	@ (8030818 <_svfprintf_r+0x2a8>)
 803070c:	9319      	str	r3, [sp, #100]	@ 0x64
 803070e:	f015 0320 	ands.w	r3, r5, #32
 8030712:	f000 84c2 	beq.w	803109a <_svfprintf_r+0xb2a>
 8030716:	3607      	adds	r6, #7
 8030718:	f026 0307 	bic.w	r3, r6, #7
 803071c:	461a      	mov	r2, r3
 803071e:	685f      	ldr	r7, [r3, #4]
 8030720:	f852 6b08 	ldr.w	r6, [r2], #8
 8030724:	9207      	str	r2, [sp, #28]
 8030726:	07eb      	lsls	r3, r5, #31
 8030728:	d50a      	bpl.n	8030740 <_svfprintf_r+0x1d0>
 803072a:	ea56 0307 	orrs.w	r3, r6, r7
 803072e:	d007      	beq.n	8030740 <_svfprintf_r+0x1d0>
 8030730:	2330      	movs	r3, #48	@ 0x30
 8030732:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8030736:	9b06      	ldr	r3, [sp, #24]
 8030738:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 803073c:	f045 0502 	orr.w	r5, r5, #2
 8030740:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8030744:	2302      	movs	r3, #2
 8030746:	f000 bc28 	b.w	8030f9a <_svfprintf_r+0xa2a>
 803074a:	9803      	ldr	r0, [sp, #12]
 803074c:	f7fc ff26 	bl	802d59c <_localeconv_r>
 8030750:	6843      	ldr	r3, [r0, #4]
 8030752:	9317      	str	r3, [sp, #92]	@ 0x5c
 8030754:	4618      	mov	r0, r3
 8030756:	f7df fda3 	bl	80102a0 <strlen>
 803075a:	9012      	str	r0, [sp, #72]	@ 0x48
 803075c:	9803      	ldr	r0, [sp, #12]
 803075e:	f7fc ff1d 	bl	802d59c <_localeconv_r>
 8030762:	6883      	ldr	r3, [r0, #8]
 8030764:	9309      	str	r3, [sp, #36]	@ 0x24
 8030766:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8030768:	b12b      	cbz	r3, 8030776 <_svfprintf_r+0x206>
 803076a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803076c:	b11b      	cbz	r3, 8030776 <_svfprintf_r+0x206>
 803076e:	781b      	ldrb	r3, [r3, #0]
 8030770:	b10b      	cbz	r3, 8030776 <_svfprintf_r+0x206>
 8030772:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8030776:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030778:	e757      	b.n	803062a <_svfprintf_r+0xba>
 803077a:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 803077e:	2b00      	cmp	r3, #0
 8030780:	d1f9      	bne.n	8030776 <_svfprintf_r+0x206>
 8030782:	2320      	movs	r3, #32
 8030784:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030788:	e7f5      	b.n	8030776 <_svfprintf_r+0x206>
 803078a:	f045 0501 	orr.w	r5, r5, #1
 803078e:	e7f2      	b.n	8030776 <_svfprintf_r+0x206>
 8030790:	f856 3b04 	ldr.w	r3, [r6], #4
 8030794:	930e      	str	r3, [sp, #56]	@ 0x38
 8030796:	2b00      	cmp	r3, #0
 8030798:	daed      	bge.n	8030776 <_svfprintf_r+0x206>
 803079a:	425b      	negs	r3, r3
 803079c:	930e      	str	r3, [sp, #56]	@ 0x38
 803079e:	f045 0504 	orr.w	r5, r5, #4
 80307a2:	e7e8      	b.n	8030776 <_svfprintf_r+0x206>
 80307a4:	232b      	movs	r3, #43	@ 0x2b
 80307a6:	e7ed      	b.n	8030784 <_svfprintf_r+0x214>
 80307a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80307aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80307ae:	9206      	str	r2, [sp, #24]
 80307b0:	2a2a      	cmp	r2, #42	@ 0x2a
 80307b2:	d10f      	bne.n	80307d4 <_svfprintf_r+0x264>
 80307b4:	f856 2b04 	ldr.w	r2, [r6], #4
 80307b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80307ba:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 80307be:	e7da      	b.n	8030776 <_svfprintf_r+0x206>
 80307c0:	fb01 2808 	mla	r8, r1, r8, r2
 80307c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80307c8:	9206      	str	r2, [sp, #24]
 80307ca:	9a06      	ldr	r2, [sp, #24]
 80307cc:	3a30      	subs	r2, #48	@ 0x30
 80307ce:	2a09      	cmp	r2, #9
 80307d0:	d9f6      	bls.n	80307c0 <_svfprintf_r+0x250>
 80307d2:	e72d      	b.n	8030630 <_svfprintf_r+0xc0>
 80307d4:	f04f 0800 	mov.w	r8, #0
 80307d8:	210a      	movs	r1, #10
 80307da:	e7f6      	b.n	80307ca <_svfprintf_r+0x25a>
 80307dc:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 80307e0:	e7c9      	b.n	8030776 <_svfprintf_r+0x206>
 80307e2:	2200      	movs	r2, #0
 80307e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80307e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80307e8:	210a      	movs	r1, #10
 80307ea:	9a06      	ldr	r2, [sp, #24]
 80307ec:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80307ee:	3a30      	subs	r2, #48	@ 0x30
 80307f0:	fb01 2200 	mla	r2, r1, r0, r2
 80307f4:	920e      	str	r2, [sp, #56]	@ 0x38
 80307f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80307fa:	9206      	str	r2, [sp, #24]
 80307fc:	3a30      	subs	r2, #48	@ 0x30
 80307fe:	2a09      	cmp	r2, #9
 8030800:	d9f3      	bls.n	80307ea <_svfprintf_r+0x27a>
 8030802:	e715      	b.n	8030630 <_svfprintf_r+0xc0>
 8030804:	f045 0508 	orr.w	r5, r5, #8
 8030808:	e7b5      	b.n	8030776 <_svfprintf_r+0x206>
 803080a:	bf00      	nop
 803080c:	f3af 8000 	nop.w
	...
 8030818:	0803b01b 	.word	0x0803b01b
 803081c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803081e:	781b      	ldrb	r3, [r3, #0]
 8030820:	2b68      	cmp	r3, #104	@ 0x68
 8030822:	bf01      	itttt	eq
 8030824:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8030826:	3301      	addeq	r3, #1
 8030828:	930c      	streq	r3, [sp, #48]	@ 0x30
 803082a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 803082e:	bf18      	it	ne
 8030830:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8030834:	e79f      	b.n	8030776 <_svfprintf_r+0x206>
 8030836:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030838:	781b      	ldrb	r3, [r3, #0]
 803083a:	2b6c      	cmp	r3, #108	@ 0x6c
 803083c:	d105      	bne.n	803084a <_svfprintf_r+0x2da>
 803083e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030840:	3301      	adds	r3, #1
 8030842:	930c      	str	r3, [sp, #48]	@ 0x30
 8030844:	f045 0520 	orr.w	r5, r5, #32
 8030848:	e795      	b.n	8030776 <_svfprintf_r+0x206>
 803084a:	f045 0510 	orr.w	r5, r5, #16
 803084e:	e792      	b.n	8030776 <_svfprintf_r+0x206>
 8030850:	4632      	mov	r2, r6
 8030852:	f852 3b04 	ldr.w	r3, [r2], #4
 8030856:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 803085a:	2300      	movs	r3, #0
 803085c:	9207      	str	r2, [sp, #28]
 803085e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030862:	469a      	mov	sl, r3
 8030864:	f04f 0801 	mov.w	r8, #1
 8030868:	9310      	str	r3, [sp, #64]	@ 0x40
 803086a:	461f      	mov	r7, r3
 803086c:	9308      	str	r3, [sp, #32]
 803086e:	461e      	mov	r6, r3
 8030870:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8030874:	e1d2      	b.n	8030c1c <_svfprintf_r+0x6ac>
 8030876:	f045 0510 	orr.w	r5, r5, #16
 803087a:	06af      	lsls	r7, r5, #26
 803087c:	d512      	bpl.n	80308a4 <_svfprintf_r+0x334>
 803087e:	3607      	adds	r6, #7
 8030880:	f026 0307 	bic.w	r3, r6, #7
 8030884:	461a      	mov	r2, r3
 8030886:	685f      	ldr	r7, [r3, #4]
 8030888:	f852 6b08 	ldr.w	r6, [r2], #8
 803088c:	9207      	str	r2, [sp, #28]
 803088e:	2f00      	cmp	r7, #0
 8030890:	da06      	bge.n	80308a0 <_svfprintf_r+0x330>
 8030892:	4276      	negs	r6, r6
 8030894:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8030898:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 803089c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80308a0:	2301      	movs	r3, #1
 80308a2:	e37d      	b.n	8030fa0 <_svfprintf_r+0xa30>
 80308a4:	4633      	mov	r3, r6
 80308a6:	06ee      	lsls	r6, r5, #27
 80308a8:	f853 7b04 	ldr.w	r7, [r3], #4
 80308ac:	9307      	str	r3, [sp, #28]
 80308ae:	d502      	bpl.n	80308b6 <_svfprintf_r+0x346>
 80308b0:	463e      	mov	r6, r7
 80308b2:	17ff      	asrs	r7, r7, #31
 80308b4:	e7eb      	b.n	803088e <_svfprintf_r+0x31e>
 80308b6:	0668      	lsls	r0, r5, #25
 80308b8:	d503      	bpl.n	80308c2 <_svfprintf_r+0x352>
 80308ba:	b23e      	sxth	r6, r7
 80308bc:	f347 37c0 	sbfx	r7, r7, #15, #1
 80308c0:	e7e5      	b.n	803088e <_svfprintf_r+0x31e>
 80308c2:	05a9      	lsls	r1, r5, #22
 80308c4:	d5f4      	bpl.n	80308b0 <_svfprintf_r+0x340>
 80308c6:	b27e      	sxtb	r6, r7
 80308c8:	f347 17c0 	sbfx	r7, r7, #7, #1
 80308cc:	e7df      	b.n	803088e <_svfprintf_r+0x31e>
 80308ce:	3607      	adds	r6, #7
 80308d0:	f026 0307 	bic.w	r3, r6, #7
 80308d4:	ecb3 7b02 	vldmia	r3!, {d7}
 80308d8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80308dc:	9307      	str	r3, [sp, #28]
 80308de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80308e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80308e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80308e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80308e8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80308ea:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80308ee:	4b81      	ldr	r3, [pc, #516]	@ (8030af4 <_svfprintf_r+0x584>)
 80308f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80308f4:	f7e0 f932 	bl	8010b5c <__aeabi_dcmpun>
 80308f8:	bb10      	cbnz	r0, 8030940 <_svfprintf_r+0x3d0>
 80308fa:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80308fe:	4b7d      	ldr	r3, [pc, #500]	@ (8030af4 <_svfprintf_r+0x584>)
 8030900:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8030904:	f7e0 f90c 	bl	8010b20 <__aeabi_dcmple>
 8030908:	b9d0      	cbnz	r0, 8030940 <_svfprintf_r+0x3d0>
 803090a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803090e:	2200      	movs	r2, #0
 8030910:	2300      	movs	r3, #0
 8030912:	f7e0 f8fb 	bl	8010b0c <__aeabi_dcmplt>
 8030916:	b110      	cbz	r0, 803091e <_svfprintf_r+0x3ae>
 8030918:	232d      	movs	r3, #45	@ 0x2d
 803091a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803091e:	4a76      	ldr	r2, [pc, #472]	@ (8030af8 <_svfprintf_r+0x588>)
 8030920:	4b76      	ldr	r3, [pc, #472]	@ (8030afc <_svfprintf_r+0x58c>)
 8030922:	9906      	ldr	r1, [sp, #24]
 8030924:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8030928:	2947      	cmp	r1, #71	@ 0x47
 803092a:	bfd4      	ite	le
 803092c:	4691      	movle	r9, r2
 803092e:	4699      	movgt	r9, r3
 8030930:	f04f 0a00 	mov.w	sl, #0
 8030934:	f04f 0803 	mov.w	r8, #3
 8030938:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 803093c:	f000 bfec 	b.w	8031918 <_svfprintf_r+0x13a8>
 8030940:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8030944:	4610      	mov	r0, r2
 8030946:	4619      	mov	r1, r3
 8030948:	f7e0 f908 	bl	8010b5c <__aeabi_dcmpun>
 803094c:	4682      	mov	sl, r0
 803094e:	b140      	cbz	r0, 8030962 <_svfprintf_r+0x3f2>
 8030950:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8030952:	4a6b      	ldr	r2, [pc, #428]	@ (8030b00 <_svfprintf_r+0x590>)
 8030954:	2b00      	cmp	r3, #0
 8030956:	bfbc      	itt	lt
 8030958:	232d      	movlt	r3, #45	@ 0x2d
 803095a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 803095e:	4b69      	ldr	r3, [pc, #420]	@ (8030b04 <_svfprintf_r+0x594>)
 8030960:	e7df      	b.n	8030922 <_svfprintf_r+0x3b2>
 8030962:	9b06      	ldr	r3, [sp, #24]
 8030964:	2b61      	cmp	r3, #97	@ 0x61
 8030966:	d025      	beq.n	80309b4 <_svfprintf_r+0x444>
 8030968:	2b41      	cmp	r3, #65	@ 0x41
 803096a:	d125      	bne.n	80309b8 <_svfprintf_r+0x448>
 803096c:	2358      	movs	r3, #88	@ 0x58
 803096e:	2230      	movs	r2, #48	@ 0x30
 8030970:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 8030974:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8030978:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 803097c:	f045 0502 	orr.w	r5, r5, #2
 8030980:	f340 80a5 	ble.w	8030ace <_svfprintf_r+0x55e>
 8030984:	9803      	ldr	r0, [sp, #12]
 8030986:	f108 0101 	add.w	r1, r8, #1
 803098a:	f7fd fecf 	bl	802e72c <_malloc_r>
 803098e:	4681      	mov	r9, r0
 8030990:	2800      	cmp	r0, #0
 8030992:	f040 80a1 	bne.w	8030ad8 <_svfprintf_r+0x568>
 8030996:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803099a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803099e:	f8ab 300c 	strh.w	r3, [fp, #12]
 80309a2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80309a6:	065b      	lsls	r3, r3, #25
 80309a8:	f53f ae04 	bmi.w	80305b4 <_svfprintf_r+0x44>
 80309ac:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80309ae:	b053      	add	sp, #332	@ 0x14c
 80309b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80309b4:	2378      	movs	r3, #120	@ 0x78
 80309b6:	e7da      	b.n	803096e <_svfprintf_r+0x3fe>
 80309b8:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80309bc:	f000 808e 	beq.w	8030adc <_svfprintf_r+0x56c>
 80309c0:	9b06      	ldr	r3, [sp, #24]
 80309c2:	f023 0320 	bic.w	r3, r3, #32
 80309c6:	2b47      	cmp	r3, #71	@ 0x47
 80309c8:	d105      	bne.n	80309d6 <_svfprintf_r+0x466>
 80309ca:	f1b8 0f00 	cmp.w	r8, #0
 80309ce:	d102      	bne.n	80309d6 <_svfprintf_r+0x466>
 80309d0:	46c2      	mov	sl, r8
 80309d2:	f04f 0801 	mov.w	r8, #1
 80309d6:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80309da:	9311      	str	r3, [sp, #68]	@ 0x44
 80309dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80309de:	2b00      	cmp	r3, #0
 80309e0:	da7f      	bge.n	8030ae2 <_svfprintf_r+0x572>
 80309e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80309e4:	9314      	str	r3, [sp, #80]	@ 0x50
 80309e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80309e8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80309ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80309ee:	232d      	movs	r3, #45	@ 0x2d
 80309f0:	931c      	str	r3, [sp, #112]	@ 0x70
 80309f2:	9b06      	ldr	r3, [sp, #24]
 80309f4:	f023 0320 	bic.w	r3, r3, #32
 80309f8:	2b41      	cmp	r3, #65	@ 0x41
 80309fa:	9308      	str	r3, [sp, #32]
 80309fc:	f040 81e6 	bne.w	8030dcc <_svfprintf_r+0x85c>
 8030a00:	a820      	add	r0, sp, #128	@ 0x80
 8030a02:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8030a06:	f7fc fe9b 	bl	802d740 <frexp>
 8030a0a:	2200      	movs	r2, #0
 8030a0c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8030a10:	ec51 0b10 	vmov	r0, r1, d0
 8030a14:	f7df fe08 	bl	8010628 <__aeabi_dmul>
 8030a18:	4602      	mov	r2, r0
 8030a1a:	460b      	mov	r3, r1
 8030a1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8030a20:	2200      	movs	r2, #0
 8030a22:	2300      	movs	r3, #0
 8030a24:	f7e0 f868 	bl	8010af8 <__aeabi_dcmpeq>
 8030a28:	b108      	cbz	r0, 8030a2e <_svfprintf_r+0x4be>
 8030a2a:	2301      	movs	r3, #1
 8030a2c:	9320      	str	r3, [sp, #128]	@ 0x80
 8030a2e:	4a36      	ldr	r2, [pc, #216]	@ (8030b08 <_svfprintf_r+0x598>)
 8030a30:	4b36      	ldr	r3, [pc, #216]	@ (8030b0c <_svfprintf_r+0x59c>)
 8030a32:	9906      	ldr	r1, [sp, #24]
 8030a34:	2961      	cmp	r1, #97	@ 0x61
 8030a36:	bf18      	it	ne
 8030a38:	461a      	movne	r2, r3
 8030a3a:	9210      	str	r2, [sp, #64]	@ 0x40
 8030a3c:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 8030a40:	464e      	mov	r6, r9
 8030a42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8030a46:	4b32      	ldr	r3, [pc, #200]	@ (8030b10 <_svfprintf_r+0x5a0>)
 8030a48:	2200      	movs	r2, #0
 8030a4a:	f7df fded 	bl	8010628 <__aeabi_dmul>
 8030a4e:	4602      	mov	r2, r0
 8030a50:	460b      	mov	r3, r1
 8030a52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8030a56:	f7e0 f897 	bl	8010b88 <__aeabi_d2iz>
 8030a5a:	9013      	str	r0, [sp, #76]	@ 0x4c
 8030a5c:	f7df fd7a 	bl	8010554 <__aeabi_i2d>
 8030a60:	4602      	mov	r2, r0
 8030a62:	460b      	mov	r3, r1
 8030a64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8030a68:	f7df fc26 	bl	80102b8 <__aeabi_dsub>
 8030a6c:	4602      	mov	r2, r0
 8030a6e:	460b      	mov	r3, r1
 8030a70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8030a74:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8030a76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030a78:	5c9b      	ldrb	r3, [r3, r2]
 8030a7a:	f806 3b01 	strb.w	r3, [r6], #1
 8030a7e:	1c7a      	adds	r2, r7, #1
 8030a80:	d006      	beq.n	8030a90 <_svfprintf_r+0x520>
 8030a82:	1e7b      	subs	r3, r7, #1
 8030a84:	931d      	str	r3, [sp, #116]	@ 0x74
 8030a86:	2200      	movs	r2, #0
 8030a88:	2300      	movs	r3, #0
 8030a8a:	f7e0 f835 	bl	8010af8 <__aeabi_dcmpeq>
 8030a8e:	b370      	cbz	r0, 8030aee <_svfprintf_r+0x57e>
 8030a90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8030a94:	4b1f      	ldr	r3, [pc, #124]	@ (8030b14 <_svfprintf_r+0x5a4>)
 8030a96:	2200      	movs	r2, #0
 8030a98:	f7e0 f856 	bl	8010b48 <__aeabi_dcmpgt>
 8030a9c:	2800      	cmp	r0, #0
 8030a9e:	d13b      	bne.n	8030b18 <_svfprintf_r+0x5a8>
 8030aa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8030aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8030b14 <_svfprintf_r+0x5a4>)
 8030aa6:	2200      	movs	r2, #0
 8030aa8:	f7e0 f826 	bl	8010af8 <__aeabi_dcmpeq>
 8030aac:	b110      	cbz	r0, 8030ab4 <_svfprintf_r+0x544>
 8030aae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8030ab0:	07db      	lsls	r3, r3, #31
 8030ab2:	d431      	bmi.n	8030b18 <_svfprintf_r+0x5a8>
 8030ab4:	4633      	mov	r3, r6
 8030ab6:	19f1      	adds	r1, r6, r7
 8030ab8:	2030      	movs	r0, #48	@ 0x30
 8030aba:	1aca      	subs	r2, r1, r3
 8030abc:	2a00      	cmp	r2, #0
 8030abe:	f280 8182 	bge.w	8030dc6 <_svfprintf_r+0x856>
 8030ac2:	1c7b      	adds	r3, r7, #1
 8030ac4:	3701      	adds	r7, #1
 8030ac6:	bfb8      	it	lt
 8030ac8:	2300      	movlt	r3, #0
 8030aca:	441e      	add	r6, r3
 8030acc:	e038      	b.n	8030b40 <_svfprintf_r+0x5d0>
 8030ace:	f04f 0a00 	mov.w	sl, #0
 8030ad2:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8030ad6:	e77e      	b.n	80309d6 <_svfprintf_r+0x466>
 8030ad8:	4682      	mov	sl, r0
 8030ada:	e77c      	b.n	80309d6 <_svfprintf_r+0x466>
 8030adc:	f04f 0806 	mov.w	r8, #6
 8030ae0:	e779      	b.n	80309d6 <_svfprintf_r+0x466>
 8030ae2:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8030ae6:	2300      	movs	r3, #0
 8030ae8:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8030aec:	e780      	b.n	80309f0 <_svfprintf_r+0x480>
 8030aee:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8030af0:	e7a7      	b.n	8030a42 <_svfprintf_r+0x4d2>
 8030af2:	bf00      	nop
 8030af4:	7fefffff 	.word	0x7fefffff
 8030af8:	0803b00b 	.word	0x0803b00b
 8030afc:	0803b00f 	.word	0x0803b00f
 8030b00:	0803b013 	.word	0x0803b013
 8030b04:	0803b017 	.word	0x0803b017
 8030b08:	0803b01b 	.word	0x0803b01b
 8030b0c:	0803b02c 	.word	0x0803b02c
 8030b10:	40300000 	.word	0x40300000
 8030b14:	3fe00000 	.word	0x3fe00000
 8030b18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030b1a:	9624      	str	r6, [sp, #144]	@ 0x90
 8030b1c:	7bd9      	ldrb	r1, [r3, #15]
 8030b1e:	2030      	movs	r0, #48	@ 0x30
 8030b20:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8030b22:	1e53      	subs	r3, r2, #1
 8030b24:	9324      	str	r3, [sp, #144]	@ 0x90
 8030b26:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8030b2a:	428b      	cmp	r3, r1
 8030b2c:	f000 8148 	beq.w	8030dc0 <_svfprintf_r+0x850>
 8030b30:	2b39      	cmp	r3, #57	@ 0x39
 8030b32:	bf0b      	itete	eq
 8030b34:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8030b36:	3301      	addne	r3, #1
 8030b38:	7a9b      	ldrbeq	r3, [r3, #10]
 8030b3a:	b2db      	uxtbne	r3, r3
 8030b3c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8030b40:	eba6 0309 	sub.w	r3, r6, r9
 8030b44:	9304      	str	r3, [sp, #16]
 8030b46:	9b08      	ldr	r3, [sp, #32]
 8030b48:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8030b4a:	2b47      	cmp	r3, #71	@ 0x47
 8030b4c:	f040 8187 	bne.w	8030e5e <_svfprintf_r+0x8ee>
 8030b50:	1cf1      	adds	r1, r6, #3
 8030b52:	db02      	blt.n	8030b5a <_svfprintf_r+0x5ea>
 8030b54:	4546      	cmp	r6, r8
 8030b56:	f340 81a5 	ble.w	8030ea4 <_svfprintf_r+0x934>
 8030b5a:	9b06      	ldr	r3, [sp, #24]
 8030b5c:	3b02      	subs	r3, #2
 8030b5e:	9306      	str	r3, [sp, #24]
 8030b60:	9906      	ldr	r1, [sp, #24]
 8030b62:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8030b66:	f021 0120 	bic.w	r1, r1, #32
 8030b6a:	2941      	cmp	r1, #65	@ 0x41
 8030b6c:	bf08      	it	eq
 8030b6e:	320f      	addeq	r2, #15
 8030b70:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 8030b74:	bf06      	itte	eq
 8030b76:	b2d2      	uxtbeq	r2, r2
 8030b78:	2101      	moveq	r1, #1
 8030b7a:	2100      	movne	r1, #0
 8030b7c:	2b00      	cmp	r3, #0
 8030b7e:	9320      	str	r3, [sp, #128]	@ 0x80
 8030b80:	bfb8      	it	lt
 8030b82:	f1c6 0301 	rsblt	r3, r6, #1
 8030b86:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 8030b8a:	bfb4      	ite	lt
 8030b8c:	222d      	movlt	r2, #45	@ 0x2d
 8030b8e:	222b      	movge	r2, #43	@ 0x2b
 8030b90:	2b09      	cmp	r3, #9
 8030b92:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8030b96:	f340 8178 	ble.w	8030e8a <_svfprintf_r+0x91a>
 8030b9a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8030b9e:	270a      	movs	r7, #10
 8030ba0:	4602      	mov	r2, r0
 8030ba2:	fbb3 f6f7 	udiv	r6, r3, r7
 8030ba6:	fb07 3116 	mls	r1, r7, r6, r3
 8030baa:	3130      	adds	r1, #48	@ 0x30
 8030bac:	f802 1c01 	strb.w	r1, [r2, #-1]
 8030bb0:	4619      	mov	r1, r3
 8030bb2:	2963      	cmp	r1, #99	@ 0x63
 8030bb4:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8030bb8:	4633      	mov	r3, r6
 8030bba:	dcf1      	bgt.n	8030ba0 <_svfprintf_r+0x630>
 8030bbc:	3330      	adds	r3, #48	@ 0x30
 8030bbe:	1e91      	subs	r1, r2, #2
 8030bc0:	f800 3c01 	strb.w	r3, [r0, #-1]
 8030bc4:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8030bc8:	460b      	mov	r3, r1
 8030bca:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8030bce:	4283      	cmp	r3, r0
 8030bd0:	f0c0 8156 	bcc.w	8030e80 <_svfprintf_r+0x910>
 8030bd4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8030bd8:	1a9b      	subs	r3, r3, r2
 8030bda:	4281      	cmp	r1, r0
 8030bdc:	bf88      	it	hi
 8030bde:	2300      	movhi	r3, #0
 8030be0:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8030be4:	441a      	add	r2, r3
 8030be6:	ab22      	add	r3, sp, #136	@ 0x88
 8030be8:	1ad3      	subs	r3, r2, r3
 8030bea:	9a04      	ldr	r2, [sp, #16]
 8030bec:	9318      	str	r3, [sp, #96]	@ 0x60
 8030bee:	2a01      	cmp	r2, #1
 8030bf0:	eb03 0802 	add.w	r8, r3, r2
 8030bf4:	dc01      	bgt.n	8030bfa <_svfprintf_r+0x68a>
 8030bf6:	07ea      	lsls	r2, r5, #31
 8030bf8:	d501      	bpl.n	8030bfe <_svfprintf_r+0x68e>
 8030bfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8030bfc:	4498      	add	r8, r3
 8030bfe:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8030c02:	2700      	movs	r7, #0
 8030c04:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8030c08:	9311      	str	r3, [sp, #68]	@ 0x44
 8030c0a:	9708      	str	r7, [sp, #32]
 8030c0c:	463e      	mov	r6, r7
 8030c0e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8030c10:	2b00      	cmp	r3, #0
 8030c12:	f040 818f 	bne.w	8030f34 <_svfprintf_r+0x9c4>
 8030c16:	2300      	movs	r3, #0
 8030c18:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8030c1a:	9310      	str	r3, [sp, #64]	@ 0x40
 8030c1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030c1e:	4543      	cmp	r3, r8
 8030c20:	bfb8      	it	lt
 8030c22:	4643      	movlt	r3, r8
 8030c24:	9311      	str	r3, [sp, #68]	@ 0x44
 8030c26:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8030c2a:	b113      	cbz	r3, 8030c32 <_svfprintf_r+0x6c2>
 8030c2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8030c2e:	3301      	adds	r3, #1
 8030c30:	9311      	str	r3, [sp, #68]	@ 0x44
 8030c32:	f015 0302 	ands.w	r3, r5, #2
 8030c36:	931c      	str	r3, [sp, #112]	@ 0x70
 8030c38:	bf1e      	ittt	ne
 8030c3a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 8030c3c:	3302      	addne	r3, #2
 8030c3e:	9311      	strne	r3, [sp, #68]	@ 0x44
 8030c40:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8030c44:	931d      	str	r3, [sp, #116]	@ 0x74
 8030c46:	d122      	bne.n	8030c8e <_svfprintf_r+0x71e>
 8030c48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8030c4a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8030c4c:	1a9b      	subs	r3, r3, r2
 8030c4e:	2b00      	cmp	r3, #0
 8030c50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8030c52:	dd1c      	ble.n	8030c8e <_svfprintf_r+0x71e>
 8030c54:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8030c56:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8030c5a:	2810      	cmp	r0, #16
 8030c5c:	489e      	ldr	r0, [pc, #632]	@ (8030ed8 <_svfprintf_r+0x968>)
 8030c5e:	6020      	str	r0, [r4, #0]
 8030c60:	f102 0201 	add.w	r2, r2, #1
 8030c64:	f104 0108 	add.w	r1, r4, #8
 8030c68:	f300 8298 	bgt.w	803119c <_svfprintf_r+0xc2c>
 8030c6c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8030c6e:	6060      	str	r0, [r4, #4]
 8030c70:	4403      	add	r3, r0
 8030c72:	2a07      	cmp	r2, #7
 8030c74:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8030c78:	f340 82a5 	ble.w	80311c6 <_svfprintf_r+0xc56>
 8030c7c:	9803      	ldr	r0, [sp, #12]
 8030c7e:	aa26      	add	r2, sp, #152	@ 0x98
 8030c80:	4659      	mov	r1, fp
 8030c82:	f7fd fffd 	bl	802ec80 <__ssprint_r>
 8030c86:	2800      	cmp	r0, #0
 8030c88:	f040 85ed 	bne.w	8031866 <_svfprintf_r+0x12f6>
 8030c8c:	ac29      	add	r4, sp, #164	@ 0xa4
 8030c8e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8030c92:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030c94:	b16a      	cbz	r2, 8030cb2 <_svfprintf_r+0x742>
 8030c96:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8030c9a:	6022      	str	r2, [r4, #0]
 8030c9c:	2201      	movs	r2, #1
 8030c9e:	4413      	add	r3, r2
 8030ca0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030ca2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030ca4:	6062      	str	r2, [r4, #4]
 8030ca6:	4413      	add	r3, r2
 8030ca8:	2b07      	cmp	r3, #7
 8030caa:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030cac:	f300 828d 	bgt.w	80311ca <_svfprintf_r+0xc5a>
 8030cb0:	3408      	adds	r4, #8
 8030cb2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8030cb4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030cb6:	b162      	cbz	r2, 8030cd2 <_svfprintf_r+0x762>
 8030cb8:	aa1f      	add	r2, sp, #124	@ 0x7c
 8030cba:	6022      	str	r2, [r4, #0]
 8030cbc:	2202      	movs	r2, #2
 8030cbe:	4413      	add	r3, r2
 8030cc0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030cc2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030cc4:	6062      	str	r2, [r4, #4]
 8030cc6:	3301      	adds	r3, #1
 8030cc8:	2b07      	cmp	r3, #7
 8030cca:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030ccc:	f300 8287 	bgt.w	80311de <_svfprintf_r+0xc6e>
 8030cd0:	3408      	adds	r4, #8
 8030cd2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8030cd4:	2b80      	cmp	r3, #128	@ 0x80
 8030cd6:	d122      	bne.n	8030d1e <_svfprintf_r+0x7ae>
 8030cd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8030cda:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8030cdc:	1a9b      	subs	r3, r3, r2
 8030cde:	2b00      	cmp	r3, #0
 8030ce0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8030ce2:	dd1c      	ble.n	8030d1e <_svfprintf_r+0x7ae>
 8030ce4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8030ce6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8030cea:	2810      	cmp	r0, #16
 8030cec:	487b      	ldr	r0, [pc, #492]	@ (8030edc <_svfprintf_r+0x96c>)
 8030cee:	6020      	str	r0, [r4, #0]
 8030cf0:	f102 0201 	add.w	r2, r2, #1
 8030cf4:	f104 0108 	add.w	r1, r4, #8
 8030cf8:	f300 827b 	bgt.w	80311f2 <_svfprintf_r+0xc82>
 8030cfc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8030cfe:	6060      	str	r0, [r4, #4]
 8030d00:	4403      	add	r3, r0
 8030d02:	2a07      	cmp	r2, #7
 8030d04:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8030d08:	f340 8288 	ble.w	803121c <_svfprintf_r+0xcac>
 8030d0c:	9803      	ldr	r0, [sp, #12]
 8030d0e:	aa26      	add	r2, sp, #152	@ 0x98
 8030d10:	4659      	mov	r1, fp
 8030d12:	f7fd ffb5 	bl	802ec80 <__ssprint_r>
 8030d16:	2800      	cmp	r0, #0
 8030d18:	f040 85a5 	bne.w	8031866 <_svfprintf_r+0x12f6>
 8030d1c:	ac29      	add	r4, sp, #164	@ 0xa4
 8030d1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030d20:	eba3 0308 	sub.w	r3, r3, r8
 8030d24:	2b00      	cmp	r3, #0
 8030d26:	9310      	str	r3, [sp, #64]	@ 0x40
 8030d28:	dd1c      	ble.n	8030d64 <_svfprintf_r+0x7f4>
 8030d2a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8030d2c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8030d30:	2810      	cmp	r0, #16
 8030d32:	486a      	ldr	r0, [pc, #424]	@ (8030edc <_svfprintf_r+0x96c>)
 8030d34:	6020      	str	r0, [r4, #0]
 8030d36:	f102 0201 	add.w	r2, r2, #1
 8030d3a:	f104 0108 	add.w	r1, r4, #8
 8030d3e:	f300 826f 	bgt.w	8031220 <_svfprintf_r+0xcb0>
 8030d42:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8030d44:	6060      	str	r0, [r4, #4]
 8030d46:	4403      	add	r3, r0
 8030d48:	2a07      	cmp	r2, #7
 8030d4a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8030d4e:	f340 827c 	ble.w	803124a <_svfprintf_r+0xcda>
 8030d52:	9803      	ldr	r0, [sp, #12]
 8030d54:	aa26      	add	r2, sp, #152	@ 0x98
 8030d56:	4659      	mov	r1, fp
 8030d58:	f7fd ff92 	bl	802ec80 <__ssprint_r>
 8030d5c:	2800      	cmp	r0, #0
 8030d5e:	f040 8582 	bne.w	8031866 <_svfprintf_r+0x12f6>
 8030d62:	ac29      	add	r4, sp, #164	@ 0xa4
 8030d64:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030d66:	9310      	str	r3, [sp, #64]	@ 0x40
 8030d68:	05ea      	lsls	r2, r5, #23
 8030d6a:	f100 8275 	bmi.w	8031258 <_svfprintf_r+0xce8>
 8030d6e:	4443      	add	r3, r8
 8030d70:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030d72:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030d74:	3301      	adds	r3, #1
 8030d76:	2b07      	cmp	r3, #7
 8030d78:	e9c4 9800 	strd	r9, r8, [r4]
 8030d7c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030d7e:	f300 82b1 	bgt.w	80312e4 <_svfprintf_r+0xd74>
 8030d82:	3408      	adds	r4, #8
 8030d84:	076a      	lsls	r2, r5, #29
 8030d86:	f100 8550 	bmi.w	803182a <_svfprintf_r+0x12ba>
 8030d8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8030d8e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8030d90:	428a      	cmp	r2, r1
 8030d92:	bfac      	ite	ge
 8030d94:	189b      	addge	r3, r3, r2
 8030d96:	185b      	addlt	r3, r3, r1
 8030d98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030d9a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030d9c:	b13b      	cbz	r3, 8030dae <_svfprintf_r+0x83e>
 8030d9e:	9803      	ldr	r0, [sp, #12]
 8030da0:	aa26      	add	r2, sp, #152	@ 0x98
 8030da2:	4659      	mov	r1, fp
 8030da4:	f7fd ff6c 	bl	802ec80 <__ssprint_r>
 8030da8:	2800      	cmp	r0, #0
 8030daa:	f040 855c 	bne.w	8031866 <_svfprintf_r+0x12f6>
 8030dae:	2300      	movs	r3, #0
 8030db0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030db2:	f1ba 0f00 	cmp.w	sl, #0
 8030db6:	f040 8572 	bne.w	803189e <_svfprintf_r+0x132e>
 8030dba:	9e07      	ldr	r6, [sp, #28]
 8030dbc:	ac29      	add	r4, sp, #164	@ 0xa4
 8030dbe:	e0c6      	b.n	8030f4e <_svfprintf_r+0x9de>
 8030dc0:	f802 0c01 	strb.w	r0, [r2, #-1]
 8030dc4:	e6ac      	b.n	8030b20 <_svfprintf_r+0x5b0>
 8030dc6:	f803 0b01 	strb.w	r0, [r3], #1
 8030dca:	e676      	b.n	8030aba <_svfprintf_r+0x54a>
 8030dcc:	9b08      	ldr	r3, [sp, #32]
 8030dce:	2b46      	cmp	r3, #70	@ 0x46
 8030dd0:	d005      	beq.n	8030dde <_svfprintf_r+0x86e>
 8030dd2:	2b45      	cmp	r3, #69	@ 0x45
 8030dd4:	d11a      	bne.n	8030e0c <_svfprintf_r+0x89c>
 8030dd6:	f108 0601 	add.w	r6, r8, #1
 8030dda:	2102      	movs	r1, #2
 8030ddc:	e001      	b.n	8030de2 <_svfprintf_r+0x872>
 8030dde:	4646      	mov	r6, r8
 8030de0:	2103      	movs	r1, #3
 8030de2:	ab24      	add	r3, sp, #144	@ 0x90
 8030de4:	9301      	str	r3, [sp, #4]
 8030de6:	ab21      	add	r3, sp, #132	@ 0x84
 8030de8:	9300      	str	r3, [sp, #0]
 8030dea:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8030dee:	ab20      	add	r3, sp, #128	@ 0x80
 8030df0:	9803      	ldr	r0, [sp, #12]
 8030df2:	4632      	mov	r2, r6
 8030df4:	f7fc fd80 	bl	802d8f8 <_dtoa_r>
 8030df8:	9b08      	ldr	r3, [sp, #32]
 8030dfa:	2b47      	cmp	r3, #71	@ 0x47
 8030dfc:	4681      	mov	r9, r0
 8030dfe:	d119      	bne.n	8030e34 <_svfprintf_r+0x8c4>
 8030e00:	07e8      	lsls	r0, r5, #31
 8030e02:	d405      	bmi.n	8030e10 <_svfprintf_r+0x8a0>
 8030e04:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8030e06:	eba3 0309 	sub.w	r3, r3, r9
 8030e0a:	e69b      	b.n	8030b44 <_svfprintf_r+0x5d4>
 8030e0c:	4646      	mov	r6, r8
 8030e0e:	e7e4      	b.n	8030dda <_svfprintf_r+0x86a>
 8030e10:	eb09 0706 	add.w	r7, r9, r6
 8030e14:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8030e18:	2200      	movs	r2, #0
 8030e1a:	2300      	movs	r3, #0
 8030e1c:	f7df fe6c 	bl	8010af8 <__aeabi_dcmpeq>
 8030e20:	b100      	cbz	r0, 8030e24 <_svfprintf_r+0x8b4>
 8030e22:	9724      	str	r7, [sp, #144]	@ 0x90
 8030e24:	2230      	movs	r2, #48	@ 0x30
 8030e26:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8030e28:	429f      	cmp	r7, r3
 8030e2a:	d9eb      	bls.n	8030e04 <_svfprintf_r+0x894>
 8030e2c:	1c59      	adds	r1, r3, #1
 8030e2e:	9124      	str	r1, [sp, #144]	@ 0x90
 8030e30:	701a      	strb	r2, [r3, #0]
 8030e32:	e7f8      	b.n	8030e26 <_svfprintf_r+0x8b6>
 8030e34:	9b08      	ldr	r3, [sp, #32]
 8030e36:	2b46      	cmp	r3, #70	@ 0x46
 8030e38:	eb00 0706 	add.w	r7, r0, r6
 8030e3c:	d1ea      	bne.n	8030e14 <_svfprintf_r+0x8a4>
 8030e3e:	7803      	ldrb	r3, [r0, #0]
 8030e40:	2b30      	cmp	r3, #48	@ 0x30
 8030e42:	d109      	bne.n	8030e58 <_svfprintf_r+0x8e8>
 8030e44:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8030e48:	2200      	movs	r2, #0
 8030e4a:	2300      	movs	r3, #0
 8030e4c:	f7df fe54 	bl	8010af8 <__aeabi_dcmpeq>
 8030e50:	b910      	cbnz	r0, 8030e58 <_svfprintf_r+0x8e8>
 8030e52:	f1c6 0601 	rsb	r6, r6, #1
 8030e56:	9620      	str	r6, [sp, #128]	@ 0x80
 8030e58:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8030e5a:	441f      	add	r7, r3
 8030e5c:	e7da      	b.n	8030e14 <_svfprintf_r+0x8a4>
 8030e5e:	9b08      	ldr	r3, [sp, #32]
 8030e60:	2b46      	cmp	r3, #70	@ 0x46
 8030e62:	f47f ae7d 	bne.w	8030b60 <_svfprintf_r+0x5f0>
 8030e66:	f005 0301 	and.w	r3, r5, #1
 8030e6a:	2e00      	cmp	r6, #0
 8030e6c:	ea43 0308 	orr.w	r3, r3, r8
 8030e70:	dd25      	ble.n	8030ebe <_svfprintf_r+0x94e>
 8030e72:	b37b      	cbz	r3, 8030ed4 <_svfprintf_r+0x964>
 8030e74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8030e76:	18f3      	adds	r3, r6, r3
 8030e78:	4498      	add	r8, r3
 8030e7a:	2366      	movs	r3, #102	@ 0x66
 8030e7c:	9306      	str	r3, [sp, #24]
 8030e7e:	e033      	b.n	8030ee8 <_svfprintf_r+0x978>
 8030e80:	f813 7b01 	ldrb.w	r7, [r3], #1
 8030e84:	f806 7f01 	strb.w	r7, [r6, #1]!
 8030e88:	e6a1      	b.n	8030bce <_svfprintf_r+0x65e>
 8030e8a:	b941      	cbnz	r1, 8030e9e <_svfprintf_r+0x92e>
 8030e8c:	2230      	movs	r2, #48	@ 0x30
 8030e8e:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8030e92:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8030e96:	3330      	adds	r3, #48	@ 0x30
 8030e98:	f802 3b01 	strb.w	r3, [r2], #1
 8030e9c:	e6a3      	b.n	8030be6 <_svfprintf_r+0x676>
 8030e9e:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8030ea2:	e7f8      	b.n	8030e96 <_svfprintf_r+0x926>
 8030ea4:	9b04      	ldr	r3, [sp, #16]
 8030ea6:	429e      	cmp	r6, r3
 8030ea8:	da0d      	bge.n	8030ec6 <_svfprintf_r+0x956>
 8030eaa:	9b04      	ldr	r3, [sp, #16]
 8030eac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8030eae:	2e00      	cmp	r6, #0
 8030eb0:	eb03 0802 	add.w	r8, r3, r2
 8030eb4:	dc0c      	bgt.n	8030ed0 <_svfprintf_r+0x960>
 8030eb6:	f1c6 0301 	rsb	r3, r6, #1
 8030eba:	4498      	add	r8, r3
 8030ebc:	e008      	b.n	8030ed0 <_svfprintf_r+0x960>
 8030ebe:	b17b      	cbz	r3, 8030ee0 <_svfprintf_r+0x970>
 8030ec0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8030ec2:	3301      	adds	r3, #1
 8030ec4:	e7d8      	b.n	8030e78 <_svfprintf_r+0x908>
 8030ec6:	07eb      	lsls	r3, r5, #31
 8030ec8:	d521      	bpl.n	8030f0e <_svfprintf_r+0x99e>
 8030eca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8030ecc:	eb06 0803 	add.w	r8, r6, r3
 8030ed0:	2367      	movs	r3, #103	@ 0x67
 8030ed2:	e7d3      	b.n	8030e7c <_svfprintf_r+0x90c>
 8030ed4:	46b0      	mov	r8, r6
 8030ed6:	e7d0      	b.n	8030e7a <_svfprintf_r+0x90a>
 8030ed8:	0803b592 	.word	0x0803b592
 8030edc:	0803b582 	.word	0x0803b582
 8030ee0:	2366      	movs	r3, #102	@ 0x66
 8030ee2:	9306      	str	r3, [sp, #24]
 8030ee4:	f04f 0801 	mov.w	r8, #1
 8030ee8:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8030eec:	9308      	str	r3, [sp, #32]
 8030eee:	d01f      	beq.n	8030f30 <_svfprintf_r+0x9c0>
 8030ef0:	2700      	movs	r7, #0
 8030ef2:	2e00      	cmp	r6, #0
 8030ef4:	9708      	str	r7, [sp, #32]
 8030ef6:	f77f ae8a 	ble.w	8030c0e <_svfprintf_r+0x69e>
 8030efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030efc:	781b      	ldrb	r3, [r3, #0]
 8030efe:	2bff      	cmp	r3, #255	@ 0xff
 8030f00:	d107      	bne.n	8030f12 <_svfprintf_r+0x9a2>
 8030f02:	9b08      	ldr	r3, [sp, #32]
 8030f04:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8030f06:	443b      	add	r3, r7
 8030f08:	fb02 8803 	mla	r8, r2, r3, r8
 8030f0c:	e67f      	b.n	8030c0e <_svfprintf_r+0x69e>
 8030f0e:	46b0      	mov	r8, r6
 8030f10:	e7de      	b.n	8030ed0 <_svfprintf_r+0x960>
 8030f12:	42b3      	cmp	r3, r6
 8030f14:	daf5      	bge.n	8030f02 <_svfprintf_r+0x992>
 8030f16:	1af6      	subs	r6, r6, r3
 8030f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030f1a:	785b      	ldrb	r3, [r3, #1]
 8030f1c:	b133      	cbz	r3, 8030f2c <_svfprintf_r+0x9bc>
 8030f1e:	9b08      	ldr	r3, [sp, #32]
 8030f20:	3301      	adds	r3, #1
 8030f22:	9308      	str	r3, [sp, #32]
 8030f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030f26:	3301      	adds	r3, #1
 8030f28:	9309      	str	r3, [sp, #36]	@ 0x24
 8030f2a:	e7e6      	b.n	8030efa <_svfprintf_r+0x98a>
 8030f2c:	3701      	adds	r7, #1
 8030f2e:	e7e4      	b.n	8030efa <_svfprintf_r+0x98a>
 8030f30:	9f08      	ldr	r7, [sp, #32]
 8030f32:	e66c      	b.n	8030c0e <_svfprintf_r+0x69e>
 8030f34:	232d      	movs	r3, #45	@ 0x2d
 8030f36:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030f3a:	e66c      	b.n	8030c16 <_svfprintf_r+0x6a6>
 8030f3c:	06af      	lsls	r7, r5, #26
 8030f3e:	d50a      	bpl.n	8030f56 <_svfprintf_r+0x9e6>
 8030f40:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8030f42:	6833      	ldr	r3, [r6, #0]
 8030f44:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8030f46:	17d2      	asrs	r2, r2, #31
 8030f48:	e9c3 1200 	strd	r1, r2, [r3]
 8030f4c:	3604      	adds	r6, #4
 8030f4e:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8030f52:	f7ff bb46 	b.w	80305e2 <_svfprintf_r+0x72>
 8030f56:	06e8      	lsls	r0, r5, #27
 8030f58:	d503      	bpl.n	8030f62 <_svfprintf_r+0x9f2>
 8030f5a:	6833      	ldr	r3, [r6, #0]
 8030f5c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8030f5e:	601a      	str	r2, [r3, #0]
 8030f60:	e7f4      	b.n	8030f4c <_svfprintf_r+0x9dc>
 8030f62:	0669      	lsls	r1, r5, #25
 8030f64:	d503      	bpl.n	8030f6e <_svfprintf_r+0x9fe>
 8030f66:	6833      	ldr	r3, [r6, #0]
 8030f68:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8030f6a:	801a      	strh	r2, [r3, #0]
 8030f6c:	e7ee      	b.n	8030f4c <_svfprintf_r+0x9dc>
 8030f6e:	05aa      	lsls	r2, r5, #22
 8030f70:	d5f3      	bpl.n	8030f5a <_svfprintf_r+0x9ea>
 8030f72:	6833      	ldr	r3, [r6, #0]
 8030f74:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8030f76:	701a      	strb	r2, [r3, #0]
 8030f78:	e7e8      	b.n	8030f4c <_svfprintf_r+0x9dc>
 8030f7a:	f045 0510 	orr.w	r5, r5, #16
 8030f7e:	f015 0320 	ands.w	r3, r5, #32
 8030f82:	d020      	beq.n	8030fc6 <_svfprintf_r+0xa56>
 8030f84:	3607      	adds	r6, #7
 8030f86:	f026 0307 	bic.w	r3, r6, #7
 8030f8a:	461a      	mov	r2, r3
 8030f8c:	685f      	ldr	r7, [r3, #4]
 8030f8e:	f852 6b08 	ldr.w	r6, [r2], #8
 8030f92:	9207      	str	r2, [sp, #28]
 8030f94:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8030f98:	2300      	movs	r3, #0
 8030f9a:	2200      	movs	r2, #0
 8030f9c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8030fa0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8030fa4:	f000 848c 	beq.w	80318c0 <_svfprintf_r+0x1350>
 8030fa8:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8030fac:	9208      	str	r2, [sp, #32]
 8030fae:	ea56 0207 	orrs.w	r2, r6, r7
 8030fb2:	f040 848a 	bne.w	80318ca <_svfprintf_r+0x135a>
 8030fb6:	f1b8 0f00 	cmp.w	r8, #0
 8030fba:	f000 80db 	beq.w	8031174 <_svfprintf_r+0xc04>
 8030fbe:	2b01      	cmp	r3, #1
 8030fc0:	f040 8486 	bne.w	80318d0 <_svfprintf_r+0x1360>
 8030fc4:	e083      	b.n	80310ce <_svfprintf_r+0xb5e>
 8030fc6:	4632      	mov	r2, r6
 8030fc8:	f015 0710 	ands.w	r7, r5, #16
 8030fcc:	f852 6b04 	ldr.w	r6, [r2], #4
 8030fd0:	9207      	str	r2, [sp, #28]
 8030fd2:	d001      	beq.n	8030fd8 <_svfprintf_r+0xa68>
 8030fd4:	461f      	mov	r7, r3
 8030fd6:	e7dd      	b.n	8030f94 <_svfprintf_r+0xa24>
 8030fd8:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8030fdc:	d001      	beq.n	8030fe2 <_svfprintf_r+0xa72>
 8030fde:	b2b6      	uxth	r6, r6
 8030fe0:	e7d8      	b.n	8030f94 <_svfprintf_r+0xa24>
 8030fe2:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8030fe6:	d0d5      	beq.n	8030f94 <_svfprintf_r+0xa24>
 8030fe8:	b2f6      	uxtb	r6, r6
 8030fea:	e7f3      	b.n	8030fd4 <_svfprintf_r+0xa64>
 8030fec:	4633      	mov	r3, r6
 8030fee:	2278      	movs	r2, #120	@ 0x78
 8030ff0:	f853 6b04 	ldr.w	r6, [r3], #4
 8030ff4:	9307      	str	r3, [sp, #28]
 8030ff6:	f647 0330 	movw	r3, #30768	@ 0x7830
 8030ffa:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8030ffe:	4b94      	ldr	r3, [pc, #592]	@ (8031250 <_svfprintf_r+0xce0>)
 8031000:	9319      	str	r3, [sp, #100]	@ 0x64
 8031002:	2700      	movs	r7, #0
 8031004:	f045 0502 	orr.w	r5, r5, #2
 8031008:	2302      	movs	r3, #2
 803100a:	9206      	str	r2, [sp, #24]
 803100c:	e7c5      	b.n	8030f9a <_svfprintf_r+0xa2a>
 803100e:	4633      	mov	r3, r6
 8031010:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8031014:	f853 9b04 	ldr.w	r9, [r3], #4
 8031018:	9307      	str	r3, [sp, #28]
 803101a:	f04f 0600 	mov.w	r6, #0
 803101e:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8031022:	d00f      	beq.n	8031044 <_svfprintf_r+0xad4>
 8031024:	4642      	mov	r2, r8
 8031026:	4631      	mov	r1, r6
 8031028:	4648      	mov	r0, r9
 803102a:	f7df f8e9 	bl	8010200 <memchr>
 803102e:	4682      	mov	sl, r0
 8031030:	2800      	cmp	r0, #0
 8031032:	f43f ac81 	beq.w	8030938 <_svfprintf_r+0x3c8>
 8031036:	eba0 0809 	sub.w	r8, r0, r9
 803103a:	46b2      	mov	sl, r6
 803103c:	9610      	str	r6, [sp, #64]	@ 0x40
 803103e:	4637      	mov	r7, r6
 8031040:	9608      	str	r6, [sp, #32]
 8031042:	e5eb      	b.n	8030c1c <_svfprintf_r+0x6ac>
 8031044:	4648      	mov	r0, r9
 8031046:	f7df f92b 	bl	80102a0 <strlen>
 803104a:	46b2      	mov	sl, r6
 803104c:	4680      	mov	r8, r0
 803104e:	e473      	b.n	8030938 <_svfprintf_r+0x3c8>
 8031050:	f045 0510 	orr.w	r5, r5, #16
 8031054:	f015 0320 	ands.w	r3, r5, #32
 8031058:	d009      	beq.n	803106e <_svfprintf_r+0xafe>
 803105a:	3607      	adds	r6, #7
 803105c:	f026 0307 	bic.w	r3, r6, #7
 8031060:	461a      	mov	r2, r3
 8031062:	685f      	ldr	r7, [r3, #4]
 8031064:	f852 6b08 	ldr.w	r6, [r2], #8
 8031068:	9207      	str	r2, [sp, #28]
 803106a:	2301      	movs	r3, #1
 803106c:	e795      	b.n	8030f9a <_svfprintf_r+0xa2a>
 803106e:	4632      	mov	r2, r6
 8031070:	f015 0710 	ands.w	r7, r5, #16
 8031074:	f852 6b04 	ldr.w	r6, [r2], #4
 8031078:	9207      	str	r2, [sp, #28]
 803107a:	d001      	beq.n	8031080 <_svfprintf_r+0xb10>
 803107c:	461f      	mov	r7, r3
 803107e:	e7f4      	b.n	803106a <_svfprintf_r+0xafa>
 8031080:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8031084:	d001      	beq.n	803108a <_svfprintf_r+0xb1a>
 8031086:	b2b6      	uxth	r6, r6
 8031088:	e7ef      	b.n	803106a <_svfprintf_r+0xafa>
 803108a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 803108e:	d0ec      	beq.n	803106a <_svfprintf_r+0xafa>
 8031090:	b2f6      	uxtb	r6, r6
 8031092:	e7f3      	b.n	803107c <_svfprintf_r+0xb0c>
 8031094:	4b6f      	ldr	r3, [pc, #444]	@ (8031254 <_svfprintf_r+0xce4>)
 8031096:	f7ff bb39 	b.w	803070c <_svfprintf_r+0x19c>
 803109a:	4632      	mov	r2, r6
 803109c:	f015 0710 	ands.w	r7, r5, #16
 80310a0:	f852 6b04 	ldr.w	r6, [r2], #4
 80310a4:	9207      	str	r2, [sp, #28]
 80310a6:	d002      	beq.n	80310ae <_svfprintf_r+0xb3e>
 80310a8:	461f      	mov	r7, r3
 80310aa:	f7ff bb3c 	b.w	8030726 <_svfprintf_r+0x1b6>
 80310ae:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80310b2:	d002      	beq.n	80310ba <_svfprintf_r+0xb4a>
 80310b4:	b2b6      	uxth	r6, r6
 80310b6:	f7ff bb36 	b.w	8030726 <_svfprintf_r+0x1b6>
 80310ba:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80310be:	f43f ab32 	beq.w	8030726 <_svfprintf_r+0x1b6>
 80310c2:	b2f6      	uxtb	r6, r6
 80310c4:	e7f0      	b.n	80310a8 <_svfprintf_r+0xb38>
 80310c6:	2e0a      	cmp	r6, #10
 80310c8:	f177 0300 	sbcs.w	r3, r7, #0
 80310cc:	d207      	bcs.n	80310de <_svfprintf_r+0xb6e>
 80310ce:	3630      	adds	r6, #48	@ 0x30
 80310d0:	b2f6      	uxtb	r6, r6
 80310d2:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 80310d6:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 80310da:	f000 bc15 	b.w	8031908 <_svfprintf_r+0x1398>
 80310de:	2300      	movs	r3, #0
 80310e0:	9304      	str	r3, [sp, #16]
 80310e2:	9b08      	ldr	r3, [sp, #32]
 80310e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80310e8:	ad52      	add	r5, sp, #328	@ 0x148
 80310ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80310ec:	220a      	movs	r2, #10
 80310ee:	2300      	movs	r3, #0
 80310f0:	4630      	mov	r0, r6
 80310f2:	4639      	mov	r1, r7
 80310f4:	f7df fe30 	bl	8010d58 <__aeabi_uldivmod>
 80310f8:	9b04      	ldr	r3, [sp, #16]
 80310fa:	9011      	str	r0, [sp, #68]	@ 0x44
 80310fc:	3301      	adds	r3, #1
 80310fe:	9304      	str	r3, [sp, #16]
 8031100:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031102:	3230      	adds	r2, #48	@ 0x30
 8031104:	468a      	mov	sl, r1
 8031106:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 803110a:	f805 2c01 	strb.w	r2, [r5, #-1]
 803110e:	b1d3      	cbz	r3, 8031146 <_svfprintf_r+0xbd6>
 8031110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031112:	9a04      	ldr	r2, [sp, #16]
 8031114:	781b      	ldrb	r3, [r3, #0]
 8031116:	429a      	cmp	r2, r3
 8031118:	d115      	bne.n	8031146 <_svfprintf_r+0xbd6>
 803111a:	2aff      	cmp	r2, #255	@ 0xff
 803111c:	d013      	beq.n	8031146 <_svfprintf_r+0xbd6>
 803111e:	2e0a      	cmp	r6, #10
 8031120:	f177 0300 	sbcs.w	r3, r7, #0
 8031124:	d30f      	bcc.n	8031146 <_svfprintf_r+0xbd6>
 8031126:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8031128:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 803112a:	eba9 0903 	sub.w	r9, r9, r3
 803112e:	461a      	mov	r2, r3
 8031130:	4648      	mov	r0, r9
 8031132:	f7fb f8ec 	bl	802c30e <strncpy>
 8031136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031138:	785b      	ldrb	r3, [r3, #1]
 803113a:	b11b      	cbz	r3, 8031144 <_svfprintf_r+0xbd4>
 803113c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803113e:	3301      	adds	r3, #1
 8031140:	9309      	str	r3, [sp, #36]	@ 0x24
 8031142:	2300      	movs	r3, #0
 8031144:	9304      	str	r3, [sp, #16]
 8031146:	2e0a      	cmp	r6, #10
 8031148:	f177 0700 	sbcs.w	r7, r7, #0
 803114c:	f0c0 83dc 	bcc.w	8031908 <_svfprintf_r+0x1398>
 8031150:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8031152:	4657      	mov	r7, sl
 8031154:	464d      	mov	r5, r9
 8031156:	e7c9      	b.n	80310ec <_svfprintf_r+0xb7c>
 8031158:	f006 030f 	and.w	r3, r6, #15
 803115c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803115e:	0936      	lsrs	r6, r6, #4
 8031160:	5cd3      	ldrb	r3, [r2, r3]
 8031162:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8031166:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 803116a:	093f      	lsrs	r7, r7, #4
 803116c:	ea56 0307 	orrs.w	r3, r6, r7
 8031170:	d1f2      	bne.n	8031158 <_svfprintf_r+0xbe8>
 8031172:	e3c9      	b.n	8031908 <_svfprintf_r+0x1398>
 8031174:	b91b      	cbnz	r3, 803117e <_svfprintf_r+0xc0e>
 8031176:	07e9      	lsls	r1, r5, #31
 8031178:	d501      	bpl.n	803117e <_svfprintf_r+0xc0e>
 803117a:	2630      	movs	r6, #48	@ 0x30
 803117c:	e7a9      	b.n	80310d2 <_svfprintf_r+0xb62>
 803117e:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8031182:	e3c1      	b.n	8031908 <_svfprintf_r+0x1398>
 8031184:	9b06      	ldr	r3, [sp, #24]
 8031186:	2b00      	cmp	r3, #0
 8031188:	f000 838f 	beq.w	80318aa <_svfprintf_r+0x133a>
 803118c:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8031190:	2300      	movs	r3, #0
 8031192:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8031196:	9607      	str	r6, [sp, #28]
 8031198:	f7ff bb63 	b.w	8030862 <_svfprintf_r+0x2f2>
 803119c:	2010      	movs	r0, #16
 803119e:	4403      	add	r3, r0
 80311a0:	2a07      	cmp	r2, #7
 80311a2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80311a6:	6060      	str	r0, [r4, #4]
 80311a8:	dd08      	ble.n	80311bc <_svfprintf_r+0xc4c>
 80311aa:	9803      	ldr	r0, [sp, #12]
 80311ac:	aa26      	add	r2, sp, #152	@ 0x98
 80311ae:	4659      	mov	r1, fp
 80311b0:	f7fd fd66 	bl	802ec80 <__ssprint_r>
 80311b4:	2800      	cmp	r0, #0
 80311b6:	f040 8356 	bne.w	8031866 <_svfprintf_r+0x12f6>
 80311ba:	a929      	add	r1, sp, #164	@ 0xa4
 80311bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80311be:	3b10      	subs	r3, #16
 80311c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80311c2:	460c      	mov	r4, r1
 80311c4:	e546      	b.n	8030c54 <_svfprintf_r+0x6e4>
 80311c6:	460c      	mov	r4, r1
 80311c8:	e561      	b.n	8030c8e <_svfprintf_r+0x71e>
 80311ca:	9803      	ldr	r0, [sp, #12]
 80311cc:	aa26      	add	r2, sp, #152	@ 0x98
 80311ce:	4659      	mov	r1, fp
 80311d0:	f7fd fd56 	bl	802ec80 <__ssprint_r>
 80311d4:	2800      	cmp	r0, #0
 80311d6:	f040 8346 	bne.w	8031866 <_svfprintf_r+0x12f6>
 80311da:	ac29      	add	r4, sp, #164	@ 0xa4
 80311dc:	e569      	b.n	8030cb2 <_svfprintf_r+0x742>
 80311de:	9803      	ldr	r0, [sp, #12]
 80311e0:	aa26      	add	r2, sp, #152	@ 0x98
 80311e2:	4659      	mov	r1, fp
 80311e4:	f7fd fd4c 	bl	802ec80 <__ssprint_r>
 80311e8:	2800      	cmp	r0, #0
 80311ea:	f040 833c 	bne.w	8031866 <_svfprintf_r+0x12f6>
 80311ee:	ac29      	add	r4, sp, #164	@ 0xa4
 80311f0:	e56f      	b.n	8030cd2 <_svfprintf_r+0x762>
 80311f2:	2010      	movs	r0, #16
 80311f4:	4403      	add	r3, r0
 80311f6:	2a07      	cmp	r2, #7
 80311f8:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80311fc:	6060      	str	r0, [r4, #4]
 80311fe:	dd08      	ble.n	8031212 <_svfprintf_r+0xca2>
 8031200:	9803      	ldr	r0, [sp, #12]
 8031202:	aa26      	add	r2, sp, #152	@ 0x98
 8031204:	4659      	mov	r1, fp
 8031206:	f7fd fd3b 	bl	802ec80 <__ssprint_r>
 803120a:	2800      	cmp	r0, #0
 803120c:	f040 832b 	bne.w	8031866 <_svfprintf_r+0x12f6>
 8031210:	a929      	add	r1, sp, #164	@ 0xa4
 8031212:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8031214:	3b10      	subs	r3, #16
 8031216:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031218:	460c      	mov	r4, r1
 803121a:	e563      	b.n	8030ce4 <_svfprintf_r+0x774>
 803121c:	460c      	mov	r4, r1
 803121e:	e57e      	b.n	8030d1e <_svfprintf_r+0x7ae>
 8031220:	2010      	movs	r0, #16
 8031222:	4403      	add	r3, r0
 8031224:	2a07      	cmp	r2, #7
 8031226:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803122a:	6060      	str	r0, [r4, #4]
 803122c:	dd08      	ble.n	8031240 <_svfprintf_r+0xcd0>
 803122e:	9803      	ldr	r0, [sp, #12]
 8031230:	aa26      	add	r2, sp, #152	@ 0x98
 8031232:	4659      	mov	r1, fp
 8031234:	f7fd fd24 	bl	802ec80 <__ssprint_r>
 8031238:	2800      	cmp	r0, #0
 803123a:	f040 8314 	bne.w	8031866 <_svfprintf_r+0x12f6>
 803123e:	a929      	add	r1, sp, #164	@ 0xa4
 8031240:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031242:	3b10      	subs	r3, #16
 8031244:	9310      	str	r3, [sp, #64]	@ 0x40
 8031246:	460c      	mov	r4, r1
 8031248:	e56f      	b.n	8030d2a <_svfprintf_r+0x7ba>
 803124a:	460c      	mov	r4, r1
 803124c:	e58a      	b.n	8030d64 <_svfprintf_r+0x7f4>
 803124e:	bf00      	nop
 8031250:	0803b01b 	.word	0x0803b01b
 8031254:	0803b02c 	.word	0x0803b02c
 8031258:	9b06      	ldr	r3, [sp, #24]
 803125a:	2b65      	cmp	r3, #101	@ 0x65
 803125c:	f340 8246 	ble.w	80316ec <_svfprintf_r+0x117c>
 8031260:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8031264:	2200      	movs	r2, #0
 8031266:	2300      	movs	r3, #0
 8031268:	f7df fc46 	bl	8010af8 <__aeabi_dcmpeq>
 803126c:	2800      	cmp	r0, #0
 803126e:	d06a      	beq.n	8031346 <_svfprintf_r+0xdd6>
 8031270:	4b73      	ldr	r3, [pc, #460]	@ (8031440 <_svfprintf_r+0xed0>)
 8031272:	6023      	str	r3, [r4, #0]
 8031274:	2301      	movs	r3, #1
 8031276:	6063      	str	r3, [r4, #4]
 8031278:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803127a:	3301      	adds	r3, #1
 803127c:	9328      	str	r3, [sp, #160]	@ 0xa0
 803127e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031280:	3301      	adds	r3, #1
 8031282:	2b07      	cmp	r3, #7
 8031284:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031286:	dc37      	bgt.n	80312f8 <_svfprintf_r+0xd88>
 8031288:	3408      	adds	r4, #8
 803128a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803128c:	9a04      	ldr	r2, [sp, #16]
 803128e:	4293      	cmp	r3, r2
 8031290:	db02      	blt.n	8031298 <_svfprintf_r+0xd28>
 8031292:	07ef      	lsls	r7, r5, #31
 8031294:	f57f ad76 	bpl.w	8030d84 <_svfprintf_r+0x814>
 8031298:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803129a:	6023      	str	r3, [r4, #0]
 803129c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803129e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80312a0:	6063      	str	r3, [r4, #4]
 80312a2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80312a4:	4413      	add	r3, r2
 80312a6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80312a8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80312aa:	3301      	adds	r3, #1
 80312ac:	2b07      	cmp	r3, #7
 80312ae:	9327      	str	r3, [sp, #156]	@ 0x9c
 80312b0:	dc2c      	bgt.n	803130c <_svfprintf_r+0xd9c>
 80312b2:	3408      	adds	r4, #8
 80312b4:	9b04      	ldr	r3, [sp, #16]
 80312b6:	1e5e      	subs	r6, r3, #1
 80312b8:	2e00      	cmp	r6, #0
 80312ba:	f77f ad63 	ble.w	8030d84 <_svfprintf_r+0x814>
 80312be:	4f61      	ldr	r7, [pc, #388]	@ (8031444 <_svfprintf_r+0xed4>)
 80312c0:	f04f 0810 	mov.w	r8, #16
 80312c4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80312c8:	2e10      	cmp	r6, #16
 80312ca:	f103 0301 	add.w	r3, r3, #1
 80312ce:	f104 0108 	add.w	r1, r4, #8
 80312d2:	6027      	str	r7, [r4, #0]
 80312d4:	dc24      	bgt.n	8031320 <_svfprintf_r+0xdb0>
 80312d6:	6066      	str	r6, [r4, #4]
 80312d8:	2b07      	cmp	r3, #7
 80312da:	4416      	add	r6, r2
 80312dc:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80312e0:	f340 82a0 	ble.w	8031824 <_svfprintf_r+0x12b4>
 80312e4:	9803      	ldr	r0, [sp, #12]
 80312e6:	aa26      	add	r2, sp, #152	@ 0x98
 80312e8:	4659      	mov	r1, fp
 80312ea:	f7fd fcc9 	bl	802ec80 <__ssprint_r>
 80312ee:	2800      	cmp	r0, #0
 80312f0:	f040 82b9 	bne.w	8031866 <_svfprintf_r+0x12f6>
 80312f4:	ac29      	add	r4, sp, #164	@ 0xa4
 80312f6:	e545      	b.n	8030d84 <_svfprintf_r+0x814>
 80312f8:	9803      	ldr	r0, [sp, #12]
 80312fa:	aa26      	add	r2, sp, #152	@ 0x98
 80312fc:	4659      	mov	r1, fp
 80312fe:	f7fd fcbf 	bl	802ec80 <__ssprint_r>
 8031302:	2800      	cmp	r0, #0
 8031304:	f040 82af 	bne.w	8031866 <_svfprintf_r+0x12f6>
 8031308:	ac29      	add	r4, sp, #164	@ 0xa4
 803130a:	e7be      	b.n	803128a <_svfprintf_r+0xd1a>
 803130c:	9803      	ldr	r0, [sp, #12]
 803130e:	aa26      	add	r2, sp, #152	@ 0x98
 8031310:	4659      	mov	r1, fp
 8031312:	f7fd fcb5 	bl	802ec80 <__ssprint_r>
 8031316:	2800      	cmp	r0, #0
 8031318:	f040 82a5 	bne.w	8031866 <_svfprintf_r+0x12f6>
 803131c:	ac29      	add	r4, sp, #164	@ 0xa4
 803131e:	e7c9      	b.n	80312b4 <_svfprintf_r+0xd44>
 8031320:	3210      	adds	r2, #16
 8031322:	2b07      	cmp	r3, #7
 8031324:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031328:	f8c4 8004 	str.w	r8, [r4, #4]
 803132c:	dd08      	ble.n	8031340 <_svfprintf_r+0xdd0>
 803132e:	9803      	ldr	r0, [sp, #12]
 8031330:	aa26      	add	r2, sp, #152	@ 0x98
 8031332:	4659      	mov	r1, fp
 8031334:	f7fd fca4 	bl	802ec80 <__ssprint_r>
 8031338:	2800      	cmp	r0, #0
 803133a:	f040 8294 	bne.w	8031866 <_svfprintf_r+0x12f6>
 803133e:	a929      	add	r1, sp, #164	@ 0xa4
 8031340:	3e10      	subs	r6, #16
 8031342:	460c      	mov	r4, r1
 8031344:	e7be      	b.n	80312c4 <_svfprintf_r+0xd54>
 8031346:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8031348:	2b00      	cmp	r3, #0
 803134a:	dc7d      	bgt.n	8031448 <_svfprintf_r+0xed8>
 803134c:	4b3c      	ldr	r3, [pc, #240]	@ (8031440 <_svfprintf_r+0xed0>)
 803134e:	6023      	str	r3, [r4, #0]
 8031350:	2301      	movs	r3, #1
 8031352:	6063      	str	r3, [r4, #4]
 8031354:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031356:	3301      	adds	r3, #1
 8031358:	9328      	str	r3, [sp, #160]	@ 0xa0
 803135a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803135c:	3301      	adds	r3, #1
 803135e:	2b07      	cmp	r3, #7
 8031360:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031362:	dc46      	bgt.n	80313f2 <_svfprintf_r+0xe82>
 8031364:	3408      	adds	r4, #8
 8031366:	9904      	ldr	r1, [sp, #16]
 8031368:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803136a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 803136c:	430b      	orrs	r3, r1
 803136e:	f005 0101 	and.w	r1, r5, #1
 8031372:	430b      	orrs	r3, r1
 8031374:	f43f ad06 	beq.w	8030d84 <_svfprintf_r+0x814>
 8031378:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803137a:	6023      	str	r3, [r4, #0]
 803137c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803137e:	6063      	str	r3, [r4, #4]
 8031380:	441a      	add	r2, r3
 8031382:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031384:	9228      	str	r2, [sp, #160]	@ 0xa0
 8031386:	3301      	adds	r3, #1
 8031388:	2b07      	cmp	r3, #7
 803138a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803138c:	dc3b      	bgt.n	8031406 <_svfprintf_r+0xe96>
 803138e:	f104 0308 	add.w	r3, r4, #8
 8031392:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8031394:	2e00      	cmp	r6, #0
 8031396:	da1b      	bge.n	80313d0 <_svfprintf_r+0xe60>
 8031398:	4f2a      	ldr	r7, [pc, #168]	@ (8031444 <_svfprintf_r+0xed4>)
 803139a:	4276      	negs	r6, r6
 803139c:	461a      	mov	r2, r3
 803139e:	2410      	movs	r4, #16
 80313a0:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 80313a4:	2e10      	cmp	r6, #16
 80313a6:	f101 0101 	add.w	r1, r1, #1
 80313aa:	f103 0308 	add.w	r3, r3, #8
 80313ae:	6017      	str	r7, [r2, #0]
 80313b0:	dc33      	bgt.n	803141a <_svfprintf_r+0xeaa>
 80313b2:	6056      	str	r6, [r2, #4]
 80313b4:	2907      	cmp	r1, #7
 80313b6:	4406      	add	r6, r0
 80313b8:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 80313bc:	dd08      	ble.n	80313d0 <_svfprintf_r+0xe60>
 80313be:	9803      	ldr	r0, [sp, #12]
 80313c0:	aa26      	add	r2, sp, #152	@ 0x98
 80313c2:	4659      	mov	r1, fp
 80313c4:	f7fd fc5c 	bl	802ec80 <__ssprint_r>
 80313c8:	2800      	cmp	r0, #0
 80313ca:	f040 824c 	bne.w	8031866 <_svfprintf_r+0x12f6>
 80313ce:	ab29      	add	r3, sp, #164	@ 0xa4
 80313d0:	9a04      	ldr	r2, [sp, #16]
 80313d2:	9904      	ldr	r1, [sp, #16]
 80313d4:	605a      	str	r2, [r3, #4]
 80313d6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80313d8:	f8c3 9000 	str.w	r9, [r3]
 80313dc:	440a      	add	r2, r1
 80313de:	9228      	str	r2, [sp, #160]	@ 0xa0
 80313e0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80313e2:	3201      	adds	r2, #1
 80313e4:	2a07      	cmp	r2, #7
 80313e6:	9227      	str	r2, [sp, #156]	@ 0x9c
 80313e8:	f73f af7c 	bgt.w	80312e4 <_svfprintf_r+0xd74>
 80313ec:	f103 0408 	add.w	r4, r3, #8
 80313f0:	e4c8      	b.n	8030d84 <_svfprintf_r+0x814>
 80313f2:	9803      	ldr	r0, [sp, #12]
 80313f4:	aa26      	add	r2, sp, #152	@ 0x98
 80313f6:	4659      	mov	r1, fp
 80313f8:	f7fd fc42 	bl	802ec80 <__ssprint_r>
 80313fc:	2800      	cmp	r0, #0
 80313fe:	f040 8232 	bne.w	8031866 <_svfprintf_r+0x12f6>
 8031402:	ac29      	add	r4, sp, #164	@ 0xa4
 8031404:	e7af      	b.n	8031366 <_svfprintf_r+0xdf6>
 8031406:	9803      	ldr	r0, [sp, #12]
 8031408:	aa26      	add	r2, sp, #152	@ 0x98
 803140a:	4659      	mov	r1, fp
 803140c:	f7fd fc38 	bl	802ec80 <__ssprint_r>
 8031410:	2800      	cmp	r0, #0
 8031412:	f040 8228 	bne.w	8031866 <_svfprintf_r+0x12f6>
 8031416:	ab29      	add	r3, sp, #164	@ 0xa4
 8031418:	e7bb      	b.n	8031392 <_svfprintf_r+0xe22>
 803141a:	3010      	adds	r0, #16
 803141c:	2907      	cmp	r1, #7
 803141e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8031422:	6054      	str	r4, [r2, #4]
 8031424:	dd08      	ble.n	8031438 <_svfprintf_r+0xec8>
 8031426:	9803      	ldr	r0, [sp, #12]
 8031428:	aa26      	add	r2, sp, #152	@ 0x98
 803142a:	4659      	mov	r1, fp
 803142c:	f7fd fc28 	bl	802ec80 <__ssprint_r>
 8031430:	2800      	cmp	r0, #0
 8031432:	f040 8218 	bne.w	8031866 <_svfprintf_r+0x12f6>
 8031436:	ab29      	add	r3, sp, #164	@ 0xa4
 8031438:	3e10      	subs	r6, #16
 803143a:	461a      	mov	r2, r3
 803143c:	e7b0      	b.n	80313a0 <_svfprintf_r+0xe30>
 803143e:	bf00      	nop
 8031440:	0803b03d 	.word	0x0803b03d
 8031444:	0803b582 	.word	0x0803b582
 8031448:	9b04      	ldr	r3, [sp, #16]
 803144a:	444b      	add	r3, r9
 803144c:	9306      	str	r3, [sp, #24]
 803144e:	9b04      	ldr	r3, [sp, #16]
 8031450:	42b3      	cmp	r3, r6
 8031452:	bfa8      	it	ge
 8031454:	4633      	movge	r3, r6
 8031456:	2b00      	cmp	r3, #0
 8031458:	4698      	mov	r8, r3
 803145a:	dd0b      	ble.n	8031474 <_svfprintf_r+0xf04>
 803145c:	e9c4 9300 	strd	r9, r3, [r4]
 8031460:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031462:	4443      	add	r3, r8
 8031464:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031466:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031468:	3301      	adds	r3, #1
 803146a:	2b07      	cmp	r3, #7
 803146c:	9327      	str	r3, [sp, #156]	@ 0x9c
 803146e:	f300 8089 	bgt.w	8031584 <_svfprintf_r+0x1014>
 8031472:	3408      	adds	r4, #8
 8031474:	4643      	mov	r3, r8
 8031476:	2b00      	cmp	r3, #0
 8031478:	bfac      	ite	ge
 803147a:	eba6 0808 	subge.w	r8, r6, r8
 803147e:	46b0      	movlt	r8, r6
 8031480:	f1b8 0f00 	cmp.w	r8, #0
 8031484:	dd1b      	ble.n	80314be <_svfprintf_r+0xf4e>
 8031486:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 803148a:	4897      	ldr	r0, [pc, #604]	@ (80316e8 <_svfprintf_r+0x1178>)
 803148c:	6020      	str	r0, [r4, #0]
 803148e:	f1b8 0f10 	cmp.w	r8, #16
 8031492:	f102 0201 	add.w	r2, r2, #1
 8031496:	f104 0108 	add.w	r1, r4, #8
 803149a:	dc7d      	bgt.n	8031598 <_svfprintf_r+0x1028>
 803149c:	4443      	add	r3, r8
 803149e:	2a07      	cmp	r2, #7
 80314a0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80314a4:	f8c4 8004 	str.w	r8, [r4, #4]
 80314a8:	f340 808a 	ble.w	80315c0 <_svfprintf_r+0x1050>
 80314ac:	9803      	ldr	r0, [sp, #12]
 80314ae:	aa26      	add	r2, sp, #152	@ 0x98
 80314b0:	4659      	mov	r1, fp
 80314b2:	f7fd fbe5 	bl	802ec80 <__ssprint_r>
 80314b6:	2800      	cmp	r0, #0
 80314b8:	f040 81d5 	bne.w	8031866 <_svfprintf_r+0x12f6>
 80314bc:	ac29      	add	r4, sp, #164	@ 0xa4
 80314be:	eb09 0806 	add.w	r8, r9, r6
 80314c2:	056e      	lsls	r6, r5, #21
 80314c4:	d508      	bpl.n	80314d8 <_svfprintf_r+0xf68>
 80314c6:	9b08      	ldr	r3, [sp, #32]
 80314c8:	2b00      	cmp	r3, #0
 80314ca:	d17b      	bne.n	80315c4 <_svfprintf_r+0x1054>
 80314cc:	2f00      	cmp	r7, #0
 80314ce:	d17b      	bne.n	80315c8 <_svfprintf_r+0x1058>
 80314d0:	9b06      	ldr	r3, [sp, #24]
 80314d2:	4598      	cmp	r8, r3
 80314d4:	bf28      	it	cs
 80314d6:	4698      	movcs	r8, r3
 80314d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80314da:	9a04      	ldr	r2, [sp, #16]
 80314dc:	4293      	cmp	r3, r2
 80314de:	db01      	blt.n	80314e4 <_svfprintf_r+0xf74>
 80314e0:	07e8      	lsls	r0, r5, #31
 80314e2:	d50e      	bpl.n	8031502 <_svfprintf_r+0xf92>
 80314e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80314e6:	6023      	str	r3, [r4, #0]
 80314e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80314ea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80314ec:	6063      	str	r3, [r4, #4]
 80314ee:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80314f0:	4413      	add	r3, r2
 80314f2:	9328      	str	r3, [sp, #160]	@ 0xa0
 80314f4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80314f6:	3301      	adds	r3, #1
 80314f8:	2b07      	cmp	r3, #7
 80314fa:	9327      	str	r3, [sp, #156]	@ 0x9c
 80314fc:	f300 80df 	bgt.w	80316be <_svfprintf_r+0x114e>
 8031500:	3408      	adds	r4, #8
 8031502:	9b04      	ldr	r3, [sp, #16]
 8031504:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8031506:	1bdf      	subs	r7, r3, r7
 8031508:	9b06      	ldr	r3, [sp, #24]
 803150a:	eba3 0308 	sub.w	r3, r3, r8
 803150e:	429f      	cmp	r7, r3
 8031510:	bfa8      	it	ge
 8031512:	461f      	movge	r7, r3
 8031514:	2f00      	cmp	r7, #0
 8031516:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031518:	dd0a      	ble.n	8031530 <_svfprintf_r+0xfc0>
 803151a:	443b      	add	r3, r7
 803151c:	9328      	str	r3, [sp, #160]	@ 0xa0
 803151e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031520:	3301      	adds	r3, #1
 8031522:	2b07      	cmp	r3, #7
 8031524:	e9c4 8700 	strd	r8, r7, [r4]
 8031528:	9327      	str	r3, [sp, #156]	@ 0x9c
 803152a:	f300 80d2 	bgt.w	80316d2 <_svfprintf_r+0x1162>
 803152e:	3408      	adds	r4, #8
 8031530:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8031532:	9b04      	ldr	r3, [sp, #16]
 8031534:	2f00      	cmp	r7, #0
 8031536:	eba3 0606 	sub.w	r6, r3, r6
 803153a:	bfa8      	it	ge
 803153c:	1bf6      	subge	r6, r6, r7
 803153e:	2e00      	cmp	r6, #0
 8031540:	f77f ac20 	ble.w	8030d84 <_svfprintf_r+0x814>
 8031544:	4f68      	ldr	r7, [pc, #416]	@ (80316e8 <_svfprintf_r+0x1178>)
 8031546:	f04f 0810 	mov.w	r8, #16
 803154a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803154e:	2e10      	cmp	r6, #16
 8031550:	f103 0301 	add.w	r3, r3, #1
 8031554:	f104 0108 	add.w	r1, r4, #8
 8031558:	6027      	str	r7, [r4, #0]
 803155a:	f77f aebc 	ble.w	80312d6 <_svfprintf_r+0xd66>
 803155e:	3210      	adds	r2, #16
 8031560:	2b07      	cmp	r3, #7
 8031562:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031566:	f8c4 8004 	str.w	r8, [r4, #4]
 803156a:	dd08      	ble.n	803157e <_svfprintf_r+0x100e>
 803156c:	9803      	ldr	r0, [sp, #12]
 803156e:	aa26      	add	r2, sp, #152	@ 0x98
 8031570:	4659      	mov	r1, fp
 8031572:	f7fd fb85 	bl	802ec80 <__ssprint_r>
 8031576:	2800      	cmp	r0, #0
 8031578:	f040 8175 	bne.w	8031866 <_svfprintf_r+0x12f6>
 803157c:	a929      	add	r1, sp, #164	@ 0xa4
 803157e:	3e10      	subs	r6, #16
 8031580:	460c      	mov	r4, r1
 8031582:	e7e2      	b.n	803154a <_svfprintf_r+0xfda>
 8031584:	9803      	ldr	r0, [sp, #12]
 8031586:	aa26      	add	r2, sp, #152	@ 0x98
 8031588:	4659      	mov	r1, fp
 803158a:	f7fd fb79 	bl	802ec80 <__ssprint_r>
 803158e:	2800      	cmp	r0, #0
 8031590:	f040 8169 	bne.w	8031866 <_svfprintf_r+0x12f6>
 8031594:	ac29      	add	r4, sp, #164	@ 0xa4
 8031596:	e76d      	b.n	8031474 <_svfprintf_r+0xf04>
 8031598:	2010      	movs	r0, #16
 803159a:	4403      	add	r3, r0
 803159c:	2a07      	cmp	r2, #7
 803159e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80315a2:	6060      	str	r0, [r4, #4]
 80315a4:	dd08      	ble.n	80315b8 <_svfprintf_r+0x1048>
 80315a6:	9803      	ldr	r0, [sp, #12]
 80315a8:	aa26      	add	r2, sp, #152	@ 0x98
 80315aa:	4659      	mov	r1, fp
 80315ac:	f7fd fb68 	bl	802ec80 <__ssprint_r>
 80315b0:	2800      	cmp	r0, #0
 80315b2:	f040 8158 	bne.w	8031866 <_svfprintf_r+0x12f6>
 80315b6:	a929      	add	r1, sp, #164	@ 0xa4
 80315b8:	f1a8 0810 	sub.w	r8, r8, #16
 80315bc:	460c      	mov	r4, r1
 80315be:	e762      	b.n	8031486 <_svfprintf_r+0xf16>
 80315c0:	460c      	mov	r4, r1
 80315c2:	e77c      	b.n	80314be <_svfprintf_r+0xf4e>
 80315c4:	2f00      	cmp	r7, #0
 80315c6:	d04a      	beq.n	803165e <_svfprintf_r+0x10ee>
 80315c8:	3f01      	subs	r7, #1
 80315ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80315cc:	6023      	str	r3, [r4, #0]
 80315ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80315d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80315d2:	6063      	str	r3, [r4, #4]
 80315d4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80315d6:	4413      	add	r3, r2
 80315d8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80315da:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80315dc:	3301      	adds	r3, #1
 80315de:	2b07      	cmp	r3, #7
 80315e0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80315e2:	dc43      	bgt.n	803166c <_svfprintf_r+0x10fc>
 80315e4:	3408      	adds	r4, #8
 80315e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80315e8:	781a      	ldrb	r2, [r3, #0]
 80315ea:	9b06      	ldr	r3, [sp, #24]
 80315ec:	eba3 0308 	sub.w	r3, r3, r8
 80315f0:	429a      	cmp	r2, r3
 80315f2:	bfa8      	it	ge
 80315f4:	461a      	movge	r2, r3
 80315f6:	2a00      	cmp	r2, #0
 80315f8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80315fa:	4691      	mov	r9, r2
 80315fc:	dd09      	ble.n	8031612 <_svfprintf_r+0x10a2>
 80315fe:	4413      	add	r3, r2
 8031600:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031602:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031604:	3301      	adds	r3, #1
 8031606:	2b07      	cmp	r3, #7
 8031608:	e9c4 8200 	strd	r8, r2, [r4]
 803160c:	9327      	str	r3, [sp, #156]	@ 0x9c
 803160e:	dc37      	bgt.n	8031680 <_svfprintf_r+0x1110>
 8031610:	3408      	adds	r4, #8
 8031612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031614:	781e      	ldrb	r6, [r3, #0]
 8031616:	f1b9 0f00 	cmp.w	r9, #0
 803161a:	bfa8      	it	ge
 803161c:	eba6 0609 	subge.w	r6, r6, r9
 8031620:	2e00      	cmp	r6, #0
 8031622:	dd18      	ble.n	8031656 <_svfprintf_r+0x10e6>
 8031624:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031628:	482f      	ldr	r0, [pc, #188]	@ (80316e8 <_svfprintf_r+0x1178>)
 803162a:	6020      	str	r0, [r4, #0]
 803162c:	2e10      	cmp	r6, #16
 803162e:	f103 0301 	add.w	r3, r3, #1
 8031632:	f104 0108 	add.w	r1, r4, #8
 8031636:	dc2d      	bgt.n	8031694 <_svfprintf_r+0x1124>
 8031638:	6066      	str	r6, [r4, #4]
 803163a:	2b07      	cmp	r3, #7
 803163c:	4416      	add	r6, r2
 803163e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8031642:	dd3a      	ble.n	80316ba <_svfprintf_r+0x114a>
 8031644:	9803      	ldr	r0, [sp, #12]
 8031646:	aa26      	add	r2, sp, #152	@ 0x98
 8031648:	4659      	mov	r1, fp
 803164a:	f7fd fb19 	bl	802ec80 <__ssprint_r>
 803164e:	2800      	cmp	r0, #0
 8031650:	f040 8109 	bne.w	8031866 <_svfprintf_r+0x12f6>
 8031654:	ac29      	add	r4, sp, #164	@ 0xa4
 8031656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031658:	781b      	ldrb	r3, [r3, #0]
 803165a:	4498      	add	r8, r3
 803165c:	e733      	b.n	80314c6 <_svfprintf_r+0xf56>
 803165e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031660:	3b01      	subs	r3, #1
 8031662:	9309      	str	r3, [sp, #36]	@ 0x24
 8031664:	9b08      	ldr	r3, [sp, #32]
 8031666:	3b01      	subs	r3, #1
 8031668:	9308      	str	r3, [sp, #32]
 803166a:	e7ae      	b.n	80315ca <_svfprintf_r+0x105a>
 803166c:	9803      	ldr	r0, [sp, #12]
 803166e:	aa26      	add	r2, sp, #152	@ 0x98
 8031670:	4659      	mov	r1, fp
 8031672:	f7fd fb05 	bl	802ec80 <__ssprint_r>
 8031676:	2800      	cmp	r0, #0
 8031678:	f040 80f5 	bne.w	8031866 <_svfprintf_r+0x12f6>
 803167c:	ac29      	add	r4, sp, #164	@ 0xa4
 803167e:	e7b2      	b.n	80315e6 <_svfprintf_r+0x1076>
 8031680:	9803      	ldr	r0, [sp, #12]
 8031682:	aa26      	add	r2, sp, #152	@ 0x98
 8031684:	4659      	mov	r1, fp
 8031686:	f7fd fafb 	bl	802ec80 <__ssprint_r>
 803168a:	2800      	cmp	r0, #0
 803168c:	f040 80eb 	bne.w	8031866 <_svfprintf_r+0x12f6>
 8031690:	ac29      	add	r4, sp, #164	@ 0xa4
 8031692:	e7be      	b.n	8031612 <_svfprintf_r+0x10a2>
 8031694:	2010      	movs	r0, #16
 8031696:	4402      	add	r2, r0
 8031698:	2b07      	cmp	r3, #7
 803169a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803169e:	6060      	str	r0, [r4, #4]
 80316a0:	dd08      	ble.n	80316b4 <_svfprintf_r+0x1144>
 80316a2:	9803      	ldr	r0, [sp, #12]
 80316a4:	aa26      	add	r2, sp, #152	@ 0x98
 80316a6:	4659      	mov	r1, fp
 80316a8:	f7fd faea 	bl	802ec80 <__ssprint_r>
 80316ac:	2800      	cmp	r0, #0
 80316ae:	f040 80da 	bne.w	8031866 <_svfprintf_r+0x12f6>
 80316b2:	a929      	add	r1, sp, #164	@ 0xa4
 80316b4:	3e10      	subs	r6, #16
 80316b6:	460c      	mov	r4, r1
 80316b8:	e7b4      	b.n	8031624 <_svfprintf_r+0x10b4>
 80316ba:	460c      	mov	r4, r1
 80316bc:	e7cb      	b.n	8031656 <_svfprintf_r+0x10e6>
 80316be:	9803      	ldr	r0, [sp, #12]
 80316c0:	aa26      	add	r2, sp, #152	@ 0x98
 80316c2:	4659      	mov	r1, fp
 80316c4:	f7fd fadc 	bl	802ec80 <__ssprint_r>
 80316c8:	2800      	cmp	r0, #0
 80316ca:	f040 80cc 	bne.w	8031866 <_svfprintf_r+0x12f6>
 80316ce:	ac29      	add	r4, sp, #164	@ 0xa4
 80316d0:	e717      	b.n	8031502 <_svfprintf_r+0xf92>
 80316d2:	9803      	ldr	r0, [sp, #12]
 80316d4:	aa26      	add	r2, sp, #152	@ 0x98
 80316d6:	4659      	mov	r1, fp
 80316d8:	f7fd fad2 	bl	802ec80 <__ssprint_r>
 80316dc:	2800      	cmp	r0, #0
 80316de:	f040 80c2 	bne.w	8031866 <_svfprintf_r+0x12f6>
 80316e2:	ac29      	add	r4, sp, #164	@ 0xa4
 80316e4:	e724      	b.n	8031530 <_svfprintf_r+0xfc0>
 80316e6:	bf00      	nop
 80316e8:	0803b582 	.word	0x0803b582
 80316ec:	9904      	ldr	r1, [sp, #16]
 80316ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80316f0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80316f2:	2901      	cmp	r1, #1
 80316f4:	f103 0301 	add.w	r3, r3, #1
 80316f8:	f102 0201 	add.w	r2, r2, #1
 80316fc:	f104 0608 	add.w	r6, r4, #8
 8031700:	dc02      	bgt.n	8031708 <_svfprintf_r+0x1198>
 8031702:	07e9      	lsls	r1, r5, #31
 8031704:	f140 8083 	bpl.w	803180e <_svfprintf_r+0x129e>
 8031708:	2101      	movs	r1, #1
 803170a:	2a07      	cmp	r2, #7
 803170c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031710:	f8c4 9000 	str.w	r9, [r4]
 8031714:	6061      	str	r1, [r4, #4]
 8031716:	dd08      	ble.n	803172a <_svfprintf_r+0x11ba>
 8031718:	9803      	ldr	r0, [sp, #12]
 803171a:	aa26      	add	r2, sp, #152	@ 0x98
 803171c:	4659      	mov	r1, fp
 803171e:	f7fd faaf 	bl	802ec80 <__ssprint_r>
 8031722:	2800      	cmp	r0, #0
 8031724:	f040 809f 	bne.w	8031866 <_svfprintf_r+0x12f6>
 8031728:	ae29      	add	r6, sp, #164	@ 0xa4
 803172a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803172c:	6033      	str	r3, [r6, #0]
 803172e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031730:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8031732:	6073      	str	r3, [r6, #4]
 8031734:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031736:	4413      	add	r3, r2
 8031738:	9328      	str	r3, [sp, #160]	@ 0xa0
 803173a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803173c:	3301      	adds	r3, #1
 803173e:	2b07      	cmp	r3, #7
 8031740:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031742:	dc33      	bgt.n	80317ac <_svfprintf_r+0x123c>
 8031744:	3608      	adds	r6, #8
 8031746:	9b04      	ldr	r3, [sp, #16]
 8031748:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803174c:	1e5c      	subs	r4, r3, #1
 803174e:	2200      	movs	r2, #0
 8031750:	2300      	movs	r3, #0
 8031752:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 8031756:	f7df f9cf 	bl	8010af8 <__aeabi_dcmpeq>
 803175a:	2800      	cmp	r0, #0
 803175c:	d12f      	bne.n	80317be <_svfprintf_r+0x124e>
 803175e:	f109 0201 	add.w	r2, r9, #1
 8031762:	e9c6 2400 	strd	r2, r4, [r6]
 8031766:	9a04      	ldr	r2, [sp, #16]
 8031768:	f108 0301 	add.w	r3, r8, #1
 803176c:	3f01      	subs	r7, #1
 803176e:	4417      	add	r7, r2
 8031770:	2b07      	cmp	r3, #7
 8031772:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8031776:	dd53      	ble.n	8031820 <_svfprintf_r+0x12b0>
 8031778:	9803      	ldr	r0, [sp, #12]
 803177a:	aa26      	add	r2, sp, #152	@ 0x98
 803177c:	4659      	mov	r1, fp
 803177e:	f7fd fa7f 	bl	802ec80 <__ssprint_r>
 8031782:	2800      	cmp	r0, #0
 8031784:	d16f      	bne.n	8031866 <_svfprintf_r+0x12f6>
 8031786:	ae29      	add	r6, sp, #164	@ 0xa4
 8031788:	ab22      	add	r3, sp, #136	@ 0x88
 803178a:	6033      	str	r3, [r6, #0]
 803178c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 803178e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8031790:	6073      	str	r3, [r6, #4]
 8031792:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031794:	4413      	add	r3, r2
 8031796:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031798:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803179a:	3301      	adds	r3, #1
 803179c:	2b07      	cmp	r3, #7
 803179e:	9327      	str	r3, [sp, #156]	@ 0x9c
 80317a0:	f73f ada0 	bgt.w	80312e4 <_svfprintf_r+0xd74>
 80317a4:	f106 0408 	add.w	r4, r6, #8
 80317a8:	f7ff baec 	b.w	8030d84 <_svfprintf_r+0x814>
 80317ac:	9803      	ldr	r0, [sp, #12]
 80317ae:	aa26      	add	r2, sp, #152	@ 0x98
 80317b0:	4659      	mov	r1, fp
 80317b2:	f7fd fa65 	bl	802ec80 <__ssprint_r>
 80317b6:	2800      	cmp	r0, #0
 80317b8:	d155      	bne.n	8031866 <_svfprintf_r+0x12f6>
 80317ba:	ae29      	add	r6, sp, #164	@ 0xa4
 80317bc:	e7c3      	b.n	8031746 <_svfprintf_r+0x11d6>
 80317be:	9b04      	ldr	r3, [sp, #16]
 80317c0:	2b01      	cmp	r3, #1
 80317c2:	dde1      	ble.n	8031788 <_svfprintf_r+0x1218>
 80317c4:	4f57      	ldr	r7, [pc, #348]	@ (8031924 <_svfprintf_r+0x13b4>)
 80317c6:	f04f 0810 	mov.w	r8, #16
 80317ca:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80317ce:	2c10      	cmp	r4, #16
 80317d0:	f103 0301 	add.w	r3, r3, #1
 80317d4:	f106 0108 	add.w	r1, r6, #8
 80317d8:	6037      	str	r7, [r6, #0]
 80317da:	dc07      	bgt.n	80317ec <_svfprintf_r+0x127c>
 80317dc:	6074      	str	r4, [r6, #4]
 80317de:	2b07      	cmp	r3, #7
 80317e0:	4414      	add	r4, r2
 80317e2:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 80317e6:	dcc7      	bgt.n	8031778 <_svfprintf_r+0x1208>
 80317e8:	460e      	mov	r6, r1
 80317ea:	e7cd      	b.n	8031788 <_svfprintf_r+0x1218>
 80317ec:	3210      	adds	r2, #16
 80317ee:	2b07      	cmp	r3, #7
 80317f0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80317f4:	f8c6 8004 	str.w	r8, [r6, #4]
 80317f8:	dd06      	ble.n	8031808 <_svfprintf_r+0x1298>
 80317fa:	9803      	ldr	r0, [sp, #12]
 80317fc:	aa26      	add	r2, sp, #152	@ 0x98
 80317fe:	4659      	mov	r1, fp
 8031800:	f7fd fa3e 	bl	802ec80 <__ssprint_r>
 8031804:	bb78      	cbnz	r0, 8031866 <_svfprintf_r+0x12f6>
 8031806:	a929      	add	r1, sp, #164	@ 0xa4
 8031808:	3c10      	subs	r4, #16
 803180a:	460e      	mov	r6, r1
 803180c:	e7dd      	b.n	80317ca <_svfprintf_r+0x125a>
 803180e:	2101      	movs	r1, #1
 8031810:	2a07      	cmp	r2, #7
 8031812:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031816:	f8c4 9000 	str.w	r9, [r4]
 803181a:	6061      	str	r1, [r4, #4]
 803181c:	ddb4      	ble.n	8031788 <_svfprintf_r+0x1218>
 803181e:	e7ab      	b.n	8031778 <_svfprintf_r+0x1208>
 8031820:	3608      	adds	r6, #8
 8031822:	e7b1      	b.n	8031788 <_svfprintf_r+0x1218>
 8031824:	460c      	mov	r4, r1
 8031826:	f7ff baad 	b.w	8030d84 <_svfprintf_r+0x814>
 803182a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803182c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803182e:	1a9d      	subs	r5, r3, r2
 8031830:	2d00      	cmp	r5, #0
 8031832:	f77f aaaa 	ble.w	8030d8a <_svfprintf_r+0x81a>
 8031836:	4e3c      	ldr	r6, [pc, #240]	@ (8031928 <_svfprintf_r+0x13b8>)
 8031838:	2710      	movs	r7, #16
 803183a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803183e:	2d10      	cmp	r5, #16
 8031840:	f103 0301 	add.w	r3, r3, #1
 8031844:	6026      	str	r6, [r4, #0]
 8031846:	dc18      	bgt.n	803187a <_svfprintf_r+0x130a>
 8031848:	442a      	add	r2, r5
 803184a:	2b07      	cmp	r3, #7
 803184c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031850:	6065      	str	r5, [r4, #4]
 8031852:	f77f aa9a 	ble.w	8030d8a <_svfprintf_r+0x81a>
 8031856:	9803      	ldr	r0, [sp, #12]
 8031858:	aa26      	add	r2, sp, #152	@ 0x98
 803185a:	4659      	mov	r1, fp
 803185c:	f7fd fa10 	bl	802ec80 <__ssprint_r>
 8031860:	2800      	cmp	r0, #0
 8031862:	f43f aa92 	beq.w	8030d8a <_svfprintf_r+0x81a>
 8031866:	f1ba 0f00 	cmp.w	sl, #0
 803186a:	f43f a89a 	beq.w	80309a2 <_svfprintf_r+0x432>
 803186e:	9803      	ldr	r0, [sp, #12]
 8031870:	4651      	mov	r1, sl
 8031872:	f7fc fe43 	bl	802e4fc <_free_r>
 8031876:	f7ff b894 	b.w	80309a2 <_svfprintf_r+0x432>
 803187a:	3210      	adds	r2, #16
 803187c:	2b07      	cmp	r3, #7
 803187e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031882:	6067      	str	r7, [r4, #4]
 8031884:	dc02      	bgt.n	803188c <_svfprintf_r+0x131c>
 8031886:	3408      	adds	r4, #8
 8031888:	3d10      	subs	r5, #16
 803188a:	e7d6      	b.n	803183a <_svfprintf_r+0x12ca>
 803188c:	9803      	ldr	r0, [sp, #12]
 803188e:	aa26      	add	r2, sp, #152	@ 0x98
 8031890:	4659      	mov	r1, fp
 8031892:	f7fd f9f5 	bl	802ec80 <__ssprint_r>
 8031896:	2800      	cmp	r0, #0
 8031898:	d1e5      	bne.n	8031866 <_svfprintf_r+0x12f6>
 803189a:	ac29      	add	r4, sp, #164	@ 0xa4
 803189c:	e7f4      	b.n	8031888 <_svfprintf_r+0x1318>
 803189e:	9803      	ldr	r0, [sp, #12]
 80318a0:	4651      	mov	r1, sl
 80318a2:	f7fc fe2b 	bl	802e4fc <_free_r>
 80318a6:	f7ff ba88 	b.w	8030dba <_svfprintf_r+0x84a>
 80318aa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80318ac:	2b00      	cmp	r3, #0
 80318ae:	f43f a878 	beq.w	80309a2 <_svfprintf_r+0x432>
 80318b2:	9803      	ldr	r0, [sp, #12]
 80318b4:	aa26      	add	r2, sp, #152	@ 0x98
 80318b6:	4659      	mov	r1, fp
 80318b8:	f7fd f9e2 	bl	802ec80 <__ssprint_r>
 80318bc:	f7ff b871 	b.w	80309a2 <_svfprintf_r+0x432>
 80318c0:	ea56 0207 	orrs.w	r2, r6, r7
 80318c4:	9508      	str	r5, [sp, #32]
 80318c6:	f43f ab7a 	beq.w	8030fbe <_svfprintf_r+0xa4e>
 80318ca:	2b01      	cmp	r3, #1
 80318cc:	f43f abfb 	beq.w	80310c6 <_svfprintf_r+0xb56>
 80318d0:	2b02      	cmp	r3, #2
 80318d2:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 80318d6:	f43f ac3f 	beq.w	8031158 <_svfprintf_r+0xbe8>
 80318da:	f006 0307 	and.w	r3, r6, #7
 80318de:	08f6      	lsrs	r6, r6, #3
 80318e0:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 80318e4:	08ff      	lsrs	r7, r7, #3
 80318e6:	3330      	adds	r3, #48	@ 0x30
 80318e8:	ea56 0107 	orrs.w	r1, r6, r7
 80318ec:	464a      	mov	r2, r9
 80318ee:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80318f2:	d1f2      	bne.n	80318da <_svfprintf_r+0x136a>
 80318f4:	9908      	ldr	r1, [sp, #32]
 80318f6:	07c8      	lsls	r0, r1, #31
 80318f8:	d506      	bpl.n	8031908 <_svfprintf_r+0x1398>
 80318fa:	2b30      	cmp	r3, #48	@ 0x30
 80318fc:	d004      	beq.n	8031908 <_svfprintf_r+0x1398>
 80318fe:	2330      	movs	r3, #48	@ 0x30
 8031900:	f809 3c01 	strb.w	r3, [r9, #-1]
 8031904:	f1a2 0902 	sub.w	r9, r2, #2
 8031908:	ab52      	add	r3, sp, #328	@ 0x148
 803190a:	9d08      	ldr	r5, [sp, #32]
 803190c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8031910:	f04f 0a00 	mov.w	sl, #0
 8031914:	eba3 0809 	sub.w	r8, r3, r9
 8031918:	4657      	mov	r7, sl
 803191a:	f8cd a020 	str.w	sl, [sp, #32]
 803191e:	4656      	mov	r6, sl
 8031920:	f7ff b97c 	b.w	8030c1c <_svfprintf_r+0x6ac>
 8031924:	0803b582 	.word	0x0803b582
 8031928:	0803b592 	.word	0x0803b592

0803192c <__swhatbuf_r>:
 803192c:	b570      	push	{r4, r5, r6, lr}
 803192e:	460c      	mov	r4, r1
 8031930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031934:	2900      	cmp	r1, #0
 8031936:	b096      	sub	sp, #88	@ 0x58
 8031938:	4615      	mov	r5, r2
 803193a:	461e      	mov	r6, r3
 803193c:	da07      	bge.n	803194e <__swhatbuf_r+0x22>
 803193e:	89a1      	ldrh	r1, [r4, #12]
 8031940:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8031944:	d117      	bne.n	8031976 <__swhatbuf_r+0x4a>
 8031946:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803194a:	4608      	mov	r0, r1
 803194c:	e00f      	b.n	803196e <__swhatbuf_r+0x42>
 803194e:	466a      	mov	r2, sp
 8031950:	f003 f892 	bl	8034a78 <_fstat_r>
 8031954:	2800      	cmp	r0, #0
 8031956:	dbf2      	blt.n	803193e <__swhatbuf_r+0x12>
 8031958:	9901      	ldr	r1, [sp, #4]
 803195a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 803195e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8031962:	4259      	negs	r1, r3
 8031964:	4159      	adcs	r1, r3
 8031966:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 803196a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803196e:	6031      	str	r1, [r6, #0]
 8031970:	602b      	str	r3, [r5, #0]
 8031972:	b016      	add	sp, #88	@ 0x58
 8031974:	bd70      	pop	{r4, r5, r6, pc}
 8031976:	2100      	movs	r1, #0
 8031978:	2340      	movs	r3, #64	@ 0x40
 803197a:	e7e6      	b.n	803194a <__swhatbuf_r+0x1e>

0803197c <__smakebuf_r>:
 803197c:	898b      	ldrh	r3, [r1, #12]
 803197e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8031980:	079d      	lsls	r5, r3, #30
 8031982:	4606      	mov	r6, r0
 8031984:	460c      	mov	r4, r1
 8031986:	d507      	bpl.n	8031998 <__smakebuf_r+0x1c>
 8031988:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 803198c:	6023      	str	r3, [r4, #0]
 803198e:	6123      	str	r3, [r4, #16]
 8031990:	2301      	movs	r3, #1
 8031992:	6163      	str	r3, [r4, #20]
 8031994:	b003      	add	sp, #12
 8031996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8031998:	ab01      	add	r3, sp, #4
 803199a:	466a      	mov	r2, sp
 803199c:	f7ff ffc6 	bl	803192c <__swhatbuf_r>
 80319a0:	9f00      	ldr	r7, [sp, #0]
 80319a2:	4605      	mov	r5, r0
 80319a4:	4639      	mov	r1, r7
 80319a6:	4630      	mov	r0, r6
 80319a8:	f7fc fec0 	bl	802e72c <_malloc_r>
 80319ac:	b948      	cbnz	r0, 80319c2 <__smakebuf_r+0x46>
 80319ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80319b2:	059a      	lsls	r2, r3, #22
 80319b4:	d4ee      	bmi.n	8031994 <__smakebuf_r+0x18>
 80319b6:	f023 0303 	bic.w	r3, r3, #3
 80319ba:	f043 0302 	orr.w	r3, r3, #2
 80319be:	81a3      	strh	r3, [r4, #12]
 80319c0:	e7e2      	b.n	8031988 <__smakebuf_r+0xc>
 80319c2:	89a3      	ldrh	r3, [r4, #12]
 80319c4:	6020      	str	r0, [r4, #0]
 80319c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80319ca:	81a3      	strh	r3, [r4, #12]
 80319cc:	9b01      	ldr	r3, [sp, #4]
 80319ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80319d2:	b15b      	cbz	r3, 80319ec <__smakebuf_r+0x70>
 80319d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80319d8:	4630      	mov	r0, r6
 80319da:	f003 f85f 	bl	8034a9c <_isatty_r>
 80319de:	b128      	cbz	r0, 80319ec <__smakebuf_r+0x70>
 80319e0:	89a3      	ldrh	r3, [r4, #12]
 80319e2:	f023 0303 	bic.w	r3, r3, #3
 80319e6:	f043 0301 	orr.w	r3, r3, #1
 80319ea:	81a3      	strh	r3, [r4, #12]
 80319ec:	89a3      	ldrh	r3, [r4, #12]
 80319ee:	431d      	orrs	r5, r3
 80319f0:	81a5      	strh	r5, [r4, #12]
 80319f2:	e7cf      	b.n	8031994 <__smakebuf_r+0x18>

080319f4 <__ssvfscanf_r>:
 80319f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80319f8:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 80319fc:	461d      	mov	r5, r3
 80319fe:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8031a02:	af02      	add	r7, sp, #8
 8031a04:	049e      	lsls	r6, r3, #18
 8031a06:	62b8      	str	r0, [r7, #40]	@ 0x28
 8031a08:	460c      	mov	r4, r1
 8031a0a:	617a      	str	r2, [r7, #20]
 8031a0c:	d406      	bmi.n	8031a1c <__ssvfscanf_r+0x28>
 8031a0e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8031a12:	818b      	strh	r3, [r1, #12]
 8031a14:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8031a16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8031a1a:	664b      	str	r3, [r1, #100]	@ 0x64
 8031a1c:	2300      	movs	r3, #0
 8031a1e:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8031a22:	61bb      	str	r3, [r7, #24]
 8031a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8031a26:	633b      	str	r3, [r7, #48]	@ 0x30
 8031a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8031a2a:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8031a2e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8031a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8031a34:	2b00      	cmp	r3, #0
 8031a36:	f000 80d3 	beq.w	8031be0 <__ssvfscanf_r+0x1ec>
 8031a3a:	4a84      	ldr	r2, [pc, #528]	@ (8031c4c <__ssvfscanf_r+0x258>)
 8031a3c:	5cd6      	ldrb	r6, [r2, r3]
 8031a3e:	f016 0608 	ands.w	r6, r6, #8
 8031a42:	d01b      	beq.n	8031a7c <__ssvfscanf_r+0x88>
 8031a44:	6863      	ldr	r3, [r4, #4]
 8031a46:	2b00      	cmp	r3, #0
 8031a48:	dd08      	ble.n	8031a5c <__ssvfscanf_r+0x68>
 8031a4a:	6823      	ldr	r3, [r4, #0]
 8031a4c:	497f      	ldr	r1, [pc, #508]	@ (8031c4c <__ssvfscanf_r+0x258>)
 8031a4e:	781a      	ldrb	r2, [r3, #0]
 8031a50:	5c8a      	ldrb	r2, [r1, r2]
 8031a52:	0710      	lsls	r0, r2, #28
 8031a54:	d409      	bmi.n	8031a6a <__ssvfscanf_r+0x76>
 8031a56:	f8c7 8014 	str.w	r8, [r7, #20]
 8031a5a:	e7e6      	b.n	8031a2a <__ssvfscanf_r+0x36>
 8031a5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031a5e:	4621      	mov	r1, r4
 8031a60:	f7fd fe13 	bl	802f68a <__ssrefill_r>
 8031a64:	2800      	cmp	r0, #0
 8031a66:	d0f0      	beq.n	8031a4a <__ssvfscanf_r+0x56>
 8031a68:	e7f5      	b.n	8031a56 <__ssvfscanf_r+0x62>
 8031a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031a6c:	3201      	adds	r2, #1
 8031a6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8031a70:	6862      	ldr	r2, [r4, #4]
 8031a72:	3301      	adds	r3, #1
 8031a74:	3a01      	subs	r2, #1
 8031a76:	6062      	str	r2, [r4, #4]
 8031a78:	6023      	str	r3, [r4, #0]
 8031a7a:	e7e3      	b.n	8031a44 <__ssvfscanf_r+0x50>
 8031a7c:	2b25      	cmp	r3, #37	@ 0x25
 8031a7e:	d163      	bne.n	8031b48 <__ssvfscanf_r+0x154>
 8031a80:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8031a82:	4642      	mov	r2, r8
 8031a84:	f812 3b01 	ldrb.w	r3, [r2], #1
 8031a88:	617a      	str	r2, [r7, #20]
 8031a8a:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 8031a8e:	2a55      	cmp	r2, #85	@ 0x55
 8031a90:	f200 816e 	bhi.w	8031d70 <__ssvfscanf_r+0x37c>
 8031a94:	e8df f012 	tbh	[pc, r2, lsl #1]
 8031a98:	016c0056 	.word	0x016c0056
 8031a9c:	016c016c 	.word	0x016c016c
 8031aa0:	007d016c 	.word	0x007d016c
 8031aa4:	016c016c 	.word	0x016c016c
 8031aa8:	016c016c 	.word	0x016c016c
 8031aac:	00b9016c 	.word	0x00b9016c
 8031ab0:	00b900b9 	.word	0x00b900b9
 8031ab4:	00b900b9 	.word	0x00b900b9
 8031ab8:	00b900b9 	.word	0x00b900b9
 8031abc:	00b900b9 	.word	0x00b900b9
 8031ac0:	016c00b9 	.word	0x016c00b9
 8031ac4:	016c016c 	.word	0x016c016c
 8031ac8:	016c016c 	.word	0x016c016c
 8031acc:	016c016c 	.word	0x016c016c
 8031ad0:	016c00e0 	.word	0x016c00e0
 8031ad4:	00c3010a 	.word	0x00c3010a
 8031ad8:	00e000e0 	.word	0x00e000e0
 8031adc:	016c00e0 	.word	0x016c00e0
 8031ae0:	016c016c 	.word	0x016c016c
 8031ae4:	00a2016c 	.word	0x00a2016c
 8031ae8:	016c016c 	.word	0x016c016c
 8031aec:	016c00c7 	.word	0x016c00c7
 8031af0:	016c016c 	.word	0x016c016c
 8031af4:	016c00fa 	.word	0x016c00fa
 8031af8:	016c016c 	.word	0x016c016c
 8031afc:	00d4016c 	.word	0x00d4016c
 8031b00:	016c016c 	.word	0x016c016c
 8031b04:	016c00ff 	.word	0x016c00ff
 8031b08:	016c016c 	.word	0x016c016c
 8031b0c:	016c016c 	.word	0x016c016c
 8031b10:	016c00e0 	.word	0x016c00e0
 8031b14:	00c5010c 	.word	0x00c5010c
 8031b18:	00e000e0 	.word	0x00e000e0
 8031b1c:	009400e0 	.word	0x009400e0
 8031b20:	00a20130 	.word	0x00a20130
 8031b24:	0085016c 	.word	0x0085016c
 8031b28:	011400ac 	.word	0x011400ac
 8031b2c:	011100c9 	.word	0x011100c9
 8031b30:	016c016c 	.word	0x016c016c
 8031b34:	00a900fc 	.word	0x00a900fc
 8031b38:	016c00d0 	.word	0x016c00d0
 8031b3c:	00d4016c 	.word	0x00d4016c
 8031b40:	00a9016c 	.word	0x00a9016c
 8031b44:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8031b48:	6863      	ldr	r3, [r4, #4]
 8031b4a:	2b00      	cmp	r3, #0
 8031b4c:	dd0e      	ble.n	8031b6c <__ssvfscanf_r+0x178>
 8031b4e:	6823      	ldr	r3, [r4, #0]
 8031b50:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8031b54:	7819      	ldrb	r1, [r3, #0]
 8031b56:	4291      	cmp	r1, r2
 8031b58:	d142      	bne.n	8031be0 <__ssvfscanf_r+0x1ec>
 8031b5a:	3301      	adds	r3, #1
 8031b5c:	6862      	ldr	r2, [r4, #4]
 8031b5e:	6023      	str	r3, [r4, #0]
 8031b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8031b62:	3a01      	subs	r2, #1
 8031b64:	3301      	adds	r3, #1
 8031b66:	6062      	str	r2, [r4, #4]
 8031b68:	633b      	str	r3, [r7, #48]	@ 0x30
 8031b6a:	e774      	b.n	8031a56 <__ssvfscanf_r+0x62>
 8031b6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031b6e:	4621      	mov	r1, r4
 8031b70:	f7fd fd8b 	bl	802f68a <__ssrefill_r>
 8031b74:	2800      	cmp	r0, #0
 8031b76:	d0ea      	beq.n	8031b4e <__ssvfscanf_r+0x15a>
 8031b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031b7a:	b113      	cbz	r3, 8031b82 <__ssvfscanf_r+0x18e>
 8031b7c:	89a3      	ldrh	r3, [r4, #12]
 8031b7e:	065b      	lsls	r3, r3, #25
 8031b80:	d52e      	bpl.n	8031be0 <__ssvfscanf_r+0x1ec>
 8031b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031b84:	2b00      	cmp	r3, #0
 8031b86:	f041 809d 	bne.w	8032cc4 <__ssvfscanf_r+0x12d0>
 8031b8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8031b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8031b90:	e0f9      	b.n	8031d86 <__ssvfscanf_r+0x392>
 8031b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031b94:	4333      	orrs	r3, r6
 8031b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031b98:	d122      	bne.n	8031be0 <__ssvfscanf_r+0x1ec>
 8031b9a:	2610      	movs	r6, #16
 8031b9c:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8031ba0:	e76f      	b.n	8031a82 <__ssvfscanf_r+0x8e>
 8031ba2:	0731      	lsls	r1, r6, #28
 8031ba4:	d11c      	bne.n	8031be0 <__ssvfscanf_r+0x1ec>
 8031ba6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8031baa:	2b6c      	cmp	r3, #108	@ 0x6c
 8031bac:	d105      	bne.n	8031bba <__ssvfscanf_r+0x1c6>
 8031bae:	f108 0302 	add.w	r3, r8, #2
 8031bb2:	617b      	str	r3, [r7, #20]
 8031bb4:	f046 0602 	orr.w	r6, r6, #2
 8031bb8:	e7f0      	b.n	8031b9c <__ssvfscanf_r+0x1a8>
 8031bba:	f046 0601 	orr.w	r6, r6, #1
 8031bbe:	e7ed      	b.n	8031b9c <__ssvfscanf_r+0x1a8>
 8031bc0:	0732      	lsls	r2, r6, #28
 8031bc2:	d10d      	bne.n	8031be0 <__ssvfscanf_r+0x1ec>
 8031bc4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8031bc8:	2b68      	cmp	r3, #104	@ 0x68
 8031bca:	bf03      	ittte	eq
 8031bcc:	f108 0302 	addeq.w	r3, r8, #2
 8031bd0:	617b      	streq	r3, [r7, #20]
 8031bd2:	f046 0608 	orreq.w	r6, r6, #8
 8031bd6:	f046 0604 	orrne.w	r6, r6, #4
 8031bda:	e7df      	b.n	8031b9c <__ssvfscanf_r+0x1a8>
 8031bdc:	0733      	lsls	r3, r6, #28
 8031bde:	d0e9      	beq.n	8031bb4 <__ssvfscanf_r+0x1c0>
 8031be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031be2:	2b00      	cmp	r3, #0
 8031be4:	f000 80cf 	beq.w	8031d86 <__ssvfscanf_r+0x392>
 8031be8:	e0c8      	b.n	8031d7c <__ssvfscanf_r+0x388>
 8031bea:	0730      	lsls	r0, r6, #28
 8031bec:	d0d6      	beq.n	8031b9c <__ssvfscanf_r+0x1a8>
 8031bee:	e7f7      	b.n	8031be0 <__ssvfscanf_r+0x1ec>
 8031bf0:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 8031bf4:	d1f4      	bne.n	8031be0 <__ssvfscanf_r+0x1ec>
 8031bf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8031bf8:	b922      	cbnz	r2, 8031c04 <__ssvfscanf_r+0x210>
 8031bfa:	b082      	sub	sp, #8
 8031bfc:	aa02      	add	r2, sp, #8
 8031bfe:	e9c2 3300 	strd	r3, r3, [r2]
 8031c02:	637a      	str	r2, [r7, #52]	@ 0x34
 8031c04:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 8031c08:	e7c8      	b.n	8031b9c <__ssvfscanf_r+0x1a8>
 8031c0a:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 8031c0e:	d1e7      	bne.n	8031be0 <__ssvfscanf_r+0x1ec>
 8031c10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8031c12:	220a      	movs	r2, #10
 8031c14:	fb02 3301 	mla	r3, r2, r1, r3
 8031c18:	3b30      	subs	r3, #48	@ 0x30
 8031c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031c1c:	e7be      	b.n	8031b9c <__ssvfscanf_r+0x1a8>
 8031c1e:	f046 0601 	orr.w	r6, r6, #1
 8031c22:	4b0b      	ldr	r3, [pc, #44]	@ (8031c50 <__ssvfscanf_r+0x25c>)
 8031c24:	e009      	b.n	8031c3a <__ssvfscanf_r+0x246>
 8031c26:	f046 0601 	orr.w	r6, r6, #1
 8031c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8031c54 <__ssvfscanf_r+0x260>)
 8031c2c:	61bb      	str	r3, [r7, #24]
 8031c2e:	2308      	movs	r3, #8
 8031c30:	61fb      	str	r3, [r7, #28]
 8031c32:	f04f 0803 	mov.w	r8, #3
 8031c36:	e011      	b.n	8031c5c <__ssvfscanf_r+0x268>
 8031c38:	4b06      	ldr	r3, [pc, #24]	@ (8031c54 <__ssvfscanf_r+0x260>)
 8031c3a:	61bb      	str	r3, [r7, #24]
 8031c3c:	230a      	movs	r3, #10
 8031c3e:	e7f7      	b.n	8031c30 <__ssvfscanf_r+0x23c>
 8031c40:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8031c44:	4b03      	ldr	r3, [pc, #12]	@ (8031c54 <__ssvfscanf_r+0x260>)
 8031c46:	61bb      	str	r3, [r7, #24]
 8031c48:	2310      	movs	r3, #16
 8031c4a:	e7f1      	b.n	8031c30 <__ssvfscanf_r+0x23c>
 8031c4c:	0803b3c9 	.word	0x0803b3c9
 8031c50:	0802b989 	.word	0x0802b989
 8031c54:	08034789 	.word	0x08034789
 8031c58:	f04f 0804 	mov.w	r8, #4
 8031c5c:	6863      	ldr	r3, [r4, #4]
 8031c5e:	2b00      	cmp	r3, #0
 8031c60:	dd4e      	ble.n	8031d00 <__ssvfscanf_r+0x30c>
 8031c62:	0673      	lsls	r3, r6, #25
 8031c64:	d407      	bmi.n	8031c76 <__ssvfscanf_r+0x282>
 8031c66:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 8031f64 <__ssvfscanf_r+0x570>
 8031c6a:	6823      	ldr	r3, [r4, #0]
 8031c6c:	781a      	ldrb	r2, [r3, #0]
 8031c6e:	f819 2002 	ldrb.w	r2, [r9, r2]
 8031c72:	0710      	lsls	r0, r2, #28
 8031c74:	d44b      	bmi.n	8031d0e <__ssvfscanf_r+0x31a>
 8031c76:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8031c7a:	f1b8 0f03 	cmp.w	r8, #3
 8031c7e:	d858      	bhi.n	8031d32 <__ssvfscanf_r+0x33e>
 8031c80:	e8df f018 	tbh	[pc, r8, lsl #1]
 8031c84:	037801c1 	.word	0x037801c1
 8031c88:	05f30514 	.word	0x05f30514
 8031c8c:	f046 0601 	orr.w	r6, r6, #1
 8031c90:	f04f 0802 	mov.w	r8, #2
 8031c94:	e7e2      	b.n	8031c5c <__ssvfscanf_r+0x268>
 8031c96:	6979      	ldr	r1, [r7, #20]
 8031c98:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8031c9c:	f001 fd1d 	bl	80336da <__sccl>
 8031ca0:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8031ca4:	6178      	str	r0, [r7, #20]
 8031ca6:	f04f 0801 	mov.w	r8, #1
 8031caa:	e7d7      	b.n	8031c5c <__ssvfscanf_r+0x268>
 8031cac:	f046 0601 	orr.w	r6, r6, #1
 8031cb0:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8031cb4:	f04f 0800 	mov.w	r8, #0
 8031cb8:	e7d0      	b.n	8031c5c <__ssvfscanf_r+0x268>
 8031cba:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 8031cbe:	e7c1      	b.n	8031c44 <__ssvfscanf_r+0x250>
 8031cc0:	06f1      	lsls	r1, r6, #27
 8031cc2:	f53f aeb2 	bmi.w	8031a2a <__ssvfscanf_r+0x36>
 8031cc6:	0732      	lsls	r2, r6, #28
 8031cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8031ccc:	d502      	bpl.n	8031cd4 <__ssvfscanf_r+0x2e0>
 8031cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031cd0:	701a      	strb	r2, [r3, #0]
 8031cd2:	e6aa      	b.n	8031a2a <__ssvfscanf_r+0x36>
 8031cd4:	0770      	lsls	r0, r6, #29
 8031cd6:	d502      	bpl.n	8031cde <__ssvfscanf_r+0x2ea>
 8031cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031cda:	801a      	strh	r2, [r3, #0]
 8031cdc:	e6a5      	b.n	8031a2a <__ssvfscanf_r+0x36>
 8031cde:	07f1      	lsls	r1, r6, #31
 8031ce0:	d502      	bpl.n	8031ce8 <__ssvfscanf_r+0x2f4>
 8031ce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031ce4:	601a      	str	r2, [r3, #0]
 8031ce6:	e6a0      	b.n	8031a2a <__ssvfscanf_r+0x36>
 8031ce8:	07b2      	lsls	r2, r6, #30
 8031cea:	d5fa      	bpl.n	8031ce2 <__ssvfscanf_r+0x2ee>
 8031cec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031cee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8031cf0:	17d2      	asrs	r2, r2, #31
 8031cf2:	e9c3 1200 	strd	r1, r2, [r3]
 8031cf6:	e698      	b.n	8031a2a <__ssvfscanf_r+0x36>
 8031cf8:	4b99      	ldr	r3, [pc, #612]	@ (8031f60 <__ssvfscanf_r+0x56c>)
 8031cfa:	61bb      	str	r3, [r7, #24]
 8031cfc:	2300      	movs	r3, #0
 8031cfe:	e797      	b.n	8031c30 <__ssvfscanf_r+0x23c>
 8031d00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031d02:	4621      	mov	r1, r4
 8031d04:	f7fd fcc1 	bl	802f68a <__ssrefill_r>
 8031d08:	2800      	cmp	r0, #0
 8031d0a:	d0aa      	beq.n	8031c62 <__ssvfscanf_r+0x26e>
 8031d0c:	e734      	b.n	8031b78 <__ssvfscanf_r+0x184>
 8031d0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031d10:	3201      	adds	r2, #1
 8031d12:	633a      	str	r2, [r7, #48]	@ 0x30
 8031d14:	6862      	ldr	r2, [r4, #4]
 8031d16:	3a01      	subs	r2, #1
 8031d18:	2a00      	cmp	r2, #0
 8031d1a:	6062      	str	r2, [r4, #4]
 8031d1c:	dd02      	ble.n	8031d24 <__ssvfscanf_r+0x330>
 8031d1e:	3301      	adds	r3, #1
 8031d20:	6023      	str	r3, [r4, #0]
 8031d22:	e7a2      	b.n	8031c6a <__ssvfscanf_r+0x276>
 8031d24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031d26:	4621      	mov	r1, r4
 8031d28:	f7fd fcaf 	bl	802f68a <__ssrefill_r>
 8031d2c:	2800      	cmp	r0, #0
 8031d2e:	d09c      	beq.n	8031c6a <__ssvfscanf_r+0x276>
 8031d30:	e722      	b.n	8031b78 <__ssvfscanf_r+0x184>
 8031d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031d34:	2b01      	cmp	r3, #1
 8031d36:	bf38      	it	cc
 8031d38:	2301      	movcc	r3, #1
 8031d3a:	4698      	mov	r8, r3
 8031d3c:	f016 0301 	ands.w	r3, r6, #1
 8031d40:	f006 0b10 	and.w	fp, r6, #16
 8031d44:	f000 80eb 	beq.w	8031f1e <__ssvfscanf_r+0x52a>
 8031d48:	f1bb 0f00 	cmp.w	fp, #0
 8031d4c:	f040 8085 	bne.w	8031e5a <__ssvfscanf_r+0x466>
 8031d50:	462b      	mov	r3, r5
 8031d52:	0631      	lsls	r1, r6, #24
 8031d54:	f853 5b04 	ldr.w	r5, [r3], #4
 8031d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031d5a:	f140 8085 	bpl.w	8031e68 <__ssvfscanf_r+0x474>
 8031d5e:	b13d      	cbz	r5, 8031d70 <__ssvfscanf_r+0x37c>
 8031d60:	2080      	movs	r0, #128	@ 0x80
 8031d62:	f7fc fcd3 	bl	802e70c <malloc>
 8031d66:	4606      	mov	r6, r0
 8031d68:	b998      	cbnz	r0, 8031d92 <__ssvfscanf_r+0x39e>
 8031d6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8031d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8031d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031d72:	b143      	cbz	r3, 8031d86 <__ssvfscanf_r+0x392>
 8031d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031d76:	3301      	adds	r3, #1
 8031d78:	f000 87a4 	beq.w	8032cc4 <__ssvfscanf_r+0x12d0>
 8031d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031d7e:	6818      	ldr	r0, [r3, #0]
 8031d80:	b108      	cbz	r0, 8031d86 <__ssvfscanf_r+0x392>
 8031d82:	f7fc fccb 	bl	802e71c <free>
 8031d86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8031d88:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 8031d8c:	46bd      	mov	sp, r7
 8031d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031d94:	6028      	str	r0, [r5, #0]
 8031d96:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8031d9a:	889b      	ldrh	r3, [r3, #4]
 8031d9c:	4599      	cmp	r9, r3
 8031d9e:	d314      	bcc.n	8031dca <__ssvfscanf_r+0x3d6>
 8031da0:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8031da4:	4293      	cmp	r3, r2
 8031da6:	f200 878d 	bhi.w	8032cc4 <__ssvfscanf_r+0x12d0>
 8031daa:	3308      	adds	r3, #8
 8031dac:	fa1f fa83 	uxth.w	sl, r3
 8031db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031db2:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8031db6:	6818      	ldr	r0, [r3, #0]
 8031db8:	f001 fc32 	bl	8033620 <realloc>
 8031dbc:	2800      	cmp	r0, #0
 8031dbe:	f000 8781 	beq.w	8032cc4 <__ssvfscanf_r+0x12d0>
 8031dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031dc4:	6018      	str	r0, [r3, #0]
 8031dc6:	f8a3 a004 	strh.w	sl, [r3, #4]
 8031dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031dcc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8031dce:	681b      	ldr	r3, [r3, #0]
 8031dd0:	f109 0201 	add.w	r2, r9, #1
 8031dd4:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8031dd8:	46aa      	mov	sl, r5
 8031dda:	80ca      	strh	r2, [r1, #6]
 8031ddc:	4635      	mov	r5, r6
 8031dde:	f04f 0920 	mov.w	r9, #32
 8031de2:	2200      	movs	r2, #0
 8031de4:	613a      	str	r2, [r7, #16]
 8031de6:	f7fb fbd3 	bl	802d590 <__locale_mb_cur_max>
 8031dea:	693a      	ldr	r2, [r7, #16]
 8031dec:	4290      	cmp	r0, r2
 8031dee:	f43f aec3 	beq.w	8031b78 <__ssvfscanf_r+0x184>
 8031df2:	6821      	ldr	r1, [r4, #0]
 8031df4:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 8031df8:	f811 0b01 	ldrb.w	r0, [r1], #1
 8031dfc:	f80c 0002 	strb.w	r0, [ip, r2]
 8031e00:	1c53      	adds	r3, r2, #1
 8031e02:	6862      	ldr	r2, [r4, #4]
 8031e04:	3a01      	subs	r2, #1
 8031e06:	e9c4 1200 	strd	r1, r2, [r4]
 8031e0a:	6a3a      	ldr	r2, [r7, #32]
 8031e0c:	2a03      	cmp	r2, #3
 8031e0e:	d102      	bne.n	8031e16 <__ssvfscanf_r+0x422>
 8031e10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8031e12:	2a04      	cmp	r2, #4
 8031e14:	d007      	beq.n	8031e26 <__ssvfscanf_r+0x432>
 8031e16:	2208      	movs	r2, #8
 8031e18:	2100      	movs	r1, #0
 8031e1a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8031e1e:	623b      	str	r3, [r7, #32]
 8031e20:	f7fa fa2e 	bl	802c280 <memset>
 8031e24:	6a3b      	ldr	r3, [r7, #32]
 8031e26:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8031e2a:	9200      	str	r2, [sp, #0]
 8031e2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031e2e:	613b      	str	r3, [r7, #16]
 8031e30:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8031e34:	4629      	mov	r1, r5
 8031e36:	f002 ffad 	bl	8034d94 <_mbrtowc_r>
 8031e3a:	1c42      	adds	r2, r0, #1
 8031e3c:	6238      	str	r0, [r7, #32]
 8031e3e:	f43f ae9b 	beq.w	8031b78 <__ssvfscanf_r+0x184>
 8031e42:	693b      	ldr	r3, [r7, #16]
 8031e44:	b9b8      	cbnz	r0, 8031e76 <__ssvfscanf_r+0x482>
 8031e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031e48:	441a      	add	r2, r3
 8031e4a:	4613      	mov	r3, r2
 8031e4c:	f1bb 0f00 	cmp.w	fp, #0
 8031e50:	d00e      	beq.n	8031e70 <__ssvfscanf_r+0x47c>
 8031e52:	633b      	str	r3, [r7, #48]	@ 0x30
 8031e54:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8031e58:	e019      	b.n	8031e8e <__ssvfscanf_r+0x49a>
 8031e5a:	f04f 0900 	mov.w	r9, #0
 8031e5e:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8031e60:	464e      	mov	r6, r9
 8031e62:	46ca      	mov	sl, r9
 8031e64:	464d      	mov	r5, r9
 8031e66:	e7bc      	b.n	8031de2 <__ssvfscanf_r+0x3ee>
 8031e68:	46d9      	mov	r9, fp
 8031e6a:	465e      	mov	r6, fp
 8031e6c:	46da      	mov	sl, fp
 8031e6e:	e7b8      	b.n	8031de2 <__ssvfscanf_r+0x3ee>
 8031e70:	f8c5 b000 	str.w	fp, [r5]
 8031e74:	e7ed      	b.n	8031e52 <__ssvfscanf_r+0x45e>
 8031e76:	6a3a      	ldr	r2, [r7, #32]
 8031e78:	3202      	adds	r2, #2
 8031e7a:	d025      	beq.n	8031ec8 <__ssvfscanf_r+0x4d4>
 8031e7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031e7e:	441a      	add	r2, r3
 8031e80:	6a3b      	ldr	r3, [r7, #32]
 8031e82:	633a      	str	r2, [r7, #48]	@ 0x30
 8031e84:	2b03      	cmp	r3, #3
 8031e86:	d1e5      	bne.n	8031e54 <__ssvfscanf_r+0x460>
 8031e88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8031e8a:	2b04      	cmp	r3, #4
 8031e8c:	d1e2      	bne.n	8031e54 <__ssvfscanf_r+0x460>
 8031e8e:	f1bb 0f00 	cmp.w	fp, #0
 8031e92:	d117      	bne.n	8031ec4 <__ssvfscanf_r+0x4d0>
 8031e94:	f1ba 0f00 	cmp.w	sl, #0
 8031e98:	d013      	beq.n	8031ec2 <__ssvfscanf_r+0x4ce>
 8031e9a:	1bab      	subs	r3, r5, r6
 8031e9c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8031ea0:	d80f      	bhi.n	8031ec2 <__ssvfscanf_r+0x4ce>
 8031ea2:	4630      	mov	r0, r6
 8031ea4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8031ea8:	613b      	str	r3, [r7, #16]
 8031eaa:	f001 fbb9 	bl	8033620 <realloc>
 8031eae:	4606      	mov	r6, r0
 8031eb0:	2800      	cmp	r0, #0
 8031eb2:	f43f af5a 	beq.w	8031d6a <__ssvfscanf_r+0x376>
 8031eb6:	693b      	ldr	r3, [r7, #16]
 8031eb8:	f8ca 0000 	str.w	r0, [sl]
 8031ebc:	18c5      	adds	r5, r0, r3
 8031ebe:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8031ec2:	3504      	adds	r5, #4
 8031ec4:	2200      	movs	r2, #0
 8031ec6:	e000      	b.n	8031eca <__ssvfscanf_r+0x4d6>
 8031ec8:	461a      	mov	r2, r3
 8031eca:	6863      	ldr	r3, [r4, #4]
 8031ecc:	2b00      	cmp	r3, #0
 8031ece:	dc14      	bgt.n	8031efa <__ssvfscanf_r+0x506>
 8031ed0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031ed2:	613a      	str	r2, [r7, #16]
 8031ed4:	4621      	mov	r1, r4
 8031ed6:	f7fd fbd8 	bl	802f68a <__ssrefill_r>
 8031eda:	693a      	ldr	r2, [r7, #16]
 8031edc:	b168      	cbz	r0, 8031efa <__ssvfscanf_r+0x506>
 8031ede:	2a00      	cmp	r2, #0
 8031ee0:	f47f ae4a 	bne.w	8031b78 <__ssvfscanf_r+0x184>
 8031ee4:	f1ba 0f00 	cmp.w	sl, #0
 8031ee8:	d10c      	bne.n	8031f04 <__ssvfscanf_r+0x510>
 8031eea:	f1bb 0f00 	cmp.w	fp, #0
 8031eee:	d102      	bne.n	8031ef6 <__ssvfscanf_r+0x502>
 8031ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031ef2:	3301      	adds	r3, #1
 8031ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8031ef6:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8031ef8:	e597      	b.n	8031a2a <__ssvfscanf_r+0x36>
 8031efa:	f1b8 0f00 	cmp.w	r8, #0
 8031efe:	f47f af71 	bne.w	8031de4 <__ssvfscanf_r+0x3f0>
 8031f02:	e7ef      	b.n	8031ee4 <__ssvfscanf_r+0x4f0>
 8031f04:	1ba9      	subs	r1, r5, r6
 8031f06:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8031f0a:	d9ee      	bls.n	8031eea <__ssvfscanf_r+0x4f6>
 8031f0c:	f8da 0000 	ldr.w	r0, [sl]
 8031f10:	f001 fb86 	bl	8033620 <realloc>
 8031f14:	2800      	cmp	r0, #0
 8031f16:	d0e8      	beq.n	8031eea <__ssvfscanf_r+0x4f6>
 8031f18:	f8ca 0000 	str.w	r0, [sl]
 8031f1c:	e7e5      	b.n	8031eea <__ssvfscanf_r+0x4f6>
 8031f1e:	f1bb 0f00 	cmp.w	fp, #0
 8031f22:	d021      	beq.n	8031f68 <__ssvfscanf_r+0x574>
 8031f24:	461e      	mov	r6, r3
 8031f26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8031f2a:	4598      	cmp	r8, r3
 8031f2c:	dd11      	ble.n	8031f52 <__ssvfscanf_r+0x55e>
 8031f2e:	441a      	add	r2, r3
 8031f30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031f32:	6022      	str	r2, [r4, #0]
 8031f34:	4621      	mov	r1, r4
 8031f36:	441e      	add	r6, r3
 8031f38:	eba8 0803 	sub.w	r8, r8, r3
 8031f3c:	f7fd fba5 	bl	802f68a <__ssrefill_r>
 8031f40:	2800      	cmp	r0, #0
 8031f42:	d0f0      	beq.n	8031f26 <__ssvfscanf_r+0x532>
 8031f44:	2e00      	cmp	r6, #0
 8031f46:	f43f ae17 	beq.w	8031b78 <__ssvfscanf_r+0x184>
 8031f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8031f4c:	4433      	add	r3, r6
 8031f4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8031f50:	e56b      	b.n	8031a2a <__ssvfscanf_r+0x36>
 8031f52:	eba3 0308 	sub.w	r3, r3, r8
 8031f56:	4442      	add	r2, r8
 8031f58:	4446      	add	r6, r8
 8031f5a:	6063      	str	r3, [r4, #4]
 8031f5c:	6022      	str	r2, [r4, #0]
 8031f5e:	e7f4      	b.n	8031f4a <__ssvfscanf_r+0x556>
 8031f60:	0802b989 	.word	0x0802b989
 8031f64:	0803b3c9 	.word	0x0803b3c9
 8031f68:	46a9      	mov	r9, r5
 8031f6a:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8031f6e:	f859 5b04 	ldr.w	r5, [r9], #4
 8031f72:	d02c      	beq.n	8031fce <__ssvfscanf_r+0x5da>
 8031f74:	2d00      	cmp	r5, #0
 8031f76:	f43f ae33 	beq.w	8031be0 <__ssvfscanf_r+0x1ec>
 8031f7a:	4640      	mov	r0, r8
 8031f7c:	f7fc fbc6 	bl	802e70c <malloc>
 8031f80:	4682      	mov	sl, r0
 8031f82:	2800      	cmp	r0, #0
 8031f84:	f43f adfd 	beq.w	8031b82 <__ssvfscanf_r+0x18e>
 8031f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031f8a:	6028      	str	r0, [r5, #0]
 8031f8c:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8031f90:	889e      	ldrh	r6, [r3, #4]
 8031f92:	45b3      	cmp	fp, r6
 8031f94:	d311      	bcc.n	8031fba <__ssvfscanf_r+0x5c6>
 8031f96:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8031f9a:	429e      	cmp	r6, r3
 8031f9c:	f200 8692 	bhi.w	8032cc4 <__ssvfscanf_r+0x12d0>
 8031fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031fa2:	3608      	adds	r6, #8
 8031fa4:	b2b6      	uxth	r6, r6
 8031fa6:	6818      	ldr	r0, [r3, #0]
 8031fa8:	00b1      	lsls	r1, r6, #2
 8031faa:	f001 fb39 	bl	8033620 <realloc>
 8031fae:	2800      	cmp	r0, #0
 8031fb0:	f000 8688 	beq.w	8032cc4 <__ssvfscanf_r+0x12d0>
 8031fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031fb6:	6018      	str	r0, [r3, #0]
 8031fb8:	809e      	strh	r6, [r3, #4]
 8031fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031fbc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8031fbe:	681b      	ldr	r3, [r3, #0]
 8031fc0:	f10b 0201 	add.w	r2, fp, #1
 8031fc4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8031fc8:	462e      	mov	r6, r5
 8031fca:	80ca      	strh	r2, [r1, #6]
 8031fcc:	4655      	mov	r5, sl
 8031fce:	9400      	str	r4, [sp, #0]
 8031fd0:	4629      	mov	r1, r5
 8031fd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031fd4:	4643      	mov	r3, r8
 8031fd6:	2201      	movs	r2, #1
 8031fd8:	f7fd fb74 	bl	802f6c4 <_sfread_r>
 8031fdc:	4605      	mov	r5, r0
 8031fde:	2800      	cmp	r0, #0
 8031fe0:	f43f adca 	beq.w	8031b78 <__ssvfscanf_r+0x184>
 8031fe4:	b13e      	cbz	r6, 8031ff6 <__ssvfscanf_r+0x602>
 8031fe6:	4580      	cmp	r8, r0
 8031fe8:	d905      	bls.n	8031ff6 <__ssvfscanf_r+0x602>
 8031fea:	4601      	mov	r1, r0
 8031fec:	6830      	ldr	r0, [r6, #0]
 8031fee:	f001 fb17 	bl	8033620 <realloc>
 8031ff2:	b100      	cbz	r0, 8031ff6 <__ssvfscanf_r+0x602>
 8031ff4:	6030      	str	r0, [r6, #0]
 8031ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8031ff8:	442b      	add	r3, r5
 8031ffa:	633b      	str	r3, [r7, #48]	@ 0x30
 8031ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031ffe:	3301      	adds	r3, #1
 8032000:	627b      	str	r3, [r7, #36]	@ 0x24
 8032002:	464d      	mov	r5, r9
 8032004:	e511      	b.n	8031a2a <__ssvfscanf_r+0x36>
 8032006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032008:	2b00      	cmp	r3, #0
 803200a:	bf08      	it	eq
 803200c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8032010:	f016 0801 	ands.w	r8, r6, #1
 8032014:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032016:	f006 0a10 	and.w	sl, r6, #16
 803201a:	f000 8101 	beq.w	8032220 <__ssvfscanf_r+0x82c>
 803201e:	f1ba 0f00 	cmp.w	sl, #0
 8032022:	f040 80a4 	bne.w	803216e <__ssvfscanf_r+0x77a>
 8032026:	462b      	mov	r3, r5
 8032028:	f853 5b04 	ldr.w	r5, [r3], #4
 803202c:	60fb      	str	r3, [r7, #12]
 803202e:	0633      	lsls	r3, r6, #24
 8032030:	f140 80a5 	bpl.w	803217e <__ssvfscanf_r+0x78a>
 8032034:	2d00      	cmp	r5, #0
 8032036:	f43f ae9b 	beq.w	8031d70 <__ssvfscanf_r+0x37c>
 803203a:	2080      	movs	r0, #128	@ 0x80
 803203c:	f7fc fb66 	bl	802e70c <malloc>
 8032040:	4680      	mov	r8, r0
 8032042:	2800      	cmp	r0, #0
 8032044:	f43f ae91 	beq.w	8031d6a <__ssvfscanf_r+0x376>
 8032048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803204a:	6028      	str	r0, [r5, #0]
 803204c:	88de      	ldrh	r6, [r3, #6]
 803204e:	889b      	ldrh	r3, [r3, #4]
 8032050:	429e      	cmp	r6, r3
 8032052:	d314      	bcc.n	803207e <__ssvfscanf_r+0x68a>
 8032054:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8032058:	4293      	cmp	r3, r2
 803205a:	f200 8633 	bhi.w	8032cc4 <__ssvfscanf_r+0x12d0>
 803205e:	3308      	adds	r3, #8
 8032060:	fa1f f983 	uxth.w	r9, r3
 8032064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032066:	ea4f 0189 	mov.w	r1, r9, lsl #2
 803206a:	6818      	ldr	r0, [r3, #0]
 803206c:	f001 fad8 	bl	8033620 <realloc>
 8032070:	2800      	cmp	r0, #0
 8032072:	f000 8627 	beq.w	8032cc4 <__ssvfscanf_r+0x12d0>
 8032076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032078:	6018      	str	r0, [r3, #0]
 803207a:	f8a3 9004 	strh.w	r9, [r3, #4]
 803207e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032080:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032082:	681b      	ldr	r3, [r3, #0]
 8032084:	1c72      	adds	r2, r6, #1
 8032086:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 803208a:	46ab      	mov	fp, r5
 803208c:	80ca      	strh	r2, [r1, #6]
 803208e:	4645      	mov	r5, r8
 8032090:	f04f 0920 	mov.w	r9, #32
 8032094:	2600      	movs	r6, #0
 8032096:	f7fb fa7b 	bl	802d590 <__locale_mb_cur_max>
 803209a:	42b0      	cmp	r0, r6
 803209c:	f43f ad6c 	beq.w	8031b78 <__ssvfscanf_r+0x184>
 80320a0:	1c73      	adds	r3, r6, #1
 80320a2:	613b      	str	r3, [r7, #16]
 80320a4:	6823      	ldr	r3, [r4, #0]
 80320a6:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80320aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80320ae:	558a      	strb	r2, [r1, r6]
 80320b0:	6862      	ldr	r2, [r4, #4]
 80320b2:	3a01      	subs	r2, #1
 80320b4:	e9c4 3200 	strd	r3, r2, [r4]
 80320b8:	6a3b      	ldr	r3, [r7, #32]
 80320ba:	2b03      	cmp	r3, #3
 80320bc:	d102      	bne.n	80320c4 <__ssvfscanf_r+0x6d0>
 80320be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80320c0:	2b04      	cmp	r3, #4
 80320c2:	d005      	beq.n	80320d0 <__ssvfscanf_r+0x6dc>
 80320c4:	2208      	movs	r2, #8
 80320c6:	2100      	movs	r1, #0
 80320c8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80320cc:	f7fa f8d8 	bl	802c280 <memset>
 80320d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80320d4:	9300      	str	r3, [sp, #0]
 80320d6:	693b      	ldr	r3, [r7, #16]
 80320d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80320da:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80320de:	4629      	mov	r1, r5
 80320e0:	f002 fe58 	bl	8034d94 <_mbrtowc_r>
 80320e4:	1c46      	adds	r6, r0, #1
 80320e6:	6238      	str	r0, [r7, #32]
 80320e8:	f43f ad46 	beq.w	8031b78 <__ssvfscanf_r+0x184>
 80320ec:	2800      	cmp	r0, #0
 80320ee:	d14a      	bne.n	8032186 <__ssvfscanf_r+0x792>
 80320f0:	6028      	str	r0, [r5, #0]
 80320f2:	682e      	ldr	r6, [r5, #0]
 80320f4:	1c70      	adds	r0, r6, #1
 80320f6:	d056      	beq.n	80321a6 <__ssvfscanf_r+0x7b2>
 80320f8:	2208      	movs	r2, #8
 80320fa:	2100      	movs	r1, #0
 80320fc:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8032100:	f7fa f8be 	bl	802c280 <memset>
 8032104:	4b9a      	ldr	r3, [pc, #616]	@ (8032370 <__ssvfscanf_r+0x97c>)
 8032106:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 803210c:	60bb      	str	r3, [r7, #8]
 803210e:	4632      	mov	r2, r6
 8032110:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8032114:	68be      	ldr	r6, [r7, #8]
 8032116:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 803211a:	47b0      	blx	r6
 803211c:	2801      	cmp	r0, #1
 803211e:	d144      	bne.n	80321aa <__ssvfscanf_r+0x7b6>
 8032120:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8032124:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8032128:	5c9b      	ldrb	r3, [r3, r2]
 803212a:	2b00      	cmp	r3, #0
 803212c:	d148      	bne.n	80321c0 <__ssvfscanf_r+0x7cc>
 803212e:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 8032132:	693b      	ldr	r3, [r7, #16]
 8032134:	2b00      	cmp	r3, #0
 8032136:	d13a      	bne.n	80321ae <__ssvfscanf_r+0x7ba>
 8032138:	f1ba 0f00 	cmp.w	sl, #0
 803213c:	d115      	bne.n	803216a <__ssvfscanf_r+0x776>
 803213e:	f8c5 a000 	str.w	sl, [r5]
 8032142:	f1bb 0f00 	cmp.w	fp, #0
 8032146:	d00d      	beq.n	8032164 <__ssvfscanf_r+0x770>
 8032148:	eba5 0108 	sub.w	r1, r5, r8
 803214c:	108b      	asrs	r3, r1, #2
 803214e:	3301      	adds	r3, #1
 8032150:	4599      	cmp	r9, r3
 8032152:	d907      	bls.n	8032164 <__ssvfscanf_r+0x770>
 8032154:	f8db 0000 	ldr.w	r0, [fp]
 8032158:	3104      	adds	r1, #4
 803215a:	f001 fa61 	bl	8033620 <realloc>
 803215e:	b108      	cbz	r0, 8032164 <__ssvfscanf_r+0x770>
 8032160:	f8cb 0000 	str.w	r0, [fp]
 8032164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032166:	3301      	adds	r3, #1
 8032168:	627b      	str	r3, [r7, #36]	@ 0x24
 803216a:	68fd      	ldr	r5, [r7, #12]
 803216c:	e45d      	b.n	8031a2a <__ssvfscanf_r+0x36>
 803216e:	f04f 0900 	mov.w	r9, #0
 8032172:	60fd      	str	r5, [r7, #12]
 8032174:	46c8      	mov	r8, r9
 8032176:	46cb      	mov	fp, r9
 8032178:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 803217c:	e78a      	b.n	8032094 <__ssvfscanf_r+0x6a0>
 803217e:	46d1      	mov	r9, sl
 8032180:	46d0      	mov	r8, sl
 8032182:	46d3      	mov	fp, sl
 8032184:	e786      	b.n	8032094 <__ssvfscanf_r+0x6a0>
 8032186:	6a3b      	ldr	r3, [r7, #32]
 8032188:	3302      	adds	r3, #2
 803218a:	d1b2      	bne.n	80320f2 <__ssvfscanf_r+0x6fe>
 803218c:	693e      	ldr	r6, [r7, #16]
 803218e:	6863      	ldr	r3, [r4, #4]
 8032190:	2b00      	cmp	r3, #0
 8032192:	dc40      	bgt.n	8032216 <__ssvfscanf_r+0x822>
 8032194:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032196:	4621      	mov	r1, r4
 8032198:	f7fd fa77 	bl	802f68a <__ssrefill_r>
 803219c:	2800      	cmp	r0, #0
 803219e:	d03a      	beq.n	8032216 <__ssvfscanf_r+0x822>
 80321a0:	2e00      	cmp	r6, #0
 80321a2:	d0c9      	beq.n	8032138 <__ssvfscanf_r+0x744>
 80321a4:	e4e8      	b.n	8031b78 <__ssvfscanf_r+0x184>
 80321a6:	4632      	mov	r2, r6
 80321a8:	e7bc      	b.n	8032124 <__ssvfscanf_r+0x730>
 80321aa:	2200      	movs	r2, #0
 80321ac:	e7ba      	b.n	8032124 <__ssvfscanf_r+0x730>
 80321ae:	693b      	ldr	r3, [r7, #16]
 80321b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80321b2:	3b01      	subs	r3, #1
 80321b4:	4622      	mov	r2, r4
 80321b6:	5cf1      	ldrb	r1, [r6, r3]
 80321b8:	613b      	str	r3, [r7, #16]
 80321ba:	f7fd fa2b 	bl	802f614 <_sungetc_r>
 80321be:	e7b8      	b.n	8032132 <__ssvfscanf_r+0x73e>
 80321c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80321c2:	693a      	ldr	r2, [r7, #16]
 80321c4:	4413      	add	r3, r2
 80321c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80321c8:	6a3b      	ldr	r3, [r7, #32]
 80321ca:	2b03      	cmp	r3, #3
 80321cc:	d102      	bne.n	80321d4 <__ssvfscanf_r+0x7e0>
 80321ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80321d0:	2b04      	cmp	r3, #4
 80321d2:	d002      	beq.n	80321da <__ssvfscanf_r+0x7e6>
 80321d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80321d6:	3b01      	subs	r3, #1
 80321d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80321da:	f1ba 0f00 	cmp.w	sl, #0
 80321de:	d118      	bne.n	8032212 <__ssvfscanf_r+0x81e>
 80321e0:	3504      	adds	r5, #4
 80321e2:	f1bb 0f00 	cmp.w	fp, #0
 80321e6:	d014      	beq.n	8032212 <__ssvfscanf_r+0x81e>
 80321e8:	eba5 0608 	sub.w	r6, r5, r8
 80321ec:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 80321f0:	d80d      	bhi.n	803220e <__ssvfscanf_r+0x81a>
 80321f2:	4640      	mov	r0, r8
 80321f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80321f8:	f001 fa12 	bl	8033620 <realloc>
 80321fc:	4680      	mov	r8, r0
 80321fe:	2800      	cmp	r0, #0
 8032200:	f43f adb3 	beq.w	8031d6a <__ssvfscanf_r+0x376>
 8032204:	1985      	adds	r5, r0, r6
 8032206:	f8cb 0000 	str.w	r0, [fp]
 803220a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 803220e:	4656      	mov	r6, sl
 8032210:	e7bd      	b.n	803218e <__ssvfscanf_r+0x79a>
 8032212:	2600      	movs	r6, #0
 8032214:	e7bb      	b.n	803218e <__ssvfscanf_r+0x79a>
 8032216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032218:	2b00      	cmp	r3, #0
 803221a:	f47f af3c 	bne.w	8032096 <__ssvfscanf_r+0x6a2>
 803221e:	e78b      	b.n	8032138 <__ssvfscanf_r+0x744>
 8032220:	f1ba 0f00 	cmp.w	sl, #0
 8032224:	d01e      	beq.n	8032264 <__ssvfscanf_r+0x870>
 8032226:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 803222a:	6823      	ldr	r3, [r4, #0]
 803222c:	781a      	ldrb	r2, [r3, #0]
 803222e:	5cb2      	ldrb	r2, [r6, r2]
 8032230:	b91a      	cbnz	r2, 803223a <__ssvfscanf_r+0x846>
 8032232:	f1b8 0f00 	cmp.w	r8, #0
 8032236:	d112      	bne.n	803225e <__ssvfscanf_r+0x86a>
 8032238:	e4d2      	b.n	8031be0 <__ssvfscanf_r+0x1ec>
 803223a:	3301      	adds	r3, #1
 803223c:	6862      	ldr	r2, [r4, #4]
 803223e:	6023      	str	r3, [r4, #0]
 8032240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032242:	f108 0801 	add.w	r8, r8, #1
 8032246:	3a01      	subs	r2, #1
 8032248:	4543      	cmp	r3, r8
 803224a:	6062      	str	r2, [r4, #4]
 803224c:	d007      	beq.n	803225e <__ssvfscanf_r+0x86a>
 803224e:	2a00      	cmp	r2, #0
 8032250:	dceb      	bgt.n	803222a <__ssvfscanf_r+0x836>
 8032252:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032254:	4621      	mov	r1, r4
 8032256:	f7fd fa18 	bl	802f68a <__ssrefill_r>
 803225a:	2800      	cmp	r0, #0
 803225c:	d0e5      	beq.n	803222a <__ssvfscanf_r+0x836>
 803225e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032260:	4443      	add	r3, r8
 8032262:	e674      	b.n	8031f4e <__ssvfscanf_r+0x55a>
 8032264:	46a9      	mov	r9, r5
 8032266:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 803226a:	f859 8b04 	ldr.w	r8, [r9], #4
 803226e:	d07d      	beq.n	803236c <__ssvfscanf_r+0x978>
 8032270:	f1b8 0f00 	cmp.w	r8, #0
 8032274:	f43f acb4 	beq.w	8031be0 <__ssvfscanf_r+0x1ec>
 8032278:	2020      	movs	r0, #32
 803227a:	f7fc fa47 	bl	802e70c <malloc>
 803227e:	4606      	mov	r6, r0
 8032280:	2800      	cmp	r0, #0
 8032282:	f43f ac7e 	beq.w	8031b82 <__ssvfscanf_r+0x18e>
 8032286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032288:	f8c8 0000 	str.w	r0, [r8]
 803228c:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8032290:	889d      	ldrh	r5, [r3, #4]
 8032292:	45aa      	cmp	sl, r5
 8032294:	d311      	bcc.n	80322ba <__ssvfscanf_r+0x8c6>
 8032296:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803229a:	429d      	cmp	r5, r3
 803229c:	f200 8512 	bhi.w	8032cc4 <__ssvfscanf_r+0x12d0>
 80322a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80322a2:	3508      	adds	r5, #8
 80322a4:	b2ad      	uxth	r5, r5
 80322a6:	6818      	ldr	r0, [r3, #0]
 80322a8:	00a9      	lsls	r1, r5, #2
 80322aa:	f001 f9b9 	bl	8033620 <realloc>
 80322ae:	2800      	cmp	r0, #0
 80322b0:	f000 8508 	beq.w	8032cc4 <__ssvfscanf_r+0x12d0>
 80322b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80322b6:	6018      	str	r0, [r3, #0]
 80322b8:	809d      	strh	r5, [r3, #4]
 80322ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80322bc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80322be:	681b      	ldr	r3, [r3, #0]
 80322c0:	f10a 0201 	add.w	r2, sl, #1
 80322c4:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 80322c8:	80ca      	strh	r2, [r1, #6]
 80322ca:	46c2      	mov	sl, r8
 80322cc:	46b0      	mov	r8, r6
 80322ce:	2620      	movs	r6, #32
 80322d0:	4645      	mov	r5, r8
 80322d2:	6823      	ldr	r3, [r4, #0]
 80322d4:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80322d8:	781a      	ldrb	r2, [r3, #0]
 80322da:	5c8a      	ldrb	r2, [r1, r2]
 80322dc:	b35a      	cbz	r2, 8032336 <__ssvfscanf_r+0x942>
 80322de:	6862      	ldr	r2, [r4, #4]
 80322e0:	3a01      	subs	r2, #1
 80322e2:	6062      	str	r2, [r4, #4]
 80322e4:	1c5a      	adds	r2, r3, #1
 80322e6:	6022      	str	r2, [r4, #0]
 80322e8:	781b      	ldrb	r3, [r3, #0]
 80322ea:	f808 3b01 	strb.w	r3, [r8], #1
 80322ee:	f1ba 0f00 	cmp.w	sl, #0
 80322f2:	d010      	beq.n	8032316 <__ssvfscanf_r+0x922>
 80322f4:	eba8 0b05 	sub.w	fp, r8, r5
 80322f8:	45b3      	cmp	fp, r6
 80322fa:	d30c      	bcc.n	8032316 <__ssvfscanf_r+0x922>
 80322fc:	0076      	lsls	r6, r6, #1
 80322fe:	4628      	mov	r0, r5
 8032300:	4631      	mov	r1, r6
 8032302:	f001 f98d 	bl	8033620 <realloc>
 8032306:	4605      	mov	r5, r0
 8032308:	2800      	cmp	r0, #0
 803230a:	f43f ac3a 	beq.w	8031b82 <__ssvfscanf_r+0x18e>
 803230e:	eb00 080b 	add.w	r8, r0, fp
 8032312:	f8ca 0000 	str.w	r0, [sl]
 8032316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032318:	3b01      	subs	r3, #1
 803231a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803231c:	d00b      	beq.n	8032336 <__ssvfscanf_r+0x942>
 803231e:	6863      	ldr	r3, [r4, #4]
 8032320:	2b00      	cmp	r3, #0
 8032322:	dcd6      	bgt.n	80322d2 <__ssvfscanf_r+0x8de>
 8032324:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032326:	4621      	mov	r1, r4
 8032328:	f7fd f9af 	bl	802f68a <__ssrefill_r>
 803232c:	2800      	cmp	r0, #0
 803232e:	d0d0      	beq.n	80322d2 <__ssvfscanf_r+0x8de>
 8032330:	45a8      	cmp	r8, r5
 8032332:	f43f ac21 	beq.w	8031b78 <__ssvfscanf_r+0x184>
 8032336:	ebb8 0505 	subs.w	r5, r8, r5
 803233a:	f43f ac51 	beq.w	8031be0 <__ssvfscanf_r+0x1ec>
 803233e:	2300      	movs	r3, #0
 8032340:	f888 3000 	strb.w	r3, [r8]
 8032344:	f1ba 0f00 	cmp.w	sl, #0
 8032348:	d009      	beq.n	803235e <__ssvfscanf_r+0x96a>
 803234a:	1c69      	adds	r1, r5, #1
 803234c:	428e      	cmp	r6, r1
 803234e:	d906      	bls.n	803235e <__ssvfscanf_r+0x96a>
 8032350:	f8da 0000 	ldr.w	r0, [sl]
 8032354:	f001 f964 	bl	8033620 <realloc>
 8032358:	b108      	cbz	r0, 803235e <__ssvfscanf_r+0x96a>
 803235a:	f8ca 0000 	str.w	r0, [sl]
 803235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032360:	3301      	adds	r3, #1
 8032362:	627b      	str	r3, [r7, #36]	@ 0x24
 8032364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032366:	442b      	add	r3, r5
 8032368:	633b      	str	r3, [r7, #48]	@ 0x30
 803236a:	e64a      	b.n	8032002 <__ssvfscanf_r+0x60e>
 803236c:	46b2      	mov	sl, r6
 803236e:	e7af      	b.n	80322d0 <__ssvfscanf_r+0x8dc>
 8032370:	2000016c 	.word	0x2000016c
 8032374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032376:	2b00      	cmp	r3, #0
 8032378:	bf08      	it	eq
 803237a:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 803237e:	f016 0901 	ands.w	r9, r6, #1
 8032382:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032384:	f006 0810 	and.w	r8, r6, #16
 8032388:	f000 80ef 	beq.w	803256a <__ssvfscanf_r+0xb76>
 803238c:	f1b8 0f00 	cmp.w	r8, #0
 8032390:	f040 8098 	bne.w	80324c4 <__ssvfscanf_r+0xad0>
 8032394:	462b      	mov	r3, r5
 8032396:	0631      	lsls	r1, r6, #24
 8032398:	f853 5b04 	ldr.w	r5, [r3], #4
 803239c:	613b      	str	r3, [r7, #16]
 803239e:	f140 8099 	bpl.w	80324d4 <__ssvfscanf_r+0xae0>
 80323a2:	2d00      	cmp	r5, #0
 80323a4:	f43f ace4 	beq.w	8031d70 <__ssvfscanf_r+0x37c>
 80323a8:	2080      	movs	r0, #128	@ 0x80
 80323aa:	f7fc f9af 	bl	802e70c <malloc>
 80323ae:	4606      	mov	r6, r0
 80323b0:	2800      	cmp	r0, #0
 80323b2:	f43f acda 	beq.w	8031d6a <__ssvfscanf_r+0x376>
 80323b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80323b8:	6028      	str	r0, [r5, #0]
 80323ba:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 80323be:	889b      	ldrh	r3, [r3, #4]
 80323c0:	4599      	cmp	r9, r3
 80323c2:	d314      	bcc.n	80323ee <__ssvfscanf_r+0x9fa>
 80323c4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80323c8:	4293      	cmp	r3, r2
 80323ca:	f200 847b 	bhi.w	8032cc4 <__ssvfscanf_r+0x12d0>
 80323ce:	3308      	adds	r3, #8
 80323d0:	fa1f fa83 	uxth.w	sl, r3
 80323d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80323d6:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80323da:	6818      	ldr	r0, [r3, #0]
 80323dc:	f001 f920 	bl	8033620 <realloc>
 80323e0:	2800      	cmp	r0, #0
 80323e2:	f000 846f 	beq.w	8032cc4 <__ssvfscanf_r+0x12d0>
 80323e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80323e8:	6018      	str	r0, [r3, #0]
 80323ea:	f8a3 a004 	strh.w	sl, [r3, #4]
 80323ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80323f0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80323f2:	681b      	ldr	r3, [r3, #0]
 80323f4:	f109 0201 	add.w	r2, r9, #1
 80323f8:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80323fc:	46aa      	mov	sl, r5
 80323fe:	80ca      	strh	r2, [r1, #6]
 8032400:	4635      	mov	r5, r6
 8032402:	f04f 0920 	mov.w	r9, #32
 8032406:	2300      	movs	r3, #0
 8032408:	6822      	ldr	r2, [r4, #0]
 803240a:	49a7      	ldr	r1, [pc, #668]	@ (80326a8 <__ssvfscanf_r+0xcb4>)
 803240c:	7812      	ldrb	r2, [r2, #0]
 803240e:	5c8a      	ldrb	r2, [r1, r2]
 8032410:	0710      	lsls	r0, r2, #28
 8032412:	d43c      	bmi.n	803248e <__ssvfscanf_r+0xa9a>
 8032414:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8032416:	2a00      	cmp	r2, #0
 8032418:	d039      	beq.n	803248e <__ssvfscanf_r+0xa9a>
 803241a:	60fb      	str	r3, [r7, #12]
 803241c:	f7fb f8b8 	bl	802d590 <__locale_mb_cur_max>
 8032420:	68fb      	ldr	r3, [r7, #12]
 8032422:	4298      	cmp	r0, r3
 8032424:	f43f aba8 	beq.w	8031b78 <__ssvfscanf_r+0x184>
 8032428:	6822      	ldr	r2, [r4, #0]
 803242a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 803242e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8032432:	54c8      	strb	r0, [r1, r3]
 8032434:	f103 0b01 	add.w	fp, r3, #1
 8032438:	6863      	ldr	r3, [r4, #4]
 803243a:	3b01      	subs	r3, #1
 803243c:	e9c4 2300 	strd	r2, r3, [r4]
 8032440:	6a3b      	ldr	r3, [r7, #32]
 8032442:	2b03      	cmp	r3, #3
 8032444:	d102      	bne.n	803244c <__ssvfscanf_r+0xa58>
 8032446:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8032448:	2b04      	cmp	r3, #4
 803244a:	d005      	beq.n	8032458 <__ssvfscanf_r+0xa64>
 803244c:	2208      	movs	r2, #8
 803244e:	2100      	movs	r1, #0
 8032450:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8032454:	f7f9 ff14 	bl	802c280 <memset>
 8032458:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 803245c:	9300      	str	r3, [sp, #0]
 803245e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8032462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032464:	465b      	mov	r3, fp
 8032466:	4629      	mov	r1, r5
 8032468:	f002 fc94 	bl	8034d94 <_mbrtowc_r>
 803246c:	1c42      	adds	r2, r0, #1
 803246e:	6238      	str	r0, [r7, #32]
 8032470:	f43f ab82 	beq.w	8031b78 <__ssvfscanf_r+0x184>
 8032474:	bb90      	cbnz	r0, 80324dc <__ssvfscanf_r+0xae8>
 8032476:	6028      	str	r0, [r5, #0]
 8032478:	6828      	ldr	r0, [r5, #0]
 803247a:	f002 fca5 	bl	8034dc8 <iswspace>
 803247e:	4603      	mov	r3, r0
 8032480:	2800      	cmp	r0, #0
 8032482:	d047      	beq.n	8032514 <__ssvfscanf_r+0xb20>
 8032484:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8032488:	f1bb 0f00 	cmp.w	fp, #0
 803248c:	d139      	bne.n	8032502 <__ssvfscanf_r+0xb0e>
 803248e:	f1b8 0f00 	cmp.w	r8, #0
 8032492:	d114      	bne.n	80324be <__ssvfscanf_r+0xaca>
 8032494:	f8c5 8000 	str.w	r8, [r5]
 8032498:	f1ba 0f00 	cmp.w	sl, #0
 803249c:	d00c      	beq.n	80324b8 <__ssvfscanf_r+0xac4>
 803249e:	1ba9      	subs	r1, r5, r6
 80324a0:	108b      	asrs	r3, r1, #2
 80324a2:	3301      	adds	r3, #1
 80324a4:	4599      	cmp	r9, r3
 80324a6:	d907      	bls.n	80324b8 <__ssvfscanf_r+0xac4>
 80324a8:	f8da 0000 	ldr.w	r0, [sl]
 80324ac:	3104      	adds	r1, #4
 80324ae:	f001 f8b7 	bl	8033620 <realloc>
 80324b2:	b108      	cbz	r0, 80324b8 <__ssvfscanf_r+0xac4>
 80324b4:	f8ca 0000 	str.w	r0, [sl]
 80324b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80324ba:	3301      	adds	r3, #1
 80324bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80324be:	693d      	ldr	r5, [r7, #16]
 80324c0:	f7ff bab3 	b.w	8031a2a <__ssvfscanf_r+0x36>
 80324c4:	f04f 0900 	mov.w	r9, #0
 80324c8:	613d      	str	r5, [r7, #16]
 80324ca:	464e      	mov	r6, r9
 80324cc:	46ca      	mov	sl, r9
 80324ce:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 80324d2:	e798      	b.n	8032406 <__ssvfscanf_r+0xa12>
 80324d4:	46c1      	mov	r9, r8
 80324d6:	4646      	mov	r6, r8
 80324d8:	46c2      	mov	sl, r8
 80324da:	e794      	b.n	8032406 <__ssvfscanf_r+0xa12>
 80324dc:	6a3b      	ldr	r3, [r7, #32]
 80324de:	3302      	adds	r3, #2
 80324e0:	d1ca      	bne.n	8032478 <__ssvfscanf_r+0xa84>
 80324e2:	465b      	mov	r3, fp
 80324e4:	6862      	ldr	r2, [r4, #4]
 80324e6:	2a00      	cmp	r2, #0
 80324e8:	dc8e      	bgt.n	8032408 <__ssvfscanf_r+0xa14>
 80324ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80324ec:	60fb      	str	r3, [r7, #12]
 80324ee:	4621      	mov	r1, r4
 80324f0:	f7fd f8cb 	bl	802f68a <__ssrefill_r>
 80324f4:	68fb      	ldr	r3, [r7, #12]
 80324f6:	2800      	cmp	r0, #0
 80324f8:	d086      	beq.n	8032408 <__ssvfscanf_r+0xa14>
 80324fa:	2b00      	cmp	r3, #0
 80324fc:	f47f ab3c 	bne.w	8031b78 <__ssvfscanf_r+0x184>
 8032500:	e7c5      	b.n	803248e <__ssvfscanf_r+0xa9a>
 8032502:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8032506:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032508:	f813 100b 	ldrb.w	r1, [r3, fp]
 803250c:	4622      	mov	r2, r4
 803250e:	f7fd f881 	bl	802f614 <_sungetc_r>
 8032512:	e7b7      	b.n	8032484 <__ssvfscanf_r+0xa90>
 8032514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032516:	445a      	add	r2, fp
 8032518:	633a      	str	r2, [r7, #48]	@ 0x30
 803251a:	6a3a      	ldr	r2, [r7, #32]
 803251c:	2a03      	cmp	r2, #3
 803251e:	d102      	bne.n	8032526 <__ssvfscanf_r+0xb32>
 8032520:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8032522:	2a04      	cmp	r2, #4
 8032524:	d002      	beq.n	803252c <__ssvfscanf_r+0xb38>
 8032526:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8032528:	3a01      	subs	r2, #1
 803252a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 803252c:	f1b8 0f00 	cmp.w	r8, #0
 8032530:	d1d8      	bne.n	80324e4 <__ssvfscanf_r+0xaf0>
 8032532:	3504      	adds	r5, #4
 8032534:	f1ba 0f00 	cmp.w	sl, #0
 8032538:	d015      	beq.n	8032566 <__ssvfscanf_r+0xb72>
 803253a:	eba5 0b06 	sub.w	fp, r5, r6
 803253e:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 8032542:	d80e      	bhi.n	8032562 <__ssvfscanf_r+0xb6e>
 8032544:	4630      	mov	r0, r6
 8032546:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 803254a:	f001 f869 	bl	8033620 <realloc>
 803254e:	4606      	mov	r6, r0
 8032550:	2800      	cmp	r0, #0
 8032552:	f43f ac0a 	beq.w	8031d6a <__ssvfscanf_r+0x376>
 8032556:	eb00 050b 	add.w	r5, r0, fp
 803255a:	f8ca 0000 	str.w	r0, [sl]
 803255e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8032562:	4643      	mov	r3, r8
 8032564:	e7be      	b.n	80324e4 <__ssvfscanf_r+0xaf0>
 8032566:	4653      	mov	r3, sl
 8032568:	e7bc      	b.n	80324e4 <__ssvfscanf_r+0xaf0>
 803256a:	f1b8 0f00 	cmp.w	r8, #0
 803256e:	d01a      	beq.n	80325a6 <__ssvfscanf_r+0xbb2>
 8032570:	4e4d      	ldr	r6, [pc, #308]	@ (80326a8 <__ssvfscanf_r+0xcb4>)
 8032572:	6823      	ldr	r3, [r4, #0]
 8032574:	781a      	ldrb	r2, [r3, #0]
 8032576:	5cb2      	ldrb	r2, [r6, r2]
 8032578:	0711      	lsls	r1, r2, #28
 803257a:	d411      	bmi.n	80325a0 <__ssvfscanf_r+0xbac>
 803257c:	3301      	adds	r3, #1
 803257e:	6862      	ldr	r2, [r4, #4]
 8032580:	6023      	str	r3, [r4, #0]
 8032582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032584:	f109 0901 	add.w	r9, r9, #1
 8032588:	3a01      	subs	r2, #1
 803258a:	454b      	cmp	r3, r9
 803258c:	6062      	str	r2, [r4, #4]
 803258e:	d007      	beq.n	80325a0 <__ssvfscanf_r+0xbac>
 8032590:	2a00      	cmp	r2, #0
 8032592:	dcee      	bgt.n	8032572 <__ssvfscanf_r+0xb7e>
 8032594:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032596:	4621      	mov	r1, r4
 8032598:	f7fd f877 	bl	802f68a <__ssrefill_r>
 803259c:	2800      	cmp	r0, #0
 803259e:	d0e8      	beq.n	8032572 <__ssvfscanf_r+0xb7e>
 80325a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80325a2:	444b      	add	r3, r9
 80325a4:	e4d3      	b.n	8031f4e <__ssvfscanf_r+0x55a>
 80325a6:	46a8      	mov	r8, r5
 80325a8:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 80325ac:	f858 5b04 	ldr.w	r5, [r8], #4
 80325b0:	d077      	beq.n	80326a2 <__ssvfscanf_r+0xcae>
 80325b2:	2d00      	cmp	r5, #0
 80325b4:	f43f ab14 	beq.w	8031be0 <__ssvfscanf_r+0x1ec>
 80325b8:	2020      	movs	r0, #32
 80325ba:	f7fc f8a7 	bl	802e70c <malloc>
 80325be:	4681      	mov	r9, r0
 80325c0:	2800      	cmp	r0, #0
 80325c2:	f43f aade 	beq.w	8031b82 <__ssvfscanf_r+0x18e>
 80325c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80325c8:	6028      	str	r0, [r5, #0]
 80325ca:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 80325ce:	889e      	ldrh	r6, [r3, #4]
 80325d0:	45b2      	cmp	sl, r6
 80325d2:	d311      	bcc.n	80325f8 <__ssvfscanf_r+0xc04>
 80325d4:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 80325d8:	429e      	cmp	r6, r3
 80325da:	f200 8373 	bhi.w	8032cc4 <__ssvfscanf_r+0x12d0>
 80325de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80325e0:	3608      	adds	r6, #8
 80325e2:	b2b6      	uxth	r6, r6
 80325e4:	6818      	ldr	r0, [r3, #0]
 80325e6:	00b1      	lsls	r1, r6, #2
 80325e8:	f001 f81a 	bl	8033620 <realloc>
 80325ec:	2800      	cmp	r0, #0
 80325ee:	f000 8369 	beq.w	8032cc4 <__ssvfscanf_r+0x12d0>
 80325f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80325f4:	6018      	str	r0, [r3, #0]
 80325f6:	809e      	strh	r6, [r3, #4]
 80325f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80325fa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80325fc:	681b      	ldr	r3, [r3, #0]
 80325fe:	f10a 0201 	add.w	r2, sl, #1
 8032602:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8032606:	80ca      	strh	r2, [r1, #6]
 8032608:	46aa      	mov	sl, r5
 803260a:	2620      	movs	r6, #32
 803260c:	464d      	mov	r5, r9
 803260e:	46a9      	mov	r9, r5
 8032610:	6823      	ldr	r3, [r4, #0]
 8032612:	4925      	ldr	r1, [pc, #148]	@ (80326a8 <__ssvfscanf_r+0xcb4>)
 8032614:	781a      	ldrb	r2, [r3, #0]
 8032616:	5c8a      	ldrb	r2, [r1, r2]
 8032618:	0712      	lsls	r2, r2, #28
 803261a:	d428      	bmi.n	803266e <__ssvfscanf_r+0xc7a>
 803261c:	6862      	ldr	r2, [r4, #4]
 803261e:	3a01      	subs	r2, #1
 8032620:	6062      	str	r2, [r4, #4]
 8032622:	1c5a      	adds	r2, r3, #1
 8032624:	6022      	str	r2, [r4, #0]
 8032626:	781b      	ldrb	r3, [r3, #0]
 8032628:	f805 3b01 	strb.w	r3, [r5], #1
 803262c:	f1ba 0f00 	cmp.w	sl, #0
 8032630:	d010      	beq.n	8032654 <__ssvfscanf_r+0xc60>
 8032632:	eba5 0b09 	sub.w	fp, r5, r9
 8032636:	45b3      	cmp	fp, r6
 8032638:	d30c      	bcc.n	8032654 <__ssvfscanf_r+0xc60>
 803263a:	0076      	lsls	r6, r6, #1
 803263c:	4648      	mov	r0, r9
 803263e:	4631      	mov	r1, r6
 8032640:	f000 ffee 	bl	8033620 <realloc>
 8032644:	4681      	mov	r9, r0
 8032646:	2800      	cmp	r0, #0
 8032648:	f43f aa9b 	beq.w	8031b82 <__ssvfscanf_r+0x18e>
 803264c:	eb00 050b 	add.w	r5, r0, fp
 8032650:	f8ca 0000 	str.w	r0, [sl]
 8032654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032656:	3b01      	subs	r3, #1
 8032658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803265a:	d008      	beq.n	803266e <__ssvfscanf_r+0xc7a>
 803265c:	6863      	ldr	r3, [r4, #4]
 803265e:	2b00      	cmp	r3, #0
 8032660:	dcd6      	bgt.n	8032610 <__ssvfscanf_r+0xc1c>
 8032662:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032664:	4621      	mov	r1, r4
 8032666:	f7fd f810 	bl	802f68a <__ssrefill_r>
 803266a:	2800      	cmp	r0, #0
 803266c:	d0d0      	beq.n	8032610 <__ssvfscanf_r+0xc1c>
 803266e:	2300      	movs	r3, #0
 8032670:	702b      	strb	r3, [r5, #0]
 8032672:	eba5 0509 	sub.w	r5, r5, r9
 8032676:	f1ba 0f00 	cmp.w	sl, #0
 803267a:	d009      	beq.n	8032690 <__ssvfscanf_r+0xc9c>
 803267c:	1c69      	adds	r1, r5, #1
 803267e:	428e      	cmp	r6, r1
 8032680:	d906      	bls.n	8032690 <__ssvfscanf_r+0xc9c>
 8032682:	f8da 0000 	ldr.w	r0, [sl]
 8032686:	f000 ffcb 	bl	8033620 <realloc>
 803268a:	b108      	cbz	r0, 8032690 <__ssvfscanf_r+0xc9c>
 803268c:	f8ca 0000 	str.w	r0, [sl]
 8032690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032692:	442b      	add	r3, r5
 8032694:	633b      	str	r3, [r7, #48]	@ 0x30
 8032696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032698:	3301      	adds	r3, #1
 803269a:	627b      	str	r3, [r7, #36]	@ 0x24
 803269c:	4645      	mov	r5, r8
 803269e:	f7ff b9c4 	b.w	8031a2a <__ssvfscanf_r+0x36>
 80326a2:	46b2      	mov	sl, r6
 80326a4:	e7b3      	b.n	803260e <__ssvfscanf_r+0xc1a>
 80326a6:	bf00      	nop
 80326a8:	0803b3c9 	.word	0x0803b3c9
 80326ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80326ae:	3b01      	subs	r3, #1
 80326b0:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 80326b4:	bf81      	itttt	hi
 80326b6:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 80326b8:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 80326bc:	eb03 090c 	addhi.w	r9, r3, ip
 80326c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80326c4:	bf8c      	ite	hi
 80326c6:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 80326c8:	f04f 0900 	movls.w	r9, #0
 80326cc:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 80326d0:	f04f 0a00 	mov.w	sl, #0
 80326d4:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 80326d8:	6822      	ldr	r2, [r4, #0]
 80326da:	7813      	ldrb	r3, [r2, #0]
 80326dc:	2b39      	cmp	r3, #57	@ 0x39
 80326de:	d80f      	bhi.n	8032700 <__ssvfscanf_r+0xd0c>
 80326e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80326e2:	d91a      	bls.n	803271a <__ssvfscanf_r+0xd26>
 80326e4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80326e8:	290e      	cmp	r1, #14
 80326ea:	d816      	bhi.n	803271a <__ssvfscanf_r+0xd26>
 80326ec:	e8df f001 	tbb	[pc, r1]
 80326f0:	15781578 	.word	0x15781578
 80326f4:	68683f15 	.word	0x68683f15
 80326f8:	68686868 	.word	0x68686868
 80326fc:	7068      	.short	0x7068
 80326fe:	70          	.byte	0x70
 80326ff:	00          	.byte	0x00
 8032700:	2b66      	cmp	r3, #102	@ 0x66
 8032702:	d832      	bhi.n	803276a <__ssvfscanf_r+0xd76>
 8032704:	2b60      	cmp	r3, #96	@ 0x60
 8032706:	d803      	bhi.n	8032710 <__ssvfscanf_r+0xd1c>
 8032708:	2b46      	cmp	r3, #70	@ 0x46
 803270a:	d804      	bhi.n	8032716 <__ssvfscanf_r+0xd22>
 803270c:	2b40      	cmp	r3, #64	@ 0x40
 803270e:	d904      	bls.n	803271a <__ssvfscanf_r+0xd26>
 8032710:	69f9      	ldr	r1, [r7, #28]
 8032712:	290a      	cmp	r1, #10
 8032714:	e062      	b.n	80327dc <__ssvfscanf_r+0xde8>
 8032716:	2b58      	cmp	r3, #88	@ 0x58
 8032718:	d068      	beq.n	80327ec <__ssvfscanf_r+0xdf8>
 803271a:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 803271e:	d011      	beq.n	8032744 <__ssvfscanf_r+0xd50>
 8032720:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8032724:	4598      	cmp	r8, r3
 8032726:	d908      	bls.n	803273a <__ssvfscanf_r+0xd46>
 8032728:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 803272c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803272e:	4622      	mov	r2, r4
 8032730:	f7fc ff70 	bl	802f614 <_sungetc_r>
 8032734:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 8032738:	46c8      	mov	r8, r9
 803273a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 803273e:	4598      	cmp	r8, r3
 8032740:	f43f aa4e 	beq.w	8031be0 <__ssvfscanf_r+0x1ec>
 8032744:	f01b 0210 	ands.w	r2, fp, #16
 8032748:	d16c      	bne.n	8032824 <__ssvfscanf_r+0xe30>
 803274a:	69fb      	ldr	r3, [r7, #28]
 803274c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803274e:	69be      	ldr	r6, [r7, #24]
 8032750:	f888 2000 	strb.w	r2, [r8]
 8032754:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8032758:	47b0      	blx	r6
 803275a:	f01b 0f20 	tst.w	fp, #32
 803275e:	f105 0904 	add.w	r9, r5, #4
 8032762:	d056      	beq.n	8032812 <__ssvfscanf_r+0xe1e>
 8032764:	682b      	ldr	r3, [r5, #0]
 8032766:	6018      	str	r0, [r3, #0]
 8032768:	e058      	b.n	803281c <__ssvfscanf_r+0xe28>
 803276a:	2b78      	cmp	r3, #120	@ 0x78
 803276c:	e7d4      	b.n	8032718 <__ssvfscanf_r+0xd24>
 803276e:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 8032772:	d00a      	beq.n	803278a <__ssvfscanf_r+0xd96>
 8032774:	69f9      	ldr	r1, [r7, #28]
 8032776:	b919      	cbnz	r1, 8032780 <__ssvfscanf_r+0xd8c>
 8032778:	2108      	movs	r1, #8
 803277a:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 803277e:	61f9      	str	r1, [r7, #28]
 8032780:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 8032784:	d004      	beq.n	8032790 <__ssvfscanf_r+0xd9c>
 8032786:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 803278a:	f808 3b01 	strb.w	r3, [r8], #1
 803278e:	e00b      	b.n	80327a8 <__ssvfscanf_r+0xdb4>
 8032790:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 8032794:	f1b9 0f00 	cmp.w	r9, #0
 8032798:	d004      	beq.n	80327a4 <__ssvfscanf_r+0xdb0>
 803279a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803279c:	3301      	adds	r3, #1
 803279e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80327a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80327a4:	f10a 0a01 	add.w	sl, sl, #1
 80327a8:	6863      	ldr	r3, [r4, #4]
 80327aa:	3b01      	subs	r3, #1
 80327ac:	2b00      	cmp	r3, #0
 80327ae:	6063      	str	r3, [r4, #4]
 80327b0:	dd28      	ble.n	8032804 <__ssvfscanf_r+0xe10>
 80327b2:	3201      	adds	r2, #1
 80327b4:	6022      	str	r2, [r4, #0]
 80327b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80327b8:	3b01      	subs	r3, #1
 80327ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80327bc:	d18c      	bne.n	80326d8 <__ssvfscanf_r+0xce4>
 80327be:	e7ac      	b.n	803271a <__ssvfscanf_r+0xd26>
 80327c0:	69f8      	ldr	r0, [r7, #28]
 80327c2:	499b      	ldr	r1, [pc, #620]	@ (8032a30 <__ssvfscanf_r+0x103c>)
 80327c4:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 80327c8:	61f9      	str	r1, [r7, #28]
 80327ca:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 80327ce:	e7dc      	b.n	803278a <__ssvfscanf_r+0xd96>
 80327d0:	69f8      	ldr	r0, [r7, #28]
 80327d2:	4997      	ldr	r1, [pc, #604]	@ (8032a30 <__ssvfscanf_r+0x103c>)
 80327d4:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 80327d8:	61f9      	str	r1, [r7, #28]
 80327da:	2908      	cmp	r1, #8
 80327dc:	dcf5      	bgt.n	80327ca <__ssvfscanf_r+0xdd6>
 80327de:	e79c      	b.n	803271a <__ssvfscanf_r+0xd26>
 80327e0:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 80327e4:	d099      	beq.n	803271a <__ssvfscanf_r+0xd26>
 80327e6:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 80327ea:	e7ce      	b.n	803278a <__ssvfscanf_r+0xd96>
 80327ec:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 80327f0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80327f4:	d191      	bne.n	803271a <__ssvfscanf_r+0xd26>
 80327f6:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 80327fa:	2110      	movs	r1, #16
 80327fc:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 8032800:	61f9      	str	r1, [r7, #28]
 8032802:	e7c2      	b.n	803278a <__ssvfscanf_r+0xd96>
 8032804:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032806:	4621      	mov	r1, r4
 8032808:	f7fc ff3f 	bl	802f68a <__ssrefill_r>
 803280c:	2800      	cmp	r0, #0
 803280e:	d0d2      	beq.n	80327b6 <__ssvfscanf_r+0xdc2>
 8032810:	e783      	b.n	803271a <__ssvfscanf_r+0xd26>
 8032812:	f01b 0f08 	tst.w	fp, #8
 8032816:	d00b      	beq.n	8032830 <__ssvfscanf_r+0xe3c>
 8032818:	682b      	ldr	r3, [r5, #0]
 803281a:	7018      	strb	r0, [r3, #0]
 803281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803281e:	3301      	adds	r3, #1
 8032820:	627b      	str	r3, [r7, #36]	@ 0x24
 8032822:	464d      	mov	r5, r9
 8032824:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8032828:	eba8 0803 	sub.w	r8, r8, r3
 803282c:	44d0      	add	r8, sl
 803282e:	e516      	b.n	803225e <__ssvfscanf_r+0x86a>
 8032830:	f01b 0f04 	tst.w	fp, #4
 8032834:	d002      	beq.n	803283c <__ssvfscanf_r+0xe48>
 8032836:	682b      	ldr	r3, [r5, #0]
 8032838:	8018      	strh	r0, [r3, #0]
 803283a:	e7ef      	b.n	803281c <__ssvfscanf_r+0xe28>
 803283c:	f01b 0201 	ands.w	r2, fp, #1
 8032840:	d190      	bne.n	8032764 <__ssvfscanf_r+0xd70>
 8032842:	f01b 0f02 	tst.w	fp, #2
 8032846:	d08d      	beq.n	8032764 <__ssvfscanf_r+0xd70>
 8032848:	4b7a      	ldr	r3, [pc, #488]	@ (8032a34 <__ssvfscanf_r+0x1040>)
 803284a:	69b9      	ldr	r1, [r7, #24]
 803284c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803284e:	4299      	cmp	r1, r3
 8032850:	69fb      	ldr	r3, [r7, #28]
 8032852:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8032856:	d105      	bne.n	8032864 <__ssvfscanf_r+0xe70>
 8032858:	f002 fa9a 	bl	8034d90 <_strtoull_r>
 803285c:	682b      	ldr	r3, [r5, #0]
 803285e:	e9c3 0100 	strd	r0, r1, [r3]
 8032862:	e7db      	b.n	803281c <__ssvfscanf_r+0xe28>
 8032864:	f002 f9e8 	bl	8034c38 <_strtoll_r>
 8032868:	e7f8      	b.n	803285c <__ssvfscanf_r+0xe68>
 803286a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803286c:	f7fa fe96 	bl	802d59c <_localeconv_r>
 8032870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032872:	6802      	ldr	r2, [r0, #0]
 8032874:	3b01      	subs	r3, #1
 8032876:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 803287a:	f04f 0800 	mov.w	r8, #0
 803287e:	bf88      	it	hi
 8032880:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8032882:	f8c7 8010 	str.w	r8, [r7, #16]
 8032886:	e9c7 8802 	strd	r8, r8, [r7, #8]
 803288a:	bf81      	itttt	hi
 803288c:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 8032890:	f240 115d 	movwhi	r1, #349	@ 0x15d
 8032894:	181b      	addhi	r3, r3, r0
 8032896:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 8032898:	bf98      	it	ls
 803289a:	2300      	movls	r3, #0
 803289c:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 80328a0:	46c3      	mov	fp, r8
 80328a2:	46c2      	mov	sl, r8
 80328a4:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 80328a8:	6821      	ldr	r1, [r4, #0]
 80328aa:	6079      	str	r1, [r7, #4]
 80328ac:	7808      	ldrb	r0, [r1, #0]
 80328ae:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 80328b2:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 80328b6:	f200 8123 	bhi.w	8032b00 <__ssvfscanf_r+0x110c>
 80328ba:	e8df f01c 	tbh	[pc, ip, lsl #1]
 80328be:	0089      	.short	0x0089
 80328c0:	00890121 	.word	0x00890121
 80328c4:	01210121 	.word	0x01210121
 80328c8:	006f004f 	.word	0x006f004f
 80328cc:	006f006f 	.word	0x006f006f
 80328d0:	006f006f 	.word	0x006f006f
 80328d4:	006f006f 	.word	0x006f006f
 80328d8:	006f006f 	.word	0x006f006f
 80328dc:	01210121 	.word	0x01210121
 80328e0:	01210121 	.word	0x01210121
 80328e4:	01210121 	.word	0x01210121
 80328e8:	00af0121 	.word	0x00af0121
 80328ec:	006d006d 	.word	0x006d006d
 80328f0:	011e006d 	.word	0x011e006d
 80328f4:	012100ed 	.word	0x012100ed
 80328f8:	00d60121 	.word	0x00d60121
 80328fc:	01210121 	.word	0x01210121
 8032900:	01210121 	.word	0x01210121
 8032904:	01210090 	.word	0x01210090
 8032908:	01210104 	.word	0x01210104
 803290c:	01210121 	.word	0x01210121
 8032910:	012100f8 	.word	0x012100f8
 8032914:	01210121 	.word	0x01210121
 8032918:	00fe0073 	.word	0x00fe0073
 803291c:	01210121 	.word	0x01210121
 8032920:	01210121 	.word	0x01210121
 8032924:	01210121 	.word	0x01210121
 8032928:	00af0121 	.word	0x00af0121
 803292c:	006d006d 	.word	0x006d006d
 8032930:	011e006d 	.word	0x011e006d
 8032934:	012100ed 	.word	0x012100ed
 8032938:	00d60121 	.word	0x00d60121
 803293c:	01210121 	.word	0x01210121
 8032940:	01210121 	.word	0x01210121
 8032944:	01210090 	.word	0x01210090
 8032948:	01210104 	.word	0x01210104
 803294c:	01210121 	.word	0x01210121
 8032950:	012100f8 	.word	0x012100f8
 8032954:	01210121 	.word	0x01210121
 8032958:	00fe0073 	.word	0x00fe0073
 803295c:	05f1      	lsls	r1, r6, #23
 803295e:	d51d      	bpl.n	803299c <__ssvfscanf_r+0xfa8>
 8032960:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8032964:	f10a 0a01 	add.w	sl, sl, #1
 8032968:	b11b      	cbz	r3, 8032972 <__ssvfscanf_r+0xf7e>
 803296a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 803296c:	3001      	adds	r0, #1
 803296e:	3b01      	subs	r3, #1
 8032970:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8032972:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8032974:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8032976:	3001      	adds	r0, #1
 8032978:	6338      	str	r0, [r7, #48]	@ 0x30
 803297a:	6860      	ldr	r0, [r4, #4]
 803297c:	3801      	subs	r0, #1
 803297e:	3901      	subs	r1, #1
 8032980:	2800      	cmp	r0, #0
 8032982:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8032984:	6060      	str	r0, [r4, #4]
 8032986:	f340 80cc 	ble.w	8032b22 <__ssvfscanf_r+0x112e>
 803298a:	6879      	ldr	r1, [r7, #4]
 803298c:	3101      	adds	r1, #1
 803298e:	6021      	str	r1, [r4, #0]
 8032990:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8032992:	2900      	cmp	r1, #0
 8032994:	d188      	bne.n	80328a8 <__ssvfscanf_r+0xeb4>
 8032996:	e052      	b.n	8032a3e <__ssvfscanf_r+0x104a>
 8032998:	0531      	lsls	r1, r6, #20
 803299a:	d550      	bpl.n	8032a3e <__ssvfscanf_r+0x104a>
 803299c:	eb1b 0c08 	adds.w	ip, fp, r8
 80329a0:	d041      	beq.n	8032a26 <__ssvfscanf_r+0x1032>
 80329a2:	e04c      	b.n	8032a3e <__ssvfscanf_r+0x104a>
 80329a4:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 80329a8:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 80329ac:	d147      	bne.n	8032a3e <__ssvfscanf_r+0x104a>
 80329ae:	f1ba 0f01 	cmp.w	sl, #1
 80329b2:	d144      	bne.n	8032a3e <__ssvfscanf_r+0x104a>
 80329b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80329b6:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 80329ba:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 80329be:	3901      	subs	r1, #1
 80329c0:	f809 cb01 	strb.w	ip, [r9], #1
 80329c4:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 80329c8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80329ca:	f04f 0a00 	mov.w	sl, #0
 80329ce:	e003      	b.n	80329d8 <__ssvfscanf_r+0xfe4>
 80329d0:	0631      	lsls	r1, r6, #24
 80329d2:	d534      	bpl.n	8032a3e <__ssvfscanf_r+0x104a>
 80329d4:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 80329d8:	f809 0b01 	strb.w	r0, [r9], #1
 80329dc:	e7c9      	b.n	8032972 <__ssvfscanf_r+0xf7e>
 80329de:	f1bb 0f00 	cmp.w	fp, #0
 80329e2:	d10c      	bne.n	80329fe <__ssvfscanf_r+0x100a>
 80329e4:	f1ba 0f00 	cmp.w	sl, #0
 80329e8:	d10d      	bne.n	8032a06 <__ssvfscanf_r+0x1012>
 80329ea:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 80329ee:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 80329f2:	d108      	bne.n	8032a06 <__ssvfscanf_r+0x1012>
 80329f4:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 80329f8:	f04f 0b01 	mov.w	fp, #1
 80329fc:	e7ec      	b.n	80329d8 <__ssvfscanf_r+0xfe4>
 80329fe:	f1bb 0f02 	cmp.w	fp, #2
 8032a02:	f000 8088 	beq.w	8032b16 <__ssvfscanf_r+0x1122>
 8032a06:	f1b8 0f01 	cmp.w	r8, #1
 8032a0a:	d002      	beq.n	8032a12 <__ssvfscanf_r+0x101e>
 8032a0c:	f1b8 0f04 	cmp.w	r8, #4
 8032a10:	d115      	bne.n	8032a3e <__ssvfscanf_r+0x104a>
 8032a12:	f108 0801 	add.w	r8, r8, #1
 8032a16:	fa5f f888 	uxtb.w	r8, r8
 8032a1a:	e7dd      	b.n	80329d8 <__ssvfscanf_r+0xfe4>
 8032a1c:	0531      	lsls	r1, r6, #20
 8032a1e:	d50b      	bpl.n	8032a38 <__ssvfscanf_r+0x1044>
 8032a20:	eb1b 0c08 	adds.w	ip, fp, r8
 8032a24:	d108      	bne.n	8032a38 <__ssvfscanf_r+0x1044>
 8032a26:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 8032a2a:	46e0      	mov	r8, ip
 8032a2c:	46e3      	mov	fp, ip
 8032a2e:	e7d3      	b.n	80329d8 <__ssvfscanf_r+0xfe4>
 8032a30:	0803b5a8 	.word	0x0803b5a8
 8032a34:	08034789 	.word	0x08034789
 8032a38:	f1bb 0f01 	cmp.w	fp, #1
 8032a3c:	d06e      	beq.n	8032b1c <__ssvfscanf_r+0x1128>
 8032a3e:	f1ba 0f00 	cmp.w	sl, #0
 8032a42:	d001      	beq.n	8032a48 <__ssvfscanf_r+0x1054>
 8032a44:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 8032a48:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8032a4c:	f1bb 0f01 	cmp.w	fp, #1
 8032a50:	d873      	bhi.n	8032b3a <__ssvfscanf_r+0x1146>
 8032a52:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 8032a56:	45a9      	cmp	r9, r5
 8032a58:	f67f a8c2 	bls.w	8031be0 <__ssvfscanf_r+0x1ec>
 8032a5c:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8032a60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032a62:	4622      	mov	r2, r4
 8032a64:	f7fc fdd6 	bl	802f614 <_sungetc_r>
 8032a68:	e7f5      	b.n	8032a56 <__ssvfscanf_r+0x1062>
 8032a6a:	f1b8 0f00 	cmp.w	r8, #0
 8032a6e:	d10d      	bne.n	8032a8c <__ssvfscanf_r+0x1098>
 8032a70:	f1ba 0f00 	cmp.w	sl, #0
 8032a74:	d1e6      	bne.n	8032a44 <__ssvfscanf_r+0x1050>
 8032a76:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 8032a7a:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 8032a7e:	f040 8124 	bne.w	8032cca <__ssvfscanf_r+0x12d6>
 8032a82:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8032a86:	f04f 0801 	mov.w	r8, #1
 8032a8a:	e7a5      	b.n	80329d8 <__ssvfscanf_r+0xfe4>
 8032a8c:	f1b8 0f03 	cmp.w	r8, #3
 8032a90:	d0bf      	beq.n	8032a12 <__ssvfscanf_r+0x101e>
 8032a92:	f1b8 0f05 	cmp.w	r8, #5
 8032a96:	e7bb      	b.n	8032a10 <__ssvfscanf_r+0x101c>
 8032a98:	0531      	lsls	r1, r6, #20
 8032a9a:	d502      	bpl.n	8032aa2 <__ssvfscanf_r+0x10ae>
 8032a9c:	eb1b 0c08 	adds.w	ip, fp, r8
 8032aa0:	d0c1      	beq.n	8032a26 <__ssvfscanf_r+0x1032>
 8032aa2:	f1b8 0f02 	cmp.w	r8, #2
 8032aa6:	d1ca      	bne.n	8032a3e <__ssvfscanf_r+0x104a>
 8032aa8:	f04f 0803 	mov.w	r8, #3
 8032aac:	e794      	b.n	80329d8 <__ssvfscanf_r+0xfe4>
 8032aae:	f1b8 0f06 	cmp.w	r8, #6
 8032ab2:	d1c4      	bne.n	8032a3e <__ssvfscanf_r+0x104a>
 8032ab4:	f04f 0807 	mov.w	r8, #7
 8032ab8:	e78e      	b.n	80329d8 <__ssvfscanf_r+0xfe4>
 8032aba:	f1b8 0f07 	cmp.w	r8, #7
 8032abe:	d1be      	bne.n	8032a3e <__ssvfscanf_r+0x104a>
 8032ac0:	f04f 0808 	mov.w	r8, #8
 8032ac4:	e788      	b.n	80329d8 <__ssvfscanf_r+0xfe4>
 8032ac6:	0531      	lsls	r1, r6, #20
 8032ac8:	d5b9      	bpl.n	8032a3e <__ssvfscanf_r+0x104a>
 8032aca:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 8032ace:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 8032ad2:	d005      	beq.n	8032ae0 <__ssvfscanf_r+0x10ec>
 8032ad4:	0571      	lsls	r1, r6, #21
 8032ad6:	d5b2      	bpl.n	8032a3e <__ssvfscanf_r+0x104a>
 8032ad8:	f1ba 0f00 	cmp.w	sl, #0
 8032adc:	f000 80f5 	beq.w	8032cca <__ssvfscanf_r+0x12d6>
 8032ae0:	05b1      	lsls	r1, r6, #22
 8032ae2:	bf58      	it	pl
 8032ae4:	6939      	ldrpl	r1, [r7, #16]
 8032ae6:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 8032aea:	bf5c      	itt	pl
 8032aec:	ebaa 0101 	subpl.w	r1, sl, r1
 8032af0:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 8032af4:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 8032af8:	e767      	b.n	80329ca <__ssvfscanf_r+0xfd6>
 8032afa:	0531      	lsls	r1, r6, #20
 8032afc:	d5e5      	bpl.n	8032aca <__ssvfscanf_r+0x10d6>
 8032afe:	e74d      	b.n	803299c <__ssvfscanf_r+0xfa8>
 8032b00:	f892 c000 	ldrb.w	ip, [r2]
 8032b04:	4584      	cmp	ip, r0
 8032b06:	d19a      	bne.n	8032a3e <__ssvfscanf_r+0x104a>
 8032b08:	05b1      	lsls	r1, r6, #22
 8032b0a:	d598      	bpl.n	8032a3e <__ssvfscanf_r+0x104a>
 8032b0c:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 8032b10:	f8c7 a010 	str.w	sl, [r7, #16]
 8032b14:	e760      	b.n	80329d8 <__ssvfscanf_r+0xfe4>
 8032b16:	f04f 0b03 	mov.w	fp, #3
 8032b1a:	e75d      	b.n	80329d8 <__ssvfscanf_r+0xfe4>
 8032b1c:	f04f 0b02 	mov.w	fp, #2
 8032b20:	e75a      	b.n	80329d8 <__ssvfscanf_r+0xfe4>
 8032b22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032b24:	4621      	mov	r1, r4
 8032b26:	e9c7 2300 	strd	r2, r3, [r7]
 8032b2a:	f7fc fdae 	bl	802f68a <__ssrefill_r>
 8032b2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8032b32:	2800      	cmp	r0, #0
 8032b34:	f43f af2c 	beq.w	8032990 <__ssvfscanf_r+0xf9c>
 8032b38:	e781      	b.n	8032a3e <__ssvfscanf_r+0x104a>
 8032b3a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8032b3e:	2b06      	cmp	r3, #6
 8032b40:	d827      	bhi.n	8032b92 <__ssvfscanf_r+0x119e>
 8032b42:	f1b8 0f02 	cmp.w	r8, #2
 8032b46:	d834      	bhi.n	8032bb2 <__ssvfscanf_r+0x11be>
 8032b48:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 8032b4c:	45a9      	cmp	r9, r5
 8032b4e:	f67f a847 	bls.w	8031be0 <__ssvfscanf_r+0x1ec>
 8032b52:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8032b56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032b58:	4622      	mov	r2, r4
 8032b5a:	f7fc fd5b 	bl	802f614 <_sungetc_r>
 8032b5e:	e7f5      	b.n	8032b4c <__ssvfscanf_r+0x1158>
 8032b60:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8032b64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032b68:	4622      	mov	r2, r4
 8032b6a:	f7fc fd53 	bl	802f614 <_sungetc_r>
 8032b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032b70:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8032b74:	fa5f fb8b 	uxtb.w	fp, fp
 8032b78:	f1bb 0f02 	cmp.w	fp, #2
 8032b7c:	d1f0      	bne.n	8032b60 <__ssvfscanf_r+0x116c>
 8032b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032b80:	f1a8 0803 	sub.w	r8, r8, #3
 8032b84:	fa5f f888 	uxtb.w	r8, r8
 8032b88:	eba3 0308 	sub.w	r3, r3, r8
 8032b8c:	eba9 0908 	sub.w	r9, r9, r8
 8032b90:	633b      	str	r3, [r7, #48]	@ 0x30
 8032b92:	05f3      	lsls	r3, r6, #23
 8032b94:	d52d      	bpl.n	8032bf2 <__ssvfscanf_r+0x11fe>
 8032b96:	0570      	lsls	r0, r6, #21
 8032b98:	d50e      	bpl.n	8032bb8 <__ssvfscanf_r+0x11c4>
 8032b9a:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 8032b9e:	45a9      	cmp	r9, r5
 8032ba0:	f67f a81e 	bls.w	8031be0 <__ssvfscanf_r+0x1ec>
 8032ba4:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8032ba8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032baa:	4622      	mov	r2, r4
 8032bac:	f7fc fd32 	bl	802f614 <_sungetc_r>
 8032bb0:	e7f5      	b.n	8032b9e <__ssvfscanf_r+0x11aa>
 8032bb2:	46c3      	mov	fp, r8
 8032bb4:	464b      	mov	r3, r9
 8032bb6:	e7db      	b.n	8032b70 <__ssvfscanf_r+0x117c>
 8032bb8:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 8032bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032bbe:	2965      	cmp	r1, #101	@ 0x65
 8032bc0:	f109 38ff 	add.w	r8, r9, #4294967295	@ 0xffffffff
 8032bc4:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8032bc8:	d00c      	beq.n	8032be4 <__ssvfscanf_r+0x11f0>
 8032bca:	2945      	cmp	r1, #69	@ 0x45
 8032bcc:	d00a      	beq.n	8032be4 <__ssvfscanf_r+0x11f0>
 8032bce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032bd0:	4622      	mov	r2, r4
 8032bd2:	f7fc fd1f 	bl	802f614 <_sungetc_r>
 8032bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032bd8:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 8032bdc:	f1a9 0802 	sub.w	r8, r9, #2
 8032be0:	f1a3 0b02 	sub.w	fp, r3, #2
 8032be4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032be6:	4622      	mov	r2, r4
 8032be8:	f7fc fd14 	bl	802f614 <_sungetc_r>
 8032bec:	46c1      	mov	r9, r8
 8032bee:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 8032bf2:	f016 0210 	ands.w	r2, r6, #16
 8032bf6:	f47e af18 	bne.w	8031a2a <__ssvfscanf_r+0x36>
 8032bfa:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 8032bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8032c02:	f889 2000 	strb.w	r2, [r9]
 8032c06:	d119      	bne.n	8032c3c <__ssvfscanf_r+0x1248>
 8032c08:	693b      	ldr	r3, [r7, #16]
 8032c0a:	4553      	cmp	r3, sl
 8032c0c:	eba3 020a 	sub.w	r2, r3, sl
 8032c10:	d121      	bne.n	8032c56 <__ssvfscanf_r+0x1262>
 8032c12:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8032c16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032c18:	2200      	movs	r2, #0
 8032c1a:	f001 fd41 	bl	80346a0 <_strtod_r>
 8032c1e:	07f1      	lsls	r1, r6, #31
 8032c20:	ec59 8b10 	vmov	r8, r9, d0
 8032c24:	f105 0a04 	add.w	sl, r5, #4
 8032c28:	d520      	bpl.n	8032c6c <__ssvfscanf_r+0x1278>
 8032c2a:	682b      	ldr	r3, [r5, #0]
 8032c2c:	ed83 0b00 	vstr	d0, [r3]
 8032c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032c32:	3301      	adds	r3, #1
 8032c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8032c36:	4655      	mov	r5, sl
 8032c38:	f7fe bef7 	b.w	8031a2a <__ssvfscanf_r+0x36>
 8032c3c:	68fb      	ldr	r3, [r7, #12]
 8032c3e:	2b00      	cmp	r3, #0
 8032c40:	d0e7      	beq.n	8032c12 <__ssvfscanf_r+0x121e>
 8032c42:	68b9      	ldr	r1, [r7, #8]
 8032c44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032c46:	230a      	movs	r3, #10
 8032c48:	3101      	adds	r1, #1
 8032c4a:	f7f8 fe9d 	bl	802b988 <_strtol_r>
 8032c4e:	68fb      	ldr	r3, [r7, #12]
 8032c50:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8032c54:	1ac2      	subs	r2, r0, r3
 8032c56:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 8032c5a:	4599      	cmp	r9, r3
 8032c5c:	bf28      	it	cs
 8032c5e:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 8032c62:	491b      	ldr	r1, [pc, #108]	@ (8032cd0 <__ssvfscanf_r+0x12dc>)
 8032c64:	4648      	mov	r0, r9
 8032c66:	f7f8 ff49 	bl	802bafc <sprintf>
 8032c6a:	e7d2      	b.n	8032c12 <__ssvfscanf_r+0x121e>
 8032c6c:	07b2      	lsls	r2, r6, #30
 8032c6e:	682d      	ldr	r5, [r5, #0]
 8032c70:	d502      	bpl.n	8032c78 <__ssvfscanf_r+0x1284>
 8032c72:	ed85 0b00 	vstr	d0, [r5]
 8032c76:	e7db      	b.n	8032c30 <__ssvfscanf_r+0x123c>
 8032c78:	4642      	mov	r2, r8
 8032c7a:	464b      	mov	r3, r9
 8032c7c:	4640      	mov	r0, r8
 8032c7e:	4649      	mov	r1, r9
 8032c80:	f7dd ff6c 	bl	8010b5c <__aeabi_dcmpun>
 8032c84:	b128      	cbz	r0, 8032c92 <__ssvfscanf_r+0x129e>
 8032c86:	4813      	ldr	r0, [pc, #76]	@ (8032cd4 <__ssvfscanf_r+0x12e0>)
 8032c88:	f002 f8f6 	bl	8034e78 <nanf>
 8032c8c:	ed85 0a00 	vstr	s0, [r5]
 8032c90:	e7ce      	b.n	8032c30 <__ssvfscanf_r+0x123c>
 8032c92:	4640      	mov	r0, r8
 8032c94:	4649      	mov	r1, r9
 8032c96:	f7dd ffbf 	bl	8010c18 <__aeabi_d2f>
 8032c9a:	6028      	str	r0, [r5, #0]
 8032c9c:	e7c8      	b.n	8032c30 <__ssvfscanf_r+0x123c>
 8032c9e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8032ca2:	6818      	ldr	r0, [r3, #0]
 8032ca4:	f7fb fd3a 	bl	802e71c <free>
 8032ca8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8032cac:	3401      	adds	r4, #1
 8032cae:	601e      	str	r6, [r3, #0]
 8032cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032cb2:	681d      	ldr	r5, [r3, #0]
 8032cb4:	88db      	ldrh	r3, [r3, #6]
 8032cb6:	42a3      	cmp	r3, r4
 8032cb8:	dcf1      	bgt.n	8032c9e <__ssvfscanf_r+0x12aa>
 8032cba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8032cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8032cc0:	f7ff b85c 	b.w	8031d7c <__ssvfscanf_r+0x388>
 8032cc4:	2400      	movs	r4, #0
 8032cc6:	4626      	mov	r6, r4
 8032cc8:	e7f2      	b.n	8032cb0 <__ssvfscanf_r+0x12bc>
 8032cca:	f04f 0a00 	mov.w	sl, #0
 8032cce:	e6bb      	b.n	8032a48 <__ssvfscanf_r+0x1054>
 8032cd0:	0803b5a2 	.word	0x0803b5a2
 8032cd4:	0803b00a 	.word	0x0803b00a

08032cd8 <_putc_r>:
 8032cd8:	b570      	push	{r4, r5, r6, lr}
 8032cda:	460d      	mov	r5, r1
 8032cdc:	4614      	mov	r4, r2
 8032cde:	4606      	mov	r6, r0
 8032ce0:	b118      	cbz	r0, 8032cea <_putc_r+0x12>
 8032ce2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8032ce4:	b90b      	cbnz	r3, 8032cea <_putc_r+0x12>
 8032ce6:	f7f9 f825 	bl	802bd34 <__sinit>
 8032cea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8032cec:	07d8      	lsls	r0, r3, #31
 8032cee:	d405      	bmi.n	8032cfc <_putc_r+0x24>
 8032cf0:	89a3      	ldrh	r3, [r4, #12]
 8032cf2:	0599      	lsls	r1, r3, #22
 8032cf4:	d402      	bmi.n	8032cfc <_putc_r+0x24>
 8032cf6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8032cf8:	f7fa fcfb 	bl	802d6f2 <__retarget_lock_acquire_recursive>
 8032cfc:	68a3      	ldr	r3, [r4, #8]
 8032cfe:	3b01      	subs	r3, #1
 8032d00:	2b00      	cmp	r3, #0
 8032d02:	60a3      	str	r3, [r4, #8]
 8032d04:	da05      	bge.n	8032d12 <_putc_r+0x3a>
 8032d06:	69a2      	ldr	r2, [r4, #24]
 8032d08:	4293      	cmp	r3, r2
 8032d0a:	db12      	blt.n	8032d32 <_putc_r+0x5a>
 8032d0c:	b2eb      	uxtb	r3, r5
 8032d0e:	2b0a      	cmp	r3, #10
 8032d10:	d00f      	beq.n	8032d32 <_putc_r+0x5a>
 8032d12:	6823      	ldr	r3, [r4, #0]
 8032d14:	1c5a      	adds	r2, r3, #1
 8032d16:	6022      	str	r2, [r4, #0]
 8032d18:	701d      	strb	r5, [r3, #0]
 8032d1a:	b2ed      	uxtb	r5, r5
 8032d1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8032d1e:	07da      	lsls	r2, r3, #31
 8032d20:	d405      	bmi.n	8032d2e <_putc_r+0x56>
 8032d22:	89a3      	ldrh	r3, [r4, #12]
 8032d24:	059b      	lsls	r3, r3, #22
 8032d26:	d402      	bmi.n	8032d2e <_putc_r+0x56>
 8032d28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8032d2a:	f7fa fce4 	bl	802d6f6 <__retarget_lock_release_recursive>
 8032d2e:	4628      	mov	r0, r5
 8032d30:	bd70      	pop	{r4, r5, r6, pc}
 8032d32:	4629      	mov	r1, r5
 8032d34:	4622      	mov	r2, r4
 8032d36:	4630      	mov	r0, r6
 8032d38:	f001 fd79 	bl	803482e <__swbuf_r>
 8032d3c:	4605      	mov	r5, r0
 8032d3e:	e7ed      	b.n	8032d1c <_putc_r+0x44>

08032d40 <__malloc_lock>:
 8032d40:	4801      	ldr	r0, [pc, #4]	@ (8032d48 <__malloc_lock+0x8>)
 8032d42:	f7fa bcd6 	b.w	802d6f2 <__retarget_lock_acquire_recursive>
 8032d46:	bf00      	nop
 8032d48:	2001a032 	.word	0x2001a032

08032d4c <__malloc_unlock>:
 8032d4c:	4801      	ldr	r0, [pc, #4]	@ (8032d54 <__malloc_unlock+0x8>)
 8032d4e:	f7fa bcd2 	b.w	802d6f6 <__retarget_lock_release_recursive>
 8032d52:	bf00      	nop
 8032d54:	2001a032 	.word	0x2001a032

08032d58 <_Balloc>:
 8032d58:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8032d5a:	b570      	push	{r4, r5, r6, lr}
 8032d5c:	4605      	mov	r5, r0
 8032d5e:	460c      	mov	r4, r1
 8032d60:	b17b      	cbz	r3, 8032d82 <_Balloc+0x2a>
 8032d62:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8032d64:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8032d68:	b9a0      	cbnz	r0, 8032d94 <_Balloc+0x3c>
 8032d6a:	2101      	movs	r1, #1
 8032d6c:	fa01 f604 	lsl.w	r6, r1, r4
 8032d70:	1d72      	adds	r2, r6, #5
 8032d72:	0092      	lsls	r2, r2, #2
 8032d74:	4628      	mov	r0, r5
 8032d76:	f002 f885 	bl	8034e84 <_calloc_r>
 8032d7a:	b148      	cbz	r0, 8032d90 <_Balloc+0x38>
 8032d7c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8032d80:	e00b      	b.n	8032d9a <_Balloc+0x42>
 8032d82:	2221      	movs	r2, #33	@ 0x21
 8032d84:	2104      	movs	r1, #4
 8032d86:	f002 f87d 	bl	8034e84 <_calloc_r>
 8032d8a:	6468      	str	r0, [r5, #68]	@ 0x44
 8032d8c:	2800      	cmp	r0, #0
 8032d8e:	d1e8      	bne.n	8032d62 <_Balloc+0xa>
 8032d90:	2000      	movs	r0, #0
 8032d92:	bd70      	pop	{r4, r5, r6, pc}
 8032d94:	6802      	ldr	r2, [r0, #0]
 8032d96:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8032d9a:	2300      	movs	r3, #0
 8032d9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8032da0:	e7f7      	b.n	8032d92 <_Balloc+0x3a>

08032da2 <_Bfree>:
 8032da2:	b131      	cbz	r1, 8032db2 <_Bfree+0x10>
 8032da4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8032da6:	684a      	ldr	r2, [r1, #4]
 8032da8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8032dac:	6008      	str	r0, [r1, #0]
 8032dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8032db2:	4770      	bx	lr

08032db4 <__multadd>:
 8032db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8032db8:	690d      	ldr	r5, [r1, #16]
 8032dba:	4607      	mov	r7, r0
 8032dbc:	460c      	mov	r4, r1
 8032dbe:	461e      	mov	r6, r3
 8032dc0:	f101 0c14 	add.w	ip, r1, #20
 8032dc4:	2000      	movs	r0, #0
 8032dc6:	f8dc 3000 	ldr.w	r3, [ip]
 8032dca:	b299      	uxth	r1, r3
 8032dcc:	fb02 6101 	mla	r1, r2, r1, r6
 8032dd0:	0c1e      	lsrs	r6, r3, #16
 8032dd2:	0c0b      	lsrs	r3, r1, #16
 8032dd4:	fb02 3306 	mla	r3, r2, r6, r3
 8032dd8:	b289      	uxth	r1, r1
 8032dda:	3001      	adds	r0, #1
 8032ddc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8032de0:	4285      	cmp	r5, r0
 8032de2:	f84c 1b04 	str.w	r1, [ip], #4
 8032de6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8032dea:	dcec      	bgt.n	8032dc6 <__multadd+0x12>
 8032dec:	b30e      	cbz	r6, 8032e32 <__multadd+0x7e>
 8032dee:	68a3      	ldr	r3, [r4, #8]
 8032df0:	42ab      	cmp	r3, r5
 8032df2:	dc19      	bgt.n	8032e28 <__multadd+0x74>
 8032df4:	6861      	ldr	r1, [r4, #4]
 8032df6:	4638      	mov	r0, r7
 8032df8:	3101      	adds	r1, #1
 8032dfa:	f7ff ffad 	bl	8032d58 <_Balloc>
 8032dfe:	4680      	mov	r8, r0
 8032e00:	b928      	cbnz	r0, 8032e0e <__multadd+0x5a>
 8032e02:	4602      	mov	r2, r0
 8032e04:	4b0c      	ldr	r3, [pc, #48]	@ (8032e38 <__multadd+0x84>)
 8032e06:	480d      	ldr	r0, [pc, #52]	@ (8032e3c <__multadd+0x88>)
 8032e08:	21ba      	movs	r1, #186	@ 0xba
 8032e0a:	f7f6 fce7 	bl	80297dc <__assert_func>
 8032e0e:	6922      	ldr	r2, [r4, #16]
 8032e10:	3202      	adds	r2, #2
 8032e12:	f104 010c 	add.w	r1, r4, #12
 8032e16:	0092      	lsls	r2, r2, #2
 8032e18:	300c      	adds	r0, #12
 8032e1a:	f7fa fc6d 	bl	802d6f8 <memcpy>
 8032e1e:	4621      	mov	r1, r4
 8032e20:	4638      	mov	r0, r7
 8032e22:	f7ff ffbe 	bl	8032da2 <_Bfree>
 8032e26:	4644      	mov	r4, r8
 8032e28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8032e2c:	3501      	adds	r5, #1
 8032e2e:	615e      	str	r6, [r3, #20]
 8032e30:	6125      	str	r5, [r4, #16]
 8032e32:	4620      	mov	r0, r4
 8032e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8032e38:	0803b4d6 	.word	0x0803b4d6
 8032e3c:	0803b5ca 	.word	0x0803b5ca

08032e40 <__s2b>:
 8032e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8032e44:	460c      	mov	r4, r1
 8032e46:	4615      	mov	r5, r2
 8032e48:	461f      	mov	r7, r3
 8032e4a:	2209      	movs	r2, #9
 8032e4c:	3308      	adds	r3, #8
 8032e4e:	4606      	mov	r6, r0
 8032e50:	fb93 f3f2 	sdiv	r3, r3, r2
 8032e54:	2100      	movs	r1, #0
 8032e56:	2201      	movs	r2, #1
 8032e58:	429a      	cmp	r2, r3
 8032e5a:	db09      	blt.n	8032e70 <__s2b+0x30>
 8032e5c:	4630      	mov	r0, r6
 8032e5e:	f7ff ff7b 	bl	8032d58 <_Balloc>
 8032e62:	b940      	cbnz	r0, 8032e76 <__s2b+0x36>
 8032e64:	4602      	mov	r2, r0
 8032e66:	4b19      	ldr	r3, [pc, #100]	@ (8032ecc <__s2b+0x8c>)
 8032e68:	4819      	ldr	r0, [pc, #100]	@ (8032ed0 <__s2b+0x90>)
 8032e6a:	21d3      	movs	r1, #211	@ 0xd3
 8032e6c:	f7f6 fcb6 	bl	80297dc <__assert_func>
 8032e70:	0052      	lsls	r2, r2, #1
 8032e72:	3101      	adds	r1, #1
 8032e74:	e7f0      	b.n	8032e58 <__s2b+0x18>
 8032e76:	9b08      	ldr	r3, [sp, #32]
 8032e78:	6143      	str	r3, [r0, #20]
 8032e7a:	2d09      	cmp	r5, #9
 8032e7c:	f04f 0301 	mov.w	r3, #1
 8032e80:	6103      	str	r3, [r0, #16]
 8032e82:	dd16      	ble.n	8032eb2 <__s2b+0x72>
 8032e84:	f104 0909 	add.w	r9, r4, #9
 8032e88:	46c8      	mov	r8, r9
 8032e8a:	442c      	add	r4, r5
 8032e8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8032e90:	4601      	mov	r1, r0
 8032e92:	3b30      	subs	r3, #48	@ 0x30
 8032e94:	220a      	movs	r2, #10
 8032e96:	4630      	mov	r0, r6
 8032e98:	f7ff ff8c 	bl	8032db4 <__multadd>
 8032e9c:	45a0      	cmp	r8, r4
 8032e9e:	d1f5      	bne.n	8032e8c <__s2b+0x4c>
 8032ea0:	f1a5 0408 	sub.w	r4, r5, #8
 8032ea4:	444c      	add	r4, r9
 8032ea6:	1b2d      	subs	r5, r5, r4
 8032ea8:	1963      	adds	r3, r4, r5
 8032eaa:	42bb      	cmp	r3, r7
 8032eac:	db04      	blt.n	8032eb8 <__s2b+0x78>
 8032eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8032eb2:	340a      	adds	r4, #10
 8032eb4:	2509      	movs	r5, #9
 8032eb6:	e7f6      	b.n	8032ea6 <__s2b+0x66>
 8032eb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8032ebc:	4601      	mov	r1, r0
 8032ebe:	3b30      	subs	r3, #48	@ 0x30
 8032ec0:	220a      	movs	r2, #10
 8032ec2:	4630      	mov	r0, r6
 8032ec4:	f7ff ff76 	bl	8032db4 <__multadd>
 8032ec8:	e7ee      	b.n	8032ea8 <__s2b+0x68>
 8032eca:	bf00      	nop
 8032ecc:	0803b4d6 	.word	0x0803b4d6
 8032ed0:	0803b5ca 	.word	0x0803b5ca

08032ed4 <__hi0bits>:
 8032ed4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8032ed8:	4603      	mov	r3, r0
 8032eda:	bf36      	itet	cc
 8032edc:	0403      	lslcc	r3, r0, #16
 8032ede:	2000      	movcs	r0, #0
 8032ee0:	2010      	movcc	r0, #16
 8032ee2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8032ee6:	bf3c      	itt	cc
 8032ee8:	021b      	lslcc	r3, r3, #8
 8032eea:	3008      	addcc	r0, #8
 8032eec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8032ef0:	bf3c      	itt	cc
 8032ef2:	011b      	lslcc	r3, r3, #4
 8032ef4:	3004      	addcc	r0, #4
 8032ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8032efa:	bf3c      	itt	cc
 8032efc:	009b      	lslcc	r3, r3, #2
 8032efe:	3002      	addcc	r0, #2
 8032f00:	2b00      	cmp	r3, #0
 8032f02:	db05      	blt.n	8032f10 <__hi0bits+0x3c>
 8032f04:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8032f08:	f100 0001 	add.w	r0, r0, #1
 8032f0c:	bf08      	it	eq
 8032f0e:	2020      	moveq	r0, #32
 8032f10:	4770      	bx	lr

08032f12 <__lo0bits>:
 8032f12:	6803      	ldr	r3, [r0, #0]
 8032f14:	4602      	mov	r2, r0
 8032f16:	f013 0007 	ands.w	r0, r3, #7
 8032f1a:	d00b      	beq.n	8032f34 <__lo0bits+0x22>
 8032f1c:	07d9      	lsls	r1, r3, #31
 8032f1e:	d421      	bmi.n	8032f64 <__lo0bits+0x52>
 8032f20:	0798      	lsls	r0, r3, #30
 8032f22:	bf49      	itett	mi
 8032f24:	085b      	lsrmi	r3, r3, #1
 8032f26:	089b      	lsrpl	r3, r3, #2
 8032f28:	2001      	movmi	r0, #1
 8032f2a:	6013      	strmi	r3, [r2, #0]
 8032f2c:	bf5c      	itt	pl
 8032f2e:	6013      	strpl	r3, [r2, #0]
 8032f30:	2002      	movpl	r0, #2
 8032f32:	4770      	bx	lr
 8032f34:	b299      	uxth	r1, r3
 8032f36:	b909      	cbnz	r1, 8032f3c <__lo0bits+0x2a>
 8032f38:	0c1b      	lsrs	r3, r3, #16
 8032f3a:	2010      	movs	r0, #16
 8032f3c:	b2d9      	uxtb	r1, r3
 8032f3e:	b909      	cbnz	r1, 8032f44 <__lo0bits+0x32>
 8032f40:	3008      	adds	r0, #8
 8032f42:	0a1b      	lsrs	r3, r3, #8
 8032f44:	0719      	lsls	r1, r3, #28
 8032f46:	bf04      	itt	eq
 8032f48:	091b      	lsreq	r3, r3, #4
 8032f4a:	3004      	addeq	r0, #4
 8032f4c:	0799      	lsls	r1, r3, #30
 8032f4e:	bf04      	itt	eq
 8032f50:	089b      	lsreq	r3, r3, #2
 8032f52:	3002      	addeq	r0, #2
 8032f54:	07d9      	lsls	r1, r3, #31
 8032f56:	d403      	bmi.n	8032f60 <__lo0bits+0x4e>
 8032f58:	085b      	lsrs	r3, r3, #1
 8032f5a:	f100 0001 	add.w	r0, r0, #1
 8032f5e:	d003      	beq.n	8032f68 <__lo0bits+0x56>
 8032f60:	6013      	str	r3, [r2, #0]
 8032f62:	4770      	bx	lr
 8032f64:	2000      	movs	r0, #0
 8032f66:	4770      	bx	lr
 8032f68:	2020      	movs	r0, #32
 8032f6a:	4770      	bx	lr

08032f6c <__i2b>:
 8032f6c:	b510      	push	{r4, lr}
 8032f6e:	460c      	mov	r4, r1
 8032f70:	2101      	movs	r1, #1
 8032f72:	f7ff fef1 	bl	8032d58 <_Balloc>
 8032f76:	4602      	mov	r2, r0
 8032f78:	b928      	cbnz	r0, 8032f86 <__i2b+0x1a>
 8032f7a:	4b05      	ldr	r3, [pc, #20]	@ (8032f90 <__i2b+0x24>)
 8032f7c:	4805      	ldr	r0, [pc, #20]	@ (8032f94 <__i2b+0x28>)
 8032f7e:	f240 1145 	movw	r1, #325	@ 0x145
 8032f82:	f7f6 fc2b 	bl	80297dc <__assert_func>
 8032f86:	2301      	movs	r3, #1
 8032f88:	6144      	str	r4, [r0, #20]
 8032f8a:	6103      	str	r3, [r0, #16]
 8032f8c:	bd10      	pop	{r4, pc}
 8032f8e:	bf00      	nop
 8032f90:	0803b4d6 	.word	0x0803b4d6
 8032f94:	0803b5ca 	.word	0x0803b5ca

08032f98 <__multiply>:
 8032f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032f9c:	4614      	mov	r4, r2
 8032f9e:	690a      	ldr	r2, [r1, #16]
 8032fa0:	6923      	ldr	r3, [r4, #16]
 8032fa2:	429a      	cmp	r2, r3
 8032fa4:	bfa8      	it	ge
 8032fa6:	4623      	movge	r3, r4
 8032fa8:	460f      	mov	r7, r1
 8032faa:	bfa4      	itt	ge
 8032fac:	460c      	movge	r4, r1
 8032fae:	461f      	movge	r7, r3
 8032fb0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8032fb4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8032fb8:	68a3      	ldr	r3, [r4, #8]
 8032fba:	6861      	ldr	r1, [r4, #4]
 8032fbc:	eb0a 0609 	add.w	r6, sl, r9
 8032fc0:	42b3      	cmp	r3, r6
 8032fc2:	b085      	sub	sp, #20
 8032fc4:	bfb8      	it	lt
 8032fc6:	3101      	addlt	r1, #1
 8032fc8:	f7ff fec6 	bl	8032d58 <_Balloc>
 8032fcc:	b930      	cbnz	r0, 8032fdc <__multiply+0x44>
 8032fce:	4602      	mov	r2, r0
 8032fd0:	4b44      	ldr	r3, [pc, #272]	@ (80330e4 <__multiply+0x14c>)
 8032fd2:	4845      	ldr	r0, [pc, #276]	@ (80330e8 <__multiply+0x150>)
 8032fd4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8032fd8:	f7f6 fc00 	bl	80297dc <__assert_func>
 8032fdc:	f100 0514 	add.w	r5, r0, #20
 8032fe0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8032fe4:	462b      	mov	r3, r5
 8032fe6:	2200      	movs	r2, #0
 8032fe8:	4543      	cmp	r3, r8
 8032fea:	d321      	bcc.n	8033030 <__multiply+0x98>
 8032fec:	f107 0114 	add.w	r1, r7, #20
 8032ff0:	f104 0214 	add.w	r2, r4, #20
 8032ff4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8032ff8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8032ffc:	9302      	str	r3, [sp, #8]
 8032ffe:	1b13      	subs	r3, r2, r4
 8033000:	3b15      	subs	r3, #21
 8033002:	f023 0303 	bic.w	r3, r3, #3
 8033006:	3304      	adds	r3, #4
 8033008:	f104 0715 	add.w	r7, r4, #21
 803300c:	42ba      	cmp	r2, r7
 803300e:	bf38      	it	cc
 8033010:	2304      	movcc	r3, #4
 8033012:	9301      	str	r3, [sp, #4]
 8033014:	9b02      	ldr	r3, [sp, #8]
 8033016:	9103      	str	r1, [sp, #12]
 8033018:	428b      	cmp	r3, r1
 803301a:	d80c      	bhi.n	8033036 <__multiply+0x9e>
 803301c:	2e00      	cmp	r6, #0
 803301e:	dd03      	ble.n	8033028 <__multiply+0x90>
 8033020:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8033024:	2b00      	cmp	r3, #0
 8033026:	d05b      	beq.n	80330e0 <__multiply+0x148>
 8033028:	6106      	str	r6, [r0, #16]
 803302a:	b005      	add	sp, #20
 803302c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033030:	f843 2b04 	str.w	r2, [r3], #4
 8033034:	e7d8      	b.n	8032fe8 <__multiply+0x50>
 8033036:	f8b1 a000 	ldrh.w	sl, [r1]
 803303a:	f1ba 0f00 	cmp.w	sl, #0
 803303e:	d024      	beq.n	803308a <__multiply+0xf2>
 8033040:	f104 0e14 	add.w	lr, r4, #20
 8033044:	46a9      	mov	r9, r5
 8033046:	f04f 0c00 	mov.w	ip, #0
 803304a:	f85e 7b04 	ldr.w	r7, [lr], #4
 803304e:	f8d9 3000 	ldr.w	r3, [r9]
 8033052:	fa1f fb87 	uxth.w	fp, r7
 8033056:	b29b      	uxth	r3, r3
 8033058:	fb0a 330b 	mla	r3, sl, fp, r3
 803305c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8033060:	f8d9 7000 	ldr.w	r7, [r9]
 8033064:	4463      	add	r3, ip
 8033066:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 803306a:	fb0a c70b 	mla	r7, sl, fp, ip
 803306e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8033072:	b29b      	uxth	r3, r3
 8033074:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8033078:	4572      	cmp	r2, lr
 803307a:	f849 3b04 	str.w	r3, [r9], #4
 803307e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8033082:	d8e2      	bhi.n	803304a <__multiply+0xb2>
 8033084:	9b01      	ldr	r3, [sp, #4]
 8033086:	f845 c003 	str.w	ip, [r5, r3]
 803308a:	9b03      	ldr	r3, [sp, #12]
 803308c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8033090:	3104      	adds	r1, #4
 8033092:	f1b9 0f00 	cmp.w	r9, #0
 8033096:	d021      	beq.n	80330dc <__multiply+0x144>
 8033098:	682b      	ldr	r3, [r5, #0]
 803309a:	f104 0c14 	add.w	ip, r4, #20
 803309e:	46ae      	mov	lr, r5
 80330a0:	f04f 0a00 	mov.w	sl, #0
 80330a4:	f8bc b000 	ldrh.w	fp, [ip]
 80330a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80330ac:	fb09 770b 	mla	r7, r9, fp, r7
 80330b0:	4457      	add	r7, sl
 80330b2:	b29b      	uxth	r3, r3
 80330b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80330b8:	f84e 3b04 	str.w	r3, [lr], #4
 80330bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80330c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80330c4:	f8be 3000 	ldrh.w	r3, [lr]
 80330c8:	fb09 330a 	mla	r3, r9, sl, r3
 80330cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80330d0:	4562      	cmp	r2, ip
 80330d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80330d6:	d8e5      	bhi.n	80330a4 <__multiply+0x10c>
 80330d8:	9f01      	ldr	r7, [sp, #4]
 80330da:	51eb      	str	r3, [r5, r7]
 80330dc:	3504      	adds	r5, #4
 80330de:	e799      	b.n	8033014 <__multiply+0x7c>
 80330e0:	3e01      	subs	r6, #1
 80330e2:	e79b      	b.n	803301c <__multiply+0x84>
 80330e4:	0803b4d6 	.word	0x0803b4d6
 80330e8:	0803b5ca 	.word	0x0803b5ca

080330ec <__pow5mult>:
 80330ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80330f0:	4615      	mov	r5, r2
 80330f2:	f012 0203 	ands.w	r2, r2, #3
 80330f6:	4607      	mov	r7, r0
 80330f8:	460e      	mov	r6, r1
 80330fa:	d007      	beq.n	803310c <__pow5mult+0x20>
 80330fc:	4c1a      	ldr	r4, [pc, #104]	@ (8033168 <__pow5mult+0x7c>)
 80330fe:	3a01      	subs	r2, #1
 8033100:	2300      	movs	r3, #0
 8033102:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8033106:	f7ff fe55 	bl	8032db4 <__multadd>
 803310a:	4606      	mov	r6, r0
 803310c:	10ad      	asrs	r5, r5, #2
 803310e:	d027      	beq.n	8033160 <__pow5mult+0x74>
 8033110:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8033112:	b944      	cbnz	r4, 8033126 <__pow5mult+0x3a>
 8033114:	f240 2171 	movw	r1, #625	@ 0x271
 8033118:	4638      	mov	r0, r7
 803311a:	f7ff ff27 	bl	8032f6c <__i2b>
 803311e:	2300      	movs	r3, #0
 8033120:	6438      	str	r0, [r7, #64]	@ 0x40
 8033122:	4604      	mov	r4, r0
 8033124:	6003      	str	r3, [r0, #0]
 8033126:	f04f 0900 	mov.w	r9, #0
 803312a:	07eb      	lsls	r3, r5, #31
 803312c:	d50a      	bpl.n	8033144 <__pow5mult+0x58>
 803312e:	4631      	mov	r1, r6
 8033130:	4622      	mov	r2, r4
 8033132:	4638      	mov	r0, r7
 8033134:	f7ff ff30 	bl	8032f98 <__multiply>
 8033138:	4631      	mov	r1, r6
 803313a:	4680      	mov	r8, r0
 803313c:	4638      	mov	r0, r7
 803313e:	f7ff fe30 	bl	8032da2 <_Bfree>
 8033142:	4646      	mov	r6, r8
 8033144:	106d      	asrs	r5, r5, #1
 8033146:	d00b      	beq.n	8033160 <__pow5mult+0x74>
 8033148:	6820      	ldr	r0, [r4, #0]
 803314a:	b938      	cbnz	r0, 803315c <__pow5mult+0x70>
 803314c:	4622      	mov	r2, r4
 803314e:	4621      	mov	r1, r4
 8033150:	4638      	mov	r0, r7
 8033152:	f7ff ff21 	bl	8032f98 <__multiply>
 8033156:	6020      	str	r0, [r4, #0]
 8033158:	f8c0 9000 	str.w	r9, [r0]
 803315c:	4604      	mov	r4, r0
 803315e:	e7e4      	b.n	803312a <__pow5mult+0x3e>
 8033160:	4630      	mov	r0, r6
 8033162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8033166:	bf00      	nop
 8033168:	0803b624 	.word	0x0803b624

0803316c <__lshift>:
 803316c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8033170:	460c      	mov	r4, r1
 8033172:	6849      	ldr	r1, [r1, #4]
 8033174:	6923      	ldr	r3, [r4, #16]
 8033176:	eb03 1862 	add.w	r8, r3, r2, asr #5
 803317a:	68a3      	ldr	r3, [r4, #8]
 803317c:	4607      	mov	r7, r0
 803317e:	4691      	mov	r9, r2
 8033180:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8033184:	f108 0601 	add.w	r6, r8, #1
 8033188:	42b3      	cmp	r3, r6
 803318a:	db0b      	blt.n	80331a4 <__lshift+0x38>
 803318c:	4638      	mov	r0, r7
 803318e:	f7ff fde3 	bl	8032d58 <_Balloc>
 8033192:	4605      	mov	r5, r0
 8033194:	b948      	cbnz	r0, 80331aa <__lshift+0x3e>
 8033196:	4602      	mov	r2, r0
 8033198:	4b28      	ldr	r3, [pc, #160]	@ (803323c <__lshift+0xd0>)
 803319a:	4829      	ldr	r0, [pc, #164]	@ (8033240 <__lshift+0xd4>)
 803319c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80331a0:	f7f6 fb1c 	bl	80297dc <__assert_func>
 80331a4:	3101      	adds	r1, #1
 80331a6:	005b      	lsls	r3, r3, #1
 80331a8:	e7ee      	b.n	8033188 <__lshift+0x1c>
 80331aa:	2300      	movs	r3, #0
 80331ac:	f100 0114 	add.w	r1, r0, #20
 80331b0:	f100 0210 	add.w	r2, r0, #16
 80331b4:	4618      	mov	r0, r3
 80331b6:	4553      	cmp	r3, sl
 80331b8:	db33      	blt.n	8033222 <__lshift+0xb6>
 80331ba:	6920      	ldr	r0, [r4, #16]
 80331bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80331c0:	f104 0314 	add.w	r3, r4, #20
 80331c4:	f019 091f 	ands.w	r9, r9, #31
 80331c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80331cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80331d0:	d02b      	beq.n	803322a <__lshift+0xbe>
 80331d2:	f1c9 0e20 	rsb	lr, r9, #32
 80331d6:	468a      	mov	sl, r1
 80331d8:	2200      	movs	r2, #0
 80331da:	6818      	ldr	r0, [r3, #0]
 80331dc:	fa00 f009 	lsl.w	r0, r0, r9
 80331e0:	4310      	orrs	r0, r2
 80331e2:	f84a 0b04 	str.w	r0, [sl], #4
 80331e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80331ea:	459c      	cmp	ip, r3
 80331ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80331f0:	d8f3      	bhi.n	80331da <__lshift+0x6e>
 80331f2:	ebac 0304 	sub.w	r3, ip, r4
 80331f6:	3b15      	subs	r3, #21
 80331f8:	f023 0303 	bic.w	r3, r3, #3
 80331fc:	3304      	adds	r3, #4
 80331fe:	f104 0015 	add.w	r0, r4, #21
 8033202:	4584      	cmp	ip, r0
 8033204:	bf38      	it	cc
 8033206:	2304      	movcc	r3, #4
 8033208:	50ca      	str	r2, [r1, r3]
 803320a:	b10a      	cbz	r2, 8033210 <__lshift+0xa4>
 803320c:	f108 0602 	add.w	r6, r8, #2
 8033210:	3e01      	subs	r6, #1
 8033212:	4638      	mov	r0, r7
 8033214:	612e      	str	r6, [r5, #16]
 8033216:	4621      	mov	r1, r4
 8033218:	f7ff fdc3 	bl	8032da2 <_Bfree>
 803321c:	4628      	mov	r0, r5
 803321e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8033222:	f842 0f04 	str.w	r0, [r2, #4]!
 8033226:	3301      	adds	r3, #1
 8033228:	e7c5      	b.n	80331b6 <__lshift+0x4a>
 803322a:	3904      	subs	r1, #4
 803322c:	f853 2b04 	ldr.w	r2, [r3], #4
 8033230:	f841 2f04 	str.w	r2, [r1, #4]!
 8033234:	459c      	cmp	ip, r3
 8033236:	d8f9      	bhi.n	803322c <__lshift+0xc0>
 8033238:	e7ea      	b.n	8033210 <__lshift+0xa4>
 803323a:	bf00      	nop
 803323c:	0803b4d6 	.word	0x0803b4d6
 8033240:	0803b5ca 	.word	0x0803b5ca

08033244 <__mcmp>:
 8033244:	690a      	ldr	r2, [r1, #16]
 8033246:	4603      	mov	r3, r0
 8033248:	6900      	ldr	r0, [r0, #16]
 803324a:	1a80      	subs	r0, r0, r2
 803324c:	b530      	push	{r4, r5, lr}
 803324e:	d10e      	bne.n	803326e <__mcmp+0x2a>
 8033250:	3314      	adds	r3, #20
 8033252:	3114      	adds	r1, #20
 8033254:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8033258:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 803325c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8033260:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8033264:	4295      	cmp	r5, r2
 8033266:	d003      	beq.n	8033270 <__mcmp+0x2c>
 8033268:	d205      	bcs.n	8033276 <__mcmp+0x32>
 803326a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803326e:	bd30      	pop	{r4, r5, pc}
 8033270:	42a3      	cmp	r3, r4
 8033272:	d3f3      	bcc.n	803325c <__mcmp+0x18>
 8033274:	e7fb      	b.n	803326e <__mcmp+0x2a>
 8033276:	2001      	movs	r0, #1
 8033278:	e7f9      	b.n	803326e <__mcmp+0x2a>
	...

0803327c <__mdiff>:
 803327c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033280:	4689      	mov	r9, r1
 8033282:	4606      	mov	r6, r0
 8033284:	4611      	mov	r1, r2
 8033286:	4648      	mov	r0, r9
 8033288:	4614      	mov	r4, r2
 803328a:	f7ff ffdb 	bl	8033244 <__mcmp>
 803328e:	1e05      	subs	r5, r0, #0
 8033290:	d112      	bne.n	80332b8 <__mdiff+0x3c>
 8033292:	4629      	mov	r1, r5
 8033294:	4630      	mov	r0, r6
 8033296:	f7ff fd5f 	bl	8032d58 <_Balloc>
 803329a:	4602      	mov	r2, r0
 803329c:	b928      	cbnz	r0, 80332aa <__mdiff+0x2e>
 803329e:	4b3f      	ldr	r3, [pc, #252]	@ (803339c <__mdiff+0x120>)
 80332a0:	f240 2137 	movw	r1, #567	@ 0x237
 80332a4:	483e      	ldr	r0, [pc, #248]	@ (80333a0 <__mdiff+0x124>)
 80332a6:	f7f6 fa99 	bl	80297dc <__assert_func>
 80332aa:	2301      	movs	r3, #1
 80332ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80332b0:	4610      	mov	r0, r2
 80332b2:	b003      	add	sp, #12
 80332b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80332b8:	bfbc      	itt	lt
 80332ba:	464b      	movlt	r3, r9
 80332bc:	46a1      	movlt	r9, r4
 80332be:	4630      	mov	r0, r6
 80332c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80332c4:	bfba      	itte	lt
 80332c6:	461c      	movlt	r4, r3
 80332c8:	2501      	movlt	r5, #1
 80332ca:	2500      	movge	r5, #0
 80332cc:	f7ff fd44 	bl	8032d58 <_Balloc>
 80332d0:	4602      	mov	r2, r0
 80332d2:	b918      	cbnz	r0, 80332dc <__mdiff+0x60>
 80332d4:	4b31      	ldr	r3, [pc, #196]	@ (803339c <__mdiff+0x120>)
 80332d6:	f240 2145 	movw	r1, #581	@ 0x245
 80332da:	e7e3      	b.n	80332a4 <__mdiff+0x28>
 80332dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80332e0:	6926      	ldr	r6, [r4, #16]
 80332e2:	60c5      	str	r5, [r0, #12]
 80332e4:	f109 0310 	add.w	r3, r9, #16
 80332e8:	f109 0514 	add.w	r5, r9, #20
 80332ec:	f104 0e14 	add.w	lr, r4, #20
 80332f0:	f100 0b14 	add.w	fp, r0, #20
 80332f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80332f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80332fc:	9301      	str	r3, [sp, #4]
 80332fe:	46d9      	mov	r9, fp
 8033300:	f04f 0c00 	mov.w	ip, #0
 8033304:	9b01      	ldr	r3, [sp, #4]
 8033306:	f85e 0b04 	ldr.w	r0, [lr], #4
 803330a:	f853 af04 	ldr.w	sl, [r3, #4]!
 803330e:	9301      	str	r3, [sp, #4]
 8033310:	fa1f f38a 	uxth.w	r3, sl
 8033314:	4619      	mov	r1, r3
 8033316:	b283      	uxth	r3, r0
 8033318:	1acb      	subs	r3, r1, r3
 803331a:	0c00      	lsrs	r0, r0, #16
 803331c:	4463      	add	r3, ip
 803331e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8033322:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8033326:	b29b      	uxth	r3, r3
 8033328:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 803332c:	4576      	cmp	r6, lr
 803332e:	f849 3b04 	str.w	r3, [r9], #4
 8033332:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8033336:	d8e5      	bhi.n	8033304 <__mdiff+0x88>
 8033338:	1b33      	subs	r3, r6, r4
 803333a:	3b15      	subs	r3, #21
 803333c:	f023 0303 	bic.w	r3, r3, #3
 8033340:	3415      	adds	r4, #21
 8033342:	3304      	adds	r3, #4
 8033344:	42a6      	cmp	r6, r4
 8033346:	bf38      	it	cc
 8033348:	2304      	movcc	r3, #4
 803334a:	441d      	add	r5, r3
 803334c:	445b      	add	r3, fp
 803334e:	461e      	mov	r6, r3
 8033350:	462c      	mov	r4, r5
 8033352:	4544      	cmp	r4, r8
 8033354:	d30e      	bcc.n	8033374 <__mdiff+0xf8>
 8033356:	f108 0103 	add.w	r1, r8, #3
 803335a:	1b49      	subs	r1, r1, r5
 803335c:	f021 0103 	bic.w	r1, r1, #3
 8033360:	3d03      	subs	r5, #3
 8033362:	45a8      	cmp	r8, r5
 8033364:	bf38      	it	cc
 8033366:	2100      	movcc	r1, #0
 8033368:	440b      	add	r3, r1
 803336a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 803336e:	b191      	cbz	r1, 8033396 <__mdiff+0x11a>
 8033370:	6117      	str	r7, [r2, #16]
 8033372:	e79d      	b.n	80332b0 <__mdiff+0x34>
 8033374:	f854 1b04 	ldr.w	r1, [r4], #4
 8033378:	46e6      	mov	lr, ip
 803337a:	0c08      	lsrs	r0, r1, #16
 803337c:	fa1c fc81 	uxtah	ip, ip, r1
 8033380:	4471      	add	r1, lr
 8033382:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8033386:	b289      	uxth	r1, r1
 8033388:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 803338c:	f846 1b04 	str.w	r1, [r6], #4
 8033390:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8033394:	e7dd      	b.n	8033352 <__mdiff+0xd6>
 8033396:	3f01      	subs	r7, #1
 8033398:	e7e7      	b.n	803336a <__mdiff+0xee>
 803339a:	bf00      	nop
 803339c:	0803b4d6 	.word	0x0803b4d6
 80333a0:	0803b5ca 	.word	0x0803b5ca

080333a4 <__ulp>:
 80333a4:	b082      	sub	sp, #8
 80333a6:	ed8d 0b00 	vstr	d0, [sp]
 80333aa:	9a01      	ldr	r2, [sp, #4]
 80333ac:	4b0f      	ldr	r3, [pc, #60]	@ (80333ec <__ulp+0x48>)
 80333ae:	4013      	ands	r3, r2
 80333b0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80333b4:	2b00      	cmp	r3, #0
 80333b6:	dc08      	bgt.n	80333ca <__ulp+0x26>
 80333b8:	425b      	negs	r3, r3
 80333ba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80333be:	ea4f 5223 	mov.w	r2, r3, asr #20
 80333c2:	da04      	bge.n	80333ce <__ulp+0x2a>
 80333c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80333c8:	4113      	asrs	r3, r2
 80333ca:	2200      	movs	r2, #0
 80333cc:	e008      	b.n	80333e0 <__ulp+0x3c>
 80333ce:	f1a2 0314 	sub.w	r3, r2, #20
 80333d2:	2b1e      	cmp	r3, #30
 80333d4:	bfda      	itte	le
 80333d6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80333da:	40da      	lsrle	r2, r3
 80333dc:	2201      	movgt	r2, #1
 80333de:	2300      	movs	r3, #0
 80333e0:	4619      	mov	r1, r3
 80333e2:	4610      	mov	r0, r2
 80333e4:	ec41 0b10 	vmov	d0, r0, r1
 80333e8:	b002      	add	sp, #8
 80333ea:	4770      	bx	lr
 80333ec:	7ff00000 	.word	0x7ff00000

080333f0 <__b2d>:
 80333f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80333f4:	6906      	ldr	r6, [r0, #16]
 80333f6:	f100 0814 	add.w	r8, r0, #20
 80333fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80333fe:	1f37      	subs	r7, r6, #4
 8033400:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8033404:	4610      	mov	r0, r2
 8033406:	f7ff fd65 	bl	8032ed4 <__hi0bits>
 803340a:	f1c0 0320 	rsb	r3, r0, #32
 803340e:	280a      	cmp	r0, #10
 8033410:	600b      	str	r3, [r1, #0]
 8033412:	491b      	ldr	r1, [pc, #108]	@ (8033480 <__b2d+0x90>)
 8033414:	dc15      	bgt.n	8033442 <__b2d+0x52>
 8033416:	f1c0 0c0b 	rsb	ip, r0, #11
 803341a:	fa22 f30c 	lsr.w	r3, r2, ip
 803341e:	45b8      	cmp	r8, r7
 8033420:	ea43 0501 	orr.w	r5, r3, r1
 8033424:	bf34      	ite	cc
 8033426:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 803342a:	2300      	movcs	r3, #0
 803342c:	3015      	adds	r0, #21
 803342e:	fa02 f000 	lsl.w	r0, r2, r0
 8033432:	fa23 f30c 	lsr.w	r3, r3, ip
 8033436:	4303      	orrs	r3, r0
 8033438:	461c      	mov	r4, r3
 803343a:	ec45 4b10 	vmov	d0, r4, r5
 803343e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8033442:	45b8      	cmp	r8, r7
 8033444:	bf3a      	itte	cc
 8033446:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 803344a:	f1a6 0708 	subcc.w	r7, r6, #8
 803344e:	2300      	movcs	r3, #0
 8033450:	380b      	subs	r0, #11
 8033452:	d012      	beq.n	803347a <__b2d+0x8a>
 8033454:	f1c0 0120 	rsb	r1, r0, #32
 8033458:	fa23 f401 	lsr.w	r4, r3, r1
 803345c:	4082      	lsls	r2, r0
 803345e:	4322      	orrs	r2, r4
 8033460:	4547      	cmp	r7, r8
 8033462:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8033466:	bf8c      	ite	hi
 8033468:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 803346c:	2200      	movls	r2, #0
 803346e:	4083      	lsls	r3, r0
 8033470:	40ca      	lsrs	r2, r1
 8033472:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8033476:	4313      	orrs	r3, r2
 8033478:	e7de      	b.n	8033438 <__b2d+0x48>
 803347a:	ea42 0501 	orr.w	r5, r2, r1
 803347e:	e7db      	b.n	8033438 <__b2d+0x48>
 8033480:	3ff00000 	.word	0x3ff00000

08033484 <__d2b>:
 8033484:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8033488:	460f      	mov	r7, r1
 803348a:	2101      	movs	r1, #1
 803348c:	ec59 8b10 	vmov	r8, r9, d0
 8033490:	4616      	mov	r6, r2
 8033492:	f7ff fc61 	bl	8032d58 <_Balloc>
 8033496:	4604      	mov	r4, r0
 8033498:	b930      	cbnz	r0, 80334a8 <__d2b+0x24>
 803349a:	4602      	mov	r2, r0
 803349c:	4b23      	ldr	r3, [pc, #140]	@ (803352c <__d2b+0xa8>)
 803349e:	4824      	ldr	r0, [pc, #144]	@ (8033530 <__d2b+0xac>)
 80334a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80334a4:	f7f6 f99a 	bl	80297dc <__assert_func>
 80334a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80334ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80334b0:	b10d      	cbz	r5, 80334b6 <__d2b+0x32>
 80334b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80334b6:	9301      	str	r3, [sp, #4]
 80334b8:	f1b8 0300 	subs.w	r3, r8, #0
 80334bc:	d023      	beq.n	8033506 <__d2b+0x82>
 80334be:	4668      	mov	r0, sp
 80334c0:	9300      	str	r3, [sp, #0]
 80334c2:	f7ff fd26 	bl	8032f12 <__lo0bits>
 80334c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80334ca:	b1d0      	cbz	r0, 8033502 <__d2b+0x7e>
 80334cc:	f1c0 0320 	rsb	r3, r0, #32
 80334d0:	fa02 f303 	lsl.w	r3, r2, r3
 80334d4:	430b      	orrs	r3, r1
 80334d6:	40c2      	lsrs	r2, r0
 80334d8:	6163      	str	r3, [r4, #20]
 80334da:	9201      	str	r2, [sp, #4]
 80334dc:	9b01      	ldr	r3, [sp, #4]
 80334de:	61a3      	str	r3, [r4, #24]
 80334e0:	2b00      	cmp	r3, #0
 80334e2:	bf0c      	ite	eq
 80334e4:	2201      	moveq	r2, #1
 80334e6:	2202      	movne	r2, #2
 80334e8:	6122      	str	r2, [r4, #16]
 80334ea:	b1a5      	cbz	r5, 8033516 <__d2b+0x92>
 80334ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80334f0:	4405      	add	r5, r0
 80334f2:	603d      	str	r5, [r7, #0]
 80334f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80334f8:	6030      	str	r0, [r6, #0]
 80334fa:	4620      	mov	r0, r4
 80334fc:	b003      	add	sp, #12
 80334fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8033502:	6161      	str	r1, [r4, #20]
 8033504:	e7ea      	b.n	80334dc <__d2b+0x58>
 8033506:	a801      	add	r0, sp, #4
 8033508:	f7ff fd03 	bl	8032f12 <__lo0bits>
 803350c:	9b01      	ldr	r3, [sp, #4]
 803350e:	6163      	str	r3, [r4, #20]
 8033510:	3020      	adds	r0, #32
 8033512:	2201      	movs	r2, #1
 8033514:	e7e8      	b.n	80334e8 <__d2b+0x64>
 8033516:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 803351a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 803351e:	6038      	str	r0, [r7, #0]
 8033520:	6918      	ldr	r0, [r3, #16]
 8033522:	f7ff fcd7 	bl	8032ed4 <__hi0bits>
 8033526:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 803352a:	e7e5      	b.n	80334f8 <__d2b+0x74>
 803352c:	0803b4d6 	.word	0x0803b4d6
 8033530:	0803b5ca 	.word	0x0803b5ca

08033534 <__ratio>:
 8033534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033538:	b085      	sub	sp, #20
 803353a:	e9cd 1000 	strd	r1, r0, [sp]
 803353e:	a902      	add	r1, sp, #8
 8033540:	f7ff ff56 	bl	80333f0 <__b2d>
 8033544:	9800      	ldr	r0, [sp, #0]
 8033546:	a903      	add	r1, sp, #12
 8033548:	ec55 4b10 	vmov	r4, r5, d0
 803354c:	f7ff ff50 	bl	80333f0 <__b2d>
 8033550:	9b01      	ldr	r3, [sp, #4]
 8033552:	6919      	ldr	r1, [r3, #16]
 8033554:	9b00      	ldr	r3, [sp, #0]
 8033556:	691b      	ldr	r3, [r3, #16]
 8033558:	1ac9      	subs	r1, r1, r3
 803355a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 803355e:	1a9b      	subs	r3, r3, r2
 8033560:	ec5b ab10 	vmov	sl, fp, d0
 8033564:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8033568:	2b00      	cmp	r3, #0
 803356a:	bfce      	itee	gt
 803356c:	462a      	movgt	r2, r5
 803356e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8033572:	465a      	movle	r2, fp
 8033574:	462f      	mov	r7, r5
 8033576:	46d9      	mov	r9, fp
 8033578:	bfcc      	ite	gt
 803357a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 803357e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8033582:	464b      	mov	r3, r9
 8033584:	4652      	mov	r2, sl
 8033586:	4620      	mov	r0, r4
 8033588:	4639      	mov	r1, r7
 803358a:	f7dd f977 	bl	801087c <__aeabi_ddiv>
 803358e:	ec41 0b10 	vmov	d0, r0, r1
 8033592:	b005      	add	sp, #20
 8033594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08033598 <__copybits>:
 8033598:	3901      	subs	r1, #1
 803359a:	b570      	push	{r4, r5, r6, lr}
 803359c:	1149      	asrs	r1, r1, #5
 803359e:	6914      	ldr	r4, [r2, #16]
 80335a0:	3101      	adds	r1, #1
 80335a2:	f102 0314 	add.w	r3, r2, #20
 80335a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80335aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80335ae:	1f05      	subs	r5, r0, #4
 80335b0:	42a3      	cmp	r3, r4
 80335b2:	d30c      	bcc.n	80335ce <__copybits+0x36>
 80335b4:	1aa3      	subs	r3, r4, r2
 80335b6:	3b11      	subs	r3, #17
 80335b8:	f023 0303 	bic.w	r3, r3, #3
 80335bc:	3211      	adds	r2, #17
 80335be:	42a2      	cmp	r2, r4
 80335c0:	bf88      	it	hi
 80335c2:	2300      	movhi	r3, #0
 80335c4:	4418      	add	r0, r3
 80335c6:	2300      	movs	r3, #0
 80335c8:	4288      	cmp	r0, r1
 80335ca:	d305      	bcc.n	80335d8 <__copybits+0x40>
 80335cc:	bd70      	pop	{r4, r5, r6, pc}
 80335ce:	f853 6b04 	ldr.w	r6, [r3], #4
 80335d2:	f845 6f04 	str.w	r6, [r5, #4]!
 80335d6:	e7eb      	b.n	80335b0 <__copybits+0x18>
 80335d8:	f840 3b04 	str.w	r3, [r0], #4
 80335dc:	e7f4      	b.n	80335c8 <__copybits+0x30>

080335de <__any_on>:
 80335de:	f100 0214 	add.w	r2, r0, #20
 80335e2:	6900      	ldr	r0, [r0, #16]
 80335e4:	114b      	asrs	r3, r1, #5
 80335e6:	4298      	cmp	r0, r3
 80335e8:	b510      	push	{r4, lr}
 80335ea:	db11      	blt.n	8033610 <__any_on+0x32>
 80335ec:	dd0a      	ble.n	8033604 <__any_on+0x26>
 80335ee:	f011 011f 	ands.w	r1, r1, #31
 80335f2:	d007      	beq.n	8033604 <__any_on+0x26>
 80335f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80335f8:	fa24 f001 	lsr.w	r0, r4, r1
 80335fc:	fa00 f101 	lsl.w	r1, r0, r1
 8033600:	428c      	cmp	r4, r1
 8033602:	d10b      	bne.n	803361c <__any_on+0x3e>
 8033604:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8033608:	4293      	cmp	r3, r2
 803360a:	d803      	bhi.n	8033614 <__any_on+0x36>
 803360c:	2000      	movs	r0, #0
 803360e:	bd10      	pop	{r4, pc}
 8033610:	4603      	mov	r3, r0
 8033612:	e7f7      	b.n	8033604 <__any_on+0x26>
 8033614:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8033618:	2900      	cmp	r1, #0
 803361a:	d0f5      	beq.n	8033608 <__any_on+0x2a>
 803361c:	2001      	movs	r0, #1
 803361e:	e7f6      	b.n	803360e <__any_on+0x30>

08033620 <realloc>:
 8033620:	4b02      	ldr	r3, [pc, #8]	@ (803362c <realloc+0xc>)
 8033622:	460a      	mov	r2, r1
 8033624:	4601      	mov	r1, r0
 8033626:	6818      	ldr	r0, [r3, #0]
 8033628:	f000 b890 	b.w	803374c <_realloc_r>
 803362c:	200002d8 	.word	0x200002d8

08033630 <_fclose_r>:
 8033630:	b570      	push	{r4, r5, r6, lr}
 8033632:	4605      	mov	r5, r0
 8033634:	460c      	mov	r4, r1
 8033636:	b1b1      	cbz	r1, 8033666 <_fclose_r+0x36>
 8033638:	b118      	cbz	r0, 8033642 <_fclose_r+0x12>
 803363a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 803363c:	b90b      	cbnz	r3, 8033642 <_fclose_r+0x12>
 803363e:	f7f8 fb79 	bl	802bd34 <__sinit>
 8033642:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8033644:	07de      	lsls	r6, r3, #31
 8033646:	d405      	bmi.n	8033654 <_fclose_r+0x24>
 8033648:	89a3      	ldrh	r3, [r4, #12]
 803364a:	0598      	lsls	r0, r3, #22
 803364c:	d402      	bmi.n	8033654 <_fclose_r+0x24>
 803364e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033650:	f7fa f84f 	bl	802d6f2 <__retarget_lock_acquire_recursive>
 8033654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8033658:	b943      	cbnz	r3, 803366c <_fclose_r+0x3c>
 803365a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803365c:	07d9      	lsls	r1, r3, #31
 803365e:	d402      	bmi.n	8033666 <_fclose_r+0x36>
 8033660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033662:	f7fa f848 	bl	802d6f6 <__retarget_lock_release_recursive>
 8033666:	2600      	movs	r6, #0
 8033668:	4630      	mov	r0, r6
 803366a:	bd70      	pop	{r4, r5, r6, pc}
 803366c:	4621      	mov	r1, r4
 803366e:	4628      	mov	r0, r5
 8033670:	f7f8 f996 	bl	802b9a0 <__sflush_r>
 8033674:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8033676:	4606      	mov	r6, r0
 8033678:	b133      	cbz	r3, 8033688 <_fclose_r+0x58>
 803367a:	69e1      	ldr	r1, [r4, #28]
 803367c:	4628      	mov	r0, r5
 803367e:	4798      	blx	r3
 8033680:	2800      	cmp	r0, #0
 8033682:	bfb8      	it	lt
 8033684:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 8033688:	89a3      	ldrh	r3, [r4, #12]
 803368a:	061a      	lsls	r2, r3, #24
 803368c:	d503      	bpl.n	8033696 <_fclose_r+0x66>
 803368e:	6921      	ldr	r1, [r4, #16]
 8033690:	4628      	mov	r0, r5
 8033692:	f7fa ff33 	bl	802e4fc <_free_r>
 8033696:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8033698:	b141      	cbz	r1, 80336ac <_fclose_r+0x7c>
 803369a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 803369e:	4299      	cmp	r1, r3
 80336a0:	d002      	beq.n	80336a8 <_fclose_r+0x78>
 80336a2:	4628      	mov	r0, r5
 80336a4:	f7fa ff2a 	bl	802e4fc <_free_r>
 80336a8:	2300      	movs	r3, #0
 80336aa:	6323      	str	r3, [r4, #48]	@ 0x30
 80336ac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80336ae:	b121      	cbz	r1, 80336ba <_fclose_r+0x8a>
 80336b0:	4628      	mov	r0, r5
 80336b2:	f7fa ff23 	bl	802e4fc <_free_r>
 80336b6:	2300      	movs	r3, #0
 80336b8:	6463      	str	r3, [r4, #68]	@ 0x44
 80336ba:	f7f8 fb2f 	bl	802bd1c <__sfp_lock_acquire>
 80336be:	2300      	movs	r3, #0
 80336c0:	81a3      	strh	r3, [r4, #12]
 80336c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80336c4:	07db      	lsls	r3, r3, #31
 80336c6:	d402      	bmi.n	80336ce <_fclose_r+0x9e>
 80336c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80336ca:	f7fa f814 	bl	802d6f6 <__retarget_lock_release_recursive>
 80336ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80336d0:	f7fa f80d 	bl	802d6ee <__retarget_lock_close_recursive>
 80336d4:	f7f8 fb28 	bl	802bd28 <__sfp_lock_release>
 80336d8:	e7c6      	b.n	8033668 <_fclose_r+0x38>

080336da <__sccl>:
 80336da:	b570      	push	{r4, r5, r6, lr}
 80336dc:	780b      	ldrb	r3, [r1, #0]
 80336de:	4604      	mov	r4, r0
 80336e0:	2b5e      	cmp	r3, #94	@ 0x5e
 80336e2:	bf0b      	itete	eq
 80336e4:	784b      	ldrbeq	r3, [r1, #1]
 80336e6:	1c4a      	addne	r2, r1, #1
 80336e8:	1c8a      	addeq	r2, r1, #2
 80336ea:	2100      	movne	r1, #0
 80336ec:	bf08      	it	eq
 80336ee:	2101      	moveq	r1, #1
 80336f0:	3801      	subs	r0, #1
 80336f2:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80336f6:	f800 1f01 	strb.w	r1, [r0, #1]!
 80336fa:	42a8      	cmp	r0, r5
 80336fc:	d1fb      	bne.n	80336f6 <__sccl+0x1c>
 80336fe:	b90b      	cbnz	r3, 8033704 <__sccl+0x2a>
 8033700:	1e50      	subs	r0, r2, #1
 8033702:	bd70      	pop	{r4, r5, r6, pc}
 8033704:	f081 0101 	eor.w	r1, r1, #1
 8033708:	54e1      	strb	r1, [r4, r3]
 803370a:	4610      	mov	r0, r2
 803370c:	4602      	mov	r2, r0
 803370e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8033712:	2d2d      	cmp	r5, #45	@ 0x2d
 8033714:	d005      	beq.n	8033722 <__sccl+0x48>
 8033716:	2d5d      	cmp	r5, #93	@ 0x5d
 8033718:	d016      	beq.n	8033748 <__sccl+0x6e>
 803371a:	2d00      	cmp	r5, #0
 803371c:	d0f1      	beq.n	8033702 <__sccl+0x28>
 803371e:	462b      	mov	r3, r5
 8033720:	e7f2      	b.n	8033708 <__sccl+0x2e>
 8033722:	7846      	ldrb	r6, [r0, #1]
 8033724:	2e5d      	cmp	r6, #93	@ 0x5d
 8033726:	d0fa      	beq.n	803371e <__sccl+0x44>
 8033728:	42b3      	cmp	r3, r6
 803372a:	dcf8      	bgt.n	803371e <__sccl+0x44>
 803372c:	3002      	adds	r0, #2
 803372e:	461a      	mov	r2, r3
 8033730:	3201      	adds	r2, #1
 8033732:	4296      	cmp	r6, r2
 8033734:	54a1      	strb	r1, [r4, r2]
 8033736:	dcfb      	bgt.n	8033730 <__sccl+0x56>
 8033738:	1af2      	subs	r2, r6, r3
 803373a:	3a01      	subs	r2, #1
 803373c:	1c5d      	adds	r5, r3, #1
 803373e:	42b3      	cmp	r3, r6
 8033740:	bfa8      	it	ge
 8033742:	2200      	movge	r2, #0
 8033744:	18ab      	adds	r3, r5, r2
 8033746:	e7e1      	b.n	803370c <__sccl+0x32>
 8033748:	4610      	mov	r0, r2
 803374a:	e7da      	b.n	8033702 <__sccl+0x28>

0803374c <_realloc_r>:
 803374c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033750:	4682      	mov	sl, r0
 8033752:	4693      	mov	fp, r2
 8033754:	460c      	mov	r4, r1
 8033756:	b929      	cbnz	r1, 8033764 <_realloc_r+0x18>
 8033758:	4611      	mov	r1, r2
 803375a:	b003      	add	sp, #12
 803375c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033760:	f7fa bfe4 	b.w	802e72c <_malloc_r>
 8033764:	f7ff faec 	bl	8032d40 <__malloc_lock>
 8033768:	f10b 080b 	add.w	r8, fp, #11
 803376c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8033770:	f1b8 0f16 	cmp.w	r8, #22
 8033774:	f1a4 0908 	sub.w	r9, r4, #8
 8033778:	f025 0603 	bic.w	r6, r5, #3
 803377c:	d908      	bls.n	8033790 <_realloc_r+0x44>
 803377e:	f038 0807 	bics.w	r8, r8, #7
 8033782:	d507      	bpl.n	8033794 <_realloc_r+0x48>
 8033784:	230c      	movs	r3, #12
 8033786:	f8ca 3000 	str.w	r3, [sl]
 803378a:	f04f 0b00 	mov.w	fp, #0
 803378e:	e032      	b.n	80337f6 <_realloc_r+0xaa>
 8033790:	f04f 0810 	mov.w	r8, #16
 8033794:	45c3      	cmp	fp, r8
 8033796:	d8f5      	bhi.n	8033784 <_realloc_r+0x38>
 8033798:	4546      	cmp	r6, r8
 803379a:	f280 8174 	bge.w	8033a86 <_realloc_r+0x33a>
 803379e:	4b9e      	ldr	r3, [pc, #632]	@ (8033a18 <_realloc_r+0x2cc>)
 80337a0:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80337a4:	eb09 0106 	add.w	r1, r9, r6
 80337a8:	458c      	cmp	ip, r1
 80337aa:	6848      	ldr	r0, [r1, #4]
 80337ac:	d005      	beq.n	80337ba <_realloc_r+0x6e>
 80337ae:	f020 0201 	bic.w	r2, r0, #1
 80337b2:	440a      	add	r2, r1
 80337b4:	6852      	ldr	r2, [r2, #4]
 80337b6:	07d7      	lsls	r7, r2, #31
 80337b8:	d449      	bmi.n	803384e <_realloc_r+0x102>
 80337ba:	f020 0003 	bic.w	r0, r0, #3
 80337be:	458c      	cmp	ip, r1
 80337c0:	eb06 0700 	add.w	r7, r6, r0
 80337c4:	d11b      	bne.n	80337fe <_realloc_r+0xb2>
 80337c6:	f108 0210 	add.w	r2, r8, #16
 80337ca:	42ba      	cmp	r2, r7
 80337cc:	dc41      	bgt.n	8033852 <_realloc_r+0x106>
 80337ce:	eb09 0208 	add.w	r2, r9, r8
 80337d2:	eba7 0708 	sub.w	r7, r7, r8
 80337d6:	f047 0701 	orr.w	r7, r7, #1
 80337da:	609a      	str	r2, [r3, #8]
 80337dc:	6057      	str	r7, [r2, #4]
 80337de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80337e2:	f003 0301 	and.w	r3, r3, #1
 80337e6:	ea43 0308 	orr.w	r3, r3, r8
 80337ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80337ee:	4650      	mov	r0, sl
 80337f0:	f7ff faac 	bl	8032d4c <__malloc_unlock>
 80337f4:	46a3      	mov	fp, r4
 80337f6:	4658      	mov	r0, fp
 80337f8:	b003      	add	sp, #12
 80337fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80337fe:	45b8      	cmp	r8, r7
 8033800:	dc27      	bgt.n	8033852 <_realloc_r+0x106>
 8033802:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8033806:	60d3      	str	r3, [r2, #12]
 8033808:	609a      	str	r2, [r3, #8]
 803380a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 803380e:	eba7 0008 	sub.w	r0, r7, r8
 8033812:	280f      	cmp	r0, #15
 8033814:	f003 0301 	and.w	r3, r3, #1
 8033818:	eb09 0207 	add.w	r2, r9, r7
 803381c:	f240 8135 	bls.w	8033a8a <_realloc_r+0x33e>
 8033820:	eb09 0108 	add.w	r1, r9, r8
 8033824:	ea48 0303 	orr.w	r3, r8, r3
 8033828:	f040 0001 	orr.w	r0, r0, #1
 803382c:	f8c9 3004 	str.w	r3, [r9, #4]
 8033830:	6048      	str	r0, [r1, #4]
 8033832:	6853      	ldr	r3, [r2, #4]
 8033834:	f043 0301 	orr.w	r3, r3, #1
 8033838:	6053      	str	r3, [r2, #4]
 803383a:	3108      	adds	r1, #8
 803383c:	4650      	mov	r0, sl
 803383e:	f7fa fe5d 	bl	802e4fc <_free_r>
 8033842:	4650      	mov	r0, sl
 8033844:	f7ff fa82 	bl	8032d4c <__malloc_unlock>
 8033848:	f109 0b08 	add.w	fp, r9, #8
 803384c:	e7d3      	b.n	80337f6 <_realloc_r+0xaa>
 803384e:	2000      	movs	r0, #0
 8033850:	4601      	mov	r1, r0
 8033852:	07ea      	lsls	r2, r5, #31
 8033854:	f100 80c7 	bmi.w	80339e6 <_realloc_r+0x29a>
 8033858:	f854 5c08 	ldr.w	r5, [r4, #-8]
 803385c:	eba9 0505 	sub.w	r5, r9, r5
 8033860:	686a      	ldr	r2, [r5, #4]
 8033862:	f022 0203 	bic.w	r2, r2, #3
 8033866:	4432      	add	r2, r6
 8033868:	9201      	str	r2, [sp, #4]
 803386a:	2900      	cmp	r1, #0
 803386c:	f000 8086 	beq.w	803397c <_realloc_r+0x230>
 8033870:	458c      	cmp	ip, r1
 8033872:	eb00 0702 	add.w	r7, r0, r2
 8033876:	d149      	bne.n	803390c <_realloc_r+0x1c0>
 8033878:	f108 0210 	add.w	r2, r8, #16
 803387c:	42ba      	cmp	r2, r7
 803387e:	dc7d      	bgt.n	803397c <_realloc_r+0x230>
 8033880:	46ab      	mov	fp, r5
 8033882:	68ea      	ldr	r2, [r5, #12]
 8033884:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8033888:	60ca      	str	r2, [r1, #12]
 803388a:	6091      	str	r1, [r2, #8]
 803388c:	1f32      	subs	r2, r6, #4
 803388e:	2a24      	cmp	r2, #36	@ 0x24
 8033890:	d836      	bhi.n	8033900 <_realloc_r+0x1b4>
 8033892:	2a13      	cmp	r2, #19
 8033894:	d932      	bls.n	80338fc <_realloc_r+0x1b0>
 8033896:	6821      	ldr	r1, [r4, #0]
 8033898:	60a9      	str	r1, [r5, #8]
 803389a:	6861      	ldr	r1, [r4, #4]
 803389c:	60e9      	str	r1, [r5, #12]
 803389e:	2a1b      	cmp	r2, #27
 80338a0:	d81a      	bhi.n	80338d8 <_realloc_r+0x18c>
 80338a2:	3408      	adds	r4, #8
 80338a4:	f105 0210 	add.w	r2, r5, #16
 80338a8:	6821      	ldr	r1, [r4, #0]
 80338aa:	6011      	str	r1, [r2, #0]
 80338ac:	6861      	ldr	r1, [r4, #4]
 80338ae:	6051      	str	r1, [r2, #4]
 80338b0:	68a1      	ldr	r1, [r4, #8]
 80338b2:	6091      	str	r1, [r2, #8]
 80338b4:	eb05 0208 	add.w	r2, r5, r8
 80338b8:	eba7 0708 	sub.w	r7, r7, r8
 80338bc:	f047 0701 	orr.w	r7, r7, #1
 80338c0:	609a      	str	r2, [r3, #8]
 80338c2:	6057      	str	r7, [r2, #4]
 80338c4:	686b      	ldr	r3, [r5, #4]
 80338c6:	f003 0301 	and.w	r3, r3, #1
 80338ca:	ea43 0308 	orr.w	r3, r3, r8
 80338ce:	606b      	str	r3, [r5, #4]
 80338d0:	4650      	mov	r0, sl
 80338d2:	f7ff fa3b 	bl	8032d4c <__malloc_unlock>
 80338d6:	e78e      	b.n	80337f6 <_realloc_r+0xaa>
 80338d8:	68a1      	ldr	r1, [r4, #8]
 80338da:	6129      	str	r1, [r5, #16]
 80338dc:	68e1      	ldr	r1, [r4, #12]
 80338de:	6169      	str	r1, [r5, #20]
 80338e0:	2a24      	cmp	r2, #36	@ 0x24
 80338e2:	bf01      	itttt	eq
 80338e4:	6922      	ldreq	r2, [r4, #16]
 80338e6:	61aa      	streq	r2, [r5, #24]
 80338e8:	6961      	ldreq	r1, [r4, #20]
 80338ea:	61e9      	streq	r1, [r5, #28]
 80338ec:	bf19      	ittee	ne
 80338ee:	3410      	addne	r4, #16
 80338f0:	f105 0218 	addne.w	r2, r5, #24
 80338f4:	f105 0220 	addeq.w	r2, r5, #32
 80338f8:	3418      	addeq	r4, #24
 80338fa:	e7d5      	b.n	80338a8 <_realloc_r+0x15c>
 80338fc:	465a      	mov	r2, fp
 80338fe:	e7d3      	b.n	80338a8 <_realloc_r+0x15c>
 8033900:	4621      	mov	r1, r4
 8033902:	4658      	mov	r0, fp
 8033904:	f7f8 fca2 	bl	802c24c <memmove>
 8033908:	4b43      	ldr	r3, [pc, #268]	@ (8033a18 <_realloc_r+0x2cc>)
 803390a:	e7d3      	b.n	80338b4 <_realloc_r+0x168>
 803390c:	45b8      	cmp	r8, r7
 803390e:	dc35      	bgt.n	803397c <_realloc_r+0x230>
 8033910:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8033914:	4628      	mov	r0, r5
 8033916:	60d3      	str	r3, [r2, #12]
 8033918:	609a      	str	r2, [r3, #8]
 803391a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803391e:	68eb      	ldr	r3, [r5, #12]
 8033920:	60d3      	str	r3, [r2, #12]
 8033922:	609a      	str	r2, [r3, #8]
 8033924:	1f32      	subs	r2, r6, #4
 8033926:	2a24      	cmp	r2, #36	@ 0x24
 8033928:	d824      	bhi.n	8033974 <_realloc_r+0x228>
 803392a:	2a13      	cmp	r2, #19
 803392c:	d908      	bls.n	8033940 <_realloc_r+0x1f4>
 803392e:	6823      	ldr	r3, [r4, #0]
 8033930:	60ab      	str	r3, [r5, #8]
 8033932:	6863      	ldr	r3, [r4, #4]
 8033934:	60eb      	str	r3, [r5, #12]
 8033936:	2a1b      	cmp	r2, #27
 8033938:	d80a      	bhi.n	8033950 <_realloc_r+0x204>
 803393a:	3408      	adds	r4, #8
 803393c:	f105 0010 	add.w	r0, r5, #16
 8033940:	6823      	ldr	r3, [r4, #0]
 8033942:	6003      	str	r3, [r0, #0]
 8033944:	6863      	ldr	r3, [r4, #4]
 8033946:	6043      	str	r3, [r0, #4]
 8033948:	68a3      	ldr	r3, [r4, #8]
 803394a:	6083      	str	r3, [r0, #8]
 803394c:	46a9      	mov	r9, r5
 803394e:	e75c      	b.n	803380a <_realloc_r+0xbe>
 8033950:	68a3      	ldr	r3, [r4, #8]
 8033952:	612b      	str	r3, [r5, #16]
 8033954:	68e3      	ldr	r3, [r4, #12]
 8033956:	616b      	str	r3, [r5, #20]
 8033958:	2a24      	cmp	r2, #36	@ 0x24
 803395a:	bf01      	itttt	eq
 803395c:	6923      	ldreq	r3, [r4, #16]
 803395e:	61ab      	streq	r3, [r5, #24]
 8033960:	6963      	ldreq	r3, [r4, #20]
 8033962:	61eb      	streq	r3, [r5, #28]
 8033964:	bf19      	ittee	ne
 8033966:	3410      	addne	r4, #16
 8033968:	f105 0018 	addne.w	r0, r5, #24
 803396c:	f105 0020 	addeq.w	r0, r5, #32
 8033970:	3418      	addeq	r4, #24
 8033972:	e7e5      	b.n	8033940 <_realloc_r+0x1f4>
 8033974:	4621      	mov	r1, r4
 8033976:	f7f8 fc69 	bl	802c24c <memmove>
 803397a:	e7e7      	b.n	803394c <_realloc_r+0x200>
 803397c:	9b01      	ldr	r3, [sp, #4]
 803397e:	4598      	cmp	r8, r3
 8033980:	dc31      	bgt.n	80339e6 <_realloc_r+0x29a>
 8033982:	4628      	mov	r0, r5
 8033984:	68eb      	ldr	r3, [r5, #12]
 8033986:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803398a:	60d3      	str	r3, [r2, #12]
 803398c:	609a      	str	r2, [r3, #8]
 803398e:	1f32      	subs	r2, r6, #4
 8033990:	2a24      	cmp	r2, #36	@ 0x24
 8033992:	d824      	bhi.n	80339de <_realloc_r+0x292>
 8033994:	2a13      	cmp	r2, #19
 8033996:	d908      	bls.n	80339aa <_realloc_r+0x25e>
 8033998:	6823      	ldr	r3, [r4, #0]
 803399a:	60ab      	str	r3, [r5, #8]
 803399c:	6863      	ldr	r3, [r4, #4]
 803399e:	60eb      	str	r3, [r5, #12]
 80339a0:	2a1b      	cmp	r2, #27
 80339a2:	d80a      	bhi.n	80339ba <_realloc_r+0x26e>
 80339a4:	3408      	adds	r4, #8
 80339a6:	f105 0010 	add.w	r0, r5, #16
 80339aa:	6823      	ldr	r3, [r4, #0]
 80339ac:	6003      	str	r3, [r0, #0]
 80339ae:	6863      	ldr	r3, [r4, #4]
 80339b0:	6043      	str	r3, [r0, #4]
 80339b2:	68a3      	ldr	r3, [r4, #8]
 80339b4:	6083      	str	r3, [r0, #8]
 80339b6:	9f01      	ldr	r7, [sp, #4]
 80339b8:	e7c8      	b.n	803394c <_realloc_r+0x200>
 80339ba:	68a3      	ldr	r3, [r4, #8]
 80339bc:	612b      	str	r3, [r5, #16]
 80339be:	68e3      	ldr	r3, [r4, #12]
 80339c0:	616b      	str	r3, [r5, #20]
 80339c2:	2a24      	cmp	r2, #36	@ 0x24
 80339c4:	bf01      	itttt	eq
 80339c6:	6923      	ldreq	r3, [r4, #16]
 80339c8:	61ab      	streq	r3, [r5, #24]
 80339ca:	6963      	ldreq	r3, [r4, #20]
 80339cc:	61eb      	streq	r3, [r5, #28]
 80339ce:	bf19      	ittee	ne
 80339d0:	3410      	addne	r4, #16
 80339d2:	f105 0018 	addne.w	r0, r5, #24
 80339d6:	f105 0020 	addeq.w	r0, r5, #32
 80339da:	3418      	addeq	r4, #24
 80339dc:	e7e5      	b.n	80339aa <_realloc_r+0x25e>
 80339de:	4621      	mov	r1, r4
 80339e0:	f7f8 fc34 	bl	802c24c <memmove>
 80339e4:	e7e7      	b.n	80339b6 <_realloc_r+0x26a>
 80339e6:	4659      	mov	r1, fp
 80339e8:	4650      	mov	r0, sl
 80339ea:	f7fa fe9f 	bl	802e72c <_malloc_r>
 80339ee:	4683      	mov	fp, r0
 80339f0:	b918      	cbnz	r0, 80339fa <_realloc_r+0x2ae>
 80339f2:	4650      	mov	r0, sl
 80339f4:	f7ff f9aa 	bl	8032d4c <__malloc_unlock>
 80339f8:	e6c7      	b.n	803378a <_realloc_r+0x3e>
 80339fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80339fe:	f023 0301 	bic.w	r3, r3, #1
 8033a02:	444b      	add	r3, r9
 8033a04:	f1a0 0208 	sub.w	r2, r0, #8
 8033a08:	4293      	cmp	r3, r2
 8033a0a:	d107      	bne.n	8033a1c <_realloc_r+0x2d0>
 8033a0c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8033a10:	f027 0703 	bic.w	r7, r7, #3
 8033a14:	4437      	add	r7, r6
 8033a16:	e6f8      	b.n	803380a <_realloc_r+0xbe>
 8033a18:	2000040c 	.word	0x2000040c
 8033a1c:	1f32      	subs	r2, r6, #4
 8033a1e:	2a24      	cmp	r2, #36	@ 0x24
 8033a20:	d82d      	bhi.n	8033a7e <_realloc_r+0x332>
 8033a22:	2a13      	cmp	r2, #19
 8033a24:	d928      	bls.n	8033a78 <_realloc_r+0x32c>
 8033a26:	6823      	ldr	r3, [r4, #0]
 8033a28:	6003      	str	r3, [r0, #0]
 8033a2a:	6863      	ldr	r3, [r4, #4]
 8033a2c:	6043      	str	r3, [r0, #4]
 8033a2e:	2a1b      	cmp	r2, #27
 8033a30:	d80e      	bhi.n	8033a50 <_realloc_r+0x304>
 8033a32:	f104 0208 	add.w	r2, r4, #8
 8033a36:	f100 0308 	add.w	r3, r0, #8
 8033a3a:	6811      	ldr	r1, [r2, #0]
 8033a3c:	6019      	str	r1, [r3, #0]
 8033a3e:	6851      	ldr	r1, [r2, #4]
 8033a40:	6059      	str	r1, [r3, #4]
 8033a42:	6892      	ldr	r2, [r2, #8]
 8033a44:	609a      	str	r2, [r3, #8]
 8033a46:	4621      	mov	r1, r4
 8033a48:	4650      	mov	r0, sl
 8033a4a:	f7fa fd57 	bl	802e4fc <_free_r>
 8033a4e:	e73f      	b.n	80338d0 <_realloc_r+0x184>
 8033a50:	68a3      	ldr	r3, [r4, #8]
 8033a52:	6083      	str	r3, [r0, #8]
 8033a54:	68e3      	ldr	r3, [r4, #12]
 8033a56:	60c3      	str	r3, [r0, #12]
 8033a58:	2a24      	cmp	r2, #36	@ 0x24
 8033a5a:	bf01      	itttt	eq
 8033a5c:	6923      	ldreq	r3, [r4, #16]
 8033a5e:	6103      	streq	r3, [r0, #16]
 8033a60:	6961      	ldreq	r1, [r4, #20]
 8033a62:	6141      	streq	r1, [r0, #20]
 8033a64:	bf19      	ittee	ne
 8033a66:	f104 0210 	addne.w	r2, r4, #16
 8033a6a:	f100 0310 	addne.w	r3, r0, #16
 8033a6e:	f104 0218 	addeq.w	r2, r4, #24
 8033a72:	f100 0318 	addeq.w	r3, r0, #24
 8033a76:	e7e0      	b.n	8033a3a <_realloc_r+0x2ee>
 8033a78:	4603      	mov	r3, r0
 8033a7a:	4622      	mov	r2, r4
 8033a7c:	e7dd      	b.n	8033a3a <_realloc_r+0x2ee>
 8033a7e:	4621      	mov	r1, r4
 8033a80:	f7f8 fbe4 	bl	802c24c <memmove>
 8033a84:	e7df      	b.n	8033a46 <_realloc_r+0x2fa>
 8033a86:	4637      	mov	r7, r6
 8033a88:	e6bf      	b.n	803380a <_realloc_r+0xbe>
 8033a8a:	431f      	orrs	r7, r3
 8033a8c:	f8c9 7004 	str.w	r7, [r9, #4]
 8033a90:	6853      	ldr	r3, [r2, #4]
 8033a92:	f043 0301 	orr.w	r3, r3, #1
 8033a96:	6053      	str	r3, [r2, #4]
 8033a98:	e6d3      	b.n	8033842 <_realloc_r+0xf6>
 8033a9a:	bf00      	nop

08033a9c <sulp>:
 8033a9c:	b570      	push	{r4, r5, r6, lr}
 8033a9e:	4604      	mov	r4, r0
 8033aa0:	460d      	mov	r5, r1
 8033aa2:	ec45 4b10 	vmov	d0, r4, r5
 8033aa6:	4616      	mov	r6, r2
 8033aa8:	f7ff fc7c 	bl	80333a4 <__ulp>
 8033aac:	ec51 0b10 	vmov	r0, r1, d0
 8033ab0:	b17e      	cbz	r6, 8033ad2 <sulp+0x36>
 8033ab2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8033ab6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8033aba:	2b00      	cmp	r3, #0
 8033abc:	dd09      	ble.n	8033ad2 <sulp+0x36>
 8033abe:	051b      	lsls	r3, r3, #20
 8033ac0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8033ac4:	2400      	movs	r4, #0
 8033ac6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8033aca:	4622      	mov	r2, r4
 8033acc:	462b      	mov	r3, r5
 8033ace:	f7dc fdab 	bl	8010628 <__aeabi_dmul>
 8033ad2:	ec41 0b10 	vmov	d0, r0, r1
 8033ad6:	bd70      	pop	{r4, r5, r6, pc}

08033ad8 <_strtod_l>:
 8033ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033adc:	b09f      	sub	sp, #124	@ 0x7c
 8033ade:	460c      	mov	r4, r1
 8033ae0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8033ae2:	2200      	movs	r2, #0
 8033ae4:	921a      	str	r2, [sp, #104]	@ 0x68
 8033ae6:	9005      	str	r0, [sp, #20]
 8033ae8:	f04f 0a00 	mov.w	sl, #0
 8033aec:	f04f 0b00 	mov.w	fp, #0
 8033af0:	460a      	mov	r2, r1
 8033af2:	9219      	str	r2, [sp, #100]	@ 0x64
 8033af4:	7811      	ldrb	r1, [r2, #0]
 8033af6:	292b      	cmp	r1, #43	@ 0x2b
 8033af8:	d04a      	beq.n	8033b90 <_strtod_l+0xb8>
 8033afa:	d838      	bhi.n	8033b6e <_strtod_l+0x96>
 8033afc:	290d      	cmp	r1, #13
 8033afe:	d832      	bhi.n	8033b66 <_strtod_l+0x8e>
 8033b00:	2908      	cmp	r1, #8
 8033b02:	d832      	bhi.n	8033b6a <_strtod_l+0x92>
 8033b04:	2900      	cmp	r1, #0
 8033b06:	d03b      	beq.n	8033b80 <_strtod_l+0xa8>
 8033b08:	2200      	movs	r2, #0
 8033b0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8033b0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8033b0e:	782a      	ldrb	r2, [r5, #0]
 8033b10:	2a30      	cmp	r2, #48	@ 0x30
 8033b12:	f040 80b3 	bne.w	8033c7c <_strtod_l+0x1a4>
 8033b16:	786a      	ldrb	r2, [r5, #1]
 8033b18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8033b1c:	2a58      	cmp	r2, #88	@ 0x58
 8033b1e:	d16e      	bne.n	8033bfe <_strtod_l+0x126>
 8033b20:	9302      	str	r3, [sp, #8]
 8033b22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8033b24:	9301      	str	r3, [sp, #4]
 8033b26:	ab1a      	add	r3, sp, #104	@ 0x68
 8033b28:	9300      	str	r3, [sp, #0]
 8033b2a:	4a8e      	ldr	r2, [pc, #568]	@ (8033d64 <_strtod_l+0x28c>)
 8033b2c:	9805      	ldr	r0, [sp, #20]
 8033b2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8033b30:	a919      	add	r1, sp, #100	@ 0x64
 8033b32:	f001 fa51 	bl	8034fd8 <__gethex>
 8033b36:	f010 060f 	ands.w	r6, r0, #15
 8033b3a:	4604      	mov	r4, r0
 8033b3c:	d005      	beq.n	8033b4a <_strtod_l+0x72>
 8033b3e:	2e06      	cmp	r6, #6
 8033b40:	d128      	bne.n	8033b94 <_strtod_l+0xbc>
 8033b42:	3501      	adds	r5, #1
 8033b44:	2300      	movs	r3, #0
 8033b46:	9519      	str	r5, [sp, #100]	@ 0x64
 8033b48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8033b4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8033b4c:	2b00      	cmp	r3, #0
 8033b4e:	f040 858e 	bne.w	803466e <_strtod_l+0xb96>
 8033b52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8033b54:	b1cb      	cbz	r3, 8033b8a <_strtod_l+0xb2>
 8033b56:	4652      	mov	r2, sl
 8033b58:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8033b5c:	ec43 2b10 	vmov	d0, r2, r3
 8033b60:	b01f      	add	sp, #124	@ 0x7c
 8033b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033b66:	2920      	cmp	r1, #32
 8033b68:	d1ce      	bne.n	8033b08 <_strtod_l+0x30>
 8033b6a:	3201      	adds	r2, #1
 8033b6c:	e7c1      	b.n	8033af2 <_strtod_l+0x1a>
 8033b6e:	292d      	cmp	r1, #45	@ 0x2d
 8033b70:	d1ca      	bne.n	8033b08 <_strtod_l+0x30>
 8033b72:	2101      	movs	r1, #1
 8033b74:	910b      	str	r1, [sp, #44]	@ 0x2c
 8033b76:	1c51      	adds	r1, r2, #1
 8033b78:	9119      	str	r1, [sp, #100]	@ 0x64
 8033b7a:	7852      	ldrb	r2, [r2, #1]
 8033b7c:	2a00      	cmp	r2, #0
 8033b7e:	d1c5      	bne.n	8033b0c <_strtod_l+0x34>
 8033b80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8033b82:	9419      	str	r4, [sp, #100]	@ 0x64
 8033b84:	2b00      	cmp	r3, #0
 8033b86:	f040 8570 	bne.w	803466a <_strtod_l+0xb92>
 8033b8a:	4652      	mov	r2, sl
 8033b8c:	465b      	mov	r3, fp
 8033b8e:	e7e5      	b.n	8033b5c <_strtod_l+0x84>
 8033b90:	2100      	movs	r1, #0
 8033b92:	e7ef      	b.n	8033b74 <_strtod_l+0x9c>
 8033b94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8033b96:	b13a      	cbz	r2, 8033ba8 <_strtod_l+0xd0>
 8033b98:	2135      	movs	r1, #53	@ 0x35
 8033b9a:	a81c      	add	r0, sp, #112	@ 0x70
 8033b9c:	f7ff fcfc 	bl	8033598 <__copybits>
 8033ba0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8033ba2:	9805      	ldr	r0, [sp, #20]
 8033ba4:	f7ff f8fd 	bl	8032da2 <_Bfree>
 8033ba8:	3e01      	subs	r6, #1
 8033baa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8033bac:	2e04      	cmp	r6, #4
 8033bae:	d806      	bhi.n	8033bbe <_strtod_l+0xe6>
 8033bb0:	e8df f006 	tbb	[pc, r6]
 8033bb4:	201d0314 	.word	0x201d0314
 8033bb8:	14          	.byte	0x14
 8033bb9:	00          	.byte	0x00
 8033bba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8033bbe:	05e1      	lsls	r1, r4, #23
 8033bc0:	bf48      	it	mi
 8033bc2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8033bc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8033bca:	0d1b      	lsrs	r3, r3, #20
 8033bcc:	051b      	lsls	r3, r3, #20
 8033bce:	2b00      	cmp	r3, #0
 8033bd0:	d1bb      	bne.n	8033b4a <_strtod_l+0x72>
 8033bd2:	f7f9 fd59 	bl	802d688 <__errno>
 8033bd6:	2322      	movs	r3, #34	@ 0x22
 8033bd8:	6003      	str	r3, [r0, #0]
 8033bda:	e7b6      	b.n	8033b4a <_strtod_l+0x72>
 8033bdc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8033be0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8033be4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8033be8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8033bec:	e7e7      	b.n	8033bbe <_strtod_l+0xe6>
 8033bee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8033d6c <_strtod_l+0x294>
 8033bf2:	e7e4      	b.n	8033bbe <_strtod_l+0xe6>
 8033bf4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8033bf8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8033bfc:	e7df      	b.n	8033bbe <_strtod_l+0xe6>
 8033bfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033c00:	1c5a      	adds	r2, r3, #1
 8033c02:	9219      	str	r2, [sp, #100]	@ 0x64
 8033c04:	785b      	ldrb	r3, [r3, #1]
 8033c06:	2b30      	cmp	r3, #48	@ 0x30
 8033c08:	d0f9      	beq.n	8033bfe <_strtod_l+0x126>
 8033c0a:	2b00      	cmp	r3, #0
 8033c0c:	d09d      	beq.n	8033b4a <_strtod_l+0x72>
 8033c0e:	2301      	movs	r3, #1
 8033c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8033c12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033c14:	930c      	str	r3, [sp, #48]	@ 0x30
 8033c16:	2300      	movs	r3, #0
 8033c18:	9308      	str	r3, [sp, #32]
 8033c1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8033c1c:	461f      	mov	r7, r3
 8033c1e:	220a      	movs	r2, #10
 8033c20:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8033c22:	7805      	ldrb	r5, [r0, #0]
 8033c24:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8033c28:	b2d9      	uxtb	r1, r3
 8033c2a:	2909      	cmp	r1, #9
 8033c2c:	d928      	bls.n	8033c80 <_strtod_l+0x1a8>
 8033c2e:	494e      	ldr	r1, [pc, #312]	@ (8033d68 <_strtod_l+0x290>)
 8033c30:	2201      	movs	r2, #1
 8033c32:	f7f8 fb5a 	bl	802c2ea <strncmp>
 8033c36:	2800      	cmp	r0, #0
 8033c38:	d032      	beq.n	8033ca0 <_strtod_l+0x1c8>
 8033c3a:	2000      	movs	r0, #0
 8033c3c:	462a      	mov	r2, r5
 8033c3e:	4681      	mov	r9, r0
 8033c40:	463d      	mov	r5, r7
 8033c42:	4603      	mov	r3, r0
 8033c44:	2a65      	cmp	r2, #101	@ 0x65
 8033c46:	d001      	beq.n	8033c4c <_strtod_l+0x174>
 8033c48:	2a45      	cmp	r2, #69	@ 0x45
 8033c4a:	d114      	bne.n	8033c76 <_strtod_l+0x19e>
 8033c4c:	b91d      	cbnz	r5, 8033c56 <_strtod_l+0x17e>
 8033c4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8033c50:	4302      	orrs	r2, r0
 8033c52:	d095      	beq.n	8033b80 <_strtod_l+0xa8>
 8033c54:	2500      	movs	r5, #0
 8033c56:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8033c58:	1c62      	adds	r2, r4, #1
 8033c5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8033c5c:	7862      	ldrb	r2, [r4, #1]
 8033c5e:	2a2b      	cmp	r2, #43	@ 0x2b
 8033c60:	d077      	beq.n	8033d52 <_strtod_l+0x27a>
 8033c62:	2a2d      	cmp	r2, #45	@ 0x2d
 8033c64:	d07b      	beq.n	8033d5e <_strtod_l+0x286>
 8033c66:	f04f 0c00 	mov.w	ip, #0
 8033c6a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8033c6e:	2909      	cmp	r1, #9
 8033c70:	f240 8082 	bls.w	8033d78 <_strtod_l+0x2a0>
 8033c74:	9419      	str	r4, [sp, #100]	@ 0x64
 8033c76:	f04f 0800 	mov.w	r8, #0
 8033c7a:	e0a2      	b.n	8033dc2 <_strtod_l+0x2ea>
 8033c7c:	2300      	movs	r3, #0
 8033c7e:	e7c7      	b.n	8033c10 <_strtod_l+0x138>
 8033c80:	2f08      	cmp	r7, #8
 8033c82:	bfd5      	itete	le
 8033c84:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8033c86:	9908      	ldrgt	r1, [sp, #32]
 8033c88:	fb02 3301 	mlale	r3, r2, r1, r3
 8033c8c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8033c90:	f100 0001 	add.w	r0, r0, #1
 8033c94:	bfd4      	ite	le
 8033c96:	930a      	strle	r3, [sp, #40]	@ 0x28
 8033c98:	9308      	strgt	r3, [sp, #32]
 8033c9a:	3701      	adds	r7, #1
 8033c9c:	9019      	str	r0, [sp, #100]	@ 0x64
 8033c9e:	e7bf      	b.n	8033c20 <_strtod_l+0x148>
 8033ca0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033ca2:	1c5a      	adds	r2, r3, #1
 8033ca4:	9219      	str	r2, [sp, #100]	@ 0x64
 8033ca6:	785a      	ldrb	r2, [r3, #1]
 8033ca8:	b37f      	cbz	r7, 8033d0a <_strtod_l+0x232>
 8033caa:	4681      	mov	r9, r0
 8033cac:	463d      	mov	r5, r7
 8033cae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8033cb2:	2b09      	cmp	r3, #9
 8033cb4:	d912      	bls.n	8033cdc <_strtod_l+0x204>
 8033cb6:	2301      	movs	r3, #1
 8033cb8:	e7c4      	b.n	8033c44 <_strtod_l+0x16c>
 8033cba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033cbc:	1c5a      	adds	r2, r3, #1
 8033cbe:	9219      	str	r2, [sp, #100]	@ 0x64
 8033cc0:	785a      	ldrb	r2, [r3, #1]
 8033cc2:	3001      	adds	r0, #1
 8033cc4:	2a30      	cmp	r2, #48	@ 0x30
 8033cc6:	d0f8      	beq.n	8033cba <_strtod_l+0x1e2>
 8033cc8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8033ccc:	2b08      	cmp	r3, #8
 8033cce:	f200 84d3 	bhi.w	8034678 <_strtod_l+0xba0>
 8033cd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033cd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8033cd6:	4681      	mov	r9, r0
 8033cd8:	2000      	movs	r0, #0
 8033cda:	4605      	mov	r5, r0
 8033cdc:	3a30      	subs	r2, #48	@ 0x30
 8033cde:	f100 0301 	add.w	r3, r0, #1
 8033ce2:	d02a      	beq.n	8033d3a <_strtod_l+0x262>
 8033ce4:	4499      	add	r9, r3
 8033ce6:	eb00 0c05 	add.w	ip, r0, r5
 8033cea:	462b      	mov	r3, r5
 8033cec:	210a      	movs	r1, #10
 8033cee:	4563      	cmp	r3, ip
 8033cf0:	d10d      	bne.n	8033d0e <_strtod_l+0x236>
 8033cf2:	1c69      	adds	r1, r5, #1
 8033cf4:	4401      	add	r1, r0
 8033cf6:	4428      	add	r0, r5
 8033cf8:	2808      	cmp	r0, #8
 8033cfa:	dc16      	bgt.n	8033d2a <_strtod_l+0x252>
 8033cfc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8033cfe:	230a      	movs	r3, #10
 8033d00:	fb03 2300 	mla	r3, r3, r0, r2
 8033d04:	930a      	str	r3, [sp, #40]	@ 0x28
 8033d06:	2300      	movs	r3, #0
 8033d08:	e018      	b.n	8033d3c <_strtod_l+0x264>
 8033d0a:	4638      	mov	r0, r7
 8033d0c:	e7da      	b.n	8033cc4 <_strtod_l+0x1ec>
 8033d0e:	2b08      	cmp	r3, #8
 8033d10:	f103 0301 	add.w	r3, r3, #1
 8033d14:	dc03      	bgt.n	8033d1e <_strtod_l+0x246>
 8033d16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8033d18:	434e      	muls	r6, r1
 8033d1a:	960a      	str	r6, [sp, #40]	@ 0x28
 8033d1c:	e7e7      	b.n	8033cee <_strtod_l+0x216>
 8033d1e:	2b10      	cmp	r3, #16
 8033d20:	bfde      	ittt	le
 8033d22:	9e08      	ldrle	r6, [sp, #32]
 8033d24:	434e      	mulle	r6, r1
 8033d26:	9608      	strle	r6, [sp, #32]
 8033d28:	e7e1      	b.n	8033cee <_strtod_l+0x216>
 8033d2a:	280f      	cmp	r0, #15
 8033d2c:	dceb      	bgt.n	8033d06 <_strtod_l+0x22e>
 8033d2e:	9808      	ldr	r0, [sp, #32]
 8033d30:	230a      	movs	r3, #10
 8033d32:	fb03 2300 	mla	r3, r3, r0, r2
 8033d36:	9308      	str	r3, [sp, #32]
 8033d38:	e7e5      	b.n	8033d06 <_strtod_l+0x22e>
 8033d3a:	4629      	mov	r1, r5
 8033d3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8033d3e:	1c50      	adds	r0, r2, #1
 8033d40:	9019      	str	r0, [sp, #100]	@ 0x64
 8033d42:	7852      	ldrb	r2, [r2, #1]
 8033d44:	4618      	mov	r0, r3
 8033d46:	460d      	mov	r5, r1
 8033d48:	e7b1      	b.n	8033cae <_strtod_l+0x1d6>
 8033d4a:	f04f 0900 	mov.w	r9, #0
 8033d4e:	2301      	movs	r3, #1
 8033d50:	e77d      	b.n	8033c4e <_strtod_l+0x176>
 8033d52:	f04f 0c00 	mov.w	ip, #0
 8033d56:	1ca2      	adds	r2, r4, #2
 8033d58:	9219      	str	r2, [sp, #100]	@ 0x64
 8033d5a:	78a2      	ldrb	r2, [r4, #2]
 8033d5c:	e785      	b.n	8033c6a <_strtod_l+0x192>
 8033d5e:	f04f 0c01 	mov.w	ip, #1
 8033d62:	e7f8      	b.n	8033d56 <_strtod_l+0x27e>
 8033d64:	0803b734 	.word	0x0803b734
 8033d68:	0803b19e 	.word	0x0803b19e
 8033d6c:	7ff00000 	.word	0x7ff00000
 8033d70:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8033d72:	1c51      	adds	r1, r2, #1
 8033d74:	9119      	str	r1, [sp, #100]	@ 0x64
 8033d76:	7852      	ldrb	r2, [r2, #1]
 8033d78:	2a30      	cmp	r2, #48	@ 0x30
 8033d7a:	d0f9      	beq.n	8033d70 <_strtod_l+0x298>
 8033d7c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8033d80:	2908      	cmp	r1, #8
 8033d82:	f63f af78 	bhi.w	8033c76 <_strtod_l+0x19e>
 8033d86:	3a30      	subs	r2, #48	@ 0x30
 8033d88:	920e      	str	r2, [sp, #56]	@ 0x38
 8033d8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8033d8c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8033d8e:	f04f 080a 	mov.w	r8, #10
 8033d92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8033d94:	1c56      	adds	r6, r2, #1
 8033d96:	9619      	str	r6, [sp, #100]	@ 0x64
 8033d98:	7852      	ldrb	r2, [r2, #1]
 8033d9a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8033d9e:	f1be 0f09 	cmp.w	lr, #9
 8033da2:	d939      	bls.n	8033e18 <_strtod_l+0x340>
 8033da4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8033da6:	1a76      	subs	r6, r6, r1
 8033da8:	2e08      	cmp	r6, #8
 8033daa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8033dae:	dc03      	bgt.n	8033db8 <_strtod_l+0x2e0>
 8033db0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8033db2:	4588      	cmp	r8, r1
 8033db4:	bfa8      	it	ge
 8033db6:	4688      	movge	r8, r1
 8033db8:	f1bc 0f00 	cmp.w	ip, #0
 8033dbc:	d001      	beq.n	8033dc2 <_strtod_l+0x2ea>
 8033dbe:	f1c8 0800 	rsb	r8, r8, #0
 8033dc2:	2d00      	cmp	r5, #0
 8033dc4:	d14e      	bne.n	8033e64 <_strtod_l+0x38c>
 8033dc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8033dc8:	4308      	orrs	r0, r1
 8033dca:	f47f aebe 	bne.w	8033b4a <_strtod_l+0x72>
 8033dce:	2b00      	cmp	r3, #0
 8033dd0:	f47f aed6 	bne.w	8033b80 <_strtod_l+0xa8>
 8033dd4:	2a69      	cmp	r2, #105	@ 0x69
 8033dd6:	d028      	beq.n	8033e2a <_strtod_l+0x352>
 8033dd8:	dc25      	bgt.n	8033e26 <_strtod_l+0x34e>
 8033dda:	2a49      	cmp	r2, #73	@ 0x49
 8033ddc:	d025      	beq.n	8033e2a <_strtod_l+0x352>
 8033dde:	2a4e      	cmp	r2, #78	@ 0x4e
 8033de0:	f47f aece 	bne.w	8033b80 <_strtod_l+0xa8>
 8033de4:	499b      	ldr	r1, [pc, #620]	@ (8034054 <_strtod_l+0x57c>)
 8033de6:	a819      	add	r0, sp, #100	@ 0x64
 8033de8:	f001 fb18 	bl	803541c <__match>
 8033dec:	2800      	cmp	r0, #0
 8033dee:	f43f aec7 	beq.w	8033b80 <_strtod_l+0xa8>
 8033df2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033df4:	781b      	ldrb	r3, [r3, #0]
 8033df6:	2b28      	cmp	r3, #40	@ 0x28
 8033df8:	d12e      	bne.n	8033e58 <_strtod_l+0x380>
 8033dfa:	4997      	ldr	r1, [pc, #604]	@ (8034058 <_strtod_l+0x580>)
 8033dfc:	aa1c      	add	r2, sp, #112	@ 0x70
 8033dfe:	a819      	add	r0, sp, #100	@ 0x64
 8033e00:	f001 fb20 	bl	8035444 <__hexnan>
 8033e04:	2805      	cmp	r0, #5
 8033e06:	d127      	bne.n	8033e58 <_strtod_l+0x380>
 8033e08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8033e0a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8033e0e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8033e12:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8033e16:	e698      	b.n	8033b4a <_strtod_l+0x72>
 8033e18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8033e1a:	fb08 2101 	mla	r1, r8, r1, r2
 8033e1e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8033e22:	920e      	str	r2, [sp, #56]	@ 0x38
 8033e24:	e7b5      	b.n	8033d92 <_strtod_l+0x2ba>
 8033e26:	2a6e      	cmp	r2, #110	@ 0x6e
 8033e28:	e7da      	b.n	8033de0 <_strtod_l+0x308>
 8033e2a:	498c      	ldr	r1, [pc, #560]	@ (803405c <_strtod_l+0x584>)
 8033e2c:	a819      	add	r0, sp, #100	@ 0x64
 8033e2e:	f001 faf5 	bl	803541c <__match>
 8033e32:	2800      	cmp	r0, #0
 8033e34:	f43f aea4 	beq.w	8033b80 <_strtod_l+0xa8>
 8033e38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033e3a:	4989      	ldr	r1, [pc, #548]	@ (8034060 <_strtod_l+0x588>)
 8033e3c:	3b01      	subs	r3, #1
 8033e3e:	a819      	add	r0, sp, #100	@ 0x64
 8033e40:	9319      	str	r3, [sp, #100]	@ 0x64
 8033e42:	f001 faeb 	bl	803541c <__match>
 8033e46:	b910      	cbnz	r0, 8033e4e <_strtod_l+0x376>
 8033e48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033e4a:	3301      	adds	r3, #1
 8033e4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8033e4e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8034070 <_strtod_l+0x598>
 8033e52:	f04f 0a00 	mov.w	sl, #0
 8033e56:	e678      	b.n	8033b4a <_strtod_l+0x72>
 8033e58:	4882      	ldr	r0, [pc, #520]	@ (8034064 <_strtod_l+0x58c>)
 8033e5a:	f001 f805 	bl	8034e68 <nan>
 8033e5e:	ec5b ab10 	vmov	sl, fp, d0
 8033e62:	e672      	b.n	8033b4a <_strtod_l+0x72>
 8033e64:	eba8 0309 	sub.w	r3, r8, r9
 8033e68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8033e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8033e6c:	2f00      	cmp	r7, #0
 8033e6e:	bf08      	it	eq
 8033e70:	462f      	moveq	r7, r5
 8033e72:	2d10      	cmp	r5, #16
 8033e74:	462c      	mov	r4, r5
 8033e76:	bfa8      	it	ge
 8033e78:	2410      	movge	r4, #16
 8033e7a:	f7dc fb5b 	bl	8010534 <__aeabi_ui2d>
 8033e7e:	2d09      	cmp	r5, #9
 8033e80:	4682      	mov	sl, r0
 8033e82:	468b      	mov	fp, r1
 8033e84:	dc13      	bgt.n	8033eae <_strtod_l+0x3d6>
 8033e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033e88:	2b00      	cmp	r3, #0
 8033e8a:	f43f ae5e 	beq.w	8033b4a <_strtod_l+0x72>
 8033e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033e90:	dd78      	ble.n	8033f84 <_strtod_l+0x4ac>
 8033e92:	2b16      	cmp	r3, #22
 8033e94:	dc5f      	bgt.n	8033f56 <_strtod_l+0x47e>
 8033e96:	4974      	ldr	r1, [pc, #464]	@ (8034068 <_strtod_l+0x590>)
 8033e98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8033e9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8033ea0:	4652      	mov	r2, sl
 8033ea2:	465b      	mov	r3, fp
 8033ea4:	f7dc fbc0 	bl	8010628 <__aeabi_dmul>
 8033ea8:	4682      	mov	sl, r0
 8033eaa:	468b      	mov	fp, r1
 8033eac:	e64d      	b.n	8033b4a <_strtod_l+0x72>
 8033eae:	4b6e      	ldr	r3, [pc, #440]	@ (8034068 <_strtod_l+0x590>)
 8033eb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8033eb4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8033eb8:	f7dc fbb6 	bl	8010628 <__aeabi_dmul>
 8033ebc:	4682      	mov	sl, r0
 8033ebe:	9808      	ldr	r0, [sp, #32]
 8033ec0:	468b      	mov	fp, r1
 8033ec2:	f7dc fb37 	bl	8010534 <__aeabi_ui2d>
 8033ec6:	4602      	mov	r2, r0
 8033ec8:	460b      	mov	r3, r1
 8033eca:	4650      	mov	r0, sl
 8033ecc:	4659      	mov	r1, fp
 8033ece:	f7dc f9f5 	bl	80102bc <__adddf3>
 8033ed2:	2d0f      	cmp	r5, #15
 8033ed4:	4682      	mov	sl, r0
 8033ed6:	468b      	mov	fp, r1
 8033ed8:	ddd5      	ble.n	8033e86 <_strtod_l+0x3ae>
 8033eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033edc:	1b2c      	subs	r4, r5, r4
 8033ede:	441c      	add	r4, r3
 8033ee0:	2c00      	cmp	r4, #0
 8033ee2:	f340 8096 	ble.w	8034012 <_strtod_l+0x53a>
 8033ee6:	f014 030f 	ands.w	r3, r4, #15
 8033eea:	d00a      	beq.n	8033f02 <_strtod_l+0x42a>
 8033eec:	495e      	ldr	r1, [pc, #376]	@ (8034068 <_strtod_l+0x590>)
 8033eee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8033ef2:	4652      	mov	r2, sl
 8033ef4:	465b      	mov	r3, fp
 8033ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8033efa:	f7dc fb95 	bl	8010628 <__aeabi_dmul>
 8033efe:	4682      	mov	sl, r0
 8033f00:	468b      	mov	fp, r1
 8033f02:	f034 040f 	bics.w	r4, r4, #15
 8033f06:	d073      	beq.n	8033ff0 <_strtod_l+0x518>
 8033f08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8033f0c:	dd48      	ble.n	8033fa0 <_strtod_l+0x4c8>
 8033f0e:	2400      	movs	r4, #0
 8033f10:	46a0      	mov	r8, r4
 8033f12:	940a      	str	r4, [sp, #40]	@ 0x28
 8033f14:	46a1      	mov	r9, r4
 8033f16:	9a05      	ldr	r2, [sp, #20]
 8033f18:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8034070 <_strtod_l+0x598>
 8033f1c:	2322      	movs	r3, #34	@ 0x22
 8033f1e:	6013      	str	r3, [r2, #0]
 8033f20:	f04f 0a00 	mov.w	sl, #0
 8033f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8033f26:	2b00      	cmp	r3, #0
 8033f28:	f43f ae0f 	beq.w	8033b4a <_strtod_l+0x72>
 8033f2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8033f2e:	9805      	ldr	r0, [sp, #20]
 8033f30:	f7fe ff37 	bl	8032da2 <_Bfree>
 8033f34:	9805      	ldr	r0, [sp, #20]
 8033f36:	4649      	mov	r1, r9
 8033f38:	f7fe ff33 	bl	8032da2 <_Bfree>
 8033f3c:	9805      	ldr	r0, [sp, #20]
 8033f3e:	4641      	mov	r1, r8
 8033f40:	f7fe ff2f 	bl	8032da2 <_Bfree>
 8033f44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8033f46:	9805      	ldr	r0, [sp, #20]
 8033f48:	f7fe ff2b 	bl	8032da2 <_Bfree>
 8033f4c:	9805      	ldr	r0, [sp, #20]
 8033f4e:	4621      	mov	r1, r4
 8033f50:	f7fe ff27 	bl	8032da2 <_Bfree>
 8033f54:	e5f9      	b.n	8033b4a <_strtod_l+0x72>
 8033f56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8033f58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8033f5c:	4293      	cmp	r3, r2
 8033f5e:	dbbc      	blt.n	8033eda <_strtod_l+0x402>
 8033f60:	4c41      	ldr	r4, [pc, #260]	@ (8034068 <_strtod_l+0x590>)
 8033f62:	f1c5 050f 	rsb	r5, r5, #15
 8033f66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8033f6a:	4652      	mov	r2, sl
 8033f6c:	465b      	mov	r3, fp
 8033f6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8033f72:	f7dc fb59 	bl	8010628 <__aeabi_dmul>
 8033f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033f78:	1b5d      	subs	r5, r3, r5
 8033f7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8033f7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8033f82:	e78f      	b.n	8033ea4 <_strtod_l+0x3cc>
 8033f84:	3316      	adds	r3, #22
 8033f86:	dba8      	blt.n	8033eda <_strtod_l+0x402>
 8033f88:	4b37      	ldr	r3, [pc, #220]	@ (8034068 <_strtod_l+0x590>)
 8033f8a:	eba9 0808 	sub.w	r8, r9, r8
 8033f8e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8033f92:	e9d8 2300 	ldrd	r2, r3, [r8]
 8033f96:	4650      	mov	r0, sl
 8033f98:	4659      	mov	r1, fp
 8033f9a:	f7dc fc6f 	bl	801087c <__aeabi_ddiv>
 8033f9e:	e783      	b.n	8033ea8 <_strtod_l+0x3d0>
 8033fa0:	4b32      	ldr	r3, [pc, #200]	@ (803406c <_strtod_l+0x594>)
 8033fa2:	9308      	str	r3, [sp, #32]
 8033fa4:	2300      	movs	r3, #0
 8033fa6:	1124      	asrs	r4, r4, #4
 8033fa8:	4650      	mov	r0, sl
 8033faa:	4659      	mov	r1, fp
 8033fac:	461e      	mov	r6, r3
 8033fae:	2c01      	cmp	r4, #1
 8033fb0:	dc21      	bgt.n	8033ff6 <_strtod_l+0x51e>
 8033fb2:	b10b      	cbz	r3, 8033fb8 <_strtod_l+0x4e0>
 8033fb4:	4682      	mov	sl, r0
 8033fb6:	468b      	mov	fp, r1
 8033fb8:	492c      	ldr	r1, [pc, #176]	@ (803406c <_strtod_l+0x594>)
 8033fba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8033fbe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8033fc2:	4652      	mov	r2, sl
 8033fc4:	465b      	mov	r3, fp
 8033fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8033fca:	f7dc fb2d 	bl	8010628 <__aeabi_dmul>
 8033fce:	4b28      	ldr	r3, [pc, #160]	@ (8034070 <_strtod_l+0x598>)
 8033fd0:	460a      	mov	r2, r1
 8033fd2:	400b      	ands	r3, r1
 8033fd4:	4927      	ldr	r1, [pc, #156]	@ (8034074 <_strtod_l+0x59c>)
 8033fd6:	428b      	cmp	r3, r1
 8033fd8:	4682      	mov	sl, r0
 8033fda:	d898      	bhi.n	8033f0e <_strtod_l+0x436>
 8033fdc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8033fe0:	428b      	cmp	r3, r1
 8033fe2:	bf86      	itte	hi
 8033fe4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8034078 <_strtod_l+0x5a0>
 8033fe8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8033fec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8033ff0:	2300      	movs	r3, #0
 8033ff2:	9308      	str	r3, [sp, #32]
 8033ff4:	e07a      	b.n	80340ec <_strtod_l+0x614>
 8033ff6:	07e2      	lsls	r2, r4, #31
 8033ff8:	d505      	bpl.n	8034006 <_strtod_l+0x52e>
 8033ffa:	9b08      	ldr	r3, [sp, #32]
 8033ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034000:	f7dc fb12 	bl	8010628 <__aeabi_dmul>
 8034004:	2301      	movs	r3, #1
 8034006:	9a08      	ldr	r2, [sp, #32]
 8034008:	3208      	adds	r2, #8
 803400a:	3601      	adds	r6, #1
 803400c:	1064      	asrs	r4, r4, #1
 803400e:	9208      	str	r2, [sp, #32]
 8034010:	e7cd      	b.n	8033fae <_strtod_l+0x4d6>
 8034012:	d0ed      	beq.n	8033ff0 <_strtod_l+0x518>
 8034014:	4264      	negs	r4, r4
 8034016:	f014 020f 	ands.w	r2, r4, #15
 803401a:	d00a      	beq.n	8034032 <_strtod_l+0x55a>
 803401c:	4b12      	ldr	r3, [pc, #72]	@ (8034068 <_strtod_l+0x590>)
 803401e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8034022:	4650      	mov	r0, sl
 8034024:	4659      	mov	r1, fp
 8034026:	e9d3 2300 	ldrd	r2, r3, [r3]
 803402a:	f7dc fc27 	bl	801087c <__aeabi_ddiv>
 803402e:	4682      	mov	sl, r0
 8034030:	468b      	mov	fp, r1
 8034032:	1124      	asrs	r4, r4, #4
 8034034:	d0dc      	beq.n	8033ff0 <_strtod_l+0x518>
 8034036:	2c1f      	cmp	r4, #31
 8034038:	dd20      	ble.n	803407c <_strtod_l+0x5a4>
 803403a:	2400      	movs	r4, #0
 803403c:	46a0      	mov	r8, r4
 803403e:	940a      	str	r4, [sp, #40]	@ 0x28
 8034040:	46a1      	mov	r9, r4
 8034042:	9a05      	ldr	r2, [sp, #20]
 8034044:	2322      	movs	r3, #34	@ 0x22
 8034046:	f04f 0a00 	mov.w	sl, #0
 803404a:	f04f 0b00 	mov.w	fp, #0
 803404e:	6013      	str	r3, [r2, #0]
 8034050:	e768      	b.n	8033f24 <_strtod_l+0x44c>
 8034052:	bf00      	nop
 8034054:	0803b1a1 	.word	0x0803b1a1
 8034058:	0803b720 	.word	0x0803b720
 803405c:	0803b010 	.word	0x0803b010
 8034060:	0803b4cc 	.word	0x0803b4cc
 8034064:	0803b00a 	.word	0x0803b00a
 8034068:	0803b658 	.word	0x0803b658
 803406c:	0803b630 	.word	0x0803b630
 8034070:	7ff00000 	.word	0x7ff00000
 8034074:	7ca00000 	.word	0x7ca00000
 8034078:	7fefffff 	.word	0x7fefffff
 803407c:	f014 0310 	ands.w	r3, r4, #16
 8034080:	bf18      	it	ne
 8034082:	236a      	movne	r3, #106	@ 0x6a
 8034084:	4ea9      	ldr	r6, [pc, #676]	@ (803432c <_strtod_l+0x854>)
 8034086:	9308      	str	r3, [sp, #32]
 8034088:	4650      	mov	r0, sl
 803408a:	4659      	mov	r1, fp
 803408c:	2300      	movs	r3, #0
 803408e:	07e2      	lsls	r2, r4, #31
 8034090:	d504      	bpl.n	803409c <_strtod_l+0x5c4>
 8034092:	e9d6 2300 	ldrd	r2, r3, [r6]
 8034096:	f7dc fac7 	bl	8010628 <__aeabi_dmul>
 803409a:	2301      	movs	r3, #1
 803409c:	1064      	asrs	r4, r4, #1
 803409e:	f106 0608 	add.w	r6, r6, #8
 80340a2:	d1f4      	bne.n	803408e <_strtod_l+0x5b6>
 80340a4:	b10b      	cbz	r3, 80340aa <_strtod_l+0x5d2>
 80340a6:	4682      	mov	sl, r0
 80340a8:	468b      	mov	fp, r1
 80340aa:	9b08      	ldr	r3, [sp, #32]
 80340ac:	b1b3      	cbz	r3, 80340dc <_strtod_l+0x604>
 80340ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80340b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80340b6:	2b00      	cmp	r3, #0
 80340b8:	4659      	mov	r1, fp
 80340ba:	dd0f      	ble.n	80340dc <_strtod_l+0x604>
 80340bc:	2b1f      	cmp	r3, #31
 80340be:	dd55      	ble.n	803416c <_strtod_l+0x694>
 80340c0:	2b34      	cmp	r3, #52	@ 0x34
 80340c2:	bfde      	ittt	le
 80340c4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80340c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80340cc:	4093      	lslle	r3, r2
 80340ce:	f04f 0a00 	mov.w	sl, #0
 80340d2:	bfcc      	ite	gt
 80340d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80340d8:	ea03 0b01 	andle.w	fp, r3, r1
 80340dc:	2200      	movs	r2, #0
 80340de:	2300      	movs	r3, #0
 80340e0:	4650      	mov	r0, sl
 80340e2:	4659      	mov	r1, fp
 80340e4:	f7dc fd08 	bl	8010af8 <__aeabi_dcmpeq>
 80340e8:	2800      	cmp	r0, #0
 80340ea:	d1a6      	bne.n	803403a <_strtod_l+0x562>
 80340ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80340ee:	9300      	str	r3, [sp, #0]
 80340f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80340f2:	9805      	ldr	r0, [sp, #20]
 80340f4:	462b      	mov	r3, r5
 80340f6:	463a      	mov	r2, r7
 80340f8:	f7fe fea2 	bl	8032e40 <__s2b>
 80340fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80340fe:	2800      	cmp	r0, #0
 8034100:	f43f af05 	beq.w	8033f0e <_strtod_l+0x436>
 8034104:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034106:	2a00      	cmp	r2, #0
 8034108:	eba9 0308 	sub.w	r3, r9, r8
 803410c:	bfa8      	it	ge
 803410e:	2300      	movge	r3, #0
 8034110:	9312      	str	r3, [sp, #72]	@ 0x48
 8034112:	2400      	movs	r4, #0
 8034114:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8034118:	9316      	str	r3, [sp, #88]	@ 0x58
 803411a:	46a0      	mov	r8, r4
 803411c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803411e:	9805      	ldr	r0, [sp, #20]
 8034120:	6859      	ldr	r1, [r3, #4]
 8034122:	f7fe fe19 	bl	8032d58 <_Balloc>
 8034126:	4681      	mov	r9, r0
 8034128:	2800      	cmp	r0, #0
 803412a:	f43f aef4 	beq.w	8033f16 <_strtod_l+0x43e>
 803412e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034130:	691a      	ldr	r2, [r3, #16]
 8034132:	3202      	adds	r2, #2
 8034134:	f103 010c 	add.w	r1, r3, #12
 8034138:	0092      	lsls	r2, r2, #2
 803413a:	300c      	adds	r0, #12
 803413c:	f7f9 fadc 	bl	802d6f8 <memcpy>
 8034140:	ec4b ab10 	vmov	d0, sl, fp
 8034144:	9805      	ldr	r0, [sp, #20]
 8034146:	aa1c      	add	r2, sp, #112	@ 0x70
 8034148:	a91b      	add	r1, sp, #108	@ 0x6c
 803414a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 803414e:	f7ff f999 	bl	8033484 <__d2b>
 8034152:	901a      	str	r0, [sp, #104]	@ 0x68
 8034154:	2800      	cmp	r0, #0
 8034156:	f43f aede 	beq.w	8033f16 <_strtod_l+0x43e>
 803415a:	9805      	ldr	r0, [sp, #20]
 803415c:	2101      	movs	r1, #1
 803415e:	f7fe ff05 	bl	8032f6c <__i2b>
 8034162:	4680      	mov	r8, r0
 8034164:	b948      	cbnz	r0, 803417a <_strtod_l+0x6a2>
 8034166:	f04f 0800 	mov.w	r8, #0
 803416a:	e6d4      	b.n	8033f16 <_strtod_l+0x43e>
 803416c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8034170:	fa02 f303 	lsl.w	r3, r2, r3
 8034174:	ea03 0a0a 	and.w	sl, r3, sl
 8034178:	e7b0      	b.n	80340dc <_strtod_l+0x604>
 803417a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 803417c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 803417e:	2d00      	cmp	r5, #0
 8034180:	bfab      	itete	ge
 8034182:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8034184:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8034186:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8034188:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 803418a:	bfac      	ite	ge
 803418c:	18ef      	addge	r7, r5, r3
 803418e:	1b5e      	sublt	r6, r3, r5
 8034190:	9b08      	ldr	r3, [sp, #32]
 8034192:	1aed      	subs	r5, r5, r3
 8034194:	4415      	add	r5, r2
 8034196:	4b66      	ldr	r3, [pc, #408]	@ (8034330 <_strtod_l+0x858>)
 8034198:	3d01      	subs	r5, #1
 803419a:	429d      	cmp	r5, r3
 803419c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80341a0:	da50      	bge.n	8034244 <_strtod_l+0x76c>
 80341a2:	1b5b      	subs	r3, r3, r5
 80341a4:	2b1f      	cmp	r3, #31
 80341a6:	eba2 0203 	sub.w	r2, r2, r3
 80341aa:	f04f 0101 	mov.w	r1, #1
 80341ae:	dc3d      	bgt.n	803422c <_strtod_l+0x754>
 80341b0:	fa01 f303 	lsl.w	r3, r1, r3
 80341b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80341b6:	2300      	movs	r3, #0
 80341b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80341ba:	18bd      	adds	r5, r7, r2
 80341bc:	9b08      	ldr	r3, [sp, #32]
 80341be:	42af      	cmp	r7, r5
 80341c0:	4416      	add	r6, r2
 80341c2:	441e      	add	r6, r3
 80341c4:	463b      	mov	r3, r7
 80341c6:	bfa8      	it	ge
 80341c8:	462b      	movge	r3, r5
 80341ca:	42b3      	cmp	r3, r6
 80341cc:	bfa8      	it	ge
 80341ce:	4633      	movge	r3, r6
 80341d0:	2b00      	cmp	r3, #0
 80341d2:	bfc2      	ittt	gt
 80341d4:	1aed      	subgt	r5, r5, r3
 80341d6:	1af6      	subgt	r6, r6, r3
 80341d8:	1aff      	subgt	r7, r7, r3
 80341da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80341dc:	2b00      	cmp	r3, #0
 80341de:	dd16      	ble.n	803420e <_strtod_l+0x736>
 80341e0:	4641      	mov	r1, r8
 80341e2:	9805      	ldr	r0, [sp, #20]
 80341e4:	461a      	mov	r2, r3
 80341e6:	f7fe ff81 	bl	80330ec <__pow5mult>
 80341ea:	4680      	mov	r8, r0
 80341ec:	2800      	cmp	r0, #0
 80341ee:	d0ba      	beq.n	8034166 <_strtod_l+0x68e>
 80341f0:	4601      	mov	r1, r0
 80341f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80341f4:	9805      	ldr	r0, [sp, #20]
 80341f6:	f7fe fecf 	bl	8032f98 <__multiply>
 80341fa:	900e      	str	r0, [sp, #56]	@ 0x38
 80341fc:	2800      	cmp	r0, #0
 80341fe:	f43f ae8a 	beq.w	8033f16 <_strtod_l+0x43e>
 8034202:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034204:	9805      	ldr	r0, [sp, #20]
 8034206:	f7fe fdcc 	bl	8032da2 <_Bfree>
 803420a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803420c:	931a      	str	r3, [sp, #104]	@ 0x68
 803420e:	2d00      	cmp	r5, #0
 8034210:	dc1d      	bgt.n	803424e <_strtod_l+0x776>
 8034212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034214:	2b00      	cmp	r3, #0
 8034216:	dd23      	ble.n	8034260 <_strtod_l+0x788>
 8034218:	4649      	mov	r1, r9
 803421a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 803421c:	9805      	ldr	r0, [sp, #20]
 803421e:	f7fe ff65 	bl	80330ec <__pow5mult>
 8034222:	4681      	mov	r9, r0
 8034224:	b9e0      	cbnz	r0, 8034260 <_strtod_l+0x788>
 8034226:	f04f 0900 	mov.w	r9, #0
 803422a:	e674      	b.n	8033f16 <_strtod_l+0x43e>
 803422c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8034230:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8034234:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8034238:	35e2      	adds	r5, #226	@ 0xe2
 803423a:	fa01 f305 	lsl.w	r3, r1, r5
 803423e:	9310      	str	r3, [sp, #64]	@ 0x40
 8034240:	9113      	str	r1, [sp, #76]	@ 0x4c
 8034242:	e7ba      	b.n	80341ba <_strtod_l+0x6e2>
 8034244:	2300      	movs	r3, #0
 8034246:	9310      	str	r3, [sp, #64]	@ 0x40
 8034248:	2301      	movs	r3, #1
 803424a:	9313      	str	r3, [sp, #76]	@ 0x4c
 803424c:	e7b5      	b.n	80341ba <_strtod_l+0x6e2>
 803424e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034250:	9805      	ldr	r0, [sp, #20]
 8034252:	462a      	mov	r2, r5
 8034254:	f7fe ff8a 	bl	803316c <__lshift>
 8034258:	901a      	str	r0, [sp, #104]	@ 0x68
 803425a:	2800      	cmp	r0, #0
 803425c:	d1d9      	bne.n	8034212 <_strtod_l+0x73a>
 803425e:	e65a      	b.n	8033f16 <_strtod_l+0x43e>
 8034260:	2e00      	cmp	r6, #0
 8034262:	dd07      	ble.n	8034274 <_strtod_l+0x79c>
 8034264:	4649      	mov	r1, r9
 8034266:	9805      	ldr	r0, [sp, #20]
 8034268:	4632      	mov	r2, r6
 803426a:	f7fe ff7f 	bl	803316c <__lshift>
 803426e:	4681      	mov	r9, r0
 8034270:	2800      	cmp	r0, #0
 8034272:	d0d8      	beq.n	8034226 <_strtod_l+0x74e>
 8034274:	2f00      	cmp	r7, #0
 8034276:	dd08      	ble.n	803428a <_strtod_l+0x7b2>
 8034278:	4641      	mov	r1, r8
 803427a:	9805      	ldr	r0, [sp, #20]
 803427c:	463a      	mov	r2, r7
 803427e:	f7fe ff75 	bl	803316c <__lshift>
 8034282:	4680      	mov	r8, r0
 8034284:	2800      	cmp	r0, #0
 8034286:	f43f ae46 	beq.w	8033f16 <_strtod_l+0x43e>
 803428a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803428c:	9805      	ldr	r0, [sp, #20]
 803428e:	464a      	mov	r2, r9
 8034290:	f7fe fff4 	bl	803327c <__mdiff>
 8034294:	4604      	mov	r4, r0
 8034296:	2800      	cmp	r0, #0
 8034298:	f43f ae3d 	beq.w	8033f16 <_strtod_l+0x43e>
 803429c:	68c3      	ldr	r3, [r0, #12]
 803429e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80342a0:	2300      	movs	r3, #0
 80342a2:	60c3      	str	r3, [r0, #12]
 80342a4:	4641      	mov	r1, r8
 80342a6:	f7fe ffcd 	bl	8033244 <__mcmp>
 80342aa:	2800      	cmp	r0, #0
 80342ac:	da46      	bge.n	803433c <_strtod_l+0x864>
 80342ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80342b0:	ea53 030a 	orrs.w	r3, r3, sl
 80342b4:	d16c      	bne.n	8034390 <_strtod_l+0x8b8>
 80342b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80342ba:	2b00      	cmp	r3, #0
 80342bc:	d168      	bne.n	8034390 <_strtod_l+0x8b8>
 80342be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80342c2:	0d1b      	lsrs	r3, r3, #20
 80342c4:	051b      	lsls	r3, r3, #20
 80342c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80342ca:	d961      	bls.n	8034390 <_strtod_l+0x8b8>
 80342cc:	6963      	ldr	r3, [r4, #20]
 80342ce:	b913      	cbnz	r3, 80342d6 <_strtod_l+0x7fe>
 80342d0:	6923      	ldr	r3, [r4, #16]
 80342d2:	2b01      	cmp	r3, #1
 80342d4:	dd5c      	ble.n	8034390 <_strtod_l+0x8b8>
 80342d6:	4621      	mov	r1, r4
 80342d8:	2201      	movs	r2, #1
 80342da:	9805      	ldr	r0, [sp, #20]
 80342dc:	f7fe ff46 	bl	803316c <__lshift>
 80342e0:	4641      	mov	r1, r8
 80342e2:	4604      	mov	r4, r0
 80342e4:	f7fe ffae 	bl	8033244 <__mcmp>
 80342e8:	2800      	cmp	r0, #0
 80342ea:	dd51      	ble.n	8034390 <_strtod_l+0x8b8>
 80342ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80342f0:	9a08      	ldr	r2, [sp, #32]
 80342f2:	0d1b      	lsrs	r3, r3, #20
 80342f4:	051b      	lsls	r3, r3, #20
 80342f6:	2a00      	cmp	r2, #0
 80342f8:	d06b      	beq.n	80343d2 <_strtod_l+0x8fa>
 80342fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80342fe:	d868      	bhi.n	80343d2 <_strtod_l+0x8fa>
 8034300:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8034304:	f67f ae9d 	bls.w	8034042 <_strtod_l+0x56a>
 8034308:	4b0a      	ldr	r3, [pc, #40]	@ (8034334 <_strtod_l+0x85c>)
 803430a:	4650      	mov	r0, sl
 803430c:	4659      	mov	r1, fp
 803430e:	2200      	movs	r2, #0
 8034310:	f7dc f98a 	bl	8010628 <__aeabi_dmul>
 8034314:	4b08      	ldr	r3, [pc, #32]	@ (8034338 <_strtod_l+0x860>)
 8034316:	400b      	ands	r3, r1
 8034318:	4682      	mov	sl, r0
 803431a:	468b      	mov	fp, r1
 803431c:	2b00      	cmp	r3, #0
 803431e:	f47f ae05 	bne.w	8033f2c <_strtod_l+0x454>
 8034322:	9a05      	ldr	r2, [sp, #20]
 8034324:	2322      	movs	r3, #34	@ 0x22
 8034326:	6013      	str	r3, [r2, #0]
 8034328:	e600      	b.n	8033f2c <_strtod_l+0x454>
 803432a:	bf00      	nop
 803432c:	0803b748 	.word	0x0803b748
 8034330:	fffffc02 	.word	0xfffffc02
 8034334:	39500000 	.word	0x39500000
 8034338:	7ff00000 	.word	0x7ff00000
 803433c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8034340:	d165      	bne.n	803440e <_strtod_l+0x936>
 8034342:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8034344:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8034348:	b35a      	cbz	r2, 80343a2 <_strtod_l+0x8ca>
 803434a:	4a9f      	ldr	r2, [pc, #636]	@ (80345c8 <_strtod_l+0xaf0>)
 803434c:	4293      	cmp	r3, r2
 803434e:	d12b      	bne.n	80343a8 <_strtod_l+0x8d0>
 8034350:	9b08      	ldr	r3, [sp, #32]
 8034352:	4651      	mov	r1, sl
 8034354:	b303      	cbz	r3, 8034398 <_strtod_l+0x8c0>
 8034356:	4b9d      	ldr	r3, [pc, #628]	@ (80345cc <_strtod_l+0xaf4>)
 8034358:	465a      	mov	r2, fp
 803435a:	4013      	ands	r3, r2
 803435c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8034360:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8034364:	d81b      	bhi.n	803439e <_strtod_l+0x8c6>
 8034366:	0d1b      	lsrs	r3, r3, #20
 8034368:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 803436c:	fa02 f303 	lsl.w	r3, r2, r3
 8034370:	4299      	cmp	r1, r3
 8034372:	d119      	bne.n	80343a8 <_strtod_l+0x8d0>
 8034374:	4b96      	ldr	r3, [pc, #600]	@ (80345d0 <_strtod_l+0xaf8>)
 8034376:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8034378:	429a      	cmp	r2, r3
 803437a:	d102      	bne.n	8034382 <_strtod_l+0x8aa>
 803437c:	3101      	adds	r1, #1
 803437e:	f43f adca 	beq.w	8033f16 <_strtod_l+0x43e>
 8034382:	4b92      	ldr	r3, [pc, #584]	@ (80345cc <_strtod_l+0xaf4>)
 8034384:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8034386:	401a      	ands	r2, r3
 8034388:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 803438c:	f04f 0a00 	mov.w	sl, #0
 8034390:	9b08      	ldr	r3, [sp, #32]
 8034392:	2b00      	cmp	r3, #0
 8034394:	d1b8      	bne.n	8034308 <_strtod_l+0x830>
 8034396:	e5c9      	b.n	8033f2c <_strtod_l+0x454>
 8034398:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803439c:	e7e8      	b.n	8034370 <_strtod_l+0x898>
 803439e:	4613      	mov	r3, r2
 80343a0:	e7e6      	b.n	8034370 <_strtod_l+0x898>
 80343a2:	ea53 030a 	orrs.w	r3, r3, sl
 80343a6:	d0a1      	beq.n	80342ec <_strtod_l+0x814>
 80343a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80343aa:	b1db      	cbz	r3, 80343e4 <_strtod_l+0x90c>
 80343ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80343ae:	4213      	tst	r3, r2
 80343b0:	d0ee      	beq.n	8034390 <_strtod_l+0x8b8>
 80343b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80343b4:	9a08      	ldr	r2, [sp, #32]
 80343b6:	4650      	mov	r0, sl
 80343b8:	4659      	mov	r1, fp
 80343ba:	b1bb      	cbz	r3, 80343ec <_strtod_l+0x914>
 80343bc:	f7ff fb6e 	bl	8033a9c <sulp>
 80343c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80343c4:	ec53 2b10 	vmov	r2, r3, d0
 80343c8:	f7db ff78 	bl	80102bc <__adddf3>
 80343cc:	4682      	mov	sl, r0
 80343ce:	468b      	mov	fp, r1
 80343d0:	e7de      	b.n	8034390 <_strtod_l+0x8b8>
 80343d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80343d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80343da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80343de:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80343e2:	e7d5      	b.n	8034390 <_strtod_l+0x8b8>
 80343e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80343e6:	ea13 0f0a 	tst.w	r3, sl
 80343ea:	e7e1      	b.n	80343b0 <_strtod_l+0x8d8>
 80343ec:	f7ff fb56 	bl	8033a9c <sulp>
 80343f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80343f4:	ec53 2b10 	vmov	r2, r3, d0
 80343f8:	f7db ff5e 	bl	80102b8 <__aeabi_dsub>
 80343fc:	2200      	movs	r2, #0
 80343fe:	2300      	movs	r3, #0
 8034400:	4682      	mov	sl, r0
 8034402:	468b      	mov	fp, r1
 8034404:	f7dc fb78 	bl	8010af8 <__aeabi_dcmpeq>
 8034408:	2800      	cmp	r0, #0
 803440a:	d0c1      	beq.n	8034390 <_strtod_l+0x8b8>
 803440c:	e619      	b.n	8034042 <_strtod_l+0x56a>
 803440e:	4641      	mov	r1, r8
 8034410:	4620      	mov	r0, r4
 8034412:	f7ff f88f 	bl	8033534 <__ratio>
 8034416:	ec57 6b10 	vmov	r6, r7, d0
 803441a:	2200      	movs	r2, #0
 803441c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8034420:	4630      	mov	r0, r6
 8034422:	4639      	mov	r1, r7
 8034424:	f7dc fb7c 	bl	8010b20 <__aeabi_dcmple>
 8034428:	2800      	cmp	r0, #0
 803442a:	d06f      	beq.n	803450c <_strtod_l+0xa34>
 803442c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803442e:	2b00      	cmp	r3, #0
 8034430:	d17a      	bne.n	8034528 <_strtod_l+0xa50>
 8034432:	f1ba 0f00 	cmp.w	sl, #0
 8034436:	d158      	bne.n	80344ea <_strtod_l+0xa12>
 8034438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803443a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 803443e:	2b00      	cmp	r3, #0
 8034440:	d15a      	bne.n	80344f8 <_strtod_l+0xa20>
 8034442:	4b64      	ldr	r3, [pc, #400]	@ (80345d4 <_strtod_l+0xafc>)
 8034444:	2200      	movs	r2, #0
 8034446:	4630      	mov	r0, r6
 8034448:	4639      	mov	r1, r7
 803444a:	f7dc fb5f 	bl	8010b0c <__aeabi_dcmplt>
 803444e:	2800      	cmp	r0, #0
 8034450:	d159      	bne.n	8034506 <_strtod_l+0xa2e>
 8034452:	4630      	mov	r0, r6
 8034454:	4639      	mov	r1, r7
 8034456:	4b60      	ldr	r3, [pc, #384]	@ (80345d8 <_strtod_l+0xb00>)
 8034458:	2200      	movs	r2, #0
 803445a:	f7dc f8e5 	bl	8010628 <__aeabi_dmul>
 803445e:	4606      	mov	r6, r0
 8034460:	460f      	mov	r7, r1
 8034462:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8034466:	9606      	str	r6, [sp, #24]
 8034468:	9307      	str	r3, [sp, #28]
 803446a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 803446e:	4d57      	ldr	r5, [pc, #348]	@ (80345cc <_strtod_l+0xaf4>)
 8034470:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8034474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034476:	401d      	ands	r5, r3
 8034478:	4b58      	ldr	r3, [pc, #352]	@ (80345dc <_strtod_l+0xb04>)
 803447a:	429d      	cmp	r5, r3
 803447c:	f040 80b2 	bne.w	80345e4 <_strtod_l+0xb0c>
 8034480:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034482:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8034486:	ec4b ab10 	vmov	d0, sl, fp
 803448a:	f7fe ff8b 	bl	80333a4 <__ulp>
 803448e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8034492:	ec51 0b10 	vmov	r0, r1, d0
 8034496:	f7dc f8c7 	bl	8010628 <__aeabi_dmul>
 803449a:	4652      	mov	r2, sl
 803449c:	465b      	mov	r3, fp
 803449e:	f7db ff0d 	bl	80102bc <__adddf3>
 80344a2:	460b      	mov	r3, r1
 80344a4:	4949      	ldr	r1, [pc, #292]	@ (80345cc <_strtod_l+0xaf4>)
 80344a6:	4a4e      	ldr	r2, [pc, #312]	@ (80345e0 <_strtod_l+0xb08>)
 80344a8:	4019      	ands	r1, r3
 80344aa:	4291      	cmp	r1, r2
 80344ac:	4682      	mov	sl, r0
 80344ae:	d942      	bls.n	8034536 <_strtod_l+0xa5e>
 80344b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80344b2:	4b47      	ldr	r3, [pc, #284]	@ (80345d0 <_strtod_l+0xaf8>)
 80344b4:	429a      	cmp	r2, r3
 80344b6:	d103      	bne.n	80344c0 <_strtod_l+0x9e8>
 80344b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80344ba:	3301      	adds	r3, #1
 80344bc:	f43f ad2b 	beq.w	8033f16 <_strtod_l+0x43e>
 80344c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80345d0 <_strtod_l+0xaf8>
 80344c4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80344c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80344ca:	9805      	ldr	r0, [sp, #20]
 80344cc:	f7fe fc69 	bl	8032da2 <_Bfree>
 80344d0:	9805      	ldr	r0, [sp, #20]
 80344d2:	4649      	mov	r1, r9
 80344d4:	f7fe fc65 	bl	8032da2 <_Bfree>
 80344d8:	9805      	ldr	r0, [sp, #20]
 80344da:	4641      	mov	r1, r8
 80344dc:	f7fe fc61 	bl	8032da2 <_Bfree>
 80344e0:	9805      	ldr	r0, [sp, #20]
 80344e2:	4621      	mov	r1, r4
 80344e4:	f7fe fc5d 	bl	8032da2 <_Bfree>
 80344e8:	e618      	b.n	803411c <_strtod_l+0x644>
 80344ea:	f1ba 0f01 	cmp.w	sl, #1
 80344ee:	d103      	bne.n	80344f8 <_strtod_l+0xa20>
 80344f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80344f2:	2b00      	cmp	r3, #0
 80344f4:	f43f ada5 	beq.w	8034042 <_strtod_l+0x56a>
 80344f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80345a8 <_strtod_l+0xad0>
 80344fc:	4f35      	ldr	r7, [pc, #212]	@ (80345d4 <_strtod_l+0xafc>)
 80344fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8034502:	2600      	movs	r6, #0
 8034504:	e7b1      	b.n	803446a <_strtod_l+0x992>
 8034506:	4f34      	ldr	r7, [pc, #208]	@ (80345d8 <_strtod_l+0xb00>)
 8034508:	2600      	movs	r6, #0
 803450a:	e7aa      	b.n	8034462 <_strtod_l+0x98a>
 803450c:	4b32      	ldr	r3, [pc, #200]	@ (80345d8 <_strtod_l+0xb00>)
 803450e:	4630      	mov	r0, r6
 8034510:	4639      	mov	r1, r7
 8034512:	2200      	movs	r2, #0
 8034514:	f7dc f888 	bl	8010628 <__aeabi_dmul>
 8034518:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803451a:	4606      	mov	r6, r0
 803451c:	460f      	mov	r7, r1
 803451e:	2b00      	cmp	r3, #0
 8034520:	d09f      	beq.n	8034462 <_strtod_l+0x98a>
 8034522:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8034526:	e7a0      	b.n	803446a <_strtod_l+0x992>
 8034528:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80345b0 <_strtod_l+0xad8>
 803452c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8034530:	ec57 6b17 	vmov	r6, r7, d7
 8034534:	e799      	b.n	803446a <_strtod_l+0x992>
 8034536:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 803453a:	9b08      	ldr	r3, [sp, #32]
 803453c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8034540:	2b00      	cmp	r3, #0
 8034542:	d1c1      	bne.n	80344c8 <_strtod_l+0x9f0>
 8034544:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8034548:	0d1b      	lsrs	r3, r3, #20
 803454a:	051b      	lsls	r3, r3, #20
 803454c:	429d      	cmp	r5, r3
 803454e:	d1bb      	bne.n	80344c8 <_strtod_l+0x9f0>
 8034550:	4630      	mov	r0, r6
 8034552:	4639      	mov	r1, r7
 8034554:	f7dc fc2c 	bl	8010db0 <__aeabi_d2lz>
 8034558:	f7dc f838 	bl	80105cc <__aeabi_l2d>
 803455c:	4602      	mov	r2, r0
 803455e:	460b      	mov	r3, r1
 8034560:	4630      	mov	r0, r6
 8034562:	4639      	mov	r1, r7
 8034564:	f7db fea8 	bl	80102b8 <__aeabi_dsub>
 8034568:	460b      	mov	r3, r1
 803456a:	4602      	mov	r2, r0
 803456c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8034570:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8034574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034576:	ea46 060a 	orr.w	r6, r6, sl
 803457a:	431e      	orrs	r6, r3
 803457c:	d06f      	beq.n	803465e <_strtod_l+0xb86>
 803457e:	a30e      	add	r3, pc, #56	@ (adr r3, 80345b8 <_strtod_l+0xae0>)
 8034580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034584:	f7dc fac2 	bl	8010b0c <__aeabi_dcmplt>
 8034588:	2800      	cmp	r0, #0
 803458a:	f47f accf 	bne.w	8033f2c <_strtod_l+0x454>
 803458e:	a30c      	add	r3, pc, #48	@ (adr r3, 80345c0 <_strtod_l+0xae8>)
 8034590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034594:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8034598:	f7dc fad6 	bl	8010b48 <__aeabi_dcmpgt>
 803459c:	2800      	cmp	r0, #0
 803459e:	d093      	beq.n	80344c8 <_strtod_l+0x9f0>
 80345a0:	e4c4      	b.n	8033f2c <_strtod_l+0x454>
 80345a2:	bf00      	nop
 80345a4:	f3af 8000 	nop.w
 80345a8:	00000000 	.word	0x00000000
 80345ac:	bff00000 	.word	0xbff00000
 80345b0:	00000000 	.word	0x00000000
 80345b4:	3ff00000 	.word	0x3ff00000
 80345b8:	94a03595 	.word	0x94a03595
 80345bc:	3fdfffff 	.word	0x3fdfffff
 80345c0:	35afe535 	.word	0x35afe535
 80345c4:	3fe00000 	.word	0x3fe00000
 80345c8:	000fffff 	.word	0x000fffff
 80345cc:	7ff00000 	.word	0x7ff00000
 80345d0:	7fefffff 	.word	0x7fefffff
 80345d4:	3ff00000 	.word	0x3ff00000
 80345d8:	3fe00000 	.word	0x3fe00000
 80345dc:	7fe00000 	.word	0x7fe00000
 80345e0:	7c9fffff 	.word	0x7c9fffff
 80345e4:	9b08      	ldr	r3, [sp, #32]
 80345e6:	b323      	cbz	r3, 8034632 <_strtod_l+0xb5a>
 80345e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80345ec:	d821      	bhi.n	8034632 <_strtod_l+0xb5a>
 80345ee:	a328      	add	r3, pc, #160	@ (adr r3, 8034690 <_strtod_l+0xbb8>)
 80345f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80345f4:	4630      	mov	r0, r6
 80345f6:	4639      	mov	r1, r7
 80345f8:	f7dc fa92 	bl	8010b20 <__aeabi_dcmple>
 80345fc:	b1a0      	cbz	r0, 8034628 <_strtod_l+0xb50>
 80345fe:	4639      	mov	r1, r7
 8034600:	4630      	mov	r0, r6
 8034602:	f7dc fae9 	bl	8010bd8 <__aeabi_d2uiz>
 8034606:	2801      	cmp	r0, #1
 8034608:	bf38      	it	cc
 803460a:	2001      	movcc	r0, #1
 803460c:	f7db ff92 	bl	8010534 <__aeabi_ui2d>
 8034610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034612:	4606      	mov	r6, r0
 8034614:	460f      	mov	r7, r1
 8034616:	b9fb      	cbnz	r3, 8034658 <_strtod_l+0xb80>
 8034618:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 803461c:	9014      	str	r0, [sp, #80]	@ 0x50
 803461e:	9315      	str	r3, [sp, #84]	@ 0x54
 8034620:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8034624:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8034628:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803462a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 803462e:	1b5b      	subs	r3, r3, r5
 8034630:	9311      	str	r3, [sp, #68]	@ 0x44
 8034632:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8034636:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 803463a:	f7fe feb3 	bl	80333a4 <__ulp>
 803463e:	4650      	mov	r0, sl
 8034640:	ec53 2b10 	vmov	r2, r3, d0
 8034644:	4659      	mov	r1, fp
 8034646:	f7db ffef 	bl	8010628 <__aeabi_dmul>
 803464a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 803464e:	f7db fe35 	bl	80102bc <__adddf3>
 8034652:	4682      	mov	sl, r0
 8034654:	468b      	mov	fp, r1
 8034656:	e770      	b.n	803453a <_strtod_l+0xa62>
 8034658:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 803465c:	e7e0      	b.n	8034620 <_strtod_l+0xb48>
 803465e:	a30e      	add	r3, pc, #56	@ (adr r3, 8034698 <_strtod_l+0xbc0>)
 8034660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034664:	f7dc fa52 	bl	8010b0c <__aeabi_dcmplt>
 8034668:	e798      	b.n	803459c <_strtod_l+0xac4>
 803466a:	2300      	movs	r3, #0
 803466c:	930b      	str	r3, [sp, #44]	@ 0x2c
 803466e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8034670:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034672:	6013      	str	r3, [r2, #0]
 8034674:	f7ff ba6d 	b.w	8033b52 <_strtod_l+0x7a>
 8034678:	2a65      	cmp	r2, #101	@ 0x65
 803467a:	f43f ab66 	beq.w	8033d4a <_strtod_l+0x272>
 803467e:	2a45      	cmp	r2, #69	@ 0x45
 8034680:	f43f ab63 	beq.w	8033d4a <_strtod_l+0x272>
 8034684:	2301      	movs	r3, #1
 8034686:	f7ff bb9e 	b.w	8033dc6 <_strtod_l+0x2ee>
 803468a:	bf00      	nop
 803468c:	f3af 8000 	nop.w
 8034690:	ffc00000 	.word	0xffc00000
 8034694:	41dfffff 	.word	0x41dfffff
 8034698:	94a03595 	.word	0x94a03595
 803469c:	3fcfffff 	.word	0x3fcfffff

080346a0 <_strtod_r>:
 80346a0:	4b01      	ldr	r3, [pc, #4]	@ (80346a8 <_strtod_r+0x8>)
 80346a2:	f7ff ba19 	b.w	8033ad8 <_strtod_l>
 80346a6:	bf00      	nop
 80346a8:	2000016c 	.word	0x2000016c

080346ac <_strtoul_l.constprop.0>:
 80346ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80346b0:	4e34      	ldr	r6, [pc, #208]	@ (8034784 <_strtoul_l.constprop.0+0xd8>)
 80346b2:	4686      	mov	lr, r0
 80346b4:	460d      	mov	r5, r1
 80346b6:	4628      	mov	r0, r5
 80346b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80346bc:	5d37      	ldrb	r7, [r6, r4]
 80346be:	f017 0708 	ands.w	r7, r7, #8
 80346c2:	d1f8      	bne.n	80346b6 <_strtoul_l.constprop.0+0xa>
 80346c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80346c6:	d12f      	bne.n	8034728 <_strtoul_l.constprop.0+0x7c>
 80346c8:	782c      	ldrb	r4, [r5, #0]
 80346ca:	2701      	movs	r7, #1
 80346cc:	1c85      	adds	r5, r0, #2
 80346ce:	f033 0010 	bics.w	r0, r3, #16
 80346d2:	d109      	bne.n	80346e8 <_strtoul_l.constprop.0+0x3c>
 80346d4:	2c30      	cmp	r4, #48	@ 0x30
 80346d6:	d12c      	bne.n	8034732 <_strtoul_l.constprop.0+0x86>
 80346d8:	7828      	ldrb	r0, [r5, #0]
 80346da:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80346de:	2858      	cmp	r0, #88	@ 0x58
 80346e0:	d127      	bne.n	8034732 <_strtoul_l.constprop.0+0x86>
 80346e2:	786c      	ldrb	r4, [r5, #1]
 80346e4:	2310      	movs	r3, #16
 80346e6:	3502      	adds	r5, #2
 80346e8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80346ec:	2600      	movs	r6, #0
 80346ee:	fbb8 f8f3 	udiv	r8, r8, r3
 80346f2:	fb03 f908 	mul.w	r9, r3, r8
 80346f6:	ea6f 0909 	mvn.w	r9, r9
 80346fa:	4630      	mov	r0, r6
 80346fc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8034700:	f1bc 0f09 	cmp.w	ip, #9
 8034704:	d81c      	bhi.n	8034740 <_strtoul_l.constprop.0+0x94>
 8034706:	4664      	mov	r4, ip
 8034708:	42a3      	cmp	r3, r4
 803470a:	dd2a      	ble.n	8034762 <_strtoul_l.constprop.0+0xb6>
 803470c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8034710:	d007      	beq.n	8034722 <_strtoul_l.constprop.0+0x76>
 8034712:	4580      	cmp	r8, r0
 8034714:	d322      	bcc.n	803475c <_strtoul_l.constprop.0+0xb0>
 8034716:	d101      	bne.n	803471c <_strtoul_l.constprop.0+0x70>
 8034718:	45a1      	cmp	r9, r4
 803471a:	db1f      	blt.n	803475c <_strtoul_l.constprop.0+0xb0>
 803471c:	fb00 4003 	mla	r0, r0, r3, r4
 8034720:	2601      	movs	r6, #1
 8034722:	f815 4b01 	ldrb.w	r4, [r5], #1
 8034726:	e7e9      	b.n	80346fc <_strtoul_l.constprop.0+0x50>
 8034728:	2c2b      	cmp	r4, #43	@ 0x2b
 803472a:	bf04      	itt	eq
 803472c:	782c      	ldrbeq	r4, [r5, #0]
 803472e:	1c85      	addeq	r5, r0, #2
 8034730:	e7cd      	b.n	80346ce <_strtoul_l.constprop.0+0x22>
 8034732:	2b00      	cmp	r3, #0
 8034734:	d1d8      	bne.n	80346e8 <_strtoul_l.constprop.0+0x3c>
 8034736:	2c30      	cmp	r4, #48	@ 0x30
 8034738:	bf0c      	ite	eq
 803473a:	2308      	moveq	r3, #8
 803473c:	230a      	movne	r3, #10
 803473e:	e7d3      	b.n	80346e8 <_strtoul_l.constprop.0+0x3c>
 8034740:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8034744:	f1bc 0f19 	cmp.w	ip, #25
 8034748:	d801      	bhi.n	803474e <_strtoul_l.constprop.0+0xa2>
 803474a:	3c37      	subs	r4, #55	@ 0x37
 803474c:	e7dc      	b.n	8034708 <_strtoul_l.constprop.0+0x5c>
 803474e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8034752:	f1bc 0f19 	cmp.w	ip, #25
 8034756:	d804      	bhi.n	8034762 <_strtoul_l.constprop.0+0xb6>
 8034758:	3c57      	subs	r4, #87	@ 0x57
 803475a:	e7d5      	b.n	8034708 <_strtoul_l.constprop.0+0x5c>
 803475c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8034760:	e7df      	b.n	8034722 <_strtoul_l.constprop.0+0x76>
 8034762:	1c73      	adds	r3, r6, #1
 8034764:	d106      	bne.n	8034774 <_strtoul_l.constprop.0+0xc8>
 8034766:	2322      	movs	r3, #34	@ 0x22
 8034768:	f8ce 3000 	str.w	r3, [lr]
 803476c:	4630      	mov	r0, r6
 803476e:	b932      	cbnz	r2, 803477e <_strtoul_l.constprop.0+0xd2>
 8034770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8034774:	b107      	cbz	r7, 8034778 <_strtoul_l.constprop.0+0xcc>
 8034776:	4240      	negs	r0, r0
 8034778:	2a00      	cmp	r2, #0
 803477a:	d0f9      	beq.n	8034770 <_strtoul_l.constprop.0+0xc4>
 803477c:	b106      	cbz	r6, 8034780 <_strtoul_l.constprop.0+0xd4>
 803477e:	1e69      	subs	r1, r5, #1
 8034780:	6011      	str	r1, [r2, #0]
 8034782:	e7f5      	b.n	8034770 <_strtoul_l.constprop.0+0xc4>
 8034784:	0803b3c9 	.word	0x0803b3c9

08034788 <_strtoul_r>:
 8034788:	f7ff bf90 	b.w	80346ac <_strtoul_l.constprop.0>

0803478c <strtoul>:
 803478c:	4613      	mov	r3, r2
 803478e:	460a      	mov	r2, r1
 8034790:	4601      	mov	r1, r0
 8034792:	4802      	ldr	r0, [pc, #8]	@ (803479c <strtoul+0x10>)
 8034794:	6800      	ldr	r0, [r0, #0]
 8034796:	f7ff bf89 	b.w	80346ac <_strtoul_l.constprop.0>
 803479a:	bf00      	nop
 803479c:	200002d8 	.word	0x200002d8

080347a0 <__submore>:
 80347a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80347a4:	460c      	mov	r4, r1
 80347a6:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 80347a8:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80347ac:	4299      	cmp	r1, r3
 80347ae:	d11d      	bne.n	80347ec <__submore+0x4c>
 80347b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80347b4:	f7f9 ffba 	bl	802e72c <_malloc_r>
 80347b8:	b918      	cbnz	r0, 80347c2 <__submore+0x22>
 80347ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80347be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80347c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80347c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80347c8:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 80347cc:	6320      	str	r0, [r4, #48]	@ 0x30
 80347ce:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80347d2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80347d6:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80347da:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80347de:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80347e2:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80347e6:	6020      	str	r0, [r4, #0]
 80347e8:	2000      	movs	r0, #0
 80347ea:	e7e8      	b.n	80347be <__submore+0x1e>
 80347ec:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 80347ee:	0077      	lsls	r7, r6, #1
 80347f0:	463a      	mov	r2, r7
 80347f2:	f7fe ffab 	bl	803374c <_realloc_r>
 80347f6:	4605      	mov	r5, r0
 80347f8:	2800      	cmp	r0, #0
 80347fa:	d0de      	beq.n	80347ba <__submore+0x1a>
 80347fc:	eb00 0806 	add.w	r8, r0, r6
 8034800:	4601      	mov	r1, r0
 8034802:	4632      	mov	r2, r6
 8034804:	4640      	mov	r0, r8
 8034806:	f7f8 ff77 	bl	802d6f8 <memcpy>
 803480a:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 803480e:	f8c4 8000 	str.w	r8, [r4]
 8034812:	e7e9      	b.n	80347e8 <__submore+0x48>

08034814 <__ascii_wctomb>:
 8034814:	4603      	mov	r3, r0
 8034816:	4608      	mov	r0, r1
 8034818:	b141      	cbz	r1, 803482c <__ascii_wctomb+0x18>
 803481a:	2aff      	cmp	r2, #255	@ 0xff
 803481c:	d904      	bls.n	8034828 <__ascii_wctomb+0x14>
 803481e:	228a      	movs	r2, #138	@ 0x8a
 8034820:	601a      	str	r2, [r3, #0]
 8034822:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034826:	4770      	bx	lr
 8034828:	700a      	strb	r2, [r1, #0]
 803482a:	2001      	movs	r0, #1
 803482c:	4770      	bx	lr

0803482e <__swbuf_r>:
 803482e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8034830:	460e      	mov	r6, r1
 8034832:	4614      	mov	r4, r2
 8034834:	4605      	mov	r5, r0
 8034836:	b118      	cbz	r0, 8034840 <__swbuf_r+0x12>
 8034838:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 803483a:	b90b      	cbnz	r3, 8034840 <__swbuf_r+0x12>
 803483c:	f7f7 fa7a 	bl	802bd34 <__sinit>
 8034840:	69a3      	ldr	r3, [r4, #24]
 8034842:	60a3      	str	r3, [r4, #8]
 8034844:	89a3      	ldrh	r3, [r4, #12]
 8034846:	0719      	lsls	r1, r3, #28
 8034848:	d501      	bpl.n	803484e <__swbuf_r+0x20>
 803484a:	6923      	ldr	r3, [r4, #16]
 803484c:	b943      	cbnz	r3, 8034860 <__swbuf_r+0x32>
 803484e:	4621      	mov	r1, r4
 8034850:	4628      	mov	r0, r5
 8034852:	f7f7 fc2b 	bl	802c0ac <__swsetup_r>
 8034856:	b118      	cbz	r0, 8034860 <__swbuf_r+0x32>
 8034858:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 803485c:	4638      	mov	r0, r7
 803485e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8034860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8034864:	b2f6      	uxtb	r6, r6
 8034866:	049a      	lsls	r2, r3, #18
 8034868:	4637      	mov	r7, r6
 803486a:	d406      	bmi.n	803487a <__swbuf_r+0x4c>
 803486c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8034870:	81a3      	strh	r3, [r4, #12]
 8034872:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8034874:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8034878:	6663      	str	r3, [r4, #100]	@ 0x64
 803487a:	6823      	ldr	r3, [r4, #0]
 803487c:	6922      	ldr	r2, [r4, #16]
 803487e:	1a98      	subs	r0, r3, r2
 8034880:	6963      	ldr	r3, [r4, #20]
 8034882:	4283      	cmp	r3, r0
 8034884:	dc05      	bgt.n	8034892 <__swbuf_r+0x64>
 8034886:	4621      	mov	r1, r4
 8034888:	4628      	mov	r0, r5
 803488a:	f7f7 f911 	bl	802bab0 <_fflush_r>
 803488e:	2800      	cmp	r0, #0
 8034890:	d1e2      	bne.n	8034858 <__swbuf_r+0x2a>
 8034892:	68a3      	ldr	r3, [r4, #8]
 8034894:	3b01      	subs	r3, #1
 8034896:	60a3      	str	r3, [r4, #8]
 8034898:	6823      	ldr	r3, [r4, #0]
 803489a:	1c5a      	adds	r2, r3, #1
 803489c:	6022      	str	r2, [r4, #0]
 803489e:	701e      	strb	r6, [r3, #0]
 80348a0:	6962      	ldr	r2, [r4, #20]
 80348a2:	1c43      	adds	r3, r0, #1
 80348a4:	429a      	cmp	r2, r3
 80348a6:	d004      	beq.n	80348b2 <__swbuf_r+0x84>
 80348a8:	89a3      	ldrh	r3, [r4, #12]
 80348aa:	07db      	lsls	r3, r3, #31
 80348ac:	d5d6      	bpl.n	803485c <__swbuf_r+0x2e>
 80348ae:	2e0a      	cmp	r6, #10
 80348b0:	d1d4      	bne.n	803485c <__swbuf_r+0x2e>
 80348b2:	4621      	mov	r1, r4
 80348b4:	4628      	mov	r0, r5
 80348b6:	f7f7 f8fb 	bl	802bab0 <_fflush_r>
 80348ba:	2800      	cmp	r0, #0
 80348bc:	d0ce      	beq.n	803485c <__swbuf_r+0x2e>
 80348be:	e7cb      	b.n	8034858 <__swbuf_r+0x2a>

080348c0 <_raise_r>:
 80348c0:	291f      	cmp	r1, #31
 80348c2:	b538      	push	{r3, r4, r5, lr}
 80348c4:	4605      	mov	r5, r0
 80348c6:	460c      	mov	r4, r1
 80348c8:	d904      	bls.n	80348d4 <_raise_r+0x14>
 80348ca:	2316      	movs	r3, #22
 80348cc:	6003      	str	r3, [r0, #0]
 80348ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80348d2:	bd38      	pop	{r3, r4, r5, pc}
 80348d4:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 80348d8:	b112      	cbz	r2, 80348e0 <_raise_r+0x20>
 80348da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80348de:	b94b      	cbnz	r3, 80348f4 <_raise_r+0x34>
 80348e0:	4628      	mov	r0, r5
 80348e2:	f000 f8fd 	bl	8034ae0 <_getpid_r>
 80348e6:	4622      	mov	r2, r4
 80348e8:	4601      	mov	r1, r0
 80348ea:	4628      	mov	r0, r5
 80348ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80348f0:	f000 b8e4 	b.w	8034abc <_kill_r>
 80348f4:	2b01      	cmp	r3, #1
 80348f6:	d00a      	beq.n	803490e <_raise_r+0x4e>
 80348f8:	1c59      	adds	r1, r3, #1
 80348fa:	d103      	bne.n	8034904 <_raise_r+0x44>
 80348fc:	2316      	movs	r3, #22
 80348fe:	6003      	str	r3, [r0, #0]
 8034900:	2001      	movs	r0, #1
 8034902:	e7e6      	b.n	80348d2 <_raise_r+0x12>
 8034904:	2100      	movs	r1, #0
 8034906:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 803490a:	4620      	mov	r0, r4
 803490c:	4798      	blx	r3
 803490e:	2000      	movs	r0, #0
 8034910:	e7df      	b.n	80348d2 <_raise_r+0x12>
	...

08034914 <raise>:
 8034914:	4b02      	ldr	r3, [pc, #8]	@ (8034920 <raise+0xc>)
 8034916:	4601      	mov	r1, r0
 8034918:	6818      	ldr	r0, [r3, #0]
 803491a:	f7ff bfd1 	b.w	80348c0 <_raise_r>
 803491e:	bf00      	nop
 8034920:	200002d8 	.word	0x200002d8

08034924 <__gettzinfo>:
 8034924:	4800      	ldr	r0, [pc, #0]	@ (8034928 <__gettzinfo+0x4>)
 8034926:	4770      	bx	lr
 8034928:	20000818 	.word	0x20000818

0803492c <gmtime_r>:
 803492c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8034930:	4a4d      	ldr	r2, [pc, #308]	@ (8034a68 <gmtime_r+0x13c>)
 8034932:	460c      	mov	r4, r1
 8034934:	2300      	movs	r3, #0
 8034936:	e9d0 0100 	ldrd	r0, r1, [r0]
 803493a:	f7dc f9bd 	bl	8010cb8 <__aeabi_ldivmod>
 803493e:	2a00      	cmp	r2, #0
 8034940:	bfbc      	itt	lt
 8034942:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 8034946:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 803494a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 803494e:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 8034952:	fbb2 f3f1 	udiv	r3, r2, r1
 8034956:	fb01 2213 	mls	r2, r1, r3, r2
 803495a:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 803495e:	bfac      	ite	ge
 8034960:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 8034964:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 8034968:	60a3      	str	r3, [r4, #8]
 803496a:	fbb2 f3f1 	udiv	r3, r2, r1
 803496e:	fb01 2213 	mls	r2, r1, r3, r2
 8034972:	6063      	str	r3, [r4, #4]
 8034974:	6022      	str	r2, [r4, #0]
 8034976:	1cc3      	adds	r3, r0, #3
 8034978:	2207      	movs	r2, #7
 803497a:	fb93 f2f2 	sdiv	r2, r3, r2
 803497e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8034982:	1a9b      	subs	r3, r3, r2
 8034984:	bf48      	it	mi
 8034986:	3307      	addmi	r3, #7
 8034988:	2800      	cmp	r0, #0
 803498a:	61a3      	str	r3, [r4, #24]
 803498c:	bfb8      	it	lt
 803498e:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 8034992:	4936      	ldr	r1, [pc, #216]	@ (8034a6c <gmtime_r+0x140>)
 8034994:	bfae      	itee	ge
 8034996:	fb90 f1f1 	sdivge	r1, r0, r1
 803499a:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 803499e:	fb93 f1f1 	sdivlt	r1, r3, r1
 80349a2:	4b33      	ldr	r3, [pc, #204]	@ (8034a70 <gmtime_r+0x144>)
 80349a4:	fb03 0001 	mla	r0, r3, r1, r0
 80349a8:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 80349ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80349b0:	4403      	add	r3, r0
 80349b2:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 80349b6:	fbb0 f2fc 	udiv	r2, r0, ip
 80349ba:	1a9b      	subs	r3, r3, r2
 80349bc:	f240 176d 	movw	r7, #365	@ 0x16d
 80349c0:	4a2c      	ldr	r2, [pc, #176]	@ (8034a74 <gmtime_r+0x148>)
 80349c2:	fbb0 f2f2 	udiv	r2, r0, r2
 80349c6:	2664      	movs	r6, #100	@ 0x64
 80349c8:	1a9b      	subs	r3, r3, r2
 80349ca:	fbb3 f2f7 	udiv	r2, r3, r7
 80349ce:	fbb3 f3fc 	udiv	r3, r3, ip
 80349d2:	fbb2 f5f6 	udiv	r5, r2, r6
 80349d6:	1aeb      	subs	r3, r5, r3
 80349d8:	4403      	add	r3, r0
 80349da:	fb07 3312 	mls	r3, r7, r2, r3
 80349de:	2099      	movs	r0, #153	@ 0x99
 80349e0:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80349e4:	3702      	adds	r7, #2
 80349e6:	f103 0e01 	add.w	lr, r3, #1
 80349ea:	fbb7 fcf0 	udiv	ip, r7, r0
 80349ee:	fb00 f00c 	mul.w	r0, r0, ip
 80349f2:	3002      	adds	r0, #2
 80349f4:	f04f 0805 	mov.w	r8, #5
 80349f8:	fbb0 f0f8 	udiv	r0, r0, r8
 80349fc:	ebae 0000 	sub.w	r0, lr, r0
 8034a00:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8034a04:	4577      	cmp	r7, lr
 8034a06:	bf8c      	ite	hi
 8034a08:	f06f 0709 	mvnhi.w	r7, #9
 8034a0c:	2702      	movls	r7, #2
 8034a0e:	4467      	add	r7, ip
 8034a10:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8034a14:	fb0c 2101 	mla	r1, ip, r1, r2
 8034a18:	2f01      	cmp	r7, #1
 8034a1a:	bf98      	it	ls
 8034a1c:	3101      	addls	r1, #1
 8034a1e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8034a22:	d30c      	bcc.n	8034a3e <gmtime_r+0x112>
 8034a24:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8034a28:	61e3      	str	r3, [r4, #28]
 8034a2a:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 8034a2e:	2300      	movs	r3, #0
 8034a30:	60e0      	str	r0, [r4, #12]
 8034a32:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8034a36:	6223      	str	r3, [r4, #32]
 8034a38:	4620      	mov	r0, r4
 8034a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8034a3e:	f012 0f03 	tst.w	r2, #3
 8034a42:	d102      	bne.n	8034a4a <gmtime_r+0x11e>
 8034a44:	fb06 2515 	mls	r5, r6, r5, r2
 8034a48:	b95d      	cbnz	r5, 8034a62 <gmtime_r+0x136>
 8034a4a:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 8034a4e:	fbb2 f6f5 	udiv	r6, r2, r5
 8034a52:	fb05 2216 	mls	r2, r5, r6, r2
 8034a56:	fab2 f282 	clz	r2, r2
 8034a5a:	0952      	lsrs	r2, r2, #5
 8034a5c:	333b      	adds	r3, #59	@ 0x3b
 8034a5e:	4413      	add	r3, r2
 8034a60:	e7e2      	b.n	8034a28 <gmtime_r+0xfc>
 8034a62:	2201      	movs	r2, #1
 8034a64:	e7fa      	b.n	8034a5c <gmtime_r+0x130>
 8034a66:	bf00      	nop
 8034a68:	00015180 	.word	0x00015180
 8034a6c:	00023ab1 	.word	0x00023ab1
 8034a70:	fffdc54f 	.word	0xfffdc54f
 8034a74:	00023ab0 	.word	0x00023ab0

08034a78 <_fstat_r>:
 8034a78:	b538      	push	{r3, r4, r5, lr}
 8034a7a:	4d07      	ldr	r5, [pc, #28]	@ (8034a98 <_fstat_r+0x20>)
 8034a7c:	2300      	movs	r3, #0
 8034a7e:	4604      	mov	r4, r0
 8034a80:	4608      	mov	r0, r1
 8034a82:	4611      	mov	r1, r2
 8034a84:	602b      	str	r3, [r5, #0]
 8034a86:	f7dd fc82 	bl	801238e <_fstat>
 8034a8a:	1c43      	adds	r3, r0, #1
 8034a8c:	d102      	bne.n	8034a94 <_fstat_r+0x1c>
 8034a8e:	682b      	ldr	r3, [r5, #0]
 8034a90:	b103      	cbz	r3, 8034a94 <_fstat_r+0x1c>
 8034a92:	6023      	str	r3, [r4, #0]
 8034a94:	bd38      	pop	{r3, r4, r5, pc}
 8034a96:	bf00      	nop
 8034a98:	2001a02c 	.word	0x2001a02c

08034a9c <_isatty_r>:
 8034a9c:	b538      	push	{r3, r4, r5, lr}
 8034a9e:	4d06      	ldr	r5, [pc, #24]	@ (8034ab8 <_isatty_r+0x1c>)
 8034aa0:	2300      	movs	r3, #0
 8034aa2:	4604      	mov	r4, r0
 8034aa4:	4608      	mov	r0, r1
 8034aa6:	602b      	str	r3, [r5, #0]
 8034aa8:	f7dd fc76 	bl	8012398 <_isatty>
 8034aac:	1c43      	adds	r3, r0, #1
 8034aae:	d102      	bne.n	8034ab6 <_isatty_r+0x1a>
 8034ab0:	682b      	ldr	r3, [r5, #0]
 8034ab2:	b103      	cbz	r3, 8034ab6 <_isatty_r+0x1a>
 8034ab4:	6023      	str	r3, [r4, #0]
 8034ab6:	bd38      	pop	{r3, r4, r5, pc}
 8034ab8:	2001a02c 	.word	0x2001a02c

08034abc <_kill_r>:
 8034abc:	b538      	push	{r3, r4, r5, lr}
 8034abe:	4d07      	ldr	r5, [pc, #28]	@ (8034adc <_kill_r+0x20>)
 8034ac0:	2300      	movs	r3, #0
 8034ac2:	4604      	mov	r4, r0
 8034ac4:	4608      	mov	r0, r1
 8034ac6:	4611      	mov	r1, r2
 8034ac8:	602b      	str	r3, [r5, #0]
 8034aca:	f7dd fc31 	bl	8012330 <_kill>
 8034ace:	1c43      	adds	r3, r0, #1
 8034ad0:	d102      	bne.n	8034ad8 <_kill_r+0x1c>
 8034ad2:	682b      	ldr	r3, [r5, #0]
 8034ad4:	b103      	cbz	r3, 8034ad8 <_kill_r+0x1c>
 8034ad6:	6023      	str	r3, [r4, #0]
 8034ad8:	bd38      	pop	{r3, r4, r5, pc}
 8034ada:	bf00      	nop
 8034adc:	2001a02c 	.word	0x2001a02c

08034ae0 <_getpid_r>:
 8034ae0:	f7dd bc24 	b.w	801232c <_getpid>

08034ae4 <_sbrk_r>:
 8034ae4:	b538      	push	{r3, r4, r5, lr}
 8034ae6:	4d06      	ldr	r5, [pc, #24]	@ (8034b00 <_sbrk_r+0x1c>)
 8034ae8:	2300      	movs	r3, #0
 8034aea:	4604      	mov	r4, r0
 8034aec:	4608      	mov	r0, r1
 8034aee:	602b      	str	r3, [r5, #0]
 8034af0:	f7dd fc56 	bl	80123a0 <_sbrk>
 8034af4:	1c43      	adds	r3, r0, #1
 8034af6:	d102      	bne.n	8034afe <_sbrk_r+0x1a>
 8034af8:	682b      	ldr	r3, [r5, #0]
 8034afa:	b103      	cbz	r3, 8034afe <_sbrk_r+0x1a>
 8034afc:	6023      	str	r3, [r4, #0]
 8034afe:	bd38      	pop	{r3, r4, r5, pc}
 8034b00:	2001a02c 	.word	0x2001a02c

08034b04 <sysconf>:
 8034b04:	2808      	cmp	r0, #8
 8034b06:	b508      	push	{r3, lr}
 8034b08:	d006      	beq.n	8034b18 <sysconf+0x14>
 8034b0a:	f7f8 fdbd 	bl	802d688 <__errno>
 8034b0e:	2316      	movs	r3, #22
 8034b10:	6003      	str	r3, [r0, #0]
 8034b12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034b16:	bd08      	pop	{r3, pc}
 8034b18:	2080      	movs	r0, #128	@ 0x80
 8034b1a:	e7fc      	b.n	8034b16 <sysconf+0x12>

08034b1c <_strtoll_l.constprop.0>:
 8034b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034b20:	b085      	sub	sp, #20
 8034b22:	4690      	mov	r8, r2
 8034b24:	4a43      	ldr	r2, [pc, #268]	@ (8034c34 <_strtoll_l.constprop.0+0x118>)
 8034b26:	9002      	str	r0, [sp, #8]
 8034b28:	4689      	mov	r9, r1
 8034b2a:	461e      	mov	r6, r3
 8034b2c:	460d      	mov	r5, r1
 8034b2e:	462b      	mov	r3, r5
 8034b30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8034b34:	5d17      	ldrb	r7, [r2, r4]
 8034b36:	f017 0708 	ands.w	r7, r7, #8
 8034b3a:	d1f8      	bne.n	8034b2e <_strtoll_l.constprop.0+0x12>
 8034b3c:	2c2d      	cmp	r4, #45	@ 0x2d
 8034b3e:	d149      	bne.n	8034bd4 <_strtoll_l.constprop.0+0xb8>
 8034b40:	782c      	ldrb	r4, [r5, #0]
 8034b42:	2701      	movs	r7, #1
 8034b44:	1c9d      	adds	r5, r3, #2
 8034b46:	f036 0310 	bics.w	r3, r6, #16
 8034b4a:	d109      	bne.n	8034b60 <_strtoll_l.constprop.0+0x44>
 8034b4c:	2c30      	cmp	r4, #48	@ 0x30
 8034b4e:	d146      	bne.n	8034bde <_strtoll_l.constprop.0+0xc2>
 8034b50:	782b      	ldrb	r3, [r5, #0]
 8034b52:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8034b56:	2b58      	cmp	r3, #88	@ 0x58
 8034b58:	d141      	bne.n	8034bde <_strtoll_l.constprop.0+0xc2>
 8034b5a:	786c      	ldrb	r4, [r5, #1]
 8034b5c:	2610      	movs	r6, #16
 8034b5e:	3502      	adds	r5, #2
 8034b60:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 8034b64:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 8034b68:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8034b6c:	17f3      	asrs	r3, r6, #31
 8034b6e:	4632      	mov	r2, r6
 8034b70:	4658      	mov	r0, fp
 8034b72:	4651      	mov	r1, sl
 8034b74:	9303      	str	r3, [sp, #12]
 8034b76:	f7dc f8ef 	bl	8010d58 <__aeabi_uldivmod>
 8034b7a:	9201      	str	r2, [sp, #4]
 8034b7c:	2200      	movs	r2, #0
 8034b7e:	468e      	mov	lr, r1
 8034b80:	4684      	mov	ip, r0
 8034b82:	4611      	mov	r1, r2
 8034b84:	4610      	mov	r0, r2
 8034b86:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8034b8a:	2b09      	cmp	r3, #9
 8034b8c:	d905      	bls.n	8034b9a <_strtoll_l.constprop.0+0x7e>
 8034b8e:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 8034b92:	2b19      	cmp	r3, #25
 8034b94:	d82a      	bhi.n	8034bec <_strtoll_l.constprop.0+0xd0>
 8034b96:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 8034b9a:	429e      	cmp	r6, r3
 8034b9c:	dd30      	ble.n	8034c00 <_strtoll_l.constprop.0+0xe4>
 8034b9e:	1c54      	adds	r4, r2, #1
 8034ba0:	d015      	beq.n	8034bce <_strtoll_l.constprop.0+0xb2>
 8034ba2:	4584      	cmp	ip, r0
 8034ba4:	eb7e 0201 	sbcs.w	r2, lr, r1
 8034ba8:	d327      	bcc.n	8034bfa <_strtoll_l.constprop.0+0xde>
 8034baa:	458e      	cmp	lr, r1
 8034bac:	bf08      	it	eq
 8034bae:	4584      	cmpeq	ip, r0
 8034bb0:	d102      	bne.n	8034bb8 <_strtoll_l.constprop.0+0x9c>
 8034bb2:	9a01      	ldr	r2, [sp, #4]
 8034bb4:	429a      	cmp	r2, r3
 8034bb6:	db20      	blt.n	8034bfa <_strtoll_l.constprop.0+0xde>
 8034bb8:	9a03      	ldr	r2, [sp, #12]
 8034bba:	4371      	muls	r1, r6
 8034bbc:	fb00 1102 	mla	r1, r0, r2, r1
 8034bc0:	fba6 0200 	umull	r0, r2, r6, r0
 8034bc4:	440a      	add	r2, r1
 8034bc6:	1818      	adds	r0, r3, r0
 8034bc8:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 8034bcc:	2201      	movs	r2, #1
 8034bce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8034bd2:	e7d8      	b.n	8034b86 <_strtoll_l.constprop.0+0x6a>
 8034bd4:	2c2b      	cmp	r4, #43	@ 0x2b
 8034bd6:	bf04      	itt	eq
 8034bd8:	782c      	ldrbeq	r4, [r5, #0]
 8034bda:	1c9d      	addeq	r5, r3, #2
 8034bdc:	e7b3      	b.n	8034b46 <_strtoll_l.constprop.0+0x2a>
 8034bde:	2e00      	cmp	r6, #0
 8034be0:	d1be      	bne.n	8034b60 <_strtoll_l.constprop.0+0x44>
 8034be2:	2c30      	cmp	r4, #48	@ 0x30
 8034be4:	bf0c      	ite	eq
 8034be6:	2608      	moveq	r6, #8
 8034be8:	260a      	movne	r6, #10
 8034bea:	e7b9      	b.n	8034b60 <_strtoll_l.constprop.0+0x44>
 8034bec:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 8034bf0:	2b19      	cmp	r3, #25
 8034bf2:	d805      	bhi.n	8034c00 <_strtoll_l.constprop.0+0xe4>
 8034bf4:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 8034bf8:	e7cf      	b.n	8034b9a <_strtoll_l.constprop.0+0x7e>
 8034bfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8034bfe:	e7e6      	b.n	8034bce <_strtoll_l.constprop.0+0xb2>
 8034c00:	1c53      	adds	r3, r2, #1
 8034c02:	d10a      	bne.n	8034c1a <_strtoll_l.constprop.0+0xfe>
 8034c04:	9a02      	ldr	r2, [sp, #8]
 8034c06:	2322      	movs	r3, #34	@ 0x22
 8034c08:	6013      	str	r3, [r2, #0]
 8034c0a:	4658      	mov	r0, fp
 8034c0c:	4651      	mov	r1, sl
 8034c0e:	f1b8 0f00 	cmp.w	r8, #0
 8034c12:	d10a      	bne.n	8034c2a <_strtoll_l.constprop.0+0x10e>
 8034c14:	b005      	add	sp, #20
 8034c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034c1a:	b117      	cbz	r7, 8034c22 <_strtoll_l.constprop.0+0x106>
 8034c1c:	4240      	negs	r0, r0
 8034c1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8034c22:	f1b8 0f00 	cmp.w	r8, #0
 8034c26:	d0f5      	beq.n	8034c14 <_strtoll_l.constprop.0+0xf8>
 8034c28:	b10a      	cbz	r2, 8034c2e <_strtoll_l.constprop.0+0x112>
 8034c2a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8034c2e:	f8c8 9000 	str.w	r9, [r8]
 8034c32:	e7ef      	b.n	8034c14 <_strtoll_l.constprop.0+0xf8>
 8034c34:	0803b3c9 	.word	0x0803b3c9

08034c38 <_strtoll_r>:
 8034c38:	f7ff bf70 	b.w	8034b1c <_strtoll_l.constprop.0>

08034c3c <__libc_fini_array>:
 8034c3c:	b538      	push	{r3, r4, r5, lr}
 8034c3e:	4d07      	ldr	r5, [pc, #28]	@ (8034c5c <__libc_fini_array+0x20>)
 8034c40:	4c07      	ldr	r4, [pc, #28]	@ (8034c60 <__libc_fini_array+0x24>)
 8034c42:	1b64      	subs	r4, r4, r5
 8034c44:	10a4      	asrs	r4, r4, #2
 8034c46:	b91c      	cbnz	r4, 8034c50 <__libc_fini_array+0x14>
 8034c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8034c4c:	f000 bc9c 	b.w	8035588 <_fini>
 8034c50:	3c01      	subs	r4, #1
 8034c52:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8034c56:	4798      	blx	r3
 8034c58:	e7f5      	b.n	8034c46 <__libc_fini_array+0xa>
 8034c5a:	bf00      	nop
 8034c5c:	0803b7e0 	.word	0x0803b7e0
 8034c60:	0803b7e4 	.word	0x0803b7e4

08034c64 <_strtoull_l.constprop.0>:
 8034c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034c68:	4691      	mov	r9, r2
 8034c6a:	4a48      	ldr	r2, [pc, #288]	@ (8034d8c <_strtoull_l.constprop.0+0x128>)
 8034c6c:	9001      	str	r0, [sp, #4]
 8034c6e:	468a      	mov	sl, r1
 8034c70:	461e      	mov	r6, r3
 8034c72:	460d      	mov	r5, r1
 8034c74:	462b      	mov	r3, r5
 8034c76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8034c7a:	5d17      	ldrb	r7, [r2, r4]
 8034c7c:	f017 0708 	ands.w	r7, r7, #8
 8034c80:	d1f8      	bne.n	8034c74 <_strtoull_l.constprop.0+0x10>
 8034c82:	2c2d      	cmp	r4, #45	@ 0x2d
 8034c84:	d14a      	bne.n	8034d1c <_strtoull_l.constprop.0+0xb8>
 8034c86:	782c      	ldrb	r4, [r5, #0]
 8034c88:	2701      	movs	r7, #1
 8034c8a:	1c9d      	adds	r5, r3, #2
 8034c8c:	f036 0310 	bics.w	r3, r6, #16
 8034c90:	d109      	bne.n	8034ca6 <_strtoull_l.constprop.0+0x42>
 8034c92:	2c30      	cmp	r4, #48	@ 0x30
 8034c94:	d147      	bne.n	8034d26 <_strtoull_l.constprop.0+0xc2>
 8034c96:	782b      	ldrb	r3, [r5, #0]
 8034c98:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8034c9c:	2b58      	cmp	r3, #88	@ 0x58
 8034c9e:	d142      	bne.n	8034d26 <_strtoull_l.constprop.0+0xc2>
 8034ca0:	786c      	ldrb	r4, [r5, #1]
 8034ca2:	2610      	movs	r6, #16
 8034ca4:	3502      	adds	r5, #2
 8034ca6:	ea4f 7be6 	mov.w	fp, r6, asr #31
 8034caa:	4632      	mov	r2, r6
 8034cac:	465b      	mov	r3, fp
 8034cae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034cb2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8034cb6:	f7dc f84f 	bl	8010d58 <__aeabi_uldivmod>
 8034cba:	4632      	mov	r2, r6
 8034cbc:	9000      	str	r0, [sp, #0]
 8034cbe:	4688      	mov	r8, r1
 8034cc0:	465b      	mov	r3, fp
 8034cc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034cc6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8034cca:	f7dc f845 	bl	8010d58 <__aeabi_uldivmod>
 8034cce:	2300      	movs	r3, #0
 8034cd0:	4618      	mov	r0, r3
 8034cd2:	4619      	mov	r1, r3
 8034cd4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8034cd8:	f1bc 0f09 	cmp.w	ip, #9
 8034cdc:	d82a      	bhi.n	8034d34 <_strtoull_l.constprop.0+0xd0>
 8034cde:	4664      	mov	r4, ip
 8034ce0:	42a6      	cmp	r6, r4
 8034ce2:	dd38      	ble.n	8034d56 <_strtoull_l.constprop.0+0xf2>
 8034ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8034ce8:	d015      	beq.n	8034d16 <_strtoull_l.constprop.0+0xb2>
 8034cea:	9b00      	ldr	r3, [sp, #0]
 8034cec:	4283      	cmp	r3, r0
 8034cee:	eb78 0301 	sbcs.w	r3, r8, r1
 8034cf2:	d32d      	bcc.n	8034d50 <_strtoull_l.constprop.0+0xec>
 8034cf4:	9b00      	ldr	r3, [sp, #0]
 8034cf6:	4588      	cmp	r8, r1
 8034cf8:	bf08      	it	eq
 8034cfa:	4283      	cmpeq	r3, r0
 8034cfc:	d101      	bne.n	8034d02 <_strtoull_l.constprop.0+0x9e>
 8034cfe:	42a2      	cmp	r2, r4
 8034d00:	db26      	blt.n	8034d50 <_strtoull_l.constprop.0+0xec>
 8034d02:	4371      	muls	r1, r6
 8034d04:	fb00 110b 	mla	r1, r0, fp, r1
 8034d08:	fba6 0300 	umull	r0, r3, r6, r0
 8034d0c:	4419      	add	r1, r3
 8034d0e:	1820      	adds	r0, r4, r0
 8034d10:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8034d14:	2301      	movs	r3, #1
 8034d16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8034d1a:	e7db      	b.n	8034cd4 <_strtoull_l.constprop.0+0x70>
 8034d1c:	2c2b      	cmp	r4, #43	@ 0x2b
 8034d1e:	bf04      	itt	eq
 8034d20:	782c      	ldrbeq	r4, [r5, #0]
 8034d22:	1c9d      	addeq	r5, r3, #2
 8034d24:	e7b2      	b.n	8034c8c <_strtoull_l.constprop.0+0x28>
 8034d26:	2e00      	cmp	r6, #0
 8034d28:	d1bd      	bne.n	8034ca6 <_strtoull_l.constprop.0+0x42>
 8034d2a:	2c30      	cmp	r4, #48	@ 0x30
 8034d2c:	bf0c      	ite	eq
 8034d2e:	2608      	moveq	r6, #8
 8034d30:	260a      	movne	r6, #10
 8034d32:	e7b8      	b.n	8034ca6 <_strtoull_l.constprop.0+0x42>
 8034d34:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8034d38:	f1bc 0f19 	cmp.w	ip, #25
 8034d3c:	d801      	bhi.n	8034d42 <_strtoull_l.constprop.0+0xde>
 8034d3e:	3c37      	subs	r4, #55	@ 0x37
 8034d40:	e7ce      	b.n	8034ce0 <_strtoull_l.constprop.0+0x7c>
 8034d42:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8034d46:	f1bc 0f19 	cmp.w	ip, #25
 8034d4a:	d804      	bhi.n	8034d56 <_strtoull_l.constprop.0+0xf2>
 8034d4c:	3c57      	subs	r4, #87	@ 0x57
 8034d4e:	e7c7      	b.n	8034ce0 <_strtoull_l.constprop.0+0x7c>
 8034d50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8034d54:	e7df      	b.n	8034d16 <_strtoull_l.constprop.0+0xb2>
 8034d56:	1c5a      	adds	r2, r3, #1
 8034d58:	d10a      	bne.n	8034d70 <_strtoull_l.constprop.0+0x10c>
 8034d5a:	9901      	ldr	r1, [sp, #4]
 8034d5c:	2222      	movs	r2, #34	@ 0x22
 8034d5e:	600a      	str	r2, [r1, #0]
 8034d60:	4618      	mov	r0, r3
 8034d62:	4619      	mov	r1, r3
 8034d64:	f1b9 0f00 	cmp.w	r9, #0
 8034d68:	d10a      	bne.n	8034d80 <_strtoull_l.constprop.0+0x11c>
 8034d6a:	b003      	add	sp, #12
 8034d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034d70:	b117      	cbz	r7, 8034d78 <_strtoull_l.constprop.0+0x114>
 8034d72:	4240      	negs	r0, r0
 8034d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8034d78:	f1b9 0f00 	cmp.w	r9, #0
 8034d7c:	d0f5      	beq.n	8034d6a <_strtoull_l.constprop.0+0x106>
 8034d7e:	b10b      	cbz	r3, 8034d84 <_strtoull_l.constprop.0+0x120>
 8034d80:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8034d84:	f8c9 a000 	str.w	sl, [r9]
 8034d88:	e7ef      	b.n	8034d6a <_strtoull_l.constprop.0+0x106>
 8034d8a:	bf00      	nop
 8034d8c:	0803b3c9 	.word	0x0803b3c9

08034d90 <_strtoull_r>:
 8034d90:	f7ff bf68 	b.w	8034c64 <_strtoull_l.constprop.0>

08034d94 <_mbrtowc_r>:
 8034d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8034d96:	4c0a      	ldr	r4, [pc, #40]	@ (8034dc0 <_mbrtowc_r+0x2c>)
 8034d98:	9e08      	ldr	r6, [sp, #32]
 8034d9a:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 8034d9e:	9600      	str	r6, [sp, #0]
 8034da0:	4605      	mov	r5, r0
 8034da2:	4614      	mov	r4, r2
 8034da4:	b912      	cbnz	r2, 8034dac <_mbrtowc_r+0x18>
 8034da6:	4a07      	ldr	r2, [pc, #28]	@ (8034dc4 <_mbrtowc_r+0x30>)
 8034da8:	2301      	movs	r3, #1
 8034daa:	4621      	mov	r1, r4
 8034dac:	47b8      	blx	r7
 8034dae:	1c43      	adds	r3, r0, #1
 8034db0:	bf01      	itttt	eq
 8034db2:	2300      	moveq	r3, #0
 8034db4:	6033      	streq	r3, [r6, #0]
 8034db6:	238a      	moveq	r3, #138	@ 0x8a
 8034db8:	602b      	streq	r3, [r5, #0]
 8034dba:	b003      	add	sp, #12
 8034dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8034dbe:	bf00      	nop
 8034dc0:	2000016c 	.word	0x2000016c
 8034dc4:	0803b00a 	.word	0x0803b00a

08034dc8 <iswspace>:
 8034dc8:	2100      	movs	r1, #0
 8034dca:	f000 b801 	b.w	8034dd0 <iswspace_l>
	...

08034dd0 <iswspace_l>:
 8034dd0:	28ff      	cmp	r0, #255	@ 0xff
 8034dd2:	bf9d      	ittte	ls
 8034dd4:	4b02      	ldrls	r3, [pc, #8]	@ (8034de0 <iswspace_l+0x10>)
 8034dd6:	5c18      	ldrbls	r0, [r3, r0]
 8034dd8:	f000 0008 	andls.w	r0, r0, #8
 8034ddc:	2000      	movhi	r0, #0
 8034dde:	4770      	bx	lr
 8034de0:	0803b3c9 	.word	0x0803b3c9

08034de4 <__register_exitproc>:
 8034de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8034de8:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8034e60 <__register_exitproc+0x7c>
 8034dec:	4606      	mov	r6, r0
 8034dee:	f8da 0000 	ldr.w	r0, [sl]
 8034df2:	4698      	mov	r8, r3
 8034df4:	460f      	mov	r7, r1
 8034df6:	4691      	mov	r9, r2
 8034df8:	f7f8 fc7b 	bl	802d6f2 <__retarget_lock_acquire_recursive>
 8034dfc:	4b16      	ldr	r3, [pc, #88]	@ (8034e58 <__register_exitproc+0x74>)
 8034dfe:	681c      	ldr	r4, [r3, #0]
 8034e00:	b90c      	cbnz	r4, 8034e06 <__register_exitproc+0x22>
 8034e02:	4c16      	ldr	r4, [pc, #88]	@ (8034e5c <__register_exitproc+0x78>)
 8034e04:	601c      	str	r4, [r3, #0]
 8034e06:	6865      	ldr	r5, [r4, #4]
 8034e08:	f8da 0000 	ldr.w	r0, [sl]
 8034e0c:	2d1f      	cmp	r5, #31
 8034e0e:	dd05      	ble.n	8034e1c <__register_exitproc+0x38>
 8034e10:	f7f8 fc71 	bl	802d6f6 <__retarget_lock_release_recursive>
 8034e14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8034e1c:	b19e      	cbz	r6, 8034e46 <__register_exitproc+0x62>
 8034e1e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8034e22:	2201      	movs	r2, #1
 8034e24:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8034e28:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8034e2c:	40aa      	lsls	r2, r5
 8034e2e:	4313      	orrs	r3, r2
 8034e30:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8034e34:	2e02      	cmp	r6, #2
 8034e36:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8034e3a:	bf02      	ittt	eq
 8034e3c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8034e40:	4313      	orreq	r3, r2
 8034e42:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8034e46:	1c6b      	adds	r3, r5, #1
 8034e48:	3502      	adds	r5, #2
 8034e4a:	6063      	str	r3, [r4, #4]
 8034e4c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8034e50:	f7f8 fc51 	bl	802d6f6 <__retarget_lock_release_recursive>
 8034e54:	2000      	movs	r0, #0
 8034e56:	e7df      	b.n	8034e18 <__register_exitproc+0x34>
 8034e58:	2001a038 	.word	0x2001a038
 8034e5c:	2001a070 	.word	0x2001a070
 8034e60:	20000400 	.word	0x20000400
 8034e64:	00000000 	.word	0x00000000

08034e68 <nan>:
 8034e68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8034e70 <nan+0x8>
 8034e6c:	4770      	bx	lr
 8034e6e:	bf00      	nop
 8034e70:	00000000 	.word	0x00000000
 8034e74:	7ff80000 	.word	0x7ff80000

08034e78 <nanf>:
 8034e78:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8034e80 <nanf+0x8>
 8034e7c:	4770      	bx	lr
 8034e7e:	bf00      	nop
 8034e80:	7fc00000 	.word	0x7fc00000

08034e84 <_calloc_r>:
 8034e84:	b538      	push	{r3, r4, r5, lr}
 8034e86:	fba1 1502 	umull	r1, r5, r1, r2
 8034e8a:	b935      	cbnz	r5, 8034e9a <_calloc_r+0x16>
 8034e8c:	f7f9 fc4e 	bl	802e72c <_malloc_r>
 8034e90:	4604      	mov	r4, r0
 8034e92:	b938      	cbnz	r0, 8034ea4 <_calloc_r+0x20>
 8034e94:	2400      	movs	r4, #0
 8034e96:	4620      	mov	r0, r4
 8034e98:	bd38      	pop	{r3, r4, r5, pc}
 8034e9a:	f7f8 fbf5 	bl	802d688 <__errno>
 8034e9e:	230c      	movs	r3, #12
 8034ea0:	6003      	str	r3, [r0, #0]
 8034ea2:	e7f7      	b.n	8034e94 <_calloc_r+0x10>
 8034ea4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8034ea8:	f022 0203 	bic.w	r2, r2, #3
 8034eac:	3a04      	subs	r2, #4
 8034eae:	2a24      	cmp	r2, #36	@ 0x24
 8034eb0:	d819      	bhi.n	8034ee6 <_calloc_r+0x62>
 8034eb2:	2a13      	cmp	r2, #19
 8034eb4:	d915      	bls.n	8034ee2 <_calloc_r+0x5e>
 8034eb6:	2a1b      	cmp	r2, #27
 8034eb8:	e9c0 5500 	strd	r5, r5, [r0]
 8034ebc:	d806      	bhi.n	8034ecc <_calloc_r+0x48>
 8034ebe:	f100 0308 	add.w	r3, r0, #8
 8034ec2:	2200      	movs	r2, #0
 8034ec4:	e9c3 2200 	strd	r2, r2, [r3]
 8034ec8:	609a      	str	r2, [r3, #8]
 8034eca:	e7e4      	b.n	8034e96 <_calloc_r+0x12>
 8034ecc:	2a24      	cmp	r2, #36	@ 0x24
 8034ece:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8034ed2:	bf11      	iteee	ne
 8034ed4:	f100 0310 	addne.w	r3, r0, #16
 8034ed8:	6105      	streq	r5, [r0, #16]
 8034eda:	f100 0318 	addeq.w	r3, r0, #24
 8034ede:	6145      	streq	r5, [r0, #20]
 8034ee0:	e7ef      	b.n	8034ec2 <_calloc_r+0x3e>
 8034ee2:	4603      	mov	r3, r0
 8034ee4:	e7ed      	b.n	8034ec2 <_calloc_r+0x3e>
 8034ee6:	4629      	mov	r1, r5
 8034ee8:	f7f7 f9ca 	bl	802c280 <memset>
 8034eec:	e7d3      	b.n	8034e96 <_calloc_r+0x12>
	...

08034ef0 <__env_lock>:
 8034ef0:	4801      	ldr	r0, [pc, #4]	@ (8034ef8 <__env_lock+0x8>)
 8034ef2:	f7f8 bbfe 	b.w	802d6f2 <__retarget_lock_acquire_recursive>
 8034ef6:	bf00      	nop
 8034ef8:	2001a031 	.word	0x2001a031

08034efc <__env_unlock>:
 8034efc:	4801      	ldr	r0, [pc, #4]	@ (8034f04 <__env_unlock+0x8>)
 8034efe:	f7f8 bbfa 	b.w	802d6f6 <__retarget_lock_release_recursive>
 8034f02:	bf00      	nop
 8034f04:	2001a031 	.word	0x2001a031

08034f08 <rshift>:
 8034f08:	6903      	ldr	r3, [r0, #16]
 8034f0a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8034f0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8034f12:	ea4f 1261 	mov.w	r2, r1, asr #5
 8034f16:	f100 0414 	add.w	r4, r0, #20
 8034f1a:	dd45      	ble.n	8034fa8 <rshift+0xa0>
 8034f1c:	f011 011f 	ands.w	r1, r1, #31
 8034f20:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8034f24:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8034f28:	d10c      	bne.n	8034f44 <rshift+0x3c>
 8034f2a:	f100 0710 	add.w	r7, r0, #16
 8034f2e:	4629      	mov	r1, r5
 8034f30:	42b1      	cmp	r1, r6
 8034f32:	d334      	bcc.n	8034f9e <rshift+0x96>
 8034f34:	1a9b      	subs	r3, r3, r2
 8034f36:	009b      	lsls	r3, r3, #2
 8034f38:	1eea      	subs	r2, r5, #3
 8034f3a:	4296      	cmp	r6, r2
 8034f3c:	bf38      	it	cc
 8034f3e:	2300      	movcc	r3, #0
 8034f40:	4423      	add	r3, r4
 8034f42:	e015      	b.n	8034f70 <rshift+0x68>
 8034f44:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8034f48:	f1c1 0820 	rsb	r8, r1, #32
 8034f4c:	40cf      	lsrs	r7, r1
 8034f4e:	f105 0e04 	add.w	lr, r5, #4
 8034f52:	46a1      	mov	r9, r4
 8034f54:	4576      	cmp	r6, lr
 8034f56:	46f4      	mov	ip, lr
 8034f58:	d815      	bhi.n	8034f86 <rshift+0x7e>
 8034f5a:	1a9a      	subs	r2, r3, r2
 8034f5c:	0092      	lsls	r2, r2, #2
 8034f5e:	3a04      	subs	r2, #4
 8034f60:	3501      	adds	r5, #1
 8034f62:	42ae      	cmp	r6, r5
 8034f64:	bf38      	it	cc
 8034f66:	2200      	movcc	r2, #0
 8034f68:	18a3      	adds	r3, r4, r2
 8034f6a:	50a7      	str	r7, [r4, r2]
 8034f6c:	b107      	cbz	r7, 8034f70 <rshift+0x68>
 8034f6e:	3304      	adds	r3, #4
 8034f70:	1b1a      	subs	r2, r3, r4
 8034f72:	42a3      	cmp	r3, r4
 8034f74:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8034f78:	bf08      	it	eq
 8034f7a:	2300      	moveq	r3, #0
 8034f7c:	6102      	str	r2, [r0, #16]
 8034f7e:	bf08      	it	eq
 8034f80:	6143      	streq	r3, [r0, #20]
 8034f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8034f86:	f8dc c000 	ldr.w	ip, [ip]
 8034f8a:	fa0c fc08 	lsl.w	ip, ip, r8
 8034f8e:	ea4c 0707 	orr.w	r7, ip, r7
 8034f92:	f849 7b04 	str.w	r7, [r9], #4
 8034f96:	f85e 7b04 	ldr.w	r7, [lr], #4
 8034f9a:	40cf      	lsrs	r7, r1
 8034f9c:	e7da      	b.n	8034f54 <rshift+0x4c>
 8034f9e:	f851 cb04 	ldr.w	ip, [r1], #4
 8034fa2:	f847 cf04 	str.w	ip, [r7, #4]!
 8034fa6:	e7c3      	b.n	8034f30 <rshift+0x28>
 8034fa8:	4623      	mov	r3, r4
 8034faa:	e7e1      	b.n	8034f70 <rshift+0x68>

08034fac <__hexdig_fun>:
 8034fac:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8034fb0:	2b09      	cmp	r3, #9
 8034fb2:	d802      	bhi.n	8034fba <__hexdig_fun+0xe>
 8034fb4:	3820      	subs	r0, #32
 8034fb6:	b2c0      	uxtb	r0, r0
 8034fb8:	4770      	bx	lr
 8034fba:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8034fbe:	2b05      	cmp	r3, #5
 8034fc0:	d801      	bhi.n	8034fc6 <__hexdig_fun+0x1a>
 8034fc2:	3847      	subs	r0, #71	@ 0x47
 8034fc4:	e7f7      	b.n	8034fb6 <__hexdig_fun+0xa>
 8034fc6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8034fca:	2b05      	cmp	r3, #5
 8034fcc:	d801      	bhi.n	8034fd2 <__hexdig_fun+0x26>
 8034fce:	3827      	subs	r0, #39	@ 0x27
 8034fd0:	e7f1      	b.n	8034fb6 <__hexdig_fun+0xa>
 8034fd2:	2000      	movs	r0, #0
 8034fd4:	4770      	bx	lr
	...

08034fd8 <__gethex>:
 8034fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034fdc:	b085      	sub	sp, #20
 8034fde:	468a      	mov	sl, r1
 8034fe0:	9302      	str	r3, [sp, #8]
 8034fe2:	680b      	ldr	r3, [r1, #0]
 8034fe4:	9001      	str	r0, [sp, #4]
 8034fe6:	4690      	mov	r8, r2
 8034fe8:	1c9c      	adds	r4, r3, #2
 8034fea:	46a1      	mov	r9, r4
 8034fec:	f814 0b01 	ldrb.w	r0, [r4], #1
 8034ff0:	2830      	cmp	r0, #48	@ 0x30
 8034ff2:	d0fa      	beq.n	8034fea <__gethex+0x12>
 8034ff4:	eba9 0303 	sub.w	r3, r9, r3
 8034ff8:	f1a3 0b02 	sub.w	fp, r3, #2
 8034ffc:	f7ff ffd6 	bl	8034fac <__hexdig_fun>
 8035000:	4605      	mov	r5, r0
 8035002:	2800      	cmp	r0, #0
 8035004:	d168      	bne.n	80350d8 <__gethex+0x100>
 8035006:	49a0      	ldr	r1, [pc, #640]	@ (8035288 <__gethex+0x2b0>)
 8035008:	2201      	movs	r2, #1
 803500a:	4648      	mov	r0, r9
 803500c:	f7f7 f96d 	bl	802c2ea <strncmp>
 8035010:	4607      	mov	r7, r0
 8035012:	2800      	cmp	r0, #0
 8035014:	d167      	bne.n	80350e6 <__gethex+0x10e>
 8035016:	f899 0001 	ldrb.w	r0, [r9, #1]
 803501a:	4626      	mov	r6, r4
 803501c:	f7ff ffc6 	bl	8034fac <__hexdig_fun>
 8035020:	2800      	cmp	r0, #0
 8035022:	d062      	beq.n	80350ea <__gethex+0x112>
 8035024:	4623      	mov	r3, r4
 8035026:	7818      	ldrb	r0, [r3, #0]
 8035028:	2830      	cmp	r0, #48	@ 0x30
 803502a:	4699      	mov	r9, r3
 803502c:	f103 0301 	add.w	r3, r3, #1
 8035030:	d0f9      	beq.n	8035026 <__gethex+0x4e>
 8035032:	f7ff ffbb 	bl	8034fac <__hexdig_fun>
 8035036:	fab0 f580 	clz	r5, r0
 803503a:	096d      	lsrs	r5, r5, #5
 803503c:	f04f 0b01 	mov.w	fp, #1
 8035040:	464a      	mov	r2, r9
 8035042:	4616      	mov	r6, r2
 8035044:	3201      	adds	r2, #1
 8035046:	7830      	ldrb	r0, [r6, #0]
 8035048:	f7ff ffb0 	bl	8034fac <__hexdig_fun>
 803504c:	2800      	cmp	r0, #0
 803504e:	d1f8      	bne.n	8035042 <__gethex+0x6a>
 8035050:	498d      	ldr	r1, [pc, #564]	@ (8035288 <__gethex+0x2b0>)
 8035052:	2201      	movs	r2, #1
 8035054:	4630      	mov	r0, r6
 8035056:	f7f7 f948 	bl	802c2ea <strncmp>
 803505a:	2800      	cmp	r0, #0
 803505c:	d13f      	bne.n	80350de <__gethex+0x106>
 803505e:	b944      	cbnz	r4, 8035072 <__gethex+0x9a>
 8035060:	1c74      	adds	r4, r6, #1
 8035062:	4622      	mov	r2, r4
 8035064:	4616      	mov	r6, r2
 8035066:	3201      	adds	r2, #1
 8035068:	7830      	ldrb	r0, [r6, #0]
 803506a:	f7ff ff9f 	bl	8034fac <__hexdig_fun>
 803506e:	2800      	cmp	r0, #0
 8035070:	d1f8      	bne.n	8035064 <__gethex+0x8c>
 8035072:	1ba4      	subs	r4, r4, r6
 8035074:	00a7      	lsls	r7, r4, #2
 8035076:	7833      	ldrb	r3, [r6, #0]
 8035078:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 803507c:	2b50      	cmp	r3, #80	@ 0x50
 803507e:	d13e      	bne.n	80350fe <__gethex+0x126>
 8035080:	7873      	ldrb	r3, [r6, #1]
 8035082:	2b2b      	cmp	r3, #43	@ 0x2b
 8035084:	d033      	beq.n	80350ee <__gethex+0x116>
 8035086:	2b2d      	cmp	r3, #45	@ 0x2d
 8035088:	d034      	beq.n	80350f4 <__gethex+0x11c>
 803508a:	1c71      	adds	r1, r6, #1
 803508c:	2400      	movs	r4, #0
 803508e:	7808      	ldrb	r0, [r1, #0]
 8035090:	f7ff ff8c 	bl	8034fac <__hexdig_fun>
 8035094:	1e43      	subs	r3, r0, #1
 8035096:	b2db      	uxtb	r3, r3
 8035098:	2b18      	cmp	r3, #24
 803509a:	d830      	bhi.n	80350fe <__gethex+0x126>
 803509c:	f1a0 0210 	sub.w	r2, r0, #16
 80350a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80350a4:	f7ff ff82 	bl	8034fac <__hexdig_fun>
 80350a8:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80350ac:	fa5f fc8c 	uxtb.w	ip, ip
 80350b0:	f1bc 0f18 	cmp.w	ip, #24
 80350b4:	f04f 030a 	mov.w	r3, #10
 80350b8:	d91e      	bls.n	80350f8 <__gethex+0x120>
 80350ba:	b104      	cbz	r4, 80350be <__gethex+0xe6>
 80350bc:	4252      	negs	r2, r2
 80350be:	4417      	add	r7, r2
 80350c0:	f8ca 1000 	str.w	r1, [sl]
 80350c4:	b1ed      	cbz	r5, 8035102 <__gethex+0x12a>
 80350c6:	f1bb 0f00 	cmp.w	fp, #0
 80350ca:	bf0c      	ite	eq
 80350cc:	2506      	moveq	r5, #6
 80350ce:	2500      	movne	r5, #0
 80350d0:	4628      	mov	r0, r5
 80350d2:	b005      	add	sp, #20
 80350d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80350d8:	2500      	movs	r5, #0
 80350da:	462c      	mov	r4, r5
 80350dc:	e7b0      	b.n	8035040 <__gethex+0x68>
 80350de:	2c00      	cmp	r4, #0
 80350e0:	d1c7      	bne.n	8035072 <__gethex+0x9a>
 80350e2:	4627      	mov	r7, r4
 80350e4:	e7c7      	b.n	8035076 <__gethex+0x9e>
 80350e6:	464e      	mov	r6, r9
 80350e8:	462f      	mov	r7, r5
 80350ea:	2501      	movs	r5, #1
 80350ec:	e7c3      	b.n	8035076 <__gethex+0x9e>
 80350ee:	2400      	movs	r4, #0
 80350f0:	1cb1      	adds	r1, r6, #2
 80350f2:	e7cc      	b.n	803508e <__gethex+0xb6>
 80350f4:	2401      	movs	r4, #1
 80350f6:	e7fb      	b.n	80350f0 <__gethex+0x118>
 80350f8:	fb03 0002 	mla	r0, r3, r2, r0
 80350fc:	e7ce      	b.n	803509c <__gethex+0xc4>
 80350fe:	4631      	mov	r1, r6
 8035100:	e7de      	b.n	80350c0 <__gethex+0xe8>
 8035102:	eba6 0309 	sub.w	r3, r6, r9
 8035106:	3b01      	subs	r3, #1
 8035108:	4629      	mov	r1, r5
 803510a:	2b07      	cmp	r3, #7
 803510c:	dc0a      	bgt.n	8035124 <__gethex+0x14c>
 803510e:	9801      	ldr	r0, [sp, #4]
 8035110:	f7fd fe22 	bl	8032d58 <_Balloc>
 8035114:	4604      	mov	r4, r0
 8035116:	b940      	cbnz	r0, 803512a <__gethex+0x152>
 8035118:	4b5c      	ldr	r3, [pc, #368]	@ (803528c <__gethex+0x2b4>)
 803511a:	4602      	mov	r2, r0
 803511c:	21e4      	movs	r1, #228	@ 0xe4
 803511e:	485c      	ldr	r0, [pc, #368]	@ (8035290 <__gethex+0x2b8>)
 8035120:	f7f4 fb5c 	bl	80297dc <__assert_func>
 8035124:	3101      	adds	r1, #1
 8035126:	105b      	asrs	r3, r3, #1
 8035128:	e7ef      	b.n	803510a <__gethex+0x132>
 803512a:	f100 0a14 	add.w	sl, r0, #20
 803512e:	2300      	movs	r3, #0
 8035130:	4655      	mov	r5, sl
 8035132:	469b      	mov	fp, r3
 8035134:	45b1      	cmp	r9, r6
 8035136:	d337      	bcc.n	80351a8 <__gethex+0x1d0>
 8035138:	f845 bb04 	str.w	fp, [r5], #4
 803513c:	eba5 050a 	sub.w	r5, r5, sl
 8035140:	10ad      	asrs	r5, r5, #2
 8035142:	6125      	str	r5, [r4, #16]
 8035144:	4658      	mov	r0, fp
 8035146:	f7fd fec5 	bl	8032ed4 <__hi0bits>
 803514a:	016d      	lsls	r5, r5, #5
 803514c:	f8d8 6000 	ldr.w	r6, [r8]
 8035150:	1a2d      	subs	r5, r5, r0
 8035152:	42b5      	cmp	r5, r6
 8035154:	dd54      	ble.n	8035200 <__gethex+0x228>
 8035156:	1bad      	subs	r5, r5, r6
 8035158:	4629      	mov	r1, r5
 803515a:	4620      	mov	r0, r4
 803515c:	f7fe fa3f 	bl	80335de <__any_on>
 8035160:	4681      	mov	r9, r0
 8035162:	b178      	cbz	r0, 8035184 <__gethex+0x1ac>
 8035164:	1e6b      	subs	r3, r5, #1
 8035166:	1159      	asrs	r1, r3, #5
 8035168:	f003 021f 	and.w	r2, r3, #31
 803516c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8035170:	f04f 0901 	mov.w	r9, #1
 8035174:	fa09 f202 	lsl.w	r2, r9, r2
 8035178:	420a      	tst	r2, r1
 803517a:	d003      	beq.n	8035184 <__gethex+0x1ac>
 803517c:	454b      	cmp	r3, r9
 803517e:	dc36      	bgt.n	80351ee <__gethex+0x216>
 8035180:	f04f 0902 	mov.w	r9, #2
 8035184:	4629      	mov	r1, r5
 8035186:	4620      	mov	r0, r4
 8035188:	f7ff febe 	bl	8034f08 <rshift>
 803518c:	442f      	add	r7, r5
 803518e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8035192:	42bb      	cmp	r3, r7
 8035194:	da42      	bge.n	803521c <__gethex+0x244>
 8035196:	9801      	ldr	r0, [sp, #4]
 8035198:	4621      	mov	r1, r4
 803519a:	f7fd fe02 	bl	8032da2 <_Bfree>
 803519e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80351a0:	2300      	movs	r3, #0
 80351a2:	6013      	str	r3, [r2, #0]
 80351a4:	25a3      	movs	r5, #163	@ 0xa3
 80351a6:	e793      	b.n	80350d0 <__gethex+0xf8>
 80351a8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80351ac:	2a2e      	cmp	r2, #46	@ 0x2e
 80351ae:	d012      	beq.n	80351d6 <__gethex+0x1fe>
 80351b0:	2b20      	cmp	r3, #32
 80351b2:	d104      	bne.n	80351be <__gethex+0x1e6>
 80351b4:	f845 bb04 	str.w	fp, [r5], #4
 80351b8:	f04f 0b00 	mov.w	fp, #0
 80351bc:	465b      	mov	r3, fp
 80351be:	7830      	ldrb	r0, [r6, #0]
 80351c0:	9303      	str	r3, [sp, #12]
 80351c2:	f7ff fef3 	bl	8034fac <__hexdig_fun>
 80351c6:	9b03      	ldr	r3, [sp, #12]
 80351c8:	f000 000f 	and.w	r0, r0, #15
 80351cc:	4098      	lsls	r0, r3
 80351ce:	ea4b 0b00 	orr.w	fp, fp, r0
 80351d2:	3304      	adds	r3, #4
 80351d4:	e7ae      	b.n	8035134 <__gethex+0x15c>
 80351d6:	45b1      	cmp	r9, r6
 80351d8:	d8ea      	bhi.n	80351b0 <__gethex+0x1d8>
 80351da:	492b      	ldr	r1, [pc, #172]	@ (8035288 <__gethex+0x2b0>)
 80351dc:	9303      	str	r3, [sp, #12]
 80351de:	2201      	movs	r2, #1
 80351e0:	4630      	mov	r0, r6
 80351e2:	f7f7 f882 	bl	802c2ea <strncmp>
 80351e6:	9b03      	ldr	r3, [sp, #12]
 80351e8:	2800      	cmp	r0, #0
 80351ea:	d1e1      	bne.n	80351b0 <__gethex+0x1d8>
 80351ec:	e7a2      	b.n	8035134 <__gethex+0x15c>
 80351ee:	1ea9      	subs	r1, r5, #2
 80351f0:	4620      	mov	r0, r4
 80351f2:	f7fe f9f4 	bl	80335de <__any_on>
 80351f6:	2800      	cmp	r0, #0
 80351f8:	d0c2      	beq.n	8035180 <__gethex+0x1a8>
 80351fa:	f04f 0903 	mov.w	r9, #3
 80351fe:	e7c1      	b.n	8035184 <__gethex+0x1ac>
 8035200:	da09      	bge.n	8035216 <__gethex+0x23e>
 8035202:	1b75      	subs	r5, r6, r5
 8035204:	4621      	mov	r1, r4
 8035206:	9801      	ldr	r0, [sp, #4]
 8035208:	462a      	mov	r2, r5
 803520a:	f7fd ffaf 	bl	803316c <__lshift>
 803520e:	1b7f      	subs	r7, r7, r5
 8035210:	4604      	mov	r4, r0
 8035212:	f100 0a14 	add.w	sl, r0, #20
 8035216:	f04f 0900 	mov.w	r9, #0
 803521a:	e7b8      	b.n	803518e <__gethex+0x1b6>
 803521c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8035220:	42bd      	cmp	r5, r7
 8035222:	dd6f      	ble.n	8035304 <__gethex+0x32c>
 8035224:	1bed      	subs	r5, r5, r7
 8035226:	42ae      	cmp	r6, r5
 8035228:	dc34      	bgt.n	8035294 <__gethex+0x2bc>
 803522a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 803522e:	2b02      	cmp	r3, #2
 8035230:	d022      	beq.n	8035278 <__gethex+0x2a0>
 8035232:	2b03      	cmp	r3, #3
 8035234:	d024      	beq.n	8035280 <__gethex+0x2a8>
 8035236:	2b01      	cmp	r3, #1
 8035238:	d115      	bne.n	8035266 <__gethex+0x28e>
 803523a:	42ae      	cmp	r6, r5
 803523c:	d113      	bne.n	8035266 <__gethex+0x28e>
 803523e:	2e01      	cmp	r6, #1
 8035240:	d10b      	bne.n	803525a <__gethex+0x282>
 8035242:	9a02      	ldr	r2, [sp, #8]
 8035244:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8035248:	6013      	str	r3, [r2, #0]
 803524a:	2301      	movs	r3, #1
 803524c:	6123      	str	r3, [r4, #16]
 803524e:	f8ca 3000 	str.w	r3, [sl]
 8035252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8035254:	2562      	movs	r5, #98	@ 0x62
 8035256:	601c      	str	r4, [r3, #0]
 8035258:	e73a      	b.n	80350d0 <__gethex+0xf8>
 803525a:	1e71      	subs	r1, r6, #1
 803525c:	4620      	mov	r0, r4
 803525e:	f7fe f9be 	bl	80335de <__any_on>
 8035262:	2800      	cmp	r0, #0
 8035264:	d1ed      	bne.n	8035242 <__gethex+0x26a>
 8035266:	9801      	ldr	r0, [sp, #4]
 8035268:	4621      	mov	r1, r4
 803526a:	f7fd fd9a 	bl	8032da2 <_Bfree>
 803526e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8035270:	2300      	movs	r3, #0
 8035272:	6013      	str	r3, [r2, #0]
 8035274:	2550      	movs	r5, #80	@ 0x50
 8035276:	e72b      	b.n	80350d0 <__gethex+0xf8>
 8035278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803527a:	2b00      	cmp	r3, #0
 803527c:	d1f3      	bne.n	8035266 <__gethex+0x28e>
 803527e:	e7e0      	b.n	8035242 <__gethex+0x26a>
 8035280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035282:	2b00      	cmp	r3, #0
 8035284:	d1dd      	bne.n	8035242 <__gethex+0x26a>
 8035286:	e7ee      	b.n	8035266 <__gethex+0x28e>
 8035288:	0803b19e 	.word	0x0803b19e
 803528c:	0803b4d6 	.word	0x0803b4d6
 8035290:	0803b770 	.word	0x0803b770
 8035294:	1e6f      	subs	r7, r5, #1
 8035296:	f1b9 0f00 	cmp.w	r9, #0
 803529a:	d130      	bne.n	80352fe <__gethex+0x326>
 803529c:	b127      	cbz	r7, 80352a8 <__gethex+0x2d0>
 803529e:	4639      	mov	r1, r7
 80352a0:	4620      	mov	r0, r4
 80352a2:	f7fe f99c 	bl	80335de <__any_on>
 80352a6:	4681      	mov	r9, r0
 80352a8:	117a      	asrs	r2, r7, #5
 80352aa:	2301      	movs	r3, #1
 80352ac:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80352b0:	f007 071f 	and.w	r7, r7, #31
 80352b4:	40bb      	lsls	r3, r7
 80352b6:	4213      	tst	r3, r2
 80352b8:	4629      	mov	r1, r5
 80352ba:	4620      	mov	r0, r4
 80352bc:	bf18      	it	ne
 80352be:	f049 0902 	orrne.w	r9, r9, #2
 80352c2:	f7ff fe21 	bl	8034f08 <rshift>
 80352c6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80352ca:	1b76      	subs	r6, r6, r5
 80352cc:	2502      	movs	r5, #2
 80352ce:	f1b9 0f00 	cmp.w	r9, #0
 80352d2:	d047      	beq.n	8035364 <__gethex+0x38c>
 80352d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80352d8:	2b02      	cmp	r3, #2
 80352da:	d015      	beq.n	8035308 <__gethex+0x330>
 80352dc:	2b03      	cmp	r3, #3
 80352de:	d017      	beq.n	8035310 <__gethex+0x338>
 80352e0:	2b01      	cmp	r3, #1
 80352e2:	d109      	bne.n	80352f8 <__gethex+0x320>
 80352e4:	f019 0f02 	tst.w	r9, #2
 80352e8:	d006      	beq.n	80352f8 <__gethex+0x320>
 80352ea:	f8da 3000 	ldr.w	r3, [sl]
 80352ee:	ea49 0903 	orr.w	r9, r9, r3
 80352f2:	f019 0f01 	tst.w	r9, #1
 80352f6:	d10e      	bne.n	8035316 <__gethex+0x33e>
 80352f8:	f045 0510 	orr.w	r5, r5, #16
 80352fc:	e032      	b.n	8035364 <__gethex+0x38c>
 80352fe:	f04f 0901 	mov.w	r9, #1
 8035302:	e7d1      	b.n	80352a8 <__gethex+0x2d0>
 8035304:	2501      	movs	r5, #1
 8035306:	e7e2      	b.n	80352ce <__gethex+0x2f6>
 8035308:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803530a:	f1c3 0301 	rsb	r3, r3, #1
 803530e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8035310:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035312:	2b00      	cmp	r3, #0
 8035314:	d0f0      	beq.n	80352f8 <__gethex+0x320>
 8035316:	f8d4 b010 	ldr.w	fp, [r4, #16]
 803531a:	f104 0314 	add.w	r3, r4, #20
 803531e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8035322:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8035326:	f04f 0c00 	mov.w	ip, #0
 803532a:	4618      	mov	r0, r3
 803532c:	f853 2b04 	ldr.w	r2, [r3], #4
 8035330:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8035334:	d01b      	beq.n	803536e <__gethex+0x396>
 8035336:	3201      	adds	r2, #1
 8035338:	6002      	str	r2, [r0, #0]
 803533a:	2d02      	cmp	r5, #2
 803533c:	f104 0314 	add.w	r3, r4, #20
 8035340:	d13c      	bne.n	80353bc <__gethex+0x3e4>
 8035342:	f8d8 2000 	ldr.w	r2, [r8]
 8035346:	3a01      	subs	r2, #1
 8035348:	42b2      	cmp	r2, r6
 803534a:	d109      	bne.n	8035360 <__gethex+0x388>
 803534c:	1171      	asrs	r1, r6, #5
 803534e:	2201      	movs	r2, #1
 8035350:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8035354:	f006 061f 	and.w	r6, r6, #31
 8035358:	fa02 f606 	lsl.w	r6, r2, r6
 803535c:	421e      	tst	r6, r3
 803535e:	d13a      	bne.n	80353d6 <__gethex+0x3fe>
 8035360:	f045 0520 	orr.w	r5, r5, #32
 8035364:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8035366:	601c      	str	r4, [r3, #0]
 8035368:	9b02      	ldr	r3, [sp, #8]
 803536a:	601f      	str	r7, [r3, #0]
 803536c:	e6b0      	b.n	80350d0 <__gethex+0xf8>
 803536e:	4299      	cmp	r1, r3
 8035370:	f843 cc04 	str.w	ip, [r3, #-4]
 8035374:	d8d9      	bhi.n	803532a <__gethex+0x352>
 8035376:	68a3      	ldr	r3, [r4, #8]
 8035378:	459b      	cmp	fp, r3
 803537a:	db17      	blt.n	80353ac <__gethex+0x3d4>
 803537c:	6861      	ldr	r1, [r4, #4]
 803537e:	9801      	ldr	r0, [sp, #4]
 8035380:	3101      	adds	r1, #1
 8035382:	f7fd fce9 	bl	8032d58 <_Balloc>
 8035386:	4681      	mov	r9, r0
 8035388:	b918      	cbnz	r0, 8035392 <__gethex+0x3ba>
 803538a:	4b1a      	ldr	r3, [pc, #104]	@ (80353f4 <__gethex+0x41c>)
 803538c:	4602      	mov	r2, r0
 803538e:	2184      	movs	r1, #132	@ 0x84
 8035390:	e6c5      	b.n	803511e <__gethex+0x146>
 8035392:	6922      	ldr	r2, [r4, #16]
 8035394:	3202      	adds	r2, #2
 8035396:	f104 010c 	add.w	r1, r4, #12
 803539a:	0092      	lsls	r2, r2, #2
 803539c:	300c      	adds	r0, #12
 803539e:	f7f8 f9ab 	bl	802d6f8 <memcpy>
 80353a2:	4621      	mov	r1, r4
 80353a4:	9801      	ldr	r0, [sp, #4]
 80353a6:	f7fd fcfc 	bl	8032da2 <_Bfree>
 80353aa:	464c      	mov	r4, r9
 80353ac:	6923      	ldr	r3, [r4, #16]
 80353ae:	1c5a      	adds	r2, r3, #1
 80353b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80353b4:	6122      	str	r2, [r4, #16]
 80353b6:	2201      	movs	r2, #1
 80353b8:	615a      	str	r2, [r3, #20]
 80353ba:	e7be      	b.n	803533a <__gethex+0x362>
 80353bc:	6922      	ldr	r2, [r4, #16]
 80353be:	455a      	cmp	r2, fp
 80353c0:	dd0b      	ble.n	80353da <__gethex+0x402>
 80353c2:	2101      	movs	r1, #1
 80353c4:	4620      	mov	r0, r4
 80353c6:	f7ff fd9f 	bl	8034f08 <rshift>
 80353ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80353ce:	3701      	adds	r7, #1
 80353d0:	42bb      	cmp	r3, r7
 80353d2:	f6ff aee0 	blt.w	8035196 <__gethex+0x1be>
 80353d6:	2501      	movs	r5, #1
 80353d8:	e7c2      	b.n	8035360 <__gethex+0x388>
 80353da:	f016 061f 	ands.w	r6, r6, #31
 80353de:	d0fa      	beq.n	80353d6 <__gethex+0x3fe>
 80353e0:	4453      	add	r3, sl
 80353e2:	f1c6 0620 	rsb	r6, r6, #32
 80353e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80353ea:	f7fd fd73 	bl	8032ed4 <__hi0bits>
 80353ee:	42b0      	cmp	r0, r6
 80353f0:	dbe7      	blt.n	80353c2 <__gethex+0x3ea>
 80353f2:	e7f0      	b.n	80353d6 <__gethex+0x3fe>
 80353f4:	0803b4d6 	.word	0x0803b4d6

080353f8 <L_shift>:
 80353f8:	f1c2 0208 	rsb	r2, r2, #8
 80353fc:	0092      	lsls	r2, r2, #2
 80353fe:	b570      	push	{r4, r5, r6, lr}
 8035400:	f1c2 0620 	rsb	r6, r2, #32
 8035404:	6843      	ldr	r3, [r0, #4]
 8035406:	6804      	ldr	r4, [r0, #0]
 8035408:	fa03 f506 	lsl.w	r5, r3, r6
 803540c:	432c      	orrs	r4, r5
 803540e:	40d3      	lsrs	r3, r2
 8035410:	6004      	str	r4, [r0, #0]
 8035412:	f840 3f04 	str.w	r3, [r0, #4]!
 8035416:	4288      	cmp	r0, r1
 8035418:	d3f4      	bcc.n	8035404 <L_shift+0xc>
 803541a:	bd70      	pop	{r4, r5, r6, pc}

0803541c <__match>:
 803541c:	b530      	push	{r4, r5, lr}
 803541e:	6803      	ldr	r3, [r0, #0]
 8035420:	3301      	adds	r3, #1
 8035422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8035426:	b914      	cbnz	r4, 803542e <__match+0x12>
 8035428:	6003      	str	r3, [r0, #0]
 803542a:	2001      	movs	r0, #1
 803542c:	bd30      	pop	{r4, r5, pc}
 803542e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8035432:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8035436:	2d19      	cmp	r5, #25
 8035438:	bf98      	it	ls
 803543a:	3220      	addls	r2, #32
 803543c:	42a2      	cmp	r2, r4
 803543e:	d0f0      	beq.n	8035422 <__match+0x6>
 8035440:	2000      	movs	r0, #0
 8035442:	e7f3      	b.n	803542c <__match+0x10>

08035444 <__hexnan>:
 8035444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035448:	680b      	ldr	r3, [r1, #0]
 803544a:	6801      	ldr	r1, [r0, #0]
 803544c:	115e      	asrs	r6, r3, #5
 803544e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8035452:	f013 031f 	ands.w	r3, r3, #31
 8035456:	b087      	sub	sp, #28
 8035458:	bf18      	it	ne
 803545a:	3604      	addne	r6, #4
 803545c:	2500      	movs	r5, #0
 803545e:	1f37      	subs	r7, r6, #4
 8035460:	4682      	mov	sl, r0
 8035462:	4690      	mov	r8, r2
 8035464:	9301      	str	r3, [sp, #4]
 8035466:	f846 5c04 	str.w	r5, [r6, #-4]
 803546a:	46b9      	mov	r9, r7
 803546c:	463c      	mov	r4, r7
 803546e:	9502      	str	r5, [sp, #8]
 8035470:	46ab      	mov	fp, r5
 8035472:	784a      	ldrb	r2, [r1, #1]
 8035474:	1c4b      	adds	r3, r1, #1
 8035476:	9303      	str	r3, [sp, #12]
 8035478:	b342      	cbz	r2, 80354cc <__hexnan+0x88>
 803547a:	4610      	mov	r0, r2
 803547c:	9105      	str	r1, [sp, #20]
 803547e:	9204      	str	r2, [sp, #16]
 8035480:	f7ff fd94 	bl	8034fac <__hexdig_fun>
 8035484:	2800      	cmp	r0, #0
 8035486:	d151      	bne.n	803552c <__hexnan+0xe8>
 8035488:	9a04      	ldr	r2, [sp, #16]
 803548a:	9905      	ldr	r1, [sp, #20]
 803548c:	2a20      	cmp	r2, #32
 803548e:	d818      	bhi.n	80354c2 <__hexnan+0x7e>
 8035490:	9b02      	ldr	r3, [sp, #8]
 8035492:	459b      	cmp	fp, r3
 8035494:	dd13      	ble.n	80354be <__hexnan+0x7a>
 8035496:	454c      	cmp	r4, r9
 8035498:	d206      	bcs.n	80354a8 <__hexnan+0x64>
 803549a:	2d07      	cmp	r5, #7
 803549c:	dc04      	bgt.n	80354a8 <__hexnan+0x64>
 803549e:	462a      	mov	r2, r5
 80354a0:	4649      	mov	r1, r9
 80354a2:	4620      	mov	r0, r4
 80354a4:	f7ff ffa8 	bl	80353f8 <L_shift>
 80354a8:	4544      	cmp	r4, r8
 80354aa:	d952      	bls.n	8035552 <__hexnan+0x10e>
 80354ac:	2300      	movs	r3, #0
 80354ae:	f1a4 0904 	sub.w	r9, r4, #4
 80354b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80354b6:	f8cd b008 	str.w	fp, [sp, #8]
 80354ba:	464c      	mov	r4, r9
 80354bc:	461d      	mov	r5, r3
 80354be:	9903      	ldr	r1, [sp, #12]
 80354c0:	e7d7      	b.n	8035472 <__hexnan+0x2e>
 80354c2:	2a29      	cmp	r2, #41	@ 0x29
 80354c4:	d157      	bne.n	8035576 <__hexnan+0x132>
 80354c6:	3102      	adds	r1, #2
 80354c8:	f8ca 1000 	str.w	r1, [sl]
 80354cc:	f1bb 0f00 	cmp.w	fp, #0
 80354d0:	d051      	beq.n	8035576 <__hexnan+0x132>
 80354d2:	454c      	cmp	r4, r9
 80354d4:	d206      	bcs.n	80354e4 <__hexnan+0xa0>
 80354d6:	2d07      	cmp	r5, #7
 80354d8:	dc04      	bgt.n	80354e4 <__hexnan+0xa0>
 80354da:	462a      	mov	r2, r5
 80354dc:	4649      	mov	r1, r9
 80354de:	4620      	mov	r0, r4
 80354e0:	f7ff ff8a 	bl	80353f8 <L_shift>
 80354e4:	4544      	cmp	r4, r8
 80354e6:	d936      	bls.n	8035556 <__hexnan+0x112>
 80354e8:	f1a8 0204 	sub.w	r2, r8, #4
 80354ec:	4623      	mov	r3, r4
 80354ee:	f853 1b04 	ldr.w	r1, [r3], #4
 80354f2:	f842 1f04 	str.w	r1, [r2, #4]!
 80354f6:	429f      	cmp	r7, r3
 80354f8:	d2f9      	bcs.n	80354ee <__hexnan+0xaa>
 80354fa:	1b3b      	subs	r3, r7, r4
 80354fc:	f023 0303 	bic.w	r3, r3, #3
 8035500:	3304      	adds	r3, #4
 8035502:	3401      	adds	r4, #1
 8035504:	3e03      	subs	r6, #3
 8035506:	42b4      	cmp	r4, r6
 8035508:	bf88      	it	hi
 803550a:	2304      	movhi	r3, #4
 803550c:	4443      	add	r3, r8
 803550e:	2200      	movs	r2, #0
 8035510:	f843 2b04 	str.w	r2, [r3], #4
 8035514:	429f      	cmp	r7, r3
 8035516:	d2fb      	bcs.n	8035510 <__hexnan+0xcc>
 8035518:	683b      	ldr	r3, [r7, #0]
 803551a:	b91b      	cbnz	r3, 8035524 <__hexnan+0xe0>
 803551c:	4547      	cmp	r7, r8
 803551e:	d128      	bne.n	8035572 <__hexnan+0x12e>
 8035520:	2301      	movs	r3, #1
 8035522:	603b      	str	r3, [r7, #0]
 8035524:	2005      	movs	r0, #5
 8035526:	b007      	add	sp, #28
 8035528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803552c:	3501      	adds	r5, #1
 803552e:	2d08      	cmp	r5, #8
 8035530:	f10b 0b01 	add.w	fp, fp, #1
 8035534:	dd06      	ble.n	8035544 <__hexnan+0x100>
 8035536:	4544      	cmp	r4, r8
 8035538:	d9c1      	bls.n	80354be <__hexnan+0x7a>
 803553a:	2300      	movs	r3, #0
 803553c:	f844 3c04 	str.w	r3, [r4, #-4]
 8035540:	2501      	movs	r5, #1
 8035542:	3c04      	subs	r4, #4
 8035544:	6822      	ldr	r2, [r4, #0]
 8035546:	f000 000f 	and.w	r0, r0, #15
 803554a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 803554e:	6020      	str	r0, [r4, #0]
 8035550:	e7b5      	b.n	80354be <__hexnan+0x7a>
 8035552:	2508      	movs	r5, #8
 8035554:	e7b3      	b.n	80354be <__hexnan+0x7a>
 8035556:	9b01      	ldr	r3, [sp, #4]
 8035558:	2b00      	cmp	r3, #0
 803555a:	d0dd      	beq.n	8035518 <__hexnan+0xd4>
 803555c:	f1c3 0320 	rsb	r3, r3, #32
 8035560:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8035564:	40da      	lsrs	r2, r3
 8035566:	f856 3c04 	ldr.w	r3, [r6, #-4]
 803556a:	4013      	ands	r3, r2
 803556c:	f846 3c04 	str.w	r3, [r6, #-4]
 8035570:	e7d2      	b.n	8035518 <__hexnan+0xd4>
 8035572:	3f04      	subs	r7, #4
 8035574:	e7d0      	b.n	8035518 <__hexnan+0xd4>
 8035576:	2004      	movs	r0, #4
 8035578:	e7d5      	b.n	8035526 <__hexnan+0xe2>
	...

0803557c <_init>:
 803557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803557e:	bf00      	nop
 8035580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8035582:	bc08      	pop	{r3}
 8035584:	469e      	mov	lr, r3
 8035586:	4770      	bx	lr

08035588 <_fini>:
 8035588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803558a:	bf00      	nop
 803558c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803558e:	bc08      	pop	{r3}
 8035590:	469e      	mov	lr, r3
 8035592:	4770      	bx	lr
