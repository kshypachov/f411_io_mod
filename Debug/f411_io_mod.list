
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000276f0  080101a0  080101a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006a60  08037890  08037890  00028890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803e2f0  0803e2f0  0003089c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0803e2f0  0803e2f0  0002f2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803e2f8  0803e2f8  0003089c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803e2f8  0803e2f8  0002f2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803e300  0803e300  0002f300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000089c  20000000  0803e304  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019bc0  200008a0  0803eba0  000308a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2001a460  0803eba0  00031460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003089c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00062343  00000000  00000000  000308cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008cde  00000000  00000000  00092c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0002e553  00000000  00000000  0009b8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003468  00000000  00000000  000c9e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000032b4  00000000  00000000  000cd2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002673a  00000000  00000000  000d055c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00050e9d  00000000  00000000  000f6c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bd6a5  00000000  00000000  00147b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  002051d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ca40  00000000  00000000  0020521c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00211c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	@ (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	@ (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	@ (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	200008a0 	.word	0x200008a0
 80101bc:	00000000 	.word	0x00000000
 80101c0:	08037878 	.word	0x08037878

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	@ (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	@ (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	@ (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	200008a4 	.word	0x200008a4
 80101dc:	08037878 	.word	0x08037878

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	@ 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_ldivmod>:
 8010cb8:	b97b      	cbnz	r3, 8010cda <__aeabi_ldivmod+0x22>
 8010cba:	b972      	cbnz	r2, 8010cda <__aeabi_ldivmod+0x22>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bfbe      	ittt	lt
 8010cc0:	2000      	movlt	r0, #0
 8010cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8010cc6:	e006      	blt.n	8010cd6 <__aeabi_ldivmod+0x1e>
 8010cc8:	bf08      	it	eq
 8010cca:	2800      	cmpeq	r0, #0
 8010ccc:	bf1c      	itt	ne
 8010cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8010cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010cd6:	f000 ba1d 	b.w	8011114 <__aeabi_idiv0>
 8010cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010ce2:	2900      	cmp	r1, #0
 8010ce4:	db09      	blt.n	8010cfa <__aeabi_ldivmod+0x42>
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	db1a      	blt.n	8010d20 <__aeabi_ldivmod+0x68>
 8010cea:	f000 f897 	bl	8010e1c <__udivmoddi4>
 8010cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cf6:	b004      	add	sp, #16
 8010cf8:	4770      	bx	lr
 8010cfa:	4240      	negs	r0, r0
 8010cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	db1b      	blt.n	8010d3c <__aeabi_ldivmod+0x84>
 8010d04:	f000 f88a 	bl	8010e1c <__udivmoddi4>
 8010d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d10:	b004      	add	sp, #16
 8010d12:	4240      	negs	r0, r0
 8010d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d18:	4252      	negs	r2, r2
 8010d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d1e:	4770      	bx	lr
 8010d20:	4252      	negs	r2, r2
 8010d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d26:	f000 f879 	bl	8010e1c <__udivmoddi4>
 8010d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d32:	b004      	add	sp, #16
 8010d34:	4240      	negs	r0, r0
 8010d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3a:	4770      	bx	lr
 8010d3c:	4252      	negs	r2, r2
 8010d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d42:	f000 f86b 	bl	8010e1c <__udivmoddi4>
 8010d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d4e:	b004      	add	sp, #16
 8010d50:	4252      	negs	r2, r2
 8010d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d56:	4770      	bx	lr

08010d58 <__aeabi_uldivmod>:
 8010d58:	b953      	cbnz	r3, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5a:	b94a      	cbnz	r2, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	bf08      	it	eq
 8010d60:	2800      	cmpeq	r0, #0
 8010d62:	bf1c      	itt	ne
 8010d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8010d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010d6c:	f000 b9d2 	b.w	8011114 <__aeabi_idiv0>
 8010d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8010d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010d78:	f000 f850 	bl	8010e1c <__udivmoddi4>
 8010d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d84:	b004      	add	sp, #16
 8010d86:	4770      	bx	lr

08010d88 <__popcountsi2>:
 8010d88:	0843      	lsrs	r3, r0, #1
 8010d8a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8010d8e:	1ac0      	subs	r0, r0, r3
 8010d90:	0883      	lsrs	r3, r0, #2
 8010d92:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8010d96:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8010d9a:	4418      	add	r0, r3
 8010d9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010da0:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8010da4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010da8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010dac:	0e00      	lsrs	r0, r0, #24
 8010dae:	4770      	bx	lr

08010db0 <__aeabi_d2lz>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	2200      	movs	r2, #0
 8010db4:	2300      	movs	r3, #0
 8010db6:	4604      	mov	r4, r0
 8010db8:	460d      	mov	r5, r1
 8010dba:	f7ff fea7 	bl	8010b0c <__aeabi_dcmplt>
 8010dbe:	b928      	cbnz	r0, 8010dcc <__aeabi_d2lz+0x1c>
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc8:	f000 b80a 	b.w	8010de0 <__aeabi_d2ulz>
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8010dd2:	f000 f805 	bl	8010de0 <__aeabi_d2ulz>
 8010dd6:	4240      	negs	r0, r0
 8010dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010ddc:	bd38      	pop	{r3, r4, r5, pc}
 8010dde:	bf00      	nop

08010de0 <__aeabi_d2ulz>:
 8010de0:	b5d0      	push	{r4, r6, r7, lr}
 8010de2:	4b0c      	ldr	r3, [pc, #48]	@ (8010e14 <__aeabi_d2ulz+0x34>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	4606      	mov	r6, r0
 8010de8:	460f      	mov	r7, r1
 8010dea:	f7ff fc1d 	bl	8010628 <__aeabi_dmul>
 8010dee:	f7ff fef3 	bl	8010bd8 <__aeabi_d2uiz>
 8010df2:	4604      	mov	r4, r0
 8010df4:	f7ff fb9e 	bl	8010534 <__aeabi_ui2d>
 8010df8:	4b07      	ldr	r3, [pc, #28]	@ (8010e18 <__aeabi_d2ulz+0x38>)
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f7ff fc14 	bl	8010628 <__aeabi_dmul>
 8010e00:	4602      	mov	r2, r0
 8010e02:	460b      	mov	r3, r1
 8010e04:	4630      	mov	r0, r6
 8010e06:	4639      	mov	r1, r7
 8010e08:	f7ff fa56 	bl	80102b8 <__aeabi_dsub>
 8010e0c:	f7ff fee4 	bl	8010bd8 <__aeabi_d2uiz>
 8010e10:	4621      	mov	r1, r4
 8010e12:	bdd0      	pop	{r4, r6, r7, pc}
 8010e14:	3df00000 	.word	0x3df00000
 8010e18:	41f00000 	.word	0x41f00000

08010e1c <__udivmoddi4>:
 8010e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e20:	9d08      	ldr	r5, [sp, #32]
 8010e22:	468e      	mov	lr, r1
 8010e24:	4604      	mov	r4, r0
 8010e26:	4688      	mov	r8, r1
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d14a      	bne.n	8010ec2 <__udivmoddi4+0xa6>
 8010e2c:	428a      	cmp	r2, r1
 8010e2e:	4617      	mov	r7, r2
 8010e30:	d962      	bls.n	8010ef8 <__udivmoddi4+0xdc>
 8010e32:	fab2 f682 	clz	r6, r2
 8010e36:	b14e      	cbz	r6, 8010e4c <__udivmoddi4+0x30>
 8010e38:	f1c6 0320 	rsb	r3, r6, #32
 8010e3c:	fa01 f806 	lsl.w	r8, r1, r6
 8010e40:	fa20 f303 	lsr.w	r3, r0, r3
 8010e44:	40b7      	lsls	r7, r6
 8010e46:	ea43 0808 	orr.w	r8, r3, r8
 8010e4a:	40b4      	lsls	r4, r6
 8010e4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010e50:	fa1f fc87 	uxth.w	ip, r7
 8010e54:	fbb8 f1fe 	udiv	r1, r8, lr
 8010e58:	0c23      	lsrs	r3, r4, #16
 8010e5a:	fb0e 8811 	mls	r8, lr, r1, r8
 8010e5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8010e62:	fb01 f20c 	mul.w	r2, r1, ip
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d909      	bls.n	8010e7e <__udivmoddi4+0x62>
 8010e6a:	18fb      	adds	r3, r7, r3
 8010e6c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8010e70:	f080 80ea 	bcs.w	8011048 <__udivmoddi4+0x22c>
 8010e74:	429a      	cmp	r2, r3
 8010e76:	f240 80e7 	bls.w	8011048 <__udivmoddi4+0x22c>
 8010e7a:	3902      	subs	r1, #2
 8010e7c:	443b      	add	r3, r7
 8010e7e:	1a9a      	subs	r2, r3, r2
 8010e80:	b2a3      	uxth	r3, r4
 8010e82:	fbb2 f0fe 	udiv	r0, r2, lr
 8010e86:	fb0e 2210 	mls	r2, lr, r0, r2
 8010e8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e8e:	fb00 fc0c 	mul.w	ip, r0, ip
 8010e92:	459c      	cmp	ip, r3
 8010e94:	d909      	bls.n	8010eaa <__udivmoddi4+0x8e>
 8010e96:	18fb      	adds	r3, r7, r3
 8010e98:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8010e9c:	f080 80d6 	bcs.w	801104c <__udivmoddi4+0x230>
 8010ea0:	459c      	cmp	ip, r3
 8010ea2:	f240 80d3 	bls.w	801104c <__udivmoddi4+0x230>
 8010ea6:	443b      	add	r3, r7
 8010ea8:	3802      	subs	r0, #2
 8010eaa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8010eae:	eba3 030c 	sub.w	r3, r3, ip
 8010eb2:	2100      	movs	r1, #0
 8010eb4:	b11d      	cbz	r5, 8010ebe <__udivmoddi4+0xa2>
 8010eb6:	40f3      	lsrs	r3, r6
 8010eb8:	2200      	movs	r2, #0
 8010eba:	e9c5 3200 	strd	r3, r2, [r5]
 8010ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec2:	428b      	cmp	r3, r1
 8010ec4:	d905      	bls.n	8010ed2 <__udivmoddi4+0xb6>
 8010ec6:	b10d      	cbz	r5, 8010ecc <__udivmoddi4+0xb0>
 8010ec8:	e9c5 0100 	strd	r0, r1, [r5]
 8010ecc:	2100      	movs	r1, #0
 8010ece:	4608      	mov	r0, r1
 8010ed0:	e7f5      	b.n	8010ebe <__udivmoddi4+0xa2>
 8010ed2:	fab3 f183 	clz	r1, r3
 8010ed6:	2900      	cmp	r1, #0
 8010ed8:	d146      	bne.n	8010f68 <__udivmoddi4+0x14c>
 8010eda:	4573      	cmp	r3, lr
 8010edc:	d302      	bcc.n	8010ee4 <__udivmoddi4+0xc8>
 8010ede:	4282      	cmp	r2, r0
 8010ee0:	f200 8105 	bhi.w	80110ee <__udivmoddi4+0x2d2>
 8010ee4:	1a84      	subs	r4, r0, r2
 8010ee6:	eb6e 0203 	sbc.w	r2, lr, r3
 8010eea:	2001      	movs	r0, #1
 8010eec:	4690      	mov	r8, r2
 8010eee:	2d00      	cmp	r5, #0
 8010ef0:	d0e5      	beq.n	8010ebe <__udivmoddi4+0xa2>
 8010ef2:	e9c5 4800 	strd	r4, r8, [r5]
 8010ef6:	e7e2      	b.n	8010ebe <__udivmoddi4+0xa2>
 8010ef8:	2a00      	cmp	r2, #0
 8010efa:	f000 8090 	beq.w	801101e <__udivmoddi4+0x202>
 8010efe:	fab2 f682 	clz	r6, r2
 8010f02:	2e00      	cmp	r6, #0
 8010f04:	f040 80a4 	bne.w	8011050 <__udivmoddi4+0x234>
 8010f08:	1a8a      	subs	r2, r1, r2
 8010f0a:	0c03      	lsrs	r3, r0, #16
 8010f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010f10:	b280      	uxth	r0, r0
 8010f12:	b2bc      	uxth	r4, r7
 8010f14:	2101      	movs	r1, #1
 8010f16:	fbb2 fcfe 	udiv	ip, r2, lr
 8010f1a:	fb0e 221c 	mls	r2, lr, ip, r2
 8010f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f22:	fb04 f20c 	mul.w	r2, r4, ip
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d907      	bls.n	8010f3a <__udivmoddi4+0x11e>
 8010f2a:	18fb      	adds	r3, r7, r3
 8010f2c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8010f30:	d202      	bcs.n	8010f38 <__udivmoddi4+0x11c>
 8010f32:	429a      	cmp	r2, r3
 8010f34:	f200 80e0 	bhi.w	80110f8 <__udivmoddi4+0x2dc>
 8010f38:	46c4      	mov	ip, r8
 8010f3a:	1a9b      	subs	r3, r3, r2
 8010f3c:	fbb3 f2fe 	udiv	r2, r3, lr
 8010f40:	fb0e 3312 	mls	r3, lr, r2, r3
 8010f44:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8010f48:	fb02 f404 	mul.w	r4, r2, r4
 8010f4c:	429c      	cmp	r4, r3
 8010f4e:	d907      	bls.n	8010f60 <__udivmoddi4+0x144>
 8010f50:	18fb      	adds	r3, r7, r3
 8010f52:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8010f56:	d202      	bcs.n	8010f5e <__udivmoddi4+0x142>
 8010f58:	429c      	cmp	r4, r3
 8010f5a:	f200 80ca 	bhi.w	80110f2 <__udivmoddi4+0x2d6>
 8010f5e:	4602      	mov	r2, r0
 8010f60:	1b1b      	subs	r3, r3, r4
 8010f62:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8010f66:	e7a5      	b.n	8010eb4 <__udivmoddi4+0x98>
 8010f68:	f1c1 0620 	rsb	r6, r1, #32
 8010f6c:	408b      	lsls	r3, r1
 8010f6e:	fa22 f706 	lsr.w	r7, r2, r6
 8010f72:	431f      	orrs	r7, r3
 8010f74:	fa0e f401 	lsl.w	r4, lr, r1
 8010f78:	fa20 f306 	lsr.w	r3, r0, r6
 8010f7c:	fa2e fe06 	lsr.w	lr, lr, r6
 8010f80:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8010f84:	4323      	orrs	r3, r4
 8010f86:	fa00 f801 	lsl.w	r8, r0, r1
 8010f8a:	fa1f fc87 	uxth.w	ip, r7
 8010f8e:	fbbe f0f9 	udiv	r0, lr, r9
 8010f92:	0c1c      	lsrs	r4, r3, #16
 8010f94:	fb09 ee10 	mls	lr, r9, r0, lr
 8010f98:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8010f9c:	fb00 fe0c 	mul.w	lr, r0, ip
 8010fa0:	45a6      	cmp	lr, r4
 8010fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8010fa6:	d909      	bls.n	8010fbc <__udivmoddi4+0x1a0>
 8010fa8:	193c      	adds	r4, r7, r4
 8010faa:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8010fae:	f080 809c 	bcs.w	80110ea <__udivmoddi4+0x2ce>
 8010fb2:	45a6      	cmp	lr, r4
 8010fb4:	f240 8099 	bls.w	80110ea <__udivmoddi4+0x2ce>
 8010fb8:	3802      	subs	r0, #2
 8010fba:	443c      	add	r4, r7
 8010fbc:	eba4 040e 	sub.w	r4, r4, lr
 8010fc0:	fa1f fe83 	uxth.w	lr, r3
 8010fc4:	fbb4 f3f9 	udiv	r3, r4, r9
 8010fc8:	fb09 4413 	mls	r4, r9, r3, r4
 8010fcc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8010fd0:	fb03 fc0c 	mul.w	ip, r3, ip
 8010fd4:	45a4      	cmp	ip, r4
 8010fd6:	d908      	bls.n	8010fea <__udivmoddi4+0x1ce>
 8010fd8:	193c      	adds	r4, r7, r4
 8010fda:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8010fde:	f080 8082 	bcs.w	80110e6 <__udivmoddi4+0x2ca>
 8010fe2:	45a4      	cmp	ip, r4
 8010fe4:	d97f      	bls.n	80110e6 <__udivmoddi4+0x2ca>
 8010fe6:	3b02      	subs	r3, #2
 8010fe8:	443c      	add	r4, r7
 8010fea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8010fee:	eba4 040c 	sub.w	r4, r4, ip
 8010ff2:	fba0 ec02 	umull	lr, ip, r0, r2
 8010ff6:	4564      	cmp	r4, ip
 8010ff8:	4673      	mov	r3, lr
 8010ffa:	46e1      	mov	r9, ip
 8010ffc:	d362      	bcc.n	80110c4 <__udivmoddi4+0x2a8>
 8010ffe:	d05f      	beq.n	80110c0 <__udivmoddi4+0x2a4>
 8011000:	b15d      	cbz	r5, 801101a <__udivmoddi4+0x1fe>
 8011002:	ebb8 0203 	subs.w	r2, r8, r3
 8011006:	eb64 0409 	sbc.w	r4, r4, r9
 801100a:	fa04 f606 	lsl.w	r6, r4, r6
 801100e:	fa22 f301 	lsr.w	r3, r2, r1
 8011012:	431e      	orrs	r6, r3
 8011014:	40cc      	lsrs	r4, r1
 8011016:	e9c5 6400 	strd	r6, r4, [r5]
 801101a:	2100      	movs	r1, #0
 801101c:	e74f      	b.n	8010ebe <__udivmoddi4+0xa2>
 801101e:	fbb1 fcf2 	udiv	ip, r1, r2
 8011022:	0c01      	lsrs	r1, r0, #16
 8011024:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8011028:	b280      	uxth	r0, r0
 801102a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 801102e:	463b      	mov	r3, r7
 8011030:	4638      	mov	r0, r7
 8011032:	463c      	mov	r4, r7
 8011034:	46b8      	mov	r8, r7
 8011036:	46be      	mov	lr, r7
 8011038:	2620      	movs	r6, #32
 801103a:	fbb1 f1f7 	udiv	r1, r1, r7
 801103e:	eba2 0208 	sub.w	r2, r2, r8
 8011042:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8011046:	e766      	b.n	8010f16 <__udivmoddi4+0xfa>
 8011048:	4601      	mov	r1, r0
 801104a:	e718      	b.n	8010e7e <__udivmoddi4+0x62>
 801104c:	4610      	mov	r0, r2
 801104e:	e72c      	b.n	8010eaa <__udivmoddi4+0x8e>
 8011050:	f1c6 0220 	rsb	r2, r6, #32
 8011054:	fa2e f302 	lsr.w	r3, lr, r2
 8011058:	40b7      	lsls	r7, r6
 801105a:	40b1      	lsls	r1, r6
 801105c:	fa20 f202 	lsr.w	r2, r0, r2
 8011060:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8011064:	430a      	orrs	r2, r1
 8011066:	fbb3 f8fe 	udiv	r8, r3, lr
 801106a:	b2bc      	uxth	r4, r7
 801106c:	fb0e 3318 	mls	r3, lr, r8, r3
 8011070:	0c11      	lsrs	r1, r2, #16
 8011072:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8011076:	fb08 f904 	mul.w	r9, r8, r4
 801107a:	40b0      	lsls	r0, r6
 801107c:	4589      	cmp	r9, r1
 801107e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8011082:	b280      	uxth	r0, r0
 8011084:	d93e      	bls.n	8011104 <__udivmoddi4+0x2e8>
 8011086:	1879      	adds	r1, r7, r1
 8011088:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 801108c:	d201      	bcs.n	8011092 <__udivmoddi4+0x276>
 801108e:	4589      	cmp	r9, r1
 8011090:	d81f      	bhi.n	80110d2 <__udivmoddi4+0x2b6>
 8011092:	eba1 0109 	sub.w	r1, r1, r9
 8011096:	fbb1 f9fe 	udiv	r9, r1, lr
 801109a:	fb09 f804 	mul.w	r8, r9, r4
 801109e:	fb0e 1119 	mls	r1, lr, r9, r1
 80110a2:	b292      	uxth	r2, r2
 80110a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80110a8:	4542      	cmp	r2, r8
 80110aa:	d229      	bcs.n	8011100 <__udivmoddi4+0x2e4>
 80110ac:	18ba      	adds	r2, r7, r2
 80110ae:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80110b2:	d2c4      	bcs.n	801103e <__udivmoddi4+0x222>
 80110b4:	4542      	cmp	r2, r8
 80110b6:	d2c2      	bcs.n	801103e <__udivmoddi4+0x222>
 80110b8:	f1a9 0102 	sub.w	r1, r9, #2
 80110bc:	443a      	add	r2, r7
 80110be:	e7be      	b.n	801103e <__udivmoddi4+0x222>
 80110c0:	45f0      	cmp	r8, lr
 80110c2:	d29d      	bcs.n	8011000 <__udivmoddi4+0x1e4>
 80110c4:	ebbe 0302 	subs.w	r3, lr, r2
 80110c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80110cc:	3801      	subs	r0, #1
 80110ce:	46e1      	mov	r9, ip
 80110d0:	e796      	b.n	8011000 <__udivmoddi4+0x1e4>
 80110d2:	eba7 0909 	sub.w	r9, r7, r9
 80110d6:	4449      	add	r1, r9
 80110d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80110dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80110e0:	fb09 f804 	mul.w	r8, r9, r4
 80110e4:	e7db      	b.n	801109e <__udivmoddi4+0x282>
 80110e6:	4673      	mov	r3, lr
 80110e8:	e77f      	b.n	8010fea <__udivmoddi4+0x1ce>
 80110ea:	4650      	mov	r0, sl
 80110ec:	e766      	b.n	8010fbc <__udivmoddi4+0x1a0>
 80110ee:	4608      	mov	r0, r1
 80110f0:	e6fd      	b.n	8010eee <__udivmoddi4+0xd2>
 80110f2:	443b      	add	r3, r7
 80110f4:	3a02      	subs	r2, #2
 80110f6:	e733      	b.n	8010f60 <__udivmoddi4+0x144>
 80110f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80110fc:	443b      	add	r3, r7
 80110fe:	e71c      	b.n	8010f3a <__udivmoddi4+0x11e>
 8011100:	4649      	mov	r1, r9
 8011102:	e79c      	b.n	801103e <__udivmoddi4+0x222>
 8011104:	eba1 0109 	sub.w	r1, r1, r9
 8011108:	46c4      	mov	ip, r8
 801110a:	fbb1 f9fe 	udiv	r9, r1, lr
 801110e:	fb09 f804 	mul.w	r8, r9, r4
 8011112:	e7c4      	b.n	801109e <__udivmoddi4+0x282>

08011114 <__aeabi_idiv0>:
 8011114:	4770      	bx	lr
 8011116:	bf00      	nop

08011118 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8011118:	b500      	push	{lr}
 801111a:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801111c:	2300      	movs	r3, #0
 801111e:	9300      	str	r3, [sp, #0]
 8011120:	9301      	str	r3, [sp, #4]
 8011122:	9302      	str	r3, [sp, #8]
 8011124:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8011126:	4815      	ldr	r0, [pc, #84]	@ (801117c <MX_ADC1_Init+0x64>)
 8011128:	4a15      	ldr	r2, [pc, #84]	@ (8011180 <MX_ADC1_Init+0x68>)
 801112a:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 801112c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8011130:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8011132:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8011134:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8011136:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8011138:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801113c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801113e:	4a11      	ldr	r2, [pc, #68]	@ (8011184 <MX_ADC1_Init+0x6c>)
 8011140:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8011142:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8011144:	2201      	movs	r2, #1
 8011146:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8011148:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801114c:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801114e:	f005 ff83 	bl	8017058 <HAL_ADC_Init>
 8011152:	b968      	cbnz	r0, 8011170 <MX_ADC1_Init+0x58>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8011154:	2312      	movs	r3, #18
 8011156:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8011158:	2301      	movs	r3, #1
 801115a:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 801115c:	2300      	movs	r3, #0
 801115e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8011160:	4669      	mov	r1, sp
 8011162:	4806      	ldr	r0, [pc, #24]	@ (801117c <MX_ADC1_Init+0x64>)
 8011164:	f006 f8a8 	bl	80172b8 <HAL_ADC_ConfigChannel>
 8011168:	b928      	cbnz	r0, 8011176 <MX_ADC1_Init+0x5e>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 801116a:	b005      	add	sp, #20
 801116c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8011170:	f001 fa14 	bl	801259c <Error_Handler>
 8011174:	e7ee      	b.n	8011154 <MX_ADC1_Init+0x3c>
    Error_Handler();
 8011176:	f001 fa11 	bl	801259c <Error_Handler>
}
 801117a:	e7f6      	b.n	801116a <MX_ADC1_Init+0x52>
 801117c:	200008bc 	.word	0x200008bc
 8011180:	40012000 	.word	0x40012000
 8011184:	0f000001 	.word	0x0f000001

08011188 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC1)
 8011188:	6802      	ldr	r2, [r0, #0]
 801118a:	4b09      	ldr	r3, [pc, #36]	@ (80111b0 <HAL_ADC_MspInit+0x28>)
 801118c:	429a      	cmp	r2, r3
 801118e:	d000      	beq.n	8011192 <HAL_ADC_MspInit+0xa>
 8011190:	4770      	bx	lr
{
 8011192:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8011194:	2300      	movs	r3, #0
 8011196:	9301      	str	r3, [sp, #4]
 8011198:	4b06      	ldr	r3, [pc, #24]	@ (80111b4 <HAL_ADC_MspInit+0x2c>)
 801119a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801119c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80111a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80111a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80111a8:	9301      	str	r3, [sp, #4]
 80111aa:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80111ac:	b002      	add	sp, #8
 80111ae:	4770      	bx	lr
 80111b0:	40012000 	.word	0x40012000
 80111b4:	40023800 	.word	0x40023800

080111b8 <Read_VDD>:
/* USER CODE BEGIN 1 */
// VREFINT calibration value address from system memory (typical value is 1.21V at 3.3V VDD)

// Function to measure VREFINT and calculate actual VDD
float Read_VDD(void)
{
 80111b8:	b510      	push	{r4, lr}
 80111ba:	ed2d 8b02 	vpush	{d8}
 80111be:	b084      	sub	sp, #16
    uint32_t raw_value = 0;
    float vrefint_cal = (float)(*VREFINT_CAL_ADDR);  // Read calibration value from system memory
 80111c0:	4b1c      	ldr	r3, [pc, #112]	@ (8011234 <Read_VDD+0x7c>)
 80111c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80111c4:	ee07 3a90 	vmov	s15, r3
 80111c8:	eeb8 8a67 	vcvt.f32.u32	s16, s15

    ADC_ChannelConfTypeDef sConfig = {0};
 80111cc:	2300      	movs	r3, #0
 80111ce:	9300      	str	r3, [sp, #0]
 80111d0:	9301      	str	r3, [sp, #4]
 80111d2:	9302      	str	r3, [sp, #8]
 80111d4:	9303      	str	r3, [sp, #12]

    // Configure ADC channel to VREFINT
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 80111d6:	2311      	movs	r3, #17
 80111d8:	9300      	str	r3, [sp, #0]
    sConfig.Rank = 1;
 80111da:	2301      	movs	r3, #1
 80111dc:	9301      	str	r3, [sp, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;  // Longer sampling time for better accuracy
 80111de:	2307      	movs	r3, #7
 80111e0:	9302      	str	r3, [sp, #8]
    sConfig.Offset = 0;

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80111e2:	4669      	mov	r1, sp
 80111e4:	4814      	ldr	r0, [pc, #80]	@ (8011238 <Read_VDD+0x80>)
 80111e6:	f006 f867 	bl	80172b8 <HAL_ADC_ConfigChannel>
 80111ea:	b128      	cbz	r0, 80111f8 <Read_VDD+0x40>
    {
        // Failed to configure VREFINT channel
        return -1.0;
 80111ec:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0

    // Calculate actual VDD based on calibration value and raw ADC reading
    float vdd = 3.3f * (vrefint_cal / raw_value);

    return vdd;
}
 80111f0:	b004      	add	sp, #16
 80111f2:	ecbd 8b02 	vpop	{d8}
 80111f6:	bd10      	pop	{r4, pc}
    HAL_ADC_Start(&hadc1);
 80111f8:	4c0f      	ldr	r4, [pc, #60]	@ (8011238 <Read_VDD+0x80>)
 80111fa:	4620      	mov	r0, r4
 80111fc:	f005 ff58 	bl	80170b0 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8011200:	210a      	movs	r1, #10
 8011202:	4620      	mov	r0, r4
 8011204:	f005 fff8 	bl	80171f8 <HAL_ADC_PollForConversion>
 8011208:	b168      	cbz	r0, 8011226 <Read_VDD+0x6e>
    uint32_t raw_value = 0;
 801120a:	eddf 8a0c 	vldr	s17, [pc, #48]	@ 801123c <Read_VDD+0x84>
    HAL_ADC_Stop(&hadc1);
 801120e:	480a      	ldr	r0, [pc, #40]	@ (8011238 <Read_VDD+0x80>)
 8011210:	f005 ffd2 	bl	80171b8 <HAL_ADC_Stop>
    float vdd = 3.3f * (vrefint_cal / raw_value);
 8011214:	eef8 8a68 	vcvt.f32.u32	s17, s17
 8011218:	ee88 0a28 	vdiv.f32	s0, s16, s17
 801121c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011240 <Read_VDD+0x88>
 8011220:	ee20 0a27 	vmul.f32	s0, s0, s15
    return vdd;
 8011224:	e7e4      	b.n	80111f0 <Read_VDD+0x38>
        raw_value = HAL_ADC_GetValue(&hadc1);  // Read raw ADC value for VREFINT
 8011226:	4620      	mov	r0, r4
 8011228:	f006 f842 	bl	80172b0 <HAL_ADC_GetValue>
 801122c:	ee08 0a90 	vmov	s17, r0
 8011230:	e7ed      	b.n	801120e <Read_VDD+0x56>
 8011232:	bf00      	nop
 8011234:	1fff7a00 	.word	0x1fff7a00
 8011238:	200008bc 	.word	0x200008bc
 801123c:	00000000 	.word	0x00000000
 8011240:	40533333 	.word	0x40533333

08011244 <Read_VBAT>:

// Function to measure VBAT voltage with VDD compensation from VREFINT
float Read_VBAT(void)
{
 8011244:	b510      	push	{r4, lr}
 8011246:	ed2d 8b02 	vpush	{d8}
 801124a:	b084      	sub	sp, #16
    uint32_t raw_value = 0;
    float vbat_voltage = 0.0;

    ADC_ChannelConfTypeDef sConfig = {0};
 801124c:	2300      	movs	r3, #0
 801124e:	9300      	str	r3, [sp, #0]
 8011250:	9301      	str	r3, [sp, #4]
 8011252:	9302      	str	r3, [sp, #8]
 8011254:	9303      	str	r3, [sp, #12]

    // 1. Get actual VDD using VREFINT measurement
    float vdd = Read_VDD();
 8011256:	f7ff ffaf 	bl	80111b8 <Read_VDD>
    if (vdd < 0)
 801125a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801125e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011262:	d432      	bmi.n	80112ca <Read_VBAT+0x86>
 8011264:	eeb0 8a40 	vmov.f32	s16, s0
        // Failed to get valid VDD measurement
        return -1.0;
    }

    // 2. Configure ADC channel to VBAT (Channel 18)
    sConfig.Channel = ADC_CHANNEL_VBAT;
 8011268:	2312      	movs	r3, #18
 801126a:	9300      	str	r3, [sp, #0]
    sConfig.Rank = 1;
 801126c:	2301      	movs	r3, #1
 801126e:	9301      	str	r3, [sp, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;  // Longer sampling time for better accuracy
 8011270:	2307      	movs	r3, #7
 8011272:	9302      	str	r3, [sp, #8]
    sConfig.Offset = 0;
 8011274:	2300      	movs	r3, #0
 8011276:	9303      	str	r3, [sp, #12]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8011278:	4669      	mov	r1, sp
 801127a:	4817      	ldr	r0, [pc, #92]	@ (80112d8 <Read_VBAT+0x94>)
 801127c:	f006 f81c 	bl	80172b8 <HAL_ADC_ConfigChannel>
 8011280:	b110      	cbz	r0, 8011288 <Read_VBAT+0x44>
    {
        // Failed to configure VBAT channel
        return -1.0;
 8011282:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8011286:	e022      	b.n	80112ce <Read_VBAT+0x8a>
    }

    // 3. Start ADC conversion and get raw VBAT value
    HAL_ADC_Start(&hadc1);
 8011288:	4c13      	ldr	r4, [pc, #76]	@ (80112d8 <Read_VBAT+0x94>)
 801128a:	4620      	mov	r0, r4
 801128c:	f005 ff10 	bl	80170b0 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8011290:	210a      	movs	r1, #10
 8011292:	4620      	mov	r0, r4
 8011294:	f005 ffb0 	bl	80171f8 <HAL_ADC_PollForConversion>
 8011298:	b188      	cbz	r0, 80112be <Read_VBAT+0x7a>
    uint32_t raw_value = 0;
 801129a:	eddf 8a10 	vldr	s17, [pc, #64]	@ 80112dc <Read_VBAT+0x98>
    {
        raw_value = HAL_ADC_GetValue(&hadc1);  // Read raw ADC value for VBAT
    }
    HAL_ADC_Stop(&hadc1);
 801129e:	480e      	ldr	r0, [pc, #56]	@ (80112d8 <Read_VBAT+0x94>)
 80112a0:	f005 ff8a 	bl	80171b8 <HAL_ADC_Stop>

    // 4. Calculate VBAT voltage
    // The VBAT channel has an internal divider by 4
    float adc_resolution = 4095.0f;
    vbat_voltage = ((raw_value / adc_resolution) * vdd) * 4.0f;
 80112a4:	eef8 7a68 	vcvt.f32.u32	s15, s17
 80112a8:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80112e0 <Read_VBAT+0x9c>
 80112ac:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80112b0:	ee20 0a08 	vmul.f32	s0, s0, s16
 80112b4:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 80112b8:	ee20 0a27 	vmul.f32	s0, s0, s15

    return vbat_voltage;
 80112bc:	e007      	b.n	80112ce <Read_VBAT+0x8a>
        raw_value = HAL_ADC_GetValue(&hadc1);  // Read raw ADC value for VBAT
 80112be:	4620      	mov	r0, r4
 80112c0:	f005 fff6 	bl	80172b0 <HAL_ADC_GetValue>
 80112c4:	ee08 0a90 	vmov	s17, r0
 80112c8:	e7e9      	b.n	801129e <Read_VBAT+0x5a>
        return -1.0;
 80112ca:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
}
 80112ce:	b004      	add	sp, #16
 80112d0:	ecbd 8b02 	vpop	{d8}
 80112d4:	bd10      	pop	{r4, pc}
 80112d6:	bf00      	nop
 80112d8:	200008bc 	.word	0x200008bc
 80112dc:	00000000 	.word	0x00000000
 80112e0:	457ff000 	.word	0x457ff000

080112e4 <my_custom_log_function>:
eMBErrorCode eMBRegHoldingCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)
{
	return MB_ENOREG;
}

void my_custom_log_function(char ch, void *param) {
 80112e4:	b508      	push	{r3, lr}
    static char buffer[256];
    static size_t length = 0;

    buffer[length++] = ch;
 80112e6:	4909      	ldr	r1, [pc, #36]	@ (801130c <my_custom_log_function+0x28>)
 80112e8:	680b      	ldr	r3, [r1, #0]
 80112ea:	1c5a      	adds	r2, r3, #1
 80112ec:	600a      	str	r2, [r1, #0]
 80112ee:	4908      	ldr	r1, [pc, #32]	@ (8011310 <my_custom_log_function+0x2c>)
 80112f0:	54c8      	strb	r0, [r1, r3]
    if (ch == '\n' || length >= sizeof(buffer)) {
 80112f2:	280a      	cmp	r0, #10
 80112f4:	d001      	beq.n	80112fa <my_custom_log_function+0x16>
 80112f6:	2aff      	cmp	r2, #255	@ 0xff
 80112f8:	d907      	bls.n	801130a <my_custom_log_function+0x26>
        // Call your custom logging function here
        logging(L_INFO, "mg %.*s", (int) length, buffer);
 80112fa:	4b05      	ldr	r3, [pc, #20]	@ (8011310 <my_custom_log_function+0x2c>)
 80112fc:	4905      	ldr	r1, [pc, #20]	@ (8011314 <my_custom_log_function+0x30>)
 80112fe:	2001      	movs	r0, #1
 8011300:	f001 f8a2 	bl	8012448 <logging>
        length = 0;
 8011304:	4b01      	ldr	r3, [pc, #4]	@ (801130c <my_custom_log_function+0x28>)
 8011306:	2200      	movs	r2, #0
 8011308:	601a      	str	r2, [r3, #0]
    }
}
 801130a:	bd08      	pop	{r3, pc}
 801130c:	20000a04 	.word	0x20000a04
 8011310:	20000904 	.word	0x20000904
 8011314:	08037b0c 	.word	0x08037b0c

08011318 <EthBegin>:
void EthBegin(void * param){
 8011318:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 801131a:	2200      	movs	r2, #0
 801131c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011320:	4801      	ldr	r0, [pc, #4]	@ (8011328 <EthBegin+0x10>)
 8011322:	f006 fa90 	bl	8017846 <HAL_GPIO_WritePin>
}
 8011326:	bd08      	pop	{r3, pc}
 8011328:	40020400 	.word	0x40020400

0801132c <EthEnd>:
void EthEnd(void * param){
 801132c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 801132e:	2201      	movs	r2, #1
 8011330:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011334:	4801      	ldr	r0, [pc, #4]	@ (801133c <EthEnd+0x10>)
 8011336:	f006 fa86 	bl	8017846 <HAL_GPIO_WritePin>
}
 801133a:	bd08      	pop	{r3, pc}
 801133c:	40020400 	.word	0x40020400

08011340 <FlashBegin>:
void FlashBegin(void){
 8011340:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8011342:	2200      	movs	r2, #0
 8011344:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011348:	4801      	ldr	r0, [pc, #4]	@ (8011350 <FlashBegin+0x10>)
 801134a:	f006 fa7c 	bl	8017846 <HAL_GPIO_WritePin>
}
 801134e:	bd08      	pop	{r3, pc}
 8011350:	40020000 	.word	0x40020000

08011354 <FlashEnd>:
void FlashEnd(void){
 8011354:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8011356:	2201      	movs	r2, #1
 8011358:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801135c:	4801      	ldr	r0, [pc, #4]	@ (8011364 <FlashEnd+0x10>)
 801135e:	f006 fa72 	bl	8017846 <HAL_GPIO_WritePin>
}
 8011362:	bd08      	pop	{r3, pc}
 8011364:	40020000 	.word	0x40020000

08011368 <StartIOTask>:
{
 8011368:	b510      	push	{r4, lr}
 801136a:	b08e      	sub	sp, #56	@ 0x38
	uint16_t pinCoils[] = {coil3_Pin, coil2_Pin,coil1_Pin};
 801136c:	4b4a      	ldr	r3, [pc, #296]	@ (8011498 <StartIOTask+0x130>)
 801136e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011372:	900c      	str	r0, [sp, #48]	@ 0x30
 8011374:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
	GPIO_TypeDef* portCoils[] = {coil3_GPIO_Port, coil2_GPIO_Port, coil1_GPIO_Port};
 8011378:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 801137c:	f103 0408 	add.w	r4, r3, #8
 8011380:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011384:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	uint16_t pinInputs[] = {input3_Pin, input2_Pin, input1_Pin };
 8011388:	3314      	adds	r3, #20
 801138a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801138e:	9007      	str	r0, [sp, #28]
 8011390:	f8ad 1020 	strh.w	r1, [sp, #32]
	GPIO_TypeDef* portInputs[] = {input3_GPIO_Port, input2_GPIO_Port, input1_GPIO_Port};
 8011394:	ab04      	add	r3, sp, #16
 8011396:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801139a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if ((sizeof(pinCoils) / sizeof(pinCoils[0])) != OUTPUTS_COUNT ||
 801139e:	e072      	b.n	8011486 <StartIOTask+0x11e>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 80113a0:	2300      	movs	r3, #0
 80113a2:	461a      	mov	r2, r3
 80113a4:	a901      	add	r1, sp, #4
 80113a6:	483d      	ldr	r0, [pc, #244]	@ (801149c <StartIOTask+0x134>)
 80113a8:	6800      	ldr	r0, [r0, #0]
 80113aa:	f008 fd6a 	bl	8019e82 <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 80113ae:	2400      	movs	r4, #0
 80113b0:	e00e      	b.n	80113d0 <StartIOTask+0x68>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 80113b2:	2200      	movs	r2, #0
 80113b4:	ab0e      	add	r3, sp, #56	@ 0x38
 80113b6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80113ba:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 80113be:	ab0e      	add	r3, sp, #56	@ 0x38
 80113c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80113c4:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80113c8:	f006 fa3d 	bl	8017846 <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 80113cc:	3401      	adds	r4, #1
 80113ce:	b2e4      	uxtb	r4, r4
 80113d0:	2c02      	cmp	r4, #2
 80113d2:	d85e      	bhi.n	8011492 <StartIOTask+0x12a>
		     if (pinOutputs_w[i]) {
 80113d4:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80113d8:	446b      	add	r3, sp
 80113da:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d0e7      	beq.n	80113b2 <StartIOTask+0x4a>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 80113e2:	2201      	movs	r2, #1
 80113e4:	ab0e      	add	r3, sp, #56	@ 0x38
 80113e6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80113ea:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 80113ee:	ab0e      	add	r3, sp, #56	@ 0x38
 80113f0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80113f4:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80113f8:	f006 fa25 	bl	8017846 <HAL_GPIO_WritePin>
 80113fc:	e7e6      	b.n	80113cc <StartIOTask+0x64>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 80113fe:	ab0e      	add	r3, sp, #56	@ 0x38
 8011400:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8011404:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011408:	f832 1c08 	ldrh.w	r1, [r2, #-8]
 801140c:	f853 0c14 	ldr.w	r0, [r3, #-20]
 8011410:	f006 fa12 	bl	8017838 <HAL_GPIO_ReadPin>
 8011414:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 8011418:	446b      	add	r3, sp
 801141a:	f803 0c30 	strb.w	r0, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 801141e:	3401      	adds	r4, #1
 8011420:	b2e4      	uxtb	r4, r4
 8011422:	2c02      	cmp	r4, #2
 8011424:	d9eb      	bls.n	80113fe <StartIOTask+0x96>
	osMessageQueueReset(outputReadQHandle);
 8011426:	4c1e      	ldr	r4, [pc, #120]	@ (80114a0 <StartIOTask+0x138>)
 8011428:	6820      	ldr	r0, [r4, #0]
 801142a:	f008 fd78 	bl	8019f1e <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 801142e:	2300      	movs	r3, #0
 8011430:	461a      	mov	r2, r3
 8011432:	a902      	add	r1, sp, #8
 8011434:	6820      	ldr	r0, [r4, #0]
 8011436:	f008 fce2 	bl	8019dfe <osMessageQueuePut>
	for (i = 0; i < INPUTS_COUNT; i++) {
 801143a:	2400      	movs	r4, #0
 801143c:	e014      	b.n	8011468 <StartIOTask+0x100>
		pinInputs_r[i] = (uint8_t)(!HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]));
 801143e:	ab0e      	add	r3, sp, #56	@ 0x38
 8011440:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8011444:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011448:	f832 1c1c 	ldrh.w	r1, [r2, #-28]
 801144c:	f853 0c28 	ldr.w	r0, [r3, #-40]
 8011450:	f006 f9f2 	bl	8017838 <HAL_GPIO_ReadPin>
 8011454:	fab0 f080 	clz	r0, r0
 8011458:	0940      	lsrs	r0, r0, #5
 801145a:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801145e:	446b      	add	r3, sp
 8011460:	f803 0c2c 	strb.w	r0, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 8011464:	3401      	adds	r4, #1
 8011466:	b2e4      	uxtb	r4, r4
 8011468:	2c02      	cmp	r4, #2
 801146a:	d9e8      	bls.n	801143e <StartIOTask+0xd6>
	osMessageQueueReset(inputReadQHandle);
 801146c:	4c0d      	ldr	r4, [pc, #52]	@ (80114a4 <StartIOTask+0x13c>)
 801146e:	6820      	ldr	r0, [r4, #0]
 8011470:	f008 fd55 	bl	8019f1e <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 8011474:	2300      	movs	r3, #0
 8011476:	461a      	mov	r2, r3
 8011478:	a903      	add	r1, sp, #12
 801147a:	6820      	ldr	r0, [r4, #0]
 801147c:	f008 fcbf 	bl	8019dfe <osMessageQueuePut>
    osDelay(1);
 8011480:	2001      	movs	r0, #1
 8011482:	f008 fbc2 	bl	8019c0a <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 8011486:	4b05      	ldr	r3, [pc, #20]	@ (801149c <StartIOTask+0x134>)
 8011488:	6818      	ldr	r0, [r3, #0]
 801148a:	f008 fd3b 	bl	8019f04 <osMessageQueueGetCount>
 801148e:	2800      	cmp	r0, #0
 8011490:	d186      	bne.n	80113a0 <StartIOTask+0x38>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011492:	2400      	movs	r4, #0
 8011494:	e7c5      	b.n	8011422 <StartIOTask+0xba>
 8011496:	bf00      	nop
 8011498:	08037890 	.word	0x08037890
 801149c:	20000a20 	.word	0x20000a20
 80114a0:	20000a24 	.word	0x20000a24
 80114a4:	20000a28 	.word	0x20000a28

080114a8 <add_log_mess_to_q>:
void add_log_mess_to_q(struct log_message mess){
 80114a8:	b084      	sub	sp, #16
 80114aa:	b508      	push	{r3, lr}
 80114ac:	f10d 0c08 	add.w	ip, sp, #8
 80114b0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	osMessageQueuePut(loggingQHandle,  &mess, 0, 0);
 80114b4:	2300      	movs	r3, #0
 80114b6:	461a      	mov	r2, r3
 80114b8:	4661      	mov	r1, ip
 80114ba:	4804      	ldr	r0, [pc, #16]	@ (80114cc <add_log_mess_to_q+0x24>)
 80114bc:	6800      	ldr	r0, [r0, #0]
 80114be:	f008 fc9e 	bl	8019dfe <osMessageQueuePut>
}
 80114c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80114c6:	b004      	add	sp, #16
 80114c8:	4770      	bx	lr
 80114ca:	bf00      	nop
 80114cc:	20000a18 	.word	0x20000a18

080114d0 <StartSettingsTask>:
{
 80114d0:	b570      	push	{r4, r5, r6, lr}
 80114d2:	b0ba      	sub	sp, #232	@ 0xe8
	size_t  f_size = 0;
 80114d4:	2300      	movs	r3, #0
 80114d6:	9339      	str	r3, [sp, #228]	@ 0xe4
  SPI_flash_reg_cb(FlashBegin, FlashEnd, FlashSPIrecvBuff, FlashSPIsendByte);
 80114d8:	4b7e      	ldr	r3, [pc, #504]	@ (80116d4 <StartSettingsTask+0x204>)
 80114da:	4a7f      	ldr	r2, [pc, #508]	@ (80116d8 <StartSettingsTask+0x208>)
 80114dc:	497f      	ldr	r1, [pc, #508]	@ (80116dc <StartSettingsTask+0x20c>)
 80114de:	4880      	ldr	r0, [pc, #512]	@ (80116e0 <StartSettingsTask+0x210>)
 80114e0:	f005 fa62 	bl	80169a8 <SPI_flash_reg_cb>
  if (lfs_fs_ll_init(FS_Lock, FS_Unlock) < 0){
 80114e4:	497f      	ldr	r1, [pc, #508]	@ (80116e4 <StartSettingsTask+0x214>)
 80114e6:	4880      	ldr	r0, [pc, #512]	@ (80116e8 <StartSettingsTask+0x218>)
 80114e8:	f00a ffcc 	bl	801c484 <lfs_fs_ll_init>
 80114ec:	2800      	cmp	r0, #0
 80114ee:	db3e      	blt.n	801156e <StartSettingsTask+0x9e>
  mg_fs_lfs_mkdir("/web");
 80114f0:	487e      	ldr	r0, [pc, #504]	@ (80116ec <StartSettingsTask+0x21c>)
 80114f2:	f00a ffb1 	bl	801c458 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 80114f6:	4c7e      	ldr	r4, [pc, #504]	@ (80116f0 <StartSettingsTask+0x220>)
 80114f8:	4620      	mov	r0, r4
 80114fa:	f00a ffa1 	bl	801c440 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 80114fe:	487d      	ldr	r0, [pc, #500]	@ (80116f4 <StartSettingsTask+0x224>)
 8011500:	f00a ff9e 	bl	801c440 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 8011504:	4620      	mov	r0, r4
 8011506:	f00a ffa7 	bl	801c458 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 801150a:	487b      	ldr	r0, [pc, #492]	@ (80116f8 <StartSettingsTask+0x228>)
 801150c:	f00a ffa4 	bl	801c458 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/certs");
 8011510:	487a      	ldr	r0, [pc, #488]	@ (80116fc <StartSettingsTask+0x22c>)
 8011512:	f00a ffa1 	bl	801c458 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/log");
 8011516:	487a      	ldr	r0, [pc, #488]	@ (8011700 <StartSettingsTask+0x230>)
 8011518:	f00a ff9e 	bl	801c458 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/auth");
 801151c:	4879      	ldr	r0, [pc, #484]	@ (8011704 <StartSettingsTask+0x234>)
 801151e:	f00a ff9b 	bl	801c458 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/smart"); //flash usage info
 8011522:	4879      	ldr	r0, [pc, #484]	@ (8011708 <StartSettingsTask+0x238>)
 8011524:	f00a ff98 	bl	801c458 <mg_fs_lfs_mkdir>
  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 8011528:	2200      	movs	r2, #0
 801152a:	a939      	add	r1, sp, #228	@ 0xe4
 801152c:	4877      	ldr	r0, [pc, #476]	@ (801170c <StartSettingsTask+0x23c>)
 801152e:	f00a fedb 	bl	801c2e8 <mg_fs_lfs_status>
 8011532:	b330      	cbz	r0, 8011582 <StartSettingsTask+0xb2>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 8011534:	2101      	movs	r1, #1
 8011536:	4875      	ldr	r0, [pc, #468]	@ (801170c <StartSettingsTask+0x23c>)
 8011538:	f00a ff14 	bl	801c364 <mg_fs_lfs_open>
 801153c:	4604      	mov	r4, r0
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 801153e:	22c6      	movs	r2, #198	@ 0xc6
 8011540:	a907      	add	r1, sp, #28
 8011542:	f00a ff3f 	bl	801c3c4 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 8011546:	4620      	mov	r0, r4
 8011548:	f00a ff30 	bl	801c3ac <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 801154c:	2200      	movs	r2, #0
 801154e:	f88d 201c 	strb.w	r2, [sp, #28]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011552:	2302      	movs	r3, #2
 8011554:	a907      	add	r1, sp, #28
 8011556:	486e      	ldr	r0, [pc, #440]	@ (8011710 <StartSettingsTask+0x240>)
 8011558:	6800      	ldr	r0, [r0, #0]
 801155a:	f008 feb7 	bl	801a2cc <xQueueGenericSend>
  if (mg_fs_lfs_status(WEB_USERS_FILE, &f_size, NULL) == 0){//file not found
 801155e:	2200      	movs	r2, #0
 8011560:	a939      	add	r1, sp, #228	@ 0xe4
 8011562:	486c      	ldr	r0, [pc, #432]	@ (8011714 <StartSettingsTask+0x244>)
 8011564:	f00a fec0 	bl	801c2e8 <mg_fs_lfs_status>
 8011568:	b1c0      	cbz	r0, 801159c <StartSettingsTask+0xcc>
{
 801156a:	2400      	movs	r4, #0
 801156c:	e089      	b.n	8011682 <StartSettingsTask+0x1b2>
	  flash_not_connect_flag = 1; //indicate that flash is not found
 801156e:	4b6a      	ldr	r3, [pc, #424]	@ (8011718 <StartSettingsTask+0x248>)
 8011570:	2201      	movs	r2, #1
 8011572:	701a      	strb	r2, [r3, #0]
	  osDelay(3000);
 8011574:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011578:	f008 fb47 	bl	8019c0a <osDelay>
	  HAL_NVIC_SystemReset();
 801157c:	f005 ffec 	bl	8017558 <HAL_NVIC_SystemReset>
 8011580:	e7b6      	b.n	80114f0 <StartSettingsTask+0x20>
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 8011582:	22c6      	movs	r2, #198	@ 0xc6
 8011584:	2100      	movs	r1, #0
 8011586:	a807      	add	r0, sp, #28
 8011588:	f01b f93a 	bl	802c800 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 801158c:	2302      	movs	r3, #2
 801158e:	2200      	movs	r2, #0
 8011590:	a907      	add	r1, sp, #28
 8011592:	485f      	ldr	r0, [pc, #380]	@ (8011710 <StartSettingsTask+0x240>)
 8011594:	6800      	ldr	r0, [r0, #0]
 8011596:	f008 fe99 	bl	801a2cc <xQueueGenericSend>
 801159a:	e7e0      	b.n	801155e <StartSettingsTask+0x8e>
	  web_users = (users_list_t *)malloc(user_list_size * sizeof(users_list_t));
 801159c:	f240 609a 	movw	r0, #1690	@ 0x69a
 80115a0:	f00a fd3a 	bl	801c018 <pvPortMalloc>
	  if (web_users == NULL) {
 80115a4:	4604      	mov	r4, r0
 80115a6:	b390      	cbz	r0, 801160e <StartSettingsTask+0x13e>
		  logging(L_INFO, "Initialize default login pass for web (admin:admin)'");
 80115a8:	495c      	ldr	r1, [pc, #368]	@ (801171c <StartSettingsTask+0x24c>)
 80115aa:	2001      	movs	r0, #1
 80115ac:	f000 ff4c 	bl	8012448 <logging>
		  strcpy(web_users[0].user, WEB_ADMIN_DEFAULT);
 80115b0:	4b5b      	ldr	r3, [pc, #364]	@ (8011720 <StartSettingsTask+0x250>)
 80115b2:	6818      	ldr	r0, [r3, #0]
 80115b4:	6020      	str	r0, [r4, #0]
 80115b6:	889b      	ldrh	r3, [r3, #4]
 80115b8:	80a3      	strh	r3, [r4, #4]
		  unsigned char pass_digest[] = WEB_ADMIN_PASS_DIGEST;
 80115ba:	ad01      	add	r5, sp, #4
 80115bc:	4e59      	ldr	r6, [pc, #356]	@ (8011724 <StartSettingsTask+0x254>)
 80115be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80115c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80115c2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80115c6:	f845 0b04 	str.w	r0, [r5], #4
 80115ca:	7029      	strb	r1, [r5, #0]
		  memcpy(web_users[0].pass_digest, pass_digest, sizeof(pass_digest));
 80115cc:	ad01      	add	r5, sp, #4
 80115ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80115d0:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 80115d4:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 80115d8:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 80115dc:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 80115e0:	6828      	ldr	r0, [r5, #0]
 80115e2:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
 80115e6:	792b      	ldrb	r3, [r5, #4]
 80115e8:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
		  f_pointer = mg_fs_lfs_open(WEB_USERS_FILE, MG_FS_WRITE);
 80115ec:	2102      	movs	r1, #2
 80115ee:	4849      	ldr	r0, [pc, #292]	@ (8011714 <StartSettingsTask+0x244>)
 80115f0:	f00a feb8 	bl	801c364 <mg_fs_lfs_open>
 80115f4:	4605      	mov	r5, r0
		  mg_fs_lfs_write(f_pointer, web_users, user_list_size * sizeof(users_list_t));
 80115f6:	f240 629a 	movw	r2, #1690	@ 0x69a
 80115fa:	4621      	mov	r1, r4
 80115fc:	f00a feee 	bl	801c3dc <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8011600:	4628      	mov	r0, r5
 8011602:	f00a fed3 	bl	801c3ac <mg_fs_lfs_close>
	  free(web_users);
 8011606:	4620      	mov	r0, r4
 8011608:	f00a fd88 	bl	801c11c <vPortFree>
 801160c:	e7ad      	b.n	801156a <StartSettingsTask+0x9a>
		  logging(L_ERR, "Failed to allocate memory for 'web_users' ");
 801160e:	4946      	ldr	r1, [pc, #280]	@ (8011728 <StartSettingsTask+0x258>)
 8011610:	2003      	movs	r0, #3
 8011612:	f000 ff19 	bl	8012448 <logging>
 8011616:	e7f6      	b.n	8011606 <StartSettingsTask+0x136>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 8011618:	4d3c      	ldr	r5, [pc, #240]	@ (801170c <StartSettingsTask+0x23c>)
 801161a:	4628      	mov	r0, r5
 801161c:	f00a ff10 	bl	801c440 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 8011620:	2102      	movs	r1, #2
 8011622:	4628      	mov	r0, r5
 8011624:	f00a fe9e 	bl	801c364 <mg_fs_lfs_open>
 8011628:	4605      	mov	r5, r0
 801162a:	2800      	cmp	r0, #0
 801162c:	d033      	beq.n	8011696 <StartSettingsTask+0x1c6>
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 801162e:	22c6      	movs	r2, #198	@ 0xc6
 8011630:	a907      	add	r1, sp, #28
 8011632:	f00a fed3 	bl	801c3dc <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 8011636:	4628      	mov	r0, r5
 8011638:	f00a feb8 	bl	801c3ac <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 801163c:	2200      	movs	r2, #0
 801163e:	f88d 201c 	strb.w	r2, [sp, #28]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011642:	2302      	movs	r3, #2
 8011644:	a907      	add	r1, sp, #28
 8011646:	4832      	ldr	r0, [pc, #200]	@ (8011710 <StartSettingsTask+0x240>)
 8011648:	6800      	ldr	r0, [r0, #0]
 801164a:	f008 fe3f 	bl	801a2cc <xQueueGenericSend>
 801164e:	e022      	b.n	8011696 <StartSettingsTask+0x1c6>
				 osDelay(1);
 8011650:	2001      	movs	r0, #1
 8011652:	f008 fada 	bl	8019c0a <osDelay>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 8011656:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801165a:	4834      	ldr	r0, [pc, #208]	@ (801172c <StartSettingsTask+0x25c>)
 801165c:	f006 f8ec 	bl	8017838 <HAL_GPIO_ReadPin>
 8011660:	2800      	cmp	r0, #0
 8011662:	d0f5      	beq.n	8011650 <StartSettingsTask+0x180>
			 osDelay(1000);
 8011664:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011668:	f008 facf 	bl	8019c0a <osDelay>
			 mg_fs_lfs_remove(WEB_USERS_FILE);
 801166c:	4829      	ldr	r0, [pc, #164]	@ (8011714 <StartSettingsTask+0x244>)
 801166e:	f00a fee7 	bl	801c440 <mg_fs_lfs_remove>
			 HAL_NVIC_SystemReset();
 8011672:	f005 ff71 	bl	8017558 <HAL_NVIC_SystemReset>
 8011676:	e000      	b.n	801167a <StartSettingsTask+0x1aa>
		 press_time = 0;
 8011678:	2400      	movs	r4, #0
	  osDelay(1000);
 801167a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801167e:	f008 fac4 	bl	8019c0a <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 8011682:	2200      	movs	r2, #0
 8011684:	a907      	add	r1, sp, #28
 8011686:	4b22      	ldr	r3, [pc, #136]	@ (8011710 <StartSettingsTask+0x240>)
 8011688:	6818      	ldr	r0, [r3, #0]
 801168a:	f009 f932 	bl	801a8f2 <xQueuePeek>
	  if(mqtt_config.save){
 801168e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d1c0      	bne.n	8011618 <StartSettingsTask+0x148>
	 if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){ // If key pressed, more than 8 secons - reset auth file and reset mcu
 8011696:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801169a:	4824      	ldr	r0, [pc, #144]	@ (801172c <StartSettingsTask+0x25c>)
 801169c:	f006 f8cc 	bl	8017838 <HAL_GPIO_ReadPin>
 80116a0:	2800      	cmp	r0, #0
 80116a2:	d1e9      	bne.n	8011678 <StartSettingsTask+0x1a8>
		 press_time++;
 80116a4:	3401      	adds	r4, #1
 80116a6:	b2e4      	uxtb	r4, r4
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80116a8:	4d20      	ldr	r5, [pc, #128]	@ (801172c <StartSettingsTask+0x25c>)
 80116aa:	2201      	movs	r2, #1
 80116ac:	2102      	movs	r1, #2
 80116ae:	4628      	mov	r0, r5
 80116b0:	f006 f8c9 	bl	8017846 <HAL_GPIO_WritePin>
		 osDelay(100);
 80116b4:	2064      	movs	r0, #100	@ 0x64
 80116b6:	f008 faa8 	bl	8019c0a <osDelay>
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80116ba:	2200      	movs	r2, #0
 80116bc:	2102      	movs	r1, #2
 80116be:	4628      	mov	r0, r5
 80116c0:	f006 f8c1 	bl	8017846 <HAL_GPIO_WritePin>
		 if (press_time == 8){
 80116c4:	2c08      	cmp	r4, #8
 80116c6:	d1d8      	bne.n	801167a <StartSettingsTask+0x1aa>
			 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80116c8:	2201      	movs	r2, #1
 80116ca:	2102      	movs	r1, #2
 80116cc:	4628      	mov	r0, r5
 80116ce:	f006 f8ba 	bl	8017846 <HAL_GPIO_WritePin>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 80116d2:	e7c0      	b.n	8011656 <StartSettingsTask+0x186>
 80116d4:	08011cc9 	.word	0x08011cc9
 80116d8:	08011ced 	.word	0x08011ced
 80116dc:	08011355 	.word	0x08011355
 80116e0:	08011341 	.word	0x08011341
 80116e4:	08011d19 	.word	0x08011d19
 80116e8:	08011d05 	.word	0x08011d05
 80116ec:	08037b14 	.word	0x08037b14
 80116f0:	08037b1c 	.word	0x08037b1c
 80116f4:	08037b28 	.word	0x08037b28
 80116f8:	08037b38 	.word	0x08037b38
 80116fc:	08037b44 	.word	0x08037b44
 8011700:	08039514 	.word	0x08039514
 8011704:	08037b4c 	.word	0x08037b4c
 8011708:	08037b54 	.word	0x08037b54
 801170c:	08037b5c 	.word	0x08037b5c
 8011710:	20000a1c 	.word	0x20000a1c
 8011714:	08037b70 	.word	0x08037b70
 8011718:	20000a44 	.word	0x20000a44
 801171c:	08037bac 	.word	0x08037bac
 8011720:	08037be4 	.word	0x08037be4
 8011724:	08037bec 	.word	0x08037bec
 8011728:	08037b80 	.word	0x08037b80
 801172c:	40020400 	.word	0x40020400

08011730 <RW_parameters_from_queue>:
void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 8011730:	b508      	push	{r3, lr}
	switch (param_type) {
 8011732:	2901      	cmp	r1, #1
 8011734:	d013      	beq.n	801175e <RW_parameters_from_queue+0x2e>
 8011736:	2902      	cmp	r1, #2
 8011738:	d019      	beq.n	801176e <RW_parameters_from_queue+0x3e>
 801173a:	b989      	cbnz	r1, 8011760 <RW_parameters_from_queue+0x30>
			if (direction == S_READ){
 801173c:	b14a      	cbz	r2, 8011752 <RW_parameters_from_queue+0x22>
			}else if (direction == S_WRITE){
 801173e:	2a01      	cmp	r2, #1
 8011740:	d10e      	bne.n	8011760 <RW_parameters_from_queue+0x30>
				xQueueOverwrite(mqttQHandle, pr);
 8011742:	2302      	movs	r3, #2
 8011744:	2200      	movs	r2, #0
 8011746:	4601      	mov	r1, r0
 8011748:	4811      	ldr	r0, [pc, #68]	@ (8011790 <RW_parameters_from_queue+0x60>)
 801174a:	6800      	ldr	r0, [r0, #0]
 801174c:	f008 fdbe 	bl	801a2cc <xQueueGenericSend>
 8011750:	e006      	b.n	8011760 <RW_parameters_from_queue+0x30>
				xQueuePeek(mqttQHandle, pr, 0);
 8011752:	4601      	mov	r1, r0
 8011754:	4b0e      	ldr	r3, [pc, #56]	@ (8011790 <RW_parameters_from_queue+0x60>)
 8011756:	6818      	ldr	r0, [r3, #0]
 8011758:	f009 f8cb 	bl	801a8f2 <xQueuePeek>
 801175c:	e000      	b.n	8011760 <RW_parameters_from_queue+0x30>
			if (direction == S_READ){
 801175e:	b102      	cbz	r2, 8011762 <RW_parameters_from_queue+0x32>
}
 8011760:	bd08      	pop	{r3, pc}
				xQueuePeek(inputReadQHandle, input, 0);
 8011762:	4601      	mov	r1, r0
 8011764:	4b0b      	ldr	r3, [pc, #44]	@ (8011794 <RW_parameters_from_queue+0x64>)
 8011766:	6818      	ldr	r0, [r3, #0]
 8011768:	f009 f8c3 	bl	801a8f2 <xQueuePeek>
 801176c:	e7f8      	b.n	8011760 <RW_parameters_from_queue+0x30>
			if (direction == S_READ){
 801176e:	b14a      	cbz	r2, 8011784 <RW_parameters_from_queue+0x54>
			}else if(direction == S_WRITE){
 8011770:	2a01      	cmp	r2, #1
 8011772:	d1f5      	bne.n	8011760 <RW_parameters_from_queue+0x30>
				xQueueOverwrite(outputWriteQHandle, output);
 8011774:	2302      	movs	r3, #2
 8011776:	2200      	movs	r2, #0
 8011778:	4601      	mov	r1, r0
 801177a:	4807      	ldr	r0, [pc, #28]	@ (8011798 <RW_parameters_from_queue+0x68>)
 801177c:	6800      	ldr	r0, [r0, #0]
 801177e:	f008 fda5 	bl	801a2cc <xQueueGenericSend>
}
 8011782:	e7ed      	b.n	8011760 <RW_parameters_from_queue+0x30>
				xQueuePeek(outputReadQHandle, output, 0);
 8011784:	4601      	mov	r1, r0
 8011786:	4b05      	ldr	r3, [pc, #20]	@ (801179c <RW_parameters_from_queue+0x6c>)
 8011788:	6818      	ldr	r0, [r3, #0]
 801178a:	f009 f8b2 	bl	801a8f2 <xQueuePeek>
 801178e:	e7e7      	b.n	8011760 <RW_parameters_from_queue+0x30>
 8011790:	20000a1c 	.word	0x20000a1c
 8011794:	20000a28 	.word	0x20000a28
 8011798:	20000a20 	.word	0x20000a20
 801179c:	20000a24 	.word	0x20000a24

080117a0 <StartDisplayTask>:
{
 80117a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117a2:	b08b      	sub	sp, #44	@ 0x2c
	osDelay(1000);//
 80117a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80117a8:	f008 fa2f 	bl	8019c0a <osDelay>
	SSD1306_Init (); // initialise the display
 80117ac:	f008 f8ca 	bl	8019944 <SSD1306_Init>
	osDelay(100);//
 80117b0:	2064      	movs	r0, #100	@ 0x64
 80117b2:	f008 fa2a 	bl	8019c0a <osDelay>
	SSD1306_GotoXY(x=1,y=0);
 80117b6:	2100      	movs	r1, #0
 80117b8:	2001      	movs	r0, #1
 80117ba:	f008 f827 	bl	801980c <SSD1306_GotoXY>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80117be:	2000      	movs	r0, #0
 80117c0:	f007 ffe8 	bl	8019794 <SSD1306_Fill>
	if (flash_not_connect_flag){
 80117c4:	4ba9      	ldr	r3, [pc, #676]	@ (8011a6c <StartDisplayTask+0x2cc>)
 80117c6:	781c      	ldrb	r4, [r3, #0]
 80117c8:	2c00      	cmp	r4, #0
 80117ca:	d148      	bne.n	801185e <StartDisplayTask+0xbe>
	SSD1306_Puts("Builded: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80117cc:	4da8      	ldr	r5, [pc, #672]	@ (8011a70 <StartDisplayTask+0x2d0>)
 80117ce:	2201      	movs	r2, #1
 80117d0:	4629      	mov	r1, r5
 80117d2:	48a8      	ldr	r0, [pc, #672]	@ (8011a74 <StartDisplayTask+0x2d4>)
 80117d4:	f008 f86e 	bl	80198b4 <SSD1306_Puts>
	SSD1306_Puts(__TIME__, &Font_7x10, SSD1306_COLOR_WHITE);
 80117d8:	2201      	movs	r2, #1
 80117da:	4629      	mov	r1, r5
 80117dc:	48a6      	ldr	r0, [pc, #664]	@ (8011a78 <StartDisplayTask+0x2d8>)
 80117de:	f008 f869 	bl	80198b4 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 80117e2:	f104 010b 	add.w	r1, r4, #11
 80117e6:	b2c9      	uxtb	r1, r1
 80117e8:	2001      	movs	r0, #1
 80117ea:	f008 f80f 	bl	801980c <SSD1306_GotoXY>
	SSD1306_Puts(__DATE__, &Font_7x10, SSD1306_COLOR_WHITE);
 80117ee:	2201      	movs	r2, #1
 80117f0:	4629      	mov	r1, r5
 80117f2:	48a2      	ldr	r0, [pc, #648]	@ (8011a7c <StartDisplayTask+0x2dc>)
 80117f4:	f008 f85e 	bl	80198b4 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 80117f8:	f104 0116 	add.w	r1, r4, #22
 80117fc:	b2c9      	uxtb	r1, r1
 80117fe:	2001      	movs	r0, #1
 8011800:	f008 f804 	bl	801980c <SSD1306_GotoXY>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8011804:	4b9e      	ldr	r3, [pc, #632]	@ (8011a80 <StartDisplayTask+0x2e0>)
 8011806:	6859      	ldr	r1, [r3, #4]
 8011808:	780a      	ldrb	r2, [r1, #0]
 801180a:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 801180c:	7888      	ldrb	r0, [r1, #2]
 801180e:	78ce      	ldrb	r6, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8011810:	790f      	ldrb	r7, [r1, #4]
 8011812:	7949      	ldrb	r1, [r1, #5]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011814:	9103      	str	r1, [sp, #12]
 8011816:	9702      	str	r7, [sp, #8]
 8011818:	9601      	str	r6, [sp, #4]
 801181a:	9000      	str	r0, [sp, #0]
 801181c:	4999      	ldr	r1, [pc, #612]	@ (8011a84 <StartDisplayTask+0x2e4>)
 801181e:	a805      	add	r0, sp, #20
 8011820:	f01a fdfa 	bl	802c418 <sprintf>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011824:	2201      	movs	r2, #1
 8011826:	4629      	mov	r1, r5
 8011828:	a805      	add	r0, sp, #20
 801182a:	f008 f843 	bl	80198b4 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 801182e:	f104 0121 	add.w	r1, r4, #33	@ 0x21
 8011832:	b2c9      	uxtb	r1, r1
 8011834:	2001      	movs	r0, #1
 8011836:	f007 ffe9 	bl	801980c <SSD1306_GotoXY>
	sprintf((char *)buf, "%s",get_flash_chip_model());
 801183a:	f00a fe1f 	bl	801c47c <get_flash_chip_model>
 801183e:	4601      	mov	r1, r0
 8011840:	a805      	add	r0, sp, #20
 8011842:	f01c fd27 	bl	802e294 <strcpy>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011846:	2201      	movs	r2, #1
 8011848:	4629      	mov	r1, r5
 801184a:	a805      	add	r0, sp, #20
 801184c:	f008 f832 	bl	80198b4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8011850:	f008 f922 	bl	8019a98 <SSD1306_UpdateScreen>
	osDelay(3000);
 8011854:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011858:	f008 f9d7 	bl	8019c0a <osDelay>
	int i=0;
 801185c:	e0ce      	b.n	80119fc <StartDisplayTask+0x25c>
		SSD1306_GotoXY(x=1,y=0);
 801185e:	2100      	movs	r1, #0
 8011860:	2001      	movs	r0, #1
 8011862:	f007 ffd3 	bl	801980c <SSD1306_GotoXY>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8011866:	2000      	movs	r0, #0
 8011868:	f007 ff94 	bl	8019794 <SSD1306_Fill>
		SSD1306_Puts("Error. Flash mem", &Font_7x10, SSD1306_COLOR_WHITE);
 801186c:	4c80      	ldr	r4, [pc, #512]	@ (8011a70 <StartDisplayTask+0x2d0>)
 801186e:	2201      	movs	r2, #1
 8011870:	4621      	mov	r1, r4
 8011872:	4885      	ldr	r0, [pc, #532]	@ (8011a88 <StartDisplayTask+0x2e8>)
 8011874:	f008 f81e 	bl	80198b4 <SSD1306_Puts>
		SSD1306_GotoXY(x=1,y=10);
 8011878:	210a      	movs	r1, #10
 801187a:	2001      	movs	r0, #1
 801187c:	f007 ffc6 	bl	801980c <SSD1306_GotoXY>
		SSD1306_Puts("chip is not", &Font_7x10, SSD1306_COLOR_WHITE);
 8011880:	2201      	movs	r2, #1
 8011882:	4621      	mov	r1, r4
 8011884:	4881      	ldr	r0, [pc, #516]	@ (8011a8c <StartDisplayTask+0x2ec>)
 8011886:	f008 f815 	bl	80198b4 <SSD1306_Puts>
		SSD1306_GotoXY(x=1,y=20);
 801188a:	2114      	movs	r1, #20
 801188c:	2001      	movs	r0, #1
 801188e:	f007 ffbd 	bl	801980c <SSD1306_GotoXY>
		SSD1306_Puts("connected. Reboot", &Font_7x10, SSD1306_COLOR_WHITE);
 8011892:	2201      	movs	r2, #1
 8011894:	4621      	mov	r1, r4
 8011896:	487e      	ldr	r0, [pc, #504]	@ (8011a90 <StartDisplayTask+0x2f0>)
 8011898:	f008 f80c 	bl	80198b4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 801189c:	f008 f8fc 	bl	8019a98 <SSD1306_UpdateScreen>
		vTaskDelay(3000);
 80118a0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80118a4:	f009 fd1e 	bl	801b2e4 <vTaskDelay>
		SSD1306_GotoXY(x=1,y=20);
 80118a8:	2414      	movs	r4, #20
 80118aa:	e78f      	b.n	80117cc <StartDisplayTask+0x2c>
		switch (flash_status_flag) {
 80118ac:	f113 0f05 	cmn.w	r3, #5
 80118b0:	d108      	bne.n	80118c4 <StartDisplayTask+0x124>
			SSD1306_GotoXY(x=1,y=40);
 80118b2:	2128      	movs	r1, #40	@ 0x28
 80118b4:	2001      	movs	r0, #1
 80118b6:	f007 ffa9 	bl	801980c <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_IO", &Font_7x10, SSD1306_COLOR_WHITE);
 80118ba:	2201      	movs	r2, #1
 80118bc:	496c      	ldr	r1, [pc, #432]	@ (8011a70 <StartDisplayTask+0x2d0>)
 80118be:	4875      	ldr	r0, [pc, #468]	@ (8011a94 <StartDisplayTask+0x2f4>)
 80118c0:	f007 fff8 	bl	80198b4 <SSD1306_Puts>
		SSD1306_GotoXY(x=1,y=0);
 80118c4:	2100      	movs	r1, #0
 80118c6:	2001      	movs	r0, #1
 80118c8:	f007 ffa0 	bl	801980c <SSD1306_GotoXY>
		SSD1306_Puts("IP:", &Font_7x10, SSD1306_COLOR_WHITE);
 80118cc:	4c68      	ldr	r4, [pc, #416]	@ (8011a70 <StartDisplayTask+0x2d0>)
 80118ce:	2201      	movs	r2, #1
 80118d0:	4621      	mov	r1, r4
 80118d2:	4871      	ldr	r0, [pc, #452]	@ (8011a98 <StartDisplayTask+0x2f8>)
 80118d4:	f007 ffee 	bl	80198b4 <SSD1306_Puts>
				(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 80118d8:	4b69      	ldr	r3, [pc, #420]	@ (8011a80 <StartDisplayTask+0x2e0>)
 80118da:	685b      	ldr	r3, [r3, #4]
 80118dc:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 80118de:	0e13      	lsrs	r3, r2, #24
		sprintf(buf,"%lu.%lu.%lu.%lu",
 80118e0:	9301      	str	r3, [sp, #4]
 80118e2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80118e6:	9300      	str	r3, [sp, #0]
 80118e8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80118ec:	b2d2      	uxtb	r2, r2
 80118ee:	496b      	ldr	r1, [pc, #428]	@ (8011a9c <StartDisplayTask+0x2fc>)
 80118f0:	a805      	add	r0, sp, #20
 80118f2:	f01a fd91 	bl	802c418 <sprintf>
		SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80118f6:	2201      	movs	r2, #1
 80118f8:	4621      	mov	r1, r4
 80118fa:	a805      	add	r0, sp, #20
 80118fc:	f007 ffda 	bl	80198b4 <SSD1306_Puts>
		SSD1306_GotoXY(x,y=y+11);
 8011900:	210b      	movs	r1, #11
 8011902:	2001      	movs	r0, #1
 8011904:	f007 ff82 	bl	801980c <SSD1306_GotoXY>
		SSD1306_Puts("Inputs:", &Font_7x10, SSD1306_COLOR_WHITE);
 8011908:	2201      	movs	r2, #1
 801190a:	4621      	mov	r1, r4
 801190c:	4864      	ldr	r0, [pc, #400]	@ (8011aa0 <StartDisplayTask+0x300>)
 801190e:	f007 ffd1 	bl	80198b4 <SSD1306_Puts>
		SSD1306_GotoXY(x=x+60,y);
 8011912:	210b      	movs	r1, #11
 8011914:	203d      	movs	r0, #61	@ 0x3d
 8011916:	f007 ff79 	bl	801980c <SSD1306_GotoXY>
		for (i=0 ; i<INPUTS_COUNT ; i++){
 801191a:	2500      	movs	r5, #0
		SSD1306_GotoXY(x=x+60,y);
 801191c:	243d      	movs	r4, #61	@ 0x3d
		for (i=0 ; i<INPUTS_COUNT ; i++){
 801191e:	e01f      	b.n	8011960 <StartDisplayTask+0x1c0>
			SSD1306_GotoXY(x=1,y=40);
 8011920:	2128      	movs	r1, #40	@ 0x28
 8011922:	2001      	movs	r0, #1
 8011924:	f007 ff72 	bl	801980c <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_CORRUPT", &Font_7x10, SSD1306_COLOR_WHITE);
 8011928:	2201      	movs	r2, #1
 801192a:	4951      	ldr	r1, [pc, #324]	@ (8011a70 <StartDisplayTask+0x2d0>)
 801192c:	485d      	ldr	r0, [pc, #372]	@ (8011aa4 <StartDisplayTask+0x304>)
 801192e:	f007 ffc1 	bl	80198b4 <SSD1306_Puts>
			break;
 8011932:	e7c7      	b.n	80118c4 <StartDisplayTask+0x124>
			SSD1306_GotoXY(x=1,y=40);
 8011934:	2128      	movs	r1, #40	@ 0x28
 8011936:	2001      	movs	r0, #1
 8011938:	f007 ff68 	bl	801980c <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_NOMEM", &Font_7x10, SSD1306_COLOR_WHITE);
 801193c:	2201      	movs	r2, #1
 801193e:	494c      	ldr	r1, [pc, #304]	@ (8011a70 <StartDisplayTask+0x2d0>)
 8011940:	4859      	ldr	r0, [pc, #356]	@ (8011aa8 <StartDisplayTask+0x308>)
 8011942:	f007 ffb7 	bl	80198b4 <SSD1306_Puts>
			break;
 8011946:	e7bd      	b.n	80118c4 <StartDisplayTask+0x124>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011948:	2201      	movs	r2, #1
 801194a:	4949      	ldr	r1, [pc, #292]	@ (8011a70 <StartDisplayTask+0x2d0>)
 801194c:	a805      	add	r0, sp, #20
 801194e:	f007 ffb1 	bl	80198b4 <SSD1306_Puts>
			SSD1306_GotoXY(x=x+8,y);
 8011952:	3408      	adds	r4, #8
 8011954:	b2e4      	uxtb	r4, r4
 8011956:	210b      	movs	r1, #11
 8011958:	4620      	mov	r0, r4
 801195a:	f007 ff57 	bl	801980c <SSD1306_GotoXY>
		for (i=0 ; i<INPUTS_COUNT ; i++){
 801195e:	4635      	mov	r5, r6
 8011960:	2d02      	cmp	r5, #2
 8011962:	dc0f      	bgt.n	8011984 <StartDisplayTask+0x1e4>
			sprintf((char *)buf,"%d",i+1);
 8011964:	1c6e      	adds	r6, r5, #1
 8011966:	4632      	mov	r2, r6
 8011968:	4950      	ldr	r1, [pc, #320]	@ (8011aac <StartDisplayTask+0x30c>)
 801196a:	a805      	add	r0, sp, #20
 801196c:	f01a fd54 	bl	802c418 <sprintf>
			if ( io_status.inputs[i] ){
 8011970:	4b4f      	ldr	r3, [pc, #316]	@ (8011ab0 <StartDisplayTask+0x310>)
 8011972:	5d5b      	ldrb	r3, [r3, r5]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d0e7      	beq.n	8011948 <StartDisplayTask+0x1a8>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_BLACK);
 8011978:	2200      	movs	r2, #0
 801197a:	493d      	ldr	r1, [pc, #244]	@ (8011a70 <StartDisplayTask+0x2d0>)
 801197c:	a805      	add	r0, sp, #20
 801197e:	f007 ff99 	bl	80198b4 <SSD1306_Puts>
 8011982:	e7e6      	b.n	8011952 <StartDisplayTask+0x1b2>
		SSD1306_GotoXY(x=1,y=y+11);
 8011984:	2116      	movs	r1, #22
 8011986:	2001      	movs	r0, #1
 8011988:	f007 ff40 	bl	801980c <SSD1306_GotoXY>
		SSD1306_Puts("Outputs:", &Font_7x10, SSD1306_COLOR_WHITE);
 801198c:	2201      	movs	r2, #1
 801198e:	4938      	ldr	r1, [pc, #224]	@ (8011a70 <StartDisplayTask+0x2d0>)
 8011990:	4848      	ldr	r0, [pc, #288]	@ (8011ab4 <StartDisplayTask+0x314>)
 8011992:	f007 ff8f 	bl	80198b4 <SSD1306_Puts>
		SSD1306_GotoXY(x=x+60,y);
 8011996:	2116      	movs	r1, #22
 8011998:	203d      	movs	r0, #61	@ 0x3d
 801199a:	f007 ff37 	bl	801980c <SSD1306_GotoXY>
		for (i=0 ; i<OUTPUTS_COUNT ; i++){
 801199e:	2500      	movs	r5, #0
		SSD1306_GotoXY(x=x+60,y);
 80119a0:	243d      	movs	r4, #61	@ 0x3d
		for (i=0 ; i<OUTPUTS_COUNT ; i++){
 80119a2:	e00b      	b.n	80119bc <StartDisplayTask+0x21c>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80119a4:	2201      	movs	r2, #1
 80119a6:	4932      	ldr	r1, [pc, #200]	@ (8011a70 <StartDisplayTask+0x2d0>)
 80119a8:	a805      	add	r0, sp, #20
 80119aa:	f007 ff83 	bl	80198b4 <SSD1306_Puts>
			SSD1306_GotoXY(x=x+8,y);
 80119ae:	3408      	adds	r4, #8
 80119b0:	b2e4      	uxtb	r4, r4
 80119b2:	2116      	movs	r1, #22
 80119b4:	4620      	mov	r0, r4
 80119b6:	f007 ff29 	bl	801980c <SSD1306_GotoXY>
		for (i=0 ; i<OUTPUTS_COUNT ; i++){
 80119ba:	4635      	mov	r5, r6
 80119bc:	2d02      	cmp	r5, #2
 80119be:	dc10      	bgt.n	80119e2 <StartDisplayTask+0x242>
			sprintf((char *)buf,"%d",i+1);
 80119c0:	1c6e      	adds	r6, r5, #1
 80119c2:	4632      	mov	r2, r6
 80119c4:	4939      	ldr	r1, [pc, #228]	@ (8011aac <StartDisplayTask+0x30c>)
 80119c6:	a805      	add	r0, sp, #20
 80119c8:	f01a fd26 	bl	802c418 <sprintf>
			if ( io_status.outputs[i] ){
 80119cc:	4b38      	ldr	r3, [pc, #224]	@ (8011ab0 <StartDisplayTask+0x310>)
 80119ce:	442b      	add	r3, r5
 80119d0:	78db      	ldrb	r3, [r3, #3]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d0e6      	beq.n	80119a4 <StartDisplayTask+0x204>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_BLACK);
 80119d6:	2200      	movs	r2, #0
 80119d8:	4925      	ldr	r1, [pc, #148]	@ (8011a70 <StartDisplayTask+0x2d0>)
 80119da:	a805      	add	r0, sp, #20
 80119dc:	f007 ff6a 	bl	80198b4 <SSD1306_Puts>
 80119e0:	e7e5      	b.n	80119ae <StartDisplayTask+0x20e>
		SSD1306_UpdateScreen();
 80119e2:	f008 f859 	bl	8019a98 <SSD1306_UpdateScreen>
		while(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 80119e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80119ea:	2201      	movs	r2, #1
 80119ec:	2178      	movs	r1, #120	@ 0x78
 80119ee:	4832      	ldr	r0, [pc, #200]	@ (8011ab8 <StartDisplayTask+0x318>)
 80119f0:	f006 fa7e 	bl	8017ef0 <HAL_I2C_IsDeviceReady>
 80119f4:	bb50      	cbnz	r0, 8011a4c <StartDisplayTask+0x2ac>
		osDelay(200);
 80119f6:	20c8      	movs	r0, #200	@ 0xc8
 80119f8:	f008 f907 	bl	8019c0a <osDelay>
		RW_parameters_from_queue(io_status.inputs, S_INPUTS, S_READ);
 80119fc:	4c2c      	ldr	r4, [pc, #176]	@ (8011ab0 <StartDisplayTask+0x310>)
 80119fe:	2200      	movs	r2, #0
 8011a00:	2101      	movs	r1, #1
 8011a02:	4620      	mov	r0, r4
 8011a04:	f7ff fe94 	bl	8011730 <RW_parameters_from_queue>
		RW_parameters_from_queue(io_status.outputs, S_OUTPUTS, S_READ);
 8011a08:	2200      	movs	r2, #0
 8011a0a:	2102      	movs	r1, #2
 8011a0c:	1ce0      	adds	r0, r4, #3
 8011a0e:	f7ff fe8f 	bl	8011730 <RW_parameters_from_queue>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8011a12:	2000      	movs	r0, #0
 8011a14:	f007 febe 	bl	8019794 <SSD1306_Fill>
		switch (flash_status_flag) {
 8011a18:	4b28      	ldr	r3, [pc, #160]	@ (8011abc <StartDisplayTask+0x31c>)
 8011a1a:	f993 3000 	ldrsb.w	r3, [r3]
 8011a1e:	f113 0f0c 	cmn.w	r3, #12
 8011a22:	d087      	beq.n	8011934 <StartDisplayTask+0x194>
 8011a24:	f73f af42 	bgt.w	80118ac <StartDisplayTask+0x10c>
 8011a28:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8011a2c:	f43f af78 	beq.w	8011920 <StartDisplayTask+0x180>
 8011a30:	f113 0f18 	cmn.w	r3, #24
 8011a34:	f47f af46 	bne.w	80118c4 <StartDisplayTask+0x124>
			SSD1306_GotoXY(x=1,y=40);
 8011a38:	2128      	movs	r1, #40	@ 0x28
 8011a3a:	2001      	movs	r0, #1
 8011a3c:	f007 fee6 	bl	801980c <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_NOSPC", &Font_7x10, SSD1306_COLOR_WHITE);
 8011a40:	2201      	movs	r2, #1
 8011a42:	490b      	ldr	r1, [pc, #44]	@ (8011a70 <StartDisplayTask+0x2d0>)
 8011a44:	481e      	ldr	r0, [pc, #120]	@ (8011ac0 <StartDisplayTask+0x320>)
 8011a46:	f007 ff35 	bl	80198b4 <SSD1306_Puts>
			break;
 8011a4a:	e73b      	b.n	80118c4 <StartDisplayTask+0x124>
			HAL_I2C_DeInit(&hi2c1);
 8011a4c:	481a      	ldr	r0, [pc, #104]	@ (8011ab8 <StartDisplayTask+0x318>)
 8011a4e:	f006 f979 	bl	8017d44 <HAL_I2C_DeInit>
			vTaskDelay(1000);
 8011a52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011a56:	f009 fc45 	bl	801b2e4 <vTaskDelay>
			MX_I2C1_Init();
 8011a5a:	f000 fbfd 	bl	8012258 <MX_I2C1_Init>
			vTaskDelay(1000);
 8011a5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011a62:	f009 fc3f 	bl	801b2e4 <vTaskDelay>
			SSD1306_Init ();
 8011a66:	f007 ff6d 	bl	8019944 <SSD1306_Init>
 8011a6a:	e7bc      	b.n	80119e6 <StartDisplayTask+0x246>
 8011a6c:	20000a44 	.word	0x20000a44
 8011a70:	2000011c 	.word	0x2000011c
 8011a74:	08037c38 	.word	0x08037c38
 8011a78:	08037c44 	.word	0x08037c44
 8011a7c:	08037c50 	.word	0x08037c50
 8011a80:	20000a48 	.word	0x20000a48
 8011a84:	08037c5c 	.word	0x08037c5c
 8011a88:	08037c04 	.word	0x08037c04
 8011a8c:	08037c18 	.word	0x08037c18
 8011a90:	08037c24 	.word	0x08037c24
 8011a94:	08037c7c 	.word	0x08037c7c
 8011a98:	08037cb8 	.word	0x08037cb8
 8011a9c:	08037cbc 	.word	0x08037cbc
 8011aa0:	08037ccc 	.word	0x08037ccc
 8011aa4:	08037c88 	.word	0x08037c88
 8011aa8:	08037ca8 	.word	0x08037ca8
 8011aac:	0803c3bc 	.word	0x0803c3bc
 8011ab0:	20000a08 	.word	0x20000a08
 8011ab4:	08037cd4 	.word	0x08037cd4
 8011ab8:	20000a50 	.word	0x20000a50
 8011abc:	20000a45 	.word	0x20000a45
 8011ac0:	08037c98 	.word	0x08037c98

08011ac4 <StartLoggingTask>:
{
 8011ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ac8:	b0c6      	sub	sp, #280	@ 0x118
	reg_logging_fn(add_log_mess_to_q);
 8011aca:	485a      	ldr	r0, [pc, #360]	@ (8011c34 <StartLoggingTask+0x170>)
 8011acc:	f000 fcb0 	bl	8012430 <reg_logging_fn>
	logger_set_level(L_INFO);
 8011ad0:	2001      	movs	r0, #1
 8011ad2:	f000 fcb3 	bl	801243c <logger_set_level>
	logging(L_INFO, "Device started...");
 8011ad6:	4958      	ldr	r1, [pc, #352]	@ (8011c38 <StartLoggingTask+0x174>)
 8011ad8:	2001      	movs	r0, #1
 8011ada:	f000 fcb5 	bl	8012448 <logging>
	while (mg_fs_mounted() == 0){
 8011ade:	e003      	b.n	8011ae8 <StartLoggingTask+0x24>
	  osDelay(500);
 8011ae0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011ae4:	f008 f891 	bl	8019c0a <osDelay>
	while (mg_fs_mounted() == 0){
 8011ae8:	f00a fcc2 	bl	801c470 <mg_fs_mounted>
 8011aec:	2800      	cmp	r0, #0
 8011aee:	d0f7      	beq.n	8011ae0 <StartLoggingTask+0x1c>
	logging(L_INFO, "Flash chip model name: %s",  get_flash_chip_model());
 8011af0:	f00a fcc4 	bl	801c47c <get_flash_chip_model>
 8011af4:	4602      	mov	r2, r0
 8011af6:	4951      	ldr	r1, [pc, #324]	@ (8011c3c <StartLoggingTask+0x178>)
 8011af8:	2001      	movs	r0, #1
 8011afa:	f000 fca5 	bl	8012448 <logging>
	logging(L_INFO, "Firmware version: %s", dev_sw_ver);
 8011afe:	4a50      	ldr	r2, [pc, #320]	@ (8011c40 <StartLoggingTask+0x17c>)
 8011b00:	4950      	ldr	r1, [pc, #320]	@ (8011c44 <StartLoggingTask+0x180>)
 8011b02:	2001      	movs	r0, #1
 8011b04:	f000 fca0 	bl	8012448 <logging>
	uint32_t bytes_read = 0, bytes_write = 0, erace_times = 0;
 8011b08:	2500      	movs	r5, #0
 8011b0a:	462f      	mov	r7, r5
 8011b0c:	462e      	mov	r6, r5
	uint32_t count = 20000;
 8011b0e:	f644 6420 	movw	r4, #20000	@ 0x4e20
 8011b12:	e038      	b.n	8011b86 <StartLoggingTask+0xc2>
		  osMessageQueueGet(loggingQHandle, &log, 0, 0);
 8011b14:	2300      	movs	r3, #0
 8011b16:	461a      	mov	r2, r3
 8011b18:	a904      	add	r1, sp, #16
 8011b1a:	484b      	ldr	r0, [pc, #300]	@ (8011c48 <StartLoggingTask+0x184>)
 8011b1c:	6800      	ldr	r0, [r0, #0]
 8011b1e:	f008 f9b0 	bl	8019e82 <osMessageQueueGet>
		  f_pointer = mg_fs_lfs_open(LOG_FILE_LOCATION, MG_FS_WRITE);
 8011b22:	2102      	movs	r1, #2
 8011b24:	4849      	ldr	r0, [pc, #292]	@ (8011c4c <StartLoggingTask+0x188>)
 8011b26:	f00a fc1d 	bl	801c364 <mg_fs_lfs_open>
 8011b2a:	4680      	mov	r8, r0
		  flash_status_flag = mg_fs_lfs_write(f_pointer, &log.log_text, log.log_len);
 8011b2c:	f89d 2111 	ldrb.w	r2, [sp, #273]	@ 0x111
 8011b30:	f10d 0111 	add.w	r1, sp, #17
 8011b34:	f00a fc52 	bl	801c3dc <mg_fs_lfs_write>
 8011b38:	4b45      	ldr	r3, [pc, #276]	@ (8011c50 <StartLoggingTask+0x18c>)
 8011b3a:	7018      	strb	r0, [r3, #0]
		  mg_fs_lfs_close(f_pointer);
 8011b3c:	4640      	mov	r0, r8
 8011b3e:	f00a fc35 	bl	801c3ac <mg_fs_lfs_close>
 8011b42:	e026      	b.n	8011b92 <StartLoggingTask+0xce>
    	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, erace_times);
 8011b44:	4c43      	ldr	r4, [pc, #268]	@ (8011c54 <StartLoggingTask+0x190>)
 8011b46:	462a      	mov	r2, r5
 8011b48:	2102      	movs	r1, #2
 8011b4a:	4620      	mov	r0, r4
 8011b4c:	f007 f889 	bl	8018c62 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, erace_times);
 8011b50:	462a      	mov	r2, r5
 8011b52:	2103      	movs	r1, #3
 8011b54:	4620      	mov	r0, r4
 8011b56:	f007 f884 	bl	8018c62 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, bytes_read);
 8011b5a:	4632      	mov	r2, r6
 8011b5c:	2104      	movs	r1, #4
 8011b5e:	4620      	mov	r0, r4
 8011b60:	f007 f87f 	bl	8018c62 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, bytes_read);
 8011b64:	4632      	mov	r2, r6
 8011b66:	2105      	movs	r1, #5
 8011b68:	4620      	mov	r0, r4
 8011b6a:	f007 f87a 	bl	8018c62 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR6, bytes_write);
 8011b6e:	463a      	mov	r2, r7
 8011b70:	2106      	movs	r1, #6
 8011b72:	4620      	mov	r0, r4
 8011b74:	f007 f875 	bl	8018c62 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR7, bytes_write);
 8011b78:	463a      	mov	r2, r7
 8011b7a:	2107      	movs	r1, #7
 8011b7c:	4620      	mov	r0, r4
 8011b7e:	f007 f870 	bl	8018c62 <HAL_RTCEx_BKUPWrite>
    	count = 0;
 8011b82:	2400      	movs	r4, #0
    count ++;
 8011b84:	3401      	adds	r4, #1
	  if (osMessageQueueGetCount(loggingQHandle)){
 8011b86:	4b30      	ldr	r3, [pc, #192]	@ (8011c48 <StartLoggingTask+0x184>)
 8011b88:	6818      	ldr	r0, [r3, #0]
 8011b8a:	f008 f9bb 	bl	8019f04 <osMessageQueueGetCount>
 8011b8e:	2800      	cmp	r0, #0
 8011b90:	d1c0      	bne.n	8011b14 <StartLoggingTask+0x50>
    osDelay(500);
 8011b92:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011b96:	f008 f838 	bl	8019c0a <osDelay>
    if (count > 200){
 8011b9a:	2cc8      	cmp	r4, #200	@ 0xc8
 8011b9c:	d9f2      	bls.n	8011b84 <StartLoggingTask+0xc0>
    	mg_fs_lfs_status(LOG_FILE_LOCATION, &fs_size, NULL);
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	a945      	add	r1, sp, #276	@ 0x114
 8011ba2:	482a      	ldr	r0, [pc, #168]	@ (8011c4c <StartLoggingTask+0x188>)
 8011ba4:	f00a fba0 	bl	801c2e8 <mg_fs_lfs_status>
    	if (fs_size > LOG_FILE_MAX_SIZE){
 8011ba8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011baa:	4b2b      	ldr	r3, [pc, #172]	@ (8011c58 <StartLoggingTask+0x194>)
 8011bac:	429a      	cmp	r2, r3
 8011bae:	d9c9      	bls.n	8011b44 <StartLoggingTask+0x80>
    		mg_fs_lfs_remove(LOG_FILE_LOCATION_OLD);
 8011bb0:	4c2a      	ldr	r4, [pc, #168]	@ (8011c5c <StartLoggingTask+0x198>)
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	f00a fc44 	bl	801c440 <mg_fs_lfs_remove>
    		mg_fs_lfs_rename(LOG_FILE_LOCATION, LOG_FILE_LOCATION_OLD);
 8011bb8:	4621      	mov	r1, r4
 8011bba:	4824      	ldr	r0, [pc, #144]	@ (8011c4c <StartLoggingTask+0x188>)
 8011bbc:	f00a fc34 	bl	801c428 <mg_fs_lfs_rename>
    		logging(L_INFO, "Log file rotated");
 8011bc0:	4927      	ldr	r1, [pc, #156]	@ (8011c60 <StartLoggingTask+0x19c>)
 8011bc2:	2001      	movs	r0, #1
 8011bc4:	f000 fc40 	bl	8012448 <logging>
    			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8011bc8:	4b26      	ldr	r3, [pc, #152]	@ (8011c64 <StartLoggingTask+0x1a0>)
 8011bca:	6859      	ldr	r1, [r3, #4]
 8011bcc:	780a      	ldrb	r2, [r1, #0]
 8011bce:	784b      	ldrb	r3, [r1, #1]
    			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011bd0:	7888      	ldrb	r0, [r1, #2]
 8011bd2:	78cc      	ldrb	r4, [r1, #3]
    			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8011bd4:	790d      	ldrb	r5, [r1, #4]
 8011bd6:	7949      	ldrb	r1, [r1, #5]
        	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011bd8:	9103      	str	r1, [sp, #12]
 8011bda:	9502      	str	r5, [sp, #8]
 8011bdc:	9401      	str	r4, [sp, #4]
 8011bde:	9000      	str	r0, [sp, #0]
 8011be0:	4921      	ldr	r1, [pc, #132]	@ (8011c68 <StartLoggingTask+0x1a4>)
 8011be2:	2001      	movs	r0, #1
 8011be4:	f000 fc30 	bl	8012448 <logging>
        	logging(L_INFO, "Flash chip model name: %s",  get_flash_chip_model());
 8011be8:	f00a fc48 	bl	801c47c <get_flash_chip_model>
 8011bec:	4602      	mov	r2, r0
 8011bee:	4913      	ldr	r1, [pc, #76]	@ (8011c3c <StartLoggingTask+0x178>)
 8011bf0:	2001      	movs	r0, #1
 8011bf2:	f000 fc29 	bl	8012448 <logging>
        	logging(L_INFO, "Firmware version: %s", dev_sw_ver);
 8011bf6:	4a12      	ldr	r2, [pc, #72]	@ (8011c40 <StartLoggingTask+0x17c>)
 8011bf8:	4912      	ldr	r1, [pc, #72]	@ (8011c44 <StartLoggingTask+0x180>)
 8011bfa:	2001      	movs	r0, #1
 8011bfc:	f000 fc24 	bl	8012448 <logging>
        	bytes_read  = sFLASH_GetReadedBytes();
 8011c00:	f005 f92c 	bl	8016e5c <sFLASH_GetReadedBytes>
 8011c04:	4606      	mov	r6, r0
    		bytes_write = sFLASH_GetWritedBytes();
 8011c06:	f005 f92f 	bl	8016e68 <sFLASH_GetWritedBytes>
 8011c0a:	4607      	mov	r7, r0
    		erace_times = sFLASH_GetEraceSectorTimes();
 8011c0c:	f005 f932 	bl	8016e74 <sFLASH_GetEraceSectorTimes>
 8011c10:	4605      	mov	r5, r0
        	logging(L_INFO, "Read bytes from flash: %" PRIu32, bytes_read);
 8011c12:	4632      	mov	r2, r6
 8011c14:	4915      	ldr	r1, [pc, #84]	@ (8011c6c <StartLoggingTask+0x1a8>)
 8011c16:	2001      	movs	r0, #1
 8011c18:	f000 fc16 	bl	8012448 <logging>
        	logging(L_INFO, "Write bytes to flash: %" PRIu32, bytes_write);
 8011c1c:	463a      	mov	r2, r7
 8011c1e:	4914      	ldr	r1, [pc, #80]	@ (8011c70 <StartLoggingTask+0x1ac>)
 8011c20:	2001      	movs	r0, #1
 8011c22:	f000 fc11 	bl	8012448 <logging>
        	logging(L_INFO, "Erased sectors: %" PRIu32, erace_times);
 8011c26:	462a      	mov	r2, r5
 8011c28:	4912      	ldr	r1, [pc, #72]	@ (8011c74 <StartLoggingTask+0x1b0>)
 8011c2a:	2001      	movs	r0, #1
 8011c2c:	f000 fc0c 	bl	8012448 <logging>
 8011c30:	e788      	b.n	8011b44 <StartLoggingTask+0x80>
 8011c32:	bf00      	nop
 8011c34:	080114a9 	.word	0x080114a9
 8011c38:	08037ce0 	.word	0x08037ce0
 8011c3c:	08037cf4 	.word	0x08037cf4
 8011c40:	08037d10 	.word	0x08037d10
 8011c44:	08037d18 	.word	0x08037d18
 8011c48:	20000a18 	.word	0x20000a18
 8011c4c:	08037d30 	.word	0x08037d30
 8011c50:	20000a45 	.word	0x20000a45
 8011c54:	20000ab4 	.word	0x20000ab4
 8011c58:	000186a0 	.word	0x000186a0
 8011c5c:	08037d40 	.word	0x08037d40
 8011c60:	08037d50 	.word	0x08037d50
 8011c64:	20000a48 	.word	0x20000a48
 8011c68:	08037d64 	.word	0x08037d64
 8011c6c:	08037d8c 	.word	0x08037d8c
 8011c70:	08037da8 	.word	0x08037da8
 8011c74:	08037dc4 	.word	0x08037dc4

08011c78 <StartWatchDogTask>:
{
 8011c78:	b508      	push	{r3, lr}
	HAL_IWDG_Refresh(&hiwdg);
 8011c7a:	4806      	ldr	r0, [pc, #24]	@ (8011c94 <StartWatchDogTask+0x1c>)
 8011c7c:	f006 fa2e 	bl	80180dc <HAL_IWDG_Refresh>
    osDelay(500);
 8011c80:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011c84:	f007 ffc1 	bl	8019c0a <osDelay>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8011c88:	2101      	movs	r1, #1
 8011c8a:	4803      	ldr	r0, [pc, #12]	@ (8011c98 <StartWatchDogTask+0x20>)
 8011c8c:	f005 fde1 	bl	8017852 <HAL_GPIO_TogglePin>
  for(;;)
 8011c90:	e7f3      	b.n	8011c7a <StartWatchDogTask+0x2>
 8011c92:	bf00      	nop
 8011c94:	20000aa4 	.word	0x20000aa4
 8011c98:	40020400 	.word	0x40020400

08011c9c <EthTxn>:
uint8_t EthTxn(void *spi, uint8_t data) {
 8011c9c:	b500      	push	{lr}
 8011c9e:	b087      	sub	sp, #28
 8011ca0:	f88d 100f 	strb.w	r1, [sp, #15]
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 8011ca4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011ca8:	9300      	str	r3, [sp, #0]
 8011caa:	2301      	movs	r3, #1
 8011cac:	f10d 0217 	add.w	r2, sp, #23
 8011cb0:	f10d 010f 	add.w	r1, sp, #15
 8011cb4:	4803      	ldr	r0, [pc, #12]	@ (8011cc4 <EthTxn+0x28>)
 8011cb6:	f007 fa0a 	bl	80190ce <HAL_SPI_TransmitReceive>
}
 8011cba:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8011cbe:	b007      	add	sp, #28
 8011cc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8011cc4:	20000ad4 	.word	0x20000ad4

08011cc8 <FlashSPIsendByte>:
void FlashSPIsendByte(uint8_t byte){
 8011cc8:	b500      	push	{lr}
 8011cca:	b083      	sub	sp, #12
 8011ccc:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8011cd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011cd4:	2201      	movs	r2, #1
 8011cd6:	f10d 0107 	add.w	r1, sp, #7
 8011cda:	4803      	ldr	r0, [pc, #12]	@ (8011ce8 <FlashSPIsendByte+0x20>)
 8011cdc:	f007 f915 	bl	8018f0a <HAL_SPI_Transmit>
}
 8011ce0:	b003      	add	sp, #12
 8011ce2:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ce6:	bf00      	nop
 8011ce8:	20000b2c 	.word	0x20000b2c

08011cec <FlashSPIrecvBuff>:
int FlashSPIrecvBuff(uint8_t * buffer, uint16_t size){
 8011cec:	b508      	push	{r3, lr}
 8011cee:	460a      	mov	r2, r1
	return HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8011cf0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011cf4:	4601      	mov	r1, r0
 8011cf6:	4802      	ldr	r0, [pc, #8]	@ (8011d00 <FlashSPIrecvBuff+0x14>)
 8011cf8:	f007 fb13 	bl	8019322 <HAL_SPI_Receive>
}
 8011cfc:	bd08      	pop	{r3, pc}
 8011cfe:	bf00      	nop
 8011d00:	20000b2c 	.word	0x20000b2c

08011d04 <FS_Lock>:
void FS_Lock(void * param){
 8011d04:	b508      	push	{r3, lr}
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 8011d06:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011d0a:	4b02      	ldr	r3, [pc, #8]	@ (8011d14 <FS_Lock+0x10>)
 8011d0c:	6818      	ldr	r0, [r3, #0]
 8011d0e:	f007 ffd5 	bl	8019cbc <osMutexAcquire>
}
 8011d12:	bd08      	pop	{r3, pc}
 8011d14:	20000a10 	.word	0x20000a10

08011d18 <FS_Unlock>:
void FS_Unlock(void * param){
 8011d18:	b508      	push	{r3, lr}
	osMutexRelease(FSMutexHandle);
 8011d1a:	4b02      	ldr	r3, [pc, #8]	@ (8011d24 <FS_Unlock+0xc>)
 8011d1c:	6818      	ldr	r0, [r3, #0]
 8011d1e:	f007 fffc 	bl	8019d1a <osMutexRelease>
}
 8011d22:	bd08      	pop	{r3, pc}
 8011d24:	20000a10 	.word	0x20000a10

08011d28 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8011d28:	b508      	push	{r3, lr}
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 8011d2a:	482c      	ldr	r0, [pc, #176]	@ (8011ddc <MX_FREERTOS_Init+0xb4>)
 8011d2c:	f007 ff7b 	bl	8019c26 <osMutexNew>
 8011d30:	4b2b      	ldr	r3, [pc, #172]	@ (8011de0 <MX_FREERTOS_Init+0xb8>)
 8011d32:	6018      	str	r0, [r3, #0]
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 8011d34:	482b      	ldr	r0, [pc, #172]	@ (8011de4 <MX_FREERTOS_Init+0xbc>)
 8011d36:	f007 ff76 	bl	8019c26 <osMutexNew>
 8011d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8011de8 <MX_FREERTOS_Init+0xc0>)
 8011d3c:	6018      	str	r0, [r3, #0]
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 8011d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8011dec <MX_FREERTOS_Init+0xc4>)
 8011d40:	2103      	movs	r1, #3
 8011d42:	2001      	movs	r0, #1
 8011d44:	f008 f810 	bl	8019d68 <osMessageQueueNew>
 8011d48:	4b29      	ldr	r3, [pc, #164]	@ (8011df0 <MX_FREERTOS_Init+0xc8>)
 8011d4a:	6018      	str	r0, [r3, #0]
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 8011d4c:	4a29      	ldr	r2, [pc, #164]	@ (8011df4 <MX_FREERTOS_Init+0xcc>)
 8011d4e:	2103      	movs	r1, #3
 8011d50:	2001      	movs	r0, #1
 8011d52:	f008 f809 	bl	8019d68 <osMessageQueueNew>
 8011d56:	4b28      	ldr	r3, [pc, #160]	@ (8011df8 <MX_FREERTOS_Init+0xd0>)
 8011d58:	6018      	str	r0, [r3, #0]
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 8011d5a:	4a28      	ldr	r2, [pc, #160]	@ (8011dfc <MX_FREERTOS_Init+0xd4>)
 8011d5c:	2103      	movs	r1, #3
 8011d5e:	2001      	movs	r0, #1
 8011d60:	f008 f802 	bl	8019d68 <osMessageQueueNew>
 8011d64:	4b26      	ldr	r3, [pc, #152]	@ (8011e00 <MX_FREERTOS_Init+0xd8>)
 8011d66:	6018      	str	r0, [r3, #0]
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8011d68:	4a26      	ldr	r2, [pc, #152]	@ (8011e04 <MX_FREERTOS_Init+0xdc>)
 8011d6a:	21c6      	movs	r1, #198	@ 0xc6
 8011d6c:	2001      	movs	r0, #1
 8011d6e:	f007 fffb 	bl	8019d68 <osMessageQueueNew>
 8011d72:	4b25      	ldr	r3, [pc, #148]	@ (8011e08 <MX_FREERTOS_Init+0xe0>)
 8011d74:	6018      	str	r0, [r3, #0]
  loggingQHandle = osMessageQueueNew (25, sizeof(log_message_t), &loggingQ_attributes);
 8011d76:	4a25      	ldr	r2, [pc, #148]	@ (8011e0c <MX_FREERTOS_Init+0xe4>)
 8011d78:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8011d7c:	2019      	movs	r0, #25
 8011d7e:	f007 fff3 	bl	8019d68 <osMessageQueueNew>
 8011d82:	4b23      	ldr	r3, [pc, #140]	@ (8011e10 <MX_FREERTOS_Init+0xe8>)
 8011d84:	6018      	str	r0, [r3, #0]
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 8011d86:	4a23      	ldr	r2, [pc, #140]	@ (8011e14 <MX_FREERTOS_Init+0xec>)
 8011d88:	2100      	movs	r1, #0
 8011d8a:	4823      	ldr	r0, [pc, #140]	@ (8011e18 <MX_FREERTOS_Init+0xf0>)
 8011d8c:	f007 fee2 	bl	8019b54 <osThreadNew>
 8011d90:	4b22      	ldr	r3, [pc, #136]	@ (8011e1c <MX_FREERTOS_Init+0xf4>)
 8011d92:	6018      	str	r0, [r3, #0]
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 8011d94:	4a22      	ldr	r2, [pc, #136]	@ (8011e20 <MX_FREERTOS_Init+0xf8>)
 8011d96:	2100      	movs	r1, #0
 8011d98:	4822      	ldr	r0, [pc, #136]	@ (8011e24 <MX_FREERTOS_Init+0xfc>)
 8011d9a:	f007 fedb 	bl	8019b54 <osThreadNew>
 8011d9e:	4b22      	ldr	r3, [pc, #136]	@ (8011e28 <MX_FREERTOS_Init+0x100>)
 8011da0:	6018      	str	r0, [r3, #0]
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8011da2:	4a22      	ldr	r2, [pc, #136]	@ (8011e2c <MX_FREERTOS_Init+0x104>)
 8011da4:	2100      	movs	r1, #0
 8011da6:	4822      	ldr	r0, [pc, #136]	@ (8011e30 <MX_FREERTOS_Init+0x108>)
 8011da8:	f007 fed4 	bl	8019b54 <osThreadNew>
 8011dac:	4b21      	ldr	r3, [pc, #132]	@ (8011e34 <MX_FREERTOS_Init+0x10c>)
 8011dae:	6018      	str	r0, [r3, #0]
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 8011db0:	4a21      	ldr	r2, [pc, #132]	@ (8011e38 <MX_FREERTOS_Init+0x110>)
 8011db2:	2100      	movs	r1, #0
 8011db4:	4821      	ldr	r0, [pc, #132]	@ (8011e3c <MX_FREERTOS_Init+0x114>)
 8011db6:	f007 fecd 	bl	8019b54 <osThreadNew>
 8011dba:	4b21      	ldr	r3, [pc, #132]	@ (8011e40 <MX_FREERTOS_Init+0x118>)
 8011dbc:	6018      	str	r0, [r3, #0]
  loggingTaskHandle = osThreadNew(StartLoggingTask, NULL, &loggingTask_attributes);
 8011dbe:	4a21      	ldr	r2, [pc, #132]	@ (8011e44 <MX_FREERTOS_Init+0x11c>)
 8011dc0:	2100      	movs	r1, #0
 8011dc2:	4821      	ldr	r0, [pc, #132]	@ (8011e48 <MX_FREERTOS_Init+0x120>)
 8011dc4:	f007 fec6 	bl	8019b54 <osThreadNew>
 8011dc8:	4b20      	ldr	r3, [pc, #128]	@ (8011e4c <MX_FREERTOS_Init+0x124>)
 8011dca:	6018      	str	r0, [r3, #0]
  WatchDogHandle = osThreadNew(StartWatchDogTask, NULL, &WatchDog_attributes);
 8011dcc:	4a20      	ldr	r2, [pc, #128]	@ (8011e50 <MX_FREERTOS_Init+0x128>)
 8011dce:	2100      	movs	r1, #0
 8011dd0:	4820      	ldr	r0, [pc, #128]	@ (8011e54 <MX_FREERTOS_Init+0x12c>)
 8011dd2:	f007 febf 	bl	8019b54 <osThreadNew>
 8011dd6:	4b20      	ldr	r3, [pc, #128]	@ (8011e58 <MX_FREERTOS_Init+0x130>)
 8011dd8:	6018      	str	r0, [r3, #0]
}
 8011dda:	bd08      	pop	{r3, pc}
 8011ddc:	0803c6f8 	.word	0x0803c6f8
 8011de0:	20000a14 	.word	0x20000a14
 8011de4:	0803c6e8 	.word	0x0803c6e8
 8011de8:	20000a10 	.word	0x20000a10
 8011dec:	0803c768 	.word	0x0803c768
 8011df0:	20000a28 	.word	0x20000a28
 8011df4:	0803c750 	.word	0x0803c750
 8011df8:	20000a24 	.word	0x20000a24
 8011dfc:	0803c738 	.word	0x0803c738
 8011e00:	20000a20 	.word	0x20000a20
 8011e04:	0803c720 	.word	0x0803c720
 8011e08:	20000a1c 	.word	0x20000a1c
 8011e0c:	0803c708 	.word	0x0803c708
 8011e10:	20000a18 	.word	0x20000a18
 8011e14:	0803c834 	.word	0x0803c834
 8011e18:	08011e85 	.word	0x08011e85
 8011e1c:	20000a40 	.word	0x20000a40
 8011e20:	0803c810 	.word	0x0803c810
 8011e24:	08011369 	.word	0x08011369
 8011e28:	20000a3c 	.word	0x20000a3c
 8011e2c:	0803c7ec 	.word	0x0803c7ec
 8011e30:	080117a1 	.word	0x080117a1
 8011e34:	20000a38 	.word	0x20000a38
 8011e38:	0803c7c8 	.word	0x0803c7c8
 8011e3c:	080114d1 	.word	0x080114d1
 8011e40:	20000a34 	.word	0x20000a34
 8011e44:	0803c7a4 	.word	0x0803c7a4
 8011e48:	08011ac5 	.word	0x08011ac5
 8011e4c:	20000a30 	.word	0x20000a30
 8011e50:	0803c780 	.word	0x0803c780
 8011e54:	08011c79 	.word	0x08011c79
 8011e58:	20000a2c 	.word	0x20000a2c

08011e5c <EthResetBegin>:
void EthResetBegin(void){
 8011e5c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 8011e5e:	2200      	movs	r2, #0
 8011e60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011e64:	4801      	ldr	r0, [pc, #4]	@ (8011e6c <EthResetBegin+0x10>)
 8011e66:	f005 fcee 	bl	8017846 <HAL_GPIO_WritePin>
}
 8011e6a:	bd08      	pop	{r3, pc}
 8011e6c:	40020000 	.word	0x40020000

08011e70 <EthResetEnd>:
void EthResetEnd(void){
 8011e70:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 8011e72:	2201      	movs	r2, #1
 8011e74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011e78:	4801      	ldr	r0, [pc, #4]	@ (8011e80 <EthResetEnd+0x10>)
 8011e7a:	f005 fce4 	bl	8017846 <HAL_GPIO_WritePin>
}
 8011e7e:	bd08      	pop	{r3, pc}
 8011e80:	40020000 	.word	0x40020000

08011e84 <StartEthTask>:
{
 8011e84:	b530      	push	{r4, r5, lr}
 8011e86:	b0eb      	sub	sp, #428	@ 0x1ac
  struct               mg_tcpip_spi spi = {
 8011e88:	ad22      	add	r5, sp, #136	@ 0x88
 8011e8a:	4b66      	ldr	r3, [pc, #408]	@ (8012024 <StartEthTask+0x1a0>)
 8011e8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011e8e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  struct              mg_tcpip_if   mif = {
 8011e92:	ac02      	add	r4, sp, #8
 8011e94:	2280      	movs	r2, #128	@ 0x80
 8011e96:	2100      	movs	r1, #0
 8011e98:	4620      	mov	r0, r4
 8011e9a:	f01a fcb1 	bl	802c800 <memset>
 8011e9e:	2340      	movs	r3, #64	@ 0x40
 8011ea0:	f88d 3008 	strb.w	r3, [sp, #8]
 8011ea4:	2322      	movs	r3, #34	@ 0x22
 8011ea6:	f88d 3009 	strb.w	r3, [sp, #9]
													  *(uint8_t*)(UID_BASE),
 8011eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8012028 <StartEthTask+0x1a4>)
 8011eac:	7c1a      	ldrb	r2, [r3, #16]
  struct              mg_tcpip_if   mif = {
 8011eae:	f88d 200a 	strb.w	r2, [sp, #10]
													  *(uint8_t*)(UID_BASE + 0x02),
 8011eb2:	7c9a      	ldrb	r2, [r3, #18]
  struct              mg_tcpip_if   mif = {
 8011eb4:	f88d 200b 	strb.w	r2, [sp, #11]
													  *(uint8_t*)(UID_BASE + 0x04),
 8011eb8:	7d1a      	ldrb	r2, [r3, #20]
  struct              mg_tcpip_if   mif = {
 8011eba:	f88d 200c 	strb.w	r2, [sp, #12]
													  *(uint8_t*)(UID_BASE + 0x08)
 8011ebe:	7e1b      	ldrb	r3, [r3, #24]
  struct              mg_tcpip_if   mif = {
 8011ec0:	f88d 300d 	strb.w	r3, [sp, #13]
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8011eca:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8011ece:	4b57      	ldr	r3, [pc, #348]	@ (801202c <StartEthTask+0x1a8>)
 8011ed0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011ed2:	950c      	str	r5, [sp, #48]	@ 0x30
  mg_full_info.mgr =  &mgr;
 8011ed4:	4b56      	ldr	r3, [pc, #344]	@ (8012030 <StartEthTask+0x1ac>)
 8011ed6:	aa58      	add	r2, sp, #352	@ 0x160
 8011ed8:	601a      	str	r2, [r3, #0]
  mg_full_info.mgr_if =  &mif;
 8011eda:	605c      	str	r4, [r3, #4]
  while (mg_fs_mounted() == 0){
 8011edc:	e003      	b.n	8011ee6 <StartEthTask+0x62>
	  osDelay(500);
 8011ede:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011ee2:	f007 fe92 	bl	8019c0a <osDelay>
  while (mg_fs_mounted() == 0){
 8011ee6:	f00a fac3 	bl	801c470 <mg_fs_mounted>
 8011eea:	2800      	cmp	r0, #0
 8011eec:	d0f7      	beq.n	8011ede <StartEthTask+0x5a>
  mg_log_set_fn(my_custom_log_function, NULL);
 8011eee:	2100      	movs	r1, #0
 8011ef0:	4850      	ldr	r0, [pc, #320]	@ (8012034 <StartEthTask+0x1b0>)
 8011ef2:	f012 fcbf 	bl	8024874 <mg_log_set_fn>
  mg_mgr_init(&mgr);        // Mongoose event manager
 8011ef6:	a858      	add	r0, sp, #352	@ 0x160
 8011ef8:	f012 fea4 	bl	8024c44 <mg_mgr_init>
  mg_log_set(MG_LL_INFO);  // Set log level
 8011efc:	4b4e      	ldr	r3, [pc, #312]	@ (8012038 <StartEthTask+0x1b4>)
 8011efe:	2202      	movs	r2, #2
 8011f00:	601a      	str	r2, [r3, #0]
  web_handler = dash_hdl(); // Get dashboard handler
 8011f02:	f003 f87f 	bl	8015004 <dash_hdl>
 8011f06:	4604      	mov	r4, r0
  while(mif.mtu == 0){
 8011f08:	e00f      	b.n	8011f2a <StartEthTask+0xa6>
	  EthResetBegin();
 8011f0a:	f7ff ffa7 	bl	8011e5c <EthResetBegin>
	  osDelay(500);
 8011f0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011f12:	f007 fe7a 	bl	8019c0a <osDelay>
	  EthResetEnd();
 8011f16:	f7ff ffab 	bl	8011e70 <EthResetEnd>
	  osDelay(2000);
 8011f1a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8011f1e:	f007 fe74 	bl	8019c0a <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 8011f22:	a902      	add	r1, sp, #8
 8011f24:	a858      	add	r0, sp, #352	@ 0x160
 8011f26:	f018 fae3 	bl	802a4f0 <mg_tcpip_init>
  while(mif.mtu == 0){
 8011f2a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d0eb      	beq.n	8011f0a <StartEthTask+0x86>
  set_device_id(mif.mac, sizeof(mif.mac));
 8011f32:	2106      	movs	r1, #6
 8011f34:	a802      	add	r0, sp, #8
 8011f36:	f003 fdc1 	bl	8015abc <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 8011f3a:	4840      	ldr	r0, [pc, #256]	@ (801203c <StartEthTask+0x1b8>)
 8011f3c:	f003 f870 	bl	8015020 <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8011f40:	4b3b      	ldr	r3, [pc, #236]	@ (8012030 <StartEthTask+0x1ac>)
 8011f42:	4622      	mov	r2, r4
 8011f44:	493e      	ldr	r1, [pc, #248]	@ (8012040 <StartEthTask+0x1bc>)
 8011f46:	a858      	add	r0, sp, #352	@ 0x160
 8011f48:	f016 fd04 	bl	8028954 <mg_http_listen>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011f4c:	e006      	b.n	8011f5c <StartEthTask+0xd8>
    mg_mgr_poll(&mgr, 1);
 8011f4e:	2101      	movs	r1, #1
 8011f50:	a858      	add	r0, sp, #352	@ 0x160
 8011f52:	f019 f867 	bl	802b024 <mg_mgr_poll>
    osDelay(1);
 8011f56:	2001      	movs	r0, #1
 8011f58:	f007 fe57 	bl	8019c0a <osDelay>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011f5c:	f89d 3084 	ldrb.w	r3, [sp, #132]	@ 0x84
 8011f60:	2b03      	cmp	r3, #3
 8011f62:	d1f4      	bne.n	8011f4e <StartEthTask+0xca>
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011f64:	4b32      	ldr	r3, [pc, #200]	@ (8012030 <StartEthTask+0x1ac>)
 8011f66:	685b      	ldr	r3, [r3, #4]
 8011f68:	689a      	ldr	r2, [r3, #8]
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011f6a:	0e13      	lsrs	r3, r2, #24
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011f6c:	9301      	str	r3, [sp, #4]
 8011f6e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011f72:	9300      	str	r3, [sp, #0]
 8011f74:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011f78:	b2d2      	uxtb	r2, r2
 8011f7a:	4932      	ldr	r1, [pc, #200]	@ (8012044 <StartEthTask+0x1c0>)
 8011f7c:	2001      	movs	r0, #1
 8011f7e:	f000 fa63 	bl	8012448 <logging>
  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 8011f82:	2200      	movs	r2, #0
 8011f84:	4611      	mov	r1, r2
 8011f86:	a826      	add	r0, sp, #152	@ 0x98
 8011f88:	f7ff fbd2 	bl	8011730 <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 8011f8c:	f89d 3099 	ldrb.w	r3, [sp, #153]	@ 0x99
 8011f90:	b1eb      	cbz	r3, 8011fce <StartEthTask+0x14a>
	  logging(L_INFO, "MQTT function enabled.");
 8011f92:	492d      	ldr	r1, [pc, #180]	@ (8012048 <StartEthTask+0x1c4>)
 8011f94:	2001      	movs	r0, #1
 8011f96:	f000 fa57 	bl	8012448 <logging>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 8011f9a:	4b28      	ldr	r3, [pc, #160]	@ (801203c <StartEthTask+0x1b8>)
 8011f9c:	9301      	str	r3, [sp, #4]
 8011f9e:	f20d 133d 	addw	r3, sp, #317	@ 0x13d
 8011fa2:	9300      	str	r3, [sp, #0]
 8011fa4:	ab47      	add	r3, sp, #284	@ 0x11c
 8011fa6:	f10d 029a 	add.w	r2, sp, #154	@ 0x9a
 8011faa:	a902      	add	r1, sp, #8
 8011fac:	a858      	add	r0, sp, #352	@ 0x160
 8011fae:	f003 fc8f 	bl	80158d0 <mqtt_init>
  start_sntp(&mgr);
 8011fb2:	a858      	add	r0, sp, #352	@ 0x160
 8011fb4:	f004 fada 	bl	801656c <start_sntp>
  ssdp_start_server(&mgr, &mif);
 8011fb8:	a902      	add	r1, sp, #8
 8011fba:	a858      	add	r0, sp, #352	@ 0x160
 8011fbc:	f004 fca2 	bl	8016904 <ssdp_start_server>
  init_mb_tcp(&mgr);
 8011fc0:	a858      	add	r0, sp, #352	@ 0x160
 8011fc2:	f001 f957 	bl	8013274 <init_mb_tcp>
  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 8011fc6:	f009 f87f 	bl	801b0c8 <xTaskGetTickCount>
 8011fca:	4605      	mov	r5, r0
 8011fcc:	e008      	b.n	8011fe0 <StartEthTask+0x15c>
	  logging(L_INFO, "MQTT function disabled");
 8011fce:	491f      	ldr	r1, [pc, #124]	@ (801204c <StartEthTask+0x1c8>)
 8011fd0:	2001      	movs	r0, #1
 8011fd2:	f000 fa39 	bl	8012448 <logging>
 8011fd6:	e7ec      	b.n	8011fb2 <StartEthTask+0x12e>
      osDelay(1);
 8011fd8:	2001      	movs	r0, #1
 8011fda:	f007 fe16 	bl	8019c0a <osDelay>
	  last_tick = current_tick; // обновляем значение тиков
 8011fde:	4625      	mov	r5, r4
	  TickType_t current_tick = xTaskGetTickCount();
 8011fe0:	f009 f872 	bl	801b0c8 <xTaskGetTickCount>
 8011fe4:	4604      	mov	r4, r0
	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 8011fe6:	1b41      	subs	r1, r0, r5
 8011fe8:	a858      	add	r0, sp, #352	@ 0x160
 8011fea:	f019 f81b 	bl	802b024 <mg_mgr_poll>
      while (mif.driver->up(&mif) == false){
 8011fee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011ff0:	68db      	ldr	r3, [r3, #12]
 8011ff2:	a802      	add	r0, sp, #8
 8011ff4:	4798      	blx	r3
 8011ff6:	2800      	cmp	r0, #0
 8011ff8:	d1ee      	bne.n	8011fd8 <StartEthTask+0x154>
    	  EthResetBegin(); //enable reset state w5500
 8011ffa:	f7ff ff2f 	bl	8011e5c <EthResetBegin>
    	  osDelay(100);
 8011ffe:	2064      	movs	r0, #100	@ 0x64
 8012000:	f007 fe03 	bl	8019c0a <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 8012004:	f7ff ff34 	bl	8011e70 <EthResetEnd>
    	  osDelay(3000);
 8012008:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 801200c:	f007 fdfd 	bl	8019c0a <osDelay>
    	  mif.driver->init(&mif);
 8012010:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	a802      	add	r0, sp, #8
 8012016:	4798      	blx	r3
    	  osDelay(7000);
 8012018:	f641 3058 	movw	r0, #7000	@ 0x1b58
 801201c:	f007 fdf5 	bl	8019c0a <osDelay>
 8012020:	e7e5      	b.n	8011fee <StartEthTask+0x16a>
 8012022:	bf00      	nop
 8012024:	080378ac 	.word	0x080378ac
 8012028:	1fff7a00 	.word	0x1fff7a00
 801202c:	20000128 	.word	0x20000128
 8012030:	20000a48 	.word	0x20000a48
 8012034:	080112e5 	.word	0x080112e5
 8012038:	2000013c 	.word	0x2000013c
 801203c:	08011731 	.word	0x08011731
 8012040:	08037dd8 	.word	0x08037dd8
 8012044:	08037dec 	.word	0x08037dec
 8012048:	08037e08 	.word	0x08037e08
 801204c:	08037e20 	.word	0x08037e20

08012050 <eMBRegDiscreteCB>:
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8012050:	b20b      	sxth	r3, r1
 8012052:	2b00      	cmp	r3, #0
 8012054:	dd20      	ble.n	8012098 <eMBRegDiscreteCB+0x48>
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete){
 8012056:	b570      	push	{r4, r5, r6, lr}
 8012058:	b082      	sub	sp, #8
 801205a:	4606      	mov	r6, r0
 801205c:	4615      	mov	r5, r2
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 801205e:	188b      	adds	r3, r1, r2
 8012060:	2b04      	cmp	r3, #4
 8012062:	dd02      	ble.n	801206a <eMBRegDiscreteCB+0x1a>
		eStatus = MB_ENOREG;
 8012064:	2001      	movs	r0, #1
}
 8012066:	b002      	add	sp, #8
 8012068:	bd70      	pop	{r4, r5, r6, pc}
		usAddress --; /* to c-style address */
 801206a:	1e4c      	subs	r4, r1, #1
 801206c:	b2a4      	uxth	r4, r4
		RW_parameters_from_queue(input, S_INPUTS, S_READ);
 801206e:	2200      	movs	r2, #0
 8012070:	2101      	movs	r1, #1
 8012072:	a801      	add	r0, sp, #4
 8012074:	f7ff fb5c 	bl	8011730 <RW_parameters_from_queue>
		for(int i = usAddress; i < usNDiscrete; i++){
 8012078:	e00a      	b.n	8012090 <eMBRegDiscreteCB+0x40>
			xMBUtilSetBits( pucRegBuffer, i, 1, input[i] );
 801207a:	f104 0308 	add.w	r3, r4, #8
 801207e:	446b      	add	r3, sp
 8012080:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8012084:	2201      	movs	r2, #1
 8012086:	b2a1      	uxth	r1, r4
 8012088:	4630      	mov	r0, r6
 801208a:	f000 ff49 	bl	8012f20 <xMBUtilSetBits>
		for(int i = usAddress; i < usNDiscrete; i++){
 801208e:	3401      	adds	r4, #1
 8012090:	42a5      	cmp	r5, r4
 8012092:	dcf2      	bgt.n	801207a <eMBRegDiscreteCB+0x2a>
	eMBErrorCode eStatus = MB_ENOERR;
 8012094:	2000      	movs	r0, #0
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8012096:	e7e6      	b.n	8012066 <eMBRegDiscreteCB+0x16>
		eStatus = MB_ENOREG;
 8012098:	2001      	movs	r0, #1
}
 801209a:	4770      	bx	lr

0801209c <eMBRegCoilsCB>:
{
 801209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801209e:	b083      	sub	sp, #12
 80120a0:	4616      	mov	r6, r2
	if (((int16_t) usAddress >= OUTPUTS_FIRST_INDEX) && (usAddress + usNCoils <= OUTPUTS_FIRST_INDEX + OUTPUTS_COUNT)){
 80120a2:	b20a      	sxth	r2, r1
 80120a4:	2a00      	cmp	r2, #0
 80120a6:	dd43      	ble.n	8012130 <eMBRegCoilsCB+0x94>
 80120a8:	4605      	mov	r5, r0
 80120aa:	461f      	mov	r7, r3
 80120ac:	198b      	adds	r3, r1, r6
 80120ae:	2b04      	cmp	r3, #4
 80120b0:	dc41      	bgt.n	8012136 <eMBRegCoilsCB+0x9a>
		switch (eMode) {
 80120b2:	b327      	cbz	r7, 80120fe <eMBRegCoilsCB+0x62>
 80120b4:	2f01      	cmp	r7, #1
 80120b6:	d139      	bne.n	801212c <eMBRegCoilsCB+0x90>
				usAddress --; /* to c-style address */
 80120b8:	3901      	subs	r1, #1
 80120ba:	b28c      	uxth	r4, r1
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_READ);
 80120bc:	2200      	movs	r2, #0
 80120be:	2102      	movs	r1, #2
 80120c0:	a801      	add	r0, sp, #4
 80120c2:	f7ff fb35 	bl	8011730 <RW_parameters_from_queue>
				for(int i = usAddress; i < usNCoils + usAddress; i++){
 80120c6:	4627      	mov	r7, r4
 80120c8:	e00f      	b.n	80120ea <eMBRegCoilsCB+0x4e>
					UCHAR wbit = xMBUtilGetBits(pucRegBuffer, i, 1 );
 80120ca:	2201      	movs	r2, #1
 80120cc:	b2b9      	uxth	r1, r7
 80120ce:	4628      	mov	r0, r5
 80120d0:	f000 ff5a 	bl	8012f88 <xMBUtilGetBits>
					outputs[i] = xMBUtilGetBits(pucRegBuffer, 0, 1 );
 80120d4:	2201      	movs	r2, #1
 80120d6:	2100      	movs	r1, #0
 80120d8:	4628      	mov	r0, r5
 80120da:	f000 ff55 	bl	8012f88 <xMBUtilGetBits>
 80120de:	f107 0308 	add.w	r3, r7, #8
 80120e2:	446b      	add	r3, sp
 80120e4:	f803 0c04 	strb.w	r0, [r3, #-4]
				for(int i = usAddress; i < usNCoils + usAddress; i++){
 80120e8:	3701      	adds	r7, #1
 80120ea:	1933      	adds	r3, r6, r4
 80120ec:	42bb      	cmp	r3, r7
 80120ee:	dcec      	bgt.n	80120ca <eMBRegCoilsCB+0x2e>
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_WRITE);
 80120f0:	2201      	movs	r2, #1
 80120f2:	2102      	movs	r1, #2
 80120f4:	a801      	add	r0, sp, #4
 80120f6:	f7ff fb1b 	bl	8011730 <RW_parameters_from_queue>
				return MB_ENOERR;
 80120fa:	2000      	movs	r0, #0
 80120fc:	e019      	b.n	8012132 <eMBRegCoilsCB+0x96>
				usAddress --; /* to c-style address */
 80120fe:	1e4c      	subs	r4, r1, #1
 8012100:	b2a4      	uxth	r4, r4
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_READ);
 8012102:	2200      	movs	r2, #0
 8012104:	2102      	movs	r1, #2
 8012106:	a801      	add	r0, sp, #4
 8012108:	f7ff fb12 	bl	8011730 <RW_parameters_from_queue>
				for(int i = usAddress; i < usNCoils; i++){
 801210c:	e00a      	b.n	8012124 <eMBRegCoilsCB+0x88>
					xMBUtilSetBits( pucRegBuffer, i, 1, outputs[i] );
 801210e:	f104 0308 	add.w	r3, r4, #8
 8012112:	446b      	add	r3, sp
 8012114:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8012118:	2201      	movs	r2, #1
 801211a:	b2a1      	uxth	r1, r4
 801211c:	4628      	mov	r0, r5
 801211e:	f000 feff 	bl	8012f20 <xMBUtilSetBits>
				for(int i = usAddress; i < usNCoils; i++){
 8012122:	3401      	adds	r4, #1
 8012124:	42a6      	cmp	r6, r4
 8012126:	dcf2      	bgt.n	801210e <eMBRegCoilsCB+0x72>
				return MB_ENOERR;
 8012128:	4638      	mov	r0, r7
 801212a:	e002      	b.n	8012132 <eMBRegCoilsCB+0x96>
		switch (eMode) {
 801212c:	2001      	movs	r0, #1
				break;
 801212e:	e000      	b.n	8012132 <eMBRegCoilsCB+0x96>
	return MB_ENOREG;
 8012130:	2001      	movs	r0, #1
}
 8012132:	b003      	add	sp, #12
 8012134:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return MB_ENOREG;
 8012136:	2001      	movs	r0, #1
 8012138:	e7fb      	b.n	8012132 <eMBRegCoilsCB+0x96>

0801213a <eMBRegInputCB>:
}
 801213a:	2001      	movs	r0, #1
 801213c:	4770      	bx	lr

0801213e <eMBRegHoldingCB>:
}
 801213e:	2001      	movs	r0, #1
 8012140:	4770      	bx	lr
	...

08012144 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8012144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012148:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801214a:	2400      	movs	r4, #0
 801214c:	9403      	str	r4, [sp, #12]
 801214e:	9404      	str	r4, [sp, #16]
 8012150:	9405      	str	r4, [sp, #20]
 8012152:	9406      	str	r4, [sp, #24]
 8012154:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8012156:	9400      	str	r4, [sp, #0]
 8012158:	4b3c      	ldr	r3, [pc, #240]	@ (801224c <MX_GPIO_Init+0x108>)
 801215a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801215c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8012160:	631a      	str	r2, [r3, #48]	@ 0x30
 8012162:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012164:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8012168:	9200      	str	r2, [sp, #0]
 801216a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801216c:	9401      	str	r4, [sp, #4]
 801216e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012170:	f042 0201 	orr.w	r2, r2, #1
 8012174:	631a      	str	r2, [r3, #48]	@ 0x30
 8012176:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012178:	f002 0201 	and.w	r2, r2, #1
 801217c:	9201      	str	r2, [sp, #4]
 801217e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012180:	9402      	str	r4, [sp, #8]
 8012182:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012184:	f042 0202 	orr.w	r2, r2, #2
 8012188:	631a      	str	r2, [r3, #48]	@ 0x30
 801218a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801218c:	f003 0302 	and.w	r3, r3, #2
 8012190:	9302      	str	r3, [sp, #8]
 8012192:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 8012194:	4e2e      	ldr	r6, [pc, #184]	@ (8012250 <MX_GPIO_Init+0x10c>)
 8012196:	4622      	mov	r2, r4
 8012198:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 801219c:	4630      	mov	r0, r6
 801219e:	f005 fb52 	bl	8017846 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80121a2:	4d2c      	ldr	r5, [pc, #176]	@ (8012254 <MX_GPIO_Init+0x110>)
 80121a4:	4622      	mov	r2, r4
 80121a6:	2107      	movs	r1, #7
 80121a8:	4628      	mov	r0, r5
 80121aa:	f005 fb4c 	bl	8017846 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 80121ae:	2201      	movs	r2, #1
 80121b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80121b4:	4628      	mov	r0, r5
 80121b6:	f005 fb46 	bl	8017846 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80121ba:	2201      	movs	r2, #1
 80121bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80121c0:	4630      	mov	r0, r6
 80121c2:	f005 fb40 	bl	8017846 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : input1_Pin input2_Pin input3_Pin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 80121c6:	f04f 0907 	mov.w	r9, #7
 80121ca:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80121ce:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80121d0:	f04f 0802 	mov.w	r8, #2
 80121d4:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80121d8:	a903      	add	r1, sp, #12
 80121da:	4630      	mov	r0, r6
 80121dc:	f005 f9c0 	bl	8017560 <HAL_GPIO_Init>

  /*Configure GPIO pins : coil1_Pin coil2_Pin coil3_Pin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 80121e0:	23e0      	movs	r3, #224	@ 0xe0
 80121e2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80121e4:	2701      	movs	r7, #1
 80121e6:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80121e8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80121ea:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80121ec:	a903      	add	r1, sp, #12
 80121ee:	4630      	mov	r0, r6
 80121f0:	f005 f9b6 	bl	8017560 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80121f4:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80121f8:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80121fa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80121fc:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80121fe:	a903      	add	r1, sp, #12
 8012200:	4628      	mov	r0, r5
 8012202:	f005 f9ad 	bl	8017560 <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_CS_Pin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8012206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801220a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801220c:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801220e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012210:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8012214:	a903      	add	r1, sp, #12
 8012216:	4628      	mov	r0, r5
 8012218:	f005 f9a2 	bl	8017560 <HAL_GPIO_Init>

  /*Configure GPIO pins : ETH_RST_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 801221c:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8012220:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012222:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012224:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012226:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801222a:	a903      	add	r1, sp, #12
 801222c:	4630      	mov	r0, r6
 801222e:	f005 f997 	bl	8017560 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8012232:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012236:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012238:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801223a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 801223c:	a903      	add	r1, sp, #12
 801223e:	4628      	mov	r0, r5
 8012240:	f005 f98e 	bl	8017560 <HAL_GPIO_Init>

}
 8012244:	b009      	add	sp, #36	@ 0x24
 8012246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801224a:	bf00      	nop
 801224c:	40023800 	.word	0x40023800
 8012250:	40020000 	.word	0x40020000
 8012254:	40020400 	.word	0x40020400

08012258 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8012258:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 801225a:	480b      	ldr	r0, [pc, #44]	@ (8012288 <MX_I2C1_Init+0x30>)
 801225c:	4b0b      	ldr	r3, [pc, #44]	@ (801228c <MX_I2C1_Init+0x34>)
 801225e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 200000;
 8012260:	4b0b      	ldr	r3, [pc, #44]	@ (8012290 <MX_I2C1_Init+0x38>)
 8012262:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8012264:	2300      	movs	r3, #0
 8012266:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8012268:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801226a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 801226e:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012270:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8012272:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012274:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012276:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8012278:	f005 fc86 	bl	8017b88 <HAL_I2C_Init>
 801227c:	b900      	cbnz	r0, 8012280 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 801227e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8012280:	f000 f98c 	bl	801259c <Error_Handler>
}
 8012284:	e7fb      	b.n	801227e <MX_I2C1_Init+0x26>
 8012286:	bf00      	nop
 8012288:	20000a50 	.word	0x20000a50
 801228c:	40005400 	.word	0x40005400
 8012290:	00030d40 	.word	0x00030d40

08012294 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8012294:	b530      	push	{r4, r5, lr}
 8012296:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012298:	2300      	movs	r3, #0
 801229a:	9303      	str	r3, [sp, #12]
 801229c:	9304      	str	r3, [sp, #16]
 801229e:	9305      	str	r3, [sp, #20]
 80122a0:	9306      	str	r3, [sp, #24]
 80122a2:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 80122a4:	6802      	ldr	r2, [r0, #0]
 80122a6:	4b15      	ldr	r3, [pc, #84]	@ (80122fc <HAL_I2C_MspInit+0x68>)
 80122a8:	429a      	cmp	r2, r3
 80122aa:	d001      	beq.n	80122b0 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80122ac:	b009      	add	sp, #36	@ 0x24
 80122ae:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80122b0:	2500      	movs	r5, #0
 80122b2:	9501      	str	r5, [sp, #4]
 80122b4:	4c12      	ldr	r4, [pc, #72]	@ (8012300 <HAL_I2C_MspInit+0x6c>)
 80122b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80122b8:	f043 0302 	orr.w	r3, r3, #2
 80122bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80122be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80122c0:	f003 0302 	and.w	r3, r3, #2
 80122c4:	9301      	str	r3, [sp, #4]
 80122c6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80122c8:	23c0      	movs	r3, #192	@ 0xc0
 80122ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80122cc:	2312      	movs	r3, #18
 80122ce:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80122d0:	2301      	movs	r3, #1
 80122d2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80122d4:	2303      	movs	r3, #3
 80122d6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80122d8:	2304      	movs	r3, #4
 80122da:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80122dc:	a903      	add	r1, sp, #12
 80122de:	4809      	ldr	r0, [pc, #36]	@ (8012304 <HAL_I2C_MspInit+0x70>)
 80122e0:	f005 f93e 	bl	8017560 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80122e4:	9502      	str	r5, [sp, #8]
 80122e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80122e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80122ec:	6423      	str	r3, [r4, #64]	@ 0x40
 80122ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80122f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80122f4:	9302      	str	r3, [sp, #8]
 80122f6:	9b02      	ldr	r3, [sp, #8]
}
 80122f8:	e7d8      	b.n	80122ac <HAL_I2C_MspInit+0x18>
 80122fa:	bf00      	nop
 80122fc:	40005400 	.word	0x40005400
 8012300:	40023800 	.word	0x40023800
 8012304:	40020400 	.word	0x40020400

08012308 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 8012308:	6802      	ldr	r2, [r0, #0]
 801230a:	4b0a      	ldr	r3, [pc, #40]	@ (8012334 <HAL_I2C_MspDeInit+0x2c>)
 801230c:	429a      	cmp	r2, r3
 801230e:	d000      	beq.n	8012312 <HAL_I2C_MspDeInit+0xa>
 8012310:	4770      	bx	lr
{
 8012312:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8012314:	4a08      	ldr	r2, [pc, #32]	@ (8012338 <HAL_I2C_MspDeInit+0x30>)
 8012316:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8012318:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801231c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 801231e:	4c07      	ldr	r4, [pc, #28]	@ (801233c <HAL_I2C_MspDeInit+0x34>)
 8012320:	2140      	movs	r1, #64	@ 0x40
 8012322:	4620      	mov	r0, r4
 8012324:	f005 fa00 	bl	8017728 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8012328:	2180      	movs	r1, #128	@ 0x80
 801232a:	4620      	mov	r0, r4
 801232c:	f005 f9fc 	bl	8017728 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8012330:	bd10      	pop	{r4, pc}
 8012332:	bf00      	nop
 8012334:	40005400 	.word	0x40005400
 8012338:	40023800 	.word	0x40023800
 801233c:	40020400 	.word	0x40020400

08012340 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8012340:	b508      	push	{r3, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8012342:	4807      	ldr	r0, [pc, #28]	@ (8012360 <MX_IWDG_Init+0x20>)
 8012344:	4b07      	ldr	r3, [pc, #28]	@ (8012364 <MX_IWDG_Init+0x24>)
 8012346:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8012348:	2303      	movs	r3, #3
 801234a:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 4095;
 801234c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8012350:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8012352:	f005 fe97 	bl	8018084 <HAL_IWDG_Init>
 8012356:	b900      	cbnz	r0, 801235a <MX_IWDG_Init+0x1a>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8012358:	bd08      	pop	{r3, pc}
    Error_Handler();
 801235a:	f000 f91f 	bl	801259c <Error_Handler>
}
 801235e:	e7fb      	b.n	8012358 <MX_IWDG_Init+0x18>
 8012360:	20000aa4 	.word	0x20000aa4
 8012364:	40003000 	.word	0x40003000

08012368 <proto>:
//#define time_ms_now() mg_now()
#define time_ms_now() get_rtc_timestamp_ms()
logging_level_t _level_ = L_DEBUG;
const char *level_strings[] = {"DEBUG", "INFO", "WARNING", "ERROR"};

static void proto(struct log_message mess ){};
 8012368:	b084      	sub	sp, #16
 801236a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801236e:	b004      	add	sp, #16
 8012370:	4770      	bx	lr

08012372 <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 8012372:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8012374:	fb01 f400 	mul.w	r4, r1, r0
 8012378:	4620      	mov	r0, r4
 801237a:	f009 fe4d 	bl	801c018 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801237e:	4605      	mov	r5, r0
 8012380:	b118      	cbz	r0, 801238a <mg_calloc+0x18>
 8012382:	4622      	mov	r2, r4
 8012384:	2100      	movs	r1, #0
 8012386:	f01a fa3b 	bl	802c800 <memset>
  return p;
}
 801238a:	4628      	mov	r0, r5
 801238c:	bd38      	pop	{r3, r4, r5, pc}
	...

08012390 <get_rtc_timestamp_ms>:
void (*_send_log_mess)(struct log_message mess) = proto;



// Function to get current timestamp from RTC
time_t get_rtc_timestamp_ms(void) {
 8012390:	b510      	push	{r4, lr}
 8012392:	b090      	sub	sp, #64	@ 0x40
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;

    // Read the current date and time from RTC
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8012394:	4c25      	ldr	r4, [pc, #148]	@ (801242c <get_rtc_timestamp_ms+0x9c>)
 8012396:	2200      	movs	r2, #0
 8012398:	a90b      	add	r1, sp, #44	@ 0x2c
 801239a:	4620      	mov	r0, r4
 801239c:	f006 fc1d 	bl	8018bda <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80123a0:	2200      	movs	r2, #0
 80123a2:	a90a      	add	r1, sp, #40	@ 0x28
 80123a4:	4620      	mov	r0, r4
 80123a6:	f006 fc3e 	bl	8018c26 <HAL_RTC_GetDate>

    // Convert RTC date and time to UNIX timestamp
    struct tm t;
    memset(&t, 0, sizeof(struct tm));
 80123aa:	2224      	movs	r2, #36	@ 0x24
 80123ac:	2100      	movs	r1, #0
 80123ae:	a801      	add	r0, sp, #4
 80123b0:	f01a fa26 	bl	802c800 <memset>

    t.tm_year = sDate.Year + 100;  // Year since 1900 (RTC year starts from 2000)
 80123b4:	f89d 302b 	ldrb.w	r3, [sp, #43]	@ 0x2b
 80123b8:	3364      	adds	r3, #100	@ 0x64
 80123ba:	9306      	str	r3, [sp, #24]
    t.tm_mon = sDate.Month - 1;    // RTC month is 1-12, struct tm month is 0-11
 80123bc:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 80123c0:	3b01      	subs	r3, #1
 80123c2:	9305      	str	r3, [sp, #20]
    t.tm_mday = sDate.Date;
 80123c4:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 80123c8:	9304      	str	r3, [sp, #16]
    t.tm_hour = sTime.Hours;
 80123ca:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 80123ce:	9303      	str	r3, [sp, #12]
    t.tm_min = sTime.Minutes;
 80123d0:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 80123d4:	9302      	str	r3, [sp, #8]
    t.tm_sec = sTime.Seconds;
 80123d6:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 80123da:	9301      	str	r3, [sp, #4]

    time_t timestamp = mktime(&t); // Convert to UNIX timestamp
 80123dc:	a801      	add	r0, sp, #4
 80123de:	f01a fd0f 	bl	802ce00 <mktime>

    // Add milliseconds from RTC subseconds
    uint32_t ms = 1000 - ((sTime.SubSeconds * 1000) / sTime.SecondFraction + 1);
 80123e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80123e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80123e8:	fb03 f202 	mul.w	r2, r3, r2
 80123ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80123ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80123f2:	f5c2 7279 	rsb	r2, r2, #996	@ 0x3e4
 80123f6:	3203      	adds	r2, #3

    return (timestamp * 1000) + ms;
 80123f8:	ea4f 1c41 	mov.w	ip, r1, lsl #5
 80123fc:	ea4c 6cd0 	orr.w	ip, ip, r0, lsr #27
 8012400:	0143      	lsls	r3, r0, #5
 8012402:	1a1b      	subs	r3, r3, r0
 8012404:	eb6c 0c01 	sbc.w	ip, ip, r1
 8012408:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801240c:	ea4c 7c93 	orr.w	ip, ip, r3, lsr #30
 8012410:	009b      	lsls	r3, r3, #2
 8012412:	181b      	adds	r3, r3, r0
 8012414:	eb41 010c 	adc.w	r1, r1, ip
 8012418:	00c9      	lsls	r1, r1, #3
 801241a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 801241e:	00db      	lsls	r3, r3, #3
 8012420:	18d0      	adds	r0, r2, r3
}
 8012422:	f141 0100 	adc.w	r1, r1, #0
 8012426:	b010      	add	sp, #64	@ 0x40
 8012428:	bd10      	pop	{r4, pc}
 801242a:	bf00      	nop
 801242c:	20000ab4 	.word	0x20000ab4

08012430 <reg_logging_fn>:



void reg_logging_fn(void (* fn)(struct log_message)){
	if (fn != NULL){
 8012430:	b108      	cbz	r0, 8012436 <reg_logging_fn+0x6>
		_send_log_mess = fn;
 8012432:	4a01      	ldr	r2, [pc, #4]	@ (8012438 <reg_logging_fn+0x8>)
 8012434:	6010      	str	r0, [r2, #0]
	}
}
 8012436:	4770      	bx	lr
 8012438:	20000000 	.word	0x20000000

0801243c <logger_set_level>:

void logger_set_level(logging_level_t l){
	_level_ = l;
 801243c:	4b01      	ldr	r3, [pc, #4]	@ (8012444 <logger_set_level+0x8>)
 801243e:	7018      	strb	r0, [r3, #0]
}
 8012440:	4770      	bx	lr
 8012442:	bf00      	nop
 8012444:	20000ab0 	.word	0x20000ab0

08012448 <logging>:

void logging(logging_level_t level, const char *format, ...){
 8012448:	b40e      	push	{r1, r2, r3}
 801244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801244c:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
    int formatted_len;
    int time_len;

    char * tmp_buf = NULL;

    if (level < _level_) return;
 8012450:	4b44      	ldr	r3, [pc, #272]	@ (8012564 <logging+0x11c>)
 8012452:	781b      	ldrb	r3, [r3, #0]
 8012454:	4283      	cmp	r3, r0
 8012456:	d905      	bls.n	8012464 <logging+0x1c>
    if (_send_log_mess) {
        _send_log_mess(mess);
    }

    free(tmp_buf);
}
 8012458:	f50d 7d1c 	add.w	sp, sp, #624	@ 0x270
 801245c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012460:	b003      	add	sp, #12
 8012462:	4770      	bx	lr
 8012464:	4604      	mov	r4, r0
    tmp_buf = calloc(LOG_MES_TEXT_LEN, sizeof(char));
 8012466:	2101      	movs	r1, #1
 8012468:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801246c:	f7ff ff81 	bl	8012372 <mg_calloc>
    if (!tmp_buf){
 8012470:	4605      	mov	r5, r0
 8012472:	2800      	cmp	r0, #0
 8012474:	d0f0      	beq.n	8012458 <logging+0x10>
    memset(&mess, 0, sizeof(log_message_t));
 8012476:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801247a:	2100      	movs	r1, #0
 801247c:	a85b      	add	r0, sp, #364	@ 0x16c
 801247e:	f01a f9bf 	bl	802c800 <memset>
    mess.log_level = level;
 8012482:	f88d 416c 	strb.w	r4, [sp, #364]	@ 0x16c
    double ms_now = time_ms_now();
 8012486:	f7ff ff83 	bl	8012390 <get_rtc_timestamp_ms>
 801248a:	f7fe f89f 	bl	80105cc <__aeabi_l2d>
 801248e:	4606      	mov	r6, r0
 8012490:	460f      	mov	r7, r1
    time_t now = (time_t)(ms_now / 1000.0);
 8012492:	2200      	movs	r2, #0
 8012494:	4b34      	ldr	r3, [pc, #208]	@ (8012568 <logging+0x120>)
 8012496:	f7fe f9f1 	bl	801087c <__aeabi_ddiv>
 801249a:	f7fe fc89 	bl	8010db0 <__aeabi_d2lz>
 801249e:	e9cd 0158 	strd	r0, r1, [sp, #352]	@ 0x160
    localtime_r(&now, &tm_info);
 80124a2:	a94f      	add	r1, sp, #316	@ 0x13c
 80124a4:	a858      	add	r0, sp, #352	@ 0x160
 80124a6:	f01a fae7 	bl	802ca78 <localtime_r>
    time_len = strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", &tm_info);
 80124aa:	ab4f      	add	r3, sp, #316	@ 0x13c
 80124ac:	4a2f      	ldr	r2, [pc, #188]	@ (801256c <logging+0x124>)
 80124ae:	2140      	movs	r1, #64	@ 0x40
 80124b0:	a83f      	add	r0, sp, #252	@ 0xfc
 80124b2:	f01b fb81 	bl	802dbb8 <strftime>
 80124b6:	4604      	mov	r4, r0
    int millis = (int)(ms_now) % 1000;
 80124b8:	4630      	mov	r0, r6
 80124ba:	4639      	mov	r1, r7
 80124bc:	f7fe fb64 	bl	8010b88 <__aeabi_d2iz>
 80124c0:	4a2b      	ldr	r2, [pc, #172]	@ (8012570 <logging+0x128>)
 80124c2:	fb82 3200 	smull	r3, r2, r2, r0
 80124c6:	17c3      	asrs	r3, r0, #31
 80124c8:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    time_len += snprintf(time_str + time_len, sizeof(time_str) - time_len, ".%03d", millis);
 80124cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80124d0:	fb02 0313 	mls	r3, r2, r3, r0
 80124d4:	4a27      	ldr	r2, [pc, #156]	@ (8012574 <logging+0x12c>)
 80124d6:	f1c4 0140 	rsb	r1, r4, #64	@ 0x40
 80124da:	a83f      	add	r0, sp, #252	@ 0xfc
 80124dc:	4420      	add	r0, r4
 80124de:	f019 ff65 	bl	802c3ac <snprintf>
 80124e2:	4404      	add	r4, r0
    time_str[time_len++] = ' ';
 80124e4:	1c63      	adds	r3, r4, #1
 80124e6:	2220      	movs	r2, #32
 80124e8:	a93f      	add	r1, sp, #252	@ 0xfc
 80124ea:	550a      	strb	r2, [r1, r4]
    time_str[time_len++] = '\0';
 80124ec:	2200      	movs	r2, #0
 80124ee:	54ca      	strb	r2, [r1, r3]
    va_start(args, format);
 80124f0:	aba2      	add	r3, sp, #648	@ 0x288
 80124f2:	935a      	str	r3, [sp, #360]	@ 0x168
    formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN - 3, format, args);
 80124f4:	f20d 166d 	addw	r6, sp, #365	@ 0x16d
 80124f8:	9aa1      	ldr	r2, [sp, #644]	@ 0x284
 80124fa:	21fd      	movs	r1, #253	@ 0xfd
 80124fc:	4630      	mov	r0, r6
 80124fe:	f01a f8f1 	bl	802c6e4 <vsnprintf>
 8012502:	4604      	mov	r4, r0
    snprintf(tmp_buf ,LOG_MES_TEXT_LEN, "%s %s:%s\r\n", time_str, level_strings[mess.log_level], mess.log_text);
 8012504:	f89d 216c 	ldrb.w	r2, [sp, #364]	@ 0x16c
 8012508:	9601      	str	r6, [sp, #4]
 801250a:	4b1b      	ldr	r3, [pc, #108]	@ (8012578 <logging+0x130>)
 801250c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012510:	9300      	str	r3, [sp, #0]
 8012512:	ab3f      	add	r3, sp, #252	@ 0xfc
 8012514:	4a19      	ldr	r2, [pc, #100]	@ (801257c <logging+0x134>)
 8012516:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801251a:	4628      	mov	r0, r5
 801251c:	f019 ff46 	bl	802c3ac <snprintf>
     if (formatted_len >= 0 && formatted_len < LOG_MES_TEXT_LEN - 10) {
 8012520:	2cf5      	cmp	r4, #245	@ 0xf5
 8012522:	d81b      	bhi.n	801255c <logging+0x114>
         mess.log_len = strlen(tmp_buf);
 8012524:	4628      	mov	r0, r5
 8012526:	f7fd febb 	bl	80102a0 <strlen>
 801252a:	f88d 026d 	strb.w	r0, [sp, #621]	@ 0x26d
     strncpy(mess.log_text, tmp_buf, LOG_MES_TEXT_LEN);
 801252e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012532:	4629      	mov	r1, r5
 8012534:	f20d 106d 	addw	r0, sp, #365	@ 0x16d
 8012538:	f01a f9a9 	bl	802c88e <strncpy>
    if (_send_log_mess) {
 801253c:	4b10      	ldr	r3, [pc, #64]	@ (8012580 <logging+0x138>)
 801253e:	681e      	ldr	r6, [r3, #0]
 8012540:	b146      	cbz	r6, 8012554 <logging+0x10c>
        _send_log_mess(mess);
 8012542:	ac5b      	add	r4, sp, #364	@ 0x16c
 8012544:	22f2      	movs	r2, #242	@ 0xf2
 8012546:	a95f      	add	r1, sp, #380	@ 0x17c
 8012548:	4668      	mov	r0, sp
 801254a:	f01b fed5 	bl	802e2f8 <memcpy>
 801254e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012552:	47b0      	blx	r6
    free(tmp_buf);
 8012554:	4628      	mov	r0, r5
 8012556:	f009 fde1 	bl	801c11c <vPortFree>
 801255a:	e77d      	b.n	8012458 <logging+0x10>
         mess.log_len = LOG_MES_TEXT_LEN - 10;
 801255c:	23f6      	movs	r3, #246	@ 0xf6
 801255e:	f88d 326d 	strb.w	r3, [sp, #621]	@ 0x26d
 8012562:	e7e4      	b.n	801252e <logging+0xe6>
 8012564:	20000ab0 	.word	0x20000ab0
 8012568:	408f4000 	.word	0x408f4000
 801256c:	08037ecc 	.word	0x08037ecc
 8012570:	10624dd3 	.word	0x10624dd3
 8012574:	08037ee0 	.word	0x08037ee0
 8012578:	20000004 	.word	0x20000004
 801257c:	08037ee8 	.word	0x08037ee8
 8012580:	20000000 	.word	0x20000000

08012584 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012584:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9)
 8012586:	6802      	ldr	r2, [r0, #0]
 8012588:	4b03      	ldr	r3, [pc, #12]	@ (8012598 <HAL_TIM_PeriodElapsedCallback+0x14>)
 801258a:	429a      	cmp	r2, r3
 801258c:	d000      	beq.n	8012590 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 801258e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8012590:	f004 fca2 	bl	8016ed8 <HAL_IncTick>
}
 8012594:	e7fb      	b.n	801258e <HAL_TIM_PeriodElapsedCallback+0xa>
 8012596:	bf00      	nop
 8012598:	40014000 	.word	0x40014000

0801259c <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801259c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801259e:	e7fe      	b.n	801259e <Error_Handler+0x2>

080125a0 <SystemClock_Config>:
{
 80125a0:	b500      	push	{lr}
 80125a2:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80125a4:	2230      	movs	r2, #48	@ 0x30
 80125a6:	2100      	movs	r1, #0
 80125a8:	a808      	add	r0, sp, #32
 80125aa:	f01a f929 	bl	802c800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80125ae:	2300      	movs	r3, #0
 80125b0:	9303      	str	r3, [sp, #12]
 80125b2:	9304      	str	r3, [sp, #16]
 80125b4:	9305      	str	r3, [sp, #20]
 80125b6:	9306      	str	r3, [sp, #24]
 80125b8:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80125ba:	9301      	str	r3, [sp, #4]
 80125bc:	4a20      	ldr	r2, [pc, #128]	@ (8012640 <SystemClock_Config+0xa0>)
 80125be:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80125c0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80125c4:	6411      	str	r1, [r2, #64]	@ 0x40
 80125c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80125c8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80125cc:	9201      	str	r2, [sp, #4]
 80125ce:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80125d0:	9302      	str	r3, [sp, #8]
 80125d2:	4b1c      	ldr	r3, [pc, #112]	@ (8012644 <SystemClock_Config+0xa4>)
 80125d4:	681a      	ldr	r2, [r3, #0]
 80125d6:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80125da:	601a      	str	r2, [r3, #0]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80125e2:	9302      	str	r3, [sp, #8]
 80125e4:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80125e6:	2309      	movs	r3, #9
 80125e8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80125ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80125ee:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80125f0:	2301      	movs	r3, #1
 80125f2:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80125f4:	2202      	movs	r2, #2
 80125f6:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80125f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80125fc:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80125fe:	2304      	movs	r3, #4
 8012600:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8012602:	2164      	movs	r1, #100	@ 0x64
 8012604:	9111      	str	r1, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8012606:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8012608:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801260a:	a808      	add	r0, sp, #32
 801260c:	f005 fd6c 	bl	80180e8 <HAL_RCC_OscConfig>
 8012610:	b988      	cbnz	r0, 8012636 <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8012612:	230f      	movs	r3, #15
 8012614:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8012616:	2302      	movs	r3, #2
 8012618:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801261a:	2300      	movs	r3, #0
 801261c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 801261e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8012622:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8012624:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8012626:	2103      	movs	r1, #3
 8012628:	a803      	add	r0, sp, #12
 801262a:	f005 ffc7 	bl	80185bc <HAL_RCC_ClockConfig>
 801262e:	b920      	cbnz	r0, 801263a <SystemClock_Config+0x9a>
}
 8012630:	b015      	add	sp, #84	@ 0x54
 8012632:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8012636:	f7ff ffb1 	bl	801259c <Error_Handler>
    Error_Handler();
 801263a:	f7ff ffaf 	bl	801259c <Error_Handler>
 801263e:	bf00      	nop
 8012640:	40023800 	.word	0x40023800
 8012644:	40007000 	.word	0x40007000

08012648 <main>:
{
 8012648:	b500      	push	{lr}
 801264a:	b083      	sub	sp, #12
 801264c:	b672      	cpsid	i
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 801264e:	4b2f      	ldr	r3, [pc, #188]	@ (801270c <main+0xc4>)
 8012650:	4a2f      	ldr	r2, [pc, #188]	@ (8012710 <main+0xc8>)
 8012652:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8012654:	b662      	cpsie	i
	volatile int i = 1000000;
 8012656:	4b2f      	ldr	r3, [pc, #188]	@ (8012714 <main+0xcc>)
 8012658:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 801265a:	e002      	b.n	8012662 <main+0x1a>
		i--;
 801265c:	9b01      	ldr	r3, [sp, #4]
 801265e:	3b01      	subs	r3, #1
 8012660:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 8012662:	9b01      	ldr	r3, [sp, #4]
 8012664:	2b00      	cmp	r3, #0
 8012666:	dcf9      	bgt.n	801265c <main+0x14>
  HAL_Init();
 8012668:	f004 fc1c 	bl	8016ea4 <HAL_Init>
  SystemClock_Config();
 801266c:	f7ff ff98 	bl	80125a0 <SystemClock_Config>
  MX_GPIO_Init();
 8012670:	f7ff fd68 	bl	8012144 <MX_GPIO_Init>
  MX_SPI2_Init();
 8012674:	f000 f8e8 	bl	8012848 <MX_SPI2_Init>
  MX_I2C1_Init();
 8012678:	f7ff fdee 	bl	8012258 <MX_I2C1_Init>
  MX_SPI1_Init();
 801267c:	f000 f8c2 	bl	8012804 <MX_SPI1_Init>
  MX_IWDG_Init();
 8012680:	f7ff fe5e 	bl	8012340 <MX_IWDG_Init>
  MX_ADC1_Init();
 8012684:	f7fe fd48 	bl	8011118 <MX_ADC1_Init>
  MX_RTC_Init();
 8012688:	f000 f848 	bl	801271c <MX_RTC_Init>
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2) == HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3)){
 801268c:	4d22      	ldr	r5, [pc, #136]	@ (8012718 <main+0xd0>)
 801268e:	2102      	movs	r1, #2
 8012690:	4628      	mov	r0, r5
 8012692:	f006 faeb 	bl	8018c6c <HAL_RTCEx_BKUPRead>
 8012696:	4604      	mov	r4, r0
 8012698:	2103      	movs	r1, #3
 801269a:	4628      	mov	r0, r5
 801269c:	f006 fae6 	bl	8018c6c <HAL_RTCEx_BKUPRead>
 80126a0:	4284      	cmp	r4, r0
 80126a2:	d01e      	beq.n	80126e2 <main+0x9a>
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4) == HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5)){
 80126a4:	4d1c      	ldr	r5, [pc, #112]	@ (8012718 <main+0xd0>)
 80126a6:	2104      	movs	r1, #4
 80126a8:	4628      	mov	r0, r5
 80126aa:	f006 fadf 	bl	8018c6c <HAL_RTCEx_BKUPRead>
 80126ae:	4604      	mov	r4, r0
 80126b0:	2105      	movs	r1, #5
 80126b2:	4628      	mov	r0, r5
 80126b4:	f006 fada 	bl	8018c6c <HAL_RTCEx_BKUPRead>
 80126b8:	4284      	cmp	r4, r0
 80126ba:	d019      	beq.n	80126f0 <main+0xa8>
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6) == HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7)){
 80126bc:	4d16      	ldr	r5, [pc, #88]	@ (8012718 <main+0xd0>)
 80126be:	2106      	movs	r1, #6
 80126c0:	4628      	mov	r0, r5
 80126c2:	f006 fad3 	bl	8018c6c <HAL_RTCEx_BKUPRead>
 80126c6:	4604      	mov	r4, r0
 80126c8:	2107      	movs	r1, #7
 80126ca:	4628      	mov	r0, r5
 80126cc:	f006 face 	bl	8018c6c <HAL_RTCEx_BKUPRead>
 80126d0:	4284      	cmp	r4, r0
 80126d2:	d014      	beq.n	80126fe <main+0xb6>
  osKernelInitialize();
 80126d4:	f007 fa10 	bl	8019af8 <osKernelInitialize>
  MX_FREERTOS_Init();
 80126d8:	f7ff fb26 	bl	8011d28 <MX_FREERTOS_Init>
  osKernelStart();
 80126dc:	f007 fa1e 	bl	8019b1c <osKernelStart>
  while (1)
 80126e0:	e7fe      	b.n	80126e0 <main+0x98>
	  sFLASH_SetEraceSectorTimes(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2));
 80126e2:	2102      	movs	r1, #2
 80126e4:	4628      	mov	r0, r5
 80126e6:	f006 fac1 	bl	8018c6c <HAL_RTCEx_BKUPRead>
 80126ea:	f004 fbd5 	bl	8016e98 <sFLASH_SetEraceSectorTimes>
 80126ee:	e7d9      	b.n	80126a4 <main+0x5c>
	  sFLASH_SetReadedBytes(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4));
 80126f0:	2104      	movs	r1, #4
 80126f2:	4628      	mov	r0, r5
 80126f4:	f006 faba 	bl	8018c6c <HAL_RTCEx_BKUPRead>
 80126f8:	f004 fbc2 	bl	8016e80 <sFLASH_SetReadedBytes>
 80126fc:	e7de      	b.n	80126bc <main+0x74>
	  sFLASH_SetWritedBytes(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6));
 80126fe:	2106      	movs	r1, #6
 8012700:	4628      	mov	r0, r5
 8012702:	f006 fab3 	bl	8018c6c <HAL_RTCEx_BKUPRead>
 8012706:	f004 fbc1 	bl	8016e8c <sFLASH_SetWritedBytes>
 801270a:	e7e3      	b.n	80126d4 <main+0x8c>
 801270c:	e000ed00 	.word	0xe000ed00
 8012710:	08010000 	.word	0x08010000
 8012714:	000f4240 	.word	0x000f4240
 8012718:	20000ab4 	.word	0x20000ab4

0801271c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 801271c:	b500      	push	{lr}
 801271e:	b087      	sub	sp, #28

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8012720:	2300      	movs	r3, #0
 8012722:	9301      	str	r3, [sp, #4]
 8012724:	9302      	str	r3, [sp, #8]
 8012726:	9303      	str	r3, [sp, #12]
 8012728:	9304      	str	r3, [sp, #16]
 801272a:	9305      	str	r3, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 801272c:	9300      	str	r3, [sp, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 801272e:	4820      	ldr	r0, [pc, #128]	@ (80127b0 <MX_RTC_Init+0x94>)
 8012730:	4a20      	ldr	r2, [pc, #128]	@ (80127b4 <MX_RTC_Init+0x98>)
 8012732:	6002      	str	r2, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8012734:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8012736:	227f      	movs	r2, #127	@ 0x7f
 8012738:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 801273a:	22ff      	movs	r2, #255	@ 0xff
 801273c:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 801273e:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8012740:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8012742:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8012744:	f006 f938 	bl	80189b8 <HAL_RTC_Init>
 8012748:	bb40      	cbnz	r0, 801279c <MX_RTC_Init+0x80>
    Error_Handler();
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  //check if RTC init flag exist
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == 0x32F2) {
 801274a:	2101      	movs	r1, #1
 801274c:	4818      	ldr	r0, [pc, #96]	@ (80127b0 <MX_RTC_Init+0x94>)
 801274e:	f006 fa8d 	bl	8018c6c <HAL_RTCEx_BKUPRead>
 8012752:	f243 23f2 	movw	r3, #13042	@ 0x32f2
 8012756:	4298      	cmp	r0, r3
 8012758:	d01d      	beq.n	8012796 <MX_RTC_Init+0x7a>
  }
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 801275a:	2300      	movs	r3, #0
 801275c:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 8012760:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8012764:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012768:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801276a:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 801276c:	2201      	movs	r2, #1
 801276e:	a901      	add	r1, sp, #4
 8012770:	480f      	ldr	r0, [pc, #60]	@ (80127b0 <MX_RTC_Init+0x94>)
 8012772:	f006 f97b 	bl	8018a6c <HAL_RTC_SetTime>
 8012776:	b9a0      	cbnz	r0, 80127a2 <MX_RTC_Init+0x86>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8012778:	2201      	movs	r2, #1
 801277a:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 801277e:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 8012782:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 8012786:	2300      	movs	r3, #0
 8012788:	f88d 3003 	strb.w	r3, [sp, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 801278c:	4669      	mov	r1, sp
 801278e:	4808      	ldr	r0, [pc, #32]	@ (80127b0 <MX_RTC_Init+0x94>)
 8012790:	f006 f9cc 	bl	8018b2c <HAL_RTC_SetDate>
 8012794:	b940      	cbnz	r0, 80127a8 <MX_RTC_Init+0x8c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8012796:	b007      	add	sp, #28
 8012798:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801279c:	f7ff fefe 	bl	801259c <Error_Handler>
 80127a0:	e7d3      	b.n	801274a <MX_RTC_Init+0x2e>
    Error_Handler();
 80127a2:	f7ff fefb 	bl	801259c <Error_Handler>
 80127a6:	e7e7      	b.n	8012778 <MX_RTC_Init+0x5c>
    Error_Handler();
 80127a8:	f7ff fef8 	bl	801259c <Error_Handler>
 80127ac:	e7f3      	b.n	8012796 <MX_RTC_Init+0x7a>
 80127ae:	bf00      	nop
 80127b0:	20000ab4 	.word	0x20000ab4
 80127b4:	40002800 	.word	0x40002800

080127b8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80127b8:	b500      	push	{lr}
 80127ba:	b087      	sub	sp, #28

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80127bc:	2300      	movs	r3, #0
 80127be:	9300      	str	r3, [sp, #0]
 80127c0:	9301      	str	r3, [sp, #4]
 80127c2:	9302      	str	r3, [sp, #8]
 80127c4:	9303      	str	r3, [sp, #12]
 80127c6:	9304      	str	r3, [sp, #16]
 80127c8:	9305      	str	r3, [sp, #20]
  if(rtcHandle->Instance==RTC)
 80127ca:	6802      	ldr	r2, [r0, #0]
 80127cc:	4b0b      	ldr	r3, [pc, #44]	@ (80127fc <HAL_RTC_MspInit+0x44>)
 80127ce:	429a      	cmp	r2, r3
 80127d0:	d002      	beq.n	80127d8 <HAL_RTC_MspInit+0x20>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80127d2:	b007      	add	sp, #28
 80127d4:	f85d fb04 	ldr.w	pc, [sp], #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80127d8:	2302      	movs	r3, #2
 80127da:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80127dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80127e0:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80127e2:	4668      	mov	r0, sp
 80127e4:	f005 ffde 	bl	80187a4 <HAL_RCCEx_PeriphCLKConfig>
 80127e8:	b920      	cbnz	r0, 80127f4 <HAL_RTC_MspInit+0x3c>
    __HAL_RCC_RTC_ENABLE();
 80127ea:	4b05      	ldr	r3, [pc, #20]	@ (8012800 <HAL_RTC_MspInit+0x48>)
 80127ec:	2201      	movs	r2, #1
 80127ee:	f8c3 2e3c 	str.w	r2, [r3, #3644]	@ 0xe3c
}
 80127f2:	e7ee      	b.n	80127d2 <HAL_RTC_MspInit+0x1a>
      Error_Handler();
 80127f4:	f7ff fed2 	bl	801259c <Error_Handler>
 80127f8:	e7f7      	b.n	80127ea <HAL_RTC_MspInit+0x32>
 80127fa:	bf00      	nop
 80127fc:	40002800 	.word	0x40002800
 8012800:	42470000 	.word	0x42470000

08012804 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8012804:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8012806:	480e      	ldr	r0, [pc, #56]	@ (8012840 <MX_SPI1_Init+0x3c>)
 8012808:	4b0e      	ldr	r3, [pc, #56]	@ (8012844 <MX_SPI1_Init+0x40>)
 801280a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801280c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8012810:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8012812:	2300      	movs	r3, #0
 8012814:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8012816:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012818:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801281a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801281c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012820:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8012822:	2208      	movs	r2, #8
 8012824:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012826:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8012828:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801282a:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 801282c:	230a      	movs	r3, #10
 801282e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8012830:	f006 fb0c 	bl	8018e4c <HAL_SPI_Init>
 8012834:	b900      	cbnz	r0, 8012838 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8012836:	bd08      	pop	{r3, pc}
    Error_Handler();
 8012838:	f7ff feb0 	bl	801259c <Error_Handler>
}
 801283c:	e7fb      	b.n	8012836 <MX_SPI1_Init+0x32>
 801283e:	bf00      	nop
 8012840:	20000b2c 	.word	0x20000b2c
 8012844:	40013000 	.word	0x40013000

08012848 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8012848:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 801284a:	480d      	ldr	r0, [pc, #52]	@ (8012880 <MX_SPI2_Init+0x38>)
 801284c:	4b0d      	ldr	r3, [pc, #52]	@ (8012884 <MX_SPI2_Init+0x3c>)
 801284e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8012850:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8012854:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8012856:	2300      	movs	r3, #0
 8012858:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 801285a:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 801285c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 801285e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8012860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012864:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012866:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012868:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 801286a:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801286c:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 801286e:	230a      	movs	r3, #10
 8012870:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8012872:	f006 faeb 	bl	8018e4c <HAL_SPI_Init>
 8012876:	b900      	cbnz	r0, 801287a <MX_SPI2_Init+0x32>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8012878:	bd08      	pop	{r3, pc}
    Error_Handler();
 801287a:	f7ff fe8f 	bl	801259c <Error_Handler>
}
 801287e:	e7fb      	b.n	8012878 <MX_SPI2_Init+0x30>
 8012880:	20000ad4 	.word	0x20000ad4
 8012884:	40003800 	.word	0x40003800

08012888 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8012888:	b500      	push	{lr}
 801288a:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801288c:	2300      	movs	r3, #0
 801288e:	9305      	str	r3, [sp, #20]
 8012890:	9306      	str	r3, [sp, #24]
 8012892:	9307      	str	r3, [sp, #28]
 8012894:	9308      	str	r3, [sp, #32]
 8012896:	9309      	str	r3, [sp, #36]	@ 0x24
  if(spiHandle->Instance==SPI1)
 8012898:	6803      	ldr	r3, [r0, #0]
 801289a:	4a28      	ldr	r2, [pc, #160]	@ (801293c <HAL_SPI_MspInit+0xb4>)
 801289c:	4293      	cmp	r3, r2
 801289e:	d005      	beq.n	80128ac <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 80128a0:	4a27      	ldr	r2, [pc, #156]	@ (8012940 <HAL_SPI_MspInit+0xb8>)
 80128a2:	4293      	cmp	r3, r2
 80128a4:	d025      	beq.n	80128f2 <HAL_SPI_MspInit+0x6a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80128a6:	b00b      	add	sp, #44	@ 0x2c
 80128a8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80128ac:	2100      	movs	r1, #0
 80128ae:	9101      	str	r1, [sp, #4]
 80128b0:	4b24      	ldr	r3, [pc, #144]	@ (8012944 <HAL_SPI_MspInit+0xbc>)
 80128b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80128b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80128b8:	645a      	str	r2, [r3, #68]	@ 0x44
 80128ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80128bc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80128c0:	9201      	str	r2, [sp, #4]
 80128c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80128c4:	9102      	str	r1, [sp, #8]
 80128c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80128c8:	f042 0202 	orr.w	r2, r2, #2
 80128cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80128ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128d0:	f003 0302 	and.w	r3, r3, #2
 80128d4:	9302      	str	r3, [sp, #8]
 80128d6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80128d8:	2338      	movs	r3, #56	@ 0x38
 80128da:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80128dc:	2302      	movs	r3, #2
 80128de:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80128e0:	2303      	movs	r3, #3
 80128e2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80128e4:	2305      	movs	r3, #5
 80128e6:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80128e8:	a905      	add	r1, sp, #20
 80128ea:	4817      	ldr	r0, [pc, #92]	@ (8012948 <HAL_SPI_MspInit+0xc0>)
 80128ec:	f004 fe38 	bl	8017560 <HAL_GPIO_Init>
 80128f0:	e7d9      	b.n	80128a6 <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80128f2:	2100      	movs	r1, #0
 80128f4:	9103      	str	r1, [sp, #12]
 80128f6:	4b13      	ldr	r3, [pc, #76]	@ (8012944 <HAL_SPI_MspInit+0xbc>)
 80128f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80128fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80128fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8012900:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012902:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8012906:	9203      	str	r2, [sp, #12]
 8012908:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801290a:	9104      	str	r1, [sp, #16]
 801290c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801290e:	f042 0202 	orr.w	r2, r2, #2
 8012912:	631a      	str	r2, [r3, #48]	@ 0x30
 8012914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012916:	f003 0302 	and.w	r3, r3, #2
 801291a:	9304      	str	r3, [sp, #16]
 801291c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 801291e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8012922:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012924:	2302      	movs	r3, #2
 8012926:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012928:	2303      	movs	r3, #3
 801292a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801292c:	2305      	movs	r3, #5
 801292e:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012930:	a905      	add	r1, sp, #20
 8012932:	4805      	ldr	r0, [pc, #20]	@ (8012948 <HAL_SPI_MspInit+0xc0>)
 8012934:	f004 fe14 	bl	8017560 <HAL_GPIO_Init>
}
 8012938:	e7b5      	b.n	80128a6 <HAL_SPI_MspInit+0x1e>
 801293a:	bf00      	nop
 801293c:	40013000 	.word	0x40013000
 8012940:	40003800 	.word	0x40003800
 8012944:	40023800 	.word	0x40023800
 8012948:	40020400 	.word	0x40020400

0801294c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801294c:	b500      	push	{lr}
 801294e:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012950:	2200      	movs	r2, #0
 8012952:	9200      	str	r2, [sp, #0]
 8012954:	4b0d      	ldr	r3, [pc, #52]	@ (801298c <HAL_MspInit+0x40>)
 8012956:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012958:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 801295c:	6459      	str	r1, [r3, #68]	@ 0x44
 801295e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012960:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8012964:	9100      	str	r1, [sp, #0]
 8012966:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012968:	9201      	str	r2, [sp, #4]
 801296a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 801296c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8012970:	6419      	str	r1, [r3, #64]	@ 0x40
 8012972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012978:	9301      	str	r3, [sp, #4]
 801297a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801297c:	210f      	movs	r1, #15
 801297e:	f06f 0001 	mvn.w	r0, #1
 8012982:	f004 fdd5 	bl	8017530 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012986:	b003      	add	sp, #12
 8012988:	f85d fb04 	ldr.w	pc, [sp], #4
 801298c:	40023800 	.word	0x40023800

08012990 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012990:	b530      	push	{r4, r5, lr}
 8012992:	b089      	sub	sp, #36	@ 0x24
 8012994:	4605      	mov	r5, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8012996:	2400      	movs	r4, #0
 8012998:	9401      	str	r4, [sp, #4]
 801299a:	4b1d      	ldr	r3, [pc, #116]	@ (8012a10 <HAL_InitTick+0x80>)
 801299c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801299e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80129a2:	645a      	str	r2, [r3, #68]	@ 0x44
 80129a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80129a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80129aa:	9301      	str	r3, [sp, #4]
 80129ac:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80129ae:	a902      	add	r1, sp, #8
 80129b0:	a803      	add	r0, sp, #12
 80129b2:	f005 fed9 	bl	8018768 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80129b6:	f005 fec7 	bl	8018748 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80129ba:	4a16      	ldr	r2, [pc, #88]	@ (8012a14 <HAL_InitTick+0x84>)
 80129bc:	fba2 2300 	umull	r2, r3, r2, r0
 80129c0:	0c9b      	lsrs	r3, r3, #18
 80129c2:	3b01      	subs	r3, #1

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 80129c4:	4814      	ldr	r0, [pc, #80]	@ (8012a18 <HAL_InitTick+0x88>)
 80129c6:	4a15      	ldr	r2, [pc, #84]	@ (8012a1c <HAL_InitTick+0x8c>)
 80129c8:	6002      	str	r2, [r0, #0]
   * Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 80129ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80129ce:	60c2      	str	r2, [r0, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 80129d0:	6043      	str	r3, [r0, #4]
  htim9.Init.ClockDivision = 0;
 80129d2:	6104      	str	r4, [r0, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80129d4:	6084      	str	r4, [r0, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80129d6:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim9);
 80129d8:	f006 feae 	bl	8019738 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80129dc:	4604      	mov	r4, r0
 80129de:	b110      	cbz	r0, 80129e6 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 80129e0:	4620      	mov	r0, r4
 80129e2:	b009      	add	sp, #36	@ 0x24
 80129e4:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim9);
 80129e6:	480c      	ldr	r0, [pc, #48]	@ (8012a18 <HAL_InitTick+0x88>)
 80129e8:	f006 fd60 	bl	80194ac <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80129ec:	4604      	mov	r4, r0
 80129ee:	2800      	cmp	r0, #0
 80129f0:	d1f6      	bne.n	80129e0 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80129f2:	2018      	movs	r0, #24
 80129f4:	f004 fdac 	bl	8017550 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80129f8:	2d0f      	cmp	r5, #15
 80129fa:	d901      	bls.n	8012a00 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 80129fc:	2401      	movs	r4, #1
 80129fe:	e7ef      	b.n	80129e0 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8012a00:	2200      	movs	r2, #0
 8012a02:	4629      	mov	r1, r5
 8012a04:	2018      	movs	r0, #24
 8012a06:	f004 fd93 	bl	8017530 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8012a0a:	4b05      	ldr	r3, [pc, #20]	@ (8012a20 <HAL_InitTick+0x90>)
 8012a0c:	601d      	str	r5, [r3, #0]
 8012a0e:	e7e7      	b.n	80129e0 <HAL_InitTick+0x50>
 8012a10:	40023800 	.word	0x40023800
 8012a14:	431bde83 	.word	0x431bde83
 8012a18:	20000b84 	.word	0x20000b84
 8012a1c:	40014000 	.word	0x40014000
 8012a20:	20000118 	.word	0x20000118

08012a24 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012a24:	e7fe      	b.n	8012a24 <NMI_Handler>

08012a26 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012a26:	e7fe      	b.n	8012a26 <HardFault_Handler>

08012a28 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012a28:	e7fe      	b.n	8012a28 <MemManage_Handler>

08012a2a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012a2a:	e7fe      	b.n	8012a2a <BusFault_Handler>

08012a2c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012a2c:	e7fe      	b.n	8012a2c <UsageFault_Handler>

08012a2e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012a2e:	4770      	bx	lr

08012a30 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8012a30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8012a32:	4802      	ldr	r0, [pc, #8]	@ (8012a3c <TIM1_BRK_TIM9_IRQHandler+0xc>)
 8012a34:	f006 fd7a 	bl	801952c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8012a38:	bd08      	pop	{r3, pc}
 8012a3a:	bf00      	nop
 8012a3c:	20000b84 	.word	0x20000b84

08012a40 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8012a40:	2001      	movs	r0, #1
 8012a42:	4770      	bx	lr

08012a44 <_kill>:

int _kill(int pid, int sig)
{
 8012a44:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012a46:	f01b fc1f 	bl	802e288 <__errno>
 8012a4a:	2316      	movs	r3, #22
 8012a4c:	6003      	str	r3, [r0, #0]
  return -1;
}
 8012a4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012a52:	bd08      	pop	{r3, pc}

08012a54 <_exit>:

void _exit (int status)
{
 8012a54:	b508      	push	{r3, lr}
  _kill(status, -1);
 8012a56:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012a5a:	f7ff fff3 	bl	8012a44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8012a5e:	e7fe      	b.n	8012a5e <_exit+0xa>

08012a60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012a60:	b570      	push	{r4, r5, r6, lr}
 8012a62:	460c      	mov	r4, r1
 8012a64:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012a66:	2500      	movs	r5, #0
 8012a68:	e006      	b.n	8012a78 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8012a6a:	f3af 8000 	nop.w
 8012a6e:	4621      	mov	r1, r4
 8012a70:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012a74:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8012a76:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012a78:	42b5      	cmp	r5, r6
 8012a7a:	dbf6      	blt.n	8012a6a <_read+0xa>
  }

  return len;
}
 8012a7c:	4630      	mov	r0, r6
 8012a7e:	bd70      	pop	{r4, r5, r6, pc}

08012a80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012a80:	b570      	push	{r4, r5, r6, lr}
 8012a82:	460c      	mov	r4, r1
 8012a84:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012a86:	2500      	movs	r5, #0
 8012a88:	e004      	b.n	8012a94 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8012a8a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012a8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012a92:	3501      	adds	r5, #1
 8012a94:	42b5      	cmp	r5, r6
 8012a96:	dbf8      	blt.n	8012a8a <_write+0xa>
  }
  return len;
}
 8012a98:	4630      	mov	r0, r6
 8012a9a:	bd70      	pop	{r4, r5, r6, pc}

08012a9c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8012a9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012aa0:	4770      	bx	lr

08012aa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8012aa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012aa6:	604b      	str	r3, [r1, #4]
  return 0;
}
 8012aa8:	2000      	movs	r0, #0
 8012aaa:	4770      	bx	lr

08012aac <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8012aac:	2001      	movs	r0, #1
 8012aae:	4770      	bx	lr

08012ab0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8012ab0:	2000      	movs	r0, #0
 8012ab2:	4770      	bx	lr

08012ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012ab4:	b510      	push	{r4, lr}
 8012ab6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012ab8:	4a0c      	ldr	r2, [pc, #48]	@ (8012aec <_sbrk+0x38>)
 8012aba:	490d      	ldr	r1, [pc, #52]	@ (8012af0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012abc:	480d      	ldr	r0, [pc, #52]	@ (8012af4 <_sbrk+0x40>)
 8012abe:	6800      	ldr	r0, [r0, #0]
 8012ac0:	b140      	cbz	r0, 8012ad4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012ac2:	480c      	ldr	r0, [pc, #48]	@ (8012af4 <_sbrk+0x40>)
 8012ac4:	6800      	ldr	r0, [r0, #0]
 8012ac6:	4403      	add	r3, r0
 8012ac8:	1a52      	subs	r2, r2, r1
 8012aca:	4293      	cmp	r3, r2
 8012acc:	d806      	bhi.n	8012adc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8012ace:	4a09      	ldr	r2, [pc, #36]	@ (8012af4 <_sbrk+0x40>)
 8012ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8012ad2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8012ad4:	4807      	ldr	r0, [pc, #28]	@ (8012af4 <_sbrk+0x40>)
 8012ad6:	4c08      	ldr	r4, [pc, #32]	@ (8012af8 <_sbrk+0x44>)
 8012ad8:	6004      	str	r4, [r0, #0]
 8012ada:	e7f2      	b.n	8012ac2 <_sbrk+0xe>
    errno = ENOMEM;
 8012adc:	f01b fbd4 	bl	802e288 <__errno>
 8012ae0:	230c      	movs	r3, #12
 8012ae2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8012ae4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012ae8:	e7f3      	b.n	8012ad2 <_sbrk+0x1e>
 8012aea:	bf00      	nop
 8012aec:	20020000 	.word	0x20020000
 8012af0:	00000800 	.word	0x00000800
 8012af4:	20000bd0 	.word	0x20000bd0
 8012af8:	2001a460 	.word	0x2001a460

08012afc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012afc:	4a03      	ldr	r2, [pc, #12]	@ (8012b0c <SystemInit+0x10>)
 8012afe:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8012b02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012b06:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012b0a:	4770      	bx	lr
 8012b0c:	e000ed00 	.word	0xe000ed00

08012b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8012b10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8012b48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8012b14:	f7ff fff2 	bl	8012afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8012b18:	480c      	ldr	r0, [pc, #48]	@ (8012b4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8012b1a:	490d      	ldr	r1, [pc, #52]	@ (8012b50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8012b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8012b54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8012b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012b20:	e002      	b.n	8012b28 <LoopCopyDataInit>

08012b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012b26:	3304      	adds	r3, #4

08012b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012b2c:	d3f9      	bcc.n	8012b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8012b58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8012b30:	4c0a      	ldr	r4, [pc, #40]	@ (8012b5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8012b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012b34:	e001      	b.n	8012b3a <LoopFillZerobss>

08012b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012b38:	3204      	adds	r2, #4

08012b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012b3c:	d3fb      	bcc.n	8012b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8012b3e:	f01b fbb1 	bl	802e2a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012b42:	f7ff fd81 	bl	8012648 <main>
  bx  lr    
 8012b46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8012b48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8012b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012b50:	2000089c 	.word	0x2000089c
  ldr r2, =_sidata
 8012b54:	0803e304 	.word	0x0803e304
  ldr r2, =_sbss
 8012b58:	200008a0 	.word	0x200008a0
  ldr r4, =_ebss
 8012b5c:	2001a460 	.word	0x2001a460

08012b60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012b60:	e7fe      	b.n	8012b60 <ADC_IRQHandler>

08012b62 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8012b62:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8012b64:	880b      	ldrh	r3, [r1, #0]
 8012b66:	2b05      	cmp	r3, #5
 8012b68:	d001      	beq.n	8012b6e <eMBFuncReadCoils+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012b6a:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8012b6c:	bd38      	pop	{r3, r4, r5, pc}
 8012b6e:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8012b70:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8012b72:	7881      	ldrb	r1, [r0, #2]
 8012b74:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012b78:	3101      	adds	r1, #1
 8012b7a:	b289      	uxth	r1, r1
        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8012b7c:	78c3      	ldrb	r3, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8012b7e:	7902      	ldrb	r2, [r0, #4]
 8012b80:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usCoilCount >= 1 ) &&
 8012b84:	1e53      	subs	r3, r2, #1
 8012b86:	b29b      	uxth	r3, r3
 8012b88:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 8012b8c:	4563      	cmp	r3, ip
 8012b8e:	d820      	bhi.n	8012bd2 <eMBFuncReadCoils+0x70>
            *usLen = MB_PDU_FUNC_OFF;
 8012b90:	2300      	movs	r3, #0
 8012b92:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8012b94:	2301      	movs	r3, #1
 8012b96:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8012b98:	8823      	ldrh	r3, [r4, #0]
 8012b9a:	3301      	adds	r3, #1
 8012b9c:	8023      	strh	r3, [r4, #0]
            if( ( usCoilCount & 0x0007 ) != 0 )
 8012b9e:	f012 0f07 	tst.w	r2, #7
 8012ba2:	d010      	beq.n	8012bc6 <eMBFuncReadCoils+0x64>
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8012ba4:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 8012ba8:	3301      	adds	r3, #1
 8012baa:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 8012bac:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 8012bae:	8823      	ldrh	r3, [r4, #0]
 8012bb0:	3301      	adds	r3, #1
 8012bb2:	8023      	strh	r3, [r4, #0]
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	3002      	adds	r0, #2
 8012bb8:	f7ff fa70 	bl	801209c <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8012bbc:	b930      	cbnz	r0, 8012bcc <eMBFuncReadCoils+0x6a>
                *usLen += ucNBytes;;
 8012bbe:	8823      	ldrh	r3, [r4, #0]
 8012bc0:	442b      	add	r3, r5
 8012bc2:	8023      	strh	r3, [r4, #0]
 8012bc4:	e7d2      	b.n	8012b6c <eMBFuncReadCoils+0xa>
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8012bc6:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 8012bca:	e7ef      	b.n	8012bac <eMBFuncReadCoils+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 8012bcc:	f000 f9f0 	bl	8012fb0 <prveMBError2Exception>
 8012bd0:	e7cc      	b.n	8012b6c <eMBFuncReadCoils+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012bd2:	2003      	movs	r0, #3
 8012bd4:	e7ca      	b.n	8012b6c <eMBFuncReadCoils+0xa>

08012bd6 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012bd6:	880b      	ldrh	r3, [r1, #0]
 8012bd8:	2b05      	cmp	r3, #5
 8012bda:	d001      	beq.n	8012be0 <eMBFuncWriteCoil+0xa>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012bdc:	2003      	movs	r0, #3
 8012bde:	4770      	bx	lr
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8012be0:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8012be2:	7881      	ldrb	r1, [r0, #2]
 8012be4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012be8:	3101      	adds	r1, #1
 8012bea:	b289      	uxth	r1, r1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8012bec:	7903      	ldrb	r3, [r0, #4]
 8012bee:	b9f3      	cbnz	r3, 8012c2e <eMBFuncWriteCoil+0x58>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8012bf0:	78c2      	ldrb	r2, [r0, #3]
 8012bf2:	1e53      	subs	r3, r2, #1
 8012bf4:	b2db      	uxtb	r3, r3
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8012bf6:	2bfd      	cmp	r3, #253	@ 0xfd
 8012bf8:	d91b      	bls.n	8012c32 <eMBFuncWriteCoil+0x5c>
{
 8012bfa:	b500      	push	{lr}
 8012bfc:	b083      	sub	sp, #12
            ucBuf[1] = 0;
 8012bfe:	2300      	movs	r3, #0
 8012c00:	f88d 3005 	strb.w	r3, [sp, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8012c04:	2aff      	cmp	r2, #255	@ 0xff
 8012c06:	d00b      	beq.n	8012c20 <eMBFuncWriteCoil+0x4a>
                ucBuf[0] = 0;
 8012c08:	2300      	movs	r3, #0
 8012c0a:	f88d 3004 	strb.w	r3, [sp, #4]
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8012c0e:	2301      	movs	r3, #1
 8012c10:	461a      	mov	r2, r3
 8012c12:	a801      	add	r0, sp, #4
 8012c14:	f7ff fa42 	bl	801209c <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8012c18:	b930      	cbnz	r0, 8012c28 <eMBFuncWriteCoil+0x52>
    }
    return eStatus;
}
 8012c1a:	b003      	add	sp, #12
 8012c1c:	f85d fb04 	ldr.w	pc, [sp], #4
                ucBuf[0] = 1;
 8012c20:	2301      	movs	r3, #1
 8012c22:	f88d 3004 	strb.w	r3, [sp, #4]
 8012c26:	e7f2      	b.n	8012c0e <eMBFuncWriteCoil+0x38>
                eStatus = prveMBError2Exception( eRegStatus );
 8012c28:	f000 f9c2 	bl	8012fb0 <prveMBError2Exception>
 8012c2c:	e7f5      	b.n	8012c1a <eMBFuncWriteCoil+0x44>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012c2e:	2003      	movs	r0, #3
 8012c30:	4770      	bx	lr
 8012c32:	2003      	movs	r0, #3
}
 8012c34:	4770      	bx	lr

08012c36 <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012c36:	880b      	ldrh	r3, [r1, #0]
 8012c38:	2b05      	cmp	r3, #5
 8012c3a:	d92d      	bls.n	8012c98 <eMBFuncWriteMultipleCoils+0x62>
{
 8012c3c:	b510      	push	{r4, lr}
 8012c3e:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8012c40:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8012c42:	7883      	ldrb	r3, [r0, #2]
 8012c44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 8012c48:	3301      	adds	r3, #1
 8012c4a:	b299      	uxth	r1, r3

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8012c4c:	78c2      	ldrb	r2, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8012c4e:	7903      	ldrb	r3, [r0, #4]
 8012c50:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8012c54:	f890 e005 	ldrb.w	lr, [r0, #5]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8012c58:	f013 0f07 	tst.w	r3, #7
 8012c5c:	d00e      	beq.n	8012c7c <eMBFuncWriteMultipleCoils+0x46>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8012c5e:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 8012c62:	f10c 0c01 	add.w	ip, ip, #1
 8012c66:	fa5f fc8c 	uxtb.w	ip, ip
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 8012c6a:	1e53      	subs	r3, r2, #1
 8012c6c:	b29b      	uxth	r3, r3
 8012c6e:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 8012c72:	d213      	bcs.n	8012c9c <eMBFuncWriteMultipleCoils+0x66>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8012c74:	45f4      	cmp	ip, lr
 8012c76:	d004      	beq.n	8012c82 <eMBFuncWriteMultipleCoils+0x4c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012c78:	2003      	movs	r0, #3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8012c7a:	bd10      	pop	{r4, pc}
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8012c7c:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 8012c80:	e7f3      	b.n	8012c6a <eMBFuncWriteMultipleCoils+0x34>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8012c82:	2301      	movs	r3, #1
 8012c84:	3006      	adds	r0, #6
 8012c86:	f7ff fa09 	bl	801209c <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8012c8a:	b910      	cbnz	r0, 8012c92 <eMBFuncWriteMultipleCoils+0x5c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8012c8c:	2305      	movs	r3, #5
 8012c8e:	8023      	strh	r3, [r4, #0]
 8012c90:	e7f3      	b.n	8012c7a <eMBFuncWriteMultipleCoils+0x44>
                eStatus = prveMBError2Exception( eRegStatus );
 8012c92:	f000 f98d 	bl	8012fb0 <prveMBError2Exception>
 8012c96:	e7f0      	b.n	8012c7a <eMBFuncWriteMultipleCoils+0x44>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012c98:	2003      	movs	r0, #3
}
 8012c9a:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012c9c:	2003      	movs	r0, #3
 8012c9e:	e7ec      	b.n	8012c7a <eMBFuncWriteMultipleCoils+0x44>

08012ca0 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8012ca0:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8012ca2:	880b      	ldrh	r3, [r1, #0]
 8012ca4:	2b05      	cmp	r3, #5
 8012ca6:	d001      	beq.n	8012cac <eMBFuncReadDiscreteInputs+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012ca8:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8012caa:	bd38      	pop	{r3, r4, r5, pc}
 8012cac:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8012cae:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8012cb0:	7881      	ldrb	r1, [r0, #2]
 8012cb2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012cb6:	3101      	adds	r1, #1
 8012cb8:	b289      	uxth	r1, r1
        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8012cba:	78c3      	ldrb	r3, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8012cbc:	7902      	ldrb	r2, [r0, #4]
 8012cbe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usDiscreteCnt >= 1 ) &&
 8012cc2:	1e53      	subs	r3, r2, #1
 8012cc4:	b29b      	uxth	r3, r3
 8012cc6:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 8012cca:	4563      	cmp	r3, ip
 8012ccc:	d81f      	bhi.n	8012d0e <eMBFuncReadDiscreteInputs+0x6e>
            *usLen = MB_PDU_FUNC_OFF;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8012cd2:	2302      	movs	r3, #2
 8012cd4:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8012cd6:	8823      	ldrh	r3, [r4, #0]
 8012cd8:	3301      	adds	r3, #1
 8012cda:	8023      	strh	r3, [r4, #0]
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8012cdc:	f012 0f07 	tst.w	r2, #7
 8012ce0:	d00f      	beq.n	8012d02 <eMBFuncReadDiscreteInputs+0x62>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8012ce2:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 8012ce6:	3301      	adds	r3, #1
 8012ce8:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 8012cea:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 8012cec:	8823      	ldrh	r3, [r4, #0]
 8012cee:	3301      	adds	r3, #1
 8012cf0:	8023      	strh	r3, [r4, #0]
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8012cf2:	3002      	adds	r0, #2
 8012cf4:	f7ff f9ac 	bl	8012050 <eMBRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 8012cf8:	b930      	cbnz	r0, 8012d08 <eMBFuncReadDiscreteInputs+0x68>
                *usLen += ucNBytes;;
 8012cfa:	8823      	ldrh	r3, [r4, #0]
 8012cfc:	442b      	add	r3, r5
 8012cfe:	8023      	strh	r3, [r4, #0]
 8012d00:	e7d3      	b.n	8012caa <eMBFuncReadDiscreteInputs+0xa>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8012d02:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 8012d06:	e7f0      	b.n	8012cea <eMBFuncReadDiscreteInputs+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 8012d08:	f000 f952 	bl	8012fb0 <prveMBError2Exception>
 8012d0c:	e7cd      	b.n	8012caa <eMBFuncReadDiscreteInputs+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012d0e:	2003      	movs	r0, #3
 8012d10:	e7cb      	b.n	8012caa <eMBFuncReadDiscreteInputs+0xa>

08012d12 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8012d12:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012d14:	880b      	ldrh	r3, [r1, #0]
 8012d16:	2b05      	cmp	r3, #5
 8012d18:	d001      	beq.n	8012d1e <eMBFuncWriteHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012d1a:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8012d1c:	bd08      	pop	{r3, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8012d1e:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8012d20:	7881      	ldrb	r1, [r0, #2]
 8012d22:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012d26:	3101      	adds	r1, #1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8012d28:	2301      	movs	r3, #1
 8012d2a:	461a      	mov	r2, r3
 8012d2c:	b289      	uxth	r1, r1
 8012d2e:	3003      	adds	r0, #3
 8012d30:	f7ff fa05 	bl	801213e <eMBRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 8012d34:	2800      	cmp	r0, #0
 8012d36:	d0f1      	beq.n	8012d1c <eMBFuncWriteHoldingRegister+0xa>
            eStatus = prveMBError2Exception( eRegStatus );
 8012d38:	f000 f93a 	bl	8012fb0 <prveMBError2Exception>
 8012d3c:	e7ee      	b.n	8012d1c <eMBFuncWriteHoldingRegister+0xa>

08012d3e <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8012d3e:	880b      	ldrh	r3, [r1, #0]
 8012d40:	2b05      	cmp	r3, #5
 8012d42:	d922      	bls.n	8012d8a <eMBFuncWriteMultipleHoldingRegister+0x4c>
{
 8012d44:	b510      	push	{r4, lr}
 8012d46:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8012d48:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8012d4a:	7883      	ldrb	r3, [r0, #2]
 8012d4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 8012d50:	3301      	adds	r3, #1
 8012d52:	b299      	uxth	r1, r3

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8012d54:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8012d56:	7902      	ldrb	r2, [r0, #4]
 8012d58:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8012d5c:	f890 c005 	ldrb.w	ip, [r0, #5]

        if( ( usRegCount >= 1 ) &&
 8012d60:	1e53      	subs	r3, r2, #1
 8012d62:	b29b      	uxth	r3, r3
 8012d64:	2b77      	cmp	r3, #119	@ 0x77
 8012d66:	d812      	bhi.n	8012d8e <eMBFuncWriteMultipleHoldingRegister+0x50>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8012d68:	0053      	lsls	r3, r2, #1
 8012d6a:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8012d6c:	4563      	cmp	r3, ip
 8012d6e:	d001      	beq.n	8012d74 <eMBFuncWriteMultipleHoldingRegister+0x36>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012d70:	2003      	movs	r0, #3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8012d72:	bd10      	pop	{r4, pc}
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8012d74:	2301      	movs	r3, #1
 8012d76:	3006      	adds	r0, #6
 8012d78:	f7ff f9e1 	bl	801213e <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8012d7c:	b910      	cbnz	r0, 8012d84 <eMBFuncWriteMultipleHoldingRegister+0x46>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8012d7e:	2305      	movs	r3, #5
 8012d80:	8023      	strh	r3, [r4, #0]
 8012d82:	e7f6      	b.n	8012d72 <eMBFuncWriteMultipleHoldingRegister+0x34>
                eStatus = prveMBError2Exception( eRegStatus );
 8012d84:	f000 f914 	bl	8012fb0 <prveMBError2Exception>
 8012d88:	e7f3      	b.n	8012d72 <eMBFuncWriteMultipleHoldingRegister+0x34>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012d8a:	2003      	movs	r0, #3
}
 8012d8c:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012d8e:	2003      	movs	r0, #3
 8012d90:	e7ef      	b.n	8012d72 <eMBFuncWriteMultipleHoldingRegister+0x34>

08012d92 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8012d92:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8012d94:	880b      	ldrh	r3, [r1, #0]
 8012d96:	2b05      	cmp	r3, #5
 8012d98:	d001      	beq.n	8012d9e <eMBFuncReadHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012d9a:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8012d9c:	bd38      	pop	{r3, r4, r5, pc}
 8012d9e:	4602      	mov	r2, r0
 8012da0:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8012da2:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8012da4:	7881      	ldrb	r1, [r0, #2]
 8012da6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012daa:	3101      	adds	r1, #1
 8012dac:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8012dae:	7905      	ldrb	r5, [r0, #4]
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8012db0:	1e6b      	subs	r3, r5, #1
 8012db2:	b29b      	uxth	r3, r3
 8012db4:	2b7c      	cmp	r3, #124	@ 0x7c
 8012db6:	d901      	bls.n	8012dbc <eMBFuncReadHoldingRegister+0x2a>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012db8:	2003      	movs	r0, #3
 8012dba:	e7ef      	b.n	8012d9c <eMBFuncReadHoldingRegister+0xa>
            *usLen = MB_PDU_FUNC_OFF;
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8012dc0:	f04f 0c03 	mov.w	ip, #3
 8012dc4:	f800 cb02 	strb.w	ip, [r0], #2
            *usLen += 1;
 8012dc8:	f8b4 c000 	ldrh.w	ip, [r4]
 8012dcc:	f10c 0c01 	add.w	ip, ip, #1
 8012dd0:	f8a4 c000 	strh.w	ip, [r4]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8012dd4:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 8012dd8:	f882 c001 	strb.w	ip, [r2, #1]
            *usLen += 1;
 8012ddc:	8822      	ldrh	r2, [r4, #0]
 8012dde:	3201      	adds	r2, #1
 8012de0:	8022      	strh	r2, [r4, #0]
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8012de2:	462a      	mov	r2, r5
 8012de4:	f7ff f9ab 	bl	801213e <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8012de8:	b920      	cbnz	r0, 8012df4 <eMBFuncReadHoldingRegister+0x62>
                *usLen += usRegCount * 2;
 8012dea:	8823      	ldrh	r3, [r4, #0]
 8012dec:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8012df0:	8023      	strh	r3, [r4, #0]
 8012df2:	e7d3      	b.n	8012d9c <eMBFuncReadHoldingRegister+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 8012df4:	f000 f8dc 	bl	8012fb0 <prveMBError2Exception>
 8012df8:	e7d0      	b.n	8012d9c <eMBFuncReadHoldingRegister+0xa>

08012dfa <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8012dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8012dfc:	880b      	ldrh	r3, [r1, #0]
 8012dfe:	2b09      	cmp	r3, #9
 8012e00:	d943      	bls.n	8012e8a <eMBFuncReadWriteMultipleHoldingRegister+0x90>
 8012e02:	4604      	mov	r4, r0
 8012e04:	460d      	mov	r5, r1
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8012e06:	7843      	ldrb	r3, [r0, #1]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8012e08:	7881      	ldrb	r1, [r0, #2]
 8012e0a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegReadAddress++;
 8012e0e:	3101      	adds	r1, #1
 8012e10:	b28e      	uxth	r6, r1

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8012e12:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8012e14:	7907      	ldrb	r7, [r0, #4]
 8012e16:	ea47 2703 	orr.w	r7, r7, r3, lsl #8

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8012e1a:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8012e1c:	7981      	ldrb	r1, [r0, #6]
 8012e1e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteAddress++;
 8012e22:	3101      	adds	r1, #1
 8012e24:	b289      	uxth	r1, r1

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8012e26:	79c3      	ldrb	r3, [r0, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8012e28:	7a02      	ldrb	r2, [r0, #8]
 8012e2a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8012e2e:	7a40      	ldrb	r0, [r0, #9]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8012e30:	1e7b      	subs	r3, r7, #1
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	2b7c      	cmp	r3, #124	@ 0x7c
 8012e36:	d82a      	bhi.n	8012e8e <eMBFuncReadWriteMultipleHoldingRegister+0x94>
 8012e38:	b35a      	cbz	r2, 8012e92 <eMBFuncReadWriteMultipleHoldingRegister+0x98>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8012e3a:	2a79      	cmp	r2, #121	@ 0x79
 8012e3c:	d82b      	bhi.n	8012e96 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
 8012e3e:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 8012e42:	d001      	beq.n	8012e48 <eMBFuncReadWriteMultipleHoldingRegister+0x4e>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012e44:	2003      	movs	r0, #3
 8012e46:	e021      	b.n	8012e8c <eMBFuncReadWriteMultipleHoldingRegister+0x92>
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8012e48:	2301      	movs	r3, #1
 8012e4a:	f104 000a 	add.w	r0, r4, #10
 8012e4e:	f7ff f976 	bl	801213e <eMBRegHoldingCB>
 8012e52:	4603      	mov	r3, r0
            if( eRegStatus == MB_ENOERR )
 8012e54:	b9b0      	cbnz	r0, 8012e84 <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                *usLen = MB_PDU_FUNC_OFF;
 8012e56:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8012e58:	4620      	mov	r0, r4
 8012e5a:	2217      	movs	r2, #23
 8012e5c:	f800 2b02 	strb.w	r2, [r0], #2
                *usLen += 1;
 8012e60:	882a      	ldrh	r2, [r5, #0]
 8012e62:	3201      	adds	r2, #1
 8012e64:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8012e66:	007a      	lsls	r2, r7, #1
 8012e68:	7062      	strb	r2, [r4, #1]
                *usLen += 1;
 8012e6a:	882a      	ldrh	r2, [r5, #0]
 8012e6c:	3201      	adds	r2, #1
 8012e6e:	802a      	strh	r2, [r5, #0]
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8012e70:	463a      	mov	r2, r7
 8012e72:	4631      	mov	r1, r6
 8012e74:	f7ff f963 	bl	801213e <eMBRegHoldingCB>
                if( eRegStatus == MB_ENOERR )
 8012e78:	b920      	cbnz	r0, 8012e84 <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                    *usLen += 2 * usRegReadCount;
 8012e7a:	882b      	ldrh	r3, [r5, #0]
 8012e7c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8012e80:	802b      	strh	r3, [r5, #0]
            if( eRegStatus != MB_ENOERR )
 8012e82:	e003      	b.n	8012e8c <eMBFuncReadWriteMultipleHoldingRegister+0x92>
                eStatus = prveMBError2Exception( eRegStatus );
 8012e84:	f000 f894 	bl	8012fb0 <prveMBError2Exception>
 8012e88:	e000      	b.n	8012e8c <eMBFuncReadWriteMultipleHoldingRegister+0x92>
    eMBException    eStatus = MB_EX_NONE;
 8012e8a:	2000      	movs	r0, #0
        }
    }
    return eStatus;
}
 8012e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012e8e:	2003      	movs	r0, #3
 8012e90:	e7fc      	b.n	8012e8c <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 8012e92:	2003      	movs	r0, #3
 8012e94:	e7fa      	b.n	8012e8c <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 8012e96:	2003      	movs	r0, #3
 8012e98:	e7f8      	b.n	8012e8c <eMBFuncReadWriteMultipleHoldingRegister+0x92>

08012e9a <eMBFuncReadInputRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8012e9a:	880a      	ldrh	r2, [r1, #0]
 8012e9c:	2a05      	cmp	r2, #5
 8012e9e:	d001      	beq.n	8012ea4 <eMBFuncReadInputRegister+0xa>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012ea0:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8012ea2:	4770      	bx	lr
{
 8012ea4:	b538      	push	{r3, r4, r5, lr}
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8012eaa:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8012eac:	7881      	ldrb	r1, [r0, #2]
 8012eae:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
        usRegAddress++;
 8012eb2:	3101      	adds	r1, #1
 8012eb4:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8012eb6:	78c2      	ldrb	r2, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8012eb8:	7905      	ldrb	r5, [r0, #4]
 8012eba:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8012ebe:	1e6a      	subs	r2, r5, #1
 8012ec0:	b292      	uxth	r2, r2
        if( ( usRegCount >= 1 )
 8012ec2:	2a7b      	cmp	r2, #123	@ 0x7b
 8012ec4:	d901      	bls.n	8012eca <eMBFuncReadInputRegister+0x30>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012ec6:	2003      	movs	r0, #3
}
 8012ec8:	bd38      	pop	{r3, r4, r5, pc}
            *usLen = MB_PDU_FUNC_OFF;
 8012eca:	2200      	movs	r2, #0
 8012ecc:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8012ece:	2204      	movs	r2, #4
 8012ed0:	f800 2b02 	strb.w	r2, [r0], #2
            *usLen += 1;
 8012ed4:	8822      	ldrh	r2, [r4, #0]
 8012ed6:	3201      	adds	r2, #1
 8012ed8:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8012eda:	006a      	lsls	r2, r5, #1
 8012edc:	705a      	strb	r2, [r3, #1]
            *usLen += 1;
 8012ede:	8823      	ldrh	r3, [r4, #0]
 8012ee0:	3301      	adds	r3, #1
 8012ee2:	8023      	strh	r3, [r4, #0]
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8012ee4:	462a      	mov	r2, r5
 8012ee6:	f7ff f928 	bl	801213a <eMBRegInputCB>
            if( eRegStatus != MB_ENOERR )
 8012eea:	b920      	cbnz	r0, 8012ef6 <eMBFuncReadInputRegister+0x5c>
                *usLen += usRegCount * 2;
 8012eec:	8823      	ldrh	r3, [r4, #0]
 8012eee:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8012ef2:	8023      	strh	r3, [r4, #0]
 8012ef4:	e7e8      	b.n	8012ec8 <eMBFuncReadInputRegister+0x2e>
                eStatus = prveMBError2Exception( eRegStatus );
 8012ef6:	f000 f85b 	bl	8012fb0 <prveMBError2Exception>
 8012efa:	e7e5      	b.n	8012ec8 <eMBFuncReadInputRegister+0x2e>

08012efc <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8012efc:	b538      	push	{r3, r4, r5, lr}
 8012efe:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8012f00:	4b05      	ldr	r3, [pc, #20]	@ (8012f18 <eMBFuncReportSlaveID+0x1c>)
 8012f02:	881c      	ldrh	r4, [r3, #0]
 8012f04:	4622      	mov	r2, r4
 8012f06:	4905      	ldr	r1, [pc, #20]	@ (8012f1c <eMBFuncReportSlaveID+0x20>)
 8012f08:	3001      	adds	r0, #1
 8012f0a:	f01b f9f5 	bl	802e2f8 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8012f0e:	3401      	adds	r4, #1
 8012f10:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 8012f12:	2000      	movs	r0, #0
 8012f14:	bd38      	pop	{r3, r4, r5, pc}
 8012f16:	bf00      	nop
 8012f18:	20000bd4 	.word	0x20000bd4
 8012f1c:	20000bd8 	.word	0x20000bd8

08012f20 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8012f20:	b510      	push	{r4, lr}
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 8012f22:	2a08      	cmp	r2, #8
 8012f24:	d823      	bhi.n	8012f6e <xMBUtilSetBits+0x4e>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8012f26:	ea4f 0ed1 	mov.w	lr, r1, lsr #3

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8012f2a:	f001 0407 	and.w	r4, r1, #7
 8012f2e:	fa03 f404 	lsl.w	r4, r3, r4

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8012f32:	f04f 0c01 	mov.w	ip, #1
 8012f36:	fa0c f202 	lsl.w	r2, ip, r2
 8012f3a:	b292      	uxth	r2, r2
 8012f3c:	3a01      	subs	r2, #1
 8012f3e:	b292      	uxth	r2, r2
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8012f40:	f001 0107 	and.w	r1, r1, #7
 8012f44:	fa02 f101 	lsl.w	r1, r2, r1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8012f48:	f810 300e 	ldrb.w	r3, [r0, lr]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8012f4c:	eb0e 020c 	add.w	r2, lr, ip
 8012f50:	f810 c002 	ldrb.w	ip, [r0, r2]
 8012f54:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8012f58:	b21b      	sxth	r3, r3

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8012f5a:	ea23 0301 	bic.w	r3, r3, r1
 8012f5e:	b21b      	sxth	r3, r3
 8012f60:	4323      	orrs	r3, r4

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 8012f62:	f800 300e 	strb.w	r3, [r0, lr]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8012f66:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012f6a:	5483      	strb	r3, [r0, r2]
}
 8012f6c:	bd10      	pop	{r4, pc}
    assert( ucNBits <= 8 );
 8012f6e:	4b03      	ldr	r3, [pc, #12]	@ (8012f7c <xMBUtilSetBits+0x5c>)
 8012f70:	4a03      	ldr	r2, [pc, #12]	@ (8012f80 <xMBUtilSetBits+0x60>)
 8012f72:	2137      	movs	r1, #55	@ 0x37
 8012f74:	4803      	ldr	r0, [pc, #12]	@ (8012f84 <xMBUtilSetBits+0x64>)
 8012f76:	f018 fb49 	bl	802b60c <__assert_func>
 8012f7a:	bf00      	nop
 8012f7c:	08037f14 	.word	0x08037f14
 8012f80:	0803c870 	.word	0x0803c870
 8012f84:	08037f24 	.word	0x08037f24

08012f88 <xMBUtilGetBits>:
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8012f88:	ea4f 0cd1 	mov.w	ip, r1, lsr #3

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	4093      	lsls	r3, r2
 8012f90:	b29b      	uxth	r3, r3
 8012f92:	3b01      	subs	r3, #1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8012f94:	f810 200c 	ldrb.w	r2, [r0, ip]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8012f98:	4460      	add	r0, ip
 8012f9a:	7840      	ldrb	r0, [r0, #1]
 8012f9c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8012fa0:	f001 0107 	and.w	r1, r1, #7
 8012fa4:	410a      	asrs	r2, r1
 8012fa6:	b292      	uxth	r2, r2

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 8012fa8:	ea03 0002 	and.w	r0, r3, r2

    return ( UCHAR ) usWordBuf;
}
 8012fac:	b2c0      	uxtb	r0, r0
 8012fae:	4770      	bx	lr

08012fb0 <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
 8012fb0:	2801      	cmp	r0, #1
 8012fb2:	d003      	beq.n	8012fbc <prveMBError2Exception+0xc>
 8012fb4:	2807      	cmp	r0, #7
 8012fb6:	d003      	beq.n	8012fc0 <prveMBError2Exception+0x10>
 8012fb8:	b920      	cbnz	r0, 8012fc4 <prveMBError2Exception+0x14>
 8012fba:	4770      	bx	lr
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
            break;

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8012fbc:	2002      	movs	r0, #2
 8012fbe:	4770      	bx	lr
            break;

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 8012fc0:	2006      	movs	r0, #6
 8012fc2:	4770      	bx	lr
            break;

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8012fc4:	2004      	movs	r0, #4
            break;
    }

    return eStatus;
}
 8012fc6:	4770      	bx	lr

08012fc8 <eMBTCPInit>:
}

#if MB_TCP_ENABLED > 0
eMBErrorCode
eMBTCPInit( USHORT ucTCPPort )
{
 8012fc8:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
 8012fca:	f000 f9ce 	bl	801336a <eMBTCPDoInit>
 8012fce:	4604      	mov	r4, r0
 8012fd0:	b120      	cbz	r0, 8012fdc <eMBTCPInit+0x14>
    {
        eMBState = STATE_DISABLED;
 8012fd2:	4b11      	ldr	r3, [pc, #68]	@ (8013018 <eMBTCPInit+0x50>)
 8012fd4:	2201      	movs	r2, #1
 8012fd6:	701a      	strb	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
        eMBCurrentMode = MB_TCP;
        eMBState = STATE_DISABLED;
    }
    return eStatus;
}
 8012fd8:	4620      	mov	r0, r4
 8012fda:	bd10      	pop	{r4, pc}
    else if( !xMBPortEventInit(  ) )
 8012fdc:	f000 f8ca 	bl	8013174 <xMBPortEventInit>
 8012fe0:	b1c0      	cbz	r0, 8013014 <eMBTCPInit+0x4c>
        pvMBFrameStartCur = eMBTCPStart;
 8012fe2:	4b0e      	ldr	r3, [pc, #56]	@ (801301c <eMBTCPInit+0x54>)
 8012fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8013020 <eMBTCPInit+0x58>)
 8012fe6:	601a      	str	r2, [r3, #0]
        pvMBFrameStopCur = eMBTCPStop;
 8012fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8013024 <eMBTCPInit+0x5c>)
 8012fea:	4a0f      	ldr	r2, [pc, #60]	@ (8013028 <eMBTCPInit+0x60>)
 8012fec:	601a      	str	r2, [r3, #0]
        peMBFrameReceiveCur = eMBTCPReceive;
 8012fee:	4b0f      	ldr	r3, [pc, #60]	@ (801302c <eMBTCPInit+0x64>)
 8012ff0:	4a0f      	ldr	r2, [pc, #60]	@ (8013030 <eMBTCPInit+0x68>)
 8012ff2:	601a      	str	r2, [r3, #0]
        peMBFrameSendCur = eMBTCPSend;
 8012ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8013034 <eMBTCPInit+0x6c>)
 8012ff6:	4a10      	ldr	r2, [pc, #64]	@ (8013038 <eMBTCPInit+0x70>)
 8012ff8:	601a      	str	r2, [r3, #0]
        pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
 8012ffa:	4b10      	ldr	r3, [pc, #64]	@ (801303c <eMBTCPInit+0x74>)
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	601a      	str	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 8013000:	4b0f      	ldr	r3, [pc, #60]	@ (8013040 <eMBTCPInit+0x78>)
 8013002:	22ff      	movs	r2, #255	@ 0xff
 8013004:	701a      	strb	r2, [r3, #0]
        eMBCurrentMode = MB_TCP;
 8013006:	4b0f      	ldr	r3, [pc, #60]	@ (8013044 <eMBTCPInit+0x7c>)
 8013008:	2202      	movs	r2, #2
 801300a:	701a      	strb	r2, [r3, #0]
        eMBState = STATE_DISABLED;
 801300c:	4b02      	ldr	r3, [pc, #8]	@ (8013018 <eMBTCPInit+0x50>)
 801300e:	2201      	movs	r2, #1
 8013010:	701a      	strb	r2, [r3, #0]
 8013012:	e7e1      	b.n	8012fd8 <eMBTCPInit+0x10>
        eStatus = MB_EPORTERR;
 8013014:	2403      	movs	r4, #3
 8013016:	e7df      	b.n	8012fd8 <eMBTCPInit+0x10>
 8013018:	2000009c 	.word	0x2000009c
 801301c:	20000c10 	.word	0x20000c10
 8013020:	0801337b 	.word	0x0801337b
 8013024:	20000c0c 	.word	0x20000c0c
 8013028:	0801337d 	.word	0x0801337d
 801302c:	20000c08 	.word	0x20000c08
 8013030:	08013385 	.word	0x08013385
 8013034:	20000c14 	.word	0x20000c14
 8013038:	080133c5 	.word	0x080133c5
 801303c:	20000c04 	.word	0x20000c04
 8013040:	20000c19 	.word	0x20000c19
 8013044:	20000c18 	.word	0x20000c18

08013048 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8013048:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 801304a:	4b06      	ldr	r3, [pc, #24]	@ (8013064 <eMBEnable+0x1c>)
 801304c:	781b      	ldrb	r3, [r3, #0]
 801304e:	2b01      	cmp	r3, #1
 8013050:	d001      	beq.n	8013056 <eMBEnable+0xe>
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8013052:	2006      	movs	r0, #6
    }
    return eStatus;
}
 8013054:	bd08      	pop	{r3, pc}
        pvMBFrameStartCur(  );
 8013056:	4b04      	ldr	r3, [pc, #16]	@ (8013068 <eMBEnable+0x20>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 801305c:	2000      	movs	r0, #0
 801305e:	4b01      	ldr	r3, [pc, #4]	@ (8013064 <eMBEnable+0x1c>)
 8013060:	7018      	strb	r0, [r3, #0]
 8013062:	e7f7      	b.n	8013054 <eMBEnable+0xc>
 8013064:	2000009c 	.word	0x2000009c
 8013068:	20000c10 	.word	0x20000c10

0801306c <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 801306c:	b530      	push	{r4, r5, lr}
 801306e:	b083      	sub	sp, #12
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8013070:	4b36      	ldr	r3, [pc, #216]	@ (801314c <eMBPoll+0xe0>)
 8013072:	781c      	ldrb	r4, [r3, #0]
 8013074:	2c00      	cmp	r4, #0
 8013076:	d163      	bne.n	8013140 <eMBPoll+0xd4>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8013078:	f10d 0007 	add.w	r0, sp, #7
 801307c:	f000 f88e 	bl	801319c <xMBPortEventGet>
 8013080:	2801      	cmp	r0, #1
 8013082:	d002      	beq.n	801308a <eMBPoll+0x1e>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
 8013084:	4620      	mov	r0, r4
 8013086:	b003      	add	sp, #12
 8013088:	bd30      	pop	{r4, r5, pc}
        switch ( eEvent )
 801308a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801308e:	2b01      	cmp	r3, #1
 8013090:	d014      	beq.n	80130bc <eMBPoll+0x50>
 8013092:	2b02      	cmp	r3, #2
 8013094:	d1f6      	bne.n	8013084 <eMBPoll+0x18>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8013096:	4b2e      	ldr	r3, [pc, #184]	@ (8013150 <eMBPoll+0xe4>)
 8013098:	6818      	ldr	r0, [r3, #0]
 801309a:	7801      	ldrb	r1, [r0, #0]
 801309c:	4b2d      	ldr	r3, [pc, #180]	@ (8013154 <eMBPoll+0xe8>)
 801309e:	7019      	strb	r1, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80130a0:	4b2d      	ldr	r3, [pc, #180]	@ (8013158 <eMBPoll+0xec>)
 80130a2:	2201      	movs	r2, #1
 80130a4:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80130a6:	2300      	movs	r3, #0
 80130a8:	2b0f      	cmp	r3, #15
 80130aa:	dc25      	bgt.n	80130f8 <eMBPoll+0x8c>
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80130ac:	4a2b      	ldr	r2, [pc, #172]	@ (801315c <eMBPoll+0xf0>)
 80130ae:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80130b2:	b30a      	cbz	r2, 80130f8 <eMBPoll+0x8c>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80130b4:	4291      	cmp	r1, r2
 80130b6:	d017      	beq.n	80130e8 <eMBPoll+0x7c>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80130b8:	3301      	adds	r3, #1
 80130ba:	e7f5      	b.n	80130a8 <eMBPoll+0x3c>
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 80130bc:	4b28      	ldr	r3, [pc, #160]	@ (8013160 <eMBPoll+0xf4>)
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	4a28      	ldr	r2, [pc, #160]	@ (8013164 <eMBPoll+0xf8>)
 80130c2:	4923      	ldr	r1, [pc, #140]	@ (8013150 <eMBPoll+0xe4>)
 80130c4:	4828      	ldr	r0, [pc, #160]	@ (8013168 <eMBPoll+0xfc>)
 80130c6:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 80130c8:	4605      	mov	r5, r0
 80130ca:	2800      	cmp	r0, #0
 80130cc:	d1da      	bne.n	8013084 <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 80130ce:	4b26      	ldr	r3, [pc, #152]	@ (8013168 <eMBPoll+0xfc>)
 80130d0:	781b      	ldrb	r3, [r3, #0]
 80130d2:	4a26      	ldr	r2, [pc, #152]	@ (801316c <eMBPoll+0x100>)
 80130d4:	7812      	ldrb	r2, [r2, #0]
 80130d6:	4293      	cmp	r3, r2
 80130d8:	d001      	beq.n	80130de <eMBPoll+0x72>
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d132      	bne.n	8013144 <eMBPoll+0xd8>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 80130de:	2002      	movs	r0, #2
 80130e0:	f000 f850 	bl	8013184 <xMBPortEventPost>
    return MB_ENOERR;
 80130e4:	462c      	mov	r4, r5
 80130e6:	e7cd      	b.n	8013084 <eMBPoll+0x18>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 80130e8:	4a1c      	ldr	r2, [pc, #112]	@ (801315c <eMBPoll+0xf0>)
 80130ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80130ee:	685b      	ldr	r3, [r3, #4]
 80130f0:	491c      	ldr	r1, [pc, #112]	@ (8013164 <eMBPoll+0xf8>)
 80130f2:	4798      	blx	r3
 80130f4:	4b18      	ldr	r3, [pc, #96]	@ (8013158 <eMBPoll+0xec>)
 80130f6:	7018      	strb	r0, [r3, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 80130f8:	4b1b      	ldr	r3, [pc, #108]	@ (8013168 <eMBPoll+0xfc>)
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	b323      	cbz	r3, 8013148 <eMBPoll+0xdc>
                if( eException != MB_EX_NONE )
 80130fe:	4b16      	ldr	r3, [pc, #88]	@ (8013158 <eMBPoll+0xec>)
 8013100:	781b      	ldrb	r3, [r3, #0]
 8013102:	b19b      	cbz	r3, 801312c <eMBPoll+0xc0>
                    usLength = 0;
 8013104:	4a17      	ldr	r2, [pc, #92]	@ (8013164 <eMBPoll+0xf8>)
 8013106:	2100      	movs	r1, #0
 8013108:	8011      	strh	r1, [r2, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 801310a:	4912      	ldr	r1, [pc, #72]	@ (8013154 <eMBPoll+0xe8>)
 801310c:	7809      	ldrb	r1, [r1, #0]
 801310e:	4810      	ldr	r0, [pc, #64]	@ (8013150 <eMBPoll+0xe4>)
 8013110:	6805      	ldr	r5, [r0, #0]
 8013112:	f04f 0c01 	mov.w	ip, #1
 8013116:	f8a2 c000 	strh.w	ip, [r2]
 801311a:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 801311e:	7029      	strb	r1, [r5, #0]
                    ucMBFrame[usLength++] = eException;
 8013120:	6800      	ldr	r0, [r0, #0]
 8013122:	8811      	ldrh	r1, [r2, #0]
 8013124:	eb01 050c 	add.w	r5, r1, ip
 8013128:	8015      	strh	r5, [r2, #0]
 801312a:	5443      	strb	r3, [r0, r1]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 801312c:	4b10      	ldr	r3, [pc, #64]	@ (8013170 <eMBPoll+0x104>)
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	4a0c      	ldr	r2, [pc, #48]	@ (8013164 <eMBPoll+0xf8>)
 8013132:	8812      	ldrh	r2, [r2, #0]
 8013134:	4906      	ldr	r1, [pc, #24]	@ (8013150 <eMBPoll+0xe4>)
 8013136:	6809      	ldr	r1, [r1, #0]
 8013138:	480c      	ldr	r0, [pc, #48]	@ (801316c <eMBPoll+0x100>)
 801313a:	7800      	ldrb	r0, [r0, #0]
 801313c:	4798      	blx	r3
 801313e:	e7a1      	b.n	8013084 <eMBPoll+0x18>
        return MB_EILLSTATE;
 8013140:	2406      	movs	r4, #6
 8013142:	e79f      	b.n	8013084 <eMBPoll+0x18>
    return MB_ENOERR;
 8013144:	4604      	mov	r4, r0
 8013146:	e79d      	b.n	8013084 <eMBPoll+0x18>
 8013148:	461c      	mov	r4, r3
 801314a:	e79b      	b.n	8013084 <eMBPoll+0x18>
 801314c:	2000009c 	.word	0x2000009c
 8013150:	20000bfc 	.word	0x20000bfc
 8013154:	20000bf9 	.word	0x20000bf9
 8013158:	20000bf8 	.word	0x20000bf8
 801315c:	2000001c 	.word	0x2000001c
 8013160:	20000c08 	.word	0x20000c08
 8013164:	20000bfa 	.word	0x20000bfa
 8013168:	20000c00 	.word	0x20000c00
 801316c:	20000c19 	.word	0x20000c19
 8013170:	20000c14 	.word	0x20000c14

08013174 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
 8013174:	4b02      	ldr	r3, [pc, #8]	@ (8013180 <xMBPortEventInit+0xc>)
 8013176:	2200      	movs	r2, #0
 8013178:	701a      	strb	r2, [r3, #0]
    return TRUE;
}
 801317a:	2001      	movs	r0, #1
 801317c:	4770      	bx	lr
 801317e:	bf00      	nop
 8013180:	20000c1a 	.word	0x20000c1a

08013184 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
 8013184:	2301      	movs	r3, #1
 8013186:	4a03      	ldr	r2, [pc, #12]	@ (8013194 <xMBPortEventPost+0x10>)
 8013188:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 801318a:	4a03      	ldr	r2, [pc, #12]	@ (8013198 <xMBPortEventPost+0x14>)
 801318c:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 801318e:	4618      	mov	r0, r3
 8013190:	4770      	bx	lr
 8013192:	bf00      	nop
 8013194:	20000c1a 	.word	0x20000c1a
 8013198:	20000c1b 	.word	0x20000c1b

0801319c <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 801319c:	4603      	mov	r3, r0
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 801319e:	4a05      	ldr	r2, [pc, #20]	@ (80131b4 <xMBPortEventGet+0x18>)
 80131a0:	7810      	ldrb	r0, [r2, #0]
 80131a2:	b130      	cbz	r0, 80131b2 <xMBPortEventGet+0x16>
    {
        *eEvent = eQueuedEvent;
 80131a4:	4a04      	ldr	r2, [pc, #16]	@ (80131b8 <xMBPortEventGet+0x1c>)
 80131a6:	7812      	ldrb	r2, [r2, #0]
 80131a8:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 80131aa:	4b02      	ldr	r3, [pc, #8]	@ (80131b4 <xMBPortEventGet+0x18>)
 80131ac:	2200      	movs	r2, #0
 80131ae:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 80131b0:	2001      	movs	r0, #1
    }
    return xEventHappened;
}
 80131b2:	4770      	bx	lr
 80131b4:	20000c1a 	.word	0x20000c1a
 80131b8:	20000c1b 	.word	0x20000c1b

080131bc <handler_mb_tcp>:


//mg_check_ip_acl(struct mg_str acl, struct mg_addr *remote_ip);
static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_READ){
 80131bc:	2907      	cmp	r1, #7
 80131be:	d000      	beq.n	80131c2 <handler_mb_tcp+0x6>
 80131c0:	4770      	bx	lr
static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){
 80131c2:	b538      	push	{r3, r4, r5, lr}
 80131c4:	4604      	mov	r4, r0
		if (mg_check_ip_acl(mg_acl, &c->rem) != 1){
 80131c6:	4b1e      	ldr	r3, [pc, #120]	@ (8013240 <handler_mb_tcp+0x84>)
 80131c8:	f100 021c 	add.w	r2, r0, #28
 80131cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80131d0:	f014 fb10 	bl	80277f4 <mg_check_ip_acl>
 80131d4:	2801      	cmp	r0, #1
 80131d6:	d006      	beq.n	80131e6 <handler_mb_tcp+0x2a>
			c->is_closing = 1;
 80131d8:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80131dc:	f043 0320 	orr.w	r3, r3, #32
 80131e0:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
			}
		}else{
			c->is_closing = 1;
		}
	}
}
 80131e4:	bd38      	pop	{r3, r4, r5, pc}
		ucTCPRequestLen = r->len;
 80131e6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80131e8:	b293      	uxth	r3, r2
 80131ea:	4916      	ldr	r1, [pc, #88]	@ (8013244 <handler_mb_tcp+0x88>)
 80131ec:	800b      	strh	r3, [r1, #0]
		if(ucTCPRequestLen>0){
 80131ee:	b933      	cbnz	r3, 80131fe <handler_mb_tcp+0x42>
			c->is_closing = 1;
 80131f0:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80131f4:	f043 0320 	orr.w	r3, r3, #32
 80131f8:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 80131fc:	e7f2      	b.n	80131e4 <handler_mb_tcp+0x28>
			memcpy(ucTCPRequestFrame, r->buf, sizeof(uint8_t) * ucTCPRequestLen);
 80131fe:	461a      	mov	r2, r3
 8013200:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013202:	4811      	ldr	r0, [pc, #68]	@ (8013248 <handler_mb_tcp+0x8c>)
 8013204:	f01b f878 	bl	802e2f8 <memcpy>
			xMBPortEventPost (EV_FRAME_RECEIVED);
 8013208:	2001      	movs	r0, #1
 801320a:	f7ff ffbb 	bl	8013184 <xMBPortEventPost>
			eMBPoll ();
 801320e:	f7ff ff2d 	bl	801306c <eMBPoll>
			eMBPoll ();
 8013212:	f7ff ff2b 	bl	801306c <eMBPoll>
			if(bFrameSent){
 8013216:	4b0d      	ldr	r3, [pc, #52]	@ (801324c <handler_mb_tcp+0x90>)
 8013218:	781b      	ldrb	r3, [r3, #0]
 801321a:	b933      	cbnz	r3, 801322a <handler_mb_tcp+0x6e>
				c->is_closing = 1;
 801321c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8013220:	f043 0320 	orr.w	r3, r3, #32
 8013224:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8013228:	e7dc      	b.n	80131e4 <handler_mb_tcp+0x28>
				bFrameSent = FALSE;
 801322a:	2500      	movs	r5, #0
 801322c:	4b07      	ldr	r3, [pc, #28]	@ (801324c <handler_mb_tcp+0x90>)
 801322e:	701d      	strb	r5, [r3, #0]
				mg_send(c, ucTCPResponseFrame, ucTCPResponseLen);
 8013230:	4b07      	ldr	r3, [pc, #28]	@ (8013250 <handler_mb_tcp+0x94>)
 8013232:	881a      	ldrh	r2, [r3, #0]
 8013234:	4907      	ldr	r1, [pc, #28]	@ (8013254 <handler_mb_tcp+0x98>)
 8013236:	4620      	mov	r0, r4
 8013238:	f015 fbf4 	bl	8028a24 <mg_send>
				r->len = 0;                  // Tell Mongoose we've consumed data
 801323c:	6425      	str	r5, [r4, #64]	@ 0x40
 801323e:	e7d1      	b.n	80131e4 <handler_mb_tcp+0x28>
 8013240:	20000c1c 	.word	0x20000c1c
 8013244:	20001428 	.word	0x20001428
 8013248:	2000142c 	.word	0x2000142c
 801324c:	20000c24 	.word	0x20000c24
 8013250:	20000c26 	.word	0x20000c26
 8013254:	20000c28 	.word	0x20000c28

08013258 <my_calloc>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 8013258:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801325a:	fb01 f400 	mul.w	r4, r1, r0
 801325e:	4620      	mov	r0, r4
 8013260:	f008 feda 	bl	801c018 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8013264:	4605      	mov	r5, r0
 8013266:	b118      	cbz	r0, 8013270 <my_calloc+0x18>
 8013268:	4622      	mov	r2, r4
 801326a:	2100      	movs	r1, #0
 801326c:	f019 fac8 	bl	802c800 <memset>
  return p;
}
 8013270:	4628      	mov	r0, r5
 8013272:	bd38      	pop	{r3, r4, r5, pc}

08013274 <init_mb_tcp>:



void init_mb_tcp(void * param){
 8013274:	b530      	push	{r4, r5, lr}
 8013276:	b083      	sub	sp, #12

	struct mg_mgr *mgr = (struct mg_mgr *)param;  // Event manager
	mg_listen(mgr, s_lsn, handler_mb_tcp, NULL);  // Create server connection
 8013278:	2300      	movs	r3, #0
 801327a:	4a24      	ldr	r2, [pc, #144]	@ (801330c <init_mb_tcp+0x98>)
 801327c:	4924      	ldr	r1, [pc, #144]	@ (8013310 <init_mb_tcp+0x9c>)
 801327e:	f015 fae5 	bl	802884c <mg_listen>

	eMBTCPInit(0);
 8013282:	2000      	movs	r0, #0
 8013284:	f7ff fea0 	bl	8012fc8 <eMBTCPInit>
	eMBEnable();
 8013288:	f7ff fede 	bl	8013048 <eMBEnable>

	size_t acl_size = 0;
 801328c:	2200      	movs	r2, #0
 801328e:	9201      	str	r2, [sp, #4]
	mg_fs_lfs_status(ACL_FILE, &acl_size, NULL);
 8013290:	a901      	add	r1, sp, #4
 8013292:	4820      	ldr	r0, [pc, #128]	@ (8013314 <init_mb_tcp+0xa0>)
 8013294:	f009 f828 	bl	801c2e8 <mg_fs_lfs_status>
	if(acl_size && (acl_size < ACL_FILE_MAX_SIZE)){
 8013298:	9801      	ldr	r0, [sp, #4]
 801329a:	1e42      	subs	r2, r0, #1
 801329c:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 80132a0:	429a      	cmp	r2, r3
 80132a2:	d815      	bhi.n	80132d0 <init_mb_tcp+0x5c>
		mg_acl.buf = calloc(acl_size + 1, sizeof(char));
 80132a4:	2101      	movs	r1, #1
 80132a6:	4408      	add	r0, r1
 80132a8:	f7ff ffd6 	bl	8013258 <my_calloc>
 80132ac:	4d1a      	ldr	r5, [pc, #104]	@ (8013318 <init_mb_tcp+0xa4>)
 80132ae:	6028      	str	r0, [r5, #0]
		void *fd = mg_fs_lfs_open(ACL_FILE, MG_FS_READ);
 80132b0:	2101      	movs	r1, #1
 80132b2:	4818      	ldr	r0, [pc, #96]	@ (8013314 <init_mb_tcp+0xa0>)
 80132b4:	f009 f856 	bl	801c364 <mg_fs_lfs_open>
 80132b8:	4604      	mov	r4, r0
		mg_fs_lfs_read(fd, mg_acl.buf, acl_size);
 80132ba:	9a01      	ldr	r2, [sp, #4]
 80132bc:	6829      	ldr	r1, [r5, #0]
 80132be:	f009 f881 	bl	801c3c4 <mg_fs_lfs_read>
		mg_acl.len = acl_size;
 80132c2:	9b01      	ldr	r3, [sp, #4]
 80132c4:	606b      	str	r3, [r5, #4]
		mg_fs_lfs_close(fd);
 80132c6:	4620      	mov	r0, r4
 80132c8:	f009 f870 	bl	801c3ac <mg_fs_lfs_close>
		strncpy(mg_acl.buf, DEFAULT_ACL, mg_acl.len);
		void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
		mg_fs_lfs_write(fd1, mg_acl.buf, mg_acl.len);
		mg_fs_lfs_close(fd1);
	}
}
 80132cc:	b003      	add	sp, #12
 80132ce:	bd30      	pop	{r4, r5, pc}
		mg_acl.buf = calloc(strlen(DEFAULT_ACL) + 1, sizeof(char));
 80132d0:	2101      	movs	r1, #1
 80132d2:	200b      	movs	r0, #11
 80132d4:	f7ff ffc0 	bl	8013258 <my_calloc>
 80132d8:	4603      	mov	r3, r0
 80132da:	4c0f      	ldr	r4, [pc, #60]	@ (8013318 <init_mb_tcp+0xa4>)
 80132dc:	6020      	str	r0, [r4, #0]
		mg_acl.len = strlen(DEFAULT_ACL) + 1;
 80132de:	220b      	movs	r2, #11
 80132e0:	6062      	str	r2, [r4, #4]
		strncpy(mg_acl.buf, DEFAULT_ACL, mg_acl.len);
 80132e2:	4a0e      	ldr	r2, [pc, #56]	@ (801331c <init_mb_tcp+0xa8>)
 80132e4:	ca03      	ldmia	r2!, {r0, r1}
 80132e6:	6018      	str	r0, [r3, #0]
 80132e8:	6059      	str	r1, [r3, #4]
 80132ea:	8811      	ldrh	r1, [r2, #0]
 80132ec:	7892      	ldrb	r2, [r2, #2]
 80132ee:	8119      	strh	r1, [r3, #8]
 80132f0:	729a      	strb	r2, [r3, #10]
		void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
 80132f2:	2102      	movs	r1, #2
 80132f4:	4807      	ldr	r0, [pc, #28]	@ (8013314 <init_mb_tcp+0xa0>)
 80132f6:	f009 f835 	bl	801c364 <mg_fs_lfs_open>
 80132fa:	4605      	mov	r5, r0
		mg_fs_lfs_write(fd1, mg_acl.buf, mg_acl.len);
 80132fc:	6862      	ldr	r2, [r4, #4]
 80132fe:	6821      	ldr	r1, [r4, #0]
 8013300:	f009 f86c 	bl	801c3dc <mg_fs_lfs_write>
		mg_fs_lfs_close(fd1);
 8013304:	4628      	mov	r0, r5
 8013306:	f009 f851 	bl	801c3ac <mg_fs_lfs_close>
}
 801330a:	e7df      	b.n	80132cc <init_mb_tcp+0x58>
 801330c:	080131bd 	.word	0x080131bd
 8013310:	08037f6c 	.word	0x08037f6c
 8013314:	08037f80 	.word	0x08037f80
 8013318:	20000c1c 	.word	0x20000c1c
 801331c:	08037f94 	.word	0x08037f94

08013320 <xMBTCPPortInit>:
BOOL  xMBTCPPortInit( USHORT usTCPPort )
{


    return TRUE;
}
 8013320:	2001      	movs	r0, #1
 8013322:	4770      	bx	lr

08013324 <xMBTCPPortGetRequest>:

BOOL  xMBTCPPortGetRequest( UCHAR **ppucMBTCPFrame, USHORT * usTCPLength )
{
    *ppucMBTCPFrame = (uint8_t *) &ucTCPRequestFrame[0];
 8013324:	4b04      	ldr	r3, [pc, #16]	@ (8013338 <xMBTCPPortGetRequest+0x14>)
 8013326:	6003      	str	r3, [r0, #0]
    *usTCPLength = ucTCPRequestLen;
 8013328:	4b04      	ldr	r3, [pc, #16]	@ (801333c <xMBTCPPortGetRequest+0x18>)
 801332a:	881a      	ldrh	r2, [r3, #0]
 801332c:	800a      	strh	r2, [r1, #0]
    // Reset the buffer.
    ucTCPRequestLen = 0;
 801332e:	2200      	movs	r2, #0
 8013330:	801a      	strh	r2, [r3, #0]
    return TRUE;
}
 8013332:	2001      	movs	r0, #1
 8013334:	4770      	bx	lr
 8013336:	bf00      	nop
 8013338:	2000142c 	.word	0x2000142c
 801333c:	20001428 	.word	0x20001428

08013340 <xMBTCPPortSendResponse>:


BOOL xMBTCPPortSendResponse( const UCHAR *pucMBTCPFrame, USHORT usTCPLength )
{
 8013340:	b510      	push	{r4, lr}
 8013342:	460c      	mov	r4, r1
      memcpy(ucTCPResponseFrame,pucMBTCPFrame , usTCPLength);
 8013344:	460a      	mov	r2, r1
 8013346:	4601      	mov	r1, r0
 8013348:	4804      	ldr	r0, [pc, #16]	@ (801335c <xMBTCPPortSendResponse+0x1c>)
 801334a:	f01a ffd5 	bl	802e2f8 <memcpy>
      ucTCPResponseLen = usTCPLength;
 801334e:	4b04      	ldr	r3, [pc, #16]	@ (8013360 <xMBTCPPortSendResponse+0x20>)
 8013350:	801c      	strh	r4, [r3, #0]
      bFrameSent = TRUE;
 8013352:	2001      	movs	r0, #1
 8013354:	4b03      	ldr	r3, [pc, #12]	@ (8013364 <xMBTCPPortSendResponse+0x24>)
 8013356:	7018      	strb	r0, [r3, #0]
      return bFrameSent;
}
 8013358:	bd10      	pop	{r4, pc}
 801335a:	bf00      	nop
 801335c:	20000c28 	.word	0x20000c28
 8013360:	20000c26 	.word	0x20000c26
 8013364:	20000c24 	.word	0x20000c24

08013368 <vMBTCPPortDisable>:
{
};

void vMBTCPPortDisable( void )
{
};
 8013368:	4770      	bx	lr

0801336a <eMBTCPDoInit>:


/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBTCPDoInit( USHORT ucTCPPort )
{
 801336a:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( xMBTCPPortInit( ucTCPPort ) == FALSE )
 801336c:	f7ff ffd8 	bl	8013320 <xMBTCPPortInit>
 8013370:	b108      	cbz	r0, 8013376 <eMBTCPDoInit+0xc>
    eMBErrorCode    eStatus = MB_ENOERR;
 8013372:	2000      	movs	r0, #0
    {
        eStatus = MB_EPORTERR;
    }
    return eStatus;
}
 8013374:	bd08      	pop	{r3, pc}
        eStatus = MB_EPORTERR;
 8013376:	2003      	movs	r0, #3
 8013378:	e7fc      	b.n	8013374 <eMBTCPDoInit+0xa>

0801337a <eMBTCPStart>:

void
eMBTCPStart( void )
{
}
 801337a:	4770      	bx	lr

0801337c <eMBTCPStop>:

void
eMBTCPStop( void )
{
 801337c:	b508      	push	{r3, lr}
    /* Make sure that no more clients are connected. */
    vMBTCPPortDisable( );
 801337e:	f7ff fff3 	bl	8013368 <vMBTCPPortDisable>
}
 8013382:	bd08      	pop	{r3, pc}

08013384 <eMBTCPReceive>:

eMBErrorCode
eMBTCPReceive( UCHAR * pucRcvAddress, UCHAR ** ppucFrame, USHORT * pusLength )
{
 8013384:	b570      	push	{r4, r5, r6, lr}
 8013386:	b082      	sub	sp, #8
 8013388:	4606      	mov	r6, r0
 801338a:	460d      	mov	r5, r1
 801338c:	4614      	mov	r4, r2
    eMBErrorCode    eStatus = MB_EIO;
    UCHAR          *pucMBTCPFrame;
    USHORT          usLength;
    USHORT          usPID;

    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 801338e:	f10d 0102 	add.w	r1, sp, #2
 8013392:	a801      	add	r0, sp, #4
 8013394:	f7ff ffc6 	bl	8013324 <xMBTCPPortGetRequest>
 8013398:	b180      	cbz	r0, 80133bc <eMBTCPReceive+0x38>
    {
        usPID = pucMBTCPFrame[MB_TCP_PID] << 8U;
 801339a:	9b01      	ldr	r3, [sp, #4]
 801339c:	7899      	ldrb	r1, [r3, #2]
        usPID |= pucMBTCPFrame[MB_TCP_PID + 1];
 801339e:	78da      	ldrb	r2, [r3, #3]

        if( usPID == MB_TCP_PROTOCOL_ID )
 80133a0:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 80133a4:	d10c      	bne.n	80133c0 <eMBTCPReceive+0x3c>
        {
            *ppucFrame = &pucMBTCPFrame[MB_TCP_FUNC];
 80133a6:	3307      	adds	r3, #7
 80133a8:	602b      	str	r3, [r5, #0]
            *pusLength = usLength - MB_TCP_FUNC;
 80133aa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80133ae:	3b07      	subs	r3, #7
 80133b0:	8023      	strh	r3, [r4, #0]
            eStatus = MB_ENOERR;

            /* Modbus TCP does not use any addresses. Fake the source address such
             * that the processing part deals with this frame.
             */
            *pucRcvAddress = MB_TCP_PSEUDO_ADDRESS;
 80133b2:	23ff      	movs	r3, #255	@ 0xff
 80133b4:	7033      	strb	r3, [r6, #0]
            eStatus = MB_ENOERR;
 80133b6:	2000      	movs	r0, #0
    else
    {
        eStatus = MB_EIO;
    }
    return eStatus;
}
 80133b8:	b002      	add	sp, #8
 80133ba:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EIO;
 80133bc:	2005      	movs	r0, #5
 80133be:	e7fb      	b.n	80133b8 <eMBTCPReceive+0x34>
    eMBErrorCode    eStatus = MB_EIO;
 80133c0:	2005      	movs	r0, #5
 80133c2:	e7f9      	b.n	80133b8 <eMBTCPReceive+0x34>

080133c4 <eMBTCPSend>:

eMBErrorCode
eMBTCPSend( UCHAR _unused, const UCHAR * pucFrame, USHORT usLength )
{
 80133c4:	b508      	push	{r3, lr}
 80133c6:	4608      	mov	r0, r1
    eMBErrorCode    eStatus = MB_ENOERR;
    UCHAR          *pucMBTCPFrame = ( UCHAR * ) pucFrame - MB_TCP_FUNC;
    USHORT          usTCPLength = usLength + MB_TCP_FUNC;
 80133c8:	1dd1      	adds	r1, r2, #7
     * function with the buffer returned by the previous call. Therefore we 
     * only have to update the length in the header. Note that the length 
     * header includes the size of the Modbus PDU and the UID Byte. Therefore 
     * the length is usLength plus one.
     */
    pucMBTCPFrame[MB_TCP_LEN] = ( usLength + 1 ) >> 8U;
 80133ca:	1c53      	adds	r3, r2, #1
 80133cc:	121b      	asrs	r3, r3, #8
 80133ce:	f800 3c03 	strb.w	r3, [r0, #-3]
    pucMBTCPFrame[MB_TCP_LEN + 1] = ( usLength + 1 ) & 0xFF;
 80133d2:	3201      	adds	r2, #1
 80133d4:	f800 2c02 	strb.w	r2, [r0, #-2]
    if( xMBTCPPortSendResponse( pucMBTCPFrame, usTCPLength ) == FALSE )
 80133d8:	b289      	uxth	r1, r1
 80133da:	3807      	subs	r0, #7
 80133dc:	f7ff ffb0 	bl	8013340 <xMBTCPPortSendResponse>
 80133e0:	b108      	cbz	r0, 80133e6 <eMBTCPSend+0x22>
    eMBErrorCode    eStatus = MB_ENOERR;
 80133e2:	2000      	movs	r0, #0
    {
        eStatus = MB_EIO;
    }
    return eStatus;
}
 80133e4:	bd08      	pop	{r3, pc}
        eStatus = MB_EIO;
 80133e6:	2005      	movs	r0, #5
 80133e8:	e7fc      	b.n	80133e4 <eMBTCPSend+0x20>
	...

080133ec <handle_OPTIONS_method>:
	free(pub_topics_str);
	free(subscr_topics_str);
}


static void handle_OPTIONS_method(struct mg_connection *c){
 80133ec:	b508      	push	{r3, lr}

	mg_http_reply(c, 200,
 80133ee:	4b03      	ldr	r3, [pc, #12]	@ (80133fc <handle_OPTIONS_method+0x10>)
 80133f0:	4a03      	ldr	r2, [pc, #12]	@ (8013400 <handle_OPTIONS_method+0x14>)
 80133f2:	21c8      	movs	r1, #200	@ 0xc8
 80133f4:	f012 f950 	bl	8025698 <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 80133f8:	bd08      	pop	{r3, pc}
 80133fa:	bf00      	nop
 80133fc:	0803bd1c 	.word	0x0803bd1c
 8013400:	08037fa0 	.word	0x08037fa0

08013404 <handler_dev_version>:
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET POST methods\"}\r\n");
		return;
	}
}

static void handler_dev_version(struct mg_connection *c, struct mg_http_message *hm){
 8013404:	b570      	push	{r4, r5, r6, lr}
 8013406:	b086      	sub	sp, #24
 8013408:	4605      	mov	r5, r0
 801340a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 801340c:	ae04      	add	r6, sp, #16
 801340e:	4912      	ldr	r1, [pc, #72]	@ (8013458 <handler_dev_version+0x54>)
 8013410:	4630      	mov	r0, r6
 8013412:	f012 facb 	bl	80259ac <mg_str_s>
 8013416:	2300      	movs	r3, #0
 8013418:	9300      	str	r3, [sp, #0]
 801341a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801341e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013422:	f012 fceb 	bl	8025dfc <mg_match>
 8013426:	b178      	cbz	r0, 8013448 <handler_dev_version+0x44>
		mg_http_reply(c, 200, headers,
 8013428:	4b0c      	ldr	r3, [pc, #48]	@ (801345c <handler_dev_version+0x58>)
 801342a:	9303      	str	r3, [sp, #12]
 801342c:	4b0c      	ldr	r3, [pc, #48]	@ (8013460 <handler_dev_version+0x5c>)
 801342e:	9302      	str	r3, [sp, #8]
 8013430:	4b0c      	ldr	r3, [pc, #48]	@ (8013464 <handler_dev_version+0x60>)
 8013432:	9301      	str	r3, [sp, #4]
 8013434:	4b0c      	ldr	r3, [pc, #48]	@ (8013468 <handler_dev_version+0x64>)
 8013436:	9300      	str	r3, [sp, #0]
 8013438:	4b0c      	ldr	r3, [pc, #48]	@ (801346c <handler_dev_version+0x68>)
 801343a:	4a0d      	ldr	r2, [pc, #52]	@ (8013470 <handler_dev_version+0x6c>)
 801343c:	21c8      	movs	r1, #200	@ 0xc8
 801343e:	4628      	mov	r0, r5
 8013440:	f012 f92a 	bl	8025698 <mg_http_reply>
	}else{
		mg_http_reply(c, 405, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
		return;
	}
}
 8013444:	b006      	add	sp, #24
 8013446:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013448:	4b0a      	ldr	r3, [pc, #40]	@ (8013474 <handler_dev_version+0x70>)
 801344a:	4a09      	ldr	r2, [pc, #36]	@ (8013470 <handler_dev_version+0x6c>)
 801344c:	f240 1195 	movw	r1, #405	@ 0x195
 8013450:	4628      	mov	r0, r5
 8013452:	f012 f921 	bl	8025698 <mg_http_reply>
		return;
 8013456:	e7f5      	b.n	8013444 <handler_dev_version+0x40>
 8013458:	08038040 	.word	0x08038040
 801345c:	08037c50 	.word	0x08037c50
 8013460:	08037c44 	.word	0x08037c44
 8013464:	08038100 	.word	0x08038100
 8013468:	08037d10 	.word	0x08037d10
 801346c:	08038044 	.word	0x08038044
 8013470:	08038090 	.word	0x08038090
 8013474:	08038104 	.word	0x08038104

08013478 <handle_firmware_deactivate>:
static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 8013478:	b570      	push	{r4, r5, r6, lr}
 801347a:	b084      	sub	sp, #16
 801347c:	4605      	mov	r5, r0
 801347e:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013480:	ae02      	add	r6, sp, #8
 8013482:	4914      	ldr	r1, [pc, #80]	@ (80134d4 <handle_firmware_deactivate+0x5c>)
 8013484:	4630      	mov	r0, r6
 8013486:	f012 fa91 	bl	80259ac <mg_str_s>
 801348a:	2300      	movs	r3, #0
 801348c:	9300      	str	r3, [sp, #0]
 801348e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013492:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013496:	f012 fcb1 	bl	8025dfc <mg_match>
 801349a:	b198      	cbz	r0, 80134c4 <handle_firmware_deactivate+0x4c>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 801349c:	4b0e      	ldr	r3, [pc, #56]	@ (80134d8 <handle_firmware_deactivate+0x60>)
 801349e:	6a1b      	ldr	r3, [r3, #32]
 80134a0:	480e      	ldr	r0, [pc, #56]	@ (80134dc <handle_firmware_deactivate+0x64>)
 80134a2:	4798      	blx	r3
 80134a4:	b138      	cbz	r0, 80134b6 <handle_firmware_deactivate+0x3e>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80134a6:	4b0e      	ldr	r3, [pc, #56]	@ (80134e0 <handle_firmware_deactivate+0x68>)
 80134a8:	4a0e      	ldr	r2, [pc, #56]	@ (80134e4 <handle_firmware_deactivate+0x6c>)
 80134aa:	21c8      	movs	r1, #200	@ 0xc8
 80134ac:	4628      	mov	r0, r5
 80134ae:	f012 f8f3 	bl	8025698 <mg_http_reply>
}
 80134b2:	b004      	add	sp, #16
 80134b4:	bd70      	pop	{r4, r5, r6, pc}
					mg_http_reply(c, 200, headers, //TODO delete for release,
 80134b6:	4b0c      	ldr	r3, [pc, #48]	@ (80134e8 <handle_firmware_deactivate+0x70>)
 80134b8:	4a0a      	ldr	r2, [pc, #40]	@ (80134e4 <handle_firmware_deactivate+0x6c>)
 80134ba:	21c8      	movs	r1, #200	@ 0xc8
 80134bc:	4628      	mov	r0, r5
 80134be:	f012 f8eb 	bl	8025698 <mg_http_reply>
 80134c2:	e7f6      	b.n	80134b2 <handle_firmware_deactivate+0x3a>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80134c4:	4b09      	ldr	r3, [pc, #36]	@ (80134ec <handle_firmware_deactivate+0x74>)
 80134c6:	4a07      	ldr	r2, [pc, #28]	@ (80134e4 <handle_firmware_deactivate+0x6c>)
 80134c8:	f240 1195 	movw	r1, #405	@ 0x195
 80134cc:	4628      	mov	r0, r5
 80134ce:	f012 f8e3 	bl	8025698 <mg_http_reply>
}
 80134d2:	e7ee      	b.n	80134b2 <handle_firmware_deactivate+0x3a>
 80134d4:	08038154 	.word	0x08038154
 80134d8:	200000a0 	.word	0x200000a0
 80134dc:	08037b28 	.word	0x08037b28
 80134e0:	0803815c 	.word	0x0803815c
 80134e4:	08038090 	.word	0x08038090
 80134e8:	08038198 	.word	0x08038198
 80134ec:	080381dc 	.word	0x080381dc

080134f0 <handle_web_files_remove>:
static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 80134f0:	b570      	push	{r4, r5, r6, lr}
 80134f2:	b084      	sub	sp, #16
 80134f4:	4605      	mov	r5, r0
 80134f6:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 80134f8:	ae02      	add	r6, sp, #8
 80134fa:	4912      	ldr	r1, [pc, #72]	@ (8013544 <handle_web_files_remove+0x54>)
 80134fc:	4630      	mov	r0, r6
 80134fe:	f012 fa55 	bl	80259ac <mg_str_s>
 8013502:	2300      	movs	r3, #0
 8013504:	9300      	str	r3, [sp, #0]
 8013506:	e896 000c 	ldmia.w	r6, {r2, r3}
 801350a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801350e:	f012 fc75 	bl	8025dfc <mg_match>
 8013512:	b178      	cbz	r0, 8013534 <handle_web_files_remove+0x44>
			mg_fs_lfs.rm("/web");
 8013514:	4e0c      	ldr	r6, [pc, #48]	@ (8013548 <handle_web_files_remove+0x58>)
 8013516:	6a33      	ldr	r3, [r6, #32]
 8013518:	4c0c      	ldr	r4, [pc, #48]	@ (801354c <handle_web_files_remove+0x5c>)
 801351a:	4620      	mov	r0, r4
 801351c:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 801351e:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8013520:	4620      	mov	r0, r4
 8013522:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 8013524:	4b0a      	ldr	r3, [pc, #40]	@ (8013550 <handle_web_files_remove+0x60>)
 8013526:	4a0b      	ldr	r2, [pc, #44]	@ (8013554 <handle_web_files_remove+0x64>)
 8013528:	21c8      	movs	r1, #200	@ 0xc8
 801352a:	4628      	mov	r0, r5
 801352c:	f012 f8b4 	bl	8025698 <mg_http_reply>
}
 8013530:	b004      	add	sp, #16
 8013532:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013534:	4b08      	ldr	r3, [pc, #32]	@ (8013558 <handle_web_files_remove+0x68>)
 8013536:	4a07      	ldr	r2, [pc, #28]	@ (8013554 <handle_web_files_remove+0x64>)
 8013538:	f240 1195 	movw	r1, #405	@ 0x195
 801353c:	4628      	mov	r0, r5
 801353e:	f012 f8ab 	bl	8025698 <mg_http_reply>
}
 8013542:	e7f5      	b.n	8013530 <handle_web_files_remove+0x40>
 8013544:	08038154 	.word	0x08038154
 8013548:	200000a0 	.word	0x200000a0
 801354c:	08037b14 	.word	0x08037b14
 8013550:	0803822c 	.word	0x0803822c
 8013554:	08038090 	.word	0x08038090
 8013558:	080381dc 	.word	0x080381dc

0801355c <handler_logout>:
static void handler_logout(struct mg_connection *c,struct mg_http_message *hm){
 801355c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801355e:	b0c3      	sub	sp, #268	@ 0x10c
 8013560:	4606      	mov	r6, r0
 8013562:	460d      	mov	r5, r1
	char username[128] = {0};
 8013564:	2480      	movs	r4, #128	@ 0x80
 8013566:	4622      	mov	r2, r4
 8013568:	2100      	movs	r1, #0
 801356a:	a822      	add	r0, sp, #136	@ 0x88
 801356c:	f019 f948 	bl	802c800 <memset>
	char pass[128] = {0};
 8013570:	4622      	mov	r2, r4
 8013572:	2100      	movs	r1, #0
 8013574:	a802      	add	r0, sp, #8
 8013576:	f019 f943 	bl	802c800 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 801357a:	9400      	str	r4, [sp, #0]
 801357c:	ab02      	add	r3, sp, #8
 801357e:	4622      	mov	r2, r4
 8013580:	a922      	add	r1, sp, #136	@ 0x88
 8013582:	4628      	mov	r0, r5
 8013584:	f013 f93a 	bl	80267fc <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 8013588:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 801358c:	b113      	cbz	r3, 8013594 <handler_logout+0x38>
 801358e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013592:	b962      	cbnz	r2, 80135ae <handler_logout+0x52>
	}else if (username[0] == '\0' && pass[0] != '\0') {
 8013594:	b913      	cbnz	r3, 801359c <handler_logout+0x40>
 8013596:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801359a:	bb4b      	cbnz	r3, 80135f0 <handler_logout+0x94>
        mg_http_reply(c, 404, headers, //TODO delete for release,
 801359c:	4b20      	ldr	r3, [pc, #128]	@ (8013620 <handler_logout+0xc4>)
 801359e:	4a21      	ldr	r2, [pc, #132]	@ (8013624 <handler_logout+0xc8>)
 80135a0:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80135a4:	4630      	mov	r0, r6
 80135a6:	f012 f877 	bl	8025698 <mg_http_reply>
}
 80135aa:	b043      	add	sp, #268	@ 0x10c
 80135ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mg_http_reply(c, 404, headers, //TODO delete for release,
 80135ae:	4b1e      	ldr	r3, [pc, #120]	@ (8013628 <handler_logout+0xcc>)
 80135b0:	4a1c      	ldr	r2, [pc, #112]	@ (8013624 <handler_logout+0xc8>)
 80135b2:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80135b6:	4630      	mov	r0, r6
 80135b8:	f012 f86e 	bl	8025698 <mg_http_reply>
        return;
 80135bc:	e7f5      	b.n	80135aa <handler_logout+0x4e>
				logging(L_INFO, "User: %s is logout", web_tokens[i].user);
 80135be:	23b8      	movs	r3, #184	@ 0xb8
 80135c0:	fb03 f404 	mul.w	r4, r3, r4
 80135c4:	4f19      	ldr	r7, [pc, #100]	@ (801362c <handler_logout+0xd0>)
 80135c6:	19e5      	adds	r5, r4, r7
 80135c8:	462a      	mov	r2, r5
 80135ca:	4919      	ldr	r1, [pc, #100]	@ (8013630 <handler_logout+0xd4>)
 80135cc:	2001      	movs	r0, #1
 80135ce:	f7fe ff3b 	bl	8012448 <logging>
				web_tokens[i].token[0] = '\0';
 80135d2:	2300      	movs	r3, #0
 80135d4:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
				web_tokens[i].expare = 0;
 80135d8:	2000      	movs	r0, #0
 80135da:	2100      	movs	r1, #0
 80135dc:	e9c5 012c 	strd	r0, r1, [r5, #176]	@ 0xb0
				web_tokens[i].user[0] = '\0';
 80135e0:	553b      	strb	r3, [r7, r4]
		        mg_http_reply(c, 200, headers, //TODO delete for release,
 80135e2:	4b14      	ldr	r3, [pc, #80]	@ (8013634 <handler_logout+0xd8>)
 80135e4:	4a0f      	ldr	r2, [pc, #60]	@ (8013624 <handler_logout+0xc8>)
 80135e6:	21c8      	movs	r1, #200	@ 0xc8
 80135e8:	4630      	mov	r0, r6
 80135ea:	f012 f855 	bl	8025698 <mg_http_reply>
		        return;
 80135ee:	e7dc      	b.n	80135aa <handler_logout+0x4e>
		for (i=0;i<user_list_size; i++){
 80135f0:	2400      	movs	r4, #0
 80135f2:	2c09      	cmp	r4, #9
 80135f4:	dc0c      	bgt.n	8013610 <handler_logout+0xb4>
			if((strcmp(web_tokens[i].token, pass) == 0)){
 80135f6:	23b8      	movs	r3, #184	@ 0xb8
 80135f8:	fb04 f303 	mul.w	r3, r4, r3
 80135fc:	3380      	adds	r3, #128	@ 0x80
 80135fe:	a902      	add	r1, sp, #8
 8013600:	480a      	ldr	r0, [pc, #40]	@ (801362c <handler_logout+0xd0>)
 8013602:	4418      	add	r0, r3
 8013604:	f7fc fdec 	bl	80101e0 <strcmp>
 8013608:	2800      	cmp	r0, #0
 801360a:	d0d8      	beq.n	80135be <handler_logout+0x62>
		for (i=0;i<user_list_size; i++){
 801360c:	3401      	adds	r4, #1
 801360e:	e7f0      	b.n	80135f2 <handler_logout+0x96>
        mg_http_reply(c, 404, headers,
 8013610:	4b09      	ldr	r3, [pc, #36]	@ (8013638 <handler_logout+0xdc>)
 8013612:	4a04      	ldr	r2, [pc, #16]	@ (8013624 <handler_logout+0xc8>)
 8013614:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8013618:	4630      	mov	r0, r6
 801361a:	f012 f83d 	bl	8025698 <mg_http_reply>
        return;
 801361e:	e7c4      	b.n	80135aa <handler_logout+0x4e>
 8013620:	08038378 	.word	0x08038378
 8013624:	08038090 	.word	0x08038090
 8013628:	08038274 	.word	0x08038274
 801362c:	20001c30 	.word	0x20001c30
 8013630:	080382f4 	.word	0x080382f4
 8013634:	08038308 	.word	0x08038308
 8013638:	08038344 	.word	0x08038344

0801363c <handle_login>:
static void handle_login(struct mg_connection *c, tokens_list_t *u) {
 801363c:	b530      	push	{r4, r5, lr}
 801363e:	b0c7      	sub	sp, #284	@ 0x11c
 8013640:	4605      	mov	r5, r0
 8013642:	460c      	mov	r4, r1
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 8013644:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8013648:	f013 0240 	ands.w	r2, r3, #64	@ 0x40
 801364c:	d024      	beq.n	8013698 <handle_login+0x5c>
 801364e:	4b14      	ldr	r3, [pc, #80]	@ (80136a0 <handle_login+0x64>)
              cookie_name, u->token,
 8013650:	f104 0180 	add.w	r1, r4, #128	@ 0x80
  mg_snprintf(cookie, sizeof(cookie),
 8013654:	b312      	cbz	r2, 801369c <handle_login+0x60>
 8013656:	4a13      	ldr	r2, [pc, #76]	@ (80136a4 <handle_login+0x68>)
 8013658:	4813      	ldr	r0, [pc, #76]	@ (80136a8 <handle_login+0x6c>)
 801365a:	9002      	str	r0, [sp, #8]
 801365c:	9201      	str	r2, [sp, #4]
 801365e:	9100      	str	r1, [sp, #0]
 8013660:	4a12      	ldr	r2, [pc, #72]	@ (80136ac <handle_login+0x70>)
 8013662:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013666:	a806      	add	r0, sp, #24
 8013668:	f011 fb02 	bl	8024c70 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m}", MG_ESC("user"), MG_ESC(u->user));
 801366c:	9405      	str	r4, [sp, #20]
 801366e:	2200      	movs	r2, #0
 8013670:	9204      	str	r2, [sp, #16]
 8013672:	4b0f      	ldr	r3, [pc, #60]	@ (80136b0 <handle_login+0x74>)
 8013674:	9303      	str	r3, [sp, #12]
 8013676:	490f      	ldr	r1, [pc, #60]	@ (80136b4 <handle_login+0x78>)
 8013678:	9102      	str	r1, [sp, #8]
 801367a:	9201      	str	r2, [sp, #4]
 801367c:	9300      	str	r3, [sp, #0]
 801367e:	4b0e      	ldr	r3, [pc, #56]	@ (80136b8 <handle_login+0x7c>)
 8013680:	aa06      	add	r2, sp, #24
 8013682:	21c8      	movs	r1, #200	@ 0xc8
 8013684:	4628      	mov	r0, r5
 8013686:	f012 f807 	bl	8025698 <mg_http_reply>
  logging(L_INFO, "Authenticated web user: %s ", u->user);
 801368a:	4622      	mov	r2, r4
 801368c:	490b      	ldr	r1, [pc, #44]	@ (80136bc <handle_login+0x80>)
 801368e:	2001      	movs	r0, #1
 8013690:	f7fe feda 	bl	8012448 <logging>
}
 8013694:	b047      	add	sp, #284	@ 0x11c
 8013696:	bd30      	pop	{r4, r5, pc}
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 8013698:	4b09      	ldr	r3, [pc, #36]	@ (80136c0 <handle_login+0x84>)
 801369a:	e7d9      	b.n	8013650 <handle_login+0x14>
  mg_snprintf(cookie, sizeof(cookie),
 801369c:	4a09      	ldr	r2, [pc, #36]	@ (80136c4 <handle_login+0x88>)
 801369e:	e7db      	b.n	8013658 <handle_login+0x1c>
 80136a0:	080383f0 	.word	0x080383f0
 80136a4:	08038414 	.word	0x08038414
 80136a8:	0002a300 	.word	0x0002a300
 80136ac:	08038420 	.word	0x08038420
 80136b0:	08023e25 	.word	0x08023e25
 80136b4:	0803955c 	.word	0x0803955c
 80136b8:	08038464 	.word	0x08038464
 80136bc:	0803846c 	.word	0x0803846c
 80136c0:	08038404 	.word	0x08038404
 80136c4:	08038678 	.word	0x08038678

080136c8 <auth>:
static bool auth(struct mg_connection *c, struct mg_http_message *hm, bool set_cookie){
 80136c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80136cc:	b0e5      	sub	sp, #404	@ 0x194
 80136ce:	4605      	mov	r5, r0
 80136d0:	460c      	mov	r4, r1
 80136d2:	4616      	mov	r6, r2
	char pass_digest[sha1_str_len] = {0};
 80136d4:	2229      	movs	r2, #41	@ 0x29
 80136d6:	2100      	movs	r1, #0
 80136d8:	a859      	add	r0, sp, #356	@ 0x164
 80136da:	f019 f891 	bl	802c800 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 80136de:	2280      	movs	r2, #128	@ 0x80
 80136e0:	9200      	str	r2, [sp, #0]
 80136e2:	ab02      	add	r3, sp, #8
 80136e4:	a922      	add	r1, sp, #136	@ 0x88
 80136e6:	4620      	mov	r0, r4
 80136e8:	f013 f888 	bl	80267fc <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 80136ec:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 80136f0:	b113      	cbz	r3, 80136f8 <auth+0x30>
 80136f2:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80136f6:	b94a      	cbnz	r2, 801370c <auth+0x44>
	} else if (username[0] == '\0' && pass[0] != '\0') {
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	f040 80bb 	bne.w	8013874 <auth+0x1ac>
 80136fe:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013702:	2b00      	cmp	r3, #0
 8013704:	f040 80b2 	bne.w	801386c <auth+0x1a4>
	return false;
 8013708:	2000      	movs	r0, #0
 801370a:	e0b4      	b.n	8013876 <auth+0x1ae>
		logging(L_INFO, "Try to authenticate user: %s", username);
 801370c:	aa22      	add	r2, sp, #136	@ 0x88
 801370e:	495b      	ldr	r1, [pc, #364]	@ (801387c <auth+0x1b4>)
 8013710:	2001      	movs	r0, #1
 8013712:	f7fe fe99 	bl	8012448 <logging>
		mg_sha1_init(&sha1_ctx);
 8013716:	a842      	add	r0, sp, #264	@ 0x108
 8013718:	f012 f896 	bl	8025848 <mg_sha1_init>
		mg_sha1_update(&sha1_ctx, (const unsigned char *)pass, strlen(pass) * sizeof(char));
 801371c:	a802      	add	r0, sp, #8
 801371e:	f7fc fdbf 	bl	80102a0 <strlen>
 8013722:	4602      	mov	r2, r0
 8013724:	a902      	add	r1, sp, #8
 8013726:	a842      	add	r0, sp, #264	@ 0x108
 8013728:	f012 f8a8 	bl	802587c <mg_sha1_update>
		mg_sha1_final((unsigned char *)&pass_digest, &sha1_ctx); // calculate sha1 pass
 801372c:	a942      	add	r1, sp, #264	@ 0x108
 801372e:	a859      	add	r0, sp, #356	@ 0x164
 8013730:	f012 f8de 	bl	80258f0 <mg_sha1_final>
		for (i=0; i< user_list_size; i++ ){
 8013734:	2400      	movs	r4, #0
 8013736:	e02a      	b.n	801378e <auth+0xc6>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 8013738:	4641      	mov	r1, r8
 801373a:	4628      	mov	r0, r5
 801373c:	f7ff ff7e 	bl	801363c <handle_login>
 8013740:	e066      	b.n	8013810 <auth+0x148>
					strncpy(web_tokens[1].user, username, sizeof(web_tokens[1].user));
 8013742:	4f4f      	ldr	r7, [pc, #316]	@ (8013880 <auth+0x1b8>)
 8013744:	2280      	movs	r2, #128	@ 0x80
 8013746:	a922      	add	r1, sp, #136	@ 0x88
 8013748:	4638      	mov	r0, r7
 801374a:	f019 f8a0 	bl	802c88e <strncpy>
					web_tokens[1].expare = mg_now() + token_life_time;
 801374e:	f017 fcfd 	bl	802b14c <mg_now>
 8013752:	4b4c      	ldr	r3, [pc, #304]	@ (8013884 <auth+0x1bc>)
 8013754:	18c3      	adds	r3, r0, r3
 8013756:	f141 0100 	adc.w	r1, r1, #0
 801375a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801375e:	f8c7 10b4 	str.w	r1, [r7, #180]	@ 0xb4
					mg_random_str(web_tokens[1].token, sha1_str_len -1);
 8013762:	2128      	movs	r1, #40	@ 0x28
 8013764:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8013768:	f013 fca4 	bl	80270b4 <mg_random_str>
					if (set_cookie)handle_login(c, &web_tokens[1]);
 801376c:	b94e      	cbnz	r6, 8013782 <auth+0xba>
					logging(L_INFO, "User: %s is authenticated", web_tokens[i].user);
 801376e:	22b8      	movs	r2, #184	@ 0xb8
 8013770:	4b45      	ldr	r3, [pc, #276]	@ (8013888 <auth+0x1c0>)
 8013772:	fb02 3204 	mla	r2, r2, r4, r3
 8013776:	4945      	ldr	r1, [pc, #276]	@ (801388c <auth+0x1c4>)
 8013778:	2001      	movs	r0, #1
 801377a:	f7fe fe65 	bl	8012448 <logging>
					return true;
 801377e:	2001      	movs	r0, #1
 8013780:	e079      	b.n	8013876 <auth+0x1ae>
					if (set_cookie)handle_login(c, &web_tokens[1]);
 8013782:	4639      	mov	r1, r7
 8013784:	4628      	mov	r0, r5
 8013786:	f7ff ff59 	bl	801363c <handle_login>
 801378a:	e7f0      	b.n	801376e <auth+0xa6>
		for (i=0; i< user_list_size; i++ ){
 801378c:	3401      	adds	r4, #1
 801378e:	2c09      	cmp	r4, #9
 8013790:	dc45      	bgt.n	801381e <auth+0x156>
			if((strcmp(web_users[i].user, username) == 0) && (strcmp(web_users[i].pass_digest, pass_digest) == 0)){
 8013792:	a922      	add	r1, sp, #136	@ 0x88
 8013794:	20a9      	movs	r0, #169	@ 0xa9
 8013796:	4b3e      	ldr	r3, [pc, #248]	@ (8013890 <auth+0x1c8>)
 8013798:	fb00 3004 	mla	r0, r0, r4, r3
 801379c:	f7fc fd20 	bl	80101e0 <strcmp>
 80137a0:	2800      	cmp	r0, #0
 80137a2:	d1f3      	bne.n	801378c <auth+0xc4>
 80137a4:	23a9      	movs	r3, #169	@ 0xa9
 80137a6:	fb04 f303 	mul.w	r3, r4, r3
 80137aa:	3380      	adds	r3, #128	@ 0x80
 80137ac:	a959      	add	r1, sp, #356	@ 0x164
 80137ae:	4838      	ldr	r0, [pc, #224]	@ (8013890 <auth+0x1c8>)
 80137b0:	4418      	add	r0, r3
 80137b2:	f7fc fd15 	bl	80101e0 <strcmp>
 80137b6:	2800      	cmp	r0, #0
 80137b8:	d1e8      	bne.n	801378c <auth+0xc4>
					if(web_tokens[i].expare < mg_now()){
 80137ba:	4b33      	ldr	r3, [pc, #204]	@ (8013888 <auth+0x1c0>)
 80137bc:	22b8      	movs	r2, #184	@ 0xb8
 80137be:	fb02 3304 	mla	r3, r2, r4, r3
 80137c2:	f8d3 80b0 	ldr.w	r8, [r3, #176]	@ 0xb0
 80137c6:	f8d3 70b4 	ldr.w	r7, [r3, #180]	@ 0xb4
 80137ca:	f017 fcbf 	bl	802b14c <mg_now>
 80137ce:	4580      	cmp	r8, r0
 80137d0:	418f      	sbcs	r7, r1
 80137d2:	d2b6      	bcs.n	8013742 <auth+0x7a>
						strncpy(web_tokens[i].user, username, sizeof(web_tokens[i].user));
 80137d4:	27b8      	movs	r7, #184	@ 0xb8
 80137d6:	fb04 f707 	mul.w	r7, r4, r7
 80137da:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8013888 <auth+0x1c0>
 80137de:	eb07 0809 	add.w	r8, r7, r9
 80137e2:	2280      	movs	r2, #128	@ 0x80
 80137e4:	a922      	add	r1, sp, #136	@ 0x88
 80137e6:	4640      	mov	r0, r8
 80137e8:	f019 f851 	bl	802c88e <strncpy>
						web_tokens[i].expare = mg_now() + token_life_time;
 80137ec:	f017 fcae 	bl	802b14c <mg_now>
 80137f0:	4b24      	ldr	r3, [pc, #144]	@ (8013884 <auth+0x1bc>)
 80137f2:	18c0      	adds	r0, r0, r3
 80137f4:	f141 0100 	adc.w	r1, r1, #0
 80137f8:	f8c8 00b0 	str.w	r0, [r8, #176]	@ 0xb0
 80137fc:	f8c8 10b4 	str.w	r1, [r8, #180]	@ 0xb4
						mg_random_str(web_tokens[i].token, sha1_str_len -1);
 8013800:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8013804:	2128      	movs	r1, #40	@ 0x28
 8013806:	4448      	add	r0, r9
 8013808:	f013 fc54 	bl	80270b4 <mg_random_str>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 801380c:	2e00      	cmp	r6, #0
 801380e:	d193      	bne.n	8013738 <auth+0x70>
						logging(L_INFO, "User: %s is authenticated", web_tokens[i].user);
 8013810:	4642      	mov	r2, r8
 8013812:	491e      	ldr	r1, [pc, #120]	@ (801388c <auth+0x1c4>)
 8013814:	2001      	movs	r0, #1
 8013816:	f7fe fe17 	bl	8012448 <logging>
						return true;
 801381a:	2001      	movs	r0, #1
 801381c:	e02b      	b.n	8013876 <auth+0x1ae>
	return false;
 801381e:	2000      	movs	r0, #0
 8013820:	e029      	b.n	8013876 <auth+0x1ae>
				        		"{\"status\":\"success\",\"message\":\"Token is valid\", \"user\": \"%s\"}\r\n", web_tokens[i].user);
 8013822:	22b8      	movs	r2, #184	@ 0xb8
 8013824:	4b18      	ldr	r3, [pc, #96]	@ (8013888 <auth+0x1c0>)
 8013826:	fb02 3304 	mla	r3, r2, r4, r3
				if (set_cookie) mg_http_reply(c, 200, headers,
 801382a:	9300      	str	r3, [sp, #0]
 801382c:	4b19      	ldr	r3, [pc, #100]	@ (8013894 <auth+0x1cc>)
 801382e:	4a1a      	ldr	r2, [pc, #104]	@ (8013898 <auth+0x1d0>)
 8013830:	21c8      	movs	r1, #200	@ 0xc8
 8013832:	4628      	mov	r0, r5
 8013834:	f011 ff30 	bl	8025698 <mg_http_reply>
 8013838:	e016      	b.n	8013868 <auth+0x1a0>
		for (i=0;i<user_list_size; i++){
 801383a:	3401      	adds	r4, #1
 801383c:	2c09      	cmp	r4, #9
 801383e:	dc17      	bgt.n	8013870 <auth+0x1a8>
			if((strcmp(web_tokens[i].token, pass) == 0 && web_tokens[i].user[0] != 0)){// && (web_tokens[i].expare > mg_now())
 8013840:	23b8      	movs	r3, #184	@ 0xb8
 8013842:	fb04 f303 	mul.w	r3, r4, r3
 8013846:	3380      	adds	r3, #128	@ 0x80
 8013848:	a902      	add	r1, sp, #8
 801384a:	480f      	ldr	r0, [pc, #60]	@ (8013888 <auth+0x1c0>)
 801384c:	4418      	add	r0, r3
 801384e:	f7fc fcc7 	bl	80101e0 <strcmp>
 8013852:	2800      	cmp	r0, #0
 8013854:	d1f1      	bne.n	801383a <auth+0x172>
 8013856:	23b8      	movs	r3, #184	@ 0xb8
 8013858:	fb04 f303 	mul.w	r3, r4, r3
 801385c:	4a0a      	ldr	r2, [pc, #40]	@ (8013888 <auth+0x1c0>)
 801385e:	5cd3      	ldrb	r3, [r2, r3]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d0ea      	beq.n	801383a <auth+0x172>
				if (set_cookie) mg_http_reply(c, 200, headers,
 8013864:	2e00      	cmp	r6, #0
 8013866:	d1dc      	bne.n	8013822 <auth+0x15a>
				return true;
 8013868:	2001      	movs	r0, #1
 801386a:	e004      	b.n	8013876 <auth+0x1ae>
		for (i=0;i<user_list_size; i++){
 801386c:	2400      	movs	r4, #0
 801386e:	e7e5      	b.n	801383c <auth+0x174>
	return false;
 8013870:	2000      	movs	r0, #0
 8013872:	e000      	b.n	8013876 <auth+0x1ae>
 8013874:	2000      	movs	r0, #0
}
 8013876:	b065      	add	sp, #404	@ 0x194
 8013878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801387c:	08038488 	.word	0x08038488
 8013880:	20001ce8 	.word	0x20001ce8
 8013884:	0a4cb800 	.word	0x0a4cb800
 8013888:	20001c30 	.word	0x20001c30
 801388c:	080384a8 	.word	0x080384a8
 8013890:	20002360 	.word	0x20002360
 8013894:	080384c4 	.word	0x080384c4
 8013898:	08038090 	.word	0x08038090

0801389c <handler_authanticate>:
static void handler_authanticate(struct mg_connection *c,struct mg_http_message *hm){
 801389c:	b510      	push	{r4, lr}
 801389e:	4604      	mov	r4, r0
	if ( auth(c, hm, 1) ){
 80138a0:	2201      	movs	r2, #1
 80138a2:	f7ff ff11 	bl	80136c8 <auth>
 80138a6:	b100      	cbz	r0, 80138aa <handler_authanticate+0xe>
}
 80138a8:	bd10      	pop	{r4, pc}
        mg_http_reply(c, 403, headers, //TODO delete for release,
 80138aa:	4b04      	ldr	r3, [pc, #16]	@ (80138bc <handler_authanticate+0x20>)
 80138ac:	4a04      	ldr	r2, [pc, #16]	@ (80138c0 <handler_authanticate+0x24>)
 80138ae:	f240 1193 	movw	r1, #403	@ 0x193
 80138b2:	4620      	mov	r0, r4
 80138b4:	f011 fef0 	bl	8025698 <mg_http_reply>
}
 80138b8:	e7f6      	b.n	80138a8 <handler_authanticate+0xc>
 80138ba:	bf00      	nop
 80138bc:	08038504 	.word	0x08038504
 80138c0:	08038090 	.word	0x08038090

080138c4 <handle_ram_status_get>:
static void handle_ram_status_get(struct mg_connection *c){
 80138c4:	b510      	push	{r4, lr}
 80138c6:	b090      	sub	sp, #64	@ 0x40
 80138c8:	4604      	mov	r4, r0
	vPortGetHeapStats(&heap_status);
 80138ca:	a809      	add	r0, sp, #36	@ 0x24
 80138cc:	f008 fc64 	bl	801c198 <vPortGetHeapStats>
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 80138d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80138d2:	9306      	str	r3, [sp, #24]
 80138d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138d6:	9305      	str	r3, [sp, #20]
 80138d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80138da:	9304      	str	r3, [sp, #16]
 80138dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80138de:	9303      	str	r3, [sp, #12]
 80138e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80138e2:	9302      	str	r3, [sp, #8]
 80138e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80138e6:	9301      	str	r3, [sp, #4]
 80138e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138ea:	9300      	str	r3, [sp, #0]
 80138ec:	4b03      	ldr	r3, [pc, #12]	@ (80138fc <handle_ram_status_get+0x38>)
 80138ee:	4a04      	ldr	r2, [pc, #16]	@ (8013900 <handle_ram_status_get+0x3c>)
 80138f0:	21c8      	movs	r1, #200	@ 0xc8
 80138f2:	4620      	mov	r0, r4
 80138f4:	f011 fed0 	bl	8025698 <mg_http_reply>
}
 80138f8:	b010      	add	sp, #64	@ 0x40
 80138fa:	bd10      	pop	{r4, pc}
 80138fc:	08038534 	.word	0x08038534
 8013900:	08038638 	.word	0x08038638

08013904 <handle_io_status_get>:
static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 8013904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013906:	b091      	sub	sp, #68	@ 0x44
 8013908:	4606      	mov	r6, r0
 801390a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 801390c:	ad0c      	add	r5, sp, #48	@ 0x30
 801390e:	494b      	ldr	r1, [pc, #300]	@ (8013a3c <handle_io_status_get+0x138>)
 8013910:	4628      	mov	r0, r5
 8013912:	f012 f84b 	bl	80259ac <mg_str_s>
 8013916:	2300      	movs	r3, #0
 8013918:	9300      	str	r3, [sp, #0]
 801391a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801391e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013922:	f012 fa6b 	bl	8025dfc <mg_match>
 8013926:	b328      	cbz	r0, 8013974 <handle_io_status_get+0x70>
		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 8013928:	4c45      	ldr	r4, [pc, #276]	@ (8013a40 <handle_io_status_get+0x13c>)
 801392a:	6823      	ldr	r3, [r4, #0]
 801392c:	2200      	movs	r2, #0
 801392e:	2101      	movs	r1, #1
 8013930:	a80a      	add	r0, sp, #40	@ 0x28
 8013932:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 8013934:	6823      	ldr	r3, [r4, #0]
 8013936:	2200      	movs	r2, #0
 8013938:	2102      	movs	r1, #2
 801393a:	f10d 002b 	add.w	r0, sp, #43	@ 0x2b
 801393e:	4798      	blx	r3
						status.inputs[0], status.inputs[1], status.inputs[2],
 8013940:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8013944:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8013948:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
						status.outputs[0], status.outputs[1], status.outputs[2]
 801394c:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 8013950:	f89d 402c 	ldrb.w	r4, [sp, #44]	@ 0x2c
 8013954:	f89d 502d 	ldrb.w	r5, [sp, #45]	@ 0x2d
		mg_http_reply(c, 200, headers, //TODO delete for release,
 8013958:	9505      	str	r5, [sp, #20]
 801395a:	9404      	str	r4, [sp, #16]
 801395c:	9003      	str	r0, [sp, #12]
 801395e:	9102      	str	r1, [sp, #8]
 8013960:	9201      	str	r2, [sp, #4]
 8013962:	9300      	str	r3, [sp, #0]
 8013964:	4b37      	ldr	r3, [pc, #220]	@ (8013a44 <handle_io_status_get+0x140>)
 8013966:	4a38      	ldr	r2, [pc, #224]	@ (8013a48 <handle_io_status_get+0x144>)
 8013968:	21c8      	movs	r1, #200	@ 0xc8
 801396a:	4630      	mov	r0, r6
 801396c:	f011 fe94 	bl	8025698 <mg_http_reply>
}
 8013970:	b011      	add	sp, #68	@ 0x44
 8013972:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8013974:	ad0e      	add	r5, sp, #56	@ 0x38
 8013976:	4935      	ldr	r1, [pc, #212]	@ (8013a4c <handle_io_status_get+0x148>)
 8013978:	4628      	mov	r0, r5
 801397a:	f012 f817 	bl	80259ac <mg_str_s>
 801397e:	2300      	movs	r3, #0
 8013980:	9300      	str	r3, [sp, #0]
 8013982:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013986:	e894 0003 	ldmia.w	r4, {r0, r1}
 801398a:	f012 fa37 	bl	8025dfc <mg_match>
 801398e:	2800      	cmp	r0, #0
 8013990:	d04b      	beq.n	8013a2a <handle_io_status_get+0x126>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8013992:	ab08      	add	r3, sp, #32
 8013994:	4a2e      	ldr	r2, [pc, #184]	@ (8013a50 <handle_io_status_get+0x14c>)
 8013996:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 801399a:	c903      	ldmia	r1, {r0, r1}
 801399c:	f010 ff22 	bl	80247e4 <mg_json_get_num>
 80139a0:	2800      	cmp	r0, #0
 80139a2:	d03a      	beq.n	8013a1a <handle_io_status_get+0x116>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 80139a4:	ab0a      	add	r3, sp, #40	@ 0x28
 80139a6:	4a2b      	ldr	r2, [pc, #172]	@ (8013a54 <handle_io_status_get+0x150>)
 80139a8:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 80139ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80139b0:	f010 ff18 	bl	80247e4 <mg_json_get_num>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 80139b4:	2800      	cmp	r0, #0
 80139b6:	d030      	beq.n	8013a1a <handle_io_status_get+0x116>
			relay_id = (uint8_t) tmp1;
 80139b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80139bc:	f7fd f90c 	bl	8010bd8 <__aeabi_d2uiz>
 80139c0:	b2c4      	uxtb	r4, r0
			state = (uint8_t) tmp2;
 80139c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80139c6:	f7fd f907 	bl	8010bd8 <__aeabi_d2uiz>
 80139ca:	b2c5      	uxtb	r5, r0
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 80139cc:	1e63      	subs	r3, r4, #1
 80139ce:	b2db      	uxtb	r3, r3
 80139d0:	2b02      	cmp	r3, #2
 80139d2:	d801      	bhi.n	80139d8 <handle_io_status_get+0xd4>
 80139d4:	2d01      	cmp	r5, #1
 80139d6:	d907      	bls.n	80139e8 <handle_io_status_get+0xe4>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 80139d8:	4b1f      	ldr	r3, [pc, #124]	@ (8013a58 <handle_io_status_get+0x154>)
 80139da:	4a1b      	ldr	r2, [pc, #108]	@ (8013a48 <handle_io_status_get+0x144>)
 80139dc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80139e0:	4630      	mov	r0, r6
 80139e2:	f011 fe59 	bl	8025698 <mg_http_reply>
 80139e6:	e7c3      	b.n	8013970 <handle_io_status_get+0x6c>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 80139e8:	4f15      	ldr	r7, [pc, #84]	@ (8013a40 <handle_io_status_get+0x13c>)
 80139ea:	683b      	ldr	r3, [r7, #0]
 80139ec:	2200      	movs	r2, #0
 80139ee:	2102      	movs	r1, #2
 80139f0:	a807      	add	r0, sp, #28
 80139f2:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 80139f4:	f104 033f 	add.w	r3, r4, #63	@ 0x3f
 80139f8:	446b      	add	r3, sp
 80139fa:	f803 5c24 	strb.w	r5, [r3, #-36]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 80139fe:	683b      	ldr	r3, [r7, #0]
 8013a00:	2201      	movs	r2, #1
 8013a02:	2102      	movs	r1, #2
 8013a04:	a807      	add	r0, sp, #28
 8013a06:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 8013a08:	9501      	str	r5, [sp, #4]
 8013a0a:	9400      	str	r4, [sp, #0]
 8013a0c:	4b13      	ldr	r3, [pc, #76]	@ (8013a5c <handle_io_status_get+0x158>)
 8013a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8013a48 <handle_io_status_get+0x144>)
 8013a10:	21c8      	movs	r1, #200	@ 0xc8
 8013a12:	4630      	mov	r0, r6
 8013a14:	f011 fe40 	bl	8025698 <mg_http_reply>
 8013a18:	e7aa      	b.n	8013970 <handle_io_status_get+0x6c>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 8013a1a:	4b11      	ldr	r3, [pc, #68]	@ (8013a60 <handle_io_status_get+0x15c>)
 8013a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8013a48 <handle_io_status_get+0x144>)
 8013a1e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013a22:	4630      	mov	r0, r6
 8013a24:	f011 fe38 	bl	8025698 <mg_http_reply>
 8013a28:	e7a2      	b.n	8013970 <handle_io_status_get+0x6c>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8013a64 <handle_io_status_get+0x160>)
 8013a2c:	4a06      	ldr	r2, [pc, #24]	@ (8013a48 <handle_io_status_get+0x144>)
 8013a2e:	f240 1195 	movw	r1, #405	@ 0x195
 8013a32:	4630      	mov	r0, r6
 8013a34:	f011 fe30 	bl	8025698 <mg_http_reply>
}
 8013a38:	e79a      	b.n	8013970 <handle_io_status_get+0x6c>
 8013a3a:	bf00      	nop
 8013a3c:	08038040 	.word	0x08038040
 8013a40:	200029fc 	.word	0x200029fc
 8013a44:	0803867c 	.word	0x0803867c
 8013a48:	08038090 	.word	0x08038090
 8013a4c:	08038154 	.word	0x08038154
 8013a50:	080386b0 	.word	0x080386b0
 8013a54:	080386bc 	.word	0x080386bc
 8013a58:	080386fc 	.word	0x080386fc
 8013a5c:	080386c4 	.word	0x080386c4
 8013a60:	08038738 	.word	0x08038738
 8013a64:	08038774 	.word	0x08038774

08013a68 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8013a68:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8013a6a:	fb01 f400 	mul.w	r4, r1, r0
 8013a6e:	4620      	mov	r0, r4
 8013a70:	f008 fad2 	bl	801c018 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8013a74:	4605      	mov	r5, r0
 8013a76:	b118      	cbz	r0, 8013a80 <mg_calloc+0x18>
 8013a78:	4622      	mov	r2, r4
 8013a7a:	2100      	movs	r1, #0
 8013a7c:	f018 fec0 	bl	802c800 <memset>
}
 8013a80:	4628      	mov	r0, r5
 8013a82:	bd38      	pop	{r3, r4, r5, pc}

08013a84 <handle_mqtt_conf>:
static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 8013a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a86:	b08b      	sub	sp, #44	@ 0x2c
 8013a88:	4606      	mov	r6, r0
 8013a8a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013a8c:	ad06      	add	r5, sp, #24
 8013a8e:	4984      	ldr	r1, [pc, #528]	@ (8013ca0 <handle_mqtt_conf+0x21c>)
 8013a90:	4628      	mov	r0, r5
 8013a92:	f011 ff8b 	bl	80259ac <mg_str_s>
 8013a96:	2300      	movs	r3, #0
 8013a98:	9300      	str	r3, [sp, #0]
 8013a9a:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013a9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013aa2:	f012 f9ab 	bl	8025dfc <mg_match>
 8013aa6:	2800      	cmp	r0, #0
 8013aa8:	d03b      	beq.n	8013b22 <handle_mqtt_conf+0x9e>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8013aaa:	21c6      	movs	r1, #198	@ 0xc6
 8013aac:	2001      	movs	r0, #1
 8013aae:	f7ff ffdb 	bl	8013a68 <mg_calloc>
		if (mqtt_config == NULL) {
 8013ab2:	4605      	mov	r5, r0
 8013ab4:	b340      	cbz	r0, 8013b08 <handle_mqtt_conf+0x84>
		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 8013ab6:	4b7b      	ldr	r3, [pc, #492]	@ (8013ca4 <handle_mqtt_conf+0x220>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	2200      	movs	r2, #0
 8013abc:	4611      	mov	r1, r2
 8013abe:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 8013ac0:	f105 07a5 	add.w	r7, r5, #165	@ 0xa5
 8013ac4:	4638      	mov	r0, r7
 8013ac6:	f7fc fbeb 	bl	80102a0 <strlen>
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 8013aca:	b2c4      	uxtb	r4, r0
 8013acc:	4622      	mov	r2, r4
 8013ace:	212a      	movs	r1, #42	@ 0x2a
 8013ad0:	4638      	mov	r0, r7
 8013ad2:	f018 fe95 	bl	802c800 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 8013ad6:	442c      	add	r4, r5
 8013ad8:	2300      	movs	r3, #0
 8013ada:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8013ade:	786b      	ldrb	r3, [r5, #1]
 8013ae0:	b1eb      	cbz	r3, 8013b1e <handle_mqtt_conf+0x9a>
 8013ae2:	4b71      	ldr	r3, [pc, #452]	@ (8013ca8 <handle_mqtt_conf+0x224>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 8013ae4:	1caa      	adds	r2, r5, #2
 8013ae6:	f105 0184 	add.w	r1, r5, #132	@ 0x84
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8013aea:	9703      	str	r7, [sp, #12]
 8013aec:	9102      	str	r1, [sp, #8]
 8013aee:	9201      	str	r2, [sp, #4]
 8013af0:	9300      	str	r3, [sp, #0]
 8013af2:	4b6e      	ldr	r3, [pc, #440]	@ (8013cac <handle_mqtt_conf+0x228>)
 8013af4:	4a6e      	ldr	r2, [pc, #440]	@ (8013cb0 <handle_mqtt_conf+0x22c>)
 8013af6:	21c8      	movs	r1, #200	@ 0xc8
 8013af8:	4630      	mov	r0, r6
 8013afa:	f011 fdcd 	bl	8025698 <mg_http_reply>
		free(mqtt_config);
 8013afe:	4628      	mov	r0, r5
 8013b00:	f008 fb0c 	bl	801c11c <vPortFree>
}
 8013b04:	b00b      	add	sp, #44	@ 0x2c
 8013b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8013b08:	4b6a      	ldr	r3, [pc, #424]	@ (8013cb4 <handle_mqtt_conf+0x230>)
 8013b0a:	4a69      	ldr	r2, [pc, #420]	@ (8013cb0 <handle_mqtt_conf+0x22c>)
 8013b0c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013b10:	4630      	mov	r0, r6
 8013b12:	f011 fdc1 	bl	8025698 <mg_http_reply>
			free(mqtt_config);
 8013b16:	4628      	mov	r0, r5
 8013b18:	f008 fb00 	bl	801c11c <vPortFree>
			return;
 8013b1c:	e7f2      	b.n	8013b04 <handle_mqtt_conf+0x80>
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8013b1e:	4b66      	ldr	r3, [pc, #408]	@ (8013cb8 <handle_mqtt_conf+0x234>)
 8013b20:	e7e0      	b.n	8013ae4 <handle_mqtt_conf+0x60>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8013b22:	ad08      	add	r5, sp, #32
 8013b24:	4965      	ldr	r1, [pc, #404]	@ (8013cbc <handle_mqtt_conf+0x238>)
 8013b26:	4628      	mov	r0, r5
 8013b28:	f011 ff40 	bl	80259ac <mg_str_s>
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	9300      	str	r3, [sp, #0]
 8013b30:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013b34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013b38:	f012 f960 	bl	8025dfc <mg_match>
 8013b3c:	2800      	cmp	r0, #0
 8013b3e:	f000 80a7 	beq.w	8013c90 <handle_mqtt_conf+0x20c>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8013b42:	21c6      	movs	r1, #198	@ 0xc6
 8013b44:	2001      	movs	r0, #1
 8013b46:	f7ff ff8f 	bl	8013a68 <mg_calloc>
		if (mqtt_config == NULL) {
 8013b4a:	4605      	mov	r5, r0
 8013b4c:	b310      	cbz	r0, 8013b94 <handle_mqtt_conf+0x110>
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 8013b4e:	ab05      	add	r3, sp, #20
 8013b50:	4a5b      	ldr	r2, [pc, #364]	@ (8013cc0 <handle_mqtt_conf+0x23c>)
 8013b52:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013b56:	c903      	ldmia	r1, {r0, r1}
 8013b58:	f010 fbe0 	bl	802431c <mg_json_get>
 8013b5c:	2800      	cmp	r0, #0
 8013b5e:	db24      	blt.n	8013baa <handle_mqtt_conf+0x126>
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 8013b60:	1c6b      	adds	r3, r5, #1
 8013b62:	4a58      	ldr	r2, [pc, #352]	@ (8013cc4 <handle_mqtt_conf+0x240>)
 8013b64:	f504 7700 	add.w	r7, r4, #512	@ 0x200
 8013b68:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013b6c:	f010 fe60 	bl	8024830 <mg_json_get_bool>
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 8013b70:	4a55      	ldr	r2, [pc, #340]	@ (8013cc8 <handle_mqtt_conf+0x244>)
 8013b72:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013b76:	f013 f809 	bl	8026b8c <mg_json_get_str>
 8013b7a:	4607      	mov	r7, r0
 8013b7c:	b328      	cbz	r0, 8013bca <handle_mqtt_conf+0x146>
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 8013b7e:	f017 fd03 	bl	802b588 <is_valid_mqtt_url>
 8013b82:	4603      	mov	r3, r0
 8013b84:	b1e0      	cbz	r0, 8013bc0 <handle_mqtt_conf+0x13c>
					switch (err) {
 8013b86:	3304      	adds	r3, #4
 8013b88:	2b03      	cmp	r3, #3
 8013b8a:	d879      	bhi.n	8013c80 <handle_mqtt_conf+0x1fc>
 8013b8c:	e8df f003 	tbb	[pc, r3]
 8013b90:	52606870 	.word	0x52606870
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8013b94:	4b47      	ldr	r3, [pc, #284]	@ (8013cb4 <handle_mqtt_conf+0x230>)
 8013b96:	4a46      	ldr	r2, [pc, #280]	@ (8013cb0 <handle_mqtt_conf+0x22c>)
 8013b98:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013b9c:	4630      	mov	r0, r6
 8013b9e:	f011 fd7b 	bl	8025698 <mg_http_reply>
			free(mqtt_config);
 8013ba2:	4628      	mov	r0, r5
 8013ba4:	f008 faba 	bl	801c11c <vPortFree>
			return;
 8013ba8:	e7ac      	b.n	8013b04 <handle_mqtt_conf+0x80>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8013baa:	4b48      	ldr	r3, [pc, #288]	@ (8013ccc <handle_mqtt_conf+0x248>)
 8013bac:	4a40      	ldr	r2, [pc, #256]	@ (8013cb0 <handle_mqtt_conf+0x22c>)
 8013bae:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013bb2:	4630      	mov	r0, r6
 8013bb4:	f011 fd70 	bl	8025698 <mg_http_reply>
		free(mqtt_config);
 8013bb8:	4628      	mov	r0, r5
 8013bba:	f008 faaf 	bl	801c11c <vPortFree>
 8013bbe:	e7a1      	b.n	8013b04 <handle_mqtt_conf+0x80>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 8013bc0:	227f      	movs	r2, #127	@ 0x7f
 8013bc2:	4639      	mov	r1, r7
 8013bc4:	1ca8      	adds	r0, r5, #2
 8013bc6:	f018 fe62 	bl	802c88e <strncpy>
			free(broker);
 8013bca:	4638      	mov	r0, r7
 8013bcc:	f008 faa6 	bl	801c11c <vPortFree>
			if((username = mg_json_get_str(hm->body, "$.username"))){
 8013bd0:	4a3f      	ldr	r2, [pc, #252]	@ (8013cd0 <handle_mqtt_conf+0x24c>)
 8013bd2:	f504 7300 	add.w	r3, r4, #512	@ 0x200
 8013bd6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013bda:	f012 ffd7 	bl	8026b8c <mg_json_get_str>
 8013bde:	4607      	mov	r7, r0
 8013be0:	b128      	cbz	r0, 8013bee <handle_mqtt_conf+0x16a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 8013be2:	2220      	movs	r2, #32
 8013be4:	4601      	mov	r1, r0
 8013be6:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 8013bea:	f018 fe50 	bl	802c88e <strncpy>
			free(username);
 8013bee:	4638      	mov	r0, r7
 8013bf0:	f008 fa94 	bl	801c11c <vPortFree>
			if((password = mg_json_get_str(hm->body, "$.password"))){
 8013bf4:	4a37      	ldr	r2, [pc, #220]	@ (8013cd4 <handle_mqtt_conf+0x250>)
 8013bf6:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013bfa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013bfe:	f012 ffc5 	bl	8026b8c <mg_json_get_str>
 8013c02:	4604      	mov	r4, r0
 8013c04:	b128      	cbz	r0, 8013c12 <handle_mqtt_conf+0x18e>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 8013c06:	2220      	movs	r2, #32
 8013c08:	4601      	mov	r1, r0
 8013c0a:	f105 00a5 	add.w	r0, r5, #165	@ 0xa5
 8013c0e:	f018 fe3e 	bl	802c88e <strncpy>
			free(password);
 8013c12:	4620      	mov	r0, r4
 8013c14:	f008 fa82 	bl	801c11c <vPortFree>
			mqtt_config->save = 1;
 8013c18:	2201      	movs	r2, #1
 8013c1a:	702a      	strb	r2, [r5, #0]
			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 8013c1c:	4b21      	ldr	r3, [pc, #132]	@ (8013ca4 <handle_mqtt_conf+0x220>)
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	2100      	movs	r1, #0
 8013c22:	4628      	mov	r0, r5
 8013c24:	4798      	blx	r3
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8013c26:	4b2c      	ldr	r3, [pc, #176]	@ (8013cd8 <handle_mqtt_conf+0x254>)
 8013c28:	4a21      	ldr	r2, [pc, #132]	@ (8013cb0 <handle_mqtt_conf+0x22c>)
 8013c2a:	21c8      	movs	r1, #200	@ 0xc8
 8013c2c:	4630      	mov	r0, r6
 8013c2e:	f011 fd33 	bl	8025698 <mg_http_reply>
 8013c32:	e7c1      	b.n	8013bb8 <handle_mqtt_conf+0x134>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013c34:	4b29      	ldr	r3, [pc, #164]	@ (8013cdc <handle_mqtt_conf+0x258>)
 8013c36:	4a1e      	ldr	r2, [pc, #120]	@ (8013cb0 <handle_mqtt_conf+0x22c>)
 8013c38:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013c3c:	4630      	mov	r0, r6
 8013c3e:	f011 fd2b 	bl	8025698 <mg_http_reply>
					free(broker);
 8013c42:	4638      	mov	r0, r7
 8013c44:	f008 fa6a 	bl	801c11c <vPortFree>
					free(mqtt_config);
 8013c48:	4628      	mov	r0, r5
 8013c4a:	f008 fa67 	bl	801c11c <vPortFree>
					return;
 8013c4e:	e759      	b.n	8013b04 <handle_mqtt_conf+0x80>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013c50:	4b23      	ldr	r3, [pc, #140]	@ (8013ce0 <handle_mqtt_conf+0x25c>)
 8013c52:	4a17      	ldr	r2, [pc, #92]	@ (8013cb0 <handle_mqtt_conf+0x22c>)
 8013c54:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013c58:	4630      	mov	r0, r6
 8013c5a:	f011 fd1d 	bl	8025698 <mg_http_reply>
							break;
 8013c5e:	e7f0      	b.n	8013c42 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013c60:	4b20      	ldr	r3, [pc, #128]	@ (8013ce4 <handle_mqtt_conf+0x260>)
 8013c62:	4a13      	ldr	r2, [pc, #76]	@ (8013cb0 <handle_mqtt_conf+0x22c>)
 8013c64:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013c68:	4630      	mov	r0, r6
 8013c6a:	f011 fd15 	bl	8025698 <mg_http_reply>
							break;
 8013c6e:	e7e8      	b.n	8013c42 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013c70:	4b1d      	ldr	r3, [pc, #116]	@ (8013ce8 <handle_mqtt_conf+0x264>)
 8013c72:	4a0f      	ldr	r2, [pc, #60]	@ (8013cb0 <handle_mqtt_conf+0x22c>)
 8013c74:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013c78:	4630      	mov	r0, r6
 8013c7a:	f011 fd0d 	bl	8025698 <mg_http_reply>
							break;
 8013c7e:	e7e0      	b.n	8013c42 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013c80:	4b1a      	ldr	r3, [pc, #104]	@ (8013cec <handle_mqtt_conf+0x268>)
 8013c82:	4a0b      	ldr	r2, [pc, #44]	@ (8013cb0 <handle_mqtt_conf+0x22c>)
 8013c84:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013c88:	4630      	mov	r0, r6
 8013c8a:	f011 fd05 	bl	8025698 <mg_http_reply>
							break;
 8013c8e:	e7d8      	b.n	8013c42 <handle_mqtt_conf+0x1be>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013c90:	4b17      	ldr	r3, [pc, #92]	@ (8013cf0 <handle_mqtt_conf+0x26c>)
 8013c92:	4a07      	ldr	r2, [pc, #28]	@ (8013cb0 <handle_mqtt_conf+0x22c>)
 8013c94:	f240 1195 	movw	r1, #405	@ 0x195
 8013c98:	4630      	mov	r0, r6
 8013c9a:	f011 fcfd 	bl	8025698 <mg_http_reply>
 8013c9e:	e731      	b.n	8013b04 <handle_mqtt_conf+0x80>
 8013ca0:	08038040 	.word	0x08038040
 8013ca4:	200029fc 	.word	0x200029fc
 8013ca8:	080387c8 	.word	0x080387c8
 8013cac:	08038814 	.word	0x08038814
 8013cb0:	08038090 	.word	0x08038090
 8013cb4:	080387d8 	.word	0x080387d8
 8013cb8:	080387d0 	.word	0x080387d0
 8013cbc:	08038154 	.word	0x08038154
 8013cc0:	0803885c 	.word	0x0803885c
 8013cc4:	08038890 	.word	0x08038890
 8013cc8:	0803889c 	.word	0x0803889c
 8013ccc:	08038860 	.word	0x08038860
 8013cd0:	080389e4 	.word	0x080389e4
 8013cd4:	080389f0 	.word	0x080389f0
 8013cd8:	080389fc 	.word	0x080389fc
 8013cdc:	080388a8 	.word	0x080388a8
 8013ce0:	080388ec 	.word	0x080388ec
 8013ce4:	08038938 	.word	0x08038938
 8013ce8:	08038978 	.word	0x08038978
 8013cec:	080389b0 	.word	0x080389b0
 8013cf0:	08038774 	.word	0x08038774

08013cf4 <handle_mb_tcp_access_list>:
static void handle_mb_tcp_access_list(struct mg_connection *c, struct mg_http_message *hm){
 8013cf4:	b570      	push	{r4, r5, r6, lr}
 8013cf6:	b08a      	sub	sp, #40	@ 0x28
 8013cf8:	4606      	mov	r6, r0
 8013cfa:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013cfc:	ad04      	add	r5, sp, #16
 8013cfe:	495e      	ldr	r1, [pc, #376]	@ (8013e78 <handle_mb_tcp_access_list+0x184>)
 8013d00:	4628      	mov	r0, r5
 8013d02:	f011 fe53 	bl	80259ac <mg_str_s>
 8013d06:	2300      	movs	r3, #0
 8013d08:	9300      	str	r3, [sp, #0]
 8013d0a:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013d0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013d12:	f012 f873 	bl	8025dfc <mg_match>
 8013d16:	2800      	cmp	r0, #0
 8013d18:	d03d      	beq.n	8013d96 <handle_mb_tcp_access_list+0xa2>
		size_t acl_size = 0;
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	9203      	str	r2, [sp, #12]
		mg_fs_lfs_status(ACL_FILE, &acl_size, NULL);
 8013d1e:	a903      	add	r1, sp, #12
 8013d20:	4856      	ldr	r0, [pc, #344]	@ (8013e7c <handle_mb_tcp_access_list+0x188>)
 8013d22:	f008 fae1 	bl	801c2e8 <mg_fs_lfs_status>
		if (acl_size && (acl_size < ACL_FILE_MAX_SIZE)){
 8013d26:	9803      	ldr	r0, [sp, #12]
 8013d28:	1e42      	subs	r2, r0, #1
 8013d2a:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8013d2e:	429a      	cmp	r2, r3
 8013d30:	d829      	bhi.n	8013d86 <handle_mb_tcp_access_list+0x92>
			acl = calloc(acl_size + 1, sizeof(char));
 8013d32:	2101      	movs	r1, #1
 8013d34:	4408      	add	r0, r1
 8013d36:	f7ff fe97 	bl	8013a68 <mg_calloc>
			if (acl == NULL){
 8013d3a:	4604      	mov	r4, r0
 8013d3c:	b1b8      	cbz	r0, 8013d6e <handle_mb_tcp_access_list+0x7a>
			void *fd = mg_fs_lfs_open(ACL_FILE, MG_FS_READ);
 8013d3e:	2101      	movs	r1, #1
 8013d40:	484e      	ldr	r0, [pc, #312]	@ (8013e7c <handle_mb_tcp_access_list+0x188>)
 8013d42:	f008 fb0f 	bl	801c364 <mg_fs_lfs_open>
 8013d46:	4605      	mov	r5, r0
			mg_fs_lfs_read(fd, acl, acl_size);
 8013d48:	9a03      	ldr	r2, [sp, #12]
 8013d4a:	4621      	mov	r1, r4
 8013d4c:	f008 fb3a 	bl	801c3c4 <mg_fs_lfs_read>
			mg_fs_lfs_close(fd);
 8013d50:	4628      	mov	r0, r5
 8013d52:	f008 fb2b 	bl	801c3ac <mg_fs_lfs_close>
	        mg_http_reply(c, 200, headers,
 8013d56:	9400      	str	r4, [sp, #0]
 8013d58:	4b49      	ldr	r3, [pc, #292]	@ (8013e80 <handle_mb_tcp_access_list+0x18c>)
 8013d5a:	4a4a      	ldr	r2, [pc, #296]	@ (8013e84 <handle_mb_tcp_access_list+0x190>)
 8013d5c:	21c8      	movs	r1, #200	@ 0xc8
 8013d5e:	4630      	mov	r0, r6
 8013d60:	f011 fc9a 	bl	8025698 <mg_http_reply>
	        free(acl);
 8013d64:	4620      	mov	r0, r4
 8013d66:	f008 f9d9 	bl	801c11c <vPortFree>
}
 8013d6a:	b00a      	add	sp, #40	@ 0x28
 8013d6c:	bd70      	pop	{r4, r5, r6, pc}
		    	logging(L_ERR, "Memory allocation failed in handle_manage_user GET");
 8013d6e:	4946      	ldr	r1, [pc, #280]	@ (8013e88 <handle_mb_tcp_access_list+0x194>)
 8013d70:	2003      	movs	r0, #3
 8013d72:	f7fe fb69 	bl	8012448 <logging>
		        mg_http_reply(c, 500, headers, "{\"error\": \"Memory allocation failed\"}");
 8013d76:	4b45      	ldr	r3, [pc, #276]	@ (8013e8c <handle_mb_tcp_access_list+0x198>)
 8013d78:	4a42      	ldr	r2, [pc, #264]	@ (8013e84 <handle_mb_tcp_access_list+0x190>)
 8013d7a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013d7e:	4630      	mov	r0, r6
 8013d80:	f011 fc8a 	bl	8025698 <mg_http_reply>
		        return;
 8013d84:	e7f1      	b.n	8013d6a <handle_mb_tcp_access_list+0x76>
	        mg_http_reply(c, 500, headers,
 8013d86:	4b42      	ldr	r3, [pc, #264]	@ (8013e90 <handle_mb_tcp_access_list+0x19c>)
 8013d88:	4a3e      	ldr	r2, [pc, #248]	@ (8013e84 <handle_mb_tcp_access_list+0x190>)
 8013d8a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013d8e:	4630      	mov	r0, r6
 8013d90:	f011 fc82 	bl	8025698 <mg_http_reply>
	        return;
 8013d94:	e7e9      	b.n	8013d6a <handle_mb_tcp_access_list+0x76>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013d96:	ad06      	add	r5, sp, #24
 8013d98:	493e      	ldr	r1, [pc, #248]	@ (8013e94 <handle_mb_tcp_access_list+0x1a0>)
 8013d9a:	4628      	mov	r0, r5
 8013d9c:	f011 fe06 	bl	80259ac <mg_str_s>
 8013da0:	2300      	movs	r3, #0
 8013da2:	9300      	str	r3, [sp, #0]
 8013da4:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013da8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013dac:	f012 f826 	bl	8025dfc <mg_match>
 8013db0:	2800      	cmp	r0, #0
 8013db2:	d058      	beq.n	8013e66 <handle_mb_tcp_access_list+0x172>
		if (mg_json_get(hm->body, "$", &length) < 0) {
 8013db4:	ab03      	add	r3, sp, #12
 8013db6:	4a38      	ldr	r2, [pc, #224]	@ (8013e98 <handle_mb_tcp_access_list+0x1a4>)
 8013db8:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013dbc:	c903      	ldmia	r1, {r0, r1}
 8013dbe:	f010 faad 	bl	802431c <mg_json_get>
 8013dc2:	2800      	cmp	r0, #0
 8013dc4:	db34      	blt.n	8013e30 <handle_mb_tcp_access_list+0x13c>
		acl = mg_json_get_str(hm->body, "$.access_list");
 8013dc6:	4a35      	ldr	r2, [pc, #212]	@ (8013e9c <handle_mb_tcp_access_list+0x1a8>)
 8013dc8:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013dcc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013dd0:	f012 fedc 	bl	8026b8c <mg_json_get_str>
		if (acl){
 8013dd4:	4604      	mov	r4, r0
 8013dd6:	2800      	cmp	r0, #0
 8013dd8:	d03d      	beq.n	8013e56 <handle_mb_tcp_access_list+0x162>
			if(mg_check_ip_acl(mg_str(acl),  &c->rem) < 0){
 8013dda:	ad08      	add	r5, sp, #32
 8013ddc:	4601      	mov	r1, r0
 8013dde:	4628      	mov	r0, r5
 8013de0:	f011 fde4 	bl	80259ac <mg_str_s>
 8013de4:	f106 021c 	add.w	r2, r6, #28
 8013de8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013dec:	f013 fd02 	bl	80277f4 <mg_check_ip_acl>
 8013df0:	2800      	cmp	r0, #0
 8013df2:	db25      	blt.n	8013e40 <handle_mb_tcp_access_list+0x14c>
				mg_fs_lfs_remove(ACL_FILE);
 8013df4:	4d21      	ldr	r5, [pc, #132]	@ (8013e7c <handle_mb_tcp_access_list+0x188>)
 8013df6:	4628      	mov	r0, r5
 8013df8:	f008 fb22 	bl	801c440 <mg_fs_lfs_remove>
				void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
 8013dfc:	2102      	movs	r1, #2
 8013dfe:	4628      	mov	r0, r5
 8013e00:	f008 fab0 	bl	801c364 <mg_fs_lfs_open>
 8013e04:	4605      	mov	r5, r0
				mg_fs_lfs_write(fd1, acl, (strlen(acl) * sizeof(char)) + 1);
 8013e06:	4620      	mov	r0, r4
 8013e08:	f7fc fa4a 	bl	80102a0 <strlen>
 8013e0c:	1c42      	adds	r2, r0, #1
 8013e0e:	4621      	mov	r1, r4
 8013e10:	4628      	mov	r0, r5
 8013e12:	f008 fae3 	bl	801c3dc <mg_fs_lfs_write>
				mg_fs_lfs_close(fd1);
 8013e16:	4628      	mov	r0, r5
 8013e18:	f008 fac8 	bl	801c3ac <mg_fs_lfs_close>
				mg_http_reply(c, 200, headers,
 8013e1c:	4b20      	ldr	r3, [pc, #128]	@ (8013ea0 <handle_mb_tcp_access_list+0x1ac>)
 8013e1e:	4a19      	ldr	r2, [pc, #100]	@ (8013e84 <handle_mb_tcp_access_list+0x190>)
 8013e20:	21c8      	movs	r1, #200	@ 0xc8
 8013e22:	4630      	mov	r0, r6
 8013e24:	f011 fc38 	bl	8025698 <mg_http_reply>
				free(acl);
 8013e28:	4620      	mov	r0, r4
 8013e2a:	f008 f977 	bl	801c11c <vPortFree>
				return;
 8013e2e:	e79c      	b.n	8013d6a <handle_mb_tcp_access_list+0x76>
			mg_http_reply(c, 400, headers,
 8013e30:	4b1c      	ldr	r3, [pc, #112]	@ (8013ea4 <handle_mb_tcp_access_list+0x1b0>)
 8013e32:	4a14      	ldr	r2, [pc, #80]	@ (8013e84 <handle_mb_tcp_access_list+0x190>)
 8013e34:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013e38:	4630      	mov	r0, r6
 8013e3a:	f011 fc2d 	bl	8025698 <mg_http_reply>
			return;
 8013e3e:	e794      	b.n	8013d6a <handle_mb_tcp_access_list+0x76>
				mg_http_reply(c, 400, headers,
 8013e40:	4b19      	ldr	r3, [pc, #100]	@ (8013ea8 <handle_mb_tcp_access_list+0x1b4>)
 8013e42:	4a10      	ldr	r2, [pc, #64]	@ (8013e84 <handle_mb_tcp_access_list+0x190>)
 8013e44:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013e48:	4630      	mov	r0, r6
 8013e4a:	f011 fc25 	bl	8025698 <mg_http_reply>
				free(acl);
 8013e4e:	4620      	mov	r0, r4
 8013e50:	f008 f964 	bl	801c11c <vPortFree>
				return;
 8013e54:	e789      	b.n	8013d6a <handle_mb_tcp_access_list+0x76>
			mg_http_reply(c, 400, headers,
 8013e56:	4b15      	ldr	r3, [pc, #84]	@ (8013eac <handle_mb_tcp_access_list+0x1b8>)
 8013e58:	4a0a      	ldr	r2, [pc, #40]	@ (8013e84 <handle_mb_tcp_access_list+0x190>)
 8013e5a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013e5e:	4630      	mov	r0, r6
 8013e60:	f011 fc1a 	bl	8025698 <mg_http_reply>
			return;
 8013e64:	e781      	b.n	8013d6a <handle_mb_tcp_access_list+0x76>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013e66:	4b12      	ldr	r3, [pc, #72]	@ (8013eb0 <handle_mb_tcp_access_list+0x1bc>)
 8013e68:	4a06      	ldr	r2, [pc, #24]	@ (8013e84 <handle_mb_tcp_access_list+0x190>)
 8013e6a:	f240 1195 	movw	r1, #405	@ 0x195
 8013e6e:	4630      	mov	r0, r6
 8013e70:	f011 fc12 	bl	8025698 <mg_http_reply>
		return;
 8013e74:	e779      	b.n	8013d6a <handle_mb_tcp_access_list+0x76>
 8013e76:	bf00      	nop
 8013e78:	08038040 	.word	0x08038040
 8013e7c:	08037f80 	.word	0x08037f80
 8013e80:	08038a94 	.word	0x08038a94
 8013e84:	08038090 	.word	0x08038090
 8013e88:	08038a38 	.word	0x08038a38
 8013e8c:	08038a6c 	.word	0x08038a6c
 8013e90:	08038ac0 	.word	0x08038ac0
 8013e94:	08038154 	.word	0x08038154
 8013e98:	0803885c 	.word	0x0803885c
 8013e9c:	08038af4 	.word	0x08038af4
 8013ea0:	08038b3c 	.word	0x08038b3c
 8013ea4:	08038860 	.word	0x08038860
 8013ea8:	08038b04 	.word	0x08038b04
 8013eac:	08038b90 	.word	0x08038b90
 8013eb0:	08038bd8 	.word	0x08038bd8

08013eb4 <handle_dev_status>:
static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 8013eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013eb8:	b0c7      	sub	sp, #284	@ 0x11c
 8013eba:	4681      	mov	r9, r0
 8013ebc:	468a      	mov	sl, r1
	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 8013ebe:	2272      	movs	r2, #114	@ 0x72
 8013ec0:	498e      	ldr	r1, [pc, #568]	@ (80140fc <handle_dev_status+0x248>)
 8013ec2:	a827      	add	r0, sp, #156	@ 0x9c
 8013ec4:	f01a fa18 	bl	802e2f8 <memcpy>
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 8013ec8:	2101      	movs	r1, #1
 8013eca:	201e      	movs	r0, #30
 8013ecc:	f7ff fdcc 	bl	8013a68 <mg_calloc>
 8013ed0:	4606      	mov	r6, r0
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8013ed2:	2101      	movs	r1, #1
 8013ed4:	202e      	movs	r0, #46	@ 0x2e
 8013ed6:	f7ff fdc7 	bl	8013a68 <mg_calloc>
 8013eda:	4607      	mov	r7, r0
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8013edc:	2101      	movs	r1, #1
 8013ede:	202e      	movs	r0, #46	@ 0x2e
 8013ee0:	f7ff fdc2 	bl	8013a68 <mg_calloc>
 8013ee4:	4680      	mov	r8, r0
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8013ee6:	2101      	movs	r1, #1
 8013ee8:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8013eec:	f7ff fdbc 	bl	8013a68 <mg_calloc>
 8013ef0:	4604      	mov	r4, r0
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8013ef2:	2101      	movs	r1, #1
 8013ef4:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8013ef8:	f7ff fdb6 	bl	8013a68 <mg_calloc>
 8013efc:	4605      	mov	r5, r0
	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 8013efe:	2e00      	cmp	r6, #0
 8013f00:	f000 80e3 	beq.w	80140ca <handle_dev_status+0x216>
 8013f04:	2f00      	cmp	r7, #0
 8013f06:	f000 80e0 	beq.w	80140ca <handle_dev_status+0x216>
 8013f0a:	f1b8 0f00 	cmp.w	r8, #0
 8013f0e:	f000 80dc 	beq.w	80140ca <handle_dev_status+0x216>
 8013f12:	2c00      	cmp	r4, #0
 8013f14:	f000 80d9 	beq.w	80140ca <handle_dev_status+0x216>
 8013f18:	2800      	cmp	r0, #0
 8013f1a:	f000 80d6 	beq.w	80140ca <handle_dev_status+0x216>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013f1e:	f50d 7b88 	add.w	fp, sp, #272	@ 0x110
 8013f22:	4977      	ldr	r1, [pc, #476]	@ (8014100 <handle_dev_status+0x24c>)
 8013f24:	4658      	mov	r0, fp
 8013f26:	f011 fd41 	bl	80259ac <mg_str_s>
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	9300      	str	r3, [sp, #0]
 8013f2e:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8013f32:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8013f36:	f011 ff61 	bl	8025dfc <mg_match>
 8013f3a:	2800      	cmp	r0, #0
 8013f3c:	f000 80bd 	beq.w	80140ba <handle_dev_status+0x206>
			mqtt_connection =  get_mqtt_connection();
 8013f40:	f001 fcc0 	bl	80158c4 <get_mqtt_connection>
			if(!mqtt_connection){
 8013f44:	4682      	mov	sl, r0
 8013f46:	b358      	cbz	r0, 8013fa0 <handle_dev_status+0xec>
				if (mqtt_connection->is_connecting){
 8013f48:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8013f4c:	f013 0f20 	tst.w	r3, #32
 8013f50:	d12c      	bne.n	8013fac <handle_dev_status+0xf8>
				}else if(mqtt_connection->is_closing){
 8013f52:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8013f56:	f013 0f20 	tst.w	r3, #32
 8013f5a:	d02d      	beq.n	8013fb8 <handle_dev_status+0x104>
					strncpy(mqtt_status_str, "closing",str_part_len);
 8013f5c:	221e      	movs	r2, #30
 8013f5e:	4969      	ldr	r1, [pc, #420]	@ (8014104 <handle_dev_status+0x250>)
 8013f60:	4630      	mov	r0, r6
 8013f62:	f018 fc94 	bl	802c88e <strncpy>
				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 8013f66:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 801412c <handle_dev_status+0x278>
 8013f6a:	f10a 0308 	add.w	r3, sl, #8
 8013f6e:	9300      	str	r3, [sp, #0]
 8013f70:	465b      	mov	r3, fp
 8013f72:	4a65      	ldr	r2, [pc, #404]	@ (8014108 <handle_dev_status+0x254>)
 8013f74:	212e      	movs	r1, #46	@ 0x2e
 8013f76:	4640      	mov	r0, r8
 8013f78:	f010 fe7a 	bl	8024c70 <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 8013f7c:	f10a 031c 	add.w	r3, sl, #28
 8013f80:	9300      	str	r3, [sp, #0]
 8013f82:	465b      	mov	r3, fp
 8013f84:	4a60      	ldr	r2, [pc, #384]	@ (8014108 <handle_dev_status+0x254>)
 8013f86:	212e      	movs	r1, #46	@ 0x2e
 8013f88:	4638      	mov	r0, r7
 8013f8a:	f010 fe71 	bl	8024c70 <mg_snprintf>
			strcat(pub_topics_str, "\"");
 8013f8e:	4620      	mov	r0, r4
 8013f90:	f7fc f986 	bl	80102a0 <strlen>
 8013f94:	4b5d      	ldr	r3, [pc, #372]	@ (801410c <handle_dev_status+0x258>)
 8013f96:	881b      	ldrh	r3, [r3, #0]
 8013f98:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8013f9a:	f04f 0a01 	mov.w	sl, #1
 8013f9e:	e028      	b.n	8013ff2 <handle_dev_status+0x13e>
				strncpy(mqtt_status_str, "closed", str_part_len);
 8013fa0:	221e      	movs	r2, #30
 8013fa2:	495b      	ldr	r1, [pc, #364]	@ (8014110 <handle_dev_status+0x25c>)
 8013fa4:	4630      	mov	r0, r6
 8013fa6:	f018 fc72 	bl	802c88e <strncpy>
 8013faa:	e7f0      	b.n	8013f8e <handle_dev_status+0xda>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 8013fac:	221e      	movs	r2, #30
 8013fae:	4959      	ldr	r1, [pc, #356]	@ (8014114 <handle_dev_status+0x260>)
 8013fb0:	4630      	mov	r0, r6
 8013fb2:	f018 fc6c 	bl	802c88e <strncpy>
 8013fb6:	e7d6      	b.n	8013f66 <handle_dev_status+0xb2>
					strncpy(mqtt_status_str, "established", str_part_len);
 8013fb8:	221e      	movs	r2, #30
 8013fba:	4957      	ldr	r1, [pc, #348]	@ (8014118 <handle_dev_status+0x264>)
 8013fbc:	4630      	mov	r0, r6
 8013fbe:	f018 fc66 	bl	802c88e <strncpy>
 8013fc2:	e7d0      	b.n	8013f66 <handle_dev_status+0xb2>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 8013fc4:	fa5f f38a 	uxtb.w	r3, sl
 8013fc8:	2201      	movs	r2, #1
 8013fca:	2180      	movs	r1, #128	@ 0x80
 8013fcc:	a807      	add	r0, sp, #28
 8013fce:	f002 f97b 	bl	80162c8 <generate_status_topik>
				strcat(pub_topics_str, topic);
 8013fd2:	a907      	add	r1, sp, #28
 8013fd4:	4620      	mov	r0, r4
 8013fd6:	f018 fc1b 	bl	802c810 <strcat>
				strcat(pub_topics_str, "\", \"");
 8013fda:	4620      	mov	r0, r4
 8013fdc:	f7fc f960 	bl	80102a0 <strlen>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	1821      	adds	r1, r4, r0
 8013fe4:	4a4d      	ldr	r2, [pc, #308]	@ (801411c <handle_dev_status+0x268>)
 8013fe6:	6810      	ldr	r0, [r2, #0]
 8013fe8:	50e0      	str	r0, [r4, r3]
 8013fea:	7913      	ldrb	r3, [r2, #4]
 8013fec:	710b      	strb	r3, [r1, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8013fee:	f10a 0a01 	add.w	sl, sl, #1
 8013ff2:	f1ba 0f03 	cmp.w	sl, #3
 8013ff6:	dde5      	ble.n	8013fc4 <handle_dev_status+0x110>
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013ff8:	f04f 0a01 	mov.w	sl, #1
 8013ffc:	e007      	b.n	801400e <handle_dev_status+0x15a>
					strcat(pub_topics_str, "\"");
 8013ffe:	4620      	mov	r0, r4
 8014000:	f7fc f94e 	bl	80102a0 <strlen>
 8014004:	4b41      	ldr	r3, [pc, #260]	@ (801410c <handle_dev_status+0x258>)
 8014006:	881b      	ldrh	r3, [r3, #0]
 8014008:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 801400a:	f10a 0a01 	add.w	sl, sl, #1
 801400e:	f1ba 0f03 	cmp.w	sl, #3
 8014012:	dc18      	bgt.n	8014046 <handle_dev_status+0x192>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8014014:	fa5f f38a 	uxtb.w	r3, sl
 8014018:	2202      	movs	r2, #2
 801401a:	2180      	movs	r1, #128	@ 0x80
 801401c:	a807      	add	r0, sp, #28
 801401e:	f002 f953 	bl	80162c8 <generate_status_topik>
				strcat(pub_topics_str, topic);
 8014022:	a907      	add	r1, sp, #28
 8014024:	4620      	mov	r0, r4
 8014026:	f018 fbf3 	bl	802c810 <strcat>
				if (i < OUTPUTS_COUNT) {
 801402a:	f1ba 0f02 	cmp.w	sl, #2
 801402e:	dce6      	bgt.n	8013ffe <handle_dev_status+0x14a>
					strcat(pub_topics_str, "\", \"");
 8014030:	4620      	mov	r0, r4
 8014032:	f7fc f935 	bl	80102a0 <strlen>
 8014036:	4603      	mov	r3, r0
 8014038:	1821      	adds	r1, r4, r0
 801403a:	4a38      	ldr	r2, [pc, #224]	@ (801411c <handle_dev_status+0x268>)
 801403c:	6810      	ldr	r0, [r2, #0]
 801403e:	50e0      	str	r0, [r4, r3]
 8014040:	7913      	ldrb	r3, [r2, #4]
 8014042:	710b      	strb	r3, [r1, #4]
 8014044:	e7e1      	b.n	801400a <handle_dev_status+0x156>
			strcat(subscr_topics_str, "\"");
 8014046:	4628      	mov	r0, r5
 8014048:	f7fc f92a 	bl	80102a0 <strlen>
 801404c:	4b2f      	ldr	r3, [pc, #188]	@ (801410c <handle_dev_status+0x258>)
 801404e:	881b      	ldrh	r3, [r3, #0]
 8014050:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8014052:	f04f 0a01 	mov.w	sl, #1
 8014056:	e007      	b.n	8014068 <handle_dev_status+0x1b4>
					strcat(subscr_topics_str, "\"");
 8014058:	4628      	mov	r0, r5
 801405a:	f7fc f921 	bl	80102a0 <strlen>
 801405e:	4b2b      	ldr	r3, [pc, #172]	@ (801410c <handle_dev_status+0x258>)
 8014060:	881b      	ldrh	r3, [r3, #0]
 8014062:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8014064:	f10a 0a01 	add.w	sl, sl, #1
 8014068:	f1ba 0f03 	cmp.w	sl, #3
 801406c:	dc18      	bgt.n	80140a0 <handle_dev_status+0x1ec>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 801406e:	fa5f f38a 	uxtb.w	r3, sl
 8014072:	2202      	movs	r2, #2
 8014074:	2180      	movs	r1, #128	@ 0x80
 8014076:	a807      	add	r0, sp, #28
 8014078:	f002 f90c 	bl	8016294 <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 801407c:	a907      	add	r1, sp, #28
 801407e:	4628      	mov	r0, r5
 8014080:	f018 fbc6 	bl	802c810 <strcat>
				if (i < OUTPUTS_COUNT) {
 8014084:	f1ba 0f02 	cmp.w	sl, #2
 8014088:	dce6      	bgt.n	8014058 <handle_dev_status+0x1a4>
					strcat(subscr_topics_str, "\", \"");
 801408a:	4628      	mov	r0, r5
 801408c:	f7fc f908 	bl	80102a0 <strlen>
 8014090:	4603      	mov	r3, r0
 8014092:	1829      	adds	r1, r5, r0
 8014094:	4a21      	ldr	r2, [pc, #132]	@ (801411c <handle_dev_status+0x268>)
 8014096:	6810      	ldr	r0, [r2, #0]
 8014098:	50e8      	str	r0, [r5, r3]
 801409a:	7913      	ldrb	r3, [r2, #4]
 801409c:	710b      	strb	r3, [r1, #4]
 801409e:	e7e1      	b.n	8014064 <handle_dev_status+0x1b0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80140a0:	9504      	str	r5, [sp, #16]
 80140a2:	9403      	str	r4, [sp, #12]
 80140a4:	9702      	str	r7, [sp, #8]
 80140a6:	f8cd 8004 	str.w	r8, [sp, #4]
 80140aa:	9600      	str	r6, [sp, #0]
 80140ac:	ab27      	add	r3, sp, #156	@ 0x9c
 80140ae:	4a1c      	ldr	r2, [pc, #112]	@ (8014120 <handle_dev_status+0x26c>)
 80140b0:	21c8      	movs	r1, #200	@ 0xc8
 80140b2:	4648      	mov	r0, r9
 80140b4:	f011 faf0 	bl	8025698 <mg_http_reply>
 80140b8:	e00e      	b.n	80140d8 <handle_dev_status+0x224>
			mg_http_reply(c, 405, headers, //TODO delete for release,
 80140ba:	4b1a      	ldr	r3, [pc, #104]	@ (8014124 <handle_dev_status+0x270>)
 80140bc:	4a18      	ldr	r2, [pc, #96]	@ (8014120 <handle_dev_status+0x26c>)
 80140be:	f240 1195 	movw	r1, #405	@ 0x195
 80140c2:	4648      	mov	r0, r9
 80140c4:	f011 fae8 	bl	8025698 <mg_http_reply>
 80140c8:	e006      	b.n	80140d8 <handle_dev_status+0x224>
		mg_http_reply(c, 500, headers, //TODO delete for release,
 80140ca:	4b17      	ldr	r3, [pc, #92]	@ (8014128 <handle_dev_status+0x274>)
 80140cc:	4a14      	ldr	r2, [pc, #80]	@ (8014120 <handle_dev_status+0x26c>)
 80140ce:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80140d2:	4648      	mov	r0, r9
 80140d4:	f011 fae0 	bl	8025698 <mg_http_reply>
	free(mqtt_status_str);
 80140d8:	4630      	mov	r0, r6
 80140da:	f008 f81f 	bl	801c11c <vPortFree>
	free(mqtt_server_addr);
 80140de:	4638      	mov	r0, r7
 80140e0:	f008 f81c 	bl	801c11c <vPortFree>
	free(mqtt_local_addr);
 80140e4:	4640      	mov	r0, r8
 80140e6:	f008 f819 	bl	801c11c <vPortFree>
	free(pub_topics_str);
 80140ea:	4620      	mov	r0, r4
 80140ec:	f008 f816 	bl	801c11c <vPortFree>
	free(subscr_topics_str);
 80140f0:	4628      	mov	r0, r5
 80140f2:	f008 f813 	bl	801c11c <vPortFree>
}
 80140f6:	b047      	add	sp, #284	@ 0x11c
 80140f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140fc:	08038c98 	.word	0x08038c98
 8014100:	08038040 	.word	0x08038040
 8014104:	08038c38 	.word	0x08038c38
 8014108:	08038c4c 	.word	0x08038c4c
 801410c:	08038c50 	.word	0x08038c50
 8014110:	0803beac 	.word	0x0803beac
 8014114:	08038c2c 	.word	0x08038c2c
 8014118:	08038c40 	.word	0x08038c40
 801411c:	08038c54 	.word	0x08038c54
 8014120:	08038090 	.word	0x08038090
 8014124:	08038774 	.word	0x08038774
 8014128:	08038c5c 	.word	0x08038c5c
 801412c:	08027775 	.word	0x08027775

08014130 <handle_fs_get_log>:
static void handle_fs_get_log(struct mg_connection *c, struct mg_http_message *hm, int number){
 8014130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014132:	b08d      	sub	sp, #52	@ 0x34
 8014134:	4607      	mov	r7, r0
 8014136:	460c      	mov	r4, r1
 8014138:	4615      	mov	r5, r2
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 801413a:	ae08      	add	r6, sp, #32
 801413c:	4923      	ldr	r1, [pc, #140]	@ (80141cc <handle_fs_get_log+0x9c>)
 801413e:	4630      	mov	r0, r6
 8014140:	f011 fc34 	bl	80259ac <mg_str_s>
 8014144:	2300      	movs	r3, #0
 8014146:	9300      	str	r3, [sp, #0]
 8014148:	e896 000c 	ldmia.w	r6, {r2, r3}
 801414c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014150:	f011 fe54 	bl	8025dfc <mg_match>
 8014154:	b318      	cbz	r0, 801419e <handle_fs_get_log+0x6e>
		struct mg_http_serve_opts opts = {
 8014156:	2300      	movs	r3, #0
 8014158:	9302      	str	r3, [sp, #8]
 801415a:	9303      	str	r3, [sp, #12]
 801415c:	9304      	str	r3, [sp, #16]
 801415e:	9305      	str	r3, [sp, #20]
 8014160:	9306      	str	r3, [sp, #24]
 8014162:	9307      	str	r3, [sp, #28]
 8014164:	4b1a      	ldr	r3, [pc, #104]	@ (80141d0 <handle_fs_get_log+0xa0>)
 8014166:	9302      	str	r3, [sp, #8]
 8014168:	4b1a      	ldr	r3, [pc, #104]	@ (80141d4 <handle_fs_get_log+0xa4>)
 801416a:	9307      	str	r3, [sp, #28]
		switch (number) {
 801416c:	b145      	cbz	r5, 8014180 <handle_fs_get_log+0x50>
 801416e:	2d01      	cmp	r5, #1
 8014170:	d00e      	beq.n	8014190 <handle_fs_get_log+0x60>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8014172:	ab02      	add	r3, sp, #8
 8014174:	4a18      	ldr	r2, [pc, #96]	@ (80141d8 <handle_fs_get_log+0xa8>)
 8014176:	4621      	mov	r1, r4
 8014178:	4638      	mov	r0, r7
 801417a:	f011 fffb 	bl	8026174 <mg_http_serve_file>
				break;
 801417e:	e005      	b.n	801418c <handle_fs_get_log+0x5c>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8014180:	ab02      	add	r3, sp, #8
 8014182:	4a15      	ldr	r2, [pc, #84]	@ (80141d8 <handle_fs_get_log+0xa8>)
 8014184:	4621      	mov	r1, r4
 8014186:	4638      	mov	r0, r7
 8014188:	f011 fff4 	bl	8026174 <mg_http_serve_file>
}
 801418c:	b00d      	add	sp, #52	@ 0x34
 801418e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
 8014190:	ab02      	add	r3, sp, #8
 8014192:	4a12      	ldr	r2, [pc, #72]	@ (80141dc <handle_fs_get_log+0xac>)
 8014194:	4621      	mov	r1, r4
 8014196:	4638      	mov	r0, r7
 8014198:	f011 ffec 	bl	8026174 <mg_http_serve_file>
				break;
 801419c:	e7f6      	b.n	801418c <handle_fs_get_log+0x5c>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 801419e:	ad0a      	add	r5, sp, #40	@ 0x28
 80141a0:	490f      	ldr	r1, [pc, #60]	@ (80141e0 <handle_fs_get_log+0xb0>)
 80141a2:	4628      	mov	r0, r5
 80141a4:	f011 fc02 	bl	80259ac <mg_str_s>
 80141a8:	2300      	movs	r3, #0
 80141aa:	9300      	str	r3, [sp, #0]
 80141ac:	e895 000c 	ldmia.w	r5, {r2, r3}
 80141b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80141b4:	f011 fe22 	bl	8025dfc <mg_match>
 80141b8:	2800      	cmp	r0, #0
 80141ba:	d1e7      	bne.n	801418c <handle_fs_get_log+0x5c>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80141bc:	4b09      	ldr	r3, [pc, #36]	@ (80141e4 <handle_fs_get_log+0xb4>)
 80141be:	4a0a      	ldr	r2, [pc, #40]	@ (80141e8 <handle_fs_get_log+0xb8>)
 80141c0:	f240 1195 	movw	r1, #405	@ 0x195
 80141c4:	4638      	mov	r0, r7
 80141c6:	f011 fa67 	bl	8025698 <mg_http_reply>
}
 80141ca:	e7df      	b.n	801418c <handle_fs_get_log+0x5c>
 80141cc:	08038040 	.word	0x08038040
 80141d0:	08039514 	.word	0x08039514
 80141d4:	200000a0 	.word	0x200000a0
 80141d8:	08037d30 	.word	0x08037d30
 80141dc:	08037d40 	.word	0x08037d40
 80141e0:	08038154 	.word	0x08038154
 80141e4:	08038d0c 	.word	0x08038d0c
 80141e8:	08038090 	.word	0x08038090

080141ec <write_users>:
static void write_users(const char *file_path, users_list_t * users, size_t count){
 80141ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141ee:	4604      	mov	r4, r0
 80141f0:	460d      	mov	r5, r1
 80141f2:	4616      	mov	r6, r2
	mg_fs_lfs.rm(file_path);
 80141f4:	4f0b      	ldr	r7, [pc, #44]	@ (8014224 <write_users+0x38>)
 80141f6:	6a3b      	ldr	r3, [r7, #32]
 80141f8:	4798      	blx	r3
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_WRITE);
 80141fa:	2202      	movs	r2, #2
 80141fc:	4621      	mov	r1, r4
 80141fe:	4638      	mov	r0, r7
 8014200:	f00f ffa2 	bl	8024148 <mg_fs_open>
 8014204:	4604      	mov	r4, r0
	mg_fs_lfs.wr(fd->fd, users, sizeof(users_list_t) * count);
 8014206:	697b      	ldr	r3, [r7, #20]
 8014208:	22a9      	movs	r2, #169	@ 0xa9
 801420a:	fb06 f202 	mul.w	r2, r6, r2
 801420e:	4629      	mov	r1, r5
 8014210:	6800      	ldr	r0, [r0, #0]
 8014212:	4798      	blx	r3
	mg_fs_close(fd);
 8014214:	4620      	mov	r0, r4
 8014216:	f00f ffb0 	bl	802417a <mg_fs_close>
	logging(L_INFO, "Saved web users to file");
 801421a:	4903      	ldr	r1, [pc, #12]	@ (8014228 <write_users+0x3c>)
 801421c:	2001      	movs	r0, #1
 801421e:	f7fe f913 	bl	8012448 <logging>
}
 8014222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014224:	200000a0 	.word	0x200000a0
 8014228:	08038d64 	.word	0x08038d64

0801422c <handle_manage_user>:
static void handle_manage_user(struct mg_connection *c, struct mg_http_message *hm){
 801422c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014230:	b0ae      	sub	sp, #184	@ 0xb8
 8014232:	4606      	mov	r6, r0
 8014234:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8014236:	ad26      	add	r5, sp, #152	@ 0x98
 8014238:	49bd      	ldr	r1, [pc, #756]	@ (8014530 <handle_manage_user+0x304>)
 801423a:	4628      	mov	r0, r5
 801423c:	f011 fbb6 	bl	80259ac <mg_str_s>
 8014240:	2300      	movs	r3, #0
 8014242:	9300      	str	r3, [sp, #0]
 8014244:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014248:	e894 0003 	ldmia.w	r4, {r0, r1}
 801424c:	f011 fdd6 	bl	8025dfc <mg_match>
 8014250:	2800      	cmp	r0, #0
 8014252:	d143      	bne.n	80142dc <handle_manage_user+0xb0>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8014254:	ad28      	add	r5, sp, #160	@ 0xa0
 8014256:	49b7      	ldr	r1, [pc, #732]	@ (8014534 <handle_manage_user+0x308>)
 8014258:	4628      	mov	r0, r5
 801425a:	f011 fba7 	bl	80259ac <mg_str_s>
 801425e:	2300      	movs	r3, #0
 8014260:	9300      	str	r3, [sp, #0]
 8014262:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014266:	e894 0003 	ldmia.w	r4, {r0, r1}
 801426a:	f011 fdc7 	bl	8025dfc <mg_match>
 801426e:	2800      	cmp	r0, #0
 8014270:	f000 80fb 	beq.w	801446a <handle_manage_user+0x23e>
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 8014274:	ab03      	add	r3, sp, #12
 8014276:	4ab0      	ldr	r2, [pc, #704]	@ (8014538 <handle_manage_user+0x30c>)
 8014278:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 801427c:	c903      	ldmia	r1, {r0, r1}
 801427e:	f010 f84d 	bl	802431c <mg_json_get>
 8014282:	2800      	cmp	r0, #0
 8014284:	f2c0 8089 	blt.w	801439a <handle_manage_user+0x16e>
	    username_add = mg_json_get_str(hm->body, "$.user");
 8014288:	4aac      	ldr	r2, [pc, #688]	@ (801453c <handle_manage_user+0x310>)
 801428a:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 801428e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014292:	f012 fc7b 	bl	8026b8c <mg_json_get_str>
 8014296:	4605      	mov	r5, r0
	    password_add = mg_json_get_str(hm->body, "$.pass");
 8014298:	4aa9      	ldr	r2, [pc, #676]	@ (8014540 <handle_manage_user+0x314>)
 801429a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801429e:	f012 fc75 	bl	8026b8c <mg_json_get_str>
 80142a2:	4607      	mov	r7, r0
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 80142a4:	2d00      	cmp	r5, #0
 80142a6:	f000 80d2 	beq.w	801444e <handle_manage_user+0x222>
 80142aa:	2800      	cmp	r0, #0
 80142ac:	f000 80cf 	beq.w	801444e <handle_manage_user+0x222>
 80142b0:	782b      	ldrb	r3, [r5, #0]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	f000 80cb 	beq.w	801444e <handle_manage_user+0x222>
 80142b8:	7803      	ldrb	r3, [r0, #0]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	f000 80c7 	beq.w	801444e <handle_manage_user+0x222>
	        for (int i = 0; i < user_list_size; i++) {
 80142c0:	2400      	movs	r4, #0
 80142c2:	2c09      	cmp	r4, #9
 80142c4:	dc7f      	bgt.n	80143c6 <handle_manage_user+0x19a>
	            if (strcmp(web_users[i].user, username_add) == 0) {
 80142c6:	4629      	mov	r1, r5
 80142c8:	20a9      	movs	r0, #169	@ 0xa9
 80142ca:	4b9e      	ldr	r3, [pc, #632]	@ (8014544 <handle_manage_user+0x318>)
 80142cc:	fb00 3004 	mla	r0, r0, r4, r3
 80142d0:	f7fb ff86 	bl	80101e0 <strcmp>
 80142d4:	2800      	cmp	r0, #0
 80142d6:	d068      	beq.n	80143aa <handle_manage_user+0x17e>
	        for (int i = 0; i < user_list_size; i++) {
 80142d8:	3401      	adds	r4, #1
 80142da:	e7f2      	b.n	80142c2 <handle_manage_user+0x96>
	    char *response = calloc(response_len, sizeof(char));
 80142dc:	2101      	movs	r1, #1
 80142de:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80142e2:	f7ff fbc1 	bl	8013a68 <mg_calloc>
 80142e6:	4607      	mov	r7, r0
	    char *user_entry = calloc(user_entry_len, sizeof(char));
 80142e8:	2101      	movs	r1, #1
 80142ea:	20a0      	movs	r0, #160	@ 0xa0
 80142ec:	f7ff fbbc 	bl	8013a68 <mg_calloc>
 80142f0:	4680      	mov	r8, r0
	    if (response && user_entry) {
 80142f2:	2f00      	cmp	r7, #0
 80142f4:	d03d      	beq.n	8014372 <handle_manage_user+0x146>
 80142f6:	2800      	cmp	r0, #0
 80142f8:	d03b      	beq.n	8014372 <handle_manage_user+0x146>
	        offset += snprintf(response + offset, response_len - offset, "{ \"users\": [");
 80142fa:	4b93      	ldr	r3, [pc, #588]	@ (8014548 <handle_manage_user+0x31c>)
 80142fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80142fe:	6038      	str	r0, [r7, #0]
 8014300:	6079      	str	r1, [r7, #4]
 8014302:	60ba      	str	r2, [r7, #8]
 8014304:	781b      	ldrb	r3, [r3, #0]
 8014306:	733b      	strb	r3, [r7, #12]
	        for (int i = 0; i < user_list_size; i++) {
 8014308:	2400      	movs	r4, #0
	        offset += snprintf(response + offset, response_len - offset, "{ \"users\": [");
 801430a:	250c      	movs	r5, #12
	        for (int i = 0; i < user_list_size; i++) {
 801430c:	e008      	b.n	8014320 <handle_manage_user+0xf4>
	                offset += snprintf(response + offset, response_len - offset, "%s", user_entry);
 801430e:	4643      	mov	r3, r8
 8014310:	4a8e      	ldr	r2, [pc, #568]	@ (801454c <handle_manage_user+0x320>)
 8014312:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8014316:	1978      	adds	r0, r7, r5
 8014318:	f018 f848 	bl	802c3ac <snprintf>
 801431c:	4405      	add	r5, r0
	        for (int i = 0; i < user_list_size; i++) {
 801431e:	3401      	adds	r4, #1
 8014320:	2c09      	cmp	r4, #9
 8014322:	dc18      	bgt.n	8014356 <handle_manage_user+0x12a>
	            if (web_users[i].user[0] != '\0') {  // Проверяем, что имя пользователя не пустое
 8014324:	22a9      	movs	r2, #169	@ 0xa9
 8014326:	fb04 f202 	mul.w	r2, r4, r2
 801432a:	4b86      	ldr	r3, [pc, #536]	@ (8014544 <handle_manage_user+0x318>)
 801432c:	5c9a      	ldrb	r2, [r3, r2]
 801432e:	2a00      	cmp	r2, #0
 8014330:	d0f5      	beq.n	801431e <handle_manage_user+0xf2>
	                snprintf(user_entry, user_entry_len, "{\"user\": \"%s\"}", web_users[i].user);
 8014332:	22a9      	movs	r2, #169	@ 0xa9
 8014334:	fb02 3304 	mla	r3, r2, r4, r3
 8014338:	4a85      	ldr	r2, [pc, #532]	@ (8014550 <handle_manage_user+0x324>)
 801433a:	21a0      	movs	r1, #160	@ 0xa0
 801433c:	4640      	mov	r0, r8
 801433e:	f018 f835 	bl	802c3ac <snprintf>
	                if (offset > 12) { // 12 символов — это длина строки "{ \"users\": ["
 8014342:	2d0c      	cmp	r5, #12
 8014344:	d9e3      	bls.n	801430e <handle_manage_user+0xe2>
	                    offset += snprintf(response + offset, response_len - offset, ",");
 8014346:	4a83      	ldr	r2, [pc, #524]	@ (8014554 <handle_manage_user+0x328>)
 8014348:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 801434c:	1978      	adds	r0, r7, r5
 801434e:	f018 f82d 	bl	802c3ac <snprintf>
 8014352:	4405      	add	r5, r0
 8014354:	e7db      	b.n	801430e <handle_manage_user+0xe2>
	        offset += snprintf(response + offset, response_len - offset, "]}");
 8014356:	4a80      	ldr	r2, [pc, #512]	@ (8014558 <handle_manage_user+0x32c>)
 8014358:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 801435c:	1978      	adds	r0, r7, r5
 801435e:	f018 f825 	bl	802c3ac <snprintf>
	        mg_http_reply(c, 200, headers, "%s", response);
 8014362:	9700      	str	r7, [sp, #0]
 8014364:	4b79      	ldr	r3, [pc, #484]	@ (801454c <handle_manage_user+0x320>)
 8014366:	4a7d      	ldr	r2, [pc, #500]	@ (801455c <handle_manage_user+0x330>)
 8014368:	21c8      	movs	r1, #200	@ 0xc8
 801436a:	4630      	mov	r0, r6
 801436c:	f011 f994 	bl	8025698 <mg_http_reply>
 8014370:	e00a      	b.n	8014388 <handle_manage_user+0x15c>
	    	logging(L_ERR, "Memory allocation failed in handle_manage_user GET");
 8014372:	497b      	ldr	r1, [pc, #492]	@ (8014560 <handle_manage_user+0x334>)
 8014374:	2003      	movs	r0, #3
 8014376:	f7fe f867 	bl	8012448 <logging>
	        mg_http_reply(c, 500, headers, "{\"error\": \"Memory allocation failed\"}");
 801437a:	4b7a      	ldr	r3, [pc, #488]	@ (8014564 <handle_manage_user+0x338>)
 801437c:	4a77      	ldr	r2, [pc, #476]	@ (801455c <handle_manage_user+0x330>)
 801437e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8014382:	4630      	mov	r0, r6
 8014384:	f011 f988 	bl	8025698 <mg_http_reply>
	    free(response);
 8014388:	4638      	mov	r0, r7
 801438a:	f007 fec7 	bl	801c11c <vPortFree>
	    free(user_entry);
 801438e:	4640      	mov	r0, r8
 8014390:	f007 fec4 	bl	801c11c <vPortFree>
}
 8014394:	b02e      	add	sp, #184	@ 0xb8
 8014396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	        mg_http_reply(c, 400, headers,
 801439a:	4b73      	ldr	r3, [pc, #460]	@ (8014568 <handle_manage_user+0x33c>)
 801439c:	4a6f      	ldr	r2, [pc, #444]	@ (801455c <handle_manage_user+0x330>)
 801439e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80143a2:	4630      	mov	r0, r6
 80143a4:	f011 f978 	bl	8025698 <mg_http_reply>
	        return;
 80143a8:	e7f4      	b.n	8014394 <handle_manage_user+0x168>
	                mg_http_reply(c, 400, headers,
 80143aa:	4b70      	ldr	r3, [pc, #448]	@ (801456c <handle_manage_user+0x340>)
 80143ac:	4a6b      	ldr	r2, [pc, #428]	@ (801455c <handle_manage_user+0x330>)
 80143ae:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80143b2:	4630      	mov	r0, r6
 80143b4:	f011 f970 	bl	8025698 <mg_http_reply>
	                free(username_add);
 80143b8:	4628      	mov	r0, r5
 80143ba:	f007 feaf 	bl	801c11c <vPortFree>
	                free(password_add);
 80143be:	4638      	mov	r0, r7
 80143c0:	f007 feac 	bl	801c11c <vPortFree>
	                return;
 80143c4:	e7e6      	b.n	8014394 <handle_manage_user+0x168>
			char add_pass_digest[sha1_str_len] = {0};
 80143c6:	2229      	movs	r2, #41	@ 0x29
 80143c8:	2100      	movs	r1, #0
 80143ca:	a804      	add	r0, sp, #16
 80143cc:	f018 fa18 	bl	802c800 <memset>
			mg_sha1_init(&sha1_ctx);
 80143d0:	a80f      	add	r0, sp, #60	@ 0x3c
 80143d2:	f011 fa39 	bl	8025848 <mg_sha1_init>
			mg_sha1_update(&sha1_ctx, (const unsigned char *)password_add, strlen(password_add) * sizeof(char));
 80143d6:	4638      	mov	r0, r7
 80143d8:	f7fb ff62 	bl	80102a0 <strlen>
 80143dc:	4602      	mov	r2, r0
 80143de:	4639      	mov	r1, r7
 80143e0:	a80f      	add	r0, sp, #60	@ 0x3c
 80143e2:	f011 fa4b 	bl	802587c <mg_sha1_update>
			mg_sha1_final((unsigned char *)add_pass_digest, &sha1_ctx);
 80143e6:	a90f      	add	r1, sp, #60	@ 0x3c
 80143e8:	a804      	add	r0, sp, #16
 80143ea:	f011 fa81 	bl	80258f0 <mg_sha1_final>
	        for (int i = 0; i < user_list_size; i++) {
 80143ee:	2300      	movs	r3, #0
 80143f0:	2b09      	cmp	r3, #9
 80143f2:	dc24      	bgt.n	801443e <handle_manage_user+0x212>
	            if (web_users[i].user[0] == '\0') { // Пустая запись
 80143f4:	22a9      	movs	r2, #169	@ 0xa9
 80143f6:	fb03 f202 	mul.w	r2, r3, r2
 80143fa:	4952      	ldr	r1, [pc, #328]	@ (8014544 <handle_manage_user+0x318>)
 80143fc:	5c8a      	ldrb	r2, [r1, r2]
 80143fe:	b10a      	cbz	r2, 8014404 <handle_manage_user+0x1d8>
	        for (int i = 0; i < user_list_size; i++) {
 8014400:	3301      	adds	r3, #1
 8014402:	e7f5      	b.n	80143f0 <handle_manage_user+0x1c4>
	                strncpy(web_users[i].user, username_add, sizeof(web_users[i].user) - 1);
 8014404:	22a9      	movs	r2, #169	@ 0xa9
 8014406:	fb02 f403 	mul.w	r4, r2, r3
 801440a:	4688      	mov	r8, r1
 801440c:	227f      	movs	r2, #127	@ 0x7f
 801440e:	4629      	mov	r1, r5
 8014410:	eb08 0004 	add.w	r0, r8, r4
 8014414:	f018 fa3b 	bl	802c88e <strncpy>
	                strncpy(web_users[i].pass_digest, add_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 8014418:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801441c:	2228      	movs	r2, #40	@ 0x28
 801441e:	a904      	add	r1, sp, #16
 8014420:	4440      	add	r0, r8
 8014422:	f018 fa34 	bl	802c88e <strncpy>
	                write_users(user_cred_file, web_users, user_list_size);
 8014426:	220a      	movs	r2, #10
 8014428:	4641      	mov	r1, r8
 801442a:	4851      	ldr	r0, [pc, #324]	@ (8014570 <handle_manage_user+0x344>)
 801442c:	f7ff fede 	bl	80141ec <write_users>
	            mg_http_reply(c, 200, headers,
 8014430:	4b50      	ldr	r3, [pc, #320]	@ (8014574 <handle_manage_user+0x348>)
 8014432:	4a4a      	ldr	r2, [pc, #296]	@ (801455c <handle_manage_user+0x330>)
 8014434:	21c8      	movs	r1, #200	@ 0xc8
 8014436:	4630      	mov	r0, r6
 8014438:	f011 f92e 	bl	8025698 <mg_http_reply>
 801443c:	e00e      	b.n	801445c <handle_manage_user+0x230>
	            mg_http_reply(c, 400, headers,
 801443e:	4b4e      	ldr	r3, [pc, #312]	@ (8014578 <handle_manage_user+0x34c>)
 8014440:	4a46      	ldr	r2, [pc, #280]	@ (801455c <handle_manage_user+0x330>)
 8014442:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014446:	4630      	mov	r0, r6
 8014448:	f011 f926 	bl	8025698 <mg_http_reply>
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 801444c:	e006      	b.n	801445c <handle_manage_user+0x230>
	        mg_http_reply(c, 400, headers,
 801444e:	4b4b      	ldr	r3, [pc, #300]	@ (801457c <handle_manage_user+0x350>)
 8014450:	4a42      	ldr	r2, [pc, #264]	@ (801455c <handle_manage_user+0x330>)
 8014452:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014456:	4630      	mov	r0, r6
 8014458:	f011 f91e 	bl	8025698 <mg_http_reply>
		free(username_add);
 801445c:	4628      	mov	r0, r5
 801445e:	f007 fe5d 	bl	801c11c <vPortFree>
		free(password_add);
 8014462:	4638      	mov	r0, r7
 8014464:	f007 fe5a 	bl	801c11c <vPortFree>
		return;
 8014468:	e794      	b.n	8014394 <handle_manage_user+0x168>
	}else if (mg_match(hm->method, mg_str("PUT"), NULL)){
 801446a:	ad2a      	add	r5, sp, #168	@ 0xa8
 801446c:	4944      	ldr	r1, [pc, #272]	@ (8014580 <handle_manage_user+0x354>)
 801446e:	4628      	mov	r0, r5
 8014470:	f011 fa9c 	bl	80259ac <mg_str_s>
 8014474:	2300      	movs	r3, #0
 8014476:	9300      	str	r3, [sp, #0]
 8014478:	e895 000c 	ldmia.w	r5, {r2, r3}
 801447c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014480:	f011 fcbc 	bl	8025dfc <mg_match>
 8014484:	bb38      	cbnz	r0, 80144d6 <handle_manage_user+0x2aa>
	}else if (mg_match(hm->method, mg_str("DELETE"), NULL)){
 8014486:	ad2c      	add	r5, sp, #176	@ 0xb0
 8014488:	493e      	ldr	r1, [pc, #248]	@ (8014584 <handle_manage_user+0x358>)
 801448a:	4628      	mov	r0, r5
 801448c:	f011 fa8e 	bl	80259ac <mg_str_s>
 8014490:	2300      	movs	r3, #0
 8014492:	9300      	str	r3, [sp, #0]
 8014494:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014498:	e894 0003 	ldmia.w	r4, {r0, r1}
 801449c:	f011 fcae 	bl	8025dfc <mg_match>
 80144a0:	2800      	cmp	r0, #0
 80144a2:	f000 80f6 	beq.w	8014692 <handle_manage_user+0x466>
	    username_del = mg_json_get_str(hm->body, "$.user");
 80144a6:	4a25      	ldr	r2, [pc, #148]	@ (801453c <handle_manage_user+0x310>)
 80144a8:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 80144ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80144b0:	f012 fb6c 	bl	8026b8c <mg_json_get_str>
	    if (username_del && strlen(username_del) > 0) {
 80144b4:	4607      	mov	r7, r0
 80144b6:	b118      	cbz	r0, 80144c0 <handle_manage_user+0x294>
 80144b8:	7803      	ldrb	r3, [r0, #0]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	f040 80d2 	bne.w	8014664 <handle_manage_user+0x438>
	        mg_http_reply(c, 400, headers,
 80144c0:	4b31      	ldr	r3, [pc, #196]	@ (8014588 <handle_manage_user+0x35c>)
 80144c2:	4a26      	ldr	r2, [pc, #152]	@ (801455c <handle_manage_user+0x330>)
 80144c4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80144c8:	4630      	mov	r0, r6
 80144ca:	f011 f8e5 	bl	8025698 <mg_http_reply>
	    free(username_del);
 80144ce:	4638      	mov	r0, r7
 80144d0:	f007 fe24 	bl	801c11c <vPortFree>
 80144d4:	e75e      	b.n	8014394 <handle_manage_user+0x168>
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 80144d6:	ab03      	add	r3, sp, #12
 80144d8:	4a17      	ldr	r2, [pc, #92]	@ (8014538 <handle_manage_user+0x30c>)
 80144da:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 80144de:	c903      	ldmia	r1, {r0, r1}
 80144e0:	f00f ff1c 	bl	802431c <mg_json_get>
 80144e4:	2800      	cmp	r0, #0
 80144e6:	db53      	blt.n	8014590 <handle_manage_user+0x364>
	        username_edit = mg_json_get_str(hm->body, "$.user");
 80144e8:	4a14      	ldr	r2, [pc, #80]	@ (801453c <handle_manage_user+0x310>)
 80144ea:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 80144ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80144f2:	f012 fb4b 	bl	8026b8c <mg_json_get_str>
 80144f6:	4605      	mov	r5, r0
	        new_password = mg_json_get_str(hm->body, "$.pass");
 80144f8:	4a11      	ldr	r2, [pc, #68]	@ (8014540 <handle_manage_user+0x314>)
 80144fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80144fe:	f012 fb45 	bl	8026b8c <mg_json_get_str>
 8014502:	4604      	mov	r4, r0
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 8014504:	b12d      	cbz	r5, 8014512 <handle_manage_user+0x2e6>
 8014506:	b120      	cbz	r0, 8014512 <handle_manage_user+0x2e6>
 8014508:	782b      	ldrb	r3, [r5, #0]
 801450a:	b113      	cbz	r3, 8014512 <handle_manage_user+0x2e6>
 801450c:	7803      	ldrb	r3, [r0, #0]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d148      	bne.n	80145a4 <handle_manage_user+0x378>
	            mg_http_reply(c, 400, headers,
 8014512:	4b1e      	ldr	r3, [pc, #120]	@ (801458c <handle_manage_user+0x360>)
 8014514:	4a11      	ldr	r2, [pc, #68]	@ (801455c <handle_manage_user+0x330>)
 8014516:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801451a:	4630      	mov	r0, r6
 801451c:	f011 f8bc 	bl	8025698 <mg_http_reply>
	    free(username_edit);
 8014520:	4628      	mov	r0, r5
 8014522:	f007 fdfb 	bl	801c11c <vPortFree>
	    free(new_password);
 8014526:	4620      	mov	r0, r4
 8014528:	f007 fdf8 	bl	801c11c <vPortFree>
	    return;
 801452c:	e732      	b.n	8014394 <handle_manage_user+0x168>
 801452e:	bf00      	nop
 8014530:	08038040 	.word	0x08038040
 8014534:	08038154 	.word	0x08038154
 8014538:	0803885c 	.word	0x0803885c
 801453c:	08038da4 	.word	0x08038da4
 8014540:	08038dac 	.word	0x08038dac
 8014544:	20002360 	.word	0x20002360
 8014548:	08038d7c 	.word	0x08038d7c
 801454c:	0803beb8 	.word	0x0803beb8
 8014550:	08038d8c 	.word	0x08038d8c
 8014554:	08038d9c 	.word	0x08038d9c
 8014558:	08038da0 	.word	0x08038da0
 801455c:	08038090 	.word	0x08038090
 8014560:	08038a38 	.word	0x08038a38
 8014564:	08038a6c 	.word	0x08038a6c
 8014568:	08038860 	.word	0x08038860
 801456c:	08038db4 	.word	0x08038db4
 8014570:	08037b70 	.word	0x08037b70
 8014574:	08038df0 	.word	0x08038df0
 8014578:	08038e2c 	.word	0x08038e2c
 801457c:	08038e60 	.word	0x08038e60
 8014580:	08038ea0 	.word	0x08038ea0
 8014584:	08038f5c 	.word	0x08038f5c
 8014588:	08038ff8 	.word	0x08038ff8
 801458c:	08038f18 	.word	0x08038f18
	        mg_http_reply(c, 400, headers,
 8014590:	4b44      	ldr	r3, [pc, #272]	@ (80146a4 <handle_manage_user+0x478>)
 8014592:	4a45      	ldr	r2, [pc, #276]	@ (80146a8 <handle_manage_user+0x47c>)
 8014594:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014598:	4630      	mov	r0, r6
 801459a:	f011 f87d 	bl	8025698 <mg_http_reply>
	    char *new_password = NULL;
 801459e:	2400      	movs	r4, #0
	    char *username_edit = NULL;
 80145a0:	4625      	mov	r5, r4
 80145a2:	e7bd      	b.n	8014520 <handle_manage_user+0x2f4>
	            char new_pass_digest[sha1_str_len] = {0};
 80145a4:	2229      	movs	r2, #41	@ 0x29
 80145a6:	2100      	movs	r1, #0
 80145a8:	a804      	add	r0, sp, #16
 80145aa:	f018 f929 	bl	802c800 <memset>
	            mg_sha1_init(&sha1_ctx);
 80145ae:	a80f      	add	r0, sp, #60	@ 0x3c
 80145b0:	f011 f94a 	bl	8025848 <mg_sha1_init>
	            mg_sha1_update(&sha1_ctx, (const unsigned char *)new_password, strlen(new_password));
 80145b4:	4620      	mov	r0, r4
 80145b6:	f7fb fe73 	bl	80102a0 <strlen>
 80145ba:	4602      	mov	r2, r0
 80145bc:	4621      	mov	r1, r4
 80145be:	a80f      	add	r0, sp, #60	@ 0x3c
 80145c0:	f011 f95c 	bl	802587c <mg_sha1_update>
	            mg_sha1_final((unsigned char *)new_pass_digest, &sha1_ctx);
 80145c4:	a90f      	add	r1, sp, #60	@ 0x3c
 80145c6:	a804      	add	r0, sp, #16
 80145c8:	f011 f992 	bl	80258f0 <mg_sha1_final>
	            for (int i = 0; i < user_list_size; i++) {
 80145cc:	2700      	movs	r7, #0
 80145ce:	2f09      	cmp	r7, #9
 80145d0:	dc25      	bgt.n	801461e <handle_manage_user+0x3f2>
	                if (strcmp(web_users[i].user, username_edit) == 0) {
 80145d2:	4629      	mov	r1, r5
 80145d4:	20a9      	movs	r0, #169	@ 0xa9
 80145d6:	4b35      	ldr	r3, [pc, #212]	@ (80146ac <handle_manage_user+0x480>)
 80145d8:	fb00 3007 	mla	r0, r0, r7, r3
 80145dc:	f7fb fe00 	bl	80101e0 <strcmp>
 80145e0:	b108      	cbz	r0, 80145e6 <handle_manage_user+0x3ba>
	            for (int i = 0; i < user_list_size; i++) {
 80145e2:	3701      	adds	r7, #1
 80145e4:	e7f3      	b.n	80145ce <handle_manage_user+0x3a2>
	                    strncpy(web_users[i].pass_digest, new_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 80145e6:	23a9      	movs	r3, #169	@ 0xa9
 80145e8:	fb03 f707 	mul.w	r7, r3, r7
 80145ec:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 80145f0:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 80146ac <handle_manage_user+0x480>
 80145f4:	2228      	movs	r2, #40	@ 0x28
 80145f6:	a904      	add	r1, sp, #16
 80145f8:	4440      	add	r0, r8
 80145fa:	f018 f948 	bl	802c88e <strncpy>
	                    web_users[i].pass_digest[sizeof(web_users[i].pass_digest) - 1] = '\0';
 80145fe:	4447      	add	r7, r8
 8014600:	2300      	movs	r3, #0
 8014602:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
	                    write_users(user_cred_file, web_users, user_list_size);
 8014606:	220a      	movs	r2, #10
 8014608:	4641      	mov	r1, r8
 801460a:	4829      	ldr	r0, [pc, #164]	@ (80146b0 <handle_manage_user+0x484>)
 801460c:	f7ff fdee 	bl	80141ec <write_users>
	                mg_http_reply(c, 200, headers,
 8014610:	4b28      	ldr	r3, [pc, #160]	@ (80146b4 <handle_manage_user+0x488>)
 8014612:	4a25      	ldr	r2, [pc, #148]	@ (80146a8 <handle_manage_user+0x47c>)
 8014614:	21c8      	movs	r1, #200	@ 0xc8
 8014616:	4630      	mov	r0, r6
 8014618:	f011 f83e 	bl	8025698 <mg_http_reply>
 801461c:	e780      	b.n	8014520 <handle_manage_user+0x2f4>
	                mg_http_reply(c, 404, headers,
 801461e:	4b26      	ldr	r3, [pc, #152]	@ (80146b8 <handle_manage_user+0x48c>)
 8014620:	4a21      	ldr	r2, [pc, #132]	@ (80146a8 <handle_manage_user+0x47c>)
 8014622:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8014626:	4630      	mov	r0, r6
 8014628:	f011 f836 	bl	8025698 <mg_http_reply>
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 801462c:	e778      	b.n	8014520 <handle_manage_user+0x2f4>
	                memset(web_users[i].user, 0, sizeof(web_users[i].user));
 801462e:	2280      	movs	r2, #128	@ 0x80
 8014630:	2100      	movs	r1, #0
 8014632:	4628      	mov	r0, r5
 8014634:	f018 f8e4 	bl	802c800 <memset>
	                memset(web_users[i].pass_digest, 0, sizeof(web_users[i].pass_digest));
 8014638:	23a9      	movs	r3, #169	@ 0xa9
 801463a:	fb03 f004 	mul.w	r0, r3, r4
 801463e:	3080      	adds	r0, #128	@ 0x80
 8014640:	4c1a      	ldr	r4, [pc, #104]	@ (80146ac <handle_manage_user+0x480>)
 8014642:	2229      	movs	r2, #41	@ 0x29
 8014644:	2100      	movs	r1, #0
 8014646:	4420      	add	r0, r4
 8014648:	f018 f8da 	bl	802c800 <memset>
	                write_users(user_cred_file, web_users, user_list_size);
 801464c:	220a      	movs	r2, #10
 801464e:	4621      	mov	r1, r4
 8014650:	4817      	ldr	r0, [pc, #92]	@ (80146b0 <handle_manage_user+0x484>)
 8014652:	f7ff fdcb 	bl	80141ec <write_users>
	            mg_http_reply(c, 200, headers,
 8014656:	4b19      	ldr	r3, [pc, #100]	@ (80146bc <handle_manage_user+0x490>)
 8014658:	4a13      	ldr	r2, [pc, #76]	@ (80146a8 <handle_manage_user+0x47c>)
 801465a:	21c8      	movs	r1, #200	@ 0xc8
 801465c:	4630      	mov	r0, r6
 801465e:	f011 f81b 	bl	8025698 <mg_http_reply>
 8014662:	e734      	b.n	80144ce <handle_manage_user+0x2a2>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 8014664:	2401      	movs	r4, #1
 8014666:	2c09      	cmp	r4, #9
 8014668:	dc0b      	bgt.n	8014682 <handle_manage_user+0x456>
	            if (strcmp(web_users[i].user, username_del) == 0) {
 801466a:	23a9      	movs	r3, #169	@ 0xa9
 801466c:	4d0f      	ldr	r5, [pc, #60]	@ (80146ac <handle_manage_user+0x480>)
 801466e:	fb03 5504 	mla	r5, r3, r4, r5
 8014672:	4639      	mov	r1, r7
 8014674:	4628      	mov	r0, r5
 8014676:	f7fb fdb3 	bl	80101e0 <strcmp>
 801467a:	2800      	cmp	r0, #0
 801467c:	d0d7      	beq.n	801462e <handle_manage_user+0x402>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 801467e:	3401      	adds	r4, #1
 8014680:	e7f1      	b.n	8014666 <handle_manage_user+0x43a>
	            mg_http_reply(c, 400, headers,
 8014682:	4b0f      	ldr	r3, [pc, #60]	@ (80146c0 <handle_manage_user+0x494>)
 8014684:	4a08      	ldr	r2, [pc, #32]	@ (80146a8 <handle_manage_user+0x47c>)
 8014686:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801468a:	4630      	mov	r0, r6
 801468c:	f011 f804 	bl	8025698 <mg_http_reply>
 8014690:	e71d      	b.n	80144ce <handle_manage_user+0x2a2>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8014692:	4b0c      	ldr	r3, [pc, #48]	@ (80146c4 <handle_manage_user+0x498>)
 8014694:	4a04      	ldr	r2, [pc, #16]	@ (80146a8 <handle_manage_user+0x47c>)
 8014696:	f240 1195 	movw	r1, #405	@ 0x195
 801469a:	4630      	mov	r0, r6
 801469c:	f010 fffc 	bl	8025698 <mg_http_reply>
 80146a0:	e678      	b.n	8014394 <handle_manage_user+0x168>
 80146a2:	bf00      	nop
 80146a4:	08038860 	.word	0x08038860
 80146a8:	08038090 	.word	0x08038090
 80146ac:	20002360 	.word	0x20002360
 80146b0:	08037b70 	.word	0x08037b70
 80146b4:	08038ea4 	.word	0x08038ea4
 80146b8:	08038ee8 	.word	0x08038ee8
 80146bc:	08038f64 	.word	0x08038f64
 80146c0:	08038fa4 	.word	0x08038fa4
 80146c4:	08039038 	.word	0x08039038

080146c8 <load_users>:
static bool load_users(const char *file_path, users_list_t * users, size_t count){
 80146c8:	b570      	push	{r4, r5, r6, lr}
 80146ca:	460e      	mov	r6, r1
 80146cc:	4614      	mov	r4, r2
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_READ);
 80146ce:	2201      	movs	r2, #1
 80146d0:	4601      	mov	r1, r0
 80146d2:	480e      	ldr	r0, [pc, #56]	@ (801470c <load_users+0x44>)
 80146d4:	f00f fd38 	bl	8024148 <mg_fs_open>
	if (!fd) {
 80146d8:	b188      	cbz	r0, 80146fe <load_users+0x36>
 80146da:	4605      	mov	r5, r0
	mg_fs_lfs.rd(fd->fd, users, sizeof(users_list_t) * count);
 80146dc:	4b0b      	ldr	r3, [pc, #44]	@ (801470c <load_users+0x44>)
 80146de:	691b      	ldr	r3, [r3, #16]
 80146e0:	22a9      	movs	r2, #169	@ 0xa9
 80146e2:	fb04 f202 	mul.w	r2, r4, r2
 80146e6:	4631      	mov	r1, r6
 80146e8:	6800      	ldr	r0, [r0, #0]
 80146ea:	4798      	blx	r3
	mg_fs_close(fd);
 80146ec:	4628      	mov	r0, r5
 80146ee:	f00f fd44 	bl	802417a <mg_fs_close>
	logging(L_INFO, "Loaded web users from file");
 80146f2:	4907      	ldr	r1, [pc, #28]	@ (8014710 <load_users+0x48>)
 80146f4:	2001      	movs	r0, #1
 80146f6:	f7fd fea7 	bl	8012448 <logging>
	return true;
 80146fa:	2001      	movs	r0, #1
}
 80146fc:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Can't open file with users");
 80146fe:	4905      	ldr	r1, [pc, #20]	@ (8014714 <load_users+0x4c>)
 8014700:	2003      	movs	r0, #3
 8014702:	f7fd fea1 	bl	8012448 <logging>
		return false;
 8014706:	2000      	movs	r0, #0
 8014708:	e7f8      	b.n	80146fc <load_users+0x34>
 801470a:	bf00      	nop
 801470c:	200000a0 	.word	0x200000a0
 8014710:	080390b4 	.word	0x080390b4
 8014714:	08039098 	.word	0x08039098

08014718 <handle_restart_mcu>:
static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 8014718:	b570      	push	{r4, r5, r6, lr}
 801471a:	b086      	sub	sp, #24
 801471c:	4605      	mov	r5, r0
 801471e:	460c      	mov	r4, r1
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 8014720:	ae04      	add	r6, sp, #16
 8014722:	4915      	ldr	r1, [pc, #84]	@ (8014778 <handle_restart_mcu+0x60>)
 8014724:	4630      	mov	r0, r6
 8014726:	f011 f941 	bl	80259ac <mg_str_s>
 801472a:	2300      	movs	r3, #0
 801472c:	9300      	str	r3, [sp, #0]
 801472e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014732:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014736:	f011 fb61 	bl	8025dfc <mg_match>
 801473a:	b1a0      	cbz	r0, 8014766 <handle_restart_mcu+0x4e>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 801473c:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
		mg_timer_add(param->mgr, 2000 /* 2 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 801473e:	6818      	ldr	r0, [r3, #0]
 8014740:	2300      	movs	r3, #0
 8014742:	9302      	str	r3, [sp, #8]
 8014744:	4b0d      	ldr	r3, [pc, #52]	@ (801477c <handle_restart_mcu+0x64>)
 8014746:	9301      	str	r3, [sp, #4]
 8014748:	2301      	movs	r3, #1
 801474a:	9300      	str	r3, [sp, #0]
 801474c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8014750:	2300      	movs	r3, #0
 8014752:	f012 fb23 	bl	8026d9c <mg_timer_add>
		mg_http_reply(c, 200, headers, //TODO delete for release,
 8014756:	4b0a      	ldr	r3, [pc, #40]	@ (8014780 <handle_restart_mcu+0x68>)
 8014758:	4a0a      	ldr	r2, [pc, #40]	@ (8014784 <handle_restart_mcu+0x6c>)
 801475a:	21c8      	movs	r1, #200	@ 0xc8
 801475c:	4628      	mov	r0, r5
 801475e:	f010 ff9b 	bl	8025698 <mg_http_reply>
}
 8014762:	b006      	add	sp, #24
 8014764:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8014766:	4b08      	ldr	r3, [pc, #32]	@ (8014788 <handle_restart_mcu+0x70>)
 8014768:	4a06      	ldr	r2, [pc, #24]	@ (8014784 <handle_restart_mcu+0x6c>)
 801476a:	f240 1195 	movw	r1, #405	@ 0x195
 801476e:	4628      	mov	r0, r5
 8014770:	f010 ff92 	bl	8025698 <mg_http_reply>
}
 8014774:	e7f5      	b.n	8014762 <handle_restart_mcu+0x4a>
 8014776:	bf00      	nop
 8014778:	08038154 	.word	0x08038154
 801477c:	08017559 	.word	0x08017559
 8014780:	080390d0 	.word	0x080390d0
 8014784:	08038090 	.word	0x08038090
 8014788:	080381dc 	.word	0x080381dc

0801478c <handle_activete_and_reboot>:
static void handle_activete_and_reboot(struct mg_connection *c, struct mg_http_message *hm){
 801478c:	b570      	push	{r4, r5, r6, lr}
 801478e:	b084      	sub	sp, #16
 8014790:	4605      	mov	r5, r0
 8014792:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8014794:	ae02      	add	r6, sp, #8
 8014796:	4914      	ldr	r1, [pc, #80]	@ (80147e8 <handle_activete_and_reboot+0x5c>)
 8014798:	4630      	mov	r0, r6
 801479a:	f011 f907 	bl	80259ac <mg_str_s>
 801479e:	2300      	movs	r3, #0
 80147a0:	9300      	str	r3, [sp, #0]
 80147a2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80147a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80147aa:	f011 fb27 	bl	8025dfc <mg_match>
 80147ae:	b198      	cbz	r0, 80147d8 <handle_activete_and_reboot+0x4c>
		if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 80147b0:	4b0e      	ldr	r3, [pc, #56]	@ (80147ec <handle_activete_and_reboot+0x60>)
 80147b2:	69db      	ldr	r3, [r3, #28]
 80147b4:	490e      	ldr	r1, [pc, #56]	@ (80147f0 <handle_activete_and_reboot+0x64>)
 80147b6:	480f      	ldr	r0, [pc, #60]	@ (80147f4 <handle_activete_and_reboot+0x68>)
 80147b8:	4798      	blx	r3
 80147ba:	b128      	cbz	r0, 80147c8 <handle_activete_and_reboot+0x3c>
			handle_restart_mcu(c, hm);
 80147bc:	4621      	mov	r1, r4
 80147be:	4628      	mov	r0, r5
 80147c0:	f7ff ffaa 	bl	8014718 <handle_restart_mcu>
}
 80147c4:	b004      	add	sp, #16
 80147c6:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 500, headers, //TODO delete for release,
 80147c8:	4b0b      	ldr	r3, [pc, #44]	@ (80147f8 <handle_activete_and_reboot+0x6c>)
 80147ca:	4a0c      	ldr	r2, [pc, #48]	@ (80147fc <handle_activete_and_reboot+0x70>)
 80147cc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80147d0:	4628      	mov	r0, r5
 80147d2:	f010 ff61 	bl	8025698 <mg_http_reply>
 80147d6:	e7f5      	b.n	80147c4 <handle_activete_and_reboot+0x38>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80147d8:	4b09      	ldr	r3, [pc, #36]	@ (8014800 <handle_activete_and_reboot+0x74>)
 80147da:	4a08      	ldr	r2, [pc, #32]	@ (80147fc <handle_activete_and_reboot+0x70>)
 80147dc:	f240 1195 	movw	r1, #405	@ 0x195
 80147e0:	4628      	mov	r0, r5
 80147e2:	f010 ff59 	bl	8025698 <mg_http_reply>
}
 80147e6:	e7ed      	b.n	80147c4 <handle_activete_and_reboot+0x38>
 80147e8:	08038154 	.word	0x08038154
 80147ec:	200000a0 	.word	0x200000a0
 80147f0:	08037b28 	.word	0x08037b28
 80147f4:	08039108 	.word	0x08039108
 80147f8:	08039120 	.word	0x08039120
 80147fc:	08038090 	.word	0x08038090
 8014800:	080381dc 	.word	0x080381dc

08014804 <handler_dev_info>:

static void handler_dev_info(struct mg_connection *c, struct mg_http_message *hm){
 8014804:	b570      	push	{r4, r5, r6, lr}
 8014806:	b08c      	sub	sp, #48	@ 0x30
 8014808:	4605      	mov	r5, r0
 801480a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 801480c:	ae0a      	add	r6, sp, #40	@ 0x28
 801480e:	491c      	ldr	r1, [pc, #112]	@ (8014880 <handler_dev_info+0x7c>)
 8014810:	4630      	mov	r0, r6
 8014812:	f011 f8cb 	bl	80259ac <mg_str_s>
 8014816:	2300      	movs	r3, #0
 8014818:	9300      	str	r3, [sp, #0]
 801481a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801481e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014822:	f011 faeb 	bl	8025dfc <mg_match>
 8014826:	b310      	cbz	r0, 801486e <handler_dev_info+0x6a>
		float vbat = Read_VBAT();
 8014828:	f7fc fd0c 	bl	8011244 <Read_VBAT>
 801482c:	ee10 4a10 	vmov	r4, s0
		float vdd  = Read_VDD();
 8014830:	f7fc fcc2 	bl	80111b8 <Read_VDD>
 8014834:	ee10 0a10 	vmov	r0, s0
		mg_http_reply(c, 200, headers,
 8014838:	f7fb fe9e 	bl	8010578 <__aeabi_f2d>
 801483c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014840:	4620      	mov	r0, r4
 8014842:	f7fb fe99 	bl	8010578 <__aeabi_f2d>
 8014846:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801484a:	4b0e      	ldr	r3, [pc, #56]	@ (8014884 <handler_dev_info+0x80>)
 801484c:	9304      	str	r3, [sp, #16]
 801484e:	4b0e      	ldr	r3, [pc, #56]	@ (8014888 <handler_dev_info+0x84>)
 8014850:	9303      	str	r3, [sp, #12]
 8014852:	4b0e      	ldr	r3, [pc, #56]	@ (801488c <handler_dev_info+0x88>)
 8014854:	9302      	str	r3, [sp, #8]
 8014856:	4b0e      	ldr	r3, [pc, #56]	@ (8014890 <handler_dev_info+0x8c>)
 8014858:	9301      	str	r3, [sp, #4]
 801485a:	4b0e      	ldr	r3, [pc, #56]	@ (8014894 <handler_dev_info+0x90>)
 801485c:	9300      	str	r3, [sp, #0]
 801485e:	4b0e      	ldr	r3, [pc, #56]	@ (8014898 <handler_dev_info+0x94>)
 8014860:	4a0e      	ldr	r2, [pc, #56]	@ (801489c <handler_dev_info+0x98>)
 8014862:	21c8      	movs	r1, #200	@ 0xc8
 8014864:	4628      	mov	r0, r5
 8014866:	f010 ff17 	bl	8025698 <mg_http_reply>
	}else{
		mg_http_reply(c, 405, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
		return;
	}
}
 801486a:	b00c      	add	sp, #48	@ 0x30
 801486c:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801486e:	4b0c      	ldr	r3, [pc, #48]	@ (80148a0 <handler_dev_info+0x9c>)
 8014870:	4a0a      	ldr	r2, [pc, #40]	@ (801489c <handler_dev_info+0x98>)
 8014872:	f240 1195 	movw	r1, #405	@ 0x195
 8014876:	4628      	mov	r0, r5
 8014878:	f010 ff0e 	bl	8025698 <mg_http_reply>
		return;
 801487c:	e7f5      	b.n	801486a <handler_dev_info+0x66>
 801487e:	bf00      	nop
 8014880:	08038040 	.word	0x08038040
 8014884:	08039200 	.word	0x08039200
 8014888:	08039214 	.word	0x08039214
 801488c:	08039220 	.word	0x08039220
 8014890:	08038100 	.word	0x08038100
 8014894:	08037d10 	.word	0x08037d10
 8014898:	08039164 	.word	0x08039164
 801489c:	08038090 	.word	0x08038090
 80148a0:	08038104 	.word	0x08038104

080148a4 <handle_fs_mkdir>:
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 80148a4:	b570      	push	{r4, r5, r6, lr}
 80148a6:	b0c4      	sub	sp, #272	@ 0x110
 80148a8:	4606      	mov	r6, r0
 80148aa:	460c      	mov	r4, r1
  if (mg_match(hm->method, mg_str("POST"), NULL)){
 80148ac:	ad42      	add	r5, sp, #264	@ 0x108
 80148ae:	4920      	ldr	r1, [pc, #128]	@ (8014930 <handle_fs_mkdir+0x8c>)
 80148b0:	4628      	mov	r0, r5
 80148b2:	f011 f87b 	bl	80259ac <mg_str_s>
 80148b6:	2300      	movs	r3, #0
 80148b8:	9300      	str	r3, [sp, #0]
 80148ba:	e895 000c 	ldmia.w	r5, {r2, r3}
 80148be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80148c2:	f011 fa9b 	bl	8025dfc <mg_match>
 80148c6:	b350      	cbz	r0, 801491e <handle_fs_mkdir+0x7a>
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 80148c8:	237b      	movs	r3, #123	@ 0x7b
 80148ca:	aa23      	add	r2, sp, #140	@ 0x8c
 80148cc:	4919      	ldr	r1, [pc, #100]	@ (8014934 <handle_fs_mkdir+0x90>)
 80148ce:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 80148d2:	f011 ff58 	bl	8026786 <mg_http_get_var>
 80148d6:	2800      	cmp	r0, #0
 80148d8:	dd19      	ble.n	801490e <handle_fs_mkdir+0x6a>
		snprintf(path, sizeof(path), "/web/%s", name);
 80148da:	ab23      	add	r3, sp, #140	@ 0x8c
 80148dc:	4a16      	ldr	r2, [pc, #88]	@ (8014938 <handle_fs_mkdir+0x94>)
 80148de:	2180      	movs	r1, #128	@ 0x80
 80148e0:	a803      	add	r0, sp, #12
 80148e2:	f017 fd63 	bl	802c3ac <snprintf>
		if (mg_fs_lfs.mkd(path)) {
 80148e6:	4b15      	ldr	r3, [pc, #84]	@ (801493c <handle_fs_mkdir+0x98>)
 80148e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148ea:	a803      	add	r0, sp, #12
 80148ec:	4798      	blx	r3
 80148ee:	b130      	cbz	r0, 80148fe <handle_fs_mkdir+0x5a>
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 80148f0:	4b13      	ldr	r3, [pc, #76]	@ (8014940 <handle_fs_mkdir+0x9c>)
 80148f2:	4a14      	ldr	r2, [pc, #80]	@ (8014944 <handle_fs_mkdir+0xa0>)
 80148f4:	21c8      	movs	r1, #200	@ 0xc8
 80148f6:	4630      	mov	r0, r6
 80148f8:	f010 fece 	bl	8025698 <mg_http_reply>
 80148fc:	e016      	b.n	801492c <handle_fs_mkdir+0x88>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 80148fe:	4b12      	ldr	r3, [pc, #72]	@ (8014948 <handle_fs_mkdir+0xa4>)
 8014900:	4a10      	ldr	r2, [pc, #64]	@ (8014944 <handle_fs_mkdir+0xa0>)
 8014902:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8014906:	4630      	mov	r0, r6
 8014908:	f010 fec6 	bl	8025698 <mg_http_reply>
 801490c:	e00e      	b.n	801492c <handle_fs_mkdir+0x88>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 801490e:	4b0f      	ldr	r3, [pc, #60]	@ (801494c <handle_fs_mkdir+0xa8>)
 8014910:	4a0c      	ldr	r2, [pc, #48]	@ (8014944 <handle_fs_mkdir+0xa0>)
 8014912:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014916:	4630      	mov	r0, r6
 8014918:	f010 febe 	bl	8025698 <mg_http_reply>
 801491c:	e006      	b.n	801492c <handle_fs_mkdir+0x88>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801491e:	4b0c      	ldr	r3, [pc, #48]	@ (8014950 <handle_fs_mkdir+0xac>)
 8014920:	4a08      	ldr	r2, [pc, #32]	@ (8014944 <handle_fs_mkdir+0xa0>)
 8014922:	f240 1195 	movw	r1, #405	@ 0x195
 8014926:	4630      	mov	r0, r6
 8014928:	f010 feb6 	bl	8025698 <mg_http_reply>
}
 801492c:	b044      	add	sp, #272	@ 0x110
 801492e:	bd70      	pop	{r4, r5, r6, pc}
 8014930:	08038154 	.word	0x08038154
 8014934:	08039228 	.word	0x08039228
 8014938:	08039230 	.word	0x08039230
 801493c:	200000a0 	.word	0x200000a0
 8014940:	08039238 	.word	0x08039238
 8014944:	08038090 	.word	0x08038090
 8014948:	0803926c 	.word	0x0803926c
 801494c:	080392a8 	.word	0x080392a8
 8014950:	080381dc 	.word	0x080381dc

08014954 <handle_firmware_upload>:
static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 8014954:	b570      	push	{r4, r5, r6, lr}
 8014956:	b0a4      	sub	sp, #144	@ 0x90
 8014958:	4605      	mov	r5, r0
 801495a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 801495c:	ae22      	add	r6, sp, #136	@ 0x88
 801495e:	491c      	ldr	r1, [pc, #112]	@ (80149d0 <handle_firmware_upload+0x7c>)
 8014960:	4630      	mov	r0, r6
 8014962:	f011 f823 	bl	80259ac <mg_str_s>
 8014966:	2300      	movs	r3, #0
 8014968:	9300      	str	r3, [sp, #0]
 801496a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801496e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014972:	f011 fa43 	bl	8025dfc <mg_match>
 8014976:	b308      	cbz	r0, 80149bc <handle_firmware_upload+0x68>
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8014978:	2380      	movs	r3, #128	@ 0x80
 801497a:	aa02      	add	r2, sp, #8
 801497c:	4915      	ldr	r1, [pc, #84]	@ (80149d4 <handle_firmware_upload+0x80>)
 801497e:	f104 0010 	add.w	r0, r4, #16
 8014982:	f011 ff00 	bl	8026786 <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 8014986:	4914      	ldr	r1, [pc, #80]	@ (80149d8 <handle_firmware_upload+0x84>)
 8014988:	a802      	add	r0, sp, #8
 801498a:	f7fb fc29 	bl	80101e0 <strcmp>
 801498e:	b958      	cbnz	r0, 80149a8 <handle_firmware_upload+0x54>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 8014990:	4b12      	ldr	r3, [pc, #72]	@ (80149dc <handle_firmware_upload+0x88>)
 8014992:	9300      	str	r3, [sp, #0]
 8014994:	4b12      	ldr	r3, [pc, #72]	@ (80149e0 <handle_firmware_upload+0x8c>)
 8014996:	4a13      	ldr	r2, [pc, #76]	@ (80149e4 <handle_firmware_upload+0x90>)
 8014998:	4621      	mov	r1, r4
 801499a:	4628      	mov	r0, r5
 801499c:	f013 fcce 	bl	802833c <mg_http_upload>
			vTaskDelay(1);
 80149a0:	2001      	movs	r0, #1
 80149a2:	f006 fc9f 	bl	801b2e4 <vTaskDelay>
 80149a6:	e010      	b.n	80149ca <handle_firmware_upload+0x76>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 80149a8:	4b0b      	ldr	r3, [pc, #44]	@ (80149d8 <handle_firmware_upload+0x84>)
 80149aa:	9300      	str	r3, [sp, #0]
 80149ac:	4b0e      	ldr	r3, [pc, #56]	@ (80149e8 <handle_firmware_upload+0x94>)
 80149ae:	4a0f      	ldr	r2, [pc, #60]	@ (80149ec <handle_firmware_upload+0x98>)
 80149b0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80149b4:	4628      	mov	r0, r5
 80149b6:	f010 fe6f 	bl	8025698 <mg_http_reply>
 80149ba:	e006      	b.n	80149ca <handle_firmware_upload+0x76>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80149bc:	4b0c      	ldr	r3, [pc, #48]	@ (80149f0 <handle_firmware_upload+0x9c>)
 80149be:	4a0b      	ldr	r2, [pc, #44]	@ (80149ec <handle_firmware_upload+0x98>)
 80149c0:	f240 1195 	movw	r1, #405	@ 0x195
 80149c4:	4628      	mov	r0, r5
 80149c6:	f010 fe67 	bl	8025698 <mg_http_reply>
}
 80149ca:	b024      	add	sp, #144	@ 0x90
 80149cc:	bd70      	pop	{r4, r5, r6, pc}
 80149ce:	bf00      	nop
 80149d0:	08038154 	.word	0x08038154
 80149d4:	0803be08 	.word	0x0803be08
 80149d8:	080392e4 	.word	0x080392e4
 80149dc:	0003d090 	.word	0x0003d090
 80149e0:	08037b1c 	.word	0x08037b1c
 80149e4:	200000a0 	.word	0x200000a0
 80149e8:	080392f4 	.word	0x080392f4
 80149ec:	08038090 	.word	0x08038090
 80149f0:	080381dc 	.word	0x080381dc

080149f4 <calc_file_md5sum>:
static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 80149f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149f6:	b097      	sub	sp, #92	@ 0x5c
 80149f8:	4604      	mov	r4, r0
 80149fa:	460e      	mov	r6, r1
	char * buff = calloc(buff_len, 1);
 80149fc:	2101      	movs	r1, #1
 80149fe:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8014a02:	f7ff f831 	bl	8013a68 <mg_calloc>
	if (buff == NULL){
 8014a06:	4605      	mov	r5, r0
 8014a08:	b150      	cbz	r0, 8014a20 <calc_file_md5sum+0x2c>
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 8014a0a:	2201      	movs	r2, #1
 8014a0c:	4621      	mov	r1, r4
 8014a0e:	4828      	ldr	r0, [pc, #160]	@ (8014ab0 <calc_file_md5sum+0xbc>)
 8014a10:	f00f fb9a 	bl	8024148 <mg_fs_open>
	if (fd==NULL){
 8014a14:	4604      	mov	r4, r0
 8014a16:	b140      	cbz	r0, 8014a2a <calc_file_md5sum+0x36>
	mg_md5_init(&md5_ctx);
 8014a18:	4668      	mov	r0, sp
 8014a1a:	f00f ffa9 	bl	8024970 <mg_md5_init>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8014a1e:	e010      	b.n	8014a42 <calc_file_md5sum+0x4e>
		free(buff);
 8014a20:	f007 fb7c 	bl	801c11c <vPortFree>
		return -1;
 8014a24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014a28:	e040      	b.n	8014aac <calc_file_md5sum+0xb8>
		mg_fs_close(fd);
 8014a2a:	f00f fba6 	bl	802417a <mg_fs_close>
		free(buff);
 8014a2e:	4628      	mov	r0, r5
 8014a30:	f007 fb74 	bl	801c11c <vPortFree>
		return -2;
 8014a34:	f06f 0001 	mvn.w	r0, #1
 8014a38:	e038      	b.n	8014aac <calc_file_md5sum+0xb8>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 8014a3a:	4629      	mov	r1, r5
 8014a3c:	4668      	mov	r0, sp
 8014a3e:	f00f ffad 	bl	802499c <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8014a42:	4b1b      	ldr	r3, [pc, #108]	@ (8014ab0 <calc_file_md5sum+0xbc>)
 8014a44:	691b      	ldr	r3, [r3, #16]
 8014a46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8014a4a:	4629      	mov	r1, r5
 8014a4c:	6820      	ldr	r0, [r4, #0]
 8014a4e:	4798      	blx	r3
 8014a50:	4602      	mov	r2, r0
 8014a52:	2800      	cmp	r0, #0
 8014a54:	d1f1      	bne.n	8014a3a <calc_file_md5sum+0x46>
	mg_fs_close(fd);
 8014a56:	4620      	mov	r0, r4
 8014a58:	f00f fb8f 	bl	802417a <mg_fs_close>
	uint8_t * digest = calloc(digest_len, 1);
 8014a5c:	2101      	movs	r1, #1
 8014a5e:	2010      	movs	r0, #16
 8014a60:	f7ff f802 	bl	8013a68 <mg_calloc>
	if (digest == NULL){
 8014a64:	4607      	mov	r7, r0
 8014a66:	b128      	cbz	r0, 8014a74 <calc_file_md5sum+0x80>
	mg_md5_final(&md5_ctx, digest);
 8014a68:	4601      	mov	r1, r0
 8014a6a:	4668      	mov	r0, sp
 8014a6c:	f00f ffed 	bl	8024a4a <mg_md5_final>
	for (int i = 0; i < 16; ++i) {
 8014a70:	2400      	movs	r4, #0
 8014a72:	e012      	b.n	8014a9a <calc_file_md5sum+0xa6>
		free(buff);
 8014a74:	4628      	mov	r0, r5
 8014a76:	f007 fb51 	bl	801c11c <vPortFree>
		free(digest);
 8014a7a:	4638      	mov	r0, r7
 8014a7c:	f007 fb4e 	bl	801c11c <vPortFree>
		return -1;
 8014a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014a84:	e012      	b.n	8014aac <calc_file_md5sum+0xb8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 8014a86:	0061      	lsls	r1, r4, #1
 8014a88:	5d3b      	ldrb	r3, [r7, r4]
 8014a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8014ab4 <calc_file_md5sum+0xc0>)
 8014a8c:	f1c1 0121 	rsb	r1, r1, #33	@ 0x21
 8014a90:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 8014a94:	f017 fc8a 	bl	802c3ac <snprintf>
	for (int i = 0; i < 16; ++i) {
 8014a98:	3401      	adds	r4, #1
 8014a9a:	2c0f      	cmp	r4, #15
 8014a9c:	ddf3      	ble.n	8014a86 <calc_file_md5sum+0x92>
	free(buff);
 8014a9e:	4628      	mov	r0, r5
 8014aa0:	f007 fb3c 	bl	801c11c <vPortFree>
	free(digest);
 8014aa4:	4638      	mov	r0, r7
 8014aa6:	f007 fb39 	bl	801c11c <vPortFree>
	return 0;
 8014aaa:	2000      	movs	r0, #0
}
 8014aac:	b017      	add	sp, #92	@ 0x5c
 8014aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ab0:	200000a0 	.word	0x200000a0
 8014ab4:	08039340 	.word	0x08039340

08014ab8 <handle_firmware_md5>:
static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 8014ab8:	b570      	push	{r4, r5, r6, lr}
 8014aba:	b084      	sub	sp, #16
 8014abc:	4605      	mov	r5, r0
 8014abe:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8014ac0:	ae02      	add	r6, sp, #8
 8014ac2:	4919      	ldr	r1, [pc, #100]	@ (8014b28 <handle_firmware_md5+0x70>)
 8014ac4:	4630      	mov	r0, r6
 8014ac6:	f010 ff71 	bl	80259ac <mg_str_s>
 8014aca:	2300      	movs	r3, #0
 8014acc:	9300      	str	r3, [sp, #0]
 8014ace:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014ad2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014ad6:	f011 f991 	bl	8025dfc <mg_match>
 8014ada:	b1e8      	cbz	r0, 8014b18 <handle_firmware_md5+0x60>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 8014adc:	2101      	movs	r1, #1
 8014ade:	2021      	movs	r0, #33	@ 0x21
 8014ae0:	f7fe ffc2 	bl	8013a68 <mg_calloc>
 8014ae4:	4604      	mov	r4, r0
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 8014ae6:	4601      	mov	r1, r0
 8014ae8:	4810      	ldr	r0, [pc, #64]	@ (8014b2c <handle_firmware_md5+0x74>)
 8014aea:	f7ff ff83 	bl	80149f4 <calc_file_md5sum>
 8014aee:	b958      	cbnz	r0, 8014b08 <handle_firmware_md5+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8014af0:	9400      	str	r4, [sp, #0]
 8014af2:	4b0f      	ldr	r3, [pc, #60]	@ (8014b30 <handle_firmware_md5+0x78>)
 8014af4:	4a0f      	ldr	r2, [pc, #60]	@ (8014b34 <handle_firmware_md5+0x7c>)
 8014af6:	21c8      	movs	r1, #200	@ 0xc8
 8014af8:	4628      	mov	r0, r5
 8014afa:	f010 fdcd 	bl	8025698 <mg_http_reply>
		free(md5_str);
 8014afe:	4620      	mov	r0, r4
 8014b00:	f007 fb0c 	bl	801c11c <vPortFree>
}
 8014b04:	b004      	add	sp, #16
 8014b06:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 404, headers, //TODO delete for release,
 8014b08:	4b0b      	ldr	r3, [pc, #44]	@ (8014b38 <handle_firmware_md5+0x80>)
 8014b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8014b34 <handle_firmware_md5+0x7c>)
 8014b0c:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8014b10:	4628      	mov	r0, r5
 8014b12:	f010 fdc1 	bl	8025698 <mg_http_reply>
 8014b16:	e7f2      	b.n	8014afe <handle_firmware_md5+0x46>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8014b18:	4b08      	ldr	r3, [pc, #32]	@ (8014b3c <handle_firmware_md5+0x84>)
 8014b1a:	4a06      	ldr	r2, [pc, #24]	@ (8014b34 <handle_firmware_md5+0x7c>)
 8014b1c:	f240 1195 	movw	r1, #405	@ 0x195
 8014b20:	4628      	mov	r0, r5
 8014b22:	f010 fdb9 	bl	8025698 <mg_http_reply>
}
 8014b26:	e7ed      	b.n	8014b04 <handle_firmware_md5+0x4c>
 8014b28:	08038040 	.word	0x08038040
 8014b2c:	08039108 	.word	0x08039108
 8014b30:	08039348 	.word	0x08039348
 8014b34:	08038090 	.word	0x08038090
 8014b38:	0803936c 	.word	0x0803936c
 8014b3c:	08038104 	.word	0x08038104

08014b40 <dashboard>:

static void dashboard(struct mg_connection *c, int ev, void *ev_data) {

	if (ev == MG_EV_HTTP_MSG) {
 8014b40:	290b      	cmp	r1, #11
 8014b42:	d000      	beq.n	8014b46 <dashboard+0x6>
 8014b44:	4770      	bx	lr
static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 8014b46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b48:	b0b5      	sub	sp, #212	@ 0xd4
 8014b4a:	4605      	mov	r5, r0
 8014b4c:	4614      	mov	r4, r2
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;

    bool authenticate = auth(c, hm, 0); //Check authentication status
 8014b4e:	2200      	movs	r2, #0
 8014b50:	4621      	mov	r1, r4
 8014b52:	f7fe fdb9 	bl	80136c8 <auth>
 8014b56:	4607      	mov	r7, r0

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 8014b58:	ae08      	add	r6, sp, #32
 8014b5a:	49af      	ldr	r1, [pc, #700]	@ (8014e18 <dashboard+0x2d8>)
 8014b5c:	4630      	mov	r0, r6
 8014b5e:	f010 ff25 	bl	80259ac <mg_str_s>
 8014b62:	2300      	movs	r3, #0
 8014b64:	9300      	str	r3, [sp, #0]
 8014b66:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014b6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014b6e:	f011 f945 	bl	8025dfc <mg_match>
 8014b72:	b120      	cbz	r0, 8014b7e <dashboard+0x3e>
            	handle_OPTIONS_method(c);
 8014b74:	4628      	mov	r0, r5
 8014b76:	f7fe fc39 	bl	80133ec <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 8014b7a:	b035      	add	sp, #212	@ 0xd4
 8014b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        }else if (mg_match(hm->uri, mg_str("/api/#"), NULL) && !authenticate ) { // All requests to /api should be authenticated
 8014b7e:	ae0a      	add	r6, sp, #40	@ 0x28
 8014b80:	49a6      	ldr	r1, [pc, #664]	@ (8014e1c <dashboard+0x2dc>)
 8014b82:	4630      	mov	r0, r6
 8014b84:	f010 ff12 	bl	80259ac <mg_str_s>
 8014b88:	2300      	movs	r3, #0
 8014b8a:	9300      	str	r3, [sp, #0]
 8014b8c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014b90:	f104 0108 	add.w	r1, r4, #8
 8014b94:	c903      	ldmia	r1, {r0, r1}
 8014b96:	f011 f931 	bl	8025dfc <mg_match>
 8014b9a:	b100      	cbz	r0, 8014b9e <dashboard+0x5e>
 8014b9c:	b1bf      	cbz	r7, 8014bce <dashboard+0x8e>
		}else if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 8014b9e:	ae0c      	add	r6, sp, #48	@ 0x30
 8014ba0:	499f      	ldr	r1, [pc, #636]	@ (8014e20 <dashboard+0x2e0>)
 8014ba2:	4630      	mov	r0, r6
 8014ba4:	f010 ff02 	bl	80259ac <mg_str_s>
 8014ba8:	2300      	movs	r3, #0
 8014baa:	9300      	str	r3, [sp, #0]
 8014bac:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014bb0:	f104 0108 	add.w	r1, r4, #8
 8014bb4:	c903      	ldmia	r1, {r0, r1}
 8014bb6:	f011 f921 	bl	8025dfc <mg_match>
 8014bba:	b180      	cbz	r0, 8014bde <dashboard+0x9e>
			logging(L_INFO, "Call API /api/login");
 8014bbc:	4999      	ldr	r1, [pc, #612]	@ (8014e24 <dashboard+0x2e4>)
 8014bbe:	2001      	movs	r0, #1
 8014bc0:	f7fd fc42 	bl	8012448 <logging>
        	 handler_authanticate(c,hm);
 8014bc4:	4621      	mov	r1, r4
 8014bc6:	4628      	mov	r0, r5
 8014bc8:	f7fe fe68 	bl	801389c <handler_authanticate>
 8014bcc:	e7d5      	b.n	8014b7a <dashboard+0x3a>
        	mg_http_reply(c, 403, "", "Not Authorised\n");
 8014bce:	4b96      	ldr	r3, [pc, #600]	@ (8014e28 <dashboard+0x2e8>)
 8014bd0:	4a96      	ldr	r2, [pc, #600]	@ (8014e2c <dashboard+0x2ec>)
 8014bd2:	f240 1193 	movw	r1, #403	@ 0x193
 8014bd6:	4628      	mov	r0, r5
 8014bd8:	f010 fd5e 	bl	8025698 <mg_http_reply>
 8014bdc:	e7cd      	b.n	8014b7a <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 8014bde:	ae0e      	add	r6, sp, #56	@ 0x38
 8014be0:	4993      	ldr	r1, [pc, #588]	@ (8014e30 <dashboard+0x2f0>)
 8014be2:	4630      	mov	r0, r6
 8014be4:	f010 fee2 	bl	80259ac <mg_str_s>
 8014be8:	2300      	movs	r3, #0
 8014bea:	9300      	str	r3, [sp, #0]
 8014bec:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014bf0:	f104 0108 	add.w	r1, r4, #8
 8014bf4:	c903      	ldmia	r1, {r0, r1}
 8014bf6:	f011 f901 	bl	8025dfc <mg_match>
 8014bfa:	b140      	cbz	r0, 8014c0e <dashboard+0xce>
			logging(L_INFO, "Call API /api/logout");
 8014bfc:	498d      	ldr	r1, [pc, #564]	@ (8014e34 <dashboard+0x2f4>)
 8014bfe:	2001      	movs	r0, #1
 8014c00:	f7fd fc22 	bl	8012448 <logging>
			handler_logout(c,hm);
 8014c04:	4621      	mov	r1, r4
 8014c06:	4628      	mov	r0, r5
 8014c08:	f7fe fca8 	bl	801355c <handler_logout>
 8014c0c:	e7b5      	b.n	8014b7a <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 8014c0e:	ae10      	add	r6, sp, #64	@ 0x40
 8014c10:	4989      	ldr	r1, [pc, #548]	@ (8014e38 <dashboard+0x2f8>)
 8014c12:	4630      	mov	r0, r6
 8014c14:	f010 feca 	bl	80259ac <mg_str_s>
 8014c18:	2300      	movs	r3, #0
 8014c1a:	9300      	str	r3, [sp, #0]
 8014c1c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014c20:	f104 0108 	add.w	r1, r4, #8
 8014c24:	c903      	ldmia	r1, {r0, r1}
 8014c26:	f011 f8e9 	bl	8025dfc <mg_match>
 8014c2a:	b138      	cbz	r0, 8014c3c <dashboard+0xfc>
			logging(L_INFO, "Call API /api/ram/status");
 8014c2c:	4983      	ldr	r1, [pc, #524]	@ (8014e3c <dashboard+0x2fc>)
 8014c2e:	2001      	movs	r0, #1
 8014c30:	f7fd fc0a 	bl	8012448 <logging>
			handle_ram_status_get(c);
 8014c34:	4628      	mov	r0, r5
 8014c36:	f7fe fe45 	bl	80138c4 <handle_ram_status_get>
 8014c3a:	e79e      	b.n	8014b7a <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 8014c3c:	ae12      	add	r6, sp, #72	@ 0x48
 8014c3e:	4980      	ldr	r1, [pc, #512]	@ (8014e40 <dashboard+0x300>)
 8014c40:	4630      	mov	r0, r6
 8014c42:	f010 feb3 	bl	80259ac <mg_str_s>
 8014c46:	2300      	movs	r3, #0
 8014c48:	9300      	str	r3, [sp, #0]
 8014c4a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014c4e:	f104 0108 	add.w	r1, r4, #8
 8014c52:	c903      	ldmia	r1, {r0, r1}
 8014c54:	f011 f8d2 	bl	8025dfc <mg_match>
 8014c58:	b140      	cbz	r0, 8014c6c <dashboard+0x12c>
			logging(L_INFO, "Call API /api/io/status");
 8014c5a:	497a      	ldr	r1, [pc, #488]	@ (8014e44 <dashboard+0x304>)
 8014c5c:	2001      	movs	r0, #1
 8014c5e:	f7fd fbf3 	bl	8012448 <logging>
			handle_io_status_get(c, hm);
 8014c62:	4621      	mov	r1, r4
 8014c64:	4628      	mov	r0, r5
 8014c66:	f7fe fe4d 	bl	8013904 <handle_io_status_get>
 8014c6a:	e786      	b.n	8014b7a <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 8014c6c:	ae14      	add	r6, sp, #80	@ 0x50
 8014c6e:	4976      	ldr	r1, [pc, #472]	@ (8014e48 <dashboard+0x308>)
 8014c70:	4630      	mov	r0, r6
 8014c72:	f010 fe9b 	bl	80259ac <mg_str_s>
 8014c76:	2300      	movs	r3, #0
 8014c78:	9300      	str	r3, [sp, #0]
 8014c7a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014c7e:	f104 0108 	add.w	r1, r4, #8
 8014c82:	c903      	ldmia	r1, {r0, r1}
 8014c84:	f011 f8ba 	bl	8025dfc <mg_match>
 8014c88:	b140      	cbz	r0, 8014c9c <dashboard+0x15c>
			logging(L_INFO, "Call API /api/mqtt/settings");
 8014c8a:	4970      	ldr	r1, [pc, #448]	@ (8014e4c <dashboard+0x30c>)
 8014c8c:	2001      	movs	r0, #1
 8014c8e:	f7fd fbdb 	bl	8012448 <logging>
			handle_mqtt_conf(c, hm);
 8014c92:	4621      	mov	r1, r4
 8014c94:	4628      	mov	r0, r5
 8014c96:	f7fe fef5 	bl	8013a84 <handle_mqtt_conf>
 8014c9a:	e76e      	b.n	8014b7a <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/modbus/acl"), NULL)){
 8014c9c:	ae16      	add	r6, sp, #88	@ 0x58
 8014c9e:	496c      	ldr	r1, [pc, #432]	@ (8014e50 <dashboard+0x310>)
 8014ca0:	4630      	mov	r0, r6
 8014ca2:	f010 fe83 	bl	80259ac <mg_str_s>
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	9300      	str	r3, [sp, #0]
 8014caa:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014cae:	f104 0108 	add.w	r1, r4, #8
 8014cb2:	c903      	ldmia	r1, {r0, r1}
 8014cb4:	f011 f8a2 	bl	8025dfc <mg_match>
 8014cb8:	b140      	cbz	r0, 8014ccc <dashboard+0x18c>
			logging(L_INFO, "Call API /api/modbus/acl");
 8014cba:	4966      	ldr	r1, [pc, #408]	@ (8014e54 <dashboard+0x314>)
 8014cbc:	2001      	movs	r0, #1
 8014cbe:	f7fd fbc3 	bl	8012448 <logging>
			handle_mb_tcp_access_list(c, hm);
 8014cc2:	4621      	mov	r1, r4
 8014cc4:	4628      	mov	r0, r5
 8014cc6:	f7ff f815 	bl	8013cf4 <handle_mb_tcp_access_list>
 8014cca:	e756      	b.n	8014b7a <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 8014ccc:	ae18      	add	r6, sp, #96	@ 0x60
 8014cce:	4962      	ldr	r1, [pc, #392]	@ (8014e58 <dashboard+0x318>)
 8014cd0:	4630      	mov	r0, r6
 8014cd2:	f010 fe6b 	bl	80259ac <mg_str_s>
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	9300      	str	r3, [sp, #0]
 8014cda:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014cde:	f104 0108 	add.w	r1, r4, #8
 8014ce2:	c903      	ldmia	r1, {r0, r1}
 8014ce4:	f011 f88a 	bl	8025dfc <mg_match>
 8014ce8:	b140      	cbz	r0, 8014cfc <dashboard+0x1bc>
			logging(L_INFO, "Call API /api/device/status");
 8014cea:	495c      	ldr	r1, [pc, #368]	@ (8014e5c <dashboard+0x31c>)
 8014cec:	2001      	movs	r0, #1
 8014cee:	f7fd fbab 	bl	8012448 <logging>
			handle_dev_status(c, hm);
 8014cf2:	4621      	mov	r1, r4
 8014cf4:	4628      	mov	r0, r5
 8014cf6:	f7ff f8dd 	bl	8013eb4 <handle_dev_status>
 8014cfa:	e73e      	b.n	8014b7a <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log"), NULL)){
 8014cfc:	ae1a      	add	r6, sp, #104	@ 0x68
 8014cfe:	4958      	ldr	r1, [pc, #352]	@ (8014e60 <dashboard+0x320>)
 8014d00:	4630      	mov	r0, r6
 8014d02:	f010 fe53 	bl	80259ac <mg_str_s>
 8014d06:	2300      	movs	r3, #0
 8014d08:	9300      	str	r3, [sp, #0]
 8014d0a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014d0e:	68e1      	ldr	r1, [r4, #12]
 8014d10:	68a0      	ldr	r0, [r4, #8]
 8014d12:	f011 f873 	bl	8025dfc <mg_match>
 8014d16:	b148      	cbz	r0, 8014d2c <dashboard+0x1ec>
			logging(L_INFO, "Call API /api/device/log");
 8014d18:	4952      	ldr	r1, [pc, #328]	@ (8014e64 <dashboard+0x324>)
 8014d1a:	2001      	movs	r0, #1
 8014d1c:	f7fd fb94 	bl	8012448 <logging>
			handle_fs_get_log(c, hm, 0);
 8014d20:	2200      	movs	r2, #0
 8014d22:	4621      	mov	r1, r4
 8014d24:	4628      	mov	r0, r5
 8014d26:	f7ff fa03 	bl	8014130 <handle_fs_get_log>
 8014d2a:	e726      	b.n	8014b7a <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log_old"), NULL)){
 8014d2c:	ae1c      	add	r6, sp, #112	@ 0x70
 8014d2e:	494e      	ldr	r1, [pc, #312]	@ (8014e68 <dashboard+0x328>)
 8014d30:	4630      	mov	r0, r6
 8014d32:	f010 fe3b 	bl	80259ac <mg_str_s>
 8014d36:	2300      	movs	r3, #0
 8014d38:	9300      	str	r3, [sp, #0]
 8014d3a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014d3e:	68e1      	ldr	r1, [r4, #12]
 8014d40:	68a0      	ldr	r0, [r4, #8]
 8014d42:	f011 f85b 	bl	8025dfc <mg_match>
 8014d46:	b148      	cbz	r0, 8014d5c <dashboard+0x21c>
			logging(L_INFO, "Call API /api/device/log_old");
 8014d48:	4948      	ldr	r1, [pc, #288]	@ (8014e6c <dashboard+0x32c>)
 8014d4a:	2001      	movs	r0, #1
 8014d4c:	f7fd fb7c 	bl	8012448 <logging>
			handle_fs_get_log(c, hm, 1);
 8014d50:	2201      	movs	r2, #1
 8014d52:	4621      	mov	r1, r4
 8014d54:	4628      	mov	r0, r5
 8014d56:	f7ff f9eb 	bl	8014130 <handle_fs_get_log>
 8014d5a:	e70e      	b.n	8014b7a <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/user"), NULL)){
 8014d5c:	ae1e      	add	r6, sp, #120	@ 0x78
 8014d5e:	4944      	ldr	r1, [pc, #272]	@ (8014e70 <dashboard+0x330>)
 8014d60:	4630      	mov	r0, r6
 8014d62:	f010 fe23 	bl	80259ac <mg_str_s>
 8014d66:	2300      	movs	r3, #0
 8014d68:	9300      	str	r3, [sp, #0]
 8014d6a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014d6e:	68e1      	ldr	r1, [r4, #12]
 8014d70:	68a0      	ldr	r0, [r4, #8]
 8014d72:	f011 f843 	bl	8025dfc <mg_match>
 8014d76:	b140      	cbz	r0, 8014d8a <dashboard+0x24a>
			logging(L_INFO, "Call API /api/device/user");
 8014d78:	493e      	ldr	r1, [pc, #248]	@ (8014e74 <dashboard+0x334>)
 8014d7a:	2001      	movs	r0, #1
 8014d7c:	f7fd fb64 	bl	8012448 <logging>
			handle_manage_user(c, hm);
 8014d80:	4621      	mov	r1, r4
 8014d82:	4628      	mov	r0, r5
 8014d84:	f7ff fa52 	bl	801422c <handle_manage_user>
 8014d88:	e6f7      	b.n	8014b7a <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 8014d8a:	ae20      	add	r6, sp, #128	@ 0x80
 8014d8c:	493a      	ldr	r1, [pc, #232]	@ (8014e78 <dashboard+0x338>)
 8014d8e:	4630      	mov	r0, r6
 8014d90:	f010 fe0c 	bl	80259ac <mg_str_s>
 8014d94:	2300      	movs	r3, #0
 8014d96:	9300      	str	r3, [sp, #0]
 8014d98:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014d9c:	68e1      	ldr	r1, [r4, #12]
 8014d9e:	68a0      	ldr	r0, [r4, #8]
 8014da0:	f011 f82c 	bl	8025dfc <mg_match>
 8014da4:	b140      	cbz	r0, 8014db8 <dashboard+0x278>
			logging(L_INFO, "Call API /api/device/restart");
 8014da6:	4935      	ldr	r1, [pc, #212]	@ (8014e7c <dashboard+0x33c>)
 8014da8:	2001      	movs	r0, #1
 8014daa:	f7fd fb4d 	bl	8012448 <logging>
			handle_restart_mcu(c, hm);
 8014dae:	4621      	mov	r1, r4
 8014db0:	4628      	mov	r0, r5
 8014db2:	f7ff fcb1 	bl	8014718 <handle_restart_mcu>
 8014db6:	e6e0      	b.n	8014b7a <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/version"), NULL)){
 8014db8:	ae22      	add	r6, sp, #136	@ 0x88
 8014dba:	4931      	ldr	r1, [pc, #196]	@ (8014e80 <dashboard+0x340>)
 8014dbc:	4630      	mov	r0, r6
 8014dbe:	f010 fdf5 	bl	80259ac <mg_str_s>
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	9300      	str	r3, [sp, #0]
 8014dc6:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014dca:	68e1      	ldr	r1, [r4, #12]
 8014dcc:	68a0      	ldr	r0, [r4, #8]
 8014dce:	f011 f815 	bl	8025dfc <mg_match>
 8014dd2:	b140      	cbz	r0, 8014de6 <dashboard+0x2a6>
			logging(L_INFO, "Call API /api/device/version");
 8014dd4:	492b      	ldr	r1, [pc, #172]	@ (8014e84 <dashboard+0x344>)
 8014dd6:	2001      	movs	r0, #1
 8014dd8:	f7fd fb36 	bl	8012448 <logging>
			handler_dev_version(c, hm);
 8014ddc:	4621      	mov	r1, r4
 8014dde:	4628      	mov	r0, r5
 8014de0:	f7fe fb10 	bl	8013404 <handler_dev_version>
 8014de4:	e6c9      	b.n	8014b7a <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/info"), NULL)){
 8014de6:	ae24      	add	r6, sp, #144	@ 0x90
 8014de8:	4927      	ldr	r1, [pc, #156]	@ (8014e88 <dashboard+0x348>)
 8014dea:	4630      	mov	r0, r6
 8014dec:	f010 fdde 	bl	80259ac <mg_str_s>
 8014df0:	2300      	movs	r3, #0
 8014df2:	9300      	str	r3, [sp, #0]
 8014df4:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014df8:	68e1      	ldr	r1, [r4, #12]
 8014dfa:	68a0      	ldr	r0, [r4, #8]
 8014dfc:	f010 fffe 	bl	8025dfc <mg_match>
 8014e00:	2800      	cmp	r0, #0
 8014e02:	d045      	beq.n	8014e90 <dashboard+0x350>
			logging(L_INFO, "Call API /api/device/info");
 8014e04:	4921      	ldr	r1, [pc, #132]	@ (8014e8c <dashboard+0x34c>)
 8014e06:	2001      	movs	r0, #1
 8014e08:	f7fd fb1e 	bl	8012448 <logging>
			handler_dev_info(c, hm);
 8014e0c:	4621      	mov	r1, r4
 8014e0e:	4628      	mov	r0, r5
 8014e10:	f7ff fcf8 	bl	8014804 <handler_dev_info>
 8014e14:	e6b1      	b.n	8014b7a <dashboard+0x3a>
 8014e16:	bf00      	nop
 8014e18:	080393ac 	.word	0x080393ac
 8014e1c:	080393b4 	.word	0x080393b4
 8014e20:	080393cc 	.word	0x080393cc
 8014e24:	080393d8 	.word	0x080393d8
 8014e28:	080393bc 	.word	0x080393bc
 8014e2c:	08038678 	.word	0x08038678
 8014e30:	080393ec 	.word	0x080393ec
 8014e34:	080393f8 	.word	0x080393f8
 8014e38:	08039410 	.word	0x08039410
 8014e3c:	08039420 	.word	0x08039420
 8014e40:	0803943c 	.word	0x0803943c
 8014e44:	0803944c 	.word	0x0803944c
 8014e48:	08039464 	.word	0x08039464
 8014e4c:	08039478 	.word	0x08039478
 8014e50:	08039494 	.word	0x08039494
 8014e54:	080394a4 	.word	0x080394a4
 8014e58:	080394c0 	.word	0x080394c0
 8014e5c:	080394d4 	.word	0x080394d4
 8014e60:	080394f0 	.word	0x080394f0
 8014e64:	08039500 	.word	0x08039500
 8014e68:	0803951c 	.word	0x0803951c
 8014e6c:	08039530 	.word	0x08039530
 8014e70:	08039550 	.word	0x08039550
 8014e74:	08039564 	.word	0x08039564
 8014e78:	08039580 	.word	0x08039580
 8014e7c:	08039594 	.word	0x08039594
 8014e80:	080395b4 	.word	0x080395b4
 8014e84:	080395c8 	.word	0x080395c8
 8014e88:	080395e8 	.word	0x080395e8
 8014e8c:	080395fc 	.word	0x080395fc
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 8014e90:	ae26      	add	r6, sp, #152	@ 0x98
 8014e92:	4950      	ldr	r1, [pc, #320]	@ (8014fd4 <dashboard+0x494>)
 8014e94:	4630      	mov	r0, r6
 8014e96:	f010 fd89 	bl	80259ac <mg_str_s>
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	9300      	str	r3, [sp, #0]
 8014e9e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014ea2:	68e1      	ldr	r1, [r4, #12]
 8014ea4:	68a0      	ldr	r0, [r4, #8]
 8014ea6:	f010 ffa9 	bl	8025dfc <mg_match>
 8014eaa:	b120      	cbz	r0, 8014eb6 <dashboard+0x376>
			handle_firmware_upload(c, hm);
 8014eac:	4621      	mov	r1, r4
 8014eae:	4628      	mov	r0, r5
 8014eb0:	f7ff fd50 	bl	8014954 <handle_firmware_upload>
 8014eb4:	e661      	b.n	8014b7a <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 8014eb6:	ae28      	add	r6, sp, #160	@ 0xa0
 8014eb8:	4947      	ldr	r1, [pc, #284]	@ (8014fd8 <dashboard+0x498>)
 8014eba:	4630      	mov	r0, r6
 8014ebc:	f010 fd76 	bl	80259ac <mg_str_s>
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	9300      	str	r3, [sp, #0]
 8014ec4:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014ec8:	68e1      	ldr	r1, [r4, #12]
 8014eca:	68a0      	ldr	r0, [r4, #8]
 8014ecc:	f010 ff96 	bl	8025dfc <mg_match>
 8014ed0:	b140      	cbz	r0, 8014ee4 <dashboard+0x3a4>
			logging(L_INFO, "Call API /api/firmware/md5");
 8014ed2:	4942      	ldr	r1, [pc, #264]	@ (8014fdc <dashboard+0x49c>)
 8014ed4:	2001      	movs	r0, #1
 8014ed6:	f7fd fab7 	bl	8012448 <logging>
			handle_firmware_md5(c, hm);
 8014eda:	4621      	mov	r1, r4
 8014edc:	4628      	mov	r0, r5
 8014ede:	f7ff fdeb 	bl	8014ab8 <handle_firmware_md5>
 8014ee2:	e64a      	b.n	8014b7a <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/apply"), NULL)){
 8014ee4:	ae2a      	add	r6, sp, #168	@ 0xa8
 8014ee6:	493e      	ldr	r1, [pc, #248]	@ (8014fe0 <dashboard+0x4a0>)
 8014ee8:	4630      	mov	r0, r6
 8014eea:	f010 fd5f 	bl	80259ac <mg_str_s>
 8014eee:	2300      	movs	r3, #0
 8014ef0:	9300      	str	r3, [sp, #0]
 8014ef2:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014ef6:	68e1      	ldr	r1, [r4, #12]
 8014ef8:	68a0      	ldr	r0, [r4, #8]
 8014efa:	f010 ff7f 	bl	8025dfc <mg_match>
 8014efe:	b140      	cbz	r0, 8014f12 <dashboard+0x3d2>
			logging(L_INFO, "Call API /api/firmware/apply");
 8014f00:	4938      	ldr	r1, [pc, #224]	@ (8014fe4 <dashboard+0x4a4>)
 8014f02:	2001      	movs	r0, #1
 8014f04:	f7fd faa0 	bl	8012448 <logging>
			handle_activete_and_reboot(c, hm);
 8014f08:	4621      	mov	r1, r4
 8014f0a:	4628      	mov	r0, r5
 8014f0c:	f7ff fc3e 	bl	801478c <handle_activete_and_reboot>
 8014f10:	e633      	b.n	8014b7a <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 8014f12:	ae2c      	add	r6, sp, #176	@ 0xb0
 8014f14:	4934      	ldr	r1, [pc, #208]	@ (8014fe8 <dashboard+0x4a8>)
 8014f16:	4630      	mov	r0, r6
 8014f18:	f010 fd48 	bl	80259ac <mg_str_s>
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	9300      	str	r3, [sp, #0]
 8014f20:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014f24:	68e1      	ldr	r1, [r4, #12]
 8014f26:	68a0      	ldr	r0, [r4, #8]
 8014f28:	f010 ff68 	bl	8025dfc <mg_match>
 8014f2c:	b120      	cbz	r0, 8014f38 <dashboard+0x3f8>
			handle_firmware_deactivate(c, hm);
 8014f2e:	4621      	mov	r1, r4
 8014f30:	4628      	mov	r0, r5
 8014f32:	f7fe faa1 	bl	8013478 <handle_firmware_deactivate>
 8014f36:	e620      	b.n	8014b7a <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 8014f38:	ae2e      	add	r6, sp, #184	@ 0xb8
 8014f3a:	492c      	ldr	r1, [pc, #176]	@ (8014fec <dashboard+0x4ac>)
 8014f3c:	4630      	mov	r0, r6
 8014f3e:	f010 fd35 	bl	80259ac <mg_str_s>
 8014f42:	2300      	movs	r3, #0
 8014f44:	9300      	str	r3, [sp, #0]
 8014f46:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014f4a:	68e1      	ldr	r1, [r4, #12]
 8014f4c:	68a0      	ldr	r0, [r4, #8]
 8014f4e:	f010 ff55 	bl	8025dfc <mg_match>
 8014f52:	b120      	cbz	r0, 8014f5e <dashboard+0x41e>
			 handle_web_files_remove(c, hm);
 8014f54:	4621      	mov	r1, r4
 8014f56:	4628      	mov	r0, r5
 8014f58:	f7fe faca 	bl	80134f0 <handle_web_files_remove>
 8014f5c:	e60d      	b.n	8014b7a <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 8014f5e:	ae30      	add	r6, sp, #192	@ 0xc0
 8014f60:	4923      	ldr	r1, [pc, #140]	@ (8014ff0 <dashboard+0x4b0>)
 8014f62:	4630      	mov	r0, r6
 8014f64:	f010 fd22 	bl	80259ac <mg_str_s>
 8014f68:	2300      	movs	r3, #0
 8014f6a:	9300      	str	r3, [sp, #0]
 8014f6c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014f70:	68e1      	ldr	r1, [r4, #12]
 8014f72:	68a0      	ldr	r0, [r4, #8]
 8014f74:	f010 ff42 	bl	8025dfc <mg_match>
 8014f78:	b140      	cbz	r0, 8014f8c <dashboard+0x44c>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 8014f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8014ff4 <dashboard+0x4b4>)
 8014f7c:	9300      	str	r3, [sp, #0]
 8014f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8014ff8 <dashboard+0x4b8>)
 8014f80:	4a1e      	ldr	r2, [pc, #120]	@ (8014ffc <dashboard+0x4bc>)
 8014f82:	4621      	mov	r1, r4
 8014f84:	4628      	mov	r0, r5
 8014f86:	f013 f9d9 	bl	802833c <mg_http_upload>
 8014f8a:	e5f6      	b.n	8014b7a <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 8014f8c:	ae32      	add	r6, sp, #200	@ 0xc8
 8014f8e:	491c      	ldr	r1, [pc, #112]	@ (8015000 <dashboard+0x4c0>)
 8014f90:	4630      	mov	r0, r6
 8014f92:	f010 fd0b 	bl	80259ac <mg_str_s>
 8014f96:	2300      	movs	r3, #0
 8014f98:	9300      	str	r3, [sp, #0]
 8014f9a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014f9e:	68e1      	ldr	r1, [r4, #12]
 8014fa0:	68a0      	ldr	r0, [r4, #8]
 8014fa2:	f010 ff2b 	bl	8025dfc <mg_match>
 8014fa6:	b120      	cbz	r0, 8014fb2 <dashboard+0x472>
			 handle_fs_mkdir(c, hm);
 8014fa8:	4621      	mov	r1, r4
 8014faa:	4628      	mov	r0, r5
 8014fac:	f7ff fc7a 	bl	80148a4 <handle_fs_mkdir>
 8014fb0:	e5e3      	b.n	8014b7a <dashboard+0x3a>
			struct mg_http_serve_opts opts = {
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	9302      	str	r3, [sp, #8]
 8014fb6:	9303      	str	r3, [sp, #12]
 8014fb8:	9304      	str	r3, [sp, #16]
 8014fba:	9305      	str	r3, [sp, #20]
 8014fbc:	9306      	str	r3, [sp, #24]
 8014fbe:	9307      	str	r3, [sp, #28]
 8014fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8014ff8 <dashboard+0x4b8>)
 8014fc2:	9302      	str	r3, [sp, #8]
 8014fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8014ffc <dashboard+0x4bc>)
 8014fc6:	9307      	str	r3, [sp, #28]
			mg_http_serve_dir(c, ev_data, &opts);
 8014fc8:	aa02      	add	r2, sp, #8
 8014fca:	4621      	mov	r1, r4
 8014fcc:	4628      	mov	r0, r5
 8014fce:	f013 f8d3 	bl	8028178 <mg_http_serve_dir>
}
 8014fd2:	e5d2      	b.n	8014b7a <dashboard+0x3a>
 8014fd4:	08039618 	.word	0x08039618
 8014fd8:	08039630 	.word	0x08039630
 8014fdc:	08039644 	.word	0x08039644
 8014fe0:	08039660 	.word	0x08039660
 8014fe4:	08039674 	.word	0x08039674
 8014fe8:	08039694 	.word	0x08039694
 8014fec:	080396b0 	.word	0x080396b0
 8014ff0:	080396cc 	.word	0x080396cc
 8014ff4:	0016e360 	.word	0x0016e360
 8014ff8:	08037b14 	.word	0x08037b14
 8014ffc:	200000a0 	.word	0x200000a0
 8015000:	080396e8 	.word	0x080396e8

08015004 <dash_hdl>:

void * dash_hdl (void){
 8015004:	b508      	push	{r3, lr}

	load_users(user_cred_file, web_users, user_list_size);
 8015006:	220a      	movs	r2, #10
 8015008:	4902      	ldr	r1, [pc, #8]	@ (8015014 <dash_hdl+0x10>)
 801500a:	4803      	ldr	r0, [pc, #12]	@ (8015018 <dash_hdl+0x14>)
 801500c:	f7ff fb5c 	bl	80146c8 <load_users>

	return &dashboard;
}
 8015010:	4802      	ldr	r0, [pc, #8]	@ (801501c <dash_hdl+0x18>)
 8015012:	bd08      	pop	{r3, pc}
 8015014:	20002360 	.word	0x20002360
 8015018:	08037b70 	.word	0x08037b70
 801501c:	08014b41 	.word	0x08014b41

08015020 <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
    r_w_parameter = func;
 8015020:	4b01      	ldr	r3, [pc, #4]	@ (8015028 <reg_parameter_handler+0x8>)
 8015022:	6018      	str	r0, [r3, #0]
}
 8015024:	4770      	bx	lr
 8015026:	bf00      	nop
 8015028:	200029fc 	.word	0x200029fc

0801502c <_ZL32mqtt_pereodic_ping_timer_handlerPv>:
	if(is_registered){
		mqtt_send_io_status(mqtt_conn, 1);
	}
}

static void mqtt_pereodic_ping_timer_handler(void *arg){
 801502c:	b508      	push	{r3, lr}
	if (is_registered) {
 801502e:	4b04      	ldr	r3, [pc, #16]	@ (8015040 <_ZL32mqtt_pereodic_ping_timer_handlerPv+0x14>)
 8015030:	781b      	ldrb	r3, [r3, #0]
 8015032:	b903      	cbnz	r3, 8015036 <_ZL32mqtt_pereodic_ping_timer_handlerPv+0xa>
		mg_mqtt_ping(mqtt_conn);
	}
}
 8015034:	bd08      	pop	{r3, pc}
		mg_mqtt_ping(mqtt_conn);
 8015036:	4b03      	ldr	r3, [pc, #12]	@ (8015044 <_ZL32mqtt_pereodic_ping_timer_handlerPv+0x18>)
 8015038:	6818      	ldr	r0, [r3, #0]
 801503a:	f013 fda5 	bl	8028b88 <mg_mqtt_ping>
}
 801503e:	e7f9      	b.n	8015034 <_ZL32mqtt_pereodic_ping_timer_handlerPv+0x8>
 8015040:	20002a0c 	.word	0x20002a0c
 8015044:	20002a2c 	.word	0x20002a2c

08015048 <_ZL18mqtt_timer_handlerPv>:
	}
}

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
	if (!mqtt_conn){
 8015048:	4b1b      	ldr	r3, [pc, #108]	@ (80150b8 <_ZL18mqtt_timer_handlerPv+0x70>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	b103      	cbz	r3, 8015050 <_ZL18mqtt_timer_handlerPv+0x8>
 801504e:	4770      	bx	lr
static void mqtt_timer_handler(void *arg){
 8015050:	b530      	push	{r4, r5, lr}
 8015052:	b085      	sub	sp, #20
		logging(L_INFO, "Try to connect to MQTT server");
 8015054:	4919      	ldr	r1, [pc, #100]	@ (80150bc <_ZL18mqtt_timer_handlerPv+0x74>)
 8015056:	2001      	movs	r0, #1
 8015058:	f7fd f9f6 	bl	8012448 <logging>
		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 801505c:	4c18      	ldr	r4, [pc, #96]	@ (80150c0 <_ZL18mqtt_timer_handlerPv+0x78>)
 801505e:	2240      	movs	r2, #64	@ 0x40
 8015060:	2100      	movs	r1, #0
 8015062:	4620      	mov	r0, r4
 8015064:	f017 fbcc 	bl	802c800 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 8015068:	ad02      	add	r5, sp, #8
 801506a:	4b16      	ldr	r3, [pc, #88]	@ (80150c4 <_ZL18mqtt_timer_handlerPv+0x7c>)
 801506c:	6819      	ldr	r1, [r3, #0]
 801506e:	4628      	mov	r0, r5
 8015070:	f010 fc9c 	bl	80259ac <mg_str_s>
 8015074:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015078:	e884 0003 	stmia.w	r4, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 801507c:	4b12      	ldr	r3, [pc, #72]	@ (80150c8 <_ZL18mqtt_timer_handlerPv+0x80>)
 801507e:	6819      	ldr	r1, [r3, #0]
 8015080:	4628      	mov	r0, r5
 8015082:	f010 fc93 	bl	80259ac <mg_str_s>
 8015086:	f104 0308 	add.w	r3, r4, #8
 801508a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801508e:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 8015092:	233c      	movs	r3, #60	@ 0x3c
 8015094:	8563      	strh	r3, [r4, #42]	@ 0x2a
		mqtt_opts.clean 		= 1;
 8015096:	2301      	movs	r3, #1
 8015098:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 801509c:	2300      	movs	r3, #0
 801509e:	9300      	str	r3, [sp, #0]
 80150a0:	4b0a      	ldr	r3, [pc, #40]	@ (80150cc <_ZL18mqtt_timer_handlerPv+0x84>)
 80150a2:	4622      	mov	r2, r4
 80150a4:	490a      	ldr	r1, [pc, #40]	@ (80150d0 <_ZL18mqtt_timer_handlerPv+0x88>)
 80150a6:	6809      	ldr	r1, [r1, #0]
 80150a8:	480a      	ldr	r0, [pc, #40]	@ (80150d4 <_ZL18mqtt_timer_handlerPv+0x8c>)
 80150aa:	6800      	ldr	r0, [r0, #0]
 80150ac:	f015 fa02 	bl	802a4b4 <mg_mqtt_connect>
 80150b0:	4b01      	ldr	r3, [pc, #4]	@ (80150b8 <_ZL18mqtt_timer_handlerPv+0x70>)
 80150b2:	6018      	str	r0, [r3, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 80150b4:	b005      	add	sp, #20
 80150b6:	bd30      	pop	{r4, r5, pc}
 80150b8:	20002a2c 	.word	0x20002a2c
 80150bc:	08039704 	.word	0x08039704
 80150c0:	20002a30 	.word	0x20002a30
 80150c4:	20002a84 	.word	0x20002a84
 80150c8:	20002a80 	.word	0x20002a80
 80150cc:	08015805 	.word	0x08015805
 80150d0:	20002a88 	.word	0x20002a88
 80150d4:	20002a74 	.word	0x20002a74

080150d8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 80150d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150dc:	b085      	sub	sp, #20
 80150de:	4681      	mov	r9, r0
 80150e0:	4688      	mov	r8, r1
 80150e2:	4692      	mov	sl, r2
	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 80150e4:	4c2a      	ldr	r4, [pc, #168]	@ (8015190 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xb8>)
 80150e6:	f100 0308 	add.w	r3, r0, #8
 80150ea:	9300      	str	r3, [sp, #0]
 80150ec:	4b29      	ldr	r3, [pc, #164]	@ (8015194 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xbc>)
 80150ee:	4a2a      	ldr	r2, [pc, #168]	@ (8015198 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc0>)
 80150f0:	2128      	movs	r1, #40	@ 0x28
 80150f2:	6820      	ldr	r0, [r4, #0]
 80150f4:	f00f fdbc 	bl	8024c70 <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 80150f8:	6824      	ldr	r4, [r4, #0]
 80150fa:	4620      	mov	r0, r4
 80150fc:	f7fb f8d0 	bl	80102a0 <strlen>
 8015100:	4601      	mov	r1, r0
 8015102:	4620      	mov	r0, r4
 8015104:	f000 fd04 	bl	8015b10 <set_device_conf_ip>
	for (size_t i = 0; i < sensor_count; i++) {
 8015108:	2600      	movs	r6, #0
 801510a:	e03b      	b.n	8015184 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xac>
	        int sensor_type = sensors[i].sensor_type;
 801510c:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 8015110:	f818 4036 	ldrb.w	r4, [r8, r6, lsl #3]
 8015114:	791d      	ldrb	r5, [r3, #4]
 8015116:	4f21      	ldr	r7, [pc, #132]	@ (801519c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc4>)
 8015118:	462b      	mov	r3, r5
 801511a:	4622      	mov	r2, r4
 801511c:	2180      	movs	r1, #128	@ 0x80
 801511e:	6838      	ldr	r0, [r7, #0]
 8015120:	f000 fd14 	bl	8015b4c <get_config_topik_string>
			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 8015124:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80151a8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xd0>
 8015128:	462b      	mov	r3, r5
 801512a:	4622      	mov	r2, r4
 801512c:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8015130:	f8db 0000 	ldr.w	r0, [fp]
 8015134:	f000 fde4 	bl	8015d00 <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 8015138:	4d19      	ldr	r5, [pc, #100]	@ (80151a0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc8>)
 801513a:	ac02      	add	r4, sp, #8
 801513c:	6839      	ldr	r1, [r7, #0]
 801513e:	4620      	mov	r0, r4
 8015140:	f010 fc34 	bl	80259ac <mg_str_s>
 8015144:	f105 0318 	add.w	r3, r5, #24
 8015148:	e894 0003 	ldmia.w	r4, {r0, r1}
 801514c:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 8015150:	f8db 1000 	ldr.w	r1, [fp]
 8015154:	4620      	mov	r0, r4
 8015156:	f010 fc29 	bl	80259ac <mg_str_s>
 801515a:	f105 0320 	add.w	r3, r5, #32
 801515e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015162:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 8015166:	2401      	movs	r4, #1
 8015168:	f885 4028 	strb.w	r4, [r5, #40]	@ 0x28
			mqtt_opts.retain = 1;
 801516c:	f885 402e 	strb.w	r4, [r5, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8015170:	4629      	mov	r1, r5
 8015172:	4648      	mov	r0, r9
 8015174:	f013 ff0e 	bl	8028f94 <mg_mqtt_pub>
			logging(L_INFO, "Sending registration data to: %s", topik_buff);
 8015178:	683a      	ldr	r2, [r7, #0]
 801517a:	490a      	ldr	r1, [pc, #40]	@ (80151a4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xcc>)
 801517c:	4620      	mov	r0, r4
 801517e:	f7fd f963 	bl	8012448 <logging>
	for (size_t i = 0; i < sensor_count; i++) {
 8015182:	4426      	add	r6, r4
 8015184:	4556      	cmp	r6, sl
 8015186:	d3c1      	bcc.n	801510c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x34>
}
 8015188:	b005      	add	sp, #20
 801518a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801518e:	bf00      	nop
 8015190:	20002a28 	.word	0x20002a28
 8015194:	08027759 	.word	0x08027759
 8015198:	08038c4c 	.word	0x08038c4c
 801519c:	20002a7c 	.word	0x20002a7c
 80151a0:	20002a30 	.word	0x20002a30
 80151a4:	08039724 	.word	0x08039724
 80151a8:	20002a78 	.word	0x20002a78

080151ac <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 80151ac:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80151ae:	fb01 f400 	mul.w	r4, r1, r0
 80151b2:	4620      	mov	r0, r4
 80151b4:	f006 ff30 	bl	801c018 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80151b8:	4605      	mov	r5, r0
 80151ba:	b118      	cbz	r0, 80151c4 <_ZL9my_callocjj+0x18>
 80151bc:	4622      	mov	r2, r4
 80151be:	2100      	movs	r1, #0
 80151c0:	f017 fb1e 	bl	802c800 <memset>
}
 80151c4:	4628      	mov	r0, r5
 80151c6:	bd38      	pop	{r3, r4, r5, pc}

080151c8 <_ZL25mqtt_send_diagnostic_dataP13mg_connection>:
static void mqtt_send_diagnostic_data (struct mg_connection * arg){
 80151c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151cc:	ed2d 8b02 	vpush	{d8}
 80151d0:	b085      	sub	sp, #20
 80151d2:	9001      	str	r0, [sp, #4]
	payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 80151d4:	2101      	movs	r1, #1
 80151d6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80151da:	f7ff ffe7 	bl	80151ac <_ZL9my_callocjj>
 80151de:	4606      	mov	r6, r0
	topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 80151e0:	2101      	movs	r1, #1
 80151e2:	2080      	movs	r0, #128	@ 0x80
 80151e4:	f7ff ffe2 	bl	80151ac <_ZL9my_callocjj>
 80151e8:	4605      	mov	r5, r0
	batt_voltage = Read_VBAT();
 80151ea:	f7fc f82b 	bl	8011244 <Read_VBAT>
 80151ee:	eef0 8a40 	vmov.f32	s17, s0
	pow_supl_voltage = Read_VDD();
 80151f2:	f7fb ffe1 	bl	80111b8 <Read_VDD>
 80151f6:	eeb0 8a40 	vmov.f32	s16, s0
	logging(L_DEBUG, "Send diagnostic data to MQTT server");
 80151fa:	493a      	ldr	r1, [pc, #232]	@ (80152e4 <_ZL25mqtt_send_diagnostic_dataP13mg_connection+0x11c>)
 80151fc:	2000      	movs	r0, #0
 80151fe:	f7fd f923 	bl	8012448 <logging>
	generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, VOLTAGE_DIAGNOSTIC_BATT_SENSOR, 0);
 8015202:	2300      	movs	r3, #0
 8015204:	2209      	movs	r2, #9
 8015206:	2180      	movs	r1, #128	@ 0x80
 8015208:	4628      	mov	r0, r5
 801520a:	f001 f85d 	bl	80162c8 <generate_status_topik>
	logging(L_DEBUG, "Topik: %s", topik);
 801520e:	f8df b0e8 	ldr.w	fp, [pc, #232]	@ 80152f8 <_ZL25mqtt_send_diagnostic_dataP13mg_connection+0x130>
 8015212:	462a      	mov	r2, r5
 8015214:	4659      	mov	r1, fp
 8015216:	2000      	movs	r0, #0
 8015218:	f7fd f916 	bl	8012448 <logging>
	generate_key_value_JSON(payload, "battery0", batt_voltage);
 801521c:	eeb0 0a68 	vmov.f32	s0, s17
 8015220:	4931      	ldr	r1, [pc, #196]	@ (80152e8 <_ZL25mqtt_send_diagnostic_dataP13mg_connection+0x120>)
 8015222:	4630      	mov	r0, r6
 8015224:	f001 f8a0 	bl	8016368 <generate_key_value_JSON>
	logging(L_DEBUG, "Payload: %s", payload);
 8015228:	4632      	mov	r2, r6
 801522a:	4930      	ldr	r1, [pc, #192]	@ (80152ec <_ZL25mqtt_send_diagnostic_dataP13mg_connection+0x124>)
 801522c:	2000      	movs	r0, #0
 801522e:	f7fd f90b 	bl	8012448 <logging>
	mqtt_opts.topic = mg_str(topik);
 8015232:	4f2f      	ldr	r7, [pc, #188]	@ (80152f0 <_ZL25mqtt_send_diagnostic_dataP13mg_connection+0x128>)
 8015234:	ac02      	add	r4, sp, #8
 8015236:	4629      	mov	r1, r5
 8015238:	4620      	mov	r0, r4
 801523a:	f010 fbb7 	bl	80259ac <mg_str_s>
 801523e:	f107 0a18 	add.w	sl, r7, #24
 8015242:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015246:	e88a 0003 	stmia.w	sl, {r0, r1}
	mqtt_opts.message = mg_str(payload);
 801524a:	4631      	mov	r1, r6
 801524c:	4620      	mov	r0, r4
 801524e:	f010 fbad 	bl	80259ac <mg_str_s>
 8015252:	f107 0920 	add.w	r9, r7, #32
 8015256:	e894 0003 	ldmia.w	r4, {r0, r1}
 801525a:	e889 0003 	stmia.w	r9, {r0, r1}
	mqtt_opts.qos = 0;
 801525e:	f04f 0800 	mov.w	r8, #0
 8015262:	f887 8028 	strb.w	r8, [r7, #40]	@ 0x28
	mqtt_opts.retain = 0;
 8015266:	f887 802e 	strb.w	r8, [r7, #46]	@ 0x2e
	mg_mqtt_pub(arg, &mqtt_opts);
 801526a:	4639      	mov	r1, r7
 801526c:	9801      	ldr	r0, [sp, #4]
 801526e:	f013 fe91 	bl	8028f94 <mg_mqtt_pub>
	generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, VOLTAGE_DIAGNOSTIC_POW_SUPL_SENSOR, 0);
 8015272:	4643      	mov	r3, r8
 8015274:	220a      	movs	r2, #10
 8015276:	2180      	movs	r1, #128	@ 0x80
 8015278:	4628      	mov	r0, r5
 801527a:	f001 f825 	bl	80162c8 <generate_status_topik>
	logging(L_DEBUG, "Topik: %s", topik);
 801527e:	462a      	mov	r2, r5
 8015280:	4659      	mov	r1, fp
 8015282:	4640      	mov	r0, r8
 8015284:	f7fd f8e0 	bl	8012448 <logging>
	generate_key_value_JSON(payload, "power_supply0", pow_supl_voltage);
 8015288:	eeb0 0a48 	vmov.f32	s0, s16
 801528c:	4919      	ldr	r1, [pc, #100]	@ (80152f4 <_ZL25mqtt_send_diagnostic_dataP13mg_connection+0x12c>)
 801528e:	4630      	mov	r0, r6
 8015290:	f001 f86a 	bl	8016368 <generate_key_value_JSON>
	logging(L_DEBUG, "Payload: %s", payload);
 8015294:	4632      	mov	r2, r6
 8015296:	4915      	ldr	r1, [pc, #84]	@ (80152ec <_ZL25mqtt_send_diagnostic_dataP13mg_connection+0x124>)
 8015298:	4640      	mov	r0, r8
 801529a:	f7fd f8d5 	bl	8012448 <logging>
	mqtt_opts.topic = mg_str(topik);
 801529e:	4629      	mov	r1, r5
 80152a0:	4620      	mov	r0, r4
 80152a2:	f010 fb83 	bl	80259ac <mg_str_s>
 80152a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80152aa:	e88a 0003 	stmia.w	sl, {r0, r1}
	mqtt_opts.message = mg_str(payload);
 80152ae:	4631      	mov	r1, r6
 80152b0:	4620      	mov	r0, r4
 80152b2:	f010 fb7b 	bl	80259ac <mg_str_s>
 80152b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80152ba:	e889 0003 	stmia.w	r9, {r0, r1}
	mqtt_opts.qos = 0;
 80152be:	f887 8028 	strb.w	r8, [r7, #40]	@ 0x28
	mqtt_opts.retain = 0;
 80152c2:	f887 802e 	strb.w	r8, [r7, #46]	@ 0x2e
	mg_mqtt_pub(arg, &mqtt_opts);
 80152c6:	4639      	mov	r1, r7
 80152c8:	9801      	ldr	r0, [sp, #4]
 80152ca:	f013 fe63 	bl	8028f94 <mg_mqtt_pub>
	free(payload);
 80152ce:	4630      	mov	r0, r6
 80152d0:	f006 ff24 	bl	801c11c <vPortFree>
	free(topik);
 80152d4:	4628      	mov	r0, r5
 80152d6:	f006 ff21 	bl	801c11c <vPortFree>
}
 80152da:	b005      	add	sp, #20
 80152dc:	ecbd 8b02 	vpop	{d8}
 80152e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152e4:	08039748 	.word	0x08039748
 80152e8:	08039778 	.word	0x08039778
 80152ec:	08039784 	.word	0x08039784
 80152f0:	20002a30 	.word	0x20002a30
 80152f4:	08039790 	.word	0x08039790
 80152f8:	0803976c 	.word	0x0803976c

080152fc <_ZL39mqtt_timer_handler_send_diagnostic_dataPv>:
	if(mqtt_conn && is_registered){
		mqtt_send_io_status(mqtt_conn, 0);
	}
}

static void mqtt_timer_handler_send_diagnostic_data(void * arg){
 80152fc:	b508      	push	{r3, lr}
	logging(L_DEBUG, "Call timer function for send diagnostic data");
 80152fe:	4907      	ldr	r1, [pc, #28]	@ (801531c <_ZL39mqtt_timer_handler_send_diagnostic_dataPv+0x20>)
 8015300:	2000      	movs	r0, #0
 8015302:	f7fd f8a1 	bl	8012448 <logging>
	if(mqtt_conn && is_registered){
 8015306:	4b06      	ldr	r3, [pc, #24]	@ (8015320 <_ZL39mqtt_timer_handler_send_diagnostic_dataPv+0x24>)
 8015308:	6818      	ldr	r0, [r3, #0]
 801530a:	b110      	cbz	r0, 8015312 <_ZL39mqtt_timer_handler_send_diagnostic_dataPv+0x16>
 801530c:	4b05      	ldr	r3, [pc, #20]	@ (8015324 <_ZL39mqtt_timer_handler_send_diagnostic_dataPv+0x28>)
 801530e:	781b      	ldrb	r3, [r3, #0]
 8015310:	b903      	cbnz	r3, 8015314 <_ZL39mqtt_timer_handler_send_diagnostic_dataPv+0x18>
		mqtt_send_diagnostic_data(mqtt_conn);
	}
}
 8015312:	bd08      	pop	{r3, pc}
		mqtt_send_diagnostic_data(mqtt_conn);
 8015314:	f7ff ff58 	bl	80151c8 <_ZL25mqtt_send_diagnostic_dataP13mg_connection>
}
 8015318:	e7fb      	b.n	8015312 <_ZL39mqtt_timer_handler_send_diagnostic_dataPv+0x16>
 801531a:	bf00      	nop
 801531c:	080397a0 	.word	0x080397a0
 8015320:	20002a2c 	.word	0x20002a2c
 8015324:	20002a0c 	.word	0x20002a0c

08015328 <_ZL19mqtt_send_io_statusP13mg_connectionb>:
static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 8015328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801532c:	b087      	sub	sp, #28
 801532e:	4607      	mov	r7, r0
 8015330:	460c      	mov	r4, r1
	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 8015332:	4d58      	ldr	r5, [pc, #352]	@ (8015494 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x16c>)
 8015334:	682b      	ldr	r3, [r5, #0]
 8015336:	2200      	movs	r2, #0
 8015338:	2101      	movs	r1, #1
 801533a:	a804      	add	r0, sp, #16
 801533c:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 801533e:	682b      	ldr	r3, [r5, #0]
 8015340:	2200      	movs	r2, #0
 8015342:	2102      	movs	r1, #2
 8015344:	f10d 0013 	add.w	r0, sp, #19
 8015348:	4798      	blx	r3
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 801534a:	2203      	movs	r2, #3
 801534c:	4952      	ldr	r1, [pc, #328]	@ (8015498 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 801534e:	a804      	add	r0, sp, #16
 8015350:	f017 fa2c 	bl	802c7ac <memcmp>
 8015354:	b948      	cbnz	r0, 801536a <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8015356:	2203      	movs	r2, #3
 8015358:	4950      	ldr	r1, [pc, #320]	@ (801549c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x174>)
 801535a:	f10d 0013 	add.w	r0, sp, #19
 801535e:	f017 fa25 	bl	802c7ac <memcmp>
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8015362:	b910      	cbnz	r0, 801536a <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8015364:	2c00      	cmp	r4, #0
 8015366:	f000 8091 	beq.w	801548c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x164>
		memcpy(&prev_status, &status, sizeof(status));
 801536a:	4b4b      	ldr	r3, [pc, #300]	@ (8015498 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 801536c:	aa06      	add	r2, sp, #24
 801536e:	e912 0003 	ldmdb	r2, {r0, r1}
 8015372:	6018      	str	r0, [r3, #0]
 8015374:	8099      	strh	r1, [r3, #4]
		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8015376:	2101      	movs	r1, #1
 8015378:	f44f 7016 	mov.w	r0, #600	@ 0x258
 801537c:	f7ff ff16 	bl	80151ac <_ZL9my_callocjj>
 8015380:	4606      	mov	r6, r0
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8015382:	2101      	movs	r1, #1
 8015384:	2080      	movs	r0, #128	@ 0x80
 8015386:	f7ff ff11 	bl	80151ac <_ZL9my_callocjj>
 801538a:	4605      	mov	r5, r0
		for (i = 0; i < INPUTS_COUNT; i++){
 801538c:	2200      	movs	r2, #0
 801538e:	e038      	b.n	8015402 <_ZL19mqtt_send_io_statusP13mg_connectionb+0xda>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 8015390:	f102 0801 	add.w	r8, r2, #1
 8015394:	fa5f f888 	uxtb.w	r8, r8
 8015398:	f102 0318 	add.w	r3, r2, #24
 801539c:	eb0d 0203 	add.w	r2, sp, r3
 80153a0:	f812 3c08 	ldrb.w	r3, [r2, #-8]
 80153a4:	9300      	str	r3, [sp, #0]
 80153a6:	4643      	mov	r3, r8
 80153a8:	2201      	movs	r2, #1
 80153aa:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80153ae:	4630      	mov	r0, r6
 80153b0:	f000 ff48 	bl	8016244 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 80153b4:	4643      	mov	r3, r8
 80153b6:	2201      	movs	r2, #1
 80153b8:	2180      	movs	r1, #128	@ 0x80
 80153ba:	4628      	mov	r0, r5
 80153bc:	f000 ff84 	bl	80162c8 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 80153c0:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 80154a0 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 80153c4:	ac02      	add	r4, sp, #8
 80153c6:	4629      	mov	r1, r5
 80153c8:	4620      	mov	r0, r4
 80153ca:	f010 faef 	bl	80259ac <mg_str_s>
 80153ce:	f109 0318 	add.w	r3, r9, #24
 80153d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80153d6:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 80153da:	4631      	mov	r1, r6
 80153dc:	4620      	mov	r0, r4
 80153de:	f010 fae5 	bl	80259ac <mg_str_s>
 80153e2:	f109 0320 	add.w	r3, r9, #32
 80153e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80153ea:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 80153ee:	2300      	movs	r3, #0
 80153f0:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 80153f4:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 80153f8:	4649      	mov	r1, r9
 80153fa:	4638      	mov	r0, r7
 80153fc:	f013 fdca 	bl	8028f94 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 8015400:	4642      	mov	r2, r8
 8015402:	2a02      	cmp	r2, #2
 8015404:	d9c4      	bls.n	8015390 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x68>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8015406:	2200      	movs	r2, #0
 8015408:	e038      	b.n	801547c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x154>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 801540a:	f102 0801 	add.w	r8, r2, #1
 801540e:	fa5f f888 	uxtb.w	r8, r8
 8015412:	f102 0318 	add.w	r3, r2, #24
 8015416:	eb0d 0203 	add.w	r2, sp, r3
 801541a:	f812 3c05 	ldrb.w	r3, [r2, #-5]
 801541e:	9300      	str	r3, [sp, #0]
 8015420:	4643      	mov	r3, r8
 8015422:	2202      	movs	r2, #2
 8015424:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8015428:	4630      	mov	r0, r6
 801542a:	f000 ff0b 	bl	8016244 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 801542e:	4643      	mov	r3, r8
 8015430:	2202      	movs	r2, #2
 8015432:	2180      	movs	r1, #128	@ 0x80
 8015434:	4628      	mov	r0, r5
 8015436:	f000 ff47 	bl	80162c8 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 801543a:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 80154a0 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 801543e:	ac02      	add	r4, sp, #8
 8015440:	4629      	mov	r1, r5
 8015442:	4620      	mov	r0, r4
 8015444:	f010 fab2 	bl	80259ac <mg_str_s>
 8015448:	f109 0318 	add.w	r3, r9, #24
 801544c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015450:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8015454:	4631      	mov	r1, r6
 8015456:	4620      	mov	r0, r4
 8015458:	f010 faa8 	bl	80259ac <mg_str_s>
 801545c:	f109 0320 	add.w	r3, r9, #32
 8015460:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015464:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8015468:	2300      	movs	r3, #0
 801546a:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 801546e:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8015472:	4649      	mov	r1, r9
 8015474:	4638      	mov	r0, r7
 8015476:	f013 fd8d 	bl	8028f94 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 801547a:	4642      	mov	r2, r8
 801547c:	2a02      	cmp	r2, #2
 801547e:	d9c4      	bls.n	801540a <_ZL19mqtt_send_io_statusP13mg_connectionb+0xe2>
		free(payload);
 8015480:	4630      	mov	r0, r6
 8015482:	f006 fe4b 	bl	801c11c <vPortFree>
		free(topik);
 8015486:	4628      	mov	r0, r5
 8015488:	f006 fe48 	bl	801c11c <vPortFree>
}
 801548c:	b007      	add	sp, #28
 801548e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015492:	bf00      	nop
 8015494:	20002a08 	.word	0x20002a08
 8015498:	20002a00 	.word	0x20002a00
 801549c:	20002a03 	.word	0x20002a03
 80154a0:	20002a30 	.word	0x20002a30

080154a4 <_ZL33mqtt_timer_handler_cher_io_statusPv>:
static void mqtt_timer_handler_cher_io_status(void *arg){
 80154a4:	b508      	push	{r3, lr}
	if(mqtt_conn && is_registered){
 80154a6:	4b05      	ldr	r3, [pc, #20]	@ (80154bc <_ZL33mqtt_timer_handler_cher_io_statusPv+0x18>)
 80154a8:	6818      	ldr	r0, [r3, #0]
 80154aa:	b110      	cbz	r0, 80154b2 <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 80154ac:	4b04      	ldr	r3, [pc, #16]	@ (80154c0 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x1c>)
 80154ae:	781b      	ldrb	r3, [r3, #0]
 80154b0:	b903      	cbnz	r3, 80154b4 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x10>
}
 80154b2:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 0);
 80154b4:	2100      	movs	r1, #0
 80154b6:	f7ff ff37 	bl	8015328 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 80154ba:	e7fa      	b.n	80154b2 <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 80154bc:	20002a2c 	.word	0x20002a2c
 80154c0:	20002a0c 	.word	0x20002a0c

080154c4 <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:
static void mqtt_pereodic_status_send_timer_handler(void *arg){
 80154c4:	b508      	push	{r3, lr}
	if(is_registered){
 80154c6:	4b05      	ldr	r3, [pc, #20]	@ (80154dc <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x18>)
 80154c8:	781b      	ldrb	r3, [r3, #0]
 80154ca:	b903      	cbnz	r3, 80154ce <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0xa>
}
 80154cc:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 1);
 80154ce:	2101      	movs	r1, #1
 80154d0:	4b03      	ldr	r3, [pc, #12]	@ (80154e0 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>)
 80154d2:	6818      	ldr	r0, [r3, #0]
 80154d4:	f7ff ff28 	bl	8015328 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 80154d8:	e7f8      	b.n	80154cc <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x8>
 80154da:	bf00      	nop
 80154dc:	20002a0c 	.word	0x20002a0c
 80154e0:	20002a2c 	.word	0x20002a2c

080154e4 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:
static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 80154e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154e8:	b083      	sub	sp, #12
 80154ea:	4681      	mov	r9, r0
 80154ec:	460d      	mov	r5, r1
 80154ee:	4616      	mov	r6, r2
	for (size_t i = 0; i < sensor_count; i++) {
 80154f0:	2400      	movs	r4, #0
 80154f2:	e000      	b.n	80154f6 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x12>
 80154f4:	3401      	adds	r4, #1
 80154f6:	42b4      	cmp	r4, r6
 80154f8:	d22e      	bcs.n	8015558 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x74>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 80154fa:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
 80154fe:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8015502:	2b02      	cmp	r3, #2
 8015504:	d1f6      	bne.n	80154f4 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8015506:	2101      	movs	r1, #1
 8015508:	2080      	movs	r0, #128	@ 0x80
 801550a:	f7ff fe4f 	bl	80151ac <_ZL9my_callocjj>
 801550e:	4607      	mov	r7, r0
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 8015510:	f898 3004 	ldrb.w	r3, [r8, #4]
 8015514:	2202      	movs	r2, #2
 8015516:	2180      	movs	r1, #128	@ 0x80
 8015518:	f000 febc 	bl	8016294 <generate_comand_topik_for_subscrabe>
			mqtt_opts.qos = 1;
 801551c:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8015564 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x80>
 8015520:	f04f 0b01 	mov.w	fp, #1
 8015524:	f888 b028 	strb.w	fp, [r8, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 8015528:	46ea      	mov	sl, sp
 801552a:	4639      	mov	r1, r7
 801552c:	4650      	mov	r0, sl
 801552e:	f010 fa3d 	bl	80259ac <mg_str_s>
 8015532:	f108 0318 	add.w	r3, r8, #24
 8015536:	e89a 0003 	ldmia.w	sl, {r0, r1}
 801553a:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 801553e:	4641      	mov	r1, r8
 8015540:	4648      	mov	r0, r9
 8015542:	f013 fcd9 	bl	8028ef8 <mg_mqtt_sub>
			logging(L_INFO, "Subscribe on MQTT topik: %s", topik);
 8015546:	463a      	mov	r2, r7
 8015548:	4905      	ldr	r1, [pc, #20]	@ (8015560 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7c>)
 801554a:	4658      	mov	r0, fp
 801554c:	f7fc ff7c 	bl	8012448 <logging>
			free(topik);
 8015550:	4638      	mov	r0, r7
 8015552:	f006 fde3 	bl	801c11c <vPortFree>
 8015556:	e7cd      	b.n	80154f4 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
}
 8015558:	b003      	add	sp, #12
 801555a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801555e:	bf00      	nop
 8015560:	080397d0 	.word	0x080397d0
 8015564:	20002a30 	.word	0x20002a30

08015568 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:
static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 8015568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801556c:	b087      	sub	sp, #28
	int relay_number = 0;  // Переменная для хранения номера реле
 801556e:	2300      	movs	r3, #0
 8015570:	9303      	str	r3, [sp, #12]
    const char *topic = mess->topic.buf;
 8015572:	6807      	ldr	r7, [r0, #0]
    const size_t topic_len = mess->topic.len;
 8015574:	6845      	ldr	r5, [r0, #4]
    const char *message = mess->data.buf;
 8015576:	6884      	ldr	r4, [r0, #8]
    const size_t message_len = mess->data.len;
 8015578:	68c6      	ldr	r6, [r0, #12]
    if(message == NULL || topic == NULL){
 801557a:	b1ac      	cbz	r4, 80155a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x40>
 801557c:	b1a7      	cbz	r7, 80155a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x40>
    if (topic_len < 1 || message_len < 1){
 801557e:	b105      	cbz	r5, 8015582 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a>
 8015580:	bb0e      	cbnz	r6, 80155c6 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x5e>
    	logging(L_ERR, "Subscrabed topik len or message len < 1");
 8015582:	498c      	ldr	r1, [pc, #560]	@ (80157b4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 8015584:	2003      	movs	r0, #3
 8015586:	f7fc ff5f 	bl	8012448 <logging>
    	MG_ERROR(("Subscrabed topik len or message len < 1 \n"));
 801558a:	4b8b      	ldr	r3, [pc, #556]	@ (80157b8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	2b00      	cmp	r3, #0
 8015590:	f340 8101 	ble.w	8015796 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
 8015594:	4b89      	ldr	r3, [pc, #548]	@ (80157bc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8015596:	22ca      	movs	r2, #202	@ 0xca
 8015598:	4989      	ldr	r1, [pc, #548]	@ (80157c0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 801559a:	2001      	movs	r0, #1
 801559c:	f012 f990 	bl	80278c0 <mg_log_prefix>
 80155a0:	4888      	ldr	r0, [pc, #544]	@ (80157c4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x25c>)
 80155a2:	f010 f825 	bl	80255f0 <mg_log>
    	return;
 80155a6:	e0f6      	b.n	8015796 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 80155a8:	4b83      	ldr	r3, [pc, #524]	@ (80157b8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	f340 80f2 	ble.w	8015796 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
 80155b2:	4b82      	ldr	r3, [pc, #520]	@ (80157bc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 80155b4:	22c4      	movs	r2, #196	@ 0xc4
 80155b6:	4982      	ldr	r1, [pc, #520]	@ (80157c0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80155b8:	2001      	movs	r0, #1
 80155ba:	f012 f981 	bl	80278c0 <mg_log_prefix>
 80155be:	4882      	ldr	r0, [pc, #520]	@ (80157c8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x260>)
 80155c0:	f010 f816 	bl	80255f0 <mg_log>
    	return;
 80155c4:	e0e7      	b.n	8015796 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
    char * local_message = (char *)calloc (message_len + 1, sizeof (char));
 80155c6:	2101      	movs	r1, #1
 80155c8:	1870      	adds	r0, r6, r1
 80155ca:	f7ff fdef 	bl	80151ac <_ZL9my_callocjj>
 80155ce:	4681      	mov	r9, r0
    char * local_topic = (char *)calloc (topic_len + 1, sizeof(char));
 80155d0:	2101      	movs	r1, #1
 80155d2:	1868      	adds	r0, r5, r1
 80155d4:	f7ff fdea 	bl	80151ac <_ZL9my_callocjj>
 80155d8:	4680      	mov	r8, r0
    strncpy(local_message, message, message_len);
 80155da:	4632      	mov	r2, r6
 80155dc:	4621      	mov	r1, r4
 80155de:	4648      	mov	r0, r9
 80155e0:	f017 f955 	bl	802c88e <strncpy>
    strncpy(local_topic, topic, topic_len);
 80155e4:	462a      	mov	r2, r5
 80155e6:	4639      	mov	r1, r7
 80155e8:	4640      	mov	r0, r8
 80155ea:	f017 f950 	bl	802c88e <strncpy>
    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 80155ee:	4b77      	ldr	r3, [pc, #476]	@ (80157cc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	2200      	movs	r2, #0
 80155f4:	2102      	movs	r1, #2
 80155f6:	a805      	add	r0, sp, #20
 80155f8:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 80155fa:	9b05      	ldr	r3, [sp, #20]
 80155fc:	f8ad 3010 	strh.w	r3, [sp, #16]
 8015600:	0c1b      	lsrs	r3, r3, #16
 8015602:	f88d 3012 	strb.w	r3, [sp, #18]
    const char *switch_position = strstr(local_topic, "switch");
 8015606:	4972      	ldr	r1, [pc, #456]	@ (80157d0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x268>)
 8015608:	4640      	mov	r0, r8
 801560a:	f017 f979 	bl	802c900 <strstr>
    if (switch_position != NULL) {
 801560e:	2800      	cmp	r0, #0
 8015610:	f000 80b2 	beq.w	8015778 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x210>
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 8015614:	aa03      	add	r2, sp, #12
 8015616:	496f      	ldr	r1, [pc, #444]	@ (80157d4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x26c>)
 8015618:	f016 ff20 	bl	802c45c <sscanf>
 801561c:	2801      	cmp	r0, #1
 801561e:	d009      	beq.n	8015634 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xcc>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 8015620:	4b65      	ldr	r3, [pc, #404]	@ (80157b8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	2b00      	cmp	r3, #0
 8015626:	f300 809d 	bgt.w	8015764 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>
			logging(L_ERR, "Error: relay number is not found, or incorrect format.");
 801562a:	496b      	ldr	r1, [pc, #428]	@ (80157d8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x270>)
 801562c:	2003      	movs	r0, #3
 801562e:	f7fc ff0b 	bl	8012448 <logging>
 8015632:	e0aa      	b.n	801578a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, local_topic));
 8015634:	4b60      	ldr	r3, [pc, #384]	@ (80157b8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	2b01      	cmp	r3, #1
 801563a:	dc19      	bgt.n	8015670 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x108>
    		logging(L_INFO, "Recv control message in topik %s, relay number %d, action %s", local_topic, relay_number, local_message);
 801563c:	f8cd 9000 	str.w	r9, [sp]
 8015640:	9b03      	ldr	r3, [sp, #12]
 8015642:	4642      	mov	r2, r8
 8015644:	4965      	ldr	r1, [pc, #404]	@ (80157dc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x274>)
 8015646:	2001      	movs	r0, #1
 8015648:	f7fc fefe 	bl	8012448 <logging>
    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 801564c:	9c03      	ldr	r4, [sp, #12]
 801564e:	1e63      	subs	r3, r4, #1
 8015650:	2b02      	cmp	r3, #2
 8015652:	d819      	bhi.n	8015688 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x120>
			if (message_len == 2 && strncmp(local_message, "ON", 2) == 0) {
 8015654:	2e02      	cmp	r6, #2
 8015656:	d034      	beq.n	80156c2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x15a>
			} else if (message_len == 3 && strncmp(local_message, "OFF", 3) == 0) {
 8015658:	2e03      	cmp	r6, #3
 801565a:	d055      	beq.n	8015708 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a0>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", local_message));
 801565c:	4b56      	ldr	r3, [pc, #344]	@ (80157b8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	2b00      	cmp	r3, #0
 8015662:	dc74      	bgt.n	801574e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e6>
				logging(L_ERR, "Error: expected message \"ON\" or \"OFF\" but got message: %s \n", local_message);
 8015664:	464a      	mov	r2, r9
 8015666:	495e      	ldr	r1, [pc, #376]	@ (80157e0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x278>)
 8015668:	2003      	movs	r0, #3
 801566a:	f7fc feed 	bl	8012448 <logging>
 801566e:	e08c      	b.n	801578a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, local_topic));
 8015670:	4b52      	ldr	r3, [pc, #328]	@ (80157bc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8015672:	22dd      	movs	r2, #221	@ 0xdd
 8015674:	4952      	ldr	r1, [pc, #328]	@ (80157c0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8015676:	2002      	movs	r0, #2
 8015678:	f012 f922 	bl	80278c0 <mg_log_prefix>
 801567c:	4642      	mov	r2, r8
 801567e:	9903      	ldr	r1, [sp, #12]
 8015680:	4858      	ldr	r0, [pc, #352]	@ (80157e4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x27c>)
 8015682:	f00f ffb5 	bl	80255f0 <mg_log>
 8015686:	e7d9      	b.n	801563c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xd4>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8015688:	4b4b      	ldr	r3, [pc, #300]	@ (80157b8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	2b00      	cmp	r3, #0
 801568e:	dc0c      	bgt.n	80156aa <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x142>
    			logging(L_ERR, "Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number);
 8015690:	9b03      	ldr	r3, [sp, #12]
 8015692:	2203      	movs	r2, #3
 8015694:	4954      	ldr	r1, [pc, #336]	@ (80157e8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x280>)
 8015696:	4610      	mov	r0, r2
 8015698:	f7fc fed6 	bl	8012448 <logging>
    		    free(local_message);
 801569c:	4648      	mov	r0, r9
 801569e:	f006 fd3d 	bl	801c11c <vPortFree>
    		    free(local_topic);
 80156a2:	4640      	mov	r0, r8
 80156a4:	f006 fd3a 	bl	801c11c <vPortFree>
    			return;
 80156a8:	e075      	b.n	8015796 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 80156aa:	4b44      	ldr	r3, [pc, #272]	@ (80157bc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 80156ac:	22e2      	movs	r2, #226	@ 0xe2
 80156ae:	4944      	ldr	r1, [pc, #272]	@ (80157c0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80156b0:	2001      	movs	r0, #1
 80156b2:	f012 f905 	bl	80278c0 <mg_log_prefix>
 80156b6:	9a03      	ldr	r2, [sp, #12]
 80156b8:	2103      	movs	r1, #3
 80156ba:	484b      	ldr	r0, [pc, #300]	@ (80157e8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x280>)
 80156bc:	f00f ff98 	bl	80255f0 <mg_log>
 80156c0:	e7e6      	b.n	8015690 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x128>
			if (message_len == 2 && strncmp(local_message, "ON", 2) == 0) {
 80156c2:	2202      	movs	r2, #2
 80156c4:	4949      	ldr	r1, [pc, #292]	@ (80157ec <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x284>)
 80156c6:	4648      	mov	r0, r9
 80156c8:	f017 f8cf 	bl	802c86a <strncmp>
 80156cc:	2800      	cmp	r0, #0
 80156ce:	d1c3      	bne.n	8015658 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xf0>
				sw_w[relay_number-1] = 1;
 80156d0:	f104 0317 	add.w	r3, r4, #23
 80156d4:	446b      	add	r3, sp
 80156d6:	2201      	movs	r2, #1
 80156d8:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 80156dc:	4b36      	ldr	r3, [pc, #216]	@ (80157b8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	4293      	cmp	r3, r2
 80156e2:	dc06      	bgt.n	80156f2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x18a>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 80156e4:	4b39      	ldr	r3, [pc, #228]	@ (80157cc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	2201      	movs	r2, #1
 80156ea:	2102      	movs	r1, #2
 80156ec:	a804      	add	r0, sp, #16
 80156ee:	4798      	blx	r3
 80156f0:	e04b      	b.n	801578a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
				MG_INFO(("Relay %d is ON.\n", relay_number));
 80156f2:	4b32      	ldr	r3, [pc, #200]	@ (80157bc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 80156f4:	22ef      	movs	r2, #239	@ 0xef
 80156f6:	4932      	ldr	r1, [pc, #200]	@ (80157c0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80156f8:	2002      	movs	r0, #2
 80156fa:	f012 f8e1 	bl	80278c0 <mg_log_prefix>
 80156fe:	9903      	ldr	r1, [sp, #12]
 8015700:	483b      	ldr	r0, [pc, #236]	@ (80157f0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x288>)
 8015702:	f00f ff75 	bl	80255f0 <mg_log>
 8015706:	e7ed      	b.n	80156e4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x17c>
			} else if (message_len == 3 && strncmp(local_message, "OFF", 3) == 0) {
 8015708:	2203      	movs	r2, #3
 801570a:	493a      	ldr	r1, [pc, #232]	@ (80157f4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x28c>)
 801570c:	4648      	mov	r0, r9
 801570e:	f017 f8ac 	bl	802c86a <strncmp>
 8015712:	2800      	cmp	r0, #0
 8015714:	d1a2      	bne.n	801565c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xf4>
				sw_w[relay_number-1] = 0;
 8015716:	f104 0317 	add.w	r3, r4, #23
 801571a:	446b      	add	r3, sp
 801571c:	2200      	movs	r2, #0
 801571e:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 8015722:	4b25      	ldr	r3, [pc, #148]	@ (80157b8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	2b01      	cmp	r3, #1
 8015728:	dc06      	bgt.n	8015738 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d0>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 801572a:	4b28      	ldr	r3, [pc, #160]	@ (80157cc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	2201      	movs	r2, #1
 8015730:	2102      	movs	r1, #2
 8015732:	a804      	add	r0, sp, #16
 8015734:	4798      	blx	r3
 8015736:	e028      	b.n	801578a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 8015738:	4b20      	ldr	r3, [pc, #128]	@ (80157bc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 801573a:	22f3      	movs	r2, #243	@ 0xf3
 801573c:	4920      	ldr	r1, [pc, #128]	@ (80157c0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 801573e:	2002      	movs	r0, #2
 8015740:	f012 f8be 	bl	80278c0 <mg_log_prefix>
 8015744:	9903      	ldr	r1, [sp, #12]
 8015746:	482c      	ldr	r0, [pc, #176]	@ (80157f8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x290>)
 8015748:	f00f ff52 	bl	80255f0 <mg_log>
 801574c:	e7ed      	b.n	801572a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1c2>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", local_message));
 801574e:	4b1b      	ldr	r3, [pc, #108]	@ (80157bc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8015750:	22f7      	movs	r2, #247	@ 0xf7
 8015752:	491b      	ldr	r1, [pc, #108]	@ (80157c0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8015754:	2001      	movs	r0, #1
 8015756:	f012 f8b3 	bl	80278c0 <mg_log_prefix>
 801575a:	4649      	mov	r1, r9
 801575c:	4820      	ldr	r0, [pc, #128]	@ (80157e0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x278>)
 801575e:	f00f ff47 	bl	80255f0 <mg_log>
 8015762:	e77f      	b.n	8015664 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xfc>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 8015764:	4b15      	ldr	r3, [pc, #84]	@ (80157bc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8015766:	22fc      	movs	r2, #252	@ 0xfc
 8015768:	4915      	ldr	r1, [pc, #84]	@ (80157c0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 801576a:	2001      	movs	r0, #1
 801576c:	f012 f8a8 	bl	80278c0 <mg_log_prefix>
 8015770:	4822      	ldr	r0, [pc, #136]	@ (80157fc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x294>)
 8015772:	f00f ff3d 	bl	80255f0 <mg_log>
 8015776:	e758      	b.n	801562a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xc2>
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", local_topic));
 8015778:	4b0f      	ldr	r3, [pc, #60]	@ (80157b8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	2b00      	cmp	r3, #0
 801577e:	dc0d      	bgt.n	801579c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x234>
    	logging(L_ERR, "Substring \"switch\" is not fount in topik %s. \n", local_topic);
 8015780:	4642      	mov	r2, r8
 8015782:	491f      	ldr	r1, [pc, #124]	@ (8015800 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x298>)
 8015784:	2003      	movs	r0, #3
 8015786:	f7fc fe5f 	bl	8012448 <logging>
    free(local_message);
 801578a:	4648      	mov	r0, r9
 801578c:	f006 fcc6 	bl	801c11c <vPortFree>
    free(local_topic);
 8015790:	4640      	mov	r0, r8
 8015792:	f006 fcc3 	bl	801c11c <vPortFree>
}
 8015796:	b007      	add	sp, #28
 8015798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", local_topic));
 801579c:	4b07      	ldr	r3, [pc, #28]	@ (80157bc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 801579e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80157a2:	4907      	ldr	r1, [pc, #28]	@ (80157c0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80157a4:	2001      	movs	r0, #1
 80157a6:	f012 f88b 	bl	80278c0 <mg_log_prefix>
 80157aa:	4641      	mov	r1, r8
 80157ac:	4814      	ldr	r0, [pc, #80]	@ (8015800 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x298>)
 80157ae:	f00f ff1f 	bl	80255f0 <mg_log>
 80157b2:	e7e5      	b.n	8015780 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>
 80157b4:	0803985c 	.word	0x0803985c
 80157b8:	2000013c 	.word	0x2000013c
 80157bc:	080397ec 	.word	0x080397ec
 80157c0:	0803980c 	.word	0x0803980c
 80157c4:	08039884 	.word	0x08039884
 80157c8:	08039838 	.word	0x08039838
 80157cc:	20002a08 	.word	0x20002a08
 80157d0:	080398b0 	.word	0x080398b0
 80157d4:	080398b8 	.word	0x080398b8
 80157d8:	08039a24 	.word	0x08039a24
 80157dc:	080398f0 	.word	0x080398f0
 80157e0:	080399b0 	.word	0x080399b0
 80157e4:	080398c4 	.word	0x080398c4
 80157e8:	08039930 	.word	0x08039930
 80157ec:	08039980 	.word	0x08039980
 80157f0:	08039984 	.word	0x08039984
 80157f4:	08039998 	.word	0x08039998
 80157f8:	0803999c 	.word	0x0803999c
 80157fc:	080399ec 	.word	0x080399ec
 8015800:	08039a5c 	.word	0x08039a5c

08015804 <_ZL18mqtt_event_handlerP13mg_connectioniPv>:
static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 8015804:	b570      	push	{r4, r5, r6, lr}
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 8015806:	2910      	cmp	r1, #16
 8015808:	d03a      	beq.n	8015880 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x7c>
 801580a:	4605      	mov	r5, r0
 801580c:	2911      	cmp	r1, #17
 801580e:	d00b      	beq.n	8015828 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x24>
 8015810:	2909      	cmp	r1, #9
 8015812:	d142      	bne.n	801589a <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x96>
		logging(L_INFO, "MQTT Close connection");
 8015814:	4921      	ldr	r1, [pc, #132]	@ (801589c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x98>)
 8015816:	2001      	movs	r0, #1
 8015818:	f7fc fe16 	bl	8012448 <logging>
		mqtt_conn     = NULL;
 801581c:	2300      	movs	r3, #0
 801581e:	4a20      	ldr	r2, [pc, #128]	@ (80158a0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9c>)
 8015820:	6013      	str	r3, [r2, #0]
		is_registered = false;
 8015822:	4a20      	ldr	r2, [pc, #128]	@ (80158a4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa0>)
 8015824:	7013      	strb	r3, [r2, #0]
}
 8015826:	e038      	b.n	801589a <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x96>
		MG_DEBUG(("MQTT_open_connection"));
 8015828:	4b1f      	ldr	r3, [pc, #124]	@ (80158a8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	2b02      	cmp	r3, #2
 801582e:	dc1c      	bgt.n	801586a <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x66>
		logging(L_INFO, "MQTT Open connection");
 8015830:	491e      	ldr	r1, [pc, #120]	@ (80158ac <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8015832:	2001      	movs	r0, #1
 8015834:	f7fc fe08 	bl	8012448 <logging>
		mqtt_conn = conn;
 8015838:	4b19      	ldr	r3, [pc, #100]	@ (80158a0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9c>)
 801583a:	601d      	str	r5, [r3, #0]
		if(!is_registered){
 801583c:	4b19      	ldr	r3, [pc, #100]	@ (80158a4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa0>)
 801583e:	781b      	ldrb	r3, [r3, #0]
 8015840:	bb5b      	cbnz	r3, 801589a <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x96>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8015842:	4e1b      	ldr	r6, [pc, #108]	@ (80158b0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xac>)
 8015844:	2208      	movs	r2, #8
 8015846:	4631      	mov	r1, r6
 8015848:	4628      	mov	r0, r5
 801584a:	f7ff fc45 	bl	80150d8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 801584e:	4c14      	ldr	r4, [pc, #80]	@ (80158a0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9c>)
 8015850:	2101      	movs	r1, #1
 8015852:	6820      	ldr	r0, [r4, #0]
 8015854:	f7ff fd68 	bl	8015328 <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8015858:	2208      	movs	r2, #8
 801585a:	4631      	mov	r1, r6
 801585c:	6820      	ldr	r0, [r4, #0]
 801585e:	f7ff fe41 	bl	80154e4 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 8015862:	4b10      	ldr	r3, [pc, #64]	@ (80158a4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa0>)
 8015864:	2201      	movs	r2, #1
 8015866:	701a      	strb	r2, [r3, #0]
 8015868:	e017      	b.n	801589a <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x96>
		MG_DEBUG(("MQTT_open_connection"));
 801586a:	4b12      	ldr	r3, [pc, #72]	@ (80158b4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb0>)
 801586c:	f240 1217 	movw	r2, #279	@ 0x117
 8015870:	4911      	ldr	r1, [pc, #68]	@ (80158b8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb4>)
 8015872:	2003      	movs	r0, #3
 8015874:	f012 f824 	bl	80278c0 <mg_log_prefix>
 8015878:	4810      	ldr	r0, [pc, #64]	@ (80158bc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb8>)
 801587a:	f00f feb9 	bl	80255f0 <mg_log>
 801587e:	e7d7      	b.n	8015830 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x2c>
 8015880:	4614      	mov	r4, r2
		logging(L_INFO, "Receive message from MQTT server");
 8015882:	490f      	ldr	r1, [pc, #60]	@ (80158c0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbc>)
 8015884:	2001      	movs	r0, #1
 8015886:	f7fc fddf 	bl	8012448 <logging>
		 mqtt_subscrabe_recv_cmd_parce(mm);
 801588a:	4620      	mov	r0, r4
 801588c:	f7ff fe6c 	bl	8015568 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 8015890:	2100      	movs	r1, #0
 8015892:	4b03      	ldr	r3, [pc, #12]	@ (80158a0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9c>)
 8015894:	6818      	ldr	r0, [r3, #0]
 8015896:	f7ff fd47 	bl	8015328 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 801589a:	bd70      	pop	{r4, r5, r6, pc}
 801589c:	08039af4 	.word	0x08039af4
 80158a0:	20002a2c 	.word	0x20002a2c
 80158a4:	20002a0c 	.word	0x20002a0c
 80158a8:	2000013c 	.word	0x2000013c
 80158ac:	08039ab8 	.word	0x08039ab8
 80158b0:	200000c8 	.word	0x200000c8
 80158b4:	08039a8c 	.word	0x08039a8c
 80158b8:	0803980c 	.word	0x0803980c
 80158bc:	08039aa0 	.word	0x08039aa0
 80158c0:	08039ad0 	.word	0x08039ad0

080158c4 <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
    return mqtt_conn;
}
 80158c4:	4b01      	ldr	r3, [pc, #4]	@ (80158cc <get_mqtt_connection+0x8>)
 80158c6:	6818      	ldr	r0, [r3, #0]
 80158c8:	4770      	bx	lr
 80158ca:	bf00      	nop
 80158cc:	20002a2c 	.word	0x20002a2c

080158d0 <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 80158d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158d4:	b086      	sub	sp, #24
 80158d6:	4607      	mov	r7, r0
 80158d8:	460d      	mov	r5, r1
 80158da:	4692      	mov	sl, r2
 80158dc:	461c      	mov	r4, r3

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 80158de:	2101      	movs	r1, #1
 80158e0:	2080      	movs	r0, #128	@ 0x80
 80158e2:	f7ff fc63 	bl	80151ac <_ZL9my_callocjj>
 80158e6:	f8df 91b0 	ldr.w	r9, [pc, #432]	@ 8015a98 <mqtt_init+0x1c8>
 80158ea:	f8c9 0000 	str.w	r0, [r9]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 80158ee:	2101      	movs	r1, #1
 80158f0:	2021      	movs	r0, #33	@ 0x21
 80158f2:	f7ff fc5b 	bl	80151ac <_ZL9my_callocjj>
 80158f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	@ 8015a9c <mqtt_init+0x1cc>
 80158fa:	f8c8 0000 	str.w	r0, [r8]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 80158fe:	2101      	movs	r1, #1
 8015900:	2021      	movs	r0, #33	@ 0x21
 8015902:	f7ff fc53 	bl	80151ac <_ZL9my_callocjj>
 8015906:	4e4e      	ldr	r6, [pc, #312]	@ (8015a40 <mqtt_init+0x170>)
 8015908:	6030      	str	r0, [r6, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 801590a:	2101      	movs	r1, #1
 801590c:	2080      	movs	r0, #128	@ 0x80
 801590e:	f7ff fc4d 	bl	80151ac <_ZL9my_callocjj>
 8015912:	4b4c      	ldr	r3, [pc, #304]	@ (8015a44 <mqtt_init+0x174>)
 8015914:	6018      	str	r0, [r3, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8015916:	2101      	movs	r1, #1
 8015918:	f44f 7016 	mov.w	r0, #600	@ 0x258
 801591c:	f7ff fc46 	bl	80151ac <_ZL9my_callocjj>
 8015920:	4b49      	ldr	r3, [pc, #292]	@ (8015a48 <mqtt_init+0x178>)
 8015922:	6018      	str	r0, [r3, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 8015924:	2101      	movs	r1, #1
 8015926:	2028      	movs	r0, #40	@ 0x28
 8015928:	f7ff fc40 	bl	80151ac <_ZL9my_callocjj>
 801592c:	4b47      	ldr	r3, [pc, #284]	@ (8015a4c <mqtt_init+0x17c>)
 801592e:	6018      	str	r0, [r3, #0]

	r_w_parameter   = fn;
 8015930:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015932:	4b47      	ldr	r3, [pc, #284]	@ (8015a50 <mqtt_init+0x180>)
 8015934:	601a      	str	r2, [r3, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 8015936:	4651      	mov	r1, sl
 8015938:	f8d9 0000 	ldr.w	r0, [r9]
 801593c:	f018 fcaa 	bl	802e294 <strcpy>
	strcpy(mqtt_username,   (char *)username);
 8015940:	4621      	mov	r1, r4
 8015942:	f8d8 0000 	ldr.w	r0, [r8]
 8015946:	f018 fca5 	bl	802e294 <strcpy>
	strcpy(mqtt_password,   (char *)password);
 801594a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801594c:	6830      	ldr	r0, [r6, #0]
 801594e:	f018 fca1 	bl	802e294 <strcpy>

	mgr = (struct mg_mgr *)     mgr_parameter;
 8015952:	4c40      	ldr	r4, [pc, #256]	@ (8015a54 <mqtt_init+0x184>)
 8015954:	6027      	str	r7, [r4, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 8015956:	4b40      	ldr	r3, [pc, #256]	@ (8015a58 <mqtt_init+0x188>)
 8015958:	601d      	str	r5, [r3, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 801595a:	2106      	movs	r1, #6
 801595c:	4628      	mov	r0, r5
 801595e:	f000 f8ad 	bl	8015abc <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 8015962:	4f3e      	ldr	r7, [pc, #248]	@ (8015a5c <mqtt_init+0x18c>)
 8015964:	ad04      	add	r5, sp, #16
 8015966:	f8d8 1000 	ldr.w	r1, [r8]
 801596a:	4628      	mov	r0, r5
 801596c:	f010 f81e 	bl	80259ac <mg_str_s>
 8015970:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015974:	e887 0003 	stmia.w	r7, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 8015978:	6831      	ldr	r1, [r6, #0]
 801597a:	4628      	mov	r0, r5
 801597c:	f010 f816 	bl	80259ac <mg_str_s>
 8015980:	f107 0308 	add.w	r3, r7, #8
 8015984:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015988:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= MQTT_KEEP_ALIVE;
 801598c:	233c      	movs	r3, #60	@ 0x3c
 801598e:	857b      	strh	r3, [r7, #42]	@ 0x2a
	mqtt_opts.clean 		= 1;
 8015990:	2601      	movs	r6, #1
 8015992:	f887 602f 	strb.w	r6, [r7, #47]	@ 0x2f

	logging(L_INFO, "Start MQTT task, server: %s, username: %s", mqtt_broker_url, mqtt_username);
 8015996:	f8d8 3000 	ldr.w	r3, [r8]
 801599a:	f8d9 2000 	ldr.w	r2, [r9]
 801599e:	4930      	ldr	r1, [pc, #192]	@ (8015a60 <mqtt_init+0x190>)
 80159a0:	4630      	mov	r0, r6
 80159a2:	f7fc fd51 	bl	8012448 <logging>

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */,		MG_TIMER_REPEAT | MG_TIMER_RUN_NOW,  	mqtt_timer_handler,                       NULL); // Timer for following connection and reconnect every 10 seconds if needed
 80159a6:	2500      	movs	r5, #0
 80159a8:	9502      	str	r5, [sp, #8]
 80159aa:	4b2e      	ldr	r3, [pc, #184]	@ (8015a64 <mqtt_init+0x194>)
 80159ac:	9301      	str	r3, [sp, #4]
 80159ae:	f04f 0803 	mov.w	r8, #3
 80159b2:	f8cd 8000 	str.w	r8, [sp]
 80159b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80159ba:	2300      	movs	r3, #0
 80159bc:	6820      	ldr	r0, [r4, #0]
 80159be:	f011 f9ed 	bl	8026d9c <mg_timer_add>
 80159c2:	4b29      	ldr	r3, [pc, #164]	@ (8015a68 <mqtt_init+0x198>)
 80159c4:	6018      	str	r0, [r3, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 300000 /* 300 seconds */,	MG_TIMER_REPEAT,                     	mqtt_pereodic_status_send_timer_handler,  NULL); // Timer for send io statuses every ~300 seconds
 80159c6:	9502      	str	r5, [sp, #8]
 80159c8:	4b28      	ldr	r3, [pc, #160]	@ (8015a6c <mqtt_init+0x19c>)
 80159ca:	9301      	str	r3, [sp, #4]
 80159cc:	9600      	str	r6, [sp, #0]
 80159ce:	4a28      	ldr	r2, [pc, #160]	@ (8015a70 <mqtt_init+0x1a0>)
 80159d0:	2300      	movs	r3, #0
 80159d2:	6820      	ldr	r0, [r4, #0]
 80159d4:	f011 f9e2 	bl	8026d9c <mg_timer_add>
 80159d8:	4b26      	ldr	r3, [pc, #152]	@ (8015a74 <mqtt_init+0x1a4>)
 80159da:	6018      	str	r0, [r3, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */,		MG_TIMER_REPEAT,                     	mqtt_timer_handler_cher_io_status,        NULL); // timer for follow io status every 0.5 seconds
 80159dc:	9502      	str	r5, [sp, #8]
 80159de:	4b26      	ldr	r3, [pc, #152]	@ (8015a78 <mqtt_init+0x1a8>)
 80159e0:	9301      	str	r3, [sp, #4]
 80159e2:	9600      	str	r6, [sp, #0]
 80159e4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80159e8:	2300      	movs	r3, #0
 80159ea:	6820      	ldr	r0, [r4, #0]
 80159ec:	f011 f9d6 	bl	8026d9c <mg_timer_add>
 80159f0:	4b22      	ldr	r3, [pc, #136]	@ (8015a7c <mqtt_init+0x1ac>)
 80159f2:	6018      	str	r0, [r3, #0]
	mqtt_timer_diagnostic_send =      mg_timer_add(mgr, 1200000 /* 1200 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW,		mqtt_timer_handler_send_diagnostic_data,  NULL); // Timer for send diagnostic data every 1200 seconds
 80159f4:	9502      	str	r5, [sp, #8]
 80159f6:	4f22      	ldr	r7, [pc, #136]	@ (8015a80 <mqtt_init+0x1b0>)
 80159f8:	9701      	str	r7, [sp, #4]
 80159fa:	f8cd 8000 	str.w	r8, [sp]
 80159fe:	4a21      	ldr	r2, [pc, #132]	@ (8015a84 <mqtt_init+0x1b4>)
 8015a00:	2300      	movs	r3, #0
 8015a02:	6820      	ldr	r0, [r4, #0]
 8015a04:	f011 f9ca 	bl	8026d9c <mg_timer_add>
 8015a08:	4b1f      	ldr	r3, [pc, #124]	@ (8015a88 <mqtt_init+0x1b8>)
 8015a0a:	6018      	str	r0, [r3, #0]
	mqtt_timer_diagnostic_send_onсe = mg_timer_add(mgr, 20000 /* 20 seconds */, 	MG_TIMER_ONCE,							mqtt_timer_handler_send_diagnostic_data,  NULL); // Timer for send diagnostic data with delay 20 seconds after start, once
 8015a0c:	9502      	str	r5, [sp, #8]
 8015a0e:	9701      	str	r7, [sp, #4]
 8015a10:	9500      	str	r5, [sp, #0]
 8015a12:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8015a16:	2300      	movs	r3, #0
 8015a18:	6820      	ldr	r0, [r4, #0]
 8015a1a:	f011 f9bf 	bl	8026d9c <mg_timer_add>
 8015a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8015a8c <mqtt_init+0x1bc>)
 8015a20:	6018      	str	r0, [r3, #0]
	mqtt_timer_ping =                 mg_timer_add(mgr, MQTT_PING_INTERVAL_MS , 	MG_TIMER_REPEAT,						mqtt_pereodic_ping_timer_handler,		  NULL); // Timer for send ping every MQTT_PING_INTERVAL_MS
 8015a22:	9502      	str	r5, [sp, #8]
 8015a24:	4b1a      	ldr	r3, [pc, #104]	@ (8015a90 <mqtt_init+0x1c0>)
 8015a26:	9301      	str	r3, [sp, #4]
 8015a28:	9600      	str	r6, [sp, #0]
 8015a2a:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8015a2e:	2300      	movs	r3, #0
 8015a30:	6820      	ldr	r0, [r4, #0]
 8015a32:	f011 f9b3 	bl	8026d9c <mg_timer_add>
 8015a36:	4b17      	ldr	r3, [pc, #92]	@ (8015a94 <mqtt_init+0x1c4>)
 8015a38:	6018      	str	r0, [r3, #0]
}
 8015a3a:	b006      	add	sp, #24
 8015a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a40:	20002a80 	.word	0x20002a80
 8015a44:	20002a7c 	.word	0x20002a7c
 8015a48:	20002a78 	.word	0x20002a78
 8015a4c:	20002a28 	.word	0x20002a28
 8015a50:	20002a08 	.word	0x20002a08
 8015a54:	20002a74 	.word	0x20002a74
 8015a58:	20002a70 	.word	0x20002a70
 8015a5c:	20002a30 	.word	0x20002a30
 8015a60:	08039b0c 	.word	0x08039b0c
 8015a64:	08015049 	.word	0x08015049
 8015a68:	20002a24 	.word	0x20002a24
 8015a6c:	080154c5 	.word	0x080154c5
 8015a70:	000493e0 	.word	0x000493e0
 8015a74:	20002a20 	.word	0x20002a20
 8015a78:	080154a5 	.word	0x080154a5
 8015a7c:	20002a1c 	.word	0x20002a1c
 8015a80:	080152fd 	.word	0x080152fd
 8015a84:	00124f80 	.word	0x00124f80
 8015a88:	20002a18 	.word	0x20002a18
 8015a8c:	20002a14 	.word	0x20002a14
 8015a90:	0801502d 	.word	0x0801502d
 8015a94:	20002a10 	.word	0x20002a10
 8015a98:	20002a88 	.word	0x20002a88
 8015a9c:	20002a84 	.word	0x20002a84

08015aa0 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8015aa0:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8015aa2:	fb01 f400 	mul.w	r4, r1, r0
 8015aa6:	4620      	mov	r0, r4
 8015aa8:	f006 fab6 	bl	801c018 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8015aac:	4605      	mov	r5, r0
 8015aae:	b118      	cbz	r0, 8015ab8 <_ZL9my_callocjj+0x18>
 8015ab0:	4622      	mov	r2, r4
 8015ab2:	2100      	movs	r1, #0
 8015ab4:	f016 fea4 	bl	802c800 <memset>
}
 8015ab8:	4628      	mov	r0, r5
 8015aba:	bd38      	pop	{r3, r4, r5, pc}

08015abc <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 8015abc:	b570      	push	{r4, r5, r6, lr}
 8015abe:	4606      	mov	r6, r0
 8015ac0:	460d      	mov	r5, r1

	if ( unical_id){
 8015ac2:	4b10      	ldr	r3, [pc, #64]	@ (8015b04 <set_device_id+0x48>)
 8015ac4:	6818      	ldr	r0, [r3, #0]
 8015ac6:	b108      	cbz	r0, 8015acc <set_device_id+0x10>
		free(unical_id);
 8015ac8:	f006 fb28 	bl	801c11c <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8015acc:	0068      	lsls	r0, r5, #1
 8015ace:	2101      	movs	r1, #1
 8015ad0:	4408      	add	r0, r1
 8015ad2:	f7ff ffe5 	bl	8015aa0 <_ZL9my_callocjj>
 8015ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8015b04 <set_device_id+0x48>)
 8015ad8:	6018      	str	r0, [r3, #0]


	if (unical_id){
 8015ada:	b108      	cbz	r0, 8015ae0 <set_device_id+0x24>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 8015adc:	2400      	movs	r4, #0
 8015ade:	e00b      	b.n	8015af8 <set_device_id+0x3c>
            sprintf(&unical_id[i * 2], "%02X", id[i]);
        }

        unical_id_len = id_len;
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 8015ae0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015ae4:	e00d      	b.n	8015b02 <set_device_id+0x46>
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 8015ae6:	4b07      	ldr	r3, [pc, #28]	@ (8015b04 <set_device_id+0x48>)
 8015ae8:	6818      	ldr	r0, [r3, #0]
 8015aea:	5d32      	ldrb	r2, [r6, r4]
 8015aec:	4906      	ldr	r1, [pc, #24]	@ (8015b08 <set_device_id+0x4c>)
 8015aee:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8015af2:	f016 fc91 	bl	802c418 <sprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 8015af6:	3401      	adds	r4, #1
 8015af8:	42ac      	cmp	r4, r5
 8015afa:	d3f4      	bcc.n	8015ae6 <set_device_id+0x2a>
        unical_id_len = id_len;
 8015afc:	4b03      	ldr	r3, [pc, #12]	@ (8015b0c <set_device_id+0x50>)
 8015afe:	601d      	str	r5, [r3, #0]
	}

	return NO_ERR; // Успешно
 8015b00:	2000      	movs	r0, #0
}
 8015b02:	bd70      	pop	{r4, r5, r6, pc}
 8015b04:	20002a94 	.word	0x20002a94
 8015b08:	08039b38 	.word	0x08039b38
 8015b0c:	20002a90 	.word	0x20002a90

08015b10 <set_device_conf_ip>:
        *len = 0;
        return NOT_FOUND;
    }
}

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 8015b10:	b538      	push	{r3, r4, r5, lr}
 8015b12:	4605      	mov	r5, r0
 8015b14:	460c      	mov	r4, r1

	if(dev_conf_ip){
 8015b16:	4b0c      	ldr	r3, [pc, #48]	@ (8015b48 <set_device_conf_ip+0x38>)
 8015b18:	6818      	ldr	r0, [r3, #0]
 8015b1a:	b108      	cbz	r0, 8015b20 <set_device_conf_ip+0x10>
		free(dev_conf_ip);
 8015b1c:	f006 fafe 	bl	801c11c <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len+1, sizeof(char)); // +1 для нулевого символа
 8015b20:	2101      	movs	r1, #1
 8015b22:	1860      	adds	r0, r4, r1
 8015b24:	f7ff ffbc 	bl	8015aa0 <_ZL9my_callocjj>
 8015b28:	4b07      	ldr	r3, [pc, #28]	@ (8015b48 <set_device_conf_ip+0x38>)
 8015b2a:	6018      	str	r0, [r3, #0]

	if(dev_conf_ip){
 8015b2c:	b140      	cbz	r0, 8015b40 <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 8015b2e:	4622      	mov	r2, r4
 8015b30:	4629      	mov	r1, r5
 8015b32:	f016 feac 	bl	802c88e <strncpy>
		dev_conf_ip[ip_len] = '\0'; // Явно добавляем нулевой символ
 8015b36:	4b04      	ldr	r3, [pc, #16]	@ (8015b48 <set_device_conf_ip+0x38>)
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	2000      	movs	r0, #0
 8015b3c:	5518      	strb	r0, [r3, r4]
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
}
 8015b3e:	bd38      	pop	{r3, r4, r5, pc}
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 8015b40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015b44:	e7fb      	b.n	8015b3e <set_device_conf_ip+0x2e>
 8015b46:	bf00      	nop
 8015b48:	20002a8c 	.word	0x20002a8c

08015b4c <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 8015b4c:	b500      	push	{lr}
 8015b4e:	b087      	sub	sp, #28

	strcpy(buff, "");
 8015b50:	f04f 0c00 	mov.w	ip, #0
 8015b54:	f880 c000 	strb.w	ip, [r0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 8015b58:	3a01      	subs	r2, #1
 8015b5a:	2a09      	cmp	r2, #9
 8015b5c:	f200 80ad 	bhi.w	8015cba <get_config_topik_string+0x16e>
 8015b60:	e8df f012 	tbh	[pc, r2, lsl #1]
 8015b64:	001c000a 	.word	0x001c000a
 8015b68:	006b004b 	.word	0x006b004b
 8015b6c:	008b005b 	.word	0x008b005b
 8015b70:	007b009b 	.word	0x007b009b
 8015b74:	003b002b 	.word	0x003b002b
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 8015b78:	9304      	str	r3, [sp, #16]
 8015b7a:	4b51      	ldr	r3, [pc, #324]	@ (8015cc0 <get_config_topik_string+0x174>)
 8015b7c:	9303      	str	r3, [sp, #12]
 8015b7e:	4b51      	ldr	r3, [pc, #324]	@ (8015cc4 <get_config_topik_string+0x178>)
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	9302      	str	r3, [sp, #8]
 8015b84:	4b50      	ldr	r3, [pc, #320]	@ (8015cc8 <get_config_topik_string+0x17c>)
 8015b86:	9301      	str	r3, [sp, #4]
 8015b88:	4b50      	ldr	r3, [pc, #320]	@ (8015ccc <get_config_topik_string+0x180>)
 8015b8a:	9300      	str	r3, [sp, #0]
 8015b8c:	4b50      	ldr	r3, [pc, #320]	@ (8015cd0 <get_config_topik_string+0x184>)
 8015b8e:	4a51      	ldr	r2, [pc, #324]	@ (8015cd4 <get_config_topik_string+0x188>)
 8015b90:	f016 fc0c 	bl	802c3ac <snprintf>
			return -1;
			break;
	}


	return 0;
 8015b94:	2000      	movs	r0, #0
}
 8015b96:	b007      	add	sp, #28
 8015b98:	f85d fb04 	ldr.w	pc, [sp], #4
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 8015b9c:	9304      	str	r3, [sp, #16]
 8015b9e:	4b4e      	ldr	r3, [pc, #312]	@ (8015cd8 <get_config_topik_string+0x18c>)
 8015ba0:	9303      	str	r3, [sp, #12]
 8015ba2:	4a48      	ldr	r2, [pc, #288]	@ (8015cc4 <get_config_topik_string+0x178>)
 8015ba4:	6812      	ldr	r2, [r2, #0]
 8015ba6:	9202      	str	r2, [sp, #8]
 8015ba8:	4a47      	ldr	r2, [pc, #284]	@ (8015cc8 <get_config_topik_string+0x17c>)
 8015baa:	9201      	str	r2, [sp, #4]
 8015bac:	9300      	str	r3, [sp, #0]
 8015bae:	4b48      	ldr	r3, [pc, #288]	@ (8015cd0 <get_config_topik_string+0x184>)
 8015bb0:	4a48      	ldr	r2, [pc, #288]	@ (8015cd4 <get_config_topik_string+0x188>)
 8015bb2:	f016 fbfb 	bl	802c3ac <snprintf>
	return 0;
 8015bb6:	2000      	movs	r0, #0
			break;
 8015bb8:	e7ed      	b.n	8015b96 <get_config_topik_string+0x4a>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, component_battery, obj_number);
 8015bba:	9304      	str	r3, [sp, #16]
 8015bbc:	4b47      	ldr	r3, [pc, #284]	@ (8015cdc <get_config_topik_string+0x190>)
 8015bbe:	9303      	str	r3, [sp, #12]
 8015bc0:	4b40      	ldr	r3, [pc, #256]	@ (8015cc4 <get_config_topik_string+0x178>)
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	9302      	str	r3, [sp, #8]
 8015bc6:	4b40      	ldr	r3, [pc, #256]	@ (8015cc8 <get_config_topik_string+0x17c>)
 8015bc8:	9301      	str	r3, [sp, #4]
 8015bca:	4b45      	ldr	r3, [pc, #276]	@ (8015ce0 <get_config_topik_string+0x194>)
 8015bcc:	9300      	str	r3, [sp, #0]
 8015bce:	4b40      	ldr	r3, [pc, #256]	@ (8015cd0 <get_config_topik_string+0x184>)
 8015bd0:	4a40      	ldr	r2, [pc, #256]	@ (8015cd4 <get_config_topik_string+0x188>)
 8015bd2:	f016 fbeb 	bl	802c3ac <snprintf>
	return 0;
 8015bd6:	2000      	movs	r0, #0
			break;
 8015bd8:	e7dd      	b.n	8015b96 <get_config_topik_string+0x4a>
	    	snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, component_power_supply, obj_number);
 8015bda:	9304      	str	r3, [sp, #16]
 8015bdc:	4b41      	ldr	r3, [pc, #260]	@ (8015ce4 <get_config_topik_string+0x198>)
 8015bde:	9303      	str	r3, [sp, #12]
 8015be0:	4b38      	ldr	r3, [pc, #224]	@ (8015cc4 <get_config_topik_string+0x178>)
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	9302      	str	r3, [sp, #8]
 8015be6:	4b38      	ldr	r3, [pc, #224]	@ (8015cc8 <get_config_topik_string+0x17c>)
 8015be8:	9301      	str	r3, [sp, #4]
 8015bea:	4b3d      	ldr	r3, [pc, #244]	@ (8015ce0 <get_config_topik_string+0x194>)
 8015bec:	9300      	str	r3, [sp, #0]
 8015bee:	4b38      	ldr	r3, [pc, #224]	@ (8015cd0 <get_config_topik_string+0x184>)
 8015bf0:	4a38      	ldr	r2, [pc, #224]	@ (8015cd4 <get_config_topik_string+0x188>)
 8015bf2:	f016 fbdb 	bl	802c3ac <snprintf>
	return 0;
 8015bf6:	2000      	movs	r0, #0
	    	break;
 8015bf8:	e7cd      	b.n	8015b96 <get_config_topik_string+0x4a>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 8015bfa:	9304      	str	r3, [sp, #16]
 8015bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8015ce8 <get_config_topik_string+0x19c>)
 8015bfe:	9303      	str	r3, [sp, #12]
 8015c00:	4b30      	ldr	r3, [pc, #192]	@ (8015cc4 <get_config_topik_string+0x178>)
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	9302      	str	r3, [sp, #8]
 8015c06:	4b30      	ldr	r3, [pc, #192]	@ (8015cc8 <get_config_topik_string+0x17c>)
 8015c08:	9301      	str	r3, [sp, #4]
 8015c0a:	4b35      	ldr	r3, [pc, #212]	@ (8015ce0 <get_config_topik_string+0x194>)
 8015c0c:	9300      	str	r3, [sp, #0]
 8015c0e:	4b30      	ldr	r3, [pc, #192]	@ (8015cd0 <get_config_topik_string+0x184>)
 8015c10:	4a30      	ldr	r2, [pc, #192]	@ (8015cd4 <get_config_topik_string+0x188>)
 8015c12:	f016 fbcb 	bl	802c3ac <snprintf>
	return 0;
 8015c16:	2000      	movs	r0, #0
			break;
 8015c18:	e7bd      	b.n	8015b96 <get_config_topik_string+0x4a>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 8015c1a:	9304      	str	r3, [sp, #16]
 8015c1c:	4b33      	ldr	r3, [pc, #204]	@ (8015cec <get_config_topik_string+0x1a0>)
 8015c1e:	9303      	str	r3, [sp, #12]
 8015c20:	4b28      	ldr	r3, [pc, #160]	@ (8015cc4 <get_config_topik_string+0x178>)
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	9302      	str	r3, [sp, #8]
 8015c26:	4b28      	ldr	r3, [pc, #160]	@ (8015cc8 <get_config_topik_string+0x17c>)
 8015c28:	9301      	str	r3, [sp, #4]
 8015c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8015ce0 <get_config_topik_string+0x194>)
 8015c2c:	9300      	str	r3, [sp, #0]
 8015c2e:	4b28      	ldr	r3, [pc, #160]	@ (8015cd0 <get_config_topik_string+0x184>)
 8015c30:	4a28      	ldr	r2, [pc, #160]	@ (8015cd4 <get_config_topik_string+0x188>)
 8015c32:	f016 fbbb 	bl	802c3ac <snprintf>
	return 0;
 8015c36:	2000      	movs	r0, #0
			break;
 8015c38:	e7ad      	b.n	8015b96 <get_config_topik_string+0x4a>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 8015c3a:	9304      	str	r3, [sp, #16]
 8015c3c:	4b2c      	ldr	r3, [pc, #176]	@ (8015cf0 <get_config_topik_string+0x1a4>)
 8015c3e:	9303      	str	r3, [sp, #12]
 8015c40:	4b20      	ldr	r3, [pc, #128]	@ (8015cc4 <get_config_topik_string+0x178>)
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	9302      	str	r3, [sp, #8]
 8015c46:	4b20      	ldr	r3, [pc, #128]	@ (8015cc8 <get_config_topik_string+0x17c>)
 8015c48:	9301      	str	r3, [sp, #4]
 8015c4a:	4b25      	ldr	r3, [pc, #148]	@ (8015ce0 <get_config_topik_string+0x194>)
 8015c4c:	9300      	str	r3, [sp, #0]
 8015c4e:	4b20      	ldr	r3, [pc, #128]	@ (8015cd0 <get_config_topik_string+0x184>)
 8015c50:	4a20      	ldr	r2, [pc, #128]	@ (8015cd4 <get_config_topik_string+0x188>)
 8015c52:	f016 fbab 	bl	802c3ac <snprintf>
	return 0;
 8015c56:	2000      	movs	r0, #0
			break;
 8015c58:	e79d      	b.n	8015b96 <get_config_topik_string+0x4a>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 8015c5a:	9304      	str	r3, [sp, #16]
 8015c5c:	4b25      	ldr	r3, [pc, #148]	@ (8015cf4 <get_config_topik_string+0x1a8>)
 8015c5e:	9303      	str	r3, [sp, #12]
 8015c60:	4b18      	ldr	r3, [pc, #96]	@ (8015cc4 <get_config_topik_string+0x178>)
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	9302      	str	r3, [sp, #8]
 8015c66:	4b18      	ldr	r3, [pc, #96]	@ (8015cc8 <get_config_topik_string+0x17c>)
 8015c68:	9301      	str	r3, [sp, #4]
 8015c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8015ce0 <get_config_topik_string+0x194>)
 8015c6c:	9300      	str	r3, [sp, #0]
 8015c6e:	4b18      	ldr	r3, [pc, #96]	@ (8015cd0 <get_config_topik_string+0x184>)
 8015c70:	4a18      	ldr	r2, [pc, #96]	@ (8015cd4 <get_config_topik_string+0x188>)
 8015c72:	f016 fb9b 	bl	802c3ac <snprintf>
	return 0;
 8015c76:	2000      	movs	r0, #0
			break;
 8015c78:	e78d      	b.n	8015b96 <get_config_topik_string+0x4a>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 8015c7a:	9304      	str	r3, [sp, #16]
 8015c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8015cf8 <get_config_topik_string+0x1ac>)
 8015c7e:	9303      	str	r3, [sp, #12]
 8015c80:	4b10      	ldr	r3, [pc, #64]	@ (8015cc4 <get_config_topik_string+0x178>)
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	9302      	str	r3, [sp, #8]
 8015c86:	4b10      	ldr	r3, [pc, #64]	@ (8015cc8 <get_config_topik_string+0x17c>)
 8015c88:	9301      	str	r3, [sp, #4]
 8015c8a:	4b15      	ldr	r3, [pc, #84]	@ (8015ce0 <get_config_topik_string+0x194>)
 8015c8c:	9300      	str	r3, [sp, #0]
 8015c8e:	4b10      	ldr	r3, [pc, #64]	@ (8015cd0 <get_config_topik_string+0x184>)
 8015c90:	4a10      	ldr	r2, [pc, #64]	@ (8015cd4 <get_config_topik_string+0x188>)
 8015c92:	f016 fb8b 	bl	802c3ac <snprintf>
	return 0;
 8015c96:	2000      	movs	r0, #0
			break;
 8015c98:	e77d      	b.n	8015b96 <get_config_topik_string+0x4a>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 8015c9a:	9304      	str	r3, [sp, #16]
 8015c9c:	4b17      	ldr	r3, [pc, #92]	@ (8015cfc <get_config_topik_string+0x1b0>)
 8015c9e:	9303      	str	r3, [sp, #12]
 8015ca0:	4b08      	ldr	r3, [pc, #32]	@ (8015cc4 <get_config_topik_string+0x178>)
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	9302      	str	r3, [sp, #8]
 8015ca6:	4b08      	ldr	r3, [pc, #32]	@ (8015cc8 <get_config_topik_string+0x17c>)
 8015ca8:	9301      	str	r3, [sp, #4]
 8015caa:	4b0d      	ldr	r3, [pc, #52]	@ (8015ce0 <get_config_topik_string+0x194>)
 8015cac:	9300      	str	r3, [sp, #0]
 8015cae:	4b08      	ldr	r3, [pc, #32]	@ (8015cd0 <get_config_topik_string+0x184>)
 8015cb0:	4a08      	ldr	r2, [pc, #32]	@ (8015cd4 <get_config_topik_string+0x188>)
 8015cb2:	f016 fb7b 	bl	802c3ac <snprintf>
	return 0;
 8015cb6:	2000      	movs	r0, #0
			break;
 8015cb8:	e76d      	b.n	8015b96 <get_config_topik_string+0x4a>
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 8015cba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015cbe:	e76a      	b.n	8015b96 <get_config_topik_string+0x4a>
 8015cc0:	08039b58 	.word	0x08039b58
 8015cc4:	20002a94 	.word	0x20002a94
 8015cc8:	08039220 	.word	0x08039220
 8015ccc:	08039b60 	.word	0x08039b60
 8015cd0:	20000108 	.word	0x20000108
 8015cd4:	08039b40 	.word	0x08039b40
 8015cd8:	080398b0 	.word	0x080398b0
 8015cdc:	08039b70 	.word	0x08039b70
 8015ce0:	08039b78 	.word	0x08039b78
 8015ce4:	08039b80 	.word	0x08039b80
 8015ce8:	08039b90 	.word	0x08039b90
 8015cec:	08039b98 	.word	0x08039b98
 8015cf0:	08039ba0 	.word	0x08039ba0
 8015cf4:	08039ba8 	.word	0x08039ba8
 8015cf8:	08039bb8 	.word	0x08039bb8
 8015cfc:	08039bc8 	.word	0x08039bc8

08015d00 <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 8015d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d04:	b097      	sub	sp, #92	@ 0x5c
 8015d06:	4606      	mov	r6, r0
 8015d08:	460d      	mov	r5, r1
 8015d0a:	4617      	mov	r7, r2
 8015d0c:	461c      	mov	r4, r3

	uint8_t len = 0;
	char * name      = NULL;
	char * com_topik = NULL;
	memset(payload, 0, payload_len * sizeof(char));
 8015d0e:	460a      	mov	r2, r1
 8015d10:	2100      	movs	r1, #0
 8015d12:	f016 fd75 	bl	802c800 <memset>

	switch (payload_type) {
 8015d16:	1e7a      	subs	r2, r7, #1
 8015d18:	2a09      	cmp	r2, #9
 8015d1a:	f200 8253 	bhi.w	80161c4 <get_config_payload_string+0x4c4>
 8015d1e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8015d22:	000a      	.short	0x000a
 8015d24:	01610048 	.word	0x01610048
 8015d28:	018901b1 	.word	0x018901b1
 8015d2c:	02290201 	.word	0x02290201
 8015d30:	00aa01d9 	.word	0x00aa01d9
 8015d34:	00e9      	.short	0x00e9

		case INPUT_SENSOR:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8015d36:	2101      	movs	r1, #1
 8015d38:	2080      	movs	r0, #128	@ 0x80
 8015d3a:	f7ff feb1 	bl	8015aa0 <_ZL9my_callocjj>
 8015d3e:	4607      	mov	r7, r0
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 8015d40:	9400      	str	r4, [sp, #0]
 8015d42:	4b8e      	ldr	r3, [pc, #568]	@ (8015f7c <get_config_payload_string+0x27c>)
 8015d44:	4a8e      	ldr	r2, [pc, #568]	@ (8015f80 <get_config_payload_string+0x280>)
 8015d46:	2180      	movs	r1, #128	@ 0x80
 8015d48:	f016 fb30 	bl	802c3ac <snprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, sec_5m, dev_system, \
 8015d4c:	4b8d      	ldr	r3, [pc, #564]	@ (8015f84 <get_config_payload_string+0x284>)
 8015d4e:	681a      	ldr	r2, [r3, #0]
 8015d50:	4b8d      	ldr	r3, [pc, #564]	@ (8015f88 <get_config_payload_string+0x288>)
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	9315      	str	r3, [sp, #84]	@ 0x54
 8015d56:	4b8d      	ldr	r3, [pc, #564]	@ (8015f8c <get_config_payload_string+0x28c>)
 8015d58:	9314      	str	r3, [sp, #80]	@ 0x50
 8015d5a:	4b8d      	ldr	r3, [pc, #564]	@ (8015f90 <get_config_payload_string+0x290>)
 8015d5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015d5e:	4b8d      	ldr	r3, [pc, #564]	@ (8015f94 <get_config_payload_string+0x294>)
 8015d60:	9312      	str	r3, [sp, #72]	@ 0x48
 8015d62:	4b8d      	ldr	r3, [pc, #564]	@ (8015f98 <get_config_payload_string+0x298>)
 8015d64:	9311      	str	r3, [sp, #68]	@ 0x44
 8015d66:	4b8d      	ldr	r3, [pc, #564]	@ (8015f9c <get_config_payload_string+0x29c>)
 8015d68:	9310      	str	r3, [sp, #64]	@ 0x40
 8015d6a:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015d6c:	4b8c      	ldr	r3, [pc, #560]	@ (8015fa0 <get_config_payload_string+0x2a0>)
 8015d6e:	930e      	str	r3, [sp, #56]	@ 0x38
 8015d70:	498c      	ldr	r1, [pc, #560]	@ (8015fa4 <get_config_payload_string+0x2a4>)
 8015d72:	910d      	str	r1, [sp, #52]	@ 0x34
 8015d74:	940c      	str	r4, [sp, #48]	@ 0x30
 8015d76:	498c      	ldr	r1, [pc, #560]	@ (8015fa8 <get_config_payload_string+0x2a8>)
 8015d78:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015d7a:	920a      	str	r2, [sp, #40]	@ 0x28
 8015d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d7e:	9708      	str	r7, [sp, #32]
 8015d80:	488a      	ldr	r0, [pc, #552]	@ (8015fac <get_config_payload_string+0x2ac>)
 8015d82:	9007      	str	r0, [sp, #28]
 8015d84:	9406      	str	r4, [sp, #24]
 8015d86:	9105      	str	r1, [sp, #20]
 8015d88:	9404      	str	r4, [sp, #16]
 8015d8a:	9103      	str	r1, [sp, #12]
 8015d8c:	9202      	str	r2, [sp, #8]
 8015d8e:	9301      	str	r3, [sp, #4]
 8015d90:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8015d94:	9300      	str	r3, [sp, #0]
 8015d96:	4b86      	ldr	r3, [pc, #536]	@ (8015fb0 <get_config_payload_string+0x2b0>)
 8015d98:	4a86      	ldr	r2, [pc, #536]	@ (8015fb4 <get_config_payload_string+0x2b4>)
 8015d9a:	4629      	mov	r1, r5
 8015d9c:	4630      	mov	r0, r6
 8015d9e:	f016 fb05 	bl	802c3ac <snprintf>
 8015da2:	4604      	mov	r4, r0
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 8015da4:	4638      	mov	r0, r7
 8015da6:	f006 f9b9 	bl	801c11c <vPortFree>

			return len;
 8015daa:	b2e0      	uxtb	r0, r4

		default:
			return -1;
			break;
	}
}
 8015dac:	b017      	add	sp, #92	@ 0x5c
 8015dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8015db2:	2101      	movs	r1, #1
 8015db4:	2080      	movs	r0, #128	@ 0x80
 8015db6:	f7ff fe73 	bl	8015aa0 <_ZL9my_callocjj>
 8015dba:	4607      	mov	r7, r0
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8015dbc:	2101      	movs	r1, #1
 8015dbe:	2080      	movs	r0, #128	@ 0x80
 8015dc0:	f7ff fe6e 	bl	8015aa0 <_ZL9my_callocjj>
 8015dc4:	4680      	mov	r8, r0
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 8015dc6:	f8df 9214 	ldr.w	r9, [pc, #532]	@ 8015fdc <get_config_payload_string+0x2dc>
 8015dca:	9400      	str	r4, [sp, #0]
 8015dcc:	464b      	mov	r3, r9
 8015dce:	4a7a      	ldr	r2, [pc, #488]	@ (8015fb8 <get_config_payload_string+0x2b8>)
 8015dd0:	2180      	movs	r1, #128	@ 0x80
 8015dd2:	4638      	mov	r0, r7
 8015dd4:	f016 faea 	bl	802c3ac <snprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 8015dd8:	f8df a1c4 	ldr.w	sl, [pc, #452]	@ 8015fa0 <get_config_payload_string+0x2a0>
 8015ddc:	4b71      	ldr	r3, [pc, #452]	@ (8015fa4 <get_config_payload_string+0x2a4>)
 8015dde:	9302      	str	r3, [sp, #8]
 8015de0:	9701      	str	r7, [sp, #4]
 8015de2:	f8df b1a0 	ldr.w	fp, [pc, #416]	@ 8015f84 <get_config_payload_string+0x284>
 8015de6:	f8db 3000 	ldr.w	r3, [fp]
 8015dea:	9300      	str	r3, [sp, #0]
 8015dec:	4653      	mov	r3, sl
 8015dee:	4a73      	ldr	r2, [pc, #460]	@ (8015fbc <get_config_payload_string+0x2bc>)
 8015df0:	2180      	movs	r1, #128	@ 0x80
 8015df2:	4640      	mov	r0, r8
 8015df4:	f016 fada 	bl	802c3ac <snprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 8015df8:	9400      	str	r4, [sp, #0]
 8015dfa:	4b71      	ldr	r3, [pc, #452]	@ (8015fc0 <get_config_payload_string+0x2c0>)
 8015dfc:	4a60      	ldr	r2, [pc, #384]	@ (8015f80 <get_config_payload_string+0x280>)
 8015dfe:	2180      	movs	r1, #128	@ 0x80
 8015e00:	4638      	mov	r0, r7
 8015e02:	f016 fad3 	bl	802c3ac <snprintf>
			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, sec_5m, dev_system, \
 8015e06:	f8db 3000 	ldr.w	r3, [fp]
 8015e0a:	4a5f      	ldr	r2, [pc, #380]	@ (8015f88 <get_config_payload_string+0x288>)
 8015e0c:	6812      	ldr	r2, [r2, #0]
 8015e0e:	9215      	str	r2, [sp, #84]	@ 0x54
 8015e10:	4a5e      	ldr	r2, [pc, #376]	@ (8015f8c <get_config_payload_string+0x28c>)
 8015e12:	9214      	str	r2, [sp, #80]	@ 0x50
 8015e14:	4a5e      	ldr	r2, [pc, #376]	@ (8015f90 <get_config_payload_string+0x290>)
 8015e16:	9213      	str	r2, [sp, #76]	@ 0x4c
 8015e18:	4a5e      	ldr	r2, [pc, #376]	@ (8015f94 <get_config_payload_string+0x294>)
 8015e1a:	9212      	str	r2, [sp, #72]	@ 0x48
 8015e1c:	4a5e      	ldr	r2, [pc, #376]	@ (8015f98 <get_config_payload_string+0x298>)
 8015e1e:	9211      	str	r2, [sp, #68]	@ 0x44
 8015e20:	4a5e      	ldr	r2, [pc, #376]	@ (8015f9c <get_config_payload_string+0x29c>)
 8015e22:	9210      	str	r2, [sp, #64]	@ 0x40
 8015e24:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015e26:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 8015e2a:	4a5e      	ldr	r2, [pc, #376]	@ (8015fa4 <get_config_payload_string+0x2a4>)
 8015e2c:	920d      	str	r2, [sp, #52]	@ 0x34
 8015e2e:	940c      	str	r4, [sp, #48]	@ 0x30
 8015e30:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 8015e34:	930a      	str	r3, [sp, #40]	@ 0x28
 8015e36:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8015e3a:	9708      	str	r7, [sp, #32]
 8015e3c:	f8cd 801c 	str.w	r8, [sp, #28]
 8015e40:	9406      	str	r4, [sp, #24]
 8015e42:	f8cd 9014 	str.w	r9, [sp, #20]
 8015e46:	9404      	str	r4, [sp, #16]
 8015e48:	f8cd 900c 	str.w	r9, [sp, #12]
 8015e4c:	9302      	str	r3, [sp, #8]
 8015e4e:	f8cd a004 	str.w	sl, [sp, #4]
 8015e52:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8015e56:	9300      	str	r3, [sp, #0]
 8015e58:	464b      	mov	r3, r9
 8015e5a:	4a56      	ldr	r2, [pc, #344]	@ (8015fb4 <get_config_payload_string+0x2b4>)
 8015e5c:	4629      	mov	r1, r5
 8015e5e:	4630      	mov	r0, r6
 8015e60:	f016 faa4 	bl	802c3ac <snprintf>
 8015e64:	4604      	mov	r4, r0
			free(name);
 8015e66:	4638      	mov	r0, r7
 8015e68:	f006 f958 	bl	801c11c <vPortFree>
			free(com_topik);
 8015e6c:	4640      	mov	r0, r8
 8015e6e:	f006 f955 	bl	801c11c <vPortFree>
			return len;
 8015e72:	b2e0      	uxtb	r0, r4
 8015e74:	e79a      	b.n	8015dac <get_config_payload_string+0xac>
			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8015e76:	2101      	movs	r1, #1
 8015e78:	2080      	movs	r0, #128	@ 0x80
 8015e7a:	f7ff fe11 	bl	8015aa0 <_ZL9my_callocjj>
 8015e7e:	4607      	mov	r7, r0
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s", component_battery_human);
 8015e80:	4b50      	ldr	r3, [pc, #320]	@ (8015fc4 <get_config_payload_string+0x2c4>)
 8015e82:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015e84:	6038      	str	r0, [r7, #0]
 8015e86:	6079      	str	r1, [r7, #4]
 8015e88:	60ba      	str	r2, [r7, #8]
 8015e8a:	881a      	ldrh	r2, [r3, #0]
 8015e8c:	789b      	ldrb	r3, [r3, #2]
 8015e8e:	81ba      	strh	r2, [r7, #12]
 8015e90:	73bb      	strb	r3, [r7, #14]
			len = snprintf(payload, payload_len, universal_conf_template, dev_class_voltage, sec_2h, dev_system, \
 8015e92:	4b3c      	ldr	r3, [pc, #240]	@ (8015f84 <get_config_payload_string+0x284>)
 8015e94:	681a      	ldr	r2, [r3, #0]
 8015e96:	4b3c      	ldr	r3, [pc, #240]	@ (8015f88 <get_config_payload_string+0x288>)
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	9315      	str	r3, [sp, #84]	@ 0x54
 8015e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8015f8c <get_config_payload_string+0x28c>)
 8015e9e:	9314      	str	r3, [sp, #80]	@ 0x50
 8015ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8015f90 <get_config_payload_string+0x290>)
 8015ea2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8015f94 <get_config_payload_string+0x294>)
 8015ea6:	9312      	str	r3, [sp, #72]	@ 0x48
 8015ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8015f98 <get_config_payload_string+0x298>)
 8015eaa:	9311      	str	r3, [sp, #68]	@ 0x44
 8015eac:	4b3b      	ldr	r3, [pc, #236]	@ (8015f9c <get_config_payload_string+0x29c>)
 8015eae:	9310      	str	r3, [sp, #64]	@ 0x40
 8015eb0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8015fa0 <get_config_payload_string+0x2a0>)
 8015eb4:	930e      	str	r3, [sp, #56]	@ 0x38
 8015eb6:	4944      	ldr	r1, [pc, #272]	@ (8015fc8 <get_config_payload_string+0x2c8>)
 8015eb8:	910d      	str	r1, [sp, #52]	@ 0x34
 8015eba:	940c      	str	r4, [sp, #48]	@ 0x30
 8015ebc:	4943      	ldr	r1, [pc, #268]	@ (8015fcc <get_config_payload_string+0x2cc>)
 8015ebe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015ec0:	920a      	str	r2, [sp, #40]	@ 0x28
 8015ec2:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ec4:	9708      	str	r7, [sp, #32]
 8015ec6:	4842      	ldr	r0, [pc, #264]	@ (8015fd0 <get_config_payload_string+0x2d0>)
 8015ec8:	9007      	str	r0, [sp, #28]
 8015eca:	9406      	str	r4, [sp, #24]
 8015ecc:	9105      	str	r1, [sp, #20]
 8015ece:	9404      	str	r4, [sp, #16]
 8015ed0:	9103      	str	r1, [sp, #12]
 8015ed2:	9202      	str	r2, [sp, #8]
 8015ed4:	9301      	str	r3, [sp, #4]
 8015ed6:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 8015eda:	9300      	str	r3, [sp, #0]
 8015edc:	4b3d      	ldr	r3, [pc, #244]	@ (8015fd4 <get_config_payload_string+0x2d4>)
 8015ede:	4a35      	ldr	r2, [pc, #212]	@ (8015fb4 <get_config_payload_string+0x2b4>)
 8015ee0:	4629      	mov	r1, r5
 8015ee2:	4630      	mov	r0, r6
 8015ee4:	f016 fa62 	bl	802c3ac <snprintf>
 8015ee8:	4604      	mov	r4, r0
			free(name);
 8015eea:	4638      	mov	r0, r7
 8015eec:	f006 f916 	bl	801c11c <vPortFree>
			return len;
 8015ef0:	b2e0      	uxtb	r0, r4
 8015ef2:	e75b      	b.n	8015dac <get_config_payload_string+0xac>
			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8015ef4:	2101      	movs	r1, #1
 8015ef6:	2080      	movs	r0, #128	@ 0x80
 8015ef8:	f7ff fdd2 	bl	8015aa0 <_ZL9my_callocjj>
 8015efc:	4607      	mov	r7, r0
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s", component_power_supply_human);
 8015efe:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 8015fe0 <get_config_payload_string+0x2e0>
 8015f02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015f06:	6038      	str	r0, [r7, #0]
 8015f08:	6079      	str	r1, [r7, #4]
 8015f0a:	60ba      	str	r2, [r7, #8]
 8015f0c:	60fb      	str	r3, [r7, #12]
 8015f0e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015f12:	6138      	str	r0, [r7, #16]
 8015f14:	6179      	str	r1, [r7, #20]
 8015f16:	61ba      	str	r2, [r7, #24]
 8015f18:	61fb      	str	r3, [r7, #28]
			len = snprintf(payload, payload_len, universal_conf_template, dev_class_voltage, sec_2h, dev_system, \
 8015f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8015f84 <get_config_payload_string+0x284>)
 8015f1c:	681a      	ldr	r2, [r3, #0]
 8015f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8015f88 <get_config_payload_string+0x288>)
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	9315      	str	r3, [sp, #84]	@ 0x54
 8015f24:	4b19      	ldr	r3, [pc, #100]	@ (8015f8c <get_config_payload_string+0x28c>)
 8015f26:	9314      	str	r3, [sp, #80]	@ 0x50
 8015f28:	4b19      	ldr	r3, [pc, #100]	@ (8015f90 <get_config_payload_string+0x290>)
 8015f2a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015f2c:	4b19      	ldr	r3, [pc, #100]	@ (8015f94 <get_config_payload_string+0x294>)
 8015f2e:	9312      	str	r3, [sp, #72]	@ 0x48
 8015f30:	4b19      	ldr	r3, [pc, #100]	@ (8015f98 <get_config_payload_string+0x298>)
 8015f32:	9311      	str	r3, [sp, #68]	@ 0x44
 8015f34:	4b19      	ldr	r3, [pc, #100]	@ (8015f9c <get_config_payload_string+0x29c>)
 8015f36:	9310      	str	r3, [sp, #64]	@ 0x40
 8015f38:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015f3a:	4b19      	ldr	r3, [pc, #100]	@ (8015fa0 <get_config_payload_string+0x2a0>)
 8015f3c:	930e      	str	r3, [sp, #56]	@ 0x38
 8015f3e:	4922      	ldr	r1, [pc, #136]	@ (8015fc8 <get_config_payload_string+0x2c8>)
 8015f40:	910d      	str	r1, [sp, #52]	@ 0x34
 8015f42:	940c      	str	r4, [sp, #48]	@ 0x30
 8015f44:	4924      	ldr	r1, [pc, #144]	@ (8015fd8 <get_config_payload_string+0x2d8>)
 8015f46:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015f48:	920a      	str	r2, [sp, #40]	@ 0x28
 8015f4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f4c:	9708      	str	r7, [sp, #32]
 8015f4e:	4820      	ldr	r0, [pc, #128]	@ (8015fd0 <get_config_payload_string+0x2d0>)
 8015f50:	9007      	str	r0, [sp, #28]
 8015f52:	9406      	str	r4, [sp, #24]
 8015f54:	9105      	str	r1, [sp, #20]
 8015f56:	9404      	str	r4, [sp, #16]
 8015f58:	9103      	str	r1, [sp, #12]
 8015f5a:	9202      	str	r2, [sp, #8]
 8015f5c:	9301      	str	r3, [sp, #4]
 8015f5e:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 8015f62:	9300      	str	r3, [sp, #0]
 8015f64:	4b1b      	ldr	r3, [pc, #108]	@ (8015fd4 <get_config_payload_string+0x2d4>)
 8015f66:	4a13      	ldr	r2, [pc, #76]	@ (8015fb4 <get_config_payload_string+0x2b4>)
 8015f68:	4629      	mov	r1, r5
 8015f6a:	4630      	mov	r0, r6
 8015f6c:	f016 fa1e 	bl	802c3ac <snprintf>
 8015f70:	4604      	mov	r4, r0
			free(name);
 8015f72:	4638      	mov	r0, r7
 8015f74:	f006 f8d2 	bl	801c11c <vPortFree>
			return len;
 8015f78:	b2e0      	uxtb	r0, r4
 8015f7a:	e717      	b.n	8015dac <get_config_payload_string+0xac>
 8015f7c:	08039bd0 	.word	0x08039bd0
 8015f80:	08039bdc 	.word	0x08039bdc
 8015f84:	20002a94 	.word	0x20002a94
 8015f88:	20002a8c 	.word	0x20002a8c
 8015f8c:	08037d10 	.word	0x08037d10
 8015f90:	08038100 	.word	0x08038100
 8015f94:	08039be4 	.word	0x08039be4
 8015f98:	08039200 	.word	0x08039200
 8015f9c:	08039214 	.word	0x08039214
 8015fa0:	08039220 	.word	0x08039220
 8015fa4:	08038678 	.word	0x08038678
 8015fa8:	08039b58 	.word	0x08039b58
 8015fac:	0803b358 	.word	0x0803b358
 8015fb0:	08039ba0 	.word	0x08039ba0
 8015fb4:	0803c8b8 	.word	0x0803c8b8
 8015fb8:	08039bf4 	.word	0x08039bf4
 8015fbc:	0803c890 	.word	0x0803c890
 8015fc0:	08039bfc 	.word	0x08039bfc
 8015fc4:	08039c10 	.word	0x08039c10
 8015fc8:	08039c20 	.word	0x08039c20
 8015fcc:	08039b70 	.word	0x08039b70
 8015fd0:	08039c24 	.word	0x08039c24
 8015fd4:	08039b98 	.word	0x08039b98
 8015fd8:	08039b80 	.word	0x08039b80
 8015fdc:	080398b0 	.word	0x080398b0
 8015fe0:	08039c48 	.word	0x08039c48
			len = sprintf(payload, universal_conf_template, dev_class_energy, sec_5m, dev_system, \
 8015fe4:	4b79      	ldr	r3, [pc, #484]	@ (80161cc <get_config_payload_string+0x4cc>)
 8015fe6:	6819      	ldr	r1, [r3, #0]
 8015fe8:	4a79      	ldr	r2, [pc, #484]	@ (80161d0 <get_config_payload_string+0x4d0>)
 8015fea:	4b7a      	ldr	r3, [pc, #488]	@ (80161d4 <get_config_payload_string+0x4d4>)
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	9311      	str	r3, [sp, #68]	@ 0x44
 8015ff0:	4b79      	ldr	r3, [pc, #484]	@ (80161d8 <get_config_payload_string+0x4d8>)
 8015ff2:	9310      	str	r3, [sp, #64]	@ 0x40
 8015ff4:	4b79      	ldr	r3, [pc, #484]	@ (80161dc <get_config_payload_string+0x4dc>)
 8015ff6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015ff8:	4b79      	ldr	r3, [pc, #484]	@ (80161e0 <get_config_payload_string+0x4e0>)
 8015ffa:	930e      	str	r3, [sp, #56]	@ 0x38
 8015ffc:	4b79      	ldr	r3, [pc, #484]	@ (80161e4 <get_config_payload_string+0x4e4>)
 8015ffe:	930d      	str	r3, [sp, #52]	@ 0x34
 8016000:	4b79      	ldr	r3, [pc, #484]	@ (80161e8 <get_config_payload_string+0x4e8>)
 8016002:	930c      	str	r3, [sp, #48]	@ 0x30
 8016004:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016006:	4b79      	ldr	r3, [pc, #484]	@ (80161ec <get_config_payload_string+0x4ec>)
 8016008:	930a      	str	r3, [sp, #40]	@ 0x28
 801600a:	4879      	ldr	r0, [pc, #484]	@ (80161f0 <get_config_payload_string+0x4f0>)
 801600c:	9009      	str	r0, [sp, #36]	@ 0x24
 801600e:	9208      	str	r2, [sp, #32]
 8016010:	9107      	str	r1, [sp, #28]
 8016012:	9306      	str	r3, [sp, #24]
 8016014:	4877      	ldr	r0, [pc, #476]	@ (80161f4 <get_config_payload_string+0x4f4>)
 8016016:	9005      	str	r0, [sp, #20]
 8016018:	4877      	ldr	r0, [pc, #476]	@ (80161f8 <get_config_payload_string+0x4f8>)
 801601a:	9004      	str	r0, [sp, #16]
 801601c:	9203      	str	r2, [sp, #12]
 801601e:	4877      	ldr	r0, [pc, #476]	@ (80161fc <get_config_payload_string+0x4fc>)
 8016020:	9002      	str	r0, [sp, #8]
 8016022:	9101      	str	r1, [sp, #4]
 8016024:	9300      	str	r3, [sp, #0]
 8016026:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 801602a:	4975      	ldr	r1, [pc, #468]	@ (8016200 <get_config_payload_string+0x500>)
 801602c:	4630      	mov	r0, r6
 801602e:	f016 f9f3 	bl	802c418 <sprintf>
			break;
 8016032:	deff      	udf	#255	@ 0xff
			len = sprintf(payload, universal_conf_template, dev_class_voltage, sec_5m, dev_system, \
 8016034:	4b65      	ldr	r3, [pc, #404]	@ (80161cc <get_config_payload_string+0x4cc>)
 8016036:	6819      	ldr	r1, [r3, #0]
 8016038:	4a72      	ldr	r2, [pc, #456]	@ (8016204 <get_config_payload_string+0x504>)
 801603a:	4b66      	ldr	r3, [pc, #408]	@ (80161d4 <get_config_payload_string+0x4d4>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	9311      	str	r3, [sp, #68]	@ 0x44
 8016040:	4b65      	ldr	r3, [pc, #404]	@ (80161d8 <get_config_payload_string+0x4d8>)
 8016042:	9310      	str	r3, [sp, #64]	@ 0x40
 8016044:	4b65      	ldr	r3, [pc, #404]	@ (80161dc <get_config_payload_string+0x4dc>)
 8016046:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016048:	4b65      	ldr	r3, [pc, #404]	@ (80161e0 <get_config_payload_string+0x4e0>)
 801604a:	930e      	str	r3, [sp, #56]	@ 0x38
 801604c:	4b65      	ldr	r3, [pc, #404]	@ (80161e4 <get_config_payload_string+0x4e4>)
 801604e:	930d      	str	r3, [sp, #52]	@ 0x34
 8016050:	4b65      	ldr	r3, [pc, #404]	@ (80161e8 <get_config_payload_string+0x4e8>)
 8016052:	930c      	str	r3, [sp, #48]	@ 0x30
 8016054:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016056:	4b65      	ldr	r3, [pc, #404]	@ (80161ec <get_config_payload_string+0x4ec>)
 8016058:	930a      	str	r3, [sp, #40]	@ 0x28
 801605a:	486b      	ldr	r0, [pc, #428]	@ (8016208 <get_config_payload_string+0x508>)
 801605c:	9009      	str	r0, [sp, #36]	@ 0x24
 801605e:	9208      	str	r2, [sp, #32]
 8016060:	9107      	str	r1, [sp, #28]
 8016062:	9306      	str	r3, [sp, #24]
 8016064:	4869      	ldr	r0, [pc, #420]	@ (801620c <get_config_payload_string+0x50c>)
 8016066:	9005      	str	r0, [sp, #20]
 8016068:	4869      	ldr	r0, [pc, #420]	@ (8016210 <get_config_payload_string+0x510>)
 801606a:	9004      	str	r0, [sp, #16]
 801606c:	9203      	str	r2, [sp, #12]
 801606e:	4863      	ldr	r0, [pc, #396]	@ (80161fc <get_config_payload_string+0x4fc>)
 8016070:	9002      	str	r0, [sp, #8]
 8016072:	9101      	str	r1, [sp, #4]
 8016074:	9300      	str	r3, [sp, #0]
 8016076:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 801607a:	4961      	ldr	r1, [pc, #388]	@ (8016200 <get_config_payload_string+0x500>)
 801607c:	4630      	mov	r0, r6
 801607e:	f016 f9cb 	bl	802c418 <sprintf>
			break;
 8016082:	e7d6      	b.n	8016032 <get_config_payload_string+0x332>
			len = sprintf(payload, universal_conf_template, dev_class_power, sec_5m, dev_system, \
 8016084:	4b51      	ldr	r3, [pc, #324]	@ (80161cc <get_config_payload_string+0x4cc>)
 8016086:	6819      	ldr	r1, [r3, #0]
 8016088:	4a62      	ldr	r2, [pc, #392]	@ (8016214 <get_config_payload_string+0x514>)
 801608a:	4b52      	ldr	r3, [pc, #328]	@ (80161d4 <get_config_payload_string+0x4d4>)
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	9311      	str	r3, [sp, #68]	@ 0x44
 8016090:	4b51      	ldr	r3, [pc, #324]	@ (80161d8 <get_config_payload_string+0x4d8>)
 8016092:	9310      	str	r3, [sp, #64]	@ 0x40
 8016094:	4b51      	ldr	r3, [pc, #324]	@ (80161dc <get_config_payload_string+0x4dc>)
 8016096:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016098:	4b51      	ldr	r3, [pc, #324]	@ (80161e0 <get_config_payload_string+0x4e0>)
 801609a:	930e      	str	r3, [sp, #56]	@ 0x38
 801609c:	4b51      	ldr	r3, [pc, #324]	@ (80161e4 <get_config_payload_string+0x4e4>)
 801609e:	930d      	str	r3, [sp, #52]	@ 0x34
 80160a0:	4b51      	ldr	r3, [pc, #324]	@ (80161e8 <get_config_payload_string+0x4e8>)
 80160a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80160a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80160a6:	4b51      	ldr	r3, [pc, #324]	@ (80161ec <get_config_payload_string+0x4ec>)
 80160a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80160aa:	485b      	ldr	r0, [pc, #364]	@ (8016218 <get_config_payload_string+0x518>)
 80160ac:	9009      	str	r0, [sp, #36]	@ 0x24
 80160ae:	9208      	str	r2, [sp, #32]
 80160b0:	9107      	str	r1, [sp, #28]
 80160b2:	9306      	str	r3, [sp, #24]
 80160b4:	4859      	ldr	r0, [pc, #356]	@ (801621c <get_config_payload_string+0x51c>)
 80160b6:	9005      	str	r0, [sp, #20]
 80160b8:	4855      	ldr	r0, [pc, #340]	@ (8016210 <get_config_payload_string+0x510>)
 80160ba:	9004      	str	r0, [sp, #16]
 80160bc:	9203      	str	r2, [sp, #12]
 80160be:	484f      	ldr	r0, [pc, #316]	@ (80161fc <get_config_payload_string+0x4fc>)
 80160c0:	9002      	str	r0, [sp, #8]
 80160c2:	9101      	str	r1, [sp, #4]
 80160c4:	9300      	str	r3, [sp, #0]
 80160c6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80160ca:	494d      	ldr	r1, [pc, #308]	@ (8016200 <get_config_payload_string+0x500>)
 80160cc:	4630      	mov	r0, r6
 80160ce:	f016 f9a3 	bl	802c418 <sprintf>
			break;
 80160d2:	e7ae      	b.n	8016032 <get_config_payload_string+0x332>
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, sec_5m, dev_system, \
 80160d4:	4b3d      	ldr	r3, [pc, #244]	@ (80161cc <get_config_payload_string+0x4cc>)
 80160d6:	6819      	ldr	r1, [r3, #0]
 80160d8:	4a51      	ldr	r2, [pc, #324]	@ (8016220 <get_config_payload_string+0x520>)
 80160da:	4b3e      	ldr	r3, [pc, #248]	@ (80161d4 <get_config_payload_string+0x4d4>)
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	9311      	str	r3, [sp, #68]	@ 0x44
 80160e0:	4b3d      	ldr	r3, [pc, #244]	@ (80161d8 <get_config_payload_string+0x4d8>)
 80160e2:	9310      	str	r3, [sp, #64]	@ 0x40
 80160e4:	4b3d      	ldr	r3, [pc, #244]	@ (80161dc <get_config_payload_string+0x4dc>)
 80160e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80160e8:	4b3d      	ldr	r3, [pc, #244]	@ (80161e0 <get_config_payload_string+0x4e0>)
 80160ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80160ec:	4b3d      	ldr	r3, [pc, #244]	@ (80161e4 <get_config_payload_string+0x4e4>)
 80160ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80160f0:	4b3d      	ldr	r3, [pc, #244]	@ (80161e8 <get_config_payload_string+0x4e8>)
 80160f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80160f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80160f6:	4b3d      	ldr	r3, [pc, #244]	@ (80161ec <get_config_payload_string+0x4ec>)
 80160f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80160fa:	484a      	ldr	r0, [pc, #296]	@ (8016224 <get_config_payload_string+0x524>)
 80160fc:	9009      	str	r0, [sp, #36]	@ 0x24
 80160fe:	9208      	str	r2, [sp, #32]
 8016100:	9107      	str	r1, [sp, #28]
 8016102:	9306      	str	r3, [sp, #24]
 8016104:	4848      	ldr	r0, [pc, #288]	@ (8016228 <get_config_payload_string+0x528>)
 8016106:	9005      	str	r0, [sp, #20]
 8016108:	4841      	ldr	r0, [pc, #260]	@ (8016210 <get_config_payload_string+0x510>)
 801610a:	9004      	str	r0, [sp, #16]
 801610c:	9203      	str	r2, [sp, #12]
 801610e:	483b      	ldr	r0, [pc, #236]	@ (80161fc <get_config_payload_string+0x4fc>)
 8016110:	9002      	str	r0, [sp, #8]
 8016112:	9101      	str	r1, [sp, #4]
 8016114:	9300      	str	r3, [sp, #0]
 8016116:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 801611a:	4939      	ldr	r1, [pc, #228]	@ (8016200 <get_config_payload_string+0x500>)
 801611c:	4630      	mov	r0, r6
 801611e:	f016 f97b 	bl	802c418 <sprintf>
			break;
 8016122:	e786      	b.n	8016032 <get_config_payload_string+0x332>
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, sec_5m, dev_system, \
 8016124:	4b29      	ldr	r3, [pc, #164]	@ (80161cc <get_config_payload_string+0x4cc>)
 8016126:	6819      	ldr	r1, [r3, #0]
 8016128:	4a40      	ldr	r2, [pc, #256]	@ (801622c <get_config_payload_string+0x52c>)
 801612a:	4b2a      	ldr	r3, [pc, #168]	@ (80161d4 <get_config_payload_string+0x4d4>)
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	9311      	str	r3, [sp, #68]	@ 0x44
 8016130:	4b29      	ldr	r3, [pc, #164]	@ (80161d8 <get_config_payload_string+0x4d8>)
 8016132:	9310      	str	r3, [sp, #64]	@ 0x40
 8016134:	4b29      	ldr	r3, [pc, #164]	@ (80161dc <get_config_payload_string+0x4dc>)
 8016136:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016138:	4b29      	ldr	r3, [pc, #164]	@ (80161e0 <get_config_payload_string+0x4e0>)
 801613a:	930e      	str	r3, [sp, #56]	@ 0x38
 801613c:	4b29      	ldr	r3, [pc, #164]	@ (80161e4 <get_config_payload_string+0x4e4>)
 801613e:	930d      	str	r3, [sp, #52]	@ 0x34
 8016140:	4b29      	ldr	r3, [pc, #164]	@ (80161e8 <get_config_payload_string+0x4e8>)
 8016142:	930c      	str	r3, [sp, #48]	@ 0x30
 8016144:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016146:	4b29      	ldr	r3, [pc, #164]	@ (80161ec <get_config_payload_string+0x4ec>)
 8016148:	930a      	str	r3, [sp, #40]	@ 0x28
 801614a:	4839      	ldr	r0, [pc, #228]	@ (8016230 <get_config_payload_string+0x530>)
 801614c:	9009      	str	r0, [sp, #36]	@ 0x24
 801614e:	9208      	str	r2, [sp, #32]
 8016150:	9107      	str	r1, [sp, #28]
 8016152:	9306      	str	r3, [sp, #24]
 8016154:	4837      	ldr	r0, [pc, #220]	@ (8016234 <get_config_payload_string+0x534>)
 8016156:	9005      	str	r0, [sp, #20]
 8016158:	482d      	ldr	r0, [pc, #180]	@ (8016210 <get_config_payload_string+0x510>)
 801615a:	9004      	str	r0, [sp, #16]
 801615c:	9203      	str	r2, [sp, #12]
 801615e:	4827      	ldr	r0, [pc, #156]	@ (80161fc <get_config_payload_string+0x4fc>)
 8016160:	9002      	str	r0, [sp, #8]
 8016162:	9101      	str	r1, [sp, #4]
 8016164:	9300      	str	r3, [sp, #0]
 8016166:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 801616a:	4925      	ldr	r1, [pc, #148]	@ (8016200 <get_config_payload_string+0x500>)
 801616c:	4630      	mov	r0, r6
 801616e:	f016 f953 	bl	802c418 <sprintf>
			break;
 8016172:	e75e      	b.n	8016032 <get_config_payload_string+0x332>
			len = sprintf(payload, universal_conf_template, dev_class_current, sec_5m, dev_system, \
 8016174:	4b15      	ldr	r3, [pc, #84]	@ (80161cc <get_config_payload_string+0x4cc>)
 8016176:	6819      	ldr	r1, [r3, #0]
 8016178:	4a2f      	ldr	r2, [pc, #188]	@ (8016238 <get_config_payload_string+0x538>)
 801617a:	4b16      	ldr	r3, [pc, #88]	@ (80161d4 <get_config_payload_string+0x4d4>)
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	9311      	str	r3, [sp, #68]	@ 0x44
 8016180:	4b15      	ldr	r3, [pc, #84]	@ (80161d8 <get_config_payload_string+0x4d8>)
 8016182:	9310      	str	r3, [sp, #64]	@ 0x40
 8016184:	4b15      	ldr	r3, [pc, #84]	@ (80161dc <get_config_payload_string+0x4dc>)
 8016186:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016188:	4b15      	ldr	r3, [pc, #84]	@ (80161e0 <get_config_payload_string+0x4e0>)
 801618a:	930e      	str	r3, [sp, #56]	@ 0x38
 801618c:	4b15      	ldr	r3, [pc, #84]	@ (80161e4 <get_config_payload_string+0x4e4>)
 801618e:	930d      	str	r3, [sp, #52]	@ 0x34
 8016190:	4b15      	ldr	r3, [pc, #84]	@ (80161e8 <get_config_payload_string+0x4e8>)
 8016192:	930c      	str	r3, [sp, #48]	@ 0x30
 8016194:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016196:	4b15      	ldr	r3, [pc, #84]	@ (80161ec <get_config_payload_string+0x4ec>)
 8016198:	930a      	str	r3, [sp, #40]	@ 0x28
 801619a:	4828      	ldr	r0, [pc, #160]	@ (801623c <get_config_payload_string+0x53c>)
 801619c:	9009      	str	r0, [sp, #36]	@ 0x24
 801619e:	9208      	str	r2, [sp, #32]
 80161a0:	9107      	str	r1, [sp, #28]
 80161a2:	9306      	str	r3, [sp, #24]
 80161a4:	4826      	ldr	r0, [pc, #152]	@ (8016240 <get_config_payload_string+0x540>)
 80161a6:	9005      	str	r0, [sp, #20]
 80161a8:	4819      	ldr	r0, [pc, #100]	@ (8016210 <get_config_payload_string+0x510>)
 80161aa:	9004      	str	r0, [sp, #16]
 80161ac:	9203      	str	r2, [sp, #12]
 80161ae:	4813      	ldr	r0, [pc, #76]	@ (80161fc <get_config_payload_string+0x4fc>)
 80161b0:	9002      	str	r0, [sp, #8]
 80161b2:	9101      	str	r1, [sp, #4]
 80161b4:	9300      	str	r3, [sp, #0]
 80161b6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80161ba:	4911      	ldr	r1, [pc, #68]	@ (8016200 <get_config_payload_string+0x500>)
 80161bc:	4630      	mov	r0, r6
 80161be:	f016 f92b 	bl	802c418 <sprintf>
			break;
 80161c2:	e736      	b.n	8016032 <get_config_payload_string+0x332>
	switch (payload_type) {
 80161c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80161c8:	e5f0      	b.n	8015dac <get_config_payload_string+0xac>
 80161ca:	bf00      	nop
 80161cc:	20002a94 	.word	0x20002a94
 80161d0:	08039b90 	.word	0x08039b90
 80161d4:	20002a8c 	.word	0x20002a8c
 80161d8:	08037d10 	.word	0x08037d10
 80161dc:	08038100 	.word	0x08038100
 80161e0:	08039be4 	.word	0x08039be4
 80161e4:	08039200 	.word	0x08039200
 80161e8:	08039214 	.word	0x08039214
 80161ec:	08039220 	.word	0x08039220
 80161f0:	08039c68 	.word	0x08039c68
 80161f4:	08039c6c 	.word	0x08039c6c
 80161f8:	08039c7c 	.word	0x08039c7c
 80161fc:	08039ca0 	.word	0x08039ca0
 8016200:	0803c8b8 	.word	0x0803c8b8
 8016204:	08039b98 	.word	0x08039b98
 8016208:	08039c20 	.word	0x08039c20
 801620c:	08039ca8 	.word	0x08039ca8
 8016210:	0803b358 	.word	0x0803b358
 8016214:	08039ba0 	.word	0x08039ba0
 8016218:	08039cb8 	.word	0x08039cb8
 801621c:	08039cbc 	.word	0x08039cbc
 8016220:	08039ba8 	.word	0x08039ba8
 8016224:	08039ce0 	.word	0x08039ce0
 8016228:	08039ce4 	.word	0x08039ce4
 801622c:	08039bb8 	.word	0x08039bb8
 8016230:	08039d04 	.word	0x08039d04
 8016234:	08039d08 	.word	0x08039d08
 8016238:	08039bc8 	.word	0x08039bc8
 801623c:	08039d34 	.word	0x08039d34
 8016240:	08039d38 	.word	0x08039d38

08016244 <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 8016244:	b530      	push	{r4, r5, lr}
 8016246:	b083      	sub	sp, #12
 8016248:	461c      	mov	r4, r3
 801624a:	f89d 5018 	ldrb.w	r5, [sp, #24]

	char * sens_name = NULL;
	switch (sensor_type) {
 801624e:	2a01      	cmp	r2, #1
 8016250:	d003      	beq.n	801625a <gen_bin_sensor_status_payload_JSON+0x16>
 8016252:	2a02      	cmp	r2, #2
 8016254:	d10b      	bne.n	801626e <gen_bin_sensor_status_payload_JSON+0x2a>
		case INPUT_SENSOR:
			sens_name = (char *)component_input;
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
 8016256:	4b0a      	ldr	r3, [pc, #40]	@ (8016280 <gen_bin_sensor_status_payload_JSON+0x3c>)
 8016258:	e000      	b.n	801625c <gen_bin_sensor_status_payload_JSON+0x18>
			sens_name = (char *)component_input;
 801625a:	4b0a      	ldr	r3, [pc, #40]	@ (8016284 <gen_bin_sensor_status_payload_JSON+0x40>)
			break;
		default:
			break;
	}

	if (state){
 801625c:	b14d      	cbz	r5, 8016272 <gen_bin_sensor_status_payload_JSON+0x2e>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 801625e:	4a0a      	ldr	r2, [pc, #40]	@ (8016288 <gen_bin_sensor_status_payload_JSON+0x44>)
 8016260:	9201      	str	r2, [sp, #4]
 8016262:	9400      	str	r4, [sp, #0]
 8016264:	4a09      	ldr	r2, [pc, #36]	@ (801628c <gen_bin_sensor_status_payload_JSON+0x48>)
 8016266:	f016 f8a1 	bl	802c3ac <snprintf>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
	}
}
 801626a:	b003      	add	sp, #12
 801626c:	bd30      	pop	{r4, r5, pc}
	switch (sensor_type) {
 801626e:	2300      	movs	r3, #0
 8016270:	e7f4      	b.n	801625c <gen_bin_sensor_status_payload_JSON+0x18>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 8016272:	4a07      	ldr	r2, [pc, #28]	@ (8016290 <gen_bin_sensor_status_payload_JSON+0x4c>)
 8016274:	9201      	str	r2, [sp, #4]
 8016276:	9400      	str	r4, [sp, #0]
 8016278:	4a04      	ldr	r2, [pc, #16]	@ (801628c <gen_bin_sensor_status_payload_JSON+0x48>)
 801627a:	f016 f897 	bl	802c3ac <snprintf>
 801627e:	e7f4      	b.n	801626a <gen_bin_sensor_status_payload_JSON+0x26>
 8016280:	080398b0 	.word	0x080398b0
 8016284:	08039b58 	.word	0x08039b58
 8016288:	08039980 	.word	0x08039980
 801628c:	0803c880 	.word	0x0803c880
 8016290:	08039998 	.word	0x08039998

08016294 <generate_comand_topik_for_subscrabe>:
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){

	switch(sensor_type){
 8016294:	2a02      	cmp	r2, #2
 8016296:	d10e      	bne.n	80162b6 <generate_comand_topik_for_subscrabe+0x22>
int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 8016298:	b500      	push	{lr}
 801629a:	b085      	sub	sp, #20

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 801629c:	9302      	str	r3, [sp, #8]
 801629e:	4b06      	ldr	r3, [pc, #24]	@ (80162b8 <generate_comand_topik_for_subscrabe+0x24>)
 80162a0:	9301      	str	r3, [sp, #4]
 80162a2:	4b06      	ldr	r3, [pc, #24]	@ (80162bc <generate_comand_topik_for_subscrabe+0x28>)
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	9300      	str	r3, [sp, #0]
 80162a8:	4b05      	ldr	r3, [pc, #20]	@ (80162c0 <generate_comand_topik_for_subscrabe+0x2c>)
 80162aa:	4a06      	ldr	r2, [pc, #24]	@ (80162c4 <generate_comand_topik_for_subscrabe+0x30>)
 80162ac:	f016 f87e 	bl	802c3ac <snprintf>
			break;
	}
}
 80162b0:	b005      	add	sp, #20
 80162b2:	f85d fb04 	ldr.w	pc, [sp], #4
			break;
 80162b6:	deff      	udf	#255	@ 0xff
 80162b8:	080398b0 	.word	0x080398b0
 80162bc:	20002a94 	.word	0x20002a94
 80162c0:	08039220 	.word	0x08039220
 80162c4:	08039d44 	.word	0x08039d44

080162c8 <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 80162c8:	b500      	push	{lr}
 80162ca:	b085      	sub	sp, #20

	strcpy(topik, "\0");
 80162cc:	f04f 0c00 	mov.w	ip, #0
 80162d0:	f880 c000 	strb.w	ip, [r0]

	switch (sensor_type) {
 80162d4:	3a01      	subs	r2, #1
 80162d6:	2a09      	cmp	r2, #9
 80162d8:	d832      	bhi.n	8016340 <generate_status_topik+0x78>
 80162da:	e8df f002 	tbb	[pc, r2]
 80162de:	1005      	.short	0x1005
 80162e0:	31313131 	.word	0x31313131
 80162e4:	261b3131 	.word	0x261b3131
		case INPUT_SENSOR:
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 80162e8:	9302      	str	r3, [sp, #8]
 80162ea:	4b18      	ldr	r3, [pc, #96]	@ (801634c <generate_status_topik+0x84>)
 80162ec:	9301      	str	r3, [sp, #4]
 80162ee:	4b18      	ldr	r3, [pc, #96]	@ (8016350 <generate_status_topik+0x88>)
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	9300      	str	r3, [sp, #0]
 80162f4:	4b17      	ldr	r3, [pc, #92]	@ (8016354 <generate_status_topik+0x8c>)
 80162f6:	4a18      	ldr	r2, [pc, #96]	@ (8016358 <generate_status_topik+0x90>)
 80162f8:	f016 f858 	bl	802c3ac <snprintf>
 80162fc:	e022      	b.n	8016344 <generate_status_topik+0x7c>
			break;

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 80162fe:	9302      	str	r3, [sp, #8]
 8016300:	4b16      	ldr	r3, [pc, #88]	@ (801635c <generate_status_topik+0x94>)
 8016302:	9301      	str	r3, [sp, #4]
 8016304:	4b12      	ldr	r3, [pc, #72]	@ (8016350 <generate_status_topik+0x88>)
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	9300      	str	r3, [sp, #0]
 801630a:	4b12      	ldr	r3, [pc, #72]	@ (8016354 <generate_status_topik+0x8c>)
 801630c:	4a12      	ldr	r2, [pc, #72]	@ (8016358 <generate_status_topik+0x90>)
 801630e:	f016 f84d 	bl	802c3ac <snprintf>
 8016312:	e017      	b.n	8016344 <generate_status_topik+0x7c>
			break;

		case VOLTAGE_DIAGNOSTIC_BATT_SENSOR:
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_battery, sensor_number);
 8016314:	9302      	str	r3, [sp, #8]
 8016316:	4b12      	ldr	r3, [pc, #72]	@ (8016360 <generate_status_topik+0x98>)
 8016318:	9301      	str	r3, [sp, #4]
 801631a:	4b0d      	ldr	r3, [pc, #52]	@ (8016350 <generate_status_topik+0x88>)
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	9300      	str	r3, [sp, #0]
 8016320:	4b0c      	ldr	r3, [pc, #48]	@ (8016354 <generate_status_topik+0x8c>)
 8016322:	4a0d      	ldr	r2, [pc, #52]	@ (8016358 <generate_status_topik+0x90>)
 8016324:	f016 f842 	bl	802c3ac <snprintf>
 8016328:	e00c      	b.n	8016344 <generate_status_topik+0x7c>
			break;

		case VOLTAGE_DIAGNOSTIC_POW_SUPL_SENSOR:
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_power_supply, sensor_number);
 801632a:	9302      	str	r3, [sp, #8]
 801632c:	4b0d      	ldr	r3, [pc, #52]	@ (8016364 <generate_status_topik+0x9c>)
 801632e:	9301      	str	r3, [sp, #4]
 8016330:	4b07      	ldr	r3, [pc, #28]	@ (8016350 <generate_status_topik+0x88>)
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	9300      	str	r3, [sp, #0]
 8016336:	4b07      	ldr	r3, [pc, #28]	@ (8016354 <generate_status_topik+0x8c>)
 8016338:	4a07      	ldr	r2, [pc, #28]	@ (8016358 <generate_status_topik+0x90>)
 801633a:	f016 f837 	bl	802c3ac <snprintf>
 801633e:	e001      	b.n	8016344 <generate_status_topik+0x7c>
	switch (sensor_type) {
 8016340:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
			return -1;
			break;
	}

	return 0;
}
 8016344:	b005      	add	sp, #20
 8016346:	f85d fb04 	ldr.w	pc, [sp], #4
 801634a:	bf00      	nop
 801634c:	08039b58 	.word	0x08039b58
 8016350:	20002a94 	.word	0x20002a94
 8016354:	08039220 	.word	0x08039220
 8016358:	08039d54 	.word	0x08039d54
 801635c:	080398b0 	.word	0x080398b0
 8016360:	08039b70 	.word	0x08039b70
 8016364:	08039b80 	.word	0x08039b80

08016368 <generate_key_value_JSON>:

void generate_key_value_JSON(char * buf, char * key, float value){
 8016368:	b530      	push	{r4, r5, lr}
 801636a:	b083      	sub	sp, #12
 801636c:	4604      	mov	r4, r0
 801636e:	460d      	mov	r5, r1
 8016370:	ee10 0a10 	vmov	r0, s0

	sprintf(buf, key_value_float_JSON_template, key, value);
 8016374:	f7fa f900 	bl	8010578 <__aeabi_f2d>
 8016378:	e9cd 0100 	strd	r0, r1, [sp]
 801637c:	462a      	mov	r2, r5
 801637e:	4903      	ldr	r1, [pc, #12]	@ (801638c <generate_key_value_JSON+0x24>)
 8016380:	4620      	mov	r0, r4
 8016382:	f016 f849 	bl	802c418 <sprintf>
}
 8016386:	b003      	add	sp, #12
 8016388:	bd30      	pop	{r4, r5, pc}
 801638a:	bf00      	nop
 801638c:	08039d68 	.word	0x08039d68

08016390 <timer_fn>:
	}
	(void) c;
}


void timer_fn(void *arg) {
 8016390:	b508      	push	{r3, lr}
	struct mg_mgr *mgr = (struct mg_mgr *) arg;
	if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8016392:	4b08      	ldr	r3, [pc, #32]	@ (80163b4 <timer_fn+0x24>)
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	b12b      	cbz	r3, 80163a4 <timer_fn+0x14>
	if (s_sntp_conn != NULL) mg_sntp_request(s_sntp_conn);
 8016398:	4b06      	ldr	r3, [pc, #24]	@ (80163b4 <timer_fn+0x24>)
 801639a:	6818      	ldr	r0, [r3, #0]
 801639c:	b108      	cbz	r0, 80163a2 <timer_fn+0x12>
 801639e:	f014 ff9b 	bl	802b2d8 <mg_sntp_request>
}
 80163a2:	bd08      	pop	{r3, pc}
	if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 80163a4:	4a04      	ldr	r2, [pc, #16]	@ (80163b8 <timer_fn+0x28>)
 80163a6:	4619      	mov	r1, r3
 80163a8:	f015 f868 	bl	802b47c <mg_sntp_connect>
 80163ac:	4b01      	ldr	r3, [pc, #4]	@ (80163b4 <timer_fn+0x24>)
 80163ae:	6018      	str	r0, [r3, #0]
 80163b0:	e7f2      	b.n	8016398 <timer_fn+0x8>
 80163b2:	bf00      	nop
 80163b4:	20002a98 	.word	0x20002a98
 80163b8:	08016495 	.word	0x08016495

080163bc <update_rtc_from_ntp>:
void update_rtc_from_ntp(uint64_t unix_ms) {
 80163bc:	b510      	push	{r4, lr}
 80163be:	b096      	sub	sp, #88	@ 0x58
    RTC_TimeTypeDef sTime = {0};
 80163c0:	2300      	movs	r3, #0
 80163c2:	9311      	str	r3, [sp, #68]	@ 0x44
 80163c4:	9312      	str	r3, [sp, #72]	@ 0x48
 80163c6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80163c8:	9314      	str	r3, [sp, #80]	@ 0x50
 80163ca:	9315      	str	r3, [sp, #84]	@ 0x54
    RTC_DateTypeDef sDate = {0};
 80163cc:	9310      	str	r3, [sp, #64]	@ 0x40
    time_t unix_time = unix_ms / 1000;  // Convert milliseconds to seconds
 80163ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80163d2:	2300      	movs	r3, #0
 80163d4:	f7fa fcc0 	bl	8010d58 <__aeabi_uldivmod>
 80163d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
    gmtime_r(&unix_time, &t);  // Parse time into the tm structure
 80163dc:	a905      	add	r1, sp, #20
 80163de:	a80e      	add	r0, sp, #56	@ 0x38
 80163e0:	f016 faa4 	bl	802c92c <gmtime_r>
    sTime.Hours = t.tm_hour;
 80163e4:	9b07      	ldr	r3, [sp, #28]
 80163e6:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
    sTime.Minutes = t.tm_min;
 80163ea:	9b06      	ldr	r3, [sp, #24]
 80163ec:	f88d 3045 	strb.w	r3, [sp, #69]	@ 0x45
    sTime.Seconds = t.tm_sec;
 80163f0:	9b05      	ldr	r3, [sp, #20]
 80163f2:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
    sDate.Year = t.tm_year - 100; // STM32 counts years from 2000, while tm_year starts from 1900
 80163f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80163f8:	3b64      	subs	r3, #100	@ 0x64
 80163fa:	f88d 3043 	strb.w	r3, [sp, #67]	@ 0x43
    sDate.Month = t.tm_mon + 1;   // tm_mon [0..11], RTC [1..12]
 80163fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016400:	3301      	adds	r3, #1
 8016402:	f88d 3041 	strb.w	r3, [sp, #65]	@ 0x41
    sDate.Date = t.tm_mday;
 8016406:	9b08      	ldr	r3, [sp, #32]
 8016408:	f88d 3042 	strb.w	r3, [sp, #66]	@ 0x42
    sDate.WeekDay = t.tm_wday == 0 ? 7 : t.tm_wday; // In STM32, Sunday = 7
 801640c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801640e:	b363      	cbz	r3, 801646a <update_rtc_from_ntp+0xae>
 8016410:	b2db      	uxtb	r3, r3
 8016412:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8016416:	2200      	movs	r2, #0
 8016418:	a911      	add	r1, sp, #68	@ 0x44
 801641a:	481a      	ldr	r0, [pc, #104]	@ (8016484 <update_rtc_from_ntp+0xc8>)
 801641c:	f002 fb26 	bl	8018a6c <HAL_RTC_SetTime>
 8016420:	bb28      	cbnz	r0, 801646e <update_rtc_from_ntp+0xb2>
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8016422:	2200      	movs	r2, #0
 8016424:	a910      	add	r1, sp, #64	@ 0x40
 8016426:	4817      	ldr	r0, [pc, #92]	@ (8016484 <update_rtc_from_ntp+0xc8>)
 8016428:	f002 fb80 	bl	8018b2c <HAL_RTC_SetDate>
 801642c:	bb20      	cbnz	r0, 8016478 <update_rtc_from_ntp+0xbc>
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 801642e:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8016432:	2101      	movs	r1, #1
 8016434:	4813      	ldr	r0, [pc, #76]	@ (8016484 <update_rtc_from_ntp+0xc8>)
 8016436:	f002 fc14 	bl	8018c62 <HAL_RTCEx_BKUPWrite>
            sDate.Year + 2000, sDate.Month, sDate.Date,
 801643a:	f89d 2043 	ldrb.w	r2, [sp, #67]	@ 0x43
 801643e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
            sTime.Hours, sTime.Minutes, sTime.Seconds);
 8016442:	f89d 1044 	ldrb.w	r1, [sp, #68]	@ 0x44
 8016446:	f89d 0045 	ldrb.w	r0, [sp, #69]	@ 0x45
 801644a:	f89d 4046 	ldrb.w	r4, [sp, #70]	@ 0x46
    logging(L_INFO, "RTC updated: %04d-%02d-%02d %02d:%02d:%02d",
 801644e:	9403      	str	r4, [sp, #12]
 8016450:	9002      	str	r0, [sp, #8]
 8016452:	9101      	str	r1, [sp, #4]
 8016454:	9300      	str	r3, [sp, #0]
 8016456:	f89d 3041 	ldrb.w	r3, [sp, #65]	@ 0x41
 801645a:	f502 62fa 	add.w	r2, r2, #2000	@ 0x7d0
 801645e:	490a      	ldr	r1, [pc, #40]	@ (8016488 <update_rtc_from_ntp+0xcc>)
 8016460:	2001      	movs	r0, #1
 8016462:	f7fb fff1 	bl	8012448 <logging>
}
 8016466:	b016      	add	sp, #88	@ 0x58
 8016468:	bd10      	pop	{r4, pc}
    sDate.WeekDay = t.tm_wday == 0 ? 7 : t.tm_wday; // In STM32, Sunday = 7
 801646a:	2307      	movs	r3, #7
 801646c:	e7d1      	b.n	8016412 <update_rtc_from_ntp+0x56>
        logging(L_ERR, "Failed to set RTC time");
 801646e:	4907      	ldr	r1, [pc, #28]	@ (801648c <update_rtc_from_ntp+0xd0>)
 8016470:	2003      	movs	r0, #3
 8016472:	f7fb ffe9 	bl	8012448 <logging>
 8016476:	e7d4      	b.n	8016422 <update_rtc_from_ntp+0x66>
        logging(L_ERR, "Failed to set RTC date");
 8016478:	4905      	ldr	r1, [pc, #20]	@ (8016490 <update_rtc_from_ntp+0xd4>)
 801647a:	2003      	movs	r0, #3
 801647c:	f7fb ffe4 	bl	8012448 <logging>
 8016480:	e7d5      	b.n	801642e <update_rtc_from_ntp+0x72>
 8016482:	bf00      	nop
 8016484:	20000ab4 	.word	0x20000ab4
 8016488:	08039da8 	.word	0x08039da8
 801648c:	08039d78 	.word	0x08039d78
 8016490:	08039d90 	.word	0x08039d90

08016494 <sfn>:
static void sfn(struct mg_connection *c, int ev, void *ev_data) {
 8016494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ev == MG_EV_SNTP_TIME) {
 8016496:	2912      	cmp	r1, #18
 8016498:	d002      	beq.n	80164a0 <sfn+0xc>
	} else if (ev == MG_EV_CLOSE) {
 801649a:	2909      	cmp	r1, #9
 801649c:	d04a      	beq.n	8016534 <sfn+0xa0>
}
 801649e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164a0:	4614      	mov	r4, r2
		logging(L_INFO, "Response from NTP server received");
 80164a2:	4928      	ldr	r1, [pc, #160]	@ (8016544 <sfn+0xb0>)
 80164a4:	2001      	movs	r0, #1
 80164a6:	f7fb ffcf 	bl	8012448 <logging>
		uint64_t curtime = mg_now();
 80164aa:	f014 fe4f 	bl	802b14c <mg_now>
 80164ae:	4606      	mov	r6, r0
 80164b0:	460d      	mov	r5, r1
		MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 80164b2:	4b25      	ldr	r3, [pc, #148]	@ (8016548 <sfn+0xb4>)
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	2b01      	cmp	r3, #1
 80164b8:	dc24      	bgt.n	8016504 <sfn+0x70>
		logging(L_INFO,"SNTP-updated current time is: %" PRIu64 " ms from epoch", curtime);
 80164ba:	4632      	mov	r2, r6
 80164bc:	462b      	mov	r3, r5
 80164be:	4923      	ldr	r1, [pc, #140]	@ (801654c <sfn+0xb8>)
 80164c0:	2001      	movs	r0, #1
 80164c2:	f7fb ffc1 	bl	8012448 <logging>
		uint64_t t = *(uint64_t *) ev_data;
 80164c6:	6827      	ldr	r7, [r4, #0]
 80164c8:	6864      	ldr	r4, [r4, #4]
		s_boot_timestamp = (time_t) ((t - mg_millis()) / 1000);
 80164ca:	f011 f9f3 	bl	80278b4 <mg_millis>
 80164ce:	1a38      	subs	r0, r7, r0
 80164d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80164d4:	f04f 0300 	mov.w	r3, #0
 80164d8:	eb64 0101 	sbc.w	r1, r4, r1
 80164dc:	f7fa fc3c 	bl	8010d58 <__aeabi_uldivmod>
 80164e0:	4b1b      	ldr	r3, [pc, #108]	@ (8016550 <sfn+0xbc>)
 80164e2:	e9c3 0100 	strd	r0, r1, [r3]
		MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 80164e6:	4b18      	ldr	r3, [pc, #96]	@ (8016548 <sfn+0xb4>)
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	2b01      	cmp	r3, #1
 80164ec:	dc16      	bgt.n	801651c <sfn+0x88>
		logging(L_INFO,"Got SNTP time: %" PRIu64 " ms from epoch", t);
 80164ee:	463a      	mov	r2, r7
 80164f0:	4623      	mov	r3, r4
 80164f2:	4918      	ldr	r1, [pc, #96]	@ (8016554 <sfn+0xc0>)
 80164f4:	2001      	movs	r0, #1
 80164f6:	f7fb ffa7 	bl	8012448 <logging>
		update_rtc_from_ntp(curtime);
 80164fa:	4630      	mov	r0, r6
 80164fc:	4629      	mov	r1, r5
 80164fe:	f7ff ff5d 	bl	80163bc <update_rtc_from_ntp>
 8016502:	e7cc      	b.n	801649e <sfn+0xa>
		MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 8016504:	4b14      	ldr	r3, [pc, #80]	@ (8016558 <sfn+0xc4>)
 8016506:	2242      	movs	r2, #66	@ 0x42
 8016508:	4914      	ldr	r1, [pc, #80]	@ (801655c <sfn+0xc8>)
 801650a:	2002      	movs	r0, #2
 801650c:	f011 f9d8 	bl	80278c0 <mg_log_prefix>
 8016510:	4632      	mov	r2, r6
 8016512:	462b      	mov	r3, r5
 8016514:	480d      	ldr	r0, [pc, #52]	@ (801654c <sfn+0xb8>)
 8016516:	f00f f86b 	bl	80255f0 <mg_log>
 801651a:	e7ce      	b.n	80164ba <sfn+0x26>
		MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 801651c:	4b0e      	ldr	r3, [pc, #56]	@ (8016558 <sfn+0xc4>)
 801651e:	2247      	movs	r2, #71	@ 0x47
 8016520:	490e      	ldr	r1, [pc, #56]	@ (801655c <sfn+0xc8>)
 8016522:	2002      	movs	r0, #2
 8016524:	f011 f9cc 	bl	80278c0 <mg_log_prefix>
 8016528:	463a      	mov	r2, r7
 801652a:	4623      	mov	r3, r4
 801652c:	480c      	ldr	r0, [pc, #48]	@ (8016560 <sfn+0xcc>)
 801652e:	f00f f85f 	bl	80255f0 <mg_log>
 8016532:	e7dc      	b.n	80164ee <sfn+0x5a>
		logging(L_INFO, "NTP connection is closed");
 8016534:	490b      	ldr	r1, [pc, #44]	@ (8016564 <sfn+0xd0>)
 8016536:	2001      	movs	r0, #1
 8016538:	f7fb ff86 	bl	8012448 <logging>
		s_sntp_conn = NULL;
 801653c:	4b0a      	ldr	r3, [pc, #40]	@ (8016568 <sfn+0xd4>)
 801653e:	2200      	movs	r2, #0
 8016540:	601a      	str	r2, [r3, #0]
}
 8016542:	e7ac      	b.n	801649e <sfn+0xa>
 8016544:	08039dd4 	.word	0x08039dd4
 8016548:	2000013c 	.word	0x2000013c
 801654c:	08039e18 	.word	0x08039e18
 8016550:	20002aa0 	.word	0x20002aa0
 8016554:	08039e70 	.word	0x08039e70
 8016558:	0803ca38 	.word	0x0803ca38
 801655c:	08039df8 	.word	0x08039df8
 8016560:	08039e4c 	.word	0x08039e4c
 8016564:	08039e94 	.word	0x08039e94
 8016568:	20002a98 	.word	0x20002a98

0801656c <start_sntp>:

void start_sntp(void *arg){
 801656c:	b530      	push	{r4, r5, lr}
 801656e:	b085      	sub	sp, #20
 8016570:	4604      	mov	r4, r0
	logging(L_INFO, "starting NTP client service");
 8016572:	490d      	ldr	r1, [pc, #52]	@ (80165a8 <start_sntp+0x3c>)
 8016574:	2001      	movs	r0, #1
 8016576:	f7fb ff67 	bl	8012448 <logging>
	struct mg_mgr *mgr = (struct mg_mgr*)arg;

	mg_timer_add(mgr, 20000,  MG_TIMER_ONCE, timer_fn, mgr); //Run once with delay 20 seconds
 801657a:	9402      	str	r4, [sp, #8]
 801657c:	4d0b      	ldr	r5, [pc, #44]	@ (80165ac <start_sntp+0x40>)
 801657e:	9501      	str	r5, [sp, #4]
 8016580:	2300      	movs	r3, #0
 8016582:	9300      	str	r3, [sp, #0]
 8016584:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8016588:	2300      	movs	r3, #0
 801658a:	4620      	mov	r0, r4
 801658c:	f010 fc06 	bl	8026d9c <mg_timer_add>
	mg_timer_add(mgr, 4000000, MG_TIMER_REPEAT, timer_fn, mgr); //Repeat every ~ 60 minutes
 8016590:	9402      	str	r4, [sp, #8]
 8016592:	9501      	str	r5, [sp, #4]
 8016594:	2301      	movs	r3, #1
 8016596:	9300      	str	r3, [sp, #0]
 8016598:	4a05      	ldr	r2, [pc, #20]	@ (80165b0 <start_sntp+0x44>)
 801659a:	2300      	movs	r3, #0
 801659c:	4620      	mov	r0, r4
 801659e:	f010 fbfd 	bl	8026d9c <mg_timer_add>

}
 80165a2:	b005      	add	sp, #20
 80165a4:	bd30      	pop	{r4, r5, pc}
 80165a6:	bf00      	nop
 80165a8:	08039eb0 	.word	0x08039eb0
 80165ac:	08016391 	.word	0x08016391
 80165b0:	003d0900 	.word	0x003d0900

080165b4 <my_calloc>:
static inline void *my_calloc(size_t cnt, size_t size) {
 80165b4:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80165b6:	fb01 f400 	mul.w	r4, r1, r0
 80165ba:	4620      	mov	r0, r4
 80165bc:	f005 fd2c 	bl	801c018 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80165c0:	4605      	mov	r5, r0
 80165c2:	b118      	cbz	r0, 80165cc <my_calloc+0x18>
 80165c4:	4622      	mov	r2, r4
 80165c6:	2100      	movs	r1, #0
 80165c8:	f016 f91a 	bl	802c800 <memset>
}
 80165cc:	4628      	mov	r0, r5
 80165ce:	bd38      	pop	{r3, r4, r5, pc}

080165d0 <dev_description_handler>:
		}
	}
}


static void dev_description_handler(struct mg_connection *c, struct mg_http_message *hm){
 80165d0:	b570      	push	{r4, r5, r6, lr}
 80165d2:	b088      	sub	sp, #32
 80165d4:	4605      	mov	r5, r0
 80165d6:	460c      	mov	r4, r1
	logging(L_DEBUG, "Call dev_description_handler");
 80165d8:	4917      	ldr	r1, [pc, #92]	@ (8016638 <dev_description_handler+0x68>)
 80165da:	2000      	movs	r0, #0
 80165dc:	f7fb ff34 	bl	8012448 <logging>
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80165e0:	ae06      	add	r6, sp, #24
 80165e2:	4916      	ldr	r1, [pc, #88]	@ (801663c <dev_description_handler+0x6c>)
 80165e4:	4630      	mov	r0, r6
 80165e6:	f00f f9e1 	bl	80259ac <mg_str_s>
 80165ea:	2300      	movs	r3, #0
 80165ec:	9300      	str	r3, [sp, #0]
 80165ee:	e896 000c 	ldmia.w	r6, {r2, r3}
 80165f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80165f6:	f00f fc01 	bl	8025dfc <mg_match>
 80165fa:	b1a8      	cbz	r0, 8016628 <dev_description_handler+0x58>
		mg_http_reply(c, 200, "", device_description, ssdp_dev_name, ssdp_dev_manufacturer_name, ssdp_dev_model_name, ssdp_dev_ver, dev_id, ip_addr_str);
 80165fc:	4b10      	ldr	r3, [pc, #64]	@ (8016640 <dev_description_handler+0x70>)
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	9305      	str	r3, [sp, #20]
 8016602:	4b10      	ldr	r3, [pc, #64]	@ (8016644 <dev_description_handler+0x74>)
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	9304      	str	r3, [sp, #16]
 8016608:	4b0f      	ldr	r3, [pc, #60]	@ (8016648 <dev_description_handler+0x78>)
 801660a:	9303      	str	r3, [sp, #12]
 801660c:	4b0f      	ldr	r3, [pc, #60]	@ (801664c <dev_description_handler+0x7c>)
 801660e:	9302      	str	r3, [sp, #8]
 8016610:	4b0f      	ldr	r3, [pc, #60]	@ (8016650 <dev_description_handler+0x80>)
 8016612:	9301      	str	r3, [sp, #4]
 8016614:	4b0f      	ldr	r3, [pc, #60]	@ (8016654 <dev_description_handler+0x84>)
 8016616:	9300      	str	r3, [sp, #0]
 8016618:	4b0f      	ldr	r3, [pc, #60]	@ (8016658 <dev_description_handler+0x88>)
 801661a:	4a10      	ldr	r2, [pc, #64]	@ (801665c <dev_description_handler+0x8c>)
 801661c:	21c8      	movs	r1, #200	@ 0xc8
 801661e:	4628      	mov	r0, r5
 8016620:	f00f f83a 	bl	8025698 <mg_http_reply>
	}else{
		mg_http_reply(c, 400, "", //TODO delete for release,
								"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}

}
 8016624:	b008      	add	sp, #32
 8016626:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, "", //TODO delete for release,
 8016628:	4b0d      	ldr	r3, [pc, #52]	@ (8016660 <dev_description_handler+0x90>)
 801662a:	4a0c      	ldr	r2, [pc, #48]	@ (801665c <dev_description_handler+0x8c>)
 801662c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8016630:	4628      	mov	r0, r5
 8016632:	f00f f831 	bl	8025698 <mg_http_reply>
}
 8016636:	e7f5      	b.n	8016624 <dev_description_handler+0x54>
 8016638:	08039ecc 	.word	0x08039ecc
 801663c:	08038040 	.word	0x08038040
 8016640:	20002ab4 	.word	0x20002ab4
 8016644:	20002abc 	.word	0x20002abc
 8016648:	08037d10 	.word	0x08037d10
 801664c:	08039200 	.word	0x08039200
 8016650:	08039be4 	.word	0x08039be4
 8016654:	08039214 	.word	0x08039214
 8016658:	0803cb34 	.word	0x0803cb34
 801665c:	08038678 	.word	0x08038678
 8016660:	08038d0c 	.word	0x08038d0c

08016664 <dev_404_handler>:


static void dev_404_handler(struct mg_connection *c, struct mg_http_message *hm){
 8016664:	b510      	push	{r4, lr}
 8016666:	4604      	mov	r4, r0
	logging(L_DEBUG, "Call  dev_404_handler");
 8016668:	4905      	ldr	r1, [pc, #20]	@ (8016680 <dev_404_handler+0x1c>)
 801666a:	2000      	movs	r0, #0
 801666c:	f7fb feec 	bl	8012448 <logging>
	mg_http_reply(c, 404, "", //TODO delete for release,
 8016670:	4b04      	ldr	r3, [pc, #16]	@ (8016684 <dev_404_handler+0x20>)
 8016672:	4a05      	ldr	r2, [pc, #20]	@ (8016688 <dev_404_handler+0x24>)
 8016674:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8016678:	4620      	mov	r0, r4
 801667a:	f00f f80d 	bl	8025698 <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Not found\"}\r\n");

}
 801667e:	bd10      	pop	{r4, pc}
 8016680:	08039eec 	.word	0x08039eec
 8016684:	08039f04 	.word	0x08039f04
 8016688:	08038678 	.word	0x08038678

0801668c <ssdp_web_handler>:

static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_HTTP_MSG) {
 801668c:	290b      	cmp	r1, #11
 801668e:	d000      	beq.n	8016692 <ssdp_web_handler+0x6>
 8016690:	4770      	bx	lr
static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){
 8016692:	b570      	push	{r4, r5, r6, lr}
 8016694:	b086      	sub	sp, #24
 8016696:	4605      	mov	r5, r0
 8016698:	4614      	mov	r4, r2
		logging(L_DEBUG, "Call ssdp_web_handler MG_EV_HTTP_MSG");
 801669a:	4917      	ldr	r1, [pc, #92]	@ (80166f8 <ssdp_web_handler+0x6c>)
 801669c:	2000      	movs	r0, #0
 801669e:	f7fb fed3 	bl	8012448 <logging>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;

		if (mg_match(hm->uri, mg_str("/device_description.xml"), NULL)) {
 80166a2:	ae02      	add	r6, sp, #8
 80166a4:	4915      	ldr	r1, [pc, #84]	@ (80166fc <ssdp_web_handler+0x70>)
 80166a6:	4630      	mov	r0, r6
 80166a8:	f00f f980 	bl	80259ac <mg_str_s>
 80166ac:	2300      	movs	r3, #0
 80166ae:	9300      	str	r3, [sp, #0]
 80166b0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80166b4:	f104 0108 	add.w	r1, r4, #8
 80166b8:	c903      	ldmia	r1, {r0, r1}
 80166ba:	f00f fb9f 	bl	8025dfc <mg_match>
 80166be:	b128      	cbz	r0, 80166cc <ssdp_web_handler+0x40>
			dev_description_handler(c, hm);
 80166c0:	4621      	mov	r1, r4
 80166c2:	4628      	mov	r0, r5
 80166c4:	f7ff ff84 	bl	80165d0 <dev_description_handler>
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
			dev_404_handler(c, hm);
		}
	}
}
 80166c8:	b006      	add	sp, #24
 80166ca:	bd70      	pop	{r4, r5, r6, pc}
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
 80166cc:	ae04      	add	r6, sp, #16
 80166ce:	490c      	ldr	r1, [pc, #48]	@ (8016700 <ssdp_web_handler+0x74>)
 80166d0:	4630      	mov	r0, r6
 80166d2:	f00f f96b 	bl	80259ac <mg_str_s>
 80166d6:	2300      	movs	r3, #0
 80166d8:	9300      	str	r3, [sp, #0]
 80166da:	e896 000c 	ldmia.w	r6, {r2, r3}
 80166de:	f104 0108 	add.w	r1, r4, #8
 80166e2:	c903      	ldmia	r1, {r0, r1}
 80166e4:	f00f fb8a 	bl	8025dfc <mg_match>
 80166e8:	2800      	cmp	r0, #0
 80166ea:	d0ed      	beq.n	80166c8 <ssdp_web_handler+0x3c>
			dev_404_handler(c, hm);
 80166ec:	4621      	mov	r1, r4
 80166ee:	4628      	mov	r0, r5
 80166f0:	f7ff ffb8 	bl	8016664 <dev_404_handler>
}
 80166f4:	e7e8      	b.n	80166c8 <ssdp_web_handler+0x3c>
 80166f6:	bf00      	nop
 80166f8:	08039f30 	.word	0x08039f30
 80166fc:	08039f58 	.word	0x08039f58
 8016700:	08039f70 	.word	0x08039f70

08016704 <ip_to_string>:
void ip_to_string(uint32_t ip, char *buffer) {
 8016704:	b510      	push	{r4, lr}
 8016706:	b084      	sub	sp, #16
 8016708:	4602      	mov	r2, r0
 801670a:	4608      	mov	r0, r1
    bytes[3] = (ip >> 24) & 0xFF; // Старший байт
 801670c:	0e14      	lsrs	r4, r2, #24
 801670e:	f88d 400f 	strb.w	r4, [sp, #15]
    bytes[2] = (ip >> 16) & 0xFF;
 8016712:	0c11      	lsrs	r1, r2, #16
 8016714:	f88d 100e 	strb.w	r1, [sp, #14]
    bytes[1] = (ip >> 8) & 0xFF;
 8016718:	0a13      	lsrs	r3, r2, #8
 801671a:	f88d 300d 	strb.w	r3, [sp, #13]
    bytes[0] = ip & 0xFF;         // Младший байт
 801671e:	f88d 200c 	strb.w	r2, [sp, #12]
    sprintf(buffer, "%u.%u.%u.%u", bytes[0], bytes[1], bytes[2], bytes[3]);
 8016722:	9401      	str	r4, [sp, #4]
 8016724:	b2c9      	uxtb	r1, r1
 8016726:	9100      	str	r1, [sp, #0]
 8016728:	b2db      	uxtb	r3, r3
 801672a:	b2d2      	uxtb	r2, r2
 801672c:	4902      	ldr	r1, [pc, #8]	@ (8016738 <ip_to_string+0x34>)
 801672e:	f015 fe73 	bl	802c418 <sprintf>
}
 8016732:	b004      	add	sp, #16
 8016734:	bd10      	pop	{r4, pc}
 8016736:	bf00      	nop
 8016738:	08039f74 	.word	0x08039f74

0801673c <send_ssdp_notify>:
static void send_ssdp_notify(void *param){
 801673c:	b570      	push	{r4, r5, r6, lr}
 801673e:	b084      	sub	sp, #16
 8016740:	4606      	mov	r6, r0
	logging(L_DEBUG, "Call send_ssdp_notify");
 8016742:	491e      	ldr	r1, [pc, #120]	@ (80167bc <send_ssdp_notify+0x80>)
 8016744:	2000      	movs	r0, #0
 8016746:	f7fb fe7f 	bl	8012448 <logging>
	size_t buff_len = (strlen(ssdp_notify_template) + strlen(MG_VERSION) + IP_v6_STR_LEN  + strlen(ssdp_web_port) + strlen(dev_id)+ 20); //20 just for spirit healthy, in rel +1 for \0 is needed
 801674a:	4b1d      	ldr	r3, [pc, #116]	@ (80167c0 <send_ssdp_notify+0x84>)
 801674c:	6818      	ldr	r0, [r3, #0]
 801674e:	f7f9 fda7 	bl	80102a0 <strlen>
 8016752:	4604      	mov	r4, r0
	buff = calloc(buff_len, sizeof(char));
 8016754:	2101      	movs	r1, #1
 8016756:	f200 1039 	addw	r0, r0, #313	@ 0x139
 801675a:	f7ff ff2b 	bl	80165b4 <my_calloc>
 801675e:	4a19      	ldr	r2, [pc, #100]	@ (80167c4 <send_ssdp_notify+0x88>)
 8016760:	6010      	str	r0, [r2, #0]
	if (!buff) {
 8016762:	b330      	cbz	r0, 80167b2 <send_ssdp_notify+0x76>
	ip_to_string(mif->ip, ip_addr_str);
 8016764:	4b18      	ldr	r3, [pc, #96]	@ (80167c8 <send_ssdp_notify+0x8c>)
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	4d18      	ldr	r5, [pc, #96]	@ (80167cc <send_ssdp_notify+0x90>)
 801676a:	6829      	ldr	r1, [r5, #0]
 801676c:	6898      	ldr	r0, [r3, #8]
 801676e:	f7ff ffc9 	bl	8016704 <ip_to_string>
	snprintf(buff, buff_len-1, ssdp_notify_template, MG_VERSION, ip_addr_str, ssdp_web_port, dev_id);
 8016772:	4b13      	ldr	r3, [pc, #76]	@ (80167c0 <send_ssdp_notify+0x84>)
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	9302      	str	r3, [sp, #8]
 8016778:	4b15      	ldr	r3, [pc, #84]	@ (80167d0 <send_ssdp_notify+0x94>)
 801677a:	9301      	str	r3, [sp, #4]
 801677c:	682b      	ldr	r3, [r5, #0]
 801677e:	9300      	str	r3, [sp, #0]
 8016780:	4b14      	ldr	r3, [pc, #80]	@ (80167d4 <send_ssdp_notify+0x98>)
 8016782:	4a15      	ldr	r2, [pc, #84]	@ (80167d8 <send_ssdp_notify+0x9c>)
 8016784:	f504 719c 	add.w	r1, r4, #312	@ 0x138
 8016788:	480e      	ldr	r0, [pc, #56]	@ (80167c4 <send_ssdp_notify+0x88>)
 801678a:	6800      	ldr	r0, [r0, #0]
 801678c:	f015 fe0e 	bl	802c3ac <snprintf>
    if (udp_conn != NULL) {
 8016790:	b14e      	cbz	r6, 80167a6 <send_ssdp_notify+0x6a>
        mg_send(udp_conn, buff, strlen(buff));
 8016792:	4b0c      	ldr	r3, [pc, #48]	@ (80167c4 <send_ssdp_notify+0x88>)
 8016794:	681c      	ldr	r4, [r3, #0]
 8016796:	4620      	mov	r0, r4
 8016798:	f7f9 fd82 	bl	80102a0 <strlen>
 801679c:	4602      	mov	r2, r0
 801679e:	4621      	mov	r1, r4
 80167a0:	4630      	mov	r0, r6
 80167a2:	f012 f93f 	bl	8028a24 <mg_send>
    free(buff);
 80167a6:	4b07      	ldr	r3, [pc, #28]	@ (80167c4 <send_ssdp_notify+0x88>)
 80167a8:	6818      	ldr	r0, [r3, #0]
 80167aa:	f005 fcb7 	bl	801c11c <vPortFree>
}
 80167ae:	b004      	add	sp, #16
 80167b0:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Error allocating memory for send SSDP Message");
 80167b2:	490a      	ldr	r1, [pc, #40]	@ (80167dc <send_ssdp_notify+0xa0>)
 80167b4:	2003      	movs	r0, #3
 80167b6:	f7fb fe47 	bl	8012448 <logging>
		return; //TODO add log
 80167ba:	e7f8      	b.n	80167ae <send_ssdp_notify+0x72>
 80167bc:	08039f80 	.word	0x08039f80
 80167c0:	20002abc 	.word	0x20002abc
 80167c4:	20002ab8 	.word	0x20002ab8
 80167c8:	20002aac 	.word	0x20002aac
 80167cc:	20002ab4 	.word	0x20002ab4
 80167d0:	08039fd0 	.word	0x08039fd0
 80167d4:	08039fc8 	.word	0x08039fc8
 80167d8:	0803ca3c 	.word	0x0803ca3c
 80167dc:	08039f98 	.word	0x08039f98

080167e0 <ssdp_listener_handler>:
}

static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
	//char *buffer = NULL;

	if (ev == MG_EV_READ) {
 80167e0:	2907      	cmp	r1, #7
 80167e2:	d000      	beq.n	80167e6 <ssdp_listener_handler+0x6>
 80167e4:	4770      	bx	lr
static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
 80167e6:	b570      	push	{r4, r5, r6, lr}
 80167e8:	b088      	sub	sp, #32
 80167ea:	4604      	mov	r4, r0
		logging(L_DEBUG, "Call ssdp_listener_handler if (ev == MG_EV_READ)");
 80167ec:	491a      	ldr	r1, [pc, #104]	@ (8016858 <ssdp_listener_handler+0x78>)
 80167ee:	2000      	movs	r0, #0
 80167f0:	f7fb fe2a 	bl	8012448 <logging>
		struct mg_str msg = mg_str_n((char *) udp_listen_conn->recv.buf, udp_listen_conn->recv.len);
 80167f4:	4b19      	ldr	r3, [pc, #100]	@ (801685c <ssdp_listener_handler+0x7c>)
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	ad02      	add	r5, sp, #8
 80167fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80167fc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80167fe:	4628      	mov	r0, r5
 8016800:	f00f f8e0 	bl	80259c4 <mg_str_n>
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8016804:	ae04      	add	r6, sp, #16
 8016806:	4916      	ldr	r1, [pc, #88]	@ (8016860 <ssdp_listener_handler+0x80>)
 8016808:	4630      	mov	r0, r6
 801680a:	f00f f8cf 	bl	80259ac <mg_str_s>
 801680e:	2300      	movs	r3, #0
 8016810:	9300      	str	r3, [sp, #0]
 8016812:	e896 000c 	ldmia.w	r6, {r2, r3}
 8016816:	e895 0003 	ldmia.w	r5, {r0, r1}
 801681a:	f00f faef 	bl	8025dfc <mg_match>
 801681e:	b918      	cbnz	r0, 8016828 <ssdp_listener_handler+0x48>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
			send_ssdp_notify(udp_listen_conn);
		}
		c->recv.len = 0;
 8016820:	2300      	movs	r3, #0
 8016822:	6423      	str	r3, [r4, #64]	@ 0x40
	}
}
 8016824:	b008      	add	sp, #32
 8016826:	bd70      	pop	{r4, r5, r6, pc}
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8016828:	ad06      	add	r5, sp, #24
 801682a:	490e      	ldr	r1, [pc, #56]	@ (8016864 <ssdp_listener_handler+0x84>)
 801682c:	4628      	mov	r0, r5
 801682e:	f00f f8bd 	bl	80259ac <mg_str_s>
 8016832:	2300      	movs	r3, #0
 8016834:	9300      	str	r3, [sp, #0]
 8016836:	e895 000c 	ldmia.w	r5, {r2, r3}
 801683a:	a902      	add	r1, sp, #8
 801683c:	c903      	ldmia	r1, {r0, r1}
 801683e:	f00f fadd 	bl	8025dfc <mg_match>
 8016842:	2800      	cmp	r0, #0
 8016844:	d0ec      	beq.n	8016820 <ssdp_listener_handler+0x40>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
 8016846:	4908      	ldr	r1, [pc, #32]	@ (8016868 <ssdp_listener_handler+0x88>)
 8016848:	2000      	movs	r0, #0
 801684a:	f7fb fdfd 	bl	8012448 <logging>
			send_ssdp_notify(udp_listen_conn);
 801684e:	4b03      	ldr	r3, [pc, #12]	@ (801685c <ssdp_listener_handler+0x7c>)
 8016850:	6818      	ldr	r0, [r3, #0]
 8016852:	f7ff ff73 	bl	801673c <send_ssdp_notify>
 8016856:	e7e3      	b.n	8016820 <ssdp_listener_handler+0x40>
 8016858:	08039fd8 	.word	0x08039fd8
 801685c:	20002aa8 	.word	0x20002aa8
 8016860:	0803a00c 	.word	0x0803a00c
 8016864:	0803a018 	.word	0x0803a018
 8016868:	0803a028 	.word	0x0803a028

0801686c <ssdp_timer_handler>:
static void ssdp_timer_handler(void *param){
 801686c:	b510      	push	{r4, lr}
	logging(L_DEBUG, "Call ssdp_timer_handler");
 801686e:	490c      	ldr	r1, [pc, #48]	@ (80168a0 <ssdp_timer_handler+0x34>)
 8016870:	2000      	movs	r0, #0
 8016872:	f7fb fde9 	bl	8012448 <logging>
	struct mg_connection *conn = mg_connect(mgr, ssdp_addr, NULL, NULL);
 8016876:	2300      	movs	r3, #0
 8016878:	461a      	mov	r2, r3
 801687a:	490a      	ldr	r1, [pc, #40]	@ (80168a4 <ssdp_timer_handler+0x38>)
 801687c:	480a      	ldr	r0, [pc, #40]	@ (80168a8 <ssdp_timer_handler+0x3c>)
 801687e:	6800      	ldr	r0, [r0, #0]
 8016880:	f013 fda0 	bl	802a3c4 <mg_connect>
	if (conn == NULL){
 8016884:	b130      	cbz	r0, 8016894 <ssdp_timer_handler+0x28>
 8016886:	4604      	mov	r4, r0
	send_ssdp_notify(conn);
 8016888:	f7ff ff58 	bl	801673c <send_ssdp_notify>
	mg_close_conn(conn);
 801688c:	4620      	mov	r0, r4
 801688e:	f011 ff87 	bl	80287a0 <mg_close_conn>
}
 8016892:	bd10      	pop	{r4, pc}
		logging(L_ERR, "Call ssdp_timer_handler error open conn");
 8016894:	4905      	ldr	r1, [pc, #20]	@ (80168ac <ssdp_timer_handler+0x40>)
 8016896:	2003      	movs	r0, #3
 8016898:	f7fb fdd6 	bl	8012448 <logging>
		return ;
 801689c:	e7f9      	b.n	8016892 <ssdp_timer_handler+0x26>
 801689e:	bf00      	nop
 80168a0:	0803a058 	.word	0x0803a058
 80168a4:	0803ccd8 	.word	0x0803ccd8
 80168a8:	20002ab0 	.word	0x20002ab0
 80168ac:	0803a070 	.word	0x0803a070

080168b0 <ssdp_set_id>:
void ssdp_set_id(const uint8_t* id, uint8_t id_len){
 80168b0:	b570      	push	{r4, r5, r6, lr}
 80168b2:	4606      	mov	r6, r0
 80168b4:	460d      	mov	r5, r1
	logging(L_DEBUG, "Call ssdp_set_id");
 80168b6:	4910      	ldr	r1, [pc, #64]	@ (80168f8 <ssdp_set_id+0x48>)
 80168b8:	2000      	movs	r0, #0
 80168ba:	f7fb fdc5 	bl	8012448 <logging>
	if (id && (id_len > 0)){
 80168be:	b1d6      	cbz	r6, 80168f6 <ssdp_set_id+0x46>
 80168c0:	b1cd      	cbz	r5, 80168f6 <ssdp_set_id+0x46>
		if(dev_id) free(dev_id);
 80168c2:	4b0e      	ldr	r3, [pc, #56]	@ (80168fc <ssdp_set_id+0x4c>)
 80168c4:	6818      	ldr	r0, [r3, #0]
 80168c6:	b108      	cbz	r0, 80168cc <ssdp_set_id+0x1c>
 80168c8:	f005 fc28 	bl	801c11c <vPortFree>
		dev_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 80168cc:	0068      	lsls	r0, r5, #1
 80168ce:	2101      	movs	r1, #1
 80168d0:	4408      	add	r0, r1
 80168d2:	f7ff fe6f 	bl	80165b4 <my_calloc>
 80168d6:	4b09      	ldr	r3, [pc, #36]	@ (80168fc <ssdp_set_id+0x4c>)
 80168d8:	6018      	str	r0, [r3, #0]
		if (dev_id ){
 80168da:	b160      	cbz	r0, 80168f6 <ssdp_set_id+0x46>
	        for (unsigned int i = 0; i < id_len; i++) {
 80168dc:	2400      	movs	r4, #0
 80168de:	e008      	b.n	80168f2 <ssdp_set_id+0x42>
	            sprintf(&dev_id[i * 2], "%02X", id[i]);
 80168e0:	4b06      	ldr	r3, [pc, #24]	@ (80168fc <ssdp_set_id+0x4c>)
 80168e2:	6818      	ldr	r0, [r3, #0]
 80168e4:	5d32      	ldrb	r2, [r6, r4]
 80168e6:	4906      	ldr	r1, [pc, #24]	@ (8016900 <ssdp_set_id+0x50>)
 80168e8:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 80168ec:	f015 fd94 	bl	802c418 <sprintf>
	        for (unsigned int i = 0; i < id_len; i++) {
 80168f0:	3401      	adds	r4, #1
 80168f2:	42a5      	cmp	r5, r4
 80168f4:	d8f4      	bhi.n	80168e0 <ssdp_set_id+0x30>
}
 80168f6:	bd70      	pop	{r4, r5, r6, pc}
 80168f8:	0803a098 	.word	0x0803a098
 80168fc:	20002abc 	.word	0x20002abc
 8016900:	08039b38 	.word	0x08039b38

08016904 <ssdp_start_server>:

void ssdp_start_server(void * param_mgr, void * param_mif){
 8016904:	b530      	push	{r4, r5, lr}
 8016906:	b085      	sub	sp, #20
	mgr 		= (struct mg_mgr *)param_mgr;
 8016908:	4b18      	ldr	r3, [pc, #96]	@ (801696c <ssdp_start_server+0x68>)
 801690a:	6018      	str	r0, [r3, #0]
	mif			= (struct mg_tcpip_if *)param_mif;
 801690c:	4b18      	ldr	r3, [pc, #96]	@ (8016970 <ssdp_start_server+0x6c>)
 801690e:	6019      	str	r1, [r3, #0]
	ip_addr_str = (char *) calloc(IP_v6_STR_LEN, sizeof(char));
 8016910:	2101      	movs	r1, #1
 8016912:	2028      	movs	r0, #40	@ 0x28
 8016914:	f7ff fe4e 	bl	80165b4 <my_calloc>
 8016918:	4b16      	ldr	r3, [pc, #88]	@ (8016974 <ssdp_start_server+0x70>)
 801691a:	6018      	str	r0, [r3, #0]
	if (!ip_addr_str) return; //TODO add logging
 801691c:	b318      	cbz	r0, 8016966 <ssdp_start_server+0x62>

	ssdp_set_id(mif->mac, mac_len);
 801691e:	4d14      	ldr	r5, [pc, #80]	@ (8016970 <ssdp_start_server+0x6c>)
 8016920:	2106      	movs	r1, #6
 8016922:	6828      	ldr	r0, [r5, #0]
 8016924:	f7ff ffc4 	bl	80168b0 <ssdp_set_id>

	logging(L_INFO, "Starting SSDP service");
 8016928:	4913      	ldr	r1, [pc, #76]	@ (8016978 <ssdp_start_server+0x74>)
 801692a:	2001      	movs	r0, #1
 801692c:	f7fb fd8c 	bl	8012448 <logging>
	mg_timer_add(mgr, 60000, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, ssdp_timer_handler, NULL);
 8016930:	4c0e      	ldr	r4, [pc, #56]	@ (801696c <ssdp_start_server+0x68>)
 8016932:	2300      	movs	r3, #0
 8016934:	9302      	str	r3, [sp, #8]
 8016936:	4b11      	ldr	r3, [pc, #68]	@ (801697c <ssdp_start_server+0x78>)
 8016938:	9301      	str	r3, [sp, #4]
 801693a:	2303      	movs	r3, #3
 801693c:	9300      	str	r3, [sp, #0]
 801693e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8016942:	2300      	movs	r3, #0
 8016944:	6820      	ldr	r0, [r4, #0]
 8016946:	f010 fa29 	bl	8026d9c <mg_timer_add>
	mg_http_listen(mgr, "http://0.0.0.0:40000", ssdp_web_handler, mif);
 801694a:	682b      	ldr	r3, [r5, #0]
 801694c:	4a0c      	ldr	r2, [pc, #48]	@ (8016980 <ssdp_start_server+0x7c>)
 801694e:	490d      	ldr	r1, [pc, #52]	@ (8016984 <ssdp_start_server+0x80>)
 8016950:	6820      	ldr	r0, [r4, #0]
 8016952:	f011 ffff 	bl	8028954 <mg_http_listen>
	udp_listen_conn = mg_listen(mgr, ssdp_addr, ssdp_listener_handler, mif);
 8016956:	682b      	ldr	r3, [r5, #0]
 8016958:	4a0b      	ldr	r2, [pc, #44]	@ (8016988 <ssdp_start_server+0x84>)
 801695a:	490c      	ldr	r1, [pc, #48]	@ (801698c <ssdp_start_server+0x88>)
 801695c:	6820      	ldr	r0, [r4, #0]
 801695e:	f011 ff75 	bl	802884c <mg_listen>
 8016962:	4b0b      	ldr	r3, [pc, #44]	@ (8016990 <ssdp_start_server+0x8c>)
 8016964:	6018      	str	r0, [r3, #0]
}
 8016966:	b005      	add	sp, #20
 8016968:	bd30      	pop	{r4, r5, pc}
 801696a:	bf00      	nop
 801696c:	20002ab0 	.word	0x20002ab0
 8016970:	20002aac 	.word	0x20002aac
 8016974:	20002ab4 	.word	0x20002ab4
 8016978:	0803a0ac 	.word	0x0803a0ac
 801697c:	0801686d 	.word	0x0801686d
 8016980:	0801668d 	.word	0x0801668d
 8016984:	0803a0c4 	.word	0x0803a0c4
 8016988:	080167e1 	.word	0x080167e1
 801698c:	0803ccd8 	.word	0x0803ccd8
 8016990:	20002aa8 	.word	0x20002aa8

08016994 <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 8016994:	4770      	bx	lr
	...

08016998 <sFLASH_SPI_ReadBuffer>:
	flash_conf.receive_buffer(&byte, 1);
	return byte;
}


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 8016998:	b508      	push	{r3, lr}
	flash_conf.receive_buffer(buffer, size);
 801699a:	4b02      	ldr	r3, [pc, #8]	@ (80169a4 <sFLASH_SPI_ReadBuffer+0xc>)
 801699c:	685b      	ldr	r3, [r3, #4]
 801699e:	4798      	blx	r3
}
 80169a0:	bd08      	pop	{r3, pc}
 80169a2:	bf00      	nop
 80169a4:	20002b0c 	.word	0x20002b0c

080169a8 <SPI_flash_reg_cb>:
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 80169a8:	b410      	push	{r4}
	if (chip_select){
 80169aa:	b158      	cbz	r0, 80169c4 <SPI_flash_reg_cb+0x1c>
 80169ac:	4604      	mov	r4, r0
		flash_conf.select_chip		= chip_select;
 80169ae:	4809      	ldr	r0, [pc, #36]	@ (80169d4 <SPI_flash_reg_cb+0x2c>)
 80169b0:	60c4      	str	r4, [r0, #12]
	if (chip_deselect){
 80169b2:	b159      	cbz	r1, 80169cc <SPI_flash_reg_cb+0x24>
		flash_conf.deselect_chip	= chip_deselect;
 80169b4:	4807      	ldr	r0, [pc, #28]	@ (80169d4 <SPI_flash_reg_cb+0x2c>)
 80169b6:	6101      	str	r1, [r0, #16]
	flash_conf.receive_buffer	= receive_buffer;
 80169b8:	4906      	ldr	r1, [pc, #24]	@ (80169d4 <SPI_flash_reg_cb+0x2c>)
 80169ba:	604a      	str	r2, [r1, #4]
	flash_conf.send_byte		= send_byte;
 80169bc:	608b      	str	r3, [r1, #8]
}
 80169be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169c2:	4770      	bx	lr
		flash_conf.select_chip		= function_prototype;
 80169c4:	4803      	ldr	r0, [pc, #12]	@ (80169d4 <SPI_flash_reg_cb+0x2c>)
 80169c6:	4c04      	ldr	r4, [pc, #16]	@ (80169d8 <SPI_flash_reg_cb+0x30>)
 80169c8:	60c4      	str	r4, [r0, #12]
 80169ca:	e7f2      	b.n	80169b2 <SPI_flash_reg_cb+0xa>
		flash_conf.deselect_chip	= function_prototype;
 80169cc:	4901      	ldr	r1, [pc, #4]	@ (80169d4 <SPI_flash_reg_cb+0x2c>)
 80169ce:	4802      	ldr	r0, [pc, #8]	@ (80169d8 <SPI_flash_reg_cb+0x30>)
 80169d0:	6108      	str	r0, [r1, #16]
 80169d2:	e7f1      	b.n	80169b8 <SPI_flash_reg_cb+0x10>
 80169d4:	20002b0c 	.word	0x20002b0c
 80169d8:	08016995 	.word	0x08016995

080169dc <sFLASH_CS_LOW>:
void sFLASH_CS_LOW(void){ //select chip
 80169dc:	b508      	push	{r3, lr}
	flash_conf.select_chip();
 80169de:	4b02      	ldr	r3, [pc, #8]	@ (80169e8 <sFLASH_CS_LOW+0xc>)
 80169e0:	68db      	ldr	r3, [r3, #12]
 80169e2:	4798      	blx	r3
}
 80169e4:	bd08      	pop	{r3, pc}
 80169e6:	bf00      	nop
 80169e8:	20002b0c 	.word	0x20002b0c

080169ec <sFLASH_CS_HIGH>:
void sFLASH_CS_HIGH(void){ //deselect chip
 80169ec:	b508      	push	{r3, lr}
	flash_conf.deselect_chip();
 80169ee:	4b02      	ldr	r3, [pc, #8]	@ (80169f8 <sFLASH_CS_HIGH+0xc>)
 80169f0:	691b      	ldr	r3, [r3, #16]
 80169f2:	4798      	blx	r3
}
 80169f4:	bd08      	pop	{r3, pc}
 80169f6:	bf00      	nop
 80169f8:	20002b0c 	.word	0x20002b0c

080169fc <sFLASH_ReadByte>:
{
 80169fc:	b500      	push	{lr}
 80169fe:	b083      	sub	sp, #12
	flash_conf.receive_buffer(&byte, 1);
 8016a00:	4b05      	ldr	r3, [pc, #20]	@ (8016a18 <sFLASH_ReadByte+0x1c>)
 8016a02:	685b      	ldr	r3, [r3, #4]
 8016a04:	2101      	movs	r1, #1
 8016a06:	f10d 0007 	add.w	r0, sp, #7
 8016a0a:	4798      	blx	r3
}
 8016a0c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8016a10:	b003      	add	sp, #12
 8016a12:	f85d fb04 	ldr.w	pc, [sp], #4
 8016a16:	bf00      	nop
 8016a18:	20002b0c 	.word	0x20002b0c

08016a1c <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8016a1c:	b508      	push	{r3, lr}
	flash_conf.send_byte(byte);
 8016a1e:	4b02      	ldr	r3, [pc, #8]	@ (8016a28 <sFLASH_SendByte+0xc>)
 8016a20:	689b      	ldr	r3, [r3, #8]
 8016a22:	4798      	blx	r3
}
 8016a24:	bd08      	pop	{r3, pc}
 8016a26:	bf00      	nop
 8016a28:	20002b0c 	.word	0x20002b0c

08016a2c <sFLASH_Reset>:
void sFLASH_Reset(void){
 8016a2c:	b508      	push	{r3, lr}
    sFLASH_CS_LOW();
 8016a2e:	f7ff ffd5 	bl	80169dc <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8016a32:	2066      	movs	r0, #102	@ 0x66
 8016a34:	f7ff fff2 	bl	8016a1c <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8016a38:	2099      	movs	r0, #153	@ 0x99
 8016a3a:	f7ff ffef 	bl	8016a1c <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 8016a3e:	f7ff ffd5 	bl	80169ec <sFLASH_CS_HIGH>
}
 8016a42:	bd08      	pop	{r3, pc}

08016a44 <sFLASH_Init>:
void sFLASH_Init(void){
 8016a44:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8016a46:	2064      	movs	r0, #100	@ 0x64
 8016a48:	f000 fa58 	bl	8016efc <HAL_Delay>
    sFLASH_Reset();
 8016a4c:	f7ff ffee 	bl	8016a2c <sFLASH_Reset>
    HAL_Delay(100);
 8016a50:	2064      	movs	r0, #100	@ 0x64
 8016a52:	f000 fa53 	bl	8016efc <HAL_Delay>
    HAL_Delay(100);
 8016a56:	2064      	movs	r0, #100	@ 0x64
 8016a58:	f000 fa50 	bl	8016efc <HAL_Delay>
}
 8016a5c:	bd08      	pop	{r3, pc}
	...

08016a60 <sFLASH_ReadBuffer>:
{
 8016a60:	b570      	push	{r4, r5, r6, lr}
 8016a62:	4606      	mov	r6, r0
 8016a64:	460d      	mov	r5, r1
 8016a66:	4614      	mov	r4, r2
  sFLASH_CS_LOW();
 8016a68:	f7ff ffb8 	bl	80169dc <sFLASH_CS_LOW>
  read_bytes = read_bytes + NumByteToRead;
 8016a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8016adc <sFLASH_ReadBuffer+0x7c>)
 8016a6e:	6813      	ldr	r3, [r2, #0]
 8016a70:	4423      	add	r3, r4
 8016a72:	6013      	str	r3, [r2, #0]
  if (NumByteToRead > 16){
 8016a74:	2c10      	cmp	r4, #16
 8016a76:	d917      	bls.n	8016aa8 <sFLASH_ReadBuffer+0x48>
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 8016a78:	200b      	movs	r0, #11
 8016a7a:	f7ff ffcf 	bl	8016a1c <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8016a7e:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8016a82:	f7ff ffcb 	bl	8016a1c <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 8016a86:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8016a8a:	f7ff ffc7 	bl	8016a1c <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8016a8e:	b2e8      	uxtb	r0, r5
 8016a90:	f7ff ffc4 	bl	8016a1c <sFLASH_SendByte>
	  sFLASH_SendByte(0x00);
 8016a94:	2000      	movs	r0, #0
 8016a96:	f7ff ffc1 	bl	8016a1c <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 8016a9a:	4621      	mov	r1, r4
 8016a9c:	4630      	mov	r0, r6
 8016a9e:	f7ff ff7b 	bl	8016998 <sFLASH_SPI_ReadBuffer>
  sFLASH_CS_HIGH();
 8016aa2:	f7ff ffa3 	bl	80169ec <sFLASH_CS_HIGH>
}
 8016aa6:	bd70      	pop	{r4, r5, r6, pc}
	  sFLASH_SendByte(sFLASH_CMD_READ);
 8016aa8:	2003      	movs	r0, #3
 8016aaa:	f7ff ffb7 	bl	8016a1c <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8016aae:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8016ab2:	f7ff ffb3 	bl	8016a1c <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8016ab6:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8016aba:	f7ff ffaf 	bl	8016a1c <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8016abe:	b2e8      	uxtb	r0, r5
 8016ac0:	f7ff ffac 	bl	8016a1c <sFLASH_SendByte>
	  while (NumByteToRead--) /*!< while there is data to be read */
 8016ac4:	e004      	b.n	8016ad0 <sFLASH_ReadBuffer+0x70>
		  *pBuffer = sFLASH_ReadByte();
 8016ac6:	f7ff ff99 	bl	80169fc <sFLASH_ReadByte>
 8016aca:	f806 0b01 	strb.w	r0, [r6], #1
	  while (NumByteToRead--) /*!< while there is data to be read */
 8016ace:	462c      	mov	r4, r5
 8016ad0:	1e63      	subs	r3, r4, #1
 8016ad2:	b29d      	uxth	r5, r3
 8016ad4:	2c00      	cmp	r4, #0
 8016ad6:	d1f6      	bne.n	8016ac6 <sFLASH_ReadBuffer+0x66>
 8016ad8:	e7e3      	b.n	8016aa2 <sFLASH_ReadBuffer+0x42>
 8016ada:	bf00      	nop
 8016adc:	20002ac0 	.word	0x20002ac0

08016ae0 <sFLASH_ReadID>:
{
 8016ae0:	b570      	push	{r4, r5, r6, lr}
  sFLASH_CS_LOW();
 8016ae2:	f7ff ff7b 	bl	80169dc <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8016ae6:	f7ff ff81 	bl	80169ec <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8016aea:	f7ff ff77 	bl	80169dc <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8016aee:	f7ff ff7d 	bl	80169ec <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8016af2:	f7ff ff73 	bl	80169dc <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_RDID);
 8016af6:	209f      	movs	r0, #159	@ 0x9f
 8016af8:	f7ff ff90 	bl	8016a1c <sFLASH_SendByte>
  Temp0 = sFLASH_ReadByte();
 8016afc:	f7ff ff7e 	bl	80169fc <sFLASH_ReadByte>
 8016b00:	4606      	mov	r6, r0
  Temp1 = sFLASH_ReadByte();
 8016b02:	f7ff ff7b 	bl	80169fc <sFLASH_ReadByte>
 8016b06:	4604      	mov	r4, r0
  Temp2 = sFLASH_ReadByte();
 8016b08:	f7ff ff78 	bl	80169fc <sFLASH_ReadByte>
 8016b0c:	4605      	mov	r5, r0
  sFLASH_CS_HIGH();
 8016b0e:	f7ff ff6d 	bl	80169ec <sFLASH_CS_HIGH>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8016b12:	0224      	lsls	r4, r4, #8
 8016b14:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
}
 8016b18:	ea44 0005 	orr.w	r0, r4, r5
 8016b1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016b20 <sFLASH_GetInfo>:
struct SPI_flash_info sFLASH_GetInfo(void){
 8016b20:	b538      	push	{r3, r4, r5, lr}
 8016b22:	4605      	mov	r5, r0
	sFLASH_Init();
 8016b24:	f7ff ff8e 	bl	8016a44 <sFLASH_Init>
	flash_id = sFLASH_ReadID();
 8016b28:	f7ff ffda 	bl	8016ae0 <sFLASH_ReadID>
	switch (flash_id) {
 8016b2c:	4b55      	ldr	r3, [pc, #340]	@ (8016c84 <sFLASH_GetInfo+0x164>)
 8016b2e:	4298      	cmp	r0, r3
 8016b30:	f000 8085 	beq.w	8016c3e <sFLASH_GetInfo+0x11e>
 8016b34:	f0c0 809c 	bcc.w	8016c70 <sFLASH_GetInfo+0x150>
 8016b38:	4b53      	ldr	r3, [pc, #332]	@ (8016c88 <sFLASH_GetInfo+0x168>)
 8016b3a:	4298      	cmp	r0, r3
 8016b3c:	f200 8098 	bhi.w	8016c70 <sFLASH_GetInfo+0x150>
 8016b40:	3b03      	subs	r3, #3
 8016b42:	4298      	cmp	r0, r3
 8016b44:	f0c0 8094 	bcc.w	8016c70 <sFLASH_GetInfo+0x150>
 8016b48:	4b50      	ldr	r3, [pc, #320]	@ (8016c8c <sFLASH_GetInfo+0x16c>)
 8016b4a:	4403      	add	r3, r0
 8016b4c:	2b03      	cmp	r3, #3
 8016b4e:	f200 808f 	bhi.w	8016c70 <sFLASH_GetInfo+0x150>
 8016b52:	e8df f003 	tbb	[pc, r3]
 8016b56:	2b02      	.short	0x2b02
 8016b58:	5d44      	.short	0x5d44
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 8016b5a:	4c4d      	ldr	r4, [pc, #308]	@ (8016c90 <sFLASH_GetInfo+0x170>)
 8016b5c:	4b4d      	ldr	r3, [pc, #308]	@ (8016c94 <sFLASH_GetInfo+0x174>)
 8016b5e:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8016b60:	2301      	movs	r3, #1
 8016b62:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8016b64:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8016b66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016b6a:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8016b6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016b70:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 512;
 8016b72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016b76:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q16", sizeof(flash_info.model_name) - 1);
 8016b78:	2231      	movs	r2, #49	@ 0x31
 8016b7a:	4947      	ldr	r1, [pc, #284]	@ (8016c98 <sFLASH_GetInfo+0x178>)
 8016b7c:	f104 000e 	add.w	r0, r4, #14
 8016b80:	f015 fe85 	bl	802c88e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016b84:	2300      	movs	r3, #0
 8016b86:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
	return flash_info;
 8016b8a:	46ac      	mov	ip, r5
 8016b8c:	4c40      	ldr	r4, [pc, #256]	@ (8016c90 <sFLASH_GetInfo+0x170>)
 8016b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016b90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016b96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016b9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ba0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016ba4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 8016ba8:	4628      	mov	r0, r5
 8016baa:	bd38      	pop	{r3, r4, r5, pc}
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 8016bac:	4c38      	ldr	r4, [pc, #224]	@ (8016c90 <sFLASH_GetInfo+0x170>)
 8016bae:	4b3b      	ldr	r3, [pc, #236]	@ (8016c9c <sFLASH_GetInfo+0x17c>)
 8016bb0:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8016bb2:	2301      	movs	r3, #1
 8016bb4:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8016bb6:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8016bb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016bbc:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8016bbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016bc2:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 8016bc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016bc8:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q32", sizeof(flash_info.model_name) - 1);
 8016bca:	2231      	movs	r2, #49	@ 0x31
 8016bcc:	4934      	ldr	r1, [pc, #208]	@ (8016ca0 <sFLASH_GetInfo+0x180>)
 8016bce:	f104 000e 	add.w	r0, r4, #14
 8016bd2:	f015 fe5c 	bl	802c88e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8016bdc:	e7d5      	b.n	8016b8a <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 8016bde:	4c2c      	ldr	r4, [pc, #176]	@ (8016c90 <sFLASH_GetInfo+0x170>)
 8016be0:	4b30      	ldr	r3, [pc, #192]	@ (8016ca4 <sFLASH_GetInfo+0x184>)
 8016be2:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8016be4:	2301      	movs	r3, #1
 8016be6:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8016be8:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8016bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016bee:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8016bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016bf4:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 2048;
 8016bf6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016bfa:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q64", sizeof(flash_info.model_name) - 1);
 8016bfc:	2231      	movs	r2, #49	@ 0x31
 8016bfe:	492a      	ldr	r1, [pc, #168]	@ (8016ca8 <sFLASH_GetInfo+0x188>)
 8016c00:	f104 000e 	add.w	r0, r4, #14
 8016c04:	f015 fe43 	bl	802c88e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016c08:	2300      	movs	r3, #0
 8016c0a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8016c0e:	e7bc      	b.n	8016b8a <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 8016c10:	4c1f      	ldr	r4, [pc, #124]	@ (8016c90 <sFLASH_GetInfo+0x170>)
 8016c12:	4b1d      	ldr	r3, [pc, #116]	@ (8016c88 <sFLASH_GetInfo+0x168>)
 8016c14:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8016c16:	2301      	movs	r3, #1
 8016c18:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8016c1a:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8016c1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016c20:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8016c22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016c26:	8162      	strh	r2, [r4, #10]
			flash_info.block_count = 4096;
 8016c28:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q128", sizeof(flash_info.model_name) - 1);
 8016c2a:	2231      	movs	r2, #49	@ 0x31
 8016c2c:	491f      	ldr	r1, [pc, #124]	@ (8016cac <sFLASH_GetInfo+0x18c>)
 8016c2e:	f104 000e 	add.w	r0, r4, #14
 8016c32:	f015 fe2c 	bl	802c88e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016c36:	2300      	movs	r3, #0
 8016c38:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8016c3c:	e7a5      	b.n	8016b8a <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 8016c3e:	4c14      	ldr	r4, [pc, #80]	@ (8016c90 <sFLASH_GetInfo+0x170>)
 8016c40:	4b10      	ldr	r3, [pc, #64]	@ (8016c84 <sFLASH_GetInfo+0x164>)
 8016c42:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8016c44:	2301      	movs	r3, #1
 8016c46:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8016c48:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8016c4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016c4e:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8016c50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016c54:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 8016c56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016c5a:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "MX25L32", sizeof(flash_info.model_name) - 1);
 8016c5c:	2231      	movs	r2, #49	@ 0x31
 8016c5e:	4914      	ldr	r1, [pc, #80]	@ (8016cb0 <sFLASH_GetInfo+0x190>)
 8016c60:	f104 000e 	add.w	r0, r4, #14
 8016c64:	f015 fe13 	bl	802c88e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016c68:	2300      	movs	r3, #0
 8016c6a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8016c6e:	e78c      	b.n	8016b8a <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8016c70:	4807      	ldr	r0, [pc, #28]	@ (8016c90 <sFLASH_GetInfo+0x170>)
 8016c72:	2300      	movs	r3, #0
 8016c74:	f840 3b0e 	str.w	r3, [r0], #14
			strncpy(flash_info.model_name, "Unknown", sizeof(flash_info.model_name) - 1);
 8016c78:	2231      	movs	r2, #49	@ 0x31
 8016c7a:	490e      	ldr	r1, [pc, #56]	@ (8016cb4 <sFLASH_GetInfo+0x194>)
 8016c7c:	f015 fe07 	bl	802c88e <strncpy>
			break;
 8016c80:	e783      	b.n	8016b8a <sFLASH_GetInfo+0x6a>
 8016c82:	bf00      	nop
 8016c84:	00c22016 	.word	0x00c22016
 8016c88:	00ef4018 	.word	0x00ef4018
 8016c8c:	ff10bfeb 	.word	0xff10bfeb
 8016c90:	20002acc 	.word	0x20002acc
 8016c94:	00ef4015 	.word	0x00ef4015
 8016c98:	0803a0dc 	.word	0x0803a0dc
 8016c9c:	00ef4016 	.word	0x00ef4016
 8016ca0:	0803a0ec 	.word	0x0803a0ec
 8016ca4:	00ef4017 	.word	0x00ef4017
 8016ca8:	0803a0fc 	.word	0x0803a0fc
 8016cac:	0803a10c 	.word	0x0803a10c
 8016cb0:	0803a11c 	.word	0x0803a11c
 8016cb4:	0803a124 	.word	0x0803a124

08016cb8 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8016cb8:	b508      	push	{r3, lr}
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8016cba:	f7ff fe8f 	bl	80169dc <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8016cbe:	2006      	movs	r0, #6
 8016cc0:	f7ff feac 	bl	8016a1c <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8016cc4:	f7ff fe92 	bl	80169ec <sFLASH_CS_HIGH>
}
 8016cc8:	bd08      	pop	{r3, pc}
	...

08016ccc <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 8016ccc:	b538      	push	{r3, r4, r5, lr}
  uint8_t flashstatus = 0;

  int32_t timeout = 100000;
 8016cce:	4d09      	ldr	r5, [pc, #36]	@ (8016cf4 <sFLASH_WaitForWriteEnd+0x28>)
  //(sFLASH_CMD_RDSR);

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  sFLASH_CS_LOW();
 8016cd0:	f7ff fe84 	bl	80169dc <sFLASH_CS_LOW>
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8016cd4:	2005      	movs	r0, #5
 8016cd6:	f7ff fea1 	bl	8016a1c <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 8016cda:	f7ff fe8f 	bl	80169fc <sFLASH_ReadByte>
 8016cde:	4604      	mov	r4, r0

	  sFLASH_CS_HIGH();
 8016ce0:	f7ff fe84 	bl	80169ec <sFLASH_CS_HIGH>

	  /*!< Decrement timeout to avoid infinite loop */
	  if (timeout-- == 0)
 8016ce4:	462b      	mov	r3, r5
 8016ce6:	3d01      	subs	r5, #1
 8016ce8:	b113      	cbz	r3, 8016cf0 <sFLASH_WaitForWriteEnd+0x24>
		  //printf("Timeout waiting for Write End\n"); Logging
		  return; //Exit if timeout
	  }

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8016cea:	f014 0f01 	tst.w	r4, #1
 8016cee:	d1ef      	bne.n	8016cd0 <sFLASH_WaitForWriteEnd+0x4>

  /*!< Deselect the FLASH: Chip Select high */
  //sFLASH_CS_HIGH();
}
 8016cf0:	bd38      	pop	{r3, r4, r5, pc}
 8016cf2:	bf00      	nop
 8016cf4:	000186a0 	.word	0x000186a0

08016cf8 <sFLASH_EraseSector>:
{
 8016cf8:	b510      	push	{r4, lr}
 8016cfa:	4604      	mov	r4, r0
  sFLASH_WriteEnable();
 8016cfc:	f7ff ffdc 	bl	8016cb8 <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 8016d00:	f7ff fe6c 	bl	80169dc <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_SE);
 8016d04:	2020      	movs	r0, #32
 8016d06:	f7ff fe89 	bl	8016a1c <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 8016d0a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8016d0e:	f7ff fe85 	bl	8016a1c <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 8016d12:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8016d16:	f7ff fe81 	bl	8016a1c <sFLASH_SendByte>
  sFLASH_SendByte(SectorAddr & 0xFF);
 8016d1a:	b2e0      	uxtb	r0, r4
 8016d1c:	f7ff fe7e 	bl	8016a1c <sFLASH_SendByte>
  sFLASH_CS_HIGH();
 8016d20:	f7ff fe64 	bl	80169ec <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 8016d24:	f7ff ffd2 	bl	8016ccc <sFLASH_WaitForWriteEnd>
  erace_sectors++ ;
 8016d28:	4a02      	ldr	r2, [pc, #8]	@ (8016d34 <sFLASH_EraseSector+0x3c>)
 8016d2a:	6813      	ldr	r3, [r2, #0]
 8016d2c:	3301      	adds	r3, #1
 8016d2e:	6013      	str	r3, [r2, #0]
}
 8016d30:	bd10      	pop	{r4, pc}
 8016d32:	bf00      	nop
 8016d34:	20002ac8 	.word	0x20002ac8

08016d38 <sFLASH_WritePage>:
{
 8016d38:	b570      	push	{r4, r5, r6, lr}
 8016d3a:	4606      	mov	r6, r0
 8016d3c:	460c      	mov	r4, r1
 8016d3e:	4615      	mov	r5, r2
  sFLASH_WriteEnable();
 8016d40:	f7ff ffba 	bl	8016cb8 <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 8016d44:	f7ff fe4a 	bl	80169dc <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 8016d48:	2002      	movs	r0, #2
 8016d4a:	f7ff fe67 	bl	8016a1c <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8016d4e:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8016d52:	f7ff fe63 	bl	8016a1c <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 8016d56:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8016d5a:	f7ff fe5f 	bl	8016a1c <sFLASH_SendByte>
  sFLASH_SendByte(WriteAddr & 0xFF);
 8016d5e:	b2e0      	uxtb	r0, r4
 8016d60:	f7ff fe5c 	bl	8016a1c <sFLASH_SendByte>
  while (NumByteToWrite--)
 8016d64:	e004      	b.n	8016d70 <sFLASH_WritePage+0x38>
    sFLASH_SendByte(*pBuffer);
 8016d66:	f816 0b01 	ldrb.w	r0, [r6], #1
 8016d6a:	f7ff fe57 	bl	8016a1c <sFLASH_SendByte>
  while (NumByteToWrite--)
 8016d6e:	4625      	mov	r5, r4
 8016d70:	1e6b      	subs	r3, r5, #1
 8016d72:	b29c      	uxth	r4, r3
 8016d74:	2d00      	cmp	r5, #0
 8016d76:	d1f6      	bne.n	8016d66 <sFLASH_WritePage+0x2e>
  sFLASH_CS_HIGH();
 8016d78:	f7ff fe38 	bl	80169ec <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 8016d7c:	f7ff ffa6 	bl	8016ccc <sFLASH_WaitForWriteEnd>
}
 8016d80:	bd70      	pop	{r4, r5, r6, pc}
	...

08016d84 <sFLASH_WriteBuffer>:
{
 8016d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d88:	4605      	mov	r5, r0
 8016d8a:	460c      	mov	r4, r1
 8016d8c:	4617      	mov	r7, r2
  write_bytes = write_bytes + NumByteToWrite;
 8016d8e:	4a32      	ldr	r2, [pc, #200]	@ (8016e58 <sFLASH_WriteBuffer+0xd4>)
 8016d90:	6813      	ldr	r3, [r2, #0]
 8016d92:	443b      	add	r3, r7
 8016d94:	6013      	str	r3, [r2, #0]
  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 8016d96:	b2cb      	uxtb	r3, r1
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8016d98:	0a39      	lsrs	r1, r7, #8
  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 8016d9a:	b9db      	cbnz	r3, 8016dd4 <sFLASH_WriteBuffer+0x50>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8016d9c:	b979      	cbnz	r1, 8016dbe <sFLASH_WriteBuffer+0x3a>
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8016d9e:	463a      	mov	r2, r7
 8016da0:	4621      	mov	r1, r4
 8016da2:	f7ff ffc9 	bl	8016d38 <sFLASH_WritePage>
 8016da6:	e013      	b.n	8016dd0 <sFLASH_WriteBuffer+0x4c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8016da8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016dac:	4621      	mov	r1, r4
 8016dae:	4628      	mov	r0, r5
 8016db0:	f7ff ffc2 	bl	8016d38 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8016db4:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 8016db8:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 8016dbc:	4631      	mov	r1, r6
 8016dbe:	1e4b      	subs	r3, r1, #1
 8016dc0:	b2de      	uxtb	r6, r3
 8016dc2:	2900      	cmp	r1, #0
 8016dc4:	d1f0      	bne.n	8016da8 <sFLASH_WriteBuffer+0x24>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8016dc6:	b2fa      	uxtb	r2, r7
 8016dc8:	4621      	mov	r1, r4
 8016dca:	4628      	mov	r0, r5
 8016dcc:	f7ff ffb4 	bl	8016d38 <sFLASH_WritePage>
}
 8016dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016dd4:	f1c3 0800 	rsb	r8, r3, #0
 8016dd8:	fa5f f888 	uxtb.w	r8, r8
 8016ddc:	b2fa      	uxtb	r2, r7
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8016dde:	b9a1      	cbnz	r1, 8016e0a <sFLASH_WriteBuffer+0x86>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 8016de0:	4590      	cmp	r8, r2
 8016de2:	d20d      	bcs.n	8016e00 <sFLASH_WriteBuffer+0x7c>
        temp = NumOfSingle - count;
 8016de4:	4413      	add	r3, r2
 8016de6:	b2de      	uxtb	r6, r3
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 8016de8:	4642      	mov	r2, r8
 8016dea:	4621      	mov	r1, r4
 8016dec:	f7ff ffa4 	bl	8016d38 <sFLASH_WritePage>
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 8016df0:	4632      	mov	r2, r6
 8016df2:	eb08 0104 	add.w	r1, r8, r4
 8016df6:	eb05 0008 	add.w	r0, r5, r8
 8016dfa:	f7ff ff9d 	bl	8016d38 <sFLASH_WritePage>
 8016dfe:	e7e7      	b.n	8016dd0 <sFLASH_WriteBuffer+0x4c>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8016e00:	463a      	mov	r2, r7
 8016e02:	4621      	mov	r1, r4
 8016e04:	f7ff ff98 	bl	8016d38 <sFLASH_WritePage>
 8016e08:	e7e2      	b.n	8016dd0 <sFLASH_WriteBuffer+0x4c>
      NumByteToWrite -= count;
 8016e0a:	eba7 0708 	sub.w	r7, r7, r8
 8016e0e:	fa1f f987 	uxth.w	r9, r7
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8016e12:	f3c7 2607 	ubfx	r6, r7, #8, #8
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8016e16:	b2ff      	uxtb	r7, r7
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 8016e18:	4642      	mov	r2, r8
 8016e1a:	4621      	mov	r1, r4
 8016e1c:	f7ff ff8c 	bl	8016d38 <sFLASH_WritePage>
      WriteAddr +=  count;
 8016e20:	4444      	add	r4, r8
      pBuffer += count;
 8016e22:	4445      	add	r5, r8
      while (NumOfPage--)
 8016e24:	e00a      	b.n	8016e3c <sFLASH_WriteBuffer+0xb8>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8016e26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016e2a:	4621      	mov	r1, r4
 8016e2c:	4628      	mov	r0, r5
 8016e2e:	f7ff ff83 	bl	8016d38 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8016e32:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 8016e36:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 8016e3a:	4646      	mov	r6, r8
 8016e3c:	1e73      	subs	r3, r6, #1
 8016e3e:	fa5f f883 	uxtb.w	r8, r3
 8016e42:	2e00      	cmp	r6, #0
 8016e44:	d1ef      	bne.n	8016e26 <sFLASH_WriteBuffer+0xa2>
      if (NumOfSingle != 0)
 8016e46:	2f00      	cmp	r7, #0
 8016e48:	d0c2      	beq.n	8016dd0 <sFLASH_WriteBuffer+0x4c>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8016e4a:	fa5f f289 	uxtb.w	r2, r9
 8016e4e:	4621      	mov	r1, r4
 8016e50:	4628      	mov	r0, r5
 8016e52:	f7ff ff71 	bl	8016d38 <sFLASH_WritePage>
}
 8016e56:	e7bb      	b.n	8016dd0 <sFLASH_WriteBuffer+0x4c>
 8016e58:	20002ac4 	.word	0x20002ac4

08016e5c <sFLASH_GetReadedBytes>:

uint32_t sFLASH_GetReadedBytes(void){
	return read_bytes;
}
 8016e5c:	4b01      	ldr	r3, [pc, #4]	@ (8016e64 <sFLASH_GetReadedBytes+0x8>)
 8016e5e:	6818      	ldr	r0, [r3, #0]
 8016e60:	4770      	bx	lr
 8016e62:	bf00      	nop
 8016e64:	20002ac0 	.word	0x20002ac0

08016e68 <sFLASH_GetWritedBytes>:

uint32_t sFLASH_GetWritedBytes(void){
	return write_bytes;
}
 8016e68:	4b01      	ldr	r3, [pc, #4]	@ (8016e70 <sFLASH_GetWritedBytes+0x8>)
 8016e6a:	6818      	ldr	r0, [r3, #0]
 8016e6c:	4770      	bx	lr
 8016e6e:	bf00      	nop
 8016e70:	20002ac4 	.word	0x20002ac4

08016e74 <sFLASH_GetEraceSectorTimes>:

uint32_t sFLASH_GetEraceSectorTimes(void){
	return erace_sectors;
}
 8016e74:	4b01      	ldr	r3, [pc, #4]	@ (8016e7c <sFLASH_GetEraceSectorTimes+0x8>)
 8016e76:	6818      	ldr	r0, [r3, #0]
 8016e78:	4770      	bx	lr
 8016e7a:	bf00      	nop
 8016e7c:	20002ac8 	.word	0x20002ac8

08016e80 <sFLASH_SetReadedBytes>:

void sFLASH_SetReadedBytes(uint32_t bytes){
	read_bytes = bytes;
 8016e80:	4b01      	ldr	r3, [pc, #4]	@ (8016e88 <sFLASH_SetReadedBytes+0x8>)
 8016e82:	6018      	str	r0, [r3, #0]
}
 8016e84:	4770      	bx	lr
 8016e86:	bf00      	nop
 8016e88:	20002ac0 	.word	0x20002ac0

08016e8c <sFLASH_SetWritedBytes>:

void sFLASH_SetWritedBytes(uint32_t bytes){
	write_bytes = bytes;
 8016e8c:	4b01      	ldr	r3, [pc, #4]	@ (8016e94 <sFLASH_SetWritedBytes+0x8>)
 8016e8e:	6018      	str	r0, [r3, #0]
}
 8016e90:	4770      	bx	lr
 8016e92:	bf00      	nop
 8016e94:	20002ac4 	.word	0x20002ac4

08016e98 <sFLASH_SetEraceSectorTimes>:

void sFLASH_SetEraceSectorTimes(uint32_t sectors){
	erace_sectors = sectors;
 8016e98:	4b01      	ldr	r3, [pc, #4]	@ (8016ea0 <sFLASH_SetEraceSectorTimes+0x8>)
 8016e9a:	6018      	str	r0, [r3, #0]
}
 8016e9c:	4770      	bx	lr
 8016e9e:	bf00      	nop
 8016ea0:	20002ac8 	.word	0x20002ac8

08016ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8016ea4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8016ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8016ed4 <HAL_Init+0x30>)
 8016ea8:	681a      	ldr	r2, [r3, #0]
 8016eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016eae:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8016eb0:	681a      	ldr	r2, [r3, #0]
 8016eb2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8016eb6:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8016eb8:	681a      	ldr	r2, [r3, #0]
 8016eba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016ebe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8016ec0:	2003      	movs	r0, #3
 8016ec2:	f000 fb23 	bl	801750c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8016ec6:	200f      	movs	r0, #15
 8016ec8:	f7fb fd62 	bl	8012990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8016ecc:	f7fb fd3e 	bl	801294c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8016ed0:	2000      	movs	r0, #0
 8016ed2:	bd08      	pop	{r3, pc}
 8016ed4:	40023c00 	.word	0x40023c00

08016ed8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8016ed8:	4a03      	ldr	r2, [pc, #12]	@ (8016ee8 <HAL_IncTick+0x10>)
 8016eda:	6811      	ldr	r1, [r2, #0]
 8016edc:	4b03      	ldr	r3, [pc, #12]	@ (8016eec <HAL_IncTick+0x14>)
 8016ede:	781b      	ldrb	r3, [r3, #0]
 8016ee0:	440b      	add	r3, r1
 8016ee2:	6013      	str	r3, [r2, #0]
}
 8016ee4:	4770      	bx	lr
 8016ee6:	bf00      	nop
 8016ee8:	20002b20 	.word	0x20002b20
 8016eec:	20000116 	.word	0x20000116

08016ef0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8016ef0:	4b01      	ldr	r3, [pc, #4]	@ (8016ef8 <HAL_GetTick+0x8>)
 8016ef2:	6818      	ldr	r0, [r3, #0]
}
 8016ef4:	4770      	bx	lr
 8016ef6:	bf00      	nop
 8016ef8:	20002b20 	.word	0x20002b20

08016efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8016efc:	b538      	push	{r3, r4, r5, lr}
 8016efe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8016f00:	f7ff fff6 	bl	8016ef0 <HAL_GetTick>
 8016f04:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8016f06:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8016f0a:	d002      	beq.n	8016f12 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8016f0c:	4b04      	ldr	r3, [pc, #16]	@ (8016f20 <HAL_Delay+0x24>)
 8016f0e:	781b      	ldrb	r3, [r3, #0]
 8016f10:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8016f12:	f7ff ffed 	bl	8016ef0 <HAL_GetTick>
 8016f16:	1b40      	subs	r0, r0, r5
 8016f18:	42a0      	cmp	r0, r4
 8016f1a:	d3fa      	bcc.n	8016f12 <HAL_Delay+0x16>
  {
  }
}
 8016f1c:	bd38      	pop	{r3, r4, r5, pc}
 8016f1e:	bf00      	nop
 8016f20:	20000116 	.word	0x20000116

08016f24 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8016f24:	4b4a      	ldr	r3, [pc, #296]	@ (8017050 <ADC_Init+0x12c>)
 8016f26:	685a      	ldr	r2, [r3, #4]
 8016f28:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8016f2c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8016f2e:	685a      	ldr	r2, [r3, #4]
 8016f30:	6841      	ldr	r1, [r0, #4]
 8016f32:	430a      	orrs	r2, r1
 8016f34:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8016f36:	6802      	ldr	r2, [r0, #0]
 8016f38:	6853      	ldr	r3, [r2, #4]
 8016f3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016f3e:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8016f40:	6802      	ldr	r2, [r0, #0]
 8016f42:	6853      	ldr	r3, [r2, #4]
 8016f44:	6901      	ldr	r1, [r0, #16]
 8016f46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8016f4a:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8016f4c:	6802      	ldr	r2, [r0, #0]
 8016f4e:	6853      	ldr	r3, [r2, #4]
 8016f50:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8016f54:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8016f56:	6802      	ldr	r2, [r0, #0]
 8016f58:	6853      	ldr	r3, [r2, #4]
 8016f5a:	6881      	ldr	r1, [r0, #8]
 8016f5c:	430b      	orrs	r3, r1
 8016f5e:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8016f60:	6802      	ldr	r2, [r0, #0]
 8016f62:	6893      	ldr	r3, [r2, #8]
 8016f64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016f68:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8016f6a:	6802      	ldr	r2, [r0, #0]
 8016f6c:	6893      	ldr	r3, [r2, #8]
 8016f6e:	68c1      	ldr	r1, [r0, #12]
 8016f70:	430b      	orrs	r3, r1
 8016f72:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8016f74:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8016f76:	4b37      	ldr	r3, [pc, #220]	@ (8017054 <ADC_Init+0x130>)
 8016f78:	429a      	cmp	r2, r3
 8016f7a:	d057      	beq.n	801702c <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8016f7c:	6802      	ldr	r2, [r0, #0]
 8016f7e:	6893      	ldr	r3, [r2, #8]
 8016f80:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8016f84:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8016f86:	6802      	ldr	r2, [r0, #0]
 8016f88:	6893      	ldr	r3, [r2, #8]
 8016f8a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8016f8c:	430b      	orrs	r3, r1
 8016f8e:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8016f90:	6802      	ldr	r2, [r0, #0]
 8016f92:	6893      	ldr	r3, [r2, #8]
 8016f94:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8016f98:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8016f9a:	6802      	ldr	r2, [r0, #0]
 8016f9c:	6893      	ldr	r3, [r2, #8]
 8016f9e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8016fa0:	430b      	orrs	r3, r1
 8016fa2:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8016fa4:	6802      	ldr	r2, [r0, #0]
 8016fa6:	6893      	ldr	r3, [r2, #8]
 8016fa8:	f023 0302 	bic.w	r3, r3, #2
 8016fac:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8016fae:	6802      	ldr	r2, [r0, #0]
 8016fb0:	6893      	ldr	r3, [r2, #8]
 8016fb2:	7e01      	ldrb	r1, [r0, #24]
 8016fb4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8016fb8:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8016fba:	f890 3020 	ldrb.w	r3, [r0, #32]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d03f      	beq.n	8017042 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8016fc2:	6802      	ldr	r2, [r0, #0]
 8016fc4:	6853      	ldr	r3, [r2, #4]
 8016fc6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8016fca:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8016fcc:	6802      	ldr	r2, [r0, #0]
 8016fce:	6853      	ldr	r3, [r2, #4]
 8016fd0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8016fd4:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8016fd6:	6801      	ldr	r1, [r0, #0]
 8016fd8:	684b      	ldr	r3, [r1, #4]
 8016fda:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8016fdc:	3a01      	subs	r2, #1
 8016fde:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8016fe2:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8016fe4:	6802      	ldr	r2, [r0, #0]
 8016fe6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8016fe8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8016fec:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8016fee:	6801      	ldr	r1, [r0, #0]
 8016ff0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8016ff2:	69c2      	ldr	r2, [r0, #28]
 8016ff4:	3a01      	subs	r2, #1
 8016ff6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8016ffa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8016ffc:	6802      	ldr	r2, [r0, #0]
 8016ffe:	6893      	ldr	r3, [r2, #8]
 8017000:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8017004:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8017006:	6802      	ldr	r2, [r0, #0]
 8017008:	6893      	ldr	r3, [r2, #8]
 801700a:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 801700e:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8017012:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8017014:	6802      	ldr	r2, [r0, #0]
 8017016:	6893      	ldr	r3, [r2, #8]
 8017018:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801701c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801701e:	6802      	ldr	r2, [r0, #0]
 8017020:	6893      	ldr	r3, [r2, #8]
 8017022:	6941      	ldr	r1, [r0, #20]
 8017024:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8017028:	6093      	str	r3, [r2, #8]
}
 801702a:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801702c:	6802      	ldr	r2, [r0, #0]
 801702e:	6893      	ldr	r3, [r2, #8]
 8017030:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8017034:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8017036:	6802      	ldr	r2, [r0, #0]
 8017038:	6893      	ldr	r3, [r2, #8]
 801703a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 801703e:	6093      	str	r3, [r2, #8]
 8017040:	e7b0      	b.n	8016fa4 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8017042:	6802      	ldr	r2, [r0, #0]
 8017044:	6853      	ldr	r3, [r2, #4]
 8017046:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801704a:	6053      	str	r3, [r2, #4]
 801704c:	e7ca      	b.n	8016fe4 <ADC_Init+0xc0>
 801704e:	bf00      	nop
 8017050:	40012300 	.word	0x40012300
 8017054:	0f000001 	.word	0x0f000001

08017058 <HAL_ADC_Init>:
  if (hadc == NULL)
 8017058:	b338      	cbz	r0, 80170aa <HAL_ADC_Init+0x52>
{
 801705a:	b510      	push	{r4, lr}
 801705c:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 801705e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8017060:	b143      	cbz	r3, 8017074 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8017062:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017064:	f013 0f10 	tst.w	r3, #16
 8017068:	d00b      	beq.n	8017082 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 801706a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 801706c:	2300      	movs	r3, #0
 801706e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8017072:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8017074:	f7fa f888 	bl	8011188 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8017078:	2300      	movs	r3, #0
 801707a:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 801707c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8017080:	e7ef      	b.n	8017062 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8017082:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017084:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8017088:	f023 0302 	bic.w	r3, r3, #2
 801708c:	f043 0302 	orr.w	r3, r3, #2
 8017090:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8017092:	4620      	mov	r0, r4
 8017094:	f7ff ff46 	bl	8016f24 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8017098:	2000      	movs	r0, #0
 801709a:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 801709c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801709e:	f023 0303 	bic.w	r3, r3, #3
 80170a2:	f043 0301 	orr.w	r3, r3, #1
 80170a6:	6423      	str	r3, [r4, #64]	@ 0x40
 80170a8:	e7e0      	b.n	801706c <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80170aa:	2001      	movs	r0, #1
}
 80170ac:	4770      	bx	lr
	...

080170b0 <HAL_ADC_Start>:
{
 80170b0:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80170b2:	2300      	movs	r3, #0
 80170b4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80170b6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80170ba:	2b01      	cmp	r3, #1
 80170bc:	d06e      	beq.n	801719c <HAL_ADC_Start+0xec>
 80170be:	2301      	movs	r3, #1
 80170c0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80170c4:	6803      	ldr	r3, [r0, #0]
 80170c6:	689a      	ldr	r2, [r3, #8]
 80170c8:	f012 0f01 	tst.w	r2, #1
 80170cc:	d113      	bne.n	80170f6 <HAL_ADC_Start+0x46>
    __HAL_ADC_ENABLE(hadc);
 80170ce:	689a      	ldr	r2, [r3, #8]
 80170d0:	f042 0201 	orr.w	r2, r2, #1
 80170d4:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80170d6:	4b34      	ldr	r3, [pc, #208]	@ (80171a8 <HAL_ADC_Start+0xf8>)
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	4a34      	ldr	r2, [pc, #208]	@ (80171ac <HAL_ADC_Start+0xfc>)
 80170dc:	fba2 2303 	umull	r2, r3, r2, r3
 80170e0:	0c9b      	lsrs	r3, r3, #18
 80170e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80170e6:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 80170e8:	e002      	b.n	80170f0 <HAL_ADC_Start+0x40>
      counter--;
 80170ea:	9b01      	ldr	r3, [sp, #4]
 80170ec:	3b01      	subs	r3, #1
 80170ee:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 80170f0:	9b01      	ldr	r3, [sp, #4]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d1f9      	bne.n	80170ea <HAL_ADC_Start+0x3a>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80170f6:	6802      	ldr	r2, [r0, #0]
 80170f8:	6893      	ldr	r3, [r2, #8]
 80170fa:	f013 0f01 	tst.w	r3, #1
 80170fe:	d042      	beq.n	8017186 <HAL_ADC_Start+0xd6>
    ADC_STATE_CLR_SET(hadc->State,
 8017100:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8017102:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8017106:	f023 0301 	bic.w	r3, r3, #1
 801710a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801710e:	6403      	str	r3, [r0, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8017110:	6853      	ldr	r3, [r2, #4]
 8017112:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8017116:	d005      	beq.n	8017124 <HAL_ADC_Start+0x74>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8017118:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801711a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 801711e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8017122:	6403      	str	r3, [r0, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8017124:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8017126:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 801712a:	d019      	beq.n	8017160 <HAL_ADC_Start+0xb0>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 801712c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801712e:	f023 0306 	bic.w	r3, r3, #6
 8017132:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8017134:	2300      	movs	r3, #0
 8017136:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 801713a:	f06f 0322 	mvn.w	r3, #34	@ 0x22
 801713e:	6013      	str	r3, [r2, #0]
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8017140:	4b1b      	ldr	r3, [pc, #108]	@ (80171b0 <HAL_ADC_Start+0x100>)
 8017142:	685b      	ldr	r3, [r3, #4]
 8017144:	f013 0f1f 	tst.w	r3, #31
 8017148:	d10d      	bne.n	8017166 <HAL_ADC_Start+0xb6>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 801714a:	6803      	ldr	r3, [r0, #0]
 801714c:	689a      	ldr	r2, [r3, #8]
 801714e:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8017152:	d125      	bne.n	80171a0 <HAL_ADC_Start+0xf0>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8017154:	689a      	ldr	r2, [r3, #8]
 8017156:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 801715a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801715c:	2000      	movs	r0, #0
 801715e:	e01b      	b.n	8017198 <HAL_ADC_Start+0xe8>
      ADC_CLEAR_ERRORCODE(hadc);
 8017160:	2300      	movs	r3, #0
 8017162:	6443      	str	r3, [r0, #68]	@ 0x44
 8017164:	e7e6      	b.n	8017134 <HAL_ADC_Start+0x84>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8017166:	6803      	ldr	r3, [r0, #0]
 8017168:	4a12      	ldr	r2, [pc, #72]	@ (80171b4 <HAL_ADC_Start+0x104>)
 801716a:	4293      	cmp	r3, r2
 801716c:	d001      	beq.n	8017172 <HAL_ADC_Start+0xc2>
  return HAL_OK;
 801716e:	2000      	movs	r0, #0
 8017170:	e012      	b.n	8017198 <HAL_ADC_Start+0xe8>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8017172:	689a      	ldr	r2, [r3, #8]
 8017174:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8017178:	d114      	bne.n	80171a4 <HAL_ADC_Start+0xf4>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801717a:	689a      	ldr	r2, [r3, #8]
 801717c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8017180:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8017182:	2000      	movs	r0, #0
 8017184:	e008      	b.n	8017198 <HAL_ADC_Start+0xe8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8017186:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8017188:	f043 0310 	orr.w	r3, r3, #16
 801718c:	6403      	str	r3, [r0, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801718e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8017190:	f043 0301 	orr.w	r3, r3, #1
 8017194:	6443      	str	r3, [r0, #68]	@ 0x44
  return HAL_OK;
 8017196:	2000      	movs	r0, #0
}
 8017198:	b002      	add	sp, #8
 801719a:	4770      	bx	lr
  __HAL_LOCK(hadc);
 801719c:	2002      	movs	r0, #2
 801719e:	e7fb      	b.n	8017198 <HAL_ADC_Start+0xe8>
  return HAL_OK;
 80171a0:	2000      	movs	r0, #0
 80171a2:	e7f9      	b.n	8017198 <HAL_ADC_Start+0xe8>
 80171a4:	2000      	movs	r0, #0
 80171a6:	e7f7      	b.n	8017198 <HAL_ADC_Start+0xe8>
 80171a8:	20000018 	.word	0x20000018
 80171ac:	431bde83 	.word	0x431bde83
 80171b0:	40012300 	.word	0x40012300
 80171b4:	40012000 	.word	0x40012000

080171b8 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80171b8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80171bc:	2b01      	cmp	r3, #1
 80171be:	d019      	beq.n	80171f4 <HAL_ADC_Stop+0x3c>
 80171c0:	2301      	movs	r3, #1
 80171c2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  __HAL_ADC_DISABLE(hadc);
 80171c6:	6802      	ldr	r2, [r0, #0]
 80171c8:	6893      	ldr	r3, [r2, #8]
 80171ca:	f023 0301 	bic.w	r3, r3, #1
 80171ce:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80171d0:	6803      	ldr	r3, [r0, #0]
 80171d2:	689b      	ldr	r3, [r3, #8]
 80171d4:	f013 0f01 	tst.w	r3, #1
 80171d8:	d107      	bne.n	80171ea <HAL_ADC_Stop+0x32>
    ADC_STATE_CLR_SET(hadc->State,
 80171da:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80171dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80171e0:	f023 0301 	bic.w	r3, r3, #1
 80171e4:	f043 0301 	orr.w	r3, r3, #1
 80171e8:	6403      	str	r3, [r0, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 80171ea:	2300      	movs	r3, #0
 80171ec:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  return HAL_OK;
 80171f0:	4618      	mov	r0, r3
 80171f2:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80171f4:	2002      	movs	r0, #2
}
 80171f6:	4770      	bx	lr

080171f8 <HAL_ADC_PollForConversion>:
{
 80171f8:	b570      	push	{r4, r5, r6, lr}
 80171fa:	4604      	mov	r4, r0
 80171fc:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80171fe:	6803      	ldr	r3, [r0, #0]
 8017200:	689a      	ldr	r2, [r3, #8]
 8017202:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8017206:	d003      	beq.n	8017210 <HAL_ADC_PollForConversion+0x18>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8017208:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 801720a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 801720e:	d119      	bne.n	8017244 <HAL_ADC_PollForConversion+0x4c>
  tickstart = HAL_GetTick();
 8017210:	f7ff fe6e 	bl	8016ef0 <HAL_GetTick>
 8017214:	4606      	mov	r6, r0
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8017216:	6823      	ldr	r3, [r4, #0]
 8017218:	681a      	ldr	r2, [r3, #0]
 801721a:	f012 0f02 	tst.w	r2, #2
 801721e:	d120      	bne.n	8017262 <HAL_ADC_PollForConversion+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8017220:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017224:	d0f7      	beq.n	8017216 <HAL_ADC_PollForConversion+0x1e>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8017226:	b9b5      	cbnz	r5, 8017256 <HAL_ADC_PollForConversion+0x5e>
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8017228:	6823      	ldr	r3, [r4, #0]
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	f013 0f02 	tst.w	r3, #2
 8017230:	d1f1      	bne.n	8017216 <HAL_ADC_PollForConversion+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8017232:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017234:	f043 0304 	orr.w	r3, r3, #4
 8017238:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hadc);
 801723a:	2300      	movs	r3, #0
 801723c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_TIMEOUT;
 8017240:	2003      	movs	r0, #3
 8017242:	e032      	b.n	80172aa <HAL_ADC_PollForConversion+0xb2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8017244:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8017246:	f043 0320 	orr.w	r3, r3, #32
 801724a:	6403      	str	r3, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hadc);
 801724c:	2300      	movs	r3, #0
 801724e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8017252:	2001      	movs	r0, #1
 8017254:	e029      	b.n	80172aa <HAL_ADC_PollForConversion+0xb2>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8017256:	f7ff fe4b 	bl	8016ef0 <HAL_GetTick>
 801725a:	1b80      	subs	r0, r0, r6
 801725c:	42a8      	cmp	r0, r5
 801725e:	d9da      	bls.n	8017216 <HAL_ADC_PollForConversion+0x1e>
 8017260:	e7e2      	b.n	8017228 <HAL_ADC_PollForConversion+0x30>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8017262:	f06f 0212 	mvn.w	r2, #18
 8017266:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8017268:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801726a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801726e:	6423      	str	r3, [r4, #64]	@ 0x40
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8017270:	6823      	ldr	r3, [r4, #0]
 8017272:	689a      	ldr	r2, [r3, #8]
 8017274:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8017278:	d116      	bne.n	80172a8 <HAL_ADC_PollForConversion+0xb0>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801727a:	7e20      	ldrb	r0, [r4, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801727c:	b9b0      	cbnz	r0, 80172ac <HAL_ADC_PollForConversion+0xb4>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 801727e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8017280:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8017284:	d003      	beq.n	801728e <HAL_ADC_PollForConversion+0x96>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8017286:	689b      	ldr	r3, [r3, #8]
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8017288:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 801728c:	d10d      	bne.n	80172aa <HAL_ADC_PollForConversion+0xb2>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801728e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017294:	6423      	str	r3, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8017296:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017298:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 801729c:	d105      	bne.n	80172aa <HAL_ADC_PollForConversion+0xb2>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801729e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80172a0:	f043 0301 	orr.w	r3, r3, #1
 80172a4:	6423      	str	r3, [r4, #64]	@ 0x40
 80172a6:	e000      	b.n	80172aa <HAL_ADC_PollForConversion+0xb2>
  return HAL_OK;
 80172a8:	2000      	movs	r0, #0
}
 80172aa:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80172ac:	2000      	movs	r0, #0
 80172ae:	e7fc      	b.n	80172aa <HAL_ADC_PollForConversion+0xb2>

080172b0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80172b0:	6803      	ldr	r3, [r0, #0]
 80172b2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 80172b4:	4770      	bx	lr
	...

080172b8 <HAL_ADC_ConfigChannel>:
{
 80172b8:	b430      	push	{r4, r5}
 80172ba:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80172bc:	2200      	movs	r2, #0
 80172be:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80172c0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80172c4:	2a01      	cmp	r2, #1
 80172c6:	f000 80c0 	beq.w	801744a <HAL_ADC_ConfigChannel+0x192>
 80172ca:	4603      	mov	r3, r0
 80172cc:	2201      	movs	r2, #1
 80172ce:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80172d2:	680a      	ldr	r2, [r1, #0]
 80172d4:	2a09      	cmp	r2, #9
 80172d6:	d940      	bls.n	801735a <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80172d8:	6804      	ldr	r4, [r0, #0]
 80172da:	68e0      	ldr	r0, [r4, #12]
 80172dc:	b292      	uxth	r2, r2
 80172de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80172e2:	3a1e      	subs	r2, #30
 80172e4:	f04f 0c07 	mov.w	ip, #7
 80172e8:	fa0c f202 	lsl.w	r2, ip, r2
 80172ec:	ea20 0202 	bic.w	r2, r0, r2
 80172f0:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80172f2:	681c      	ldr	r4, [r3, #0]
 80172f4:	68e0      	ldr	r0, [r4, #12]
 80172f6:	880a      	ldrh	r2, [r1, #0]
 80172f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80172fc:	3a1e      	subs	r2, #30
 80172fe:	688d      	ldr	r5, [r1, #8]
 8017300:	fa05 f202 	lsl.w	r2, r5, r2
 8017304:	4302      	orrs	r2, r0
 8017306:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8017308:	684a      	ldr	r2, [r1, #4]
 801730a:	2a06      	cmp	r2, #6
 801730c:	d83c      	bhi.n	8017388 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801730e:	681c      	ldr	r4, [r3, #0]
 8017310:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8017312:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8017316:	3a05      	subs	r2, #5
 8017318:	f04f 0c1f 	mov.w	ip, #31
 801731c:	fa0c f202 	lsl.w	r2, ip, r2
 8017320:	ea20 0202 	bic.w	r2, r0, r2
 8017324:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8017326:	681c      	ldr	r4, [r3, #0]
 8017328:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 801732a:	684a      	ldr	r2, [r1, #4]
 801732c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8017330:	3a05      	subs	r2, #5
 8017332:	f8b1 c000 	ldrh.w	ip, [r1]
 8017336:	fa0c f202 	lsl.w	r2, ip, r2
 801733a:	4302      	orrs	r2, r0
 801733c:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801733e:	6818      	ldr	r0, [r3, #0]
 8017340:	4a43      	ldr	r2, [pc, #268]	@ (8017450 <HAL_ADC_ConfigChannel+0x198>)
 8017342:	4290      	cmp	r0, r2
 8017344:	d050      	beq.n	80173e8 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8017346:	6818      	ldr	r0, [r3, #0]
 8017348:	4a41      	ldr	r2, [pc, #260]	@ (8017450 <HAL_ADC_ConfigChannel+0x198>)
 801734a:	4290      	cmp	r0, r2
 801734c:	d059      	beq.n	8017402 <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 801734e:	2000      	movs	r0, #0
 8017350:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8017354:	b002      	add	sp, #8
 8017356:	bc30      	pop	{r4, r5}
 8017358:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801735a:	6804      	ldr	r4, [r0, #0]
 801735c:	6920      	ldr	r0, [r4, #16]
 801735e:	b292      	uxth	r2, r2
 8017360:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017364:	f04f 0c07 	mov.w	ip, #7
 8017368:	fa0c f202 	lsl.w	r2, ip, r2
 801736c:	ea20 0202 	bic.w	r2, r0, r2
 8017370:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8017372:	681c      	ldr	r4, [r3, #0]
 8017374:	6920      	ldr	r0, [r4, #16]
 8017376:	880a      	ldrh	r2, [r1, #0]
 8017378:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801737c:	688d      	ldr	r5, [r1, #8]
 801737e:	fa05 f202 	lsl.w	r2, r5, r2
 8017382:	4302      	orrs	r2, r0
 8017384:	6122      	str	r2, [r4, #16]
 8017386:	e7bf      	b.n	8017308 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8017388:	2a0c      	cmp	r2, #12
 801738a:	d816      	bhi.n	80173ba <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 801738c:	681d      	ldr	r5, [r3, #0]
 801738e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8017390:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8017394:	3a23      	subs	r2, #35	@ 0x23
 8017396:	241f      	movs	r4, #31
 8017398:	fa04 f202 	lsl.w	r2, r4, r2
 801739c:	ea20 0202 	bic.w	r2, r0, r2
 80173a0:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80173a2:	681d      	ldr	r5, [r3, #0]
 80173a4:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80173a6:	684a      	ldr	r2, [r1, #4]
 80173a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80173ac:	3a23      	subs	r2, #35	@ 0x23
 80173ae:	880c      	ldrh	r4, [r1, #0]
 80173b0:	fa04 f202 	lsl.w	r2, r4, r2
 80173b4:	4302      	orrs	r2, r0
 80173b6:	632a      	str	r2, [r5, #48]	@ 0x30
 80173b8:	e7c1      	b.n	801733e <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80173ba:	681d      	ldr	r5, [r3, #0]
 80173bc:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80173be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80173c2:	3a41      	subs	r2, #65	@ 0x41
 80173c4:	241f      	movs	r4, #31
 80173c6:	fa04 f202 	lsl.w	r2, r4, r2
 80173ca:	ea20 0202 	bic.w	r2, r0, r2
 80173ce:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80173d0:	681d      	ldr	r5, [r3, #0]
 80173d2:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80173d4:	684a      	ldr	r2, [r1, #4]
 80173d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80173da:	3a41      	subs	r2, #65	@ 0x41
 80173dc:	880c      	ldrh	r4, [r1, #0]
 80173de:	fa04 f202 	lsl.w	r2, r4, r2
 80173e2:	4302      	orrs	r2, r0
 80173e4:	62ea      	str	r2, [r5, #44]	@ 0x2c
 80173e6:	e7aa      	b.n	801733e <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80173e8:	680a      	ldr	r2, [r1, #0]
 80173ea:	2a12      	cmp	r2, #18
 80173ec:	d1ab      	bne.n	8017346 <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80173ee:	4a19      	ldr	r2, [pc, #100]	@ (8017454 <HAL_ADC_ConfigChannel+0x19c>)
 80173f0:	6850      	ldr	r0, [r2, #4]
 80173f2:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 80173f6:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80173f8:	6850      	ldr	r0, [r2, #4]
 80173fa:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 80173fe:	6050      	str	r0, [r2, #4]
 8017400:	e7a1      	b.n	8017346 <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8017402:	680a      	ldr	r2, [r1, #0]
 8017404:	4814      	ldr	r0, [pc, #80]	@ (8017458 <HAL_ADC_ConfigChannel+0x1a0>)
 8017406:	4282      	cmp	r2, r0
 8017408:	d001      	beq.n	801740e <HAL_ADC_ConfigChannel+0x156>
 801740a:	2a11      	cmp	r2, #17
 801740c:	d19f      	bne.n	801734e <HAL_ADC_ConfigChannel+0x96>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 801740e:	4a11      	ldr	r2, [pc, #68]	@ (8017454 <HAL_ADC_ConfigChannel+0x19c>)
 8017410:	6850      	ldr	r0, [r2, #4]
 8017412:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 8017416:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8017418:	6850      	ldr	r0, [r2, #4]
 801741a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801741e:	6050      	str	r0, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8017420:	6809      	ldr	r1, [r1, #0]
 8017422:	4a0d      	ldr	r2, [pc, #52]	@ (8017458 <HAL_ADC_ConfigChannel+0x1a0>)
 8017424:	4291      	cmp	r1, r2
 8017426:	d192      	bne.n	801734e <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8017428:	4a0c      	ldr	r2, [pc, #48]	@ (801745c <HAL_ADC_ConfigChannel+0x1a4>)
 801742a:	6812      	ldr	r2, [r2, #0]
 801742c:	490c      	ldr	r1, [pc, #48]	@ (8017460 <HAL_ADC_ConfigChannel+0x1a8>)
 801742e:	fba1 1202 	umull	r1, r2, r1, r2
 8017432:	0c92      	lsrs	r2, r2, #18
 8017434:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8017438:	0052      	lsls	r2, r2, #1
 801743a:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 801743c:	9a01      	ldr	r2, [sp, #4]
 801743e:	2a00      	cmp	r2, #0
 8017440:	d085      	beq.n	801734e <HAL_ADC_ConfigChannel+0x96>
        counter--;
 8017442:	9a01      	ldr	r2, [sp, #4]
 8017444:	3a01      	subs	r2, #1
 8017446:	9201      	str	r2, [sp, #4]
 8017448:	e7f8      	b.n	801743c <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 801744a:	2002      	movs	r0, #2
 801744c:	e782      	b.n	8017354 <HAL_ADC_ConfigChannel+0x9c>
 801744e:	bf00      	nop
 8017450:	40012000 	.word	0x40012000
 8017454:	40012300 	.word	0x40012300
 8017458:	10000012 	.word	0x10000012
 801745c:	20000018 	.word	0x20000018
 8017460:	431bde83 	.word	0x431bde83

08017464 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8017464:	2800      	cmp	r0, #0
 8017466:	db07      	blt.n	8017478 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017468:	f000 021f 	and.w	r2, r0, #31
 801746c:	0940      	lsrs	r0, r0, #5
 801746e:	2301      	movs	r3, #1
 8017470:	4093      	lsls	r3, r2
 8017472:	4a02      	ldr	r2, [pc, #8]	@ (801747c <__NVIC_EnableIRQ+0x18>)
 8017474:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8017478:	4770      	bx	lr
 801747a:	bf00      	nop
 801747c:	e000e100 	.word	0xe000e100

08017480 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8017480:	2800      	cmp	r0, #0
 8017482:	db08      	blt.n	8017496 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017484:	0109      	lsls	r1, r1, #4
 8017486:	b2c9      	uxtb	r1, r1
 8017488:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 801748c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8017490:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8017494:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017496:	f000 000f 	and.w	r0, r0, #15
 801749a:	0109      	lsls	r1, r1, #4
 801749c:	b2c9      	uxtb	r1, r1
 801749e:	4b01      	ldr	r3, [pc, #4]	@ (80174a4 <__NVIC_SetPriority+0x24>)
 80174a0:	5419      	strb	r1, [r3, r0]
  }
}
 80174a2:	4770      	bx	lr
 80174a4:	e000ed14 	.word	0xe000ed14

080174a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80174a8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80174aa:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80174ae:	f1c0 0c07 	rsb	ip, r0, #7
 80174b2:	f1bc 0f04 	cmp.w	ip, #4
 80174b6:	bf28      	it	cs
 80174b8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80174bc:	1d03      	adds	r3, r0, #4
 80174be:	2b06      	cmp	r3, #6
 80174c0:	d90f      	bls.n	80174e2 <NVIC_EncodePriority+0x3a>
 80174c2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80174c4:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80174c8:	fa0e f00c 	lsl.w	r0, lr, ip
 80174cc:	ea21 0100 	bic.w	r1, r1, r0
 80174d0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80174d2:	fa0e fe03 	lsl.w	lr, lr, r3
 80174d6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80174da:	ea41 0002 	orr.w	r0, r1, r2
 80174de:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80174e2:	2300      	movs	r3, #0
 80174e4:	e7ee      	b.n	80174c4 <NVIC_EncodePriority+0x1c>
	...

080174e8 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80174e8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80174ec:	4905      	ldr	r1, [pc, #20]	@ (8017504 <__NVIC_SystemReset+0x1c>)
 80174ee:	68ca      	ldr	r2, [r1, #12]
 80174f0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80174f4:	4b04      	ldr	r3, [pc, #16]	@ (8017508 <__NVIC_SystemReset+0x20>)
 80174f6:	4313      	orrs	r3, r2
 80174f8:	60cb      	str	r3, [r1, #12]
 80174fa:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80174fe:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8017500:	e7fd      	b.n	80174fe <__NVIC_SystemReset+0x16>
 8017502:	bf00      	nop
 8017504:	e000ed00 	.word	0xe000ed00
 8017508:	05fa0004 	.word	0x05fa0004

0801750c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801750c:	4a07      	ldr	r2, [pc, #28]	@ (801752c <HAL_NVIC_SetPriorityGrouping+0x20>)
 801750e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8017510:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8017514:	041b      	lsls	r3, r3, #16
 8017516:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8017518:	0200      	lsls	r0, r0, #8
 801751a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801751e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8017520:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8017524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8017528:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 801752a:	4770      	bx	lr
 801752c:	e000ed00 	.word	0xe000ed00

08017530 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8017530:	b510      	push	{r4, lr}
 8017532:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8017534:	4b05      	ldr	r3, [pc, #20]	@ (801754c <HAL_NVIC_SetPriority+0x1c>)
 8017536:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8017538:	f3c0 2002 	ubfx	r0, r0, #8, #3
 801753c:	f7ff ffb4 	bl	80174a8 <NVIC_EncodePriority>
 8017540:	4601      	mov	r1, r0
 8017542:	4620      	mov	r0, r4
 8017544:	f7ff ff9c 	bl	8017480 <__NVIC_SetPriority>
}
 8017548:	bd10      	pop	{r4, pc}
 801754a:	bf00      	nop
 801754c:	e000ed00 	.word	0xe000ed00

08017550 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8017550:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8017552:	f7ff ff87 	bl	8017464 <__NVIC_EnableIRQ>
}
 8017556:	bd08      	pop	{r3, pc}

08017558 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8017558:	b508      	push	{r3, lr}
  /* System Reset */
  NVIC_SystemReset();
 801755a:	f7ff ffc5 	bl	80174e8 <__NVIC_SystemReset>
	...

08017560 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8017560:	2300      	movs	r3, #0
 8017562:	2b0f      	cmp	r3, #15
 8017564:	f200 80d7 	bhi.w	8017716 <HAL_GPIO_Init+0x1b6>
{
 8017568:	b570      	push	{r4, r5, r6, lr}
 801756a:	b082      	sub	sp, #8
 801756c:	e065      	b.n	801763a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801756e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8017570:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8017574:	2403      	movs	r4, #3
 8017576:	fa04 f40e 	lsl.w	r4, r4, lr
 801757a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 801757e:	68cc      	ldr	r4, [r1, #12]
 8017580:	fa04 f40e 	lsl.w	r4, r4, lr
 8017584:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8017586:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8017588:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801758a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801758e:	684a      	ldr	r2, [r1, #4]
 8017590:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8017594:	409a      	lsls	r2, r3
 8017596:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8017598:	6042      	str	r2, [r0, #4]
 801759a:	e05c      	b.n	8017656 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801759c:	08dc      	lsrs	r4, r3, #3
 801759e:	3408      	adds	r4, #8
 80175a0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80175a4:	f003 0507 	and.w	r5, r3, #7
 80175a8:	00ad      	lsls	r5, r5, #2
 80175aa:	f04f 0e0f 	mov.w	lr, #15
 80175ae:	fa0e fe05 	lsl.w	lr, lr, r5
 80175b2:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80175b6:	690a      	ldr	r2, [r1, #16]
 80175b8:	40aa      	lsls	r2, r5
 80175ba:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80175be:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80175c2:	e05c      	b.n	801767e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80175c4:	2204      	movs	r2, #4
 80175c6:	e000      	b.n	80175ca <HAL_GPIO_Init+0x6a>
 80175c8:	2200      	movs	r2, #0
 80175ca:	fa02 f20e 	lsl.w	r2, r2, lr
 80175ce:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80175d0:	3402      	adds	r4, #2
 80175d2:	4d51      	ldr	r5, [pc, #324]	@ (8017718 <HAL_GPIO_Init+0x1b8>)
 80175d4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80175d8:	4a50      	ldr	r2, [pc, #320]	@ (801771c <HAL_GPIO_Init+0x1bc>)
 80175da:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80175dc:	ea6f 020c 	mvn.w	r2, ip
 80175e0:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80175e4:	684e      	ldr	r6, [r1, #4]
 80175e6:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80175ea:	d001      	beq.n	80175f0 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80175ec:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80175f0:	4c4a      	ldr	r4, [pc, #296]	@ (801771c <HAL_GPIO_Init+0x1bc>)
 80175f2:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80175f4:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80175f6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80175fa:	684e      	ldr	r6, [r1, #4]
 80175fc:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8017600:	d001      	beq.n	8017606 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8017602:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8017606:	4c45      	ldr	r4, [pc, #276]	@ (801771c <HAL_GPIO_Init+0x1bc>)
 8017608:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 801760a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 801760c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8017610:	684e      	ldr	r6, [r1, #4]
 8017612:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8017616:	d001      	beq.n	801761c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8017618:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 801761c:	4c3f      	ldr	r4, [pc, #252]	@ (801771c <HAL_GPIO_Init+0x1bc>)
 801761e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8017620:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8017622:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8017624:	684d      	ldr	r5, [r1, #4]
 8017626:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 801762a:	d001      	beq.n	8017630 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 801762c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8017630:	4c3a      	ldr	r4, [pc, #232]	@ (801771c <HAL_GPIO_Init+0x1bc>)
 8017632:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8017634:	3301      	adds	r3, #1
 8017636:	2b0f      	cmp	r3, #15
 8017638:	d86b      	bhi.n	8017712 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 801763a:	2201      	movs	r2, #1
 801763c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801763e:	680c      	ldr	r4, [r1, #0]
 8017640:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8017644:	ea32 0404 	bics.w	r4, r2, r4
 8017648:	d1f4      	bne.n	8017634 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801764a:	684c      	ldr	r4, [r1, #4]
 801764c:	f004 0403 	and.w	r4, r4, #3
 8017650:	3c01      	subs	r4, #1
 8017652:	2c01      	cmp	r4, #1
 8017654:	d98b      	bls.n	801756e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8017656:	684a      	ldr	r2, [r1, #4]
 8017658:	f002 0203 	and.w	r2, r2, #3
 801765c:	2a03      	cmp	r2, #3
 801765e:	d009      	beq.n	8017674 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8017660:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8017662:	005d      	lsls	r5, r3, #1
 8017664:	2203      	movs	r2, #3
 8017666:	40aa      	lsls	r2, r5
 8017668:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801766c:	688a      	ldr	r2, [r1, #8]
 801766e:	40aa      	lsls	r2, r5
 8017670:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8017672:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8017674:	684a      	ldr	r2, [r1, #4]
 8017676:	f002 0203 	and.w	r2, r2, #3
 801767a:	2a02      	cmp	r2, #2
 801767c:	d08e      	beq.n	801759c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 801767e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8017680:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8017684:	2203      	movs	r2, #3
 8017686:	fa02 f20e 	lsl.w	r2, r2, lr
 801768a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801768e:	684a      	ldr	r2, [r1, #4]
 8017690:	f002 0203 	and.w	r2, r2, #3
 8017694:	fa02 f20e 	lsl.w	r2, r2, lr
 8017698:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 801769a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801769c:	684a      	ldr	r2, [r1, #4]
 801769e:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80176a2:	d0c7      	beq.n	8017634 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80176a4:	2200      	movs	r2, #0
 80176a6:	9201      	str	r2, [sp, #4]
 80176a8:	4a1d      	ldr	r2, [pc, #116]	@ (8017720 <HAL_GPIO_Init+0x1c0>)
 80176aa:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80176ac:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80176b0:	6454      	str	r4, [r2, #68]	@ 0x44
 80176b2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80176b4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80176b8:	9201      	str	r2, [sp, #4]
 80176ba:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80176bc:	089c      	lsrs	r4, r3, #2
 80176be:	1ca5      	adds	r5, r4, #2
 80176c0:	4a15      	ldr	r2, [pc, #84]	@ (8017718 <HAL_GPIO_Init+0x1b8>)
 80176c2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80176c6:	f003 0e03 	and.w	lr, r3, #3
 80176ca:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80176ce:	220f      	movs	r2, #15
 80176d0:	fa02 f20e 	lsl.w	r2, r2, lr
 80176d4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80176d8:	4a12      	ldr	r2, [pc, #72]	@ (8017724 <HAL_GPIO_Init+0x1c4>)
 80176da:	4290      	cmp	r0, r2
 80176dc:	f43f af74 	beq.w	80175c8 <HAL_GPIO_Init+0x68>
 80176e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80176e4:	4290      	cmp	r0, r2
 80176e6:	d00e      	beq.n	8017706 <HAL_GPIO_Init+0x1a6>
 80176e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80176ec:	4290      	cmp	r0, r2
 80176ee:	d00c      	beq.n	801770a <HAL_GPIO_Init+0x1aa>
 80176f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80176f4:	4290      	cmp	r0, r2
 80176f6:	d00a      	beq.n	801770e <HAL_GPIO_Init+0x1ae>
 80176f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80176fc:	4290      	cmp	r0, r2
 80176fe:	f43f af61 	beq.w	80175c4 <HAL_GPIO_Init+0x64>
 8017702:	2207      	movs	r2, #7
 8017704:	e761      	b.n	80175ca <HAL_GPIO_Init+0x6a>
 8017706:	2201      	movs	r2, #1
 8017708:	e75f      	b.n	80175ca <HAL_GPIO_Init+0x6a>
 801770a:	2202      	movs	r2, #2
 801770c:	e75d      	b.n	80175ca <HAL_GPIO_Init+0x6a>
 801770e:	2203      	movs	r2, #3
 8017710:	e75b      	b.n	80175ca <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8017712:	b002      	add	sp, #8
 8017714:	bd70      	pop	{r4, r5, r6, pc}
 8017716:	4770      	bx	lr
 8017718:	40013800 	.word	0x40013800
 801771c:	40013c00 	.word	0x40013c00
 8017720:	40023800 	.word	0x40023800
 8017724:	40020000 	.word	0x40020000

08017728 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8017728:	2300      	movs	r3, #0
 801772a:	2b0f      	cmp	r3, #15
 801772c:	d87c      	bhi.n	8017828 <HAL_GPIO_DeInit+0x100>
{
 801772e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017730:	e02d      	b.n	801778e <HAL_GPIO_DeInit+0x66>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8017732:	2504      	movs	r5, #4
 8017734:	e000      	b.n	8017738 <HAL_GPIO_DeInit+0x10>
 8017736:	2500      	movs	r5, #0
 8017738:	fa05 f50c 	lsl.w	r5, r5, ip
 801773c:	42a5      	cmp	r5, r4
 801773e:	d057      	beq.n	80177f0 <HAL_GPIO_DeInit+0xc8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8017740:	6804      	ldr	r4, [r0, #0]
 8017742:	005d      	lsls	r5, r3, #1
 8017744:	f04f 0c03 	mov.w	ip, #3
 8017748:	fa0c fc05 	lsl.w	ip, ip, r5
 801774c:	ea24 040c 	bic.w	r4, r4, ip
 8017750:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8017752:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8017756:	f10e 0e08 	add.w	lr, lr, #8
 801775a:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 801775e:	f003 0607 	and.w	r6, r3, #7
 8017762:	00b6      	lsls	r6, r6, #2
 8017764:	250f      	movs	r5, #15
 8017766:	40b5      	lsls	r5, r6
 8017768:	ea24 0405 	bic.w	r4, r4, r5
 801776c:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8017770:	68c4      	ldr	r4, [r0, #12]
 8017772:	ea24 040c 	bic.w	r4, r4, ip
 8017776:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8017778:	6844      	ldr	r4, [r0, #4]
 801777a:	ea24 0202 	bic.w	r2, r4, r2
 801777e:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8017780:	6882      	ldr	r2, [r0, #8]
 8017782:	ea22 020c 	bic.w	r2, r2, ip
 8017786:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8017788:	3301      	adds	r3, #1
 801778a:	2b0f      	cmp	r3, #15
 801778c:	d84b      	bhi.n	8017826 <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 801778e:	2201      	movs	r2, #1
 8017790:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8017792:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8017796:	ea32 0401 	bics.w	r4, r2, r1
 801779a:	d1f5      	bne.n	8017788 <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2U];
 801779c:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80177a0:	f10e 0502 	add.w	r5, lr, #2
 80177a4:	4c21      	ldr	r4, [pc, #132]	@ (801782c <HAL_GPIO_DeInit+0x104>)
 80177a6:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80177aa:	f003 0c03 	and.w	ip, r3, #3
 80177ae:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80177b2:	250f      	movs	r5, #15
 80177b4:	fa05 f70c 	lsl.w	r7, r5, ip
 80177b8:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80177ba:	4d1d      	ldr	r5, [pc, #116]	@ (8017830 <HAL_GPIO_DeInit+0x108>)
 80177bc:	42a8      	cmp	r0, r5
 80177be:	d0ba      	beq.n	8017736 <HAL_GPIO_DeInit+0xe>
 80177c0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80177c4:	42a8      	cmp	r0, r5
 80177c6:	d00d      	beq.n	80177e4 <HAL_GPIO_DeInit+0xbc>
 80177c8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80177cc:	42a8      	cmp	r0, r5
 80177ce:	d00b      	beq.n	80177e8 <HAL_GPIO_DeInit+0xc0>
 80177d0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80177d4:	42a8      	cmp	r0, r5
 80177d6:	d009      	beq.n	80177ec <HAL_GPIO_DeInit+0xc4>
 80177d8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80177dc:	42a8      	cmp	r0, r5
 80177de:	d0a8      	beq.n	8017732 <HAL_GPIO_DeInit+0xa>
 80177e0:	2507      	movs	r5, #7
 80177e2:	e7a9      	b.n	8017738 <HAL_GPIO_DeInit+0x10>
 80177e4:	2501      	movs	r5, #1
 80177e6:	e7a7      	b.n	8017738 <HAL_GPIO_DeInit+0x10>
 80177e8:	2502      	movs	r5, #2
 80177ea:	e7a5      	b.n	8017738 <HAL_GPIO_DeInit+0x10>
 80177ec:	2503      	movs	r5, #3
 80177ee:	e7a3      	b.n	8017738 <HAL_GPIO_DeInit+0x10>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80177f0:	4c10      	ldr	r4, [pc, #64]	@ (8017834 <HAL_GPIO_DeInit+0x10c>)
 80177f2:	6825      	ldr	r5, [r4, #0]
 80177f4:	ea25 0506 	bic.w	r5, r5, r6
 80177f8:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80177fa:	6865      	ldr	r5, [r4, #4]
 80177fc:	ea25 0506 	bic.w	r5, r5, r6
 8017800:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8017802:	68e5      	ldr	r5, [r4, #12]
 8017804:	ea25 0506 	bic.w	r5, r5, r6
 8017808:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801780a:	68a5      	ldr	r5, [r4, #8]
 801780c:	ea25 0506 	bic.w	r5, r5, r6
 8017810:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8017812:	4e06      	ldr	r6, [pc, #24]	@ (801782c <HAL_GPIO_DeInit+0x104>)
 8017814:	f10e 0402 	add.w	r4, lr, #2
 8017818:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 801781c:	ea25 0507 	bic.w	r5, r5, r7
 8017820:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 8017824:	e78c      	b.n	8017740 <HAL_GPIO_DeInit+0x18>
    }
  }
}
 8017826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017828:	4770      	bx	lr
 801782a:	bf00      	nop
 801782c:	40013800 	.word	0x40013800
 8017830:	40020000 	.word	0x40020000
 8017834:	40013c00 	.word	0x40013c00

08017838 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8017838:	6903      	ldr	r3, [r0, #16]
 801783a:	4219      	tst	r1, r3
 801783c:	d001      	beq.n	8017842 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 801783e:	2001      	movs	r0, #1
 8017840:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8017842:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8017844:	4770      	bx	lr

08017846 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8017846:	b10a      	cbz	r2, 801784c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8017848:	6181      	str	r1, [r0, #24]
 801784a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801784c:	0409      	lsls	r1, r1, #16
 801784e:	6181      	str	r1, [r0, #24]
  }
}
 8017850:	4770      	bx	lr

08017852 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8017852:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8017854:	ea01 0203 	and.w	r2, r1, r3
 8017858:	ea21 0103 	bic.w	r1, r1, r3
 801785c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017860:	6181      	str	r1, [r0, #24]
}
 8017862:	4770      	bx	lr

08017864 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8017864:	6803      	ldr	r3, [r0, #0]
 8017866:	695a      	ldr	r2, [r3, #20]
 8017868:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 801786c:	d101      	bne.n	8017872 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 801786e:	2000      	movs	r0, #0
}
 8017870:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017872:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8017876:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8017878:	2300      	movs	r3, #0
 801787a:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801787c:	2220      	movs	r2, #32
 801787e:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017882:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8017886:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8017888:	f042 0204 	orr.w	r2, r2, #4
 801788c:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 801788e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8017892:	2001      	movs	r0, #1
 8017894:	4770      	bx	lr

08017896 <I2C_WaitOnFlagUntilTimeout>:
{
 8017896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801789a:	4606      	mov	r6, r0
 801789c:	460c      	mov	r4, r1
 801789e:	4617      	mov	r7, r2
 80178a0:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80178a2:	e03b      	b.n	801791c <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80178a4:	f7ff fb24 	bl	8016ef0 <HAL_GetTick>
 80178a8:	9b06      	ldr	r3, [sp, #24]
 80178aa:	1ac0      	subs	r0, r0, r3
 80178ac:	4540      	cmp	r0, r8
 80178ae:	d802      	bhi.n	80178b6 <I2C_WaitOnFlagUntilTimeout+0x20>
 80178b0:	f1b8 0f00 	cmp.w	r8, #0
 80178b4:	d132      	bne.n	801791c <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80178b6:	2d01      	cmp	r5, #1
 80178b8:	d018      	beq.n	80178ec <I2C_WaitOnFlagUntilTimeout+0x56>
 80178ba:	6833      	ldr	r3, [r6, #0]
 80178bc:	699b      	ldr	r3, [r3, #24]
 80178be:	ea24 0303 	bic.w	r3, r4, r3
 80178c2:	b29b      	uxth	r3, r3
 80178c4:	fab3 f383 	clz	r3, r3
 80178c8:	095b      	lsrs	r3, r3, #5
 80178ca:	429f      	cmp	r7, r3
 80178cc:	d126      	bne.n	801791c <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80178ce:	2300      	movs	r3, #0
 80178d0:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80178d2:	2220      	movs	r2, #32
 80178d4:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80178d8:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80178dc:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80178de:	f042 0220 	orr.w	r2, r2, #32
 80178e2:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80178e4:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 80178e8:	2001      	movs	r0, #1
 80178ea:	e027      	b.n	801793c <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80178ec:	6833      	ldr	r3, [r6, #0]
 80178ee:	695b      	ldr	r3, [r3, #20]
 80178f0:	ea24 0303 	bic.w	r3, r4, r3
 80178f4:	b29b      	uxth	r3, r3
 80178f6:	fab3 f383 	clz	r3, r3
 80178fa:	095b      	lsrs	r3, r3, #5
 80178fc:	e7e5      	b.n	80178ca <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80178fe:	6833      	ldr	r3, [r6, #0]
 8017900:	695b      	ldr	r3, [r3, #20]
 8017902:	ea24 0c03 	bic.w	ip, r4, r3
 8017906:	fa1f fc8c 	uxth.w	ip, ip
 801790a:	fabc fc8c 	clz	ip, ip
 801790e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8017912:	4567      	cmp	r7, ip
 8017914:	d111      	bne.n	801793a <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8017916:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 801791a:	d1c3      	bne.n	80178a4 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801791c:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8017920:	2d01      	cmp	r5, #1
 8017922:	d0ec      	beq.n	80178fe <I2C_WaitOnFlagUntilTimeout+0x68>
 8017924:	6833      	ldr	r3, [r6, #0]
 8017926:	699b      	ldr	r3, [r3, #24]
 8017928:	ea24 0c03 	bic.w	ip, r4, r3
 801792c:	fa1f fc8c 	uxth.w	ip, ip
 8017930:	fabc fc8c 	clz	ip, ip
 8017934:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8017938:	e7eb      	b.n	8017912 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 801793a:	2000      	movs	r0, #0
}
 801793c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017940 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8017940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017944:	4605      	mov	r5, r0
 8017946:	460e      	mov	r6, r1
 8017948:	4690      	mov	r8, r2
 801794a:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801794c:	e053      	b.n	80179f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801794e:	681a      	ldr	r2, [r3, #0]
 8017950:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017954:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017956:	682b      	ldr	r3, [r5, #0]
 8017958:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 801795c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 801795e:	2300      	movs	r3, #0
 8017960:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8017962:	2220      	movs	r2, #32
 8017964:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017968:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801796c:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 801796e:	f042 0204 	orr.w	r2, r2, #4
 8017972:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8017974:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8017978:	2001      	movs	r0, #1
 801797a:	e04a      	b.n	8017a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801797c:	f7ff fab8 	bl	8016ef0 <HAL_GetTick>
 8017980:	eba0 0009 	sub.w	r0, r0, r9
 8017984:	4540      	cmp	r0, r8
 8017986:	d802      	bhi.n	801798e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8017988:	f1b8 0f00 	cmp.w	r8, #0
 801798c:	d133      	bne.n	80179f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 801798e:	2f01      	cmp	r7, #1
 8017990:	d017      	beq.n	80179c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8017992:	682b      	ldr	r3, [r5, #0]
 8017994:	699b      	ldr	r3, [r3, #24]
 8017996:	ea26 0303 	bic.w	r3, r6, r3
 801799a:	b29b      	uxth	r3, r3
 801799c:	3b00      	subs	r3, #0
 801799e:	bf18      	it	ne
 80179a0:	2301      	movne	r3, #1
 80179a2:	b343      	cbz	r3, 80179f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80179a4:	2300      	movs	r3, #0
 80179a6:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80179a8:	2220      	movs	r2, #32
 80179aa:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80179ae:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80179b2:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80179b4:	f042 0220 	orr.w	r2, r2, #32
 80179b8:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80179ba:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 80179be:	2001      	movs	r0, #1
 80179c0:	e027      	b.n	8017a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80179c2:	682b      	ldr	r3, [r5, #0]
 80179c4:	695b      	ldr	r3, [r3, #20]
 80179c6:	ea26 0303 	bic.w	r3, r6, r3
 80179ca:	b29b      	uxth	r3, r3
 80179cc:	3b00      	subs	r3, #0
 80179ce:	bf18      	it	ne
 80179d0:	2301      	movne	r3, #1
 80179d2:	e7e6      	b.n	80179a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80179d4:	682b      	ldr	r3, [r5, #0]
 80179d6:	699c      	ldr	r4, [r3, #24]
 80179d8:	ea26 0404 	bic.w	r4, r6, r4
 80179dc:	b2a4      	uxth	r4, r4
 80179de:	3c00      	subs	r4, #0
 80179e0:	bf18      	it	ne
 80179e2:	2401      	movne	r4, #1
 80179e4:	b1a4      	cbz	r4, 8017a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80179e6:	682b      	ldr	r3, [r5, #0]
 80179e8:	695a      	ldr	r2, [r3, #20]
 80179ea:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80179ee:	d1ae      	bne.n	801794e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80179f0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80179f4:	d1c2      	bne.n	801797c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80179f6:	f3c6 4707 	ubfx	r7, r6, #16, #8
 80179fa:	2f01      	cmp	r7, #1
 80179fc:	d1ea      	bne.n	80179d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 80179fe:	682b      	ldr	r3, [r5, #0]
 8017a00:	695c      	ldr	r4, [r3, #20]
 8017a02:	ea26 0404 	bic.w	r4, r6, r4
 8017a06:	b2a4      	uxth	r4, r4
 8017a08:	3c00      	subs	r4, #0
 8017a0a:	bf18      	it	ne
 8017a0c:	2401      	movne	r4, #1
 8017a0e:	e7e9      	b.n	80179e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8017a10:	2000      	movs	r0, #0
}
 8017a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08017a18 <I2C_MasterRequestWrite>:
{
 8017a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a1a:	b083      	sub	sp, #12
 8017a1c:	4604      	mov	r4, r0
 8017a1e:	460d      	mov	r5, r1
 8017a20:	4616      	mov	r6, r2
 8017a22:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8017a24:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8017a26:	2b08      	cmp	r3, #8
 8017a28:	d00d      	beq.n	8017a46 <I2C_MasterRequestWrite+0x2e>
 8017a2a:	2b01      	cmp	r3, #1
 8017a2c:	d00b      	beq.n	8017a46 <I2C_MasterRequestWrite+0x2e>
 8017a2e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8017a32:	d008      	beq.n	8017a46 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8017a34:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017a36:	2b12      	cmp	r3, #18
 8017a38:	d10a      	bne.n	8017a50 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017a3a:	6802      	ldr	r2, [r0, #0]
 8017a3c:	6813      	ldr	r3, [r2, #0]
 8017a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017a42:	6013      	str	r3, [r2, #0]
 8017a44:	e004      	b.n	8017a50 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017a46:	6822      	ldr	r2, [r4, #0]
 8017a48:	6813      	ldr	r3, [r2, #0]
 8017a4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017a4e:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8017a50:	9700      	str	r7, [sp, #0]
 8017a52:	4633      	mov	r3, r6
 8017a54:	2200      	movs	r2, #0
 8017a56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8017a5a:	4620      	mov	r0, r4
 8017a5c:	f7ff ff1b 	bl	8017896 <I2C_WaitOnFlagUntilTimeout>
 8017a60:	b980      	cbnz	r0, 8017a84 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8017a62:	6923      	ldr	r3, [r4, #16]
 8017a64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017a68:	d116      	bne.n	8017a98 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8017a6a:	6823      	ldr	r3, [r4, #0]
 8017a6c:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8017a70:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8017a72:	463b      	mov	r3, r7
 8017a74:	4632      	mov	r2, r6
 8017a76:	4913      	ldr	r1, [pc, #76]	@ (8017ac4 <I2C_MasterRequestWrite+0xac>)
 8017a78:	4620      	mov	r0, r4
 8017a7a:	f7ff ff61 	bl	8017940 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8017a7e:	b9f8      	cbnz	r0, 8017ac0 <I2C_MasterRequestWrite+0xa8>
}
 8017a80:	b003      	add	sp, #12
 8017a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8017a84:	6823      	ldr	r3, [r4, #0]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8017a8c:	d002      	beq.n	8017a94 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8017a8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017a92:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8017a94:	2003      	movs	r0, #3
 8017a96:	e7f3      	b.n	8017a80 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8017a98:	11eb      	asrs	r3, r5, #7
 8017a9a:	6822      	ldr	r2, [r4, #0]
 8017a9c:	f003 0306 	and.w	r3, r3, #6
 8017aa0:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8017aa4:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8017aa6:	463b      	mov	r3, r7
 8017aa8:	4632      	mov	r2, r6
 8017aaa:	4907      	ldr	r1, [pc, #28]	@ (8017ac8 <I2C_MasterRequestWrite+0xb0>)
 8017aac:	4620      	mov	r0, r4
 8017aae:	f7ff ff47 	bl	8017940 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8017ab2:	b918      	cbnz	r0, 8017abc <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8017ab4:	6823      	ldr	r3, [r4, #0]
 8017ab6:	b2ed      	uxtb	r5, r5
 8017ab8:	611d      	str	r5, [r3, #16]
 8017aba:	e7da      	b.n	8017a72 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8017abc:	2001      	movs	r0, #1
 8017abe:	e7df      	b.n	8017a80 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8017ac0:	2001      	movs	r0, #1
 8017ac2:	e7dd      	b.n	8017a80 <I2C_MasterRequestWrite+0x68>
 8017ac4:	00010002 	.word	0x00010002
 8017ac8:	00010008 	.word	0x00010008

08017acc <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8017acc:	b570      	push	{r4, r5, r6, lr}
 8017ace:	4604      	mov	r4, r0
 8017ad0:	460d      	mov	r5, r1
 8017ad2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8017ad4:	6823      	ldr	r3, [r4, #0]
 8017ad6:	695b      	ldr	r3, [r3, #20]
 8017ad8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017adc:	d121      	bne.n	8017b22 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8017ade:	4620      	mov	r0, r4
 8017ae0:	f7ff fec0 	bl	8017864 <I2C_IsAcknowledgeFailed>
 8017ae4:	b9f8      	cbnz	r0, 8017b26 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8017ae6:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017aea:	d0f3      	beq.n	8017ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017aec:	f7ff fa00 	bl	8016ef0 <HAL_GetTick>
 8017af0:	1b80      	subs	r0, r0, r6
 8017af2:	42a8      	cmp	r0, r5
 8017af4:	d801      	bhi.n	8017afa <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8017af6:	2d00      	cmp	r5, #0
 8017af8:	d1ec      	bne.n	8017ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8017afa:	6823      	ldr	r3, [r4, #0]
 8017afc:	695b      	ldr	r3, [r3, #20]
 8017afe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017b02:	d1e7      	bne.n	8017ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017b04:	2300      	movs	r3, #0
 8017b06:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8017b08:	2220      	movs	r2, #32
 8017b0a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017b0e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017b12:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8017b14:	f042 0220 	orr.w	r2, r2, #32
 8017b18:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8017b1a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8017b1e:	2001      	movs	r0, #1
 8017b20:	e000      	b.n	8017b24 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8017b22:	2000      	movs	r0, #0
}
 8017b24:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8017b26:	2001      	movs	r0, #1
 8017b28:	e7fc      	b.n	8017b24 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08017b2a <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8017b2a:	b570      	push	{r4, r5, r6, lr}
 8017b2c:	4604      	mov	r4, r0
 8017b2e:	460d      	mov	r5, r1
 8017b30:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8017b32:	6823      	ldr	r3, [r4, #0]
 8017b34:	695b      	ldr	r3, [r3, #20]
 8017b36:	f013 0f04 	tst.w	r3, #4
 8017b3a:	d121      	bne.n	8017b80 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8017b3c:	4620      	mov	r0, r4
 8017b3e:	f7ff fe91 	bl	8017864 <I2C_IsAcknowledgeFailed>
 8017b42:	b9f8      	cbnz	r0, 8017b84 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8017b44:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017b48:	d0f3      	beq.n	8017b32 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017b4a:	f7ff f9d1 	bl	8016ef0 <HAL_GetTick>
 8017b4e:	1b80      	subs	r0, r0, r6
 8017b50:	42a8      	cmp	r0, r5
 8017b52:	d801      	bhi.n	8017b58 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8017b54:	2d00      	cmp	r5, #0
 8017b56:	d1ec      	bne.n	8017b32 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8017b58:	6823      	ldr	r3, [r4, #0]
 8017b5a:	695b      	ldr	r3, [r3, #20]
 8017b5c:	f013 0f04 	tst.w	r3, #4
 8017b60:	d1e7      	bne.n	8017b32 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017b62:	2300      	movs	r3, #0
 8017b64:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8017b66:	2220      	movs	r2, #32
 8017b68:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017b6c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017b70:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8017b72:	f042 0220 	orr.w	r2, r2, #32
 8017b76:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8017b78:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8017b7c:	2001      	movs	r0, #1
 8017b7e:	e000      	b.n	8017b82 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8017b80:	2000      	movs	r0, #0
}
 8017b82:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8017b84:	2001      	movs	r0, #1
 8017b86:	e7fc      	b.n	8017b82 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08017b88 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8017b88:	2800      	cmp	r0, #0
 8017b8a:	f000 80cc 	beq.w	8017d26 <HAL_I2C_Init+0x19e>
{
 8017b8e:	b570      	push	{r4, r5, r6, lr}
 8017b90:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8017b92:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d077      	beq.n	8017c8a <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8017b9a:	2324      	movs	r3, #36	@ 0x24
 8017b9c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8017ba0:	6822      	ldr	r2, [r4, #0]
 8017ba2:	6813      	ldr	r3, [r2, #0]
 8017ba4:	f023 0301 	bic.w	r3, r3, #1
 8017ba8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8017baa:	6822      	ldr	r2, [r4, #0]
 8017bac:	6813      	ldr	r3, [r2, #0]
 8017bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8017bb2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8017bb4:	6822      	ldr	r2, [r4, #0]
 8017bb6:	6813      	ldr	r3, [r2, #0]
 8017bb8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8017bbc:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8017bbe:	f000 fdb3 	bl	8018728 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8017bc2:	6862      	ldr	r2, [r4, #4]
 8017bc4:	4b5a      	ldr	r3, [pc, #360]	@ (8017d30 <HAL_I2C_Init+0x1a8>)
 8017bc6:	429a      	cmp	r2, r3
 8017bc8:	d864      	bhi.n	8017c94 <HAL_I2C_Init+0x10c>
 8017bca:	4b5a      	ldr	r3, [pc, #360]	@ (8017d34 <HAL_I2C_Init+0x1ac>)
 8017bcc:	4298      	cmp	r0, r3
 8017bce:	bf8c      	ite	hi
 8017bd0:	2300      	movhi	r3, #0
 8017bd2:	2301      	movls	r3, #1
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	f040 80a8 	bne.w	8017d2a <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8017bda:	4957      	ldr	r1, [pc, #348]	@ (8017d38 <HAL_I2C_Init+0x1b0>)
 8017bdc:	fba1 3100 	umull	r3, r1, r1, r0
 8017be0:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8017be2:	6825      	ldr	r5, [r4, #0]
 8017be4:	686a      	ldr	r2, [r5, #4]
 8017be6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8017bea:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8017bee:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8017bf0:	6821      	ldr	r1, [r4, #0]
 8017bf2:	6a0a      	ldr	r2, [r1, #32]
 8017bf4:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8017bf8:	6866      	ldr	r6, [r4, #4]
 8017bfa:	4d4d      	ldr	r5, [pc, #308]	@ (8017d30 <HAL_I2C_Init+0x1a8>)
 8017bfc:	42ae      	cmp	r6, r5
 8017bfe:	d84f      	bhi.n	8017ca0 <HAL_I2C_Init+0x118>
 8017c00:	3301      	adds	r3, #1
 8017c02:	4313      	orrs	r3, r2
 8017c04:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8017c06:	6821      	ldr	r1, [r4, #0]
 8017c08:	69ca      	ldr	r2, [r1, #28]
 8017c0a:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8017c0e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8017c12:	6865      	ldr	r5, [r4, #4]
 8017c14:	4b46      	ldr	r3, [pc, #280]	@ (8017d30 <HAL_I2C_Init+0x1a8>)
 8017c16:	429d      	cmp	r5, r3
 8017c18:	d84c      	bhi.n	8017cb4 <HAL_I2C_Init+0x12c>
 8017c1a:	1e43      	subs	r3, r0, #1
 8017c1c:	006d      	lsls	r5, r5, #1
 8017c1e:	fbb3 f3f5 	udiv	r3, r3, r5
 8017c22:	3301      	adds	r3, #1
 8017c24:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8017c28:	4203      	tst	r3, r0
 8017c2a:	d078      	beq.n	8017d1e <HAL_I2C_Init+0x196>
 8017c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017c30:	431a      	orrs	r2, r3
 8017c32:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8017c34:	6821      	ldr	r1, [r4, #0]
 8017c36:	680b      	ldr	r3, [r1, #0]
 8017c38:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8017c3c:	69e2      	ldr	r2, [r4, #28]
 8017c3e:	6a20      	ldr	r0, [r4, #32]
 8017c40:	4302      	orrs	r2, r0
 8017c42:	4313      	orrs	r3, r2
 8017c44:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8017c46:	6821      	ldr	r1, [r4, #0]
 8017c48:	688b      	ldr	r3, [r1, #8]
 8017c4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8017c4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8017c52:	6922      	ldr	r2, [r4, #16]
 8017c54:	68e0      	ldr	r0, [r4, #12]
 8017c56:	4302      	orrs	r2, r0
 8017c58:	4313      	orrs	r3, r2
 8017c5a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8017c5c:	6821      	ldr	r1, [r4, #0]
 8017c5e:	68cb      	ldr	r3, [r1, #12]
 8017c60:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8017c64:	6962      	ldr	r2, [r4, #20]
 8017c66:	69a0      	ldr	r0, [r4, #24]
 8017c68:	4302      	orrs	r2, r0
 8017c6a:	4313      	orrs	r3, r2
 8017c6c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8017c6e:	6822      	ldr	r2, [r4, #0]
 8017c70:	6813      	ldr	r3, [r2, #0]
 8017c72:	f043 0301 	orr.w	r3, r3, #1
 8017c76:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017c78:	2000      	movs	r0, #0
 8017c7a:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8017c7c:	2320      	movs	r3, #32
 8017c7e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8017c82:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017c84:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8017c88:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8017c8a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8017c8e:	f7fa fb01 	bl	8012294 <HAL_I2C_MspInit>
 8017c92:	e782      	b.n	8017b9a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8017c94:	4b29      	ldr	r3, [pc, #164]	@ (8017d3c <HAL_I2C_Init+0x1b4>)
 8017c96:	4298      	cmp	r0, r3
 8017c98:	bf8c      	ite	hi
 8017c9a:	2300      	movhi	r3, #0
 8017c9c:	2301      	movls	r3, #1
 8017c9e:	e799      	b.n	8017bd4 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8017ca0:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8017ca4:	fb05 f303 	mul.w	r3, r5, r3
 8017ca8:	4d25      	ldr	r5, [pc, #148]	@ (8017d40 <HAL_I2C_Init+0x1b8>)
 8017caa:	fba5 5303 	umull	r5, r3, r5, r3
 8017cae:	099b      	lsrs	r3, r3, #6
 8017cb0:	3301      	adds	r3, #1
 8017cb2:	e7a6      	b.n	8017c02 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8017cb4:	68a6      	ldr	r6, [r4, #8]
 8017cb6:	b9be      	cbnz	r6, 8017ce8 <HAL_I2C_Init+0x160>
 8017cb8:	1e43      	subs	r3, r0, #1
 8017cba:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8017cbe:	fbb3 f3fc 	udiv	r3, r3, ip
 8017cc2:	3301      	adds	r3, #1
 8017cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017cc8:	fab3 f383 	clz	r3, r3
 8017ccc:	095b      	lsrs	r3, r3, #5
 8017cce:	bb43      	cbnz	r3, 8017d22 <HAL_I2C_Init+0x19a>
 8017cd0:	b9c6      	cbnz	r6, 8017d04 <HAL_I2C_Init+0x17c>
 8017cd2:	1e43      	subs	r3, r0, #1
 8017cd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017cd8:	fbb3 f3f5 	udiv	r3, r3, r5
 8017cdc:	3301      	adds	r3, #1
 8017cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8017ce6:	e7a3      	b.n	8017c30 <HAL_I2C_Init+0xa8>
 8017ce8:	1e43      	subs	r3, r0, #1
 8017cea:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8017cee:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8017cf2:	fbb3 f3fc 	udiv	r3, r3, ip
 8017cf6:	3301      	adds	r3, #1
 8017cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017cfc:	fab3 f383 	clz	r3, r3
 8017d00:	095b      	lsrs	r3, r3, #5
 8017d02:	e7e4      	b.n	8017cce <HAL_I2C_Init+0x146>
 8017d04:	1e43      	subs	r3, r0, #1
 8017d06:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8017d0a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8017d0e:	fbb3 f3f5 	udiv	r3, r3, r5
 8017d12:	3301      	adds	r3, #1
 8017d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017d18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8017d1c:	e788      	b.n	8017c30 <HAL_I2C_Init+0xa8>
 8017d1e:	2304      	movs	r3, #4
 8017d20:	e786      	b.n	8017c30 <HAL_I2C_Init+0xa8>
 8017d22:	2301      	movs	r3, #1
 8017d24:	e784      	b.n	8017c30 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8017d26:	2001      	movs	r0, #1
}
 8017d28:	4770      	bx	lr
    return HAL_ERROR;
 8017d2a:	2001      	movs	r0, #1
 8017d2c:	e7ac      	b.n	8017c88 <HAL_I2C_Init+0x100>
 8017d2e:	bf00      	nop
 8017d30:	000186a0 	.word	0x000186a0
 8017d34:	001e847f 	.word	0x001e847f
 8017d38:	431bde83 	.word	0x431bde83
 8017d3c:	003d08ff 	.word	0x003d08ff
 8017d40:	10624dd3 	.word	0x10624dd3

08017d44 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8017d44:	b1a8      	cbz	r0, 8017d72 <HAL_I2C_DeInit+0x2e>
{
 8017d46:	b510      	push	{r4, lr}
 8017d48:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8017d4a:	2324      	movs	r3, #36	@ 0x24
 8017d4c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8017d50:	6802      	ldr	r2, [r0, #0]
 8017d52:	6813      	ldr	r3, [r2, #0]
 8017d54:	f023 0301 	bic.w	r3, r3, #1
 8017d58:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8017d5a:	f7fa fad5 	bl	8012308 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8017d5e:	2000      	movs	r0, #0
 8017d60:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8017d62:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8017d66:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8017d68:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 8017d6c:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8017d70:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8017d72:	2001      	movs	r0, #1
}
 8017d74:	4770      	bx	lr
	...

08017d78 <HAL_I2C_Master_Transmit>:
{
 8017d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d7c:	b085      	sub	sp, #20
 8017d7e:	4604      	mov	r4, r0
 8017d80:	460f      	mov	r7, r1
 8017d82:	4691      	mov	r9, r2
 8017d84:	4698      	mov	r8, r3
 8017d86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8017d88:	f7ff f8b2 	bl	8016ef0 <HAL_GetTick>
 8017d8c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8017d8e:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8017d92:	b2c0      	uxtb	r0, r0
 8017d94:	2820      	cmp	r0, #32
 8017d96:	d004      	beq.n	8017da2 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8017d98:	2702      	movs	r7, #2
}
 8017d9a:	4638      	mov	r0, r7
 8017d9c:	b005      	add	sp, #20
 8017d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017da2:	9500      	str	r5, [sp, #0]
 8017da4:	2319      	movs	r3, #25
 8017da6:	2201      	movs	r2, #1
 8017da8:	494f      	ldr	r1, [pc, #316]	@ (8017ee8 <HAL_I2C_Master_Transmit+0x170>)
 8017daa:	4620      	mov	r0, r4
 8017dac:	f7ff fd73 	bl	8017896 <I2C_WaitOnFlagUntilTimeout>
 8017db0:	2800      	cmp	r0, #0
 8017db2:	f040 8092 	bne.w	8017eda <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8017db6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8017dba:	2b01      	cmp	r3, #1
 8017dbc:	f000 808f 	beq.w	8017ede <HAL_I2C_Master_Transmit+0x166>
 8017dc0:	2301      	movs	r3, #1
 8017dc2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017dc6:	6823      	ldr	r3, [r4, #0]
 8017dc8:	681a      	ldr	r2, [r3, #0]
 8017dca:	f012 0f01 	tst.w	r2, #1
 8017dce:	d103      	bne.n	8017dd8 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8017dd0:	681a      	ldr	r2, [r3, #0]
 8017dd2:	f042 0201 	orr.w	r2, r2, #1
 8017dd6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017dd8:	6822      	ldr	r2, [r4, #0]
 8017dda:	6813      	ldr	r3, [r2, #0]
 8017ddc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017de0:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8017de2:	2321      	movs	r3, #33	@ 0x21
 8017de4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8017de8:	2310      	movs	r3, #16
 8017dea:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8017dee:	2300      	movs	r3, #0
 8017df0:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8017df2:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8017df6:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017dfa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8017dfc:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8017eec <HAL_I2C_Master_Transmit+0x174>)
 8017e00:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8017e02:	462b      	mov	r3, r5
 8017e04:	4632      	mov	r2, r6
 8017e06:	4639      	mov	r1, r7
 8017e08:	4620      	mov	r0, r4
 8017e0a:	f7ff fe05 	bl	8017a18 <I2C_MasterRequestWrite>
 8017e0e:	4607      	mov	r7, r0
 8017e10:	2800      	cmp	r0, #0
 8017e12:	d166      	bne.n	8017ee2 <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017e14:	2300      	movs	r3, #0
 8017e16:	9303      	str	r3, [sp, #12]
 8017e18:	6823      	ldr	r3, [r4, #0]
 8017e1a:	695a      	ldr	r2, [r3, #20]
 8017e1c:	9203      	str	r2, [sp, #12]
 8017e1e:	699b      	ldr	r3, [r3, #24]
 8017e20:	9303      	str	r3, [sp, #12]
 8017e22:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8017e24:	e011      	b.n	8017e4a <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8017e26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017e28:	2b04      	cmp	r3, #4
 8017e2a:	d001      	beq.n	8017e30 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8017e2c:	2701      	movs	r7, #1
 8017e2e:	e7b4      	b.n	8017d9a <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017e30:	6822      	ldr	r2, [r4, #0]
 8017e32:	6813      	ldr	r3, [r2, #0]
 8017e34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8017e38:	6013      	str	r3, [r2, #0]
 8017e3a:	e7f7      	b.n	8017e2c <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017e3c:	462a      	mov	r2, r5
 8017e3e:	4631      	mov	r1, r6
 8017e40:	4620      	mov	r0, r4
 8017e42:	f7ff fe72 	bl	8017b2a <I2C_WaitOnBTFFlagUntilTimeout>
 8017e46:	2800      	cmp	r0, #0
 8017e48:	d12e      	bne.n	8017ea8 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8017e4a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d036      	beq.n	8017ebe <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017e50:	462a      	mov	r2, r5
 8017e52:	4631      	mov	r1, r6
 8017e54:	4620      	mov	r0, r4
 8017e56:	f7ff fe39 	bl	8017acc <I2C_WaitOnTXEFlagUntilTimeout>
 8017e5a:	2800      	cmp	r0, #0
 8017e5c:	d1e3      	bne.n	8017e26 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017e5e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017e60:	6823      	ldr	r3, [r4, #0]
 8017e62:	7812      	ldrb	r2, [r2, #0]
 8017e64:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8017e66:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8017e68:	1c43      	adds	r3, r0, #1
 8017e6a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8017e6c:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8017e6e:	b289      	uxth	r1, r1
 8017e70:	3901      	subs	r1, #1
 8017e72:	b289      	uxth	r1, r1
 8017e74:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8017e76:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8017e78:	3b01      	subs	r3, #1
 8017e7a:	b29b      	uxth	r3, r3
 8017e7c:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8017e7e:	6822      	ldr	r2, [r4, #0]
 8017e80:	6951      	ldr	r1, [r2, #20]
 8017e82:	f011 0f04 	tst.w	r1, #4
 8017e86:	d0d9      	beq.n	8017e3c <HAL_I2C_Master_Transmit+0xc4>
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d0d7      	beq.n	8017e3c <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017e8c:	7843      	ldrb	r3, [r0, #1]
 8017e8e:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8017e90:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8017e92:	3301      	adds	r3, #1
 8017e94:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8017e96:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8017e98:	b29b      	uxth	r3, r3
 8017e9a:	3b01      	subs	r3, #1
 8017e9c:	b29b      	uxth	r3, r3
 8017e9e:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8017ea0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8017ea2:	3b01      	subs	r3, #1
 8017ea4:	8523      	strh	r3, [r4, #40]	@ 0x28
 8017ea6:	e7c9      	b.n	8017e3c <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8017ea8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017eaa:	2b04      	cmp	r3, #4
 8017eac:	d001      	beq.n	8017eb2 <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8017eae:	2701      	movs	r7, #1
 8017eb0:	e773      	b.n	8017d9a <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017eb2:	6822      	ldr	r2, [r4, #0]
 8017eb4:	6813      	ldr	r3, [r2, #0]
 8017eb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8017eba:	6013      	str	r3, [r2, #0]
 8017ebc:	e7f7      	b.n	8017eae <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017ebe:	6822      	ldr	r2, [r4, #0]
 8017ec0:	6813      	ldr	r3, [r2, #0]
 8017ec2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8017ec6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8017ec8:	2320      	movs	r3, #32
 8017eca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017ece:	2300      	movs	r3, #0
 8017ed0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8017ed4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8017ed8:	e75f      	b.n	8017d9a <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8017eda:	2702      	movs	r7, #2
 8017edc:	e75d      	b.n	8017d9a <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8017ede:	2702      	movs	r7, #2
 8017ee0:	e75b      	b.n	8017d9a <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8017ee2:	2701      	movs	r7, #1
 8017ee4:	e759      	b.n	8017d9a <HAL_I2C_Master_Transmit+0x22>
 8017ee6:	bf00      	nop
 8017ee8:	00100002 	.word	0x00100002
 8017eec:	ffff0000 	.word	0xffff0000

08017ef0 <HAL_I2C_IsDeviceReady>:
{
 8017ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ef4:	b085      	sub	sp, #20
 8017ef6:	4604      	mov	r4, r0
 8017ef8:	4688      	mov	r8, r1
 8017efa:	4691      	mov	r9, r2
 8017efc:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8017efe:	f7fe fff7 	bl	8016ef0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8017f02:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8017f06:	b2db      	uxtb	r3, r3
 8017f08:	2b20      	cmp	r3, #32
 8017f0a:	d003      	beq.n	8017f14 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8017f0c:	2002      	movs	r0, #2
}
 8017f0e:	b005      	add	sp, #20
 8017f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f14:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017f16:	9000      	str	r0, [sp, #0]
 8017f18:	2319      	movs	r3, #25
 8017f1a:	2201      	movs	r2, #1
 8017f1c:	4957      	ldr	r1, [pc, #348]	@ (801807c <HAL_I2C_IsDeviceReady+0x18c>)
 8017f1e:	4620      	mov	r0, r4
 8017f20:	f7ff fcb9 	bl	8017896 <I2C_WaitOnFlagUntilTimeout>
 8017f24:	2800      	cmp	r0, #0
 8017f26:	f040 80a0 	bne.w	801806a <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 8017f2a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8017f2e:	2b01      	cmp	r3, #1
 8017f30:	f000 809d 	beq.w	801806e <HAL_I2C_IsDeviceReady+0x17e>
 8017f34:	2301      	movs	r3, #1
 8017f36:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017f3a:	6823      	ldr	r3, [r4, #0]
 8017f3c:	681a      	ldr	r2, [r3, #0]
 8017f3e:	f012 0f01 	tst.w	r2, #1
 8017f42:	d103      	bne.n	8017f4c <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8017f44:	681a      	ldr	r2, [r3, #0]
 8017f46:	f042 0201 	orr.w	r2, r2, #1
 8017f4a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017f4c:	6822      	ldr	r2, [r4, #0]
 8017f4e:	6813      	ldr	r3, [r2, #0]
 8017f50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017f54:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8017f56:	2324      	movs	r3, #36	@ 0x24
 8017f58:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017f5c:	2700      	movs	r7, #0
 8017f5e:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017f60:	4b47      	ldr	r3, [pc, #284]	@ (8018080 <HAL_I2C_IsDeviceReady+0x190>)
 8017f62:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017f64:	e040      	b.n	8017fe8 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8017f66:	6823      	ldr	r3, [r4, #0]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8017f6e:	d002      	beq.n	8017f76 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8017f70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017f74:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 8017f76:	2003      	movs	r0, #3
 8017f78:	e7c9      	b.n	8017f0e <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8017f7a:	23a0      	movs	r3, #160	@ 0xa0
 8017f7c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8017f80:	6822      	ldr	r2, [r4, #0]
 8017f82:	6953      	ldr	r3, [r2, #20]
 8017f84:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8017f88:	6952      	ldr	r2, [r2, #20]
 8017f8a:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8017f8e:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 8017f92:	fa5f fc8c 	uxtb.w	ip, ip
 8017f96:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 8017f9a:	d009      	beq.n	8017fb0 <HAL_I2C_IsDeviceReady+0xc0>
 8017f9c:	b943      	cbnz	r3, 8017fb0 <HAL_I2C_IsDeviceReady+0xc0>
 8017f9e:	b93a      	cbnz	r2, 8017fb0 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8017fa0:	f7fe ffa6 	bl	8016ef0 <HAL_GetTick>
 8017fa4:	1b80      	subs	r0, r0, r6
 8017fa6:	42a8      	cmp	r0, r5
 8017fa8:	d8e7      	bhi.n	8017f7a <HAL_I2C_IsDeviceReady+0x8a>
 8017faa:	2d00      	cmp	r5, #0
 8017fac:	d1e8      	bne.n	8017f80 <HAL_I2C_IsDeviceReady+0x90>
 8017fae:	e7e4      	b.n	8017f7a <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8017fb0:	2320      	movs	r3, #32
 8017fb2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8017fb6:	6823      	ldr	r3, [r4, #0]
 8017fb8:	695a      	ldr	r2, [r3, #20]
 8017fba:	f012 0f02 	tst.w	r2, #2
 8017fbe:	d131      	bne.n	8018024 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017fc0:	681a      	ldr	r2, [r3, #0]
 8017fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017fc6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017fc8:	6823      	ldr	r3, [r4, #0]
 8017fca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8017fce:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017fd0:	9600      	str	r6, [sp, #0]
 8017fd2:	2319      	movs	r3, #25
 8017fd4:	2201      	movs	r2, #1
 8017fd6:	4929      	ldr	r1, [pc, #164]	@ (801807c <HAL_I2C_IsDeviceReady+0x18c>)
 8017fd8:	4620      	mov	r0, r4
 8017fda:	f7ff fc5c 	bl	8017896 <I2C_WaitOnFlagUntilTimeout>
 8017fde:	2800      	cmp	r0, #0
 8017fe0:	d149      	bne.n	8018076 <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 8017fe2:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8017fe4:	454f      	cmp	r7, r9
 8017fe6:	d238      	bcs.n	801805a <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017fe8:	6822      	ldr	r2, [r4, #0]
 8017fea:	6813      	ldr	r3, [r2, #0]
 8017fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017ff0:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8017ff2:	9600      	str	r6, [sp, #0]
 8017ff4:	462b      	mov	r3, r5
 8017ff6:	2200      	movs	r2, #0
 8017ff8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8017ffc:	4620      	mov	r0, r4
 8017ffe:	f7ff fc4a 	bl	8017896 <I2C_WaitOnFlagUntilTimeout>
 8018002:	2800      	cmp	r0, #0
 8018004:	d1af      	bne.n	8017f66 <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8018006:	6823      	ldr	r3, [r4, #0]
 8018008:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 801800c:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 801800e:	f7fe ff6f 	bl	8016ef0 <HAL_GetTick>
 8018012:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8018014:	6822      	ldr	r2, [r4, #0]
 8018016:	6953      	ldr	r3, [r2, #20]
 8018018:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801801c:	6952      	ldr	r2, [r2, #20]
 801801e:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8018022:	e7b4      	b.n	8017f8e <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018024:	681a      	ldr	r2, [r3, #0]
 8018026:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801802a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801802c:	2300      	movs	r3, #0
 801802e:	9303      	str	r3, [sp, #12]
 8018030:	6823      	ldr	r3, [r4, #0]
 8018032:	695a      	ldr	r2, [r3, #20]
 8018034:	9203      	str	r2, [sp, #12]
 8018036:	699b      	ldr	r3, [r3, #24]
 8018038:	9303      	str	r3, [sp, #12]
 801803a:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801803c:	9600      	str	r6, [sp, #0]
 801803e:	2319      	movs	r3, #25
 8018040:	2201      	movs	r2, #1
 8018042:	490e      	ldr	r1, [pc, #56]	@ (801807c <HAL_I2C_IsDeviceReady+0x18c>)
 8018044:	4620      	mov	r0, r4
 8018046:	f7ff fc26 	bl	8017896 <I2C_WaitOnFlagUntilTimeout>
 801804a:	b990      	cbnz	r0, 8018072 <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 801804c:	2320      	movs	r3, #32
 801804e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 8018052:	2300      	movs	r3, #0
 8018054:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 8018058:	e759      	b.n	8017f0e <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 801805a:	2320      	movs	r3, #32
 801805c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8018060:	2300      	movs	r3, #0
 8018062:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8018066:	2001      	movs	r0, #1
 8018068:	e751      	b.n	8017f0e <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 801806a:	2002      	movs	r0, #2
 801806c:	e74f      	b.n	8017f0e <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 801806e:	2002      	movs	r0, #2
 8018070:	e74d      	b.n	8017f0e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8018072:	2001      	movs	r0, #1
 8018074:	e74b      	b.n	8017f0e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8018076:	2001      	movs	r0, #1
 8018078:	e749      	b.n	8017f0e <HAL_I2C_IsDeviceReady+0x1e>
 801807a:	bf00      	nop
 801807c:	00100002 	.word	0x00100002
 8018080:	ffff0000 	.word	0xffff0000

08018084 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8018084:	b340      	cbz	r0, 80180d8 <HAL_IWDG_Init+0x54>
{
 8018086:	b538      	push	{r3, r4, r5, lr}
 8018088:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 801808a:	6803      	ldr	r3, [r0, #0]
 801808c:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8018090:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8018092:	6803      	ldr	r3, [r0, #0]
 8018094:	f245 5255 	movw	r2, #21845	@ 0x5555
 8018098:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801809a:	6803      	ldr	r3, [r0, #0]
 801809c:	6842      	ldr	r2, [r0, #4]
 801809e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80180a0:	6803      	ldr	r3, [r0, #0]
 80180a2:	6882      	ldr	r2, [r0, #8]
 80180a4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80180a6:	f7fe ff23 	bl	8016ef0 <HAL_GetTick>
 80180aa:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80180ac:	6823      	ldr	r3, [r4, #0]
 80180ae:	68da      	ldr	r2, [r3, #12]
 80180b0:	f012 0f03 	tst.w	r2, #3
 80180b4:	d00b      	beq.n	80180ce <HAL_IWDG_Init+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80180b6:	f7fe ff1b 	bl	8016ef0 <HAL_GetTick>
 80180ba:	1b40      	subs	r0, r0, r5
 80180bc:	2831      	cmp	r0, #49	@ 0x31
 80180be:	d9f5      	bls.n	80180ac <HAL_IWDG_Init+0x28>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80180c0:	6823      	ldr	r3, [r4, #0]
 80180c2:	68db      	ldr	r3, [r3, #12]
 80180c4:	f013 0f03 	tst.w	r3, #3
 80180c8:	d0f0      	beq.n	80180ac <HAL_IWDG_Init+0x28>
      {
        return HAL_TIMEOUT;
 80180ca:	2003      	movs	r0, #3
 80180cc:	e003      	b.n	80180d6 <HAL_IWDG_Init+0x52>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80180ce:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80180d2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80180d4:	2000      	movs	r0, #0
}
 80180d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80180d8:	2001      	movs	r0, #1
}
 80180da:	4770      	bx	lr

080180dc <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80180dc:	6803      	ldr	r3, [r0, #0]
 80180de:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80180e2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80180e4:	2000      	movs	r0, #0
 80180e6:	4770      	bx	lr

080180e8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80180e8:	2800      	cmp	r0, #0
 80180ea:	f000 81e0 	beq.w	80184ae <HAL_RCC_OscConfig+0x3c6>
{
 80180ee:	b570      	push	{r4, r5, r6, lr}
 80180f0:	b082      	sub	sp, #8
 80180f2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80180f4:	6803      	ldr	r3, [r0, #0]
 80180f6:	f013 0f01 	tst.w	r3, #1
 80180fa:	d03b      	beq.n	8018174 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80180fc:	4b9f      	ldr	r3, [pc, #636]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 80180fe:	689b      	ldr	r3, [r3, #8]
 8018100:	f003 030c 	and.w	r3, r3, #12
 8018104:	2b04      	cmp	r3, #4
 8018106:	d02c      	beq.n	8018162 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8018108:	4b9c      	ldr	r3, [pc, #624]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 801810a:	689b      	ldr	r3, [r3, #8]
 801810c:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8018110:	2b08      	cmp	r3, #8
 8018112:	d021      	beq.n	8018158 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8018114:	6863      	ldr	r3, [r4, #4]
 8018116:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801811a:	d04f      	beq.n	80181bc <HAL_RCC_OscConfig+0xd4>
 801811c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8018120:	d052      	beq.n	80181c8 <HAL_RCC_OscConfig+0xe0>
 8018122:	4b96      	ldr	r3, [pc, #600]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 8018124:	681a      	ldr	r2, [r3, #0]
 8018126:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 801812a:	601a      	str	r2, [r3, #0]
 801812c:	681a      	ldr	r2, [r3, #0]
 801812e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8018132:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8018134:	6863      	ldr	r3, [r4, #4]
 8018136:	2b00      	cmp	r3, #0
 8018138:	d050      	beq.n	80181dc <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801813a:	f7fe fed9 	bl	8016ef0 <HAL_GetTick>
 801813e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018140:	4b8e      	ldr	r3, [pc, #568]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8018148:	d114      	bne.n	8018174 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801814a:	f7fe fed1 	bl	8016ef0 <HAL_GetTick>
 801814e:	1b40      	subs	r0, r0, r5
 8018150:	2864      	cmp	r0, #100	@ 0x64
 8018152:	d9f5      	bls.n	8018140 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8018154:	2003      	movs	r0, #3
 8018156:	e1b1      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8018158:	4b88      	ldr	r3, [pc, #544]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 801815a:	685b      	ldr	r3, [r3, #4]
 801815c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8018160:	d0d8      	beq.n	8018114 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8018162:	4b86      	ldr	r3, [pc, #536]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801816a:	d003      	beq.n	8018174 <HAL_RCC_OscConfig+0x8c>
 801816c:	6863      	ldr	r3, [r4, #4]
 801816e:	2b00      	cmp	r3, #0
 8018170:	f000 819f 	beq.w	80184b2 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8018174:	6823      	ldr	r3, [r4, #0]
 8018176:	f013 0f02 	tst.w	r3, #2
 801817a:	d054      	beq.n	8018226 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 801817c:	4b7f      	ldr	r3, [pc, #508]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 801817e:	689b      	ldr	r3, [r3, #8]
 8018180:	f013 0f0c 	tst.w	r3, #12
 8018184:	d03e      	beq.n	8018204 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8018186:	4b7d      	ldr	r3, [pc, #500]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 8018188:	689b      	ldr	r3, [r3, #8]
 801818a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 801818e:	2b08      	cmp	r3, #8
 8018190:	d033      	beq.n	80181fa <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8018192:	68e3      	ldr	r3, [r4, #12]
 8018194:	2b00      	cmp	r3, #0
 8018196:	d068      	beq.n	801826a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8018198:	4b79      	ldr	r3, [pc, #484]	@ (8018380 <HAL_RCC_OscConfig+0x298>)
 801819a:	2201      	movs	r2, #1
 801819c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801819e:	f7fe fea7 	bl	8016ef0 <HAL_GetTick>
 80181a2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80181a4:	4b75      	ldr	r3, [pc, #468]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	f013 0f02 	tst.w	r3, #2
 80181ac:	d154      	bne.n	8018258 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80181ae:	f7fe fe9f 	bl	8016ef0 <HAL_GetTick>
 80181b2:	1b40      	subs	r0, r0, r5
 80181b4:	2802      	cmp	r0, #2
 80181b6:	d9f5      	bls.n	80181a4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80181b8:	2003      	movs	r0, #3
 80181ba:	e17f      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80181bc:	4a6f      	ldr	r2, [pc, #444]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 80181be:	6813      	ldr	r3, [r2, #0]
 80181c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80181c4:	6013      	str	r3, [r2, #0]
 80181c6:	e7b5      	b.n	8018134 <HAL_RCC_OscConfig+0x4c>
 80181c8:	4b6c      	ldr	r3, [pc, #432]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 80181ca:	681a      	ldr	r2, [r3, #0]
 80181cc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80181d0:	601a      	str	r2, [r3, #0]
 80181d2:	681a      	ldr	r2, [r3, #0]
 80181d4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80181d8:	601a      	str	r2, [r3, #0]
 80181da:	e7ab      	b.n	8018134 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80181dc:	f7fe fe88 	bl	8016ef0 <HAL_GetTick>
 80181e0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80181e2:	4b66      	ldr	r3, [pc, #408]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80181ea:	d0c3      	beq.n	8018174 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80181ec:	f7fe fe80 	bl	8016ef0 <HAL_GetTick>
 80181f0:	1b40      	subs	r0, r0, r5
 80181f2:	2864      	cmp	r0, #100	@ 0x64
 80181f4:	d9f5      	bls.n	80181e2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80181f6:	2003      	movs	r0, #3
 80181f8:	e160      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80181fa:	4b60      	ldr	r3, [pc, #384]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 80181fc:	685b      	ldr	r3, [r3, #4]
 80181fe:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8018202:	d1c6      	bne.n	8018192 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8018204:	4b5d      	ldr	r3, [pc, #372]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	f013 0f02 	tst.w	r3, #2
 801820c:	d003      	beq.n	8018216 <HAL_RCC_OscConfig+0x12e>
 801820e:	68e3      	ldr	r3, [r4, #12]
 8018210:	2b01      	cmp	r3, #1
 8018212:	f040 8150 	bne.w	80184b6 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018216:	4a59      	ldr	r2, [pc, #356]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 8018218:	6813      	ldr	r3, [r2, #0]
 801821a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 801821e:	6921      	ldr	r1, [r4, #16]
 8018220:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8018224:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8018226:	6823      	ldr	r3, [r4, #0]
 8018228:	f013 0f08 	tst.w	r3, #8
 801822c:	d042      	beq.n	80182b4 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801822e:	6963      	ldr	r3, [r4, #20]
 8018230:	b36b      	cbz	r3, 801828e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8018232:	4b53      	ldr	r3, [pc, #332]	@ (8018380 <HAL_RCC_OscConfig+0x298>)
 8018234:	2201      	movs	r2, #1
 8018236:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801823a:	f7fe fe59 	bl	8016ef0 <HAL_GetTick>
 801823e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8018240:	4b4e      	ldr	r3, [pc, #312]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 8018242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018244:	f013 0f02 	tst.w	r3, #2
 8018248:	d134      	bne.n	80182b4 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801824a:	f7fe fe51 	bl	8016ef0 <HAL_GetTick>
 801824e:	1b40      	subs	r0, r0, r5
 8018250:	2802      	cmp	r0, #2
 8018252:	d9f5      	bls.n	8018240 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8018254:	2003      	movs	r0, #3
 8018256:	e131      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018258:	4a48      	ldr	r2, [pc, #288]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 801825a:	6813      	ldr	r3, [r2, #0]
 801825c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8018260:	6921      	ldr	r1, [r4, #16]
 8018262:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8018266:	6013      	str	r3, [r2, #0]
 8018268:	e7dd      	b.n	8018226 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 801826a:	4b45      	ldr	r3, [pc, #276]	@ (8018380 <HAL_RCC_OscConfig+0x298>)
 801826c:	2200      	movs	r2, #0
 801826e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8018270:	f7fe fe3e 	bl	8016ef0 <HAL_GetTick>
 8018274:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8018276:	4b41      	ldr	r3, [pc, #260]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	f013 0f02 	tst.w	r3, #2
 801827e:	d0d2      	beq.n	8018226 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8018280:	f7fe fe36 	bl	8016ef0 <HAL_GetTick>
 8018284:	1b40      	subs	r0, r0, r5
 8018286:	2802      	cmp	r0, #2
 8018288:	d9f5      	bls.n	8018276 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 801828a:	2003      	movs	r0, #3
 801828c:	e116      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801828e:	4b3c      	ldr	r3, [pc, #240]	@ (8018380 <HAL_RCC_OscConfig+0x298>)
 8018290:	2200      	movs	r2, #0
 8018292:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018296:	f7fe fe2b 	bl	8016ef0 <HAL_GetTick>
 801829a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801829c:	4b37      	ldr	r3, [pc, #220]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 801829e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80182a0:	f013 0f02 	tst.w	r3, #2
 80182a4:	d006      	beq.n	80182b4 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80182a6:	f7fe fe23 	bl	8016ef0 <HAL_GetTick>
 80182aa:	1b40      	subs	r0, r0, r5
 80182ac:	2802      	cmp	r0, #2
 80182ae:	d9f5      	bls.n	801829c <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80182b0:	2003      	movs	r0, #3
 80182b2:	e103      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80182b4:	6823      	ldr	r3, [r4, #0]
 80182b6:	f013 0f04 	tst.w	r3, #4
 80182ba:	d077      	beq.n	80183ac <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80182bc:	4b2f      	ldr	r3, [pc, #188]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 80182be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80182c0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80182c4:	d133      	bne.n	801832e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80182c6:	2300      	movs	r3, #0
 80182c8:	9301      	str	r3, [sp, #4]
 80182ca:	4b2c      	ldr	r3, [pc, #176]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 80182cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80182ce:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80182d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80182d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80182d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80182da:	9301      	str	r3, [sp, #4]
 80182dc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80182de:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80182e0:	4b28      	ldr	r3, [pc, #160]	@ (8018384 <HAL_RCC_OscConfig+0x29c>)
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80182e8:	d023      	beq.n	8018332 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80182ea:	68a3      	ldr	r3, [r4, #8]
 80182ec:	2b01      	cmp	r3, #1
 80182ee:	d034      	beq.n	801835a <HAL_RCC_OscConfig+0x272>
 80182f0:	2b05      	cmp	r3, #5
 80182f2:	d038      	beq.n	8018366 <HAL_RCC_OscConfig+0x27e>
 80182f4:	4b21      	ldr	r3, [pc, #132]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 80182f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80182f8:	f022 0201 	bic.w	r2, r2, #1
 80182fc:	671a      	str	r2, [r3, #112]	@ 0x70
 80182fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8018300:	f022 0204 	bic.w	r2, r2, #4
 8018304:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8018306:	68a3      	ldr	r3, [r4, #8]
 8018308:	2b00      	cmp	r3, #0
 801830a:	d03d      	beq.n	8018388 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801830c:	f7fe fdf0 	bl	8016ef0 <HAL_GetTick>
 8018310:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8018312:	4b1a      	ldr	r3, [pc, #104]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 8018314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018316:	f013 0f02 	tst.w	r3, #2
 801831a:	d146      	bne.n	80183aa <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801831c:	f7fe fde8 	bl	8016ef0 <HAL_GetTick>
 8018320:	1b80      	subs	r0, r0, r6
 8018322:	f241 3388 	movw	r3, #5000	@ 0x1388
 8018326:	4298      	cmp	r0, r3
 8018328:	d9f3      	bls.n	8018312 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 801832a:	2003      	movs	r0, #3
 801832c:	e0c6      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 801832e:	2500      	movs	r5, #0
 8018330:	e7d6      	b.n	80182e0 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8018332:	4a14      	ldr	r2, [pc, #80]	@ (8018384 <HAL_RCC_OscConfig+0x29c>)
 8018334:	6813      	ldr	r3, [r2, #0]
 8018336:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801833a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 801833c:	f7fe fdd8 	bl	8016ef0 <HAL_GetTick>
 8018340:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018342:	4b10      	ldr	r3, [pc, #64]	@ (8018384 <HAL_RCC_OscConfig+0x29c>)
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	f413 7f80 	tst.w	r3, #256	@ 0x100
 801834a:	d1ce      	bne.n	80182ea <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801834c:	f7fe fdd0 	bl	8016ef0 <HAL_GetTick>
 8018350:	1b80      	subs	r0, r0, r6
 8018352:	2802      	cmp	r0, #2
 8018354:	d9f5      	bls.n	8018342 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8018356:	2003      	movs	r0, #3
 8018358:	e0b0      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801835a:	4a08      	ldr	r2, [pc, #32]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 801835c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 801835e:	f043 0301 	orr.w	r3, r3, #1
 8018362:	6713      	str	r3, [r2, #112]	@ 0x70
 8018364:	e7cf      	b.n	8018306 <HAL_RCC_OscConfig+0x21e>
 8018366:	4b05      	ldr	r3, [pc, #20]	@ (801837c <HAL_RCC_OscConfig+0x294>)
 8018368:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801836a:	f042 0204 	orr.w	r2, r2, #4
 801836e:	671a      	str	r2, [r3, #112]	@ 0x70
 8018370:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8018372:	f042 0201 	orr.w	r2, r2, #1
 8018376:	671a      	str	r2, [r3, #112]	@ 0x70
 8018378:	e7c5      	b.n	8018306 <HAL_RCC_OscConfig+0x21e>
 801837a:	bf00      	nop
 801837c:	40023800 	.word	0x40023800
 8018380:	42470000 	.word	0x42470000
 8018384:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018388:	f7fe fdb2 	bl	8016ef0 <HAL_GetTick>
 801838c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801838e:	4b52      	ldr	r3, [pc, #328]	@ (80184d8 <HAL_RCC_OscConfig+0x3f0>)
 8018390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018392:	f013 0f02 	tst.w	r3, #2
 8018396:	d008      	beq.n	80183aa <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018398:	f7fe fdaa 	bl	8016ef0 <HAL_GetTick>
 801839c:	1b80      	subs	r0, r0, r6
 801839e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80183a2:	4298      	cmp	r0, r3
 80183a4:	d9f3      	bls.n	801838e <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80183a6:	2003      	movs	r0, #3
 80183a8:	e088      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80183aa:	b9ed      	cbnz	r5, 80183e8 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80183ac:	69a3      	ldr	r3, [r4, #24]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	f000 8083 	beq.w	80184ba <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80183b4:	4a48      	ldr	r2, [pc, #288]	@ (80184d8 <HAL_RCC_OscConfig+0x3f0>)
 80183b6:	6892      	ldr	r2, [r2, #8]
 80183b8:	f002 020c 	and.w	r2, r2, #12
 80183bc:	2a08      	cmp	r2, #8
 80183be:	d051      	beq.n	8018464 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80183c0:	2b02      	cmp	r3, #2
 80183c2:	d017      	beq.n	80183f4 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80183c4:	4b45      	ldr	r3, [pc, #276]	@ (80184dc <HAL_RCC_OscConfig+0x3f4>)
 80183c6:	2200      	movs	r2, #0
 80183c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80183ca:	f7fe fd91 	bl	8016ef0 <HAL_GetTick>
 80183ce:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80183d0:	4b41      	ldr	r3, [pc, #260]	@ (80184d8 <HAL_RCC_OscConfig+0x3f0>)
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80183d8:	d042      	beq.n	8018460 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80183da:	f7fe fd89 	bl	8016ef0 <HAL_GetTick>
 80183de:	1b00      	subs	r0, r0, r4
 80183e0:	2802      	cmp	r0, #2
 80183e2:	d9f5      	bls.n	80183d0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80183e4:	2003      	movs	r0, #3
 80183e6:	e069      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80183e8:	4a3b      	ldr	r2, [pc, #236]	@ (80184d8 <HAL_RCC_OscConfig+0x3f0>)
 80183ea:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80183ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80183f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80183f2:	e7db      	b.n	80183ac <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80183f4:	4b39      	ldr	r3, [pc, #228]	@ (80184dc <HAL_RCC_OscConfig+0x3f4>)
 80183f6:	2200      	movs	r2, #0
 80183f8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80183fa:	f7fe fd79 	bl	8016ef0 <HAL_GetTick>
 80183fe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018400:	4b35      	ldr	r3, [pc, #212]	@ (80184d8 <HAL_RCC_OscConfig+0x3f0>)
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8018408:	d006      	beq.n	8018418 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801840a:	f7fe fd71 	bl	8016ef0 <HAL_GetTick>
 801840e:	1b40      	subs	r0, r0, r5
 8018410:	2802      	cmp	r0, #2
 8018412:	d9f5      	bls.n	8018400 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8018414:	2003      	movs	r0, #3
 8018416:	e051      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8018418:	69e3      	ldr	r3, [r4, #28]
 801841a:	6a22      	ldr	r2, [r4, #32]
 801841c:	4313      	orrs	r3, r2
 801841e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8018420:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8018424:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8018426:	0852      	lsrs	r2, r2, #1
 8018428:	3a01      	subs	r2, #1
 801842a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801842e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8018430:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8018434:	4a28      	ldr	r2, [pc, #160]	@ (80184d8 <HAL_RCC_OscConfig+0x3f0>)
 8018436:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8018438:	4b28      	ldr	r3, [pc, #160]	@ (80184dc <HAL_RCC_OscConfig+0x3f4>)
 801843a:	2201      	movs	r2, #1
 801843c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 801843e:	f7fe fd57 	bl	8016ef0 <HAL_GetTick>
 8018442:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8018444:	4b24      	ldr	r3, [pc, #144]	@ (80184d8 <HAL_RCC_OscConfig+0x3f0>)
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 801844c:	d106      	bne.n	801845c <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801844e:	f7fe fd4f 	bl	8016ef0 <HAL_GetTick>
 8018452:	1b00      	subs	r0, r0, r4
 8018454:	2802      	cmp	r0, #2
 8018456:	d9f5      	bls.n	8018444 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8018458:	2003      	movs	r0, #3
 801845a:	e02f      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 801845c:	2000      	movs	r0, #0
 801845e:	e02d      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
 8018460:	2000      	movs	r0, #0
 8018462:	e02b      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8018464:	2b01      	cmp	r3, #1
 8018466:	d02b      	beq.n	80184c0 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8018468:	4b1b      	ldr	r3, [pc, #108]	@ (80184d8 <HAL_RCC_OscConfig+0x3f0>)
 801846a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801846c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8018470:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8018472:	4291      	cmp	r1, r2
 8018474:	d126      	bne.n	80184c4 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8018476:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801847a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801847c:	428a      	cmp	r2, r1
 801847e:	d123      	bne.n	80184c8 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8018480:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8018482:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8018486:	401a      	ands	r2, r3
 8018488:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 801848c:	d11e      	bne.n	80184cc <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801848e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8018492:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8018494:	0852      	lsrs	r2, r2, #1
 8018496:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8018498:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 801849c:	d118      	bne.n	80184d0 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801849e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80184a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80184a4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80184a8:	d114      	bne.n	80184d4 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80184aa:	2000      	movs	r0, #0
 80184ac:	e006      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80184ae:	2001      	movs	r0, #1
}
 80184b0:	4770      	bx	lr
        return HAL_ERROR;
 80184b2:	2001      	movs	r0, #1
 80184b4:	e002      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80184b6:	2001      	movs	r0, #1
 80184b8:	e000      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80184ba:	2000      	movs	r0, #0
}
 80184bc:	b002      	add	sp, #8
 80184be:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80184c0:	2001      	movs	r0, #1
 80184c2:	e7fb      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80184c4:	2001      	movs	r0, #1
 80184c6:	e7f9      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
 80184c8:	2001      	movs	r0, #1
 80184ca:	e7f7      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
 80184cc:	2001      	movs	r0, #1
 80184ce:	e7f5      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
 80184d0:	2001      	movs	r0, #1
 80184d2:	e7f3      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
 80184d4:	2001      	movs	r0, #1
 80184d6:	e7f1      	b.n	80184bc <HAL_RCC_OscConfig+0x3d4>
 80184d8:	40023800 	.word	0x40023800
 80184dc:	42470000 	.word	0x42470000

080184e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80184e0:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80184e2:	4b33      	ldr	r3, [pc, #204]	@ (80185b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80184e4:	689b      	ldr	r3, [r3, #8]
 80184e6:	f003 030c 	and.w	r3, r3, #12
 80184ea:	2b04      	cmp	r3, #4
 80184ec:	d05b      	beq.n	80185a6 <HAL_RCC_GetSysClockFreq+0xc6>
 80184ee:	2b08      	cmp	r3, #8
 80184f0:	d15b      	bne.n	80185aa <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80184f2:	4b2f      	ldr	r3, [pc, #188]	@ (80185b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80184f4:	685a      	ldr	r2, [r3, #4]
 80184f6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80184fa:	685b      	ldr	r3, [r3, #4]
 80184fc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8018500:	d02c      	beq.n	801855c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8018502:	4b2b      	ldr	r3, [pc, #172]	@ (80185b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8018504:	6858      	ldr	r0, [r3, #4]
 8018506:	f3c0 1088 	ubfx	r0, r0, #6, #9
 801850a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 801850e:	ebbc 0c00 	subs.w	ip, ip, r0
 8018512:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8018516:	ea4f 138e 	mov.w	r3, lr, lsl #6
 801851a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 801851e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8018522:	ebb1 010c 	subs.w	r1, r1, ip
 8018526:	eb63 030e 	sbc.w	r3, r3, lr
 801852a:	00db      	lsls	r3, r3, #3
 801852c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8018530:	00c9      	lsls	r1, r1, #3
 8018532:	eb11 0c00 	adds.w	ip, r1, r0
 8018536:	f143 0300 	adc.w	r3, r3, #0
 801853a:	0259      	lsls	r1, r3, #9
 801853c:	2300      	movs	r3, #0
 801853e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8018542:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8018546:	f7f8 fc07 	bl	8010d58 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 801854a:	4b19      	ldr	r3, [pc, #100]	@ (80185b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 801854c:	685b      	ldr	r3, [r3, #4]
 801854e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8018552:	3301      	adds	r3, #1
 8018554:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8018556:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 801855a:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801855c:	4b14      	ldr	r3, [pc, #80]	@ (80185b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 801855e:	6858      	ldr	r0, [r3, #4]
 8018560:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8018564:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8018568:	ebbc 0c00 	subs.w	ip, ip, r0
 801856c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8018570:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8018574:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8018578:	ea4f 118c 	mov.w	r1, ip, lsl #6
 801857c:	ebb1 010c 	subs.w	r1, r1, ip
 8018580:	eb63 030e 	sbc.w	r3, r3, lr
 8018584:	00db      	lsls	r3, r3, #3
 8018586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801858a:	00c9      	lsls	r1, r1, #3
 801858c:	eb11 0c00 	adds.w	ip, r1, r0
 8018590:	f143 0300 	adc.w	r3, r3, #0
 8018594:	0299      	lsls	r1, r3, #10
 8018596:	2300      	movs	r3, #0
 8018598:	ea4f 208c 	mov.w	r0, ip, lsl #10
 801859c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80185a0:	f7f8 fbda 	bl	8010d58 <__aeabi_uldivmod>
 80185a4:	e7d1      	b.n	801854a <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 80185a6:	4803      	ldr	r0, [pc, #12]	@ (80185b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80185a8:	e7d7      	b.n	801855a <HAL_RCC_GetSysClockFreq+0x7a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80185aa:	4803      	ldr	r0, [pc, #12]	@ (80185b8 <HAL_RCC_GetSysClockFreq+0xd8>)
  return sysclockfreq;
 80185ac:	e7d5      	b.n	801855a <HAL_RCC_GetSysClockFreq+0x7a>
 80185ae:	bf00      	nop
 80185b0:	40023800 	.word	0x40023800
 80185b4:	007a1200 	.word	0x007a1200
 80185b8:	00f42400 	.word	0x00f42400

080185bc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80185bc:	2800      	cmp	r0, #0
 80185be:	f000 809b 	beq.w	80186f8 <HAL_RCC_ClockConfig+0x13c>
{
 80185c2:	b570      	push	{r4, r5, r6, lr}
 80185c4:	460d      	mov	r5, r1
 80185c6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80185c8:	4b4f      	ldr	r3, [pc, #316]	@ (8018708 <HAL_RCC_ClockConfig+0x14c>)
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	f003 0307 	and.w	r3, r3, #7
 80185d0:	428b      	cmp	r3, r1
 80185d2:	d208      	bcs.n	80185e6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80185d4:	b2cb      	uxtb	r3, r1
 80185d6:	4a4c      	ldr	r2, [pc, #304]	@ (8018708 <HAL_RCC_ClockConfig+0x14c>)
 80185d8:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80185da:	6813      	ldr	r3, [r2, #0]
 80185dc:	f003 0307 	and.w	r3, r3, #7
 80185e0:	428b      	cmp	r3, r1
 80185e2:	f040 808b 	bne.w	80186fc <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80185e6:	6823      	ldr	r3, [r4, #0]
 80185e8:	f013 0f02 	tst.w	r3, #2
 80185ec:	d017      	beq.n	801861e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80185ee:	f013 0f04 	tst.w	r3, #4
 80185f2:	d004      	beq.n	80185fe <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80185f4:	4a45      	ldr	r2, [pc, #276]	@ (801870c <HAL_RCC_ClockConfig+0x150>)
 80185f6:	6893      	ldr	r3, [r2, #8]
 80185f8:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80185fc:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80185fe:	6823      	ldr	r3, [r4, #0]
 8018600:	f013 0f08 	tst.w	r3, #8
 8018604:	d004      	beq.n	8018610 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8018606:	4a41      	ldr	r2, [pc, #260]	@ (801870c <HAL_RCC_ClockConfig+0x150>)
 8018608:	6893      	ldr	r3, [r2, #8]
 801860a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 801860e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8018610:	4a3e      	ldr	r2, [pc, #248]	@ (801870c <HAL_RCC_ClockConfig+0x150>)
 8018612:	6893      	ldr	r3, [r2, #8]
 8018614:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8018618:	68a1      	ldr	r1, [r4, #8]
 801861a:	430b      	orrs	r3, r1
 801861c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801861e:	6823      	ldr	r3, [r4, #0]
 8018620:	f013 0f01 	tst.w	r3, #1
 8018624:	d032      	beq.n	801868c <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8018626:	6863      	ldr	r3, [r4, #4]
 8018628:	2b01      	cmp	r3, #1
 801862a:	d021      	beq.n	8018670 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801862c:	1e9a      	subs	r2, r3, #2
 801862e:	2a01      	cmp	r2, #1
 8018630:	d925      	bls.n	801867e <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8018632:	4a36      	ldr	r2, [pc, #216]	@ (801870c <HAL_RCC_ClockConfig+0x150>)
 8018634:	6812      	ldr	r2, [r2, #0]
 8018636:	f012 0f02 	tst.w	r2, #2
 801863a:	d061      	beq.n	8018700 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801863c:	4933      	ldr	r1, [pc, #204]	@ (801870c <HAL_RCC_ClockConfig+0x150>)
 801863e:	688a      	ldr	r2, [r1, #8]
 8018640:	f022 0203 	bic.w	r2, r2, #3
 8018644:	4313      	orrs	r3, r2
 8018646:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8018648:	f7fe fc52 	bl	8016ef0 <HAL_GetTick>
 801864c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801864e:	4b2f      	ldr	r3, [pc, #188]	@ (801870c <HAL_RCC_ClockConfig+0x150>)
 8018650:	689b      	ldr	r3, [r3, #8]
 8018652:	f003 030c 	and.w	r3, r3, #12
 8018656:	6862      	ldr	r2, [r4, #4]
 8018658:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 801865c:	d016      	beq.n	801868c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801865e:	f7fe fc47 	bl	8016ef0 <HAL_GetTick>
 8018662:	1b80      	subs	r0, r0, r6
 8018664:	f241 3388 	movw	r3, #5000	@ 0x1388
 8018668:	4298      	cmp	r0, r3
 801866a:	d9f0      	bls.n	801864e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 801866c:	2003      	movs	r0, #3
 801866e:	e042      	b.n	80186f6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018670:	4a26      	ldr	r2, [pc, #152]	@ (801870c <HAL_RCC_ClockConfig+0x150>)
 8018672:	6812      	ldr	r2, [r2, #0]
 8018674:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8018678:	d1e0      	bne.n	801863c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 801867a:	2001      	movs	r0, #1
 801867c:	e03b      	b.n	80186f6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801867e:	4a23      	ldr	r2, [pc, #140]	@ (801870c <HAL_RCC_ClockConfig+0x150>)
 8018680:	6812      	ldr	r2, [r2, #0]
 8018682:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8018686:	d1d9      	bne.n	801863c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8018688:	2001      	movs	r0, #1
 801868a:	e034      	b.n	80186f6 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801868c:	4b1e      	ldr	r3, [pc, #120]	@ (8018708 <HAL_RCC_ClockConfig+0x14c>)
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	f003 0307 	and.w	r3, r3, #7
 8018694:	42ab      	cmp	r3, r5
 8018696:	d907      	bls.n	80186a8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018698:	b2ea      	uxtb	r2, r5
 801869a:	4b1b      	ldr	r3, [pc, #108]	@ (8018708 <HAL_RCC_ClockConfig+0x14c>)
 801869c:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	f003 0307 	and.w	r3, r3, #7
 80186a4:	42ab      	cmp	r3, r5
 80186a6:	d12d      	bne.n	8018704 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80186a8:	6823      	ldr	r3, [r4, #0]
 80186aa:	f013 0f04 	tst.w	r3, #4
 80186ae:	d006      	beq.n	80186be <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80186b0:	4a16      	ldr	r2, [pc, #88]	@ (801870c <HAL_RCC_ClockConfig+0x150>)
 80186b2:	6893      	ldr	r3, [r2, #8]
 80186b4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80186b8:	68e1      	ldr	r1, [r4, #12]
 80186ba:	430b      	orrs	r3, r1
 80186bc:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80186be:	6823      	ldr	r3, [r4, #0]
 80186c0:	f013 0f08 	tst.w	r3, #8
 80186c4:	d007      	beq.n	80186d6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80186c6:	4a11      	ldr	r2, [pc, #68]	@ (801870c <HAL_RCC_ClockConfig+0x150>)
 80186c8:	6893      	ldr	r3, [r2, #8]
 80186ca:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80186ce:	6921      	ldr	r1, [r4, #16]
 80186d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80186d4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80186d6:	f7ff ff03 	bl	80184e0 <HAL_RCC_GetSysClockFreq>
 80186da:	4b0c      	ldr	r3, [pc, #48]	@ (801870c <HAL_RCC_ClockConfig+0x150>)
 80186dc:	689b      	ldr	r3, [r3, #8]
 80186de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80186e2:	4a0b      	ldr	r2, [pc, #44]	@ (8018710 <HAL_RCC_ClockConfig+0x154>)
 80186e4:	5cd3      	ldrb	r3, [r2, r3]
 80186e6:	40d8      	lsrs	r0, r3
 80186e8:	4b0a      	ldr	r3, [pc, #40]	@ (8018714 <HAL_RCC_ClockConfig+0x158>)
 80186ea:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80186ec:	4b0a      	ldr	r3, [pc, #40]	@ (8018718 <HAL_RCC_ClockConfig+0x15c>)
 80186ee:	6818      	ldr	r0, [r3, #0]
 80186f0:	f7fa f94e 	bl	8012990 <HAL_InitTick>
  return HAL_OK;
 80186f4:	2000      	movs	r0, #0
}
 80186f6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80186f8:	2001      	movs	r0, #1
}
 80186fa:	4770      	bx	lr
      return HAL_ERROR;
 80186fc:	2001      	movs	r0, #1
 80186fe:	e7fa      	b.n	80186f6 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8018700:	2001      	movs	r0, #1
 8018702:	e7f8      	b.n	80186f6 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8018704:	2001      	movs	r0, #1
 8018706:	e7f6      	b.n	80186f6 <HAL_RCC_ClockConfig+0x13a>
 8018708:	40023c00 	.word	0x40023c00
 801870c:	40023800 	.word	0x40023800
 8018710:	0803c860 	.word	0x0803c860
 8018714:	20000018 	.word	0x20000018
 8018718:	20000118 	.word	0x20000118

0801871c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 801871c:	4b01      	ldr	r3, [pc, #4]	@ (8018724 <HAL_RCC_GetHCLKFreq+0x8>)
 801871e:	6818      	ldr	r0, [r3, #0]
 8018720:	4770      	bx	lr
 8018722:	bf00      	nop
 8018724:	20000018 	.word	0x20000018

08018728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8018728:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801872a:	f7ff fff7 	bl	801871c <HAL_RCC_GetHCLKFreq>
 801872e:	4b04      	ldr	r3, [pc, #16]	@ (8018740 <HAL_RCC_GetPCLK1Freq+0x18>)
 8018730:	689b      	ldr	r3, [r3, #8]
 8018732:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8018736:	4a03      	ldr	r2, [pc, #12]	@ (8018744 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8018738:	5cd3      	ldrb	r3, [r2, r3]
}
 801873a:	40d8      	lsrs	r0, r3
 801873c:	bd08      	pop	{r3, pc}
 801873e:	bf00      	nop
 8018740:	40023800 	.word	0x40023800
 8018744:	0803c858 	.word	0x0803c858

08018748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8018748:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801874a:	f7ff ffe7 	bl	801871c <HAL_RCC_GetHCLKFreq>
 801874e:	4b04      	ldr	r3, [pc, #16]	@ (8018760 <HAL_RCC_GetPCLK2Freq+0x18>)
 8018750:	689b      	ldr	r3, [r3, #8]
 8018752:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8018756:	4a03      	ldr	r2, [pc, #12]	@ (8018764 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8018758:	5cd3      	ldrb	r3, [r2, r3]
}
 801875a:	40d8      	lsrs	r0, r3
 801875c:	bd08      	pop	{r3, pc}
 801875e:	bf00      	nop
 8018760:	40023800 	.word	0x40023800
 8018764:	0803c858 	.word	0x0803c858

08018768 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8018768:	230f      	movs	r3, #15
 801876a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801876c:	4b0b      	ldr	r3, [pc, #44]	@ (801879c <HAL_RCC_GetClockConfig+0x34>)
 801876e:	689a      	ldr	r2, [r3, #8]
 8018770:	f002 0203 	and.w	r2, r2, #3
 8018774:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8018776:	689a      	ldr	r2, [r3, #8]
 8018778:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 801877c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 801877e:	689a      	ldr	r2, [r3, #8]
 8018780:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8018784:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8018786:	689b      	ldr	r3, [r3, #8]
 8018788:	08db      	lsrs	r3, r3, #3
 801878a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 801878e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8018790:	4b03      	ldr	r3, [pc, #12]	@ (80187a0 <HAL_RCC_GetClockConfig+0x38>)
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	f003 0307 	and.w	r3, r3, #7
 8018798:	600b      	str	r3, [r1, #0]
}
 801879a:	4770      	bx	lr
 801879c:	40023800 	.word	0x40023800
 80187a0:	40023c00 	.word	0x40023c00

080187a4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80187a4:	b530      	push	{r4, r5, lr}
 80187a6:	b083      	sub	sp, #12
 80187a8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80187aa:	6803      	ldr	r3, [r0, #0]
 80187ac:	f013 0f05 	tst.w	r3, #5
 80187b0:	d10e      	bne.n	80187d0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80187b2:	6823      	ldr	r3, [r4, #0]
 80187b4:	f013 0f02 	tst.w	r3, #2
 80187b8:	d138      	bne.n	801882c <HAL_RCCEx_PeriphCLKConfig+0x88>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80187ba:	6823      	ldr	r3, [r4, #0]
 80187bc:	f013 0f08 	tst.w	r3, #8
 80187c0:	f000 809d 	beq.w	80188fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80187c4:	7d22      	ldrb	r2, [r4, #20]
 80187c6:	4b4f      	ldr	r3, [pc, #316]	@ (8018904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80187c8:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80187cc:	2000      	movs	r0, #0
 80187ce:	e097      	b.n	8018900 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_PLLI2S_DISABLE();
 80187d0:	4b4d      	ldr	r3, [pc, #308]	@ (8018908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80187d2:	2200      	movs	r2, #0
 80187d4:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 80187d6:	f7fe fb8b 	bl	8016ef0 <HAL_GetTick>
 80187da:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80187dc:	4b4b      	ldr	r3, [pc, #300]	@ (801890c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80187e4:	d006      	beq.n	80187f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80187e6:	f7fe fb83 	bl	8016ef0 <HAL_GetTick>
 80187ea:	1b43      	subs	r3, r0, r5
 80187ec:	2b02      	cmp	r3, #2
 80187ee:	d9f5      	bls.n	80187dc <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 80187f0:	2003      	movs	r0, #3
 80187f2:	e085      	b.n	8018900 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80187f4:	6863      	ldr	r3, [r4, #4]
 80187f6:	68a2      	ldr	r2, [r4, #8]
 80187f8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80187fc:	68e2      	ldr	r2, [r4, #12]
 80187fe:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8018802:	4a42      	ldr	r2, [pc, #264]	@ (801890c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8018804:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8018808:	4b3f      	ldr	r3, [pc, #252]	@ (8018908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 801880a:	2201      	movs	r2, #1
 801880c:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 801880e:	f7fe fb6f 	bl	8016ef0 <HAL_GetTick>
 8018812:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8018814:	4b3d      	ldr	r3, [pc, #244]	@ (801890c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 801881c:	d1c9      	bne.n	80187b2 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801881e:	f7fe fb67 	bl	8016ef0 <HAL_GetTick>
 8018822:	1b40      	subs	r0, r0, r5
 8018824:	2802      	cmp	r0, #2
 8018826:	d9f5      	bls.n	8018814 <HAL_RCCEx_PeriphCLKConfig+0x70>
        return HAL_TIMEOUT;
 8018828:	2003      	movs	r0, #3
 801882a:	e069      	b.n	8018900 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_PWR_CLK_ENABLE();
 801882c:	2300      	movs	r3, #0
 801882e:	9301      	str	r3, [sp, #4]
 8018830:	4b36      	ldr	r3, [pc, #216]	@ (801890c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8018832:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018834:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8018838:	641a      	str	r2, [r3, #64]	@ 0x40
 801883a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801883c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018840:	9301      	str	r3, [sp, #4]
 8018842:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8018844:	4a32      	ldr	r2, [pc, #200]	@ (8018910 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8018846:	6813      	ldr	r3, [r2, #0]
 8018848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801884c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 801884e:	f7fe fb4f 	bl	8016ef0 <HAL_GetTick>
 8018852:	4605      	mov	r5, r0
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8018854:	4b2e      	ldr	r3, [pc, #184]	@ (8018910 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	f413 7f80 	tst.w	r3, #256	@ 0x100
 801885c:	d106      	bne.n	801886c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801885e:	f7fe fb47 	bl	8016ef0 <HAL_GetTick>
 8018862:	1b43      	subs	r3, r0, r5
 8018864:	2b02      	cmp	r3, #2
 8018866:	d9f5      	bls.n	8018854 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        return HAL_TIMEOUT;
 8018868:	2003      	movs	r0, #3
 801886a:	e049      	b.n	8018900 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801886c:	4b27      	ldr	r3, [pc, #156]	@ (801890c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 801886e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8018870:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8018874:	d014      	beq.n	80188a0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8018876:	6922      	ldr	r2, [r4, #16]
 8018878:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 801887c:	429a      	cmp	r2, r3
 801887e:	d00f      	beq.n	80188a0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8018880:	4b22      	ldr	r3, [pc, #136]	@ (801890c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8018882:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8018884:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8018888:	491f      	ldr	r1, [pc, #124]	@ (8018908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 801888a:	2001      	movs	r0, #1
 801888c:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8018890:	2000      	movs	r0, #0
 8018892:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8018896:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8018898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801889a:	f013 0f01 	tst.w	r3, #1
 801889e:	d112      	bne.n	80188c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80188a0:	6923      	ldr	r3, [r4, #16]
 80188a2:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80188a6:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80188aa:	d01d      	beq.n	80188e8 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80188ac:	4a17      	ldr	r2, [pc, #92]	@ (801890c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80188ae:	6893      	ldr	r3, [r2, #8]
 80188b0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80188b4:	6093      	str	r3, [r2, #8]
 80188b6:	4915      	ldr	r1, [pc, #84]	@ (801890c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80188b8:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 80188ba:	6922      	ldr	r2, [r4, #16]
 80188bc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80188c0:	4313      	orrs	r3, r2
 80188c2:	670b      	str	r3, [r1, #112]	@ 0x70
 80188c4:	e779      	b.n	80187ba <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 80188c6:	f7fe fb13 	bl	8016ef0 <HAL_GetTick>
 80188ca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80188cc:	4b0f      	ldr	r3, [pc, #60]	@ (801890c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80188ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80188d0:	f013 0f02 	tst.w	r3, #2
 80188d4:	d1e4      	bne.n	80188a0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80188d6:	f7fe fb0b 	bl	8016ef0 <HAL_GetTick>
 80188da:	1b40      	subs	r0, r0, r5
 80188dc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80188e0:	4298      	cmp	r0, r3
 80188e2:	d9f3      	bls.n	80188cc <HAL_RCCEx_PeriphCLKConfig+0x128>
            return HAL_TIMEOUT;
 80188e4:	2003      	movs	r0, #3
 80188e6:	e00b      	b.n	8018900 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80188e8:	4908      	ldr	r1, [pc, #32]	@ (801890c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80188ea:	688a      	ldr	r2, [r1, #8]
 80188ec:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 80188f0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80188f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80188f8:	4313      	orrs	r3, r2
 80188fa:	608b      	str	r3, [r1, #8]
 80188fc:	e7db      	b.n	80188b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
  return HAL_OK;
 80188fe:	2000      	movs	r0, #0
}
 8018900:	b003      	add	sp, #12
 8018902:	bd30      	pop	{r4, r5, pc}
 8018904:	42471000 	.word	0x42471000
 8018908:	42470000 	.word	0x42470000
 801890c:	40023800 	.word	0x40023800
 8018910:	40007000 	.word	0x40007000

08018914 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8018914:	b538      	push	{r3, r4, r5, lr}
 8018916:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8018918:	6803      	ldr	r3, [r0, #0]
 801891a:	4a0a      	ldr	r2, [pc, #40]	@ (8018944 <HAL_RTC_WaitForSynchro+0x30>)
 801891c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801891e:	f7fe fae7 	bl	8016ef0 <HAL_GetTick>
 8018922:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8018924:	6823      	ldr	r3, [r4, #0]
 8018926:	68db      	ldr	r3, [r3, #12]
 8018928:	f013 0f20 	tst.w	r3, #32
 801892c:	d107      	bne.n	801893e <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801892e:	f7fe fadf 	bl	8016ef0 <HAL_GetTick>
 8018932:	1b40      	subs	r0, r0, r5
 8018934:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8018938:	d9f4      	bls.n	8018924 <HAL_RTC_WaitForSynchro+0x10>
    {
      return HAL_TIMEOUT;
 801893a:	2003      	movs	r0, #3
 801893c:	e000      	b.n	8018940 <HAL_RTC_WaitForSynchro+0x2c>
    }
  }

  return HAL_OK;
 801893e:	2000      	movs	r0, #0
}
 8018940:	bd38      	pop	{r3, r4, r5, pc}
 8018942:	bf00      	nop
 8018944:	00013f5f 	.word	0x00013f5f

08018948 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8018948:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801894a:	6803      	ldr	r3, [r0, #0]
 801894c:	68da      	ldr	r2, [r3, #12]
 801894e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8018952:	d002      	beq.n	801895a <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8018954:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 8018956:	4628      	mov	r0, r5
 8018958:	bd70      	pop	{r4, r5, r6, pc}
 801895a:	4604      	mov	r4, r0
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801895c:	68da      	ldr	r2, [r3, #12]
 801895e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8018962:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8018964:	f7fe fac4 	bl	8016ef0 <HAL_GetTick>
 8018968:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 801896a:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801896c:	6823      	ldr	r3, [r4, #0]
 801896e:	68db      	ldr	r3, [r3, #12]
 8018970:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8018974:	d1ef      	bne.n	8018956 <RTC_EnterInitMode+0xe>
 8018976:	2d00      	cmp	r5, #0
 8018978:	d1ed      	bne.n	8018956 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801897a:	f7fe fab9 	bl	8016ef0 <HAL_GetTick>
 801897e:	1b83      	subs	r3, r0, r6
 8018980:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018984:	d9f2      	bls.n	801896c <RTC_EnterInitMode+0x24>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8018986:	2304      	movs	r3, #4
 8018988:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 801898a:	2501      	movs	r5, #1
 801898c:	e7ee      	b.n	801896c <RTC_EnterInitMode+0x24>

0801898e <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801898e:	6802      	ldr	r2, [r0, #0]
 8018990:	68d3      	ldr	r3, [r2, #12]
 8018992:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018996:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8018998:	6803      	ldr	r3, [r0, #0]
 801899a:	689b      	ldr	r3, [r3, #8]
 801899c:	f013 0f20 	tst.w	r3, #32
 80189a0:	d001      	beq.n	80189a6 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80189a2:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 80189a4:	4770      	bx	lr
{
 80189a6:	b510      	push	{r4, lr}
 80189a8:	4604      	mov	r4, r0
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80189aa:	f7ff ffb3 	bl	8018914 <HAL_RTC_WaitForSynchro>
 80189ae:	b110      	cbz	r0, 80189b6 <RTC_ExitInitMode+0x28>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80189b0:	2304      	movs	r3, #4
 80189b2:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 80189b4:	2001      	movs	r0, #1
}
 80189b6:	bd10      	pop	{r4, pc}

080189b8 <HAL_RTC_Init>:
  if (hrtc == NULL)
 80189b8:	2800      	cmp	r0, #0
 80189ba:	d04a      	beq.n	8018a52 <HAL_RTC_Init+0x9a>
{
 80189bc:	b510      	push	{r4, lr}
 80189be:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80189c0:	7f43      	ldrb	r3, [r0, #29]
 80189c2:	b153      	cbz	r3, 80189da <HAL_RTC_Init+0x22>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80189c4:	2302      	movs	r3, #2
 80189c6:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80189c8:	6823      	ldr	r3, [r4, #0]
 80189ca:	68da      	ldr	r2, [r3, #12]
 80189cc:	f012 0f10 	tst.w	r2, #16
 80189d0:	d007      	beq.n	80189e2 <HAL_RTC_Init+0x2a>
    status = HAL_OK;
 80189d2:	2000      	movs	r0, #0
    hrtc->State = HAL_RTC_STATE_READY;
 80189d4:	2301      	movs	r3, #1
 80189d6:	7763      	strb	r3, [r4, #29]
}
 80189d8:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80189da:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80189dc:	f7f9 feec 	bl	80127b8 <HAL_RTC_MspInit>
 80189e0:	e7f0      	b.n	80189c4 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80189e2:	22ca      	movs	r2, #202	@ 0xca
 80189e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80189e6:	6823      	ldr	r3, [r4, #0]
 80189e8:	2253      	movs	r2, #83	@ 0x53
 80189ea:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 80189ec:	4620      	mov	r0, r4
 80189ee:	f7ff ffab 	bl	8018948 <RTC_EnterInitMode>
    if (status == HAL_OK)
 80189f2:	b128      	cbz	r0, 8018a00 <HAL_RTC_Init+0x48>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80189f4:	6823      	ldr	r3, [r4, #0]
 80189f6:	22ff      	movs	r2, #255	@ 0xff
 80189f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 80189fa:	2800      	cmp	r0, #0
 80189fc:	d1ec      	bne.n	80189d8 <HAL_RTC_Init+0x20>
 80189fe:	e7e9      	b.n	80189d4 <HAL_RTC_Init+0x1c>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8018a00:	6822      	ldr	r2, [r4, #0]
 8018a02:	6893      	ldr	r3, [r2, #8]
 8018a04:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8018a08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018a0c:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8018a0e:	6821      	ldr	r1, [r4, #0]
 8018a10:	688a      	ldr	r2, [r1, #8]
 8018a12:	6863      	ldr	r3, [r4, #4]
 8018a14:	6920      	ldr	r0, [r4, #16]
 8018a16:	4303      	orrs	r3, r0
 8018a18:	6960      	ldr	r0, [r4, #20]
 8018a1a:	4303      	orrs	r3, r0
 8018a1c:	4313      	orrs	r3, r2
 8018a1e:	608b      	str	r3, [r1, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8018a20:	6823      	ldr	r3, [r4, #0]
 8018a22:	68e2      	ldr	r2, [r4, #12]
 8018a24:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8018a26:	6822      	ldr	r2, [r4, #0]
 8018a28:	6913      	ldr	r3, [r2, #16]
 8018a2a:	68a1      	ldr	r1, [r4, #8]
 8018a2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8018a30:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 8018a32:	4620      	mov	r0, r4
 8018a34:	f7ff ffab 	bl	801898e <RTC_ExitInitMode>
    if (status == HAL_OK)
 8018a38:	2800      	cmp	r0, #0
 8018a3a:	d1db      	bne.n	80189f4 <HAL_RTC_Init+0x3c>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8018a3c:	6822      	ldr	r2, [r4, #0]
 8018a3e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8018a40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8018a44:	6413      	str	r3, [r2, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8018a46:	6822      	ldr	r2, [r4, #0]
 8018a48:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8018a4a:	69a1      	ldr	r1, [r4, #24]
 8018a4c:	430b      	orrs	r3, r1
 8018a4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8018a50:	e7d0      	b.n	80189f4 <HAL_RTC_Init+0x3c>
    return HAL_ERROR;
 8018a52:	2001      	movs	r0, #1
}
 8018a54:	4770      	bx	lr

08018a56 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 8018a56:	2300      	movs	r3, #0

  while (number >= 10U)
 8018a58:	e002      	b.n	8018a60 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8018a5a:	3301      	adds	r3, #1
    number -= 10U;
 8018a5c:	380a      	subs	r0, #10
 8018a5e:	b2c0      	uxtb	r0, r0
  while (number >= 10U)
 8018a60:	2809      	cmp	r0, #9
 8018a62:	d8fa      	bhi.n	8018a5a <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8018a64:	011b      	lsls	r3, r3, #4
 8018a66:	b2db      	uxtb	r3, r3
}
 8018a68:	4318      	orrs	r0, r3
 8018a6a:	4770      	bx	lr

08018a6c <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8018a6c:	7f03      	ldrb	r3, [r0, #28]
 8018a6e:	2b01      	cmp	r3, #1
 8018a70:	d05a      	beq.n	8018b28 <HAL_RTC_SetTime+0xbc>
{
 8018a72:	b570      	push	{r4, r5, r6, lr}
 8018a74:	4604      	mov	r4, r0
 8018a76:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8018a78:	2301      	movs	r3, #1
 8018a7a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8018a7c:	2302      	movs	r3, #2
 8018a7e:	7743      	strb	r3, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 8018a80:	bb32      	cbnz	r2, 8018ad0 <HAL_RTC_SetTime+0x64>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8018a82:	6803      	ldr	r3, [r0, #0]
 8018a84:	689b      	ldr	r3, [r3, #8]
 8018a86:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8018a8a:	d101      	bne.n	8018a90 <HAL_RTC_SetTime+0x24>
      sTime->TimeFormat = 0x00U;
 8018a8c:	2300      	movs	r3, #0
 8018a8e:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8018a90:	7830      	ldrb	r0, [r6, #0]
 8018a92:	f7ff ffe0 	bl	8018a56 <RTC_ByteToBcd2>
 8018a96:	0405      	lsls	r5, r0, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8018a98:	7870      	ldrb	r0, [r6, #1]
 8018a9a:	f7ff ffdc 	bl	8018a56 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8018a9e:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8018aa2:	78b0      	ldrb	r0, [r6, #2]
 8018aa4:	f7ff ffd7 	bl	8018a56 <RTC_ByteToBcd2>
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8018aa8:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8018aaa:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8018aac:	ea45 5583 	orr.w	r5, r5, r3, lsl #22
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018ab0:	6823      	ldr	r3, [r4, #0]
 8018ab2:	22ca      	movs	r2, #202	@ 0xca
 8018ab4:	625a      	str	r2, [r3, #36]	@ 0x24
 8018ab6:	6823      	ldr	r3, [r4, #0]
 8018ab8:	2253      	movs	r2, #83	@ 0x53
 8018aba:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8018abc:	4620      	mov	r0, r4
 8018abe:	f7ff ff43 	bl	8018948 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8018ac2:	b1b8      	cbz	r0, 8018af4 <HAL_RTC_SetTime+0x88>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018ac4:	6823      	ldr	r3, [r4, #0]
 8018ac6:	22ff      	movs	r2, #255	@ 0xff
 8018ac8:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8018aca:	2300      	movs	r3, #0
 8018acc:	7723      	strb	r3, [r4, #28]
}
 8018ace:	bd70      	pop	{r4, r5, r6, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8018ad0:	6803      	ldr	r3, [r0, #0]
 8018ad2:	689b      	ldr	r3, [r3, #8]
 8018ad4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8018ad8:	d101      	bne.n	8018ade <HAL_RTC_SetTime+0x72>
      sTime->TimeFormat = 0x00U;
 8018ada:	2300      	movs	r3, #0
 8018adc:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8018ade:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8018ae0:	7875      	ldrb	r5, [r6, #1]
 8018ae2:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8018ae4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t) sTime->Seconds)                       | \
 8018ae8:	78b3      	ldrb	r3, [r6, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8018aea:	431d      	orrs	r5, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8018aec:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8018aee:	ea45 5583 	orr.w	r5, r5, r3, lsl #22
 8018af2:	e7dd      	b.n	8018ab0 <HAL_RTC_SetTime+0x44>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8018af4:	6823      	ldr	r3, [r4, #0]
 8018af6:	f005 357f 	and.w	r5, r5, #2139062143	@ 0x7f7f7f7f
 8018afa:	f025 45fe 	bic.w	r5, r5, #2130706432	@ 0x7f000000
 8018afe:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8018b00:	6822      	ldr	r2, [r4, #0]
 8018b02:	6893      	ldr	r3, [r2, #8]
 8018b04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8018b08:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8018b0a:	6821      	ldr	r1, [r4, #0]
 8018b0c:	688b      	ldr	r3, [r1, #8]
 8018b0e:	68f2      	ldr	r2, [r6, #12]
 8018b10:	6930      	ldr	r0, [r6, #16]
 8018b12:	4302      	orrs	r2, r0
 8018b14:	4313      	orrs	r3, r2
 8018b16:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 8018b18:	4620      	mov	r0, r4
 8018b1a:	f7ff ff38 	bl	801898e <RTC_ExitInitMode>
  if (status == HAL_OK)
 8018b1e:	2800      	cmp	r0, #0
 8018b20:	d1d0      	bne.n	8018ac4 <HAL_RTC_SetTime+0x58>
    hrtc->State = HAL_RTC_STATE_READY;
 8018b22:	2301      	movs	r3, #1
 8018b24:	7763      	strb	r3, [r4, #29]
 8018b26:	e7cd      	b.n	8018ac4 <HAL_RTC_SetTime+0x58>
  __HAL_LOCK(hrtc);
 8018b28:	2002      	movs	r0, #2
}
 8018b2a:	4770      	bx	lr

08018b2c <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8018b2c:	7f03      	ldrb	r3, [r0, #28]
 8018b2e:	2b01      	cmp	r3, #1
 8018b30:	d048      	beq.n	8018bc4 <HAL_RTC_SetDate+0x98>
{
 8018b32:	b570      	push	{r4, r5, r6, lr}
 8018b34:	4604      	mov	r4, r0
 8018b36:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8018b38:	2301      	movs	r3, #1
 8018b3a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8018b3c:	2302      	movs	r3, #2
 8018b3e:	7743      	strb	r3, [r0, #29]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8018b40:	b1ca      	cbz	r2, 8018b76 <HAL_RTC_SetDate+0x4a>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8018b42:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8018b44:	784d      	ldrb	r5, [r1, #1]
 8018b46:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8018b48:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  ((uint32_t) sDate->Date)                      | \
 8018b4c:	788b      	ldrb	r3, [r1, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8018b4e:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8018b50:	780b      	ldrb	r3, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8018b52:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018b56:	6823      	ldr	r3, [r4, #0]
 8018b58:	22ca      	movs	r2, #202	@ 0xca
 8018b5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8018b5c:	6823      	ldr	r3, [r4, #0]
 8018b5e:	2253      	movs	r2, #83	@ 0x53
 8018b60:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8018b62:	4620      	mov	r0, r4
 8018b64:	f7ff fef0 	bl	8018948 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8018b68:	b1f0      	cbz	r0, 8018ba8 <HAL_RTC_SetDate+0x7c>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018b6a:	6823      	ldr	r3, [r4, #0]
 8018b6c:	22ff      	movs	r2, #255	@ 0xff
 8018b6e:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8018b70:	2300      	movs	r3, #0
 8018b72:	7723      	strb	r3, [r4, #28]
}
 8018b74:	bd70      	pop	{r4, r5, r6, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8018b76:	784b      	ldrb	r3, [r1, #1]
 8018b78:	f013 0f10 	tst.w	r3, #16
 8018b7c:	d003      	beq.n	8018b86 <HAL_RTC_SetDate+0x5a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8018b7e:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8018b82:	330a      	adds	r3, #10
 8018b84:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8018b86:	78f0      	ldrb	r0, [r6, #3]
 8018b88:	f7ff ff65 	bl	8018a56 <RTC_ByteToBcd2>
 8018b8c:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8018b8e:	7870      	ldrb	r0, [r6, #1]
 8018b90:	f7ff ff61 	bl	8018a56 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8018b94:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8018b98:	78b0      	ldrb	r0, [r6, #2]
 8018b9a:	f7ff ff5c 	bl	8018a56 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8018b9e:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8018ba0:	7833      	ldrb	r3, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8018ba2:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
 8018ba6:	e7d6      	b.n	8018b56 <HAL_RTC_SetDate+0x2a>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8018ba8:	6823      	ldr	r3, [r4, #0]
 8018baa:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
 8018bae:	f025 05c0 	bic.w	r5, r5, #192	@ 0xc0
 8018bb2:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8018bb4:	4620      	mov	r0, r4
 8018bb6:	f7ff feea 	bl	801898e <RTC_ExitInitMode>
  if (status == HAL_OK)
 8018bba:	2800      	cmp	r0, #0
 8018bbc:	d1d5      	bne.n	8018b6a <HAL_RTC_SetDate+0x3e>
    hrtc->State = HAL_RTC_STATE_READY;
 8018bbe:	2301      	movs	r3, #1
 8018bc0:	7763      	strb	r3, [r4, #29]
 8018bc2:	e7d2      	b.n	8018b6a <HAL_RTC_SetDate+0x3e>
  __HAL_LOCK(hrtc);
 8018bc4:	2002      	movs	r0, #2
}
 8018bc6:	4770      	bx	lr

08018bc8 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8018bc8:	0903      	lsrs	r3, r0, #4
 8018bca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8018bce:	f000 000f 	and.w	r0, r0, #15
 8018bd2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8018bd6:	b2c0      	uxtb	r0, r0
 8018bd8:	4770      	bx	lr

08018bda <HAL_RTC_GetTime>:
{
 8018bda:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8018bdc:	6803      	ldr	r3, [r0, #0]
 8018bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018be0:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8018be2:	6803      	ldr	r3, [r0, #0]
 8018be4:	691b      	ldr	r3, [r3, #16]
 8018be6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018bea:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8018bec:	6803      	ldr	r3, [r0, #0]
 8018bee:	681b      	ldr	r3, [r3, #0]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8018bf0:	f3c3 4005 	ubfx	r0, r3, #16, #6
 8018bf4:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8018bf6:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8018bfa:	704e      	strb	r6, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8018bfc:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
 8018c00:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8018c02:	f3c3 5380 	ubfx	r3, r3, #22, #1
 8018c06:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8018c08:	b95a      	cbnz	r2, 8018c22 <HAL_RTC_GetTime+0x48>
 8018c0a:	460c      	mov	r4, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8018c0c:	f7ff ffdc 	bl	8018bc8 <RTC_Bcd2ToByte>
 8018c10:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8018c12:	4630      	mov	r0, r6
 8018c14:	f7ff ffd8 	bl	8018bc8 <RTC_Bcd2ToByte>
 8018c18:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8018c1a:	4628      	mov	r0, r5
 8018c1c:	f7ff ffd4 	bl	8018bc8 <RTC_Bcd2ToByte>
 8018c20:	70a0      	strb	r0, [r4, #2]
}
 8018c22:	2000      	movs	r0, #0
 8018c24:	bd70      	pop	{r4, r5, r6, pc}

08018c26 <HAL_RTC_GetDate>:
{
 8018c26:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8018c28:	6803      	ldr	r3, [r0, #0]
 8018c2a:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8018c2c:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8018c30:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8018c32:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8018c36:	704e      	strb	r6, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8018c38:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 8018c3c:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8018c3e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8018c42:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8018c44:	b95a      	cbnz	r2, 8018c5e <HAL_RTC_GetDate+0x38>
 8018c46:	460c      	mov	r4, r1
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8018c48:	f7ff ffbe 	bl	8018bc8 <RTC_Bcd2ToByte>
 8018c4c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8018c4e:	4630      	mov	r0, r6
 8018c50:	f7ff ffba 	bl	8018bc8 <RTC_Bcd2ToByte>
 8018c54:	7060      	strb	r0, [r4, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8018c56:	4628      	mov	r0, r5
 8018c58:	f7ff ffb6 	bl	8018bc8 <RTC_Bcd2ToByte>
 8018c5c:	70a0      	strb	r0, [r4, #2]
}
 8018c5e:	2000      	movs	r0, #0
 8018c60:	bd70      	pop	{r4, r5, r6, pc}

08018c62 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8018c62:	6803      	ldr	r3, [r0, #0]
 8018c64:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8018c66:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8018c6a:	4770      	bx	lr

08018c6c <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8018c6c:	6803      	ldr	r3, [r0, #0]
 8018c6e:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8018c70:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8018c74:	4770      	bx	lr
	...

08018c78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8018c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c7c:	b082      	sub	sp, #8
 8018c7e:	4605      	mov	r5, r0
 8018c80:	4688      	mov	r8, r1
 8018c82:	4617      	mov	r7, r2
 8018c84:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8018c86:	f7fe f933 	bl	8016ef0 <HAL_GetTick>
 8018c8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018c8c:	1a1b      	subs	r3, r3, r0
 8018c8e:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8018c92:	f7fe f92d 	bl	8016ef0 <HAL_GetTick>
 8018c96:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8018c98:	4b28      	ldr	r3, [pc, #160]	@ (8018d3c <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8018ca0:	fb09 f303 	mul.w	r3, r9, r3
 8018ca4:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8018ca6:	682b      	ldr	r3, [r5, #0]
 8018ca8:	689c      	ldr	r4, [r3, #8]
 8018caa:	ea38 0404 	bics.w	r4, r8, r4
 8018cae:	bf0c      	ite	eq
 8018cb0:	2301      	moveq	r3, #1
 8018cb2:	2300      	movne	r3, #0
 8018cb4:	42bb      	cmp	r3, r7
 8018cb6:	d03d      	beq.n	8018d34 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8018cb8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8018cbc:	d0f3      	beq.n	8018ca6 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8018cbe:	f7fe f917 	bl	8016ef0 <HAL_GetTick>
 8018cc2:	eba0 000a 	sub.w	r0, r0, sl
 8018cc6:	4548      	cmp	r0, r9
 8018cc8:	d207      	bcs.n	8018cda <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8018cca:	9a01      	ldr	r2, [sp, #4]
 8018ccc:	b102      	cbz	r2, 8018cd0 <SPI_WaitFlagStateUntilTimeout+0x58>
 8018cce:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8018cd0:	9b01      	ldr	r3, [sp, #4]
 8018cd2:	3b01      	subs	r3, #1
 8018cd4:	9301      	str	r3, [sp, #4]
 8018cd6:	4691      	mov	r9, r2
 8018cd8:	e7e5      	b.n	8018ca6 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8018cda:	682a      	ldr	r2, [r5, #0]
 8018cdc:	6853      	ldr	r3, [r2, #4]
 8018cde:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8018ce2:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018ce4:	686b      	ldr	r3, [r5, #4]
 8018ce6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018cea:	d00b      	beq.n	8018d04 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8018cec:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8018cee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8018cf2:	d014      	beq.n	8018d1e <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8018cf4:	2301      	movs	r3, #1
 8018cf6:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8018cfa:	2300      	movs	r3, #0
 8018cfc:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8018d00:	2003      	movs	r0, #3
 8018d02:	e018      	b.n	8018d36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018d04:	68ab      	ldr	r3, [r5, #8]
 8018d06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018d0a:	d002      	beq.n	8018d12 <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8018d0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018d10:	d1ec      	bne.n	8018cec <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8018d12:	682a      	ldr	r2, [r5, #0]
 8018d14:	6813      	ldr	r3, [r2, #0]
 8018d16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018d1a:	6013      	str	r3, [r2, #0]
 8018d1c:	e7e6      	b.n	8018cec <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8018d1e:	682a      	ldr	r2, [r5, #0]
 8018d20:	6813      	ldr	r3, [r2, #0]
 8018d22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8018d26:	6013      	str	r3, [r2, #0]
 8018d28:	682a      	ldr	r2, [r5, #0]
 8018d2a:	6813      	ldr	r3, [r2, #0]
 8018d2c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8018d30:	6013      	str	r3, [r2, #0]
 8018d32:	e7df      	b.n	8018cf4 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8018d34:	2000      	movs	r0, #0
}
 8018d36:	b002      	add	sp, #8
 8018d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d3c:	20000018 	.word	0x20000018

08018d40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8018d40:	b570      	push	{r4, r5, r6, lr}
 8018d42:	b084      	sub	sp, #16
 8018d44:	4604      	mov	r4, r0
 8018d46:	460d      	mov	r5, r1
 8018d48:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8018d4a:	9200      	str	r2, [sp, #0]
 8018d4c:	460b      	mov	r3, r1
 8018d4e:	2201      	movs	r2, #1
 8018d50:	2102      	movs	r1, #2
 8018d52:	f7ff ff91 	bl	8018c78 <SPI_WaitFlagStateUntilTimeout>
 8018d56:	b9d0      	cbnz	r0, 8018d8e <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8018d58:	4b17      	ldr	r3, [pc, #92]	@ (8018db8 <SPI_EndRxTxTransaction+0x78>)
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	4a17      	ldr	r2, [pc, #92]	@ (8018dbc <SPI_EndRxTxTransaction+0x7c>)
 8018d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8018d62:	0d5b      	lsrs	r3, r3, #21
 8018d64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018d68:	fb02 f303 	mul.w	r3, r2, r3
 8018d6c:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8018d6e:	6863      	ldr	r3, [r4, #4]
 8018d70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018d74:	d011      	beq.n	8018d9a <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8018d76:	9b03      	ldr	r3, [sp, #12]
 8018d78:	b13b      	cbz	r3, 8018d8a <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 8018d7a:	9b03      	ldr	r3, [sp, #12]
 8018d7c:	3b01      	subs	r3, #1
 8018d7e:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8018d80:	6823      	ldr	r3, [r4, #0]
 8018d82:	689b      	ldr	r3, [r3, #8]
 8018d84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018d88:	d1f5      	bne.n	8018d76 <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 8018d8a:	b004      	add	sp, #16
 8018d8c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018d8e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8018d90:	f043 0320 	orr.w	r3, r3, #32
 8018d94:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8018d96:	2003      	movs	r0, #3
 8018d98:	e7f7      	b.n	8018d8a <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8018d9a:	9600      	str	r6, [sp, #0]
 8018d9c:	462b      	mov	r3, r5
 8018d9e:	2200      	movs	r2, #0
 8018da0:	2180      	movs	r1, #128	@ 0x80
 8018da2:	4620      	mov	r0, r4
 8018da4:	f7ff ff68 	bl	8018c78 <SPI_WaitFlagStateUntilTimeout>
 8018da8:	2800      	cmp	r0, #0
 8018daa:	d0ee      	beq.n	8018d8a <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018dac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8018dae:	f043 0320 	orr.w	r3, r3, #32
 8018db2:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8018db4:	2003      	movs	r0, #3
 8018db6:	e7e8      	b.n	8018d8a <SPI_EndRxTxTransaction+0x4a>
 8018db8:	20000018 	.word	0x20000018
 8018dbc:	165e9f81 	.word	0x165e9f81

08018dc0 <SPI_EndRxTransaction>:
{
 8018dc0:	b510      	push	{r4, lr}
 8018dc2:	b082      	sub	sp, #8
 8018dc4:	4604      	mov	r4, r0
 8018dc6:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018dc8:	6841      	ldr	r1, [r0, #4]
 8018dca:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8018dce:	d014      	beq.n	8018dfa <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8018dd0:	6861      	ldr	r1, [r4, #4]
 8018dd2:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8018dd6:	d12a      	bne.n	8018e2e <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8018dd8:	68a1      	ldr	r1, [r4, #8]
 8018dda:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8018dde:	d019      	beq.n	8018e14 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8018de0:	9200      	str	r2, [sp, #0]
 8018de2:	2200      	movs	r2, #0
 8018de4:	2180      	movs	r1, #128	@ 0x80
 8018de6:	4620      	mov	r0, r4
 8018de8:	f7ff ff46 	bl	8018c78 <SPI_WaitFlagStateUntilTimeout>
 8018dec:	b330      	cbz	r0, 8018e3c <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018dee:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8018df0:	f043 0320 	orr.w	r3, r3, #32
 8018df4:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8018df6:	2003      	movs	r0, #3
 8018df8:	e020      	b.n	8018e3c <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018dfa:	6881      	ldr	r1, [r0, #8]
 8018dfc:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8018e00:	d002      	beq.n	8018e08 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8018e02:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8018e06:	d1e3      	bne.n	8018dd0 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8018e08:	6820      	ldr	r0, [r4, #0]
 8018e0a:	6801      	ldr	r1, [r0, #0]
 8018e0c:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8018e10:	6001      	str	r1, [r0, #0]
 8018e12:	e7dd      	b.n	8018dd0 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8018e14:	9200      	str	r2, [sp, #0]
 8018e16:	2200      	movs	r2, #0
 8018e18:	2101      	movs	r1, #1
 8018e1a:	4620      	mov	r0, r4
 8018e1c:	f7ff ff2c 	bl	8018c78 <SPI_WaitFlagStateUntilTimeout>
 8018e20:	b160      	cbz	r0, 8018e3c <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018e22:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8018e24:	f043 0320 	orr.w	r3, r3, #32
 8018e28:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8018e2a:	2003      	movs	r0, #3
 8018e2c:	e006      	b.n	8018e3c <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8018e2e:	9200      	str	r2, [sp, #0]
 8018e30:	2200      	movs	r2, #0
 8018e32:	2101      	movs	r1, #1
 8018e34:	4620      	mov	r0, r4
 8018e36:	f7ff ff1f 	bl	8018c78 <SPI_WaitFlagStateUntilTimeout>
 8018e3a:	b908      	cbnz	r0, 8018e40 <SPI_EndRxTransaction+0x80>
}
 8018e3c:	b002      	add	sp, #8
 8018e3e:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018e40:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8018e42:	f043 0320 	orr.w	r3, r3, #32
 8018e46:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8018e48:	2003      	movs	r0, #3
 8018e4a:	e7f7      	b.n	8018e3c <SPI_EndRxTransaction+0x7c>

08018e4c <HAL_SPI_Init>:
  if (hspi == NULL)
 8018e4c:	2800      	cmp	r0, #0
 8018e4e:	d05a      	beq.n	8018f06 <HAL_SPI_Init+0xba>
{
 8018e50:	b510      	push	{r4, lr}
 8018e52:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8018e54:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018e56:	b933      	cbnz	r3, 8018e66 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8018e58:	6843      	ldr	r3, [r0, #4]
 8018e5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018e5e:	d005      	beq.n	8018e6c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8018e60:	2300      	movs	r3, #0
 8018e62:	61c3      	str	r3, [r0, #28]
 8018e64:	e002      	b.n	8018e6c <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8018e66:	2300      	movs	r3, #0
 8018e68:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8018e6a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8018e6c:	2300      	movs	r3, #0
 8018e6e:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8018e70:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d040      	beq.n	8018efa <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8018e78:	2302      	movs	r3, #2
 8018e7a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8018e7e:	6822      	ldr	r2, [r4, #0]
 8018e80:	6813      	ldr	r3, [r2, #0]
 8018e82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018e86:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8018e88:	6863      	ldr	r3, [r4, #4]
 8018e8a:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8018e8e:	68a2      	ldr	r2, [r4, #8]
 8018e90:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8018e94:	4313      	orrs	r3, r2
 8018e96:	68e2      	ldr	r2, [r4, #12]
 8018e98:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8018e9c:	4313      	orrs	r3, r2
 8018e9e:	6922      	ldr	r2, [r4, #16]
 8018ea0:	f002 0202 	and.w	r2, r2, #2
 8018ea4:	4313      	orrs	r3, r2
 8018ea6:	6962      	ldr	r2, [r4, #20]
 8018ea8:	f002 0201 	and.w	r2, r2, #1
 8018eac:	4313      	orrs	r3, r2
 8018eae:	69a2      	ldr	r2, [r4, #24]
 8018eb0:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8018eb4:	4313      	orrs	r3, r2
 8018eb6:	69e2      	ldr	r2, [r4, #28]
 8018eb8:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8018ebc:	4313      	orrs	r3, r2
 8018ebe:	6a22      	ldr	r2, [r4, #32]
 8018ec0:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8018ec4:	4313      	orrs	r3, r2
 8018ec6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8018ec8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8018ecc:	6821      	ldr	r1, [r4, #0]
 8018ece:	4313      	orrs	r3, r2
 8018ed0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8018ed2:	8b63      	ldrh	r3, [r4, #26]
 8018ed4:	f003 0304 	and.w	r3, r3, #4
 8018ed8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8018eda:	f002 0210 	and.w	r2, r2, #16
 8018ede:	6821      	ldr	r1, [r4, #0]
 8018ee0:	4313      	orrs	r3, r2
 8018ee2:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8018ee4:	6822      	ldr	r2, [r4, #0]
 8018ee6:	69d3      	ldr	r3, [r2, #28]
 8018ee8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8018eec:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8018eee:	2000      	movs	r0, #0
 8018ef0:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8018ef2:	2301      	movs	r3, #1
 8018ef4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8018ef8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8018efa:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8018efe:	4620      	mov	r0, r4
 8018f00:	f7f9 fcc2 	bl	8012888 <HAL_SPI_MspInit>
 8018f04:	e7b8      	b.n	8018e78 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8018f06:	2001      	movs	r0, #1
}
 8018f08:	4770      	bx	lr

08018f0a <HAL_SPI_Transmit>:
{
 8018f0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018f0e:	b083      	sub	sp, #12
 8018f10:	4604      	mov	r4, r0
 8018f12:	4689      	mov	r9, r1
 8018f14:	4690      	mov	r8, r2
 8018f16:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 8018f18:	f7fd ffea 	bl	8016ef0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8018f1c:	f894 6051 	ldrb.w	r6, [r4, #81]	@ 0x51
 8018f20:	b2f6      	uxtb	r6, r6
 8018f22:	2e01      	cmp	r6, #1
 8018f24:	f040 80cc 	bne.w	80190c0 <HAL_SPI_Transmit+0x1b6>
 8018f28:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8018f2a:	f1b9 0f00 	cmp.w	r9, #0
 8018f2e:	f000 80c8 	beq.w	80190c2 <HAL_SPI_Transmit+0x1b8>
 8018f32:	f1b8 0f00 	cmp.w	r8, #0
 8018f36:	f000 80c4 	beq.w	80190c2 <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 8018f3a:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8018f3e:	2b01      	cmp	r3, #1
 8018f40:	f000 80c3 	beq.w	80190ca <HAL_SPI_Transmit+0x1c0>
 8018f44:	2301      	movs	r3, #1
 8018f46:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8018f4a:	2303      	movs	r3, #3
 8018f4c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8018f50:	2300      	movs	r3, #0
 8018f52:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8018f54:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8018f58:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8018f5c:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8018f60:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8018f62:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8018f64:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8018f66:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8018f68:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018f6a:	68a3      	ldr	r3, [r4, #8]
 8018f6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018f70:	d01e      	beq.n	8018fb0 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8018f72:	6823      	ldr	r3, [r4, #0]
 8018f74:	681a      	ldr	r2, [r3, #0]
 8018f76:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8018f7a:	d103      	bne.n	8018f84 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8018f7c:	681a      	ldr	r2, [r3, #0]
 8018f7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8018f82:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8018f84:	68e3      	ldr	r3, [r4, #12]
 8018f86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8018f8a:	d01c      	beq.n	8018fc6 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8018f8c:	6863      	ldr	r3, [r4, #4]
 8018f8e:	b113      	cbz	r3, 8018f96 <HAL_SPI_Transmit+0x8c>
 8018f90:	f1b8 0f01 	cmp.w	r8, #1
 8018f94:	d15f      	bne.n	8019056 <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8018f96:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018f98:	6823      	ldr	r3, [r4, #0]
 8018f9a:	7812      	ldrb	r2, [r2, #0]
 8018f9c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8018f9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018fa0:	3301      	adds	r3, #1
 8018fa2:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8018fa4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018fa6:	b29b      	uxth	r3, r3
 8018fa8:	3b01      	subs	r3, #1
 8018faa:	b29b      	uxth	r3, r3
 8018fac:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8018fae:	e052      	b.n	8019056 <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 8018fb0:	6822      	ldr	r2, [r4, #0]
 8018fb2:	6813      	ldr	r3, [r2, #0]
 8018fb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018fb8:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8018fba:	6822      	ldr	r2, [r4, #0]
 8018fbc:	6813      	ldr	r3, [r2, #0]
 8018fbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8018fc2:	6013      	str	r3, [r2, #0]
 8018fc4:	e7d5      	b.n	8018f72 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8018fc6:	6863      	ldr	r3, [r4, #4]
 8018fc8:	b113      	cbz	r3, 8018fd0 <HAL_SPI_Transmit+0xc6>
 8018fca:	f1b8 0f01 	cmp.w	r8, #1
 8018fce:	d115      	bne.n	8018ffc <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8018fd0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018fd2:	6823      	ldr	r3, [r4, #0]
 8018fd4:	8812      	ldrh	r2, [r2, #0]
 8018fd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8018fd8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018fda:	3302      	adds	r3, #2
 8018fdc:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8018fde:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018fe0:	b29b      	uxth	r3, r3
 8018fe2:	3b01      	subs	r3, #1
 8018fe4:	b29b      	uxth	r3, r3
 8018fe6:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8018fe8:	e008      	b.n	8018ffc <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8018fea:	f7fd ff81 	bl	8016ef0 <HAL_GetTick>
 8018fee:	1bc0      	subs	r0, r0, r7
 8018ff0:	42a8      	cmp	r0, r5
 8018ff2:	d302      	bcc.n	8018ffa <HAL_SPI_Transmit+0xf0>
 8018ff4:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8018ff8:	d115      	bne.n	8019026 <HAL_SPI_Transmit+0x11c>
 8018ffa:	b1a5      	cbz	r5, 8019026 <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 8018ffc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018ffe:	b29b      	uxth	r3, r3
 8019000:	2b00      	cmp	r3, #0
 8019002:	d042      	beq.n	801908a <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8019004:	6823      	ldr	r3, [r4, #0]
 8019006:	689a      	ldr	r2, [r3, #8]
 8019008:	f012 0f02 	tst.w	r2, #2
 801900c:	d0ed      	beq.n	8018fea <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801900e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019010:	8812      	ldrh	r2, [r2, #0]
 8019012:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8019014:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019016:	3302      	adds	r3, #2
 8019018:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 801901a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801901c:	b29b      	uxth	r3, r3
 801901e:	3b01      	subs	r3, #1
 8019020:	b29b      	uxth	r3, r3
 8019022:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8019024:	e7ea      	b.n	8018ffc <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 8019026:	2301      	movs	r3, #1
 8019028:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801902c:	2300      	movs	r3, #0
 801902e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8019032:	2603      	movs	r6, #3
 8019034:	e045      	b.n	80190c2 <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8019036:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019038:	7812      	ldrb	r2, [r2, #0]
 801903a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801903c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801903e:	3301      	adds	r3, #1
 8019040:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8019042:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 8019046:	fa1f fc8c 	uxth.w	ip, ip
 801904a:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801904e:	fa1f fc8c 	uxth.w	ip, ip
 8019052:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8019056:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8019058:	b29b      	uxth	r3, r3
 801905a:	b1b3      	cbz	r3, 801908a <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801905c:	6823      	ldr	r3, [r4, #0]
 801905e:	689a      	ldr	r2, [r3, #8]
 8019060:	f012 0f02 	tst.w	r2, #2
 8019064:	d1e7      	bne.n	8019036 <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8019066:	f7fd ff43 	bl	8016ef0 <HAL_GetTick>
 801906a:	1bc0      	subs	r0, r0, r7
 801906c:	42a8      	cmp	r0, r5
 801906e:	d302      	bcc.n	8019076 <HAL_SPI_Transmit+0x16c>
 8019070:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8019074:	d101      	bne.n	801907a <HAL_SPI_Transmit+0x170>
 8019076:	2d00      	cmp	r5, #0
 8019078:	d1ed      	bne.n	8019056 <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 801907a:	2301      	movs	r3, #1
 801907c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8019080:	2300      	movs	r3, #0
 8019082:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8019086:	2603      	movs	r6, #3
 8019088:	e01b      	b.n	80190c2 <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801908a:	463a      	mov	r2, r7
 801908c:	4629      	mov	r1, r5
 801908e:	4620      	mov	r0, r4
 8019090:	f7ff fe56 	bl	8018d40 <SPI_EndRxTxTransaction>
 8019094:	b108      	cbz	r0, 801909a <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8019096:	2320      	movs	r3, #32
 8019098:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801909a:	68a3      	ldr	r3, [r4, #8]
 801909c:	b933      	cbnz	r3, 80190ac <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801909e:	9301      	str	r3, [sp, #4]
 80190a0:	6823      	ldr	r3, [r4, #0]
 80190a2:	68da      	ldr	r2, [r3, #12]
 80190a4:	9201      	str	r2, [sp, #4]
 80190a6:	689b      	ldr	r3, [r3, #8]
 80190a8:	9301      	str	r3, [sp, #4]
 80190aa:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80190ac:	2301      	movs	r3, #1
 80190ae:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80190b2:	2300      	movs	r3, #0
 80190b4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80190b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80190ba:	b913      	cbnz	r3, 80190c2 <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 80190bc:	2600      	movs	r6, #0
 80190be:	e000      	b.n	80190c2 <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 80190c0:	2602      	movs	r6, #2
}
 80190c2:	4630      	mov	r0, r6
 80190c4:	b003      	add	sp, #12
 80190c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80190ca:	2602      	movs	r6, #2
 80190cc:	e7f9      	b.n	80190c2 <HAL_SPI_Transmit+0x1b8>

080190ce <HAL_SPI_TransmitReceive>:
{
 80190ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80190d2:	b083      	sub	sp, #12
 80190d4:	4604      	mov	r4, r0
 80190d6:	4688      	mov	r8, r1
 80190d8:	4691      	mov	r9, r2
 80190da:	461f      	mov	r7, r3
 80190dc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 80190de:	f7fd ff07 	bl	8016ef0 <HAL_GetTick>
 80190e2:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80190e4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80190e8:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80190ea:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80190ec:	2b01      	cmp	r3, #1
 80190ee:	d00a      	beq.n	8019106 <HAL_SPI_TransmitReceive+0x38>
 80190f0:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80190f4:	f040 8105 	bne.w	8019302 <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80190f8:	68a2      	ldr	r2, [r4, #8]
 80190fa:	2a00      	cmp	r2, #0
 80190fc:	f040 8105 	bne.w	801930a <HAL_SPI_TransmitReceive+0x23c>
 8019100:	2b04      	cmp	r3, #4
 8019102:	f040 8104 	bne.w	801930e <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8019106:	f1b8 0f00 	cmp.w	r8, #0
 801910a:	f000 8102 	beq.w	8019312 <HAL_SPI_TransmitReceive+0x244>
 801910e:	f1b9 0f00 	cmp.w	r9, #0
 8019112:	f000 8100 	beq.w	8019316 <HAL_SPI_TransmitReceive+0x248>
 8019116:	2f00      	cmp	r7, #0
 8019118:	f000 80ff 	beq.w	801931a <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 801911c:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8019120:	2b01      	cmp	r3, #1
 8019122:	f000 80fc 	beq.w	801931e <HAL_SPI_TransmitReceive+0x250>
 8019126:	2301      	movs	r3, #1
 8019128:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801912c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8019130:	b2db      	uxtb	r3, r3
 8019132:	2b04      	cmp	r3, #4
 8019134:	d002      	beq.n	801913c <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8019136:	2305      	movs	r3, #5
 8019138:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801913c:	2300      	movs	r3, #0
 801913e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8019140:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8019144:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8019146:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8019148:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 801914c:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 801914e:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8019150:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8019152:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8019154:	6823      	ldr	r3, [r4, #0]
 8019156:	681a      	ldr	r2, [r3, #0]
 8019158:	f012 0f40 	tst.w	r2, #64	@ 0x40
 801915c:	d103      	bne.n	8019166 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 801915e:	681a      	ldr	r2, [r3, #0]
 8019160:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8019164:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8019166:	68e3      	ldr	r3, [r4, #12]
 8019168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801916c:	d011      	beq.n	8019192 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801916e:	6863      	ldr	r3, [r4, #4]
 8019170:	b10b      	cbz	r3, 8019176 <HAL_SPI_TransmitReceive+0xa8>
 8019172:	2f01      	cmp	r7, #1
 8019174:	d10b      	bne.n	801918e <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8019176:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019178:	6823      	ldr	r3, [r4, #0]
 801917a:	7812      	ldrb	r2, [r2, #0]
 801917c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801917e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019180:	3301      	adds	r3, #1
 8019182:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8019184:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8019186:	b29b      	uxth	r3, r3
 8019188:	3b01      	subs	r3, #1
 801918a:	b29b      	uxth	r3, r3
 801918c:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 801918e:	2701      	movs	r7, #1
 8019190:	e071      	b.n	8019276 <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8019192:	6863      	ldr	r3, [r4, #4]
 8019194:	b10b      	cbz	r3, 801919a <HAL_SPI_TransmitReceive+0xcc>
 8019196:	2f01      	cmp	r7, #1
 8019198:	d10b      	bne.n	80191b2 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801919a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801919c:	6823      	ldr	r3, [r4, #0]
 801919e:	8812      	ldrh	r2, [r2, #0]
 80191a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80191a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80191a4:	3302      	adds	r3, #2
 80191a6:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80191a8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80191aa:	b29b      	uxth	r3, r3
 80191ac:	3b01      	subs	r3, #1
 80191ae:	b29b      	uxth	r3, r3
 80191b0:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80191b2:	2701      	movs	r7, #1
 80191b4:	e01b      	b.n	80191ee <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80191b6:	6823      	ldr	r3, [r4, #0]
 80191b8:	689a      	ldr	r2, [r3, #8]
 80191ba:	f012 0f01 	tst.w	r2, #1
 80191be:	d00e      	beq.n	80191de <HAL_SPI_TransmitReceive+0x110>
 80191c0:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80191c2:	b292      	uxth	r2, r2
 80191c4:	b15a      	cbz	r2, 80191de <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80191c6:	68da      	ldr	r2, [r3, #12]
 80191c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80191ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80191cc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80191ce:	3302      	adds	r3, #2
 80191d0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80191d2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80191d4:	b29b      	uxth	r3, r3
 80191d6:	3b01      	subs	r3, #1
 80191d8:	b29b      	uxth	r3, r3
 80191da:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80191dc:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80191de:	f7fd fe87 	bl	8016ef0 <HAL_GetTick>
 80191e2:	1b80      	subs	r0, r0, r6
 80191e4:	42a8      	cmp	r0, r5
 80191e6:	d302      	bcc.n	80191ee <HAL_SPI_TransmitReceive+0x120>
 80191e8:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80191ec:	d11e      	bne.n	801922c <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80191ee:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80191f0:	b29b      	uxth	r3, r3
 80191f2:	b91b      	cbnz	r3, 80191fc <HAL_SPI_TransmitReceive+0x12e>
 80191f4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80191f6:	b29b      	uxth	r3, r3
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d062      	beq.n	80192c2 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80191fc:	6823      	ldr	r3, [r4, #0]
 80191fe:	689a      	ldr	r2, [r3, #8]
 8019200:	f012 0f02 	tst.w	r2, #2
 8019204:	d0d7      	beq.n	80191b6 <HAL_SPI_TransmitReceive+0xe8>
 8019206:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8019208:	b292      	uxth	r2, r2
 801920a:	2a00      	cmp	r2, #0
 801920c:	d0d3      	beq.n	80191b6 <HAL_SPI_TransmitReceive+0xe8>
 801920e:	2f00      	cmp	r7, #0
 8019210:	d0d1      	beq.n	80191b6 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8019212:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019214:	8812      	ldrh	r2, [r2, #0]
 8019216:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8019218:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801921a:	3302      	adds	r3, #2
 801921c:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 801921e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8019220:	b29b      	uxth	r3, r3
 8019222:	3b01      	subs	r3, #1
 8019224:	b29b      	uxth	r3, r3
 8019226:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8019228:	2700      	movs	r7, #0
 801922a:	e7c4      	b.n	80191b6 <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 801922c:	2301      	movs	r3, #1
 801922e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8019232:	2300      	movs	r3, #0
 8019234:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8019238:	2003      	movs	r0, #3
 801923a:	e063      	b.n	8019304 <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801923c:	6823      	ldr	r3, [r4, #0]
 801923e:	689a      	ldr	r2, [r3, #8]
 8019240:	f012 0f01 	tst.w	r2, #1
 8019244:	d00e      	beq.n	8019264 <HAL_SPI_TransmitReceive+0x196>
 8019246:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8019248:	b292      	uxth	r2, r2
 801924a:	b15a      	cbz	r2, 8019264 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801924c:	68da      	ldr	r2, [r3, #12]
 801924e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8019250:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8019252:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8019254:	3301      	adds	r3, #1
 8019256:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8019258:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801925a:	b29b      	uxth	r3, r3
 801925c:	3b01      	subs	r3, #1
 801925e:	b29b      	uxth	r3, r3
 8019260:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8019262:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8019264:	f7fd fe44 	bl	8016ef0 <HAL_GetTick>
 8019268:	1b83      	subs	r3, r0, r6
 801926a:	42ab      	cmp	r3, r5
 801926c:	d302      	bcc.n	8019274 <HAL_SPI_TransmitReceive+0x1a6>
 801926e:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8019272:	d11e      	bne.n	80192b2 <HAL_SPI_TransmitReceive+0x1e4>
 8019274:	b1ed      	cbz	r5, 80192b2 <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8019276:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8019278:	b29b      	uxth	r3, r3
 801927a:	b913      	cbnz	r3, 8019282 <HAL_SPI_TransmitReceive+0x1b4>
 801927c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801927e:	b29b      	uxth	r3, r3
 8019280:	b1fb      	cbz	r3, 80192c2 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8019282:	6823      	ldr	r3, [r4, #0]
 8019284:	689a      	ldr	r2, [r3, #8]
 8019286:	f012 0f02 	tst.w	r2, #2
 801928a:	d0d7      	beq.n	801923c <HAL_SPI_TransmitReceive+0x16e>
 801928c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801928e:	b292      	uxth	r2, r2
 8019290:	2a00      	cmp	r2, #0
 8019292:	d0d3      	beq.n	801923c <HAL_SPI_TransmitReceive+0x16e>
 8019294:	2f00      	cmp	r7, #0
 8019296:	d0d1      	beq.n	801923c <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8019298:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801929a:	7812      	ldrb	r2, [r2, #0]
 801929c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 801929e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80192a0:	3301      	adds	r3, #1
 80192a2:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80192a4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80192a6:	b29b      	uxth	r3, r3
 80192a8:	3b01      	subs	r3, #1
 80192aa:	b29b      	uxth	r3, r3
 80192ac:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80192ae:	2700      	movs	r7, #0
 80192b0:	e7c4      	b.n	801923c <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 80192b2:	2301      	movs	r3, #1
 80192b4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80192b8:	2300      	movs	r3, #0
 80192ba:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 80192be:	2003      	movs	r0, #3
 80192c0:	e020      	b.n	8019304 <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80192c2:	4632      	mov	r2, r6
 80192c4:	4629      	mov	r1, r5
 80192c6:	4620      	mov	r0, r4
 80192c8:	f7ff fd3a 	bl	8018d40 <SPI_EndRxTxTransaction>
 80192cc:	b990      	cbnz	r0, 80192f4 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80192ce:	68a3      	ldr	r3, [r4, #8]
 80192d0:	b933      	cbnz	r3, 80192e0 <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80192d2:	9301      	str	r3, [sp, #4]
 80192d4:	6823      	ldr	r3, [r4, #0]
 80192d6:	68da      	ldr	r2, [r3, #12]
 80192d8:	9201      	str	r2, [sp, #4]
 80192da:	689b      	ldr	r3, [r3, #8]
 80192dc:	9301      	str	r3, [sp, #4]
 80192de:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80192e0:	2301      	movs	r3, #1
 80192e2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80192e6:	2300      	movs	r3, #0
 80192e8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80192ec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80192ee:	b14b      	cbz	r3, 8019304 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 80192f0:	2001      	movs	r0, #1
 80192f2:	e007      	b.n	8019304 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80192f4:	2320      	movs	r3, #32
 80192f6:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80192f8:	2300      	movs	r3, #0
 80192fa:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80192fe:	2001      	movs	r0, #1
 8019300:	e000      	b.n	8019304 <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 8019302:	2002      	movs	r0, #2
}
 8019304:	b003      	add	sp, #12
 8019306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 801930a:	2002      	movs	r0, #2
 801930c:	e7fa      	b.n	8019304 <HAL_SPI_TransmitReceive+0x236>
 801930e:	2002      	movs	r0, #2
 8019310:	e7f8      	b.n	8019304 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8019312:	2001      	movs	r0, #1
 8019314:	e7f6      	b.n	8019304 <HAL_SPI_TransmitReceive+0x236>
 8019316:	2001      	movs	r0, #1
 8019318:	e7f4      	b.n	8019304 <HAL_SPI_TransmitReceive+0x236>
 801931a:	2001      	movs	r0, #1
 801931c:	e7f2      	b.n	8019304 <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 801931e:	2002      	movs	r0, #2
 8019320:	e7f0      	b.n	8019304 <HAL_SPI_TransmitReceive+0x236>

08019322 <HAL_SPI_Receive>:
{
 8019322:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019326:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 8019328:	f890 6051 	ldrb.w	r6, [r0, #81]	@ 0x51
 801932c:	b2f6      	uxtb	r6, r6
 801932e:	2e01      	cmp	r6, #1
 8019330:	f040 80b4 	bne.w	801949c <HAL_SPI_Receive+0x17a>
 8019334:	4604      	mov	r4, r0
 8019336:	4689      	mov	r9, r1
 8019338:	4690      	mov	r8, r2
 801933a:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801933c:	6843      	ldr	r3, [r0, #4]
 801933e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8019342:	d101      	bne.n	8019348 <HAL_SPI_Receive+0x26>
 8019344:	6883      	ldr	r3, [r0, #8]
 8019346:	b393      	cbz	r3, 80193ae <HAL_SPI_Receive+0x8c>
  tickstart = HAL_GetTick();
 8019348:	f7fd fdd2 	bl	8016ef0 <HAL_GetTick>
 801934c:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 801934e:	f1b9 0f00 	cmp.w	r9, #0
 8019352:	f000 80a4 	beq.w	801949e <HAL_SPI_Receive+0x17c>
 8019356:	f1b8 0f00 	cmp.w	r8, #0
 801935a:	f000 80a0 	beq.w	801949e <HAL_SPI_Receive+0x17c>
  __HAL_LOCK(hspi);
 801935e:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8019362:	2b01      	cmp	r3, #1
 8019364:	f000 809f 	beq.w	80194a6 <HAL_SPI_Receive+0x184>
 8019368:	2301      	movs	r3, #1
 801936a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801936e:	2304      	movs	r3, #4
 8019370:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8019374:	2300      	movs	r3, #0
 8019376:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8019378:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 801937c:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8019380:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8019384:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8019386:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8019388:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 801938a:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 801938c:	6463      	str	r3, [r4, #68]	@ 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801938e:	68a3      	ldr	r3, [r4, #8]
 8019390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019394:	d015      	beq.n	80193c2 <HAL_SPI_Receive+0xa0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8019396:	6823      	ldr	r3, [r4, #0]
 8019398:	681a      	ldr	r2, [r3, #0]
 801939a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 801939e:	d103      	bne.n	80193a8 <HAL_SPI_Receive+0x86>
    __HAL_SPI_ENABLE(hspi);
 80193a0:	681a      	ldr	r2, [r3, #0]
 80193a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80193a6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80193a8:	68e3      	ldr	r3, [r4, #12]
 80193aa:	b1f3      	cbz	r3, 80193ea <HAL_SPI_Receive+0xc8>
 80193ac:	e043      	b.n	8019436 <HAL_SPI_Receive+0x114>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80193ae:	2304      	movs	r3, #4
 80193b0:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80193b4:	9500      	str	r5, [sp, #0]
 80193b6:	4613      	mov	r3, r2
 80193b8:	460a      	mov	r2, r1
 80193ba:	f7ff fe88 	bl	80190ce <HAL_SPI_TransmitReceive>
 80193be:	4606      	mov	r6, r0
 80193c0:	e06d      	b.n	801949e <HAL_SPI_Receive+0x17c>
    __HAL_SPI_DISABLE(hspi);
 80193c2:	6822      	ldr	r2, [r4, #0]
 80193c4:	6813      	ldr	r3, [r2, #0]
 80193c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80193ca:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80193cc:	6822      	ldr	r2, [r4, #0]
 80193ce:	6813      	ldr	r3, [r2, #0]
 80193d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80193d4:	6013      	str	r3, [r2, #0]
 80193d6:	e7de      	b.n	8019396 <HAL_SPI_Receive+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80193d8:	f7fd fd8a 	bl	8016ef0 <HAL_GetTick>
 80193dc:	1bc0      	subs	r0, r0, r7
 80193de:	42a8      	cmp	r0, r5
 80193e0:	d302      	bcc.n	80193e8 <HAL_SPI_Receive+0xc6>
 80193e2:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80193e6:	d115      	bne.n	8019414 <HAL_SPI_Receive+0xf2>
 80193e8:	b1a5      	cbz	r5, 8019414 <HAL_SPI_Receive+0xf2>
    while (hspi->RxXferCount > 0U)
 80193ea:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80193ec:	b29b      	uxth	r3, r3
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d042      	beq.n	8019478 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80193f2:	6823      	ldr	r3, [r4, #0]
 80193f4:	689a      	ldr	r2, [r3, #8]
 80193f6:	f012 0f01 	tst.w	r2, #1
 80193fa:	d0ed      	beq.n	80193d8 <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80193fc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80193fe:	7b1b      	ldrb	r3, [r3, #12]
 8019400:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8019402:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8019404:	3301      	adds	r3, #1
 8019406:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8019408:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801940a:	b29b      	uxth	r3, r3
 801940c:	3b01      	subs	r3, #1
 801940e:	b29b      	uxth	r3, r3
 8019410:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8019412:	e7ea      	b.n	80193ea <HAL_SPI_Receive+0xc8>
          hspi->State = HAL_SPI_STATE_READY;
 8019414:	2301      	movs	r3, #1
 8019416:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801941a:	2300      	movs	r3, #0
 801941c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8019420:	2603      	movs	r6, #3
 8019422:	e03c      	b.n	801949e <HAL_SPI_Receive+0x17c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8019424:	f7fd fd64 	bl	8016ef0 <HAL_GetTick>
 8019428:	1bc0      	subs	r0, r0, r7
 801942a:	42a8      	cmp	r0, r5
 801942c:	d302      	bcc.n	8019434 <HAL_SPI_Receive+0x112>
 801942e:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8019432:	d119      	bne.n	8019468 <HAL_SPI_Receive+0x146>
 8019434:	b1c5      	cbz	r5, 8019468 <HAL_SPI_Receive+0x146>
    while (hspi->RxXferCount > 0U)
 8019436:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8019438:	b29b      	uxth	r3, r3
 801943a:	b1eb      	cbz	r3, 8019478 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801943c:	6823      	ldr	r3, [r4, #0]
 801943e:	689a      	ldr	r2, [r3, #8]
 8019440:	f012 0f01 	tst.w	r2, #1
 8019444:	d0ee      	beq.n	8019424 <HAL_SPI_Receive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8019446:	68da      	ldr	r2, [r3, #12]
 8019448:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801944a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801944c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801944e:	3302      	adds	r3, #2
 8019450:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8019452:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 8019456:	fa1f fc8c 	uxth.w	ip, ip
 801945a:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801945e:	fa1f fc8c 	uxth.w	ip, ip
 8019462:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8019466:	e7e6      	b.n	8019436 <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 8019468:	2301      	movs	r3, #1
 801946a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801946e:	2300      	movs	r3, #0
 8019470:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8019474:	2603      	movs	r6, #3
 8019476:	e012      	b.n	801949e <HAL_SPI_Receive+0x17c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8019478:	463a      	mov	r2, r7
 801947a:	4629      	mov	r1, r5
 801947c:	4620      	mov	r0, r4
 801947e:	f7ff fc9f 	bl	8018dc0 <SPI_EndRxTransaction>
 8019482:	b108      	cbz	r0, 8019488 <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8019484:	2320      	movs	r3, #32
 8019486:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8019488:	2301      	movs	r3, #1
 801948a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 801948e:	2300      	movs	r3, #0
 8019490:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8019494:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8019496:	b913      	cbnz	r3, 801949e <HAL_SPI_Receive+0x17c>
    return HAL_OK;
 8019498:	2600      	movs	r6, #0
 801949a:	e000      	b.n	801949e <HAL_SPI_Receive+0x17c>
    return HAL_BUSY;
 801949c:	2602      	movs	r6, #2
}
 801949e:	4630      	mov	r0, r6
 80194a0:	b003      	add	sp, #12
 80194a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80194a6:	2602      	movs	r6, #2
 80194a8:	e7f9      	b.n	801949e <HAL_SPI_Receive+0x17c>

080194aa <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80194aa:	4770      	bx	lr

080194ac <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80194ac:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80194b0:	b2db      	uxtb	r3, r3
 80194b2:	2b01      	cmp	r3, #1
 80194b4:	d12f      	bne.n	8019516 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80194b6:	2302      	movs	r3, #2
 80194b8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80194bc:	6802      	ldr	r2, [r0, #0]
 80194be:	68d3      	ldr	r3, [r2, #12]
 80194c0:	f043 0301 	orr.w	r3, r3, #1
 80194c4:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80194c6:	6803      	ldr	r3, [r0, #0]
 80194c8:	4a15      	ldr	r2, [pc, #84]	@ (8019520 <HAL_TIM_Base_Start_IT+0x74>)
 80194ca:	4293      	cmp	r3, r2
 80194cc:	d018      	beq.n	8019500 <HAL_TIM_Base_Start_IT+0x54>
 80194ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80194d2:	d015      	beq.n	8019500 <HAL_TIM_Base_Start_IT+0x54>
 80194d4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80194d8:	4293      	cmp	r3, r2
 80194da:	d011      	beq.n	8019500 <HAL_TIM_Base_Start_IT+0x54>
 80194dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80194e0:	4293      	cmp	r3, r2
 80194e2:	d00d      	beq.n	8019500 <HAL_TIM_Base_Start_IT+0x54>
 80194e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80194e8:	4293      	cmp	r3, r2
 80194ea:	d009      	beq.n	8019500 <HAL_TIM_Base_Start_IT+0x54>
 80194ec:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80194f0:	4293      	cmp	r3, r2
 80194f2:	d005      	beq.n	8019500 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80194f4:	681a      	ldr	r2, [r3, #0]
 80194f6:	f042 0201 	orr.w	r2, r2, #1
 80194fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80194fc:	2000      	movs	r0, #0
 80194fe:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019500:	689a      	ldr	r2, [r3, #8]
 8019502:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019506:	2a06      	cmp	r2, #6
 8019508:	d007      	beq.n	801951a <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 801950a:	681a      	ldr	r2, [r3, #0]
 801950c:	f042 0201 	orr.w	r2, r2, #1
 8019510:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8019512:	2000      	movs	r0, #0
 8019514:	4770      	bx	lr
    return HAL_ERROR;
 8019516:	2001      	movs	r0, #1
 8019518:	4770      	bx	lr
  return HAL_OK;
 801951a:	2000      	movs	r0, #0
}
 801951c:	4770      	bx	lr
 801951e:	bf00      	nop
 8019520:	40010000 	.word	0x40010000

08019524 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8019524:	4770      	bx	lr

08019526 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8019526:	4770      	bx	lr

08019528 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8019528:	4770      	bx	lr

0801952a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801952a:	4770      	bx	lr

0801952c <HAL_TIM_IRQHandler>:
{
 801952c:	b570      	push	{r4, r5, r6, lr}
 801952e:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8019530:	6803      	ldr	r3, [r0, #0]
 8019532:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8019534:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8019536:	f015 0f02 	tst.w	r5, #2
 801953a:	d010      	beq.n	801955e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801953c:	f016 0f02 	tst.w	r6, #2
 8019540:	d00d      	beq.n	801955e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8019542:	f06f 0202 	mvn.w	r2, #2
 8019546:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8019548:	2301      	movs	r3, #1
 801954a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801954c:	6803      	ldr	r3, [r0, #0]
 801954e:	699b      	ldr	r3, [r3, #24]
 8019550:	f013 0f03 	tst.w	r3, #3
 8019554:	d05e      	beq.n	8019614 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8019556:	f7ff ffe6 	bl	8019526 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801955a:	2300      	movs	r3, #0
 801955c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801955e:	f015 0f04 	tst.w	r5, #4
 8019562:	d012      	beq.n	801958a <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8019564:	f016 0f04 	tst.w	r6, #4
 8019568:	d00f      	beq.n	801958a <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801956a:	6823      	ldr	r3, [r4, #0]
 801956c:	f06f 0204 	mvn.w	r2, #4
 8019570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8019572:	2302      	movs	r3, #2
 8019574:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8019576:	6823      	ldr	r3, [r4, #0]
 8019578:	699b      	ldr	r3, [r3, #24]
 801957a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 801957e:	d04f      	beq.n	8019620 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8019580:	4620      	mov	r0, r4
 8019582:	f7ff ffd0 	bl	8019526 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019586:	2300      	movs	r3, #0
 8019588:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801958a:	f015 0f08 	tst.w	r5, #8
 801958e:	d012      	beq.n	80195b6 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8019590:	f016 0f08 	tst.w	r6, #8
 8019594:	d00f      	beq.n	80195b6 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8019596:	6823      	ldr	r3, [r4, #0]
 8019598:	f06f 0208 	mvn.w	r2, #8
 801959c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801959e:	2304      	movs	r3, #4
 80195a0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80195a2:	6823      	ldr	r3, [r4, #0]
 80195a4:	69db      	ldr	r3, [r3, #28]
 80195a6:	f013 0f03 	tst.w	r3, #3
 80195aa:	d040      	beq.n	801962e <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80195ac:	4620      	mov	r0, r4
 80195ae:	f7ff ffba 	bl	8019526 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80195b2:	2300      	movs	r3, #0
 80195b4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80195b6:	f015 0f10 	tst.w	r5, #16
 80195ba:	d012      	beq.n	80195e2 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80195bc:	f016 0f10 	tst.w	r6, #16
 80195c0:	d00f      	beq.n	80195e2 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80195c2:	6823      	ldr	r3, [r4, #0]
 80195c4:	f06f 0210 	mvn.w	r2, #16
 80195c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80195ca:	2308      	movs	r3, #8
 80195cc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80195ce:	6823      	ldr	r3, [r4, #0]
 80195d0:	69db      	ldr	r3, [r3, #28]
 80195d2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80195d6:	d031      	beq.n	801963c <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 80195d8:	4620      	mov	r0, r4
 80195da:	f7ff ffa4 	bl	8019526 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80195de:	2300      	movs	r3, #0
 80195e0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80195e2:	f015 0f01 	tst.w	r5, #1
 80195e6:	d002      	beq.n	80195ee <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80195e8:	f016 0f01 	tst.w	r6, #1
 80195ec:	d12d      	bne.n	801964a <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80195ee:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80195f2:	d002      	beq.n	80195fa <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80195f4:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80195f8:	d12f      	bne.n	801965a <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80195fa:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80195fe:	d002      	beq.n	8019606 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8019600:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8019604:	d131      	bne.n	801966a <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8019606:	f015 0f20 	tst.w	r5, #32
 801960a:	d002      	beq.n	8019612 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801960c:	f016 0f20 	tst.w	r6, #32
 8019610:	d133      	bne.n	801967a <HAL_TIM_IRQHandler+0x14e>
}
 8019612:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8019614:	f7ff ff86 	bl	8019524 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019618:	4620      	mov	r0, r4
 801961a:	f7ff ff85 	bl	8019528 <HAL_TIM_PWM_PulseFinishedCallback>
 801961e:	e79c      	b.n	801955a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019620:	4620      	mov	r0, r4
 8019622:	f7ff ff7f 	bl	8019524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019626:	4620      	mov	r0, r4
 8019628:	f7ff ff7e 	bl	8019528 <HAL_TIM_PWM_PulseFinishedCallback>
 801962c:	e7ab      	b.n	8019586 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801962e:	4620      	mov	r0, r4
 8019630:	f7ff ff78 	bl	8019524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019634:	4620      	mov	r0, r4
 8019636:	f7ff ff77 	bl	8019528 <HAL_TIM_PWM_PulseFinishedCallback>
 801963a:	e7ba      	b.n	80195b2 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801963c:	4620      	mov	r0, r4
 801963e:	f7ff ff71 	bl	8019524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019642:	4620      	mov	r0, r4
 8019644:	f7ff ff70 	bl	8019528 <HAL_TIM_PWM_PulseFinishedCallback>
 8019648:	e7c9      	b.n	80195de <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801964a:	6823      	ldr	r3, [r4, #0]
 801964c:	f06f 0201 	mvn.w	r2, #1
 8019650:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8019652:	4620      	mov	r0, r4
 8019654:	f7f8 ff96 	bl	8012584 <HAL_TIM_PeriodElapsedCallback>
 8019658:	e7c9      	b.n	80195ee <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 801965a:	6823      	ldr	r3, [r4, #0]
 801965c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8019660:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8019662:	4620      	mov	r0, r4
 8019664:	f000 f895 	bl	8019792 <HAL_TIMEx_BreakCallback>
 8019668:	e7c7      	b.n	80195fa <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801966a:	6823      	ldr	r3, [r4, #0]
 801966c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8019670:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8019672:	4620      	mov	r0, r4
 8019674:	f7ff ff59 	bl	801952a <HAL_TIM_TriggerCallback>
 8019678:	e7c5      	b.n	8019606 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801967a:	6823      	ldr	r3, [r4, #0]
 801967c:	f06f 0220 	mvn.w	r2, #32
 8019680:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8019682:	4620      	mov	r0, r4
 8019684:	f000 f884 	bl	8019790 <HAL_TIMEx_CommutCallback>
}
 8019688:	e7c3      	b.n	8019612 <HAL_TIM_IRQHandler+0xe6>
	...

0801968c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801968c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801968e:	4a29      	ldr	r2, [pc, #164]	@ (8019734 <TIM_Base_SetConfig+0xa8>)
 8019690:	4290      	cmp	r0, r2
 8019692:	d00e      	beq.n	80196b2 <TIM_Base_SetConfig+0x26>
 8019694:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8019698:	d00b      	beq.n	80196b2 <TIM_Base_SetConfig+0x26>
 801969a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 801969e:	4290      	cmp	r0, r2
 80196a0:	d007      	beq.n	80196b2 <TIM_Base_SetConfig+0x26>
 80196a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80196a6:	4290      	cmp	r0, r2
 80196a8:	d003      	beq.n	80196b2 <TIM_Base_SetConfig+0x26>
 80196aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80196ae:	4290      	cmp	r0, r2
 80196b0:	d103      	bne.n	80196ba <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80196b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80196b6:	684a      	ldr	r2, [r1, #4]
 80196b8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80196ba:	4a1e      	ldr	r2, [pc, #120]	@ (8019734 <TIM_Base_SetConfig+0xa8>)
 80196bc:	4290      	cmp	r0, r2
 80196be:	d01a      	beq.n	80196f6 <TIM_Base_SetConfig+0x6a>
 80196c0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80196c4:	d017      	beq.n	80196f6 <TIM_Base_SetConfig+0x6a>
 80196c6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80196ca:	4290      	cmp	r0, r2
 80196cc:	d013      	beq.n	80196f6 <TIM_Base_SetConfig+0x6a>
 80196ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80196d2:	4290      	cmp	r0, r2
 80196d4:	d00f      	beq.n	80196f6 <TIM_Base_SetConfig+0x6a>
 80196d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80196da:	4290      	cmp	r0, r2
 80196dc:	d00b      	beq.n	80196f6 <TIM_Base_SetConfig+0x6a>
 80196de:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80196e2:	4290      	cmp	r0, r2
 80196e4:	d007      	beq.n	80196f6 <TIM_Base_SetConfig+0x6a>
 80196e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80196ea:	4290      	cmp	r0, r2
 80196ec:	d003      	beq.n	80196f6 <TIM_Base_SetConfig+0x6a>
 80196ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80196f2:	4290      	cmp	r0, r2
 80196f4:	d103      	bne.n	80196fe <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80196f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80196fa:	68ca      	ldr	r2, [r1, #12]
 80196fc:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80196fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019702:	694a      	ldr	r2, [r1, #20]
 8019704:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8019706:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8019708:	688b      	ldr	r3, [r1, #8]
 801970a:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801970c:	680b      	ldr	r3, [r1, #0]
 801970e:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8019710:	4b08      	ldr	r3, [pc, #32]	@ (8019734 <TIM_Base_SetConfig+0xa8>)
 8019712:	4298      	cmp	r0, r3
 8019714:	d00a      	beq.n	801972c <TIM_Base_SetConfig+0xa0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8019716:	2301      	movs	r3, #1
 8019718:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801971a:	6903      	ldr	r3, [r0, #16]
 801971c:	f013 0f01 	tst.w	r3, #1
 8019720:	d003      	beq.n	801972a <TIM_Base_SetConfig+0x9e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8019722:	6903      	ldr	r3, [r0, #16]
 8019724:	f023 0301 	bic.w	r3, r3, #1
 8019728:	6103      	str	r3, [r0, #16]
  }
}
 801972a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 801972c:	690b      	ldr	r3, [r1, #16]
 801972e:	6303      	str	r3, [r0, #48]	@ 0x30
 8019730:	e7f1      	b.n	8019716 <TIM_Base_SetConfig+0x8a>
 8019732:	bf00      	nop
 8019734:	40010000 	.word	0x40010000

08019738 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8019738:	b340      	cbz	r0, 801978c <HAL_TIM_Base_Init+0x54>
{
 801973a:	b510      	push	{r4, lr}
 801973c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 801973e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8019742:	b1f3      	cbz	r3, 8019782 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8019744:	2302      	movs	r3, #2
 8019746:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801974a:	4621      	mov	r1, r4
 801974c:	f851 0b04 	ldr.w	r0, [r1], #4
 8019750:	f7ff ff9c 	bl	801968c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019754:	2301      	movs	r3, #1
 8019756:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801975a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 801975e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8019762:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8019766:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801976a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801976e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019772:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8019776:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 801977a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 801977e:	2000      	movs	r0, #0
}
 8019780:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8019782:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8019786:	f7ff fe90 	bl	80194aa <HAL_TIM_Base_MspInit>
 801978a:	e7db      	b.n	8019744 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 801978c:	2001      	movs	r0, #1
}
 801978e:	4770      	bx	lr

08019790 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8019790:	4770      	bx	lr

08019792 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8019792:	4770      	bx	lr

08019794 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8019794:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8019796:	b930      	cbnz	r0, 80197a6 <SSD1306_Fill+0x12>
 8019798:	2100      	movs	r1, #0
 801979a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801979e:	4803      	ldr	r0, [pc, #12]	@ (80197ac <SSD1306_Fill+0x18>)
 80197a0:	f013 f82e 	bl	802c800 <memset>
}
 80197a4:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80197a6:	21ff      	movs	r1, #255	@ 0xff
 80197a8:	e7f7      	b.n	801979a <SSD1306_Fill+0x6>
 80197aa:	bf00      	nop
 80197ac:	20002b2c 	.word	0x20002b2c

080197b0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 80197b0:	287f      	cmp	r0, #127	@ 0x7f
 80197b2:	d825      	bhi.n	8019800 <SSD1306_DrawPixel+0x50>
		x >= SSD1306_WIDTH ||
 80197b4:	293f      	cmp	r1, #63	@ 0x3f
 80197b6:	d823      	bhi.n	8019800 <SSD1306_DrawPixel+0x50>
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80197b8:	b410      	push	{r4}
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80197ba:	4b12      	ldr	r3, [pc, #72]	@ (8019804 <SSD1306_DrawPixel+0x54>)
 80197bc:	791b      	ldrb	r3, [r3, #4]
 80197be:	b113      	cbz	r3, 80197c6 <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 80197c0:	fab2 f282 	clz	r2, r2
 80197c4:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80197c6:	2a01      	cmp	r2, #1
 80197c8:	d00f      	beq.n	80197ea <SSD1306_DrawPixel+0x3a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80197ca:	08cb      	lsrs	r3, r1, #3
 80197cc:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80197d0:	4c0d      	ldr	r4, [pc, #52]	@ (8019808 <SSD1306_DrawPixel+0x58>)
 80197d2:	5c22      	ldrb	r2, [r4, r0]
 80197d4:	f001 0107 	and.w	r1, r1, #7
 80197d8:	2301      	movs	r3, #1
 80197da:	408b      	lsls	r3, r1
 80197dc:	43db      	mvns	r3, r3
 80197de:	b25b      	sxtb	r3, r3
 80197e0:	4013      	ands	r3, r2
 80197e2:	5423      	strb	r3, [r4, r0]
	}
}
 80197e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197e8:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80197ea:	08cb      	lsrs	r3, r1, #3
 80197ec:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80197f0:	4c05      	ldr	r4, [pc, #20]	@ (8019808 <SSD1306_DrawPixel+0x58>)
 80197f2:	5c23      	ldrb	r3, [r4, r0]
 80197f4:	f001 0107 	and.w	r1, r1, #7
 80197f8:	408a      	lsls	r2, r1
 80197fa:	4313      	orrs	r3, r2
 80197fc:	5423      	strb	r3, [r4, r0]
 80197fe:	e7f1      	b.n	80197e4 <SSD1306_DrawPixel+0x34>
 8019800:	4770      	bx	lr
 8019802:	bf00      	nop
 8019804:	20002b24 	.word	0x20002b24
 8019808:	20002b2c 	.word	0x20002b2c

0801980c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 801980c:	4b01      	ldr	r3, [pc, #4]	@ (8019814 <SSD1306_GotoXY+0x8>)
 801980e:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8019810:	8059      	strh	r1, [r3, #2]
}
 8019812:	4770      	bx	lr
 8019814:	20002b24 	.word	0x20002b24

08019818 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8019818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801981c:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 801981e:	4b24      	ldr	r3, [pc, #144]	@ (80198b0 <SSD1306_Putc+0x98>)
 8019820:	881b      	ldrh	r3, [r3, #0]
 8019822:	780a      	ldrb	r2, [r1, #0]
 8019824:	4413      	add	r3, r2
	if (
 8019826:	2b7f      	cmp	r3, #127	@ 0x7f
 8019828:	dc3e      	bgt.n	80198a8 <SSD1306_Putc+0x90>
 801982a:	4681      	mov	r9, r0
 801982c:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 801982e:	4b20      	ldr	r3, [pc, #128]	@ (80198b0 <SSD1306_Putc+0x98>)
 8019830:	885b      	ldrh	r3, [r3, #2]
 8019832:	784a      	ldrb	r2, [r1, #1]
 8019834:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8019836:	2b3f      	cmp	r3, #63	@ 0x3f
 8019838:	dc38      	bgt.n	80198ac <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 801983a:	2600      	movs	r6, #0
 801983c:	e020      	b.n	8019880 <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 801983e:	4b1c      	ldr	r3, [pc, #112]	@ (80198b0 <SSD1306_Putc+0x98>)
 8019840:	8818      	ldrh	r0, [r3, #0]
 8019842:	8859      	ldrh	r1, [r3, #2]
 8019844:	4431      	add	r1, r6
 8019846:	4420      	add	r0, r4
 8019848:	fab8 f288 	clz	r2, r8
 801984c:	0952      	lsrs	r2, r2, #5
 801984e:	b289      	uxth	r1, r1
 8019850:	b280      	uxth	r0, r0
 8019852:	f7ff ffad 	bl	80197b0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8019856:	3401      	adds	r4, #1
 8019858:	782b      	ldrb	r3, [r5, #0]
 801985a:	42a3      	cmp	r3, r4
 801985c:	d90f      	bls.n	801987e <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 801985e:	fa07 f304 	lsl.w	r3, r7, r4
 8019862:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8019866:	d0ea      	beq.n	801983e <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8019868:	4b11      	ldr	r3, [pc, #68]	@ (80198b0 <SSD1306_Putc+0x98>)
 801986a:	8818      	ldrh	r0, [r3, #0]
 801986c:	8859      	ldrh	r1, [r3, #2]
 801986e:	4431      	add	r1, r6
 8019870:	4420      	add	r0, r4
 8019872:	4642      	mov	r2, r8
 8019874:	b289      	uxth	r1, r1
 8019876:	b280      	uxth	r0, r0
 8019878:	f7ff ff9a 	bl	80197b0 <SSD1306_DrawPixel>
 801987c:	e7eb      	b.n	8019856 <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 801987e:	3601      	adds	r6, #1
 8019880:	786a      	ldrb	r2, [r5, #1]
 8019882:	42b2      	cmp	r2, r6
 8019884:	d908      	bls.n	8019898 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8019886:	6869      	ldr	r1, [r5, #4]
 8019888:	f1a9 0320 	sub.w	r3, r9, #32
 801988c:	fb02 6303 	mla	r3, r2, r3, r6
 8019890:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8019894:	2400      	movs	r4, #0
 8019896:	e7df      	b.n	8019858 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8019898:	4a05      	ldr	r2, [pc, #20]	@ (80198b0 <SSD1306_Putc+0x98>)
 801989a:	8813      	ldrh	r3, [r2, #0]
 801989c:	7829      	ldrb	r1, [r5, #0]
 801989e:	440b      	add	r3, r1
 80198a0:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 80198a2:	4648      	mov	r0, r9
}
 80198a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 80198a8:	2000      	movs	r0, #0
 80198aa:	e7fb      	b.n	80198a4 <SSD1306_Putc+0x8c>
 80198ac:	2000      	movs	r0, #0
 80198ae:	e7f9      	b.n	80198a4 <SSD1306_Putc+0x8c>
 80198b0:	20002b24 	.word	0x20002b24

080198b4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80198b4:	b570      	push	{r4, r5, r6, lr}
 80198b6:	4604      	mov	r4, r0
 80198b8:	460e      	mov	r6, r1
 80198ba:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 80198bc:	e000      	b.n	80198c0 <SSD1306_Puts+0xc>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 80198be:	3401      	adds	r4, #1
	while (*str) {
 80198c0:	7820      	ldrb	r0, [r4, #0]
 80198c2:	b138      	cbz	r0, 80198d4 <SSD1306_Puts+0x20>
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80198c4:	462a      	mov	r2, r5
 80198c6:	4631      	mov	r1, r6
 80198c8:	f7ff ffa6 	bl	8019818 <SSD1306_Putc>
 80198cc:	4603      	mov	r3, r0
 80198ce:	7820      	ldrb	r0, [r4, #0]
 80198d0:	4283      	cmp	r3, r0
 80198d2:	d0f4      	beq.n	80198be <SSD1306_Puts+0xa>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 80198d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080198d8 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80198d8:	b500      	push	{lr}
 80198da:	b0c3      	sub	sp, #268	@ 0x10c
uint8_t dt[256];
dt[0] = reg;
 80198dc:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 80198e0:	f04f 0c00 	mov.w	ip, #0
 80198e4:	e009      	b.n	80198fa <ssd1306_I2C_WriteMulti+0x22>
dt[i+1] = data[i];
 80198e6:	f10c 0e01 	add.w	lr, ip, #1
 80198ea:	f812 100c 	ldrb.w	r1, [r2, ip]
 80198ee:	f10d 0c08 	add.w	ip, sp, #8
 80198f2:	f80c 100e 	strb.w	r1, [ip, lr]
for(i = 0; i < count; i++)
 80198f6:	fa5f fc8e 	uxtb.w	ip, lr
 80198fa:	459c      	cmp	ip, r3
 80198fc:	d3f3      	bcc.n	80198e6 <ssd1306_I2C_WriteMulti+0xe>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 80198fe:	3301      	adds	r3, #1
 8019900:	220a      	movs	r2, #10
 8019902:	9200      	str	r2, [sp, #0]
 8019904:	b29b      	uxth	r3, r3
 8019906:	aa02      	add	r2, sp, #8
 8019908:	4601      	mov	r1, r0
 801990a:	4803      	ldr	r0, [pc, #12]	@ (8019918 <ssd1306_I2C_WriteMulti+0x40>)
 801990c:	f7fe fa34 	bl	8017d78 <HAL_I2C_Master_Transmit>
}
 8019910:	b043      	add	sp, #268	@ 0x10c
 8019912:	f85d fb04 	ldr.w	pc, [sp], #4
 8019916:	bf00      	nop
 8019918:	20000a50 	.word	0x20000a50

0801991c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 801991c:	b500      	push	{lr}
 801991e:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 8019920:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8019924:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8019928:	230a      	movs	r3, #10
 801992a:	9300      	str	r3, [sp, #0]
 801992c:	2302      	movs	r3, #2
 801992e:	aa03      	add	r2, sp, #12
 8019930:	4601      	mov	r1, r0
 8019932:	4803      	ldr	r0, [pc, #12]	@ (8019940 <ssd1306_I2C_Write+0x24>)
 8019934:	f7fe fa20 	bl	8017d78 <HAL_I2C_Master_Transmit>
}
 8019938:	b005      	add	sp, #20
 801993a:	f85d fb04 	ldr.w	pc, [sp], #4
 801993e:	bf00      	nop
 8019940:	20000a50 	.word	0x20000a50

08019944 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8019944:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8019946:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801994a:	2201      	movs	r2, #1
 801994c:	2178      	movs	r1, #120	@ 0x78
 801994e:	4850      	ldr	r0, [pc, #320]	@ (8019a90 <SSD1306_Init+0x14c>)
 8019950:	f7fe face 	bl	8017ef0 <HAL_I2C_IsDeviceReady>
 8019954:	2800      	cmp	r0, #0
 8019956:	f040 8099 	bne.w	8019a8c <SSD1306_Init+0x148>
	uint32_t p = 2500;
 801995a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 801995e:	e000      	b.n	8019962 <SSD1306_Init+0x1e>
		p--;
 8019960:	3b01      	subs	r3, #1
	while(p>0)
 8019962:	2b00      	cmp	r3, #0
 8019964:	d1fc      	bne.n	8019960 <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8019966:	22ae      	movs	r2, #174	@ 0xae
 8019968:	2100      	movs	r1, #0
 801996a:	2078      	movs	r0, #120	@ 0x78
 801996c:	f7ff ffd6 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8019970:	2220      	movs	r2, #32
 8019972:	2100      	movs	r1, #0
 8019974:	2078      	movs	r0, #120	@ 0x78
 8019976:	f7ff ffd1 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 801997a:	2210      	movs	r2, #16
 801997c:	2100      	movs	r1, #0
 801997e:	2078      	movs	r0, #120	@ 0x78
 8019980:	f7ff ffcc 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8019984:	22b0      	movs	r2, #176	@ 0xb0
 8019986:	2100      	movs	r1, #0
 8019988:	2078      	movs	r0, #120	@ 0x78
 801998a:	f7ff ffc7 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 801998e:	22c8      	movs	r2, #200	@ 0xc8
 8019990:	2100      	movs	r1, #0
 8019992:	2078      	movs	r0, #120	@ 0x78
 8019994:	f7ff ffc2 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8019998:	2200      	movs	r2, #0
 801999a:	4611      	mov	r1, r2
 801999c:	2078      	movs	r0, #120	@ 0x78
 801999e:	f7ff ffbd 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80199a2:	2210      	movs	r2, #16
 80199a4:	2100      	movs	r1, #0
 80199a6:	2078      	movs	r0, #120	@ 0x78
 80199a8:	f7ff ffb8 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80199ac:	2240      	movs	r2, #64	@ 0x40
 80199ae:	2100      	movs	r1, #0
 80199b0:	2078      	movs	r0, #120	@ 0x78
 80199b2:	f7ff ffb3 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80199b6:	2281      	movs	r2, #129	@ 0x81
 80199b8:	2100      	movs	r1, #0
 80199ba:	2078      	movs	r0, #120	@ 0x78
 80199bc:	f7ff ffae 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80199c0:	22ff      	movs	r2, #255	@ 0xff
 80199c2:	2100      	movs	r1, #0
 80199c4:	2078      	movs	r0, #120	@ 0x78
 80199c6:	f7ff ffa9 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80199ca:	22a1      	movs	r2, #161	@ 0xa1
 80199cc:	2100      	movs	r1, #0
 80199ce:	2078      	movs	r0, #120	@ 0x78
 80199d0:	f7ff ffa4 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80199d4:	22a6      	movs	r2, #166	@ 0xa6
 80199d6:	2100      	movs	r1, #0
 80199d8:	2078      	movs	r0, #120	@ 0x78
 80199da:	f7ff ff9f 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80199de:	22a8      	movs	r2, #168	@ 0xa8
 80199e0:	2100      	movs	r1, #0
 80199e2:	2078      	movs	r0, #120	@ 0x78
 80199e4:	f7ff ff9a 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80199e8:	223f      	movs	r2, #63	@ 0x3f
 80199ea:	2100      	movs	r1, #0
 80199ec:	2078      	movs	r0, #120	@ 0x78
 80199ee:	f7ff ff95 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80199f2:	22a4      	movs	r2, #164	@ 0xa4
 80199f4:	2100      	movs	r1, #0
 80199f6:	2078      	movs	r0, #120	@ 0x78
 80199f8:	f7ff ff90 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80199fc:	22d3      	movs	r2, #211	@ 0xd3
 80199fe:	2100      	movs	r1, #0
 8019a00:	2078      	movs	r0, #120	@ 0x78
 8019a02:	f7ff ff8b 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8019a06:	2200      	movs	r2, #0
 8019a08:	4611      	mov	r1, r2
 8019a0a:	2078      	movs	r0, #120	@ 0x78
 8019a0c:	f7ff ff86 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8019a10:	22d5      	movs	r2, #213	@ 0xd5
 8019a12:	2100      	movs	r1, #0
 8019a14:	2078      	movs	r0, #120	@ 0x78
 8019a16:	f7ff ff81 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8019a1a:	22f0      	movs	r2, #240	@ 0xf0
 8019a1c:	2100      	movs	r1, #0
 8019a1e:	2078      	movs	r0, #120	@ 0x78
 8019a20:	f7ff ff7c 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8019a24:	22d9      	movs	r2, #217	@ 0xd9
 8019a26:	2100      	movs	r1, #0
 8019a28:	2078      	movs	r0, #120	@ 0x78
 8019a2a:	f7ff ff77 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8019a2e:	2222      	movs	r2, #34	@ 0x22
 8019a30:	2100      	movs	r1, #0
 8019a32:	2078      	movs	r0, #120	@ 0x78
 8019a34:	f7ff ff72 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8019a38:	22da      	movs	r2, #218	@ 0xda
 8019a3a:	2100      	movs	r1, #0
 8019a3c:	2078      	movs	r0, #120	@ 0x78
 8019a3e:	f7ff ff6d 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8019a42:	2212      	movs	r2, #18
 8019a44:	2100      	movs	r1, #0
 8019a46:	2078      	movs	r0, #120	@ 0x78
 8019a48:	f7ff ff68 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8019a4c:	22db      	movs	r2, #219	@ 0xdb
 8019a4e:	2100      	movs	r1, #0
 8019a50:	2078      	movs	r0, #120	@ 0x78
 8019a52:	f7ff ff63 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8019a56:	2220      	movs	r2, #32
 8019a58:	2100      	movs	r1, #0
 8019a5a:	2078      	movs	r0, #120	@ 0x78
 8019a5c:	f7ff ff5e 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8019a60:	228d      	movs	r2, #141	@ 0x8d
 8019a62:	2100      	movs	r1, #0
 8019a64:	2078      	movs	r0, #120	@ 0x78
 8019a66:	f7ff ff59 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8019a6a:	2214      	movs	r2, #20
 8019a6c:	2100      	movs	r1, #0
 8019a6e:	2078      	movs	r0, #120	@ 0x78
 8019a70:	f7ff ff54 	bl	801991c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8019a74:	22af      	movs	r2, #175	@ 0xaf
 8019a76:	2100      	movs	r1, #0
 8019a78:	2078      	movs	r0, #120	@ 0x78
 8019a7a:	f7ff ff4f 	bl	801991c <ssd1306_I2C_Write>
	SSD1306.CurrentX = 0;
 8019a7e:	4b05      	ldr	r3, [pc, #20]	@ (8019a94 <SSD1306_Init+0x150>)
 8019a80:	2200      	movs	r2, #0
 8019a82:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8019a84:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8019a86:	2001      	movs	r0, #1
 8019a88:	7158      	strb	r0, [r3, #5]
}
 8019a8a:	bd08      	pop	{r3, pc}
		return 0;
 8019a8c:	2000      	movs	r0, #0
 8019a8e:	e7fc      	b.n	8019a8a <SSD1306_Init+0x146>
 8019a90:	20000a50 	.word	0x20000a50
 8019a94:	20002b24 	.word	0x20002b24

08019a98 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8019a98:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 8019a9a:	2400      	movs	r4, #0
 8019a9c:	e01a      	b.n	8019ad4 <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8019a9e:	f1a4 0250 	sub.w	r2, r4, #80	@ 0x50
 8019aa2:	b2d2      	uxtb	r2, r2
 8019aa4:	2100      	movs	r1, #0
 8019aa6:	2078      	movs	r0, #120	@ 0x78
 8019aa8:	f7ff ff38 	bl	801991c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8019aac:	2200      	movs	r2, #0
 8019aae:	4611      	mov	r1, r2
 8019ab0:	2078      	movs	r0, #120	@ 0x78
 8019ab2:	f7ff ff33 	bl	801991c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8019ab6:	2210      	movs	r2, #16
 8019ab8:	2100      	movs	r1, #0
 8019aba:	2078      	movs	r0, #120	@ 0x78
 8019abc:	f7ff ff2e 	bl	801991c <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8019ac0:	2380      	movs	r3, #128	@ 0x80
 8019ac2:	4a06      	ldr	r2, [pc, #24]	@ (8019adc <SSD1306_UpdateScreen+0x44>)
 8019ac4:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8019ac8:	2140      	movs	r1, #64	@ 0x40
 8019aca:	2078      	movs	r0, #120	@ 0x78
 8019acc:	f7ff ff04 	bl	80198d8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8019ad0:	3401      	adds	r4, #1
 8019ad2:	b2e4      	uxtb	r4, r4
 8019ad4:	2c07      	cmp	r4, #7
 8019ad6:	d9e2      	bls.n	8019a9e <SSD1306_UpdateScreen+0x6>
}
 8019ad8:	bd10      	pop	{r4, pc}
 8019ada:	bf00      	nop
 8019adc:	20002b2c 	.word	0x20002b2c

08019ae0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8019ae0:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8019ae2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019ae6:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8019ae8:	f001 fd48 	bl	801b57c <xTaskGetSchedulerState>
 8019aec:	2801      	cmp	r0, #1
 8019aee:	d100      	bne.n	8019af2 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8019af0:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8019af2:	f002 f947 	bl	801bd84 <xPortSysTickHandler>
}
 8019af6:	e7fb      	b.n	8019af0 <SysTick_Handler+0x10>

08019af8 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019af8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8019afc:	b92b      	cbnz	r3, 8019b0a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8019afe:	4b06      	ldr	r3, [pc, #24]	@ (8019b18 <osKernelInitialize+0x20>)
 8019b00:	6818      	ldr	r0, [r3, #0]
 8019b02:	b928      	cbnz	r0, 8019b10 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8019b04:	2201      	movs	r2, #1
 8019b06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8019b08:	4770      	bx	lr
    stat = osErrorISR;
 8019b0a:	f06f 0005 	mvn.w	r0, #5
 8019b0e:	4770      	bx	lr
    } else {
      stat = osError;
 8019b10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }
  }

  return (stat);
}
 8019b14:	4770      	bx	lr
 8019b16:	bf00      	nop
 8019b18:	20003870 	.word	0x20003870

08019b1c <osKernelStart>:
 8019b1c:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8019b20:	b973      	cbnz	r3, 8019b40 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8019b22:	4b0a      	ldr	r3, [pc, #40]	@ (8019b4c <osKernelStart+0x30>)
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	2b01      	cmp	r3, #1
 8019b28:	d10d      	bne.n	8019b46 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8019b2a:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019b2c:	2400      	movs	r4, #0
 8019b2e:	4b08      	ldr	r3, [pc, #32]	@ (8019b50 <osKernelStart+0x34>)
 8019b30:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8019b32:	4b06      	ldr	r3, [pc, #24]	@ (8019b4c <osKernelStart+0x30>)
 8019b34:	2202      	movs	r2, #2
 8019b36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8019b38:	f001 fa68 	bl	801b00c <vTaskStartScheduler>
      stat = osOK;
 8019b3c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8019b3e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8019b40:	f06f 0005 	mvn.w	r0, #5
 8019b44:	4770      	bx	lr
      stat = osError;
 8019b46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8019b4a:	4770      	bx	lr
 8019b4c:	20003870 	.word	0x20003870
 8019b50:	e000ed00 	.word	0xe000ed00

08019b54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8019b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b56:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8019b58:	2400      	movs	r4, #0
 8019b5a:	9405      	str	r4, [sp, #20]
 8019b5c:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8019b60:	bb0c      	cbnz	r4, 8019ba6 <osThreadNew+0x52>
 8019b62:	b300      	cbz	r0, 8019ba6 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8019b64:	2a00      	cmp	r2, #0
 8019b66:	d035      	beq.n	8019bd4 <osThreadNew+0x80>
      if (attr->name != NULL) {
 8019b68:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8019b6a:	6993      	ldr	r3, [r2, #24]
 8019b6c:	b12b      	cbz	r3, 8019b7a <osThreadNew+0x26>
        prio = (UBaseType_t)attr->priority;
 8019b6e:	461e      	mov	r6, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8019b70:	3b01      	subs	r3, #1
 8019b72:	2b37      	cmp	r3, #55	@ 0x37
 8019b74:	d902      	bls.n	8019b7c <osThreadNew+0x28>
        return (NULL);
 8019b76:	2000      	movs	r0, #0
 8019b78:	e016      	b.n	8019ba8 <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 8019b7a:	2618      	movs	r6, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8019b7c:	6853      	ldr	r3, [r2, #4]
 8019b7e:	f013 0f01 	tst.w	r3, #1
 8019b82:	d140      	bne.n	8019c06 <osThreadNew+0xb2>
      }

      if (attr->stack_size > 0U) {
 8019b84:	6954      	ldr	r4, [r2, #20]
 8019b86:	b18c      	cbz	r4, 8019bac <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8019b88:	ea4f 0c94 	mov.w	ip, r4, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8019b8c:	6893      	ldr	r3, [r2, #8]
 8019b8e:	b133      	cbz	r3, 8019b9e <osThreadNew+0x4a>
 8019b90:	68d7      	ldr	r7, [r2, #12]
 8019b92:	f5b7 7fd0 	cmp.w	r7, #416	@ 0x1a0
 8019b96:	d302      	bcc.n	8019b9e <osThreadNew+0x4a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8019b98:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8019b9a:	b107      	cbz	r7, 8019b9e <osThreadNew+0x4a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8019b9c:	b984      	cbnz	r4, 8019bc0 <osThreadNew+0x6c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8019b9e:	b143      	cbz	r3, 8019bb2 <osThreadNew+0x5e>
    mem  = -1;
 8019ba0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8019ba4:	b30b      	cbz	r3, 8019bea <osThreadNew+0x96>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8019ba6:	9805      	ldr	r0, [sp, #20]
}
 8019ba8:	b007      	add	sp, #28
 8019baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8019bac:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8019bb0:	e7ec      	b.n	8019b8c <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8019bb2:	68d3      	ldr	r3, [r2, #12]
 8019bb4:	b9a3      	cbnz	r3, 8019be0 <osThreadNew+0x8c>
 8019bb6:	6913      	ldr	r3, [r2, #16]
 8019bb8:	b1ab      	cbz	r3, 8019be6 <osThreadNew+0x92>
    mem  = -1;
 8019bba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019bbe:	e7f1      	b.n	8019ba4 <osThreadNew+0x50>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8019bc0:	9302      	str	r3, [sp, #8]
 8019bc2:	9701      	str	r7, [sp, #4]
 8019bc4:	9600      	str	r6, [sp, #0]
 8019bc6:	460b      	mov	r3, r1
 8019bc8:	4662      	mov	r2, ip
 8019bca:	4629      	mov	r1, r5
 8019bcc:	f001 f9ae 	bl	801af2c <xTaskCreateStatic>
 8019bd0:	9005      	str	r0, [sp, #20]
 8019bd2:	e7e8      	b.n	8019ba6 <osThreadNew+0x52>
    name = NULL;
 8019bd4:	4615      	mov	r5, r2
      mem = 0;
 8019bd6:	2300      	movs	r3, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8019bd8:	2618      	movs	r6, #24
    stack = configMINIMAL_STACK_SIZE;
 8019bda:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8019bde:	e7e1      	b.n	8019ba4 <osThreadNew+0x50>
    mem  = -1;
 8019be0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019be4:	e7de      	b.n	8019ba4 <osThreadNew+0x50>
          mem = 0;
 8019be6:	2300      	movs	r3, #0
 8019be8:	e7dc      	b.n	8019ba4 <osThreadNew+0x50>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8019bea:	ab05      	add	r3, sp, #20
 8019bec:	9301      	str	r3, [sp, #4]
 8019bee:	9600      	str	r6, [sp, #0]
 8019bf0:	460b      	mov	r3, r1
 8019bf2:	fa1f f28c 	uxth.w	r2, ip
 8019bf6:	4629      	mov	r1, r5
 8019bf8:	f001 f9d5 	bl	801afa6 <xTaskCreate>
 8019bfc:	2801      	cmp	r0, #1
 8019bfe:	d0d2      	beq.n	8019ba6 <osThreadNew+0x52>
            hTask = NULL;
 8019c00:	2300      	movs	r3, #0
 8019c02:	9305      	str	r3, [sp, #20]
 8019c04:	e7cf      	b.n	8019ba6 <osThreadNew+0x52>
        return (NULL);
 8019c06:	2000      	movs	r0, #0
 8019c08:	e7ce      	b.n	8019ba8 <osThreadNew+0x54>

08019c0a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8019c0a:	b508      	push	{r3, lr}
 8019c0c:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8019c10:	b933      	cbnz	r3, 8019c20 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8019c12:	b908      	cbnz	r0, 8019c18 <osDelay+0xe>
    stat = osOK;
 8019c14:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8019c16:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8019c18:	f001 fb64 	bl	801b2e4 <vTaskDelay>
    stat = osOK;
 8019c1c:	2000      	movs	r0, #0
 8019c1e:	e7fa      	b.n	8019c16 <osDelay+0xc>
    stat = osErrorISR;
 8019c20:	f06f 0005 	mvn.w	r0, #5
 8019c24:	e7f7      	b.n	8019c16 <osDelay+0xc>

08019c26 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8019c26:	b570      	push	{r4, r5, r6, lr}
 8019c28:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8019c2c:	2e00      	cmp	r6, #0
 8019c2e:	d13e      	bne.n	8019cae <osMutexNew+0x88>
 8019c30:	4604      	mov	r4, r0
    if (attr != NULL) {
 8019c32:	b308      	cbz	r0, 8019c78 <osMutexNew+0x52>
      type = attr->attr_bits;
 8019c34:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8019c36:	f013 0601 	ands.w	r6, r3, #1
 8019c3a:	d000      	beq.n	8019c3e <osMutexNew+0x18>
      rmtx = 1U;
 8019c3c:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8019c3e:	f013 0f08 	tst.w	r3, #8
 8019c42:	d137      	bne.n	8019cb4 <osMutexNew+0x8e>
      mem = -1;

      if (attr != NULL) {
 8019c44:	b354      	cbz	r4, 8019c9c <osMutexNew+0x76>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8019c46:	68a1      	ldr	r1, [r4, #8]
 8019c48:	b111      	cbz	r1, 8019c50 <osMutexNew+0x2a>
 8019c4a:	68e3      	ldr	r3, [r4, #12]
 8019c4c:	2b4f      	cmp	r3, #79	@ 0x4f
 8019c4e:	d81a      	bhi.n	8019c86 <osMutexNew+0x60>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8019c50:	b1a1      	cbz	r1, 8019c7c <osMutexNew+0x56>
      mem = -1;
 8019c52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 8019c56:	bb7b      	cbnz	r3, 8019cb8 <osMutexNew+0x92>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8019c58:	b326      	cbz	r6, 8019ca4 <osMutexNew+0x7e>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8019c5a:	2004      	movs	r0, #4
 8019c5c:	f000 fc06 	bl	801a46c <xQueueCreateMutex>
 8019c60:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8019c62:	b32d      	cbz	r5, 8019cb0 <osMutexNew+0x8a>
        if (attr != NULL) {
 8019c64:	b104      	cbz	r4, 8019c68 <osMutexNew+0x42>
          name = attr->name;
 8019c66:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8019c68:	4621      	mov	r1, r4
 8019c6a:	4628      	mov	r0, r5
 8019c6c:	f000 ff66 	bl	801ab3c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8019c70:	b1f6      	cbz	r6, 8019cb0 <osMutexNew+0x8a>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8019c72:	f045 0501 	orr.w	r5, r5, #1
 8019c76:	e01b      	b.n	8019cb0 <osMutexNew+0x8a>
      type = 0U;
 8019c78:	4633      	mov	r3, r6
 8019c7a:	e7e0      	b.n	8019c3e <osMutexNew+0x18>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8019c7c:	68e3      	ldr	r3, [r4, #12]
 8019c7e:	b17b      	cbz	r3, 8019ca0 <osMutexNew+0x7a>
      mem = -1;
 8019c80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019c84:	e7e7      	b.n	8019c56 <osMutexNew+0x30>
          if (rmtx != 0U) {
 8019c86:	b126      	cbz	r6, 8019c92 <osMutexNew+0x6c>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8019c88:	2004      	movs	r0, #4
 8019c8a:	f000 fbfa 	bl	801a482 <xQueueCreateMutexStatic>
 8019c8e:	4605      	mov	r5, r0
 8019c90:	e7e7      	b.n	8019c62 <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8019c92:	2001      	movs	r0, #1
 8019c94:	f000 fbf5 	bl	801a482 <xQueueCreateMutexStatic>
 8019c98:	4605      	mov	r5, r0
 8019c9a:	e7e2      	b.n	8019c62 <osMutexNew+0x3c>
        mem = 0;
 8019c9c:	2300      	movs	r3, #0
 8019c9e:	e7da      	b.n	8019c56 <osMutexNew+0x30>
            mem = 0;
 8019ca0:	2300      	movs	r3, #0
 8019ca2:	e7d8      	b.n	8019c56 <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 8019ca4:	2001      	movs	r0, #1
 8019ca6:	f000 fbe1 	bl	801a46c <xQueueCreateMutex>
 8019caa:	4605      	mov	r5, r0
 8019cac:	e7d9      	b.n	8019c62 <osMutexNew+0x3c>
  hMutex = NULL;
 8019cae:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8019cb0:	4628      	mov	r0, r5
 8019cb2:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8019cb4:	2500      	movs	r5, #0
 8019cb6:	e7fb      	b.n	8019cb0 <osMutexNew+0x8a>
 8019cb8:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8019cba:	e7f9      	b.n	8019cb0 <osMutexNew+0x8a>

08019cbc <osMutexAcquire>:
 8019cbc:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8019cc0:	b9da      	cbnz	r2, 8019cfa <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8019cc2:	b510      	push	{r4, lr}
 8019cc4:	4603      	mov	r3, r0
 8019cc6:	460c      	mov	r4, r1
 8019cc8:	f020 0001 	bic.w	r0, r0, #1
 8019ccc:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8019cd0:	2b01      	cmp	r3, #1
 8019cd2:	d915      	bls.n	8019d00 <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8019cd4:	b141      	cbz	r1, 8019ce8 <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8019cd6:	4621      	mov	r1, r4
 8019cd8:	f000 fdeb 	bl	801a8b2 <xQueueTakeMutexRecursive>
 8019cdc:	2801      	cmp	r0, #1
 8019cde:	d012      	beq.n	8019d06 <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 8019ce0:	b19c      	cbz	r4, 8019d0a <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 8019ce2:	f06f 0001 	mvn.w	r0, #1
 8019ce6:	e00f      	b.n	8019d08 <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8019ce8:	4621      	mov	r1, r4
 8019cea:	f000 fd0f 	bl	801a70c <xQueueSemaphoreTake>
 8019cee:	2801      	cmp	r0, #1
 8019cf0:	d00e      	beq.n	8019d10 <osMutexAcquire+0x54>
        if (timeout != 0U) {
 8019cf2:	b17c      	cbz	r4, 8019d14 <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 8019cf4:	f06f 0001 	mvn.w	r0, #1
 8019cf8:	e006      	b.n	8019d08 <osMutexAcquire+0x4c>
    stat = osErrorISR;
 8019cfa:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8019cfe:	4770      	bx	lr
    stat = osErrorParameter;
 8019d00:	f06f 0003 	mvn.w	r0, #3
 8019d04:	e000      	b.n	8019d08 <osMutexAcquire+0x4c>
  stat = osOK;
 8019d06:	2000      	movs	r0, #0
}
 8019d08:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 8019d0a:	f06f 0002 	mvn.w	r0, #2
 8019d0e:	e7fb      	b.n	8019d08 <osMutexAcquire+0x4c>
  stat = osOK;
 8019d10:	2000      	movs	r0, #0
 8019d12:	e7f9      	b.n	8019d08 <osMutexAcquire+0x4c>
          stat = osErrorResource;
 8019d14:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8019d18:	e7f6      	b.n	8019d08 <osMutexAcquire+0x4c>

08019d1a <osMutexRelease>:
 8019d1a:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8019d1e:	b9ba      	cbnz	r2, 8019d50 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8019d20:	b508      	push	{r3, lr}
 8019d22:	4603      	mov	r3, r0
 8019d24:	f020 0001 	bic.w	r0, r0, #1
 8019d28:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8019d2c:	2b01      	cmp	r3, #1
 8019d2e:	d912      	bls.n	8019d56 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8019d30:	b129      	cbz	r1, 8019d3e <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8019d32:	f000 fbb5 	bl	801a4a0 <xQueueGiveMutexRecursive>
 8019d36:	2801      	cmp	r0, #1
 8019d38:	d110      	bne.n	8019d5c <osMutexRelease+0x42>
  stat = osOK;
 8019d3a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8019d3c:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8019d3e:	2300      	movs	r3, #0
 8019d40:	461a      	mov	r2, r3
 8019d42:	4619      	mov	r1, r3
 8019d44:	f000 fac2 	bl	801a2cc <xQueueGenericSend>
 8019d48:	2801      	cmp	r0, #1
 8019d4a:	d10a      	bne.n	8019d62 <osMutexRelease+0x48>
  stat = osOK;
 8019d4c:	2000      	movs	r0, #0
 8019d4e:	e7f5      	b.n	8019d3c <osMutexRelease+0x22>
    stat = osErrorISR;
 8019d50:	f06f 0005 	mvn.w	r0, #5
}
 8019d54:	4770      	bx	lr
    stat = osErrorParameter;
 8019d56:	f06f 0003 	mvn.w	r0, #3
 8019d5a:	e7ef      	b.n	8019d3c <osMutexRelease+0x22>
        stat = osErrorResource;
 8019d5c:	f06f 0002 	mvn.w	r0, #2
 8019d60:	e7ec      	b.n	8019d3c <osMutexRelease+0x22>
        stat = osErrorResource;
 8019d62:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8019d66:	e7e9      	b.n	8019d3c <osMutexRelease+0x22>

08019d68 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8019d68:	b570      	push	{r4, r5, r6, lr}
 8019d6a:	b082      	sub	sp, #8
 8019d6c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d13a      	bne.n	8019dea <osMessageQueueNew+0x82>
 8019d74:	4614      	mov	r4, r2
 8019d76:	2800      	cmp	r0, #0
 8019d78:	d03b      	beq.n	8019df2 <osMessageQueueNew+0x8a>
 8019d7a:	2900      	cmp	r1, #0
 8019d7c:	d03b      	beq.n	8019df6 <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 8019d7e:	b36a      	cbz	r2, 8019ddc <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8019d80:	6893      	ldr	r3, [r2, #8]
 8019d82:	b14b      	cbz	r3, 8019d98 <osMessageQueueNew+0x30>
 8019d84:	68d2      	ldr	r2, [r2, #12]
 8019d86:	2a4f      	cmp	r2, #79	@ 0x4f
 8019d88:	d906      	bls.n	8019d98 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8019d8a:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8019d8c:	b122      	cbz	r2, 8019d98 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8019d8e:	fb01 f500 	mul.w	r5, r1, r0
 8019d92:	6966      	ldr	r6, [r4, #20]
 8019d94:	42ae      	cmp	r6, r5
 8019d96:	d21b      	bcs.n	8019dd0 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8019d98:	b173      	cbz	r3, 8019db8 <osMessageQueueNew+0x50>
    mem = -1;
 8019d9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8019d9e:	bb63      	cbnz	r3, 8019dfa <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8019da0:	2200      	movs	r2, #0
 8019da2:	f000 fa6f 	bl	801a284 <xQueueGenericCreate>
 8019da6:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8019da8:	b305      	cbz	r5, 8019dec <osMessageQueueNew+0x84>
      if (attr != NULL) {
 8019daa:	b104      	cbz	r4, 8019dae <osMessageQueueNew+0x46>
        name = attr->name;
 8019dac:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8019dae:	4621      	mov	r1, r4
 8019db0:	4628      	mov	r0, r5
 8019db2:	f000 fec3 	bl	801ab3c <vQueueAddToRegistry>
 8019db6:	e019      	b.n	8019dec <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8019db8:	68e3      	ldr	r3, [r4, #12]
 8019dba:	b98b      	cbnz	r3, 8019de0 <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8019dbc:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8019dbe:	b113      	cbz	r3, 8019dc6 <osMessageQueueNew+0x5e>
    mem = -1;
 8019dc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019dc4:	e7eb      	b.n	8019d9e <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8019dc6:	6963      	ldr	r3, [r4, #20]
 8019dc8:	b16b      	cbz	r3, 8019de6 <osMessageQueueNew+0x7e>
    mem = -1;
 8019dca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019dce:	e7e6      	b.n	8019d9e <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8019dd0:	2500      	movs	r5, #0
 8019dd2:	9500      	str	r5, [sp, #0]
 8019dd4:	f000 fa0c 	bl	801a1f0 <xQueueGenericCreateStatic>
 8019dd8:	4605      	mov	r5, r0
 8019dda:	e7e5      	b.n	8019da8 <osMessageQueueNew+0x40>
      mem = 0;
 8019ddc:	2300      	movs	r3, #0
 8019dde:	e7de      	b.n	8019d9e <osMessageQueueNew+0x36>
    mem = -1;
 8019de0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019de4:	e7db      	b.n	8019d9e <osMessageQueueNew+0x36>
          mem = 0;
 8019de6:	2300      	movs	r3, #0
 8019de8:	e7d9      	b.n	8019d9e <osMessageQueueNew+0x36>
  hQueue = NULL;
 8019dea:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8019dec:	4628      	mov	r0, r5
 8019dee:	b002      	add	sp, #8
 8019df0:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8019df2:	2500      	movs	r5, #0
 8019df4:	e7fa      	b.n	8019dec <osMessageQueueNew+0x84>
 8019df6:	2500      	movs	r5, #0
 8019df8:	e7f8      	b.n	8019dec <osMessageQueueNew+0x84>
 8019dfa:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8019dfc:	e7f6      	b.n	8019dec <osMessageQueueNew+0x84>

08019dfe <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8019dfe:	b510      	push	{r4, lr}
 8019e00:	b082      	sub	sp, #8
 8019e02:	461c      	mov	r4, r3
 8019e04:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8019e08:	b1c3      	cbz	r3, 8019e3c <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8019e0a:	b318      	cbz	r0, 8019e54 <osMessageQueuePut+0x56>
 8019e0c:	b329      	cbz	r1, 8019e5a <osMessageQueuePut+0x5c>
 8019e0e:	bb3c      	cbnz	r4, 8019e60 <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8019e10:	2300      	movs	r3, #0
 8019e12:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8019e14:	aa01      	add	r2, sp, #4
 8019e16:	f000 fb63 	bl	801a4e0 <xQueueGenericSendFromISR>
 8019e1a:	2801      	cmp	r0, #1
 8019e1c:	d123      	bne.n	8019e66 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8019e1e:	9801      	ldr	r0, [sp, #4]
 8019e20:	b150      	cbz	r0, 8019e38 <osMessageQueuePut+0x3a>
 8019e22:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019e26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019e2a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019e2e:	f3bf 8f4f 	dsb	sy
 8019e32:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8019e36:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8019e38:	b002      	add	sp, #8
 8019e3a:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8019e3c:	b1b0      	cbz	r0, 8019e6c <osMessageQueuePut+0x6e>
 8019e3e:	b1c1      	cbz	r1, 8019e72 <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8019e40:	2300      	movs	r3, #0
 8019e42:	4622      	mov	r2, r4
 8019e44:	f000 fa42 	bl	801a2cc <xQueueGenericSend>
 8019e48:	2801      	cmp	r0, #1
 8019e4a:	d015      	beq.n	8019e78 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 8019e4c:	b1b4      	cbz	r4, 8019e7c <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 8019e4e:	f06f 0001 	mvn.w	r0, #1
 8019e52:	e7f1      	b.n	8019e38 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8019e54:	f06f 0003 	mvn.w	r0, #3
 8019e58:	e7ee      	b.n	8019e38 <osMessageQueuePut+0x3a>
 8019e5a:	f06f 0003 	mvn.w	r0, #3
 8019e5e:	e7eb      	b.n	8019e38 <osMessageQueuePut+0x3a>
 8019e60:	f06f 0003 	mvn.w	r0, #3
 8019e64:	e7e8      	b.n	8019e38 <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 8019e66:	f06f 0002 	mvn.w	r0, #2
 8019e6a:	e7e5      	b.n	8019e38 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8019e6c:	f06f 0003 	mvn.w	r0, #3
 8019e70:	e7e2      	b.n	8019e38 <osMessageQueuePut+0x3a>
 8019e72:	f06f 0003 	mvn.w	r0, #3
 8019e76:	e7df      	b.n	8019e38 <osMessageQueuePut+0x3a>
  stat = osOK;
 8019e78:	2000      	movs	r0, #0
 8019e7a:	e7dd      	b.n	8019e38 <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 8019e7c:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8019e80:	e7da      	b.n	8019e38 <osMessageQueuePut+0x3a>

08019e82 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8019e82:	b510      	push	{r4, lr}
 8019e84:	b082      	sub	sp, #8
 8019e86:	461c      	mov	r4, r3
 8019e88:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8019e8c:	b1c3      	cbz	r3, 8019ec0 <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8019e8e:	b310      	cbz	r0, 8019ed6 <osMessageQueueGet+0x54>
 8019e90:	b321      	cbz	r1, 8019edc <osMessageQueueGet+0x5a>
 8019e92:	bb34      	cbnz	r4, 8019ee2 <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8019e94:	2300      	movs	r3, #0
 8019e96:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8019e98:	aa01      	add	r2, sp, #4
 8019e9a:	f000 fdd9 	bl	801aa50 <xQueueReceiveFromISR>
 8019e9e:	2801      	cmp	r0, #1
 8019ea0:	d122      	bne.n	8019ee8 <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8019ea2:	9801      	ldr	r0, [sp, #4]
 8019ea4:	b150      	cbz	r0, 8019ebc <osMessageQueueGet+0x3a>
 8019ea6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019eaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019eae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019eb2:	f3bf 8f4f 	dsb	sy
 8019eb6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8019eba:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8019ebc:	b002      	add	sp, #8
 8019ebe:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8019ec0:	b1a8      	cbz	r0, 8019eee <osMessageQueueGet+0x6c>
 8019ec2:	b1b9      	cbz	r1, 8019ef4 <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8019ec4:	4622      	mov	r2, r4
 8019ec6:	f000 fb72 	bl	801a5ae <xQueueReceive>
 8019eca:	2801      	cmp	r0, #1
 8019ecc:	d015      	beq.n	8019efa <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 8019ece:	b1b4      	cbz	r4, 8019efe <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 8019ed0:	f06f 0001 	mvn.w	r0, #1
 8019ed4:	e7f2      	b.n	8019ebc <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8019ed6:	f06f 0003 	mvn.w	r0, #3
 8019eda:	e7ef      	b.n	8019ebc <osMessageQueueGet+0x3a>
 8019edc:	f06f 0003 	mvn.w	r0, #3
 8019ee0:	e7ec      	b.n	8019ebc <osMessageQueueGet+0x3a>
 8019ee2:	f06f 0003 	mvn.w	r0, #3
 8019ee6:	e7e9      	b.n	8019ebc <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 8019ee8:	f06f 0002 	mvn.w	r0, #2
 8019eec:	e7e6      	b.n	8019ebc <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8019eee:	f06f 0003 	mvn.w	r0, #3
 8019ef2:	e7e3      	b.n	8019ebc <osMessageQueueGet+0x3a>
 8019ef4:	f06f 0003 	mvn.w	r0, #3
 8019ef8:	e7e0      	b.n	8019ebc <osMessageQueueGet+0x3a>
  stat = osOK;
 8019efa:	2000      	movs	r0, #0
 8019efc:	e7de      	b.n	8019ebc <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 8019efe:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8019f02:	e7db      	b.n	8019ebc <osMessageQueueGet+0x3a>

08019f04 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 8019f04:	b148      	cbz	r0, 8019f1a <osMessageQueueGetCount+0x16>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8019f06:	b508      	push	{r3, lr}
 8019f08:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8019f0c:	b112      	cbz	r2, 8019f14 <osMessageQueueGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8019f0e:	f000 fe09 	bl	801ab24 <uxQueueMessagesWaitingFromISR>
  else {
    count = uxQueueMessagesWaiting (hQueue);
  }

  return ((uint32_t)count);
}
 8019f12:	bd08      	pop	{r3, pc}
    count = uxQueueMessagesWaiting (hQueue);
 8019f14:	f000 fdf3 	bl	801aafe <uxQueueMessagesWaiting>
 8019f18:	e7fb      	b.n	8019f12 <osMessageQueueGetCount+0xe>
    count = 0U;
 8019f1a:	2000      	movs	r0, #0
}
 8019f1c:	4770      	bx	lr

08019f1e <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8019f1e:	b508      	push	{r3, lr}
 8019f20:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8019f24:	b92b      	cbnz	r3, 8019f32 <osMessageQueueReset+0x14>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 8019f26:	b138      	cbz	r0, 8019f38 <osMessageQueueReset+0x1a>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 8019f28:	2100      	movs	r1, #0
 8019f2a:	f000 f90e 	bl	801a14a <xQueueGenericReset>
    stat = osOK;
 8019f2e:	2000      	movs	r0, #0
  }

  return (stat);
}
 8019f30:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8019f32:	f06f 0005 	mvn.w	r0, #5
 8019f36:	e7fb      	b.n	8019f30 <osMessageQueueReset+0x12>
    stat = osErrorParameter;
 8019f38:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8019f3c:	e7f8      	b.n	8019f30 <osMessageQueueReset+0x12>
	...

08019f40 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8019f40:	4b03      	ldr	r3, [pc, #12]	@ (8019f50 <vApplicationGetIdleTaskMemory+0x10>)
 8019f42:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8019f44:	4b03      	ldr	r3, [pc, #12]	@ (8019f54 <vApplicationGetIdleTaskMemory+0x14>)
 8019f46:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8019f48:	2380      	movs	r3, #128	@ 0x80
 8019f4a:	6013      	str	r3, [r2, #0]
}
 8019f4c:	4770      	bx	lr
 8019f4e:	bf00      	nop
 8019f50:	200036d0 	.word	0x200036d0
 8019f54:	200034d0 	.word	0x200034d0

08019f58 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8019f58:	4b03      	ldr	r3, [pc, #12]	@ (8019f68 <vApplicationGetTimerTaskMemory+0x10>)
 8019f5a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8019f5c:	4b03      	ldr	r3, [pc, #12]	@ (8019f6c <vApplicationGetTimerTaskMemory+0x14>)
 8019f5e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8019f60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019f64:	6013      	str	r3, [r2, #0]
}
 8019f66:	4770      	bx	lr
 8019f68:	20003330 	.word	0x20003330
 8019f6c:	20002f2c 	.word	0x20002f2c

08019f70 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019f70:	f100 0308 	add.w	r3, r0, #8
 8019f74:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8019f76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019f7a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019f7c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019f7e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8019f80:	2300      	movs	r3, #0
 8019f82:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8019f84:	4770      	bx	lr

08019f86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8019f86:	2300      	movs	r3, #0
 8019f88:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8019f8a:	4770      	bx	lr

08019f8c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8019f8c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8019f8e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8019f90:	689a      	ldr	r2, [r3, #8]
 8019f92:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8019f94:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8019f96:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8019f98:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8019f9a:	6803      	ldr	r3, [r0, #0]
 8019f9c:	3301      	adds	r3, #1
 8019f9e:	6003      	str	r3, [r0, #0]
}
 8019fa0:	4770      	bx	lr

08019fa2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019fa2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8019fa4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8019fa6:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8019faa:	d011      	beq.n	8019fd0 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8019fac:	f100 0308 	add.w	r3, r0, #8
 8019fb0:	461c      	mov	r4, r3
 8019fb2:	685b      	ldr	r3, [r3, #4]
 8019fb4:	681a      	ldr	r2, [r3, #0]
 8019fb6:	42aa      	cmp	r2, r5
 8019fb8:	d9fa      	bls.n	8019fb0 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8019fba:	6863      	ldr	r3, [r4, #4]
 8019fbc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8019fbe:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8019fc0:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8019fc2:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8019fc4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8019fc6:	6803      	ldr	r3, [r0, #0]
 8019fc8:	3301      	adds	r3, #1
 8019fca:	6003      	str	r3, [r0, #0]
}
 8019fcc:	bc30      	pop	{r4, r5}
 8019fce:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8019fd0:	6904      	ldr	r4, [r0, #16]
 8019fd2:	e7f2      	b.n	8019fba <vListInsert+0x18>

08019fd4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8019fd4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8019fd6:	6841      	ldr	r1, [r0, #4]
 8019fd8:	6882      	ldr	r2, [r0, #8]
 8019fda:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8019fdc:	6841      	ldr	r1, [r0, #4]
 8019fde:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8019fe0:	685a      	ldr	r2, [r3, #4]
 8019fe2:	4282      	cmp	r2, r0
 8019fe4:	d006      	beq.n	8019ff4 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8019fe6:	2200      	movs	r2, #0
 8019fe8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8019fea:	681a      	ldr	r2, [r3, #0]
 8019fec:	3a01      	subs	r2, #1
 8019fee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019ff0:	6818      	ldr	r0, [r3, #0]
}
 8019ff2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8019ff4:	6882      	ldr	r2, [r0, #8]
 8019ff6:	605a      	str	r2, [r3, #4]
 8019ff8:	e7f5      	b.n	8019fe6 <uxListRemove+0x12>

08019ffa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8019ffa:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8019ffc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8019ffe:	b118      	cbz	r0, 801a008 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801a000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a002:	6818      	ldr	r0, [r3, #0]
 801a004:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 801a008:	4770      	bx	lr

0801a00a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801a00a:	b510      	push	{r4, lr}
 801a00c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a00e:	f001 fe49 	bl	801bca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801a012:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801a014:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801a016:	429a      	cmp	r2, r3
 801a018:	d004      	beq.n	801a024 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 801a01a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 801a01c:	f001 fe64 	bl	801bce8 <vPortExitCritical>

	return xReturn;
}
 801a020:	4620      	mov	r0, r4
 801a022:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 801a024:	2401      	movs	r4, #1
 801a026:	e7f9      	b.n	801a01c <prvIsQueueFull+0x12>

0801a028 <prvIsQueueEmpty>:
{
 801a028:	b510      	push	{r4, lr}
 801a02a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801a02c:	f001 fe3a 	bl	801bca4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801a030:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801a032:	b923      	cbnz	r3, 801a03e <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 801a034:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 801a036:	f001 fe57 	bl	801bce8 <vPortExitCritical>
}
 801a03a:	4620      	mov	r0, r4
 801a03c:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 801a03e:	2400      	movs	r4, #0
 801a040:	e7f9      	b.n	801a036 <prvIsQueueEmpty+0xe>

0801a042 <prvCopyDataToQueue>:
{
 801a042:	b570      	push	{r4, r5, r6, lr}
 801a044:	4604      	mov	r4, r0
 801a046:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a048:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801a04a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 801a04c:	b95a      	cbnz	r2, 801a066 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a04e:	6803      	ldr	r3, [r0, #0]
 801a050:	b11b      	cbz	r3, 801a05a <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 801a052:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a054:	3601      	adds	r6, #1
 801a056:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 801a058:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a05a:	6880      	ldr	r0, [r0, #8]
 801a05c:	f001 faea 	bl	801b634 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801a060:	2300      	movs	r3, #0
 801a062:	60a3      	str	r3, [r4, #8]
 801a064:	e7f6      	b.n	801a054 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 801a066:	b96d      	cbnz	r5, 801a084 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a068:	6840      	ldr	r0, [r0, #4]
 801a06a:	f014 f945 	bl	802e2f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a06e:	6863      	ldr	r3, [r4, #4]
 801a070:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801a072:	4413      	add	r3, r2
 801a074:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a076:	68a2      	ldr	r2, [r4, #8]
 801a078:	4293      	cmp	r3, r2
 801a07a:	d319      	bcc.n	801a0b0 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801a07c:	6823      	ldr	r3, [r4, #0]
 801a07e:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 801a080:	4628      	mov	r0, r5
 801a082:	e7e7      	b.n	801a054 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801a084:	68c0      	ldr	r0, [r0, #12]
 801a086:	f014 f937 	bl	802e2f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801a08a:	68e3      	ldr	r3, [r4, #12]
 801a08c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801a08e:	4251      	negs	r1, r2
 801a090:	1a9b      	subs	r3, r3, r2
 801a092:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a094:	6822      	ldr	r2, [r4, #0]
 801a096:	4293      	cmp	r3, r2
 801a098:	d202      	bcs.n	801a0a0 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801a09a:	68a3      	ldr	r3, [r4, #8]
 801a09c:	440b      	add	r3, r1
 801a09e:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 801a0a0:	2d02      	cmp	r5, #2
 801a0a2:	d001      	beq.n	801a0a8 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 801a0a4:	2000      	movs	r0, #0
 801a0a6:	e7d5      	b.n	801a054 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a0a8:	b126      	cbz	r6, 801a0b4 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 801a0aa:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 801a0ac:	2000      	movs	r0, #0
 801a0ae:	e7d1      	b.n	801a054 <prvCopyDataToQueue+0x12>
 801a0b0:	4628      	mov	r0, r5
 801a0b2:	e7cf      	b.n	801a054 <prvCopyDataToQueue+0x12>
 801a0b4:	2000      	movs	r0, #0
 801a0b6:	e7cd      	b.n	801a054 <prvCopyDataToQueue+0x12>

0801a0b8 <prvCopyDataFromQueue>:
{
 801a0b8:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801a0ba:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 801a0bc:	b16a      	cbz	r2, 801a0da <prvCopyDataFromQueue+0x22>
{
 801a0be:	b510      	push	{r4, lr}
 801a0c0:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a0c2:	68d9      	ldr	r1, [r3, #12]
 801a0c4:	4411      	add	r1, r2
 801a0c6:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801a0c8:	689c      	ldr	r4, [r3, #8]
 801a0ca:	42a1      	cmp	r1, r4
 801a0cc:	d301      	bcc.n	801a0d2 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801a0ce:	6819      	ldr	r1, [r3, #0]
 801a0d0:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a0d2:	68d9      	ldr	r1, [r3, #12]
 801a0d4:	f014 f910 	bl	802e2f8 <memcpy>
}
 801a0d8:	bd10      	pop	{r4, pc}
 801a0da:	4770      	bx	lr

0801a0dc <prvUnlockQueue>:
{
 801a0dc:	b538      	push	{r3, r4, r5, lr}
 801a0de:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 801a0e0:	f001 fde0 	bl	801bca4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801a0e4:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 801a0e8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a0ea:	e001      	b.n	801a0f0 <prvUnlockQueue+0x14>
			--cTxLock;
 801a0ec:	3c01      	subs	r4, #1
 801a0ee:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a0f0:	2c00      	cmp	r4, #0
 801a0f2:	dd0a      	ble.n	801a10a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a0f4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801a0f6:	b143      	cbz	r3, 801a10a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a0f8:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 801a0fc:	f001 f99e 	bl	801b43c <xTaskRemoveFromEventList>
 801a100:	2800      	cmp	r0, #0
 801a102:	d0f3      	beq.n	801a0ec <prvUnlockQueue+0x10>
						vTaskMissedYield();
 801a104:	f001 fa2e 	bl	801b564 <vTaskMissedYield>
 801a108:	e7f0      	b.n	801a0ec <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 801a10a:	23ff      	movs	r3, #255	@ 0xff
 801a10c:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 801a110:	f001 fdea 	bl	801bce8 <vPortExitCritical>
	taskENTER_CRITICAL();
 801a114:	f001 fdc6 	bl	801bca4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 801a118:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 801a11c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a11e:	e001      	b.n	801a124 <prvUnlockQueue+0x48>
				--cRxLock;
 801a120:	3c01      	subs	r4, #1
 801a122:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a124:	2c00      	cmp	r4, #0
 801a126:	dd0a      	ble.n	801a13e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a128:	692b      	ldr	r3, [r5, #16]
 801a12a:	b143      	cbz	r3, 801a13e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a12c:	f105 0010 	add.w	r0, r5, #16
 801a130:	f001 f984 	bl	801b43c <xTaskRemoveFromEventList>
 801a134:	2800      	cmp	r0, #0
 801a136:	d0f3      	beq.n	801a120 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 801a138:	f001 fa14 	bl	801b564 <vTaskMissedYield>
 801a13c:	e7f0      	b.n	801a120 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 801a13e:	23ff      	movs	r3, #255	@ 0xff
 801a140:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 801a144:	f001 fdd0 	bl	801bce8 <vPortExitCritical>
}
 801a148:	bd38      	pop	{r3, r4, r5, pc}

0801a14a <xQueueGenericReset>:
{
 801a14a:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 801a14c:	b1e0      	cbz	r0, 801a188 <xQueueGenericReset+0x3e>
 801a14e:	460d      	mov	r5, r1
 801a150:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801a152:	f001 fda7 	bl	801bca4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a156:	6823      	ldr	r3, [r4, #0]
 801a158:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801a15a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 801a15c:	fb01 3002 	mla	r0, r1, r2, r3
 801a160:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801a162:	2000      	movs	r0, #0
 801a164:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801a166:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a168:	3a01      	subs	r2, #1
 801a16a:	fb02 3301 	mla	r3, r2, r1, r3
 801a16e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801a170:	23ff      	movs	r3, #255	@ 0xff
 801a172:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801a176:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 801a17a:	b9fd      	cbnz	r5, 801a1bc <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a17c:	6923      	ldr	r3, [r4, #16]
 801a17e:	b963      	cbnz	r3, 801a19a <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 801a180:	f001 fdb2 	bl	801bce8 <vPortExitCritical>
}
 801a184:	2001      	movs	r0, #1
 801a186:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801a188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a18c:	f383 8811 	msr	BASEPRI, r3
 801a190:	f3bf 8f6f 	isb	sy
 801a194:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801a198:	e7fe      	b.n	801a198 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a19a:	f104 0010 	add.w	r0, r4, #16
 801a19e:	f001 f94d 	bl	801b43c <xTaskRemoveFromEventList>
 801a1a2:	2800      	cmp	r0, #0
 801a1a4:	d0ec      	beq.n	801a180 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 801a1a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a1aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a1ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a1b2:	f3bf 8f4f 	dsb	sy
 801a1b6:	f3bf 8f6f 	isb	sy
 801a1ba:	e7e1      	b.n	801a180 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801a1bc:	f104 0010 	add.w	r0, r4, #16
 801a1c0:	f7ff fed6 	bl	8019f70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801a1c4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801a1c8:	f7ff fed2 	bl	8019f70 <vListInitialise>
 801a1cc:	e7d8      	b.n	801a180 <xQueueGenericReset+0x36>

0801a1ce <prvInitialiseNewQueue>:
{
 801a1ce:	b538      	push	{r3, r4, r5, lr}
 801a1d0:	461d      	mov	r5, r3
 801a1d2:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 801a1d4:	460b      	mov	r3, r1
 801a1d6:	b949      	cbnz	r1, 801a1ec <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801a1d8:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 801a1da:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801a1dc:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801a1de:	2101      	movs	r1, #1
 801a1e0:	4620      	mov	r0, r4
 801a1e2:	f7ff ffb2 	bl	801a14a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 801a1e6:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 801a1ea:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801a1ec:	6022      	str	r2, [r4, #0]
 801a1ee:	e7f4      	b.n	801a1da <prvInitialiseNewQueue+0xc>

0801a1f0 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801a1f0:	b940      	cbnz	r0, 801a204 <xQueueGenericCreateStatic+0x14>
 801a1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a1f6:	f383 8811 	msr	BASEPRI, r3
 801a1fa:	f3bf 8f6f 	isb	sy
 801a1fe:	f3bf 8f4f 	dsb	sy
 801a202:	e7fe      	b.n	801a202 <xQueueGenericCreateStatic+0x12>
	{
 801a204:	b510      	push	{r4, lr}
 801a206:	b084      	sub	sp, #16
 801a208:	461c      	mov	r4, r3
 801a20a:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 801a20c:	b153      	cbz	r3, 801a224 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801a20e:	b192      	cbz	r2, 801a236 <xQueueGenericCreateStatic+0x46>
 801a210:	b989      	cbnz	r1, 801a236 <xQueueGenericCreateStatic+0x46>
 801a212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a216:	f383 8811 	msr	BASEPRI, r3
 801a21a:	f3bf 8f6f 	isb	sy
 801a21e:	f3bf 8f4f 	dsb	sy
 801a222:	e7fe      	b.n	801a222 <xQueueGenericCreateStatic+0x32>
 801a224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a228:	f383 8811 	msr	BASEPRI, r3
 801a22c:	f3bf 8f6f 	isb	sy
 801a230:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 801a234:	e7fe      	b.n	801a234 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801a236:	b16a      	cbz	r2, 801a254 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 801a238:	2350      	movs	r3, #80	@ 0x50
 801a23a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 801a23c:	9b03      	ldr	r3, [sp, #12]
 801a23e:	2b50      	cmp	r3, #80	@ 0x50
 801a240:	d013      	beq.n	801a26a <xQueueGenericCreateStatic+0x7a>
 801a242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a246:	f383 8811 	msr	BASEPRI, r3
 801a24a:	f3bf 8f6f 	isb	sy
 801a24e:	f3bf 8f4f 	dsb	sy
 801a252:	e7fe      	b.n	801a252 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801a254:	2900      	cmp	r1, #0
 801a256:	d0ef      	beq.n	801a238 <xQueueGenericCreateStatic+0x48>
 801a258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a25c:	f383 8811 	msr	BASEPRI, r3
 801a260:	f3bf 8f6f 	isb	sy
 801a264:	f3bf 8f4f 	dsb	sy
 801a268:	e7fe      	b.n	801a268 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801a26a:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801a26c:	2301      	movs	r3, #1
 801a26e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801a272:	9400      	str	r4, [sp, #0]
 801a274:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801a278:	4660      	mov	r0, ip
 801a27a:	f7ff ffa8 	bl	801a1ce <prvInitialiseNewQueue>
	}
 801a27e:	4620      	mov	r0, r4
 801a280:	b004      	add	sp, #16
 801a282:	bd10      	pop	{r4, pc}

0801a284 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801a284:	b940      	cbnz	r0, 801a298 <xQueueGenericCreate+0x14>
 801a286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a28a:	f383 8811 	msr	BASEPRI, r3
 801a28e:	f3bf 8f6f 	isb	sy
 801a292:	f3bf 8f4f 	dsb	sy
 801a296:	e7fe      	b.n	801a296 <xQueueGenericCreate+0x12>
	{
 801a298:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a29a:	b083      	sub	sp, #12
 801a29c:	460d      	mov	r5, r1
 801a29e:	4614      	mov	r4, r2
 801a2a0:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a2a2:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801a2a6:	3050      	adds	r0, #80	@ 0x50
 801a2a8:	f001 feb6 	bl	801c018 <pvPortMalloc>
		if( pxNewQueue != NULL )
 801a2ac:	4607      	mov	r7, r0
 801a2ae:	b150      	cbz	r0, 801a2c6 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801a2b0:	2300      	movs	r3, #0
 801a2b2:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801a2b6:	9000      	str	r0, [sp, #0]
 801a2b8:	4623      	mov	r3, r4
 801a2ba:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 801a2be:	4629      	mov	r1, r5
 801a2c0:	4630      	mov	r0, r6
 801a2c2:	f7ff ff84 	bl	801a1ce <prvInitialiseNewQueue>
	}
 801a2c6:	4638      	mov	r0, r7
 801a2c8:	b003      	add	sp, #12
 801a2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a2cc <xQueueGenericSend>:
{
 801a2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2ce:	b085      	sub	sp, #20
 801a2d0:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 801a2d2:	b188      	cbz	r0, 801a2f8 <xQueueGenericSend+0x2c>
 801a2d4:	460f      	mov	r7, r1
 801a2d6:	461d      	mov	r5, r3
 801a2d8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a2da:	b1b1      	cbz	r1, 801a30a <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a2dc:	2d02      	cmp	r5, #2
 801a2de:	d120      	bne.n	801a322 <xQueueGenericSend+0x56>
 801a2e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801a2e2:	2b01      	cmp	r3, #1
 801a2e4:	d01d      	beq.n	801a322 <xQueueGenericSend+0x56>
 801a2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a2ea:	f383 8811 	msr	BASEPRI, r3
 801a2ee:	f3bf 8f6f 	isb	sy
 801a2f2:	f3bf 8f4f 	dsb	sy
 801a2f6:	e7fe      	b.n	801a2f6 <xQueueGenericSend+0x2a>
 801a2f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a2fc:	f383 8811 	msr	BASEPRI, r3
 801a300:	f3bf 8f6f 	isb	sy
 801a304:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801a308:	e7fe      	b.n	801a308 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a30a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d0e5      	beq.n	801a2dc <xQueueGenericSend+0x10>
 801a310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a314:	f383 8811 	msr	BASEPRI, r3
 801a318:	f3bf 8f6f 	isb	sy
 801a31c:	f3bf 8f4f 	dsb	sy
 801a320:	e7fe      	b.n	801a320 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a322:	f001 f92b 	bl	801b57c <xTaskGetSchedulerState>
 801a326:	4606      	mov	r6, r0
 801a328:	b958      	cbnz	r0, 801a342 <xQueueGenericSend+0x76>
 801a32a:	9b01      	ldr	r3, [sp, #4]
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d048      	beq.n	801a3c2 <xQueueGenericSend+0xf6>
 801a330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a334:	f383 8811 	msr	BASEPRI, r3
 801a338:	f3bf 8f6f 	isb	sy
 801a33c:	f3bf 8f4f 	dsb	sy
 801a340:	e7fe      	b.n	801a340 <xQueueGenericSend+0x74>
 801a342:	2600      	movs	r6, #0
 801a344:	e03d      	b.n	801a3c2 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a346:	462a      	mov	r2, r5
 801a348:	4639      	mov	r1, r7
 801a34a:	4620      	mov	r0, r4
 801a34c:	f7ff fe79 	bl	801a042 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a350:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801a352:	b97b      	cbnz	r3, 801a374 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 801a354:	b148      	cbz	r0, 801a36a <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 801a356:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a35a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a35e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a362:	f3bf 8f4f 	dsb	sy
 801a366:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 801a36a:	f001 fcbd 	bl	801bce8 <vPortExitCritical>
				return pdPASS;
 801a36e:	2001      	movs	r0, #1
}
 801a370:	b005      	add	sp, #20
 801a372:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a374:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801a378:	f001 f860 	bl	801b43c <xTaskRemoveFromEventList>
 801a37c:	2800      	cmp	r0, #0
 801a37e:	d0f4      	beq.n	801a36a <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 801a380:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a384:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a388:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a38c:	f3bf 8f4f 	dsb	sy
 801a390:	f3bf 8f6f 	isb	sy
 801a394:	e7e9      	b.n	801a36a <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 801a396:	f001 fca7 	bl	801bce8 <vPortExitCritical>
					return errQUEUE_FULL;
 801a39a:	2000      	movs	r0, #0
 801a39c:	e7e8      	b.n	801a370 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a39e:	a802      	add	r0, sp, #8
 801a3a0:	f001 f892 	bl	801b4c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a3a4:	2601      	movs	r6, #1
 801a3a6:	e019      	b.n	801a3dc <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 801a3a8:	2300      	movs	r3, #0
 801a3aa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801a3ae:	e021      	b.n	801a3f4 <xQueueGenericSend+0x128>
 801a3b0:	2300      	movs	r3, #0
 801a3b2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801a3b6:	e023      	b.n	801a400 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 801a3b8:	4620      	mov	r0, r4
 801a3ba:	f7ff fe8f 	bl	801a0dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a3be:	f000 ff15 	bl	801b1ec <xTaskResumeAll>
		taskENTER_CRITICAL();
 801a3c2:	f001 fc6f 	bl	801bca4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a3c6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801a3c8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801a3ca:	429a      	cmp	r2, r3
 801a3cc:	d3bb      	bcc.n	801a346 <xQueueGenericSend+0x7a>
 801a3ce:	2d02      	cmp	r5, #2
 801a3d0:	d0b9      	beq.n	801a346 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 801a3d2:	9b01      	ldr	r3, [sp, #4]
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	d0de      	beq.n	801a396 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 801a3d8:	2e00      	cmp	r6, #0
 801a3da:	d0e0      	beq.n	801a39e <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 801a3dc:	f001 fc84 	bl	801bce8 <vPortExitCritical>
		vTaskSuspendAll();
 801a3e0:	f000 fe6a 	bl	801b0b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a3e4:	f001 fc5e 	bl	801bca4 <vPortEnterCritical>
 801a3e8:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 801a3ec:	b252      	sxtb	r2, r2
 801a3ee:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801a3f2:	d0d9      	beq.n	801a3a8 <xQueueGenericSend+0xdc>
 801a3f4:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 801a3f8:	b252      	sxtb	r2, r2
 801a3fa:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801a3fe:	d0d7      	beq.n	801a3b0 <xQueueGenericSend+0xe4>
 801a400:	f001 fc72 	bl	801bce8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a404:	a901      	add	r1, sp, #4
 801a406:	a802      	add	r0, sp, #8
 801a408:	f001 f86a 	bl	801b4e0 <xTaskCheckForTimeOut>
 801a40c:	b9d8      	cbnz	r0, 801a446 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801a40e:	4620      	mov	r0, r4
 801a410:	f7ff fdfb 	bl	801a00a <prvIsQueueFull>
 801a414:	2800      	cmp	r0, #0
 801a416:	d0cf      	beq.n	801a3b8 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801a418:	9901      	ldr	r1, [sp, #4]
 801a41a:	f104 0010 	add.w	r0, r4, #16
 801a41e:	f000 ffd9 	bl	801b3d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a422:	4620      	mov	r0, r4
 801a424:	f7ff fe5a 	bl	801a0dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a428:	f000 fee0 	bl	801b1ec <xTaskResumeAll>
 801a42c:	2800      	cmp	r0, #0
 801a42e:	d1c8      	bne.n	801a3c2 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 801a430:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a434:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a438:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a43c:	f3bf 8f4f 	dsb	sy
 801a440:	f3bf 8f6f 	isb	sy
 801a444:	e7bd      	b.n	801a3c2 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 801a446:	4620      	mov	r0, r4
 801a448:	f7ff fe48 	bl	801a0dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a44c:	f000 fece 	bl	801b1ec <xTaskResumeAll>
			return errQUEUE_FULL;
 801a450:	2000      	movs	r0, #0
 801a452:	e78d      	b.n	801a370 <xQueueGenericSend+0xa4>

0801a454 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 801a454:	b148      	cbz	r0, 801a46a <prvInitialiseMutex+0x16>
	{
 801a456:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801a458:	2100      	movs	r1, #0
 801a45a:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801a45c:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801a45e:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801a460:	460b      	mov	r3, r1
 801a462:	460a      	mov	r2, r1
 801a464:	f7ff ff32 	bl	801a2cc <xQueueGenericSend>
	}
 801a468:	bd08      	pop	{r3, pc}
 801a46a:	4770      	bx	lr

0801a46c <xQueueCreateMutex>:
	{
 801a46c:	b510      	push	{r4, lr}
 801a46e:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801a470:	2100      	movs	r1, #0
 801a472:	2001      	movs	r0, #1
 801a474:	f7ff ff06 	bl	801a284 <xQueueGenericCreate>
 801a478:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801a47a:	f7ff ffeb 	bl	801a454 <prvInitialiseMutex>
	}
 801a47e:	4620      	mov	r0, r4
 801a480:	bd10      	pop	{r4, pc}

0801a482 <xQueueCreateMutexStatic>:
	{
 801a482:	b510      	push	{r4, lr}
 801a484:	b082      	sub	sp, #8
 801a486:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801a488:	9000      	str	r0, [sp, #0]
 801a48a:	2200      	movs	r2, #0
 801a48c:	4611      	mov	r1, r2
 801a48e:	2001      	movs	r0, #1
 801a490:	f7ff feae 	bl	801a1f0 <xQueueGenericCreateStatic>
 801a494:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801a496:	f7ff ffdd 	bl	801a454 <prvInitialiseMutex>
	}
 801a49a:	4620      	mov	r0, r4
 801a49c:	b002      	add	sp, #8
 801a49e:	bd10      	pop	{r4, pc}

0801a4a0 <xQueueGiveMutexRecursive>:
	{
 801a4a0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 801a4a2:	b138      	cbz	r0, 801a4b4 <xQueueGiveMutexRecursive+0x14>
 801a4a4:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801a4a6:	6885      	ldr	r5, [r0, #8]
 801a4a8:	f001 f862 	bl	801b570 <xTaskGetCurrentTaskHandle>
 801a4ac:	4285      	cmp	r5, r0
 801a4ae:	d00a      	beq.n	801a4c6 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 801a4b0:	2000      	movs	r0, #0
	}
 801a4b2:	bd38      	pop	{r3, r4, r5, pc}
 801a4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4b8:	f383 8811 	msr	BASEPRI, r3
 801a4bc:	f3bf 8f6f 	isb	sy
 801a4c0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 801a4c4:	e7fe      	b.n	801a4c4 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801a4c6:	68e3      	ldr	r3, [r4, #12]
 801a4c8:	3b01      	subs	r3, #1
 801a4ca:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 801a4cc:	b10b      	cbz	r3, 801a4d2 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 801a4ce:	2001      	movs	r0, #1
		return xReturn;
 801a4d0:	e7ef      	b.n	801a4b2 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801a4d2:	461a      	mov	r2, r3
 801a4d4:	4619      	mov	r1, r3
 801a4d6:	4620      	mov	r0, r4
 801a4d8:	f7ff fef8 	bl	801a2cc <xQueueGenericSend>
			xReturn = pdPASS;
 801a4dc:	2001      	movs	r0, #1
 801a4de:	e7e8      	b.n	801a4b2 <xQueueGiveMutexRecursive+0x12>

0801a4e0 <xQueueGenericSendFromISR>:
{
 801a4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 801a4e4:	b190      	cbz	r0, 801a50c <xQueueGenericSendFromISR+0x2c>
 801a4e6:	460f      	mov	r7, r1
 801a4e8:	4616      	mov	r6, r2
 801a4ea:	461c      	mov	r4, r3
 801a4ec:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a4ee:	b1b1      	cbz	r1, 801a51e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a4f0:	2c02      	cmp	r4, #2
 801a4f2:	d120      	bne.n	801a536 <xQueueGenericSendFromISR+0x56>
 801a4f4:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 801a4f6:	2b01      	cmp	r3, #1
 801a4f8:	d01d      	beq.n	801a536 <xQueueGenericSendFromISR+0x56>
 801a4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4fe:	f383 8811 	msr	BASEPRI, r3
 801a502:	f3bf 8f6f 	isb	sy
 801a506:	f3bf 8f4f 	dsb	sy
 801a50a:	e7fe      	b.n	801a50a <xQueueGenericSendFromISR+0x2a>
 801a50c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a510:	f383 8811 	msr	BASEPRI, r3
 801a514:	f3bf 8f6f 	isb	sy
 801a518:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801a51c:	e7fe      	b.n	801a51c <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a51e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801a520:	2b00      	cmp	r3, #0
 801a522:	d0e5      	beq.n	801a4f0 <xQueueGenericSendFromISR+0x10>
 801a524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a528:	f383 8811 	msr	BASEPRI, r3
 801a52c:	f3bf 8f6f 	isb	sy
 801a530:	f3bf 8f4f 	dsb	sy
 801a534:	e7fe      	b.n	801a534 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a536:	f001 fcdb 	bl	801bef0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801a53a:	f3ef 8811 	mrs	r8, BASEPRI
 801a53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a542:	f383 8811 	msr	BASEPRI, r3
 801a546:	f3bf 8f6f 	isb	sy
 801a54a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a54e:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 801a550:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 801a552:	429a      	cmp	r2, r3
 801a554:	d306      	bcc.n	801a564 <xQueueGenericSendFromISR+0x84>
 801a556:	2c02      	cmp	r4, #2
 801a558:	d004      	beq.n	801a564 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 801a55a:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801a55c:	f388 8811 	msr	BASEPRI, r8
}
 801a560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 801a564:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 801a568:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a56c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a56e:	4622      	mov	r2, r4
 801a570:	4639      	mov	r1, r7
 801a572:	4628      	mov	r0, r5
 801a574:	f7ff fd65 	bl	801a042 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 801a578:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801a57c:	d006      	beq.n	801a58c <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801a57e:	f109 0301 	add.w	r3, r9, #1
 801a582:	b25b      	sxtb	r3, r3
 801a584:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 801a588:	2001      	movs	r0, #1
 801a58a:	e7e7      	b.n	801a55c <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a58c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801a58e:	b90b      	cbnz	r3, 801a594 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 801a590:	2001      	movs	r0, #1
 801a592:	e7e3      	b.n	801a55c <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a594:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 801a598:	f000 ff50 	bl	801b43c <xTaskRemoveFromEventList>
 801a59c:	b118      	cbz	r0, 801a5a6 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 801a59e:	b126      	cbz	r6, 801a5aa <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a5a0:	2001      	movs	r0, #1
 801a5a2:	6030      	str	r0, [r6, #0]
 801a5a4:	e7da      	b.n	801a55c <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 801a5a6:	2001      	movs	r0, #1
 801a5a8:	e7d8      	b.n	801a55c <xQueueGenericSendFromISR+0x7c>
 801a5aa:	2001      	movs	r0, #1
 801a5ac:	e7d6      	b.n	801a55c <xQueueGenericSendFromISR+0x7c>

0801a5ae <xQueueReceive>:
{
 801a5ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a5b0:	b085      	sub	sp, #20
 801a5b2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 801a5b4:	b190      	cbz	r0, 801a5dc <xQueueReceive+0x2e>
 801a5b6:	460f      	mov	r7, r1
 801a5b8:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a5ba:	b1c1      	cbz	r1, 801a5ee <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a5bc:	f000 ffde 	bl	801b57c <xTaskGetSchedulerState>
 801a5c0:	4606      	mov	r6, r0
 801a5c2:	bb00      	cbnz	r0, 801a606 <xQueueReceive+0x58>
 801a5c4:	9b01      	ldr	r3, [sp, #4]
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d05e      	beq.n	801a688 <xQueueReceive+0xda>
	__asm volatile
 801a5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a5ce:	f383 8811 	msr	BASEPRI, r3
 801a5d2:	f3bf 8f6f 	isb	sy
 801a5d6:	f3bf 8f4f 	dsb	sy
 801a5da:	e7fe      	b.n	801a5da <xQueueReceive+0x2c>
 801a5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a5e0:	f383 8811 	msr	BASEPRI, r3
 801a5e4:	f3bf 8f6f 	isb	sy
 801a5e8:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 801a5ec:	e7fe      	b.n	801a5ec <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a5ee:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d0e3      	beq.n	801a5bc <xQueueReceive+0xe>
 801a5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a5f8:	f383 8811 	msr	BASEPRI, r3
 801a5fc:	f3bf 8f6f 	isb	sy
 801a600:	f3bf 8f4f 	dsb	sy
 801a604:	e7fe      	b.n	801a604 <xQueueReceive+0x56>
 801a606:	2600      	movs	r6, #0
 801a608:	e03e      	b.n	801a688 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a60a:	4639      	mov	r1, r7
 801a60c:	4620      	mov	r0, r4
 801a60e:	f7ff fd53 	bl	801a0b8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a612:	3d01      	subs	r5, #1
 801a614:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a616:	6923      	ldr	r3, [r4, #16]
 801a618:	b923      	cbnz	r3, 801a624 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 801a61a:	f001 fb65 	bl	801bce8 <vPortExitCritical>
				return pdPASS;
 801a61e:	2001      	movs	r0, #1
}
 801a620:	b005      	add	sp, #20
 801a622:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a624:	f104 0010 	add.w	r0, r4, #16
 801a628:	f000 ff08 	bl	801b43c <xTaskRemoveFromEventList>
 801a62c:	2800      	cmp	r0, #0
 801a62e:	d0f4      	beq.n	801a61a <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 801a630:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a638:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a63c:	f3bf 8f4f 	dsb	sy
 801a640:	f3bf 8f6f 	isb	sy
 801a644:	e7e9      	b.n	801a61a <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 801a646:	f001 fb4f 	bl	801bce8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801a64a:	2000      	movs	r0, #0
 801a64c:	e7e8      	b.n	801a620 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a64e:	a802      	add	r0, sp, #8
 801a650:	f000 ff3a 	bl	801b4c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a654:	2601      	movs	r6, #1
 801a656:	e021      	b.n	801a69c <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 801a658:	2300      	movs	r3, #0
 801a65a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801a65e:	e029      	b.n	801a6b4 <xQueueReceive+0x106>
 801a660:	2300      	movs	r3, #0
 801a662:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801a666:	e02b      	b.n	801a6c0 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 801a668:	4620      	mov	r0, r4
 801a66a:	f7ff fd37 	bl	801a0dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a66e:	f000 fdbd 	bl	801b1ec <xTaskResumeAll>
 801a672:	e009      	b.n	801a688 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 801a674:	4620      	mov	r0, r4
 801a676:	f7ff fd31 	bl	801a0dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a67a:	f000 fdb7 	bl	801b1ec <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a67e:	4620      	mov	r0, r4
 801a680:	f7ff fcd2 	bl	801a028 <prvIsQueueEmpty>
 801a684:	2800      	cmp	r0, #0
 801a686:	d13f      	bne.n	801a708 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 801a688:	f001 fb0c 	bl	801bca4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a68c:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a68e:	2d00      	cmp	r5, #0
 801a690:	d1bb      	bne.n	801a60a <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 801a692:	9b01      	ldr	r3, [sp, #4]
 801a694:	2b00      	cmp	r3, #0
 801a696:	d0d6      	beq.n	801a646 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 801a698:	2e00      	cmp	r6, #0
 801a69a:	d0d8      	beq.n	801a64e <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 801a69c:	f001 fb24 	bl	801bce8 <vPortExitCritical>
		vTaskSuspendAll();
 801a6a0:	f000 fd0a 	bl	801b0b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a6a4:	f001 fafe 	bl	801bca4 <vPortEnterCritical>
 801a6a8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801a6ac:	b25b      	sxtb	r3, r3
 801a6ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a6b2:	d0d1      	beq.n	801a658 <xQueueReceive+0xaa>
 801a6b4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801a6b8:	b25b      	sxtb	r3, r3
 801a6ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a6be:	d0cf      	beq.n	801a660 <xQueueReceive+0xb2>
 801a6c0:	f001 fb12 	bl	801bce8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a6c4:	a901      	add	r1, sp, #4
 801a6c6:	a802      	add	r0, sp, #8
 801a6c8:	f000 ff0a 	bl	801b4e0 <xTaskCheckForTimeOut>
 801a6cc:	2800      	cmp	r0, #0
 801a6ce:	d1d1      	bne.n	801a674 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a6d0:	4620      	mov	r0, r4
 801a6d2:	f7ff fca9 	bl	801a028 <prvIsQueueEmpty>
 801a6d6:	2800      	cmp	r0, #0
 801a6d8:	d0c6      	beq.n	801a668 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a6da:	9901      	ldr	r1, [sp, #4]
 801a6dc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801a6e0:	f000 fe78 	bl	801b3d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a6e4:	4620      	mov	r0, r4
 801a6e6:	f7ff fcf9 	bl	801a0dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a6ea:	f000 fd7f 	bl	801b1ec <xTaskResumeAll>
 801a6ee:	2800      	cmp	r0, #0
 801a6f0:	d1ca      	bne.n	801a688 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 801a6f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a6f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a6fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a6fe:	f3bf 8f4f 	dsb	sy
 801a702:	f3bf 8f6f 	isb	sy
 801a706:	e7bf      	b.n	801a688 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 801a708:	2000      	movs	r0, #0
 801a70a:	e789      	b.n	801a620 <xQueueReceive+0x72>

0801a70c <xQueueSemaphoreTake>:
{
 801a70c:	b570      	push	{r4, r5, r6, lr}
 801a70e:	b084      	sub	sp, #16
 801a710:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 801a712:	b158      	cbz	r0, 801a72c <xQueueSemaphoreTake+0x20>
 801a714:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 801a716:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801a718:	b18b      	cbz	r3, 801a73e <xQueueSemaphoreTake+0x32>
 801a71a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a71e:	f383 8811 	msr	BASEPRI, r3
 801a722:	f3bf 8f6f 	isb	sy
 801a726:	f3bf 8f4f 	dsb	sy
 801a72a:	e7fe      	b.n	801a72a <xQueueSemaphoreTake+0x1e>
 801a72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a730:	f383 8811 	msr	BASEPRI, r3
 801a734:	f3bf 8f6f 	isb	sy
 801a738:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 801a73c:	e7fe      	b.n	801a73c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a73e:	f000 ff1d 	bl	801b57c <xTaskGetSchedulerState>
 801a742:	4605      	mov	r5, r0
 801a744:	b950      	cbnz	r0, 801a75c <xQueueSemaphoreTake+0x50>
 801a746:	9b01      	ldr	r3, [sp, #4]
 801a748:	b15b      	cbz	r3, 801a762 <xQueueSemaphoreTake+0x56>
 801a74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a74e:	f383 8811 	msr	BASEPRI, r3
 801a752:	f3bf 8f6f 	isb	sy
 801a756:	f3bf 8f4f 	dsb	sy
 801a75a:	e7fe      	b.n	801a75a <xQueueSemaphoreTake+0x4e>
 801a75c:	2600      	movs	r6, #0
 801a75e:	4635      	mov	r5, r6
 801a760:	e055      	b.n	801a80e <xQueueSemaphoreTake+0x102>
 801a762:	4606      	mov	r6, r0
 801a764:	e053      	b.n	801a80e <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801a766:	3b01      	subs	r3, #1
 801a768:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a76a:	6823      	ldr	r3, [r4, #0]
 801a76c:	b13b      	cbz	r3, 801a77e <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a76e:	6923      	ldr	r3, [r4, #16]
 801a770:	b94b      	cbnz	r3, 801a786 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 801a772:	f001 fab9 	bl	801bce8 <vPortExitCritical>
				return pdPASS;
 801a776:	2601      	movs	r6, #1
}
 801a778:	4630      	mov	r0, r6
 801a77a:	b004      	add	sp, #16
 801a77c:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801a77e:	f000 fff1 	bl	801b764 <pvTaskIncrementMutexHeldCount>
 801a782:	60a0      	str	r0, [r4, #8]
 801a784:	e7f3      	b.n	801a76e <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a786:	f104 0010 	add.w	r0, r4, #16
 801a78a:	f000 fe57 	bl	801b43c <xTaskRemoveFromEventList>
 801a78e:	2800      	cmp	r0, #0
 801a790:	d0ef      	beq.n	801a772 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 801a792:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a79a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a79e:	f3bf 8f4f 	dsb	sy
 801a7a2:	f3bf 8f6f 	isb	sy
 801a7a6:	e7e4      	b.n	801a772 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 801a7a8:	b146      	cbz	r6, 801a7bc <xQueueSemaphoreTake+0xb0>
 801a7aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a7ae:	f383 8811 	msr	BASEPRI, r3
 801a7b2:	f3bf 8f6f 	isb	sy
 801a7b6:	f3bf 8f4f 	dsb	sy
 801a7ba:	e7fe      	b.n	801a7ba <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 801a7bc:	f001 fa94 	bl	801bce8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801a7c0:	e7da      	b.n	801a778 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a7c2:	a802      	add	r0, sp, #8
 801a7c4:	f000 fe80 	bl	801b4c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a7c8:	2501      	movs	r5, #1
 801a7ca:	e02a      	b.n	801a822 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 801a7cc:	2300      	movs	r3, #0
 801a7ce:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801a7d2:	e032      	b.n	801a83a <xQueueSemaphoreTake+0x12e>
 801a7d4:	2300      	movs	r3, #0
 801a7d6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801a7da:	e034      	b.n	801a846 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 801a7dc:	f001 fa62 	bl	801bca4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a7e0:	68a0      	ldr	r0, [r4, #8]
 801a7e2:	f000 fedb 	bl	801b59c <xTaskPriorityInherit>
 801a7e6:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 801a7e8:	f001 fa7e 	bl	801bce8 <vPortExitCritical>
 801a7ec:	e03b      	b.n	801a866 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 801a7ee:	4620      	mov	r0, r4
 801a7f0:	f7ff fc74 	bl	801a0dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a7f4:	f000 fcfa 	bl	801b1ec <xTaskResumeAll>
 801a7f8:	e009      	b.n	801a80e <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 801a7fa:	4620      	mov	r0, r4
 801a7fc:	f7ff fc6e 	bl	801a0dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a800:	f000 fcf4 	bl	801b1ec <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a804:	4620      	mov	r0, r4
 801a806:	f7ff fc0f 	bl	801a028 <prvIsQueueEmpty>
 801a80a:	2800      	cmp	r0, #0
 801a80c:	d142      	bne.n	801a894 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 801a80e:	f001 fa49 	bl	801bca4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801a812:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801a814:	2b00      	cmp	r3, #0
 801a816:	d1a6      	bne.n	801a766 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 801a818:	9b01      	ldr	r3, [sp, #4]
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	d0c4      	beq.n	801a7a8 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 801a81e:	2d00      	cmp	r5, #0
 801a820:	d0cf      	beq.n	801a7c2 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 801a822:	f001 fa61 	bl	801bce8 <vPortExitCritical>
		vTaskSuspendAll();
 801a826:	f000 fc47 	bl	801b0b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a82a:	f001 fa3b 	bl	801bca4 <vPortEnterCritical>
 801a82e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801a832:	b25b      	sxtb	r3, r3
 801a834:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a838:	d0c8      	beq.n	801a7cc <xQueueSemaphoreTake+0xc0>
 801a83a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801a83e:	b25b      	sxtb	r3, r3
 801a840:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a844:	d0c6      	beq.n	801a7d4 <xQueueSemaphoreTake+0xc8>
 801a846:	f001 fa4f 	bl	801bce8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a84a:	a901      	add	r1, sp, #4
 801a84c:	a802      	add	r0, sp, #8
 801a84e:	f000 fe47 	bl	801b4e0 <xTaskCheckForTimeOut>
 801a852:	2800      	cmp	r0, #0
 801a854:	d1d1      	bne.n	801a7fa <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a856:	4620      	mov	r0, r4
 801a858:	f7ff fbe6 	bl	801a028 <prvIsQueueEmpty>
 801a85c:	2800      	cmp	r0, #0
 801a85e:	d0c6      	beq.n	801a7ee <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a860:	6823      	ldr	r3, [r4, #0]
 801a862:	2b00      	cmp	r3, #0
 801a864:	d0ba      	beq.n	801a7dc <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a866:	9901      	ldr	r1, [sp, #4]
 801a868:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801a86c:	f000 fdb2 	bl	801b3d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a870:	4620      	mov	r0, r4
 801a872:	f7ff fc33 	bl	801a0dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a876:	f000 fcb9 	bl	801b1ec <xTaskResumeAll>
 801a87a:	2800      	cmp	r0, #0
 801a87c:	d1c7      	bne.n	801a80e <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 801a87e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a886:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a88a:	f3bf 8f4f 	dsb	sy
 801a88e:	f3bf 8f6f 	isb	sy
 801a892:	e7bc      	b.n	801a80e <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 801a894:	b90e      	cbnz	r6, 801a89a <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 801a896:	2600      	movs	r6, #0
 801a898:	e76e      	b.n	801a778 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 801a89a:	f001 fa03 	bl	801bca4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801a89e:	4620      	mov	r0, r4
 801a8a0:	f7ff fbab 	bl	8019ffa <prvGetDisinheritPriorityAfterTimeout>
 801a8a4:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801a8a6:	68a0      	ldr	r0, [r4, #8]
 801a8a8:	f000 ff0c 	bl	801b6c4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 801a8ac:	f001 fa1c 	bl	801bce8 <vPortExitCritical>
 801a8b0:	e7f1      	b.n	801a896 <xQueueSemaphoreTake+0x18a>

0801a8b2 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 801a8b2:	b180      	cbz	r0, 801a8d6 <xQueueTakeMutexRecursive+0x24>
	{
 801a8b4:	b570      	push	{r4, r5, r6, lr}
 801a8b6:	460c      	mov	r4, r1
 801a8b8:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801a8ba:	6886      	ldr	r6, [r0, #8]
 801a8bc:	f000 fe58 	bl	801b570 <xTaskGetCurrentTaskHandle>
 801a8c0:	4286      	cmp	r6, r0
 801a8c2:	d011      	beq.n	801a8e8 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801a8c4:	4621      	mov	r1, r4
 801a8c6:	4628      	mov	r0, r5
 801a8c8:	f7ff ff20 	bl	801a70c <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 801a8cc:	b180      	cbz	r0, 801a8f0 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801a8ce:	68eb      	ldr	r3, [r5, #12]
 801a8d0:	3301      	adds	r3, #1
 801a8d2:	60eb      	str	r3, [r5, #12]
		return xReturn;
 801a8d4:	e00c      	b.n	801a8f0 <xQueueTakeMutexRecursive+0x3e>
 801a8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a8da:	f383 8811 	msr	BASEPRI, r3
 801a8de:	f3bf 8f6f 	isb	sy
 801a8e2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 801a8e6:	e7fe      	b.n	801a8e6 <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801a8e8:	68eb      	ldr	r3, [r5, #12]
 801a8ea:	3301      	adds	r3, #1
 801a8ec:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 801a8ee:	2001      	movs	r0, #1
	}
 801a8f0:	bd70      	pop	{r4, r5, r6, pc}

0801a8f2 <xQueuePeek>:
{
 801a8f2:	b570      	push	{r4, r5, r6, lr}
 801a8f4:	b084      	sub	sp, #16
 801a8f6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 801a8f8:	b190      	cbz	r0, 801a920 <xQueuePeek+0x2e>
 801a8fa:	460e      	mov	r6, r1
 801a8fc:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a8fe:	b1c1      	cbz	r1, 801a932 <xQueuePeek+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a900:	f000 fe3c 	bl	801b57c <xTaskGetSchedulerState>
 801a904:	4605      	mov	r5, r0
 801a906:	bb00      	cbnz	r0, 801a94a <xQueuePeek+0x58>
 801a908:	9b01      	ldr	r3, [sp, #4]
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d05e      	beq.n	801a9cc <xQueuePeek+0xda>
 801a90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a912:	f383 8811 	msr	BASEPRI, r3
 801a916:	f3bf 8f6f 	isb	sy
 801a91a:	f3bf 8f4f 	dsb	sy
 801a91e:	e7fe      	b.n	801a91e <xQueuePeek+0x2c>
 801a920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a924:	f383 8811 	msr	BASEPRI, r3
 801a928:	f3bf 8f6f 	isb	sy
 801a92c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 801a930:	e7fe      	b.n	801a930 <xQueuePeek+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a932:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801a934:	2b00      	cmp	r3, #0
 801a936:	d0e3      	beq.n	801a900 <xQueuePeek+0xe>
 801a938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a93c:	f383 8811 	msr	BASEPRI, r3
 801a940:	f3bf 8f6f 	isb	sy
 801a944:	f3bf 8f4f 	dsb	sy
 801a948:	e7fe      	b.n	801a948 <xQueuePeek+0x56>
 801a94a:	2500      	movs	r5, #0
 801a94c:	e03e      	b.n	801a9cc <xQueuePeek+0xda>
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 801a94e:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a950:	4631      	mov	r1, r6
 801a952:	4620      	mov	r0, r4
 801a954:	f7ff fbb0 	bl	801a0b8 <prvCopyDataFromQueue>
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 801a958:	60e5      	str	r5, [r4, #12]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a95a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801a95c:	b923      	cbnz	r3, 801a968 <xQueuePeek+0x76>
				taskEXIT_CRITICAL();
 801a95e:	f001 f9c3 	bl	801bce8 <vPortExitCritical>
				return pdPASS;
 801a962:	2001      	movs	r0, #1
}
 801a964:	b004      	add	sp, #16
 801a966:	bd70      	pop	{r4, r5, r6, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a968:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801a96c:	f000 fd66 	bl	801b43c <xTaskRemoveFromEventList>
 801a970:	2800      	cmp	r0, #0
 801a972:	d0f4      	beq.n	801a95e <xQueuePeek+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 801a974:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a97c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a980:	f3bf 8f4f 	dsb	sy
 801a984:	f3bf 8f6f 	isb	sy
 801a988:	e7e9      	b.n	801a95e <xQueuePeek+0x6c>
					taskEXIT_CRITICAL();
 801a98a:	f001 f9ad 	bl	801bce8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801a98e:	2000      	movs	r0, #0
 801a990:	e7e8      	b.n	801a964 <xQueuePeek+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a992:	a802      	add	r0, sp, #8
 801a994:	f000 fd98 	bl	801b4c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a998:	2501      	movs	r5, #1
 801a99a:	e021      	b.n	801a9e0 <xQueuePeek+0xee>
		prvLockQueue( pxQueue );
 801a99c:	2300      	movs	r3, #0
 801a99e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801a9a2:	e029      	b.n	801a9f8 <xQueuePeek+0x106>
 801a9a4:	2300      	movs	r3, #0
 801a9a6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801a9aa:	e02b      	b.n	801aa04 <xQueuePeek+0x112>
				prvUnlockQueue( pxQueue );
 801a9ac:	4620      	mov	r0, r4
 801a9ae:	f7ff fb95 	bl	801a0dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a9b2:	f000 fc1b 	bl	801b1ec <xTaskResumeAll>
 801a9b6:	e009      	b.n	801a9cc <xQueuePeek+0xda>
			prvUnlockQueue( pxQueue );
 801a9b8:	4620      	mov	r0, r4
 801a9ba:	f7ff fb8f 	bl	801a0dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a9be:	f000 fc15 	bl	801b1ec <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a9c2:	4620      	mov	r0, r4
 801a9c4:	f7ff fb30 	bl	801a028 <prvIsQueueEmpty>
 801a9c8:	2800      	cmp	r0, #0
 801a9ca:	d13f      	bne.n	801aa4c <xQueuePeek+0x15a>
		taskENTER_CRITICAL();
 801a9cc:	f001 f96a 	bl	801bca4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a9d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	d1bb      	bne.n	801a94e <xQueuePeek+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 801a9d6:	9b01      	ldr	r3, [sp, #4]
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	d0d6      	beq.n	801a98a <xQueuePeek+0x98>
				else if( xEntryTimeSet == pdFALSE )
 801a9dc:	2d00      	cmp	r5, #0
 801a9de:	d0d8      	beq.n	801a992 <xQueuePeek+0xa0>
		taskEXIT_CRITICAL();
 801a9e0:	f001 f982 	bl	801bce8 <vPortExitCritical>
		vTaskSuspendAll();
 801a9e4:	f000 fb68 	bl	801b0b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a9e8:	f001 f95c 	bl	801bca4 <vPortEnterCritical>
 801a9ec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801a9f0:	b25b      	sxtb	r3, r3
 801a9f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a9f6:	d0d1      	beq.n	801a99c <xQueuePeek+0xaa>
 801a9f8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801a9fc:	b25b      	sxtb	r3, r3
 801a9fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801aa02:	d0cf      	beq.n	801a9a4 <xQueuePeek+0xb2>
 801aa04:	f001 f970 	bl	801bce8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801aa08:	a901      	add	r1, sp, #4
 801aa0a:	a802      	add	r0, sp, #8
 801aa0c:	f000 fd68 	bl	801b4e0 <xTaskCheckForTimeOut>
 801aa10:	2800      	cmp	r0, #0
 801aa12:	d1d1      	bne.n	801a9b8 <xQueuePeek+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801aa14:	4620      	mov	r0, r4
 801aa16:	f7ff fb07 	bl	801a028 <prvIsQueueEmpty>
 801aa1a:	2800      	cmp	r0, #0
 801aa1c:	d0c6      	beq.n	801a9ac <xQueuePeek+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801aa1e:	9901      	ldr	r1, [sp, #4]
 801aa20:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801aa24:	f000 fcd6 	bl	801b3d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801aa28:	4620      	mov	r0, r4
 801aa2a:	f7ff fb57 	bl	801a0dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801aa2e:	f000 fbdd 	bl	801b1ec <xTaskResumeAll>
 801aa32:	2800      	cmp	r0, #0
 801aa34:	d1ca      	bne.n	801a9cc <xQueuePeek+0xda>
					portYIELD_WITHIN_API();
 801aa36:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801aa3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801aa3e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801aa42:	f3bf 8f4f 	dsb	sy
 801aa46:	f3bf 8f6f 	isb	sy
 801aa4a:	e7bf      	b.n	801a9cc <xQueuePeek+0xda>
				return errQUEUE_EMPTY;
 801aa4c:	2000      	movs	r0, #0
 801aa4e:	e789      	b.n	801a964 <xQueuePeek+0x72>

0801aa50 <xQueueReceiveFromISR>:
{
 801aa50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 801aa54:	b1b0      	cbz	r0, 801aa84 <xQueueReceiveFromISR+0x34>
 801aa56:	460d      	mov	r5, r1
 801aa58:	4690      	mov	r8, r2
 801aa5a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801aa5c:	b1d9      	cbz	r1, 801aa96 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801aa5e:	f001 fa47 	bl	801bef0 <vPortValidateInterruptPriority>
	__asm volatile
 801aa62:	f3ef 8711 	mrs	r7, BASEPRI
 801aa66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aa6a:	f383 8811 	msr	BASEPRI, r3
 801aa6e:	f3bf 8f6f 	isb	sy
 801aa72:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801aa76:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801aa78:	b9ce      	cbnz	r6, 801aaae <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 801aa7a:	2000      	movs	r0, #0
	__asm volatile
 801aa7c:	f387 8811 	msr	BASEPRI, r7
}
 801aa80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 801aa84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aa88:	f383 8811 	msr	BASEPRI, r3
 801aa8c:	f3bf 8f6f 	isb	sy
 801aa90:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801aa94:	e7fe      	b.n	801aa94 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801aa96:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d0e0      	beq.n	801aa5e <xQueueReceiveFromISR+0xe>
 801aa9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aaa0:	f383 8811 	msr	BASEPRI, r3
 801aaa4:	f3bf 8f6f 	isb	sy
 801aaa8:	f3bf 8f4f 	dsb	sy
 801aaac:	e7fe      	b.n	801aaac <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 801aaae:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 801aab2:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801aab6:	4629      	mov	r1, r5
 801aab8:	4620      	mov	r0, r4
 801aaba:	f7ff fafd 	bl	801a0b8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801aabe:	1e73      	subs	r3, r6, #1
 801aac0:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 801aac2:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801aac6:	d006      	beq.n	801aad6 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801aac8:	f109 0301 	add.w	r3, r9, #1
 801aacc:	b25b      	sxtb	r3, r3
 801aace:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 801aad2:	2001      	movs	r0, #1
 801aad4:	e7d2      	b.n	801aa7c <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801aad6:	6923      	ldr	r3, [r4, #16]
 801aad8:	b90b      	cbnz	r3, 801aade <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 801aada:	2001      	movs	r0, #1
 801aadc:	e7ce      	b.n	801aa7c <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801aade:	f104 0010 	add.w	r0, r4, #16
 801aae2:	f000 fcab 	bl	801b43c <xTaskRemoveFromEventList>
 801aae6:	b130      	cbz	r0, 801aaf6 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 801aae8:	f1b8 0f00 	cmp.w	r8, #0
 801aaec:	d005      	beq.n	801aafa <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 801aaee:	2001      	movs	r0, #1
 801aaf0:	f8c8 0000 	str.w	r0, [r8]
 801aaf4:	e7c2      	b.n	801aa7c <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 801aaf6:	2001      	movs	r0, #1
 801aaf8:	e7c0      	b.n	801aa7c <xQueueReceiveFromISR+0x2c>
 801aafa:	2001      	movs	r0, #1
 801aafc:	e7be      	b.n	801aa7c <xQueueReceiveFromISR+0x2c>

0801aafe <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 801aafe:	b140      	cbz	r0, 801ab12 <uxQueueMessagesWaiting+0x14>
{
 801ab00:	b510      	push	{r4, lr}
 801ab02:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801ab04:	f001 f8ce 	bl	801bca4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801ab08:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 801ab0a:	f001 f8ed 	bl	801bce8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801ab0e:	4620      	mov	r0, r4
 801ab10:	bd10      	pop	{r4, pc}
 801ab12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ab16:	f383 8811 	msr	BASEPRI, r3
 801ab1a:	f3bf 8f6f 	isb	sy
 801ab1e:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 801ab22:	e7fe      	b.n	801ab22 <uxQueueMessagesWaiting+0x24>

0801ab24 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 801ab24:	b108      	cbz	r0, 801ab2a <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 801ab26:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801ab28:	4770      	bx	lr
 801ab2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ab2e:	f383 8811 	msr	BASEPRI, r3
 801ab32:	f3bf 8f6f 	isb	sy
 801ab36:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801ab3a:	e7fe      	b.n	801ab3a <uxQueueMessagesWaitingFromISR+0x16>

0801ab3c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801ab3c:	2300      	movs	r3, #0
 801ab3e:	2b07      	cmp	r3, #7
 801ab40:	d80c      	bhi.n	801ab5c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801ab42:	4a07      	ldr	r2, [pc, #28]	@ (801ab60 <vQueueAddToRegistry+0x24>)
 801ab44:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ab48:	b10a      	cbz	r2, 801ab4e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801ab4a:	3301      	adds	r3, #1
 801ab4c:	e7f7      	b.n	801ab3e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801ab4e:	4a04      	ldr	r2, [pc, #16]	@ (801ab60 <vQueueAddToRegistry+0x24>)
 801ab50:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801ab54:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801ab58:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801ab5a:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801ab5c:	4770      	bx	lr
 801ab5e:	bf00      	nop
 801ab60:	20003874 	.word	0x20003874

0801ab64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801ab64:	b570      	push	{r4, r5, r6, lr}
 801ab66:	4604      	mov	r4, r0
 801ab68:	460d      	mov	r5, r1
 801ab6a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801ab6c:	f001 f89a 	bl	801bca4 <vPortEnterCritical>
 801ab70:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801ab74:	b25b      	sxtb	r3, r3
 801ab76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ab7a:	d00d      	beq.n	801ab98 <vQueueWaitForMessageRestricted+0x34>
 801ab7c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801ab80:	b25b      	sxtb	r3, r3
 801ab82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ab86:	d00b      	beq.n	801aba0 <vQueueWaitForMessageRestricted+0x3c>
 801ab88:	f001 f8ae 	bl	801bce8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801ab8c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801ab8e:	b15b      	cbz	r3, 801aba8 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801ab90:	4620      	mov	r0, r4
 801ab92:	f7ff faa3 	bl	801a0dc <prvUnlockQueue>
	}
 801ab96:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 801ab98:	2300      	movs	r3, #0
 801ab9a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801ab9e:	e7ed      	b.n	801ab7c <vQueueWaitForMessageRestricted+0x18>
 801aba0:	2300      	movs	r3, #0
 801aba2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801aba6:	e7ef      	b.n	801ab88 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801aba8:	4632      	mov	r2, r6
 801abaa:	4629      	mov	r1, r5
 801abac:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801abb0:	f000 fc28 	bl	801b404 <vTaskPlaceOnEventListRestricted>
 801abb4:	e7ec      	b.n	801ab90 <vQueueWaitForMessageRestricted+0x2c>
	...

0801abb8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801abb8:	4b08      	ldr	r3, [pc, #32]	@ (801abdc <prvResetNextTaskUnblockTime+0x24>)
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	681b      	ldr	r3, [r3, #0]
 801abbe:	b923      	cbnz	r3, 801abca <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801abc0:	4b07      	ldr	r3, [pc, #28]	@ (801abe0 <prvResetNextTaskUnblockTime+0x28>)
 801abc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801abc6:	601a      	str	r2, [r3, #0]
 801abc8:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801abca:	4b04      	ldr	r3, [pc, #16]	@ (801abdc <prvResetNextTaskUnblockTime+0x24>)
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	68db      	ldr	r3, [r3, #12]
 801abd0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801abd2:	685a      	ldr	r2, [r3, #4]
 801abd4:	4b02      	ldr	r3, [pc, #8]	@ (801abe0 <prvResetNextTaskUnblockTime+0x28>)
 801abd6:	601a      	str	r2, [r3, #0]
	}
}
 801abd8:	4770      	bx	lr
 801abda:	bf00      	nop
 801abdc:	20003924 	.word	0x20003924
 801abe0:	200038bc 	.word	0x200038bc

0801abe4 <prvInitialiseNewTask>:
{
 801abe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801abe8:	4680      	mov	r8, r0
 801abea:	460d      	mov	r5, r1
 801abec:	4617      	mov	r7, r2
 801abee:	4699      	mov	r9, r3
 801abf0:	9e08      	ldr	r6, [sp, #32]
 801abf2:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 801abf6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801abf8:	0092      	lsls	r2, r2, #2
 801abfa:	21a5      	movs	r1, #165	@ 0xa5
 801abfc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801abfe:	f011 fdff 	bl	802c800 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801ac02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ac04:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 801ac08:	3a01      	subs	r2, #1
 801ac0a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801ac0e:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 801ac12:	2d00      	cmp	r5, #0
 801ac14:	d061      	beq.n	801acda <prvInitialiseNewTask+0xf6>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801ac16:	f04f 0c00 	mov.w	ip, #0
 801ac1a:	f1bc 0f0f 	cmp.w	ip, #15
 801ac1e:	d809      	bhi.n	801ac34 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801ac20:	f815 300c 	ldrb.w	r3, [r5, ip]
 801ac24:	eb04 020c 	add.w	r2, r4, ip
 801ac28:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 801ac2c:	b113      	cbz	r3, 801ac34 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801ac2e:	f10c 0c01 	add.w	ip, ip, #1
 801ac32:	e7f2      	b.n	801ac1a <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801ac34:	2300      	movs	r3, #0
 801ac36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801ac3a:	2e37      	cmp	r6, #55	@ 0x37
 801ac3c:	d900      	bls.n	801ac40 <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801ac3e:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 801ac40:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 801ac42:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801ac44:	2500      	movs	r5, #0
 801ac46:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801ac48:	1d20      	adds	r0, r4, #4
 801ac4a:	f7ff f99c 	bl	8019f86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801ac4e:	f104 0018 	add.w	r0, r4, #24
 801ac52:	f7ff f998 	bl	8019f86 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801ac56:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ac58:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 801ac5c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801ac5e:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 801ac60:	f8c4 5198 	str.w	r5, [r4, #408]	@ 0x198
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801ac64:	f884 519c 	strb.w	r5, [r4, #412]	@ 0x19c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801ac68:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 801ac6c:	4629      	mov	r1, r5
 801ac6e:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801ac72:	f011 fdc5 	bl	802c800 <memset>
 801ac76:	4b1b      	ldr	r3, [pc, #108]	@ (801ace4 <prvInitialiseNewTask+0x100>)
 801ac78:	65e3      	str	r3, [r4, #92]	@ 0x5c
 801ac7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ac7e:	6622      	str	r2, [r4, #96]	@ 0x60
 801ac80:	33d0      	adds	r3, #208	@ 0xd0
 801ac82:	6663      	str	r3, [r4, #100]	@ 0x64
 801ac84:	2201      	movs	r2, #1
 801ac86:	2300      	movs	r3, #0
 801ac88:	e9c4 233c 	strd	r2, r3, [r4, #240]	@ 0xf0
 801ac8c:	f243 330e 	movw	r3, #13070	@ 0x330e
 801ac90:	f8a4 30f8 	strh.w	r3, [r4, #248]	@ 0xf8
 801ac94:	f64a 33cd 	movw	r3, #43981	@ 0xabcd
 801ac98:	f8a4 30fa 	strh.w	r3, [r4, #250]	@ 0xfa
 801ac9c:	f241 2334 	movw	r3, #4660	@ 0x1234
 801aca0:	f8a4 30fc 	strh.w	r3, [r4, #252]	@ 0xfc
 801aca4:	f24e 636d 	movw	r3, #58989	@ 0xe66d
 801aca8:	f8a4 30fe 	strh.w	r3, [r4, #254]	@ 0xfe
 801acac:	f64d 63ec 	movw	r3, #57068	@ 0xdeec
 801acb0:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 801acb4:	2305      	movs	r3, #5
 801acb6:	f8a4 3102 	strh.w	r3, [r4, #258]	@ 0x102
 801acba:	230b      	movs	r3, #11
 801acbc:	f8a4 3104 	strh.w	r3, [r4, #260]	@ 0x104
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801acc0:	464a      	mov	r2, r9
 801acc2:	4641      	mov	r1, r8
 801acc4:	4638      	mov	r0, r7
 801acc6:	f000 ffc3 	bl	801bc50 <pxPortInitialiseStack>
 801acca:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 801accc:	f1ba 0f00 	cmp.w	sl, #0
 801acd0:	d001      	beq.n	801acd6 <prvInitialiseNewTask+0xf2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801acd2:	f8ca 4000 	str.w	r4, [sl]
}
 801acd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801acda:	2300      	movs	r3, #0
 801acdc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 801ace0:	e7ab      	b.n	801ac3a <prvInitialiseNewTask+0x56>
 801ace2:	bf00      	nop
 801ace4:	2001a12c 	.word	0x2001a12c

0801ace8 <prvInitialiseTaskLists>:
{
 801ace8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801acea:	2400      	movs	r4, #0
 801acec:	e007      	b.n	801acfe <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801acee:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 801acf2:	0093      	lsls	r3, r2, #2
 801acf4:	480e      	ldr	r0, [pc, #56]	@ (801ad30 <prvInitialiseTaskLists+0x48>)
 801acf6:	4418      	add	r0, r3
 801acf8:	f7ff f93a 	bl	8019f70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801acfc:	3401      	adds	r4, #1
 801acfe:	2c37      	cmp	r4, #55	@ 0x37
 801ad00:	d9f5      	bls.n	801acee <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 801ad02:	4d0c      	ldr	r5, [pc, #48]	@ (801ad34 <prvInitialiseTaskLists+0x4c>)
 801ad04:	4628      	mov	r0, r5
 801ad06:	f7ff f933 	bl	8019f70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801ad0a:	4c0b      	ldr	r4, [pc, #44]	@ (801ad38 <prvInitialiseTaskLists+0x50>)
 801ad0c:	4620      	mov	r0, r4
 801ad0e:	f7ff f92f 	bl	8019f70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801ad12:	480a      	ldr	r0, [pc, #40]	@ (801ad3c <prvInitialiseTaskLists+0x54>)
 801ad14:	f7ff f92c 	bl	8019f70 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 801ad18:	4809      	ldr	r0, [pc, #36]	@ (801ad40 <prvInitialiseTaskLists+0x58>)
 801ad1a:	f7ff f929 	bl	8019f70 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 801ad1e:	4809      	ldr	r0, [pc, #36]	@ (801ad44 <prvInitialiseTaskLists+0x5c>)
 801ad20:	f7ff f926 	bl	8019f70 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 801ad24:	4b08      	ldr	r3, [pc, #32]	@ (801ad48 <prvInitialiseTaskLists+0x60>)
 801ad26:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801ad28:	4b08      	ldr	r3, [pc, #32]	@ (801ad4c <prvInitialiseTaskLists+0x64>)
 801ad2a:	601c      	str	r4, [r3, #0]
}
 801ad2c:	bd38      	pop	{r3, r4, r5, pc}
 801ad2e:	bf00      	nop
 801ad30:	20003950 	.word	0x20003950
 801ad34:	2000393c 	.word	0x2000393c
 801ad38:	20003928 	.word	0x20003928
 801ad3c:	2000390c 	.word	0x2000390c
 801ad40:	200038f8 	.word	0x200038f8
 801ad44:	200038e0 	.word	0x200038e0
 801ad48:	20003924 	.word	0x20003924
 801ad4c:	20003920 	.word	0x20003920

0801ad50 <prvAddNewTaskToReadyList>:
{
 801ad50:	b510      	push	{r4, lr}
 801ad52:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801ad54:	f000 ffa6 	bl	801bca4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 801ad58:	4a22      	ldr	r2, [pc, #136]	@ (801ade4 <prvAddNewTaskToReadyList+0x94>)
 801ad5a:	6813      	ldr	r3, [r2, #0]
 801ad5c:	3301      	adds	r3, #1
 801ad5e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801ad60:	4b21      	ldr	r3, [pc, #132]	@ (801ade8 <prvAddNewTaskToReadyList+0x98>)
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	b15b      	cbz	r3, 801ad7e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 801ad66:	4b21      	ldr	r3, [pc, #132]	@ (801adec <prvAddNewTaskToReadyList+0x9c>)
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	b96b      	cbnz	r3, 801ad88 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801ad6c:	4b1e      	ldr	r3, [pc, #120]	@ (801ade8 <prvAddNewTaskToReadyList+0x98>)
 801ad6e:	681b      	ldr	r3, [r3, #0]
 801ad70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ad72:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801ad74:	429a      	cmp	r2, r3
 801ad76:	d807      	bhi.n	801ad88 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 801ad78:	4b1b      	ldr	r3, [pc, #108]	@ (801ade8 <prvAddNewTaskToReadyList+0x98>)
 801ad7a:	601c      	str	r4, [r3, #0]
 801ad7c:	e004      	b.n	801ad88 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 801ad7e:	4b1a      	ldr	r3, [pc, #104]	@ (801ade8 <prvAddNewTaskToReadyList+0x98>)
 801ad80:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801ad82:	6813      	ldr	r3, [r2, #0]
 801ad84:	2b01      	cmp	r3, #1
 801ad86:	d029      	beq.n	801addc <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 801ad88:	4a19      	ldr	r2, [pc, #100]	@ (801adf0 <prvAddNewTaskToReadyList+0xa0>)
 801ad8a:	6813      	ldr	r3, [r2, #0]
 801ad8c:	3301      	adds	r3, #1
 801ad8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801ad90:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 801ad92:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801ad94:	4b17      	ldr	r3, [pc, #92]	@ (801adf4 <prvAddNewTaskToReadyList+0xa4>)
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	4298      	cmp	r0, r3
 801ad9a:	d901      	bls.n	801ada0 <prvAddNewTaskToReadyList+0x50>
 801ad9c:	4b15      	ldr	r3, [pc, #84]	@ (801adf4 <prvAddNewTaskToReadyList+0xa4>)
 801ad9e:	6018      	str	r0, [r3, #0]
 801ada0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801ada4:	1d21      	adds	r1, r4, #4
 801ada6:	4b14      	ldr	r3, [pc, #80]	@ (801adf8 <prvAddNewTaskToReadyList+0xa8>)
 801ada8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801adac:	f7ff f8ee 	bl	8019f8c <vListInsertEnd>
	taskEXIT_CRITICAL();
 801adb0:	f000 ff9a 	bl	801bce8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 801adb4:	4b0d      	ldr	r3, [pc, #52]	@ (801adec <prvAddNewTaskToReadyList+0x9c>)
 801adb6:	681b      	ldr	r3, [r3, #0]
 801adb8:	b17b      	cbz	r3, 801adda <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801adba:	4b0b      	ldr	r3, [pc, #44]	@ (801ade8 <prvAddNewTaskToReadyList+0x98>)
 801adbc:	681b      	ldr	r3, [r3, #0]
 801adbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801adc0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801adc2:	429a      	cmp	r2, r3
 801adc4:	d209      	bcs.n	801adda <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 801adc6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801adca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801adce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801add2:	f3bf 8f4f 	dsb	sy
 801add6:	f3bf 8f6f 	isb	sy
}
 801adda:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 801addc:	f7ff ff84 	bl	801ace8 <prvInitialiseTaskLists>
 801ade0:	e7d2      	b.n	801ad88 <prvAddNewTaskToReadyList+0x38>
 801ade2:	bf00      	nop
 801ade4:	200038dc 	.word	0x200038dc
 801ade8:	20003db0 	.word	0x20003db0
 801adec:	200038d0 	.word	0x200038d0
 801adf0:	200038c0 	.word	0x200038c0
 801adf4:	200038d4 	.word	0x200038d4
 801adf8:	20003950 	.word	0x20003950

0801adfc <prvDeleteTCB>:
	{
 801adfc:	b510      	push	{r4, lr}
 801adfe:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801ae00:	3058      	adds	r0, #88	@ 0x58
 801ae02:	f013 f9d7 	bl	802e1b4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801ae06:	f894 319d 	ldrb.w	r3, [r4, #413]	@ 0x19d
 801ae0a:	b163      	cbz	r3, 801ae26 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801ae0c:	2b01      	cmp	r3, #1
 801ae0e:	d011      	beq.n	801ae34 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801ae10:	2b02      	cmp	r3, #2
 801ae12:	d00e      	beq.n	801ae32 <prvDeleteTCB+0x36>
 801ae14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ae18:	f383 8811 	msr	BASEPRI, r3
 801ae1c:	f3bf 8f6f 	isb	sy
 801ae20:	f3bf 8f4f 	dsb	sy
 801ae24:	e7fe      	b.n	801ae24 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 801ae26:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801ae28:	f001 f978 	bl	801c11c <vPortFree>
				vPortFree( pxTCB );
 801ae2c:	4620      	mov	r0, r4
 801ae2e:	f001 f975 	bl	801c11c <vPortFree>
	}
 801ae32:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 801ae34:	4620      	mov	r0, r4
 801ae36:	f001 f971 	bl	801c11c <vPortFree>
 801ae3a:	e7fa      	b.n	801ae32 <prvDeleteTCB+0x36>

0801ae3c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801ae3c:	4b0f      	ldr	r3, [pc, #60]	@ (801ae7c <prvCheckTasksWaitingTermination+0x40>)
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	b1d3      	cbz	r3, 801ae78 <prvCheckTasksWaitingTermination+0x3c>
{
 801ae42:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 801ae44:	f000 ff2e 	bl	801bca4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ae48:	4b0d      	ldr	r3, [pc, #52]	@ (801ae80 <prvCheckTasksWaitingTermination+0x44>)
 801ae4a:	68db      	ldr	r3, [r3, #12]
 801ae4c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ae4e:	1d20      	adds	r0, r4, #4
 801ae50:	f7ff f8c0 	bl	8019fd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801ae54:	4a0b      	ldr	r2, [pc, #44]	@ (801ae84 <prvCheckTasksWaitingTermination+0x48>)
 801ae56:	6813      	ldr	r3, [r2, #0]
 801ae58:	3b01      	subs	r3, #1
 801ae5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801ae5c:	4a07      	ldr	r2, [pc, #28]	@ (801ae7c <prvCheckTasksWaitingTermination+0x40>)
 801ae5e:	6813      	ldr	r3, [r2, #0]
 801ae60:	3b01      	subs	r3, #1
 801ae62:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 801ae64:	f000 ff40 	bl	801bce8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 801ae68:	4620      	mov	r0, r4
 801ae6a:	f7ff ffc7 	bl	801adfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801ae6e:	4b03      	ldr	r3, [pc, #12]	@ (801ae7c <prvCheckTasksWaitingTermination+0x40>)
 801ae70:	681b      	ldr	r3, [r3, #0]
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d1e6      	bne.n	801ae44 <prvCheckTasksWaitingTermination+0x8>
}
 801ae76:	bd10      	pop	{r4, pc}
 801ae78:	4770      	bx	lr
 801ae7a:	bf00      	nop
 801ae7c:	200038f4 	.word	0x200038f4
 801ae80:	200038f8 	.word	0x200038f8
 801ae84:	200038dc 	.word	0x200038dc

0801ae88 <prvIdleTask>:
{
 801ae88:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 801ae8a:	f7ff ffd7 	bl	801ae3c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801ae8e:	4b07      	ldr	r3, [pc, #28]	@ (801aeac <prvIdleTask+0x24>)
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	2b01      	cmp	r3, #1
 801ae94:	d9f9      	bls.n	801ae8a <prvIdleTask+0x2>
				taskYIELD();
 801ae96:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801ae9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ae9e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801aea2:	f3bf 8f4f 	dsb	sy
 801aea6:	f3bf 8f6f 	isb	sy
 801aeaa:	e7ee      	b.n	801ae8a <prvIdleTask+0x2>
 801aeac:	20003950 	.word	0x20003950

0801aeb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801aeb0:	b570      	push	{r4, r5, r6, lr}
 801aeb2:	4604      	mov	r4, r0
 801aeb4:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801aeb6:	4b17      	ldr	r3, [pc, #92]	@ (801af14 <prvAddCurrentTaskToDelayedList+0x64>)
 801aeb8:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801aeba:	4b17      	ldr	r3, [pc, #92]	@ (801af18 <prvAddCurrentTaskToDelayedList+0x68>)
 801aebc:	6818      	ldr	r0, [r3, #0]
 801aebe:	3004      	adds	r0, #4
 801aec0:	f7ff f888 	bl	8019fd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801aec4:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801aec8:	d00d      	beq.n	801aee6 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 801aeca:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801aecc:	4b12      	ldr	r3, [pc, #72]	@ (801af18 <prvAddCurrentTaskToDelayedList+0x68>)
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 801aed2:	42a6      	cmp	r6, r4
 801aed4:	d910      	bls.n	801aef8 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801aed6:	4b11      	ldr	r3, [pc, #68]	@ (801af1c <prvAddCurrentTaskToDelayedList+0x6c>)
 801aed8:	6818      	ldr	r0, [r3, #0]
 801aeda:	4b0f      	ldr	r3, [pc, #60]	@ (801af18 <prvAddCurrentTaskToDelayedList+0x68>)
 801aedc:	6819      	ldr	r1, [r3, #0]
 801aede:	3104      	adds	r1, #4
 801aee0:	f7ff f85f 	bl	8019fa2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801aee4:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801aee6:	2d00      	cmp	r5, #0
 801aee8:	d0ef      	beq.n	801aeca <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801aeea:	4b0b      	ldr	r3, [pc, #44]	@ (801af18 <prvAddCurrentTaskToDelayedList+0x68>)
 801aeec:	6819      	ldr	r1, [r3, #0]
 801aeee:	3104      	adds	r1, #4
 801aef0:	480b      	ldr	r0, [pc, #44]	@ (801af20 <prvAddCurrentTaskToDelayedList+0x70>)
 801aef2:	f7ff f84b 	bl	8019f8c <vListInsertEnd>
 801aef6:	e7f5      	b.n	801aee4 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801aef8:	4b0a      	ldr	r3, [pc, #40]	@ (801af24 <prvAddCurrentTaskToDelayedList+0x74>)
 801aefa:	6818      	ldr	r0, [r3, #0]
 801aefc:	4b06      	ldr	r3, [pc, #24]	@ (801af18 <prvAddCurrentTaskToDelayedList+0x68>)
 801aefe:	6819      	ldr	r1, [r3, #0]
 801af00:	3104      	adds	r1, #4
 801af02:	f7ff f84e 	bl	8019fa2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801af06:	4b08      	ldr	r3, [pc, #32]	@ (801af28 <prvAddCurrentTaskToDelayedList+0x78>)
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	42a3      	cmp	r3, r4
 801af0c:	d9ea      	bls.n	801aee4 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 801af0e:	4b06      	ldr	r3, [pc, #24]	@ (801af28 <prvAddCurrentTaskToDelayedList+0x78>)
 801af10:	601c      	str	r4, [r3, #0]
}
 801af12:	e7e7      	b.n	801aee4 <prvAddCurrentTaskToDelayedList+0x34>
 801af14:	200038d8 	.word	0x200038d8
 801af18:	20003db0 	.word	0x20003db0
 801af1c:	20003920 	.word	0x20003920
 801af20:	200038e0 	.word	0x200038e0
 801af24:	20003924 	.word	0x20003924
 801af28:	200038bc 	.word	0x200038bc

0801af2c <xTaskCreateStatic>:
	{
 801af2c:	b530      	push	{r4, r5, lr}
 801af2e:	b087      	sub	sp, #28
 801af30:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 801af32:	b18c      	cbz	r4, 801af58 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801af34:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801af36:	b1c5      	cbz	r5, 801af6a <xTaskCreateStatic+0x3e>
			volatile size_t xSize = sizeof( StaticTask_t );
 801af38:	f44f 75d0 	mov.w	r5, #416	@ 0x1a0
 801af3c:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801af3e:	9d04      	ldr	r5, [sp, #16]
 801af40:	f5b5 7fd0 	cmp.w	r5, #416	@ 0x1a0
 801af44:	d01a      	beq.n	801af7c <xTaskCreateStatic+0x50>
 801af46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801af4a:	f383 8811 	msr	BASEPRI, r3
 801af4e:	f3bf 8f6f 	isb	sy
 801af52:	f3bf 8f4f 	dsb	sy
 801af56:	e7fe      	b.n	801af56 <xTaskCreateStatic+0x2a>
 801af58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801af5c:	f383 8811 	msr	BASEPRI, r3
 801af60:	f3bf 8f6f 	isb	sy
 801af64:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 801af68:	e7fe      	b.n	801af68 <xTaskCreateStatic+0x3c>
 801af6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801af6e:	f383 8811 	msr	BASEPRI, r3
 801af72:	f3bf 8f6f 	isb	sy
 801af76:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 801af7a:	e7fe      	b.n	801af7a <xTaskCreateStatic+0x4e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801af7c:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801af7e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801af80:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801af82:	2402      	movs	r4, #2
 801af84:	f885 419d 	strb.w	r4, [r5, #413]	@ 0x19d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801af88:	2400      	movs	r4, #0
 801af8a:	9403      	str	r4, [sp, #12]
 801af8c:	9502      	str	r5, [sp, #8]
 801af8e:	ac05      	add	r4, sp, #20
 801af90:	9401      	str	r4, [sp, #4]
 801af92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801af94:	9400      	str	r4, [sp, #0]
 801af96:	f7ff fe25 	bl	801abe4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801af9a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801af9c:	f7ff fed8 	bl	801ad50 <prvAddNewTaskToReadyList>
	}
 801afa0:	9805      	ldr	r0, [sp, #20]
 801afa2:	b007      	add	sp, #28
 801afa4:	bd30      	pop	{r4, r5, pc}

0801afa6 <xTaskCreate>:
	{
 801afa6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801afaa:	b085      	sub	sp, #20
 801afac:	4607      	mov	r7, r0
 801afae:	4688      	mov	r8, r1
 801afb0:	4614      	mov	r4, r2
 801afb2:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801afb4:	0090      	lsls	r0, r2, #2
 801afb6:	f001 f82f 	bl	801c018 <pvPortMalloc>
			if( pxStack != NULL )
 801afba:	b310      	cbz	r0, 801b002 <xTaskCreate+0x5c>
 801afbc:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801afbe:	f44f 70d0 	mov.w	r0, #416	@ 0x1a0
 801afc2:	f001 f829 	bl	801c018 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801afc6:	4605      	mov	r5, r0
 801afc8:	b1a8      	cbz	r0, 801aff6 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 801afca:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801afce:	2300      	movs	r3, #0
 801afd0:	f880 319d 	strb.w	r3, [r0, #413]	@ 0x19d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801afd4:	9303      	str	r3, [sp, #12]
 801afd6:	9002      	str	r0, [sp, #8]
 801afd8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801afda:	9301      	str	r3, [sp, #4]
 801afdc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801afde:	9300      	str	r3, [sp, #0]
 801afe0:	4633      	mov	r3, r6
 801afe2:	4622      	mov	r2, r4
 801afe4:	4641      	mov	r1, r8
 801afe6:	4638      	mov	r0, r7
 801afe8:	f7ff fdfc 	bl	801abe4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801afec:	4628      	mov	r0, r5
 801afee:	f7ff feaf 	bl	801ad50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801aff2:	2001      	movs	r0, #1
 801aff4:	e007      	b.n	801b006 <xTaskCreate+0x60>
					vPortFree( pxStack );
 801aff6:	4648      	mov	r0, r9
 801aff8:	f001 f890 	bl	801c11c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801affc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b000:	e001      	b.n	801b006 <xTaskCreate+0x60>
 801b002:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 801b006:	b005      	add	sp, #20
 801b008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801b00c <vTaskStartScheduler>:
{
 801b00c:	b510      	push	{r4, lr}
 801b00e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801b010:	2400      	movs	r4, #0
 801b012:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801b014:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801b016:	aa07      	add	r2, sp, #28
 801b018:	a906      	add	r1, sp, #24
 801b01a:	a805      	add	r0, sp, #20
 801b01c:	f7fe ff90 	bl	8019f40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801b020:	9b05      	ldr	r3, [sp, #20]
 801b022:	9302      	str	r3, [sp, #8]
 801b024:	9b06      	ldr	r3, [sp, #24]
 801b026:	9301      	str	r3, [sp, #4]
 801b028:	9400      	str	r4, [sp, #0]
 801b02a:	4623      	mov	r3, r4
 801b02c:	9a07      	ldr	r2, [sp, #28]
 801b02e:	491a      	ldr	r1, [pc, #104]	@ (801b098 <vTaskStartScheduler+0x8c>)
 801b030:	481a      	ldr	r0, [pc, #104]	@ (801b09c <vTaskStartScheduler+0x90>)
 801b032:	f7ff ff7b 	bl	801af2c <xTaskCreateStatic>
 801b036:	4b1a      	ldr	r3, [pc, #104]	@ (801b0a0 <vTaskStartScheduler+0x94>)
 801b038:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 801b03a:	b1e8      	cbz	r0, 801b078 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 801b03c:	f000 fc0c 	bl	801b858 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 801b040:	2801      	cmp	r0, #1
 801b042:	d11a      	bne.n	801b07a <vTaskStartScheduler+0x6e>
 801b044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b048:	f383 8811 	msr	BASEPRI, r3
 801b04c:	f3bf 8f6f 	isb	sy
 801b050:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801b054:	4b13      	ldr	r3, [pc, #76]	@ (801b0a4 <vTaskStartScheduler+0x98>)
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	3358      	adds	r3, #88	@ 0x58
 801b05a:	4a13      	ldr	r2, [pc, #76]	@ (801b0a8 <vTaskStartScheduler+0x9c>)
 801b05c:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 801b05e:	4b13      	ldr	r3, [pc, #76]	@ (801b0ac <vTaskStartScheduler+0xa0>)
 801b060:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b064:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801b066:	4b12      	ldr	r3, [pc, #72]	@ (801b0b0 <vTaskStartScheduler+0xa4>)
 801b068:	2201      	movs	r2, #1
 801b06a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801b06c:	4b11      	ldr	r3, [pc, #68]	@ (801b0b4 <vTaskStartScheduler+0xa8>)
 801b06e:	2200      	movs	r2, #0
 801b070:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 801b072:	f000 feb1 	bl	801bdd8 <xPortStartScheduler>
		}
 801b076:	e003      	b.n	801b080 <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 801b078:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801b07a:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801b07e:	d001      	beq.n	801b084 <vTaskStartScheduler+0x78>
}
 801b080:	b008      	add	sp, #32
 801b082:	bd10      	pop	{r4, pc}
 801b084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b088:	f383 8811 	msr	BASEPRI, r3
 801b08c:	f3bf 8f6f 	isb	sy
 801b090:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801b094:	e7fe      	b.n	801b094 <vTaskStartScheduler+0x88>
 801b096:	bf00      	nop
 801b098:	0803a12c 	.word	0x0803a12c
 801b09c:	0801ae89 	.word	0x0801ae89
 801b0a0:	200038b8 	.word	0x200038b8
 801b0a4:	20003db0 	.word	0x20003db0
 801b0a8:	2000017c 	.word	0x2000017c
 801b0ac:	200038bc 	.word	0x200038bc
 801b0b0:	200038d0 	.word	0x200038d0
 801b0b4:	200038d8 	.word	0x200038d8

0801b0b8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 801b0b8:	4a02      	ldr	r2, [pc, #8]	@ (801b0c4 <vTaskSuspendAll+0xc>)
 801b0ba:	6813      	ldr	r3, [r2, #0]
 801b0bc:	3301      	adds	r3, #1
 801b0be:	6013      	str	r3, [r2, #0]
}
 801b0c0:	4770      	bx	lr
 801b0c2:	bf00      	nop
 801b0c4:	200038b4 	.word	0x200038b4

0801b0c8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 801b0c8:	4b01      	ldr	r3, [pc, #4]	@ (801b0d0 <xTaskGetTickCount+0x8>)
 801b0ca:	6818      	ldr	r0, [r3, #0]
}
 801b0cc:	4770      	bx	lr
 801b0ce:	bf00      	nop
 801b0d0:	200038d8 	.word	0x200038d8

0801b0d4 <xTaskIncrementTick>:
{
 801b0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b0d6:	4b3a      	ldr	r3, [pc, #232]	@ (801b1c0 <xTaskIncrementTick+0xec>)
 801b0d8:	681b      	ldr	r3, [r3, #0]
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d169      	bne.n	801b1b2 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801b0de:	4b39      	ldr	r3, [pc, #228]	@ (801b1c4 <xTaskIncrementTick+0xf0>)
 801b0e0:	681d      	ldr	r5, [r3, #0]
 801b0e2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 801b0e4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801b0e6:	b9c5      	cbnz	r5, 801b11a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 801b0e8:	4b37      	ldr	r3, [pc, #220]	@ (801b1c8 <xTaskIncrementTick+0xf4>)
 801b0ea:	681b      	ldr	r3, [r3, #0]
 801b0ec:	681b      	ldr	r3, [r3, #0]
 801b0ee:	b143      	cbz	r3, 801b102 <xTaskIncrementTick+0x2e>
 801b0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b0f4:	f383 8811 	msr	BASEPRI, r3
 801b0f8:	f3bf 8f6f 	isb	sy
 801b0fc:	f3bf 8f4f 	dsb	sy
 801b100:	e7fe      	b.n	801b100 <xTaskIncrementTick+0x2c>
 801b102:	4a31      	ldr	r2, [pc, #196]	@ (801b1c8 <xTaskIncrementTick+0xf4>)
 801b104:	6811      	ldr	r1, [r2, #0]
 801b106:	4b31      	ldr	r3, [pc, #196]	@ (801b1cc <xTaskIncrementTick+0xf8>)
 801b108:	6818      	ldr	r0, [r3, #0]
 801b10a:	6010      	str	r0, [r2, #0]
 801b10c:	6019      	str	r1, [r3, #0]
 801b10e:	4a30      	ldr	r2, [pc, #192]	@ (801b1d0 <xTaskIncrementTick+0xfc>)
 801b110:	6813      	ldr	r3, [r2, #0]
 801b112:	3301      	adds	r3, #1
 801b114:	6013      	str	r3, [r2, #0]
 801b116:	f7ff fd4f 	bl	801abb8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 801b11a:	4b2e      	ldr	r3, [pc, #184]	@ (801b1d4 <xTaskIncrementTick+0x100>)
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	42ab      	cmp	r3, r5
 801b120:	d93d      	bls.n	801b19e <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 801b122:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801b124:	4b2c      	ldr	r3, [pc, #176]	@ (801b1d8 <xTaskIncrementTick+0x104>)
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b12a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801b12e:	009a      	lsls	r2, r3, #2
 801b130:	4b2a      	ldr	r3, [pc, #168]	@ (801b1dc <xTaskIncrementTick+0x108>)
 801b132:	589b      	ldr	r3, [r3, r2]
 801b134:	2b01      	cmp	r3, #1
 801b136:	d900      	bls.n	801b13a <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 801b138:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 801b13a:	4b29      	ldr	r3, [pc, #164]	@ (801b1e0 <xTaskIncrementTick+0x10c>)
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	2b00      	cmp	r3, #0
 801b140:	d03c      	beq.n	801b1bc <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 801b142:	2701      	movs	r7, #1
	return xSwitchRequired;
 801b144:	e03a      	b.n	801b1bc <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 801b146:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b148:	4b1f      	ldr	r3, [pc, #124]	@ (801b1c8 <xTaskIncrementTick+0xf4>)
 801b14a:	681b      	ldr	r3, [r3, #0]
 801b14c:	681b      	ldr	r3, [r3, #0]
 801b14e:	b343      	cbz	r3, 801b1a2 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b150:	4b1d      	ldr	r3, [pc, #116]	@ (801b1c8 <xTaskIncrementTick+0xf4>)
 801b152:	681b      	ldr	r3, [r3, #0]
 801b154:	68db      	ldr	r3, [r3, #12]
 801b156:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801b158:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 801b15a:	429d      	cmp	r5, r3
 801b15c:	d326      	bcc.n	801b1ac <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b15e:	1d26      	adds	r6, r4, #4
 801b160:	4630      	mov	r0, r6
 801b162:	f7fe ff37 	bl	8019fd4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b166:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801b168:	b11b      	cbz	r3, 801b172 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b16a:	f104 0018 	add.w	r0, r4, #24
 801b16e:	f7fe ff31 	bl	8019fd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801b172:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801b174:	4a1b      	ldr	r2, [pc, #108]	@ (801b1e4 <xTaskIncrementTick+0x110>)
 801b176:	6812      	ldr	r2, [r2, #0]
 801b178:	4293      	cmp	r3, r2
 801b17a:	d901      	bls.n	801b180 <xTaskIncrementTick+0xac>
 801b17c:	4a19      	ldr	r2, [pc, #100]	@ (801b1e4 <xTaskIncrementTick+0x110>)
 801b17e:	6013      	str	r3, [r2, #0]
 801b180:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801b184:	009a      	lsls	r2, r3, #2
 801b186:	4631      	mov	r1, r6
 801b188:	4814      	ldr	r0, [pc, #80]	@ (801b1dc <xTaskIncrementTick+0x108>)
 801b18a:	4410      	add	r0, r2
 801b18c:	f7fe fefe 	bl	8019f8c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b190:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801b192:	4b11      	ldr	r3, [pc, #68]	@ (801b1d8 <xTaskIncrementTick+0x104>)
 801b194:	681b      	ldr	r3, [r3, #0]
 801b196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b198:	429a      	cmp	r2, r3
 801b19a:	d2d4      	bcs.n	801b146 <xTaskIncrementTick+0x72>
 801b19c:	e7d4      	b.n	801b148 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 801b19e:	2700      	movs	r7, #0
 801b1a0:	e7d2      	b.n	801b148 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b1a2:	4b0c      	ldr	r3, [pc, #48]	@ (801b1d4 <xTaskIncrementTick+0x100>)
 801b1a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b1a8:	601a      	str	r2, [r3, #0]
					break;
 801b1aa:	e7bb      	b.n	801b124 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 801b1ac:	4a09      	ldr	r2, [pc, #36]	@ (801b1d4 <xTaskIncrementTick+0x100>)
 801b1ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801b1b0:	e7b8      	b.n	801b124 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 801b1b2:	4a0d      	ldr	r2, [pc, #52]	@ (801b1e8 <xTaskIncrementTick+0x114>)
 801b1b4:	6813      	ldr	r3, [r2, #0]
 801b1b6:	3301      	adds	r3, #1
 801b1b8:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 801b1ba:	2700      	movs	r7, #0
}
 801b1bc:	4638      	mov	r0, r7
 801b1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b1c0:	200038b4 	.word	0x200038b4
 801b1c4:	200038d8 	.word	0x200038d8
 801b1c8:	20003924 	.word	0x20003924
 801b1cc:	20003920 	.word	0x20003920
 801b1d0:	200038c4 	.word	0x200038c4
 801b1d4:	200038bc 	.word	0x200038bc
 801b1d8:	20003db0 	.word	0x20003db0
 801b1dc:	20003950 	.word	0x20003950
 801b1e0:	200038c8 	.word	0x200038c8
 801b1e4:	200038d4 	.word	0x200038d4
 801b1e8:	200038cc 	.word	0x200038cc

0801b1ec <xTaskResumeAll>:
{
 801b1ec:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 801b1ee:	4b35      	ldr	r3, [pc, #212]	@ (801b2c4 <xTaskResumeAll+0xd8>)
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	b943      	cbnz	r3, 801b206 <xTaskResumeAll+0x1a>
 801b1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b1f8:	f383 8811 	msr	BASEPRI, r3
 801b1fc:	f3bf 8f6f 	isb	sy
 801b200:	f3bf 8f4f 	dsb	sy
 801b204:	e7fe      	b.n	801b204 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 801b206:	f000 fd4d 	bl	801bca4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801b20a:	4b2e      	ldr	r3, [pc, #184]	@ (801b2c4 <xTaskResumeAll+0xd8>)
 801b20c:	681a      	ldr	r2, [r3, #0]
 801b20e:	3a01      	subs	r2, #1
 801b210:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b212:	681b      	ldr	r3, [r3, #0]
 801b214:	2b00      	cmp	r3, #0
 801b216:	d14f      	bne.n	801b2b8 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801b218:	4b2b      	ldr	r3, [pc, #172]	@ (801b2c8 <xTaskResumeAll+0xdc>)
 801b21a:	681b      	ldr	r3, [r3, #0]
 801b21c:	b90b      	cbnz	r3, 801b222 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 801b21e:	2400      	movs	r4, #0
 801b220:	e04b      	b.n	801b2ba <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 801b222:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b224:	4b29      	ldr	r3, [pc, #164]	@ (801b2cc <xTaskResumeAll+0xe0>)
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	b31b      	cbz	r3, 801b272 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b22a:	4b28      	ldr	r3, [pc, #160]	@ (801b2cc <xTaskResumeAll+0xe0>)
 801b22c:	68db      	ldr	r3, [r3, #12]
 801b22e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b230:	f104 0018 	add.w	r0, r4, #24
 801b234:	f7fe fece 	bl	8019fd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b238:	1d25      	adds	r5, r4, #4
 801b23a:	4628      	mov	r0, r5
 801b23c:	f7fe feca 	bl	8019fd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801b240:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801b242:	4b23      	ldr	r3, [pc, #140]	@ (801b2d0 <xTaskResumeAll+0xe4>)
 801b244:	681b      	ldr	r3, [r3, #0]
 801b246:	4298      	cmp	r0, r3
 801b248:	d901      	bls.n	801b24e <xTaskResumeAll+0x62>
 801b24a:	4b21      	ldr	r3, [pc, #132]	@ (801b2d0 <xTaskResumeAll+0xe4>)
 801b24c:	6018      	str	r0, [r3, #0]
 801b24e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b252:	4629      	mov	r1, r5
 801b254:	4b1f      	ldr	r3, [pc, #124]	@ (801b2d4 <xTaskResumeAll+0xe8>)
 801b256:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b25a:	f7fe fe97 	bl	8019f8c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b25e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801b260:	4b1d      	ldr	r3, [pc, #116]	@ (801b2d8 <xTaskResumeAll+0xec>)
 801b262:	681b      	ldr	r3, [r3, #0]
 801b264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b266:	429a      	cmp	r2, r3
 801b268:	d3dc      	bcc.n	801b224 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 801b26a:	4b1c      	ldr	r3, [pc, #112]	@ (801b2dc <xTaskResumeAll+0xf0>)
 801b26c:	2201      	movs	r2, #1
 801b26e:	601a      	str	r2, [r3, #0]
 801b270:	e7d8      	b.n	801b224 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 801b272:	b10c      	cbz	r4, 801b278 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 801b274:	f7ff fca0 	bl	801abb8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801b278:	4b19      	ldr	r3, [pc, #100]	@ (801b2e0 <xTaskResumeAll+0xf4>)
 801b27a:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 801b27c:	b984      	cbnz	r4, 801b2a0 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 801b27e:	4b17      	ldr	r3, [pc, #92]	@ (801b2dc <xTaskResumeAll+0xf0>)
 801b280:	681c      	ldr	r4, [r3, #0]
 801b282:	b1d4      	cbz	r4, 801b2ba <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 801b284:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801b288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b28c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801b290:	f3bf 8f4f 	dsb	sy
 801b294:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 801b298:	2401      	movs	r4, #1
 801b29a:	e00e      	b.n	801b2ba <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 801b29c:	3c01      	subs	r4, #1
 801b29e:	d007      	beq.n	801b2b0 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 801b2a0:	f7ff ff18 	bl	801b0d4 <xTaskIncrementTick>
 801b2a4:	2800      	cmp	r0, #0
 801b2a6:	d0f9      	beq.n	801b29c <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 801b2a8:	4b0c      	ldr	r3, [pc, #48]	@ (801b2dc <xTaskResumeAll+0xf0>)
 801b2aa:	2201      	movs	r2, #1
 801b2ac:	601a      	str	r2, [r3, #0]
 801b2ae:	e7f5      	b.n	801b29c <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 801b2b0:	4b0b      	ldr	r3, [pc, #44]	@ (801b2e0 <xTaskResumeAll+0xf4>)
 801b2b2:	2200      	movs	r2, #0
 801b2b4:	601a      	str	r2, [r3, #0]
 801b2b6:	e7e2      	b.n	801b27e <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 801b2b8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801b2ba:	f000 fd15 	bl	801bce8 <vPortExitCritical>
}
 801b2be:	4620      	mov	r0, r4
 801b2c0:	bd38      	pop	{r3, r4, r5, pc}
 801b2c2:	bf00      	nop
 801b2c4:	200038b4 	.word	0x200038b4
 801b2c8:	200038dc 	.word	0x200038dc
 801b2cc:	2000390c 	.word	0x2000390c
 801b2d0:	200038d4 	.word	0x200038d4
 801b2d4:	20003950 	.word	0x20003950
 801b2d8:	20003db0 	.word	0x20003db0
 801b2dc:	200038c8 	.word	0x200038c8
 801b2e0:	200038cc 	.word	0x200038cc

0801b2e4 <vTaskDelay>:
	{
 801b2e4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 801b2e6:	b1a8      	cbz	r0, 801b314 <vTaskDelay+0x30>
 801b2e8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 801b2ea:	4b10      	ldr	r3, [pc, #64]	@ (801b32c <vTaskDelay+0x48>)
 801b2ec:	681b      	ldr	r3, [r3, #0]
 801b2ee:	b143      	cbz	r3, 801b302 <vTaskDelay+0x1e>
 801b2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b2f4:	f383 8811 	msr	BASEPRI, r3
 801b2f8:	f3bf 8f6f 	isb	sy
 801b2fc:	f3bf 8f4f 	dsb	sy
 801b300:	e7fe      	b.n	801b300 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 801b302:	f7ff fed9 	bl	801b0b8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801b306:	2100      	movs	r1, #0
 801b308:	4620      	mov	r0, r4
 801b30a:	f7ff fdd1 	bl	801aeb0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 801b30e:	f7ff ff6d 	bl	801b1ec <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 801b312:	b948      	cbnz	r0, 801b328 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 801b314:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801b318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b31c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801b320:	f3bf 8f4f 	dsb	sy
 801b324:	f3bf 8f6f 	isb	sy
	}
 801b328:	bd10      	pop	{r4, pc}
 801b32a:	bf00      	nop
 801b32c:	200038b4 	.word	0x200038b4

0801b330 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801b330:	4b22      	ldr	r3, [pc, #136]	@ (801b3bc <vTaskSwitchContext+0x8c>)
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	b11b      	cbz	r3, 801b33e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 801b336:	4b22      	ldr	r3, [pc, #136]	@ (801b3c0 <vTaskSwitchContext+0x90>)
 801b338:	2201      	movs	r2, #1
 801b33a:	601a      	str	r2, [r3, #0]
 801b33c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 801b33e:	4b20      	ldr	r3, [pc, #128]	@ (801b3c0 <vTaskSwitchContext+0x90>)
 801b340:	2200      	movs	r2, #0
 801b342:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b344:	4b1f      	ldr	r3, [pc, #124]	@ (801b3c4 <vTaskSwitchContext+0x94>)
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801b34c:	008a      	lsls	r2, r1, #2
 801b34e:	491e      	ldr	r1, [pc, #120]	@ (801b3c8 <vTaskSwitchContext+0x98>)
 801b350:	588a      	ldr	r2, [r1, r2]
 801b352:	b95a      	cbnz	r2, 801b36c <vTaskSwitchContext+0x3c>
 801b354:	b10b      	cbz	r3, 801b35a <vTaskSwitchContext+0x2a>
 801b356:	3b01      	subs	r3, #1
 801b358:	e7f6      	b.n	801b348 <vTaskSwitchContext+0x18>
 801b35a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b35e:	f383 8811 	msr	BASEPRI, r3
 801b362:	f3bf 8f6f 	isb	sy
 801b366:	f3bf 8f4f 	dsb	sy
 801b36a:	e7fe      	b.n	801b36a <vTaskSwitchContext+0x3a>
 801b36c:	4608      	mov	r0, r1
 801b36e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801b372:	008a      	lsls	r2, r1, #2
 801b374:	4402      	add	r2, r0
 801b376:	6851      	ldr	r1, [r2, #4]
 801b378:	6849      	ldr	r1, [r1, #4]
 801b37a:	6051      	str	r1, [r2, #4]
 801b37c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801b380:	ea4f 028c 	mov.w	r2, ip, lsl #2
 801b384:	3208      	adds	r2, #8
 801b386:	4402      	add	r2, r0
 801b388:	4291      	cmp	r1, r2
 801b38a:	d00f      	beq.n	801b3ac <vTaskSwitchContext+0x7c>
 801b38c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801b390:	0091      	lsls	r1, r2, #2
 801b392:	4a0d      	ldr	r2, [pc, #52]	@ (801b3c8 <vTaskSwitchContext+0x98>)
 801b394:	440a      	add	r2, r1
 801b396:	6852      	ldr	r2, [r2, #4]
 801b398:	68d1      	ldr	r1, [r2, #12]
 801b39a:	4a0c      	ldr	r2, [pc, #48]	@ (801b3cc <vTaskSwitchContext+0x9c>)
 801b39c:	6011      	str	r1, [r2, #0]
 801b39e:	4909      	ldr	r1, [pc, #36]	@ (801b3c4 <vTaskSwitchContext+0x94>)
 801b3a0:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801b3a2:	6813      	ldr	r3, [r2, #0]
 801b3a4:	3358      	adds	r3, #88	@ 0x58
 801b3a6:	4a0a      	ldr	r2, [pc, #40]	@ (801b3d0 <vTaskSwitchContext+0xa0>)
 801b3a8:	6013      	str	r3, [r2, #0]
}
 801b3aa:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b3ac:	6848      	ldr	r0, [r1, #4]
 801b3ae:	4662      	mov	r2, ip
 801b3b0:	0091      	lsls	r1, r2, #2
 801b3b2:	4a05      	ldr	r2, [pc, #20]	@ (801b3c8 <vTaskSwitchContext+0x98>)
 801b3b4:	440a      	add	r2, r1
 801b3b6:	6050      	str	r0, [r2, #4]
 801b3b8:	e7e8      	b.n	801b38c <vTaskSwitchContext+0x5c>
 801b3ba:	bf00      	nop
 801b3bc:	200038b4 	.word	0x200038b4
 801b3c0:	200038c8 	.word	0x200038c8
 801b3c4:	200038d4 	.word	0x200038d4
 801b3c8:	20003950 	.word	0x20003950
 801b3cc:	20003db0 	.word	0x20003db0
 801b3d0:	2000017c 	.word	0x2000017c

0801b3d4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 801b3d4:	b158      	cbz	r0, 801b3ee <vTaskPlaceOnEventList+0x1a>
{
 801b3d6:	b510      	push	{r4, lr}
 801b3d8:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b3da:	4a09      	ldr	r2, [pc, #36]	@ (801b400 <vTaskPlaceOnEventList+0x2c>)
 801b3dc:	6811      	ldr	r1, [r2, #0]
 801b3de:	3118      	adds	r1, #24
 801b3e0:	f7fe fddf 	bl	8019fa2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801b3e4:	2101      	movs	r1, #1
 801b3e6:	4620      	mov	r0, r4
 801b3e8:	f7ff fd62 	bl	801aeb0 <prvAddCurrentTaskToDelayedList>
}
 801b3ec:	bd10      	pop	{r4, pc}
 801b3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b3f2:	f383 8811 	msr	BASEPRI, r3
 801b3f6:	f3bf 8f6f 	isb	sy
 801b3fa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 801b3fe:	e7fe      	b.n	801b3fe <vTaskPlaceOnEventList+0x2a>
 801b400:	20003db0 	.word	0x20003db0

0801b404 <vTaskPlaceOnEventListRestricted>:
	{
 801b404:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 801b406:	b170      	cbz	r0, 801b426 <vTaskPlaceOnEventListRestricted+0x22>
 801b408:	460d      	mov	r5, r1
 801b40a:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b40c:	4a0a      	ldr	r2, [pc, #40]	@ (801b438 <vTaskPlaceOnEventListRestricted+0x34>)
 801b40e:	6811      	ldr	r1, [r2, #0]
 801b410:	3118      	adds	r1, #24
 801b412:	f7fe fdbb 	bl	8019f8c <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 801b416:	b10c      	cbz	r4, 801b41c <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 801b418:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801b41c:	4621      	mov	r1, r4
 801b41e:	4628      	mov	r0, r5
 801b420:	f7ff fd46 	bl	801aeb0 <prvAddCurrentTaskToDelayedList>
	}
 801b424:	bd38      	pop	{r3, r4, r5, pc}
 801b426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b42a:	f383 8811 	msr	BASEPRI, r3
 801b42e:	f3bf 8f6f 	isb	sy
 801b432:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 801b436:	e7fe      	b.n	801b436 <vTaskPlaceOnEventListRestricted+0x32>
 801b438:	20003db0 	.word	0x20003db0

0801b43c <xTaskRemoveFromEventList>:
{
 801b43c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b43e:	68c3      	ldr	r3, [r0, #12]
 801b440:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 801b442:	b324      	cbz	r4, 801b48e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801b444:	f104 0518 	add.w	r5, r4, #24
 801b448:	4628      	mov	r0, r5
 801b44a:	f7fe fdc3 	bl	8019fd4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b44e:	4b18      	ldr	r3, [pc, #96]	@ (801b4b0 <xTaskRemoveFromEventList+0x74>)
 801b450:	681b      	ldr	r3, [r3, #0]
 801b452:	bb2b      	cbnz	r3, 801b4a0 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801b454:	1d25      	adds	r5, r4, #4
 801b456:	4628      	mov	r0, r5
 801b458:	f7fe fdbc 	bl	8019fd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801b45c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801b45e:	4b15      	ldr	r3, [pc, #84]	@ (801b4b4 <xTaskRemoveFromEventList+0x78>)
 801b460:	681b      	ldr	r3, [r3, #0]
 801b462:	4298      	cmp	r0, r3
 801b464:	d901      	bls.n	801b46a <xTaskRemoveFromEventList+0x2e>
 801b466:	4b13      	ldr	r3, [pc, #76]	@ (801b4b4 <xTaskRemoveFromEventList+0x78>)
 801b468:	6018      	str	r0, [r3, #0]
 801b46a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b46e:	4629      	mov	r1, r5
 801b470:	4b11      	ldr	r3, [pc, #68]	@ (801b4b8 <xTaskRemoveFromEventList+0x7c>)
 801b472:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b476:	f7fe fd89 	bl	8019f8c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b47a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801b47c:	4b0f      	ldr	r3, [pc, #60]	@ (801b4bc <xTaskRemoveFromEventList+0x80>)
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b482:	429a      	cmp	r2, r3
 801b484:	d911      	bls.n	801b4aa <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 801b486:	2001      	movs	r0, #1
 801b488:	4b0d      	ldr	r3, [pc, #52]	@ (801b4c0 <xTaskRemoveFromEventList+0x84>)
 801b48a:	6018      	str	r0, [r3, #0]
}
 801b48c:	bd38      	pop	{r3, r4, r5, pc}
 801b48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b492:	f383 8811 	msr	BASEPRI, r3
 801b496:	f3bf 8f6f 	isb	sy
 801b49a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 801b49e:	e7fe      	b.n	801b49e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801b4a0:	4629      	mov	r1, r5
 801b4a2:	4808      	ldr	r0, [pc, #32]	@ (801b4c4 <xTaskRemoveFromEventList+0x88>)
 801b4a4:	f7fe fd72 	bl	8019f8c <vListInsertEnd>
 801b4a8:	e7e7      	b.n	801b47a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 801b4aa:	2000      	movs	r0, #0
	return xReturn;
 801b4ac:	e7ee      	b.n	801b48c <xTaskRemoveFromEventList+0x50>
 801b4ae:	bf00      	nop
 801b4b0:	200038b4 	.word	0x200038b4
 801b4b4:	200038d4 	.word	0x200038d4
 801b4b8:	20003950 	.word	0x20003950
 801b4bc:	20003db0 	.word	0x20003db0
 801b4c0:	200038c8 	.word	0x200038c8
 801b4c4:	2000390c 	.word	0x2000390c

0801b4c8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801b4c8:	4b03      	ldr	r3, [pc, #12]	@ (801b4d8 <vTaskInternalSetTimeOutState+0x10>)
 801b4ca:	681b      	ldr	r3, [r3, #0]
 801b4cc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801b4ce:	4b03      	ldr	r3, [pc, #12]	@ (801b4dc <vTaskInternalSetTimeOutState+0x14>)
 801b4d0:	681b      	ldr	r3, [r3, #0]
 801b4d2:	6043      	str	r3, [r0, #4]
}
 801b4d4:	4770      	bx	lr
 801b4d6:	bf00      	nop
 801b4d8:	200038c4 	.word	0x200038c4
 801b4dc:	200038d8 	.word	0x200038d8

0801b4e0 <xTaskCheckForTimeOut>:
{
 801b4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 801b4e2:	b1c8      	cbz	r0, 801b518 <xTaskCheckForTimeOut+0x38>
 801b4e4:	460c      	mov	r4, r1
 801b4e6:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 801b4e8:	b1f9      	cbz	r1, 801b52a <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 801b4ea:	f000 fbdb 	bl	801bca4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 801b4ee:	4b1b      	ldr	r3, [pc, #108]	@ (801b55c <xTaskCheckForTimeOut+0x7c>)
 801b4f0:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801b4f2:	686b      	ldr	r3, [r5, #4]
 801b4f4:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 801b4f6:	6822      	ldr	r2, [r4, #0]
 801b4f8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801b4fc:	d026      	beq.n	801b54c <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801b4fe:	4e18      	ldr	r6, [pc, #96]	@ (801b560 <xTaskCheckForTimeOut+0x80>)
 801b500:	6836      	ldr	r6, [r6, #0]
 801b502:	682f      	ldr	r7, [r5, #0]
 801b504:	42b7      	cmp	r7, r6
 801b506:	d001      	beq.n	801b50c <xTaskCheckForTimeOut+0x2c>
 801b508:	428b      	cmp	r3, r1
 801b50a:	d924      	bls.n	801b556 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801b50c:	4282      	cmp	r2, r0
 801b50e:	d815      	bhi.n	801b53c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 801b510:	2300      	movs	r3, #0
 801b512:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 801b514:	2401      	movs	r4, #1
 801b516:	e01a      	b.n	801b54e <xTaskCheckForTimeOut+0x6e>
 801b518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b51c:	f383 8811 	msr	BASEPRI, r3
 801b520:	f3bf 8f6f 	isb	sy
 801b524:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 801b528:	e7fe      	b.n	801b528 <xTaskCheckForTimeOut+0x48>
 801b52a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b52e:	f383 8811 	msr	BASEPRI, r3
 801b532:	f3bf 8f6f 	isb	sy
 801b536:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 801b53a:	e7fe      	b.n	801b53a <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 801b53c:	1a5b      	subs	r3, r3, r1
 801b53e:	4413      	add	r3, r2
 801b540:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801b542:	4628      	mov	r0, r5
 801b544:	f7ff ffc0 	bl	801b4c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801b548:	2400      	movs	r4, #0
 801b54a:	e000      	b.n	801b54e <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 801b54c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801b54e:	f000 fbcb 	bl	801bce8 <vPortExitCritical>
}
 801b552:	4620      	mov	r0, r4
 801b554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 801b556:	2401      	movs	r4, #1
 801b558:	e7f9      	b.n	801b54e <xTaskCheckForTimeOut+0x6e>
 801b55a:	bf00      	nop
 801b55c:	200038d8 	.word	0x200038d8
 801b560:	200038c4 	.word	0x200038c4

0801b564 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 801b564:	4b01      	ldr	r3, [pc, #4]	@ (801b56c <vTaskMissedYield+0x8>)
 801b566:	2201      	movs	r2, #1
 801b568:	601a      	str	r2, [r3, #0]
}
 801b56a:	4770      	bx	lr
 801b56c:	200038c8 	.word	0x200038c8

0801b570 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 801b570:	4b01      	ldr	r3, [pc, #4]	@ (801b578 <xTaskGetCurrentTaskHandle+0x8>)
 801b572:	6818      	ldr	r0, [r3, #0]
	}
 801b574:	4770      	bx	lr
 801b576:	bf00      	nop
 801b578:	20003db0 	.word	0x20003db0

0801b57c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 801b57c:	4b05      	ldr	r3, [pc, #20]	@ (801b594 <xTaskGetSchedulerState+0x18>)
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	b133      	cbz	r3, 801b590 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b582:	4b05      	ldr	r3, [pc, #20]	@ (801b598 <xTaskGetSchedulerState+0x1c>)
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	b10b      	cbz	r3, 801b58c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 801b588:	2000      	movs	r0, #0
	}
 801b58a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 801b58c:	2002      	movs	r0, #2
 801b58e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 801b590:	2001      	movs	r0, #1
 801b592:	4770      	bx	lr
 801b594:	200038d0 	.word	0x200038d0
 801b598:	200038b4 	.word	0x200038b4

0801b59c <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 801b59c:	2800      	cmp	r0, #0
 801b59e:	d03e      	beq.n	801b61e <xTaskPriorityInherit+0x82>
	{
 801b5a0:	b538      	push	{r3, r4, r5, lr}
 801b5a2:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801b5a4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801b5a6:	4a20      	ldr	r2, [pc, #128]	@ (801b628 <xTaskPriorityInherit+0x8c>)
 801b5a8:	6812      	ldr	r2, [r2, #0]
 801b5aa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801b5ac:	4293      	cmp	r3, r2
 801b5ae:	d22e      	bcs.n	801b60e <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b5b0:	6982      	ldr	r2, [r0, #24]
 801b5b2:	2a00      	cmp	r2, #0
 801b5b4:	db05      	blt.n	801b5c2 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b5b6:	4a1c      	ldr	r2, [pc, #112]	@ (801b628 <xTaskPriorityInherit+0x8c>)
 801b5b8:	6812      	ldr	r2, [r2, #0]
 801b5ba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801b5bc:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 801b5c0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801b5c2:	6961      	ldr	r1, [r4, #20]
 801b5c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801b5c8:	4a18      	ldr	r2, [pc, #96]	@ (801b62c <xTaskPriorityInherit+0x90>)
 801b5ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b5ce:	4299      	cmp	r1, r3
 801b5d0:	d005      	beq.n	801b5de <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b5d2:	4b15      	ldr	r3, [pc, #84]	@ (801b628 <xTaskPriorityInherit+0x8c>)
 801b5d4:	681b      	ldr	r3, [r3, #0]
 801b5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b5d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 801b5da:	2001      	movs	r0, #1
	}
 801b5dc:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b5de:	1d25      	adds	r5, r4, #4
 801b5e0:	4628      	mov	r0, r5
 801b5e2:	f7fe fcf7 	bl	8019fd4 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b5e6:	4b10      	ldr	r3, [pc, #64]	@ (801b628 <xTaskPriorityInherit+0x8c>)
 801b5e8:	681b      	ldr	r3, [r3, #0]
 801b5ea:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801b5ec:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801b5ee:	4b10      	ldr	r3, [pc, #64]	@ (801b630 <xTaskPriorityInherit+0x94>)
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	4298      	cmp	r0, r3
 801b5f4:	d901      	bls.n	801b5fa <xTaskPriorityInherit+0x5e>
 801b5f6:	4b0e      	ldr	r3, [pc, #56]	@ (801b630 <xTaskPriorityInherit+0x94>)
 801b5f8:	6018      	str	r0, [r3, #0]
 801b5fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b5fe:	4629      	mov	r1, r5
 801b600:	4b0a      	ldr	r3, [pc, #40]	@ (801b62c <xTaskPriorityInherit+0x90>)
 801b602:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b606:	f7fe fcc1 	bl	8019f8c <vListInsertEnd>
				xReturn = pdTRUE;
 801b60a:	2001      	movs	r0, #1
 801b60c:	e7e6      	b.n	801b5dc <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801b60e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 801b610:	4b05      	ldr	r3, [pc, #20]	@ (801b628 <xTaskPriorityInherit+0x8c>)
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b616:	429a      	cmp	r2, r3
 801b618:	d303      	bcc.n	801b622 <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 801b61a:	2000      	movs	r0, #0
 801b61c:	e7de      	b.n	801b5dc <xTaskPriorityInherit+0x40>
 801b61e:	2000      	movs	r0, #0
	}
 801b620:	4770      	bx	lr
					xReturn = pdTRUE;
 801b622:	2001      	movs	r0, #1
		return xReturn;
 801b624:	e7da      	b.n	801b5dc <xTaskPriorityInherit+0x40>
 801b626:	bf00      	nop
 801b628:	20003db0 	.word	0x20003db0
 801b62c:	20003950 	.word	0x20003950
 801b630:	200038d4 	.word	0x200038d4

0801b634 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 801b634:	2800      	cmp	r0, #0
 801b636:	d03b      	beq.n	801b6b0 <xTaskPriorityDisinherit+0x7c>
	{
 801b638:	b538      	push	{r3, r4, r5, lr}
 801b63a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 801b63c:	4b1e      	ldr	r3, [pc, #120]	@ (801b6b8 <xTaskPriorityDisinherit+0x84>)
 801b63e:	681b      	ldr	r3, [r3, #0]
 801b640:	4283      	cmp	r3, r0
 801b642:	d008      	beq.n	801b656 <xTaskPriorityDisinherit+0x22>
 801b644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b648:	f383 8811 	msr	BASEPRI, r3
 801b64c:	f3bf 8f6f 	isb	sy
 801b650:	f3bf 8f4f 	dsb	sy
 801b654:	e7fe      	b.n	801b654 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 801b656:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801b658:	b943      	cbnz	r3, 801b66c <xTaskPriorityDisinherit+0x38>
 801b65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b65e:	f383 8811 	msr	BASEPRI, r3
 801b662:	f3bf 8f6f 	isb	sy
 801b666:	f3bf 8f4f 	dsb	sy
 801b66a:	e7fe      	b.n	801b66a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 801b66c:	3b01      	subs	r3, #1
 801b66e:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801b670:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801b672:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 801b674:	4291      	cmp	r1, r2
 801b676:	d01d      	beq.n	801b6b4 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801b678:	b10b      	cbz	r3, 801b67e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 801b67a:	2000      	movs	r0, #0
	}
 801b67c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b67e:	1d05      	adds	r5, r0, #4
 801b680:	4628      	mov	r0, r5
 801b682:	f7fe fca7 	bl	8019fd4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801b686:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801b688:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b68a:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 801b68e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 801b690:	4b0a      	ldr	r3, [pc, #40]	@ (801b6bc <xTaskPriorityDisinherit+0x88>)
 801b692:	681b      	ldr	r3, [r3, #0]
 801b694:	4298      	cmp	r0, r3
 801b696:	d901      	bls.n	801b69c <xTaskPriorityDisinherit+0x68>
 801b698:	4b08      	ldr	r3, [pc, #32]	@ (801b6bc <xTaskPriorityDisinherit+0x88>)
 801b69a:	6018      	str	r0, [r3, #0]
 801b69c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b6a0:	4629      	mov	r1, r5
 801b6a2:	4b07      	ldr	r3, [pc, #28]	@ (801b6c0 <xTaskPriorityDisinherit+0x8c>)
 801b6a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b6a8:	f7fe fc70 	bl	8019f8c <vListInsertEnd>
					xReturn = pdTRUE;
 801b6ac:	2001      	movs	r0, #1
 801b6ae:	e7e5      	b.n	801b67c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 801b6b0:	2000      	movs	r0, #0
	}
 801b6b2:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 801b6b4:	2000      	movs	r0, #0
 801b6b6:	e7e1      	b.n	801b67c <xTaskPriorityDisinherit+0x48>
 801b6b8:	20003db0 	.word	0x20003db0
 801b6bc:	200038d4 	.word	0x200038d4
 801b6c0:	20003950 	.word	0x20003950

0801b6c4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 801b6c4:	2800      	cmp	r0, #0
 801b6c6:	d046      	beq.n	801b756 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 801b6c8:	b538      	push	{r3, r4, r5, lr}
 801b6ca:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 801b6cc:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801b6ce:	b943      	cbnz	r3, 801b6e2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 801b6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b6d4:	f383 8811 	msr	BASEPRI, r3
 801b6d8:	f3bf 8f6f 	isb	sy
 801b6dc:	f3bf 8f4f 	dsb	sy
 801b6e0:	e7fe      	b.n	801b6e0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801b6e2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 801b6e4:	428a      	cmp	r2, r1
 801b6e6:	d200      	bcs.n	801b6ea <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801b6e8:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 801b6ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801b6ec:	4291      	cmp	r1, r2
 801b6ee:	d001      	beq.n	801b6f4 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801b6f0:	2b01      	cmp	r3, #1
 801b6f2:	d000      	beq.n	801b6f6 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 801b6f4:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 801b6f6:	4b18      	ldr	r3, [pc, #96]	@ (801b758 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 801b6f8:	681b      	ldr	r3, [r3, #0]
 801b6fa:	42a3      	cmp	r3, r4
 801b6fc:	d022      	beq.n	801b744 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 801b6fe:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b700:	69a3      	ldr	r3, [r4, #24]
 801b702:	2b00      	cmp	r3, #0
 801b704:	db02      	blt.n	801b70c <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b706:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 801b70a:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801b70c:	6962      	ldr	r2, [r4, #20]
 801b70e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801b712:	4b12      	ldr	r3, [pc, #72]	@ (801b75c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 801b714:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801b718:	429a      	cmp	r2, r3
 801b71a:	d1eb      	bne.n	801b6f4 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b71c:	1d25      	adds	r5, r4, #4
 801b71e:	4628      	mov	r0, r5
 801b720:	f7fe fc58 	bl	8019fd4 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 801b724:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801b726:	4b0e      	ldr	r3, [pc, #56]	@ (801b760 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	4298      	cmp	r0, r3
 801b72c:	d901      	bls.n	801b732 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 801b72e:	4b0c      	ldr	r3, [pc, #48]	@ (801b760 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 801b730:	6018      	str	r0, [r3, #0]
 801b732:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b736:	4629      	mov	r1, r5
 801b738:	4b08      	ldr	r3, [pc, #32]	@ (801b75c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 801b73a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b73e:	f7fe fc25 	bl	8019f8c <vListInsertEnd>
	}
 801b742:	e7d7      	b.n	801b6f4 <vTaskPriorityDisinheritAfterTimeout+0x30>
 801b744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b748:	f383 8811 	msr	BASEPRI, r3
 801b74c:	f3bf 8f6f 	isb	sy
 801b750:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 801b754:	e7fe      	b.n	801b754 <vTaskPriorityDisinheritAfterTimeout+0x90>
 801b756:	4770      	bx	lr
 801b758:	20003db0 	.word	0x20003db0
 801b75c:	20003950 	.word	0x20003950
 801b760:	200038d4 	.word	0x200038d4

0801b764 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 801b764:	4b05      	ldr	r3, [pc, #20]	@ (801b77c <pvTaskIncrementMutexHeldCount+0x18>)
 801b766:	681b      	ldr	r3, [r3, #0]
 801b768:	b123      	cbz	r3, 801b774 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 801b76a:	4b04      	ldr	r3, [pc, #16]	@ (801b77c <pvTaskIncrementMutexHeldCount+0x18>)
 801b76c:	681a      	ldr	r2, [r3, #0]
 801b76e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801b770:	3301      	adds	r3, #1
 801b772:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 801b774:	4b01      	ldr	r3, [pc, #4]	@ (801b77c <pvTaskIncrementMutexHeldCount+0x18>)
 801b776:	6818      	ldr	r0, [r3, #0]
	}
 801b778:	4770      	bx	lr
 801b77a:	bf00      	nop
 801b77c:	20003db0 	.word	0x20003db0

0801b780 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801b780:	4b06      	ldr	r3, [pc, #24]	@ (801b79c <prvGetNextExpireTime+0x1c>)
 801b782:	681a      	ldr	r2, [r3, #0]
 801b784:	6813      	ldr	r3, [r2, #0]
 801b786:	b92b      	cbnz	r3, 801b794 <prvGetNextExpireTime+0x14>
 801b788:	2301      	movs	r3, #1
 801b78a:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 801b78c:	b923      	cbnz	r3, 801b798 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b78e:	68d3      	ldr	r3, [r2, #12]
 801b790:	6818      	ldr	r0, [r3, #0]
 801b792:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801b794:	2300      	movs	r3, #0
 801b796:	e7f8      	b.n	801b78a <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801b798:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 801b79a:	4770      	bx	lr
 801b79c:	20003eb4 	.word	0x20003eb4

0801b7a0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801b7a0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801b7a2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b7a4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 801b7a6:	4291      	cmp	r1, r2
 801b7a8:	d80c      	bhi.n	801b7c4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b7aa:	1ad2      	subs	r2, r2, r3
 801b7ac:	6983      	ldr	r3, [r0, #24]
 801b7ae:	429a      	cmp	r2, r3
 801b7b0:	d301      	bcc.n	801b7b6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801b7b2:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 801b7b4:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801b7b6:	1d01      	adds	r1, r0, #4
 801b7b8:	4b09      	ldr	r3, [pc, #36]	@ (801b7e0 <prvInsertTimerInActiveList+0x40>)
 801b7ba:	6818      	ldr	r0, [r3, #0]
 801b7bc:	f7fe fbf1 	bl	8019fa2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801b7c0:	2000      	movs	r0, #0
 801b7c2:	e7f7      	b.n	801b7b4 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801b7c4:	429a      	cmp	r2, r3
 801b7c6:	d201      	bcs.n	801b7cc <prvInsertTimerInActiveList+0x2c>
 801b7c8:	4299      	cmp	r1, r3
 801b7ca:	d206      	bcs.n	801b7da <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b7cc:	1d01      	adds	r1, r0, #4
 801b7ce:	4b05      	ldr	r3, [pc, #20]	@ (801b7e4 <prvInsertTimerInActiveList+0x44>)
 801b7d0:	6818      	ldr	r0, [r3, #0]
 801b7d2:	f7fe fbe6 	bl	8019fa2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801b7d6:	2000      	movs	r0, #0
 801b7d8:	e7ec      	b.n	801b7b4 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 801b7da:	2001      	movs	r0, #1
	return xProcessTimerNow;
 801b7dc:	e7ea      	b.n	801b7b4 <prvInsertTimerInActiveList+0x14>
 801b7de:	bf00      	nop
 801b7e0:	20003eb0 	.word	0x20003eb0
 801b7e4:	20003eb4 	.word	0x20003eb4

0801b7e8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801b7e8:	b530      	push	{r4, r5, lr}
 801b7ea:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801b7ec:	f000 fa5a 	bl	801bca4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801b7f0:	4b11      	ldr	r3, [pc, #68]	@ (801b838 <prvCheckForValidListAndQueue+0x50>)
 801b7f2:	681b      	ldr	r3, [r3, #0]
 801b7f4:	b11b      	cbz	r3, 801b7fe <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b7f6:	f000 fa77 	bl	801bce8 <vPortExitCritical>
}
 801b7fa:	b003      	add	sp, #12
 801b7fc:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 801b7fe:	4d0f      	ldr	r5, [pc, #60]	@ (801b83c <prvCheckForValidListAndQueue+0x54>)
 801b800:	4628      	mov	r0, r5
 801b802:	f7fe fbb5 	bl	8019f70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801b806:	4c0e      	ldr	r4, [pc, #56]	@ (801b840 <prvCheckForValidListAndQueue+0x58>)
 801b808:	4620      	mov	r0, r4
 801b80a:	f7fe fbb1 	bl	8019f70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801b80e:	4b0d      	ldr	r3, [pc, #52]	@ (801b844 <prvCheckForValidListAndQueue+0x5c>)
 801b810:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801b812:	4b0d      	ldr	r3, [pc, #52]	@ (801b848 <prvCheckForValidListAndQueue+0x60>)
 801b814:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801b816:	2300      	movs	r3, #0
 801b818:	9300      	str	r3, [sp, #0]
 801b81a:	4b0c      	ldr	r3, [pc, #48]	@ (801b84c <prvCheckForValidListAndQueue+0x64>)
 801b81c:	4a0c      	ldr	r2, [pc, #48]	@ (801b850 <prvCheckForValidListAndQueue+0x68>)
 801b81e:	2110      	movs	r1, #16
 801b820:	200a      	movs	r0, #10
 801b822:	f7fe fce5 	bl	801a1f0 <xQueueGenericCreateStatic>
 801b826:	4b04      	ldr	r3, [pc, #16]	@ (801b838 <prvCheckForValidListAndQueue+0x50>)
 801b828:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 801b82a:	2800      	cmp	r0, #0
 801b82c:	d0e3      	beq.n	801b7f6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801b82e:	4909      	ldr	r1, [pc, #36]	@ (801b854 <prvCheckForValidListAndQueue+0x6c>)
 801b830:	f7ff f984 	bl	801ab3c <vQueueAddToRegistry>
 801b834:	e7df      	b.n	801b7f6 <prvCheckForValidListAndQueue+0xe>
 801b836:	bf00      	nop
 801b838:	20003eac 	.word	0x20003eac
 801b83c:	20003ecc 	.word	0x20003ecc
 801b840:	20003eb8 	.word	0x20003eb8
 801b844:	20003eb4 	.word	0x20003eb4
 801b848:	20003eb0 	.word	0x20003eb0
 801b84c:	20003db4 	.word	0x20003db4
 801b850:	20003e04 	.word	0x20003e04
 801b854:	0803a134 	.word	0x0803a134

0801b858 <xTimerCreateTimerTask>:
{
 801b858:	b510      	push	{r4, lr}
 801b85a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 801b85c:	f7ff ffc4 	bl	801b7e8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 801b860:	4b12      	ldr	r3, [pc, #72]	@ (801b8ac <xTimerCreateTimerTask+0x54>)
 801b862:	681b      	ldr	r3, [r3, #0]
 801b864:	b1cb      	cbz	r3, 801b89a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801b866:	2400      	movs	r4, #0
 801b868:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801b86a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801b86c:	aa07      	add	r2, sp, #28
 801b86e:	a906      	add	r1, sp, #24
 801b870:	a805      	add	r0, sp, #20
 801b872:	f7fe fb71 	bl	8019f58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801b876:	9b05      	ldr	r3, [sp, #20]
 801b878:	9302      	str	r3, [sp, #8]
 801b87a:	9b06      	ldr	r3, [sp, #24]
 801b87c:	9301      	str	r3, [sp, #4]
 801b87e:	2302      	movs	r3, #2
 801b880:	9300      	str	r3, [sp, #0]
 801b882:	4623      	mov	r3, r4
 801b884:	9a07      	ldr	r2, [sp, #28]
 801b886:	490a      	ldr	r1, [pc, #40]	@ (801b8b0 <xTimerCreateTimerTask+0x58>)
 801b888:	480a      	ldr	r0, [pc, #40]	@ (801b8b4 <xTimerCreateTimerTask+0x5c>)
 801b88a:	f7ff fb4f 	bl	801af2c <xTaskCreateStatic>
 801b88e:	4b0a      	ldr	r3, [pc, #40]	@ (801b8b8 <xTimerCreateTimerTask+0x60>)
 801b890:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 801b892:	b110      	cbz	r0, 801b89a <xTimerCreateTimerTask+0x42>
}
 801b894:	2001      	movs	r0, #1
 801b896:	b008      	add	sp, #32
 801b898:	bd10      	pop	{r4, pc}
 801b89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b89e:	f383 8811 	msr	BASEPRI, r3
 801b8a2:	f3bf 8f6f 	isb	sy
 801b8a6:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 801b8aa:	e7fe      	b.n	801b8aa <xTimerCreateTimerTask+0x52>
 801b8ac:	20003eac 	.word	0x20003eac
 801b8b0:	0803a13c 	.word	0x0803a13c
 801b8b4:	0801bbbd 	.word	0x0801bbbd
 801b8b8:	20003ea8 	.word	0x20003ea8

0801b8bc <xTimerGenericCommand>:
	configASSERT( xTimer );
 801b8bc:	b1b8      	cbz	r0, 801b8ee <xTimerGenericCommand+0x32>
 801b8be:	469c      	mov	ip, r3
 801b8c0:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 801b8c2:	4818      	ldr	r0, [pc, #96]	@ (801b924 <xTimerGenericCommand+0x68>)
 801b8c4:	6800      	ldr	r0, [r0, #0]
 801b8c6:	b358      	cbz	r0, 801b920 <xTimerGenericCommand+0x64>
{
 801b8c8:	b500      	push	{lr}
 801b8ca:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 801b8cc:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801b8ce:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801b8d0:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801b8d2:	2905      	cmp	r1, #5
 801b8d4:	dc1c      	bgt.n	801b910 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801b8d6:	f7ff fe51 	bl	801b57c <xTaskGetSchedulerState>
 801b8da:	2802      	cmp	r0, #2
 801b8dc:	d010      	beq.n	801b900 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801b8de:	2300      	movs	r3, #0
 801b8e0:	461a      	mov	r2, r3
 801b8e2:	4669      	mov	r1, sp
 801b8e4:	480f      	ldr	r0, [pc, #60]	@ (801b924 <xTimerGenericCommand+0x68>)
 801b8e6:	6800      	ldr	r0, [r0, #0]
 801b8e8:	f7fe fcf0 	bl	801a2cc <xQueueGenericSend>
 801b8ec:	e015      	b.n	801b91a <xTimerGenericCommand+0x5e>
 801b8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b8f2:	f383 8811 	msr	BASEPRI, r3
 801b8f6:	f3bf 8f6f 	isb	sy
 801b8fa:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 801b8fe:	e7fe      	b.n	801b8fe <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801b900:	2300      	movs	r3, #0
 801b902:	9a06      	ldr	r2, [sp, #24]
 801b904:	4669      	mov	r1, sp
 801b906:	4807      	ldr	r0, [pc, #28]	@ (801b924 <xTimerGenericCommand+0x68>)
 801b908:	6800      	ldr	r0, [r0, #0]
 801b90a:	f7fe fcdf 	bl	801a2cc <xQueueGenericSend>
 801b90e:	e004      	b.n	801b91a <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801b910:	2300      	movs	r3, #0
 801b912:	4662      	mov	r2, ip
 801b914:	4669      	mov	r1, sp
 801b916:	f7fe fde3 	bl	801a4e0 <xQueueGenericSendFromISR>
}
 801b91a:	b005      	add	sp, #20
 801b91c:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 801b920:	2000      	movs	r0, #0
}
 801b922:	4770      	bx	lr
 801b924:	20003eac 	.word	0x20003eac

0801b928 <prvSwitchTimerLists>:
{
 801b928:	b570      	push	{r4, r5, r6, lr}
 801b92a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b92c:	4b1b      	ldr	r3, [pc, #108]	@ (801b99c <prvSwitchTimerLists+0x74>)
 801b92e:	681b      	ldr	r3, [r3, #0]
 801b930:	681a      	ldr	r2, [r3, #0]
 801b932:	b362      	cbz	r2, 801b98e <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b934:	68db      	ldr	r3, [r3, #12]
 801b936:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b938:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b93a:	1d25      	adds	r5, r4, #4
 801b93c:	4628      	mov	r0, r5
 801b93e:	f7fe fb49 	bl	8019fd4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b942:	6a23      	ldr	r3, [r4, #32]
 801b944:	4620      	mov	r0, r4
 801b946:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b948:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801b94c:	f013 0f04 	tst.w	r3, #4
 801b950:	d0ec      	beq.n	801b92c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801b952:	69a3      	ldr	r3, [r4, #24]
 801b954:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 801b956:	429e      	cmp	r6, r3
 801b958:	d207      	bcs.n	801b96a <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801b95a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b95c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b95e:	4629      	mov	r1, r5
 801b960:	4b0e      	ldr	r3, [pc, #56]	@ (801b99c <prvSwitchTimerLists+0x74>)
 801b962:	6818      	ldr	r0, [r3, #0]
 801b964:	f7fe fb1d 	bl	8019fa2 <vListInsert>
 801b968:	e7e0      	b.n	801b92c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b96a:	2100      	movs	r1, #0
 801b96c:	9100      	str	r1, [sp, #0]
 801b96e:	460b      	mov	r3, r1
 801b970:	4632      	mov	r2, r6
 801b972:	4620      	mov	r0, r4
 801b974:	f7ff ffa2 	bl	801b8bc <xTimerGenericCommand>
				configASSERT( xResult );
 801b978:	2800      	cmp	r0, #0
 801b97a:	d1d7      	bne.n	801b92c <prvSwitchTimerLists+0x4>
 801b97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b980:	f383 8811 	msr	BASEPRI, r3
 801b984:	f3bf 8f6f 	isb	sy
 801b988:	f3bf 8f4f 	dsb	sy
 801b98c:	e7fe      	b.n	801b98c <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 801b98e:	4a04      	ldr	r2, [pc, #16]	@ (801b9a0 <prvSwitchTimerLists+0x78>)
 801b990:	6810      	ldr	r0, [r2, #0]
 801b992:	4902      	ldr	r1, [pc, #8]	@ (801b99c <prvSwitchTimerLists+0x74>)
 801b994:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 801b996:	6013      	str	r3, [r2, #0]
}
 801b998:	b002      	add	sp, #8
 801b99a:	bd70      	pop	{r4, r5, r6, pc}
 801b99c:	20003eb4 	.word	0x20003eb4
 801b9a0:	20003eb0 	.word	0x20003eb0

0801b9a4 <prvSampleTimeNow>:
{
 801b9a4:	b538      	push	{r3, r4, r5, lr}
 801b9a6:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 801b9a8:	f7ff fb8e 	bl	801b0c8 <xTaskGetTickCount>
 801b9ac:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 801b9ae:	4b07      	ldr	r3, [pc, #28]	@ (801b9cc <prvSampleTimeNow+0x28>)
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	4283      	cmp	r3, r0
 801b9b4:	d805      	bhi.n	801b9c2 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 801b9b6:	2300      	movs	r3, #0
 801b9b8:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 801b9ba:	4b04      	ldr	r3, [pc, #16]	@ (801b9cc <prvSampleTimeNow+0x28>)
 801b9bc:	601c      	str	r4, [r3, #0]
}
 801b9be:	4620      	mov	r0, r4
 801b9c0:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 801b9c2:	f7ff ffb1 	bl	801b928 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801b9c6:	2301      	movs	r3, #1
 801b9c8:	602b      	str	r3, [r5, #0]
 801b9ca:	e7f6      	b.n	801b9ba <prvSampleTimeNow+0x16>
 801b9cc:	20003ea4 	.word	0x20003ea4

0801b9d0 <prvProcessExpiredTimer>:
{
 801b9d0:	b570      	push	{r4, r5, r6, lr}
 801b9d2:	b082      	sub	sp, #8
 801b9d4:	4606      	mov	r6, r0
 801b9d6:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b9d8:	4917      	ldr	r1, [pc, #92]	@ (801ba38 <prvProcessExpiredTimer+0x68>)
 801b9da:	6809      	ldr	r1, [r1, #0]
 801b9dc:	68c9      	ldr	r1, [r1, #12]
 801b9de:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b9e0:	1d20      	adds	r0, r4, #4
 801b9e2:	f7fe faf7 	bl	8019fd4 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b9e6:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 801b9ea:	f01c 0f04 	tst.w	ip, #4
 801b9ee:	d108      	bne.n	801ba02 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b9f0:	f02c 0c01 	bic.w	ip, ip, #1
 801b9f4:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b9f8:	6a23      	ldr	r3, [r4, #32]
 801b9fa:	4620      	mov	r0, r4
 801b9fc:	4798      	blx	r3
}
 801b9fe:	b002      	add	sp, #8
 801ba00:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801ba02:	69a1      	ldr	r1, [r4, #24]
 801ba04:	4633      	mov	r3, r6
 801ba06:	462a      	mov	r2, r5
 801ba08:	4431      	add	r1, r6
 801ba0a:	4620      	mov	r0, r4
 801ba0c:	f7ff fec8 	bl	801b7a0 <prvInsertTimerInActiveList>
 801ba10:	2800      	cmp	r0, #0
 801ba12:	d0f1      	beq.n	801b9f8 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801ba14:	2100      	movs	r1, #0
 801ba16:	9100      	str	r1, [sp, #0]
 801ba18:	460b      	mov	r3, r1
 801ba1a:	4632      	mov	r2, r6
 801ba1c:	4620      	mov	r0, r4
 801ba1e:	f7ff ff4d 	bl	801b8bc <xTimerGenericCommand>
			configASSERT( xResult );
 801ba22:	2800      	cmp	r0, #0
 801ba24:	d1e8      	bne.n	801b9f8 <prvProcessExpiredTimer+0x28>
 801ba26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ba2a:	f383 8811 	msr	BASEPRI, r3
 801ba2e:	f3bf 8f6f 	isb	sy
 801ba32:	f3bf 8f4f 	dsb	sy
 801ba36:	e7fe      	b.n	801ba36 <prvProcessExpiredTimer+0x66>
 801ba38:	20003eb4 	.word	0x20003eb4

0801ba3c <prvProcessTimerOrBlockTask>:
{
 801ba3c:	b570      	push	{r4, r5, r6, lr}
 801ba3e:	b082      	sub	sp, #8
 801ba40:	4606      	mov	r6, r0
 801ba42:	460c      	mov	r4, r1
	vTaskSuspendAll();
 801ba44:	f7ff fb38 	bl	801b0b8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801ba48:	a801      	add	r0, sp, #4
 801ba4a:	f7ff ffab 	bl	801b9a4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 801ba4e:	9b01      	ldr	r3, [sp, #4]
 801ba50:	bb33      	cbnz	r3, 801baa0 <prvProcessTimerOrBlockTask+0x64>
 801ba52:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801ba54:	b9e4      	cbnz	r4, 801ba90 <prvProcessTimerOrBlockTask+0x54>
 801ba56:	42b0      	cmp	r0, r6
 801ba58:	d213      	bcs.n	801ba82 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801ba5a:	4622      	mov	r2, r4
 801ba5c:	1b71      	subs	r1, r6, r5
 801ba5e:	4b12      	ldr	r3, [pc, #72]	@ (801baa8 <prvProcessTimerOrBlockTask+0x6c>)
 801ba60:	6818      	ldr	r0, [r3, #0]
 801ba62:	f7ff f87f 	bl	801ab64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801ba66:	f7ff fbc1 	bl	801b1ec <xTaskResumeAll>
 801ba6a:	b9d8      	cbnz	r0, 801baa4 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 801ba6c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801ba70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ba74:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801ba78:	f3bf 8f4f 	dsb	sy
 801ba7c:	f3bf 8f6f 	isb	sy
 801ba80:	e010      	b.n	801baa4 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 801ba82:	f7ff fbb3 	bl	801b1ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801ba86:	4629      	mov	r1, r5
 801ba88:	4630      	mov	r0, r6
 801ba8a:	f7ff ffa1 	bl	801b9d0 <prvProcessExpiredTimer>
 801ba8e:	e009      	b.n	801baa4 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801ba90:	4a06      	ldr	r2, [pc, #24]	@ (801baac <prvProcessTimerOrBlockTask+0x70>)
 801ba92:	6812      	ldr	r2, [r2, #0]
 801ba94:	6812      	ldr	r2, [r2, #0]
 801ba96:	b90a      	cbnz	r2, 801ba9c <prvProcessTimerOrBlockTask+0x60>
 801ba98:	2401      	movs	r4, #1
 801ba9a:	e7de      	b.n	801ba5a <prvProcessTimerOrBlockTask+0x1e>
 801ba9c:	461c      	mov	r4, r3
 801ba9e:	e7dc      	b.n	801ba5a <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 801baa0:	f7ff fba4 	bl	801b1ec <xTaskResumeAll>
}
 801baa4:	b002      	add	sp, #8
 801baa6:	bd70      	pop	{r4, r5, r6, pc}
 801baa8:	20003eac 	.word	0x20003eac
 801baac:	20003eb0 	.word	0x20003eb0

0801bab0 <prvProcessReceivedCommands>:
{
 801bab0:	b510      	push	{r4, lr}
 801bab2:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801bab4:	e002      	b.n	801babc <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801bab6:	9b04      	ldr	r3, [sp, #16]
 801bab8:	2b00      	cmp	r3, #0
 801baba:	da0f      	bge.n	801badc <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801babc:	2200      	movs	r2, #0
 801babe:	a904      	add	r1, sp, #16
 801bac0:	4b3d      	ldr	r3, [pc, #244]	@ (801bbb8 <prvProcessReceivedCommands+0x108>)
 801bac2:	6818      	ldr	r0, [r3, #0]
 801bac4:	f7fe fd73 	bl	801a5ae <xQueueReceive>
 801bac8:	2800      	cmp	r0, #0
 801baca:	d073      	beq.n	801bbb4 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801bacc:	9b04      	ldr	r3, [sp, #16]
 801bace:	2b00      	cmp	r3, #0
 801bad0:	daf1      	bge.n	801bab6 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801bad2:	9907      	ldr	r1, [sp, #28]
 801bad4:	9806      	ldr	r0, [sp, #24]
 801bad6:	9b05      	ldr	r3, [sp, #20]
 801bad8:	4798      	blx	r3
 801bada:	e7ec      	b.n	801bab6 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801badc:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801bade:	6963      	ldr	r3, [r4, #20]
 801bae0:	b113      	cbz	r3, 801bae8 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bae2:	1d20      	adds	r0, r4, #4
 801bae4:	f7fe fa76 	bl	8019fd4 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801bae8:	a803      	add	r0, sp, #12
 801baea:	f7ff ff5b 	bl	801b9a4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 801baee:	9b04      	ldr	r3, [sp, #16]
 801baf0:	2b09      	cmp	r3, #9
 801baf2:	d8e3      	bhi.n	801babc <prvProcessReceivedCommands+0xc>
 801baf4:	e8df f003 	tbb	[pc, r3]
 801baf8:	30050505 	.word	0x30050505
 801bafc:	05055037 	.word	0x05055037
 801bb00:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801bb02:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801bb06:	f043 0301 	orr.w	r3, r3, #1
 801bb0a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801bb0e:	9b05      	ldr	r3, [sp, #20]
 801bb10:	69a1      	ldr	r1, [r4, #24]
 801bb12:	4602      	mov	r2, r0
 801bb14:	4419      	add	r1, r3
 801bb16:	4620      	mov	r0, r4
 801bb18:	f7ff fe42 	bl	801b7a0 <prvInsertTimerInActiveList>
 801bb1c:	2800      	cmp	r0, #0
 801bb1e:	d0cd      	beq.n	801babc <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bb20:	6a23      	ldr	r3, [r4, #32]
 801bb22:	4620      	mov	r0, r4
 801bb24:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bb26:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801bb2a:	f013 0f04 	tst.w	r3, #4
 801bb2e:	d0c5      	beq.n	801babc <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801bb30:	69a2      	ldr	r2, [r4, #24]
 801bb32:	2100      	movs	r1, #0
 801bb34:	9100      	str	r1, [sp, #0]
 801bb36:	460b      	mov	r3, r1
 801bb38:	9805      	ldr	r0, [sp, #20]
 801bb3a:	4402      	add	r2, r0
 801bb3c:	4620      	mov	r0, r4
 801bb3e:	f7ff febd 	bl	801b8bc <xTimerGenericCommand>
							configASSERT( xResult );
 801bb42:	2800      	cmp	r0, #0
 801bb44:	d1ba      	bne.n	801babc <prvProcessReceivedCommands+0xc>
 801bb46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bb4a:	f383 8811 	msr	BASEPRI, r3
 801bb4e:	f3bf 8f6f 	isb	sy
 801bb52:	f3bf 8f4f 	dsb	sy
 801bb56:	e7fe      	b.n	801bb56 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bb58:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801bb5c:	f023 0301 	bic.w	r3, r3, #1
 801bb60:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 801bb64:	e7aa      	b.n	801babc <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801bb66:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801bb6a:	f043 0301 	orr.w	r3, r3, #1
 801bb6e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801bb72:	9905      	ldr	r1, [sp, #20]
 801bb74:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801bb76:	b131      	cbz	r1, 801bb86 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801bb78:	4603      	mov	r3, r0
 801bb7a:	4602      	mov	r2, r0
 801bb7c:	4401      	add	r1, r0
 801bb7e:	4620      	mov	r0, r4
 801bb80:	f7ff fe0e 	bl	801b7a0 <prvInsertTimerInActiveList>
					break;
 801bb84:	e79a      	b.n	801babc <prvProcessReceivedCommands+0xc>
 801bb86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bb8a:	f383 8811 	msr	BASEPRI, r3
 801bb8e:	f3bf 8f6f 	isb	sy
 801bb92:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801bb96:	e7fe      	b.n	801bb96 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801bb98:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801bb9c:	f013 0f02 	tst.w	r3, #2
 801bba0:	d004      	beq.n	801bbac <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bba2:	f023 0301 	bic.w	r3, r3, #1
 801bba6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 801bbaa:	e787      	b.n	801babc <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 801bbac:	4620      	mov	r0, r4
 801bbae:	f000 fab5 	bl	801c11c <vPortFree>
 801bbb2:	e783      	b.n	801babc <prvProcessReceivedCommands+0xc>
}
 801bbb4:	b008      	add	sp, #32
 801bbb6:	bd10      	pop	{r4, pc}
 801bbb8:	20003eac 	.word	0x20003eac

0801bbbc <prvTimerTask>:
{
 801bbbc:	b500      	push	{lr}
 801bbbe:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bbc0:	a801      	add	r0, sp, #4
 801bbc2:	f7ff fddd 	bl	801b780 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801bbc6:	9901      	ldr	r1, [sp, #4]
 801bbc8:	f7ff ff38 	bl	801ba3c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 801bbcc:	f7ff ff70 	bl	801bab0 <prvProcessReceivedCommands>
	for( ;; )
 801bbd0:	e7f6      	b.n	801bbc0 <prvTimerTask+0x4>
	...

0801bbd4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801bbd4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 801bbd6:	2300      	movs	r3, #0
 801bbd8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801bbda:	4b0d      	ldr	r3, [pc, #52]	@ (801bc10 <prvTaskExitError+0x3c>)
 801bbdc:	681b      	ldr	r3, [r3, #0]
 801bbde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801bbe2:	d008      	beq.n	801bbf6 <prvTaskExitError+0x22>
 801bbe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bbe8:	f383 8811 	msr	BASEPRI, r3
 801bbec:	f3bf 8f6f 	isb	sy
 801bbf0:	f3bf 8f4f 	dsb	sy
 801bbf4:	e7fe      	b.n	801bbf4 <prvTaskExitError+0x20>
 801bbf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bbfa:	f383 8811 	msr	BASEPRI, r3
 801bbfe:	f3bf 8f6f 	isb	sy
 801bc02:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801bc06:	9b01      	ldr	r3, [sp, #4]
 801bc08:	2b00      	cmp	r3, #0
 801bc0a:	d0fc      	beq.n	801bc06 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801bc0c:	b002      	add	sp, #8
 801bc0e:	4770      	bx	lr
 801bc10:	20000124 	.word	0x20000124

0801bc14 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801bc14:	4808      	ldr	r0, [pc, #32]	@ (801bc38 <prvPortStartFirstTask+0x24>)
 801bc16:	6800      	ldr	r0, [r0, #0]
 801bc18:	6800      	ldr	r0, [r0, #0]
 801bc1a:	f380 8808 	msr	MSP, r0
 801bc1e:	f04f 0000 	mov.w	r0, #0
 801bc22:	f380 8814 	msr	CONTROL, r0
 801bc26:	b662      	cpsie	i
 801bc28:	b661      	cpsie	f
 801bc2a:	f3bf 8f4f 	dsb	sy
 801bc2e:	f3bf 8f6f 	isb	sy
 801bc32:	df00      	svc	0
 801bc34:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801bc36:	0000      	.short	0x0000
 801bc38:	e000ed08 	.word	0xe000ed08

0801bc3c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801bc3c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801bc4c <vPortEnableVFP+0x10>
 801bc40:	6801      	ldr	r1, [r0, #0]
 801bc42:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801bc46:	6001      	str	r1, [r0, #0]
 801bc48:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801bc4a:	0000      	.short	0x0000
 801bc4c:	e000ed88 	.word	0xe000ed88

0801bc50 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801bc50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801bc54:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801bc58:	f021 0101 	bic.w	r1, r1, #1
 801bc5c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801bc60:	4b05      	ldr	r3, [pc, #20]	@ (801bc78 <pxPortInitialiseStack+0x28>)
 801bc62:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801bc66:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801bc6a:	f06f 0302 	mvn.w	r3, #2
 801bc6e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 801bc72:	3844      	subs	r0, #68	@ 0x44
 801bc74:	4770      	bx	lr
 801bc76:	bf00      	nop
 801bc78:	0801bbd5 	.word	0x0801bbd5
 801bc7c:	00000000 	.word	0x00000000

0801bc80 <SVC_Handler>:
	__asm volatile (
 801bc80:	4b07      	ldr	r3, [pc, #28]	@ (801bca0 <pxCurrentTCBConst2>)
 801bc82:	6819      	ldr	r1, [r3, #0]
 801bc84:	6808      	ldr	r0, [r1, #0]
 801bc86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc8a:	f380 8809 	msr	PSP, r0
 801bc8e:	f3bf 8f6f 	isb	sy
 801bc92:	f04f 0000 	mov.w	r0, #0
 801bc96:	f380 8811 	msr	BASEPRI, r0
 801bc9a:	4770      	bx	lr
 801bc9c:	f3af 8000 	nop.w

0801bca0 <pxCurrentTCBConst2>:
 801bca0:	20003db0 	.word	0x20003db0

0801bca4 <vPortEnterCritical>:
 801bca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bca8:	f383 8811 	msr	BASEPRI, r3
 801bcac:	f3bf 8f6f 	isb	sy
 801bcb0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 801bcb4:	4a0b      	ldr	r2, [pc, #44]	@ (801bce4 <vPortEnterCritical+0x40>)
 801bcb6:	6813      	ldr	r3, [r2, #0]
 801bcb8:	3301      	adds	r3, #1
 801bcba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801bcbc:	2b01      	cmp	r3, #1
 801bcbe:	d000      	beq.n	801bcc2 <vPortEnterCritical+0x1e>
}
 801bcc0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801bcc2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801bcc6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 801bcca:	f013 0fff 	tst.w	r3, #255	@ 0xff
 801bcce:	d0f7      	beq.n	801bcc0 <vPortEnterCritical+0x1c>
 801bcd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bcd4:	f383 8811 	msr	BASEPRI, r3
 801bcd8:	f3bf 8f6f 	isb	sy
 801bcdc:	f3bf 8f4f 	dsb	sy
 801bce0:	e7fe      	b.n	801bce0 <vPortEnterCritical+0x3c>
 801bce2:	bf00      	nop
 801bce4:	20000124 	.word	0x20000124

0801bce8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 801bce8:	4b09      	ldr	r3, [pc, #36]	@ (801bd10 <vPortExitCritical+0x28>)
 801bcea:	681b      	ldr	r3, [r3, #0]
 801bcec:	b943      	cbnz	r3, 801bd00 <vPortExitCritical+0x18>
 801bcee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bcf2:	f383 8811 	msr	BASEPRI, r3
 801bcf6:	f3bf 8f6f 	isb	sy
 801bcfa:	f3bf 8f4f 	dsb	sy
 801bcfe:	e7fe      	b.n	801bcfe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 801bd00:	3b01      	subs	r3, #1
 801bd02:	4a03      	ldr	r2, [pc, #12]	@ (801bd10 <vPortExitCritical+0x28>)
 801bd04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801bd06:	b90b      	cbnz	r3, 801bd0c <vPortExitCritical+0x24>
	__asm volatile
 801bd08:	f383 8811 	msr	BASEPRI, r3
}
 801bd0c:	4770      	bx	lr
 801bd0e:	bf00      	nop
 801bd10:	20000124 	.word	0x20000124
	...

0801bd20 <PendSV_Handler>:
	__asm volatile
 801bd20:	f3ef 8009 	mrs	r0, PSP
 801bd24:	f3bf 8f6f 	isb	sy
 801bd28:	4b15      	ldr	r3, [pc, #84]	@ (801bd80 <pxCurrentTCBConst>)
 801bd2a:	681a      	ldr	r2, [r3, #0]
 801bd2c:	f01e 0f10 	tst.w	lr, #16
 801bd30:	bf08      	it	eq
 801bd32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801bd36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd3a:	6010      	str	r0, [r2, #0]
 801bd3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801bd40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801bd44:	f380 8811 	msr	BASEPRI, r0
 801bd48:	f3bf 8f4f 	dsb	sy
 801bd4c:	f3bf 8f6f 	isb	sy
 801bd50:	f7ff faee 	bl	801b330 <vTaskSwitchContext>
 801bd54:	f04f 0000 	mov.w	r0, #0
 801bd58:	f380 8811 	msr	BASEPRI, r0
 801bd5c:	bc09      	pop	{r0, r3}
 801bd5e:	6819      	ldr	r1, [r3, #0]
 801bd60:	6808      	ldr	r0, [r1, #0]
 801bd62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd66:	f01e 0f10 	tst.w	lr, #16
 801bd6a:	bf08      	it	eq
 801bd6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801bd70:	f380 8809 	msr	PSP, r0
 801bd74:	f3bf 8f6f 	isb	sy
 801bd78:	4770      	bx	lr
 801bd7a:	bf00      	nop
 801bd7c:	f3af 8000 	nop.w

0801bd80 <pxCurrentTCBConst>:
 801bd80:	20003db0 	.word	0x20003db0

0801bd84 <xPortSysTickHandler>:
{
 801bd84:	b508      	push	{r3, lr}
	__asm volatile
 801bd86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bd8a:	f383 8811 	msr	BASEPRI, r3
 801bd8e:	f3bf 8f6f 	isb	sy
 801bd92:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 801bd96:	f7ff f99d 	bl	801b0d4 <xTaskIncrementTick>
 801bd9a:	b128      	cbz	r0, 801bda8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801bd9c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801bda0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801bda4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 801bda8:	2300      	movs	r3, #0
 801bdaa:	f383 8811 	msr	BASEPRI, r3
}
 801bdae:	bd08      	pop	{r3, pc}

0801bdb0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801bdb0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 801bdb4:	2300      	movs	r3, #0
 801bdb6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801bdb8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801bdba:	4b05      	ldr	r3, [pc, #20]	@ (801bdd0 <vPortSetupTimerInterrupt+0x20>)
 801bdbc:	681b      	ldr	r3, [r3, #0]
 801bdbe:	4905      	ldr	r1, [pc, #20]	@ (801bdd4 <vPortSetupTimerInterrupt+0x24>)
 801bdc0:	fba1 1303 	umull	r1, r3, r1, r3
 801bdc4:	099b      	lsrs	r3, r3, #6
 801bdc6:	3b01      	subs	r3, #1
 801bdc8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801bdca:	2307      	movs	r3, #7
 801bdcc:	6113      	str	r3, [r2, #16]
}
 801bdce:	4770      	bx	lr
 801bdd0:	20000018 	.word	0x20000018
 801bdd4:	10624dd3 	.word	0x10624dd3

0801bdd8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801bdd8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801bddc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801bde0:	4b3d      	ldr	r3, [pc, #244]	@ (801bed8 <xPortStartScheduler+0x100>)
 801bde2:	429a      	cmp	r2, r3
 801bde4:	d01c      	beq.n	801be20 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801bde6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801bdea:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801bdee:	4b3b      	ldr	r3, [pc, #236]	@ (801bedc <xPortStartScheduler+0x104>)
 801bdf0:	429a      	cmp	r2, r3
 801bdf2:	d01e      	beq.n	801be32 <xPortStartScheduler+0x5a>
{
 801bdf4:	b530      	push	{r4, r5, lr}
 801bdf6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801bdf8:	4b39      	ldr	r3, [pc, #228]	@ (801bee0 <xPortStartScheduler+0x108>)
 801bdfa:	781a      	ldrb	r2, [r3, #0]
 801bdfc:	b2d2      	uxtb	r2, r2
 801bdfe:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801be00:	22ff      	movs	r2, #255	@ 0xff
 801be02:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801be04:	781b      	ldrb	r3, [r3, #0]
 801be06:	b2db      	uxtb	r3, r3
 801be08:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801be0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801be10:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801be14:	4a33      	ldr	r2, [pc, #204]	@ (801bee4 <xPortStartScheduler+0x10c>)
 801be16:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801be18:	4b33      	ldr	r3, [pc, #204]	@ (801bee8 <xPortStartScheduler+0x110>)
 801be1a:	2207      	movs	r2, #7
 801be1c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801be1e:	e01b      	b.n	801be58 <xPortStartScheduler+0x80>
	__asm volatile
 801be20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801be24:	f383 8811 	msr	BASEPRI, r3
 801be28:	f3bf 8f6f 	isb	sy
 801be2c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801be30:	e7fe      	b.n	801be30 <xPortStartScheduler+0x58>
 801be32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801be36:	f383 8811 	msr	BASEPRI, r3
 801be3a:	f3bf 8f6f 	isb	sy
 801be3e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801be42:	e7fe      	b.n	801be42 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 801be44:	4a28      	ldr	r2, [pc, #160]	@ (801bee8 <xPortStartScheduler+0x110>)
 801be46:	6813      	ldr	r3, [r2, #0]
 801be48:	3b01      	subs	r3, #1
 801be4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801be4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801be50:	005b      	lsls	r3, r3, #1
 801be52:	b2db      	uxtb	r3, r3
 801be54:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801be58:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801be5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801be60:	d1f0      	bne.n	801be44 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801be62:	4b21      	ldr	r3, [pc, #132]	@ (801bee8 <xPortStartScheduler+0x110>)
 801be64:	681b      	ldr	r3, [r3, #0]
 801be66:	2b03      	cmp	r3, #3
 801be68:	d008      	beq.n	801be7c <xPortStartScheduler+0xa4>
 801be6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801be6e:	f383 8811 	msr	BASEPRI, r3
 801be72:	f3bf 8f6f 	isb	sy
 801be76:	f3bf 8f4f 	dsb	sy
 801be7a:	e7fe      	b.n	801be7a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801be7c:	021b      	lsls	r3, r3, #8
 801be7e:	4a1a      	ldr	r2, [pc, #104]	@ (801bee8 <xPortStartScheduler+0x110>)
 801be80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801be82:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801be86:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801be88:	9b01      	ldr	r3, [sp, #4]
 801be8a:	b2db      	uxtb	r3, r3
 801be8c:	4a14      	ldr	r2, [pc, #80]	@ (801bee0 <xPortStartScheduler+0x108>)
 801be8e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801be90:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 801be94:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801be98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801be9c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801bea0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801bea4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801bea8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 801beac:	f7ff ff80 	bl	801bdb0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 801beb0:	2500      	movs	r5, #0
 801beb2:	4b0e      	ldr	r3, [pc, #56]	@ (801beec <xPortStartScheduler+0x114>)
 801beb4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 801beb6:	f7ff fec1 	bl	801bc3c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801beba:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 801bebe:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801bec2:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 801bec6:	f7ff fea5 	bl	801bc14 <prvPortStartFirstTask>
	vTaskSwitchContext();
 801beca:	f7ff fa31 	bl	801b330 <vTaskSwitchContext>
	prvTaskExitError();
 801bece:	f7ff fe81 	bl	801bbd4 <prvTaskExitError>
}
 801bed2:	4628      	mov	r0, r5
 801bed4:	b003      	add	sp, #12
 801bed6:	bd30      	pop	{r4, r5, pc}
 801bed8:	410fc271 	.word	0x410fc271
 801bedc:	410fc270 	.word	0x410fc270
 801bee0:	e000e400 	.word	0xe000e400
 801bee4:	20003ee4 	.word	0x20003ee4
 801bee8:	20003ee0 	.word	0x20003ee0
 801beec:	20000124 	.word	0x20000124

0801bef0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801bef0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801bef4:	2b0f      	cmp	r3, #15
 801bef6:	d90f      	bls.n	801bf18 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801bef8:	4a11      	ldr	r2, [pc, #68]	@ (801bf40 <vPortValidateInterruptPriority+0x50>)
 801befa:	5c9b      	ldrb	r3, [r3, r2]
 801befc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801befe:	4a11      	ldr	r2, [pc, #68]	@ (801bf44 <vPortValidateInterruptPriority+0x54>)
 801bf00:	7812      	ldrb	r2, [r2, #0]
 801bf02:	429a      	cmp	r2, r3
 801bf04:	d908      	bls.n	801bf18 <vPortValidateInterruptPriority+0x28>
 801bf06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bf0a:	f383 8811 	msr	BASEPRI, r3
 801bf0e:	f3bf 8f6f 	isb	sy
 801bf12:	f3bf 8f4f 	dsb	sy
 801bf16:	e7fe      	b.n	801bf16 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801bf18:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801bf1c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 801bf20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801bf24:	4a08      	ldr	r2, [pc, #32]	@ (801bf48 <vPortValidateInterruptPriority+0x58>)
 801bf26:	6812      	ldr	r2, [r2, #0]
 801bf28:	4293      	cmp	r3, r2
 801bf2a:	d908      	bls.n	801bf3e <vPortValidateInterruptPriority+0x4e>
 801bf2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bf30:	f383 8811 	msr	BASEPRI, r3
 801bf34:	f3bf 8f6f 	isb	sy
 801bf38:	f3bf 8f4f 	dsb	sy
 801bf3c:	e7fe      	b.n	801bf3c <vPortValidateInterruptPriority+0x4c>
	}
 801bf3e:	4770      	bx	lr
 801bf40:	e000e3f0 	.word	0xe000e3f0
 801bf44:	20003ee4 	.word	0x20003ee4
 801bf48:	20003ee0 	.word	0x20003ee0

0801bf4c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801bf4c:	4a12      	ldr	r2, [pc, #72]	@ (801bf98 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801bf4e:	f012 0f07 	tst.w	r2, #7
 801bf52:	d01f      	beq.n	801bf94 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801bf54:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801bf56:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801bf5a:	f5c1 33b0 	rsb	r3, r1, #90112	@ 0x16000
 801bf5e:	33f8      	adds	r3, #248	@ 0xf8
 801bf60:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801bf62:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801bf64:	480d      	ldr	r0, [pc, #52]	@ (801bf9c <prvHeapInit+0x50>)
 801bf66:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801bf68:	2100      	movs	r1, #0
 801bf6a:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801bf6c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 801bf6e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801bf70:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 801bf74:	480a      	ldr	r0, [pc, #40]	@ (801bfa0 <prvHeapInit+0x54>)
 801bf76:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 801bf78:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801bf7a:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801bf7c:	1a99      	subs	r1, r3, r2
 801bf7e:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801bf80:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801bf82:	4b08      	ldr	r3, [pc, #32]	@ (801bfa4 <prvHeapInit+0x58>)
 801bf84:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801bf86:	4b08      	ldr	r3, [pc, #32]	@ (801bfa8 <prvHeapInit+0x5c>)
 801bf88:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801bf8a:	4b08      	ldr	r3, [pc, #32]	@ (801bfac <prvHeapInit+0x60>)
 801bf8c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801bf90:	601a      	str	r2, [r3, #0]
}
 801bf92:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801bf94:	4b06      	ldr	r3, [pc, #24]	@ (801bfb0 <prvHeapInit+0x64>)
 801bf96:	e7e5      	b.n	801bf64 <prvHeapInit+0x18>
 801bf98:	20003f08 	.word	0x20003f08
 801bf9c:	20003f00 	.word	0x20003f00
 801bfa0:	20003efc 	.word	0x20003efc
 801bfa4:	20003ef4 	.word	0x20003ef4
 801bfa8:	20003ef8 	.word	0x20003ef8
 801bfac:	20003ee8 	.word	0x20003ee8
 801bfb0:	000160f8 	.word	0x000160f8

0801bfb4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801bfb4:	4b16      	ldr	r3, [pc, #88]	@ (801c010 <prvInsertBlockIntoFreeList+0x5c>)
 801bfb6:	461a      	mov	r2, r3
 801bfb8:	681b      	ldr	r3, [r3, #0]
 801bfba:	4283      	cmp	r3, r0
 801bfbc:	d3fb      	bcc.n	801bfb6 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801bfbe:	6851      	ldr	r1, [r2, #4]
 801bfc0:	eb02 0c01 	add.w	ip, r2, r1
 801bfc4:	4584      	cmp	ip, r0
 801bfc6:	d009      	beq.n	801bfdc <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801bfc8:	6841      	ldr	r1, [r0, #4]
 801bfca:	eb00 0c01 	add.w	ip, r0, r1
 801bfce:	4563      	cmp	r3, ip
 801bfd0:	d009      	beq.n	801bfe6 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801bfd2:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801bfd4:	4290      	cmp	r0, r2
 801bfd6:	d019      	beq.n	801c00c <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801bfd8:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 801bfda:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801bfdc:	6840      	ldr	r0, [r0, #4]
 801bfde:	4401      	add	r1, r0
 801bfe0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 801bfe2:	4610      	mov	r0, r2
 801bfe4:	e7f0      	b.n	801bfc8 <prvInsertBlockIntoFreeList+0x14>
{
 801bfe6:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801bfe8:	4c0a      	ldr	r4, [pc, #40]	@ (801c014 <prvInsertBlockIntoFreeList+0x60>)
 801bfea:	6824      	ldr	r4, [r4, #0]
 801bfec:	42a3      	cmp	r3, r4
 801bfee:	d00b      	beq.n	801c008 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801bff0:	685b      	ldr	r3, [r3, #4]
 801bff2:	4419      	add	r1, r3
 801bff4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801bff6:	6813      	ldr	r3, [r2, #0]
 801bff8:	681b      	ldr	r3, [r3, #0]
 801bffa:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 801bffc:	4290      	cmp	r0, r2
 801bffe:	d000      	beq.n	801c002 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801c000:	6010      	str	r0, [r2, #0]
	}
}
 801c002:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c006:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801c008:	6004      	str	r4, [r0, #0]
 801c00a:	e7f7      	b.n	801bffc <prvInsertBlockIntoFreeList+0x48>
 801c00c:	4770      	bx	lr
 801c00e:	bf00      	nop
 801c010:	20003f00 	.word	0x20003f00
 801c014:	20003efc 	.word	0x20003efc

0801c018 <pvPortMalloc>:
{
 801c018:	b538      	push	{r3, r4, r5, lr}
 801c01a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801c01c:	f7ff f84c 	bl	801b0b8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 801c020:	4b38      	ldr	r3, [pc, #224]	@ (801c104 <pvPortMalloc+0xec>)
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	b1b3      	cbz	r3, 801c054 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801c026:	4b38      	ldr	r3, [pc, #224]	@ (801c108 <pvPortMalloc+0xf0>)
 801c028:	681b      	ldr	r3, [r3, #0]
 801c02a:	421c      	tst	r4, r3
 801c02c:	d150      	bne.n	801c0d0 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 801c02e:	2c00      	cmp	r4, #0
 801c030:	d050      	beq.n	801c0d4 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 801c032:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801c036:	f014 0f07 	tst.w	r4, #7
 801c03a:	d002      	beq.n	801c042 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801c03c:	f022 0207 	bic.w	r2, r2, #7
 801c040:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801c042:	2a00      	cmp	r2, #0
 801c044:	d055      	beq.n	801c0f2 <pvPortMalloc+0xda>
 801c046:	4b31      	ldr	r3, [pc, #196]	@ (801c10c <pvPortMalloc+0xf4>)
 801c048:	681b      	ldr	r3, [r3, #0]
 801c04a:	4293      	cmp	r3, r2
 801c04c:	d353      	bcc.n	801c0f6 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 801c04e:	4930      	ldr	r1, [pc, #192]	@ (801c110 <pvPortMalloc+0xf8>)
 801c050:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c052:	e004      	b.n	801c05e <pvPortMalloc+0x46>
			prvHeapInit();
 801c054:	f7ff ff7a 	bl	801bf4c <prvHeapInit>
 801c058:	e7e5      	b.n	801c026 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 801c05a:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 801c05c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c05e:	6863      	ldr	r3, [r4, #4]
 801c060:	4293      	cmp	r3, r2
 801c062:	d202      	bcs.n	801c06a <pvPortMalloc+0x52>
 801c064:	6823      	ldr	r3, [r4, #0]
 801c066:	2b00      	cmp	r3, #0
 801c068:	d1f7      	bne.n	801c05a <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 801c06a:	4b26      	ldr	r3, [pc, #152]	@ (801c104 <pvPortMalloc+0xec>)
 801c06c:	681b      	ldr	r3, [r3, #0]
 801c06e:	42a3      	cmp	r3, r4
 801c070:	d043      	beq.n	801c0fa <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801c072:	680d      	ldr	r5, [r1, #0]
 801c074:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801c076:	6823      	ldr	r3, [r4, #0]
 801c078:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801c07a:	6863      	ldr	r3, [r4, #4]
 801c07c:	1a9b      	subs	r3, r3, r2
 801c07e:	2b10      	cmp	r3, #16
 801c080:	d910      	bls.n	801c0a4 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801c082:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c084:	f010 0f07 	tst.w	r0, #7
 801c088:	d008      	beq.n	801c09c <pvPortMalloc+0x84>
 801c08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c08e:	f383 8811 	msr	BASEPRI, r3
 801c092:	f3bf 8f6f 	isb	sy
 801c096:	f3bf 8f4f 	dsb	sy
 801c09a:	e7fe      	b.n	801c09a <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801c09c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801c09e:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801c0a0:	f7ff ff88 	bl	801bfb4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801c0a4:	6862      	ldr	r2, [r4, #4]
 801c0a6:	4919      	ldr	r1, [pc, #100]	@ (801c10c <pvPortMalloc+0xf4>)
 801c0a8:	680b      	ldr	r3, [r1, #0]
 801c0aa:	1a9b      	subs	r3, r3, r2
 801c0ac:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801c0ae:	4919      	ldr	r1, [pc, #100]	@ (801c114 <pvPortMalloc+0xfc>)
 801c0b0:	6809      	ldr	r1, [r1, #0]
 801c0b2:	428b      	cmp	r3, r1
 801c0b4:	d201      	bcs.n	801c0ba <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801c0b6:	4917      	ldr	r1, [pc, #92]	@ (801c114 <pvPortMalloc+0xfc>)
 801c0b8:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801c0ba:	4b13      	ldr	r3, [pc, #76]	@ (801c108 <pvPortMalloc+0xf0>)
 801c0bc:	681b      	ldr	r3, [r3, #0]
 801c0be:	4313      	orrs	r3, r2
 801c0c0:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801c0c2:	2300      	movs	r3, #0
 801c0c4:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 801c0c6:	4a14      	ldr	r2, [pc, #80]	@ (801c118 <pvPortMalloc+0x100>)
 801c0c8:	6813      	ldr	r3, [r2, #0]
 801c0ca:	3301      	adds	r3, #1
 801c0cc:	6013      	str	r3, [r2, #0]
 801c0ce:	e002      	b.n	801c0d6 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 801c0d0:	2500      	movs	r5, #0
 801c0d2:	e000      	b.n	801c0d6 <pvPortMalloc+0xbe>
 801c0d4:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 801c0d6:	f7ff f889 	bl	801b1ec <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801c0da:	f015 0f07 	tst.w	r5, #7
 801c0de:	d00e      	beq.n	801c0fe <pvPortMalloc+0xe6>
 801c0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c0e4:	f383 8811 	msr	BASEPRI, r3
 801c0e8:	f3bf 8f6f 	isb	sy
 801c0ec:	f3bf 8f4f 	dsb	sy
 801c0f0:	e7fe      	b.n	801c0f0 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 801c0f2:	2500      	movs	r5, #0
 801c0f4:	e7ef      	b.n	801c0d6 <pvPortMalloc+0xbe>
 801c0f6:	2500      	movs	r5, #0
 801c0f8:	e7ed      	b.n	801c0d6 <pvPortMalloc+0xbe>
 801c0fa:	2500      	movs	r5, #0
 801c0fc:	e7eb      	b.n	801c0d6 <pvPortMalloc+0xbe>
}
 801c0fe:	4628      	mov	r0, r5
 801c100:	bd38      	pop	{r3, r4, r5, pc}
 801c102:	bf00      	nop
 801c104:	20003efc 	.word	0x20003efc
 801c108:	20003ee8 	.word	0x20003ee8
 801c10c:	20003ef8 	.word	0x20003ef8
 801c110:	20003f00 	.word	0x20003f00
 801c114:	20003ef4 	.word	0x20003ef4
 801c118:	20003ef0 	.word	0x20003ef0

0801c11c <vPortFree>:
	if( pv != NULL )
 801c11c:	2800      	cmp	r0, #0
 801c11e:	d034      	beq.n	801c18a <vPortFree+0x6e>
{
 801c120:	b538      	push	{r3, r4, r5, lr}
 801c122:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 801c124:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801c128:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c12c:	4a17      	ldr	r2, [pc, #92]	@ (801c18c <vPortFree+0x70>)
 801c12e:	6812      	ldr	r2, [r2, #0]
 801c130:	4213      	tst	r3, r2
 801c132:	d108      	bne.n	801c146 <vPortFree+0x2a>
 801c134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c138:	f383 8811 	msr	BASEPRI, r3
 801c13c:	f3bf 8f6f 	isb	sy
 801c140:	f3bf 8f4f 	dsb	sy
 801c144:	e7fe      	b.n	801c144 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801c146:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801c14a:	b141      	cbz	r1, 801c15e <vPortFree+0x42>
 801c14c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c150:	f383 8811 	msr	BASEPRI, r3
 801c154:	f3bf 8f6f 	isb	sy
 801c158:	f3bf 8f4f 	dsb	sy
 801c15c:	e7fe      	b.n	801c15c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801c15e:	ea23 0302 	bic.w	r3, r3, r2
 801c162:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 801c166:	f7fe ffa7 	bl	801b0b8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801c16a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801c16e:	4a08      	ldr	r2, [pc, #32]	@ (801c190 <vPortFree+0x74>)
 801c170:	6813      	ldr	r3, [r2, #0]
 801c172:	440b      	add	r3, r1
 801c174:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801c176:	4628      	mov	r0, r5
 801c178:	f7ff ff1c 	bl	801bfb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801c17c:	4a05      	ldr	r2, [pc, #20]	@ (801c194 <vPortFree+0x78>)
 801c17e:	6813      	ldr	r3, [r2, #0]
 801c180:	3301      	adds	r3, #1
 801c182:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 801c184:	f7ff f832 	bl	801b1ec <xTaskResumeAll>
}
 801c188:	bd38      	pop	{r3, r4, r5, pc}
 801c18a:	4770      	bx	lr
 801c18c:	20003ee8 	.word	0x20003ee8
 801c190:	20003ef8 	.word	0x20003ef8
 801c194:	20003eec 	.word	0x20003eec

0801c198 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 801c198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c19a:	4607      	mov	r7, r0
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */

	vTaskSuspendAll();
 801c19c:	f7fe ff8c 	bl	801b0b8 <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 801c1a0:	4b17      	ldr	r3, [pc, #92]	@ (801c200 <vPortGetHeapStats+0x68>)
 801c1a2:	681b      	ldr	r3, [r3, #0]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 801c1a4:	b193      	cbz	r3, 801c1cc <vPortGetHeapStats+0x34>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801c1a6:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801c1aa:	2500      	movs	r5, #0
 801c1ac:	462c      	mov	r4, r5
 801c1ae:	e004      	b.n	801c1ba <vPortGetHeapStats+0x22>
					xMinSize = pxBlock->xBlockSize;
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 801c1b0:	681b      	ldr	r3, [r3, #0]
			} while( pxBlock != pxEnd );
 801c1b2:	4a14      	ldr	r2, [pc, #80]	@ (801c204 <vPortGetHeapStats+0x6c>)
 801c1b4:	6812      	ldr	r2, [r2, #0]
 801c1b6:	429a      	cmp	r2, r3
 801c1b8:	d00c      	beq.n	801c1d4 <vPortGetHeapStats+0x3c>
				xBlocks++;
 801c1ba:	3401      	adds	r4, #1
				if( pxBlock->xBlockSize > xMaxSize )
 801c1bc:	685a      	ldr	r2, [r3, #4]
 801c1be:	42aa      	cmp	r2, r5
 801c1c0:	d900      	bls.n	801c1c4 <vPortGetHeapStats+0x2c>
					xMaxSize = pxBlock->xBlockSize;
 801c1c2:	4615      	mov	r5, r2
				if( pxBlock->xBlockSize < xMinSize )
 801c1c4:	42b2      	cmp	r2, r6
 801c1c6:	d2f3      	bcs.n	801c1b0 <vPortGetHeapStats+0x18>
					xMinSize = pxBlock->xBlockSize;
 801c1c8:	4616      	mov	r6, r2
 801c1ca:	e7f1      	b.n	801c1b0 <vPortGetHeapStats+0x18>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801c1cc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801c1d0:	2500      	movs	r5, #0
 801c1d2:	462c      	mov	r4, r5
		}
	}
	xTaskResumeAll();
 801c1d4:	f7ff f80a 	bl	801b1ec <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 801c1d8:	607d      	str	r5, [r7, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 801c1da:	60be      	str	r6, [r7, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 801c1dc:	60fc      	str	r4, [r7, #12]

	taskENTER_CRITICAL();
 801c1de:	f7ff fd61 	bl	801bca4 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 801c1e2:	4b09      	ldr	r3, [pc, #36]	@ (801c208 <vPortGetHeapStats+0x70>)
 801c1e4:	681b      	ldr	r3, [r3, #0]
 801c1e6:	603b      	str	r3, [r7, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 801c1e8:	4b08      	ldr	r3, [pc, #32]	@ (801c20c <vPortGetHeapStats+0x74>)
 801c1ea:	681b      	ldr	r3, [r3, #0]
 801c1ec:	617b      	str	r3, [r7, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 801c1ee:	4b08      	ldr	r3, [pc, #32]	@ (801c210 <vPortGetHeapStats+0x78>)
 801c1f0:	681b      	ldr	r3, [r3, #0]
 801c1f2:	61bb      	str	r3, [r7, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 801c1f4:	4b07      	ldr	r3, [pc, #28]	@ (801c214 <vPortGetHeapStats+0x7c>)
 801c1f6:	681b      	ldr	r3, [r3, #0]
 801c1f8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801c1fa:	f7ff fd75 	bl	801bce8 <vPortExitCritical>
}
 801c1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c200:	20003f00 	.word	0x20003f00
 801c204:	20003efc 	.word	0x20003efc
 801c208:	20003ef8 	.word	0x20003ef8
 801c20c:	20003ef0 	.word	0x20003ef0
 801c210:	20003eec 	.word	0x20003eec
 801c214:	20003ef4 	.word	0x20003ef4

0801c218 <block_device_sync>:
	return 0;
}

int block_device_sync(const struct lfs_config *c){
	return 0;
}
 801c218:	2000      	movs	r0, #0
 801c21a:	4770      	bx	lr

0801c21c <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 801c21c:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801c21e:	fb01 f400 	mul.w	r4, r1, r0
 801c222:	4620      	mov	r0, r4
 801c224:	f7ff fef8 	bl	801c018 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801c228:	4605      	mov	r5, r0
 801c22a:	b118      	cbz	r0, 801c234 <mg_calloc+0x18>
 801c22c:	4622      	mov	r2, r4
 801c22e:	2100      	movs	r1, #0
 801c230:	f010 fae6 	bl	802c800 <memset>
}
 801c234:	4628      	mov	r0, r5
 801c236:	bd38      	pop	{r3, r4, r5, pc}

0801c238 <block_device_read>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 801c238:	b508      	push	{r3, lr}
 801c23a:	4684      	mov	ip, r0
 801c23c:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801c23e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801c242:	428b      	cmp	r3, r1
 801c244:	d90a      	bls.n	801c25c <block_device_read+0x24>
 801c246:	4696      	mov	lr, r2
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801c248:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801c24c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801c250:	fb01 e103 	mla	r1, r1, r3, lr
 801c254:	f7fa fc04 	bl	8016a60 <sFLASH_ReadBuffer>
}
 801c258:	2000      	movs	r0, #0
 801c25a:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801c25c:	4b03      	ldr	r3, [pc, #12]	@ (801c26c <block_device_read+0x34>)
 801c25e:	4a04      	ldr	r2, [pc, #16]	@ (801c270 <block_device_read+0x38>)
 801c260:	f240 1123 	movw	r1, #291	@ 0x123
 801c264:	4803      	ldr	r0, [pc, #12]	@ (801c274 <block_device_read+0x3c>)
 801c266:	f00f f9d1 	bl	802b60c <__assert_func>
 801c26a:	bf00      	nop
 801c26c:	0803a144 	.word	0x0803a144
 801c270:	0803d488 	.word	0x0803d488
 801c274:	0803a15c 	.word	0x0803a15c

0801c278 <block_device_erase>:
int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 801c278:	b508      	push	{r3, lr}
	assert(block < c->block_count);
 801c27a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801c27c:	428b      	cmp	r3, r1
 801c27e:	d906      	bls.n	801c28e <block_device_erase+0x16>
	sFLASH_EraseSector(block * (c -> block_size));
 801c280:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801c282:	fb01 f000 	mul.w	r0, r1, r0
 801c286:	f7fa fd37 	bl	8016cf8 <sFLASH_EraseSector>
}
 801c28a:	2000      	movs	r0, #0
 801c28c:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801c28e:	4b03      	ldr	r3, [pc, #12]	@ (801c29c <block_device_erase+0x24>)
 801c290:	4a03      	ldr	r2, [pc, #12]	@ (801c2a0 <block_device_erase+0x28>)
 801c292:	f240 112b 	movw	r1, #299	@ 0x12b
 801c296:	4803      	ldr	r0, [pc, #12]	@ (801c2a4 <block_device_erase+0x2c>)
 801c298:	f00f f9b8 	bl	802b60c <__assert_func>
 801c29c:	0803a144 	.word	0x0803a144
 801c2a0:	0803d474 	.word	0x0803d474
 801c2a4:	0803a15c 	.word	0x0803a15c

0801c2a8 <block_device_prog>:
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 801c2a8:	b508      	push	{r3, lr}
 801c2aa:	4684      	mov	ip, r0
 801c2ac:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801c2ae:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801c2b2:	428b      	cmp	r3, r1
 801c2b4:	d90a      	bls.n	801c2cc <block_device_prog+0x24>
 801c2b6:	4696      	mov	lr, r2
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801c2b8:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801c2bc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801c2c0:	fb01 e103 	mla	r1, r1, r3, lr
 801c2c4:	f7fa fd5e 	bl	8016d84 <sFLASH_WriteBuffer>
}
 801c2c8:	2000      	movs	r0, #0
 801c2ca:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801c2cc:	4b03      	ldr	r3, [pc, #12]	@ (801c2dc <block_device_prog+0x34>)
 801c2ce:	4a04      	ldr	r2, [pc, #16]	@ (801c2e0 <block_device_prog+0x38>)
 801c2d0:	f240 1133 	movw	r1, #307	@ 0x133
 801c2d4:	4803      	ldr	r0, [pc, #12]	@ (801c2e4 <block_device_prog+0x3c>)
 801c2d6:	f00f f999 	bl	802b60c <__assert_func>
 801c2da:	bf00      	nop
 801c2dc:	0803a144 	.word	0x0803a144
 801c2e0:	0803d460 	.word	0x0803d460
 801c2e4:	0803a15c 	.word	0x0803a15c

0801c2e8 <mg_fs_lfs_status>:
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 801c2e8:	b530      	push	{r4, r5, lr}
 801c2ea:	b0c3      	sub	sp, #268	@ 0x10c
 801c2ec:	460d      	mov	r5, r1
 801c2ee:	4614      	mov	r4, r2
    if (lfs_stat(&lfs, path, &info) == 0) {
 801c2f0:	466a      	mov	r2, sp
 801c2f2:	4601      	mov	r1, r0
 801c2f4:	480b      	ldr	r0, [pc, #44]	@ (801c324 <mg_fs_lfs_status+0x3c>)
 801c2f6:	f004 fd6b 	bl	8020dd0 <lfs_stat>
 801c2fa:	b110      	cbz	r0, 801c302 <mg_fs_lfs_status+0x1a>
    return 0;
 801c2fc:	2000      	movs	r0, #0
}
 801c2fe:	b043      	add	sp, #268	@ 0x10c
 801c300:	bd30      	pop	{r4, r5, pc}
        if (size) *size = info.size;
 801c302:	b10d      	cbz	r5, 801c308 <mg_fs_lfs_status+0x20>
 801c304:	9b01      	ldr	r3, [sp, #4]
 801c306:	602b      	str	r3, [r5, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 801c308:	b11c      	cbz	r4, 801c312 <mg_fs_lfs_status+0x2a>
 801c30a:	2200      	movs	r2, #0
 801c30c:	2300      	movs	r3, #0
 801c30e:	e9c4 2300 	strd	r2, r3, [r4]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 801c312:	f89d 3000 	ldrb.w	r3, [sp]
 801c316:	2b02      	cmp	r3, #2
 801c318:	d001      	beq.n	801c31e <mg_fs_lfs_status+0x36>
 801c31a:	2001      	movs	r0, #1
 801c31c:	e7ef      	b.n	801c2fe <mg_fs_lfs_status+0x16>
 801c31e:	2004      	movs	r0, #4
 801c320:	e7ed      	b.n	801c2fe <mg_fs_lfs_status+0x16>
 801c322:	bf00      	nop
 801c324:	2001a0a0 	.word	0x2001a0a0

0801c328 <mg_fs_lfs_list>:
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 801c328:	b530      	push	{r4, r5, lr}
 801c32a:	b0d1      	sub	sp, #324	@ 0x144
 801c32c:	460d      	mov	r5, r1
 801c32e:	4614      	mov	r4, r2
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 801c330:	4602      	mov	r2, r0
 801c332:	a901      	add	r1, sp, #4
 801c334:	480a      	ldr	r0, [pc, #40]	@ (801c360 <mg_fs_lfs_list+0x38>)
 801c336:	f004 fe71 	bl	802101c <lfs_dir_open>
 801c33a:	b120      	cbz	r0, 801c346 <mg_fs_lfs_list+0x1e>
}
 801c33c:	b051      	add	sp, #324	@ 0x144
 801c33e:	bd30      	pop	{r4, r5, pc}
            fn(info.name, userdata);
 801c340:	4621      	mov	r1, r4
 801c342:	a810      	add	r0, sp, #64	@ 0x40
 801c344:	47a8      	blx	r5
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 801c346:	aa0e      	add	r2, sp, #56	@ 0x38
 801c348:	a901      	add	r1, sp, #4
 801c34a:	4805      	ldr	r0, [pc, #20]	@ (801c360 <mg_fs_lfs_list+0x38>)
 801c34c:	f004 fea1 	bl	8021092 <lfs_dir_read>
 801c350:	2800      	cmp	r0, #0
 801c352:	dcf5      	bgt.n	801c340 <mg_fs_lfs_list+0x18>
        lfs_dir_close(&lfs, &dir);
 801c354:	a901      	add	r1, sp, #4
 801c356:	4802      	ldr	r0, [pc, #8]	@ (801c360 <mg_fs_lfs_list+0x38>)
 801c358:	f004 fe88 	bl	802106c <lfs_dir_close>
}
 801c35c:	e7ee      	b.n	801c33c <mg_fs_lfs_list+0x14>
 801c35e:	bf00      	nop
 801c360:	2001a0a0 	.word	0x2001a0a0

0801c364 <mg_fs_lfs_open>:
void *mg_fs_lfs_open(const char *path, int flags) {
 801c364:	b570      	push	{r4, r5, r6, lr}
 801c366:	4605      	mov	r5, r0
 801c368:	460c      	mov	r4, r1
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 801c36a:	2054      	movs	r0, #84	@ 0x54
 801c36c:	f7ff fe54 	bl	801c018 <pvPortMalloc>
    if (fd == NULL) return NULL;
 801c370:	4606      	mov	r6, r0
 801c372:	b188      	cbz	r0, 801c398 <mg_fs_lfs_open+0x34>
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 801c374:	f014 0301 	ands.w	r3, r4, #1
 801c378:	d000      	beq.n	801c37c <mg_fs_lfs_open+0x18>
 801c37a:	2301      	movs	r3, #1
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 801c37c:	f014 0f02 	tst.w	r4, #2
 801c380:	d003      	beq.n	801c38a <mg_fs_lfs_open+0x26>
 801c382:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 801c386:	f043 0302 	orr.w	r3, r3, #2
    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 801c38a:	462a      	mov	r2, r5
 801c38c:	4631      	mov	r1, r6
 801c38e:	4806      	ldr	r0, [pc, #24]	@ (801c3a8 <mg_fs_lfs_open+0x44>)
 801c390:	f004 fd34 	bl	8020dfc <lfs_file_open>
 801c394:	2800      	cmp	r0, #0
 801c396:	db01      	blt.n	801c39c <mg_fs_lfs_open+0x38>
}
 801c398:	4630      	mov	r0, r6
 801c39a:	bd70      	pop	{r4, r5, r6, pc}
        free(fd);
 801c39c:	4630      	mov	r0, r6
 801c39e:	f7ff febd 	bl	801c11c <vPortFree>
        return NULL;
 801c3a2:	2600      	movs	r6, #0
 801c3a4:	e7f8      	b.n	801c398 <mg_fs_lfs_open+0x34>
 801c3a6:	bf00      	nop
 801c3a8:	2001a0a0 	.word	0x2001a0a0

0801c3ac <mg_fs_lfs_close>:
void mg_fs_lfs_close(void *fd) {
 801c3ac:	b510      	push	{r4, lr}
 801c3ae:	4604      	mov	r4, r0
    lfs_file_close(&lfs, &file->file);
 801c3b0:	4601      	mov	r1, r0
 801c3b2:	4803      	ldr	r0, [pc, #12]	@ (801c3c0 <mg_fs_lfs_close+0x14>)
 801c3b4:	f004 fd4e 	bl	8020e54 <lfs_file_close>
    free(file);
 801c3b8:	4620      	mov	r0, r4
 801c3ba:	f7ff feaf 	bl	801c11c <vPortFree>
}
 801c3be:	bd10      	pop	{r4, pc}
 801c3c0:	2001a0a0 	.word	0x2001a0a0

0801c3c4 <mg_fs_lfs_read>:
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 801c3c4:	b508      	push	{r3, lr}
 801c3c6:	4613      	mov	r3, r2
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 801c3c8:	460a      	mov	r2, r1
 801c3ca:	4601      	mov	r1, r0
 801c3cc:	4802      	ldr	r0, [pc, #8]	@ (801c3d8 <mg_fs_lfs_read+0x14>)
 801c3ce:	f004 fd67 	bl	8020ea0 <lfs_file_read>
}
 801c3d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801c3d6:	bd08      	pop	{r3, pc}
 801c3d8:	2001a0a0 	.word	0x2001a0a0

0801c3dc <mg_fs_lfs_write>:
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 801c3dc:	b508      	push	{r3, lr}
 801c3de:	4613      	mov	r3, r2
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 801c3e0:	460a      	mov	r2, r1
 801c3e2:	4601      	mov	r1, r0
 801c3e4:	4802      	ldr	r0, [pc, #8]	@ (801c3f0 <mg_fs_lfs_write+0x14>)
 801c3e6:	f004 fd87 	bl	8020ef8 <lfs_file_write>
}
 801c3ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801c3ee:	bd08      	pop	{r3, pc}
 801c3f0:	2001a0a0 	.word	0x2001a0a0

0801c3f4 <mg_fs_lfs_seek>:
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 801c3f4:	b510      	push	{r4, lr}
 801c3f6:	4604      	mov	r4, r0
 801c3f8:	460a      	mov	r2, r1
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 801c3fa:	2300      	movs	r3, #0
 801c3fc:	4601      	mov	r1, r0
 801c3fe:	4809      	ldr	r0, [pc, #36]	@ (801c424 <mg_fs_lfs_seek+0x30>)
 801c400:	f004 fda6 	bl	8020f50 <lfs_file_seek>
 801c404:	2800      	cmp	r0, #0
 801c406:	db06      	blt.n	801c416 <mg_fs_lfs_seek+0x22>
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 801c408:	4621      	mov	r1, r4
 801c40a:	4806      	ldr	r0, [pc, #24]	@ (801c424 <mg_fs_lfs_seek+0x30>)
 801c40c:	f004 fdcc 	bl	8020fa8 <lfs_file_tell>
     if (pos < 0) {
 801c410:	2800      	cmp	r0, #0
 801c412:	db03      	blt.n	801c41c <mg_fs_lfs_seek+0x28>
}
 801c414:	bd10      	pop	{r4, pc}
        return (size_t)-1;  // Ошибка при перемещении
 801c416:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c41a:	e7fb      	b.n	801c414 <mg_fs_lfs_seek+0x20>
         return (size_t)-1;  // Ошибка при получении позиции
 801c41c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c420:	e7f8      	b.n	801c414 <mg_fs_lfs_seek+0x20>
 801c422:	bf00      	nop
 801c424:	2001a0a0 	.word	0x2001a0a0

0801c428 <mg_fs_lfs_rename>:
bool mg_fs_lfs_rename(const char *from, const char *to) {
 801c428:	b508      	push	{r3, lr}
 801c42a:	460a      	mov	r2, r1
    return lfs_rename(&lfs, from, to) == 0;
 801c42c:	4601      	mov	r1, r0
 801c42e:	4803      	ldr	r0, [pc, #12]	@ (801c43c <mg_fs_lfs_rename+0x14>)
 801c430:	f004 fcb9 	bl	8020da6 <lfs_rename>
}
 801c434:	fab0 f080 	clz	r0, r0
 801c438:	0940      	lsrs	r0, r0, #5
 801c43a:	bd08      	pop	{r3, pc}
 801c43c:	2001a0a0 	.word	0x2001a0a0

0801c440 <mg_fs_lfs_remove>:
bool mg_fs_lfs_remove(const char *path) {
 801c440:	b508      	push	{r3, lr}
 801c442:	4601      	mov	r1, r0
    return lfs_remove(&lfs, path) == 0;
 801c444:	4803      	ldr	r0, [pc, #12]	@ (801c454 <mg_fs_lfs_remove+0x14>)
 801c446:	f004 fc9b 	bl	8020d80 <lfs_remove>
}
 801c44a:	fab0 f080 	clz	r0, r0
 801c44e:	0940      	lsrs	r0, r0, #5
 801c450:	bd08      	pop	{r3, pc}
 801c452:	bf00      	nop
 801c454:	2001a0a0 	.word	0x2001a0a0

0801c458 <mg_fs_lfs_mkdir>:
bool mg_fs_lfs_mkdir(const char *path) {
 801c458:	b508      	push	{r3, lr}
 801c45a:	4601      	mov	r1, r0
    return lfs_mkdir(&lfs, path) == 0;
 801c45c:	4803      	ldr	r0, [pc, #12]	@ (801c46c <mg_fs_lfs_mkdir+0x14>)
 801c45e:	f004 fdc9 	bl	8020ff4 <lfs_mkdir>
}
 801c462:	fab0 f080 	clz	r0, r0
 801c466:	0940      	lsrs	r0, r0, #5
 801c468:	bd08      	pop	{r3, pc}
 801c46a:	bf00      	nop
 801c46c:	2001a0a0 	.word	0x2001a0a0

0801c470 <mg_fs_mounted>:
}
 801c470:	4b01      	ldr	r3, [pc, #4]	@ (801c478 <mg_fs_mounted+0x8>)
 801c472:	7818      	ldrb	r0, [r3, #0]
 801c474:	4770      	bx	lr
 801c476:	bf00      	nop
 801c478:	2001a040 	.word	0x2001a040

0801c47c <get_flash_chip_model>:
}
 801c47c:	4800      	ldr	r0, [pc, #0]	@ (801c480 <get_flash_chip_model+0x4>)
 801c47e:	4770      	bx	lr
 801c480:	2001a00e 	.word	0x2001a00e

0801c484 <lfs_fs_ll_init>:
int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 801c484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c488:	b090      	sub	sp, #64	@ 0x40
 801c48a:	4607      	mov	r7, r0
 801c48c:	460e      	mov	r6, r1
	flash_info = sFLASH_GetInfo();
 801c48e:	4c37      	ldr	r4, [pc, #220]	@ (801c56c <lfs_fs_ll_init+0xe8>)
 801c490:	4668      	mov	r0, sp
 801c492:	f7fa fb45 	bl	8016b20 <sFLASH_GetInfo>
 801c496:	46a6      	mov	lr, r4
 801c498:	46ec      	mov	ip, sp
 801c49a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c49e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801c4a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c4a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801c4aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c4ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801c4b2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801c4b6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	if (flash_info.flash_id == 0x0) return -1;
 801c4ba:	6823      	ldr	r3, [r4, #0]
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	d052      	beq.n	801c566 <lfs_fs_ll_init+0xe2>
	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 801c4c0:	46a0      	mov	r8, r4
 801c4c2:	8961      	ldrh	r1, [r4, #10]
 801c4c4:	2001      	movs	r0, #1
 801c4c6:	f7ff fea9 	bl	801c21c <mg_calloc>
 801c4ca:	4604      	mov	r4, r0
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 801c4cc:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 801c4d0:	2001      	movs	r0, #1
 801c4d2:	f7ff fea3 	bl	801c21c <mg_calloc>
 801c4d6:	4605      	mov	r5, r0
	void * lookahead_buff = calloc(1, flash_info.page_size);
 801c4d8:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 801c4dc:	2001      	movs	r0, #1
 801c4de:	f7ff fe9d 	bl	801c21c <mg_calloc>
	if (!(read_buff || write_buff || lookahead_buff)){
 801c4e2:	2c00      	cmp	r4, #0
 801c4e4:	d028      	beq.n	801c538 <lfs_fs_ll_init+0xb4>
	cfg.read_size         = flash_info.read_size;
 801c4e6:	4b21      	ldr	r3, [pc, #132]	@ (801c56c <lfs_fs_ll_init+0xe8>)
 801c4e8:	889a      	ldrh	r2, [r3, #4]
 801c4ea:	4921      	ldr	r1, [pc, #132]	@ (801c570 <lfs_fs_ll_init+0xec>)
 801c4ec:	61ca      	str	r2, [r1, #28]
	cfg.prog_size         = flash_info.write_size;
 801c4ee:	88da      	ldrh	r2, [r3, #6]
 801c4f0:	620a      	str	r2, [r1, #32]
    cfg.block_size        = flash_info.erase_size;
 801c4f2:	891a      	ldrh	r2, [r3, #8]
 801c4f4:	624a      	str	r2, [r1, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 801c4f6:	899a      	ldrh	r2, [r3, #12]
 801c4f8:	628a      	str	r2, [r1, #40]	@ 0x28
    cfg.lookahead_size    = flash_info.page_size;
 801c4fa:	895b      	ldrh	r3, [r3, #10]
 801c4fc:	634b      	str	r3, [r1, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 801c4fe:	630b      	str	r3, [r1, #48]	@ 0x30
    cfg.read_buffer       = read_buff;
 801c500:	63cc      	str	r4, [r1, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 801c502:	640d      	str	r5, [r1, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 801c504:	6448      	str	r0, [r1, #68]	@ 0x44
    cfg.read   = block_device_read;
 801c506:	4b1b      	ldr	r3, [pc, #108]	@ (801c574 <lfs_fs_ll_init+0xf0>)
 801c508:	604b      	str	r3, [r1, #4]
    cfg.prog   = block_device_prog;
 801c50a:	4b1b      	ldr	r3, [pc, #108]	@ (801c578 <lfs_fs_ll_init+0xf4>)
 801c50c:	608b      	str	r3, [r1, #8]
    cfg.erase  = block_device_erase;
 801c50e:	4b1b      	ldr	r3, [pc, #108]	@ (801c57c <lfs_fs_ll_init+0xf8>)
 801c510:	60cb      	str	r3, [r1, #12]
    cfg.sync   = block_device_sync;
 801c512:	4b1b      	ldr	r3, [pc, #108]	@ (801c580 <lfs_fs_ll_init+0xfc>)
 801c514:	610b      	str	r3, [r1, #16]
    cfg.lock 	= lock;
 801c516:	614f      	str	r7, [r1, #20]
	cfg.unlock	= unlock;
 801c518:	618e      	str	r6, [r1, #24]
    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 801c51a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801c51e:	62cb      	str	r3, [r1, #44]	@ 0x2c
    if (lfs_mount(&lfs, &cfg)< 0){
 801c520:	4818      	ldr	r0, [pc, #96]	@ (801c584 <lfs_fs_ll_init+0x100>)
 801c522:	f004 fc1a 	bl	8020d5a <lfs_mount>
 801c526:	2800      	cmp	r0, #0
 801c528:	db0d      	blt.n	801c546 <lfs_fs_ll_init+0xc2>
    	fs_mounted = 1;
 801c52a:	4b17      	ldr	r3, [pc, #92]	@ (801c588 <lfs_fs_ll_init+0x104>)
 801c52c:	2201      	movs	r2, #1
 801c52e:	701a      	strb	r2, [r3, #0]
    	return 0;
 801c530:	2000      	movs	r0, #0
}
 801c532:	b010      	add	sp, #64	@ 0x40
 801c534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(read_buff || write_buff || lookahead_buff)){
 801c538:	2d00      	cmp	r5, #0
 801c53a:	d1d4      	bne.n	801c4e6 <lfs_fs_ll_init+0x62>
 801c53c:	2800      	cmp	r0, #0
 801c53e:	d1d2      	bne.n	801c4e6 <lfs_fs_ll_init+0x62>
		return -2;
 801c540:	f06f 0001 	mvn.w	r0, #1
 801c544:	e7f5      	b.n	801c532 <lfs_fs_ll_init+0xae>
    	lfs_format(&lfs, &cfg);
 801c546:	4d0a      	ldr	r5, [pc, #40]	@ (801c570 <lfs_fs_ll_init+0xec>)
 801c548:	4c0e      	ldr	r4, [pc, #56]	@ (801c584 <lfs_fs_ll_init+0x100>)
 801c54a:	4629      	mov	r1, r5
 801c54c:	4620      	mov	r0, r4
 801c54e:	f004 fbf1 	bl	8020d34 <lfs_format>
    	if((err = lfs_mount(&lfs, &cfg)) == 0) fs_mounted = 1;
 801c552:	4629      	mov	r1, r5
 801c554:	4620      	mov	r0, r4
 801c556:	f004 fc00 	bl	8020d5a <lfs_mount>
 801c55a:	2800      	cmp	r0, #0
 801c55c:	d1e9      	bne.n	801c532 <lfs_fs_ll_init+0xae>
 801c55e:	4b0a      	ldr	r3, [pc, #40]	@ (801c588 <lfs_fs_ll_init+0x104>)
 801c560:	2201      	movs	r2, #1
 801c562:	701a      	strb	r2, [r3, #0]
    	return err;
 801c564:	e7e5      	b.n	801c532 <lfs_fs_ll_init+0xae>
	if (flash_info.flash_id == 0x0) return -1;
 801c566:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c56a:	e7e2      	b.n	801c532 <lfs_fs_ll_init+0xae>
 801c56c:	2001a000 	.word	0x2001a000
 801c570:	2001a044 	.word	0x2001a044
 801c574:	0801c239 	.word	0x0801c239
 801c578:	0801c2a9 	.word	0x0801c2a9
 801c57c:	0801c279 	.word	0x0801c279
 801c580:	0801c219 	.word	0x0801c219
 801c584:	2001a0a0 	.word	0x2001a0a0
 801c588:	2001a040 	.word	0x2001a040

0801c58c <lfs_pair_issync>:
}

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801c58c:	6803      	ldr	r3, [r0, #0]
 801c58e:	680a      	ldr	r2, [r1, #0]
 801c590:	4293      	cmp	r3, r2
 801c592:	d004      	beq.n	801c59e <lfs_pair_issync+0x12>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801c594:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801c596:	428b      	cmp	r3, r1
 801c598:	d015      	beq.n	801c5c6 <lfs_pair_issync+0x3a>
 801c59a:	2000      	movs	r0, #0
 801c59c:	4770      	bx	lr
        const lfs_block_t pairb[2]) {
 801c59e:	b430      	push	{r4, r5}
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801c5a0:	6844      	ldr	r4, [r0, #4]
 801c5a2:	684d      	ldr	r5, [r1, #4]
 801c5a4:	42ac      	cmp	r4, r5
 801c5a6:	d00a      	beq.n	801c5be <lfs_pair_issync+0x32>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801c5a8:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801c5aa:	428b      	cmp	r3, r1
 801c5ac:	d002      	beq.n	801c5b4 <lfs_pair_issync+0x28>
 801c5ae:	2000      	movs	r0, #0
}
 801c5b0:	bc30      	pop	{r4, r5}
 801c5b2:	4770      	bx	lr
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801c5b4:	6843      	ldr	r3, [r0, #4]
 801c5b6:	429a      	cmp	r2, r3
 801c5b8:	d003      	beq.n	801c5c2 <lfs_pair_issync+0x36>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801c5ba:	2000      	movs	r0, #0
 801c5bc:	e7f8      	b.n	801c5b0 <lfs_pair_issync+0x24>
 801c5be:	2001      	movs	r0, #1
 801c5c0:	e7f6      	b.n	801c5b0 <lfs_pair_issync+0x24>
 801c5c2:	2001      	movs	r0, #1
 801c5c4:	e7f4      	b.n	801c5b0 <lfs_pair_issync+0x24>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801c5c6:	6843      	ldr	r3, [r0, #4]
 801c5c8:	429a      	cmp	r2, r3
 801c5ca:	d001      	beq.n	801c5d0 <lfs_pair_issync+0x44>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801c5cc:	2000      	movs	r0, #0
 801c5ce:	4770      	bx	lr
 801c5d0:	2001      	movs	r0, #1
}
 801c5d2:	4770      	bx	lr

0801c5d4 <lfs_gstate_xor>:
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
 801c5d4:	2300      	movs	r3, #0
 801c5d6:	2b02      	cmp	r3, #2
 801c5d8:	dc0d      	bgt.n	801c5f6 <lfs_gstate_xor+0x22>
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 801c5da:	b410      	push	{r4}
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 801c5dc:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801c5e0:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 801c5e4:	4062      	eors	r2, r4
 801c5e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 801c5ea:	3301      	adds	r3, #1
 801c5ec:	2b02      	cmp	r3, #2
 801c5ee:	ddf5      	ble.n	801c5dc <lfs_gstate_xor+0x8>
    }
}
 801c5f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c5f4:	4770      	bx	lr
 801c5f6:	4770      	bx	lr

0801c5f8 <lfs_gstate_hasmovehere>:
    return lfs_tag_size(a->tag) >> 9;
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801c5f8:	6803      	ldr	r3, [r0, #0]
    return (tag & 0x70000000) >> 20;
 801c5fa:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801c5fc:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801c600:	d00f      	beq.n	801c622 <lfs_gstate_hasmovehere+0x2a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c602:	6843      	ldr	r3, [r0, #4]
 801c604:	680a      	ldr	r2, [r1, #0]
 801c606:	4293      	cmp	r3, r2
 801c608:	d00d      	beq.n	801c626 <lfs_gstate_hasmovehere+0x2e>
 801c60a:	6880      	ldr	r0, [r0, #8]
 801c60c:	6849      	ldr	r1, [r1, #4]
 801c60e:	4288      	cmp	r0, r1
 801c610:	d00b      	beq.n	801c62a <lfs_gstate_hasmovehere+0x32>
 801c612:	428b      	cmp	r3, r1
 801c614:	d00b      	beq.n	801c62e <lfs_gstate_hasmovehere+0x36>
 801c616:	4282      	cmp	r2, r0
 801c618:	d001      	beq.n	801c61e <lfs_gstate_hasmovehere+0x26>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801c61a:	2000      	movs	r0, #0
}
 801c61c:	4770      	bx	lr
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801c61e:	2001      	movs	r0, #1
 801c620:	4770      	bx	lr
 801c622:	2000      	movs	r0, #0
 801c624:	4770      	bx	lr
 801c626:	2001      	movs	r0, #1
 801c628:	4770      	bx	lr
 801c62a:	2001      	movs	r0, #1
 801c62c:	4770      	bx	lr
 801c62e:	2001      	movs	r0, #1
 801c630:	4770      	bx	lr

0801c632 <lfs_mlist_isopen>:
}
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 801c632:	b082      	sub	sp, #8
 801c634:	9001      	str	r0, [sp, #4]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 801c636:	ab01      	add	r3, sp, #4
 801c638:	681b      	ldr	r3, [r3, #0]
 801c63a:	b11b      	cbz	r3, 801c644 <lfs_mlist_isopen+0x12>
        if (*p == (struct lfs_mlist*)node) {
 801c63c:	428b      	cmp	r3, r1
 801c63e:	d1fb      	bne.n	801c638 <lfs_mlist_isopen+0x6>
            return true;
 801c640:	2001      	movs	r0, #1
 801c642:	e000      	b.n	801c646 <lfs_mlist_isopen+0x14>
        }
    }

    return false;
 801c644:	2000      	movs	r0, #0
}
 801c646:	b002      	add	sp, #8
 801c648:	4770      	bx	lr

0801c64a <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 801c64a:	3028      	adds	r0, #40	@ 0x28
 801c64c:	e000      	b.n	801c650 <lfs_mlist_remove+0x6>
 801c64e:	4618      	mov	r0, r3
 801c650:	6803      	ldr	r3, [r0, #0]
 801c652:	b123      	cbz	r3, 801c65e <lfs_mlist_remove+0x14>
        if (*p == mlist) {
 801c654:	428b      	cmp	r3, r1
 801c656:	d1fa      	bne.n	801c64e <lfs_mlist_remove+0x4>
            *p = (*p)->next;
 801c658:	681b      	ldr	r3, [r3, #0]
 801c65a:	6003      	str	r3, [r0, #0]
            break;
 801c65c:	4770      	bx	lr
        }
    }
}
 801c65e:	4770      	bx	lr

0801c660 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
    mlist->next = lfs->mlist;
 801c660:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801c662:	600b      	str	r3, [r1, #0]
    lfs->mlist = mlist;
 801c664:	6281      	str	r1, [r0, #40]	@ 0x28
}
 801c666:	4770      	bx	lr

0801c668 <lfs_fs_disk_version>:
    } else
#endif
    {
        return LFS_DISK_VERSION;
    }
}
 801c668:	4800      	ldr	r0, [pc, #0]	@ (801c66c <lfs_fs_disk_version+0x4>)
 801c66a:	4770      	bx	lr
 801c66c:	00020001 	.word	0x00020001

0801c670 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 801c670:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 801c672:	f7ff fff9 	bl	801c668 <lfs_fs_disk_version>

}
 801c676:	0c00      	lsrs	r0, r0, #16
 801c678:	bd08      	pop	{r3, pc}

0801c67a <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 801c67a:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 801c67c:	f7ff fff4 	bl	801c668 <lfs_fs_disk_version>
}
 801c680:	b280      	uxth	r0, r0
 801c682:	bd08      	pop	{r3, pc}

0801c684 <lfs_alloc_ckpoint>:
// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
    lfs->lookahead.ckpoint = lfs->block_count;
 801c684:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801c686:	6603      	str	r3, [r0, #96]	@ 0x60
}
 801c688:	4770      	bx	lr

0801c68a <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 801c68a:	b508      	push	{r3, lr}
    lfs->lookahead.size = 0;
 801c68c:	2200      	movs	r2, #0
 801c68e:	6582      	str	r2, [r0, #88]	@ 0x58
    lfs->lookahead.next = 0;
 801c690:	65c2      	str	r2, [r0, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 801c692:	f7ff fff7 	bl	801c684 <lfs_alloc_ckpoint>
}
 801c696:	bd08      	pop	{r3, pc}

0801c698 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->lookahead.start)
 801c698:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801c69a:	1ac9      	subs	r1, r1, r3
            + lfs->block_count) % lfs->block_count;
 801c69c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801c69e:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->lookahead.start)
 801c6a0:	fbb1 f2f3 	udiv	r2, r1, r3
 801c6a4:	fb03 1112 	mls	r1, r3, r2, r1

    if (off < lfs->lookahead.size) {
 801c6a8:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801c6aa:	428b      	cmp	r3, r1
 801c6ac:	d90d      	bls.n	801c6ca <lfs_alloc_lookahead+0x32>
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 801c6ae:	b410      	push	{r4}
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 801c6b0:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 801c6b2:	08c8      	lsrs	r0, r1, #3
 801c6b4:	5c23      	ldrb	r3, [r4, r0]
 801c6b6:	f001 0107 	and.w	r1, r1, #7
 801c6ba:	2201      	movs	r2, #1
 801c6bc:	408a      	lsls	r2, r1
 801c6be:	4313      	orrs	r3, r2
 801c6c0:	5423      	strb	r3, [r4, r0]
    }

    return 0;
}
 801c6c2:	2000      	movs	r0, #0
 801c6c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c6c8:	4770      	bx	lr
 801c6ca:	2000      	movs	r0, #0
 801c6cc:	4770      	bx	lr
	...

0801c6d0 <lfs_dir_traverse_filter>:
    return 0;
}

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 801c6d0:	b410      	push	{r4}
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801c6d2:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 801c6d6:	d01c      	beq.n	801c712 <lfs_dir_traverse_filter+0x42>
 801c6d8:	4a19      	ldr	r2, [pc, #100]	@ (801c740 <lfs_dir_traverse_filter+0x70>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 801c6da:	6803      	ldr	r3, [r0, #0]
 801c6dc:	ea83 0401 	eor.w	r4, r3, r1
 801c6e0:	4214      	tst	r4, r2
 801c6e2:	d018      	beq.n	801c716 <lfs_dir_traverse_filter+0x46>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c6e4:	f343 0209 	sbfx	r2, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
 801c6e8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c6ec:	d013      	beq.n	801c716 <lfs_dir_traverse_filter+0x46>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 801c6ee:	4c14      	ldr	r4, [pc, #80]	@ (801c740 <lfs_dir_traverse_filter+0x70>)
 801c6f0:	400c      	ands	r4, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 801c6f2:	4a14      	ldr	r2, [pc, #80]	@ (801c744 <lfs_dir_traverse_filter+0x74>)
 801c6f4:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801c6f6:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801c6fa:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 801c6fe:	4294      	cmp	r4, r2
 801c700:	d009      	beq.n	801c716 <lfs_dir_traverse_filter+0x46>
    return (tag & 0x70000000) >> 20;
 801c702:	0d0a      	lsrs	r2, r1, #20
 801c704:	f402 64e0 	and.w	r4, r2, #1792	@ 0x700
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801c708:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 801c70c:	d009      	beq.n	801c722 <lfs_dir_traverse_filter+0x52>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
 801c70e:	2000      	movs	r0, #0
 801c710:	e004      	b.n	801c71c <lfs_dir_traverse_filter+0x4c>
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801c712:	4a0d      	ldr	r2, [pc, #52]	@ (801c748 <lfs_dir_traverse_filter+0x78>)
 801c714:	e7e1      	b.n	801c6da <lfs_dir_traverse_filter+0xa>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 801c716:	2300      	movs	r3, #0
 801c718:	6003      	str	r3, [r0, #0]
        return true;
 801c71a:	2001      	movs	r0, #1
}
 801c71c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c720:	4770      	bx	lr
    return (tag & 0x000ffc00) >> 10;
 801c722:	f3c1 2189 	ubfx	r1, r1, #10, #10
 801c726:	f3c3 2489 	ubfx	r4, r3, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801c72a:	428c      	cmp	r4, r1
 801c72c:	d305      	bcc.n	801c73a <lfs_dir_traverse_filter+0x6a>
    return (int8_t)lfs_tag_chunk(tag);
 801c72e:	b252      	sxtb	r2, r2
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801c730:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 801c734:	6003      	str	r3, [r0, #0]
    return false;
 801c736:	2000      	movs	r0, #0
 801c738:	e7f0      	b.n	801c71c <lfs_dir_traverse_filter+0x4c>
 801c73a:	2000      	movs	r0, #0
 801c73c:	e7ee      	b.n	801c71c <lfs_dir_traverse_filter+0x4c>
 801c73e:	bf00      	nop
 801c740:	7ffffc00 	.word	0x7ffffc00
 801c744:	000ffc00 	.word	0x000ffc00
 801c748:	700ffc00 	.word	0x700ffc00

0801c74c <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c74c:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c750:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c754:	bf08      	it	eq
 801c756:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
 801c758:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c75c:	3104      	adds	r1, #4
#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 801c75e:	6803      	ldr	r3, [r0, #0]
 801c760:	440b      	add	r3, r1
 801c762:	6003      	str	r3, [r0, #0]
    return 0;
}
 801c764:	2000      	movs	r0, #0
 801c766:	4770      	bx	lr

0801c768 <lfs_dir_needsrelocation>:
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 801c768:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801c76a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	dd0b      	ble.n	801c788 <lfs_dir_needsrelocation+0x20>
 801c770:	688a      	ldr	r2, [r1, #8]
 801c772:	3201      	adds	r2, #1
 801c774:	3301      	adds	r3, #1
 801c776:	f043 0301 	orr.w	r3, r3, #1
 801c77a:	fbb2 f1f3 	udiv	r1, r2, r3
 801c77e:	fb03 2211 	mls	r2, r3, r1, r2
 801c782:	b11a      	cbz	r2, 801c78c <lfs_dir_needsrelocation+0x24>
 801c784:	2000      	movs	r0, #0
 801c786:	4770      	bx	lr
 801c788:	2000      	movs	r0, #0
 801c78a:	4770      	bx	lr
 801c78c:	2001      	movs	r0, #1
}
 801c78e:	4770      	bx	lr

0801c790 <lfs_dir_close_>:
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);

    return 0;
}

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 801c790:	b508      	push	{r3, lr}
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 801c792:	f7ff ff5a 	bl	801c64a <lfs_mlist_remove>

    return 0;
}
 801c796:	2000      	movs	r0, #0
 801c798:	bd08      	pop	{r3, pc}

0801c79a <lfs_file_tell_>:
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}
 801c79a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801c79c:	4770      	bx	lr

0801c79e <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 801c79e:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801c7a0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801c7a4:	d101      	bne.n	801c7aa <lfs_file_size_+0xc>
        return lfs_max(file->pos, file->ctz.size);
    }
#endif

    return file->ctz.size;
 801c7a6:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
}
 801c7a8:	4770      	bx	lr
        return lfs_max(file->pos, file->ctz.size);
 801c7aa:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801c7ac:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801c7ae:	4298      	cmp	r0, r3
 801c7b0:	bf38      	it	cc
 801c7b2:	4618      	movcc	r0, r3
 801c7b4:	4770      	bx	lr

0801c7b6 <lfs_fs_prepsuperblock>:
    return LFS_ERR_NOENT;
}
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801c7b6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c7b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 801c7bc:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801c7c0:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801c7c2:	4770      	bx	lr

0801c7c4 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801c7c4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c7c6:	f36f 239e 	bfc	r3, #10, #21
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801c7ca:	f240 3cff 	movw	ip, #1023	@ 0x3ff
 801c7ce:	4561      	cmp	r1, ip
 801c7d0:	d011      	beq.n	801c7f6 <lfs_fs_prepmove+0x32>
 801c7d2:	ea4f 2c81 	mov.w	ip, r1, lsl #10
 801c7d6:	f04c 4c9f 	orr.w	ip, ip, #1333788672	@ 0x4f800000
 801c7da:	f44c 0ce0 	orr.w	ip, ip, #7340032	@ 0x700000
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801c7de:	ea43 030c 	orr.w	r3, r3, ip
 801c7e2:	6303      	str	r3, [r0, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801c7e4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801c7e8:	4299      	cmp	r1, r3
 801c7ea:	d007      	beq.n	801c7fc <lfs_fs_prepmove+0x38>
 801c7ec:	6813      	ldr	r3, [r2, #0]
 801c7ee:	6343      	str	r3, [r0, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801c7f0:	6853      	ldr	r3, [r2, #4]
 801c7f2:	6383      	str	r3, [r0, #56]	@ 0x38
}
 801c7f4:	4770      	bx	lr
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801c7f6:	f04f 0c00 	mov.w	ip, #0
 801c7fa:	e7f0      	b.n	801c7de <lfs_fs_prepmove+0x1a>
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801c7fc:	2300      	movs	r3, #0
 801c7fe:	6343      	str	r3, [r0, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801c800:	e7f7      	b.n	801c7f2 <lfs_fs_prepmove+0x2e>

0801c802 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 801c802:	6803      	ldr	r3, [r0, #0]
 801c804:	3301      	adds	r3, #1
 801c806:	6003      	str	r3, [r0, #0]
    return 0;
}
 801c808:	2000      	movs	r0, #0
 801c80a:	4770      	bx	lr

0801c80c <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 801c80c:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->block_count);
 801c80e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801c810:	428b      	cmp	r3, r1
 801c812:	d905      	bls.n	801c820 <lfs_bd_erase+0x14>
    int err = lfs->cfg->erase(lfs->cfg, block);
 801c814:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801c816:	68c3      	ldr	r3, [r0, #12]
 801c818:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801c81a:	2800      	cmp	r0, #0
 801c81c:	dc07      	bgt.n	801c82e <lfs_bd_erase+0x22>
}
 801c81e:	bd08      	pop	{r3, pc}
    LFS_ASSERT(block < lfs->block_count);
 801c820:	4b06      	ldr	r3, [pc, #24]	@ (801c83c <lfs_bd_erase+0x30>)
 801c822:	4a07      	ldr	r2, [pc, #28]	@ (801c840 <lfs_bd_erase+0x34>)
 801c824:	f44f 718a 	mov.w	r1, #276	@ 0x114
 801c828:	4806      	ldr	r0, [pc, #24]	@ (801c844 <lfs_bd_erase+0x38>)
 801c82a:	f00e feef 	bl	802b60c <__assert_func>
    LFS_ASSERT(err <= 0);
 801c82e:	4b06      	ldr	r3, [pc, #24]	@ (801c848 <lfs_bd_erase+0x3c>)
 801c830:	4a03      	ldr	r2, [pc, #12]	@ (801c840 <lfs_bd_erase+0x34>)
 801c832:	f44f 718b 	mov.w	r1, #278	@ 0x116
 801c836:	4803      	ldr	r0, [pc, #12]	@ (801c844 <lfs_bd_erase+0x38>)
 801c838:	f00e fee8 	bl	802b60c <__assert_func>
 801c83c:	0803a284 	.word	0x0803a284
 801c840:	0803d5c4 	.word	0x0803d5c4
 801c844:	0803a198 	.word	0x0803a198
 801c848:	0803a1c8 	.word	0x0803a1c8

0801c84c <lfs_fs_preporphans>:
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 801c84c:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801c84e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801c850:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801c854:	b90a      	cbnz	r2, 801c85a <lfs_fs_preporphans+0xe>
 801c856:	2900      	cmp	r1, #0
 801c858:	db12      	blt.n	801c880 <lfs_fs_preporphans+0x34>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801c85a:	f5b2 7fff 	cmp.w	r2, #510	@ 0x1fe
 801c85e:	d901      	bls.n	801c864 <lfs_fs_preporphans+0x18>
 801c860:	2900      	cmp	r1, #0
 801c862:	dc14      	bgt.n	801c88e <lfs_fs_preporphans+0x42>
    lfs->gstate.tag += orphans;
 801c864:	4419      	add	r1, r3
 801c866:	6301      	str	r1, [r0, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801c868:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
    return tag & 0x000003ff;
 801c86c:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return lfs_tag_size(a->tag);
 801c870:	3900      	subs	r1, #0
 801c872:	bf18      	it	ne
 801c874:	2101      	movne	r1, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801c876:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 801c87a:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801c87c:	2000      	movs	r0, #0
 801c87e:	bd08      	pop	{r3, pc}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801c880:	4b06      	ldr	r3, [pc, #24]	@ (801c89c <lfs_fs_preporphans+0x50>)
 801c882:	4a07      	ldr	r2, [pc, #28]	@ (801c8a0 <lfs_fs_preporphans+0x54>)
 801c884:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 801c888:	4806      	ldr	r0, [pc, #24]	@ (801c8a4 <lfs_fs_preporphans+0x58>)
 801c88a:	f00e febf 	bl	802b60c <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801c88e:	4b06      	ldr	r3, [pc, #24]	@ (801c8a8 <lfs_fs_preporphans+0x5c>)
 801c890:	4a03      	ldr	r2, [pc, #12]	@ (801c8a0 <lfs_fs_preporphans+0x54>)
 801c892:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 801c896:	4803      	ldr	r0, [pc, #12]	@ (801c8a4 <lfs_fs_preporphans+0x58>)
 801c898:	f00e feb8 	bl	802b60c <__assert_func>
 801c89c:	0803a1d4 	.word	0x0803a1d4
 801c8a0:	0803d594 	.word	0x0803d594
 801c8a4:	0803a198 	.word	0x0803a198
 801c8a8:	0803a20c 	.word	0x0803a20c

0801c8ac <lfs_cache_zero>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 801c8ac:	b510      	push	{r4, lr}
 801c8ae:	460c      	mov	r4, r1
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 801c8b0:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801c8b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801c8b4:	21ff      	movs	r1, #255	@ 0xff
 801c8b6:	68e0      	ldr	r0, [r4, #12]
 801c8b8:	f00f ffa2 	bl	802c800 <memset>
    pcache->block = LFS_BLOCK_NULL;
 801c8bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c8c0:	6023      	str	r3, [r4, #0]
}
 801c8c2:	bd10      	pop	{r4, pc}

0801c8c4 <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 801c8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
 801c8c6:	680d      	ldr	r5, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 801c8c8:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801c8ca:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
 801c8cc:	3f08      	subs	r7, #8
    lfs_off_t i = size / b;
 801c8ce:	fbb5 f0f7 	udiv	r0, r5, r7
    if (i == 0) {
 801c8d2:	42bd      	cmp	r5, r7
 801c8d4:	d312      	bcc.n	801c8fc <lfs_ctz_index+0x38>
 801c8d6:	460e      	mov	r6, r1
}

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 801c8d8:	3801      	subs	r0, #1
 801c8da:	f7f4 fa55 	bl	8010d88 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 801c8de:	1c84      	adds	r4, r0, #2
 801c8e0:	eba5 0484 	sub.w	r4, r5, r4, lsl #2
 801c8e4:	fbb4 f4f7 	udiv	r4, r4, r7
    *off = size - b*i - 4*lfs_popc(i);
 801c8e8:	fb04 5517 	mls	r5, r4, r7, r5
 801c8ec:	4620      	mov	r0, r4
 801c8ee:	f7f4 fa4b 	bl	8010d88 <__popcountsi2>
 801c8f2:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
 801c8f6:	6035      	str	r5, [r6, #0]
    return i;
 801c8f8:	4620      	mov	r0, r4
}
 801c8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 801c8fc:	2000      	movs	r0, #0
 801c8fe:	e7fc      	b.n	801c8fa <lfs_ctz_index+0x36>

0801c900 <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
 801c900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c904:	b087      	sub	sp, #28
 801c906:	4615      	mov	r5, r2
 801c908:	469b      	mov	fp, r3
 801c90a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801c90c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c90e:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
    if (off+size > lfs->cfg->block_size
 801c912:	eb04 020a 	add.w	r2, r4, sl
 801c916:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801c918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c91a:	429a      	cmp	r2, r3
 801c91c:	f200 80d0 	bhi.w	801cac0 <lfs_bd_read+0x1c0>
 801c920:	4689      	mov	r9, r1
            || (lfs->block_count && block >= lfs->block_count)) {
 801c922:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801c924:	2b00      	cmp	r3, #0
 801c926:	f000 80c7 	beq.w	801cab8 <lfs_bd_read+0x1b8>
 801c92a:	42bb      	cmp	r3, r7
 801c92c:	f240 80cb 	bls.w	801cac6 <lfs_bd_read+0x1c6>
 801c930:	9003      	str	r0, [sp, #12]
 801c932:	e084      	b.n	801ca3e <lfs_bd_read+0x13e>
                off < pcache->off + pcache->size) {
 801c934:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801c938:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801c93c:	1899      	adds	r1, r3, r2
        if (pcache && block == pcache->block &&
 801c93e:	42a1      	cmp	r1, r4
 801c940:	d91e      	bls.n	801c980 <lfs_bd_read+0x80>
            if (off >= pcache->off) {
 801c942:	42a3      	cmp	r3, r4
 801c944:	d905      	bls.n	801c952 <lfs_bd_read+0x52>
            diff = lfs_min(diff, pcache->off-off);
 801c946:	1b1b      	subs	r3, r3, r4
    return (a < b) ? a : b;
 801c948:	4553      	cmp	r3, sl
 801c94a:	bf28      	it	cs
 801c94c:	4653      	movcs	r3, sl
 801c94e:	4698      	mov	r8, r3
 801c950:	e081      	b.n	801ca56 <lfs_bd_read+0x156>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801c952:	1b19      	subs	r1, r3, r4
 801c954:	eb02 0801 	add.w	r8, r2, r1
 801c958:	45d0      	cmp	r8, sl
 801c95a:	bf28      	it	cs
 801c95c:	46d0      	movcs	r8, sl
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801c95e:	f8d9 100c 	ldr.w	r1, [r9, #12]
 801c962:	1ae3      	subs	r3, r4, r3
 801c964:	4642      	mov	r2, r8
 801c966:	4419      	add	r1, r3
 801c968:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c96a:	f011 fcc5 	bl	802e2f8 <memcpy>
                data += diff;
 801c96e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c970:	4443      	add	r3, r8
 801c972:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801c974:	4444      	add	r4, r8
                size -= diff;
 801c976:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801c97a:	e060      	b.n	801ca3e <lfs_bd_read+0x13e>
        lfs_size_t diff = size;
 801c97c:	46d0      	mov	r8, sl
 801c97e:	e06a      	b.n	801ca56 <lfs_bd_read+0x156>
 801c980:	46d0      	mov	r8, sl
 801c982:	e068      	b.n	801ca56 <lfs_bd_read+0x156>
                off < rcache->off + rcache->size) {
 801c984:	686b      	ldr	r3, [r5, #4]
 801c986:	68aa      	ldr	r2, [r5, #8]
 801c988:	1899      	adds	r1, r3, r2
        if (block == rcache->block &&
 801c98a:	42a1      	cmp	r1, r4
 801c98c:	d966      	bls.n	801ca5c <lfs_bd_read+0x15c>
            if (off >= rcache->off) {
 801c98e:	42a3      	cmp	r3, r4
 801c990:	d904      	bls.n	801c99c <lfs_bd_read+0x9c>
            diff = lfs_min(diff, rcache->off-off);
 801c992:	1b1b      	subs	r3, r3, r4
 801c994:	4598      	cmp	r8, r3
 801c996:	bf28      	it	cs
 801c998:	4698      	movcs	r8, r3
 801c99a:	e05f      	b.n	801ca5c <lfs_bd_read+0x15c>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801c99c:	1b19      	subs	r1, r3, r4
 801c99e:	440a      	add	r2, r1
 801c9a0:	4590      	cmp	r8, r2
 801c9a2:	bf28      	it	cs
 801c9a4:	4690      	movcs	r8, r2
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801c9a6:	68e9      	ldr	r1, [r5, #12]
 801c9a8:	1ae3      	subs	r3, r4, r3
 801c9aa:	4642      	mov	r2, r8
 801c9ac:	4419      	add	r1, r3
 801c9ae:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c9b0:	f011 fca2 	bl	802e2f8 <memcpy>
                data += diff;
 801c9b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c9b6:	4443      	add	r3, r8
 801c9b8:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801c9ba:	4444      	add	r4, r8
                size -= diff;
 801c9bc:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801c9c0:	e03d      	b.n	801ca3e <lfs_bd_read+0x13e>
            data += diff;
 801c9c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c9c4:	9b04      	ldr	r3, [sp, #16]
 801c9c6:	441a      	add	r2, r3
 801c9c8:	9212      	str	r2, [sp, #72]	@ 0x48
            off += diff;
 801c9ca:	441c      	add	r4, r3
            size -= diff;
 801c9cc:	9b05      	ldr	r3, [sp, #20]
 801c9ce:	eba3 0308 	sub.w	r3, r3, r8
 801c9d2:	449a      	add	sl, r3
            continue;
 801c9d4:	e033      	b.n	801ca3e <lfs_bd_read+0x13e>
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801c9d6:	9b03      	ldr	r3, [sp, #12]
 801c9d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c9da:	b10b      	cbz	r3, 801c9e0 <lfs_bd_read+0xe0>
 801c9dc:	42bb      	cmp	r3, r7
 801c9de:	d95f      	bls.n	801caa0 <lfs_bd_read+0x1a0>
        rcache->block = block;
 801c9e0:	602f      	str	r7, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801c9e2:	9e03      	ldr	r6, [sp, #12]
 801c9e4:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801c9e6:	69da      	ldr	r2, [r3, #28]
    return a - (a % alignment);
 801c9e8:	fbb4 f3f2 	udiv	r3, r4, r2
 801c9ec:	fb02 4313 	mls	r3, r2, r3, r4
 801c9f0:	1ae2      	subs	r2, r4, r3
 801c9f2:	606a      	str	r2, [r5, #4]
                lfs_min(
 801c9f4:	eb04 010b 	add.w	r1, r4, fp
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 801c9f8:	f8d6 c068 	ldr.w	ip, [r6, #104]	@ 0x68
 801c9fc:	f8dc 001c 	ldr.w	r0, [ip, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801ca00:	4401      	add	r1, r0
 801ca02:	3901      	subs	r1, #1
    return a - (a % alignment);
 801ca04:	fbb1 fef0 	udiv	lr, r1, r0
 801ca08:	fb00 101e 	mls	r0, r0, lr, r1
 801ca0c:	1a09      	subs	r1, r1, r0
                    lfs->cfg->block_size)
 801ca0e:	f8dc 0024 	ldr.w	r0, [ip, #36]	@ 0x24
        rcache->size = lfs_min(
 801ca12:	1b1b      	subs	r3, r3, r4
 801ca14:	4288      	cmp	r0, r1
 801ca16:	bf94      	ite	ls
 801ca18:	181b      	addls	r3, r3, r0
 801ca1a:	185b      	addhi	r3, r3, r1
                lfs->cfg->cache_size);
 801ca1c:	f8dc 1030 	ldr.w	r1, [ip, #48]	@ 0x30
    return (a < b) ? a : b;
 801ca20:	428b      	cmp	r3, r1
 801ca22:	bf28      	it	cs
 801ca24:	460b      	movcs	r3, r1
        rcache->size = lfs_min(
 801ca26:	60ab      	str	r3, [r5, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 801ca28:	6eb0      	ldr	r0, [r6, #104]	@ 0x68
 801ca2a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801ca2e:	9300      	str	r3, [sp, #0]
 801ca30:	68eb      	ldr	r3, [r5, #12]
 801ca32:	4639      	mov	r1, r7
 801ca34:	47c0      	blx	r8
        LFS_ASSERT(err <= 0);
 801ca36:	1e03      	subs	r3, r0, #0
 801ca38:	dc38      	bgt.n	801caac <lfs_bd_read+0x1ac>
        if (err) {
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	d146      	bne.n	801cacc <lfs_bd_read+0x1cc>
    while (size > 0) {
 801ca3e:	f1ba 0f00 	cmp.w	sl, #0
 801ca42:	d03b      	beq.n	801cabc <lfs_bd_read+0x1bc>
        if (pcache && block == pcache->block &&
 801ca44:	f1b9 0f00 	cmp.w	r9, #0
 801ca48:	d098      	beq.n	801c97c <lfs_bd_read+0x7c>
 801ca4a:	f8d9 3000 	ldr.w	r3, [r9]
 801ca4e:	42bb      	cmp	r3, r7
 801ca50:	f43f af70 	beq.w	801c934 <lfs_bd_read+0x34>
        lfs_size_t diff = size;
 801ca54:	46d0      	mov	r8, sl
        if (block == rcache->block &&
 801ca56:	682b      	ldr	r3, [r5, #0]
 801ca58:	42bb      	cmp	r3, r7
 801ca5a:	d093      	beq.n	801c984 <lfs_bd_read+0x84>
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 801ca5c:	45da      	cmp	sl, fp
 801ca5e:	d3ba      	bcc.n	801c9d6 <lfs_bd_read+0xd6>
 801ca60:	9b03      	ldr	r3, [sp, #12]
 801ca62:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801ca64:	69c2      	ldr	r2, [r0, #28]
 801ca66:	fbb4 f3f2 	udiv	r3, r4, r2
 801ca6a:	fb02 4313 	mls	r3, r2, r3, r4
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d1b1      	bne.n	801c9d6 <lfs_bd_read+0xd6>
 801ca72:	4552      	cmp	r2, sl
 801ca74:	d8af      	bhi.n	801c9d6 <lfs_bd_read+0xd6>
    return a - (a % alignment);
 801ca76:	fbb8 f3f2 	udiv	r3, r8, r2
 801ca7a:	fb02 8313 	mls	r3, r2, r3, r8
 801ca7e:	9305      	str	r3, [sp, #20]
 801ca80:	eba8 0203 	sub.w	r2, r8, r3
 801ca84:	4613      	mov	r3, r2
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 801ca86:	6842      	ldr	r2, [r0, #4]
 801ca88:	4616      	mov	r6, r2
 801ca8a:	9304      	str	r3, [sp, #16]
 801ca8c:	9300      	str	r3, [sp, #0]
 801ca8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ca90:	4622      	mov	r2, r4
 801ca92:	4639      	mov	r1, r7
 801ca94:	47b0      	blx	r6
            if (err) {
 801ca96:	2800      	cmp	r0, #0
 801ca98:	d093      	beq.n	801c9c2 <lfs_bd_read+0xc2>
}
 801ca9a:	b007      	add	sp, #28
 801ca9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801caa0:	4b0b      	ldr	r3, [pc, #44]	@ (801cad0 <lfs_bd_read+0x1d0>)
 801caa2:	4a0c      	ldr	r2, [pc, #48]	@ (801cad4 <lfs_bd_read+0x1d4>)
 801caa4:	216b      	movs	r1, #107	@ 0x6b
 801caa6:	480c      	ldr	r0, [pc, #48]	@ (801cad8 <lfs_bd_read+0x1d8>)
 801caa8:	f00e fdb0 	bl	802b60c <__assert_func>
        LFS_ASSERT(err <= 0);
 801caac:	4b0b      	ldr	r3, [pc, #44]	@ (801cadc <lfs_bd_read+0x1dc>)
 801caae:	4a09      	ldr	r2, [pc, #36]	@ (801cad4 <lfs_bd_read+0x1d4>)
 801cab0:	2176      	movs	r1, #118	@ 0x76
 801cab2:	4809      	ldr	r0, [pc, #36]	@ (801cad8 <lfs_bd_read+0x1d8>)
 801cab4:	f00e fdaa 	bl	802b60c <__assert_func>
 801cab8:	9003      	str	r0, [sp, #12]
 801caba:	e7c0      	b.n	801ca3e <lfs_bd_read+0x13e>
    return 0;
 801cabc:	2000      	movs	r0, #0
 801cabe:	e7ec      	b.n	801ca9a <lfs_bd_read+0x19a>
        return LFS_ERR_CORRUPT;
 801cac0:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801cac4:	e7e9      	b.n	801ca9a <lfs_bd_read+0x19a>
 801cac6:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801caca:	e7e6      	b.n	801ca9a <lfs_bd_read+0x19a>
 801cacc:	4618      	mov	r0, r3
 801cace:	e7e4      	b.n	801ca9a <lfs_bd_read+0x19a>
 801cad0:	0803a244 	.word	0x0803a244
 801cad4:	0803d5ec 	.word	0x0803d5ec
 801cad8:	0803a198 	.word	0x0803a198
 801cadc:	0803a1c8 	.word	0x0803a1c8

0801cae0 <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 801cae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cae4:	b089      	sub	sp, #36	@ 0x24
 801cae6:	4607      	mov	r7, r0
 801cae8:	468a      	mov	sl, r1
 801caea:	4690      	mov	r8, r2
 801caec:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
 801caee:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
 801caf0:	690b      	ldr	r3, [r1, #16]
 801caf2:	9307      	str	r3, [sp, #28]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801caf4:	303c      	adds	r0, #60	@ 0x3c
 801caf6:	f7ff fd7f 	bl	801c5f8 <lfs_gstate_hasmovehere>
 801cafa:	2800      	cmp	r0, #0
 801cafc:	f000 808f 	beq.w	801cc1e <lfs_dir_getslice+0x13e>
    return (tag & 0x000ffc00) >> 10;
 801cb00:	f3c8 2389 	ubfx	r3, r8, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801cb04:	2b00      	cmp	r3, #0
 801cb06:	f000 808c 	beq.w	801cc22 <lfs_dir_getslice+0x142>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801cb0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801cb0c:	f3c3 238f 	ubfx	r3, r3, #10, #16
 801cb10:	f3cb 228f 	ubfx	r2, fp, #10, #16
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801cb14:	ea83 0102 	eor.w	r1, r3, r2
 801cb18:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801cb1c:	2900      	cmp	r1, #0
 801cb1e:	f000 808a 	beq.w	801cc36 <lfs_dir_getslice+0x156>
    return (tag & 0x000ffc00) >> 10;
 801cb22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801cb26:	f3c2 0209 	ubfx	r2, r2, #0, #10
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 801cb2a:	4293      	cmp	r3, r2
 801cb2c:	d37b      	bcc.n	801cc26 <lfs_dir_getslice+0x146>
    lfs_stag_t gdiff = 0;
 801cb2e:	2600      	movs	r6, #0
 801cb30:	e006      	b.n	801cb40 <lfs_dir_getslice+0x60>
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 801cb32:	9605      	str	r6, [sp, #20]
 801cb34:	ebab 0306 	sub.w	r3, fp, r6
 801cb38:	4063      	eors	r3, r4
 801cb3a:	ea13 0f08 	tst.w	r3, r8
 801cb3e:	d049      	beq.n	801cbd4 <lfs_dir_getslice+0xf4>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801cb40:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
 801cb42:	f344 0909 	sbfx	r9, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801cb46:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801cb4a:	bf14      	ite	ne
 801cb4c:	4623      	movne	r3, r4
 801cb4e:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
 801cb50:	f3c3 0309 	ubfx	r3, r3, #0, #10
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801cb54:	f103 0208 	add.w	r2, r3, #8
 801cb58:	42aa      	cmp	r2, r5
 801cb5a:	d866      	bhi.n	801cc2a <lfs_dir_getslice+0x14a>
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801cb5c:	3304      	adds	r3, #4
        off -= lfs_tag_dsize(ntag);
 801cb5e:	1aed      	subs	r5, r5, r3
                dir->pair[0], off, &ntag, sizeof(ntag));
 801cb60:	f8da 2000 	ldr.w	r2, [sl]
        int err = lfs_bd_read(lfs,
 801cb64:	2304      	movs	r3, #4
 801cb66:	9303      	str	r3, [sp, #12]
 801cb68:	a907      	add	r1, sp, #28
 801cb6a:	9102      	str	r1, [sp, #8]
 801cb6c:	9501      	str	r5, [sp, #4]
 801cb6e:	9200      	str	r2, [sp, #0]
 801cb70:	463a      	mov	r2, r7
 801cb72:	2100      	movs	r1, #0
 801cb74:	4638      	mov	r0, r7
 801cb76:	f7ff fec3 	bl	801c900 <lfs_bd_read>
        if (err) {
 801cb7a:	4603      	mov	r3, r0
 801cb7c:	2800      	cmp	r0, #0
 801cb7e:	d156      	bne.n	801cc2e <lfs_dir_getslice+0x14e>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 801cb80:	9b07      	ldr	r3, [sp, #28]
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 801cb82:	ba1b      	rev	r3, r3
 801cb84:	4063      	eors	r3, r4
 801cb86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cb8a:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
 801cb8c:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	d0ce      	beq.n	801cb32 <lfs_dir_getslice+0x52>
    return (tag & 0x70000000) >> 20;
 801cb94:	0d23      	lsrs	r3, r4, #20
 801cb96:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
        if (lfs_tag_id(gmask) != 0 &&
 801cb9a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801cb9e:	d1c8      	bne.n	801cb32 <lfs_dir_getslice+0x52>
    return (tag & 0x000ffc00) >> 10;
 801cba0:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 801cba4:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
 801cba8:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801cbac:	4584      	cmp	ip, r0
 801cbae:	d3c0      	bcc.n	801cb32 <lfs_dir_getslice+0x52>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 801cbb0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801cbb4:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801cbb8:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801cbbc:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 801cbc0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 801cbc4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801cbc8:	42a2      	cmp	r2, r4
 801cbca:	d037      	beq.n	801cc3c <lfs_dir_getslice+0x15c>
    return (int8_t)lfs_tag_chunk(tag);
 801cbcc:	b25b      	sxtb	r3, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801cbce:	eb06 2683 	add.w	r6, r6, r3, lsl #10
 801cbd2:	e7ae      	b.n	801cb32 <lfs_dir_getslice+0x52>
            if (lfs_tag_isdelete(tag)) {
 801cbd4:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801cbd8:	d033      	beq.n	801cc42 <lfs_dir_getslice+0x162>
    return tag & 0x000003ff;
 801cbda:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
 801cbde:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801cbe0:	429e      	cmp	r6, r3
 801cbe2:	bf28      	it	cs
 801cbe4:	461e      	movcs	r6, r3
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 801cbe6:	f8da 2000 	ldr.w	r2, [sl]
 801cbea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801cbec:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
 801cbee:	9603      	str	r6, [sp, #12]
 801cbf0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801cbf2:	9102      	str	r1, [sp, #8]
 801cbf4:	3304      	adds	r3, #4
 801cbf6:	9301      	str	r3, [sp, #4]
 801cbf8:	9200      	str	r2, [sp, #0]
 801cbfa:	4633      	mov	r3, r6
 801cbfc:	463a      	mov	r2, r7
 801cbfe:	2100      	movs	r1, #0
 801cc00:	4638      	mov	r0, r7
 801cc02:	f7ff fe7d 	bl	801c900 <lfs_bd_read>
            if (err) {
 801cc06:	4603      	mov	r3, r0
 801cc08:	b988      	cbnz	r0, 801cc2e <lfs_dir_getslice+0x14e>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 801cc0a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801cc0c:	1b9a      	subs	r2, r3, r6
 801cc0e:	2100      	movs	r1, #0
 801cc10:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801cc12:	1998      	adds	r0, r3, r6
 801cc14:	f00f fdf4 	bl	802c800 <memset>
            return tag + gdiff;
 801cc18:	9b05      	ldr	r3, [sp, #20]
 801cc1a:	4423      	add	r3, r4
 801cc1c:	e007      	b.n	801cc2e <lfs_dir_getslice+0x14e>
    lfs_stag_t gdiff = 0;
 801cc1e:	2600      	movs	r6, #0
 801cc20:	e78e      	b.n	801cb40 <lfs_dir_getslice+0x60>
 801cc22:	2600      	movs	r6, #0
 801cc24:	e78c      	b.n	801cb40 <lfs_dir_getslice+0x60>
            gdiff -= LFS_MKTAG(0, 1, 0);
 801cc26:	4e08      	ldr	r6, [pc, #32]	@ (801cc48 <lfs_dir_getslice+0x168>)
 801cc28:	e78a      	b.n	801cb40 <lfs_dir_getslice+0x60>
    return LFS_ERR_NOENT;
 801cc2a:	f06f 0301 	mvn.w	r3, #1
}
 801cc2e:	4618      	mov	r0, r3
 801cc30:	b009      	add	sp, #36	@ 0x24
 801cc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOENT;
 801cc36:	f06f 0301 	mvn.w	r3, #1
 801cc3a:	e7f8      	b.n	801cc2e <lfs_dir_getslice+0x14e>
                return LFS_ERR_NOENT;
 801cc3c:	f06f 0301 	mvn.w	r3, #1
 801cc40:	e7f5      	b.n	801cc2e <lfs_dir_getslice+0x14e>
                return LFS_ERR_NOENT;
 801cc42:	f06f 0301 	mvn.w	r3, #1
 801cc46:	e7f2      	b.n	801cc2e <lfs_dir_getslice+0x14e>
 801cc48:	fffffc00 	.word	0xfffffc00

0801cc4c <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 801cc4c:	b510      	push	{r4, lr}
 801cc4e:	b084      	sub	sp, #16
    return tag & 0x000003ff;
 801cc50:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 801cc54:	9402      	str	r4, [sp, #8]
 801cc56:	9c06      	ldr	r4, [sp, #24]
 801cc58:	9401      	str	r4, [sp, #4]
 801cc5a:	2400      	movs	r4, #0
 801cc5c:	9400      	str	r4, [sp, #0]
 801cc5e:	f7ff ff3f 	bl	801cae0 <lfs_dir_getslice>
}
 801cc62:	b004      	add	sp, #16
 801cc64:	bd10      	pop	{r4, pc}
	...

0801cc68 <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
 801cc68:	b510      	push	{r4, lr}
 801cc6a:	b086      	sub	sp, #24
 801cc6c:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 801cc6e:	ab03      	add	r3, sp, #12
 801cc70:	9300      	str	r3, [sp, #0]
 801cc72:	4b09      	ldr	r3, [pc, #36]	@ (801cc98 <lfs_dir_getgstate+0x30>)
 801cc74:	4a09      	ldr	r2, [pc, #36]	@ (801cc9c <lfs_dir_getgstate+0x34>)
 801cc76:	f7ff ffe9 	bl	801cc4c <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 801cc7a:	2800      	cmp	r0, #0
 801cc7c:	da04      	bge.n	801cc88 <lfs_dir_getgstate+0x20>
 801cc7e:	f110 0f02 	cmn.w	r0, #2
 801cc82:	d106      	bne.n	801cc92 <lfs_dir_getgstate+0x2a>
    return 0;
 801cc84:	2000      	movs	r0, #0
 801cc86:	e004      	b.n	801cc92 <lfs_dir_getgstate+0x2a>
        lfs_gstate_xor(gstate, &temp);
 801cc88:	a903      	add	r1, sp, #12
 801cc8a:	4620      	mov	r0, r4
 801cc8c:	f7ff fca2 	bl	801c5d4 <lfs_gstate_xor>
    return 0;
 801cc90:	2000      	movs	r0, #0
}
 801cc92:	b006      	add	sp, #24
 801cc94:	bd10      	pop	{r4, pc}
 801cc96:	bf00      	nop
 801cc98:	7ff0000c 	.word	0x7ff0000c
 801cc9c:	7ff00000 	.word	0x7ff00000

0801cca0 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
 801cca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cca4:	b089      	sub	sp, #36	@ 0x24
 801cca6:	461c      	mov	r4, r3
 801cca8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ccaa:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801ccac:	9f14      	ldr	r7, [sp, #80]	@ 0x50
    if (size == 0) {
 801ccae:	b923      	cbnz	r3, 801ccba <lfs_ctz_traverse+0x1a>
        return 0;
 801ccb0:	2300      	movs	r3, #0
}
 801ccb2:	4618      	mov	r0, r3
 801ccb4:	b009      	add	sp, #36	@ 0x24
 801ccb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccba:	4680      	mov	r8, r0
 801ccbc:	4689      	mov	r9, r1
 801ccbe:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801ccc0:	3b01      	subs	r3, #1
 801ccc2:	9307      	str	r3, [sp, #28]
 801ccc4:	a907      	add	r1, sp, #28
 801ccc6:	f7ff fdfd 	bl	801c8c4 <lfs_ctz_index>
 801ccca:	4605      	mov	r5, r0
        int err = cb(data, head);
 801cccc:	4621      	mov	r1, r4
 801ccce:	4638      	mov	r0, r7
 801ccd0:	47b0      	blx	r6
        if (err) {
 801ccd2:	4603      	mov	r3, r0
 801ccd4:	2800      	cmp	r0, #0
 801ccd6:	d1ec      	bne.n	801ccb2 <lfs_ctz_traverse+0x12>
        if (index == 0) {
 801ccd8:	2d00      	cmp	r5, #0
 801ccda:	d0ea      	beq.n	801ccb2 <lfs_ctz_traverse+0x12>
        int count = 2 - (index & 1);
 801ccdc:	f005 0b01 	and.w	fp, r5, #1
 801cce0:	f1cb 0302 	rsb	r3, fp, #2
                pcache, rcache, count*sizeof(head),
 801cce4:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 801cce6:	9303      	str	r3, [sp, #12]
 801cce8:	aa05      	add	r2, sp, #20
 801ccea:	9202      	str	r2, [sp, #8]
 801ccec:	2200      	movs	r2, #0
 801ccee:	9201      	str	r2, [sp, #4]
 801ccf0:	9400      	str	r4, [sp, #0]
 801ccf2:	4652      	mov	r2, sl
 801ccf4:	4649      	mov	r1, r9
 801ccf6:	4640      	mov	r0, r8
 801ccf8:	f7ff fe02 	bl	801c900 <lfs_bd_read>
        if (err) {
 801ccfc:	4604      	mov	r4, r0
 801ccfe:	b9c8      	cbnz	r0, 801cd34 <lfs_ctz_traverse+0x94>
        for (int i = 0; i < count-1; i++) {
 801cd00:	43eb      	mvns	r3, r5
 801cd02:	f003 0301 	and.w	r3, r3, #1
 801cd06:	42a3      	cmp	r3, r4
 801cd08:	dd0b      	ble.n	801cd22 <lfs_ctz_traverse+0x82>
            err = cb(data, heads[i]);
 801cd0a:	ab08      	add	r3, sp, #32
 801cd0c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801cd10:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 801cd14:	4638      	mov	r0, r7
 801cd16:	47b0      	blx	r6
            if (err) {
 801cd18:	4603      	mov	r3, r0
 801cd1a:	2800      	cmp	r0, #0
 801cd1c:	d1c9      	bne.n	801ccb2 <lfs_ctz_traverse+0x12>
        for (int i = 0; i < count-1; i++) {
 801cd1e:	3401      	adds	r4, #1
 801cd20:	e7ee      	b.n	801cd00 <lfs_ctz_traverse+0x60>
        head = heads[count-1];
 801cd22:	aa08      	add	r2, sp, #32
 801cd24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cd28:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
 801cd2c:	f1ab 0b02 	sub.w	fp, fp, #2
 801cd30:	445d      	add	r5, fp
    while (true) {
 801cd32:	e7cb      	b.n	801cccc <lfs_ctz_traverse+0x2c>
            return err;
 801cd34:	4603      	mov	r3, r0
 801cd36:	e7bc      	b.n	801ccb2 <lfs_ctz_traverse+0x12>

0801cd38 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 801cd38:	b530      	push	{r4, r5, lr}
 801cd3a:	b087      	sub	sp, #28
 801cd3c:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
 801cd3e:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 801cd40:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801cd42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 801cd44:	6811      	ldr	r1, [r2, #0]
 801cd46:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 801cd48:	2508      	movs	r5, #8
 801cd4a:	9503      	str	r5, [sp, #12]
 801cd4c:	ad04      	add	r5, sp, #16
 801cd4e:	9502      	str	r5, [sp, #8]
 801cd50:	9201      	str	r2, [sp, #4]
 801cd52:	9100      	str	r1, [sp, #0]
 801cd54:	4602      	mov	r2, r0
 801cd56:	f100 0110 	add.w	r1, r0, #16
 801cd5a:	f7ff fdd1 	bl	801c900 <lfs_bd_read>
    if (err) {
 801cd5e:	4603      	mov	r3, r0
 801cd60:	b978      	cbnz	r0, 801cd82 <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801cd62:	9a04      	ldr	r2, [sp, #16]
 801cd64:	6861      	ldr	r1, [r4, #4]
 801cd66:	4291      	cmp	r1, r2
 801cd68:	d008      	beq.n	801cd7c <lfs_fs_parent_match+0x44>
 801cd6a:	9d05      	ldr	r5, [sp, #20]
 801cd6c:	68a0      	ldr	r0, [r4, #8]
 801cd6e:	4285      	cmp	r5, r0
 801cd70:	d004      	beq.n	801cd7c <lfs_fs_parent_match+0x44>
 801cd72:	4282      	cmp	r2, r0
 801cd74:	d002      	beq.n	801cd7c <lfs_fs_parent_match+0x44>
 801cd76:	42a9      	cmp	r1, r5
 801cd78:	d000      	beq.n	801cd7c <lfs_fs_parent_match+0x44>
 801cd7a:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 801cd7c:	3b00      	subs	r3, #0
 801cd7e:	bf18      	it	ne
 801cd80:	2301      	movne	r3, #1
}
 801cd82:	4618      	mov	r0, r3
 801cd84:	b007      	add	sp, #28
 801cd86:	bd30      	pop	{r4, r5, pc}

0801cd88 <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801cd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd8c:	b0af      	sub	sp, #188	@ 0xbc
 801cd8e:	9007      	str	r0, [sp, #28]
 801cd90:	460e      	mov	r6, r1
 801cd92:	4617      	mov	r7, r2
 801cd94:	461c      	mov	r4, r3
 801cd96:	f8dd 80e0 	ldr.w	r8, [sp, #224]	@ 0xe0
 801cd9a:	f8dd b0e4 	ldr.w	fp, [sp, #228]	@ 0xe4
 801cd9e:	f8dd a0e8 	ldr.w	sl, [sp, #232]	@ 0xe8
 801cda2:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
 801cda6:	9304      	str	r3, [sp, #16]
 801cda8:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	@ 0xf4
 801cdac:	9305      	str	r3, [sp, #20]
 801cdae:	f9bd 30f8 	ldrsh.w	r3, [sp, #248]	@ 0xf8
 801cdb2:	9306      	str	r3, [sp, #24]
    struct lfs_diskoff disk = {0};
 801cdb4:	2500      	movs	r5, #0
 801cdb6:	950d      	str	r5, [sp, #52]	@ 0x34
 801cdb8:	950e      	str	r5, [sp, #56]	@ 0x38
    return ((int32_t)(tag << 22) >> 22) == -1;
 801cdba:	f344 0309 	sbfx	r3, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801cdbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cdc2:	bf14      	ite	ne
 801cdc4:	46a1      	movne	r9, r4
 801cdc6:	f104 0901 	addeq.w	r9, r4, #1
    return tag & 0x000003ff;
 801cdca:	f3c9 0909 	ubfx	r9, r9, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801cdce:	f109 0904 	add.w	r9, r9, #4
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 801cdd2:	44b9      	add	r9, r7
 801cdd4:	68f3      	ldr	r3, [r6, #12]
 801cdd6:	4599      	cmp	r9, r3
 801cdd8:	d35e      	bcc.n	801ce98 <lfs_dir_traverse+0x110>
            } else if (attrcount > 0) {
 801cdda:	f1bb 0f00 	cmp.w	fp, #0
 801cdde:	f340 80fa 	ble.w	801cfd6 <lfs_dir_traverse+0x24e>
                tag = attrs[0].tag;
 801cde2:	f8d8 3000 	ldr.w	r3, [r8]
 801cde6:	930f      	str	r3, [sp, #60]	@ 0x3c
                buffer = attrs[0].buffer;
 801cde8:	f8d8 9004 	ldr.w	r9, [r8, #4]
                attrs += 1;
 801cdec:	f108 0808 	add.w	r8, r8, #8
                attrcount -= 1;
 801cdf0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 801cdf4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801cdf6:	4ba9      	ldr	r3, [pc, #676]	@ (801d09c <lfs_dir_traverse+0x314>)
 801cdf8:	ea0a 0303 	and.w	r3, sl, r3
 801cdfc:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801cdfe:	404a      	eors	r2, r1
 801ce00:	401a      	ands	r2, r3
 801ce02:	d1da      	bne.n	801cdba <lfs_dir_traverse+0x32>
    return (tag & 0x000ffc00) >> 10;
 801ce04:	f3ca 2389 	ubfx	r3, sl, #10, #10
            if (lfs_tag_id(tmask) != 0) {
 801ce08:	2b00      	cmp	r3, #0
 801ce0a:	f000 8116 	beq.w	801d03a <lfs_dir_traverse+0x2b2>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801ce0e:	2d02      	cmp	r5, #2
 801ce10:	d862      	bhi.n	801ced8 <lfs_dir_traverse+0x150>
                stack[sp] = (struct lfs_dir_traverse){
 801ce12:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801ce16:	a82e      	add	r0, sp, #184	@ 0xb8
 801ce18:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801ce1c:	f843 6c78 	str.w	r6, [r3, #-120]
 801ce20:	f843 7c74 	str.w	r7, [r3, #-116]
 801ce24:	f843 4c70 	str.w	r4, [r3, #-112]
 801ce28:	f843 8c6c 	str.w	r8, [r3, #-108]
 801ce2c:	f843 bc68 	str.w	fp, [r3, #-104]
 801ce30:	f843 ac64 	str.w	sl, [r3, #-100]
 801ce34:	983b      	ldr	r0, [sp, #236]	@ 0xec
 801ce36:	f843 0c60 	str.w	r0, [r3, #-96]
 801ce3a:	9804      	ldr	r0, [sp, #16]
 801ce3c:	f823 0c5c 	strh.w	r0, [r3, #-92]
 801ce40:	9805      	ldr	r0, [sp, #20]
 801ce42:	f823 0c5a 	strh.w	r0, [r3, #-90]
 801ce46:	9806      	ldr	r0, [sp, #24]
 801ce48:	f823 0c58 	strh.w	r0, [r3, #-88]
 801ce4c:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 801ce4e:	f843 0c54 	str.w	r0, [r3, #-84]
 801ce52:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801ce54:	f843 0c50 	str.w	r0, [r3, #-80]
 801ce58:	f843 1c4c 	str.w	r1, [r3, #-76]
 801ce5c:	f843 9c48 	str.w	r9, [r3, #-72]
 801ce60:	3b44      	subs	r3, #68	@ 0x44
 801ce62:	a90d      	add	r1, sp, #52	@ 0x34
 801ce64:	c903      	ldmia	r1, {r0, r1}
 801ce66:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
 801ce6a:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801ce6e:	009b      	lsls	r3, r3, #2
 801ce70:	3328      	adds	r3, #40	@ 0x28
 801ce72:	a910      	add	r1, sp, #64	@ 0x40
 801ce74:	440b      	add	r3, r1
 801ce76:	3304      	adds	r3, #4
 801ce78:	9340      	str	r3, [sp, #256]	@ 0x100
                sp += 1;
 801ce7a:	3501      	adds	r5, #1
                ttag = 0;
 801ce7c:	923b      	str	r2, [sp, #236]	@ 0xec
                tmask = 0;
 801ce7e:	4692      	mov	sl, r2
                cb = lfs_dir_traverse_filter;
 801ce80:	4b87      	ldr	r3, [pc, #540]	@ (801d0a0 <lfs_dir_traverse+0x318>)
 801ce82:	933f      	str	r3, [sp, #252]	@ 0xfc
                diff = 0;
 801ce84:	2300      	movs	r3, #0
 801ce86:	9306      	str	r3, [sp, #24]
                end = 0;
 801ce88:	9305      	str	r3, [sp, #20]
                begin = 0;
 801ce8a:	9304      	str	r3, [sp, #16]
 801ce8c:	e795      	b.n	801cdba <lfs_dir_traverse+0x32>
 801ce8e:	9d08      	ldr	r5, [sp, #32]
 801ce90:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801ce92:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801ce94:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ce96:	e790      	b.n	801cdba <lfs_dir_traverse+0x32>
                        dir->pair[0], off, &tag, sizeof(tag));
 801ce98:	6832      	ldr	r2, [r6, #0]
                int err = lfs_bd_read(lfs,
 801ce9a:	2304      	movs	r3, #4
 801ce9c:	9303      	str	r3, [sp, #12]
 801ce9e:	a90f      	add	r1, sp, #60	@ 0x3c
 801cea0:	9102      	str	r1, [sp, #8]
 801cea2:	f8cd 9004 	str.w	r9, [sp, #4]
 801cea6:	9200      	str	r2, [sp, #0]
 801cea8:	9a07      	ldr	r2, [sp, #28]
 801ceaa:	2100      	movs	r1, #0
 801ceac:	4610      	mov	r0, r2
 801ceae:	f7ff fd27 	bl	801c900 <lfs_bd_read>
                if (err) {
 801ceb2:	4603      	mov	r3, r0
 801ceb4:	2800      	cmp	r0, #0
 801ceb6:	f040 80ec 	bne.w	801d092 <lfs_dir_traverse+0x30a>
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 801ceba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return __builtin_bswap32(a);
 801cebc:	ba1b      	rev	r3, r3
 801cebe:	4063      	eors	r3, r4
 801cec0:	f043 4400 	orr.w	r4, r3, #2147483648	@ 0x80000000
 801cec4:	940f      	str	r4, [sp, #60]	@ 0x3c
                disk.block = dir->pair[0];
 801cec6:	6833      	ldr	r3, [r6, #0]
 801cec8:	930d      	str	r3, [sp, #52]	@ 0x34
                disk.off = off+sizeof(lfs_tag_t);
 801ceca:	f109 0304 	add.w	r3, r9, #4
 801cece:	930e      	str	r3, [sp, #56]	@ 0x38
                off += lfs_tag_dsize(ptag);
 801ced0:	464f      	mov	r7, r9
                buffer = &disk;
 801ced2:	f10d 0934 	add.w	r9, sp, #52	@ 0x34
 801ced6:	e78d      	b.n	801cdf4 <lfs_dir_traverse+0x6c>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801ced8:	4b72      	ldr	r3, [pc, #456]	@ (801d0a4 <lfs_dir_traverse+0x31c>)
 801ceda:	4a73      	ldr	r2, [pc, #460]	@ (801d0a8 <lfs_dir_traverse+0x320>)
 801cedc:	f240 31b6 	movw	r1, #950	@ 0x3b6
 801cee0:	4872      	ldr	r0, [pc, #456]	@ (801d0ac <lfs_dir_traverse+0x324>)
 801cee2:	f00e fb93 	bl	802b60c <__assert_func>
            if (cb == lfs_dir_traverse_filter) {
 801cee6:	4b6e      	ldr	r3, [pc, #440]	@ (801d0a0 <lfs_dir_traverse+0x318>)
 801cee8:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801ceea:	429a      	cmp	r2, r3
 801ceec:	f43f af65 	beq.w	801cdba <lfs_dir_traverse+0x32>
            stack[sp] = (struct lfs_dir_traverse){
 801cef0:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801cef4:	aa2e      	add	r2, sp, #184	@ 0xb8
 801cef6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cefa:	223c      	movs	r2, #60	@ 0x3c
 801cefc:	2100      	movs	r1, #0
 801cefe:	9309      	str	r3, [sp, #36]	@ 0x24
 801cf00:	f1a3 0078 	sub.w	r0, r3, #120	@ 0x78
 801cf04:	f00f fc7c 	bl	802c800 <memset>
 801cf08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf0a:	f843 6c78 	str.w	r6, [r3, #-120]
 801cf0e:	f843 7c74 	str.w	r7, [r3, #-116]
 801cf12:	f843 4c70 	str.w	r4, [r3, #-112]
 801cf16:	f843 8c6c 	str.w	r8, [r3, #-108]
 801cf1a:	f843 bc68 	str.w	fp, [r3, #-104]
 801cf1e:	f843 ac64 	str.w	sl, [r3, #-100]
 801cf22:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801cf24:	f843 2c60 	str.w	r2, [r3, #-96]
 801cf28:	9a04      	ldr	r2, [sp, #16]
 801cf2a:	f823 2c5c 	strh.w	r2, [r3, #-92]
 801cf2e:	9a05      	ldr	r2, [sp, #20]
 801cf30:	f823 2c5a 	strh.w	r2, [r3, #-90]
 801cf34:	9906      	ldr	r1, [sp, #24]
 801cf36:	f823 1c58 	strh.w	r1, [r3, #-88]
 801cf3a:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801cf3c:	f843 2c54 	str.w	r2, [r3, #-84]
 801cf40:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 801cf42:	f843 2c50 	str.w	r2, [r3, #-80]
            sp += 1;
 801cf46:	3501      	adds	r5, #1
            uint16_t fromid = lfs_tag_size(tag);
 801cf48:	9b08      	ldr	r3, [sp, #32]
 801cf4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801cf4e:	9204      	str	r2, [sp, #16]
    return (tag & 0x000ffc00) >> 10;
 801cf50:	f3c3 2389 	ubfx	r3, r3, #10, #10
            end = fromid+1;
 801cf54:	1c50      	adds	r0, r2, #1
 801cf56:	9005      	str	r0, [sp, #20]
            diff = toid-fromid+diff;
 801cf58:	1a9b      	subs	r3, r3, r2
 801cf5a:	fa11 f383 	uxtah	r3, r1, r3
 801cf5e:	b21b      	sxth	r3, r3
 801cf60:	9306      	str	r3, [sp, #24]
            dir = buffer;
 801cf62:	464e      	mov	r6, r9
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 801cf64:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801cf68:	933b      	str	r3, [sp, #236]	@ 0xec
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 801cf6a:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801d0b0 <lfs_dir_traverse+0x328>
            attrcount = 0;
 801cf6e:	f04f 0b00 	mov.w	fp, #0
            attrs = NULL;
 801cf72:	46d8      	mov	r8, fp
            ptag = 0xffffffff;
 801cf74:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
            off = 0;
 801cf78:	465f      	mov	r7, fp
 801cf7a:	e71e      	b.n	801cdba <lfs_dir_traverse+0x32>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801cf7c:	2300      	movs	r3, #0
 801cf7e:	9508      	str	r5, [sp, #32]
 801cf80:	9609      	str	r6, [sp, #36]	@ 0x24
 801cf82:	970a      	str	r7, [sp, #40]	@ 0x28
 801cf84:	940b      	str	r4, [sp, #44]	@ 0x2c
 801cf86:	461c      	mov	r4, r3
 801cf88:	9d06      	ldr	r5, [sp, #24]
 801cf8a:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 801cf8c:	9f40      	ldr	r7, [sp, #256]	@ 0x100
 801cf8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return tag & 0x000003ff;
 801cf90:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801cf94:	4294      	cmp	r4, r2
 801cf96:	d219      	bcs.n	801cfcc <lfs_dir_traverse+0x244>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801cf98:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801cf9c:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 801cfa0:	f819 1021 	ldrb.w	r1, [r9, r1, lsl #2]
 801cfa4:	f501 7140 	add.w	r1, r1, #768	@ 0x300
    return (tag & 0x000ffc00) >> 10;
 801cfa8:	f3c3 2389 	ubfx	r3, r3, #10, #10
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801cfac:	442b      	add	r3, r5
 801cfae:	029b      	lsls	r3, r3, #10
 801cfb0:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 801cfb4:	6891      	ldr	r1, [r2, #8]
 801cfb6:	6852      	ldr	r2, [r2, #4]
 801cfb8:	4319      	orrs	r1, r3
 801cfba:	4638      	mov	r0, r7
 801cfbc:	47b0      	blx	r6
                if (res < 0) {
 801cfbe:	2800      	cmp	r0, #0
 801cfc0:	db66      	blt.n	801d090 <lfs_dir_traverse+0x308>
                if (res) {
 801cfc2:	2800      	cmp	r0, #0
 801cfc4:	f47f af63 	bne.w	801ce8e <lfs_dir_traverse+0x106>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801cfc8:	3401      	adds	r4, #1
 801cfca:	e7e0      	b.n	801cf8e <lfs_dir_traverse+0x206>
 801cfcc:	9d08      	ldr	r5, [sp, #32]
 801cfce:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801cfd0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801cfd2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801cfd4:	e6f1      	b.n	801cdba <lfs_dir_traverse+0x32>
                res = 0;
 801cfd6:	2300      	movs	r3, #0
    if (sp > 0) {
 801cfd8:	2d00      	cmp	r5, #0
 801cfda:	d05a      	beq.n	801d092 <lfs_dir_traverse+0x30a>
        dir         = stack[sp-1].dir;
 801cfdc:	3d01      	subs	r5, #1
 801cfde:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801cfe2:	aa2e      	add	r2, sp, #184	@ 0xb8
 801cfe4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cfe8:	f853 6c78 	ldr.w	r6, [r3, #-120]
        off         = stack[sp-1].off;
 801cfec:	f853 7c74 	ldr.w	r7, [r3, #-116]
        ptag        = stack[sp-1].ptag;
 801cff0:	f853 4c70 	ldr.w	r4, [r3, #-112]
        attrs       = stack[sp-1].attrs;
 801cff4:	f853 8c6c 	ldr.w	r8, [r3, #-108]
        attrcount   = stack[sp-1].attrcount;
 801cff8:	f853 bc68 	ldr.w	fp, [r3, #-104]
        tmask       = stack[sp-1].tmask;
 801cffc:	f853 ac64 	ldr.w	sl, [r3, #-100]
        ttag        = stack[sp-1].ttag;
 801d000:	f853 2c60 	ldr.w	r2, [r3, #-96]
 801d004:	923b      	str	r2, [sp, #236]	@ 0xec
        begin       = stack[sp-1].begin;
 801d006:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 801d00a:	9204      	str	r2, [sp, #16]
        end         = stack[sp-1].end;
 801d00c:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
 801d010:	9205      	str	r2, [sp, #20]
        diff        = stack[sp-1].diff;
 801d012:	f933 2c58 	ldrsh.w	r2, [r3, #-88]
 801d016:	9206      	str	r2, [sp, #24]
        cb          = stack[sp-1].cb;
 801d018:	f853 2c54 	ldr.w	r2, [r3, #-84]
 801d01c:	923f      	str	r2, [sp, #252]	@ 0xfc
        data        = stack[sp-1].data;
 801d01e:	f853 2c50 	ldr.w	r2, [r3, #-80]
 801d022:	9240      	str	r2, [sp, #256]	@ 0x100
        tag         = stack[sp-1].tag;
 801d024:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 801d028:	920f      	str	r2, [sp, #60]	@ 0x3c
        buffer      = stack[sp-1].buffer;
 801d02a:	f853 9c48 	ldr.w	r9, [r3, #-72]
        disk        = stack[sp-1].disk;
 801d02e:	aa0d      	add	r2, sp, #52	@ 0x34
 801d030:	3b44      	subs	r3, #68	@ 0x44
 801d032:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d036:	e882 0003 	stmia.w	r2, {r0, r1}
    return (tag & 0x000ffc00) >> 10;
 801d03a:	f3ca 2389 	ubfx	r3, sl, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801d03e:	b153      	cbz	r3, 801d056 <lfs_dir_traverse+0x2ce>
    return (tag & 0x000ffc00) >> 10;
 801d040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d042:	f3c3 2389 	ubfx	r3, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801d046:	9a04      	ldr	r2, [sp, #16]
 801d048:	429a      	cmp	r2, r3
 801d04a:	f63f aeb6 	bhi.w	801cdba <lfs_dir_traverse+0x32>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 801d04e:	9a05      	ldr	r2, [sp, #20]
 801d050:	429a      	cmp	r2, r3
 801d052:	f67f aeb2 	bls.w	801cdba <lfs_dir_traverse+0x32>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801d056:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d058:	9308      	str	r3, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801d05a:	f3c3 530a 	ubfx	r3, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801d05e:	2b00      	cmp	r3, #0
 801d060:	f43f aeab 	beq.w	801cdba <lfs_dir_traverse+0x32>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 801d064:	f240 1201 	movw	r2, #257	@ 0x101
 801d068:	4293      	cmp	r3, r2
 801d06a:	f43f af3c 	beq.w	801cee6 <lfs_dir_traverse+0x15e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 801d06e:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 801d072:	d083      	beq.n	801cf7c <lfs_dir_traverse+0x1f4>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 801d074:	464a      	mov	r2, r9
 801d076:	9b08      	ldr	r3, [sp, #32]
 801d078:	9906      	ldr	r1, [sp, #24]
 801d07a:	eb03 2181 	add.w	r1, r3, r1, lsl #10
 801d07e:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801d080:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 801d082:	4798      	blx	r3
            if (res < 0) {
 801d084:	1e03      	subs	r3, r0, #0
 801d086:	db04      	blt.n	801d092 <lfs_dir_traverse+0x30a>
            if (res) {
 801d088:	2b00      	cmp	r3, #0
 801d08a:	f43f ae96 	beq.w	801cdba <lfs_dir_traverse+0x32>
 801d08e:	e7a3      	b.n	801cfd8 <lfs_dir_traverse+0x250>
 801d090:	4603      	mov	r3, r0
}
 801d092:	4618      	mov	r0, r3
 801d094:	b02f      	add	sp, #188	@ 0xbc
 801d096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d09a:	bf00      	nop
 801d09c:	7ff00000 	.word	0x7ff00000
 801d0a0:	0801c6d1 	.word	0x0801c6d1
 801d0a4:	0803a274 	.word	0x0803a274
 801d0a8:	0803d564 	.word	0x0803d564
 801d0ac:	0803a198 	.word	0x0803a198
 801d0b0:	600ffc00 	.word	0x600ffc00

0801d0b4 <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
 801d0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0b8:	b087      	sub	sp, #28
 801d0ba:	4606      	mov	r6, r0
 801d0bc:	468a      	mov	sl, r1
 801d0be:	4617      	mov	r7, r2
 801d0c0:	461c      	mov	r4, r3
 801d0c2:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 801d0c6:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 801d0ca:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801d0cc:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
    if (off+size > lfs->cfg->block_size) {
 801d0d0:	eb05 0208 	add.w	r2, r5, r8
 801d0d4:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801d0d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d0d8:	429a      	cmp	r2, r3
 801d0da:	d94d      	bls.n	801d178 <lfs_dir_getread+0xc4>
        return LFS_ERR_CORRUPT;
 801d0dc:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801d0e0:	e076      	b.n	801d1d0 <lfs_dir_getread+0x11c>
                off < pcache->off + pcache->size) {
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	68ba      	ldr	r2, [r7, #8]
 801d0e6:	1899      	adds	r1, r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801d0e8:	42a9      	cmp	r1, r5
 801d0ea:	d91c      	bls.n	801d126 <lfs_dir_getread+0x72>
            if (off >= pcache->off) {
 801d0ec:	42ab      	cmp	r3, r5
 801d0ee:	d904      	bls.n	801d0fa <lfs_dir_getread+0x46>
            diff = lfs_min(diff, pcache->off-off);
 801d0f0:	1b5b      	subs	r3, r3, r5
    return (a < b) ? a : b;
 801d0f2:	4543      	cmp	r3, r8
 801d0f4:	bf28      	it	cs
 801d0f6:	4643      	movcs	r3, r8
 801d0f8:	e048      	b.n	801d18c <lfs_dir_getread+0xd8>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801d0fa:	1b59      	subs	r1, r3, r5
 801d0fc:	440a      	add	r2, r1
 801d0fe:	4542      	cmp	r2, r8
 801d100:	bf28      	it	cs
 801d102:	4642      	movcs	r2, r8
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801d104:	68f9      	ldr	r1, [r7, #12]
 801d106:	1aeb      	subs	r3, r5, r3
 801d108:	9205      	str	r2, [sp, #20]
 801d10a:	4419      	add	r1, r3
 801d10c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d10e:	f011 f8f3 	bl	802e2f8 <memcpy>
                data += diff;
 801d112:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801d114:	9b05      	ldr	r3, [sp, #20]
 801d116:	4419      	add	r1, r3
 801d118:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801d11a:	441d      	add	r5, r3
                size -= diff;
 801d11c:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801d120:	e02a      	b.n	801d178 <lfs_dir_getread+0xc4>
        lfs_size_t diff = size;
 801d122:	4643      	mov	r3, r8
 801d124:	e032      	b.n	801d18c <lfs_dir_getread+0xd8>
 801d126:	4643      	mov	r3, r8
 801d128:	e030      	b.n	801d18c <lfs_dir_getread+0xd8>
        rcache->block = LFS_BLOCK_INLINE;
 801d12a:	f06f 0301 	mvn.w	r3, #1
 801d12e:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801d130:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801d132:	69db      	ldr	r3, [r3, #28]
    return a - (a % alignment);
 801d134:	fbb5 f2f3 	udiv	r2, r5, r3
 801d138:	fb03 5212 	mls	r2, r3, r2, r5
 801d13c:	1aaa      	subs	r2, r5, r2
 801d13e:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801d140:	eb05 030b 	add.w	r3, r5, fp
 801d144:	6eb1      	ldr	r1, [r6, #104]	@ 0x68
 801d146:	69c8      	ldr	r0, [r1, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801d148:	4403      	add	r3, r0
 801d14a:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801d14c:	fbb3 fcf0 	udiv	ip, r3, r0
 801d150:	fb00 301c 	mls	r0, r0, ip, r3
 801d154:	1a1b      	subs	r3, r3, r0
                lfs->cfg->cache_size);
 801d156:	6b09      	ldr	r1, [r1, #48]	@ 0x30
    return (a < b) ? a : b;
 801d158:	428b      	cmp	r3, r1
 801d15a:	bf28      	it	cs
 801d15c:	460b      	movcs	r3, r1
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801d15e:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
 801d160:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 801d162:	9302      	str	r3, [sp, #8]
 801d164:	9101      	str	r1, [sp, #4]
 801d166:	9200      	str	r2, [sp, #0]
 801d168:	464b      	mov	r3, r9
 801d16a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d16c:	4651      	mov	r1, sl
 801d16e:	4630      	mov	r0, r6
 801d170:	f7ff fcb6 	bl	801cae0 <lfs_dir_getslice>
        if (err < 0) {
 801d174:	2800      	cmp	r0, #0
 801d176:	db2b      	blt.n	801d1d0 <lfs_dir_getread+0x11c>
    while (size > 0) {
 801d178:	f1b8 0f00 	cmp.w	r8, #0
 801d17c:	d027      	beq.n	801d1ce <lfs_dir_getread+0x11a>
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801d17e:	2f00      	cmp	r7, #0
 801d180:	d0cf      	beq.n	801d122 <lfs_dir_getread+0x6e>
 801d182:	683b      	ldr	r3, [r7, #0]
 801d184:	f113 0f02 	cmn.w	r3, #2
 801d188:	d0ab      	beq.n	801d0e2 <lfs_dir_getread+0x2e>
        lfs_size_t diff = size;
 801d18a:	4643      	mov	r3, r8
        if (rcache->block == LFS_BLOCK_INLINE &&
 801d18c:	6822      	ldr	r2, [r4, #0]
 801d18e:	f112 0f02 	cmn.w	r2, #2
 801d192:	d1ca      	bne.n	801d12a <lfs_dir_getread+0x76>
                off < rcache->off + rcache->size) {
 801d194:	6862      	ldr	r2, [r4, #4]
 801d196:	68a1      	ldr	r1, [r4, #8]
 801d198:	1850      	adds	r0, r2, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
 801d19a:	42a8      	cmp	r0, r5
 801d19c:	d9c5      	bls.n	801d12a <lfs_dir_getread+0x76>
            if (off >= rcache->off) {
 801d19e:	42aa      	cmp	r2, r5
 801d1a0:	d8c3      	bhi.n	801d12a <lfs_dir_getread+0x76>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801d1a2:	1b50      	subs	r0, r2, r5
 801d1a4:	4401      	add	r1, r0
 801d1a6:	4608      	mov	r0, r1
 801d1a8:	4299      	cmp	r1, r3
 801d1aa:	bf28      	it	cs
 801d1ac:	4618      	movcs	r0, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801d1ae:	68e3      	ldr	r3, [r4, #12]
 801d1b0:	1aa9      	subs	r1, r5, r2
 801d1b2:	9005      	str	r0, [sp, #20]
 801d1b4:	4602      	mov	r2, r0
 801d1b6:	4419      	add	r1, r3
 801d1b8:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d1ba:	f011 f89d 	bl	802e2f8 <memcpy>
                data += diff;
 801d1be:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801d1c0:	9b05      	ldr	r3, [sp, #20]
 801d1c2:	4419      	add	r1, r3
 801d1c4:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801d1c6:	441d      	add	r5, r3
                size -= diff;
 801d1c8:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801d1cc:	e7d4      	b.n	801d178 <lfs_dir_getread+0xc4>
    return 0;
 801d1ce:	2000      	movs	r0, #0
}
 801d1d0:	b007      	add	sp, #28
 801d1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d1d6 <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
 801d1d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1da:	b089      	sub	sp, #36	@ 0x24
 801d1dc:	4682      	mov	sl, r0
 801d1de:	4689      	mov	r9, r1
 801d1e0:	9205      	str	r2, [sp, #20]
 801d1e2:	461f      	mov	r7, r3
 801d1e4:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 801d1e8:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 801d1ec:	9e15      	ldr	r6, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801d1ee:	2400      	movs	r4, #0
 801d1f0:	e002      	b.n	801d1f8 <lfs_bd_cmp+0x22>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801d1f2:	2301      	movs	r3, #1
 801d1f4:	e023      	b.n	801d23e <lfs_bd_cmp+0x68>
    for (lfs_off_t i = 0; i < size; i += diff) {
 801d1f6:	442c      	add	r4, r5
 801d1f8:	42b4      	cmp	r4, r6
 801d1fa:	d21f      	bcs.n	801d23c <lfs_bd_cmp+0x66>
        diff = lfs_min(size-i, sizeof(dat));
 801d1fc:	1b35      	subs	r5, r6, r4
 801d1fe:	2d08      	cmp	r5, #8
 801d200:	bf28      	it	cs
 801d202:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801d204:	9503      	str	r5, [sp, #12]
 801d206:	ab06      	add	r3, sp, #24
 801d208:	9302      	str	r3, [sp, #8]
 801d20a:	eb04 0308 	add.w	r3, r4, r8
 801d20e:	9301      	str	r3, [sp, #4]
 801d210:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d212:	9300      	str	r3, [sp, #0]
 801d214:	1b3b      	subs	r3, r7, r4
 801d216:	9a05      	ldr	r2, [sp, #20]
 801d218:	4649      	mov	r1, r9
 801d21a:	4650      	mov	r0, sl
 801d21c:	f7ff fb70 	bl	801c900 <lfs_bd_read>
        if (err) {
 801d220:	4603      	mov	r3, r0
 801d222:	b960      	cbnz	r0, 801d23e <lfs_bd_cmp+0x68>
        int res = memcmp(dat, data + i, diff);
 801d224:	462a      	mov	r2, r5
 801d226:	eb0b 0104 	add.w	r1, fp, r4
 801d22a:	a806      	add	r0, sp, #24
 801d22c:	f00f fabe 	bl	802c7ac <memcmp>
        if (res) {
 801d230:	2800      	cmp	r0, #0
 801d232:	d0e0      	beq.n	801d1f6 <lfs_bd_cmp+0x20>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801d234:	2800      	cmp	r0, #0
 801d236:	dbdc      	blt.n	801d1f2 <lfs_bd_cmp+0x1c>
 801d238:	2302      	movs	r3, #2
 801d23a:	e000      	b.n	801d23e <lfs_bd_cmp+0x68>
    return LFS_CMP_EQ;
 801d23c:	2300      	movs	r3, #0
}
 801d23e:	4618      	mov	r0, r3
 801d240:	b009      	add	sp, #36	@ 0x24
 801d242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d248 <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801d248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d24c:	b085      	sub	sp, #20
 801d24e:	460c      	mov	r4, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 801d250:	6809      	ldr	r1, [r1, #0]
 801d252:	f111 0f03 	cmn.w	r1, #3
 801d256:	d83f      	bhi.n	801d2d8 <lfs_bd_flush+0x90>
 801d258:	4607      	mov	r7, r0
 801d25a:	4691      	mov	r9, r2
 801d25c:	4698      	mov	r8, r3
        LFS_ASSERT(pcache->block < lfs->block_count);
 801d25e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801d260:	4299      	cmp	r1, r3
 801d262:	d22d      	bcs.n	801d2c0 <lfs_bd_flush+0x78>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 801d264:	68a5      	ldr	r5, [r4, #8]
 801d266:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801d268:	6a02      	ldr	r2, [r0, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801d26a:	4415      	add	r5, r2
 801d26c:	3d01      	subs	r5, #1
    return a - (a % alignment);
 801d26e:	fbb5 f3f2 	udiv	r3, r5, r2
 801d272:	fb02 5313 	mls	r3, r2, r3, r5
 801d276:	1aee      	subs	r6, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 801d278:	6885      	ldr	r5, [r0, #8]
 801d27a:	9600      	str	r6, [sp, #0]
 801d27c:	68e3      	ldr	r3, [r4, #12]
 801d27e:	6862      	ldr	r2, [r4, #4]
 801d280:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
 801d282:	1e05      	subs	r5, r0, #0
 801d284:	dc22      	bgt.n	801d2cc <lfs_bd_flush+0x84>
        if (err) {
 801d286:	bb45      	cbnz	r5, 801d2da <lfs_bd_flush+0x92>
        if (validate) {
 801d288:	f1b8 0f00 	cmp.w	r8, #0
 801d28c:	d013      	beq.n	801d2b6 <lfs_bd_flush+0x6e>
    rcache->block = LFS_BLOCK_NULL;
 801d28e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d292:	f8c9 3000 	str.w	r3, [r9]
                    pcache->block, pcache->off, pcache->buffer, diff);
 801d296:	68e3      	ldr	r3, [r4, #12]
            int res = lfs_bd_cmp(lfs,
 801d298:	9603      	str	r6, [sp, #12]
 801d29a:	9302      	str	r3, [sp, #8]
 801d29c:	6863      	ldr	r3, [r4, #4]
 801d29e:	9301      	str	r3, [sp, #4]
 801d2a0:	6823      	ldr	r3, [r4, #0]
 801d2a2:	9300      	str	r3, [sp, #0]
 801d2a4:	4633      	mov	r3, r6
 801d2a6:	464a      	mov	r2, r9
 801d2a8:	2100      	movs	r1, #0
 801d2aa:	4638      	mov	r0, r7
 801d2ac:	f7ff ff93 	bl	801d1d6 <lfs_bd_cmp>
            if (res < 0) {
 801d2b0:	2800      	cmp	r0, #0
 801d2b2:	db16      	blt.n	801d2e2 <lfs_bd_flush+0x9a>
            if (res != LFS_CMP_EQ) {
 801d2b4:	b9b8      	cbnz	r0, 801d2e6 <lfs_bd_flush+0x9e>
        lfs_cache_zero(lfs, pcache);
 801d2b6:	4621      	mov	r1, r4
 801d2b8:	4638      	mov	r0, r7
 801d2ba:	f7ff faf7 	bl	801c8ac <lfs_cache_zero>
 801d2be:	e00c      	b.n	801d2da <lfs_bd_flush+0x92>
        LFS_ASSERT(pcache->block < lfs->block_count);
 801d2c0:	4b0a      	ldr	r3, [pc, #40]	@ (801d2ec <lfs_bd_flush+0xa4>)
 801d2c2:	4a0b      	ldr	r2, [pc, #44]	@ (801d2f0 <lfs_bd_flush+0xa8>)
 801d2c4:	21b3      	movs	r1, #179	@ 0xb3
 801d2c6:	480b      	ldr	r0, [pc, #44]	@ (801d2f4 <lfs_bd_flush+0xac>)
 801d2c8:	f00e f9a0 	bl	802b60c <__assert_func>
        LFS_ASSERT(err <= 0);
 801d2cc:	4b0a      	ldr	r3, [pc, #40]	@ (801d2f8 <lfs_bd_flush+0xb0>)
 801d2ce:	4a08      	ldr	r2, [pc, #32]	@ (801d2f0 <lfs_bd_flush+0xa8>)
 801d2d0:	21b7      	movs	r1, #183	@ 0xb7
 801d2d2:	4808      	ldr	r0, [pc, #32]	@ (801d2f4 <lfs_bd_flush+0xac>)
 801d2d4:	f00e f99a 	bl	802b60c <__assert_func>
    return 0;
 801d2d8:	2500      	movs	r5, #0
}
 801d2da:	4628      	mov	r0, r5
 801d2dc:	b005      	add	sp, #20
 801d2de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return res;
 801d2e2:	4605      	mov	r5, r0
 801d2e4:	e7f9      	b.n	801d2da <lfs_bd_flush+0x92>
                return LFS_ERR_CORRUPT;
 801d2e6:	f06f 0553 	mvn.w	r5, #83	@ 0x53
 801d2ea:	e7f6      	b.n	801d2da <lfs_bd_flush+0x92>
 801d2ec:	0803a27c 	.word	0x0803a27c
 801d2f0:	0803d5a8 	.word	0x0803d5a8
 801d2f4:	0803a198 	.word	0x0803a198
 801d2f8:	0803a1c8 	.word	0x0803a1c8

0801d2fc <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 801d2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d300:	b083      	sub	sp, #12
 801d302:	4607      	mov	r7, r0
 801d304:	460c      	mov	r4, r1
 801d306:	9201      	str	r2, [sp, #4]
 801d308:	469b      	mov	fp, r3
 801d30a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d30c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801d30e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801d312:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801d316:	f116 0f02 	cmn.w	r6, #2
 801d31a:	d002      	beq.n	801d322 <lfs_bd_prog+0x26>
 801d31c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801d31e:	42b3      	cmp	r3, r6
 801d320:	d90b      	bls.n	801d33a <lfs_bd_prog+0x3e>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 801d322:	eb05 0308 	add.w	r3, r5, r8
 801d326:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801d328:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801d32a:	4293      	cmp	r3, r2
 801d32c:	d919      	bls.n	801d362 <lfs_bd_prog+0x66>
 801d32e:	4b2b      	ldr	r3, [pc, #172]	@ (801d3dc <lfs_bd_prog+0xe0>)
 801d330:	4a2b      	ldr	r2, [pc, #172]	@ (801d3e0 <lfs_bd_prog+0xe4>)
 801d332:	21e9      	movs	r1, #233	@ 0xe9
 801d334:	482b      	ldr	r0, [pc, #172]	@ (801d3e4 <lfs_bd_prog+0xe8>)
 801d336:	f00e f969 	bl	802b60c <__assert_func>
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801d33a:	4b2b      	ldr	r3, [pc, #172]	@ (801d3e8 <lfs_bd_prog+0xec>)
 801d33c:	4a28      	ldr	r2, [pc, #160]	@ (801d3e0 <lfs_bd_prog+0xe4>)
 801d33e:	21e8      	movs	r1, #232	@ 0xe8
 801d340:	4828      	ldr	r0, [pc, #160]	@ (801d3e4 <lfs_bd_prog+0xe8>)
 801d342:	f00e f963 	bl	802b60c <__assert_func>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801d346:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d34a:	d13c      	bne.n	801d3c6 <lfs_bd_prog+0xca>
        pcache->block = block;
 801d34c:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 801d34e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d350:	6a1a      	ldr	r2, [r3, #32]
 801d352:	fbb5 f3f2 	udiv	r3, r5, r2
 801d356:	fb02 5313 	mls	r3, r2, r3, r5
 801d35a:	1aeb      	subs	r3, r5, r3
 801d35c:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
 801d35e:	2300      	movs	r3, #0
 801d360:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
 801d362:	f1b8 0f00 	cmp.w	r8, #0
 801d366:	d035      	beq.n	801d3d4 <lfs_bd_prog+0xd8>
        if (block == pcache->block &&
 801d368:	6823      	ldr	r3, [r4, #0]
 801d36a:	42b3      	cmp	r3, r6
 801d36c:	d1eb      	bne.n	801d346 <lfs_bd_prog+0x4a>
                off >= pcache->off &&
 801d36e:	6862      	ldr	r2, [r4, #4]
        if (block == pcache->block &&
 801d370:	42aa      	cmp	r2, r5
 801d372:	d8e8      	bhi.n	801d346 <lfs_bd_prog+0x4a>
                off < pcache->off + lfs->cfg->cache_size) {
 801d374:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801d376:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 801d378:	1850      	adds	r0, r2, r1
                off >= pcache->off &&
 801d37a:	42a8      	cmp	r0, r5
 801d37c:	d9e3      	bls.n	801d346 <lfs_bd_prog+0x4a>
                    lfs->cfg->cache_size - (off-pcache->off));
 801d37e:	1b53      	subs	r3, r2, r5
            lfs_size_t diff = lfs_min(size,
 801d380:	eb01 0903 	add.w	r9, r1, r3
    return (a < b) ? a : b;
 801d384:	45c1      	cmp	r9, r8
 801d386:	bf28      	it	cs
 801d388:	46c1      	movcs	r9, r8
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 801d38a:	68e3      	ldr	r3, [r4, #12]
 801d38c:	1aa8      	subs	r0, r5, r2
 801d38e:	464a      	mov	r2, r9
 801d390:	4651      	mov	r1, sl
 801d392:	4418      	add	r0, r3
 801d394:	f010 ffb0 	bl	802e2f8 <memcpy>
            data += diff;
 801d398:	44ca      	add	sl, r9
            off += diff;
 801d39a:	444d      	add	r5, r9
            size -= diff;
 801d39c:	eba8 0809 	sub.w	r8, r8, r9
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 801d3a0:	68a2      	ldr	r2, [r4, #8]
 801d3a2:	6863      	ldr	r3, [r4, #4]
 801d3a4:	1aeb      	subs	r3, r5, r3
    return (a > b) ? a : b;
 801d3a6:	4293      	cmp	r3, r2
 801d3a8:	bf38      	it	cc
 801d3aa:	4613      	movcc	r3, r2
 801d3ac:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 801d3ae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801d3b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801d3b2:	429a      	cmp	r2, r3
 801d3b4:	d1d5      	bne.n	801d362 <lfs_bd_prog+0x66>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801d3b6:	465b      	mov	r3, fp
 801d3b8:	9a01      	ldr	r2, [sp, #4]
 801d3ba:	4621      	mov	r1, r4
 801d3bc:	4638      	mov	r0, r7
 801d3be:	f7ff ff43 	bl	801d248 <lfs_bd_flush>
                if (err) {
 801d3c2:	b940      	cbnz	r0, 801d3d6 <lfs_bd_prog+0xda>
 801d3c4:	e7cd      	b.n	801d362 <lfs_bd_prog+0x66>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801d3c6:	4b09      	ldr	r3, [pc, #36]	@ (801d3ec <lfs_bd_prog+0xf0>)
 801d3c8:	4a05      	ldr	r2, [pc, #20]	@ (801d3e0 <lfs_bd_prog+0xe4>)
 801d3ca:	f44f 7183 	mov.w	r1, #262	@ 0x106
 801d3ce:	4805      	ldr	r0, [pc, #20]	@ (801d3e4 <lfs_bd_prog+0xe8>)
 801d3d0:	f00e f91c 	bl	802b60c <__assert_func>
    return 0;
 801d3d4:	2000      	movs	r0, #0
}
 801d3d6:	b003      	add	sp, #12
 801d3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3dc:	0803a2d8 	.word	0x0803a2d8
 801d3e0:	0803d5b8 	.word	0x0803d5b8
 801d3e4:	0803a198 	.word	0x0803a198
 801d3e8:	0803a2a0 	.word	0x0803a2a0
 801d3ec:	0803a2fc 	.word	0x0803a2fc

0801d3f0 <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801d3f0:	b538      	push	{r3, r4, r5, lr}
 801d3f2:	4604      	mov	r4, r0
    rcache->block = LFS_BLOCK_NULL;
 801d3f4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801d3f8:	6015      	str	r5, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801d3fa:	f7ff ff25 	bl	801d248 <lfs_bd_flush>
    if (err) {
 801d3fe:	4603      	mov	r3, r0
 801d400:	b920      	cbnz	r0, 801d40c <lfs_bd_sync+0x1c>
    err = lfs->cfg->sync(lfs->cfg);
 801d402:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801d404:	6903      	ldr	r3, [r0, #16]
 801d406:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801d408:	1e03      	subs	r3, r0, #0
 801d40a:	dc01      	bgt.n	801d410 <lfs_bd_sync+0x20>
}
 801d40c:	4618      	mov	r0, r3
 801d40e:	bd38      	pop	{r3, r4, r5, pc}
    LFS_ASSERT(err <= 0);
 801d410:	4b02      	ldr	r3, [pc, #8]	@ (801d41c <lfs_bd_sync+0x2c>)
 801d412:	4a03      	ldr	r2, [pc, #12]	@ (801d420 <lfs_bd_sync+0x30>)
 801d414:	21dd      	movs	r1, #221	@ 0xdd
 801d416:	4803      	ldr	r0, [pc, #12]	@ (801d424 <lfs_bd_sync+0x34>)
 801d418:	f00e f8f8 	bl	802b60c <__assert_func>
 801d41c:	0803a1c8 	.word	0x0803a1c8
 801d420:	0803d558 	.word	0x0803d558
 801d424:	0803a198 	.word	0x0803a198

0801d428 <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 801d428:	b570      	push	{r4, r5, r6, lr}
 801d42a:	b084      	sub	sp, #16
 801d42c:	4604      	mov	r4, r0
 801d42e:	4694      	mov	ip, r2
    lfs_t *lfs = name->lfs;
 801d430:	6800      	ldr	r0, [r0, #0]
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 801d432:	68a3      	ldr	r3, [r4, #8]
    return tag & 0x000003ff;
 801d434:	f3c1 0509 	ubfx	r5, r1, #0, #10
    return (a < b) ? a : b;
 801d438:	42ab      	cmp	r3, r5
 801d43a:	bf28      	it	cs
 801d43c:	462b      	movcs	r3, r5
            disk->block, disk->off, name->name, diff);
 801d43e:	6812      	ldr	r2, [r2, #0]
 801d440:	f8dc 1004 	ldr.w	r1, [ip, #4]
    int res = lfs_bd_cmp(lfs,
 801d444:	9303      	str	r3, [sp, #12]
 801d446:	6866      	ldr	r6, [r4, #4]
 801d448:	9602      	str	r6, [sp, #8]
 801d44a:	9101      	str	r1, [sp, #4]
 801d44c:	9200      	str	r2, [sp, #0]
 801d44e:	4602      	mov	r2, r0
 801d450:	2100      	movs	r1, #0
 801d452:	f7ff fec0 	bl	801d1d6 <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
 801d456:	b920      	cbnz	r0, 801d462 <lfs_dir_find_match+0x3a>
    if (name->size != lfs_tag_size(tag)) {
 801d458:	68a3      	ldr	r3, [r4, #8]
 801d45a:	42ab      	cmp	r3, r5
 801d45c:	d001      	beq.n	801d462 <lfs_dir_find_match+0x3a>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801d45e:	d202      	bcs.n	801d466 <lfs_dir_find_match+0x3e>
 801d460:	2001      	movs	r0, #1
}
 801d462:	b004      	add	sp, #16
 801d464:	bd70      	pop	{r4, r5, r6, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801d466:	2002      	movs	r0, #2
 801d468:	e7fb      	b.n	801d462 <lfs_dir_find_match+0x3a>

0801d46a <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 801d46a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d46e:	b089      	sub	sp, #36	@ 0x24
 801d470:	9305      	str	r3, [sp, #20]
 801d472:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (size == 0) {
 801d474:	b953      	cbnz	r3, 801d48c <lfs_ctz_find+0x22>
        *block = LFS_BLOCK_NULL;
 801d476:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d47a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d47c:	6013      	str	r3, [r2, #0]
        *off = 0;
 801d47e:	2300      	movs	r3, #0
 801d480:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d482:	6013      	str	r3, [r2, #0]
}
 801d484:	4618      	mov	r0, r3
 801d486:	b009      	add	sp, #36	@ 0x24
 801d488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d48c:	4607      	mov	r7, r0
 801d48e:	4688      	mov	r8, r1
 801d490:	4691      	mov	r9, r2
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801d492:	3b01      	subs	r3, #1
 801d494:	9307      	str	r3, [sp, #28]
 801d496:	a907      	add	r1, sp, #28
 801d498:	f7ff fa14 	bl	801c8c4 <lfs_ctz_index>
 801d49c:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 801d49e:	a911      	add	r1, sp, #68	@ 0x44
 801d4a0:	4638      	mov	r0, r7
 801d4a2:	f7ff fa0f 	bl	801c8c4 <lfs_ctz_index>
 801d4a6:	4606      	mov	r6, r0
    while (current > target) {
 801d4a8:	42b5      	cmp	r5, r6
 801d4aa:	d91f      	bls.n	801d4ec <lfs_ctz_find+0x82>
                lfs_npw2(current-target+1) - 1,
 801d4ac:	1bac      	subs	r4, r5, r6
    return 32 - __builtin_clz(a-1);
 801d4ae:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
 801d4b2:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
 801d4b6:	fa95 f3a5 	rbit	r3, r5
 801d4ba:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
 801d4be:	429c      	cmp	r4, r3
 801d4c0:	bf28      	it	cs
 801d4c2:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 801d4c4:	2304      	movs	r3, #4
 801d4c6:	9303      	str	r3, [sp, #12]
 801d4c8:	aa05      	add	r2, sp, #20
 801d4ca:	9202      	str	r2, [sp, #8]
 801d4cc:	00a2      	lsls	r2, r4, #2
 801d4ce:	9201      	str	r2, [sp, #4]
 801d4d0:	9a05      	ldr	r2, [sp, #20]
 801d4d2:	9200      	str	r2, [sp, #0]
 801d4d4:	464a      	mov	r2, r9
 801d4d6:	4641      	mov	r1, r8
 801d4d8:	4638      	mov	r0, r7
 801d4da:	f7ff fa11 	bl	801c900 <lfs_bd_read>
        if (err) {
 801d4de:	4603      	mov	r3, r0
 801d4e0:	2800      	cmp	r0, #0
 801d4e2:	d1cf      	bne.n	801d484 <lfs_ctz_find+0x1a>
        current -= 1 << skip;
 801d4e4:	2301      	movs	r3, #1
 801d4e6:	40a3      	lsls	r3, r4
 801d4e8:	1aed      	subs	r5, r5, r3
 801d4ea:	e7dd      	b.n	801d4a8 <lfs_ctz_find+0x3e>
    *block = head;
 801d4ec:	9b05      	ldr	r3, [sp, #20]
 801d4ee:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d4f0:	6013      	str	r3, [r2, #0]
    *off = pos;
 801d4f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d4f4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d4f6:	6013      	str	r3, [r2, #0]
    return 0;
 801d4f8:	2300      	movs	r3, #0
 801d4fa:	e7c3      	b.n	801d484 <lfs_ctz_find+0x1a>

0801d4fc <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
 801d4fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d500:	b087      	sub	sp, #28
 801d502:	460c      	mov	r4, r1
 801d504:	4617      	mov	r7, r2
    if (file->pos >= file->ctz.size) {
 801d506:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801d508:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801d50a:	4291      	cmp	r1, r2
 801d50c:	d272      	bcs.n	801d5f4 <lfs_file_flushedread+0xf8>
 801d50e:	4680      	mov	r8, r0
    size = lfs_min(size, file->ctz.size - file->pos);
 801d510:	eba2 0901 	sub.w	r9, r2, r1
 801d514:	4599      	cmp	r9, r3
 801d516:	bf28      	it	cs
 801d518:	4699      	movcs	r9, r3
    nsize = size;
 801d51a:	464e      	mov	r6, r9
    while (nsize > 0) {
 801d51c:	e037      	b.n	801d58e <lfs_file_flushedread+0x92>
            if (!(file->flags & LFS_F_INLINE)) {
 801d51e:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801d522:	d041      	beq.n	801d5a8 <lfs_file_flushedread+0xac>
                file->block = LFS_BLOCK_INLINE;
 801d524:	f06f 0301 	mvn.w	r3, #1
 801d528:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801d52a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d52c:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_READING;
 801d52e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801d534:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801d536:	f8d8 3068 	ldr.w	r3, [r8, #104]	@ 0x68
 801d53a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d53c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801d53e:	1a9d      	subs	r5, r3, r2
 801d540:	42b5      	cmp	r5, r6
 801d542:	bf28      	it	cs
 801d544:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
 801d546:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d548:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 801d54c:	d041      	beq.n	801d5d2 <lfs_file_flushedread+0xd6>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801d54e:	88a1      	ldrh	r1, [r4, #4]
 801d550:	0289      	lsls	r1, r1, #10
            int err = lfs_dir_getread(lfs, &file->m,
 801d552:	9505      	str	r5, [sp, #20]
 801d554:	9704      	str	r7, [sp, #16]
 801d556:	9203      	str	r2, [sp, #12]
 801d558:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801d55c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 801d560:	9102      	str	r1, [sp, #8]
 801d562:	4a27      	ldr	r2, [pc, #156]	@ (801d600 <lfs_file_flushedread+0x104>)
 801d564:	9201      	str	r2, [sp, #4]
 801d566:	9300      	str	r3, [sp, #0]
 801d568:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801d56c:	2200      	movs	r2, #0
 801d56e:	f104 0108 	add.w	r1, r4, #8
 801d572:	4640      	mov	r0, r8
 801d574:	f7ff fd9e 	bl	801d0b4 <lfs_dir_getread>
            if (err) {
 801d578:	4603      	mov	r3, r0
 801d57a:	2800      	cmp	r0, #0
 801d57c:	d13b      	bne.n	801d5f6 <lfs_file_flushedread+0xfa>
        file->pos += diff;
 801d57e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d580:	442b      	add	r3, r5
 801d582:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801d584:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801d586:	442b      	add	r3, r5
 801d588:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801d58a:	442f      	add	r7, r5
        nsize -= diff;
 801d58c:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
 801d58e:	2e00      	cmp	r6, #0
 801d590:	d02e      	beq.n	801d5f0 <lfs_file_flushedread+0xf4>
        if (!(file->flags & LFS_F_READING) ||
 801d592:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d594:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801d598:	d0c1      	beq.n	801d51e <lfs_file_flushedread+0x22>
                file->off == lfs->cfg->block_size) {
 801d59a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801d59c:	f8d8 2068 	ldr.w	r2, [r8, #104]	@ 0x68
 801d5a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 801d5a2:	4291      	cmp	r1, r2
 801d5a4:	d1c7      	bne.n	801d536 <lfs_file_flushedread+0x3a>
 801d5a6:	e7ba      	b.n	801d51e <lfs_file_flushedread+0x22>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801d5a8:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801d5ac:	9303      	str	r3, [sp, #12]
 801d5ae:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801d5b2:	9302      	str	r3, [sp, #8]
 801d5b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d5b6:	9301      	str	r3, [sp, #4]
 801d5b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801d5ba:	9300      	str	r3, [sp, #0]
 801d5bc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801d5be:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801d5c2:	2100      	movs	r1, #0
 801d5c4:	4640      	mov	r0, r8
 801d5c6:	f7ff ff50 	bl	801d46a <lfs_ctz_find>
                if (err) {
 801d5ca:	4603      	mov	r3, r0
 801d5cc:	2800      	cmp	r0, #0
 801d5ce:	d0ae      	beq.n	801d52e <lfs_file_flushedread+0x32>
 801d5d0:	e011      	b.n	801d5f6 <lfs_file_flushedread+0xfa>
            int err = lfs_bd_read(lfs,
 801d5d2:	9503      	str	r5, [sp, #12]
 801d5d4:	9702      	str	r7, [sp, #8]
 801d5d6:	9201      	str	r2, [sp, #4]
 801d5d8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801d5da:	9200      	str	r2, [sp, #0]
 801d5dc:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801d5e0:	2100      	movs	r1, #0
 801d5e2:	4640      	mov	r0, r8
 801d5e4:	f7ff f98c 	bl	801c900 <lfs_bd_read>
            if (err) {
 801d5e8:	4603      	mov	r3, r0
 801d5ea:	2800      	cmp	r0, #0
 801d5ec:	d0c7      	beq.n	801d57e <lfs_file_flushedread+0x82>
 801d5ee:	e002      	b.n	801d5f6 <lfs_file_flushedread+0xfa>
    return size;
 801d5f0:	464b      	mov	r3, r9
 801d5f2:	e000      	b.n	801d5f6 <lfs_file_flushedread+0xfa>
        return 0;
 801d5f4:	2300      	movs	r3, #0
}
 801d5f6:	4618      	mov	r0, r3
 801d5f8:	b007      	add	sp, #28
 801d5fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d5fe:	bf00      	nop
 801d600:	fff7fc00 	.word	0xfff7fc00

0801d604 <lfs_bd_crc>:
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 801d604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d608:	b089      	sub	sp, #36	@ 0x24
 801d60a:	4683      	mov	fp, r0
 801d60c:	468a      	mov	sl, r1
 801d60e:	9205      	str	r2, [sp, #20]
 801d610:	4698      	mov	r8, r3
 801d612:	f8dd 904c 	ldr.w	r9, [sp, #76]	@ 0x4c
 801d616:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801d618:	9f15      	ldr	r7, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801d61a:	2400      	movs	r4, #0
 801d61c:	e006      	b.n	801d62c <lfs_bd_crc+0x28>
        *crc = lfs_crc(*crc, &dat, diff);
 801d61e:	462a      	mov	r2, r5
 801d620:	a906      	add	r1, sp, #24
 801d622:	6838      	ldr	r0, [r7, #0]
 801d624:	f003 fd4a 	bl	80210bc <lfs_crc>
 801d628:	6038      	str	r0, [r7, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 801d62a:	442c      	add	r4, r5
 801d62c:	42b4      	cmp	r4, r6
 801d62e:	d216      	bcs.n	801d65e <lfs_bd_crc+0x5a>
        diff = lfs_min(size-i, sizeof(dat));
 801d630:	1b35      	subs	r5, r6, r4
 801d632:	2d08      	cmp	r5, #8
 801d634:	bf28      	it	cs
 801d636:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801d638:	9503      	str	r5, [sp, #12]
 801d63a:	ab06      	add	r3, sp, #24
 801d63c:	9302      	str	r3, [sp, #8]
 801d63e:	eb04 0309 	add.w	r3, r4, r9
 801d642:	9301      	str	r3, [sp, #4]
 801d644:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d646:	9300      	str	r3, [sp, #0]
 801d648:	eba8 0304 	sub.w	r3, r8, r4
 801d64c:	9a05      	ldr	r2, [sp, #20]
 801d64e:	4651      	mov	r1, sl
 801d650:	4658      	mov	r0, fp
 801d652:	f7ff f955 	bl	801c900 <lfs_bd_read>
        if (err) {
 801d656:	4603      	mov	r3, r0
 801d658:	2800      	cmp	r0, #0
 801d65a:	d0e0      	beq.n	801d61e <lfs_bd_crc+0x1a>
 801d65c:	e000      	b.n	801d660 <lfs_bd_crc+0x5c>
    return 0;
 801d65e:	2300      	movs	r3, #0
}
 801d660:	4618      	mov	r0, r3
 801d662:	b009      	add	sp, #36	@ 0x24
 801d664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d668 <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801d668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d66c:	b097      	sub	sp, #92	@ 0x5c
 801d66e:	4605      	mov	r5, r0
 801d670:	460e      	mov	r6, r1
 801d672:	4617      	mov	r7, r2
 801d674:	9305      	str	r3, [sp, #20]
    if (lfs->block_count 
 801d676:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801d678:	b13b      	cbz	r3, 801d68a <lfs_dir_fetchmatch+0x22>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 801d67a:	6812      	ldr	r2, [r2, #0]
 801d67c:	4293      	cmp	r3, r2
 801d67e:	f240 8263 	bls.w	801db48 <lfs_dir_fetchmatch+0x4e0>
 801d682:	687a      	ldr	r2, [r7, #4]
 801d684:	4293      	cmp	r3, r2
 801d686:	f240 8262 	bls.w	801db4e <lfs_dir_fetchmatch+0x4e6>
    uint32_t revs[2] = {0, 0};
 801d68a:	2400      	movs	r4, #0
 801d68c:	9412      	str	r4, [sp, #72]	@ 0x48
 801d68e:	9413      	str	r4, [sp, #76]	@ 0x4c
    for (int i = 0; i < 2; i++) {
 801d690:	46a0      	mov	r8, r4
 801d692:	e010      	b.n	801d6b6 <lfs_dir_fetchmatch+0x4e>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 801d694:	f118 0301 	adds.w	r3, r8, #1
 801d698:	f003 0301 	and.w	r3, r3, #1
 801d69c:	bf48      	it	mi
 801d69e:	425b      	negmi	r3, r3
 801d6a0:	a916      	add	r1, sp, #88	@ 0x58
 801d6a2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d6a6:	f853 3c10 	ldr.w	r3, [r3, #-16]
    return (int)(unsigned)(a - b);
 801d6aa:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
 801d6ac:	2a00      	cmp	r2, #0
 801d6ae:	dd00      	ble.n	801d6b2 <lfs_dir_fetchmatch+0x4a>
            r = i;
 801d6b0:	4644      	mov	r4, r8
    for (int i = 0; i < 2; i++) {
 801d6b2:	f108 0801 	add.w	r8, r8, #1
 801d6b6:	f1b8 0f01 	cmp.w	r8, #1
 801d6ba:	dc1d      	bgt.n	801d6f8 <lfs_dir_fetchmatch+0x90>
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801d6bc:	ea4f 0988 	mov.w	r9, r8, lsl #2
 801d6c0:	ab12      	add	r3, sp, #72	@ 0x48
 801d6c2:	eb03 0288 	add.w	r2, r3, r8, lsl #2
        int err = lfs_bd_read(lfs,
 801d6c6:	2304      	movs	r3, #4
 801d6c8:	9303      	str	r3, [sp, #12]
 801d6ca:	9202      	str	r2, [sp, #8]
 801d6cc:	2100      	movs	r1, #0
 801d6ce:	9101      	str	r1, [sp, #4]
 801d6d0:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 801d6d4:	9200      	str	r2, [sp, #0]
 801d6d6:	462a      	mov	r2, r5
 801d6d8:	4628      	mov	r0, r5
 801d6da:	f7ff f911 	bl	801c900 <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
 801d6de:	f109 0358 	add.w	r3, r9, #88	@ 0x58
 801d6e2:	eb0d 0903 	add.w	r9, sp, r3
 801d6e6:	f859 2c10 	ldr.w	r2, [r9, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
 801d6ea:	4683      	mov	fp, r0
 801d6ec:	2800      	cmp	r0, #0
 801d6ee:	d0d1      	beq.n	801d694 <lfs_dir_fetchmatch+0x2c>
 801d6f0:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d6f4:	d0dd      	beq.n	801d6b2 <lfs_dir_fetchmatch+0x4a>
 801d6f6:	e223      	b.n	801db40 <lfs_dir_fetchmatch+0x4d8>
    dir->pair[0] = pair[(r+0)%2];
 801d6f8:	2c00      	cmp	r4, #0
 801d6fa:	f004 0301 	and.w	r3, r4, #1
 801d6fe:	bfb8      	it	lt
 801d700:	425b      	neglt	r3, r3
 801d702:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 801d706:	6032      	str	r2, [r6, #0]
    dir->pair[1] = pair[(r+1)%2];
 801d708:	f114 0c01 	adds.w	ip, r4, #1
 801d70c:	f00c 0c01 	and.w	ip, ip, #1
 801d710:	bf48      	it	mi
 801d712:	f1cc 0c00 	rsbmi	ip, ip, #0
 801d716:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 801d71a:	6072      	str	r2, [r6, #4]
    dir->rev = revs[(r+0)%2];
 801d71c:	aa16      	add	r2, sp, #88	@ 0x58
 801d71e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d722:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801d726:	60b3      	str	r3, [r6, #8]
    dir->off = 0; // nonzero = found some commits
 801d728:	2400      	movs	r4, #0
 801d72a:	60f4      	str	r4, [r6, #12]
    lfs_stag_t besttag = -1;
 801d72c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801d730:	f8cd c01c 	str.w	ip, [sp, #28]
 801d734:	46a1      	mov	r9, r4
    for (int i = 0; i < 2; i++) {
 801d736:	f1b9 0f01 	cmp.w	r9, #1
 801d73a:	f300 81f4 	bgt.w	801db26 <lfs_dir_fetchmatch+0x4be>
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801d73e:	4a99      	ldr	r2, [pc, #612]	@ (801d9a4 <lfs_dir_fetchmatch+0x33c>)
 801d740:	ab0e      	add	r3, sp, #56	@ 0x38
 801d742:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d746:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 801d74a:	2204      	movs	r2, #4
 801d74c:	f106 0108 	add.w	r1, r6, #8
 801d750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d754:	f003 fcb2 	bl	80210bc <lfs_crc>
 801d758:	900b      	str	r0, [sp, #44]	@ 0x2c
        lfs_stag_t tempbesttag = besttag;
 801d75a:	f8cd b018 	str.w	fp, [sp, #24]
        bool hasfcrc = false;
 801d75e:	2300      	movs	r3, #0
 801d760:	461c      	mov	r4, r3
 801d762:	9308      	str	r3, [sp, #32]
        bool tempsplit = false;
 801d764:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_tag_t ptag = 0xffffffff;
 801d766:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
        lfs_off_t off = 0;
 801d76a:	461f      	mov	r7, r3
 801d76c:	e122      	b.n	801d9b4 <lfs_dir_fetchmatch+0x34c>
                if (err == LFS_ERR_CORRUPT) {
 801d76e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d772:	d101      	bne.n	801d778 <lfs_dir_fetchmatch+0x110>
        bool maybeerased = false;
 801d774:	2300      	movs	r3, #0
 801d776:	e01f      	b.n	801d7b8 <lfs_dir_fetchmatch+0x150>
                return err;
 801d778:	4683      	mov	fp, r0
 801d77a:	e1e1      	b.n	801db40 <lfs_dir_fetchmatch+0x4d8>
    return (tag & 0x78000000) >> 20;
 801d77c:	ea4f 5318 	mov.w	r3, r8, lsr #20
 801d780:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 801d784:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801d788:	bf14      	ite	ne
 801d78a:	2300      	movne	r3, #0
 801d78c:	2301      	moveq	r3, #1
                break;
 801d78e:	e013      	b.n	801d7b8 <lfs_dir_fetchmatch+0x150>
                err = lfs_bd_read(lfs,
 801d790:	2204      	movs	r2, #4
 801d792:	9203      	str	r2, [sp, #12]
 801d794:	aa0d      	add	r2, sp, #52	@ 0x34
 801d796:	9202      	str	r2, [sp, #8]
 801d798:	1d22      	adds	r2, r4, #4
 801d79a:	9201      	str	r2, [sp, #4]
 801d79c:	6832      	ldr	r2, [r6, #0]
 801d79e:	9200      	str	r2, [sp, #0]
 801d7a0:	462a      	mov	r2, r5
 801d7a2:	2100      	movs	r1, #0
 801d7a4:	4628      	mov	r0, r5
 801d7a6:	f7ff f8ab 	bl	801c900 <lfs_bd_read>
                if (err) {
 801d7aa:	2800      	cmp	r0, #0
 801d7ac:	d141      	bne.n	801d832 <lfs_dir_fetchmatch+0x1ca>
                if (crc != dcrc) {
 801d7ae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d7b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d7b2:	429a      	cmp	r2, r3
 801d7b4:	d042      	beq.n	801d83c <lfs_dir_fetchmatch+0x1d4>
        bool maybeerased = false;
 801d7b6:	2300      	movs	r3, #0
        if (dir->off == 0) {
 801d7b8:	68f2      	ldr	r2, [r6, #12]
 801d7ba:	2a00      	cmp	r2, #0
 801d7bc:	f000 8176 	beq.w	801daac <lfs_dir_fetchmatch+0x444>
        dir->erased = false;
 801d7c0:	2100      	movs	r1, #0
 801d7c2:	75b1      	strb	r1, [r6, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 801d7c4:	b153      	cbz	r3, 801d7dc <lfs_dir_fetchmatch+0x174>
 801d7c6:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 801d7c8:	6a01      	ldr	r1, [r0, #32]
 801d7ca:	fbb2 f3f1 	udiv	r3, r2, r1
 801d7ce:	fb01 2313 	mls	r3, r1, r3, r2
 801d7d2:	b91b      	cbnz	r3, 801d7dc <lfs_dir_fetchmatch+0x174>
            if (hasfcrc) {
 801d7d4:	9b08      	ldr	r3, [sp, #32]
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	f040 8176 	bne.w	801dac8 <lfs_dir_fetchmatch+0x460>
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 801d7dc:	4631      	mov	r1, r6
 801d7de:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 801d7e2:	f7fe ff09 	bl	801c5f8 <lfs_gstate_hasmovehere>
 801d7e6:	b168      	cbz	r0, 801d804 <lfs_dir_fetchmatch+0x19c>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801d7e8:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801d7ea:	f3c3 238f 	ubfx	r3, r3, #10, #16
 801d7ee:	f3cb 218f 	ubfx	r1, fp, #10, #16
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801d7f2:	ea81 0203 	eor.w	r2, r1, r3
 801d7f6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801d7fa:	2a00      	cmp	r2, #0
 801d7fc:	f040 8182 	bne.w	801db04 <lfs_dir_fetchmatch+0x49c>
                besttag |= 0x80000000;
 801d800:	f04b 4b00 	orr.w	fp, fp, #2147483648	@ 0x80000000
        if (id) {
 801d804:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d806:	b13b      	cbz	r3, 801d818 <lfs_dir_fetchmatch+0x1b0>
    return (tag & 0x000ffc00) >> 10;
 801d808:	f3cb 2389 	ubfx	r3, fp, #10, #10
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 801d80c:	8ab2      	ldrh	r2, [r6, #20]
    return (a < b) ? a : b;
 801d80e:	4293      	cmp	r3, r2
 801d810:	bf28      	it	cs
 801d812:	4613      	movcs	r3, r2
 801d814:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d816:	8013      	strh	r3, [r2, #0]
        if (lfs_tag_isvalid(besttag)) {
 801d818:	f1bb 0f00 	cmp.w	fp, #0
 801d81c:	f280 8190 	bge.w	801db40 <lfs_dir_fetchmatch+0x4d8>
    return (tag & 0x000ffc00) >> 10;
 801d820:	f3cb 2389 	ubfx	r3, fp, #10, #10
        } else if (lfs_tag_id(besttag) < dir->count) {
 801d824:	8ab2      	ldrh	r2, [r6, #20]
 801d826:	429a      	cmp	r2, r3
 801d828:	f240 817a 	bls.w	801db20 <lfs_dir_fetchmatch+0x4b8>
            return LFS_ERR_NOENT;
 801d82c:	f06f 0b01 	mvn.w	fp, #1
 801d830:	e186      	b.n	801db40 <lfs_dir_fetchmatch+0x4d8>
                    if (err == LFS_ERR_CORRUPT) {
 801d832:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d836:	d0be      	beq.n	801d7b6 <lfs_dir_fetchmatch+0x14e>
                    return err;
 801d838:	4683      	mov	fp, r0
 801d83a:	e181      	b.n	801db40 <lfs_dir_fetchmatch+0x4d8>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 801d83c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d83e:	f3c3 5307 	ubfx	r3, r3, #20, #8
 801d842:	ea8a 78c3 	eor.w	r8, sl, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 801d846:	2204      	movs	r2, #4
 801d848:	a90b      	add	r1, sp, #44	@ 0x2c
 801d84a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801d84c:	f003 fc36 	bl	80210bc <lfs_crc>
 801d850:	62e8      	str	r0, [r5, #44]	@ 0x2c
                dir->off = off + lfs_tag_dsize(tag);
 801d852:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 801d854:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d858:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801d85c:	bf08      	it	eq
 801d85e:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 801d860:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d864:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
 801d866:	4423      	add	r3, r4
 801d868:	60f3      	str	r3, [r6, #12]
                dir->etag = ptag;
 801d86a:	f8c6 8010 	str.w	r8, [r6, #16]
                dir->count = tempcount;
 801d86e:	82b7      	strh	r7, [r6, #20]
                dir->tail[0] = temptail[0];
 801d870:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d872:	61b3      	str	r3, [r6, #24]
                dir->tail[1] = temptail[1];
 801d874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d876:	61f3      	str	r3, [r6, #28]
                dir->split = tempsplit;
 801d878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d87a:	75f3      	strb	r3, [r6, #23]
                crc = 0xffffffff;
 801d87c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d880:	930b      	str	r3, [sp, #44]	@ 0x2c
                besttag = tempbesttag;
 801d882:	f8dd b018 	ldr.w	fp, [sp, #24]
 801d886:	e095      	b.n	801d9b4 <lfs_dir_fetchmatch+0x34c>
                if (err == LFS_ERR_CORRUPT) {
 801d888:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d88c:	d101      	bne.n	801d892 <lfs_dir_fetchmatch+0x22a>
        bool maybeerased = false;
 801d88e:	2300      	movs	r3, #0
 801d890:	e792      	b.n	801d7b8 <lfs_dir_fetchmatch+0x150>
                return err;
 801d892:	4683      	mov	fp, r0
 801d894:	e154      	b.n	801db40 <lfs_dir_fetchmatch+0x4d8>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 801d896:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801d89a:	d021      	beq.n	801d8e0 <lfs_dir_fetchmatch+0x278>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 801d89c:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801d8a0:	d046      	beq.n	801d930 <lfs_dir_fetchmatch+0x2c8>
    return (tag & 0x7ff00000) >> 20;
 801d8a2:	f3c0 020a 	ubfx	r2, r0, #0, #11
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 801d8a6:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 801d8aa:	429a      	cmp	r2, r3
 801d8ac:	f040 80e3 	bne.w	801da76 <lfs_dir_fetchmatch+0x40e>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801d8b0:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801d8b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801d8b4:	2208      	movs	r2, #8
 801d8b6:	9203      	str	r2, [sp, #12]
 801d8b8:	aa10      	add	r2, sp, #64	@ 0x40
 801d8ba:	9202      	str	r2, [sp, #8]
 801d8bc:	f8cd 8004 	str.w	r8, [sp, #4]
 801d8c0:	6832      	ldr	r2, [r6, #0]
 801d8c2:	9200      	str	r2, [sp, #0]
 801d8c4:	462a      	mov	r2, r5
 801d8c6:	2100      	movs	r1, #0
 801d8c8:	4628      	mov	r0, r5
 801d8ca:	f7ff f819 	bl	801c900 <lfs_bd_read>
                if (err) {
 801d8ce:	2800      	cmp	r0, #0
 801d8d0:	d04a      	beq.n	801d968 <lfs_dir_fetchmatch+0x300>
                    if (err == LFS_ERR_CORRUPT) {
 801d8d2:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d8d6:	f000 80e7 	beq.w	801daa8 <lfs_dir_fetchmatch+0x440>
                hasfcrc = true;
 801d8da:	2301      	movs	r3, #1
 801d8dc:	9308      	str	r3, [sp, #32]
 801d8de:	e0ca      	b.n	801da76 <lfs_dir_fetchmatch+0x40e>
    return (int8_t)lfs_tag_chunk(tag);
 801d8e0:	b240      	sxtb	r0, r0
                tempcount += lfs_tag_splice(tag);
 801d8e2:	fa17 f280 	uxtah	r2, r7, r0
 801d8e6:	b297      	uxth	r7, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801d8e8:	9a06      	ldr	r2, [sp, #24]
 801d8ea:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801d8ee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801d8f2:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801d8f6:	f022 0203 	bic.w	r2, r2, #3
 801d8fa:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801d8fe:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
 801d902:	4293      	cmp	r3, r2
 801d904:	d00f      	beq.n	801d926 <lfs_dir_fetchmatch+0x2be>
                } else if (tempbesttag != -1 &&
 801d906:	9906      	ldr	r1, [sp, #24]
 801d908:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
 801d90c:	f000 80b3 	beq.w	801da76 <lfs_dir_fetchmatch+0x40e>
    return (tag & 0x000ffc00) >> 10;
 801d910:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801d914:	f3c1 2289 	ubfx	r2, r1, #10, #10
                } else if (tempbesttag != -1 &&
 801d918:	429a      	cmp	r2, r3
 801d91a:	f0c0 80ac 	bcc.w	801da76 <lfs_dir_fetchmatch+0x40e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801d91e:	eb01 2380 	add.w	r3, r1, r0, lsl #10
 801d922:	9306      	str	r3, [sp, #24]
 801d924:	e0a7      	b.n	801da76 <lfs_dir_fetchmatch+0x40e>
                    tempbesttag |= 0x80000000;
 801d926:	9b06      	ldr	r3, [sp, #24]
 801d928:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801d92c:	9306      	str	r3, [sp, #24]
 801d92e:	e0a2      	b.n	801da76 <lfs_dir_fetchmatch+0x40e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 801d930:	f000 0301 	and.w	r3, r0, #1
 801d934:	9309      	str	r3, [sp, #36]	@ 0x24
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801d936:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801d938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801d93a:	2208      	movs	r2, #8
 801d93c:	9203      	str	r2, [sp, #12]
 801d93e:	aa0e      	add	r2, sp, #56	@ 0x38
 801d940:	9202      	str	r2, [sp, #8]
 801d942:	f8cd 8004 	str.w	r8, [sp, #4]
 801d946:	6832      	ldr	r2, [r6, #0]
 801d948:	9200      	str	r2, [sp, #0]
 801d94a:	462a      	mov	r2, r5
 801d94c:	2100      	movs	r1, #0
 801d94e:	4628      	mov	r0, r5
 801d950:	f7fe ffd6 	bl	801c900 <lfs_bd_read>
                if (err) {
 801d954:	2800      	cmp	r0, #0
 801d956:	f000 808e 	beq.w	801da76 <lfs_dir_fetchmatch+0x40e>
                    if (err == LFS_ERR_CORRUPT) {
 801d95a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d95e:	d101      	bne.n	801d964 <lfs_dir_fetchmatch+0x2fc>
        bool maybeerased = false;
 801d960:	2300      	movs	r3, #0
 801d962:	e729      	b.n	801d7b8 <lfs_dir_fetchmatch+0x150>
                    return err;
 801d964:	4683      	mov	fp, r0
 801d966:	e0eb      	b.n	801db40 <lfs_dir_fetchmatch+0x4d8>
                hasfcrc = true;
 801d968:	2301      	movs	r3, #1
 801d96a:	9308      	str	r3, [sp, #32]
 801d96c:	e083      	b.n	801da76 <lfs_dir_fetchmatch+0x40e>
                    if (res == LFS_ERR_CORRUPT) {
 801d96e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d972:	d101      	bne.n	801d978 <lfs_dir_fetchmatch+0x310>
        bool maybeerased = false;
 801d974:	2300      	movs	r3, #0
 801d976:	e71f      	b.n	801d7b8 <lfs_dir_fetchmatch+0x150>
                    return res;
 801d978:	4683      	mov	fp, r0
 801d97a:	e0e1      	b.n	801db40 <lfs_dir_fetchmatch+0x4d8>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 801d97c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d97e:	9b06      	ldr	r3, [sp, #24]
 801d980:	469c      	mov	ip, r3
 801d982:	ea82 0103 	eor.w	r1, r2, r3
 801d986:	4b08      	ldr	r3, [pc, #32]	@ (801d9a8 <lfs_dir_fetchmatch+0x340>)
 801d988:	400b      	ands	r3, r1
 801d98a:	b17b      	cbz	r3, 801d9ac <lfs_dir_fetchmatch+0x344>
                } else if (res == LFS_CMP_GT &&
 801d98c:	2802      	cmp	r0, #2
 801d98e:	d110      	bne.n	801d9b2 <lfs_dir_fetchmatch+0x34a>
    return (tag & 0x000ffc00) >> 10;
 801d990:	f3c2 2389 	ubfx	r3, r2, #10, #10
 801d994:	f3cc 2c89 	ubfx	ip, ip, #10, #10
                } else if (res == LFS_CMP_GT &&
 801d998:	459c      	cmp	ip, r3
 801d99a:	d30a      	bcc.n	801d9b2 <lfs_dir_fetchmatch+0x34a>
                    tempbesttag = tag | 0x80000000;
 801d99c:	f042 4300 	orr.w	r3, r2, #2147483648	@ 0x80000000
 801d9a0:	9306      	str	r3, [sp, #24]
 801d9a2:	e006      	b.n	801d9b2 <lfs_dir_fetchmatch+0x34a>
 801d9a4:	080378bc 	.word	0x080378bc
 801d9a8:	7ffffc00 	.word	0x7ffffc00
                    tempbesttag = -1;
 801d9ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d9b0:	9306      	str	r3, [sp, #24]
            ptag = tag;
 801d9b2:	46d0      	mov	r8, sl
    return ((int32_t)(tag << 22) >> 22) == -1;
 801d9b4:	f348 0209 	sbfx	r2, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d9b8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801d9bc:	bf14      	ite	ne
 801d9be:	4643      	movne	r3, r8
 801d9c0:	f108 0301 	addeq.w	r3, r8, #1
    return tag & 0x000003ff;
 801d9c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d9c8:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
 801d9ca:	441c      	add	r4, r3
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 801d9cc:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801d9ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 801d9d0:	2204      	movs	r2, #4
 801d9d2:	9203      	str	r2, [sp, #12]
 801d9d4:	aa0c      	add	r2, sp, #48	@ 0x30
 801d9d6:	9202      	str	r2, [sp, #8]
 801d9d8:	9401      	str	r4, [sp, #4]
 801d9da:	6832      	ldr	r2, [r6, #0]
 801d9dc:	9200      	str	r2, [sp, #0]
 801d9de:	462a      	mov	r2, r5
 801d9e0:	2100      	movs	r1, #0
 801d9e2:	4628      	mov	r0, r5
 801d9e4:	f7fe ff8c 	bl	801c900 <lfs_bd_read>
            if (err) {
 801d9e8:	2800      	cmp	r0, #0
 801d9ea:	f47f aec0 	bne.w	801d76e <lfs_dir_fetchmatch+0x106>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 801d9ee:	2204      	movs	r2, #4
 801d9f0:	a90c      	add	r1, sp, #48	@ 0x30
 801d9f2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801d9f4:	f003 fb62 	bl	80210bc <lfs_crc>
 801d9f8:	900b      	str	r0, [sp, #44]	@ 0x2c
            tag = lfs_frombe32(tag) ^ ptag;
 801d9fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return __builtin_bswap32(a);
 801d9fc:	ba1b      	rev	r3, r3
 801d9fe:	ea88 0a03 	eor.w	sl, r8, r3
 801da02:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
            if (!lfs_tag_isvalid(tag)) {
 801da06:	f1ba 0f00 	cmp.w	sl, #0
 801da0a:	f6ff aeb7 	blt.w	801d77c <lfs_dir_fetchmatch+0x114>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801da0e:	f34a 0309 	sbfx	r3, sl, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801da12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801da16:	bf14      	ite	ne
 801da18:	4652      	movne	r2, sl
 801da1a:	f10a 0201 	addeq.w	r2, sl, #1
    return tag & 0x000003ff;
 801da1e:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801da22:	1d11      	adds	r1, r2, #4
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 801da24:	4421      	add	r1, r4
 801da26:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801da28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801da2a:	4299      	cmp	r1, r3
 801da2c:	d83a      	bhi.n	801daa4 <lfs_dir_fetchmatch+0x43c>
    return (tag & 0x78000000) >> 20;
 801da2e:	ea4f 511a 	mov.w	r1, sl, lsr #20
 801da32:	f401 61f0 	and.w	r1, r1, #1920	@ 0x780
            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 801da36:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 801da3a:	f43f aea9 	beq.w	801d790 <lfs_dir_fetchmatch+0x128>
            err = lfs_bd_crc(lfs,
 801da3e:	f104 0804 	add.w	r8, r4, #4
 801da42:	a90b      	add	r1, sp, #44	@ 0x2c
 801da44:	9103      	str	r1, [sp, #12]
 801da46:	9202      	str	r2, [sp, #8]
 801da48:	f8cd 8004 	str.w	r8, [sp, #4]
 801da4c:	6832      	ldr	r2, [r6, #0]
 801da4e:	9200      	str	r2, [sp, #0]
 801da50:	462a      	mov	r2, r5
 801da52:	2100      	movs	r1, #0
 801da54:	4628      	mov	r0, r5
 801da56:	f7ff fdd5 	bl	801d604 <lfs_bd_crc>
            if (err) {
 801da5a:	2800      	cmp	r0, #0
 801da5c:	f47f af14 	bne.w	801d888 <lfs_dir_fetchmatch+0x220>
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801da60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801da62:	0d18      	lsrs	r0, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801da64:	f410 61e0 	ands.w	r1, r0, #1792	@ 0x700
 801da68:	f47f af15 	bne.w	801d896 <lfs_dir_fetchmatch+0x22e>
    return (tag & 0x000ffc00) >> 10;
 801da6c:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 801da70:	429f      	cmp	r7, r3
 801da72:	d800      	bhi.n	801da76 <lfs_dir_fetchmatch+0x40e>
                    tempcount = lfs_tag_id(tag) + 1;
 801da74:	1c5f      	adds	r7, r3, #1
            if ((fmask & tag) == (fmask & ftag)) {
 801da76:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801da78:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801da7a:	404b      	eors	r3, r1
 801da7c:	9a05      	ldr	r2, [sp, #20]
 801da7e:	4213      	tst	r3, r2
 801da80:	d197      	bne.n	801d9b2 <lfs_dir_fetchmatch+0x34a>
                        dir->pair[0], off+sizeof(tag)});
 801da82:	6833      	ldr	r3, [r6, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 801da84:	9314      	str	r3, [sp, #80]	@ 0x50
 801da86:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 801da8a:	aa14      	add	r2, sp, #80	@ 0x50
 801da8c:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801da8e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801da90:	4798      	blx	r3
                if (res < 0) {
 801da92:	2800      	cmp	r0, #0
 801da94:	f6ff af6b 	blt.w	801d96e <lfs_dir_fetchmatch+0x306>
                if (res == LFS_CMP_EQ) {
 801da98:	2800      	cmp	r0, #0
 801da9a:	f47f af6f 	bne.w	801d97c <lfs_dir_fetchmatch+0x314>
                    tempbesttag = tag;
 801da9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801daa0:	9306      	str	r3, [sp, #24]
 801daa2:	e786      	b.n	801d9b2 <lfs_dir_fetchmatch+0x34a>
        bool maybeerased = false;
 801daa4:	2300      	movs	r3, #0
 801daa6:	e687      	b.n	801d7b8 <lfs_dir_fetchmatch+0x150>
 801daa8:	2300      	movs	r3, #0
 801daaa:	e685      	b.n	801d7b8 <lfs_dir_fetchmatch+0x150>
    lfs_block_t t = pair[0];
 801daac:	6833      	ldr	r3, [r6, #0]
    pair[0] = pair[1];
 801daae:	6872      	ldr	r2, [r6, #4]
 801dab0:	6032      	str	r2, [r6, #0]
    pair[1] = t;
 801dab2:	6073      	str	r3, [r6, #4]
            dir->rev = revs[(r+1)%2];
 801dab4:	aa16      	add	r2, sp, #88	@ 0x58
 801dab6:	9b07      	ldr	r3, [sp, #28]
 801dab8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801dabc:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801dac0:	60b3      	str	r3, [r6, #8]
    for (int i = 0; i < 2; i++) {
 801dac2:	f109 0901 	add.w	r9, r9, #1
 801dac6:	e636      	b.n	801d736 <lfs_dir_fetchmatch+0xce>
                uint32_t fcrc_ = 0xffffffff;
 801dac8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dacc:	930d      	str	r3, [sp, #52]	@ 0x34
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801dace:	6a43      	ldr	r3, [r0, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 801dad0:	a90d      	add	r1, sp, #52	@ 0x34
 801dad2:	9103      	str	r1, [sp, #12]
 801dad4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801dad6:	9102      	str	r1, [sp, #8]
 801dad8:	9201      	str	r2, [sp, #4]
 801dada:	6832      	ldr	r2, [r6, #0]
 801dadc:	9200      	str	r2, [sp, #0]
 801dade:	462a      	mov	r2, r5
 801dae0:	2100      	movs	r1, #0
 801dae2:	4628      	mov	r0, r5
 801dae4:	f7ff fd8e 	bl	801d604 <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801dae8:	b120      	cbz	r0, 801daf4 <lfs_dir_fetchmatch+0x48c>
 801daea:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801daee:	d001      	beq.n	801daf4 <lfs_dir_fetchmatch+0x48c>
                    return err;
 801daf0:	4683      	mov	fp, r0
 801daf2:	e025      	b.n	801db40 <lfs_dir_fetchmatch+0x4d8>
                dir->erased = (fcrc_ == fcrc.crc);
 801daf4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801daf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801daf8:	4293      	cmp	r3, r2
 801dafa:	bf14      	ite	ne
 801dafc:	2300      	movne	r3, #0
 801dafe:	2301      	moveq	r3, #1
 801db00:	75b3      	strb	r3, [r6, #22]
 801db02:	e66b      	b.n	801d7dc <lfs_dir_fetchmatch+0x174>
            } else if (besttag != -1 &&
 801db04:	f1bb 3fff 	cmp.w	fp, #4294967295	@ 0xffffffff
 801db08:	f43f ae7c 	beq.w	801d804 <lfs_dir_fetchmatch+0x19c>
    return (tag & 0x000ffc00) >> 10;
 801db0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801db10:	f3c1 0109 	ubfx	r1, r1, #0, #10
            } else if (besttag != -1 &&
 801db14:	4299      	cmp	r1, r3
 801db16:	f67f ae75 	bls.w	801d804 <lfs_dir_fetchmatch+0x19c>
                besttag -= LFS_MKTAG(0, 1, 0);
 801db1a:	f5ab 6b80 	sub.w	fp, fp, #1024	@ 0x400
 801db1e:	e671      	b.n	801d804 <lfs_dir_fetchmatch+0x19c>
            return 0;
 801db20:	f04f 0b00 	mov.w	fp, #0
 801db24:	e00c      	b.n	801db40 <lfs_dir_fetchmatch+0x4d8>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 801db26:	4b0b      	ldr	r3, [pc, #44]	@ (801db54 <lfs_dir_fetchmatch+0x4ec>)
 801db28:	9301      	str	r3, [sp, #4]
 801db2a:	6873      	ldr	r3, [r6, #4]
 801db2c:	9300      	str	r3, [sp, #0]
 801db2e:	6833      	ldr	r3, [r6, #0]
 801db30:	f240 5259 	movw	r2, #1369	@ 0x559
 801db34:	4908      	ldr	r1, [pc, #32]	@ (801db58 <lfs_dir_fetchmatch+0x4f0>)
 801db36:	4809      	ldr	r0, [pc, #36]	@ (801db5c <lfs_dir_fetchmatch+0x4f4>)
 801db38:	f00e fa8a 	bl	802c050 <printf>
    return LFS_ERR_CORRUPT;
 801db3c:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
}
 801db40:	4658      	mov	r0, fp
 801db42:	b017      	add	sp, #92	@ 0x5c
 801db44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801db48:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801db4c:	e7f8      	b.n	801db40 <lfs_dir_fetchmatch+0x4d8>
 801db4e:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801db52:	e7f5      	b.n	801db40 <lfs_dir_fetchmatch+0x4d8>
 801db54:	08038678 	.word	0x08038678
 801db58:	0803a198 	.word	0x0803a198
 801db5c:	0803a320 	.word	0x0803a320

0801db60 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 801db60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db64:	b08b      	sub	sp, #44	@ 0x2c
 801db66:	4607      	mov	r7, r0
 801db68:	460e      	mov	r6, r1
 801db6a:	4614      	mov	r4, r2
    parent->tail[0] = 0;
 801db6c:	2300      	movs	r3, #0
 801db6e:	6193      	str	r3, [r2, #24]
    parent->tail[1] = 1;
 801db70:	2501      	movs	r5, #1
 801db72:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801db74:	4926      	ldr	r1, [pc, #152]	@ (801dc10 <lfs_fs_parent+0xb0>)
 801db76:	aa05      	add	r2, sp, #20
 801db78:	c903      	ldmia	r1, {r0, r1}
 801db7a:	e882 0003 	stmia.w	r2, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801db7e:	46a9      	mov	r9, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801db80:	f8d4 8018 	ldr.w	r8, [r4, #24]
 801db84:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 801db88:	d039      	beq.n	801dbfe <lfs_fs_parent+0x9e>
 801db8a:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 801db8e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801db92:	d039      	beq.n	801dc08 <lfs_fs_parent+0xa8>
        if (lfs_pair_issync(parent->tail, tortoise)) {
 801db94:	f104 0b18 	add.w	fp, r4, #24
 801db98:	a905      	add	r1, sp, #20
 801db9a:	4658      	mov	r0, fp
 801db9c:	f7fe fcf6 	bl	801c58c <lfs_pair_issync>
 801dba0:	b9d8      	cbnz	r0, 801dbda <lfs_fs_parent+0x7a>
        if (tortoise_i == tortoise_period) {
 801dba2:	454d      	cmp	r5, r9
 801dba4:	d023      	beq.n	801dbee <lfs_fs_parent+0x8e>
        tortoise_i += 1;
 801dba6:	3501      	adds	r5, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801dba8:	9707      	str	r7, [sp, #28]
                    lfs, {pair[0], pair[1]}});
 801dbaa:	6833      	ldr	r3, [r6, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801dbac:	9308      	str	r3, [sp, #32]
                    lfs, {pair[0], pair[1]}});
 801dbae:	6873      	ldr	r3, [r6, #4]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801dbb0:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 801dbb2:	ab07      	add	r3, sp, #28
 801dbb4:	9303      	str	r3, [sp, #12]
 801dbb6:	4b17      	ldr	r3, [pc, #92]	@ (801dc14 <lfs_fs_parent+0xb4>)
 801dbb8:	9302      	str	r3, [sp, #8]
 801dbba:	2300      	movs	r3, #0
 801dbbc:	9301      	str	r3, [sp, #4]
 801dbbe:	4b16      	ldr	r3, [pc, #88]	@ (801dc18 <lfs_fs_parent+0xb8>)
 801dbc0:	9300      	str	r3, [sp, #0]
 801dbc2:	4b16      	ldr	r3, [pc, #88]	@ (801dc1c <lfs_fs_parent+0xbc>)
 801dbc4:	465a      	mov	r2, fp
 801dbc6:	4621      	mov	r1, r4
 801dbc8:	4638      	mov	r0, r7
 801dbca:	f7ff fd4d 	bl	801d668 <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 801dbce:	2800      	cmp	r0, #0
 801dbd0:	d0d6      	beq.n	801db80 <lfs_fs_parent+0x20>
 801dbd2:	f110 0f02 	cmn.w	r0, #2
 801dbd6:	d0d3      	beq.n	801db80 <lfs_fs_parent+0x20>
 801dbd8:	e013      	b.n	801dc02 <lfs_fs_parent+0xa2>
            LFS_WARN("Cycle detected in tail list");
 801dbda:	4b11      	ldr	r3, [pc, #68]	@ (801dc20 <lfs_fs_parent+0xc0>)
 801dbdc:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 801dbe0:	4910      	ldr	r1, [pc, #64]	@ (801dc24 <lfs_fs_parent+0xc4>)
 801dbe2:	4811      	ldr	r0, [pc, #68]	@ (801dc28 <lfs_fs_parent+0xc8>)
 801dbe4:	f00e fa34 	bl	802c050 <printf>
            return LFS_ERR_CORRUPT;
 801dbe8:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801dbec:	e009      	b.n	801dc02 <lfs_fs_parent+0xa2>
            tortoise[0] = parent->tail[0];
 801dbee:	f8cd 8014 	str.w	r8, [sp, #20]
            tortoise[1] = parent->tail[1];
 801dbf2:	f8cd a018 	str.w	sl, [sp, #24]
            tortoise_period *= 2;
 801dbf6:	ea4f 0949 	mov.w	r9, r9, lsl #1
            tortoise_i = 0;
 801dbfa:	2500      	movs	r5, #0
 801dbfc:	e7d3      	b.n	801dba6 <lfs_fs_parent+0x46>
    return LFS_ERR_NOENT;
 801dbfe:	f06f 0001 	mvn.w	r0, #1
}
 801dc02:	b00b      	add	sp, #44	@ 0x2c
 801dc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return LFS_ERR_NOENT;
 801dc08:	f06f 0001 	mvn.w	r0, #1
 801dc0c:	e7f9      	b.n	801dc02 <lfs_fs_parent+0xa2>
 801dc0e:	bf00      	nop
 801dc10:	080378bc 	.word	0x080378bc
 801dc14:	0801cd39 	.word	0x0801cd39
 801dc18:	20000008 	.word	0x20000008
 801dc1c:	7ff003ff 	.word	0x7ff003ff
 801dc20:	08038678 	.word	0x08038678
 801dc24:	0803a198 	.word	0x0803a198
 801dc28:	0803a358 	.word	0x0803a358

0801dc2c <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 801dc2c:	b500      	push	{lr}
 801dc2e:	b085      	sub	sp, #20
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 801dc30:	2300      	movs	r3, #0
 801dc32:	9303      	str	r3, [sp, #12]
 801dc34:	9302      	str	r3, [sp, #8]
 801dc36:	9301      	str	r3, [sp, #4]
 801dc38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dc3c:	9300      	str	r3, [sp, #0]
 801dc3e:	f7ff fd13 	bl	801d668 <lfs_dir_fetchmatch>
}
 801dc42:	b005      	add	sp, #20
 801dc44:	f85d fb04 	ldr.w	pc, [sp], #4

0801dc48 <lfs_fs_traverse_>:
        bool includeorphans) {
 801dc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc4c:	b093      	sub	sp, #76	@ 0x4c
 801dc4e:	4604      	mov	r4, r0
 801dc50:	460d      	mov	r5, r1
 801dc52:	4616      	mov	r6, r2
 801dc54:	4699      	mov	r9, r3
    lfs_mdir_t dir = {.tail = {0, 1}};
 801dc56:	2220      	movs	r2, #32
 801dc58:	2100      	movs	r1, #0
 801dc5a:	a80a      	add	r0, sp, #40	@ 0x28
 801dc5c:	f00e fdd0 	bl	802c800 <memset>
 801dc60:	2301      	movs	r3, #1
 801dc62:	9311      	str	r3, [sp, #68]	@ 0x44
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801dc64:	495e      	ldr	r1, [pc, #376]	@ (801dde0 <lfs_fs_traverse_+0x198>)
 801dc66:	aa08      	add	r2, sp, #32
 801dc68:	c903      	ldmia	r1, {r0, r1}
 801dc6a:	e882 0003 	stmia.w	r2, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801dc6e:	469a      	mov	sl, r3
    lfs_size_t tortoise_i = 1;
 801dc70:	4698      	mov	r8, r3
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801dc72:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801dc74:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801dc78:	d07b      	beq.n	801dd72 <lfs_fs_traverse_+0x12a>
 801dc7a:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 801dc7e:	f1bb 3fff 	cmp.w	fp, #4294967295	@ 0xffffffff
 801dc82:	d076      	beq.n	801dd72 <lfs_fs_traverse_+0x12a>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801dc84:	a908      	add	r1, sp, #32
 801dc86:	a810      	add	r0, sp, #64	@ 0x40
 801dc88:	f7fe fc80 	bl	801c58c <lfs_pair_issync>
 801dc8c:	b9a0      	cbnz	r0, 801dcb8 <lfs_fs_traverse_+0x70>
        if (tortoise_i == tortoise_period) {
 801dc8e:	45d0      	cmp	r8, sl
 801dc90:	d01c      	beq.n	801dccc <lfs_fs_traverse_+0x84>
        tortoise_i += 1;
 801dc92:	f108 0801 	add.w	r8, r8, #1
        for (int i = 0; i < 2; i++) {
 801dc96:	2700      	movs	r7, #0
 801dc98:	2f01      	cmp	r7, #1
 801dc9a:	dc1f      	bgt.n	801dcdc <lfs_fs_traverse_+0x94>
            int err = cb(data, dir.tail[i]);
 801dc9c:	1dbb      	adds	r3, r7, #6
 801dc9e:	aa12      	add	r2, sp, #72	@ 0x48
 801dca0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801dca4:	f853 1c20 	ldr.w	r1, [r3, #-32]
 801dca8:	4630      	mov	r0, r6
 801dcaa:	47a8      	blx	r5
            if (err) {
 801dcac:	4603      	mov	r3, r0
 801dcae:	2800      	cmp	r0, #0
 801dcb0:	f040 8090 	bne.w	801ddd4 <lfs_fs_traverse_+0x18c>
        for (int i = 0; i < 2; i++) {
 801dcb4:	3701      	adds	r7, #1
 801dcb6:	e7ef      	b.n	801dc98 <lfs_fs_traverse_+0x50>
            LFS_WARN("Cycle detected in tail list");
 801dcb8:	4b4a      	ldr	r3, [pc, #296]	@ (801dde4 <lfs_fs_traverse_+0x19c>)
 801dcba:	f241 2222 	movw	r2, #4642	@ 0x1222
 801dcbe:	494a      	ldr	r1, [pc, #296]	@ (801dde8 <lfs_fs_traverse_+0x1a0>)
 801dcc0:	484a      	ldr	r0, [pc, #296]	@ (801ddec <lfs_fs_traverse_+0x1a4>)
 801dcc2:	f00e f9c5 	bl	802c050 <printf>
            return LFS_ERR_CORRUPT;
 801dcc6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801dcca:	e083      	b.n	801ddd4 <lfs_fs_traverse_+0x18c>
            tortoise[0] = dir.tail[0];
 801dccc:	9708      	str	r7, [sp, #32]
            tortoise[1] = dir.tail[1];
 801dcce:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
            tortoise_period *= 2;
 801dcd2:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801dcd6:	f04f 0800 	mov.w	r8, #0
 801dcda:	e7da      	b.n	801dc92 <lfs_fs_traverse_+0x4a>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 801dcdc:	aa10      	add	r2, sp, #64	@ 0x40
 801dcde:	a90a      	add	r1, sp, #40	@ 0x28
 801dce0:	4620      	mov	r0, r4
 801dce2:	f7ff ffa3 	bl	801dc2c <lfs_dir_fetch>
        if (err) {
 801dce6:	9005      	str	r0, [sp, #20]
 801dce8:	2800      	cmp	r0, #0
 801dcea:	d177      	bne.n	801dddc <lfs_fs_traverse_+0x194>
        for (uint16_t id = 0; id < dir.count; id++) {
 801dcec:	2700      	movs	r7, #0
 801dcee:	e004      	b.n	801dcfa <lfs_fs_traverse_+0xb2>
                if (tag == LFS_ERR_NOENT) {
 801dcf0:	f113 0f02 	cmn.w	r3, #2
 801dcf4:	d16e      	bne.n	801ddd4 <lfs_fs_traverse_+0x18c>
        for (uint16_t id = 0; id < dir.count; id++) {
 801dcf6:	3701      	adds	r7, #1
 801dcf8:	b2bf      	uxth	r7, r7
 801dcfa:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801dcfe:	42bb      	cmp	r3, r7
 801dd00:	d9b7      	bls.n	801dc72 <lfs_fs_traverse_+0x2a>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 801dd02:	02bb      	lsls	r3, r7, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801dd04:	aa06      	add	r2, sp, #24
 801dd06:	9200      	str	r2, [sp, #0]
 801dd08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801dd0c:	f043 0308 	orr.w	r3, r3, #8
 801dd10:	4a37      	ldr	r2, [pc, #220]	@ (801ddf0 <lfs_fs_traverse_+0x1a8>)
 801dd12:	a90a      	add	r1, sp, #40	@ 0x28
 801dd14:	4620      	mov	r0, r4
 801dd16:	f7fe ff99 	bl	801cc4c <lfs_dir_get>
            if (tag < 0) {
 801dd1a:	1e03      	subs	r3, r0, #0
 801dd1c:	dbe8      	blt.n	801dcf0 <lfs_fs_traverse_+0xa8>
    return (tag & 0x7ff00000) >> 20;
 801dd1e:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801dd22:	f240 2202 	movw	r2, #514	@ 0x202
 801dd26:	4293      	cmp	r3, r2
 801dd28:	d015      	beq.n	801dd56 <lfs_fs_traverse_+0x10e>
            } else if (includeorphans &&
 801dd2a:	f1b9 0f00 	cmp.w	r9, #0
 801dd2e:	d0e2      	beq.n	801dcf6 <lfs_fs_traverse_+0xae>
 801dd30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dd34:	d1df      	bne.n	801dcf6 <lfs_fs_traverse_+0xae>
                for (int i = 0; i < 2; i++) {
 801dd36:	f8dd b014 	ldr.w	fp, [sp, #20]
 801dd3a:	f1bb 0f01 	cmp.w	fp, #1
 801dd3e:	dcda      	bgt.n	801dcf6 <lfs_fs_traverse_+0xae>
                    err = cb(data, (&ctz.head)[i]);
 801dd40:	ab06      	add	r3, sp, #24
 801dd42:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 801dd46:	4630      	mov	r0, r6
 801dd48:	47a8      	blx	r5
                    if (err) {
 801dd4a:	4603      	mov	r3, r0
 801dd4c:	2800      	cmp	r0, #0
 801dd4e:	d141      	bne.n	801ddd4 <lfs_fs_traverse_+0x18c>
                for (int i = 0; i < 2; i++) {
 801dd50:	f10b 0b01 	add.w	fp, fp, #1
 801dd54:	e7f1      	b.n	801dd3a <lfs_fs_traverse_+0xf2>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 801dd56:	9602      	str	r6, [sp, #8]
 801dd58:	9501      	str	r5, [sp, #4]
 801dd5a:	9b07      	ldr	r3, [sp, #28]
 801dd5c:	9300      	str	r3, [sp, #0]
 801dd5e:	9b06      	ldr	r3, [sp, #24]
 801dd60:	4622      	mov	r2, r4
 801dd62:	2100      	movs	r1, #0
 801dd64:	4620      	mov	r0, r4
 801dd66:	f7fe ff9b 	bl	801cca0 <lfs_ctz_traverse>
                if (err) {
 801dd6a:	4603      	mov	r3, r0
 801dd6c:	2800      	cmp	r0, #0
 801dd6e:	d0c2      	beq.n	801dcf6 <lfs_fs_traverse_+0xae>
 801dd70:	e030      	b.n	801ddd4 <lfs_fs_traverse_+0x18c>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801dd72:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 801dd74:	e00e      	b.n	801dd94 <lfs_fs_traverse_+0x14c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801dd76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd78:	9602      	str	r6, [sp, #8]
 801dd7a:	9501      	str	r5, [sp, #4]
 801dd7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801dd7e:	9200      	str	r2, [sp, #0]
 801dd80:	4622      	mov	r2, r4
 801dd82:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801dd86:	4620      	mov	r0, r4
 801dd88:	f7fe ff8a 	bl	801cca0 <lfs_ctz_traverse>
            if (err) {
 801dd8c:	4603      	mov	r3, r0
 801dd8e:	b158      	cbz	r0, 801dda8 <lfs_fs_traverse_+0x160>
 801dd90:	e020      	b.n	801ddd4 <lfs_fs_traverse_+0x18c>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801dd92:	683f      	ldr	r7, [r7, #0]
 801dd94:	b1ef      	cbz	r7, 801ddd2 <lfs_fs_traverse_+0x18a>
        if (f->type != LFS_TYPE_REG) {
 801dd96:	79bb      	ldrb	r3, [r7, #6]
 801dd98:	2b01      	cmp	r3, #1
 801dd9a:	d1fa      	bne.n	801dd92 <lfs_fs_traverse_+0x14a>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 801dd9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dd9e:	f403 1388 	and.w	r3, r3, #1114112	@ 0x110000
 801dda2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801dda6:	d0e6      	beq.n	801dd76 <lfs_fs_traverse_+0x12e>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 801dda8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ddaa:	f403 1390 	and.w	r3, r3, #1179648	@ 0x120000
 801ddae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ddb2:	d1ee      	bne.n	801dd92 <lfs_fs_traverse_+0x14a>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801ddb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ddb6:	9602      	str	r6, [sp, #8]
 801ddb8:	9501      	str	r5, [sp, #4]
 801ddba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ddbc:	9200      	str	r2, [sp, #0]
 801ddbe:	4622      	mov	r2, r4
 801ddc0:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801ddc4:	4620      	mov	r0, r4
 801ddc6:	f7fe ff6b 	bl	801cca0 <lfs_ctz_traverse>
            if (err) {
 801ddca:	4603      	mov	r3, r0
 801ddcc:	2800      	cmp	r0, #0
 801ddce:	d0e0      	beq.n	801dd92 <lfs_fs_traverse_+0x14a>
 801ddd0:	e000      	b.n	801ddd4 <lfs_fs_traverse_+0x18c>
    return 0;
 801ddd2:	2300      	movs	r3, #0
}
 801ddd4:	4618      	mov	r0, r3
 801ddd6:	b013      	add	sp, #76	@ 0x4c
 801ddd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return err;
 801dddc:	9b05      	ldr	r3, [sp, #20]
 801ddde:	e7f9      	b.n	801ddd4 <lfs_fs_traverse_+0x18c>
 801dde0:	080378bc 	.word	0x080378bc
 801dde4:	08038678 	.word	0x08038678
 801dde8:	0803a198 	.word	0x0803a198
 801ddec:	0803a358 	.word	0x0803a358
 801ddf0:	700ffc00 	.word	0x700ffc00

0801ddf4 <lfs_alloc_scan>:
static int lfs_alloc_scan(lfs_t *lfs) {
 801ddf4:	b538      	push	{r3, r4, r5, lr}
 801ddf6:	4604      	mov	r4, r0
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801ddf8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801ddfa:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 801ddfc:	4413      	add	r3, r2
            % lfs->block_count;
 801ddfe:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 801de00:	fbb3 f1f2 	udiv	r1, r3, r2
 801de04:	fb02 3311 	mls	r3, r2, r1, r3
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801de08:	6543      	str	r3, [r0, #84]	@ 0x54
    lfs->lookahead.next = 0;
 801de0a:	2100      	movs	r1, #0
 801de0c:	65c1      	str	r1, [r0, #92]	@ 0x5c
            8*lfs->cfg->lookahead_size,
 801de0e:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801de10:	6b53      	ldr	r3, [r2, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 801de12:	00db      	lsls	r3, r3, #3
 801de14:	6e00      	ldr	r0, [r0, #96]	@ 0x60
    return (a < b) ? a : b;
 801de16:	4283      	cmp	r3, r0
 801de18:	bf28      	it	cs
 801de1a:	4603      	movcs	r3, r0
 801de1c:	65a3      	str	r3, [r4, #88]	@ 0x58
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801de1e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801de20:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801de22:	f00e fced 	bl	802c800 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 801de26:	2301      	movs	r3, #1
 801de28:	4622      	mov	r2, r4
 801de2a:	4906      	ldr	r1, [pc, #24]	@ (801de44 <lfs_alloc_scan+0x50>)
 801de2c:	4620      	mov	r0, r4
 801de2e:	f7ff ff0b 	bl	801dc48 <lfs_fs_traverse_>
    if (err) {
 801de32:	4605      	mov	r5, r0
 801de34:	b908      	cbnz	r0, 801de3a <lfs_alloc_scan+0x46>
}
 801de36:	4628      	mov	r0, r5
 801de38:	bd38      	pop	{r3, r4, r5, pc}
        lfs_alloc_drop(lfs);
 801de3a:	4620      	mov	r0, r4
 801de3c:	f7fe fc25 	bl	801c68a <lfs_alloc_drop>
        return err;
 801de40:	e7f9      	b.n	801de36 <lfs_alloc_scan+0x42>
 801de42:	bf00      	nop
 801de44:	0801c699 	.word	0x0801c699

0801de48 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 801de48:	b530      	push	{r4, r5, lr}
 801de4a:	b083      	sub	sp, #12
 801de4c:	4604      	mov	r4, r0
 801de4e:	460d      	mov	r5, r1
        while (lfs->lookahead.next < lfs->lookahead.size) {
 801de50:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801de52:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801de54:	4293      	cmp	r3, r2
 801de56:	d22b      	bcs.n	801deb0 <lfs_alloc+0x68>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801de58:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801de5a:	08da      	lsrs	r2, r3, #3
 801de5c:	5c8a      	ldrb	r2, [r1, r2]
                    & (1U << (lfs->lookahead.next % 8)))) {
 801de5e:	f003 0107 	and.w	r1, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801de62:	40ca      	lsrs	r2, r1
 801de64:	f012 0f01 	tst.w	r2, #1
 801de68:	d005      	beq.n	801de76 <lfs_alloc+0x2e>
            lfs->lookahead.next += 1;
 801de6a:	3301      	adds	r3, #1
 801de6c:	65e3      	str	r3, [r4, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 801de6e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801de70:	3b01      	subs	r3, #1
 801de72:	6623      	str	r3, [r4, #96]	@ 0x60
 801de74:	e7ec      	b.n	801de50 <lfs_alloc+0x8>
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801de76:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801de78:	4413      	add	r3, r2
                        % lfs->block_count;
 801de7a:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801de7c:	fbb3 f1f2 	udiv	r1, r3, r2
 801de80:	fb02 3311 	mls	r3, r2, r1, r3
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801de84:	602b      	str	r3, [r5, #0]
                    lfs->lookahead.next += 1;
 801de86:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801de88:	3301      	adds	r3, #1
 801de8a:	65e3      	str	r3, [r4, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 801de8c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801de8e:	3a01      	subs	r2, #1
 801de90:	6622      	str	r2, [r4, #96]	@ 0x60
                    if (lfs->lookahead.next >= lfs->lookahead.size
 801de92:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801de94:	4293      	cmp	r3, r2
 801de96:	d225      	bcs.n	801dee4 <lfs_alloc+0x9c>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801de98:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801de9a:	08da      	lsrs	r2, r3, #3
 801de9c:	5c8a      	ldrb	r2, [r1, r2]
                                & (1U << (lfs->lookahead.next % 8)))) {
 801de9e:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801dea2:	fa22 f303 	lsr.w	r3, r2, r3
 801dea6:	f013 0f01 	tst.w	r3, #1
 801deaa:	d1ec      	bne.n	801de86 <lfs_alloc+0x3e>
                        return 0;
 801deac:	2000      	movs	r0, #0
 801deae:	e01a      	b.n	801dee6 <lfs_alloc+0x9e>
        if (lfs->lookahead.ckpoint <= 0) {
 801deb0:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801deb2:	b12a      	cbz	r2, 801dec0 <lfs_alloc+0x78>
        int err = lfs_alloc_scan(lfs);
 801deb4:	4620      	mov	r0, r4
 801deb6:	f7ff ff9d 	bl	801ddf4 <lfs_alloc_scan>
        if(err) {
 801deba:	2800      	cmp	r0, #0
 801debc:	d0c8      	beq.n	801de50 <lfs_alloc+0x8>
 801debe:	e012      	b.n	801dee6 <lfs_alloc+0x9e>
            LFS_ERROR("No more free space 0x%"PRIx32,
 801dec0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801dec2:	4413      	add	r3, r2
 801dec4:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801dec6:	fbb3 f1f2 	udiv	r1, r3, r2
 801deca:	4808      	ldr	r0, [pc, #32]	@ (801deec <lfs_alloc+0xa4>)
 801decc:	9000      	str	r0, [sp, #0]
 801dece:	fb02 3311 	mls	r3, r2, r1, r3
 801ded2:	f240 22b1 	movw	r2, #689	@ 0x2b1
 801ded6:	4906      	ldr	r1, [pc, #24]	@ (801def0 <lfs_alloc+0xa8>)
 801ded8:	4806      	ldr	r0, [pc, #24]	@ (801def4 <lfs_alloc+0xac>)
 801deda:	f00e f8b9 	bl	802c050 <printf>
            return LFS_ERR_NOSPC;
 801dede:	f06f 001b 	mvn.w	r0, #27
 801dee2:	e000      	b.n	801dee6 <lfs_alloc+0x9e>
                        return 0;
 801dee4:	2000      	movs	r0, #0
}
 801dee6:	b003      	add	sp, #12
 801dee8:	bd30      	pop	{r4, r5, pc}
 801deea:	bf00      	nop
 801deec:	08038678 	.word	0x08038678
 801def0:	0803a198 	.word	0x0803a198
 801def4:	0803a384 	.word	0x0803a384

0801def8 <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 801def8:	b570      	push	{r4, r5, r6, lr}
 801defa:	b084      	sub	sp, #16
 801defc:	4606      	mov	r6, r0
 801defe:	460c      	mov	r4, r1
    for (int i = 0; i < 2; i++) {
 801df00:	2500      	movs	r5, #0
 801df02:	2d01      	cmp	r5, #1
 801df04:	dc0d      	bgt.n	801df22 <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 801df06:	3501      	adds	r5, #1
 801df08:	f005 0101 	and.w	r1, r5, #1
 801df0c:	bf48      	it	mi
 801df0e:	4249      	negmi	r1, r1
 801df10:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801df14:	4630      	mov	r0, r6
 801df16:	f7ff ff97 	bl	801de48 <lfs_alloc>
        if (err) {
 801df1a:	4603      	mov	r3, r0
 801df1c:	2800      	cmp	r0, #0
 801df1e:	d0f0      	beq.n	801df02 <lfs_dir_alloc+0xa>
 801df20:	e02d      	b.n	801df7e <lfs_dir_alloc+0x86>
    dir->rev = 0;
 801df22:	2100      	movs	r1, #0
 801df24:	4622      	mov	r2, r4
 801df26:	f842 1f08 	str.w	r1, [r2, #8]!
    int err = lfs_bd_read(lfs,
 801df2a:	2304      	movs	r3, #4
 801df2c:	9303      	str	r3, [sp, #12]
 801df2e:	9202      	str	r2, [sp, #8]
 801df30:	9101      	str	r1, [sp, #4]
 801df32:	6822      	ldr	r2, [r4, #0]
 801df34:	9200      	str	r2, [sp, #0]
 801df36:	4632      	mov	r2, r6
 801df38:	4630      	mov	r0, r6
 801df3a:	f7fe fce1 	bl	801c900 <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
 801df3e:	68a2      	ldr	r2, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 801df40:	4603      	mov	r3, r0
 801df42:	b110      	cbz	r0, 801df4a <lfs_dir_alloc+0x52>
 801df44:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801df48:	d119      	bne.n	801df7e <lfs_dir_alloc+0x86>
    if (lfs->cfg->block_cycles > 0) {
 801df4a:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801df4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801df4e:	2b00      	cmp	r3, #0
 801df50:	dd0a      	ble.n	801df68 <lfs_dir_alloc+0x70>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 801df52:	3301      	adds	r3, #1
 801df54:	f043 0101 	orr.w	r1, r3, #1
    return lfs_aligndown(a + alignment-1, alignment);
 801df58:	1853      	adds	r3, r2, r1
 801df5a:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801df5c:	fbb3 f2f1 	udiv	r2, r3, r1
 801df60:	fb01 3212 	mls	r2, r1, r2, r3
 801df64:	1a9b      	subs	r3, r3, r2
 801df66:	60a3      	str	r3, [r4, #8]
    dir->off = sizeof(dir->rev);
 801df68:	2304      	movs	r3, #4
 801df6a:	60e3      	str	r3, [r4, #12]
    dir->etag = 0xffffffff;
 801df6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801df70:	6122      	str	r2, [r4, #16]
    dir->count = 0;
 801df72:	2300      	movs	r3, #0
 801df74:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 801df76:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 801df78:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
 801df7a:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
 801df7c:	75e3      	strb	r3, [r4, #23]
}
 801df7e:	4618      	mov	r0, r3
 801df80:	b004      	add	sp, #16
 801df82:	bd70      	pop	{r4, r5, r6, pc}

0801df84 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 801df84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df86:	b089      	sub	sp, #36	@ 0x24
 801df88:	4605      	mov	r5, r0
 801df8a:	460e      	mov	r6, r1
 801df8c:	e053      	b.n	801e036 <lfs_file_relocate+0xb2>
                err = lfs_bd_read(lfs,
 801df8e:	2201      	movs	r2, #1
 801df90:	9203      	str	r2, [sp, #12]
 801df92:	f10d 021b 	add.w	r2, sp, #27
 801df96:	9202      	str	r2, [sp, #8]
 801df98:	9401      	str	r4, [sp, #4]
 801df9a:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 801df9c:	9200      	str	r2, [sp, #0]
 801df9e:	1b1b      	subs	r3, r3, r4
 801dfa0:	462a      	mov	r2, r5
 801dfa2:	f106 0140 	add.w	r1, r6, #64	@ 0x40
 801dfa6:	4628      	mov	r0, r5
 801dfa8:	f7fe fcaa 	bl	801c900 <lfs_bd_read>
                if (err) {
 801dfac:	2800      	cmp	r0, #0
 801dfae:	d152      	bne.n	801e056 <lfs_file_relocate+0xd2>
            err = lfs_bd_prog(lfs,
 801dfb0:	2301      	movs	r3, #1
 801dfb2:	9303      	str	r3, [sp, #12]
 801dfb4:	f10d 021b 	add.w	r2, sp, #27
 801dfb8:	9202      	str	r2, [sp, #8]
 801dfba:	9401      	str	r4, [sp, #4]
 801dfbc:	9a07      	ldr	r2, [sp, #28]
 801dfbe:	9200      	str	r2, [sp, #0]
 801dfc0:	462a      	mov	r2, r5
 801dfc2:	f105 0110 	add.w	r1, r5, #16
 801dfc6:	4628      	mov	r0, r5
 801dfc8:	f7ff f998 	bl	801d2fc <lfs_bd_prog>
            if (err) {
 801dfcc:	bb20      	cbnz	r0, 801e018 <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801dfce:	3401      	adds	r4, #1
 801dfd0:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 801dfd2:	42a3      	cmp	r3, r4
 801dfd4:	d945      	bls.n	801e062 <lfs_file_relocate+0xde>
            if (file->flags & LFS_F_INLINE) {
 801dfd6:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 801dfd8:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 801dfdc:	d0d7      	beq.n	801df8e <lfs_file_relocate+0xa>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801dfde:	88b2      	ldrh	r2, [r6, #4]
 801dfe0:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
 801dfe2:	2101      	movs	r1, #1
 801dfe4:	9105      	str	r1, [sp, #20]
 801dfe6:	f10d 011b 	add.w	r1, sp, #27
 801dfea:	9104      	str	r1, [sp, #16]
 801dfec:	9403      	str	r4, [sp, #12]
 801dfee:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 801dff2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801dff6:	9202      	str	r2, [sp, #8]
 801dff8:	4a27      	ldr	r2, [pc, #156]	@ (801e098 <lfs_file_relocate+0x114>)
 801dffa:	9201      	str	r2, [sp, #4]
 801dffc:	1b1b      	subs	r3, r3, r4
 801dffe:	9300      	str	r3, [sp, #0]
 801e000:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 801e004:	2200      	movs	r2, #0
 801e006:	f106 0108 	add.w	r1, r6, #8
 801e00a:	4628      	mov	r0, r5
 801e00c:	f7ff f852 	bl	801d0b4 <lfs_dir_getread>
                if (err) {
 801e010:	2800      	cmp	r0, #0
 801e012:	d0cd      	beq.n	801dfb0 <lfs_file_relocate+0x2c>
                    return err;
 801e014:	4607      	mov	r7, r0
 801e016:	e03b      	b.n	801e090 <lfs_file_relocate+0x10c>
                if (err == LFS_ERR_CORRUPT) {
 801e018:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e01c:	d11d      	bne.n	801e05a <lfs_file_relocate+0xd6>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801e01e:	4b1f      	ldr	r3, [pc, #124]	@ (801e09c <lfs_file_relocate+0x118>)
 801e020:	9300      	str	r3, [sp, #0]
 801e022:	9b07      	ldr	r3, [sp, #28]
 801e024:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 801e028:	491d      	ldr	r1, [pc, #116]	@ (801e0a0 <lfs_file_relocate+0x11c>)
 801e02a:	481e      	ldr	r0, [pc, #120]	@ (801e0a4 <lfs_file_relocate+0x120>)
 801e02c:	f00e f810 	bl	802c050 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801e030:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e034:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
 801e036:	a907      	add	r1, sp, #28
 801e038:	4628      	mov	r0, r5
 801e03a:	f7ff ff05 	bl	801de48 <lfs_alloc>
        if (err) {
 801e03e:	4607      	mov	r7, r0
 801e040:	bb30      	cbnz	r0, 801e090 <lfs_file_relocate+0x10c>
        err = lfs_bd_erase(lfs, nblock);
 801e042:	9907      	ldr	r1, [sp, #28]
 801e044:	4628      	mov	r0, r5
 801e046:	f7fe fbe1 	bl	801c80c <lfs_bd_erase>
        if (err) {
 801e04a:	4607      	mov	r7, r0
 801e04c:	b138      	cbz	r0, 801e05e <lfs_file_relocate+0xda>
            if (err == LFS_ERR_CORRUPT) {
 801e04e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e052:	d0e4      	beq.n	801e01e <lfs_file_relocate+0x9a>
 801e054:	e01c      	b.n	801e090 <lfs_file_relocate+0x10c>
                    return err;
 801e056:	4607      	mov	r7, r0
 801e058:	e01a      	b.n	801e090 <lfs_file_relocate+0x10c>
                return err;
 801e05a:	4607      	mov	r7, r0
 801e05c:	e018      	b.n	801e090 <lfs_file_relocate+0x10c>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801e05e:	2400      	movs	r4, #0
 801e060:	e7b6      	b.n	801dfd0 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 801e062:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801e064:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801e066:	69e9      	ldr	r1, [r5, #28]
 801e068:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801e06a:	f010 f945 	bl	802e2f8 <memcpy>
        file->cache.block = lfs->pcache.block;
 801e06e:	692b      	ldr	r3, [r5, #16]
 801e070:	6433      	str	r3, [r6, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 801e072:	696b      	ldr	r3, [r5, #20]
 801e074:	6473      	str	r3, [r6, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 801e076:	69ab      	ldr	r3, [r5, #24]
 801e078:	64b3      	str	r3, [r6, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 801e07a:	f105 0110 	add.w	r1, r5, #16
 801e07e:	4628      	mov	r0, r5
 801e080:	f7fe fc14 	bl	801c8ac <lfs_cache_zero>
        file->block = nblock;
 801e084:	9b07      	ldr	r3, [sp, #28]
 801e086:	63b3      	str	r3, [r6, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 801e088:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 801e08a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e08e:	6333      	str	r3, [r6, #48]	@ 0x30
}
 801e090:	4638      	mov	r0, r7
 801e092:	b009      	add	sp, #36	@ 0x24
 801e094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e096:	bf00      	nop
 801e098:	fff7fc00 	.word	0xfff7fc00
 801e09c:	08038678 	.word	0x08038678
 801e0a0:	0803a198 	.word	0x0803a198
 801e0a4:	0803a3b0 	.word	0x0803a3b0

0801e0a8 <lfs_file_outline>:
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 801e0a8:	b538      	push	{r3, r4, r5, lr}
 801e0aa:	4605      	mov	r5, r0
 801e0ac:	460c      	mov	r4, r1
    file->off = file->pos;
 801e0ae:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801e0b0:	63cb      	str	r3, [r1, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 801e0b2:	f7fe fae7 	bl	801c684 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 801e0b6:	4621      	mov	r1, r4
 801e0b8:	4628      	mov	r0, r5
 801e0ba:	f7ff ff63 	bl	801df84 <lfs_file_relocate>
    if (err) {
 801e0be:	b918      	cbnz	r0, 801e0c8 <lfs_file_outline+0x20>
    file->flags &= ~LFS_F_INLINE;
 801e0c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e0c2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801e0c6:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801e0c8:	bd38      	pop	{r3, r4, r5, pc}
	...

0801e0cc <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
 801e0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0d0:	b08b      	sub	sp, #44	@ 0x2c
 801e0d2:	4605      	mov	r5, r0
 801e0d4:	460f      	mov	r7, r1
 801e0d6:	4616      	mov	r6, r2
 801e0d8:	9305      	str	r3, [sp, #20]
 801e0da:	e04d      	b.n	801e178 <lfs_ctz_extend+0xac>
            if (size == 0) {
 801e0dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	d032      	beq.n	801e148 <lfs_ctz_extend+0x7c>
            lfs_size_t noff = size - 1;
 801e0e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e0e4:	3b01      	subs	r3, #1
 801e0e6:	9308      	str	r3, [sp, #32]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 801e0e8:	a908      	add	r1, sp, #32
 801e0ea:	4628      	mov	r0, r5
 801e0ec:	f7fe fbea 	bl	801c8c4 <lfs_ctz_index>
            noff = noff + 1;
 801e0f0:	9b08      	ldr	r3, [sp, #32]
 801e0f2:	3301      	adds	r3, #1
 801e0f4:	9308      	str	r3, [sp, #32]
            if (noff != lfs->cfg->block_size) {
 801e0f6:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801e0f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801e0fa:	4293      	cmp	r3, r2
 801e0fc:	d05b      	beq.n	801e1b6 <lfs_ctz_extend+0xea>
                for (lfs_off_t i = 0; i < noff; i++) {
 801e0fe:	2400      	movs	r4, #0
 801e100:	46b9      	mov	r9, r7
 801e102:	9f05      	ldr	r7, [sp, #20]
 801e104:	9b08      	ldr	r3, [sp, #32]
 801e106:	42a3      	cmp	r3, r4
 801e108:	d94a      	bls.n	801e1a0 <lfs_ctz_extend+0xd4>
                    err = lfs_bd_read(lfs,
 801e10a:	2201      	movs	r2, #1
 801e10c:	9203      	str	r2, [sp, #12]
 801e10e:	aa09      	add	r2, sp, #36	@ 0x24
 801e110:	9202      	str	r2, [sp, #8]
 801e112:	9401      	str	r4, [sp, #4]
 801e114:	9700      	str	r7, [sp, #0]
 801e116:	1b1b      	subs	r3, r3, r4
 801e118:	4632      	mov	r2, r6
 801e11a:	2100      	movs	r1, #0
 801e11c:	4628      	mov	r0, r5
 801e11e:	f7fe fbef 	bl	801c900 <lfs_bd_read>
                    if (err) {
 801e122:	4603      	mov	r3, r0
 801e124:	2800      	cmp	r0, #0
 801e126:	d139      	bne.n	801e19c <lfs_ctz_extend+0xd0>
                    err = lfs_bd_prog(lfs,
 801e128:	2301      	movs	r3, #1
 801e12a:	9303      	str	r3, [sp, #12]
 801e12c:	aa09      	add	r2, sp, #36	@ 0x24
 801e12e:	9202      	str	r2, [sp, #8]
 801e130:	9401      	str	r4, [sp, #4]
 801e132:	9a07      	ldr	r2, [sp, #28]
 801e134:	9200      	str	r2, [sp, #0]
 801e136:	4632      	mov	r2, r6
 801e138:	4649      	mov	r1, r9
 801e13a:	4628      	mov	r0, r5
 801e13c:	f7ff f8de 	bl	801d2fc <lfs_bd_prog>
                    if (err) {
 801e140:	4603      	mov	r3, r0
 801e142:	b948      	cbnz	r0, 801e158 <lfs_ctz_extend+0x8c>
                for (lfs_off_t i = 0; i < noff; i++) {
 801e144:	3401      	adds	r4, #1
 801e146:	e7dd      	b.n	801e104 <lfs_ctz_extend+0x38>
                *block = nblock;
 801e148:	4682      	mov	sl, r0
 801e14a:	9b07      	ldr	r3, [sp, #28]
 801e14c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e14e:	6013      	str	r3, [r2, #0]
                *off = 0;
 801e150:	2300      	movs	r3, #0
 801e152:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e154:	6013      	str	r3, [r2, #0]
                return 0;
 801e156:	e02a      	b.n	801e1ae <lfs_ctz_extend+0xe2>
                        if (err == LFS_ERR_CORRUPT) {
 801e158:	464f      	mov	r7, r9
 801e15a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e15e:	d11d      	bne.n	801e19c <lfs_ctz_extend+0xd0>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801e160:	4b36      	ldr	r3, [pc, #216]	@ (801e23c <lfs_ctz_extend+0x170>)
 801e162:	9300      	str	r3, [sp, #0]
 801e164:	9b07      	ldr	r3, [sp, #28]
 801e166:	f640 32a6 	movw	r2, #2982	@ 0xba6
 801e16a:	4935      	ldr	r1, [pc, #212]	@ (801e240 <lfs_ctz_extend+0x174>)
 801e16c:	4835      	ldr	r0, [pc, #212]	@ (801e244 <lfs_ctz_extend+0x178>)
 801e16e:	f00d ff6f 	bl	802c050 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801e172:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e176:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
 801e178:	a907      	add	r1, sp, #28
 801e17a:	4628      	mov	r0, r5
 801e17c:	f7ff fe64 	bl	801de48 <lfs_alloc>
        if (err) {
 801e180:	2800      	cmp	r0, #0
 801e182:	d159      	bne.n	801e238 <lfs_ctz_extend+0x16c>
            err = lfs_bd_erase(lfs, nblock);
 801e184:	9907      	ldr	r1, [sp, #28]
 801e186:	4628      	mov	r0, r5
 801e188:	f7fe fb40 	bl	801c80c <lfs_bd_erase>
            if (err) {
 801e18c:	4680      	mov	r8, r0
 801e18e:	2800      	cmp	r0, #0
 801e190:	d0a4      	beq.n	801e0dc <lfs_ctz_extend+0x10>
                if (err == LFS_ERR_CORRUPT) {
 801e192:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e196:	d0e3      	beq.n	801e160 <lfs_ctz_extend+0x94>
 801e198:	4682      	mov	sl, r0
 801e19a:	e008      	b.n	801e1ae <lfs_ctz_extend+0xe2>
                        return err;
 801e19c:	469a      	mov	sl, r3
 801e19e:	e006      	b.n	801e1ae <lfs_ctz_extend+0xe2>
                *block = nblock;
 801e1a0:	46c2      	mov	sl, r8
 801e1a2:	9b07      	ldr	r3, [sp, #28]
 801e1a4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e1a6:	6013      	str	r3, [r2, #0]
                *off = noff;
 801e1a8:	9b08      	ldr	r3, [sp, #32]
 801e1aa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e1ac:	6013      	str	r3, [r2, #0]
}
 801e1ae:	4650      	mov	r0, sl
 801e1b0:	b00b      	add	sp, #44	@ 0x2c
 801e1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
 801e1b6:	3001      	adds	r0, #1
    return __builtin_ctz(a);
 801e1b8:	fa90 f9a0 	rbit	r9, r0
 801e1bc:	fab9 f989 	clz	r9, r9
            lfs_size_t skips = lfs_ctz(index) + 1;
 801e1c0:	f109 0a01 	add.w	sl, r9, #1
            lfs_block_t nhead = head;
 801e1c4:	9b05      	ldr	r3, [sp, #20]
 801e1c6:	9309      	str	r3, [sp, #36]	@ 0x24
            for (lfs_off_t i = 0; i < skips; i++) {
 801e1c8:	2400      	movs	r4, #0
 801e1ca:	46ab      	mov	fp, r5
 801e1cc:	e006      	b.n	801e1dc <lfs_ctz_extend+0x110>
                    if (err == LFS_ERR_CORRUPT) {
 801e1ce:	465d      	mov	r5, fp
 801e1d0:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e1d4:	d0c4      	beq.n	801e160 <lfs_ctz_extend+0x94>
                    return err;
 801e1d6:	4682      	mov	sl, r0
 801e1d8:	e7e9      	b.n	801e1ae <lfs_ctz_extend+0xe2>
            for (lfs_off_t i = 0; i < skips; i++) {
 801e1da:	3401      	adds	r4, #1
 801e1dc:	4554      	cmp	r4, sl
 801e1de:	d221      	bcs.n	801e224 <lfs_ctz_extend+0x158>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 801e1e0:	00a5      	lsls	r5, r4, #2
 801e1e2:	2304      	movs	r3, #4
 801e1e4:	9303      	str	r3, [sp, #12]
 801e1e6:	ab09      	add	r3, sp, #36	@ 0x24
 801e1e8:	9302      	str	r3, [sp, #8]
 801e1ea:	9501      	str	r5, [sp, #4]
 801e1ec:	9b07      	ldr	r3, [sp, #28]
 801e1ee:	9300      	str	r3, [sp, #0]
 801e1f0:	2301      	movs	r3, #1
 801e1f2:	4632      	mov	r2, r6
 801e1f4:	4639      	mov	r1, r7
 801e1f6:	4658      	mov	r0, fp
 801e1f8:	f7ff f880 	bl	801d2fc <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
 801e1fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
                if (err) {
 801e1fe:	2800      	cmp	r0, #0
 801e200:	d1e5      	bne.n	801e1ce <lfs_ctz_extend+0x102>
                if (i != skips-1) {
 801e202:	454c      	cmp	r4, r9
 801e204:	d0e9      	beq.n	801e1da <lfs_ctz_extend+0x10e>
                    err = lfs_bd_read(lfs,
 801e206:	2304      	movs	r3, #4
 801e208:	9303      	str	r3, [sp, #12]
 801e20a:	a909      	add	r1, sp, #36	@ 0x24
 801e20c:	9102      	str	r1, [sp, #8]
 801e20e:	9501      	str	r5, [sp, #4]
 801e210:	9200      	str	r2, [sp, #0]
 801e212:	4632      	mov	r2, r6
 801e214:	2100      	movs	r1, #0
 801e216:	4658      	mov	r0, fp
 801e218:	f7fe fb72 	bl	801c900 <lfs_bd_read>
                    if (err) {
 801e21c:	2800      	cmp	r0, #0
 801e21e:	d0dc      	beq.n	801e1da <lfs_ctz_extend+0x10e>
                        return err;
 801e220:	4682      	mov	sl, r0
 801e222:	e7c4      	b.n	801e1ae <lfs_ctz_extend+0xe2>
            *block = nblock;
 801e224:	46d1      	mov	r9, sl
 801e226:	46c2      	mov	sl, r8
 801e228:	9b07      	ldr	r3, [sp, #28]
 801e22a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e22c:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
 801e22e:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801e232:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e234:	6019      	str	r1, [r3, #0]
            return 0;
 801e236:	e7ba      	b.n	801e1ae <lfs_ctz_extend+0xe2>
 801e238:	4682      	mov	sl, r0
 801e23a:	e7b8      	b.n	801e1ae <lfs_ctz_extend+0xe2>
 801e23c:	08038678 	.word	0x08038678
 801e240:	0803a198 	.word	0x0803a198
 801e244:	0803a3b0 	.word	0x0803a3b0

0801e248 <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
 801e248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e24c:	b087      	sub	sp, #28
 801e24e:	4605      	mov	r5, r0
 801e250:	460c      	mov	r4, r1
 801e252:	4617      	mov	r7, r2
 801e254:	4699      	mov	r9, r3
    if ((file->flags & LFS_F_INLINE) &&
 801e256:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801e258:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801e25c:	d008      	beq.n	801e270 <lfs_file_flushedwrite+0x28>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 801e25e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801e260:	444b      	add	r3, r9
 801e262:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
    return (a > b) ? a : b;
 801e264:	4293      	cmp	r3, r2
 801e266:	bf38      	it	cc
 801e268:	4613      	movcc	r3, r2
 801e26a:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 801e26c:	429a      	cmp	r2, r3
 801e26e:	d32d      	bcc.n	801e2cc <lfs_file_flushedwrite+0x84>
        const void *buffer, lfs_size_t size) {
 801e270:	46c8      	mov	r8, r9
    while (nsize > 0) {
 801e272:	f1b8 0f00 	cmp.w	r8, #0
 801e276:	f000 8094 	beq.w	801e3a2 <lfs_file_flushedwrite+0x15a>
        if (!(file->flags & LFS_F_WRITING) ||
 801e27a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e27c:	f413 3200 	ands.w	r2, r3, #131072	@ 0x20000
 801e280:	d004      	beq.n	801e28c <lfs_file_flushedwrite+0x44>
                file->off == lfs->cfg->block_size) {
 801e282:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801e284:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 801e286:	6a49      	ldr	r1, [r1, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 801e288:	4288      	cmp	r0, r1
 801e28a:	d150      	bne.n	801e32e <lfs_file_flushedwrite+0xe6>
            if (!(file->flags & LFS_F_INLINE)) {
 801e28c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801e290:	d144      	bne.n	801e31c <lfs_file_flushedwrite+0xd4>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 801e292:	b90a      	cbnz	r2, 801e298 <lfs_file_flushedwrite+0x50>
 801e294:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e296:	bb1b      	cbnz	r3, 801e2e0 <lfs_file_flushedwrite+0x98>
                lfs_alloc_ckpoint(lfs);
 801e298:	4628      	mov	r0, r5
 801e29a:	f7fe f9f3 	bl	801c684 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 801e29e:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801e2a2:	9302      	str	r3, [sp, #8]
 801e2a4:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801e2a8:	9301      	str	r3, [sp, #4]
 801e2aa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e2ac:	9300      	str	r3, [sp, #0]
 801e2ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801e2b0:	462a      	mov	r2, r5
 801e2b2:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801e2b6:	4628      	mov	r0, r5
 801e2b8:	f7ff ff08 	bl	801e0cc <lfs_ctz_extend>
                if (err) {
 801e2bc:	4601      	mov	r1, r0
 801e2be:	2800      	cmp	r0, #0
 801e2c0:	d031      	beq.n	801e326 <lfs_file_flushedwrite+0xde>
                    file->flags |= LFS_F_ERRED;
 801e2c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e2c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801e2c8:	6323      	str	r3, [r4, #48]	@ 0x30
                    return err;
 801e2ca:	e059      	b.n	801e380 <lfs_file_flushedwrite+0x138>
        int err = lfs_file_outline(lfs, file);
 801e2cc:	f7ff feec 	bl	801e0a8 <lfs_file_outline>
        if (err) {
 801e2d0:	4601      	mov	r1, r0
 801e2d2:	2800      	cmp	r0, #0
 801e2d4:	d0cc      	beq.n	801e270 <lfs_file_flushedwrite+0x28>
            file->flags |= LFS_F_ERRED;
 801e2d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e2d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801e2dc:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801e2de:	e04f      	b.n	801e380 <lfs_file_flushedwrite+0x138>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801e2e0:	f104 0640 	add.w	r6, r4, #64	@ 0x40
 801e2e4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                            file->pos-1, &file->block, &(lfs_off_t){0});
 801e2e6:	2100      	movs	r1, #0
 801e2e8:	9105      	str	r1, [sp, #20]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801e2ea:	a805      	add	r0, sp, #20
 801e2ec:	9003      	str	r0, [sp, #12]
 801e2ee:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801e2f2:	9002      	str	r0, [sp, #8]
 801e2f4:	3b01      	subs	r3, #1
 801e2f6:	9301      	str	r3, [sp, #4]
 801e2f8:	9200      	str	r2, [sp, #0]
 801e2fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801e2fc:	4632      	mov	r2, r6
 801e2fe:	4628      	mov	r0, r5
 801e300:	f7ff f8b3 	bl	801d46a <lfs_ctz_find>
                    if (err) {
 801e304:	4601      	mov	r1, r0
 801e306:	b920      	cbnz	r0, 801e312 <lfs_file_flushedwrite+0xca>
                    lfs_cache_zero(lfs, &file->cache);
 801e308:	4631      	mov	r1, r6
 801e30a:	4628      	mov	r0, r5
 801e30c:	f7fe face 	bl	801c8ac <lfs_cache_zero>
 801e310:	e7c2      	b.n	801e298 <lfs_file_flushedwrite+0x50>
                        file->flags |= LFS_F_ERRED;
 801e312:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e314:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801e318:	6323      	str	r3, [r4, #48]	@ 0x30
                        return err;
 801e31a:	e031      	b.n	801e380 <lfs_file_flushedwrite+0x138>
                file->block = LFS_BLOCK_INLINE;
 801e31c:	f06f 0301 	mvn.w	r3, #1
 801e320:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801e322:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e324:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_WRITING;
 801e326:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e32c:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801e32e:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801e330:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 801e332:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801e334:	1af6      	subs	r6, r6, r3
    return (a < b) ? a : b;
 801e336:	4546      	cmp	r6, r8
 801e338:	bf28      	it	cs
 801e33a:	4646      	movcs	r6, r8
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 801e33c:	9603      	str	r6, [sp, #12]
 801e33e:	9702      	str	r7, [sp, #8]
 801e340:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801e342:	9301      	str	r3, [sp, #4]
 801e344:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801e346:	9300      	str	r3, [sp, #0]
 801e348:	2301      	movs	r3, #1
 801e34a:	462a      	mov	r2, r5
 801e34c:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801e350:	4628      	mov	r0, r5
 801e352:	f7fe ffd3 	bl	801d2fc <lfs_bd_prog>
            if (err) {
 801e356:	4601      	mov	r1, r0
 801e358:	b1b0      	cbz	r0, 801e388 <lfs_file_flushedwrite+0x140>
                if (err == LFS_ERR_CORRUPT) {
 801e35a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e35e:	d10b      	bne.n	801e378 <lfs_file_flushedwrite+0x130>
            err = lfs_file_relocate(lfs, file);
 801e360:	4621      	mov	r1, r4
 801e362:	4628      	mov	r0, r5
 801e364:	f7ff fe0e 	bl	801df84 <lfs_file_relocate>
            if (err) {
 801e368:	4601      	mov	r1, r0
 801e36a:	2800      	cmp	r0, #0
 801e36c:	d0e6      	beq.n	801e33c <lfs_file_flushedwrite+0xf4>
                file->flags |= LFS_F_ERRED;
 801e36e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e370:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801e374:	6323      	str	r3, [r4, #48]	@ 0x30
                return err;
 801e376:	e003      	b.n	801e380 <lfs_file_flushedwrite+0x138>
                file->flags |= LFS_F_ERRED;
 801e378:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e37a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801e37e:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801e380:	4608      	mov	r0, r1
 801e382:	b007      	add	sp, #28
 801e384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
 801e388:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e38a:	4433      	add	r3, r6
 801e38c:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801e38e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801e390:	4433      	add	r3, r6
 801e392:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801e394:	4437      	add	r7, r6
        nsize -= diff;
 801e396:	eba8 0806 	sub.w	r8, r8, r6
        lfs_alloc_ckpoint(lfs);
 801e39a:	4628      	mov	r0, r5
 801e39c:	f7fe f972 	bl	801c684 <lfs_alloc_ckpoint>
 801e3a0:	e767      	b.n	801e272 <lfs_file_flushedwrite+0x2a>
    return size;
 801e3a2:	4649      	mov	r1, r9
 801e3a4:	e7ec      	b.n	801e380 <lfs_file_flushedwrite+0x138>
	...

0801e3a8 <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 801e3a8:	b570      	push	{r4, r5, r6, lr}
 801e3aa:	b098      	sub	sp, #96	@ 0x60
 801e3ac:	4605      	mov	r5, r0
 801e3ae:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 801e3b0:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801e3b2:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801e3b6:	d008      	beq.n	801e3ca <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
 801e3b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801e3bc:	d102      	bne.n	801e3c4 <lfs_file_flush+0x1c>
    rcache->block = LFS_BLOCK_NULL;
 801e3be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e3c2:	640a      	str	r2, [r1, #64]	@ 0x40
        file->flags &= ~LFS_F_READING;
 801e3c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801e3c8:	6323      	str	r3, [r4, #48]	@ 0x30
    if (file->flags & LFS_F_WRITING) {
 801e3ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e3cc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801e3d0:	d068      	beq.n	801e4a4 <lfs_file_flush+0xfc>
        lfs_off_t pos = file->pos;
 801e3d2:	6b66      	ldr	r6, [r4, #52]	@ 0x34
        if (!(file->flags & LFS_F_INLINE)) {
 801e3d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801e3d8:	d151      	bne.n	801e47e <lfs_file_flush+0xd6>
            lfs_file_t orig = {
 801e3da:	2254      	movs	r2, #84	@ 0x54
 801e3dc:	2100      	movs	r1, #0
 801e3de:	a803      	add	r0, sp, #12
 801e3e0:	f00e fa0e 	bl	802c800 <memset>
                .ctz.head = file->ctz.head,
 801e3e4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            lfs_file_t orig = {
 801e3e6:	930d      	str	r3, [sp, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 801e3e8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            lfs_file_t orig = {
 801e3ea:	930e      	str	r3, [sp, #56]	@ 0x38
 801e3ec:	2301      	movs	r3, #1
 801e3ee:	930f      	str	r3, [sp, #60]	@ 0x3c
                .pos = file->pos,
 801e3f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            lfs_file_t orig = {
 801e3f2:	9310      	str	r3, [sp, #64]	@ 0x40
 801e3f4:	f10d 0c4c 	add.w	ip, sp, #76	@ 0x4c
 801e3f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801e3fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
 801e400:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e404:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
 801e406:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801e408:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801e40a:	429a      	cmp	r2, r3
 801e40c:	d21a      	bcs.n	801e444 <lfs_file_flush+0x9c>
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 801e40e:	2301      	movs	r3, #1
 801e410:	f10d 020b 	add.w	r2, sp, #11
 801e414:	a903      	add	r1, sp, #12
 801e416:	4628      	mov	r0, r5
 801e418:	f7ff f870 	bl	801d4fc <lfs_file_flushedread>
                if (res < 0) {
 801e41c:	1e03      	subs	r3, r0, #0
 801e41e:	db42      	blt.n	801e4a6 <lfs_file_flush+0xfe>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 801e420:	2301      	movs	r3, #1
 801e422:	f10d 020b 	add.w	r2, sp, #11
 801e426:	4621      	mov	r1, r4
 801e428:	4628      	mov	r0, r5
 801e42a:	f7ff ff0d 	bl	801e248 <lfs_file_flushedwrite>
                if (res < 0) {
 801e42e:	1e03      	subs	r3, r0, #0
 801e430:	db39      	blt.n	801e4a6 <lfs_file_flush+0xfe>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 801e432:	682b      	ldr	r3, [r5, #0]
 801e434:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e438:	d0e5      	beq.n	801e406 <lfs_file_flush+0x5e>
    rcache->block = LFS_BLOCK_NULL;
 801e43a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e43e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e440:	602b      	str	r3, [r5, #0]
}
 801e442:	e7e0      	b.n	801e406 <lfs_file_flush+0x5e>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 801e444:	2301      	movs	r3, #1
 801e446:	462a      	mov	r2, r5
 801e448:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801e44c:	4628      	mov	r0, r5
 801e44e:	f7fe fefb 	bl	801d248 <lfs_bd_flush>
                if (err) {
 801e452:	4603      	mov	r3, r0
 801e454:	b1c0      	cbz	r0, 801e488 <lfs_file_flush+0xe0>
                    if (err == LFS_ERR_CORRUPT) {
 801e456:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e45a:	d124      	bne.n	801e4a6 <lfs_file_flush+0xfe>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 801e45c:	4b13      	ldr	r3, [pc, #76]	@ (801e4ac <lfs_file_flush+0x104>)
 801e45e:	9300      	str	r3, [sp, #0]
 801e460:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801e462:	f640 522b 	movw	r2, #3371	@ 0xd2b
 801e466:	4912      	ldr	r1, [pc, #72]	@ (801e4b0 <lfs_file_flush+0x108>)
 801e468:	4812      	ldr	r0, [pc, #72]	@ (801e4b4 <lfs_file_flush+0x10c>)
 801e46a:	f00d fdf1 	bl	802c050 <printf>
                err = lfs_file_relocate(lfs, file);
 801e46e:	4621      	mov	r1, r4
 801e470:	4628      	mov	r0, r5
 801e472:	f7ff fd87 	bl	801df84 <lfs_file_relocate>
                if (err) {
 801e476:	4603      	mov	r3, r0
 801e478:	2800      	cmp	r0, #0
 801e47a:	d0e3      	beq.n	801e444 <lfs_file_flush+0x9c>
 801e47c:	e013      	b.n	801e4a6 <lfs_file_flush+0xfe>
            file->pos = lfs_max(file->pos, file->ctz.size);
 801e47e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    return (a > b) ? a : b;
 801e480:	42b3      	cmp	r3, r6
 801e482:	bf38      	it	cc
 801e484:	4633      	movcc	r3, r6
 801e486:	6363      	str	r3, [r4, #52]	@ 0x34
        file->ctz.head = file->block;
 801e488:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801e48a:	62a3      	str	r3, [r4, #40]	@ 0x28
        file->ctz.size = file->pos;
 801e48c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e48e:	62e3      	str	r3, [r4, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 801e490:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e492:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801e496:	6323      	str	r3, [r4, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 801e498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801e49c:	6323      	str	r3, [r4, #48]	@ 0x30
        file->pos = pos;
 801e49e:	6366      	str	r6, [r4, #52]	@ 0x34
    return 0;
 801e4a0:	2300      	movs	r3, #0
 801e4a2:	e000      	b.n	801e4a6 <lfs_file_flush+0xfe>
 801e4a4:	2300      	movs	r3, #0
}
 801e4a6:	4618      	mov	r0, r3
 801e4a8:	b018      	add	sp, #96	@ 0x60
 801e4aa:	bd70      	pop	{r4, r5, r6, pc}
 801e4ac:	08038678 	.word	0x08038678
 801e4b0:	0803a198 	.word	0x0803a198
 801e4b4:	0803a3b0 	.word	0x0803a3b0

0801e4b8 <lfs_file_read_>:
        void *buffer, lfs_size_t size) {
 801e4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4ba:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801e4bc:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801e4be:	f013 0f01 	tst.w	r3, #1
 801e4c2:	d00f      	beq.n	801e4e4 <lfs_file_read_+0x2c>
 801e4c4:	4605      	mov	r5, r0
 801e4c6:	460c      	mov	r4, r1
 801e4c8:	4616      	mov	r6, r2
    if (file->flags & LFS_F_WRITING) {
 801e4ca:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801e4ce:	d002      	beq.n	801e4d6 <lfs_file_read_+0x1e>
        int err = lfs_file_flush(lfs, file);
 801e4d0:	f7ff ff6a 	bl	801e3a8 <lfs_file_flush>
        if (err) {
 801e4d4:	b928      	cbnz	r0, 801e4e2 <lfs_file_read_+0x2a>
    return lfs_file_flushedread(lfs, file, buffer, size);
 801e4d6:	463b      	mov	r3, r7
 801e4d8:	4632      	mov	r2, r6
 801e4da:	4621      	mov	r1, r4
 801e4dc:	4628      	mov	r0, r5
 801e4de:	f7ff f80d 	bl	801d4fc <lfs_file_flushedread>
}
 801e4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801e4e4:	4b03      	ldr	r3, [pc, #12]	@ (801e4f4 <lfs_file_read_+0x3c>)
 801e4e6:	4a04      	ldr	r2, [pc, #16]	@ (801e4f8 <lfs_file_read_+0x40>)
 801e4e8:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 801e4ec:	4803      	ldr	r0, [pc, #12]	@ (801e4fc <lfs_file_read_+0x44>)
 801e4ee:	f00d f88d 	bl	802b60c <__assert_func>
 801e4f2:	bf00      	nop
 801e4f4:	0803a3d4 	.word	0x0803a3d4
 801e4f8:	0803d4ec 	.word	0x0803d4ec
 801e4fc:	0803a198 	.word	0x0803a198

0801e500 <lfs_file_seek_>:
        lfs_soff_t off, int whence) {
 801e500:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e502:	b083      	sub	sp, #12
 801e504:	4606      	mov	r6, r0
 801e506:	460d      	mov	r5, r1
 801e508:	4614      	mov	r4, r2
    lfs_off_t npos = file->pos;
 801e50a:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
    if (whence == LFS_SEEK_SET) {
 801e50c:	b123      	cbz	r3, 801e518 <lfs_file_seek_+0x18>
    } else if (whence == LFS_SEEK_CUR) {
 801e50e:	2b01      	cmp	r3, #1
 801e510:	d021      	beq.n	801e556 <lfs_file_seek_+0x56>
    } else if (whence == LFS_SEEK_END) {
 801e512:	2b02      	cmp	r3, #2
 801e514:	d023      	beq.n	801e55e <lfs_file_seek_+0x5e>
    lfs_off_t npos = file->pos;
 801e516:	463c      	mov	r4, r7
    if (npos > lfs->file_max) {
 801e518:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 801e51a:	42a3      	cmp	r3, r4
 801e51c:	d339      	bcc.n	801e592 <lfs_file_seek_+0x92>
    if (file->pos == npos) {
 801e51e:	42bc      	cmp	r4, r7
 801e520:	d023      	beq.n	801e56a <lfs_file_seek_+0x6a>
        !(file->flags & LFS_F_WRITING)
 801e522:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    if (
 801e524:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801e528:	d10c      	bne.n	801e544 <lfs_file_seek_+0x44>
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 801e52a:	9701      	str	r7, [sp, #4]
 801e52c:	a901      	add	r1, sp, #4
 801e52e:	4630      	mov	r0, r6
 801e530:	f7fe f9c8 	bl	801c8c4 <lfs_ctz_index>
 801e534:	4607      	mov	r7, r0
        lfs_off_t noff = npos;
 801e536:	9400      	str	r4, [sp, #0]
        int nindex = lfs_ctz_index(lfs, &noff);
 801e538:	4669      	mov	r1, sp
 801e53a:	4630      	mov	r0, r6
 801e53c:	f7fe f9c2 	bl	801c8c4 <lfs_ctz_index>
        if (oindex == nindex
 801e540:	4287      	cmp	r7, r0
 801e542:	d014      	beq.n	801e56e <lfs_file_seek_+0x6e>
    int err = lfs_file_flush(lfs, file);
 801e544:	4629      	mov	r1, r5
 801e546:	4630      	mov	r0, r6
 801e548:	f7ff ff2e 	bl	801e3a8 <lfs_file_flush>
    if (err) {
 801e54c:	b908      	cbnz	r0, 801e552 <lfs_file_seek_+0x52>
    file->pos = npos;
 801e54e:	636c      	str	r4, [r5, #52]	@ 0x34
    return npos;
 801e550:	4620      	mov	r0, r4
}
 801e552:	b003      	add	sp, #12
 801e554:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((lfs_soff_t)file->pos + off < 0) {
 801e556:	42e7      	cmn	r7, r4
 801e558:	d415      	bmi.n	801e586 <lfs_file_seek_+0x86>
            npos = file->pos + off;
 801e55a:	443c      	add	r4, r7
 801e55c:	e7dc      	b.n	801e518 <lfs_file_seek_+0x18>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 801e55e:	f7fe f91e 	bl	801c79e <lfs_file_size_>
        if (res < 0) {
 801e562:	1900      	adds	r0, r0, r4
 801e564:	d412      	bmi.n	801e58c <lfs_file_seek_+0x8c>
            npos = res;
 801e566:	4604      	mov	r4, r0
 801e568:	e7d6      	b.n	801e518 <lfs_file_seek_+0x18>
        return npos;
 801e56a:	4620      	mov	r0, r4
 801e56c:	e7f1      	b.n	801e552 <lfs_file_seek_+0x52>
                && noff >= file->cache.off
 801e56e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801e570:	9a00      	ldr	r2, [sp, #0]
 801e572:	4293      	cmp	r3, r2
 801e574:	d8e6      	bhi.n	801e544 <lfs_file_seek_+0x44>
                && noff < file->cache.off + file->cache.size) {
 801e576:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 801e578:	440b      	add	r3, r1
 801e57a:	429a      	cmp	r2, r3
 801e57c:	d2e2      	bcs.n	801e544 <lfs_file_seek_+0x44>
            file->pos = npos;
 801e57e:	636c      	str	r4, [r5, #52]	@ 0x34
            file->off = noff;
 801e580:	63ea      	str	r2, [r5, #60]	@ 0x3c
            return npos;
 801e582:	4620      	mov	r0, r4
 801e584:	e7e5      	b.n	801e552 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801e586:	f06f 0015 	mvn.w	r0, #21
 801e58a:	e7e2      	b.n	801e552 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801e58c:	f06f 0015 	mvn.w	r0, #21
 801e590:	e7df      	b.n	801e552 <lfs_file_seek_+0x52>
        return LFS_ERR_INVAL;
 801e592:	f06f 0015 	mvn.w	r0, #21
 801e596:	e7dc      	b.n	801e552 <lfs_file_seek_+0x52>

0801e598 <lfs_file_write_>:
        const void *buffer, lfs_size_t size) {
 801e598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e59c:	b082      	sub	sp, #8
 801e59e:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801e5a0:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801e5a2:	f013 0f02 	tst.w	r3, #2
 801e5a6:	d02a      	beq.n	801e5fe <lfs_file_write_+0x66>
 801e5a8:	4605      	mov	r5, r0
 801e5aa:	460c      	mov	r4, r1
 801e5ac:	4690      	mov	r8, r2
    if (file->flags & LFS_F_READING) {
 801e5ae:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801e5b2:	d12b      	bne.n	801e60c <lfs_file_write_+0x74>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 801e5b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e5b6:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 801e5ba:	d004      	beq.n	801e5c6 <lfs_file_write_+0x2e>
 801e5bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e5be:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801e5c0:	4291      	cmp	r1, r2
 801e5c2:	d200      	bcs.n	801e5c6 <lfs_file_write_+0x2e>
        file->pos = file->ctz.size;
 801e5c4:	6362      	str	r2, [r4, #52]	@ 0x34
    if (file->pos + size > lfs->file_max) {
 801e5c6:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 801e5c8:	19f1      	adds	r1, r6, r7
 801e5ca:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 801e5cc:	4291      	cmp	r1, r2
 801e5ce:	d831      	bhi.n	801e634 <lfs_file_write_+0x9c>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 801e5d0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801e5d4:	d11f      	bne.n	801e616 <lfs_file_write_+0x7e>
 801e5d6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801e5d8:	429e      	cmp	r6, r3
 801e5da:	d91c      	bls.n	801e616 <lfs_file_write_+0x7e>
        file->pos = file->ctz.size;
 801e5dc:	6363      	str	r3, [r4, #52]	@ 0x34
        while (file->pos < pos) {
 801e5de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e5e0:	428e      	cmp	r6, r1
 801e5e2:	d918      	bls.n	801e616 <lfs_file_write_+0x7e>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 801e5e4:	2300      	movs	r3, #0
 801e5e6:	f88d 3007 	strb.w	r3, [sp, #7]
 801e5ea:	2301      	movs	r3, #1
 801e5ec:	f10d 0207 	add.w	r2, sp, #7
 801e5f0:	4621      	mov	r1, r4
 801e5f2:	4628      	mov	r0, r5
 801e5f4:	f7ff fe28 	bl	801e248 <lfs_file_flushedwrite>
            if (res < 0) {
 801e5f8:	2800      	cmp	r0, #0
 801e5fa:	daf0      	bge.n	801e5de <lfs_file_write_+0x46>
 801e5fc:	e017      	b.n	801e62e <lfs_file_write_+0x96>
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801e5fe:	4b0f      	ldr	r3, [pc, #60]	@ (801e63c <lfs_file_write_+0xa4>)
 801e600:	4a0f      	ldr	r2, [pc, #60]	@ (801e640 <lfs_file_write_+0xa8>)
 801e602:	f640 6126 	movw	r1, #3622	@ 0xe26
 801e606:	480f      	ldr	r0, [pc, #60]	@ (801e644 <lfs_file_write_+0xac>)
 801e608:	f00d f800 	bl	802b60c <__assert_func>
        int err = lfs_file_flush(lfs, file);
 801e60c:	f7ff fecc 	bl	801e3a8 <lfs_file_flush>
        if (err) {
 801e610:	2800      	cmp	r0, #0
 801e612:	d0cf      	beq.n	801e5b4 <lfs_file_write_+0x1c>
 801e614:	e00b      	b.n	801e62e <lfs_file_write_+0x96>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 801e616:	463b      	mov	r3, r7
 801e618:	4642      	mov	r2, r8
 801e61a:	4621      	mov	r1, r4
 801e61c:	4628      	mov	r0, r5
 801e61e:	f7ff fe13 	bl	801e248 <lfs_file_flushedwrite>
    if (nsize < 0) {
 801e622:	2800      	cmp	r0, #0
 801e624:	db03      	blt.n	801e62e <lfs_file_write_+0x96>
    file->flags &= ~LFS_F_ERRED;
 801e626:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e628:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 801e62c:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801e62e:	b002      	add	sp, #8
 801e630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LFS_ERR_FBIG;
 801e634:	f06f 001a 	mvn.w	r0, #26
 801e638:	e7f9      	b.n	801e62e <lfs_file_write_+0x96>
 801e63a:	bf00      	nop
 801e63c:	0803a404 	.word	0x0803a404
 801e640:	0803d4cc 	.word	0x0803d4cc
 801e644:	0803a198 	.word	0x0803a198

0801e648 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 801e648:	b500      	push	{lr}
 801e64a:	b083      	sub	sp, #12
    lfs_size_t size = 0;
 801e64c:	2300      	movs	r3, #0
 801e64e:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 801e650:	aa01      	add	r2, sp, #4
 801e652:	4904      	ldr	r1, [pc, #16]	@ (801e664 <lfs_fs_size_+0x1c>)
 801e654:	f7ff faf8 	bl	801dc48 <lfs_fs_traverse_>
    if (err) {
 801e658:	b900      	cbnz	r0, 801e65c <lfs_fs_size_+0x14>
        return err;
    }

    return size;
 801e65a:	9801      	ldr	r0, [sp, #4]
}
 801e65c:	b003      	add	sp, #12
 801e65e:	f85d fb04 	ldr.w	pc, [sp], #4
 801e662:	bf00      	nop
 801e664:	0801c803 	.word	0x0801c803

0801e668 <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 801e668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e66c:	b083      	sub	sp, #12
 801e66e:	4680      	mov	r8, r0
 801e670:	460e      	mov	r6, r1
 801e672:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
 801e674:	2300      	movs	r3, #0
 801e676:	6193      	str	r3, [r2, #24]
    pdir->tail[1] = 1;
 801e678:	2501      	movs	r5, #1
 801e67a:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801e67c:	4a26      	ldr	r2, [pc, #152]	@ (801e718 <lfs_fs_pred+0xb0>)
 801e67e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e682:	ab02      	add	r3, sp, #8
 801e684:	e903 0003 	stmdb	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801e688:	46a9      	mov	r9, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e68a:	69a7      	ldr	r7, [r4, #24]
 801e68c:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801e690:	d039      	beq.n	801e706 <lfs_fs_pred+0x9e>
 801e692:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 801e696:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801e69a:	d039      	beq.n	801e710 <lfs_fs_pred+0xa8>
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 801e69c:	f104 0b18 	add.w	fp, r4, #24
 801e6a0:	4669      	mov	r1, sp
 801e6a2:	4658      	mov	r0, fp
 801e6a4:	f7fd ff72 	bl	801c58c <lfs_pair_issync>
 801e6a8:	b9a0      	cbnz	r0, 801e6d4 <lfs_fs_pred+0x6c>
        if (tortoise_i == tortoise_period) {
 801e6aa:	454d      	cmp	r5, r9
 801e6ac:	d01c      	beq.n	801e6e8 <lfs_fs_pred+0x80>
        tortoise_i += 1;
 801e6ae:	3501      	adds	r5, #1
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e6b0:	6833      	ldr	r3, [r6, #0]
 801e6b2:	42bb      	cmp	r3, r7
 801e6b4:	d01f      	beq.n	801e6f6 <lfs_fs_pred+0x8e>
 801e6b6:	6872      	ldr	r2, [r6, #4]
 801e6b8:	4552      	cmp	r2, sl
 801e6ba:	d01e      	beq.n	801e6fa <lfs_fs_pred+0x92>
 801e6bc:	42ba      	cmp	r2, r7
 801e6be:	d01e      	beq.n	801e6fe <lfs_fs_pred+0x96>
 801e6c0:	4553      	cmp	r3, sl
 801e6c2:	d01e      	beq.n	801e702 <lfs_fs_pred+0x9a>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 801e6c4:	465a      	mov	r2, fp
 801e6c6:	4621      	mov	r1, r4
 801e6c8:	4640      	mov	r0, r8
 801e6ca:	f7ff faaf 	bl	801dc2c <lfs_dir_fetch>
        if (err) {
 801e6ce:	2800      	cmp	r0, #0
 801e6d0:	d0db      	beq.n	801e68a <lfs_fs_pred+0x22>
 801e6d2:	e01a      	b.n	801e70a <lfs_fs_pred+0xa2>
            LFS_WARN("Cycle detected in tail list");
 801e6d4:	4b11      	ldr	r3, [pc, #68]	@ (801e71c <lfs_fs_pred+0xb4>)
 801e6d6:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 801e6da:	4911      	ldr	r1, [pc, #68]	@ (801e720 <lfs_fs_pred+0xb8>)
 801e6dc:	4811      	ldr	r0, [pc, #68]	@ (801e724 <lfs_fs_pred+0xbc>)
 801e6de:	f00d fcb7 	bl	802c050 <printf>
            return LFS_ERR_CORRUPT;
 801e6e2:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801e6e6:	e010      	b.n	801e70a <lfs_fs_pred+0xa2>
            tortoise[0] = pdir->tail[0];
 801e6e8:	9700      	str	r7, [sp, #0]
            tortoise[1] = pdir->tail[1];
 801e6ea:	f8cd a004 	str.w	sl, [sp, #4]
            tortoise_period *= 2;
 801e6ee:	ea4f 0949 	mov.w	r9, r9, lsl #1
            tortoise_i = 0;
 801e6f2:	2500      	movs	r5, #0
 801e6f4:	e7db      	b.n	801e6ae <lfs_fs_pred+0x46>
            return 0;
 801e6f6:	2000      	movs	r0, #0
 801e6f8:	e007      	b.n	801e70a <lfs_fs_pred+0xa2>
 801e6fa:	2000      	movs	r0, #0
 801e6fc:	e005      	b.n	801e70a <lfs_fs_pred+0xa2>
 801e6fe:	2000      	movs	r0, #0
 801e700:	e003      	b.n	801e70a <lfs_fs_pred+0xa2>
 801e702:	2000      	movs	r0, #0
 801e704:	e001      	b.n	801e70a <lfs_fs_pred+0xa2>
    return LFS_ERR_NOENT;
 801e706:	f06f 0001 	mvn.w	r0, #1
}
 801e70a:	b003      	add	sp, #12
 801e70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return LFS_ERR_NOENT;
 801e710:	f06f 0001 	mvn.w	r0, #1
 801e714:	e7f9      	b.n	801e70a <lfs_fs_pred+0xa2>
 801e716:	bf00      	nop
 801e718:	080378bc 	.word	0x080378bc
 801e71c:	08038678 	.word	0x08038678
 801e720:	0803a198 	.word	0x0803a198
 801e724:	0803a358 	.word	0x0803a358

0801e728 <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 801e728:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e72a:	b085      	sub	sp, #20
 801e72c:	460c      	mov	r4, r1
 801e72e:	4616      	mov	r6, r2
 801e730:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
 801e732:	9303      	str	r3, [sp, #12]
 801e734:	9202      	str	r2, [sp, #8]
 801e736:	684b      	ldr	r3, [r1, #4]
 801e738:	9301      	str	r3, [sp, #4]
 801e73a:	680b      	ldr	r3, [r1, #0]
 801e73c:	9300      	str	r3, [sp, #0]
 801e73e:	2300      	movs	r3, #0
 801e740:	4602      	mov	r2, r0
 801e742:	f100 0110 	add.w	r1, r0, #16
 801e746:	f7fe fdd9 	bl	801d2fc <lfs_bd_prog>
    if (err) {
 801e74a:	4607      	mov	r7, r0
 801e74c:	b110      	cbz	r0, 801e754 <lfs_dir_commitprog+0x2c>
}
 801e74e:	4638      	mov	r0, r7
 801e750:	b005      	add	sp, #20
 801e752:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
 801e754:	462a      	mov	r2, r5
 801e756:	4631      	mov	r1, r6
 801e758:	68e0      	ldr	r0, [r4, #12]
 801e75a:	f002 fcaf 	bl	80210bc <lfs_crc>
 801e75e:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 801e760:	6863      	ldr	r3, [r4, #4]
 801e762:	442b      	add	r3, r5
 801e764:	6063      	str	r3, [r4, #4]
    return 0;
 801e766:	e7f2      	b.n	801e74e <lfs_dir_commitprog+0x26>

0801e768 <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 801e768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e76c:	b087      	sub	sp, #28
 801e76e:	4614      	mov	r4, r2
 801e770:	461f      	mov	r7, r3
    return ((int32_t)(tag << 22) >> 22) == -1;
 801e772:	f342 0309 	sbfx	r3, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801e776:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e77a:	bf14      	ite	ne
 801e77c:	4690      	movne	r8, r2
 801e77e:	f102 0801 	addeq.w	r8, r2, #1
    return tag & 0x000003ff;
 801e782:	f3c8 0809 	ubfx	r8, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801e786:	f108 0904 	add.w	r9, r8, #4
    if (commit->off + dsize > commit->end) {
 801e78a:	684b      	ldr	r3, [r1, #4]
 801e78c:	444b      	add	r3, r9
 801e78e:	694a      	ldr	r2, [r1, #20]
 801e790:	4293      	cmp	r3, r2
 801e792:	d841      	bhi.n	801e818 <lfs_dir_commitattr+0xb0>
 801e794:	4605      	mov	r5, r0
 801e796:	460e      	mov	r6, r1
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 801e798:	f024 4b00 	bic.w	fp, r4, #2147483648	@ 0x80000000
 801e79c:	688b      	ldr	r3, [r1, #8]
 801e79e:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
 801e7a2:	ba1b      	rev	r3, r3
 801e7a4:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 801e7a6:	2304      	movs	r3, #4
 801e7a8:	aa05      	add	r2, sp, #20
 801e7aa:	f7ff ffbd 	bl	801e728 <lfs_dir_commitprog>
    if (err) {
 801e7ae:	4682      	mov	sl, r0
 801e7b0:	bb60      	cbnz	r0, 801e80c <lfs_dir_commitattr+0xa4>
    if (!(tag & 0x80000000)) {
 801e7b2:	2c00      	cmp	r4, #0
 801e7b4:	da21      	bge.n	801e7fa <lfs_dir_commitattr+0x92>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801e7b6:	2400      	movs	r4, #0
 801e7b8:	4544      	cmp	r4, r8
 801e7ba:	d225      	bcs.n	801e808 <lfs_dir_commitattr+0xa0>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 801e7bc:	eba9 0304 	sub.w	r3, r9, r4
                    disk->block, disk->off+i, &dat, 1);
 801e7c0:	6839      	ldr	r1, [r7, #0]
 801e7c2:	687a      	ldr	r2, [r7, #4]
            err = lfs_bd_read(lfs,
 801e7c4:	2001      	movs	r0, #1
 801e7c6:	9003      	str	r0, [sp, #12]
 801e7c8:	f10d 0013 	add.w	r0, sp, #19
 801e7cc:	9002      	str	r0, [sp, #8]
 801e7ce:	4422      	add	r2, r4
 801e7d0:	9201      	str	r2, [sp, #4]
 801e7d2:	9100      	str	r1, [sp, #0]
 801e7d4:	3b04      	subs	r3, #4
 801e7d6:	462a      	mov	r2, r5
 801e7d8:	2100      	movs	r1, #0
 801e7da:	4628      	mov	r0, r5
 801e7dc:	f7fe f890 	bl	801c900 <lfs_bd_read>
            if (err) {
 801e7e0:	4603      	mov	r3, r0
 801e7e2:	b9b8      	cbnz	r0, 801e814 <lfs_dir_commitattr+0xac>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 801e7e4:	2301      	movs	r3, #1
 801e7e6:	f10d 0213 	add.w	r2, sp, #19
 801e7ea:	4631      	mov	r1, r6
 801e7ec:	4628      	mov	r0, r5
 801e7ee:	f7ff ff9b 	bl	801e728 <lfs_dir_commitprog>
            if (err) {
 801e7f2:	4603      	mov	r3, r0
 801e7f4:	b970      	cbnz	r0, 801e814 <lfs_dir_commitattr+0xac>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801e7f6:	3401      	adds	r4, #1
 801e7f8:	e7de      	b.n	801e7b8 <lfs_dir_commitattr+0x50>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 801e7fa:	4643      	mov	r3, r8
 801e7fc:	463a      	mov	r2, r7
 801e7fe:	4631      	mov	r1, r6
 801e800:	4628      	mov	r0, r5
 801e802:	f7ff ff91 	bl	801e728 <lfs_dir_commitprog>
        if (err) {
 801e806:	b950      	cbnz	r0, 801e81e <lfs_dir_commitattr+0xb6>
    commit->ptag = tag & 0x7fffffff;
 801e808:	f8c6 b008 	str.w	fp, [r6, #8]
}
 801e80c:	4650      	mov	r0, sl
 801e80e:	b007      	add	sp, #28
 801e810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return err;
 801e814:	469a      	mov	sl, r3
 801e816:	e7f9      	b.n	801e80c <lfs_dir_commitattr+0xa4>
        return LFS_ERR_NOSPC;
 801e818:	f06f 0a1b 	mvn.w	sl, #27
 801e81c:	e7f6      	b.n	801e80c <lfs_dir_commitattr+0xa4>
            return err;
 801e81e:	4682      	mov	sl, r0
 801e820:	e7f4      	b.n	801e80c <lfs_dir_commitattr+0xa4>

0801e822 <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 801e822:	b508      	push	{r3, lr}
 801e824:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 801e826:	460a      	mov	r2, r1
 801e828:	6841      	ldr	r1, [r0, #4]
 801e82a:	6800      	ldr	r0, [r0, #0]
 801e82c:	f7ff ff9c 	bl	801e768 <lfs_dir_commitattr>
}
 801e830:	bd08      	pop	{r3, pc}
	...

0801e834 <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 801e834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e838:	b08b      	sub	sp, #44	@ 0x2c
 801e83a:	4607      	mov	r7, r0
 801e83c:	460e      	mov	r6, r1
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801e83e:	684b      	ldr	r3, [r1, #4]
    const lfs_off_t end = lfs_alignup(
 801e840:	3314      	adds	r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801e842:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801e844:	6a51      	ldr	r1, [r2, #36]	@ 0x24
            lfs->cfg->prog_size);
 801e846:	6a12      	ldr	r2, [r2, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801e848:	428b      	cmp	r3, r1
 801e84a:	bf94      	ite	ls
 801e84c:	eb02 0803 	addls.w	r8, r2, r3
 801e850:	eb02 0801 	addhi.w	r8, r2, r1
 801e854:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
    return a - (a % alignment);
 801e858:	fbb8 f3f2 	udiv	r3, r8, r2
 801e85c:	fb02 8313 	mls	r3, r2, r3, r8
 801e860:	eba8 0803 	sub.w	r8, r8, r3
    uint32_t crc1 = 0;
 801e864:	2300      	movs	r3, #0
 801e866:	9305      	str	r3, [sp, #20]
    lfs_off_t off1 = 0;
 801e868:	469b      	mov	fp, r3
    while (commit->off < end) {
 801e86a:	e03c      	b.n	801e8e6 <lfs_dir_commitcrc+0xb2>
            int err = lfs_bd_read(lfs,
 801e86c:	2201      	movs	r2, #1
 801e86e:	9203      	str	r2, [sp, #12]
 801e870:	f10d 021b 	add.w	r2, sp, #27
 801e874:	9202      	str	r2, [sp, #8]
 801e876:	9401      	str	r4, [sp, #4]
 801e878:	6832      	ldr	r2, [r6, #0]
 801e87a:	9200      	str	r2, [sp, #0]
 801e87c:	463a      	mov	r2, r7
 801e87e:	2100      	movs	r1, #0
 801e880:	4638      	mov	r0, r7
 801e882:	f7fe f83d 	bl	801c900 <lfs_bd_read>
            if (err && err != LFS_ERR_CORRUPT) {
 801e886:	4603      	mov	r3, r0
 801e888:	b118      	cbz	r0, 801e892 <lfs_dir_commitcrc+0x5e>
 801e88a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e88e:	f040 80c0 	bne.w	801ea12 <lfs_dir_commitcrc+0x1de>
                    .size = lfs->cfg->prog_size,
 801e892:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e894:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 801e896:	9307      	str	r3, [sp, #28]
 801e898:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e89c:	9208      	str	r2, [sp, #32]
                err = lfs_bd_crc(lfs,
 801e89e:	aa08      	add	r2, sp, #32
 801e8a0:	9203      	str	r2, [sp, #12]
 801e8a2:	9302      	str	r3, [sp, #8]
 801e8a4:	9401      	str	r4, [sp, #4]
 801e8a6:	6832      	ldr	r2, [r6, #0]
 801e8a8:	9200      	str	r2, [sp, #0]
 801e8aa:	463a      	mov	r2, r7
 801e8ac:	2100      	movs	r1, #0
 801e8ae:	4638      	mov	r0, r7
 801e8b0:	f7fe fea8 	bl	801d604 <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801e8b4:	4603      	mov	r3, r0
 801e8b6:	b118      	cbz	r0, 801e8c0 <lfs_dir_commitcrc+0x8c>
 801e8b8:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e8bc:	f040 80a9 	bne.w	801ea12 <lfs_dir_commitcrc+0x1de>
                err = lfs_dir_commitattr(lfs, commit,
 801e8c0:	ab07      	add	r3, sp, #28
 801e8c2:	4a59      	ldr	r2, [pc, #356]	@ (801ea28 <lfs_dir_commitcrc+0x1f4>)
 801e8c4:	4631      	mov	r1, r6
 801e8c6:	4638      	mov	r0, r7
 801e8c8:	f7ff ff4e 	bl	801e768 <lfs_dir_commitattr>
                if (err) {
 801e8cc:	4603      	mov	r3, r0
 801e8ce:	b348      	cbz	r0, 801e924 <lfs_dir_commitcrc+0xf0>
 801e8d0:	e09f      	b.n	801ea12 <lfs_dir_commitcrc+0x1de>
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801e8d2:	2300      	movs	r3, #0
 801e8d4:	463a      	mov	r2, r7
 801e8d6:	4651      	mov	r1, sl
 801e8d8:	4638      	mov	r0, r7
 801e8da:	f7fe fd89 	bl	801d3f0 <lfs_bd_sync>
            if (err) {
 801e8de:	4603      	mov	r3, r0
 801e8e0:	2800      	cmp	r0, #0
 801e8e2:	f040 8096 	bne.w	801ea12 <lfs_dir_commitcrc+0x1de>
    while (commit->off < end) {
 801e8e6:	6874      	ldr	r4, [r6, #4]
 801e8e8:	4544      	cmp	r4, r8
 801e8ea:	d268      	bcs.n	801e9be <lfs_dir_commitcrc+0x18a>
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 801e8ec:	eba8 0304 	sub.w	r3, r8, r4
 801e8f0:	3b04      	subs	r3, #4
                + (commit->off+sizeof(lfs_tag_t)));
 801e8f2:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801e8f6:	4293      	cmp	r3, r2
 801e8f8:	bf94      	ite	ls
 801e8fa:	18e4      	addls	r4, r4, r3
 801e8fc:	18a4      	addhi	r4, r4, r2
        lfs_off_t noff = (
 801e8fe:	3404      	adds	r4, #4
        if (noff < end) {
 801e900:	4544      	cmp	r4, r8
 801e902:	d204      	bcs.n	801e90e <lfs_dir_commitcrc+0xda>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 801e904:	f1a8 0314 	sub.w	r3, r8, #20
    return (a < b) ? a : b;
 801e908:	429c      	cmp	r4, r3
 801e90a:	bf28      	it	cs
 801e90c:	461c      	movcs	r4, r3
        uint8_t eperturb = (uint8_t)-1;
 801e90e:	23ff      	movs	r3, #255	@ 0xff
 801e910:	f88d 301b 	strb.w	r3, [sp, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 801e914:	4544      	cmp	r4, r8
 801e916:	d305      	bcc.n	801e924 <lfs_dir_commitcrc+0xf0>
 801e918:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e91a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e91c:	6a1b      	ldr	r3, [r3, #32]
 801e91e:	1ad2      	subs	r2, r2, r3
 801e920:	42a2      	cmp	r2, r4
 801e922:	d2a3      	bcs.n	801e86c <lfs_dir_commitcrc+0x38>
        lfs_tag_t ntag = LFS_MKTAG(
 801e924:	f89d 201b 	ldrb.w	r2, [sp, #27]
 801e928:	43d2      	mvns	r2, r2
 801e92a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 801e92e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801e932:	6873      	ldr	r3, [r6, #4]
 801e934:	1ae5      	subs	r5, r4, r3
 801e936:	3d04      	subs	r5, #4
 801e938:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 801e93c:	f445 257f 	orr.w	r5, r5, #1044480	@ 0xff000
 801e940:	f445 6540 	orr.w	r5, r5, #3072	@ 0xc00
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 801e944:	68b3      	ldr	r3, [r6, #8]
 801e946:	406b      	eors	r3, r5
    return __builtin_bswap32(a);
 801e948:	ba1b      	rev	r3, r3
 801e94a:	9307      	str	r3, [sp, #28]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 801e94c:	f10d 091c 	add.w	r9, sp, #28
 801e950:	2204      	movs	r2, #4
 801e952:	4649      	mov	r1, r9
 801e954:	68f0      	ldr	r0, [r6, #12]
 801e956:	f002 fbb1 	bl	80210bc <lfs_crc>
 801e95a:	60f0      	str	r0, [r6, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 801e95c:	9008      	str	r0, [sp, #32]
        int err = lfs_bd_prog(lfs,
 801e95e:	f107 0a10 	add.w	sl, r7, #16
 801e962:	2308      	movs	r3, #8
 801e964:	9303      	str	r3, [sp, #12]
 801e966:	f8cd 9008 	str.w	r9, [sp, #8]
 801e96a:	6873      	ldr	r3, [r6, #4]
 801e96c:	9301      	str	r3, [sp, #4]
 801e96e:	6833      	ldr	r3, [r6, #0]
 801e970:	9300      	str	r3, [sp, #0]
 801e972:	2300      	movs	r3, #0
 801e974:	463a      	mov	r2, r7
 801e976:	4651      	mov	r1, sl
 801e978:	4638      	mov	r0, r7
 801e97a:	f7fe fcbf 	bl	801d2fc <lfs_bd_prog>
        if (err) {
 801e97e:	4603      	mov	r3, r0
 801e980:	2800      	cmp	r0, #0
 801e982:	d146      	bne.n	801ea12 <lfs_dir_commitcrc+0x1de>
        if (off1 == 0) {
 801e984:	f1bb 0f00 	cmp.w	fp, #0
 801e988:	d104      	bne.n	801e994 <lfs_dir_commitcrc+0x160>
            off1 = commit->off + sizeof(lfs_tag_t);
 801e98a:	6873      	ldr	r3, [r6, #4]
 801e98c:	f103 0b04 	add.w	fp, r3, #4
            crc1 = commit->crc;
 801e990:	68f3      	ldr	r3, [r6, #12]
 801e992:	9305      	str	r3, [sp, #20]
        commit->off = noff;
 801e994:	6074      	str	r4, [r6, #4]
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 801e996:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801e99a:	43db      	mvns	r3, r3
 801e99c:	061b      	lsls	r3, r3, #24
 801e99e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801e9a2:	406b      	eors	r3, r5
 801e9a4:	60b3      	str	r3, [r6, #8]
        commit->crc = 0xffffffff;
 801e9a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e9aa:	60f3      	str	r3, [r6, #12]
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 801e9ac:	4544      	cmp	r4, r8
 801e9ae:	d290      	bcs.n	801e8d2 <lfs_dir_commitcrc+0x9e>
 801e9b0:	697b      	ldr	r3, [r7, #20]
 801e9b2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801e9b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801e9b6:	4413      	add	r3, r2
 801e9b8:	42a3      	cmp	r3, r4
 801e9ba:	d894      	bhi.n	801e8e6 <lfs_dir_commitcrc+0xb2>
 801e9bc:	e789      	b.n	801e8d2 <lfs_dir_commitcrc+0x9e>
    lfs_off_t off = commit->begin;
 801e9be:	6933      	ldr	r3, [r6, #16]
    uint32_t crc = 0xffffffff;
 801e9c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e9c4:	9209      	str	r2, [sp, #36]	@ 0x24
    int err = lfs_bd_crc(lfs,
 801e9c6:	aa09      	add	r2, sp, #36	@ 0x24
 801e9c8:	9203      	str	r2, [sp, #12]
 801e9ca:	ebab 0203 	sub.w	r2, fp, r3
 801e9ce:	9202      	str	r2, [sp, #8]
 801e9d0:	9301      	str	r3, [sp, #4]
 801e9d2:	6833      	ldr	r3, [r6, #0]
 801e9d4:	9300      	str	r3, [sp, #0]
 801e9d6:	f10b 0304 	add.w	r3, fp, #4
 801e9da:	463a      	mov	r2, r7
 801e9dc:	2100      	movs	r1, #0
 801e9de:	4638      	mov	r0, r7
 801e9e0:	f7fe fe10 	bl	801d604 <lfs_bd_crc>
    if (err) {
 801e9e4:	4603      	mov	r3, r0
 801e9e6:	b9a0      	cbnz	r0, 801ea12 <lfs_dir_commitcrc+0x1de>
    if (crc != crc1) {
 801e9e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e9ea:	9a05      	ldr	r2, [sp, #20]
 801e9ec:	4293      	cmp	r3, r2
 801e9ee:	d114      	bne.n	801ea1a <lfs_dir_commitcrc+0x1e6>
    err = lfs_bd_crc(lfs,
 801e9f0:	ab09      	add	r3, sp, #36	@ 0x24
 801e9f2:	9303      	str	r3, [sp, #12]
 801e9f4:	2304      	movs	r3, #4
 801e9f6:	9302      	str	r3, [sp, #8]
 801e9f8:	f8cd b004 	str.w	fp, [sp, #4]
 801e9fc:	6832      	ldr	r2, [r6, #0]
 801e9fe:	9200      	str	r2, [sp, #0]
 801ea00:	463a      	mov	r2, r7
 801ea02:	2100      	movs	r1, #0
 801ea04:	4638      	mov	r0, r7
 801ea06:	f7fe fdfd 	bl	801d604 <lfs_bd_crc>
    if (err) {
 801ea0a:	4603      	mov	r3, r0
 801ea0c:	b908      	cbnz	r0, 801ea12 <lfs_dir_commitcrc+0x1de>
    if (crc != 0) {
 801ea0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ea10:	b932      	cbnz	r2, 801ea20 <lfs_dir_commitcrc+0x1ec>
}
 801ea12:	4618      	mov	r0, r3
 801ea14:	b00b      	add	sp, #44	@ 0x2c
 801ea16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801ea1a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801ea1e:	e7f8      	b.n	801ea12 <lfs_dir_commitcrc+0x1de>
        return LFS_ERR_CORRUPT;
 801ea20:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801ea24:	e7f5      	b.n	801ea12 <lfs_dir_commitcrc+0x1de>
 801ea26:	bf00      	nop
 801ea28:	5ffffc08 	.word	0x5ffffc08

0801ea2c <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801ea2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea30:	b09b      	sub	sp, #108	@ 0x6c
 801ea32:	4605      	mov	r5, r0
 801ea34:	460c      	mov	r4, r1
 801ea36:	4616      	mov	r6, r2
 801ea38:	461f      	mov	r7, r3
 801ea3a:	f8bd 8094 	ldrh.w	r8, [sp, #148]	@ 0x94
 801ea3e:	f8bd a098 	ldrh.w	sl, [sp, #152]	@ 0x98
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 801ea42:	f7fd fe91 	bl	801c768 <lfs_dir_needsrelocation>
    dir->rev += 1;
 801ea46:	68a3      	ldr	r3, [r4, #8]
 801ea48:	3301      	adds	r3, #1
 801ea4a:	60a3      	str	r3, [r4, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 801ea4c:	4681      	mov	r9, r0
 801ea4e:	2800      	cmp	r0, #0
 801ea50:	d034      	beq.n	801eabc <lfs_dir_compact+0x90>
 801ea52:	2300      	movs	r3, #0
 801ea54:	9314      	str	r3, [sp, #80]	@ 0x50
 801ea56:	2301      	movs	r3, #1
 801ea58:	9315      	str	r3, [sp, #84]	@ 0x54
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801ea5a:	6823      	ldr	r3, [r4, #0]
 801ea5c:	b373      	cbz	r3, 801eabc <lfs_dir_compact+0x90>
 801ea5e:	6862      	ldr	r2, [r4, #4]
 801ea60:	2a01      	cmp	r2, #1
 801ea62:	d02b      	beq.n	801eabc <lfs_dir_compact+0x90>
 801ea64:	2b01      	cmp	r3, #1
 801ea66:	d029      	beq.n	801eabc <lfs_dir_compact+0x90>
 801ea68:	b342      	cbz	r2, 801eabc <lfs_dir_compact+0x90>
    rcache->block = LFS_BLOCK_NULL;
 801ea6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ea6e:	612b      	str	r3, [r5, #16]
        if (!tired) {
 801ea70:	f1b9 0f00 	cmp.w	r9, #0
 801ea74:	f000 8103 	beq.w	801ec7e <lfs_dir_compact+0x252>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801ea78:	2300      	movs	r3, #0
 801ea7a:	9318      	str	r3, [sp, #96]	@ 0x60
 801ea7c:	2301      	movs	r3, #1
 801ea7e:	9319      	str	r3, [sp, #100]	@ 0x64
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801ea80:	6823      	ldr	r3, [r4, #0]
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	f000 8105 	beq.w	801ec92 <lfs_dir_compact+0x266>
 801ea88:	6862      	ldr	r2, [r4, #4]
 801ea8a:	2a01      	cmp	r2, #1
 801ea8c:	f000 8101 	beq.w	801ec92 <lfs_dir_compact+0x266>
 801ea90:	2b01      	cmp	r3, #1
 801ea92:	f000 80fe 	beq.w	801ec92 <lfs_dir_compact+0x266>
 801ea96:	2a00      	cmp	r2, #0
 801ea98:	f000 80fb 	beq.w	801ec92 <lfs_dir_compact+0x266>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 801ea9c:	1d21      	adds	r1, r4, #4
 801ea9e:	4628      	mov	r0, r5
 801eaa0:	f7ff f9d2 	bl	801de48 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 801eaa4:	4603      	mov	r3, r0
 801eaa6:	b330      	cbz	r0, 801eaf6 <lfs_dir_compact+0xca>
 801eaa8:	f110 0f1c 	cmn.w	r0, #28
 801eaac:	d11f      	bne.n	801eaee <lfs_dir_compact+0xc2>
 801eaae:	f1b9 0f00 	cmp.w	r9, #0
 801eab2:	d01c      	beq.n	801eaee <lfs_dir_compact+0xc2>
        relocated = true;
 801eab4:	46cb      	mov	fp, r9
        tired = false;
 801eab6:	f04f 0900 	mov.w	r9, #0
 801eaba:	e001      	b.n	801eac0 <lfs_dir_compact+0x94>
    bool relocated = false;
 801eabc:	f04f 0b00 	mov.w	fp, #0
                .block = dir->pair[1],
 801eac0:	6863      	ldr	r3, [r4, #4]
            struct lfs_commit commit = {
 801eac2:	930e      	str	r3, [sp, #56]	@ 0x38
 801eac4:	2300      	movs	r3, #0
 801eac6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801eac8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801eacc:	9210      	str	r2, [sp, #64]	@ 0x40
 801eace:	9211      	str	r2, [sp, #68]	@ 0x44
 801ead0:	9312      	str	r3, [sp, #72]	@ 0x48
                .end = (lfs->cfg->metadata_max ?
 801ead2:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801ead4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801ead6:	b19b      	cbz	r3, 801eb00 <lfs_dir_compact+0xd4>
 801ead8:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 801eada:	9313      	str	r3, [sp, #76]	@ 0x4c
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 801eadc:	6861      	ldr	r1, [r4, #4]
 801eade:	4628      	mov	r0, r5
 801eae0:	f7fd fe94 	bl	801c80c <lfs_bd_erase>
            if (err) {
 801eae4:	4603      	mov	r3, r0
 801eae6:	b170      	cbz	r0, 801eb06 <lfs_dir_compact+0xda>
                if (err == LFS_ERR_CORRUPT) {
 801eae8:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801eaec:	d0bd      	beq.n	801ea6a <lfs_dir_compact+0x3e>
}
 801eaee:	4618      	mov	r0, r3
 801eaf0:	b01b      	add	sp, #108	@ 0x6c
 801eaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tired = false;
 801eaf6:	f04f 0900 	mov.w	r9, #0
        relocated = true;
 801eafa:	f04f 0b01 	mov.w	fp, #1
 801eafe:	e7df      	b.n	801eac0 <lfs_dir_compact+0x94>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801eb00:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801eb02:	3b08      	subs	r3, #8
 801eb04:	e7e9      	b.n	801eada <lfs_dir_compact+0xae>
            err = lfs_dir_commitprog(lfs, &commit,
 801eb06:	2304      	movs	r3, #4
 801eb08:	f104 0208 	add.w	r2, r4, #8
 801eb0c:	a90e      	add	r1, sp, #56	@ 0x38
 801eb0e:	4628      	mov	r0, r5
 801eb10:	f7ff fe0a 	bl	801e728 <lfs_dir_commitprog>
            if (err) {
 801eb14:	4603      	mov	r3, r0
 801eb16:	b118      	cbz	r0, 801eb20 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 801eb18:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801eb1c:	d1e7      	bne.n	801eaee <lfs_dir_compact+0xc2>
 801eb1e:	e7a4      	b.n	801ea6a <lfs_dir_compact+0x3e>
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801eb20:	9516      	str	r5, [sp, #88]	@ 0x58
 801eb22:	ab0e      	add	r3, sp, #56	@ 0x38
 801eb24:	9317      	str	r3, [sp, #92]	@ 0x5c
            err = lfs_dir_traverse(lfs,
 801eb26:	ab16      	add	r3, sp, #88	@ 0x58
 801eb28:	9308      	str	r3, [sp, #32]
 801eb2a:	4b60      	ldr	r3, [pc, #384]	@ (801ecac <lfs_dir_compact+0x280>)
 801eb2c:	9307      	str	r3, [sp, #28]
 801eb2e:	f1c8 0300 	rsb	r3, r8, #0
 801eb32:	b21b      	sxth	r3, r3
 801eb34:	9306      	str	r3, [sp, #24]
 801eb36:	f8cd a014 	str.w	sl, [sp, #20]
 801eb3a:	f8cd 8010 	str.w	r8, [sp, #16]
 801eb3e:	2200      	movs	r2, #0
 801eb40:	9203      	str	r2, [sp, #12]
 801eb42:	4b5b      	ldr	r3, [pc, #364]	@ (801ecb0 <lfs_dir_compact+0x284>)
 801eb44:	9302      	str	r3, [sp, #8]
 801eb46:	9701      	str	r7, [sp, #4]
 801eb48:	9600      	str	r6, [sp, #0]
 801eb4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eb4e:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801eb50:	4628      	mov	r0, r5
 801eb52:	f7fe f919 	bl	801cd88 <lfs_dir_traverse>
            if (err) {
 801eb56:	4603      	mov	r3, r0
 801eb58:	b118      	cbz	r0, 801eb62 <lfs_dir_compact+0x136>
                if (err == LFS_ERR_CORRUPT) {
 801eb5a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801eb5e:	d1c6      	bne.n	801eaee <lfs_dir_compact+0xc2>
 801eb60:	e783      	b.n	801ea6a <lfs_dir_compact+0x3e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801eb62:	69a3      	ldr	r3, [r4, #24]
 801eb64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801eb68:	d015      	beq.n	801eb96 <lfs_dir_compact+0x16a>
 801eb6a:	69e3      	ldr	r3, [r4, #28]
 801eb6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801eb70:	d011      	beq.n	801eb96 <lfs_dir_compact+0x16a>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 801eb72:	7de2      	ldrb	r2, [r4, #23]
 801eb74:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 801eb78:	f104 0318 	add.w	r3, r4, #24
 801eb7c:	494d      	ldr	r1, [pc, #308]	@ (801ecb4 <lfs_dir_compact+0x288>)
 801eb7e:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 801eb82:	a90e      	add	r1, sp, #56	@ 0x38
 801eb84:	4628      	mov	r0, r5
 801eb86:	f7ff fdef 	bl	801e768 <lfs_dir_commitattr>
                if (err) {
 801eb8a:	4603      	mov	r3, r0
 801eb8c:	b118      	cbz	r0, 801eb96 <lfs_dir_compact+0x16a>
                    if (err == LFS_ERR_CORRUPT) {
 801eb8e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801eb92:	d1ac      	bne.n	801eaee <lfs_dir_compact+0xc2>
 801eb94:	e769      	b.n	801ea6a <lfs_dir_compact+0x3e>
            lfs_gstate_t delta = {0};
 801eb96:	2300      	movs	r3, #0
 801eb98:	930b      	str	r3, [sp, #44]	@ 0x2c
 801eb9a:	930c      	str	r3, [sp, #48]	@ 0x30
 801eb9c:	930d      	str	r3, [sp, #52]	@ 0x34
            if (!relocated) {
 801eb9e:	f1bb 0f00 	cmp.w	fp, #0
 801eba2:	d010      	beq.n	801ebc6 <lfs_dir_compact+0x19a>
            lfs_gstate_xor(&delta, &lfs->gdelta);
 801eba4:	f105 0148 	add.w	r1, r5, #72	@ 0x48
 801eba8:	a80b      	add	r0, sp, #44	@ 0x2c
 801ebaa:	f7fd fd13 	bl	801c5d4 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801ebae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ebb0:	f36f 0309 	bfc	r3, #0, #10
 801ebb4:	930b      	str	r3, [sp, #44]	@ 0x2c
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801ebb6:	aa0b      	add	r2, sp, #44	@ 0x2c
 801ebb8:	4621      	mov	r1, r4
 801ebba:	4628      	mov	r0, r5
 801ebbc:	f7fe f854 	bl	801cc68 <lfs_dir_getgstate>
            if (err) {
 801ebc0:	4603      	mov	r3, r0
 801ebc2:	b160      	cbz	r0, 801ebde <lfs_dir_compact+0x1b2>
 801ebc4:	e793      	b.n	801eaee <lfs_dir_compact+0xc2>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 801ebc6:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
 801ebca:	a80b      	add	r0, sp, #44	@ 0x2c
 801ebcc:	f7fd fd02 	bl	801c5d4 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 801ebd0:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 801ebd4:	a80b      	add	r0, sp, #44	@ 0x2c
 801ebd6:	f7fd fcfd 	bl	801c5d4 <lfs_gstate_xor>
 801ebda:	e7e3      	b.n	801eba4 <lfs_dir_compact+0x178>
    for (int i = 0; i < 3; i++) {
 801ebdc:	3301      	adds	r3, #1
 801ebde:	2b02      	cmp	r3, #2
 801ebe0:	dc08      	bgt.n	801ebf4 <lfs_dir_compact+0x1c8>
        if (((uint32_t*)a)[i] != 0) {
 801ebe2:	aa1a      	add	r2, sp, #104	@ 0x68
 801ebe4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801ebe8:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 801ebec:	2a00      	cmp	r2, #0
 801ebee:	d0f5      	beq.n	801ebdc <lfs_dir_compact+0x1b0>
            return false;
 801ebf0:	2300      	movs	r3, #0
 801ebf2:	e000      	b.n	801ebf6 <lfs_dir_compact+0x1ca>
    return true;
 801ebf4:	2301      	movs	r3, #1
            if (!lfs_gstate_iszero(&delta)) {
 801ebf6:	b963      	cbnz	r3, 801ec12 <lfs_dir_compact+0x1e6>
                err = lfs_dir_commitattr(lfs, &commit,
 801ebf8:	ab0b      	add	r3, sp, #44	@ 0x2c
 801ebfa:	4a2f      	ldr	r2, [pc, #188]	@ (801ecb8 <lfs_dir_compact+0x28c>)
 801ebfc:	a90e      	add	r1, sp, #56	@ 0x38
 801ebfe:	4628      	mov	r0, r5
 801ec00:	f7ff fdb2 	bl	801e768 <lfs_dir_commitattr>
                if (err) {
 801ec04:	4603      	mov	r3, r0
 801ec06:	b120      	cbz	r0, 801ec12 <lfs_dir_compact+0x1e6>
                    if (err == LFS_ERR_CORRUPT) {
 801ec08:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801ec0c:	f47f af6f 	bne.w	801eaee <lfs_dir_compact+0xc2>
 801ec10:	e72b      	b.n	801ea6a <lfs_dir_compact+0x3e>
            err = lfs_dir_commitcrc(lfs, &commit);
 801ec12:	a90e      	add	r1, sp, #56	@ 0x38
 801ec14:	4628      	mov	r0, r5
 801ec16:	f7ff fe0d 	bl	801e834 <lfs_dir_commitcrc>
            if (err) {
 801ec1a:	4603      	mov	r3, r0
 801ec1c:	b120      	cbz	r0, 801ec28 <lfs_dir_compact+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 801ec1e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801ec22:	f47f af64 	bne.w	801eaee <lfs_dir_compact+0xc2>
 801ec26:	e720      	b.n	801ea6a <lfs_dir_compact+0x3e>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801ec28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ec2a:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801ec2c:	6a12      	ldr	r2, [r2, #32]
 801ec2e:	fbb3 f1f2 	udiv	r1, r3, r2
 801ec32:	fb02 3311 	mls	r3, r2, r1, r3
 801ec36:	b9db      	cbnz	r3, 801ec70 <lfs_dir_compact+0x244>
    lfs_block_t t = pair[0];
 801ec38:	6823      	ldr	r3, [r4, #0]
    pair[0] = pair[1];
 801ec3a:	6862      	ldr	r2, [r4, #4]
 801ec3c:	6022      	str	r2, [r4, #0]
    pair[1] = t;
 801ec3e:	6063      	str	r3, [r4, #4]
            dir->count = end - begin;
 801ec40:	ebaa 0808 	sub.w	r8, sl, r8
 801ec44:	f8a4 8014 	strh.w	r8, [r4, #20]
            dir->off = commit.off;
 801ec48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ec4a:	60e3      	str	r3, [r4, #12]
            dir->etag = commit.ptag;
 801ec4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ec4e:	6123      	str	r3, [r4, #16]
            lfs->gdelta = (lfs_gstate_t){0};
 801ec50:	2200      	movs	r2, #0
 801ec52:	64aa      	str	r2, [r5, #72]	@ 0x48
 801ec54:	64ea      	str	r2, [r5, #76]	@ 0x4c
 801ec56:	652a      	str	r2, [r5, #80]	@ 0x50
            if (!relocated) {
 801ec58:	f1bb 0f00 	cmp.w	fp, #0
 801ec5c:	d106      	bne.n	801ec6c <lfs_dir_compact+0x240>
                lfs->gdisk = lfs->gstate;
 801ec5e:	f105 033c 	add.w	r3, r5, #60	@ 0x3c
 801ec62:	3530      	adds	r5, #48	@ 0x30
 801ec64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ec68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
 801ec6c:	465b      	mov	r3, fp
 801ec6e:	e73e      	b.n	801eaee <lfs_dir_compact+0xc2>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801ec70:	4b12      	ldr	r3, [pc, #72]	@ (801ecbc <lfs_dir_compact+0x290>)
 801ec72:	4a13      	ldr	r2, [pc, #76]	@ (801ecc0 <lfs_dir_compact+0x294>)
 801ec74:	f640 0106 	movw	r1, #2054	@ 0x806
 801ec78:	4812      	ldr	r0, [pc, #72]	@ (801ecc4 <lfs_dir_compact+0x298>)
 801ec7a:	f00c fcc7 	bl	802b60c <__assert_func>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 801ec7e:	4b12      	ldr	r3, [pc, #72]	@ (801ecc8 <lfs_dir_compact+0x29c>)
 801ec80:	9300      	str	r3, [sp, #0]
 801ec82:	6863      	ldr	r3, [r4, #4]
 801ec84:	f640 0218 	movw	r2, #2072	@ 0x818
 801ec88:	490e      	ldr	r1, [pc, #56]	@ (801ecc4 <lfs_dir_compact+0x298>)
 801ec8a:	4810      	ldr	r0, [pc, #64]	@ (801eccc <lfs_dir_compact+0x2a0>)
 801ec8c:	f00d f9e0 	bl	802c050 <printf>
 801ec90:	e6f2      	b.n	801ea78 <lfs_dir_compact+0x4c>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 801ec92:	4b0d      	ldr	r3, [pc, #52]	@ (801ecc8 <lfs_dir_compact+0x29c>)
 801ec94:	9300      	str	r3, [sp, #0]
 801ec96:	6863      	ldr	r3, [r4, #4]
 801ec98:	f640 021d 	movw	r2, #2077	@ 0x81d
 801ec9c:	4909      	ldr	r1, [pc, #36]	@ (801ecc4 <lfs_dir_compact+0x298>)
 801ec9e:	480c      	ldr	r0, [pc, #48]	@ (801ecd0 <lfs_dir_compact+0x2a4>)
 801eca0:	f00d f9d6 	bl	802c050 <printf>
            return LFS_ERR_NOSPC;
 801eca4:	f06f 031b 	mvn.w	r3, #27
 801eca8:	e721      	b.n	801eaee <lfs_dir_compact+0xc2>
 801ecaa:	bf00      	nop
 801ecac:	0801e823 	.word	0x0801e823
 801ecb0:	400ffc00 	.word	0x400ffc00
 801ecb4:	000ffc08 	.word	0x000ffc08
 801ecb8:	7ffffc0c 	.word	0x7ffffc0c
 801ecbc:	0803a434 	.word	0x0803a434
 801ecc0:	0803d548 	.word	0x0803d548
 801ecc4:	0803a198 	.word	0x0803a198
 801ecc8:	08038678 	.word	0x08038678
 801eccc:	0803a3b0 	.word	0x0803a3b0
 801ecd0:	0803a45c 	.word	0x0803a45c

0801ecd4 <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 801ecd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ecd8:	b08d      	sub	sp, #52	@ 0x34
 801ecda:	4605      	mov	r5, r0
 801ecdc:	460c      	mov	r4, r1
 801ecde:	4691      	mov	r9, r2
 801ece0:	461e      	mov	r6, r3
 801ece2:	f8bd 8054 	ldrh.w	r8, [sp, #84]	@ 0x54
    int err = lfs_dir_alloc(lfs, &tail);
 801ece6:	a904      	add	r1, sp, #16
 801ece8:	f7ff f906 	bl	801def8 <lfs_dir_alloc>
    if (err) {
 801ecec:	4607      	mov	r7, r0
 801ecee:	b118      	cbz	r0, 801ecf8 <lfs_dir_split+0x24>
}
 801ecf0:	4638      	mov	r0, r7
 801ecf2:	b00d      	add	sp, #52	@ 0x34
 801ecf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tail.split = dir->split;
 801ecf8:	7de3      	ldrb	r3, [r4, #23]
 801ecfa:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 801ecfe:	69a3      	ldr	r3, [r4, #24]
 801ed00:	930a      	str	r3, [sp, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 801ed02:	69e3      	ldr	r3, [r4, #28]
 801ed04:	930b      	str	r3, [sp, #44]	@ 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 801ed06:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801ed0a:	9302      	str	r3, [sp, #8]
 801ed0c:	f8cd 8004 	str.w	r8, [sp, #4]
 801ed10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ed12:	9300      	str	r3, [sp, #0]
 801ed14:	4633      	mov	r3, r6
 801ed16:	464a      	mov	r2, r9
 801ed18:	a904      	add	r1, sp, #16
 801ed1a:	4628      	mov	r0, r5
 801ed1c:	f7ff fe86 	bl	801ea2c <lfs_dir_compact>
    if (res < 0) {
 801ed20:	2800      	cmp	r0, #0
 801ed22:	db17      	blt.n	801ed54 <lfs_dir_split+0x80>
    dir->tail[0] = tail.pair[0];
 801ed24:	9904      	ldr	r1, [sp, #16]
 801ed26:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
 801ed28:	9a05      	ldr	r2, [sp, #20]
 801ed2a:	61e2      	str	r2, [r4, #28]
    dir->split = true;
 801ed2c:	2301      	movs	r3, #1
 801ed2e:	75e3      	strb	r3, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801ed30:	6823      	ldr	r3, [r4, #0]
 801ed32:	6a28      	ldr	r0, [r5, #32]
 801ed34:	4283      	cmp	r3, r0
 801ed36:	d007      	beq.n	801ed48 <lfs_dir_split+0x74>
 801ed38:	6866      	ldr	r6, [r4, #4]
 801ed3a:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 801ed3c:	42a6      	cmp	r6, r4
 801ed3e:	d003      	beq.n	801ed48 <lfs_dir_split+0x74>
 801ed40:	42a3      	cmp	r3, r4
 801ed42:	d001      	beq.n	801ed48 <lfs_dir_split+0x74>
 801ed44:	42b0      	cmp	r0, r6
 801ed46:	d1d3      	bne.n	801ecf0 <lfs_dir_split+0x1c>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 801ed48:	f1b8 0f00 	cmp.w	r8, #0
 801ed4c:	d1d0      	bne.n	801ecf0 <lfs_dir_split+0x1c>
        lfs->root[0] = tail.pair[0];
 801ed4e:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
 801ed50:	626a      	str	r2, [r5, #36]	@ 0x24
 801ed52:	e7cd      	b.n	801ecf0 <lfs_dir_split+0x1c>
        return res;
 801ed54:	4607      	mov	r7, r0
 801ed56:	e7cb      	b.n	801ecf0 <lfs_dir_split+0x1c>

0801ed58 <lfs_dir_splittingcompact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801ed58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed5c:	b091      	sub	sp, #68	@ 0x44
 801ed5e:	4607      	mov	r7, r0
 801ed60:	4615      	mov	r5, r2
 801ed62:	4699      	mov	r9, r3
 801ed64:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801ed68:	f8bd b06c 	ldrh.w	fp, [sp, #108]	@ 0x6c
 801ed6c:	f8bd 6070 	ldrh.w	r6, [sp, #112]	@ 0x70
 801ed70:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ed72:	e04c      	b.n	801ee0e <lfs_dir_splittingcompact+0xb6>
                    && size <= lfs_min(
 801ed74:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 801ed76:	6a08      	ldr	r0, [r1, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801ed78:	4403      	add	r3, r0
 801ed7a:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801ed7c:	fbb3 f1f0 	udiv	r1, r3, r0
 801ed80:	fb00 3111 	mls	r1, r0, r1, r3
 801ed84:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 801ed86:	4293      	cmp	r3, r2
 801ed88:	bf28      	it	cs
 801ed8a:	4613      	movcs	r3, r2
                    && size <= lfs_min(
 801ed8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ed8e:	429a      	cmp	r2, r3
 801ed90:	d92d      	bls.n	801edee <lfs_dir_splittingcompact+0x96>
            split = split + ((end - split) / 2);
 801ed92:	eb04 0458 	add.w	r4, r4, r8, lsr #1
        while (end - split > 1) {
 801ed96:	eba6 0804 	sub.w	r8, r6, r4
 801ed9a:	f1b8 0f01 	cmp.w	r8, #1
 801ed9e:	d926      	bls.n	801edee <lfs_dir_splittingcompact+0x96>
            lfs_size_t size = 0;
 801eda0:	2200      	movs	r2, #0
 801eda2:	920d      	str	r2, [sp, #52]	@ 0x34
            int err = lfs_dir_traverse(lfs,
 801eda4:	b2a1      	uxth	r1, r4
 801eda6:	ab0d      	add	r3, sp, #52	@ 0x34
 801eda8:	9308      	str	r3, [sp, #32]
 801edaa:	4b4d      	ldr	r3, [pc, #308]	@ (801eee0 <lfs_dir_splittingcompact+0x188>)
 801edac:	9307      	str	r3, [sp, #28]
 801edae:	424b      	negs	r3, r1
 801edb0:	b21b      	sxth	r3, r3
 801edb2:	9306      	str	r3, [sp, #24]
 801edb4:	9605      	str	r6, [sp, #20]
 801edb6:	9104      	str	r1, [sp, #16]
 801edb8:	9203      	str	r2, [sp, #12]
 801edba:	4b4a      	ldr	r3, [pc, #296]	@ (801eee4 <lfs_dir_splittingcompact+0x18c>)
 801edbc:	9302      	str	r3, [sp, #8]
 801edbe:	f8cd 9004 	str.w	r9, [sp, #4]
 801edc2:	9500      	str	r5, [sp, #0]
 801edc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801edc8:	4651      	mov	r1, sl
 801edca:	4638      	mov	r0, r7
 801edcc:	f7fd ffdc 	bl	801cd88 <lfs_dir_traverse>
            if (err) {
 801edd0:	4603      	mov	r3, r0
 801edd2:	2800      	cmp	r0, #0
 801edd4:	d15b      	bne.n	801ee8e <lfs_dir_splittingcompact+0x136>
            if (end - split < 0xff
 801edd6:	f1b8 0ffe 	cmp.w	r8, #254	@ 0xfe
 801edda:	d8da      	bhi.n	801ed92 <lfs_dir_splittingcompact+0x3a>
                        lfs->cfg->block_size - 40,
 801eddc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801edde:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
                    && size <= lfs_min(
 801ede0:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
                            (lfs->cfg->metadata_max
 801ede4:	6d48      	ldr	r0, [r1, #84]	@ 0x54
                    && size <= lfs_min(
 801ede6:	2800      	cmp	r0, #0
 801ede8:	d0c4      	beq.n	801ed74 <lfs_dir_splittingcompact+0x1c>
 801edea:	0843      	lsrs	r3, r0, #1
 801edec:	e7c3      	b.n	801ed76 <lfs_dir_splittingcompact+0x1e>
        if (split == begin) {
 801edee:	455c      	cmp	r4, fp
 801edf0:	d022      	beq.n	801ee38 <lfs_dir_splittingcompact+0xe0>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801edf2:	b2a4      	uxth	r4, r4
 801edf4:	9602      	str	r6, [sp, #8]
 801edf6:	9401      	str	r4, [sp, #4]
 801edf8:	f8cd a000 	str.w	sl, [sp]
 801edfc:	464b      	mov	r3, r9
 801edfe:	462a      	mov	r2, r5
 801ee00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ee02:	4638      	mov	r0, r7
 801ee04:	f7ff ff66 	bl	801ecd4 <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
 801ee08:	4603      	mov	r3, r0
 801ee0a:	b910      	cbnz	r0, 801ee12 <lfs_dir_splittingcompact+0xba>
            end = split;
 801ee0c:	4626      	mov	r6, r4
        lfs_size_t split = begin;
 801ee0e:	465c      	mov	r4, fp
        while (end - split > 1) {
 801ee10:	e7c1      	b.n	801ed96 <lfs_dir_splittingcompact+0x3e>
        if (err && err != LFS_ERR_NOSPC) {
 801ee12:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 801ee16:	f110 0f1c 	cmn.w	r0, #28
 801ee1a:	d138      	bne.n	801ee8e <lfs_dir_splittingcompact+0x136>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 801ee1c:	4b32      	ldr	r3, [pc, #200]	@ (801eee8 <lfs_dir_splittingcompact+0x190>)
 801ee1e:	9301      	str	r3, [sp, #4]
 801ee20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ee24:	9300      	str	r3, [sp, #0]
 801ee26:	f8d8 3000 	ldr.w	r3, [r8]
 801ee2a:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 801ee2e:	492f      	ldr	r1, [pc, #188]	@ (801eeec <lfs_dir_splittingcompact+0x194>)
 801ee30:	482f      	ldr	r0, [pc, #188]	@ (801eef0 <lfs_dir_splittingcompact+0x198>)
 801ee32:	f00d f90d 	bl	802c050 <printf>
            break;
 801ee36:	e001      	b.n	801ee3c <lfs_dir_splittingcompact+0xe4>
 801ee38:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
    if (lfs_dir_needsrelocation(lfs, dir)
 801ee3c:	4641      	mov	r1, r8
 801ee3e:	4638      	mov	r0, r7
 801ee40:	f7fd fc92 	bl	801c768 <lfs_dir_needsrelocation>
 801ee44:	b1b8      	cbz	r0, 801ee76 <lfs_dir_splittingcompact+0x11e>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801ee46:	2300      	movs	r3, #0
 801ee48:	930e      	str	r3, [sp, #56]	@ 0x38
 801ee4a:	2301      	movs	r3, #1
 801ee4c:	930f      	str	r3, [sp, #60]	@ 0x3c
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801ee4e:	f8d8 2000 	ldr.w	r2, [r8]
 801ee52:	b132      	cbz	r2, 801ee62 <lfs_dir_splittingcompact+0x10a>
 801ee54:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ee58:	2b01      	cmp	r3, #1
 801ee5a:	d002      	beq.n	801ee62 <lfs_dir_splittingcompact+0x10a>
 801ee5c:	2a01      	cmp	r2, #1
 801ee5e:	d000      	beq.n	801ee62 <lfs_dir_splittingcompact+0x10a>
 801ee60:	b94b      	cbnz	r3, 801ee76 <lfs_dir_splittingcompact+0x11e>
        lfs_ssize_t size = lfs_fs_size_(lfs);
 801ee62:	4638      	mov	r0, r7
 801ee64:	f7ff fbf0 	bl	801e648 <lfs_fs_size_>
        if (size < 0) {
 801ee68:	1e03      	subs	r3, r0, #0
 801ee6a:	db10      	blt.n	801ee8e <lfs_dir_splittingcompact+0x136>
        if (lfs->block_count - size > lfs->block_count/8) {
 801ee6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801ee6e:	1ad3      	subs	r3, r2, r3
 801ee70:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 801ee74:	d80f      	bhi.n	801ee96 <lfs_dir_splittingcompact+0x13e>
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 801ee76:	9602      	str	r6, [sp, #8]
 801ee78:	f8cd b004 	str.w	fp, [sp, #4]
 801ee7c:	f8cd a000 	str.w	sl, [sp]
 801ee80:	464b      	mov	r3, r9
 801ee82:	462a      	mov	r2, r5
 801ee84:	4641      	mov	r1, r8
 801ee86:	4638      	mov	r0, r7
 801ee88:	f7ff fdd0 	bl	801ea2c <lfs_dir_compact>
 801ee8c:	4603      	mov	r3, r0
}
 801ee8e:	4618      	mov	r0, r3
 801ee90:	b011      	add	sp, #68	@ 0x44
 801ee92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 801ee96:	4b14      	ldr	r3, [pc, #80]	@ (801eee8 <lfs_dir_splittingcompact+0x190>)
 801ee98:	9300      	str	r3, [sp, #0]
 801ee9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ee9e:	f640 0286 	movw	r2, #2182	@ 0x886
 801eea2:	4912      	ldr	r1, [pc, #72]	@ (801eeec <lfs_dir_splittingcompact+0x194>)
 801eea4:	4813      	ldr	r0, [pc, #76]	@ (801eef4 <lfs_dir_splittingcompact+0x19c>)
 801eea6:	f00d f8d3 	bl	802c050 <printf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801eeaa:	9602      	str	r6, [sp, #8]
 801eeac:	f8cd b004 	str.w	fp, [sp, #4]
 801eeb0:	f8cd a000 	str.w	sl, [sp]
 801eeb4:	464b      	mov	r3, r9
 801eeb6:	462a      	mov	r2, r5
 801eeb8:	4641      	mov	r1, r8
 801eeba:	4638      	mov	r0, r7
 801eebc:	f7ff ff0a 	bl	801ecd4 <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
 801eec0:	4603      	mov	r3, r0
 801eec2:	b150      	cbz	r0, 801eeda <lfs_dir_splittingcompact+0x182>
 801eec4:	f110 0f1c 	cmn.w	r0, #28
 801eec8:	d1e1      	bne.n	801ee8e <lfs_dir_splittingcompact+0x136>
                LFS_WARN("Unable to expand superblock");
 801eeca:	4b07      	ldr	r3, [pc, #28]	@ (801eee8 <lfs_dir_splittingcompact+0x190>)
 801eecc:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 801eed0:	4906      	ldr	r1, [pc, #24]	@ (801eeec <lfs_dir_splittingcompact+0x194>)
 801eed2:	4809      	ldr	r0, [pc, #36]	@ (801eef8 <lfs_dir_splittingcompact+0x1a0>)
 801eed4:	f00d f8bc 	bl	802c050 <printf>
 801eed8:	e7cd      	b.n	801ee76 <lfs_dir_splittingcompact+0x11e>
                end = 1;
 801eeda:	2601      	movs	r6, #1
 801eedc:	e7cb      	b.n	801ee76 <lfs_dir_splittingcompact+0x11e>
 801eede:	bf00      	nop
 801eee0:	0801c74d 	.word	0x0801c74d
 801eee4:	400ffc00 	.word	0x400ffc00
 801eee8:	08038678 	.word	0x08038678
 801eeec:	0803a198 	.word	0x0803a198
 801eef0:	0803a494 	.word	0x0803a494
 801eef4:	0803a4c4 	.word	0x0803a4c4
 801eef8:	0803a4f4 	.word	0x0803a4f4

0801eefc <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
 801eefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef00:	b09b      	sub	sp, #108	@ 0x6c
 801ef02:	4607      	mov	r7, r0
 801ef04:	460e      	mov	r6, r1
 801ef06:	4691      	mov	r9, r2
 801ef08:	461d      	mov	r5, r3
 801ef0a:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
    for (int i = 0; i < attrcount; i++) {
 801ef0e:	2300      	movs	r3, #0
    bool hasdelete = false;
 801ef10:	469c      	mov	ip, r3
    for (int i = 0; i < attrcount; i++) {
 801ef12:	e003      	b.n	801ef1c <lfs_dir_relocatingcommit+0x20>
            dir->count += 1;
 801ef14:	8ab2      	ldrh	r2, [r6, #20]
 801ef16:	3201      	adds	r2, #1
 801ef18:	82b2      	strh	r2, [r6, #20]
    for (int i = 0; i < attrcount; i++) {
 801ef1a:	3301      	adds	r3, #1
 801ef1c:	4543      	cmp	r3, r8
 801ef1e:	da2d      	bge.n	801ef7c <lfs_dir_relocatingcommit+0x80>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801ef20:	00d8      	lsls	r0, r3, #3
 801ef22:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 801ef26:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801ef2a:	0d11      	lsrs	r1, r2, #20
 801ef2c:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801ef30:	f240 4e01 	movw	lr, #1025	@ 0x401
 801ef34:	4572      	cmp	r2, lr
 801ef36:	d0ed      	beq.n	801ef14 <lfs_dir_relocatingcommit+0x18>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 801ef38:	f240 4eff 	movw	lr, #1279	@ 0x4ff
 801ef3c:	4572      	cmp	r2, lr
 801ef3e:	d00f      	beq.n	801ef60 <lfs_dir_relocatingcommit+0x64>
    return (tag & 0x70000000) >> 20;
 801ef40:	f401 61e0 	and.w	r1, r1, #1792	@ 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 801ef44:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801ef48:	d1e7      	bne.n	801ef1a <lfs_dir_relocatingcommit+0x1e>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 801ef4a:	6862      	ldr	r2, [r4, #4]
 801ef4c:	6812      	ldr	r2, [r2, #0]
 801ef4e:	61b2      	str	r2, [r6, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 801ef50:	6862      	ldr	r2, [r4, #4]
 801ef52:	6852      	ldr	r2, [r2, #4]
 801ef54:	61f2      	str	r2, [r6, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 801ef56:	582a      	ldr	r2, [r5, r0]
 801ef58:	f3c2 5200 	ubfx	r2, r2, #20, #1
 801ef5c:	75f2      	strb	r2, [r6, #23]
            lfs_pair_fromle32(dir->tail);
 801ef5e:	e7dc      	b.n	801ef1a <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801ef60:	8ab2      	ldrh	r2, [r6, #20]
 801ef62:	b122      	cbz	r2, 801ef6e <lfs_dir_relocatingcommit+0x72>
            dir->count -= 1;
 801ef64:	3a01      	subs	r2, #1
 801ef66:	82b2      	strh	r2, [r6, #20]
            hasdelete = true;
 801ef68:	f04f 0c01 	mov.w	ip, #1
 801ef6c:	e7d5      	b.n	801ef1a <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801ef6e:	4b9f      	ldr	r3, [pc, #636]	@ (801f1ec <lfs_dir_relocatingcommit+0x2f0>)
 801ef70:	4a9f      	ldr	r2, [pc, #636]	@ (801f1f0 <lfs_dir_relocatingcommit+0x2f4>)
 801ef72:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 801ef76:	489f      	ldr	r0, [pc, #636]	@ (801f1f4 <lfs_dir_relocatingcommit+0x2f8>)
 801ef78:	f00c fb48 	bl	802b60c <__assert_func>
    if (hasdelete && dir->count == 0) {
 801ef7c:	f1bc 0f00 	cmp.w	ip, #0
 801ef80:	d01b      	beq.n	801efba <lfs_dir_relocatingcommit+0xbe>
 801ef82:	8ab3      	ldrh	r3, [r6, #20]
 801ef84:	b9cb      	cbnz	r3, 801efba <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801ef86:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ef88:	b15b      	cbz	r3, 801efa2 <lfs_dir_relocatingcommit+0xa6>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 801ef8a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801ef8c:	4631      	mov	r1, r6
 801ef8e:	4638      	mov	r0, r7
 801ef90:	f7ff fb6a 	bl	801e668 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801ef94:	4682      	mov	sl, r0
 801ef96:	b158      	cbz	r0, 801efb0 <lfs_dir_relocatingcommit+0xb4>
 801ef98:	f110 0f02 	cmn.w	r0, #2
 801ef9c:	f040 8157 	bne.w	801f24e <lfs_dir_relocatingcommit+0x352>
 801efa0:	e00b      	b.n	801efba <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801efa2:	4b95      	ldr	r3, [pc, #596]	@ (801f1f8 <lfs_dir_relocatingcommit+0x2fc>)
 801efa4:	4a92      	ldr	r2, [pc, #584]	@ (801f1f0 <lfs_dir_relocatingcommit+0x2f4>)
 801efa6:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 801efaa:	4892      	ldr	r0, [pc, #584]	@ (801f1f4 <lfs_dir_relocatingcommit+0x2f8>)
 801efac:	f00c fb2e 	bl	802b60c <__assert_func>
        if (err != LFS_ERR_NOENT && pdir->split) {
 801efb0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801efb2:	7ddb      	ldrb	r3, [r3, #23]
 801efb4:	2b00      	cmp	r3, #0
 801efb6:	f040 80bd 	bne.w	801f134 <lfs_dir_relocatingcommit+0x238>
    if (dir->erased) {
 801efba:	7db4      	ldrb	r4, [r6, #22]
 801efbc:	2c00      	cmp	r4, #0
 801efbe:	d02e      	beq.n	801f01e <lfs_dir_relocatingcommit+0x122>
            .block = dir->pair[0],
 801efc0:	6833      	ldr	r3, [r6, #0]
        struct lfs_commit commit = {
 801efc2:	9310      	str	r3, [sp, #64]	@ 0x40
            .off = dir->off,
 801efc4:	68f3      	ldr	r3, [r6, #12]
        struct lfs_commit commit = {
 801efc6:	9311      	str	r3, [sp, #68]	@ 0x44
            .ptag = dir->etag,
 801efc8:	6932      	ldr	r2, [r6, #16]
        struct lfs_commit commit = {
 801efca:	9212      	str	r2, [sp, #72]	@ 0x48
 801efcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801efd0:	9213      	str	r2, [sp, #76]	@ 0x4c
 801efd2:	9314      	str	r3, [sp, #80]	@ 0x50
            .end = (lfs->cfg->metadata_max ?
 801efd4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801efd6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801efd8:	2b00      	cmp	r3, #0
 801efda:	d03c      	beq.n	801f056 <lfs_dir_relocatingcommit+0x15a>
 801efdc:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 801efde:	9315      	str	r3, [sp, #84]	@ 0x54
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801efe0:	9718      	str	r7, [sp, #96]	@ 0x60
 801efe2:	ab10      	add	r3, sp, #64	@ 0x40
 801efe4:	9319      	str	r3, [sp, #100]	@ 0x64
        int err = lfs_dir_traverse(lfs,
 801efe6:	ab18      	add	r3, sp, #96	@ 0x60
 801efe8:	9308      	str	r3, [sp, #32]
 801efea:	4b84      	ldr	r3, [pc, #528]	@ (801f1fc <lfs_dir_relocatingcommit+0x300>)
 801efec:	9307      	str	r3, [sp, #28]
 801efee:	2300      	movs	r3, #0
 801eff0:	9306      	str	r3, [sp, #24]
 801eff2:	9305      	str	r3, [sp, #20]
 801eff4:	9304      	str	r3, [sp, #16]
 801eff6:	9303      	str	r3, [sp, #12]
 801eff8:	9302      	str	r3, [sp, #8]
 801effa:	f8cd 8004 	str.w	r8, [sp, #4]
 801effe:	9500      	str	r5, [sp, #0]
 801f000:	6933      	ldr	r3, [r6, #16]
 801f002:	68f2      	ldr	r2, [r6, #12]
 801f004:	4631      	mov	r1, r6
 801f006:	4638      	mov	r0, r7
 801f008:	f7fd febe 	bl	801cd88 <lfs_dir_traverse>
        if (err) {
 801f00c:	4682      	mov	sl, r0
 801f00e:	b328      	cbz	r0, 801f05c <lfs_dir_relocatingcommit+0x160>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801f010:	f110 0f1c 	cmn.w	r0, #28
 801f014:	d003      	beq.n	801f01e <lfs_dir_relocatingcommit+0x122>
 801f016:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801f01a:	f040 8118 	bne.w	801f24e <lfs_dir_relocatingcommit+0x352>
    rcache->block = LFS_BLOCK_NULL;
 801f01e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f022:	613b      	str	r3, [r7, #16]
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 801f024:	8ab3      	ldrh	r3, [r6, #20]
 801f026:	9302      	str	r3, [sp, #8]
 801f028:	2300      	movs	r3, #0
 801f02a:	9301      	str	r3, [sp, #4]
 801f02c:	9600      	str	r6, [sp, #0]
 801f02e:	4643      	mov	r3, r8
 801f030:	462a      	mov	r2, r5
 801f032:	4631      	mov	r1, r6
 801f034:	4638      	mov	r0, r7
 801f036:	f7ff fe8f 	bl	801ed58 <lfs_dir_splittingcompact>
    if (state < 0) {
 801f03a:	1e01      	subs	r1, r0, #0
 801f03c:	f2c0 8104 	blt.w	801f248 <lfs_dir_relocatingcommit+0x34c>
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 801f040:	f8d9 b000 	ldr.w	fp, [r9]
 801f044:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 801f048:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801f04c:	9217      	str	r2, [sp, #92]	@ 0x5c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801f04e:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 801f050:	4692      	mov	sl, r2
 801f052:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f054:	e0d9      	b.n	801f20a <lfs_dir_relocatingcommit+0x30e>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801f056:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801f058:	3b08      	subs	r3, #8
 801f05a:	e7c0      	b.n	801efde <lfs_dir_relocatingcommit+0xe2>
        lfs_gstate_t delta = {0};
 801f05c:	2300      	movs	r3, #0
 801f05e:	930d      	str	r3, [sp, #52]	@ 0x34
 801f060:	930e      	str	r3, [sp, #56]	@ 0x38
 801f062:	930f      	str	r3, [sp, #60]	@ 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
 801f064:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801f068:	a80d      	add	r0, sp, #52	@ 0x34
 801f06a:	f7fd fab3 	bl	801c5d4 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 801f06e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 801f072:	a80d      	add	r0, sp, #52	@ 0x34
 801f074:	f7fd faae 	bl	801c5d4 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 801f078:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801f07c:	a80d      	add	r0, sp, #52	@ 0x34
 801f07e:	f7fd faa9 	bl	801c5d4 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801f082:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f084:	f36f 0309 	bfc	r3, #0, #10
 801f088:	930d      	str	r3, [sp, #52]	@ 0x34
    for (int i = 0; i < 3; i++) {
 801f08a:	e001      	b.n	801f090 <lfs_dir_relocatingcommit+0x194>
 801f08c:	f10a 0a01 	add.w	sl, sl, #1
 801f090:	f1ba 0f02 	cmp.w	sl, #2
 801f094:	dc07      	bgt.n	801f0a6 <lfs_dir_relocatingcommit+0x1aa>
        if (((uint32_t*)a)[i] != 0) {
 801f096:	ab1a      	add	r3, sp, #104	@ 0x68
 801f098:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801f09c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 801f0a0:	2b00      	cmp	r3, #0
 801f0a2:	d0f3      	beq.n	801f08c <lfs_dir_relocatingcommit+0x190>
            return false;
 801f0a4:	2400      	movs	r4, #0
        if (!lfs_gstate_iszero(&delta)) {
 801f0a6:	b9c4      	cbnz	r4, 801f0da <lfs_dir_relocatingcommit+0x1de>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801f0a8:	aa0d      	add	r2, sp, #52	@ 0x34
 801f0aa:	4631      	mov	r1, r6
 801f0ac:	4638      	mov	r0, r7
 801f0ae:	f7fd fddb 	bl	801cc68 <lfs_dir_getgstate>
            if (err) {
 801f0b2:	4682      	mov	sl, r0
 801f0b4:	2800      	cmp	r0, #0
 801f0b6:	f040 80ca 	bne.w	801f24e <lfs_dir_relocatingcommit+0x352>
            err = lfs_dir_commitattr(lfs, &commit,
 801f0ba:	ab0d      	add	r3, sp, #52	@ 0x34
 801f0bc:	4a50      	ldr	r2, [pc, #320]	@ (801f200 <lfs_dir_relocatingcommit+0x304>)
 801f0be:	a910      	add	r1, sp, #64	@ 0x40
 801f0c0:	4638      	mov	r0, r7
 801f0c2:	f7ff fb51 	bl	801e768 <lfs_dir_commitattr>
            if (err) {
 801f0c6:	4682      	mov	sl, r0
 801f0c8:	b138      	cbz	r0, 801f0da <lfs_dir_relocatingcommit+0x1de>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801f0ca:	f110 0f1c 	cmn.w	r0, #28
 801f0ce:	d0a6      	beq.n	801f01e <lfs_dir_relocatingcommit+0x122>
 801f0d0:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801f0d4:	f040 80bb 	bne.w	801f24e <lfs_dir_relocatingcommit+0x352>
 801f0d8:	e7a1      	b.n	801f01e <lfs_dir_relocatingcommit+0x122>
        err = lfs_dir_commitcrc(lfs, &commit);
 801f0da:	a910      	add	r1, sp, #64	@ 0x40
 801f0dc:	4638      	mov	r0, r7
 801f0de:	f7ff fba9 	bl	801e834 <lfs_dir_commitcrc>
        if (err) {
 801f0e2:	4682      	mov	sl, r0
 801f0e4:	b138      	cbz	r0, 801f0f6 <lfs_dir_relocatingcommit+0x1fa>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801f0e6:	f110 0f1c 	cmn.w	r0, #28
 801f0ea:	d098      	beq.n	801f01e <lfs_dir_relocatingcommit+0x122>
 801f0ec:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801f0f0:	f040 80ad 	bne.w	801f24e <lfs_dir_relocatingcommit+0x352>
 801f0f4:	e793      	b.n	801f01e <lfs_dir_relocatingcommit+0x122>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801f0f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f0f8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801f0fa:	6a11      	ldr	r1, [r2, #32]
 801f0fc:	fbb3 f2f1 	udiv	r2, r3, r1
 801f100:	fb01 3212 	mls	r2, r1, r2, r3
 801f104:	b97a      	cbnz	r2, 801f126 <lfs_dir_relocatingcommit+0x22a>
        dir->off = commit.off;
 801f106:	60f3      	str	r3, [r6, #12]
        dir->etag = commit.ptag;
 801f108:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f10a:	6133      	str	r3, [r6, #16]
        lfs->gdisk = lfs->gstate;
 801f10c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801f110:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f114:	ca07      	ldmia	r2, {r0, r1, r2}
 801f116:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 801f11a:	2200      	movs	r2, #0
 801f11c:	64ba      	str	r2, [r7, #72]	@ 0x48
 801f11e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801f120:	653a      	str	r2, [r7, #80]	@ 0x50
    int state = 0;
 801f122:	4651      	mov	r1, sl
 801f124:	e78c      	b.n	801f040 <lfs_dir_relocatingcommit+0x144>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801f126:	4b37      	ldr	r3, [pc, #220]	@ (801f204 <lfs_dir_relocatingcommit+0x308>)
 801f128:	4a31      	ldr	r2, [pc, #196]	@ (801f1f0 <lfs_dir_relocatingcommit+0x2f4>)
 801f12a:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 801f12e:	4831      	ldr	r0, [pc, #196]	@ (801f1f4 <lfs_dir_relocatingcommit+0x2f8>)
 801f130:	f00c fa6c 	bl	802b60c <__assert_func>
            state = LFS_OK_DROPPED;
 801f134:	2102      	movs	r1, #2
 801f136:	e783      	b.n	801f040 <lfs_dir_relocatingcommit+0x144>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 801f138:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801f13c:	f3c1 2089 	ubfx	r0, r1, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801f140:	4584      	cmp	ip, r0
 801f142:	d10e      	bne.n	801f162 <lfs_dir_relocatingcommit+0x266>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 801f144:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801f148:	60a2      	str	r2, [r4, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 801f14a:	60e2      	str	r2, [r4, #12]
                for (int i = 0; i < attrcount; i++) {
 801f14c:	3301      	adds	r3, #1
 801f14e:	4543      	cmp	r3, r8
 801f150:	da34      	bge.n	801f1bc <lfs_dir_relocatingcommit+0x2c0>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801f152:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801f156:	f3c1 520a 	ubfx	r2, r1, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801f15a:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801f15e:	4282      	cmp	r2, r0
 801f160:	d0ea      	beq.n	801f138 <lfs_dir_relocatingcommit+0x23c>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801f162:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801f166:	4282      	cmp	r2, r0
 801f168:	d011      	beq.n	801f18e <lfs_dir_relocatingcommit+0x292>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801f16a:	f240 4001 	movw	r0, #1025	@ 0x401
 801f16e:	4282      	cmp	r2, r0
 801f170:	d1ec      	bne.n	801f14c <lfs_dir_relocatingcommit+0x250>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 801f172:	88a2      	ldrh	r2, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801f174:	f3c1 2189 	ubfx	r1, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801f178:	428a      	cmp	r2, r1
 801f17a:	d3e7      	bcc.n	801f14c <lfs_dir_relocatingcommit+0x250>
                        d->id += 1;
 801f17c:	3201      	adds	r2, #1
 801f17e:	80a2      	strh	r2, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801f180:	79a2      	ldrb	r2, [r4, #6]
 801f182:	2a02      	cmp	r2, #2
 801f184:	d1e2      	bne.n	801f14c <lfs_dir_relocatingcommit+0x250>
                            ((lfs_dir_t*)d)->pos += 1;
 801f186:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801f188:	3201      	adds	r2, #1
 801f18a:	62a2      	str	r2, [r4, #40]	@ 0x28
 801f18c:	e7de      	b.n	801f14c <lfs_dir_relocatingcommit+0x250>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 801f18e:	88a0      	ldrh	r0, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801f190:	f3c1 2c89 	ubfx	ip, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801f194:	4560      	cmp	r0, ip
 801f196:	d9e8      	bls.n	801f16a <lfs_dir_relocatingcommit+0x26e>
                        d->id -= 1;
 801f198:	3801      	subs	r0, #1
 801f19a:	80a0      	strh	r0, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801f19c:	79a2      	ldrb	r2, [r4, #6]
 801f19e:	2a02      	cmp	r2, #2
 801f1a0:	d1d4      	bne.n	801f14c <lfs_dir_relocatingcommit+0x250>
                            ((lfs_dir_t*)d)->pos -= 1;
 801f1a2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801f1a4:	3a01      	subs	r2, #1
 801f1a6:	62a2      	str	r2, [r4, #40]	@ 0x28
 801f1a8:	e7d0      	b.n	801f14c <lfs_dir_relocatingcommit+0x250>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 801f1aa:	f104 0220 	add.w	r2, r4, #32
 801f1ae:	f104 0108 	add.w	r1, r4, #8
 801f1b2:	4638      	mov	r0, r7
 801f1b4:	f7fe fd3a 	bl	801dc2c <lfs_dir_fetch>
                if (err) {
 801f1b8:	2800      	cmp	r0, #0
 801f1ba:	d147      	bne.n	801f24c <lfs_dir_relocatingcommit+0x350>
            while (d->id >= d->m.count && d->m.split) {
 801f1bc:	88a3      	ldrh	r3, [r4, #4]
 801f1be:	8ba1      	ldrh	r1, [r4, #28]
 801f1c0:	428b      	cmp	r3, r1
 801f1c2:	d321      	bcc.n	801f208 <lfs_dir_relocatingcommit+0x30c>
 801f1c4:	7fe2      	ldrb	r2, [r4, #31]
 801f1c6:	b1fa      	cbz	r2, 801f208 <lfs_dir_relocatingcommit+0x30c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801f1c8:	6a22      	ldr	r2, [r4, #32]
 801f1ca:	6a38      	ldr	r0, [r7, #32]
 801f1cc:	4282      	cmp	r2, r0
 801f1ce:	d0ec      	beq.n	801f1aa <lfs_dir_relocatingcommit+0x2ae>
 801f1d0:	f8d4 e024 	ldr.w	lr, [r4, #36]	@ 0x24
 801f1d4:	f8d7 c024 	ldr.w	ip, [r7, #36]	@ 0x24
 801f1d8:	45e6      	cmp	lr, ip
 801f1da:	d0e6      	beq.n	801f1aa <lfs_dir_relocatingcommit+0x2ae>
 801f1dc:	4562      	cmp	r2, ip
 801f1de:	d0e4      	beq.n	801f1aa <lfs_dir_relocatingcommit+0x2ae>
 801f1e0:	4570      	cmp	r0, lr
 801f1e2:	d0e2      	beq.n	801f1aa <lfs_dir_relocatingcommit+0x2ae>
                    d->id -= d->m.count;
 801f1e4:	1a5b      	subs	r3, r3, r1
 801f1e6:	80a3      	strh	r3, [r4, #4]
 801f1e8:	e7df      	b.n	801f1aa <lfs_dir_relocatingcommit+0x2ae>
 801f1ea:	bf00      	nop
 801f1ec:	0803a520 	.word	0x0803a520
 801f1f0:	0803d578 	.word	0x0803d578
 801f1f4:	0803a198 	.word	0x0803a198
 801f1f8:	0803a530 	.word	0x0803a530
 801f1fc:	0801e823 	.word	0x0801e823
 801f200:	7ffffc0c 	.word	0x7ffffc0c
 801f204:	0803a434 	.word	0x0803a434
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801f208:	6824      	ldr	r4, [r4, #0]
 801f20a:	b1d4      	cbz	r4, 801f242 <lfs_dir_relocatingcommit+0x346>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801f20c:	68a3      	ldr	r3, [r4, #8]
 801f20e:	459b      	cmp	fp, r3
 801f210:	d006      	beq.n	801f220 <lfs_dir_relocatingcommit+0x324>
 801f212:	68e2      	ldr	r2, [r4, #12]
 801f214:	4592      	cmp	sl, r2
 801f216:	d003      	beq.n	801f220 <lfs_dir_relocatingcommit+0x324>
 801f218:	459a      	cmp	sl, r3
 801f21a:	d001      	beq.n	801f220 <lfs_dir_relocatingcommit+0x324>
 801f21c:	4593      	cmp	fp, r2
 801f21e:	d1f3      	bne.n	801f208 <lfs_dir_relocatingcommit+0x30c>
            d->m = *dir;
 801f220:	f104 0c08 	add.w	ip, r4, #8
 801f224:	46b6      	mov	lr, r6
 801f226:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801f22a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f22e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801f232:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 801f236:	f104 0308 	add.w	r3, r4, #8
 801f23a:	454b      	cmp	r3, r9
 801f23c:	d0be      	beq.n	801f1bc <lfs_dir_relocatingcommit+0x2c0>
                for (int i = 0; i < attrcount; i++) {
 801f23e:	2300      	movs	r3, #0
 801f240:	e785      	b.n	801f14e <lfs_dir_relocatingcommit+0x252>
    return state;
 801f242:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f244:	468a      	mov	sl, r1
 801f246:	e002      	b.n	801f24e <lfs_dir_relocatingcommit+0x352>
        return state;
 801f248:	468a      	mov	sl, r1
 801f24a:	e000      	b.n	801f24e <lfs_dir_relocatingcommit+0x352>
 801f24c:	4682      	mov	sl, r0
}
 801f24e:	4650      	mov	r0, sl
 801f250:	b01b      	add	sp, #108	@ 0x6c
 801f252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f256:	bf00      	nop

0801f258 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801f258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f25c:	b0a3      	sub	sp, #140	@ 0x8c
 801f25e:	4605      	mov	r5, r0
 801f260:	460e      	mov	r6, r1
 801f262:	4690      	mov	r8, r2
 801f264:	4699      	mov	r9, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801f266:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801f268:	e003      	b.n	801f272 <lfs_dir_orphaningcommit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801f26a:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801f26c:	2b01      	cmp	r3, #1
 801f26e:	d012      	beq.n	801f296 <lfs_dir_orphaningcommit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801f270:	6824      	ldr	r4, [r4, #0]
 801f272:	b34c      	cbz	r4, 801f2c8 <lfs_dir_orphaningcommit+0x70>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801f274:	f104 0108 	add.w	r1, r4, #8
 801f278:	42b1      	cmp	r1, r6
 801f27a:	d0f9      	beq.n	801f270 <lfs_dir_orphaningcommit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801f27c:	68a1      	ldr	r1, [r4, #8]
 801f27e:	6833      	ldr	r3, [r6, #0]
 801f280:	428b      	cmp	r3, r1
 801f282:	d0f2      	beq.n	801f26a <lfs_dir_orphaningcommit+0x12>
 801f284:	68e0      	ldr	r0, [r4, #12]
 801f286:	6872      	ldr	r2, [r6, #4]
 801f288:	4282      	cmp	r2, r0
 801f28a:	d0ee      	beq.n	801f26a <lfs_dir_orphaningcommit+0x12>
 801f28c:	428a      	cmp	r2, r1
 801f28e:	d0ec      	beq.n	801f26a <lfs_dir_orphaningcommit+0x12>
 801f290:	4298      	cmp	r0, r3
 801f292:	d1ed      	bne.n	801f270 <lfs_dir_orphaningcommit+0x18>
 801f294:	e7e9      	b.n	801f26a <lfs_dir_orphaningcommit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801f296:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f298:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801f29c:	d0e8      	beq.n	801f270 <lfs_dir_orphaningcommit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
 801f29e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801f2a0:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801f2a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801f2a4:	429a      	cmp	r2, r3
 801f2a6:	d9e3      	bls.n	801f270 <lfs_dir_orphaningcommit+0x18>
            int err = lfs_file_outline(lfs, f);
 801f2a8:	4621      	mov	r1, r4
 801f2aa:	4628      	mov	r0, r5
 801f2ac:	f7fe fefc 	bl	801e0a8 <lfs_file_outline>
            if (err) {
 801f2b0:	4607      	mov	r7, r0
 801f2b2:	2800      	cmp	r0, #0
 801f2b4:	f040 81bc 	bne.w	801f630 <lfs_dir_orphaningcommit+0x3d8>
            err = lfs_file_flush(lfs, f);
 801f2b8:	4621      	mov	r1, r4
 801f2ba:	4628      	mov	r0, r5
 801f2bc:	f7ff f874 	bl	801e3a8 <lfs_file_flush>
            if (err) {
 801f2c0:	4607      	mov	r7, r0
 801f2c2:	2800      	cmp	r0, #0
 801f2c4:	d0d4      	beq.n	801f270 <lfs_dir_orphaningcommit+0x18>
 801f2c6:	e1b3      	b.n	801f630 <lfs_dir_orphaningcommit+0x3d8>
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 801f2c8:	6833      	ldr	r3, [r6, #0]
 801f2ca:	9316      	str	r3, [sp, #88]	@ 0x58
 801f2cc:	6873      	ldr	r3, [r6, #4]
 801f2ce:	9317      	str	r3, [sp, #92]	@ 0x5c
    lfs_mdir_t ldir = *dir;
 801f2d0:	ac0e      	add	r4, sp, #56	@ 0x38
 801f2d2:	4637      	mov	r7, r6
 801f2d4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801f2d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801f2d8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801f2dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 801f2e0:	ab06      	add	r3, sp, #24
 801f2e2:	9301      	str	r3, [sp, #4]
 801f2e4:	f8cd 9000 	str.w	r9, [sp]
 801f2e8:	4643      	mov	r3, r8
 801f2ea:	4632      	mov	r2, r6
 801f2ec:	a90e      	add	r1, sp, #56	@ 0x38
 801f2ee:	4628      	mov	r0, r5
 801f2f0:	f7ff fe04 	bl	801eefc <lfs_dir_relocatingcommit>
    if (state < 0) {
 801f2f4:	1e07      	subs	r7, r0, #0
 801f2f6:	f2c0 819b 	blt.w	801f630 <lfs_dir_orphaningcommit+0x3d8>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801f2fa:	6833      	ldr	r3, [r6, #0]
 801f2fc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f2fe:	429a      	cmp	r2, r3
 801f300:	d007      	beq.n	801f312 <lfs_dir_orphaningcommit+0xba>
 801f302:	6870      	ldr	r0, [r6, #4]
 801f304:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801f306:	4281      	cmp	r1, r0
 801f308:	d003      	beq.n	801f312 <lfs_dir_orphaningcommit+0xba>
 801f30a:	4299      	cmp	r1, r3
 801f30c:	d001      	beq.n	801f312 <lfs_dir_orphaningcommit+0xba>
 801f30e:	4290      	cmp	r0, r2
 801f310:	d109      	bne.n	801f326 <lfs_dir_orphaningcommit+0xce>
        *dir = ldir;
 801f312:	4634      	mov	r4, r6
 801f314:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801f318:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801f31c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801f31e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801f322:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
 801f326:	2f02      	cmp	r7, #2
 801f328:	d001      	beq.n	801f32e <lfs_dir_orphaningcommit+0xd6>
                orphans = true;
 801f32a:	2600      	movs	r6, #0
 801f32c:	e0b7      	b.n	801f49e <lfs_dir_orphaningcommit+0x246>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 801f32e:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801f332:	4631      	mov	r1, r6
 801f334:	4628      	mov	r0, r5
 801f336:	f7fd fc97 	bl	801cc68 <lfs_dir_getgstate>
        if (err) {
 801f33a:	4607      	mov	r7, r0
 801f33c:	2800      	cmp	r0, #0
 801f33e:	f040 8177 	bne.w	801f630 <lfs_dir_orphaningcommit+0x3d8>
        lpair[0] = pdir.pair[0];
 801f342:	9b06      	ldr	r3, [sp, #24]
 801f344:	9316      	str	r3, [sp, #88]	@ 0x58
        lpair[1] = pdir.pair[1];
 801f346:	9b07      	ldr	r3, [sp, #28]
 801f348:	9317      	str	r3, [sp, #92]	@ 0x5c
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801f34a:	7df2      	ldrb	r2, [r6, #23]
 801f34c:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801f350:	4ba3      	ldr	r3, [pc, #652]	@ (801f5e0 <lfs_dir_orphaningcommit+0x388>)
 801f352:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801f356:	9318      	str	r3, [sp, #96]	@ 0x60
 801f358:	3618      	adds	r6, #24
 801f35a:	9619      	str	r6, [sp, #100]	@ 0x64
 801f35c:	2300      	movs	r3, #0
 801f35e:	9301      	str	r3, [sp, #4]
 801f360:	2301      	movs	r3, #1
 801f362:	9300      	str	r3, [sp, #0]
 801f364:	ab18      	add	r3, sp, #96	@ 0x60
 801f366:	aa16      	add	r2, sp, #88	@ 0x58
 801f368:	a906      	add	r1, sp, #24
 801f36a:	4628      	mov	r0, r5
 801f36c:	f7ff fdc6 	bl	801eefc <lfs_dir_relocatingcommit>
        if (state < 0) {
 801f370:	1e07      	subs	r7, r0, #0
 801f372:	f2c0 815d 	blt.w	801f630 <lfs_dir_orphaningcommit+0x3d8>
        ldir = pdir;
 801f376:	ac0e      	add	r4, sp, #56	@ 0x38
 801f378:	ae06      	add	r6, sp, #24
 801f37a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801f37c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801f37e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801f382:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801f386:	e7d0      	b.n	801f32a <lfs_dir_orphaningcommit+0xd2>
                d->m.pair[0] = ldir.pair[0];
 801f388:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f38a:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 801f38c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f38e:	60da      	str	r2, [r3, #12]
            if (d->type == LFS_TYPE_DIR &&
 801f390:	799a      	ldrb	r2, [r3, #6]
 801f392:	2a02      	cmp	r2, #2
 801f394:	d00d      	beq.n	801f3b2 <lfs_dir_orphaningcommit+0x15a>
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801f396:	681b      	ldr	r3, [r3, #0]
 801f398:	b1db      	cbz	r3, 801f3d2 <lfs_dir_orphaningcommit+0x17a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801f39a:	689a      	ldr	r2, [r3, #8]
 801f39c:	4291      	cmp	r1, r2
 801f39e:	d0f3      	beq.n	801f388 <lfs_dir_orphaningcommit+0x130>
 801f3a0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801f3a2:	68dc      	ldr	r4, [r3, #12]
 801f3a4:	4284      	cmp	r4, r0
 801f3a6:	d0ef      	beq.n	801f388 <lfs_dir_orphaningcommit+0x130>
 801f3a8:	428c      	cmp	r4, r1
 801f3aa:	d0ed      	beq.n	801f388 <lfs_dir_orphaningcommit+0x130>
 801f3ac:	4290      	cmp	r0, r2
 801f3ae:	d1ef      	bne.n	801f390 <lfs_dir_orphaningcommit+0x138>
 801f3b0:	e7ea      	b.n	801f388 <lfs_dir_orphaningcommit+0x130>
 801f3b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801f3b4:	428a      	cmp	r2, r1
 801f3b6:	d007      	beq.n	801f3c8 <lfs_dir_orphaningcommit+0x170>
 801f3b8:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801f3ba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801f3bc:	42a0      	cmp	r0, r4
 801f3be:	d003      	beq.n	801f3c8 <lfs_dir_orphaningcommit+0x170>
 801f3c0:	4288      	cmp	r0, r1
 801f3c2:	d001      	beq.n	801f3c8 <lfs_dir_orphaningcommit+0x170>
 801f3c4:	4294      	cmp	r4, r2
 801f3c6:	d1e6      	bne.n	801f396 <lfs_dir_orphaningcommit+0x13e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 801f3c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f3ca:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 801f3cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f3ce:	631a      	str	r2, [r3, #48]	@ 0x30
 801f3d0:	e7e1      	b.n	801f396 <lfs_dir_orphaningcommit+0x13e>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801f3d2:	aa06      	add	r2, sp, #24
 801f3d4:	a916      	add	r1, sp, #88	@ 0x58
 801f3d6:	4628      	mov	r0, r5
 801f3d8:	f7fe fbc2 	bl	801db60 <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 801f3dc:	1e04      	subs	r4, r0, #0
 801f3de:	f280 8082 	bge.w	801f4e6 <lfs_dir_orphaningcommit+0x28e>
 801f3e2:	f114 0f02 	cmn.w	r4, #2
 801f3e6:	f040 8129 	bne.w	801f63c <lfs_dir_orphaningcommit+0x3e4>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801f3ea:	f114 0802 	adds.w	r8, r4, #2
 801f3ee:	bf18      	it	ne
 801f3f0:	f04f 0801 	movne.w	r8, #1
        state = 0;
 801f3f4:	2700      	movs	r7, #0
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 801f3f6:	aa06      	add	r2, sp, #24
 801f3f8:	a916      	add	r1, sp, #88	@ 0x58
 801f3fa:	4628      	mov	r0, r5
 801f3fc:	f7ff f934 	bl	801e668 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801f400:	4603      	mov	r3, r0
 801f402:	b118      	cbz	r0, 801f40c <lfs_dir_orphaningcommit+0x1b4>
 801f404:	f110 0f02 	cmn.w	r0, #2
 801f408:	f040 811a 	bne.w	801f640 <lfs_dir_orphaningcommit+0x3e8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801f40c:	f114 0f02 	cmn.w	r4, #2
 801f410:	f000 80d6 	beq.w	801f5c0 <lfs_dir_orphaningcommit+0x368>
 801f414:	f113 0f02 	cmn.w	r3, #2
 801f418:	f000 80cb 	beq.w	801f5b2 <lfs_dir_orphaningcommit+0x35a>
    return lfs_tag_size(a->tag);
 801f41c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    return tag & 0x000003ff;
 801f41e:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 801f422:	2b00      	cmp	r3, #0
 801f424:	f040 80d1 	bne.w	801f5ca <lfs_dir_orphaningcommit+0x372>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801f428:	a906      	add	r1, sp, #24
 801f42a:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801f42e:	f7fd f8e3 	bl	801c5f8 <lfs_gstate_hasmovehere>
 801f432:	2800      	cmp	r0, #0
 801f434:	f040 80e2 	bne.w	801f5fc <lfs_dir_orphaningcommit+0x3a4>
            uint16_t moveid = 0x3ff;
 801f438:	f240 34ff 	movw	r4, #1023	@ 0x3ff
            lpair[0] = pdir.pair[0];
 801f43c:	9b06      	ldr	r3, [sp, #24]
 801f43e:	9316      	str	r3, [sp, #88]	@ 0x58
            lpair[1] = pdir.pair[1];
 801f440:	9b07      	ldr	r3, [sp, #28]
 801f442:	9317      	str	r3, [sp, #92]	@ 0x5c
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801f444:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f448:	429c      	cmp	r4, r3
 801f44a:	f000 80ed 	beq.w	801f628 <lfs_dir_orphaningcommit+0x3d0>
 801f44e:	02a3      	lsls	r3, r4, #10
 801f450:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801f454:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f458:	931e      	str	r3, [sp, #120]	@ 0x78
 801f45a:	2100      	movs	r1, #0
 801f45c:	911f      	str	r1, [sp, #124]	@ 0x7c
 801f45e:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 801f462:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801f466:	4b5e      	ldr	r3, [pc, #376]	@ (801f5e0 <lfs_dir_orphaningcommit+0x388>)
 801f468:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801f46c:	9320      	str	r3, [sp, #128]	@ 0x80
 801f46e:	ab0e      	add	r3, sp, #56	@ 0x38
 801f470:	9321      	str	r3, [sp, #132]	@ 0x84
 801f472:	9101      	str	r1, [sp, #4]
 801f474:	2302      	movs	r3, #2
 801f476:	9300      	str	r3, [sp, #0]
 801f478:	ab1e      	add	r3, sp, #120	@ 0x78
 801f47a:	aa16      	add	r2, sp, #88	@ 0x58
 801f47c:	a906      	add	r1, sp, #24
 801f47e:	4628      	mov	r0, r5
 801f480:	f7ff fd3c 	bl	801eefc <lfs_dir_relocatingcommit>
            if (state < 0) {
 801f484:	1e07      	subs	r7, r0, #0
 801f486:	f2c0 80d3 	blt.w	801f630 <lfs_dir_orphaningcommit+0x3d8>
            ldir = pdir;
 801f48a:	ac0e      	add	r4, sp, #56	@ 0x38
 801f48c:	f10d 0c18 	add.w	ip, sp, #24
 801f490:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801f494:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801f496:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801f49a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 801f49e:	2f01      	cmp	r7, #1
 801f4a0:	f040 80c4 	bne.w	801f62c <lfs_dir_orphaningcommit+0x3d4>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 801f4a4:	4b4f      	ldr	r3, [pc, #316]	@ (801f5e4 <lfs_dir_orphaningcommit+0x38c>)
 801f4a6:	9303      	str	r3, [sp, #12]
 801f4a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f4aa:	9302      	str	r3, [sp, #8]
 801f4ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f4ae:	9301      	str	r3, [sp, #4]
 801f4b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f4b2:	9300      	str	r3, [sp, #0]
 801f4b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f4b6:	f640 128c 	movw	r2, #2444	@ 0x98c
 801f4ba:	494b      	ldr	r1, [pc, #300]	@ (801f5e8 <lfs_dir_orphaningcommit+0x390>)
 801f4bc:	484b      	ldr	r0, [pc, #300]	@ (801f5ec <lfs_dir_orphaningcommit+0x394>)
 801f4be:	f00c fdc7 	bl	802c050 <printf>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801f4c2:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801f4c4:	6a2b      	ldr	r3, [r5, #32]
 801f4c6:	428b      	cmp	r3, r1
 801f4c8:	d007      	beq.n	801f4da <lfs_dir_orphaningcommit+0x282>
 801f4ca:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801f4cc:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801f4ce:	4282      	cmp	r2, r0
 801f4d0:	d003      	beq.n	801f4da <lfs_dir_orphaningcommit+0x282>
 801f4d2:	428a      	cmp	r2, r1
 801f4d4:	d001      	beq.n	801f4da <lfs_dir_orphaningcommit+0x282>
 801f4d6:	4298      	cmp	r0, r3
 801f4d8:	d103      	bne.n	801f4e2 <lfs_dir_orphaningcommit+0x28a>
            lfs->root[0] = ldir.pair[0];
 801f4da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f4dc:	622b      	str	r3, [r5, #32]
            lfs->root[1] = ldir.pair[1];
 801f4de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f4e0:	626b      	str	r3, [r5, #36]	@ 0x24
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801f4e2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801f4e4:	e758      	b.n	801f398 <lfs_dir_orphaningcommit+0x140>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801f4e6:	f114 0802 	adds.w	r8, r4, #2
 801f4ea:	bf18      	it	ne
 801f4ec:	f04f 0801 	movne.w	r8, #1
            int err = lfs_fs_preporphans(lfs, +1);
 801f4f0:	2101      	movs	r1, #1
 801f4f2:	4628      	mov	r0, r5
 801f4f4:	f7fd f9aa 	bl	801c84c <lfs_fs_preporphans>
            if (err) {
 801f4f8:	4607      	mov	r7, r0
 801f4fa:	2800      	cmp	r0, #0
 801f4fc:	f040 8098 	bne.w	801f630 <lfs_dir_orphaningcommit+0x3d8>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801f500:	a906      	add	r1, sp, #24
 801f502:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801f506:	f7fd f877 	bl	801c5f8 <lfs_gstate_hasmovehere>
 801f50a:	2800      	cmp	r0, #0
 801f50c:	d131      	bne.n	801f572 <lfs_dir_orphaningcommit+0x31a>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801f50e:	4622      	mov	r2, r4
            uint16_t moveid = 0x3ff;
 801f510:	f240 37ff 	movw	r7, #1023	@ 0x3ff
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 801f514:	9b06      	ldr	r3, [sp, #24]
 801f516:	9304      	str	r3, [sp, #16]
 801f518:	9b07      	ldr	r3, [sp, #28]
 801f51a:	9305      	str	r3, [sp, #20]
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801f51c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f520:	429f      	cmp	r7, r3
 801f522:	d044      	beq.n	801f5ae <lfs_dir_orphaningcommit+0x356>
 801f524:	02bb      	lsls	r3, r7, #10
 801f526:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801f52a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f52e:	931a      	str	r3, [sp, #104]	@ 0x68
 801f530:	2300      	movs	r3, #0
 801f532:	931b      	str	r3, [sp, #108]	@ 0x6c
 801f534:	921c      	str	r2, [sp, #112]	@ 0x70
 801f536:	aa0e      	add	r2, sp, #56	@ 0x38
 801f538:	921d      	str	r2, [sp, #116]	@ 0x74
 801f53a:	9301      	str	r3, [sp, #4]
 801f53c:	2302      	movs	r3, #2
 801f53e:	9300      	str	r3, [sp, #0]
 801f540:	ab1a      	add	r3, sp, #104	@ 0x68
 801f542:	aa04      	add	r2, sp, #16
 801f544:	a906      	add	r1, sp, #24
 801f546:	4628      	mov	r0, r5
 801f548:	f7ff fcd8 	bl	801eefc <lfs_dir_relocatingcommit>
            if (state < 0) {
 801f54c:	1e07      	subs	r7, r0, #0
 801f54e:	db6f      	blt.n	801f630 <lfs_dir_orphaningcommit+0x3d8>
            if (state == LFS_OK_RELOCATED) {
 801f550:	2f01      	cmp	r7, #1
 801f552:	f47f af50 	bne.w	801f3f6 <lfs_dir_orphaningcommit+0x19e>
                lpair[0] = ppair[0];
 801f556:	9b04      	ldr	r3, [sp, #16]
 801f558:	9316      	str	r3, [sp, #88]	@ 0x58
                lpair[1] = ppair[1];
 801f55a:	9b05      	ldr	r3, [sp, #20]
 801f55c:	9317      	str	r3, [sp, #92]	@ 0x5c
                ldir = pdir;
 801f55e:	ac0e      	add	r4, sp, #56	@ 0x38
 801f560:	ae06      	add	r6, sp, #24
 801f562:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801f564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801f566:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801f56a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 801f56e:	2601      	movs	r6, #1
 801f570:	e795      	b.n	801f49e <lfs_dir_orphaningcommit+0x246>
                moveid = lfs_tag_id(lfs->gstate.tag);
 801f572:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801f574:	f3c7 2789 	ubfx	r7, r7, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801f578:	4b1a      	ldr	r3, [pc, #104]	@ (801f5e4 <lfs_dir_orphaningcommit+0x38c>)
 801f57a:	9302      	str	r3, [sp, #8]
 801f57c:	9701      	str	r7, [sp, #4]
 801f57e:	9b07      	ldr	r3, [sp, #28]
 801f580:	9300      	str	r3, [sp, #0]
 801f582:	9b06      	ldr	r3, [sp, #24]
 801f584:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 801f588:	4917      	ldr	r1, [pc, #92]	@ (801f5e8 <lfs_dir_orphaningcommit+0x390>)
 801f58a:	4819      	ldr	r0, [pc, #100]	@ (801f5f0 <lfs_dir_orphaningcommit+0x398>)
 801f58c:	f00c fd60 	bl	802c050 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801f590:	2200      	movs	r2, #0
 801f592:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801f596:	4628      	mov	r0, r5
 801f598:	f7fd f914 	bl	801c7c4 <lfs_fs_prepmove>
    return (tag & 0x000ffc00) >> 10;
 801f59c:	f3c4 2389 	ubfx	r3, r4, #10, #10
                if (moveid < lfs_tag_id(tag)) {
 801f5a0:	42bb      	cmp	r3, r7
 801f5a2:	d902      	bls.n	801f5aa <lfs_dir_orphaningcommit+0x352>
                    tag -= LFS_MKTAG(0, 1, 0);
 801f5a4:	f5a4 6280 	sub.w	r2, r4, #1024	@ 0x400
 801f5a8:	e7b4      	b.n	801f514 <lfs_dir_orphaningcommit+0x2bc>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801f5aa:	4622      	mov	r2, r4
 801f5ac:	e7b2      	b.n	801f514 <lfs_dir_orphaningcommit+0x2bc>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801f5ae:	2300      	movs	r3, #0
 801f5b0:	e7bd      	b.n	801f52e <lfs_dir_orphaningcommit+0x2d6>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801f5b2:	4b10      	ldr	r3, [pc, #64]	@ (801f5f4 <lfs_dir_orphaningcommit+0x39c>)
 801f5b4:	4a10      	ldr	r2, [pc, #64]	@ (801f5f8 <lfs_dir_orphaningcommit+0x3a0>)
 801f5b6:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 801f5ba:	480b      	ldr	r0, [pc, #44]	@ (801f5e8 <lfs_dir_orphaningcommit+0x390>)
 801f5bc:	f00c f826 	bl	802b60c <__assert_func>
        if (err != LFS_ERR_NOENT) {
 801f5c0:	f113 0f02 	cmn.w	r3, #2
 801f5c4:	f47f af2a 	bne.w	801f41c <lfs_dir_orphaningcommit+0x1c4>
 801f5c8:	e769      	b.n	801f49e <lfs_dir_orphaningcommit+0x246>
                err = lfs_fs_preporphans(lfs, -hasparent);
 801f5ca:	f1c8 0100 	rsb	r1, r8, #0
 801f5ce:	4628      	mov	r0, r5
 801f5d0:	f7fd f93c 	bl	801c84c <lfs_fs_preporphans>
                if (err) {
 801f5d4:	4607      	mov	r7, r0
 801f5d6:	2800      	cmp	r0, #0
 801f5d8:	f43f af26 	beq.w	801f428 <lfs_dir_orphaningcommit+0x1d0>
 801f5dc:	e028      	b.n	801f630 <lfs_dir_orphaningcommit+0x3d8>
 801f5de:	bf00      	nop
 801f5e0:	000ffc08 	.word	0x000ffc08
 801f5e4:	08038678 	.word	0x08038678
 801f5e8:	0803a198 	.word	0x0803a198
 801f5ec:	0803a538 	.word	0x0803a538
 801f5f0:	0803a574 	.word	0x0803a574
 801f5f4:	0803a5b8 	.word	0x0803a5b8
 801f5f8:	0803d5d4 	.word	0x0803d5d4
                moveid = lfs_tag_id(lfs->gstate.tag);
 801f5fc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801f5fe:	f3c4 2489 	ubfx	r4, r4, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801f602:	4b10      	ldr	r3, [pc, #64]	@ (801f644 <lfs_dir_orphaningcommit+0x3ec>)
 801f604:	9302      	str	r3, [sp, #8]
 801f606:	9401      	str	r4, [sp, #4]
 801f608:	9b07      	ldr	r3, [sp, #28]
 801f60a:	9300      	str	r3, [sp, #0]
 801f60c:	9b06      	ldr	r3, [sp, #24]
 801f60e:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 801f612:	490d      	ldr	r1, [pc, #52]	@ (801f648 <lfs_dir_orphaningcommit+0x3f0>)
 801f614:	480d      	ldr	r0, [pc, #52]	@ (801f64c <lfs_dir_orphaningcommit+0x3f4>)
 801f616:	f00c fd1b 	bl	802c050 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801f61a:	2200      	movs	r2, #0
 801f61c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801f620:	4628      	mov	r0, r5
 801f622:	f7fd f8cf 	bl	801c7c4 <lfs_fs_prepmove>
 801f626:	e709      	b.n	801f43c <lfs_dir_orphaningcommit+0x1e4>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801f628:	2300      	movs	r3, #0
 801f62a:	e715      	b.n	801f458 <lfs_dir_orphaningcommit+0x200>
    return orphans ? LFS_OK_ORPHANED : 0;
 801f62c:	b926      	cbnz	r6, 801f638 <lfs_dir_orphaningcommit+0x3e0>
 801f62e:	2700      	movs	r7, #0
}
 801f630:	4638      	mov	r0, r7
 801f632:	b023      	add	sp, #140	@ 0x8c
 801f634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return orphans ? LFS_OK_ORPHANED : 0;
 801f638:	2703      	movs	r7, #3
 801f63a:	e7f9      	b.n	801f630 <lfs_dir_orphaningcommit+0x3d8>
            return tag;
 801f63c:	4627      	mov	r7, r4
 801f63e:	e7f7      	b.n	801f630 <lfs_dir_orphaningcommit+0x3d8>
            return err;
 801f640:	4607      	mov	r7, r0
 801f642:	e7f5      	b.n	801f630 <lfs_dir_orphaningcommit+0x3d8>
 801f644:	08038678 	.word	0x08038678
 801f648:	0803a198 	.word	0x0803a198
 801f64c:	0803a574 	.word	0x0803a574

0801f650 <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 801f650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f654:	b0a4      	sub	sp, #144	@ 0x90
    return lfs_tag_size(a->tag);
 801f656:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801f658:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 801f65c:	2b00      	cmp	r3, #0
 801f65e:	f000 80e0 	beq.w	801f822 <lfs_fs_deorphan+0x1d2>
 801f662:	4606      	mov	r6, r0
 801f664:	4688      	mov	r8, r1
    int pass = 0;
 801f666:	2400      	movs	r4, #0
 801f668:	e0a3      	b.n	801f7b2 <lfs_fs_deorphan+0x162>
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 801f66a:	aa16      	add	r2, sp, #88	@ 0x58
 801f66c:	a90c      	add	r1, sp, #48	@ 0x30
 801f66e:	4630      	mov	r0, r6
 801f670:	f7fe fa76 	bl	801db60 <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801f674:	1e05      	subs	r5, r0, #0
 801f676:	db3a      	blt.n	801f6ee <lfs_fs_deorphan+0x9e>
                if (pass == 0 && tag != LFS_ERR_NOENT) {
 801f678:	b914      	cbnz	r4, 801f680 <lfs_fs_deorphan+0x30>
 801f67a:	f115 0f02 	cmn.w	r5, #2
 801f67e:	d13a      	bne.n	801f6f6 <lfs_fs_deorphan+0xa6>
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 801f680:	2c01      	cmp	r4, #1
 801f682:	f040 80b6 	bne.w	801f7f2 <lfs_fs_deorphan+0x1a2>
 801f686:	f115 0f02 	cmn.w	r5, #2
 801f68a:	f040 80b2 	bne.w	801f7f2 <lfs_fs_deorphan+0x1a2>
 801f68e:	f1b8 0f00 	cmp.w	r8, #0
 801f692:	f000 80ae 	beq.w	801f7f2 <lfs_fs_deorphan+0x1a2>
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 801f696:	4b65      	ldr	r3, [pc, #404]	@ (801f82c <lfs_fs_deorphan+0x1dc>)
 801f698:	9301      	str	r3, [sp, #4]
 801f69a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f69c:	9300      	str	r3, [sp, #0]
 801f69e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f6a0:	f241 329c 	movw	r2, #5020	@ 0x139c
 801f6a4:	4962      	ldr	r1, [pc, #392]	@ (801f830 <lfs_fs_deorphan+0x1e0>)
 801f6a6:	4863      	ldr	r0, [pc, #396]	@ (801f834 <lfs_fs_deorphan+0x1e4>)
 801f6a8:	f00c fcd2 	bl	802c050 <printf>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 801f6ac:	f106 0248 	add.w	r2, r6, #72	@ 0x48
 801f6b0:	a90e      	add	r1, sp, #56	@ 0x38
 801f6b2:	4630      	mov	r0, r6
 801f6b4:	f7fd fad8 	bl	801cc68 <lfs_dir_getgstate>
                    if (err) {
 801f6b8:	4605      	mov	r5, r0
 801f6ba:	2800      	cmp	r0, #0
 801f6bc:	f040 80b2 	bne.w	801f824 <lfs_fs_deorphan+0x1d4>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801f6c0:	f89d 204f 	ldrb.w	r2, [sp, #79]	@ 0x4f
 801f6c4:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801f6c8:	4b5b      	ldr	r3, [pc, #364]	@ (801f838 <lfs_fs_deorphan+0x1e8>)
 801f6ca:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801f6ce:	9322      	str	r3, [sp, #136]	@ 0x88
 801f6d0:	ab14      	add	r3, sp, #80	@ 0x50
 801f6d2:	9323      	str	r3, [sp, #140]	@ 0x8c
 801f6d4:	2301      	movs	r3, #1
 801f6d6:	aa22      	add	r2, sp, #136	@ 0x88
 801f6d8:	a906      	add	r1, sp, #24
 801f6da:	4630      	mov	r0, r6
 801f6dc:	f7ff fdbc 	bl	801f258 <lfs_dir_orphaningcommit>
                    if (state < 0) {
 801f6e0:	1e05      	subs	r5, r0, #0
 801f6e2:	f2c0 809f 	blt.w	801f824 <lfs_fs_deorphan+0x1d4>
                    if (state == LFS_OK_ORPHANED) {
 801f6e6:	2d03      	cmp	r5, #3
 801f6e8:	d16f      	bne.n	801f7ca <lfs_fs_deorphan+0x17a>
                        moreorphans = true;
 801f6ea:	4647      	mov	r7, r8
                    continue;
 801f6ec:	e06d      	b.n	801f7ca <lfs_fs_deorphan+0x17a>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801f6ee:	f115 0f02 	cmn.w	r5, #2
 801f6f2:	d0c1      	beq.n	801f678 <lfs_fs_deorphan+0x28>
 801f6f4:	e096      	b.n	801f824 <lfs_fs_deorphan+0x1d4>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 801f6f6:	ab04      	add	r3, sp, #16
 801f6f8:	9300      	str	r3, [sp, #0]
 801f6fa:	462b      	mov	r3, r5
 801f6fc:	4a4f      	ldr	r2, [pc, #316]	@ (801f83c <lfs_fs_deorphan+0x1ec>)
 801f6fe:	a916      	add	r1, sp, #88	@ 0x58
 801f700:	4630      	mov	r0, r6
 801f702:	f7fd faa3 	bl	801cc4c <lfs_dir_get>
                    if (state < 0) {
 801f706:	2800      	cmp	r0, #0
 801f708:	db4f      	blt.n	801f7aa <lfs_fs_deorphan+0x15a>
                    if (!lfs_pair_issync(pair, pdir.tail)) {
 801f70a:	a90c      	add	r1, sp, #48	@ 0x30
 801f70c:	a804      	add	r0, sp, #16
 801f70e:	f7fc ff3d 	bl	801c58c <lfs_pair_issync>
 801f712:	2800      	cmp	r0, #0
 801f714:	d1b4      	bne.n	801f680 <lfs_fs_deorphan+0x30>
                        LFS_DEBUG("Fixing half-orphan "
 801f716:	4b45      	ldr	r3, [pc, #276]	@ (801f82c <lfs_fs_deorphan+0x1dc>)
 801f718:	9303      	str	r3, [sp, #12]
 801f71a:	9b05      	ldr	r3, [sp, #20]
 801f71c:	9302      	str	r3, [sp, #8]
 801f71e:	9b04      	ldr	r3, [sp, #16]
 801f720:	9301      	str	r3, [sp, #4]
 801f722:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f724:	9300      	str	r3, [sp, #0]
 801f726:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f728:	f241 3271 	movw	r2, #4977	@ 0x1371
 801f72c:	4940      	ldr	r1, [pc, #256]	@ (801f830 <lfs_fs_deorphan+0x1e0>)
 801f72e:	4844      	ldr	r0, [pc, #272]	@ (801f840 <lfs_fs_deorphan+0x1f0>)
 801f730:	f00c fc8e 	bl	802c050 <printf>
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801f734:	a906      	add	r1, sp, #24
 801f736:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 801f73a:	f7fc ff5d 	bl	801c5f8 <lfs_gstate_hasmovehere>
 801f73e:	b998      	cbnz	r0, 801f768 <lfs_fs_deorphan+0x118>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801f740:	2300      	movs	r3, #0
 801f742:	931e      	str	r3, [sp, #120]	@ 0x78
 801f744:	2300      	movs	r3, #0
 801f746:	931f      	str	r3, [sp, #124]	@ 0x7c
 801f748:	4b3e      	ldr	r3, [pc, #248]	@ (801f844 <lfs_fs_deorphan+0x1f4>)
 801f74a:	9320      	str	r3, [sp, #128]	@ 0x80
 801f74c:	ab04      	add	r3, sp, #16
 801f74e:	9321      	str	r3, [sp, #132]	@ 0x84
 801f750:	2302      	movs	r3, #2
 801f752:	aa1e      	add	r2, sp, #120	@ 0x78
 801f754:	a906      	add	r1, sp, #24
 801f756:	4630      	mov	r0, r6
 801f758:	f7ff fd7e 	bl	801f258 <lfs_dir_orphaningcommit>
                        if (state < 0) {
 801f75c:	1e05      	subs	r5, r0, #0
 801f75e:	db61      	blt.n	801f824 <lfs_fs_deorphan+0x1d4>
                        if (state == LFS_OK_ORPHANED) {
 801f760:	2d03      	cmp	r5, #3
 801f762:	d132      	bne.n	801f7ca <lfs_fs_deorphan+0x17a>
                            moreorphans = true;
 801f764:	2701      	movs	r7, #1
                        continue;
 801f766:	e030      	b.n	801f7ca <lfs_fs_deorphan+0x17a>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 801f768:	6b35      	ldr	r5, [r6, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801f76a:	f3c5 2589 	ubfx	r5, r5, #10, #10
                            LFS_DEBUG("Fixing move while fixing orphans "
 801f76e:	4b2f      	ldr	r3, [pc, #188]	@ (801f82c <lfs_fs_deorphan+0x1dc>)
 801f770:	9302      	str	r3, [sp, #8]
 801f772:	9501      	str	r5, [sp, #4]
 801f774:	9b07      	ldr	r3, [sp, #28]
 801f776:	9300      	str	r3, [sp, #0]
 801f778:	9b06      	ldr	r3, [sp, #24]
 801f77a:	f241 327c 	movw	r2, #4988	@ 0x137c
 801f77e:	492c      	ldr	r1, [pc, #176]	@ (801f830 <lfs_fs_deorphan+0x1e0>)
 801f780:	4831      	ldr	r0, [pc, #196]	@ (801f848 <lfs_fs_deorphan+0x1f8>)
 801f782:	f00c fc65 	bl	802c050 <printf>
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801f786:	2200      	movs	r2, #0
 801f788:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801f78c:	4630      	mov	r0, r6
 801f78e:	f7fd f819 	bl	801c7c4 <lfs_fs_prepmove>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801f792:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f796:	429d      	cmp	r5, r3
 801f798:	d005      	beq.n	801f7a6 <lfs_fs_deorphan+0x156>
 801f79a:	02ab      	lsls	r3, r5, #10
 801f79c:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801f7a0:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f7a4:	e7cd      	b.n	801f742 <lfs_fs_deorphan+0xf2>
 801f7a6:	2300      	movs	r3, #0
 801f7a8:	e7cb      	b.n	801f742 <lfs_fs_deorphan+0xf2>
                        return state;
 801f7aa:	4605      	mov	r5, r0
 801f7ac:	e03a      	b.n	801f824 <lfs_fs_deorphan+0x1d4>
        pass = moreorphans ? 0 : pass+1;
 801f7ae:	bb6f      	cbnz	r7, 801f80c <lfs_fs_deorphan+0x1bc>
 801f7b0:	3401      	adds	r4, #1
    while (pass < 2) {
 801f7b2:	2c01      	cmp	r4, #1
 801f7b4:	dc2c      	bgt.n	801f810 <lfs_fs_deorphan+0x1c0>
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 801f7b6:	2220      	movs	r2, #32
 801f7b8:	2100      	movs	r1, #0
 801f7ba:	a806      	add	r0, sp, #24
 801f7bc:	f00d f820 	bl	802c800 <memset>
 801f7c0:	2301      	movs	r3, #1
 801f7c2:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
 801f7c6:	930d      	str	r3, [sp, #52]	@ 0x34
        bool moreorphans = false;
 801f7c8:	2700      	movs	r7, #0
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801f7ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f7cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f7d0:	d0ed      	beq.n	801f7ae <lfs_fs_deorphan+0x15e>
 801f7d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f7d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f7d8:	d0e9      	beq.n	801f7ae <lfs_fs_deorphan+0x15e>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 801f7da:	aa0c      	add	r2, sp, #48	@ 0x30
 801f7dc:	a90e      	add	r1, sp, #56	@ 0x38
 801f7de:	4630      	mov	r0, r6
 801f7e0:	f7fe fa24 	bl	801dc2c <lfs_dir_fetch>
            if (err) {
 801f7e4:	4605      	mov	r5, r0
 801f7e6:	b9e8      	cbnz	r0, 801f824 <lfs_fs_deorphan+0x1d4>
            if (!pdir.split) {
 801f7e8:	f89d 302f 	ldrb.w	r3, [sp, #47]	@ 0x2f
 801f7ec:	2b00      	cmp	r3, #0
 801f7ee:	f43f af3c 	beq.w	801f66a <lfs_fs_deorphan+0x1a>
            pdir = dir;
 801f7f2:	f10d 0c18 	add.w	ip, sp, #24
 801f7f6:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 801f7fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801f7fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f802:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801f806:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 801f80a:	e7de      	b.n	801f7ca <lfs_fs_deorphan+0x17a>
        pass = moreorphans ? 0 : pass+1;
 801f80c:	2400      	movs	r4, #0
 801f80e:	e7d0      	b.n	801f7b2 <lfs_fs_deorphan+0x162>
    return lfs_tag_size(a->tag) & 0x1ff;
 801f810:	f896 1030 	ldrb.w	r1, [r6, #48]	@ 0x30
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 801f814:	4249      	negs	r1, r1
 801f816:	b249      	sxtb	r1, r1
 801f818:	4630      	mov	r0, r6
 801f81a:	f7fd f817 	bl	801c84c <lfs_fs_preporphans>
 801f81e:	4605      	mov	r5, r0
 801f820:	e000      	b.n	801f824 <lfs_fs_deorphan+0x1d4>
        return 0;
 801f822:	2500      	movs	r5, #0
}
 801f824:	4628      	mov	r0, r5
 801f826:	b024      	add	sp, #144	@ 0x90
 801f828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f82c:	08038678 	.word	0x08038678
 801f830:	0803a198 	.word	0x0803a198
 801f834:	0803a66c 	.word	0x0803a66c
 801f838:	000ffc08 	.word	0x000ffc08
 801f83c:	7ffffc00 	.word	0x7ffffc00
 801f840:	0803a5e0 	.word	0x0803a5e0
 801f844:	600ffc08 	.word	0x600ffc08
 801f848:	0803a624 	.word	0x0803a624

0801f84c <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801f84c:	b510      	push	{r4, lr}
 801f84e:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 801f850:	f7ff fd02 	bl	801f258 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
 801f854:	2800      	cmp	r0, #0
 801f856:	db00      	blt.n	801f85a <lfs_dir_commit+0xe>
    if (orphans) {
 801f858:	b900      	cbnz	r0, 801f85c <lfs_dir_commit+0x10>
}
 801f85a:	bd10      	pop	{r4, pc}
        int err = lfs_fs_deorphan(lfs, false);
 801f85c:	2100      	movs	r1, #0
 801f85e:	4620      	mov	r0, r4
 801f860:	f7ff fef6 	bl	801f650 <lfs_fs_deorphan>
        if (err) {
 801f864:	e7f9      	b.n	801f85a <lfs_dir_commit+0xe>
	...

0801f868 <lfs_fs_desuperblock>:
static int lfs_fs_desuperblock(lfs_t *lfs) {
 801f868:	b530      	push	{r4, r5, lr}
 801f86a:	b093      	sub	sp, #76	@ 0x4c
    return lfs_tag_size(a->tag) >> 9;
 801f86c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 801f86e:	f413 7f00 	tst.w	r3, #512	@ 0x200
 801f872:	d103      	bne.n	801f87c <lfs_fs_desuperblock+0x14>
        return 0;
 801f874:	2500      	movs	r5, #0
}
 801f876:	4628      	mov	r0, r5
 801f878:	b013      	add	sp, #76	@ 0x4c
 801f87a:	bd30      	pop	{r4, r5, pc}
 801f87c:	4604      	mov	r4, r0
    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 801f87e:	4b1a      	ldr	r3, [pc, #104]	@ (801f8e8 <lfs_fs_desuperblock+0x80>)
 801f880:	9301      	str	r3, [sp, #4]
 801f882:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801f884:	9300      	str	r3, [sp, #0]
 801f886:	6a03      	ldr	r3, [r0, #32]
 801f888:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 801f88c:	4917      	ldr	r1, [pc, #92]	@ (801f8ec <lfs_fs_desuperblock+0x84>)
 801f88e:	4818      	ldr	r0, [pc, #96]	@ (801f8f0 <lfs_fs_desuperblock+0x88>)
 801f890:	f00c fbde 	bl	802c050 <printf>
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 801f894:	f104 0220 	add.w	r2, r4, #32
 801f898:	a908      	add	r1, sp, #32
 801f89a:	4620      	mov	r0, r4
 801f89c:	f7fe f9c6 	bl	801dc2c <lfs_dir_fetch>
    if (err) {
 801f8a0:	4605      	mov	r5, r0
 801f8a2:	2800      	cmp	r0, #0
 801f8a4:	d1e7      	bne.n	801f876 <lfs_fs_desuperblock+0xe>
        .version     = lfs_fs_disk_version(lfs),
 801f8a6:	4620      	mov	r0, r4
 801f8a8:	f7fc fede 	bl	801c668 <lfs_fs_disk_version>
    lfs_superblock_t superblock = {
 801f8ac:	9002      	str	r0, [sp, #8]
        .block_size  = lfs->cfg->block_size,
 801f8ae:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801f8b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 801f8b2:	9303      	str	r3, [sp, #12]
        .block_count = lfs->block_count,
 801f8b4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 801f8b6:	9304      	str	r3, [sp, #16]
        .name_max    = lfs->name_max,
 801f8b8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
    lfs_superblock_t superblock = {
 801f8ba:	9305      	str	r3, [sp, #20]
        .file_max    = lfs->file_max,
 801f8bc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
    lfs_superblock_t superblock = {
 801f8be:	9306      	str	r3, [sp, #24]
        .attr_max    = lfs->attr_max,
 801f8c0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    lfs_superblock_t superblock = {
 801f8c2:	9307      	str	r3, [sp, #28]
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801f8c4:	4b0b      	ldr	r3, [pc, #44]	@ (801f8f4 <lfs_fs_desuperblock+0x8c>)
 801f8c6:	9310      	str	r3, [sp, #64]	@ 0x40
 801f8c8:	ab02      	add	r3, sp, #8
 801f8ca:	9311      	str	r3, [sp, #68]	@ 0x44
 801f8cc:	2301      	movs	r3, #1
 801f8ce:	aa10      	add	r2, sp, #64	@ 0x40
 801f8d0:	a908      	add	r1, sp, #32
 801f8d2:	4620      	mov	r0, r4
 801f8d4:	f7ff ffba 	bl	801f84c <lfs_dir_commit>
    if (err) {
 801f8d8:	4605      	mov	r5, r0
 801f8da:	2800      	cmp	r0, #0
 801f8dc:	d1cb      	bne.n	801f876 <lfs_fs_desuperblock+0xe>
    lfs_fs_prepsuperblock(lfs, false);
 801f8de:	2100      	movs	r1, #0
 801f8e0:	4620      	mov	r0, r4
 801f8e2:	f7fc ff68 	bl	801c7b6 <lfs_fs_prepsuperblock>
    return 0;
 801f8e6:	e7c6      	b.n	801f876 <lfs_fs_desuperblock+0xe>
 801f8e8:	08038678 	.word	0x08038678
 801f8ec:	0803a198 	.word	0x0803a198
 801f8f0:	0803a69c 	.word	0x0803a69c
 801f8f4:	20100018 	.word	0x20100018

0801f8f8 <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
 801f8f8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
    return (tag & 0x70000000) >> 20;
 801f8fa:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 801f8fc:	f412 6fe0 	tst.w	r2, #1792	@ 0x700
 801f900:	d101      	bne.n	801f906 <lfs_fs_demove+0xe>
        return 0;
 801f902:	2000      	movs	r0, #0
}
 801f904:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
 801f906:	b530      	push	{r4, r5, lr}
 801f908:	b08f      	sub	sp, #60	@ 0x3c
 801f90a:	4604      	mov	r4, r0
    return (tag & 0x000ffc00) >> 10;
 801f90c:	f3c3 2389 	ubfx	r3, r3, #10, #10
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 801f910:	4a1d      	ldr	r2, [pc, #116]	@ (801f988 <lfs_fs_demove+0x90>)
 801f912:	9202      	str	r2, [sp, #8]
 801f914:	9301      	str	r3, [sp, #4]
 801f916:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801f918:	9300      	str	r3, [sp, #0]
 801f91a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801f91c:	f241 3224 	movw	r2, #4900	@ 0x1324
 801f920:	491a      	ldr	r1, [pc, #104]	@ (801f98c <lfs_fs_demove+0x94>)
 801f922:	481b      	ldr	r0, [pc, #108]	@ (801f990 <lfs_fs_demove+0x98>)
 801f924:	f00c fb94 	bl	802c050 <printf>
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801f928:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    return (tag & 0x7ff00000) >> 20;
 801f92a:	f3c3 530a 	ubfx	r3, r3, #20, #11
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801f92e:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 801f932:	4293      	cmp	r3, r2
 801f934:	d108      	bne.n	801f948 <lfs_fs_demove+0x50>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 801f936:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801f93a:	a904      	add	r1, sp, #16
 801f93c:	4620      	mov	r0, r4
 801f93e:	f7fe f975 	bl	801dc2c <lfs_dir_fetch>
    if (err) {
 801f942:	b140      	cbz	r0, 801f956 <lfs_fs_demove+0x5e>
}
 801f944:	b00f      	add	sp, #60	@ 0x3c
 801f946:	bd30      	pop	{r4, r5, pc}
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801f948:	4b12      	ldr	r3, [pc, #72]	@ (801f994 <lfs_fs_demove+0x9c>)
 801f94a:	4a13      	ldr	r2, [pc, #76]	@ (801f998 <lfs_fs_demove+0xa0>)
 801f94c:	f241 312b 	movw	r1, #4907	@ 0x132b
 801f950:	480e      	ldr	r0, [pc, #56]	@ (801f98c <lfs_fs_demove+0x94>)
 801f952:	f00b fe5b 	bl	802b60c <__assert_func>
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 801f956:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801f958:	f3c5 2589 	ubfx	r5, r5, #10, #10
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801f95c:	2200      	movs	r2, #0
 801f95e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801f962:	4620      	mov	r0, r4
 801f964:	f7fc ff2e 	bl	801c7c4 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 801f968:	02ab      	lsls	r3, r5, #10
 801f96a:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801f96e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f972:	930c      	str	r3, [sp, #48]	@ 0x30
 801f974:	2300      	movs	r3, #0
 801f976:	930d      	str	r3, [sp, #52]	@ 0x34
 801f978:	2301      	movs	r3, #1
 801f97a:	aa0c      	add	r2, sp, #48	@ 0x30
 801f97c:	a904      	add	r1, sp, #16
 801f97e:	4620      	mov	r0, r4
 801f980:	f7ff ff64 	bl	801f84c <lfs_dir_commit>
    if (err) {
 801f984:	e7de      	b.n	801f944 <lfs_fs_demove+0x4c>
 801f986:	bf00      	nop
 801f988:	08038678 	.word	0x08038678
 801f98c:	0803a198 	.word	0x0803a198
 801f990:	0803a6d0 	.word	0x0803a6d0
 801f994:	0803a704 	.word	0x0803a704
 801f998:	0803d538 	.word	0x0803d538

0801f99c <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 801f99c:	b510      	push	{r4, lr}
 801f99e:	4604      	mov	r4, r0
    int err = lfs_fs_desuperblock(lfs);
 801f9a0:	f7ff ff62 	bl	801f868 <lfs_fs_desuperblock>
    if (err) {
 801f9a4:	4603      	mov	r3, r0
 801f9a6:	b108      	cbz	r0, 801f9ac <lfs_fs_forceconsistency+0x10>
}
 801f9a8:	4618      	mov	r0, r3
 801f9aa:	bd10      	pop	{r4, pc}
    err = lfs_fs_demove(lfs);
 801f9ac:	4620      	mov	r0, r4
 801f9ae:	f7ff ffa3 	bl	801f8f8 <lfs_fs_demove>
    if (err) {
 801f9b2:	4603      	mov	r3, r0
 801f9b4:	2800      	cmp	r0, #0
 801f9b6:	d1f7      	bne.n	801f9a8 <lfs_fs_forceconsistency+0xc>
    err = lfs_fs_deorphan(lfs, true);
 801f9b8:	2101      	movs	r1, #1
 801f9ba:	4620      	mov	r0, r4
 801f9bc:	f7ff fe48 	bl	801f650 <lfs_fs_deorphan>
 801f9c0:	4603      	mov	r3, r0
    if (err) {
 801f9c2:	e7f1      	b.n	801f9a8 <lfs_fs_forceconsistency+0xc>

0801f9c4 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 801f9c4:	b570      	push	{r4, r5, r6, lr}
 801f9c6:	b082      	sub	sp, #8
 801f9c8:	4605      	mov	r5, r0
 801f9ca:	460e      	mov	r6, r1
 801f9cc:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 801f9ce:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 801f9d2:	4621      	mov	r1, r4
 801f9d4:	f7fd f948 	bl	801cc68 <lfs_dir_getgstate>
    if (err) {
 801f9d8:	b108      	cbz	r0, 801f9de <lfs_dir_drop+0x1a>
}
 801f9da:	b002      	add	sp, #8
 801f9dc:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 801f9de:	7de2      	ldrb	r2, [r4, #23]
 801f9e0:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801f9e4:	4b06      	ldr	r3, [pc, #24]	@ (801fa00 <lfs_dir_drop+0x3c>)
 801f9e6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801f9ea:	9300      	str	r3, [sp, #0]
 801f9ec:	3418      	adds	r4, #24
 801f9ee:	9401      	str	r4, [sp, #4]
 801f9f0:	2301      	movs	r3, #1
 801f9f2:	466a      	mov	r2, sp
 801f9f4:	4631      	mov	r1, r6
 801f9f6:	4628      	mov	r0, r5
 801f9f8:	f7ff ff28 	bl	801f84c <lfs_dir_commit>
    if (err) {
 801f9fc:	e7ed      	b.n	801f9da <lfs_dir_drop+0x16>
 801f9fe:	bf00      	nop
 801fa00:	000ffc08 	.word	0x000ffc08

0801fa04 <lfs_file_sync_>:
    if (file->flags & LFS_F_ERRED) {
 801fa04:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801fa06:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 801fa0a:	d001      	beq.n	801fa10 <lfs_file_sync_+0xc>
        return 0;
 801fa0c:	2000      	movs	r0, #0
}
 801fa0e:	4770      	bx	lr
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 801fa10:	b530      	push	{r4, r5, lr}
 801fa12:	b087      	sub	sp, #28
 801fa14:	4605      	mov	r5, r0
 801fa16:	460c      	mov	r4, r1
    int err = lfs_file_flush(lfs, file);
 801fa18:	f7fe fcc6 	bl	801e3a8 <lfs_file_flush>
    if (err) {
 801fa1c:	2800      	cmp	r0, #0
 801fa1e:	d132      	bne.n	801fa86 <lfs_file_sync_+0x82>
    if ((file->flags & LFS_F_DIRTY) &&
 801fa20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801fa22:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 801fa26:	d032      	beq.n	801fa8e <lfs_file_sync_+0x8a>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801fa28:	68a2      	ldr	r2, [r4, #8]
 801fa2a:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801fa2e:	d02e      	beq.n	801fa8e <lfs_file_sync_+0x8a>
 801fa30:	68e2      	ldr	r2, [r4, #12]
 801fa32:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801fa36:	d02a      	beq.n	801fa8e <lfs_file_sync_+0x8a>
        if (!(file->flags & LFS_F_INLINE)) {
 801fa38:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801fa3c:	d029      	beq.n	801fa92 <lfs_file_sync_+0x8e>
        if (file->flags & LFS_F_INLINE) {
 801fa3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801fa40:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801fa44:	d02f      	beq.n	801faa6 <lfs_file_sync_+0xa2>
            buffer = file->cache.buffer;
 801fa46:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
            size = file->ctz.size;
 801fa48:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
            type = LFS_TYPE_INLINESTRUCT;
 801fa4a:	f240 2201 	movw	r2, #513	@ 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801fa4e:	88a3      	ldrh	r3, [r4, #4]
 801fa50:	029b      	lsls	r3, r3, #10
 801fa52:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
 801fa56:	4302      	orrs	r2, r0
 801fa58:	9202      	str	r2, [sp, #8]
 801fa5a:	9103      	str	r1, [sp, #12]
 801fa5c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801fa5e:	6891      	ldr	r1, [r2, #8]
 801fa60:	430b      	orrs	r3, r1
 801fa62:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 801fa66:	9304      	str	r3, [sp, #16]
 801fa68:	6853      	ldr	r3, [r2, #4]
 801fa6a:	9305      	str	r3, [sp, #20]
 801fa6c:	2302      	movs	r3, #2
 801fa6e:	aa02      	add	r2, sp, #8
 801fa70:	f104 0108 	add.w	r1, r4, #8
 801fa74:	4628      	mov	r0, r5
 801fa76:	f7ff fee9 	bl	801f84c <lfs_dir_commit>
        if (err) {
 801fa7a:	bb00      	cbnz	r0, 801fabe <lfs_file_sync_+0xba>
        file->flags &= ~LFS_F_DIRTY;
 801fa7c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801fa7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801fa82:	6323      	str	r3, [r4, #48]	@ 0x30
 801fa84:	e003      	b.n	801fa8e <lfs_file_sync_+0x8a>
        file->flags |= LFS_F_ERRED;
 801fa86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801fa88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801fa8c:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801fa8e:	b007      	add	sp, #28
 801fa90:	bd30      	pop	{r4, r5, pc}
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801fa92:	2300      	movs	r3, #0
 801fa94:	462a      	mov	r2, r5
 801fa96:	f105 0110 	add.w	r1, r5, #16
 801fa9a:	4628      	mov	r0, r5
 801fa9c:	f7fd fca8 	bl	801d3f0 <lfs_bd_sync>
            if (err) {
 801faa0:	2800      	cmp	r0, #0
 801faa2:	d0cc      	beq.n	801fa3e <lfs_file_sync_+0x3a>
 801faa4:	e7f3      	b.n	801fa8e <lfs_file_sync_+0x8a>
            ctz = file->ctz;
 801faa6:	466b      	mov	r3, sp
 801faa8:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 801faac:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fab0:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
 801fab4:	2008      	movs	r0, #8
            buffer = &ctz;
 801fab6:	4619      	mov	r1, r3
            type = LFS_TYPE_CTZSTRUCT;
 801fab8:	f240 2202 	movw	r2, #514	@ 0x202
 801fabc:	e7c7      	b.n	801fa4e <lfs_file_sync_+0x4a>
            file->flags |= LFS_F_ERRED;
 801fabe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801fac0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801fac4:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801fac6:	e7e2      	b.n	801fa8e <lfs_file_sync_+0x8a>

0801fac8 <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
 801fac8:	b510      	push	{r4, lr}
 801faca:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 801facc:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801face:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801fad0:	b13b      	cbz	r3, 801fae2 <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
 801fad2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801fad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801fad6:	b143      	cbz	r3, 801faea <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
 801fad8:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801fada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801fadc:	b14b      	cbz	r3, 801faf2 <lfs_deinit+0x2a>
}
 801fade:	2000      	movs	r0, #0
 801fae0:	bd10      	pop	{r4, pc}
// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 801fae2:	68c0      	ldr	r0, [r0, #12]
 801fae4:	f7fc fb1a 	bl	801c11c <vPortFree>
#else
    (void)p;
#endif
}
 801fae8:	e7f3      	b.n	801fad2 <lfs_deinit+0xa>
    free(p);
 801faea:	69e0      	ldr	r0, [r4, #28]
 801faec:	f7fc fb16 	bl	801c11c <vPortFree>
}
 801faf0:	e7f2      	b.n	801fad8 <lfs_deinit+0x10>
    free(p);
 801faf2:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801faf4:	f7fc fb12 	bl	801c11c <vPortFree>
}
 801faf8:	e7f1      	b.n	801fade <lfs_deinit+0x16>
	...

0801fafc <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 801fafc:	b538      	push	{r3, r4, r5, lr}
    lfs->cfg = cfg;
 801fafe:	6681      	str	r1, [r0, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 801fb00:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801fb02:	66c3      	str	r3, [r0, #108]	@ 0x6c
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801fb04:	69cb      	ldr	r3, [r1, #28]
 801fb06:	2b00      	cmp	r3, #0
 801fb08:	f000 80b1 	beq.w	801fc6e <lfs_init+0x172>
 801fb0c:	4604      	mov	r4, r0
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801fb0e:	6a0a      	ldr	r2, [r1, #32]
 801fb10:	2a00      	cmp	r2, #0
 801fb12:	f000 80b3 	beq.w	801fc7c <lfs_init+0x180>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801fb16:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 801fb18:	2800      	cmp	r0, #0
 801fb1a:	f000 80b6 	beq.w	801fc8a <lfs_init+0x18e>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801fb1e:	fbb0 fcf3 	udiv	ip, r0, r3
 801fb22:	fb03 031c 	mls	r3, r3, ip, r0
 801fb26:	2b00      	cmp	r3, #0
 801fb28:	f040 80b6 	bne.w	801fc98 <lfs_init+0x19c>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801fb2c:	fbb0 f3f2 	udiv	r3, r0, r2
 801fb30:	fb02 0313 	mls	r3, r2, r3, r0
 801fb34:	2b00      	cmp	r3, #0
 801fb36:	f040 80b6 	bne.w	801fca6 <lfs_init+0x1aa>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801fb3a:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801fb3c:	fbb2 f3f0 	udiv	r3, r2, r0
 801fb40:	fb00 2313 	mls	r3, r0, r3, r2
 801fb44:	2b00      	cmp	r3, #0
 801fb46:	f040 80b5 	bne.w	801fcb4 <lfs_init+0x1b8>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801fb4a:	2a7f      	cmp	r2, #127	@ 0x7f
 801fb4c:	f240 80b9 	bls.w	801fcc2 <lfs_init+0x1c6>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801fb50:	f1a2 0c08 	sub.w	ip, r2, #8
 801fb54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fb58:	fbb3 f3fc 	udiv	r3, r3, ip
    return 32 - __builtin_clz(a-1);
 801fb5c:	3b01      	subs	r3, #1
 801fb5e:	fab3 f383 	clz	r3, r3
 801fb62:	f1c3 0320 	rsb	r3, r3, #32
 801fb66:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 801fb6a:	f0c0 80b1 	bcc.w	801fcd0 <lfs_init+0x1d4>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801fb6e:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801fb70:	2b00      	cmp	r3, #0
 801fb72:	f000 80b4 	beq.w	801fcde <lfs_init+0x1e2>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801fb76:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 801fb78:	b11b      	cbz	r3, 801fb82 <lfs_init+0x86>
 801fb7a:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 801fb7e:	f0c0 80b5 	bcc.w	801fcec <lfs_init+0x1f0>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801fb82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801fb86:	d002      	beq.n	801fb8e <lfs_init+0x92>
 801fb88:	429a      	cmp	r2, r3
 801fb8a:	f0c0 80b6 	bcc.w	801fcfa <lfs_init+0x1fe>
    if (lfs->cfg->read_buffer) {
 801fb8e:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801fb90:	2b00      	cmp	r3, #0
 801fb92:	f000 80b9 	beq.w	801fd08 <lfs_init+0x20c>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 801fb96:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 801fb98:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801fb9a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801fb9c:	2b00      	cmp	r3, #0
 801fb9e:	f000 80bf 	beq.w	801fd20 <lfs_init+0x224>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 801fba2:	61e3      	str	r3, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
 801fba4:	4621      	mov	r1, r4
 801fba6:	4620      	mov	r0, r4
 801fba8:	f7fc fe80 	bl	801c8ac <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 801fbac:	f104 0110 	add.w	r1, r4, #16
 801fbb0:	4620      	mov	r0, r4
 801fbb2:	f7fc fe7b 	bl	801c8ac <lfs_cache_zero>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801fbb6:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801fbb8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801fbba:	2800      	cmp	r0, #0
 801fbbc:	f000 80b8 	beq.w	801fd30 <lfs_init+0x234>
    if (lfs->cfg->lookahead_buffer) {
 801fbc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801fbc2:	2b00      	cmp	r3, #0
 801fbc4:	f000 80bb 	beq.w	801fd3e <lfs_init+0x242>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 801fbc8:	6663      	str	r3, [r4, #100]	@ 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801fbca:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801fbcc:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 801fbce:	2bff      	cmp	r3, #255	@ 0xff
 801fbd0:	f200 80bc 	bhi.w	801fd4c <lfs_init+0x250>
    lfs->name_max = lfs->cfg->name_max;
 801fbd4:	6723      	str	r3, [r4, #112]	@ 0x70
    if (!lfs->name_max) {
 801fbd6:	b90b      	cbnz	r3, 801fbdc <lfs_init+0xe0>
        lfs->name_max = LFS_NAME_MAX;
 801fbd8:	23ff      	movs	r3, #255	@ 0xff
 801fbda:	6723      	str	r3, [r4, #112]	@ 0x70
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801fbdc:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 801fbde:	2b00      	cmp	r3, #0
 801fbe0:	f2c0 80bb 	blt.w	801fd5a <lfs_init+0x25e>
    lfs->file_max = lfs->cfg->file_max;
 801fbe4:	6763      	str	r3, [r4, #116]	@ 0x74
    if (!lfs->file_max) {
 801fbe6:	b913      	cbnz	r3, 801fbee <lfs_init+0xf2>
        lfs->file_max = LFS_FILE_MAX;
 801fbe8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801fbec:	6763      	str	r3, [r4, #116]	@ 0x74
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801fbee:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801fbf0:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 801fbf4:	428b      	cmp	r3, r1
 801fbf6:	f200 80b7 	bhi.w	801fd68 <lfs_init+0x26c>
    lfs->attr_max = lfs->cfg->attr_max;
 801fbfa:	67a3      	str	r3, [r4, #120]	@ 0x78
    if (!lfs->attr_max) {
 801fbfc:	b913      	cbnz	r3, 801fc04 <lfs_init+0x108>
        lfs->attr_max = LFS_ATTR_MAX;
 801fbfe:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801fc02:	67a3      	str	r3, [r4, #120]	@ 0x78
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801fc04:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 801fc06:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 801fc08:	4288      	cmp	r0, r1
 801fc0a:	f200 80b4 	bhi.w	801fd76 <lfs_init+0x27a>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801fc0e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 801fc10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801fc14:	d003      	beq.n	801fc1e <lfs_init+0x122>
 801fc16:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 801fc18:	42ab      	cmp	r3, r5
 801fc1a:	f200 80b3 	bhi.w	801fd84 <lfs_init+0x288>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801fc1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801fc22:	d003      	beq.n	801fc2c <lfs_init+0x130>
 801fc24:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 801fc26:	42ab      	cmp	r3, r5
 801fc28:	f200 80b3 	bhi.w	801fd92 <lfs_init+0x296>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801fc2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801fc30:	d006      	beq.n	801fc40 <lfs_init+0x144>
 801fc32:	2800      	cmp	r0, #0
 801fc34:	f000 80b4 	beq.w	801fda0 <lfs_init+0x2a4>
 801fc38:	08c1      	lsrs	r1, r0, #3
 801fc3a:	428b      	cmp	r3, r1
 801fc3c:	f200 80b2 	bhi.w	801fda4 <lfs_init+0x2a8>
    lfs->inline_max = lfs->cfg->inline_max;
 801fc40:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 801fc42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801fc46:	f000 80b4 	beq.w	801fdb2 <lfs_init+0x2b6>
    } else if (lfs->inline_max == 0) {
 801fc4a:	2b00      	cmp	r3, #0
 801fc4c:	f040 80b3 	bne.w	801fdb6 <lfs_init+0x2ba>
                lfs->cfg->cache_size,
 801fc50:	6b11      	ldr	r1, [r2, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 801fc52:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
                    ((lfs->cfg->metadata_max)
 801fc54:	6d53      	ldr	r3, [r2, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 801fc56:	2b00      	cmp	r3, #0
 801fc58:	f000 80be 	beq.w	801fdd8 <lfs_init+0x2dc>
 801fc5c:	08db      	lsrs	r3, r3, #3
    return (a < b) ? a : b;
 801fc5e:	4283      	cmp	r3, r0
 801fc60:	bf28      	it	cs
 801fc62:	4603      	movcs	r3, r0
 801fc64:	428b      	cmp	r3, r1
 801fc66:	bf28      	it	cs
 801fc68:	460b      	movcs	r3, r1
 801fc6a:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801fc6c:	e0a3      	b.n	801fdb6 <lfs_init+0x2ba>
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801fc6e:	4b5c      	ldr	r3, [pc, #368]	@ (801fde0 <lfs_init+0x2e4>)
 801fc70:	4a5c      	ldr	r2, [pc, #368]	@ (801fde4 <lfs_init+0x2e8>)
 801fc72:	f241 0152 	movw	r1, #4178	@ 0x1052
 801fc76:	485c      	ldr	r0, [pc, #368]	@ (801fde8 <lfs_init+0x2ec>)
 801fc78:	f00b fcc8 	bl	802b60c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801fc7c:	4b5b      	ldr	r3, [pc, #364]	@ (801fdec <lfs_init+0x2f0>)
 801fc7e:	4a59      	ldr	r2, [pc, #356]	@ (801fde4 <lfs_init+0x2e8>)
 801fc80:	f241 0153 	movw	r1, #4179	@ 0x1053
 801fc84:	4858      	ldr	r0, [pc, #352]	@ (801fde8 <lfs_init+0x2ec>)
 801fc86:	f00b fcc1 	bl	802b60c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801fc8a:	4b59      	ldr	r3, [pc, #356]	@ (801fdf0 <lfs_init+0x2f4>)
 801fc8c:	4a55      	ldr	r2, [pc, #340]	@ (801fde4 <lfs_init+0x2e8>)
 801fc8e:	f241 0154 	movw	r1, #4180	@ 0x1054
 801fc92:	4855      	ldr	r0, [pc, #340]	@ (801fde8 <lfs_init+0x2ec>)
 801fc94:	f00b fcba 	bl	802b60c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801fc98:	4b56      	ldr	r3, [pc, #344]	@ (801fdf4 <lfs_init+0x2f8>)
 801fc9a:	4a52      	ldr	r2, [pc, #328]	@ (801fde4 <lfs_init+0x2e8>)
 801fc9c:	f241 0158 	movw	r1, #4184	@ 0x1058
 801fca0:	4851      	ldr	r0, [pc, #324]	@ (801fde8 <lfs_init+0x2ec>)
 801fca2:	f00b fcb3 	bl	802b60c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801fca6:	4b54      	ldr	r3, [pc, #336]	@ (801fdf8 <lfs_init+0x2fc>)
 801fca8:	4a4e      	ldr	r2, [pc, #312]	@ (801fde4 <lfs_init+0x2e8>)
 801fcaa:	f241 0159 	movw	r1, #4185	@ 0x1059
 801fcae:	484e      	ldr	r0, [pc, #312]	@ (801fde8 <lfs_init+0x2ec>)
 801fcb0:	f00b fcac 	bl	802b60c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801fcb4:	4b51      	ldr	r3, [pc, #324]	@ (801fdfc <lfs_init+0x300>)
 801fcb6:	4a4b      	ldr	r2, [pc, #300]	@ (801fde4 <lfs_init+0x2e8>)
 801fcb8:	f241 015a 	movw	r1, #4186	@ 0x105a
 801fcbc:	484a      	ldr	r0, [pc, #296]	@ (801fde8 <lfs_init+0x2ec>)
 801fcbe:	f00b fca5 	bl	802b60c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801fcc2:	4b4f      	ldr	r3, [pc, #316]	@ (801fe00 <lfs_init+0x304>)
 801fcc4:	4a47      	ldr	r2, [pc, #284]	@ (801fde4 <lfs_init+0x2e8>)
 801fcc6:	f241 015d 	movw	r1, #4189	@ 0x105d
 801fcca:	4847      	ldr	r0, [pc, #284]	@ (801fde8 <lfs_init+0x2ec>)
 801fccc:	f00b fc9e 	bl	802b60c <__assert_func>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801fcd0:	4b4c      	ldr	r3, [pc, #304]	@ (801fe04 <lfs_init+0x308>)
 801fcd2:	4a44      	ldr	r2, [pc, #272]	@ (801fde4 <lfs_init+0x2e8>)
 801fcd4:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 801fcd8:	4843      	ldr	r0, [pc, #268]	@ (801fde8 <lfs_init+0x2ec>)
 801fcda:	f00b fc97 	bl	802b60c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801fcde:	4b4a      	ldr	r3, [pc, #296]	@ (801fe08 <lfs_init+0x30c>)
 801fce0:	4a40      	ldr	r2, [pc, #256]	@ (801fde4 <lfs_init+0x2e8>)
 801fce2:	f241 0169 	movw	r1, #4201	@ 0x1069
 801fce6:	4840      	ldr	r0, [pc, #256]	@ (801fde8 <lfs_init+0x2ec>)
 801fce8:	f00b fc90 	bl	802b60c <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801fcec:	4b47      	ldr	r3, [pc, #284]	@ (801fe0c <lfs_init+0x310>)
 801fcee:	4a3d      	ldr	r2, [pc, #244]	@ (801fde4 <lfs_init+0x2e8>)
 801fcf0:	f241 016f 	movw	r1, #4207	@ 0x106f
 801fcf4:	483c      	ldr	r0, [pc, #240]	@ (801fde8 <lfs_init+0x2ec>)
 801fcf6:	f00b fc89 	bl	802b60c <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801fcfa:	4b45      	ldr	r3, [pc, #276]	@ (801fe10 <lfs_init+0x314>)
 801fcfc:	4a39      	ldr	r2, [pc, #228]	@ (801fde4 <lfs_init+0x2e8>)
 801fcfe:	f241 0171 	movw	r1, #4209	@ 0x1071
 801fd02:	4839      	ldr	r0, [pc, #228]	@ (801fde8 <lfs_init+0x2ec>)
 801fd04:	f00b fc82 	bl	802b60c <__assert_func>
    return malloc(size);
 801fd08:	f7fc f986 	bl	801c018 <pvPortMalloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801fd0c:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 801fd0e:	2800      	cmp	r0, #0
 801fd10:	f47f af42 	bne.w	801fb98 <lfs_init+0x9c>
    lfs_deinit(lfs);
 801fd14:	4620      	mov	r0, r4
 801fd16:	f7ff fed7 	bl	801fac8 <lfs_deinit>
    return err;
 801fd1a:	f06f 000b 	mvn.w	r0, #11
 801fd1e:	e05a      	b.n	801fdd6 <lfs_init+0x2da>
 801fd20:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 801fd22:	f7fc f979 	bl	801c018 <pvPortMalloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801fd26:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 801fd28:	2800      	cmp	r0, #0
 801fd2a:	f47f af3b 	bne.w	801fba4 <lfs_init+0xa8>
 801fd2e:	e7f1      	b.n	801fd14 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801fd30:	4b38      	ldr	r3, [pc, #224]	@ (801fe14 <lfs_init+0x318>)
 801fd32:	4a2c      	ldr	r2, [pc, #176]	@ (801fde4 <lfs_init+0x2e8>)
 801fd34:	f241 0190 	movw	r1, #4240	@ 0x1090
 801fd38:	482b      	ldr	r0, [pc, #172]	@ (801fde8 <lfs_init+0x2ec>)
 801fd3a:	f00b fc67 	bl	802b60c <__assert_func>
 801fd3e:	f7fc f96b 	bl	801c018 <pvPortMalloc>
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 801fd42:	6660      	str	r0, [r4, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 801fd44:	2800      	cmp	r0, #0
 801fd46:	f47f af40 	bne.w	801fbca <lfs_init+0xce>
 801fd4a:	e7e3      	b.n	801fd14 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801fd4c:	4b32      	ldr	r3, [pc, #200]	@ (801fe18 <lfs_init+0x31c>)
 801fd4e:	4a25      	ldr	r2, [pc, #148]	@ (801fde4 <lfs_init+0x2e8>)
 801fd50:	f241 019c 	movw	r1, #4252	@ 0x109c
 801fd54:	4824      	ldr	r0, [pc, #144]	@ (801fde8 <lfs_init+0x2ec>)
 801fd56:	f00b fc59 	bl	802b60c <__assert_func>
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801fd5a:	4b30      	ldr	r3, [pc, #192]	@ (801fe1c <lfs_init+0x320>)
 801fd5c:	4a21      	ldr	r2, [pc, #132]	@ (801fde4 <lfs_init+0x2e8>)
 801fd5e:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 801fd62:	4821      	ldr	r0, [pc, #132]	@ (801fde8 <lfs_init+0x2ec>)
 801fd64:	f00b fc52 	bl	802b60c <__assert_func>
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801fd68:	4b2d      	ldr	r3, [pc, #180]	@ (801fe20 <lfs_init+0x324>)
 801fd6a:	4a1e      	ldr	r2, [pc, #120]	@ (801fde4 <lfs_init+0x2e8>)
 801fd6c:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 801fd70:	481d      	ldr	r0, [pc, #116]	@ (801fde8 <lfs_init+0x2ec>)
 801fd72:	f00b fc4b 	bl	802b60c <__assert_func>
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801fd76:	4b2b      	ldr	r3, [pc, #172]	@ (801fe24 <lfs_init+0x328>)
 801fd78:	4a1a      	ldr	r2, [pc, #104]	@ (801fde4 <lfs_init+0x2e8>)
 801fd7a:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 801fd7e:	481a      	ldr	r0, [pc, #104]	@ (801fde8 <lfs_init+0x2ec>)
 801fd80:	f00b fc44 	bl	802b60c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801fd84:	4b28      	ldr	r3, [pc, #160]	@ (801fe28 <lfs_init+0x32c>)
 801fd86:	4a17      	ldr	r2, [pc, #92]	@ (801fde4 <lfs_init+0x2e8>)
 801fd88:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 801fd8c:	4816      	ldr	r0, [pc, #88]	@ (801fde8 <lfs_init+0x2ec>)
 801fd8e:	f00b fc3d 	bl	802b60c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801fd92:	4b26      	ldr	r3, [pc, #152]	@ (801fe2c <lfs_init+0x330>)
 801fd94:	4a13      	ldr	r2, [pc, #76]	@ (801fde4 <lfs_init+0x2e8>)
 801fd96:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 801fd9a:	4813      	ldr	r0, [pc, #76]	@ (801fde8 <lfs_init+0x2ec>)
 801fd9c:	f00b fc36 	bl	802b60c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801fda0:	08c9      	lsrs	r1, r1, #3
 801fda2:	e74a      	b.n	801fc3a <lfs_init+0x13e>
 801fda4:	4b22      	ldr	r3, [pc, #136]	@ (801fe30 <lfs_init+0x334>)
 801fda6:	4a0f      	ldr	r2, [pc, #60]	@ (801fde4 <lfs_init+0x2e8>)
 801fda8:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 801fdac:	480e      	ldr	r0, [pc, #56]	@ (801fde8 <lfs_init+0x2ec>)
 801fdae:	f00b fc2d 	bl	802b60c <__assert_func>
        lfs->inline_max = 0;
 801fdb2:	2300      	movs	r3, #0
 801fdb4:	67e3      	str	r3, [r4, #124]	@ 0x7c
    lfs->root[0] = LFS_BLOCK_NULL;
 801fdb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fdba:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801fdbc:	6263      	str	r3, [r4, #36]	@ 0x24
    lfs->mlist = NULL;
 801fdbe:	2000      	movs	r0, #0
 801fdc0:	62a0      	str	r0, [r4, #40]	@ 0x28
    lfs->seed = 0;
 801fdc2:	62e0      	str	r0, [r4, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 801fdc4:	63e0      	str	r0, [r4, #60]	@ 0x3c
 801fdc6:	6420      	str	r0, [r4, #64]	@ 0x40
 801fdc8:	6460      	str	r0, [r4, #68]	@ 0x44
    lfs->gstate = (lfs_gstate_t){0};
 801fdca:	6320      	str	r0, [r4, #48]	@ 0x30
 801fdcc:	6360      	str	r0, [r4, #52]	@ 0x34
 801fdce:	63a0      	str	r0, [r4, #56]	@ 0x38
    lfs->gdelta = (lfs_gstate_t){0};
 801fdd0:	64a0      	str	r0, [r4, #72]	@ 0x48
 801fdd2:	64e0      	str	r0, [r4, #76]	@ 0x4c
 801fdd4:	6520      	str	r0, [r4, #80]	@ 0x50
}
 801fdd6:	bd38      	pop	{r3, r4, r5, pc}
                        : lfs->cfg->block_size)/8));
 801fdd8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 801fdda:	08db      	lsrs	r3, r3, #3
 801fddc:	e73f      	b.n	801fc5e <lfs_init+0x162>
 801fdde:	bf00      	nop
 801fde0:	0803a738 	.word	0x0803a738
 801fde4:	0803d5f8 	.word	0x0803d5f8
 801fde8:	0803a198 	.word	0x0803a198
 801fdec:	0803a754 	.word	0x0803a754
 801fdf0:	0803a770 	.word	0x0803a770
 801fdf4:	0803a78c 	.word	0x0803a78c
 801fdf8:	0803a7bc 	.word	0x0803a7bc
 801fdfc:	0803a7ec 	.word	0x0803a7ec
 801fe00:	0803a820 	.word	0x0803a820
 801fe04:	0803a83c 	.word	0x0803a83c
 801fe08:	0803a888 	.word	0x0803a888
 801fe0c:	0803a8a4 	.word	0x0803a8a4
 801fe10:	0803a8f8 	.word	0x0803a8f8
 801fe14:	0803a958 	.word	0x0803a958
 801fe18:	0803a978 	.word	0x0803a978
 801fe1c:	0803a994 	.word	0x0803a994
 801fe20:	0803a9b8 	.word	0x0803a9b8
 801fe24:	0803a9d4 	.word	0x0803a9d4
 801fe28:	0803aa04 	.word	0x0803aa04
 801fe2c:	0803aa5c 	.word	0x0803aa5c
 801fe30:	0803aaac 	.word	0x0803aaac

0801fe34 <lfs_format_>:
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 801fe34:	b570      	push	{r4, r5, r6, lr}
 801fe36:	b096      	sub	sp, #88	@ 0x58
 801fe38:	4604      	mov	r4, r0
 801fe3a:	460d      	mov	r5, r1
        err = lfs_init(lfs, cfg);
 801fe3c:	f7ff fe5e 	bl	801fafc <lfs_init>
        if (err) {
 801fe40:	4606      	mov	r6, r0
 801fe42:	b9f0      	cbnz	r0, 801fe82 <lfs_format_+0x4e>
        LFS_ASSERT(cfg->block_count != 0);
 801fe44:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801fe46:	b1fb      	cbz	r3, 801fe88 <lfs_format_+0x54>
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801fe48:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801fe4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801fe4c:	2100      	movs	r1, #0
 801fe4e:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801fe50:	f00c fcd6 	bl	802c800 <memset>
        lfs->lookahead.start = 0;
 801fe54:	2200      	movs	r2, #0
 801fe56:	6562      	str	r2, [r4, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 801fe58:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801fe5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fe5c:	00db      	lsls	r3, r3, #3
 801fe5e:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
    return (a < b) ? a : b;
 801fe60:	428b      	cmp	r3, r1
 801fe62:	bf28      	it	cs
 801fe64:	460b      	movcs	r3, r1
 801fe66:	65a3      	str	r3, [r4, #88]	@ 0x58
        lfs->lookahead.next = 0;
 801fe68:	65e2      	str	r2, [r4, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 801fe6a:	4620      	mov	r0, r4
 801fe6c:	f7fc fc0a 	bl	801c684 <lfs_alloc_ckpoint>
        err = lfs_dir_alloc(lfs, &root);
 801fe70:	a906      	add	r1, sp, #24
 801fe72:	4620      	mov	r0, r4
 801fe74:	f7fe f840 	bl	801def8 <lfs_dir_alloc>
        if (err) {
 801fe78:	4606      	mov	r6, r0
 801fe7a:	b160      	cbz	r0, 801fe96 <lfs_format_+0x62>
    lfs_deinit(lfs);
 801fe7c:	4620      	mov	r0, r4
 801fe7e:	f7ff fe23 	bl	801fac8 <lfs_deinit>
}
 801fe82:	4630      	mov	r0, r6
 801fe84:	b016      	add	sp, #88	@ 0x58
 801fe86:	bd70      	pop	{r4, r5, r6, pc}
        LFS_ASSERT(cfg->block_count != 0);
 801fe88:	4b20      	ldr	r3, [pc, #128]	@ (801ff0c <lfs_format_+0xd8>)
 801fe8a:	4a21      	ldr	r2, [pc, #132]	@ (801ff10 <lfs_format_+0xdc>)
 801fe8c:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 801fe90:	4820      	ldr	r0, [pc, #128]	@ (801ff14 <lfs_format_+0xe0>)
 801fe92:	f00b fbbb 	bl	802b60c <__assert_func>
            .version     = lfs_fs_disk_version(lfs),
 801fe96:	4620      	mov	r0, r4
 801fe98:	f7fc fbe6 	bl	801c668 <lfs_fs_disk_version>
        lfs_superblock_t superblock = {
 801fe9c:	9000      	str	r0, [sp, #0]
            .block_size  = lfs->cfg->block_size,
 801fe9e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801fea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 801fea2:	9301      	str	r3, [sp, #4]
            .block_count = lfs->block_count,
 801fea4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 801fea6:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
 801fea8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
        lfs_superblock_t superblock = {
 801feaa:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
 801feac:	6f63      	ldr	r3, [r4, #116]	@ 0x74
        lfs_superblock_t superblock = {
 801feae:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
 801feb0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        lfs_superblock_t superblock = {
 801feb2:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801feb4:	4b18      	ldr	r3, [pc, #96]	@ (801ff18 <lfs_format_+0xe4>)
 801feb6:	930e      	str	r3, [sp, #56]	@ 0x38
 801feb8:	2300      	movs	r3, #0
 801feba:	930f      	str	r3, [sp, #60]	@ 0x3c
 801febc:	4b17      	ldr	r3, [pc, #92]	@ (801ff1c <lfs_format_+0xe8>)
 801febe:	9310      	str	r3, [sp, #64]	@ 0x40
 801fec0:	4b17      	ldr	r3, [pc, #92]	@ (801ff20 <lfs_format_+0xec>)
 801fec2:	9311      	str	r3, [sp, #68]	@ 0x44
 801fec4:	4b17      	ldr	r3, [pc, #92]	@ (801ff24 <lfs_format_+0xf0>)
 801fec6:	9312      	str	r3, [sp, #72]	@ 0x48
 801fec8:	f8cd d04c 	str.w	sp, [sp, #76]	@ 0x4c
 801fecc:	2303      	movs	r3, #3
 801fece:	aa0e      	add	r2, sp, #56	@ 0x38
 801fed0:	a906      	add	r1, sp, #24
 801fed2:	4620      	mov	r0, r4
 801fed4:	f7ff fcba 	bl	801f84c <lfs_dir_commit>
        if (err) {
 801fed8:	4606      	mov	r6, r0
 801feda:	2800      	cmp	r0, #0
 801fedc:	d1ce      	bne.n	801fe7c <lfs_format_+0x48>
        root.erased = false;
 801fede:	2200      	movs	r2, #0
 801fee0:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 801fee4:	4613      	mov	r3, r2
 801fee6:	a906      	add	r1, sp, #24
 801fee8:	4620      	mov	r0, r4
 801feea:	f7ff fcaf 	bl	801f84c <lfs_dir_commit>
        if (err) {
 801feee:	4606      	mov	r6, r0
 801fef0:	2800      	cmp	r0, #0
 801fef2:	d1c3      	bne.n	801fe7c <lfs_format_+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 801fef4:	2300      	movs	r3, #0
 801fef6:	9314      	str	r3, [sp, #80]	@ 0x50
 801fef8:	2301      	movs	r3, #1
 801fefa:	9315      	str	r3, [sp, #84]	@ 0x54
 801fefc:	aa14      	add	r2, sp, #80	@ 0x50
 801fefe:	a906      	add	r1, sp, #24
 801ff00:	4620      	mov	r0, r4
 801ff02:	f7fd fe93 	bl	801dc2c <lfs_dir_fetch>
 801ff06:	4606      	mov	r6, r0
        if (err) {
 801ff08:	e7b8      	b.n	801fe7c <lfs_format_+0x48>
 801ff0a:	bf00      	nop
 801ff0c:	0803ab3c 	.word	0x0803ab3c
 801ff10:	0803d604 	.word	0x0803d604
 801ff14:	0803a198 	.word	0x0803a198
 801ff18:	40100000 	.word	0x40100000
 801ff1c:	0ff00008 	.word	0x0ff00008
 801ff20:	0803ab54 	.word	0x0803ab54
 801ff24:	20100018 	.word	0x20100018

0801ff28 <lfs_unmount_>:
static int lfs_unmount_(lfs_t *lfs) {
 801ff28:	b508      	push	{r3, lr}
    return lfs_deinit(lfs);
 801ff2a:	f7ff fdcd 	bl	801fac8 <lfs_deinit>
}
 801ff2e:	bd08      	pop	{r3, pc}

0801ff30 <lfs_mount_>:
static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 801ff30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff34:	b09b      	sub	sp, #108	@ 0x6c
 801ff36:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 801ff38:	f7ff fde0 	bl	801fafc <lfs_init>
    if (err) {
 801ff3c:	4606      	mov	r6, r0
 801ff3e:	2800      	cmp	r0, #0
 801ff40:	f040 8130 	bne.w	80201a4 <lfs_mount_+0x274>
    lfs_mdir_t dir = {.tail = {0, 1}};
 801ff44:	2220      	movs	r2, #32
 801ff46:	2100      	movs	r1, #0
 801ff48:	a80f      	add	r0, sp, #60	@ 0x3c
 801ff4a:	f00c fc59 	bl	802c800 <memset>
 801ff4e:	2501      	movs	r5, #1
 801ff50:	9516      	str	r5, [sp, #88]	@ 0x58
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801ff52:	4a9e      	ldr	r2, [pc, #632]	@ (80201cc <lfs_mount_+0x29c>)
 801ff54:	ab0d      	add	r3, sp, #52	@ 0x34
 801ff56:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ff5a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801ff5e:	462f      	mov	r7, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801ff60:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
 801ff64:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 801ff68:	f000 80fb 	beq.w	8020162 <lfs_mount_+0x232>
 801ff6c:	f8dd a058 	ldr.w	sl, [sp, #88]	@ 0x58
 801ff70:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801ff74:	f000 80f5 	beq.w	8020162 <lfs_mount_+0x232>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801ff78:	a90d      	add	r1, sp, #52	@ 0x34
 801ff7a:	a815      	add	r0, sp, #84	@ 0x54
 801ff7c:	f7fc fb06 	bl	801c58c <lfs_pair_issync>
 801ff80:	9004      	str	r0, [sp, #16]
 801ff82:	bb40      	cbnz	r0, 801ffd6 <lfs_mount_+0xa6>
        if (tortoise_i == tortoise_period) {
 801ff84:	42bd      	cmp	r5, r7
 801ff86:	d033      	beq.n	801fff0 <lfs_mount_+0xc0>
        tortoise_i += 1;
 801ff88:	3501      	adds	r5, #1
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 801ff8a:	9417      	str	r4, [sp, #92]	@ 0x5c
 801ff8c:	4b90      	ldr	r3, [pc, #576]	@ (80201d0 <lfs_mount_+0x2a0>)
 801ff8e:	9318      	str	r3, [sp, #96]	@ 0x60
 801ff90:	2308      	movs	r3, #8
 801ff92:	9319      	str	r3, [sp, #100]	@ 0x64
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 801ff94:	ab17      	add	r3, sp, #92	@ 0x5c
 801ff96:	9303      	str	r3, [sp, #12]
 801ff98:	4b8e      	ldr	r3, [pc, #568]	@ (80201d4 <lfs_mount_+0x2a4>)
 801ff9a:	9302      	str	r3, [sp, #8]
 801ff9c:	2300      	movs	r3, #0
 801ff9e:	9301      	str	r3, [sp, #4]
 801ffa0:	4b8d      	ldr	r3, [pc, #564]	@ (80201d8 <lfs_mount_+0x2a8>)
 801ffa2:	9300      	str	r3, [sp, #0]
 801ffa4:	4b8d      	ldr	r3, [pc, #564]	@ (80201dc <lfs_mount_+0x2ac>)
 801ffa6:	aa15      	add	r2, sp, #84	@ 0x54
 801ffa8:	a90f      	add	r1, sp, #60	@ 0x3c
 801ffaa:	4620      	mov	r0, r4
 801ffac:	f7fd fb5c 	bl	801d668 <lfs_dir_fetchmatch>
        if (tag < 0) {
 801ffb0:	2800      	cmp	r0, #0
 801ffb2:	f2c0 80d4 	blt.w	802015e <lfs_mount_+0x22e>
        if (tag && !lfs_tag_isdelete(tag)) {
 801ffb6:	b120      	cbz	r0, 801ffc2 <lfs_mount_+0x92>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801ffb8:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 801ffbc:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801ffc0:	d11d      	bne.n	801fffe <lfs_mount_+0xce>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801ffc2:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801ffc6:	a90f      	add	r1, sp, #60	@ 0x3c
 801ffc8:	4620      	mov	r0, r4
 801ffca:	f7fc fe4d 	bl	801cc68 <lfs_dir_getgstate>
        if (err) {
 801ffce:	2800      	cmp	r0, #0
 801ffd0:	d0c6      	beq.n	801ff60 <lfs_mount_+0x30>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801ffd2:	4606      	mov	r6, r0
 801ffd4:	e008      	b.n	801ffe8 <lfs_mount_+0xb8>
            LFS_WARN("Cycle detected in tail list");
 801ffd6:	4b82      	ldr	r3, [pc, #520]	@ (80201e0 <lfs_mount_+0x2b0>)
 801ffd8:	f241 123d 	movw	r2, #4413	@ 0x113d
 801ffdc:	4981      	ldr	r1, [pc, #516]	@ (80201e4 <lfs_mount_+0x2b4>)
 801ffde:	4882      	ldr	r0, [pc, #520]	@ (80201e8 <lfs_mount_+0x2b8>)
 801ffe0:	f00c f836 	bl	802c050 <printf>
            err = LFS_ERR_CORRUPT;
 801ffe4:	f06f 0653 	mvn.w	r6, #83	@ 0x53
    lfs_unmount_(lfs);
 801ffe8:	4620      	mov	r0, r4
 801ffea:	f7ff ff9d 	bl	801ff28 <lfs_unmount_>
    return err;
 801ffee:	e0d9      	b.n	80201a4 <lfs_mount_+0x274>
            tortoise[0] = dir.tail[0];
 801fff0:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
            tortoise[1] = dir.tail[1];
 801fff4:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
            tortoise_period *= 2;
 801fff8:	007f      	lsls	r7, r7, #1
            tortoise_i = 0;
 801fffa:	2500      	movs	r5, #0
 801fffc:	e7c4      	b.n	801ff88 <lfs_mount_+0x58>
            lfs->root[0] = dir.pair[0];
 801fffe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020000:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 8020002:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020004:	6263      	str	r3, [r4, #36]	@ 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8020006:	ab07      	add	r3, sp, #28
 8020008:	9300      	str	r3, [sp, #0]
 802000a:	4b78      	ldr	r3, [pc, #480]	@ (80201ec <lfs_mount_+0x2bc>)
 802000c:	4a73      	ldr	r2, [pc, #460]	@ (80201dc <lfs_mount_+0x2ac>)
 802000e:	a90f      	add	r1, sp, #60	@ 0x3c
 8020010:	4620      	mov	r0, r4
 8020012:	f7fc fe1b 	bl	801cc4c <lfs_dir_get>
            if (tag < 0) {
 8020016:	2800      	cmp	r0, #0
 8020018:	f2c0 809f 	blt.w	802015a <lfs_mount_+0x22a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 802001c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8020020:	ea4f 4318 	mov.w	r3, r8, lsr #16
 8020024:	9305      	str	r3, [sp, #20]
 8020026:	469b      	mov	fp, r3
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8020028:	fa1f fa88 	uxth.w	sl, r8
            if (major_version != lfs_fs_disk_version_major(lfs)
 802002c:	4620      	mov	r0, r4
 802002e:	f7fc fb1f 	bl	801c670 <lfs_fs_disk_version_major>
 8020032:	4681      	mov	r9, r0
 8020034:	4558      	cmp	r0, fp
 8020036:	d139      	bne.n	80200ac <lfs_mount_+0x17c>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 8020038:	4620      	mov	r0, r4
 802003a:	f7fc fb1e 	bl	801c67a <lfs_fs_disk_version_minor>
 802003e:	4550      	cmp	r0, sl
 8020040:	d334      	bcc.n	80200ac <lfs_mount_+0x17c>
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 8020042:	4550      	cmp	r0, sl
 8020044:	d847      	bhi.n	80200d6 <lfs_mount_+0x1a6>
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 8020046:	9904      	ldr	r1, [sp, #16]
 8020048:	4620      	mov	r0, r4
 802004a:	f7fc fbb4 	bl	801c7b6 <lfs_fs_prepsuperblock>
            if (superblock.name_max) {
 802004e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020050:	b11b      	cbz	r3, 802005a <lfs_mount_+0x12a>
                if (superblock.name_max > lfs->name_max) {
 8020052:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8020054:	4293      	cmp	r3, r2
 8020056:	d850      	bhi.n	80200fa <lfs_mount_+0x1ca>
                lfs->name_max = superblock.name_max;
 8020058:	6723      	str	r3, [r4, #112]	@ 0x70
            if (superblock.file_max) {
 802005a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802005c:	b11b      	cbz	r3, 8020066 <lfs_mount_+0x136>
                if (superblock.file_max > lfs->file_max) {
 802005e:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8020060:	4293      	cmp	r3, r2
 8020062:	d856      	bhi.n	8020112 <lfs_mount_+0x1e2>
                lfs->file_max = superblock.file_max;
 8020064:	6763      	str	r3, [r4, #116]	@ 0x74
            if (superblock.attr_max) {
 8020066:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020068:	b143      	cbz	r3, 802007c <lfs_mount_+0x14c>
                if (superblock.attr_max > lfs->attr_max) {
 802006a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 802006c:	4293      	cmp	r3, r2
 802006e:	d85c      	bhi.n	802012a <lfs_mount_+0x1fa>
                lfs->attr_max = superblock.attr_max;
 8020070:	67a3      	str	r3, [r4, #120]	@ 0x78
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 8020072:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8020074:	4293      	cmp	r3, r2
 8020076:	bf28      	it	cs
 8020078:	4613      	movcs	r3, r2
 802007a:	67e3      	str	r3, [r4, #124]	@ 0x7c
            if (lfs->cfg->block_count
 802007c:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 802007e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8020080:	b111      	cbz	r1, 8020088 <lfs_mount_+0x158>
                    && superblock.block_count != lfs->cfg->block_count) {
 8020082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020084:	4299      	cmp	r1, r3
 8020086:	d15c      	bne.n	8020142 <lfs_mount_+0x212>
            lfs->block_count = superblock.block_count;
 8020088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802008a:	66e3      	str	r3, [r4, #108]	@ 0x6c
            if (superblock.block_size != lfs->cfg->block_size) {
 802008c:	9b08      	ldr	r3, [sp, #32]
 802008e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8020090:	4293      	cmp	r3, r2
 8020092:	d096      	beq.n	801ffc2 <lfs_mount_+0x92>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8020094:	4952      	ldr	r1, [pc, #328]	@ (80201e0 <lfs_mount_+0x2b0>)
 8020096:	9101      	str	r1, [sp, #4]
 8020098:	9200      	str	r2, [sp, #0]
 802009a:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 802009e:	4951      	ldr	r1, [pc, #324]	@ (80201e4 <lfs_mount_+0x2b4>)
 80200a0:	4853      	ldr	r0, [pc, #332]	@ (80201f0 <lfs_mount_+0x2c0>)
 80200a2:	f00b ffd5 	bl	802c050 <printf>
                err = LFS_ERR_INVAL;
 80200a6:	f06f 0615 	mvn.w	r6, #21
                goto cleanup;
 80200aa:	e79d      	b.n	801ffe8 <lfs_mount_+0xb8>
                LFS_ERROR("Invalid version "
 80200ac:	4620      	mov	r0, r4
 80200ae:	f7fc fae4 	bl	801c67a <lfs_fs_disk_version_minor>
 80200b2:	4b4b      	ldr	r3, [pc, #300]	@ (80201e0 <lfs_mount_+0x2b0>)
 80200b4:	9303      	str	r3, [sp, #12]
 80200b6:	9002      	str	r0, [sp, #8]
 80200b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80200bc:	fa1f f388 	uxth.w	r3, r8
 80200c0:	9300      	str	r3, [sp, #0]
 80200c2:	9b05      	ldr	r3, [sp, #20]
 80200c4:	f241 126b 	movw	r2, #4459	@ 0x116b
 80200c8:	4946      	ldr	r1, [pc, #280]	@ (80201e4 <lfs_mount_+0x2b4>)
 80200ca:	484a      	ldr	r0, [pc, #296]	@ (80201f4 <lfs_mount_+0x2c4>)
 80200cc:	f00b ffc0 	bl	802c050 <printf>
                err = LFS_ERR_INVAL;
 80200d0:	f06f 0615 	mvn.w	r6, #21
                goto cleanup;
 80200d4:	e788      	b.n	801ffe8 <lfs_mount_+0xb8>
                LFS_DEBUG("Found older minor version "
 80200d6:	4b42      	ldr	r3, [pc, #264]	@ (80201e0 <lfs_mount_+0x2b0>)
 80200d8:	9303      	str	r3, [sp, #12]
 80200da:	9002      	str	r0, [sp, #8]
 80200dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80200e0:	fa1f f388 	uxth.w	r3, r8
 80200e4:	9300      	str	r3, [sp, #0]
 80200e6:	9b05      	ldr	r3, [sp, #20]
 80200e8:	f241 127a 	movw	r2, #4474	@ 0x117a
 80200ec:	493d      	ldr	r1, [pc, #244]	@ (80201e4 <lfs_mount_+0x2b4>)
 80200ee:	4842      	ldr	r0, [pc, #264]	@ (80201f8 <lfs_mount_+0x2c8>)
 80200f0:	f00b ffae 	bl	802c050 <printf>
                needssuperblock = true;
 80200f4:	2301      	movs	r3, #1
 80200f6:	9304      	str	r3, [sp, #16]
 80200f8:	e7a5      	b.n	8020046 <lfs_mount_+0x116>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 80200fa:	4939      	ldr	r1, [pc, #228]	@ (80201e0 <lfs_mount_+0x2b0>)
 80200fc:	9101      	str	r1, [sp, #4]
 80200fe:	9200      	str	r2, [sp, #0]
 8020100:	f241 1289 	movw	r2, #4489	@ 0x1189
 8020104:	4937      	ldr	r1, [pc, #220]	@ (80201e4 <lfs_mount_+0x2b4>)
 8020106:	483d      	ldr	r0, [pc, #244]	@ (80201fc <lfs_mount_+0x2cc>)
 8020108:	f00b ffa2 	bl	802c050 <printf>
                    err = LFS_ERR_INVAL;
 802010c:	f06f 0615 	mvn.w	r6, #21
                    goto cleanup;
 8020110:	e76a      	b.n	801ffe8 <lfs_mount_+0xb8>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8020112:	4933      	ldr	r1, [pc, #204]	@ (80201e0 <lfs_mount_+0x2b0>)
 8020114:	9101      	str	r1, [sp, #4]
 8020116:	9200      	str	r2, [sp, #0]
 8020118:	f241 1294 	movw	r2, #4500	@ 0x1194
 802011c:	4931      	ldr	r1, [pc, #196]	@ (80201e4 <lfs_mount_+0x2b4>)
 802011e:	4838      	ldr	r0, [pc, #224]	@ (8020200 <lfs_mount_+0x2d0>)
 8020120:	f00b ff96 	bl	802c050 <printf>
                    err = LFS_ERR_INVAL;
 8020124:	f06f 0615 	mvn.w	r6, #21
                    goto cleanup;
 8020128:	e75e      	b.n	801ffe8 <lfs_mount_+0xb8>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 802012a:	492d      	ldr	r1, [pc, #180]	@ (80201e0 <lfs_mount_+0x2b0>)
 802012c:	9101      	str	r1, [sp, #4]
 802012e:	9200      	str	r2, [sp, #0]
 8020130:	f241 129f 	movw	r2, #4511	@ 0x119f
 8020134:	492b      	ldr	r1, [pc, #172]	@ (80201e4 <lfs_mount_+0x2b4>)
 8020136:	4833      	ldr	r0, [pc, #204]	@ (8020204 <lfs_mount_+0x2d4>)
 8020138:	f00b ff8a 	bl	802c050 <printf>
                    err = LFS_ERR_INVAL;
 802013c:	f06f 0615 	mvn.w	r6, #21
                    goto cleanup;
 8020140:	e752      	b.n	801ffe8 <lfs_mount_+0xb8>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8020142:	4a27      	ldr	r2, [pc, #156]	@ (80201e0 <lfs_mount_+0x2b0>)
 8020144:	9201      	str	r2, [sp, #4]
 8020146:	9100      	str	r1, [sp, #0]
 8020148:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 802014c:	4925      	ldr	r1, [pc, #148]	@ (80201e4 <lfs_mount_+0x2b4>)
 802014e:	482e      	ldr	r0, [pc, #184]	@ (8020208 <lfs_mount_+0x2d8>)
 8020150:	f00b ff7e 	bl	802c050 <printf>
                err = LFS_ERR_INVAL;
 8020154:	f06f 0615 	mvn.w	r6, #21
                goto cleanup;
 8020158:	e746      	b.n	801ffe8 <lfs_mount_+0xb8>
                err = tag;
 802015a:	4606      	mov	r6, r0
 802015c:	e744      	b.n	801ffe8 <lfs_mount_+0xb8>
            err = tag;
 802015e:	4606      	mov	r6, r0
 8020160:	e742      	b.n	801ffe8 <lfs_mount_+0xb8>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8020162:	f104 0130 	add.w	r1, r4, #48	@ 0x30
    for (int i = 0; i < 3; i++) {
 8020166:	4633      	mov	r3, r6
 8020168:	2b02      	cmp	r3, #2
 802016a:	dc04      	bgt.n	8020176 <lfs_mount_+0x246>
        if (((uint32_t*)a)[i] != 0) {
 802016c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8020170:	b9e2      	cbnz	r2, 80201ac <lfs_mount_+0x27c>
    for (int i = 0; i < 3; i++) {
 8020172:	3301      	adds	r3, #1
 8020174:	e7f8      	b.n	8020168 <lfs_mount_+0x238>
    return true;
 8020176:	2301      	movs	r3, #1
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8020178:	b1d3      	cbz	r3, 80201b0 <lfs_mount_+0x280>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 802017a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802017c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8020180:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 8020182:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8020186:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 802018a:	ca07      	ldmia	r2, {r0, r1, r2}
 802018c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 8020190:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8020192:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8020194:	fbb3 f1f2 	udiv	r1, r3, r2
 8020198:	fb02 3311 	mls	r3, r2, r1, r3
 802019c:	6563      	str	r3, [r4, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 802019e:	4620      	mov	r0, r4
 80201a0:	f7fc fa73 	bl	801c68a <lfs_alloc_drop>
}
 80201a4:	4630      	mov	r0, r6
 80201a6:	b01b      	add	sp, #108	@ 0x6c
 80201a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return false;
 80201ac:	2300      	movs	r3, #0
 80201ae:	e7e3      	b.n	8020178 <lfs_mount_+0x248>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 80201b0:	4b0b      	ldr	r3, [pc, #44]	@ (80201e0 <lfs_mount_+0x2b0>)
 80201b2:	9302      	str	r3, [sp, #8]
 80201b4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80201b6:	9301      	str	r3, [sp, #4]
 80201b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80201ba:	9300      	str	r3, [sp, #0]
 80201bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80201be:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 80201c2:	4908      	ldr	r1, [pc, #32]	@ (80201e4 <lfs_mount_+0x2b4>)
 80201c4:	4811      	ldr	r0, [pc, #68]	@ (802020c <lfs_mount_+0x2dc>)
 80201c6:	f00b ff43 	bl	802c050 <printf>
 80201ca:	e7d6      	b.n	802017a <lfs_mount_+0x24a>
 80201cc:	080378bc 	.word	0x080378bc
 80201d0:	0803ab54 	.word	0x0803ab54
 80201d4:	0801d429 	.word	0x0801d429
 80201d8:	0ff00008 	.word	0x0ff00008
 80201dc:	7ffffc00 	.word	0x7ffffc00
 80201e0:	08038678 	.word	0x08038678
 80201e4:	0803a198 	.word	0x0803a198
 80201e8:	0803a358 	.word	0x0803a358
 80201ec:	20100018 	.word	0x20100018
 80201f0:	0803aca8 	.word	0x0803aca8
 80201f4:	0803ab60 	.word	0x0803ab60
 80201f8:	0803ab98 	.word	0x0803ab98
 80201fc:	0803abd8 	.word	0x0803abd8
 8020200:	0803ac0c 	.word	0x0803ac0c
 8020204:	0803ac40 	.word	0x0803ac40
 8020208:	0803ac74 	.word	0x0803ac74
 802020c:	0803acd8 	.word	0x0803acd8

08020210 <lfs_file_close_>:
static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 8020210:	b570      	push	{r4, r5, r6, lr}
 8020212:	4606      	mov	r6, r0
 8020214:	460c      	mov	r4, r1
    int err = lfs_file_sync_(lfs, file);
 8020216:	f7ff fbf5 	bl	801fa04 <lfs_file_sync_>
 802021a:	4605      	mov	r5, r0
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 802021c:	4621      	mov	r1, r4
 802021e:	4630      	mov	r0, r6
 8020220:	f7fc fa13 	bl	801c64a <lfs_mlist_remove>
    if (!file->cfg->buffer) {
 8020224:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8020226:	681b      	ldr	r3, [r3, #0]
 8020228:	b10b      	cbz	r3, 802022e <lfs_file_close_+0x1e>
}
 802022a:	4628      	mov	r0, r5
 802022c:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
 802022e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8020230:	f7fb ff74 	bl	801c11c <vPortFree>
    return err;
 8020234:	e7f9      	b.n	802022a <lfs_file_close_+0x1a>
	...

08020238 <lfs_dir_find>:
        const char **path, uint16_t *id) {
 8020238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802023c:	b08d      	sub	sp, #52	@ 0x34
 802023e:	4682      	mov	sl, r0
 8020240:	4688      	mov	r8, r1
 8020242:	9207      	str	r2, [sp, #28]
    const char *name = *path;
 8020244:	6812      	ldr	r2, [r2, #0]
 8020246:	9205      	str	r2, [sp, #20]
    if (id) {
 8020248:	9306      	str	r3, [sp, #24]
 802024a:	b11b      	cbz	r3, 8020254 <lfs_dir_find+0x1c>
 802024c:	461a      	mov	r2, r3
        *id = 0x3ff;
 802024e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8020252:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 8020254:	f8da 3020 	ldr.w	r3, [sl, #32]
 8020258:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
 802025c:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8020260:	f8c8 301c 	str.w	r3, [r8, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8020264:	4e4d      	ldr	r6, [pc, #308]	@ (802039c <lfs_dir_find+0x164>)
        name += strspn(name, "/");
 8020266:	4d4e      	ldr	r5, [pc, #312]	@ (80203a0 <lfs_dir_find+0x168>)
 8020268:	4629      	mov	r1, r5
 802026a:	9f05      	ldr	r7, [sp, #20]
 802026c:	4638      	mov	r0, r7
 802026e:	f00c fb37 	bl	802c8e0 <strspn>
 8020272:	4604      	mov	r4, r0
 8020274:	eb07 0900 	add.w	r9, r7, r0
        lfs_size_t namelen = strcspn(name, "/");
 8020278:	4629      	mov	r1, r5
 802027a:	4648      	mov	r0, r9
 802027c:	f00c fae4 	bl	802c848 <strcspn>
 8020280:	4605      	mov	r5, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8020282:	2801      	cmp	r0, #1
 8020284:	d00a      	beq.n	802029c <lfs_dir_find+0x64>
 8020286:	2d02      	cmp	r5, #2
 8020288:	d00c      	beq.n	80202a4 <lfs_dir_find+0x6c>
        const char *suffix = name + namelen;
 802028a:	eb09 0305 	add.w	r3, r9, r5
 802028e:	9305      	str	r3, [sp, #20]
 8020290:	469b      	mov	fp, r3
        int depth = 1;
 8020292:	2701      	movs	r7, #1
 8020294:	e013      	b.n	80202be <lfs_dir_find+0x86>
 8020296:	46b2      	mov	sl, r6
 8020298:	4606      	mov	r6, r0
 802029a:	e7e4      	b.n	8020266 <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 802029c:	5d3b      	ldrb	r3, [r7, r4]
 802029e:	2b2e      	cmp	r3, #46	@ 0x2e
 80202a0:	d1f1      	bne.n	8020286 <lfs_dir_find+0x4e>
 80202a2:	e006      	b.n	80202b2 <lfs_dir_find+0x7a>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 80202a4:	2202      	movs	r2, #2
 80202a6:	493f      	ldr	r1, [pc, #252]	@ (80203a4 <lfs_dir_find+0x16c>)
 80202a8:	4648      	mov	r0, r9
 80202aa:	f00c fa7f 	bl	802c7ac <memcmp>
 80202ae:	2800      	cmp	r0, #0
 80202b0:	d1eb      	bne.n	802028a <lfs_dir_find+0x52>
            name += namelen;
 80202b2:	eb09 0305 	add.w	r3, r9, r5
 80202b6:	9305      	str	r3, [sp, #20]
            goto nextname;
 80202b8:	e7d5      	b.n	8020266 <lfs_dir_find+0x2e>
                depth += 1;
 80202ba:	3701      	adds	r7, #1
            suffix += sufflen;
 80202bc:	44a3      	add	fp, r4
            suffix += strspn(suffix, "/");
 80202be:	4c38      	ldr	r4, [pc, #224]	@ (80203a0 <lfs_dir_find+0x168>)
 80202c0:	4621      	mov	r1, r4
 80202c2:	4658      	mov	r0, fp
 80202c4:	f00c fb0c 	bl	802c8e0 <strspn>
 80202c8:	4483      	add	fp, r0
            sufflen = strcspn(suffix, "/");
 80202ca:	4621      	mov	r1, r4
 80202cc:	4658      	mov	r0, fp
 80202ce:	f00c fabb 	bl	802c848 <strcspn>
            if (sufflen == 0) {
 80202d2:	4604      	mov	r4, r0
 80202d4:	b170      	cbz	r0, 80202f4 <lfs_dir_find+0xbc>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 80202d6:	2802      	cmp	r0, #2
 80202d8:	d1ef      	bne.n	80202ba <lfs_dir_find+0x82>
 80202da:	2202      	movs	r2, #2
 80202dc:	4931      	ldr	r1, [pc, #196]	@ (80203a4 <lfs_dir_find+0x16c>)
 80202de:	4658      	mov	r0, fp
 80202e0:	f00c fa64 	bl	802c7ac <memcmp>
 80202e4:	2800      	cmp	r0, #0
 80202e6:	d1e8      	bne.n	80202ba <lfs_dir_find+0x82>
                if (depth == 0) {
 80202e8:	3f01      	subs	r7, #1
 80202ea:	d1e7      	bne.n	80202bc <lfs_dir_find+0x84>
                    name = suffix + sufflen;
 80202ec:	eb0b 0304 	add.w	r3, fp, r4
 80202f0:	9305      	str	r3, [sp, #20]
                    goto nextname;
 80202f2:	e7b8      	b.n	8020266 <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
 80202f4:	f899 3000 	ldrb.w	r3, [r9]
 80202f8:	2b00      	cmp	r3, #0
 80202fa:	d04a      	beq.n	8020392 <lfs_dir_find+0x15a>
        *path = name;
 80202fc:	9b07      	ldr	r3, [sp, #28]
 80202fe:	f8c3 9000 	str.w	r9, [r3]
    return (tag & 0x7ff00000) >> 20;
 8020302:	f3c6 530a 	ubfx	r3, r6, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8020306:	2b02      	cmp	r3, #2
 8020308:	d13f      	bne.n	802038a <lfs_dir_find+0x152>
    return (tag & 0x000ffc00) >> 10;
 802030a:	f3c6 2689 	ubfx	r6, r6, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 802030e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8020312:	429e      	cmp	r6, r3
 8020314:	d102      	bne.n	802031c <lfs_dir_find+0xe4>
 8020316:	464c      	mov	r4, r9
 8020318:	4656      	mov	r6, sl
 802031a:	e029      	b.n	8020370 <lfs_dir_find+0x138>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 802031c:	02b6      	lsls	r6, r6, #10
 802031e:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8020322:	9300      	str	r3, [sp, #0]
 8020324:	f046 5300 	orr.w	r3, r6, #536870912	@ 0x20000000
 8020328:	f043 0308 	orr.w	r3, r3, #8
 802032c:	4a1e      	ldr	r2, [pc, #120]	@ (80203a8 <lfs_dir_find+0x170>)
 802032e:	4641      	mov	r1, r8
 8020330:	4650      	mov	r0, sl
 8020332:	f7fc fc8b 	bl	801cc4c <lfs_dir_get>
            if (res < 0) {
 8020336:	1e06      	subs	r6, r0, #0
 8020338:	db2b      	blt.n	8020392 <lfs_dir_find+0x15a>
 802033a:	464c      	mov	r4, r9
 802033c:	4656      	mov	r6, sl
 802033e:	e017      	b.n	8020370 <lfs_dir_find+0x138>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8020340:	9b06      	ldr	r3, [sp, #24]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8020342:	9609      	str	r6, [sp, #36]	@ 0x24
 8020344:	940a      	str	r4, [sp, #40]	@ 0x28
 8020346:	950b      	str	r5, [sp, #44]	@ 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8020348:	aa09      	add	r2, sp, #36	@ 0x24
 802034a:	9203      	str	r2, [sp, #12]
 802034c:	4a17      	ldr	r2, [pc, #92]	@ (80203ac <lfs_dir_find+0x174>)
 802034e:	9202      	str	r2, [sp, #8]
 8020350:	9301      	str	r3, [sp, #4]
 8020352:	9500      	str	r5, [sp, #0]
 8020354:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 8020358:	463a      	mov	r2, r7
 802035a:	4641      	mov	r1, r8
 802035c:	4630      	mov	r0, r6
 802035e:	f7fd f983 	bl	801d668 <lfs_dir_fetchmatch>
            if (tag < 0) {
 8020362:	2800      	cmp	r0, #0
 8020364:	db14      	blt.n	8020390 <lfs_dir_find+0x158>
            if (tag) {
 8020366:	2800      	cmp	r0, #0
 8020368:	d195      	bne.n	8020296 <lfs_dir_find+0x5e>
            if (!dir->split) {
 802036a:	f898 3017 	ldrb.w	r3, [r8, #23]
 802036e:	b14b      	cbz	r3, 8020384 <lfs_dir_find+0x14c>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8020370:	f108 0718 	add.w	r7, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
 8020374:	212f      	movs	r1, #47	@ 0x2f
 8020376:	4620      	mov	r0, r4
 8020378:	f00c fa59 	bl	802c82e <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 802037c:	2800      	cmp	r0, #0
 802037e:	d0df      	beq.n	8020340 <lfs_dir_find+0x108>
 8020380:	2300      	movs	r3, #0
 8020382:	e7de      	b.n	8020342 <lfs_dir_find+0x10a>
                return LFS_ERR_NOENT;
 8020384:	f06f 0601 	mvn.w	r6, #1
 8020388:	e003      	b.n	8020392 <lfs_dir_find+0x15a>
            return LFS_ERR_NOTDIR;
 802038a:	f06f 0613 	mvn.w	r6, #19
 802038e:	e000      	b.n	8020392 <lfs_dir_find+0x15a>
 8020390:	4606      	mov	r6, r0
}
 8020392:	4630      	mov	r0, r6
 8020394:	b00d      	add	sp, #52	@ 0x34
 8020396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802039a:	bf00      	nop
 802039c:	002ffc00 	.word	0x002ffc00
 80203a0:	0803b39c 	.word	0x0803b39c
 80203a4:	0803ad10 	.word	0x0803ad10
 80203a8:	700ffc00 	.word	0x700ffc00
 80203ac:	0801d429 	.word	0x0801d429

080203b0 <lfs_remove_>:
static int lfs_remove_(lfs_t *lfs, const char *path) {
 80203b0:	b570      	push	{r4, r5, r6, lr}
 80203b2:	b09a      	sub	sp, #104	@ 0x68
 80203b4:	4604      	mov	r4, r0
 80203b6:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
 80203b8:	f7ff faf0 	bl	801f99c <lfs_fs_forceconsistency>
    if (err) {
 80203bc:	4603      	mov	r3, r0
 80203be:	b110      	cbz	r0, 80203c6 <lfs_remove_+0x16>
}
 80203c0:	4618      	mov	r0, r3
 80203c2:	b01a      	add	sp, #104	@ 0x68
 80203c4:	bd70      	pop	{r4, r5, r6, pc}
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 80203c6:	2300      	movs	r3, #0
 80203c8:	aa03      	add	r2, sp, #12
 80203ca:	a910      	add	r1, sp, #64	@ 0x40
 80203cc:	4620      	mov	r0, r4
 80203ce:	f7ff ff33 	bl	8020238 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 80203d2:	1e03      	subs	r3, r0, #0
 80203d4:	dbf4      	blt.n	80203c0 <lfs_remove_+0x10>
    return (tag & 0x000ffc00) >> 10;
 80203d6:	f3c3 2589 	ubfx	r5, r3, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 80203da:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80203de:	4295      	cmp	r5, r2
 80203e0:	d031      	beq.n	8020446 <lfs_remove_+0x96>
    dir.next = lfs->mlist;
 80203e2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80203e4:	9206      	str	r2, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
 80203e6:	f3c3 560a 	ubfx	r6, r3, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 80203ea:	2e02      	cmp	r6, #2
 80203ec:	d02e      	beq.n	802044c <lfs_remove_+0x9c>
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 80203ee:	02ad      	lsls	r5, r5, #10
 80203f0:	f045 459f 	orr.w	r5, r5, #1333788672	@ 0x4f800000
 80203f4:	f445 05e0 	orr.w	r5, r5, #7340032	@ 0x700000
 80203f8:	9518      	str	r5, [sp, #96]	@ 0x60
 80203fa:	2300      	movs	r3, #0
 80203fc:	9319      	str	r3, [sp, #100]	@ 0x64
 80203fe:	2301      	movs	r3, #1
 8020400:	aa18      	add	r2, sp, #96	@ 0x60
 8020402:	a910      	add	r1, sp, #64	@ 0x40
 8020404:	4620      	mov	r0, r4
 8020406:	f7ff fa21 	bl	801f84c <lfs_dir_commit>
    if (err) {
 802040a:	4603      	mov	r3, r0
 802040c:	2800      	cmp	r0, #0
 802040e:	d142      	bne.n	8020496 <lfs_remove_+0xe6>
    lfs->mlist = dir.next;
 8020410:	9a06      	ldr	r2, [sp, #24]
 8020412:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8020414:	2e02      	cmp	r6, #2
 8020416:	d1d3      	bne.n	80203c0 <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, -1);
 8020418:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 802041c:	4620      	mov	r0, r4
 802041e:	f7fc fa15 	bl	801c84c <lfs_fs_preporphans>
        if (err) {
 8020422:	4603      	mov	r3, r0
 8020424:	2800      	cmp	r0, #0
 8020426:	d1cb      	bne.n	80203c0 <lfs_remove_+0x10>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 8020428:	aa10      	add	r2, sp, #64	@ 0x40
 802042a:	a908      	add	r1, sp, #32
 802042c:	4620      	mov	r0, r4
 802042e:	f7fe f91b 	bl	801e668 <lfs_fs_pred>
        if (err) {
 8020432:	4603      	mov	r3, r0
 8020434:	2800      	cmp	r0, #0
 8020436:	d1c3      	bne.n	80203c0 <lfs_remove_+0x10>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8020438:	aa08      	add	r2, sp, #32
 802043a:	a910      	add	r1, sp, #64	@ 0x40
 802043c:	4620      	mov	r0, r4
 802043e:	f7ff fac1 	bl	801f9c4 <lfs_dir_drop>
 8020442:	4603      	mov	r3, r0
        if (err) {
 8020444:	e7bc      	b.n	80203c0 <lfs_remove_+0x10>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8020446:	f06f 0315 	mvn.w	r3, #21
 802044a:	e7b9      	b.n	80203c0 <lfs_remove_+0x10>
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 802044c:	02ab      	lsls	r3, r5, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 802044e:	aa04      	add	r2, sp, #16
 8020450:	9200      	str	r2, [sp, #0]
 8020452:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8020456:	f043 0308 	orr.w	r3, r3, #8
 802045a:	4a10      	ldr	r2, [pc, #64]	@ (802049c <lfs_remove_+0xec>)
 802045c:	a910      	add	r1, sp, #64	@ 0x40
 802045e:	4620      	mov	r0, r4
 8020460:	f7fc fbf4 	bl	801cc4c <lfs_dir_get>
        if (res < 0) {
 8020464:	1e03      	subs	r3, r0, #0
 8020466:	dbab      	blt.n	80203c0 <lfs_remove_+0x10>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
 8020468:	aa04      	add	r2, sp, #16
 802046a:	a908      	add	r1, sp, #32
 802046c:	4620      	mov	r0, r4
 802046e:	f7fd fbdd 	bl	801dc2c <lfs_dir_fetch>
        if (err) {
 8020472:	4603      	mov	r3, r0
 8020474:	2800      	cmp	r0, #0
 8020476:	d1a3      	bne.n	80203c0 <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 8020478:	2101      	movs	r1, #1
 802047a:	4620      	mov	r0, r4
 802047c:	f7fc f9e6 	bl	801c84c <lfs_fs_preporphans>
        if (err) {
 8020480:	4603      	mov	r3, r0
 8020482:	2800      	cmp	r0, #0
 8020484:	d19c      	bne.n	80203c0 <lfs_remove_+0x10>
        dir.type = 0;
 8020486:	2300      	movs	r3, #0
 8020488:	f88d 301e 	strb.w	r3, [sp, #30]
        dir.id = 0;
 802048c:	f8ad 301c 	strh.w	r3, [sp, #28]
        lfs->mlist = &dir;
 8020490:	ab06      	add	r3, sp, #24
 8020492:	62a3      	str	r3, [r4, #40]	@ 0x28
 8020494:	e7ab      	b.n	80203ee <lfs_remove_+0x3e>
        lfs->mlist = dir.next;
 8020496:	9a06      	ldr	r2, [sp, #24]
 8020498:	62a2      	str	r2, [r4, #40]	@ 0x28
        return err;
 802049a:	e791      	b.n	80203c0 <lfs_remove_+0x10>
 802049c:	700ffc00 	.word	0x700ffc00

080204a0 <lfs_dir_open_>:
static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 80204a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80204a2:	b087      	sub	sp, #28
 80204a4:	4607      	mov	r7, r0
 80204a6:	460d      	mov	r5, r1
 80204a8:	9203      	str	r2, [sp, #12]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 80204aa:	f101 0608 	add.w	r6, r1, #8
 80204ae:	2300      	movs	r3, #0
 80204b0:	aa03      	add	r2, sp, #12
 80204b2:	4631      	mov	r1, r6
 80204b4:	f7ff fec0 	bl	8020238 <lfs_dir_find>
    if (tag < 0) {
 80204b8:	1e04      	subs	r4, r0, #0
 80204ba:	db14      	blt.n	80204e6 <lfs_dir_open_+0x46>
    return (tag & 0x7ff00000) >> 20;
 80204bc:	f3c4 530a 	ubfx	r3, r4, #20, #11
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80204c0:	2b02      	cmp	r3, #2
 80204c2:	d130      	bne.n	8020526 <lfs_dir_open_+0x86>
    return (tag & 0x000ffc00) >> 10;
 80204c4:	f3c4 2489 	ubfx	r4, r4, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
 80204c8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80204cc:	429c      	cmp	r4, r3
 80204ce:	d10d      	bne.n	80204ec <lfs_dir_open_+0x4c>
        pair[0] = lfs->root[0];
 80204d0:	6a3b      	ldr	r3, [r7, #32]
 80204d2:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
 80204d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80204d6:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 80204d8:	aa04      	add	r2, sp, #16
 80204da:	4631      	mov	r1, r6
 80204dc:	4638      	mov	r0, r7
 80204de:	f7fd fba5 	bl	801dc2c <lfs_dir_fetch>
    if (err) {
 80204e2:	4604      	mov	r4, r0
 80204e4:	b188      	cbz	r0, 802050a <lfs_dir_open_+0x6a>
}
 80204e6:	4620      	mov	r0, r4
 80204e8:	b007      	add	sp, #28
 80204ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 80204ec:	02a4      	lsls	r4, r4, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80204ee:	ab04      	add	r3, sp, #16
 80204f0:	9300      	str	r3, [sp, #0]
 80204f2:	f044 5300 	orr.w	r3, r4, #536870912	@ 0x20000000
 80204f6:	f043 0308 	orr.w	r3, r3, #8
 80204fa:	4a0c      	ldr	r2, [pc, #48]	@ (802052c <lfs_dir_open_+0x8c>)
 80204fc:	4631      	mov	r1, r6
 80204fe:	4638      	mov	r0, r7
 8020500:	f7fc fba4 	bl	801cc4c <lfs_dir_get>
        if (res < 0) {
 8020504:	1e04      	subs	r4, r0, #0
 8020506:	dae7      	bge.n	80204d8 <lfs_dir_open_+0x38>
 8020508:	e7ed      	b.n	80204e6 <lfs_dir_open_+0x46>
    dir->head[0] = dir->m.pair[0];
 802050a:	68ab      	ldr	r3, [r5, #8]
 802050c:	62eb      	str	r3, [r5, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 802050e:	68eb      	ldr	r3, [r5, #12]
 8020510:	632b      	str	r3, [r5, #48]	@ 0x30
    dir->id = 0;
 8020512:	2300      	movs	r3, #0
 8020514:	80ab      	strh	r3, [r5, #4]
    dir->pos = 0;
 8020516:	62ab      	str	r3, [r5, #40]	@ 0x28
    dir->type = LFS_TYPE_DIR;
 8020518:	2302      	movs	r3, #2
 802051a:	71ab      	strb	r3, [r5, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 802051c:	4629      	mov	r1, r5
 802051e:	4638      	mov	r0, r7
 8020520:	f7fc f89e 	bl	801c660 <lfs_mlist_append>
    return 0;
 8020524:	e7df      	b.n	80204e6 <lfs_dir_open_+0x46>
        return LFS_ERR_NOTDIR;
 8020526:	f06f 0413 	mvn.w	r4, #19
 802052a:	e7dc      	b.n	80204e6 <lfs_dir_open_+0x46>
 802052c:	700ffc00 	.word	0x700ffc00

08020530 <lfs_rename_>:
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 8020530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020534:	b0ad      	sub	sp, #180	@ 0xb4
 8020536:	4604      	mov	r4, r0
 8020538:	9103      	str	r1, [sp, #12]
 802053a:	9202      	str	r2, [sp, #8]
    int err = lfs_fs_forceconsistency(lfs);
 802053c:	f7ff fa2e 	bl	801f99c <lfs_fs_forceconsistency>
    if (err) {
 8020540:	4606      	mov	r6, r0
 8020542:	b118      	cbz	r0, 802054c <lfs_rename_+0x1c>
}
 8020544:	4630      	mov	r0, r6
 8020546:	b02d      	add	sp, #180	@ 0xb4
 8020548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 802054c:	2300      	movs	r3, #0
 802054e:	aa03      	add	r2, sp, #12
 8020550:	a922      	add	r1, sp, #136	@ 0x88
 8020552:	4620      	mov	r0, r4
 8020554:	f7ff fe70 	bl	8020238 <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 8020558:	2800      	cmp	r0, #0
 802055a:	f2c0 80a0 	blt.w	802069e <lfs_rename_+0x16e>
 802055e:	4680      	mov	r8, r0
    return (tag & 0x000ffc00) >> 10;
 8020560:	f3c0 2589 	ubfx	r5, r0, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 8020564:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8020568:	429d      	cmp	r5, r3
 802056a:	f000 8096 	beq.w	802069a <lfs_rename_+0x16a>
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 802056e:	f10d 0366 	add.w	r3, sp, #102	@ 0x66
 8020572:	aa02      	add	r2, sp, #8
 8020574:	a91a      	add	r1, sp, #104	@ 0x68
 8020576:	4620      	mov	r0, r4
 8020578:	f7ff fe5e 	bl	8020238 <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 802057c:	f1b0 0900 	subs.w	r9, r0, #0
 8020580:	f2c0 808f 	blt.w	80206a2 <lfs_rename_+0x172>
    return (tag & 0x000ffc00) >> 10;
 8020584:	f3c9 2289 	ubfx	r2, r9, #10, #10
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 8020588:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 802058c:	429a      	cmp	r2, r3
 802058e:	f000 8088 	beq.w	80206a2 <lfs_rename_+0x172>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8020592:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020594:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020596:	429a      	cmp	r2, r3
 8020598:	d008      	beq.n	80205ac <lfs_rename_+0x7c>
 802059a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 802059c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 802059e:	4281      	cmp	r1, r0
 80205a0:	d004      	beq.n	80205ac <lfs_rename_+0x7c>
 80205a2:	4299      	cmp	r1, r3
 80205a4:	d002      	beq.n	80205ac <lfs_rename_+0x7c>
 80205a6:	4290      	cmp	r0, r2
 80205a8:	d000      	beq.n	80205ac <lfs_rename_+0x7c>
 80205aa:	2601      	movs	r6, #1
    prevdir.next = lfs->mlist;
 80205ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80205ae:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (prevtag == LFS_ERR_NOENT) {
 80205b0:	f119 0f02 	cmn.w	r9, #2
 80205b4:	f000 8087 	beq.w	80206c6 <lfs_rename_+0x196>
    return (tag & 0x7ff00000) >> 20;
 80205b8:	ea4f 5219 	mov.w	r2, r9, lsr #20
 80205bc:	ea4f 5318 	mov.w	r3, r8, lsr #20
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 80205c0:	ea83 5319 	eor.w	r3, r3, r9, lsr #20
 80205c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80205c8:	2b00      	cmp	r3, #0
 80205ca:	f040 808c 	bne.w	80206e6 <lfs_rename_+0x1b6>
    } else if (samepair && newid == newoldid) {
 80205ce:	b91e      	cbnz	r6, 80205d8 <lfs_rename_+0xa8>
 80205d0:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 80205d4:	42ab      	cmp	r3, r5
 80205d6:	d0b5      	beq.n	8020544 <lfs_rename_+0x14>
    return (tag & 0x7ff00000) >> 20;
 80205d8:	f3c2 020a 	ubfx	r2, r2, #0, #11
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 80205dc:	2a02      	cmp	r2, #2
 80205de:	f000 808c 	beq.w	80206fa <lfs_rename_+0x1ca>
    uint16_t newoldid = lfs_tag_id(oldtag);
 80205e2:	46aa      	mov	sl, r5
    if (!samepair) {
 80205e4:	b126      	cbz	r6, 80205f0 <lfs_rename_+0xc0>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 80205e6:	aa22      	add	r2, sp, #136	@ 0x88
 80205e8:	4651      	mov	r1, sl
 80205ea:	4620      	mov	r0, r4
 80205ec:	f7fc f8ea 	bl	801c7c4 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 80205f0:	f119 0f02 	cmn.w	r9, #2
 80205f4:	f000 80b6 	beq.w	8020764 <lfs_rename_+0x234>
 80205f8:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 80205fc:	029b      	lsls	r3, r3, #10
 80205fe:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8020602:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8020606:	9305      	str	r3, [sp, #20]
 8020608:	2200      	movs	r2, #0
 802060a:	9206      	str	r2, [sp, #24]
 802060c:	f8bd 7066 	ldrh.w	r7, [sp, #102]	@ 0x66
 8020610:	02bf      	lsls	r7, r7, #10
 8020612:	f047 4380 	orr.w	r3, r7, #1073741824	@ 0x40000000
 8020616:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802061a:	9307      	str	r3, [sp, #28]
 802061c:	9208      	str	r2, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 802061e:	f3c8 580a 	ubfx	r8, r8, #20, #11
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 8020622:	ea47 5808 	orr.w	r8, r7, r8, lsl #20
 8020626:	f8dd b008 	ldr.w	fp, [sp, #8]
 802062a:	4658      	mov	r0, fp
 802062c:	f7ef fe38 	bl	80102a0 <strlen>
 8020630:	ea48 0000 	orr.w	r0, r8, r0
 8020634:	9009      	str	r0, [sp, #36]	@ 0x24
 8020636:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 802063a:	432f      	orrs	r7, r5
 802063c:	f047 5780 	orr.w	r7, r7, #268435456	@ 0x10000000
 8020640:	f447 1780 	orr.w	r7, r7, #1048576	@ 0x100000
 8020644:	970b      	str	r7, [sp, #44]	@ 0x2c
 8020646:	ab22      	add	r3, sp, #136	@ 0x88
 8020648:	930c      	str	r3, [sp, #48]	@ 0x30
 802064a:	2e00      	cmp	r6, #0
 802064c:	f040 808c 	bne.w	8020768 <lfs_rename_+0x238>
 8020650:	ea4f 2a8a 	mov.w	sl, sl, lsl #10
 8020654:	f04a 439f 	orr.w	r3, sl, #1333788672	@ 0x4f800000
 8020658:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 802065c:	930d      	str	r3, [sp, #52]	@ 0x34
 802065e:	2300      	movs	r3, #0
 8020660:	930e      	str	r3, [sp, #56]	@ 0x38
 8020662:	2305      	movs	r3, #5
 8020664:	aa05      	add	r2, sp, #20
 8020666:	a91a      	add	r1, sp, #104	@ 0x68
 8020668:	4620      	mov	r0, r4
 802066a:	f7ff f8ef 	bl	801f84c <lfs_dir_commit>
    if (err) {
 802066e:	4607      	mov	r7, r0
 8020670:	2800      	cmp	r0, #0
 8020672:	d17b      	bne.n	802076c <lfs_rename_+0x23c>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 8020674:	b126      	cbz	r6, 8020680 <lfs_rename_+0x150>
    return lfs_tag_type1(a->tag);
 8020676:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 8020678:	0d1b      	lsrs	r3, r3, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 802067a:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 802067e:	d179      	bne.n	8020774 <lfs_rename_+0x244>
    lfs->mlist = prevdir.next;
 8020680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020682:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 8020684:	f119 0f02 	cmn.w	r9, #2
 8020688:	f000 80ab 	beq.w	80207e2 <lfs_rename_+0x2b2>
    return (tag & 0x7ff00000) >> 20;
 802068c:	f3c9 500a 	ubfx	r0, r9, #20, #11
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 8020690:	2802      	cmp	r0, #2
 8020692:	f000 808a 	beq.w	80207aa <lfs_rename_+0x27a>
    return 0;
 8020696:	463e      	mov	r6, r7
 8020698:	e754      	b.n	8020544 <lfs_rename_+0x14>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 802069a:	f06f 0015 	mvn.w	r0, #21
 802069e:	4606      	mov	r6, r0
 80206a0:	e750      	b.n	8020544 <lfs_rename_+0x14>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 80206a2:	f119 0f02 	cmn.w	r9, #2
 80206a6:	d106      	bne.n	80206b6 <lfs_rename_+0x186>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 80206a8:	f8bd 2066 	ldrh.w	r2, [sp, #102]	@ 0x66
 80206ac:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80206b0:	429a      	cmp	r2, r3
 80206b2:	f47f af6e 	bne.w	8020592 <lfs_rename_+0x62>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 80206b6:	f1b9 0f00 	cmp.w	r9, #0
 80206ba:	db02      	blt.n	80206c2 <lfs_rename_+0x192>
 80206bc:	f06f 0615 	mvn.w	r6, #21
 80206c0:	e740      	b.n	8020544 <lfs_rename_+0x14>
 80206c2:	464e      	mov	r6, r9
 80206c4:	e73e      	b.n	8020544 <lfs_rename_+0x14>
        lfs_size_t nlen = strlen(newpath);
 80206c6:	9802      	ldr	r0, [sp, #8]
 80206c8:	f7ef fdea 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 80206cc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80206ce:	4283      	cmp	r3, r0
 80206d0:	f0c0 8084 	bcc.w	80207dc <lfs_rename_+0x2ac>
        if (samepair && newid <= newoldid) {
 80206d4:	2e00      	cmp	r6, #0
 80206d6:	d143      	bne.n	8020760 <lfs_rename_+0x230>
 80206d8:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 80206dc:	42ab      	cmp	r3, r5
 80206de:	d83d      	bhi.n	802075c <lfs_rename_+0x22c>
            newoldid += 1;
 80206e0:	f105 0a01 	add.w	sl, r5, #1
 80206e4:	e77e      	b.n	80205e4 <lfs_rename_+0xb4>
    return (tag & 0x7ff00000) >> 20;
 80206e6:	f3c2 020a 	ubfx	r2, r2, #0, #11
                : LFS_ERR_NOTDIR;
 80206ea:	2a02      	cmp	r2, #2
 80206ec:	d002      	beq.n	80206f4 <lfs_rename_+0x1c4>
 80206ee:	f06f 0613 	mvn.w	r6, #19
 80206f2:	e727      	b.n	8020544 <lfs_rename_+0x14>
 80206f4:	f06f 0614 	mvn.w	r6, #20
 80206f8:	e724      	b.n	8020544 <lfs_rename_+0x14>
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 80206fa:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 80206fe:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8020700:	aa05      	add	r2, sp, #20
 8020702:	9200      	str	r2, [sp, #0]
 8020704:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8020708:	f043 0308 	orr.w	r3, r3, #8
 802070c:	4a36      	ldr	r2, [pc, #216]	@ (80207e8 <lfs_rename_+0x2b8>)
 802070e:	a91a      	add	r1, sp, #104	@ 0x68
 8020710:	4620      	mov	r0, r4
 8020712:	f7fc fa9b 	bl	801cc4c <lfs_dir_get>
        if (res < 0) {
 8020716:	2800      	cmp	r0, #0
 8020718:	db1a      	blt.n	8020750 <lfs_rename_+0x220>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 802071a:	aa05      	add	r2, sp, #20
 802071c:	a911      	add	r1, sp, #68	@ 0x44
 802071e:	4620      	mov	r0, r4
 8020720:	f7fd fa84 	bl	801dc2c <lfs_dir_fetch>
        if (err) {
 8020724:	b9b0      	cbnz	r0, 8020754 <lfs_rename_+0x224>
        if (prevdir.m.count > 0 || prevdir.m.split) {
 8020726:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020728:	f433 037f 	bics.w	r3, r3, #16711680	@ 0xff0000
 802072c:	d002      	beq.n	8020734 <lfs_rename_+0x204>
            return LFS_ERR_NOTEMPTY;
 802072e:	f06f 0626 	mvn.w	r6, #38	@ 0x26
 8020732:	e707      	b.n	8020544 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, +1);
 8020734:	2101      	movs	r1, #1
 8020736:	4620      	mov	r0, r4
 8020738:	f7fc f888 	bl	801c84c <lfs_fs_preporphans>
        if (err) {
 802073c:	b960      	cbnz	r0, 8020758 <lfs_rename_+0x228>
        prevdir.type = 0;
 802073e:	2300      	movs	r3, #0
 8020740:	f88d 3042 	strb.w	r3, [sp, #66]	@ 0x42
        prevdir.id = 0;
 8020744:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
        lfs->mlist = &prevdir;
 8020748:	ab0f      	add	r3, sp, #60	@ 0x3c
 802074a:	62a3      	str	r3, [r4, #40]	@ 0x28
    uint16_t newoldid = lfs_tag_id(oldtag);
 802074c:	46aa      	mov	sl, r5
 802074e:	e749      	b.n	80205e4 <lfs_rename_+0xb4>
            return (int)res;
 8020750:	4606      	mov	r6, r0
 8020752:	e6f7      	b.n	8020544 <lfs_rename_+0x14>
            return err;
 8020754:	4606      	mov	r6, r0
 8020756:	e6f5      	b.n	8020544 <lfs_rename_+0x14>
            return err;
 8020758:	4606      	mov	r6, r0
 802075a:	e6f3      	b.n	8020544 <lfs_rename_+0x14>
    uint16_t newoldid = lfs_tag_id(oldtag);
 802075c:	46aa      	mov	sl, r5
 802075e:	e741      	b.n	80205e4 <lfs_rename_+0xb4>
 8020760:	46aa      	mov	sl, r5
 8020762:	e740      	b.n	80205e6 <lfs_rename_+0xb6>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 8020764:	2300      	movs	r3, #0
 8020766:	e74e      	b.n	8020606 <lfs_rename_+0xd6>
 8020768:	2300      	movs	r3, #0
 802076a:	e777      	b.n	802065c <lfs_rename_+0x12c>
        lfs->mlist = prevdir.next;
 802076c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802076e:	62a3      	str	r3, [r4, #40]	@ 0x28
        return err;
 8020770:	4606      	mov	r6, r0
 8020772:	e6e7      	b.n	8020544 <lfs_rename_+0x14>
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8020774:	2200      	movs	r2, #0
 8020776:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 802077a:	4620      	mov	r0, r4
 802077c:	f7fc f822 	bl	801c7c4 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 8020780:	02ab      	lsls	r3, r5, #10
 8020782:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8020786:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 802078a:	932a      	str	r3, [sp, #168]	@ 0xa8
 802078c:	2300      	movs	r3, #0
 802078e:	932b      	str	r3, [sp, #172]	@ 0xac
 8020790:	2301      	movs	r3, #1
 8020792:	aa2a      	add	r2, sp, #168	@ 0xa8
 8020794:	a922      	add	r1, sp, #136	@ 0x88
 8020796:	4620      	mov	r0, r4
 8020798:	f7ff f858 	bl	801f84c <lfs_dir_commit>
        if (err) {
 802079c:	4606      	mov	r6, r0
 802079e:	2800      	cmp	r0, #0
 80207a0:	f43f af6e 	beq.w	8020680 <lfs_rename_+0x150>
            lfs->mlist = prevdir.next;
 80207a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80207a6:	62a3      	str	r3, [r4, #40]	@ 0x28
            return err;
 80207a8:	e6cc      	b.n	8020544 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, -1);
 80207aa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80207ae:	4620      	mov	r0, r4
 80207b0:	f7fc f84c 	bl	801c84c <lfs_fs_preporphans>
        if (err) {
 80207b4:	4606      	mov	r6, r0
 80207b6:	2800      	cmp	r0, #0
 80207b8:	f47f aec4 	bne.w	8020544 <lfs_rename_+0x14>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 80207bc:	aa1a      	add	r2, sp, #104	@ 0x68
 80207be:	a911      	add	r1, sp, #68	@ 0x44
 80207c0:	4620      	mov	r0, r4
 80207c2:	f7fd ff51 	bl	801e668 <lfs_fs_pred>
        if (err) {
 80207c6:	4606      	mov	r6, r0
 80207c8:	2800      	cmp	r0, #0
 80207ca:	f47f aebb 	bne.w	8020544 <lfs_rename_+0x14>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 80207ce:	aa11      	add	r2, sp, #68	@ 0x44
 80207d0:	a91a      	add	r1, sp, #104	@ 0x68
 80207d2:	4620      	mov	r0, r4
 80207d4:	f7ff f8f6 	bl	801f9c4 <lfs_dir_drop>
 80207d8:	4606      	mov	r6, r0
        if (err) {
 80207da:	e6b3      	b.n	8020544 <lfs_rename_+0x14>
            return LFS_ERR_NAMETOOLONG;
 80207dc:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 80207e0:	e6b0      	b.n	8020544 <lfs_rename_+0x14>
    return 0;
 80207e2:	463e      	mov	r6, r7
 80207e4:	e6ae      	b.n	8020544 <lfs_rename_+0x14>
 80207e6:	bf00      	nop
 80207e8:	700ffc00 	.word	0x700ffc00

080207ec <lfs_file_opencfg_>:
        const struct lfs_file_config *cfg) {
 80207ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80207f0:	b08b      	sub	sp, #44	@ 0x2c
 80207f2:	4607      	mov	r7, r0
 80207f4:	460c      	mov	r4, r1
 80207f6:	9203      	str	r2, [sp, #12]
 80207f8:	461d      	mov	r5, r3
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80207fa:	f013 0f02 	tst.w	r3, #2
 80207fe:	d005      	beq.n	802080c <lfs_file_opencfg_+0x20>
        int err = lfs_fs_forceconsistency(lfs);
 8020800:	f7ff f8cc 	bl	801f99c <lfs_fs_forceconsistency>
        if (err) {
 8020804:	4606      	mov	r6, r0
 8020806:	2800      	cmp	r0, #0
 8020808:	f040 8109 	bne.w	8020a1e <lfs_file_opencfg_+0x232>
    file->cfg = cfg;
 802080c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802080e:	6523      	str	r3, [r4, #80]	@ 0x50
    file->flags = flags;
 8020810:	6325      	str	r5, [r4, #48]	@ 0x30
    file->pos = 0;
 8020812:	2300      	movs	r3, #0
 8020814:	6363      	str	r3, [r4, #52]	@ 0x34
    file->off = 0;
 8020816:	63e3      	str	r3, [r4, #60]	@ 0x3c
    file->cache.buffer = NULL;
 8020818:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 802081a:	f104 0808 	add.w	r8, r4, #8
 802081e:	1d23      	adds	r3, r4, #4
 8020820:	aa03      	add	r2, sp, #12
 8020822:	4641      	mov	r1, r8
 8020824:	4638      	mov	r0, r7
 8020826:	f7ff fd07 	bl	8020238 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 802082a:	1e06      	subs	r6, r0, #0
 802082c:	da09      	bge.n	8020842 <lfs_file_opencfg_+0x56>
 802082e:	f116 0f02 	cmn.w	r6, #2
 8020832:	f040 80ec 	bne.w	8020a0e <lfs_file_opencfg_+0x222>
 8020836:	88a2      	ldrh	r2, [r4, #4]
 8020838:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 802083c:	429a      	cmp	r2, r3
 802083e:	f000 80e6 	beq.w	8020a0e <lfs_file_opencfg_+0x222>
    file->type = LFS_TYPE_REG;
 8020842:	2301      	movs	r3, #1
 8020844:	71a3      	strb	r3, [r4, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8020846:	4621      	mov	r1, r4
 8020848:	4638      	mov	r0, r7
 802084a:	f7fb ff09 	bl	801c660 <lfs_mlist_append>
    if (tag == LFS_ERR_NOENT) {
 802084e:	f116 0f02 	cmn.w	r6, #2
 8020852:	d019      	beq.n	8020888 <lfs_file_opencfg_+0x9c>
    } else if (flags & LFS_O_EXCL) {
 8020854:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8020858:	f040 80d7 	bne.w	8020a0a <lfs_file_opencfg_+0x21e>
    return (tag & 0x7ff00000) >> 20;
 802085c:	f3c6 560a 	ubfx	r6, r6, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8020860:	2e01      	cmp	r6, #1
 8020862:	f040 80e0 	bne.w	8020a26 <lfs_file_opencfg_+0x23a>
    } else if (flags & LFS_O_TRUNC) {
 8020866:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 802086a:	d042      	beq.n	80208f2 <lfs_file_opencfg_+0x106>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 802086c:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 8020870:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8020874:	f049 5900 	orr.w	r9, r9, #536870912	@ 0x20000000
 8020878:	f449 1980 	orr.w	r9, r9, #1048576	@ 0x100000
        file->flags |= LFS_F_DIRTY;
 802087c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802087e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8020882:	6323      	str	r3, [r4, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8020884:	2500      	movs	r5, #0
 8020886:	e064      	b.n	8020952 <lfs_file_opencfg_+0x166>
        if (!(flags & LFS_O_CREAT)) {
 8020888:	f415 7f80 	tst.w	r5, #256	@ 0x100
 802088c:	f000 80bf 	beq.w	8020a0e <lfs_file_opencfg_+0x222>
        lfs_size_t nlen = strlen(path);
 8020890:	9d03      	ldr	r5, [sp, #12]
 8020892:	4628      	mov	r0, r5
 8020894:	f7ef fd04 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 8020898:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 802089a:	4283      	cmp	r3, r0
 802089c:	d202      	bcs.n	80208a4 <lfs_file_opencfg_+0xb8>
            err = LFS_ERR_NAMETOOLONG;
 802089e:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 80208a2:	e0b4      	b.n	8020a0e <lfs_file_opencfg_+0x222>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80208a4:	88a3      	ldrh	r3, [r4, #4]
 80208a6:	029b      	lsls	r3, r3, #10
 80208a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80208ac:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80208b0:	9204      	str	r2, [sp, #16]
 80208b2:	2200      	movs	r2, #0
 80208b4:	9205      	str	r2, [sp, #20]
 80208b6:	4318      	orrs	r0, r3
 80208b8:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 80208bc:	9006      	str	r0, [sp, #24]
 80208be:	9507      	str	r5, [sp, #28]
 80208c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80208c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80208c8:	9308      	str	r3, [sp, #32]
 80208ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80208cc:	2303      	movs	r3, #3
 80208ce:	aa04      	add	r2, sp, #16
 80208d0:	4641      	mov	r1, r8
 80208d2:	4638      	mov	r0, r7
 80208d4:	f7fe ffba 	bl	801f84c <lfs_dir_commit>
 80208d8:	4606      	mov	r6, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 80208da:	f110 0f1c 	cmn.w	r0, #28
 80208de:	d005      	beq.n	80208ec <lfs_file_opencfg_+0x100>
        if (err) {
 80208e0:	2800      	cmp	r0, #0
 80208e2:	f040 8094 	bne.w	8020a0e <lfs_file_opencfg_+0x222>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 80208e6:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 8020a3c <lfs_file_opencfg_+0x250>
 80208ea:	e7cb      	b.n	8020884 <lfs_file_opencfg_+0x98>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 80208ec:	f06f 0623 	mvn.w	r6, #35	@ 0x23
            goto cleanup;
 80208f0:	e08d      	b.n	8020a0e <lfs_file_opencfg_+0x222>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80208f2:	88a3      	ldrh	r3, [r4, #4]
 80208f4:	029b      	lsls	r3, r3, #10
 80208f6:	f104 0228 	add.w	r2, r4, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80208fa:	9200      	str	r2, [sp, #0]
 80208fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8020900:	f043 0308 	orr.w	r3, r3, #8
 8020904:	4a4b      	ldr	r2, [pc, #300]	@ (8020a34 <lfs_file_opencfg_+0x248>)
 8020906:	4641      	mov	r1, r8
 8020908:	4638      	mov	r0, r7
 802090a:	f7fc f99f 	bl	801cc4c <lfs_dir_get>
        if (tag < 0) {
 802090e:	f1b0 0900 	subs.w	r9, r0, #0
 8020912:	dab7      	bge.n	8020884 <lfs_file_opencfg_+0x98>
            err = tag;
 8020914:	464e      	mov	r6, r9
 8020916:	e07a      	b.n	8020a0e <lfs_file_opencfg_+0x222>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8020918:	685b      	ldr	r3, [r3, #4]
 802091a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 802091e:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8020922:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8020926:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 802092a:	88a3      	ldrh	r3, [r4, #4]
 802092c:	029b      	lsls	r3, r3, #10
 802092e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8020932:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8020934:	6849      	ldr	r1, [r1, #4]
 8020936:	9100      	str	r1, [sp, #0]
 8020938:	4313      	orrs	r3, r2
 802093a:	4a3f      	ldr	r2, [pc, #252]	@ (8020a38 <lfs_file_opencfg_+0x24c>)
 802093c:	4641      	mov	r1, r8
 802093e:	4638      	mov	r0, r7
 8020940:	f7fc f984 	bl	801cc4c <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 8020944:	1e06      	subs	r6, r0, #0
 8020946:	da0c      	bge.n	8020962 <lfs_file_opencfg_+0x176>
 8020948:	f116 0f02 	cmn.w	r6, #2
 802094c:	d009      	beq.n	8020962 <lfs_file_opencfg_+0x176>
 802094e:	e05e      	b.n	8020a0e <lfs_file_opencfg_+0x222>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8020950:	3501      	adds	r5, #1
 8020952:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8020954:	689a      	ldr	r2, [r3, #8]
 8020956:	42aa      	cmp	r2, r5
 8020958:	d915      	bls.n	8020986 <lfs_file_opencfg_+0x19a>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 802095a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 802095c:	f012 0f01 	tst.w	r2, #1
 8020960:	d1da      	bne.n	8020918 <lfs_file_opencfg_+0x12c>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8020962:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8020964:	f013 0f02 	tst.w	r3, #2
 8020968:	d0f2      	beq.n	8020950 <lfs_file_opencfg_+0x164>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 802096a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 802096c:	6852      	ldr	r2, [r2, #4]
 802096e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8020972:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8020976:	6891      	ldr	r1, [r2, #8]
 8020978:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 802097a:	4291      	cmp	r1, r2
 802097c:	d856      	bhi.n	8020a2c <lfs_file_opencfg_+0x240>
            file->flags |= LFS_F_DIRTY;
 802097e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8020982:	6323      	str	r3, [r4, #48]	@ 0x30
 8020984:	e7e4      	b.n	8020950 <lfs_file_opencfg_+0x164>
    if (file->cfg->buffer) {
 8020986:	681b      	ldr	r3, [r3, #0]
 8020988:	b16b      	cbz	r3, 80209a6 <lfs_file_opencfg_+0x1ba>
        file->cache.buffer = file->cfg->buffer;
 802098a:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_cache_zero(lfs, &file->cache);
 802098c:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 8020990:	4638      	mov	r0, r7
 8020992:	f7fb ff8b 	bl	801c8ac <lfs_cache_zero>
    return (tag & 0x7ff00000) >> 20;
 8020996:	f3c9 520a 	ubfx	r2, r9, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 802099a:	f240 2301 	movw	r3, #513	@ 0x201
 802099e:	429a      	cmp	r2, r3
 80209a0:	d00b      	beq.n	80209ba <lfs_file_opencfg_+0x1ce>
    return 0;
 80209a2:	2600      	movs	r6, #0
 80209a4:	e03b      	b.n	8020a1e <lfs_file_opencfg_+0x232>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80209a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
    return malloc(size);
 80209a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80209aa:	f7fb fb35 	bl	801c018 <pvPortMalloc>
 80209ae:	64e0      	str	r0, [r4, #76]	@ 0x4c
        if (!file->cache.buffer) {
 80209b0:	2800      	cmp	r0, #0
 80209b2:	d1eb      	bne.n	802098c <lfs_file_opencfg_+0x1a0>
            err = LFS_ERR_NOMEM;
 80209b4:	f06f 060b 	mvn.w	r6, #11
 80209b8:	e029      	b.n	8020a0e <lfs_file_opencfg_+0x222>
        file->ctz.head = LFS_BLOCK_INLINE;
 80209ba:	f06f 0101 	mvn.w	r1, #1
 80209be:	62a1      	str	r1, [r4, #40]	@ 0x28
    return tag & 0x000003ff;
 80209c0:	f3c9 0209 	ubfx	r2, r9, #0, #10
        file->ctz.size = lfs_tag_size(tag);
 80209c4:	62e2      	str	r2, [r4, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 80209c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80209c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80209cc:	6323      	str	r3, [r4, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 80209ce:	6421      	str	r1, [r4, #64]	@ 0x40
        file->cache.off = 0;
 80209d0:	2300      	movs	r3, #0
 80209d2:	6463      	str	r3, [r4, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 80209d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80209d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80209d8:	64a3      	str	r3, [r4, #72]	@ 0x48
        if (file->ctz.size > 0) {
 80209da:	b90a      	cbnz	r2, 80209e0 <lfs_file_opencfg_+0x1f4>
    return 0;
 80209dc:	2600      	movs	r6, #0
 80209de:	e01e      	b.n	8020a1e <lfs_file_opencfg_+0x232>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80209e0:	88a1      	ldrh	r1, [r4, #4]
    return (a < b) ? a : b;
 80209e2:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80209e6:	4293      	cmp	r3, r2
 80209e8:	bf28      	it	cs
 80209ea:	4613      	movcs	r3, r2
 80209ec:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
                    file->cache.buffer);
 80209f0:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80209f2:	9200      	str	r2, [sp, #0]
 80209f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80209f8:	4a0e      	ldr	r2, [pc, #56]	@ (8020a34 <lfs_file_opencfg_+0x248>)
 80209fa:	4641      	mov	r1, r8
 80209fc:	4638      	mov	r0, r7
 80209fe:	f7fc f925 	bl	801cc4c <lfs_dir_get>
            if (res < 0) {
 8020a02:	1e06      	subs	r6, r0, #0
 8020a04:	db03      	blt.n	8020a0e <lfs_file_opencfg_+0x222>
    return 0;
 8020a06:	2600      	movs	r6, #0
 8020a08:	e009      	b.n	8020a1e <lfs_file_opencfg_+0x232>
        err = LFS_ERR_EXIST;
 8020a0a:	f06f 0610 	mvn.w	r6, #16
    file->flags |= LFS_F_ERRED;
 8020a0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8020a10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8020a14:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs_file_close_(lfs, file);
 8020a16:	4621      	mov	r1, r4
 8020a18:	4638      	mov	r0, r7
 8020a1a:	f7ff fbf9 	bl	8020210 <lfs_file_close_>
}
 8020a1e:	4630      	mov	r0, r6
 8020a20:	b00b      	add	sp, #44	@ 0x2c
 8020a22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = LFS_ERR_ISDIR;
 8020a26:	f06f 0614 	mvn.w	r6, #20
 8020a2a:	e7f0      	b.n	8020a0e <lfs_file_opencfg_+0x222>
                err = LFS_ERR_NOSPC;
 8020a2c:	f06f 061b 	mvn.w	r6, #27
 8020a30:	e7ed      	b.n	8020a0e <lfs_file_opencfg_+0x222>
 8020a32:	bf00      	nop
 8020a34:	700ffc00 	.word	0x700ffc00
 8020a38:	7ffffc00 	.word	0x7ffffc00
 8020a3c:	20100000 	.word	0x20100000

08020a40 <lfs_file_open_>:
        const char *path, int flags) {
 8020a40:	b510      	push	{r4, lr}
 8020a42:	b082      	sub	sp, #8
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 8020a44:	4c02      	ldr	r4, [pc, #8]	@ (8020a50 <lfs_file_open_+0x10>)
 8020a46:	9400      	str	r4, [sp, #0]
 8020a48:	f7ff fed0 	bl	80207ec <lfs_file_opencfg_>
}
 8020a4c:	b002      	add	sp, #8
 8020a4e:	bd10      	pop	{r4, pc}
 8020a50:	0803d51c 	.word	0x0803d51c

08020a54 <lfs_mkdir_>:
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 8020a54:	b530      	push	{r4, r5, lr}
 8020a56:	b0ab      	sub	sp, #172	@ 0xac
 8020a58:	4604      	mov	r4, r0
 8020a5a:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
 8020a5c:	f7fe ff9e 	bl	801f99c <lfs_fs_forceconsistency>
    if (err) {
 8020a60:	4603      	mov	r3, r0
 8020a62:	b110      	cbz	r0, 8020a6a <lfs_mkdir_+0x16>
}
 8020a64:	4618      	mov	r0, r3
 8020a66:	b02b      	add	sp, #172	@ 0xac
 8020a68:	bd30      	pop	{r4, r5, pc}
    cwd.next = lfs->mlist;
 8020a6a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8020a6c:	931c      	str	r3, [sp, #112]	@ 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 8020a6e:	f10d 036e 	add.w	r3, sp, #110	@ 0x6e
 8020a72:	aa01      	add	r2, sp, #4
 8020a74:	a91e      	add	r1, sp, #120	@ 0x78
 8020a76:	4620      	mov	r0, r4
 8020a78:	f7ff fbde 	bl	8020238 <lfs_dir_find>
 8020a7c:	4603      	mov	r3, r0
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 8020a7e:	f110 0f02 	cmn.w	r0, #2
 8020a82:	d12f      	bne.n	8020ae4 <lfs_mkdir_+0x90>
 8020a84:	f8bd 106e 	ldrh.w	r1, [sp, #110]	@ 0x6e
 8020a88:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8020a8c:	4291      	cmp	r1, r2
 8020a8e:	d029      	beq.n	8020ae4 <lfs_mkdir_+0x90>
    lfs_size_t nlen = strlen(path);
 8020a90:	9801      	ldr	r0, [sp, #4]
 8020a92:	f7ef fc05 	bl	80102a0 <strlen>
 8020a96:	4605      	mov	r5, r0
    if (nlen > lfs->name_max) {
 8020a98:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8020a9a:	4283      	cmp	r3, r0
 8020a9c:	f0c0 8089 	bcc.w	8020bb2 <lfs_mkdir_+0x15e>
    lfs_alloc_ckpoint(lfs);
 8020aa0:	4620      	mov	r0, r4
 8020aa2:	f7fb fdef 	bl	801c684 <lfs_alloc_ckpoint>
    err = lfs_dir_alloc(lfs, &dir);
 8020aa6:	a913      	add	r1, sp, #76	@ 0x4c
 8020aa8:	4620      	mov	r0, r4
 8020aaa:	f7fd fa25 	bl	801def8 <lfs_dir_alloc>
    if (err) {
 8020aae:	4603      	mov	r3, r0
 8020ab0:	2800      	cmp	r0, #0
 8020ab2:	d1d7      	bne.n	8020a64 <lfs_mkdir_+0x10>
    lfs_mdir_t pred = cwd.m;
 8020ab4:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8020ab8:	f10d 0e78 	add.w	lr, sp, #120	@ 0x78
 8020abc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8020ac0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8020ac4:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8020ac8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while (pred.split) {
 8020acc:	f89d 3043 	ldrb.w	r3, [sp, #67]	@ 0x43
 8020ad0:	b16b      	cbz	r3, 8020aee <lfs_mkdir_+0x9a>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 8020ad2:	aa11      	add	r2, sp, #68	@ 0x44
 8020ad4:	a90b      	add	r1, sp, #44	@ 0x2c
 8020ad6:	4620      	mov	r0, r4
 8020ad8:	f7fd f8a8 	bl	801dc2c <lfs_dir_fetch>
        if (err) {
 8020adc:	4603      	mov	r3, r0
 8020ade:	2800      	cmp	r0, #0
 8020ae0:	d0f4      	beq.n	8020acc <lfs_mkdir_+0x78>
 8020ae2:	e7bf      	b.n	8020a64 <lfs_mkdir_+0x10>
        return (err < 0) ? err : LFS_ERR_EXIST;
 8020ae4:	2b00      	cmp	r3, #0
 8020ae6:	dbbd      	blt.n	8020a64 <lfs_mkdir_+0x10>
 8020ae8:	f06f 0310 	mvn.w	r3, #16
 8020aec:	e7ba      	b.n	8020a64 <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 8020aee:	4b32      	ldr	r3, [pc, #200]	@ (8020bb8 <lfs_mkdir_+0x164>)
 8020af0:	9326      	str	r3, [sp, #152]	@ 0x98
 8020af2:	ab11      	add	r3, sp, #68	@ 0x44
 8020af4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8020af6:	2301      	movs	r3, #1
 8020af8:	aa26      	add	r2, sp, #152	@ 0x98
 8020afa:	a913      	add	r1, sp, #76	@ 0x4c
 8020afc:	4620      	mov	r0, r4
 8020afe:	f7fe fea5 	bl	801f84c <lfs_dir_commit>
    if (err) {
 8020b02:	4603      	mov	r3, r0
 8020b04:	2800      	cmp	r0, #0
 8020b06:	d1ad      	bne.n	8020a64 <lfs_mkdir_+0x10>
    if (cwd.m.split) {
 8020b08:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 8020b0c:	bb33      	cbnz	r3, 8020b5c <lfs_mkdir_+0x108>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 8020b0e:	f8bd 306e 	ldrh.w	r3, [sp, #110]	@ 0x6e
 8020b12:	029b      	lsls	r3, r3, #10
 8020b14:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8020b18:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8020b1c:	9203      	str	r2, [sp, #12]
 8020b1e:	2200      	movs	r2, #0
 8020b20:	9204      	str	r2, [sp, #16]
 8020b22:	431d      	orrs	r5, r3
 8020b24:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 8020b28:	9505      	str	r5, [sp, #20]
 8020b2a:	9a01      	ldr	r2, [sp, #4]
 8020b2c:	9206      	str	r2, [sp, #24]
 8020b2e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8020b32:	f043 0308 	orr.w	r3, r3, #8
 8020b36:	9307      	str	r3, [sp, #28]
 8020b38:	ab13      	add	r3, sp, #76	@ 0x4c
 8020b3a:	9308      	str	r3, [sp, #32]
 8020b3c:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 8020b40:	2b00      	cmp	r3, #0
 8020b42:	d134      	bne.n	8020bae <lfs_mkdir_+0x15a>
 8020b44:	4b1c      	ldr	r3, [pc, #112]	@ (8020bb8 <lfs_mkdir_+0x164>)
 8020b46:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b48:	ab13      	add	r3, sp, #76	@ 0x4c
 8020b4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8020b4c:	2304      	movs	r3, #4
 8020b4e:	aa03      	add	r2, sp, #12
 8020b50:	a91e      	add	r1, sp, #120	@ 0x78
 8020b52:	4620      	mov	r0, r4
 8020b54:	f7fe fe7a 	bl	801f84c <lfs_dir_commit>
 8020b58:	4603      	mov	r3, r0
    if (err) {
 8020b5a:	e783      	b.n	8020a64 <lfs_mkdir_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 8020b5c:	2101      	movs	r1, #1
 8020b5e:	4620      	mov	r0, r4
 8020b60:	f7fb fe74 	bl	801c84c <lfs_fs_preporphans>
        if (err) {
 8020b64:	4603      	mov	r3, r0
 8020b66:	2800      	cmp	r0, #0
 8020b68:	f47f af7c 	bne.w	8020a64 <lfs_mkdir_+0x10>
        cwd.type = 0;
 8020b6c:	2300      	movs	r3, #0
 8020b6e:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
        cwd.id = 0;
 8020b72:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
        lfs->mlist = &cwd;
 8020b76:	ab1c      	add	r3, sp, #112	@ 0x70
 8020b78:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 8020b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8020bb8 <lfs_mkdir_+0x164>)
 8020b7c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8020b7e:	ab13      	add	r3, sp, #76	@ 0x4c
 8020b80:	9329      	str	r3, [sp, #164]	@ 0xa4
 8020b82:	2301      	movs	r3, #1
 8020b84:	aa28      	add	r2, sp, #160	@ 0xa0
 8020b86:	a90b      	add	r1, sp, #44	@ 0x2c
 8020b88:	4620      	mov	r0, r4
 8020b8a:	f7fe fe5f 	bl	801f84c <lfs_dir_commit>
        if (err) {
 8020b8e:	4603      	mov	r3, r0
 8020b90:	b110      	cbz	r0, 8020b98 <lfs_mkdir_+0x144>
            lfs->mlist = cwd.next;
 8020b92:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8020b94:	62a2      	str	r2, [r4, #40]	@ 0x28
            return err;
 8020b96:	e765      	b.n	8020a64 <lfs_mkdir_+0x10>
        lfs->mlist = cwd.next;
 8020b98:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020b9a:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 8020b9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8020ba0:	4620      	mov	r0, r4
 8020ba2:	f7fb fe53 	bl	801c84c <lfs_fs_preporphans>
        if (err) {
 8020ba6:	4603      	mov	r3, r0
 8020ba8:	2800      	cmp	r0, #0
 8020baa:	d0b0      	beq.n	8020b0e <lfs_mkdir_+0xba>
 8020bac:	e75a      	b.n	8020a64 <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 8020bae:	2300      	movs	r3, #0
 8020bb0:	e7c9      	b.n	8020b46 <lfs_mkdir_+0xf2>
        return LFS_ERR_NAMETOOLONG;
 8020bb2:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8020bb6:	e755      	b.n	8020a64 <lfs_mkdir_+0x10>
 8020bb8:	600ffc08 	.word	0x600ffc08

08020bbc <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
 8020bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020bbe:	b085      	sub	sp, #20
 8020bc0:	461d      	mov	r5, r3
    if (id == 0x3ff) {
 8020bc2:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8020bc6:	429a      	cmp	r2, r3
 8020bc8:	d02b      	beq.n	8020c22 <lfs_dir_getinfo+0x66>
 8020bca:	4604      	mov	r4, r0
 8020bcc:	460e      	mov	r6, r1
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8020bce:	0297      	lsls	r7, r2, #10
 8020bd0:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8020bd2:	3301      	adds	r3, #1
 8020bd4:	f105 0108 	add.w	r1, r5, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8020bd8:	9100      	str	r1, [sp, #0]
 8020bda:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8020bde:	4a19      	ldr	r2, [pc, #100]	@ (8020c44 <lfs_dir_getinfo+0x88>)
 8020be0:	4631      	mov	r1, r6
 8020be2:	f7fc f833 	bl	801cc4c <lfs_dir_get>
    if (tag < 0) {
 8020be6:	2800      	cmp	r0, #0
 8020be8:	db21      	blt.n	8020c2e <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 8020bea:	f3c0 520a 	ubfx	r2, r0, #20, #11
    info->type = lfs_tag_type3(tag);
 8020bee:	702a      	strb	r2, [r5, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8020bf0:	ab02      	add	r3, sp, #8
 8020bf2:	9300      	str	r3, [sp, #0]
 8020bf4:	f047 5300 	orr.w	r3, r7, #536870912	@ 0x20000000
 8020bf8:	f043 0308 	orr.w	r3, r3, #8
 8020bfc:	4a12      	ldr	r2, [pc, #72]	@ (8020c48 <lfs_dir_getinfo+0x8c>)
 8020bfe:	4631      	mov	r1, r6
 8020c00:	4620      	mov	r0, r4
 8020c02:	f7fc f823 	bl	801cc4c <lfs_dir_get>
    if (tag < 0) {
 8020c06:	2800      	cmp	r0, #0
 8020c08:	db11      	blt.n	8020c2e <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 8020c0a:	f3c0 530a 	ubfx	r3, r0, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8020c0e:	f240 2202 	movw	r2, #514	@ 0x202
 8020c12:	4293      	cmp	r3, r2
 8020c14:	d00d      	beq.n	8020c32 <lfs_dir_getinfo+0x76>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8020c16:	f240 2201 	movw	r2, #513	@ 0x201
 8020c1a:	4293      	cmp	r3, r2
 8020c1c:	d00d      	beq.n	8020c3a <lfs_dir_getinfo+0x7e>
    return 0;
 8020c1e:	2000      	movs	r0, #0
 8020c20:	e005      	b.n	8020c2e <lfs_dir_getinfo+0x72>
        strcpy(info->name, "/");
 8020c22:	4b0a      	ldr	r3, [pc, #40]	@ (8020c4c <lfs_dir_getinfo+0x90>)
 8020c24:	881b      	ldrh	r3, [r3, #0]
 8020c26:	812b      	strh	r3, [r5, #8]
        info->type = LFS_TYPE_DIR;
 8020c28:	2302      	movs	r3, #2
 8020c2a:	702b      	strb	r3, [r5, #0]
        return 0;
 8020c2c:	2000      	movs	r0, #0
}
 8020c2e:	b005      	add	sp, #20
 8020c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
        info->size = ctz.size;
 8020c32:	9b03      	ldr	r3, [sp, #12]
 8020c34:	606b      	str	r3, [r5, #4]
    return 0;
 8020c36:	2000      	movs	r0, #0
 8020c38:	e7f9      	b.n	8020c2e <lfs_dir_getinfo+0x72>
    return tag & 0x000003ff;
 8020c3a:	f3c0 0009 	ubfx	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
 8020c3e:	6068      	str	r0, [r5, #4]
    return 0;
 8020c40:	2000      	movs	r0, #0
 8020c42:	e7f4      	b.n	8020c2e <lfs_dir_getinfo+0x72>
 8020c44:	780ffc00 	.word	0x780ffc00
 8020c48:	700ffc00 	.word	0x700ffc00
 8020c4c:	0803b39c 	.word	0x0803b39c

08020c50 <lfs_stat_>:
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8020c50:	b530      	push	{r4, r5, lr}
 8020c52:	b08b      	sub	sp, #44	@ 0x2c
 8020c54:	4604      	mov	r4, r0
 8020c56:	9101      	str	r1, [sp, #4]
 8020c58:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8020c5a:	2300      	movs	r3, #0
 8020c5c:	aa01      	add	r2, sp, #4
 8020c5e:	a902      	add	r1, sp, #8
 8020c60:	f7ff faea 	bl	8020238 <lfs_dir_find>
    if (tag < 0) {
 8020c64:	2800      	cmp	r0, #0
 8020c66:	db06      	blt.n	8020c76 <lfs_stat_+0x26>
    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 8020c68:	462b      	mov	r3, r5
 8020c6a:	f3c0 2289 	ubfx	r2, r0, #10, #10
 8020c6e:	a902      	add	r1, sp, #8
 8020c70:	4620      	mov	r0, r4
 8020c72:	f7ff ffa3 	bl	8020bbc <lfs_dir_getinfo>
}
 8020c76:	b00b      	add	sp, #44	@ 0x2c
 8020c78:	bd30      	pop	{r4, r5, pc}
	...

08020c7c <lfs_dir_read_>:
static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8020c7c:	b570      	push	{r4, r5, r6, lr}
 8020c7e:	4605      	mov	r5, r0
 8020c80:	460c      	mov	r4, r1
 8020c82:	4616      	mov	r6, r2
    memset(info, 0, sizeof(*info));
 8020c84:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8020c88:	2100      	movs	r1, #0
 8020c8a:	4630      	mov	r0, r6
 8020c8c:	f00b fdb8 	bl	802c800 <memset>
    if (dir->pos == 0) {
 8020c90:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8020c92:	b183      	cbz	r3, 8020cb6 <lfs_dir_read_+0x3a>
    } else if (dir->pos == 1) {
 8020c94:	2b01      	cmp	r3, #1
 8020c96:	d11f      	bne.n	8020cd8 <lfs_dir_read_+0x5c>
        info->type = LFS_TYPE_DIR;
 8020c98:	4633      	mov	r3, r6
 8020c9a:	2202      	movs	r2, #2
 8020c9c:	f803 2b08 	strb.w	r2, [r3], #8
        strcpy(info->name, "..");
 8020ca0:	4a22      	ldr	r2, [pc, #136]	@ (8020d2c <lfs_dir_read_+0xb0>)
 8020ca2:	8811      	ldrh	r1, [r2, #0]
 8020ca4:	7892      	ldrb	r2, [r2, #2]
 8020ca6:	8131      	strh	r1, [r6, #8]
 8020ca8:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 8020caa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8020cac:	3301      	adds	r3, #1
 8020cae:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 8020cb0:	f04f 0c01 	mov.w	ip, #1
 8020cb4:	e034      	b.n	8020d20 <lfs_dir_read_+0xa4>
        info->type = LFS_TYPE_DIR;
 8020cb6:	2302      	movs	r3, #2
 8020cb8:	7033      	strb	r3, [r6, #0]
        strcpy(info->name, ".");
 8020cba:	4b1d      	ldr	r3, [pc, #116]	@ (8020d30 <lfs_dir_read_+0xb4>)
 8020cbc:	881b      	ldrh	r3, [r3, #0]
 8020cbe:	8133      	strh	r3, [r6, #8]
        dir->pos += 1;
 8020cc0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8020cc2:	3301      	adds	r3, #1
 8020cc4:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 8020cc6:	f04f 0c01 	mov.w	ip, #1
 8020cca:	e029      	b.n	8020d20 <lfs_dir_read_+0xa4>
        dir->id += 1;
 8020ccc:	88a1      	ldrh	r1, [r4, #4]
 8020cce:	3101      	adds	r1, #1
 8020cd0:	80a1      	strh	r1, [r4, #4]
        if (err != LFS_ERR_NOENT) {
 8020cd2:	f11c 0f02 	cmn.w	ip, #2
 8020cd6:	d11e      	bne.n	8020d16 <lfs_dir_read_+0x9a>
        if (dir->id == dir->m.count) {
 8020cd8:	88a3      	ldrh	r3, [r4, #4]
 8020cda:	8ba1      	ldrh	r1, [r4, #28]
 8020cdc:	428b      	cmp	r3, r1
 8020cde:	d10c      	bne.n	8020cfa <lfs_dir_read_+0x7e>
            if (!dir->m.split) {
 8020ce0:	7fe3      	ldrb	r3, [r4, #31]
 8020ce2:	b1fb      	cbz	r3, 8020d24 <lfs_dir_read_+0xa8>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 8020ce4:	f104 0220 	add.w	r2, r4, #32
 8020ce8:	f104 0108 	add.w	r1, r4, #8
 8020cec:	4628      	mov	r0, r5
 8020cee:	f7fc ff9d 	bl	801dc2c <lfs_dir_fetch>
            if (err) {
 8020cf2:	4684      	mov	ip, r0
 8020cf4:	b9a0      	cbnz	r0, 8020d20 <lfs_dir_read_+0xa4>
            dir->id = 0;
 8020cf6:	2300      	movs	r3, #0
 8020cf8:	80a3      	strh	r3, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 8020cfa:	4633      	mov	r3, r6
 8020cfc:	88a2      	ldrh	r2, [r4, #4]
 8020cfe:	f104 0108 	add.w	r1, r4, #8
 8020d02:	4628      	mov	r0, r5
 8020d04:	f7ff ff5a 	bl	8020bbc <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
 8020d08:	4684      	mov	ip, r0
 8020d0a:	2800      	cmp	r0, #0
 8020d0c:	d0de      	beq.n	8020ccc <lfs_dir_read_+0x50>
 8020d0e:	f110 0f02 	cmn.w	r0, #2
 8020d12:	d0db      	beq.n	8020ccc <lfs_dir_read_+0x50>
 8020d14:	e004      	b.n	8020d20 <lfs_dir_read_+0xa4>
    dir->pos += 1;
 8020d16:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8020d18:	3301      	adds	r3, #1
 8020d1a:	62a3      	str	r3, [r4, #40]	@ 0x28
    return true;
 8020d1c:	f04f 0c01 	mov.w	ip, #1
}
 8020d20:	4660      	mov	r0, ip
 8020d22:	bd70      	pop	{r4, r5, r6, pc}
                return false;
 8020d24:	f04f 0c00 	mov.w	ip, #0
 8020d28:	e7fa      	b.n	8020d20 <lfs_dir_read_+0xa4>
 8020d2a:	bf00      	nop
 8020d2c:	0803ad10 	.word	0x0803ad10
 8020d30:	08037cf0 	.word	0x08037cf0

08020d34 <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8020d34:	b570      	push	{r4, r5, r6, lr}
 8020d36:	4605      	mov	r5, r0
 8020d38:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 8020d3a:	694b      	ldr	r3, [r1, #20]
 8020d3c:	4608      	mov	r0, r1
 8020d3e:	4798      	blx	r3
    if (err) {
 8020d40:	4606      	mov	r6, r0
 8020d42:	b108      	cbz	r0, 8020d48 <lfs_format+0x14>
    err = lfs_format_(lfs, cfg);

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 8020d44:	4630      	mov	r0, r6
 8020d46:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_format_(lfs, cfg);
 8020d48:	4621      	mov	r1, r4
 8020d4a:	4628      	mov	r0, r5
 8020d4c:	f7ff f872 	bl	801fe34 <lfs_format_>
 8020d50:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 8020d52:	69a3      	ldr	r3, [r4, #24]
 8020d54:	4620      	mov	r0, r4
 8020d56:	4798      	blx	r3
    return err;
 8020d58:	e7f4      	b.n	8020d44 <lfs_format+0x10>

08020d5a <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8020d5a:	b570      	push	{r4, r5, r6, lr}
 8020d5c:	4605      	mov	r5, r0
 8020d5e:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 8020d60:	694b      	ldr	r3, [r1, #20]
 8020d62:	4608      	mov	r0, r1
 8020d64:	4798      	blx	r3
    if (err) {
 8020d66:	4606      	mov	r6, r0
 8020d68:	b108      	cbz	r0, 8020d6e <lfs_mount+0x14>
    err = lfs_mount_(lfs, cfg);

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 8020d6a:	4630      	mov	r0, r6
 8020d6c:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mount_(lfs, cfg);
 8020d6e:	4621      	mov	r1, r4
 8020d70:	4628      	mov	r0, r5
 8020d72:	f7ff f8dd 	bl	801ff30 <lfs_mount_>
 8020d76:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 8020d78:	69a3      	ldr	r3, [r4, #24]
 8020d7a:	4620      	mov	r0, r4
 8020d7c:	4798      	blx	r3
    return err;
 8020d7e:	e7f4      	b.n	8020d6a <lfs_mount+0x10>

08020d80 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 8020d80:	b570      	push	{r4, r5, r6, lr}
 8020d82:	4604      	mov	r4, r0
 8020d84:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 8020d86:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020d88:	6943      	ldr	r3, [r0, #20]
 8020d8a:	4798      	blx	r3
    if (err) {
 8020d8c:	4606      	mov	r6, r0
 8020d8e:	b108      	cbz	r0, 8020d94 <lfs_remove+0x14>
    err = lfs_remove_(lfs, path);

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8020d90:	4630      	mov	r0, r6
 8020d92:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_remove_(lfs, path);
 8020d94:	4629      	mov	r1, r5
 8020d96:	4620      	mov	r0, r4
 8020d98:	f7ff fb0a 	bl	80203b0 <lfs_remove_>
 8020d9c:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 8020d9e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8020da0:	6983      	ldr	r3, [r0, #24]
 8020da2:	4798      	blx	r3
    return err;
 8020da4:	e7f4      	b.n	8020d90 <lfs_remove+0x10>

08020da6 <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 8020da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020da8:	4604      	mov	r4, r0
 8020daa:	460d      	mov	r5, r1
 8020dac:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 8020dae:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020db0:	6943      	ldr	r3, [r0, #20]
 8020db2:	4798      	blx	r3
    if (err) {
 8020db4:	4607      	mov	r7, r0
 8020db6:	b108      	cbz	r0, 8020dbc <lfs_rename+0x16>
    err = lfs_rename_(lfs, oldpath, newpath);

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8020db8:	4638      	mov	r0, r7
 8020dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_rename_(lfs, oldpath, newpath);
 8020dbc:	4632      	mov	r2, r6
 8020dbe:	4629      	mov	r1, r5
 8020dc0:	4620      	mov	r0, r4
 8020dc2:	f7ff fbb5 	bl	8020530 <lfs_rename_>
 8020dc6:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 8020dc8:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8020dca:	6983      	ldr	r3, [r0, #24]
 8020dcc:	4798      	blx	r3
    return err;
 8020dce:	e7f3      	b.n	8020db8 <lfs_rename+0x12>

08020dd0 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8020dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020dd2:	4604      	mov	r4, r0
 8020dd4:	460d      	mov	r5, r1
 8020dd6:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 8020dd8:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020dda:	6943      	ldr	r3, [r0, #20]
 8020ddc:	4798      	blx	r3
    if (err) {
 8020dde:	4607      	mov	r7, r0
 8020de0:	b108      	cbz	r0, 8020de6 <lfs_stat+0x16>
    err = lfs_stat_(lfs, path, info);

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8020de2:	4638      	mov	r0, r7
 8020de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_stat_(lfs, path, info);
 8020de6:	4632      	mov	r2, r6
 8020de8:	4629      	mov	r1, r5
 8020dea:	4620      	mov	r0, r4
 8020dec:	f7ff ff30 	bl	8020c50 <lfs_stat_>
 8020df0:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 8020df2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8020df4:	6983      	ldr	r3, [r0, #24]
 8020df6:	4798      	blx	r3
    return err;
 8020df8:	e7f3      	b.n	8020de2 <lfs_stat+0x12>
	...

08020dfc <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8020dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020e00:	4604      	mov	r4, r0
 8020e02:	460d      	mov	r5, r1
 8020e04:	4616      	mov	r6, r2
 8020e06:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 8020e08:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020e0a:	6942      	ldr	r2, [r0, #20]
 8020e0c:	4790      	blx	r2
    if (err) {
 8020e0e:	4607      	mov	r7, r0
 8020e10:	b110      	cbz	r0, 8020e18 <lfs_file_open+0x1c>
    err = lfs_file_open_(lfs, file, path, flags);

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8020e12:	4638      	mov	r0, r7
 8020e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8020e18:	4629      	mov	r1, r5
 8020e1a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8020e1c:	f7fb fc09 	bl	801c632 <lfs_mlist_isopen>
 8020e20:	b950      	cbnz	r0, 8020e38 <lfs_file_open+0x3c>
    err = lfs_file_open_(lfs, file, path, flags);
 8020e22:	4643      	mov	r3, r8
 8020e24:	4632      	mov	r2, r6
 8020e26:	4629      	mov	r1, r5
 8020e28:	4620      	mov	r0, r4
 8020e2a:	f7ff fe09 	bl	8020a40 <lfs_file_open_>
 8020e2e:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 8020e30:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8020e32:	6983      	ldr	r3, [r0, #24]
 8020e34:	4798      	blx	r3
    return err;
 8020e36:	e7ec      	b.n	8020e12 <lfs_file_open+0x16>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8020e38:	4b03      	ldr	r3, [pc, #12]	@ (8020e48 <lfs_file_open+0x4c>)
 8020e3a:	4a04      	ldr	r2, [pc, #16]	@ (8020e4c <lfs_file_open+0x50>)
 8020e3c:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 8020e40:	4803      	ldr	r0, [pc, #12]	@ (8020e50 <lfs_file_open+0x54>)
 8020e42:	f00a fbe3 	bl	802b60c <__assert_func>
 8020e46:	bf00      	nop
 8020e48:	0803ad14 	.word	0x0803ad14
 8020e4c:	0803d528 	.word	0x0803d528
 8020e50:	0803a198 	.word	0x0803a198

08020e54 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8020e54:	b570      	push	{r4, r5, r6, lr}
 8020e56:	4604      	mov	r4, r0
 8020e58:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 8020e5a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020e5c:	6943      	ldr	r3, [r0, #20]
 8020e5e:	4798      	blx	r3
    if (err) {
 8020e60:	4606      	mov	r6, r0
 8020e62:	b108      	cbz	r0, 8020e68 <lfs_file_close+0x14>
    err = lfs_file_close_(lfs, file);

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8020e64:	4630      	mov	r0, r6
 8020e66:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8020e68:	4629      	mov	r1, r5
 8020e6a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8020e6c:	f7fb fbe1 	bl	801c632 <lfs_mlist_isopen>
 8020e70:	b140      	cbz	r0, 8020e84 <lfs_file_close+0x30>
    err = lfs_file_close_(lfs, file);
 8020e72:	4629      	mov	r1, r5
 8020e74:	4620      	mov	r0, r4
 8020e76:	f7ff f9cb 	bl	8020210 <lfs_file_close_>
 8020e7a:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 8020e7c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8020e7e:	6983      	ldr	r3, [r0, #24]
 8020e80:	4798      	blx	r3
    return err;
 8020e82:	e7ef      	b.n	8020e64 <lfs_file_close+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8020e84:	4b03      	ldr	r3, [pc, #12]	@ (8020e94 <lfs_file_close+0x40>)
 8020e86:	4a04      	ldr	r2, [pc, #16]	@ (8020e98 <lfs_file_close+0x44>)
 8020e88:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 8020e8c:	4803      	ldr	r0, [pc, #12]	@ (8020e9c <lfs_file_close+0x48>)
 8020e8e:	f00a fbbd 	bl	802b60c <__assert_func>
 8020e92:	bf00      	nop
 8020e94:	0803ad4c 	.word	0x0803ad4c
 8020e98:	0803d50c 	.word	0x0803d50c
 8020e9c:	0803a198 	.word	0x0803a198

08020ea0 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8020ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ea4:	4604      	mov	r4, r0
 8020ea6:	460d      	mov	r5, r1
 8020ea8:	4616      	mov	r6, r2
 8020eaa:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 8020eac:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020eae:	6942      	ldr	r2, [r0, #20]
 8020eb0:	4790      	blx	r2
    if (err) {
 8020eb2:	4607      	mov	r7, r0
 8020eb4:	b110      	cbz	r0, 8020ebc <lfs_file_read+0x1c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 8020eb6:	4638      	mov	r0, r7
 8020eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8020ebc:	4629      	mov	r1, r5
 8020ebe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8020ec0:	f7fb fbb7 	bl	801c632 <lfs_mlist_isopen>
 8020ec4:	b150      	cbz	r0, 8020edc <lfs_file_read+0x3c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 8020ec6:	4643      	mov	r3, r8
 8020ec8:	4632      	mov	r2, r6
 8020eca:	4629      	mov	r1, r5
 8020ecc:	4620      	mov	r0, r4
 8020ece:	f7fd faf3 	bl	801e4b8 <lfs_file_read_>
 8020ed2:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 8020ed4:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8020ed6:	6983      	ldr	r3, [r0, #24]
 8020ed8:	4798      	blx	r3
    return res;
 8020eda:	e7ec      	b.n	8020eb6 <lfs_file_read+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8020edc:	4b03      	ldr	r3, [pc, #12]	@ (8020eec <lfs_file_read+0x4c>)
 8020ede:	4a04      	ldr	r2, [pc, #16]	@ (8020ef0 <lfs_file_read+0x50>)
 8020ee0:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 8020ee4:	4803      	ldr	r0, [pc, #12]	@ (8020ef4 <lfs_file_read+0x54>)
 8020ee6:	f00a fb91 	bl	802b60c <__assert_func>
 8020eea:	bf00      	nop
 8020eec:	0803ad4c 	.word	0x0803ad4c
 8020ef0:	0803d4fc 	.word	0x0803d4fc
 8020ef4:	0803a198 	.word	0x0803a198

08020ef8 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8020ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020efc:	4604      	mov	r4, r0
 8020efe:	460d      	mov	r5, r1
 8020f00:	4616      	mov	r6, r2
 8020f02:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 8020f04:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020f06:	6942      	ldr	r2, [r0, #20]
 8020f08:	4790      	blx	r2
    if (err) {
 8020f0a:	4607      	mov	r7, r0
 8020f0c:	b110      	cbz	r0, 8020f14 <lfs_file_write+0x1c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 8020f0e:	4638      	mov	r0, r7
 8020f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8020f14:	4629      	mov	r1, r5
 8020f16:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8020f18:	f7fb fb8b 	bl	801c632 <lfs_mlist_isopen>
 8020f1c:	b150      	cbz	r0, 8020f34 <lfs_file_write+0x3c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 8020f1e:	4643      	mov	r3, r8
 8020f20:	4632      	mov	r2, r6
 8020f22:	4629      	mov	r1, r5
 8020f24:	4620      	mov	r0, r4
 8020f26:	f7fd fb37 	bl	801e598 <lfs_file_write_>
 8020f2a:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 8020f2c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8020f2e:	6983      	ldr	r3, [r0, #24]
 8020f30:	4798      	blx	r3
    return res;
 8020f32:	e7ec      	b.n	8020f0e <lfs_file_write+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8020f34:	4b03      	ldr	r3, [pc, #12]	@ (8020f44 <lfs_file_write+0x4c>)
 8020f36:	4a04      	ldr	r2, [pc, #16]	@ (8020f48 <lfs_file_write+0x50>)
 8020f38:	f641 0105 	movw	r1, #6149	@ 0x1805
 8020f3c:	4803      	ldr	r0, [pc, #12]	@ (8020f4c <lfs_file_write+0x54>)
 8020f3e:	f00a fb65 	bl	802b60c <__assert_func>
 8020f42:	bf00      	nop
 8020f44:	0803ad4c 	.word	0x0803ad4c
 8020f48:	0803d4dc 	.word	0x0803d4dc
 8020f4c:	0803a198 	.word	0x0803a198

08020f50 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8020f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020f54:	4604      	mov	r4, r0
 8020f56:	460d      	mov	r5, r1
 8020f58:	4616      	mov	r6, r2
 8020f5a:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 8020f5c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020f5e:	6942      	ldr	r2, [r0, #20]
 8020f60:	4790      	blx	r2
    if (err) {
 8020f62:	4607      	mov	r7, r0
 8020f64:	b110      	cbz	r0, 8020f6c <lfs_file_seek+0x1c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 8020f66:	4638      	mov	r0, r7
 8020f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8020f6c:	4629      	mov	r1, r5
 8020f6e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8020f70:	f7fb fb5f 	bl	801c632 <lfs_mlist_isopen>
 8020f74:	b150      	cbz	r0, 8020f8c <lfs_file_seek+0x3c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 8020f76:	4643      	mov	r3, r8
 8020f78:	4632      	mov	r2, r6
 8020f7a:	4629      	mov	r1, r5
 8020f7c:	4620      	mov	r0, r4
 8020f7e:	f7fd fabf 	bl	801e500 <lfs_file_seek_>
 8020f82:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 8020f84:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8020f86:	6983      	ldr	r3, [r0, #24]
 8020f88:	4798      	blx	r3
    return res;
 8020f8a:	e7ec      	b.n	8020f66 <lfs_file_seek+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8020f8c:	4b03      	ldr	r3, [pc, #12]	@ (8020f9c <lfs_file_seek+0x4c>)
 8020f8e:	4a04      	ldr	r2, [pc, #16]	@ (8020fa0 <lfs_file_seek+0x50>)
 8020f90:	f641 0117 	movw	r1, #6167	@ 0x1817
 8020f94:	4803      	ldr	r0, [pc, #12]	@ (8020fa4 <lfs_file_seek+0x54>)
 8020f96:	f00a fb39 	bl	802b60c <__assert_func>
 8020f9a:	bf00      	nop
 8020f9c:	0803ad4c 	.word	0x0803ad4c
 8020fa0:	0803d4bc 	.word	0x0803d4bc
 8020fa4:	0803a198 	.word	0x0803a198

08020fa8 <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 8020fa8:	b570      	push	{r4, r5, r6, lr}
 8020faa:	4604      	mov	r4, r0
 8020fac:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 8020fae:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020fb0:	6943      	ldr	r3, [r0, #20]
 8020fb2:	4798      	blx	r3
    if (err) {
 8020fb4:	4606      	mov	r6, r0
 8020fb6:	b108      	cbz	r0, 8020fbc <lfs_file_tell+0x14>
    lfs_soff_t res = lfs_file_tell_(lfs, file);

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 8020fb8:	4630      	mov	r0, r6
 8020fba:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8020fbc:	4629      	mov	r1, r5
 8020fbe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8020fc0:	f7fb fb37 	bl	801c632 <lfs_mlist_isopen>
 8020fc4:	b140      	cbz	r0, 8020fd8 <lfs_file_tell+0x30>
    lfs_soff_t res = lfs_file_tell_(lfs, file);
 8020fc6:	4629      	mov	r1, r5
 8020fc8:	4620      	mov	r0, r4
 8020fca:	f7fb fbe6 	bl	801c79a <lfs_file_tell_>
 8020fce:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 8020fd0:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8020fd2:	6983      	ldr	r3, [r0, #24]
 8020fd4:	4798      	blx	r3
    return res;
 8020fd6:	e7ef      	b.n	8020fb8 <lfs_file_tell+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8020fd8:	4b03      	ldr	r3, [pc, #12]	@ (8020fe8 <lfs_file_tell+0x40>)
 8020fda:	4a04      	ldr	r2, [pc, #16]	@ (8020fec <lfs_file_tell+0x44>)
 8020fdc:	f641 0138 	movw	r1, #6200	@ 0x1838
 8020fe0:	4803      	ldr	r0, [pc, #12]	@ (8020ff0 <lfs_file_tell+0x48>)
 8020fe2:	f00a fb13 	bl	802b60c <__assert_func>
 8020fe6:	bf00      	nop
 8020fe8:	0803ad4c 	.word	0x0803ad4c
 8020fec:	0803d4ac 	.word	0x0803d4ac
 8020ff0:	0803a198 	.word	0x0803a198

08020ff4 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 8020ff4:	b570      	push	{r4, r5, r6, lr}
 8020ff6:	4604      	mov	r4, r0
 8020ff8:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 8020ffa:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020ffc:	6943      	ldr	r3, [r0, #20]
 8020ffe:	4798      	blx	r3
    if (err) {
 8021000:	4606      	mov	r6, r0
 8021002:	b108      	cbz	r0, 8021008 <lfs_mkdir+0x14>
    err = lfs_mkdir_(lfs, path);

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8021004:	4630      	mov	r0, r6
 8021006:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mkdir_(lfs, path);
 8021008:	4629      	mov	r1, r5
 802100a:	4620      	mov	r0, r4
 802100c:	f7ff fd22 	bl	8020a54 <lfs_mkdir_>
 8021010:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 8021012:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8021014:	6983      	ldr	r3, [r0, #24]
 8021016:	4798      	blx	r3
    return err;
 8021018:	e7f4      	b.n	8021004 <lfs_mkdir+0x10>
	...

0802101c <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 802101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802101e:	4604      	mov	r4, r0
 8021020:	460f      	mov	r7, r1
 8021022:	4615      	mov	r5, r2
    int err = LFS_LOCK(lfs->cfg);
 8021024:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8021026:	6943      	ldr	r3, [r0, #20]
 8021028:	4798      	blx	r3
    if (err) {
 802102a:	4606      	mov	r6, r0
 802102c:	b108      	cbz	r0, 8021032 <lfs_dir_open+0x16>
    err = lfs_dir_open_(lfs, dir, path);

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 802102e:	4630      	mov	r0, r6
 8021030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8021032:	4639      	mov	r1, r7
 8021034:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8021036:	f7fb fafc 	bl	801c632 <lfs_mlist_isopen>
 802103a:	b948      	cbnz	r0, 8021050 <lfs_dir_open+0x34>
    err = lfs_dir_open_(lfs, dir, path);
 802103c:	462a      	mov	r2, r5
 802103e:	4639      	mov	r1, r7
 8021040:	4620      	mov	r0, r4
 8021042:	f7ff fa2d 	bl	80204a0 <lfs_dir_open_>
 8021046:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 8021048:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 802104a:	6983      	ldr	r3, [r0, #24]
 802104c:	4798      	blx	r3
    return err;
 802104e:	e7ee      	b.n	802102e <lfs_dir_open+0x12>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8021050:	4b03      	ldr	r3, [pc, #12]	@ (8021060 <lfs_dir_open+0x44>)
 8021052:	4a04      	ldr	r2, [pc, #16]	@ (8021064 <lfs_dir_open+0x48>)
 8021054:	f641 0174 	movw	r1, #6260	@ 0x1874
 8021058:	4803      	ldr	r0, [pc, #12]	@ (8021068 <lfs_dir_open+0x4c>)
 802105a:	f00a fad7 	bl	802b60c <__assert_func>
 802105e:	bf00      	nop
 8021060:	0803ad84 	.word	0x0803ad84
 8021064:	0803d49c 	.word	0x0803d49c
 8021068:	0803a198 	.word	0x0803a198

0802106c <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 802106c:	b570      	push	{r4, r5, r6, lr}
 802106e:	4604      	mov	r4, r0
 8021070:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 8021072:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8021074:	6943      	ldr	r3, [r0, #20]
 8021076:	4798      	blx	r3
    if (err) {
 8021078:	4606      	mov	r6, r0
 802107a:	b108      	cbz	r0, 8021080 <lfs_dir_close+0x14>
    err = lfs_dir_close_(lfs, dir);

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 802107c:	4630      	mov	r0, r6
 802107e:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_dir_close_(lfs, dir);
 8021080:	4629      	mov	r1, r5
 8021082:	4620      	mov	r0, r4
 8021084:	f7fb fb84 	bl	801c790 <lfs_dir_close_>
 8021088:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 802108a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 802108c:	6983      	ldr	r3, [r0, #24]
 802108e:	4798      	blx	r3
    return err;
 8021090:	e7f4      	b.n	802107c <lfs_dir_close+0x10>

08021092 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8021092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021094:	4604      	mov	r4, r0
 8021096:	460d      	mov	r5, r1
 8021098:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 802109a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 802109c:	6943      	ldr	r3, [r0, #20]
 802109e:	4798      	blx	r3
    if (err) {
 80210a0:	4607      	mov	r7, r0
 80210a2:	b108      	cbz	r0, 80210a8 <lfs_dir_read+0x16>
    err = lfs_dir_read_(lfs, dir, info);

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 80210a4:	4638      	mov	r0, r7
 80210a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_dir_read_(lfs, dir, info);
 80210a8:	4632      	mov	r2, r6
 80210aa:	4629      	mov	r1, r5
 80210ac:	4620      	mov	r0, r4
 80210ae:	f7ff fde5 	bl	8020c7c <lfs_dir_read_>
 80210b2:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 80210b4:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80210b6:	6983      	ldr	r3, [r0, #24]
 80210b8:	4798      	blx	r3
    return err;
 80210ba:	e7f3      	b.n	80210a4 <lfs_dir_read+0x12>

080210bc <lfs_crc>:
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
 80210bc:	f04f 0c00 	mov.w	ip, #0
 80210c0:	4594      	cmp	ip, r2
 80210c2:	d218      	bcs.n	80210f6 <lfs_crc+0x3a>
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 80210c4:	b530      	push	{r4, r5, lr}
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 80210c6:	f811 300c 	ldrb.w	r3, [r1, ip]
 80210ca:	ea83 0e00 	eor.w	lr, r3, r0
 80210ce:	f00e 0e0f 	and.w	lr, lr, #15
 80210d2:	4c09      	ldr	r4, [pc, #36]	@ (80210f8 <lfs_crc+0x3c>)
 80210d4:	f854 502e 	ldr.w	r5, [r4, lr, lsl #2]
 80210d8:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 80210dc:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 80210e0:	f003 030f 	and.w	r3, r3, #15
 80210e4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80210e8:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
 80210ec:	f10c 0c01 	add.w	ip, ip, #1
 80210f0:	4594      	cmp	ip, r2
 80210f2:	d3e8      	bcc.n	80210c6 <lfs_crc+0xa>
    }

    return crc;
}
 80210f4:	bd30      	pop	{r4, r5, pc}
 80210f6:	4770      	bx	lr
 80210f8:	0803d610 	.word	0x0803d610

080210fc <mg_base64_decode_single>:
    return c == 62 ? '+' : '/';
  }
}

static int mg_base64_decode_single(int c) {
  if (c >= 'A' && c <= 'Z') {
 80210fc:	285a      	cmp	r0, #90	@ 0x5a
 80210fe:	dc24      	bgt.n	802114a <mg_base64_decode_single+0x4e>
 8021100:	282b      	cmp	r0, #43	@ 0x2b
 8021102:	db2e      	blt.n	8021162 <mg_base64_decode_single+0x66>
 8021104:	f1a0 032b 	sub.w	r3, r0, #43	@ 0x2b
 8021108:	2b2f      	cmp	r3, #47	@ 0x2f
 802110a:	d81b      	bhi.n	8021144 <mg_base64_decode_single+0x48>
 802110c:	e8df f003 	tbb	[pc, r3]
 8021110:	1a1a1a18 	.word	0x1a1a1a18
 8021114:	2525252c 	.word	0x2525252c
 8021118:	25252525 	.word	0x25252525
 802111c:	1a252525 	.word	0x1a252525
 8021120:	1a271a1a 	.word	0x1a271a1a
 8021124:	23231a1a 	.word	0x23231a1a
 8021128:	23232323 	.word	0x23232323
 802112c:	23232323 	.word	0x23232323
 8021130:	23232323 	.word	0x23232323
 8021134:	23232323 	.word	0x23232323
 8021138:	23232323 	.word	0x23232323
 802113c:	23232323 	.word	0x23232323
  } else if (c == '+') {
    return 62;
  } else if (c == '/') {
    return 63;
  } else if (c == '=') {
    return 64;
 8021140:	203e      	movs	r0, #62	@ 0x3e
 8021142:	4770      	bx	lr
  } else {
    return -1;
 8021144:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021148:	4770      	bx	lr
 802114a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 802114e:	2b19      	cmp	r3, #25
 8021150:	d80c      	bhi.n	802116c <mg_base64_decode_single+0x70>
    return c + 26 - 'a';
 8021152:	3847      	subs	r0, #71	@ 0x47
 8021154:	4770      	bx	lr
    return c - 'A';
 8021156:	3841      	subs	r0, #65	@ 0x41
 8021158:	4770      	bx	lr
    return c + 52 - '0';
 802115a:	3004      	adds	r0, #4
 802115c:	4770      	bx	lr
    return 64;
 802115e:	2040      	movs	r0, #64	@ 0x40
 8021160:	4770      	bx	lr
    return -1;
 8021162:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021166:	4770      	bx	lr
    return 63;
 8021168:	203f      	movs	r0, #63	@ 0x3f
 802116a:	4770      	bx	lr
    return -1;
 802116c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  }
}
 8021170:	4770      	bx	lr

08021172 <is_digit>:




static bool is_digit(int c) {
  return c >= '0' && c <= '9';
 8021172:	3830      	subs	r0, #48	@ 0x30
}
 8021174:	2809      	cmp	r0, #9
 8021176:	bf8c      	ite	hi
 8021178:	2000      	movhi	r0, #0
 802117a:	2001      	movls	r0, #1
 802117c:	4770      	bx	lr
	...

08021180 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8021180:	4684      	mov	ip, r0
  int n = 0;
  buf[n++] = 'e';
 8021182:	2365      	movs	r3, #101	@ 0x65
 8021184:	7003      	strb	r3, [r0, #0]
  buf[n++] = (char) sign;
 8021186:	7042      	strb	r2, [r0, #1]
  if (e > 400) return 0;
 8021188:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 802118c:	dc2c      	bgt.n	80211e8 <addexp+0x68>
  if (e < 10) buf[n++] = '0';
 802118e:	2909      	cmp	r1, #9
 8021190:	dc18      	bgt.n	80211c4 <addexp+0x44>
 8021192:	2330      	movs	r3, #48	@ 0x30
 8021194:	7083      	strb	r3, [r0, #2]
 8021196:	2303      	movs	r3, #3
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8021198:	2909      	cmp	r1, #9
 802119a:	dd0e      	ble.n	80211ba <addexp+0x3a>
 802119c:	4813      	ldr	r0, [pc, #76]	@ (80211ec <addexp+0x6c>)
 802119e:	fb80 2001 	smull	r2, r0, r0, r1
 80211a2:	17ca      	asrs	r2, r1, #31
 80211a4:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 80211a8:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 80211ac:	f80c 0003 	strb.w	r0, [ip, r3]
 80211b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80211b4:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
 80211b8:	3301      	adds	r3, #1
  buf[n++] = (char) (e + '0');
 80211ba:	1c58      	adds	r0, r3, #1
 80211bc:	3130      	adds	r1, #48	@ 0x30
 80211be:	f80c 1003 	strb.w	r1, [ip, r3]
  return n;
 80211c2:	4770      	bx	lr
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 80211c4:	2963      	cmp	r1, #99	@ 0x63
 80211c6:	dd0d      	ble.n	80211e4 <addexp+0x64>
 80211c8:	4a09      	ldr	r2, [pc, #36]	@ (80211f0 <addexp+0x70>)
 80211ca:	fb82 3201 	smull	r3, r2, r2, r1
 80211ce:	17cb      	asrs	r3, r1, #31
 80211d0:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 80211d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80211d8:	7082      	strb	r2, [r0, #2]
 80211da:	2264      	movs	r2, #100	@ 0x64
 80211dc:	fb02 1113 	mls	r1, r2, r3, r1
 80211e0:	2303      	movs	r3, #3
 80211e2:	e7d9      	b.n	8021198 <addexp+0x18>
 80211e4:	2302      	movs	r3, #2
 80211e6:	e7d7      	b.n	8021198 <addexp+0x18>
  if (e > 400) return 0;
 80211e8:	2000      	movs	r0, #0
}
 80211ea:	4770      	bx	lr
 80211ec:	66666667 	.word	0x66666667
 80211f0:	51eb851f 	.word	0x51eb851f

080211f4 <xisinf>:

static int xisinf(double x) {
 80211f4:	ec53 2b10 	vmov	r2, r3, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 80211f8:	4611      	mov	r1, r2
 80211fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80211fe:	4a05      	ldr	r2, [pc, #20]	@ (8021214 <xisinf+0x20>)
 8021200:	4293      	cmp	r3, r2
 8021202:	d001      	beq.n	8021208 <xisinf+0x14>
 8021204:	2000      	movs	r0, #0
 8021206:	4770      	bx	lr
 8021208:	b109      	cbz	r1, 802120e <xisinf+0x1a>
 802120a:	2000      	movs	r0, #0
 802120c:	4770      	bx	lr
 802120e:	2001      	movs	r0, #1
         ((unsigned) ieee754.u == 0);
}
 8021210:	4770      	bx	lr
 8021212:	bf00      	nop
 8021214:	7ff00000 	.word	0x7ff00000

08021218 <xisnan>:

static int xisnan(double x) {
 8021218:	ec51 0b10 	vmov	r0, r1, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 802121c:	4602      	mov	r2, r0
 802121e:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 8021222:	2a00      	cmp	r2, #0
 8021224:	bf18      	it	ne
 8021226:	3001      	addne	r0, #1
             ((unsigned) ieee754.u != 0) >
         0x7ff00000;
}
 8021228:	4b02      	ldr	r3, [pc, #8]	@ (8021234 <xisnan+0x1c>)
 802122a:	4298      	cmp	r0, r3
 802122c:	bf94      	ite	ls
 802122e:	2000      	movls	r0, #0
 8021230:	2001      	movhi	r0, #1
 8021232:	4770      	bx	lr
 8021234:	7ff00000 	.word	0x7ff00000

08021238 <mg_lld>:
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
  buf[n] = '\0';
  return mg_snprintf(dst, dstlen, "%s", buf);
}

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8021238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802123c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8021240:	f89d 101c 	ldrb.w	r1, [sp, #28]
  const char *letters = "0123456789abcdef";
  uint64_t v = (uint64_t) val;
 8021244:	4694      	mov	ip, r2
 8021246:	469e      	mov	lr, r3
  size_t s = 0, n, i;
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8021248:	b15c      	cbz	r4, 8021262 <mg_lld+0x2a>
 802124a:	2b00      	cmp	r3, #0
 802124c:	db01      	blt.n	8021252 <mg_lld+0x1a>
  size_t s = 0, n, i;
 802124e:	2500      	movs	r5, #0
 8021250:	e008      	b.n	8021264 <mg_lld+0x2c>
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8021252:	242d      	movs	r4, #45	@ 0x2d
 8021254:	7004      	strb	r4, [r0, #0]
 8021256:	f1d2 0c00 	rsbs	ip, r2, #0
 802125a:	eb63 0e43 	sbc.w	lr, r3, r3, lsl #1
 802125e:	2501      	movs	r5, #1
 8021260:	e000      	b.n	8021264 <mg_lld+0x2c>
  size_t s = 0, n, i;
 8021262:	2500      	movs	r5, #0
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8021264:	b909      	cbnz	r1, 802126a <mg_lld+0x32>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 8021266:	2400      	movs	r4, #0
 8021268:	e02f      	b.n	80212ca <mg_lld+0x92>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 802126a:	2400      	movs	r4, #0
 802126c:	ea5c 010e 	orrs.w	r1, ip, lr
 8021270:	d05a      	beq.n	8021328 <mg_lld+0xf0>
 8021272:	f00c 060f 	and.w	r6, ip, #15
 8021276:	1929      	adds	r1, r5, r4
 8021278:	4f38      	ldr	r7, [pc, #224]	@ (802135c <mg_lld+0x124>)
 802127a:	5dbe      	ldrb	r6, [r7, r6]
 802127c:	5446      	strb	r6, [r0, r1]
 802127e:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8021282:	ea4c 7c0e 	orr.w	ip, ip, lr, lsl #28
 8021286:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 802128a:	3401      	adds	r4, #1
 802128c:	e7ee      	b.n	802126c <mg_lld+0x34>
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 802128e:	2601      	movs	r6, #1
 8021290:	e022      	b.n	80212d8 <mg_lld+0xa0>
 8021292:	4421      	add	r1, r4
 8021294:	4f32      	ldr	r7, [pc, #200]	@ (8021360 <mg_lld+0x128>)
 8021296:	fba7 4801 	umull	r4, r8, r7, r1
 802129a:	f028 0403 	bic.w	r4, r8, #3
 802129e:	eb04 0498 	add.w	r4, r4, r8, lsr #2
 80212a2:	1b09      	subs	r1, r1, r4
 80212a4:	ebbc 0101 	subs.w	r1, ip, r1
 80212a8:	f16e 0e00 	sbc.w	lr, lr, #0
 80212ac:	f04f 34cc 	mov.w	r4, #3435973836	@ 0xcccccccc
 80212b0:	fb01 f404 	mul.w	r4, r1, r4
 80212b4:	fb07 440e 	mla	r4, r7, lr, r4
 80212b8:	fba1 1707 	umull	r1, r7, r1, r7
 80212bc:	443c      	add	r4, r7
 80212be:	0849      	lsrs	r1, r1, #1
 80212c0:	ea41 7cc4 	orr.w	ip, r1, r4, lsl #31
 80212c4:	ea4f 0e54 	mov.w	lr, r4, lsr #1
 80212c8:	4634      	mov	r4, r6
 80212ca:	ea5c 010e 	orrs.w	r1, ip, lr
 80212ce:	d02b      	beq.n	8021328 <mg_lld+0xf0>
 80212d0:	2600      	movs	r6, #0
 80212d2:	eb1c 010e 	adds.w	r1, ip, lr
 80212d6:	d2da      	bcs.n	802128e <mg_lld+0x56>
 80212d8:	4431      	add	r1, r6
 80212da:	4f21      	ldr	r7, [pc, #132]	@ (8021360 <mg_lld+0x128>)
 80212dc:	fba7 6801 	umull	r6, r8, r7, r1
 80212e0:	f028 0603 	bic.w	r6, r8, #3
 80212e4:	eb06 0698 	add.w	r6, r6, r8, lsr #2
 80212e8:	1b89      	subs	r1, r1, r6
 80212ea:	ebbc 0101 	subs.w	r1, ip, r1
 80212ee:	f16e 0800 	sbc.w	r8, lr, #0
 80212f2:	f04f 36cc 	mov.w	r6, #3435973836	@ 0xcccccccc
 80212f6:	fb01 f606 	mul.w	r6, r1, r6
 80212fa:	fb07 6608 	mla	r6, r7, r8, r6
 80212fe:	fba1 1707 	umull	r1, r7, r1, r7
 8021302:	443e      	add	r6, r7
 8021304:	0849      	lsrs	r1, r1, #1
 8021306:	ea41 71c6 	orr.w	r1, r1, r6, lsl #31
 802130a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 802130e:	ebac 0141 	sub.w	r1, ip, r1, lsl #1
 8021312:	1c66      	adds	r6, r4, #1
 8021314:	442c      	add	r4, r5
 8021316:	4f11      	ldr	r7, [pc, #68]	@ (802135c <mg_lld+0x124>)
 8021318:	5c79      	ldrb	r1, [r7, r1]
 802131a:	5501      	strb	r1, [r0, r4]
 802131c:	2400      	movs	r4, #0
 802131e:	eb1c 010e 	adds.w	r1, ip, lr
 8021322:	d3b6      	bcc.n	8021292 <mg_lld+0x5a>
 8021324:	2401      	movs	r4, #1
 8021326:	e7b4      	b.n	8021292 <mg_lld+0x5a>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 8021328:	2600      	movs	r6, #0
 802132a:	e00c      	b.n	8021346 <mg_lld+0x10e>
    char t = buf[s + i];
 802132c:	19af      	adds	r7, r5, r6
 802132e:	f810 c007 	ldrb.w	ip, [r0, r7]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 8021332:	1929      	adds	r1, r5, r4
 8021334:	1b89      	subs	r1, r1, r6
 8021336:	3901      	subs	r1, #1
 8021338:	f810 e001 	ldrb.w	lr, [r0, r1]
 802133c:	f800 e007 	strb.w	lr, [r0, r7]
 8021340:	f800 c001 	strb.w	ip, [r0, r1]
  for (i = 0; i < n / 2; i++) {
 8021344:	3601      	adds	r6, #1
 8021346:	ebb6 0f54 	cmp.w	r6, r4, lsr #1
 802134a:	d3ef      	bcc.n	802132c <mg_lld+0xf4>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 802134c:	4313      	orrs	r3, r2
 802134e:	d102      	bne.n	8021356 <mg_lld+0x11e>
 8021350:	2330      	movs	r3, #48	@ 0x30
 8021352:	5503      	strb	r3, [r0, r4]
 8021354:	3401      	adds	r4, #1
  return n + s;
}
 8021356:	1928      	adds	r0, r5, r4
 8021358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802135c:	0803adbc 	.word	0x0803adbc
 8021360:	cccccccd 	.word	0xcccccccd

08021364 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8021364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021368:	4680      	mov	r8, r0
 802136a:	460f      	mov	r7, r1
 802136c:	4616      	mov	r6, r2
 802136e:	461d      	mov	r5, r3
  size_t i = 0;
 8021370:	2400      	movs	r4, #0
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 8021372:	e002      	b.n	802137a <scpy+0x16>
 8021374:	3401      	adds	r4, #1
 8021376:	4639      	mov	r1, r7
 8021378:	47c0      	blx	r8
 802137a:	42ac      	cmp	r4, r5
 802137c:	d202      	bcs.n	8021384 <scpy+0x20>
 802137e:	5d30      	ldrb	r0, [r6, r4]
 8021380:	2800      	cmp	r0, #0
 8021382:	d1f7      	bne.n	8021374 <scpy+0x10>
  return i;
}
 8021384:	4620      	mov	r0, r4
 8021386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802138a <p_stat>:
#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
  (void) path, (void) size, (void) mtime;
  return 0;
}
 802138a:	2000      	movs	r0, #0
 802138c:	4770      	bx	lr

0802138e <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
  (void) path, (void) fn, (void) userdata;
}
 802138e:	4770      	bx	lr

08021390 <p_open>:
static void *p_open(const char *path, int flags) {
  (void) path, (void) flags;
  return NULL;
}
 8021390:	2000      	movs	r0, #0
 8021392:	4770      	bx	lr

08021394 <p_close>:
static void p_close(void *fp) {
  (void) fp;
}
 8021394:	4770      	bx	lr

08021396 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 8021396:	2000      	movs	r0, #0
 8021398:	4770      	bx	lr

0802139a <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 802139a:	2000      	movs	r0, #0
 802139c:	4770      	bx	lr

0802139e <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
  (void) fd, (void) offset;
  return (size_t) ~0;
}
 802139e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80213a2:	4770      	bx	lr

080213a4 <p_rename>:
static bool p_rename(const char *from, const char *to) {
  (void) from, (void) to;
  return false;
}
 80213a4:	2000      	movs	r0, #0
 80213a6:	4770      	bx	lr

080213a8 <p_remove>:
static bool p_remove(const char *path) {
  (void) path;
  return false;
}
 80213a8:	2000      	movs	r0, #0
 80213aa:	4770      	bx	lr

080213ac <p_mkdir>:
static bool p_mkdir(const char *path) {
  (void) path;
  return false;
}
 80213ac:	2000      	movs	r0, #0
 80213ae:	4770      	bx	lr

080213b0 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 80213b0:	b530      	push	{r4, r5, lr}
 80213b2:	4686      	mov	lr, r0
  int diff = 0;
  if (len > 0) do {
 80213b4:	4614      	mov	r4, r2
 80213b6:	b94a      	cbnz	r2, 80213cc <mg_ncasecmp+0x1c>
  int diff = 0;
 80213b8:	2000      	movs	r0, #0
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
      diff = c - d;
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
  return diff;
}
 80213ba:	bd30      	pop	{r4, r5, pc}
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 80213bc:	f10c 0020 	add.w	r0, ip, #32
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 80213c0:	1a18      	subs	r0, r3, r0
 80213c2:	d1fa      	bne.n	80213ba <mg_ncasecmp+0xa>
 80213c4:	2a00      	cmp	r2, #0
 80213c6:	d0f8      	beq.n	80213ba <mg_ncasecmp+0xa>
 80213c8:	3c01      	subs	r4, #1
 80213ca:	d0f6      	beq.n	80213ba <mg_ncasecmp+0xa>
      int c = *s1++, d = *s2++;
 80213cc:	f89e 2000 	ldrb.w	r2, [lr]
 80213d0:	f10e 0e01 	add.w	lr, lr, #1
 80213d4:	4613      	mov	r3, r2
 80213d6:	f891 c000 	ldrb.w	ip, [r1]
 80213da:	3101      	adds	r1, #1
 80213dc:	4660      	mov	r0, ip
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 80213de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80213e2:	2d19      	cmp	r5, #25
 80213e4:	d801      	bhi.n	80213ea <mg_ncasecmp+0x3a>
 80213e6:	f102 0320 	add.w	r3, r2, #32
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 80213ea:	f1ac 0541 	sub.w	r5, ip, #65	@ 0x41
 80213ee:	2d19      	cmp	r5, #25
 80213f0:	d8e6      	bhi.n	80213c0 <mg_ncasecmp+0x10>
 80213f2:	e7e3      	b.n	80213bc <mg_ncasecmp+0xc>

080213f4 <isx>:
  }
  return len;
}

static bool isx(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80213f4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80213f8:	2b09      	cmp	r3, #9
 80213fa:	d908      	bls.n	802140e <isx+0x1a>
 80213fc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8021400:	2b05      	cmp	r3, #5
 8021402:	d906      	bls.n	8021412 <isx+0x1e>
         (c >= 'A' && c <= 'F');
 8021404:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8021406:	2805      	cmp	r0, #5
 8021408:	d805      	bhi.n	8021416 <isx+0x22>
 802140a:	2001      	movs	r0, #1
 802140c:	4770      	bx	lr
 802140e:	2001      	movs	r0, #1
 8021410:	4770      	bx	lr
 8021412:	2001      	movs	r0, #1
 8021414:	4770      	bx	lr
 8021416:	2000      	movs	r0, #0
}
 8021418:	4770      	bx	lr

0802141a <isok>:
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
  return i >= src_len && j < dst_len ? (int) j : -1;
}

static bool isok(uint8_t c) {
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 802141a:	280a      	cmp	r0, #10
 802141c:	d007      	beq.n	802142e <isok+0x14>
 802141e:	280d      	cmp	r0, #13
 8021420:	d007      	beq.n	8021432 <isok+0x18>
 8021422:	2809      	cmp	r0, #9
 8021424:	d007      	beq.n	8021436 <isok+0x1c>
 8021426:	281f      	cmp	r0, #31
 8021428:	d907      	bls.n	802143a <isok+0x20>
 802142a:	2001      	movs	r0, #1
 802142c:	4770      	bx	lr
 802142e:	2001      	movs	r0, #1
 8021430:	4770      	bx	lr
 8021432:	2001      	movs	r0, #1
 8021434:	4770      	bx	lr
 8021436:	2001      	movs	r0, #1
 8021438:	4770      	bx	lr
 802143a:	2000      	movs	r0, #0
}
 802143c:	4770      	bx	lr

0802143e <vcb>:
  return NULL;
}

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
  return (c & 0xc0) == 0x80;
 802143e:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
}
 8021442:	2880      	cmp	r0, #128	@ 0x80
 8021444:	bf14      	ite	ne
 8021446:	2000      	movne	r0, #0
 8021448:	2001      	moveq	r0, #1
 802144a:	4770      	bx	lr

0802144c <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 802144c:	b570      	push	{r4, r5, r6, lr}
  const unsigned char *u = (unsigned char *) s, c = *u;
 802144e:	7805      	ldrb	r5, [r0, #0]
  long n = (long) (end - s);
 8021450:	1a0e      	subs	r6, r1, r0
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 8021452:	f1a5 0321 	sub.w	r3, r5, #33	@ 0x21
 8021456:	b2db      	uxtb	r3, r3
 8021458:	2b5c      	cmp	r3, #92	@ 0x5c
 802145a:	d936      	bls.n	80214ca <clen+0x7e>
 802145c:	4604      	mov	r4, r0
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 802145e:	f005 03e0 	and.w	r3, r5, #224	@ 0xe0
 8021462:	2bc0      	cmp	r3, #192	@ 0xc0
 8021464:	d009      	beq.n	802147a <clen+0x2e>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 8021466:	f005 03f0 	and.w	r3, r5, #240	@ 0xf0
 802146a:	2be0      	cmp	r3, #224	@ 0xe0
 802146c:	d00e      	beq.n	802148c <clen+0x40>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 802146e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8021472:	2df0      	cmp	r5, #240	@ 0xf0
 8021474:	d018      	beq.n	80214a8 <clen+0x5c>
    return 4;
  return 0;
 8021476:	2000      	movs	r0, #0
}
 8021478:	bd70      	pop	{r4, r5, r6, pc}
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 802147a:	2e01      	cmp	r6, #1
 802147c:	ddf3      	ble.n	8021466 <clen+0x1a>
 802147e:	7840      	ldrb	r0, [r0, #1]
 8021480:	f7ff ffdd 	bl	802143e <vcb>
 8021484:	2800      	cmp	r0, #0
 8021486:	d0ee      	beq.n	8021466 <clen+0x1a>
 8021488:	2002      	movs	r0, #2
 802148a:	e7f5      	b.n	8021478 <clen+0x2c>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 802148c:	2e02      	cmp	r6, #2
 802148e:	ddee      	ble.n	802146e <clen+0x22>
 8021490:	7860      	ldrb	r0, [r4, #1]
 8021492:	f7ff ffd4 	bl	802143e <vcb>
 8021496:	2800      	cmp	r0, #0
 8021498:	d0e9      	beq.n	802146e <clen+0x22>
 802149a:	78a0      	ldrb	r0, [r4, #2]
 802149c:	f7ff ffcf 	bl	802143e <vcb>
 80214a0:	2800      	cmp	r0, #0
 80214a2:	d0e4      	beq.n	802146e <clen+0x22>
 80214a4:	2003      	movs	r0, #3
 80214a6:	e7e7      	b.n	8021478 <clen+0x2c>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 80214a8:	2e03      	cmp	r6, #3
 80214aa:	dd10      	ble.n	80214ce <clen+0x82>
 80214ac:	7860      	ldrb	r0, [r4, #1]
 80214ae:	f7ff ffc6 	bl	802143e <vcb>
 80214b2:	b170      	cbz	r0, 80214d2 <clen+0x86>
 80214b4:	78a0      	ldrb	r0, [r4, #2]
 80214b6:	f7ff ffc2 	bl	802143e <vcb>
 80214ba:	b160      	cbz	r0, 80214d6 <clen+0x8a>
 80214bc:	78e0      	ldrb	r0, [r4, #3]
 80214be:	f7ff ffbe 	bl	802143e <vcb>
 80214c2:	2800      	cmp	r0, #0
 80214c4:	d0d8      	beq.n	8021478 <clen+0x2c>
    return 4;
 80214c6:	2004      	movs	r0, #4
 80214c8:	e7d6      	b.n	8021478 <clen+0x2c>
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 80214ca:	2001      	movs	r0, #1
 80214cc:	e7d4      	b.n	8021478 <clen+0x2c>
  return 0;
 80214ce:	2000      	movs	r0, #0
 80214d0:	e7d2      	b.n	8021478 <clen+0x2c>
 80214d2:	2000      	movs	r0, #0
 80214d4:	e7d0      	b.n	8021478 <clen+0x2c>
 80214d6:	2000      	movs	r0, #0
 80214d8:	e7ce      	b.n	8021478 <clen+0x2c>

080214da <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
  v->buf = (char *) s;
 80214da:	6010      	str	r0, [r2, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 80214dc:	e003      	b.n	80214e6 <skiptorn+0xc>
 80214de:	3001      	adds	r0, #1
 80214e0:	6853      	ldr	r3, [r2, #4]
 80214e2:	3301      	adds	r3, #1
 80214e4:	6053      	str	r3, [r2, #4]
 80214e6:	4288      	cmp	r0, r1
 80214e8:	d204      	bcs.n	80214f4 <skiptorn+0x1a>
 80214ea:	7803      	ldrb	r3, [r0, #0]
 80214ec:	2b0a      	cmp	r3, #10
 80214ee:	d001      	beq.n	80214f4 <skiptorn+0x1a>
 80214f0:	2b0d      	cmp	r3, #13
 80214f2:	d1f4      	bne.n	80214de <skiptorn+0x4>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 80214f4:	4288      	cmp	r0, r1
 80214f6:	d212      	bcs.n	802151e <skiptorn+0x44>
 80214f8:	7803      	ldrb	r3, [r0, #0]
 80214fa:	2b0d      	cmp	r3, #13
 80214fc:	d008      	beq.n	8021510 <skiptorn+0x36>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 80214fe:	2b0d      	cmp	r3, #13
 8021500:	d00b      	beq.n	802151a <skiptorn+0x40>
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8021502:	4288      	cmp	r0, r1
 8021504:	d20d      	bcs.n	8021522 <skiptorn+0x48>
 8021506:	f810 3b01 	ldrb.w	r3, [r0], #1
 802150a:	2b0a      	cmp	r3, #10
 802150c:	d10b      	bne.n	8021526 <skiptorn+0x4c>
  return s;
}
 802150e:	4770      	bx	lr
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8021510:	7842      	ldrb	r2, [r0, #1]
 8021512:	2a0a      	cmp	r2, #10
 8021514:	d0f3      	beq.n	80214fe <skiptorn+0x24>
 8021516:	2000      	movs	r0, #0
 8021518:	4770      	bx	lr
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 802151a:	3001      	adds	r0, #1
 802151c:	e7f1      	b.n	8021502 <skiptorn+0x28>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 802151e:	2000      	movs	r0, #0
 8021520:	4770      	bx	lr
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8021522:	2000      	movs	r0, #0
 8021524:	4770      	bx	lr
 8021526:	2000      	movs	r0, #0
 8021528:	e7f1      	b.n	802150e <skiptorn+0x34>

0802152a <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 802152a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802152e:	b084      	sub	sp, #16
 8021530:	4604      	mov	r4, r0
 8021532:	460d      	mov	r5, r1
 8021534:	4690      	mov	r8, r2
 8021536:	461f      	mov	r7, r3
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 8021538:	2600      	movs	r6, #0
 802153a:	e04d      	b.n	80215d8 <mg_http_parse_headers+0xae>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
    if (s >= end) return false;
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 802153c:	7863      	ldrb	r3, [r4, #1]
 802153e:	2b0a      	cmp	r3, #10
 8021540:	d158      	bne.n	80215f4 <mg_http_parse_headers+0xca>
      v.len--;  // Trim spaces
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
  }
  return true;
 8021542:	2001      	movs	r0, #1
 8021544:	e01e      	b.n	8021584 <mg_http_parse_headers+0x5a>
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 8021546:	4414      	add	r4, r2
 8021548:	9b01      	ldr	r3, [sp, #4]
 802154a:	4413      	add	r3, r2
 802154c:	9301      	str	r3, [sp, #4]
 802154e:	42ac      	cmp	r4, r5
 8021550:	d209      	bcs.n	8021566 <mg_http_parse_headers+0x3c>
 8021552:	7823      	ldrb	r3, [r4, #0]
 8021554:	2b3a      	cmp	r3, #58	@ 0x3a
 8021556:	d006      	beq.n	8021566 <mg_http_parse_headers+0x3c>
 8021558:	4629      	mov	r1, r5
 802155a:	4620      	mov	r0, r4
 802155c:	f7ff ff76 	bl	802144c <clen>
 8021560:	4602      	mov	r2, r0
 8021562:	2800      	cmp	r0, #0
 8021564:	d1ef      	bne.n	8021546 <mg_http_parse_headers+0x1c>
    if (k.len == 0) return false;                     // Empty name
 8021566:	9b01      	ldr	r3, [sp, #4]
 8021568:	b15b      	cbz	r3, 8021582 <mg_http_parse_headers+0x58>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 802156a:	42ac      	cmp	r4, r5
 802156c:	d209      	bcs.n	8021582 <mg_http_parse_headers+0x58>
 802156e:	4629      	mov	r1, r5
 8021570:	4620      	mov	r0, r4
 8021572:	f7ff ff6b 	bl	802144c <clen>
 8021576:	b120      	cbz	r0, 8021582 <mg_http_parse_headers+0x58>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 8021578:	4620      	mov	r0, r4
 802157a:	f810 3b01 	ldrb.w	r3, [r0], #1
 802157e:	2b3a      	cmp	r3, #58	@ 0x3a
 8021580:	d004      	beq.n	802158c <mg_http_parse_headers+0x62>
    if (s >= end) return false;
 8021582:	2000      	movs	r0, #0
}
 8021584:	b004      	add	sp, #16
 8021586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 802158a:	3001      	adds	r0, #1
 802158c:	42a8      	cmp	r0, r5
 802158e:	d204      	bcs.n	802159a <mg_http_parse_headers+0x70>
 8021590:	7803      	ldrb	r3, [r0, #0]
 8021592:	2b20      	cmp	r3, #32
 8021594:	d0f9      	beq.n	802158a <mg_http_parse_headers+0x60>
 8021596:	2b09      	cmp	r3, #9
 8021598:	d0f7      	beq.n	802158a <mg_http_parse_headers+0x60>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 802159a:	aa02      	add	r2, sp, #8
 802159c:	4629      	mov	r1, r5
 802159e:	f7ff ff9c 	bl	80214da <skiptorn>
 80215a2:	4604      	mov	r4, r0
 80215a4:	b908      	cbnz	r0, 80215aa <mg_http_parse_headers+0x80>
 80215a6:	e7ec      	b.n	8021582 <mg_http_parse_headers+0x58>
      v.len--;  // Trim spaces
 80215a8:	9003      	str	r0, [sp, #12]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 80215aa:	9803      	ldr	r0, [sp, #12]
 80215ac:	b130      	cbz	r0, 80215bc <mg_http_parse_headers+0x92>
 80215ae:	3801      	subs	r0, #1
 80215b0:	9b02      	ldr	r3, [sp, #8]
 80215b2:	5c1b      	ldrb	r3, [r3, r0]
 80215b4:	2b20      	cmp	r3, #32
 80215b6:	d0f7      	beq.n	80215a8 <mg_http_parse_headers+0x7e>
 80215b8:	2b09      	cmp	r3, #9
 80215ba:	d0f5      	beq.n	80215a8 <mg_http_parse_headers+0x7e>
    h[i].name = k, h[i].value = v;  // Success. Assign values
 80215bc:	eb08 1306 	add.w	r3, r8, r6, lsl #4
 80215c0:	466a      	mov	r2, sp
 80215c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80215c6:	e883 0003 	stmia.w	r3, {r0, r1}
 80215ca:	3308      	adds	r3, #8
 80215cc:	aa04      	add	r2, sp, #16
 80215ce:	e912 0003 	ldmdb	r2, {r0, r1}
 80215d2:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 80215d6:	3601      	adds	r6, #1
 80215d8:	42be      	cmp	r6, r7
 80215da:	d20d      	bcs.n	80215f8 <mg_http_parse_headers+0xce>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 80215dc:	2300      	movs	r3, #0
 80215de:	9300      	str	r3, [sp, #0]
 80215e0:	9301      	str	r3, [sp, #4]
 80215e2:	9302      	str	r3, [sp, #8]
 80215e4:	9303      	str	r3, [sp, #12]
    if (s >= end) return false;
 80215e6:	42ac      	cmp	r4, r5
 80215e8:	d2cb      	bcs.n	8021582 <mg_http_parse_headers+0x58>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 80215ea:	7823      	ldrb	r3, [r4, #0]
 80215ec:	2b0a      	cmp	r3, #10
 80215ee:	d0a8      	beq.n	8021542 <mg_http_parse_headers+0x18>
 80215f0:	2b0d      	cmp	r3, #13
 80215f2:	d0a3      	beq.n	802153c <mg_http_parse_headers+0x12>
    k.buf = (char *) s;
 80215f4:	9400      	str	r4, [sp, #0]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 80215f6:	e7aa      	b.n	802154e <mg_http_parse_headers+0x24>
  return true;
 80215f8:	2001      	movs	r0, #1
 80215fa:	e7c3      	b.n	8021584 <mg_http_parse_headers+0x5a>

080215fc <mg_http_status_code_str>:
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
  switch (status_code) {
 80215fc:	3864      	subs	r0, #100	@ 0x64
 80215fe:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8021602:	4298      	cmp	r0, r3
 8021604:	f200 8272 	bhi.w	8021aec <mg_http_status_code_str+0x4f0>
 8021608:	e8df f010 	tbh	[pc, r0, lsl #1]
 802160c:	027201f4 	.word	0x027201f4
 8021610:	027001f6 	.word	0x027001f6
 8021614:	02700270 	.word	0x02700270
 8021618:	02700270 	.word	0x02700270
 802161c:	02700270 	.word	0x02700270
 8021620:	02700270 	.word	0x02700270
 8021624:	02700270 	.word	0x02700270
 8021628:	02700270 	.word	0x02700270
 802162c:	02700270 	.word	0x02700270
 8021630:	02700270 	.word	0x02700270
 8021634:	02700270 	.word	0x02700270
 8021638:	02700270 	.word	0x02700270
 802163c:	02700270 	.word	0x02700270
 8021640:	02700270 	.word	0x02700270
 8021644:	02700270 	.word	0x02700270
 8021648:	02700270 	.word	0x02700270
 802164c:	02700270 	.word	0x02700270
 8021650:	02700270 	.word	0x02700270
 8021654:	02700270 	.word	0x02700270
 8021658:	02700270 	.word	0x02700270
 802165c:	02700270 	.word	0x02700270
 8021660:	02700270 	.word	0x02700270
 8021664:	02700270 	.word	0x02700270
 8021668:	02700270 	.word	0x02700270
 802166c:	02700270 	.word	0x02700270
 8021670:	02700270 	.word	0x02700270
 8021674:	02700270 	.word	0x02700270
 8021678:	02700270 	.word	0x02700270
 802167c:	02700270 	.word	0x02700270
 8021680:	02700270 	.word	0x02700270
 8021684:	02700270 	.word	0x02700270
 8021688:	02700270 	.word	0x02700270
 802168c:	02700270 	.word	0x02700270
 8021690:	02700270 	.word	0x02700270
 8021694:	02700270 	.word	0x02700270
 8021698:	02700270 	.word	0x02700270
 802169c:	02700270 	.word	0x02700270
 80216a0:	02700270 	.word	0x02700270
 80216a4:	02700270 	.word	0x02700270
 80216a8:	02700270 	.word	0x02700270
 80216ac:	02700270 	.word	0x02700270
 80216b0:	02700270 	.word	0x02700270
 80216b4:	02700270 	.word	0x02700270
 80216b8:	02700270 	.word	0x02700270
 80216bc:	02700270 	.word	0x02700270
 80216c0:	02700270 	.word	0x02700270
 80216c4:	02700270 	.word	0x02700270
 80216c8:	02700270 	.word	0x02700270
 80216cc:	02700270 	.word	0x02700270
 80216d0:	02700270 	.word	0x02700270
 80216d4:	01fa01f8 	.word	0x01fa01f8
 80216d8:	01fe01fc 	.word	0x01fe01fc
 80216dc:	02020200 	.word	0x02020200
 80216e0:	02060204 	.word	0x02060204
 80216e4:	02700208 	.word	0x02700208
 80216e8:	02700270 	.word	0x02700270
 80216ec:	02700270 	.word	0x02700270
 80216f0:	02700270 	.word	0x02700270
 80216f4:	02700270 	.word	0x02700270
 80216f8:	02700270 	.word	0x02700270
 80216fc:	02700270 	.word	0x02700270
 8021700:	02700270 	.word	0x02700270
 8021704:	02700270 	.word	0x02700270
 8021708:	0270020a 	.word	0x0270020a
 802170c:	02700270 	.word	0x02700270
 8021710:	02700270 	.word	0x02700270
 8021714:	02700270 	.word	0x02700270
 8021718:	02700270 	.word	0x02700270
 802171c:	02700270 	.word	0x02700270
 8021720:	02700270 	.word	0x02700270
 8021724:	02700270 	.word	0x02700270
 8021728:	02700270 	.word	0x02700270
 802172c:	02700270 	.word	0x02700270
 8021730:	02700270 	.word	0x02700270
 8021734:	02700270 	.word	0x02700270
 8021738:	02700270 	.word	0x02700270
 802173c:	02700270 	.word	0x02700270
 8021740:	02700270 	.word	0x02700270
 8021744:	02700270 	.word	0x02700270
 8021748:	02700270 	.word	0x02700270
 802174c:	02700270 	.word	0x02700270
 8021750:	02700270 	.word	0x02700270
 8021754:	02700270 	.word	0x02700270
 8021758:	02700270 	.word	0x02700270
 802175c:	02700270 	.word	0x02700270
 8021760:	02700270 	.word	0x02700270
 8021764:	02700270 	.word	0x02700270
 8021768:	02700270 	.word	0x02700270
 802176c:	02700270 	.word	0x02700270
 8021770:	02700270 	.word	0x02700270
 8021774:	02700270 	.word	0x02700270
 8021778:	02700270 	.word	0x02700270
 802177c:	02700270 	.word	0x02700270
 8021780:	02700270 	.word	0x02700270
 8021784:	02700270 	.word	0x02700270
 8021788:	02700270 	.word	0x02700270
 802178c:	02700270 	.word	0x02700270
 8021790:	02700270 	.word	0x02700270
 8021794:	02700270 	.word	0x02700270
 8021798:	02700270 	.word	0x02700270
 802179c:	020e020c 	.word	0x020e020c
 80217a0:	02120210 	.word	0x02120210
 80217a4:	02160214 	.word	0x02160214
 80217a8:	02180270 	.word	0x02180270
 80217ac:	0270021a 	.word	0x0270021a
 80217b0:	02700270 	.word	0x02700270
 80217b4:	02700270 	.word	0x02700270
 80217b8:	02700270 	.word	0x02700270
 80217bc:	02700270 	.word	0x02700270
 80217c0:	02700270 	.word	0x02700270
 80217c4:	02700270 	.word	0x02700270
 80217c8:	02700270 	.word	0x02700270
 80217cc:	02700270 	.word	0x02700270
 80217d0:	02700270 	.word	0x02700270
 80217d4:	02700270 	.word	0x02700270
 80217d8:	02700270 	.word	0x02700270
 80217dc:	02700270 	.word	0x02700270
 80217e0:	02700270 	.word	0x02700270
 80217e4:	02700270 	.word	0x02700270
 80217e8:	02700270 	.word	0x02700270
 80217ec:	02700270 	.word	0x02700270
 80217f0:	02700270 	.word	0x02700270
 80217f4:	02700270 	.word	0x02700270
 80217f8:	02700270 	.word	0x02700270
 80217fc:	02700270 	.word	0x02700270
 8021800:	02700270 	.word	0x02700270
 8021804:	02700270 	.word	0x02700270
 8021808:	02700270 	.word	0x02700270
 802180c:	02700270 	.word	0x02700270
 8021810:	02700270 	.word	0x02700270
 8021814:	02700270 	.word	0x02700270
 8021818:	02700270 	.word	0x02700270
 802181c:	02700270 	.word	0x02700270
 8021820:	02700270 	.word	0x02700270
 8021824:	02700270 	.word	0x02700270
 8021828:	02700270 	.word	0x02700270
 802182c:	02700270 	.word	0x02700270
 8021830:	02700270 	.word	0x02700270
 8021834:	02700270 	.word	0x02700270
 8021838:	02700270 	.word	0x02700270
 802183c:	02700270 	.word	0x02700270
 8021840:	02700270 	.word	0x02700270
 8021844:	02700270 	.word	0x02700270
 8021848:	02700270 	.word	0x02700270
 802184c:	02700270 	.word	0x02700270
 8021850:	02700270 	.word	0x02700270
 8021854:	02700270 	.word	0x02700270
 8021858:	02700270 	.word	0x02700270
 802185c:	02700270 	.word	0x02700270
 8021860:	02700270 	.word	0x02700270
 8021864:	021e021c 	.word	0x021e021c
 8021868:	02220220 	.word	0x02220220
 802186c:	02260224 	.word	0x02260224
 8021870:	022a0228 	.word	0x022a0228
 8021874:	022e022c 	.word	0x022e022c
 8021878:	02320230 	.word	0x02320230
 802187c:	02360234 	.word	0x02360234
 8021880:	023a0238 	.word	0x023a0238
 8021884:	023e023c 	.word	0x023e023c
 8021888:	02700240 	.word	0x02700240
 802188c:	02420270 	.word	0x02420270
 8021890:	02460244 	.word	0x02460244
 8021894:	02700248 	.word	0x02700248
 8021898:	0270024a 	.word	0x0270024a
 802189c:	024e024c 	.word	0x024e024c
 80218a0:	02500270 	.word	0x02500270
 80218a4:	02700270 	.word	0x02700270
 80218a8:	02700270 	.word	0x02700270
 80218ac:	02700270 	.word	0x02700270
 80218b0:	02700270 	.word	0x02700270
 80218b4:	02700270 	.word	0x02700270
 80218b8:	02700270 	.word	0x02700270
 80218bc:	02700252 	.word	0x02700252
 80218c0:	02700270 	.word	0x02700270
 80218c4:	02700270 	.word	0x02700270
 80218c8:	02540270 	.word	0x02540270
 80218cc:	02700270 	.word	0x02700270
 80218d0:	02700270 	.word	0x02700270
 80218d4:	02700270 	.word	0x02700270
 80218d8:	02700270 	.word	0x02700270
 80218dc:	02700270 	.word	0x02700270
 80218e0:	02700270 	.word	0x02700270
 80218e4:	02700270 	.word	0x02700270
 80218e8:	02700270 	.word	0x02700270
 80218ec:	02700270 	.word	0x02700270
 80218f0:	02700270 	.word	0x02700270
 80218f4:	02700270 	.word	0x02700270
 80218f8:	02700270 	.word	0x02700270
 80218fc:	02700270 	.word	0x02700270
 8021900:	02700270 	.word	0x02700270
 8021904:	02700270 	.word	0x02700270
 8021908:	02700270 	.word	0x02700270
 802190c:	02700270 	.word	0x02700270
 8021910:	02700270 	.word	0x02700270
 8021914:	02700270 	.word	0x02700270
 8021918:	02700270 	.word	0x02700270
 802191c:	02700270 	.word	0x02700270
 8021920:	02700270 	.word	0x02700270
 8021924:	02700270 	.word	0x02700270
 8021928:	02560270 	.word	0x02560270
 802192c:	025a0258 	.word	0x025a0258
 8021930:	025e025c 	.word	0x025e025c
 8021934:	02620260 	.word	0x02620260
 8021938:	02660264 	.word	0x02660264
 802193c:	02700268 	.word	0x02700268
 8021940:	026c026a 	.word	0x026c026a
 8021944:	02700270 	.word	0x02700270
 8021948:	02700270 	.word	0x02700270
 802194c:	02700270 	.word	0x02700270
 8021950:	02700270 	.word	0x02700270
 8021954:	02700270 	.word	0x02700270
 8021958:	02700270 	.word	0x02700270
 802195c:	02700270 	.word	0x02700270
 8021960:	02700270 	.word	0x02700270
 8021964:	02700270 	.word	0x02700270
 8021968:	02700270 	.word	0x02700270
 802196c:	02700270 	.word	0x02700270
 8021970:	02700270 	.word	0x02700270
 8021974:	02700270 	.word	0x02700270
 8021978:	02700270 	.word	0x02700270
 802197c:	02700270 	.word	0x02700270
 8021980:	02700270 	.word	0x02700270
 8021984:	02700270 	.word	0x02700270
 8021988:	02700270 	.word	0x02700270
 802198c:	02700270 	.word	0x02700270
 8021990:	02700270 	.word	0x02700270
 8021994:	02700270 	.word	0x02700270
 8021998:	02700270 	.word	0x02700270
 802199c:	02700270 	.word	0x02700270
 80219a0:	02700270 	.word	0x02700270
 80219a4:	02700270 	.word	0x02700270
 80219a8:	02700270 	.word	0x02700270
 80219ac:	02700270 	.word	0x02700270
 80219b0:	02700270 	.word	0x02700270
 80219b4:	02700270 	.word	0x02700270
 80219b8:	02700270 	.word	0x02700270
 80219bc:	02700270 	.word	0x02700270
 80219c0:	02700270 	.word	0x02700270
 80219c4:	02700270 	.word	0x02700270
 80219c8:	02700270 	.word	0x02700270
 80219cc:	02700270 	.word	0x02700270
 80219d0:	02700270 	.word	0x02700270
 80219d4:	02700270 	.word	0x02700270
 80219d8:	02700270 	.word	0x02700270
 80219dc:	02700270 	.word	0x02700270
 80219e0:	02700270 	.word	0x02700270
 80219e4:	02700270 	.word	0x02700270
 80219e8:	02700270 	.word	0x02700270
 80219ec:	02700270 	.word	0x02700270
 80219f0:	026e0270 	.word	0x026e0270
 80219f4:	483f      	ldr	r0, [pc, #252]	@ (8021af4 <mg_http_status_code_str+0x4f8>)
 80219f6:	4770      	bx	lr
    case 100: return "Continue";
    case 101: return "Switching Protocols";
    case 102: return "Processing";
 80219f8:	483f      	ldr	r0, [pc, #252]	@ (8021af8 <mg_http_status_code_str+0x4fc>)
 80219fa:	4770      	bx	lr
    case 200: return "OK";
 80219fc:	483f      	ldr	r0, [pc, #252]	@ (8021afc <mg_http_status_code_str+0x500>)
 80219fe:	4770      	bx	lr
    case 201: return "Created";
 8021a00:	483f      	ldr	r0, [pc, #252]	@ (8021b00 <mg_http_status_code_str+0x504>)
 8021a02:	4770      	bx	lr
    case 202: return "Accepted";
 8021a04:	483f      	ldr	r0, [pc, #252]	@ (8021b04 <mg_http_status_code_str+0x508>)
 8021a06:	4770      	bx	lr
    case 203: return "Non-authoritative Information";
 8021a08:	483f      	ldr	r0, [pc, #252]	@ (8021b08 <mg_http_status_code_str+0x50c>)
 8021a0a:	4770      	bx	lr
    case 204: return "No Content";
 8021a0c:	483f      	ldr	r0, [pc, #252]	@ (8021b0c <mg_http_status_code_str+0x510>)
 8021a0e:	4770      	bx	lr
    case 205: return "Reset Content";
 8021a10:	483f      	ldr	r0, [pc, #252]	@ (8021b10 <mg_http_status_code_str+0x514>)
 8021a12:	4770      	bx	lr
    case 206: return "Partial Content";
 8021a14:	483f      	ldr	r0, [pc, #252]	@ (8021b14 <mg_http_status_code_str+0x518>)
 8021a16:	4770      	bx	lr
    case 207: return "Multi-Status";
 8021a18:	483f      	ldr	r0, [pc, #252]	@ (8021b18 <mg_http_status_code_str+0x51c>)
 8021a1a:	4770      	bx	lr
    case 208: return "Already Reported";
 8021a1c:	483f      	ldr	r0, [pc, #252]	@ (8021b1c <mg_http_status_code_str+0x520>)
 8021a1e:	4770      	bx	lr
    case 226: return "IM Used";
 8021a20:	483f      	ldr	r0, [pc, #252]	@ (8021b20 <mg_http_status_code_str+0x524>)
 8021a22:	4770      	bx	lr
    case 300: return "Multiple Choices";
 8021a24:	483f      	ldr	r0, [pc, #252]	@ (8021b24 <mg_http_status_code_str+0x528>)
 8021a26:	4770      	bx	lr
    case 301: return "Moved Permanently";
 8021a28:	483f      	ldr	r0, [pc, #252]	@ (8021b28 <mg_http_status_code_str+0x52c>)
 8021a2a:	4770      	bx	lr
    case 302: return "Found";
 8021a2c:	483f      	ldr	r0, [pc, #252]	@ (8021b2c <mg_http_status_code_str+0x530>)
 8021a2e:	4770      	bx	lr
    case 303: return "See Other";
 8021a30:	483f      	ldr	r0, [pc, #252]	@ (8021b30 <mg_http_status_code_str+0x534>)
 8021a32:	4770      	bx	lr
    case 304: return "Not Modified";
 8021a34:	483f      	ldr	r0, [pc, #252]	@ (8021b34 <mg_http_status_code_str+0x538>)
 8021a36:	4770      	bx	lr
    case 305: return "Use Proxy";
 8021a38:	483f      	ldr	r0, [pc, #252]	@ (8021b38 <mg_http_status_code_str+0x53c>)
 8021a3a:	4770      	bx	lr
    case 307: return "Temporary Redirect";
 8021a3c:	483f      	ldr	r0, [pc, #252]	@ (8021b3c <mg_http_status_code_str+0x540>)
 8021a3e:	4770      	bx	lr
    case 308: return "Permanent Redirect";
 8021a40:	483f      	ldr	r0, [pc, #252]	@ (8021b40 <mg_http_status_code_str+0x544>)
 8021a42:	4770      	bx	lr
    case 400: return "Bad Request";
 8021a44:	483f      	ldr	r0, [pc, #252]	@ (8021b44 <mg_http_status_code_str+0x548>)
 8021a46:	4770      	bx	lr
    case 401: return "Unauthorized";
 8021a48:	483f      	ldr	r0, [pc, #252]	@ (8021b48 <mg_http_status_code_str+0x54c>)
 8021a4a:	4770      	bx	lr
    case 402: return "Payment Required";
 8021a4c:	483f      	ldr	r0, [pc, #252]	@ (8021b4c <mg_http_status_code_str+0x550>)
 8021a4e:	4770      	bx	lr
    case 403: return "Forbidden";
 8021a50:	483f      	ldr	r0, [pc, #252]	@ (8021b50 <mg_http_status_code_str+0x554>)
 8021a52:	4770      	bx	lr
    case 404: return "Not Found";
 8021a54:	483f      	ldr	r0, [pc, #252]	@ (8021b54 <mg_http_status_code_str+0x558>)
 8021a56:	4770      	bx	lr
    case 405: return "Method Not Allowed";
 8021a58:	483f      	ldr	r0, [pc, #252]	@ (8021b58 <mg_http_status_code_str+0x55c>)
 8021a5a:	4770      	bx	lr
    case 406: return "Not Acceptable";
 8021a5c:	483f      	ldr	r0, [pc, #252]	@ (8021b5c <mg_http_status_code_str+0x560>)
 8021a5e:	4770      	bx	lr
    case 407: return "Proxy Authentication Required";
 8021a60:	483f      	ldr	r0, [pc, #252]	@ (8021b60 <mg_http_status_code_str+0x564>)
 8021a62:	4770      	bx	lr
    case 408: return "Request Timeout";
 8021a64:	483f      	ldr	r0, [pc, #252]	@ (8021b64 <mg_http_status_code_str+0x568>)
 8021a66:	4770      	bx	lr
    case 409: return "Conflict";
 8021a68:	483f      	ldr	r0, [pc, #252]	@ (8021b68 <mg_http_status_code_str+0x56c>)
 8021a6a:	4770      	bx	lr
    case 410: return "Gone";
 8021a6c:	483f      	ldr	r0, [pc, #252]	@ (8021b6c <mg_http_status_code_str+0x570>)
 8021a6e:	4770      	bx	lr
    case 411: return "Length Required";
 8021a70:	483f      	ldr	r0, [pc, #252]	@ (8021b70 <mg_http_status_code_str+0x574>)
 8021a72:	4770      	bx	lr
    case 412: return "Precondition Failed";
 8021a74:	483f      	ldr	r0, [pc, #252]	@ (8021b74 <mg_http_status_code_str+0x578>)
 8021a76:	4770      	bx	lr
    case 413: return "Payload Too Large";
 8021a78:	483f      	ldr	r0, [pc, #252]	@ (8021b78 <mg_http_status_code_str+0x57c>)
 8021a7a:	4770      	bx	lr
    case 414: return "Request-URI Too Long";
 8021a7c:	483f      	ldr	r0, [pc, #252]	@ (8021b7c <mg_http_status_code_str+0x580>)
 8021a7e:	4770      	bx	lr
    case 415: return "Unsupported Media Type";
 8021a80:	483f      	ldr	r0, [pc, #252]	@ (8021b80 <mg_http_status_code_str+0x584>)
 8021a82:	4770      	bx	lr
    case 416: return "Requested Range Not Satisfiable";
 8021a84:	483f      	ldr	r0, [pc, #252]	@ (8021b84 <mg_http_status_code_str+0x588>)
 8021a86:	4770      	bx	lr
    case 417: return "Expectation Failed";
 8021a88:	483f      	ldr	r0, [pc, #252]	@ (8021b88 <mg_http_status_code_str+0x58c>)
 8021a8a:	4770      	bx	lr
    case 418: return "I'm a teapot";
 8021a8c:	483f      	ldr	r0, [pc, #252]	@ (8021b8c <mg_http_status_code_str+0x590>)
 8021a8e:	4770      	bx	lr
    case 421: return "Misdirected Request";
 8021a90:	483f      	ldr	r0, [pc, #252]	@ (8021b90 <mg_http_status_code_str+0x594>)
 8021a92:	4770      	bx	lr
    case 422: return "Unprocessable Entity";
 8021a94:	483f      	ldr	r0, [pc, #252]	@ (8021b94 <mg_http_status_code_str+0x598>)
 8021a96:	4770      	bx	lr
    case 423: return "Locked";
 8021a98:	483f      	ldr	r0, [pc, #252]	@ (8021b98 <mg_http_status_code_str+0x59c>)
 8021a9a:	4770      	bx	lr
    case 424: return "Failed Dependency";
 8021a9c:	483f      	ldr	r0, [pc, #252]	@ (8021b9c <mg_http_status_code_str+0x5a0>)
 8021a9e:	4770      	bx	lr
    case 426: return "Upgrade Required";
 8021aa0:	483f      	ldr	r0, [pc, #252]	@ (8021ba0 <mg_http_status_code_str+0x5a4>)
 8021aa2:	4770      	bx	lr
    case 428: return "Precondition Required";
 8021aa4:	483f      	ldr	r0, [pc, #252]	@ (8021ba4 <mg_http_status_code_str+0x5a8>)
 8021aa6:	4770      	bx	lr
    case 429: return "Too Many Requests";
 8021aa8:	483f      	ldr	r0, [pc, #252]	@ (8021ba8 <mg_http_status_code_str+0x5ac>)
 8021aaa:	4770      	bx	lr
    case 431: return "Request Header Fields Too Large";
 8021aac:	483f      	ldr	r0, [pc, #252]	@ (8021bac <mg_http_status_code_str+0x5b0>)
 8021aae:	4770      	bx	lr
    case 444: return "Connection Closed Without Response";
 8021ab0:	483f      	ldr	r0, [pc, #252]	@ (8021bb0 <mg_http_status_code_str+0x5b4>)
 8021ab2:	4770      	bx	lr
    case 451: return "Unavailable For Legal Reasons";
 8021ab4:	483f      	ldr	r0, [pc, #252]	@ (8021bb4 <mg_http_status_code_str+0x5b8>)
 8021ab6:	4770      	bx	lr
    case 499: return "Client Closed Request";
 8021ab8:	483f      	ldr	r0, [pc, #252]	@ (8021bb8 <mg_http_status_code_str+0x5bc>)
 8021aba:	4770      	bx	lr
    case 500: return "Internal Server Error";
 8021abc:	483f      	ldr	r0, [pc, #252]	@ (8021bbc <mg_http_status_code_str+0x5c0>)
 8021abe:	4770      	bx	lr
    case 501: return "Not Implemented";
 8021ac0:	483f      	ldr	r0, [pc, #252]	@ (8021bc0 <mg_http_status_code_str+0x5c4>)
 8021ac2:	4770      	bx	lr
    case 502: return "Bad Gateway";
 8021ac4:	483f      	ldr	r0, [pc, #252]	@ (8021bc4 <mg_http_status_code_str+0x5c8>)
 8021ac6:	4770      	bx	lr
    case 503: return "Service Unavailable";
 8021ac8:	483f      	ldr	r0, [pc, #252]	@ (8021bc8 <mg_http_status_code_str+0x5cc>)
 8021aca:	4770      	bx	lr
    case 504: return "Gateway Timeout";
 8021acc:	483f      	ldr	r0, [pc, #252]	@ (8021bcc <mg_http_status_code_str+0x5d0>)
 8021ace:	4770      	bx	lr
    case 505: return "HTTP Version Not Supported";
 8021ad0:	483f      	ldr	r0, [pc, #252]	@ (8021bd0 <mg_http_status_code_str+0x5d4>)
 8021ad2:	4770      	bx	lr
    case 506: return "Variant Also Negotiates";
 8021ad4:	483f      	ldr	r0, [pc, #252]	@ (8021bd4 <mg_http_status_code_str+0x5d8>)
 8021ad6:	4770      	bx	lr
    case 507: return "Insufficient Storage";
 8021ad8:	483f      	ldr	r0, [pc, #252]	@ (8021bd8 <mg_http_status_code_str+0x5dc>)
 8021ada:	4770      	bx	lr
    case 508: return "Loop Detected";
 8021adc:	483f      	ldr	r0, [pc, #252]	@ (8021bdc <mg_http_status_code_str+0x5e0>)
 8021ade:	4770      	bx	lr
    case 510: return "Not Extended";
 8021ae0:	483f      	ldr	r0, [pc, #252]	@ (8021be0 <mg_http_status_code_str+0x5e4>)
 8021ae2:	4770      	bx	lr
    case 511: return "Network Authentication Required";
 8021ae4:	483f      	ldr	r0, [pc, #252]	@ (8021be4 <mg_http_status_code_str+0x5e8>)
 8021ae6:	4770      	bx	lr
    case 599: return "Network Connect Timeout Error";
 8021ae8:	483f      	ldr	r0, [pc, #252]	@ (8021be8 <mg_http_status_code_str+0x5ec>)
 8021aea:	4770      	bx	lr
    default: return "";
 8021aec:	483f      	ldr	r0, [pc, #252]	@ (8021bec <mg_http_status_code_str+0x5f0>)
 8021aee:	4770      	bx	lr
    case 101: return "Switching Protocols";
 8021af0:	483f      	ldr	r0, [pc, #252]	@ (8021bf0 <mg_http_status_code_str+0x5f4>)
  }
}
 8021af2:	4770      	bx	lr
 8021af4:	0803add0 	.word	0x0803add0
 8021af8:	0803adf0 	.word	0x0803adf0
 8021afc:	0803adfc 	.word	0x0803adfc
 8021b00:	0803ae00 	.word	0x0803ae00
 8021b04:	0803ae08 	.word	0x0803ae08
 8021b08:	0803ae14 	.word	0x0803ae14
 8021b0c:	0803ae34 	.word	0x0803ae34
 8021b10:	0803ae40 	.word	0x0803ae40
 8021b14:	0803ae50 	.word	0x0803ae50
 8021b18:	0803ae60 	.word	0x0803ae60
 8021b1c:	0803ae70 	.word	0x0803ae70
 8021b20:	0803ae84 	.word	0x0803ae84
 8021b24:	0803ae8c 	.word	0x0803ae8c
 8021b28:	0803aea0 	.word	0x0803aea0
 8021b2c:	0803af44 	.word	0x0803af44
 8021b30:	0803aeb4 	.word	0x0803aeb4
 8021b34:	0803aec0 	.word	0x0803aec0
 8021b38:	0803aed0 	.word	0x0803aed0
 8021b3c:	0803aedc 	.word	0x0803aedc
 8021b40:	0803aef0 	.word	0x0803aef0
 8021b44:	0803af04 	.word	0x0803af04
 8021b48:	0803af10 	.word	0x0803af10
 8021b4c:	0803af20 	.word	0x0803af20
 8021b50:	0803af34 	.word	0x0803af34
 8021b54:	0803af40 	.word	0x0803af40
 8021b58:	0803af4c 	.word	0x0803af4c
 8021b5c:	0803af60 	.word	0x0803af60
 8021b60:	0803af70 	.word	0x0803af70
 8021b64:	0803af90 	.word	0x0803af90
 8021b68:	0803afa0 	.word	0x0803afa0
 8021b6c:	0803afac 	.word	0x0803afac
 8021b70:	0803afb4 	.word	0x0803afb4
 8021b74:	0803afc4 	.word	0x0803afc4
 8021b78:	0803afd8 	.word	0x0803afd8
 8021b7c:	0803afec 	.word	0x0803afec
 8021b80:	0803b004 	.word	0x0803b004
 8021b84:	0803b01c 	.word	0x0803b01c
 8021b88:	0803b03c 	.word	0x0803b03c
 8021b8c:	0803b050 	.word	0x0803b050
 8021b90:	0803b060 	.word	0x0803b060
 8021b94:	0803b074 	.word	0x0803b074
 8021b98:	0803b08c 	.word	0x0803b08c
 8021b9c:	0803b094 	.word	0x0803b094
 8021ba0:	0803b0a8 	.word	0x0803b0a8
 8021ba4:	0803b0bc 	.word	0x0803b0bc
 8021ba8:	0803b0d4 	.word	0x0803b0d4
 8021bac:	0803b0e8 	.word	0x0803b0e8
 8021bb0:	0803b108 	.word	0x0803b108
 8021bb4:	0803b12c 	.word	0x0803b12c
 8021bb8:	0803b14c 	.word	0x0803b14c
 8021bbc:	0803b164 	.word	0x0803b164
 8021bc0:	0803b17c 	.word	0x0803b17c
 8021bc4:	0803b18c 	.word	0x0803b18c
 8021bc8:	0803b198 	.word	0x0803b198
 8021bcc:	0803b1ac 	.word	0x0803b1ac
 8021bd0:	0803b1bc 	.word	0x0803b1bc
 8021bd4:	0803b1d8 	.word	0x0803b1d8
 8021bd8:	0803b1f0 	.word	0x0803b1f0
 8021bdc:	0803b208 	.word	0x0803b208
 8021be0:	0803b218 	.word	0x0803b218
 8021be4:	0803b228 	.word	0x0803b228
 8021be8:	0803b248 	.word	0x0803b248
 8021bec:	08038678 	.word	0x08038678
 8021bf0:	0803addc 	.word	0x0803addc

08021bf4 <mg_is_url_safe>:
    mg_http_serve_file(c, hm, path, opts);
  }
}

static bool mg_is_url_safe(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 8021bf4:	285a      	cmp	r0, #90	@ 0x5a
 8021bf6:	dc1f      	bgt.n	8021c38 <mg_is_url_safe+0x44>
 8021bf8:	282d      	cmp	r0, #45	@ 0x2d
 8021bfa:	db29      	blt.n	8021c50 <mg_is_url_safe+0x5c>
 8021bfc:	382d      	subs	r0, #45	@ 0x2d
 8021bfe:	282d      	cmp	r0, #45	@ 0x2d
 8021c00:	d818      	bhi.n	8021c34 <mg_is_url_safe+0x40>
 8021c02:	e8df f000 	tbb	[pc, r0]
 8021c06:	2727      	.short	0x2727
 8021c08:	27272717 	.word	0x27272717
 8021c0c:	27272727 	.word	0x27272727
 8021c10:	17272727 	.word	0x17272727
 8021c14:	17171717 	.word	0x17171717
 8021c18:	27271717 	.word	0x27271717
 8021c1c:	27272727 	.word	0x27272727
 8021c20:	27272727 	.word	0x27272727
 8021c24:	27272727 	.word	0x27272727
 8021c28:	27272727 	.word	0x27272727
 8021c2c:	27272727 	.word	0x27272727
 8021c30:	27272727 	.word	0x27272727
static bool mg_is_url_safe(int c) {
 8021c34:	2000      	movs	r0, #0
 8021c36:	4770      	bx	lr
 8021c38:	287a      	cmp	r0, #122	@ 0x7a
 8021c3a:	dc05      	bgt.n	8021c48 <mg_is_url_safe+0x54>
 8021c3c:	2861      	cmp	r0, #97	@ 0x61
 8021c3e:	da0b      	bge.n	8021c58 <mg_is_url_safe+0x64>
 8021c40:	285f      	cmp	r0, #95	@ 0x5f
 8021c42:	d10b      	bne.n	8021c5c <mg_is_url_safe+0x68>
 8021c44:	2001      	movs	r0, #1
 8021c46:	4770      	bx	lr
 8021c48:	287e      	cmp	r0, #126	@ 0x7e
 8021c4a:	d109      	bne.n	8021c60 <mg_is_url_safe+0x6c>
 8021c4c:	2001      	movs	r0, #1
 8021c4e:	4770      	bx	lr
 8021c50:	2000      	movs	r0, #0
 8021c52:	4770      	bx	lr
 8021c54:	2001      	movs	r0, #1
 8021c56:	4770      	bx	lr
 8021c58:	2001      	movs	r0, #1
 8021c5a:	4770      	bx	lr
 8021c5c:	2000      	movs	r0, #0
 8021c5e:	4770      	bx	lr
 8021c60:	2000      	movs	r0, #0
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
}
 8021c62:	4770      	bx	lr

08021c64 <is_hex_digit>:
int mg_http_status(const struct mg_http_message *hm) {
  return atoi(hm->uri.buf);
}

static bool is_hex_digit(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8021c64:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8021c68:	2b09      	cmp	r3, #9
 8021c6a:	d908      	bls.n	8021c7e <is_hex_digit+0x1a>
 8021c6c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8021c70:	2b05      	cmp	r3, #5
 8021c72:	d906      	bls.n	8021c82 <is_hex_digit+0x1e>
         (c >= 'A' && c <= 'F');
 8021c74:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8021c76:	2805      	cmp	r0, #5
 8021c78:	d805      	bhi.n	8021c86 <is_hex_digit+0x22>
 8021c7a:	2001      	movs	r0, #1
 8021c7c:	4770      	bx	lr
 8021c7e:	2001      	movs	r0, #1
 8021c80:	4770      	bx	lr
 8021c82:	2001      	movs	r0, #1
 8021c84:	4770      	bx	lr
 8021c86:	2000      	movs	r0, #0
}
 8021c88:	4770      	bx	lr

08021c8a <roundup>:




static size_t roundup(size_t size, size_t align) {
  return align == 0 ? size : (size + align - 1) / align * align;
 8021c8a:	b129      	cbz	r1, 8021c98 <roundup+0xe>
 8021c8c:	4408      	add	r0, r1
 8021c8e:	3801      	subs	r0, #1
 8021c90:	fbb0 f0f1 	udiv	r0, r0, r1
 8021c94:	fb01 f000 	mul.w	r0, r1, r0
}
 8021c98:	4770      	bx	lr
	...

08021c9c <escapeseq>:




static const char *escapeseq(int esc) {
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 8021c9c:	b108      	cbz	r0, 8021ca2 <escapeseq+0x6>
 8021c9e:	4802      	ldr	r0, [pc, #8]	@ (8021ca8 <escapeseq+0xc>)
 8021ca0:	4770      	bx	lr
 8021ca2:	4802      	ldr	r0, [pc, #8]	@ (8021cac <escapeseq+0x10>)
}
 8021ca4:	4770      	bx	lr
 8021ca6:	bf00      	nop
 8021ca8:	0803b268 	.word	0x0803b268
 8021cac:	0803b270 	.word	0x0803b270

08021cb0 <json_esc>:

static char json_esc(int c, int esc) {
 8021cb0:	b570      	push	{r4, r5, r6, lr}
 8021cb2:	4604      	mov	r4, r0
 8021cb4:	460d      	mov	r5, r1
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 8021cb6:	4608      	mov	r0, r1
 8021cb8:	f7ff fff0 	bl	8021c9c <escapeseq>
 8021cbc:	4606      	mov	r6, r0
 8021cbe:	fab5 f085 	clz	r0, r5
 8021cc2:	0940      	lsrs	r0, r0, #5
 8021cc4:	f7ff ffea 	bl	8021c9c <escapeseq>
 8021cc8:	4602      	mov	r2, r0
  for (p = esc1; *p != '\0'; p++) {
 8021cca:	4633      	mov	r3, r6
 8021ccc:	e000      	b.n	8021cd0 <json_esc+0x20>
 8021cce:	3301      	adds	r3, #1
 8021cd0:	7818      	ldrb	r0, [r3, #0]
 8021cd2:	b118      	cbz	r0, 8021cdc <json_esc+0x2c>
    if (*p == c) return esc2[p - esc1];
 8021cd4:	42a0      	cmp	r0, r4
 8021cd6:	d1fa      	bne.n	8021cce <json_esc+0x1e>
 8021cd8:	1b9b      	subs	r3, r3, r6
 8021cda:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 8021cdc:	bd70      	pop	{r4, r5, r6, pc}

08021cde <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 8021cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021ce2:	4607      	mov	r7, r0
 8021ce4:	460e      	mov	r6, r1
  int i;
  for (i = 0; i < len; i++) {
 8021ce6:	2400      	movs	r4, #0
 8021ce8:	e003      	b.n	8021cf2 <mg_pass_string+0x14>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
      i++;
    } else if (s[i] == '\0') {
 8021cea:	b1d5      	cbz	r5, 8021d22 <mg_pass_string+0x44>
      return MG_JSON_INVALID;
    } else if (s[i] == '"') {
 8021cec:	2d22      	cmp	r5, #34	@ 0x22
 8021cee:	d015      	beq.n	8021d1c <mg_pass_string+0x3e>
  for (i = 0; i < len; i++) {
 8021cf0:	3401      	adds	r4, #1
 8021cf2:	42b4      	cmp	r4, r6
 8021cf4:	da10      	bge.n	8021d18 <mg_pass_string+0x3a>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 8021cf6:	4623      	mov	r3, r4
 8021cf8:	5d3d      	ldrb	r5, [r7, r4]
 8021cfa:	2d5c      	cmp	r5, #92	@ 0x5c
 8021cfc:	d1f5      	bne.n	8021cea <mg_pass_string+0xc>
 8021cfe:	f104 0801 	add.w	r8, r4, #1
 8021d02:	45b0      	cmp	r8, r6
 8021d04:	daf1      	bge.n	8021cea <mg_pass_string+0xc>
 8021d06:	443b      	add	r3, r7
 8021d08:	2101      	movs	r1, #1
 8021d0a:	7858      	ldrb	r0, [r3, #1]
 8021d0c:	f7ff ffd0 	bl	8021cb0 <json_esc>
 8021d10:	2800      	cmp	r0, #0
 8021d12:	d0ea      	beq.n	8021cea <mg_pass_string+0xc>
      i++;
 8021d14:	4644      	mov	r4, r8
 8021d16:	e7eb      	b.n	8021cf0 <mg_pass_string+0x12>
      return i;
    }
  }
  return MG_JSON_INVALID;
 8021d18:	f06f 0401 	mvn.w	r4, #1
}
 8021d1c:	4620      	mov	r0, r4
 8021d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MG_JSON_INVALID;
 8021d22:	f06f 0401 	mvn.w	r4, #1
 8021d26:	e7f9      	b.n	8021d1c <mg_pass_string+0x3e>

08021d28 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 8021d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d2c:	ed2d 8b02 	vpush	{d8}
 8021d30:	b085      	sub	sp, #20
 8021d32:	4681      	mov	r9, r0
 8021d34:	9201      	str	r2, [sp, #4]
  double d = 0.0;
  int i = 0, sign = 1;

  // Sign
  if (i < len && *p == '-') {
 8021d36:	f1b1 0800 	subs.w	r8, r1, #0
 8021d3a:	dd49      	ble.n	8021dd0 <mg_atod+0xa8>
 8021d3c:	7803      	ldrb	r3, [r0, #0]
 8021d3e:	2b2d      	cmp	r3, #45	@ 0x2d
 8021d40:	d04c      	beq.n	8021ddc <mg_atod+0xb4>
    sign = -1, i++;
  } else if (i < len && *p == '+') {
 8021d42:	2b2b      	cmp	r3, #43	@ 0x2b
 8021d44:	d04e      	beq.n	8021de4 <mg_atod+0xbc>
  int i = 0, sign = 1;
 8021d46:	f04f 0a01 	mov.w	sl, #1
 8021d4a:	2400      	movs	r4, #0
 8021d4c:	e043      	b.n	8021dd6 <mg_atod+0xae>
    i++;
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
    d *= 10.0;
 8021d4e:	2200      	movs	r2, #0
 8021d50:	4b71      	ldr	r3, [pc, #452]	@ (8021f18 <mg_atod+0x1f0>)
 8021d52:	4630      	mov	r0, r6
 8021d54:	4639      	mov	r1, r7
 8021d56:	f7ee fc67 	bl	8010628 <__aeabi_dmul>
 8021d5a:	4606      	mov	r6, r0
 8021d5c:	460f      	mov	r7, r1
    d += p[i] - '0';
 8021d5e:	f1a5 0030 	sub.w	r0, r5, #48	@ 0x30
 8021d62:	f7ee fbf7 	bl	8010554 <__aeabi_i2d>
 8021d66:	4632      	mov	r2, r6
 8021d68:	463b      	mov	r3, r7
 8021d6a:	f7ee faa7 	bl	80102bc <__adddf3>
 8021d6e:	4606      	mov	r6, r0
 8021d70:	460f      	mov	r7, r1
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8021d72:	3401      	adds	r4, #1
 8021d74:	4544      	cmp	r4, r8
 8021d76:	da05      	bge.n	8021d84 <mg_atod+0x5c>
 8021d78:	f819 5004 	ldrb.w	r5, [r9, r4]
 8021d7c:	2d2f      	cmp	r5, #47	@ 0x2f
 8021d7e:	d901      	bls.n	8021d84 <mg_atod+0x5c>
 8021d80:	2d39      	cmp	r5, #57	@ 0x39
 8021d82:	d9e4      	bls.n	8021d4e <mg_atod+0x26>
  }
  d *= sign;
 8021d84:	4650      	mov	r0, sl
 8021d86:	f7ee fbe5 	bl	8010554 <__aeabi_i2d>
 8021d8a:	4602      	mov	r2, r0
 8021d8c:	460b      	mov	r3, r1
 8021d8e:	ec43 2b18 	vmov	d8, r2, r3
 8021d92:	4632      	mov	r2, r6
 8021d94:	463b      	mov	r3, r7
 8021d96:	f7ee fc47 	bl	8010628 <__aeabi_dmul>
 8021d9a:	4606      	mov	r6, r0
 8021d9c:	460f      	mov	r7, r1

  // Fractional
  if (i < len && p[i] == '.') {
 8021d9e:	4544      	cmp	r4, r8
 8021da0:	da03      	bge.n	8021daa <mg_atod+0x82>
 8021da2:	f819 3004 	ldrb.w	r3, [r9, r4]
 8021da6:	2b2e      	cmp	r3, #46	@ 0x2e
 8021da8:	d020      	beq.n	8021dec <mg_atod+0xc4>
    }
    d += frac * sign;
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 8021daa:	4544      	cmp	r4, r8
 8021dac:	f280 80a1 	bge.w	8021ef2 <mg_atod+0x1ca>
 8021db0:	f819 3004 	ldrb.w	r3, [r9, r4]
 8021db4:	2b65      	cmp	r3, #101	@ 0x65
 8021db6:	d002      	beq.n	8021dbe <mg_atod+0x96>
 8021db8:	2b45      	cmp	r3, #69	@ 0x45
 8021dba:	f040 809a 	bne.w	8021ef2 <mg_atod+0x1ca>
    int j, exp = 0, minus = 0;
    i++;
 8021dbe:	1c63      	adds	r3, r4, #1
    if (i < len && p[i] == '-') minus = 1, i++;
 8021dc0:	4598      	cmp	r8, r3
 8021dc2:	dd58      	ble.n	8021e76 <mg_atod+0x14e>
 8021dc4:	f819 2003 	ldrb.w	r2, [r9, r3]
 8021dc8:	2a2d      	cmp	r2, #45	@ 0x2d
 8021dca:	d051      	beq.n	8021e70 <mg_atod+0x148>
    int j, exp = 0, minus = 0;
 8021dcc:	2200      	movs	r2, #0
 8021dce:	e053      	b.n	8021e78 <mg_atod+0x150>
  int i = 0, sign = 1;
 8021dd0:	f04f 0a01 	mov.w	sl, #1
 8021dd4:	2400      	movs	r4, #0
    i++;
 8021dd6:	2600      	movs	r6, #0
 8021dd8:	2700      	movs	r7, #0
 8021dda:	e7cb      	b.n	8021d74 <mg_atod+0x4c>
    sign = -1, i++;
 8021ddc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8021de0:	2401      	movs	r4, #1
 8021de2:	e7f8      	b.n	8021dd6 <mg_atod+0xae>
  int i = 0, sign = 1;
 8021de4:	f04f 0a01 	mov.w	sl, #1
    i++;
 8021de8:	4654      	mov	r4, sl
 8021dea:	e7f4      	b.n	8021dd6 <mg_atod+0xae>
    i++;
 8021dec:	3401      	adds	r4, #1
    double frac = 0.0, base = 0.1;
 8021dee:	f20f 1b18 	addw	fp, pc, #280	@ 0x118
 8021df2:	e9db ab00 	ldrd	sl, fp, [fp]
 8021df6:	ed9f 7b46 	vldr	d7, [pc, #280]	@ 8021f10 <mg_atod+0x1e8>
 8021dfa:	ec53 2b17 	vmov	r2, r3, d7
 8021dfe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8021e02:	464f      	mov	r7, r9
 8021e04:	4645      	mov	r5, r8
 8021e06:	4690      	mov	r8, r2
 8021e08:	4699      	mov	r9, r3
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8021e0a:	e017      	b.n	8021e3c <mg_atod+0x114>
      frac += base * (p[i] - '0');
 8021e0c:	3830      	subs	r0, #48	@ 0x30
 8021e0e:	f7ee fba1 	bl	8010554 <__aeabi_i2d>
 8021e12:	4652      	mov	r2, sl
 8021e14:	465b      	mov	r3, fp
 8021e16:	f7ee fc07 	bl	8010628 <__aeabi_dmul>
 8021e1a:	4602      	mov	r2, r0
 8021e1c:	460b      	mov	r3, r1
 8021e1e:	4640      	mov	r0, r8
 8021e20:	4649      	mov	r1, r9
 8021e22:	f7ee fa4b 	bl	80102bc <__adddf3>
 8021e26:	4680      	mov	r8, r0
 8021e28:	4689      	mov	r9, r1
      base /= 10.0;
 8021e2a:	2200      	movs	r2, #0
 8021e2c:	4b3a      	ldr	r3, [pc, #232]	@ (8021f18 <mg_atod+0x1f0>)
 8021e2e:	4650      	mov	r0, sl
 8021e30:	4659      	mov	r1, fp
 8021e32:	f7ee fd23 	bl	801087c <__aeabi_ddiv>
 8021e36:	4682      	mov	sl, r0
 8021e38:	468b      	mov	fp, r1
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8021e3a:	3401      	adds	r4, #1
 8021e3c:	42ac      	cmp	r4, r5
 8021e3e:	da04      	bge.n	8021e4a <mg_atod+0x122>
 8021e40:	5d38      	ldrb	r0, [r7, r4]
 8021e42:	282f      	cmp	r0, #47	@ 0x2f
 8021e44:	d901      	bls.n	8021e4a <mg_atod+0x122>
 8021e46:	2839      	cmp	r0, #57	@ 0x39
 8021e48:	d9e0      	bls.n	8021e0c <mg_atod+0xe4>
    d += frac * sign;
 8021e4a:	4642      	mov	r2, r8
 8021e4c:	464b      	mov	r3, r9
 8021e4e:	46b9      	mov	r9, r7
 8021e50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8021e54:	46a8      	mov	r8, r5
 8021e56:	ec51 0b18 	vmov	r0, r1, d8
 8021e5a:	f7ee fbe5 	bl	8010628 <__aeabi_dmul>
 8021e5e:	4602      	mov	r2, r0
 8021e60:	460b      	mov	r3, r1
 8021e62:	4630      	mov	r0, r6
 8021e64:	4639      	mov	r1, r7
 8021e66:	f7ee fa29 	bl	80102bc <__adddf3>
 8021e6a:	4606      	mov	r6, r0
 8021e6c:	460f      	mov	r7, r1
 8021e6e:	e79c      	b.n	8021daa <mg_atod+0x82>
    if (i < len && p[i] == '-') minus = 1, i++;
 8021e70:	1ca3      	adds	r3, r4, #2
 8021e72:	2201      	movs	r2, #1
 8021e74:	e000      	b.n	8021e78 <mg_atod+0x150>
    int j, exp = 0, minus = 0;
 8021e76:	2200      	movs	r2, #0
    if (i < len && p[i] == '+') i++;
 8021e78:	4543      	cmp	r3, r8
 8021e7a:	da03      	bge.n	8021e84 <mg_atod+0x15c>
 8021e7c:	f819 1003 	ldrb.w	r1, [r9, r3]
 8021e80:	292b      	cmp	r1, #43	@ 0x2b
 8021e82:	d013      	beq.n	8021eac <mg_atod+0x184>
    if (i < len && p[i] == '-') minus = 1, i++;
 8021e84:	461c      	mov	r4, r3
 8021e86:	2500      	movs	r5, #0
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8021e88:	4544      	cmp	r4, r8
 8021e8a:	da11      	bge.n	8021eb0 <mg_atod+0x188>
 8021e8c:	f819 3004 	ldrb.w	r3, [r9, r4]
 8021e90:	2b2f      	cmp	r3, #47	@ 0x2f
 8021e92:	d90d      	bls.n	8021eb0 <mg_atod+0x188>
 8021e94:	2b39      	cmp	r3, #57	@ 0x39
 8021e96:	d80b      	bhi.n	8021eb0 <mg_atod+0x188>
 8021e98:	f5b5 7f9a 	cmp.w	r5, #308	@ 0x134
 8021e9c:	da08      	bge.n	8021eb0 <mg_atod+0x188>
      exp = exp * 10 + (p[i++] - '0');
 8021e9e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8021ea2:	3401      	adds	r4, #1
 8021ea4:	3b30      	subs	r3, #48	@ 0x30
 8021ea6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8021eaa:	e7ed      	b.n	8021e88 <mg_atod+0x160>
    if (i < len && p[i] == '+') i++;
 8021eac:	3301      	adds	r3, #1
 8021eae:	e7e9      	b.n	8021e84 <mg_atod+0x15c>
    if (minus) exp = -exp;
 8021eb0:	b102      	cbz	r2, 8021eb4 <mg_atod+0x18c>
 8021eb2:	426d      	negs	r5, r5
    for (j = 0; j < exp; j++) d *= 10.0;
 8021eb4:	f04f 0800 	mov.w	r8, #0
 8021eb8:	e009      	b.n	8021ece <mg_atod+0x1a6>
 8021eba:	2200      	movs	r2, #0
 8021ebc:	4b16      	ldr	r3, [pc, #88]	@ (8021f18 <mg_atod+0x1f0>)
 8021ebe:	4630      	mov	r0, r6
 8021ec0:	4639      	mov	r1, r7
 8021ec2:	f7ee fbb1 	bl	8010628 <__aeabi_dmul>
 8021ec6:	4606      	mov	r6, r0
 8021ec8:	460f      	mov	r7, r1
 8021eca:	f108 0801 	add.w	r8, r8, #1
 8021ece:	45a8      	cmp	r8, r5
 8021ed0:	dbf3      	blt.n	8021eba <mg_atod+0x192>
    for (j = 0; j < -exp; j++) d /= 10.0;
 8021ed2:	f04f 0800 	mov.w	r8, #0
 8021ed6:	e009      	b.n	8021eec <mg_atod+0x1c4>
 8021ed8:	2200      	movs	r2, #0
 8021eda:	4b0f      	ldr	r3, [pc, #60]	@ (8021f18 <mg_atod+0x1f0>)
 8021edc:	4630      	mov	r0, r6
 8021ede:	4639      	mov	r1, r7
 8021ee0:	f7ee fccc 	bl	801087c <__aeabi_ddiv>
 8021ee4:	4606      	mov	r6, r0
 8021ee6:	460f      	mov	r7, r1
 8021ee8:	f108 0801 	add.w	r8, r8, #1
 8021eec:	426b      	negs	r3, r5
 8021eee:	4543      	cmp	r3, r8
 8021ef0:	dcf2      	bgt.n	8021ed8 <mg_atod+0x1b0>
  }

  if (numlen != NULL) *numlen = i;
 8021ef2:	9b01      	ldr	r3, [sp, #4]
 8021ef4:	b103      	cbz	r3, 8021ef8 <mg_atod+0x1d0>
 8021ef6:	601c      	str	r4, [r3, #0]
  return d;
}
 8021ef8:	ec47 6b10 	vmov	d0, r6, r7
 8021efc:	b005      	add	sp, #20
 8021efe:	ecbd 8b02 	vpop	{d8}
 8021f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f06:	bf00      	nop
 8021f08:	9999999a 	.word	0x9999999a
 8021f0c:	3fb99999 	.word	0x3fb99999
	...
 8021f18:	40240000 	.word	0x40240000

08021f1c <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8021f1c:	b508      	push	{r3, lr}
  s_log_func((char) c, s_log_func_param);
 8021f1e:	4b03      	ldr	r3, [pc, #12]	@ (8021f2c <logc+0x10>)
 8021f20:	681b      	ldr	r3, [r3, #0]
 8021f22:	4a03      	ldr	r2, [pc, #12]	@ (8021f30 <logc+0x14>)
 8021f24:	6811      	ldr	r1, [r2, #0]
 8021f26:	4798      	blx	r3
}
 8021f28:	bd08      	pop	{r3, pc}
 8021f2a:	bf00      	nop
 8021f2c:	20000138 	.word	0x20000138
 8021f30:	2001a128 	.word	0x2001a128

08021f34 <logs>:

static void logs(const char *buf, size_t len) {
 8021f34:	b570      	push	{r4, r5, r6, lr}
 8021f36:	4606      	mov	r6, r0
 8021f38:	460d      	mov	r5, r1
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 8021f3a:	2400      	movs	r4, #0
 8021f3c:	e003      	b.n	8021f46 <logs+0x12>
 8021f3e:	5d30      	ldrb	r0, [r6, r4]
 8021f40:	f7ff ffec 	bl	8021f1c <logc>
 8021f44:	3401      	adds	r4, #1
 8021f46:	42ac      	cmp	r4, r5
 8021f48:	d3f9      	bcc.n	8021f3e <logs+0xa>
}
 8021f4a:	bd70      	pop	{r4, r5, r6, pc}

08021f4c <nibble>:
  logs("\r\n", 2);
}
#endif

static unsigned char nibble(unsigned c) {
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 8021f4c:	2809      	cmp	r0, #9
 8021f4e:	d803      	bhi.n	8021f58 <nibble+0xc>
 8021f50:	b2c0      	uxtb	r0, r0
 8021f52:	3030      	adds	r0, #48	@ 0x30
 8021f54:	b2c0      	uxtb	r0, r0
 8021f56:	4770      	bx	lr
 8021f58:	b2c0      	uxtb	r0, r0
 8021f5a:	3057      	adds	r0, #87	@ 0x57
 8021f5c:	b2c0      	uxtb	r0, r0
}
 8021f5e:	4770      	bx	lr

08021f60 <mg_md5_transform>:

  ctx->bits[0] = 0;
  ctx->bits[1] = 0;
}

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 8021f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f64:	b08d      	sub	sp, #52	@ 0x34
  uint32_t a, b, c, d;

  a = buf[0];
  b = buf[1];
 8021f66:	6846      	ldr	r6, [r0, #4]
  c = buf[2];
  d = buf[3];

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 8021f68:	6883      	ldr	r3, [r0, #8]
 8021f6a:	68c2      	ldr	r2, [r0, #12]
 8021f6c:	4053      	eors	r3, r2
 8021f6e:	4033      	ands	r3, r6
 8021f70:	4053      	eors	r3, r2
 8021f72:	f8d1 a000 	ldr.w	sl, [r1]
 8021f76:	4453      	add	r3, sl
 8021f78:	6802      	ldr	r2, [r0, #0]
 8021f7a:	4413      	add	r3, r2
 8021f7c:	4ae0      	ldr	r2, [pc, #896]	@ (8022300 <mg_md5_transform+0x3a0>)
 8021f7e:	441a      	add	r2, r3
 8021f80:	eb06 6272 	add.w	r2, r6, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 8021f84:	6883      	ldr	r3, [r0, #8]
 8021f86:	ea86 0503 	eor.w	r5, r6, r3
 8021f8a:	4015      	ands	r5, r2
 8021f8c:	405d      	eors	r5, r3
 8021f8e:	684b      	ldr	r3, [r1, #4]
 8021f90:	9301      	str	r3, [sp, #4]
 8021f92:	441d      	add	r5, r3
 8021f94:	68c4      	ldr	r4, [r0, #12]
 8021f96:	4425      	add	r5, r4
 8021f98:	4bda      	ldr	r3, [pc, #872]	@ (8022304 <mg_md5_transform+0x3a4>)
 8021f9a:	442b      	add	r3, r5
 8021f9c:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 8021fa0:	ea86 0502 	eor.w	r5, r6, r2
 8021fa4:	401d      	ands	r5, r3
 8021fa6:	960b      	str	r6, [sp, #44]	@ 0x2c
 8021fa8:	4075      	eors	r5, r6
 8021faa:	688c      	ldr	r4, [r1, #8]
 8021fac:	4425      	add	r5, r4
 8021fae:	6886      	ldr	r6, [r0, #8]
 8021fb0:	4435      	add	r5, r6
 8021fb2:	4ed5      	ldr	r6, [pc, #852]	@ (8022308 <mg_md5_transform+0x3a8>)
 8021fb4:	442e      	add	r6, r5
 8021fb6:	eb03 3cf6 	add.w	ip, r3, r6, ror #15
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 8021fba:	ea82 0703 	eor.w	r7, r2, r3
 8021fbe:	ea07 070c 	and.w	r7, r7, ip
 8021fc2:	4057      	eors	r7, r2
 8021fc4:	68cd      	ldr	r5, [r1, #12]
 8021fc6:	950a      	str	r5, [sp, #40]	@ 0x28
 8021fc8:	442f      	add	r7, r5
 8021fca:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021fcc:	4437      	add	r7, r6
 8021fce:	4dcf      	ldr	r5, [pc, #828]	@ (802230c <mg_md5_transform+0x3ac>)
 8021fd0:	443d      	add	r5, r7
 8021fd2:	eb0c 25b5 	add.w	r5, ip, r5, ror #10
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 8021fd6:	ea83 070c 	eor.w	r7, r3, ip
 8021fda:	402f      	ands	r7, r5
 8021fdc:	405f      	eors	r7, r3
 8021fde:	690e      	ldr	r6, [r1, #16]
 8021fe0:	9602      	str	r6, [sp, #8]
 8021fe2:	4437      	add	r7, r6
 8021fe4:	4417      	add	r7, r2
 8021fe6:	4aca      	ldr	r2, [pc, #808]	@ (8022310 <mg_md5_transform+0x3b0>)
 8021fe8:	443a      	add	r2, r7
 8021fea:	eb05 6272 	add.w	r2, r5, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 8021fee:	ea8c 0705 	eor.w	r7, ip, r5
 8021ff2:	4017      	ands	r7, r2
 8021ff4:	ea87 070c 	eor.w	r7, r7, ip
 8021ff8:	694e      	ldr	r6, [r1, #20]
 8021ffa:	9603      	str	r6, [sp, #12]
 8021ffc:	4437      	add	r7, r6
 8021ffe:	441f      	add	r7, r3
 8022000:	4bc4      	ldr	r3, [pc, #784]	@ (8022314 <mg_md5_transform+0x3b4>)
 8022002:	443b      	add	r3, r7
 8022004:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 8022008:	ea85 0702 	eor.w	r7, r5, r2
 802200c:	401f      	ands	r7, r3
 802200e:	406f      	eors	r7, r5
 8022010:	698e      	ldr	r6, [r1, #24]
 8022012:	9604      	str	r6, [sp, #16]
 8022014:	4437      	add	r7, r6
 8022016:	eb0c 0607 	add.w	r6, ip, r7
 802201a:	4fbf      	ldr	r7, [pc, #764]	@ (8022318 <mg_md5_transform+0x3b8>)
 802201c:	4437      	add	r7, r6
 802201e:	eb03 3cf7 	add.w	ip, r3, r7, ror #15
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 8022022:	ea82 0603 	eor.w	r6, r2, r3
 8022026:	ea06 060c 	and.w	r6, r6, ip
 802202a:	4056      	eors	r6, r2
 802202c:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8022030:	444e      	add	r6, r9
 8022032:	4435      	add	r5, r6
 8022034:	4fb9      	ldr	r7, [pc, #740]	@ (802231c <mg_md5_transform+0x3bc>)
 8022036:	442f      	add	r7, r5
 8022038:	eb0c 27b7 	add.w	r7, ip, r7, ror #10
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 802203c:	ea83 050c 	eor.w	r5, r3, ip
 8022040:	403d      	ands	r5, r7
 8022042:	405d      	eors	r5, r3
 8022044:	6a0e      	ldr	r6, [r1, #32]
 8022046:	9605      	str	r6, [sp, #20]
 8022048:	4435      	add	r5, r6
 802204a:	442a      	add	r2, r5
 802204c:	4eb4      	ldr	r6, [pc, #720]	@ (8022320 <mg_md5_transform+0x3c0>)
 802204e:	4416      	add	r6, r2
 8022050:	eb07 6676 	add.w	r6, r7, r6, ror #25
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 8022054:	ea8c 0207 	eor.w	r2, ip, r7
 8022058:	4032      	ands	r2, r6
 802205a:	ea82 020c 	eor.w	r2, r2, ip
 802205e:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8022060:	9506      	str	r5, [sp, #24]
 8022062:	442a      	add	r2, r5
 8022064:	4413      	add	r3, r2
 8022066:	4daf      	ldr	r5, [pc, #700]	@ (8022324 <mg_md5_transform+0x3c4>)
 8022068:	441d      	add	r5, r3
 802206a:	eb06 5535 	add.w	r5, r6, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 802206e:	ea87 0306 	eor.w	r3, r7, r6
 8022072:	402b      	ands	r3, r5
 8022074:	407b      	eors	r3, r7
 8022076:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8022078:	9207      	str	r2, [sp, #28]
 802207a:	4413      	add	r3, r2
 802207c:	4463      	add	r3, ip
 802207e:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 8022082:	3b4f      	subs	r3, #79	@ 0x4f
 8022084:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 8022088:	ea86 0c05 	eor.w	ip, r6, r5
 802208c:	ea0c 0c03 	and.w	ip, ip, r3
 8022090:	ea8c 0c06 	eor.w	ip, ip, r6
 8022094:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8022096:	9208      	str	r2, [sp, #32]
 8022098:	4494      	add	ip, r2
 802209a:	4467      	add	r7, ip
 802209c:	f8df e2a8 	ldr.w	lr, [pc, #680]	@ 8022348 <mg_md5_transform+0x3e8>
 80220a0:	44be      	add	lr, r7
 80220a2:	eb03 2ebe 	add.w	lr, r3, lr, ror #10
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 80220a6:	ea85 0c03 	eor.w	ip, r5, r3
 80220aa:	ea0c 0c0e 	and.w	ip, ip, lr
 80220ae:	ea8c 0c05 	eor.w	ip, ip, r5
 80220b2:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 80220b4:	44bc      	add	ip, r7
 80220b6:	4466      	add	r6, ip
 80220b8:	f8df c290 	ldr.w	ip, [pc, #656]	@ 802234c <mg_md5_transform+0x3ec>
 80220bc:	44b4      	add	ip, r6
 80220be:	eb0e 6c7c 	add.w	ip, lr, ip, ror #25
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 80220c2:	ea83 080e 	eor.w	r8, r3, lr
 80220c6:	ea08 080c 	and.w	r8, r8, ip
 80220ca:	ea88 0803 	eor.w	r8, r8, r3
 80220ce:	6b4e      	ldr	r6, [r1, #52]	@ 0x34
 80220d0:	44b0      	add	r8, r6
 80220d2:	44a8      	add	r8, r5
 80220d4:	4d94      	ldr	r5, [pc, #592]	@ (8022328 <mg_md5_transform+0x3c8>)
 80220d6:	4445      	add	r5, r8
 80220d8:	eb0c 5535 	add.w	r5, ip, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 80220dc:	ea8e 0b0c 	eor.w	fp, lr, ip
 80220e0:	ea0b 0b05 	and.w	fp, fp, r5
 80220e4:	ea8b 0b0e 	eor.w	fp, fp, lr
 80220e8:	f8d1 8038 	ldr.w	r8, [r1, #56]	@ 0x38
 80220ec:	44c3      	add	fp, r8
 80220ee:	449b      	add	fp, r3
 80220f0:	4b8e      	ldr	r3, [pc, #568]	@ (802232c <mg_md5_transform+0x3cc>)
 80220f2:	445b      	add	r3, fp
 80220f4:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 80220f8:	ea8c 0b05 	eor.w	fp, ip, r5
 80220fc:	ea0b 0b03 	and.w	fp, fp, r3
 8022100:	ea8b 0b0c 	eor.w	fp, fp, ip
 8022104:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8022106:	9109      	str	r1, [sp, #36]	@ 0x24
 8022108:	448b      	add	fp, r1
 802210a:	44f3      	add	fp, lr
 802210c:	f8df e240 	ldr.w	lr, [pc, #576]	@ 8022350 <mg_md5_transform+0x3f0>
 8022110:	44de      	add	lr, fp
 8022112:	eb03 2ebe 	add.w	lr, r3, lr, ror #10

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 8022116:	ea83 0b0e 	eor.w	fp, r3, lr
 802211a:	ea0b 0b05 	and.w	fp, fp, r5
 802211e:	ea8b 0b03 	eor.w	fp, fp, r3
 8022122:	9a01      	ldr	r2, [sp, #4]
 8022124:	4493      	add	fp, r2
 8022126:	44e3      	add	fp, ip
 8022128:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8022354 <mg_md5_transform+0x3f4>
 802212c:	44dc      	add	ip, fp
 802212e:	eb0e 6cfc 	add.w	ip, lr, ip, ror #27
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 8022132:	ea8e 0b0c 	eor.w	fp, lr, ip
 8022136:	ea0b 0b03 	and.w	fp, fp, r3
 802213a:	ea8b 0b0e 	eor.w	fp, fp, lr
 802213e:	9a04      	ldr	r2, [sp, #16]
 8022140:	4493      	add	fp, r2
 8022142:	44ab      	add	fp, r5
 8022144:	4d7a      	ldr	r5, [pc, #488]	@ (8022330 <mg_md5_transform+0x3d0>)
 8022146:	445d      	add	r5, fp
 8022148:	eb0c 55f5 	add.w	r5, ip, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 802214c:	ea8c 0b05 	eor.w	fp, ip, r5
 8022150:	ea0b 0b0e 	and.w	fp, fp, lr
 8022154:	ea8b 0b0c 	eor.w	fp, fp, ip
 8022158:	9908      	ldr	r1, [sp, #32]
 802215a:	448b      	add	fp, r1
 802215c:	445b      	add	r3, fp
 802215e:	f8df b1f8 	ldr.w	fp, [pc, #504]	@ 8022358 <mg_md5_transform+0x3f8>
 8022162:	449b      	add	fp, r3
 8022164:	eb05 4bbb 	add.w	fp, r5, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 8022168:	ea85 030b 	eor.w	r3, r5, fp
 802216c:	ea03 030c 	and.w	r3, r3, ip
 8022170:	406b      	eors	r3, r5
 8022172:	4453      	add	r3, sl
 8022174:	4473      	add	r3, lr
 8022176:	f8df e1e4 	ldr.w	lr, [pc, #484]	@ 802235c <mg_md5_transform+0x3fc>
 802217a:	449e      	add	lr, r3
 802217c:	eb0b 3e3e 	add.w	lr, fp, lr, ror #12
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 8022180:	ea8b 030e 	eor.w	r3, fp, lr
 8022184:	402b      	ands	r3, r5
 8022186:	ea83 030b 	eor.w	r3, r3, fp
 802218a:	9a03      	ldr	r2, [sp, #12]
 802218c:	4413      	add	r3, r2
 802218e:	449c      	add	ip, r3
 8022190:	4b68      	ldr	r3, [pc, #416]	@ (8022334 <mg_md5_transform+0x3d4>)
 8022192:	4463      	add	r3, ip
 8022194:	eb0e 63f3 	add.w	r3, lr, r3, ror #27
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 8022198:	ea8e 0c03 	eor.w	ip, lr, r3
 802219c:	ea0c 0c0b 	and.w	ip, ip, fp
 80221a0:	ea8c 0c0e 	eor.w	ip, ip, lr
 80221a4:	9a07      	ldr	r2, [sp, #28]
 80221a6:	4494      	add	ip, r2
 80221a8:	4465      	add	r5, ip
 80221aa:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 8022360 <mg_md5_transform+0x400>
 80221ae:	44ac      	add	ip, r5
 80221b0:	eb03 5cfc 	add.w	ip, r3, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 80221b4:	ea83 050c 	eor.w	r5, r3, ip
 80221b8:	ea05 050e 	and.w	r5, r5, lr
 80221bc:	405d      	eors	r5, r3
 80221be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80221c0:	440d      	add	r5, r1
 80221c2:	445d      	add	r5, fp
 80221c4:	f8df b19c 	ldr.w	fp, [pc, #412]	@ 8022364 <mg_md5_transform+0x404>
 80221c8:	44ab      	add	fp, r5
 80221ca:	eb0c 4bbb 	add.w	fp, ip, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 80221ce:	ea8c 050b 	eor.w	r5, ip, fp
 80221d2:	401d      	ands	r5, r3
 80221d4:	ea85 050c 	eor.w	r5, r5, ip
 80221d8:	9a02      	ldr	r2, [sp, #8]
 80221da:	4415      	add	r5, r2
 80221dc:	44ae      	add	lr, r5
 80221de:	4d56      	ldr	r5, [pc, #344]	@ (8022338 <mg_md5_transform+0x3d8>)
 80221e0:	4475      	add	r5, lr
 80221e2:	eb0b 3535 	add.w	r5, fp, r5, ror #12
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 80221e6:	ea8b 0e05 	eor.w	lr, fp, r5
 80221ea:	ea0e 0e0c 	and.w	lr, lr, ip
 80221ee:	ea8e 0e0b 	eor.w	lr, lr, fp
 80221f2:	9906      	ldr	r1, [sp, #24]
 80221f4:	448e      	add	lr, r1
 80221f6:	4473      	add	r3, lr
 80221f8:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 8022368 <mg_md5_transform+0x408>
 80221fc:	449e      	add	lr, r3
 80221fe:	eb05 6efe 	add.w	lr, r5, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 8022202:	ea85 030e 	eor.w	r3, r5, lr
 8022206:	ea03 030b 	and.w	r3, r3, fp
 802220a:	406b      	eors	r3, r5
 802220c:	4443      	add	r3, r8
 802220e:	4463      	add	r3, ip
 8022210:	f8df c158 	ldr.w	ip, [pc, #344]	@ 802236c <mg_md5_transform+0x40c>
 8022214:	449c      	add	ip, r3
 8022216:	eb0e 5cfc 	add.w	ip, lr, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 802221a:	ea8e 030c 	eor.w	r3, lr, ip
 802221e:	402b      	ands	r3, r5
 8022220:	ea83 030e 	eor.w	r3, r3, lr
 8022224:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022226:	4413      	add	r3, r2
 8022228:	449b      	add	fp, r3
 802222a:	4b44      	ldr	r3, [pc, #272]	@ (802233c <mg_md5_transform+0x3dc>)
 802222c:	445b      	add	r3, fp
 802222e:	eb0c 43b3 	add.w	r3, ip, r3, ror #18
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 8022232:	ea8c 0b03 	eor.w	fp, ip, r3
 8022236:	ea0b 0b0e 	and.w	fp, fp, lr
 802223a:	ea8b 0b0c 	eor.w	fp, fp, ip
 802223e:	9905      	ldr	r1, [sp, #20]
 8022240:	448b      	add	fp, r1
 8022242:	445d      	add	r5, fp
 8022244:	f8df b128 	ldr.w	fp, [pc, #296]	@ 8022370 <mg_md5_transform+0x410>
 8022248:	44ab      	add	fp, r5
 802224a:	eb03 3b3b 	add.w	fp, r3, fp, ror #12
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 802224e:	ea83 050b 	eor.w	r5, r3, fp
 8022252:	ea05 050c 	and.w	r5, r5, ip
 8022256:	405d      	eors	r5, r3
 8022258:	4435      	add	r5, r6
 802225a:	4475      	add	r5, lr
 802225c:	f8df e114 	ldr.w	lr, [pc, #276]	@ 8022374 <mg_md5_transform+0x414>
 8022260:	44ae      	add	lr, r5
 8022262:	eb0b 6efe 	add.w	lr, fp, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 8022266:	ea8b 050e 	eor.w	r5, fp, lr
 802226a:	401d      	ands	r5, r3
 802226c:	ea85 050b 	eor.w	r5, r5, fp
 8022270:	4425      	add	r5, r4
 8022272:	44ac      	add	ip, r5
 8022274:	4d32      	ldr	r5, [pc, #200]	@ (8022340 <mg_md5_transform+0x3e0>)
 8022276:	4465      	add	r5, ip
 8022278:	eb0e 55f5 	add.w	r5, lr, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 802227c:	ea8e 0c05 	eor.w	ip, lr, r5
 8022280:	ea0c 0c0b 	and.w	ip, ip, fp
 8022284:	ea8c 0c0e 	eor.w	ip, ip, lr
 8022288:	44cc      	add	ip, r9
 802228a:	4463      	add	r3, ip
 802228c:	f8df c0e8 	ldr.w	ip, [pc, #232]	@ 8022378 <mg_md5_transform+0x418>
 8022290:	449c      	add	ip, r3
 8022292:	eb05 4cbc 	add.w	ip, r5, ip, ror #18
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 8022296:	ea85 030c 	eor.w	r3, r5, ip
 802229a:	ea03 030e 	and.w	r3, r3, lr
 802229e:	406b      	eors	r3, r5
 80222a0:	443b      	add	r3, r7
 80222a2:	445b      	add	r3, fp
 80222a4:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 802237c <mg_md5_transform+0x41c>
 80222a8:	449b      	add	fp, r3
 80222aa:	eb0c 3b3b 	add.w	fp, ip, fp, ror #12

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 80222ae:	ea8c 030b 	eor.w	r3, ip, fp
 80222b2:	406b      	eors	r3, r5
 80222b4:	9a03      	ldr	r2, [sp, #12]
 80222b6:	4413      	add	r3, r2
 80222b8:	4473      	add	r3, lr
 80222ba:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 80222be:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 80222c2:	eb0b 7333 	add.w	r3, fp, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 80222c6:	ea8b 0e03 	eor.w	lr, fp, r3
 80222ca:	ea8e 0e0c 	eor.w	lr, lr, ip
 80222ce:	448e      	add	lr, r1
 80222d0:	44ae      	add	lr, r5
 80222d2:	4d1c      	ldr	r5, [pc, #112]	@ (8022344 <mg_md5_transform+0x3e4>)
 80222d4:	4475      	add	r5, lr
 80222d6:	eb03 5575 	add.w	r5, r3, r5, ror #21
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 80222da:	ea83 0e05 	eor.w	lr, r3, r5
 80222de:	ea8e 0e0b 	eor.w	lr, lr, fp
 80222e2:	9908      	ldr	r1, [sp, #32]
 80222e4:	448e      	add	lr, r1
 80222e6:	44f4      	add	ip, lr
 80222e8:	f8df e094 	ldr.w	lr, [pc, #148]	@ 8022380 <mg_md5_transform+0x420>
 80222ec:	44e6      	add	lr, ip
 80222ee:	eb05 4e3e 	add.w	lr, r5, lr, ror #16
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 80222f2:	ea85 0c0e 	eor.w	ip, r5, lr
 80222f6:	ea8c 0c03 	eor.w	ip, ip, r3
 80222fa:	44c4      	add	ip, r8
 80222fc:	44e3      	add	fp, ip
 80222fe:	e041      	b.n	8022384 <mg_md5_transform+0x424>
 8022300:	d76aa478 	.word	0xd76aa478
 8022304:	e8c7b756 	.word	0xe8c7b756
 8022308:	242070db 	.word	0x242070db
 802230c:	c1bdceee 	.word	0xc1bdceee
 8022310:	f57c0faf 	.word	0xf57c0faf
 8022314:	4787c62a 	.word	0x4787c62a
 8022318:	a8304613 	.word	0xa8304613
 802231c:	fd469501 	.word	0xfd469501
 8022320:	698098d8 	.word	0x698098d8
 8022324:	8b44f7af 	.word	0x8b44f7af
 8022328:	fd987193 	.word	0xfd987193
 802232c:	a679438e 	.word	0xa679438e
 8022330:	c040b340 	.word	0xc040b340
 8022334:	d62f105d 	.word	0xd62f105d
 8022338:	e7d3fbc8 	.word	0xe7d3fbc8
 802233c:	f4d50d87 	.word	0xf4d50d87
 8022340:	fcefa3f8 	.word	0xfcefa3f8
 8022344:	8771f681 	.word	0x8771f681
 8022348:	895cd7be 	.word	0x895cd7be
 802234c:	6b901122 	.word	0x6b901122
 8022350:	49b40821 	.word	0x49b40821
 8022354:	f61e2562 	.word	0xf61e2562
 8022358:	265e5a51 	.word	0x265e5a51
 802235c:	e9b6c7aa 	.word	0xe9b6c7aa
 8022360:	02441453 	.word	0x02441453
 8022364:	d8a1e681 	.word	0xd8a1e681
 8022368:	21e1cde6 	.word	0x21e1cde6
 802236c:	c33707d6 	.word	0xc33707d6
 8022370:	455a14ed 	.word	0x455a14ed
 8022374:	a9e3e905 	.word	0xa9e3e905
 8022378:	676f02d9 	.word	0x676f02d9
 802237c:	8d2a4c8a 	.word	0x8d2a4c8a
 8022380:	6d9d6122 	.word	0x6d9d6122
 8022384:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 802264c <mg_md5_transform+0x6ec>
 8022388:	44dc      	add	ip, fp
 802238a:	eb0e 2c7c 	add.w	ip, lr, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 802238e:	ea8e 0b0c 	eor.w	fp, lr, ip
 8022392:	ea8b 0b05 	eor.w	fp, fp, r5
 8022396:	9a01      	ldr	r2, [sp, #4]
 8022398:	4493      	add	fp, r2
 802239a:	449b      	add	fp, r3
 802239c:	4b99      	ldr	r3, [pc, #612]	@ (8022604 <mg_md5_transform+0x6a4>)
 802239e:	445b      	add	r3, fp
 80223a0:	eb0c 7333 	add.w	r3, ip, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 80223a4:	ea8c 0b03 	eor.w	fp, ip, r3
 80223a8:	ea8b 0b0e 	eor.w	fp, fp, lr
 80223ac:	9a02      	ldr	r2, [sp, #8]
 80223ae:	4493      	add	fp, r2
 80223b0:	445d      	add	r5, fp
 80223b2:	f8df b29c 	ldr.w	fp, [pc, #668]	@ 8022650 <mg_md5_transform+0x6f0>
 80223b6:	44ab      	add	fp, r5
 80223b8:	eb03 5b7b 	add.w	fp, r3, fp, ror #21
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 80223bc:	ea83 050b 	eor.w	r5, r3, fp
 80223c0:	ea85 050c 	eor.w	r5, r5, ip
 80223c4:	444d      	add	r5, r9
 80223c6:	44ae      	add	lr, r5
 80223c8:	4d8f      	ldr	r5, [pc, #572]	@ (8022608 <mg_md5_transform+0x6a8>)
 80223ca:	4475      	add	r5, lr
 80223cc:	eb0b 4535 	add.w	r5, fp, r5, ror #16
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 80223d0:	ea8b 0e05 	eor.w	lr, fp, r5
 80223d4:	ea8e 0e03 	eor.w	lr, lr, r3
 80223d8:	9a07      	ldr	r2, [sp, #28]
 80223da:	4496      	add	lr, r2
 80223dc:	44e6      	add	lr, ip
 80223de:	f8df c274 	ldr.w	ip, [pc, #628]	@ 8022654 <mg_md5_transform+0x6f4>
 80223e2:	44f4      	add	ip, lr
 80223e4:	eb05 2c7c 	add.w	ip, r5, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 80223e8:	ea85 0e0c 	eor.w	lr, r5, ip
 80223ec:	ea8e 0e0b 	eor.w	lr, lr, fp
 80223f0:	44b6      	add	lr, r6
 80223f2:	4473      	add	r3, lr
 80223f4:	f8df e260 	ldr.w	lr, [pc, #608]	@ 8022658 <mg_md5_transform+0x6f8>
 80223f8:	449e      	add	lr, r3
 80223fa:	eb0c 7e3e 	add.w	lr, ip, lr, ror #28
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 80223fe:	ea8c 030e 	eor.w	r3, ip, lr
 8022402:	406b      	eors	r3, r5
 8022404:	4453      	add	r3, sl
 8022406:	449b      	add	fp, r3
 8022408:	4b80      	ldr	r3, [pc, #512]	@ (802260c <mg_md5_transform+0x6ac>)
 802240a:	445b      	add	r3, fp
 802240c:	eb0e 5373 	add.w	r3, lr, r3, ror #21
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 8022410:	ea8e 0b03 	eor.w	fp, lr, r3
 8022414:	ea8b 0b0c 	eor.w	fp, fp, ip
 8022418:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802241a:	4493      	add	fp, r2
 802241c:	445d      	add	r5, fp
 802241e:	f8df b23c 	ldr.w	fp, [pc, #572]	@ 802265c <mg_md5_transform+0x6fc>
 8022422:	44ab      	add	fp, r5
 8022424:	eb03 4b3b 	add.w	fp, r3, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 8022428:	ea83 050b 	eor.w	r5, r3, fp
 802242c:	ea85 050e 	eor.w	r5, r5, lr
 8022430:	9904      	ldr	r1, [sp, #16]
 8022432:	440d      	add	r5, r1
 8022434:	4465      	add	r5, ip
 8022436:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8022660 <mg_md5_transform+0x700>
 802243a:	44ac      	add	ip, r5
 802243c:	eb0b 2c7c 	add.w	ip, fp, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 8022440:	ea8b 050c 	eor.w	r5, fp, ip
 8022444:	405d      	eors	r5, r3
 8022446:	9906      	ldr	r1, [sp, #24]
 8022448:	440d      	add	r5, r1
 802244a:	44ae      	add	lr, r5
 802244c:	4d70      	ldr	r5, [pc, #448]	@ (8022610 <mg_md5_transform+0x6b0>)
 802244e:	4475      	add	r5, lr
 8022450:	eb0c 7535 	add.w	r5, ip, r5, ror #28
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 8022454:	ea8c 0e05 	eor.w	lr, ip, r5
 8022458:	ea8e 0e0b 	eor.w	lr, lr, fp
 802245c:	44be      	add	lr, r7
 802245e:	4473      	add	r3, lr
 8022460:	f8df e200 	ldr.w	lr, [pc, #512]	@ 8022664 <mg_md5_transform+0x704>
 8022464:	449e      	add	lr, r3
 8022466:	eb05 5e7e 	add.w	lr, r5, lr, ror #21
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 802246a:	ea85 030e 	eor.w	r3, r5, lr
 802246e:	ea83 030c 	eor.w	r3, r3, ip
 8022472:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022474:	440b      	add	r3, r1
 8022476:	445b      	add	r3, fp
 8022478:	f8df b1ec 	ldr.w	fp, [pc, #492]	@ 8022668 <mg_md5_transform+0x708>
 802247c:	449b      	add	fp, r3
 802247e:	eb0e 4b3b 	add.w	fp, lr, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 8022482:	ea8e 030b 	eor.w	r3, lr, fp
 8022486:	406b      	eors	r3, r5
 8022488:	940a      	str	r4, [sp, #40]	@ 0x28
 802248a:	4423      	add	r3, r4
 802248c:	449c      	add	ip, r3
 802248e:	4b61      	ldr	r3, [pc, #388]	@ (8022614 <mg_md5_transform+0x6b4>)
 8022490:	4463      	add	r3, ip
 8022492:	eb0b 2373 	add.w	r3, fp, r3, ror #9

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 8022496:	ea63 0c0e 	orn	ip, r3, lr
 802249a:	ea8c 0c0b 	eor.w	ip, ip, fp
 802249e:	44e2      	add	sl, ip
 80224a0:	44aa      	add	sl, r5
 80224a2:	4d5d      	ldr	r5, [pc, #372]	@ (8022618 <mg_md5_transform+0x6b8>)
 80224a4:	4455      	add	r5, sl
 80224a6:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 80224aa:	ea65 0c0b 	orn	ip, r5, fp
 80224ae:	ea8c 0c03 	eor.w	ip, ip, r3
 80224b2:	44e1      	add	r9, ip
 80224b4:	44f1      	add	r9, lr
 80224b6:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 802266c <mg_md5_transform+0x70c>
 80224ba:	44cc      	add	ip, r9
 80224bc:	eb05 5cbc 	add.w	ip, r5, ip, ror #22
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 80224c0:	ea6c 0e03 	orn	lr, ip, r3
 80224c4:	ea8e 0e05 	eor.w	lr, lr, r5
 80224c8:	44f0      	add	r8, lr
 80224ca:	44d8      	add	r8, fp
 80224cc:	f8df e1a0 	ldr.w	lr, [pc, #416]	@ 8022670 <mg_md5_transform+0x710>
 80224d0:	44c6      	add	lr, r8
 80224d2:	eb0c 4e7e 	add.w	lr, ip, lr, ror #17
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 80224d6:	ea6e 0805 	orn	r8, lr, r5
 80224da:	ea88 080c 	eor.w	r8, r8, ip
 80224de:	9c03      	ldr	r4, [sp, #12]
 80224e0:	44a0      	add	r8, r4
 80224e2:	4498      	add	r8, r3
 80224e4:	4b4d      	ldr	r3, [pc, #308]	@ (802261c <mg_md5_transform+0x6bc>)
 80224e6:	4443      	add	r3, r8
 80224e8:	eb0e 23f3 	add.w	r3, lr, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 80224ec:	ea63 080c 	orn	r8, r3, ip
 80224f0:	ea88 080e 	eor.w	r8, r8, lr
 80224f4:	4447      	add	r7, r8
 80224f6:	442f      	add	r7, r5
 80224f8:	4d49      	ldr	r5, [pc, #292]	@ (8022620 <mg_md5_transform+0x6c0>)
 80224fa:	443d      	add	r5, r7
 80224fc:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 8022500:	ea65 070e 	orn	r7, r5, lr
 8022504:	405f      	eors	r7, r3
 8022506:	4417      	add	r7, r2
 8022508:	44bc      	add	ip, r7
 802250a:	4f46      	ldr	r7, [pc, #280]	@ (8022624 <mg_md5_transform+0x6c4>)
 802250c:	4467      	add	r7, ip
 802250e:	eb05 57b7 	add.w	r7, r5, r7, ror #22
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 8022512:	ea67 0c03 	orn	ip, r7, r3
 8022516:	ea8c 0c05 	eor.w	ip, ip, r5
 802251a:	9a07      	ldr	r2, [sp, #28]
 802251c:	4462      	add	r2, ip
 802251e:	4472      	add	r2, lr
 8022520:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 8022524:	f6a2 3283 	subw	r2, r2, #2947	@ 0xb83
 8022528:	eb07 4272 	add.w	r2, r7, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 802252c:	ea62 0c05 	orn	ip, r2, r5
 8022530:	ea8c 0c07 	eor.w	ip, ip, r7
 8022534:	9c01      	ldr	r4, [sp, #4]
 8022536:	44a4      	add	ip, r4
 8022538:	449c      	add	ip, r3
 802253a:	4b3b      	ldr	r3, [pc, #236]	@ (8022628 <mg_md5_transform+0x6c8>)
 802253c:	4463      	add	r3, ip
 802253e:	eb02 23f3 	add.w	r3, r2, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 8022542:	ea63 0c07 	orn	ip, r3, r7
 8022546:	ea8c 0c02 	eor.w	ip, ip, r2
 802254a:	9905      	ldr	r1, [sp, #20]
 802254c:	448c      	add	ip, r1
 802254e:	44ac      	add	ip, r5
 8022550:	4d36      	ldr	r5, [pc, #216]	@ (802262c <mg_md5_transform+0x6cc>)
 8022552:	4465      	add	r5, ip
 8022554:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 8022558:	ea65 0c02 	orn	ip, r5, r2
 802255c:	ea8c 0c03 	eor.w	ip, ip, r3
 8022560:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022562:	4461      	add	r1, ip
 8022564:	440f      	add	r7, r1
 8022566:	4932      	ldr	r1, [pc, #200]	@ (8022630 <mg_md5_transform+0x6d0>)
 8022568:	4439      	add	r1, r7
 802256a:	eb05 51b1 	add.w	r1, r5, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 802256e:	ea61 0703 	orn	r7, r1, r3
 8022572:	406f      	eors	r7, r5
 8022574:	9c04      	ldr	r4, [sp, #16]
 8022576:	4427      	add	r7, r4
 8022578:	4417      	add	r7, r2
 802257a:	4a2e      	ldr	r2, [pc, #184]	@ (8022634 <mg_md5_transform+0x6d4>)
 802257c:	443a      	add	r2, r7
 802257e:	eb01 4272 	add.w	r2, r1, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 8022582:	ea62 0705 	orn	r7, r2, r5
 8022586:	404f      	eors	r7, r1
 8022588:	443e      	add	r6, r7
 802258a:	4433      	add	r3, r6
 802258c:	4e2a      	ldr	r6, [pc, #168]	@ (8022638 <mg_md5_transform+0x6d8>)
 802258e:	441e      	add	r6, r3
 8022590:	eb02 26f6 	add.w	r6, r2, r6, ror #11
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 8022594:	ea66 0301 	orn	r3, r6, r1
 8022598:	4053      	eors	r3, r2
 802259a:	9f02      	ldr	r7, [sp, #8]
 802259c:	443b      	add	r3, r7
 802259e:	441d      	add	r5, r3
 80225a0:	4b26      	ldr	r3, [pc, #152]	@ (802263c <mg_md5_transform+0x6dc>)
 80225a2:	442b      	add	r3, r5
 80225a4:	eb06 63b3 	add.w	r3, r6, r3, ror #26
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 80225a8:	ea63 0502 	orn	r5, r3, r2
 80225ac:	4075      	eors	r5, r6
 80225ae:	9f08      	ldr	r7, [sp, #32]
 80225b0:	443d      	add	r5, r7
 80225b2:	440d      	add	r5, r1
 80225b4:	4922      	ldr	r1, [pc, #136]	@ (8022640 <mg_md5_transform+0x6e0>)
 80225b6:	4429      	add	r1, r5
 80225b8:	eb03 51b1 	add.w	r1, r3, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 80225bc:	ea61 0506 	orn	r5, r1, r6
 80225c0:	405d      	eors	r5, r3
 80225c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80225c4:	4425      	add	r5, r4
 80225c6:	442a      	add	r2, r5
 80225c8:	4d1e      	ldr	r5, [pc, #120]	@ (8022644 <mg_md5_transform+0x6e4>)
 80225ca:	4415      	add	r5, r2
 80225cc:	eb01 4575 	add.w	r5, r1, r5, ror #17
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 80225d0:	ea65 0203 	orn	r2, r5, r3
 80225d4:	404a      	eors	r2, r1
 80225d6:	9c06      	ldr	r4, [sp, #24]
 80225d8:	4422      	add	r2, r4
 80225da:	4432      	add	r2, r6
 80225dc:	4e1a      	ldr	r6, [pc, #104]	@ (8022648 <mg_md5_transform+0x6e8>)
 80225de:	4416      	add	r6, r2
 80225e0:	eb05 26f6 	add.w	r6, r5, r6, ror #11

  buf[0] += a;
 80225e4:	6802      	ldr	r2, [r0, #0]
 80225e6:	4413      	add	r3, r2
 80225e8:	6003      	str	r3, [r0, #0]
  buf[1] += b;
 80225ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80225ec:	4434      	add	r4, r6
 80225ee:	6044      	str	r4, [r0, #4]
  buf[2] += c;
 80225f0:	6883      	ldr	r3, [r0, #8]
 80225f2:	441d      	add	r5, r3
 80225f4:	6085      	str	r5, [r0, #8]
  buf[3] += d;
 80225f6:	68c3      	ldr	r3, [r0, #12]
 80225f8:	4419      	add	r1, r3
 80225fa:	60c1      	str	r1, [r0, #12]
}
 80225fc:	b00d      	add	sp, #52	@ 0x34
 80225fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022602:	bf00      	nop
 8022604:	a4beea44 	.word	0xa4beea44
 8022608:	f6bb4b60 	.word	0xf6bb4b60
 802260c:	eaa127fa 	.word	0xeaa127fa
 8022610:	d9d4d039 	.word	0xd9d4d039
 8022614:	c4ac5665 	.word	0xc4ac5665
 8022618:	f4292244 	.word	0xf4292244
 802261c:	fc93a039 	.word	0xfc93a039
 8022620:	655b59c3 	.word	0x655b59c3
 8022624:	8f0ccc92 	.word	0x8f0ccc92
 8022628:	85845dd1 	.word	0x85845dd1
 802262c:	6fa87e4f 	.word	0x6fa87e4f
 8022630:	fe2ce6e0 	.word	0xfe2ce6e0
 8022634:	a3014314 	.word	0xa3014314
 8022638:	4e0811a1 	.word	0x4e0811a1
 802263c:	f7537e82 	.word	0xf7537e82
 8022640:	bd3af235 	.word	0xbd3af235
 8022644:	2ad7d2bb 	.word	0x2ad7d2bb
 8022648:	eb86d391 	.word	0xeb86d391
 802264c:	fde5380c 	.word	0xfde5380c
 8022650:	4bdecfa9 	.word	0x4bdecfa9
 8022654:	bebfbc70 	.word	0xbebfbc70
 8022658:	289b7ec6 	.word	0x289b7ec6
 802265c:	d4ef3085 	.word	0xd4ef3085
 8022660:	04881d05 	.word	0x04881d05
 8022664:	e6db99e5 	.word	0xe6db99e5
 8022668:	1fa27cf8 	.word	0x1fa27cf8
 802266c:	432aff97 	.word	0x432aff97
 8022670:	ab9423a7 	.word	0xab9423a7

08022674 <varint_size>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
  mg_send(c, &value, sizeof(value));
}

static uint8_t varint_size(size_t length) {
 8022674:	4602      	mov	r2, r0
  uint8_t bytes_needed = 0;
 8022676:	2000      	movs	r0, #0
  do {
    bytes_needed++;
 8022678:	3001      	adds	r0, #1
 802267a:	b2c0      	uxtb	r0, r0
    length /= 0x80;
  } while (length > 0);
 802267c:	2a7f      	cmp	r2, #127	@ 0x7f
 802267e:	ea4f 12d2 	mov.w	r2, r2, lsr #7
 8022682:	d8f9      	bhi.n	8022678 <varint_size+0x4>
  return bytes_needed;
}
 8022684:	4770      	bx	lr

08022686 <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 8022686:	b500      	push	{lr}
 8022688:	4686      	mov	lr, r0
  size_t len = 0;
 802268a:	2300      	movs	r3, #0
 802268c:	e007      	b.n	802269e <encode_varint+0x18>

  do {
    uint8_t b = (uint8_t) (value % 128);
    value /= 128;
    if (value > 0) b |= 0x80;
 802268e:	f04c 0c80 	orr.w	ip, ip, #128	@ 0x80
    buf[len++] = b;
 8022692:	1c58      	adds	r0, r3, #1
 8022694:	f80e c003 	strb.w	ip, [lr, r3]
  } while (value > 0);
 8022698:	2a7f      	cmp	r2, #127	@ 0x7f
 802269a:	d907      	bls.n	80226ac <encode_varint+0x26>
    buf[len++] = b;
 802269c:	4603      	mov	r3, r0
    uint8_t b = (uint8_t) (value % 128);
 802269e:	f001 0c7f 	and.w	ip, r1, #127	@ 0x7f
    value /= 128;
 80226a2:	460a      	mov	r2, r1
 80226a4:	09c9      	lsrs	r1, r1, #7
    if (value > 0) b |= 0x80;
 80226a6:	2a7f      	cmp	r2, #127	@ 0x7f
 80226a8:	d9f3      	bls.n	8022692 <encode_varint+0xc>
 80226aa:	e7f0      	b.n	802268e <encode_varint+0x8>

  return len;
}
 80226ac:	f85d fb04 	ldr.w	pc, [sp], #4

080226b0 <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
  size_t multiplier = 1, offset;
  *value = 0;
 80226b0:	2300      	movs	r3, #0
 80226b2:	6013      	str	r3, [r2, #0]
  size_t multiplier = 1, offset;
 80226b4:	f04f 0c01 	mov.w	ip, #1

  for (offset = 0; offset < 4 && offset < len; offset++) {
 80226b8:	2b03      	cmp	r3, #3
 80226ba:	d81d      	bhi.n	80226f8 <decode_varint+0x48>
 80226bc:	428b      	cmp	r3, r1
 80226be:	d219      	bcs.n	80226f4 <decode_varint+0x44>
static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 80226c0:	b530      	push	{r4, r5, lr}
 80226c2:	e003      	b.n	80226cc <decode_varint+0x1c>
    uint8_t encoded_byte = buf[offset];
    *value += (encoded_byte & 0x7f) * multiplier;
    multiplier *= 128;

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 80226c4:	1c58      	adds	r0, r3, #1
 80226c6:	e012      	b.n	80226ee <decode_varint+0x3e>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 80226c8:	428b      	cmp	r3, r1
 80226ca:	d211      	bcs.n	80226f0 <decode_varint+0x40>
    uint8_t encoded_byte = buf[offset];
 80226cc:	f810 e003 	ldrb.w	lr, [r0, r3]
    *value += (encoded_byte & 0x7f) * multiplier;
 80226d0:	f00e 047f 	and.w	r4, lr, #127	@ 0x7f
 80226d4:	6815      	ldr	r5, [r2, #0]
 80226d6:	fb0c 5404 	mla	r4, ip, r4, r5
 80226da:	6014      	str	r4, [r2, #0]
    multiplier *= 128;
 80226dc:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
    if ((encoded_byte & 0x80) == 0) return offset + 1;
 80226e0:	f01e 0f80 	tst.w	lr, #128	@ 0x80
 80226e4:	d0ee      	beq.n	80226c4 <decode_varint+0x14>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 80226e6:	3301      	adds	r3, #1
 80226e8:	2b03      	cmp	r3, #3
 80226ea:	d9ed      	bls.n	80226c8 <decode_varint+0x18>
  }

  return 0;
 80226ec:	2000      	movs	r0, #0
}
 80226ee:	bd30      	pop	{r4, r5, pc}
  return 0;
 80226f0:	2000      	movs	r0, #0
 80226f2:	e7fc      	b.n	80226ee <decode_varint+0x3e>
 80226f4:	2000      	movs	r0, #0
 80226f6:	4770      	bx	lr
 80226f8:	2000      	movs	r0, #0
}
 80226fa:	4770      	bx	lr

080226fc <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
  for (i = 0; i < num_properties; ++i) {
 80226fc:	2300      	movs	r3, #0
 80226fe:	2b1a      	cmp	r3, #26
 8022700:	d80b      	bhi.n	802271a <mqtt_prop_type_by_id+0x1e>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 8022702:	4a07      	ldr	r2, [pc, #28]	@ (8022720 <mqtt_prop_type_by_id+0x24>)
 8022704:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8022708:	4282      	cmp	r2, r0
 802270a:	d001      	beq.n	8022710 <mqtt_prop_type_by_id+0x14>
  for (i = 0; i < num_properties; ++i) {
 802270c:	3301      	adds	r3, #1
 802270e:	e7f6      	b.n	80226fe <mqtt_prop_type_by_id+0x2>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 8022710:	4a03      	ldr	r2, [pc, #12]	@ (8022720 <mqtt_prop_type_by_id+0x24>)
 8022712:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022716:	7858      	ldrb	r0, [r3, #1]
 8022718:	4770      	bx	lr
  }
  return -1;  // Property ID not found
 802271a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 802271e:	4770      	bx	lr
 8022720:	0803d868 	.word	0x0803d868

08022724 <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 8022724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022728:	4606      	mov	r6, r0
 802272a:	4688      	mov	r8, r1
  size_t i, size = 0;
 802272c:	2500      	movs	r5, #0
  for (i = 0; i < count; i++) {
 802272e:	462c      	mov	r4, r5
 8022730:	e005      	b.n	802273e <get_properties_length+0x1a>
    size++;  // identifier
    switch (mqtt_prop_type_by_id(props[i].id)) {
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 8022732:	697d      	ldr	r5, [r7, #20]
 8022734:	68fb      	ldr	r3, [r7, #12]
 8022736:	441d      	add	r5, r3
 8022738:	444d      	add	r5, r9
 802273a:	3504      	adds	r5, #4
  for (i = 0; i < count; i++) {
 802273c:	3401      	adds	r4, #1
 802273e:	4544      	cmp	r4, r8
 8022740:	d231      	bcs.n	80227a6 <get_properties_length+0x82>
    size++;  // identifier
 8022742:	f105 0901 	add.w	r9, r5, #1
    switch (mqtt_prop_type_by_id(props[i].id)) {
 8022746:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 802274a:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
 802274e:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
 8022752:	f7ff ffd3 	bl	80226fc <mqtt_prop_type_by_id>
 8022756:	2806      	cmp	r0, #6
 8022758:	d824      	bhi.n	80227a4 <get_properties_length+0x80>
 802275a:	a301      	add	r3, pc, #4	@ (adr r3, 8022760 <get_properties_length+0x3c>)
 802275c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8022760:	080227a1 	.word	0x080227a1
 8022764:	0802277d 	.word	0x0802277d
 8022768:	08022733 	.word	0x08022733
 802276c:	08022785 	.word	0x08022785
 8022770:	0802278d 	.word	0x0802278d
 8022774:	08022799 	.word	0x08022799
 8022778:	0802279d 	.word	0x0802279d
                            2 * sizeof(uint16_t));
        break;
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 802277c:	697d      	ldr	r5, [r7, #20]
 802277e:	444d      	add	r5, r9
 8022780:	3502      	adds	r5, #2
        break;
 8022782:	e7db      	b.n	802273c <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8022784:	697d      	ldr	r5, [r7, #20]
 8022786:	444d      	add	r5, r9
 8022788:	3502      	adds	r5, #2
        break;
 802278a:	e7d7      	b.n	802273c <get_properties_length+0x18>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 802278c:	6878      	ldr	r0, [r7, #4]
 802278e:	f7ff ff71 	bl	8022674 <varint_size>
 8022792:	eb00 0509 	add.w	r5, r0, r9
        break;
 8022796:	e7d1      	b.n	802273c <get_properties_length+0x18>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 8022798:	3505      	adds	r5, #5
        break;
 802279a:	e7cf      	b.n	802273c <get_properties_length+0x18>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 802279c:	3503      	adds	r5, #3
        break;
 802279e:	e7cd      	b.n	802273c <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 80227a0:	3502      	adds	r5, #2
        break;
 80227a2:	e7cb      	b.n	802273c <get_properties_length+0x18>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 80227a4:	464d      	mov	r5, r9
        return size;  // cannot parse further down
    }
  }

  return size;
}
 80227a6:	4628      	mov	r0, r5
 80227a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080227ac <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 80227ac:	b510      	push	{r4, lr}
  size_t size = get_properties_length(props, count);
 80227ae:	f7ff ffb9 	bl	8022724 <get_properties_length>
 80227b2:	4604      	mov	r4, r0
  size += varint_size(size);
 80227b4:	f7ff ff5e 	bl	8022674 <varint_size>
  return size;
}
 80227b8:	4420      	add	r0, r4
 80227ba:	bd10      	pop	{r4, pc}

080227bc <mg_aton4>:
  memset(addr->ip, 0, sizeof(addr->ip));
  addr->is_ip6 = false;
  return true;
}

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 80227bc:	b410      	push	{r4}
 80227be:	b085      	sub	sp, #20
 80227c0:	466b      	mov	r3, sp
 80227c2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t data[4] = {0, 0, 0, 0};
 80227c6:	2300      	movs	r3, #0
 80227c8:	9303      	str	r3, [sp, #12]
  size_t i, num_dots = 0;
 80227ca:	469c      	mov	ip, r3
  for (i = 0; i < str.len; i++) {
 80227cc:	9901      	ldr	r1, [sp, #4]
 80227ce:	4299      	cmp	r1, r3
 80227d0:	d92c      	bls.n	802282c <mg_aton4+0x70>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 80227d2:	9c00      	ldr	r4, [sp, #0]
 80227d4:	5ce1      	ldrb	r1, [r4, r3]
 80227d6:	f1a1 0030 	sub.w	r0, r1, #48	@ 0x30
 80227da:	b2c0      	uxtb	r0, r0
 80227dc:	2809      	cmp	r0, #9
 80227de:	d812      	bhi.n	8022806 <mg_aton4+0x4a>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 80227e0:	f10c 0010 	add.w	r0, ip, #16
 80227e4:	4468      	add	r0, sp
 80227e6:	f810 0c04 	ldrb.w	r0, [r0, #-4]
 80227ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80227ee:	3930      	subs	r1, #48	@ 0x30
 80227f0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
      if (octet > 255) return false;
 80227f4:	29ff      	cmp	r1, #255	@ 0xff
 80227f6:	dc28      	bgt.n	802284a <mg_aton4+0x8e>
      data[num_dots] = (uint8_t) octet;
 80227f8:	f10c 0010 	add.w	r0, ip, #16
 80227fc:	4468      	add	r0, sp
 80227fe:	f800 1c04 	strb.w	r1, [r0, #-4]
  for (i = 0; i < str.len; i++) {
 8022802:	3301      	adds	r3, #1
 8022804:	e7e2      	b.n	80227cc <mg_aton4+0x10>
    } else if (str.buf[i] == '.') {
 8022806:	292e      	cmp	r1, #46	@ 0x2e
 8022808:	d121      	bne.n	802284e <mg_aton4+0x92>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 802280a:	f1bc 0f02 	cmp.w	ip, #2
 802280e:	d820      	bhi.n	8022852 <mg_aton4+0x96>
 8022810:	b923      	cbnz	r3, 802281c <mg_aton4+0x60>
 8022812:	2000      	movs	r0, #0
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
  memcpy(&addr->ip, data, sizeof(data));
  addr->is_ip6 = false;
  return true;
}
 8022814:	b005      	add	sp, #20
 8022816:	f85d 4b04 	ldr.w	r4, [sp], #4
 802281a:	4770      	bx	lr
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 802281c:	441c      	add	r4, r3
 802281e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8022822:	292e      	cmp	r1, #46	@ 0x2e
 8022824:	d017      	beq.n	8022856 <mg_aton4+0x9a>
      num_dots++;
 8022826:	f10c 0c01 	add.w	ip, ip, #1
 802282a:	e7ea      	b.n	8022802 <mg_aton4+0x46>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 802282c:	f1bc 0f03 	cmp.w	ip, #3
 8022830:	d113      	bne.n	802285a <mg_aton4+0x9e>
 8022832:	9900      	ldr	r1, [sp, #0]
 8022834:	4419      	add	r1, r3
 8022836:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 802283a:	2b2e      	cmp	r3, #46	@ 0x2e
 802283c:	d00f      	beq.n	802285e <mg_aton4+0xa2>
  memcpy(&addr->ip, data, sizeof(data));
 802283e:	9b03      	ldr	r3, [sp, #12]
 8022840:	6013      	str	r3, [r2, #0]
  addr->is_ip6 = false;
 8022842:	2300      	movs	r3, #0
 8022844:	74d3      	strb	r3, [r2, #19]
  return true;
 8022846:	2001      	movs	r0, #1
 8022848:	e7e4      	b.n	8022814 <mg_aton4+0x58>
      if (octet > 255) return false;
 802284a:	2000      	movs	r0, #0
 802284c:	e7e2      	b.n	8022814 <mg_aton4+0x58>
      return false;
 802284e:	2000      	movs	r0, #0
 8022850:	e7e0      	b.n	8022814 <mg_aton4+0x58>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8022852:	2000      	movs	r0, #0
 8022854:	e7de      	b.n	8022814 <mg_aton4+0x58>
 8022856:	2000      	movs	r0, #0
 8022858:	e7dc      	b.n	8022814 <mg_aton4+0x58>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 802285a:	2000      	movs	r0, #0
 802285c:	e7da      	b.n	8022814 <mg_aton4+0x58>
 802285e:	2000      	movs	r0, #0
 8022860:	e7d8      	b.n	8022814 <mg_aton4+0x58>

08022862 <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 8022862:	b508      	push	{r3, lr}
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 8022864:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8022866:	b103      	cbz	r3, 802286a <mg_tcpip_call+0x8>
 8022868:	4798      	blx	r3
}
 802286a:	bd08      	pop	{r3, pc}

0802286c <csumup>:
}

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 802286c:	2300      	movs	r3, #0
 802286e:	e005      	b.n	802287c <csumup+0x10>
 8022870:	f811 c003 	ldrb.w	ip, [r1, r3]
 8022874:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8022878:	4460      	add	r0, ip
 802287a:	3301      	adds	r3, #1
 802287c:	4293      	cmp	r3, r2
 802287e:	d205      	bcs.n	802288c <csumup+0x20>
 8022880:	f013 0f01 	tst.w	r3, #1
 8022884:	d0f4      	beq.n	8022870 <csumup+0x4>
 8022886:	f811 c003 	ldrb.w	ip, [r1, r3]
 802288a:	e7f5      	b.n	8022878 <csumup+0xc>
  return sum;
}
 802288c:	4770      	bx	lr

0802288e <ether_output>:
  s->timer = ifp->now + n;
  s->ttype = type;
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
}

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 802288e:	b538      	push	{r3, r4, r5, lr}
 8022890:	4604      	mov	r4, r0
 8022892:	460d      	mov	r5, r1
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 8022894:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8022896:	685b      	ldr	r3, [r3, #4]
 8022898:	4602      	mov	r2, r0
 802289a:	6940      	ldr	r0, [r0, #20]
 802289c:	4798      	blx	r3
  if (n == len) ifp->nsent++;
 802289e:	4285      	cmp	r5, r0
 80228a0:	d000      	beq.n	80228a4 <ether_output+0x16>
  return n;
}
 80228a2:	bd38      	pop	{r3, r4, r5, pc}
  if (n == len) ifp->nsent++;
 80228a4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80228a6:	3301      	adds	r3, #1
 80228a8:	6763      	str	r3, [r4, #116]	@ 0x74
  return n;
 80228aa:	e7fa      	b.n	80228a2 <ether_output+0x14>

080228ac <can_write>:
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
  mg_close_conn(c);
}

static bool can_write(struct mg_connection *c) {
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 80228ac:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 80228b0:	f013 0f28 	tst.w	r3, #40	@ 0x28
 80228b4:	d106      	bne.n	80228c4 <can_write+0x18>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 80228b6:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80228b8:	b132      	cbz	r2, 80228c8 <can_write+0x1c>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 80228ba:	f013 0f90 	tst.w	r3, #144	@ 0x90
 80228be:	d005      	beq.n	80228cc <can_write+0x20>
 80228c0:	2000      	movs	r0, #0
 80228c2:	4770      	bx	lr
 80228c4:	2000      	movs	r0, #0
 80228c6:	4770      	bx	lr
 80228c8:	2000      	movs	r0, #0
 80228ca:	4770      	bx	lr
 80228cc:	2001      	movs	r0, #1
}
 80228ce:	4770      	bx	lr

080228d0 <mg_esc>:
  uint8_t *p = va_arg(*ap, uint8_t *);
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
                    p[3], p[4], p[5]);
}

static char mg_esc(int c, bool esc) {
 80228d0:	b410      	push	{r4}
 80228d2:	4602      	mov	r2, r0
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 80228d4:	460c      	mov	r4, r1
 80228d6:	b109      	cbz	r1, 80228dc <mg_esc+0xc>
 80228d8:	4b0b      	ldr	r3, [pc, #44]	@ (8022908 <mg_esc+0x38>)
 80228da:	e007      	b.n	80228ec <mg_esc+0x1c>
 80228dc:	4b0b      	ldr	r3, [pc, #44]	@ (802290c <mg_esc+0x3c>)
 80228de:	e005      	b.n	80228ec <mg_esc+0x1c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 80228e0:	4a0a      	ldr	r2, [pc, #40]	@ (802290c <mg_esc+0x3c>)
 80228e2:	1a9b      	subs	r3, r3, r2
 80228e4:	4a08      	ldr	r2, [pc, #32]	@ (8022908 <mg_esc+0x38>)
 80228e6:	5cd0      	ldrb	r0, [r2, r3]
 80228e8:	e00a      	b.n	8022900 <mg_esc+0x30>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 80228ea:	3301      	adds	r3, #1
 80228ec:	7818      	ldrb	r0, [r3, #0]
 80228ee:	b138      	cbz	r0, 8022900 <mg_esc+0x30>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 80228f0:	4290      	cmp	r0, r2
 80228f2:	d1fa      	bne.n	80228ea <mg_esc+0x1a>
 80228f4:	2c00      	cmp	r4, #0
 80228f6:	d0f3      	beq.n	80228e0 <mg_esc+0x10>
 80228f8:	4a03      	ldr	r2, [pc, #12]	@ (8022908 <mg_esc+0x38>)
 80228fa:	1a9b      	subs	r3, r3, r2
 80228fc:	4a03      	ldr	r2, [pc, #12]	@ (802290c <mg_esc+0x3c>)
 80228fe:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 8022900:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022904:	4770      	bx	lr
 8022906:	bf00      	nop
 8022908:	0803b268 	.word	0x0803b268
 802290c:	0803b270 	.word	0x0803b270

08022910 <mg_escape>:

static char mg_escape(int c) {
 8022910:	b508      	push	{r3, lr}
  return mg_esc(c, true);
 8022912:	2101      	movs	r1, #1
 8022914:	f7ff ffdc 	bl	80228d0 <mg_esc>
}
 8022918:	bd08      	pop	{r3, pc}

0802291a <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 802291a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802291e:	4607      	mov	r7, r0
 8022920:	460e      	mov	r6, r1
 8022922:	4692      	mov	sl, r2
 8022924:	4699      	mov	r9, r3
  size_t i = 0, extra = 0;
 8022926:	f04f 0b00 	mov.w	fp, #0
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 802292a:	465c      	mov	r4, fp
 802292c:	e003      	b.n	8022936 <qcpy+0x1c>
    char c = mg_escape(buf[i]);
    if (c) {
      out('\\', ptr), out(c, ptr), extra++;
    } else {
      out(buf[i], ptr);
 802292e:	4631      	mov	r1, r6
 8022930:	4628      	mov	r0, r5
 8022932:	47b8      	blx	r7
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8022934:	3401      	adds	r4, #1
 8022936:	454c      	cmp	r4, r9
 8022938:	d211      	bcs.n	802295e <qcpy+0x44>
 802293a:	f81a 5004 	ldrb.w	r5, [sl, r4]
 802293e:	b175      	cbz	r5, 802295e <qcpy+0x44>
    char c = mg_escape(buf[i]);
 8022940:	4628      	mov	r0, r5
 8022942:	f7ff ffe5 	bl	8022910 <mg_escape>
    if (c) {
 8022946:	4680      	mov	r8, r0
 8022948:	2800      	cmp	r0, #0
 802294a:	d0f0      	beq.n	802292e <qcpy+0x14>
      out('\\', ptr), out(c, ptr), extra++;
 802294c:	4631      	mov	r1, r6
 802294e:	205c      	movs	r0, #92	@ 0x5c
 8022950:	47b8      	blx	r7
 8022952:	4631      	mov	r1, r6
 8022954:	4640      	mov	r0, r8
 8022956:	47b8      	blx	r7
 8022958:	f10b 0b01 	add.w	fp, fp, #1
 802295c:	e7ea      	b.n	8022934 <qcpy+0x1a>
    }
  }
  return i + extra;
}
 802295e:	eb04 000b 	add.w	r0, r4, fp
 8022962:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022968 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 8022968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802296c:	4607      	mov	r7, r0
 802296e:	460e      	mov	r6, r1
  size_t bl = (size_t) va_arg(*ap, int);
 8022970:	6811      	ldr	r1, [r2, #0]
 8022972:	1d0b      	adds	r3, r1, #4
 8022974:	6013      	str	r3, [r2, #0]
 8022976:	f8d1 9000 	ldr.w	r9, [r1]
  uint8_t *p = va_arg(*ap, uint8_t *);
 802297a:	f101 0308 	add.w	r3, r1, #8
 802297e:	6013      	str	r3, [r2, #0]
 8022980:	f8d1 8004 	ldr.w	r8, [r1, #4]
  const char *hex = "0123456789abcdef";
  size_t j;
  for (j = 0; j < bl; j++) {
 8022984:	2400      	movs	r4, #0
 8022986:	e00e      	b.n	80229a6 <mg_print_hex+0x3e>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 8022988:	f818 3004 	ldrb.w	r3, [r8, r4]
 802298c:	091b      	lsrs	r3, r3, #4
 802298e:	4d09      	ldr	r5, [pc, #36]	@ (80229b4 <mg_print_hex+0x4c>)
 8022990:	4631      	mov	r1, r6
 8022992:	5ce8      	ldrb	r0, [r5, r3]
 8022994:	47b8      	blx	r7
    out(hex[p[j] & 0x0F], arg);
 8022996:	f818 3004 	ldrb.w	r3, [r8, r4]
 802299a:	f003 030f 	and.w	r3, r3, #15
 802299e:	4631      	mov	r1, r6
 80229a0:	5ce8      	ldrb	r0, [r5, r3]
 80229a2:	47b8      	blx	r7
  for (j = 0; j < bl; j++) {
 80229a4:	3401      	adds	r4, #1
 80229a6:	454c      	cmp	r4, r9
 80229a8:	d3ee      	bcc.n	8022988 <mg_print_hex+0x20>
  }
  return 2 * bl;
}
 80229aa:	ea4f 0049 	mov.w	r0, r9, lsl #1
 80229ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80229b2:	bf00      	nop
 80229b4:	0803adbc 	.word	0x0803adbc

080229b8 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 80229b8:	4684      	mov	ip, r0
  if (MG_BIG_ENDIAN) {
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 80229ba:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 80229be:	ea4f 2332 	mov.w	r3, r2, ror #8
 80229c2:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 80229c6:	ea4f 6232 	mov.w	r2, r2, ror #24
 80229ca:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 80229ce:	ea43 0002 	orr.w	r0, r3, r2
 80229d2:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
  }
  return block->l[i];
}
 80229d6:	4770      	bx	lr

080229d8 <mg_tolc>:
  struct mg_str str = {(char *) s, n};
  return str;
}

static int mg_tolc(char c) {
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 80229d8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80229dc:	b2db      	uxtb	r3, r3
 80229de:	2b19      	cmp	r3, #25
 80229e0:	d800      	bhi.n	80229e4 <mg_tolc+0xc>
 80229e2:	3020      	adds	r0, #32
}
 80229e4:	4770      	bx	lr

080229e6 <isbyte>:
  return ~crc;
}

static int isbyte(int n) {
  return n >= 0 && n <= 255;
}
 80229e6:	28ff      	cmp	r0, #255	@ 0xff
 80229e8:	bf8c      	ite	hi
 80229ea:	2000      	movhi	r0, #0
 80229ec:	2001      	movls	r0, #1
 80229ee:	4770      	bx	lr

080229f0 <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 80229f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80229f4:	b082      	sub	sp, #8
 80229f6:	4605      	mov	r5, r0
 80229f8:	9e08      	ldr	r6, [sp, #32]
 80229fa:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  size_t i;
  uint8_t *p = (uint8_t *) buf;
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 80229fc:	0a10      	lsrs	r0, r2, #8
 80229fe:	f88d 0004 	strb.w	r0, [sp, #4]
 8022a02:	f88d 2005 	strb.w	r2, [sp, #5]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 8022a06:	00c9      	lsls	r1, r1, #3
 8022a08:	b249      	sxtb	r1, r1
 8022a0a:	4698      	mov	r8, r3
 8022a0c:	b143      	cbz	r3, 8022a20 <w5500_txn+0x30>
 8022a0e:	2304      	movs	r3, #4
 8022a10:	4319      	orrs	r1, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8022a12:	f88d 1006 	strb.w	r1, [sp, #6]
  s->begin(s->spi);
 8022a16:	686b      	ldr	r3, [r5, #4]
 8022a18:	6828      	ldr	r0, [r5, #0]
 8022a1a:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 8022a1c:	2400      	movs	r4, #0
 8022a1e:	e00a      	b.n	8022a36 <w5500_txn+0x46>
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 8022a20:	2300      	movs	r3, #0
 8022a22:	e7f5      	b.n	8022a10 <w5500_txn+0x20>
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 8022a24:	68eb      	ldr	r3, [r5, #12]
 8022a26:	f104 0208 	add.w	r2, r4, #8
 8022a2a:	446a      	add	r2, sp
 8022a2c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8022a30:	6828      	ldr	r0, [r5, #0]
 8022a32:	4798      	blx	r3
 8022a34:	3401      	adds	r4, #1
 8022a36:	2c02      	cmp	r4, #2
 8022a38:	d9f4      	bls.n	8022a24 <w5500_txn+0x34>
  for (i = 0; i < len; i++) {
 8022a3a:	2400      	movs	r4, #0
 8022a3c:	e000      	b.n	8022a40 <w5500_txn+0x50>
 8022a3e:	3401      	adds	r4, #1
 8022a40:	42bc      	cmp	r4, r7
 8022a42:	d208      	bcs.n	8022a56 <w5500_txn+0x66>
    uint8_t r = s->txn(s->spi, p[i]);
 8022a44:	68eb      	ldr	r3, [r5, #12]
 8022a46:	5d31      	ldrb	r1, [r6, r4]
 8022a48:	6828      	ldr	r0, [r5, #0]
 8022a4a:	4798      	blx	r3
    if (!wr) p[i] = r;
 8022a4c:	f1b8 0f00 	cmp.w	r8, #0
 8022a50:	d1f5      	bne.n	8022a3e <w5500_txn+0x4e>
 8022a52:	5530      	strb	r0, [r6, r4]
 8022a54:	e7f3      	b.n	8022a3e <w5500_txn+0x4e>
  }
  s->end(s->spi);
 8022a56:	68ab      	ldr	r3, [r5, #8]
 8022a58:	6828      	ldr	r0, [r5, #0]
 8022a5a:	4798      	blx	r3
}
 8022a5c:	b002      	add	sp, #8
 8022a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08022a62 <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 8022a62:	b510      	push	{r4, lr}
 8022a64:	b082      	sub	sp, #8
 8022a66:	9c04      	ldr	r4, [sp, #16]
 8022a68:	9401      	str	r4, [sp, #4]
 8022a6a:	9300      	str	r3, [sp, #0]
 8022a6c:	2301      	movs	r3, #1
 8022a6e:	f7ff ffbf 	bl	80229f0 <w5500_txn>
 8022a72:	b002      	add	sp, #8
 8022a74:	bd10      	pop	{r4, pc}

08022a76 <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 8022a76:	b500      	push	{lr}
 8022a78:	b085      	sub	sp, #20
 8022a7a:	f88d 300f 	strb.w	r3, [sp, #15]
 8022a7e:	2301      	movs	r3, #1
 8022a80:	9300      	str	r3, [sp, #0]
 8022a82:	f10d 030f 	add.w	r3, sp, #15
 8022a86:	f7ff ffec 	bl	8022a62 <w5500_wn>
 8022a8a:	b005      	add	sp, #20
 8022a8c:	f85d fb04 	ldr.w	pc, [sp], #4

08022a90 <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 8022a90:	b500      	push	{lr}
 8022a92:	b085      	sub	sp, #20
 8022a94:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8022a98:	f88d c00c 	strb.w	ip, [sp, #12]
 8022a9c:	f88d 300d 	strb.w	r3, [sp, #13]
 8022aa0:	2302      	movs	r3, #2
 8022aa2:	9300      	str	r3, [sp, #0]
 8022aa4:	ab03      	add	r3, sp, #12
 8022aa6:	f7ff ffdc 	bl	8022a62 <w5500_wn>
 8022aaa:	b005      	add	sp, #20
 8022aac:	f85d fb04 	ldr.w	pc, [sp], #4

08022ab0 <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 8022ab0:	b510      	push	{r4, lr}
 8022ab2:	b082      	sub	sp, #8
 8022ab4:	9c04      	ldr	r4, [sp, #16]
 8022ab6:	9401      	str	r4, [sp, #4]
 8022ab8:	9300      	str	r3, [sp, #0]
 8022aba:	2300      	movs	r3, #0
 8022abc:	f7ff ff98 	bl	80229f0 <w5500_txn>
 8022ac0:	b002      	add	sp, #8
 8022ac2:	bd10      	pop	{r4, pc}

08022ac4 <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 8022ac4:	b500      	push	{lr}
 8022ac6:	b085      	sub	sp, #20
 8022ac8:	2300      	movs	r3, #0
 8022aca:	f88d 300f 	strb.w	r3, [sp, #15]
 8022ace:	2301      	movs	r3, #1
 8022ad0:	9300      	str	r3, [sp, #0]
 8022ad2:	f10d 030f 	add.w	r3, sp, #15
 8022ad6:	f7ff ffeb 	bl	8022ab0 <w5500_rn>
 8022ada:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8022ade:	b005      	add	sp, #20
 8022ae0:	f85d fb04 	ldr.w	pc, [sp], #4

08022ae4 <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 8022ae4:	b500      	push	{lr}
 8022ae6:	b085      	sub	sp, #20
 8022ae8:	2300      	movs	r3, #0
 8022aea:	f8ad 300c 	strh.w	r3, [sp, #12]
 8022aee:	2302      	movs	r3, #2
 8022af0:	9300      	str	r3, [sp, #0]
 8022af2:	ab03      	add	r3, sp, #12
 8022af4:	f7ff ffdc 	bl	8022ab0 <w5500_rn>
 8022af8:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8022afc:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8022b00:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8022b04:	b005      	add	sp, #20
 8022b06:	f85d fb04 	ldr.w	pc, [sp], #4

08022b0a <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 8022b0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022b0e:	b083      	sub	sp, #12
 8022b10:	4606      	mov	r6, r0
 8022b12:	4688      	mov	r8, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8022b14:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8022b16:	2000      	movs	r0, #0
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 8022b18:	4604      	mov	r4, r0
 8022b1a:	2226      	movs	r2, #38	@ 0x26
 8022b1c:	2101      	movs	r1, #1
 8022b1e:	4628      	mov	r0, r5
 8022b20:	f7ff ffe0 	bl	8022ae4 <w5500_r2>
 8022b24:	4284      	cmp	r4, r0
 8022b26:	d3f7      	bcc.n	8022b18 <w5500_rx+0xe>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 8022b28:	b91c      	cbnz	r4, 8022b32 <w5500_rx+0x28>
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
}
 8022b2a:	4620      	mov	r0, r4
 8022b2c:	b003      	add	sp, #12
 8022b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 8022b32:	2228      	movs	r2, #40	@ 0x28
 8022b34:	2101      	movs	r1, #1
 8022b36:	4628      	mov	r0, r5
 8022b38:	f7ff ffd4 	bl	8022ae4 <w5500_r2>
 8022b3c:	4607      	mov	r7, r0
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 8022b3e:	4602      	mov	r2, r0
 8022b40:	2103      	movs	r1, #3
 8022b42:	4628      	mov	r0, r5
 8022b44:	f7ff ffce 	bl	8022ae4 <w5500_r2>
 8022b48:	4681      	mov	r9, r0
    if (n <= len + 2 && n > 1) {
 8022b4a:	fa1f f188 	uxth.w	r1, r8
 8022b4e:	3102      	adds	r1, #2
 8022b50:	4288      	cmp	r0, r1
 8022b52:	dc0e      	bgt.n	8022b72 <w5500_rx+0x68>
 8022b54:	2801      	cmp	r0, #1
 8022b56:	d801      	bhi.n	8022b5c <w5500_rx+0x52>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8022b58:	2400      	movs	r4, #0
 8022b5a:	e00b      	b.n	8022b74 <w5500_rx+0x6a>
      r = (uint16_t) (n - 2);
 8022b5c:	1e84      	subs	r4, r0, #2
 8022b5e:	b2a4      	uxth	r4, r4
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 8022b60:	1cba      	adds	r2, r7, #2
 8022b62:	9400      	str	r4, [sp, #0]
 8022b64:	4633      	mov	r3, r6
 8022b66:	b292      	uxth	r2, r2
 8022b68:	2103      	movs	r1, #3
 8022b6a:	4628      	mov	r0, r5
 8022b6c:	f7ff ffa0 	bl	8022ab0 <w5500_rn>
 8022b70:	e000      	b.n	8022b74 <w5500_rx+0x6a>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8022b72:	2400      	movs	r4, #0
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 8022b74:	eb07 0309 	add.w	r3, r7, r9
 8022b78:	b29b      	uxth	r3, r3
 8022b7a:	2228      	movs	r2, #40	@ 0x28
 8022b7c:	2101      	movs	r1, #1
 8022b7e:	4628      	mov	r0, r5
 8022b80:	f7ff ff86 	bl	8022a90 <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 8022b84:	2340      	movs	r3, #64	@ 0x40
 8022b86:	2201      	movs	r2, #1
 8022b88:	4611      	mov	r1, r2
 8022b8a:	4628      	mov	r0, r5
 8022b8c:	f7ff ff73 	bl	8022a76 <w5500_w1>
 8022b90:	e7cb      	b.n	8022b2a <w5500_rx+0x20>

08022b92 <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 8022b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022b96:	b082      	sub	sp, #8
 8022b98:	4680      	mov	r8, r0
 8022b9a:	460d      	mov	r5, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8022b9c:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 8022b9e:	b28f      	uxth	r7, r1
 8022ba0:	2000      	movs	r0, #0
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 8022ba2:	e004      	b.n	8022bae <w5500_tx+0x1c>
 8022ba4:	2220      	movs	r2, #32
 8022ba6:	2101      	movs	r1, #1
 8022ba8:	4630      	mov	r0, r6
 8022baa:	f7ff ff9b 	bl	8022ae4 <w5500_r2>
 8022bae:	42b8      	cmp	r0, r7
 8022bb0:	d3f8      	bcc.n	8022ba4 <w5500_tx+0x12>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 8022bb2:	2224      	movs	r2, #36	@ 0x24
 8022bb4:	2101      	movs	r1, #1
 8022bb6:	4630      	mov	r0, r6
 8022bb8:	f7ff ff94 	bl	8022ae4 <w5500_r2>
 8022bbc:	4604      	mov	r4, r0
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 8022bbe:	b2ad      	uxth	r5, r5
 8022bc0:	9500      	str	r5, [sp, #0]
 8022bc2:	4643      	mov	r3, r8
 8022bc4:	4602      	mov	r2, r0
 8022bc6:	2102      	movs	r1, #2
 8022bc8:	4630      	mov	r0, r6
 8022bca:	f7ff ff4a 	bl	8022a62 <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 8022bce:	193b      	adds	r3, r7, r4
 8022bd0:	b29b      	uxth	r3, r3
 8022bd2:	2224      	movs	r2, #36	@ 0x24
 8022bd4:	2101      	movs	r1, #1
 8022bd6:	4630      	mov	r0, r6
 8022bd8:	f7ff ff5a 	bl	8022a90 <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 8022bdc:	2320      	movs	r3, #32
 8022bde:	2201      	movs	r2, #1
 8022be0:	4611      	mov	r1, r2
 8022be2:	4630      	mov	r0, r6
 8022be4:	f7ff ff47 	bl	8022a76 <w5500_w1>
  for (i = 0; i < 40; i++) {
 8022be8:	2400      	movs	r4, #0
 8022bea:	e004      	b.n	8022bf6 <w5500_tx+0x64>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
    if (ir == 0) continue;
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
    if (ir & 8) len = 0;           // Timeout. Report error
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 8022bec:	f015 0f18 	tst.w	r5, #24
 8022bf0:	d116      	bne.n	8022c20 <w5500_tx+0x8e>
  for (i = 0; i < 40; i++) {
 8022bf2:	3401      	adds	r4, #1
 8022bf4:	b2a4      	uxth	r4, r4
 8022bf6:	2c27      	cmp	r4, #39	@ 0x27
 8022bf8:	d812      	bhi.n	8022c20 <w5500_tx+0x8e>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 8022bfa:	2202      	movs	r2, #2
 8022bfc:	2101      	movs	r1, #1
 8022bfe:	4630      	mov	r0, r6
 8022c00:	f7ff ff60 	bl	8022ac4 <w5500_r1>
    if (ir == 0) continue;
 8022c04:	4605      	mov	r5, r0
 8022c06:	2800      	cmp	r0, #0
 8022c08:	d0f3      	beq.n	8022bf2 <w5500_tx+0x60>
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 8022c0a:	4603      	mov	r3, r0
 8022c0c:	2202      	movs	r2, #2
 8022c0e:	2101      	movs	r1, #1
 8022c10:	4630      	mov	r0, r6
 8022c12:	f7ff ff30 	bl	8022a76 <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 8022c16:	f015 0f08 	tst.w	r5, #8
 8022c1a:	d0e7      	beq.n	8022bec <w5500_tx+0x5a>
 8022c1c:	2700      	movs	r7, #0
 8022c1e:	e7e5      	b.n	8022bec <w5500_tx+0x5a>
  }
  return len;
}
 8022c20:	4638      	mov	r0, r7
 8022c22:	b002      	add	sp, #8
 8022c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08022c28 <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 8022c28:	b510      	push	{r4, lr}
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8022c2a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  s->end(s->spi);
 8022c2c:	68a3      	ldr	r3, [r4, #8]
 8022c2e:	6820      	ldr	r0, [r4, #0]
 8022c30:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 8022c32:	2380      	movs	r3, #128	@ 0x80
 8022c34:	2200      	movs	r2, #0
 8022c36:	4611      	mov	r1, r2
 8022c38:	4620      	mov	r0, r4
 8022c3a:	f7ff ff1c 	bl	8022a76 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 8022c3e:	2300      	movs	r3, #0
 8022c40:	222e      	movs	r2, #46	@ 0x2e
 8022c42:	4619      	mov	r1, r3
 8022c44:	4620      	mov	r0, r4
 8022c46:	f7ff ff16 	bl	8022a76 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 8022c4a:	23f8      	movs	r3, #248	@ 0xf8
 8022c4c:	222e      	movs	r2, #46	@ 0x2e
 8022c4e:	2100      	movs	r1, #0
 8022c50:	4620      	mov	r0, r4
 8022c52:	f7ff ff10 	bl	8022a76 <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 8022c56:	2310      	movs	r3, #16
 8022c58:	221e      	movs	r2, #30
 8022c5a:	2101      	movs	r1, #1
 8022c5c:	4620      	mov	r0, r4
 8022c5e:	f7ff ff0a 	bl	8022a76 <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 8022c62:	2310      	movs	r3, #16
 8022c64:	221f      	movs	r2, #31
 8022c66:	2101      	movs	r1, #1
 8022c68:	4620      	mov	r0, r4
 8022c6a:	f7ff ff04 	bl	8022a76 <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 8022c6e:	2304      	movs	r3, #4
 8022c70:	2200      	movs	r2, #0
 8022c72:	2101      	movs	r1, #1
 8022c74:	4620      	mov	r0, r4
 8022c76:	f7ff fefe 	bl	8022a76 <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 8022c7a:	2301      	movs	r3, #1
 8022c7c:	461a      	mov	r2, r3
 8022c7e:	4619      	mov	r1, r3
 8022c80:	4620      	mov	r0, r4
 8022c82:	f7ff fef8 	bl	8022a76 <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 8022c86:	2203      	movs	r2, #3
 8022c88:	2101      	movs	r1, #1
 8022c8a:	4620      	mov	r0, r4
 8022c8c:	f7ff ff1a 	bl	8022ac4 <w5500_r1>
}
 8022c90:	2842      	cmp	r0, #66	@ 0x42
 8022c92:	bf14      	ite	ne
 8022c94:	2000      	movne	r0, #0
 8022c96:	2001      	moveq	r0, #1
 8022c98:	bd10      	pop	{r4, pc}

08022c9a <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 8022c9a:	b508      	push	{r3, lr}
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 8022c9c:	222e      	movs	r2, #46	@ 0x2e
 8022c9e:	2100      	movs	r1, #0
 8022ca0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8022ca2:	f7ff ff0f 	bl	8022ac4 <w5500_r1>
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
}
 8022ca6:	f000 0001 	and.w	r0, r0, #1
 8022caa:	bd08      	pop	{r3, pc}

08022cac <mg_dns_free>:
static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8022cac:	b508      	push	{r3, lr}
 8022cae:	4602      	mov	r2, r0
 8022cb0:	4608      	mov	r0, r1
  LIST_DELETE(struct dns_data, head, d);
 8022cb2:	e000      	b.n	8022cb6 <mg_dns_free+0xa>
 8022cb4:	461a      	mov	r2, r3
 8022cb6:	6813      	ldr	r3, [r2, #0]
 8022cb8:	4283      	cmp	r3, r0
 8022cba:	d1fb      	bne.n	8022cb4 <mg_dns_free+0x8>
 8022cbc:	6803      	ldr	r3, [r0, #0]
 8022cbe:	6013      	str	r3, [r2, #0]
  free(d);
 8022cc0:	f7f9 fa2c 	bl	801c11c <vPortFree>
}
 8022cc4:	bd08      	pop	{r3, pc}

08022cc6 <mg_atone>:
static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 8022cc6:	b082      	sub	sp, #8
 8022cc8:	ab02      	add	r3, sp, #8
 8022cca:	e903 0003 	stmdb	r3, {r0, r1}
  if (str.len > 0) return false;
 8022cce:	b111      	cbz	r1, 8022cd6 <mg_atone+0x10>
 8022cd0:	2000      	movs	r0, #0
}
 8022cd2:	b002      	add	sp, #8
 8022cd4:	4770      	bx	lr
  memset(addr->ip, 0, sizeof(addr->ip));
 8022cd6:	6011      	str	r1, [r2, #0]
 8022cd8:	6051      	str	r1, [r2, #4]
 8022cda:	6091      	str	r1, [r2, #8]
 8022cdc:	60d1      	str	r1, [r2, #12]
  addr->is_ip6 = false;
 8022cde:	74d1      	strb	r1, [r2, #19]
  return true;
 8022ce0:	2001      	movs	r0, #1
 8022ce2:	e7f6      	b.n	8022cd2 <mg_atone+0xc>

08022ce4 <urlparse>:
static struct url urlparse(const char *url) {
 8022ce4:	b510      	push	{r4, lr}
 8022ce6:	b088      	sub	sp, #32
 8022ce8:	4604      	mov	r4, r0
  memset(&u, 0, sizeof(u));
 8022cea:	2200      	movs	r2, #0
 8022cec:	9201      	str	r2, [sp, #4]
 8022cee:	9202      	str	r2, [sp, #8]
 8022cf0:	9203      	str	r2, [sp, #12]
 8022cf2:	9204      	str	r2, [sp, #16]
 8022cf4:	9205      	str	r2, [sp, #20]
 8022cf6:	9206      	str	r2, [sp, #24]
 8022cf8:	9207      	str	r2, [sp, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8022cfa:	e00f      	b.n	8022d1c <urlparse+0x38>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8022cfc:	b19a      	cbz	r2, 8022d26 <urlparse+0x42>
 8022cfe:	9804      	ldr	r0, [sp, #16]
 8022d00:	b988      	cbnz	r0, 8022d26 <urlparse+0x42>
 8022d02:	1888      	adds	r0, r1, r2
 8022d04:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 8022d08:	282f      	cmp	r0, #47	@ 0x2f
 8022d0a:	d10c      	bne.n	8022d26 <urlparse+0x42>
      u.host = i + 1;
 8022d0c:	1c53      	adds	r3, r2, #1
 8022d0e:	9304      	str	r3, [sp, #16]
      u.port = 0;
 8022d10:	2300      	movs	r3, #0
 8022d12:	9305      	str	r3, [sp, #20]
 8022d14:	e001      	b.n	8022d1a <urlparse+0x36>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8022d16:	2300      	movs	r3, #0
 8022d18:	9305      	str	r3, [sp, #20]
  for (i = 0; url[i] != '\0'; i++) {
 8022d1a:	3201      	adds	r2, #1
 8022d1c:	5c8b      	ldrb	r3, [r1, r2]
 8022d1e:	2b00      	cmp	r3, #0
 8022d20:	d02c      	beq.n	8022d7c <urlparse+0x98>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8022d22:	2b2f      	cmp	r3, #47	@ 0x2f
 8022d24:	d0ea      	beq.n	8022cfc <urlparse+0x18>
    } else if (url[i] == ']') {
 8022d26:	2b5d      	cmp	r3, #93	@ 0x5d
 8022d28:	d0f5      	beq.n	8022d16 <urlparse+0x32>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8022d2a:	2b3a      	cmp	r3, #58	@ 0x3a
 8022d2c:	d00b      	beq.n	8022d46 <urlparse+0x62>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8022d2e:	2b40      	cmp	r3, #64	@ 0x40
 8022d30:	d012      	beq.n	8022d58 <urlparse+0x74>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 8022d32:	2b2f      	cmp	r3, #47	@ 0x2f
 8022d34:	d1f1      	bne.n	8022d1a <urlparse+0x36>
 8022d36:	9b04      	ldr	r3, [sp, #16]
 8022d38:	2b00      	cmp	r3, #0
 8022d3a:	d0ee      	beq.n	8022d1a <urlparse+0x36>
 8022d3c:	9b06      	ldr	r3, [sp, #24]
 8022d3e:	2b00      	cmp	r3, #0
 8022d40:	d1eb      	bne.n	8022d1a <urlparse+0x36>
      u.uri = i;
 8022d42:	9206      	str	r2, [sp, #24]
 8022d44:	e7e9      	b.n	8022d1a <urlparse+0x36>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8022d46:	9805      	ldr	r0, [sp, #20]
 8022d48:	2800      	cmp	r0, #0
 8022d4a:	d1f0      	bne.n	8022d2e <urlparse+0x4a>
 8022d4c:	9806      	ldr	r0, [sp, #24]
 8022d4e:	2800      	cmp	r0, #0
 8022d50:	d1ed      	bne.n	8022d2e <urlparse+0x4a>
      u.port = i + 1;
 8022d52:	1c53      	adds	r3, r2, #1
 8022d54:	9305      	str	r3, [sp, #20]
 8022d56:	e7e0      	b.n	8022d1a <urlparse+0x36>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8022d58:	9802      	ldr	r0, [sp, #8]
 8022d5a:	2800      	cmp	r0, #0
 8022d5c:	d1e9      	bne.n	8022d32 <urlparse+0x4e>
 8022d5e:	9803      	ldr	r0, [sp, #12]
 8022d60:	2800      	cmp	r0, #0
 8022d62:	d1e6      	bne.n	8022d32 <urlparse+0x4e>
 8022d64:	9806      	ldr	r0, [sp, #24]
 8022d66:	2800      	cmp	r0, #0
 8022d68:	d1e3      	bne.n	8022d32 <urlparse+0x4e>
      u.user = u.host;
 8022d6a:	9b04      	ldr	r3, [sp, #16]
 8022d6c:	9302      	str	r3, [sp, #8]
      u.pass = u.port;
 8022d6e:	9b05      	ldr	r3, [sp, #20]
 8022d70:	9303      	str	r3, [sp, #12]
      u.host = i + 1;
 8022d72:	1c53      	adds	r3, r2, #1
 8022d74:	9304      	str	r3, [sp, #16]
      u.port = 0;
 8022d76:	2300      	movs	r3, #0
 8022d78:	9305      	str	r3, [sp, #20]
 8022d7a:	e7ce      	b.n	8022d1a <urlparse+0x36>
  u.end = i;
 8022d7c:	9207      	str	r2, [sp, #28]
  return u;
 8022d7e:	46a4      	mov	ip, r4
 8022d80:	f10d 0e04 	add.w	lr, sp, #4
 8022d84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8022d88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8022d8c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8022d90:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
}
 8022d94:	4620      	mov	r0, r4
 8022d96:	b008      	add	sp, #32
 8022d98:	bd10      	pop	{r4, pc}

08022d9a <mg_dns_parse_name_depth>:
                                      int depth) {
 8022d9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d9e:	b085      	sub	sp, #20
 8022da0:	4681      	mov	r9, r0
 8022da2:	4688      	mov	r8, r1
 8022da4:	4693      	mov	fp, r2
 8022da6:	469a      	mov	sl, r3
 8022da8:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8022daa:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8022dac:	b11f      	cbz	r7, 8022db6 <mg_dns_parse_name_depth+0x1c>
 8022dae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022db0:	b90b      	cbnz	r3, 8022db6 <mg_dns_parse_name_depth+0x1c>
 8022db2:	f88a 3000 	strb.w	r3, [sl]
  if (depth > 5) return 0;
 8022db6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022db8:	2b05      	cmp	r3, #5
 8022dba:	dc4f      	bgt.n	8022e5c <mg_dns_parse_name_depth+0xc2>
  size_t i = 0;
 8022dbc:	2600      	movs	r6, #0
 8022dbe:	e02f      	b.n	8022e20 <mg_dns_parse_name_depth+0x86>
      i++;
 8022dc0:	3601      	adds	r6, #1
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 8022dc2:	2f00      	cmp	r7, #0
 8022dc4:	d04b      	beq.n	8022e5e <mg_dns_parse_name_depth+0xc4>
 8022dc6:	3f01      	subs	r7, #1
 8022dc8:	2300      	movs	r3, #0
 8022dca:	f80a 3007 	strb.w	r3, [sl, r7]
 8022dce:	e046      	b.n	8022e5e <mg_dns_parse_name_depth+0xc4>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8022dd0:	0222      	lsls	r2, r4, #8
 8022dd2:	f402 527c 	and.w	r2, r2, #16128	@ 0x3f00
 8022dd6:	f819 3001 	ldrb.w	r3, [r9, r1]
 8022dda:	431a      	orrs	r2, r3
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8022ddc:	1c53      	adds	r3, r2, #1
 8022dde:	4543      	cmp	r3, r8
 8022de0:	d203      	bcs.n	8022dea <mg_dns_parse_name_depth+0x50>
 8022de2:	f819 3002 	ldrb.w	r3, [r9, r2]
 8022de6:	2b3f      	cmp	r3, #63	@ 0x3f
 8022de8:	d901      	bls.n	8022dee <mg_dns_parse_name_depth+0x54>
      i += 2;
 8022dea:	3602      	adds	r6, #2
      break;
 8022dec:	e7e9      	b.n	8022dc2 <mg_dns_parse_name_depth+0x28>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 8022dee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022df0:	3301      	adds	r3, #1
 8022df2:	9302      	str	r3, [sp, #8]
 8022df4:	9501      	str	r5, [sp, #4]
 8022df6:	9700      	str	r7, [sp, #0]
 8022df8:	4653      	mov	r3, sl
 8022dfa:	4641      	mov	r1, r8
 8022dfc:	4648      	mov	r0, r9
 8022dfe:	f7ff ffcc 	bl	8022d9a <mg_dns_parse_name_depth>
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8022e02:	2800      	cmp	r0, #0
 8022e04:	d1f1      	bne.n	8022dea <mg_dns_parse_name_depth+0x50>
        return 0;
 8022e06:	4606      	mov	r6, r0
 8022e08:	e029      	b.n	8022e5e <mg_dns_parse_name_depth+0xc4>
 8022e0a:	4628      	mov	r0, r5
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8022e0c:	1905      	adds	r5, r0, r4
 8022e0e:	42bd      	cmp	r5, r7
 8022e10:	d31e      	bcc.n	8022e50 <mg_dns_parse_name_depth+0xb6>
    i += n + 1;
 8022e12:	4426      	add	r6, r4
 8022e14:	3601      	adds	r6, #1
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8022e16:	42bd      	cmp	r5, r7
 8022e18:	d202      	bcs.n	8022e20 <mg_dns_parse_name_depth+0x86>
 8022e1a:	2300      	movs	r3, #0
 8022e1c:	f80a 3005 	strb.w	r3, [sl, r5]
  while (ofs + i + 1 < len) {
 8022e20:	eb06 030b 	add.w	r3, r6, fp
 8022e24:	1c59      	adds	r1, r3, #1
 8022e26:	4541      	cmp	r1, r8
 8022e28:	d2cb      	bcs.n	8022dc2 <mg_dns_parse_name_depth+0x28>
    size_t n = s[ofs + i];
 8022e2a:	f819 4003 	ldrb.w	r4, [r9, r3]
    if (n == 0) {
 8022e2e:	2c00      	cmp	r4, #0
 8022e30:	d0c6      	beq.n	8022dc0 <mg_dns_parse_name_depth+0x26>
    if (n & 0xc0) {
 8022e32:	2c3f      	cmp	r4, #63	@ 0x3f
 8022e34:	d8cc      	bhi.n	8022dd0 <mg_dns_parse_name_depth+0x36>
    if (ofs + i + n + 1 >= len) return 0;
 8022e36:	4423      	add	r3, r4
 8022e38:	3301      	adds	r3, #1
 8022e3a:	4543      	cmp	r3, r8
 8022e3c:	d213      	bcs.n	8022e66 <mg_dns_parse_name_depth+0xcc>
    if (j > 0) {
 8022e3e:	2d00      	cmp	r5, #0
 8022e40:	d0e3      	beq.n	8022e0a <mg_dns_parse_name_depth+0x70>
      if (j < tolen) to[j] = '.';
 8022e42:	42bd      	cmp	r5, r7
 8022e44:	d202      	bcs.n	8022e4c <mg_dns_parse_name_depth+0xb2>
 8022e46:	232e      	movs	r3, #46	@ 0x2e
 8022e48:	f80a 3005 	strb.w	r3, [sl, r5]
      j++;
 8022e4c:	1c68      	adds	r0, r5, #1
 8022e4e:	e7dd      	b.n	8022e0c <mg_dns_parse_name_depth+0x72>
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8022e50:	4622      	mov	r2, r4
 8022e52:	4449      	add	r1, r9
 8022e54:	4450      	add	r0, sl
 8022e56:	f00b fa4f 	bl	802e2f8 <memcpy>
 8022e5a:	e7da      	b.n	8022e12 <mg_dns_parse_name_depth+0x78>
  if (depth > 5) return 0;
 8022e5c:	2600      	movs	r6, #0
}
 8022e5e:	4630      	mov	r0, r6
 8022e60:	b005      	add	sp, #20
 8022e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ofs + i + n + 1 >= len) return 0;
 8022e66:	2600      	movs	r6, #0
 8022e68:	e7f9      	b.n	8022e5e <mg_dns_parse_name_depth+0xc4>

08022e6a <mg_dns_parse_name>:
                                char *dst, size_t dstlen) {
 8022e6a:	b510      	push	{r4, lr}
 8022e6c:	b084      	sub	sp, #16
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8022e6e:	2400      	movs	r4, #0
 8022e70:	9402      	str	r4, [sp, #8]
 8022e72:	9401      	str	r4, [sp, #4]
 8022e74:	9c06      	ldr	r4, [sp, #24]
 8022e76:	9400      	str	r4, [sp, #0]
 8022e78:	f7ff ff8f 	bl	8022d9a <mg_dns_parse_name_depth>
}
 8022e7c:	b004      	add	sp, #16
 8022e7e:	bd10      	pop	{r4, pc}

08022e80 <mg_sha1_transform>:
                              const unsigned char *buffer) {
 8022e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e84:	b09f      	sub	sp, #124	@ 0x7c
 8022e86:	900d      	str	r0, [sp, #52]	@ 0x34
  memcpy(block, buffer, 64);
 8022e88:	460c      	mov	r4, r1
 8022e8a:	af0e      	add	r7, sp, #56	@ 0x38
 8022e8c:	f101 0540 	add.w	r5, r1, #64	@ 0x40
 8022e90:	463e      	mov	r6, r7
 8022e92:	6820      	ldr	r0, [r4, #0]
 8022e94:	6861      	ldr	r1, [r4, #4]
 8022e96:	68a2      	ldr	r2, [r4, #8]
 8022e98:	68e3      	ldr	r3, [r4, #12]
 8022e9a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8022e9c:	3410      	adds	r4, #16
 8022e9e:	4637      	mov	r7, r6
 8022ea0:	42ac      	cmp	r4, r5
 8022ea2:	d1f5      	bne.n	8022e90 <mg_sha1_transform+0x10>
  a = state[0];
 8022ea4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022ea6:	6805      	ldr	r5, [r0, #0]
  b = state[1];
 8022ea8:	6847      	ldr	r7, [r0, #4]
  c = state[2];
 8022eaa:	6884      	ldr	r4, [r0, #8]
  d = state[3];
 8022eac:	f8d0 800c 	ldr.w	r8, [r0, #12]
  e = state[4];
 8022eb0:	f8d0 9010 	ldr.w	r9, [r0, #16]
  R0(a, b, c, d, e, 0);
 8022eb4:	ea84 0608 	eor.w	r6, r4, r8
 8022eb8:	403e      	ands	r6, r7
 8022eba:	ea86 0608 	eor.w	r6, r6, r8
 8022ebe:	2100      	movs	r1, #0
 8022ec0:	a80e      	add	r0, sp, #56	@ 0x38
 8022ec2:	f7ff fd79 	bl	80229b8 <blk0>
 8022ec6:	1833      	adds	r3, r6, r0
 8022ec8:	eb03 63f5 	add.w	r3, r3, r5, ror #27
 8022ecc:	4ee4      	ldr	r6, [pc, #912]	@ (8023260 <mg_sha1_transform+0x3e0>)
 8022ece:	4433      	add	r3, r6
 8022ed0:	4499      	add	r9, r3
 8022ed2:	ea4f 0ab7 	mov.w	sl, r7, ror #2
  R0(e, a, b, c, d, 1);
 8022ed6:	ea84 07b7 	eor.w	r7, r4, r7, ror #2
 8022eda:	402f      	ands	r7, r5
 8022edc:	4067      	eors	r7, r4
 8022ede:	2101      	movs	r1, #1
 8022ee0:	a80e      	add	r0, sp, #56	@ 0x38
 8022ee2:	f7ff fd69 	bl	80229b8 <blk0>
 8022ee6:	4407      	add	r7, r0
 8022ee8:	eb07 67f9 	add.w	r7, r7, r9, ror #27
 8022eec:	4437      	add	r7, r6
 8022eee:	4447      	add	r7, r8
 8022ef0:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(d, e, a, b, c, 2);
 8022ef4:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8022ef8:	ea05 0509 	and.w	r5, r5, r9
 8022efc:	ea85 050a 	eor.w	r5, r5, sl
 8022f00:	2102      	movs	r1, #2
 8022f02:	a80e      	add	r0, sp, #56	@ 0x38
 8022f04:	f7ff fd58 	bl	80229b8 <blk0>
 8022f08:	4405      	add	r5, r0
 8022f0a:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 8022f0e:	4435      	add	r5, r6
 8022f10:	442c      	add	r4, r5
 8022f12:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(c, d, e, a, b, 3);
 8022f16:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 8022f1a:	ea09 0907 	and.w	r9, r9, r7
 8022f1e:	ea89 0908 	eor.w	r9, r9, r8
 8022f22:	2103      	movs	r1, #3
 8022f24:	a80e      	add	r0, sp, #56	@ 0x38
 8022f26:	f7ff fd47 	bl	80229b8 <blk0>
 8022f2a:	4481      	add	r9, r0
 8022f2c:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8022f30:	44b1      	add	r9, r6
 8022f32:	44ca      	add	sl, r9
 8022f34:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(b, c, d, e, a, 4);
 8022f38:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 8022f3c:	4027      	ands	r7, r4
 8022f3e:	406f      	eors	r7, r5
 8022f40:	2104      	movs	r1, #4
 8022f42:	a80e      	add	r0, sp, #56	@ 0x38
 8022f44:	f7ff fd38 	bl	80229b8 <blk0>
 8022f48:	4407      	add	r7, r0
 8022f4a:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 8022f4e:	4437      	add	r7, r6
 8022f50:	44b8      	add	r8, r7
 8022f52:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(a, b, c, d, e, 5);
 8022f56:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 8022f5a:	ea04 040a 	and.w	r4, r4, sl
 8022f5e:	ea84 0409 	eor.w	r4, r4, r9
 8022f62:	2105      	movs	r1, #5
 8022f64:	a80e      	add	r0, sp, #56	@ 0x38
 8022f66:	f7ff fd27 	bl	80229b8 <blk0>
 8022f6a:	4404      	add	r4, r0
 8022f6c:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 8022f70:	4434      	add	r4, r6
 8022f72:	4425      	add	r5, r4
 8022f74:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(e, a, b, c, d, 6);
 8022f78:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 8022f7c:	ea0a 0a08 	and.w	sl, sl, r8
 8022f80:	ea8a 0a07 	eor.w	sl, sl, r7
 8022f84:	2106      	movs	r1, #6
 8022f86:	a80e      	add	r0, sp, #56	@ 0x38
 8022f88:	f7ff fd16 	bl	80229b8 <blk0>
 8022f8c:	4482      	add	sl, r0
 8022f8e:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 8022f92:	44b2      	add	sl, r6
 8022f94:	44d1      	add	r9, sl
 8022f96:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(d, e, a, b, c, 7);
 8022f9a:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 8022f9e:	ea08 0805 	and.w	r8, r8, r5
 8022fa2:	ea88 0804 	eor.w	r8, r8, r4
 8022fa6:	2107      	movs	r1, #7
 8022fa8:	a80e      	add	r0, sp, #56	@ 0x38
 8022faa:	f7ff fd05 	bl	80229b8 <blk0>
 8022fae:	4480      	add	r8, r0
 8022fb0:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 8022fb4:	44b0      	add	r8, r6
 8022fb6:	4447      	add	r7, r8
 8022fb8:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(c, d, e, a, b, 8);
 8022fbc:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8022fc0:	ea05 0509 	and.w	r5, r5, r9
 8022fc4:	ea85 050a 	eor.w	r5, r5, sl
 8022fc8:	2108      	movs	r1, #8
 8022fca:	a80e      	add	r0, sp, #56	@ 0x38
 8022fcc:	f7ff fcf4 	bl	80229b8 <blk0>
 8022fd0:	4405      	add	r5, r0
 8022fd2:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 8022fd6:	4435      	add	r5, r6
 8022fd8:	442c      	add	r4, r5
 8022fda:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(b, c, d, e, a, 9);
 8022fde:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 8022fe2:	ea09 0907 	and.w	r9, r9, r7
 8022fe6:	ea89 0908 	eor.w	r9, r9, r8
 8022fea:	2109      	movs	r1, #9
 8022fec:	a80e      	add	r0, sp, #56	@ 0x38
 8022fee:	f7ff fce3 	bl	80229b8 <blk0>
 8022ff2:	4481      	add	r9, r0
 8022ff4:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8022ff8:	44b1      	add	r9, r6
 8022ffa:	44ca      	add	sl, r9
 8022ffc:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(a, b, c, d, e, 10);
 8023000:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 8023004:	4027      	ands	r7, r4
 8023006:	406f      	eors	r7, r5
 8023008:	210a      	movs	r1, #10
 802300a:	a80e      	add	r0, sp, #56	@ 0x38
 802300c:	f7ff fcd4 	bl	80229b8 <blk0>
 8023010:	4407      	add	r7, r0
 8023012:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 8023016:	4437      	add	r7, r6
 8023018:	44b8      	add	r8, r7
 802301a:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(e, a, b, c, d, 11);
 802301e:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 8023022:	ea04 040a 	and.w	r4, r4, sl
 8023026:	ea84 0409 	eor.w	r4, r4, r9
 802302a:	210b      	movs	r1, #11
 802302c:	a80e      	add	r0, sp, #56	@ 0x38
 802302e:	f7ff fcc3 	bl	80229b8 <blk0>
 8023032:	4404      	add	r4, r0
 8023034:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 8023038:	4434      	add	r4, r6
 802303a:	4425      	add	r5, r4
 802303c:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(d, e, a, b, c, 12);
 8023040:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 8023044:	ea0a 0a08 	and.w	sl, sl, r8
 8023048:	ea8a 0a07 	eor.w	sl, sl, r7
 802304c:	210c      	movs	r1, #12
 802304e:	a80e      	add	r0, sp, #56	@ 0x38
 8023050:	f7ff fcb2 	bl	80229b8 <blk0>
 8023054:	4482      	add	sl, r0
 8023056:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 802305a:	44b2      	add	sl, r6
 802305c:	44d1      	add	r9, sl
 802305e:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(c, d, e, a, b, 13);
 8023062:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 8023066:	ea08 0805 	and.w	r8, r8, r5
 802306a:	ea88 0804 	eor.w	r8, r8, r4
 802306e:	210d      	movs	r1, #13
 8023070:	a80e      	add	r0, sp, #56	@ 0x38
 8023072:	f7ff fca1 	bl	80229b8 <blk0>
 8023076:	4480      	add	r8, r0
 8023078:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 802307c:	44b0      	add	r8, r6
 802307e:	4447      	add	r7, r8
 8023080:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(b, c, d, e, a, 14);
 8023084:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8023088:	ea05 0509 	and.w	r5, r5, r9
 802308c:	ea85 050a 	eor.w	r5, r5, sl
 8023090:	210e      	movs	r1, #14
 8023092:	a80e      	add	r0, sp, #56	@ 0x38
 8023094:	f7ff fc90 	bl	80229b8 <blk0>
 8023098:	4405      	add	r5, r0
 802309a:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 802309e:	4435      	add	r5, r6
 80230a0:	442c      	add	r4, r5
 80230a2:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(a, b, c, d, e, 15);
 80230a6:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 80230aa:	ea09 0907 	and.w	r9, r9, r7
 80230ae:	ea89 0908 	eor.w	r9, r9, r8
 80230b2:	210f      	movs	r1, #15
 80230b4:	a80e      	add	r0, sp, #56	@ 0x38
 80230b6:	f7ff fc7f 	bl	80229b8 <blk0>
 80230ba:	4481      	add	r9, r0
 80230bc:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 80230c0:	44b1      	add	r9, r6
 80230c2:	eb0a 0109 	add.w	r1, sl, r9
  R1(e, a, b, c, d, 16);
 80230c6:	ea85 03b7 	eor.w	r3, r5, r7, ror #2
 80230ca:	4023      	ands	r3, r4
 80230cc:	ea83 0205 	eor.w	r2, r3, r5
 80230d0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80230d2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80230d4:	4043      	eors	r3, r0
 80230d6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80230d8:	ea83 0c00 	eor.w	ip, r3, r0
 80230dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80230de:	ea8c 0303 	eor.w	r3, ip, r3
 80230e2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80230e6:	930e      	str	r3, [sp, #56]	@ 0x38
 80230e8:	9300      	str	r3, [sp, #0]
 80230ea:	18d3      	adds	r3, r2, r3
 80230ec:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 80230f0:	4433      	add	r3, r6
 80230f2:	eb08 0203 	add.w	r2, r8, r3
 80230f6:	ea4f 08b4 	mov.w	r8, r4, ror #2
  R1(d, e, a, b, c, 17);
 80230fa:	ea88 0cb7 	eor.w	ip, r8, r7, ror #2
 80230fe:	ea0c 0c01 	and.w	ip, ip, r1
 8023102:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8023106:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023108:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802310a:	ea83 0e04 	eor.w	lr, r3, r4
 802310e:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8023112:	ea8e 0e09 	eor.w	lr, lr, r9
 8023116:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023118:	ea8e 0e03 	eor.w	lr, lr, r3
 802311c:	ea4f 74fe 	mov.w	r4, lr, ror #31
 8023120:	940f      	str	r4, [sp, #60]	@ 0x3c
 8023122:	9401      	str	r4, [sp, #4]
 8023124:	44a4      	add	ip, r4
 8023126:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
 802312a:	44b4      	add	ip, r6
 802312c:	44ac      	add	ip, r5
  R1(c, d, e, a, b, 18);
 802312e:	ea88 05b1 	eor.w	r5, r8, r1, ror #2
 8023132:	4015      	ands	r5, r2
 8023134:	ea85 0508 	eor.w	r5, r5, r8
 8023138:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 802313a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802313c:	ea84 0e03 	eor.w	lr, r4, r3
 8023140:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023142:	ea8e 0e03 	eor.w	lr, lr, r3
 8023146:	ea80 000e 	eor.w	r0, r0, lr
 802314a:	ea4f 70f0 	mov.w	r0, r0, ror #31
 802314e:	9010      	str	r0, [sp, #64]	@ 0x40
 8023150:	9002      	str	r0, [sp, #8]
 8023152:	4405      	add	r5, r0
 8023154:	eb05 65fc 	add.w	r5, r5, ip, ror #27
 8023158:	4435      	add	r5, r6
 802315a:	eb05 05b7 	add.w	r5, r5, r7, ror #2
 802315e:	ea4f 02b2 	mov.w	r2, r2, ror #2
  R1(b, c, d, e, a, 19);
 8023162:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 8023166:	ea00 000c 	and.w	r0, r0, ip
 802316a:	ea80 00b1 	eor.w	r0, r0, r1, ror #2
 802316e:	9f00      	ldr	r7, [sp, #0]
 8023170:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8023172:	4067      	eors	r7, r4
 8023174:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8023178:	ea87 070e 	eor.w	r7, r7, lr
 802317c:	ea89 0907 	eor.w	r9, r9, r7
 8023180:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8023184:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 8023188:	4448      	add	r0, r9
 802318a:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 802318e:	4430      	add	r0, r6
 8023190:	eb08 0400 	add.w	r4, r8, r0
  R2(a, b, c, d, e, 20);
 8023194:	ea85 00bc 	eor.w	r0, r5, ip, ror #2
 8023198:	4050      	eors	r0, r2
 802319a:	9e01      	ldr	r6, [sp, #4]
 802319c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 802319e:	ea86 0807 	eor.w	r8, r6, r7
 80231a2:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80231a6:	ea88 080a 	eor.w	r8, r8, sl
 80231aa:	ea83 0808 	eor.w	r8, r3, r8
 80231ae:	ea4f 78f8 	mov.w	r8, r8, ror #31
 80231b2:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80231b6:	4440      	add	r0, r8
 80231b8:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 80231bc:	4b29      	ldr	r3, [pc, #164]	@ (8023264 <mg_sha1_transform+0x3e4>)
 80231be:	4418      	add	r0, r3
 80231c0:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(e, a, b, c, d, 21);
 80231c4:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 80231c8:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 80231cc:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 80231ce:	9f02      	ldr	r7, [sp, #8]
 80231d0:	4077      	eors	r7, r6
 80231d2:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80231d4:	4077      	eors	r7, r6
 80231d6:	ea8e 0707 	eor.w	r7, lr, r7
 80231da:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80231de:	9713      	str	r7, [sp, #76]	@ 0x4c
 80231e0:	9703      	str	r7, [sp, #12]
 80231e2:	4439      	add	r1, r7
 80231e4:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 80231e8:	4419      	add	r1, r3
 80231ea:	440a      	add	r2, r1
  R2(d, e, a, b, c, 22);
 80231ec:	ea80 01b4 	eor.w	r1, r0, r4, ror #2
 80231f0:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 80231f4:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 80231f6:	ea87 0e09 	eor.w	lr, r7, r9
 80231fa:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 80231fc:	ea87 0e0e 	eor.w	lr, r7, lr
 8023200:	ea8a 0e0e 	eor.w	lr, sl, lr
 8023204:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8023208:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 802320c:	4471      	add	r1, lr
 802320e:	eb01 61f2 	add.w	r1, r1, r2, ror #27
 8023212:	4419      	add	r1, r3
 8023214:	eb01 01bc 	add.w	r1, r1, ip, ror #2
  R2(c, d, e, a, b, 23);
 8023218:	ea82 0bb0 	eor.w	fp, r2, r0, ror #2
 802321c:	ea8b 0bb4 	eor.w	fp, fp, r4, ror #2
 8023220:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8023222:	ea87 0c08 	eor.w	ip, r7, r8
 8023226:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8023228:	ea87 0c0c 	eor.w	ip, r7, ip
 802322c:	ea86 0c0c 	eor.w	ip, r6, ip
 8023230:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8023234:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8023238:	44e3      	add	fp, ip
 802323a:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
 802323e:	449b      	add	fp, r3
 8023240:	eb0b 0bb5 	add.w	fp, fp, r5, ror #2
  R2(b, c, d, e, a, 24);
 8023244:	ea81 0ab2 	eor.w	sl, r1, r2, ror #2
 8023248:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
 802324c:	9d00      	ldr	r5, [sp, #0]
 802324e:	9e03      	ldr	r6, [sp, #12]
 8023250:	406e      	eors	r6, r5
 8023252:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8023254:	406e      	eors	r6, r5
 8023256:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8023258:	406e      	eors	r6, r5
 802325a:	ea4f 77f6 	mov.w	r7, r6, ror #31
 802325e:	e003      	b.n	8023268 <mg_sha1_transform+0x3e8>
 8023260:	5a827999 	.word	0x5a827999
 8023264:	6ed9eba1 	.word	0x6ed9eba1
 8023268:	9716      	str	r7, [sp, #88]	@ 0x58
 802326a:	9704      	str	r7, [sp, #16]
 802326c:	44ba      	add	sl, r7
 802326e:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
 8023272:	449a      	add	sl, r3
 8023274:	eb0a 0ab4 	add.w	sl, sl, r4, ror #2
  R2(a, b, c, d, e, 25);
 8023278:	ea8b 05b1 	eor.w	r5, fp, r1, ror #2
 802327c:	ea85 05b2 	eor.w	r5, r5, r2, ror #2
 8023280:	9e01      	ldr	r6, [sp, #4]
 8023282:	ea86 040e 	eor.w	r4, r6, lr
 8023286:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8023288:	407c      	eors	r4, r7
 802328a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 802328c:	407c      	eors	r4, r7
 802328e:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8023292:	9417      	str	r4, [sp, #92]	@ 0x5c
 8023294:	9405      	str	r4, [sp, #20]
 8023296:	4425      	add	r5, r4
 8023298:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 802329c:	441d      	add	r5, r3
 802329e:	eb05 05b0 	add.w	r5, r5, r0, ror #2
  R2(e, a, b, c, d, 26);
 80232a2:	ea8a 04bb 	eor.w	r4, sl, fp, ror #2
 80232a6:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 80232aa:	9e02      	ldr	r6, [sp, #8]
 80232ac:	ea86 000c 	eor.w	r0, r6, ip
 80232b0:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80232b2:	4078      	eors	r0, r7
 80232b4:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 80232b6:	4078      	eors	r0, r7
 80232b8:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80232bc:	4606      	mov	r6, r0
 80232be:	9018      	str	r0, [sp, #96]	@ 0x60
 80232c0:	4404      	add	r4, r0
 80232c2:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 80232c6:	441c      	add	r4, r3
 80232c8:	eb04 04b2 	add.w	r4, r4, r2, ror #2
  R2(d, e, a, b, c, 27);
 80232cc:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 80232d0:	ea80 00bb 	eor.w	r0, r0, fp, ror #2
 80232d4:	9f04      	ldr	r7, [sp, #16]
 80232d6:	ea89 0207 	eor.w	r2, r9, r7
 80232da:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 80232dc:	407a      	eors	r2, r7
 80232de:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 80232e0:	407a      	eors	r2, r7
 80232e2:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80232e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80232e8:	9206      	str	r2, [sp, #24]
 80232ea:	4410      	add	r0, r2
 80232ec:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 80232f0:	4418      	add	r0, r3
 80232f2:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(c, d, e, a, b, 28);
 80232f6:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 80232fa:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 80232fe:	9a05      	ldr	r2, [sp, #20]
 8023300:	ea88 0202 	eor.w	r2, r8, r2
 8023304:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8023306:	407a      	eors	r2, r7
 8023308:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 802330a:	407a      	eors	r2, r7
 802330c:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8023310:	921a      	str	r2, [sp, #104]	@ 0x68
 8023312:	9207      	str	r2, [sp, #28]
 8023314:	4411      	add	r1, r2
 8023316:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 802331a:	4419      	add	r1, r3
 802331c:	eb01 01bb 	add.w	r1, r1, fp, ror #2
  R2(b, c, d, e, a, 29);
 8023320:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 8023324:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 8023328:	960b      	str	r6, [sp, #44]	@ 0x2c
 802332a:	9f03      	ldr	r7, [sp, #12]
 802332c:	ea87 0b06 	eor.w	fp, r7, r6
 8023330:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8023332:	ea87 0b0b 	eor.w	fp, r7, fp
 8023336:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8023338:	ea87 0b0b 	eor.w	fp, r7, fp
 802333c:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8023340:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
 8023344:	f8cd b020 	str.w	fp, [sp, #32]
 8023348:	445a      	add	r2, fp
 802334a:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 802334e:	441a      	add	r2, r3
 8023350:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(a, b, c, d, e, 30);
 8023354:	ea81 0ab0 	eor.w	sl, r1, r0, ror #2
 8023358:	ea8a 0ab4 	eor.w	sl, sl, r4, ror #2
 802335c:	9e06      	ldr	r6, [sp, #24]
 802335e:	ea8e 0b06 	eor.w	fp, lr, r6
 8023362:	9e00      	ldr	r6, [sp, #0]
 8023364:	ea86 0b0b 	eor.w	fp, r6, fp
 8023368:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 802336a:	ea87 0b0b 	eor.w	fp, r7, fp
 802336e:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8023372:	f8cd b070 	str.w	fp, [sp, #112]	@ 0x70
 8023376:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 802337a:	44da      	add	sl, fp
 802337c:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
 8023380:	449a      	add	sl, r3
 8023382:	eb0a 0ab5 	add.w	sl, sl, r5, ror #2
  R2(e, a, b, c, d, 31);
 8023386:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 802338a:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 802338e:	9e07      	ldr	r6, [sp, #28]
 8023390:	ea8c 0b06 	eor.w	fp, ip, r6
 8023394:	9e01      	ldr	r6, [sp, #4]
 8023396:	ea86 0b0b 	eor.w	fp, r6, fp
 802339a:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 802339c:	ea87 0b0b 	eor.w	fp, r7, fp
 80233a0:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 80233a4:	f8cd b074 	str.w	fp, [sp, #116]	@ 0x74
 80233a8:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80233ac:	445d      	add	r5, fp
 80233ae:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 80233b2:	441d      	add	r5, r3
 80233b4:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(d, e, a, b, c, 32);
 80233b8:	ea8a 04b2 	eor.w	r4, sl, r2, ror #2
 80233bc:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 80233c0:	9e08      	ldr	r6, [sp, #32]
 80233c2:	9f04      	ldr	r7, [sp, #16]
 80233c4:	ea87 0b06 	eor.w	fp, r7, r6
 80233c8:	9e02      	ldr	r6, [sp, #8]
 80233ca:	ea86 0b0b 	eor.w	fp, r6, fp
 80233ce:	9e00      	ldr	r6, [sp, #0]
 80233d0:	ea86 0b0b 	eor.w	fp, r6, fp
 80233d4:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 80233d8:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80233dc:	f8cd b000 	str.w	fp, [sp]
 80233e0:	445c      	add	r4, fp
 80233e2:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 80233e6:	441c      	add	r4, r3
 80233e8:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(c, d, e, a, b, 33);
 80233ec:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 80233f0:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 80233f4:	9e05      	ldr	r6, [sp, #20]
 80233f6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80233f8:	ea86 0b07 	eor.w	fp, r6, r7
 80233fc:	ea89 0b0b 	eor.w	fp, r9, fp
 8023400:	9e01      	ldr	r6, [sp, #4]
 8023402:	ea86 0b0b 	eor.w	fp, r6, fp
 8023406:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 802340a:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 802340e:	f8cd b004 	str.w	fp, [sp, #4]
 8023412:	4458      	add	r0, fp
 8023414:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8023418:	4418      	add	r0, r3
 802341a:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(b, c, d, e, a, 34);
 802341e:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8023422:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 8023426:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8023428:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802342a:	ea86 0b07 	eor.w	fp, r6, r7
 802342e:	ea88 0b0b 	eor.w	fp, r8, fp
 8023432:	9e02      	ldr	r6, [sp, #8]
 8023434:	ea86 0b0b 	eor.w	fp, r6, fp
 8023438:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 802343c:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8023440:	f8cd b008 	str.w	fp, [sp, #8]
 8023444:	4459      	add	r1, fp
 8023446:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 802344a:	4419      	add	r1, r3
 802344c:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R2(a, b, c, d, e, 35);
 8023450:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 8023454:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 8023458:	9e06      	ldr	r6, [sp, #24]
 802345a:	9f00      	ldr	r7, [sp, #0]
 802345c:	ea86 0b07 	eor.w	fp, r6, r7
 8023460:	9e03      	ldr	r6, [sp, #12]
 8023462:	ea86 0b0b 	eor.w	fp, r6, fp
 8023466:	ea89 090b 	eor.w	r9, r9, fp
 802346a:	ea4f 7bf9 	mov.w	fp, r9, ror #31
 802346e:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 8023472:	445a      	add	r2, fp
 8023474:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8023478:	441a      	add	r2, r3
 802347a:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(e, a, b, c, d, 36);
 802347e:	ea81 09b0 	eor.w	r9, r1, r0, ror #2
 8023482:	ea89 09b4 	eor.w	r9, r9, r4, ror #2
 8023486:	9e07      	ldr	r6, [sp, #28]
 8023488:	9f01      	ldr	r7, [sp, #4]
 802348a:	ea86 0a07 	eor.w	sl, r6, r7
 802348e:	ea8e 0a0a 	eor.w	sl, lr, sl
 8023492:	ea88 080a 	eor.w	r8, r8, sl
 8023496:	ea4f 7af8 	mov.w	sl, r8, ror #31
 802349a:	f8cd a048 	str.w	sl, [sp, #72]	@ 0x48
 802349e:	44d1      	add	r9, sl
 80234a0:	eb09 69f2 	add.w	r9, r9, r2, ror #27
 80234a4:	4499      	add	r9, r3
 80234a6:	eb09 08b5 	add.w	r8, r9, r5, ror #2
  R2(d, e, a, b, c, 37);
 80234aa:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 80234ae:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 80234b2:	9e08      	ldr	r6, [sp, #32]
 80234b4:	9f02      	ldr	r7, [sp, #8]
 80234b6:	ea86 0907 	eor.w	r9, r6, r7
 80234ba:	ea8c 0909 	eor.w	r9, ip, r9
 80234be:	9e03      	ldr	r6, [sp, #12]
 80234c0:	ea86 0709 	eor.w	r7, r6, r9
 80234c4:	ea4f 79f7 	mov.w	r9, r7, ror #31
 80234c8:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 80234cc:	444d      	add	r5, r9
 80234ce:	eb05 65f8 	add.w	r5, r5, r8, ror #27
 80234d2:	441d      	add	r5, r3
 80234d4:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(c, d, e, a, b, 38);
 80234d8:	ea88 04b2 	eor.w	r4, r8, r2, ror #2
 80234dc:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 80234e0:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80234e2:	ea87 070b 	eor.w	r7, r7, fp
 80234e6:	9e04      	ldr	r6, [sp, #16]
 80234e8:	4077      	eors	r7, r6
 80234ea:	ea8e 0e07 	eor.w	lr, lr, r7
 80234ee:	ea4f 7efe 	mov.w	lr, lr, ror #31
 80234f2:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 80234f6:	4474      	add	r4, lr
 80234f8:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 80234fc:	441c      	add	r4, r3
 80234fe:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(b, c, d, e, a, 39);
 8023502:	ea85 00b8 	eor.w	r0, r5, r8, ror #2
 8023506:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 802350a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802350c:	ea87 070a 	eor.w	r7, r7, sl
 8023510:	9e05      	ldr	r6, [sp, #20]
 8023512:	4077      	eors	r7, r6
 8023514:	ea8c 0c07 	eor.w	ip, ip, r7
 8023518:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 802351c:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8023520:	f8cd c00c 	str.w	ip, [sp, #12]
 8023524:	4460      	add	r0, ip
 8023526:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 802352a:	4418      	add	r0, r3
 802352c:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(a, b, c, d, e, 40);
 8023530:	ea44 01b5 	orr.w	r1, r4, r5, ror #2
 8023534:	ea01 01b8 	and.w	r1, r1, r8, ror #2
 8023538:	ea04 03b5 	and.w	r3, r4, r5, ror #2
 802353c:	4319      	orrs	r1, r3
 802353e:	9b00      	ldr	r3, [sp, #0]
 8023540:	ea83 0309 	eor.w	r3, r3, r9
 8023544:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8023546:	4073      	eors	r3, r6
 8023548:	9e04      	ldr	r6, [sp, #16]
 802354a:	405e      	eors	r6, r3
 802354c:	ea4f 73f6 	mov.w	r3, r6, ror #31
 8023550:	9316      	str	r3, [sp, #88]	@ 0x58
 8023552:	9304      	str	r3, [sp, #16]
 8023554:	4419      	add	r1, r3
 8023556:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 802355a:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 802355e:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 8023562:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 8023566:	311c      	adds	r1, #28
 8023568:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(e, a, b, c, d, 41);
 802356c:	ea40 02b4 	orr.w	r2, r0, r4, ror #2
 8023570:	ea02 02b5 	and.w	r2, r2, r5, ror #2
 8023574:	ea00 06b4 	and.w	r6, r0, r4, ror #2
 8023578:	4332      	orrs	r2, r6
 802357a:	9b01      	ldr	r3, [sp, #4]
 802357c:	ea83 060e 	eor.w	r6, r3, lr
 8023580:	9b06      	ldr	r3, [sp, #24]
 8023582:	405e      	eors	r6, r3
 8023584:	9f05      	ldr	r7, [sp, #20]
 8023586:	407e      	eors	r6, r7
 8023588:	ea4f 77f6 	mov.w	r7, r6, ror #31
 802358c:	9717      	str	r7, [sp, #92]	@ 0x5c
 802358e:	9705      	str	r7, [sp, #20]
 8023590:	443a      	add	r2, r7
 8023592:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8023596:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 802359a:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 802359e:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 80235a2:	321c      	adds	r2, #28
 80235a4:	eb02 02b8 	add.w	r2, r2, r8, ror #2
  R3(d, e, a, b, c, 42);
 80235a8:	ea41 06b0 	orr.w	r6, r1, r0, ror #2
 80235ac:	ea06 06b4 	and.w	r6, r6, r4, ror #2
 80235b0:	ea01 07b0 	and.w	r7, r1, r0, ror #2
 80235b4:	433e      	orrs	r6, r7
 80235b6:	9f02      	ldr	r7, [sp, #8]
 80235b8:	4663      	mov	r3, ip
 80235ba:	405f      	eors	r7, r3
 80235bc:	9b07      	ldr	r3, [sp, #28]
 80235be:	405f      	eors	r7, r3
 80235c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80235c2:	405f      	eors	r7, r3
 80235c4:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80235c8:	9718      	str	r7, [sp, #96]	@ 0x60
 80235ca:	970b      	str	r7, [sp, #44]	@ 0x2c
 80235cc:	443e      	add	r6, r7
 80235ce:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 80235d2:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 80235d6:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 80235da:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 80235de:	361c      	adds	r6, #28
 80235e0:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R3(c, d, e, a, b, 43);
 80235e4:	ea42 07b1 	orr.w	r7, r2, r1, ror #2
 80235e8:	ea07 07b0 	and.w	r7, r7, r0, ror #2
 80235ec:	ea02 05b1 	and.w	r5, r2, r1, ror #2
 80235f0:	432f      	orrs	r7, r5
 80235f2:	9d04      	ldr	r5, [sp, #16]
 80235f4:	ea8b 0505 	eor.w	r5, fp, r5
 80235f8:	9b08      	ldr	r3, [sp, #32]
 80235fa:	405d      	eors	r5, r3
 80235fc:	9b06      	ldr	r3, [sp, #24]
 80235fe:	405d      	eors	r5, r3
 8023600:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8023604:	9519      	str	r5, [sp, #100]	@ 0x64
 8023606:	9506      	str	r5, [sp, #24]
 8023608:	442f      	add	r7, r5
 802360a:	eb07 67f6 	add.w	r7, r7, r6, ror #27
 802360e:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 8023612:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 8023616:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 802361a:	371c      	adds	r7, #28
 802361c:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R3(b, c, d, e, a, 44);
 8023620:	ea46 0cb2 	orr.w	ip, r6, r2, ror #2
 8023624:	ea0c 0cb1 	and.w	ip, ip, r1, ror #2
 8023628:	ea06 04b2 	and.w	r4, r6, r2, ror #2
 802362c:	ea4c 0c04 	orr.w	ip, ip, r4
 8023630:	9c05      	ldr	r4, [sp, #20]
 8023632:	ea8a 0404 	eor.w	r4, sl, r4
 8023636:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8023638:	406c      	eors	r4, r5
 802363a:	9b07      	ldr	r3, [sp, #28]
 802363c:	405c      	eors	r4, r3
 802363e:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8023642:	941a      	str	r4, [sp, #104]	@ 0x68
 8023644:	9407      	str	r4, [sp, #28]
 8023646:	44a4      	add	ip, r4
 8023648:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
 802364c:	f10c 4c0f 	add.w	ip, ip, #2399141888	@ 0x8f000000
 8023650:	f50c 1cdd 	add.w	ip, ip, #1810432	@ 0x1ba000
 8023654:	f50c 5ce6 	add.w	ip, ip, #7360	@ 0x1cc0
 8023658:	f10c 0c1c 	add.w	ip, ip, #28
 802365c:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R3(a, b, c, d, e, 45);
 8023660:	ea47 00b6 	orr.w	r0, r7, r6, ror #2
 8023664:	ea00 00b2 	and.w	r0, r0, r2, ror #2
 8023668:	ea07 04b6 	and.w	r4, r7, r6, ror #2
 802366c:	4320      	orrs	r0, r4
 802366e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023670:	ea89 0404 	eor.w	r4, r9, r4
 8023674:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8023676:	406c      	eors	r4, r5
 8023678:	9b08      	ldr	r3, [sp, #32]
 802367a:	405c      	eors	r4, r3
 802367c:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8023680:	941b      	str	r4, [sp, #108]	@ 0x6c
 8023682:	9408      	str	r4, [sp, #32]
 8023684:	4420      	add	r0, r4
 8023686:	eb00 60fc 	add.w	r0, r0, ip, ror #27
 802368a:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 802368e:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 8023692:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 8023696:	301c      	adds	r0, #28
 8023698:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(e, a, b, c, d, 46);
 802369c:	ea4c 05b7 	orr.w	r5, ip, r7, ror #2
 80236a0:	ea05 05b6 	and.w	r5, r5, r6, ror #2
 80236a4:	ea0c 01b7 	and.w	r1, ip, r7, ror #2
 80236a8:	430d      	orrs	r5, r1
 80236aa:	9906      	ldr	r1, [sp, #24]
 80236ac:	ea8e 0101 	eor.w	r1, lr, r1
 80236b0:	9c00      	ldr	r4, [sp, #0]
 80236b2:	4061      	eors	r1, r4
 80236b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80236b6:	4059      	eors	r1, r3
 80236b8:	ea4f 71f1 	mov.w	r1, r1, ror #31
 80236bc:	911c      	str	r1, [sp, #112]	@ 0x70
 80236be:	9109      	str	r1, [sp, #36]	@ 0x24
 80236c0:	440d      	add	r5, r1
 80236c2:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 80236c6:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 80236ca:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 80236ce:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 80236d2:	351c      	adds	r5, #28
 80236d4:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R3(d, e, a, b, c, 47);
 80236d8:	ea40 04bc 	orr.w	r4, r0, ip, ror #2
 80236dc:	ea04 04b7 	and.w	r4, r4, r7, ror #2
 80236e0:	ea00 02bc 	and.w	r2, r0, ip, ror #2
 80236e4:	4314      	orrs	r4, r2
 80236e6:	9903      	ldr	r1, [sp, #12]
 80236e8:	9a07      	ldr	r2, [sp, #28]
 80236ea:	404a      	eors	r2, r1
 80236ec:	9901      	ldr	r1, [sp, #4]
 80236ee:	404a      	eors	r2, r1
 80236f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80236f2:	405a      	eors	r2, r3
 80236f4:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80236f8:	921d      	str	r2, [sp, #116]	@ 0x74
 80236fa:	920a      	str	r2, [sp, #40]	@ 0x28
 80236fc:	4414      	add	r4, r2
 80236fe:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8023702:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 8023706:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 802370a:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 802370e:	341c      	adds	r4, #28
 8023710:	eb04 04b6 	add.w	r4, r4, r6, ror #2
  R3(c, d, e, a, b, 48);
 8023714:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 8023718:	ea01 01bc 	and.w	r1, r1, ip, ror #2
 802371c:	ea05 02b0 	and.w	r2, r5, r0, ror #2
 8023720:	4311      	orrs	r1, r2
 8023722:	9a04      	ldr	r2, [sp, #16]
 8023724:	9e08      	ldr	r6, [sp, #32]
 8023726:	4072      	eors	r2, r6
 8023728:	9e02      	ldr	r6, [sp, #8]
 802372a:	4072      	eors	r2, r6
 802372c:	9b00      	ldr	r3, [sp, #0]
 802372e:	405a      	eors	r2, r3
 8023730:	ea4f 76f2 	mov.w	r6, r2, ror #31
 8023734:	960e      	str	r6, [sp, #56]	@ 0x38
 8023736:	9600      	str	r6, [sp, #0]
 8023738:	4431      	add	r1, r6
 802373a:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 802373e:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 8023742:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 8023746:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 802374a:	311c      	adds	r1, #28
 802374c:	eb01 01b7 	add.w	r1, r1, r7, ror #2
  R3(b, c, d, e, a, 49);
 8023750:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 8023754:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 8023758:	ea04 06b5 	and.w	r6, r4, r5, ror #2
 802375c:	4332      	orrs	r2, r6
 802375e:	9f05      	ldr	r7, [sp, #20]
 8023760:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8023762:	407e      	eors	r6, r7
 8023764:	ea8b 0606 	eor.w	r6, fp, r6
 8023768:	9b01      	ldr	r3, [sp, #4]
 802376a:	405e      	eors	r6, r3
 802376c:	ea4f 73f6 	mov.w	r3, r6, ror #31
 8023770:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023772:	9301      	str	r3, [sp, #4]
 8023774:	441a      	add	r2, r3
 8023776:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 802377a:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 802377e:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 8023782:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 8023786:	321c      	adds	r2, #28
 8023788:	eb02 02bc 	add.w	r2, r2, ip, ror #2
  R3(a, b, c, d, e, 50);
 802378c:	ea41 06b4 	orr.w	r6, r1, r4, ror #2
 8023790:	ea06 06b5 	and.w	r6, r6, r5, ror #2
 8023794:	ea01 07b4 	and.w	r7, r1, r4, ror #2
 8023798:	433e      	orrs	r6, r7
 802379a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802379c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802379e:	405f      	eors	r7, r3
 80237a0:	ea8a 0707 	eor.w	r7, sl, r7
 80237a4:	9b02      	ldr	r3, [sp, #8]
 80237a6:	405f      	eors	r7, r3
 80237a8:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80237ac:	9710      	str	r7, [sp, #64]	@ 0x40
 80237ae:	9702      	str	r7, [sp, #8]
 80237b0:	443e      	add	r6, r7
 80237b2:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 80237b6:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 80237ba:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 80237be:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 80237c2:	361c      	adds	r6, #28
 80237c4:	eb06 06b0 	add.w	r6, r6, r0, ror #2
  R3(e, a, b, c, d, 51);
 80237c8:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 80237cc:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 80237d0:	ea02 07b1 	and.w	r7, r2, r1, ror #2
 80237d4:	4338      	orrs	r0, r7
 80237d6:	9b06      	ldr	r3, [sp, #24]
 80237d8:	9f00      	ldr	r7, [sp, #0]
 80237da:	405f      	eors	r7, r3
 80237dc:	ea89 0707 	eor.w	r7, r9, r7
 80237e0:	ea8b 0b07 	eor.w	fp, fp, r7
 80237e4:	ea4f 7cfb 	mov.w	ip, fp, ror #31
 80237e8:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 80237ec:	4460      	add	r0, ip
 80237ee:	eb00 60f6 	add.w	r0, r0, r6, ror #27
 80237f2:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 80237f6:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 80237fa:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 80237fe:	301c      	adds	r0, #28
 8023800:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(d, e, a, b, c, 52);
 8023804:	ea46 05b2 	orr.w	r5, r6, r2, ror #2
 8023808:	ea05 05b1 	and.w	r5, r5, r1, ror #2
 802380c:	ea06 07b2 	and.w	r7, r6, r2, ror #2
 8023810:	433d      	orrs	r5, r7
 8023812:	9f07      	ldr	r7, [sp, #28]
 8023814:	9b01      	ldr	r3, [sp, #4]
 8023816:	405f      	eors	r7, r3
 8023818:	ea8e 0707 	eor.w	r7, lr, r7
 802381c:	ea8a 0a07 	eor.w	sl, sl, r7
 8023820:	ea4f 78fa 	mov.w	r8, sl, ror #31
 8023824:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8023828:	4445      	add	r5, r8
 802382a:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 802382e:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 8023832:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 8023836:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 802383a:	351c      	adds	r5, #28
 802383c:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R3(c, d, e, a, b, 53);
 8023840:	ea40 04b6 	orr.w	r4, r0, r6, ror #2
 8023844:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 8023848:	ea00 07b6 	and.w	r7, r0, r6, ror #2
 802384c:	433c      	orrs	r4, r7
 802384e:	9b08      	ldr	r3, [sp, #32]
 8023850:	9f02      	ldr	r7, [sp, #8]
 8023852:	405f      	eors	r7, r3
 8023854:	9b03      	ldr	r3, [sp, #12]
 8023856:	405f      	eors	r7, r3
 8023858:	ea89 0707 	eor.w	r7, r9, r7
 802385c:	ea4f 79f7 	mov.w	r9, r7, ror #31
 8023860:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 8023864:	444c      	add	r4, r9
 8023866:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 802386a:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 802386e:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 8023872:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 8023876:	341c      	adds	r4, #28
 8023878:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R3(b, c, d, e, a, 54);
 802387c:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 8023880:	ea01 01b6 	and.w	r1, r1, r6, ror #2
 8023884:	ea05 07b0 	and.w	r7, r5, r0, ror #2
 8023888:	4339      	orrs	r1, r7
 802388a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802388c:	ea83 070c 	eor.w	r7, r3, ip
 8023890:	9b04      	ldr	r3, [sp, #16]
 8023892:	405f      	eors	r7, r3
 8023894:	ea8e 0707 	eor.w	r7, lr, r7
 8023898:	ea4f 77f7 	mov.w	r7, r7, ror #31
 802389c:	9714      	str	r7, [sp, #80]	@ 0x50
 802389e:	970c      	str	r7, [sp, #48]	@ 0x30
 80238a0:	4439      	add	r1, r7
 80238a2:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 80238a6:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 80238aa:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 80238ae:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 80238b2:	311c      	adds	r1, #28
 80238b4:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(a, b, c, d, e, 55);
 80238b8:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 80238bc:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 80238c0:	ea04 07b5 	and.w	r7, r4, r5, ror #2
 80238c4:	433a      	orrs	r2, r7
 80238c6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80238c8:	ea87 0708 	eor.w	r7, r7, r8
 80238cc:	9b05      	ldr	r3, [sp, #20]
 80238ce:	405f      	eors	r7, r3
 80238d0:	9b03      	ldr	r3, [sp, #12]
 80238d2:	405f      	eors	r7, r3
 80238d4:	ea4f 7bf7 	mov.w	fp, r7, ror #31
 80238d8:	f8cd b054 	str.w	fp, [sp, #84]	@ 0x54
 80238dc:	445a      	add	r2, fp
 80238de:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 80238e2:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 80238e6:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 80238ea:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 80238ee:	321c      	adds	r2, #28
 80238f0:	eb02 02b6 	add.w	r2, r2, r6, ror #2
  R3(e, a, b, c, d, 56);
 80238f4:	ea41 07b4 	orr.w	r7, r1, r4, ror #2
 80238f8:	ea07 07b5 	and.w	r7, r7, r5, ror #2
 80238fc:	ea01 06b4 	and.w	r6, r1, r4, ror #2
 8023900:	4337      	orrs	r7, r6
 8023902:	9e00      	ldr	r6, [sp, #0]
 8023904:	ea86 0609 	eor.w	r6, r6, r9
 8023908:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802390a:	405e      	eors	r6, r3
 802390c:	9b04      	ldr	r3, [sp, #16]
 802390e:	405e      	eors	r6, r3
 8023910:	ea4f 7af6 	mov.w	sl, r6, ror #31
 8023914:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
 8023918:	4457      	add	r7, sl
 802391a:	eb07 67f2 	add.w	r7, r7, r2, ror #27
 802391e:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 8023922:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 8023926:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 802392a:	371c      	adds	r7, #28
 802392c:	eb07 07b0 	add.w	r7, r7, r0, ror #2
  R3(d, e, a, b, c, 57);
 8023930:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 8023934:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 8023938:	ea02 06b1 	and.w	r6, r2, r1, ror #2
 802393c:	4330      	orrs	r0, r6
 802393e:	9e01      	ldr	r6, [sp, #4]
 8023940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023942:	405e      	eors	r6, r3
 8023944:	9b06      	ldr	r3, [sp, #24]
 8023946:	405e      	eors	r6, r3
 8023948:	9b05      	ldr	r3, [sp, #20]
 802394a:	405e      	eors	r6, r3
 802394c:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8023950:	9617      	str	r6, [sp, #92]	@ 0x5c
 8023952:	9603      	str	r6, [sp, #12]
 8023954:	4430      	add	r0, r6
 8023956:	eb00 60f7 	add.w	r0, r0, r7, ror #27
 802395a:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 802395e:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 8023962:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 8023966:	301c      	adds	r0, #28
 8023968:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(c, d, e, a, b, 58);
 802396c:	ea47 06b2 	orr.w	r6, r7, r2, ror #2
 8023970:	ea06 06b1 	and.w	r6, r6, r1, ror #2
 8023974:	ea07 05b2 	and.w	r5, r7, r2, ror #2
 8023978:	432e      	orrs	r6, r5
 802397a:	9d02      	ldr	r5, [sp, #8]
 802397c:	ea85 050b 	eor.w	r5, r5, fp
 8023980:	9b07      	ldr	r3, [sp, #28]
 8023982:	405d      	eors	r5, r3
 8023984:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023986:	405d      	eors	r5, r3
 8023988:	ea4f 75f5 	mov.w	r5, r5, ror #31
 802398c:	9518      	str	r5, [sp, #96]	@ 0x60
 802398e:	9504      	str	r5, [sp, #16]
 8023990:	442e      	add	r6, r5
 8023992:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 8023996:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 802399a:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 802399e:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 80239a2:	361c      	adds	r6, #28
 80239a4:	eb06 06b4 	add.w	r6, r6, r4, ror #2
  R3(b, c, d, e, a, 59);
 80239a8:	ea40 04b7 	orr.w	r4, r0, r7, ror #2
 80239ac:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 80239b0:	ea00 05b7 	and.w	r5, r0, r7, ror #2
 80239b4:	432c      	orrs	r4, r5
 80239b6:	ea8c 050a 	eor.w	r5, ip, sl
 80239ba:	9b08      	ldr	r3, [sp, #32]
 80239bc:	405d      	eors	r5, r3
 80239be:	9b06      	ldr	r3, [sp, #24]
 80239c0:	405d      	eors	r5, r3
 80239c2:	ea4f 75f5 	mov.w	r5, r5, ror #31
 80239c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80239c8:	9505      	str	r5, [sp, #20]
 80239ca:	442c      	add	r4, r5
 80239cc:	eb04 64f6 	add.w	r4, r4, r6, ror #27
 80239d0:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 80239d4:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 80239d8:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 80239dc:	341c      	adds	r4, #28
 80239de:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R4(a, b, c, d, e, 60);
 80239e2:	ea86 01b0 	eor.w	r1, r6, r0, ror #2
 80239e6:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
 80239ea:	9d03      	ldr	r5, [sp, #12]
 80239ec:	ea88 0305 	eor.w	r3, r8, r5
 80239f0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80239f2:	406b      	eors	r3, r5
 80239f4:	9d07      	ldr	r5, [sp, #28]
 80239f6:	406b      	eors	r3, r5
 80239f8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80239fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80239fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023a00:	4419      	add	r1, r3
 8023a02:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 8023a06:	f8df e3fc 	ldr.w	lr, [pc, #1020]	@ 8023e04 <mg_sha1_transform+0xf84>
 8023a0a:	4471      	add	r1, lr
 8023a0c:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R4(e, a, b, c, d, 61);
 8023a10:	ea84 02b6 	eor.w	r2, r4, r6, ror #2
 8023a14:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8023a18:	9b04      	ldr	r3, [sp, #16]
 8023a1a:	ea89 0303 	eor.w	r3, r9, r3
 8023a1e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8023a20:	406b      	eors	r3, r5
 8023a22:	9d08      	ldr	r5, [sp, #32]
 8023a24:	406b      	eors	r3, r5
 8023a26:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8023a2a:	931b      	str	r3, [sp, #108]	@ 0x6c
 8023a2c:	9306      	str	r3, [sp, #24]
 8023a2e:	441a      	add	r2, r3
 8023a30:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8023a34:	4472      	add	r2, lr
 8023a36:	eb02 02b7 	add.w	r2, r2, r7, ror #2
  R4(d, e, a, b, c, 62);
 8023a3a:	ea81 03b4 	eor.w	r3, r1, r4, ror #2
 8023a3e:	ea83 03b6 	eor.w	r3, r3, r6, ror #2
 8023a42:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8023a44:	9d05      	ldr	r5, [sp, #20]
 8023a46:	406f      	eors	r7, r5
 8023a48:	9d00      	ldr	r5, [sp, #0]
 8023a4a:	406f      	eors	r7, r5
 8023a4c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8023a4e:	406f      	eors	r7, r5
 8023a50:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8023a54:	971c      	str	r7, [sp, #112]	@ 0x70
 8023a56:	9707      	str	r7, [sp, #28]
 8023a58:	443b      	add	r3, r7
 8023a5a:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 8023a5e:	4473      	add	r3, lr
 8023a60:	eb03 03b0 	add.w	r3, r3, r0, ror #2
  R4(c, d, e, a, b, 63);
 8023a64:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 8023a68:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
 8023a6c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023a6e:	ea8b 0707 	eor.w	r7, fp, r7
 8023a72:	9d01      	ldr	r5, [sp, #4]
 8023a74:	406f      	eors	r7, r5
 8023a76:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8023a78:	406f      	eors	r7, r5
 8023a7a:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8023a7e:	971d      	str	r7, [sp, #116]	@ 0x74
 8023a80:	9708      	str	r7, [sp, #32]
 8023a82:	4438      	add	r0, r7
 8023a84:	eb00 60f3 	add.w	r0, r0, r3, ror #27
 8023a88:	4470      	add	r0, lr
 8023a8a:	eb00 00b6 	add.w	r0, r0, r6, ror #2
  R4(b, c, d, e, a, 64);
 8023a8e:	ea83 07b2 	eor.w	r7, r3, r2, ror #2
 8023a92:	ea87 07b1 	eor.w	r7, r7, r1, ror #2
 8023a96:	9e06      	ldr	r6, [sp, #24]
 8023a98:	ea8a 0606 	eor.w	r6, sl, r6
 8023a9c:	9d02      	ldr	r5, [sp, #8]
 8023a9e:	406e      	eors	r6, r5
 8023aa0:	9d00      	ldr	r5, [sp, #0]
 8023aa2:	406e      	eors	r6, r5
 8023aa4:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8023aa8:	960e      	str	r6, [sp, #56]	@ 0x38
 8023aaa:	9600      	str	r6, [sp, #0]
 8023aac:	4437      	add	r7, r6
 8023aae:	eb07 67f0 	add.w	r7, r7, r0, ror #27
 8023ab2:	4477      	add	r7, lr
 8023ab4:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R4(a, b, c, d, e, 65);
 8023ab8:	ea80 06b3 	eor.w	r6, r0, r3, ror #2
 8023abc:	ea86 06b2 	eor.w	r6, r6, r2, ror #2
 8023ac0:	9c03      	ldr	r4, [sp, #12]
 8023ac2:	9d07      	ldr	r5, [sp, #28]
 8023ac4:	406c      	eors	r4, r5
 8023ac6:	ea8c 0404 	eor.w	r4, ip, r4
 8023aca:	9d01      	ldr	r5, [sp, #4]
 8023acc:	406c      	eors	r4, r5
 8023ace:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8023ad2:	940f      	str	r4, [sp, #60]	@ 0x3c
 8023ad4:	9401      	str	r4, [sp, #4]
 8023ad6:	4426      	add	r6, r4
 8023ad8:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8023adc:	4476      	add	r6, lr
 8023ade:	eb06 06b1 	add.w	r6, r6, r1, ror #2
  R4(e, a, b, c, d, 66);
 8023ae2:	ea87 05b0 	eor.w	r5, r7, r0, ror #2
 8023ae6:	ea85 05b3 	eor.w	r5, r5, r3, ror #2
 8023aea:	9904      	ldr	r1, [sp, #16]
 8023aec:	9c08      	ldr	r4, [sp, #32]
 8023aee:	4061      	eors	r1, r4
 8023af0:	ea88 0101 	eor.w	r1, r8, r1
 8023af4:	9c02      	ldr	r4, [sp, #8]
 8023af6:	4061      	eors	r1, r4
 8023af8:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8023afc:	9110      	str	r1, [sp, #64]	@ 0x40
 8023afe:	440d      	add	r5, r1
 8023b00:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 8023b04:	4475      	add	r5, lr
 8023b06:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R4(d, e, a, b, c, 67);
 8023b0a:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 8023b0e:	ea8e 0eb0 	eor.w	lr, lr, r0, ror #2
 8023b12:	9a05      	ldr	r2, [sp, #20]
 8023b14:	9c00      	ldr	r4, [sp, #0]
 8023b16:	4062      	eors	r2, r4
 8023b18:	ea89 0202 	eor.w	r2, r9, r2
 8023b1c:	ea8c 0202 	eor.w	r2, ip, r2
 8023b20:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8023b24:	9211      	str	r2, [sp, #68]	@ 0x44
 8023b26:	4496      	add	lr, r2
 8023b28:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 8023b2c:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 8023b30:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 8023b34:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 8023b38:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 8023b3c:	eb0e 0eb3 	add.w	lr, lr, r3, ror #2
  R4(c, d, e, a, b, 68);
 8023b40:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 8023b44:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8023b48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023b4a:	9c01      	ldr	r4, [sp, #4]
 8023b4c:	4063      	eors	r3, r4
 8023b4e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023b50:	4063      	eors	r3, r4
 8023b52:	ea88 0303 	eor.w	r3, r8, r3
 8023b56:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8023b5a:	9312      	str	r3, [sp, #72]	@ 0x48
 8023b5c:	449c      	add	ip, r3
 8023b5e:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 8023b62:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 8023b66:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 8023b6a:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 8023b6e:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 8023b72:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R4(b, c, d, e, a, 69);
 8023b76:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 8023b7a:	ea88 08b6 	eor.w	r8, r8, r6, ror #2
 8023b7e:	9806      	ldr	r0, [sp, #24]
 8023b80:	4048      	eors	r0, r1
 8023b82:	ea8b 0000 	eor.w	r0, fp, r0
 8023b86:	ea89 0000 	eor.w	r0, r9, r0
 8023b8a:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8023b8e:	9013      	str	r0, [sp, #76]	@ 0x4c
 8023b90:	4480      	add	r8, r0
 8023b92:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 8023b96:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 8023b9a:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 8023b9e:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 8023ba2:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 8023ba6:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(a, b, c, d, e, 70);
 8023baa:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 8023bae:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 8023bb2:	9702      	str	r7, [sp, #8]
 8023bb4:	9f07      	ldr	r7, [sp, #28]
 8023bb6:	ea87 0902 	eor.w	r9, r7, r2
 8023bba:	ea8a 0909 	eor.w	r9, sl, r9
 8023bbe:	ea84 0909 	eor.w	r9, r4, r9
 8023bc2:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8023bc6:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 8023bca:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8023bce:	9c02      	ldr	r4, [sp, #8]
 8023bd0:	444c      	add	r4, r9
 8023bd2:	eb04 67f8 	add.w	r7, r4, r8, ror #27
 8023bd6:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 8023bda:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 8023bde:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 8023be2:	3756      	adds	r7, #86	@ 0x56
 8023be4:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(e, a, b, c, d, 71);
 8023be8:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 8023bec:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 8023bf0:	9c08      	ldr	r4, [sp, #32]
 8023bf2:	ea84 0903 	eor.w	r9, r4, r3
 8023bf6:	9c03      	ldr	r4, [sp, #12]
 8023bf8:	ea84 0909 	eor.w	r9, r4, r9
 8023bfc:	ea8b 0909 	eor.w	r9, fp, r9
 8023c00:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8023c04:	f8cd 9054 	str.w	r9, [sp, #84]	@ 0x54
 8023c08:	444e      	add	r6, r9
 8023c0a:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8023c0e:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 8023c12:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 8023c16:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 8023c1a:	3656      	adds	r6, #86	@ 0x56
 8023c1c:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(d, e, a, b, c, 72);
 8023c20:	ea87 05b8 	eor.w	r5, r7, r8, ror #2
 8023c24:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
 8023c28:	9c00      	ldr	r4, [sp, #0]
 8023c2a:	ea84 0b00 	eor.w	fp, r4, r0
 8023c2e:	9c04      	ldr	r4, [sp, #16]
 8023c30:	ea84 0b0b 	eor.w	fp, r4, fp
 8023c34:	ea8a 0b0b 	eor.w	fp, sl, fp
 8023c38:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8023c3c:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 8023c40:	445d      	add	r5, fp
 8023c42:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 8023c46:	f105 454a 	add.w	r5, r5, #3388997632	@ 0xca000000
 8023c4a:	f505 05c5 	add.w	r5, r5, #6455296	@ 0x628000
 8023c4e:	f505 4583 	add.w	r5, r5, #16768	@ 0x4180
 8023c52:	3556      	adds	r5, #86	@ 0x56
 8023c54:	eb05 05be 	add.w	r5, r5, lr, ror #2
  R4(c, d, e, a, b, 73);
 8023c58:	9602      	str	r6, [sp, #8]
 8023c5a:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 8023c5e:	ea8e 0eb8 	eor.w	lr, lr, r8, ror #2
 8023c62:	9c01      	ldr	r4, [sp, #4]
 8023c64:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8023c66:	ea84 0a06 	eor.w	sl, r4, r6
 8023c6a:	9c05      	ldr	r4, [sp, #20]
 8023c6c:	ea84 0a0a 	eor.w	sl, r4, sl
 8023c70:	9c03      	ldr	r4, [sp, #12]
 8023c72:	ea84 0a0a 	eor.w	sl, r4, sl
 8023c76:	ea4f 7afa 	mov.w	sl, sl, ror #31
 8023c7a:	f8cd a05c 	str.w	sl, [sp, #92]	@ 0x5c
 8023c7e:	44d6      	add	lr, sl
 8023c80:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 8023c84:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 8023c88:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 8023c8c:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 8023c90:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 8023c94:	eb0e 0ebc 	add.w	lr, lr, ip, ror #2
  R4(b, c, d, e, a, 74);
 8023c98:	9e02      	ldr	r6, [sp, #8]
 8023c9a:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 8023c9e:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8023ca2:	ea81 0109 	eor.w	r1, r1, r9
 8023ca6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8023ca8:	4071      	eors	r1, r6
 8023caa:	9c04      	ldr	r4, [sp, #16]
 8023cac:	4061      	eors	r1, r4
 8023cae:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8023cb2:	9118      	str	r1, [sp, #96]	@ 0x60
 8023cb4:	448c      	add	ip, r1
 8023cb6:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 8023cba:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 8023cbe:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 8023cc2:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 8023cc6:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 8023cca:	eb0c 0cb8 	add.w	ip, ip, r8, ror #2
  R4(a, b, c, d, e, 75);
 8023cce:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 8023cd2:	9c02      	ldr	r4, [sp, #8]
 8023cd4:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
 8023cd8:	ea82 020b 	eor.w	r2, r2, fp
 8023cdc:	9c06      	ldr	r4, [sp, #24]
 8023cde:	4062      	eors	r2, r4
 8023ce0:	9c05      	ldr	r4, [sp, #20]
 8023ce2:	4062      	eors	r2, r4
 8023ce4:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8023ce8:	9219      	str	r2, [sp, #100]	@ 0x64
 8023cea:	4490      	add	r8, r2
 8023cec:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 8023cf0:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 8023cf4:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 8023cf8:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 8023cfc:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 8023d00:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(e, a, b, c, d, 76);
 8023d04:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 8023d08:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 8023d0c:	ea83 030a 	eor.w	r3, r3, sl
 8023d10:	9c07      	ldr	r4, [sp, #28]
 8023d12:	4063      	eors	r3, r4
 8023d14:	4073      	eors	r3, r6
 8023d16:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8023d1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8023d1c:	441f      	add	r7, r3
 8023d1e:	eb07 67f8 	add.w	r7, r7, r8, ror #27
 8023d22:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 8023d26:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 8023d2a:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 8023d2e:	3756      	adds	r7, #86	@ 0x56
 8023d30:	9e02      	ldr	r6, [sp, #8]
 8023d32:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(d, e, a, b, c, 77);
 8023d36:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 8023d3a:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 8023d3e:	4048      	eors	r0, r1
 8023d40:	9908      	ldr	r1, [sp, #32]
 8023d42:	4048      	eors	r0, r1
 8023d44:	9c06      	ldr	r4, [sp, #24]
 8023d46:	4060      	eors	r0, r4
 8023d48:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8023d4c:	901b      	str	r0, [sp, #108]	@ 0x6c
 8023d4e:	4406      	add	r6, r0
 8023d50:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8023d54:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 8023d58:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 8023d5c:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 8023d60:	3656      	adds	r6, #86	@ 0x56
 8023d62:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(c, d, e, a, b, 78);
 8023d66:	ea87 01b8 	eor.w	r1, r7, r8, ror #2
 8023d6a:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 8023d6e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8023d70:	406a      	eors	r2, r5
 8023d72:	9d00      	ldr	r5, [sp, #0]
 8023d74:	406a      	eors	r2, r5
 8023d76:	9c07      	ldr	r4, [sp, #28]
 8023d78:	4062      	eors	r2, r4
 8023d7a:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8023d7e:	921c      	str	r2, [sp, #112]	@ 0x70
 8023d80:	4411      	add	r1, r2
 8023d82:	eb01 61f6 	add.w	r1, r1, r6, ror #27
 8023d86:	f101 414a 	add.w	r1, r1, #3388997632	@ 0xca000000
 8023d8a:	f501 01c5 	add.w	r1, r1, #6455296	@ 0x628000
 8023d8e:	f501 4183 	add.w	r1, r1, #16768	@ 0x4180
 8023d92:	3156      	adds	r1, #86	@ 0x56
 8023d94:	eb01 01be 	add.w	r1, r1, lr, ror #2
  R4(b, c, d, e, a, 79);
 8023d98:	ea86 02b7 	eor.w	r2, r6, r7, ror #2
 8023d9c:	ea82 02b8 	eor.w	r2, r2, r8, ror #2
 8023da0:	ea89 0903 	eor.w	r9, r9, r3
 8023da4:	9b01      	ldr	r3, [sp, #4]
 8023da6:	ea83 0909 	eor.w	r9, r3, r9
 8023daa:	9c08      	ldr	r4, [sp, #32]
 8023dac:	ea84 0309 	eor.w	r3, r4, r9
 8023db0:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8023db4:	931d      	str	r3, [sp, #116]	@ 0x74
 8023db6:	4413      	add	r3, r2
 8023db8:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8023dbc:	f103 434a 	add.w	r3, r3, #3388997632	@ 0xca000000
 8023dc0:	f503 03c5 	add.w	r3, r3, #6455296	@ 0x628000
 8023dc4:	f503 4383 	add.w	r3, r3, #16768	@ 0x4180
 8023dc8:	3356      	adds	r3, #86	@ 0x56
 8023dca:	eb03 03bc 	add.w	r3, r3, ip, ror #2
  state[0] += a;
 8023dce:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023dd0:	6802      	ldr	r2, [r0, #0]
 8023dd2:	441a      	add	r2, r3
 8023dd4:	6002      	str	r2, [r0, #0]
  state[1] += b;
 8023dd6:	6843      	ldr	r3, [r0, #4]
 8023dd8:	440b      	add	r3, r1
 8023dda:	6043      	str	r3, [r0, #4]
  state[2] += c;
 8023ddc:	6883      	ldr	r3, [r0, #8]
 8023dde:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 8023de2:	6083      	str	r3, [r0, #8]
  state[3] += d;
 8023de4:	68c3      	ldr	r3, [r0, #12]
 8023de6:	eb03 03b7 	add.w	r3, r3, r7, ror #2
 8023dea:	60c3      	str	r3, [r0, #12]
  state[4] += e;
 8023dec:	6903      	ldr	r3, [r0, #16]
 8023dee:	eb03 03b8 	add.w	r3, r3, r8, ror #2
 8023df2:	6103      	str	r3, [r0, #16]
  memset(block, 0, sizeof(block));
 8023df4:	2240      	movs	r2, #64	@ 0x40
 8023df6:	2100      	movs	r1, #0
 8023df8:	a80e      	add	r0, sp, #56	@ 0x38
 8023dfa:	f008 fd01 	bl	802c800 <memset>
}
 8023dfe:	b01f      	add	sp, #124	@ 0x7c
 8023e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e04:	ca62c1d6 	.word	0xca62c1d6

08023e08 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8023e08:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8023e0a:	fb01 f400 	mul.w	r4, r1, r0
 8023e0e:	4620      	mov	r0, r4
 8023e10:	f7f8 f902 	bl	801c018 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8023e14:	4605      	mov	r5, r0
 8023e16:	b118      	cbz	r0, 8023e20 <mg_calloc+0x18>
 8023e18:	4622      	mov	r2, r4
 8023e1a:	2100      	movs	r1, #0
 8023e1c:	f008 fcf0 	bl	802c800 <memset>
}
 8023e20:	4628      	mov	r0, r5
 8023e22:	bd38      	pop	{r3, r4, r5, pc}

08023e24 <mg_print_esc>:
size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 8023e24:	b570      	push	{r4, r5, r6, lr}
 8023e26:	4605      	mov	r5, r0
 8023e28:	460e      	mov	r6, r1
  size_t len = (size_t) va_arg(*ap, int);
 8023e2a:	6811      	ldr	r1, [r2, #0]
 8023e2c:	1d0c      	adds	r4, r1, #4
 8023e2e:	6014      	str	r4, [r2, #0]
 8023e30:	680b      	ldr	r3, [r1, #0]
  char *p = va_arg(*ap, char *);
 8023e32:	f101 0408 	add.w	r4, r1, #8
 8023e36:	6014      	str	r4, [r2, #0]
 8023e38:	684c      	ldr	r4, [r1, #4]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 8023e3a:	b923      	cbnz	r3, 8023e46 <mg_print_esc+0x22>
 8023e3c:	b11c      	cbz	r4, 8023e46 <mg_print_esc+0x22>
 8023e3e:	4620      	mov	r0, r4
 8023e40:	f7ec fa2e 	bl	80102a0 <strlen>
 8023e44:	4603      	mov	r3, r0
  return qcpy(out, arg, p, len);
 8023e46:	4622      	mov	r2, r4
 8023e48:	4631      	mov	r1, r6
 8023e4a:	4628      	mov	r0, r5
 8023e4c:	f7fe fd65 	bl	802291a <qcpy>
}
 8023e50:	bd70      	pop	{r4, r5, r6, pc}

08023e52 <getpeer>:
                                     bool lsn) {
 8023e52:	b570      	push	{r4, r5, r6, lr}
 8023e54:	460d      	mov	r5, r1
 8023e56:	4616      	mov	r6, r2
  for (c = mgr->conns; c != NULL; c = c->next) {
 8023e58:	6804      	ldr	r4, [r0, #0]
 8023e5a:	e000      	b.n	8023e5e <getpeer+0xc>
 8023e5c:	6824      	ldr	r4, [r4, #0]
 8023e5e:	b364      	cbz	r4, 8023eba <getpeer+0x68>
    if (c->is_arplooking && pkt->arp &&
 8023e60:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8023e64:	f013 0f10 	tst.w	r3, #16
 8023e68:	d008      	beq.n	8023e7c <getpeer+0x2a>
 8023e6a:	69a8      	ldr	r0, [r5, #24]
 8023e6c:	b130      	cbz	r0, 8023e7c <getpeer+0x2a>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 8023e6e:	2204      	movs	r2, #4
 8023e70:	f104 011c 	add.w	r1, r4, #28
 8023e74:	300e      	adds	r0, #14
 8023e76:	f008 fc99 	bl	802c7ac <memcmp>
    if (c->is_arplooking && pkt->arp &&
 8023e7a:	b1f0      	cbz	r0, 8023eba <getpeer+0x68>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8023e7c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8023e80:	f013 0301 	ands.w	r3, r3, #1
 8023e84:	d005      	beq.n	8023e92 <getpeer+0x40>
 8023e86:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8023e88:	b11a      	cbz	r2, 8023e92 <getpeer+0x40>
 8023e8a:	8b21      	ldrh	r1, [r4, #24]
 8023e8c:	8852      	ldrh	r2, [r2, #2]
 8023e8e:	4291      	cmp	r1, r2
 8023e90:	d013      	beq.n	8023eba <getpeer+0x68>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8023e92:	2b00      	cmp	r3, #0
 8023e94:	d1e2      	bne.n	8023e5c <getpeer+0xa>
 8023e96:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8023e98:	2b00      	cmp	r3, #0
 8023e9a:	d0df      	beq.n	8023e5c <getpeer+0xa>
 8023e9c:	8b21      	ldrh	r1, [r4, #24]
 8023e9e:	885a      	ldrh	r2, [r3, #2]
 8023ea0:	4291      	cmp	r1, r2
 8023ea2:	d1db      	bne.n	8023e5c <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8023ea4:	f894 20ac 	ldrb.w	r2, [r4, #172]	@ 0xac
 8023ea8:	f002 0201 	and.w	r2, r2, #1
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8023eac:	42b2      	cmp	r2, r6
 8023eae:	d1d5      	bne.n	8023e5c <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8023eb0:	b91e      	cbnz	r6, 8023eba <getpeer+0x68>
 8023eb2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8023eb4:	881b      	ldrh	r3, [r3, #0]
 8023eb6:	429a      	cmp	r2, r3
 8023eb8:	d1d0      	bne.n	8023e5c <getpeer+0xa>
}
 8023eba:	4620      	mov	r0, r4
 8023ebc:	bd70      	pop	{r4, r5, r6, pc}

08023ebe <mg_pfn_stdout>:
void mg_pfn_stdout(char c, void *param) {
 8023ebe:	b508      	push	{r3, lr}
  putchar(c);
 8023ec0:	f008 f8d8 	bl	802c074 <putchar>
}
 8023ec4:	bd08      	pop	{r3, pc}

08023ec6 <mg_queue_read_len>:
  MG_MEMORY_BARRIER();
 8023ec6:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8023eca:	6802      	ldr	r2, [r0, #0]
 8023ecc:	6883      	ldr	r3, [r0, #8]
}
 8023ece:	58d0      	ldr	r0, [r2, r3]
 8023ed0:	4770      	bx	lr
	...

08023ed4 <parse_net>:
static int parse_net(const char *spec, uint32_t *net, uint32_t *mask) {
 8023ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023ed8:	b08b      	sub	sp, #44	@ 0x2c
 8023eda:	4604      	mov	r4, r0
 8023edc:	460e      	mov	r6, r1
 8023ede:	4615      	mov	r5, r2
  int n, a, b, c, d, slash = 32, len = 0;
 8023ee0:	2320      	movs	r3, #32
 8023ee2:	9304      	str	r3, [sp, #16]
  if ((sscanf(spec, "%d.%d.%d.%d/%d%n", &a, &b, &c, &d, &slash, &n) == 5 ||
 8023ee4:	ab09      	add	r3, sp, #36	@ 0x24
 8023ee6:	9303      	str	r3, [sp, #12]
 8023ee8:	ab04      	add	r3, sp, #16
 8023eea:	9302      	str	r3, [sp, #8]
 8023eec:	ab05      	add	r3, sp, #20
 8023eee:	9301      	str	r3, [sp, #4]
 8023ef0:	ab06      	add	r3, sp, #24
 8023ef2:	9300      	str	r3, [sp, #0]
 8023ef4:	ab07      	add	r3, sp, #28
 8023ef6:	aa08      	add	r2, sp, #32
 8023ef8:	4928      	ldr	r1, [pc, #160]	@ (8023f9c <parse_net+0xc8>)
 8023efa:	f008 faaf 	bl	802c45c <sscanf>
 8023efe:	2805      	cmp	r0, #5
 8023f00:	d133      	bne.n	8023f6a <parse_net+0x96>
      isbyte(a) && isbyte(b) && isbyte(c) && isbyte(d) && slash >= 0 &&
 8023f02:	9c08      	ldr	r4, [sp, #32]
 8023f04:	4620      	mov	r0, r4
 8023f06:	f7fe fd6e 	bl	80229e6 <isbyte>
       sscanf(spec, "%d.%d.%d.%d%n", &a, &b, &c, &d, &n) == 4) &&
 8023f0a:	4603      	mov	r3, r0
 8023f0c:	2800      	cmp	r0, #0
 8023f0e:	d03b      	beq.n	8023f88 <parse_net+0xb4>
      isbyte(a) && isbyte(b) && isbyte(c) && isbyte(d) && slash >= 0 &&
 8023f10:	9f07      	ldr	r7, [sp, #28]
 8023f12:	4638      	mov	r0, r7
 8023f14:	f7fe fd67 	bl	80229e6 <isbyte>
 8023f18:	4603      	mov	r3, r0
 8023f1a:	2800      	cmp	r0, #0
 8023f1c:	d034      	beq.n	8023f88 <parse_net+0xb4>
 8023f1e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8023f22:	4648      	mov	r0, r9
 8023f24:	f7fe fd5f 	bl	80229e6 <isbyte>
 8023f28:	4603      	mov	r3, r0
 8023f2a:	b368      	cbz	r0, 8023f88 <parse_net+0xb4>
 8023f2c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8023f30:	4640      	mov	r0, r8
 8023f32:	f7fe fd58 	bl	80229e6 <isbyte>
 8023f36:	4603      	mov	r3, r0
 8023f38:	b330      	cbz	r0, 8023f88 <parse_net+0xb4>
 8023f3a:	9b04      	ldr	r3, [sp, #16]
 8023f3c:	2b00      	cmp	r3, #0
 8023f3e:	db29      	blt.n	8023f94 <parse_net+0xc0>
 8023f40:	2b20      	cmp	r3, #32
 8023f42:	dc29      	bgt.n	8023f98 <parse_net+0xc4>
    len = n;
 8023f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    *net = ((uint32_t) a << 24) | ((uint32_t) b << 16) | ((uint32_t) c << 8) |
 8023f46:	043a      	lsls	r2, r7, #16
 8023f48:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8023f4c:	ea42 2209 	orr.w	r2, r2, r9, lsl #8
 8023f50:	ea42 0208 	orr.w	r2, r2, r8
 8023f54:	6032      	str	r2, [r6, #0]
    *mask = slash ? (uint32_t) (0xffffffffU << (32 - slash)) : (uint32_t) 0;
 8023f56:	9a04      	ldr	r2, [sp, #16]
 8023f58:	b1d2      	cbz	r2, 8023f90 <parse_net+0xbc>
 8023f5a:	f1c2 0220 	rsb	r2, r2, #32
 8023f5e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8023f62:	fa01 f202 	lsl.w	r2, r1, r2
 8023f66:	602a      	str	r2, [r5, #0]
 8023f68:	e00e      	b.n	8023f88 <parse_net+0xb4>
       sscanf(spec, "%d.%d.%d.%d%n", &a, &b, &c, &d, &n) == 4) &&
 8023f6a:	ab09      	add	r3, sp, #36	@ 0x24
 8023f6c:	9302      	str	r3, [sp, #8]
 8023f6e:	ab05      	add	r3, sp, #20
 8023f70:	9301      	str	r3, [sp, #4]
 8023f72:	ab06      	add	r3, sp, #24
 8023f74:	9300      	str	r3, [sp, #0]
 8023f76:	ab07      	add	r3, sp, #28
 8023f78:	aa08      	add	r2, sp, #32
 8023f7a:	4909      	ldr	r1, [pc, #36]	@ (8023fa0 <parse_net+0xcc>)
 8023f7c:	4620      	mov	r0, r4
 8023f7e:	f008 fa6d 	bl	802c45c <sscanf>
  if ((sscanf(spec, "%d.%d.%d.%d/%d%n", &a, &b, &c, &d, &slash, &n) == 5 ||
 8023f82:	2804      	cmp	r0, #4
 8023f84:	d0bd      	beq.n	8023f02 <parse_net+0x2e>
  int n, a, b, c, d, slash = 32, len = 0;
 8023f86:	2300      	movs	r3, #0
}
 8023f88:	4618      	mov	r0, r3
 8023f8a:	b00b      	add	sp, #44	@ 0x2c
 8023f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *mask = slash ? (uint32_t) (0xffffffffU << (32 - slash)) : (uint32_t) 0;
 8023f90:	2200      	movs	r2, #0
 8023f92:	e7e8      	b.n	8023f66 <parse_net+0x92>
  int n, a, b, c, d, slash = 32, len = 0;
 8023f94:	2300      	movs	r3, #0
 8023f96:	e7f7      	b.n	8023f88 <parse_net+0xb4>
 8023f98:	2300      	movs	r3, #0
  return len;
 8023f9a:	e7f5      	b.n	8023f88 <parse_net+0xb4>
 8023f9c:	0803b278 	.word	0x0803b278
 8023fa0:	0803b28c 	.word	0x0803b28c

08023fa4 <mg_base64_decode>:
size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 8023fa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fa8:	4691      	mov	r9, r2
 8023faa:	469b      	mov	fp, r3
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8023fac:	4604      	mov	r4, r0
 8023fae:	b150      	cbz	r0, 8023fc6 <mg_base64_decode+0x22>
 8023fb0:	eb00 0a01 	add.w	sl, r0, r1
  if (dl < n / 4 * 3 + 1) goto fail;
 8023fb4:	0889      	lsrs	r1, r1, #2
 8023fb6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023fba:	3101      	adds	r1, #1
 8023fbc:	4559      	cmp	r1, fp
 8023fbe:	d847      	bhi.n	8024050 <mg_base64_decode+0xac>
  size_t len = 0;
 8023fc0:	f04f 0800 	mov.w	r8, #0
 8023fc4:	e003      	b.n	8023fce <mg_base64_decode+0x2a>
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8023fc6:	4682      	mov	sl, r0
 8023fc8:	e7f4      	b.n	8023fb4 <mg_base64_decode+0x10>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8023fca:	4698      	mov	r8, r3
    src += 4;
 8023fcc:	3404      	adds	r4, #4
  while (src != NULL && src + 3 < end) {
 8023fce:	2c00      	cmp	r4, #0
 8023fd0:	d03a      	beq.n	8024048 <mg_base64_decode+0xa4>
 8023fd2:	1ce3      	adds	r3, r4, #3
 8023fd4:	4553      	cmp	r3, sl
 8023fd6:	d237      	bcs.n	8024048 <mg_base64_decode+0xa4>
    int a = mg_base64_decode_single(src[0]),
 8023fd8:	7820      	ldrb	r0, [r4, #0]
 8023fda:	f7fd f88f 	bl	80210fc <mg_base64_decode_single>
 8023fde:	4605      	mov	r5, r0
        b = mg_base64_decode_single(src[1]),
 8023fe0:	7860      	ldrb	r0, [r4, #1]
 8023fe2:	f7fd f88b 	bl	80210fc <mg_base64_decode_single>
 8023fe6:	4606      	mov	r6, r0
        c = mg_base64_decode_single(src[2]),
 8023fe8:	78a0      	ldrb	r0, [r4, #2]
 8023fea:	f7fd f887 	bl	80210fc <mg_base64_decode_single>
 8023fee:	4607      	mov	r7, r0
        d = mg_base64_decode_single(src[3]);
 8023ff0:	78e0      	ldrb	r0, [r4, #3]
 8023ff2:	f7fd f883 	bl	80210fc <mg_base64_decode_single>
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 8023ff6:	2d40      	cmp	r5, #64	@ 0x40
 8023ff8:	d02a      	beq.n	8024050 <mg_base64_decode+0xac>
 8023ffa:	2d00      	cmp	r5, #0
 8023ffc:	db28      	blt.n	8024050 <mg_base64_decode+0xac>
 8023ffe:	2e40      	cmp	r6, #64	@ 0x40
 8024000:	d026      	beq.n	8024050 <mg_base64_decode+0xac>
 8024002:	2e00      	cmp	r6, #0
 8024004:	db24      	blt.n	8024050 <mg_base64_decode+0xac>
 8024006:	2f00      	cmp	r7, #0
 8024008:	db22      	blt.n	8024050 <mg_base64_decode+0xac>
 802400a:	2800      	cmp	r0, #0
 802400c:	db20      	blt.n	8024050 <mg_base64_decode+0xac>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 802400e:	00ad      	lsls	r5, r5, #2
 8024010:	ea45 1526 	orr.w	r5, r5, r6, asr #4
 8024014:	f108 0301 	add.w	r3, r8, #1
 8024018:	f809 5008 	strb.w	r5, [r9, r8]
    if (src[2] != '=') {
 802401c:	78a2      	ldrb	r2, [r4, #2]
 802401e:	2a3d      	cmp	r2, #61	@ 0x3d
 8024020:	d0d3      	beq.n	8023fca <mg_base64_decode+0x26>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 8024022:	0136      	lsls	r6, r6, #4
 8024024:	ea46 06a7 	orr.w	r6, r6, r7, asr #2
 8024028:	f108 0202 	add.w	r2, r8, #2
 802402c:	f809 6003 	strb.w	r6, [r9, r3]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 8024030:	78e3      	ldrb	r3, [r4, #3]
 8024032:	2b3d      	cmp	r3, #61	@ 0x3d
 8024034:	d006      	beq.n	8024044 <mg_base64_decode+0xa0>
 8024036:	ea40 1087 	orr.w	r0, r0, r7, lsl #6
 802403a:	f108 0803 	add.w	r8, r8, #3
 802403e:	f809 0002 	strb.w	r0, [r9, r2]
 8024042:	e7c3      	b.n	8023fcc <mg_base64_decode+0x28>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 8024044:	4690      	mov	r8, r2
 8024046:	e7c1      	b.n	8023fcc <mg_base64_decode+0x28>
  dst[len] = '\0';
 8024048:	2300      	movs	r3, #0
 802404a:	f809 3008 	strb.w	r3, [r9, r8]
  return len;
 802404e:	e006      	b.n	802405e <mg_base64_decode+0xba>
  if (dl > 0) dst[0] = '\0';
 8024050:	f1bb 0f00 	cmp.w	fp, #0
 8024054:	d006      	beq.n	8024064 <mg_base64_decode+0xc0>
 8024056:	f04f 0800 	mov.w	r8, #0
 802405a:	f889 8000 	strb.w	r8, [r9]
}
 802405e:	4640      	mov	r0, r8
 8024060:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return 0;
 8024064:	46d8      	mov	r8, fp
 8024066:	e7fa      	b.n	802405e <mg_base64_decode+0xba>

08024068 <mg_resolve_cancel>:
void mg_resolve_cancel(struct mg_connection *c) {
 8024068:	b570      	push	{r4, r5, r6, lr}
 802406a:	4605      	mov	r5, r0
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 802406c:	6843      	ldr	r3, [r0, #4]
 802406e:	f103 0630 	add.w	r6, r3, #48	@ 0x30
  for (d = *head; d != NULL; d = tmp) {
 8024072:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8024074:	e000      	b.n	8024078 <mg_resolve_cancel+0x10>
void mg_resolve_cancel(struct mg_connection *c) {
 8024076:	4621      	mov	r1, r4
  for (d = *head; d != NULL; d = tmp) {
 8024078:	b139      	cbz	r1, 802408a <mg_resolve_cancel+0x22>
    tmp = d->next;
 802407a:	680c      	ldr	r4, [r1, #0]
    if (d->c == c) mg_dns_free(head, d);
 802407c:	684b      	ldr	r3, [r1, #4]
 802407e:	42ab      	cmp	r3, r5
 8024080:	d1f9      	bne.n	8024076 <mg_resolve_cancel+0xe>
 8024082:	4630      	mov	r0, r6
 8024084:	f7fe fe12 	bl	8022cac <mg_dns_free>
 8024088:	e7f5      	b.n	8024076 <mg_resolve_cancel+0xe>
}
 802408a:	bd70      	pop	{r4, r5, r6, pc}

0802408c <mg_dns_parse_rr>:
                       bool is_question, struct mg_dns_rr *rr) {
 802408c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802408e:	b083      	sub	sp, #12
 8024090:	9c08      	ldr	r4, [sp, #32]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8024092:	1886      	adds	r6, r0, r2
 8024094:	1847      	adds	r7, r0, r1
  memset(rr, 0, sizeof(*rr));
 8024096:	f04f 0c00 	mov.w	ip, #0
 802409a:	f8c4 c000 	str.w	ip, [r4]
 802409e:	f8c4 c004 	str.w	ip, [r4, #4]
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 80240a2:	290b      	cmp	r1, #11
 80240a4:	d934      	bls.n	8024110 <mg_dns_parse_rr+0x84>
 80240a6:	461d      	mov	r5, r3
  if (len > 512) return 0;  //  Too large, we don't expect that
 80240a8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80240ac:	d833      	bhi.n	8024116 <mg_dns_parse_rr+0x8a>
  if (s >= e) return 0;     //  Overflow
 80240ae:	42be      	cmp	r6, r7
 80240b0:	d301      	bcc.n	80240b6 <mg_dns_parse_rr+0x2a>
 80240b2:	2000      	movs	r0, #0
 80240b4:	e02d      	b.n	8024112 <mg_dns_parse_rr+0x86>
  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 80240b6:	4663      	mov	r3, ip
 80240b8:	f8cd c000 	str.w	ip, [sp]
 80240bc:	f7fe fed5 	bl	8022e6a <mg_dns_parse_name>
 80240c0:	b283      	uxth	r3, r0
 80240c2:	8023      	strh	r3, [r4, #0]
 80240c4:	b34b      	cbz	r3, 802411a <mg_dns_parse_rr+0x8e>
  s += rr->nlen + 4;
 80240c6:	3304      	adds	r3, #4
 80240c8:	441e      	add	r6, r3
  if (s > e) return 0;
 80240ca:	42b7      	cmp	r7, r6
 80240cc:	d327      	bcc.n	802411e <mg_dns_parse_rr+0x92>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 80240ce:	f816 2c04 	ldrb.w	r2, [r6, #-4]
 80240d2:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 80240d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80240da:	8063      	strh	r3, [r4, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 80240dc:	f816 2c02 	ldrb.w	r2, [r6, #-2]
 80240e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80240e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80240e8:	80a3      	strh	r3, [r4, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 80240ea:	b975      	cbnz	r5, 802410a <mg_dns_parse_rr+0x7e>
  s += 6;
 80240ec:	1db3      	adds	r3, r6, #6
  if (s > e) return 0;
 80240ee:	429f      	cmp	r7, r3
 80240f0:	d317      	bcc.n	8024122 <mg_dns_parse_rr+0x96>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 80240f2:	7931      	ldrb	r1, [r6, #4]
 80240f4:	7972      	ldrb	r2, [r6, #5]
 80240f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80240fa:	80e2      	strh	r2, [r4, #6]
  if (s + rr->alen > e) return 0;
 80240fc:	4413      	add	r3, r2
 80240fe:	42bb      	cmp	r3, r7
 8024100:	d811      	bhi.n	8024126 <mg_dns_parse_rr+0x9a>
  return (size_t) (rr->nlen + rr->alen + 10);
 8024102:	fa12 f080 	uxtah	r0, r2, r0
 8024106:	300a      	adds	r0, #10
 8024108:	e003      	b.n	8024112 <mg_dns_parse_rr+0x86>
  if (is_question) return (size_t) (rr->nlen + 4);
 802410a:	b280      	uxth	r0, r0
 802410c:	3004      	adds	r0, #4
 802410e:	e000      	b.n	8024112 <mg_dns_parse_rr+0x86>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8024110:	2000      	movs	r0, #0
}
 8024112:	b003      	add	sp, #12
 8024114:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (len > 512) return 0;  //  Too large, we don't expect that
 8024116:	2000      	movs	r0, #0
 8024118:	e7fb      	b.n	8024112 <mg_dns_parse_rr+0x86>
    return 0;
 802411a:	2000      	movs	r0, #0
 802411c:	e7f9      	b.n	8024112 <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 802411e:	2000      	movs	r0, #0
 8024120:	e7f7      	b.n	8024112 <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 8024122:	2000      	movs	r0, #0
 8024124:	e7f5      	b.n	8024112 <mg_dns_parse_rr+0x86>
  if (s + rr->alen > e) return 0;
 8024126:	2000      	movs	r0, #0
 8024128:	e7f3      	b.n	8024112 <mg_dns_parse_rr+0x86>

0802412a <mg_call>:
void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 802412a:	b570      	push	{r4, r5, r6, lr}
 802412c:	4604      	mov	r4, r0
 802412e:	460d      	mov	r5, r1
 8024130:	4616      	mov	r6, r2
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8024132:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8024136:	b103      	cbz	r3, 802413a <mg_call+0x10>
 8024138:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 802413a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 802413c:	b11b      	cbz	r3, 8024146 <mg_call+0x1c>
 802413e:	4632      	mov	r2, r6
 8024140:	4629      	mov	r1, r5
 8024142:	4620      	mov	r0, r4
 8024144:	4798      	blx	r3
}
 8024146:	bd70      	pop	{r4, r5, r6, pc}

08024148 <mg_fs_open>:
struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8024148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802414a:	4604      	mov	r4, r0
 802414c:	460d      	mov	r5, r1
 802414e:	4616      	mov	r6, r2
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8024150:	2108      	movs	r1, #8
 8024152:	2001      	movs	r0, #1
 8024154:	f7ff fe58 	bl	8023e08 <mg_calloc>
  if (fd != NULL) {
 8024158:	4607      	mov	r7, r0
 802415a:	b138      	cbz	r0, 802416c <mg_fs_open+0x24>
    fd->fd = fs->op(path, flags);
 802415c:	68a3      	ldr	r3, [r4, #8]
 802415e:	4631      	mov	r1, r6
 8024160:	4628      	mov	r0, r5
 8024162:	4798      	blx	r3
 8024164:	4605      	mov	r5, r0
 8024166:	6038      	str	r0, [r7, #0]
    fd->fs = fs;
 8024168:	607c      	str	r4, [r7, #4]
    if (fd->fd == NULL) {
 802416a:	b108      	cbz	r0, 8024170 <mg_fs_open+0x28>
}
 802416c:	4638      	mov	r0, r7
 802416e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      free(fd);
 8024170:	4638      	mov	r0, r7
 8024172:	f7f7 ffd3 	bl	801c11c <vPortFree>
      fd = NULL;
 8024176:	462f      	mov	r7, r5
  return fd;
 8024178:	e7f8      	b.n	802416c <mg_fs_open+0x24>

0802417a <mg_fs_close>:
  if (fd != NULL) {
 802417a:	b148      	cbz	r0, 8024190 <mg_fs_close+0x16>
void mg_fs_close(struct mg_fd *fd) {
 802417c:	b510      	push	{r4, lr}
 802417e:	4604      	mov	r4, r0
    fd->fs->cl(fd->fd);
 8024180:	6843      	ldr	r3, [r0, #4]
 8024182:	68db      	ldr	r3, [r3, #12]
 8024184:	6800      	ldr	r0, [r0, #0]
 8024186:	4798      	blx	r3
    free(fd);
 8024188:	4620      	mov	r0, r4
 802418a:	f7f7 ffc7 	bl	801c11c <vPortFree>
}
 802418e:	bd10      	pop	{r4, pc}
 8024190:	4770      	bx	lr
	...

08024194 <restore_http_cb>:
static void restore_http_cb(struct mg_connection *c) {
 8024194:	b510      	push	{r4, lr}
 8024196:	4604      	mov	r4, r0
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8024198:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 802419c:	f7ff ffed 	bl	802417a <mg_fs_close>
  c->pfn_data = NULL;
 80241a0:	2200      	movs	r2, #0
 80241a2:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  c->pfn = http_cb;
 80241a6:	4b05      	ldr	r3, [pc, #20]	@ (80241bc <restore_http_cb+0x28>)
 80241a8:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->is_resp = 0;
 80241ac:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80241b0:	f362 13c7 	bfi	r3, r2, #7, #1
 80241b4:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 80241b8:	bd10      	pop	{r4, pc}
 80241ba:	bf00      	nop
 80241bc:	08027b45 	.word	0x08027b45

080241c0 <mg_to_size_t>:
bool mg_to_size_t(struct mg_str str, size_t *val) {
 80241c0:	b470      	push	{r4, r5, r6}
 80241c2:	b083      	sub	sp, #12
 80241c4:	ab02      	add	r3, sp, #8
 80241c6:	e903 0003 	stmdb	r3, {r0, r1}
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 80241ca:	2300      	movs	r3, #0
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 80241cc:	e000      	b.n	80241d0 <mg_to_size_t+0x10>
 80241ce:	3301      	adds	r3, #1
 80241d0:	9c01      	ldr	r4, [sp, #4]
 80241d2:	429c      	cmp	r4, r3
 80241d4:	d905      	bls.n	80241e2 <mg_to_size_t+0x22>
 80241d6:	9900      	ldr	r1, [sp, #0]
 80241d8:	5cc9      	ldrb	r1, [r1, r3]
 80241da:	2920      	cmp	r1, #32
 80241dc:	d0f7      	beq.n	80241ce <mg_to_size_t+0xe>
 80241de:	2909      	cmp	r1, #9
 80241e0:	d0f5      	beq.n	80241ce <mg_to_size_t+0xe>
  if (i < str.len && str.buf[i] == '-') return false;
 80241e2:	429c      	cmp	r4, r3
 80241e4:	d906      	bls.n	80241f4 <mg_to_size_t+0x34>
 80241e6:	9900      	ldr	r1, [sp, #0]
 80241e8:	5cc9      	ldrb	r1, [r1, r3]
 80241ea:	292d      	cmp	r1, #45	@ 0x2d
 80241ec:	d02c      	beq.n	8024248 <mg_to_size_t+0x88>
 80241ee:	2500      	movs	r5, #0
 80241f0:	4628      	mov	r0, r5
 80241f2:	e001      	b.n	80241f8 <mg_to_size_t+0x38>
 80241f4:	2500      	movs	r5, #0
 80241f6:	4628      	mov	r0, r5
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 80241f8:	429c      	cmp	r4, r3
 80241fa:	d917      	bls.n	802422c <mg_to_size_t+0x6c>
 80241fc:	9900      	ldr	r1, [sp, #0]
 80241fe:	5cc9      	ldrb	r1, [r1, r3]
 8024200:	292f      	cmp	r1, #47	@ 0x2f
 8024202:	d913      	bls.n	802422c <mg_to_size_t+0x6c>
 8024204:	2939      	cmp	r1, #57	@ 0x39
 8024206:	d811      	bhi.n	802422c <mg_to_size_t+0x6c>
    size_t digit = (size_t) (str.buf[i] - '0');
 8024208:	3930      	subs	r1, #48	@ 0x30
    if (result > max2) return false;  // Overflow
 802420a:	4e15      	ldr	r6, [pc, #84]	@ (8024260 <mg_to_size_t+0xa0>)
 802420c:	42b0      	cmp	r0, r6
 802420e:	d81d      	bhi.n	802424c <mg_to_size_t+0x8c>
    result *= 10;
 8024210:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8024214:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    if (result > max - digit) return false;  // Overflow
 8024218:	43ce      	mvns	r6, r1
 802421a:	ebb6 0f40 	cmp.w	r6, r0, lsl #1
 802421e:	d317      	bcc.n	8024250 <mg_to_size_t+0x90>
    result += digit;
 8024220:	eb01 000c 	add.w	r0, r1, ip
    i++, ndigits++;
 8024224:	3301      	adds	r3, #1
 8024226:	3501      	adds	r5, #1
 8024228:	e7e6      	b.n	80241f8 <mg_to_size_t+0x38>
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 802422a:	3301      	adds	r3, #1
 802422c:	429c      	cmp	r4, r3
 802422e:	d905      	bls.n	802423c <mg_to_size_t+0x7c>
 8024230:	9900      	ldr	r1, [sp, #0]
 8024232:	5cc9      	ldrb	r1, [r1, r3]
 8024234:	2920      	cmp	r1, #32
 8024236:	d0f8      	beq.n	802422a <mg_to_size_t+0x6a>
 8024238:	2909      	cmp	r1, #9
 802423a:	d0f6      	beq.n	802422a <mg_to_size_t+0x6a>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 802423c:	b155      	cbz	r5, 8024254 <mg_to_size_t+0x94>
  if (i != str.len) return false;  // Ditto
 802423e:	429c      	cmp	r4, r3
 8024240:	d10c      	bne.n	802425c <mg_to_size_t+0x9c>
  *val = (size_t) result;
 8024242:	6010      	str	r0, [r2, #0]
  return true;
 8024244:	2001      	movs	r0, #1
 8024246:	e006      	b.n	8024256 <mg_to_size_t+0x96>
  if (i < str.len && str.buf[i] == '-') return false;
 8024248:	2000      	movs	r0, #0
 802424a:	e004      	b.n	8024256 <mg_to_size_t+0x96>
    if (result > max2) return false;  // Overflow
 802424c:	2000      	movs	r0, #0
 802424e:	e002      	b.n	8024256 <mg_to_size_t+0x96>
    if (result > max - digit) return false;  // Overflow
 8024250:	2000      	movs	r0, #0
 8024252:	e000      	b.n	8024256 <mg_to_size_t+0x96>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8024254:	2000      	movs	r0, #0
}
 8024256:	b003      	add	sp, #12
 8024258:	bc70      	pop	{r4, r5, r6}
 802425a:	4770      	bx	lr
  if (i != str.len) return false;  // Ditto
 802425c:	2000      	movs	r0, #0
 802425e:	e7fa      	b.n	8024256 <mg_to_size_t+0x96>
 8024260:	19999999 	.word	0x19999999

08024264 <mg_http_get_request_len>:
int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8024264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024266:	4606      	mov	r6, r0
 8024268:	460f      	mov	r7, r1
  for (i = 0; i < buf_len; i++) {
 802426a:	2400      	movs	r4, #0
 802426c:	e007      	b.n	802427e <mg_http_get_request_len+0x1a>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 802426e:	1933      	adds	r3, r6, r4
 8024270:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8024274:	2b0a      	cmp	r3, #10
 8024276:	d10d      	bne.n	8024294 <mg_http_get_request_len+0x30>
      return (int) i + 1;
 8024278:	1c60      	adds	r0, r4, #1
 802427a:	e01b      	b.n	80242b4 <mg_http_get_request_len+0x50>
  for (i = 0; i < buf_len; i++) {
 802427c:	3401      	adds	r4, #1
 802427e:	42bc      	cmp	r4, r7
 8024280:	d217      	bcs.n	80242b2 <mg_http_get_request_len+0x4e>
    if (!isok(buf[i])) return -1;
 8024282:	5d35      	ldrb	r5, [r6, r4]
 8024284:	4628      	mov	r0, r5
 8024286:	f7fd f8c8 	bl	802141a <isok>
 802428a:	b1a0      	cbz	r0, 80242b6 <mg_http_get_request_len+0x52>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 802428c:	2c00      	cmp	r4, #0
 802428e:	d0f5      	beq.n	802427c <mg_http_get_request_len+0x18>
 8024290:	2d0a      	cmp	r5, #10
 8024292:	d0ec      	beq.n	802426e <mg_http_get_request_len+0xa>
 8024294:	2c03      	cmp	r4, #3
 8024296:	d9f1      	bls.n	802427c <mg_http_get_request_len+0x18>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8024298:	2d0a      	cmp	r5, #10
 802429a:	d1ef      	bne.n	802427c <mg_http_get_request_len+0x18>
 802429c:	1933      	adds	r3, r6, r4
 802429e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80242a2:	2b0d      	cmp	r3, #13
 80242a4:	d1ea      	bne.n	802427c <mg_http_get_request_len+0x18>
 80242a6:	1933      	adds	r3, r6, r4
 80242a8:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 80242ac:	2b0a      	cmp	r3, #10
 80242ae:	d1e5      	bne.n	802427c <mg_http_get_request_len+0x18>
 80242b0:	e7e2      	b.n	8024278 <mg_http_get_request_len+0x14>
  return 0;
 80242b2:	2000      	movs	r0, #0
}
 80242b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!isok(buf[i])) return -1;
 80242b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80242ba:	e7fb      	b.n	80242b4 <mg_http_get_request_len+0x50>

080242bc <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 80242bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80242c0:	4605      	mov	r5, r0
 80242c2:	460f      	mov	r7, r1
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 80242c4:	4608      	mov	r0, r1
 80242c6:	f7eb ffeb 	bl	80102a0 <strlen>
 80242ca:	4606      	mov	r6, r0
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80242cc:	2400      	movs	r4, #0
 80242ce:	e000      	b.n	80242d2 <mg_http_get_header+0x16>
 80242d0:	3401      	adds	r4, #1
 80242d2:	2c1d      	cmp	r4, #29
 80242d4:	d819      	bhi.n	802430a <mg_http_get_header+0x4e>
 80242d6:	1ca3      	adds	r3, r4, #2
 80242d8:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80242dc:	685a      	ldr	r2, [r3, #4]
 80242de:	b17a      	cbz	r2, 8024300 <mg_http_get_header+0x44>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 80242e0:	0123      	lsls	r3, r4, #4
 80242e2:	3328      	adds	r3, #40	@ 0x28
 80242e4:	eb05 0803 	add.w	r8, r5, r3
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 80242e8:	42b2      	cmp	r2, r6
 80242ea:	d1f1      	bne.n	80242d0 <mg_http_get_header+0x14>
 80242ec:	1ca3      	adds	r3, r4, #2
 80242ee:	011b      	lsls	r3, r3, #4
 80242f0:	4632      	mov	r2, r6
 80242f2:	4639      	mov	r1, r7
 80242f4:	58e8      	ldr	r0, [r5, r3]
 80242f6:	f7fd f85b 	bl	80213b0 <mg_ncasecmp>
 80242fa:	2800      	cmp	r0, #0
 80242fc:	d1e8      	bne.n	80242d0 <mg_http_get_header+0x14>
 80242fe:	e001      	b.n	8024304 <mg_http_get_header+0x48>
  return NULL;
 8024300:	f04f 0800 	mov.w	r8, #0
}
 8024304:	4640      	mov	r0, r8
 8024306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 802430a:	f04f 0800 	mov.w	r8, #0
 802430e:	e7f9      	b.n	8024304 <mg_http_get_header+0x48>

08024310 <mg_http_status>:
int mg_http_status(const struct mg_http_message *hm) {
 8024310:	b508      	push	{r3, lr}
  return atoi(hm->uri.buf);
 8024312:	6880      	ldr	r0, [r0, #8]
 8024314:	f007 f998 	bl	802b648 <atoi>
}
 8024318:	bd08      	pop	{r3, pc}
	...

0802431c <mg_json_get>:
int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 802431c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024320:	b095      	sub	sp, #84	@ 0x54
 8024322:	ac08      	add	r4, sp, #32
 8024324:	e884 0003 	stmia.w	r4, {r0, r1}
 8024328:	9203      	str	r2, [sp, #12]
  const char *s = json.buf;
 802432a:	4607      	mov	r7, r0
  int len = (int) json.len;
 802432c:	4688      	mov	r8, r1
  if (toklen) *toklen = 0;
 802432e:	469a      	mov	sl, r3
 8024330:	b113      	cbz	r3, 8024338 <mg_json_get+0x1c>
 8024332:	2300      	movs	r3, #0
 8024334:	f8ca 3000 	str.w	r3, [sl]
  if (path[0] != '$') return MG_JSON_INVALID;
 8024338:	9b03      	ldr	r3, [sp, #12]
 802433a:	781b      	ldrb	r3, [r3, #0]
 802433c:	2b24      	cmp	r3, #36	@ 0x24
 802433e:	f040 822d 	bne.w	802479c <mg_json_get+0x480>
  int ci = -1, ei = -1;  // Current and expected index in array
 8024342:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8024346:	9302      	str	r3, [sp, #8]
  int pos = 1;           // Current position in `path`
 8024348:	2201      	movs	r2, #1
 802434a:	9204      	str	r2, [sp, #16]
  int ed = 0;            // Expected depth
 802434c:	f04f 0b00 	mov.w	fp, #0
  int depth = 0;         // Current depth (nesting level)
 8024350:	465e      	mov	r6, fp
  int j = 0;             // Offset in `s` we're looking for (return value)
 8024352:	f8cd b014 	str.w	fp, [sp, #20]
  for (i = 0; i < len; i++) {
 8024356:	465c      	mov	r4, fp
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 8024358:	4659      	mov	r1, fp
 802435a:	f8cd a018 	str.w	sl, [sp, #24]
 802435e:	469a      	mov	sl, r3
 8024360:	e188      	b.n	8024674 <mg_json_get+0x358>
        if (depth == ed) j = i;
 8024362:	455e      	cmp	r6, fp
 8024364:	d029      	beq.n	80243ba <mg_json_get+0x9e>
        if (c == '{') {
 8024366:	2d7b      	cmp	r5, #123	@ 0x7b
 8024368:	d029      	beq.n	80243be <mg_json_get+0xa2>
        } else if (c == '[') {
 802436a:	2d5b      	cmp	r5, #91	@ 0x5b
 802436c:	d046      	beq.n	80243fc <mg_json_get+0xe0>
        } else if (c == ']' && depth > 0) {  // Empty array
 802436e:	2d5d      	cmp	r5, #93	@ 0x5d
 8024370:	d078      	beq.n	8024464 <mg_json_get+0x148>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8024372:	2d74      	cmp	r5, #116	@ 0x74
 8024374:	f000 80a0 	beq.w	80244b8 <mg_json_get+0x19c>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8024378:	2d6e      	cmp	r5, #110	@ 0x6e
 802437a:	f000 80ac 	beq.w	80244d6 <mg_json_get+0x1ba>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 802437e:	2d66      	cmp	r5, #102	@ 0x66
 8024380:	f000 80b8 	beq.w	80244f4 <mg_json_get+0x1d8>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8024384:	2d2d      	cmp	r5, #45	@ 0x2d
 8024386:	d005      	beq.n	8024394 <mg_json_get+0x78>
 8024388:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 802438c:	b2db      	uxtb	r3, r3
 802438e:	2b09      	cmp	r3, #9
 8024390:	f200 80bf 	bhi.w	8024512 <mg_json_get+0x1f6>
          int numlen = 0;
 8024394:	2300      	movs	r3, #0
 8024396:	930b      	str	r3, [sp, #44]	@ 0x2c
          mg_atod(&s[i], len - i, &numlen);
 8024398:	aa0b      	add	r2, sp, #44	@ 0x2c
 802439a:	eba8 0104 	sub.w	r1, r8, r4
 802439e:	4648      	mov	r0, r9
 80243a0:	f7fd fcc2 	bl	8021d28 <mg_atod>
          i += numlen - 1;
 80243a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80243a6:	3b01      	subs	r3, #1
 80243a8:	441c      	add	r4, r3
        MG_CHECKRET('V');
 80243aa:	455e      	cmp	r6, fp
 80243ac:	f000 80c2 	beq.w	8024534 <mg_json_get+0x218>
        if (depth == ed && ei >= 0) ci++;
 80243b0:	455e      	cmp	r6, fp
 80243b2:	f000 80d5 	beq.w	8024560 <mg_json_get+0x244>
        expecting = S_COMMA_OR_EOO;
 80243b6:	2103      	movs	r1, #3
 80243b8:	e15b      	b.n	8024672 <mg_json_get+0x356>
        if (depth == ed) j = i;
 80243ba:	9405      	str	r4, [sp, #20]
 80243bc:	e7d3      	b.n	8024366 <mg_json_get+0x4a>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80243be:	2e1d      	cmp	r6, #29
 80243c0:	f300 81ef 	bgt.w	80247a2 <mg_json_get+0x486>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 80243c4:	455e      	cmp	r6, fp
 80243c6:	d007      	beq.n	80243d8 <mg_json_get+0xbc>
          nesting[depth++] = c;
 80243c8:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 80243cc:	446b      	add	r3, sp
 80243ce:	f803 5c20 	strb.w	r5, [r3, #-32]
 80243d2:	3601      	adds	r6, #1
          expecting = S_KEY;
 80243d4:	2101      	movs	r1, #1
          break;
 80243d6:	e14c      	b.n	8024672 <mg_json_get+0x356>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 80243d8:	9b03      	ldr	r3, [sp, #12]
 80243da:	9a04      	ldr	r2, [sp, #16]
 80243dc:	5c9b      	ldrb	r3, [r3, r2]
 80243de:	2b2e      	cmp	r3, #46	@ 0x2e
 80243e0:	d1f2      	bne.n	80243c8 <mg_json_get+0xac>
 80243e2:	9b02      	ldr	r3, [sp, #8]
 80243e4:	459a      	cmp	sl, r3
 80243e6:	d1ef      	bne.n	80243c8 <mg_json_get+0xac>
            ed++, pos++, ci = ei = -1;
 80243e8:	f10b 0b01 	add.w	fp, fp, #1
 80243ec:	4613      	mov	r3, r2
 80243ee:	3301      	adds	r3, #1
 80243f0:	9304      	str	r3, [sp, #16]
 80243f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80243f6:	9302      	str	r3, [sp, #8]
 80243f8:	469a      	mov	sl, r3
 80243fa:	e7e5      	b.n	80243c8 <mg_json_get+0xac>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80243fc:	2e1d      	cmp	r6, #29
 80243fe:	f300 81d3 	bgt.w	80247a8 <mg_json_get+0x48c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8024402:	455e      	cmp	r6, fp
 8024404:	d006      	beq.n	8024414 <mg_json_get+0xf8>
          nesting[depth++] = c;
 8024406:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 802440a:	446b      	add	r3, sp
 802440c:	f803 5c20 	strb.w	r5, [r3, #-32]
 8024410:	3601      	adds	r6, #1
          break;
 8024412:	e12e      	b.n	8024672 <mg_json_get+0x356>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8024414:	9b03      	ldr	r3, [sp, #12]
 8024416:	9a04      	ldr	r2, [sp, #16]
 8024418:	5c9b      	ldrb	r3, [r3, r2]
 802441a:	2b5b      	cmp	r3, #91	@ 0x5b
 802441c:	d1f3      	bne.n	8024406 <mg_json_get+0xea>
 802441e:	9b02      	ldr	r3, [sp, #8]
 8024420:	459a      	cmp	sl, r3
 8024422:	d1f0      	bne.n	8024406 <mg_json_get+0xea>
            ed++, pos++, ci = 0;
 8024424:	f10b 0b01 	add.w	fp, fp, #1
 8024428:	4610      	mov	r0, r2
 802442a:	3001      	adds	r0, #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 802442c:	2200      	movs	r2, #0
 802442e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8024432:	e005      	b.n	8024440 <mg_json_get+0x124>
              ei *= 10;
 8024434:	eb02 0282 	add.w	r2, r2, r2, lsl #2
              ei += path[pos] - '0';
 8024438:	3b30      	subs	r3, #48	@ 0x30
 802443a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 802443e:	3001      	adds	r0, #1
 8024440:	f81c 3000 	ldrb.w	r3, [ip, r0]
 8024444:	2b5d      	cmp	r3, #93	@ 0x5d
 8024446:	d001      	beq.n	802444c <mg_json_get+0x130>
 8024448:	2b00      	cmp	r3, #0
 802444a:	d1f3      	bne.n	8024434 <mg_json_get+0x118>
            if (path[pos] != 0) pos++;
 802444c:	9004      	str	r0, [sp, #16]
 802444e:	9202      	str	r2, [sp, #8]
 8024450:	b12b      	cbz	r3, 802445e <mg_json_get+0x142>
 8024452:	4603      	mov	r3, r0
 8024454:	3301      	adds	r3, #1
 8024456:	9304      	str	r3, [sp, #16]
            ed++, pos++, ci = 0;
 8024458:	f04f 0a00 	mov.w	sl, #0
 802445c:	e7d3      	b.n	8024406 <mg_json_get+0xea>
 802445e:	f04f 0a00 	mov.w	sl, #0
 8024462:	e7d0      	b.n	8024406 <mg_json_get+0xea>
        } else if (c == ']' && depth > 0) {  // Empty array
 8024464:	2e00      	cmp	r6, #0
 8024466:	dd84      	ble.n	8024372 <mg_json_get+0x56>
          MG_EOO(']');
 8024468:	455e      	cmp	r6, fp
 802446a:	d01f      	beq.n	80244ac <mg_json_get+0x190>
 802446c:	3e01      	subs	r6, #1
 802446e:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8024472:	446b      	add	r3, sp
 8024474:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8024478:	3302      	adds	r3, #2
 802447a:	429d      	cmp	r5, r3
 802447c:	f040 8197 	bne.w	80247ae <mg_json_get+0x492>
 8024480:	455e      	cmp	r6, fp
 8024482:	d192      	bne.n	80243aa <mg_json_get+0x8e>
 8024484:	9b03      	ldr	r3, [sp, #12]
 8024486:	9a04      	ldr	r2, [sp, #16]
 8024488:	5c9b      	ldrb	r3, [r3, r2]
 802448a:	2b00      	cmp	r3, #0
 802448c:	d18d      	bne.n	80243aa <mg_json_get+0x8e>
 802448e:	9b02      	ldr	r3, [sp, #8]
 8024490:	459a      	cmp	sl, r3
 8024492:	d18a      	bne.n	80243aa <mg_json_get+0x8e>
 8024494:	f8dd a018 	ldr.w	sl, [sp, #24]
 8024498:	f1ba 0f00 	cmp.w	sl, #0
 802449c:	d004      	beq.n	80244a8 <mg_json_get+0x18c>
 802449e:	9b05      	ldr	r3, [sp, #20]
 80244a0:	1ae3      	subs	r3, r4, r3
 80244a2:	3301      	adds	r3, #1
 80244a4:	f8ca 3000 	str.w	r3, [sl]
 80244a8:	9d05      	ldr	r5, [sp, #20]
 80244aa:	e173      	b.n	8024794 <mg_json_get+0x478>
 80244ac:	9b02      	ldr	r3, [sp, #8]
 80244ae:	459a      	cmp	sl, r3
 80244b0:	d0dc      	beq.n	802446c <mg_json_get+0x150>
 80244b2:	f06f 0502 	mvn.w	r5, #2
 80244b6:	e16d      	b.n	8024794 <mg_json_get+0x478>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 80244b8:	1ce3      	adds	r3, r4, #3
 80244ba:	9307      	str	r3, [sp, #28]
 80244bc:	4543      	cmp	r3, r8
 80244be:	f6bf af5b 	bge.w	8024378 <mg_json_get+0x5c>
 80244c2:	2204      	movs	r2, #4
 80244c4:	49a2      	ldr	r1, [pc, #648]	@ (8024750 <mg_json_get+0x434>)
 80244c6:	4648      	mov	r0, r9
 80244c8:	f008 f970 	bl	802c7ac <memcmp>
 80244cc:	2800      	cmp	r0, #0
 80244ce:	f47f af53 	bne.w	8024378 <mg_json_get+0x5c>
          i += 3;
 80244d2:	9c07      	ldr	r4, [sp, #28]
 80244d4:	e769      	b.n	80243aa <mg_json_get+0x8e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 80244d6:	1ce3      	adds	r3, r4, #3
 80244d8:	9307      	str	r3, [sp, #28]
 80244da:	4543      	cmp	r3, r8
 80244dc:	f6bf af4f 	bge.w	802437e <mg_json_get+0x62>
 80244e0:	2204      	movs	r2, #4
 80244e2:	499c      	ldr	r1, [pc, #624]	@ (8024754 <mg_json_get+0x438>)
 80244e4:	4648      	mov	r0, r9
 80244e6:	f008 f961 	bl	802c7ac <memcmp>
 80244ea:	2800      	cmp	r0, #0
 80244ec:	f47f af47 	bne.w	802437e <mg_json_get+0x62>
          i += 3;
 80244f0:	9c07      	ldr	r4, [sp, #28]
 80244f2:	e75a      	b.n	80243aa <mg_json_get+0x8e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 80244f4:	1d23      	adds	r3, r4, #4
 80244f6:	9307      	str	r3, [sp, #28]
 80244f8:	4543      	cmp	r3, r8
 80244fa:	f6bf af43 	bge.w	8024384 <mg_json_get+0x68>
 80244fe:	2205      	movs	r2, #5
 8024500:	4995      	ldr	r1, [pc, #596]	@ (8024758 <mg_json_get+0x43c>)
 8024502:	4648      	mov	r0, r9
 8024504:	f008 f952 	bl	802c7ac <memcmp>
 8024508:	2800      	cmp	r0, #0
 802450a:	f47f af3b 	bne.w	8024384 <mg_json_get+0x68>
          i += 4;
 802450e:	9c07      	ldr	r4, [sp, #28]
 8024510:	e74b      	b.n	80243aa <mg_json_get+0x8e>
        } else if (c == '"') {
 8024512:	2d22      	cmp	r5, #34	@ 0x22
 8024514:	f040 814e 	bne.w	80247b4 <mg_json_get+0x498>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8024518:	9801      	ldr	r0, [sp, #4]
 802451a:	3001      	adds	r0, #1
 802451c:	eba8 0104 	sub.w	r1, r8, r4
 8024520:	3901      	subs	r1, #1
 8024522:	4438      	add	r0, r7
 8024524:	f7fd fbdb 	bl	8021cde <mg_pass_string>
          if (n < 0) return n;
 8024528:	1e05      	subs	r5, r0, #0
 802452a:	f2c0 8133 	blt.w	8024794 <mg_json_get+0x478>
          i += n + 1;
 802452e:	3501      	adds	r5, #1
 8024530:	442c      	add	r4, r5
 8024532:	e73a      	b.n	80243aa <mg_json_get+0x8e>
        MG_CHECKRET('V');
 8024534:	9b03      	ldr	r3, [sp, #12]
 8024536:	9a04      	ldr	r2, [sp, #16]
 8024538:	5c9b      	ldrb	r3, [r3, r2]
 802453a:	2b00      	cmp	r3, #0
 802453c:	f47f af38 	bne.w	80243b0 <mg_json_get+0x94>
 8024540:	9b02      	ldr	r3, [sp, #8]
 8024542:	459a      	cmp	sl, r3
 8024544:	f47f af34 	bne.w	80243b0 <mg_json_get+0x94>
 8024548:	f8dd a018 	ldr.w	sl, [sp, #24]
 802454c:	f1ba 0f00 	cmp.w	sl, #0
 8024550:	d004      	beq.n	802455c <mg_json_get+0x240>
 8024552:	9b05      	ldr	r3, [sp, #20]
 8024554:	1ae3      	subs	r3, r4, r3
 8024556:	3301      	adds	r3, #1
 8024558:	f8ca 3000 	str.w	r3, [sl]
 802455c:	9d05      	ldr	r5, [sp, #20]
 802455e:	e119      	b.n	8024794 <mg_json_get+0x478>
        if (depth == ed && ei >= 0) ci++;
 8024560:	9b02      	ldr	r3, [sp, #8]
 8024562:	2b00      	cmp	r3, #0
 8024564:	f2c0 8110 	blt.w	8024788 <mg_json_get+0x46c>
 8024568:	f10a 0a01 	add.w	sl, sl, #1
        expecting = S_COMMA_OR_EOO;
 802456c:	2103      	movs	r1, #3
 802456e:	e080      	b.n	8024672 <mg_json_get+0x356>
        if (c == '"') {
 8024570:	2d22      	cmp	r5, #34	@ 0x22
 8024572:	d014      	beq.n	802459e <mg_json_get+0x282>
        } else if (c == '}') {  // Empty object
 8024574:	2d7d      	cmp	r5, #125	@ 0x7d
 8024576:	f040 8126 	bne.w	80247c6 <mg_json_get+0x4aa>
          MG_EOO('}');
 802457a:	455e      	cmp	r6, fp
 802457c:	d054      	beq.n	8024628 <mg_json_get+0x30c>
 802457e:	3e01      	subs	r6, #1
 8024580:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8024584:	446b      	add	r3, sp
 8024586:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 802458a:	3302      	adds	r3, #2
 802458c:	429d      	cmp	r5, r3
 802458e:	f040 811d 	bne.w	80247cc <mg_json_get+0x4b0>
 8024592:	455e      	cmp	r6, fp
 8024594:	d04e      	beq.n	8024634 <mg_json_get+0x318>
          if (depth == ed && ei >= 0) ci++;
 8024596:	455e      	cmp	r6, fp
 8024598:	d060      	beq.n	802465c <mg_json_get+0x340>
          expecting = S_COMMA_OR_EOO;
 802459a:	2103      	movs	r1, #3
 802459c:	e069      	b.n	8024672 <mg_json_get+0x356>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 802459e:	9b01      	ldr	r3, [sp, #4]
 80245a0:	f103 0901 	add.w	r9, r3, #1
 80245a4:	44b9      	add	r9, r7
 80245a6:	eba8 0104 	sub.w	r1, r8, r4
 80245aa:	3901      	subs	r1, #1
 80245ac:	4648      	mov	r0, r9
 80245ae:	f7fd fb96 	bl	8021cde <mg_pass_string>
          if (n < 0) return n;
 80245b2:	1e05      	subs	r5, r0, #0
 80245b4:	f2c0 80ee 	blt.w	8024794 <mg_json_get+0x478>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 80245b8:	1c63      	adds	r3, r4, #1
 80245ba:	442b      	add	r3, r5
 80245bc:	4543      	cmp	r3, r8
 80245be:	f280 80fc 	bge.w	80247ba <mg_json_get+0x49e>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 80245c2:	455e      	cmp	r6, fp
 80245c4:	f2c0 80fc 	blt.w	80247c0 <mg_json_get+0x4a4>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 80245c8:	d005      	beq.n	80245d6 <mg_json_get+0x2ba>
          if (depth == ed && path[pos - 1] == '.' &&
 80245ca:	455e      	cmp	r6, fp
 80245cc:	d00d      	beq.n	80245ea <mg_json_get+0x2ce>
          i += n + 1;
 80245ce:	3501      	adds	r5, #1
 80245d0:	442c      	add	r4, r5
          expecting = S_COLON;
 80245d2:	2102      	movs	r1, #2
 80245d4:	e04d      	b.n	8024672 <mg_json_get+0x356>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 80245d6:	9b03      	ldr	r3, [sp, #12]
 80245d8:	9a04      	ldr	r2, [sp, #16]
 80245da:	4413      	add	r3, r2
 80245dc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80245e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80245e2:	d0f2      	beq.n	80245ca <mg_json_get+0x2ae>
 80245e4:	f06f 0502 	mvn.w	r5, #2
 80245e8:	e0d4      	b.n	8024794 <mg_json_get+0x478>
          if (depth == ed && path[pos - 1] == '.' &&
 80245ea:	9b03      	ldr	r3, [sp, #12]
 80245ec:	9a04      	ldr	r2, [sp, #16]
 80245ee:	4413      	add	r3, r2
 80245f0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80245f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80245f6:	d1ea      	bne.n	80245ce <mg_json_get+0x2b2>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 80245f8:	462a      	mov	r2, r5
 80245fa:	9b03      	ldr	r3, [sp, #12]
 80245fc:	9904      	ldr	r1, [sp, #16]
 80245fe:	1859      	adds	r1, r3, r1
 8024600:	4648      	mov	r0, r9
 8024602:	f008 f932 	bl	802c86a <strncmp>
          if (depth == ed && path[pos - 1] == '.' &&
 8024606:	2800      	cmp	r0, #0
 8024608:	d1e1      	bne.n	80245ce <mg_json_get+0x2b2>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 802460a:	9904      	ldr	r1, [sp, #16]
 802460c:	194b      	adds	r3, r1, r5
 802460e:	9a03      	ldr	r2, [sp, #12]
 8024610:	5cd2      	ldrb	r2, [r2, r3]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8024612:	b12a      	cbz	r2, 8024620 <mg_json_get+0x304>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8024614:	2a2e      	cmp	r2, #46	@ 0x2e
 8024616:	d005      	beq.n	8024624 <mg_json_get+0x308>
 8024618:	2a5b      	cmp	r2, #91	@ 0x5b
 802461a:	d1d8      	bne.n	80245ce <mg_json_get+0x2b2>
            pos += n;
 802461c:	9304      	str	r3, [sp, #16]
 802461e:	e7d6      	b.n	80245ce <mg_json_get+0x2b2>
 8024620:	9304      	str	r3, [sp, #16]
 8024622:	e7d4      	b.n	80245ce <mg_json_get+0x2b2>
 8024624:	9304      	str	r3, [sp, #16]
 8024626:	e7d2      	b.n	80245ce <mg_json_get+0x2b2>
          MG_EOO('}');
 8024628:	9b02      	ldr	r3, [sp, #8]
 802462a:	459a      	cmp	sl, r3
 802462c:	d0a7      	beq.n	802457e <mg_json_get+0x262>
 802462e:	f06f 0502 	mvn.w	r5, #2
 8024632:	e0af      	b.n	8024794 <mg_json_get+0x478>
 8024634:	9b03      	ldr	r3, [sp, #12]
 8024636:	9a04      	ldr	r2, [sp, #16]
 8024638:	5c9b      	ldrb	r3, [r3, r2]
 802463a:	2b00      	cmp	r3, #0
 802463c:	d1ab      	bne.n	8024596 <mg_json_get+0x27a>
 802463e:	9b02      	ldr	r3, [sp, #8]
 8024640:	459a      	cmp	sl, r3
 8024642:	d1a8      	bne.n	8024596 <mg_json_get+0x27a>
 8024644:	f8dd a018 	ldr.w	sl, [sp, #24]
 8024648:	f1ba 0f00 	cmp.w	sl, #0
 802464c:	d004      	beq.n	8024658 <mg_json_get+0x33c>
 802464e:	9b05      	ldr	r3, [sp, #20]
 8024650:	1ae3      	subs	r3, r4, r3
 8024652:	3301      	adds	r3, #1
 8024654:	f8ca 3000 	str.w	r3, [sl]
 8024658:	9d05      	ldr	r5, [sp, #20]
 802465a:	e09b      	b.n	8024794 <mg_json_get+0x478>
          if (depth == ed && ei >= 0) ci++;
 802465c:	9b02      	ldr	r3, [sp, #8]
 802465e:	2b00      	cmp	r3, #0
 8024660:	f2c0 8094 	blt.w	802478c <mg_json_get+0x470>
 8024664:	f10a 0a01 	add.w	sl, sl, #1
          expecting = S_COMMA_OR_EOO;
 8024668:	2103      	movs	r1, #3
 802466a:	e002      	b.n	8024672 <mg_json_get+0x356>
        if (c == ':') {
 802466c:	2d3a      	cmp	r5, #58	@ 0x3a
 802466e:	d121      	bne.n	80246b4 <mg_json_get+0x398>
          expecting = S_VALUE;
 8024670:	2100      	movs	r1, #0
  for (i = 0; i < len; i++) {
 8024672:	3401      	adds	r4, #1
 8024674:	4544      	cmp	r4, r8
 8024676:	f280 808b 	bge.w	8024790 <mg_json_get+0x474>
    unsigned char c = ((unsigned char *) s)[i];
 802467a:	9401      	str	r4, [sp, #4]
 802467c:	eb07 0904 	add.w	r9, r7, r4
 8024680:	5d3d      	ldrb	r5, [r7, r4]
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8024682:	f1a5 0309 	sub.w	r3, r5, #9
 8024686:	b2db      	uxtb	r3, r3
 8024688:	2b17      	cmp	r3, #23
 802468a:	d805      	bhi.n	8024698 <mg_json_get+0x37c>
 802468c:	4a33      	ldr	r2, [pc, #204]	@ (802475c <mg_json_get+0x440>)
 802468e:	fa22 f303 	lsr.w	r3, r2, r3
 8024692:	f013 0f01 	tst.w	r3, #1
 8024696:	d1ec      	bne.n	8024672 <mg_json_get+0x356>
    switch (expecting) {
 8024698:	2903      	cmp	r1, #3
 802469a:	d8ea      	bhi.n	8024672 <mg_json_get+0x356>
 802469c:	a301      	add	r3, pc, #4	@ (adr r3, 80246a4 <mg_json_get+0x388>)
 802469e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80246a2:	bf00      	nop
 80246a4:	08024363 	.word	0x08024363
 80246a8:	08024571 	.word	0x08024571
 80246ac:	0802466d 	.word	0x0802466d
 80246b0:	080246bb 	.word	0x080246bb
          return MG_JSON_INVALID;
 80246b4:	f06f 0501 	mvn.w	r5, #1
 80246b8:	e06c      	b.n	8024794 <mg_json_get+0x478>
        if (depth <= 0) {
 80246ba:	2e00      	cmp	r6, #0
 80246bc:	f340 8089 	ble.w	80247d2 <mg_json_get+0x4b6>
        } else if (c == ',') {
 80246c0:	2d2c      	cmp	r5, #44	@ 0x2c
 80246c2:	d01d      	beq.n	8024700 <mg_json_get+0x3e4>
        } else if (c == ']' || c == '}') {
 80246c4:	2d5d      	cmp	r5, #93	@ 0x5d
 80246c6:	d002      	beq.n	80246ce <mg_json_get+0x3b2>
 80246c8:	2d7d      	cmp	r5, #125	@ 0x7d
 80246ca:	f040 8085 	bne.w	80247d8 <mg_json_get+0x4bc>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 80246ce:	455e      	cmp	r6, fp
 80246d0:	d020      	beq.n	8024714 <mg_json_get+0x3f8>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 80246d2:	455e      	cmp	r6, fp
 80246d4:	d02a      	beq.n	802472c <mg_json_get+0x410>
          MG_EOO('O');
 80246d6:	455e      	cmp	r6, fp
 80246d8:	d034      	beq.n	8024744 <mg_json_get+0x428>
 80246da:	3e01      	subs	r6, #1
 80246dc:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 80246e0:	446b      	add	r3, sp
 80246e2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80246e6:	3302      	adds	r3, #2
 80246e8:	429d      	cmp	r5, r3
 80246ea:	d178      	bne.n	80247de <mg_json_get+0x4c2>
 80246ec:	455e      	cmp	r6, fp
 80246ee:	d037      	beq.n	8024760 <mg_json_get+0x444>
          if (depth == ed && ei >= 0) ci++;
 80246f0:	455e      	cmp	r6, fp
 80246f2:	d1be      	bne.n	8024672 <mg_json_get+0x356>
 80246f4:	9b02      	ldr	r3, [sp, #8]
 80246f6:	2b00      	cmp	r3, #0
 80246f8:	dbbb      	blt.n	8024672 <mg_json_get+0x356>
 80246fa:	f10a 0a01 	add.w	sl, sl, #1
 80246fe:	e7b8      	b.n	8024672 <mg_json_get+0x356>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8024700:	f106 034f 	add.w	r3, r6, #79	@ 0x4f
 8024704:	446b      	add	r3, sp
 8024706:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 802470a:	297b      	cmp	r1, #123	@ 0x7b
 802470c:	bf14      	ite	ne
 802470e:	2100      	movne	r1, #0
 8024710:	2101      	moveq	r1, #1
 8024712:	e7ae      	b.n	8024672 <mg_json_get+0x356>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 8024714:	2d7d      	cmp	r5, #125	@ 0x7d
 8024716:	d1dc      	bne.n	80246d2 <mg_json_get+0x3b6>
 8024718:	9b03      	ldr	r3, [sp, #12]
 802471a:	9a04      	ldr	r2, [sp, #16]
 802471c:	4413      	add	r3, r2
 802471e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8024722:	2b2e      	cmp	r3, #46	@ 0x2e
 8024724:	d1d5      	bne.n	80246d2 <mg_json_get+0x3b6>
            return MG_JSON_NOT_FOUND;
 8024726:	f06f 0502 	mvn.w	r5, #2
 802472a:	e033      	b.n	8024794 <mg_json_get+0x478>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 802472c:	2d5d      	cmp	r5, #93	@ 0x5d
 802472e:	d1d2      	bne.n	80246d6 <mg_json_get+0x3ba>
 8024730:	9b03      	ldr	r3, [sp, #12]
 8024732:	9a04      	ldr	r2, [sp, #16]
 8024734:	4413      	add	r3, r2
 8024736:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802473a:	2b2c      	cmp	r3, #44	@ 0x2c
 802473c:	d1cb      	bne.n	80246d6 <mg_json_get+0x3ba>
            return MG_JSON_NOT_FOUND;
 802473e:	f06f 0502 	mvn.w	r5, #2
 8024742:	e027      	b.n	8024794 <mg_json_get+0x478>
          MG_EOO('O');
 8024744:	9b02      	ldr	r3, [sp, #8]
 8024746:	459a      	cmp	sl, r3
 8024748:	d0c7      	beq.n	80246da <mg_json_get+0x3be>
 802474a:	f06f 0502 	mvn.w	r5, #2
 802474e:	e021      	b.n	8024794 <mg_json_get+0x478>
 8024750:	080387c8 	.word	0x080387c8
 8024754:	0803b29c 	.word	0x0803b29c
 8024758:	080387d0 	.word	0x080387d0
 802475c:	00800013 	.word	0x00800013
 8024760:	9b03      	ldr	r3, [sp, #12]
 8024762:	9a04      	ldr	r2, [sp, #16]
 8024764:	5c9b      	ldrb	r3, [r3, r2]
 8024766:	2b00      	cmp	r3, #0
 8024768:	d1c2      	bne.n	80246f0 <mg_json_get+0x3d4>
 802476a:	9b02      	ldr	r3, [sp, #8]
 802476c:	459a      	cmp	sl, r3
 802476e:	d1bf      	bne.n	80246f0 <mg_json_get+0x3d4>
 8024770:	f8dd a018 	ldr.w	sl, [sp, #24]
 8024774:	f1ba 0f00 	cmp.w	sl, #0
 8024778:	d004      	beq.n	8024784 <mg_json_get+0x468>
 802477a:	9b05      	ldr	r3, [sp, #20]
 802477c:	1ae3      	subs	r3, r4, r3
 802477e:	3301      	adds	r3, #1
 8024780:	f8ca 3000 	str.w	r3, [sl]
 8024784:	9d05      	ldr	r5, [sp, #20]
 8024786:	e005      	b.n	8024794 <mg_json_get+0x478>
        expecting = S_COMMA_OR_EOO;
 8024788:	2103      	movs	r1, #3
 802478a:	e772      	b.n	8024672 <mg_json_get+0x356>
          expecting = S_COMMA_OR_EOO;
 802478c:	2103      	movs	r1, #3
 802478e:	e770      	b.n	8024672 <mg_json_get+0x356>
  return MG_JSON_NOT_FOUND;
 8024790:	f06f 0502 	mvn.w	r5, #2
}
 8024794:	4628      	mov	r0, r5
 8024796:	b015      	add	sp, #84	@ 0x54
 8024798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (path[0] != '$') return MG_JSON_INVALID;
 802479c:	f06f 0501 	mvn.w	r5, #1
 80247a0:	e7f8      	b.n	8024794 <mg_json_get+0x478>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80247a2:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80247a6:	e7f5      	b.n	8024794 <mg_json_get+0x478>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80247a8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80247ac:	e7f2      	b.n	8024794 <mg_json_get+0x478>
          MG_EOO(']');
 80247ae:	f06f 0501 	mvn.w	r5, #1
 80247b2:	e7ef      	b.n	8024794 <mg_json_get+0x478>
          return MG_JSON_INVALID;
 80247b4:	f06f 0501 	mvn.w	r5, #1
 80247b8:	e7ec      	b.n	8024794 <mg_json_get+0x478>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 80247ba:	f06f 0502 	mvn.w	r5, #2
 80247be:	e7e9      	b.n	8024794 <mg_json_get+0x478>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 80247c0:	f06f 0502 	mvn.w	r5, #2
 80247c4:	e7e6      	b.n	8024794 <mg_json_get+0x478>
          return MG_JSON_INVALID;
 80247c6:	f06f 0501 	mvn.w	r5, #1
 80247ca:	e7e3      	b.n	8024794 <mg_json_get+0x478>
          MG_EOO('}');
 80247cc:	f06f 0501 	mvn.w	r5, #1
 80247d0:	e7e0      	b.n	8024794 <mg_json_get+0x478>
          return MG_JSON_INVALID;
 80247d2:	f06f 0501 	mvn.w	r5, #1
 80247d6:	e7dd      	b.n	8024794 <mg_json_get+0x478>
          return MG_JSON_INVALID;
 80247d8:	f06f 0501 	mvn.w	r5, #1
 80247dc:	e7da      	b.n	8024794 <mg_json_get+0x478>
          MG_EOO('O');
 80247de:	f06f 0501 	mvn.w	r5, #1
 80247e2:	e7d7      	b.n	8024794 <mg_json_get+0x478>

080247e4 <mg_json_get_num>:
bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 80247e4:	b510      	push	{r4, lr}
 80247e6:	b084      	sub	sp, #16
 80247e8:	46ec      	mov	ip, sp
 80247ea:	e88c 0003 	stmia.w	ip, {r0, r1}
 80247ee:	461c      	mov	r4, r3
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 80247f0:	ab03      	add	r3, sp, #12
 80247f2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80247f6:	f7ff fd91 	bl	802431c <mg_json_get>
 80247fa:	1e02      	subs	r2, r0, #0
 80247fc:	db11      	blt.n	8024822 <mg_json_get_num+0x3e>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 80247fe:	9b00      	ldr	r3, [sp, #0]
 8024800:	1898      	adds	r0, r3, r2
 8024802:	5c9a      	ldrb	r2, [r3, r2]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8024804:	2a2d      	cmp	r2, #45	@ 0x2d
 8024806:	d003      	beq.n	8024810 <mg_json_get_num+0x2c>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8024808:	3a30      	subs	r2, #48	@ 0x30
 802480a:	b2d2      	uxtb	r2, r2
 802480c:	2a09      	cmp	r2, #9
 802480e:	d80b      	bhi.n	8024828 <mg_json_get_num+0x44>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 8024810:	b164      	cbz	r4, 802482c <mg_json_get_num+0x48>
 8024812:	2200      	movs	r2, #0
 8024814:	9903      	ldr	r1, [sp, #12]
 8024816:	f7fd fa87 	bl	8021d28 <mg_atod>
 802481a:	ed84 0b00 	vstr	d0, [r4]
    found = 1;
 802481e:	2001      	movs	r0, #1
 8024820:	e000      	b.n	8024824 <mg_json_get_num+0x40>
  int n, toklen, found = 0;
 8024822:	2000      	movs	r0, #0
}
 8024824:	b004      	add	sp, #16
 8024826:	bd10      	pop	{r4, pc}
  int n, toklen, found = 0;
 8024828:	2000      	movs	r0, #0
 802482a:	e7fb      	b.n	8024824 <mg_json_get_num+0x40>
    found = 1;
 802482c:	2001      	movs	r0, #1
 802482e:	e7f9      	b.n	8024824 <mg_json_get_num+0x40>

08024830 <mg_json_get_bool>:
bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 8024830:	b510      	push	{r4, lr}
 8024832:	b082      	sub	sp, #8
 8024834:	46ec      	mov	ip, sp
 8024836:	e88c 0003 	stmia.w	ip, {r0, r1}
 802483a:	461c      	mov	r4, r3
  int found = 0, off = mg_json_get(json, path, NULL);
 802483c:	2300      	movs	r3, #0
 802483e:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8024842:	f7ff fd6b 	bl	802431c <mg_json_get>
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 8024846:	2800      	cmp	r0, #0
 8024848:	db0f      	blt.n	802486a <mg_json_get_bool+0x3a>
 802484a:	9b00      	ldr	r3, [sp, #0]
 802484c:	5c1b      	ldrb	r3, [r3, r0]
 802484e:	2b74      	cmp	r3, #116	@ 0x74
 8024850:	d003      	beq.n	802485a <mg_json_get_bool+0x2a>
 8024852:	2b66      	cmp	r3, #102	@ 0x66
 8024854:	d001      	beq.n	802485a <mg_json_get_bool+0x2a>
  int found = 0, off = mg_json_get(json, path, NULL);
 8024856:	2000      	movs	r0, #0
 8024858:	e008      	b.n	802486c <mg_json_get_bool+0x3c>
    if (v != NULL) *v = json.buf[off] == 't';
 802485a:	b14c      	cbz	r4, 8024870 <mg_json_get_bool+0x40>
 802485c:	2b74      	cmp	r3, #116	@ 0x74
 802485e:	bf14      	ite	ne
 8024860:	2300      	movne	r3, #0
 8024862:	2301      	moveq	r3, #1
 8024864:	7023      	strb	r3, [r4, #0]
    found = 1;
 8024866:	2001      	movs	r0, #1
 8024868:	e000      	b.n	802486c <mg_json_get_bool+0x3c>
  int found = 0, off = mg_json_get(json, path, NULL);
 802486a:	2000      	movs	r0, #0
}
 802486c:	b002      	add	sp, #8
 802486e:	bd10      	pop	{r4, pc}
    found = 1;
 8024870:	2001      	movs	r0, #1
 8024872:	e7fb      	b.n	802486c <mg_json_get_bool+0x3c>

08024874 <mg_log_set_fn>:
  s_log_func = fn;
 8024874:	4b02      	ldr	r3, [pc, #8]	@ (8024880 <mg_log_set_fn+0xc>)
 8024876:	6018      	str	r0, [r3, #0]
  s_log_func_param = param;
 8024878:	4b02      	ldr	r3, [pc, #8]	@ (8024884 <mg_log_set_fn+0x10>)
 802487a:	6019      	str	r1, [r3, #0]
}
 802487c:	4770      	bx	lr
 802487e:	bf00      	nop
 8024880:	20000138 	.word	0x20000138
 8024884:	2001a128 	.word	0x2001a128

08024888 <mg_hexdump>:
void mg_hexdump(const void *buf, size_t len) {
 8024888:	b5f0      	push	{r4, r5, r6, r7, lr}
 802488a:	b085      	sub	sp, #20
 802488c:	4606      	mov	r6, r0
 802488e:	460f      	mov	r7, r1
  for (i = 0; i < len; i++) {
 8024890:	2500      	movs	r5, #0
  unsigned char ascii[16], alen = 0;
 8024892:	462c      	mov	r4, r5
  for (i = 0; i < len; i++) {
 8024894:	e038      	b.n	8024908 <mg_hexdump+0x80>
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 8024896:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802489a:	f7fd fb57 	bl	8021f4c <nibble>
 802489e:	f7fd fb3d 	bl	8021f1c <logc>
 80248a2:	f3c5 2003 	ubfx	r0, r5, #8, #4
 80248a6:	f7fd fb51 	bl	8021f4c <nibble>
 80248aa:	f7fd fb37 	bl	8021f1c <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 80248ae:	f3c5 1003 	ubfx	r0, r5, #4, #4
 80248b2:	f7fd fb4b 	bl	8021f4c <nibble>
 80248b6:	f7fd fb31 	bl	8021f1c <logc>
 80248ba:	2030      	movs	r0, #48	@ 0x30
 80248bc:	f7fd fb2e 	bl	8021f1c <logc>
 80248c0:	2103      	movs	r1, #3
 80248c2:	4829      	ldr	r0, [pc, #164]	@ (8024968 <mg_hexdump+0xe0>)
 80248c4:	f7fd fb36 	bl	8021f34 <logs>
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 80248c8:	5d70      	ldrb	r0, [r6, r5]
 80248ca:	0900      	lsrs	r0, r0, #4
 80248cc:	f7fd fb3e 	bl	8021f4c <nibble>
 80248d0:	f7fd fb24 	bl	8021f1c <logc>
 80248d4:	5d70      	ldrb	r0, [r6, r5]
 80248d6:	f000 000f 	and.w	r0, r0, #15
 80248da:	f7fd fb37 	bl	8021f4c <nibble>
 80248de:	f7fd fb1d 	bl	8021f1c <logc>
    logc(' ');                                         // Space after hex number
 80248e2:	2020      	movs	r0, #32
 80248e4:	f7fd fb1a 	bl	8021f1c <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 80248e8:	5d72      	ldrb	r2, [r6, r5]
 80248ea:	f1a2 0320 	sub.w	r3, r2, #32
 80248ee:	b2db      	uxtb	r3, r3
 80248f0:	2b5e      	cmp	r3, #94	@ 0x5e
 80248f2:	d900      	bls.n	80248f6 <mg_hexdump+0x6e>
 80248f4:	222e      	movs	r2, #46	@ 0x2e
 80248f6:	1c63      	adds	r3, r4, #1
 80248f8:	f104 0110 	add.w	r1, r4, #16
 80248fc:	eb0d 0401 	add.w	r4, sp, r1
 8024900:	f804 2c10 	strb.w	r2, [r4, #-16]
  for (i = 0; i < len; i++) {
 8024904:	3501      	adds	r5, #1
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8024906:	b2dc      	uxtb	r4, r3
  for (i = 0; i < len; i++) {
 8024908:	42bd      	cmp	r5, r7
 802490a:	d21e      	bcs.n	802494a <mg_hexdump+0xc2>
    if ((i % 16) == 0) {
 802490c:	f015 0f0f 	tst.w	r5, #15
 8024910:	d1da      	bne.n	80248c8 <mg_hexdump+0x40>
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 8024912:	2d00      	cmp	r5, #0
 8024914:	d0bf      	beq.n	8024896 <mg_hexdump+0xe>
 8024916:	2102      	movs	r1, #2
 8024918:	4814      	ldr	r0, [pc, #80]	@ (802496c <mg_hexdump+0xe4>)
 802491a:	f7fd fb0b 	bl	8021f34 <logs>
 802491e:	2110      	movs	r1, #16
 8024920:	4668      	mov	r0, sp
 8024922:	f7fd fb07 	bl	8021f34 <logs>
 8024926:	200a      	movs	r0, #10
 8024928:	f7fd faf8 	bl	8021f1c <logc>
 802492c:	2400      	movs	r4, #0
 802492e:	e7b2      	b.n	8024896 <mg_hexdump+0xe>
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 8024930:	2103      	movs	r1, #3
 8024932:	480d      	ldr	r0, [pc, #52]	@ (8024968 <mg_hexdump+0xe0>)
 8024934:	f7fd fafe 	bl	8021f34 <logs>
 8024938:	1c63      	adds	r3, r4, #1
 802493a:	f104 0210 	add.w	r2, r4, #16
 802493e:	eb0d 0402 	add.w	r4, sp, r2
 8024942:	2220      	movs	r2, #32
 8024944:	f804 2c10 	strb.w	r2, [r4, #-16]
 8024948:	b2dc      	uxtb	r4, r3
 802494a:	2c0f      	cmp	r4, #15
 802494c:	d9f0      	bls.n	8024930 <mg_hexdump+0xa8>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 802494e:	2102      	movs	r1, #2
 8024950:	4806      	ldr	r0, [pc, #24]	@ (802496c <mg_hexdump+0xe4>)
 8024952:	f7fd faef 	bl	8021f34 <logs>
 8024956:	2110      	movs	r1, #16
 8024958:	4668      	mov	r0, sp
 802495a:	f7fd faeb 	bl	8021f34 <logs>
 802495e:	200a      	movs	r0, #10
 8024960:	f7fd fadc 	bl	8021f1c <logc>
}
 8024964:	b005      	add	sp, #20
 8024966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024968:	0803b2a8 	.word	0x0803b2a8
 802496c:	0803b2a4 	.word	0x0803b2a4

08024970 <mg_md5_init>:
  ctx->buf[0] = 0x67452301;
 8024970:	4b09      	ldr	r3, [pc, #36]	@ (8024998 <mg_md5_init+0x28>)
 8024972:	6003      	str	r3, [r0, #0]
  ctx->buf[1] = 0xefcdab89;
 8024974:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 8024978:	6043      	str	r3, [r0, #4]
  ctx->buf[2] = 0x98badcfe;
 802497a:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 802497e:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 8024982:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 8024986:	6083      	str	r3, [r0, #8]
  ctx->buf[3] = 0x10325476;
 8024988:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 802498c:	60c3      	str	r3, [r0, #12]
  ctx->bits[0] = 0;
 802498e:	2300      	movs	r3, #0
 8024990:	6103      	str	r3, [r0, #16]
  ctx->bits[1] = 0;
 8024992:	6143      	str	r3, [r0, #20]
}
 8024994:	4770      	bx	lr
 8024996:	bf00      	nop
 8024998:	67452301 	.word	0x67452301

0802499c <mg_md5_update>:
void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 802499c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80249a0:	4606      	mov	r6, r0
 80249a2:	460c      	mov	r4, r1
 80249a4:	4615      	mov	r5, r2
  t = ctx->bits[0];
 80249a6:	6903      	ldr	r3, [r0, #16]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 80249a8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80249ac:	6102      	str	r2, [r0, #16]
 80249ae:	429a      	cmp	r2, r3
 80249b0:	d202      	bcs.n	80249b8 <mg_md5_update+0x1c>
 80249b2:	6942      	ldr	r2, [r0, #20]
 80249b4:	3201      	adds	r2, #1
 80249b6:	6142      	str	r2, [r0, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 80249b8:	6972      	ldr	r2, [r6, #20]
 80249ba:	eb02 7255 	add.w	r2, r2, r5, lsr #29
 80249be:	6172      	str	r2, [r6, #20]
  t = (t >> 3) & 0x3f;
 80249c0:	f3c3 07c5 	ubfx	r7, r3, #3, #6
  if (t) {
 80249c4:	f413 7ffc 	tst.w	r3, #504	@ 0x1f8
 80249c8:	d035      	beq.n	8024a36 <mg_md5_update+0x9a>
    unsigned char *p = (unsigned char *) ctx->in + t;
 80249ca:	f106 0918 	add.w	r9, r6, #24
 80249ce:	eb09 0007 	add.w	r0, r9, r7
    t = 64 - t;
 80249d2:	f1c7 0840 	rsb	r8, r7, #64	@ 0x40
    if (len < t) {
 80249d6:	4545      	cmp	r5, r8
 80249d8:	d30b      	bcc.n	80249f2 <mg_md5_update+0x56>
    memcpy(p, buf, t);
 80249da:	4642      	mov	r2, r8
 80249dc:	4621      	mov	r1, r4
 80249de:	f009 fc8b 	bl	802e2f8 <memcpy>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 80249e2:	4649      	mov	r1, r9
 80249e4:	4630      	mov	r0, r6
 80249e6:	f7fd fabb 	bl	8021f60 <mg_md5_transform>
    buf += t;
 80249ea:	4444      	add	r4, r8
    len -= t;
 80249ec:	3f40      	subs	r7, #64	@ 0x40
 80249ee:	443d      	add	r5, r7
 80249f0:	e021      	b.n	8024a36 <mg_md5_update+0x9a>
      memcpy(p, buf, len);
 80249f2:	462a      	mov	r2, r5
 80249f4:	4621      	mov	r1, r4
 80249f6:	f009 fc7f 	bl	802e2f8 <memcpy>
      return;
 80249fa:	e024      	b.n	8024a46 <mg_md5_update+0xaa>
    memcpy(ctx->in, buf, 64);
 80249fc:	f106 0118 	add.w	r1, r6, #24
 8024a00:	4623      	mov	r3, r4
 8024a02:	468c      	mov	ip, r1
 8024a04:	f104 0840 	add.w	r8, r4, #64	@ 0x40
 8024a08:	681f      	ldr	r7, [r3, #0]
 8024a0a:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8024a0e:	6898      	ldr	r0, [r3, #8]
 8024a10:	68da      	ldr	r2, [r3, #12]
 8024a12:	f8cc 7000 	str.w	r7, [ip]
 8024a16:	f8cc e004 	str.w	lr, [ip, #4]
 8024a1a:	f8cc 0008 	str.w	r0, [ip, #8]
 8024a1e:	f8cc 200c 	str.w	r2, [ip, #12]
 8024a22:	3310      	adds	r3, #16
 8024a24:	f10c 0c10 	add.w	ip, ip, #16
 8024a28:	4543      	cmp	r3, r8
 8024a2a:	d1ed      	bne.n	8024a08 <mg_md5_update+0x6c>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8024a2c:	4630      	mov	r0, r6
 8024a2e:	f7fd fa97 	bl	8021f60 <mg_md5_transform>
    buf += 64;
 8024a32:	3440      	adds	r4, #64	@ 0x40
    len -= 64;
 8024a34:	3d40      	subs	r5, #64	@ 0x40
  while (len >= 64) {
 8024a36:	2d3f      	cmp	r5, #63	@ 0x3f
 8024a38:	d8e0      	bhi.n	80249fc <mg_md5_update+0x60>
  memcpy(ctx->in, buf, len);
 8024a3a:	462a      	mov	r2, r5
 8024a3c:	4621      	mov	r1, r4
 8024a3e:	f106 0018 	add.w	r0, r6, #24
 8024a42:	f009 fc59 	bl	802e2f8 <memcpy>
}
 8024a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08024a4a <mg_md5_final>:
void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 8024a4a:	b570      	push	{r4, r5, r6, lr}
 8024a4c:	4604      	mov	r4, r0
 8024a4e:	460d      	mov	r5, r1
  count = (ctx->bits[0] >> 3) & 0x3F;
 8024a50:	6903      	ldr	r3, [r0, #16]
 8024a52:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  p = ctx->in + count;
 8024a56:	f100 0618 	add.w	r6, r0, #24
 8024a5a:	18f0      	adds	r0, r6, r3
  *p++ = 0x80;
 8024a5c:	3001      	adds	r0, #1
 8024a5e:	2280      	movs	r2, #128	@ 0x80
 8024a60:	54f2      	strb	r2, [r6, r3]
  count = 64 - 1 - count;
 8024a62:	f1c3 023f 	rsb	r2, r3, #63	@ 0x3f
  if (count < 8) {
 8024a66:	2a07      	cmp	r2, #7
 8024a68:	d821      	bhi.n	8024aae <mg_md5_final+0x64>
    memset(p, 0, count);
 8024a6a:	2100      	movs	r1, #0
 8024a6c:	f007 fec8 	bl	802c800 <memset>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8024a70:	4631      	mov	r1, r6
 8024a72:	4620      	mov	r0, r4
 8024a74:	f7fd fa74 	bl	8021f60 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 8024a78:	2238      	movs	r2, #56	@ 0x38
 8024a7a:	2100      	movs	r1, #0
 8024a7c:	4630      	mov	r0, r6
 8024a7e:	f007 febf 	bl	802c800 <memset>
  a[14] = ctx->bits[0];
 8024a82:	6923      	ldr	r3, [r4, #16]
 8024a84:	6523      	str	r3, [r4, #80]	@ 0x50
  a[15] = ctx->bits[1];
 8024a86:	6963      	ldr	r3, [r4, #20]
 8024a88:	6563      	str	r3, [r4, #84]	@ 0x54
  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8024a8a:	4631      	mov	r1, r6
 8024a8c:	4620      	mov	r0, r4
 8024a8e:	f7fd fa67 	bl	8021f60 <mg_md5_transform>
  memcpy(digest, ctx->buf, 16);
 8024a92:	6820      	ldr	r0, [r4, #0]
 8024a94:	6861      	ldr	r1, [r4, #4]
 8024a96:	68a2      	ldr	r2, [r4, #8]
 8024a98:	68e3      	ldr	r3, [r4, #12]
 8024a9a:	6028      	str	r0, [r5, #0]
 8024a9c:	6069      	str	r1, [r5, #4]
 8024a9e:	60aa      	str	r2, [r5, #8]
 8024aa0:	60eb      	str	r3, [r5, #12]
  memset((char *) ctx, 0, sizeof(*ctx));
 8024aa2:	2258      	movs	r2, #88	@ 0x58
 8024aa4:	2100      	movs	r1, #0
 8024aa6:	4620      	mov	r0, r4
 8024aa8:	f007 feaa 	bl	802c800 <memset>
}
 8024aac:	bd70      	pop	{r4, r5, r6, pc}
    memset(p, 0, count - 8);
 8024aae:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 8024ab2:	2100      	movs	r1, #0
 8024ab4:	f007 fea4 	bl	802c800 <memset>
 8024ab8:	e7e3      	b.n	8024a82 <mg_md5_final+0x38>

08024aba <mg_mqtt_parse>:
                  struct mg_mqtt_message *m) {
 8024aba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024abe:	4604      	mov	r4, r0
 8024ac0:	460d      	mov	r5, r1
 8024ac2:	4617      	mov	r7, r2
 8024ac4:	461e      	mov	r6, r3
  memset(m, 0, sizeof(*m));
 8024ac6:	2228      	movs	r2, #40	@ 0x28
 8024ac8:	2100      	movs	r1, #0
 8024aca:	4618      	mov	r0, r3
 8024acc:	f007 fe98 	bl	802c800 <memset>
  m->dgram.buf = (char *) buf;
 8024ad0:	6134      	str	r4, [r6, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 8024ad2:	2d01      	cmp	r5, #1
 8024ad4:	f240 8088 	bls.w	8024be8 <mg_mqtt_parse+0x12e>
  m->cmd = (uint8_t) (buf[0] >> 4);
 8024ad8:	7820      	ldrb	r0, [r4, #0]
 8024ada:	0900      	lsrs	r0, r0, #4
 8024adc:	76b0      	strb	r0, [r6, #26]
  m->qos = (buf[0] >> 1) & 3;
 8024ade:	46a4      	mov	ip, r4
 8024ae0:	f81c 9b01 	ldrb.w	r9, [ip], #1
 8024ae4:	f3c9 0941 	ubfx	r9, r9, #1, #2
 8024ae8:	f886 901b 	strb.w	r9, [r6, #27]
  n = len_len = 0;
 8024aec:	2300      	movs	r3, #0
 8024aee:	4619      	mov	r1, r3
  uint8_t lc = 0, *p, *end;
 8024af0:	461a      	mov	r2, r3
  while ((size_t) (p - buf) < len) {
 8024af2:	ebac 0e04 	sub.w	lr, ip, r4
 8024af6:	45ae      	cmp	lr, r5
 8024af8:	d211      	bcs.n	8024b1e <mg_mqtt_parse+0x64>
    lc = *((uint8_t *) p++);
 8024afa:	f81c 2b01 	ldrb.w	r2, [ip], #1
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 8024afe:	f002 0e7f 	and.w	lr, r2, #127	@ 0x7f
 8024b02:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
 8024b06:	fa0e fe08 	lsl.w	lr, lr, r8
 8024b0a:	4471      	add	r1, lr
    len_len++;
 8024b0c:	3301      	adds	r3, #1
    if (!(lc & 0x80)) break;
 8024b0e:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8024b12:	d004      	beq.n	8024b1e <mg_mqtt_parse+0x64>
    if (len_len >= 4) return MQTT_MALFORMED;
 8024b14:	2b03      	cmp	r3, #3
 8024b16:	d9ec      	bls.n	8024af2 <mg_mqtt_parse+0x38>
 8024b18:	2002      	movs	r0, #2
}
 8024b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  end = p + n;
 8024b1e:	eb0c 0801 	add.w	r8, ip, r1
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8024b22:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8024b26:	d161      	bne.n	8024bec <mg_mqtt_parse+0x132>
 8024b28:	4425      	add	r5, r4
 8024b2a:	4545      	cmp	r5, r8
 8024b2c:	d360      	bcc.n	8024bf0 <mg_mqtt_parse+0x136>
  m->dgram.len = (size_t) (end - buf);
 8024b2e:	eba8 0304 	sub.w	r3, r8, r4
 8024b32:	6173      	str	r3, [r6, #20]
  switch (m->cmd) {
 8024b34:	2803      	cmp	r0, #3
 8024b36:	d01c      	beq.n	8024b72 <mg_mqtt_parse+0xb8>
 8024b38:	d80a      	bhi.n	8024b50 <mg_mqtt_parse+0x96>
 8024b3a:	2802      	cmp	r0, #2
 8024b3c:	d106      	bne.n	8024b4c <mg_mqtt_parse+0x92>
      if (end - p < 2) return MQTT_MALFORMED;
 8024b3e:	2901      	cmp	r1, #1
 8024b40:	dd5a      	ble.n	8024bf8 <mg_mqtt_parse+0x13e>
      m->ack = p[1];
 8024b42:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024b46:	7733      	strb	r3, [r6, #28]
  return MQTT_OK;
 8024b48:	2000      	movs	r0, #0
      break;
 8024b4a:	e7e6      	b.n	8024b1a <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 8024b4c:	2000      	movs	r0, #0
 8024b4e:	e7e4      	b.n	8024b1a <mg_mqtt_parse+0x60>
 8024b50:	1f03      	subs	r3, r0, #4
 8024b52:	b2db      	uxtb	r3, r3
 8024b54:	2b07      	cmp	r3, #7
 8024b56:	d84d      	bhi.n	8024bf4 <mg_mqtt_parse+0x13a>
      if (p + 2 > end) return MQTT_MALFORMED;
 8024b58:	f10c 0302 	add.w	r3, ip, #2
 8024b5c:	4543      	cmp	r3, r8
 8024b5e:	d84d      	bhi.n	8024bfc <mg_mqtt_parse+0x142>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8024b60:	f89c 2000 	ldrb.w	r2, [ip]
 8024b64:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024b68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8024b6c:	8333      	strh	r3, [r6, #24]
  return MQTT_OK;
 8024b6e:	2000      	movs	r0, #0
      break;
 8024b70:	e7d3      	b.n	8024b1a <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8024b72:	f10c 0202 	add.w	r2, ip, #2
 8024b76:	4542      	cmp	r2, r8
 8024b78:	d842      	bhi.n	8024c00 <mg_mqtt_parse+0x146>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8024b7a:	f89c 1000 	ldrb.w	r1, [ip]
 8024b7e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024b82:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8024b86:	6073      	str	r3, [r6, #4]
      m->topic.buf = (char *) p + 2;
 8024b88:	6032      	str	r2, [r6, #0]
      p += 2 + m->topic.len;
 8024b8a:	3302      	adds	r3, #2
 8024b8c:	eb0c 0503 	add.w	r5, ip, r3
      if (p > end) return MQTT_MALFORMED;
 8024b90:	45a8      	cmp	r8, r5
 8024b92:	d337      	bcc.n	8024c04 <mg_mqtt_parse+0x14a>
      if (m->qos > 0) {
 8024b94:	f1b9 0f00 	cmp.w	r9, #0
 8024b98:	d008      	beq.n	8024bac <mg_mqtt_parse+0xf2>
        if (p + 2 > end) return MQTT_MALFORMED;
 8024b9a:	1caa      	adds	r2, r5, #2
 8024b9c:	4542      	cmp	r2, r8
 8024b9e:	d833      	bhi.n	8024c08 <mg_mqtt_parse+0x14e>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8024ba0:	7829      	ldrb	r1, [r5, #0]
 8024ba2:	786b      	ldrb	r3, [r5, #1]
 8024ba4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8024ba8:	8333      	strh	r3, [r6, #24]
        p += 2;
 8024baa:	4615      	mov	r5, r2
      if (p > end) return MQTT_MALFORMED;
 8024bac:	4545      	cmp	r5, r8
 8024bae:	d82d      	bhi.n	8024c0c <mg_mqtt_parse+0x152>
      if (version == 5 && p + 2 < end) {
 8024bb0:	2f05      	cmp	r7, #5
 8024bb2:	d007      	beq.n	8024bc4 <mg_mqtt_parse+0x10a>
      if (p > end) return MQTT_MALFORMED;
 8024bb4:	4545      	cmp	r5, r8
 8024bb6:	d82d      	bhi.n	8024c14 <mg_mqtt_parse+0x15a>
      m->data.buf = (char *) p;
 8024bb8:	60b5      	str	r5, [r6, #8]
      m->data.len = (size_t) (end - p);
 8024bba:	eba8 0505 	sub.w	r5, r8, r5
 8024bbe:	60f5      	str	r5, [r6, #12]
  return MQTT_OK;
 8024bc0:	2000      	movs	r0, #0
      break;
 8024bc2:	e7aa      	b.n	8024b1a <mg_mqtt_parse+0x60>
      if (version == 5 && p + 2 < end) {
 8024bc4:	1cab      	adds	r3, r5, #2
 8024bc6:	4543      	cmp	r3, r8
 8024bc8:	d2f4      	bcs.n	8024bb4 <mg_mqtt_parse+0xfa>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 8024bca:	f106 0224 	add.w	r2, r6, #36	@ 0x24
 8024bce:	eba8 0105 	sub.w	r1, r8, r5
 8024bd2:	4628      	mov	r0, r5
 8024bd4:	f7fd fd6c 	bl	80226b0 <decode_varint>
        if (!len_len) return MQTT_MALFORMED;
 8024bd8:	b1d0      	cbz	r0, 8024c10 <mg_mqtt_parse+0x156>
        m->props_start = (size_t) (p + len_len - buf);
 8024bda:	182b      	adds	r3, r5, r0
 8024bdc:	1b1b      	subs	r3, r3, r4
 8024bde:	6233      	str	r3, [r6, #32]
        p += len_len + m->props_size;
 8024be0:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8024be2:	4403      	add	r3, r0
 8024be4:	441d      	add	r5, r3
 8024be6:	e7e5      	b.n	8024bb4 <mg_mqtt_parse+0xfa>
  if (len < 2) return MQTT_INCOMPLETE;
 8024be8:	2001      	movs	r0, #1
 8024bea:	e796      	b.n	8024b1a <mg_mqtt_parse+0x60>
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8024bec:	2001      	movs	r0, #1
 8024bee:	e794      	b.n	8024b1a <mg_mqtt_parse+0x60>
 8024bf0:	2001      	movs	r0, #1
 8024bf2:	e792      	b.n	8024b1a <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 8024bf4:	2000      	movs	r0, #0
 8024bf6:	e790      	b.n	8024b1a <mg_mqtt_parse+0x60>
      if (end - p < 2) return MQTT_MALFORMED;
 8024bf8:	2002      	movs	r0, #2
 8024bfa:	e78e      	b.n	8024b1a <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8024bfc:	2002      	movs	r0, #2
 8024bfe:	e78c      	b.n	8024b1a <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8024c00:	2002      	movs	r0, #2
 8024c02:	e78a      	b.n	8024b1a <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8024c04:	2002      	movs	r0, #2
 8024c06:	e788      	b.n	8024b1a <mg_mqtt_parse+0x60>
        if (p + 2 > end) return MQTT_MALFORMED;
 8024c08:	2002      	movs	r0, #2
 8024c0a:	e786      	b.n	8024b1a <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8024c0c:	2002      	movs	r0, #2
 8024c0e:	e784      	b.n	8024b1a <mg_mqtt_parse+0x60>
        if (!len_len) return MQTT_MALFORMED;
 8024c10:	2002      	movs	r0, #2
 8024c12:	e782      	b.n	8024b1a <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8024c14:	2002      	movs	r0, #2
 8024c16:	e780      	b.n	8024b1a <mg_mqtt_parse+0x60>

08024c18 <mg_alloc_conn>:
struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 8024c18:	b510      	push	{r4, lr}
 8024c1a:	4604      	mov	r4, r0
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 8024c1c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8024c1e:	31b0      	adds	r1, #176	@ 0xb0
 8024c20:	2001      	movs	r0, #1
 8024c22:	f7ff f8f1 	bl	8023e08 <mg_calloc>
  if (c != NULL) {
 8024c26:	4603      	mov	r3, r0
 8024c28:	b148      	cbz	r0, 8024c3e <mg_alloc_conn+0x26>
    c->mgr = mgr;
 8024c2a:	6044      	str	r4, [r0, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 8024c2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8024c30:	6742      	str	r2, [r0, #116]	@ 0x74
 8024c32:	6442      	str	r2, [r0, #68]	@ 0x44
 8024c34:	6542      	str	r2, [r0, #84]	@ 0x54
    c->id = ++mgr->nextid;
 8024c36:	69e2      	ldr	r2, [r4, #28]
 8024c38:	3201      	adds	r2, #1
 8024c3a:	61e2      	str	r2, [r4, #28]
 8024c3c:	6342      	str	r2, [r0, #52]	@ 0x34
}
 8024c3e:	4618      	mov	r0, r3
 8024c40:	bd10      	pop	{r4, pc}
	...

08024c44 <mg_mgr_init>:
void mg_mgr_init(struct mg_mgr *mgr) {
 8024c44:	b510      	push	{r4, lr}
 8024c46:	4604      	mov	r4, r0
  memset(mgr, 0, sizeof(*mgr));
 8024c48:	2248      	movs	r2, #72	@ 0x48
 8024c4a:	2100      	movs	r1, #0
 8024c4c:	f007 fdd8 	bl	802c800 <memset>
  mgr->epoll_fd = -1;
 8024c50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8024c54:	63a3      	str	r3, [r4, #56]	@ 0x38
  mgr->pipe = MG_INVALID_SOCKET;
 8024c56:	6463      	str	r3, [r4, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 8024c58:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8024c5c:	6163      	str	r3, [r4, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 8024c5e:	4b02      	ldr	r3, [pc, #8]	@ (8024c68 <mg_mgr_init+0x24>)
 8024c60:	6063      	str	r3, [r4, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8024c62:	4b02      	ldr	r3, [pc, #8]	@ (8024c6c <mg_mgr_init+0x28>)
 8024c64:	60e3      	str	r3, [r4, #12]
}
 8024c66:	bd10      	pop	{r4, pc}
 8024c68:	0803b2ac 	.word	0x0803b2ac
 8024c6c:	0803b2c0 	.word	0x0803b2c0

08024c70 <mg_snprintf>:
size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8024c70:	b40c      	push	{r2, r3}
 8024c72:	b500      	push	{lr}
 8024c74:	b083      	sub	sp, #12
 8024c76:	ab04      	add	r3, sp, #16
 8024c78:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8024c7c:	9301      	str	r3, [sp, #4]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8024c7e:	ab01      	add	r3, sp, #4
 8024c80:	f000 fcf4 	bl	802566c <mg_vsnprintf>
}
 8024c84:	b003      	add	sp, #12
 8024c86:	f85d eb04 	ldr.w	lr, [sp], #4
 8024c8a:	b002      	add	sp, #8
 8024c8c:	4770      	bx	lr
	...

08024c90 <mg_dtoa>:
static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8024c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c94:	b093      	sub	sp, #76	@ 0x4c
 8024c96:	9005      	str	r0, [sp, #20]
 8024c98:	9106      	str	r1, [sp, #24]
 8024c9a:	ec51 0b10 	vmov	r0, r1, d0
 8024c9e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8024ca2:	4690      	mov	r8, r2
 8024ca4:	9307      	str	r3, [sp, #28]
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8024ca6:	2200      	movs	r2, #0
 8024ca8:	2300      	movs	r3, #0
 8024caa:	f7eb ff25 	bl	8010af8 <__aeabi_dcmpeq>
 8024cae:	b9c8      	cbnz	r0, 8024ce4 <mg_dtoa+0x54>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8024cb0:	ed9d 0b02 	vldr	d0, [sp, #8]
 8024cb4:	f7fc fa9e 	bl	80211f4 <xisinf>
 8024cb8:	b9d8      	cbnz	r0, 8024cf2 <mg_dtoa+0x62>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8024cba:	ed9d 0b02 	vldr	d0, [sp, #8]
 8024cbe:	f7fc faab 	bl	8021218 <xisnan>
 8024cc2:	4606      	mov	r6, r0
 8024cc4:	bb28      	cbnz	r0, 8024d12 <mg_dtoa+0x82>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8024cc6:	2200      	movs	r2, #0
 8024cc8:	2300      	movs	r3, #0
 8024cca:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8024cce:	4620      	mov	r0, r4
 8024cd0:	4629      	mov	r1, r5
 8024cd2:	f7eb ff1b 	bl	8010b0c <__aeabi_dcmplt>
 8024cd6:	bb18      	cbnz	r0, 8024d20 <mg_dtoa+0x90>
  int i, s = 0, n = 0, e = 0;
 8024cd8:	4637      	mov	r7, r6
  mul = 1.0;
 8024cda:	2400      	movs	r4, #0
 8024cdc:	4dba      	ldr	r5, [pc, #744]	@ (8024fc8 <mg_dtoa+0x338>)
 8024cde:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8024ce2:	e02f      	b.n	8024d44 <mg_dtoa+0xb4>
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8024ce4:	4bb9      	ldr	r3, [pc, #740]	@ (8024fcc <mg_dtoa+0x33c>)
 8024ce6:	4aba      	ldr	r2, [pc, #744]	@ (8024fd0 <mg_dtoa+0x340>)
 8024ce8:	9906      	ldr	r1, [sp, #24]
 8024cea:	9805      	ldr	r0, [sp, #20]
 8024cec:	f7ff ffc0 	bl	8024c70 <mg_snprintf>
 8024cf0:	e1d3      	b.n	802509a <mg_dtoa+0x40a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8024cf2:	2200      	movs	r2, #0
 8024cf4:	2300      	movs	r3, #0
 8024cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024cfa:	f7eb ff25 	bl	8010b48 <__aeabi_dcmpgt>
 8024cfe:	b130      	cbz	r0, 8024d0e <mg_dtoa+0x7e>
 8024d00:	4bb4      	ldr	r3, [pc, #720]	@ (8024fd4 <mg_dtoa+0x344>)
 8024d02:	4ab3      	ldr	r2, [pc, #716]	@ (8024fd0 <mg_dtoa+0x340>)
 8024d04:	9906      	ldr	r1, [sp, #24]
 8024d06:	9805      	ldr	r0, [sp, #20]
 8024d08:	f7ff ffb2 	bl	8024c70 <mg_snprintf>
 8024d0c:	e1c5      	b.n	802509a <mg_dtoa+0x40a>
 8024d0e:	4bb2      	ldr	r3, [pc, #712]	@ (8024fd8 <mg_dtoa+0x348>)
 8024d10:	e7f7      	b.n	8024d02 <mg_dtoa+0x72>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8024d12:	4bb2      	ldr	r3, [pc, #712]	@ (8024fdc <mg_dtoa+0x34c>)
 8024d14:	4aae      	ldr	r2, [pc, #696]	@ (8024fd0 <mg_dtoa+0x340>)
 8024d16:	9906      	ldr	r1, [sp, #24]
 8024d18:	9805      	ldr	r0, [sp, #20]
 8024d1a:	f7ff ffa9 	bl	8024c70 <mg_snprintf>
 8024d1e:	e1bc      	b.n	802509a <mg_dtoa+0x40a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8024d20:	4622      	mov	r2, r4
 8024d22:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8024d26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8024d2a:	232d      	movs	r3, #45	@ 0x2d
 8024d2c:	f88d 3020 	strb.w	r3, [sp, #32]
 8024d30:	2701      	movs	r7, #1
 8024d32:	e7d2      	b.n	8024cda <mg_dtoa+0x4a>
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8024d34:	2200      	movs	r2, #0
 8024d36:	4baa      	ldr	r3, [pc, #680]	@ (8024fe0 <mg_dtoa+0x350>)
 8024d38:	4620      	mov	r0, r4
 8024d3a:	4629      	mov	r1, r5
 8024d3c:	f7eb fc74 	bl	8010628 <__aeabi_dmul>
 8024d40:	4604      	mov	r4, r0
 8024d42:	460d      	mov	r5, r1
 8024d44:	2200      	movs	r2, #0
 8024d46:	4ba6      	ldr	r3, [pc, #664]	@ (8024fe0 <mg_dtoa+0x350>)
 8024d48:	4650      	mov	r0, sl
 8024d4a:	4659      	mov	r1, fp
 8024d4c:	f7eb fef2 	bl	8010b34 <__aeabi_dcmpge>
 8024d50:	b1b0      	cbz	r0, 8024d80 <mg_dtoa+0xf0>
 8024d52:	4622      	mov	r2, r4
 8024d54:	462b      	mov	r3, r5
 8024d56:	4650      	mov	r0, sl
 8024d58:	4659      	mov	r1, fp
 8024d5a:	f7eb fd8f 	bl	801087c <__aeabi_ddiv>
 8024d5e:	2200      	movs	r2, #0
 8024d60:	4b9f      	ldr	r3, [pc, #636]	@ (8024fe0 <mg_dtoa+0x350>)
 8024d62:	f7eb fee7 	bl	8010b34 <__aeabi_dcmpge>
 8024d66:	2800      	cmp	r0, #0
 8024d68:	d1e4      	bne.n	8024d34 <mg_dtoa+0xa4>
 8024d6a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8024d6e:	e007      	b.n	8024d80 <mg_dtoa+0xf0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8024d70:	2200      	movs	r2, #0
 8024d72:	4b9b      	ldr	r3, [pc, #620]	@ (8024fe0 <mg_dtoa+0x350>)
 8024d74:	4620      	mov	r0, r4
 8024d76:	4629      	mov	r1, r5
 8024d78:	f7eb fd80 	bl	801087c <__aeabi_ddiv>
 8024d7c:	4604      	mov	r4, r0
 8024d7e:	460d      	mov	r5, r1
 8024d80:	2200      	movs	r2, #0
 8024d82:	4b91      	ldr	r3, [pc, #580]	@ (8024fc8 <mg_dtoa+0x338>)
 8024d84:	4650      	mov	r0, sl
 8024d86:	4659      	mov	r1, fp
 8024d88:	f7eb feca 	bl	8010b20 <__aeabi_dcmple>
 8024d8c:	b158      	cbz	r0, 8024da6 <mg_dtoa+0x116>
 8024d8e:	4622      	mov	r2, r4
 8024d90:	462b      	mov	r3, r5
 8024d92:	4650      	mov	r0, sl
 8024d94:	4659      	mov	r1, fp
 8024d96:	f7eb fd71 	bl	801087c <__aeabi_ddiv>
 8024d9a:	2200      	movs	r2, #0
 8024d9c:	4b8a      	ldr	r3, [pc, #552]	@ (8024fc8 <mg_dtoa+0x338>)
 8024d9e:	f7eb febf 	bl	8010b20 <__aeabi_dcmple>
 8024da2:	2800      	cmp	r0, #0
 8024da4:	d1e4      	bne.n	8024d70 <mg_dtoa+0xe0>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8024da6:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8024daa:	2200      	movs	r2, #0
 8024dac:	4b8d      	ldr	r3, [pc, #564]	@ (8024fe4 <mg_dtoa+0x354>)
 8024dae:	4620      	mov	r0, r4
 8024db0:	4629      	mov	r1, r5
 8024db2:	f7eb fc39 	bl	8010628 <__aeabi_dmul>
 8024db6:	4634      	mov	r4, r6
 8024db8:	e004      	b.n	8024dc4 <mg_dtoa+0x134>
 8024dba:	2200      	movs	r2, #0
 8024dbc:	4b88      	ldr	r3, [pc, #544]	@ (8024fe0 <mg_dtoa+0x350>)
 8024dbe:	f7eb fd5d 	bl	801087c <__aeabi_ddiv>
 8024dc2:	3401      	adds	r4, #1
 8024dc4:	4544      	cmp	r4, r8
 8024dc6:	dbf8      	blt.n	8024dba <mg_dtoa+0x12a>
  d += t;
 8024dc8:	4602      	mov	r2, r0
 8024dca:	460b      	mov	r3, r1
 8024dcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024dd0:	f7eb fa74 	bl	80102bc <__adddf3>
 8024dd4:	4682      	mov	sl, r0
 8024dd6:	468b      	mov	fp, r1
  int i, s = 0, n = 0, e = 0;
 8024dd8:	46b1      	mov	r9, r6
  mul = 1.0;
 8024dda:	2400      	movs	r4, #0
 8024ddc:	4d7a      	ldr	r5, [pc, #488]	@ (8024fc8 <mg_dtoa+0x338>)
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8024dde:	e009      	b.n	8024df4 <mg_dtoa+0x164>
 8024de0:	2200      	movs	r2, #0
 8024de2:	4b7f      	ldr	r3, [pc, #508]	@ (8024fe0 <mg_dtoa+0x350>)
 8024de4:	4620      	mov	r0, r4
 8024de6:	4629      	mov	r1, r5
 8024de8:	f7eb fc1e 	bl	8010628 <__aeabi_dmul>
 8024dec:	4604      	mov	r4, r0
 8024dee:	460d      	mov	r5, r1
 8024df0:	f109 0901 	add.w	r9, r9, #1
 8024df4:	2200      	movs	r2, #0
 8024df6:	4b7a      	ldr	r3, [pc, #488]	@ (8024fe0 <mg_dtoa+0x350>)
 8024df8:	4650      	mov	r0, sl
 8024dfa:	4659      	mov	r1, fp
 8024dfc:	f7eb fe9a 	bl	8010b34 <__aeabi_dcmpge>
 8024e00:	b1b0      	cbz	r0, 8024e30 <mg_dtoa+0x1a0>
 8024e02:	4622      	mov	r2, r4
 8024e04:	462b      	mov	r3, r5
 8024e06:	4650      	mov	r0, sl
 8024e08:	4659      	mov	r1, fp
 8024e0a:	f7eb fd37 	bl	801087c <__aeabi_ddiv>
 8024e0e:	2200      	movs	r2, #0
 8024e10:	4b73      	ldr	r3, [pc, #460]	@ (8024fe0 <mg_dtoa+0x350>)
 8024e12:	f7eb fe8f 	bl	8010b34 <__aeabi_dcmpge>
 8024e16:	2800      	cmp	r0, #0
 8024e18:	d1e2      	bne.n	8024de0 <mg_dtoa+0x150>
 8024e1a:	e009      	b.n	8024e30 <mg_dtoa+0x1a0>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8024e1c:	2200      	movs	r2, #0
 8024e1e:	4b70      	ldr	r3, [pc, #448]	@ (8024fe0 <mg_dtoa+0x350>)
 8024e20:	4620      	mov	r0, r4
 8024e22:	4629      	mov	r1, r5
 8024e24:	f7eb fd2a 	bl	801087c <__aeabi_ddiv>
 8024e28:	4604      	mov	r4, r0
 8024e2a:	460d      	mov	r5, r1
 8024e2c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8024e30:	2200      	movs	r2, #0
 8024e32:	4b65      	ldr	r3, [pc, #404]	@ (8024fc8 <mg_dtoa+0x338>)
 8024e34:	4650      	mov	r0, sl
 8024e36:	4659      	mov	r1, fp
 8024e38:	f7eb fe68 	bl	8010b0c <__aeabi_dcmplt>
 8024e3c:	b158      	cbz	r0, 8024e56 <mg_dtoa+0x1c6>
 8024e3e:	4622      	mov	r2, r4
 8024e40:	462b      	mov	r3, r5
 8024e42:	4650      	mov	r0, sl
 8024e44:	4659      	mov	r1, fp
 8024e46:	f7eb fd19 	bl	801087c <__aeabi_ddiv>
 8024e4a:	2200      	movs	r2, #0
 8024e4c:	4b5e      	ldr	r3, [pc, #376]	@ (8024fc8 <mg_dtoa+0x338>)
 8024e4e:	f7eb fe5d 	bl	8010b0c <__aeabi_dcmplt>
 8024e52:	2800      	cmp	r0, #0
 8024e54:	d1e2      	bne.n	8024e1c <mg_dtoa+0x18c>
  if (e >= width && width > 1) {
 8024e56:	45c1      	cmp	r9, r8
 8024e58:	db02      	blt.n	8024e60 <mg_dtoa+0x1d0>
 8024e5a:	f1b8 0f01 	cmp.w	r8, #1
 8024e5e:	dc25      	bgt.n	8024eac <mg_dtoa+0x21c>
  } else if (e <= -width && width > 1) {
 8024e60:	f1c8 0300 	rsb	r3, r8, #0
 8024e64:	454b      	cmp	r3, r9
 8024e66:	db5e      	blt.n	8024f26 <mg_dtoa+0x296>
 8024e68:	f1b8 0f01 	cmp.w	r8, #1
 8024e6c:	dd5b      	ble.n	8024f26 <mg_dtoa+0x296>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8024e6e:	4622      	mov	r2, r4
 8024e70:	462b      	mov	r3, r5
 8024e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024e76:	f7eb fd01 	bl	801087c <__aeabi_ddiv>
 8024e7a:	ad08      	add	r5, sp, #32
 8024e7c:	9b07      	ldr	r3, [sp, #28]
 8024e7e:	4642      	mov	r2, r8
 8024e80:	ec41 0b10 	vmov	d0, r0, r1
 8024e84:	2128      	movs	r1, #40	@ 0x28
 8024e86:	4628      	mov	r0, r5
 8024e88:	f7ff ff02 	bl	8024c90 <mg_dtoa>
 8024e8c:	4604      	mov	r4, r0
    n += addexp(buf + s + n, -e, '-');
 8024e8e:	1838      	adds	r0, r7, r0
 8024e90:	222d      	movs	r2, #45	@ 0x2d
 8024e92:	f1c9 0100 	rsb	r1, r9, #0
 8024e96:	4428      	add	r0, r5
 8024e98:	f7fc f972 	bl	8021180 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8024e9c:	9500      	str	r5, [sp, #0]
 8024e9e:	1823      	adds	r3, r4, r0
 8024ea0:	4a51      	ldr	r2, [pc, #324]	@ (8024fe8 <mg_dtoa+0x358>)
 8024ea2:	9906      	ldr	r1, [sp, #24]
 8024ea4:	9805      	ldr	r0, [sp, #20]
 8024ea6:	f7ff fee3 	bl	8024c70 <mg_snprintf>
 8024eaa:	e0f6      	b.n	802509a <mg_dtoa+0x40a>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8024eac:	4622      	mov	r2, r4
 8024eae:	462b      	mov	r3, r5
 8024eb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024eb4:	f7eb fce2 	bl	801087c <__aeabi_ddiv>
 8024eb8:	ad08      	add	r5, sp, #32
 8024eba:	9b07      	ldr	r3, [sp, #28]
 8024ebc:	4642      	mov	r2, r8
 8024ebe:	ec41 0b10 	vmov	d0, r0, r1
 8024ec2:	2128      	movs	r1, #40	@ 0x28
 8024ec4:	4628      	mov	r0, r5
 8024ec6:	f7ff fee3 	bl	8024c90 <mg_dtoa>
 8024eca:	4604      	mov	r4, r0
    n += addexp(buf + s + n, e, '+');
 8024ecc:	1838      	adds	r0, r7, r0
 8024ece:	222b      	movs	r2, #43	@ 0x2b
 8024ed0:	4649      	mov	r1, r9
 8024ed2:	4428      	add	r0, r5
 8024ed4:	f7fc f954 	bl	8021180 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8024ed8:	9500      	str	r5, [sp, #0]
 8024eda:	1823      	adds	r3, r4, r0
 8024edc:	4a42      	ldr	r2, [pc, #264]	@ (8024fe8 <mg_dtoa+0x358>)
 8024ede:	9906      	ldr	r1, [sp, #24]
 8024ee0:	9805      	ldr	r0, [sp, #20]
 8024ee2:	f7ff fec5 	bl	8024c70 <mg_snprintf>
 8024ee6:	e0d8      	b.n	802509a <mg_dtoa+0x40a>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8024ee8:	3601      	adds	r6, #1
 8024eea:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8024eee:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8024ef2:	eb0d 0902 	add.w	r9, sp, r2
 8024ef6:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 8024efa:	f7eb fb2b 	bl	8010554 <__aeabi_i2d>
 8024efe:	4622      	mov	r2, r4
 8024f00:	462b      	mov	r3, r5
 8024f02:	f7eb fb91 	bl	8010628 <__aeabi_dmul>
 8024f06:	4602      	mov	r2, r0
 8024f08:	460b      	mov	r3, r1
 8024f0a:	4650      	mov	r0, sl
 8024f0c:	4659      	mov	r1, fp
 8024f0e:	f7eb f9d3 	bl	80102b8 <__aeabi_dsub>
 8024f12:	4682      	mov	sl, r0
 8024f14:	468b      	mov	fp, r1
      t /= 10.0;
 8024f16:	2200      	movs	r2, #0
 8024f18:	4b31      	ldr	r3, [pc, #196]	@ (8024fe0 <mg_dtoa+0x350>)
 8024f1a:	4620      	mov	r0, r4
 8024f1c:	4629      	mov	r1, r5
 8024f1e:	f7eb fcad 	bl	801087c <__aeabi_ddiv>
 8024f22:	4604      	mov	r4, r0
 8024f24:	460d      	mov	r5, r1
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8024f26:	2200      	movs	r2, #0
 8024f28:	4b27      	ldr	r3, [pc, #156]	@ (8024fc8 <mg_dtoa+0x338>)
 8024f2a:	4620      	mov	r0, r4
 8024f2c:	4629      	mov	r1, r5
 8024f2e:	f7eb fe01 	bl	8010b34 <__aeabi_dcmpge>
 8024f32:	b188      	cbz	r0, 8024f58 <mg_dtoa+0x2c8>
 8024f34:	eb07 0906 	add.w	r9, r7, r6
 8024f38:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 8024f3c:	dc0c      	bgt.n	8024f58 <mg_dtoa+0x2c8>
      int ch = (int) (d / t);
 8024f3e:	4622      	mov	r2, r4
 8024f40:	462b      	mov	r3, r5
 8024f42:	4650      	mov	r0, sl
 8024f44:	4659      	mov	r1, fp
 8024f46:	f7eb fc99 	bl	801087c <__aeabi_ddiv>
 8024f4a:	f7eb fe1d 	bl	8010b88 <__aeabi_d2iz>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8024f4e:	2e00      	cmp	r6, #0
 8024f50:	dcca      	bgt.n	8024ee8 <mg_dtoa+0x258>
 8024f52:	2800      	cmp	r0, #0
 8024f54:	dcc8      	bgt.n	8024ee8 <mg_dtoa+0x258>
 8024f56:	e7d0      	b.n	8024efa <mg_dtoa+0x26a>
    if (n == 0) buf[s++] = '0';
 8024f58:	b9ce      	cbnz	r6, 8024f8e <mg_dtoa+0x2fe>
 8024f5a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8024f5e:	446b      	add	r3, sp
 8024f60:	2230      	movs	r2, #48	@ 0x30
 8024f62:	f803 2c28 	strb.w	r2, [r3, #-40]
 8024f66:	3701      	adds	r7, #1
 8024f68:	e011      	b.n	8024f8e <mg_dtoa+0x2fe>
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8024f6a:	f106 0901 	add.w	r9, r6, #1
 8024f6e:	f106 0348 	add.w	r3, r6, #72	@ 0x48
 8024f72:	eb0d 0603 	add.w	r6, sp, r3
 8024f76:	2330      	movs	r3, #48	@ 0x30
 8024f78:	f806 3c28 	strb.w	r3, [r6, #-40]
 8024f7c:	2200      	movs	r2, #0
 8024f7e:	4b18      	ldr	r3, [pc, #96]	@ (8024fe0 <mg_dtoa+0x350>)
 8024f80:	4620      	mov	r0, r4
 8024f82:	4629      	mov	r1, r5
 8024f84:	f7eb fc7a 	bl	801087c <__aeabi_ddiv>
 8024f88:	4604      	mov	r4, r0
 8024f8a:	460d      	mov	r5, r1
 8024f8c:	464e      	mov	r6, r9
 8024f8e:	2200      	movs	r2, #0
 8024f90:	4b0d      	ldr	r3, [pc, #52]	@ (8024fc8 <mg_dtoa+0x338>)
 8024f92:	4620      	mov	r0, r4
 8024f94:	4629      	mov	r1, r5
 8024f96:	f7eb fdcd 	bl	8010b34 <__aeabi_dcmpge>
 8024f9a:	b110      	cbz	r0, 8024fa2 <mg_dtoa+0x312>
 8024f9c:	19f3      	adds	r3, r6, r7
 8024f9e:	2b27      	cmp	r3, #39	@ 0x27
 8024fa0:	dde3      	ble.n	8024f6a <mg_dtoa+0x2da>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8024fa2:	19f3      	adds	r3, r6, r7
 8024fa4:	2b27      	cmp	r3, #39	@ 0x27
 8024fa6:	dc05      	bgt.n	8024fb4 <mg_dtoa+0x324>
 8024fa8:	3701      	adds	r7, #1
 8024faa:	3348      	adds	r3, #72	@ 0x48
 8024fac:	446b      	add	r3, sp
 8024fae:	222e      	movs	r2, #46	@ 0x2e
 8024fb0:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8024fb4:	a502      	add	r5, pc, #8	@ (adr r5, 8024fc0 <mg_dtoa+0x330>)
 8024fb6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8024fba:	e03e      	b.n	802503a <mg_dtoa+0x3aa>
 8024fbc:	f3af 8000 	nop.w
 8024fc0:	9999999a 	.word	0x9999999a
 8024fc4:	3fb99999 	.word	0x3fb99999
 8024fc8:	3ff00000 	.word	0x3ff00000
 8024fcc:	0803a788 	.word	0x0803a788
 8024fd0:	0803beb8 	.word	0x0803beb8
 8024fd4:	0803b2e0 	.word	0x0803b2e0
 8024fd8:	0803b2e4 	.word	0x0803b2e4
 8024fdc:	0803b2ec 	.word	0x0803b2ec
 8024fe0:	40240000 	.word	0x40240000
 8024fe4:	40140000 	.word	0x40140000
 8024fe8:	0803b2f0 	.word	0x0803b2f0
      int ch = (int) (d / t);
 8024fec:	4622      	mov	r2, r4
 8024fee:	462b      	mov	r3, r5
 8024ff0:	4650      	mov	r0, sl
 8024ff2:	4659      	mov	r1, fp
 8024ff4:	f7eb fc42 	bl	801087c <__aeabi_ddiv>
 8024ff8:	f7eb fdc6 	bl	8010b88 <__aeabi_d2iz>
      buf[s + n++] = (char) (ch + '0');
 8024ffc:	3601      	adds	r6, #1
 8024ffe:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8025002:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8025006:	eb0d 0902 	add.w	r9, sp, r2
 802500a:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 802500e:	f7eb faa1 	bl	8010554 <__aeabi_i2d>
 8025012:	4622      	mov	r2, r4
 8025014:	462b      	mov	r3, r5
 8025016:	f7eb fb07 	bl	8010628 <__aeabi_dmul>
 802501a:	4602      	mov	r2, r0
 802501c:	460b      	mov	r3, r1
 802501e:	4650      	mov	r0, sl
 8025020:	4659      	mov	r1, fp
 8025022:	f7eb f949 	bl	80102b8 <__aeabi_dsub>
 8025026:	4682      	mov	sl, r0
 8025028:	468b      	mov	fp, r1
      t /= 10.0;
 802502a:	2200      	movs	r2, #0
 802502c:	4b1d      	ldr	r3, [pc, #116]	@ (80250a4 <mg_dtoa+0x414>)
 802502e:	4620      	mov	r0, r4
 8025030:	4629      	mov	r1, r5
 8025032:	f7eb fc23 	bl	801087c <__aeabi_ddiv>
 8025036:	4604      	mov	r4, r0
 8025038:	460d      	mov	r5, r1
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 802503a:	eb07 0906 	add.w	r9, r7, r6
 802503e:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 8025042:	dc03      	bgt.n	802504c <mg_dtoa+0x3bc>
 8025044:	4546      	cmp	r6, r8
 8025046:	dbd1      	blt.n	8024fec <mg_dtoa+0x35c>
 8025048:	9a07      	ldr	r2, [sp, #28]
 802504a:	e000      	b.n	802504e <mg_dtoa+0x3be>
 802504c:	9a07      	ldr	r2, [sp, #28]
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 802504e:	b152      	cbz	r2, 8025066 <mg_dtoa+0x3d6>
 8025050:	2e00      	cmp	r6, #0
 8025052:	dd08      	ble.n	8025066 <mg_dtoa+0x3d6>
 8025054:	19bb      	adds	r3, r7, r6
 8025056:	3347      	adds	r3, #71	@ 0x47
 8025058:	446b      	add	r3, sp
 802505a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 802505e:	2b30      	cmp	r3, #48	@ 0x30
 8025060:	d101      	bne.n	8025066 <mg_dtoa+0x3d6>
 8025062:	3e01      	subs	r6, #1
 8025064:	e7f3      	b.n	802504e <mg_dtoa+0x3be>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8025066:	2e00      	cmp	r6, #0
 8025068:	dd06      	ble.n	8025078 <mg_dtoa+0x3e8>
 802506a:	19bb      	adds	r3, r7, r6
 802506c:	3347      	adds	r3, #71	@ 0x47
 802506e:	446b      	add	r3, sp
 8025070:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8025074:	2b2e      	cmp	r3, #46	@ 0x2e
 8025076:	d013      	beq.n	80250a0 <mg_dtoa+0x410>
  n += s;
 8025078:	4437      	add	r7, r6
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 802507a:	2f27      	cmp	r7, #39	@ 0x27
 802507c:	dd00      	ble.n	8025080 <mg_dtoa+0x3f0>
 802507e:	2727      	movs	r7, #39	@ 0x27
  buf[n] = '\0';
 8025080:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8025084:	eb0d 0703 	add.w	r7, sp, r3
 8025088:	2300      	movs	r3, #0
 802508a:	f807 3c28 	strb.w	r3, [r7, #-40]
  return mg_snprintf(dst, dstlen, "%s", buf);
 802508e:	ab08      	add	r3, sp, #32
 8025090:	4a05      	ldr	r2, [pc, #20]	@ (80250a8 <mg_dtoa+0x418>)
 8025092:	9906      	ldr	r1, [sp, #24]
 8025094:	9805      	ldr	r0, [sp, #20]
 8025096:	f7ff fdeb 	bl	8024c70 <mg_snprintf>
}
 802509a:	b013      	add	sp, #76	@ 0x4c
 802509c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 80250a0:	3e01      	subs	r6, #1
 80250a2:	e7e9      	b.n	8025078 <mg_dtoa+0x3e8>
 80250a4:	40240000 	.word	0x40240000
 80250a8:	0803beb8 	.word	0x0803beb8

080250ac <mg_vxprintf>:
                   va_list *ap) {
 80250ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250b0:	b093      	sub	sp, #76	@ 0x4c
 80250b2:	4680      	mov	r8, r0
 80250b4:	468a      	mov	sl, r1
 80250b6:	4693      	mov	fp, r2
 80250b8:	9304      	str	r3, [sp, #16]
  size_t i = 0, n = 0;
 80250ba:	2700      	movs	r7, #0
 80250bc:	463c      	mov	r4, r7
  while (fmt[i] != '\0') {
 80250be:	e23e      	b.n	802553e <mg_vxprintf+0x492>
      char pad = ' ', minus = 0, c = fmt[++i];
 80250c0:	2320      	movs	r3, #32
 80250c2:	f88d 301f 	strb.w	r3, [sp, #31]
 80250c6:	1c66      	adds	r6, r4, #1
 80250c8:	f81b 5006 	ldrb.w	r5, [fp, r6]
      if (c == '#') x++, c = fmt[++i];
 80250cc:	2d23      	cmp	r5, #35	@ 0x23
 80250ce:	d00c      	beq.n	80250ea <mg_vxprintf+0x3e>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 80250d0:	2300      	movs	r3, #0
 80250d2:	9302      	str	r3, [sp, #8]
      if (c == '-') minus++, c = fmt[++i];
 80250d4:	2d2d      	cmp	r5, #45	@ 0x2d
 80250d6:	d10e      	bne.n	80250f6 <mg_vxprintf+0x4a>
 80250d8:	3601      	adds	r6, #1
 80250da:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80250de:	2301      	movs	r3, #1
 80250e0:	9303      	str	r3, [sp, #12]
      if (c == '0') pad = '0', c = fmt[++i];
 80250e2:	2d30      	cmp	r5, #48	@ 0x30
 80250e4:	d00a      	beq.n	80250fc <mg_vxprintf+0x50>
      if (c == '-') minus++, c = fmt[++i];
 80250e6:	2400      	movs	r4, #0
 80250e8:	e017      	b.n	802511a <mg_vxprintf+0x6e>
      if (c == '#') x++, c = fmt[++i];
 80250ea:	1ca6      	adds	r6, r4, #2
 80250ec:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80250f0:	2301      	movs	r3, #1
 80250f2:	9302      	str	r3, [sp, #8]
 80250f4:	e7ee      	b.n	80250d4 <mg_vxprintf+0x28>
      char pad = ' ', minus = 0, c = fmt[++i];
 80250f6:	2300      	movs	r3, #0
 80250f8:	9303      	str	r3, [sp, #12]
 80250fa:	e7f2      	b.n	80250e2 <mg_vxprintf+0x36>
      if (c == '0') pad = '0', c = fmt[++i];
 80250fc:	2330      	movs	r3, #48	@ 0x30
 80250fe:	f88d 301f 	strb.w	r3, [sp, #31]
 8025102:	3601      	adds	r6, #1
 8025104:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8025108:	e7ed      	b.n	80250e6 <mg_vxprintf+0x3a>
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 802510a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 802510e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8025112:	3c30      	subs	r4, #48	@ 0x30
 8025114:	3601      	adds	r6, #1
 8025116:	f81b 5006 	ldrb.w	r5, [fp, r6]
 802511a:	4628      	mov	r0, r5
 802511c:	f7fc f829 	bl	8021172 <is_digit>
 8025120:	2800      	cmp	r0, #0
 8025122:	d1f2      	bne.n	802510a <mg_vxprintf+0x5e>
      if (c == '.') {
 8025124:	2d2e      	cmp	r5, #46	@ 0x2e
 8025126:	d002      	beq.n	802512e <mg_vxprintf+0x82>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8025128:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802512c:	e024      	b.n	8025178 <mg_vxprintf+0xcc>
        c = fmt[++i];
 802512e:	1c73      	adds	r3, r6, #1
 8025130:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == '*') {
 8025134:	2d2a      	cmp	r5, #42	@ 0x2a
 8025136:	d118      	bne.n	802516a <mg_vxprintf+0xbe>
          pr = (size_t) va_arg(*ap, int);
 8025138:	9904      	ldr	r1, [sp, #16]
 802513a:	680b      	ldr	r3, [r1, #0]
 802513c:	1d1a      	adds	r2, r3, #4
 802513e:	600a      	str	r2, [r1, #0]
 8025140:	f8d3 9000 	ldr.w	r9, [r3]
          c = fmt[++i];
 8025144:	3602      	adds	r6, #2
 8025146:	f81b 5006 	ldrb.w	r5, [fp, r6]
 802514a:	e015      	b.n	8025178 <mg_vxprintf+0xcc>
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 802514c:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8025150:	eb05 0949 	add.w	r9, r5, r9, lsl #1
 8025154:	f1a9 0930 	sub.w	r9, r9, #48	@ 0x30
 8025158:	3601      	adds	r6, #1
 802515a:	f81b 5006 	ldrb.w	r5, [fp, r6]
 802515e:	4628      	mov	r0, r5
 8025160:	f7fc f807 	bl	8021172 <is_digit>
 8025164:	2800      	cmp	r0, #0
 8025166:	d1f1      	bne.n	802514c <mg_vxprintf+0xa0>
 8025168:	e006      	b.n	8025178 <mg_vxprintf+0xcc>
          pr = 0;
 802516a:	f04f 0900 	mov.w	r9, #0
 802516e:	461e      	mov	r6, r3
 8025170:	e7f5      	b.n	802515e <mg_vxprintf+0xb2>
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8025172:	3601      	adds	r6, #1
 8025174:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8025178:	2d68      	cmp	r5, #104	@ 0x68
 802517a:	d0fa      	beq.n	8025172 <mg_vxprintf+0xc6>
      if (c == 'l') {
 802517c:	2d6c      	cmp	r5, #108	@ 0x6c
 802517e:	d060      	beq.n	8025242 <mg_vxprintf+0x196>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8025180:	2200      	movs	r2, #0
      if (c == 'p') x = 1, is_long = 1;
 8025182:	2d70      	cmp	r5, #112	@ 0x70
 8025184:	d06a      	beq.n	802525c <mg_vxprintf+0x1b0>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8025186:	2d64      	cmp	r5, #100	@ 0x64
 8025188:	f000 808a 	beq.w	80252a0 <mg_vxprintf+0x1f4>
 802518c:	f1a5 0325 	sub.w	r3, r5, #37	@ 0x25
 8025190:	2b53      	cmp	r3, #83	@ 0x53
 8025192:	f200 81ca 	bhi.w	802552a <mg_vxprintf+0x47e>
 8025196:	e8df f013 	tbh	[pc, r3, lsl #1]
 802519a:	01c3      	.short	0x01c3
 802519c:	01c801c8 	.word	0x01c801c8
 80251a0:	01c801c8 	.word	0x01c801c8
 80251a4:	01c801c8 	.word	0x01c801c8
 80251a8:	01c801c8 	.word	0x01c801c8
 80251ac:	01c801c8 	.word	0x01c801c8
 80251b0:	01c801c8 	.word	0x01c801c8
 80251b4:	01c801c8 	.word	0x01c801c8
 80251b8:	01c801c8 	.word	0x01c801c8
 80251bc:	01c801c8 	.word	0x01c801c8
 80251c0:	01c801c8 	.word	0x01c801c8
 80251c4:	01c801c8 	.word	0x01c801c8
 80251c8:	01c801c8 	.word	0x01c801c8
 80251cc:	01c801c8 	.word	0x01c801c8
 80251d0:	01c801c8 	.word	0x01c801c8
 80251d4:	01c801c8 	.word	0x01c801c8
 80251d8:	01c801c8 	.word	0x01c801c8
 80251dc:	01c801c8 	.word	0x01c801c8
 80251e0:	01c801c8 	.word	0x01c801c8
 80251e4:	01c801c8 	.word	0x01c801c8
 80251e8:	015c01c8 	.word	0x015c01c8
 80251ec:	01c801c8 	.word	0x01c801c8
 80251f0:	01c801c8 	.word	0x01c801c8
 80251f4:	01c801c8 	.word	0x01c801c8
 80251f8:	01c801c8 	.word	0x01c801c8
 80251fc:	01c801c8 	.word	0x01c801c8
 8025200:	01c80073 	.word	0x01c80073
 8025204:	01c801c8 	.word	0x01c801c8
 8025208:	01c801c8 	.word	0x01c801c8
 802520c:	01c801c8 	.word	0x01c801c8
 8025210:	01c801c8 	.word	0x01c801c8
 8025214:	017601c8 	.word	0x017601c8
 8025218:	01c801c8 	.word	0x01c801c8
 802521c:	00690064 	.word	0x00690064
 8025220:	01c801c8 	.word	0x01c801c8
 8025224:	01c801c8 	.word	0x01c801c8
 8025228:	016d01c8 	.word	0x016d01c8
 802522c:	01c801c8 	.word	0x01c801c8
 8025230:	01c8006e 	.word	0x01c8006e
 8025234:	017f01c8 	.word	0x017f01c8
 8025238:	007e01c8 	.word	0x007e01c8
 802523c:	01c801c8 	.word	0x01c801c8
 8025240:	0078      	.short	0x0078
        is_long++, c = fmt[++i];
 8025242:	1c73      	adds	r3, r6, #1
 8025244:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == 'l') is_long++, c = fmt[++i];
 8025248:	2d6c      	cmp	r5, #108	@ 0x6c
 802524a:	d002      	beq.n	8025252 <mg_vxprintf+0x1a6>
        is_long++, c = fmt[++i];
 802524c:	461e      	mov	r6, r3
 802524e:	2201      	movs	r2, #1
 8025250:	e797      	b.n	8025182 <mg_vxprintf+0xd6>
        if (c == 'l') is_long++, c = fmt[++i];
 8025252:	3602      	adds	r6, #2
 8025254:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8025258:	2202      	movs	r2, #2
 802525a:	e792      	b.n	8025182 <mg_vxprintf+0xd6>
      if (c == 'p') x = 1, is_long = 1;
 802525c:	2201      	movs	r2, #1
 802525e:	9202      	str	r2, [sp, #8]
 8025260:	e794      	b.n	802518c <mg_vxprintf+0xe0>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8025262:	2d64      	cmp	r5, #100	@ 0x64
 8025264:	bf14      	ite	ne
 8025266:	2000      	movne	r0, #0
 8025268:	2001      	moveq	r0, #1
 802526a:	e01a      	b.n	80252a2 <mg_vxprintf+0x1f6>
 802526c:	2d64      	cmp	r5, #100	@ 0x64
 802526e:	bf14      	ite	ne
 8025270:	2000      	movne	r0, #0
 8025272:	2001      	moveq	r0, #1
 8025274:	e015      	b.n	80252a2 <mg_vxprintf+0x1f6>
 8025276:	2d64      	cmp	r5, #100	@ 0x64
 8025278:	bf14      	ite	ne
 802527a:	2000      	movne	r0, #0
 802527c:	2001      	moveq	r0, #1
 802527e:	e010      	b.n	80252a2 <mg_vxprintf+0x1f6>
 8025280:	2d64      	cmp	r5, #100	@ 0x64
 8025282:	bf14      	ite	ne
 8025284:	2000      	movne	r0, #0
 8025286:	2001      	moveq	r0, #1
 8025288:	e00b      	b.n	80252a2 <mg_vxprintf+0x1f6>
 802528a:	2d64      	cmp	r5, #100	@ 0x64
 802528c:	bf14      	ite	ne
 802528e:	2000      	movne	r0, #0
 8025290:	2001      	moveq	r0, #1
 8025292:	2301      	movs	r3, #1
 8025294:	e00a      	b.n	80252ac <mg_vxprintf+0x200>
 8025296:	2d64      	cmp	r5, #100	@ 0x64
 8025298:	bf14      	ite	ne
 802529a:	2000      	movne	r0, #0
 802529c:	2001      	moveq	r0, #1
 802529e:	e000      	b.n	80252a2 <mg_vxprintf+0x1f6>
 80252a0:	2001      	movs	r0, #1
 80252a2:	2d58      	cmp	r5, #88	@ 0x58
 80252a4:	d025      	beq.n	80252f2 <mg_vxprintf+0x246>
 80252a6:	2d70      	cmp	r5, #112	@ 0x70
 80252a8:	d021      	beq.n	80252ee <mg_vxprintf+0x242>
 80252aa:	2300      	movs	r3, #0
 80252ac:	4619      	mov	r1, r3
        size_t xl = x ? 2 : 0;
 80252ae:	9b02      	ldr	r3, [sp, #8]
 80252b0:	b10b      	cbz	r3, 80252b6 <mg_vxprintf+0x20a>
 80252b2:	2302      	movs	r3, #2
 80252b4:	9302      	str	r3, [sp, #8]
        if (c == 'g' || c == 'f') {
 80252b6:	f1a5 0366 	sub.w	r3, r5, #102	@ 0x66
 80252ba:	b2db      	uxtb	r3, r3
 80252bc:	2b01      	cmp	r3, #1
 80252be:	d91a      	bls.n	80252f6 <mg_vxprintf+0x24a>
        } else if (is_long == 2) {
 80252c0:	2a02      	cmp	r2, #2
 80252c2:	d03a      	beq.n	802533a <mg_vxprintf+0x28e>
        } else if (is_long == 1) {
 80252c4:	2a01      	cmp	r2, #1
 80252c6:	d049      	beq.n	802535c <mg_vxprintf+0x2b0>
          int v = va_arg(*ap, int);
 80252c8:	9b04      	ldr	r3, [sp, #16]
 80252ca:	f8d3 c000 	ldr.w	ip, [r3]
 80252ce:	f10c 0204 	add.w	r2, ip, #4
 80252d2:	601a      	str	r2, [r3, #0]
 80252d4:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 80252d8:	2d64      	cmp	r5, #100	@ 0x64
 80252da:	d055      	beq.n	8025388 <mg_vxprintf+0x2dc>
 80252dc:	461a      	mov	r2, r3
 80252de:	2300      	movs	r3, #0
 80252e0:	9101      	str	r1, [sp, #4]
 80252e2:	9000      	str	r0, [sp, #0]
 80252e4:	a808      	add	r0, sp, #32
 80252e6:	f7fb ffa7 	bl	8021238 <mg_lld>
 80252ea:	4605      	mov	r5, r0
 80252ec:	e01a      	b.n	8025324 <mg_vxprintf+0x278>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 80252ee:	2301      	movs	r3, #1
 80252f0:	e7dc      	b.n	80252ac <mg_vxprintf+0x200>
 80252f2:	2301      	movs	r3, #1
 80252f4:	e7da      	b.n	80252ac <mg_vxprintf+0x200>
          double v = va_arg(*ap, double);
 80252f6:	9904      	ldr	r1, [sp, #16]
 80252f8:	680b      	ldr	r3, [r1, #0]
 80252fa:	3307      	adds	r3, #7
 80252fc:	f023 0307 	bic.w	r3, r3, #7
 8025300:	f103 0208 	add.w	r2, r3, #8
 8025304:	600a      	str	r2, [r1, #0]
 8025306:	ed93 0b00 	vldr	d0, [r3]
          if (pr == ~0U) pr = 6;
 802530a:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802530e:	d011      	beq.n	8025334 <mg_vxprintf+0x288>
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8025310:	2d67      	cmp	r5, #103	@ 0x67
 8025312:	bf14      	ite	ne
 8025314:	2300      	movne	r3, #0
 8025316:	2301      	moveq	r3, #1
 8025318:	464a      	mov	r2, r9
 802531a:	2128      	movs	r1, #40	@ 0x28
 802531c:	a808      	add	r0, sp, #32
 802531e:	f7ff fcb7 	bl	8024c90 <mg_dtoa>
 8025322:	4605      	mov	r5, r0
        for (j = 0; j < xl && w > 0; j++) w--;
 8025324:	2300      	movs	r3, #0
 8025326:	9a02      	ldr	r2, [sp, #8]
 8025328:	4293      	cmp	r3, r2
 802532a:	d266      	bcs.n	80253fa <mg_vxprintf+0x34e>
 802532c:	b37c      	cbz	r4, 802538e <mg_vxprintf+0x2e2>
 802532e:	3c01      	subs	r4, #1
 8025330:	3301      	adds	r3, #1
 8025332:	e7f9      	b.n	8025328 <mg_vxprintf+0x27c>
          if (pr == ~0U) pr = 6;
 8025334:	f04f 0906 	mov.w	r9, #6
 8025338:	e7ea      	b.n	8025310 <mg_vxprintf+0x264>
          int64_t v = va_arg(*ap, int64_t);
 802533a:	9d04      	ldr	r5, [sp, #16]
 802533c:	682b      	ldr	r3, [r5, #0]
 802533e:	3307      	adds	r3, #7
 8025340:	f023 0307 	bic.w	r3, r3, #7
 8025344:	f103 0208 	add.w	r2, r3, #8
 8025348:	602a      	str	r2, [r5, #0]
 802534a:	e9d3 2300 	ldrd	r2, r3, [r3]
          k = mg_lld(tmp, v, s, h);
 802534e:	9101      	str	r1, [sp, #4]
 8025350:	9000      	str	r0, [sp, #0]
 8025352:	a808      	add	r0, sp, #32
 8025354:	f7fb ff70 	bl	8021238 <mg_lld>
 8025358:	4605      	mov	r5, r0
 802535a:	e7e3      	b.n	8025324 <mg_vxprintf+0x278>
          long v = va_arg(*ap, long);
 802535c:	9b04      	ldr	r3, [sp, #16]
 802535e:	f8d3 c000 	ldr.w	ip, [r3]
 8025362:	f10c 0204 	add.w	r2, ip, #4
 8025366:	601a      	str	r2, [r3, #0]
 8025368:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 802536c:	2d64      	cmp	r5, #100	@ 0x64
 802536e:	d008      	beq.n	8025382 <mg_vxprintf+0x2d6>
 8025370:	461a      	mov	r2, r3
 8025372:	2300      	movs	r3, #0
 8025374:	9101      	str	r1, [sp, #4]
 8025376:	9000      	str	r0, [sp, #0]
 8025378:	a808      	add	r0, sp, #32
 802537a:	f7fb ff5d 	bl	8021238 <mg_lld>
 802537e:	4605      	mov	r5, r0
 8025380:	e7d0      	b.n	8025324 <mg_vxprintf+0x278>
 8025382:	461a      	mov	r2, r3
 8025384:	17db      	asrs	r3, r3, #31
 8025386:	e7f5      	b.n	8025374 <mg_vxprintf+0x2c8>
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8025388:	461a      	mov	r2, r3
 802538a:	17db      	asrs	r3, r3, #31
 802538c:	e7a8      	b.n	80252e0 <mg_vxprintf+0x234>
 802538e:	46a1      	mov	r9, r4
 8025390:	9605      	str	r6, [sp, #20]
 8025392:	9e03      	ldr	r6, [sp, #12]
 8025394:	e009      	b.n	80253aa <mg_vxprintf+0x2fe>
          n += scpy(out, param, &pad, 1);
 8025396:	2301      	movs	r3, #1
 8025398:	f10d 021f 	add.w	r2, sp, #31
 802539c:	4651      	mov	r1, sl
 802539e:	4640      	mov	r0, r8
 80253a0:	f7fb ffe0 	bl	8021364 <scpy>
 80253a4:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80253a6:	f109 0901 	add.w	r9, r9, #1
 80253aa:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80253ae:	2b20      	cmp	r3, #32
 80253b0:	d106      	bne.n	80253c0 <mg_vxprintf+0x314>
 80253b2:	b92e      	cbnz	r6, 80253c0 <mg_vxprintf+0x314>
 80253b4:	42a5      	cmp	r5, r4
 80253b6:	d203      	bcs.n	80253c0 <mg_vxprintf+0x314>
 80253b8:	eb09 0305 	add.w	r3, r9, r5
 80253bc:	42a3      	cmp	r3, r4
 80253be:	d3ea      	bcc.n	8025396 <mg_vxprintf+0x2ea>
        n += scpy(out, param, (char *) "0x", xl);
 80253c0:	9e05      	ldr	r6, [sp, #20]
 80253c2:	9b02      	ldr	r3, [sp, #8]
 80253c4:	4a69      	ldr	r2, [pc, #420]	@ (802556c <mg_vxprintf+0x4c0>)
 80253c6:	4651      	mov	r1, sl
 80253c8:	4640      	mov	r0, r8
 80253ca:	f7fb ffcb 	bl	8021364 <scpy>
 80253ce:	eb07 0900 	add.w	r9, r7, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 80253d2:	2700      	movs	r7, #0
 80253d4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80253d8:	2b30      	cmp	r3, #48	@ 0x30
 80253da:	d113      	bne.n	8025404 <mg_vxprintf+0x358>
 80253dc:	42a5      	cmp	r5, r4
 80253de:	d211      	bcs.n	8025404 <mg_vxprintf+0x358>
 80253e0:	197b      	adds	r3, r7, r5
 80253e2:	42a3      	cmp	r3, r4
 80253e4:	d20e      	bcs.n	8025404 <mg_vxprintf+0x358>
          n += scpy(out, param, &pad, 1);
 80253e6:	2301      	movs	r3, #1
 80253e8:	f10d 021f 	add.w	r2, sp, #31
 80253ec:	4651      	mov	r1, sl
 80253ee:	4640      	mov	r0, r8
 80253f0:	f7fb ffb8 	bl	8021364 <scpy>
 80253f4:	4481      	add	r9, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 80253f6:	3701      	adds	r7, #1
 80253f8:	e7ec      	b.n	80253d4 <mg_vxprintf+0x328>
 80253fa:	f04f 0900 	mov.w	r9, #0
 80253fe:	9605      	str	r6, [sp, #20]
 8025400:	9e03      	ldr	r6, [sp, #12]
 8025402:	e7d2      	b.n	80253aa <mg_vxprintf+0x2fe>
        n += scpy(out, param, tmp, k);
 8025404:	462b      	mov	r3, r5
 8025406:	aa08      	add	r2, sp, #32
 8025408:	4651      	mov	r1, sl
 802540a:	4640      	mov	r0, r8
 802540c:	f7fb ffaa 	bl	8021364 <scpy>
 8025410:	eb09 0700 	add.w	r7, r9, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8025414:	f04f 0900 	mov.w	r9, #0
 8025418:	9602      	str	r6, [sp, #8]
 802541a:	9e03      	ldr	r6, [sp, #12]
 802541c:	e009      	b.n	8025432 <mg_vxprintf+0x386>
          n += scpy(out, param, &pad, 1);
 802541e:	2301      	movs	r3, #1
 8025420:	f10d 021f 	add.w	r2, sp, #31
 8025424:	4651      	mov	r1, sl
 8025426:	4640      	mov	r0, r8
 8025428:	f7fb ff9c 	bl	8021364 <scpy>
 802542c:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 802542e:	f109 0901 	add.w	r9, r9, #1
 8025432:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8025436:	2b20      	cmp	r3, #32
 8025438:	d17f      	bne.n	802553a <mg_vxprintf+0x48e>
 802543a:	2e00      	cmp	r6, #0
 802543c:	f000 808a 	beq.w	8025554 <mg_vxprintf+0x4a8>
 8025440:	42a5      	cmp	r5, r4
 8025442:	f080 8089 	bcs.w	8025558 <mg_vxprintf+0x4ac>
 8025446:	eb09 0305 	add.w	r3, r9, r5
 802544a:	42a3      	cmp	r3, r4
 802544c:	d3e7      	bcc.n	802541e <mg_vxprintf+0x372>
 802544e:	9e02      	ldr	r6, [sp, #8]
 8025450:	e074      	b.n	802553c <mg_vxprintf+0x490>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8025452:	9904      	ldr	r1, [sp, #16]
 8025454:	680b      	ldr	r3, [r1, #0]
 8025456:	1d1a      	adds	r2, r3, #4
 8025458:	600a      	str	r2, [r1, #0]
 802545a:	681c      	ldr	r4, [r3, #0]
        n += f(out, param, ap);
 802545c:	9a04      	ldr	r2, [sp, #16]
 802545e:	4651      	mov	r1, sl
 8025460:	4640      	mov	r0, r8
 8025462:	47a0      	blx	r4
 8025464:	4407      	add	r7, r0
        if (c == 'm') n += 2, out('"', param);
 8025466:	2d6d      	cmp	r5, #109	@ 0x6d
 8025468:	d168      	bne.n	802553c <mg_vxprintf+0x490>
 802546a:	3702      	adds	r7, #2
 802546c:	4651      	mov	r1, sl
 802546e:	2022      	movs	r0, #34	@ 0x22
 8025470:	47c0      	blx	r8
 8025472:	e063      	b.n	802553c <mg_vxprintf+0x490>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8025474:	9904      	ldr	r1, [sp, #16]
 8025476:	680b      	ldr	r3, [r1, #0]
 8025478:	1d1a      	adds	r2, r3, #4
 802547a:	600a      	str	r2, [r1, #0]
 802547c:	681c      	ldr	r4, [r3, #0]
        if (c == 'm') out('"', param);
 802547e:	4651      	mov	r1, sl
 8025480:	2022      	movs	r0, #34	@ 0x22
 8025482:	47c0      	blx	r8
 8025484:	e7ea      	b.n	802545c <mg_vxprintf+0x3b0>
        int ch = va_arg(*ap, int);
 8025486:	9904      	ldr	r1, [sp, #16]
 8025488:	680b      	ldr	r3, [r1, #0]
 802548a:	1d1a      	adds	r2, r3, #4
 802548c:	600a      	str	r2, [r1, #0]
        out((char) ch, param);
 802548e:	4651      	mov	r1, sl
 8025490:	7818      	ldrb	r0, [r3, #0]
 8025492:	47c0      	blx	r8
        n++;
 8025494:	3701      	adds	r7, #1
 8025496:	e051      	b.n	802553c <mg_vxprintf+0x490>
        char *p = va_arg(*ap, char *);
 8025498:	9904      	ldr	r1, [sp, #16]
 802549a:	680b      	ldr	r3, [r1, #0]
 802549c:	1d1a      	adds	r2, r3, #4
 802549e:	600a      	str	r2, [r1, #0]
 80254a0:	681b      	ldr	r3, [r3, #0]
 80254a2:	9302      	str	r3, [sp, #8]
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 80254a4:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 80254a8:	d003      	beq.n	80254b2 <mg_vxprintf+0x406>
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80254aa:	2500      	movs	r5, #0
 80254ac:	9605      	str	r6, [sp, #20]
 80254ae:	9e03      	ldr	r6, [sp, #12]
 80254b0:	e011      	b.n	80254d6 <mg_vxprintf+0x42a>
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 80254b2:	4618      	mov	r0, r3
 80254b4:	b11b      	cbz	r3, 80254be <mg_vxprintf+0x412>
 80254b6:	f7ea fef3 	bl	80102a0 <strlen>
 80254ba:	4681      	mov	r9, r0
 80254bc:	e7f5      	b.n	80254aa <mg_vxprintf+0x3fe>
 80254be:	f04f 0900 	mov.w	r9, #0
 80254c2:	e7f2      	b.n	80254aa <mg_vxprintf+0x3fe>
          n += scpy(out, param, &pad, 1);
 80254c4:	2301      	movs	r3, #1
 80254c6:	f10d 021f 	add.w	r2, sp, #31
 80254ca:	4651      	mov	r1, sl
 80254cc:	4640      	mov	r0, r8
 80254ce:	f7fb ff49 	bl	8021364 <scpy>
 80254d2:	4407      	add	r7, r0
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80254d4:	3501      	adds	r5, #1
 80254d6:	b92e      	cbnz	r6, 80254e4 <mg_vxprintf+0x438>
 80254d8:	454c      	cmp	r4, r9
 80254da:	d903      	bls.n	80254e4 <mg_vxprintf+0x438>
 80254dc:	eb05 0309 	add.w	r3, r5, r9
 80254e0:	42a3      	cmp	r3, r4
 80254e2:	d3ef      	bcc.n	80254c4 <mg_vxprintf+0x418>
        n += scpy(out, param, p, pr);
 80254e4:	9e05      	ldr	r6, [sp, #20]
 80254e6:	464b      	mov	r3, r9
 80254e8:	9a02      	ldr	r2, [sp, #8]
 80254ea:	4651      	mov	r1, sl
 80254ec:	4640      	mov	r0, r8
 80254ee:	f7fb ff39 	bl	8021364 <scpy>
 80254f2:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 80254f4:	2500      	movs	r5, #0
 80254f6:	9602      	str	r6, [sp, #8]
 80254f8:	9e03      	ldr	r6, [sp, #12]
 80254fa:	e008      	b.n	802550e <mg_vxprintf+0x462>
          n += scpy(out, param, &pad, 1);
 80254fc:	2301      	movs	r3, #1
 80254fe:	f10d 021f 	add.w	r2, sp, #31
 8025502:	4651      	mov	r1, sl
 8025504:	4640      	mov	r0, r8
 8025506:	f7fb ff2d 	bl	8021364 <scpy>
 802550a:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 802550c:	3501      	adds	r5, #1
 802550e:	b32e      	cbz	r6, 802555c <mg_vxprintf+0x4b0>
 8025510:	454c      	cmp	r4, r9
 8025512:	d925      	bls.n	8025560 <mg_vxprintf+0x4b4>
 8025514:	eb05 0309 	add.w	r3, r5, r9
 8025518:	42a3      	cmp	r3, r4
 802551a:	d3ef      	bcc.n	80254fc <mg_vxprintf+0x450>
 802551c:	9e02      	ldr	r6, [sp, #8]
 802551e:	e00d      	b.n	802553c <mg_vxprintf+0x490>
        out('%', param);
 8025520:	4651      	mov	r1, sl
 8025522:	2025      	movs	r0, #37	@ 0x25
 8025524:	47c0      	blx	r8
        n++;
 8025526:	3701      	adds	r7, #1
 8025528:	e008      	b.n	802553c <mg_vxprintf+0x490>
        out('%', param);
 802552a:	4651      	mov	r1, sl
 802552c:	2025      	movs	r0, #37	@ 0x25
 802552e:	47c0      	blx	r8
        out(c, param);
 8025530:	4651      	mov	r1, sl
 8025532:	4628      	mov	r0, r5
 8025534:	47c0      	blx	r8
        n += 2;
 8025536:	3702      	adds	r7, #2
 8025538:	e000      	b.n	802553c <mg_vxprintf+0x490>
 802553a:	9e02      	ldr	r6, [sp, #8]
      i++;
 802553c:	1c74      	adds	r4, r6, #1
  while (fmt[i] != '\0') {
 802553e:	f81b 0004 	ldrb.w	r0, [fp, r4]
 8025542:	b178      	cbz	r0, 8025564 <mg_vxprintf+0x4b8>
    if (fmt[i] == '%') {
 8025544:	2825      	cmp	r0, #37	@ 0x25
 8025546:	f43f adbb 	beq.w	80250c0 <mg_vxprintf+0x14>
      out(fmt[i], param), n++, i++;
 802554a:	4651      	mov	r1, sl
 802554c:	47c0      	blx	r8
 802554e:	3701      	adds	r7, #1
 8025550:	3401      	adds	r4, #1
 8025552:	e7f4      	b.n	802553e <mg_vxprintf+0x492>
 8025554:	9e02      	ldr	r6, [sp, #8]
 8025556:	e7f1      	b.n	802553c <mg_vxprintf+0x490>
 8025558:	9e02      	ldr	r6, [sp, #8]
 802555a:	e7ef      	b.n	802553c <mg_vxprintf+0x490>
 802555c:	9e02      	ldr	r6, [sp, #8]
 802555e:	e7ed      	b.n	802553c <mg_vxprintf+0x490>
 8025560:	9e02      	ldr	r6, [sp, #8]
 8025562:	e7eb      	b.n	802553c <mg_vxprintf+0x490>
}
 8025564:	4638      	mov	r0, r7
 8025566:	b013      	add	sp, #76	@ 0x4c
 8025568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802556c:	0803b2f8 	.word	0x0803b2f8

08025570 <mg_xprintf>:
size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8025570:	b40c      	push	{r2, r3}
 8025572:	b500      	push	{lr}
 8025574:	b083      	sub	sp, #12
 8025576:	ab04      	add	r3, sp, #16
 8025578:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 802557c:	9301      	str	r3, [sp, #4]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 802557e:	ab01      	add	r3, sp, #4
 8025580:	f7ff fd94 	bl	80250ac <mg_vxprintf>
}
 8025584:	b003      	add	sp, #12
 8025586:	f85d eb04 	ldr.w	lr, [sp], #4
 802558a:	b002      	add	sp, #8
 802558c:	4770      	bx	lr
	...

08025590 <print_ip4>:
static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8025590:	b530      	push	{r4, r5, lr}
 8025592:	b085      	sub	sp, #20
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8025594:	7853      	ldrb	r3, [r2, #1]
 8025596:	7894      	ldrb	r4, [r2, #2]
 8025598:	78d5      	ldrb	r5, [r2, #3]
 802559a:	9502      	str	r5, [sp, #8]
 802559c:	9401      	str	r4, [sp, #4]
 802559e:	9300      	str	r3, [sp, #0]
 80255a0:	7813      	ldrb	r3, [r2, #0]
 80255a2:	4a02      	ldr	r2, [pc, #8]	@ (80255ac <print_ip4+0x1c>)
 80255a4:	f7ff ffe4 	bl	8025570 <mg_xprintf>
}
 80255a8:	b005      	add	sp, #20
 80255aa:	bd30      	pop	{r4, r5, pc}
 80255ac:	0803b2fc 	.word	0x0803b2fc

080255b0 <mg_print_ip4>:
size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 80255b0:	b510      	push	{r4, lr}
  uint8_t *p = va_arg(*ap, uint8_t *);
 80255b2:	6813      	ldr	r3, [r2, #0]
 80255b4:	1d1c      	adds	r4, r3, #4
 80255b6:	6014      	str	r4, [r2, #0]
  return print_ip4(out, arg, p);
 80255b8:	681a      	ldr	r2, [r3, #0]
 80255ba:	f7ff ffe9 	bl	8025590 <print_ip4>
}
 80255be:	bd10      	pop	{r4, pc}

080255c0 <mg_print_mac>:
size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 80255c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80255c2:	b087      	sub	sp, #28
  uint8_t *p = va_arg(*ap, uint8_t *);
 80255c4:	6813      	ldr	r3, [r2, #0]
 80255c6:	1d1c      	adds	r4, r3, #4
 80255c8:	6014      	str	r4, [r2, #0]
 80255ca:	681a      	ldr	r2, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80255cc:	7813      	ldrb	r3, [r2, #0]
 80255ce:	7854      	ldrb	r4, [r2, #1]
 80255d0:	7895      	ldrb	r5, [r2, #2]
                    p[3], p[4], p[5]);
 80255d2:	78d6      	ldrb	r6, [r2, #3]
 80255d4:	7917      	ldrb	r7, [r2, #4]
 80255d6:	7952      	ldrb	r2, [r2, #5]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80255d8:	9204      	str	r2, [sp, #16]
 80255da:	9703      	str	r7, [sp, #12]
 80255dc:	9602      	str	r6, [sp, #8]
 80255de:	9501      	str	r5, [sp, #4]
 80255e0:	9400      	str	r4, [sp, #0]
 80255e2:	4a02      	ldr	r2, [pc, #8]	@ (80255ec <mg_print_mac+0x2c>)
 80255e4:	f7ff ffc4 	bl	8025570 <mg_xprintf>
}
 80255e8:	b007      	add	sp, #28
 80255ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80255ec:	0803b308 	.word	0x0803b308

080255f0 <mg_log>:
void mg_log(const char *fmt, ...) {
 80255f0:	b40f      	push	{r0, r1, r2, r3}
 80255f2:	b500      	push	{lr}
 80255f4:	b083      	sub	sp, #12
 80255f6:	ab04      	add	r3, sp, #16
 80255f8:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 80255fc:	9301      	str	r3, [sp, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 80255fe:	ab01      	add	r3, sp, #4
 8025600:	4907      	ldr	r1, [pc, #28]	@ (8025620 <mg_log+0x30>)
 8025602:	6809      	ldr	r1, [r1, #0]
 8025604:	4807      	ldr	r0, [pc, #28]	@ (8025624 <mg_log+0x34>)
 8025606:	6800      	ldr	r0, [r0, #0]
 8025608:	f7ff fd50 	bl	80250ac <mg_vxprintf>
  logs("\r\n", 2);
 802560c:	2102      	movs	r1, #2
 802560e:	4806      	ldr	r0, [pc, #24]	@ (8025628 <mg_log+0x38>)
 8025610:	f7fc fc90 	bl	8021f34 <logs>
}
 8025614:	b003      	add	sp, #12
 8025616:	f85d eb04 	ldr.w	lr, [sp], #4
 802561a:	b004      	add	sp, #16
 802561c:	4770      	bx	lr
 802561e:	bf00      	nop
 8025620:	2001a128 	.word	0x2001a128
 8025624:	20000138 	.word	0x20000138
 8025628:	0803bd1c 	.word	0x0803bd1c

0802562c <mg_vprintf>:
size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 802562c:	b538      	push	{r3, r4, r5, lr}
 802562e:	4604      	mov	r4, r0
 8025630:	4613      	mov	r3, r2
  size_t old = c->send.len;
 8025632:	6d05      	ldr	r5, [r0, #80]	@ 0x50
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8025634:	460a      	mov	r2, r1
 8025636:	f100 0148 	add.w	r1, r0, #72	@ 0x48
 802563a:	4803      	ldr	r0, [pc, #12]	@ (8025648 <mg_vprintf+0x1c>)
 802563c:	f7ff fd36 	bl	80250ac <mg_vxprintf>
  return c->send.len - old;
 8025640:	6d20      	ldr	r0, [r4, #80]	@ 0x50
}
 8025642:	1b40      	subs	r0, r0, r5
 8025644:	bd38      	pop	{r3, r4, r5, pc}
 8025646:	bf00      	nop
 8025648:	0802878b 	.word	0x0802878b

0802564c <mg_printf>:
size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 802564c:	b40e      	push	{r1, r2, r3}
 802564e:	b500      	push	{lr}
 8025650:	b082      	sub	sp, #8
 8025652:	ab03      	add	r3, sp, #12
 8025654:	f853 1b04 	ldr.w	r1, [r3], #4
  va_start(ap, fmt);
 8025658:	9301      	str	r3, [sp, #4]
  len = mg_vprintf(c, fmt, &ap);
 802565a:	aa01      	add	r2, sp, #4
 802565c:	f7ff ffe6 	bl	802562c <mg_vprintf>
}
 8025660:	b002      	add	sp, #8
 8025662:	f85d eb04 	ldr.w	lr, [sp], #4
 8025666:	b003      	add	sp, #12
 8025668:	4770      	bx	lr
	...

0802566c <mg_vsnprintf>:
size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 802566c:	b530      	push	{r4, r5, lr}
 802566e:	b085      	sub	sp, #20
 8025670:	4605      	mov	r5, r0
 8025672:	460c      	mov	r4, r1
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8025674:	9000      	str	r0, [sp, #0]
 8025676:	9101      	str	r1, [sp, #4]
 8025678:	2100      	movs	r1, #0
 802567a:	9102      	str	r1, [sp, #8]
 802567c:	9103      	str	r1, [sp, #12]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 802567e:	4669      	mov	r1, sp
 8025680:	4804      	ldr	r0, [pc, #16]	@ (8025694 <mg_vsnprintf+0x28>)
 8025682:	f7ff fd13 	bl	80250ac <mg_vxprintf>
  if (n < len) buf[n] = '\0';
 8025686:	4284      	cmp	r4, r0
 8025688:	d901      	bls.n	802568e <mg_vsnprintf+0x22>
 802568a:	2300      	movs	r3, #0
 802568c:	542b      	strb	r3, [r5, r0]
}
 802568e:	b005      	add	sp, #20
 8025690:	bd30      	pop	{r4, r5, pc}
 8025692:	bf00      	nop
 8025694:	08028795 	.word	0x08028795

08025698 <mg_http_reply>:
                   const char *fmt, ...) {
 8025698:	b408      	push	{r3}
 802569a:	b570      	push	{r4, r5, r6, lr}
 802569c:	b085      	sub	sp, #20
 802569e:	4604      	mov	r4, r0
 80256a0:	460e      	mov	r6, r1
 80256a2:	4615      	mov	r5, r2
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 80256a4:	4608      	mov	r0, r1
 80256a6:	f7fb ffa9 	bl	80215fc <mg_http_status_code_str>
 80256aa:	4603      	mov	r3, r0
 80256ac:	b1ed      	cbz	r5, 80256ea <mg_http_reply+0x52>
 80256ae:	9500      	str	r5, [sp, #0]
 80256b0:	4632      	mov	r2, r6
 80256b2:	4916      	ldr	r1, [pc, #88]	@ (802570c <mg_http_reply+0x74>)
 80256b4:	4620      	mov	r0, r4
 80256b6:	f7ff ffc9 	bl	802564c <mg_printf>
  len = c->send.len;
 80256ba:	6d25      	ldr	r5, [r4, #80]	@ 0x50
  va_start(ap, fmt);
 80256bc:	ab0a      	add	r3, sp, #40	@ 0x28
 80256be:	9303      	str	r3, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 80256c0:	ab03      	add	r3, sp, #12
 80256c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80256c4:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 80256c8:	4811      	ldr	r0, [pc, #68]	@ (8025710 <mg_http_reply+0x78>)
 80256ca:	f7ff fcef 	bl	80250ac <mg_vxprintf>
  if (c->send.len > 16) {
 80256ce:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80256d0:	2b10      	cmp	r3, #16
 80256d2:	d80c      	bhi.n	80256ee <mg_http_reply+0x56>
  c->is_resp = 0;
 80256d4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80256d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80256dc:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 80256e0:	b005      	add	sp, #20
 80256e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80256e6:	b001      	add	sp, #4
 80256e8:	4770      	bx	lr
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 80256ea:	4d0a      	ldr	r5, [pc, #40]	@ (8025714 <mg_http_reply+0x7c>)
 80256ec:	e7df      	b.n	80256ae <mg_http_reply+0x16>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 80256ee:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
 80256f0:	f1a5 000f 	sub.w	r0, r5, #15
 80256f4:	1b5b      	subs	r3, r3, r5
 80256f6:	4a08      	ldr	r2, [pc, #32]	@ (8025718 <mg_http_reply+0x80>)
 80256f8:	210b      	movs	r1, #11
 80256fa:	4430      	add	r0, r6
 80256fc:	f7ff fab8 	bl	8024c70 <mg_snprintf>
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 8025700:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8025702:	4405      	add	r5, r0
 8025704:	3d0f      	subs	r5, #15
 8025706:	2220      	movs	r2, #32
 8025708:	555a      	strb	r2, [r3, r5]
 802570a:	e7e3      	b.n	80256d4 <mg_http_reply+0x3c>
 802570c:	0803b328 	.word	0x0803b328
 8025710:	0802878b 	.word	0x0802878b
 8025714:	08038678 	.word	0x08038678
 8025718:	0803b35c 	.word	0x0803b35c

0802571c <mg_http_etag>:
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 802571c:	b510      	push	{r4, lr}
 802571e:	b084      	sub	sp, #16
 8025720:	4604      	mov	r4, r0
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8025722:	9202      	str	r2, [sp, #8]
 8025724:	2300      	movs	r3, #0
 8025726:	9303      	str	r3, [sp, #12]
 8025728:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802572c:	e9cd 2300 	strd	r2, r3, [sp]
 8025730:	4a02      	ldr	r2, [pc, #8]	@ (802573c <mg_http_etag+0x20>)
 8025732:	f7ff fa9d 	bl	8024c70 <mg_snprintf>
}
 8025736:	4620      	mov	r0, r4
 8025738:	b004      	add	sp, #16
 802573a:	bd10      	pop	{r4, pc}
 802573c:	0803b364 	.word	0x0803b364

08025740 <mg_url_encode>:
size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 8025740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025744:	b083      	sub	sp, #12
 8025746:	4607      	mov	r7, r0
 8025748:	4689      	mov	r9, r1
 802574a:	4692      	mov	sl, r2
 802574c:	4698      	mov	r8, r3
  size_t i, n = 0;
 802574e:	2500      	movs	r5, #0
  for (i = 0; i < sl; i++) {
 8025750:	462c      	mov	r4, r5
 8025752:	e00c      	b.n	802576e <mg_url_encode+0x2e>
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 8025754:	f8cd b004 	str.w	fp, [sp, #4]
 8025758:	2301      	movs	r3, #1
 802575a:	9300      	str	r3, [sp, #0]
 802575c:	4b16      	ldr	r3, [pc, #88]	@ (80257b8 <mg_url_encode+0x78>)
 802575e:	4a17      	ldr	r2, [pc, #92]	@ (80257bc <mg_url_encode+0x7c>)
 8025760:	2104      	movs	r1, #4
 8025762:	eb0a 0005 	add.w	r0, sl, r5
 8025766:	f7ff fa83 	bl	8024c70 <mg_snprintf>
      n += 3;
 802576a:	3503      	adds	r5, #3
  for (i = 0; i < sl; i++) {
 802576c:	3401      	adds	r4, #1
 802576e:	454c      	cmp	r4, r9
 8025770:	d20e      	bcs.n	8025790 <mg_url_encode+0x50>
    int c = *(unsigned char *) &s[i];
 8025772:	eb07 0b04 	add.w	fp, r7, r4
 8025776:	5d3e      	ldrb	r6, [r7, r4]
    if (n + 4 >= len) return 0;
 8025778:	1d2b      	adds	r3, r5, #4
 802577a:	4543      	cmp	r3, r8
 802577c:	d216      	bcs.n	80257ac <mg_url_encode+0x6c>
    if (mg_is_url_safe(c)) {
 802577e:	4630      	mov	r0, r6
 8025780:	f7fc fa38 	bl	8021bf4 <mg_is_url_safe>
 8025784:	2800      	cmp	r0, #0
 8025786:	d0e5      	beq.n	8025754 <mg_url_encode+0x14>
      buf[n++] = s[i];
 8025788:	f80a 6005 	strb.w	r6, [sl, r5]
 802578c:	3501      	adds	r5, #1
 802578e:	e7ed      	b.n	802576c <mg_url_encode+0x2c>
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 8025790:	f1b8 0f00 	cmp.w	r8, #0
 8025794:	d00b      	beq.n	80257ae <mg_url_encode+0x6e>
 8025796:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802579a:	45a8      	cmp	r8, r5
 802579c:	d902      	bls.n	80257a4 <mg_url_encode+0x64>
 802579e:	2300      	movs	r3, #0
 80257a0:	f80a 3005 	strb.w	r3, [sl, r5]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 80257a4:	2300      	movs	r3, #0
 80257a6:	f80a 3008 	strb.w	r3, [sl, r8]
 80257aa:	e000      	b.n	80257ae <mg_url_encode+0x6e>
    if (n + 4 >= len) return 0;
 80257ac:	2500      	movs	r5, #0
}
 80257ae:	4628      	mov	r0, r5
 80257b0:	b003      	add	sp, #12
 80257b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80257b6:	bf00      	nop
 80257b8:	08022969 	.word	0x08022969
 80257bc:	0803b370 	.word	0x0803b370

080257c0 <mg_vmprintf>:
char *mg_vmprintf(const char *fmt, va_list *ap) {
 80257c0:	b510      	push	{r4, lr}
 80257c2:	b084      	sub	sp, #16
 80257c4:	4602      	mov	r2, r0
 80257c6:	460b      	mov	r3, r1
  struct mg_iobuf io = {0, 0, 0, 256};
 80257c8:	2400      	movs	r4, #0
 80257ca:	9400      	str	r4, [sp, #0]
 80257cc:	9401      	str	r4, [sp, #4]
 80257ce:	9402      	str	r4, [sp, #8]
 80257d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80257d4:	9103      	str	r1, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 80257d6:	4669      	mov	r1, sp
 80257d8:	4802      	ldr	r0, [pc, #8]	@ (80257e4 <mg_vmprintf+0x24>)
 80257da:	f7ff fc67 	bl	80250ac <mg_vxprintf>
}
 80257de:	9800      	ldr	r0, [sp, #0]
 80257e0:	b004      	add	sp, #16
 80257e2:	bd10      	pop	{r4, pc}
 80257e4:	0802878b 	.word	0x0802878b

080257e8 <mg_mprintf>:
char *mg_mprintf(const char *fmt, ...) {
 80257e8:	b40f      	push	{r0, r1, r2, r3}
 80257ea:	b500      	push	{lr}
 80257ec:	b083      	sub	sp, #12
 80257ee:	ab04      	add	r3, sp, #16
 80257f0:	f853 0b04 	ldr.w	r0, [r3], #4
  va_start(ap, fmt);
 80257f4:	9301      	str	r3, [sp, #4]
  s = mg_vmprintf(fmt, &ap);
 80257f6:	a901      	add	r1, sp, #4
 80257f8:	f7ff ffe2 	bl	80257c0 <mg_vmprintf>
}
 80257fc:	b003      	add	sp, #12
 80257fe:	f85d eb04 	ldr.w	lr, [sp], #4
 8025802:	b004      	add	sp, #16
 8025804:	4770      	bx	lr

08025806 <mg_queue_next>:
size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8025806:	b538      	push	{r3, r4, r5, lr}
 8025808:	4604      	mov	r4, r0
 802580a:	460d      	mov	r5, r1
  if (q->tail != q->head) {
 802580c:	6882      	ldr	r2, [r0, #8]
 802580e:	68c3      	ldr	r3, [r0, #12]
 8025810:	429a      	cmp	r2, r3
 8025812:	d107      	bne.n	8025824 <mg_queue_next+0x1e>
  size_t len = 0;
 8025814:	2000      	movs	r0, #0
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8025816:	b125      	cbz	r5, 8025822 <mg_queue_next+0x1c>
 8025818:	6823      	ldr	r3, [r4, #0]
 802581a:	68a2      	ldr	r2, [r4, #8]
 802581c:	3204      	adds	r2, #4
 802581e:	4413      	add	r3, r2
 8025820:	602b      	str	r3, [r5, #0]
}
 8025822:	bd38      	pop	{r3, r4, r5, pc}
    len = mg_queue_read_len(q);
 8025824:	f7fe fb4f 	bl	8023ec6 <mg_queue_read_len>
    if (len == 0) {  // Zero (head wrapped) ?
 8025828:	2800      	cmp	r0, #0
 802582a:	d1f4      	bne.n	8025816 <mg_queue_next+0x10>
      q->tail = 0;   // Reset tail to the start
 802582c:	60a0      	str	r0, [r4, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 802582e:	68e2      	ldr	r2, [r4, #12]
 8025830:	68a3      	ldr	r3, [r4, #8]
 8025832:	429a      	cmp	r2, r3
 8025834:	d9ef      	bls.n	8025816 <mg_queue_next+0x10>
 8025836:	4620      	mov	r0, r4
 8025838:	f7fe fb45 	bl	8023ec6 <mg_queue_read_len>
 802583c:	e7eb      	b.n	8025816 <mg_queue_next+0x10>

0802583e <mg_queue_del>:
  q->tail += len + sizeof(uint32_t);
 802583e:	6883      	ldr	r3, [r0, #8]
 8025840:	440b      	add	r3, r1
 8025842:	3304      	adds	r3, #4
 8025844:	6083      	str	r3, [r0, #8]
}
 8025846:	4770      	bx	lr

08025848 <mg_sha1_init>:
  context->state[0] = 0x67452301;
 8025848:	4b0a      	ldr	r3, [pc, #40]	@ (8025874 <mg_sha1_init+0x2c>)
 802584a:	6003      	str	r3, [r0, #0]
  context->state[1] = 0xEFCDAB89;
 802584c:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 8025850:	6043      	str	r3, [r0, #4]
  context->state[2] = 0x98BADCFE;
 8025852:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 8025856:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 802585a:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 802585e:	6083      	str	r3, [r0, #8]
  context->state[3] = 0x10325476;
 8025860:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 8025864:	60c3      	str	r3, [r0, #12]
  context->state[4] = 0xC3D2E1F0;
 8025866:	4b04      	ldr	r3, [pc, #16]	@ (8025878 <mg_sha1_init+0x30>)
 8025868:	6103      	str	r3, [r0, #16]
  context->count[0] = context->count[1] = 0;
 802586a:	2300      	movs	r3, #0
 802586c:	6183      	str	r3, [r0, #24]
 802586e:	6143      	str	r3, [r0, #20]
}
 8025870:	4770      	bx	lr
 8025872:	bf00      	nop
 8025874:	67452301 	.word	0x67452301
 8025878:	c3d2e1f0 	.word	0xc3d2e1f0

0802587c <mg_sha1_update>:
                    size_t len) {
 802587c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802587e:	4604      	mov	r4, r0
 8025880:	460f      	mov	r7, r1
 8025882:	4616      	mov	r6, r2
  j = context->count[0];
 8025884:	6943      	ldr	r3, [r0, #20]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 8025886:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802588a:	6142      	str	r2, [r0, #20]
 802588c:	429a      	cmp	r2, r3
 802588e:	d202      	bcs.n	8025896 <mg_sha1_update+0x1a>
 8025890:	6982      	ldr	r2, [r0, #24]
 8025892:	3201      	adds	r2, #1
 8025894:	6182      	str	r2, [r0, #24]
  context->count[1] += (uint32_t) (len >> 29);
 8025896:	69a2      	ldr	r2, [r4, #24]
 8025898:	eb02 7256 	add.w	r2, r2, r6, lsr #29
 802589c:	61a2      	str	r2, [r4, #24]
  j = (j >> 3) & 63;
 802589e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  if ((j + len) > 63) {
 80258a2:	18f2      	adds	r2, r6, r3
 80258a4:	2a3f      	cmp	r2, #63	@ 0x3f
 80258a6:	d808      	bhi.n	80258ba <mg_sha1_update+0x3e>
    i = 0;
 80258a8:	2500      	movs	r5, #0
  memcpy(&context->buffer[j], &data[i], len - i);
 80258aa:	3318      	adds	r3, #24
 80258ac:	18e0      	adds	r0, r4, r3
 80258ae:	1b72      	subs	r2, r6, r5
 80258b0:	1979      	adds	r1, r7, r5
 80258b2:	3004      	adds	r0, #4
 80258b4:	f008 fd20 	bl	802e2f8 <memcpy>
}
 80258b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(&context->buffer[j], data, (i = 64 - j));
 80258ba:	f103 0018 	add.w	r0, r3, #24
 80258be:	4420      	add	r0, r4
 80258c0:	f1c3 0540 	rsb	r5, r3, #64	@ 0x40
 80258c4:	462a      	mov	r2, r5
 80258c6:	4639      	mov	r1, r7
 80258c8:	3004      	adds	r0, #4
 80258ca:	f008 fd15 	bl	802e2f8 <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 80258ce:	f104 011c 	add.w	r1, r4, #28
 80258d2:	4620      	mov	r0, r4
 80258d4:	f7fd fad4 	bl	8022e80 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 80258d8:	e004      	b.n	80258e4 <mg_sha1_update+0x68>
      mg_sha1_transform(context->state, &data[i]);
 80258da:	1979      	adds	r1, r7, r5
 80258dc:	4620      	mov	r0, r4
 80258de:	f7fd facf 	bl	8022e80 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 80258e2:	3540      	adds	r5, #64	@ 0x40
 80258e4:	f105 033f 	add.w	r3, r5, #63	@ 0x3f
 80258e8:	42b3      	cmp	r3, r6
 80258ea:	d3f6      	bcc.n	80258da <mg_sha1_update+0x5e>
    j = 0;
 80258ec:	2300      	movs	r3, #0
 80258ee:	e7dc      	b.n	80258aa <mg_sha1_update+0x2e>

080258f0 <mg_sha1_final>:
void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 80258f0:	b570      	push	{r4, r5, r6, lr}
 80258f2:	b084      	sub	sp, #16
 80258f4:	4606      	mov	r6, r0
 80258f6:	460d      	mov	r5, r1
  for (i = 0; i < 8; i++) {
 80258f8:	2300      	movs	r3, #0
 80258fa:	e013      	b.n	8025924 <mg_sha1_final+0x34>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 80258fc:	2b03      	cmp	r3, #3
 80258fe:	bf8c      	ite	hi
 8025900:	2200      	movhi	r2, #0
 8025902:	2201      	movls	r2, #1
 8025904:	3204      	adds	r2, #4
 8025906:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 802590a:	6851      	ldr	r1, [r2, #4]
                                      ((3 - (i & 3)) * 8)) &
 802590c:	43da      	mvns	r2, r3
 802590e:	f002 0203 	and.w	r2, r2, #3
 8025912:	00d2      	lsls	r2, r2, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8025914:	fa21 f202 	lsr.w	r2, r1, r2
 8025918:	f103 0110 	add.w	r1, r3, #16
 802591c:	4469      	add	r1, sp
 802591e:	f801 2c08 	strb.w	r2, [r1, #-8]
  for (i = 0; i < 8; i++) {
 8025922:	3301      	adds	r3, #1
 8025924:	2b07      	cmp	r3, #7
 8025926:	d9e9      	bls.n	80258fc <mg_sha1_final+0xc>
  c = 0200;
 8025928:	2380      	movs	r3, #128	@ 0x80
 802592a:	f88d 3007 	strb.w	r3, [sp, #7]
  mg_sha1_update(context, &c, 1);
 802592e:	2201      	movs	r2, #1
 8025930:	f10d 0107 	add.w	r1, sp, #7
 8025934:	4628      	mov	r0, r5
 8025936:	f7ff ffa1 	bl	802587c <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 802593a:	e008      	b.n	802594e <mg_sha1_final+0x5e>
    c = 0000;
 802593c:	2300      	movs	r3, #0
 802593e:	f88d 3007 	strb.w	r3, [sp, #7]
    mg_sha1_update(context, &c, 1);
 8025942:	2201      	movs	r2, #1
 8025944:	f10d 0107 	add.w	r1, sp, #7
 8025948:	4628      	mov	r0, r5
 802594a:	f7ff ff97 	bl	802587c <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 802594e:	696b      	ldr	r3, [r5, #20]
 8025950:	f403 73fc 	and.w	r3, r3, #504	@ 0x1f8
 8025954:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8025958:	d1f0      	bne.n	802593c <mg_sha1_final+0x4c>
  mg_sha1_update(context, finalcount, 8);
 802595a:	2208      	movs	r2, #8
 802595c:	eb0d 0102 	add.w	r1, sp, r2
 8025960:	4628      	mov	r0, r5
 8025962:	f7ff ff8b 	bl	802587c <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 8025966:	2300      	movs	r3, #0
 8025968:	e00a      	b.n	8025980 <mg_sha1_final+0x90>
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 802596a:	089a      	lsrs	r2, r3, #2
 802596c:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
 8025970:	43da      	mvns	r2, r3
 8025972:	f002 0203 	and.w	r2, r2, #3
 8025976:	00d2      	lsls	r2, r2, #3
 8025978:	fa24 f202 	lsr.w	r2, r4, r2
    digest[i] =
 802597c:	54f2      	strb	r2, [r6, r3]
  for (i = 0; i < 20; i++) {
 802597e:	3301      	adds	r3, #1
 8025980:	2b13      	cmp	r3, #19
 8025982:	d9f2      	bls.n	802596a <mg_sha1_final+0x7a>
  memset(context, '\0', sizeof(*context));
 8025984:	225c      	movs	r2, #92	@ 0x5c
 8025986:	2100      	movs	r1, #0
 8025988:	4628      	mov	r0, r5
 802598a:	f006 ff39 	bl	802c800 <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 802598e:	2300      	movs	r3, #0
 8025990:	9302      	str	r3, [sp, #8]
 8025992:	9303      	str	r3, [sp, #12]
}
 8025994:	b004      	add	sp, #16
 8025996:	bd70      	pop	{r4, r5, r6, pc}

08025998 <mg_http_serve_ssi>:
                       const char *fullpath) {
 8025998:	b508      	push	{r3, lr}
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 802599a:	4b03      	ldr	r3, [pc, #12]	@ (80259a8 <mg_http_serve_ssi+0x10>)
 802599c:	2200      	movs	r2, #0
 802599e:	f240 11f5 	movw	r1, #501	@ 0x1f5
 80259a2:	f7ff fe79 	bl	8025698 <mg_http_reply>
}
 80259a6:	bd08      	pop	{r3, pc}
 80259a8:	0803b378 	.word	0x0803b378

080259ac <mg_str_s>:
struct mg_str mg_str_s(const char *s) {
 80259ac:	b510      	push	{r4, lr}
 80259ae:	4604      	mov	r4, r0
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 80259b0:	6001      	str	r1, [r0, #0]
 80259b2:	b129      	cbz	r1, 80259c0 <mg_str_s+0x14>
 80259b4:	4608      	mov	r0, r1
 80259b6:	f7ea fc73 	bl	80102a0 <strlen>
 80259ba:	6060      	str	r0, [r4, #4]
}
 80259bc:	4620      	mov	r0, r4
 80259be:	bd10      	pop	{r4, pc}
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 80259c0:	2000      	movs	r0, #0
 80259c2:	e7fa      	b.n	80259ba <mg_str_s+0xe>

080259c4 <mg_str_n>:
  struct mg_str str = {(char *) s, n};
 80259c4:	6001      	str	r1, [r0, #0]
 80259c6:	6042      	str	r2, [r0, #4]
}
 80259c8:	4770      	bx	lr

080259ca <stripquotes>:
static struct mg_str stripquotes(struct mg_str s) {
 80259ca:	b510      	push	{r4, lr}
 80259cc:	b082      	sub	sp, #8
 80259ce:	4604      	mov	r4, r0
 80259d0:	ab02      	add	r3, sp, #8
 80259d2:	e903 0006 	stmdb	r3, {r1, r2}
             : s;
 80259d6:	2a01      	cmp	r2, #1
 80259d8:	d902      	bls.n	80259e0 <stripquotes+0x16>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 80259da:	780b      	ldrb	r3, [r1, #0]
 80259dc:	2b22      	cmp	r3, #34	@ 0x22
 80259de:	d007      	beq.n	80259f0 <stripquotes+0x26>
             : s;
 80259e0:	ab02      	add	r3, sp, #8
 80259e2:	e913 0003 	ldmdb	r3, {r0, r1}
 80259e6:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80259ea:	4620      	mov	r0, r4
 80259ec:	b002      	add	sp, #8
 80259ee:	bd10      	pop	{r4, pc}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 80259f0:	188b      	adds	r3, r1, r2
 80259f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80259f6:	2b22      	cmp	r3, #34	@ 0x22
 80259f8:	d1f2      	bne.n	80259e0 <stripquotes+0x16>
             ? mg_str_n(s.buf + 1, s.len - 2)
 80259fa:	3a02      	subs	r2, #2
 80259fc:	3101      	adds	r1, #1
 80259fe:	f7ff ffe1 	bl	80259c4 <mg_str_n>
             : s;
 8025a02:	e7f2      	b.n	80259ea <stripquotes+0x20>

08025a04 <mg_http_get_header_var>:
struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 8025a04:	b082      	sub	sp, #8
 8025a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025a0a:	b084      	sub	sp, #16
 8025a0c:	4680      	mov	r8, r0
 8025a0e:	4668      	mov	r0, sp
 8025a10:	e880 0006 	stmia.w	r0, {r1, r2}
 8025a14:	930b      	str	r3, [sp, #44]	@ 0x2c
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8025a16:	2400      	movs	r4, #0
 8025a18:	e023      	b.n	8025a62 <mg_http_get_header_var+0x5e>
      int q = p < x && *p == '"' ? 1 : 0;
 8025a1a:	2201      	movs	r2, #1
 8025a1c:	e03b      	b.n	8025a96 <mg_http_get_header_var+0x92>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8025a1e:	7818      	ldrb	r0, [r3, #0]
 8025a20:	3820      	subs	r0, #32
 8025a22:	b2c0      	uxtb	r0, r0
 8025a24:	281b      	cmp	r0, #27
 8025a26:	d805      	bhi.n	8025a34 <mg_http_get_header_var+0x30>
 8025a28:	4c21      	ldr	r4, [pc, #132]	@ (8025ab0 <mg_http_get_header_var+0xac>)
 8025a2a:	fa24 f000 	lsr.w	r0, r4, r0
 8025a2e:	f010 0f01 	tst.w	r0, #1
 8025a32:	d109      	bne.n	8025a48 <mg_http_get_header_var+0x44>
        p++;
 8025a34:	3301      	adds	r3, #1
      while (p < x &&
 8025a36:	42bb      	cmp	r3, r7
 8025a38:	d206      	bcs.n	8025a48 <mg_http_get_header_var+0x44>
 8025a3a:	2a00      	cmp	r2, #0
 8025a3c:	d0ef      	beq.n	8025a1e <mg_http_get_header_var+0x1a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8025a3e:	428b      	cmp	r3, r1
 8025a40:	d0f8      	beq.n	8025a34 <mg_http_get_header_var+0x30>
 8025a42:	7818      	ldrb	r0, [r3, #0]
 8025a44:	2822      	cmp	r0, #34	@ 0x22
 8025a46:	d1f5      	bne.n	8025a34 <mg_http_get_header_var+0x30>
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 8025a48:	1a5b      	subs	r3, r3, r1
 8025a4a:	ac02      	add	r4, sp, #8
 8025a4c:	441a      	add	r2, r3
 8025a4e:	4620      	mov	r0, r4
 8025a50:	f7ff ffb8 	bl	80259c4 <mg_str_n>
 8025a54:	e894 0006 	ldmia.w	r4, {r1, r2}
 8025a58:	4640      	mov	r0, r8
 8025a5a:	f7ff ffb6 	bl	80259ca <stripquotes>
 8025a5e:	e021      	b.n	8025aa4 <mg_http_get_header_var+0xa0>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8025a60:	3401      	adds	r4, #1
 8025a62:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025a64:	b1ca      	cbz	r2, 8025a9a <mg_http_get_header_var+0x96>
 8025a66:	1915      	adds	r5, r2, r4
 8025a68:	1cab      	adds	r3, r5, #2
 8025a6a:	9f01      	ldr	r7, [sp, #4]
 8025a6c:	42bb      	cmp	r3, r7
 8025a6e:	d214      	bcs.n	8025a9a <mg_http_get_header_var+0x96>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 8025a70:	9e00      	ldr	r6, [sp, #0]
 8025a72:	5d73      	ldrb	r3, [r6, r5]
 8025a74:	2b3d      	cmp	r3, #61	@ 0x3d
 8025a76:	d1f3      	bne.n	8025a60 <mg_http_get_header_var+0x5c>
 8025a78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025a7a:	1930      	adds	r0, r6, r4
 8025a7c:	f006 fe96 	bl	802c7ac <memcmp>
 8025a80:	4602      	mov	r2, r0
 8025a82:	2800      	cmp	r0, #0
 8025a84:	d1ec      	bne.n	8025a60 <mg_http_get_header_var+0x5c>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 8025a86:	3501      	adds	r5, #1
 8025a88:	1971      	adds	r1, r6, r5
 8025a8a:	4437      	add	r7, r6
      int q = p < x && *p == '"' ? 1 : 0;
 8025a8c:	42b9      	cmp	r1, r7
 8025a8e:	d202      	bcs.n	8025a96 <mg_http_get_header_var+0x92>
 8025a90:	5d73      	ldrb	r3, [r6, r5]
 8025a92:	2b22      	cmp	r3, #34	@ 0x22
 8025a94:	d0c1      	beq.n	8025a1a <mg_http_get_header_var+0x16>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 8025a96:	460b      	mov	r3, r1
      while (p < x &&
 8025a98:	e7cd      	b.n	8025a36 <mg_http_get_header_var+0x32>
  return mg_str_n(NULL, 0);
 8025a9a:	2200      	movs	r2, #0
 8025a9c:	4611      	mov	r1, r2
 8025a9e:	4640      	mov	r0, r8
 8025aa0:	f7ff ff90 	bl	80259c4 <mg_str_n>
}
 8025aa4:	4640      	mov	r0, r8
 8025aa6:	b004      	add	sp, #16
 8025aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025aac:	b002      	add	sp, #8
 8025aae:	4770      	bx	lr
 8025ab0:	08001001 	.word	0x08001001

08025ab4 <mg_v4mapped>:
static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 8025ab4:	b530      	push	{r4, r5, lr}
 8025ab6:	b085      	sub	sp, #20
 8025ab8:	466b      	mov	r3, sp
 8025aba:	e883 0003 	stmia.w	r3, {r0, r1}
  if (str.len < 14) return false;
 8025abe:	290d      	cmp	r1, #13
 8025ac0:	d930      	bls.n	8025b24 <mg_v4mapped+0x70>
 8025ac2:	4614      	mov	r4, r2
 8025ac4:	460b      	mov	r3, r1
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 8025ac6:	4601      	mov	r1, r0
 8025ac8:	7802      	ldrb	r2, [r0, #0]
 8025aca:	2a3a      	cmp	r2, #58	@ 0x3a
 8025acc:	d12d      	bne.n	8025b2a <mg_v4mapped+0x76>
 8025ace:	7842      	ldrb	r2, [r0, #1]
 8025ad0:	2a3a      	cmp	r2, #58	@ 0x3a
 8025ad2:	d12c      	bne.n	8025b2e <mg_v4mapped+0x7a>
 8025ad4:	7982      	ldrb	r2, [r0, #6]
 8025ad6:	2a3a      	cmp	r2, #58	@ 0x3a
 8025ad8:	d12b      	bne.n	8025b32 <mg_v4mapped+0x7e>
  for (i = 2; i < 6; i++) {
 8025ada:	2202      	movs	r2, #2
 8025adc:	e000      	b.n	8025ae0 <mg_v4mapped+0x2c>
 8025ade:	3201      	adds	r2, #1
 8025ae0:	2a05      	cmp	r2, #5
 8025ae2:	dc06      	bgt.n	8025af2 <mg_v4mapped+0x3e>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 8025ae4:	5c88      	ldrb	r0, [r1, r2]
 8025ae6:	2866      	cmp	r0, #102	@ 0x66
 8025ae8:	d0f9      	beq.n	8025ade <mg_v4mapped+0x2a>
 8025aea:	2846      	cmp	r0, #70	@ 0x46
 8025aec:	d0f7      	beq.n	8025ade <mg_v4mapped+0x2a>
 8025aee:	2000      	movs	r0, #0
 8025af0:	e019      	b.n	8025b26 <mg_v4mapped+0x72>
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 8025af2:	ad02      	add	r5, sp, #8
 8025af4:	1fda      	subs	r2, r3, #7
 8025af6:	3107      	adds	r1, #7
 8025af8:	4628      	mov	r0, r5
 8025afa:	f7ff ff63 	bl	80259c4 <mg_str_n>
 8025afe:	4622      	mov	r2, r4
 8025b00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025b04:	f7fc fe5a 	bl	80227bc <mg_aton4>
 8025b08:	b168      	cbz	r0, 8025b26 <mg_v4mapped+0x72>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 8025b0a:	6822      	ldr	r2, [r4, #0]
  memset(addr->ip, 0, sizeof(addr->ip));
 8025b0c:	2300      	movs	r3, #0
 8025b0e:	6023      	str	r3, [r4, #0]
 8025b10:	6063      	str	r3, [r4, #4]
 8025b12:	60a3      	str	r3, [r4, #8]
 8025b14:	60e3      	str	r3, [r4, #12]
  addr->ip[10] = addr->ip[11] = 255;
 8025b16:	23ff      	movs	r3, #255	@ 0xff
 8025b18:	72e3      	strb	r3, [r4, #11]
 8025b1a:	72a3      	strb	r3, [r4, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 8025b1c:	60e2      	str	r2, [r4, #12]
  addr->is_ip6 = true;
 8025b1e:	2301      	movs	r3, #1
 8025b20:	74e3      	strb	r3, [r4, #19]
  return true;
 8025b22:	e000      	b.n	8025b26 <mg_v4mapped+0x72>
  if (str.len < 14) return false;
 8025b24:	2000      	movs	r0, #0
}
 8025b26:	b005      	add	sp, #20
 8025b28:	bd30      	pop	{r4, r5, pc}
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 8025b2a:	2000      	movs	r0, #0
 8025b2c:	e7fb      	b.n	8025b26 <mg_v4mapped+0x72>
 8025b2e:	2000      	movs	r0, #0
 8025b30:	e7f9      	b.n	8025b26 <mg_v4mapped+0x72>
 8025b32:	2000      	movs	r0, #0
 8025b34:	e7f7      	b.n	8025b26 <mg_v4mapped+0x72>

08025b36 <mkpay>:
static void mkpay(struct pkt *pkt, void *p) {
 8025b36:	b530      	push	{r4, r5, lr}
 8025b38:	b083      	sub	sp, #12
 8025b3a:	4604      	mov	r4, r0
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 8025b3c:	6803      	ldr	r3, [r0, #0]
 8025b3e:	6842      	ldr	r2, [r0, #4]
 8025b40:	441a      	add	r2, r3
 8025b42:	466d      	mov	r5, sp
 8025b44:	1a52      	subs	r2, r2, r1
 8025b46:	4628      	mov	r0, r5
 8025b48:	f7ff ff3c 	bl	80259c4 <mg_str_n>
 8025b4c:	3408      	adds	r4, #8
 8025b4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025b52:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8025b56:	b003      	add	sp, #12
 8025b58:	bd30      	pop	{r4, r5, pc}

08025b5a <mg_strcmp>:
int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 8025b5a:	b084      	sub	sp, #16
 8025b5c:	f10d 0c10 	add.w	ip, sp, #16
 8025b60:	e90c 0003 	stmdb	ip, {r0, r1}
 8025b64:	4669      	mov	r1, sp
 8025b66:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8025b6a:	2300      	movs	r3, #0
  while (i < str1.len && i < str2.len) {
 8025b6c:	9a03      	ldr	r2, [sp, #12]
 8025b6e:	429a      	cmp	r2, r3
 8025b70:	d90b      	bls.n	8025b8a <mg_strcmp+0x30>
 8025b72:	9901      	ldr	r1, [sp, #4]
 8025b74:	4299      	cmp	r1, r3
 8025b76:	d908      	bls.n	8025b8a <mg_strcmp+0x30>
    int c1 = str1.buf[i];
 8025b78:	9a02      	ldr	r2, [sp, #8]
 8025b7a:	5cd1      	ldrb	r1, [r2, r3]
    int c2 = str2.buf[i];
 8025b7c:	9a00      	ldr	r2, [sp, #0]
 8025b7e:	5cd2      	ldrb	r2, [r2, r3]
    if (c1 < c2) return -1;
 8025b80:	4291      	cmp	r1, r2
 8025b82:	db09      	blt.n	8025b98 <mg_strcmp+0x3e>
    if (c1 > c2) return 1;
 8025b84:	dc0c      	bgt.n	8025ba0 <mg_strcmp+0x46>
    i++;
 8025b86:	3301      	adds	r3, #1
 8025b88:	e7f0      	b.n	8025b6c <mg_strcmp+0x12>
  if (i < str1.len) return 1;
 8025b8a:	429a      	cmp	r2, r3
 8025b8c:	d80a      	bhi.n	8025ba4 <mg_strcmp+0x4a>
  if (i < str2.len) return -1;
 8025b8e:	9a01      	ldr	r2, [sp, #4]
 8025b90:	429a      	cmp	r2, r3
 8025b92:	d809      	bhi.n	8025ba8 <mg_strcmp+0x4e>
  return 0;
 8025b94:	2000      	movs	r0, #0
 8025b96:	e001      	b.n	8025b9c <mg_strcmp+0x42>
    if (c1 < c2) return -1;
 8025b98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8025b9c:	b004      	add	sp, #16
 8025b9e:	4770      	bx	lr
    if (c1 > c2) return 1;
 8025ba0:	2001      	movs	r0, #1
 8025ba2:	e7fb      	b.n	8025b9c <mg_strcmp+0x42>
  if (i < str1.len) return 1;
 8025ba4:	2001      	movs	r0, #1
 8025ba6:	e7f9      	b.n	8025b9c <mg_strcmp+0x42>
  if (i < str2.len) return -1;
 8025ba8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025bac:	e7f6      	b.n	8025b9c <mg_strcmp+0x42>

08025bae <mg_strcasecmp>:
int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8025bae:	b530      	push	{r4, r5, lr}
 8025bb0:	b085      	sub	sp, #20
 8025bb2:	ac04      	add	r4, sp, #16
 8025bb4:	e904 0003 	stmdb	r4, {r0, r1}
 8025bb8:	4669      	mov	r1, sp
 8025bba:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8025bbe:	2400      	movs	r4, #0
  while (i < str1.len && i < str2.len) {
 8025bc0:	9b03      	ldr	r3, [sp, #12]
 8025bc2:	42a3      	cmp	r3, r4
 8025bc4:	d910      	bls.n	8025be8 <mg_strcasecmp+0x3a>
 8025bc6:	9a01      	ldr	r2, [sp, #4]
 8025bc8:	42a2      	cmp	r2, r4
 8025bca:	d90d      	bls.n	8025be8 <mg_strcasecmp+0x3a>
    int c1 = mg_tolc(str1.buf[i]);
 8025bcc:	9b02      	ldr	r3, [sp, #8]
 8025bce:	5d18      	ldrb	r0, [r3, r4]
 8025bd0:	f7fc ff02 	bl	80229d8 <mg_tolc>
 8025bd4:	4605      	mov	r5, r0
    int c2 = mg_tolc(str2.buf[i]);
 8025bd6:	9b00      	ldr	r3, [sp, #0]
 8025bd8:	5d18      	ldrb	r0, [r3, r4]
 8025bda:	f7fc fefd 	bl	80229d8 <mg_tolc>
    if (c1 < c2) return -1;
 8025bde:	4285      	cmp	r5, r0
 8025be0:	db09      	blt.n	8025bf6 <mg_strcasecmp+0x48>
    if (c1 > c2) return 1;
 8025be2:	dc0c      	bgt.n	8025bfe <mg_strcasecmp+0x50>
    i++;
 8025be4:	3401      	adds	r4, #1
 8025be6:	e7eb      	b.n	8025bc0 <mg_strcasecmp+0x12>
  if (i < str1.len) return 1;
 8025be8:	42a3      	cmp	r3, r4
 8025bea:	d80a      	bhi.n	8025c02 <mg_strcasecmp+0x54>
  if (i < str2.len) return -1;
 8025bec:	9b01      	ldr	r3, [sp, #4]
 8025bee:	42a3      	cmp	r3, r4
 8025bf0:	d809      	bhi.n	8025c06 <mg_strcasecmp+0x58>
  return 0;
 8025bf2:	2000      	movs	r0, #0
 8025bf4:	e001      	b.n	8025bfa <mg_strcasecmp+0x4c>
    if (c1 < c2) return -1;
 8025bf6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8025bfa:	b005      	add	sp, #20
 8025bfc:	bd30      	pop	{r4, r5, pc}
    if (c1 > c2) return 1;
 8025bfe:	2001      	movs	r0, #1
 8025c00:	e7fb      	b.n	8025bfa <mg_strcasecmp+0x4c>
  if (i < str1.len) return 1;
 8025c02:	2001      	movs	r0, #1
 8025c04:	e7f9      	b.n	8025bfa <mg_strcasecmp+0x4c>
  if (i < str2.len) return -1;
 8025c06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025c0a:	e7f6      	b.n	8025bfa <mg_strcasecmp+0x4c>

08025c0c <mg_http_parse>:
int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8025c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025c10:	b086      	sub	sp, #24
 8025c12:	4604      	mov	r4, r0
 8025c14:	4616      	mov	r6, r2
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8025c16:	f7fe fb25 	bl	8024264 <mg_http_get_request_len>
 8025c1a:	4607      	mov	r7, r0
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8025c1c:	b1d4      	cbz	r4, 8025c54 <mg_http_parse+0x48>
 8025c1e:	1825      	adds	r5, r4, r0
  memset(hm, 0, sizeof(*hm));
 8025c20:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8025c24:	2100      	movs	r1, #0
 8025c26:	4630      	mov	r0, r6
 8025c28:	f006 fdea 	bl	802c800 <memset>
  if (req_len <= 0) return req_len;
 8025c2c:	2f00      	cmp	r7, #0
 8025c2e:	f340 808d 	ble.w	8025d4c <mg_http_parse+0x140>
  hm->message.buf = hm->head.buf = (char *) s;
 8025c32:	f8c6 4208 	str.w	r4, [r6, #520]	@ 0x208
 8025c36:	f8c6 4210 	str.w	r4, [r6, #528]	@ 0x210
  hm->body.buf = (char *) end;
 8025c3a:	f8c6 5200 	str.w	r5, [r6, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8025c3e:	46b8      	mov	r8, r7
 8025c40:	f8c6 720c 	str.w	r7, [r6, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 8025c44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025c48:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
 8025c4c:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  hm->method.buf = (char *) s;
 8025c50:	6034      	str	r4, [r6, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8025c52:	e005      	b.n	8025c60 <mg_http_parse+0x54>
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8025c54:	4625      	mov	r5, r4
 8025c56:	e7e3      	b.n	8025c20 <mg_http_parse+0x14>
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8025c58:	4414      	add	r4, r2
 8025c5a:	6873      	ldr	r3, [r6, #4]
 8025c5c:	4413      	add	r3, r2
 8025c5e:	6073      	str	r3, [r6, #4]
 8025c60:	42ac      	cmp	r4, r5
 8025c62:	d208      	bcs.n	8025c76 <mg_http_parse+0x6a>
 8025c64:	4629      	mov	r1, r5
 8025c66:	4620      	mov	r0, r4
 8025c68:	f7fb fbf0 	bl	802144c <clen>
 8025c6c:	4602      	mov	r2, r0
 8025c6e:	2800      	cmp	r0, #0
 8025c70:	d1f2      	bne.n	8025c58 <mg_http_parse+0x4c>
 8025c72:	e000      	b.n	8025c76 <mg_http_parse+0x6a>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8025c74:	3401      	adds	r4, #1
 8025c76:	42ac      	cmp	r4, r5
 8025c78:	d202      	bcs.n	8025c80 <mg_http_parse+0x74>
 8025c7a:	7823      	ldrb	r3, [r4, #0]
 8025c7c:	2b20      	cmp	r3, #32
 8025c7e:	d0f9      	beq.n	8025c74 <mg_http_parse+0x68>
  hm->uri.buf = (char *) s;
 8025c80:	60b4      	str	r4, [r6, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 8025c82:	e003      	b.n	8025c8c <mg_http_parse+0x80>
 8025c84:	4414      	add	r4, r2
 8025c86:	68f3      	ldr	r3, [r6, #12]
 8025c88:	4413      	add	r3, r2
 8025c8a:	60f3      	str	r3, [r6, #12]
 8025c8c:	42ac      	cmp	r4, r5
 8025c8e:	d208      	bcs.n	8025ca2 <mg_http_parse+0x96>
 8025c90:	4629      	mov	r1, r5
 8025c92:	4620      	mov	r0, r4
 8025c94:	f7fb fbda 	bl	802144c <clen>
 8025c98:	4602      	mov	r2, r0
 8025c9a:	2800      	cmp	r0, #0
 8025c9c:	d1f2      	bne.n	8025c84 <mg_http_parse+0x78>
 8025c9e:	e000      	b.n	8025ca2 <mg_http_parse+0x96>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8025ca0:	3401      	adds	r4, #1
 8025ca2:	42ac      	cmp	r4, r5
 8025ca4:	d202      	bcs.n	8025cac <mg_http_parse+0xa0>
 8025ca6:	7823      	ldrb	r3, [r4, #0]
 8025ca8:	2b20      	cmp	r3, #32
 8025caa:	d0f9      	beq.n	8025ca0 <mg_http_parse+0x94>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8025cac:	f106 0218 	add.w	r2, r6, #24
 8025cb0:	4629      	mov	r1, r5
 8025cb2:	4620      	mov	r0, r4
 8025cb4:	f7fb fc11 	bl	80214da <skiptorn>
 8025cb8:	4682      	mov	sl, r0
 8025cba:	2800      	cmp	r0, #0
 8025cbc:	f000 8082 	beq.w	8025dc4 <mg_http_parse+0x1b8>
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8025cc0:	f8d6 9008 	ldr.w	r9, [r6, #8]
 8025cc4:	68f4      	ldr	r4, [r6, #12]
 8025cc6:	4622      	mov	r2, r4
 8025cc8:	213f      	movs	r1, #63	@ 0x3f
 8025cca:	4648      	mov	r0, r9
 8025ccc:	f7ea fa98 	bl	8010200 <memchr>
 8025cd0:	b138      	cbz	r0, 8025ce2 <mg_http_parse+0xd6>
    hm->query.buf = (char *) qs + 1;
 8025cd2:	1c42      	adds	r2, r0, #1
 8025cd4:	6132      	str	r2, [r6, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 8025cd6:	444c      	add	r4, r9
 8025cd8:	1aa4      	subs	r4, r4, r2
 8025cda:	6174      	str	r4, [r6, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8025cdc:	eba0 0309 	sub.w	r3, r0, r9
 8025ce0:	60f3      	str	r3, [r6, #12]
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8025ce2:	6873      	ldr	r3, [r6, #4]
 8025ce4:	2b00      	cmp	r3, #0
 8025ce6:	d06f      	beq.n	8025dc8 <mg_http_parse+0x1bc>
 8025ce8:	68f3      	ldr	r3, [r6, #12]
 8025cea:	2b00      	cmp	r3, #0
 8025cec:	d06f      	beq.n	8025dce <mg_http_parse+0x1c2>
  if (!mg_http_parse_headers(s, end, hm->headers,
 8025cee:	231e      	movs	r3, #30
 8025cf0:	f106 0220 	add.w	r2, r6, #32
 8025cf4:	4629      	mov	r1, r5
 8025cf6:	4650      	mov	r0, sl
 8025cf8:	f7fb fc17 	bl	802152a <mg_http_parse_headers>
 8025cfc:	2800      	cmp	r0, #0
 8025cfe:	d069      	beq.n	8025dd4 <mg_http_parse+0x1c8>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8025d00:	4939      	ldr	r1, [pc, #228]	@ (8025de8 <mg_http_parse+0x1dc>)
 8025d02:	4630      	mov	r0, r6
 8025d04:	f7fe fada 	bl	80242bc <mg_http_get_header>
 8025d08:	b160      	cbz	r0, 8025d24 <mg_http_parse+0x118>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8025d0a:	f506 7201 	add.w	r2, r6, #516	@ 0x204
 8025d0e:	e9d0 0100 	ldrd	r0, r1, [r0]
 8025d12:	f7fe fa55 	bl	80241c0 <mg_to_size_t>
 8025d16:	2800      	cmp	r0, #0
 8025d18:	d05f      	beq.n	8025dda <mg_http_parse+0x1ce>
    hm->message.len = (size_t) req_len + hm->body.len;
 8025d1a:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8025d1e:	4443      	add	r3, r8
 8025d20:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 8025d24:	2205      	movs	r2, #5
 8025d26:	4931      	ldr	r1, [pc, #196]	@ (8025dec <mg_http_parse+0x1e0>)
 8025d28:	6830      	ldr	r0, [r6, #0]
 8025d2a:	f7fb fb41 	bl	80213b0 <mg_ncasecmp>
 8025d2e:	4604      	mov	r4, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8025d30:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8025d34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8025d38:	d00c      	beq.n	8025d54 <mg_http_parse+0x148>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8025d3a:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8025d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8025d42:	d029      	beq.n	8025d98 <mg_http_parse+0x18c>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8025d44:	f8d6 3214 	ldr.w	r3, [r6, #532]	@ 0x214
 8025d48:	4598      	cmp	r8, r3
 8025d4a:	d849      	bhi.n	8025de0 <mg_http_parse+0x1d4>
}
 8025d4c:	4638      	mov	r0, r7
 8025d4e:	b006      	add	sp, #24
 8025d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8025d54:	2800      	cmp	r0, #0
 8025d56:	d0f0      	beq.n	8025d3a <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8025d58:	466d      	mov	r5, sp
 8025d5a:	4925      	ldr	r1, [pc, #148]	@ (8025df0 <mg_http_parse+0x1e4>)
 8025d5c:	4628      	mov	r0, r5
 8025d5e:	f7ff fe25 	bl	80259ac <mg_str_s>
 8025d62:	e895 000c 	ldmia.w	r5, {r2, r3}
 8025d66:	e896 0003 	ldmia.w	r6, {r0, r1}
 8025d6a:	f7ff ff20 	bl	8025bae <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8025d6e:	2800      	cmp	r0, #0
 8025d70:	d0e3      	beq.n	8025d3a <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 8025d72:	ad02      	add	r5, sp, #8
 8025d74:	491f      	ldr	r1, [pc, #124]	@ (8025df4 <mg_http_parse+0x1e8>)
 8025d76:	4628      	mov	r0, r5
 8025d78:	f7ff fe18 	bl	80259ac <mg_str_s>
 8025d7c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8025d80:	e896 0003 	ldmia.w	r6, {r0, r1}
 8025d84:	f7ff ff13 	bl	8025bae <mg_strcasecmp>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8025d88:	2800      	cmp	r0, #0
 8025d8a:	d0d6      	beq.n	8025d3a <mg_http_parse+0x12e>
    hm->body.len = 0;
 8025d8c:	2300      	movs	r3, #0
 8025d8e:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8025d92:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 8025d96:	e7d0      	b.n	8025d3a <mg_http_parse+0x12e>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8025d98:	2c00      	cmp	r4, #0
 8025d9a:	d1d3      	bne.n	8025d44 <mg_http_parse+0x138>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8025d9c:	ac04      	add	r4, sp, #16
 8025d9e:	4916      	ldr	r1, [pc, #88]	@ (8025df8 <mg_http_parse+0x1ec>)
 8025da0:	4620      	mov	r0, r4
 8025da2:	f7ff fe03 	bl	80259ac <mg_str_s>
 8025da6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8025daa:	f106 0108 	add.w	r1, r6, #8
 8025dae:	c903      	ldmia	r1, {r0, r1}
 8025db0:	f7ff fefd 	bl	8025bae <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8025db4:	2800      	cmp	r0, #0
 8025db6:	d1c5      	bne.n	8025d44 <mg_http_parse+0x138>
    hm->body.len = 0;
 8025db8:	2300      	movs	r3, #0
 8025dba:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8025dbe:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 8025dc2:	e7bf      	b.n	8025d44 <mg_http_parse+0x138>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8025dc4:	2700      	movs	r7, #0
 8025dc6:	e7c1      	b.n	8025d4c <mg_http_parse+0x140>
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8025dc8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8025dcc:	e7be      	b.n	8025d4c <mg_http_parse+0x140>
 8025dce:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8025dd2:	e7bb      	b.n	8025d4c <mg_http_parse+0x140>
    return -1;  // error when parsing
 8025dd4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8025dd8:	e7b8      	b.n	8025d4c <mg_http_parse+0x140>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8025dda:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8025dde:	e7b5      	b.n	8025d4c <mg_http_parse+0x140>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8025de0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8025de4:	e7b2      	b.n	8025d4c <mg_http_parse+0x140>
 8025de6:	bf00      	nop
 8025de8:	0803b388 	.word	0x0803b388
 8025dec:	0803b398 	.word	0x0803b398
 8025df0:	08038ea0 	.word	0x08038ea0
 8025df4:	08038154 	.word	0x08038154
 8025df8:	0803b3a0 	.word	0x0803b3a0

08025dfc <mg_match>:
bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8025dfc:	b530      	push	{r4, r5, lr}
 8025dfe:	b085      	sub	sp, #20
 8025e00:	ac04      	add	r4, sp, #16
 8025e02:	e904 0003 	stmdb	r4, {r0, r1}
 8025e06:	4669      	mov	r1, sp
 8025e08:	e881 000c 	stmia.w	r1, {r2, r3}
 8025e0c:	9808      	ldr	r0, [sp, #32]
  if (caps) caps->buf = NULL, caps->len = 0;
 8025e0e:	b110      	cbz	r0, 8025e16 <mg_match+0x1a>
 8025e10:	2300      	movs	r3, #0
 8025e12:	6003      	str	r3, [r0, #0]
 8025e14:	6043      	str	r3, [r0, #4]
      ni = i++, nj = j + 1;
 8025e16:	2400      	movs	r4, #0
 8025e18:	46a4      	mov	ip, r4
 8025e1a:	4621      	mov	r1, r4
 8025e1c:	4623      	mov	r3, r4
 8025e1e:	e028      	b.n	8025e72 <mg_match+0x76>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8025e20:	9a02      	ldr	r2, [sp, #8]
 8025e22:	440a      	add	r2, r1
 8025e24:	6002      	str	r2, [r0, #0]
 8025e26:	2201      	movs	r2, #1
 8025e28:	6042      	str	r2, [r0, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8025e2a:	2200      	movs	r2, #0
 8025e2c:	6082      	str	r2, [r0, #8]
 8025e2e:	60c2      	str	r2, [r0, #12]
 8025e30:	3008      	adds	r0, #8
      i++, j++;
 8025e32:	3301      	adds	r3, #1
 8025e34:	3101      	adds	r1, #1
 8025e36:	e01c      	b.n	8025e72 <mg_match+0x76>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8025e38:	429a      	cmp	r2, r3
 8025e3a:	d905      	bls.n	8025e48 <mg_match+0x4c>
 8025e3c:	9a00      	ldr	r2, [sp, #0]
 8025e3e:	5cd2      	ldrb	r2, [r2, r3]
 8025e40:	2a2a      	cmp	r2, #42	@ 0x2a
 8025e42:	d045      	beq.n	8025ed0 <mg_match+0xd4>
 8025e44:	2a23      	cmp	r2, #35	@ 0x23
 8025e46:	d043      	beq.n	8025ed0 <mg_match+0xd4>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8025e48:	2c00      	cmp	r4, #0
 8025e4a:	d065      	beq.n	8025f18 <mg_match+0x11c>
 8025e4c:	9b03      	ldr	r3, [sp, #12]
 8025e4e:	42a3      	cmp	r3, r4
 8025e50:	d365      	bcc.n	8025f1e <mg_match+0x122>
 8025e52:	9b00      	ldr	r3, [sp, #0]
 8025e54:	f813 300c 	ldrb.w	r3, [r3, ip]
 8025e58:	2b23      	cmp	r3, #35	@ 0x23
 8025e5a:	d003      	beq.n	8025e64 <mg_match+0x68>
 8025e5c:	9b02      	ldr	r3, [sp, #8]
 8025e5e:	5c5b      	ldrb	r3, [r3, r1]
 8025e60:	2b2f      	cmp	r3, #47	@ 0x2f
 8025e62:	d05e      	beq.n	8025f22 <mg_match+0x126>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8025e64:	2800      	cmp	r0, #0
 8025e66:	d046      	beq.n	8025ef6 <mg_match+0xfa>
 8025e68:	6803      	ldr	r3, [r0, #0]
 8025e6a:	2b00      	cmp	r3, #0
 8025e6c:	d03c      	beq.n	8025ee8 <mg_match+0xec>
      i = ni, j = nj;
 8025e6e:	4621      	mov	r1, r4
 8025e70:	4663      	mov	r3, ip
  while (i < p.len || j < s.len) {
 8025e72:	9a01      	ldr	r2, [sp, #4]
 8025e74:	429a      	cmp	r2, r3
 8025e76:	d802      	bhi.n	8025e7e <mg_match+0x82>
 8025e78:	9d03      	ldr	r5, [sp, #12]
 8025e7a:	428d      	cmp	r5, r1
 8025e7c:	d941      	bls.n	8025f02 <mg_match+0x106>
    if (i < p.len && j < s.len &&
 8025e7e:	429a      	cmp	r2, r3
 8025e80:	d9da      	bls.n	8025e38 <mg_match+0x3c>
 8025e82:	9d03      	ldr	r5, [sp, #12]
 8025e84:	428d      	cmp	r5, r1
 8025e86:	d9d7      	bls.n	8025e38 <mg_match+0x3c>
        (p.buf[i] == '?' ||
 8025e88:	9d00      	ldr	r5, [sp, #0]
 8025e8a:	f815 e003 	ldrb.w	lr, [r5, r3]
    if (i < p.len && j < s.len &&
 8025e8e:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 8025e92:	d009      	beq.n	8025ea8 <mg_match+0xac>
        (p.buf[i] == '?' ||
 8025e94:	f1be 0f2a 	cmp.w	lr, #42	@ 0x2a
 8025e98:	d0ce      	beq.n	8025e38 <mg_match+0x3c>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8025e9a:	f1be 0f23 	cmp.w	lr, #35	@ 0x23
 8025e9e:	d0cb      	beq.n	8025e38 <mg_match+0x3c>
 8025ea0:	9d02      	ldr	r5, [sp, #8]
 8025ea2:	5c6d      	ldrb	r5, [r5, r1]
 8025ea4:	45ae      	cmp	lr, r5
 8025ea6:	d1c7      	bne.n	8025e38 <mg_match+0x3c>
      if (caps == NULL) {
 8025ea8:	2800      	cmp	r0, #0
 8025eaa:	d0c2      	beq.n	8025e32 <mg_match+0x36>
      } else if (p.buf[i] == '?') {
 8025eac:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 8025eb0:	d0b6      	beq.n	8025e20 <mg_match+0x24>
      } else if (caps->buf != NULL && caps->len == 0) {
 8025eb2:	6802      	ldr	r2, [r0, #0]
 8025eb4:	2a00      	cmp	r2, #0
 8025eb6:	d0bc      	beq.n	8025e32 <mg_match+0x36>
 8025eb8:	6845      	ldr	r5, [r0, #4]
 8025eba:	2d00      	cmp	r5, #0
 8025ebc:	d1b9      	bne.n	8025e32 <mg_match+0x36>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8025ebe:	9d02      	ldr	r5, [sp, #8]
 8025ec0:	440d      	add	r5, r1
 8025ec2:	1aad      	subs	r5, r5, r2
 8025ec4:	6045      	str	r5, [r0, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8025ec6:	2200      	movs	r2, #0
 8025ec8:	60c2      	str	r2, [r0, #12]
 8025eca:	6082      	str	r2, [r0, #8]
 8025ecc:	3008      	adds	r0, #8
 8025ece:	e7b0      	b.n	8025e32 <mg_match+0x36>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8025ed0:	b108      	cbz	r0, 8025ed6 <mg_match+0xda>
 8025ed2:	6802      	ldr	r2, [r0, #0]
 8025ed4:	b11a      	cbz	r2, 8025ede <mg_match+0xe2>
      ni = i++, nj = j + 1;
 8025ed6:	1c4c      	adds	r4, r1, #1
 8025ed8:	469c      	mov	ip, r3
 8025eda:	3301      	adds	r3, #1
 8025edc:	e7c9      	b.n	8025e72 <mg_match+0x76>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8025ede:	6042      	str	r2, [r0, #4]
 8025ee0:	9a02      	ldr	r2, [sp, #8]
 8025ee2:	440a      	add	r2, r1
 8025ee4:	6002      	str	r2, [r0, #0]
 8025ee6:	e7f6      	b.n	8025ed6 <mg_match+0xda>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8025ee8:	6843      	ldr	r3, [r0, #4]
 8025eea:	b93b      	cbnz	r3, 8025efc <mg_match+0x100>
        caps--, caps->len = 0;  // Restart previous cap
 8025eec:	3808      	subs	r0, #8
 8025eee:	6043      	str	r3, [r0, #4]
      i = ni, j = nj;
 8025ef0:	4621      	mov	r1, r4
 8025ef2:	4663      	mov	r3, ip
 8025ef4:	e7bd      	b.n	8025e72 <mg_match+0x76>
 8025ef6:	4621      	mov	r1, r4
 8025ef8:	4663      	mov	r3, ip
 8025efa:	e7ba      	b.n	8025e72 <mg_match+0x76>
 8025efc:	4621      	mov	r1, r4
 8025efe:	4663      	mov	r3, ip
 8025f00:	e7b7      	b.n	8025e72 <mg_match+0x76>
  if (caps && caps->buf && caps->len == 0) {
 8025f02:	b180      	cbz	r0, 8025f26 <mg_match+0x12a>
 8025f04:	6803      	ldr	r3, [r0, #0]
 8025f06:	b183      	cbz	r3, 8025f2a <mg_match+0x12e>
 8025f08:	6842      	ldr	r2, [r0, #4]
 8025f0a:	b982      	cbnz	r2, 8025f2e <mg_match+0x132>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8025f0c:	9a02      	ldr	r2, [sp, #8]
 8025f0e:	440a      	add	r2, r1
 8025f10:	1ad3      	subs	r3, r2, r3
 8025f12:	6043      	str	r3, [r0, #4]
  return true;
 8025f14:	2001      	movs	r0, #1
 8025f16:	e000      	b.n	8025f1a <mg_match+0x11e>
      return false;
 8025f18:	2000      	movs	r0, #0
}
 8025f1a:	b005      	add	sp, #20
 8025f1c:	bd30      	pop	{r4, r5, pc}
      return false;
 8025f1e:	2000      	movs	r0, #0
 8025f20:	e7fb      	b.n	8025f1a <mg_match+0x11e>
 8025f22:	2000      	movs	r0, #0
 8025f24:	e7f9      	b.n	8025f1a <mg_match+0x11e>
  return true;
 8025f26:	2001      	movs	r0, #1
 8025f28:	e7f7      	b.n	8025f1a <mg_match+0x11e>
 8025f2a:	2001      	movs	r0, #1
 8025f2c:	e7f5      	b.n	8025f1a <mg_match+0x11e>
 8025f2e:	2001      	movs	r0, #1
 8025f30:	e7f3      	b.n	8025f1a <mg_match+0x11e>

08025f32 <mg_span>:
bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8025f32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025f36:	b085      	sub	sp, #20
 8025f38:	ac04      	add	r4, sp, #16
 8025f3a:	e904 0003 	stmdb	r4, {r0, r1}
 8025f3e:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
  if (s.len == 0 || s.buf == NULL) {
 8025f42:	b379      	cbz	r1, 8025fa4 <mg_span+0x72>
 8025f44:	4690      	mov	r8, r2
 8025f46:	461f      	mov	r7, r3
 8025f48:	460d      	mov	r5, r1
 8025f4a:	9e02      	ldr	r6, [sp, #8]
 8025f4c:	b366      	cbz	r6, 8025fa8 <mg_span+0x76>
    size_t len = 0;
 8025f4e:	2400      	movs	r4, #0
 8025f50:	e000      	b.n	8025f54 <mg_span+0x22>
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 8025f52:	3401      	adds	r4, #1
 8025f54:	42a5      	cmp	r5, r4
 8025f56:	d902      	bls.n	8025f5e <mg_span+0x2c>
 8025f58:	5d31      	ldrb	r1, [r6, r4]
 8025f5a:	4281      	cmp	r1, r0
 8025f5c:	d1f9      	bne.n	8025f52 <mg_span+0x20>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 8025f5e:	f1b8 0f00 	cmp.w	r8, #0
 8025f62:	d009      	beq.n	8025f78 <mg_span+0x46>
 8025f64:	46e9      	mov	r9, sp
 8025f66:	4622      	mov	r2, r4
 8025f68:	4631      	mov	r1, r6
 8025f6a:	4648      	mov	r0, r9
 8025f6c:	f7ff fd2a 	bl	80259c4 <mg_str_n>
 8025f70:	e899 0003 	ldmia.w	r9, {r0, r1}
 8025f74:	e888 0003 	stmia.w	r8, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 8025f78:	b187      	cbz	r7, 8025f9c <mg_span+0x6a>
 8025f7a:	46e8      	mov	r8, sp
 8025f7c:	1b2a      	subs	r2, r5, r4
 8025f7e:	1931      	adds	r1, r6, r4
 8025f80:	4640      	mov	r0, r8
 8025f82:	f7ff fd1f 	bl	80259c4 <mg_str_n>
 8025f86:	e898 0003 	ldmia.w	r8, {r0, r1}
 8025f8a:	e887 0003 	stmia.w	r7, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8025f8e:	42a5      	cmp	r5, r4
 8025f90:	d904      	bls.n	8025f9c <mg_span+0x6a>
 8025f92:	4603      	mov	r3, r0
 8025f94:	3301      	adds	r3, #1
 8025f96:	603b      	str	r3, [r7, #0]
 8025f98:	1e4b      	subs	r3, r1, #1
 8025f9a:	607b      	str	r3, [r7, #4]
    return true;
 8025f9c:	2001      	movs	r0, #1
}
 8025f9e:	b005      	add	sp, #20
 8025fa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;  // Empty string, nothing to span - fail
 8025fa4:	2000      	movs	r0, #0
 8025fa6:	e7fa      	b.n	8025f9e <mg_span+0x6c>
 8025fa8:	2000      	movs	r0, #0
 8025faa:	e7f8      	b.n	8025f9e <mg_span+0x6c>

08025fac <mg_http_var>:
struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8025fac:	b082      	sub	sp, #8
 8025fae:	b510      	push	{r4, lr}
 8025fb0:	b08a      	sub	sp, #40	@ 0x28
 8025fb2:	4604      	mov	r4, r0
 8025fb4:	f10d 0c08 	add.w	ip, sp, #8
 8025fb8:	e88c 0006 	stmia.w	ip, {r1, r2}
 8025fbc:	930d      	str	r3, [sp, #52]	@ 0x34
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 8025fbe:	2200      	movs	r2, #0
 8025fc0:	4611      	mov	r1, r2
 8025fc2:	f7ff fcff 	bl	80259c4 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8025fc6:	ab02      	add	r3, sp, #8
 8025fc8:	2226      	movs	r2, #38	@ 0x26
 8025fca:	9200      	str	r2, [sp, #0]
 8025fcc:	aa08      	add	r2, sp, #32
 8025fce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025fd2:	f7ff ffae 	bl	8025f32 <mg_span>
 8025fd6:	b1c8      	cbz	r0, 802600c <mg_http_var+0x60>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8025fd8:	233d      	movs	r3, #61	@ 0x3d
 8025fda:	9300      	str	r3, [sp, #0]
 8025fdc:	ab04      	add	r3, sp, #16
 8025fde:	aa06      	add	r2, sp, #24
 8025fe0:	a90a      	add	r1, sp, #40	@ 0x28
 8025fe2:	e911 0003 	ldmdb	r1, {r0, r1}
 8025fe6:	f7ff ffa4 	bl	8025f32 <mg_span>
 8025fea:	2800      	cmp	r0, #0
 8025fec:	d0eb      	beq.n	8025fc6 <mg_http_var+0x1a>
 8025fee:	9a07      	ldr	r2, [sp, #28]
 8025ff0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025ff2:	4293      	cmp	r3, r2
 8025ff4:	d1e7      	bne.n	8025fc6 <mg_http_var+0x1a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 8025ff6:	9906      	ldr	r1, [sp, #24]
 8025ff8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8025ffa:	f7fb f9d9 	bl	80213b0 <mg_ncasecmp>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8025ffe:	2800      	cmp	r0, #0
 8026000:	d1e1      	bne.n	8025fc6 <mg_http_var+0x1a>
      result = v;
 8026002:	ab04      	add	r3, sp, #16
 8026004:	e893 0003 	ldmia.w	r3, {r0, r1}
 8026008:	e884 0003 	stmia.w	r4, {r0, r1}
}
 802600c:	4620      	mov	r0, r4
 802600e:	b00a      	add	sp, #40	@ 0x28
 8026010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026014:	b002      	add	sp, #8
 8026016:	4770      	bx	lr

08026018 <guess_content_type>:
static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8026018:	b530      	push	{r4, r5, lr}
 802601a:	b08d      	sub	sp, #52	@ 0x34
 802601c:	4604      	mov	r4, r0
 802601e:	a802      	add	r0, sp, #8
 8026020:	e880 0006 	stmia.w	r0, {r1, r2}
  struct mg_str entry, k, v, s = mg_str(extra);
 8026024:	4619      	mov	r1, r3
 8026026:	a804      	add	r0, sp, #16
 8026028:	f7ff fcc0 	bl	80259ac <mg_str_s>
  size_t i = 0;
 802602c:	2300      	movs	r3, #0
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 802602e:	e000      	b.n	8026032 <guess_content_type+0x1a>
 8026030:	3301      	adds	r3, #1
 8026032:	9803      	ldr	r0, [sp, #12]
 8026034:	4298      	cmp	r0, r3
 8026036:	d906      	bls.n	8026046 <guess_content_type+0x2e>
 8026038:	1ac1      	subs	r1, r0, r3
 802603a:	9a02      	ldr	r2, [sp, #8]
 802603c:	440a      	add	r2, r1
 802603e:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8026042:	2a2e      	cmp	r2, #46	@ 0x2e
 8026044:	d1f4      	bne.n	8026030 <guess_content_type+0x18>
  path.buf += path.len - i;
 8026046:	1ac0      	subs	r0, r0, r3
 8026048:	9a02      	ldr	r2, [sp, #8]
 802604a:	4402      	add	r2, r0
 802604c:	9202      	str	r2, [sp, #8]
  path.len = i;
 802604e:	9303      	str	r3, [sp, #12]
  while (mg_span(s, &entry, &s, ',')) {
 8026050:	ab04      	add	r3, sp, #16
 8026052:	222c      	movs	r2, #44	@ 0x2c
 8026054:	9200      	str	r2, [sp, #0]
 8026056:	aa0a      	add	r2, sp, #40	@ 0x28
 8026058:	e893 0003 	ldmia.w	r3, {r0, r1}
 802605c:	f7ff ff69 	bl	8025f32 <mg_span>
 8026060:	b1c0      	cbz	r0, 8026094 <guess_content_type+0x7c>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 8026062:	233d      	movs	r3, #61	@ 0x3d
 8026064:	9300      	str	r3, [sp, #0]
 8026066:	ab06      	add	r3, sp, #24
 8026068:	aa08      	add	r2, sp, #32
 802606a:	a90c      	add	r1, sp, #48	@ 0x30
 802606c:	e911 0003 	ldmdb	r1, {r0, r1}
 8026070:	f7ff ff5f 	bl	8025f32 <mg_span>
 8026074:	2800      	cmp	r0, #0
 8026076:	d0eb      	beq.n	8026050 <guess_content_type+0x38>
 8026078:	ab08      	add	r3, sp, #32
 802607a:	cb0c      	ldmia	r3, {r2, r3}
 802607c:	a902      	add	r1, sp, #8
 802607e:	c903      	ldmia	r1, {r0, r1}
 8026080:	f7ff fd6b 	bl	8025b5a <mg_strcmp>
 8026084:	2800      	cmp	r0, #0
 8026086:	d1e3      	bne.n	8026050 <guess_content_type+0x38>
 8026088:	ab06      	add	r3, sp, #24
 802608a:	e893 0003 	ldmia.w	r3, {r0, r1}
 802608e:	e884 0003 	stmia.w	r4, {r0, r1}
 8026092:	e01c      	b.n	80260ce <guess_content_type+0xb6>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8026094:	2500      	movs	r5, #0
 8026096:	4b0f      	ldr	r3, [pc, #60]	@ (80260d4 <guess_content_type+0xbc>)
 8026098:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
 802609c:	b19b      	cbz	r3, 80260c6 <guess_content_type+0xae>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 802609e:	4b0d      	ldr	r3, [pc, #52]	@ (80260d4 <guess_content_type+0xbc>)
 80260a0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80260a4:	cb0c      	ldmia	r3, {r2, r3}
 80260a6:	a902      	add	r1, sp, #8
 80260a8:	c903      	ldmia	r1, {r0, r1}
 80260aa:	f7ff fd56 	bl	8025b5a <mg_strcmp>
 80260ae:	b108      	cbz	r0, 80260b4 <guess_content_type+0x9c>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 80260b0:	3502      	adds	r5, #2
 80260b2:	e7f0      	b.n	8026096 <guess_content_type+0x7e>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 80260b4:	3501      	adds	r5, #1
 80260b6:	4b07      	ldr	r3, [pc, #28]	@ (80260d4 <guess_content_type+0xbc>)
 80260b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80260bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80260c0:	e884 0003 	stmia.w	r4, {r0, r1}
 80260c4:	e003      	b.n	80260ce <guess_content_type+0xb6>
  return mg_str("text/plain; charset=utf-8");
 80260c6:	4904      	ldr	r1, [pc, #16]	@ (80260d8 <guess_content_type+0xc0>)
 80260c8:	4620      	mov	r0, r4
 80260ca:	f7ff fc6f 	bl	80259ac <mg_str_s>
}
 80260ce:	4620      	mov	r0, r4
 80260d0:	b00d      	add	sp, #52	@ 0x34
 80260d2:	bd30      	pop	{r4, r5, pc}
 80260d4:	0803d8a0 	.word	0x0803d8a0
 80260d8:	0803b3a4 	.word	0x0803b3a4

080260dc <getrange>:
static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 80260dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80260de:	b087      	sub	sp, #28
 80260e0:	4604      	mov	r4, r0
 80260e2:	460e      	mov	r6, r1
 80260e4:	4617      	mov	r7, r2
  for (i = 0; i + 6 < s->len; i++) {
 80260e6:	2500      	movs	r5, #0
 80260e8:	1da8      	adds	r0, r5, #6
 80260ea:	6863      	ldr	r3, [r4, #4]
 80260ec:	4298      	cmp	r0, r3
 80260ee:	d23c      	bcs.n	802616a <getrange+0x8e>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 80260f0:	6821      	ldr	r1, [r4, #0]
 80260f2:	1b5b      	subs	r3, r3, r5
 80260f4:	1f9a      	subs	r2, r3, #6
 80260f6:	4401      	add	r1, r0
 80260f8:	a804      	add	r0, sp, #16
 80260fa:	f7ff fc63 	bl	80259c4 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 80260fe:	6820      	ldr	r0, [r4, #0]
 8026100:	2206      	movs	r2, #6
 8026102:	491b      	ldr	r1, [pc, #108]	@ (8026170 <getrange+0x94>)
 8026104:	4428      	add	r0, r5
 8026106:	f006 fb51 	bl	802c7ac <memcmp>
 802610a:	b108      	cbz	r0, 8026110 <getrange+0x34>
  for (i = 0; i + 6 < s->len; i++) {
 802610c:	3501      	adds	r5, #1
 802610e:	e7eb      	b.n	80260e8 <getrange+0xc>
    if (mg_span(v, &k, &v, '-')) {
 8026110:	ab04      	add	r3, sp, #16
 8026112:	222d      	movs	r2, #45	@ 0x2d
 8026114:	9200      	str	r2, [sp, #0]
 8026116:	aa02      	add	r2, sp, #8
 8026118:	e893 0003 	ldmia.w	r3, {r0, r1}
 802611c:	f7ff ff09 	bl	8025f32 <mg_span>
 8026120:	b1c0      	cbz	r0, 8026154 <getrange+0x78>
      if (mg_to_size_t(k, a)) numparsed++;
 8026122:	4632      	mov	r2, r6
 8026124:	ab02      	add	r3, sp, #8
 8026126:	e893 0003 	ldmia.w	r3, {r0, r1}
 802612a:	f7fe f849 	bl	80241c0 <mg_to_size_t>
 802612e:	b928      	cbnz	r0, 802613c <getrange+0x60>
  size_t i, numparsed = 0;
 8026130:	2400      	movs	r4, #0
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8026132:	9b05      	ldr	r3, [sp, #20]
 8026134:	b923      	cbnz	r3, 8026140 <getrange+0x64>
}
 8026136:	4620      	mov	r0, r4
 8026138:	b007      	add	sp, #28
 802613a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (mg_to_size_t(k, a)) numparsed++;
 802613c:	2401      	movs	r4, #1
 802613e:	e7f8      	b.n	8026132 <getrange+0x56>
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8026140:	463a      	mov	r2, r7
 8026142:	ab06      	add	r3, sp, #24
 8026144:	e913 0003 	ldmdb	r3, {r0, r1}
 8026148:	f7fe f83a 	bl	80241c0 <mg_to_size_t>
 802614c:	2800      	cmp	r0, #0
 802614e:	d0f2      	beq.n	8026136 <getrange+0x5a>
 8026150:	3401      	adds	r4, #1
 8026152:	e7f0      	b.n	8026136 <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 8026154:	4632      	mov	r2, r6
 8026156:	ab06      	add	r3, sp, #24
 8026158:	e913 0003 	ldmdb	r3, {r0, r1}
 802615c:	f7fe f830 	bl	80241c0 <mg_to_size_t>
 8026160:	b908      	cbnz	r0, 8026166 <getrange+0x8a>
  size_t i, numparsed = 0;
 8026162:	2400      	movs	r4, #0
 8026164:	e7e7      	b.n	8026136 <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 8026166:	2401      	movs	r4, #1
    break;
 8026168:	e7e5      	b.n	8026136 <getrange+0x5a>
  size_t i, numparsed = 0;
 802616a:	2400      	movs	r4, #0
 802616c:	e7e3      	b.n	8026136 <getrange+0x5a>
 802616e:	bf00      	nop
 8026170:	0803b3c0 	.word	0x0803b3c0

08026174 <mg_http_serve_file>:
                        const struct mg_http_serve_opts *opts) {
 8026174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026178:	b0e7      	sub	sp, #412	@ 0x19c
 802617a:	4606      	mov	r6, r0
 802617c:	460f      	mov	r7, r1
 802617e:	4614      	mov	r4, r2
 8026180:	461d      	mov	r5, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8026182:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8026186:	f1b8 0f00 	cmp.w	r8, #0
 802618a:	d036      	beq.n	80261fa <mg_http_serve_file+0x86>
  size_t size = 0;
 802618c:	2300      	movs	r3, #0
 802618e:	932d      	str	r3, [sp, #180]	@ 0xb4
  time_t mtime = 0;
 8026190:	2200      	movs	r2, #0
 8026192:	2300      	movs	r3, #0
 8026194:	e9cd 232a 	strd	r2, r3, [sp, #168]	@ 0xa8
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8026198:	f50d 79bc 	add.w	r9, sp, #376	@ 0x178
 802619c:	4621      	mov	r1, r4
 802619e:	4648      	mov	r0, r9
 80261a0:	f7ff fc04 	bl	80259ac <mg_str_s>
 80261a4:	68eb      	ldr	r3, [r5, #12]
 80261a6:	e899 0006 	ldmia.w	r9, {r1, r2}
 80261aa:	a828      	add	r0, sp, #160	@ 0xa0
 80261ac:	f7ff ff34 	bl	8026018 <guess_content_type>
  if (path != NULL) {
 80261b0:	2c00      	cmp	r4, #0
 80261b2:	d054      	beq.n	802625e <mg_http_serve_file+0xea>
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 80261b4:	4995      	ldr	r1, [pc, #596]	@ (802640c <mg_http_serve_file+0x298>)
 80261b6:	4638      	mov	r0, r7
 80261b8:	f7fe f880 	bl	80242bc <mg_http_get_header>
    if (ae != NULL) {
 80261bc:	2800      	cmp	r0, #0
 80261be:	d043      	beq.n	8026248 <mg_http_serve_file+0xd4>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 80261c0:	6802      	ldr	r2, [r0, #0]
 80261c2:	6841      	ldr	r1, [r0, #4]
 80261c4:	4892      	ldr	r0, [pc, #584]	@ (8026410 <mg_http_serve_file+0x29c>)
 80261c6:	f7ff fb0f 	bl	80257e8 <mg_mprintf>
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 80261ca:	4683      	mov	fp, r0
 80261cc:	b1d8      	cbz	r0, 8026206 <mg_http_serve_file+0x92>
 80261ce:	4991      	ldr	r1, [pc, #580]	@ (8026414 <mg_http_serve_file+0x2a0>)
 80261d0:	f006 fb96 	bl	802c900 <strstr>
 80261d4:	4681      	mov	r9, r0
 80261d6:	b1d0      	cbz	r0, 802620e <mg_http_serve_file+0x9a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 80261d8:	4623      	mov	r3, r4
 80261da:	4a8f      	ldr	r2, [pc, #572]	@ (8026418 <mg_http_serve_file+0x2a4>)
 80261dc:	2180      	movs	r1, #128	@ 0x80
 80261de:	a82e      	add	r0, sp, #184	@ 0xb8
 80261e0:	f7fe fd46 	bl	8024c70 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 80261e4:	2201      	movs	r2, #1
 80261e6:	a92e      	add	r1, sp, #184	@ 0xb8
 80261e8:	4640      	mov	r0, r8
 80261ea:	f7fd ffad 	bl	8024148 <mg_fs_open>
        if (fd != NULL) gzip = true, path = tmp;
 80261ee:	4681      	mov	r9, r0
 80261f0:	b130      	cbz	r0, 8026200 <mg_http_serve_file+0x8c>
 80261f2:	f04f 0a01 	mov.w	sl, #1
 80261f6:	ac2e      	add	r4, sp, #184	@ 0xb8
 80261f8:	e00b      	b.n	8026212 <mg_http_serve_file+0x9e>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80261fa:	f8df 8248 	ldr.w	r8, [pc, #584]	@ 8026444 <mg_http_serve_file+0x2d0>
 80261fe:	e7c5      	b.n	802618c <mg_http_serve_file+0x18>
  bool gzip = false;
 8026200:	f04f 0a00 	mov.w	sl, #0
 8026204:	e005      	b.n	8026212 <mg_http_serve_file+0x9e>
  struct mg_fd *fd = NULL;
 8026206:	4681      	mov	r9, r0
  bool gzip = false;
 8026208:	f04f 0a00 	mov.w	sl, #0
 802620c:	e001      	b.n	8026212 <mg_http_serve_file+0x9e>
 802620e:	f04f 0a00 	mov.w	sl, #0
      free(ae_);
 8026212:	4658      	mov	r0, fp
 8026214:	f7f5 ff82 	bl	801c11c <vPortFree>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8026218:	f1b9 0f00 	cmp.w	r9, #0
 802621c:	d016      	beq.n	802624c <mg_http_serve_file+0xd8>
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 802621e:	f8d8 3000 	ldr.w	r3, [r8]
 8026222:	aa2a      	add	r2, sp, #168	@ 0xa8
 8026224:	a92d      	add	r1, sp, #180	@ 0xb4
 8026226:	4620      	mov	r0, r4
 8026228:	4798      	blx	r3
 802622a:	2800      	cmp	r0, #0
 802622c:	d138      	bne.n	80262a0 <mg_http_serve_file+0x12c>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 802622e:	4b7b      	ldr	r3, [pc, #492]	@ (802641c <mg_http_serve_file+0x2a8>)
 8026230:	68aa      	ldr	r2, [r5, #8]
 8026232:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8026236:	4630      	mov	r0, r6
 8026238:	f7ff fa2e 	bl	8025698 <mg_http_reply>
    mg_fs_close(fd);
 802623c:	4648      	mov	r0, r9
 802623e:	f7fd ff9c 	bl	802417a <mg_fs_close>
}
 8026242:	b067      	add	sp, #412	@ 0x19c
 8026244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool gzip = false;
 8026248:	f04f 0a00 	mov.w	sl, #0
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 802624c:	2201      	movs	r2, #1
 802624e:	4621      	mov	r1, r4
 8026250:	4640      	mov	r0, r8
 8026252:	f7fd ff79 	bl	8024148 <mg_fs_open>
  if (fd == NULL && opts->page404 != NULL) {
 8026256:	4681      	mov	r9, r0
 8026258:	2800      	cmp	r0, #0
 802625a:	d1e0      	bne.n	802621e <mg_http_serve_file+0xaa>
 802625c:	e002      	b.n	8026264 <mg_http_serve_file+0xf0>
  struct mg_fd *fd = NULL;
 802625e:	46a1      	mov	r9, r4
  bool gzip = false;
 8026260:	f04f 0a00 	mov.w	sl, #0
  if (fd == NULL && opts->page404 != NULL) {
 8026264:	6929      	ldr	r1, [r5, #16]
 8026266:	b1b9      	cbz	r1, 8026298 <mg_http_serve_file+0x124>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8026268:	2201      	movs	r2, #1
 802626a:	4640      	mov	r0, r8
 802626c:	f7fd ff6c 	bl	8024148 <mg_fs_open>
 8026270:	4681      	mov	r9, r0
    path = opts->page404;
 8026272:	692c      	ldr	r4, [r5, #16]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8026274:	f50d 7bc0 	add.w	fp, sp, #384	@ 0x180
 8026278:	4621      	mov	r1, r4
 802627a:	4658      	mov	r0, fp
 802627c:	f7ff fb96 	bl	80259ac <mg_str_s>
 8026280:	68eb      	ldr	r3, [r5, #12]
 8026282:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8026286:	a80a      	add	r0, sp, #40	@ 0x28
 8026288:	f7ff fec6 	bl	8026018 <guess_content_type>
 802628c:	ab28      	add	r3, sp, #160	@ 0xa0
 802628e:	aa0a      	add	r2, sp, #40	@ 0x28
 8026290:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026294:	e883 0003 	stmia.w	r3, {r0, r1}
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8026298:	f1b9 0f00 	cmp.w	r9, #0
 802629c:	d1bf      	bne.n	802621e <mg_http_serve_file+0xaa>
 802629e:	e7c6      	b.n	802622e <mg_http_serve_file+0xba>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 80262a0:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 80262a4:	e9cd 2300 	strd	r2, r3, [sp]
 80262a8:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80262aa:	2140      	movs	r1, #64	@ 0x40
 80262ac:	a84e      	add	r0, sp, #312	@ 0x138
 80262ae:	f7ff fa35 	bl	802571c <mg_http_etag>
 80262b2:	b190      	cbz	r0, 80262da <mg_http_serve_file+0x166>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 80262b4:	495a      	ldr	r1, [pc, #360]	@ (8026420 <mg_http_serve_file+0x2ac>)
 80262b6:	4638      	mov	r0, r7
 80262b8:	f7fe f800 	bl	80242bc <mg_http_get_header>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 80262bc:	4604      	mov	r4, r0
 80262be:	b160      	cbz	r0, 80262da <mg_http_serve_file+0x166>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 80262c0:	f50d 7bc4 	add.w	fp, sp, #392	@ 0x188
 80262c4:	a94e      	add	r1, sp, #312	@ 0x138
 80262c6:	4658      	mov	r0, fp
 80262c8:	f7ff fb70 	bl	80259ac <mg_str_s>
 80262cc:	e89b 000c 	ldmia.w	fp, {r2, r3}
 80262d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80262d4:	f7ff fc6b 	bl	8025bae <mg_strcasecmp>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 80262d8:	b340      	cbz	r0, 802632c <mg_http_serve_file+0x1b8>
    size_t r1 = 0, r2 = 0, cl = size;
 80262da:	f04f 0b00 	mov.w	fp, #0
 80262de:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 80262e2:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80262e6:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 80262e8:	494e      	ldr	r1, [pc, #312]	@ (8026424 <mg_http_serve_file+0x2b0>)
 80262ea:	4638      	mov	r0, r7
 80262ec:	f7fd ffe6 	bl	80242bc <mg_http_get_header>
    range[0] = '\0';
 80262f0:	f88d b03c 	strb.w	fp, [sp, #60]	@ 0x3c
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 80262f4:	2800      	cmp	r0, #0
 80262f6:	d041      	beq.n	802637c <mg_http_serve_file+0x208>
 80262f8:	aa0e      	add	r2, sp, #56	@ 0x38
 80262fa:	a90d      	add	r1, sp, #52	@ 0x34
 80262fc:	f7ff feee 	bl	80260dc <getrange>
 8026300:	2800      	cmp	r0, #0
 8026302:	dd71      	ble.n	80263e8 <mg_http_serve_file+0x274>
      if (n == 1) r2 = cl - 1;
 8026304:	2801      	cmp	r0, #1
 8026306:	d01c      	beq.n	8026342 <mg_http_serve_file+0x1ce>
      if (r1 > r2 || r2 >= cl) {
 8026308:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802630a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802630c:	429a      	cmp	r2, r3
 802630e:	d801      	bhi.n	8026314 <mg_http_serve_file+0x1a0>
 8026310:	42a3      	cmp	r3, r4
 8026312:	d319      	bcc.n	8026348 <mg_http_serve_file+0x1d4>
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8026314:	2400      	movs	r4, #0
 8026316:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8026318:	9300      	str	r3, [sp, #0]
 802631a:	9401      	str	r4, [sp, #4]
 802631c:	4a42      	ldr	r2, [pc, #264]	@ (8026428 <mg_http_serve_file+0x2b4>)
 802631e:	2164      	movs	r1, #100	@ 0x64
 8026320:	a80f      	add	r0, sp, #60	@ 0x3c
 8026322:	f7fe fca5 	bl	8024c70 <mg_snprintf>
        status = 416;
 8026326:	f44f 78d0 	mov.w	r8, #416	@ 0x1a0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 802632a:	e029      	b.n	8026380 <mg_http_serve_file+0x20c>
    mg_fs_close(fd);
 802632c:	4648      	mov	r0, r9
 802632e:	f7fd ff24 	bl	802417a <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8026332:	4b3e      	ldr	r3, [pc, #248]	@ (802642c <mg_http_serve_file+0x2b8>)
 8026334:	68aa      	ldr	r2, [r5, #8]
 8026336:	f44f 7198 	mov.w	r1, #304	@ 0x130
 802633a:	4630      	mov	r0, r6
 802633c:	f7ff f9ac 	bl	8025698 <mg_http_reply>
 8026340:	e77f      	b.n	8026242 <mg_http_serve_file+0xce>
      if (n == 1) r2 = cl - 1;
 8026342:	1e63      	subs	r3, r4, #1
 8026344:	930e      	str	r3, [sp, #56]	@ 0x38
 8026346:	e7df      	b.n	8026308 <mg_http_serve_file+0x194>
        cl = r2 - r1 + 1;
 8026348:	1a9b      	subs	r3, r3, r2
 802634a:	1c5c      	adds	r4, r3, #1
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 802634c:	1911      	adds	r1, r2, r4
 802634e:	3901      	subs	r1, #1
        mg_snprintf(range, sizeof(range),
 8026350:	2300      	movs	r3, #0
 8026352:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8026354:	9004      	str	r0, [sp, #16]
 8026356:	9305      	str	r3, [sp, #20]
 8026358:	9102      	str	r1, [sp, #8]
 802635a:	9303      	str	r3, [sp, #12]
 802635c:	9200      	str	r2, [sp, #0]
 802635e:	9301      	str	r3, [sp, #4]
 8026360:	4a33      	ldr	r2, [pc, #204]	@ (8026430 <mg_http_serve_file+0x2bc>)
 8026362:	2164      	movs	r1, #100	@ 0x64
 8026364:	a80f      	add	r0, sp, #60	@ 0x3c
 8026366:	f7fe fc83 	bl	8024c70 <mg_snprintf>
        fs->sk(fd->fd, r1);
 802636a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 802636e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8026370:	f8d9 0000 	ldr.w	r0, [r9]
 8026374:	4798      	blx	r3
        status = 206;
 8026376:	f04f 08ce 	mov.w	r8, #206	@ 0xce
 802637a:	e001      	b.n	8026380 <mg_http_serve_file+0x20c>
    int n, status = 200;
 802637c:	f04f 08c8 	mov.w	r8, #200	@ 0xc8
    mg_printf(c,
 8026380:	4640      	mov	r0, r8
 8026382:	f7fb f93b 	bl	80215fc <mg_http_status_code_str>
 8026386:	4603      	mov	r3, r0
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 8026388:	9829      	ldr	r0, [sp, #164]	@ 0xa4
    mg_printf(c,
 802638a:	f8dd c0a0 	ldr.w	ip, [sp, #160]	@ 0xa0
 802638e:	46a6      	mov	lr, r4
 8026390:	f1ba 0f00 	cmp.w	sl, #0
 8026394:	d02b      	beq.n	80263ee <mg_http_serve_file+0x27a>
 8026396:	4927      	ldr	r1, [pc, #156]	@ (8026434 <mg_http_serve_file+0x2c0>)
              range, opts->extra_headers ? opts->extra_headers : "");
 8026398:	68aa      	ldr	r2, [r5, #8]
    mg_printf(c,
 802639a:	b352      	cbz	r2, 80263f2 <mg_http_serve_file+0x27e>
 802639c:	9208      	str	r2, [sp, #32]
 802639e:	aa0f      	add	r2, sp, #60	@ 0x3c
 80263a0:	9207      	str	r2, [sp, #28]
 80263a2:	9106      	str	r1, [sp, #24]
 80263a4:	f8cd e010 	str.w	lr, [sp, #16]
 80263a8:	2200      	movs	r2, #0
 80263aa:	9205      	str	r2, [sp, #20]
 80263ac:	aa4e      	add	r2, sp, #312	@ 0x138
 80263ae:	9202      	str	r2, [sp, #8]
 80263b0:	f8cd c004 	str.w	ip, [sp, #4]
 80263b4:	9000      	str	r0, [sp, #0]
 80263b6:	4642      	mov	r2, r8
 80263b8:	491f      	ldr	r1, [pc, #124]	@ (8026438 <mg_http_serve_file+0x2c4>)
 80263ba:	4630      	mov	r0, r6
 80263bc:	f7ff f946 	bl	802564c <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 80263c0:	ad64      	add	r5, sp, #400	@ 0x190
 80263c2:	491e      	ldr	r1, [pc, #120]	@ (802643c <mg_http_serve_file+0x2c8>)
 80263c4:	4628      	mov	r0, r5
 80263c6:	f7ff faf1 	bl	80259ac <mg_str_s>
 80263ca:	e895 000c 	ldmia.w	r5, {r2, r3}
 80263ce:	e897 0003 	ldmia.w	r7, {r0, r1}
 80263d2:	f7ff fbec 	bl	8025bae <mg_strcasecmp>
 80263d6:	b170      	cbz	r0, 80263f6 <mg_http_serve_file+0x282>
      c->pfn = static_cb;
 80263d8:	4b19      	ldr	r3, [pc, #100]	@ (8026440 <mg_http_serve_file+0x2cc>)
 80263da:	f8c6 3080 	str.w	r3, [r6, #128]	@ 0x80
      c->pfn_data = fd;
 80263de:	f8c6 9084 	str.w	r9, [r6, #132]	@ 0x84
      *clp = cl;
 80263e2:	f8c6 40a4 	str.w	r4, [r6, #164]	@ 0xa4
}
 80263e6:	e72c      	b.n	8026242 <mg_http_serve_file+0xce>
    int n, status = 200;
 80263e8:	f04f 08c8 	mov.w	r8, #200	@ 0xc8
 80263ec:	e7c8      	b.n	8026380 <mg_http_serve_file+0x20c>
    mg_printf(c,
 80263ee:	490f      	ldr	r1, [pc, #60]	@ (802642c <mg_http_serve_file+0x2b8>)
 80263f0:	e7d2      	b.n	8026398 <mg_http_serve_file+0x224>
 80263f2:	4a0e      	ldr	r2, [pc, #56]	@ (802642c <mg_http_serve_file+0x2b8>)
 80263f4:	e7d2      	b.n	802639c <mg_http_serve_file+0x228>
      c->is_resp = 0;
 80263f6:	f896 30ad 	ldrb.w	r3, [r6, #173]	@ 0xad
 80263fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80263fe:	f886 30ad 	strb.w	r3, [r6, #173]	@ 0xad
      mg_fs_close(fd);
 8026402:	4648      	mov	r0, r9
 8026404:	f7fd feb9 	bl	802417a <mg_fs_close>
 8026408:	e71b      	b.n	8026242 <mg_http_serve_file+0xce>
 802640a:	bf00      	nop
 802640c:	0803b3e4 	.word	0x0803b3e4
 8026410:	0803b2f0 	.word	0x0803b2f0
 8026414:	0803c554 	.word	0x0803c554
 8026418:	0803b3f4 	.word	0x0803b3f4
 802641c:	0803b3fc 	.word	0x0803b3fc
 8026420:	0803b408 	.word	0x0803b408
 8026424:	0803b418 	.word	0x0803b418
 8026428:	0803b420 	.word	0x0803b420
 802642c:	08038678 	.word	0x08038678
 8026430:	0803b440 	.word	0x0803b440
 8026434:	0803b3c8 	.word	0x0803b3c8
 8026438:	0803b468 	.word	0x0803b468
 802643c:	0803b4b8 	.word	0x0803b4b8
 8026440:	080285e1 	.word	0x080285e1
 8026444:	20000140 	.word	0x20000140

08026448 <mg_str_to_num>:
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8026448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802644c:	b083      	sub	sp, #12
 802644e:	ac02      	add	r4, sp, #8
 8026450:	e904 0003 	stmdb	r4, {r0, r1}
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8026454:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8026456:	3901      	subs	r1, #1
 8026458:	2907      	cmp	r1, #7
 802645a:	f200 811f 	bhi.w	802669c <mg_str_to_num+0x254>
 802645e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8026462:	0008      	.short	0x0008
 8026464:	011d0020 	.word	0x011d0020
 8026468:	011d000c 	.word	0x011d000c
 802646c:	011d011d 	.word	0x011d011d
 8026470:	001c      	.short	0x001c
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8026472:	20ff      	movs	r0, #255	@ 0xff
 8026474:	f04f 0e00 	mov.w	lr, #0
 8026478:	e003      	b.n	8026482 <mg_str_to_num+0x3a>
 802647a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802647e:	f04f 0e00 	mov.w	lr, #0
  if (base == 0 && str.len >= 2) {
 8026482:	b9e2      	cbnz	r2, 80264be <mg_str_to_num+0x76>
 8026484:	9901      	ldr	r1, [sp, #4]
 8026486:	2901      	cmp	r1, #1
 8026488:	d924      	bls.n	80264d4 <mg_str_to_num+0x8c>
    if (str.buf[i] == '0') {
 802648a:	9a00      	ldr	r2, [sp, #0]
 802648c:	7811      	ldrb	r1, [r2, #0]
 802648e:	2930      	cmp	r1, #48	@ 0x30
 8026490:	d00c      	beq.n	80264ac <mg_str_to_num+0x64>
  size_t i = 0, ndigits = 0;
 8026492:	f04f 0c00 	mov.w	ip, #0
      base = 10;
 8026496:	220a      	movs	r2, #10
 8026498:	e013      	b.n	80264c2 <mg_str_to_num+0x7a>
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 802649a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802649e:	4686      	mov	lr, r0
 80264a0:	e7ef      	b.n	8026482 <mg_str_to_num+0x3a>
 80264a2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80264a6:	f04f 0e00 	mov.w	lr, #0
 80264aa:	e7ea      	b.n	8026482 <mg_str_to_num+0x3a>
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 80264ac:	7852      	ldrb	r2, [r2, #1]
 80264ae:	2a62      	cmp	r2, #98	@ 0x62
 80264b0:	d013      	beq.n	80264da <mg_str_to_num+0x92>
 80264b2:	2a78      	cmp	r2, #120	@ 0x78
 80264b4:	d015      	beq.n	80264e2 <mg_str_to_num+0x9a>
      i++;
 80264b6:	f04f 0c01 	mov.w	ip, #1
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 80264ba:	220a      	movs	r2, #10
 80264bc:	e001      	b.n	80264c2 <mg_str_to_num+0x7a>
  size_t i = 0, ndigits = 0;
 80264be:	f04f 0c00 	mov.w	ip, #0
  switch (base) {
 80264c2:	2a0a      	cmp	r2, #10
 80264c4:	d042      	beq.n	802654c <mg_str_to_num+0x104>
 80264c6:	2a10      	cmp	r2, #16
 80264c8:	f000 80cb 	beq.w	8026662 <mg_str_to_num+0x21a>
 80264cc:	2a02      	cmp	r2, #2
 80264ce:	d00c      	beq.n	80264ea <mg_str_to_num+0xa2>
 80264d0:	2000      	movs	r0, #0
 80264d2:	e0e4      	b.n	802669e <mg_str_to_num+0x256>
  size_t i = 0, ndigits = 0;
 80264d4:	f04f 0c00 	mov.w	ip, #0
 80264d8:	e7f3      	b.n	80264c2 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 80264da:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 80264de:	4662      	mov	r2, ip
 80264e0:	e7ef      	b.n	80264c2 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 80264e2:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 80264e6:	2210      	movs	r2, #16
 80264e8:	e7eb      	b.n	80264c2 <mg_str_to_num+0x7a>
  switch (base) {
 80264ea:	2200      	movs	r2, #0
 80264ec:	4611      	mov	r1, r2
 80264ee:	4614      	mov	r4, r2
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 80264f0:	9d01      	ldr	r5, [sp, #4]
 80264f2:	4565      	cmp	r5, ip
 80264f4:	f240 80b9 	bls.w	802666a <mg_str_to_num+0x222>
 80264f8:	9d00      	ldr	r5, [sp, #0]
 80264fa:	f815 600c 	ldrb.w	r6, [r5, ip]
 80264fe:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 8026502:	b2ff      	uxtb	r7, r7
 8026504:	2f01      	cmp	r7, #1
 8026506:	f200 80b0 	bhi.w	802666a <mg_str_to_num+0x222>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 802650a:	3e30      	subs	r6, #48	@ 0x30
 802650c:	ea4f 78e6 	mov.w	r8, r6, asr #31
        if (result > max / 2) return false;  // Overflow
 8026510:	ea4f 0950 	mov.w	r9, r0, lsr #1
 8026514:	ea49 79ce 	orr.w	r9, r9, lr, lsl #31
 8026518:	ea4f 075e 	mov.w	r7, lr, lsr #1
 802651c:	4591      	cmp	r9, r2
 802651e:	418f      	sbcs	r7, r1
 8026520:	f0c0 80c0 	bcc.w	80266a4 <mg_str_to_num+0x25c>
        result *= 2;
 8026524:	1892      	adds	r2, r2, r2
 8026526:	4149      	adcs	r1, r1
        if (result > max - digit) return false;  // Overflow
 8026528:	ebb0 0a06 	subs.w	sl, r0, r6
 802652c:	eb6e 0708 	sbc.w	r7, lr, r8
 8026530:	4592      	cmp	sl, r2
 8026532:	418f      	sbcs	r7, r1
 8026534:	f0c0 80b8 	bcc.w	80266a8 <mg_str_to_num+0x260>
        result += digit;
 8026538:	18b2      	adds	r2, r6, r2
 802653a:	eb48 0101 	adc.w	r1, r8, r1
        i++, ndigits++;
 802653e:	f10c 0c01 	add.w	ip, ip, #1
 8026542:	3401      	adds	r4, #1
 8026544:	e7d4      	b.n	80264f0 <mg_str_to_num+0xa8>
        if (result > max / 10) return false;  // Overflow
 8026546:	f04f 0901 	mov.w	r9, #1
 802654a:	e016      	b.n	802657a <mg_str_to_num+0x132>
  switch (base) {
 802654c:	2200      	movs	r2, #0
 802654e:	4611      	mov	r1, r2
 8026550:	4614      	mov	r4, r2
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8026552:	9d01      	ldr	r5, [sp, #4]
 8026554:	4565      	cmp	r5, ip
 8026556:	f240 8088 	bls.w	802666a <mg_str_to_num+0x222>
 802655a:	9d00      	ldr	r5, [sp, #0]
 802655c:	f815 700c 	ldrb.w	r7, [r5, ip]
 8026560:	2f2f      	cmp	r7, #47	@ 0x2f
 8026562:	f240 8082 	bls.w	802666a <mg_str_to_num+0x222>
 8026566:	2f39      	cmp	r7, #57	@ 0x39
 8026568:	d87f      	bhi.n	802666a <mg_str_to_num+0x222>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 802656a:	3f30      	subs	r7, #48	@ 0x30
 802656c:	ea4f 78e7 	mov.w	r8, r7, asr #31
        if (result > max / 10) return false;  // Overflow
 8026570:	f04f 0900 	mov.w	r9, #0
 8026574:	eb10 060e 	adds.w	r6, r0, lr
 8026578:	d2e5      	bcs.n	8026546 <mg_str_to_num+0xfe>
 802657a:	444e      	add	r6, r9
 802657c:	4d51      	ldr	r5, [pc, #324]	@ (80266c4 <mg_str_to_num+0x27c>)
 802657e:	fba5 9b06 	umull	r9, fp, r5, r6
 8026582:	f02b 0903 	bic.w	r9, fp, #3
 8026586:	eb09 099b 	add.w	r9, r9, fp, lsr #2
 802658a:	eba6 0609 	sub.w	r6, r6, r9
 802658e:	1b86      	subs	r6, r0, r6
 8026590:	f16e 0b00 	sbc.w	fp, lr, #0
 8026594:	f04f 39cc 	mov.w	r9, #3435973836	@ 0xcccccccc
 8026598:	fb09 f906 	mul.w	r9, r9, r6
 802659c:	fb05 990b 	mla	r9, r5, fp, r9
 80265a0:	fba6 6a05 	umull	r6, sl, r6, r5
 80265a4:	44d1      	add	r9, sl
 80265a6:	0876      	lsrs	r6, r6, #1
 80265a8:	ea46 76c9 	orr.w	r6, r6, r9, lsl #31
 80265ac:	ea4f 0959 	mov.w	r9, r9, lsr #1
 80265b0:	4296      	cmp	r6, r2
 80265b2:	eb79 0901 	sbcs.w	r9, r9, r1
 80265b6:	d379      	bcc.n	80266ac <mg_str_to_num+0x264>
        result *= 10;
 80265b8:	ea4f 0981 	mov.w	r9, r1, lsl #2
 80265bc:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
 80265c0:	0096      	lsls	r6, r2, #2
 80265c2:	18b2      	adds	r2, r6, r2
 80265c4:	eb41 0909 	adc.w	r9, r1, r9
 80265c8:	1892      	adds	r2, r2, r2
 80265ca:	eb49 0909 	adc.w	r9, r9, r9
        if (result > max - digit) return false;  // Overflow
 80265ce:	ebb0 0a07 	subs.w	sl, r0, r7
 80265d2:	eb6e 0108 	sbc.w	r1, lr, r8
 80265d6:	4592      	cmp	sl, r2
 80265d8:	eb71 0109 	sbcs.w	r1, r1, r9
 80265dc:	d368      	bcc.n	80266b0 <mg_str_to_num+0x268>
        result += digit;
 80265de:	18ba      	adds	r2, r7, r2
 80265e0:	eb48 0109 	adc.w	r1, r8, r9
        i++, ndigits++;
 80265e4:	f10c 0c01 	add.w	ip, ip, #1
 80265e8:	3401      	adds	r4, #1
 80265ea:	e7b2      	b.n	8026552 <mg_str_to_num+0x10a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80265ec:	f1a6 0741 	sub.w	r7, r6, #65	@ 0x41
 80265f0:	b2ff      	uxtb	r7, r7
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80265f2:	2f05      	cmp	r7, #5
 80265f4:	d82c      	bhi.n	8026650 <mg_str_to_num+0x208>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80265f6:	3e37      	subs	r6, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80265f8:	46b0      	mov	r8, r6
 80265fa:	17f6      	asrs	r6, r6, #31
        if (result > max / 16) return false;  // Overflow
 80265fc:	ea4f 1910 	mov.w	r9, r0, lsr #4
 8026600:	ea49 790e 	orr.w	r9, r9, lr, lsl #28
 8026604:	ea4f 171e 	mov.w	r7, lr, lsr #4
 8026608:	4591      	cmp	r9, r2
 802660a:	418f      	sbcs	r7, r1
 802660c:	d352      	bcc.n	80266b4 <mg_str_to_num+0x26c>
        result *= 16;
 802660e:	0109      	lsls	r1, r1, #4
 8026610:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8026614:	0112      	lsls	r2, r2, #4
        if (result > max - digit) return false;  // Overflow
 8026616:	ebb0 0908 	subs.w	r9, r0, r8
 802661a:	eb6e 0706 	sbc.w	r7, lr, r6
 802661e:	4591      	cmp	r9, r2
 8026620:	418f      	sbcs	r7, r1
 8026622:	d349      	bcc.n	80266b8 <mg_str_to_num+0x270>
        result += digit;
 8026624:	eb18 0202 	adds.w	r2, r8, r2
 8026628:	eb46 0101 	adc.w	r1, r6, r1
        i++, ndigits++;
 802662c:	f10c 0c01 	add.w	ip, ip, #1
 8026630:	3401      	adds	r4, #1
      while (i < str.len) {
 8026632:	9d01      	ldr	r5, [sp, #4]
 8026634:	4565      	cmp	r5, ip
 8026636:	d918      	bls.n	802666a <mg_str_to_num+0x222>
        char c = str.buf[i];
 8026638:	9d00      	ldr	r5, [sp, #0]
 802663a:	f815 600c 	ldrb.w	r6, [r5, ip]
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 802663e:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 8026642:	b2ff      	uxtb	r7, r7
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8026644:	2f09      	cmp	r7, #9
 8026646:	d8d1      	bhi.n	80265ec <mg_str_to_num+0x1a4>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8026648:	3e30      	subs	r6, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 802664a:	46b0      	mov	r8, r6
 802664c:	17f6      	asrs	r6, r6, #31
        if (digit == (uint64_t) ~0) break;
 802664e:	e7d5      	b.n	80265fc <mg_str_to_num+0x1b4>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8026650:	f1a6 0761 	sub.w	r7, r6, #97	@ 0x61
 8026654:	b2ff      	uxtb	r7, r7
                                                  : (uint64_t) ~0;
 8026656:	2f05      	cmp	r7, #5
 8026658:	d807      	bhi.n	802666a <mg_str_to_num+0x222>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 802665a:	3e57      	subs	r6, #87	@ 0x57
                                                  : (uint64_t) ~0;
 802665c:	46b0      	mov	r8, r6
 802665e:	17f6      	asrs	r6, r6, #31
        if (digit == (uint64_t) ~0) break;
 8026660:	e7cc      	b.n	80265fc <mg_str_to_num+0x1b4>
  switch (base) {
 8026662:	2200      	movs	r2, #0
 8026664:	4611      	mov	r1, r2
 8026666:	4614      	mov	r4, r2
 8026668:	e7e3      	b.n	8026632 <mg_str_to_num+0x1ea>
  if (ndigits == 0) return false;
 802666a:	b33c      	cbz	r4, 80266bc <mg_str_to_num+0x274>
  if (i != str.len) return false;
 802666c:	9801      	ldr	r0, [sp, #4]
 802666e:	4560      	cmp	r0, ip
 8026670:	d126      	bne.n	80266c0 <mg_str_to_num+0x278>
  if (val_len == 1) {
 8026672:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8026674:	2801      	cmp	r0, #1
 8026676:	d009      	beq.n	802668c <mg_str_to_num+0x244>
  } else if (val_len == 2) {
 8026678:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802667a:	2802      	cmp	r0, #2
 802667c:	d008      	beq.n	8026690 <mg_str_to_num+0x248>
  } else if (val_len == 4) {
 802667e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8026680:	2804      	cmp	r0, #4
 8026682:	d008      	beq.n	8026696 <mg_str_to_num+0x24e>
    *((uint64_t *) val) = (uint64_t) result;
 8026684:	601a      	str	r2, [r3, #0]
 8026686:	6059      	str	r1, [r3, #4]
  return true;
 8026688:	2001      	movs	r0, #1
 802668a:	e008      	b.n	802669e <mg_str_to_num+0x256>
    *((uint8_t *) val) = (uint8_t) result;
 802668c:	701a      	strb	r2, [r3, #0]
 802668e:	e006      	b.n	802669e <mg_str_to_num+0x256>
    *((uint16_t *) val) = (uint16_t) result;
 8026690:	801a      	strh	r2, [r3, #0]
  return true;
 8026692:	2001      	movs	r0, #1
 8026694:	e003      	b.n	802669e <mg_str_to_num+0x256>
    *((uint32_t *) val) = (uint32_t) result;
 8026696:	601a      	str	r2, [r3, #0]
  return true;
 8026698:	2001      	movs	r0, #1
 802669a:	e000      	b.n	802669e <mg_str_to_num+0x256>
  switch (base) {
 802669c:	2000      	movs	r0, #0
}
 802669e:	b003      	add	sp, #12
 80266a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (result > max / 2) return false;  // Overflow
 80266a4:	2000      	movs	r0, #0
 80266a6:	e7fa      	b.n	802669e <mg_str_to_num+0x256>
        if (result > max - digit) return false;  // Overflow
 80266a8:	2000      	movs	r0, #0
 80266aa:	e7f8      	b.n	802669e <mg_str_to_num+0x256>
        if (result > max / 10) return false;  // Overflow
 80266ac:	2000      	movs	r0, #0
 80266ae:	e7f6      	b.n	802669e <mg_str_to_num+0x256>
        if (result > max - digit) return false;  // Overflow
 80266b0:	2000      	movs	r0, #0
 80266b2:	e7f4      	b.n	802669e <mg_str_to_num+0x256>
        if (result > max / 16) return false;  // Overflow
 80266b4:	2000      	movs	r0, #0
 80266b6:	e7f2      	b.n	802669e <mg_str_to_num+0x256>
        if (result > max - digit) return false;  // Overflow
 80266b8:	2000      	movs	r0, #0
 80266ba:	e7f0      	b.n	802669e <mg_str_to_num+0x256>
  if (ndigits == 0) return false;
 80266bc:	2000      	movs	r0, #0
 80266be:	e7ee      	b.n	802669e <mg_str_to_num+0x256>
  if (i != str.len) return false;
 80266c0:	2000      	movs	r0, #0
 80266c2:	e7ec      	b.n	802669e <mg_str_to_num+0x256>
 80266c4:	cccccccd 	.word	0xcccccccd

080266c8 <mg_url_decode>:
                  int is_form_url_encoded) {
 80266c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266cc:	b087      	sub	sp, #28
 80266ce:	4606      	mov	r6, r0
 80266d0:	460f      	mov	r7, r1
 80266d2:	4693      	mov	fp, r2
 80266d4:	4699      	mov	r9, r3
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 80266d6:	2400      	movs	r4, #0
 80266d8:	4623      	mov	r3, r4
 80266da:	e027      	b.n	802672c <mg_url_decode+0x64>
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 80266dc:	f103 0802 	add.w	r8, r3, #2
 80266e0:	45b8      	cmp	r8, r7
 80266e2:	d241      	bcs.n	8026768 <mg_url_decode+0xa0>
 80266e4:	3301      	adds	r3, #1
 80266e6:	18f2      	adds	r2, r6, r3
 80266e8:	9203      	str	r2, [sp, #12]
 80266ea:	5cf0      	ldrb	r0, [r6, r3]
 80266ec:	f7fa fe82 	bl	80213f4 <isx>
 80266f0:	2800      	cmp	r0, #0
 80266f2:	d03c      	beq.n	802676e <mg_url_decode+0xa6>
 80266f4:	f816 0008 	ldrb.w	r0, [r6, r8]
 80266f8:	f7fa fe7c 	bl	80213f4 <isx>
 80266fc:	2800      	cmp	r0, #0
 80266fe:	d039      	beq.n	8026774 <mg_url_decode+0xac>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 8026700:	f10d 0a10 	add.w	sl, sp, #16
 8026704:	2202      	movs	r2, #2
 8026706:	9903      	ldr	r1, [sp, #12]
 8026708:	4650      	mov	r0, sl
 802670a:	f7ff f95b 	bl	80259c4 <mg_str_n>
 802670e:	2301      	movs	r3, #1
 8026710:	9300      	str	r3, [sp, #0]
 8026712:	eb0b 0304 	add.w	r3, fp, r4
 8026716:	2210      	movs	r2, #16
 8026718:	e89a 0003 	ldmia.w	sl, {r0, r1}
 802671c:	f7ff fe94 	bl	8026448 <mg_str_to_num>
        i += 2;
 8026720:	4643      	mov	r3, r8
 8026722:	e001      	b.n	8026728 <mg_url_decode+0x60>
      dst[j] = src[i];
 8026724:	f80b 2004 	strb.w	r2, [fp, r4]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8026728:	3301      	adds	r3, #1
 802672a:	462c      	mov	r4, r5
 802672c:	42bb      	cmp	r3, r7
 802672e:	d20e      	bcs.n	802674e <mg_url_decode+0x86>
 8026730:	1c65      	adds	r5, r4, #1
 8026732:	454d      	cmp	r5, r9
 8026734:	d20b      	bcs.n	802674e <mg_url_decode+0x86>
    if (src[i] == '%') {
 8026736:	5cf2      	ldrb	r2, [r6, r3]
 8026738:	2a25      	cmp	r2, #37	@ 0x25
 802673a:	d0cf      	beq.n	80266dc <mg_url_decode+0x14>
    } else if (is_form_url_encoded && src[i] == '+') {
 802673c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802673e:	2900      	cmp	r1, #0
 8026740:	d0f0      	beq.n	8026724 <mg_url_decode+0x5c>
 8026742:	2a2b      	cmp	r2, #43	@ 0x2b
 8026744:	d1ee      	bne.n	8026724 <mg_url_decode+0x5c>
      dst[j] = ' ';
 8026746:	2220      	movs	r2, #32
 8026748:	f80b 2004 	strb.w	r2, [fp, r4]
 802674c:	e7ec      	b.n	8026728 <mg_url_decode+0x60>
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 802674e:	454c      	cmp	r4, r9
 8026750:	d202      	bcs.n	8026758 <mg_url_decode+0x90>
 8026752:	2200      	movs	r2, #0
 8026754:	f80b 2004 	strb.w	r2, [fp, r4]
  return i >= src_len && j < dst_len ? (int) j : -1;
 8026758:	42bb      	cmp	r3, r7
 802675a:	d30e      	bcc.n	802677a <mg_url_decode+0xb2>
 802675c:	454c      	cmp	r4, r9
 802675e:	d20f      	bcs.n	8026780 <mg_url_decode+0xb8>
 8026760:	4620      	mov	r0, r4
}
 8026762:	b007      	add	sp, #28
 8026764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
 8026768:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802676c:	e7f9      	b.n	8026762 <mg_url_decode+0x9a>
 802676e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026772:	e7f6      	b.n	8026762 <mg_url_decode+0x9a>
 8026774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026778:	e7f3      	b.n	8026762 <mg_url_decode+0x9a>
  return i >= src_len && j < dst_len ? (int) j : -1;
 802677a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802677e:	e7f0      	b.n	8026762 <mg_url_decode+0x9a>
 8026780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026784:	e7ed      	b.n	8026762 <mg_url_decode+0x9a>

08026786 <mg_http_get_var>:
  if (dst != NULL && dst_len > 0) {
 8026786:	b352      	cbz	r2, 80267de <mg_http_get_var+0x58>
                    size_t dst_len) {
 8026788:	b570      	push	{r4, r5, r6, lr}
 802678a:	b086      	sub	sp, #24
 802678c:	4604      	mov	r4, r0
 802678e:	461d      	mov	r5, r3
 8026790:	4616      	mov	r6, r2
  if (dst != NULL && dst_len > 0) {
 8026792:	b10b      	cbz	r3, 8026798 <mg_http_get_var+0x12>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8026794:	2300      	movs	r3, #0
 8026796:	7013      	strb	r3, [r2, #0]
  if (dst == NULL || dst_len == 0) {
 8026798:	b325      	cbz	r5, 80267e4 <mg_http_get_var+0x5e>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 802679a:	6823      	ldr	r3, [r4, #0]
 802679c:	b32b      	cbz	r3, 80267ea <mg_http_get_var+0x64>
 802679e:	b339      	cbz	r1, 80267f0 <mg_http_get_var+0x6a>
 80267a0:	6863      	ldr	r3, [r4, #4]
 80267a2:	b343      	cbz	r3, 80267f6 <mg_http_get_var+0x70>
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 80267a4:	a804      	add	r0, sp, #16
 80267a6:	f7ff f901 	bl	80259ac <mg_str_s>
 80267aa:	9b05      	ldr	r3, [sp, #20]
 80267ac:	9300      	str	r3, [sp, #0]
 80267ae:	9b04      	ldr	r3, [sp, #16]
 80267b0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80267b4:	a802      	add	r0, sp, #8
 80267b6:	f7ff fbf9 	bl	8025fac <mg_http_var>
    if (v.buf == NULL) {
 80267ba:	9802      	ldr	r0, [sp, #8]
 80267bc:	b158      	cbz	r0, 80267d6 <mg_http_get_var+0x50>
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 80267be:	2301      	movs	r3, #1
 80267c0:	9300      	str	r3, [sp, #0]
 80267c2:	462b      	mov	r3, r5
 80267c4:	4632      	mov	r2, r6
 80267c6:	9903      	ldr	r1, [sp, #12]
 80267c8:	f7ff ff7e 	bl	80266c8 <mg_url_decode>
      if (len < 0) len = -3;  // Failed to decode
 80267cc:	2800      	cmp	r0, #0
 80267ce:	da04      	bge.n	80267da <mg_http_get_var+0x54>
 80267d0:	f06f 0002 	mvn.w	r0, #2
 80267d4:	e001      	b.n	80267da <mg_http_get_var+0x54>
      len = -4;  // Name does not exist
 80267d6:	f06f 0003 	mvn.w	r0, #3
}
 80267da:	b006      	add	sp, #24
 80267dc:	bd70      	pop	{r4, r5, r6, pc}
    len = -2;  // Bad destination
 80267de:	f06f 0001 	mvn.w	r0, #1
}
 80267e2:	4770      	bx	lr
    len = -2;  // Bad destination
 80267e4:	f06f 0001 	mvn.w	r0, #1
 80267e8:	e7f7      	b.n	80267da <mg_http_get_var+0x54>
    len = -1;  // Bad source
 80267ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80267ee:	e7f4      	b.n	80267da <mg_http_get_var+0x54>
 80267f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80267f4:	e7f1      	b.n	80267da <mg_http_get_var+0x54>
 80267f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  return len;
 80267fa:	e7ee      	b.n	80267da <mg_http_get_var+0x54>

080267fc <mg_http_creds>:
                   char *pass, size_t passlen) {
 80267fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026800:	b0c4      	sub	sp, #272	@ 0x110
 8026802:	4606      	mov	r6, r0
 8026804:	460d      	mov	r5, r1
 8026806:	4617      	mov	r7, r2
 8026808:	461c      	mov	r4, r3
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 802680a:	493f      	ldr	r1, [pc, #252]	@ (8026908 <mg_http_creds+0x10c>)
 802680c:	f7fd fd56 	bl	80242bc <mg_http_get_header>
  user[0] = pass[0] = '\0';
 8026810:	2300      	movs	r3, #0
 8026812:	7023      	strb	r3, [r4, #0]
 8026814:	702b      	strb	r3, [r5, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 8026816:	b1c8      	cbz	r0, 802684c <mg_http_creds+0x50>
 8026818:	4680      	mov	r8, r0
 802681a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 802681e:	f1b9 0f06 	cmp.w	r9, #6
 8026822:	d907      	bls.n	8026834 <mg_http_creds+0x38>
 8026824:	f8d0 a000 	ldr.w	sl, [r0]
 8026828:	2206      	movs	r2, #6
 802682a:	4938      	ldr	r1, [pc, #224]	@ (802690c <mg_http_creds+0x110>)
 802682c:	4650      	mov	r0, sl
 802682e:	f005 ffbd 	bl	802c7ac <memcmp>
 8026832:	b328      	cbz	r0, 8026880 <mg_http_creds+0x84>
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 8026834:	f1b9 0f07 	cmp.w	r9, #7
 8026838:	d908      	bls.n	802684c <mg_http_creds+0x50>
 802683a:	f8d8 5000 	ldr.w	r5, [r8]
 802683e:	2207      	movs	r2, #7
 8026840:	4933      	ldr	r1, [pc, #204]	@ (8026910 <mg_http_creds+0x114>)
 8026842:	4628      	mov	r0, r5
 8026844:	f005 ffb2 	bl	802c7ac <memcmp>
 8026848:	2800      	cmp	r0, #0
 802684a:	d043      	beq.n	80268d4 <mg_http_creds+0xd8>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 802684c:	4931      	ldr	r1, [pc, #196]	@ (8026914 <mg_http_creds+0x118>)
 802684e:	4630      	mov	r0, r6
 8026850:	f7fd fd34 	bl	80242bc <mg_http_get_header>
 8026854:	4605      	mov	r5, r0
 8026856:	2800      	cmp	r0, #0
 8026858:	d04e      	beq.n	80268f8 <mg_http_creds+0xfc>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 802685a:	220c      	movs	r2, #12
 802685c:	492e      	ldr	r1, [pc, #184]	@ (8026918 <mg_http_creds+0x11c>)
 802685e:	a842      	add	r0, sp, #264	@ 0x108
 8026860:	f7ff f8b0 	bl	80259c4 <mg_str_n>
 8026864:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8026866:	9300      	str	r3, [sp, #0]
 8026868:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 802686a:	e895 0006 	ldmia.w	r5, {r1, r2}
 802686e:	a802      	add	r0, sp, #8
 8026870:	f7ff f8c8 	bl	8025a04 <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 8026874:	9b03      	ldr	r3, [sp, #12]
 8026876:	2b00      	cmp	r3, #0
 8026878:	d136      	bne.n	80268e8 <mg_http_creds+0xec>
}
 802687a:	b044      	add	sp, #272	@ 0x110
 802687c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 8026880:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8026884:	aa02      	add	r2, sp, #8
 8026886:	f1a9 0106 	sub.w	r1, r9, #6
 802688a:	f10a 0006 	add.w	r0, sl, #6
 802688e:	f7fd fb89 	bl	8023fa4 <mg_base64_decode>
 8026892:	4606      	mov	r6, r0
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 8026894:	4602      	mov	r2, r0
 8026896:	213a      	movs	r1, #58	@ 0x3a
 8026898:	a802      	add	r0, sp, #8
 802689a:	f7e9 fcb1 	bl	8010200 <memchr>
    if (p != NULL) {
 802689e:	4680      	mov	r8, r0
 80268a0:	2800      	cmp	r0, #0
 80268a2:	d0ea      	beq.n	802687a <mg_http_creds+0x7e>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 80268a4:	ab02      	add	r3, sp, #8
 80268a6:	eba0 0a03 	sub.w	sl, r0, r3
 80268aa:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 802691c <mg_http_creds+0x120>
 80268ae:	9300      	str	r3, [sp, #0]
 80268b0:	4653      	mov	r3, sl
 80268b2:	464a      	mov	r2, r9
 80268b4:	4639      	mov	r1, r7
 80268b6:	4628      	mov	r0, r5
 80268b8:	f7fe f9da 	bl	8024c70 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 80268bc:	eba6 030a 	sub.w	r3, r6, sl
 80268c0:	f108 0201 	add.w	r2, r8, #1
 80268c4:	9200      	str	r2, [sp, #0]
 80268c6:	3b01      	subs	r3, #1
 80268c8:	464a      	mov	r2, r9
 80268ca:	994c      	ldr	r1, [sp, #304]	@ 0x130
 80268cc:	4620      	mov	r0, r4
 80268ce:	f7fe f9cf 	bl	8024c70 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 80268d2:	e7d2      	b.n	802687a <mg_http_creds+0x7e>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 80268d4:	3507      	adds	r5, #7
 80268d6:	9500      	str	r5, [sp, #0]
 80268d8:	f1a9 0307 	sub.w	r3, r9, #7
 80268dc:	4a0f      	ldr	r2, [pc, #60]	@ (802691c <mg_http_creds+0x120>)
 80268de:	994c      	ldr	r1, [sp, #304]	@ 0x130
 80268e0:	4620      	mov	r0, r4
 80268e2:	f7fe f9c5 	bl	8024c70 <mg_snprintf>
 80268e6:	e7c8      	b.n	802687a <mg_http_creds+0x7e>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 80268e8:	9a02      	ldr	r2, [sp, #8]
 80268ea:	9200      	str	r2, [sp, #0]
 80268ec:	4a0b      	ldr	r2, [pc, #44]	@ (802691c <mg_http_creds+0x120>)
 80268ee:	994c      	ldr	r1, [sp, #304]	@ 0x130
 80268f0:	4620      	mov	r0, r4
 80268f2:	f7fe f9bd 	bl	8024c70 <mg_snprintf>
 80268f6:	e7c0      	b.n	802687a <mg_http_creds+0x7e>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 80268f8:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 80268fa:	4622      	mov	r2, r4
 80268fc:	4906      	ldr	r1, [pc, #24]	@ (8026918 <mg_http_creds+0x11c>)
 80268fe:	f106 0010 	add.w	r0, r6, #16
 8026902:	f7ff ff40 	bl	8026786 <mg_http_get_var>
}
 8026906:	e7b8      	b.n	802687a <mg_http_creds+0x7e>
 8026908:	0803b4c0 	.word	0x0803b4c0
 802690c:	0803b4d0 	.word	0x0803b4d0
 8026910:	0803b4d8 	.word	0x0803b4d8
 8026914:	0803b4e0 	.word	0x0803b4e0
 8026918:	08038404 	.word	0x08038404
 802691c:	0803b2f0 	.word	0x0803b2f0

08026920 <listdir>:
                    const struct mg_http_serve_opts *opts, char *dir) {
 8026920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026924:	b0ae      	sub	sp, #184	@ 0xb8
 8026926:	4604      	mov	r4, r0
 8026928:	460d      	mov	r5, r1
 802692a:	4616      	mov	r6, r2
 802692c:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 802692e:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8026932:	f1b8 0f00 	cmp.w	r8, #0
 8026936:	d04f      	beq.n	80269d8 <listdir+0xb8>
  struct printdirentrydata d = {c, hm, opts, dir};
 8026938:	942a      	str	r4, [sp, #168]	@ 0xa8
 802693a:	952b      	str	r5, [sp, #172]	@ 0xac
 802693c:	962c      	str	r6, [sp, #176]	@ 0xb0
 802693e:	972d      	str	r7, [sp, #180]	@ 0xb4
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 8026940:	2300      	movs	r3, #0
 8026942:	9300      	str	r3, [sp, #0]
 8026944:	2380      	movs	r3, #128	@ 0x80
 8026946:	aa07      	add	r2, sp, #28
 8026948:	68e9      	ldr	r1, [r5, #12]
 802694a:	68a8      	ldr	r0, [r5, #8]
 802694c:	f7ff febc 	bl	80266c8 <mg_url_decode>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 8026950:	1e02      	subs	r2, r0, #0
 8026952:	dd44      	ble.n	80269de <listdir+0xbe>
 8026954:	a907      	add	r1, sp, #28
 8026956:	a805      	add	r0, sp, #20
 8026958:	f7ff f834 	bl	80259c4 <mg_str_n>
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 802695c:	68b2      	ldr	r2, [r6, #8]
  mg_printf(c,
 802695e:	2a00      	cmp	r2, #0
 8026960:	d044      	beq.n	80269ec <listdir+0xcc>
 8026962:	4923      	ldr	r1, [pc, #140]	@ (80269f0 <listdir+0xd0>)
 8026964:	4620      	mov	r0, r4
 8026966:	f7fe fe71 	bl	802564c <mg_printf>
  off = c->send.len;  // Start of body
 802696a:	6d25      	ldr	r5, [r4, #80]	@ 0x50
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 802696c:	9a06      	ldr	r2, [sp, #24]
  mg_printf(c,
 802696e:	9b05      	ldr	r3, [sp, #20]
 8026970:	9303      	str	r3, [sp, #12]
 8026972:	9202      	str	r2, [sp, #8]
 8026974:	491f      	ldr	r1, [pc, #124]	@ (80269f4 <listdir+0xd4>)
 8026976:	9101      	str	r1, [sp, #4]
 8026978:	491f      	ldr	r1, [pc, #124]	@ (80269f8 <listdir+0xd8>)
 802697a:	9100      	str	r1, [sp, #0]
 802697c:	491f      	ldr	r1, [pc, #124]	@ (80269fc <listdir+0xdc>)
 802697e:	4620      	mov	r0, r4
 8026980:	f7fe fe64 	bl	802564c <mg_printf>
  mg_printf(c, "%s",
 8026984:	4a1e      	ldr	r2, [pc, #120]	@ (8026a00 <listdir+0xe0>)
 8026986:	491f      	ldr	r1, [pc, #124]	@ (8026a04 <listdir+0xe4>)
 8026988:	4620      	mov	r0, r4
 802698a:	f7fe fe5f 	bl	802564c <mg_printf>
  fs->ls(dir, printdirentry, &d);
 802698e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8026992:	aa2a      	add	r2, sp, #168	@ 0xa8
 8026994:	491c      	ldr	r1, [pc, #112]	@ (8026a08 <listdir+0xe8>)
 8026996:	4638      	mov	r0, r7
 8026998:	4798      	blx	r3
  mg_printf(c,
 802699a:	4a1c      	ldr	r2, [pc, #112]	@ (8026a0c <listdir+0xec>)
 802699c:	491c      	ldr	r1, [pc, #112]	@ (8026a10 <listdir+0xf0>)
 802699e:	4620      	mov	r0, r4
 80269a0:	f7fe fe54 	bl	802564c <mg_printf>
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 80269a4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80269a6:	1b5b      	subs	r3, r3, r5
 80269a8:	4a1a      	ldr	r2, [pc, #104]	@ (8026a14 <listdir+0xf4>)
 80269aa:	210a      	movs	r1, #10
 80269ac:	a827      	add	r0, sp, #156	@ 0x9c
 80269ae:	f7fe f95f 	bl	8024c70 <mg_snprintf>
 80269b2:	4602      	mov	r2, r0
  if (n > sizeof(tmp)) n = 0;
 80269b4:	280a      	cmp	r0, #10
 80269b6:	d900      	bls.n	80269ba <listdir+0x9a>
 80269b8:	2200      	movs	r2, #0
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 80269ba:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80269bc:	3d0c      	subs	r5, #12
 80269be:	a927      	add	r1, sp, #156	@ 0x9c
 80269c0:	4428      	add	r0, r5
 80269c2:	f007 fc99 	bl	802e2f8 <memcpy>
  c->is_resp = 0;                          // Mark response end
 80269c6:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80269ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80269ce:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 80269d2:	b02e      	add	sp, #184	@ 0xb8
 80269d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80269d8:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8026a1c <listdir+0xfc>
 80269dc:	e7ac      	b.n	8026938 <listdir+0x18>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 80269de:	ab05      	add	r3, sp, #20
 80269e0:	3508      	adds	r5, #8
 80269e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80269e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80269ea:	e7b7      	b.n	802695c <listdir+0x3c>
  mg_printf(c,
 80269ec:	4a0a      	ldr	r2, [pc, #40]	@ (8026a18 <listdir+0xf8>)
 80269ee:	e7b8      	b.n	8026962 <listdir+0x42>
 80269f0:	0803b4e8 	.word	0x0803b4e8
 80269f4:	0803b6c8 	.word	0x0803b6c8
 80269f8:	0803b88c 	.word	0x0803b88c
 80269fc:	0803b540 	.word	0x0803b540
 8026a00:	0803ba54 	.word	0x0803ba54
 8026a04:	0803beb8 	.word	0x0803beb8
 8026a08:	080281f9 	.word	0x080281f9
 8026a0c:	08039fc8 	.word	0x08039fc8
 8026a10:	0803baa4 	.word	0x0803baa4
 8026a14:	08037dd4 	.word	0x08037dd4
 8026a18:	08038678 	.word	0x08038678
 8026a1c:	20000140 	.word	0x20000140

08026a20 <skip_chunk>:
static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 8026a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026a24:	b087      	sub	sp, #28
 8026a26:	461f      	mov	r7, r3
  int i = 0, n = 0;
 8026a28:	2300      	movs	r3, #0
 8026a2a:	9303      	str	r3, [sp, #12]
  if (len < 3) return 0;
 8026a2c:	2902      	cmp	r1, #2
 8026a2e:	dd42      	ble.n	8026ab6 <skip_chunk+0x96>
 8026a30:	4606      	mov	r6, r0
 8026a32:	460d      	mov	r5, r1
 8026a34:	4690      	mov	r8, r2
  int i = 0, n = 0;
 8026a36:	461c      	mov	r4, r3
  while (i < len && is_hex_digit(buf[i])) i++;
 8026a38:	42ac      	cmp	r4, r5
 8026a3a:	da05      	bge.n	8026a48 <skip_chunk+0x28>
 8026a3c:	5d30      	ldrb	r0, [r6, r4]
 8026a3e:	f7fb f911 	bl	8021c64 <is_hex_digit>
 8026a42:	b108      	cbz	r0, 8026a48 <skip_chunk+0x28>
 8026a44:	3401      	adds	r4, #1
 8026a46:	e7f7      	b.n	8026a38 <skip_chunk+0x18>
  if (i == 0) return -1;                     // Error, no length specified
 8026a48:	2c00      	cmp	r4, #0
 8026a4a:	d036      	beq.n	8026aba <skip_chunk+0x9a>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8026a4c:	2c08      	cmp	r4, #8
 8026a4e:	dc37      	bgt.n	8026ac0 <skip_chunk+0xa0>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8026a50:	42ac      	cmp	r4, r5
 8026a52:	da38      	bge.n	8026ac6 <skip_chunk+0xa6>
 8026a54:	4622      	mov	r2, r4
 8026a56:	5d33      	ldrb	r3, [r6, r4]
 8026a58:	2b0d      	cmp	r3, #13
 8026a5a:	d137      	bne.n	8026acc <skip_chunk+0xac>
 8026a5c:	1933      	adds	r3, r6, r4
 8026a5e:	785b      	ldrb	r3, [r3, #1]
 8026a60:	2b0a      	cmp	r3, #10
 8026a62:	d136      	bne.n	8026ad2 <skip_chunk+0xb2>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 8026a64:	f10d 0910 	add.w	r9, sp, #16
 8026a68:	4631      	mov	r1, r6
 8026a6a:	4648      	mov	r0, r9
 8026a6c:	f7fe ffaa 	bl	80259c4 <mg_str_n>
 8026a70:	2304      	movs	r3, #4
 8026a72:	9300      	str	r3, [sp, #0]
 8026a74:	ab03      	add	r3, sp, #12
 8026a76:	2210      	movs	r2, #16
 8026a78:	e899 0003 	ldmia.w	r9, {r0, r1}
 8026a7c:	f7ff fce4 	bl	8026448 <mg_str_to_num>
 8026a80:	b350      	cbz	r0, 8026ad8 <skip_chunk+0xb8>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8026a82:	9b03      	ldr	r3, [sp, #12]
 8026a84:	2b00      	cmp	r3, #0
 8026a86:	db2a      	blt.n	8026ade <skip_chunk+0xbe>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8026a88:	1b2d      	subs	r5, r5, r4
 8026a8a:	3d03      	subs	r5, #3
 8026a8c:	42ab      	cmp	r3, r5
 8026a8e:	da29      	bge.n	8026ae4 <skip_chunk+0xc4>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8026a90:	4423      	add	r3, r4
 8026a92:	18f2      	adds	r2, r6, r3
 8026a94:	7892      	ldrb	r2, [r2, #2]
 8026a96:	2a0d      	cmp	r2, #13
 8026a98:	d126      	bne.n	8026ae8 <skip_chunk+0xc8>
 8026a9a:	441e      	add	r6, r3
 8026a9c:	78f3      	ldrb	r3, [r6, #3]
 8026a9e:	2b0a      	cmp	r3, #10
 8026aa0:	d125      	bne.n	8026aee <skip_chunk+0xce>
  *pl = i + 2, *dl = n;
 8026aa2:	3402      	adds	r4, #2
 8026aa4:	f8c8 4000 	str.w	r4, [r8]
 8026aa8:	9b03      	ldr	r3, [sp, #12]
 8026aaa:	603b      	str	r3, [r7, #0]
  return i + 2 + n + 2;
 8026aac:	441c      	add	r4, r3
 8026aae:	1ca0      	adds	r0, r4, #2
}
 8026ab0:	b007      	add	sp, #28
 8026ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (len < 3) return 0;
 8026ab6:	2000      	movs	r0, #0
 8026ab8:	e7fa      	b.n	8026ab0 <skip_chunk+0x90>
  if (i == 0) return -1;                     // Error, no length specified
 8026aba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026abe:	e7f7      	b.n	8026ab0 <skip_chunk+0x90>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8026ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026ac4:	e7f4      	b.n	8026ab0 <skip_chunk+0x90>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8026ac6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026aca:	e7f1      	b.n	8026ab0 <skip_chunk+0x90>
 8026acc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026ad0:	e7ee      	b.n	8026ab0 <skip_chunk+0x90>
 8026ad2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026ad6:	e7eb      	b.n	8026ab0 <skip_chunk+0x90>
    return -1;                    // Decode chunk length, overflow
 8026ad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026adc:	e7e8      	b.n	8026ab0 <skip_chunk+0x90>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8026ade:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026ae2:	e7e5      	b.n	8026ab0 <skip_chunk+0x90>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8026ae4:	2000      	movs	r0, #0
 8026ae6:	e7e3      	b.n	8026ab0 <skip_chunk+0x90>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8026ae8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026aec:	e7e0      	b.n	8026ab0 <skip_chunk+0x90>
 8026aee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026af2:	e7dd      	b.n	8026ab0 <skip_chunk+0x90>

08026af4 <mg_json_unescape>:
bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 8026af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026af8:	b086      	sub	sp, #24
 8026afa:	ac02      	add	r4, sp, #8
 8026afc:	e884 0003 	stmia.w	r4, {r0, r1}
 8026b00:	4617      	mov	r7, r2
 8026b02:	461e      	mov	r6, r3
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8026b04:	2400      	movs	r4, #0
 8026b06:	4621      	mov	r1, r4
 8026b08:	e01c      	b.n	8026b44 <mg_json_unescape+0x50>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 8026b0a:	f101 0805 	add.w	r8, r1, #5
 8026b0e:	45a8      	cmp	r8, r5
 8026b10:	d221      	bcs.n	8026b56 <mg_json_unescape+0x62>
 8026b12:	185a      	adds	r2, r3, r1
 8026b14:	7852      	ldrb	r2, [r2, #1]
 8026b16:	2a75      	cmp	r2, #117	@ 0x75
 8026b18:	d11d      	bne.n	8026b56 <mg_json_unescape+0x62>
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 8026b1a:	3102      	adds	r1, #2
 8026b1c:	ad04      	add	r5, sp, #16
 8026b1e:	2204      	movs	r2, #4
 8026b20:	4419      	add	r1, r3
 8026b22:	4628      	mov	r0, r5
 8026b24:	f7fe ff4e 	bl	80259c4 <mg_str_n>
 8026b28:	2301      	movs	r3, #1
 8026b2a:	9300      	str	r3, [sp, #0]
 8026b2c:	193b      	adds	r3, r7, r4
 8026b2e:	2210      	movs	r2, #16
 8026b30:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026b34:	f7ff fc88 	bl	8026448 <mg_str_to_num>
 8026b38:	b308      	cbz	r0, 8026b7e <mg_json_unescape+0x8a>
      i += 5;
 8026b3a:	4641      	mov	r1, r8
 8026b3c:	e000      	b.n	8026b40 <mg_json_unescape+0x4c>
      to[j] = s.buf[i];
 8026b3e:	5538      	strb	r0, [r7, r4]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8026b40:	3101      	adds	r1, #1
 8026b42:	3401      	adds	r4, #1
 8026b44:	9d03      	ldr	r5, [sp, #12]
 8026b46:	428d      	cmp	r5, r1
 8026b48:	d914      	bls.n	8026b74 <mg_json_unescape+0x80>
 8026b4a:	42b4      	cmp	r4, r6
 8026b4c:	d212      	bcs.n	8026b74 <mg_json_unescape+0x80>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 8026b4e:	9b02      	ldr	r3, [sp, #8]
 8026b50:	5c58      	ldrb	r0, [r3, r1]
 8026b52:	285c      	cmp	r0, #92	@ 0x5c
 8026b54:	d0d9      	beq.n	8026b0a <mg_json_unescape+0x16>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8026b56:	285c      	cmp	r0, #92	@ 0x5c
 8026b58:	d1f1      	bne.n	8026b3e <mg_json_unescape+0x4a>
 8026b5a:	f101 0801 	add.w	r8, r1, #1
 8026b5e:	45a8      	cmp	r8, r5
 8026b60:	d2ed      	bcs.n	8026b3e <mg_json_unescape+0x4a>
      char c = json_esc(s.buf[i + 1], 0);
 8026b62:	2100      	movs	r1, #0
 8026b64:	f813 0008 	ldrb.w	r0, [r3, r8]
 8026b68:	f7fb f8a2 	bl	8021cb0 <json_esc>
      if (c == 0) return false;
 8026b6c:	b150      	cbz	r0, 8026b84 <mg_json_unescape+0x90>
      to[j] = c;
 8026b6e:	5538      	strb	r0, [r7, r4]
      i++;
 8026b70:	4641      	mov	r1, r8
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8026b72:	e7e5      	b.n	8026b40 <mg_json_unescape+0x4c>
  if (j >= n) return false;
 8026b74:	42b4      	cmp	r4, r6
 8026b76:	d207      	bcs.n	8026b88 <mg_json_unescape+0x94>
  if (n > 0) to[j] = '\0';
 8026b78:	2300      	movs	r3, #0
 8026b7a:	553b      	strb	r3, [r7, r4]
  return true;
 8026b7c:	2001      	movs	r0, #1
}
 8026b7e:	b006      	add	sp, #24
 8026b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (c == 0) return false;
 8026b84:	2000      	movs	r0, #0
 8026b86:	e7fa      	b.n	8026b7e <mg_json_unescape+0x8a>
  if (j >= n) return false;
 8026b88:	2000      	movs	r0, #0
 8026b8a:	e7f8      	b.n	8026b7e <mg_json_unescape+0x8a>

08026b8c <mg_json_get_str>:
char *mg_json_get_str(struct mg_str json, const char *path) {
 8026b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026b8e:	b087      	sub	sp, #28
 8026b90:	46ec      	mov	ip, sp
 8026b92:	e88c 0003 	stmia.w	ip, {r0, r1}
  int len = 0, off = mg_json_get(json, path, &len);
 8026b96:	2300      	movs	r3, #0
 8026b98:	9303      	str	r3, [sp, #12]
 8026b9a:	ab03      	add	r3, sp, #12
 8026b9c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8026ba0:	f7fd fbbc 	bl	802431c <mg_json_get>
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 8026ba4:	1e04      	subs	r4, r0, #0
 8026ba6:	db25      	blt.n	8026bf4 <mg_json_get_str+0x68>
 8026ba8:	9903      	ldr	r1, [sp, #12]
 8026baa:	2901      	cmp	r1, #1
 8026bac:	dd24      	ble.n	8026bf8 <mg_json_get_str+0x6c>
 8026bae:	9e00      	ldr	r6, [sp, #0]
 8026bb0:	5d33      	ldrb	r3, [r6, r4]
 8026bb2:	2b22      	cmp	r3, #34	@ 0x22
 8026bb4:	d003      	beq.n	8026bbe <mg_json_get_str+0x32>
  char *result = NULL;
 8026bb6:	2500      	movs	r5, #0
}
 8026bb8:	4628      	mov	r0, r5
 8026bba:	b007      	add	sp, #28
 8026bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8026bbe:	2001      	movs	r0, #1
 8026bc0:	f7fd f922 	bl	8023e08 <mg_calloc>
 8026bc4:	4605      	mov	r5, r0
 8026bc6:	2800      	cmp	r0, #0
 8026bc8:	d0f6      	beq.n	8026bb8 <mg_json_get_str+0x2c>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 8026bca:	1c61      	adds	r1, r4, #1
 8026bcc:	9f03      	ldr	r7, [sp, #12]
 8026bce:	ac04      	add	r4, sp, #16
 8026bd0:	1eba      	subs	r2, r7, #2
 8026bd2:	4431      	add	r1, r6
 8026bd4:	4620      	mov	r0, r4
 8026bd6:	f7fe fef5 	bl	80259c4 <mg_str_n>
 8026bda:	463b      	mov	r3, r7
 8026bdc:	462a      	mov	r2, r5
 8026bde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026be2:	f7ff ff87 	bl	8026af4 <mg_json_unescape>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8026be6:	2800      	cmp	r0, #0
 8026be8:	d1e6      	bne.n	8026bb8 <mg_json_get_str+0x2c>
      free(result);
 8026bea:	4628      	mov	r0, r5
 8026bec:	f7f5 fa96 	bl	801c11c <vPortFree>
      result = NULL;
 8026bf0:	2500      	movs	r5, #0
 8026bf2:	e7e1      	b.n	8026bb8 <mg_json_get_str+0x2c>
  char *result = NULL;
 8026bf4:	2500      	movs	r5, #0
 8026bf6:	e7df      	b.n	8026bb8 <mg_json_get_str+0x2c>
 8026bf8:	2500      	movs	r5, #0
 8026bfa:	e7dd      	b.n	8026bb8 <mg_json_get_str+0x2c>

08026bfc <mg_aton6>:
static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 8026bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026c00:	b08a      	sub	sp, #40	@ 0x28
 8026c02:	ab02      	add	r3, sp, #8
 8026c04:	e883 0003 	stmia.w	r3, {r0, r1}
 8026c08:	4614      	mov	r4, r2
  addr->scope_id = 0;
 8026c0a:	2300      	movs	r3, #0
 8026c0c:	7493      	strb	r3, [r2, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8026c0e:	2902      	cmp	r1, #2
 8026c10:	d904      	bls.n	8026c1c <mg_aton6+0x20>
 8026c12:	460b      	mov	r3, r1
 8026c14:	4602      	mov	r2, r0
 8026c16:	7801      	ldrb	r1, [r0, #0]
 8026c18:	295b      	cmp	r1, #91	@ 0x5b
 8026c1a:	d03b      	beq.n	8026c94 <mg_aton6+0x98>
  if (mg_v4mapped(str, addr)) return true;
 8026c1c:	4622      	mov	r2, r4
 8026c1e:	ab02      	add	r3, sp, #8
 8026c20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8026c24:	f7fe ff46 	bl	8025ab4 <mg_v4mapped>
 8026c28:	4607      	mov	r7, r0
 8026c2a:	2800      	cmp	r0, #0
 8026c2c:	f040 8083 	bne.w	8026d36 <mg_aton6+0x13a>
  size_t i, j = 0, n = 0, dc = 42;
 8026c30:	f04f 092a 	mov.w	r9, #42	@ 0x2a
 8026c34:	2600      	movs	r6, #0
 8026c36:	46b0      	mov	r8, r6
  for (i = 0; i < str.len; i++) {
 8026c38:	4635      	mov	r5, r6
 8026c3a:	9a03      	ldr	r2, [sp, #12]
 8026c3c:	42aa      	cmp	r2, r5
 8026c3e:	d97e      	bls.n	8026d3e <mg_aton6+0x142>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8026c40:	9902      	ldr	r1, [sp, #8]
 8026c42:	5d4b      	ldrb	r3, [r1, r5]
 8026c44:	2b25      	cmp	r3, #37	@ 0x25
 8026c46:	d064      	beq.n	8026d12 <mg_aton6+0x116>
 8026c48:	d375      	bcc.n	8026d36 <mg_aton6+0x13a>
 8026c4a:	2b66      	cmp	r3, #102	@ 0x66
 8026c4c:	d873      	bhi.n	8026d36 <mg_aton6+0x13a>
 8026c4e:	2b30      	cmp	r3, #48	@ 0x30
 8026c50:	d371      	bcc.n	8026d36 <mg_aton6+0x13a>
 8026c52:	3b30      	subs	r3, #48	@ 0x30
 8026c54:	2b36      	cmp	r3, #54	@ 0x36
 8026c56:	d86e      	bhi.n	8026d36 <mg_aton6+0x13a>
 8026c58:	e8df f003 	tbb	[pc, r3]
 8026c5c:	21212121 	.word	0x21212121
 8026c60:	21212121 	.word	0x21212121
 8026c64:	6d402121 	.word	0x6d402121
 8026c68:	6d6d6d6d 	.word	0x6d6d6d6d
 8026c6c:	2121216d 	.word	0x2121216d
 8026c70:	6d212121 	.word	0x6d212121
 8026c74:	6d6d6d6d 	.word	0x6d6d6d6d
 8026c78:	6d6d6d6d 	.word	0x6d6d6d6d
 8026c7c:	6d6d6d6d 	.word	0x6d6d6d6d
 8026c80:	6d6d6d6d 	.word	0x6d6d6d6d
 8026c84:	6d6d6d6d 	.word	0x6d6d6d6d
 8026c88:	6d6d6d6d 	.word	0x6d6d6d6d
 8026c8c:	2121216d 	.word	0x2121216d
 8026c90:	2121      	.short	0x2121
 8026c92:	21          	.byte	0x21
 8026c93:	00          	.byte	0x00
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8026c94:	3201      	adds	r2, #1
 8026c96:	9202      	str	r2, [sp, #8]
 8026c98:	3b02      	subs	r3, #2
 8026c9a:	9303      	str	r3, [sp, #12]
 8026c9c:	e7be      	b.n	8026c1c <mg_aton6+0x20>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 8026c9e:	2300      	movs	r3, #0
 8026ca0:	9305      	str	r3, [sp, #20]
      if (i > j + 3) return false;
 8026ca2:	f108 0303 	add.w	r3, r8, #3
 8026ca6:	42ab      	cmp	r3, r5
 8026ca8:	d345      	bcc.n	8026d36 <mg_aton6+0x13a>
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 8026caa:	eba5 0208 	sub.w	r2, r5, r8
 8026cae:	f10d 0a18 	add.w	sl, sp, #24
 8026cb2:	3201      	adds	r2, #1
 8026cb4:	4441      	add	r1, r8
 8026cb6:	4650      	mov	r0, sl
 8026cb8:	f7fe fe84 	bl	80259c4 <mg_str_n>
 8026cbc:	2304      	movs	r3, #4
 8026cbe:	9300      	str	r3, [sp, #0]
 8026cc0:	ab05      	add	r3, sp, #20
 8026cc2:	2210      	movs	r2, #16
 8026cc4:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8026cc8:	f7ff fbbe 	bl	8026448 <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 8026ccc:	9b05      	ldr	r3, [sp, #20]
 8026cce:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8026cd2:	55a2      	strb	r2, [r4, r6]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 8026cd4:	1c72      	adds	r2, r6, #1
 8026cd6:	54a3      	strb	r3, [r4, r2]
  for (i = 0; i < str.len; i++) {
 8026cd8:	3501      	adds	r5, #1
 8026cda:	e7ae      	b.n	8026c3a <mg_aton6+0x3e>
      j = i + 1;
 8026cdc:	f105 0801 	add.w	r8, r5, #1
      if (i > 0 && str.buf[i - 1] == ':') {
 8026ce0:	b12d      	cbz	r5, 8026cee <mg_aton6+0xf2>
 8026ce2:	194b      	adds	r3, r1, r5
 8026ce4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8026ce8:	2b3a      	cmp	r3, #58	@ 0x3a
 8026cea:	d007      	beq.n	8026cfc <mg_aton6+0x100>
        n += 2;
 8026cec:	3602      	adds	r6, #2
      if (n > 14) return false;
 8026cee:	2e0e      	cmp	r6, #14
 8026cf0:	d821      	bhi.n	8026d36 <mg_aton6+0x13a>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 8026cf2:	1c73      	adds	r3, r6, #1
 8026cf4:	2200      	movs	r2, #0
 8026cf6:	54e2      	strb	r2, [r4, r3]
 8026cf8:	55a2      	strb	r2, [r4, r6]
 8026cfa:	e7ed      	b.n	8026cd8 <mg_aton6+0xdc>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 8026cfc:	2d01      	cmp	r5, #1
 8026cfe:	d906      	bls.n	8026d0e <mg_aton6+0x112>
 8026d00:	4429      	add	r1, r5
 8026d02:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8026d06:	2b3a      	cmp	r3, #58	@ 0x3a
 8026d08:	d015      	beq.n	8026d36 <mg_aton6+0x13a>
        dc = n;  // Double colon
 8026d0a:	46b1      	mov	r9, r6
 8026d0c:	e7ef      	b.n	8026cee <mg_aton6+0xf2>
 8026d0e:	46b1      	mov	r9, r6
 8026d10:	e7ed      	b.n	8026cee <mg_aton6+0xf2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 8026d12:	1c6b      	adds	r3, r5, #1
 8026d14:	1b52      	subs	r2, r2, r5
 8026d16:	ad08      	add	r5, sp, #32
 8026d18:	3a01      	subs	r2, #1
 8026d1a:	4419      	add	r1, r3
 8026d1c:	4628      	mov	r0, r5
 8026d1e:	f7fe fe51 	bl	80259c4 <mg_str_n>
 8026d22:	2301      	movs	r3, #1
 8026d24:	9300      	str	r3, [sp, #0]
 8026d26:	f104 0312 	add.w	r3, r4, #18
 8026d2a:	220a      	movs	r2, #10
 8026d2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026d30:	f7ff fb8a 	bl	8026448 <mg_str_to_num>
 8026d34:	4607      	mov	r7, r0
}
 8026d36:	4638      	mov	r0, r7
 8026d38:	b00a      	add	sp, #40	@ 0x28
 8026d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (n < 14 && dc == 42) return false;
 8026d3e:	2e0d      	cmp	r6, #13
 8026d40:	d814      	bhi.n	8026d6c <mg_aton6+0x170>
 8026d42:	f1b9 0f2a 	cmp.w	r9, #42	@ 0x2a
 8026d46:	d0f6      	beq.n	8026d36 <mg_aton6+0x13a>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 8026d48:	eba9 0006 	sub.w	r0, r9, r6
 8026d4c:	300e      	adds	r0, #14
 8026d4e:	eb04 0509 	add.w	r5, r4, r9
 8026d52:	eba6 0209 	sub.w	r2, r6, r9
 8026d56:	3202      	adds	r2, #2
 8026d58:	4629      	mov	r1, r5
 8026d5a:	4420      	add	r0, r4
 8026d5c:	f005 fd36 	bl	802c7cc <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 8026d60:	f1c6 020e 	rsb	r2, r6, #14
 8026d64:	2100      	movs	r1, #0
 8026d66:	4628      	mov	r0, r5
 8026d68:	f005 fd4a 	bl	802c800 <memset>
  addr->is_ip6 = true;
 8026d6c:	2701      	movs	r7, #1
 8026d6e:	74e7      	strb	r7, [r4, #19]
  return true;
 8026d70:	e7e1      	b.n	8026d36 <mg_aton6+0x13a>

08026d72 <mg_timer_init>:
                   unsigned flags, void (*fn)(void *), void *arg) {
 8026d72:	b410      	push	{r4}
  t->id = 0, t->period_ms = ms, t->expire = 0;
 8026d74:	2400      	movs	r4, #0
 8026d76:	600c      	str	r4, [r1, #0]
 8026d78:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8026d7c:	2200      	movs	r2, #0
 8026d7e:	2300      	movs	r3, #0
 8026d80:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 8026d84:	9b01      	ldr	r3, [sp, #4]
 8026d86:	618b      	str	r3, [r1, #24]
 8026d88:	9b02      	ldr	r3, [sp, #8]
 8026d8a:	61cb      	str	r3, [r1, #28]
 8026d8c:	9b03      	ldr	r3, [sp, #12]
 8026d8e:	620b      	str	r3, [r1, #32]
 8026d90:	6803      	ldr	r3, [r0, #0]
 8026d92:	624b      	str	r3, [r1, #36]	@ 0x24
  *head = t;
 8026d94:	6001      	str	r1, [r0, #0]
}
 8026d96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026d9a:	4770      	bx	lr

08026d9c <mg_timer_add>:
                              unsigned flags, void (*fn)(void *), void *arg) {
 8026d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026d9e:	b085      	sub	sp, #20
 8026da0:	4604      	mov	r4, r0
 8026da2:	4616      	mov	r6, r2
 8026da4:	461d      	mov	r5, r3
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 8026da6:	2128      	movs	r1, #40	@ 0x28
 8026da8:	2001      	movs	r0, #1
 8026daa:	f7fd f82d 	bl	8023e08 <mg_calloc>
  if (t != NULL) {
 8026dae:	4607      	mov	r7, r0
 8026db0:	b180      	cbz	r0, 8026dd4 <mg_timer_add+0x38>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 8026db2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026db4:	9302      	str	r3, [sp, #8]
 8026db6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026db8:	9301      	str	r3, [sp, #4]
 8026dba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026dbc:	9300      	str	r3, [sp, #0]
 8026dbe:	4632      	mov	r2, r6
 8026dc0:	462b      	mov	r3, r5
 8026dc2:	4601      	mov	r1, r0
 8026dc4:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8026dc8:	f7ff ffd3 	bl	8026d72 <mg_timer_init>
    t->id = mgr->timerid++;
 8026dcc:	6a23      	ldr	r3, [r4, #32]
 8026dce:	1c5a      	adds	r2, r3, #1
 8026dd0:	6222      	str	r2, [r4, #32]
 8026dd2:	603b      	str	r3, [r7, #0]
}
 8026dd4:	4638      	mov	r0, r7
 8026dd6:	b005      	add	sp, #20
 8026dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026dda:	0000      	movs	r0, r0
 8026ddc:	0000      	movs	r0, r0
	...

08026de0 <mg_timer_expired>:
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8026de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026de4:	4698      	mov	r8, r3
 8026de6:	9906      	ldr	r1, [sp, #24]
 8026de8:	9c07      	ldr	r4, [sp, #28]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8026dea:	188e      	adds	r6, r1, r2
 8026dec:	eb43 0504 	adc.w	r5, r3, r4
 8026df0:	6847      	ldr	r7, [r0, #4]
 8026df2:	6803      	ldr	r3, [r0, #0]
 8026df4:	429e      	cmp	r6, r3
 8026df6:	eb75 0707 	sbcs.w	r7, r5, r7
 8026dfa:	d203      	bcs.n	8026e04 <mg_timer_expired+0x24>
 8026dfc:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8026e40 <mg_timer_expired+0x60>
 8026e00:	ed80 7b00 	vstr	d7, [r0]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8026e04:	6847      	ldr	r7, [r0, #4]
 8026e06:	6803      	ldr	r3, [r0, #0]
 8026e08:	431f      	orrs	r7, r3
 8026e0a:	d101      	bne.n	8026e10 <mg_timer_expired+0x30>
 8026e0c:	6006      	str	r6, [r0, #0]
 8026e0e:	6045      	str	r5, [r0, #4]
  if (*t > now) return false;                    // Not expired yet, return
 8026e10:	6807      	ldr	r7, [r0, #0]
 8026e12:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8026e16:	42b9      	cmp	r1, r7
 8026e18:	eb74 0e0c 	sbcs.w	lr, r4, ip
 8026e1c:	d30e      	bcc.n	8026e3c <mg_timer_expired+0x5c>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8026e1e:	1bc9      	subs	r1, r1, r7
 8026e20:	eb64 040c 	sbc.w	r4, r4, ip
 8026e24:	428a      	cmp	r2, r1
 8026e26:	eb78 0404 	sbcs.w	r4, r8, r4
 8026e2a:	d302      	bcc.n	8026e32 <mg_timer_expired+0x52>
 8026e2c:	18be      	adds	r6, r7, r2
 8026e2e:	eb4c 0508 	adc.w	r5, ip, r8
 8026e32:	6006      	str	r6, [r0, #0]
 8026e34:	6045      	str	r5, [r0, #4]
  return true;                                   // Expired, return true
 8026e36:	2001      	movs	r0, #1
}
 8026e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (*t > now) return false;                    // Not expired yet, return
 8026e3c:	2000      	movs	r0, #0
 8026e3e:	e7fb      	b.n	8026e38 <mg_timer_expired+0x58>
	...

08026e48 <mg_timer_poll>:
void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8026e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026e4c:	b082      	sub	sp, #8
 8026e4e:	4617      	mov	r7, r2
 8026e50:	461e      	mov	r6, r3
  for (t = *head; t != NULL; t = tmp) {
 8026e52:	6804      	ldr	r4, [r0, #0]
 8026e54:	e019      	b.n	8026e8a <mg_timer_poll+0x42>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8026e56:	2500      	movs	r5, #0
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8026e58:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8026e5c:	9700      	str	r7, [sp, #0]
 8026e5e:	9601      	str	r6, [sp, #4]
 8026e60:	f104 0010 	add.w	r0, r4, #16
 8026e64:	f7ff ffbc 	bl	8026de0 <mg_timer_expired>
    tmp = t->next;
 8026e68:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
    if (!once && !expired) continue;
 8026e6c:	b905      	cbnz	r5, 8026e70 <mg_timer_poll+0x28>
 8026e6e:	b158      	cbz	r0, 8026e88 <mg_timer_poll+0x40>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8026e70:	69a3      	ldr	r3, [r4, #24]
 8026e72:	f003 0305 	and.w	r3, r3, #5
 8026e76:	2b04      	cmp	r3, #4
 8026e78:	d002      	beq.n	8026e80 <mg_timer_poll+0x38>
      t->fn(t->arg);
 8026e7a:	69e3      	ldr	r3, [r4, #28]
 8026e7c:	6a20      	ldr	r0, [r4, #32]
 8026e7e:	4798      	blx	r3
    t->flags |= MG_TIMER_CALLED;
 8026e80:	69a1      	ldr	r1, [r4, #24]
 8026e82:	f041 0104 	orr.w	r1, r1, #4
 8026e86:	61a1      	str	r1, [r4, #24]
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8026e88:	4644      	mov	r4, r8
  for (t = *head; t != NULL; t = tmp) {
 8026e8a:	b164      	cbz	r4, 8026ea6 <mg_timer_poll+0x5e>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8026e8c:	6923      	ldr	r3, [r4, #16]
 8026e8e:	6962      	ldr	r2, [r4, #20]
 8026e90:	4313      	orrs	r3, r2
 8026e92:	d1e0      	bne.n	8026e56 <mg_timer_poll+0xe>
 8026e94:	69a3      	ldr	r3, [r4, #24]
 8026e96:	f003 0306 	and.w	r3, r3, #6
 8026e9a:	2b02      	cmp	r3, #2
 8026e9c:	d001      	beq.n	8026ea2 <mg_timer_poll+0x5a>
 8026e9e:	2500      	movs	r5, #0
 8026ea0:	e7da      	b.n	8026e58 <mg_timer_poll+0x10>
 8026ea2:	2501      	movs	r5, #1
 8026ea4:	e7d8      	b.n	8026e58 <mg_timer_poll+0x10>
}
 8026ea6:	b002      	add	sp, #8
 8026ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08026eac <mg_tls_recv>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8026eac:	b118      	cbz	r0, 8026eb6 <mg_tls_recv+0xa>
 8026eae:	b121      	cbz	r1, 8026eba <mg_tls_recv+0xe>
 8026eb0:	b92a      	cbnz	r2, 8026ebe <mg_tls_recv+0x12>
 8026eb2:	2000      	movs	r0, #0
 8026eb4:	4770      	bx	lr
 8026eb6:	2000      	movs	r0, #0
 8026eb8:	4770      	bx	lr
 8026eba:	2000      	movs	r0, #0
 8026ebc:	4770      	bx	lr
 8026ebe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8026ec2:	4770      	bx	lr

08026ec4 <mg_tls_send>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8026ec4:	b118      	cbz	r0, 8026ece <mg_tls_send+0xa>
 8026ec6:	b121      	cbz	r1, 8026ed2 <mg_tls_send+0xe>
 8026ec8:	b92a      	cbnz	r2, 8026ed6 <mg_tls_send+0x12>
 8026eca:	2000      	movs	r0, #0
 8026ecc:	4770      	bx	lr
 8026ece:	2000      	movs	r0, #0
 8026ed0:	4770      	bx	lr
 8026ed2:	2000      	movs	r0, #0
 8026ed4:	4770      	bx	lr
 8026ed6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8026eda:	4770      	bx	lr

08026edc <mg_tls_pending>:
}
 8026edc:	2000      	movs	r0, #0
 8026ede:	4770      	bx	lr

08026ee0 <mg_url_is_ssl>:
int mg_url_is_ssl(const char *url) {
 8026ee0:	b510      	push	{r4, lr}
 8026ee2:	4604      	mov	r4, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8026ee4:	2204      	movs	r2, #4
 8026ee6:	4918      	ldr	r1, [pc, #96]	@ (8026f48 <mg_url_is_ssl+0x68>)
 8026ee8:	f005 fcbf 	bl	802c86a <strncmp>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8026eec:	b1f8      	cbz	r0, 8026f2e <mg_url_is_ssl+0x4e>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8026eee:	2206      	movs	r2, #6
 8026ef0:	4916      	ldr	r1, [pc, #88]	@ (8026f4c <mg_url_is_ssl+0x6c>)
 8026ef2:	4620      	mov	r0, r4
 8026ef4:	f005 fcb9 	bl	802c86a <strncmp>
 8026ef8:	b1d8      	cbz	r0, 8026f32 <mg_url_is_ssl+0x52>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8026efa:	2206      	movs	r2, #6
 8026efc:	4914      	ldr	r1, [pc, #80]	@ (8026f50 <mg_url_is_ssl+0x70>)
 8026efe:	4620      	mov	r0, r4
 8026f00:	f005 fcb3 	bl	802c86a <strncmp>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8026f04:	b1b8      	cbz	r0, 8026f36 <mg_url_is_ssl+0x56>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8026f06:	2204      	movs	r2, #4
 8026f08:	4912      	ldr	r1, [pc, #72]	@ (8026f54 <mg_url_is_ssl+0x74>)
 8026f0a:	4620      	mov	r0, r4
 8026f0c:	f005 fcad 	bl	802c86a <strncmp>
 8026f10:	b198      	cbz	r0, 8026f3a <mg_url_is_ssl+0x5a>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8026f12:	2204      	movs	r2, #4
 8026f14:	4910      	ldr	r1, [pc, #64]	@ (8026f58 <mg_url_is_ssl+0x78>)
 8026f16:	4620      	mov	r0, r4
 8026f18:	f005 fca7 	bl	802c86a <strncmp>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8026f1c:	b178      	cbz	r0, 8026f3e <mg_url_is_ssl+0x5e>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8026f1e:	2205      	movs	r2, #5
 8026f20:	490e      	ldr	r1, [pc, #56]	@ (8026f5c <mg_url_is_ssl+0x7c>)
 8026f22:	4620      	mov	r0, r4
 8026f24:	f005 fca1 	bl	802c86a <strncmp>
 8026f28:	b958      	cbnz	r0, 8026f42 <mg_url_is_ssl+0x62>
 8026f2a:	2001      	movs	r0, #1
 8026f2c:	e000      	b.n	8026f30 <mg_url_is_ssl+0x50>
 8026f2e:	2001      	movs	r0, #1
}
 8026f30:	bd10      	pop	{r4, pc}
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8026f32:	2001      	movs	r0, #1
 8026f34:	e7fc      	b.n	8026f30 <mg_url_is_ssl+0x50>
 8026f36:	2001      	movs	r0, #1
 8026f38:	e7fa      	b.n	8026f30 <mg_url_is_ssl+0x50>
 8026f3a:	2001      	movs	r0, #1
 8026f3c:	e7f8      	b.n	8026f30 <mg_url_is_ssl+0x50>
 8026f3e:	2001      	movs	r0, #1
 8026f40:	e7f6      	b.n	8026f30 <mg_url_is_ssl+0x50>
 8026f42:	2000      	movs	r0, #0
 8026f44:	e7f4      	b.n	8026f30 <mg_url_is_ssl+0x50>
 8026f46:	bf00      	nop
 8026f48:	0803bb18 	.word	0x0803bb18
 8026f4c:	0803bb20 	.word	0x0803bb20
 8026f50:	0803bb28 	.word	0x0803bb28
 8026f54:	0803bb30 	.word	0x0803bb30
 8026f58:	0803bb38 	.word	0x0803bb38
 8026f5c:	0803bb40 	.word	0x0803bb40

08026f60 <mg_url_host>:
struct mg_str mg_url_host(const char *url) {
 8026f60:	b530      	push	{r4, r5, lr}
 8026f62:	b089      	sub	sp, #36	@ 0x24
 8026f64:	4604      	mov	r4, r0
 8026f66:	460d      	mov	r5, r1
  struct url u = urlparse(url);
 8026f68:	a801      	add	r0, sp, #4
 8026f6a:	f7fb febb 	bl	8022ce4 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8026f6e:	9a05      	ldr	r2, [sp, #20]
             : u.uri ? u.uri - u.host
 8026f70:	b152      	cbz	r2, 8026f88 <mg_url_host+0x28>
  size_t n = u.port  ? u.port - u.host - 1
 8026f72:	9b04      	ldr	r3, [sp, #16]
 8026f74:	1ad2      	subs	r2, r2, r3
             : u.uri ? u.uri - u.host
 8026f76:	3a01      	subs	r2, #1
  struct mg_str s = mg_str_n(url + u.host, n);
 8026f78:	9904      	ldr	r1, [sp, #16]
 8026f7a:	4429      	add	r1, r5
 8026f7c:	4620      	mov	r0, r4
 8026f7e:	f7fe fd21 	bl	80259c4 <mg_str_n>
}
 8026f82:	4620      	mov	r0, r4
 8026f84:	b009      	add	sp, #36	@ 0x24
 8026f86:	bd30      	pop	{r4, r5, pc}
             : u.uri ? u.uri - u.host
 8026f88:	9a06      	ldr	r2, [sp, #24]
                     : u.end - u.host;
 8026f8a:	b112      	cbz	r2, 8026f92 <mg_url_host+0x32>
             : u.uri ? u.uri - u.host
 8026f8c:	9b04      	ldr	r3, [sp, #16]
                     : u.end - u.host;
 8026f8e:	1ad2      	subs	r2, r2, r3
 8026f90:	e7f2      	b.n	8026f78 <mg_url_host+0x18>
 8026f92:	9a07      	ldr	r2, [sp, #28]
 8026f94:	9b04      	ldr	r3, [sp, #16]
 8026f96:	1ad2      	subs	r2, r2, r3
 8026f98:	e7ee      	b.n	8026f78 <mg_url_host+0x18>
	...

08026f9c <mg_url_port>:
unsigned short mg_url_port(const char *url) {
 8026f9c:	b530      	push	{r4, r5, lr}
 8026f9e:	b089      	sub	sp, #36	@ 0x24
 8026fa0:	4604      	mov	r4, r0
  struct url u = urlparse(url);
 8026fa2:	4601      	mov	r1, r0
 8026fa4:	a801      	add	r0, sp, #4
 8026fa6:	f7fb fe9d 	bl	8022ce4 <urlparse>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8026faa:	2205      	movs	r2, #5
 8026fac:	491d      	ldr	r1, [pc, #116]	@ (8027024 <mg_url_port+0x88>)
 8026fae:	4620      	mov	r0, r4
 8026fb0:	f005 fc5b 	bl	802c86a <strncmp>
 8026fb4:	b138      	cbz	r0, 8026fc6 <mg_url_port+0x2a>
 8026fb6:	2203      	movs	r2, #3
 8026fb8:	491b      	ldr	r1, [pc, #108]	@ (8027028 <mg_url_port+0x8c>)
 8026fba:	4620      	mov	r0, r4
 8026fbc:	f005 fc55 	bl	802c86a <strncmp>
 8026fc0:	b188      	cbz	r0, 8026fe6 <mg_url_port+0x4a>
  unsigned short port = 0;
 8026fc2:	2500      	movs	r5, #0
 8026fc4:	e000      	b.n	8026fc8 <mg_url_port+0x2c>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8026fc6:	2550      	movs	r5, #80	@ 0x50
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8026fc8:	2204      	movs	r2, #4
 8026fca:	4918      	ldr	r1, [pc, #96]	@ (802702c <mg_url_port+0x90>)
 8026fcc:	4620      	mov	r0, r4
 8026fce:	f005 fc4c 	bl	802c86a <strncmp>
 8026fd2:	b150      	cbz	r0, 8026fea <mg_url_port+0x4e>
 8026fd4:	2206      	movs	r2, #6
 8026fd6:	4916      	ldr	r1, [pc, #88]	@ (8027030 <mg_url_port+0x94>)
 8026fd8:	4620      	mov	r0, r4
 8026fda:	f005 fc46 	bl	802c86a <strncmp>
 8026fde:	b930      	cbnz	r0, 8026fee <mg_url_port+0x52>
    port = 443;
 8026fe0:	f240 15bb 	movw	r5, #443	@ 0x1bb
 8026fe4:	e003      	b.n	8026fee <mg_url_port+0x52>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8026fe6:	2550      	movs	r5, #80	@ 0x50
 8026fe8:	e7ee      	b.n	8026fc8 <mg_url_port+0x2c>
    port = 443;
 8026fea:	f240 15bb 	movw	r5, #443	@ 0x1bb
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8026fee:	2205      	movs	r2, #5
 8026ff0:	4910      	ldr	r1, [pc, #64]	@ (8027034 <mg_url_port+0x98>)
 8026ff2:	4620      	mov	r0, r4
 8026ff4:	f005 fc39 	bl	802c86a <strncmp>
 8026ff8:	b908      	cbnz	r0, 8026ffe <mg_url_port+0x62>
 8026ffa:	f240 755b 	movw	r5, #1883	@ 0x75b
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8026ffe:	2206      	movs	r2, #6
 8027000:	490d      	ldr	r1, [pc, #52]	@ (8027038 <mg_url_port+0x9c>)
 8027002:	4620      	mov	r0, r4
 8027004:	f005 fc31 	bl	802c86a <strncmp>
 8027008:	b908      	cbnz	r0, 802700e <mg_url_port+0x72>
 802700a:	f242 25b3 	movw	r5, #8883	@ 0x22b3
  if (u.port) port = (unsigned short) atoi(url + u.port);
 802700e:	9805      	ldr	r0, [sp, #20]
 8027010:	b910      	cbnz	r0, 8027018 <mg_url_port+0x7c>
}
 8027012:	4628      	mov	r0, r5
 8027014:	b009      	add	sp, #36	@ 0x24
 8027016:	bd30      	pop	{r4, r5, pc}
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8027018:	4420      	add	r0, r4
 802701a:	f004 fb15 	bl	802b648 <atoi>
 802701e:	b285      	uxth	r5, r0
 8027020:	e7f7      	b.n	8027012 <mg_url_port+0x76>
 8027022:	bf00      	nop
 8027024:	0803bb48 	.word	0x0803bb48
 8027028:	0803bb50 	.word	0x0803bb50
 802702c:	0803bb18 	.word	0x0803bb18
 8027030:	0803bb20 	.word	0x0803bb20
 8027034:	0803bb54 	.word	0x0803bb54
 8027038:	0803bb28 	.word	0x0803bb28

0802703c <mg_bzero>:
  if (buf != NULL) {
 802703c:	4603      	mov	r3, r0
 802703e:	b920      	cbnz	r0, 802704a <mg_bzero+0xe>
 8027040:	4770      	bx	lr
    while (len--) *buf++ = 0;
 8027042:	2100      	movs	r1, #0
 8027044:	f803 1b01 	strb.w	r1, [r3], #1
 8027048:	4611      	mov	r1, r2
 802704a:	1e4a      	subs	r2, r1, #1
 802704c:	2900      	cmp	r1, #0
 802704e:	d1f8      	bne.n	8027042 <mg_bzero+0x6>
}
 8027050:	4770      	bx	lr

08027052 <mg_iobuf_del>:
size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 8027052:	b538      	push	{r3, r4, r5, lr}
 8027054:	4605      	mov	r5, r0
 8027056:	4608      	mov	r0, r1
 8027058:	4614      	mov	r4, r2
  if (ofs > io->len) ofs = io->len;
 802705a:	68aa      	ldr	r2, [r5, #8]
 802705c:	428a      	cmp	r2, r1
 802705e:	d200      	bcs.n	8027062 <mg_iobuf_del+0x10>
 8027060:	4610      	mov	r0, r2
  if (ofs + len > io->len) len = io->len - ofs;
 8027062:	1903      	adds	r3, r0, r4
 8027064:	429a      	cmp	r2, r3
 8027066:	d200      	bcs.n	802706a <mg_iobuf_del+0x18>
 8027068:	1a14      	subs	r4, r2, r0
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 802706a:	682b      	ldr	r3, [r5, #0]
 802706c:	b133      	cbz	r3, 802707c <mg_iobuf_del+0x2a>
 802706e:	1901      	adds	r1, r0, r4
 8027070:	1a12      	subs	r2, r2, r0
 8027072:	1b12      	subs	r2, r2, r4
 8027074:	4419      	add	r1, r3
 8027076:	4418      	add	r0, r3
 8027078:	f005 fba8 	bl	802c7cc <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 802707c:	682b      	ldr	r3, [r5, #0]
 802707e:	b12b      	cbz	r3, 802708c <mg_iobuf_del+0x3a>
 8027080:	68a8      	ldr	r0, [r5, #8]
 8027082:	1b00      	subs	r0, r0, r4
 8027084:	4621      	mov	r1, r4
 8027086:	4418      	add	r0, r3
 8027088:	f7ff ffd8 	bl	802703c <mg_bzero>
  io->len -= len;
 802708c:	68ab      	ldr	r3, [r5, #8]
 802708e:	1b1b      	subs	r3, r3, r4
 8027090:	60ab      	str	r3, [r5, #8]
}
 8027092:	4620      	mov	r0, r4
 8027094:	bd38      	pop	{r3, r4, r5, pc}

08027096 <mg_random>:
void mg_random(void *buf, size_t len) {
 8027096:	b538      	push	{r3, r4, r5, lr}
 8027098:	4604      	mov	r4, r0
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 802709a:	e006      	b.n	80270aa <mg_random+0x14>
 802709c:	f004 ffbc 	bl	802c018 <rand>
 80270a0:	4623      	mov	r3, r4
 80270a2:	f803 0b01 	strb.w	r0, [r3], #1
 80270a6:	461c      	mov	r4, r3
 80270a8:	4629      	mov	r1, r5
 80270aa:	1e4d      	subs	r5, r1, #1
 80270ac:	2900      	cmp	r1, #0
 80270ae:	d1f5      	bne.n	802709c <mg_random+0x6>
}
 80270b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080270b4 <mg_random_str>:
char *mg_random_str(char *buf, size_t len) {
 80270b4:	b570      	push	{r4, r5, r6, lr}
 80270b6:	4604      	mov	r4, r0
 80270b8:	460d      	mov	r5, r1
  mg_random(buf, len);
 80270ba:	f7ff ffec 	bl	8027096 <mg_random>
  for (i = 0; i < len; i++) {
 80270be:	2100      	movs	r1, #0
 80270c0:	e00a      	b.n	80270d8 <mg_random_str+0x24>
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 80270c2:	2b33      	cmp	r3, #51	@ 0x33
 80270c4:	d802      	bhi.n	80270cc <mg_random_str+0x18>
 80270c6:	3327      	adds	r3, #39	@ 0x27
 80270c8:	b2db      	uxtb	r3, r3
 80270ca:	e003      	b.n	80270d4 <mg_random_str+0x20>
 80270cc:	3b04      	subs	r3, #4
 80270ce:	b2db      	uxtb	r3, r3
 80270d0:	e000      	b.n	80270d4 <mg_random_str+0x20>
 80270d2:	2300      	movs	r3, #0
 80270d4:	7003      	strb	r3, [r0, #0]
  for (i = 0; i < len; i++) {
 80270d6:	3101      	adds	r1, #1
 80270d8:	42a9      	cmp	r1, r5
 80270da:	d213      	bcs.n	8027104 <mg_random_str+0x50>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 80270dc:	1860      	adds	r0, r4, r1
 80270de:	5c63      	ldrb	r3, [r4, r1]
 80270e0:	085a      	lsrs	r2, r3, #1
 80270e2:	4e09      	ldr	r6, [pc, #36]	@ (8027108 <mg_random_str+0x54>)
 80270e4:	fba6 6202 	umull	r6, r2, r6, r2
 80270e8:	0912      	lsrs	r2, r2, #4
 80270ea:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 80270ee:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80270f2:	b2db      	uxtb	r3, r3
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 80270f4:	1e6a      	subs	r2, r5, #1
 80270f6:	428a      	cmp	r2, r1
 80270f8:	d0eb      	beq.n	80270d2 <mg_random_str+0x1e>
 80270fa:	2b19      	cmp	r3, #25
 80270fc:	d8e1      	bhi.n	80270c2 <mg_random_str+0xe>
 80270fe:	3361      	adds	r3, #97	@ 0x61
 8027100:	b2db      	uxtb	r3, r3
 8027102:	e7e7      	b.n	80270d4 <mg_random_str+0x20>
}
 8027104:	4620      	mov	r0, r4
 8027106:	bd70      	pop	{r4, r5, r6, pc}
 8027108:	84210843 	.word	0x84210843

0802710c <mg_ntohl>:
uint32_t mg_ntohl(uint32_t net) {
 802710c:	b082      	sub	sp, #8
  uint8_t data[4] = {0, 0, 0, 0};
 802710e:	2300      	movs	r3, #0
 8027110:	9301      	str	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 8027112:	9001      	str	r0, [sp, #4]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8027114:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8027118:	021b      	lsls	r3, r3, #8
 802711a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 802711e:	f3c0 2207 	ubfx	r2, r0, #8, #8
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8027122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
}
 8027126:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 802712a:	b002      	add	sp, #8
 802712c:	4770      	bx	lr
	...

08027130 <mg_atonl>:
static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 8027130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027132:	b085      	sub	sp, #20
 8027134:	466c      	mov	r4, sp
 8027136:	e884 0003 	stmia.w	r4, {r0, r1}
 802713a:	4615      	mov	r5, r2
  uint32_t localhost = mg_htonl(0x7f000001);
 802713c:	480b      	ldr	r0, [pc, #44]	@ (802716c <mg_atonl+0x3c>)
 802713e:	f7ff ffe5 	bl	802710c <mg_ntohl>
 8027142:	4607      	mov	r7, r0
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8027144:	ae02      	add	r6, sp, #8
 8027146:	490a      	ldr	r1, [pc, #40]	@ (8027170 <mg_atonl+0x40>)
 8027148:	4630      	mov	r0, r6
 802714a:	f7fe fc2f 	bl	80259ac <mg_str_s>
 802714e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8027152:	e894 0003 	ldmia.w	r4, {r0, r1}
 8027156:	f7fe fd2a 	bl	8025bae <mg_strcasecmp>
 802715a:	b928      	cbnz	r0, 8027168 <mg_atonl+0x38>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 802715c:	602f      	str	r7, [r5, #0]
  addr->is_ip6 = false;
 802715e:	2300      	movs	r3, #0
 8027160:	74eb      	strb	r3, [r5, #19]
  return true;
 8027162:	2001      	movs	r0, #1
}
 8027164:	b005      	add	sp, #20
 8027166:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8027168:	2000      	movs	r0, #0
 802716a:	e7fb      	b.n	8027164 <mg_atonl+0x34>
 802716c:	7f000001 	.word	0x7f000001
 8027170:	0803bb5c 	.word	0x0803bb5c

08027174 <mg_aton>:
bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 8027174:	b510      	push	{r4, lr}
 8027176:	b082      	sub	sp, #8
 8027178:	466b      	mov	r3, sp
 802717a:	e883 0003 	stmia.w	r3, {r0, r1}
 802717e:	4614      	mov	r4, r2
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8027180:	e893 0003 	ldmia.w	r3, {r0, r1}
 8027184:	f7fb fd9f 	bl	8022cc6 <mg_atone>
 8027188:	b110      	cbz	r0, 8027190 <mg_aton+0x1c>
 802718a:	2001      	movs	r0, #1
}
 802718c:	b002      	add	sp, #8
 802718e:	bd10      	pop	{r4, pc}
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8027190:	4622      	mov	r2, r4
 8027192:	ab02      	add	r3, sp, #8
 8027194:	e913 0003 	ldmdb	r3, {r0, r1}
 8027198:	f7ff ffca 	bl	8027130 <mg_atonl>
 802719c:	b108      	cbz	r0, 80271a2 <mg_aton+0x2e>
 802719e:	2001      	movs	r0, #1
 80271a0:	e7f4      	b.n	802718c <mg_aton+0x18>
 80271a2:	4622      	mov	r2, r4
 80271a4:	ab02      	add	r3, sp, #8
 80271a6:	e913 0003 	ldmdb	r3, {r0, r1}
 80271aa:	f7fb fb07 	bl	80227bc <mg_aton4>
 80271ae:	b108      	cbz	r0, 80271b4 <mg_aton+0x40>
 80271b0:	2001      	movs	r0, #1
 80271b2:	e7eb      	b.n	802718c <mg_aton+0x18>
         mg_aton6(str, addr);
 80271b4:	4622      	mov	r2, r4
 80271b6:	ab02      	add	r3, sp, #8
 80271b8:	e913 0003 	ldmdb	r3, {r0, r1}
 80271bc:	f7ff fd1e 	bl	8026bfc <mg_aton6>
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 80271c0:	2800      	cmp	r0, #0
 80271c2:	d0e3      	beq.n	802718c <mg_aton+0x18>
 80271c4:	2001      	movs	r0, #1
 80271c6:	e7e1      	b.n	802718c <mg_aton+0x18>

080271c8 <gettimestamp>:
static int64_t gettimestamp(const uint32_t *data) {
 80271c8:	b570      	push	{r4, r5, r6, lr}
 80271ca:	4604      	mov	r4, r0
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 80271cc:	6800      	ldr	r0, [r0, #0]
 80271ce:	f7ff ff9d 	bl	802710c <mg_ntohl>
 80271d2:	4606      	mov	r6, r0
 80271d4:	6860      	ldr	r0, [r4, #4]
 80271d6:	f7ff ff99 	bl	802710c <mg_ntohl>
  if (sec) sec -= SNTP_TIME_OFFSET;
 80271da:	b12e      	cbz	r6, 80271e8 <gettimestamp+0x20>
 80271dc:	f106 46f8 	add.w	r6, r6, #2080374784	@ 0x7c000000
 80271e0:	f506 06ab 	add.w	r6, r6, #5603328	@ 0x558000
 80271e4:	f506 76c0 	add.w	r6, r6, #384	@ 0x180
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 80271e8:	0ef5      	lsrs	r5, r6, #27
 80271ea:	0174      	lsls	r4, r6, #5
 80271ec:	1ba4      	subs	r4, r4, r6
 80271ee:	f165 0500 	sbc.w	r5, r5, #0
 80271f2:	00ad      	lsls	r5, r5, #2
 80271f4:	ea45 7594 	orr.w	r5, r5, r4, lsr #30
 80271f8:	00a4      	lsls	r4, r4, #2
 80271fa:	19a4      	adds	r4, r4, r6
 80271fc:	f145 0500 	adc.w	r5, r5, #0
 8027200:	00ed      	lsls	r5, r5, #3
 8027202:	ea45 7554 	orr.w	r5, r5, r4, lsr #29
 8027206:	00e4      	lsls	r4, r4, #3
 8027208:	f7e9 f994 	bl	8010534 <__aeabi_ui2d>
 802720c:	a309      	add	r3, pc, #36	@ (adr r3, 8027234 <gettimestamp+0x6c>)
 802720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027212:	f7e9 fb33 	bl	801087c <__aeabi_ddiv>
 8027216:	2200      	movs	r2, #0
 8027218:	4b05      	ldr	r3, [pc, #20]	@ (8027230 <gettimestamp+0x68>)
 802721a:	f7e9 fa05 	bl	8010628 <__aeabi_dmul>
 802721e:	f7e9 fdc7 	bl	8010db0 <__aeabi_d2lz>
 8027222:	1820      	adds	r0, r4, r0
}
 8027224:	eb45 0101 	adc.w	r1, r5, r1
 8027228:	bd70      	pop	{r4, r5, r6, pc}
 802722a:	bf00      	nop
 802722c:	f3af 8000 	nop.w
 8027230:	408f4000 	.word	0x408f4000
 8027234:	ffe00000 	.word	0xffe00000
 8027238:	41efffff 	.word	0x41efffff

0802723c <mg_ntohs>:
uint16_t mg_ntohs(uint16_t net) {
 802723c:	b082      	sub	sp, #8
  uint8_t data[2] = {0, 0};
 802723e:	2300      	movs	r3, #0
 8027240:	f8ad 3004 	strh.w	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 8027244:	f8ad 0004 	strh.w	r0, [sp, #4]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8027248:	b2c3      	uxtb	r3, r0
 802724a:	021b      	lsls	r3, r3, #8
}
 802724c:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
 8027250:	b002      	add	sp, #8
 8027252:	4770      	bx	lr

08027254 <csumfin>:
static uint16_t csumfin(uint32_t sum) {
 8027254:	b508      	push	{r3, lr}
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8027256:	e001      	b.n	802725c <csumfin+0x8>
 8027258:	fa13 f080 	uxtah	r0, r3, r0
 802725c:	0c03      	lsrs	r3, r0, #16
 802725e:	d1fb      	bne.n	8027258 <csumfin+0x4>
  return mg_htons(~sum & 0xffff);
 8027260:	43c0      	mvns	r0, r0
 8027262:	b280      	uxth	r0, r0
 8027264:	f7ff ffea 	bl	802723c <mg_ntohs>
}
 8027268:	bd08      	pop	{r3, pc}

0802726a <ipcsum>:
static uint16_t ipcsum(const void *buf, size_t len) {
 802726a:	b508      	push	{r3, lr}
 802726c:	460a      	mov	r2, r1
  uint32_t sum = csumup(0, buf, len);
 802726e:	4601      	mov	r1, r0
 8027270:	2000      	movs	r0, #0
 8027272:	f7fb fafb 	bl	802286c <csumup>
  return csumfin(sum);
 8027276:	f7ff ffed 	bl	8027254 <csumfin>
}
 802727a:	bd08      	pop	{r3, pc}

0802727c <tx_ip>:
                        size_t plen) {
 802727c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802727e:	4617      	mov	r7, r2
 8027280:	461e      	mov	r6, r3
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8027282:	6944      	ldr	r4, [r0, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 8027284:	4625      	mov	r5, r4
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 8027286:	680b      	ldr	r3, [r1, #0]
 8027288:	f845 3b0e 	str.w	r3, [r5], #14
 802728c:	888b      	ldrh	r3, [r1, #4]
 802728e:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 8027290:	6803      	ldr	r3, [r0, #0]
 8027292:	f8c4 3006 	str.w	r3, [r4, #6]
 8027296:	8883      	ldrh	r3, [r0, #4]
 8027298:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x800);
 802729a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 802729e:	f7ff ffcd 	bl	802723c <mg_ntohs>
 80272a2:	81a0      	strh	r0, [r4, #12]
  memset(ip, 0, sizeof(*ip));
 80272a4:	2100      	movs	r1, #0
 80272a6:	f8c4 100e 	str.w	r1, [r4, #14]
 80272aa:	6069      	str	r1, [r5, #4]
 80272ac:	60a9      	str	r1, [r5, #8]
 80272ae:	60e9      	str	r1, [r5, #12]
 80272b0:	6129      	str	r1, [r5, #16]
  ip->ver = 0x45;   // Version 4, header length 5 words
 80272b2:	2345      	movs	r3, #69	@ 0x45
 80272b4:	73a3      	strb	r3, [r4, #14]
  ip->frag = 0x40;  // Don't fragment
 80272b6:	2340      	movs	r3, #64	@ 0x40
 80272b8:	7523      	strb	r3, [r4, #20]
 80272ba:	7561      	strb	r1, [r4, #21]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 80272bc:	9807      	ldr	r0, [sp, #28]
 80272be:	3014      	adds	r0, #20
 80272c0:	b280      	uxth	r0, r0
 80272c2:	f7ff ffbb 	bl	802723c <mg_ntohs>
 80272c6:	8220      	strh	r0, [r4, #16]
  ip->ttl = 64;
 80272c8:	2340      	movs	r3, #64	@ 0x40
 80272ca:	75a3      	strb	r3, [r4, #22]
  ip->proto = proto;
 80272cc:	75e7      	strb	r7, [r4, #23]
  ip->src = ip_src;
 80272ce:	f8c4 601a 	str.w	r6, [r4, #26]
  ip->dst = ip_dst;
 80272d2:	9b06      	ldr	r3, [sp, #24]
 80272d4:	f8c4 301e 	str.w	r3, [r4, #30]
  ip->csum = ipcsum(ip, sizeof(*ip));
 80272d8:	2114      	movs	r1, #20
 80272da:	4628      	mov	r0, r5
 80272dc:	f7ff ffc5 	bl	802726a <ipcsum>
 80272e0:	8320      	strh	r0, [r4, #24]
}
 80272e2:	4628      	mov	r0, r5
 80272e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080272e6 <rx_icmp>:
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 80272e6:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80272e8:	781b      	ldrb	r3, [r3, #0]
 80272ea:	2b08      	cmp	r3, #8
 80272ec:	d000      	beq.n	80272f0 <rx_icmp+0xa>
 80272ee:	4770      	bx	lr
static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80272f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80272f4:	b083      	sub	sp, #12
 80272f6:	4605      	mov	r5, r0
 80272f8:	460c      	mov	r4, r1
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 80272fa:	69ca      	ldr	r2, [r1, #28]
 80272fc:	b11a      	cbz	r2, 8027306 <rx_icmp+0x20>
 80272fe:	6911      	ldr	r1, [r2, #16]
 8027300:	6883      	ldr	r3, [r0, #8]
 8027302:	4299      	cmp	r1, r3
 8027304:	d002      	beq.n	802730c <rx_icmp+0x26>
}
 8027306:	b003      	add	sp, #12
 8027308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 802730c:	6986      	ldr	r6, [r0, #24]
 802730e:	3e26      	subs	r6, #38	@ 0x26
 8027310:	68e1      	ldr	r1, [r4, #12]
    if (plen > space) plen = space;
 8027312:	428e      	cmp	r6, r1
 8027314:	d300      	bcc.n	8027318 <rx_icmp+0x32>
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8027316:	460e      	mov	r6, r1
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 8027318:	6921      	ldr	r1, [r4, #16]
 802731a:	f106 0804 	add.w	r8, r6, #4
 802731e:	f8cd 8004 	str.w	r8, [sp, #4]
 8027322:	68d2      	ldr	r2, [r2, #12]
 8027324:	9200      	str	r2, [sp, #0]
 8027326:	2201      	movs	r2, #1
 8027328:	3106      	adds	r1, #6
 802732a:	4628      	mov	r0, r5
 802732c:	f7ff ffa6 	bl	802727c <tx_ip>
 8027330:	4607      	mov	r7, r0
    struct icmp *icmp = (struct icmp *) (ip + 1);
 8027332:	f100 0914 	add.w	r9, r0, #20
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 8027336:	2300      	movs	r3, #0
 8027338:	6143      	str	r3, [r0, #20]
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 802733a:	4632      	mov	r2, r6
 802733c:	68a1      	ldr	r1, [r4, #8]
 802733e:	3018      	adds	r0, #24
 8027340:	f006 ffda 	bl	802e2f8 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 8027344:	4641      	mov	r1, r8
 8027346:	4648      	mov	r0, r9
 8027348:	f7ff ff8f 	bl	802726a <ipcsum>
 802734c:	82f8      	strh	r0, [r7, #22]
    ether_output(ifp, hlen + plen);
 802734e:	f106 0126 	add.w	r1, r6, #38	@ 0x26
 8027352:	4628      	mov	r0, r5
 8027354:	f7fb fa9b 	bl	802288e <ether_output>
}
 8027358:	e7d5      	b.n	8027306 <rx_icmp+0x20>

0802735a <rx_ip6>:
static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802735a:	b538      	push	{r3, r4, r5, lr}
 802735c:	4605      	mov	r5, r0
 802735e:	460c      	mov	r4, r1
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 8027360:	6a09      	ldr	r1, [r1, #32]
 8027362:	798b      	ldrb	r3, [r1, #6]
 8027364:	2b01      	cmp	r3, #1
 8027366:	d00e      	beq.n	8027386 <rx_ip6+0x2c>
 8027368:	2b3a      	cmp	r3, #58	@ 0x3a
 802736a:	d00c      	beq.n	8027386 <rx_ip6+0x2c>
  } else if (pkt->ip6->proto == 17) {
 802736c:	2b11      	cmp	r3, #17
 802736e:	d110      	bne.n	8027392 <rx_ip6+0x38>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 8027370:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8027374:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8027376:	68e3      	ldr	r3, [r4, #12]
 8027378:	2b07      	cmp	r3, #7
 802737a:	d90a      	bls.n	8027392 <rx_ip6+0x38>
    mkpay(pkt, pkt->udp + 1);
 802737c:	3130      	adds	r1, #48	@ 0x30
 802737e:	4620      	mov	r0, r4
 8027380:	f7fe fbd9 	bl	8025b36 <mkpay>
 8027384:	e005      	b.n	8027392 <rx_ip6+0x38>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 8027386:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 802738a:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 802738c:	68e3      	ldr	r3, [r4, #12]
 802738e:	2b03      	cmp	r3, #3
 8027390:	d800      	bhi.n	8027394 <rx_ip6+0x3a>
}
 8027392:	bd38      	pop	{r3, r4, r5, pc}
    mkpay(pkt, pkt->icmp + 1);
 8027394:	312c      	adds	r1, #44	@ 0x2c
 8027396:	4620      	mov	r0, r4
 8027398:	f7fe fbcd 	bl	8025b36 <mkpay>
    rx_icmp(ifp, pkt);
 802739c:	4621      	mov	r1, r4
 802739e:	4628      	mov	r0, r5
 80273a0:	f7ff ffa1 	bl	80272e6 <rx_icmp>
 80273a4:	e7f5      	b.n	8027392 <rx_ip6+0x38>

080273a6 <tx_udp>:
                   const void *buf, size_t len) {
 80273a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80273aa:	b083      	sub	sp, #12
 80273ac:	4606      	mov	r6, r0
 80273ae:	4698      	mov	r8, r3
 80273b0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80273b2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 80273b4:	f105 0308 	add.w	r3, r5, #8
 80273b8:	9301      	str	r3, [sp, #4]
 80273ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80273bc:	9300      	str	r3, [sp, #0]
 80273be:	4613      	mov	r3, r2
 80273c0:	2211      	movs	r2, #17
 80273c2:	f7ff ff5b 	bl	802727c <tx_ip>
 80273c6:	4604      	mov	r4, r0
  struct udp *udp = (struct udp *) (ip + 1);
 80273c8:	f100 0914 	add.w	r9, r0, #20
  udp->sport = sport;
 80273cc:	f8a0 8014 	strh.w	r8, [r0, #20]
  udp->dport = dport;
 80273d0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80273d4:	82c3      	strh	r3, [r0, #22]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 80273d6:	f105 0008 	add.w	r0, r5, #8
 80273da:	b280      	uxth	r0, r0
 80273dc:	f7ff ff2e 	bl	802723c <mg_ntohs>
 80273e0:	8320      	strh	r0, [r4, #24]
  udp->csum = 0;
 80273e2:	2000      	movs	r0, #0
 80273e4:	76a0      	strb	r0, [r4, #26]
 80273e6:	76e0      	strb	r0, [r4, #27]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 80273e8:	2208      	movs	r2, #8
 80273ea:	4649      	mov	r1, r9
 80273ec:	f7fb fa3e 	bl	802286c <csumup>
  cs = csumup(cs, buf, len);
 80273f0:	462a      	mov	r2, r5
 80273f2:	4639      	mov	r1, r7
 80273f4:	f7fb fa3a 	bl	802286c <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 80273f8:	2204      	movs	r2, #4
 80273fa:	f104 010c 	add.w	r1, r4, #12
 80273fe:	f7fb fa35 	bl	802286c <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8027402:	2204      	movs	r2, #4
 8027404:	f104 0110 	add.w	r1, r4, #16
 8027408:	f7fb fa30 	bl	802286c <csumup>
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 802740c:	7a63      	ldrb	r3, [r4, #9]
 802740e:	442b      	add	r3, r5
 8027410:	4418      	add	r0, r3
  udp->csum = csumfin(cs);
 8027412:	3008      	adds	r0, #8
 8027414:	f7ff ff1e 	bl	8027254 <csumfin>
 8027418:	8360      	strh	r0, [r4, #26]
  memmove(udp + 1, buf, len);
 802741a:	462a      	mov	r2, r5
 802741c:	4639      	mov	r1, r7
 802741e:	f104 001c 	add.w	r0, r4, #28
 8027422:	f005 f9d3 	bl	802c7cc <memmove>
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 8027426:	f105 012a 	add.w	r1, r5, #42	@ 0x2a
 802742a:	4630      	mov	r0, r6
 802742c:	f7fb fa2f 	bl	802288e <ether_output>
}
 8027430:	b003      	add	sp, #12
 8027432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08027436 <arp_ask>:
static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 8027436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027438:	4605      	mov	r5, r0
 802743a:	460f      	mov	r7, r1
  struct eth *eth = (struct eth *) ifp->tx.buf;
 802743c:	6944      	ldr	r4, [r0, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 802743e:	4626      	mov	r6, r4
  memset(eth->dst, 255, sizeof(eth->dst));
 8027440:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027444:	f846 3b0e 	str.w	r3, [r6], #14
 8027448:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 802744a:	6803      	ldr	r3, [r0, #0]
 802744c:	f8c4 3006 	str.w	r3, [r4, #6]
 8027450:	8883      	ldrh	r3, [r0, #4]
 8027452:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x806);
 8027454:	f640 0006 	movw	r0, #2054	@ 0x806
 8027458:	f7ff fef0 	bl	802723c <mg_ntohs>
 802745c:	81a0      	strh	r0, [r4, #12]
  memset(arp, 0, sizeof(*arp));
 802745e:	2300      	movs	r3, #0
 8027460:	f8c4 300e 	str.w	r3, [r4, #14]
 8027464:	6073      	str	r3, [r6, #4]
 8027466:	60b3      	str	r3, [r6, #8]
 8027468:	60f3      	str	r3, [r6, #12]
 802746a:	6133      	str	r3, [r6, #16]
 802746c:	6173      	str	r3, [r6, #20]
 802746e:	61b3      	str	r3, [r6, #24]
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8027470:	2001      	movs	r0, #1
 8027472:	f7ff fee3 	bl	802723c <mg_ntohs>
 8027476:	4606      	mov	r6, r0
 8027478:	81e0      	strh	r0, [r4, #14]
 802747a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 802747e:	f7ff fedd 	bl	802723c <mg_ntohs>
 8027482:	8220      	strh	r0, [r4, #16]
 8027484:	2306      	movs	r3, #6
 8027486:	74a3      	strb	r3, [r4, #18]
  arp->plen = 4;
 8027488:	2304      	movs	r3, #4
 802748a:	74e3      	strb	r3, [r4, #19]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 802748c:	82a6      	strh	r6, [r4, #20]
 802748e:	f8c4 7026 	str.w	r7, [r4, #38]	@ 0x26
 8027492:	68ab      	ldr	r3, [r5, #8]
 8027494:	61e3      	str	r3, [r4, #28]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8027496:	682b      	ldr	r3, [r5, #0]
 8027498:	f8c4 3016 	str.w	r3, [r4, #22]
 802749c:	88ab      	ldrh	r3, [r5, #4]
 802749e:	8363      	strh	r3, [r4, #26]
  ether_output(ifp, PDIFF(eth, arp + 1));
 80274a0:	212a      	movs	r1, #42	@ 0x2a
 80274a2:	4628      	mov	r0, r5
 80274a4:	f7fb f9f3 	bl	802288e <ether_output>
}
 80274a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080274aa <mg_open_listener>:
bool mg_open_listener(struct mg_connection *c, const char *url) {
 80274aa:	b510      	push	{r4, lr}
 80274ac:	4604      	mov	r4, r0
  c->loc.port = mg_htons(mg_url_port(url));
 80274ae:	4608      	mov	r0, r1
 80274b0:	f7ff fd74 	bl	8026f9c <mg_url_port>
 80274b4:	f7ff fec2 	bl	802723c <mg_ntohs>
 80274b8:	8320      	strh	r0, [r4, #24]
}
 80274ba:	2001      	movs	r0, #1
 80274bc:	bd10      	pop	{r4, pc}
	...

080274c0 <tx_dhcp>:
                    bool ciaddr) {
 80274c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80274c4:	b0c8      	sub	sp, #288	@ 0x120
 80274c6:	4604      	mov	r4, r0
 80274c8:	460e      	mov	r6, r1
 80274ca:	4615      	mov	r5, r2
 80274cc:	4698      	mov	r8, r3
 80274ce:	f89d 7140 	ldrb.w	r7, [sp, #320]	@ 0x140
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 80274d2:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80274d6:	4917      	ldr	r1, [pc, #92]	@ (8027534 <tx_dhcp+0x74>)
 80274d8:	a804      	add	r0, sp, #16
 80274da:	f006 ff0d 	bl	802e2f8 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 80274de:	4816      	ldr	r0, [pc, #88]	@ (8027538 <tx_dhcp+0x78>)
 80274e0:	f7ff fe14 	bl	802710c <mg_ntohl>
 80274e4:	903f      	str	r0, [sp, #252]	@ 0xfc
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 80274e6:	6820      	ldr	r0, [r4, #0]
 80274e8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80274ea:	88a3      	ldrh	r3, [r4, #4]
 80274ec:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 80274f0:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80274f4:	9305      	str	r3, [sp, #20]
  memcpy(&dhcp.options, opts, optslen);
 80274f6:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 80274f8:	994e      	ldr	r1, [sp, #312]	@ 0x138
 80274fa:	a840      	add	r0, sp, #256	@ 0x100
 80274fc:	f006 fefc 	bl	802e2f8 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 8027500:	b107      	cbz	r7, 8027504 <tx_dhcp+0x44>
 8027502:	9507      	str	r5, [sp, #28]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 8027504:	2044      	movs	r0, #68	@ 0x44
 8027506:	f7ff fe99 	bl	802723c <mg_ntohs>
 802750a:	4607      	mov	r7, r0
 802750c:	2043      	movs	r0, #67	@ 0x43
 802750e:	f7ff fe95 	bl	802723c <mg_ntohs>
 8027512:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8027516:	9303      	str	r3, [sp, #12]
 8027518:	ab04      	add	r3, sp, #16
 802751a:	9302      	str	r3, [sp, #8]
 802751c:	9001      	str	r0, [sp, #4]
 802751e:	f8cd 8000 	str.w	r8, [sp]
 8027522:	463b      	mov	r3, r7
 8027524:	462a      	mov	r2, r5
 8027526:	4631      	mov	r1, r6
 8027528:	4620      	mov	r0, r4
 802752a:	f7ff ff3c 	bl	80273a6 <tx_udp>
}
 802752e:	b048      	add	sp, #288	@ 0x120
 8027530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027534:	080378c4 	.word	0x080378c4
 8027538:	63825363 	.word	0x63825363

0802753c <rx_dhcp_server>:
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802753c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027540:	b0d0      	sub	sp, #320	@ 0x140
 8027542:	460d      	mov	r5, r1
  uint8_t op = 0, *p = pkt->dhcp->options,
 8027544:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8027546:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 802754a:	6809      	ldr	r1, [r1, #0]
 802754c:	686a      	ldr	r2, [r5, #4]
 802754e:	eb01 0802 	add.w	r8, r1, r2
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8027552:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8027556:	4543      	cmp	r3, r8
 8027558:	d827      	bhi.n	80275aa <rx_dhcp_server+0x6e>
 802755a:	4606      	mov	r6, r0
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 802755c:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8027560:	495e      	ldr	r1, [pc, #376]	@ (80276dc <rx_dhcp_server+0x1a0>)
 8027562:	a80c      	add	r0, sp, #48	@ 0x30
 8027564:	f006 fec8 	bl	802e2f8 <memcpy>
  res.yiaddr = ifp->ip;
 8027568:	68b3      	ldr	r3, [r6, #8]
 802756a:	9310      	str	r3, [sp, #64]	@ 0x40
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 802756c:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8027570:	3301      	adds	r3, #1
 8027572:	f88d 3043 	strb.w	r3, [sp, #67]	@ 0x43
  uint8_t op = 0, *p = pkt->dhcp->options,
 8027576:	2700      	movs	r7, #0
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8027578:	e002      	b.n	8027580 <rx_dhcp_server+0x44>
    p += p[1] + 2;
 802757a:	7863      	ldrb	r3, [r4, #1]
 802757c:	3302      	adds	r3, #2
 802757e:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8027580:	1c63      	adds	r3, r4, #1
 8027582:	4543      	cmp	r3, r8
 8027584:	d20c      	bcs.n	80275a0 <rx_dhcp_server+0x64>
 8027586:	7823      	ldrb	r3, [r4, #0]
 8027588:	2bff      	cmp	r3, #255	@ 0xff
 802758a:	d009      	beq.n	80275a0 <rx_dhcp_server+0x64>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 802758c:	2b35      	cmp	r3, #53	@ 0x35
 802758e:	d1f4      	bne.n	802757a <rx_dhcp_server+0x3e>
 8027590:	7863      	ldrb	r3, [r4, #1]
 8027592:	2b01      	cmp	r3, #1
 8027594:	d1f1      	bne.n	802757a <rx_dhcp_server+0x3e>
 8027596:	1ca3      	adds	r3, r4, #2
 8027598:	4543      	cmp	r3, r8
 802759a:	d2ee      	bcs.n	802757a <rx_dhcp_server+0x3e>
      op = p[2];
 802759c:	78a7      	ldrb	r7, [r4, #2]
 802759e:	e7ec      	b.n	802757a <rx_dhcp_server+0x3e>
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 80275a0:	2f01      	cmp	r7, #1
 80275a2:	f000 808a 	beq.w	80276ba <rx_dhcp_server+0x17e>
 80275a6:	2f03      	cmp	r7, #3
 80275a8:	d002      	beq.n	80275b0 <rx_dhcp_server+0x74>
}
 80275aa:	b050      	add	sp, #320	@ 0x140
 80275ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 80275b0:	2205      	movs	r2, #5
    uint8_t opts[] = {
 80275b2:	2335      	movs	r3, #53	@ 0x35
 80275b4:	f88d 3014 	strb.w	r3, [sp, #20]
 80275b8:	2301      	movs	r3, #1
 80275ba:	f88d 3015 	strb.w	r3, [sp, #21]
 80275be:	f88d 2016 	strb.w	r2, [sp, #22]
 80275c2:	f88d 3017 	strb.w	r3, [sp, #23]
 80275c6:	2204      	movs	r2, #4
 80275c8:	f88d 2018 	strb.w	r2, [sp, #24]
 80275cc:	2300      	movs	r3, #0
 80275ce:	f88d 3019 	strb.w	r3, [sp, #25]
 80275d2:	f88d 301a 	strb.w	r3, [sp, #26]
 80275d6:	f88d 301b 	strb.w	r3, [sp, #27]
 80275da:	f88d 301c 	strb.w	r3, [sp, #28]
 80275de:	2136      	movs	r1, #54	@ 0x36
 80275e0:	f88d 101d 	strb.w	r1, [sp, #29]
 80275e4:	f88d 201e 	strb.w	r2, [sp, #30]
 80275e8:	f88d 301f 	strb.w	r3, [sp, #31]
 80275ec:	f88d 3020 	strb.w	r3, [sp, #32]
 80275f0:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 80275f4:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 80275f8:	230c      	movs	r3, #12
 80275fa:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80275fe:	2303      	movs	r3, #3
 8027600:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8027604:	236d      	movs	r3, #109	@ 0x6d
 8027606:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
 802760a:	2369      	movs	r3, #105	@ 0x69
 802760c:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
 8027610:	2370      	movs	r3, #112	@ 0x70
 8027612:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8027616:	2333      	movs	r3, #51	@ 0x33
 8027618:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 802761c:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
 8027620:	23ff      	movs	r3, #255	@ 0xff
 8027622:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8027626:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 802762a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 802762e:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
 8027632:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 8027636:	f8d5 e030 	ldr.w	lr, [r5, #48]	@ 0x30
 802763a:	f8de 001c 	ldr.w	r0, [lr, #28]
 802763e:	9013      	str	r0, [sp, #76]	@ 0x4c
 8027640:	f8be 3020 	ldrh.w	r3, [lr, #32]
 8027644:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 8027648:	68f3      	ldr	r3, [r6, #12]
 802764a:	f8cd 3019 	str.w	r3, [sp, #25]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 802764e:	68b3      	ldr	r3, [r6, #8]
 8027650:	f8cd 301f 	str.w	r3, [sp, #31]
    memcpy(&res.options, opts, sizeof(opts));
 8027654:	f50d 7c90 	add.w	ip, sp, #288	@ 0x120
 8027658:	ac05      	add	r4, sp, #20
 802765a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802765c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8027660:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8027664:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8027668:	f82c 2b02 	strh.w	r2, [ip], #2
 802766c:	0c12      	lsrs	r2, r2, #16
 802766e:	f88c 2000 	strb.w	r2, [ip]
    res.magic = pkt->dhcp->magic;
 8027672:	f8de 30ec 	ldr.w	r3, [lr, #236]	@ 0xec
 8027676:	9347      	str	r3, [sp, #284]	@ 0x11c
    res.xid = pkt->dhcp->xid;
 8027678:	f8de 3004 	ldr.w	r3, [lr, #4]
 802767c:	930d      	str	r3, [sp, #52]	@ 0x34
    if (ifp->enable_get_gateway) {
 802767e:	7fb3      	ldrb	r3, [r6, #30]
 8027680:	b9eb      	cbnz	r3, 80276be <rx_dhcp_server+0x182>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8027682:	692c      	ldr	r4, [r5, #16]
 8027684:	3406      	adds	r4, #6
 8027686:	f8d6 8008 	ldr.w	r8, [r6, #8]
 802768a:	2043      	movs	r0, #67	@ 0x43
 802768c:	f7ff fdd6 	bl	802723c <mg_ntohs>
 8027690:	4605      	mov	r5, r0
 8027692:	2f01      	cmp	r7, #1
 8027694:	d01e      	beq.n	80276d4 <rx_dhcp_server+0x198>
 8027696:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8027698:	2044      	movs	r0, #68	@ 0x44
 802769a:	f7ff fdcf 	bl	802723c <mg_ntohs>
 802769e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80276a2:	9303      	str	r3, [sp, #12]
 80276a4:	ab0c      	add	r3, sp, #48	@ 0x30
 80276a6:	9302      	str	r3, [sp, #8]
 80276a8:	9001      	str	r0, [sp, #4]
 80276aa:	9700      	str	r7, [sp, #0]
 80276ac:	462b      	mov	r3, r5
 80276ae:	4642      	mov	r2, r8
 80276b0:	4621      	mov	r1, r4
 80276b2:	4630      	mov	r0, r6
 80276b4:	f7ff fe77 	bl	80273a6 <tx_udp>
 80276b8:	e777      	b.n	80275aa <rx_dhcp_server+0x6e>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 80276ba:	2202      	movs	r2, #2
 80276bc:	e779      	b.n	80275b2 <rx_dhcp_server+0x76>
      ifp->gw = res.yiaddr;
 80276be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80276c0:	6133      	str	r3, [r6, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 80276c2:	692b      	ldr	r3, [r5, #16]
 80276c4:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80276c8:	f8c6 2046 	str.w	r2, [r6, #70]	@ 0x46
 80276cc:	895b      	ldrh	r3, [r3, #10]
 80276ce:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 80276d2:	e7d6      	b.n	8027682 <rx_dhcp_server+0x146>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 80276d4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80276d8:	e7de      	b.n	8027698 <rx_dhcp_server+0x15c>
 80276da:	bf00      	nop
 80276dc:	080379d4 	.word	0x080379d4

080276e0 <print_ip6>:
static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 80276e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80276e4:	b08b      	sub	sp, #44	@ 0x2c
 80276e6:	4605      	mov	r5, r0
 80276e8:	9108      	str	r1, [sp, #32]
 80276ea:	4614      	mov	r4, r2
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80276ec:	8810      	ldrh	r0, [r2, #0]
 80276ee:	f7ff fda5 	bl	802723c <mg_ntohs>
 80276f2:	9009      	str	r0, [sp, #36]	@ 0x24
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 80276f4:	8860      	ldrh	r0, [r4, #2]
 80276f6:	f7ff fda1 	bl	802723c <mg_ntohs>
 80276fa:	4606      	mov	r6, r0
 80276fc:	88a0      	ldrh	r0, [r4, #4]
 80276fe:	f7ff fd9d 	bl	802723c <mg_ntohs>
 8027702:	4607      	mov	r7, r0
 8027704:	88e0      	ldrh	r0, [r4, #6]
 8027706:	f7ff fd99 	bl	802723c <mg_ntohs>
 802770a:	4680      	mov	r8, r0
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 802770c:	8920      	ldrh	r0, [r4, #8]
 802770e:	f7ff fd95 	bl	802723c <mg_ntohs>
 8027712:	4681      	mov	r9, r0
 8027714:	8960      	ldrh	r0, [r4, #10]
 8027716:	f7ff fd91 	bl	802723c <mg_ntohs>
 802771a:	4682      	mov	sl, r0
 802771c:	89a0      	ldrh	r0, [r4, #12]
 802771e:	f7ff fd8d 	bl	802723c <mg_ntohs>
 8027722:	4683      	mov	fp, r0
                    mg_ntohs(p[7]));
 8027724:	89e0      	ldrh	r0, [r4, #14]
 8027726:	f7ff fd89 	bl	802723c <mg_ntohs>
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 802772a:	9006      	str	r0, [sp, #24]
 802772c:	f8cd b014 	str.w	fp, [sp, #20]
 8027730:	f8cd a010 	str.w	sl, [sp, #16]
 8027734:	f8cd 900c 	str.w	r9, [sp, #12]
 8027738:	f8cd 8008 	str.w	r8, [sp, #8]
 802773c:	9701      	str	r7, [sp, #4]
 802773e:	9600      	str	r6, [sp, #0]
 8027740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027742:	4a04      	ldr	r2, [pc, #16]	@ (8027754 <print_ip6+0x74>)
 8027744:	9908      	ldr	r1, [sp, #32]
 8027746:	4628      	mov	r0, r5
 8027748:	f7fd ff12 	bl	8025570 <mg_xprintf>
}
 802774c:	b00b      	add	sp, #44	@ 0x2c
 802774e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027752:	bf00      	nop
 8027754:	0803bb68 	.word	0x0803bb68

08027758 <mg_print_ip>:
size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8027758:	b510      	push	{r4, lr}
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 802775a:	6813      	ldr	r3, [r2, #0]
 802775c:	1d1c      	adds	r4, r3, #4
 802775e:	6014      	str	r4, [r2, #0]
 8027760:	681a      	ldr	r2, [r3, #0]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8027762:	7cd3      	ldrb	r3, [r2, #19]
 8027764:	b913      	cbnz	r3, 802776c <mg_print_ip+0x14>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8027766:	f7fd ff13 	bl	8025590 <print_ip4>
}
 802776a:	bd10      	pop	{r4, pc}
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 802776c:	f7ff ffb8 	bl	80276e0 <print_ip6>
 8027770:	e7fb      	b.n	802776a <mg_print_ip+0x12>
	...

08027774 <mg_print_ip_port>:
size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8027774:	b570      	push	{r4, r5, r6, lr}
 8027776:	b082      	sub	sp, #8
 8027778:	4604      	mov	r4, r0
 802777a:	460d      	mov	r5, r1
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 802777c:	6813      	ldr	r3, [r2, #0]
 802777e:	1d19      	adds	r1, r3, #4
 8027780:	6011      	str	r1, [r2, #0]
 8027782:	681e      	ldr	r6, [r3, #0]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8027784:	8a30      	ldrh	r0, [r6, #16]
 8027786:	f7ff fd59 	bl	802723c <mg_ntohs>
 802778a:	9001      	str	r0, [sp, #4]
 802778c:	9600      	str	r6, [sp, #0]
 802778e:	4b04      	ldr	r3, [pc, #16]	@ (80277a0 <mg_print_ip_port+0x2c>)
 8027790:	4a04      	ldr	r2, [pc, #16]	@ (80277a4 <mg_print_ip_port+0x30>)
 8027792:	4629      	mov	r1, r5
 8027794:	4620      	mov	r0, r4
 8027796:	f7fd feeb 	bl	8025570 <mg_xprintf>
}
 802779a:	b002      	add	sp, #8
 802779c:	bd70      	pop	{r4, r5, r6, pc}
 802779e:	bf00      	nop
 80277a0:	08027759 	.word	0x08027759
 80277a4:	0803bb84 	.word	0x0803bb84

080277a8 <mg_crc32>:
  crc = ~crc;
 80277a8:	43c0      	mvns	r0, r0
  while (len--) {
 80277aa:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 80277ae:	b1e2      	cbz	r2, 80277ea <mg_crc32+0x42>
uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 80277b0:	b410      	push	{r4}
    uint8_t b = *(uint8_t *) buf++;
 80277b2:	f811 3b01 	ldrb.w	r3, [r1], #1
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 80277b6:	ea83 0200 	eor.w	r2, r3, r0
 80277ba:	f002 020f 	and.w	r2, r2, #15
 80277be:	4c0c      	ldr	r4, [pc, #48]	@ (80277f0 <mg_crc32+0x48>)
 80277c0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80277c4:	ea82 1010 	eor.w	r0, r2, r0, lsr #4
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 80277c8:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 80277cc:	f003 030f 	and.w	r3, r3, #15
 80277d0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80277d4:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
  while (len--) {
 80277d8:	4662      	mov	r2, ip
 80277da:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80277de:	2a00      	cmp	r2, #0
 80277e0:	d1e7      	bne.n	80277b2 <mg_crc32+0xa>
}
 80277e2:	43c0      	mvns	r0, r0
 80277e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80277e8:	4770      	bx	lr
 80277ea:	43c0      	mvns	r0, r0
 80277ec:	4770      	bx	lr
 80277ee:	bf00      	nop
 80277f0:	0803d650 	.word	0x0803d650

080277f4 <mg_check_ip_acl>:
int mg_check_ip_acl(struct mg_str acl, struct mg_addr *remote_ip) {
 80277f4:	b530      	push	{r4, r5, lr}
 80277f6:	b089      	sub	sp, #36	@ 0x24
 80277f8:	ab02      	add	r3, sp, #8
 80277fa:	e883 0003 	stmia.w	r3, {r0, r1}
  int allowed = acl.len == 0 ? '+' : '-';  // If any ACL is set, deny by default
 80277fe:	bb19      	cbnz	r1, 8027848 <mg_check_ip_acl+0x54>
 8027800:	252b      	movs	r5, #43	@ 0x2b
  if (remote_ip->is_ip6) {
 8027802:	7cd3      	ldrb	r3, [r2, #19]
 8027804:	bb73      	cbnz	r3, 8027864 <mg_check_ip_acl+0x70>
    memcpy((void *) &remote_ip4, remote_ip->ip, sizeof(remote_ip4));
 8027806:	6814      	ldr	r4, [r2, #0]
    while (mg_span(acl, &entry, &acl, ',')) {
 8027808:	ab02      	add	r3, sp, #8
 802780a:	222c      	movs	r2, #44	@ 0x2c
 802780c:	9200      	str	r2, [sp, #0]
 802780e:	aa06      	add	r2, sp, #24
 8027810:	e893 0003 	ldmia.w	r3, {r0, r1}
 8027814:	f7fe fb8d 	bl	8025f32 <mg_span>
 8027818:	b1f0      	cbz	r0, 8027858 <mg_check_ip_acl+0x64>
      if (entry.buf[0] != '+' && entry.buf[0] != '-') return -1;
 802781a:	9806      	ldr	r0, [sp, #24]
 802781c:	7803      	ldrb	r3, [r0, #0]
 802781e:	2b2b      	cmp	r3, #43	@ 0x2b
 8027820:	d001      	beq.n	8027826 <mg_check_ip_acl+0x32>
 8027822:	2b2d      	cmp	r3, #45	@ 0x2d
 8027824:	d112      	bne.n	802784c <mg_check_ip_acl+0x58>
      if (parse_net(&entry.buf[1], &net, &mask) == 0) return -2;
 8027826:	aa05      	add	r2, sp, #20
 8027828:	a904      	add	r1, sp, #16
 802782a:	3001      	adds	r0, #1
 802782c:	f7fc fb52 	bl	8023ed4 <parse_net>
 8027830:	b178      	cbz	r0, 8027852 <mg_check_ip_acl+0x5e>
      if ((mg_ntohl(remote_ip4) & mask) == net) allowed = entry.buf[0];
 8027832:	4620      	mov	r0, r4
 8027834:	f7ff fc6a 	bl	802710c <mg_ntohl>
 8027838:	9b05      	ldr	r3, [sp, #20]
 802783a:	4018      	ands	r0, r3
 802783c:	9b04      	ldr	r3, [sp, #16]
 802783e:	4298      	cmp	r0, r3
 8027840:	d1e2      	bne.n	8027808 <mg_check_ip_acl+0x14>
 8027842:	9b06      	ldr	r3, [sp, #24]
 8027844:	781d      	ldrb	r5, [r3, #0]
 8027846:	e7df      	b.n	8027808 <mg_check_ip_acl+0x14>
  int allowed = acl.len == 0 ? '+' : '-';  // If any ACL is set, deny by default
 8027848:	252d      	movs	r5, #45	@ 0x2d
 802784a:	e7da      	b.n	8027802 <mg_check_ip_acl+0xe>
      if (entry.buf[0] != '+' && entry.buf[0] != '-') return -1;
 802784c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8027850:	e006      	b.n	8027860 <mg_check_ip_acl+0x6c>
      if (parse_net(&entry.buf[1], &net, &mask) == 0) return -2;
 8027852:	f06f 0001 	mvn.w	r0, #1
 8027856:	e003      	b.n	8027860 <mg_check_ip_acl+0x6c>
  return allowed == '+';
 8027858:	2d2b      	cmp	r5, #43	@ 0x2b
 802785a:	bf14      	ite	ne
 802785c:	2000      	movne	r0, #0
 802785e:	2001      	moveq	r0, #1
}
 8027860:	b009      	add	sp, #36	@ 0x24
 8027862:	bd30      	pop	{r4, r5, pc}
    return -1;  // TODO(): handle IPv6 ACL and addresses
 8027864:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8027868:	e7fa      	b.n	8027860 <mg_check_ip_acl+0x6c>

0802786a <mg_path_is_sane>:
bool mg_path_is_sane(const struct mg_str path) {
 802786a:	b082      	sub	sp, #8
 802786c:	ab02      	add	r3, sp, #8
 802786e:	e903 0003 	stmdb	r3, {r0, r1}
  const char *s = path.buf;
 8027872:	4602      	mov	r2, r0
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 8027874:	7803      	ldrb	r3, [r0, #0]
 8027876:	2b2e      	cmp	r3, #46	@ 0x2e
 8027878:	d106      	bne.n	8027888 <mg_path_is_sane+0x1e>
 802787a:	7843      	ldrb	r3, [r0, #1]
 802787c:	2b2e      	cmp	r3, #46	@ 0x2e
 802787e:	d103      	bne.n	8027888 <mg_path_is_sane+0x1e>
 8027880:	2000      	movs	r0, #0
 8027882:	e015      	b.n	80278b0 <mg_path_is_sane+0x46>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 8027884:	3201      	adds	r2, #1
 8027886:	3901      	subs	r1, #1
 8027888:	7813      	ldrb	r3, [r2, #0]
 802788a:	b183      	cbz	r3, 80278ae <mg_path_is_sane+0x44>
 802788c:	b169      	cbz	r1, 80278aa <mg_path_is_sane+0x40>
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 802788e:	2b2f      	cmp	r3, #47	@ 0x2f
 8027890:	d001      	beq.n	8027896 <mg_path_is_sane+0x2c>
 8027892:	2b5c      	cmp	r3, #92	@ 0x5c
 8027894:	d1f6      	bne.n	8027884 <mg_path_is_sane+0x1a>
 8027896:	2901      	cmp	r1, #1
 8027898:	d9f4      	bls.n	8027884 <mg_path_is_sane+0x1a>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 802789a:	7853      	ldrb	r3, [r2, #1]
 802789c:	2b2e      	cmp	r3, #46	@ 0x2e
 802789e:	d1f1      	bne.n	8027884 <mg_path_is_sane+0x1a>
 80278a0:	7893      	ldrb	r3, [r2, #2]
 80278a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80278a4:	d1ee      	bne.n	8027884 <mg_path_is_sane+0x1a>
 80278a6:	2000      	movs	r0, #0
 80278a8:	e002      	b.n	80278b0 <mg_path_is_sane+0x46>
  return true;
 80278aa:	2001      	movs	r0, #1
 80278ac:	e000      	b.n	80278b0 <mg_path_is_sane+0x46>
 80278ae:	2001      	movs	r0, #1
}
 80278b0:	b002      	add	sp, #8
 80278b2:	4770      	bx	lr

080278b4 <mg_millis>:
uint64_t mg_millis(void) {
 80278b4:	b508      	push	{r3, lr}
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 80278b6:	f7f3 fc07 	bl	801b0c8 <xTaskGetTickCount>
}
 80278ba:	2100      	movs	r1, #0
 80278bc:	bd08      	pop	{r3, pc}
	...

080278c0 <mg_log_prefix>:
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 80278c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80278c4:	b092      	sub	sp, #72	@ 0x48
 80278c6:	4605      	mov	r5, r0
 80278c8:	460c      	mov	r4, r1
 80278ca:	4616      	mov	r6, r2
 80278cc:	461f      	mov	r7, r3
  const char *p = strrchr(file, '/');
 80278ce:	212f      	movs	r1, #47	@ 0x2f
 80278d0:	4620      	mov	r0, r4
 80278d2:	f004 ffef 	bl	802c8b4 <strrchr>
  if (p == NULL) p = strrchr(file, '\\');
 80278d6:	4680      	mov	r8, r0
 80278d8:	b1a8      	cbz	r0, 8027906 <mg_log_prefix+0x46>
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 80278da:	f7ff ffeb 	bl	80278b4 <mg_millis>
 80278de:	f1b8 0f00 	cmp.w	r8, #0
 80278e2:	d001      	beq.n	80278e8 <mg_log_prefix+0x28>
 80278e4:	f108 0401 	add.w	r4, r8, #1
 80278e8:	9705      	str	r7, [sp, #20]
 80278ea:	9604      	str	r6, [sp, #16]
 80278ec:	9403      	str	r4, [sp, #12]
 80278ee:	9502      	str	r5, [sp, #8]
 80278f0:	9000      	str	r0, [sp, #0]
 80278f2:	9101      	str	r1, [sp, #4]
 80278f4:	4a0f      	ldr	r2, [pc, #60]	@ (8027934 <mg_log_prefix+0x74>)
 80278f6:	2129      	movs	r1, #41	@ 0x29
 80278f8:	a807      	add	r0, sp, #28
 80278fa:	f7fd f9b9 	bl	8024c70 <mg_snprintf>
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 80278fe:	2827      	cmp	r0, #39	@ 0x27
 8027900:	d90e      	bls.n	8027920 <mg_log_prefix+0x60>
 8027902:	2027      	movs	r0, #39	@ 0x27
 8027904:	e00c      	b.n	8027920 <mg_log_prefix+0x60>
  if (p == NULL) p = strrchr(file, '\\');
 8027906:	215c      	movs	r1, #92	@ 0x5c
 8027908:	4620      	mov	r0, r4
 802790a:	f004 ffd3 	bl	802c8b4 <strrchr>
 802790e:	4680      	mov	r8, r0
 8027910:	e7e3      	b.n	80278da <mg_log_prefix+0x1a>
  while (n < sizeof(buf)) buf[n++] = ' ';
 8027912:	f100 0348 	add.w	r3, r0, #72	@ 0x48
 8027916:	446b      	add	r3, sp
 8027918:	2220      	movs	r2, #32
 802791a:	f803 2c2c 	strb.w	r2, [r3, #-44]
 802791e:	3001      	adds	r0, #1
 8027920:	2828      	cmp	r0, #40	@ 0x28
 8027922:	d9f6      	bls.n	8027912 <mg_log_prefix+0x52>
  logs(buf, n - 1);
 8027924:	1e41      	subs	r1, r0, #1
 8027926:	a807      	add	r0, sp, #28
 8027928:	f7fa fb04 	bl	8021f34 <logs>
}
 802792c:	b012      	add	sp, #72	@ 0x48
 802792e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027932:	bf00      	nop
 8027934:	0803bb8c 	.word	0x0803bb8c

08027938 <mg_dns_parse>:
bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8027938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802793c:	b084      	sub	sp, #16
 802793e:	4605      	mov	r5, r0
 8027940:	460e      	mov	r6, r1
 8027942:	4690      	mov	r8, r2
  memset(dm, 0, sizeof(*dm));
 8027944:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8027948:	2100      	movs	r1, #0
 802794a:	4640      	mov	r0, r8
 802794c:	f004 ff58 	bl	802c800 <memset>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8027950:	2e0b      	cmp	r6, #11
 8027952:	f240 808b 	bls.w	8027a6c <mg_dns_parse+0x134>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 8027956:	88a8      	ldrh	r0, [r5, #4]
 8027958:	f7ff fc70 	bl	802723c <mg_ntohs>
 802795c:	2801      	cmp	r0, #1
 802795e:	f200 8089 	bhi.w	8027a74 <mg_dns_parse+0x13c>
  num_answers = mg_ntohs(h->num_answers);
 8027962:	88e8      	ldrh	r0, [r5, #6]
 8027964:	f7ff fc6a 	bl	802723c <mg_ntohs>
 8027968:	4604      	mov	r4, r0
 802796a:	4681      	mov	r9, r0
  if (num_answers > 10) {
 802796c:	280a      	cmp	r0, #10
 802796e:	d905      	bls.n	802797c <mg_dns_parse+0x44>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8027970:	4b43      	ldr	r3, [pc, #268]	@ (8027a80 <mg_dns_parse+0x148>)
 8027972:	681b      	ldr	r3, [r3, #0]
 8027974:	2b02      	cmp	r3, #2
 8027976:	dc1a      	bgt.n	80279ae <mg_dns_parse+0x76>
    num_answers = 10;  // Sanity cap
 8027978:	f04f 090a 	mov.w	r9, #10
  dm->txnid = mg_ntohs(h->txnid);
 802797c:	8828      	ldrh	r0, [r5, #0]
 802797e:	f7ff fc5d 	bl	802723c <mg_ntohs>
 8027982:	f8a8 0000 	strh.w	r0, [r8]
  size_t i, n, num_answers, ofs = sizeof(*h);
 8027986:	240c      	movs	r4, #12
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8027988:	2700      	movs	r7, #0
 802798a:	88a8      	ldrh	r0, [r5, #4]
 802798c:	f7ff fc56 	bl	802723c <mg_ntohs>
 8027990:	42b8      	cmp	r0, r7
 8027992:	d91a      	bls.n	80279ca <mg_dns_parse+0x92>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8027994:	ab02      	add	r3, sp, #8
 8027996:	9300      	str	r3, [sp, #0]
 8027998:	2301      	movs	r3, #1
 802799a:	4622      	mov	r2, r4
 802799c:	4631      	mov	r1, r6
 802799e:	4628      	mov	r0, r5
 80279a0:	f7fc fb74 	bl	802408c <mg_dns_parse_rr>
 80279a4:	2800      	cmp	r0, #0
 80279a6:	d067      	beq.n	8027a78 <mg_dns_parse+0x140>
    ofs += n;
 80279a8:	4404      	add	r4, r0
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80279aa:	3701      	adds	r7, #1
 80279ac:	e7ed      	b.n	802798a <mg_dns_parse+0x52>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 80279ae:	4b35      	ldr	r3, [pc, #212]	@ (8027a84 <mg_dns_parse+0x14c>)
 80279b0:	f240 4293 	movw	r2, #1171	@ 0x493
 80279b4:	4934      	ldr	r1, [pc, #208]	@ (8027a88 <mg_dns_parse+0x150>)
 80279b6:	2003      	movs	r0, #3
 80279b8:	f7ff ff82 	bl	80278c0 <mg_log_prefix>
 80279bc:	4621      	mov	r1, r4
 80279be:	4833      	ldr	r0, [pc, #204]	@ (8027a8c <mg_dns_parse+0x154>)
 80279c0:	f7fd fe16 	bl	80255f0 <mg_log>
    num_answers = 10;  // Sanity cap
 80279c4:	f04f 090a 	mov.w	r9, #10
 80279c8:	e7d8      	b.n	802797c <mg_dns_parse+0x44>
  for (i = 0; i < num_answers; i++) {
 80279ca:	2700      	movs	r7, #0
 80279cc:	e013      	b.n	80279f6 <mg_dns_parse+0xbe>
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 80279ce:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80279d2:	2a01      	cmp	r2, #1
 80279d4:	d12a      	bne.n	8027a2c <mg_dns_parse+0xf4>
 80279d6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80279da:	2a01      	cmp	r2, #1
 80279dc:	d126      	bne.n	8027a2c <mg_dns_parse+0xf4>
      dm->addr.is_ip6 = false;
 80279de:	2300      	movs	r3, #0
 80279e0:	f888 3017 	strb.w	r3, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 80279e4:	3c04      	subs	r4, #4
 80279e6:	592b      	ldr	r3, [r5, r4]
 80279e8:	f8c8 3004 	str.w	r3, [r8, #4]
      dm->resolved = true;
 80279ec:	2001      	movs	r0, #1
 80279ee:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 80279f2:	e03c      	b.n	8027a6e <mg_dns_parse+0x136>
  for (i = 0; i < num_answers; i++) {
 80279f4:	3701      	adds	r7, #1
 80279f6:	454f      	cmp	r7, r9
 80279f8:	d236      	bcs.n	8027a68 <mg_dns_parse+0x130>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 80279fa:	ab02      	add	r3, sp, #8
 80279fc:	9300      	str	r3, [sp, #0]
 80279fe:	2300      	movs	r3, #0
 8027a00:	4622      	mov	r2, r4
 8027a02:	4631      	mov	r1, r6
 8027a04:	4628      	mov	r0, r5
 8027a06:	f7fc fb41 	bl	802408c <mg_dns_parse_rr>
 8027a0a:	4682      	mov	sl, r0
 8027a0c:	b3b0      	cbz	r0, 8027a7c <mg_dns_parse+0x144>
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8027a0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8027a12:	9300      	str	r3, [sp, #0]
 8027a14:	f108 0318 	add.w	r3, r8, #24
 8027a18:	4622      	mov	r2, r4
 8027a1a:	4631      	mov	r1, r6
 8027a1c:	4628      	mov	r0, r5
 8027a1e:	f7fb fa24 	bl	8022e6a <mg_dns_parse_name>
    ofs += n;
 8027a22:	4454      	add	r4, sl
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8027a24:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8027a28:	2b04      	cmp	r3, #4
 8027a2a:	d0d0      	beq.n	80279ce <mg_dns_parse+0x96>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8027a2c:	2b10      	cmp	r3, #16
 8027a2e:	d1e1      	bne.n	80279f4 <mg_dns_parse+0xbc>
 8027a30:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8027a34:	2b1c      	cmp	r3, #28
 8027a36:	d1dd      	bne.n	80279f4 <mg_dns_parse+0xbc>
 8027a38:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8027a3c:	2b01      	cmp	r3, #1
 8027a3e:	d1d9      	bne.n	80279f4 <mg_dns_parse+0xbc>
      dm->addr.is_ip6 = true;
 8027a40:	2001      	movs	r0, #1
 8027a42:	f888 0017 	strb.w	r0, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 8027a46:	3c10      	subs	r4, #16
 8027a48:	192b      	adds	r3, r5, r4
 8027a4a:	592c      	ldr	r4, [r5, r4]
 8027a4c:	6859      	ldr	r1, [r3, #4]
 8027a4e:	689a      	ldr	r2, [r3, #8]
 8027a50:	68db      	ldr	r3, [r3, #12]
 8027a52:	f8c8 4004 	str.w	r4, [r8, #4]
 8027a56:	f8c8 1008 	str.w	r1, [r8, #8]
 8027a5a:	f8c8 200c 	str.w	r2, [r8, #12]
 8027a5e:	f8c8 3010 	str.w	r3, [r8, #16]
      dm->resolved = true;
 8027a62:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 8027a66:	e002      	b.n	8027a6e <mg_dns_parse+0x136>
  return true;
 8027a68:	2001      	movs	r0, #1
 8027a6a:	e000      	b.n	8027a6e <mg_dns_parse+0x136>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8027a6c:	2000      	movs	r0, #0
}
 8027a6e:	b004      	add	sp, #16
 8027a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 8027a74:	2000      	movs	r0, #0
 8027a76:	e7fa      	b.n	8027a6e <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8027a78:	2000      	movs	r0, #0
 8027a7a:	e7f8      	b.n	8027a6e <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8027a7c:	2000      	movs	r0, #0
 8027a7e:	e7f6      	b.n	8027a6e <mg_dns_parse+0x136>
 8027a80:	2000013c 	.word	0x2000013c
 8027a84:	0803d850 	.word	0x0803d850
 8027a88:	0803bba0 	.word	0x0803bba0
 8027a8c:	0803bbd0 	.word	0x0803bbd0

08027a90 <mg_error>:
void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8027a90:	b40e      	push	{r1, r2, r3}
 8027a92:	b510      	push	{r4, lr}
 8027a94:	b093      	sub	sp, #76	@ 0x4c
 8027a96:	4604      	mov	r4, r0
 8027a98:	ab15      	add	r3, sp, #84	@ 0x54
 8027a9a:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8027a9e:	9301      	str	r3, [sp, #4]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8027aa0:	ab01      	add	r3, sp, #4
 8027aa2:	2140      	movs	r1, #64	@ 0x40
 8027aa4:	a802      	add	r0, sp, #8
 8027aa6:	f7fd fde1 	bl	802566c <mg_vsnprintf>
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8027aaa:	4b11      	ldr	r3, [pc, #68]	@ (8027af0 <mg_error+0x60>)
 8027aac:	681b      	ldr	r3, [r3, #0]
 8027aae:	2b00      	cmp	r3, #0
 8027ab0:	dc0f      	bgt.n	8027ad2 <mg_error+0x42>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8027ab2:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027ab6:	f043 0320 	orr.w	r3, r3, #32
 8027aba:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8027abe:	aa02      	add	r2, sp, #8
 8027ac0:	2100      	movs	r1, #0
 8027ac2:	4620      	mov	r0, r4
 8027ac4:	f7fc fb31 	bl	802412a <mg_call>
}
 8027ac8:	b013      	add	sp, #76	@ 0x4c
 8027aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027ace:	b003      	add	sp, #12
 8027ad0:	4770      	bx	lr
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8027ad2:	4b08      	ldr	r3, [pc, #32]	@ (8027af4 <mg_error+0x64>)
 8027ad4:	f240 5253 	movw	r2, #1363	@ 0x553
 8027ad8:	4907      	ldr	r1, [pc, #28]	@ (8027af8 <mg_error+0x68>)
 8027ada:	2001      	movs	r0, #1
 8027adc:	f7ff fef0 	bl	80278c0 <mg_log_prefix>
 8027ae0:	ab02      	add	r3, sp, #8
 8027ae2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8027ae4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027ae6:	4805      	ldr	r0, [pc, #20]	@ (8027afc <mg_error+0x6c>)
 8027ae8:	f7fd fd82 	bl	80255f0 <mg_log>
 8027aec:	e7e1      	b.n	8027ab2 <mg_error+0x22>
 8027aee:	bf00      	nop
 8027af0:	2000013c 	.word	0x2000013c
 8027af4:	0803d82c 	.word	0x0803d82c
 8027af8:	0803bba0 	.word	0x0803bba0
 8027afc:	0803bbfc 	.word	0x0803bbfc

08027b00 <handle_tls_recv>:
static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 8027b00:	b570      	push	{r4, r5, r6, lr}
 8027b02:	b082      	sub	sp, #8
 8027b04:	4606      	mov	r6, r0
 8027b06:	460c      	mov	r4, r1
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 8027b08:	6809      	ldr	r1, [r1, #0]
 8027b0a:	68a5      	ldr	r5, [r4, #8]
 8027b0c:	6862      	ldr	r2, [r4, #4]
 8027b0e:	1b52      	subs	r2, r2, r5
 8027b10:	4429      	add	r1, r5
 8027b12:	f7ff f9cb 	bl	8026eac <mg_tls_recv>
 8027b16:	9001      	str	r0, [sp, #4]
  if (n == MG_IO_ERR) {
 8027b18:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8027b1c:	d003      	beq.n	8027b26 <handle_tls_recv+0x26>
  } else if (n > 0) {
 8027b1e:	2800      	cmp	r0, #0
 8027b20:	dc06      	bgt.n	8027b30 <handle_tls_recv+0x30>
}
 8027b22:	b002      	add	sp, #8
 8027b24:	bd70      	pop	{r4, r5, r6, pc}
    mg_error(c, "TLS recv error");
 8027b26:	4906      	ldr	r1, [pc, #24]	@ (8027b40 <handle_tls_recv+0x40>)
 8027b28:	4630      	mov	r0, r6
 8027b2a:	f7ff ffb1 	bl	8027a90 <mg_error>
 8027b2e:	e7f8      	b.n	8027b22 <handle_tls_recv+0x22>
    io->len += (size_t) n;
 8027b30:	4405      	add	r5, r0
 8027b32:	60a5      	str	r5, [r4, #8]
    mg_call(c, MG_EV_READ, &n);
 8027b34:	aa01      	add	r2, sp, #4
 8027b36:	2107      	movs	r1, #7
 8027b38:	4630      	mov	r0, r6
 8027b3a:	f7fc faf6 	bl	802412a <mg_call>
}
 8027b3e:	e7f0      	b.n	8027b22 <handle_tls_recv+0x22>
 8027b40:	0803bc08 	.word	0x0803bc08

08027b44 <http_cb>:
static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 8027b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b48:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8027b4c:	4607      	mov	r7, r0
 8027b4e:	468a      	mov	sl, r1
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 8027b50:	2907      	cmp	r1, #7
 8027b52:	f000 80e5 	beq.w	8027d20 <http_cb+0x1dc>
 8027b56:	2909      	cmp	r1, #9
 8027b58:	f000 814c 	beq.w	8027df4 <http_cb+0x2b0>
 8027b5c:	2902      	cmp	r1, #2
 8027b5e:	f040 80db 	bne.w	8027d18 <http_cb+0x1d4>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8027b62:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 8027b66:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8027b6a:	f023 030b 	bic.w	r3, r3, #11
 8027b6e:	04db      	lsls	r3, r3, #19
 8027b70:	0cdb      	lsrs	r3, r3, #19
 8027b72:	2b04      	cmp	r3, #4
 8027b74:	f040 80d0 	bne.w	8027d18 <http_cb+0x1d4>
       c->recv.len > 0)) {  // see #2796
 8027b78:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8027b7a:	2b00      	cmp	r3, #0
 8027b7c:	f000 80cc 	beq.w	8027d18 <http_cb+0x1d4>
 8027b80:	f04f 0900 	mov.w	r9, #0
 8027b84:	e0ce      	b.n	8027d24 <http_cb+0x1e0>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8027b86:	4ba0      	ldr	r3, [pc, #640]	@ (8027e08 <http_cb+0x2c4>)
 8027b88:	681b      	ldr	r3, [r3, #0]
 8027b8a:	2b00      	cmp	r3, #0
 8027b8c:	dc11      	bgt.n	8027bb2 <http_cb+0x6e>
        c->is_draining = 1;
 8027b8e:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8027b92:	f043 0310 	orr.w	r3, r3, #16
 8027b96:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 8027b9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027b9c:	eba3 0109 	sub.w	r1, r3, r9
 8027ba0:	2910      	cmp	r1, #16
 8027ba2:	bf28      	it	cs
 8027ba4:	2110      	movcs	r1, #16
 8027ba6:	4620      	mov	r0, r4
 8027ba8:	f7fc fe6e 	bl	8024888 <mg_hexdump>
        c->recv.len = 0;
 8027bac:	2300      	movs	r3, #0
 8027bae:	643b      	str	r3, [r7, #64]	@ 0x40
        return;
 8027bb0:	e0b2      	b.n	8027d18 <http_cb+0x1d4>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8027bb2:	4b96      	ldr	r3, [pc, #600]	@ (8027e0c <http_cb+0x2c8>)
 8027bb4:	f640 42a3 	movw	r2, #3235	@ 0xca3
 8027bb8:	4995      	ldr	r1, [pc, #596]	@ (8027e10 <http_cb+0x2cc>)
 8027bba:	2001      	movs	r0, #1
 8027bbc:	f7ff fe80 	bl	80278c0 <mg_log_prefix>
 8027bc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8027bc2:	4894      	ldr	r0, [pc, #592]	@ (8027e14 <http_cb+0x2d0>)
 8027bc4:	f7fd fd14 	bl	80255f0 <mg_log>
 8027bc8:	e7e1      	b.n	8027b8e <http_cb+0x4a>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 8027bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027bcc:	eba3 0309 	sub.w	r3, r3, r9
 8027bd0:	9387      	str	r3, [sp, #540]	@ 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 8027bd2:	9a82      	ldr	r2, [sp, #520]	@ 0x208
 8027bd4:	9986      	ldr	r1, [sp, #536]	@ 0x218
 8027bd6:	1a52      	subs	r2, r2, r1
 8027bd8:	1a9b      	subs	r3, r3, r2
 8027bda:	9383      	str	r3, [sp, #524]	@ 0x20c
 8027bdc:	e0c1      	b.n	8027d62 <http_cb+0x21e>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8027bde:	ad88      	add	r5, sp, #544	@ 0x220
 8027be0:	498d      	ldr	r1, [pc, #564]	@ (8027e18 <http_cb+0x2d4>)
 8027be2:	4628      	mov	r0, r5
 8027be4:	f7fd fee2 	bl	80259ac <mg_str_s>
 8027be8:	e895 000c 	ldmia.w	r5, {r2, r3}
 8027bec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8027bf0:	f7fd ffdd 	bl	8025bae <mg_strcasecmp>
 8027bf4:	4604      	mov	r4, r0
 8027bf6:	b950      	cbnz	r0, 8027c0e <http_cb+0xca>
        char *s = (char *) c->recv.buf + ofs + n;
 8027bf8:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8027bfa:	eb08 0309 	add.w	r3, r8, r9
 8027bfe:	441d      	add	r5, r3
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8027c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027c02:	eba3 0309 	sub.w	r3, r3, r9
 8027c06:	eba3 0b08 	sub.w	fp, r3, r8
 8027c0a:	4606      	mov	r6, r0
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8027c0c:	e04c      	b.n	8027ca8 <http_cb+0x164>
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 8027c0e:	4983      	ldr	r1, [pc, #524]	@ (8027e1c <http_cb+0x2d8>)
 8027c10:	4638      	mov	r0, r7
 8027c12:	f7ff ff3d 	bl	8027a90 <mg_error>
          return;
 8027c16:	e07f      	b.n	8027d18 <http_cb+0x1d4>
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 8027c18:	2205      	movs	r2, #5
 8027c1a:	4981      	ldr	r1, [pc, #516]	@ (8027e20 <http_cb+0x2dc>)
 8027c1c:	9802      	ldr	r0, [sp, #8]
 8027c1e:	f7f9 fbc7 	bl	80213b0 <mg_ncasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8027c22:	4605      	mov	r5, r0
 8027c24:	2800      	cmp	r0, #0
 8027c26:	d033      	beq.n	8027c90 <http_cb+0x14c>
 8027c28:	ac8a      	add	r4, sp, #552	@ 0x228
 8027c2a:	497e      	ldr	r1, [pc, #504]	@ (8027e24 <http_cb+0x2e0>)
 8027c2c:	4620      	mov	r0, r4
 8027c2e:	f7fd febd 	bl	80259ac <mg_str_s>
 8027c32:	a902      	add	r1, sp, #8
 8027c34:	e894 000c 	ldmia.w	r4, {r2, r3}
 8027c38:	c903      	ldmia	r1, {r0, r1}
 8027c3a:	f7fd ffb8 	bl	8025bae <mg_strcasecmp>
 8027c3e:	b9c0      	cbnz	r0, 8027c72 <http_cb+0x12e>
          ofs += (size_t) n;  // this request has been processed
 8027c40:	44c1      	add	r9, r8
          mg_http_reply(c, 411, "", "");
 8027c42:	4a79      	ldr	r2, [pc, #484]	@ (8027e28 <http_cb+0x2e4>)
 8027c44:	4613      	mov	r3, r2
 8027c46:	f240 119b 	movw	r1, #411	@ 0x19b
 8027c4a:	4638      	mov	r0, r7
 8027c4c:	f7fd fd24 	bl	8025698 <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 8027c50:	4b6d      	ldr	r3, [pc, #436]	@ (8027e08 <http_cb+0x2c4>)
 8027c52:	681b      	ldr	r3, [r3, #0]
 8027c54:	2b00      	cmp	r3, #0
 8027c56:	f340 8093 	ble.w	8027d80 <http_cb+0x23c>
 8027c5a:	4b6c      	ldr	r3, [pc, #432]	@ (8027e0c <http_cb+0x2c8>)
 8027c5c:	f640 42ca 	movw	r2, #3274	@ 0xcca
 8027c60:	496b      	ldr	r1, [pc, #428]	@ (8027e10 <http_cb+0x2cc>)
 8027c62:	2001      	movs	r0, #1
 8027c64:	f7ff fe2c 	bl	80278c0 <mg_log_prefix>
 8027c68:	4970      	ldr	r1, [pc, #448]	@ (8027e2c <http_cb+0x2e8>)
 8027c6a:	4871      	ldr	r0, [pc, #452]	@ (8027e30 <http_cb+0x2ec>)
 8027c6c:	f7fd fcc0 	bl	80255f0 <mg_log>
      if (is_chunked) {
 8027c70:	e086      	b.n	8027d80 <http_cb+0x23c>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8027c72:	ac8c      	add	r4, sp, #560	@ 0x230
 8027c74:	496f      	ldr	r1, [pc, #444]	@ (8027e34 <http_cb+0x2f0>)
 8027c76:	4620      	mov	r0, r4
 8027c78:	f7fd fe98 	bl	80259ac <mg_str_s>
 8027c7c:	a902      	add	r1, sp, #8
 8027c7e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8027c82:	c903      	ldmia	r1, {r0, r1}
 8027c84:	f7fd ff93 	bl	8025bae <mg_strcasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8027c88:	2800      	cmp	r0, #0
 8027c8a:	d0d9      	beq.n	8027c40 <http_cb+0xfc>
        } else if (is_response) {
 8027c8c:	2d00      	cmp	r5, #0
 8027c8e:	d177      	bne.n	8027d80 <http_cb+0x23c>
          int status = mg_http_status(&hm);
 8027c90:	a802      	add	r0, sp, #8
 8027c92:	f7fc fb3d 	bl	8024310 <mg_http_status>
          require_content_len = status >= 200 && status != 204 && status != 304;
 8027c96:	28c7      	cmp	r0, #199	@ 0xc7
 8027c98:	dd72      	ble.n	8027d80 <http_cb+0x23c>
 8027c9a:	28cc      	cmp	r0, #204	@ 0xcc
 8027c9c:	d070      	beq.n	8027d80 <http_cb+0x23c>
 8027c9e:	f5b0 7f98 	cmp.w	r0, #304	@ 0x130
 8027ca2:	d1ce      	bne.n	8027c42 <http_cb+0xfe>
 8027ca4:	e06c      	b.n	8027d80 <http_cb+0x23c>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8027ca6:	4406      	add	r6, r0
 8027ca8:	ab01      	add	r3, sp, #4
 8027caa:	466a      	mov	r2, sp
 8027cac:	ebab 0106 	sub.w	r1, fp, r6
 8027cb0:	19a8      	adds	r0, r5, r6
 8027cb2:	f7fe feb5 	bl	8026a20 <skip_chunk>
 8027cb6:	2800      	cmp	r0, #0
 8027cb8:	dd02      	ble.n	8027cc0 <http_cb+0x17c>
 8027cba:	9b01      	ldr	r3, [sp, #4]
 8027cbc:	2b00      	cmp	r3, #0
 8027cbe:	d1f2      	bne.n	8027ca6 <http_cb+0x162>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8027cc0:	b338      	cbz	r0, 8027d12 <http_cb+0x1ce>
        if (cl < 0) {
 8027cc2:	2800      	cmp	r0, #0
 8027cc4:	db21      	blt.n	8027d0a <http_cb+0x1c6>
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 8027cc6:	2300      	movs	r3, #0
 8027cc8:	9383      	str	r3, [sp, #524]	@ 0x20c
 8027cca:	f8cd 821c 	str.w	r8, [sp, #540]	@ 0x21c
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8027cce:	ab01      	add	r3, sp, #4
 8027cd0:	466a      	mov	r2, sp
 8027cd2:	ebab 0104 	sub.w	r1, fp, r4
 8027cd6:	1928      	adds	r0, r5, r4
 8027cd8:	f7fe fea2 	bl	8026a20 <skip_chunk>
 8027cdc:	1e06      	subs	r6, r0, #0
 8027cde:	dd11      	ble.n	8027d04 <http_cb+0x1c0>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8027ce0:	9883      	ldr	r0, [sp, #524]	@ 0x20c
 8027ce2:	9900      	ldr	r1, [sp, #0]
 8027ce4:	4421      	add	r1, r4
 8027ce6:	9a01      	ldr	r2, [sp, #4]
 8027ce8:	4429      	add	r1, r5
 8027cea:	4428      	add	r0, r5
 8027cec:	f004 fd6e 	bl	802c7cc <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8027cf0:	4434      	add	r4, r6
 8027cf2:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 8027cf4:	9b01      	ldr	r3, [sp, #4]
 8027cf6:	441a      	add	r2, r3
 8027cf8:	9283      	str	r2, [sp, #524]	@ 0x20c
 8027cfa:	9a87      	ldr	r2, [sp, #540]	@ 0x21c
 8027cfc:	441a      	add	r2, r3
 8027cfe:	9287      	str	r2, [sp, #540]	@ 0x21c
          if (dl == 0) break;
 8027d00:	2b00      	cmp	r3, #0
 8027d02:	d1e4      	bne.n	8027cce <http_cb+0x18a>
        ofs += (size_t) (n + o);
 8027d04:	4444      	add	r4, r8
 8027d06:	44a1      	add	r9, r4
 8027d08:	e044      	b.n	8027d94 <http_cb+0x250>
          mg_error(c, "Invalid chunk");
 8027d0a:	494b      	ldr	r1, [pc, #300]	@ (8027e38 <http_cb+0x2f4>)
 8027d0c:	4638      	mov	r0, r7
 8027d0e:	f7ff febf 	bl	8027a90 <mg_error>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8027d12:	f1b9 0f00 	cmp.w	r9, #0
 8027d16:	d170      	bne.n	8027dfa <http_cb+0x2b6>
}
 8027d18:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 8027d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027d20:	f04f 0900 	mov.w	r9, #0
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8027d24:	f997 30ad 	ldrsb.w	r3, [r7, #173]	@ 0xad
 8027d28:	2b00      	cmp	r3, #0
 8027d2a:	dbf2      	blt.n	8027d12 <http_cb+0x1ce>
 8027d2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8027d2e:	4549      	cmp	r1, r9
 8027d30:	d9ef      	bls.n	8027d12 <http_cb+0x1ce>
      const char *buf = (char *) c->recv.buf + ofs;
 8027d32:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8027d34:	444c      	add	r4, r9
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 8027d36:	aa02      	add	r2, sp, #8
 8027d38:	eba1 0109 	sub.w	r1, r1, r9
 8027d3c:	4620      	mov	r0, r4
 8027d3e:	f7fd ff65 	bl	8025c0c <mg_http_parse>
      if (n < 0) {
 8027d42:	f1b0 0800 	subs.w	r8, r0, #0
 8027d46:	f6ff af1e 	blt.w	8027b86 <http_cb+0x42>
      if (n == 0) break;                 // Request is not buffered yet
 8027d4a:	f1b8 0f00 	cmp.w	r8, #0
 8027d4e:	d0e0      	beq.n	8027d12 <http_cb+0x1ce>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 8027d50:	aa02      	add	r2, sp, #8
 8027d52:	210a      	movs	r1, #10
 8027d54:	4638      	mov	r0, r7
 8027d56:	f7fc f9e8 	bl	802412a <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 8027d5a:	f1ba 0f09 	cmp.w	sl, #9
 8027d5e:	f43f af34 	beq.w	8027bca <http_cb+0x86>
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8027d62:	4936      	ldr	r1, [pc, #216]	@ (8027e3c <http_cb+0x2f8>)
 8027d64:	a802      	add	r0, sp, #8
 8027d66:	f7fc faa9 	bl	80242bc <mg_http_get_header>
 8027d6a:	4604      	mov	r4, r0
 8027d6c:	2800      	cmp	r0, #0
 8027d6e:	f47f af36 	bne.w	8027bde <http_cb+0x9a>
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 8027d72:	4933      	ldr	r1, [pc, #204]	@ (8027e40 <http_cb+0x2fc>)
 8027d74:	a802      	add	r0, sp, #8
 8027d76:	f7fc faa1 	bl	80242bc <mg_http_get_header>
 8027d7a:	2800      	cmp	r0, #0
 8027d7c:	f43f af4c 	beq.w	8027c18 <http_cb+0xd4>
        size_t len = c->recv.len - ofs - (size_t) n;
 8027d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027d82:	eba3 0309 	sub.w	r3, r3, r9
 8027d86:	eba3 0308 	sub.w	r3, r3, r8
        if (hm.body.len > len) break;  // Buffer more data
 8027d8a:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 8027d8c:	429a      	cmp	r2, r3
 8027d8e:	d8c0      	bhi.n	8027d12 <http_cb+0x1ce>
        ofs += (size_t) n + hm.body.len;
 8027d90:	4490      	add	r8, r2
 8027d92:	44c1      	add	r9, r8
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8027d94:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8027d98:	f013 0f04 	tst.w	r3, #4
 8027d9c:	d005      	beq.n	8027daa <http_cb+0x266>
 8027d9e:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8027da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8027da6:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 8027daa:	aa02      	add	r2, sp, #8
 8027dac:	210b      	movs	r1, #11
 8027dae:	4638      	mov	r0, r7
 8027db0:	f7fc f9bb 	bl	802412a <mg_call>
      if (c->is_accepted) {
 8027db4:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8027db8:	f013 0f04 	tst.w	r3, #4
 8027dbc:	d0b2      	beq.n	8027d24 <http_cb+0x1e0>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 8027dbe:	4921      	ldr	r1, [pc, #132]	@ (8027e44 <http_cb+0x300>)
 8027dc0:	a802      	add	r0, sp, #8
 8027dc2:	f7fc fa7b 	bl	80242bc <mg_http_get_header>
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 8027dc6:	4605      	mov	r5, r0
 8027dc8:	2800      	cmp	r0, #0
 8027dca:	d0ab      	beq.n	8027d24 <http_cb+0x1e0>
 8027dcc:	ac8e      	add	r4, sp, #568	@ 0x238
 8027dce:	491e      	ldr	r1, [pc, #120]	@ (8027e48 <http_cb+0x304>)
 8027dd0:	4620      	mov	r0, r4
 8027dd2:	f7fd fdeb 	bl	80259ac <mg_str_s>
 8027dd6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8027dda:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027dde:	f7fd fee6 	bl	8025bae <mg_strcasecmp>
 8027de2:	2800      	cmp	r0, #0
 8027de4:	d19e      	bne.n	8027d24 <http_cb+0x1e0>
          c->is_draining = 1;  // honor "Connection: close"
 8027de6:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8027dea:	f043 0310 	orr.w	r3, r3, #16
 8027dee:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
          break;
 8027df2:	e78e      	b.n	8027d12 <http_cb+0x1ce>
 8027df4:	f04f 0900 	mov.w	r9, #0
 8027df8:	e794      	b.n	8027d24 <http_cb+0x1e0>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8027dfa:	464a      	mov	r2, r9
 8027dfc:	2100      	movs	r1, #0
 8027dfe:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8027e02:	f7ff f926 	bl	8027052 <mg_iobuf_del>
 8027e06:	e787      	b.n	8027d18 <http_cb+0x1d4>
 8027e08:	2000013c 	.word	0x2000013c
 8027e0c:	0803d824 	.word	0x0803d824
 8027e10:	0803bba0 	.word	0x0803bba0
 8027e14:	0803bc18 	.word	0x0803bc18
 8027e18:	0803bc30 	.word	0x0803bc30
 8027e1c:	0803bc38 	.word	0x0803bc38
 8027e20:	0803b398 	.word	0x0803b398
 8027e24:	08038154 	.word	0x08038154
 8027e28:	08038678 	.word	0x08038678
 8027e2c:	0803bc64 	.word	0x0803bc64
 8027e30:	0803beb8 	.word	0x0803beb8
 8027e34:	08038ea0 	.word	0x08038ea0
 8027e38:	0803bc88 	.word	0x0803bc88
 8027e3c:	0803bc40 	.word	0x0803bc40
 8027e40:	0803bc54 	.word	0x0803bc54
 8027e44:	0803bc98 	.word	0x0803bc98
 8027e48:	0803bca4 	.word	0x0803bca4

08027e4c <uri_to_path2>:
                        char *path, size_t path_size) {
 8027e4c:	b082      	sub	sp, #8
 8027e4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027e52:	b086      	sub	sp, #24
 8027e54:	4681      	mov	r9, r0
 8027e56:	460e      	mov	r6, r1
 8027e58:	4690      	mov	r8, r2
 8027e5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027e5c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027e5e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8027e60:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027e62:	9300      	str	r3, [sp, #0]
 8027e64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8027e66:	4a6f      	ldr	r2, [pc, #444]	@ (8028024 <uri_to_path2+0x1d8>)
 8027e68:	4639      	mov	r1, r7
 8027e6a:	4628      	mov	r0, r5
 8027e6c:	f7fc ff00 	bl	8024c70 <mg_snprintf>
  if (n + 2 >= path_size) {
 8027e70:	1c83      	adds	r3, r0, #2
 8027e72:	42bb      	cmp	r3, r7
 8027e74:	d227      	bcs.n	8027ec6 <uri_to_path2+0x7a>
  path[path_size - 1] = '\0';
 8027e76:	f107 3aff 	add.w	sl, r7, #4294967295	@ 0xffffffff
 8027e7a:	2300      	movs	r3, #0
 8027e7c:	f805 300a 	strb.w	r3, [r5, sl]
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8027e80:	b150      	cbz	r0, 8027e98 <uri_to_path2+0x4c>
 8027e82:	182b      	adds	r3, r5, r0
 8027e84:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8027e88:	2b2f      	cmp	r3, #47	@ 0x2f
 8027e8a:	d005      	beq.n	8027e98 <uri_to_path2+0x4c>
 8027e8c:	1c43      	adds	r3, r0, #1
 8027e8e:	222f      	movs	r2, #47	@ 0x2f
 8027e90:	542a      	strb	r2, [r5, r0]
 8027e92:	2200      	movs	r2, #0
 8027e94:	54ea      	strb	r2, [r5, r3]
 8027e96:	4618      	mov	r0, r3
  if (url.len < hm->uri.len) {
 8027e98:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8027e9a:	68f1      	ldr	r1, [r6, #12]
 8027e9c:	428c      	cmp	r4, r1
 8027e9e:	d31c      	bcc.n	8027eda <uri_to_path2+0x8e>
  path[path_size - 1] = '\0';  // Double-check
 8027ea0:	2300      	movs	r3, #0
 8027ea2:	f805 300a 	strb.w	r3, [r5, sl]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 8027ea6:	ac02      	add	r4, sp, #8
 8027ea8:	463a      	mov	r2, r7
 8027eaa:	4629      	mov	r1, r5
 8027eac:	4620      	mov	r0, r4
 8027eae:	f7fd fd89 	bl	80259c4 <mg_str_n>
 8027eb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8027eb6:	f7ff fcd8 	bl	802786a <mg_path_is_sane>
 8027eba:	b1c0      	cbz	r0, 8027eee <uri_to_path2+0xa2>
  n = strlen(path);
 8027ebc:	4628      	mov	r0, r5
 8027ebe:	f7e8 f9ef 	bl	80102a0 <strlen>
 8027ec2:	4604      	mov	r4, r0
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8027ec4:	e020      	b.n	8027f08 <uri_to_path2+0xbc>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8027ec6:	4b58      	ldr	r3, [pc, #352]	@ (8028028 <uri_to_path2+0x1dc>)
 8027ec8:	4a58      	ldr	r2, [pc, #352]	@ (802802c <uri_to_path2+0x1e0>)
 8027eca:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027ece:	4648      	mov	r0, r9
 8027ed0:	f7fd fbe2 	bl	8025698 <mg_http_reply>
    return -1;
 8027ed4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8027ed8:	e09c      	b.n	8028014 <uri_to_path2+0x1c8>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 8027eda:	2300      	movs	r3, #0
 8027edc:	9300      	str	r3, [sp, #0]
 8027ede:	1a3b      	subs	r3, r7, r0
 8027ee0:	182a      	adds	r2, r5, r0
 8027ee2:	1b09      	subs	r1, r1, r4
 8027ee4:	68b0      	ldr	r0, [r6, #8]
 8027ee6:	4420      	add	r0, r4
 8027ee8:	f7fe fbee 	bl	80266c8 <mg_url_decode>
 8027eec:	e7d8      	b.n	8027ea0 <uri_to_path2+0x54>
    mg_http_reply(c, 400, "", "Invalid path");
 8027eee:	4b50      	ldr	r3, [pc, #320]	@ (8028030 <uri_to_path2+0x1e4>)
 8027ef0:	4a4e      	ldr	r2, [pc, #312]	@ (802802c <uri_to_path2+0x1e0>)
 8027ef2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027ef6:	4648      	mov	r0, r9
 8027ef8:	f7fd fbce 	bl	8025698 <mg_http_reply>
    return -1;
 8027efc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8027f00:	e088      	b.n	8028014 <uri_to_path2+0x1c8>
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8027f02:	2200      	movs	r2, #0
 8027f04:	54ea      	strb	r2, [r5, r3]
 8027f06:	461c      	mov	r4, r3
 8027f08:	2c01      	cmp	r4, #1
 8027f0a:	d905      	bls.n	8027f18 <uri_to_path2+0xcc>
 8027f0c:	1e63      	subs	r3, r4, #1
 8027f0e:	f815 c003 	ldrb.w	ip, [r5, r3]
 8027f12:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 8027f16:	d0f4      	beq.n	8027f02 <uri_to_path2+0xb6>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8027f18:	f10d 0a10 	add.w	sl, sp, #16
 8027f1c:	4945      	ldr	r1, [pc, #276]	@ (8028034 <uri_to_path2+0x1e8>)
 8027f1e:	4650      	mov	r0, sl
 8027f20:	f7fd fd44 	bl	80259ac <mg_str_s>
 8027f24:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8027f28:	f106 0108 	add.w	r1, r6, #8
 8027f2c:	c903      	ldmia	r1, {r0, r1}
 8027f2e:	f7fd fe14 	bl	8025b5a <mg_strcmp>
                                               : fs->st(path, NULL, NULL);
 8027f32:	2800      	cmp	r0, #0
 8027f34:	d048      	beq.n	8027fc8 <uri_to_path2+0x17c>
 8027f36:	f8d8 3000 	ldr.w	r3, [r8]
 8027f3a:	2200      	movs	r2, #0
 8027f3c:	4611      	mov	r1, r2
 8027f3e:	4628      	mov	r0, r5
 8027f40:	4798      	blx	r3
 8027f42:	4682      	mov	sl, r0
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8027f44:	4b3c      	ldr	r3, [pc, #240]	@ (8028038 <uri_to_path2+0x1ec>)
 8027f46:	681b      	ldr	r3, [r3, #0]
 8027f48:	2b03      	cmp	r3, #3
 8027f4a:	dc40      	bgt.n	8027fce <uri_to_path2+0x182>
  if (flags == 0) {
 8027f4c:	f1ba 0f00 	cmp.w	sl, #0
 8027f50:	d060      	beq.n	8028014 <uri_to_path2+0x1c8>
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8027f52:	f01a 0f04 	tst.w	sl, #4
 8027f56:	d05d      	beq.n	8028014 <uri_to_path2+0x1c8>
 8027f58:	68f2      	ldr	r2, [r6, #12]
 8027f5a:	b12a      	cbz	r2, 8027f68 <uri_to_path2+0x11c>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 8027f5c:	68b3      	ldr	r3, [r6, #8]
 8027f5e:	1899      	adds	r1, r3, r2
 8027f60:	f811 1c01 	ldrb.w	r1, [r1, #-1]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8027f64:	292f      	cmp	r1, #47	@ 0x2f
 8027f66:	d144      	bne.n	8027ff2 <uri_to_path2+0x1a6>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8027f68:	192e      	adds	r6, r5, r4
 8027f6a:	1b3f      	subs	r7, r7, r4
 8027f6c:	4a33      	ldr	r2, [pc, #204]	@ (802803c <uri_to_path2+0x1f0>)
 8027f6e:	4639      	mov	r1, r7
 8027f70:	4630      	mov	r0, r6
 8027f72:	f7fc fe7d 	bl	8024c70 <mg_snprintf>
 8027f76:	b138      	cbz	r0, 8027f88 <uri_to_path2+0x13c>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8027f78:	f8d8 3000 	ldr.w	r3, [r8]
 8027f7c:	2200      	movs	r2, #0
 8027f7e:	4611      	mov	r1, r2
 8027f80:	4628      	mov	r0, r5
 8027f82:	4798      	blx	r3
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8027f84:	2800      	cmp	r0, #0
 8027f86:	d144      	bne.n	8028012 <uri_to_path2+0x1c6>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8027f88:	4a2d      	ldr	r2, [pc, #180]	@ (8028040 <uri_to_path2+0x1f4>)
 8027f8a:	4639      	mov	r1, r7
 8027f8c:	4630      	mov	r0, r6
 8027f8e:	f7fc fe6f 	bl	8024c70 <mg_snprintf>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8027f92:	b138      	cbz	r0, 8027fa4 <uri_to_path2+0x158>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8027f94:	f8d8 3000 	ldr.w	r3, [r8]
 8027f98:	2200      	movs	r2, #0
 8027f9a:	4611      	mov	r1, r2
 8027f9c:	4628      	mov	r0, r5
 8027f9e:	4798      	blx	r3
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8027fa0:	2800      	cmp	r0, #0
 8027fa2:	d13d      	bne.n	8028020 <uri_to_path2+0x1d4>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8027fa4:	4a27      	ldr	r2, [pc, #156]	@ (8028044 <uri_to_path2+0x1f8>)
 8027fa6:	4639      	mov	r1, r7
 8027fa8:	4630      	mov	r0, r6
 8027faa:	f7fc fe61 	bl	8024c70 <mg_snprintf>
 8027fae:	b368      	cbz	r0, 802800c <uri_to_path2+0x1c0>
                (tmp = fs->st(path, NULL, NULL)) !=
 8027fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8027fb4:	2200      	movs	r2, #0
 8027fb6:	4611      	mov	r1, r2
 8027fb8:	4628      	mov	r0, r5
 8027fba:	4798      	blx	r3
                    0 &&
 8027fbc:	b330      	cbz	r0, 802800c <uri_to_path2+0x1c0>
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8027fbe:	340b      	adds	r4, #11
 8027fc0:	2200      	movs	r2, #0
 8027fc2:	552a      	strb	r2, [r5, r4]
      flags = tmp;
 8027fc4:	4682      	mov	sl, r0
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8027fc6:	e025      	b.n	8028014 <uri_to_path2+0x1c8>
                                               : fs->st(path, NULL, NULL);
 8027fc8:	f04f 0a04 	mov.w	sl, #4
 8027fcc:	e7ba      	b.n	8027f44 <uri_to_path2+0xf8>
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8027fce:	4b1e      	ldr	r3, [pc, #120]	@ (8028048 <uri_to_path2+0x1fc>)
 8027fd0:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 8027fd4:	491d      	ldr	r1, [pc, #116]	@ (802804c <uri_to_path2+0x200>)
 8027fd6:	2004      	movs	r0, #4
 8027fd8:	f7ff fc72 	bl	80278c0 <mg_log_prefix>
 8027fdc:	f8cd a004 	str.w	sl, [sp, #4]
 8027fe0:	9500      	str	r5, [sp, #0]
 8027fe2:	68b3      	ldr	r3, [r6, #8]
 8027fe4:	68f2      	ldr	r2, [r6, #12]
 8027fe6:	f8d9 1034 	ldr.w	r1, [r9, #52]	@ 0x34
 8027fea:	4819      	ldr	r0, [pc, #100]	@ (8028050 <uri_to_path2+0x204>)
 8027fec:	f7fd fb00 	bl	80255f0 <mg_log>
 8027ff0:	e7ac      	b.n	8027f4c <uri_to_path2+0x100>
    mg_printf(c,
 8027ff2:	4918      	ldr	r1, [pc, #96]	@ (8028054 <uri_to_path2+0x208>)
 8027ff4:	4648      	mov	r0, r9
 8027ff6:	f7fd fb29 	bl	802564c <mg_printf>
    c->is_resp = 0;
 8027ffa:	f899 30ad 	ldrb.w	r3, [r9, #173]	@ 0xad
 8027ffe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8028002:	f889 30ad 	strb.w	r3, [r9, #173]	@ 0xad
    flags = -1;
 8028006:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802800a:	e003      	b.n	8028014 <uri_to_path2+0x1c8>
      path[n] = '\0';  // Remove appended index file name
 802800c:	2300      	movs	r3, #0
 802800e:	7033      	strb	r3, [r6, #0]
 8028010:	e000      	b.n	8028014 <uri_to_path2+0x1c8>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8028012:	4682      	mov	sl, r0
}
 8028014:	4650      	mov	r0, sl
 8028016:	b006      	add	sp, #24
 8028018:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802801c:	b002      	add	sp, #8
 802801e:	4770      	bx	lr
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8028020:	4682      	mov	sl, r0
 8028022:	e7f7      	b.n	8028014 <uri_to_path2+0x1c8>
 8028024:	0803b2f0 	.word	0x0803b2f0
 8028028:	0803bcac 	.word	0x0803bcac
 802802c:	08038678 	.word	0x08038678
 8028030:	0803bcc0 	.word	0x0803bcc0
 8028034:	0803b39c 	.word	0x0803b39c
 8028038:	2000013c 	.word	0x2000013c
 802803c:	0803bd20 	.word	0x0803bd20
 8028040:	0803bd2c 	.word	0x0803bd2c
 8028044:	0803bd3c 	.word	0x0803bd3c
 8028048:	0803d814 	.word	0x0803d814
 802804c:	0803bba0 	.word	0x0803bba0
 8028050:	0803bcd0 	.word	0x0803bcd0
 8028054:	0803bce4 	.word	0x0803bce4

08028058 <uri_to_path>:
                       size_t path_size) {
 8028058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802805c:	b096      	sub	sp, #88	@ 0x58
 802805e:	4606      	mov	r6, r0
 8028060:	460d      	mov	r5, r1
 8028062:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8028064:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8028068:	f1b8 0f00 	cmp.w	r8, #0
 802806c:	d069      	beq.n	8028142 <uri_to_path+0xea>
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 802806e:	6811      	ldr	r1, [r2, #0]
 8028070:	a80c      	add	r0, sp, #48	@ 0x30
 8028072:	f7fd fc9b 	bl	80259ac <mg_str_s>
 8028076:	2300      	movs	r3, #0
 8028078:	930a      	str	r3, [sp, #40]	@ 0x28
 802807a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802807c:	ab08      	add	r3, sp, #32
 802807e:	aa0a      	add	r2, sp, #40	@ 0x28
 8028080:	e892 0003 	ldmia.w	r2, {r0, r1}
 8028084:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 8028088:	ab0c      	add	r3, sp, #48	@ 0x30
 802808a:	222c      	movs	r2, #44	@ 0x2c
 802808c:	9200      	str	r2, [sp, #0]
 802808e:	aa0e      	add	r2, sp, #56	@ 0x38
 8028090:	e893 0003 	ldmia.w	r3, {r0, r1}
 8028094:	f7fd ff4d 	bl	8025f32 <mg_span>
 8028098:	2800      	cmp	r0, #0
 802809a:	d055      	beq.n	8028148 <uri_to_path+0xf0>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 802809c:	233d      	movs	r3, #61	@ 0x3d
 802809e:	9300      	str	r3, [sp, #0]
 80280a0:	ab10      	add	r3, sp, #64	@ 0x40
 80280a2:	aa12      	add	r2, sp, #72	@ 0x48
 80280a4:	ac0e      	add	r4, sp, #56	@ 0x38
 80280a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80280aa:	f7fd ff42 	bl	8025f32 <mg_span>
 80280ae:	b978      	cbnz	r0, 80280d0 <uri_to_path+0x78>
 80280b0:	ab12      	add	r3, sp, #72	@ 0x48
 80280b2:	e9d4 0100 	ldrd	r0, r1, [r4]
 80280b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80280ba:	ac06      	add	r4, sp, #24
 80280bc:	2200      	movs	r2, #0
 80280be:	4611      	mov	r1, r2
 80280c0:	4620      	mov	r0, r4
 80280c2:	f7fd fc7f 	bl	80259c4 <mg_str_n>
 80280c6:	ab10      	add	r3, sp, #64	@ 0x40
 80280c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80280cc:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 80280d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80280d2:	b9c3      	cbnz	r3, 8028106 <uri_to_path+0xae>
 80280d4:	f10d 0940 	add.w	r9, sp, #64	@ 0x40
 80280d8:	ac12      	add	r4, sp, #72	@ 0x48
 80280da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80280de:	e889 0003 	stmia.w	r9, {r0, r1}
 80280e2:	f10d 0a18 	add.w	sl, sp, #24
 80280e6:	4922      	ldr	r1, [pc, #136]	@ (8028170 <uri_to_path+0x118>)
 80280e8:	4650      	mov	r0, sl
 80280ea:	f7fd fc5f 	bl	80259ac <mg_str_s>
 80280ee:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80280f2:	e884 0003 	stmia.w	r4, {r0, r1}
 80280f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80280f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80280fc:	ab08      	add	r3, sp, #32
 80280fe:	e899 0003 	ldmia.w	r9, {r0, r1}
 8028102:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8028106:	68eb      	ldr	r3, [r5, #12]
 8028108:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802810a:	4293      	cmp	r3, r2
 802810c:	d3bc      	bcc.n	8028088 <uri_to_path+0x30>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 802810e:	ac14      	add	r4, sp, #80	@ 0x50
 8028110:	68a9      	ldr	r1, [r5, #8]
 8028112:	4620      	mov	r0, r4
 8028114:	f7fd fc56 	bl	80259c4 <mg_str_n>
 8028118:	e894 000c 	ldmia.w	r4, {r2, r3}
 802811c:	a912      	add	r1, sp, #72	@ 0x48
 802811e:	c903      	ldmia	r1, {r0, r1}
 8028120:	f7fd fd1b 	bl	8025b5a <mg_strcmp>
 8028124:	2800      	cmp	r0, #0
 8028126:	d1af      	bne.n	8028088 <uri_to_path+0x30>
    u = k, p = v;
 8028128:	ab0a      	add	r3, sp, #40	@ 0x28
 802812a:	aa12      	add	r2, sp, #72	@ 0x48
 802812c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8028130:	e883 0003 	stmia.w	r3, {r0, r1}
 8028134:	ab08      	add	r3, sp, #32
 8028136:	aa10      	add	r2, sp, #64	@ 0x40
 8028138:	e892 0003 	ldmia.w	r2, {r0, r1}
 802813c:	e883 0003 	stmia.w	r3, {r0, r1}
 8028140:	e7a2      	b.n	8028088 <uri_to_path+0x30>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8028142:	f8df 8030 	ldr.w	r8, [pc, #48]	@ 8028174 <uri_to_path+0x11c>
 8028146:	e792      	b.n	802806e <uri_to_path+0x16>
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 8028148:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802814a:	9304      	str	r3, [sp, #16]
 802814c:	9703      	str	r7, [sp, #12]
 802814e:	ab01      	add	r3, sp, #4
 8028150:	aa08      	add	r2, sp, #32
 8028152:	e892 0003 	ldmia.w	r2, {r0, r1}
 8028156:	e883 0003 	stmia.w	r3, {r0, r1}
 802815a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802815c:	9300      	str	r3, [sp, #0]
 802815e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028160:	4642      	mov	r2, r8
 8028162:	4629      	mov	r1, r5
 8028164:	4630      	mov	r0, r6
 8028166:	f7ff fe71 	bl	8027e4c <uri_to_path2>
}
 802816a:	b016      	add	sp, #88	@ 0x58
 802816c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028170:	0803b39c 	.word	0x0803b39c
 8028174:	20000140 	.word	0x20000140

08028178 <mg_http_serve_dir>:
                       const struct mg_http_serve_opts *opts) {
 8028178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802817c:	b0a7      	sub	sp, #156	@ 0x9c
 802817e:	4607      	mov	r7, r0
 8028180:	460e      	mov	r6, r1
 8028182:	4615      	mov	r5, r2
  const char *sp = opts->ssi_pattern;
 8028184:	f8d2 8004 	ldr.w	r8, [r2, #4]
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 8028188:	2380      	movs	r3, #128	@ 0x80
 802818a:	9300      	str	r3, [sp, #0]
 802818c:	ab02      	add	r3, sp, #8
 802818e:	f7ff ff63 	bl	8028058 <uri_to_path>
  if (flags < 0) {
 8028192:	2800      	cmp	r0, #0
 8028194:	db20      	blt.n	80281d8 <mg_http_serve_dir+0x60>
  } else if (flags & MG_FS_DIR) {
 8028196:	f010 0f04 	tst.w	r0, #4
 802819a:	d120      	bne.n	80281de <mg_http_serve_dir+0x66>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 802819c:	b1b0      	cbz	r0, 80281cc <mg_http_serve_dir+0x54>
 802819e:	f1b8 0f00 	cmp.w	r8, #0
 80281a2:	d013      	beq.n	80281cc <mg_http_serve_dir+0x54>
 80281a4:	ac22      	add	r4, sp, #136	@ 0x88
 80281a6:	a902      	add	r1, sp, #8
 80281a8:	4620      	mov	r0, r4
 80281aa:	f7fd fbff 	bl	80259ac <mg_str_s>
 80281ae:	f10d 0990 	add.w	r9, sp, #144	@ 0x90
 80281b2:	4641      	mov	r1, r8
 80281b4:	4648      	mov	r0, r9
 80281b6:	f7fd fbf9 	bl	80259ac <mg_str_s>
 80281ba:	2300      	movs	r3, #0
 80281bc:	9300      	str	r3, [sp, #0]
 80281be:	e899 000c 	ldmia.w	r9, {r2, r3}
 80281c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80281c6:	f7fd fe19 	bl	8025dfc <mg_match>
 80281ca:	b978      	cbnz	r0, 80281ec <mg_http_serve_dir+0x74>
    mg_http_serve_file(c, hm, path, opts);
 80281cc:	462b      	mov	r3, r5
 80281ce:	aa02      	add	r2, sp, #8
 80281d0:	4631      	mov	r1, r6
 80281d2:	4638      	mov	r0, r7
 80281d4:	f7fd ffce 	bl	8026174 <mg_http_serve_file>
}
 80281d8:	b027      	add	sp, #156	@ 0x9c
 80281da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    listdir(c, hm, opts, path);
 80281de:	ab02      	add	r3, sp, #8
 80281e0:	462a      	mov	r2, r5
 80281e2:	4631      	mov	r1, r6
 80281e4:	4638      	mov	r0, r7
 80281e6:	f7fe fb9b 	bl	8026920 <listdir>
 80281ea:	e7f5      	b.n	80281d8 <mg_http_serve_dir+0x60>
    mg_http_serve_ssi(c, opts->root_dir, path);
 80281ec:	aa02      	add	r2, sp, #8
 80281ee:	6829      	ldr	r1, [r5, #0]
 80281f0:	4638      	mov	r0, r7
 80281f2:	f7fd fbd1 	bl	8025998 <mg_http_serve_ssi>
 80281f6:	e7ef      	b.n	80281d8 <mg_http_serve_dir+0x60>

080281f8 <printdirentry>:
static void printdirentry(const char *name, void *userdata) {
 80281f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80281fa:	b0c3      	sub	sp, #268	@ 0x10c
 80281fc:	4605      	mov	r5, r0
 80281fe:	460c      	mov	r4, r1
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8028200:	688b      	ldr	r3, [r1, #8]
 8028202:	695e      	ldr	r6, [r3, #20]
 8028204:	b1b6      	cbz	r6, 8028234 <printdirentry+0x3c>
  size_t size = 0;
 8028206:	2300      	movs	r3, #0
 8028208:	9341      	str	r3, [sp, #260]	@ 0x104
  time_t t = 0;
 802820a:	2200      	movs	r2, #0
 802820c:	2300      	movs	r3, #0
 802820e:	e9cd 233e 	strd	r2, r3, [sp, #248]	@ 0xf8
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 8028212:	9501      	str	r5, [sp, #4]
 8028214:	232f      	movs	r3, #47	@ 0x2f
 8028216:	9300      	str	r3, [sp, #0]
 8028218:	68e3      	ldr	r3, [r4, #12]
 802821a:	4a3a      	ldr	r2, [pc, #232]	@ (8028304 <printdirentry+0x10c>)
 802821c:	2180      	movs	r1, #128	@ 0x80
 802821e:	a81e      	add	r0, sp, #120	@ 0x78
 8028220:	f7fc fd26 	bl	8024c70 <mg_snprintf>
 8028224:	2880      	cmp	r0, #128	@ 0x80
 8028226:	d913      	bls.n	8028250 <printdirentry+0x58>
    MG_ERROR(("%s truncated", name));
 8028228:	4b37      	ldr	r3, [pc, #220]	@ (8028308 <printdirentry+0x110>)
 802822a:	681b      	ldr	r3, [r3, #0]
 802822c:	2b00      	cmp	r3, #0
 802822e:	dc03      	bgt.n	8028238 <printdirentry+0x40>
}
 8028230:	b043      	add	sp, #268	@ 0x10c
 8028232:	bdf0      	pop	{r4, r5, r6, r7, pc}
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8028234:	4e35      	ldr	r6, [pc, #212]	@ (802830c <printdirentry+0x114>)
 8028236:	e7e6      	b.n	8028206 <printdirentry+0xe>
    MG_ERROR(("%s truncated", name));
 8028238:	4b35      	ldr	r3, [pc, #212]	@ (8028310 <printdirentry+0x118>)
 802823a:	f640 3248 	movw	r2, #2888	@ 0xb48
 802823e:	4935      	ldr	r1, [pc, #212]	@ (8028314 <printdirentry+0x11c>)
 8028240:	2001      	movs	r0, #1
 8028242:	f7ff fb3d 	bl	80278c0 <mg_log_prefix>
 8028246:	4629      	mov	r1, r5
 8028248:	4833      	ldr	r0, [pc, #204]	@ (8028318 <printdirentry+0x120>)
 802824a:	f7fd f9d1 	bl	80255f0 <mg_log>
 802824e:	e7ef      	b.n	8028230 <printdirentry+0x38>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 8028250:	6833      	ldr	r3, [r6, #0]
 8028252:	aa3e      	add	r2, sp, #248	@ 0xf8
 8028254:	a941      	add	r1, sp, #260	@ 0x104
 8028256:	a81e      	add	r0, sp, #120	@ 0x78
 8028258:	4798      	blx	r3
 802825a:	b9a8      	cbnz	r0, 8028288 <printdirentry+0x90>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 802825c:	4b2a      	ldr	r3, [pc, #168]	@ (8028308 <printdirentry+0x110>)
 802825e:	681b      	ldr	r3, [r3, #0]
 8028260:	2b00      	cmp	r3, #0
 8028262:	dde5      	ble.n	8028230 <printdirentry+0x38>
 8028264:	4b2a      	ldr	r3, [pc, #168]	@ (8028310 <printdirentry+0x118>)
 8028266:	f640 324a 	movw	r2, #2890	@ 0xb4a
 802826a:	492a      	ldr	r1, [pc, #168]	@ (8028314 <printdirentry+0x11c>)
 802826c:	2001      	movs	r0, #1
 802826e:	f7ff fb27 	bl	80278c0 <mg_log_prefix>
 8028272:	6823      	ldr	r3, [r4, #0]
 8028274:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8028276:	f006 f807 	bl	802e288 <__errno>
 802827a:	6803      	ldr	r3, [r0, #0]
 802827c:	aa1e      	add	r2, sp, #120	@ 0x78
 802827e:	4621      	mov	r1, r4
 8028280:	4826      	ldr	r0, [pc, #152]	@ (802831c <printdirentry+0x124>)
 8028282:	f7fd f9b5 	bl	80255f0 <mg_log>
 8028286:	e7d3      	b.n	8028230 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8028288:	f010 0604 	ands.w	r6, r0, #4
 802828c:	d02b      	beq.n	80282e6 <printdirentry+0xee>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 802828e:	4b24      	ldr	r3, [pc, #144]	@ (8028320 <printdirentry+0x128>)
 8028290:	4a24      	ldr	r2, [pc, #144]	@ (8028324 <printdirentry+0x12c>)
 8028292:	2128      	movs	r1, #40	@ 0x28
 8028294:	a814      	add	r0, sp, #80	@ 0x50
 8028296:	f7fc fceb 	bl	8024c70 <mg_snprintf>
 802829a:	4f23      	ldr	r7, [pc, #140]	@ (8028328 <printdirentry+0x130>)
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 802829c:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 802829e:	4a23      	ldr	r2, [pc, #140]	@ (802832c <printdirentry+0x134>)
 80282a0:	2128      	movs	r1, #40	@ 0x28
 80282a2:	eb0d 0001 	add.w	r0, sp, r1
 80282a6:	f7fc fce3 	bl	8024c70 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 80282aa:	4628      	mov	r0, r5
 80282ac:	f7e7 fff8 	bl	80102a0 <strlen>
 80282b0:	4601      	mov	r1, r0
 80282b2:	2380      	movs	r3, #128	@ 0x80
 80282b4:	aa1e      	add	r2, sp, #120	@ 0x78
 80282b6:	4628      	mov	r0, r5
 80282b8:	f7fd fa42 	bl	8025740 <mg_url_encode>
 80282bc:	4602      	mov	r2, r0
    mg_printf(d->c,
 80282be:	6820      	ldr	r0, [r4, #0]
 80282c0:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 80282c2:	b9de      	cbnz	r6, 80282fc <printdirentry+0x104>
 80282c4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80282c6:	2400      	movs	r4, #0
 80282c8:	ae14      	add	r6, sp, #80	@ 0x50
 80282ca:	9608      	str	r6, [sp, #32]
 80282cc:	9306      	str	r3, [sp, #24]
 80282ce:	9407      	str	r4, [sp, #28]
 80282d0:	ab0a      	add	r3, sp, #40	@ 0x28
 80282d2:	9304      	str	r3, [sp, #16]
 80282d4:	9103      	str	r1, [sp, #12]
 80282d6:	9702      	str	r7, [sp, #8]
 80282d8:	9501      	str	r5, [sp, #4]
 80282da:	9700      	str	r7, [sp, #0]
 80282dc:	ab1e      	add	r3, sp, #120	@ 0x78
 80282de:	4914      	ldr	r1, [pc, #80]	@ (8028330 <printdirentry+0x138>)
 80282e0:	f7fd f9b4 	bl	802564c <mg_printf>
}
 80282e4:	e7a4      	b.n	8028230 <printdirentry+0x38>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 80282e6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80282e8:	9300      	str	r3, [sp, #0]
 80282ea:	2300      	movs	r3, #0
 80282ec:	9301      	str	r3, [sp, #4]
 80282ee:	4a11      	ldr	r2, [pc, #68]	@ (8028334 <printdirentry+0x13c>)
 80282f0:	2128      	movs	r1, #40	@ 0x28
 80282f2:	a814      	add	r0, sp, #80	@ 0x50
 80282f4:	f7fc fcbc 	bl	8024c70 <mg_snprintf>
 80282f8:	4f0f      	ldr	r7, [pc, #60]	@ (8028338 <printdirentry+0x140>)
 80282fa:	e7cf      	b.n	802829c <printdirentry+0xa4>
    mg_printf(d->c,
 80282fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028300:	461c      	mov	r4, r3
 8028302:	e7e1      	b.n	80282c8 <printdirentry+0xd0>
 8028304:	0803bd4c 	.word	0x0803bd4c
 8028308:	2000013c 	.word	0x2000013c
 802830c:	20000140 	.word	0x20000140
 8028310:	0803d804 	.word	0x0803d804
 8028314:	0803bba0 	.word	0x0803bba0
 8028318:	0803bd54 	.word	0x0803bd54
 802831c:	0803bd64 	.word	0x0803bd64
 8028320:	0803bd78 	.word	0x0803bd78
 8028324:	0803beb8 	.word	0x0803beb8
 8028328:	0803b39c 	.word	0x0803b39c
 802832c:	08037dd4 	.word	0x08037dd4
 8028330:	0803bd88 	.word	0x0803bd88
 8028334:	0803bd80 	.word	0x0803bd80
 8028338:	08038678 	.word	0x08038678

0802833c <mg_http_upload>:
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 802833c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028340:	b0ca      	sub	sp, #296	@ 0x128
 8028342:	4607      	mov	r7, r0
 8028344:	460d      	mov	r5, r1
 8028346:	4616      	mov	r6, r2
 8028348:	4698      	mov	r8, r3
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 802834a:	2330      	movs	r3, #48	@ 0x30
 802834c:	9343      	str	r3, [sp, #268]	@ 0x10c
 802834e:	2400      	movs	r4, #0
 8028350:	9444      	str	r4, [sp, #272]	@ 0x110
 8028352:	9445      	str	r4, [sp, #276]	@ 0x114
 8028354:	9446      	str	r4, [sp, #280]	@ 0x118
 8028356:	9447      	str	r4, [sp, #284]	@ 0x11c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 8028358:	f101 0a10 	add.w	sl, r1, #16
 802835c:	2314      	movs	r3, #20
 802835e:	aa43      	add	r2, sp, #268	@ 0x10c
 8028360:	4964      	ldr	r1, [pc, #400]	@ (80284f4 <mg_http_upload+0x1b8>)
 8028362:	4650      	mov	r0, sl
 8028364:	f7fe fa0f 	bl	8026786 <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8028368:	f10d 098c 	add.w	r9, sp, #140	@ 0x8c
 802836c:	2380      	movs	r3, #128	@ 0x80
 802836e:	464a      	mov	r2, r9
 8028370:	4961      	ldr	r1, [pc, #388]	@ (80284f8 <mg_http_upload+0x1bc>)
 8028372:	4650      	mov	r0, sl
 8028374:	f7fe fa07 	bl	8026786 <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 8028378:	4622      	mov	r2, r4
 802837a:	4621      	mov	r1, r4
 802837c:	a843      	add	r0, sp, #268	@ 0x10c
 802837e:	f003 fefd 	bl	802c17c <strtol>
 8028382:	4604      	mov	r4, r0
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 8028384:	f8cd 9004 	str.w	r9, [sp, #4]
 8028388:	232f      	movs	r3, #47	@ 0x2f
 802838a:	9300      	str	r3, [sp, #0]
 802838c:	4643      	mov	r3, r8
 802838e:	4a5b      	ldr	r2, [pc, #364]	@ (80284fc <mg_http_upload+0x1c0>)
 8028390:	2180      	movs	r1, #128	@ 0x80
 8028392:	a803      	add	r0, sp, #12
 8028394:	f7fc fc6c 	bl	8024c70 <mg_snprintf>
  if (hm->body.len == 0) {
 8028398:	f8d5 8204 	ldr.w	r8, [r5, #516]	@ 0x204
 802839c:	f1b8 0f00 	cmp.w	r8, #0
 80283a0:	d047      	beq.n	8028432 <mg_http_upload+0xf6>
  } else if (file[0] == '\0') {
 80283a2:	f89d 308c 	ldrb.w	r3, [sp, #140]	@ 0x8c
 80283a6:	2b00      	cmp	r3, #0
 80283a8:	d04c      	beq.n	8028444 <mg_http_upload+0x108>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 80283aa:	f50d 7990 	add.w	r9, sp, #288	@ 0x120
 80283ae:	a923      	add	r1, sp, #140	@ 0x8c
 80283b0:	4648      	mov	r0, r9
 80283b2:	f7fd fafb 	bl	80259ac <mg_str_s>
 80283b6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80283ba:	f7ff fa56 	bl	802786a <mg_path_is_sane>
 80283be:	2800      	cmp	r0, #0
 80283c0:	d04a      	beq.n	8028458 <mg_http_upload+0x11c>
  } else if (offset < 0) {
 80283c2:	2c00      	cmp	r4, #0
 80283c4:	db54      	blt.n	8028470 <mg_http_upload+0x134>
  } else if ((size_t) offset + hm->body.len > max_size) {
 80283c6:	44a0      	add	r8, r4
 80283c8:	9b52      	ldr	r3, [sp, #328]	@ 0x148
 80283ca:	4598      	cmp	r8, r3
 80283cc:	d85a      	bhi.n	8028484 <mg_http_upload+0x148>
    size_t current_size = 0;
 80283ce:	2300      	movs	r3, #0
 80283d0:	9302      	str	r3, [sp, #8]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 80283d2:	4b4b      	ldr	r3, [pc, #300]	@ (8028500 <mg_http_upload+0x1c4>)
 80283d4:	681b      	ldr	r3, [r3, #0]
 80283d6:	2b02      	cmp	r3, #2
 80283d8:	dc61      	bgt.n	802849e <mg_http_upload+0x162>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 80283da:	b914      	cbnz	r4, 80283e2 <mg_http_upload+0xa6>
 80283dc:	6a33      	ldr	r3, [r6, #32]
 80283de:	a803      	add	r0, sp, #12
 80283e0:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 80283e2:	6833      	ldr	r3, [r6, #0]
 80283e4:	2200      	movs	r2, #0
 80283e6:	a902      	add	r1, sp, #8
 80283e8:	a803      	add	r0, sp, #12
 80283ea:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 80283ec:	2c00      	cmp	r4, #0
 80283ee:	dd02      	ble.n	80283f6 <mg_http_upload+0xba>
 80283f0:	9b02      	ldr	r3, [sp, #8]
 80283f2:	429c      	cmp	r4, r3
 80283f4:	d162      	bne.n	80284bc <mg_http_upload+0x180>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 80283f6:	2202      	movs	r2, #2
 80283f8:	a903      	add	r1, sp, #12
 80283fa:	4630      	mov	r0, r6
 80283fc:	f7fb fea4 	bl	8024148 <mg_fs_open>
 8028400:	4680      	mov	r8, r0
 8028402:	2800      	cmp	r0, #0
 8028404:	d066      	beq.n	80284d4 <mg_http_upload+0x198>
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 8028406:	6973      	ldr	r3, [r6, #20]
 8028408:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 802840c:	f8d5 1200 	ldr.w	r1, [r5, #512]	@ 0x200
 8028410:	6800      	ldr	r0, [r0, #0]
 8028412:	4798      	blx	r3
 8028414:	4404      	add	r4, r0
      mg_fs_close(fd);
 8028416:	4640      	mov	r0, r8
 8028418:	f7fb feaf 	bl	802417a <mg_fs_close>
      mg_http_reply(c, 200, headers_tmp, "%ld", res);  //TODO DELETE HEADERS!!!!!
 802841c:	9400      	str	r4, [sp, #0]
 802841e:	4b39      	ldr	r3, [pc, #228]	@ (8028504 <mg_http_upload+0x1c8>)
 8028420:	4a39      	ldr	r2, [pc, #228]	@ (8028508 <mg_http_upload+0x1cc>)
 8028422:	21c8      	movs	r1, #200	@ 0xc8
 8028424:	4638      	mov	r0, r7
 8028426:	f7fd f937 	bl	8025698 <mg_http_reply>
}
 802842a:	4620      	mov	r0, r4
 802842c:	b04a      	add	sp, #296	@ 0x128
 802842e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    mg_http_reply(c, 200, headers_tmp, "%ld", res);  // Nothing to write  //TODO DELETE HEADERS!!!!!
 8028432:	2400      	movs	r4, #0
 8028434:	9400      	str	r4, [sp, #0]
 8028436:	4b33      	ldr	r3, [pc, #204]	@ (8028504 <mg_http_upload+0x1c8>)
 8028438:	4a33      	ldr	r2, [pc, #204]	@ (8028508 <mg_http_upload+0x1cc>)
 802843a:	21c8      	movs	r1, #200	@ 0xc8
 802843c:	4638      	mov	r0, r7
 802843e:	f7fd f92b 	bl	8025698 <mg_http_reply>
 8028442:	e7f2      	b.n	802842a <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "file required");
 8028444:	4b31      	ldr	r3, [pc, #196]	@ (802850c <mg_http_upload+0x1d0>)
 8028446:	4a32      	ldr	r2, [pc, #200]	@ (8028510 <mg_http_upload+0x1d4>)
 8028448:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802844c:	4638      	mov	r0, r7
 802844e:	f7fd f923 	bl	8025698 <mg_http_reply>
    res = -1;
 8028452:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8028456:	e7e8      	b.n	802842a <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 8028458:	ab23      	add	r3, sp, #140	@ 0x8c
 802845a:	9300      	str	r3, [sp, #0]
 802845c:	4b2d      	ldr	r3, [pc, #180]	@ (8028514 <mg_http_upload+0x1d8>)
 802845e:	4a2c      	ldr	r2, [pc, #176]	@ (8028510 <mg_http_upload+0x1d4>)
 8028460:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8028464:	4638      	mov	r0, r7
 8028466:	f7fd f917 	bl	8025698 <mg_http_reply>
    res = -2;
 802846a:	f06f 0401 	mvn.w	r4, #1
 802846e:	e7dc      	b.n	802842a <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "offset required");
 8028470:	4b29      	ldr	r3, [pc, #164]	@ (8028518 <mg_http_upload+0x1dc>)
 8028472:	4a27      	ldr	r2, [pc, #156]	@ (8028510 <mg_http_upload+0x1d4>)
 8028474:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8028478:	4638      	mov	r0, r7
 802847a:	f7fd f90d 	bl	8025698 <mg_http_reply>
    res = -3;
 802847e:	f06f 0402 	mvn.w	r4, #2
 8028482:	e7d2      	b.n	802842a <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 8028484:	9301      	str	r3, [sp, #4]
 8028486:	ab03      	add	r3, sp, #12
 8028488:	9300      	str	r3, [sp, #0]
 802848a:	4b24      	ldr	r3, [pc, #144]	@ (802851c <mg_http_upload+0x1e0>)
 802848c:	4a20      	ldr	r2, [pc, #128]	@ (8028510 <mg_http_upload+0x1d4>)
 802848e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8028492:	4638      	mov	r0, r7
 8028494:	f7fd f900 	bl	8025698 <mg_http_reply>
    res = -4;
 8028498:	f06f 0403 	mvn.w	r4, #3
 802849c:	e7c5      	b.n	802842a <mg_http_upload+0xee>
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 802849e:	4b20      	ldr	r3, [pc, #128]	@ (8028520 <mg_http_upload+0x1e4>)
 80284a0:	f640 426a 	movw	r2, #3178	@ 0xc6a
 80284a4:	491f      	ldr	r1, [pc, #124]	@ (8028524 <mg_http_upload+0x1e8>)
 80284a6:	2003      	movs	r0, #3
 80284a8:	f7ff fa0a 	bl	80278c0 <mg_log_prefix>
 80284ac:	4623      	mov	r3, r4
 80284ae:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 80284b2:	a903      	add	r1, sp, #12
 80284b4:	481c      	ldr	r0, [pc, #112]	@ (8028528 <mg_http_upload+0x1ec>)
 80284b6:	f7fd f89b 	bl	80255f0 <mg_log>
 80284ba:	e78e      	b.n	80283da <mg_http_upload+0x9e>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 80284bc:	ab03      	add	r3, sp, #12
 80284be:	9300      	str	r3, [sp, #0]
 80284c0:	4b1a      	ldr	r3, [pc, #104]	@ (802852c <mg_http_upload+0x1f0>)
 80284c2:	4a13      	ldr	r2, [pc, #76]	@ (8028510 <mg_http_upload+0x1d4>)
 80284c4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80284c8:	4638      	mov	r0, r7
 80284ca:	f7fd f8e5 	bl	8025698 <mg_http_reply>
      res = -5;
 80284ce:	f06f 0404 	mvn.w	r4, #4
 80284d2:	e7aa      	b.n	802842a <mg_http_upload+0xee>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 80284d4:	f005 fed8 	bl	802e288 <__errno>
 80284d8:	6803      	ldr	r3, [r0, #0]
 80284da:	9301      	str	r3, [sp, #4]
 80284dc:	ab03      	add	r3, sp, #12
 80284de:	9300      	str	r3, [sp, #0]
 80284e0:	4b13      	ldr	r3, [pc, #76]	@ (8028530 <mg_http_upload+0x1f4>)
 80284e2:	4a0b      	ldr	r2, [pc, #44]	@ (8028510 <mg_http_upload+0x1d4>)
 80284e4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80284e8:	4638      	mov	r0, r7
 80284ea:	f7fd f8d5 	bl	8025698 <mg_http_reply>
      res = -6;
 80284ee:	f06f 0405 	mvn.w	r4, #5
 80284f2:	e79a      	b.n	802842a <mg_http_upload+0xee>
 80284f4:	0803bde0 	.word	0x0803bde0
 80284f8:	0803be08 	.word	0x0803be08
 80284fc:	0803bd4c 	.word	0x0803bd4c
 8028500:	2000013c 	.word	0x2000013c
 8028504:	0803bde8 	.word	0x0803bde8
 8028508:	08038090 	.word	0x08038090
 802850c:	0803bdec 	.word	0x0803bdec
 8028510:	08038678 	.word	0x08038678
 8028514:	0803bdfc 	.word	0x0803bdfc
 8028518:	0803be10 	.word	0x0803be10
 802851c:	0803be20 	.word	0x0803be20
 8028520:	0803d7f4 	.word	0x0803d7f4
 8028524:	0803bba0 	.word	0x0803bba0
 8028528:	0803be3c 	.word	0x0803be3c
 802852c:	0803be54 	.word	0x0803be54
 8028530:	0803be68 	.word	0x0803be68

08028534 <mg_iobuf_resize>:
int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8028534:	b570      	push	{r4, r5, r6, lr}
 8028536:	b082      	sub	sp, #8
 8028538:	4604      	mov	r4, r0
 802853a:	4608      	mov	r0, r1
  new_size = roundup(new_size, io->align);
 802853c:	68e1      	ldr	r1, [r4, #12]
 802853e:	f7f9 fba4 	bl	8021c8a <roundup>
  if (new_size == 0) {
 8028542:	b130      	cbz	r0, 8028552 <mg_iobuf_resize+0x1e>
 8028544:	4605      	mov	r5, r0
  } else if (new_size != io->size) {
 8028546:	6863      	ldr	r3, [r4, #4]
 8028548:	4283      	cmp	r3, r0
 802854a:	d10f      	bne.n	802856c <mg_iobuf_resize+0x38>
  int ok = 1;
 802854c:	2001      	movs	r0, #1
}
 802854e:	b002      	add	sp, #8
 8028550:	bd70      	pop	{r4, r5, r6, pc}
    mg_bzero(io->buf, io->size);
 8028552:	6861      	ldr	r1, [r4, #4]
 8028554:	6820      	ldr	r0, [r4, #0]
 8028556:	f7fe fd71 	bl	802703c <mg_bzero>
    free(io->buf);
 802855a:	6820      	ldr	r0, [r4, #0]
 802855c:	f7f3 fdde 	bl	801c11c <vPortFree>
    io->buf = NULL;
 8028560:	2300      	movs	r3, #0
 8028562:	6023      	str	r3, [r4, #0]
    io->len = io->size = 0;
 8028564:	6063      	str	r3, [r4, #4]
 8028566:	60a3      	str	r3, [r4, #8]
  int ok = 1;
 8028568:	2001      	movs	r0, #1
 802856a:	e7f0      	b.n	802854e <mg_iobuf_resize+0x1a>
    void *p = calloc(1, new_size);
 802856c:	4601      	mov	r1, r0
 802856e:	2001      	movs	r0, #1
 8028570:	f7fb fc4a 	bl	8023e08 <mg_calloc>
    if (p != NULL) {
 8028574:	4606      	mov	r6, r0
 8028576:	b198      	cbz	r0, 80285a0 <mg_iobuf_resize+0x6c>
      size_t len = new_size < io->len ? new_size : io->len;
 8028578:	68a2      	ldr	r2, [r4, #8]
 802857a:	42aa      	cmp	r2, r5
 802857c:	bf28      	it	cs
 802857e:	462a      	movcs	r2, r5
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 8028580:	b11a      	cbz	r2, 802858a <mg_iobuf_resize+0x56>
 8028582:	6821      	ldr	r1, [r4, #0]
 8028584:	b109      	cbz	r1, 802858a <mg_iobuf_resize+0x56>
 8028586:	f004 f921 	bl	802c7cc <memmove>
      mg_bzero(io->buf, io->size);
 802858a:	6861      	ldr	r1, [r4, #4]
 802858c:	6820      	ldr	r0, [r4, #0]
 802858e:	f7fe fd55 	bl	802703c <mg_bzero>
      free(io->buf);
 8028592:	6820      	ldr	r0, [r4, #0]
 8028594:	f7f3 fdc2 	bl	801c11c <vPortFree>
      io->buf = (unsigned char *) p;
 8028598:	6026      	str	r6, [r4, #0]
      io->size = new_size;
 802859a:	6065      	str	r5, [r4, #4]
  int ok = 1;
 802859c:	2001      	movs	r0, #1
 802859e:	e7d6      	b.n	802854e <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 80285a0:	4b0b      	ldr	r3, [pc, #44]	@ (80285d0 <mg_iobuf_resize+0x9c>)
 80285a2:	681b      	ldr	r3, [r3, #0]
 80285a4:	2b00      	cmp	r3, #0
 80285a6:	dc01      	bgt.n	80285ac <mg_iobuf_resize+0x78>
      ok = 0;
 80285a8:	2000      	movs	r0, #0
  return ok;
 80285aa:	e7d0      	b.n	802854e <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 80285ac:	4b09      	ldr	r3, [pc, #36]	@ (80285d4 <mg_iobuf_resize+0xa0>)
 80285ae:	f640 5244 	movw	r2, #3396	@ 0xd44
 80285b2:	4909      	ldr	r1, [pc, #36]	@ (80285d8 <mg_iobuf_resize+0xa4>)
 80285b4:	2001      	movs	r0, #1
 80285b6:	f7ff f983 	bl	80278c0 <mg_log_prefix>
 80285ba:	2600      	movs	r6, #0
 80285bc:	9500      	str	r5, [sp, #0]
 80285be:	9601      	str	r6, [sp, #4]
 80285c0:	6862      	ldr	r2, [r4, #4]
 80285c2:	4633      	mov	r3, r6
 80285c4:	4805      	ldr	r0, [pc, #20]	@ (80285dc <mg_iobuf_resize+0xa8>)
 80285c6:	f7fd f813 	bl	80255f0 <mg_log>
      ok = 0;
 80285ca:	4630      	mov	r0, r6
 80285cc:	e7bf      	b.n	802854e <mg_iobuf_resize+0x1a>
 80285ce:	bf00      	nop
 80285d0:	2000013c 	.word	0x2000013c
 80285d4:	0803d7e4 	.word	0x0803d7e4
 80285d8:	0803bba0 	.word	0x0803bba0
 80285dc:	0803be78 	.word	0x0803be78

080285e0 <static_cb>:
static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 80285e0:	b538      	push	{r3, r4, r5, lr}
 80285e2:	4604      	mov	r4, r0
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80285e4:	2908      	cmp	r1, #8
 80285e6:	d004      	beq.n	80285f2 <static_cb+0x12>
 80285e8:	2902      	cmp	r1, #2
 80285ea:	d002      	beq.n	80285f2 <static_cb+0x12>
  } else if (ev == MG_EV_CLOSE) {
 80285ec:	2909      	cmp	r1, #9
 80285ee:	d02b      	beq.n	8028648 <static_cb+0x68>
}
 80285f0:	bd38      	pop	{r3, r4, r5, pc}
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 80285f2:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 80285f6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80285f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80285fc:	d31d      	bcc.n	802863a <static_cb+0x5a>
    if (c->send.len >= c->send.size) return;  // Rate limit
 80285fe:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8028600:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8028602:	4299      	cmp	r1, r3
 8028604:	d2f4      	bcs.n	80285f0 <static_cb+0x10>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8028606:	1a5b      	subs	r3, r3, r1
 8028608:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 802860c:	429a      	cmp	r2, r3
 802860e:	d300      	bcc.n	8028612 <static_cb+0x32>
 8028610:	461a      	mov	r2, r3
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8028612:	686b      	ldr	r3, [r5, #4]
 8028614:	691b      	ldr	r3, [r3, #16]
 8028616:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8028618:	4401      	add	r1, r0
 802861a:	6828      	ldr	r0, [r5, #0]
 802861c:	4798      	blx	r3
    c->send.len += n;
 802861e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8028620:	4403      	add	r3, r0
 8028622:	6523      	str	r3, [r4, #80]	@ 0x50
    *cl -= n;
 8028624:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8028628:	1a1b      	subs	r3, r3, r0
 802862a:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    if (n == 0) restore_http_cb(c);
 802862e:	2800      	cmp	r0, #0
 8028630:	d1de      	bne.n	80285f0 <static_cb+0x10>
 8028632:	4620      	mov	r0, r4
 8028634:	f7fb fdae 	bl	8024194 <restore_http_cb>
 8028638:	e7da      	b.n	80285f0 <static_cb+0x10>
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 802863a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 802863e:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8028642:	f7ff ff77 	bl	8028534 <mg_iobuf_resize>
 8028646:	e7da      	b.n	80285fe <static_cb+0x1e>
    restore_http_cb(c);
 8028648:	f7fb fda4 	bl	8024194 <restore_http_cb>
  (void) ev_data;
 802864c:	e7d0      	b.n	80285f0 <static_cb+0x10>

0802864e <mg_iobuf_add>:
                    size_t len) {
 802864e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028652:	4604      	mov	r4, r0
 8028654:	460f      	mov	r7, r1
 8028656:	4690      	mov	r8, r2
 8028658:	461d      	mov	r5, r3
  size_t new_size = roundup(io->len + len, io->align);
 802865a:	6880      	ldr	r0, [r0, #8]
 802865c:	68e1      	ldr	r1, [r4, #12]
 802865e:	4418      	add	r0, r3
 8028660:	f7f9 fb13 	bl	8021c8a <roundup>
 8028664:	4606      	mov	r6, r0
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 8028666:	4601      	mov	r1, r0
 8028668:	4620      	mov	r0, r4
 802866a:	f7ff ff63 	bl	8028534 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 802866e:	6863      	ldr	r3, [r4, #4]
 8028670:	42b3      	cmp	r3, r6
 8028672:	d000      	beq.n	8028676 <mg_iobuf_add+0x28>
 8028674:	2500      	movs	r5, #0
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8028676:	68a2      	ldr	r2, [r4, #8]
 8028678:	42ba      	cmp	r2, r7
 802867a:	d812      	bhi.n	80286a2 <mg_iobuf_add+0x54>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 802867c:	f1b8 0f00 	cmp.w	r8, #0
 8028680:	d005      	beq.n	802868e <mg_iobuf_add+0x40>
 8028682:	6820      	ldr	r0, [r4, #0]
 8028684:	462a      	mov	r2, r5
 8028686:	4641      	mov	r1, r8
 8028688:	4438      	add	r0, r7
 802868a:	f004 f89f 	bl	802c7cc <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 802868e:	68a3      	ldr	r3, [r4, #8]
 8028690:	42bb      	cmp	r3, r7
 8028692:	d200      	bcs.n	8028696 <mg_iobuf_add+0x48>
 8028694:	60a7      	str	r7, [r4, #8]
  io->len += len;
 8028696:	68a3      	ldr	r3, [r4, #8]
 8028698:	442b      	add	r3, r5
 802869a:	60a3      	str	r3, [r4, #8]
}
 802869c:	4628      	mov	r0, r5
 802869e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 80286a2:	6823      	ldr	r3, [r4, #0]
 80286a4:	19e8      	adds	r0, r5, r7
 80286a6:	1bd2      	subs	r2, r2, r7
 80286a8:	19d9      	adds	r1, r3, r7
 80286aa:	4418      	add	r0, r3
 80286ac:	f004 f88e 	bl	802c7cc <memmove>
 80286b0:	e7e4      	b.n	802867c <mg_iobuf_add+0x2e>

080286b2 <mg_iobuf_free>:
void mg_iobuf_free(struct mg_iobuf *io) {
 80286b2:	b508      	push	{r3, lr}
  mg_iobuf_resize(io, 0);
 80286b4:	2100      	movs	r1, #0
 80286b6:	f7ff ff3d 	bl	8028534 <mg_iobuf_resize>
}
 80286ba:	bd08      	pop	{r3, pc}

080286bc <rx_udp>:
static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80286bc:	b538      	push	{r3, r4, r5, lr}
 80286be:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 80286c0:	2201      	movs	r2, #1
 80286c2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80286c4:	f7fb fbc5 	bl	8023e52 <getpeer>
  if (c == NULL) {
 80286c8:	b368      	cbz	r0, 8028726 <rx_udp+0x6a>
 80286ca:	4605      	mov	r5, r0
    c->rem.port = pkt->udp->sport;
 80286cc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80286ce:	881b      	ldrh	r3, [r3, #0]
 80286d0:	8583      	strh	r3, [r0, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 80286d2:	69e3      	ldr	r3, [r4, #28]
 80286d4:	68db      	ldr	r3, [r3, #12]
 80286d6:	61c3      	str	r3, [r0, #28]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 80286d8:	6923      	ldr	r3, [r4, #16]
 80286da:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80286de:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
 80286e2:	895b      	ldrh	r3, [r3, #10]
 80286e4:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 80286e8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80286ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80286ee:	d21b      	bcs.n	8028728 <rx_udp+0x6c>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 80286f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80286f2:	1ad2      	subs	r2, r2, r3
 80286f4:	68e1      	ldr	r1, [r4, #12]
 80286f6:	428a      	cmp	r2, r1
 80286f8:	d204      	bcs.n	8028704 <rx_udp+0x48>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 80286fa:	4419      	add	r1, r3
 80286fc:	3038      	adds	r0, #56	@ 0x38
 80286fe:	f7ff ff19 	bl	8028534 <mg_iobuf_resize>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 8028702:	b1a8      	cbz	r0, 8028730 <rx_udp+0x74>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 8028704:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8028706:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8028708:	68e2      	ldr	r2, [r4, #12]
 802870a:	68a1      	ldr	r1, [r4, #8]
 802870c:	4418      	add	r0, r3
 802870e:	f005 fdf3 	bl	802e2f8 <memcpy>
      c->recv.len += pkt->pay.len;
 8028712:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8028714:	4622      	mov	r2, r4
 8028716:	f852 1f0c 	ldr.w	r1, [r2, #12]!
 802871a:	440b      	add	r3, r1
 802871c:	642b      	str	r3, [r5, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 802871e:	2107      	movs	r1, #7
 8028720:	4628      	mov	r0, r5
 8028722:	f7fb fd02 	bl	802412a <mg_call>
}
 8028726:	bd38      	pop	{r3, r4, r5, pc}
      mg_error(c, "max_recv_buf_size reached");
 8028728:	4904      	ldr	r1, [pc, #16]	@ (802873c <rx_udp+0x80>)
 802872a:	f7ff f9b1 	bl	8027a90 <mg_error>
 802872e:	e7fa      	b.n	8028726 <rx_udp+0x6a>
      mg_error(c, "oom");
 8028730:	4903      	ldr	r1, [pc, #12]	@ (8028740 <rx_udp+0x84>)
 8028732:	4628      	mov	r0, r5
 8028734:	f7ff f9ac 	bl	8027a90 <mg_error>
 8028738:	e7f5      	b.n	8028726 <rx_udp+0x6a>
 802873a:	bf00      	nop
 802873c:	0803be84 	.word	0x0803be84
 8028740:	0803bea0 	.word	0x0803bea0

08028744 <mg_pfn_iobuf_private>:
static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8028744:	b538      	push	{r3, r4, r5, lr}
 8028746:	4605      	mov	r5, r0
 8028748:	460c      	mov	r4, r1
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 802874a:	b122      	cbz	r2, 8028756 <mg_pfn_iobuf_private+0x12>
 802874c:	6889      	ldr	r1, [r1, #8]
 802874e:	3102      	adds	r1, #2
 8028750:	6863      	ldr	r3, [r4, #4]
 8028752:	4299      	cmp	r1, r3
 8028754:	d80d      	bhi.n	8028772 <mg_pfn_iobuf_private+0x2e>
  if (io->len + 2 <= io->size) {
 8028756:	68a3      	ldr	r3, [r4, #8]
 8028758:	1c99      	adds	r1, r3, #2
 802875a:	6862      	ldr	r2, [r4, #4]
 802875c:	4291      	cmp	r1, r2
 802875e:	d80c      	bhi.n	802877a <mg_pfn_iobuf_private+0x36>
    io->buf[io->len++] = (uint8_t) ch;
 8028760:	6822      	ldr	r2, [r4, #0]
 8028762:	1c59      	adds	r1, r3, #1
 8028764:	60a1      	str	r1, [r4, #8]
 8028766:	54d5      	strb	r5, [r2, r3]
    io->buf[io->len] = 0;
 8028768:	6822      	ldr	r2, [r4, #0]
 802876a:	68a3      	ldr	r3, [r4, #8]
 802876c:	2100      	movs	r1, #0
 802876e:	54d1      	strb	r1, [r2, r3]
}
 8028770:	bd38      	pop	{r3, r4, r5, pc}
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8028772:	4620      	mov	r0, r4
 8028774:	f7ff fede 	bl	8028534 <mg_iobuf_resize>
 8028778:	e7ed      	b.n	8028756 <mg_pfn_iobuf_private+0x12>
  } else if (io->len < io->size) {
 802877a:	4293      	cmp	r3, r2
 802877c:	d2f8      	bcs.n	8028770 <mg_pfn_iobuf_private+0x2c>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 802877e:	6822      	ldr	r2, [r4, #0]
 8028780:	1c59      	adds	r1, r3, #1
 8028782:	60a1      	str	r1, [r4, #8]
 8028784:	2100      	movs	r1, #0
 8028786:	54d1      	strb	r1, [r2, r3]
}
 8028788:	e7f2      	b.n	8028770 <mg_pfn_iobuf_private+0x2c>

0802878a <mg_pfn_iobuf>:
void mg_pfn_iobuf(char ch, void *param) {
 802878a:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, true);
 802878c:	2201      	movs	r2, #1
 802878e:	f7ff ffd9 	bl	8028744 <mg_pfn_iobuf_private>
}
 8028792:	bd08      	pop	{r3, pc}

08028794 <mg_putchar_iobuf_static>:
static void mg_putchar_iobuf_static(char ch, void *param) {
 8028794:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, false);
 8028796:	2200      	movs	r2, #0
 8028798:	f7ff ffd4 	bl	8028744 <mg_pfn_iobuf_private>
}
 802879c:	bd08      	pop	{r3, pc}
	...

080287a0 <mg_close_conn>:
void mg_close_conn(struct mg_connection *c) {
 80287a0:	b510      	push	{r4, lr}
 80287a2:	4604      	mov	r4, r0
  mg_resolve_cancel(c);  // Close any pending DNS query
 80287a4:	f7fb fc60 	bl	8024068 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 80287a8:	6862      	ldr	r2, [r4, #4]
 80287aa:	e000      	b.n	80287ae <mg_close_conn+0xe>
 80287ac:	461a      	mov	r2, r3
 80287ae:	6813      	ldr	r3, [r2, #0]
 80287b0:	42a3      	cmp	r3, r4
 80287b2:	d1fb      	bne.n	80287ac <mg_close_conn+0xc>
 80287b4:	6823      	ldr	r3, [r4, #0]
 80287b6:	6013      	str	r3, [r2, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 80287b8:	6863      	ldr	r3, [r4, #4]
 80287ba:	689a      	ldr	r2, [r3, #8]
 80287bc:	42a2      	cmp	r2, r4
 80287be:	d020      	beq.n	8028802 <mg_close_conn+0x62>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 80287c0:	6863      	ldr	r3, [r4, #4]
 80287c2:	691a      	ldr	r2, [r3, #16]
 80287c4:	42a2      	cmp	r2, r4
 80287c6:	d01f      	beq.n	8028808 <mg_close_conn+0x68>
  mg_call(c, MG_EV_CLOSE, NULL);
 80287c8:	2200      	movs	r2, #0
 80287ca:	2109      	movs	r1, #9
 80287cc:	4620      	mov	r0, r4
 80287ce:	f7fb fcac 	bl	802412a <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 80287d2:	4b15      	ldr	r3, [pc, #84]	@ (8028828 <mg_close_conn+0x88>)
 80287d4:	681b      	ldr	r3, [r3, #0]
 80287d6:	2b02      	cmp	r3, #2
 80287d8:	dc19      	bgt.n	802880e <mg_close_conn+0x6e>
  mg_iobuf_free(&c->recv);
 80287da:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80287de:	f7ff ff68 	bl	80286b2 <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 80287e2:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 80287e6:	f7ff ff64 	bl	80286b2 <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 80287ea:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80287ee:	f7ff ff60 	bl	80286b2 <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 80287f2:	21b0      	movs	r1, #176	@ 0xb0
 80287f4:	4620      	mov	r0, r4
 80287f6:	f7fe fc21 	bl	802703c <mg_bzero>
  free(c);
 80287fa:	4620      	mov	r0, r4
 80287fc:	f7f3 fc8e 	bl	801c11c <vPortFree>
}
 8028800:	bd10      	pop	{r4, pc}
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 8028802:	2200      	movs	r2, #0
 8028804:	609a      	str	r2, [r3, #8]
 8028806:	e7db      	b.n	80287c0 <mg_close_conn+0x20>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 8028808:	2200      	movs	r2, #0
 802880a:	611a      	str	r2, [r3, #16]
 802880c:	e7dc      	b.n	80287c8 <mg_close_conn+0x28>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 802880e:	4b07      	ldr	r3, [pc, #28]	@ (802882c <mg_close_conn+0x8c>)
 8028810:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 8028814:	4906      	ldr	r1, [pc, #24]	@ (8028830 <mg_close_conn+0x90>)
 8028816:	2003      	movs	r0, #3
 8028818:	f7ff f852 	bl	80278c0 <mg_log_prefix>
 802881c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 802881e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028820:	4804      	ldr	r0, [pc, #16]	@ (8028834 <mg_close_conn+0x94>)
 8028822:	f7fc fee5 	bl	80255f0 <mg_log>
 8028826:	e7d8      	b.n	80287da <mg_close_conn+0x3a>
 8028828:	2000013c 	.word	0x2000013c
 802882c:	0803d7c0 	.word	0x0803d7c0
 8028830:	0803bba0 	.word	0x0803bba0
 8028834:	0803bea4 	.word	0x0803bea4

08028838 <close_conn>:
static void close_conn(struct mg_connection *c) {
 8028838:	b510      	push	{r4, lr}
 802883a:	4604      	mov	r4, r0
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 802883c:	30d0      	adds	r0, #208	@ 0xd0
 802883e:	f7ff ff38 	bl	80286b2 <mg_iobuf_free>
  mg_close_conn(c);
 8028842:	4620      	mov	r0, r4
 8028844:	f7ff ffac 	bl	80287a0 <mg_close_conn>
}
 8028848:	bd10      	pop	{r4, pc}
	...

0802884c <mg_listen>:
                                mg_event_handler_t fn, void *fn_data) {
 802884c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028850:	4606      	mov	r6, r0
 8028852:	460d      	mov	r5, r1
 8028854:	4690      	mov	r8, r2
 8028856:	461f      	mov	r7, r3
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 8028858:	f7fc f9de 	bl	8024c18 <mg_alloc_conn>
 802885c:	4604      	mov	r4, r0
 802885e:	2800      	cmp	r0, #0
 8028860:	d03f      	beq.n	80288e2 <mg_listen+0x96>
  } else if (!mg_open_listener(c, url)) {
 8028862:	4629      	mov	r1, r5
 8028864:	f7fe fe21 	bl	80274aa <mg_open_listener>
 8028868:	2800      	cmp	r0, #0
 802886a:	d04d      	beq.n	8028908 <mg_listen+0xbc>
    c->is_listening = 1;
 802886c:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028870:	f043 0301 	orr.w	r3, r3, #1
 8028874:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 8028878:	2204      	movs	r2, #4
 802887a:	492f      	ldr	r1, [pc, #188]	@ (8028938 <mg_listen+0xec>)
 802887c:	4628      	mov	r0, r5
 802887e:	f003 fff4 	bl	802c86a <strncmp>
 8028882:	fab0 f080 	clz	r0, r0
 8028886:	0940      	lsrs	r0, r0, #5
 8028888:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802888c:	f360 0300 	bfi	r3, r0, #0, #1
 8028890:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8028894:	6833      	ldr	r3, [r6, #0]
 8028896:	6023      	str	r3, [r4, #0]
 8028898:	6034      	str	r4, [r6, #0]
    c->fn = fn;
 802889a:	f8c4 8078 	str.w	r8, [r4, #120]	@ 0x78
    c->fn_data = fn_data;
 802889e:	67e7      	str	r7, [r4, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 80288a0:	2200      	movs	r2, #0
 80288a2:	2101      	movs	r1, #1
 80288a4:	4620      	mov	r0, r4
 80288a6:	f7fb fc40 	bl	802412a <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 80288aa:	4628      	mov	r0, r5
 80288ac:	f7fe fb18 	bl	8026ee0 <mg_url_is_ssl>
 80288b0:	b128      	cbz	r0, 80288be <mg_listen+0x72>
 80288b2:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80288b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80288ba:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 80288be:	4b1f      	ldr	r3, [pc, #124]	@ (802893c <mg_listen+0xf0>)
 80288c0:	681b      	ldr	r3, [r3, #0]
 80288c2:	2b02      	cmp	r3, #2
 80288c4:	dd11      	ble.n	80288ea <mg_listen+0x9e>
 80288c6:	4b1e      	ldr	r3, [pc, #120]	@ (8028940 <mg_listen+0xf4>)
 80288c8:	f241 22e1 	movw	r2, #4833	@ 0x12e1
 80288cc:	491d      	ldr	r1, [pc, #116]	@ (8028944 <mg_listen+0xf8>)
 80288ce:	2003      	movs	r0, #3
 80288d0:	f7fe fff6 	bl	80278c0 <mg_log_prefix>
 80288d4:	462b      	mov	r3, r5
 80288d6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80288d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80288da:	481b      	ldr	r0, [pc, #108]	@ (8028948 <mg_listen+0xfc>)
 80288dc:	f7fc fe88 	bl	80255f0 <mg_log>
  return c;
 80288e0:	e003      	b.n	80288ea <mg_listen+0x9e>
    MG_ERROR(("OOM %s", url));
 80288e2:	4b16      	ldr	r3, [pc, #88]	@ (802893c <mg_listen+0xf0>)
 80288e4:	681b      	ldr	r3, [r3, #0]
 80288e6:	2b00      	cmp	r3, #0
 80288e8:	dc02      	bgt.n	80288f0 <mg_listen+0xa4>
}
 80288ea:	4620      	mov	r0, r4
 80288ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("OOM %s", url));
 80288f0:	4b13      	ldr	r3, [pc, #76]	@ (8028940 <mg_listen+0xf4>)
 80288f2:	f241 22d3 	movw	r2, #4819	@ 0x12d3
 80288f6:	4913      	ldr	r1, [pc, #76]	@ (8028944 <mg_listen+0xf8>)
 80288f8:	2001      	movs	r0, #1
 80288fa:	f7fe ffe1 	bl	80278c0 <mg_log_prefix>
 80288fe:	4629      	mov	r1, r5
 8028900:	4812      	ldr	r0, [pc, #72]	@ (802894c <mg_listen+0x100>)
 8028902:	f7fc fe75 	bl	80255f0 <mg_log>
 8028906:	e7f0      	b.n	80288ea <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8028908:	4b0c      	ldr	r3, [pc, #48]	@ (802893c <mg_listen+0xf0>)
 802890a:	681b      	ldr	r3, [r3, #0]
 802890c:	2b00      	cmp	r3, #0
 802890e:	dc04      	bgt.n	802891a <mg_listen+0xce>
    free(c);
 8028910:	4620      	mov	r0, r4
 8028912:	f7f3 fc03 	bl	801c11c <vPortFree>
    c = NULL;
 8028916:	2400      	movs	r4, #0
 8028918:	e7e7      	b.n	80288ea <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 802891a:	4b09      	ldr	r3, [pc, #36]	@ (8028940 <mg_listen+0xf4>)
 802891c:	f241 22d5 	movw	r2, #4821	@ 0x12d5
 8028920:	4908      	ldr	r1, [pc, #32]	@ (8028944 <mg_listen+0xf8>)
 8028922:	2001      	movs	r0, #1
 8028924:	f7fe ffcc 	bl	80278c0 <mg_log_prefix>
 8028928:	f005 fcae 	bl	802e288 <__errno>
 802892c:	6802      	ldr	r2, [r0, #0]
 802892e:	4629      	mov	r1, r5
 8028930:	4807      	ldr	r0, [pc, #28]	@ (8028950 <mg_listen+0x104>)
 8028932:	f7fc fe5d 	bl	80255f0 <mg_log>
 8028936:	e7eb      	b.n	8028910 <mg_listen+0xc4>
 8028938:	0803bed4 	.word	0x0803bed4
 802893c:	2000013c 	.word	0x2000013c
 8028940:	0803d7a8 	.word	0x0803d7a8
 8028944:	0803bba0 	.word	0x0803bba0
 8028948:	0803bbfc 	.word	0x0803bbfc
 802894c:	0803beb4 	.word	0x0803beb4
 8028950:	0803bebc 	.word	0x0803bebc

08028954 <mg_http_listen>:
                                     mg_event_handler_t fn, void *fn_data) {
 8028954:	b508      	push	{r3, lr}
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8028956:	f7ff ff79 	bl	802884c <mg_listen>
  if (c != NULL) c->pfn = http_cb;
 802895a:	b110      	cbz	r0, 8028962 <mg_http_listen+0xe>
 802895c:	4b01      	ldr	r3, [pc, #4]	@ (8028964 <mg_http_listen+0x10>)
 802895e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 8028962:	bd08      	pop	{r3, pc}
 8028964:	08027b45 	.word	0x08027b45

08028968 <trim_len>:
static size_t trim_len(struct mg_connection *c, size_t len) {
 8028968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802896c:	4605      	mov	r5, r0
 802896e:	460c      	mov	r4, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8028970:	6843      	ldr	r3, [r0, #4]
 8028972:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8028974:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8028978:	f013 0301 	ands.w	r3, r3, #1
 802897c:	d02c      	beq.n	80289d8 <trim_len+0x70>
 802897e:	2608      	movs	r6, #8
  size_t max_headers_len =
 8028980:	f106 0826 	add.w	r8, r6, #38	@ 0x26
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 8028984:	bb53      	cbnz	r3, 80289dc <trim_len+0x74>
 8028986:	3618      	adds	r6, #24
  if (len + max_headers_len > ifp->tx.len) {
 8028988:	eb08 0304 	add.w	r3, r8, r4
 802898c:	69ba      	ldr	r2, [r7, #24]
 802898e:	4293      	cmp	r3, r2
 8028990:	d901      	bls.n	8028996 <trim_len+0x2e>
    len = ifp->tx.len - max_headers_len;
 8028992:	eba2 0408 	sub.w	r4, r2, r8
  if (ifp->mtu < min_mtu) {
 8028996:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 802899a:	42b3      	cmp	r3, r6
 802899c:	d205      	bcs.n	80289aa <trim_len+0x42>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 802899e:	4b1c      	ldr	r3, [pc, #112]	@ (8028a10 <trim_len+0xa8>)
 80289a0:	681b      	ldr	r3, [r3, #0]
 80289a2:	2b00      	cmp	r3, #0
 80289a4:	dc1c      	bgt.n	80289e0 <trim_len+0x78>
    ifp->mtu = (uint16_t) min_mtu;
 80289a6:	f8a7 6044 	strh.w	r6, [r7, #68]	@ 0x44
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 80289aa:	eb04 0308 	add.w	r3, r4, r8
 80289ae:	3b0e      	subs	r3, #14
 80289b0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80289b4:	4293      	cmp	r3, r2
 80289b6:	d90c      	bls.n	80289d2 <trim_len+0x6a>
    len = ifp->mtu - max_headers_len + eth_h_len;
 80289b8:	eba2 0208 	sub.w	r2, r2, r8
 80289bc:	f102 040e 	add.w	r4, r2, #14
    if (c->is_udp) {
 80289c0:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80289c4:	f013 0f01 	tst.w	r3, #1
 80289c8:	d003      	beq.n	80289d2 <trim_len+0x6a>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 80289ca:	4b11      	ldr	r3, [pc, #68]	@ (8028a10 <trim_len+0xa8>)
 80289cc:	681b      	ldr	r3, [r3, #0]
 80289ce:	2b00      	cmp	r3, #0
 80289d0:	dc12      	bgt.n	80289f8 <trim_len+0x90>
}
 80289d2:	4620      	mov	r0, r4
 80289d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 80289d8:	263c      	movs	r6, #60	@ 0x3c
 80289da:	e7d1      	b.n	8028980 <trim_len+0x18>
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 80289dc:	2644      	movs	r6, #68	@ 0x44
 80289de:	e7d3      	b.n	8028988 <trim_len+0x20>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 80289e0:	4b0c      	ldr	r3, [pc, #48]	@ (8028a14 <trim_len+0xac>)
 80289e2:	f241 528c 	movw	r2, #5516	@ 0x158c
 80289e6:	490c      	ldr	r1, [pc, #48]	@ (8028a18 <trim_len+0xb0>)
 80289e8:	2001      	movs	r0, #1
 80289ea:	f7fe ff69 	bl	80278c0 <mg_log_prefix>
 80289ee:	4631      	mov	r1, r6
 80289f0:	480a      	ldr	r0, [pc, #40]	@ (8028a1c <trim_len+0xb4>)
 80289f2:	f7fc fdfd 	bl	80255f0 <mg_log>
 80289f6:	e7d6      	b.n	80289a6 <trim_len+0x3e>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 80289f8:	4b06      	ldr	r3, [pc, #24]	@ (8028a14 <trim_len+0xac>)
 80289fa:	f241 5293 	movw	r2, #5523	@ 0x1593
 80289fe:	4906      	ldr	r1, [pc, #24]	@ (8028a18 <trim_len+0xb0>)
 8028a00:	2001      	movs	r0, #1
 8028a02:	f7fe ff5d 	bl	80278c0 <mg_log_prefix>
 8028a06:	4806      	ldr	r0, [pc, #24]	@ (8028a20 <trim_len+0xb8>)
 8028a08:	f7fc fdf2 	bl	80255f0 <mg_log>
 8028a0c:	e7e1      	b.n	80289d2 <trim_len+0x6a>
 8028a0e:	bf00      	nop
 8028a10:	2000013c 	.word	0x2000013c
 8028a14:	0803d79c 	.word	0x0803d79c
 8028a18:	0803bba0 	.word	0x0803bba0
 8028a1c:	0803bedc 	.word	0x0803bedc
 8028a20:	0803bf08 	.word	0x0803bf08

08028a24 <mg_send>:
bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8028a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028a26:	b085      	sub	sp, #20
 8028a28:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8028a2a:	6843      	ldr	r3, [r0, #4]
 8028a2c:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8028a2e:	69c7      	ldr	r7, [r0, #28]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 8028a30:	68ab      	ldr	r3, [r5, #8]
 8028a32:	b123      	cbz	r3, 8028a3e <mg_send+0x1a>
 8028a34:	460e      	mov	r6, r1
 8028a36:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8028a3a:	2b03      	cmp	r3, #3
 8028a3c:	d006      	beq.n	8028a4c <mg_send+0x28>
    mg_error(c, "net down");
 8028a3e:	4913      	ldr	r1, [pc, #76]	@ (8028a8c <mg_send+0x68>)
 8028a40:	4620      	mov	r0, r4
 8028a42:	f7ff f825 	bl	8027a90 <mg_error>
  bool res = false;
 8028a46:	2000      	movs	r0, #0
}
 8028a48:	b005      	add	sp, #20
 8028a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (c->is_udp) {
 8028a4c:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8028a50:	f013 0f01 	tst.w	r3, #1
 8028a54:	d010      	beq.n	8028a78 <mg_send+0x54>
    len = trim_len(c, len);  // Trimming length if necessary
 8028a56:	4611      	mov	r1, r2
 8028a58:	f7ff ff86 	bl	8028968 <trim_len>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8028a5c:	68aa      	ldr	r2, [r5, #8]
 8028a5e:	9003      	str	r0, [sp, #12]
 8028a60:	9602      	str	r6, [sp, #8]
 8028a62:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8028a64:	9301      	str	r3, [sp, #4]
 8028a66:	9700      	str	r7, [sp, #0]
 8028a68:	8b23      	ldrh	r3, [r4, #24]
 8028a6a:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8028a6e:	4628      	mov	r0, r5
 8028a70:	f7fe fc99 	bl	80273a6 <tx_udp>
    res = true;
 8028a74:	2001      	movs	r0, #1
 8028a76:	e7e7      	b.n	8028a48 <mg_send+0x24>
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 8028a78:	4613      	mov	r3, r2
 8028a7a:	460a      	mov	r2, r1
 8028a7c:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8028a7e:	3048      	adds	r0, #72	@ 0x48
 8028a80:	f7ff fde5 	bl	802864e <mg_iobuf_add>
 8028a84:	3800      	subs	r0, #0
 8028a86:	bf18      	it	ne
 8028a88:	2001      	movne	r0, #1
 8028a8a:	e7dd      	b.n	8028a48 <mg_send+0x24>
 8028a8c:	0803bf34 	.word	0x0803bf34

08028a90 <mg_dns_send>:
                        uint16_t txnid, bool ipv6) {
 8028a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028a92:	b0c5      	sub	sp, #276	@ 0x114
 8028a94:	4606      	mov	r6, r0
 8028a96:	460d      	mov	r5, r1
 8028a98:	4614      	mov	r4, r2
 8028a9a:	461f      	mov	r7, r3
  memset(&pkt, 0, sizeof(pkt));
 8028a9c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8028aa0:	2100      	movs	r1, #0
 8028aa2:	a801      	add	r0, sp, #4
 8028aa4:	f003 feac 	bl	802c800 <memset>
  pkt.header.txnid = mg_htons(txnid);
 8028aa8:	4620      	mov	r0, r4
 8028aaa:	f7fe fbc7 	bl	802723c <mg_ntohs>
 8028aae:	f8ad 0004 	strh.w	r0, [sp, #4]
  pkt.header.flags = mg_htons(0x100);
 8028ab2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8028ab6:	f7fe fbc1 	bl	802723c <mg_ntohs>
 8028aba:	f8ad 0006 	strh.w	r0, [sp, #6]
  pkt.header.num_questions = mg_htons(1);
 8028abe:	2001      	movs	r0, #1
 8028ac0:	f7fe fbbc 	bl	802723c <mg_ntohs>
 8028ac4:	f8ad 0008 	strh.w	r0, [sp, #8]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8028ac8:	f04f 0c00 	mov.w	ip, #0
 8028acc:	4664      	mov	r4, ip
 8028ace:	e015      	b.n	8028afc <mg_dns_send+0x6c>
      pkt.data[n] = (uint8_t) (i - n);
 8028ad0:	eba4 020c 	sub.w	r2, r4, ip
 8028ad4:	ab01      	add	r3, sp, #4
 8028ad6:	4463      	add	r3, ip
 8028ad8:	731a      	strb	r2, [r3, #12]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8028ada:	f10c 0309 	add.w	r3, ip, #9
 8028ade:	aa01      	add	r2, sp, #4
 8028ae0:	18d0      	adds	r0, r2, r3
 8028ae2:	6829      	ldr	r1, [r5, #0]
 8028ae4:	eba4 020c 	sub.w	r2, r4, ip
 8028ae8:	4461      	add	r1, ip
 8028aea:	3004      	adds	r0, #4
 8028aec:	f005 fc04 	bl	802e2f8 <memcpy>
      n = i + 1;
 8028af0:	f104 0c01 	add.w	ip, r4, #1
    if (i >= name->len) break;
 8028af4:	686a      	ldr	r2, [r5, #4]
 8028af6:	42a2      	cmp	r2, r4
 8028af8:	d90a      	bls.n	8028b10 <mg_dns_send+0x80>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8028afa:	3401      	adds	r4, #1
 8028afc:	2cfa      	cmp	r4, #250	@ 0xfa
 8028afe:	d807      	bhi.n	8028b10 <mg_dns_send+0x80>
    if (name->buf[i] == '.' || i >= name->len) {
 8028b00:	682b      	ldr	r3, [r5, #0]
 8028b02:	5d1a      	ldrb	r2, [r3, r4]
 8028b04:	2a2e      	cmp	r2, #46	@ 0x2e
 8028b06:	d0e3      	beq.n	8028ad0 <mg_dns_send+0x40>
 8028b08:	686b      	ldr	r3, [r5, #4]
 8028b0a:	42a3      	cmp	r3, r4
 8028b0c:	d8f2      	bhi.n	8028af4 <mg_dns_send+0x64>
 8028b0e:	e7df      	b.n	8028ad0 <mg_dns_send+0x40>
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 8028b10:	f10c 0308 	add.w	r3, ip, #8
 8028b14:	aa01      	add	r2, sp, #4
 8028b16:	4413      	add	r3, r2
 8028b18:	4a0a      	ldr	r2, [pc, #40]	@ (8028b44 <mg_dns_send+0xb4>)
 8028b1a:	f8d2 0220 	ldr.w	r0, [r2, #544]	@ 0x220
 8028b1e:	6058      	str	r0, [r3, #4]
 8028b20:	f892 2224 	ldrb.w	r2, [r2, #548]	@ 0x224
 8028b24:	721a      	strb	r2, [r3, #8]
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8028b26:	b12f      	cbz	r7, 8028b34 <mg_dns_send+0xa4>
 8028b28:	f10c 0302 	add.w	r3, ip, #2
 8028b2c:	aa01      	add	r2, sp, #4
 8028b2e:	4413      	add	r3, r2
 8028b30:	221c      	movs	r2, #28
 8028b32:	731a      	strb	r2, [r3, #12]
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8028b34:	f10c 0211 	add.w	r2, ip, #17
 8028b38:	a901      	add	r1, sp, #4
 8028b3a:	4630      	mov	r0, r6
 8028b3c:	f7ff ff72 	bl	8028a24 <mg_send>
}
 8028b40:	b045      	add	sp, #276	@ 0x114
 8028b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028b44:	080378c4 	.word	0x080378c4

08028b48 <mg_mqtt_send_header>:
                         uint32_t len) {
 8028b48:	b500      	push	{lr}
 8028b4a:	b083      	sub	sp, #12
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 8028b4c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8028b50:	f88d 2000 	strb.w	r2, [sp]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 8028b54:	f10d 0201 	add.w	r2, sp, #1
    *vlen = len % 0x80;
 8028b58:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8028b5c:	7011      	strb	r1, [r2, #0]
    if (len > 0) *vlen |= 0x80;
 8028b5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8028b60:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8028b64:	d90e      	bls.n	8028b84 <mg_mqtt_send_header+0x3c>
 8028b66:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 8028b6a:	f802 1b01 	strb.w	r1, [r2], #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 8028b6e:	f10d 0105 	add.w	r1, sp, #5
 8028b72:	428a      	cmp	r2, r1
 8028b74:	d3f0      	bcc.n	8028b58 <mg_mqtt_send_header+0x10>
  mg_send(c, buf, (size_t) (vlen - buf));
 8028b76:	4669      	mov	r1, sp
 8028b78:	1a52      	subs	r2, r2, r1
 8028b7a:	f7ff ff53 	bl	8028a24 <mg_send>
}
 8028b7e:	b003      	add	sp, #12
 8028b80:	f85d fb04 	ldr.w	pc, [sp], #4
    vlen++;
 8028b84:	3201      	adds	r2, #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 8028b86:	e7f6      	b.n	8028b76 <mg_mqtt_send_header+0x2e>

08028b88 <mg_mqtt_ping>:
void mg_mqtt_ping(struct mg_connection *nc) {
 8028b88:	b508      	push	{r3, lr}
  mg_mqtt_send_header(nc, MQTT_CMD_PINGREQ, 0, 0);
 8028b8a:	2300      	movs	r3, #0
 8028b8c:	461a      	mov	r2, r3
 8028b8e:	210c      	movs	r1, #12
 8028b90:	f7ff ffda 	bl	8028b48 <mg_mqtt_send_header>
}
 8028b94:	bd08      	pop	{r3, pc}

08028b96 <mg_send_u32>:
static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 8028b96:	b500      	push	{lr}
 8028b98:	b083      	sub	sp, #12
 8028b9a:	9101      	str	r1, [sp, #4]
  mg_send(c, &value, sizeof(value));
 8028b9c:	2204      	movs	r2, #4
 8028b9e:	eb0d 0102 	add.w	r1, sp, r2
 8028ba2:	f7ff ff3f 	bl	8028a24 <mg_send>
}
 8028ba6:	b003      	add	sp, #12
 8028ba8:	f85d fb04 	ldr.w	pc, [sp], #4

08028bac <mg_send_u16>:
static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 8028bac:	b500      	push	{lr}
 8028bae:	b083      	sub	sp, #12
 8028bb0:	f8ad 1006 	strh.w	r1, [sp, #6]
  mg_send(c, &value, sizeof(value));
 8028bb4:	2202      	movs	r2, #2
 8028bb6:	f10d 0106 	add.w	r1, sp, #6
 8028bba:	f7ff ff33 	bl	8028a24 <mg_send>
}
 8028bbe:	b003      	add	sp, #12
 8028bc0:	f85d fb04 	ldr.w	pc, [sp], #4

08028bc4 <mg_send_mqtt_properties>:
                                    struct mg_mqtt_prop *props, size_t nprops) {
 8028bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028bc8:	b083      	sub	sp, #12
 8028bca:	4606      	mov	r6, r0
 8028bcc:	460f      	mov	r7, r1
 8028bce:	4691      	mov	r9, r2
  size_t total_size = get_properties_length(props, nprops);
 8028bd0:	4611      	mov	r1, r2
 8028bd2:	4638      	mov	r0, r7
 8028bd4:	f7f9 fda6 	bl	8022724 <get_properties_length>
 8028bd8:	4601      	mov	r1, r0
  uint8_t buf_v[4] = {0, 0, 0, 0};
 8028bda:	2500      	movs	r5, #0
 8028bdc:	9501      	str	r5, [sp, #4]
  uint8_t buf[4] = {0, 0, 0, 0};
 8028bde:	9500      	str	r5, [sp, #0]
  size_t i, len = encode_varint(buf, total_size);
 8028be0:	4668      	mov	r0, sp
 8028be2:	f7f9 fd50 	bl	8022686 <encode_varint>
 8028be6:	4602      	mov	r2, r0
  mg_send(c, buf, (size_t) len);
 8028be8:	4669      	mov	r1, sp
 8028bea:	4630      	mov	r0, r6
 8028bec:	f7ff ff1a 	bl	8028a24 <mg_send>
  for (i = 0; i < nprops; i++) {
 8028bf0:	e018      	b.n	8028c24 <mg_send_mqtt_properties+0x60>
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 8028bf2:	89a0      	ldrh	r0, [r4, #12]
 8028bf4:	f7fe fb22 	bl	802723c <mg_ntohs>
 8028bf8:	4601      	mov	r1, r0
 8028bfa:	4630      	mov	r0, r6
 8028bfc:	f7ff ffd6 	bl	8028bac <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 8028c00:	68e2      	ldr	r2, [r4, #12]
 8028c02:	68a1      	ldr	r1, [r4, #8]
 8028c04:	4630      	mov	r0, r6
 8028c06:	f7ff ff0d 	bl	8028a24 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8028c0a:	8aa0      	ldrh	r0, [r4, #20]
 8028c0c:	f7fe fb16 	bl	802723c <mg_ntohs>
 8028c10:	4601      	mov	r1, r0
 8028c12:	4630      	mov	r0, r6
 8028c14:	f7ff ffca 	bl	8028bac <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8028c18:	6962      	ldr	r2, [r4, #20]
 8028c1a:	6921      	ldr	r1, [r4, #16]
 8028c1c:	4630      	mov	r0, r6
 8028c1e:	f7ff ff01 	bl	8028a24 <mg_send>
  for (i = 0; i < nprops; i++) {
 8028c22:	3501      	adds	r5, #1
 8028c24:	454d      	cmp	r5, r9
 8028c26:	d25b      	bcs.n	8028ce0 <mg_send_mqtt_properties+0x11c>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 8028c28:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8028c2c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8028c30:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8028c34:	2201      	movs	r2, #1
 8028c36:	4621      	mov	r1, r4
 8028c38:	4630      	mov	r0, r6
 8028c3a:	f7ff fef3 	bl	8028a24 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 8028c3e:	f817 0008 	ldrb.w	r0, [r7, r8]
 8028c42:	f7f9 fd5b 	bl	80226fc <mqtt_prop_type_by_id>
 8028c46:	2806      	cmp	r0, #6
 8028c48:	d8eb      	bhi.n	8028c22 <mg_send_mqtt_properties+0x5e>
 8028c4a:	a301      	add	r3, pc, #4	@ (adr r3, 8028c50 <mg_send_mqtt_properties+0x8c>)
 8028c4c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8028c50:	08028c6d 	.word	0x08028c6d
 8028c54:	08028c99 	.word	0x08028c99
 8028c58:	08028bf3 	.word	0x08028bf3
 8028c5c:	08028cb3 	.word	0x08028cb3
 8028c60:	08028ccd 	.word	0x08028ccd
 8028c64:	08028c89 	.word	0x08028c89
 8028c68:	08028c79 	.word	0x08028c79
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 8028c6c:	2201      	movs	r2, #1
 8028c6e:	1d21      	adds	r1, r4, #4
 8028c70:	4630      	mov	r0, r6
 8028c72:	f7ff fed7 	bl	8028a24 <mg_send>
        break;
 8028c76:	e7d4      	b.n	8028c22 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 8028c78:	88a0      	ldrh	r0, [r4, #4]
 8028c7a:	f7fe fadf 	bl	802723c <mg_ntohs>
 8028c7e:	4601      	mov	r1, r0
 8028c80:	4630      	mov	r0, r6
 8028c82:	f7ff ff93 	bl	8028bac <mg_send_u16>
        break;
 8028c86:	e7cc      	b.n	8028c22 <mg_send_mqtt_properties+0x5e>
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 8028c88:	6860      	ldr	r0, [r4, #4]
 8028c8a:	f7fe fa3f 	bl	802710c <mg_ntohl>
 8028c8e:	4601      	mov	r1, r0
 8028c90:	4630      	mov	r0, r6
 8028c92:	f7ff ff80 	bl	8028b96 <mg_send_u32>
        break;
 8028c96:	e7c4      	b.n	8028c22 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8028c98:	8aa0      	ldrh	r0, [r4, #20]
 8028c9a:	f7fe facf 	bl	802723c <mg_ntohs>
 8028c9e:	4601      	mov	r1, r0
 8028ca0:	4630      	mov	r0, r6
 8028ca2:	f7ff ff83 	bl	8028bac <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8028ca6:	6962      	ldr	r2, [r4, #20]
 8028ca8:	6921      	ldr	r1, [r4, #16]
 8028caa:	4630      	mov	r0, r6
 8028cac:	f7ff feba 	bl	8028a24 <mg_send>
        break;
 8028cb0:	e7b7      	b.n	8028c22 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8028cb2:	8aa0      	ldrh	r0, [r4, #20]
 8028cb4:	f7fe fac2 	bl	802723c <mg_ntohs>
 8028cb8:	4601      	mov	r1, r0
 8028cba:	4630      	mov	r0, r6
 8028cbc:	f7ff ff76 	bl	8028bac <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8028cc0:	6962      	ldr	r2, [r4, #20]
 8028cc2:	6921      	ldr	r1, [r4, #16]
 8028cc4:	4630      	mov	r0, r6
 8028cc6:	f7ff fead 	bl	8028a24 <mg_send>
        break;
 8028cca:	e7aa      	b.n	8028c22 <mg_send_mqtt_properties+0x5e>
        len = encode_varint(buf_v, props[i].iv);
 8028ccc:	6861      	ldr	r1, [r4, #4]
 8028cce:	a801      	add	r0, sp, #4
 8028cd0:	f7f9 fcd9 	bl	8022686 <encode_varint>
 8028cd4:	4602      	mov	r2, r0
        mg_send(c, buf_v, (size_t) len);
 8028cd6:	a901      	add	r1, sp, #4
 8028cd8:	4630      	mov	r0, r6
 8028cda:	f7ff fea3 	bl	8028a24 <mg_send>
        break;
 8028cde:	e7a0      	b.n	8028c22 <mg_send_mqtt_properties+0x5e>
}
 8028ce0:	b003      	add	sp, #12
 8028ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028ce6:	bf00      	nop

08028ce8 <mg_mqtt_login>:
void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8028ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028cea:	b08b      	sub	sp, #44	@ 0x2c
 8028cec:	4605      	mov	r5, r0
 8028cee:	460c      	mov	r4, r1
  struct mg_str cid = opts->client_id;
 8028cf0:	ab02      	add	r3, sp, #8
 8028cf2:	f101 0210 	add.w	r2, r1, #16
 8028cf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8028cfa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 8028cfe:	2300      	movs	r3, #0
 8028d00:	f88d 3000 	strb.w	r3, [sp]
 8028d04:	2204      	movs	r2, #4
 8028d06:	f88d 2001 	strb.w	r2, [sp, #1]
 8028d0a:	224d      	movs	r2, #77	@ 0x4d
 8028d0c:	f88d 2002 	strb.w	r2, [sp, #2]
 8028d10:	2251      	movs	r2, #81	@ 0x51
 8028d12:	f88d 2003 	strb.w	r2, [sp, #3]
 8028d16:	2254      	movs	r2, #84	@ 0x54
 8028d18:	f88d 2004 	strb.w	r2, [sp, #4]
 8028d1c:	f88d 2005 	strb.w	r2, [sp, #5]
 8028d20:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 8028d24:	f88d 2006 	strb.w	r2, [sp, #6]
 8028d28:	f88d 3007 	strb.w	r3, [sp, #7]
  if (cid.len == 0) {
 8028d2c:	2900      	cmp	r1, #0
 8028d2e:	f000 809f 	beq.w	8028e70 <mg_mqtt_login+0x188>
  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 8028d32:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8028d36:	b913      	cbnz	r3, 8028d3e <mg_mqtt_login+0x56>
 8028d38:	2304      	movs	r3, #4
 8028d3a:	f88d 3006 	strb.w	r3, [sp, #6]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 8028d3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8028d42:	2b05      	cmp	r3, #5
 8028d44:	bf14      	ite	ne
 8028d46:	2300      	movne	r3, #0
 8028d48:	2301      	moveq	r3, #1
 8028d4a:	f895 20ad 	ldrb.w	r2, [r5, #173]	@ 0xad
 8028d4e:	f363 0282 	bfi	r2, r3, #2, #1
 8028d52:	f885 20ad 	strb.w	r2, [r5, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 8028d56:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8028d5a:	00d2      	lsls	r2, r2, #3
 8028d5c:	f002 0218 	and.w	r2, r2, #24
 8028d60:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->user.len > 0) {
 8028d64:	6863      	ldr	r3, [r4, #4]
 8028d66:	2b00      	cmp	r3, #0
 8028d68:	f000 808e 	beq.w	8028e88 <mg_mqtt_login+0x1a0>
    total_len += 2 + (uint32_t) opts->user.len;
 8028d6c:	330e      	adds	r3, #14
    hdr[7] |= MQTT_HAS_USER_NAME;
 8028d6e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8028d72:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->pass.len > 0) {
 8028d76:	68e2      	ldr	r2, [r4, #12]
 8028d78:	b13a      	cbz	r2, 8028d8a <mg_mqtt_login+0xa2>
    total_len += 2 + (uint32_t) opts->pass.len;
 8028d7a:	441a      	add	r2, r3
 8028d7c:	1c93      	adds	r3, r2, #2
    hdr[7] |= MQTT_HAS_PASSWORD;
 8028d7e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8028d82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8028d86:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 8028d8a:	69e2      	ldr	r2, [r4, #28]
 8028d8c:	b14a      	cbz	r2, 8028da2 <mg_mqtt_login+0xba>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 8028d8e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8028d90:	440a      	add	r2, r1
 8028d92:	441a      	add	r2, r3
 8028d94:	1d13      	adds	r3, r2, #4
    hdr[7] |= MQTT_HAS_WILL;
 8028d96:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8028d9a:	f042 0204 	orr.w	r2, r2, #4
 8028d9e:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 8028da2:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
 8028da6:	b90a      	cbnz	r2, 8028dac <mg_mqtt_login+0xc4>
 8028da8:	9a03      	ldr	r2, [sp, #12]
 8028daa:	b92a      	cbnz	r2, 8028db8 <mg_mqtt_login+0xd0>
 8028dac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8028db0:	f042 0202 	orr.w	r2, r2, #2
 8028db4:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 8028db8:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 8028dbc:	b12a      	cbz	r2, 8028dca <mg_mqtt_login+0xe2>
 8028dbe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8028dc2:	f042 0220 	orr.w	r2, r2, #32
 8028dc6:	f88d 2007 	strb.w	r2, [sp, #7]
  total_len += (uint32_t) cid.len;
 8028dca:	9f03      	ldr	r7, [sp, #12]
 8028dcc:	18fe      	adds	r6, r7, r3
  if (c->is_mqtt5) {
 8028dce:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8028dd2:	f013 0f04 	tst.w	r3, #4
 8028dd6:	d159      	bne.n	8028e8c <mg_mqtt_login+0x1a4>
  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 8028dd8:	4633      	mov	r3, r6
 8028dda:	2200      	movs	r2, #0
 8028ddc:	2101      	movs	r1, #1
 8028dde:	4628      	mov	r0, r5
 8028de0:	f7ff feb2 	bl	8028b48 <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 8028de4:	2208      	movs	r2, #8
 8028de6:	4669      	mov	r1, sp
 8028de8:	4628      	mov	r0, r5
 8028dea:	f7ff fe1b 	bl	8028a24 <mg_send>
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 8028dee:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8028df0:	f7fe fa24 	bl	802723c <mg_ntohs>
 8028df4:	4601      	mov	r1, r0
 8028df6:	4628      	mov	r0, r5
 8028df8:	f7ff fed8 	bl	8028bac <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8028dfc:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8028e00:	f013 0f04 	tst.w	r3, #4
 8028e04:	d152      	bne.n	8028eac <mg_mqtt_login+0x1c4>
  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 8028e06:	b2b8      	uxth	r0, r7
 8028e08:	f7fe fa18 	bl	802723c <mg_ntohs>
 8028e0c:	4601      	mov	r1, r0
 8028e0e:	4628      	mov	r0, r5
 8028e10:	f7ff fecc 	bl	8028bac <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 8028e14:	463a      	mov	r2, r7
 8028e16:	9902      	ldr	r1, [sp, #8]
 8028e18:	4628      	mov	r0, r5
 8028e1a:	f7ff fe03 	bl	8028a24 <mg_send>
  if (hdr[7] & MQTT_HAS_WILL) {
 8028e1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8028e22:	f013 0f04 	tst.w	r3, #4
 8028e26:	d01c      	beq.n	8028e62 <mg_mqtt_login+0x17a>
    if (c->is_mqtt5)
 8028e28:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8028e2c:	f013 0f04 	tst.w	r3, #4
 8028e30:	d142      	bne.n	8028eb8 <mg_mqtt_login+0x1d0>
    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8028e32:	8ba0      	ldrh	r0, [r4, #28]
 8028e34:	f7fe fa02 	bl	802723c <mg_ntohs>
 8028e38:	4601      	mov	r1, r0
 8028e3a:	4628      	mov	r0, r5
 8028e3c:	f7ff feb6 	bl	8028bac <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 8028e40:	69e2      	ldr	r2, [r4, #28]
 8028e42:	69a1      	ldr	r1, [r4, #24]
 8028e44:	4628      	mov	r0, r5
 8028e46:	f7ff fded 	bl	8028a24 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 8028e4a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8028e4c:	f7fe f9f6 	bl	802723c <mg_ntohs>
 8028e50:	4601      	mov	r1, r0
 8028e52:	4628      	mov	r0, r5
 8028e54:	f7ff feaa 	bl	8028bac <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 8028e58:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8028e5a:	6a21      	ldr	r1, [r4, #32]
 8028e5c:	4628      	mov	r0, r5
 8028e5e:	f7ff fde1 	bl	8028a24 <mg_send>
  if (opts->user.len > 0) {
 8028e62:	6860      	ldr	r0, [r4, #4]
 8028e64:	bb70      	cbnz	r0, 8028ec4 <mg_mqtt_login+0x1dc>
  if (opts->pass.len > 0) {
 8028e66:	68e0      	ldr	r0, [r4, #12]
 8028e68:	2800      	cmp	r0, #0
 8028e6a:	d138      	bne.n	8028ede <mg_mqtt_login+0x1f6>
}
 8028e6c:	b00b      	add	sp, #44	@ 0x2c
 8028e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mg_random_str(client_id, sizeof(client_id) - 1);
 8028e70:	2114      	movs	r1, #20
 8028e72:	a804      	add	r0, sp, #16
 8028e74:	f7fe f91e 	bl	80270b4 <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 8028e78:	2300      	movs	r3, #0
 8028e7a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    cid = mg_str(client_id);
 8028e7e:	a904      	add	r1, sp, #16
 8028e80:	a802      	add	r0, sp, #8
 8028e82:	f7fc fd93 	bl	80259ac <mg_str_s>
 8028e86:	e754      	b.n	8028d32 <mg_mqtt_login+0x4a>
  size_t total_len = 7 + 1 + 2 + 2;
 8028e88:	230c      	movs	r3, #12
 8028e8a:	e774      	b.n	8028d76 <mg_mqtt_login+0x8e>
    total_len += get_props_size(opts->props, opts->num_props);
 8028e8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028e8e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8028e90:	f7f9 fc8c 	bl	80227ac <get_props_size>
 8028e94:	4406      	add	r6, r0
    if (hdr[7] & MQTT_HAS_WILL)
 8028e96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8028e9a:	f013 0f04 	tst.w	r3, #4
 8028e9e:	d09b      	beq.n	8028dd8 <mg_mqtt_login+0xf0>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 8028ea0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8028ea2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8028ea4:	f7f9 fc82 	bl	80227ac <get_props_size>
 8028ea8:	4406      	add	r6, r0
 8028eaa:	e795      	b.n	8028dd8 <mg_mqtt_login+0xf0>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8028eac:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8028eae:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8028eb0:	4628      	mov	r0, r5
 8028eb2:	f7ff fe87 	bl	8028bc4 <mg_send_mqtt_properties>
 8028eb6:	e7a6      	b.n	8028e06 <mg_mqtt_login+0x11e>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 8028eb8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8028eba:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8028ebc:	4628      	mov	r0, r5
 8028ebe:	f7ff fe81 	bl	8028bc4 <mg_send_mqtt_properties>
 8028ec2:	e7b6      	b.n	8028e32 <mg_mqtt_login+0x14a>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 8028ec4:	b280      	uxth	r0, r0
 8028ec6:	f7fe f9b9 	bl	802723c <mg_ntohs>
 8028eca:	4601      	mov	r1, r0
 8028ecc:	4628      	mov	r0, r5
 8028ece:	f7ff fe6d 	bl	8028bac <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 8028ed2:	6862      	ldr	r2, [r4, #4]
 8028ed4:	6821      	ldr	r1, [r4, #0]
 8028ed6:	4628      	mov	r0, r5
 8028ed8:	f7ff fda4 	bl	8028a24 <mg_send>
 8028edc:	e7c3      	b.n	8028e66 <mg_mqtt_login+0x17e>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 8028ede:	b280      	uxth	r0, r0
 8028ee0:	f7fe f9ac 	bl	802723c <mg_ntohs>
 8028ee4:	4601      	mov	r1, r0
 8028ee6:	4628      	mov	r0, r5
 8028ee8:	f7ff fe60 	bl	8028bac <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 8028eec:	68e2      	ldr	r2, [r4, #12]
 8028eee:	68a1      	ldr	r1, [r4, #8]
 8028ef0:	4628      	mov	r0, r5
 8028ef2:	f7ff fd97 	bl	8028a24 <mg_send>
}
 8028ef6:	e7b9      	b.n	8028e6c <mg_mqtt_login+0x184>

08028ef8 <mg_mqtt_sub>:
void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8028ef8:	b530      	push	{r4, r5, lr}
 8028efa:	b083      	sub	sp, #12
 8028efc:	4604      	mov	r4, r0
 8028efe:	460d      	mov	r5, r1
  uint8_t qos_ = opts->qos & 3;
 8028f00:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8028f04:	f003 0303 	and.w	r3, r3, #3
 8028f08:	f88d 3007 	strb.w	r3, [sp, #7]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 8028f0c:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8028f10:	f013 0f04 	tst.w	r3, #4
 8028f14:	d133      	bne.n	8028f7e <mg_mqtt_sub+0x86>
 8028f16:	2000      	movs	r0, #0
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 8028f18:	69eb      	ldr	r3, [r5, #28]
 8028f1a:	4403      	add	r3, r0
  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 8028f1c:	3305      	adds	r3, #5
 8028f1e:	2202      	movs	r2, #2
 8028f20:	2108      	movs	r1, #8
 8028f22:	4620      	mov	r0, r4
 8028f24:	f7ff fe10 	bl	8028b48 <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8028f28:	6862      	ldr	r2, [r4, #4]
 8028f2a:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8028f2c:	3301      	adds	r3, #1
 8028f2e:	b29b      	uxth	r3, r3
 8028f30:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8028f32:	b91b      	cbnz	r3, 8028f3c <mg_mqtt_sub+0x44>
 8028f34:	6862      	ldr	r2, [r4, #4]
 8028f36:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8028f38:	3301      	adds	r3, #1
 8028f3a:	8593      	strh	r3, [r2, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 8028f3c:	6863      	ldr	r3, [r4, #4]
 8028f3e:	8d98      	ldrh	r0, [r3, #44]	@ 0x2c
 8028f40:	f7fe f97c 	bl	802723c <mg_ntohs>
 8028f44:	4601      	mov	r1, r0
 8028f46:	4620      	mov	r0, r4
 8028f48:	f7ff fe30 	bl	8028bac <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8028f4c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028f50:	f013 0f04 	tst.w	r3, #4
 8028f54:	d118      	bne.n	8028f88 <mg_mqtt_sub+0x90>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8028f56:	8ba8      	ldrh	r0, [r5, #28]
 8028f58:	f7fe f970 	bl	802723c <mg_ntohs>
 8028f5c:	4601      	mov	r1, r0
 8028f5e:	4620      	mov	r0, r4
 8028f60:	f7ff fe24 	bl	8028bac <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8028f64:	69ea      	ldr	r2, [r5, #28]
 8028f66:	69a9      	ldr	r1, [r5, #24]
 8028f68:	4620      	mov	r0, r4
 8028f6a:	f7ff fd5b 	bl	8028a24 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 8028f6e:	2201      	movs	r2, #1
 8028f70:	f10d 0107 	add.w	r1, sp, #7
 8028f74:	4620      	mov	r0, r4
 8028f76:	f7ff fd55 	bl	8028a24 <mg_send>
}
 8028f7a:	b003      	add	sp, #12
 8028f7c:	bd30      	pop	{r4, r5, pc}
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 8028f7e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8028f80:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8028f82:	f7f9 fc13 	bl	80227ac <get_props_size>
 8028f86:	e7c7      	b.n	8028f18 <mg_mqtt_sub+0x20>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8028f88:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8028f8a:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8028f8c:	4620      	mov	r0, r4
 8028f8e:	f7ff fe19 	bl	8028bc4 <mg_send_mqtt_properties>
 8028f92:	e7e0      	b.n	8028f56 <mg_mqtt_sub+0x5e>

08028f94 <mg_mqtt_pub>:
uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8028f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028f98:	b083      	sub	sp, #12
 8028f9a:	4605      	mov	r5, r0
 8028f9c:	460c      	mov	r4, r1
  uint16_t id = opts->retransmit_id;
 8028f9e:	f8b1 802c 	ldrh.w	r8, [r1, #44]	@ 0x2c
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8028fa2:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8028fa6:	005b      	lsls	r3, r3, #1
 8028fa8:	f003 0306 	and.w	r3, r3, #6
 8028fac:	f891 202e 	ldrb.w	r2, [r1, #46]	@ 0x2e
 8028fb0:	2a00      	cmp	r2, #0
 8028fb2:	d057      	beq.n	8029064 <mg_mqtt_pub+0xd0>
 8028fb4:	2201      	movs	r2, #1
 8028fb6:	ea43 0a02 	orr.w	sl, r3, r2
 8028fba:	4656      	mov	r6, sl
  size_t len = 2 + opts->topic.len + opts->message.len;
 8028fbc:	69e7      	ldr	r7, [r4, #28]
 8028fbe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8028fc0:	441f      	add	r7, r3
 8028fc2:	f107 0902 	add.w	r9, r7, #2
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8028fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80290b0 <mg_mqtt_pub+0x11c>)
 8028fc8:	681b      	ldr	r3, [r3, #0]
 8028fca:	2b02      	cmp	r3, #2
 8028fcc:	dc4c      	bgt.n	8029068 <mg_mqtt_pub+0xd4>
  if (opts->qos > 0) len += 2;
 8028fce:	f894 b028 	ldrb.w	fp, [r4, #40]	@ 0x28
 8028fd2:	f1bb 0f00 	cmp.w	fp, #0
 8028fd6:	d001      	beq.n	8028fdc <mg_mqtt_pub+0x48>
 8028fd8:	f107 0904 	add.w	r9, r7, #4
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 8028fdc:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8028fe0:	f013 0f04 	tst.w	r3, #4
 8028fe4:	d152      	bne.n	802908c <mg_mqtt_pub+0xf8>
  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 8028fe6:	f1bb 0f00 	cmp.w	fp, #0
 8028fea:	d004      	beq.n	8028ff6 <mg_mqtt_pub+0x62>
 8028fec:	f1b8 0f00 	cmp.w	r8, #0
 8028ff0:	d001      	beq.n	8028ff6 <mg_mqtt_pub+0x62>
 8028ff2:	f04a 0608 	orr.w	r6, sl, #8
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 8028ff6:	464b      	mov	r3, r9
 8028ff8:	4632      	mov	r2, r6
 8028ffa:	2103      	movs	r1, #3
 8028ffc:	4628      	mov	r0, r5
 8028ffe:	f7ff fda3 	bl	8028b48 <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8029002:	8ba0      	ldrh	r0, [r4, #28]
 8029004:	f7fe f91a 	bl	802723c <mg_ntohs>
 8029008:	4601      	mov	r1, r0
 802900a:	4628      	mov	r0, r5
 802900c:	f7ff fdce 	bl	8028bac <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8029010:	69e2      	ldr	r2, [r4, #28]
 8029012:	69a1      	ldr	r1, [r4, #24]
 8029014:	4628      	mov	r0, r5
 8029016:	f7ff fd05 	bl	8028a24 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 802901a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 802901e:	b1b3      	cbz	r3, 802904e <mg_mqtt_pub+0xba>
    if (id == 0) {  // generate new one if not resending
 8029020:	f1b8 0f00 	cmp.w	r8, #0
 8029024:	d10c      	bne.n	8029040 <mg_mqtt_pub+0xac>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8029026:	686a      	ldr	r2, [r5, #4]
 8029028:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 802902a:	3301      	adds	r3, #1
 802902c:	b29b      	uxth	r3, r3
 802902e:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8029030:	b91b      	cbnz	r3, 802903a <mg_mqtt_pub+0xa6>
 8029032:	686a      	ldr	r2, [r5, #4]
 8029034:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8029036:	3301      	adds	r3, #1
 8029038:	8593      	strh	r3, [r2, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 802903a:	686b      	ldr	r3, [r5, #4]
 802903c:	f8b3 802c 	ldrh.w	r8, [r3, #44]	@ 0x2c
    mg_send_u16(c, mg_htons(id));
 8029040:	4640      	mov	r0, r8
 8029042:	f7fe f8fb 	bl	802723c <mg_ntohs>
 8029046:	4601      	mov	r1, r0
 8029048:	4628      	mov	r0, r5
 802904a:	f7ff fdaf 	bl	8028bac <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802904e:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8029052:	f013 0f04 	tst.w	r3, #4
 8029056:	d11f      	bne.n	8029098 <mg_mqtt_pub+0x104>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8029058:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 802905a:	bb1a      	cbnz	r2, 80290a4 <mg_mqtt_pub+0x110>
}
 802905c:	4640      	mov	r0, r8
 802905e:	b003      	add	sp, #12
 8029060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8029064:	2200      	movs	r2, #0
 8029066:	e7a6      	b.n	8028fb6 <mg_mqtt_pub+0x22>
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8029068:	4b12      	ldr	r3, [pc, #72]	@ (80290b4 <mg_mqtt_pub+0x120>)
 802906a:	f241 123c 	movw	r2, #4412	@ 0x113c
 802906e:	4912      	ldr	r1, [pc, #72]	@ (80290b8 <mg_mqtt_pub+0x124>)
 8029070:	2003      	movs	r0, #3
 8029072:	f7fe fc25 	bl	80278c0 <mg_log_prefix>
 8029076:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8029078:	6a22      	ldr	r2, [r4, #32]
 802907a:	9201      	str	r2, [sp, #4]
 802907c:	9300      	str	r3, [sp, #0]
 802907e:	69a3      	ldr	r3, [r4, #24]
 8029080:	69e2      	ldr	r2, [r4, #28]
 8029082:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8029084:	480d      	ldr	r0, [pc, #52]	@ (80290bc <mg_mqtt_pub+0x128>)
 8029086:	f7fc fab3 	bl	80255f0 <mg_log>
 802908a:	e7a0      	b.n	8028fce <mg_mqtt_pub+0x3a>
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 802908c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802908e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8029090:	f7f9 fb8c 	bl	80227ac <get_props_size>
 8029094:	4481      	add	r9, r0
 8029096:	e7a6      	b.n	8028fe6 <mg_mqtt_pub+0x52>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8029098:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 802909a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802909c:	4628      	mov	r0, r5
 802909e:	f7ff fd91 	bl	8028bc4 <mg_send_mqtt_properties>
 80290a2:	e7d9      	b.n	8029058 <mg_mqtt_pub+0xc4>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 80290a4:	6a21      	ldr	r1, [r4, #32]
 80290a6:	4628      	mov	r0, r5
 80290a8:	f7ff fcbc 	bl	8028a24 <mg_send>
 80290ac:	e7d6      	b.n	802905c <mg_mqtt_pub+0xc8>
 80290ae:	bf00      	nop
 80290b0:	2000013c 	.word	0x2000013c
 80290b4:	0803d7d8 	.word	0x0803d7d8
 80290b8:	0803bba0 	.word	0x0803bba0
 80290bc:	0803bf40 	.word	0x0803bf40

080290c0 <mqtt_cb>:
static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 80290c0:	b530      	push	{r4, r5, lr}
 80290c2:	b08f      	sub	sp, #60	@ 0x3c
 80290c4:	4604      	mov	r4, r0
  if (ev == MG_EV_READ) {
 80290c6:	2907      	cmp	r1, #7
 80290c8:	f000 808f 	beq.w	80291ea <mqtt_cb+0x12a>
}
 80290cc:	b00f      	add	sp, #60	@ 0x3c
 80290ce:	bd30      	pop	{r4, r5, pc}
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 80290d0:	2204      	movs	r2, #4
 80290d2:	e091      	b.n	80291f8 <mqtt_cb+0x138>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 80290d4:	4b73      	ldr	r3, [pc, #460]	@ (80292a4 <mqtt_cb+0x1e4>)
 80290d6:	681b      	ldr	r3, [r3, #0]
 80290d8:	2b00      	cmp	r3, #0
 80290da:	dc06      	bgt.n	80290ea <mqtt_cb+0x2a>
        c->is_closing = 1;
 80290dc:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80290e0:	f043 0320 	orr.w	r3, r3, #32
 80290e4:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        break;
 80290e8:	e7f0      	b.n	80290cc <mqtt_cb+0xc>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 80290ea:	4b6f      	ldr	r3, [pc, #444]	@ (80292a8 <mqtt_cb+0x1e8>)
 80290ec:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 80290f0:	496e      	ldr	r1, [pc, #440]	@ (80292ac <mqtt_cb+0x1ec>)
 80290f2:	2001      	movs	r0, #1
 80290f4:	f7fe fbe4 	bl	80278c0 <mg_log_prefix>
 80290f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80290fa:	486d      	ldr	r0, [pc, #436]	@ (80292b0 <mqtt_cb+0x1f0>)
 80290fc:	f7fc fa78 	bl	80255f0 <mg_log>
 8029100:	e7ec      	b.n	80290dc <mqtt_cb+0x1c>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8029102:	4b69      	ldr	r3, [pc, #420]	@ (80292a8 <mqtt_cb+0x1e8>)
 8029104:	f241 12b5 	movw	r2, #4533	@ 0x11b5
 8029108:	4968      	ldr	r1, [pc, #416]	@ (80292ac <mqtt_cb+0x1ec>)
 802910a:	2004      	movs	r0, #4
 802910c:	f7fe fbd8 	bl	80278c0 <mg_log_prefix>
 8029110:	9b06      	ldr	r3, [sp, #24]
 8029112:	9301      	str	r3, [sp, #4]
 8029114:	9b07      	ldr	r3, [sp, #28]
 8029116:	9300      	str	r3, [sp, #0]
 8029118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802911a:	f89d 202a 	ldrb.w	r2, [sp, #42]	@ 0x2a
 802911e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029120:	4864      	ldr	r0, [pc, #400]	@ (80292b4 <mqtt_cb+0x1f4>)
 8029122:	f7fc fa65 	bl	80255f0 <mg_log>
 8029126:	e077      	b.n	8029218 <mqtt_cb+0x158>
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 8029128:	aa0b      	add	r2, sp, #44	@ 0x2c
 802912a:	2111      	movs	r1, #17
 802912c:	4620      	mov	r0, r4
 802912e:	f7fa fffc 	bl	802412a <mg_call>
            if (mm.ack == 0) {
 8029132:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8029136:	b97b      	cbnz	r3, 8029158 <mqtt_cb+0x98>
              MG_DEBUG(("%lu Connected", c->id));
 8029138:	4b5a      	ldr	r3, [pc, #360]	@ (80292a4 <mqtt_cb+0x1e4>)
 802913a:	681b      	ldr	r3, [r3, #0]
 802913c:	2b02      	cmp	r3, #2
 802913e:	dd49      	ble.n	80291d4 <mqtt_cb+0x114>
 8029140:	4b59      	ldr	r3, [pc, #356]	@ (80292a8 <mqtt_cb+0x1e8>)
 8029142:	f241 12bb 	movw	r2, #4539	@ 0x11bb
 8029146:	4959      	ldr	r1, [pc, #356]	@ (80292ac <mqtt_cb+0x1ec>)
 8029148:	2003      	movs	r0, #3
 802914a:	f7fe fbb9 	bl	80278c0 <mg_log_prefix>
 802914e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029150:	4859      	ldr	r0, [pc, #356]	@ (80292b8 <mqtt_cb+0x1f8>)
 8029152:	f7fc fa4d 	bl	80255f0 <mg_log>
 8029156:	e03d      	b.n	80291d4 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8029158:	4b52      	ldr	r3, [pc, #328]	@ (80292a4 <mqtt_cb+0x1e4>)
 802915a:	681b      	ldr	r3, [r3, #0]
 802915c:	2b00      	cmp	r3, #0
 802915e:	dc06      	bgt.n	802916e <mqtt_cb+0xae>
              c->is_closing = 1;
 8029160:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029164:	f043 0320 	orr.w	r3, r3, #32
 8029168:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 802916c:	e032      	b.n	80291d4 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 802916e:	4b4e      	ldr	r3, [pc, #312]	@ (80292a8 <mqtt_cb+0x1e8>)
 8029170:	f241 12bd 	movw	r2, #4541	@ 0x11bd
 8029174:	494d      	ldr	r1, [pc, #308]	@ (80292ac <mqtt_cb+0x1ec>)
 8029176:	2001      	movs	r0, #1
 8029178:	f7fe fba2 	bl	80278c0 <mg_log_prefix>
 802917c:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 8029180:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029182:	484e      	ldr	r0, [pc, #312]	@ (80292bc <mqtt_cb+0x1fc>)
 8029184:	f7fc fa34 	bl	80255f0 <mg_log>
 8029188:	e7ea      	b.n	8029160 <mqtt_cb+0xa0>
            if (mm.qos > 0) {
 802918a:	f89d 502b 	ldrb.w	r5, [sp, #43]	@ 0x2b
 802918e:	b1e5      	cbz	r5, 80291ca <mqtt_cb+0x10a>
              uint16_t id = mg_ntohs(mm.id);
 8029190:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8029194:	f7fe f852 	bl	802723c <mg_ntohs>
 8029198:	f8ad 000c 	strh.w	r0, [sp, #12]
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 802919c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80291a0:	f013 0f04 	tst.w	r3, #4
 80291a4:	d14a      	bne.n	802923c <mqtt_cb+0x17c>
              uint32_t remaining_len = sizeof(id);
 80291a6:	2302      	movs	r3, #2
              mg_mqtt_send_header(
 80291a8:	2d02      	cmp	r5, #2
 80291aa:	d049      	beq.n	8029240 <mqtt_cb+0x180>
 80291ac:	2104      	movs	r1, #4
 80291ae:	2200      	movs	r2, #0
 80291b0:	4620      	mov	r0, r4
 80291b2:	f7ff fcc9 	bl	8028b48 <mg_mqtt_send_header>
              mg_send(c, &id, sizeof(id));
 80291b6:	2202      	movs	r2, #2
 80291b8:	a903      	add	r1, sp, #12
 80291ba:	4620      	mov	r0, r4
 80291bc:	f7ff fc32 	bl	8028a24 <mg_send>
              if (c->is_mqtt5) {
 80291c0:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80291c4:	f013 0f04 	tst.w	r3, #4
 80291c8:	d13c      	bne.n	8029244 <mqtt_cb+0x184>
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 80291ca:	aa04      	add	r2, sp, #16
 80291cc:	2110      	movs	r1, #16
 80291ce:	4620      	mov	r0, r4
 80291d0:	f7fa ffab 	bl	802412a <mg_call>
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 80291d4:	aa04      	add	r2, sp, #16
 80291d6:	210f      	movs	r1, #15
 80291d8:	4620      	mov	r0, r4
 80291da:	f7fa ffa6 	bl	802412a <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 80291de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80291e0:	2100      	movs	r1, #0
 80291e2:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80291e6:	f7fd ff34 	bl	8027052 <mg_iobuf_del>
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 80291ea:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80291ee:	f013 0f04 	tst.w	r3, #4
 80291f2:	f43f af6d 	beq.w	80290d0 <mqtt_cb+0x10>
 80291f6:	2205      	movs	r2, #5
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 80291f8:	ab04      	add	r3, sp, #16
 80291fa:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80291fc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80291fe:	f7fb fc5c 	bl	8024aba <mg_mqtt_parse>
      if (rc == MQTT_MALFORMED) {
 8029202:	2802      	cmp	r0, #2
 8029204:	f43f af66 	beq.w	80290d4 <mqtt_cb+0x14>
      } else if (rc == MQTT_OK) {
 8029208:	2800      	cmp	r0, #0
 802920a:	f47f af5f 	bne.w	80290cc <mqtt_cb+0xc>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 802920e:	4b25      	ldr	r3, [pc, #148]	@ (80292a4 <mqtt_cb+0x1e4>)
 8029210:	681b      	ldr	r3, [r3, #0]
 8029212:	2b03      	cmp	r3, #3
 8029214:	f73f af75 	bgt.w	8029102 <mqtt_cb+0x42>
        switch (mm.cmd) {
 8029218:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 802921c:	3b02      	subs	r3, #2
 802921e:	2b04      	cmp	r3, #4
 8029220:	d8d8      	bhi.n	80291d4 <mqtt_cb+0x114>
 8029222:	a201      	add	r2, pc, #4	@ (adr r2, 8029228 <mqtt_cb+0x168>)
 8029224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029228:	08029129 	.word	0x08029129
 802922c:	0802918b 	.word	0x0802918b
 8029230:	080291d5 	.word	0x080291d5
 8029234:	08029259 	.word	0x08029259
 8029238:	0802927f 	.word	0x0802927f
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 802923c:	2304      	movs	r3, #4
 802923e:	e7b3      	b.n	80291a8 <mqtt_cb+0xe8>
              mg_mqtt_send_header(
 8029240:	2105      	movs	r1, #5
 8029242:	e7b4      	b.n	80291ae <mqtt_cb+0xee>
                uint16_t zero = 0;
 8029244:	2300      	movs	r3, #0
 8029246:	f8ad 300e 	strh.w	r3, [sp, #14]
                mg_send(c, &zero, sizeof(zero));
 802924a:	2202      	movs	r2, #2
 802924c:	f10d 010e 	add.w	r1, sp, #14
 8029250:	4620      	mov	r0, r4
 8029252:	f7ff fbe7 	bl	8028a24 <mg_send>
 8029256:	e7b8      	b.n	80291ca <mqtt_cb+0x10a>
            uint16_t id = mg_ntohs(mm.id);
 8029258:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 802925c:	f7fd ffee 	bl	802723c <mg_ntohs>
 8029260:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 8029264:	2302      	movs	r3, #2
 8029266:	461a      	mov	r2, r3
 8029268:	2106      	movs	r1, #6
 802926a:	4620      	mov	r0, r4
 802926c:	f7ff fc6c 	bl	8028b48 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 8029270:	2202      	movs	r2, #2
 8029272:	f10d 010e 	add.w	r1, sp, #14
 8029276:	4620      	mov	r0, r4
 8029278:	f7ff fbd4 	bl	8028a24 <mg_send>
            break;
 802927c:	e7aa      	b.n	80291d4 <mqtt_cb+0x114>
            uint16_t id = mg_ntohs(mm.id);
 802927e:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8029282:	f7fd ffdb 	bl	802723c <mg_ntohs>
 8029286:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 802928a:	2302      	movs	r3, #2
 802928c:	2200      	movs	r2, #0
 802928e:	2107      	movs	r1, #7
 8029290:	4620      	mov	r0, r4
 8029292:	f7ff fc59 	bl	8028b48 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 8029296:	2202      	movs	r2, #2
 8029298:	f10d 010e 	add.w	r1, sp, #14
 802929c:	4620      	mov	r0, r4
 802929e:	f7ff fbc1 	bl	8028a24 <mg_send>
            break;
 80292a2:	e797      	b.n	80291d4 <mqtt_cb+0x114>
 80292a4:	2000013c 	.word	0x2000013c
 80292a8:	0803d7d0 	.word	0x0803d7d0
 80292ac:	0803bba0 	.word	0x0803bba0
 80292b0:	0803bf58 	.word	0x0803bf58
 80292b4:	0803bf74 	.word	0x0803bf74
 80292b8:	0803bf94 	.word	0x0803bf94
 80292bc:	0803bfa4 	.word	0x0803bfa4

080292c0 <tx_tcp>:
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 80292c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80292c4:	b088      	sub	sp, #32
 80292c6:	4605      	mov	r5, r0
 80292c8:	469a      	mov	sl, r3
 80292ca:	9f15      	ldr	r7, [sp, #84]	@ 0x54
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 80292cc:	f107 0614 	add.w	r6, r7, #20
 80292d0:	9601      	str	r6, [sp, #4]
 80292d2:	9200      	str	r2, [sp, #0]
 80292d4:	6883      	ldr	r3, [r0, #8]
 80292d6:	2206      	movs	r2, #6
 80292d8:	f7fd ffd0 	bl	802727c <tx_ip>
 80292dc:	4604      	mov	r4, r0
  struct tcp *tcp = (struct tcp *) (ip + 1);
 80292de:	f100 0914 	add.w	r9, r0, #20
  memset(tcp, 0, sizeof(*tcp));
 80292e2:	2200      	movs	r2, #0
 80292e4:	6142      	str	r2, [r0, #20]
 80292e6:	6182      	str	r2, [r0, #24]
 80292e8:	61c2      	str	r2, [r0, #28]
 80292ea:	6202      	str	r2, [r0, #32]
 80292ec:	6242      	str	r2, [r0, #36]	@ 0x24
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 80292ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80292f0:	b10b      	cbz	r3, 80292f6 <tx_tcp+0x36>
 80292f2:	2f00      	cmp	r7, #0
 80292f4:	d147      	bne.n	8029386 <tx_tcp+0xc6>
  tcp->sport = sport;
 80292f6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80292fa:	82a3      	strh	r3, [r4, #20]
  tcp->dport = dport;
 80292fc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8029300:	82e3      	strh	r3, [r4, #22]
  tcp->seq = seq;
 8029302:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8029304:	61a3      	str	r3, [r4, #24]
  tcp->ack = ack;
 8029306:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029308:	61e3      	str	r3, [r4, #28]
  tcp->flags = flags;
 802930a:	f884 a021 	strb.w	sl, [r4, #33]	@ 0x21
  tcp->win = mg_htons(MIP_TCP_WIN);
 802930e:	f241 7070 	movw	r0, #6000	@ 0x1770
 8029312:	f7fd ff93 	bl	802723c <mg_ntohs>
 8029316:	8460      	strh	r0, [r4, #34]	@ 0x22
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 8029318:	2350      	movs	r3, #80	@ 0x50
 802931a:	f884 3020 	strb.w	r3, [r4, #32]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 802931e:	b2bb      	uxth	r3, r7
 8029320:	3314      	adds	r3, #20
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 8029322:	2000      	movs	r0, #0
 8029324:	f88d 001c 	strb.w	r0, [sp, #28]
 8029328:	7a62      	ldrb	r2, [r4, #9]
 802932a:	f88d 201d 	strb.w	r2, [sp, #29]
 802932e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8029332:	f88d 201e 	strb.w	r2, [sp, #30]
 8029336:	f88d 301f 	strb.w	r3, [sp, #31]
  cs = csumup(cs, tcp, n);
 802933a:	b2b2      	uxth	r2, r6
 802933c:	4649      	mov	r1, r9
 802933e:	f7f9 fa95 	bl	802286c <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8029342:	f104 060c 	add.w	r6, r4, #12
 8029346:	2204      	movs	r2, #4
 8029348:	4631      	mov	r1, r6
 802934a:	f7f9 fa8f 	bl	802286c <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 802934e:	f104 0810 	add.w	r8, r4, #16
 8029352:	2204      	movs	r2, #4
 8029354:	4641      	mov	r1, r8
 8029356:	f7f9 fa89 	bl	802286c <csumup>
  cs = csumup(cs, pseudo, sizeof(pseudo));
 802935a:	2204      	movs	r2, #4
 802935c:	a907      	add	r1, sp, #28
 802935e:	f7f9 fa85 	bl	802286c <csumup>
  tcp->csum = csumfin(cs);
 8029362:	f7fd ff77 	bl	8027254 <csumfin>
 8029366:	84a0      	strh	r0, [r4, #36]	@ 0x24
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8029368:	4b18      	ldr	r3, [pc, #96]	@ (80293cc <tx_tcp+0x10c>)
 802936a:	681b      	ldr	r3, [r3, #0]
 802936c:	2b03      	cmp	r3, #3
 802936e:	dc10      	bgt.n	8029392 <tx_tcp+0xd2>
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 8029370:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8029374:	696b      	ldr	r3, [r5, #20]
 8029376:	1ac9      	subs	r1, r1, r3
 8029378:	4439      	add	r1, r7
 802937a:	4628      	mov	r0, r5
 802937c:	f7f9 fa87 	bl	802288e <ether_output>
}
 8029380:	b008      	add	sp, #32
 8029382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8029386:	463a      	mov	r2, r7
 8029388:	4619      	mov	r1, r3
 802938a:	3028      	adds	r0, #40	@ 0x28
 802938c:	f003 fa1e 	bl	802c7cc <memmove>
 8029390:	e7b1      	b.n	80292f6 <tx_tcp+0x36>
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8029392:	4b0f      	ldr	r3, [pc, #60]	@ (80293d0 <tx_tcp+0x110>)
 8029394:	f241 5254 	movw	r2, #5460	@ 0x1554
 8029398:	490e      	ldr	r1, [pc, #56]	@ (80293d4 <tx_tcp+0x114>)
 802939a:	2004      	movs	r0, #4
 802939c:	f7fe fa90 	bl	80278c0 <mg_log_prefix>
 80293a0:	8aa0      	ldrh	r0, [r4, #20]
 80293a2:	f7fd ff4b 	bl	802723c <mg_ntohs>
 80293a6:	4681      	mov	r9, r0
 80293a8:	8ae0      	ldrh	r0, [r4, #22]
 80293aa:	f7fd ff47 	bl	802723c <mg_ntohs>
 80293ae:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 80293b2:	4909      	ldr	r1, [pc, #36]	@ (80293d8 <tx_tcp+0x118>)
 80293b4:	9704      	str	r7, [sp, #16]
 80293b6:	9303      	str	r3, [sp, #12]
 80293b8:	9002      	str	r0, [sp, #8]
 80293ba:	f8cd 8004 	str.w	r8, [sp, #4]
 80293be:	9100      	str	r1, [sp, #0]
 80293c0:	464b      	mov	r3, r9
 80293c2:	4632      	mov	r2, r6
 80293c4:	4805      	ldr	r0, [pc, #20]	@ (80293dc <tx_tcp+0x11c>)
 80293c6:	f7fc f913 	bl	80255f0 <mg_log>
 80293ca:	e7d1      	b.n	8029370 <tx_tcp+0xb0>
 80293cc:	2000013c 	.word	0x2000013c
 80293d0:	0803d794 	.word	0x0803d794
 80293d4:	0803bba0 	.word	0x0803bba0
 80293d8:	080255b1 	.word	0x080255b1
 80293dc:	0803bfc4 	.word	0x0803bfc4

080293e0 <send_syn>:
static void send_syn(struct mg_connection *c) {
 80293e0:	b530      	push	{r4, r5, lr}
 80293e2:	b087      	sub	sp, #28
 80293e4:	4604      	mov	r4, r0
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 80293e6:	8b05      	ldrh	r5, [r0, #24]
 80293e8:	4628      	mov	r0, r5
 80293ea:	f7fd ff27 	bl	802723c <mg_ntohs>
 80293ee:	f7fd fe8d 	bl	802710c <mg_ntohl>
 80293f2:	4602      	mov	r2, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80293f4:	6863      	ldr	r3, [r4, #4]
 80293f6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 80293f8:	2300      	movs	r3, #0
 80293fa:	9305      	str	r3, [sp, #20]
 80293fc:	9304      	str	r3, [sp, #16]
 80293fe:	9303      	str	r3, [sp, #12]
 8029400:	9202      	str	r2, [sp, #8]
 8029402:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8029404:	9301      	str	r3, [sp, #4]
 8029406:	9500      	str	r5, [sp, #0]
 8029408:	2302      	movs	r3, #2
 802940a:	69e2      	ldr	r2, [r4, #28]
 802940c:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8029410:	f7ff ff56 	bl	80292c0 <tx_tcp>
}
 8029414:	b007      	add	sp, #28
 8029416:	bd30      	pop	{r4, r5, pc}

08029418 <tx_tcp_pkt>:
                         size_t len) {
 8029418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802941c:	b087      	sub	sp, #28
 802941e:	4605      	mov	r5, r0
 8029420:	4617      	mov	r7, r2
 8029422:	4698      	mov	r8, r3
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8029424:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8029426:	7b5c      	ldrb	r4, [r3, #13]
 8029428:	f014 0403 	ands.w	r4, r4, #3
 802942c:	bf18      	it	ne
 802942e:	2401      	movne	r4, #1
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8029430:	690e      	ldr	r6, [r1, #16]
 8029432:	3606      	adds	r6, #6
 8029434:	69ca      	ldr	r2, [r1, #28]
 8029436:	f8d2 900c 	ldr.w	r9, [r2, #12]
 802943a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 802943e:	f8b3 b000 	ldrh.w	fp, [r3]
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8029442:	6858      	ldr	r0, [r3, #4]
 8029444:	f7fd fe62 	bl	802710c <mg_ntohl>
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8029448:	4420      	add	r0, r4
 802944a:	f7fd fe5f 	bl	802710c <mg_ntohl>
 802944e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8029450:	9305      	str	r3, [sp, #20]
 8029452:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8029454:	9304      	str	r3, [sp, #16]
 8029456:	9003      	str	r0, [sp, #12]
 8029458:	f8cd 8008 	str.w	r8, [sp, #8]
 802945c:	f8cd b004 	str.w	fp, [sp, #4]
 8029460:	f8cd a000 	str.w	sl, [sp]
 8029464:	463b      	mov	r3, r7
 8029466:	464a      	mov	r2, r9
 8029468:	4631      	mov	r1, r6
 802946a:	4628      	mov	r0, r5
 802946c:	f7ff ff28 	bl	80292c0 <tx_tcp>
}
 8029470:	b007      	add	sp, #28
 8029472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08029478 <settmout>:
static void settmout(struct mg_connection *c, uint8_t type) {
 8029478:	b530      	push	{r4, r5, lr}
 802947a:	b083      	sub	sp, #12
 802947c:	4604      	mov	r4, r0
 802947e:	460d      	mov	r5, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8029480:	6843      	ldr	r3, [r0, #4]
 8029482:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 8029484:	1e4b      	subs	r3, r1, #1
 8029486:	2b03      	cmp	r3, #3
 8029488:	d803      	bhi.n	8029492 <settmout+0x1a>
 802948a:	e8df f003 	tbb	[pc, r3]
 802948e:	050d      	.short	0x050d
 8029490:	0a07      	.short	0x0a07
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8029492:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 8029496:	e008      	b.n	80294aa <settmout+0x32>
 8029498:	2364      	movs	r3, #100	@ 0x64
 802949a:	e006      	b.n	80294aa <settmout+0x32>
 802949c:	f643 2398 	movw	r3, #15000	@ 0x3a98
 80294a0:	e003      	b.n	80294aa <settmout+0x32>
 80294a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80294a6:	e000      	b.n	80294aa <settmout+0x32>
 80294a8:	2396      	movs	r3, #150	@ 0x96
  s->timer = ifp->now + n;
 80294aa:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 80294ac:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80294ae:	185b      	adds	r3, r3, r1
 80294b0:	f142 0200 	adc.w	r2, r2, #0
 80294b4:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 80294b8:	f8c4 20bc 	str.w	r2, [r4, #188]	@ 0xbc
  s->ttype = type;
 80294bc:	f884 50ce 	strb.w	r5, [r4, #206]	@ 0xce
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 80294c0:	4b0b      	ldr	r3, [pc, #44]	@ (80294f0 <settmout+0x78>)
 80294c2:	681b      	ldr	r3, [r3, #0]
 80294c4:	2b03      	cmp	r3, #3
 80294c6:	dc01      	bgt.n	80294cc <settmout+0x54>
}
 80294c8:	b003      	add	sp, #12
 80294ca:	bd30      	pop	{r4, r5, pc}
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 80294cc:	4b09      	ldr	r3, [pc, #36]	@ (80294f4 <settmout+0x7c>)
 80294ce:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 80294d2:	4909      	ldr	r1, [pc, #36]	@ (80294f8 <settmout+0x80>)
 80294d4:	2004      	movs	r0, #4
 80294d6:	f7fe f9f3 	bl	80278c0 <mg_log_prefix>
 80294da:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	@ 0xb8
 80294de:	e9cd 2300 	strd	r2, r3, [sp]
 80294e2:	462a      	mov	r2, r5
 80294e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80294e6:	4805      	ldr	r0, [pc, #20]	@ (80294fc <settmout+0x84>)
 80294e8:	f7fc f882 	bl	80255f0 <mg_log>
}
 80294ec:	e7ec      	b.n	80294c8 <settmout+0x50>
 80294ee:	bf00      	nop
 80294f0:	2000013c 	.word	0x2000013c
 80294f4:	0803d788 	.word	0x0803d788
 80294f8:	0803bba0 	.word	0x0803bba0
 80294fc:	0803bfe8 	.word	0x0803bfe8

08029500 <mg_io_send>:
long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 8029500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029504:	b089      	sub	sp, #36	@ 0x24
 8029506:	4604      	mov	r4, r0
 8029508:	460e      	mov	r6, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802950a:	6843      	ldr	r3, [r0, #4]
 802950c:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 802950e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  len = trim_len(c, len);
 8029512:	4611      	mov	r1, r2
 8029514:	f7ff fa28 	bl	8028968 <trim_len>
 8029518:	4605      	mov	r5, r0
  if (c->is_udp) {
 802951a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802951e:	f013 0f01 	tst.w	r3, #1
 8029522:	d010      	beq.n	8029546 <mg_io_send+0x46>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 8029524:	68ba      	ldr	r2, [r7, #8]
 8029526:	9003      	str	r0, [sp, #12]
 8029528:	9602      	str	r6, [sp, #8]
 802952a:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 802952c:	9301      	str	r3, [sp, #4]
 802952e:	f8cd 8000 	str.w	r8, [sp]
 8029532:	8b23      	ldrh	r3, [r4, #24]
 8029534:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8029538:	4638      	mov	r0, r7
 802953a:	f7fd ff34 	bl	80273a6 <tx_udp>
  return (long) len;
 802953e:	4628      	mov	r0, r5
}
 8029540:	b009      	add	sp, #36	@ 0x24
 8029542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 8029546:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 802954a:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 802954e:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8029552:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8029556:	f7fd fdd9 	bl	802710c <mg_ntohl>
 802955a:	9007      	str	r0, [sp, #28]
 802955c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8029560:	f7fd fdd4 	bl	802710c <mg_ntohl>
 8029564:	9505      	str	r5, [sp, #20]
 8029566:	9604      	str	r6, [sp, #16]
 8029568:	9003      	str	r0, [sp, #12]
 802956a:	9b07      	ldr	r3, [sp, #28]
 802956c:	9302      	str	r3, [sp, #8]
 802956e:	f8cd b004 	str.w	fp, [sp, #4]
 8029572:	f8cd a000 	str.w	sl, [sp]
 8029576:	2318      	movs	r3, #24
 8029578:	4642      	mov	r2, r8
 802957a:	4649      	mov	r1, r9
 802957c:	4638      	mov	r0, r7
 802957e:	f7ff fe9f 	bl	80292c0 <tx_tcp>
    if (sent == 0) {
 8029582:	b180      	cbz	r0, 80295a6 <mg_io_send+0xa6>
    } else if (sent == (size_t) -1) {
 8029584:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8029588:	d010      	beq.n	80295ac <mg_io_send+0xac>
      s->seq += (uint32_t) len;
 802958a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 802958e:	442b      	add	r3, r5
 8029590:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 8029594:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8029598:	2b01      	cmp	r3, #1
 802959a:	d1d0      	bne.n	802953e <mg_io_send+0x3e>
 802959c:	2100      	movs	r1, #0
 802959e:	4620      	mov	r0, r4
 80295a0:	f7ff ff6a 	bl	8029478 <settmout>
 80295a4:	e7cb      	b.n	802953e <mg_io_send+0x3e>
      return MG_IO_WAIT;
 80295a6:	f06f 0001 	mvn.w	r0, #1
 80295aa:	e7c9      	b.n	8029540 <mg_io_send+0x40>
      return MG_IO_ERR;
 80295ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80295b0:	e7c6      	b.n	8029540 <mg_io_send+0x40>
	...

080295b4 <write_conn>:
static void write_conn(struct mg_connection *c) {
 80295b4:	b510      	push	{r4, lr}
 80295b6:	b082      	sub	sp, #8
 80295b8:	4604      	mov	r4, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 80295ba:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
                       : mg_io_send(c, c->send.buf, c->send.len);
 80295be:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80295c2:	d00b      	beq.n	80295dc <write_conn+0x28>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 80295c4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80295c6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80295c8:	f7fd fc7c 	bl	8026ec4 <mg_tls_send>
 80295cc:	9001      	str	r0, [sp, #4]
  if (len == MG_IO_ERR) {
 80295ce:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 80295d2:	d008      	beq.n	80295e6 <write_conn+0x32>
  } else if (len > 0) {
 80295d4:	2800      	cmp	r0, #0
 80295d6:	dc0b      	bgt.n	80295f0 <write_conn+0x3c>
}
 80295d8:	b002      	add	sp, #8
 80295da:	bd10      	pop	{r4, pc}
                       : mg_io_send(c, c->send.buf, c->send.len);
 80295dc:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80295de:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80295e0:	f7ff ff8e 	bl	8029500 <mg_io_send>
 80295e4:	e7f2      	b.n	80295cc <write_conn+0x18>
    mg_error(c, "tx err");
 80295e6:	4908      	ldr	r1, [pc, #32]	@ (8029608 <write_conn+0x54>)
 80295e8:	4620      	mov	r0, r4
 80295ea:	f7fe fa51 	bl	8027a90 <mg_error>
 80295ee:	e7f3      	b.n	80295d8 <write_conn+0x24>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 80295f0:	4602      	mov	r2, r0
 80295f2:	2100      	movs	r1, #0
 80295f4:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 80295f8:	f7fd fd2b 	bl	8027052 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 80295fc:	aa01      	add	r2, sp, #4
 80295fe:	2108      	movs	r1, #8
 8029600:	4620      	mov	r0, r4
 8029602:	f7fa fd92 	bl	802412a <mg_call>
}
 8029606:	e7e7      	b.n	80295d8 <write_conn+0x24>
 8029608:	0803bff8 	.word	0x0803bff8

0802960c <init_closure>:
  if (c->is_udp == false && c->is_listening == false &&
 802960c:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 8029610:	f240 1221 	movw	r2, #289	@ 0x121
 8029614:	421a      	tst	r2, r3
 8029616:	d000      	beq.n	802961a <init_closure+0xe>
 8029618:	4770      	bx	lr
static void init_closure(struct mg_connection *c) {
 802961a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802961e:	b086      	sub	sp, #24
 8029620:	4604      	mov	r4, r0
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 8029622:	6843      	ldr	r3, [r0, #4]
    struct mg_tcpip_if *ifp =
 8029624:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8029626:	f8d0 801c 	ldr.w	r8, [r0, #28]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 802962a:	f100 07c8 	add.w	r7, r0, #200	@ 0xc8
 802962e:	f8b0 9018 	ldrh.w	r9, [r0, #24]
 8029632:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	@ 0x2c
 8029636:	f8d0 00b0 	ldr.w	r0, [r0, #176]	@ 0xb0
 802963a:	f7fd fd67 	bl	802710c <mg_ntohl>
 802963e:	4605      	mov	r5, r0
 8029640:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8029644:	f7fd fd62 	bl	802710c <mg_ntohl>
 8029648:	2300      	movs	r3, #0
 802964a:	9305      	str	r3, [sp, #20]
 802964c:	9304      	str	r3, [sp, #16]
 802964e:	9003      	str	r0, [sp, #12]
 8029650:	9502      	str	r5, [sp, #8]
 8029652:	f8cd a004 	str.w	sl, [sp, #4]
 8029656:	f8cd 9000 	str.w	r9, [sp]
 802965a:	2311      	movs	r3, #17
 802965c:	4642      	mov	r2, r8
 802965e:	4639      	mov	r1, r7
 8029660:	4630      	mov	r0, r6
 8029662:	f7ff fe2d 	bl	80292c0 <tx_tcp>
    settmout(c, MIP_TTYPE_FIN);
 8029666:	2104      	movs	r1, #4
 8029668:	4620      	mov	r0, r4
 802966a:	f7ff ff05 	bl	8029478 <settmout>
}
 802966e:	b006      	add	sp, #24
 8029670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08029674 <mg_connect_resolved>:
void mg_connect_resolved(struct mg_connection *c) {
 8029674:	b530      	push	{r4, r5, lr}
 8029676:	b085      	sub	sp, #20
 8029678:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802967a:	6843      	ldr	r3, [r0, #4]
 802967c:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 802967e:	69c3      	ldr	r3, [r0, #28]
 8029680:	9303      	str	r3, [sp, #12]
  c->is_resolving = 0;
 8029682:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8029686:	f023 0308 	bic.w	r3, r3, #8
 802968a:	f880 30ac 	strb.w	r3, [r0, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 802968e:	f9b5 3068 	ldrsh.w	r3, [r5, #104]	@ 0x68
 8029692:	2b00      	cmp	r3, #0
 8029694:	db03      	blt.n	802969e <mg_connect_resolved+0x2a>
 8029696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 802969a:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 802969e:	68ab      	ldr	r3, [r5, #8]
 80296a0:	60a3      	str	r3, [r4, #8]
  c->loc.port = mg_htons(ifp->eport++);
 80296a2:	f8b5 0068 	ldrh.w	r0, [r5, #104]	@ 0x68
 80296a6:	1c43      	adds	r3, r0, #1
 80296a8:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
 80296ac:	f7fd fdc6 	bl	802723c <mg_ntohs>
 80296b0:	8320      	strh	r0, [r4, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 80296b2:	4b51      	ldr	r3, [pc, #324]	@ (80297f8 <mg_connect_resolved+0x184>)
 80296b4:	681b      	ldr	r3, [r3, #0]
 80296b6:	2b02      	cmp	r3, #2
 80296b8:	dc36      	bgt.n	8029728 <mg_connect_resolved+0xb4>
  mg_call(c, MG_EV_RESOLVE, NULL);
 80296ba:	2200      	movs	r2, #0
 80296bc:	2103      	movs	r1, #3
 80296be:	4620      	mov	r0, r4
 80296c0:	f7fa fd33 	bl	802412a <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 80296c4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80296c8:	f013 0301 	ands.w	r3, r3, #1
 80296cc:	d009      	beq.n	80296e2 <mg_connect_resolved+0x6e>
 80296ce:	9903      	ldr	r1, [sp, #12]
 80296d0:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
 80296d4:	d03b      	beq.n	802974e <mg_connect_resolved+0xda>
 80296d6:	68aa      	ldr	r2, [r5, #8]
 80296d8:	68e8      	ldr	r0, [r5, #12]
 80296da:	ea62 0200 	orn	r2, r2, r0
 80296de:	4291      	cmp	r1, r2
 80296e0:	d035      	beq.n	802974e <mg_connect_resolved+0xda>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 80296e2:	68aa      	ldr	r2, [r5, #8]
 80296e4:	2a00      	cmp	r2, #0
 80296e6:	d046      	beq.n	8029776 <mg_connect_resolved+0x102>
 80296e8:	9903      	ldr	r1, [sp, #12]
 80296ea:	68e8      	ldr	r0, [r5, #12]
 80296ec:	404a      	eors	r2, r1
 80296ee:	4202      	tst	r2, r0
 80296f0:	d141      	bne.n	8029776 <mg_connect_resolved+0x102>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 80296f2:	692a      	ldr	r2, [r5, #16]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 80296f4:	4291      	cmp	r1, r2
 80296f6:	d03e      	beq.n	8029776 <mg_connect_resolved+0x102>
    MG_DEBUG(("%lu ARP lookup...", c->id));
 80296f8:	4b3f      	ldr	r3, [pc, #252]	@ (80297f8 <mg_connect_resolved+0x184>)
 80296fa:	681b      	ldr	r3, [r3, #0]
 80296fc:	2b02      	cmp	r3, #2
 80296fe:	dc2e      	bgt.n	802975e <mg_connect_resolved+0xea>
    arp_ask(ifp, rem_ip);
 8029700:	9903      	ldr	r1, [sp, #12]
 8029702:	4628      	mov	r0, r5
 8029704:	f7fd fe97 	bl	8027436 <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 8029708:	2102      	movs	r1, #2
 802970a:	4620      	mov	r0, r4
 802970c:	f7ff feb4 	bl	8029478 <settmout>
    c->is_arplooking = 1;
 8029710:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8029714:	f043 0310 	orr.w	r3, r3, #16
 8029718:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_connecting = 1;
 802971c:	b2db      	uxtb	r3, r3
 802971e:	f043 0320 	orr.w	r3, r3, #32
 8029722:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
 8029726:	e018      	b.n	802975a <mg_connect_resolved+0xe6>
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8029728:	4b34      	ldr	r3, [pc, #208]	@ (80297fc <mg_connect_resolved+0x188>)
 802972a:	f241 724f 	movw	r2, #5967	@ 0x174f
 802972e:	4934      	ldr	r1, [pc, #208]	@ (8029800 <mg_connect_resolved+0x18c>)
 8029730:	2003      	movs	r0, #3
 8029732:	f7fe f8c5 	bl	80278c0 <mg_log_prefix>
 8029736:	4a33      	ldr	r2, [pc, #204]	@ (8029804 <mg_connect_resolved+0x190>)
 8029738:	f104 031c 	add.w	r3, r4, #28
 802973c:	9301      	str	r3, [sp, #4]
 802973e:	9200      	str	r2, [sp, #0]
 8029740:	f104 0308 	add.w	r3, r4, #8
 8029744:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029746:	4830      	ldr	r0, [pc, #192]	@ (8029808 <mg_connect_resolved+0x194>)
 8029748:	f7fb ff52 	bl	80255f0 <mg_log>
 802974c:	e7b5      	b.n	80296ba <mg_connect_resolved+0x46>
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 802974e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029752:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8029756:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
}
 802975a:	b005      	add	sp, #20
 802975c:	bd30      	pop	{r4, r5, pc}
    MG_DEBUG(("%lu ARP lookup...", c->id));
 802975e:	4b27      	ldr	r3, [pc, #156]	@ (80297fc <mg_connect_resolved+0x188>)
 8029760:	f241 7258 	movw	r2, #5976	@ 0x1758
 8029764:	4926      	ldr	r1, [pc, #152]	@ (8029800 <mg_connect_resolved+0x18c>)
 8029766:	2003      	movs	r0, #3
 8029768:	f7fe f8aa 	bl	80278c0 <mg_log_prefix>
 802976c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802976e:	4827      	ldr	r0, [pc, #156]	@ (802980c <mg_connect_resolved+0x198>)
 8029770:	f7fb ff3e 	bl	80255f0 <mg_log>
 8029774:	e7c4      	b.n	8029700 <mg_connect_resolved+0x8c>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 8029776:	f89d 200c 	ldrb.w	r2, [sp, #12]
 802977a:	f002 02e0 	and.w	r2, r2, #224	@ 0xe0
 802977e:	2ae0      	cmp	r2, #224	@ 0xe0
 8029780:	d00e      	beq.n	80297a0 <mg_connect_resolved+0x12c>
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 8029782:	f8d5 2046 	ldr.w	r2, [r5, #70]	@ 0x46
 8029786:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 802978a:	f8b5 204a 	ldrh.w	r2, [r5, #74]	@ 0x4a
 802978e:	f8a4 20cc 	strh.w	r2, [r4, #204]	@ 0xcc
    if (c->is_udp) {
 8029792:	b31b      	cbz	r3, 80297dc <mg_connect_resolved+0x168>
      mg_call(c, MG_EV_CONNECT, NULL);
 8029794:	2200      	movs	r2, #0
 8029796:	2104      	movs	r1, #4
 8029798:	4620      	mov	r0, r4
 802979a:	f7fa fcc6 	bl	802412a <mg_call>
 802979e:	e7dc      	b.n	802975a <mg_connect_resolved+0xe6>
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 80297a0:	4b1b      	ldr	r3, [pc, #108]	@ (8029810 <mg_connect_resolved+0x19c>)
 80297a2:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 80297a6:	f8ad 3008 	strh.w	r3, [sp, #8]
 80297aa:	0c1b      	lsrs	r3, r3, #16
 80297ac:	f88d 300a 	strb.w	r3, [sp, #10]
    memcpy(s->mac, mcastp, 3);
 80297b0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80297b4:	b2db      	uxtb	r3, r3
 80297b6:	f8a4 20c8 	strh.w	r2, [r4, #200]	@ 0xc8
 80297ba:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 80297be:	f8bd 200d 	ldrh.w	r2, [sp, #13]
 80297c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80297c6:	f8a4 20cb 	strh.w	r2, [r4, #203]	@ 0xcb
 80297ca:	f884 30cd 	strb.w	r3, [r4, #205]	@ 0xcd
    s->mac[3] &= 0x7F;
 80297ce:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 80297d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80297d6:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
 80297da:	e7be      	b.n	802975a <mg_connect_resolved+0xe6>
      send_syn(c);
 80297dc:	4620      	mov	r0, r4
 80297de:	f7ff fdff 	bl	80293e0 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 80297e2:	2103      	movs	r1, #3
 80297e4:	4620      	mov	r0, r4
 80297e6:	f7ff fe47 	bl	8029478 <settmout>
      c->is_connecting = 1;
 80297ea:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80297ee:	f043 0320 	orr.w	r3, r3, #32
 80297f2:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
}
 80297f6:	e7b0      	b.n	802975a <mg_connect_resolved+0xe6>
 80297f8:	2000013c 	.word	0x2000013c
 80297fc:	0803d764 	.word	0x0803d764
 8029800:	0803bba0 	.word	0x0803bba0
 8029804:	08027775 	.word	0x08027775
 8029808:	0803c000 	.word	0x0803c000
 802980c:	0803c010 	.word	0x0803c010
 8029810:	080378c4 	.word	0x080378c4

08029814 <dns_cb>:
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8029814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029816:	b0c9      	sub	sp, #292	@ 0x124
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8029818:	6847      	ldr	r7, [r0, #4]
  if (ev == MG_EV_POLL) {
 802981a:	2902      	cmp	r1, #2
 802981c:	d009      	beq.n	8029832 <dns_cb+0x1e>
 802981e:	4604      	mov	r4, r0
 8029820:	f107 0630 	add.w	r6, r7, #48	@ 0x30
  } else if (ev == MG_EV_READ) {
 8029824:	2907      	cmp	r1, #7
 8029826:	d016      	beq.n	8029856 <dns_cb+0x42>
  } else if (ev == MG_EV_CLOSE) {
 8029828:	2909      	cmp	r1, #9
 802982a:	f000 809a 	beq.w	8029962 <dns_cb+0x14e>
}
 802982e:	b049      	add	sp, #292	@ 0x124
 8029830:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint64_t now = *(uint64_t *) ev_data;
 8029832:	6816      	ldr	r6, [r2, #0]
 8029834:	6855      	ldr	r5, [r2, #4]
    for (d = *head; d != NULL; d = tmp) {
 8029836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8029838:	e000      	b.n	802983c <dns_cb+0x28>
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 802983a:	4623      	mov	r3, r4
    for (d = *head; d != NULL; d = tmp) {
 802983c:	2b00      	cmp	r3, #0
 802983e:	d0f6      	beq.n	802982e <dns_cb+0x1a>
      tmp = d->next;
 8029840:	681c      	ldr	r4, [r3, #0]
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8029842:	6899      	ldr	r1, [r3, #8]
 8029844:	68da      	ldr	r2, [r3, #12]
 8029846:	42b1      	cmp	r1, r6
 8029848:	41aa      	sbcs	r2, r5
 802984a:	d2f6      	bcs.n	802983a <dns_cb+0x26>
 802984c:	494c      	ldr	r1, [pc, #304]	@ (8029980 <dns_cb+0x16c>)
 802984e:	6858      	ldr	r0, [r3, #4]
 8029850:	f7fe f91e 	bl	8027a90 <mg_error>
 8029854:	e7f1      	b.n	802983a <dns_cb+0x26>
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8029856:	aa02      	add	r2, sp, #8
 8029858:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802985a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 802985c:	f7fe f86c 	bl	8027938 <mg_dns_parse>
 8029860:	b9c8      	cbnz	r0, 8029896 <dns_cb+0x82>
      MG_ERROR(("Unexpected DNS response:"));
 8029862:	4b48      	ldr	r3, [pc, #288]	@ (8029984 <dns_cb+0x170>)
 8029864:	681b      	ldr	r3, [r3, #0]
 8029866:	2b00      	cmp	r3, #0
 8029868:	dc0a      	bgt.n	8029880 <dns_cb+0x6c>
      mg_hexdump(c->recv.buf, c->recv.len);
 802986a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802986c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 802986e:	f7fb f80b 	bl	8024888 <mg_hexdump>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8029872:	4b44      	ldr	r3, [pc, #272]	@ (8029984 <dns_cb+0x170>)
 8029874:	681b      	ldr	r3, [r3, #0]
 8029876:	2b00      	cmp	r3, #0
 8029878:	dc68      	bgt.n	802994c <dns_cb+0x138>
    c->recv.len = 0;
 802987a:	2300      	movs	r3, #0
 802987c:	6423      	str	r3, [r4, #64]	@ 0x40
 802987e:	e7d6      	b.n	802982e <dns_cb+0x1a>
      MG_ERROR(("Unexpected DNS response:"));
 8029880:	4b41      	ldr	r3, [pc, #260]	@ (8029988 <dns_cb+0x174>)
 8029882:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 8029886:	4941      	ldr	r1, [pc, #260]	@ (802998c <dns_cb+0x178>)
 8029888:	2001      	movs	r0, #1
 802988a:	f7fe f819 	bl	80278c0 <mg_log_prefix>
 802988e:	4840      	ldr	r0, [pc, #256]	@ (8029990 <dns_cb+0x17c>)
 8029890:	f7fb feae 	bl	80255f0 <mg_log>
 8029894:	e7e9      	b.n	802986a <dns_cb+0x56>
      for (d = *head; d != NULL; d = tmp) {
 8029896:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
    int resolved = 0;
 8029898:	2100      	movs	r1, #0
      for (d = *head; d != NULL; d = tmp) {
 802989a:	e008      	b.n	80298ae <dns_cb+0x9a>
            mg_connect_resolved(d->c);
 802989c:	6868      	ldr	r0, [r5, #4]
 802989e:	f7ff fee9 	bl	8029674 <mg_connect_resolved>
        mg_dns_free(head, d);
 80298a2:	4629      	mov	r1, r5
 80298a4:	4630      	mov	r0, r6
 80298a6:	f7f9 fa01 	bl	8022cac <mg_dns_free>
        resolved = 1;
 80298aa:	2101      	movs	r1, #1
 80298ac:	463d      	mov	r5, r7
      for (d = *head; d != NULL; d = tmp) {
 80298ae:	2d00      	cmp	r5, #0
 80298b0:	d049      	beq.n	8029946 <dns_cb+0x132>
        tmp = d->next;
 80298b2:	682f      	ldr	r7, [r5, #0]
        if (dm.txnid != d->txnid) continue;
 80298b4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80298b8:	8a2b      	ldrh	r3, [r5, #16]
 80298ba:	429a      	cmp	r2, r3
 80298bc:	d1f6      	bne.n	80298ac <dns_cb+0x98>
        if (d->c->is_resolving) {
 80298be:	6868      	ldr	r0, [r5, #4]
 80298c0:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80298c4:	f013 0f08 	tst.w	r3, #8
 80298c8:	d02c      	beq.n	8029924 <dns_cb+0x110>
          if (dm.resolved) {
 80298ca:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80298ce:	b323      	cbz	r3, 802991a <dns_cb+0x106>
            dm.addr.port = d->c->rem.port;  // Save port
 80298d0:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 80298d2:	f8ad 301c 	strh.w	r3, [sp, #28]
            d->c->rem = dm.addr;            // Copy resolved address
 80298d6:	686b      	ldr	r3, [r5, #4]
 80298d8:	f103 0c1c 	add.w	ip, r3, #28
 80298dc:	f10d 0e0c 	add.w	lr, sp, #12
 80298e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80298e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80298e8:	f8de 3000 	ldr.w	r3, [lr]
 80298ec:	f8cc 3000 	str.w	r3, [ip]
            MG_DEBUG(
 80298f0:	4b24      	ldr	r3, [pc, #144]	@ (8029984 <dns_cb+0x170>)
 80298f2:	681b      	ldr	r3, [r3, #0]
 80298f4:	2b02      	cmp	r3, #2
 80298f6:	ddd1      	ble.n	802989c <dns_cb+0x88>
 80298f8:	4b23      	ldr	r3, [pc, #140]	@ (8029988 <dns_cb+0x174>)
 80298fa:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 80298fe:	4923      	ldr	r1, [pc, #140]	@ (802998c <dns_cb+0x178>)
 8029900:	2003      	movs	r0, #3
 8029902:	f7fd ffdd 	bl	80278c0 <mg_log_prefix>
 8029906:	686b      	ldr	r3, [r5, #4]
 8029908:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802990a:	331c      	adds	r3, #28
 802990c:	9300      	str	r3, [sp, #0]
 802990e:	4b21      	ldr	r3, [pc, #132]	@ (8029994 <dns_cb+0x180>)
 8029910:	aa08      	add	r2, sp, #32
 8029912:	4821      	ldr	r0, [pc, #132]	@ (8029998 <dns_cb+0x184>)
 8029914:	f7fb fe6c 	bl	80255f0 <mg_log>
 8029918:	e7c0      	b.n	802989c <dns_cb+0x88>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 802991a:	aa08      	add	r2, sp, #32
 802991c:	491f      	ldr	r1, [pc, #124]	@ (802999c <dns_cb+0x188>)
 802991e:	f7fe f8b7 	bl	8027a90 <mg_error>
 8029922:	e7be      	b.n	80298a2 <dns_cb+0x8e>
          MG_ERROR(("%lu already resolved", d->c->id));
 8029924:	4b17      	ldr	r3, [pc, #92]	@ (8029984 <dns_cb+0x170>)
 8029926:	681b      	ldr	r3, [r3, #0]
 8029928:	2b00      	cmp	r3, #0
 802992a:	ddba      	ble.n	80298a2 <dns_cb+0x8e>
 802992c:	4b16      	ldr	r3, [pc, #88]	@ (8029988 <dns_cb+0x174>)
 802992e:	f240 42da 	movw	r2, #1242	@ 0x4da
 8029932:	4916      	ldr	r1, [pc, #88]	@ (802998c <dns_cb+0x178>)
 8029934:	2001      	movs	r0, #1
 8029936:	f7fd ffc3 	bl	80278c0 <mg_log_prefix>
 802993a:	686b      	ldr	r3, [r5, #4]
 802993c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802993e:	4818      	ldr	r0, [pc, #96]	@ (80299a0 <dns_cb+0x18c>)
 8029940:	f7fb fe56 	bl	80255f0 <mg_log>
 8029944:	e7ad      	b.n	80298a2 <dns_cb+0x8e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8029946:	2900      	cmp	r1, #0
 8029948:	d197      	bne.n	802987a <dns_cb+0x66>
 802994a:	e792      	b.n	8029872 <dns_cb+0x5e>
 802994c:	4b0e      	ldr	r3, [pc, #56]	@ (8029988 <dns_cb+0x174>)
 802994e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8029952:	490e      	ldr	r1, [pc, #56]	@ (802998c <dns_cb+0x178>)
 8029954:	2001      	movs	r0, #1
 8029956:	f7fd ffb3 	bl	80278c0 <mg_log_prefix>
 802995a:	4812      	ldr	r0, [pc, #72]	@ (80299a4 <dns_cb+0x190>)
 802995c:	f7fb fe48 	bl	80255f0 <mg_log>
 8029960:	e78b      	b.n	802987a <dns_cb+0x66>
    for (d = *head; d != NULL; d = tmp) {
 8029962:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8029964:	2c00      	cmp	r4, #0
 8029966:	f43f af62 	beq.w	802982e <dns_cb+0x1a>
      tmp = d->next;
 802996a:	6825      	ldr	r5, [r4, #0]
      mg_error(d->c, "DNS error");
 802996c:	490e      	ldr	r1, [pc, #56]	@ (80299a8 <dns_cb+0x194>)
 802996e:	6860      	ldr	r0, [r4, #4]
 8029970:	f7fe f88e 	bl	8027a90 <mg_error>
      mg_dns_free(head, d);
 8029974:	4621      	mov	r1, r4
 8029976:	4630      	mov	r0, r6
 8029978:	f7f9 f998 	bl	8022cac <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 802997c:	462c      	mov	r4, r5
 802997e:	e7f1      	b.n	8029964 <dns_cb+0x150>
 8029980:	0803c024 	.word	0x0803c024
 8029984:	2000013c 	.word	0x2000013c
 8029988:	0803d838 	.word	0x0803d838
 802998c:	0803bba0 	.word	0x0803bba0
 8029990:	0803c030 	.word	0x0803c030
 8029994:	08027759 	.word	0x08027759
 8029998:	0803c04c 	.word	0x0803c04c
 802999c:	0803c05c 	.word	0x0803c05c
 80299a0:	0803c074 	.word	0x0803c074
 80299a4:	0803c08c 	.word	0x0803c08c
 80299a8:	0803c09c 	.word	0x0803c09c

080299ac <tx_dhcp_discover>:
static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 80299ac:	b510      	push	{r4, lr}
 80299ae:	b086      	sub	sp, #24
 80299b0:	4604      	mov	r4, r0
  uint8_t opts[] = {
 80299b2:	4a12      	ldr	r2, [pc, #72]	@ (80299fc <tx_dhcp_discover+0x50>)
 80299b4:	ab04      	add	r3, sp, #16
 80299b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80299ba:	e883 0003 	stmia.w	r3, {r0, r1}
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 80299be:	2200      	movs	r2, #0
 80299c0:	9202      	str	r2, [sp, #8]
 80299c2:	2108      	movs	r1, #8
 80299c4:	9101      	str	r1, [sp, #4]
 80299c6:	9300      	str	r3, [sp, #0]
 80299c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80299cc:	490c      	ldr	r1, [pc, #48]	@ (8029a00 <tx_dhcp_discover+0x54>)
 80299ce:	4620      	mov	r0, r4
 80299d0:	f7fd fd76 	bl	80274c0 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 80299d4:	4b0b      	ldr	r3, [pc, #44]	@ (8029a04 <tx_dhcp_discover+0x58>)
 80299d6:	681b      	ldr	r3, [r3, #0]
 80299d8:	2b02      	cmp	r3, #2
 80299da:	dc01      	bgt.n	80299e0 <tx_dhcp_discover+0x34>
}
 80299dc:	b006      	add	sp, #24
 80299de:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 80299e0:	4b09      	ldr	r3, [pc, #36]	@ (8029a08 <tx_dhcp_discover+0x5c>)
 80299e2:	f241 4270 	movw	r2, #5232	@ 0x1470
 80299e6:	4909      	ldr	r1, [pc, #36]	@ (8029a0c <tx_dhcp_discover+0x60>)
 80299e8:	2003      	movs	r0, #3
 80299ea:	f7fd ff69 	bl	80278c0 <mg_log_prefix>
 80299ee:	4622      	mov	r2, r4
 80299f0:	4907      	ldr	r1, [pc, #28]	@ (8029a10 <tx_dhcp_discover+0x64>)
 80299f2:	4808      	ldr	r0, [pc, #32]	@ (8029a14 <tx_dhcp_discover+0x68>)
 80299f4:	f7fb fdfc 	bl	80255f0 <mg_log>
}
 80299f8:	e7f0      	b.n	80299dc <tx_dhcp_discover+0x30>
 80299fa:	bf00      	nop
 80299fc:	0803c0c8 	.word	0x0803c0c8
 8029a00:	0803d860 	.word	0x0803d860
 8029a04:	2000013c 	.word	0x2000013c
 8029a08:	0803d734 	.word	0x0803d734
 8029a0c:	0803bba0 	.word	0x0803bba0
 8029a10:	080255c1 	.word	0x080255c1
 8029a14:	0803c0a8 	.word	0x0803c0a8

08029a18 <tx_dhcp_request_re>:
                               uint32_t ip_src, uint32_t ip_dst) {
 8029a18:	b510      	push	{r4, lr}
 8029a1a:	b086      	sub	sp, #24
  uint8_t opts[] = {
 8029a1c:	4c0d      	ldr	r4, [pc, #52]	@ (8029a54 <tx_dhcp_request_re+0x3c>)
 8029a1e:	9405      	str	r4, [sp, #20]
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 8029a20:	2401      	movs	r4, #1
 8029a22:	9402      	str	r4, [sp, #8]
 8029a24:	2404      	movs	r4, #4
 8029a26:	9401      	str	r4, [sp, #4]
 8029a28:	ac05      	add	r4, sp, #20
 8029a2a:	9400      	str	r4, [sp, #0]
 8029a2c:	f7fd fd48 	bl	80274c0 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8029a30:	4b09      	ldr	r3, [pc, #36]	@ (8029a58 <tx_dhcp_request_re+0x40>)
 8029a32:	681b      	ldr	r3, [r3, #0]
 8029a34:	2b02      	cmp	r3, #2
 8029a36:	dc01      	bgt.n	8029a3c <tx_dhcp_request_re+0x24>
}
 8029a38:	b006      	add	sp, #24
 8029a3a:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP req sent"));
 8029a3c:	4b07      	ldr	r3, [pc, #28]	@ (8029a5c <tx_dhcp_request_re+0x44>)
 8029a3e:	f241 4266 	movw	r2, #5222	@ 0x1466
 8029a42:	4907      	ldr	r1, [pc, #28]	@ (8029a60 <tx_dhcp_request_re+0x48>)
 8029a44:	2003      	movs	r0, #3
 8029a46:	f7fd ff3b 	bl	80278c0 <mg_log_prefix>
 8029a4a:	4806      	ldr	r0, [pc, #24]	@ (8029a64 <tx_dhcp_request_re+0x4c>)
 8029a4c:	f7fb fdd0 	bl	80255f0 <mg_log>
}
 8029a50:	e7f2      	b.n	8029a38 <tx_dhcp_request_re+0x20>
 8029a52:	bf00      	nop
 8029a54:	ff030135 	.word	0xff030135
 8029a58:	2000013c 	.word	0x2000013c
 8029a5c:	0803d710 	.word	0x0803d710
 8029a60:	0803bba0 	.word	0x0803bba0
 8029a64:	0803c0d4 	.word	0x0803c0d4

08029a68 <rx_arp>:
static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8029a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029a6a:	b083      	sub	sp, #12
 8029a6c:	4604      	mov	r4, r0
 8029a6e:	460d      	mov	r5, r1
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8029a70:	698e      	ldr	r6, [r1, #24]
 8029a72:	88f7      	ldrh	r7, [r6, #6]
 8029a74:	2001      	movs	r0, #1
 8029a76:	f7fd fbe1 	bl	802723c <mg_ntohs>
 8029a7a:	4287      	cmp	r7, r0
 8029a7c:	d006      	beq.n	8029a8c <rx_arp+0x24>
  } else if (pkt->arp->op == mg_htons(2)) {
 8029a7e:	2002      	movs	r0, #2
 8029a80:	f7fd fbdc 	bl	802723c <mg_ntohs>
 8029a84:	4287      	cmp	r7, r0
 8029a86:	d05a      	beq.n	8029b3e <rx_arp+0xd6>
}
 8029a88:	b003      	add	sp, #12
 8029a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8029a8c:	69b2      	ldr	r2, [r6, #24]
 8029a8e:	68a3      	ldr	r3, [r4, #8]
 8029a90:	429a      	cmp	r2, r3
 8029a92:	d1f4      	bne.n	8029a7e <rx_arp+0x16>
    struct eth *eth = (struct eth *) ifp->tx.buf;
 8029a94:	6966      	ldr	r6, [r4, #20]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 8029a96:	692b      	ldr	r3, [r5, #16]
 8029a98:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8029a9c:	6032      	str	r2, [r6, #0]
 8029a9e:	895b      	ldrh	r3, [r3, #10]
 8029aa0:	80b3      	strh	r3, [r6, #4]
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8029aa2:	6823      	ldr	r3, [r4, #0]
 8029aa4:	f8c6 3006 	str.w	r3, [r6, #6]
 8029aa8:	88a3      	ldrh	r3, [r4, #4]
 8029aaa:	8173      	strh	r3, [r6, #10]
    eth->type = mg_htons(0x806);
 8029aac:	f640 0006 	movw	r0, #2054	@ 0x806
 8029ab0:	f7fd fbc4 	bl	802723c <mg_ntohs>
 8029ab4:	81b0      	strh	r0, [r6, #12]
    *arp = *pkt->arp;
 8029ab6:	69ab      	ldr	r3, [r5, #24]
 8029ab8:	6818      	ldr	r0, [r3, #0]
 8029aba:	6859      	ldr	r1, [r3, #4]
 8029abc:	689a      	ldr	r2, [r3, #8]
 8029abe:	68df      	ldr	r7, [r3, #12]
 8029ac0:	f8c6 000e 	str.w	r0, [r6, #14]
 8029ac4:	f8c6 1012 	str.w	r1, [r6, #18]
 8029ac8:	f8c6 2016 	str.w	r2, [r6, #22]
 8029acc:	f8c6 701a 	str.w	r7, [r6, #26]
 8029ad0:	6918      	ldr	r0, [r3, #16]
 8029ad2:	6959      	ldr	r1, [r3, #20]
 8029ad4:	699a      	ldr	r2, [r3, #24]
 8029ad6:	f8c6 001e 	str.w	r0, [r6, #30]
 8029ada:	f8c6 1022 	str.w	r1, [r6, #34]	@ 0x22
 8029ade:	f8c6 2026 	str.w	r2, [r6, #38]	@ 0x26
    arp->op = mg_htons(2);
 8029ae2:	2002      	movs	r0, #2
 8029ae4:	f7fd fbaa 	bl	802723c <mg_ntohs>
 8029ae8:	82b0      	strh	r0, [r6, #20]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 8029aea:	69ab      	ldr	r3, [r5, #24]
 8029aec:	689a      	ldr	r2, [r3, #8]
 8029aee:	6232      	str	r2, [r6, #32]
 8029af0:	899b      	ldrh	r3, [r3, #12]
 8029af2:	84b3      	strh	r3, [r6, #36]	@ 0x24
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 8029af4:	6823      	ldr	r3, [r4, #0]
 8029af6:	f8c6 3016 	str.w	r3, [r6, #22]
 8029afa:	88a3      	ldrh	r3, [r4, #4]
 8029afc:	8373      	strh	r3, [r6, #26]
    arp->tpa = pkt->arp->spa;
 8029afe:	69ab      	ldr	r3, [r5, #24]
 8029b00:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8029b04:	f8c6 3026 	str.w	r3, [r6, #38]	@ 0x26
    arp->spa = ifp->ip;
 8029b08:	68a3      	ldr	r3, [r4, #8]
 8029b0a:	61f3      	str	r3, [r6, #28]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 8029b0c:	4b32      	ldr	r3, [pc, #200]	@ (8029bd8 <rx_arp+0x170>)
 8029b0e:	681b      	ldr	r3, [r3, #0]
 8029b10:	2b02      	cmp	r3, #2
 8029b12:	dc04      	bgt.n	8029b1e <rx_arp+0xb6>
    ether_output(ifp, PDIFF(eth, arp + 1));
 8029b14:	212a      	movs	r1, #42	@ 0x2a
 8029b16:	4620      	mov	r0, r4
 8029b18:	f7f8 feb9 	bl	802288e <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8029b1c:	e7b4      	b.n	8029a88 <rx_arp+0x20>
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 8029b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8029bdc <rx_arp+0x174>)
 8029b20:	f241 4292 	movw	r2, #5266	@ 0x1492
 8029b24:	492e      	ldr	r1, [pc, #184]	@ (8029be0 <rx_arp+0x178>)
 8029b26:	2003      	movs	r0, #3
 8029b28:	f7fd feca 	bl	80278c0 <mg_log_prefix>
 8029b2c:	9400      	str	r4, [sp, #0]
 8029b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8029be4 <rx_arp+0x17c>)
 8029b30:	f106 0226 	add.w	r2, r6, #38	@ 0x26
 8029b34:	492c      	ldr	r1, [pc, #176]	@ (8029be8 <rx_arp+0x180>)
 8029b36:	482d      	ldr	r0, [pc, #180]	@ (8029bec <rx_arp+0x184>)
 8029b38:	f7fb fd5a 	bl	80255f0 <mg_log>
 8029b3c:	e7ea      	b.n	8029b14 <rx_arp+0xac>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 8029b3e:	2206      	movs	r2, #6
 8029b40:	4621      	mov	r1, r4
 8029b42:	f106 0012 	add.w	r0, r6, #18
 8029b46:	f002 fe31 	bl	802c7ac <memcmp>
 8029b4a:	2800      	cmp	r0, #0
 8029b4c:	d19c      	bne.n	8029a88 <rx_arp+0x20>
    if (pkt->arp->spa == ifp->gw) {
 8029b4e:	f8d6 200e 	ldr.w	r2, [r6, #14]
 8029b52:	6923      	ldr	r3, [r4, #16]
 8029b54:	429a      	cmp	r2, r3
 8029b56:	d026      	beq.n	8029ba6 <rx_arp+0x13e>
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8029b58:	2200      	movs	r2, #0
 8029b5a:	4629      	mov	r1, r5
 8029b5c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8029b5e:	f7fa f978 	bl	8023e52 <getpeer>
      if (c != NULL && c->is_arplooking) {
 8029b62:	4604      	mov	r4, r0
 8029b64:	2800      	cmp	r0, #0
 8029b66:	d08f      	beq.n	8029a88 <rx_arp+0x20>
 8029b68:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8029b6c:	f013 0f10 	tst.w	r3, #16
 8029b70:	d08a      	beq.n	8029a88 <rx_arp+0x20>
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 8029b72:	f100 05c8 	add.w	r5, r0, #200	@ 0xc8
 8029b76:	68b3      	ldr	r3, [r6, #8]
 8029b78:	f8c0 30c8 	str.w	r3, [r0, #200]	@ 0xc8
 8029b7c:	89b3      	ldrh	r3, [r6, #12]
 8029b7e:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8029b82:	4b15      	ldr	r3, [pc, #84]	@ (8029bd8 <rx_arp+0x170>)
 8029b84:	681b      	ldr	r3, [r3, #0]
 8029b86:	2b02      	cmp	r3, #2
 8029b88:	dc14      	bgt.n	8029bb4 <rx_arp+0x14c>
        c->is_arplooking = 0;
 8029b8a:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8029b8e:	f023 0310 	bic.w	r3, r3, #16
 8029b92:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
        send_syn(c);
 8029b96:	4620      	mov	r0, r4
 8029b98:	f7ff fc22 	bl	80293e0 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 8029b9c:	2103      	movs	r1, #3
 8029b9e:	4620      	mov	r0, r4
 8029ba0:	f7ff fc6a 	bl	8029478 <settmout>
 8029ba4:	e770      	b.n	8029a88 <rx_arp+0x20>
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 8029ba6:	68b3      	ldr	r3, [r6, #8]
 8029ba8:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 8029bac:	89b3      	ldrh	r3, [r6, #12]
 8029bae:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8029bb2:	e769      	b.n	8029a88 <rx_arp+0x20>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8029bb4:	4b09      	ldr	r3, [pc, #36]	@ (8029bdc <rx_arp+0x174>)
 8029bb6:	f241 429f 	movw	r2, #5279	@ 0x149f
 8029bba:	4909      	ldr	r1, [pc, #36]	@ (8029be0 <rx_arp+0x178>)
 8029bbc:	2003      	movs	r0, #3
 8029bbe:	f7fd fe7f 	bl	80278c0 <mg_log_prefix>
 8029bc2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029bc4:	9501      	str	r5, [sp, #4]
 8029bc6:	4b07      	ldr	r3, [pc, #28]	@ (8029be4 <rx_arp+0x17c>)
 8029bc8:	9300      	str	r3, [sp, #0]
 8029bca:	f104 031c 	add.w	r3, r4, #28
 8029bce:	4a06      	ldr	r2, [pc, #24]	@ (8029be8 <rx_arp+0x180>)
 8029bd0:	4807      	ldr	r0, [pc, #28]	@ (8029bf0 <rx_arp+0x188>)
 8029bd2:	f7fb fd0d 	bl	80255f0 <mg_log>
 8029bd6:	e7d8      	b.n	8029b8a <rx_arp+0x122>
 8029bd8:	2000013c 	.word	0x2000013c
 8029bdc:	0803d6fc 	.word	0x0803d6fc
 8029be0:	0803bba0 	.word	0x0803bba0
 8029be4:	080255c1 	.word	0x080255c1
 8029be8:	080255b1 	.word	0x080255b1
 8029bec:	0803c0e4 	.word	0x0803c0e4
 8029bf0:	0803c0fc 	.word	0x0803c0fc

08029bf4 <tx_dhcp_request_sel>:
                                uint32_t ip_srv) {
 8029bf4:	b570      	push	{r4, r5, r6, lr}
 8029bf6:	b08c      	sub	sp, #48	@ 0x30
 8029bf8:	4686      	mov	lr, r0
 8029bfa:	460d      	mov	r5, r1
 8029bfc:	4616      	mov	r6, r2
  uint8_t opts[] = {
 8029bfe:	f10d 0c14 	add.w	ip, sp, #20
 8029c02:	4c22      	ldr	r4, [pc, #136]	@ (8029c8c <tx_dhcp_request_sel+0x98>)
 8029c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8029c06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8029c0a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8029c0e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8029c12:	f82c 2b02 	strh.w	r2, [ip], #2
 8029c16:	0c12      	lsrs	r2, r2, #16
 8029c18:	f88c 2000 	strb.w	r2, [ip]
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 8029c1c:	f8cd 601e 	str.w	r6, [sp, #30]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 8029c20:	9509      	str	r5, [sp, #36]	@ 0x24
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 8029c22:	f89e 301f 	ldrb.w	r3, [lr, #31]
 8029c26:	b323      	cbz	r3, 8029c72 <tx_dhcp_request_sel+0x7e>
 8029c28:	2306      	movs	r3, #6
 8029c2a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8029c2e:	2301      	movs	r3, #1
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 8029c30:	f89e 2020 	ldrb.w	r2, [lr, #32]
 8029c34:	b132      	cbz	r2, 8029c44 <tx_dhcp_request_sel+0x50>
 8029c36:	1c5a      	adds	r2, r3, #1
 8029c38:	3348      	adds	r3, #72	@ 0x48
 8029c3a:	446b      	add	r3, sp
 8029c3c:	212a      	movs	r1, #42	@ 0x2a
 8029c3e:	f803 1c1c 	strb.w	r1, [r3, #-28]
 8029c42:	b2d3      	uxtb	r3, r2
  opts[21] += addopts;
 8029c44:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8029c48:	441a      	add	r2, r3
 8029c4a:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 8029c4e:	2200      	movs	r2, #0
 8029c50:	9202      	str	r2, [sp, #8]
 8029c52:	3319      	adds	r3, #25
 8029c54:	9301      	str	r3, [sp, #4]
 8029c56:	ab05      	add	r3, sp, #20
 8029c58:	9300      	str	r3, [sp, #0]
 8029c5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029c5e:	490c      	ldr	r1, [pc, #48]	@ (8029c90 <tx_dhcp_request_sel+0x9c>)
 8029c60:	4670      	mov	r0, lr
 8029c62:	f7fd fc2d 	bl	80274c0 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8029c66:	4b0b      	ldr	r3, [pc, #44]	@ (8029c94 <tx_dhcp_request_sel+0xa0>)
 8029c68:	681b      	ldr	r3, [r3, #0]
 8029c6a:	2b02      	cmp	r3, #2
 8029c6c:	dc03      	bgt.n	8029c76 <tx_dhcp_request_sel+0x82>
}
 8029c6e:	b00c      	add	sp, #48	@ 0x30
 8029c70:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t addopts = 0;
 8029c72:	2300      	movs	r3, #0
 8029c74:	e7dc      	b.n	8029c30 <tx_dhcp_request_sel+0x3c>
  MG_DEBUG(("DHCP req sent"));
 8029c76:	4b08      	ldr	r3, [pc, #32]	@ (8029c98 <tx_dhcp_request_sel+0xa4>)
 8029c78:	f241 425b 	movw	r2, #5211	@ 0x145b
 8029c7c:	4907      	ldr	r1, [pc, #28]	@ (8029c9c <tx_dhcp_request_sel+0xa8>)
 8029c7e:	2003      	movs	r0, #3
 8029c80:	f7fd fe1e 	bl	80278c0 <mg_log_prefix>
 8029c84:	4806      	ldr	r0, [pc, #24]	@ (8029ca0 <tx_dhcp_request_sel+0xac>)
 8029c86:	f7fb fcb3 	bl	80255f0 <mg_log>
}
 8029c8a:	e7f0      	b.n	8029c6e <tx_dhcp_request_sel+0x7a>
 8029c8c:	08037af0 	.word	0x08037af0
 8029c90:	0803d860 	.word	0x0803d860
 8029c94:	2000013c 	.word	0x2000013c
 8029c98:	0803d6d0 	.word	0x0803d6d0
 8029c9c:	0803bba0 	.word	0x0803bba0
 8029ca0:	0803c0d4 	.word	0x0803c0d4

08029ca4 <read_conn>:
static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 8029ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029ca8:	b089      	sub	sp, #36	@ 0x24
 8029caa:	4604      	mov	r4, r0
 8029cac:	460d      	mov	r5, r1
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 8029cae:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8029cb2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8029cb6:	d049      	beq.n	8029d4c <read_conn+0xa8>
 8029cb8:	f100 0968 	add.w	r9, r0, #104	@ 0x68
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 8029cbc:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 8029cbe:	6878      	ldr	r0, [r7, #4]
 8029cc0:	f7fd fa24 	bl	802710c <mg_ntohl>
 8029cc4:	4680      	mov	r8, r0
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8029cc6:	69e6      	ldr	r6, [r4, #28]
  if (pkt->tcp->flags & TH_FIN) {
 8029cc8:	7b7b      	ldrb	r3, [r7, #13]
 8029cca:	f013 0f01 	tst.w	r3, #1
 8029cce:	d053      	beq.n	8029d78 <read_conn+0xd4>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 8029cd0:	68eb      	ldr	r3, [r5, #12]
 8029cd2:	4403      	add	r3, r0
 8029cd4:	3301      	adds	r3, #1
 8029cd6:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 8029cda:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029cde:	f013 0f10 	tst.w	r3, #16
 8029ce2:	d003      	beq.n	8029cec <read_conn+0x48>
 8029ce4:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8029ce8:	2b04      	cmp	r3, #4
 8029cea:	d032      	beq.n	8029d52 <read_conn+0xae>
      c->is_draining = 1;
 8029cec:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029cf0:	f043 0310 	orr.w	r3, r3, #16
 8029cf4:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 8029cf8:	2104      	movs	r1, #4
 8029cfa:	4620      	mov	r0, r4
 8029cfc:	f7ff fbbc 	bl	8029478 <settmout>
      flags |= TH_FIN;
 8029d00:	f04f 0b11 	mov.w	fp, #17
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 8029d04:	6863      	ldr	r3, [r4, #4]
 8029d06:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8029d08:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 8029d0c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8029d10:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8029d14:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8029d18:	f7fd f9f8 	bl	802710c <mg_ntohl>
 8029d1c:	4605      	mov	r5, r0
 8029d1e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8029d22:	f7fd f9f3 	bl	802710c <mg_ntohl>
 8029d26:	2300      	movs	r3, #0
 8029d28:	9305      	str	r3, [sp, #20]
 8029d2a:	4b9b      	ldr	r3, [pc, #620]	@ (8029f98 <read_conn+0x2f4>)
 8029d2c:	9304      	str	r3, [sp, #16]
 8029d2e:	9003      	str	r0, [sp, #12]
 8029d30:	9502      	str	r5, [sp, #8]
 8029d32:	f8cd a004 	str.w	sl, [sp, #4]
 8029d36:	f8cd 9000 	str.w	r9, [sp]
 8029d3a:	465b      	mov	r3, fp
 8029d3c:	4632      	mov	r2, r6
 8029d3e:	4641      	mov	r1, r8
 8029d40:	4638      	mov	r0, r7
 8029d42:	f7ff fabd 	bl	80292c0 <tx_tcp>
}
 8029d46:	b009      	add	sp, #36	@ 0x24
 8029d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 8029d4c:	f100 0938 	add.w	r9, r0, #56	@ 0x38
 8029d50:	e7b4      	b.n	8029cbc <read_conn+0x18>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 8029d52:	f8d4 70b0 	ldr.w	r7, [r4, #176]	@ 0xb0
 8029d56:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8029d58:	6898      	ldr	r0, [r3, #8]
 8029d5a:	f7fd f9d7 	bl	802710c <mg_ntohl>
 8029d5e:	4287      	cmp	r7, r0
 8029d60:	d004      	beq.n	8029d6c <read_conn+0xc8>
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 8029d62:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8029d66:	f04f 0b10 	mov.w	fp, #16
 8029d6a:	e7cb      	b.n	8029d04 <read_conn+0x60>
        s->seq++;                               // Yes. Increment our SEQ
 8029d6c:	3701      	adds	r7, #1
 8029d6e:	f8c4 70b0 	str.w	r7, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8029d72:	f04f 0b10 	mov.w	fp, #16
 8029d76:	e7c5      	b.n	8029d04 <read_conn+0x60>
  } else if (pkt->pay.len == 0) {
 8029d78:	68eb      	ldr	r3, [r5, #12]
 8029d7a:	2b00      	cmp	r3, #0
 8029d7c:	d0e3      	beq.n	8029d46 <read_conn+0xa2>
  } else if (seq != s->ack) {
 8029d7e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8029d82:	4282      	cmp	r2, r0
 8029d84:	d046      	beq.n	8029e14 <read_conn+0x170>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8029d86:	181d      	adds	r5, r3, r0
    if (s->ack == ack) {
 8029d88:	42aa      	cmp	r2, r5
 8029d8a:	d025      	beq.n	8029dd8 <read_conn+0x134>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8029d8c:	4b83      	ldr	r3, [pc, #524]	@ (8029f9c <read_conn+0x2f8>)
 8029d8e:	681b      	ldr	r3, [r3, #0]
 8029d90:	2b03      	cmp	r3, #3
 8029d92:	dc30      	bgt.n	8029df6 <read_conn+0x152>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8029d94:	6863      	ldr	r3, [r4, #4]
 8029d96:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8029d98:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 8029d9c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8029da0:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8029da4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8029da8:	f7fd f9b0 	bl	802710c <mg_ntohl>
 8029dac:	4605      	mov	r5, r0
 8029dae:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8029db2:	f7fd f9ab 	bl	802710c <mg_ntohl>
 8029db6:	2300      	movs	r3, #0
 8029db8:	9305      	str	r3, [sp, #20]
 8029dba:	4b77      	ldr	r3, [pc, #476]	@ (8029f98 <read_conn+0x2f4>)
 8029dbc:	9304      	str	r3, [sp, #16]
 8029dbe:	9003      	str	r0, [sp, #12]
 8029dc0:	9502      	str	r5, [sp, #8]
 8029dc2:	f8cd a004 	str.w	sl, [sp, #4]
 8029dc6:	f8cd 9000 	str.w	r9, [sp]
 8029dca:	2310      	movs	r3, #16
 8029dcc:	4632      	mov	r2, r6
 8029dce:	4641      	mov	r1, r8
 8029dd0:	4638      	mov	r0, r7
 8029dd2:	f7ff fa75 	bl	80292c0 <tx_tcp>
 8029dd6:	e7b6      	b.n	8029d46 <read_conn+0xa2>
      MG_VERBOSE(("ignoring duplicate pkt"));
 8029dd8:	4b70      	ldr	r3, [pc, #448]	@ (8029f9c <read_conn+0x2f8>)
 8029dda:	681b      	ldr	r3, [r3, #0]
 8029ddc:	2b03      	cmp	r3, #3
 8029dde:	ddb2      	ble.n	8029d46 <read_conn+0xa2>
 8029de0:	4b6f      	ldr	r3, [pc, #444]	@ (8029fa0 <read_conn+0x2fc>)
 8029de2:	f241 52da 	movw	r2, #5594	@ 0x15da
 8029de6:	496f      	ldr	r1, [pc, #444]	@ (8029fa4 <read_conn+0x300>)
 8029de8:	2004      	movs	r0, #4
 8029dea:	f7fd fd69 	bl	80278c0 <mg_log_prefix>
 8029dee:	486e      	ldr	r0, [pc, #440]	@ (8029fa8 <read_conn+0x304>)
 8029df0:	f7fb fbfe 	bl	80255f0 <mg_log>
 8029df4:	e7a7      	b.n	8029d46 <read_conn+0xa2>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8029df6:	4b6a      	ldr	r3, [pc, #424]	@ (8029fa0 <read_conn+0x2fc>)
 8029df8:	f241 52dc 	movw	r2, #5596	@ 0x15dc
 8029dfc:	4969      	ldr	r1, [pc, #420]	@ (8029fa4 <read_conn+0x300>)
 8029dfe:	2004      	movs	r0, #4
 8029e00:	f7fd fd5e 	bl	80278c0 <mg_log_prefix>
 8029e04:	462b      	mov	r3, r5
 8029e06:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8029e0a:	4641      	mov	r1, r8
 8029e0c:	4867      	ldr	r0, [pc, #412]	@ (8029fac <read_conn+0x308>)
 8029e0e:	f7fb fbef 	bl	80255f0 <mg_log>
 8029e12:	e7bf      	b.n	8029d94 <read_conn+0xf0>
  } else if (io->size - io->len < pkt->pay.len &&
 8029e14:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8029e18:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8029e1c:	1a52      	subs	r2, r2, r1
 8029e1e:	4293      	cmp	r3, r2
 8029e20:	d905      	bls.n	8029e2e <read_conn+0x18a>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8029e22:	4419      	add	r1, r3
 8029e24:	4648      	mov	r0, r9
 8029e26:	f7fe fb85 	bl	8028534 <mg_iobuf_resize>
  } else if (io->size - io->len < pkt->pay.len &&
 8029e2a:	2800      	cmp	r0, #0
 8029e2c:	d05c      	beq.n	8029ee8 <read_conn+0x244>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 8029e2e:	f8d9 0000 	ldr.w	r0, [r9]
 8029e32:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8029e36:	68ea      	ldr	r2, [r5, #12]
 8029e38:	68a9      	ldr	r1, [r5, #8]
 8029e3a:	4418      	add	r0, r3
 8029e3c:	f004 fa5c 	bl	802e2f8 <memcpy>
    io->len += pkt->pay.len;
 8029e40:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8029e44:	68ea      	ldr	r2, [r5, #12]
 8029e46:	4413      	add	r3, r2
 8029e48:	f8c9 3008 	str.w	r3, [r9, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 8029e4c:	4b53      	ldr	r3, [pc, #332]	@ (8029f9c <read_conn+0x2f8>)
 8029e4e:	681b      	ldr	r3, [r3, #0]
 8029e50:	2b03      	cmp	r3, #3
 8029e52:	dc4e      	bgt.n	8029ef2 <read_conn+0x24e>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8029e54:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8029e56:	6858      	ldr	r0, [r3, #4]
 8029e58:	f7fd f958 	bl	802710c <mg_ntohl>
 8029e5c:	68eb      	ldr	r3, [r5, #12]
 8029e5e:	4418      	add	r0, r3
 8029e60:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    s->unacked += pkt->pay.len;
 8029e64:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8029e68:	68ea      	ldr	r2, [r5, #12]
 8029e6a:	4413      	add	r3, r2
 8029e6c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 8029e70:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8029e74:	4293      	cmp	r3, r2
 8029e76:	d95e      	bls.n	8029f36 <read_conn+0x292>
 8029e78:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 8029e7c:	4298      	cmp	r0, r3
 8029e7e:	d05a      	beq.n	8029f36 <read_conn+0x292>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 8029e80:	4b46      	ldr	r3, [pc, #280]	@ (8029f9c <read_conn+0x2f8>)
 8029e82:	681b      	ldr	r3, [r3, #0]
 8029e84:	2b03      	cmp	r3, #3
 8029e86:	dc48      	bgt.n	8029f1a <read_conn+0x276>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8029e88:	6863      	ldr	r3, [r4, #4]
 8029e8a:	f8d3 903c 	ldr.w	r9, [r3, #60]	@ 0x3c
 8029e8e:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 8029e92:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8029e96:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8029e9a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8029e9e:	f7fd f935 	bl	802710c <mg_ntohl>
 8029ea2:	9007      	str	r0, [sp, #28]
 8029ea4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8029ea8:	f7fd f930 	bl	802710c <mg_ntohl>
 8029eac:	2700      	movs	r7, #0
 8029eae:	9705      	str	r7, [sp, #20]
 8029eb0:	9704      	str	r7, [sp, #16]
 8029eb2:	9003      	str	r0, [sp, #12]
 8029eb4:	9b07      	ldr	r3, [sp, #28]
 8029eb6:	9302      	str	r3, [sp, #8]
 8029eb8:	f8cd b004 	str.w	fp, [sp, #4]
 8029ebc:	f8cd a000 	str.w	sl, [sp]
 8029ec0:	2310      	movs	r3, #16
 8029ec2:	4632      	mov	r2, r6
 8029ec4:	4641      	mov	r1, r8
 8029ec6:	4648      	mov	r0, r9
 8029ec8:	f7ff f9fa 	bl	80292c0 <tx_tcp>
      s->unacked = 0;
 8029ecc:	f8c4 70c4 	str.w	r7, [r4, #196]	@ 0xc4
      s->acked = s->ack;
 8029ed0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8029ed4:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 8029ed8:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8029edc:	b37b      	cbz	r3, 8029f3e <read_conn+0x29a>
 8029ede:	4639      	mov	r1, r7
 8029ee0:	4620      	mov	r0, r4
 8029ee2:	f7ff fac9 	bl	8029478 <settmout>
 8029ee6:	e02a      	b.n	8029f3e <read_conn+0x29a>
    mg_error(c, "oom");
 8029ee8:	4931      	ldr	r1, [pc, #196]	@ (8029fb0 <read_conn+0x30c>)
 8029eea:	4620      	mov	r0, r4
 8029eec:	f7fd fdd0 	bl	8027a90 <mg_error>
 8029ef0:	e729      	b.n	8029d46 <read_conn+0xa2>
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 8029ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8029fa0 <read_conn+0x2fc>)
 8029ef4:	f241 52ed 	movw	r2, #5613	@ 0x15ed
 8029ef8:	492a      	ldr	r1, [pc, #168]	@ (8029fa4 <read_conn+0x300>)
 8029efa:	2004      	movs	r0, #4
 8029efc:	f7fd fce0 	bl	80278c0 <mg_log_prefix>
 8029f00:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8029f02:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8029f04:	6858      	ldr	r0, [r3, #4]
 8029f06:	f7fd f901 	bl	802710c <mg_ntohl>
 8029f0a:	4602      	mov	r2, r0
 8029f0c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8029f10:	4639      	mov	r1, r7
 8029f12:	4828      	ldr	r0, [pc, #160]	@ (8029fb4 <read_conn+0x310>)
 8029f14:	f7fb fb6c 	bl	80255f0 <mg_log>
 8029f18:	e79c      	b.n	8029e54 <read_conn+0x1b0>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 8029f1a:	4b21      	ldr	r3, [pc, #132]	@ (8029fa0 <read_conn+0x2fc>)
 8029f1c:	f241 52f4 	movw	r2, #5620	@ 0x15f4
 8029f20:	4920      	ldr	r1, [pc, #128]	@ (8029fa4 <read_conn+0x300>)
 8029f22:	2004      	movs	r0, #4
 8029f24:	f7fd fccc 	bl	80278c0 <mg_log_prefix>
 8029f28:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
 8029f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029f2e:	4822      	ldr	r0, [pc, #136]	@ (8029fb8 <read_conn+0x314>)
 8029f30:	f7fb fb5e 	bl	80255f0 <mg_log>
 8029f34:	e7a8      	b.n	8029e88 <read_conn+0x1e4>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8029f36:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8029f3a:	2b01      	cmp	r3, #1
 8029f3c:	d11b      	bne.n	8029f76 <read_conn+0x2d2>
    if (c->is_tls && c->is_tls_hs) {
 8029f3e:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8029f42:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8029f46:	2ac0      	cmp	r2, #192	@ 0xc0
 8029f48:	f43f aefd 	beq.w	8029d46 <read_conn+0xa2>
    } else if (c->is_tls) {
 8029f4c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8029f50:	d01b      	beq.n	8029f8a <read_conn+0x2e6>
      io = &c->recv;
 8029f52:	f104 0638 	add.w	r6, r4, #56	@ 0x38
      if (io->size - io->len < pkt->pay.len &&
 8029f56:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8029f58:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8029f5a:	1a5b      	subs	r3, r3, r1
 8029f5c:	68ea      	ldr	r2, [r5, #12]
 8029f5e:	4293      	cmp	r3, r2
 8029f60:	d204      	bcs.n	8029f6c <read_conn+0x2c8>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8029f62:	4411      	add	r1, r2
 8029f64:	4630      	mov	r0, r6
 8029f66:	f7fe fae5 	bl	8028534 <mg_iobuf_resize>
      if (io->size - io->len < pkt->pay.len &&
 8029f6a:	b148      	cbz	r0, 8029f80 <read_conn+0x2dc>
        handle_tls_recv(c, io);
 8029f6c:	4631      	mov	r1, r6
 8029f6e:	4620      	mov	r0, r4
 8029f70:	f7fd fdc6 	bl	8027b00 <handle_tls_recv>
 8029f74:	e6e7      	b.n	8029d46 <read_conn+0xa2>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8029f76:	2101      	movs	r1, #1
 8029f78:	4620      	mov	r0, r4
 8029f7a:	f7ff fa7d 	bl	8029478 <settmout>
 8029f7e:	e7de      	b.n	8029f3e <read_conn+0x29a>
        mg_error(c, "oom");
 8029f80:	490b      	ldr	r1, [pc, #44]	@ (8029fb0 <read_conn+0x30c>)
 8029f82:	4620      	mov	r0, r4
 8029f84:	f7fd fd84 	bl	8027a90 <mg_error>
 8029f88:	e6dd      	b.n	8029d46 <read_conn+0xa2>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 8029f8a:	f105 020c 	add.w	r2, r5, #12
 8029f8e:	2107      	movs	r1, #7
 8029f90:	4620      	mov	r0, r4
 8029f92:	f7fa f8ca 	bl	802412a <mg_call>
}
 8029f96:	e6d6      	b.n	8029d46 <read_conn+0xa2>
 8029f98:	08038678 	.word	0x08038678
 8029f9c:	2000013c 	.word	0x2000013c
 8029fa0:	0803d6c4 	.word	0x0803d6c4
 8029fa4:	0803bba0 	.word	0x0803bba0
 8029fa8:	0803c118 	.word	0x0803c118
 8029fac:	0803c130 	.word	0x0803c130
 8029fb0:	0803bea0 	.word	0x0803bea0
 8029fb4:	0803c148 	.word	0x0803c148
 8029fb8:	0803c15c 	.word	0x0803c15c

08029fbc <accept_conn>:
                                         struct pkt *pkt) {
 8029fbc:	b570      	push	{r4, r5, r6, lr}
 8029fbe:	4605      	mov	r5, r0
 8029fc0:	460e      	mov	r6, r1
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 8029fc2:	6840      	ldr	r0, [r0, #4]
 8029fc4:	f7fa fe28 	bl	8024c18 <mg_alloc_conn>
  if (c == NULL) {
 8029fc8:	4604      	mov	r4, r0
 8029fca:	2800      	cmp	r0, #0
 8029fcc:	d058      	beq.n	802a080 <accept_conn+0xc4>
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 8029fce:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8029fd0:	6898      	ldr	r0, [r3, #8]
 8029fd2:	f7fd f89b 	bl	802710c <mg_ntohl>
 8029fd6:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
 8029fda:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8029fdc:	6858      	ldr	r0, [r3, #4]
 8029fde:	f7fd f895 	bl	802710c <mg_ntohl>
 8029fe2:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8029fe6:	6933      	ldr	r3, [r6, #16]
 8029fe8:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8029fec:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 8029ff0:	895b      	ldrh	r3, [r3, #10]
 8029ff2:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
  settmout(c, MIP_TTYPE_KEEPALIVE);
 8029ff6:	2100      	movs	r1, #0
 8029ff8:	4620      	mov	r0, r4
 8029ffa:	f7ff fa3d 	bl	8029478 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8029ffe:	69f3      	ldr	r3, [r6, #28]
 802a000:	68db      	ldr	r3, [r3, #12]
 802a002:	61e3      	str	r3, [r4, #28]
  c->rem.port = pkt->tcp->sport;
 802a004:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 802a006:	881b      	ldrh	r3, [r3, #0]
 802a008:	85a3      	strh	r3, [r4, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 802a00a:	4b2c      	ldr	r3, [pc, #176]	@ (802a0bc <accept_conn+0x100>)
 802a00c:	681b      	ldr	r3, [r3, #0]
 802a00e:	2b02      	cmp	r3, #2
 802a010:	dc45      	bgt.n	802a09e <accept_conn+0xe2>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 802a012:	686b      	ldr	r3, [r5, #4]
 802a014:	681b      	ldr	r3, [r3, #0]
 802a016:	6023      	str	r3, [r4, #0]
 802a018:	686b      	ldr	r3, [r5, #4]
 802a01a:	601c      	str	r4, [r3, #0]
  c->is_accepted = 1;
 802a01c:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802a020:	f043 0304 	orr.w	r3, r3, #4
 802a024:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 802a028:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 802a02c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 802a030:	f894 20ad 	ldrb.w	r2, [r4, #173]	@ 0xad
 802a034:	f363 02c3 	bfi	r2, r3, #3, #1
 802a038:	f884 20ad 	strb.w	r2, [r4, #173]	@ 0xad
  c->pfn = lsn->pfn;
 802a03c:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 802a040:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->loc = lsn->loc;
 802a044:	f104 0608 	add.w	r6, r4, #8
 802a048:	f105 0c08 	add.w	ip, r5, #8
 802a04c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 802a050:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 802a052:	f8dc 3000 	ldr.w	r3, [ip]
 802a056:	6033      	str	r3, [r6, #0]
  c->pfn_data = lsn->pfn_data;
 802a058:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 802a05c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  c->fn = lsn->fn;
 802a060:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 802a062:	67a3      	str	r3, [r4, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 802a064:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 802a066:	67e3      	str	r3, [r4, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 802a068:	2200      	movs	r2, #0
 802a06a:	2101      	movs	r1, #1
 802a06c:	4620      	mov	r0, r4
 802a06e:	f7fa f85c 	bl	802412a <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 802a072:	2200      	movs	r2, #0
 802a074:	2105      	movs	r1, #5
 802a076:	4620      	mov	r0, r4
 802a078:	f7fa f857 	bl	802412a <mg_call>
}
 802a07c:	4620      	mov	r0, r4
 802a07e:	bd70      	pop	{r4, r5, r6, pc}
    MG_ERROR(("OOM"));
 802a080:	4b0e      	ldr	r3, [pc, #56]	@ (802a0bc <accept_conn+0x100>)
 802a082:	681b      	ldr	r3, [r3, #0]
 802a084:	2b00      	cmp	r3, #0
 802a086:	ddf9      	ble.n	802a07c <accept_conn+0xc0>
 802a088:	4b0d      	ldr	r3, [pc, #52]	@ (802a0c0 <accept_conn+0x104>)
 802a08a:	f241 5268 	movw	r2, #5480	@ 0x1568
 802a08e:	490d      	ldr	r1, [pc, #52]	@ (802a0c4 <accept_conn+0x108>)
 802a090:	2001      	movs	r0, #1
 802a092:	f7fd fc15 	bl	80278c0 <mg_log_prefix>
 802a096:	480c      	ldr	r0, [pc, #48]	@ (802a0c8 <accept_conn+0x10c>)
 802a098:	f7fb faaa 	bl	80255f0 <mg_log>
    return NULL;
 802a09c:	e7ee      	b.n	802a07c <accept_conn+0xc0>
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 802a09e:	4b08      	ldr	r3, [pc, #32]	@ (802a0c0 <accept_conn+0x104>)
 802a0a0:	f241 5271 	movw	r2, #5489	@ 0x1571
 802a0a4:	4907      	ldr	r1, [pc, #28]	@ (802a0c4 <accept_conn+0x108>)
 802a0a6:	2003      	movs	r0, #3
 802a0a8:	f7fd fc0a 	bl	80278c0 <mg_log_prefix>
 802a0ac:	f104 031c 	add.w	r3, r4, #28
 802a0b0:	4a06      	ldr	r2, [pc, #24]	@ (802a0cc <accept_conn+0x110>)
 802a0b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a0b4:	4806      	ldr	r0, [pc, #24]	@ (802a0d0 <accept_conn+0x114>)
 802a0b6:	f7fb fa9b 	bl	80255f0 <mg_log>
 802a0ba:	e7aa      	b.n	802a012 <accept_conn+0x56>
 802a0bc:	2000013c 	.word	0x2000013c
 802a0c0:	0803d6b8 	.word	0x0803d6b8
 802a0c4:	0803bba0 	.word	0x0803bba0
 802a0c8:	0803c1c8 	.word	0x0803c1c8
 802a0cc:	08027775 	.word	0x08027775
 802a0d0:	0803c16c 	.word	0x0803c16c

0802a0d4 <rx_tcp>:
static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802a0d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802a0d8:	b083      	sub	sp, #12
 802a0da:	4606      	mov	r6, r0
 802a0dc:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 802a0de:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 802a0e0:	2200      	movs	r2, #0
 802a0e2:	4628      	mov	r0, r5
 802a0e4:	f7f9 feb5 	bl	8023e52 <getpeer>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 802a0e8:	2800      	cmp	r0, #0
 802a0ea:	d05a      	beq.n	802a1a2 <rx_tcp+0xce>
 802a0ec:	4607      	mov	r7, r0
 802a0ee:	f100 05b0 	add.w	r5, r0, #176	@ 0xb0
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 802a0f2:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 802a0f6:	f013 0320 	ands.w	r3, r3, #32
 802a0fa:	d003      	beq.n	802a104 <rx_tcp+0x30>
 802a0fc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 802a0fe:	7b51      	ldrb	r1, [r2, #13]
 802a100:	2912      	cmp	r1, #18
 802a102:	d015      	beq.n	802a130 <rx_tcp+0x5c>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 802a104:	b11b      	cbz	r3, 802a10e <rx_tcp+0x3a>
 802a106:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802a108:	7b5a      	ldrb	r2, [r3, #13]
 802a10a:	2a10      	cmp	r2, #16
 802a10c:	d135      	bne.n	802a17a <rx_tcp+0xa6>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 802a10e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802a110:	7b5b      	ldrb	r3, [r3, #13]
 802a112:	f013 0f04 	tst.w	r3, #4
 802a116:	d13a      	bne.n	802a18e <rx_tcp+0xba>
    s->tmiss = 0;                         // Reset missed keep-alive counter
 802a118:	2300      	movs	r3, #0
 802a11a:	77eb      	strb	r3, [r5, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 802a11c:	7fab      	ldrb	r3, [r5, #30]
 802a11e:	2b00      	cmp	r3, #0
 802a120:	d03a      	beq.n	802a198 <rx_tcp+0xc4>
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 802a122:	4621      	mov	r1, r4
 802a124:	4638      	mov	r0, r7
 802a126:	f7ff fdbd 	bl	8029ca4 <read_conn>
}
 802a12a:	b003      	add	sp, #12
 802a12c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 802a130:	6890      	ldr	r0, [r2, #8]
 802a132:	f7fc ffeb 	bl	802710c <mg_ntohl>
 802a136:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
 802a13a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802a13c:	6858      	ldr	r0, [r3, #4]
 802a13e:	f7fc ffe5 	bl	802710c <mg_ntohl>
 802a142:	3001      	adds	r0, #1
 802a144:	6068      	str	r0, [r5, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 802a146:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802a148:	689b      	ldr	r3, [r3, #8]
 802a14a:	2500      	movs	r5, #0
 802a14c:	9501      	str	r5, [sp, #4]
 802a14e:	9500      	str	r5, [sp, #0]
 802a150:	2210      	movs	r2, #16
 802a152:	4621      	mov	r1, r4
 802a154:	4630      	mov	r0, r6
 802a156:	f7ff f95f 	bl	8029418 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 802a15a:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 802a15e:	f365 1345 	bfi	r3, r5, #5, #1
 802a162:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 802a166:	4629      	mov	r1, r5
 802a168:	4638      	mov	r0, r7
 802a16a:	f7ff f985 	bl	8029478 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 802a16e:	462a      	mov	r2, r5
 802a170:	2104      	movs	r1, #4
 802a172:	4638      	mov	r0, r7
 802a174:	f7f9 ffd9 	bl	802412a <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 802a178:	e7d7      	b.n	802a12a <rx_tcp+0x56>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 802a17a:	689b      	ldr	r3, [r3, #8]
 802a17c:	2200      	movs	r2, #0
 802a17e:	9201      	str	r2, [sp, #4]
 802a180:	9200      	str	r2, [sp, #0]
 802a182:	2214      	movs	r2, #20
 802a184:	4621      	mov	r1, r4
 802a186:	4630      	mov	r0, r6
 802a188:	f7ff f946 	bl	8029418 <tx_tcp_pkt>
 802a18c:	e7cd      	b.n	802a12a <rx_tcp+0x56>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 802a18e:	4934      	ldr	r1, [pc, #208]	@ (802a260 <rx_tcp+0x18c>)
 802a190:	4638      	mov	r0, r7
 802a192:	f7fd fc7d 	bl	8027a90 <mg_error>
 802a196:	e7c8      	b.n	802a12a <rx_tcp+0x56>
      settmout(c,
 802a198:	2100      	movs	r1, #0
 802a19a:	4638      	mov	r0, r7
 802a19c:	f7ff f96c 	bl	8029478 <settmout>
 802a1a0:	e7bf      	b.n	802a122 <rx_tcp+0x4e>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 802a1a2:	2201      	movs	r2, #1
 802a1a4:	4621      	mov	r1, r4
 802a1a6:	4628      	mov	r0, r5
 802a1a8:	f7f9 fe53 	bl	8023e52 <getpeer>
 802a1ac:	4607      	mov	r7, r0
 802a1ae:	b168      	cbz	r0, 802a1cc <rx_tcp+0xf8>
  } else if (pkt->tcp->flags & TH_RST) {
 802a1b0:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 802a1b2:	7b6b      	ldrb	r3, [r5, #13]
 802a1b4:	f013 0f04 	tst.w	r3, #4
 802a1b8:	d013      	beq.n	802a1e2 <rx_tcp+0x10e>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 802a1ba:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 802a1be:	f013 0f04 	tst.w	r3, #4
 802a1c2:	d0b2      	beq.n	802a12a <rx_tcp+0x56>
 802a1c4:	4926      	ldr	r1, [pc, #152]	@ (802a260 <rx_tcp+0x18c>)
 802a1c6:	f7fd fc63 	bl	8027a90 <mg_error>
 802a1ca:	e7ae      	b.n	802a12a <rx_tcp+0x56>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 802a1cc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802a1ce:	689b      	ldr	r3, [r3, #8]
 802a1d0:	2200      	movs	r2, #0
 802a1d2:	9201      	str	r2, [sp, #4]
 802a1d4:	9200      	str	r2, [sp, #0]
 802a1d6:	2214      	movs	r2, #20
 802a1d8:	4621      	mov	r1, r4
 802a1da:	4630      	mov	r0, r6
 802a1dc:	f7ff f91c 	bl	8029418 <tx_tcp_pkt>
 802a1e0:	e7a3      	b.n	802a12a <rx_tcp+0x56>
  } else if (pkt->tcp->flags & TH_SYN) {
 802a1e2:	f013 0f02 	tst.w	r3, #2
 802a1e6:	d11d      	bne.n	802a224 <rx_tcp+0x150>
  } else if (pkt->tcp->flags & TH_FIN) {
 802a1e8:	f013 0f01 	tst.w	r3, #1
 802a1ec:	d129      	bne.n	802a242 <rx_tcp+0x16e>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 802a1ee:	f8d5 9008 	ldr.w	r9, [r5, #8]
 802a1f2:	4648      	mov	r0, r9
 802a1f4:	f7fc ff8a 	bl	802710c <mg_ntohl>
 802a1f8:	4680      	mov	r8, r0
 802a1fa:	8828      	ldrh	r0, [r5, #0]
 802a1fc:	f7fd f81e 	bl	802723c <mg_ntohs>
 802a200:	1c43      	adds	r3, r0, #1
 802a202:	4598      	cmp	r8, r3
 802a204:	d027      	beq.n	802a256 <rx_tcp+0x182>
  } else if (!c->is_accepted) {  // no peer
 802a206:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 802a20a:	f013 0f04 	tst.w	r3, #4
 802a20e:	d18c      	bne.n	802a12a <rx_tcp+0x56>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 802a210:	2300      	movs	r3, #0
 802a212:	9301      	str	r3, [sp, #4]
 802a214:	9300      	str	r3, [sp, #0]
 802a216:	464b      	mov	r3, r9
 802a218:	2214      	movs	r2, #20
 802a21a:	4621      	mov	r1, r4
 802a21c:	4630      	mov	r0, r6
 802a21e:	f7ff f8fb 	bl	8029418 <tx_tcp_pkt>
}
 802a222:	e782      	b.n	802a12a <rx_tcp+0x56>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 802a224:	8828      	ldrh	r0, [r5, #0]
 802a226:	f7fd f809 	bl	802723c <mg_ntohs>
 802a22a:	f7fc ff6f 	bl	802710c <mg_ntohl>
 802a22e:	4603      	mov	r3, r0
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 802a230:	2200      	movs	r2, #0
 802a232:	9201      	str	r2, [sp, #4]
 802a234:	9200      	str	r2, [sp, #0]
 802a236:	2212      	movs	r2, #18
 802a238:	4621      	mov	r1, r4
 802a23a:	4630      	mov	r0, r6
 802a23c:	f7ff f8ec 	bl	8029418 <tx_tcp_pkt>
 802a240:	e773      	b.n	802a12a <rx_tcp+0x56>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 802a242:	68ab      	ldr	r3, [r5, #8]
 802a244:	2200      	movs	r2, #0
 802a246:	9201      	str	r2, [sp, #4]
 802a248:	9200      	str	r2, [sp, #0]
 802a24a:	2211      	movs	r2, #17
 802a24c:	4621      	mov	r1, r4
 802a24e:	4630      	mov	r0, r6
 802a250:	f7ff f8e2 	bl	8029418 <tx_tcp_pkt>
 802a254:	e769      	b.n	802a12a <rx_tcp+0x56>
    accept_conn(c, pkt);
 802a256:	4621      	mov	r1, r4
 802a258:	4638      	mov	r0, r7
 802a25a:	f7ff feaf 	bl	8029fbc <accept_conn>
 802a25e:	e764      	b.n	802a12a <rx_tcp+0x56>
 802a260:	0803c17c 	.word	0x0803c17c

0802a264 <mg_sendnsreq>:
                         struct mg_dns *dnsc, bool ipv6) {
 802a264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a268:	b082      	sub	sp, #8
 802a26a:	4604      	mov	r4, r0
 802a26c:	4688      	mov	r8, r1
 802a26e:	4617      	mov	r7, r2
 802a270:	461d      	mov	r5, r3
  if (dnsc->url == NULL) {
 802a272:	6819      	ldr	r1, [r3, #0]
 802a274:	2900      	cmp	r1, #0
 802a276:	d037      	beq.n	802a2e8 <mg_sendnsreq+0x84>
  } else if (dnsc->c == NULL) {
 802a278:	685b      	ldr	r3, [r3, #4]
 802a27a:	2b00      	cmp	r3, #0
 802a27c:	d038      	beq.n	802a2f0 <mg_sendnsreq+0x8c>
  if (dnsc->c == NULL) {
 802a27e:	686b      	ldr	r3, [r5, #4]
 802a280:	2b00      	cmp	r3, #0
 802a282:	d040      	beq.n	802a306 <mg_sendnsreq+0xa2>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 802a284:	2118      	movs	r1, #24
 802a286:	2001      	movs	r0, #1
 802a288:	f7f9 fdbe 	bl	8023e08 <mg_calloc>
 802a28c:	4606      	mov	r6, r0
 802a28e:	2800      	cmp	r0, #0
 802a290:	d03e      	beq.n	802a310 <mg_sendnsreq+0xac>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 802a292:	6863      	ldr	r3, [r4, #4]
 802a294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 802a296:	2b00      	cmp	r3, #0
 802a298:	d03f      	beq.n	802a31a <mg_sendnsreq+0xb6>
 802a29a:	8a1b      	ldrh	r3, [r3, #16]
 802a29c:	3301      	adds	r3, #1
 802a29e:	b29b      	uxth	r3, r3
 802a2a0:	8233      	strh	r3, [r6, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 802a2a2:	6863      	ldr	r3, [r4, #4]
 802a2a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a2a6:	6033      	str	r3, [r6, #0]
    c->mgr->active_dns_requests = d;
 802a2a8:	6863      	ldr	r3, [r4, #4]
 802a2aa:	631e      	str	r6, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 802a2ac:	f7fd fb02 	bl	80278b4 <mg_millis>
 802a2b0:	19c0      	adds	r0, r0, r7
 802a2b2:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
 802a2b6:	60b0      	str	r0, [r6, #8]
 802a2b8:	60f1      	str	r1, [r6, #12]
    d->c = c;
 802a2ba:	6074      	str	r4, [r6, #4]
    c->is_resolving = 1;
 802a2bc:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802a2c0:	f043 0308 	orr.w	r3, r3, #8
 802a2c4:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 802a2c8:	4b21      	ldr	r3, [pc, #132]	@ (802a350 <mg_sendnsreq+0xec>)
 802a2ca:	681b      	ldr	r3, [r3, #0]
 802a2cc:	2b03      	cmp	r3, #3
 802a2ce:	dc26      	bgt.n	802a31e <mg_sendnsreq+0xba>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 802a2d0:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802a2d4:	8a32      	ldrh	r2, [r6, #16]
 802a2d6:	4641      	mov	r1, r8
 802a2d8:	6868      	ldr	r0, [r5, #4]
 802a2da:	f7fe fbd9 	bl	8028a90 <mg_dns_send>
 802a2de:	2800      	cmp	r0, #0
 802a2e0:	d031      	beq.n	802a346 <mg_sendnsreq+0xe2>
}
 802a2e2:	b002      	add	sp, #8
 802a2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 802a2e8:	491a      	ldr	r1, [pc, #104]	@ (802a354 <mg_sendnsreq+0xf0>)
 802a2ea:	f7fd fbd1 	bl	8027a90 <mg_error>
 802a2ee:	e7c6      	b.n	802a27e <mg_sendnsreq+0x1a>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 802a2f0:	461a      	mov	r2, r3
 802a2f2:	6840      	ldr	r0, [r0, #4]
 802a2f4:	f000 f866 	bl	802a3c4 <mg_connect>
 802a2f8:	6068      	str	r0, [r5, #4]
    if (dnsc->c != NULL) {
 802a2fa:	2800      	cmp	r0, #0
 802a2fc:	d0bf      	beq.n	802a27e <mg_sendnsreq+0x1a>
      dnsc->c->pfn = dns_cb;
 802a2fe:	4b16      	ldr	r3, [pc, #88]	@ (802a358 <mg_sendnsreq+0xf4>)
 802a300:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 802a304:	e7bb      	b.n	802a27e <mg_sendnsreq+0x1a>
    mg_error(c, "resolver");
 802a306:	4915      	ldr	r1, [pc, #84]	@ (802a35c <mg_sendnsreq+0xf8>)
 802a308:	4620      	mov	r0, r4
 802a30a:	f7fd fbc1 	bl	8027a90 <mg_error>
 802a30e:	e7e8      	b.n	802a2e2 <mg_sendnsreq+0x7e>
    mg_error(c, "resolve OOM");
 802a310:	4913      	ldr	r1, [pc, #76]	@ (802a360 <mg_sendnsreq+0xfc>)
 802a312:	4620      	mov	r0, r4
 802a314:	f7fd fbbc 	bl	8027a90 <mg_error>
 802a318:	e7e3      	b.n	802a2e2 <mg_sendnsreq+0x7e>
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 802a31a:	2301      	movs	r3, #1
 802a31c:	e7c0      	b.n	802a2a0 <mg_sendnsreq+0x3c>
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 802a31e:	4b11      	ldr	r3, [pc, #68]	@ (802a364 <mg_sendnsreq+0x100>)
 802a320:	f240 521e 	movw	r2, #1310	@ 0x51e
 802a324:	4910      	ldr	r1, [pc, #64]	@ (802a368 <mg_sendnsreq+0x104>)
 802a326:	2004      	movs	r0, #4
 802a328:	f7fd faca 	bl	80278c0 <mg_log_prefix>
 802a32c:	8a33      	ldrh	r3, [r6, #16]
 802a32e:	9301      	str	r3, [sp, #4]
 802a330:	682b      	ldr	r3, [r5, #0]
 802a332:	9300      	str	r3, [sp, #0]
 802a334:	f8d8 3000 	ldr.w	r3, [r8]
 802a338:	f8d8 2004 	ldr.w	r2, [r8, #4]
 802a33c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a33e:	480b      	ldr	r0, [pc, #44]	@ (802a36c <mg_sendnsreq+0x108>)
 802a340:	f7fb f956 	bl	80255f0 <mg_log>
 802a344:	e7c4      	b.n	802a2d0 <mg_sendnsreq+0x6c>
      mg_error(dnsc->c, "DNS send");
 802a346:	490a      	ldr	r1, [pc, #40]	@ (802a370 <mg_sendnsreq+0x10c>)
 802a348:	6868      	ldr	r0, [r5, #4]
 802a34a:	f7fd fba1 	bl	8027a90 <mg_error>
}
 802a34e:	e7c8      	b.n	802a2e2 <mg_sendnsreq+0x7e>
 802a350:	2000013c 	.word	0x2000013c
 802a354:	0803c188 	.word	0x0803c188
 802a358:	08029815 	.word	0x08029815
 802a35c:	0803c1b4 	.word	0x0803c1b4
 802a360:	0803c1c0 	.word	0x0803c1c0
 802a364:	0803d840 	.word	0x0803d840
 802a368:	0803bba0 	.word	0x0803bba0
 802a36c:	0803c1cc 	.word	0x0803c1cc
 802a370:	0803c1f0 	.word	0x0803c1f0

0802a374 <mg_resolve>:
void mg_resolve(struct mg_connection *c, const char *url) {
 802a374:	b570      	push	{r4, r5, r6, lr}
 802a376:	b084      	sub	sp, #16
 802a378:	4604      	mov	r4, r0
 802a37a:	460e      	mov	r6, r1
  struct mg_str host = mg_url_host(url);
 802a37c:	ad02      	add	r5, sp, #8
 802a37e:	4628      	mov	r0, r5
 802a380:	f7fc fdee 	bl	8026f60 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 802a384:	4630      	mov	r0, r6
 802a386:	f7fc fe09 	bl	8026f9c <mg_url_port>
 802a38a:	f7fc ff57 	bl	802723c <mg_ntohs>
 802a38e:	85a0      	strh	r0, [r4, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 802a390:	f104 021c 	add.w	r2, r4, #28
 802a394:	e895 0003 	ldmia.w	r5, {r0, r1}
 802a398:	f7fc feec 	bl	8027174 <mg_aton>
 802a39c:	b960      	cbnz	r0, 802a3b8 <mg_resolve+0x44>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 802a39e:	6862      	ldr	r2, [r4, #4]
 802a3a0:	7e11      	ldrb	r1, [r2, #24]
 802a3a2:	b169      	cbz	r1, 802a3c0 <mg_resolve+0x4c>
 802a3a4:	f102 030c 	add.w	r3, r2, #12
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 802a3a8:	6952      	ldr	r2, [r2, #20]
 802a3aa:	9100      	str	r1, [sp, #0]
 802a3ac:	a902      	add	r1, sp, #8
 802a3ae:	4620      	mov	r0, r4
 802a3b0:	f7ff ff58 	bl	802a264 <mg_sendnsreq>
}
 802a3b4:	b004      	add	sp, #16
 802a3b6:	bd70      	pop	{r4, r5, r6, pc}
    mg_connect_resolved(c);
 802a3b8:	4620      	mov	r0, r4
 802a3ba:	f7ff f95b 	bl	8029674 <mg_connect_resolved>
 802a3be:	e7f9      	b.n	802a3b4 <mg_resolve+0x40>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 802a3c0:	1d13      	adds	r3, r2, #4
 802a3c2:	e7f1      	b.n	802a3a8 <mg_resolve+0x34>

0802a3c4 <mg_connect>:
                                 mg_event_handler_t fn, void *fn_data) {
 802a3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (url == NULL || url[0] == '\0') {
 802a3c8:	b129      	cbz	r1, 802a3d6 <mg_connect+0x12>
 802a3ca:	4680      	mov	r8, r0
 802a3cc:	4617      	mov	r7, r2
 802a3ce:	461e      	mov	r6, r3
 802a3d0:	460d      	mov	r5, r1
 802a3d2:	780b      	ldrb	r3, [r1, #0]
 802a3d4:	b99b      	cbnz	r3, 802a3fe <mg_connect+0x3a>
    MG_ERROR(("null url"));
 802a3d6:	4b30      	ldr	r3, [pc, #192]	@ (802a498 <mg_connect+0xd4>)
 802a3d8:	681b      	ldr	r3, [r3, #0]
 802a3da:	2b00      	cmp	r3, #0
 802a3dc:	dc03      	bgt.n	802a3e6 <mg_connect+0x22>
  struct mg_connection *c = NULL;
 802a3de:	2400      	movs	r4, #0
}
 802a3e0:	4620      	mov	r0, r4
 802a3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("null url"));
 802a3e6:	4b2d      	ldr	r3, [pc, #180]	@ (802a49c <mg_connect+0xd8>)
 802a3e8:	f241 22be 	movw	r2, #4798	@ 0x12be
 802a3ec:	492c      	ldr	r1, [pc, #176]	@ (802a4a0 <mg_connect+0xdc>)
 802a3ee:	2001      	movs	r0, #1
 802a3f0:	f7fd fa66 	bl	80278c0 <mg_log_prefix>
 802a3f4:	482b      	ldr	r0, [pc, #172]	@ (802a4a4 <mg_connect+0xe0>)
 802a3f6:	f7fb f8fb 	bl	80255f0 <mg_log>
  struct mg_connection *c = NULL;
 802a3fa:	2400      	movs	r4, #0
 802a3fc:	e7f0      	b.n	802a3e0 <mg_connect+0x1c>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 802a3fe:	f7fa fc0b 	bl	8024c18 <mg_alloc_conn>
 802a402:	4604      	mov	r4, r0
 802a404:	b358      	cbz	r0, 802a45e <mg_connect+0x9a>
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 802a406:	f8d8 3000 	ldr.w	r3, [r8]
 802a40a:	6003      	str	r3, [r0, #0]
 802a40c:	f8c8 0000 	str.w	r0, [r8]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 802a410:	2204      	movs	r2, #4
 802a412:	4925      	ldr	r1, [pc, #148]	@ (802a4a8 <mg_connect+0xe4>)
 802a414:	4628      	mov	r0, r5
 802a416:	f002 fa28 	bl	802c86a <strncmp>
 802a41a:	fab0 f080 	clz	r0, r0
 802a41e:	0940      	lsrs	r0, r0, #5
 802a420:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802a424:	f360 0300 	bfi	r3, r0, #0, #1
 802a428:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 802a42c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a430:	6323      	str	r3, [r4, #48]	@ 0x30
    c->fn = fn;
 802a432:	67a7      	str	r7, [r4, #120]	@ 0x78
    c->is_client = true;
 802a434:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802a438:	f043 0302 	orr.w	r3, r3, #2
 802a43c:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->fn_data = fn_data;
 802a440:	67e6      	str	r6, [r4, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 802a442:	4b15      	ldr	r3, [pc, #84]	@ (802a498 <mg_connect+0xd4>)
 802a444:	681b      	ldr	r3, [r3, #0]
 802a446:	2b02      	cmp	r3, #2
 802a448:	dc18      	bgt.n	802a47c <mg_connect+0xb8>
    mg_call(c, MG_EV_OPEN, (void *) url);
 802a44a:	462a      	mov	r2, r5
 802a44c:	2101      	movs	r1, #1
 802a44e:	4620      	mov	r0, r4
 802a450:	f7f9 fe6b 	bl	802412a <mg_call>
    mg_resolve(c, url);
 802a454:	4629      	mov	r1, r5
 802a456:	4620      	mov	r0, r4
 802a458:	f7ff ff8c 	bl	802a374 <mg_resolve>
 802a45c:	e7c0      	b.n	802a3e0 <mg_connect+0x1c>
    MG_ERROR(("OOM"));
 802a45e:	4b0e      	ldr	r3, [pc, #56]	@ (802a498 <mg_connect+0xd4>)
 802a460:	681b      	ldr	r3, [r3, #0]
 802a462:	2b00      	cmp	r3, #0
 802a464:	ddbc      	ble.n	802a3e0 <mg_connect+0x1c>
 802a466:	4b0d      	ldr	r3, [pc, #52]	@ (802a49c <mg_connect+0xd8>)
 802a468:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 802a46c:	490c      	ldr	r1, [pc, #48]	@ (802a4a0 <mg_connect+0xdc>)
 802a46e:	2001      	movs	r0, #1
 802a470:	f7fd fa26 	bl	80278c0 <mg_log_prefix>
 802a474:	480d      	ldr	r0, [pc, #52]	@ (802a4ac <mg_connect+0xe8>)
 802a476:	f7fb f8bb 	bl	80255f0 <mg_log>
 802a47a:	e7b1      	b.n	802a3e0 <mg_connect+0x1c>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 802a47c:	4b07      	ldr	r3, [pc, #28]	@ (802a49c <mg_connect+0xd8>)
 802a47e:	f241 22c8 	movw	r2, #4808	@ 0x12c8
 802a482:	4907      	ldr	r1, [pc, #28]	@ (802a4a0 <mg_connect+0xdc>)
 802a484:	2003      	movs	r0, #3
 802a486:	f7fd fa1b 	bl	80278c0 <mg_log_prefix>
 802a48a:	462b      	mov	r3, r5
 802a48c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 802a48e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a490:	4807      	ldr	r0, [pc, #28]	@ (802a4b0 <mg_connect+0xec>)
 802a492:	f7fb f8ad 	bl	80255f0 <mg_log>
 802a496:	e7d8      	b.n	802a44a <mg_connect+0x86>
 802a498:	2000013c 	.word	0x2000013c
 802a49c:	0803d7b4 	.word	0x0803d7b4
 802a4a0:	0803bba0 	.word	0x0803bba0
 802a4a4:	0803c1fc 	.word	0x0803c1fc
 802a4a8:	0803bed4 	.word	0x0803bed4
 802a4ac:	0803c1c8 	.word	0x0803c1c8
 802a4b0:	0803bbfc 	.word	0x0803bbfc

0802a4b4 <mg_mqtt_connect>:
                                      mg_event_handler_t fn, void *fn_data) {
 802a4b4:	b530      	push	{r4, r5, lr}
 802a4b6:	b091      	sub	sp, #68	@ 0x44
 802a4b8:	4614      	mov	r4, r2
 802a4ba:	461a      	mov	r2, r3
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 802a4bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802a4be:	f7ff ff81 	bl	802a3c4 <mg_connect>
  if (c != NULL) {
 802a4c2:	4605      	mov	r5, r0
 802a4c4:	b160      	cbz	r0, 802a4e0 <mg_mqtt_connect+0x2c>
    memset(&empty, 0, sizeof(empty));
 802a4c6:	2240      	movs	r2, #64	@ 0x40
 802a4c8:	2100      	movs	r1, #0
 802a4ca:	4668      	mov	r0, sp
 802a4cc:	f002 f998 	bl	802c800 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 802a4d0:	b14c      	cbz	r4, 802a4e6 <mg_mqtt_connect+0x32>
 802a4d2:	4621      	mov	r1, r4
 802a4d4:	4628      	mov	r0, r5
 802a4d6:	f7fe fc07 	bl	8028ce8 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 802a4da:	4b04      	ldr	r3, [pc, #16]	@ (802a4ec <mg_mqtt_connect+0x38>)
 802a4dc:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
}
 802a4e0:	4628      	mov	r0, r5
 802a4e2:	b011      	add	sp, #68	@ 0x44
 802a4e4:	bd30      	pop	{r4, r5, pc}
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 802a4e6:	466c      	mov	r4, sp
 802a4e8:	e7f3      	b.n	802a4d2 <mg_mqtt_connect+0x1e>
 802a4ea:	bf00      	nop
 802a4ec:	080290c1 	.word	0x080290c1

0802a4f0 <mg_tcpip_init>:
void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 802a4f0:	b538      	push	{r3, r4, r5, lr}
 802a4f2:	4605      	mov	r5, r0
 802a4f4:	460c      	mov	r4, r1
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 802a4f6:	680b      	ldr	r3, [r1, #0]
 802a4f8:	b90b      	cbnz	r3, 802a4fe <mg_tcpip_init+0xe>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 802a4fa:	888b      	ldrh	r3, [r1, #4]
 802a4fc:	b1a3      	cbz	r3, 802a528 <mg_tcpip_init+0x38>
  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 802a4fe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 802a500:	681b      	ldr	r3, [r3, #0]
 802a502:	b34b      	cbz	r3, 802a558 <mg_tcpip_init+0x68>
 802a504:	4620      	mov	r0, r4
 802a506:	4798      	blx	r3
 802a508:	bb30      	cbnz	r0, 802a558 <mg_tcpip_init+0x68>
    MG_ERROR(("driver init failed"));
 802a50a:	4b3b      	ldr	r3, [pc, #236]	@ (802a5f8 <mg_tcpip_init+0x108>)
 802a50c:	681b      	ldr	r3, [r3, #0]
 802a50e:	2b00      	cmp	r3, #0
 802a510:	dd5f      	ble.n	802a5d2 <mg_tcpip_init+0xe2>
 802a512:	4b3a      	ldr	r3, [pc, #232]	@ (802a5fc <mg_tcpip_init+0x10c>)
 802a514:	f241 7223 	movw	r2, #5923	@ 0x1723
 802a518:	4939      	ldr	r1, [pc, #228]	@ (802a600 <mg_tcpip_init+0x110>)
 802a51a:	2001      	movs	r0, #1
 802a51c:	f7fd f9d0 	bl	80278c0 <mg_log_prefix>
 802a520:	4838      	ldr	r0, [pc, #224]	@ (802a604 <mg_tcpip_init+0x114>)
 802a522:	f7fb f865 	bl	80255f0 <mg_log>
 802a526:	e054      	b.n	802a5d2 <mg_tcpip_init+0xe2>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 802a528:	4608      	mov	r0, r1
 802a52a:	2302      	movs	r3, #2
 802a52c:	f800 3b01 	strb.w	r3, [r0], #1
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 802a530:	2105      	movs	r1, #5
 802a532:	f7fc fdb0 	bl	8027096 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 802a536:	4b30      	ldr	r3, [pc, #192]	@ (802a5f8 <mg_tcpip_init+0x108>)
 802a538:	681b      	ldr	r3, [r3, #0]
 802a53a:	2b01      	cmp	r3, #1
 802a53c:	dddf      	ble.n	802a4fe <mg_tcpip_init+0xe>
 802a53e:	4b2f      	ldr	r3, [pc, #188]	@ (802a5fc <mg_tcpip_init+0x10c>)
 802a540:	f241 721f 	movw	r2, #5919	@ 0x171f
 802a544:	492e      	ldr	r1, [pc, #184]	@ (802a600 <mg_tcpip_init+0x110>)
 802a546:	2002      	movs	r0, #2
 802a548:	f7fd f9ba 	bl	80278c0 <mg_log_prefix>
 802a54c:	4622      	mov	r2, r4
 802a54e:	492e      	ldr	r1, [pc, #184]	@ (802a608 <mg_tcpip_init+0x118>)
 802a550:	482e      	ldr	r0, [pc, #184]	@ (802a60c <mg_tcpip_init+0x11c>)
 802a552:	f7fb f84d 	bl	80255f0 <mg_log>
 802a556:	e7d2      	b.n	802a4fe <mg_tcpip_init+0xe>
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 802a558:	f240 6104 	movw	r1, #1540	@ 0x604
 802a55c:	2001      	movs	r0, #1
 802a55e:	f7f9 fc53 	bl	8023e08 <mg_calloc>
 802a562:	6160      	str	r0, [r4, #20]
 802a564:	f240 6304 	movw	r3, #1540	@ 0x604
 802a568:	61a3      	str	r3, [r4, #24]
    if (ifp->recv_queue.size == 0)
 802a56a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 802a56c:	b92b      	cbnz	r3, 802a57a <mg_tcpip_init+0x8a>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 802a56e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 802a570:	689b      	ldr	r3, [r3, #8]
 802a572:	b37b      	cbz	r3, 802a5d4 <mg_tcpip_init+0xe4>
 802a574:	f240 6304 	movw	r3, #1540	@ 0x604
 802a578:	63a3      	str	r3, [r4, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 802a57a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802a57c:	2001      	movs	r0, #1
 802a57e:	f7f9 fc43 	bl	8023e08 <mg_calloc>
 802a582:	6360      	str	r0, [r4, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 802a584:	f7fd f996 	bl	80278b4 <mg_millis>
 802a588:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
    mgr->priv = ifp;
 802a58c:	63ec      	str	r4, [r5, #60]	@ 0x3c
    ifp->mgr = mgr;
 802a58e:	6325      	str	r5, [r4, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 802a590:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 802a594:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 802a598:	2330      	movs	r3, #48	@ 0x30
 802a59a:	642b      	str	r3, [r5, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 802a59c:	68a3      	ldr	r3, [r4, #8]
 802a59e:	b90b      	cbnz	r3, 802a5a4 <mg_tcpip_init+0xb4>
 802a5a0:	2301      	movs	r3, #1
 802a5a2:	7723      	strb	r3, [r4, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 802a5a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a5a8:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 802a5ac:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 802a5b0:	2102      	movs	r1, #2
 802a5b2:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802a5b6:	f7fc fd6e 	bl	8027096 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 802a5ba:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 802a5be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 802a5c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 802a5c6:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 802a5ca:	6963      	ldr	r3, [r4, #20]
 802a5cc:	b12b      	cbz	r3, 802a5da <mg_tcpip_init+0xea>
 802a5ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802a5d0:	b11b      	cbz	r3, 802a5da <mg_tcpip_init+0xea>
}
 802a5d2:	bd38      	pop	{r3, r4, r5, pc}
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 802a5d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 802a5d8:	e7ce      	b.n	802a578 <mg_tcpip_init+0x88>
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 802a5da:	4b07      	ldr	r3, [pc, #28]	@ (802a5f8 <mg_tcpip_init+0x108>)
 802a5dc:	681b      	ldr	r3, [r3, #0]
 802a5de:	2b00      	cmp	r3, #0
 802a5e0:	ddf7      	ble.n	802a5d2 <mg_tcpip_init+0xe2>
 802a5e2:	4b06      	ldr	r3, [pc, #24]	@ (802a5fc <mg_tcpip_init+0x10c>)
 802a5e4:	f241 7234 	movw	r2, #5940	@ 0x1734
 802a5e8:	4905      	ldr	r1, [pc, #20]	@ (802a600 <mg_tcpip_init+0x110>)
 802a5ea:	2001      	movs	r0, #1
 802a5ec:	f7fd f968 	bl	80278c0 <mg_log_prefix>
 802a5f0:	4807      	ldr	r0, [pc, #28]	@ (802a610 <mg_tcpip_init+0x120>)
 802a5f2:	f7fa fffd 	bl	80255f0 <mg_log>
}
 802a5f6:	e7ec      	b.n	802a5d2 <mg_tcpip_init+0xe2>
 802a5f8:	2000013c 	.word	0x2000013c
 802a5fc:	0803d778 	.word	0x0803d778
 802a600:	0803bba0 	.word	0x0803bba0
 802a604:	0803c22c 	.word	0x0803c22c
 802a608:	080255c1 	.word	0x080255c1
 802a60c:	0803c208 	.word	0x0803c208
 802a610:	0803c1c8 	.word	0x0803c1c8

0802a614 <onstatechange>:
static void onstatechange(struct mg_tcpip_if *ifp) {
 802a614:	b510      	push	{r4, lr}
 802a616:	4604      	mov	r4, r0
  if (ifp->state == MG_TCPIP_STATE_READY) {
 802a618:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
 802a61c:	2b03      	cmp	r3, #3
 802a61e:	d011      	beq.n	802a644 <onstatechange+0x30>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 802a620:	2b01      	cmp	r3, #1
 802a622:	d04f      	beq.n	802a6c4 <onstatechange+0xb0>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 802a624:	b9f3      	cbnz	r3, 802a664 <onstatechange+0x50>
    MG_ERROR(("Link down"));
 802a626:	4b31      	ldr	r3, [pc, #196]	@ (802a6ec <onstatechange+0xd8>)
 802a628:	681b      	ldr	r3, [r3, #0]
 802a62a:	2b00      	cmp	r3, #0
 802a62c:	dd1a      	ble.n	802a664 <onstatechange+0x50>
 802a62e:	4b30      	ldr	r3, [pc, #192]	@ (802a6f0 <onstatechange+0xdc>)
 802a630:	f241 4209 	movw	r2, #5129	@ 0x1409
 802a634:	492f      	ldr	r1, [pc, #188]	@ (802a6f4 <onstatechange+0xe0>)
 802a636:	2001      	movs	r0, #1
 802a638:	f7fd f942 	bl	80278c0 <mg_log_prefix>
 802a63c:	482e      	ldr	r0, [pc, #184]	@ (802a6f8 <onstatechange+0xe4>)
 802a63e:	f7fa ffd7 	bl	80255f0 <mg_log>
 802a642:	e00f      	b.n	802a664 <onstatechange+0x50>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 802a644:	4b29      	ldr	r3, [pc, #164]	@ (802a6ec <onstatechange+0xd8>)
 802a646:	681b      	ldr	r3, [r3, #0]
 802a648:	2b01      	cmp	r3, #1
 802a64a:	dc12      	bgt.n	802a672 <onstatechange+0x5e>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 802a64c:	4b27      	ldr	r3, [pc, #156]	@ (802a6ec <onstatechange+0xd8>)
 802a64e:	681b      	ldr	r3, [r3, #0]
 802a650:	2b01      	cmp	r3, #1
 802a652:	dc1c      	bgt.n	802a68e <onstatechange+0x7a>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 802a654:	4b25      	ldr	r3, [pc, #148]	@ (802a6ec <onstatechange+0xd8>)
 802a656:	681b      	ldr	r3, [r3, #0]
 802a658:	2b01      	cmp	r3, #1
 802a65a:	dc26      	bgt.n	802a6aa <onstatechange+0x96>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 802a65c:	6921      	ldr	r1, [r4, #16]
 802a65e:	4620      	mov	r0, r4
 802a660:	f7fc fee9 	bl	8027436 <arp_ask>
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 802a664:	f104 027c 	add.w	r2, r4, #124	@ 0x7c
 802a668:	2100      	movs	r1, #0
 802a66a:	4620      	mov	r0, r4
 802a66c:	f7f8 f8f9 	bl	8022862 <mg_tcpip_call>
}
 802a670:	bd10      	pop	{r4, pc}
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 802a672:	4b1f      	ldr	r3, [pc, #124]	@ (802a6f0 <onstatechange+0xdc>)
 802a674:	f241 4201 	movw	r2, #5121	@ 0x1401
 802a678:	491e      	ldr	r1, [pc, #120]	@ (802a6f4 <onstatechange+0xe0>)
 802a67a:	2002      	movs	r0, #2
 802a67c:	f7fd f920 	bl	80278c0 <mg_log_prefix>
 802a680:	f104 0208 	add.w	r2, r4, #8
 802a684:	491d      	ldr	r1, [pc, #116]	@ (802a6fc <onstatechange+0xe8>)
 802a686:	481e      	ldr	r0, [pc, #120]	@ (802a700 <onstatechange+0xec>)
 802a688:	f7fa ffb2 	bl	80255f0 <mg_log>
 802a68c:	e7de      	b.n	802a64c <onstatechange+0x38>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 802a68e:	4b18      	ldr	r3, [pc, #96]	@ (802a6f0 <onstatechange+0xdc>)
 802a690:	f241 4202 	movw	r2, #5122	@ 0x1402
 802a694:	4917      	ldr	r1, [pc, #92]	@ (802a6f4 <onstatechange+0xe0>)
 802a696:	2002      	movs	r0, #2
 802a698:	f7fd f912 	bl	80278c0 <mg_log_prefix>
 802a69c:	f104 0210 	add.w	r2, r4, #16
 802a6a0:	4916      	ldr	r1, [pc, #88]	@ (802a6fc <onstatechange+0xe8>)
 802a6a2:	4818      	ldr	r0, [pc, #96]	@ (802a704 <onstatechange+0xf0>)
 802a6a4:	f7fa ffa4 	bl	80255f0 <mg_log>
 802a6a8:	e7d4      	b.n	802a654 <onstatechange+0x40>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 802a6aa:	4b11      	ldr	r3, [pc, #68]	@ (802a6f0 <onstatechange+0xdc>)
 802a6ac:	f241 4203 	movw	r2, #5123	@ 0x1403
 802a6b0:	4910      	ldr	r1, [pc, #64]	@ (802a6f4 <onstatechange+0xe0>)
 802a6b2:	2002      	movs	r0, #2
 802a6b4:	f7fd f904 	bl	80278c0 <mg_log_prefix>
 802a6b8:	4622      	mov	r2, r4
 802a6ba:	4913      	ldr	r1, [pc, #76]	@ (802a708 <onstatechange+0xf4>)
 802a6bc:	4813      	ldr	r0, [pc, #76]	@ (802a70c <onstatechange+0xf8>)
 802a6be:	f7fa ff97 	bl	80255f0 <mg_log>
 802a6c2:	e7cb      	b.n	802a65c <onstatechange+0x48>
    MG_ERROR(("Link up"));
 802a6c4:	4b09      	ldr	r3, [pc, #36]	@ (802a6ec <onstatechange+0xd8>)
 802a6c6:	681b      	ldr	r3, [r3, #0]
 802a6c8:	2b00      	cmp	r3, #0
 802a6ca:	dc04      	bgt.n	802a6d6 <onstatechange+0xc2>
    srand((unsigned int) mg_millis());
 802a6cc:	f7fd f8f2 	bl	80278b4 <mg_millis>
 802a6d0:	f001 fc98 	bl	802c004 <srand>
 802a6d4:	e7c6      	b.n	802a664 <onstatechange+0x50>
    MG_ERROR(("Link up"));
 802a6d6:	4b06      	ldr	r3, [pc, #24]	@ (802a6f0 <onstatechange+0xdc>)
 802a6d8:	f241 4206 	movw	r2, #5126	@ 0x1406
 802a6dc:	4905      	ldr	r1, [pc, #20]	@ (802a6f4 <onstatechange+0xe0>)
 802a6de:	2001      	movs	r0, #1
 802a6e0:	f7fd f8ee 	bl	80278c0 <mg_log_prefix>
 802a6e4:	480a      	ldr	r0, [pc, #40]	@ (802a710 <onstatechange+0xfc>)
 802a6e6:	f7fa ff83 	bl	80255f0 <mg_log>
 802a6ea:	e7ef      	b.n	802a6cc <onstatechange+0xb8>
 802a6ec:	2000013c 	.word	0x2000013c
 802a6f0:	0803d724 	.word	0x0803d724
 802a6f4:	0803bba0 	.word	0x0803bba0
 802a6f8:	0803c278 	.word	0x0803c278
 802a6fc:	080255b1 	.word	0x080255b1
 802a700:	0803c240 	.word	0x0803c240
 802a704:	0803c250 	.word	0x0803c250
 802a708:	080255c1 	.word	0x080255c1
 802a70c:	0803c260 	.word	0x0803c260
 802a710:	0803c270 	.word	0x0803c270

0802a714 <rx_dhcp_client>:
static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802a714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a718:	b087      	sub	sp, #28
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 802a71a:	2300      	movs	r3, #0
 802a71c:	9305      	str	r3, [sp, #20]
 802a71e:	9304      	str	r3, [sp, #16]
  uint8_t msgtype = 0, state = ifp->state;
 802a720:	f890 a07c 	ldrb.w	sl, [r0, #124]	@ 0x7c
  uint8_t *p = pkt->dhcp->options,
 802a724:	f8d1 8030 	ldr.w	r8, [r1, #48]	@ 0x30
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 802a728:	680e      	ldr	r6, [r1, #0]
 802a72a:	684b      	ldr	r3, [r1, #4]
 802a72c:	441e      	add	r6, r3
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 802a72e:	f508 7388 	add.w	r3, r8, #272	@ 0x110
 802a732:	42b3      	cmp	r3, r6
 802a734:	d87b      	bhi.n	802a82e <rx_dhcp_client+0x11a>
 802a736:	4605      	mov	r5, r0
 802a738:	460f      	mov	r7, r1
 802a73a:	f108 04f0 	add.w	r4, r8, #240	@ 0xf0
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 802a73e:	2204      	movs	r2, #4
 802a740:	1c81      	adds	r1, r0, #2
 802a742:	eb08 0002 	add.w	r0, r8, r2
 802a746:	f002 f831 	bl	802c7ac <memcmp>
 802a74a:	2800      	cmp	r0, #0
 802a74c:	d16f      	bne.n	802a82e <rx_dhcp_client+0x11a>
  uint8_t msgtype = 0, state = ifp->state;
 802a74e:	f04f 0900 	mov.w	r9, #0
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 802a752:	4648      	mov	r0, r9
 802a754:	f8cd 9004 	str.w	r9, [sp, #4]
 802a758:	f8cd 9000 	str.w	r9, [sp]
 802a75c:	46cb      	mov	fp, r9
 802a75e:	e026      	b.n	802a7ae <rx_dhcp_client+0x9a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 802a760:	7862      	ldrb	r2, [r4, #1]
 802a762:	2a04      	cmp	r2, #4
 802a764:	d12b      	bne.n	802a7be <rx_dhcp_client+0xaa>
 802a766:	1da2      	adds	r2, r4, #6
 802a768:	42b2      	cmp	r2, r6
 802a76a:	d228      	bcs.n	802a7be <rx_dhcp_client+0xaa>
      memcpy(&mask, p + 2, sizeof(mask));
 802a76c:	f8d4 3002 	ldr.w	r3, [r4, #2]
 802a770:	9301      	str	r3, [sp, #4]
 802a772:	e019      	b.n	802a7a8 <rx_dhcp_client+0x94>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 802a774:	7862      	ldrb	r2, [r4, #1]
 802a776:	2a04      	cmp	r2, #4
 802a778:	d123      	bne.n	802a7c2 <rx_dhcp_client+0xae>
 802a77a:	1da2      	adds	r2, r4, #6
 802a77c:	42b2      	cmp	r2, r6
 802a77e:	d220      	bcs.n	802a7c2 <rx_dhcp_client+0xae>
      ip = pkt->dhcp->yiaddr;
 802a780:	f8d8 b010 	ldr.w	fp, [r8, #16]
      memcpy(&gw, p + 2, sizeof(gw));
 802a784:	f8d4 3002 	ldr.w	r3, [r4, #2]
 802a788:	9300      	str	r3, [sp, #0]
      ip = pkt->dhcp->yiaddr;
 802a78a:	e00d      	b.n	802a7a8 <rx_dhcp_client+0x94>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 802a78c:	7862      	ldrb	r2, [r4, #1]
 802a78e:	2a04      	cmp	r2, #4
 802a790:	d11b      	bne.n	802a7ca <rx_dhcp_client+0xb6>
               p + 6 < end) {  // DNS
 802a792:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 802a794:	42b2      	cmp	r2, r6
 802a796:	d218      	bcs.n	802a7ca <rx_dhcp_client+0xb6>
      memcpy(&dns, p + 2, sizeof(dns));
 802a798:	f8d4 3002 	ldr.w	r3, [r4, #2]
 802a79c:	9305      	str	r3, [sp, #20]
 802a79e:	e003      	b.n	802a7a8 <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 802a7a0:	2b33      	cmp	r3, #51	@ 0x33
 802a7a2:	d022      	beq.n	802a7ea <rx_dhcp_client+0xd6>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 802a7a4:	2b35      	cmp	r3, #53	@ 0x35
 802a7a6:	d02b      	beq.n	802a800 <rx_dhcp_client+0xec>
    p += p[1] + 2;
 802a7a8:	7863      	ldrb	r3, [r4, #1]
 802a7aa:	3302      	adds	r3, #2
 802a7ac:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 802a7ae:	1c63      	adds	r3, r4, #1
 802a7b0:	42b3      	cmp	r3, r6
 802a7b2:	d22e      	bcs.n	802a812 <rx_dhcp_client+0xfe>
 802a7b4:	7823      	ldrb	r3, [r4, #0]
 802a7b6:	2bff      	cmp	r3, #255	@ 0xff
 802a7b8:	d02b      	beq.n	802a812 <rx_dhcp_client+0xfe>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 802a7ba:	2b01      	cmp	r3, #1
 802a7bc:	d0d0      	beq.n	802a760 <rx_dhcp_client+0x4c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 802a7be:	2b03      	cmp	r3, #3
 802a7c0:	d0d8      	beq.n	802a774 <rx_dhcp_client+0x60>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 802a7c2:	7fea      	ldrb	r2, [r5, #31]
 802a7c4:	b10a      	cbz	r2, 802a7ca <rx_dhcp_client+0xb6>
 802a7c6:	2b06      	cmp	r3, #6
 802a7c8:	d0e0      	beq.n	802a78c <rx_dhcp_client+0x78>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 802a7ca:	f895 2020 	ldrb.w	r2, [r5, #32]
 802a7ce:	2a00      	cmp	r2, #0
 802a7d0:	d0e6      	beq.n	802a7a0 <rx_dhcp_client+0x8c>
 802a7d2:	2b2a      	cmp	r3, #42	@ 0x2a
 802a7d4:	d1e4      	bne.n	802a7a0 <rx_dhcp_client+0x8c>
 802a7d6:	7862      	ldrb	r2, [r4, #1]
 802a7d8:	2a04      	cmp	r2, #4
 802a7da:	d1e1      	bne.n	802a7a0 <rx_dhcp_client+0x8c>
               p + 6 < end) {  // SNTP
 802a7dc:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 802a7de:	42b2      	cmp	r2, r6
 802a7e0:	d2de      	bcs.n	802a7a0 <rx_dhcp_client+0x8c>
      memcpy(&sntp, p + 2, sizeof(sntp));
 802a7e2:	f8d4 3002 	ldr.w	r3, [r4, #2]
 802a7e6:	9304      	str	r3, [sp, #16]
 802a7e8:	e7de      	b.n	802a7a8 <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 802a7ea:	7862      	ldrb	r2, [r4, #1]
 802a7ec:	2a04      	cmp	r2, #4
 802a7ee:	d1d9      	bne.n	802a7a4 <rx_dhcp_client+0x90>
 802a7f0:	1da2      	adds	r2, r4, #6
 802a7f2:	42b2      	cmp	r2, r6
 802a7f4:	d2d6      	bcs.n	802a7a4 <rx_dhcp_client+0x90>
      lease = mg_ntohl(lease);
 802a7f6:	f8d4 0002 	ldr.w	r0, [r4, #2]
 802a7fa:	f7fc fc87 	bl	802710c <mg_ntohl>
 802a7fe:	e7d3      	b.n	802a7a8 <rx_dhcp_client+0x94>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 802a800:	7863      	ldrb	r3, [r4, #1]
 802a802:	2b01      	cmp	r3, #1
 802a804:	d1d0      	bne.n	802a7a8 <rx_dhcp_client+0x94>
 802a806:	1da3      	adds	r3, r4, #6
 802a808:	42b3      	cmp	r3, r6
 802a80a:	d2cd      	bcs.n	802a7a8 <rx_dhcp_client+0x94>
      msgtype = p[2];
 802a80c:	f894 9002 	ldrb.w	r9, [r4, #2]
 802a810:	e7ca      	b.n	802a7a8 <rx_dhcp_client+0x94>
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 802a812:	f1b9 0f06 	cmp.w	r9, #6
 802a816:	d00d      	beq.n	802a834 <rx_dhcp_client+0x120>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802a818:	f1b9 0f02 	cmp.w	r9, #2
 802a81c:	d013      	beq.n	802a846 <rx_dhcp_client+0x132>
  } else if (msgtype == 5) {          // DHCPACK
 802a81e:	f1b9 0f05 	cmp.w	r9, #5
 802a822:	d028      	beq.n	802a876 <rx_dhcp_client+0x162>
  if (ifp->state != state) onstatechange(ifp);
 802a824:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802a828:	4553      	cmp	r3, sl
 802a82a:	f040 80b4 	bne.w	802a996 <rx_dhcp_client+0x282>
}
 802a82e:	b007      	add	sp, #28
 802a830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 802a834:	68ab      	ldr	r3, [r5, #8]
 802a836:	455b      	cmp	r3, fp
 802a838:	d1ee      	bne.n	802a818 <rx_dhcp_client+0x104>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 802a83a:	2301      	movs	r3, #1
 802a83c:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 802a840:	2300      	movs	r3, #0
 802a842:	60ab      	str	r3, [r5, #8]
 802a844:	e7ee      	b.n	802a824 <rx_dhcp_client+0x110>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802a846:	f1ba 0f01 	cmp.w	sl, #1
 802a84a:	d1e8      	bne.n	802a81e <rx_dhcp_client+0x10a>
 802a84c:	f1bb 0f00 	cmp.w	fp, #0
 802a850:	d0e5      	beq.n	802a81e <rx_dhcp_client+0x10a>
 802a852:	9b00      	ldr	r3, [sp, #0]
 802a854:	2b00      	cmp	r3, #0
 802a856:	d0e2      	beq.n	802a81e <rx_dhcp_client+0x10a>
 802a858:	2800      	cmp	r0, #0
 802a85a:	d0e0      	beq.n	802a81e <rx_dhcp_client+0x10a>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 802a85c:	f8d8 2014 	ldr.w	r2, [r8, #20]
    tx_dhcp_request_sel(ifp, ip,
 802a860:	b90a      	cbnz	r2, 802a866 <rx_dhcp_client+0x152>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 802a862:	69fb      	ldr	r3, [r7, #28]
    tx_dhcp_request_sel(ifp, ip,
 802a864:	68da      	ldr	r2, [r3, #12]
 802a866:	4659      	mov	r1, fp
 802a868:	4628      	mov	r0, r5
 802a86a:	f7ff f9c3 	bl	8029bf4 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 802a86e:	2302      	movs	r3, #2
 802a870:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 802a874:	e7d6      	b.n	802a824 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 802a876:	f1ba 0f02 	cmp.w	sl, #2
 802a87a:	d02a      	beq.n	802a8d2 <rx_dhcp_client+0x1be>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 802a87c:	f1ba 0f03 	cmp.w	sl, #3
 802a880:	d1d0      	bne.n	802a824 <rx_dhcp_client+0x110>
 802a882:	68ab      	ldr	r3, [r5, #8]
 802a884:	455b      	cmp	r3, fp
 802a886:	d1cd      	bne.n	802a824 <rx_dhcp_client+0x110>
      ifp->lease_expire = ifp->now + lease * 1000;
 802a888:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802a88a:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 802a88c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802a890:	4604      	mov	r4, r0
 802a892:	fb00 f202 	mul.w	r2, r0, r2
 802a896:	189b      	adds	r3, r3, r2
 802a898:	f141 0100 	adc.w	r1, r1, #0
 802a89c:	662b      	str	r3, [r5, #96]	@ 0x60
 802a89e:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 802a8a0:	4b3f      	ldr	r3, [pc, #252]	@ (802a9a0 <rx_dhcp_client+0x28c>)
 802a8a2:	681b      	ldr	r3, [r3, #0]
 802a8a4:	2b01      	cmp	r3, #1
 802a8a6:	ddbd      	ble.n	802a824 <rx_dhcp_client+0x110>
 802a8a8:	4b3e      	ldr	r3, [pc, #248]	@ (802a9a4 <rx_dhcp_client+0x290>)
 802a8aa:	f241 42ef 	movw	r2, #5359	@ 0x14ef
 802a8ae:	493e      	ldr	r1, [pc, #248]	@ (802a9a8 <rx_dhcp_client+0x294>)
 802a8b0:	2002      	movs	r0, #2
 802a8b2:	f7fd f805 	bl	80278c0 <mg_log_prefix>
 802a8b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802a8ba:	2300      	movs	r3, #0
 802a8bc:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 802a8c0:	f7e6 fa4a 	bl	8010d58 <__aeabi_uldivmod>
 802a8c4:	4602      	mov	r2, r0
 802a8c6:	460b      	mov	r3, r1
 802a8c8:	4621      	mov	r1, r4
 802a8ca:	4838      	ldr	r0, [pc, #224]	@ (802a9ac <rx_dhcp_client+0x298>)
 802a8cc:	f7fa fe90 	bl	80255f0 <mg_log>
 802a8d0:	e7a8      	b.n	802a824 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 802a8d2:	f1bb 0f00 	cmp.w	fp, #0
 802a8d6:	d0d1      	beq.n	802a87c <rx_dhcp_client+0x168>
 802a8d8:	9b00      	ldr	r3, [sp, #0]
 802a8da:	2b00      	cmp	r3, #0
 802a8dc:	d0ce      	beq.n	802a87c <rx_dhcp_client+0x168>
 802a8de:	4604      	mov	r4, r0
 802a8e0:	2800      	cmp	r0, #0
 802a8e2:	d0cb      	beq.n	802a87c <rx_dhcp_client+0x168>
      ifp->lease_expire = ifp->now + lease * 1000;
 802a8e4:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802a8e6:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 802a8e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802a8ec:	fb00 f202 	mul.w	r2, r0, r2
 802a8f0:	189b      	adds	r3, r3, r2
 802a8f2:	f141 0100 	adc.w	r1, r1, #0
 802a8f6:	662b      	str	r3, [r5, #96]	@ 0x60
 802a8f8:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 802a8fa:	4b29      	ldr	r3, [pc, #164]	@ (802a9a0 <rx_dhcp_client+0x28c>)
 802a8fc:	681b      	ldr	r3, [r3, #0]
 802a8fe:	2b01      	cmp	r3, #1
 802a900:	dc2e      	bgt.n	802a960 <rx_dhcp_client+0x24c>
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 802a902:	693b      	ldr	r3, [r7, #16]
 802a904:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802a908:	f8c5 2046 	str.w	r2, [r5, #70]	@ 0x46
 802a90c:	895b      	ldrh	r3, [r3, #10]
 802a90e:	f8a5 304a 	strh.w	r3, [r5, #74]	@ 0x4a
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 802a912:	f8c5 b008 	str.w	fp, [r5, #8]
 802a916:	9b00      	ldr	r3, [sp, #0]
 802a918:	612b      	str	r3, [r5, #16]
 802a91a:	9b01      	ldr	r3, [sp, #4]
 802a91c:	60eb      	str	r3, [r5, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 802a91e:	2303      	movs	r3, #3
 802a920:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      mg_random(&rand, sizeof(rand));
 802a924:	2108      	movs	r1, #8
 802a926:	eb0d 0001 	add.w	r0, sp, r1
 802a92a:	f7fc fbb4 	bl	8027096 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 802a92e:	9c02      	ldr	r4, [sp, #8]
 802a930:	f7fc ffc0 	bl	80278b4 <mg_millis>
 802a934:	4420      	add	r0, r4
 802a936:	f001 fb65 	bl	802c004 <srand>
      if (ifp->enable_req_dns && dns != 0)
 802a93a:	7feb      	ldrb	r3, [r5, #31]
 802a93c:	b10b      	cbz	r3, 802a942 <rx_dhcp_client+0x22e>
 802a93e:	9b05      	ldr	r3, [sp, #20]
 802a940:	bb1b      	cbnz	r3, 802a98a <rx_dhcp_client+0x276>
      if (ifp->enable_req_sntp && sntp != 0)
 802a942:	f895 3020 	ldrb.w	r3, [r5, #32]
 802a946:	2b00      	cmp	r3, #0
 802a948:	f43f af6c 	beq.w	802a824 <rx_dhcp_client+0x110>
 802a94c:	9b04      	ldr	r3, [sp, #16]
 802a94e:	2b00      	cmp	r3, #0
 802a950:	f43f af68 	beq.w	802a824 <rx_dhcp_client+0x110>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 802a954:	aa04      	add	r2, sp, #16
 802a956:	2102      	movs	r1, #2
 802a958:	4628      	mov	r0, r5
 802a95a:	f7f7 ff82 	bl	8022862 <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 802a95e:	e761      	b.n	802a824 <rx_dhcp_client+0x110>
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 802a960:	4b10      	ldr	r3, [pc, #64]	@ (802a9a4 <rx_dhcp_client+0x290>)
 802a962:	f241 42e1 	movw	r2, #5345	@ 0x14e1
 802a966:	4910      	ldr	r1, [pc, #64]	@ (802a9a8 <rx_dhcp_client+0x294>)
 802a968:	2002      	movs	r0, #2
 802a96a:	f7fc ffa9 	bl	80278c0 <mg_log_prefix>
 802a96e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802a972:	2300      	movs	r3, #0
 802a974:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 802a978:	f7e6 f9ee 	bl	8010d58 <__aeabi_uldivmod>
 802a97c:	4602      	mov	r2, r0
 802a97e:	460b      	mov	r3, r1
 802a980:	4621      	mov	r1, r4
 802a982:	480a      	ldr	r0, [pc, #40]	@ (802a9ac <rx_dhcp_client+0x298>)
 802a984:	f7fa fe34 	bl	80255f0 <mg_log>
 802a988:	e7bb      	b.n	802a902 <rx_dhcp_client+0x1ee>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 802a98a:	aa05      	add	r2, sp, #20
 802a98c:	2101      	movs	r1, #1
 802a98e:	4628      	mov	r0, r5
 802a990:	f7f7 ff67 	bl	8022862 <mg_tcpip_call>
 802a994:	e7d5      	b.n	802a942 <rx_dhcp_client+0x22e>
  if (ifp->state != state) onstatechange(ifp);
 802a996:	4628      	mov	r0, r5
 802a998:	f7ff fe3c 	bl	802a614 <onstatechange>
 802a99c:	e747      	b.n	802a82e <rx_dhcp_client+0x11a>
 802a99e:	bf00      	nop
 802a9a0:	2000013c 	.word	0x2000013c
 802a9a4:	0803d6e4 	.word	0x0803d6e4
 802a9a8:	0803bba0 	.word	0x0803bba0
 802a9ac:	0803c284 	.word	0x0803c284

0802a9b0 <rx_ip>:
static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802a9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a9b4:	b084      	sub	sp, #16
 802a9b6:	4605      	mov	r5, r0
 802a9b8:	460c      	mov	r4, r1
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 802a9ba:	69c9      	ldr	r1, [r1, #28]
 802a9bc:	88cb      	ldrh	r3, [r1, #6]
 802a9be:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 802a9c2:	b29b      	uxth	r3, r3
 802a9c4:	b1c3      	cbz	r3, 802a9f8 <rx_ip+0x48>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 802a9c6:	7a4b      	ldrb	r3, [r1, #9]
 802a9c8:	2b11      	cmp	r3, #17
 802a9ca:	d00e      	beq.n	802a9ea <rx_ip+0x3a>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 802a9cc:	7a4b      	ldrb	r3, [r1, #9]
 802a9ce:	2b06      	cmp	r3, #6
 802a9d0:	d00f      	beq.n	802a9f2 <rx_ip+0x42>
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 802a9d2:	2200      	movs	r2, #0
 802a9d4:	4621      	mov	r1, r4
 802a9d6:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 802a9d8:	f7f9 fa3b 	bl	8023e52 <getpeer>
    if (c) mg_error(c, "Received fragmented packet");
 802a9dc:	b110      	cbz	r0, 802a9e4 <rx_ip+0x34>
 802a9de:	4963      	ldr	r1, [pc, #396]	@ (802ab6c <rx_ip+0x1bc>)
 802a9e0:	f7fd f856 	bl	8027a90 <mg_error>
}
 802a9e4:	b004      	add	sp, #16
 802a9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 802a9ea:	f101 0314 	add.w	r3, r1, #20
 802a9ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802a9f0:	e7ec      	b.n	802a9cc <rx_ip+0x1c>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 802a9f2:	3114      	adds	r1, #20
 802a9f4:	62a1      	str	r1, [r4, #40]	@ 0x28
 802a9f6:	e7ec      	b.n	802a9d2 <rx_ip+0x22>
  } else if (pkt->ip->proto == 1) {
 802a9f8:	7a4b      	ldrb	r3, [r1, #9]
 802a9fa:	2b01      	cmp	r3, #1
 802a9fc:	d024      	beq.n	802aa48 <rx_ip+0x98>
  } else if (pkt->ip->proto == 17) {
 802a9fe:	2b11      	cmp	r3, #17
 802aa00:	d031      	beq.n	802aa66 <rx_ip+0xb6>
  } else if (pkt->ip->proto == 6) {
 802aa02:	2b06      	cmp	r3, #6
 802aa04:	d1ee      	bne.n	802a9e4 <rx_ip+0x34>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 802aa06:	f101 0314 	add.w	r3, r1, #20
 802aa0a:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 802aa0c:	68e3      	ldr	r3, [r4, #12]
 802aa0e:	2b13      	cmp	r3, #19
 802aa10:	d9e8      	bls.n	802a9e4 <rx_ip+0x34>
    mkpay(pkt, pkt->tcp + 1);
 802aa12:	3128      	adds	r1, #40	@ 0x28
 802aa14:	4620      	mov	r0, r4
 802aa16:	f7fb f88e 	bl	8025b36 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 802aa1a:	69e3      	ldr	r3, [r4, #28]
 802aa1c:	8858      	ldrh	r0, [r3, #2]
 802aa1e:	f7fc fc0d 	bl	802723c <mg_ntohs>
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 802aa22:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802aa24:	7b1b      	ldrb	r3, [r3, #12]
 802aa26:	091b      	lsrs	r3, r3, #4
 802aa28:	3305      	adds	r3, #5
 802aa2a:	009a      	lsls	r2, r3, #2
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 802aa2c:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 802aa30:	d301      	bcc.n	802aa36 <rx_ip+0x86>
 802aa32:	1a80      	subs	r0, r0, r2
 802aa34:	60e0      	str	r0, [r4, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802aa36:	4b4e      	ldr	r3, [pc, #312]	@ (802ab70 <rx_ip+0x1c0>)
 802aa38:	681b      	ldr	r3, [r3, #0]
 802aa3a:	2b03      	cmp	r3, #3
 802aa3c:	dc74      	bgt.n	802ab28 <rx_ip+0x178>
    rx_tcp(ifp, pkt);
 802aa3e:	4621      	mov	r1, r4
 802aa40:	4628      	mov	r0, r5
 802aa42:	f7ff fb47 	bl	802a0d4 <rx_tcp>
 802aa46:	e7cd      	b.n	802a9e4 <rx_ip+0x34>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 802aa48:	f101 0314 	add.w	r3, r1, #20
 802aa4c:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 802aa4e:	68e3      	ldr	r3, [r4, #12]
 802aa50:	2b03      	cmp	r3, #3
 802aa52:	d9c7      	bls.n	802a9e4 <rx_ip+0x34>
    mkpay(pkt, pkt->icmp + 1);
 802aa54:	3118      	adds	r1, #24
 802aa56:	4620      	mov	r0, r4
 802aa58:	f7fb f86d 	bl	8025b36 <mkpay>
    rx_icmp(ifp, pkt);
 802aa5c:	4621      	mov	r1, r4
 802aa5e:	4628      	mov	r0, r5
 802aa60:	f7fc fc41 	bl	80272e6 <rx_icmp>
 802aa64:	e7be      	b.n	802a9e4 <rx_ip+0x34>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 802aa66:	f101 0314 	add.w	r3, r1, #20
 802aa6a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 802aa6c:	68e3      	ldr	r3, [r4, #12]
 802aa6e:	2b07      	cmp	r3, #7
 802aa70:	d9b8      	bls.n	802a9e4 <rx_ip+0x34>
    mkpay(pkt, pkt->udp + 1);
 802aa72:	311c      	adds	r1, #28
 802aa74:	4620      	mov	r0, r4
 802aa76:	f7fb f85e 	bl	8025b36 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802aa7a:	4b3d      	ldr	r3, [pc, #244]	@ (802ab70 <rx_ip+0x1c0>)
 802aa7c:	681b      	ldr	r3, [r3, #0]
 802aa7e:	2b03      	cmp	r3, #3
 802aa80:	dc16      	bgt.n	802aab0 <rx_ip+0x100>
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 802aa82:	7f2b      	ldrb	r3, [r5, #28]
 802aa84:	b133      	cbz	r3, 802aa94 <rx_ip+0xe4>
 802aa86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802aa88:	8877      	ldrh	r7, [r6, #2]
 802aa8a:	2044      	movs	r0, #68	@ 0x44
 802aa8c:	f7fc fbd6 	bl	802723c <mg_ntohs>
 802aa90:	4287      	cmp	r7, r0
 802aa92:	d02f      	beq.n	802aaf4 <rx_ip+0x144>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 802aa94:	7f6b      	ldrb	r3, [r5, #29]
 802aa96:	b133      	cbz	r3, 802aaa6 <rx_ip+0xf6>
 802aa98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802aa9a:	8877      	ldrh	r7, [r6, #2]
 802aa9c:	2043      	movs	r0, #67	@ 0x43
 802aa9e:	f7fc fbcd 	bl	802723c <mg_ntohs>
 802aaa2:	4287      	cmp	r7, r0
 802aaa4:	d033      	beq.n	802ab0e <rx_ip+0x15e>
      rx_udp(ifp, pkt);
 802aaa6:	4621      	mov	r1, r4
 802aaa8:	4628      	mov	r0, r5
 802aaaa:	f7fd fe07 	bl	80286bc <rx_udp>
 802aaae:	e799      	b.n	802a9e4 <rx_ip+0x34>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802aab0:	4b30      	ldr	r3, [pc, #192]	@ (802ab74 <rx_ip+0x1c4>)
 802aab2:	f241 6255 	movw	r2, #5717	@ 0x1655
 802aab6:	4930      	ldr	r1, [pc, #192]	@ (802ab78 <rx_ip+0x1c8>)
 802aab8:	2004      	movs	r0, #4
 802aaba:	f7fc ff01 	bl	80278c0 <mg_log_prefix>
 802aabe:	69e7      	ldr	r7, [r4, #28]
 802aac0:	f8d4 802c 	ldr.w	r8, [r4, #44]	@ 0x2c
 802aac4:	f8b8 0000 	ldrh.w	r0, [r8]
 802aac8:	f7fc fbb8 	bl	802723c <mg_ntohs>
 802aacc:	4606      	mov	r6, r0
 802aace:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 802aad2:	f7fc fbb3 	bl	802723c <mg_ntohs>
 802aad6:	68e3      	ldr	r3, [r4, #12]
 802aad8:	4928      	ldr	r1, [pc, #160]	@ (802ab7c <rx_ip+0x1cc>)
 802aada:	9303      	str	r3, [sp, #12]
 802aadc:	9002      	str	r0, [sp, #8]
 802aade:	f107 0310 	add.w	r3, r7, #16
 802aae2:	9301      	str	r3, [sp, #4]
 802aae4:	9100      	str	r1, [sp, #0]
 802aae6:	4633      	mov	r3, r6
 802aae8:	f107 020c 	add.w	r2, r7, #12
 802aaec:	4824      	ldr	r0, [pc, #144]	@ (802ab80 <rx_ip+0x1d0>)
 802aaee:	f7fa fd7f 	bl	80255f0 <mg_log>
 802aaf2:	e7c6      	b.n	802aa82 <rx_ip+0xd2>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 802aaf4:	f106 0308 	add.w	r3, r6, #8
 802aaf8:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 802aafa:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 802aafe:	4620      	mov	r0, r4
 802ab00:	f7fb f819 	bl	8025b36 <mkpay>
      rx_dhcp_client(ifp, pkt);
 802ab04:	4621      	mov	r1, r4
 802ab06:	4628      	mov	r0, r5
 802ab08:	f7ff fe04 	bl	802a714 <rx_dhcp_client>
 802ab0c:	e76a      	b.n	802a9e4 <rx_ip+0x34>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 802ab0e:	f106 0308 	add.w	r3, r6, #8
 802ab12:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 802ab14:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 802ab18:	4620      	mov	r0, r4
 802ab1a:	f7fb f80c 	bl	8025b36 <mkpay>
      rx_dhcp_server(ifp, pkt);
 802ab1e:	4621      	mov	r1, r4
 802ab20:	4628      	mov	r0, r5
 802ab22:	f7fc fd0b 	bl	802753c <rx_dhcp_server>
 802ab26:	e75d      	b.n	802a9e4 <rx_ip+0x34>
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802ab28:	4b12      	ldr	r3, [pc, #72]	@ (802ab74 <rx_ip+0x1c4>)
 802ab2a:	f241 626a 	movw	r2, #5738	@ 0x166a
 802ab2e:	4912      	ldr	r1, [pc, #72]	@ (802ab78 <rx_ip+0x1c8>)
 802ab30:	2004      	movs	r0, #4
 802ab32:	f7fc fec5 	bl	80278c0 <mg_log_prefix>
 802ab36:	69e7      	ldr	r7, [r4, #28]
 802ab38:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 802ab3c:	f8b8 0000 	ldrh.w	r0, [r8]
 802ab40:	f7fc fb7c 	bl	802723c <mg_ntohs>
 802ab44:	4606      	mov	r6, r0
 802ab46:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 802ab4a:	f7fc fb77 	bl	802723c <mg_ntohs>
 802ab4e:	68e3      	ldr	r3, [r4, #12]
 802ab50:	490a      	ldr	r1, [pc, #40]	@ (802ab7c <rx_ip+0x1cc>)
 802ab52:	9303      	str	r3, [sp, #12]
 802ab54:	9002      	str	r0, [sp, #8]
 802ab56:	f107 0310 	add.w	r3, r7, #16
 802ab5a:	9301      	str	r3, [sp, #4]
 802ab5c:	9100      	str	r1, [sp, #0]
 802ab5e:	4633      	mov	r3, r6
 802ab60:	f107 020c 	add.w	r2, r7, #12
 802ab64:	4807      	ldr	r0, [pc, #28]	@ (802ab84 <rx_ip+0x1d4>)
 802ab66:	f7fa fd43 	bl	80255f0 <mg_log>
 802ab6a:	e768      	b.n	802aa3e <rx_ip+0x8e>
 802ab6c:	0803c29c 	.word	0x0803c29c
 802ab70:	2000013c 	.word	0x2000013c
 802ab74:	0803d6f4 	.word	0x0803d6f4
 802ab78:	0803bba0 	.word	0x0803bba0
 802ab7c:	080255b1 	.word	0x080255b1
 802ab80:	0803c2b8 	.word	0x0803c2b8
 802ab84:	0803c2d4 	.word	0x0803c2d4

0802ab88 <mg_tcpip_rx>:
static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 802ab88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ab8c:	b08e      	sub	sp, #56	@ 0x38
 802ab8e:	4606      	mov	r6, r0
 802ab90:	460c      	mov	r4, r1
 802ab92:	4615      	mov	r5, r2
  memset(&pkt, 0, sizeof(pkt));
 802ab94:	2234      	movs	r2, #52	@ 0x34
 802ab96:	2100      	movs	r1, #0
 802ab98:	a801      	add	r0, sp, #4
 802ab9a:	f001 fe31 	bl	802c800 <memset>
  pkt.raw.buf = (char *) buf;
 802ab9e:	9401      	str	r4, [sp, #4]
  pkt.raw.len = len;
 802aba0:	9502      	str	r5, [sp, #8]
  pkt.eth = (struct eth *) buf;
 802aba2:	9405      	str	r4, [sp, #20]
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 802aba4:	2d0d      	cmp	r5, #13
 802aba6:	d93f      	bls.n	802ac28 <mg_tcpip_rx+0xa0>
  if (ifp->enable_mac_check &&
 802aba8:	f896 3022 	ldrb.w	r3, [r6, #34]	@ 0x22
 802abac:	b15b      	cbz	r3, 802abc6 <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 802abae:	2206      	movs	r2, #6
 802abb0:	4631      	mov	r1, r6
 802abb2:	4620      	mov	r0, r4
 802abb4:	f001 fdfa 	bl	802c7ac <memcmp>
  if (ifp->enable_mac_check &&
 802abb8:	b128      	cbz	r0, 802abc6 <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 802abba:	2206      	movs	r2, #6
 802abbc:	4945      	ldr	r1, [pc, #276]	@ (802acd4 <mg_tcpip_rx+0x14c>)
 802abbe:	4620      	mov	r0, r4
 802abc0:	f001 fdf4 	bl	802c7ac <memcmp>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 802abc4:	bb80      	cbnz	r0, 802ac28 <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 802abc6:	f896 3021 	ldrb.w	r3, [r6, #33]	@ 0x21
 802abca:	b18b      	cbz	r3, 802abf0 <mg_tcpip_rx+0x68>
 802abcc:	2d04      	cmp	r5, #4
 802abce:	d92e      	bls.n	802ac2e <mg_tcpip_rx+0xa6>
    len -= 4;  // TODO(scaprile): check on bigendian
 802abd0:	f1a5 0804 	sub.w	r8, r5, #4
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 802abd4:	4642      	mov	r2, r8
 802abd6:	4621      	mov	r1, r4
 802abd8:	2000      	movs	r0, #0
 802abda:	f7fc fde5 	bl	80277a8 <mg_crc32>
 802abde:	9000      	str	r0, [sp, #0]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 802abe0:	2204      	movs	r2, #4
 802abe2:	4669      	mov	r1, sp
 802abe4:	eb04 0008 	add.w	r0, r4, r8
 802abe8:	f001 fde0 	bl	802c7ac <memcmp>
 802abec:	b108      	cbz	r0, 802abf2 <mg_tcpip_rx+0x6a>
 802abee:	e01b      	b.n	802ac28 <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 802abf0:	46a8      	mov	r8, r5
  if (pkt.eth->type == mg_htons(0x806)) {
 802abf2:	89a7      	ldrh	r7, [r4, #12]
 802abf4:	f640 0006 	movw	r0, #2054	@ 0x806
 802abf8:	f7fc fb20 	bl	802723c <mg_ntohs>
 802abfc:	4287      	cmp	r7, r0
 802abfe:	d018      	beq.n	802ac32 <mg_tcpip_rx+0xaa>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 802ac00:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 802ac04:	f7fc fb1a 	bl	802723c <mg_ntohs>
 802ac08:	4287      	cmp	r7, r0
 802ac0a:	d01b      	beq.n	802ac44 <mg_tcpip_rx+0xbc>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 802ac0c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 802ac10:	f7fc fb14 	bl	802723c <mg_ntohs>
 802ac14:	4287      	cmp	r7, r0
 802ac16:	d028      	beq.n	802ac6a <mg_tcpip_rx+0xe2>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 802ac18:	4b2f      	ldr	r3, [pc, #188]	@ (802acd8 <mg_tcpip_rx+0x150>)
 802ac1a:	681b      	ldr	r3, [r3, #0]
 802ac1c:	2b02      	cmp	r3, #2
 802ac1e:	dc41      	bgt.n	802aca4 <mg_tcpip_rx+0x11c>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 802ac20:	4b2d      	ldr	r3, [pc, #180]	@ (802acd8 <mg_tcpip_rx+0x150>)
 802ac22:	681b      	ldr	r3, [r3, #0]
 802ac24:	2b03      	cmp	r3, #3
 802ac26:	dc4d      	bgt.n	802acc4 <mg_tcpip_rx+0x13c>
}
 802ac28:	b00e      	add	sp, #56	@ 0x38
 802ac2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ifp->enable_crc32_check && len > 4) {
 802ac2e:	46a8      	mov	r8, r5
 802ac30:	e7df      	b.n	802abf2 <mg_tcpip_rx+0x6a>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 802ac32:	340e      	adds	r4, #14
 802ac34:	9407      	str	r4, [sp, #28]
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 802ac36:	2d29      	cmp	r5, #41	@ 0x29
 802ac38:	d9f6      	bls.n	802ac28 <mg_tcpip_rx+0xa0>
    rx_arp(ifp, &pkt);
 802ac3a:	a901      	add	r1, sp, #4
 802ac3c:	4630      	mov	r0, r6
 802ac3e:	f7fe ff13 	bl	8029a68 <rx_arp>
 802ac42:	e7f1      	b.n	802ac28 <mg_tcpip_rx+0xa0>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 802ac44:	f104 030e 	add.w	r3, r4, #14
 802ac48:	9309      	str	r3, [sp, #36]	@ 0x24
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 802ac4a:	2d35      	cmp	r5, #53	@ 0x35
 802ac4c:	d9ec      	bls.n	802ac28 <mg_tcpip_rx+0xa0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 802ac4e:	7ba3      	ldrb	r3, [r4, #14]
 802ac50:	091b      	lsrs	r3, r3, #4
 802ac52:	2b06      	cmp	r3, #6
 802ac54:	d1e8      	bne.n	802ac28 <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip6 + 1);
 802ac56:	f104 0136 	add.w	r1, r4, #54	@ 0x36
 802ac5a:	a801      	add	r0, sp, #4
 802ac5c:	f7fa ff6b 	bl	8025b36 <mkpay>
    rx_ip6(ifp, &pkt);
 802ac60:	a901      	add	r1, sp, #4
 802ac62:	4630      	mov	r0, r6
 802ac64:	f7fc fb79 	bl	802735a <rx_ip6>
 802ac68:	e7de      	b.n	802ac28 <mg_tcpip_rx+0xa0>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 802ac6a:	f104 030e 	add.w	r3, r4, #14
 802ac6e:	9308      	str	r3, [sp, #32]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 802ac70:	2d21      	cmp	r5, #33	@ 0x21
 802ac72:	d9d9      	bls.n	802ac28 <mg_tcpip_rx+0xa0>
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 802ac74:	8a20      	ldrh	r0, [r4, #16]
 802ac76:	f7fc fae1 	bl	802723c <mg_ntohs>
 802ac7a:	300e      	adds	r0, #14
 802ac7c:	42a8      	cmp	r0, r5
 802ac7e:	d200      	bcs.n	802ac82 <mg_tcpip_rx+0xfa>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 802ac80:	9002      	str	r0, [sp, #8]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 802ac82:	9b02      	ldr	r3, [sp, #8]
 802ac84:	2b21      	cmp	r3, #33	@ 0x21
 802ac86:	d9cf      	bls.n	802ac28 <mg_tcpip_rx+0xa0>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 802ac88:	7ba3      	ldrb	r3, [r4, #14]
 802ac8a:	091b      	lsrs	r3, r3, #4
 802ac8c:	2b04      	cmp	r3, #4
 802ac8e:	d1cb      	bne.n	802ac28 <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip + 1);
 802ac90:	f104 0122 	add.w	r1, r4, #34	@ 0x22
 802ac94:	a801      	add	r0, sp, #4
 802ac96:	f7fa ff4e 	bl	8025b36 <mkpay>
    rx_ip(ifp, &pkt);
 802ac9a:	a901      	add	r1, sp, #4
 802ac9c:	4630      	mov	r0, r6
 802ac9e:	f7ff fe87 	bl	802a9b0 <rx_ip>
 802aca2:	e7c1      	b.n	802ac28 <mg_tcpip_rx+0xa0>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 802aca4:	4b0d      	ldr	r3, [pc, #52]	@ (802acdc <mg_tcpip_rx+0x154>)
 802aca6:	f241 62a8 	movw	r2, #5800	@ 0x16a8
 802acaa:	490d      	ldr	r1, [pc, #52]	@ (802ace0 <mg_tcpip_rx+0x158>)
 802acac:	2003      	movs	r0, #3
 802acae:	f7fc fe07 	bl	80278c0 <mg_log_prefix>
 802acb2:	9b05      	ldr	r3, [sp, #20]
 802acb4:	8998      	ldrh	r0, [r3, #12]
 802acb6:	f7fc fac1 	bl	802723c <mg_ntohs>
 802acba:	4601      	mov	r1, r0
 802acbc:	4809      	ldr	r0, [pc, #36]	@ (802ace4 <mg_tcpip_rx+0x15c>)
 802acbe:	f7fa fc97 	bl	80255f0 <mg_log>
 802acc2:	e7ad      	b.n	802ac20 <mg_tcpip_rx+0x98>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 802acc4:	4641      	mov	r1, r8
 802acc6:	2920      	cmp	r1, #32
 802acc8:	bf28      	it	cs
 802acca:	2120      	movcs	r1, #32
 802accc:	4620      	mov	r0, r4
 802acce:	f7f9 fddb 	bl	8024888 <mg_hexdump>
 802acd2:	e7a9      	b.n	802ac28 <mg_tcpip_rx+0xa0>
 802acd4:	0803d860 	.word	0x0803d860
 802acd8:	2000013c 	.word	0x2000013c
 802acdc:	0803d704 	.word	0x0803d704
 802ace0:	0803bba0 	.word	0x0803bba0
 802ace4:	0803c2f0 	.word	0x0803c2f0

0802ace8 <mg_tcpip_poll>:
static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 802ace8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802acec:	b08b      	sub	sp, #44	@ 0x2c
 802acee:	4605      	mov	r5, r0
 802acf0:	4616      	mov	r6, r2
 802acf2:	461f      	mov	r7, r3
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 802acf4:	9200      	str	r2, [sp, #0]
 802acf6:	9301      	str	r3, [sp, #4]
 802acf8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802acfc:	2300      	movs	r3, #0
 802acfe:	3058      	adds	r0, #88	@ 0x58
 802ad00:	f7fc f86e 	bl	8026de0 <mg_timer_expired>
  ifp->now = now;
 802ad04:	652e      	str	r6, [r5, #80]	@ 0x50
 802ad06:	656f      	str	r7, [r5, #84]	@ 0x54
  if (expired_1000ms && ifp->driver->up) {
 802ad08:	4604      	mov	r4, r0
 802ad0a:	b318      	cbz	r0, 802ad54 <mg_tcpip_poll+0x6c>
 802ad0c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 802ad0e:	68db      	ldr	r3, [r3, #12]
 802ad10:	b303      	cbz	r3, 802ad54 <mg_tcpip_poll+0x6c>
    bool up = ifp->driver->up(ifp);
 802ad12:	4628      	mov	r0, r5
 802ad14:	4798      	blx	r3
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 802ad16:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802ad1a:	3b00      	subs	r3, #0
 802ad1c:	bf18      	it	ne
 802ad1e:	2301      	movne	r3, #1
    if (up != current) {
 802ad20:	4298      	cmp	r0, r3
 802ad22:	d010      	beq.n	802ad46 <mg_tcpip_poll+0x5e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 802ad24:	b120      	cbz	r0, 802ad30 <mg_tcpip_poll+0x48>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 802ad26:	7f2b      	ldrb	r3, [r5, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 802ad28:	2b00      	cmp	r3, #0
 802ad2a:	d06e      	beq.n	802ae0a <mg_tcpip_poll+0x122>
 802ad2c:	2301      	movs	r3, #1
 802ad2e:	e000      	b.n	802ad32 <mg_tcpip_poll+0x4a>
 802ad30:	2300      	movs	r3, #0
 802ad32:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 802ad36:	b918      	cbnz	r0, 802ad40 <mg_tcpip_poll+0x58>
 802ad38:	7f2b      	ldrb	r3, [r5, #28]
 802ad3a:	b10b      	cbz	r3, 802ad40 <mg_tcpip_poll+0x58>
 802ad3c:	2300      	movs	r3, #0
 802ad3e:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 802ad40:	4628      	mov	r0, r5
 802ad42:	f7ff fc67 	bl	802a614 <onstatechange>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 802ad46:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802ad4a:	b91b      	cbnz	r3, 802ad54 <mg_tcpip_poll+0x6c>
 802ad4c:	4ba8      	ldr	r3, [pc, #672]	@ (802aff0 <mg_tcpip_poll+0x308>)
 802ad4e:	681b      	ldr	r3, [r3, #0]
 802ad50:	2b00      	cmp	r3, #0
 802ad52:	dc5c      	bgt.n	802ae0e <mg_tcpip_poll+0x126>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 802ad54:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802ad58:	2b00      	cmp	r3, #0
 802ad5a:	f000 8146 	beq.w	802afea <mg_tcpip_poll+0x302>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 802ad5e:	2b01      	cmp	r3, #1
 802ad60:	d060      	beq.n	802ae24 <mg_tcpip_poll+0x13c>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 802ad62:	2c00      	cmp	r4, #0
 802ad64:	d05f      	beq.n	802ae26 <mg_tcpip_poll+0x13e>
 802ad66:	2b03      	cmp	r3, #3
 802ad68:	d15d      	bne.n	802ae26 <mg_tcpip_poll+0x13e>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 802ad6a:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 802ad6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 802ad6e:	ea52 0103 	orrs.w	r1, r2, r3
 802ad72:	d058      	beq.n	802ae26 <mg_tcpip_poll+0x13e>
    if (ifp->now >= ifp->lease_expire) {
 802ad74:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 802ad76:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 802ad78:	4290      	cmp	r0, r2
 802ad7a:	eb71 0403 	sbcs.w	r4, r1, r3
 802ad7e:	d262      	bcs.n	802ae46 <mg_tcpip_poll+0x15e>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 802ad80:	4c9c      	ldr	r4, [pc, #624]	@ (802aff4 <mg_tcpip_poll+0x30c>)
 802ad82:	1904      	adds	r4, r0, r4
 802ad84:	f141 0c00 	adc.w	ip, r1, #0
 802ad88:	42a2      	cmp	r2, r4
 802ad8a:	eb73 030c 	sbcs.w	r3, r3, ip
 802ad8e:	d24a      	bcs.n	802ae26 <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 802ad90:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802ad94:	2300      	movs	r3, #0
 802ad96:	f7e5 ffdf 	bl	8010d58 <__aeabi_uldivmod>
 802ad9a:	4602      	mov	r2, r0
 802ad9c:	2000      	movs	r0, #0
 802ad9e:	1853      	adds	r3, r2, r1
 802ada0:	d25a      	bcs.n	802ae58 <mg_tcpip_poll+0x170>
 802ada2:	4403      	add	r3, r0
 802ada4:	4894      	ldr	r0, [pc, #592]	@ (802aff8 <mg_tcpip_poll+0x310>)
 802ada6:	fba0 4003 	umull	r4, r0, r0, r3
 802adaa:	08c0      	lsrs	r0, r0, #3
 802adac:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 802adb0:	1a1b      	subs	r3, r3, r0
 802adb2:	1ad3      	subs	r3, r2, r3
 802adb4:	f161 0c00 	sbc.w	ip, r1, #0
 802adb8:	4c90      	ldr	r4, [pc, #576]	@ (802affc <mg_tcpip_poll+0x314>)
 802adba:	f04f 30ee 	mov.w	r0, #4008636142	@ 0xeeeeeeee
 802adbe:	fb03 f000 	mul.w	r0, r3, r0
 802adc2:	fb04 000c 	mla	r0, r4, ip, r0
 802adc6:	fba3 3404 	umull	r3, r4, r3, r4
 802adca:	4420      	add	r0, r4
 802adcc:	089b      	lsrs	r3, r3, #2
 802adce:	ea43 7380 	orr.w	r3, r3, r0, lsl #30
 802add2:	0880      	lsrs	r0, r0, #2
 802add4:	0104      	lsls	r4, r0, #4
 802add6:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 802adda:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 802adde:	ebbc 0c03 	subs.w	ip, ip, r3
 802ade2:	eb64 0300 	sbc.w	r3, r4, r0
 802ade6:	009b      	lsls	r3, r3, #2
 802ade8:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 802adec:	ea4f 008c 	mov.w	r0, ip, lsl #2
 802adf0:	1a12      	subs	r2, r2, r0
 802adf2:	eb61 0103 	sbc.w	r1, r1, r3
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 802adf6:	430a      	orrs	r2, r1
 802adf8:	d115      	bne.n	802ae26 <mg_tcpip_poll+0x13e>
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 802adfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802adfe:	68aa      	ldr	r2, [r5, #8]
 802ae00:	497f      	ldr	r1, [pc, #508]	@ (802b000 <mg_tcpip_poll+0x318>)
 802ae02:	4628      	mov	r0, r5
 802ae04:	f7fe fe08 	bl	8029a18 <tx_dhcp_request_re>
 802ae08:	e00d      	b.n	802ae26 <mg_tcpip_poll+0x13e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 802ae0a:	2303      	movs	r3, #3
 802ae0c:	e791      	b.n	802ad32 <mg_tcpip_poll+0x4a>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 802ae0e:	4b7d      	ldr	r3, [pc, #500]	@ (802b004 <mg_tcpip_poll+0x31c>)
 802ae10:	f241 62c5 	movw	r2, #5829	@ 0x16c5
 802ae14:	497c      	ldr	r1, [pc, #496]	@ (802b008 <mg_tcpip_poll+0x320>)
 802ae16:	2001      	movs	r0, #1
 802ae18:	f7fc fd52 	bl	80278c0 <mg_log_prefix>
 802ae1c:	487b      	ldr	r0, [pc, #492]	@ (802b00c <mg_tcpip_poll+0x324>)
 802ae1e:	f7fa fbe7 	bl	80255f0 <mg_log>
 802ae22:	e797      	b.n	802ad54 <mg_tcpip_poll+0x6c>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 802ae24:	b95c      	cbnz	r4, 802ae3e <mg_tcpip_poll+0x156>
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 802ae26:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 802ae28:	689b      	ldr	r3, [r3, #8]
 802ae2a:	b1fb      	cbz	r3, 802ae6c <mg_tcpip_poll+0x184>
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 802ae2c:	462a      	mov	r2, r5
 802ae2e:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 802ae30:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 802ae32:	4798      	blx	r3
    if (len > 0) {
 802ae34:	4602      	mov	r2, r0
 802ae36:	b988      	cbnz	r0, 802ae5c <mg_tcpip_poll+0x174>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 802ae38:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802ae3a:	681c      	ldr	r4, [r3, #0]
 802ae3c:	e0a3      	b.n	802af86 <mg_tcpip_poll+0x29e>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 802ae3e:	4628      	mov	r0, r5
 802ae40:	f7fe fdb4 	bl	80299ac <tx_dhcp_discover>
 802ae44:	e7ef      	b.n	802ae26 <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 802ae46:	2301      	movs	r3, #1
 802ae48:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 802ae4c:	2300      	movs	r3, #0
 802ae4e:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 802ae50:	4628      	mov	r0, r5
 802ae52:	f7ff fbdf 	bl	802a614 <onstatechange>
 802ae56:	e7e6      	b.n	802ae26 <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 802ae58:	2001      	movs	r0, #1
 802ae5a:	e7a2      	b.n	802ada2 <mg_tcpip_poll+0xba>
      ifp->nrecv++;
 802ae5c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 802ae5e:	3301      	adds	r3, #1
 802ae60:	672b      	str	r3, [r5, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 802ae62:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 802ae64:	4628      	mov	r0, r5
 802ae66:	f7ff fe8f 	bl	802ab88 <mg_tcpip_rx>
 802ae6a:	e7e5      	b.n	802ae38 <mg_tcpip_poll+0x150>
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 802ae6c:	f105 0434 	add.w	r4, r5, #52	@ 0x34
 802ae70:	a909      	add	r1, sp, #36	@ 0x24
 802ae72:	4620      	mov	r0, r4
 802ae74:	f7fa fcc7 	bl	8025806 <mg_queue_next>
    if (len > 0) {
 802ae78:	4680      	mov	r8, r0
 802ae7a:	2800      	cmp	r0, #0
 802ae7c:	d0dc      	beq.n	802ae38 <mg_tcpip_poll+0x150>
      mg_tcpip_rx(ifp, buf, len);
 802ae7e:	4602      	mov	r2, r0
 802ae80:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802ae82:	4628      	mov	r0, r5
 802ae84:	f7ff fe80 	bl	802ab88 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 802ae88:	4641      	mov	r1, r8
 802ae8a:	4620      	mov	r0, r4
 802ae8c:	f7fa fcd7 	bl	802583e <mg_queue_del>
 802ae90:	e7d2      	b.n	802ae38 <mg_tcpip_poll+0x150>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 802ae92:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 802ae96:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 802ae9a:	4291      	cmp	r1, r2
 802ae9c:	f000 8088 	beq.w	802afb0 <mg_tcpip_poll+0x2c8>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 802aea0:	4b53      	ldr	r3, [pc, #332]	@ (802aff0 <mg_tcpip_poll+0x308>)
 802aea2:	681b      	ldr	r3, [r3, #0]
 802aea4:	2b03      	cmp	r3, #3
 802aea6:	dc23      	bgt.n	802aef0 <mg_tcpip_poll+0x208>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 802aea8:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 802aeac:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 802aeb0:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 802aeb4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 802aeb8:	f7fc f928 	bl	802710c <mg_ntohl>
 802aebc:	9007      	str	r0, [sp, #28]
 802aebe:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 802aec2:	f7fc f923 	bl	802710c <mg_ntohl>
 802aec6:	2300      	movs	r3, #0
 802aec8:	9305      	str	r3, [sp, #20]
 802aeca:	9304      	str	r3, [sp, #16]
 802aecc:	9003      	str	r0, [sp, #12]
 802aece:	9b07      	ldr	r3, [sp, #28]
 802aed0:	9302      	str	r3, [sp, #8]
 802aed2:	f8cd b004 	str.w	fp, [sp, #4]
 802aed6:	f8cd a000 	str.w	sl, [sp]
 802aeda:	2310      	movs	r3, #16
 802aedc:	4642      	mov	r2, r8
 802aede:	4649      	mov	r1, r9
 802aee0:	4628      	mov	r0, r5
 802aee2:	f7fe f9ed 	bl	80292c0 <tx_tcp>
        s->acked = s->ack;
 802aee6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 802aeea:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 802aeee:	e045      	b.n	802af7c <mg_tcpip_poll+0x294>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 802aef0:	4b44      	ldr	r3, [pc, #272]	@ (802b004 <mg_tcpip_poll+0x31c>)
 802aef2:	f241 62f1 	movw	r2, #5873	@ 0x16f1
 802aef6:	4944      	ldr	r1, [pc, #272]	@ (802b008 <mg_tcpip_poll+0x320>)
 802aef8:	2004      	movs	r0, #4
 802aefa:	f7fc fce1 	bl	80278c0 <mg_log_prefix>
 802aefe:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 802af02:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 802af06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802af08:	4841      	ldr	r0, [pc, #260]	@ (802b010 <mg_tcpip_poll+0x328>)
 802af0a:	f7fa fb71 	bl	80255f0 <mg_log>
 802af0e:	e7cb      	b.n	802aea8 <mg_tcpip_poll+0x1c0>
        mg_error(c, "ARP timeout");
 802af10:	4940      	ldr	r1, [pc, #256]	@ (802b014 <mg_tcpip_poll+0x32c>)
 802af12:	4620      	mov	r0, r4
 802af14:	f7fc fdbc 	bl	8027a90 <mg_error>
 802af18:	e030      	b.n	802af7c <mg_tcpip_poll+0x294>
        mg_error(c, "Connection timeout");
 802af1a:	493f      	ldr	r1, [pc, #252]	@ (802b018 <mg_tcpip_poll+0x330>)
 802af1c:	4620      	mov	r0, r4
 802af1e:	f7fc fdb7 	bl	8027a90 <mg_error>
 802af22:	e02b      	b.n	802af7c <mg_tcpip_poll+0x294>
        c->is_closing = 1;
 802af24:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802af28:	f043 0320 	orr.w	r3, r3, #32
 802af2c:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        continue;
 802af30:	e028      	b.n	802af84 <mg_tcpip_poll+0x29c>
          mg_error(c, "keepalive");
 802af32:	493a      	ldr	r1, [pc, #232]	@ (802b01c <mg_tcpip_poll+0x334>)
 802af34:	4620      	mov	r0, r4
 802af36:	f7fc fdab 	bl	8027a90 <mg_error>
 802af3a:	e01f      	b.n	802af7c <mg_tcpip_poll+0x294>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 802af3c:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 802af40:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 802af44:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 802af48:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 802af4c:	3801      	subs	r0, #1
 802af4e:	f7fc f8dd 	bl	802710c <mg_ntohl>
 802af52:	9007      	str	r0, [sp, #28]
 802af54:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 802af58:	f7fc f8d8 	bl	802710c <mg_ntohl>
 802af5c:	2300      	movs	r3, #0
 802af5e:	9305      	str	r3, [sp, #20]
 802af60:	9304      	str	r3, [sp, #16]
 802af62:	9003      	str	r0, [sp, #12]
 802af64:	9b07      	ldr	r3, [sp, #28]
 802af66:	9302      	str	r3, [sp, #8]
 802af68:	f8cd b004 	str.w	fp, [sp, #4]
 802af6c:	f8cd a000 	str.w	sl, [sp]
 802af70:	2310      	movs	r3, #16
 802af72:	4642      	mov	r2, r8
 802af74:	4649      	mov	r1, r9
 802af76:	4628      	mov	r0, r5
 802af78:	f7fe f9a2 	bl	80292c0 <tx_tcp>
      settmout(c, MIP_TTYPE_KEEPALIVE);
 802af7c:	2100      	movs	r1, #0
 802af7e:	4620      	mov	r0, r4
 802af80:	f7fe fa7a 	bl	8029478 <settmout>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 802af84:	6824      	ldr	r4, [r4, #0]
 802af86:	b384      	cbz	r4, 802afea <mg_tcpip_poll+0x302>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 802af88:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	@ 0xac
 802af8c:	f240 1209 	movw	r2, #265	@ 0x109
 802af90:	421a      	tst	r2, r3
 802af92:	d1f7      	bne.n	802af84 <mg_tcpip_poll+0x29c>
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 802af94:	f8d4 801c 	ldr.w	r8, [r4, #28]
    if (now > s->timer) {
 802af98:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 802af9c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 802afa0:	42b2      	cmp	r2, r6
 802afa2:	41bb      	sbcs	r3, r7
 802afa4:	d2ee      	bcs.n	802af84 <mg_tcpip_poll+0x29c>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 802afa6:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 802afaa:	2b01      	cmp	r3, #1
 802afac:	f43f af71 	beq.w	802ae92 <mg_tcpip_poll+0x1aa>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 802afb0:	2b02      	cmp	r3, #2
 802afb2:	d0ad      	beq.n	802af10 <mg_tcpip_poll+0x228>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 802afb4:	2b03      	cmp	r3, #3
 802afb6:	d0b0      	beq.n	802af1a <mg_tcpip_poll+0x232>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 802afb8:	2b04      	cmp	r3, #4
 802afba:	d0b3      	beq.n	802af24 <mg_tcpip_poll+0x23c>
        if (s->tmiss++ > 2) {
 802afbc:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 802afc0:	1c5a      	adds	r2, r3, #1
 802afc2:	f884 20cf 	strb.w	r2, [r4, #207]	@ 0xcf
 802afc6:	2b02      	cmp	r3, #2
 802afc8:	d8b3      	bhi.n	802af32 <mg_tcpip_poll+0x24a>
          MG_VERBOSE(("%lu keepalive", c->id));
 802afca:	4b09      	ldr	r3, [pc, #36]	@ (802aff0 <mg_tcpip_poll+0x308>)
 802afcc:	681b      	ldr	r3, [r3, #0]
 802afce:	2b03      	cmp	r3, #3
 802afd0:	ddb4      	ble.n	802af3c <mg_tcpip_poll+0x254>
 802afd2:	4b0c      	ldr	r3, [pc, #48]	@ (802b004 <mg_tcpip_poll+0x31c>)
 802afd4:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 802afd8:	490b      	ldr	r1, [pc, #44]	@ (802b008 <mg_tcpip_poll+0x320>)
 802afda:	2004      	movs	r0, #4
 802afdc:	f7fc fc70 	bl	80278c0 <mg_log_prefix>
 802afe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802afe2:	480f      	ldr	r0, [pc, #60]	@ (802b020 <mg_tcpip_poll+0x338>)
 802afe4:	f7fa fb04 	bl	80255f0 <mg_log>
 802afe8:	e7a8      	b.n	802af3c <mg_tcpip_poll+0x254>
}
 802afea:	b00b      	add	sp, #44	@ 0x2c
 802afec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aff0:	2000013c 	.word	0x2000013c
 802aff4:	001b7740 	.word	0x001b7740
 802aff8:	88888889 	.word	0x88888889
 802affc:	eeeeeeef 	.word	0xeeeeeeef
 802b000:	0803d860 	.word	0x0803d860
 802b004:	0803d748 	.word	0x0803d748
 802b008:	0803bba0 	.word	0x0803bba0
 802b00c:	0803c304 	.word	0x0803c304
 802b010:	0803c314 	.word	0x0803c314
 802b014:	0803c324 	.word	0x0803c324
 802b018:	0803c330 	.word	0x0803c330
 802b01c:	0803c348 	.word	0x0803c348
 802b020:	0803c344 	.word	0x0803c344

0802b024 <mg_mgr_poll>:
void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 802b024:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b026:	b087      	sub	sp, #28
 802b028:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 802b02a:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
  uint64_t now = mg_millis();
 802b02c:	f7fc fc42 	bl	80278b4 <mg_millis>
 802b030:	4602      	mov	r2, r0
 802b032:	460b      	mov	r3, r1
 802b034:	9004      	str	r0, [sp, #16]
 802b036:	9105      	str	r1, [sp, #20]
  mg_timer_poll(&mgr->timers, now);
 802b038:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 802b03c:	f7fb ff04 	bl	8026e48 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 802b040:	2d00      	cmp	r5, #0
 802b042:	d078      	beq.n	802b136 <mg_mgr_poll+0x112>
 802b044:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 802b046:	2b00      	cmp	r3, #0
 802b048:	d075      	beq.n	802b136 <mg_mgr_poll+0x112>
  mg_tcpip_poll(ifp, now);
 802b04a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802b04e:	4628      	mov	r0, r5
 802b050:	f7ff fe4a 	bl	802ace8 <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 802b054:	6824      	ldr	r4, [r4, #0]
 802b056:	e040      	b.n	802b0da <mg_mgr_poll+0xb6>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 802b058:	4b38      	ldr	r3, [pc, #224]	@ (802b13c <mg_mgr_poll+0x118>)
 802b05a:	f241 72a4 	movw	r2, #6052	@ 0x17a4
 802b05e:	4938      	ldr	r1, [pc, #224]	@ (802b140 <mg_mgr_poll+0x11c>)
 802b060:	2004      	movs	r0, #4
 802b062:	f7fc fc2d 	bl	80278c0 <mg_log_prefix>
 802b066:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b068:	f894 00ac 	ldrb.w	r0, [r4, #172]	@ 0xac
 802b06c:	f010 0f40 	tst.w	r0, #64	@ 0x40
 802b070:	d019      	beq.n	802b0a6 <mg_mgr_poll+0x82>
 802b072:	2254      	movs	r2, #84	@ 0x54
 802b074:	f010 0f20 	tst.w	r0, #32
 802b078:	d017      	beq.n	802b0aa <mg_mgr_poll+0x86>
 802b07a:	2343      	movs	r3, #67	@ 0x43
 802b07c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 802b080:	d115      	bne.n	802b0ae <mg_mgr_poll+0x8a>
 802b082:	2668      	movs	r6, #104	@ 0x68
 802b084:	f010 0f08 	tst.w	r0, #8
 802b088:	d013      	beq.n	802b0b2 <mg_mgr_poll+0x8e>
 802b08a:	2752      	movs	r7, #82	@ 0x52
 802b08c:	f894 00ad 	ldrb.w	r0, [r4, #173]	@ 0xad
 802b090:	f010 0f20 	tst.w	r0, #32
 802b094:	d00f      	beq.n	802b0b6 <mg_mgr_poll+0x92>
 802b096:	2043      	movs	r0, #67	@ 0x43
 802b098:	9002      	str	r0, [sp, #8]
 802b09a:	9701      	str	r7, [sp, #4]
 802b09c:	9600      	str	r6, [sp, #0]
 802b09e:	4829      	ldr	r0, [pc, #164]	@ (802b144 <mg_mgr_poll+0x120>)
 802b0a0:	f7fa faa6 	bl	80255f0 <mg_log>
 802b0a4:	e024      	b.n	802b0f0 <mg_mgr_poll+0xcc>
 802b0a6:	2274      	movs	r2, #116	@ 0x74
 802b0a8:	e7e4      	b.n	802b074 <mg_mgr_poll+0x50>
 802b0aa:	2363      	movs	r3, #99	@ 0x63
 802b0ac:	e7e6      	b.n	802b07c <mg_mgr_poll+0x58>
 802b0ae:	2648      	movs	r6, #72	@ 0x48
 802b0b0:	e7e8      	b.n	802b084 <mg_mgr_poll+0x60>
 802b0b2:	2772      	movs	r7, #114	@ 0x72
 802b0b4:	e7ea      	b.n	802b08c <mg_mgr_poll+0x68>
 802b0b6:	2063      	movs	r0, #99	@ 0x63
 802b0b8:	e7ee      	b.n	802b098 <mg_mgr_poll+0x74>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 802b0ba:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 802b0be:	4620      	mov	r0, r4
 802b0c0:	f7fc fd1e 	bl	8027b00 <handle_tls_recv>
 802b0c4:	e01e      	b.n	802b104 <mg_mgr_poll+0xe0>
    if (can_write(c)) write_conn(c);
 802b0c6:	4620      	mov	r0, r4
 802b0c8:	f7fe fa74 	bl	80295b4 <write_conn>
 802b0cc:	e01f      	b.n	802b10e <mg_mgr_poll+0xea>
    if (c->is_closing) close_conn(c);
 802b0ce:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802b0d2:	f013 0f20 	tst.w	r3, #32
 802b0d6:	d12a      	bne.n	802b12e <mg_mgr_poll+0x10a>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 802b0d8:	462c      	mov	r4, r5
  for (c = mgr->conns; c != NULL; c = tmp) {
 802b0da:	b364      	cbz	r4, 802b136 <mg_mgr_poll+0x112>
    tmp = c->next;
 802b0dc:	6825      	ldr	r5, [r4, #0]
    mg_call(c, MG_EV_POLL, &now);
 802b0de:	aa04      	add	r2, sp, #16
 802b0e0:	2102      	movs	r1, #2
 802b0e2:	4620      	mov	r0, r4
 802b0e4:	f7f9 f821 	bl	802412a <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 802b0e8:	4b17      	ldr	r3, [pc, #92]	@ (802b148 <mg_mgr_poll+0x124>)
 802b0ea:	681b      	ldr	r3, [r3, #0]
 802b0ec:	2b03      	cmp	r3, #3
 802b0ee:	dcb3      	bgt.n	802b058 <mg_mgr_poll+0x34>
    if (c->is_tls && mg_tls_pending(c) > 0)
 802b0f0:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802b0f4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 802b0f8:	d004      	beq.n	802b104 <mg_mgr_poll+0xe0>
 802b0fa:	4620      	mov	r0, r4
 802b0fc:	f7fb feee 	bl	8026edc <mg_tls_pending>
 802b100:	2800      	cmp	r0, #0
 802b102:	d1da      	bne.n	802b0ba <mg_mgr_poll+0x96>
    if (can_write(c)) write_conn(c);
 802b104:	4620      	mov	r0, r4
 802b106:	f7f7 fbd1 	bl	80228ac <can_write>
 802b10a:	2800      	cmp	r0, #0
 802b10c:	d1db      	bne.n	802b0c6 <mg_mgr_poll+0xa2>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 802b10e:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802b112:	f013 0f10 	tst.w	r3, #16
 802b116:	d0da      	beq.n	802b0ce <mg_mgr_poll+0xaa>
 802b118:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802b11a:	2b00      	cmp	r3, #0
 802b11c:	d1d7      	bne.n	802b0ce <mg_mgr_poll+0xaa>
 802b11e:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 802b122:	2b04      	cmp	r3, #4
 802b124:	d0d3      	beq.n	802b0ce <mg_mgr_poll+0xaa>
      init_closure(c);
 802b126:	4620      	mov	r0, r4
 802b128:	f7fe fa70 	bl	802960c <init_closure>
 802b12c:	e7cf      	b.n	802b0ce <mg_mgr_poll+0xaa>
    if (c->is_closing) close_conn(c);
 802b12e:	4620      	mov	r0, r4
 802b130:	f7fd fb82 	bl	8028838 <close_conn>
 802b134:	e7d0      	b.n	802b0d8 <mg_mgr_poll+0xb4>
}
 802b136:	b007      	add	sp, #28
 802b138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b13a:	bf00      	nop
 802b13c:	0803d758 	.word	0x0803d758
 802b140:	0803bba0 	.word	0x0803bba0
 802b144:	0803c354 	.word	0x0803c354
 802b148:	2000013c 	.word	0x2000013c

0802b14c <mg_now>:
uint64_t mg_now(void) {
 802b14c:	b508      	push	{r3, lr}
  return mg_millis() + s_boot_timestamp;
 802b14e:	f7fc fbb1 	bl	80278b4 <mg_millis>
 802b152:	4a03      	ldr	r2, [pc, #12]	@ (802b160 <mg_now+0x14>)
 802b154:	6813      	ldr	r3, [r2, #0]
 802b156:	6852      	ldr	r2, [r2, #4]
 802b158:	18c0      	adds	r0, r0, r3
}
 802b15a:	eb42 0101 	adc.w	r1, r2, r1
 802b15e:	bd08      	pop	{r3, pc}
 802b160:	2001a120 	.word	0x2001a120

0802b164 <mg_sntp_parse>:
int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 802b164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b168:	4604      	mov	r4, r0
  int mode = len > 0 ? buf[0] & 7 : 0;
 802b16a:	460a      	mov	r2, r1
 802b16c:	b129      	cbz	r1, 802b17a <mg_sntp_parse+0x16>
 802b16e:	7801      	ldrb	r1, [r0, #0]
 802b170:	f001 0307 	and.w	r3, r1, #7
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 802b174:	f3c1 05c2 	ubfx	r5, r1, #3, #3
 802b178:	e001      	b.n	802b17e <mg_sntp_parse+0x1a>
  int mode = len > 0 ? buf[0] & 7 : 0;
 802b17a:	2300      	movs	r3, #0
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 802b17c:	461d      	mov	r5, r3
  if (len < 48) {
 802b17e:	2a2f      	cmp	r2, #47	@ 0x2f
 802b180:	d817      	bhi.n	802b1b2 <mg_sntp_parse+0x4e>
    MG_ERROR(("%s", "corrupt packet"));
 802b182:	4b4b      	ldr	r3, [pc, #300]	@ (802b2b0 <mg_sntp_parse+0x14c>)
 802b184:	681b      	ldr	r3, [r3, #0]
 802b186:	2b00      	cmp	r3, #0
 802b188:	dc04      	bgt.n	802b194 <mg_sntp_parse+0x30>
  int64_t epoch_milliseconds = -1;
 802b18a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b18e:	4601      	mov	r1, r0
}
 802b190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    MG_ERROR(("%s", "corrupt packet"));
 802b194:	4b47      	ldr	r3, [pc, #284]	@ (802b2b4 <mg_sntp_parse+0x150>)
 802b196:	f641 420e 	movw	r2, #7182	@ 0x1c0e
 802b19a:	4947      	ldr	r1, [pc, #284]	@ (802b2b8 <mg_sntp_parse+0x154>)
 802b19c:	2001      	movs	r0, #1
 802b19e:	f7fc fb8f 	bl	80278c0 <mg_log_prefix>
 802b1a2:	4946      	ldr	r1, [pc, #280]	@ (802b2bc <mg_sntp_parse+0x158>)
 802b1a4:	4846      	ldr	r0, [pc, #280]	@ (802b2c0 <mg_sntp_parse+0x15c>)
 802b1a6:	f7fa fa23 	bl	80255f0 <mg_log>
  int64_t epoch_milliseconds = -1;
 802b1aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b1ae:	4601      	mov	r1, r0
 802b1b0:	e7ee      	b.n	802b190 <mg_sntp_parse+0x2c>
  } else if (mode != 4 && mode != 5) {
 802b1b2:	3b04      	subs	r3, #4
 802b1b4:	2b01      	cmp	r3, #1
 802b1b6:	d916      	bls.n	802b1e6 <mg_sntp_parse+0x82>
    MG_ERROR(("%s", "not a server reply"));
 802b1b8:	4b3d      	ldr	r3, [pc, #244]	@ (802b2b0 <mg_sntp_parse+0x14c>)
 802b1ba:	681b      	ldr	r3, [r3, #0]
 802b1bc:	2b00      	cmp	r3, #0
 802b1be:	dc03      	bgt.n	802b1c8 <mg_sntp_parse+0x64>
  int64_t epoch_milliseconds = -1;
 802b1c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b1c4:	4601      	mov	r1, r0
 802b1c6:	e7e3      	b.n	802b190 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "not a server reply"));
 802b1c8:	4b3a      	ldr	r3, [pc, #232]	@ (802b2b4 <mg_sntp_parse+0x150>)
 802b1ca:	f641 4210 	movw	r2, #7184	@ 0x1c10
 802b1ce:	493a      	ldr	r1, [pc, #232]	@ (802b2b8 <mg_sntp_parse+0x154>)
 802b1d0:	2001      	movs	r0, #1
 802b1d2:	f7fc fb75 	bl	80278c0 <mg_log_prefix>
 802b1d6:	493b      	ldr	r1, [pc, #236]	@ (802b2c4 <mg_sntp_parse+0x160>)
 802b1d8:	4839      	ldr	r0, [pc, #228]	@ (802b2c0 <mg_sntp_parse+0x15c>)
 802b1da:	f7fa fa09 	bl	80255f0 <mg_log>
  int64_t epoch_milliseconds = -1;
 802b1de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b1e2:	4601      	mov	r1, r0
 802b1e4:	e7d4      	b.n	802b190 <mg_sntp_parse+0x2c>
  } else if (buf[1] == 0) {
 802b1e6:	7863      	ldrb	r3, [r4, #1]
 802b1e8:	b9b3      	cbnz	r3, 802b218 <mg_sntp_parse+0xb4>
    MG_ERROR(("%s", "server sent a kiss of death"));
 802b1ea:	4b31      	ldr	r3, [pc, #196]	@ (802b2b0 <mg_sntp_parse+0x14c>)
 802b1ec:	681b      	ldr	r3, [r3, #0]
 802b1ee:	2b00      	cmp	r3, #0
 802b1f0:	dc03      	bgt.n	802b1fa <mg_sntp_parse+0x96>
  int64_t epoch_milliseconds = -1;
 802b1f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b1f6:	4601      	mov	r1, r0
 802b1f8:	e7ca      	b.n	802b190 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "server sent a kiss of death"));
 802b1fa:	4b2e      	ldr	r3, [pc, #184]	@ (802b2b4 <mg_sntp_parse+0x150>)
 802b1fc:	f641 4212 	movw	r2, #7186	@ 0x1c12
 802b200:	492d      	ldr	r1, [pc, #180]	@ (802b2b8 <mg_sntp_parse+0x154>)
 802b202:	2001      	movs	r0, #1
 802b204:	f7fc fb5c 	bl	80278c0 <mg_log_prefix>
 802b208:	492f      	ldr	r1, [pc, #188]	@ (802b2c8 <mg_sntp_parse+0x164>)
 802b20a:	482d      	ldr	r0, [pc, #180]	@ (802b2c0 <mg_sntp_parse+0x15c>)
 802b20c:	f7fa f9f0 	bl	80255f0 <mg_log>
  int64_t epoch_milliseconds = -1;
 802b210:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b214:	4601      	mov	r1, r0
 802b216:	e7bb      	b.n	802b190 <mg_sntp_parse+0x2c>
  } else if (version == 4 || version == 3) {
 802b218:	1eeb      	subs	r3, r5, #3
 802b21a:	2b01      	cmp	r3, #1
 802b21c:	d907      	bls.n	802b22e <mg_sntp_parse+0xca>
    MG_ERROR(("unexpected version: %d", version));
 802b21e:	4b24      	ldr	r3, [pc, #144]	@ (802b2b0 <mg_sntp_parse+0x14c>)
 802b220:	681b      	ldr	r3, [r3, #0]
 802b222:	2b00      	cmp	r3, #0
 802b224:	dc35      	bgt.n	802b292 <mg_sntp_parse+0x12e>
  int64_t epoch_milliseconds = -1;
 802b226:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b22a:	4601      	mov	r1, r0
  return epoch_milliseconds;
 802b22c:	e7b0      	b.n	802b190 <mg_sntp_parse+0x2c>
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 802b22e:	f104 0018 	add.w	r0, r4, #24
 802b232:	f7fb ffc9 	bl	80271c8 <gettimestamp>
 802b236:	4606      	mov	r6, r0
 802b238:	468a      	mov	sl, r1
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 802b23a:	f104 0020 	add.w	r0, r4, #32
 802b23e:	f7fb ffc3 	bl	80271c8 <gettimestamp>
 802b242:	4680      	mov	r8, r0
 802b244:	4689      	mov	r9, r1
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 802b246:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 802b24a:	f7fb ffbd 	bl	80271c8 <gettimestamp>
 802b24e:	4607      	mov	r7, r0
 802b250:	460c      	mov	r4, r1
    int64_t now = (int64_t) mg_millis();
 802b252:	f7fc fb2f 	bl	80278b4 <mg_millis>
 802b256:	4605      	mov	r5, r0
 802b258:	468c      	mov	ip, r1
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 802b25a:	1b86      	subs	r6, r0, r6
 802b25c:	eb61 020a 	sbc.w	r2, r1, sl
 802b260:	ebb7 0808 	subs.w	r8, r7, r8
 802b264:	eb64 0909 	sbc.w	r9, r4, r9
 802b268:	ebb6 0608 	subs.w	r6, r6, r8
 802b26c:	eb62 0209 	sbc.w	r2, r2, r9
    epoch_milliseconds = transmit_time + latency / 2;
 802b270:	0fd3      	lsrs	r3, r2, #31
 802b272:	199b      	adds	r3, r3, r6
 802b274:	f142 0200 	adc.w	r2, r2, #0
 802b278:	085b      	lsrs	r3, r3, #1
 802b27a:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 802b27e:	19d8      	adds	r0, r3, r7
 802b280:	eb44 0162 	adc.w	r1, r4, r2, asr #1
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 802b284:	1b45      	subs	r5, r0, r5
 802b286:	eb61 030c 	sbc.w	r3, r1, ip
 802b28a:	4a10      	ldr	r2, [pc, #64]	@ (802b2cc <mg_sntp_parse+0x168>)
 802b28c:	6015      	str	r5, [r2, #0]
 802b28e:	6053      	str	r3, [r2, #4]
 802b290:	e77e      	b.n	802b190 <mg_sntp_parse+0x2c>
    MG_ERROR(("unexpected version: %d", version));
 802b292:	4b08      	ldr	r3, [pc, #32]	@ (802b2b4 <mg_sntp_parse+0x150>)
 802b294:	f641 421d 	movw	r2, #7197	@ 0x1c1d
 802b298:	4907      	ldr	r1, [pc, #28]	@ (802b2b8 <mg_sntp_parse+0x154>)
 802b29a:	2001      	movs	r0, #1
 802b29c:	f7fc fb10 	bl	80278c0 <mg_log_prefix>
 802b2a0:	4629      	mov	r1, r5
 802b2a2:	480b      	ldr	r0, [pc, #44]	@ (802b2d0 <mg_sntp_parse+0x16c>)
 802b2a4:	f7fa f9a4 	bl	80255f0 <mg_log>
  int64_t epoch_milliseconds = -1;
 802b2a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b2ac:	4601      	mov	r1, r0
 802b2ae:	e76f      	b.n	802b190 <mg_sntp_parse+0x2c>
 802b2b0:	2000013c 	.word	0x2000013c
 802b2b4:	0803d6a8 	.word	0x0803d6a8
 802b2b8:	0803bba0 	.word	0x0803bba0
 802b2bc:	0803c368 	.word	0x0803c368
 802b2c0:	0803beb8 	.word	0x0803beb8
 802b2c4:	0803c378 	.word	0x0803c378
 802b2c8:	0803c38c 	.word	0x0803c38c
 802b2cc:	2001a120 	.word	0x2001a120
 802b2d0:	0803c3a8 	.word	0x0803c3a8
 802b2d4:	00000000 	.word	0x00000000

0802b2d8 <mg_sntp_request>:
void mg_sntp_request(struct mg_connection *c) {
 802b2d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802b2dc:	b08d      	sub	sp, #52	@ 0x34
 802b2de:	4604      	mov	r4, r0
  if (c->is_resolving) {
 802b2e0:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 802b2e4:	f013 0f08 	tst.w	r3, #8
 802b2e8:	d012      	beq.n	802b310 <mg_sntp_request+0x38>
    MG_ERROR(("%lu wait until resolved", c->id));
 802b2ea:	4b2b      	ldr	r3, [pc, #172]	@ (802b398 <mg_sntp_request+0xc0>)
 802b2ec:	681b      	ldr	r3, [r3, #0]
 802b2ee:	2b00      	cmp	r3, #0
 802b2f0:	dc02      	bgt.n	802b2f8 <mg_sntp_request+0x20>
}
 802b2f2:	b00d      	add	sp, #52	@ 0x34
 802b2f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MG_ERROR(("%lu wait until resolved", c->id));
 802b2f8:	4b28      	ldr	r3, [pc, #160]	@ (802b39c <mg_sntp_request+0xc4>)
 802b2fa:	f641 423a 	movw	r2, #7226	@ 0x1c3a
 802b2fe:	4928      	ldr	r1, [pc, #160]	@ (802b3a0 <mg_sntp_request+0xc8>)
 802b300:	2001      	movs	r0, #1
 802b302:	f7fc fadd 	bl	80278c0 <mg_log_prefix>
 802b306:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b308:	4826      	ldr	r0, [pc, #152]	@ (802b3a4 <mg_sntp_request+0xcc>)
 802b30a:	f7fa f971 	bl	80255f0 <mg_log>
 802b30e:	e7f0      	b.n	802b2f2 <mg_sntp_request+0x1a>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 802b310:	f7fc fad0 	bl	80278b4 <mg_millis>
 802b314:	4606      	mov	r6, r0
 802b316:	460d      	mov	r5, r1
    uint8_t buf[48] = {0};
 802b318:	2730      	movs	r7, #48	@ 0x30
 802b31a:	463a      	mov	r2, r7
 802b31c:	2100      	movs	r1, #0
 802b31e:	4668      	mov	r0, sp
 802b320:	f001 fa6e 	bl	802c800 <memset>
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 802b324:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802b328:	2300      	movs	r3, #0
 802b32a:	4630      	mov	r0, r6
 802b32c:	4629      	mov	r1, r5
 802b32e:	f7e5 fcc3 	bl	8010cb8 <__aeabi_ldivmod>
 802b332:	4610      	mov	r0, r2
 802b334:	4619      	mov	r1, r3
 802b336:	f7e5 f949 	bl	80105cc <__aeabi_l2d>
 802b33a:	2200      	movs	r2, #0
 802b33c:	4b1a      	ldr	r3, [pc, #104]	@ (802b3a8 <mg_sntp_request+0xd0>)
 802b33e:	f7e5 fa9d 	bl	801087c <__aeabi_ddiv>
 802b342:	a313      	add	r3, pc, #76	@ (adr r3, 802b390 <mg_sntp_request+0xb8>)
 802b344:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b348:	f7e5 f96e 	bl	8010628 <__aeabi_dmul>
 802b34c:	4680      	mov	r8, r0
 802b34e:	4689      	mov	r9, r1
    buf[0] = (0 << 6) | (4 << 3) | 3;
 802b350:	2323      	movs	r3, #35	@ 0x23
 802b352:	f88d 3000 	strb.w	r3, [sp]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 802b356:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802b35a:	2300      	movs	r3, #0
 802b35c:	4630      	mov	r0, r6
 802b35e:	4629      	mov	r1, r5
 802b360:	f7e5 fcaa 	bl	8010cb8 <__aeabi_ldivmod>
 802b364:	f100 4003 	add.w	r0, r0, #2197815296	@ 0x83000000
 802b368:	f500 002a 	add.w	r0, r0, #11141120	@ 0xaa0000
 802b36c:	f500 40fd 	add.w	r0, r0, #32384	@ 0x7e80
 802b370:	f7fb fecc 	bl	802710c <mg_ntohl>
 802b374:	900a      	str	r0, [sp, #40]	@ 0x28
    t[1] = mg_htonl((uint32_t) frac);
 802b376:	4640      	mov	r0, r8
 802b378:	4649      	mov	r1, r9
 802b37a:	f7e5 fc2d 	bl	8010bd8 <__aeabi_d2uiz>
 802b37e:	f7fb fec5 	bl	802710c <mg_ntohl>
 802b382:	900b      	str	r0, [sp, #44]	@ 0x2c
    mg_send(c, buf, sizeof(buf));
 802b384:	463a      	mov	r2, r7
 802b386:	4669      	mov	r1, sp
 802b388:	4620      	mov	r0, r4
 802b38a:	f7fd fb4b 	bl	8028a24 <mg_send>
}
 802b38e:	e7b0      	b.n	802b2f2 <mg_sntp_request+0x1a>
 802b390:	ffe00000 	.word	0xffe00000
 802b394:	41efffff 	.word	0x41efffff
 802b398:	2000013c 	.word	0x2000013c
 802b39c:	0803d698 	.word	0x0803d698
 802b3a0:	0803bba0 	.word	0x0803bba0
 802b3a4:	0803c3c0 	.word	0x0803c3c0
 802b3a8:	408f4000 	.word	0x408f4000

0802b3ac <sntp_cb>:
static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 802b3ac:	b570      	push	{r4, r5, r6, lr}
 802b3ae:	b082      	sub	sp, #8
 802b3b0:	4604      	mov	r4, r0
  if (ev == MG_EV_OPEN) {
 802b3b2:	3901      	subs	r1, #1
 802b3b4:	2906      	cmp	r1, #6
 802b3b6:	d810      	bhi.n	802b3da <sntp_cb+0x2e>
 802b3b8:	e8df f001 	tbb	[pc, r1]
 802b3bc:	110f4604 	.word	0x110f4604
 802b3c0:	0f0f      	.short	0x0f0f
 802b3c2:	14          	.byte	0x14
 802b3c3:	00          	.byte	0x00
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 802b3c4:	f7fc fa76 	bl	80278b4 <mg_millis>
 802b3c8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 802b3cc:	18c0      	adds	r0, r0, r3
 802b3ce:	f141 0100 	adc.w	r1, r1, #0
 802b3d2:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802b3d6:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
}
 802b3da:	b002      	add	sp, #8
 802b3dc:	bd70      	pop	{r4, r5, r6, pc}
    mg_sntp_request(c);
 802b3de:	f7ff ff7b 	bl	802b2d8 <mg_sntp_request>
 802b3e2:	e7fa      	b.n	802b3da <sntp_cb+0x2e>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 802b3e4:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802b3e6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 802b3e8:	f7ff febc 	bl	802b164 <mg_sntp_parse>
 802b3ec:	4605      	mov	r5, r0
 802b3ee:	460e      	mov	r6, r1
 802b3f0:	9000      	str	r0, [sp, #0]
 802b3f2:	9101      	str	r1, [sp, #4]
    if (milliseconds > 0) {
 802b3f4:	2801      	cmp	r0, #1
 802b3f6:	f171 0300 	sbcs.w	r3, r1, #0
 802b3fa:	da06      	bge.n	802b40a <sntp_cb+0x5e>
    c->is_closing = 1;
 802b3fc:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802b400:	f043 0320 	orr.w	r3, r3, #32
 802b404:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 802b408:	e7e7      	b.n	802b3da <sntp_cb+0x2e>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 802b40a:	f7fc fa53 	bl	80278b4 <mg_millis>
 802b40e:	1a2d      	subs	r5, r5, r0
 802b410:	eb66 0601 	sbc.w	r6, r6, r1
 802b414:	4b14      	ldr	r3, [pc, #80]	@ (802b468 <sntp_cb+0xbc>)
 802b416:	601d      	str	r5, [r3, #0]
 802b418:	605e      	str	r6, [r3, #4]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 802b41a:	466a      	mov	r2, sp
 802b41c:	2112      	movs	r1, #18
 802b41e:	4620      	mov	r0, r4
 802b420:	f7f8 fe83 	bl	802412a <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 802b424:	4b11      	ldr	r3, [pc, #68]	@ (802b46c <sntp_cb+0xc0>)
 802b426:	681b      	ldr	r3, [r3, #0]
 802b428:	2b02      	cmp	r3, #2
 802b42a:	dde7      	ble.n	802b3fc <sntp_cb+0x50>
 802b42c:	4b10      	ldr	r3, [pc, #64]	@ (802b470 <sntp_cb+0xc4>)
 802b42e:	f641 422d 	movw	r2, #7213	@ 0x1c2d
 802b432:	4910      	ldr	r1, [pc, #64]	@ (802b474 <sntp_cb+0xc8>)
 802b434:	2003      	movs	r0, #3
 802b436:	f7fc fa43 	bl	80278c0 <mg_log_prefix>
 802b43a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b43e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b440:	480d      	ldr	r0, [pc, #52]	@ (802b478 <sntp_cb+0xcc>)
 802b442:	f7fa f8d5 	bl	80255f0 <mg_log>
 802b446:	e7d9      	b.n	802b3fc <sntp_cb+0x50>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 802b448:	f7fc fa34 	bl	80278b4 <mg_millis>
 802b44c:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 802b450:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 802b454:	4282      	cmp	r2, r0
 802b456:	418b      	sbcs	r3, r1
 802b458:	d2bf      	bcs.n	802b3da <sntp_cb+0x2e>
 802b45a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802b45e:	f043 0320 	orr.w	r3, r3, #32
 802b462:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 802b466:	e7b8      	b.n	802b3da <sntp_cb+0x2e>
 802b468:	2001a120 	.word	0x2001a120
 802b46c:	2000013c 	.word	0x2000013c
 802b470:	0803d690 	.word	0x0803d690
 802b474:	0803bba0 	.word	0x0803bba0
 802b478:	0803c3d8 	.word	0x0803c3d8

0802b47c <mg_sntp_connect>:
                                      mg_event_handler_t fn, void *fnd) {
 802b47c:	b538      	push	{r3, r4, r5, lr}
  if (url == NULL) url = "udp://time.google.com:123";
 802b47e:	460d      	mov	r5, r1
 802b480:	b169      	cbz	r1, 802b49e <mg_sntp_connect+0x22>
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 802b482:	4629      	mov	r1, r5
 802b484:	f7fe ff9e 	bl	802a3c4 <mg_connect>
 802b488:	4604      	mov	r4, r0
 802b48a:	b130      	cbz	r0, 802b49a <mg_sntp_connect+0x1e>
    c->pfn = sntp_cb;
 802b48c:	4b05      	ldr	r3, [pc, #20]	@ (802b4a4 <mg_sntp_connect+0x28>)
 802b48e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 802b492:	462a      	mov	r2, r5
 802b494:	2101      	movs	r1, #1
 802b496:	f7ff ff89 	bl	802b3ac <sntp_cb>
}
 802b49a:	4620      	mov	r0, r4
 802b49c:	bd38      	pop	{r3, r4, r5, pc}
  if (url == NULL) url = "udp://time.google.com:123";
 802b49e:	4d02      	ldr	r5, [pc, #8]	@ (802b4a8 <mg_sntp_connect+0x2c>)
 802b4a0:	e7ef      	b.n	802b482 <mg_sntp_connect+0x6>
 802b4a2:	bf00      	nop
 802b4a4:	0802b3ad 	.word	0x0802b3ad
 802b4a8:	0803c3fc 	.word	0x0803c3fc

0802b4ac <has_mqtt_prefix>:
#include <ctype.h>

#define PREFIX "mqtt://"
#define MAX_PORT 65535

int has_mqtt_prefix(const char *url) {
 802b4ac:	b508      	push	{r3, lr}
    return strncmp(url, PREFIX, strlen(PREFIX)) == 0;
 802b4ae:	2207      	movs	r2, #7
 802b4b0:	4903      	ldr	r1, [pc, #12]	@ (802b4c0 <has_mqtt_prefix+0x14>)
 802b4b2:	f001 f9da 	bl	802c86a <strncmp>
}
 802b4b6:	fab0 f080 	clz	r0, r0
 802b4ba:	0940      	lsrs	r0, r0, #5
 802b4bc:	bd08      	pop	{r3, pc}
 802b4be:	bf00      	nop
 802b4c0:	0803c640 	.word	0x0803c640

0802b4c4 <is_valid_ip_or_domain>:

int is_valid_ip_or_domain(const char *host) {
 802b4c4:	b570      	push	{r4, r5, r6, lr}
 802b4c6:	4604      	mov	r4, r0
    int dot_count = 0;
    int is_ip_format = 1;

    // Проверка, является ли это IP-адресом
    for (int i = 0; host[i] != '\0'; i++) {
 802b4c8:	2200      	movs	r2, #0
    int dot_count = 0;
 802b4ca:	4610      	mov	r0, r2
    for (int i = 0; host[i] != '\0'; i++) {
 802b4cc:	e001      	b.n	802b4d2 <is_valid_ip_or_domain+0xe>
        if (host[i] == '.') {
            dot_count++;
 802b4ce:	3001      	adds	r0, #1
    for (int i = 0; host[i] != '\0'; i++) {
 802b4d0:	3201      	adds	r2, #1
 802b4d2:	5ca3      	ldrb	r3, [r4, r2]
 802b4d4:	b143      	cbz	r3, 802b4e8 <is_valid_ip_or_domain+0x24>
        if (host[i] == '.') {
 802b4d6:	2b2e      	cmp	r3, #46	@ 0x2e
 802b4d8:	d0f9      	beq.n	802b4ce <is_valid_ip_or_domain+0xa>
        } else if (!isdigit(host[i])) {
 802b4da:	491d      	ldr	r1, [pc, #116]	@ (802b550 <is_valid_ip_or_domain+0x8c>)
 802b4dc:	5ccb      	ldrb	r3, [r1, r3]
 802b4de:	f013 0f04 	tst.w	r3, #4
 802b4e2:	d1f5      	bne.n	802b4d0 <is_valid_ip_or_domain+0xc>
            is_ip_format = 0;
 802b4e4:	2500      	movs	r5, #0
 802b4e6:	e000      	b.n	802b4ea <is_valid_ip_or_domain+0x26>
    int is_ip_format = 1;
 802b4e8:	2501      	movs	r5, #1
            break;
        }
    }

    // Если это может быть IP-адрес
    if (is_ip_format && dot_count == 3) {
 802b4ea:	b335      	cbz	r5, 802b53a <is_valid_ip_or_domain+0x76>
 802b4ec:	2803      	cmp	r0, #3
 802b4ee:	d013      	beq.n	802b518 <is_valid_ip_or_domain+0x54>
 802b4f0:	2200      	movs	r2, #0
 802b4f2:	4615      	mov	r5, r2
 802b4f4:	e014      	b.n	802b520 <is_valid_ip_or_domain+0x5c>
        int octet;
        const char *ptr = host;

        for (int i = 0; i < 4; i++) {
 802b4f6:	3601      	adds	r6, #1
 802b4f8:	2e03      	cmp	r6, #3
 802b4fa:	dc24      	bgt.n	802b546 <is_valid_ip_or_domain+0x82>
            octet = atoi(ptr);
 802b4fc:	4620      	mov	r0, r4
 802b4fe:	f000 f8a3 	bl	802b648 <atoi>
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 802b502:	28ff      	cmp	r0, #255	@ 0xff
 802b504:	d821      	bhi.n	802b54a <is_valid_ip_or_domain+0x86>

            // Переход к следующему октету
            ptr = strchr(ptr, '.');
 802b506:	212e      	movs	r1, #46	@ 0x2e
 802b508:	4620      	mov	r0, r4
 802b50a:	f001 f990 	bl	802c82e <strchr>
            if (ptr != NULL) ptr++;
 802b50e:	4604      	mov	r4, r0
 802b510:	2800      	cmp	r0, #0
 802b512:	d0f0      	beq.n	802b4f6 <is_valid_ip_or_domain+0x32>
 802b514:	3401      	adds	r4, #1
 802b516:	e7ee      	b.n	802b4f6 <is_valid_ip_or_domain+0x32>
        for (int i = 0; i < 4; i++) {
 802b518:	2600      	movs	r6, #0
 802b51a:	e7ed      	b.n	802b4f8 <is_valid_ip_or_domain+0x34>

    // Проверка на корректность доменного имени (буквы, цифры, точки и дефисы)
    dot_count = 0;
    for (int i = 0; host[i] != '\0'; i++) {
        if (host[i] == '.') {
            dot_count++;
 802b51c:	3501      	adds	r5, #1
    for (int i = 0; host[i] != '\0'; i++) {
 802b51e:	3201      	adds	r2, #1
 802b520:	5ca3      	ldrb	r3, [r4, r2]
 802b522:	b163      	cbz	r3, 802b53e <is_valid_ip_or_domain+0x7a>
        if (host[i] == '.') {
 802b524:	2b2e      	cmp	r3, #46	@ 0x2e
 802b526:	d0f9      	beq.n	802b51c <is_valid_ip_or_domain+0x58>
        } else if (!isalnum(host[i]) && host[i] != '-') {
 802b528:	4909      	ldr	r1, [pc, #36]	@ (802b550 <is_valid_ip_or_domain+0x8c>)
 802b52a:	5cc9      	ldrb	r1, [r1, r3]
 802b52c:	f011 0f07 	tst.w	r1, #7
 802b530:	d1f5      	bne.n	802b51e <is_valid_ip_or_domain+0x5a>
 802b532:	2b2d      	cmp	r3, #45	@ 0x2d
 802b534:	d0f3      	beq.n	802b51e <is_valid_ip_or_domain+0x5a>
            return 0;  // Некорректный символ для доменного имени
 802b536:	2500      	movs	r5, #0
 802b538:	e005      	b.n	802b546 <is_valid_ip_or_domain+0x82>
 802b53a:	462a      	mov	r2, r5
 802b53c:	e7f0      	b.n	802b520 <is_valid_ip_or_domain+0x5c>
        }
    }
    return dot_count > 0; // Доменное имя должно содержать хотя бы одну точку
 802b53e:	2d00      	cmp	r5, #0
 802b540:	bfd4      	ite	le
 802b542:	2500      	movle	r5, #0
 802b544:	2501      	movgt	r5, #1
}
 802b546:	4628      	mov	r0, r5
 802b548:	bd70      	pop	{r4, r5, r6, pc}
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 802b54a:	2500      	movs	r5, #0
 802b54c:	e7fb      	b.n	802b546 <is_valid_ip_or_domain+0x82>
 802b54e:	bf00      	nop
 802b550:	0803dff5 	.word	0x0803dff5

0802b554 <is_valid_port>:

int is_valid_port(const char *port_str) {
 802b554:	b510      	push	{r4, lr}
 802b556:	4604      	mov	r4, r0
    int port = atoi(port_str);
 802b558:	f000 f876 	bl	802b648 <atoi>
    if (port < 1 || port > MAX_PORT) {
 802b55c:	3801      	subs	r0, #1
 802b55e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 802b562:	4298      	cmp	r0, r3
 802b564:	d80a      	bhi.n	802b57c <is_valid_port+0x28>
        return 0; // Порт вне диапазона
    }
    // Проверить, что порт состоит только из цифр
    while (*port_str) {
 802b566:	7823      	ldrb	r3, [r4, #0]
 802b568:	b133      	cbz	r3, 802b578 <is_valid_port+0x24>
        if (!isdigit(*port_str)) {
 802b56a:	4a06      	ldr	r2, [pc, #24]	@ (802b584 <is_valid_port+0x30>)
 802b56c:	5cd3      	ldrb	r3, [r2, r3]
 802b56e:	f013 0f04 	tst.w	r3, #4
 802b572:	d005      	beq.n	802b580 <is_valid_port+0x2c>
            return 0;
        }
        port_str++;
 802b574:	3401      	adds	r4, #1
 802b576:	e7f6      	b.n	802b566 <is_valid_port+0x12>
    }
    return 1;
 802b578:	2001      	movs	r0, #1
 802b57a:	e000      	b.n	802b57e <is_valid_port+0x2a>
        return 0; // Порт вне диапазона
 802b57c:	2000      	movs	r0, #0
}
 802b57e:	bd10      	pop	{r4, pc}
            return 0;
 802b580:	2000      	movs	r0, #0
 802b582:	e7fc      	b.n	802b57e <is_valid_port+0x2a>
 802b584:	0803dff5 	.word	0x0803dff5

0802b588 <is_valid_mqtt_url>:

int is_valid_mqtt_url(const char *url) {
 802b588:	b570      	push	{r4, r5, r6, lr}
 802b58a:	b0c0      	sub	sp, #256	@ 0x100
 802b58c:	4604      	mov	r4, r0
    if (!has_mqtt_prefix(url)) {
 802b58e:	f7ff ff8d 	bl	802b4ac <has_mqtt_prefix>
 802b592:	b1d0      	cbz	r0, 802b5ca <is_valid_mqtt_url+0x42>
        printf("Error: URL does not start with 'mqtt://'\n");
        return -1;
    }

    // Найти первый символ после "mqtt://"
    const char *host_start = url + strlen(PREFIX);
 802b594:	3407      	adds	r4, #7
    const char *colon = strchr(host_start, ':');
 802b596:	213a      	movs	r1, #58	@ 0x3a
 802b598:	4620      	mov	r0, r4
 802b59a:	f001 f948 	bl	802c82e <strchr>
    if (!colon) {
 802b59e:	4606      	mov	r6, r0
 802b5a0:	b1c8      	cbz	r0, 802b5d6 <is_valid_mqtt_url+0x4e>
        return -2;
    }

    // Извлечь доменное имя или IP-адрес
    char host[256];
    strncpy(host, host_start, colon - host_start);
 802b5a2:	1b05      	subs	r5, r0, r4
 802b5a4:	462a      	mov	r2, r5
 802b5a6:	4621      	mov	r1, r4
 802b5a8:	4668      	mov	r0, sp
 802b5aa:	f001 f970 	bl	802c88e <strncpy>
    host[colon - host_start] = '\0';
 802b5ae:	2300      	movs	r3, #0
 802b5b0:	f80d 3005 	strb.w	r3, [sp, r5]

    if (!is_valid_ip_or_domain(host)) {
 802b5b4:	4668      	mov	r0, sp
 802b5b6:	f7ff ff85 	bl	802b4c4 <is_valid_ip_or_domain>
 802b5ba:	b190      	cbz	r0, 802b5e2 <is_valid_mqtt_url+0x5a>
        return -3;
    }

    // Проверить порт
    const char *port_str = colon + 1;
    if (!is_valid_port(port_str)) {
 802b5bc:	1c70      	adds	r0, r6, #1
 802b5be:	f7ff ffc9 	bl	802b554 <is_valid_port>
 802b5c2:	b1a0      	cbz	r0, 802b5ee <is_valid_mqtt_url+0x66>
        printf("Error: Invalid port number\n");
        return -4;
    }

    return 0; // URL прошел все проверки
 802b5c4:	2000      	movs	r0, #0
}
 802b5c6:	b040      	add	sp, #256	@ 0x100
 802b5c8:	bd70      	pop	{r4, r5, r6, pc}
        printf("Error: URL does not start with 'mqtt://'\n");
 802b5ca:	480c      	ldr	r0, [pc, #48]	@ (802b5fc <is_valid_mqtt_url+0x74>)
 802b5cc:	f000 fe38 	bl	802c240 <puts>
        return -1;
 802b5d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b5d4:	e7f7      	b.n	802b5c6 <is_valid_mqtt_url+0x3e>
        printf("Error: URL does not contain a port separator ':'\n");
 802b5d6:	480a      	ldr	r0, [pc, #40]	@ (802b600 <is_valid_mqtt_url+0x78>)
 802b5d8:	f000 fe32 	bl	802c240 <puts>
        return -2;
 802b5dc:	f06f 0001 	mvn.w	r0, #1
 802b5e0:	e7f1      	b.n	802b5c6 <is_valid_mqtt_url+0x3e>
        printf("Error: Invalid domain or IP address\n");
 802b5e2:	4808      	ldr	r0, [pc, #32]	@ (802b604 <is_valid_mqtt_url+0x7c>)
 802b5e4:	f000 fe2c 	bl	802c240 <puts>
        return -3;
 802b5e8:	f06f 0002 	mvn.w	r0, #2
 802b5ec:	e7eb      	b.n	802b5c6 <is_valid_mqtt_url+0x3e>
        printf("Error: Invalid port number\n");
 802b5ee:	4806      	ldr	r0, [pc, #24]	@ (802b608 <is_valid_mqtt_url+0x80>)
 802b5f0:	f000 fe26 	bl	802c240 <puts>
        return -4;
 802b5f4:	f06f 0003 	mvn.w	r0, #3
 802b5f8:	e7e5      	b.n	802b5c6 <is_valid_mqtt_url+0x3e>
 802b5fa:	bf00      	nop
 802b5fc:	0803c648 	.word	0x0803c648
 802b600:	0803c674 	.word	0x0803c674
 802b604:	0803c6a8 	.word	0x0803c6a8
 802b608:	0803c6cc 	.word	0x0803c6cc

0802b60c <__assert_func>:
 802b60c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802b60e:	4614      	mov	r4, r2
 802b610:	461a      	mov	r2, r3
 802b612:	4b09      	ldr	r3, [pc, #36]	@ (802b638 <__assert_func+0x2c>)
 802b614:	681b      	ldr	r3, [r3, #0]
 802b616:	4605      	mov	r5, r0
 802b618:	68d8      	ldr	r0, [r3, #12]
 802b61a:	b14c      	cbz	r4, 802b630 <__assert_func+0x24>
 802b61c:	4b07      	ldr	r3, [pc, #28]	@ (802b63c <__assert_func+0x30>)
 802b61e:	9100      	str	r1, [sp, #0]
 802b620:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802b624:	4906      	ldr	r1, [pc, #24]	@ (802b640 <__assert_func+0x34>)
 802b626:	462b      	mov	r3, r5
 802b628:	f000 f812 	bl	802b650 <fiprintf>
 802b62c:	f002 fe7c 	bl	802e328 <abort>
 802b630:	4b04      	ldr	r3, [pc, #16]	@ (802b644 <__assert_func+0x38>)
 802b632:	461c      	mov	r4, r3
 802b634:	e7f3      	b.n	802b61e <__assert_func+0x12>
 802b636:	bf00      	nop
 802b638:	2000017c 	.word	0x2000017c
 802b63c:	0803da88 	.word	0x0803da88
 802b640:	0803da95 	.word	0x0803da95
 802b644:	0803dac3 	.word	0x0803dac3

0802b648 <atoi>:
 802b648:	220a      	movs	r2, #10
 802b64a:	2100      	movs	r1, #0
 802b64c:	f000 bd96 	b.w	802c17c <strtol>

0802b650 <fiprintf>:
 802b650:	b40e      	push	{r1, r2, r3}
 802b652:	b503      	push	{r0, r1, lr}
 802b654:	4601      	mov	r1, r0
 802b656:	ab03      	add	r3, sp, #12
 802b658:	4805      	ldr	r0, [pc, #20]	@ (802b670 <fiprintf+0x20>)
 802b65a:	f853 2b04 	ldr.w	r2, [r3], #4
 802b65e:	6800      	ldr	r0, [r0, #0]
 802b660:	9301      	str	r3, [sp, #4]
 802b662:	f000 f807 	bl	802b674 <_vfiprintf_r>
 802b666:	b002      	add	sp, #8
 802b668:	f85d eb04 	ldr.w	lr, [sp], #4
 802b66c:	b003      	add	sp, #12
 802b66e:	4770      	bx	lr
 802b670:	2000017c 	.word	0x2000017c

0802b674 <_vfiprintf_r>:
 802b674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b678:	b0bb      	sub	sp, #236	@ 0xec
 802b67a:	460f      	mov	r7, r1
 802b67c:	4693      	mov	fp, r2
 802b67e:	461c      	mov	r4, r3
 802b680:	461d      	mov	r5, r3
 802b682:	9000      	str	r0, [sp, #0]
 802b684:	b118      	cbz	r0, 802b68e <_vfiprintf_r+0x1a>
 802b686:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802b688:	b90b      	cbnz	r3, 802b68e <_vfiprintf_r+0x1a>
 802b68a:	f000 ffe5 	bl	802c658 <__sinit>
 802b68e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802b690:	07da      	lsls	r2, r3, #31
 802b692:	d405      	bmi.n	802b6a0 <_vfiprintf_r+0x2c>
 802b694:	89bb      	ldrh	r3, [r7, #12]
 802b696:	059b      	lsls	r3, r3, #22
 802b698:	d402      	bmi.n	802b6a0 <_vfiprintf_r+0x2c>
 802b69a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802b69c:	f002 fe29 	bl	802e2f2 <__retarget_lock_acquire_recursive>
 802b6a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802b6a4:	049e      	lsls	r6, r3, #18
 802b6a6:	d406      	bmi.n	802b6b6 <_vfiprintf_r+0x42>
 802b6a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802b6aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802b6ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 802b6b2:	81bb      	strh	r3, [r7, #12]
 802b6b4:	667a      	str	r2, [r7, #100]	@ 0x64
 802b6b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802b6b8:	0498      	lsls	r0, r3, #18
 802b6ba:	d508      	bpl.n	802b6ce <_vfiprintf_r+0x5a>
 802b6bc:	07d9      	lsls	r1, r3, #31
 802b6be:	d512      	bpl.n	802b6e6 <_vfiprintf_r+0x72>
 802b6c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802b6c4:	9303      	str	r3, [sp, #12]
 802b6c6:	9803      	ldr	r0, [sp, #12]
 802b6c8:	b03b      	add	sp, #236	@ 0xec
 802b6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b6ce:	89bb      	ldrh	r3, [r7, #12]
 802b6d0:	071a      	lsls	r2, r3, #28
 802b6d2:	d501      	bpl.n	802b6d8 <_vfiprintf_r+0x64>
 802b6d4:	693b      	ldr	r3, [r7, #16]
 802b6d6:	b96b      	cbnz	r3, 802b6f4 <_vfiprintf_r+0x80>
 802b6d8:	9800      	ldr	r0, [sp, #0]
 802b6da:	4639      	mov	r1, r7
 802b6dc:	f001 f810 	bl	802c700 <__swsetup_r>
 802b6e0:	b140      	cbz	r0, 802b6f4 <_vfiprintf_r+0x80>
 802b6e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802b6e4:	e7ea      	b.n	802b6bc <_vfiprintf_r+0x48>
 802b6e6:	89bb      	ldrh	r3, [r7, #12]
 802b6e8:	059b      	lsls	r3, r3, #22
 802b6ea:	d4e9      	bmi.n	802b6c0 <_vfiprintf_r+0x4c>
 802b6ec:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802b6ee:	f002 fe02 	bl	802e2f6 <__retarget_lock_release_recursive>
 802b6f2:	e7e5      	b.n	802b6c0 <_vfiprintf_r+0x4c>
 802b6f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802b6f8:	f003 021a 	and.w	r2, r3, #26
 802b6fc:	2a0a      	cmp	r2, #10
 802b6fe:	d114      	bne.n	802b72a <_vfiprintf_r+0xb6>
 802b700:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802b704:	2a00      	cmp	r2, #0
 802b706:	db10      	blt.n	802b72a <_vfiprintf_r+0xb6>
 802b708:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802b70a:	07d6      	lsls	r6, r2, #31
 802b70c:	d404      	bmi.n	802b718 <_vfiprintf_r+0xa4>
 802b70e:	059d      	lsls	r5, r3, #22
 802b710:	d402      	bmi.n	802b718 <_vfiprintf_r+0xa4>
 802b712:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802b714:	f002 fdef 	bl	802e2f6 <__retarget_lock_release_recursive>
 802b718:	9800      	ldr	r0, [sp, #0]
 802b71a:	4623      	mov	r3, r4
 802b71c:	465a      	mov	r2, fp
 802b71e:	4639      	mov	r1, r7
 802b720:	b03b      	add	sp, #236	@ 0xec
 802b722:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b726:	f000 bc2d 	b.w	802bf84 <__sbprintf>
 802b72a:	2300      	movs	r3, #0
 802b72c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802b730:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802b734:	e9cd 3307 	strd	r3, r3, [sp, #28]
 802b738:	ae11      	add	r6, sp, #68	@ 0x44
 802b73a:	960e      	str	r6, [sp, #56]	@ 0x38
 802b73c:	9303      	str	r3, [sp, #12]
 802b73e:	465b      	mov	r3, fp
 802b740:	461c      	mov	r4, r3
 802b742:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b746:	b10a      	cbz	r2, 802b74c <_vfiprintf_r+0xd8>
 802b748:	2a25      	cmp	r2, #37	@ 0x25
 802b74a:	d1f9      	bne.n	802b740 <_vfiprintf_r+0xcc>
 802b74c:	ebb4 080b 	subs.w	r8, r4, fp
 802b750:	d00d      	beq.n	802b76e <_vfiprintf_r+0xfa>
 802b752:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b754:	4443      	add	r3, r8
 802b756:	9310      	str	r3, [sp, #64]	@ 0x40
 802b758:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b75a:	3301      	adds	r3, #1
 802b75c:	2b07      	cmp	r3, #7
 802b75e:	e9c6 b800 	strd	fp, r8, [r6]
 802b762:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b764:	dc75      	bgt.n	802b852 <_vfiprintf_r+0x1de>
 802b766:	3608      	adds	r6, #8
 802b768:	9b03      	ldr	r3, [sp, #12]
 802b76a:	4443      	add	r3, r8
 802b76c:	9303      	str	r3, [sp, #12]
 802b76e:	7823      	ldrb	r3, [r4, #0]
 802b770:	2b00      	cmp	r3, #0
 802b772:	f000 83c9 	beq.w	802bf08 <_vfiprintf_r+0x894>
 802b776:	2300      	movs	r3, #0
 802b778:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802b77c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 802b780:	3401      	adds	r4, #1
 802b782:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802b786:	469a      	mov	sl, r3
 802b788:	46a3      	mov	fp, r4
 802b78a:	f81b 3b01 	ldrb.w	r3, [fp], #1
 802b78e:	f1a3 0220 	sub.w	r2, r3, #32
 802b792:	2a5a      	cmp	r2, #90	@ 0x5a
 802b794:	f200 8312 	bhi.w	802bdbc <_vfiprintf_r+0x748>
 802b798:	e8df f012 	tbh	[pc, r2, lsl #1]
 802b79c:	0310009a 	.word	0x0310009a
 802b7a0:	00a20310 	.word	0x00a20310
 802b7a4:	03100310 	.word	0x03100310
 802b7a8:	00820310 	.word	0x00820310
 802b7ac:	03100310 	.word	0x03100310
 802b7b0:	00af00a5 	.word	0x00af00a5
 802b7b4:	00ac0310 	.word	0x00ac0310
 802b7b8:	031000b1 	.word	0x031000b1
 802b7bc:	00d000cd 	.word	0x00d000cd
 802b7c0:	00d000d0 	.word	0x00d000d0
 802b7c4:	00d000d0 	.word	0x00d000d0
 802b7c8:	00d000d0 	.word	0x00d000d0
 802b7cc:	00d000d0 	.word	0x00d000d0
 802b7d0:	03100310 	.word	0x03100310
 802b7d4:	03100310 	.word	0x03100310
 802b7d8:	03100310 	.word	0x03100310
 802b7dc:	03100310 	.word	0x03100310
 802b7e0:	00f60310 	.word	0x00f60310
 802b7e4:	03100103 	.word	0x03100103
 802b7e8:	03100310 	.word	0x03100310
 802b7ec:	03100310 	.word	0x03100310
 802b7f0:	03100310 	.word	0x03100310
 802b7f4:	03100310 	.word	0x03100310
 802b7f8:	01510310 	.word	0x01510310
 802b7fc:	03100310 	.word	0x03100310
 802b800:	01980310 	.word	0x01980310
 802b804:	02770310 	.word	0x02770310
 802b808:	03100310 	.word	0x03100310
 802b80c:	03100297 	.word	0x03100297
 802b810:	03100310 	.word	0x03100310
 802b814:	03100310 	.word	0x03100310
 802b818:	03100310 	.word	0x03100310
 802b81c:	03100310 	.word	0x03100310
 802b820:	00f60310 	.word	0x00f60310
 802b824:	03100105 	.word	0x03100105
 802b828:	03100310 	.word	0x03100310
 802b82c:	010500df 	.word	0x010500df
 802b830:	031000f0 	.word	0x031000f0
 802b834:	031000ea 	.word	0x031000ea
 802b838:	01530131 	.word	0x01530131
 802b83c:	00f00188 	.word	0x00f00188
 802b840:	01980310 	.word	0x01980310
 802b844:	02790098 	.word	0x02790098
 802b848:	03100310 	.word	0x03100310
 802b84c:	03100065 	.word	0x03100065
 802b850:	0098      	.short	0x0098
 802b852:	9800      	ldr	r0, [sp, #0]
 802b854:	aa0e      	add	r2, sp, #56	@ 0x38
 802b856:	4639      	mov	r1, r7
 802b858:	f000 fc9a 	bl	802c190 <__sprint_r>
 802b85c:	2800      	cmp	r0, #0
 802b85e:	f040 8332 	bne.w	802bec6 <_vfiprintf_r+0x852>
 802b862:	ae11      	add	r6, sp, #68	@ 0x44
 802b864:	e780      	b.n	802b768 <_vfiprintf_r+0xf4>
 802b866:	4a98      	ldr	r2, [pc, #608]	@ (802bac8 <_vfiprintf_r+0x454>)
 802b868:	9205      	str	r2, [sp, #20]
 802b86a:	f01a 0220 	ands.w	r2, sl, #32
 802b86e:	f000 822e 	beq.w	802bcce <_vfiprintf_r+0x65a>
 802b872:	3507      	adds	r5, #7
 802b874:	f025 0507 	bic.w	r5, r5, #7
 802b878:	46a8      	mov	r8, r5
 802b87a:	686d      	ldr	r5, [r5, #4]
 802b87c:	f858 4b08 	ldr.w	r4, [r8], #8
 802b880:	f01a 0f01 	tst.w	sl, #1
 802b884:	d009      	beq.n	802b89a <_vfiprintf_r+0x226>
 802b886:	ea54 0205 	orrs.w	r2, r4, r5
 802b88a:	bf1f      	itttt	ne
 802b88c:	2230      	movne	r2, #48	@ 0x30
 802b88e:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802b892:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802b896:	f04a 0a02 	orrne.w	sl, sl, #2
 802b89a:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802b89e:	e111      	b.n	802bac4 <_vfiprintf_r+0x450>
 802b8a0:	9800      	ldr	r0, [sp, #0]
 802b8a2:	f002 fc73 	bl	802e18c <_localeconv_r>
 802b8a6:	6843      	ldr	r3, [r0, #4]
 802b8a8:	9308      	str	r3, [sp, #32]
 802b8aa:	4618      	mov	r0, r3
 802b8ac:	f7e4 fcf8 	bl	80102a0 <strlen>
 802b8b0:	9007      	str	r0, [sp, #28]
 802b8b2:	9800      	ldr	r0, [sp, #0]
 802b8b4:	f002 fc6a 	bl	802e18c <_localeconv_r>
 802b8b8:	6883      	ldr	r3, [r0, #8]
 802b8ba:	9306      	str	r3, [sp, #24]
 802b8bc:	9b07      	ldr	r3, [sp, #28]
 802b8be:	b12b      	cbz	r3, 802b8cc <_vfiprintf_r+0x258>
 802b8c0:	9b06      	ldr	r3, [sp, #24]
 802b8c2:	b11b      	cbz	r3, 802b8cc <_vfiprintf_r+0x258>
 802b8c4:	781b      	ldrb	r3, [r3, #0]
 802b8c6:	b10b      	cbz	r3, 802b8cc <_vfiprintf_r+0x258>
 802b8c8:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 802b8cc:	465c      	mov	r4, fp
 802b8ce:	e75b      	b.n	802b788 <_vfiprintf_r+0x114>
 802b8d0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802b8d4:	2b00      	cmp	r3, #0
 802b8d6:	d1f9      	bne.n	802b8cc <_vfiprintf_r+0x258>
 802b8d8:	2320      	movs	r3, #32
 802b8da:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802b8de:	e7f5      	b.n	802b8cc <_vfiprintf_r+0x258>
 802b8e0:	f04a 0a01 	orr.w	sl, sl, #1
 802b8e4:	e7f2      	b.n	802b8cc <_vfiprintf_r+0x258>
 802b8e6:	f855 3b04 	ldr.w	r3, [r5], #4
 802b8ea:	9302      	str	r3, [sp, #8]
 802b8ec:	2b00      	cmp	r3, #0
 802b8ee:	daed      	bge.n	802b8cc <_vfiprintf_r+0x258>
 802b8f0:	425b      	negs	r3, r3
 802b8f2:	9302      	str	r3, [sp, #8]
 802b8f4:	f04a 0a04 	orr.w	sl, sl, #4
 802b8f8:	e7e8      	b.n	802b8cc <_vfiprintf_r+0x258>
 802b8fa:	232b      	movs	r3, #43	@ 0x2b
 802b8fc:	e7ed      	b.n	802b8da <_vfiprintf_r+0x266>
 802b8fe:	465a      	mov	r2, fp
 802b900:	f812 3b01 	ldrb.w	r3, [r2], #1
 802b904:	2b2a      	cmp	r3, #42	@ 0x2a
 802b906:	d113      	bne.n	802b930 <_vfiprintf_r+0x2bc>
 802b908:	f855 3b04 	ldr.w	r3, [r5], #4
 802b90c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802b910:	9301      	str	r3, [sp, #4]
 802b912:	4693      	mov	fp, r2
 802b914:	e7da      	b.n	802b8cc <_vfiprintf_r+0x258>
 802b916:	f812 3b01 	ldrb.w	r3, [r2], #1
 802b91a:	fb04 0101 	mla	r1, r4, r1, r0
 802b91e:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 802b922:	2809      	cmp	r0, #9
 802b924:	d9f7      	bls.n	802b916 <_vfiprintf_r+0x2a2>
 802b926:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
 802b92a:	9101      	str	r1, [sp, #4]
 802b92c:	4693      	mov	fp, r2
 802b92e:	e72e      	b.n	802b78e <_vfiprintf_r+0x11a>
 802b930:	2100      	movs	r1, #0
 802b932:	240a      	movs	r4, #10
 802b934:	e7f3      	b.n	802b91e <_vfiprintf_r+0x2aa>
 802b936:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 802b93a:	e7c7      	b.n	802b8cc <_vfiprintf_r+0x258>
 802b93c:	2200      	movs	r2, #0
 802b93e:	9202      	str	r2, [sp, #8]
 802b940:	210a      	movs	r1, #10
 802b942:	9a02      	ldr	r2, [sp, #8]
 802b944:	3b30      	subs	r3, #48	@ 0x30
 802b946:	fb01 3302 	mla	r3, r1, r2, r3
 802b94a:	9302      	str	r3, [sp, #8]
 802b94c:	f81b 3b01 	ldrb.w	r3, [fp], #1
 802b950:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 802b954:	2a09      	cmp	r2, #9
 802b956:	d9f4      	bls.n	802b942 <_vfiprintf_r+0x2ce>
 802b958:	e719      	b.n	802b78e <_vfiprintf_r+0x11a>
 802b95a:	f89b 3000 	ldrb.w	r3, [fp]
 802b95e:	2b68      	cmp	r3, #104	@ 0x68
 802b960:	bf06      	itte	eq
 802b962:	f10b 0b01 	addeq.w	fp, fp, #1
 802b966:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 802b96a:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 802b96e:	e7ad      	b.n	802b8cc <_vfiprintf_r+0x258>
 802b970:	f89b 3000 	ldrb.w	r3, [fp]
 802b974:	2b6c      	cmp	r3, #108	@ 0x6c
 802b976:	d104      	bne.n	802b982 <_vfiprintf_r+0x30e>
 802b978:	f10b 0b01 	add.w	fp, fp, #1
 802b97c:	f04a 0a20 	orr.w	sl, sl, #32
 802b980:	e7a4      	b.n	802b8cc <_vfiprintf_r+0x258>
 802b982:	f04a 0a10 	orr.w	sl, sl, #16
 802b986:	e7a1      	b.n	802b8cc <_vfiprintf_r+0x258>
 802b988:	46a8      	mov	r8, r5
 802b98a:	2400      	movs	r4, #0
 802b98c:	f858 3b04 	ldr.w	r3, [r8], #4
 802b990:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802b994:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802b998:	2301      	movs	r3, #1
 802b99a:	9301      	str	r3, [sp, #4]
 802b99c:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 802b9a0:	e0a9      	b.n	802baf6 <_vfiprintf_r+0x482>
 802b9a2:	f04a 0a10 	orr.w	sl, sl, #16
 802b9a6:	f01a 0f20 	tst.w	sl, #32
 802b9aa:	d011      	beq.n	802b9d0 <_vfiprintf_r+0x35c>
 802b9ac:	3507      	adds	r5, #7
 802b9ae:	f025 0507 	bic.w	r5, r5, #7
 802b9b2:	46a8      	mov	r8, r5
 802b9b4:	686d      	ldr	r5, [r5, #4]
 802b9b6:	f858 4b08 	ldr.w	r4, [r8], #8
 802b9ba:	2d00      	cmp	r5, #0
 802b9bc:	da06      	bge.n	802b9cc <_vfiprintf_r+0x358>
 802b9be:	4264      	negs	r4, r4
 802b9c0:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802b9c4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802b9c8:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802b9cc:	2301      	movs	r3, #1
 802b9ce:	e048      	b.n	802ba62 <_vfiprintf_r+0x3ee>
 802b9d0:	46a8      	mov	r8, r5
 802b9d2:	f01a 0f10 	tst.w	sl, #16
 802b9d6:	f858 5b04 	ldr.w	r5, [r8], #4
 802b9da:	d002      	beq.n	802b9e2 <_vfiprintf_r+0x36e>
 802b9dc:	462c      	mov	r4, r5
 802b9de:	17ed      	asrs	r5, r5, #31
 802b9e0:	e7eb      	b.n	802b9ba <_vfiprintf_r+0x346>
 802b9e2:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802b9e6:	d003      	beq.n	802b9f0 <_vfiprintf_r+0x37c>
 802b9e8:	b22c      	sxth	r4, r5
 802b9ea:	f345 35c0 	sbfx	r5, r5, #15, #1
 802b9ee:	e7e4      	b.n	802b9ba <_vfiprintf_r+0x346>
 802b9f0:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802b9f4:	d0f2      	beq.n	802b9dc <_vfiprintf_r+0x368>
 802b9f6:	b26c      	sxtb	r4, r5
 802b9f8:	f345 15c0 	sbfx	r5, r5, #7, #1
 802b9fc:	e7dd      	b.n	802b9ba <_vfiprintf_r+0x346>
 802b9fe:	f01a 0f20 	tst.w	sl, #32
 802ba02:	d007      	beq.n	802ba14 <_vfiprintf_r+0x3a0>
 802ba04:	9a03      	ldr	r2, [sp, #12]
 802ba06:	682b      	ldr	r3, [r5, #0]
 802ba08:	9903      	ldr	r1, [sp, #12]
 802ba0a:	17d2      	asrs	r2, r2, #31
 802ba0c:	e9c3 1200 	strd	r1, r2, [r3]
 802ba10:	3504      	adds	r5, #4
 802ba12:	e694      	b.n	802b73e <_vfiprintf_r+0xca>
 802ba14:	f01a 0f10 	tst.w	sl, #16
 802ba18:	d003      	beq.n	802ba22 <_vfiprintf_r+0x3ae>
 802ba1a:	682b      	ldr	r3, [r5, #0]
 802ba1c:	9a03      	ldr	r2, [sp, #12]
 802ba1e:	601a      	str	r2, [r3, #0]
 802ba20:	e7f6      	b.n	802ba10 <_vfiprintf_r+0x39c>
 802ba22:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802ba26:	d003      	beq.n	802ba30 <_vfiprintf_r+0x3bc>
 802ba28:	682b      	ldr	r3, [r5, #0]
 802ba2a:	9a03      	ldr	r2, [sp, #12]
 802ba2c:	801a      	strh	r2, [r3, #0]
 802ba2e:	e7ef      	b.n	802ba10 <_vfiprintf_r+0x39c>
 802ba30:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802ba34:	d0f1      	beq.n	802ba1a <_vfiprintf_r+0x3a6>
 802ba36:	682b      	ldr	r3, [r5, #0]
 802ba38:	9a03      	ldr	r2, [sp, #12]
 802ba3a:	701a      	strb	r2, [r3, #0]
 802ba3c:	e7e8      	b.n	802ba10 <_vfiprintf_r+0x39c>
 802ba3e:	f04a 0a10 	orr.w	sl, sl, #16
 802ba42:	f01a 0320 	ands.w	r3, sl, #32
 802ba46:	d01f      	beq.n	802ba88 <_vfiprintf_r+0x414>
 802ba48:	3507      	adds	r5, #7
 802ba4a:	f025 0507 	bic.w	r5, r5, #7
 802ba4e:	46a8      	mov	r8, r5
 802ba50:	686d      	ldr	r5, [r5, #4]
 802ba52:	f858 4b08 	ldr.w	r4, [r8], #8
 802ba56:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802ba5a:	2300      	movs	r3, #0
 802ba5c:	2200      	movs	r2, #0
 802ba5e:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802ba62:	9a01      	ldr	r2, [sp, #4]
 802ba64:	2a00      	cmp	r2, #0
 802ba66:	f2c0 825c 	blt.w	802bf22 <_vfiprintf_r+0x8ae>
 802ba6a:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 802ba6e:	9204      	str	r2, [sp, #16]
 802ba70:	ea54 0205 	orrs.w	r2, r4, r5
 802ba74:	f040 825b 	bne.w	802bf2e <_vfiprintf_r+0x8ba>
 802ba78:	9a01      	ldr	r2, [sp, #4]
 802ba7a:	2a00      	cmp	r2, #0
 802ba7c:	f000 8195 	beq.w	802bdaa <_vfiprintf_r+0x736>
 802ba80:	2b01      	cmp	r3, #1
 802ba82:	f040 8257 	bne.w	802bf34 <_vfiprintf_r+0x8c0>
 802ba86:	e139      	b.n	802bcfc <_vfiprintf_r+0x688>
 802ba88:	46a8      	mov	r8, r5
 802ba8a:	f01a 0510 	ands.w	r5, sl, #16
 802ba8e:	f858 4b04 	ldr.w	r4, [r8], #4
 802ba92:	d001      	beq.n	802ba98 <_vfiprintf_r+0x424>
 802ba94:	461d      	mov	r5, r3
 802ba96:	e7de      	b.n	802ba56 <_vfiprintf_r+0x3e2>
 802ba98:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802ba9c:	d001      	beq.n	802baa2 <_vfiprintf_r+0x42e>
 802ba9e:	b2a4      	uxth	r4, r4
 802baa0:	e7d9      	b.n	802ba56 <_vfiprintf_r+0x3e2>
 802baa2:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802baa6:	d0d6      	beq.n	802ba56 <_vfiprintf_r+0x3e2>
 802baa8:	b2e4      	uxtb	r4, r4
 802baaa:	e7f3      	b.n	802ba94 <_vfiprintf_r+0x420>
 802baac:	46a8      	mov	r8, r5
 802baae:	f647 0330 	movw	r3, #30768	@ 0x7830
 802bab2:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802bab6:	f858 4b04 	ldr.w	r4, [r8], #4
 802baba:	4b03      	ldr	r3, [pc, #12]	@ (802bac8 <_vfiprintf_r+0x454>)
 802babc:	9305      	str	r3, [sp, #20]
 802babe:	2500      	movs	r5, #0
 802bac0:	f04a 0a02 	orr.w	sl, sl, #2
 802bac4:	2302      	movs	r3, #2
 802bac6:	e7c9      	b.n	802ba5c <_vfiprintf_r+0x3e8>
 802bac8:	0803dad5 	.word	0x0803dad5
 802bacc:	9b01      	ldr	r3, [sp, #4]
 802bace:	46a8      	mov	r8, r5
 802bad0:	2500      	movs	r5, #0
 802bad2:	42ab      	cmp	r3, r5
 802bad4:	f858 9b04 	ldr.w	r9, [r8], #4
 802bad8:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802badc:	f2c0 80d0 	blt.w	802bc80 <_vfiprintf_r+0x60c>
 802bae0:	461a      	mov	r2, r3
 802bae2:	4629      	mov	r1, r5
 802bae4:	4648      	mov	r0, r9
 802bae6:	f7e4 fb8b 	bl	8010200 <memchr>
 802baea:	4604      	mov	r4, r0
 802baec:	b118      	cbz	r0, 802baf6 <_vfiprintf_r+0x482>
 802baee:	eba0 0309 	sub.w	r3, r0, r9
 802baf2:	9301      	str	r3, [sp, #4]
 802baf4:	462c      	mov	r4, r5
 802baf6:	9b01      	ldr	r3, [sp, #4]
 802baf8:	42a3      	cmp	r3, r4
 802bafa:	bfb8      	it	lt
 802bafc:	4623      	movlt	r3, r4
 802bafe:	9304      	str	r3, [sp, #16]
 802bb00:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802bb04:	b113      	cbz	r3, 802bb0c <_vfiprintf_r+0x498>
 802bb06:	9b04      	ldr	r3, [sp, #16]
 802bb08:	3301      	adds	r3, #1
 802bb0a:	9304      	str	r3, [sp, #16]
 802bb0c:	f01a 0302 	ands.w	r3, sl, #2
 802bb10:	9309      	str	r3, [sp, #36]	@ 0x24
 802bb12:	bf1e      	ittt	ne
 802bb14:	9b04      	ldrne	r3, [sp, #16]
 802bb16:	3302      	addne	r3, #2
 802bb18:	9304      	strne	r3, [sp, #16]
 802bb1a:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 802bb1e:	930a      	str	r3, [sp, #40]	@ 0x28
 802bb20:	d11f      	bne.n	802bb62 <_vfiprintf_r+0x4ee>
 802bb22:	9b02      	ldr	r3, [sp, #8]
 802bb24:	9a04      	ldr	r2, [sp, #16]
 802bb26:	1a9d      	subs	r5, r3, r2
 802bb28:	2d00      	cmp	r5, #0
 802bb2a:	dd1a      	ble.n	802bb62 <_vfiprintf_r+0x4ee>
 802bb2c:	4ba8      	ldr	r3, [pc, #672]	@ (802bdd0 <_vfiprintf_r+0x75c>)
 802bb2e:	6033      	str	r3, [r6, #0]
 802bb30:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802bb34:	2d10      	cmp	r5, #16
 802bb36:	f102 0201 	add.w	r2, r2, #1
 802bb3a:	f106 0008 	add.w	r0, r6, #8
 802bb3e:	f300 814d 	bgt.w	802bddc <_vfiprintf_r+0x768>
 802bb42:	6075      	str	r5, [r6, #4]
 802bb44:	2a07      	cmp	r2, #7
 802bb46:	4465      	add	r5, ip
 802bb48:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802bb4c:	f340 8159 	ble.w	802be02 <_vfiprintf_r+0x78e>
 802bb50:	9800      	ldr	r0, [sp, #0]
 802bb52:	aa0e      	add	r2, sp, #56	@ 0x38
 802bb54:	4639      	mov	r1, r7
 802bb56:	f000 fb1b 	bl	802c190 <__sprint_r>
 802bb5a:	2800      	cmp	r0, #0
 802bb5c:	f040 81b3 	bne.w	802bec6 <_vfiprintf_r+0x852>
 802bb60:	ae11      	add	r6, sp, #68	@ 0x44
 802bb62:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802bb66:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802bb6a:	b161      	cbz	r1, 802bb86 <_vfiprintf_r+0x512>
 802bb6c:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802bb70:	3301      	adds	r3, #1
 802bb72:	6031      	str	r1, [r6, #0]
 802bb74:	2101      	movs	r1, #1
 802bb76:	440a      	add	r2, r1
 802bb78:	2b07      	cmp	r3, #7
 802bb7a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802bb7e:	6071      	str	r1, [r6, #4]
 802bb80:	f300 8141 	bgt.w	802be06 <_vfiprintf_r+0x792>
 802bb84:	3608      	adds	r6, #8
 802bb86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802bb88:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802bb8c:	b159      	cbz	r1, 802bba6 <_vfiprintf_r+0x532>
 802bb8e:	a90d      	add	r1, sp, #52	@ 0x34
 802bb90:	3301      	adds	r3, #1
 802bb92:	6031      	str	r1, [r6, #0]
 802bb94:	2102      	movs	r1, #2
 802bb96:	440a      	add	r2, r1
 802bb98:	2b07      	cmp	r3, #7
 802bb9a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802bb9e:	6071      	str	r1, [r6, #4]
 802bba0:	f300 813a 	bgt.w	802be18 <_vfiprintf_r+0x7a4>
 802bba4:	3608      	adds	r6, #8
 802bba6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802bba8:	2b80      	cmp	r3, #128	@ 0x80
 802bbaa:	d11f      	bne.n	802bbec <_vfiprintf_r+0x578>
 802bbac:	9b02      	ldr	r3, [sp, #8]
 802bbae:	9a04      	ldr	r2, [sp, #16]
 802bbb0:	1a9d      	subs	r5, r3, r2
 802bbb2:	2d00      	cmp	r5, #0
 802bbb4:	dd1a      	ble.n	802bbec <_vfiprintf_r+0x578>
 802bbb6:	4b87      	ldr	r3, [pc, #540]	@ (802bdd4 <_vfiprintf_r+0x760>)
 802bbb8:	6033      	str	r3, [r6, #0]
 802bbba:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802bbbe:	2d10      	cmp	r5, #16
 802bbc0:	f102 0201 	add.w	r2, r2, #1
 802bbc4:	f106 0008 	add.w	r0, r6, #8
 802bbc8:	f300 812f 	bgt.w	802be2a <_vfiprintf_r+0x7b6>
 802bbcc:	6075      	str	r5, [r6, #4]
 802bbce:	2a07      	cmp	r2, #7
 802bbd0:	4465      	add	r5, ip
 802bbd2:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802bbd6:	f340 813b 	ble.w	802be50 <_vfiprintf_r+0x7dc>
 802bbda:	9800      	ldr	r0, [sp, #0]
 802bbdc:	aa0e      	add	r2, sp, #56	@ 0x38
 802bbde:	4639      	mov	r1, r7
 802bbe0:	f000 fad6 	bl	802c190 <__sprint_r>
 802bbe4:	2800      	cmp	r0, #0
 802bbe6:	f040 816e 	bne.w	802bec6 <_vfiprintf_r+0x852>
 802bbea:	ae11      	add	r6, sp, #68	@ 0x44
 802bbec:	9b01      	ldr	r3, [sp, #4]
 802bbee:	1ae4      	subs	r4, r4, r3
 802bbf0:	2c00      	cmp	r4, #0
 802bbf2:	dd1a      	ble.n	802bc2a <_vfiprintf_r+0x5b6>
 802bbf4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802bbf8:	4876      	ldr	r0, [pc, #472]	@ (802bdd4 <_vfiprintf_r+0x760>)
 802bbfa:	6030      	str	r0, [r6, #0]
 802bbfc:	2c10      	cmp	r4, #16
 802bbfe:	f103 0301 	add.w	r3, r3, #1
 802bc02:	f106 0108 	add.w	r1, r6, #8
 802bc06:	f300 8125 	bgt.w	802be54 <_vfiprintf_r+0x7e0>
 802bc0a:	6074      	str	r4, [r6, #4]
 802bc0c:	2b07      	cmp	r3, #7
 802bc0e:	4414      	add	r4, r2
 802bc10:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802bc14:	f340 812f 	ble.w	802be76 <_vfiprintf_r+0x802>
 802bc18:	9800      	ldr	r0, [sp, #0]
 802bc1a:	aa0e      	add	r2, sp, #56	@ 0x38
 802bc1c:	4639      	mov	r1, r7
 802bc1e:	f000 fab7 	bl	802c190 <__sprint_r>
 802bc22:	2800      	cmp	r0, #0
 802bc24:	f040 814f 	bne.w	802bec6 <_vfiprintf_r+0x852>
 802bc28:	ae11      	add	r6, sp, #68	@ 0x44
 802bc2a:	9b01      	ldr	r3, [sp, #4]
 802bc2c:	9a01      	ldr	r2, [sp, #4]
 802bc2e:	6073      	str	r3, [r6, #4]
 802bc30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802bc32:	f8c6 9000 	str.w	r9, [r6]
 802bc36:	4413      	add	r3, r2
 802bc38:	9310      	str	r3, [sp, #64]	@ 0x40
 802bc3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802bc3c:	3301      	adds	r3, #1
 802bc3e:	2b07      	cmp	r3, #7
 802bc40:	930f      	str	r3, [sp, #60]	@ 0x3c
 802bc42:	f300 811a 	bgt.w	802be7a <_vfiprintf_r+0x806>
 802bc46:	f106 0308 	add.w	r3, r6, #8
 802bc4a:	f01a 0f04 	tst.w	sl, #4
 802bc4e:	f040 811c 	bne.w	802be8a <_vfiprintf_r+0x816>
 802bc52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802bc56:	9904      	ldr	r1, [sp, #16]
 802bc58:	428a      	cmp	r2, r1
 802bc5a:	bfac      	ite	ge
 802bc5c:	189b      	addge	r3, r3, r2
 802bc5e:	185b      	addlt	r3, r3, r1
 802bc60:	9303      	str	r3, [sp, #12]
 802bc62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802bc64:	b13b      	cbz	r3, 802bc76 <_vfiprintf_r+0x602>
 802bc66:	9800      	ldr	r0, [sp, #0]
 802bc68:	aa0e      	add	r2, sp, #56	@ 0x38
 802bc6a:	4639      	mov	r1, r7
 802bc6c:	f000 fa90 	bl	802c190 <__sprint_r>
 802bc70:	2800      	cmp	r0, #0
 802bc72:	f040 8128 	bne.w	802bec6 <_vfiprintf_r+0x852>
 802bc76:	2300      	movs	r3, #0
 802bc78:	930f      	str	r3, [sp, #60]	@ 0x3c
 802bc7a:	4645      	mov	r5, r8
 802bc7c:	ae11      	add	r6, sp, #68	@ 0x44
 802bc7e:	e55e      	b.n	802b73e <_vfiprintf_r+0xca>
 802bc80:	4648      	mov	r0, r9
 802bc82:	f7e4 fb0d 	bl	80102a0 <strlen>
 802bc86:	9001      	str	r0, [sp, #4]
 802bc88:	e734      	b.n	802baf4 <_vfiprintf_r+0x480>
 802bc8a:	f04a 0a10 	orr.w	sl, sl, #16
 802bc8e:	f01a 0320 	ands.w	r3, sl, #32
 802bc92:	d008      	beq.n	802bca6 <_vfiprintf_r+0x632>
 802bc94:	3507      	adds	r5, #7
 802bc96:	f025 0507 	bic.w	r5, r5, #7
 802bc9a:	46a8      	mov	r8, r5
 802bc9c:	686d      	ldr	r5, [r5, #4]
 802bc9e:	f858 4b08 	ldr.w	r4, [r8], #8
 802bca2:	2301      	movs	r3, #1
 802bca4:	e6da      	b.n	802ba5c <_vfiprintf_r+0x3e8>
 802bca6:	46a8      	mov	r8, r5
 802bca8:	f01a 0510 	ands.w	r5, sl, #16
 802bcac:	f858 4b04 	ldr.w	r4, [r8], #4
 802bcb0:	d001      	beq.n	802bcb6 <_vfiprintf_r+0x642>
 802bcb2:	461d      	mov	r5, r3
 802bcb4:	e7f5      	b.n	802bca2 <_vfiprintf_r+0x62e>
 802bcb6:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802bcba:	d001      	beq.n	802bcc0 <_vfiprintf_r+0x64c>
 802bcbc:	b2a4      	uxth	r4, r4
 802bcbe:	e7f0      	b.n	802bca2 <_vfiprintf_r+0x62e>
 802bcc0:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802bcc4:	d0ed      	beq.n	802bca2 <_vfiprintf_r+0x62e>
 802bcc6:	b2e4      	uxtb	r4, r4
 802bcc8:	e7f3      	b.n	802bcb2 <_vfiprintf_r+0x63e>
 802bcca:	4a43      	ldr	r2, [pc, #268]	@ (802bdd8 <_vfiprintf_r+0x764>)
 802bccc:	e5cc      	b.n	802b868 <_vfiprintf_r+0x1f4>
 802bcce:	46a8      	mov	r8, r5
 802bcd0:	f01a 0510 	ands.w	r5, sl, #16
 802bcd4:	f858 4b04 	ldr.w	r4, [r8], #4
 802bcd8:	d001      	beq.n	802bcde <_vfiprintf_r+0x66a>
 802bcda:	4615      	mov	r5, r2
 802bcdc:	e5d0      	b.n	802b880 <_vfiprintf_r+0x20c>
 802bcde:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 802bce2:	d001      	beq.n	802bce8 <_vfiprintf_r+0x674>
 802bce4:	b2a4      	uxth	r4, r4
 802bce6:	e5cb      	b.n	802b880 <_vfiprintf_r+0x20c>
 802bce8:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802bcec:	f43f adc8 	beq.w	802b880 <_vfiprintf_r+0x20c>
 802bcf0:	b2e4      	uxtb	r4, r4
 802bcf2:	e7f2      	b.n	802bcda <_vfiprintf_r+0x666>
 802bcf4:	2c0a      	cmp	r4, #10
 802bcf6:	f175 0300 	sbcs.w	r3, r5, #0
 802bcfa:	d206      	bcs.n	802bd0a <_vfiprintf_r+0x696>
 802bcfc:	3430      	adds	r4, #48	@ 0x30
 802bcfe:	b2e4      	uxtb	r4, r4
 802bd00:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802bd04:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 802bd08:	e130      	b.n	802bf6c <_vfiprintf_r+0x8f8>
 802bd0a:	ab3a      	add	r3, sp, #232	@ 0xe8
 802bd0c:	9309      	str	r3, [sp, #36]	@ 0x24
 802bd0e:	9b04      	ldr	r3, [sp, #16]
 802bd10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802bd14:	f04f 0a00 	mov.w	sl, #0
 802bd18:	930a      	str	r3, [sp, #40]	@ 0x28
 802bd1a:	220a      	movs	r2, #10
 802bd1c:	2300      	movs	r3, #0
 802bd1e:	4620      	mov	r0, r4
 802bd20:	4629      	mov	r1, r5
 802bd22:	f7e5 f819 	bl	8010d58 <__aeabi_uldivmod>
 802bd26:	910b      	str	r1, [sp, #44]	@ 0x2c
 802bd28:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802bd2a:	3230      	adds	r2, #48	@ 0x30
 802bd2c:	f801 2c01 	strb.w	r2, [r1, #-1]
 802bd30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802bd32:	4603      	mov	r3, r0
 802bd34:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 802bd38:	f10a 0a01 	add.w	sl, sl, #1
 802bd3c:	b312      	cbz	r2, 802bd84 <_vfiprintf_r+0x710>
 802bd3e:	9a06      	ldr	r2, [sp, #24]
 802bd40:	7812      	ldrb	r2, [r2, #0]
 802bd42:	4552      	cmp	r2, sl
 802bd44:	d11e      	bne.n	802bd84 <_vfiprintf_r+0x710>
 802bd46:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802bd4a:	d01b      	beq.n	802bd84 <_vfiprintf_r+0x710>
 802bd4c:	2c0a      	cmp	r4, #10
 802bd4e:	f175 0500 	sbcs.w	r5, r5, #0
 802bd52:	f0c0 810b 	bcc.w	802bf6c <_vfiprintf_r+0x8f8>
 802bd56:	9b07      	ldr	r3, [sp, #28]
 802bd58:	9009      	str	r0, [sp, #36]	@ 0x24
 802bd5a:	eba9 0903 	sub.w	r9, r9, r3
 802bd5e:	461a      	mov	r2, r3
 802bd60:	9908      	ldr	r1, [sp, #32]
 802bd62:	4648      	mov	r0, r9
 802bd64:	f000 fd93 	bl	802c88e <strncpy>
 802bd68:	9b06      	ldr	r3, [sp, #24]
 802bd6a:	785a      	ldrb	r2, [r3, #1]
 802bd6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bd6e:	b112      	cbz	r2, 802bd76 <_vfiprintf_r+0x702>
 802bd70:	9a06      	ldr	r2, [sp, #24]
 802bd72:	3201      	adds	r2, #1
 802bd74:	9206      	str	r2, [sp, #24]
 802bd76:	f04f 0a00 	mov.w	sl, #0
 802bd7a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802bd7c:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 802bd80:	461c      	mov	r4, r3
 802bd82:	e7ca      	b.n	802bd1a <_vfiprintf_r+0x6a6>
 802bd84:	2c0a      	cmp	r4, #10
 802bd86:	f175 0500 	sbcs.w	r5, r5, #0
 802bd8a:	d2f6      	bcs.n	802bd7a <_vfiprintf_r+0x706>
 802bd8c:	e0ee      	b.n	802bf6c <_vfiprintf_r+0x8f8>
 802bd8e:	f004 030f 	and.w	r3, r4, #15
 802bd92:	9a05      	ldr	r2, [sp, #20]
 802bd94:	0924      	lsrs	r4, r4, #4
 802bd96:	5cd3      	ldrb	r3, [r2, r3]
 802bd98:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802bd9c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802bda0:	092d      	lsrs	r5, r5, #4
 802bda2:	ea54 0305 	orrs.w	r3, r4, r5
 802bda6:	d1f2      	bne.n	802bd8e <_vfiprintf_r+0x71a>
 802bda8:	e0e0      	b.n	802bf6c <_vfiprintf_r+0x8f8>
 802bdaa:	b923      	cbnz	r3, 802bdb6 <_vfiprintf_r+0x742>
 802bdac:	f01a 0f01 	tst.w	sl, #1
 802bdb0:	d001      	beq.n	802bdb6 <_vfiprintf_r+0x742>
 802bdb2:	2430      	movs	r4, #48	@ 0x30
 802bdb4:	e7a4      	b.n	802bd00 <_vfiprintf_r+0x68c>
 802bdb6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802bdba:	e0d7      	b.n	802bf6c <_vfiprintf_r+0x8f8>
 802bdbc:	2b00      	cmp	r3, #0
 802bdbe:	f000 80a3 	beq.w	802bf08 <_vfiprintf_r+0x894>
 802bdc2:	2400      	movs	r4, #0
 802bdc4:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802bdc8:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802bdcc:	46a8      	mov	r8, r5
 802bdce:	e5e3      	b.n	802b998 <_vfiprintf_r+0x324>
 802bdd0:	0803de27 	.word	0x0803de27
 802bdd4:	0803de17 	.word	0x0803de17
 802bdd8:	0803dac4 	.word	0x0803dac4
 802bddc:	2110      	movs	r1, #16
 802bdde:	6071      	str	r1, [r6, #4]
 802bde0:	2a07      	cmp	r2, #7
 802bde2:	4461      	add	r1, ip
 802bde4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802bde8:	dd08      	ble.n	802bdfc <_vfiprintf_r+0x788>
 802bdea:	9800      	ldr	r0, [sp, #0]
 802bdec:	aa0e      	add	r2, sp, #56	@ 0x38
 802bdee:	4639      	mov	r1, r7
 802bdf0:	f000 f9ce 	bl	802c190 <__sprint_r>
 802bdf4:	2800      	cmp	r0, #0
 802bdf6:	d166      	bne.n	802bec6 <_vfiprintf_r+0x852>
 802bdf8:	4b60      	ldr	r3, [pc, #384]	@ (802bf7c <_vfiprintf_r+0x908>)
 802bdfa:	a811      	add	r0, sp, #68	@ 0x44
 802bdfc:	3d10      	subs	r5, #16
 802bdfe:	4606      	mov	r6, r0
 802be00:	e695      	b.n	802bb2e <_vfiprintf_r+0x4ba>
 802be02:	4606      	mov	r6, r0
 802be04:	e6ad      	b.n	802bb62 <_vfiprintf_r+0x4ee>
 802be06:	9800      	ldr	r0, [sp, #0]
 802be08:	aa0e      	add	r2, sp, #56	@ 0x38
 802be0a:	4639      	mov	r1, r7
 802be0c:	f000 f9c0 	bl	802c190 <__sprint_r>
 802be10:	2800      	cmp	r0, #0
 802be12:	d158      	bne.n	802bec6 <_vfiprintf_r+0x852>
 802be14:	ae11      	add	r6, sp, #68	@ 0x44
 802be16:	e6b6      	b.n	802bb86 <_vfiprintf_r+0x512>
 802be18:	9800      	ldr	r0, [sp, #0]
 802be1a:	aa0e      	add	r2, sp, #56	@ 0x38
 802be1c:	4639      	mov	r1, r7
 802be1e:	f000 f9b7 	bl	802c190 <__sprint_r>
 802be22:	2800      	cmp	r0, #0
 802be24:	d14f      	bne.n	802bec6 <_vfiprintf_r+0x852>
 802be26:	ae11      	add	r6, sp, #68	@ 0x44
 802be28:	e6bd      	b.n	802bba6 <_vfiprintf_r+0x532>
 802be2a:	2110      	movs	r1, #16
 802be2c:	6071      	str	r1, [r6, #4]
 802be2e:	2a07      	cmp	r2, #7
 802be30:	4461      	add	r1, ip
 802be32:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802be36:	dd08      	ble.n	802be4a <_vfiprintf_r+0x7d6>
 802be38:	9800      	ldr	r0, [sp, #0]
 802be3a:	aa0e      	add	r2, sp, #56	@ 0x38
 802be3c:	4639      	mov	r1, r7
 802be3e:	f000 f9a7 	bl	802c190 <__sprint_r>
 802be42:	2800      	cmp	r0, #0
 802be44:	d13f      	bne.n	802bec6 <_vfiprintf_r+0x852>
 802be46:	4b4e      	ldr	r3, [pc, #312]	@ (802bf80 <_vfiprintf_r+0x90c>)
 802be48:	a811      	add	r0, sp, #68	@ 0x44
 802be4a:	3d10      	subs	r5, #16
 802be4c:	4606      	mov	r6, r0
 802be4e:	e6b3      	b.n	802bbb8 <_vfiprintf_r+0x544>
 802be50:	4606      	mov	r6, r0
 802be52:	e6cb      	b.n	802bbec <_vfiprintf_r+0x578>
 802be54:	2010      	movs	r0, #16
 802be56:	4402      	add	r2, r0
 802be58:	2b07      	cmp	r3, #7
 802be5a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802be5e:	6070      	str	r0, [r6, #4]
 802be60:	dd06      	ble.n	802be70 <_vfiprintf_r+0x7fc>
 802be62:	9800      	ldr	r0, [sp, #0]
 802be64:	aa0e      	add	r2, sp, #56	@ 0x38
 802be66:	4639      	mov	r1, r7
 802be68:	f000 f992 	bl	802c190 <__sprint_r>
 802be6c:	bb58      	cbnz	r0, 802bec6 <_vfiprintf_r+0x852>
 802be6e:	a911      	add	r1, sp, #68	@ 0x44
 802be70:	3c10      	subs	r4, #16
 802be72:	460e      	mov	r6, r1
 802be74:	e6be      	b.n	802bbf4 <_vfiprintf_r+0x580>
 802be76:	460e      	mov	r6, r1
 802be78:	e6d7      	b.n	802bc2a <_vfiprintf_r+0x5b6>
 802be7a:	9800      	ldr	r0, [sp, #0]
 802be7c:	aa0e      	add	r2, sp, #56	@ 0x38
 802be7e:	4639      	mov	r1, r7
 802be80:	f000 f986 	bl	802c190 <__sprint_r>
 802be84:	b9f8      	cbnz	r0, 802bec6 <_vfiprintf_r+0x852>
 802be86:	ab11      	add	r3, sp, #68	@ 0x44
 802be88:	e6df      	b.n	802bc4a <_vfiprintf_r+0x5d6>
 802be8a:	9a02      	ldr	r2, [sp, #8]
 802be8c:	9904      	ldr	r1, [sp, #16]
 802be8e:	1a54      	subs	r4, r2, r1
 802be90:	2c00      	cmp	r4, #0
 802be92:	f77f aede 	ble.w	802bc52 <_vfiprintf_r+0x5de>
 802be96:	4d39      	ldr	r5, [pc, #228]	@ (802bf7c <_vfiprintf_r+0x908>)
 802be98:	2610      	movs	r6, #16
 802be9a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802be9e:	2c10      	cmp	r4, #16
 802bea0:	f102 0201 	add.w	r2, r2, #1
 802bea4:	601d      	str	r5, [r3, #0]
 802bea6:	dc1d      	bgt.n	802bee4 <_vfiprintf_r+0x870>
 802bea8:	605c      	str	r4, [r3, #4]
 802beaa:	2a07      	cmp	r2, #7
 802beac:	440c      	add	r4, r1
 802beae:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802beb2:	f77f aece 	ble.w	802bc52 <_vfiprintf_r+0x5de>
 802beb6:	9800      	ldr	r0, [sp, #0]
 802beb8:	aa0e      	add	r2, sp, #56	@ 0x38
 802beba:	4639      	mov	r1, r7
 802bebc:	f000 f968 	bl	802c190 <__sprint_r>
 802bec0:	2800      	cmp	r0, #0
 802bec2:	f43f aec6 	beq.w	802bc52 <_vfiprintf_r+0x5de>
 802bec6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802bec8:	07d9      	lsls	r1, r3, #31
 802beca:	d405      	bmi.n	802bed8 <_vfiprintf_r+0x864>
 802becc:	89bb      	ldrh	r3, [r7, #12]
 802bece:	059a      	lsls	r2, r3, #22
 802bed0:	d402      	bmi.n	802bed8 <_vfiprintf_r+0x864>
 802bed2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802bed4:	f002 fa0f 	bl	802e2f6 <__retarget_lock_release_recursive>
 802bed8:	89bb      	ldrh	r3, [r7, #12]
 802beda:	065b      	lsls	r3, r3, #25
 802bedc:	f57f abf3 	bpl.w	802b6c6 <_vfiprintf_r+0x52>
 802bee0:	f7ff bbee 	b.w	802b6c0 <_vfiprintf_r+0x4c>
 802bee4:	3110      	adds	r1, #16
 802bee6:	2a07      	cmp	r2, #7
 802bee8:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802beec:	605e      	str	r6, [r3, #4]
 802beee:	dc02      	bgt.n	802bef6 <_vfiprintf_r+0x882>
 802bef0:	3308      	adds	r3, #8
 802bef2:	3c10      	subs	r4, #16
 802bef4:	e7d1      	b.n	802be9a <_vfiprintf_r+0x826>
 802bef6:	9800      	ldr	r0, [sp, #0]
 802bef8:	aa0e      	add	r2, sp, #56	@ 0x38
 802befa:	4639      	mov	r1, r7
 802befc:	f000 f948 	bl	802c190 <__sprint_r>
 802bf00:	2800      	cmp	r0, #0
 802bf02:	d1e0      	bne.n	802bec6 <_vfiprintf_r+0x852>
 802bf04:	ab11      	add	r3, sp, #68	@ 0x44
 802bf06:	e7f4      	b.n	802bef2 <_vfiprintf_r+0x87e>
 802bf08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802bf0a:	b913      	cbnz	r3, 802bf12 <_vfiprintf_r+0x89e>
 802bf0c:	2300      	movs	r3, #0
 802bf0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802bf10:	e7d9      	b.n	802bec6 <_vfiprintf_r+0x852>
 802bf12:	9800      	ldr	r0, [sp, #0]
 802bf14:	aa0e      	add	r2, sp, #56	@ 0x38
 802bf16:	4639      	mov	r1, r7
 802bf18:	f000 f93a 	bl	802c190 <__sprint_r>
 802bf1c:	2800      	cmp	r0, #0
 802bf1e:	d0f5      	beq.n	802bf0c <_vfiprintf_r+0x898>
 802bf20:	e7d1      	b.n	802bec6 <_vfiprintf_r+0x852>
 802bf22:	ea54 0205 	orrs.w	r2, r4, r5
 802bf26:	f8cd a010 	str.w	sl, [sp, #16]
 802bf2a:	f43f ada9 	beq.w	802ba80 <_vfiprintf_r+0x40c>
 802bf2e:	2b01      	cmp	r3, #1
 802bf30:	f43f aee0 	beq.w	802bcf4 <_vfiprintf_r+0x680>
 802bf34:	2b02      	cmp	r3, #2
 802bf36:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802bf3a:	f43f af28 	beq.w	802bd8e <_vfiprintf_r+0x71a>
 802bf3e:	f004 0307 	and.w	r3, r4, #7
 802bf42:	08e4      	lsrs	r4, r4, #3
 802bf44:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802bf48:	08ed      	lsrs	r5, r5, #3
 802bf4a:	3330      	adds	r3, #48	@ 0x30
 802bf4c:	ea54 0105 	orrs.w	r1, r4, r5
 802bf50:	464a      	mov	r2, r9
 802bf52:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802bf56:	d1f2      	bne.n	802bf3e <_vfiprintf_r+0x8ca>
 802bf58:	9904      	ldr	r1, [sp, #16]
 802bf5a:	07c8      	lsls	r0, r1, #31
 802bf5c:	d506      	bpl.n	802bf6c <_vfiprintf_r+0x8f8>
 802bf5e:	2b30      	cmp	r3, #48	@ 0x30
 802bf60:	d004      	beq.n	802bf6c <_vfiprintf_r+0x8f8>
 802bf62:	2330      	movs	r3, #48	@ 0x30
 802bf64:	f809 3c01 	strb.w	r3, [r9, #-1]
 802bf68:	f1a2 0902 	sub.w	r9, r2, #2
 802bf6c:	ab3a      	add	r3, sp, #232	@ 0xe8
 802bf6e:	eba3 0309 	sub.w	r3, r3, r9
 802bf72:	9c01      	ldr	r4, [sp, #4]
 802bf74:	f8dd a010 	ldr.w	sl, [sp, #16]
 802bf78:	9301      	str	r3, [sp, #4]
 802bf7a:	e5bc      	b.n	802baf6 <_vfiprintf_r+0x482>
 802bf7c:	0803de27 	.word	0x0803de27
 802bf80:	0803de17 	.word	0x0803de17

0802bf84 <__sbprintf>:
 802bf84:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bf86:	461f      	mov	r7, r3
 802bf88:	898b      	ldrh	r3, [r1, #12]
 802bf8a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802bf8e:	f023 0302 	bic.w	r3, r3, #2
 802bf92:	f8ad 300c 	strh.w	r3, [sp, #12]
 802bf96:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802bf98:	9319      	str	r3, [sp, #100]	@ 0x64
 802bf9a:	89cb      	ldrh	r3, [r1, #14]
 802bf9c:	f8ad 300e 	strh.w	r3, [sp, #14]
 802bfa0:	69cb      	ldr	r3, [r1, #28]
 802bfa2:	9307      	str	r3, [sp, #28]
 802bfa4:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802bfa6:	9309      	str	r3, [sp, #36]	@ 0x24
 802bfa8:	ab1a      	add	r3, sp, #104	@ 0x68
 802bfaa:	9300      	str	r3, [sp, #0]
 802bfac:	9304      	str	r3, [sp, #16]
 802bfae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802bfb2:	4615      	mov	r5, r2
 802bfb4:	4606      	mov	r6, r0
 802bfb6:	9302      	str	r3, [sp, #8]
 802bfb8:	9305      	str	r3, [sp, #20]
 802bfba:	a816      	add	r0, sp, #88	@ 0x58
 802bfbc:	2300      	movs	r3, #0
 802bfbe:	460c      	mov	r4, r1
 802bfc0:	9306      	str	r3, [sp, #24]
 802bfc2:	f002 f993 	bl	802e2ec <__retarget_lock_init_recursive>
 802bfc6:	462a      	mov	r2, r5
 802bfc8:	463b      	mov	r3, r7
 802bfca:	4669      	mov	r1, sp
 802bfcc:	4630      	mov	r0, r6
 802bfce:	f7ff fb51 	bl	802b674 <_vfiprintf_r>
 802bfd2:	1e05      	subs	r5, r0, #0
 802bfd4:	db07      	blt.n	802bfe6 <__sbprintf+0x62>
 802bfd6:	4669      	mov	r1, sp
 802bfd8:	4630      	mov	r0, r6
 802bfda:	f000 f9c1 	bl	802c360 <_fflush_r>
 802bfde:	2800      	cmp	r0, #0
 802bfe0:	bf18      	it	ne
 802bfe2:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802bfe6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802bfea:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802bfec:	065b      	lsls	r3, r3, #25
 802bfee:	bf42      	ittt	mi
 802bff0:	89a3      	ldrhmi	r3, [r4, #12]
 802bff2:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802bff6:	81a3      	strhmi	r3, [r4, #12]
 802bff8:	f002 f979 	bl	802e2ee <__retarget_lock_close_recursive>
 802bffc:	4628      	mov	r0, r5
 802bffe:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802c002:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802c004 <srand>:
 802c004:	4b03      	ldr	r3, [pc, #12]	@ (802c014 <srand+0x10>)
 802c006:	681b      	ldr	r3, [r3, #0]
 802c008:	2200      	movs	r2, #0
 802c00a:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
 802c00e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 802c012:	4770      	bx	lr
 802c014:	2000017c 	.word	0x2000017c

0802c018 <rand>:
 802c018:	4b0a      	ldr	r3, [pc, #40]	@ (802c044 <rand+0x2c>)
 802c01a:	480b      	ldr	r0, [pc, #44]	@ (802c048 <rand+0x30>)
 802c01c:	6819      	ldr	r1, [r3, #0]
 802c01e:	4a0b      	ldr	r2, [pc, #44]	@ (802c04c <rand+0x34>)
 802c020:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 802c024:	b510      	push	{r4, lr}
 802c026:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 802c02a:	4358      	muls	r0, r3
 802c02c:	fb02 0004 	mla	r0, r2, r4, r0
 802c030:	fba3 3202 	umull	r3, r2, r3, r2
 802c034:	3301      	adds	r3, #1
 802c036:	eb40 0002 	adc.w	r0, r0, r2
 802c03a:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 802c03e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802c042:	bd10      	pop	{r4, pc}
 802c044:	2000017c 	.word	0x2000017c
 802c048:	5851f42d 	.word	0x5851f42d
 802c04c:	4c957f2d 	.word	0x4c957f2d

0802c050 <printf>:
 802c050:	b40f      	push	{r0, r1, r2, r3}
 802c052:	b507      	push	{r0, r1, r2, lr}
 802c054:	4906      	ldr	r1, [pc, #24]	@ (802c070 <printf+0x20>)
 802c056:	ab04      	add	r3, sp, #16
 802c058:	6808      	ldr	r0, [r1, #0]
 802c05a:	f853 2b04 	ldr.w	r2, [r3], #4
 802c05e:	6881      	ldr	r1, [r0, #8]
 802c060:	9301      	str	r3, [sp, #4]
 802c062:	f006 fd0d 	bl	8032a80 <_vfprintf_r>
 802c066:	b003      	add	sp, #12
 802c068:	f85d eb04 	ldr.w	lr, [sp], #4
 802c06c:	b004      	add	sp, #16
 802c06e:	4770      	bx	lr
 802c070:	2000017c 	.word	0x2000017c

0802c074 <putchar>:
 802c074:	4b02      	ldr	r3, [pc, #8]	@ (802c080 <putchar+0xc>)
 802c076:	4601      	mov	r1, r0
 802c078:	6818      	ldr	r0, [r3, #0]
 802c07a:	6882      	ldr	r2, [r0, #8]
 802c07c:	f008 bb00 	b.w	8034680 <_putc_r>
 802c080:	2000017c 	.word	0x2000017c

0802c084 <_strtol_l.isra.0>:
 802c084:	2b24      	cmp	r3, #36	@ 0x24
 802c086:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c08a:	4686      	mov	lr, r0
 802c08c:	4690      	mov	r8, r2
 802c08e:	d801      	bhi.n	802c094 <_strtol_l.isra.0+0x10>
 802c090:	2b01      	cmp	r3, #1
 802c092:	d106      	bne.n	802c0a2 <_strtol_l.isra.0+0x1e>
 802c094:	f002 f8f8 	bl	802e288 <__errno>
 802c098:	2316      	movs	r3, #22
 802c09a:	6003      	str	r3, [r0, #0]
 802c09c:	2000      	movs	r0, #0
 802c09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c0a2:	4834      	ldr	r0, [pc, #208]	@ (802c174 <_strtol_l.isra.0+0xf0>)
 802c0a4:	460d      	mov	r5, r1
 802c0a6:	462a      	mov	r2, r5
 802c0a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c0ac:	5d06      	ldrb	r6, [r0, r4]
 802c0ae:	f016 0608 	ands.w	r6, r6, #8
 802c0b2:	d1f8      	bne.n	802c0a6 <_strtol_l.isra.0+0x22>
 802c0b4:	2c2d      	cmp	r4, #45	@ 0x2d
 802c0b6:	d110      	bne.n	802c0da <_strtol_l.isra.0+0x56>
 802c0b8:	782c      	ldrb	r4, [r5, #0]
 802c0ba:	2601      	movs	r6, #1
 802c0bc:	1c95      	adds	r5, r2, #2
 802c0be:	f033 0210 	bics.w	r2, r3, #16
 802c0c2:	d115      	bne.n	802c0f0 <_strtol_l.isra.0+0x6c>
 802c0c4:	2c30      	cmp	r4, #48	@ 0x30
 802c0c6:	d10d      	bne.n	802c0e4 <_strtol_l.isra.0+0x60>
 802c0c8:	782a      	ldrb	r2, [r5, #0]
 802c0ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802c0ce:	2a58      	cmp	r2, #88	@ 0x58
 802c0d0:	d108      	bne.n	802c0e4 <_strtol_l.isra.0+0x60>
 802c0d2:	786c      	ldrb	r4, [r5, #1]
 802c0d4:	3502      	adds	r5, #2
 802c0d6:	2310      	movs	r3, #16
 802c0d8:	e00a      	b.n	802c0f0 <_strtol_l.isra.0+0x6c>
 802c0da:	2c2b      	cmp	r4, #43	@ 0x2b
 802c0dc:	bf04      	itt	eq
 802c0de:	782c      	ldrbeq	r4, [r5, #0]
 802c0e0:	1c95      	addeq	r5, r2, #2
 802c0e2:	e7ec      	b.n	802c0be <_strtol_l.isra.0+0x3a>
 802c0e4:	2b00      	cmp	r3, #0
 802c0e6:	d1f6      	bne.n	802c0d6 <_strtol_l.isra.0+0x52>
 802c0e8:	2c30      	cmp	r4, #48	@ 0x30
 802c0ea:	bf14      	ite	ne
 802c0ec:	230a      	movne	r3, #10
 802c0ee:	2308      	moveq	r3, #8
 802c0f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802c0f4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 802c0f8:	2200      	movs	r2, #0
 802c0fa:	fbbc f9f3 	udiv	r9, ip, r3
 802c0fe:	4610      	mov	r0, r2
 802c100:	fb03 ca19 	mls	sl, r3, r9, ip
 802c104:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802c108:	2f09      	cmp	r7, #9
 802c10a:	d80f      	bhi.n	802c12c <_strtol_l.isra.0+0xa8>
 802c10c:	463c      	mov	r4, r7
 802c10e:	42a3      	cmp	r3, r4
 802c110:	dd1b      	ble.n	802c14a <_strtol_l.isra.0+0xc6>
 802c112:	1c57      	adds	r7, r2, #1
 802c114:	d007      	beq.n	802c126 <_strtol_l.isra.0+0xa2>
 802c116:	4581      	cmp	r9, r0
 802c118:	d314      	bcc.n	802c144 <_strtol_l.isra.0+0xc0>
 802c11a:	d101      	bne.n	802c120 <_strtol_l.isra.0+0x9c>
 802c11c:	45a2      	cmp	sl, r4
 802c11e:	db11      	blt.n	802c144 <_strtol_l.isra.0+0xc0>
 802c120:	fb00 4003 	mla	r0, r0, r3, r4
 802c124:	2201      	movs	r2, #1
 802c126:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c12a:	e7eb      	b.n	802c104 <_strtol_l.isra.0+0x80>
 802c12c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 802c130:	2f19      	cmp	r7, #25
 802c132:	d801      	bhi.n	802c138 <_strtol_l.isra.0+0xb4>
 802c134:	3c37      	subs	r4, #55	@ 0x37
 802c136:	e7ea      	b.n	802c10e <_strtol_l.isra.0+0x8a>
 802c138:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802c13c:	2f19      	cmp	r7, #25
 802c13e:	d804      	bhi.n	802c14a <_strtol_l.isra.0+0xc6>
 802c140:	3c57      	subs	r4, #87	@ 0x57
 802c142:	e7e4      	b.n	802c10e <_strtol_l.isra.0+0x8a>
 802c144:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802c148:	e7ed      	b.n	802c126 <_strtol_l.isra.0+0xa2>
 802c14a:	1c53      	adds	r3, r2, #1
 802c14c:	d108      	bne.n	802c160 <_strtol_l.isra.0+0xdc>
 802c14e:	2322      	movs	r3, #34	@ 0x22
 802c150:	f8ce 3000 	str.w	r3, [lr]
 802c154:	4660      	mov	r0, ip
 802c156:	f1b8 0f00 	cmp.w	r8, #0
 802c15a:	d0a0      	beq.n	802c09e <_strtol_l.isra.0+0x1a>
 802c15c:	1e69      	subs	r1, r5, #1
 802c15e:	e006      	b.n	802c16e <_strtol_l.isra.0+0xea>
 802c160:	b106      	cbz	r6, 802c164 <_strtol_l.isra.0+0xe0>
 802c162:	4240      	negs	r0, r0
 802c164:	f1b8 0f00 	cmp.w	r8, #0
 802c168:	d099      	beq.n	802c09e <_strtol_l.isra.0+0x1a>
 802c16a:	2a00      	cmp	r2, #0
 802c16c:	d1f6      	bne.n	802c15c <_strtol_l.isra.0+0xd8>
 802c16e:	f8c8 1000 	str.w	r1, [r8]
 802c172:	e794      	b.n	802c09e <_strtol_l.isra.0+0x1a>
 802c174:	0803dff5 	.word	0x0803dff5

0802c178 <_strtol_r>:
 802c178:	f7ff bf84 	b.w	802c084 <_strtol_l.isra.0>

0802c17c <strtol>:
 802c17c:	4613      	mov	r3, r2
 802c17e:	460a      	mov	r2, r1
 802c180:	4601      	mov	r1, r0
 802c182:	4802      	ldr	r0, [pc, #8]	@ (802c18c <strtol+0x10>)
 802c184:	6800      	ldr	r0, [r0, #0]
 802c186:	f7ff bf7d 	b.w	802c084 <_strtol_l.isra.0>
 802c18a:	bf00      	nop
 802c18c:	2000017c 	.word	0x2000017c

0802c190 <__sprint_r>:
 802c190:	6893      	ldr	r3, [r2, #8]
 802c192:	b510      	push	{r4, lr}
 802c194:	4614      	mov	r4, r2
 802c196:	b133      	cbz	r3, 802c1a6 <__sprint_r+0x16>
 802c198:	f007 fee8 	bl	8033f6c <__sfvwrite_r>
 802c19c:	2300      	movs	r3, #0
 802c19e:	60a3      	str	r3, [r4, #8]
 802c1a0:	2300      	movs	r3, #0
 802c1a2:	6063      	str	r3, [r4, #4]
 802c1a4:	bd10      	pop	{r4, pc}
 802c1a6:	4618      	mov	r0, r3
 802c1a8:	e7fa      	b.n	802c1a0 <__sprint_r+0x10>
	...

0802c1ac <_puts_r>:
 802c1ac:	b530      	push	{r4, r5, lr}
 802c1ae:	4605      	mov	r5, r0
 802c1b0:	b089      	sub	sp, #36	@ 0x24
 802c1b2:	4608      	mov	r0, r1
 802c1b4:	460c      	mov	r4, r1
 802c1b6:	f7e4 f873 	bl	80102a0 <strlen>
 802c1ba:	4b20      	ldr	r3, [pc, #128]	@ (802c23c <_puts_r+0x90>)
 802c1bc:	9306      	str	r3, [sp, #24]
 802c1be:	2301      	movs	r3, #1
 802c1c0:	e9cd 4004 	strd	r4, r0, [sp, #16]
 802c1c4:	9307      	str	r3, [sp, #28]
 802c1c6:	4418      	add	r0, r3
 802c1c8:	ab04      	add	r3, sp, #16
 802c1ca:	9301      	str	r3, [sp, #4]
 802c1cc:	2302      	movs	r3, #2
 802c1ce:	9302      	str	r3, [sp, #8]
 802c1d0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 802c1d2:	68ac      	ldr	r4, [r5, #8]
 802c1d4:	9003      	str	r0, [sp, #12]
 802c1d6:	b913      	cbnz	r3, 802c1de <_puts_r+0x32>
 802c1d8:	4628      	mov	r0, r5
 802c1da:	f000 fa3d 	bl	802c658 <__sinit>
 802c1de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c1e0:	07da      	lsls	r2, r3, #31
 802c1e2:	d405      	bmi.n	802c1f0 <_puts_r+0x44>
 802c1e4:	89a3      	ldrh	r3, [r4, #12]
 802c1e6:	059b      	lsls	r3, r3, #22
 802c1e8:	d402      	bmi.n	802c1f0 <_puts_r+0x44>
 802c1ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c1ec:	f002 f881 	bl	802e2f2 <__retarget_lock_acquire_recursive>
 802c1f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c1f4:	0498      	lsls	r0, r3, #18
 802c1f6:	d406      	bmi.n	802c206 <_puts_r+0x5a>
 802c1f8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802c1fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802c1fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 802c202:	81a3      	strh	r3, [r4, #12]
 802c204:	6662      	str	r2, [r4, #100]	@ 0x64
 802c206:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c208:	0499      	lsls	r1, r3, #18
 802c20a:	d50d      	bpl.n	802c228 <_puts_r+0x7c>
 802c20c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 802c210:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c212:	07da      	lsls	r2, r3, #31
 802c214:	d405      	bmi.n	802c222 <_puts_r+0x76>
 802c216:	89a3      	ldrh	r3, [r4, #12]
 802c218:	059b      	lsls	r3, r3, #22
 802c21a:	d402      	bmi.n	802c222 <_puts_r+0x76>
 802c21c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c21e:	f002 f86a 	bl	802e2f6 <__retarget_lock_release_recursive>
 802c222:	4628      	mov	r0, r5
 802c224:	b009      	add	sp, #36	@ 0x24
 802c226:	bd30      	pop	{r4, r5, pc}
 802c228:	aa01      	add	r2, sp, #4
 802c22a:	4621      	mov	r1, r4
 802c22c:	4628      	mov	r0, r5
 802c22e:	f007 fe9d 	bl	8033f6c <__sfvwrite_r>
 802c232:	2800      	cmp	r0, #0
 802c234:	d1ea      	bne.n	802c20c <_puts_r+0x60>
 802c236:	250a      	movs	r5, #10
 802c238:	e7ea      	b.n	802c210 <_puts_r+0x64>
 802c23a:	bf00      	nop
 802c23c:	0803dac2 	.word	0x0803dac2

0802c240 <puts>:
 802c240:	4b02      	ldr	r3, [pc, #8]	@ (802c24c <puts+0xc>)
 802c242:	4601      	mov	r1, r0
 802c244:	6818      	ldr	r0, [r3, #0]
 802c246:	f7ff bfb1 	b.w	802c1ac <_puts_r>
 802c24a:	bf00      	nop
 802c24c:	2000017c 	.word	0x2000017c

0802c250 <__sflush_r>:
 802c250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c254:	4605      	mov	r5, r0
 802c256:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 802c25a:	0706      	lsls	r6, r0, #28
 802c25c:	460c      	mov	r4, r1
 802c25e:	d457      	bmi.n	802c310 <__sflush_r+0xc0>
 802c260:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 802c264:	818b      	strh	r3, [r1, #12]
 802c266:	684b      	ldr	r3, [r1, #4]
 802c268:	2b00      	cmp	r3, #0
 802c26a:	dc02      	bgt.n	802c272 <__sflush_r+0x22>
 802c26c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 802c26e:	2b00      	cmp	r3, #0
 802c270:	dd4c      	ble.n	802c30c <__sflush_r+0xbc>
 802c272:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802c274:	2e00      	cmp	r6, #0
 802c276:	d049      	beq.n	802c30c <__sflush_r+0xbc>
 802c278:	2300      	movs	r3, #0
 802c27a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 802c27e:	682f      	ldr	r7, [r5, #0]
 802c280:	69e1      	ldr	r1, [r4, #28]
 802c282:	602b      	str	r3, [r5, #0]
 802c284:	d034      	beq.n	802c2f0 <__sflush_r+0xa0>
 802c286:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 802c288:	89a3      	ldrh	r3, [r4, #12]
 802c28a:	0759      	lsls	r1, r3, #29
 802c28c:	d505      	bpl.n	802c29a <__sflush_r+0x4a>
 802c28e:	6863      	ldr	r3, [r4, #4]
 802c290:	1ad2      	subs	r2, r2, r3
 802c292:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802c294:	b10b      	cbz	r3, 802c29a <__sflush_r+0x4a>
 802c296:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802c298:	1ad2      	subs	r2, r2, r3
 802c29a:	2300      	movs	r3, #0
 802c29c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802c29e:	69e1      	ldr	r1, [r4, #28]
 802c2a0:	4628      	mov	r0, r5
 802c2a2:	47b0      	blx	r6
 802c2a4:	1c43      	adds	r3, r0, #1
 802c2a6:	d106      	bne.n	802c2b6 <__sflush_r+0x66>
 802c2a8:	682a      	ldr	r2, [r5, #0]
 802c2aa:	2a1d      	cmp	r2, #29
 802c2ac:	d848      	bhi.n	802c340 <__sflush_r+0xf0>
 802c2ae:	4b2b      	ldr	r3, [pc, #172]	@ (802c35c <__sflush_r+0x10c>)
 802c2b0:	40d3      	lsrs	r3, r2
 802c2b2:	07de      	lsls	r6, r3, #31
 802c2b4:	d544      	bpl.n	802c340 <__sflush_r+0xf0>
 802c2b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c2ba:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 802c2be:	81a2      	strh	r2, [r4, #12]
 802c2c0:	2200      	movs	r2, #0
 802c2c2:	6062      	str	r2, [r4, #4]
 802c2c4:	04d9      	lsls	r1, r3, #19
 802c2c6:	6922      	ldr	r2, [r4, #16]
 802c2c8:	6022      	str	r2, [r4, #0]
 802c2ca:	d504      	bpl.n	802c2d6 <__sflush_r+0x86>
 802c2cc:	1c42      	adds	r2, r0, #1
 802c2ce:	d101      	bne.n	802c2d4 <__sflush_r+0x84>
 802c2d0:	682b      	ldr	r3, [r5, #0]
 802c2d2:	b903      	cbnz	r3, 802c2d6 <__sflush_r+0x86>
 802c2d4:	6520      	str	r0, [r4, #80]	@ 0x50
 802c2d6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802c2d8:	602f      	str	r7, [r5, #0]
 802c2da:	b1b9      	cbz	r1, 802c30c <__sflush_r+0xbc>
 802c2dc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802c2e0:	4299      	cmp	r1, r3
 802c2e2:	d002      	beq.n	802c2ea <__sflush_r+0x9a>
 802c2e4:	4628      	mov	r0, r5
 802c2e6:	f002 f88f 	bl	802e408 <_free_r>
 802c2ea:	2300      	movs	r3, #0
 802c2ec:	6323      	str	r3, [r4, #48]	@ 0x30
 802c2ee:	e00d      	b.n	802c30c <__sflush_r+0xbc>
 802c2f0:	2301      	movs	r3, #1
 802c2f2:	4628      	mov	r0, r5
 802c2f4:	47b0      	blx	r6
 802c2f6:	4602      	mov	r2, r0
 802c2f8:	1c50      	adds	r0, r2, #1
 802c2fa:	d1c5      	bne.n	802c288 <__sflush_r+0x38>
 802c2fc:	682b      	ldr	r3, [r5, #0]
 802c2fe:	2b00      	cmp	r3, #0
 802c300:	d0c2      	beq.n	802c288 <__sflush_r+0x38>
 802c302:	2b1d      	cmp	r3, #29
 802c304:	d001      	beq.n	802c30a <__sflush_r+0xba>
 802c306:	2b16      	cmp	r3, #22
 802c308:	d11a      	bne.n	802c340 <__sflush_r+0xf0>
 802c30a:	602f      	str	r7, [r5, #0]
 802c30c:	2000      	movs	r0, #0
 802c30e:	e01e      	b.n	802c34e <__sflush_r+0xfe>
 802c310:	690f      	ldr	r7, [r1, #16]
 802c312:	2f00      	cmp	r7, #0
 802c314:	d0fa      	beq.n	802c30c <__sflush_r+0xbc>
 802c316:	0783      	lsls	r3, r0, #30
 802c318:	680e      	ldr	r6, [r1, #0]
 802c31a:	bf08      	it	eq
 802c31c:	694b      	ldreq	r3, [r1, #20]
 802c31e:	600f      	str	r7, [r1, #0]
 802c320:	bf18      	it	ne
 802c322:	2300      	movne	r3, #0
 802c324:	eba6 0807 	sub.w	r8, r6, r7
 802c328:	608b      	str	r3, [r1, #8]
 802c32a:	f1b8 0f00 	cmp.w	r8, #0
 802c32e:	dded      	ble.n	802c30c <__sflush_r+0xbc>
 802c330:	69e1      	ldr	r1, [r4, #28]
 802c332:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 802c334:	4643      	mov	r3, r8
 802c336:	463a      	mov	r2, r7
 802c338:	4628      	mov	r0, r5
 802c33a:	47b0      	blx	r6
 802c33c:	2800      	cmp	r0, #0
 802c33e:	dc08      	bgt.n	802c352 <__sflush_r+0x102>
 802c340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c348:	81a3      	strh	r3, [r4, #12]
 802c34a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c352:	4407      	add	r7, r0
 802c354:	eba8 0800 	sub.w	r8, r8, r0
 802c358:	e7e7      	b.n	802c32a <__sflush_r+0xda>
 802c35a:	bf00      	nop
 802c35c:	20400001 	.word	0x20400001

0802c360 <_fflush_r>:
 802c360:	b538      	push	{r3, r4, r5, lr}
 802c362:	460c      	mov	r4, r1
 802c364:	4605      	mov	r5, r0
 802c366:	b118      	cbz	r0, 802c370 <_fflush_r+0x10>
 802c368:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802c36a:	b90b      	cbnz	r3, 802c370 <_fflush_r+0x10>
 802c36c:	f000 f974 	bl	802c658 <__sinit>
 802c370:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 802c374:	b1b8      	cbz	r0, 802c3a6 <_fflush_r+0x46>
 802c376:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c378:	07db      	lsls	r3, r3, #31
 802c37a:	d404      	bmi.n	802c386 <_fflush_r+0x26>
 802c37c:	0581      	lsls	r1, r0, #22
 802c37e:	d402      	bmi.n	802c386 <_fflush_r+0x26>
 802c380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c382:	f001 ffb6 	bl	802e2f2 <__retarget_lock_acquire_recursive>
 802c386:	4628      	mov	r0, r5
 802c388:	4621      	mov	r1, r4
 802c38a:	f7ff ff61 	bl	802c250 <__sflush_r>
 802c38e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c390:	07da      	lsls	r2, r3, #31
 802c392:	4605      	mov	r5, r0
 802c394:	d405      	bmi.n	802c3a2 <_fflush_r+0x42>
 802c396:	89a3      	ldrh	r3, [r4, #12]
 802c398:	059b      	lsls	r3, r3, #22
 802c39a:	d402      	bmi.n	802c3a2 <_fflush_r+0x42>
 802c39c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c39e:	f001 ffaa 	bl	802e2f6 <__retarget_lock_release_recursive>
 802c3a2:	4628      	mov	r0, r5
 802c3a4:	bd38      	pop	{r3, r4, r5, pc}
 802c3a6:	4605      	mov	r5, r0
 802c3a8:	e7fb      	b.n	802c3a2 <_fflush_r+0x42>
	...

0802c3ac <snprintf>:
 802c3ac:	b40c      	push	{r2, r3}
 802c3ae:	b530      	push	{r4, r5, lr}
 802c3b0:	4b18      	ldr	r3, [pc, #96]	@ (802c414 <snprintf+0x68>)
 802c3b2:	1e0c      	subs	r4, r1, #0
 802c3b4:	681d      	ldr	r5, [r3, #0]
 802c3b6:	b09d      	sub	sp, #116	@ 0x74
 802c3b8:	da08      	bge.n	802c3cc <snprintf+0x20>
 802c3ba:	238b      	movs	r3, #139	@ 0x8b
 802c3bc:	602b      	str	r3, [r5, #0]
 802c3be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c3c2:	b01d      	add	sp, #116	@ 0x74
 802c3c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802c3c8:	b002      	add	sp, #8
 802c3ca:	4770      	bx	lr
 802c3cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802c3d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 802c3d4:	f04f 0300 	mov.w	r3, #0
 802c3d8:	931b      	str	r3, [sp, #108]	@ 0x6c
 802c3da:	bf14      	ite	ne
 802c3dc:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802c3e0:	4623      	moveq	r3, r4
 802c3e2:	9304      	str	r3, [sp, #16]
 802c3e4:	9307      	str	r3, [sp, #28]
 802c3e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c3ea:	9002      	str	r0, [sp, #8]
 802c3ec:	9006      	str	r0, [sp, #24]
 802c3ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 802c3f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802c3f4:	ab21      	add	r3, sp, #132	@ 0x84
 802c3f6:	a902      	add	r1, sp, #8
 802c3f8:	4628      	mov	r0, r5
 802c3fa:	9301      	str	r3, [sp, #4]
 802c3fc:	f003 fff4 	bl	80303e8 <_svfprintf_r>
 802c400:	1c43      	adds	r3, r0, #1
 802c402:	bfbc      	itt	lt
 802c404:	238b      	movlt	r3, #139	@ 0x8b
 802c406:	602b      	strlt	r3, [r5, #0]
 802c408:	2c00      	cmp	r4, #0
 802c40a:	d0da      	beq.n	802c3c2 <snprintf+0x16>
 802c40c:	9b02      	ldr	r3, [sp, #8]
 802c40e:	2200      	movs	r2, #0
 802c410:	701a      	strb	r2, [r3, #0]
 802c412:	e7d6      	b.n	802c3c2 <snprintf+0x16>
 802c414:	2000017c 	.word	0x2000017c

0802c418 <sprintf>:
 802c418:	b40e      	push	{r1, r2, r3}
 802c41a:	b510      	push	{r4, lr}
 802c41c:	b09d      	sub	sp, #116	@ 0x74
 802c41e:	ab1f      	add	r3, sp, #124	@ 0x7c
 802c420:	9002      	str	r0, [sp, #8]
 802c422:	9006      	str	r0, [sp, #24]
 802c424:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802c428:	480a      	ldr	r0, [pc, #40]	@ (802c454 <sprintf+0x3c>)
 802c42a:	9107      	str	r1, [sp, #28]
 802c42c:	9104      	str	r1, [sp, #16]
 802c42e:	490a      	ldr	r1, [pc, #40]	@ (802c458 <sprintf+0x40>)
 802c430:	f853 2b04 	ldr.w	r2, [r3], #4
 802c434:	9105      	str	r1, [sp, #20]
 802c436:	2400      	movs	r4, #0
 802c438:	a902      	add	r1, sp, #8
 802c43a:	6800      	ldr	r0, [r0, #0]
 802c43c:	9301      	str	r3, [sp, #4]
 802c43e:	941b      	str	r4, [sp, #108]	@ 0x6c
 802c440:	f003 ffd2 	bl	80303e8 <_svfprintf_r>
 802c444:	9b02      	ldr	r3, [sp, #8]
 802c446:	701c      	strb	r4, [r3, #0]
 802c448:	b01d      	add	sp, #116	@ 0x74
 802c44a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c44e:	b003      	add	sp, #12
 802c450:	4770      	bx	lr
 802c452:	bf00      	nop
 802c454:	2000017c 	.word	0x2000017c
 802c458:	ffff0208 	.word	0xffff0208

0802c45c <sscanf>:
 802c45c:	b40e      	push	{r1, r2, r3}
 802c45e:	b570      	push	{r4, r5, r6, lr}
 802c460:	b09d      	sub	sp, #116	@ 0x74
 802c462:	ac21      	add	r4, sp, #132	@ 0x84
 802c464:	2500      	movs	r5, #0
 802c466:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802c46a:	f854 6b04 	ldr.w	r6, [r4], #4
 802c46e:	f8ad 2014 	strh.w	r2, [sp, #20]
 802c472:	951b      	str	r5, [sp, #108]	@ 0x6c
 802c474:	9002      	str	r0, [sp, #8]
 802c476:	9006      	str	r0, [sp, #24]
 802c478:	f7e3 ff12 	bl	80102a0 <strlen>
 802c47c:	4b0b      	ldr	r3, [pc, #44]	@ (802c4ac <sscanf+0x50>)
 802c47e:	9003      	str	r0, [sp, #12]
 802c480:	9007      	str	r0, [sp, #28]
 802c482:	480b      	ldr	r0, [pc, #44]	@ (802c4b0 <sscanf+0x54>)
 802c484:	930a      	str	r3, [sp, #40]	@ 0x28
 802c486:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c48a:	f8ad 3016 	strh.w	r3, [sp, #22]
 802c48e:	4632      	mov	r2, r6
 802c490:	4623      	mov	r3, r4
 802c492:	a902      	add	r1, sp, #8
 802c494:	6800      	ldr	r0, [r0, #0]
 802c496:	950e      	str	r5, [sp, #56]	@ 0x38
 802c498:	9513      	str	r5, [sp, #76]	@ 0x4c
 802c49a:	9401      	str	r4, [sp, #4]
 802c49c:	f005 f97a 	bl	8031794 <__ssvfscanf_r>
 802c4a0:	b01d      	add	sp, #116	@ 0x74
 802c4a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802c4a6:	b003      	add	sp, #12
 802c4a8:	4770      	bx	lr
 802c4aa:	bf00      	nop
 802c4ac:	0802c4d7 	.word	0x0802c4d7
 802c4b0:	2000017c 	.word	0x2000017c

0802c4b4 <__sread>:
 802c4b4:	b510      	push	{r4, lr}
 802c4b6:	460c      	mov	r4, r1
 802c4b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c4bc:	f001 fec0 	bl	802e240 <_read_r>
 802c4c0:	2800      	cmp	r0, #0
 802c4c2:	bfab      	itete	ge
 802c4c4:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 802c4c6:	89a3      	ldrhlt	r3, [r4, #12]
 802c4c8:	181b      	addge	r3, r3, r0
 802c4ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802c4ce:	bfac      	ite	ge
 802c4d0:	6523      	strge	r3, [r4, #80]	@ 0x50
 802c4d2:	81a3      	strhlt	r3, [r4, #12]
 802c4d4:	bd10      	pop	{r4, pc}

0802c4d6 <__seofread>:
 802c4d6:	2000      	movs	r0, #0
 802c4d8:	4770      	bx	lr

0802c4da <__swrite>:
 802c4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c4de:	461f      	mov	r7, r3
 802c4e0:	898b      	ldrh	r3, [r1, #12]
 802c4e2:	05db      	lsls	r3, r3, #23
 802c4e4:	4605      	mov	r5, r0
 802c4e6:	460c      	mov	r4, r1
 802c4e8:	4616      	mov	r6, r2
 802c4ea:	d505      	bpl.n	802c4f8 <__swrite+0x1e>
 802c4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c4f0:	2302      	movs	r3, #2
 802c4f2:	2200      	movs	r2, #0
 802c4f4:	f001 fe92 	bl	802e21c <_lseek_r>
 802c4f8:	89a3      	ldrh	r3, [r4, #12]
 802c4fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c4fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802c502:	81a3      	strh	r3, [r4, #12]
 802c504:	4632      	mov	r2, r6
 802c506:	463b      	mov	r3, r7
 802c508:	4628      	mov	r0, r5
 802c50a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c50e:	f001 bea9 	b.w	802e264 <_write_r>

0802c512 <__sseek>:
 802c512:	b510      	push	{r4, lr}
 802c514:	460c      	mov	r4, r1
 802c516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c51a:	f001 fe7f 	bl	802e21c <_lseek_r>
 802c51e:	1c43      	adds	r3, r0, #1
 802c520:	89a3      	ldrh	r3, [r4, #12]
 802c522:	bf15      	itete	ne
 802c524:	6520      	strne	r0, [r4, #80]	@ 0x50
 802c526:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802c52a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802c52e:	81a3      	strheq	r3, [r4, #12]
 802c530:	bf18      	it	ne
 802c532:	81a3      	strhne	r3, [r4, #12]
 802c534:	bd10      	pop	{r4, pc}

0802c536 <__sclose>:
 802c536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c53a:	f001 be2b 	b.w	802e194 <_close_r>
	...

0802c540 <std>:
 802c540:	2300      	movs	r3, #0
 802c542:	b510      	push	{r4, lr}
 802c544:	4604      	mov	r4, r0
 802c546:	e9c0 3300 	strd	r3, r3, [r0]
 802c54a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802c54e:	6083      	str	r3, [r0, #8]
 802c550:	8181      	strh	r1, [r0, #12]
 802c552:	6643      	str	r3, [r0, #100]	@ 0x64
 802c554:	81c2      	strh	r2, [r0, #14]
 802c556:	6183      	str	r3, [r0, #24]
 802c558:	4619      	mov	r1, r3
 802c55a:	2208      	movs	r2, #8
 802c55c:	305c      	adds	r0, #92	@ 0x5c
 802c55e:	f000 f94f 	bl	802c800 <memset>
 802c562:	4b0d      	ldr	r3, [pc, #52]	@ (802c598 <std+0x58>)
 802c564:	6223      	str	r3, [r4, #32]
 802c566:	4b0d      	ldr	r3, [pc, #52]	@ (802c59c <std+0x5c>)
 802c568:	6263      	str	r3, [r4, #36]	@ 0x24
 802c56a:	4b0d      	ldr	r3, [pc, #52]	@ (802c5a0 <std+0x60>)
 802c56c:	62a3      	str	r3, [r4, #40]	@ 0x28
 802c56e:	4b0d      	ldr	r3, [pc, #52]	@ (802c5a4 <std+0x64>)
 802c570:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802c572:	4b0d      	ldr	r3, [pc, #52]	@ (802c5a8 <std+0x68>)
 802c574:	61e4      	str	r4, [r4, #28]
 802c576:	429c      	cmp	r4, r3
 802c578:	d006      	beq.n	802c588 <std+0x48>
 802c57a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802c57e:	4294      	cmp	r4, r2
 802c580:	d002      	beq.n	802c588 <std+0x48>
 802c582:	33d0      	adds	r3, #208	@ 0xd0
 802c584:	429c      	cmp	r4, r3
 802c586:	d105      	bne.n	802c594 <std+0x54>
 802c588:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802c58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c590:	f001 beac 	b.w	802e2ec <__retarget_lock_init_recursive>
 802c594:	bd10      	pop	{r4, pc}
 802c596:	bf00      	nop
 802c598:	0802c4b5 	.word	0x0802c4b5
 802c59c:	0802c4db 	.word	0x0802c4db
 802c5a0:	0802c513 	.word	0x0802c513
 802c5a4:	0802c537 	.word	0x0802c537
 802c5a8:	2001a12c 	.word	0x2001a12c

0802c5ac <stdio_exit_handler>:
 802c5ac:	4a02      	ldr	r2, [pc, #8]	@ (802c5b8 <stdio_exit_handler+0xc>)
 802c5ae:	4903      	ldr	r1, [pc, #12]	@ (802c5bc <stdio_exit_handler+0x10>)
 802c5b0:	4803      	ldr	r0, [pc, #12]	@ (802c5c0 <stdio_exit_handler+0x14>)
 802c5b2:	f007 be33 	b.w	803421c <_fwalk_sglue>
 802c5b6:	bf00      	nop
 802c5b8:	20000168 	.word	0x20000168
 802c5bc:	080354b1 	.word	0x080354b1
 802c5c0:	20000180 	.word	0x20000180

0802c5c4 <cleanup_stdio>:
 802c5c4:	6841      	ldr	r1, [r0, #4]
 802c5c6:	4b0c      	ldr	r3, [pc, #48]	@ (802c5f8 <cleanup_stdio+0x34>)
 802c5c8:	4299      	cmp	r1, r3
 802c5ca:	b510      	push	{r4, lr}
 802c5cc:	4604      	mov	r4, r0
 802c5ce:	d001      	beq.n	802c5d4 <cleanup_stdio+0x10>
 802c5d0:	f008 ff6e 	bl	80354b0 <_fclose_r>
 802c5d4:	68a1      	ldr	r1, [r4, #8]
 802c5d6:	4b09      	ldr	r3, [pc, #36]	@ (802c5fc <cleanup_stdio+0x38>)
 802c5d8:	4299      	cmp	r1, r3
 802c5da:	d002      	beq.n	802c5e2 <cleanup_stdio+0x1e>
 802c5dc:	4620      	mov	r0, r4
 802c5de:	f008 ff67 	bl	80354b0 <_fclose_r>
 802c5e2:	68e1      	ldr	r1, [r4, #12]
 802c5e4:	4b06      	ldr	r3, [pc, #24]	@ (802c600 <cleanup_stdio+0x3c>)
 802c5e6:	4299      	cmp	r1, r3
 802c5e8:	d004      	beq.n	802c5f4 <cleanup_stdio+0x30>
 802c5ea:	4620      	mov	r0, r4
 802c5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c5f0:	f008 bf5e 	b.w	80354b0 <_fclose_r>
 802c5f4:	bd10      	pop	{r4, pc}
 802c5f6:	bf00      	nop
 802c5f8:	2001a12c 	.word	0x2001a12c
 802c5fc:	2001a194 	.word	0x2001a194
 802c600:	2001a1fc 	.word	0x2001a1fc

0802c604 <global_stdio_init.part.0>:
 802c604:	b510      	push	{r4, lr}
 802c606:	4b0b      	ldr	r3, [pc, #44]	@ (802c634 <global_stdio_init.part.0+0x30>)
 802c608:	4c0b      	ldr	r4, [pc, #44]	@ (802c638 <global_stdio_init.part.0+0x34>)
 802c60a:	4a0c      	ldr	r2, [pc, #48]	@ (802c63c <global_stdio_init.part.0+0x38>)
 802c60c:	601a      	str	r2, [r3, #0]
 802c60e:	4620      	mov	r0, r4
 802c610:	2200      	movs	r2, #0
 802c612:	2104      	movs	r1, #4
 802c614:	f7ff ff94 	bl	802c540 <std>
 802c618:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802c61c:	2201      	movs	r2, #1
 802c61e:	2109      	movs	r1, #9
 802c620:	f7ff ff8e 	bl	802c540 <std>
 802c624:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802c628:	2202      	movs	r2, #2
 802c62a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c62e:	2112      	movs	r1, #18
 802c630:	f7ff bf86 	b.w	802c540 <std>
 802c634:	2001a264 	.word	0x2001a264
 802c638:	2001a12c 	.word	0x2001a12c
 802c63c:	0802c5ad 	.word	0x0802c5ad

0802c640 <__sfp_lock_acquire>:
 802c640:	4801      	ldr	r0, [pc, #4]	@ (802c648 <__sfp_lock_acquire+0x8>)
 802c642:	f001 be56 	b.w	802e2f2 <__retarget_lock_acquire_recursive>
 802c646:	bf00      	nop
 802c648:	2001a294 	.word	0x2001a294

0802c64c <__sfp_lock_release>:
 802c64c:	4801      	ldr	r0, [pc, #4]	@ (802c654 <__sfp_lock_release+0x8>)
 802c64e:	f001 be52 	b.w	802e2f6 <__retarget_lock_release_recursive>
 802c652:	bf00      	nop
 802c654:	2001a294 	.word	0x2001a294

0802c658 <__sinit>:
 802c658:	b510      	push	{r4, lr}
 802c65a:	4604      	mov	r4, r0
 802c65c:	f7ff fff0 	bl	802c640 <__sfp_lock_acquire>
 802c660:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802c662:	b11b      	cbz	r3, 802c66c <__sinit+0x14>
 802c664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c668:	f7ff bff0 	b.w	802c64c <__sfp_lock_release>
 802c66c:	4b04      	ldr	r3, [pc, #16]	@ (802c680 <__sinit+0x28>)
 802c66e:	6363      	str	r3, [r4, #52]	@ 0x34
 802c670:	4b04      	ldr	r3, [pc, #16]	@ (802c684 <__sinit+0x2c>)
 802c672:	681b      	ldr	r3, [r3, #0]
 802c674:	2b00      	cmp	r3, #0
 802c676:	d1f5      	bne.n	802c664 <__sinit+0xc>
 802c678:	f7ff ffc4 	bl	802c604 <global_stdio_init.part.0>
 802c67c:	e7f2      	b.n	802c664 <__sinit+0xc>
 802c67e:	bf00      	nop
 802c680:	0802c5c5 	.word	0x0802c5c5
 802c684:	2001a264 	.word	0x2001a264

0802c688 <_vsnprintf_r>:
 802c688:	b530      	push	{r4, r5, lr}
 802c68a:	4614      	mov	r4, r2
 802c68c:	2c00      	cmp	r4, #0
 802c68e:	b09b      	sub	sp, #108	@ 0x6c
 802c690:	4605      	mov	r5, r0
 802c692:	461a      	mov	r2, r3
 802c694:	da05      	bge.n	802c6a2 <_vsnprintf_r+0x1a>
 802c696:	238b      	movs	r3, #139	@ 0x8b
 802c698:	6003      	str	r3, [r0, #0]
 802c69a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c69e:	b01b      	add	sp, #108	@ 0x6c
 802c6a0:	bd30      	pop	{r4, r5, pc}
 802c6a2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802c6a6:	f8ad 300c 	strh.w	r3, [sp, #12]
 802c6aa:	f04f 0300 	mov.w	r3, #0
 802c6ae:	9319      	str	r3, [sp, #100]	@ 0x64
 802c6b0:	bf14      	ite	ne
 802c6b2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802c6b6:	4623      	moveq	r3, r4
 802c6b8:	9302      	str	r3, [sp, #8]
 802c6ba:	9305      	str	r3, [sp, #20]
 802c6bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c6c0:	9100      	str	r1, [sp, #0]
 802c6c2:	9104      	str	r1, [sp, #16]
 802c6c4:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c6c8:	4669      	mov	r1, sp
 802c6ca:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802c6cc:	f003 fe8c 	bl	80303e8 <_svfprintf_r>
 802c6d0:	1c43      	adds	r3, r0, #1
 802c6d2:	bfbc      	itt	lt
 802c6d4:	238b      	movlt	r3, #139	@ 0x8b
 802c6d6:	602b      	strlt	r3, [r5, #0]
 802c6d8:	2c00      	cmp	r4, #0
 802c6da:	d0e0      	beq.n	802c69e <_vsnprintf_r+0x16>
 802c6dc:	9b00      	ldr	r3, [sp, #0]
 802c6de:	2200      	movs	r2, #0
 802c6e0:	701a      	strb	r2, [r3, #0]
 802c6e2:	e7dc      	b.n	802c69e <_vsnprintf_r+0x16>

0802c6e4 <vsnprintf>:
 802c6e4:	b507      	push	{r0, r1, r2, lr}
 802c6e6:	9300      	str	r3, [sp, #0]
 802c6e8:	4613      	mov	r3, r2
 802c6ea:	460a      	mov	r2, r1
 802c6ec:	4601      	mov	r1, r0
 802c6ee:	4803      	ldr	r0, [pc, #12]	@ (802c6fc <vsnprintf+0x18>)
 802c6f0:	6800      	ldr	r0, [r0, #0]
 802c6f2:	f7ff ffc9 	bl	802c688 <_vsnprintf_r>
 802c6f6:	b003      	add	sp, #12
 802c6f8:	f85d fb04 	ldr.w	pc, [sp], #4
 802c6fc:	2000017c 	.word	0x2000017c

0802c700 <__swsetup_r>:
 802c700:	b538      	push	{r3, r4, r5, lr}
 802c702:	4b29      	ldr	r3, [pc, #164]	@ (802c7a8 <__swsetup_r+0xa8>)
 802c704:	4605      	mov	r5, r0
 802c706:	6818      	ldr	r0, [r3, #0]
 802c708:	460c      	mov	r4, r1
 802c70a:	b118      	cbz	r0, 802c714 <__swsetup_r+0x14>
 802c70c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802c70e:	b90b      	cbnz	r3, 802c714 <__swsetup_r+0x14>
 802c710:	f7ff ffa2 	bl	802c658 <__sinit>
 802c714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c718:	0719      	lsls	r1, r3, #28
 802c71a:	d422      	bmi.n	802c762 <__swsetup_r+0x62>
 802c71c:	06da      	lsls	r2, r3, #27
 802c71e:	d407      	bmi.n	802c730 <__swsetup_r+0x30>
 802c720:	2209      	movs	r2, #9
 802c722:	602a      	str	r2, [r5, #0]
 802c724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c728:	81a3      	strh	r3, [r4, #12]
 802c72a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c72e:	e033      	b.n	802c798 <__swsetup_r+0x98>
 802c730:	0758      	lsls	r0, r3, #29
 802c732:	d512      	bpl.n	802c75a <__swsetup_r+0x5a>
 802c734:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802c736:	b141      	cbz	r1, 802c74a <__swsetup_r+0x4a>
 802c738:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802c73c:	4299      	cmp	r1, r3
 802c73e:	d002      	beq.n	802c746 <__swsetup_r+0x46>
 802c740:	4628      	mov	r0, r5
 802c742:	f001 fe61 	bl	802e408 <_free_r>
 802c746:	2300      	movs	r3, #0
 802c748:	6323      	str	r3, [r4, #48]	@ 0x30
 802c74a:	89a3      	ldrh	r3, [r4, #12]
 802c74c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802c750:	81a3      	strh	r3, [r4, #12]
 802c752:	2300      	movs	r3, #0
 802c754:	6063      	str	r3, [r4, #4]
 802c756:	6923      	ldr	r3, [r4, #16]
 802c758:	6023      	str	r3, [r4, #0]
 802c75a:	89a3      	ldrh	r3, [r4, #12]
 802c75c:	f043 0308 	orr.w	r3, r3, #8
 802c760:	81a3      	strh	r3, [r4, #12]
 802c762:	6923      	ldr	r3, [r4, #16]
 802c764:	b94b      	cbnz	r3, 802c77a <__swsetup_r+0x7a>
 802c766:	89a3      	ldrh	r3, [r4, #12]
 802c768:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802c76c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802c770:	d003      	beq.n	802c77a <__swsetup_r+0x7a>
 802c772:	4621      	mov	r1, r4
 802c774:	4628      	mov	r0, r5
 802c776:	f007 fd9f 	bl	80342b8 <__smakebuf_r>
 802c77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c77e:	f013 0201 	ands.w	r2, r3, #1
 802c782:	d00a      	beq.n	802c79a <__swsetup_r+0x9a>
 802c784:	2200      	movs	r2, #0
 802c786:	60a2      	str	r2, [r4, #8]
 802c788:	6962      	ldr	r2, [r4, #20]
 802c78a:	4252      	negs	r2, r2
 802c78c:	61a2      	str	r2, [r4, #24]
 802c78e:	6922      	ldr	r2, [r4, #16]
 802c790:	b942      	cbnz	r2, 802c7a4 <__swsetup_r+0xa4>
 802c792:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802c796:	d1c5      	bne.n	802c724 <__swsetup_r+0x24>
 802c798:	bd38      	pop	{r3, r4, r5, pc}
 802c79a:	0799      	lsls	r1, r3, #30
 802c79c:	bf58      	it	pl
 802c79e:	6962      	ldrpl	r2, [r4, #20]
 802c7a0:	60a2      	str	r2, [r4, #8]
 802c7a2:	e7f4      	b.n	802c78e <__swsetup_r+0x8e>
 802c7a4:	2000      	movs	r0, #0
 802c7a6:	e7f7      	b.n	802c798 <__swsetup_r+0x98>
 802c7a8:	2000017c 	.word	0x2000017c

0802c7ac <memcmp>:
 802c7ac:	b510      	push	{r4, lr}
 802c7ae:	3901      	subs	r1, #1
 802c7b0:	4402      	add	r2, r0
 802c7b2:	4290      	cmp	r0, r2
 802c7b4:	d101      	bne.n	802c7ba <memcmp+0xe>
 802c7b6:	2000      	movs	r0, #0
 802c7b8:	e005      	b.n	802c7c6 <memcmp+0x1a>
 802c7ba:	7803      	ldrb	r3, [r0, #0]
 802c7bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802c7c0:	42a3      	cmp	r3, r4
 802c7c2:	d001      	beq.n	802c7c8 <memcmp+0x1c>
 802c7c4:	1b18      	subs	r0, r3, r4
 802c7c6:	bd10      	pop	{r4, pc}
 802c7c8:	3001      	adds	r0, #1
 802c7ca:	e7f2      	b.n	802c7b2 <memcmp+0x6>

0802c7cc <memmove>:
 802c7cc:	4288      	cmp	r0, r1
 802c7ce:	b510      	push	{r4, lr}
 802c7d0:	eb01 0402 	add.w	r4, r1, r2
 802c7d4:	d902      	bls.n	802c7dc <memmove+0x10>
 802c7d6:	4284      	cmp	r4, r0
 802c7d8:	4623      	mov	r3, r4
 802c7da:	d807      	bhi.n	802c7ec <memmove+0x20>
 802c7dc:	1e43      	subs	r3, r0, #1
 802c7de:	42a1      	cmp	r1, r4
 802c7e0:	d008      	beq.n	802c7f4 <memmove+0x28>
 802c7e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 802c7e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 802c7ea:	e7f8      	b.n	802c7de <memmove+0x12>
 802c7ec:	4402      	add	r2, r0
 802c7ee:	4601      	mov	r1, r0
 802c7f0:	428a      	cmp	r2, r1
 802c7f2:	d100      	bne.n	802c7f6 <memmove+0x2a>
 802c7f4:	bd10      	pop	{r4, pc}
 802c7f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802c7fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802c7fe:	e7f7      	b.n	802c7f0 <memmove+0x24>

0802c800 <memset>:
 802c800:	4402      	add	r2, r0
 802c802:	4603      	mov	r3, r0
 802c804:	4293      	cmp	r3, r2
 802c806:	d100      	bne.n	802c80a <memset+0xa>
 802c808:	4770      	bx	lr
 802c80a:	f803 1b01 	strb.w	r1, [r3], #1
 802c80e:	e7f9      	b.n	802c804 <memset+0x4>

0802c810 <strcat>:
 802c810:	b510      	push	{r4, lr}
 802c812:	4602      	mov	r2, r0
 802c814:	7814      	ldrb	r4, [r2, #0]
 802c816:	4613      	mov	r3, r2
 802c818:	3201      	adds	r2, #1
 802c81a:	2c00      	cmp	r4, #0
 802c81c:	d1fa      	bne.n	802c814 <strcat+0x4>
 802c81e:	3b01      	subs	r3, #1
 802c820:	f811 2b01 	ldrb.w	r2, [r1], #1
 802c824:	f803 2f01 	strb.w	r2, [r3, #1]!
 802c828:	2a00      	cmp	r2, #0
 802c82a:	d1f9      	bne.n	802c820 <strcat+0x10>
 802c82c:	bd10      	pop	{r4, pc}

0802c82e <strchr>:
 802c82e:	b2c9      	uxtb	r1, r1
 802c830:	4603      	mov	r3, r0
 802c832:	4618      	mov	r0, r3
 802c834:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c838:	b112      	cbz	r2, 802c840 <strchr+0x12>
 802c83a:	428a      	cmp	r2, r1
 802c83c:	d1f9      	bne.n	802c832 <strchr+0x4>
 802c83e:	4770      	bx	lr
 802c840:	2900      	cmp	r1, #0
 802c842:	bf18      	it	ne
 802c844:	2000      	movne	r0, #0
 802c846:	4770      	bx	lr

0802c848 <strcspn>:
 802c848:	b570      	push	{r4, r5, r6, lr}
 802c84a:	4603      	mov	r3, r0
 802c84c:	461e      	mov	r6, r3
 802c84e:	f813 4b01 	ldrb.w	r4, [r3], #1
 802c852:	b144      	cbz	r4, 802c866 <strcspn+0x1e>
 802c854:	1e4a      	subs	r2, r1, #1
 802c856:	e001      	b.n	802c85c <strcspn+0x14>
 802c858:	42a5      	cmp	r5, r4
 802c85a:	d004      	beq.n	802c866 <strcspn+0x1e>
 802c85c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802c860:	2d00      	cmp	r5, #0
 802c862:	d1f9      	bne.n	802c858 <strcspn+0x10>
 802c864:	e7f2      	b.n	802c84c <strcspn+0x4>
 802c866:	1a30      	subs	r0, r6, r0
 802c868:	bd70      	pop	{r4, r5, r6, pc}

0802c86a <strncmp>:
 802c86a:	b510      	push	{r4, lr}
 802c86c:	b16a      	cbz	r2, 802c88a <strncmp+0x20>
 802c86e:	3901      	subs	r1, #1
 802c870:	1884      	adds	r4, r0, r2
 802c872:	f810 2b01 	ldrb.w	r2, [r0], #1
 802c876:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802c87a:	429a      	cmp	r2, r3
 802c87c:	d103      	bne.n	802c886 <strncmp+0x1c>
 802c87e:	42a0      	cmp	r0, r4
 802c880:	d001      	beq.n	802c886 <strncmp+0x1c>
 802c882:	2a00      	cmp	r2, #0
 802c884:	d1f5      	bne.n	802c872 <strncmp+0x8>
 802c886:	1ad0      	subs	r0, r2, r3
 802c888:	bd10      	pop	{r4, pc}
 802c88a:	4610      	mov	r0, r2
 802c88c:	e7fc      	b.n	802c888 <strncmp+0x1e>

0802c88e <strncpy>:
 802c88e:	b510      	push	{r4, lr}
 802c890:	3901      	subs	r1, #1
 802c892:	4603      	mov	r3, r0
 802c894:	b132      	cbz	r2, 802c8a4 <strncpy+0x16>
 802c896:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802c89a:	f803 4b01 	strb.w	r4, [r3], #1
 802c89e:	3a01      	subs	r2, #1
 802c8a0:	2c00      	cmp	r4, #0
 802c8a2:	d1f7      	bne.n	802c894 <strncpy+0x6>
 802c8a4:	441a      	add	r2, r3
 802c8a6:	2100      	movs	r1, #0
 802c8a8:	4293      	cmp	r3, r2
 802c8aa:	d100      	bne.n	802c8ae <strncpy+0x20>
 802c8ac:	bd10      	pop	{r4, pc}
 802c8ae:	f803 1b01 	strb.w	r1, [r3], #1
 802c8b2:	e7f9      	b.n	802c8a8 <strncpy+0x1a>

0802c8b4 <strrchr>:
 802c8b4:	b538      	push	{r3, r4, r5, lr}
 802c8b6:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 802c8ba:	4603      	mov	r3, r0
 802c8bc:	d10e      	bne.n	802c8dc <strrchr+0x28>
 802c8be:	4621      	mov	r1, r4
 802c8c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c8c4:	f7ff bfb3 	b.w	802c82e <strchr>
 802c8c8:	1c43      	adds	r3, r0, #1
 802c8ca:	4605      	mov	r5, r0
 802c8cc:	4621      	mov	r1, r4
 802c8ce:	4618      	mov	r0, r3
 802c8d0:	f7ff ffad 	bl	802c82e <strchr>
 802c8d4:	2800      	cmp	r0, #0
 802c8d6:	d1f7      	bne.n	802c8c8 <strrchr+0x14>
 802c8d8:	4628      	mov	r0, r5
 802c8da:	bd38      	pop	{r3, r4, r5, pc}
 802c8dc:	2500      	movs	r5, #0
 802c8de:	e7f5      	b.n	802c8cc <strrchr+0x18>

0802c8e0 <strspn>:
 802c8e0:	b570      	push	{r4, r5, r6, lr}
 802c8e2:	4603      	mov	r3, r0
 802c8e4:	461e      	mov	r6, r3
 802c8e6:	f813 4b01 	ldrb.w	r4, [r3], #1
 802c8ea:	b13c      	cbz	r4, 802c8fc <strspn+0x1c>
 802c8ec:	1e4a      	subs	r2, r1, #1
 802c8ee:	e001      	b.n	802c8f4 <strspn+0x14>
 802c8f0:	42a5      	cmp	r5, r4
 802c8f2:	d0f7      	beq.n	802c8e4 <strspn+0x4>
 802c8f4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802c8f8:	2d00      	cmp	r5, #0
 802c8fa:	d1f9      	bne.n	802c8f0 <strspn+0x10>
 802c8fc:	1a30      	subs	r0, r6, r0
 802c8fe:	bd70      	pop	{r4, r5, r6, pc}

0802c900 <strstr>:
 802c900:	780a      	ldrb	r2, [r1, #0]
 802c902:	b570      	push	{r4, r5, r6, lr}
 802c904:	b96a      	cbnz	r2, 802c922 <strstr+0x22>
 802c906:	bd70      	pop	{r4, r5, r6, pc}
 802c908:	429a      	cmp	r2, r3
 802c90a:	d109      	bne.n	802c920 <strstr+0x20>
 802c90c:	460c      	mov	r4, r1
 802c90e:	4605      	mov	r5, r0
 802c910:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802c914:	2b00      	cmp	r3, #0
 802c916:	d0f6      	beq.n	802c906 <strstr+0x6>
 802c918:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802c91c:	429e      	cmp	r6, r3
 802c91e:	d0f7      	beq.n	802c910 <strstr+0x10>
 802c920:	3001      	adds	r0, #1
 802c922:	7803      	ldrb	r3, [r0, #0]
 802c924:	2b00      	cmp	r3, #0
 802c926:	d1ef      	bne.n	802c908 <strstr+0x8>
 802c928:	4618      	mov	r0, r3
 802c92a:	e7ec      	b.n	802c906 <strstr+0x6>

0802c92c <gmtime_r>:
 802c92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c930:	4a4d      	ldr	r2, [pc, #308]	@ (802ca68 <gmtime_r+0x13c>)
 802c932:	460c      	mov	r4, r1
 802c934:	2300      	movs	r3, #0
 802c936:	e9d0 0100 	ldrd	r0, r1, [r0]
 802c93a:	f7e4 f9bd 	bl	8010cb8 <__aeabi_ldivmod>
 802c93e:	2a00      	cmp	r2, #0
 802c940:	bfbc      	itt	lt
 802c942:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 802c946:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 802c94a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802c94e:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 802c952:	fbb2 f3f1 	udiv	r3, r2, r1
 802c956:	fb01 2213 	mls	r2, r1, r3, r2
 802c95a:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 802c95e:	bfac      	ite	ge
 802c960:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 802c964:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 802c968:	60a3      	str	r3, [r4, #8]
 802c96a:	fbb2 f3f1 	udiv	r3, r2, r1
 802c96e:	fb01 2213 	mls	r2, r1, r3, r2
 802c972:	6063      	str	r3, [r4, #4]
 802c974:	6022      	str	r2, [r4, #0]
 802c976:	1cc3      	adds	r3, r0, #3
 802c978:	2207      	movs	r2, #7
 802c97a:	fb93 f2f2 	sdiv	r2, r3, r2
 802c97e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 802c982:	1a9b      	subs	r3, r3, r2
 802c984:	4939      	ldr	r1, [pc, #228]	@ (802ca6c <gmtime_r+0x140>)
 802c986:	d555      	bpl.n	802ca34 <gmtime_r+0x108>
 802c988:	3307      	adds	r3, #7
 802c98a:	61a3      	str	r3, [r4, #24]
 802c98c:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 802c990:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 802c994:	fb93 f1f1 	sdiv	r1, r3, r1
 802c998:	4b35      	ldr	r3, [pc, #212]	@ (802ca70 <gmtime_r+0x144>)
 802c99a:	fb03 0001 	mla	r0, r3, r1, r0
 802c99e:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 802c9a2:	fbb0 f3f3 	udiv	r3, r0, r3
 802c9a6:	4403      	add	r3, r0
 802c9a8:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 802c9ac:	fbb0 f2fc 	udiv	r2, r0, ip
 802c9b0:	1a9b      	subs	r3, r3, r2
 802c9b2:	f240 176d 	movw	r7, #365	@ 0x16d
 802c9b6:	4a2f      	ldr	r2, [pc, #188]	@ (802ca74 <gmtime_r+0x148>)
 802c9b8:	fbb0 f2f2 	udiv	r2, r0, r2
 802c9bc:	2664      	movs	r6, #100	@ 0x64
 802c9be:	1a9b      	subs	r3, r3, r2
 802c9c0:	fbb3 f2f7 	udiv	r2, r3, r7
 802c9c4:	fbb3 f3fc 	udiv	r3, r3, ip
 802c9c8:	fbb2 f5f6 	udiv	r5, r2, r6
 802c9cc:	1aeb      	subs	r3, r5, r3
 802c9ce:	4403      	add	r3, r0
 802c9d0:	fb07 3312 	mls	r3, r7, r2, r3
 802c9d4:	2099      	movs	r0, #153	@ 0x99
 802c9d6:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 802c9da:	3702      	adds	r7, #2
 802c9dc:	f103 0e01 	add.w	lr, r3, #1
 802c9e0:	fbb7 fcf0 	udiv	ip, r7, r0
 802c9e4:	fb00 f00c 	mul.w	r0, r0, ip
 802c9e8:	3002      	adds	r0, #2
 802c9ea:	f04f 0805 	mov.w	r8, #5
 802c9ee:	fbb0 f0f8 	udiv	r0, r0, r8
 802c9f2:	ebae 0000 	sub.w	r0, lr, r0
 802c9f6:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 802c9fa:	4577      	cmp	r7, lr
 802c9fc:	bf8c      	ite	hi
 802c9fe:	f06f 0709 	mvnhi.w	r7, #9
 802ca02:	2702      	movls	r7, #2
 802ca04:	4467      	add	r7, ip
 802ca06:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 802ca0a:	fb0c 2101 	mla	r1, ip, r1, r2
 802ca0e:	2f01      	cmp	r7, #1
 802ca10:	bf98      	it	ls
 802ca12:	3101      	addls	r1, #1
 802ca14:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 802ca18:	d312      	bcc.n	802ca40 <gmtime_r+0x114>
 802ca1a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 802ca1e:	61e3      	str	r3, [r4, #28]
 802ca20:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 802ca24:	2300      	movs	r3, #0
 802ca26:	60e0      	str	r0, [r4, #12]
 802ca28:	e9c4 7104 	strd	r7, r1, [r4, #16]
 802ca2c:	6223      	str	r3, [r4, #32]
 802ca2e:	4620      	mov	r0, r4
 802ca30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ca34:	2800      	cmp	r0, #0
 802ca36:	61a3      	str	r3, [r4, #24]
 802ca38:	dba8      	blt.n	802c98c <gmtime_r+0x60>
 802ca3a:	fb90 f1f1 	sdiv	r1, r0, r1
 802ca3e:	e7ab      	b.n	802c998 <gmtime_r+0x6c>
 802ca40:	f012 0f03 	tst.w	r2, #3
 802ca44:	d102      	bne.n	802ca4c <gmtime_r+0x120>
 802ca46:	fb06 2515 	mls	r5, r6, r5, r2
 802ca4a:	b95d      	cbnz	r5, 802ca64 <gmtime_r+0x138>
 802ca4c:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 802ca50:	fbb2 f6f5 	udiv	r6, r2, r5
 802ca54:	fb05 2216 	mls	r2, r5, r6, r2
 802ca58:	fab2 f282 	clz	r2, r2
 802ca5c:	0952      	lsrs	r2, r2, #5
 802ca5e:	333b      	adds	r3, #59	@ 0x3b
 802ca60:	4413      	add	r3, r2
 802ca62:	e7dc      	b.n	802ca1e <gmtime_r+0xf2>
 802ca64:	2201      	movs	r2, #1
 802ca66:	e7fa      	b.n	802ca5e <gmtime_r+0x132>
 802ca68:	00015180 	.word	0x00015180
 802ca6c:	00023ab1 	.word	0x00023ab1
 802ca70:	fffdc54f 	.word	0xfffdc54f
 802ca74:	00023ab0 	.word	0x00023ab0

0802ca78 <localtime_r>:
 802ca78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ca7c:	460c      	mov	r4, r1
 802ca7e:	4607      	mov	r7, r0
 802ca80:	f008 fe24 	bl	80356cc <__gettzinfo>
 802ca84:	4621      	mov	r1, r4
 802ca86:	4605      	mov	r5, r0
 802ca88:	4638      	mov	r0, r7
 802ca8a:	f7ff ff4f 	bl	802c92c <gmtime_r>
 802ca8e:	6943      	ldr	r3, [r0, #20]
 802ca90:	0799      	lsls	r1, r3, #30
 802ca92:	4604      	mov	r4, r0
 802ca94:	f203 786c 	addw	r8, r3, #1900	@ 0x76c
 802ca98:	d106      	bne.n	802caa8 <localtime_r+0x30>
 802ca9a:	2264      	movs	r2, #100	@ 0x64
 802ca9c:	fb98 f3f2 	sdiv	r3, r8, r2
 802caa0:	fb02 8313 	mls	r3, r2, r3, r8
 802caa4:	2b00      	cmp	r3, #0
 802caa6:	d171      	bne.n	802cb8c <localtime_r+0x114>
 802caa8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802caac:	fb98 f3f2 	sdiv	r3, r8, r2
 802cab0:	fb02 8313 	mls	r3, r2, r3, r8
 802cab4:	fab3 f383 	clz	r3, r3
 802cab8:	095b      	lsrs	r3, r3, #5
 802caba:	425e      	negs	r6, r3
 802cabc:	4b64      	ldr	r3, [pc, #400]	@ (802cc50 <localtime_r+0x1d8>)
 802cabe:	f006 0630 	and.w	r6, r6, #48	@ 0x30
 802cac2:	441e      	add	r6, r3
 802cac4:	f001 f92e 	bl	802dd24 <__tz_lock>
 802cac8:	f001 f938 	bl	802dd3c <_tzset_unlocked>
 802cacc:	4b61      	ldr	r3, [pc, #388]	@ (802cc54 <localtime_r+0x1dc>)
 802cace:	681b      	ldr	r3, [r3, #0]
 802cad0:	2b00      	cmp	r3, #0
 802cad2:	d06a      	beq.n	802cbaa <localtime_r+0x132>
 802cad4:	686b      	ldr	r3, [r5, #4]
 802cad6:	4543      	cmp	r3, r8
 802cad8:	d15a      	bne.n	802cb90 <localtime_r+0x118>
 802cada:	e9d7 2300 	ldrd	r2, r3, [r7]
 802cade:	682f      	ldr	r7, [r5, #0]
 802cae0:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 802cae4:	2f00      	cmp	r7, #0
 802cae6:	d15b      	bne.n	802cba0 <localtime_r+0x128>
 802cae8:	4282      	cmp	r2, r0
 802caea:	eb73 0101 	sbcs.w	r1, r3, r1
 802caee:	db5e      	blt.n	802cbae <localtime_r+0x136>
 802caf0:	2301      	movs	r3, #1
 802caf2:	6223      	str	r3, [r4, #32]
 802caf4:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802caf6:	6861      	ldr	r1, [r4, #4]
 802caf8:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802cafc:	fb93 f0f2 	sdiv	r0, r3, r2
 802cb00:	fb02 3310 	mls	r3, r2, r0, r3
 802cb04:	223c      	movs	r2, #60	@ 0x3c
 802cb06:	fb93 f5f2 	sdiv	r5, r3, r2
 802cb0a:	fb02 3215 	mls	r2, r2, r5, r3
 802cb0e:	6823      	ldr	r3, [r4, #0]
 802cb10:	1a9b      	subs	r3, r3, r2
 802cb12:	68a2      	ldr	r2, [r4, #8]
 802cb14:	6023      	str	r3, [r4, #0]
 802cb16:	1b49      	subs	r1, r1, r5
 802cb18:	1a12      	subs	r2, r2, r0
 802cb1a:	2b3b      	cmp	r3, #59	@ 0x3b
 802cb1c:	6061      	str	r1, [r4, #4]
 802cb1e:	60a2      	str	r2, [r4, #8]
 802cb20:	dd51      	ble.n	802cbc6 <localtime_r+0x14e>
 802cb22:	3101      	adds	r1, #1
 802cb24:	6061      	str	r1, [r4, #4]
 802cb26:	3b3c      	subs	r3, #60	@ 0x3c
 802cb28:	6023      	str	r3, [r4, #0]
 802cb2a:	6863      	ldr	r3, [r4, #4]
 802cb2c:	2b3b      	cmp	r3, #59	@ 0x3b
 802cb2e:	dd50      	ble.n	802cbd2 <localtime_r+0x15a>
 802cb30:	3201      	adds	r2, #1
 802cb32:	60a2      	str	r2, [r4, #8]
 802cb34:	3b3c      	subs	r3, #60	@ 0x3c
 802cb36:	6063      	str	r3, [r4, #4]
 802cb38:	68a3      	ldr	r3, [r4, #8]
 802cb3a:	2b17      	cmp	r3, #23
 802cb3c:	dd4f      	ble.n	802cbde <localtime_r+0x166>
 802cb3e:	69e2      	ldr	r2, [r4, #28]
 802cb40:	3201      	adds	r2, #1
 802cb42:	61e2      	str	r2, [r4, #28]
 802cb44:	69a2      	ldr	r2, [r4, #24]
 802cb46:	3201      	adds	r2, #1
 802cb48:	2a07      	cmp	r2, #7
 802cb4a:	bfa8      	it	ge
 802cb4c:	2200      	movge	r2, #0
 802cb4e:	61a2      	str	r2, [r4, #24]
 802cb50:	68e2      	ldr	r2, [r4, #12]
 802cb52:	3b18      	subs	r3, #24
 802cb54:	3201      	adds	r2, #1
 802cb56:	60a3      	str	r3, [r4, #8]
 802cb58:	6923      	ldr	r3, [r4, #16]
 802cb5a:	60e2      	str	r2, [r4, #12]
 802cb5c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802cb60:	428a      	cmp	r2, r1
 802cb62:	dd0e      	ble.n	802cb82 <localtime_r+0x10a>
 802cb64:	2b0b      	cmp	r3, #11
 802cb66:	eba2 0201 	sub.w	r2, r2, r1
 802cb6a:	60e2      	str	r2, [r4, #12]
 802cb6c:	f103 0201 	add.w	r2, r3, #1
 802cb70:	bf09      	itett	eq
 802cb72:	6963      	ldreq	r3, [r4, #20]
 802cb74:	6122      	strne	r2, [r4, #16]
 802cb76:	2200      	moveq	r2, #0
 802cb78:	3301      	addeq	r3, #1
 802cb7a:	bf02      	ittt	eq
 802cb7c:	6122      	streq	r2, [r4, #16]
 802cb7e:	6163      	streq	r3, [r4, #20]
 802cb80:	61e2      	streq	r2, [r4, #28]
 802cb82:	f001 f8d5 	bl	802dd30 <__tz_unlock>
 802cb86:	4620      	mov	r0, r4
 802cb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cb8c:	2301      	movs	r3, #1
 802cb8e:	e794      	b.n	802caba <localtime_r+0x42>
 802cb90:	4640      	mov	r0, r8
 802cb92:	f001 f813 	bl	802dbbc <__tzcalc_limits>
 802cb96:	2800      	cmp	r0, #0
 802cb98:	d19f      	bne.n	802cada <localtime_r+0x62>
 802cb9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802cb9e:	e004      	b.n	802cbaa <localtime_r+0x132>
 802cba0:	4282      	cmp	r2, r0
 802cba2:	eb73 0101 	sbcs.w	r1, r3, r1
 802cba6:	da02      	bge.n	802cbae <localtime_r+0x136>
 802cba8:	2300      	movs	r3, #0
 802cbaa:	6223      	str	r3, [r4, #32]
 802cbac:	e009      	b.n	802cbc2 <localtime_r+0x14a>
 802cbae:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 802cbb2:	4282      	cmp	r2, r0
 802cbb4:	418b      	sbcs	r3, r1
 802cbb6:	bfb4      	ite	lt
 802cbb8:	2301      	movlt	r3, #1
 802cbba:	2300      	movge	r3, #0
 802cbbc:	6223      	str	r3, [r4, #32]
 802cbbe:	2b00      	cmp	r3, #0
 802cbc0:	d198      	bne.n	802caf4 <localtime_r+0x7c>
 802cbc2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 802cbc4:	e797      	b.n	802caf6 <localtime_r+0x7e>
 802cbc6:	2b00      	cmp	r3, #0
 802cbc8:	daaf      	bge.n	802cb2a <localtime_r+0xb2>
 802cbca:	3901      	subs	r1, #1
 802cbcc:	6061      	str	r1, [r4, #4]
 802cbce:	333c      	adds	r3, #60	@ 0x3c
 802cbd0:	e7aa      	b.n	802cb28 <localtime_r+0xb0>
 802cbd2:	2b00      	cmp	r3, #0
 802cbd4:	dab0      	bge.n	802cb38 <localtime_r+0xc0>
 802cbd6:	3a01      	subs	r2, #1
 802cbd8:	60a2      	str	r2, [r4, #8]
 802cbda:	333c      	adds	r3, #60	@ 0x3c
 802cbdc:	e7ab      	b.n	802cb36 <localtime_r+0xbe>
 802cbde:	2b00      	cmp	r3, #0
 802cbe0:	dacf      	bge.n	802cb82 <localtime_r+0x10a>
 802cbe2:	69e2      	ldr	r2, [r4, #28]
 802cbe4:	3a01      	subs	r2, #1
 802cbe6:	61e2      	str	r2, [r4, #28]
 802cbe8:	69a2      	ldr	r2, [r4, #24]
 802cbea:	3a01      	subs	r2, #1
 802cbec:	bf48      	it	mi
 802cbee:	2206      	movmi	r2, #6
 802cbf0:	61a2      	str	r2, [r4, #24]
 802cbf2:	68e2      	ldr	r2, [r4, #12]
 802cbf4:	3318      	adds	r3, #24
 802cbf6:	3a01      	subs	r2, #1
 802cbf8:	60e2      	str	r2, [r4, #12]
 802cbfa:	60a3      	str	r3, [r4, #8]
 802cbfc:	2a00      	cmp	r2, #0
 802cbfe:	d1c0      	bne.n	802cb82 <localtime_r+0x10a>
 802cc00:	6923      	ldr	r3, [r4, #16]
 802cc02:	3b01      	subs	r3, #1
 802cc04:	d405      	bmi.n	802cc12 <localtime_r+0x19a>
 802cc06:	6123      	str	r3, [r4, #16]
 802cc08:	6923      	ldr	r3, [r4, #16]
 802cc0a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802cc0e:	60e3      	str	r3, [r4, #12]
 802cc10:	e7b7      	b.n	802cb82 <localtime_r+0x10a>
 802cc12:	230b      	movs	r3, #11
 802cc14:	6123      	str	r3, [r4, #16]
 802cc16:	6963      	ldr	r3, [r4, #20]
 802cc18:	1e5a      	subs	r2, r3, #1
 802cc1a:	6162      	str	r2, [r4, #20]
 802cc1c:	0792      	lsls	r2, r2, #30
 802cc1e:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 802cc22:	d105      	bne.n	802cc30 <localtime_r+0x1b8>
 802cc24:	2164      	movs	r1, #100	@ 0x64
 802cc26:	fb93 f2f1 	sdiv	r2, r3, r1
 802cc2a:	fb01 3212 	mls	r2, r1, r2, r3
 802cc2e:	b962      	cbnz	r2, 802cc4a <localtime_r+0x1d2>
 802cc30:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802cc34:	fb93 f1f2 	sdiv	r1, r3, r2
 802cc38:	fb02 3311 	mls	r3, r2, r1, r3
 802cc3c:	fab3 f383 	clz	r3, r3
 802cc40:	095b      	lsrs	r3, r3, #5
 802cc42:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 802cc46:	61e3      	str	r3, [r4, #28]
 802cc48:	e7de      	b.n	802cc08 <localtime_r+0x190>
 802cc4a:	2301      	movs	r3, #1
 802cc4c:	e7f9      	b.n	802cc42 <localtime_r+0x1ca>
 802cc4e:	bf00      	nop
 802cc50:	0803de98 	.word	0x0803de98
 802cc54:	2001a288 	.word	0x2001a288

0802cc58 <validate_structure>:
 802cc58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802cc5a:	6801      	ldr	r1, [r0, #0]
 802cc5c:	293b      	cmp	r1, #59	@ 0x3b
 802cc5e:	4604      	mov	r4, r0
 802cc60:	d911      	bls.n	802cc86 <validate_structure+0x2e>
 802cc62:	223c      	movs	r2, #60	@ 0x3c
 802cc64:	4668      	mov	r0, sp
 802cc66:	f001 fb70 	bl	802e34a <div>
 802cc6a:	9a01      	ldr	r2, [sp, #4]
 802cc6c:	6863      	ldr	r3, [r4, #4]
 802cc6e:	9900      	ldr	r1, [sp, #0]
 802cc70:	2a00      	cmp	r2, #0
 802cc72:	440b      	add	r3, r1
 802cc74:	6063      	str	r3, [r4, #4]
 802cc76:	bfbb      	ittet	lt
 802cc78:	323c      	addlt	r2, #60	@ 0x3c
 802cc7a:	f103 33ff 	addlt.w	r3, r3, #4294967295	@ 0xffffffff
 802cc7e:	6022      	strge	r2, [r4, #0]
 802cc80:	6022      	strlt	r2, [r4, #0]
 802cc82:	bfb8      	it	lt
 802cc84:	6063      	strlt	r3, [r4, #4]
 802cc86:	6861      	ldr	r1, [r4, #4]
 802cc88:	293b      	cmp	r1, #59	@ 0x3b
 802cc8a:	d911      	bls.n	802ccb0 <validate_structure+0x58>
 802cc8c:	223c      	movs	r2, #60	@ 0x3c
 802cc8e:	4668      	mov	r0, sp
 802cc90:	f001 fb5b 	bl	802e34a <div>
 802cc94:	9a01      	ldr	r2, [sp, #4]
 802cc96:	68a3      	ldr	r3, [r4, #8]
 802cc98:	9900      	ldr	r1, [sp, #0]
 802cc9a:	2a00      	cmp	r2, #0
 802cc9c:	440b      	add	r3, r1
 802cc9e:	60a3      	str	r3, [r4, #8]
 802cca0:	bfbb      	ittet	lt
 802cca2:	323c      	addlt	r2, #60	@ 0x3c
 802cca4:	f103 33ff 	addlt.w	r3, r3, #4294967295	@ 0xffffffff
 802cca8:	6062      	strge	r2, [r4, #4]
 802ccaa:	6062      	strlt	r2, [r4, #4]
 802ccac:	bfb8      	it	lt
 802ccae:	60a3      	strlt	r3, [r4, #8]
 802ccb0:	68a1      	ldr	r1, [r4, #8]
 802ccb2:	2917      	cmp	r1, #23
 802ccb4:	d911      	bls.n	802ccda <validate_structure+0x82>
 802ccb6:	2218      	movs	r2, #24
 802ccb8:	4668      	mov	r0, sp
 802ccba:	f001 fb46 	bl	802e34a <div>
 802ccbe:	9a01      	ldr	r2, [sp, #4]
 802ccc0:	68e3      	ldr	r3, [r4, #12]
 802ccc2:	9900      	ldr	r1, [sp, #0]
 802ccc4:	2a00      	cmp	r2, #0
 802ccc6:	440b      	add	r3, r1
 802ccc8:	60e3      	str	r3, [r4, #12]
 802ccca:	bfbb      	ittet	lt
 802cccc:	3218      	addlt	r2, #24
 802ccce:	f103 33ff 	addlt.w	r3, r3, #4294967295	@ 0xffffffff
 802ccd2:	60a2      	strge	r2, [r4, #8]
 802ccd4:	60a2      	strlt	r2, [r4, #8]
 802ccd6:	bfb8      	it	lt
 802ccd8:	60e3      	strlt	r3, [r4, #12]
 802ccda:	6921      	ldr	r1, [r4, #16]
 802ccdc:	290b      	cmp	r1, #11
 802ccde:	d911      	bls.n	802cd04 <validate_structure+0xac>
 802cce0:	220c      	movs	r2, #12
 802cce2:	4668      	mov	r0, sp
 802cce4:	f001 fb31 	bl	802e34a <div>
 802cce8:	9a01      	ldr	r2, [sp, #4]
 802ccea:	6963      	ldr	r3, [r4, #20]
 802ccec:	9900      	ldr	r1, [sp, #0]
 802ccee:	2a00      	cmp	r2, #0
 802ccf0:	440b      	add	r3, r1
 802ccf2:	6163      	str	r3, [r4, #20]
 802ccf4:	bfbb      	ittet	lt
 802ccf6:	320c      	addlt	r2, #12
 802ccf8:	f103 33ff 	addlt.w	r3, r3, #4294967295	@ 0xffffffff
 802ccfc:	6122      	strge	r2, [r4, #16]
 802ccfe:	6122      	strlt	r2, [r4, #16]
 802cd00:	bfb8      	it	lt
 802cd02:	6163      	strlt	r3, [r4, #20]
 802cd04:	6963      	ldr	r3, [r4, #20]
 802cd06:	079a      	lsls	r2, r3, #30
 802cd08:	d11c      	bne.n	802cd44 <validate_structure+0xec>
 802cd0a:	2164      	movs	r1, #100	@ 0x64
 802cd0c:	fb93 f2f1 	sdiv	r2, r3, r1
 802cd10:	fb01 3212 	mls	r2, r1, r2, r3
 802cd14:	b9c2      	cbnz	r2, 802cd48 <validate_structure+0xf0>
 802cd16:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 802cd1a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802cd1e:	fb93 f1f2 	sdiv	r1, r3, r2
 802cd22:	fb02 3311 	mls	r3, r2, r1, r3
 802cd26:	2b00      	cmp	r3, #0
 802cd28:	bf0c      	ite	eq
 802cd2a:	231d      	moveq	r3, #29
 802cd2c:	231c      	movne	r3, #28
 802cd2e:	68e2      	ldr	r2, [r4, #12]
 802cd30:	2a00      	cmp	r2, #0
 802cd32:	dc0b      	bgt.n	802cd4c <validate_structure+0xf4>
 802cd34:	4d31      	ldr	r5, [pc, #196]	@ (802cdfc <validate_structure+0x1a4>)
 802cd36:	200b      	movs	r0, #11
 802cd38:	2164      	movs	r1, #100	@ 0x64
 802cd3a:	68e6      	ldr	r6, [r4, #12]
 802cd3c:	2e00      	cmp	r6, #0
 802cd3e:	dd30      	ble.n	802cda2 <validate_structure+0x14a>
 802cd40:	b003      	add	sp, #12
 802cd42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802cd44:	231c      	movs	r3, #28
 802cd46:	e7f2      	b.n	802cd2e <validate_structure+0xd6>
 802cd48:	231d      	movs	r3, #29
 802cd4a:	e7f0      	b.n	802cd2e <validate_structure+0xd6>
 802cd4c:	4d2b      	ldr	r5, [pc, #172]	@ (802cdfc <validate_structure+0x1a4>)
 802cd4e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 802cd52:	2a01      	cmp	r2, #1
 802cd54:	bf14      	ite	ne
 802cd56:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 802cd5a:	4618      	moveq	r0, r3
 802cd5c:	4281      	cmp	r1, r0
 802cd5e:	ddef      	ble.n	802cd40 <validate_structure+0xe8>
 802cd60:	3201      	adds	r2, #1
 802cd62:	1a09      	subs	r1, r1, r0
 802cd64:	2a0c      	cmp	r2, #12
 802cd66:	60e1      	str	r1, [r4, #12]
 802cd68:	6122      	str	r2, [r4, #16]
 802cd6a:	d1f0      	bne.n	802cd4e <validate_structure+0xf6>
 802cd6c:	6963      	ldr	r3, [r4, #20]
 802cd6e:	2100      	movs	r1, #0
 802cd70:	1c5a      	adds	r2, r3, #1
 802cd72:	6121      	str	r1, [r4, #16]
 802cd74:	0791      	lsls	r1, r2, #30
 802cd76:	6162      	str	r2, [r4, #20]
 802cd78:	d13c      	bne.n	802cdf4 <validate_structure+0x19c>
 802cd7a:	2164      	movs	r1, #100	@ 0x64
 802cd7c:	fb92 f0f1 	sdiv	r0, r2, r1
 802cd80:	fb01 2210 	mls	r2, r1, r0, r2
 802cd84:	2a00      	cmp	r2, #0
 802cd86:	d137      	bne.n	802cdf8 <validate_structure+0x1a0>
 802cd88:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 802cd8c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802cd90:	fb93 f1f2 	sdiv	r1, r3, r2
 802cd94:	fb02 3311 	mls	r3, r2, r1, r3
 802cd98:	2b00      	cmp	r3, #0
 802cd9a:	bf0c      	ite	eq
 802cd9c:	231d      	moveq	r3, #29
 802cd9e:	231c      	movne	r3, #28
 802cda0:	e7d5      	b.n	802cd4e <validate_structure+0xf6>
 802cda2:	6922      	ldr	r2, [r4, #16]
 802cda4:	3a01      	subs	r2, #1
 802cda6:	6122      	str	r2, [r4, #16]
 802cda8:	3201      	adds	r2, #1
 802cdaa:	d116      	bne.n	802cdda <validate_structure+0x182>
 802cdac:	6963      	ldr	r3, [r4, #20]
 802cdae:	1e5a      	subs	r2, r3, #1
 802cdb0:	0797      	lsls	r7, r2, #30
 802cdb2:	e9c4 0204 	strd	r0, r2, [r4, #16]
 802cdb6:	d119      	bne.n	802cdec <validate_structure+0x194>
 802cdb8:	fb92 f7f1 	sdiv	r7, r2, r1
 802cdbc:	fb01 2217 	mls	r2, r1, r7, r2
 802cdc0:	b9b2      	cbnz	r2, 802cdf0 <validate_structure+0x198>
 802cdc2:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 802cdc6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802cdca:	fb93 f7f2 	sdiv	r7, r3, r2
 802cdce:	fb02 3317 	mls	r3, r2, r7, r3
 802cdd2:	2b00      	cmp	r3, #0
 802cdd4:	bf0c      	ite	eq
 802cdd6:	231d      	moveq	r3, #29
 802cdd8:	231c      	movne	r3, #28
 802cdda:	6922      	ldr	r2, [r4, #16]
 802cddc:	2a01      	cmp	r2, #1
 802cdde:	bf14      	ite	ne
 802cde0:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 802cde4:	461a      	moveq	r2, r3
 802cde6:	4432      	add	r2, r6
 802cde8:	60e2      	str	r2, [r4, #12]
 802cdea:	e7a6      	b.n	802cd3a <validate_structure+0xe2>
 802cdec:	231c      	movs	r3, #28
 802cdee:	e7f4      	b.n	802cdda <validate_structure+0x182>
 802cdf0:	231d      	movs	r3, #29
 802cdf2:	e7f2      	b.n	802cdda <validate_structure+0x182>
 802cdf4:	231c      	movs	r3, #28
 802cdf6:	e7aa      	b.n	802cd4e <validate_structure+0xf6>
 802cdf8:	231d      	movs	r3, #29
 802cdfa:	e7a8      	b.n	802cd4e <validate_structure+0xf6>
 802cdfc:	0803de68 	.word	0x0803de68

0802ce00 <mktime>:
 802ce00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ce04:	b085      	sub	sp, #20
 802ce06:	4607      	mov	r7, r0
 802ce08:	f008 fc60 	bl	80356cc <__gettzinfo>
 802ce0c:	4681      	mov	r9, r0
 802ce0e:	4638      	mov	r0, r7
 802ce10:	f7ff ff22 	bl	802cc58 <validate_structure>
 802ce14:	e9d7 4300 	ldrd	r4, r3, [r7]
 802ce18:	223c      	movs	r2, #60	@ 0x3c
 802ce1a:	fb02 4403 	mla	r4, r2, r3, r4
 802ce1e:	68bb      	ldr	r3, [r7, #8]
 802ce20:	697d      	ldr	r5, [r7, #20]
 802ce22:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802ce26:	fb02 4403 	mla	r4, r2, r3, r4
 802ce2a:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 802ce2e:	4ac3      	ldr	r2, [pc, #780]	@ (802d13c <mktime+0x33c>)
 802ce30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802ce34:	3e01      	subs	r6, #1
 802ce36:	2b01      	cmp	r3, #1
 802ce38:	4416      	add	r6, r2
 802ce3a:	dd11      	ble.n	802ce60 <mktime+0x60>
 802ce3c:	07a9      	lsls	r1, r5, #30
 802ce3e:	d10f      	bne.n	802ce60 <mktime+0x60>
 802ce40:	2264      	movs	r2, #100	@ 0x64
 802ce42:	fb95 f3f2 	sdiv	r3, r5, r2
 802ce46:	fb02 5313 	mls	r3, r2, r3, r5
 802ce4a:	b943      	cbnz	r3, 802ce5e <mktime+0x5e>
 802ce4c:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 802ce50:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802ce54:	fb93 f1f2 	sdiv	r1, r3, r2
 802ce58:	fb02 3311 	mls	r3, r2, r1, r3
 802ce5c:	b903      	cbnz	r3, 802ce60 <mktime+0x60>
 802ce5e:	3601      	adds	r6, #1
 802ce60:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 802ce64:	3310      	adds	r3, #16
 802ce66:	f644 6220 	movw	r2, #20000	@ 0x4e20
 802ce6a:	4293      	cmp	r3, r2
 802ce6c:	61fe      	str	r6, [r7, #28]
 802ce6e:	f200 8170 	bhi.w	802d152 <mktime+0x352>
 802ce72:	2d46      	cmp	r5, #70	@ 0x46
 802ce74:	f340 80b6 	ble.w	802cfe4 <mktime+0x1e4>
 802ce78:	2346      	movs	r3, #70	@ 0x46
 802ce7a:	f240 1c6d 	movw	ip, #365	@ 0x16d
 802ce7e:	2164      	movs	r1, #100	@ 0x64
 802ce80:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 802ce84:	079a      	lsls	r2, r3, #30
 802ce86:	f040 80a7 	bne.w	802cfd8 <mktime+0x1d8>
 802ce8a:	fb93 f2f1 	sdiv	r2, r3, r1
 802ce8e:	fb01 3212 	mls	r2, r1, r2, r3
 802ce92:	2a00      	cmp	r2, #0
 802ce94:	f040 80a3 	bne.w	802cfde <mktime+0x1de>
 802ce98:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 802ce9c:	fb92 fef0 	sdiv	lr, r2, r0
 802cea0:	fb00 221e 	mls	r2, r0, lr, r2
 802cea4:	2a00      	cmp	r2, #0
 802cea6:	bf0c      	ite	eq
 802cea8:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 802ceac:	4662      	movne	r2, ip
 802ceae:	3301      	adds	r3, #1
 802ceb0:	429d      	cmp	r5, r3
 802ceb2:	4416      	add	r6, r2
 802ceb4:	d1e6      	bne.n	802ce84 <mktime+0x84>
 802ceb6:	4ba2      	ldr	r3, [pc, #648]	@ (802d140 <mktime+0x340>)
 802ceb8:	ea4f 78e4 	mov.w	r8, r4, asr #31
 802cebc:	fbc6 4803 	smlal	r4, r8, r6, r3
 802cec0:	f000 ff30 	bl	802dd24 <__tz_lock>
 802cec4:	f000 ff3a 	bl	802dd3c <_tzset_unlocked>
 802cec8:	4b9e      	ldr	r3, [pc, #632]	@ (802d144 <mktime+0x344>)
 802ceca:	681b      	ldr	r3, [r3, #0]
 802cecc:	2b00      	cmp	r3, #0
 802cece:	f000 8147 	beq.w	802d160 <mktime+0x360>
 802ced2:	f8d7 a020 	ldr.w	sl, [r7, #32]
 802ced6:	6978      	ldr	r0, [r7, #20]
 802ced8:	4653      	mov	r3, sl
 802ceda:	2b01      	cmp	r3, #1
 802cedc:	bfa8      	it	ge
 802cede:	2301      	movge	r3, #1
 802cee0:	9301      	str	r3, [sp, #4]
 802cee2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 802cee6:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802ceea:	4283      	cmp	r3, r0
 802ceec:	f040 80bd 	bne.w	802d06a <mktime+0x26a>
 802cef0:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 802cef4:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 802cef8:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 802cefc:	1a13      	subs	r3, r2, r0
 802cefe:	9303      	str	r3, [sp, #12]
 802cf00:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 802cf04:	9302      	str	r3, [sp, #8]
 802cf06:	9a02      	ldr	r2, [sp, #8]
 802cf08:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 802cf0c:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 802cf10:	ebb2 0e03 	subs.w	lr, r2, r3
 802cf14:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 802cf18:	4574      	cmp	r4, lr
 802cf1a:	eb78 0201 	sbcs.w	r2, r8, r1
 802cf1e:	f280 80c7 	bge.w	802d0b0 <mktime+0x2b0>
 802cf22:	f8d9 2000 	ldr.w	r2, [r9]
 802cf26:	2a00      	cmp	r2, #0
 802cf28:	f000 80d0 	beq.w	802d0cc <mktime+0x2cc>
 802cf2c:	9a03      	ldr	r2, [sp, #12]
 802cf2e:	4294      	cmp	r4, r2
 802cf30:	eb78 020b 	sbcs.w	r2, r8, fp
 802cf34:	f2c0 8111 	blt.w	802d15a <mktime+0x35a>
 802cf38:	4574      	cmp	r4, lr
 802cf3a:	eb78 0101 	sbcs.w	r1, r8, r1
 802cf3e:	bfb4      	ite	lt
 802cf40:	f04f 0b01 	movlt.w	fp, #1
 802cf44:	f04f 0b00 	movge.w	fp, #0
 802cf48:	f1ba 0f00 	cmp.w	sl, #0
 802cf4c:	f2c0 8094 	blt.w	802d078 <mktime+0x278>
 802cf50:	9a01      	ldr	r2, [sp, #4]
 802cf52:	ea82 0a0b 	eor.w	sl, r2, fp
 802cf56:	f1ba 0f01 	cmp.w	sl, #1
 802cf5a:	f040 808d 	bne.w	802d078 <mktime+0x278>
 802cf5e:	f1bb 0f00 	cmp.w	fp, #0
 802cf62:	f000 80c2 	beq.w	802d0ea <mktime+0x2ea>
 802cf66:	1a1b      	subs	r3, r3, r0
 802cf68:	683a      	ldr	r2, [r7, #0]
 802cf6a:	441a      	add	r2, r3
 802cf6c:	191c      	adds	r4, r3, r4
 802cf6e:	603a      	str	r2, [r7, #0]
 802cf70:	4638      	mov	r0, r7
 802cf72:	68fa      	ldr	r2, [r7, #12]
 802cf74:	9201      	str	r2, [sp, #4]
 802cf76:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 802cf7a:	f7ff fe6d 	bl	802cc58 <validate_structure>
 802cf7e:	68fb      	ldr	r3, [r7, #12]
 802cf80:	9a01      	ldr	r2, [sp, #4]
 802cf82:	1a9b      	subs	r3, r3, r2
 802cf84:	d078      	beq.n	802d078 <mktime+0x278>
 802cf86:	2b01      	cmp	r3, #1
 802cf88:	f300 80b1 	bgt.w	802d0ee <mktime+0x2ee>
 802cf8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802cf90:	bfa8      	it	ge
 802cf92:	469a      	movge	sl, r3
 802cf94:	69fb      	ldr	r3, [r7, #28]
 802cf96:	eb1a 0303 	adds.w	r3, sl, r3
 802cf9a:	4456      	add	r6, sl
 802cf9c:	f140 80b0 	bpl.w	802d100 <mktime+0x300>
 802cfa0:	1e6b      	subs	r3, r5, #1
 802cfa2:	0799      	lsls	r1, r3, #30
 802cfa4:	f040 80a6 	bne.w	802d0f4 <mktime+0x2f4>
 802cfa8:	2264      	movs	r2, #100	@ 0x64
 802cfaa:	fb93 f1f2 	sdiv	r1, r3, r2
 802cfae:	fb02 3311 	mls	r3, r2, r1, r3
 802cfb2:	2b00      	cmp	r3, #0
 802cfb4:	f040 80a1 	bne.w	802d0fa <mktime+0x2fa>
 802cfb8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 802cfbc:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 802cfc0:	fb95 f2f3 	sdiv	r2, r5, r3
 802cfc4:	fb03 5512 	mls	r5, r3, r2, r5
 802cfc8:	2d00      	cmp	r5, #0
 802cfca:	f240 136d 	movw	r3, #365	@ 0x16d
 802cfce:	bf18      	it	ne
 802cfd0:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 802cfd4:	61fb      	str	r3, [r7, #28]
 802cfd6:	e04f      	b.n	802d078 <mktime+0x278>
 802cfd8:	f240 126d 	movw	r2, #365	@ 0x16d
 802cfdc:	e767      	b.n	802ceae <mktime+0xae>
 802cfde:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 802cfe2:	e764      	b.n	802ceae <mktime+0xae>
 802cfe4:	f43f af67 	beq.w	802ceb6 <mktime+0xb6>
 802cfe8:	2345      	movs	r3, #69	@ 0x45
 802cfea:	f240 1c6d 	movw	ip, #365	@ 0x16d
 802cfee:	2164      	movs	r1, #100	@ 0x64
 802cff0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 802cff4:	e012      	b.n	802d01c <mktime+0x21c>
 802cff6:	bb62      	cbnz	r2, 802d052 <mktime+0x252>
 802cff8:	fb93 f2f1 	sdiv	r2, r3, r1
 802cffc:	fb01 3212 	mls	r2, r1, r2, r3
 802d000:	bb52      	cbnz	r2, 802d058 <mktime+0x258>
 802d002:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 802d006:	fb92 fef0 	sdiv	lr, r2, r0
 802d00a:	fb00 221e 	mls	r2, r0, lr, r2
 802d00e:	2a00      	cmp	r2, #0
 802d010:	bf0c      	ite	eq
 802d012:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 802d016:	4662      	movne	r2, ip
 802d018:	1ab6      	subs	r6, r6, r2
 802d01a:	3b01      	subs	r3, #1
 802d01c:	429d      	cmp	r5, r3
 802d01e:	f003 0203 	and.w	r2, r3, #3
 802d022:	dbe8      	blt.n	802cff6 <mktime+0x1f6>
 802d024:	b9da      	cbnz	r2, 802d05e <mktime+0x25e>
 802d026:	2264      	movs	r2, #100	@ 0x64
 802d028:	fb95 f3f2 	sdiv	r3, r5, r2
 802d02c:	fb02 5313 	mls	r3, r2, r3, r5
 802d030:	b9c3      	cbnz	r3, 802d064 <mktime+0x264>
 802d032:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 802d036:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802d03a:	fb93 f1f2 	sdiv	r1, r3, r2
 802d03e:	fb02 3311 	mls	r3, r2, r1, r3
 802d042:	2b00      	cmp	r3, #0
 802d044:	f240 136d 	movw	r3, #365	@ 0x16d
 802d048:	bf08      	it	eq
 802d04a:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 802d04e:	1af6      	subs	r6, r6, r3
 802d050:	e731      	b.n	802ceb6 <mktime+0xb6>
 802d052:	f240 126d 	movw	r2, #365	@ 0x16d
 802d056:	e7df      	b.n	802d018 <mktime+0x218>
 802d058:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 802d05c:	e7dc      	b.n	802d018 <mktime+0x218>
 802d05e:	f240 136d 	movw	r3, #365	@ 0x16d
 802d062:	e7f4      	b.n	802d04e <mktime+0x24e>
 802d064:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 802d068:	e7f1      	b.n	802d04e <mktime+0x24e>
 802d06a:	f000 fda7 	bl	802dbbc <__tzcalc_limits>
 802d06e:	2800      	cmp	r0, #0
 802d070:	f47f af3e 	bne.w	802cef0 <mktime+0xf0>
 802d074:	f8dd b004 	ldr.w	fp, [sp, #4]
 802d078:	f1bb 0f01 	cmp.w	fp, #1
 802d07c:	d172      	bne.n	802d164 <mktime+0x364>
 802d07e:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 802d082:	191c      	adds	r4, r3, r4
 802d084:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 802d088:	f04f 0b01 	mov.w	fp, #1
 802d08c:	f000 fe50 	bl	802dd30 <__tz_unlock>
 802d090:	3604      	adds	r6, #4
 802d092:	2307      	movs	r3, #7
 802d094:	fb96 f3f3 	sdiv	r3, r6, r3
 802d098:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802d09c:	1af6      	subs	r6, r6, r3
 802d09e:	d456      	bmi.n	802d14e <mktime+0x34e>
 802d0a0:	f8c7 b020 	str.w	fp, [r7, #32]
 802d0a4:	61be      	str	r6, [r7, #24]
 802d0a6:	4620      	mov	r0, r4
 802d0a8:	4641      	mov	r1, r8
 802d0aa:	b005      	add	sp, #20
 802d0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d0b0:	9a02      	ldr	r2, [sp, #8]
 802d0b2:	1a12      	subs	r2, r2, r0
 802d0b4:	9202      	str	r2, [sp, #8]
 802d0b6:	ea4f 72e0 	mov.w	r2, r0, asr #31
 802d0ba:	eb6c 0c02 	sbc.w	ip, ip, r2
 802d0be:	9a02      	ldr	r2, [sp, #8]
 802d0c0:	4294      	cmp	r4, r2
 802d0c2:	eb78 0c0c 	sbcs.w	ip, r8, ip
 802d0c6:	f6bf af2c 	bge.w	802cf22 <mktime+0x122>
 802d0ca:	e7d3      	b.n	802d074 <mktime+0x274>
 802d0cc:	9a03      	ldr	r2, [sp, #12]
 802d0ce:	4294      	cmp	r4, r2
 802d0d0:	eb78 020b 	sbcs.w	r2, r8, fp
 802d0d4:	f6ff af30 	blt.w	802cf38 <mktime+0x138>
 802d0d8:	f1ba 0f00 	cmp.w	sl, #0
 802d0dc:	dbcf      	blt.n	802d07e <mktime+0x27e>
 802d0de:	f04f 0b01 	mov.w	fp, #1
 802d0e2:	e735      	b.n	802cf50 <mktime+0x150>
 802d0e4:	f04f 0b00 	mov.w	fp, #0
 802d0e8:	e732      	b.n	802cf50 <mktime+0x150>
 802d0ea:	1ac3      	subs	r3, r0, r3
 802d0ec:	e73c      	b.n	802cf68 <mktime+0x168>
 802d0ee:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802d0f2:	e74f      	b.n	802cf94 <mktime+0x194>
 802d0f4:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 802d0f8:	e76c      	b.n	802cfd4 <mktime+0x1d4>
 802d0fa:	f240 136d 	movw	r3, #365	@ 0x16d
 802d0fe:	e769      	b.n	802cfd4 <mktime+0x1d4>
 802d100:	07aa      	lsls	r2, r5, #30
 802d102:	d117      	bne.n	802d134 <mktime+0x334>
 802d104:	2164      	movs	r1, #100	@ 0x64
 802d106:	fb95 f2f1 	sdiv	r2, r5, r1
 802d10a:	fb01 5212 	mls	r2, r1, r2, r5
 802d10e:	b9da      	cbnz	r2, 802d148 <mktime+0x348>
 802d110:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802d114:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 802d118:	fb95 f1f2 	sdiv	r1, r5, r2
 802d11c:	fb02 5511 	mls	r5, r2, r1, r5
 802d120:	2d00      	cmp	r5, #0
 802d122:	f240 126d 	movw	r2, #365	@ 0x16d
 802d126:	bf08      	it	eq
 802d128:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 802d12c:	4293      	cmp	r3, r2
 802d12e:	bfa8      	it	ge
 802d130:	1a9b      	subge	r3, r3, r2
 802d132:	e74f      	b.n	802cfd4 <mktime+0x1d4>
 802d134:	f240 126d 	movw	r2, #365	@ 0x16d
 802d138:	e7f8      	b.n	802d12c <mktime+0x32c>
 802d13a:	bf00      	nop
 802d13c:	0803de38 	.word	0x0803de38
 802d140:	00015180 	.word	0x00015180
 802d144:	2001a288 	.word	0x2001a288
 802d148:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 802d14c:	e7ee      	b.n	802d12c <mktime+0x32c>
 802d14e:	3607      	adds	r6, #7
 802d150:	e7a6      	b.n	802d0a0 <mktime+0x2a0>
 802d152:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 802d156:	46a0      	mov	r8, r4
 802d158:	e7a5      	b.n	802d0a6 <mktime+0x2a6>
 802d15a:	f1ba 0f00 	cmp.w	sl, #0
 802d15e:	dac1      	bge.n	802d0e4 <mktime+0x2e4>
 802d160:	f04f 0b00 	mov.w	fp, #0
 802d164:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 802d168:	191c      	adds	r4, r3, r4
 802d16a:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 802d16e:	e78d      	b.n	802d08c <mktime+0x28c>

0802d170 <iso_year_adjust>:
 802d170:	6942      	ldr	r2, [r0, #20]
 802d172:	2a00      	cmp	r2, #0
 802d174:	f240 736c 	movw	r3, #1900	@ 0x76c
 802d178:	bfa8      	it	ge
 802d17a:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 802d17e:	4413      	add	r3, r2
 802d180:	0792      	lsls	r2, r2, #30
 802d182:	d105      	bne.n	802d190 <iso_year_adjust+0x20>
 802d184:	2164      	movs	r1, #100	@ 0x64
 802d186:	fb93 f2f1 	sdiv	r2, r3, r1
 802d18a:	fb01 3212 	mls	r2, r1, r2, r3
 802d18e:	b9ca      	cbnz	r2, 802d1c4 <iso_year_adjust+0x54>
 802d190:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802d194:	fb93 f1f2 	sdiv	r1, r3, r2
 802d198:	fb02 3311 	mls	r3, r2, r1, r3
 802d19c:	fab3 f383 	clz	r3, r3
 802d1a0:	095b      	lsrs	r3, r3, #5
 802d1a2:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 802d1a6:	0040      	lsls	r0, r0, #1
 802d1a8:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 802d1ac:	4418      	add	r0, r3
 802d1ae:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 802d1b2:	4298      	cmp	r0, r3
 802d1b4:	d027      	beq.n	802d206 <iso_year_adjust+0x96>
 802d1b6:	dc11      	bgt.n	802d1dc <iso_year_adjust+0x6c>
 802d1b8:	2801      	cmp	r0, #1
 802d1ba:	dc0a      	bgt.n	802d1d2 <iso_year_adjust+0x62>
 802d1bc:	43c0      	mvns	r0, r0
 802d1be:	0fc0      	lsrs	r0, r0, #31
 802d1c0:	4240      	negs	r0, r0
 802d1c2:	4770      	bx	lr
 802d1c4:	2301      	movs	r3, #1
 802d1c6:	e7ec      	b.n	802d1a2 <iso_year_adjust+0x32>
 802d1c8:	4b10      	ldr	r3, [pc, #64]	@ (802d20c <iso_year_adjust+0x9c>)
 802d1ca:	40c3      	lsrs	r3, r0
 802d1cc:	f343 0000 	sbfx	r0, r3, #0, #1
 802d1d0:	4770      	bx	lr
 802d1d2:	380a      	subs	r0, #10
 802d1d4:	2817      	cmp	r0, #23
 802d1d6:	d9f7      	bls.n	802d1c8 <iso_year_adjust+0x58>
 802d1d8:	2000      	movs	r0, #0
 802d1da:	4770      	bx	lr
 802d1dc:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 802d1e0:	4298      	cmp	r0, r3
 802d1e2:	dc06      	bgt.n	802d1f2 <iso_year_adjust+0x82>
 802d1e4:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 802d1e8:	4298      	cmp	r0, r3
 802d1ea:	bfd4      	ite	le
 802d1ec:	2000      	movle	r0, #0
 802d1ee:	2001      	movgt	r0, #1
 802d1f0:	4770      	bx	lr
 802d1f2:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 802d1f6:	3802      	subs	r0, #2
 802d1f8:	2815      	cmp	r0, #21
 802d1fa:	d8ed      	bhi.n	802d1d8 <iso_year_adjust+0x68>
 802d1fc:	4b04      	ldr	r3, [pc, #16]	@ (802d210 <iso_year_adjust+0xa0>)
 802d1fe:	40c3      	lsrs	r3, r0
 802d200:	f003 0001 	and.w	r0, r3, #1
 802d204:	4770      	bx	lr
 802d206:	2001      	movs	r0, #1
 802d208:	4770      	bx	lr
 802d20a:	bf00      	nop
 802d20c:	00cc00cf 	.word	0x00cc00cf
 802d210:	002a001f 	.word	0x002a001f

0802d214 <__strftime.isra.0>:
 802d214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d218:	b08f      	sub	sp, #60	@ 0x3c
 802d21a:	461e      	mov	r6, r3
 802d21c:	2300      	movs	r3, #0
 802d21e:	4607      	mov	r7, r0
 802d220:	460d      	mov	r5, r1
 802d222:	9302      	str	r3, [sp, #8]
 802d224:	461c      	mov	r4, r3
 802d226:	7813      	ldrb	r3, [r2, #0]
 802d228:	2b00      	cmp	r3, #0
 802d22a:	f000 84ad 	beq.w	802db88 <__strftime.isra.0+0x974>
 802d22e:	2b25      	cmp	r3, #37	@ 0x25
 802d230:	d11f      	bne.n	802d272 <__strftime.isra.0+0x5e>
 802d232:	f892 9001 	ldrb.w	r9, [r2, #1]
 802d236:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 802d23a:	d024      	beq.n	802d286 <__strftime.isra.0+0x72>
 802d23c:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802d240:	d021      	beq.n	802d286 <__strftime.isra.0+0x72>
 802d242:	f102 0801 	add.w	r8, r2, #1
 802d246:	f04f 0900 	mov.w	r9, #0
 802d24a:	f898 2000 	ldrb.w	r2, [r8]
 802d24e:	3a31      	subs	r2, #49	@ 0x31
 802d250:	2a08      	cmp	r2, #8
 802d252:	d81b      	bhi.n	802d28c <__strftime.isra.0+0x78>
 802d254:	220a      	movs	r2, #10
 802d256:	4640      	mov	r0, r8
 802d258:	a906      	add	r1, sp, #24
 802d25a:	f008 f8bf 	bl	80353dc <strtoul>
 802d25e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802d262:	4602      	mov	r2, r0
 802d264:	f898 1000 	ldrb.w	r1, [r8]
 802d268:	2945      	cmp	r1, #69	@ 0x45
 802d26a:	d111      	bne.n	802d290 <__strftime.isra.0+0x7c>
 802d26c:	f108 0801 	add.w	r8, r8, #1
 802d270:	e010      	b.n	802d294 <__strftime.isra.0+0x80>
 802d272:	1e69      	subs	r1, r5, #1
 802d274:	42a1      	cmp	r1, r4
 802d276:	f240 815d 	bls.w	802d534 <__strftime.isra.0+0x320>
 802d27a:	553b      	strb	r3, [r7, r4]
 802d27c:	3201      	adds	r2, #1
 802d27e:	f104 0a01 	add.w	sl, r4, #1
 802d282:	4654      	mov	r4, sl
 802d284:	e7cf      	b.n	802d226 <__strftime.isra.0+0x12>
 802d286:	f102 0802 	add.w	r8, r2, #2
 802d28a:	e7de      	b.n	802d24a <__strftime.isra.0+0x36>
 802d28c:	2200      	movs	r2, #0
 802d28e:	e7e9      	b.n	802d264 <__strftime.isra.0+0x50>
 802d290:	294f      	cmp	r1, #79	@ 0x4f
 802d292:	d0eb      	beq.n	802d26c <__strftime.isra.0+0x58>
 802d294:	f898 0000 	ldrb.w	r0, [r8]
 802d298:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 802d29c:	2955      	cmp	r1, #85	@ 0x55
 802d29e:	f200 8149 	bhi.w	802d534 <__strftime.isra.0+0x320>
 802d2a2:	e8df f011 	tbh	[pc, r1, lsl #1]
 802d2a6:	0469      	.short	0x0469
 802d2a8:	01470147 	.word	0x01470147
 802d2ac:	01470147 	.word	0x01470147
 802d2b0:	01470147 	.word	0x01470147
 802d2b4:	01470147 	.word	0x01470147
 802d2b8:	01470147 	.word	0x01470147
 802d2bc:	01470147 	.word	0x01470147
 802d2c0:	01470147 	.word	0x01470147
 802d2c4:	01470147 	.word	0x01470147
 802d2c8:	01470147 	.word	0x01470147
 802d2cc:	01470147 	.word	0x01470147
 802d2d0:	01470147 	.word	0x01470147
 802d2d4:	01470147 	.word	0x01470147
 802d2d8:	01470147 	.word	0x01470147
 802d2dc:	00750147 	.word	0x00750147
 802d2e0:	00dc00a3 	.word	0x00dc00a3
 802d2e4:	01470128 	.word	0x01470128
 802d2e8:	01cb0159 	.word	0x01cb0159
 802d2ec:	024c0245 	.word	0x024c0245
 802d2f0:	01470147 	.word	0x01470147
 802d2f4:	02640147 	.word	0x02640147
 802d2f8:	01470147 	.word	0x01470147
 802d2fc:	0147026f 	.word	0x0147026f
 802d300:	0327029f 	.word	0x0327029f
 802d304:	035b0331 	.word	0x035b0331
 802d308:	03c90363 	.word	0x03c90363
 802d30c:	03df00d8 	.word	0x03df00d8
 802d310:	0147043f 	.word	0x0147043f
 802d314:	01470147 	.word	0x01470147
 802d318:	01470147 	.word	0x01470147
 802d31c:	00560147 	.word	0x00560147
 802d320:	00ba008d 	.word	0x00ba008d
 802d324:	011d011d 	.word	0x011d011d
 802d328:	017e0147 	.word	0x017e0147
 802d32c:	0147008d 	.word	0x0147008d
 802d330:	0245025d 	.word	0x0245025d
 802d334:	0261024c 	.word	0x0261024c
 802d338:	01470266 	.word	0x01470266
 802d33c:	0298026f 	.word	0x0298026f
 802d340:	02a800d0 	.word	0x02a800d0
 802d344:	03380329 	.word	0x03380329
 802d348:	03c00395 	.word	0x03c00395
 802d34c:	03d100d4 	.word	0x03d100d4
 802d350:	0402      	.short	0x0402
 802d352:	69b3      	ldr	r3, [r6, #24]
 802d354:	4aad      	ldr	r2, [pc, #692]	@ (802d60c <__strftime.isra.0+0x3f8>)
 802d356:	3318      	adds	r3, #24
 802d358:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802d35c:	4658      	mov	r0, fp
 802d35e:	f7e2 ff9f 	bl	80102a0 <strlen>
 802d362:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d366:	eb04 0a00 	add.w	sl, r4, r0
 802d36a:	1e6b      	subs	r3, r5, #1
 802d36c:	45a2      	cmp	sl, r4
 802d36e:	d107      	bne.n	802d380 <__strftime.isra.0+0x16c>
 802d370:	f898 3000 	ldrb.w	r3, [r8]
 802d374:	2b00      	cmp	r3, #0
 802d376:	f000 8408 	beq.w	802db8a <__strftime.isra.0+0x976>
 802d37a:	f108 0201 	add.w	r2, r8, #1
 802d37e:	e780      	b.n	802d282 <__strftime.isra.0+0x6e>
 802d380:	42a3      	cmp	r3, r4
 802d382:	f240 80d7 	bls.w	802d534 <__strftime.isra.0+0x320>
 802d386:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802d38a:	553a      	strb	r2, [r7, r4]
 802d38c:	3401      	adds	r4, #1
 802d38e:	e7ed      	b.n	802d36c <__strftime.isra.0+0x158>
 802d390:	69b2      	ldr	r2, [r6, #24]
 802d392:	4b9e      	ldr	r3, [pc, #632]	@ (802d60c <__strftime.isra.0+0x3f8>)
 802d394:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802d398:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 802d39c:	4658      	mov	r0, fp
 802d39e:	f7e2 ff7f 	bl	80102a0 <strlen>
 802d3a2:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d3a6:	eb04 0a00 	add.w	sl, r4, r0
 802d3aa:	1e6b      	subs	r3, r5, #1
 802d3ac:	45a2      	cmp	sl, r4
 802d3ae:	d0df      	beq.n	802d370 <__strftime.isra.0+0x15c>
 802d3b0:	42a3      	cmp	r3, r4
 802d3b2:	f240 80bf 	bls.w	802d534 <__strftime.isra.0+0x320>
 802d3b6:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802d3ba:	553a      	strb	r2, [r7, r4]
 802d3bc:	3401      	adds	r4, #1
 802d3be:	e7f5      	b.n	802d3ac <__strftime.isra.0+0x198>
 802d3c0:	4b92      	ldr	r3, [pc, #584]	@ (802d60c <__strftime.isra.0+0x3f8>)
 802d3c2:	6932      	ldr	r2, [r6, #16]
 802d3c4:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 802d3c8:	4658      	mov	r0, fp
 802d3ca:	f7e2 ff69 	bl	80102a0 <strlen>
 802d3ce:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d3d2:	eb04 0a00 	add.w	sl, r4, r0
 802d3d6:	1e6b      	subs	r3, r5, #1
 802d3d8:	45a2      	cmp	sl, r4
 802d3da:	d0c9      	beq.n	802d370 <__strftime.isra.0+0x15c>
 802d3dc:	42a3      	cmp	r3, r4
 802d3de:	f240 80a9 	bls.w	802d534 <__strftime.isra.0+0x320>
 802d3e2:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802d3e6:	553a      	strb	r2, [r7, r4]
 802d3e8:	3401      	adds	r4, #1
 802d3ea:	e7f5      	b.n	802d3d8 <__strftime.isra.0+0x1c4>
 802d3ec:	6933      	ldr	r3, [r6, #16]
 802d3ee:	4a87      	ldr	r2, [pc, #540]	@ (802d60c <__strftime.isra.0+0x3f8>)
 802d3f0:	330c      	adds	r3, #12
 802d3f2:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802d3f6:	4658      	mov	r0, fp
 802d3f8:	f7e2 ff52 	bl	80102a0 <strlen>
 802d3fc:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d400:	eb04 0a00 	add.w	sl, r4, r0
 802d404:	1e6b      	subs	r3, r5, #1
 802d406:	45a2      	cmp	sl, r4
 802d408:	d0b2      	beq.n	802d370 <__strftime.isra.0+0x15c>
 802d40a:	42a3      	cmp	r3, r4
 802d40c:	f240 8092 	bls.w	802d534 <__strftime.isra.0+0x320>
 802d410:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802d414:	553a      	strb	r2, [r7, r4]
 802d416:	3401      	adds	r4, #1
 802d418:	e7f5      	b.n	802d406 <__strftime.isra.0+0x1f2>
 802d41a:	4b7c      	ldr	r3, [pc, #496]	@ (802d60c <__strftime.isra.0+0x3f8>)
 802d41c:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 802d420:	4650      	mov	r0, sl
 802d422:	f7e2 ff3d 	bl	80102a0 <strlen>
 802d426:	f89a 3000 	ldrb.w	r3, [sl]
 802d42a:	2b00      	cmp	r3, #0
 802d42c:	f000 8340 	beq.w	802dab0 <__strftime.isra.0+0x89c>
 802d430:	4633      	mov	r3, r6
 802d432:	4652      	mov	r2, sl
 802d434:	1b29      	subs	r1, r5, r4
 802d436:	1938      	adds	r0, r7, r4
 802d438:	f7ff feec 	bl	802d214 <__strftime.isra.0>
 802d43c:	2800      	cmp	r0, #0
 802d43e:	dd79      	ble.n	802d534 <__strftime.isra.0+0x320>
 802d440:	eb04 0a00 	add.w	sl, r4, r0
 802d444:	e794      	b.n	802d370 <__strftime.isra.0+0x15c>
 802d446:	4b71      	ldr	r3, [pc, #452]	@ (802d60c <__strftime.isra.0+0x3f8>)
 802d448:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 802d44c:	e7e8      	b.n	802d420 <__strftime.isra.0+0x20c>
 802d44e:	4b6f      	ldr	r3, [pc, #444]	@ (802d60c <__strftime.isra.0+0x3f8>)
 802d450:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 802d454:	e7e4      	b.n	802d420 <__strftime.isra.0+0x20c>
 802d456:	4b6d      	ldr	r3, [pc, #436]	@ (802d60c <__strftime.isra.0+0x3f8>)
 802d458:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 802d45c:	e7e0      	b.n	802d420 <__strftime.isra.0+0x20c>
 802d45e:	f8d6 a014 	ldr.w	sl, [r6, #20]
 802d462:	496b      	ldr	r1, [pc, #428]	@ (802d610 <__strftime.isra.0+0x3fc>)
 802d464:	458a      	cmp	sl, r1
 802d466:	bfac      	ite	ge
 802d468:	f04f 0b00 	movge.w	fp, #0
 802d46c:	f04f 0b01 	movlt.w	fp, #1
 802d470:	f1ba 0f00 	cmp.w	sl, #0
 802d474:	db12      	blt.n	802d49c <__strftime.isra.0+0x288>
 802d476:	2064      	movs	r0, #100	@ 0x64
 802d478:	fb9a f0f0 	sdiv	r0, sl, r0
 802d47c:	3013      	adds	r0, #19
 802d47e:	f1b9 0f00 	cmp.w	r9, #0
 802d482:	d015      	beq.n	802d4b0 <__strftime.isra.0+0x29c>
 802d484:	2863      	cmp	r0, #99	@ 0x63
 802d486:	dd28      	ble.n	802d4da <__strftime.isra.0+0x2c6>
 802d488:	4b62      	ldr	r3, [pc, #392]	@ (802d614 <__strftime.isra.0+0x400>)
 802d48a:	4963      	ldr	r1, [pc, #396]	@ (802d618 <__strftime.isra.0+0x404>)
 802d48c:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802d490:	bf0c      	ite	eq
 802d492:	469c      	moveq	ip, r3
 802d494:	468c      	movne	ip, r1
 802d496:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 802d634 <__strftime.isra.0+0x420>
 802d49a:	e00d      	b.n	802d4b8 <__strftime.isra.0+0x2a4>
 802d49c:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 802d4a0:	9203      	str	r2, [sp, #12]
 802d4a2:	f000 ff48 	bl	802e336 <abs>
 802d4a6:	2164      	movs	r1, #100	@ 0x64
 802d4a8:	9a03      	ldr	r2, [sp, #12]
 802d4aa:	fb90 f0f1 	sdiv	r0, r0, r1
 802d4ae:	e7e6      	b.n	802d47e <__strftime.isra.0+0x26a>
 802d4b0:	f8df c164 	ldr.w	ip, [pc, #356]	@ 802d618 <__strftime.isra.0+0x404>
 802d4b4:	f8df e180 	ldr.w	lr, [pc, #384]	@ 802d638 <__strftime.isra.0+0x424>
 802d4b8:	4b58      	ldr	r3, [pc, #352]	@ (802d61c <__strftime.isra.0+0x408>)
 802d4ba:	9001      	str	r0, [sp, #4]
 802d4bc:	2a02      	cmp	r2, #2
 802d4be:	bf2c      	ite	cs
 802d4c0:	ebcb 0102 	rsbcs	r1, fp, r2
 802d4c4:	f1cb 0102 	rsbcc	r1, fp, #2
 802d4c8:	4a51      	ldr	r2, [pc, #324]	@ (802d610 <__strftime.isra.0+0x3fc>)
 802d4ca:	9100      	str	r1, [sp, #0]
 802d4cc:	4592      	cmp	sl, r2
 802d4ce:	bfa8      	it	ge
 802d4d0:	4663      	movge	r3, ip
 802d4d2:	4672      	mov	r2, lr
 802d4d4:	1b29      	subs	r1, r5, r4
 802d4d6:	1938      	adds	r0, r7, r4
 802d4d8:	e023      	b.n	802d522 <__strftime.isra.0+0x30e>
 802d4da:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 802d618 <__strftime.isra.0+0x404>
 802d4de:	e7da      	b.n	802d496 <__strftime.isra.0+0x282>
 802d4e0:	494f      	ldr	r1, [pc, #316]	@ (802d620 <__strftime.isra.0+0x40c>)
 802d4e2:	4a50      	ldr	r2, [pc, #320]	@ (802d624 <__strftime.isra.0+0x410>)
 802d4e4:	68f3      	ldr	r3, [r6, #12]
 802d4e6:	2864      	cmp	r0, #100	@ 0x64
 802d4e8:	bf18      	it	ne
 802d4ea:	460a      	movne	r2, r1
 802d4ec:	1b29      	subs	r1, r5, r4
 802d4ee:	1938      	adds	r0, r7, r4
 802d4f0:	f001 fb08 	bl	802eb04 <sniprintf>
 802d4f4:	e017      	b.n	802d526 <__strftime.isra.0+0x312>
 802d4f6:	6970      	ldr	r0, [r6, #20]
 802d4f8:	6933      	ldr	r3, [r6, #16]
 802d4fa:	2800      	cmp	r0, #0
 802d4fc:	f103 0a01 	add.w	sl, r3, #1
 802d500:	eb07 0b04 	add.w	fp, r7, r4
 802d504:	68f3      	ldr	r3, [r6, #12]
 802d506:	eba5 0904 	sub.w	r9, r5, r4
 802d50a:	db19      	blt.n	802d540 <__strftime.isra.0+0x32c>
 802d50c:	2264      	movs	r2, #100	@ 0x64
 802d50e:	fb90 fcf2 	sdiv	ip, r0, r2
 802d512:	fb02 001c 	mls	r0, r2, ip, r0
 802d516:	4a44      	ldr	r2, [pc, #272]	@ (802d628 <__strftime.isra.0+0x414>)
 802d518:	e9cd 3000 	strd	r3, r0, [sp]
 802d51c:	4649      	mov	r1, r9
 802d51e:	4653      	mov	r3, sl
 802d520:	4658      	mov	r0, fp
 802d522:	f001 faef 	bl	802eb04 <sniprintf>
 802d526:	2800      	cmp	r0, #0
 802d528:	db04      	blt.n	802d534 <__strftime.isra.0+0x320>
 802d52a:	eb00 0a04 	add.w	sl, r0, r4
 802d52e:	4555      	cmp	r5, sl
 802d530:	f63f af1e 	bhi.w	802d370 <__strftime.isra.0+0x15c>
 802d534:	f04f 0a00 	mov.w	sl, #0
 802d538:	4650      	mov	r0, sl
 802d53a:	b00f      	add	sp, #60	@ 0x3c
 802d53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d540:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d544:	9303      	str	r3, [sp, #12]
 802d546:	f000 fef6 	bl	802e336 <abs>
 802d54a:	2264      	movs	r2, #100	@ 0x64
 802d54c:	9b03      	ldr	r3, [sp, #12]
 802d54e:	fb90 fcf2 	sdiv	ip, r0, r2
 802d552:	fb0c 0012 	mls	r0, ip, r2, r0
 802d556:	e7de      	b.n	802d516 <__strftime.isra.0+0x302>
 802d558:	2125      	movs	r1, #37	@ 0x25
 802d55a:	f88d 1018 	strb.w	r1, [sp, #24]
 802d55e:	f1b9 0f00 	cmp.w	r9, #0
 802d562:	d00b      	beq.n	802d57c <__strftime.isra.0+0x368>
 802d564:	2a05      	cmp	r2, #5
 802d566:	f88d 9019 	strb.w	r9, [sp, #25]
 802d56a:	d817      	bhi.n	802d59c <__strftime.isra.0+0x388>
 802d56c:	f10d 001a 	add.w	r0, sp, #26
 802d570:	492e      	ldr	r1, [pc, #184]	@ (802d62c <__strftime.isra.0+0x418>)
 802d572:	f000 fe8f 	bl	802e294 <strcpy>
 802d576:	4633      	mov	r3, r6
 802d578:	aa06      	add	r2, sp, #24
 802d57a:	e75b      	b.n	802d434 <__strftime.isra.0+0x220>
 802d57c:	232b      	movs	r3, #43	@ 0x2b
 802d57e:	f88d 3019 	strb.w	r3, [sp, #25]
 802d582:	2304      	movs	r3, #4
 802d584:	4a2a      	ldr	r2, [pc, #168]	@ (802d630 <__strftime.isra.0+0x41c>)
 802d586:	211e      	movs	r1, #30
 802d588:	f10d 001a 	add.w	r0, sp, #26
 802d58c:	f001 faba 	bl	802eb04 <sniprintf>
 802d590:	2800      	cmp	r0, #0
 802d592:	ddeb      	ble.n	802d56c <__strftime.isra.0+0x358>
 802d594:	f10d 031a 	add.w	r3, sp, #26
 802d598:	4418      	add	r0, r3
 802d59a:	e7e9      	b.n	802d570 <__strftime.isra.0+0x35c>
 802d59c:	1f93      	subs	r3, r2, #6
 802d59e:	d0e5      	beq.n	802d56c <__strftime.isra.0+0x358>
 802d5a0:	e7f0      	b.n	802d584 <__strftime.isra.0+0x370>
 802d5a2:	4630      	mov	r0, r6
 802d5a4:	f7ff fde4 	bl	802d170 <iso_year_adjust>
 802d5a8:	4682      	mov	sl, r0
 802d5aa:	6970      	ldr	r0, [r6, #20]
 802d5ac:	2800      	cmp	r0, #0
 802d5ae:	db11      	blt.n	802d5d4 <__strftime.isra.0+0x3c0>
 802d5b0:	2364      	movs	r3, #100	@ 0x64
 802d5b2:	fb90 f2f3 	sdiv	r2, r0, r3
 802d5b6:	fb03 0012 	mls	r0, r3, r2, r0
 802d5ba:	2364      	movs	r3, #100	@ 0x64
 802d5bc:	4482      	add	sl, r0
 802d5be:	fb9a f2f3 	sdiv	r2, sl, r3
 802d5c2:	fb03 aa12 	mls	sl, r3, r2, sl
 802d5c6:	449a      	add	sl, r3
 802d5c8:	fbba f2f3 	udiv	r2, sl, r3
 802d5cc:	fb03 a312 	mls	r3, r3, r2, sl
 802d5d0:	4a14      	ldr	r2, [pc, #80]	@ (802d624 <__strftime.isra.0+0x410>)
 802d5d2:	e78b      	b.n	802d4ec <__strftime.isra.0+0x2d8>
 802d5d4:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d5d8:	f000 fead 	bl	802e336 <abs>
 802d5dc:	2364      	movs	r3, #100	@ 0x64
 802d5de:	f1ba 0f00 	cmp.w	sl, #0
 802d5e2:	fb90 f2f3 	sdiv	r2, r0, r3
 802d5e6:	fb02 0013 	mls	r0, r2, r3, r0
 802d5ea:	da07      	bge.n	802d5fc <__strftime.isra.0+0x3e8>
 802d5ec:	6972      	ldr	r2, [r6, #20]
 802d5ee:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 802d5f2:	429a      	cmp	r2, r3
 802d5f4:	bfb8      	it	lt
 802d5f6:	f04f 0a01 	movlt.w	sl, #1
 802d5fa:	e7de      	b.n	802d5ba <__strftime.isra.0+0x3a6>
 802d5fc:	d0dd      	beq.n	802d5ba <__strftime.isra.0+0x3a6>
 802d5fe:	6972      	ldr	r2, [r6, #20]
 802d600:	4b03      	ldr	r3, [pc, #12]	@ (802d610 <__strftime.isra.0+0x3fc>)
 802d602:	429a      	cmp	r2, r3
 802d604:	bfb8      	it	lt
 802d606:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802d60a:	e7d6      	b.n	802d5ba <__strftime.isra.0+0x3a6>
 802d60c:	0803def8 	.word	0x0803def8
 802d610:	fffff894 	.word	0xfffff894
 802d614:	0803daf5 	.word	0x0803daf5
 802d618:	0803dac3 	.word	0x0803dac3
 802d61c:	0803daf7 	.word	0x0803daf7
 802d620:	0803daf9 	.word	0x0803daf9
 802d624:	0803db07 	.word	0x0803db07
 802d628:	0803dafd 	.word	0x0803dafd
 802d62c:	0803db10 	.word	0x0803db10
 802d630:	0803db0c 	.word	0x0803db0c
 802d634:	0803daed 	.word	0x0803daed
 802d638:	0803dae6 	.word	0x0803dae6
 802d63c:	6971      	ldr	r1, [r6, #20]
 802d63e:	48bc      	ldr	r0, [pc, #752]	@ (802d930 <__strftime.isra.0+0x71c>)
 802d640:	9205      	str	r2, [sp, #20]
 802d642:	4281      	cmp	r1, r0
 802d644:	bfac      	ite	ge
 802d646:	2300      	movge	r3, #0
 802d648:	2301      	movlt	r3, #1
 802d64a:	4630      	mov	r0, r6
 802d64c:	e9cd 3103 	strd	r3, r1, [sp, #12]
 802d650:	f7ff fd8e 	bl	802d170 <iso_year_adjust>
 802d654:	9904      	ldr	r1, [sp, #16]
 802d656:	9a05      	ldr	r2, [sp, #20]
 802d658:	2900      	cmp	r1, #0
 802d65a:	4682      	mov	sl, r0
 802d65c:	db39      	blt.n	802d6d2 <__strftime.isra.0+0x4be>
 802d65e:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802d662:	fb91 fbfb 	sdiv	fp, r1, fp
 802d666:	f10b 0b13 	add.w	fp, fp, #19
 802d66a:	6970      	ldr	r0, [r6, #20]
 802d66c:	2800      	cmp	r0, #0
 802d66e:	db3d      	blt.n	802d6ec <__strftime.isra.0+0x4d8>
 802d670:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d674:	fb90 fefc 	sdiv	lr, r0, ip
 802d678:	fb0c 001e 	mls	r0, ip, lr, r0
 802d67c:	f1ba 0f00 	cmp.w	sl, #0
 802d680:	da43      	bge.n	802d70a <__strftime.isra.0+0x4f6>
 802d682:	6971      	ldr	r1, [r6, #20]
 802d684:	4bab      	ldr	r3, [pc, #684]	@ (802d934 <__strftime.isra.0+0x720>)
 802d686:	4299      	cmp	r1, r3
 802d688:	da03      	bge.n	802d692 <__strftime.isra.0+0x47e>
 802d68a:	f04f 0a01 	mov.w	sl, #1
 802d68e:	f8cd a00c 	str.w	sl, [sp, #12]
 802d692:	4482      	add	sl, r0
 802d694:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 802d698:	d142      	bne.n	802d720 <__strftime.isra.0+0x50c>
 802d69a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d69e:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 802d6a2:	9b03      	ldr	r3, [sp, #12]
 802d6a4:	2164      	movs	r1, #100	@ 0x64
 802d6a6:	fb01 aa0b 	mla	sl, r1, fp, sl
 802d6aa:	2b00      	cmp	r3, #0
 802d6ac:	f040 81e0 	bne.w	802da70 <__strftime.isra.0+0x85c>
 802d6b0:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802d6b4:	f040 81e7 	bne.w	802da86 <__strftime.isra.0+0x872>
 802d6b8:	f242 710f 	movw	r1, #9999	@ 0x270f
 802d6bc:	458a      	cmp	sl, r1
 802d6be:	f200 826b 	bhi.w	802db98 <__strftime.isra.0+0x984>
 802d6c2:	2325      	movs	r3, #37	@ 0x25
 802d6c4:	f88d 3018 	strb.w	r3, [sp, #24]
 802d6c8:	a906      	add	r1, sp, #24
 802d6ca:	2330      	movs	r3, #48	@ 0x30
 802d6cc:	1c88      	adds	r0, r1, #2
 802d6ce:	704b      	strb	r3, [r1, #1]
 802d6d0:	e1e1      	b.n	802da96 <__strftime.isra.0+0x882>
 802d6d2:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 802d6d6:	9205      	str	r2, [sp, #20]
 802d6d8:	9104      	str	r1, [sp, #16]
 802d6da:	f000 fe2c 	bl	802e336 <abs>
 802d6de:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d6e2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 802d6e6:	fb90 fbfc 	sdiv	fp, r0, ip
 802d6ea:	e7be      	b.n	802d66a <__strftime.isra.0+0x456>
 802d6ec:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d6f0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 802d6f4:	f000 fe1f 	bl	802e336 <abs>
 802d6f8:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d6fc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 802d700:	fb90 fefc 	sdiv	lr, r0, ip
 802d704:	fb0e 001c 	mls	r0, lr, ip, r0
 802d708:	e7b8      	b.n	802d67c <__strftime.isra.0+0x468>
 802d70a:	d0c2      	beq.n	802d692 <__strftime.isra.0+0x47e>
 802d70c:	4b88      	ldr	r3, [pc, #544]	@ (802d930 <__strftime.isra.0+0x71c>)
 802d70e:	4299      	cmp	r1, r3
 802d710:	bfb4      	ite	lt
 802d712:	2301      	movlt	r3, #1
 802d714:	2300      	movge	r3, #0
 802d716:	9303      	str	r3, [sp, #12]
 802d718:	bfb8      	it	lt
 802d71a:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802d71e:	e7b8      	b.n	802d692 <__strftime.isra.0+0x47e>
 802d720:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 802d724:	bf04      	itt	eq
 802d726:	f10b 0b01 	addeq.w	fp, fp, #1
 802d72a:	f04f 0a00 	moveq.w	sl, #0
 802d72e:	e7b8      	b.n	802d6a2 <__strftime.isra.0+0x48e>
 802d730:	4981      	ldr	r1, [pc, #516]	@ (802d938 <__strftime.isra.0+0x724>)
 802d732:	4a82      	ldr	r2, [pc, #520]	@ (802d93c <__strftime.isra.0+0x728>)
 802d734:	68b3      	ldr	r3, [r6, #8]
 802d736:	286b      	cmp	r0, #107	@ 0x6b
 802d738:	bf18      	it	ne
 802d73a:	460a      	movne	r2, r1
 802d73c:	e6d6      	b.n	802d4ec <__strftime.isra.0+0x2d8>
 802d73e:	68b3      	ldr	r3, [r6, #8]
 802d740:	b163      	cbz	r3, 802d75c <__strftime.isra.0+0x548>
 802d742:	2b0c      	cmp	r3, #12
 802d744:	d004      	beq.n	802d750 <__strftime.isra.0+0x53c>
 802d746:	210c      	movs	r1, #12
 802d748:	fb93 f2f1 	sdiv	r2, r3, r1
 802d74c:	fb01 3312 	mls	r3, r1, r2, r3
 802d750:	497a      	ldr	r1, [pc, #488]	@ (802d93c <__strftime.isra.0+0x728>)
 802d752:	4a79      	ldr	r2, [pc, #484]	@ (802d938 <__strftime.isra.0+0x724>)
 802d754:	2849      	cmp	r0, #73	@ 0x49
 802d756:	bf18      	it	ne
 802d758:	460a      	movne	r2, r1
 802d75a:	e6c7      	b.n	802d4ec <__strftime.isra.0+0x2d8>
 802d75c:	230c      	movs	r3, #12
 802d75e:	e7f7      	b.n	802d750 <__strftime.isra.0+0x53c>
 802d760:	69f3      	ldr	r3, [r6, #28]
 802d762:	4a77      	ldr	r2, [pc, #476]	@ (802d940 <__strftime.isra.0+0x72c>)
 802d764:	3301      	adds	r3, #1
 802d766:	e6c1      	b.n	802d4ec <__strftime.isra.0+0x2d8>
 802d768:	6933      	ldr	r3, [r6, #16]
 802d76a:	3301      	adds	r3, #1
 802d76c:	e730      	b.n	802d5d0 <__strftime.isra.0+0x3bc>
 802d76e:	6873      	ldr	r3, [r6, #4]
 802d770:	e72e      	b.n	802d5d0 <__strftime.isra.0+0x3bc>
 802d772:	1e6b      	subs	r3, r5, #1
 802d774:	429c      	cmp	r4, r3
 802d776:	f4bf aedd 	bcs.w	802d534 <__strftime.isra.0+0x320>
 802d77a:	f104 0a01 	add.w	sl, r4, #1
 802d77e:	230a      	movs	r3, #10
 802d780:	553b      	strb	r3, [r7, r4]
 802d782:	e5f5      	b.n	802d370 <__strftime.isra.0+0x15c>
 802d784:	68b3      	ldr	r3, [r6, #8]
 802d786:	2b0b      	cmp	r3, #11
 802d788:	4b6e      	ldr	r3, [pc, #440]	@ (802d944 <__strftime.isra.0+0x730>)
 802d78a:	bfd4      	ite	le
 802d78c:	2200      	movle	r2, #0
 802d78e:	2201      	movgt	r2, #1
 802d790:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802d794:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 802d798:	4658      	mov	r0, fp
 802d79a:	f7e2 fd81 	bl	80102a0 <strlen>
 802d79e:	eb04 0a00 	add.w	sl, r4, r0
 802d7a2:	4869      	ldr	r0, [pc, #420]	@ (802d948 <__strftime.isra.0+0x734>)
 802d7a4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d7a8:	1e69      	subs	r1, r5, #1
 802d7aa:	45a2      	cmp	sl, r4
 802d7ac:	f43f ade0 	beq.w	802d370 <__strftime.isra.0+0x15c>
 802d7b0:	42a1      	cmp	r1, r4
 802d7b2:	f67f aebf 	bls.w	802d534 <__strftime.isra.0+0x320>
 802d7b6:	f898 2000 	ldrb.w	r2, [r8]
 802d7ba:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 802d7be:	2a50      	cmp	r2, #80	@ 0x50
 802d7c0:	d106      	bne.n	802d7d0 <__strftime.isra.0+0x5bc>
 802d7c2:	5cc2      	ldrb	r2, [r0, r3]
 802d7c4:	f002 0203 	and.w	r2, r2, #3
 802d7c8:	2a01      	cmp	r2, #1
 802d7ca:	bf08      	it	eq
 802d7cc:	3320      	addeq	r3, #32
 802d7ce:	b2db      	uxtb	r3, r3
 802d7d0:	553b      	strb	r3, [r7, r4]
 802d7d2:	3401      	adds	r4, #1
 802d7d4:	e7e9      	b.n	802d7aa <__strftime.isra.0+0x596>
 802d7d6:	2203      	movs	r2, #3
 802d7d8:	6933      	ldr	r3, [r6, #16]
 802d7da:	fb93 f3f2 	sdiv	r3, r3, r2
 802d7de:	4a5b      	ldr	r2, [pc, #364]	@ (802d94c <__strftime.isra.0+0x738>)
 802d7e0:	3301      	adds	r3, #1
 802d7e2:	e683      	b.n	802d4ec <__strftime.isra.0+0x2d8>
 802d7e4:	6873      	ldr	r3, [r6, #4]
 802d7e6:	9300      	str	r3, [sp, #0]
 802d7e8:	68b3      	ldr	r3, [r6, #8]
 802d7ea:	4a59      	ldr	r2, [pc, #356]	@ (802d950 <__strftime.isra.0+0x73c>)
 802d7ec:	1b29      	subs	r1, r5, r4
 802d7ee:	1938      	adds	r0, r7, r4
 802d7f0:	f001 f988 	bl	802eb04 <sniprintf>
 802d7f4:	e697      	b.n	802d526 <__strftime.isra.0+0x312>
 802d7f6:	6a33      	ldr	r3, [r6, #32]
 802d7f8:	2b00      	cmp	r3, #0
 802d7fa:	db78      	blt.n	802d8ee <__strftime.isra.0+0x6da>
 802d7fc:	f000 fa92 	bl	802dd24 <__tz_lock>
 802d800:	9b02      	ldr	r3, [sp, #8]
 802d802:	b90b      	cbnz	r3, 802d808 <__strftime.isra.0+0x5f4>
 802d804:	f000 fa9a 	bl	802dd3c <_tzset_unlocked>
 802d808:	f007 ff60 	bl	80356cc <__gettzinfo>
 802d80c:	6a33      	ldr	r3, [r6, #32]
 802d80e:	2b00      	cmp	r3, #0
 802d810:	bfd4      	ite	le
 802d812:	2200      	movle	r2, #0
 802d814:	2201      	movgt	r2, #1
 802d816:	2328      	movs	r3, #40	@ 0x28
 802d818:	fb02 3303 	mla	r3, r2, r3, r3
 802d81c:	58c3      	ldr	r3, [r0, r3]
 802d81e:	f1c3 0a00 	rsb	sl, r3, #0
 802d822:	f000 fa85 	bl	802dd30 <__tz_unlock>
 802d826:	2301      	movs	r3, #1
 802d828:	9302      	str	r3, [sp, #8]
 802d82a:	6972      	ldr	r2, [r6, #20]
 802d82c:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 802d830:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 802d834:	f16c 0c00 	sbc.w	ip, ip, #0
 802d838:	f1bc 0f00 	cmp.w	ip, #0
 802d83c:	eba5 0104 	sub.w	r1, r5, r4
 802d840:	eb07 0004 	add.w	r0, r7, r4
 802d844:	da02      	bge.n	802d84c <__strftime.isra.0+0x638>
 802d846:	3303      	adds	r3, #3
 802d848:	f14c 0c00 	adc.w	ip, ip, #0
 802d84c:	089b      	lsrs	r3, r3, #2
 802d84e:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 802d852:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 802d856:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802d85a:	ea4f 0cac 	mov.w	ip, ip, asr #2
 802d85e:	fb9e fefb 	sdiv	lr, lr, fp
 802d862:	ebb3 030e 	subs.w	r3, r3, lr
 802d866:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 802d86a:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 802d86e:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 802d872:	fb9e fefb 	sdiv	lr, lr, fp
 802d876:	eb13 030e 	adds.w	r3, r3, lr
 802d87a:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 802d87e:	3a46      	subs	r2, #70	@ 0x46
 802d880:	f240 1e6d 	movw	lr, #365	@ 0x16d
 802d884:	fb0e f202 	mul.w	r2, lr, r2
 802d888:	189b      	adds	r3, r3, r2
 802d88a:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802d88e:	69f2      	ldr	r2, [r6, #28]
 802d890:	f8d6 b004 	ldr.w	fp, [r6, #4]
 802d894:	189b      	adds	r3, r3, r2
 802d896:	f04f 0e18 	mov.w	lr, #24
 802d89a:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802d89e:	fba3 230e 	umull	r2, r3, r3, lr
 802d8a2:	fb0e 330c 	mla	r3, lr, ip, r3
 802d8a6:	f8d6 c008 	ldr.w	ip, [r6, #8]
 802d8aa:	eb12 020c 	adds.w	r2, r2, ip
 802d8ae:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802d8b2:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 802d8b6:	fba2 2e0c 	umull	r2, lr, r2, ip
 802d8ba:	fb0c ee03 	mla	lr, ip, r3, lr
 802d8be:	eb12 030b 	adds.w	r3, r2, fp
 802d8c2:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 802d8c6:	fba3 e30c 	umull	lr, r3, r3, ip
 802d8ca:	fb0c 3302 	mla	r3, ip, r2, r3
 802d8ce:	f8d6 c000 	ldr.w	ip, [r6]
 802d8d2:	eb1e 020c 	adds.w	r2, lr, ip
 802d8d6:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802d8da:	ebb2 020a 	subs.w	r2, r2, sl
 802d8de:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 802d8e2:	e9cd 2300 	strd	r2, r3, [sp]
 802d8e6:	4a1b      	ldr	r2, [pc, #108]	@ (802d954 <__strftime.isra.0+0x740>)
 802d8e8:	f001 f90c 	bl	802eb04 <sniprintf>
 802d8ec:	e61b      	b.n	802d526 <__strftime.isra.0+0x312>
 802d8ee:	f04f 0a00 	mov.w	sl, #0
 802d8f2:	e79a      	b.n	802d82a <__strftime.isra.0+0x616>
 802d8f4:	6833      	ldr	r3, [r6, #0]
 802d8f6:	e66b      	b.n	802d5d0 <__strftime.isra.0+0x3bc>
 802d8f8:	1e6b      	subs	r3, r5, #1
 802d8fa:	429c      	cmp	r4, r3
 802d8fc:	f4bf ae1a 	bcs.w	802d534 <__strftime.isra.0+0x320>
 802d900:	f104 0a01 	add.w	sl, r4, #1
 802d904:	2309      	movs	r3, #9
 802d906:	e73b      	b.n	802d780 <__strftime.isra.0+0x56c>
 802d908:	6833      	ldr	r3, [r6, #0]
 802d90a:	9301      	str	r3, [sp, #4]
 802d90c:	6873      	ldr	r3, [r6, #4]
 802d90e:	9300      	str	r3, [sp, #0]
 802d910:	68b3      	ldr	r3, [r6, #8]
 802d912:	4a11      	ldr	r2, [pc, #68]	@ (802d958 <__strftime.isra.0+0x744>)
 802d914:	e5de      	b.n	802d4d4 <__strftime.isra.0+0x2c0>
 802d916:	1e6b      	subs	r3, r5, #1
 802d918:	429c      	cmp	r4, r3
 802d91a:	f4bf ae0b 	bcs.w	802d534 <__strftime.isra.0+0x320>
 802d91e:	69b3      	ldr	r3, [r6, #24]
 802d920:	b91b      	cbnz	r3, 802d92a <__strftime.isra.0+0x716>
 802d922:	2337      	movs	r3, #55	@ 0x37
 802d924:	f104 0a01 	add.w	sl, r4, #1
 802d928:	e72a      	b.n	802d780 <__strftime.isra.0+0x56c>
 802d92a:	3330      	adds	r3, #48	@ 0x30
 802d92c:	b2db      	uxtb	r3, r3
 802d92e:	e7f9      	b.n	802d924 <__strftime.isra.0+0x710>
 802d930:	fffff894 	.word	0xfffff894
 802d934:	fffff895 	.word	0xfffff895
 802d938:	0803db07 	.word	0x0803db07
 802d93c:	0803daf9 	.word	0x0803daf9
 802d940:	0803db1c 	.word	0x0803db1c
 802d944:	0803def8 	.word	0x0803def8
 802d948:	0803dff5 	.word	0x0803dff5
 802d94c:	0803db21 	.word	0x0803db21
 802d950:	0803db30 	.word	0x0803db30
 802d954:	0803db26 	.word	0x0803db26
 802d958:	0803db2b 	.word	0x0803db2b
 802d95c:	69f3      	ldr	r3, [r6, #28]
 802d95e:	69b2      	ldr	r2, [r6, #24]
 802d960:	3307      	adds	r3, #7
 802d962:	1a9b      	subs	r3, r3, r2
 802d964:	2207      	movs	r2, #7
 802d966:	fb93 f3f2 	sdiv	r3, r3, r2
 802d96a:	e631      	b.n	802d5d0 <__strftime.isra.0+0x3bc>
 802d96c:	4630      	mov	r0, r6
 802d96e:	f7ff fbff 	bl	802d170 <iso_year_adjust>
 802d972:	69b2      	ldr	r2, [r6, #24]
 802d974:	b132      	cbz	r2, 802d984 <__strftime.isra.0+0x770>
 802d976:	3a01      	subs	r2, #1
 802d978:	2800      	cmp	r0, #0
 802d97a:	69f3      	ldr	r3, [r6, #28]
 802d97c:	dc26      	bgt.n	802d9cc <__strftime.isra.0+0x7b8>
 802d97e:	d103      	bne.n	802d988 <__strftime.isra.0+0x774>
 802d980:	330a      	adds	r3, #10
 802d982:	e7ee      	b.n	802d962 <__strftime.isra.0+0x74e>
 802d984:	2206      	movs	r2, #6
 802d986:	e7f7      	b.n	802d978 <__strftime.isra.0+0x764>
 802d988:	1ad2      	subs	r2, r2, r3
 802d98a:	6973      	ldr	r3, [r6, #20]
 802d98c:	2b00      	cmp	r3, #0
 802d98e:	f240 716b 	movw	r1, #1899	@ 0x76b
 802d992:	bfa8      	it	ge
 802d994:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 802d998:	440b      	add	r3, r1
 802d99a:	0799      	lsls	r1, r3, #30
 802d99c:	d105      	bne.n	802d9aa <__strftime.isra.0+0x796>
 802d99e:	2064      	movs	r0, #100	@ 0x64
 802d9a0:	fb93 f1f0 	sdiv	r1, r3, r0
 802d9a4:	fb00 3111 	mls	r1, r0, r1, r3
 802d9a8:	b971      	cbnz	r1, 802d9c8 <__strftime.isra.0+0x7b4>
 802d9aa:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802d9ae:	fb93 f0f1 	sdiv	r0, r3, r1
 802d9b2:	fb01 3310 	mls	r3, r1, r0, r3
 802d9b6:	fab3 f383 	clz	r3, r3
 802d9ba:	095b      	lsrs	r3, r3, #5
 802d9bc:	1ad2      	subs	r2, r2, r3
 802d9be:	2a04      	cmp	r2, #4
 802d9c0:	bfcc      	ite	gt
 802d9c2:	2334      	movgt	r3, #52	@ 0x34
 802d9c4:	2335      	movle	r3, #53	@ 0x35
 802d9c6:	e603      	b.n	802d5d0 <__strftime.isra.0+0x3bc>
 802d9c8:	2301      	movs	r3, #1
 802d9ca:	e7f7      	b.n	802d9bc <__strftime.isra.0+0x7a8>
 802d9cc:	2301      	movs	r3, #1
 802d9ce:	e5ff      	b.n	802d5d0 <__strftime.isra.0+0x3bc>
 802d9d0:	4972      	ldr	r1, [pc, #456]	@ (802db9c <__strftime.isra.0+0x988>)
 802d9d2:	9203      	str	r2, [sp, #12]
 802d9d4:	a806      	add	r0, sp, #24
 802d9d6:	f000 fc5d 	bl	802e294 <strcpy>
 802d9da:	a806      	add	r0, sp, #24
 802d9dc:	f7e2 fc60 	bl	80102a0 <strlen>
 802d9e0:	ab06      	add	r3, sp, #24
 802d9e2:	eb03 0a00 	add.w	sl, r3, r0
 802d9e6:	f10a 0a01 	add.w	sl, sl, #1
 802d9ea:	46d3      	mov	fp, sl
 802d9ec:	f1b9 0f00 	cmp.w	r9, #0
 802d9f0:	d009      	beq.n	802da06 <__strftime.isra.0+0x7f2>
 802d9f2:	9a03      	ldr	r2, [sp, #12]
 802d9f4:	f803 9000 	strb.w	r9, [r3, r0]
 802d9f8:	2a05      	cmp	r2, #5
 802d9fa:	d901      	bls.n	802da00 <__strftime.isra.0+0x7ec>
 802d9fc:	1f93      	subs	r3, r2, #6
 802d9fe:	d106      	bne.n	802da0e <__strftime.isra.0+0x7fa>
 802da00:	4967      	ldr	r1, [pc, #412]	@ (802dba0 <__strftime.isra.0+0x98c>)
 802da02:	4658      	mov	r0, fp
 802da04:	e5b5      	b.n	802d572 <__strftime.isra.0+0x35e>
 802da06:	aa06      	add	r2, sp, #24
 802da08:	232b      	movs	r3, #43	@ 0x2b
 802da0a:	5413      	strb	r3, [r2, r0]
 802da0c:	2304      	movs	r3, #4
 802da0e:	a90e      	add	r1, sp, #56	@ 0x38
 802da10:	4a64      	ldr	r2, [pc, #400]	@ (802dba4 <__strftime.isra.0+0x990>)
 802da12:	eba1 010a 	sub.w	r1, r1, sl
 802da16:	4650      	mov	r0, sl
 802da18:	f001 f874 	bl	802eb04 <sniprintf>
 802da1c:	2800      	cmp	r0, #0
 802da1e:	bfc8      	it	gt
 802da20:	eb0a 0b00 	addgt.w	fp, sl, r0
 802da24:	e7ec      	b.n	802da00 <__strftime.isra.0+0x7ec>
 802da26:	1e6b      	subs	r3, r5, #1
 802da28:	429c      	cmp	r4, r3
 802da2a:	f4bf ad83 	bcs.w	802d534 <__strftime.isra.0+0x320>
 802da2e:	69b3      	ldr	r3, [r6, #24]
 802da30:	f104 0a01 	add.w	sl, r4, #1
 802da34:	3330      	adds	r3, #48	@ 0x30
 802da36:	e6a3      	b.n	802d780 <__strftime.isra.0+0x56c>
 802da38:	69b2      	ldr	r2, [r6, #24]
 802da3a:	b11a      	cbz	r2, 802da44 <__strftime.isra.0+0x830>
 802da3c:	3a01      	subs	r2, #1
 802da3e:	69f3      	ldr	r3, [r6, #28]
 802da40:	3307      	adds	r3, #7
 802da42:	e78e      	b.n	802d962 <__strftime.isra.0+0x74e>
 802da44:	2206      	movs	r2, #6
 802da46:	e7fa      	b.n	802da3e <__strftime.isra.0+0x82a>
 802da48:	6970      	ldr	r0, [r6, #20]
 802da4a:	2800      	cmp	r0, #0
 802da4c:	db05      	blt.n	802da5a <__strftime.isra.0+0x846>
 802da4e:	2364      	movs	r3, #100	@ 0x64
 802da50:	fb90 f2f3 	sdiv	r2, r0, r3
 802da54:	fb02 0313 	mls	r3, r2, r3, r0
 802da58:	e5ba      	b.n	802d5d0 <__strftime.isra.0+0x3bc>
 802da5a:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802da5e:	f000 fc6a 	bl	802e336 <abs>
 802da62:	e7f4      	b.n	802da4e <__strftime.isra.0+0x83a>
 802da64:	6971      	ldr	r1, [r6, #20]
 802da66:	4850      	ldr	r0, [pc, #320]	@ (802dba8 <__strftime.isra.0+0x994>)
 802da68:	4281      	cmp	r1, r0
 802da6a:	da09      	bge.n	802da80 <__strftime.isra.0+0x86c>
 802da6c:	eba0 0a01 	sub.w	sl, r0, r1
 802da70:	212d      	movs	r1, #45	@ 0x2d
 802da72:	f88d 1018 	strb.w	r1, [sp, #24]
 802da76:	b102      	cbz	r2, 802da7a <__strftime.isra.0+0x866>
 802da78:	3a01      	subs	r2, #1
 802da7a:	f10d 0119 	add.w	r1, sp, #25
 802da7e:	e003      	b.n	802da88 <__strftime.isra.0+0x874>
 802da80:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 802da84:	e614      	b.n	802d6b0 <__strftime.isra.0+0x49c>
 802da86:	a906      	add	r1, sp, #24
 802da88:	2025      	movs	r0, #37	@ 0x25
 802da8a:	7008      	strb	r0, [r1, #0]
 802da8c:	f1b9 0f00 	cmp.w	r9, #0
 802da90:	f47f ae1b 	bne.w	802d6ca <__strftime.isra.0+0x4b6>
 802da94:	1c48      	adds	r0, r1, #1
 802da96:	4945      	ldr	r1, [pc, #276]	@ (802dbac <__strftime.isra.0+0x998>)
 802da98:	9203      	str	r2, [sp, #12]
 802da9a:	f000 fbfb 	bl	802e294 <strcpy>
 802da9e:	9a03      	ldr	r2, [sp, #12]
 802daa0:	f8cd a000 	str.w	sl, [sp]
 802daa4:	4613      	mov	r3, r2
 802daa6:	aa06      	add	r2, sp, #24
 802daa8:	e6a0      	b.n	802d7ec <__strftime.isra.0+0x5d8>
 802daaa:	6a33      	ldr	r3, [r6, #32]
 802daac:	2b00      	cmp	r3, #0
 802daae:	da01      	bge.n	802dab4 <__strftime.isra.0+0x8a0>
 802dab0:	46a2      	mov	sl, r4
 802dab2:	e45d      	b.n	802d370 <__strftime.isra.0+0x15c>
 802dab4:	f000 f936 	bl	802dd24 <__tz_lock>
 802dab8:	9b02      	ldr	r3, [sp, #8]
 802daba:	b90b      	cbnz	r3, 802dac0 <__strftime.isra.0+0x8ac>
 802dabc:	f000 f93e 	bl	802dd3c <_tzset_unlocked>
 802dac0:	f007 fe04 	bl	80356cc <__gettzinfo>
 802dac4:	6a33      	ldr	r3, [r6, #32]
 802dac6:	2b00      	cmp	r3, #0
 802dac8:	bfd4      	ite	le
 802daca:	2200      	movle	r2, #0
 802dacc:	2201      	movgt	r2, #1
 802dace:	2328      	movs	r3, #40	@ 0x28
 802dad0:	fb02 3303 	mla	r3, r2, r3, r3
 802dad4:	eb07 0a04 	add.w	sl, r7, r4
 802dad8:	58c3      	ldr	r3, [r0, r3]
 802dada:	f1c3 0900 	rsb	r9, r3, #0
 802dade:	f000 f927 	bl	802dd30 <__tz_unlock>
 802dae2:	233c      	movs	r3, #60	@ 0x3c
 802dae4:	fb99 f0f3 	sdiv	r0, r9, r3
 802dae8:	f000 fd91 	bl	802e60e <labs>
 802daec:	233c      	movs	r3, #60	@ 0x3c
 802daee:	eba5 0b04 	sub.w	fp, r5, r4
 802daf2:	fb90 f2f3 	sdiv	r2, r0, r3
 802daf6:	fb02 0013 	mls	r0, r2, r3, r0
 802dafa:	9000      	str	r0, [sp, #0]
 802dafc:	4a2c      	ldr	r2, [pc, #176]	@ (802dbb0 <__strftime.isra.0+0x99c>)
 802dafe:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 802db02:	4659      	mov	r1, fp
 802db04:	4650      	mov	r0, sl
 802db06:	fb99 f3f3 	sdiv	r3, r9, r3
 802db0a:	f000 fffb 	bl	802eb04 <sniprintf>
 802db0e:	2800      	cmp	r0, #0
 802db10:	f6ff ad10 	blt.w	802d534 <__strftime.isra.0+0x320>
 802db14:	eb00 0a04 	add.w	sl, r0, r4
 802db18:	4555      	cmp	r5, sl
 802db1a:	f67f ad0b 	bls.w	802d534 <__strftime.isra.0+0x320>
 802db1e:	2301      	movs	r3, #1
 802db20:	9302      	str	r3, [sp, #8]
 802db22:	e425      	b.n	802d370 <__strftime.isra.0+0x15c>
 802db24:	6a33      	ldr	r3, [r6, #32]
 802db26:	2b00      	cmp	r3, #0
 802db28:	dbc2      	blt.n	802dab0 <__strftime.isra.0+0x89c>
 802db2a:	f000 f8fb 	bl	802dd24 <__tz_lock>
 802db2e:	9b02      	ldr	r3, [sp, #8]
 802db30:	b90b      	cbnz	r3, 802db36 <__strftime.isra.0+0x922>
 802db32:	f000 f903 	bl	802dd3c <_tzset_unlocked>
 802db36:	6a33      	ldr	r3, [r6, #32]
 802db38:	4a1e      	ldr	r2, [pc, #120]	@ (802dbb4 <__strftime.isra.0+0x9a0>)
 802db3a:	2b00      	cmp	r3, #0
 802db3c:	bfd4      	ite	le
 802db3e:	2300      	movle	r3, #0
 802db40:	2301      	movgt	r3, #1
 802db42:	46a2      	mov	sl, r4
 802db44:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802db48:	4648      	mov	r0, r9
 802db4a:	f7e2 fba9 	bl	80102a0 <strlen>
 802db4e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802db52:	4420      	add	r0, r4
 802db54:	1e6b      	subs	r3, r5, #1
 802db56:	4550      	cmp	r0, sl
 802db58:	d102      	bne.n	802db60 <__strftime.isra.0+0x94c>
 802db5a:	f000 f8e9 	bl	802dd30 <__tz_unlock>
 802db5e:	e7de      	b.n	802db1e <__strftime.isra.0+0x90a>
 802db60:	4553      	cmp	r3, sl
 802db62:	d906      	bls.n	802db72 <__strftime.isra.0+0x95e>
 802db64:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802db68:	f807 200a 	strb.w	r2, [r7, sl]
 802db6c:	f10a 0a01 	add.w	sl, sl, #1
 802db70:	e7f1      	b.n	802db56 <__strftime.isra.0+0x942>
 802db72:	f000 f8dd 	bl	802dd30 <__tz_unlock>
 802db76:	e4dd      	b.n	802d534 <__strftime.isra.0+0x320>
 802db78:	1e6b      	subs	r3, r5, #1
 802db7a:	429c      	cmp	r4, r3
 802db7c:	f4bf acda 	bcs.w	802d534 <__strftime.isra.0+0x320>
 802db80:	f104 0a01 	add.w	sl, r4, #1
 802db84:	2325      	movs	r3, #37	@ 0x25
 802db86:	e5fb      	b.n	802d780 <__strftime.isra.0+0x56c>
 802db88:	46a2      	mov	sl, r4
 802db8a:	2d00      	cmp	r5, #0
 802db8c:	f43f acd4 	beq.w	802d538 <__strftime.isra.0+0x324>
 802db90:	2300      	movs	r3, #0
 802db92:	f807 300a 	strb.w	r3, [r7, sl]
 802db96:	e4cf      	b.n	802d538 <__strftime.isra.0+0x324>
 802db98:	4649      	mov	r1, r9
 802db9a:	e76a      	b.n	802da72 <__strftime.isra.0+0x85e>
 802db9c:	0803db3a 	.word	0x0803db3a
 802dba0:	0803dc98 	.word	0x0803dc98
 802dba4:	0803db0c 	.word	0x0803db0c
 802dba8:	fffff894 	.word	0xfffff894
 802dbac:	0803db18 	.word	0x0803db18
 802dbb0:	0803db42 	.word	0x0803db42
 802dbb4:	20000174 	.word	0x20000174

0802dbb8 <strftime>:
 802dbb8:	f7ff bb2c 	b.w	802d214 <__strftime.isra.0>

0802dbbc <__tzcalc_limits>:
 802dbbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802dbc0:	4604      	mov	r4, r0
 802dbc2:	f007 fd83 	bl	80356cc <__gettzinfo>
 802dbc6:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 802dbca:	429c      	cmp	r4, r3
 802dbcc:	f340 80a3 	ble.w	802dd16 <__tzcalc_limits+0x15a>
 802dbd0:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 802dbd4:	1865      	adds	r5, r4, r1
 802dbd6:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 802dbda:	f240 126d 	movw	r2, #365	@ 0x16d
 802dbde:	10ad      	asrs	r5, r5, #2
 802dbe0:	fb02 5503 	mla	r5, r2, r3, r5
 802dbe4:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 802dbe8:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 802dbec:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 802dbf0:	fb93 f3f2 	sdiv	r3, r3, r2
 802dbf4:	441d      	add	r5, r3
 802dbf6:	19a3      	adds	r3, r4, r6
 802dbf8:	4e48      	ldr	r6, [pc, #288]	@ (802dd1c <__tzcalc_limits+0x160>)
 802dbfa:	6044      	str	r4, [r0, #4]
 802dbfc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802dc00:	4601      	mov	r1, r0
 802dc02:	fbb3 f3f2 	udiv	r3, r3, r2
 802dc06:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 802dc0a:	441d      	add	r5, r3
 802dc0c:	7a0b      	ldrb	r3, [r1, #8]
 802dc0e:	f8d1 c014 	ldr.w	ip, [r1, #20]
 802dc12:	2b4a      	cmp	r3, #74	@ 0x4a
 802dc14:	d138      	bne.n	802dc88 <__tzcalc_limits+0xcc>
 802dc16:	07a2      	lsls	r2, r4, #30
 802dc18:	eb05 030c 	add.w	r3, r5, ip
 802dc1c:	d106      	bne.n	802dc2c <__tzcalc_limits+0x70>
 802dc1e:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 802dc22:	fb94 f2fe 	sdiv	r2, r4, lr
 802dc26:	fb0e 4212 	mls	r2, lr, r2, r4
 802dc2a:	b932      	cbnz	r2, 802dc3a <__tzcalc_limits+0x7e>
 802dc2c:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 802dc30:	fb94 f2fe 	sdiv	r2, r4, lr
 802dc34:	fb0e 4212 	mls	r2, lr, r2, r4
 802dc38:	bb1a      	cbnz	r2, 802dc82 <__tzcalc_limits+0xc6>
 802dc3a:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 802dc3e:	bfd4      	ite	le
 802dc40:	f04f 0c00 	movle.w	ip, #0
 802dc44:	f04f 0c01 	movgt.w	ip, #1
 802dc48:	4463      	add	r3, ip
 802dc4a:	3b01      	subs	r3, #1
 802dc4c:	698a      	ldr	r2, [r1, #24]
 802dc4e:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 802dc52:	fbc3 2c06 	smlal	r2, ip, r3, r6
 802dc56:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 802dc58:	18d2      	adds	r2, r2, r3
 802dc5a:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 802dc5e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 802dc62:	3128      	adds	r1, #40	@ 0x28
 802dc64:	428f      	cmp	r7, r1
 802dc66:	d1d1      	bne.n	802dc0c <__tzcalc_limits+0x50>
 802dc68:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 802dc6c:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 802dc70:	428c      	cmp	r4, r1
 802dc72:	4193      	sbcs	r3, r2
 802dc74:	bfb4      	ite	lt
 802dc76:	2301      	movlt	r3, #1
 802dc78:	2300      	movge	r3, #0
 802dc7a:	6003      	str	r3, [r0, #0]
 802dc7c:	2001      	movs	r0, #1
 802dc7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802dc82:	f04f 0c00 	mov.w	ip, #0
 802dc86:	e7df      	b.n	802dc48 <__tzcalc_limits+0x8c>
 802dc88:	2b44      	cmp	r3, #68	@ 0x44
 802dc8a:	d102      	bne.n	802dc92 <__tzcalc_limits+0xd6>
 802dc8c:	eb05 030c 	add.w	r3, r5, ip
 802dc90:	e7dc      	b.n	802dc4c <__tzcalc_limits+0x90>
 802dc92:	07a3      	lsls	r3, r4, #30
 802dc94:	d105      	bne.n	802dca2 <__tzcalc_limits+0xe6>
 802dc96:	2264      	movs	r2, #100	@ 0x64
 802dc98:	fb94 f3f2 	sdiv	r3, r4, r2
 802dc9c:	fb02 4313 	mls	r3, r2, r3, r4
 802dca0:	bb93      	cbnz	r3, 802dd08 <__tzcalc_limits+0x14c>
 802dca2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802dca6:	fb94 f3f2 	sdiv	r3, r4, r2
 802dcaa:	fb02 4313 	mls	r3, r2, r3, r4
 802dcae:	fab3 f383 	clz	r3, r3
 802dcb2:	095b      	lsrs	r3, r3, #5
 802dcb4:	f8df e068 	ldr.w	lr, [pc, #104]	@ 802dd20 <__tzcalc_limits+0x164>
 802dcb8:	f8d1 900c 	ldr.w	r9, [r1, #12]
 802dcbc:	425b      	negs	r3, r3
 802dcbe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 802dcc2:	462a      	mov	r2, r5
 802dcc4:	f04f 0800 	mov.w	r8, #0
 802dcc8:	4473      	add	r3, lr
 802dcca:	f108 0801 	add.w	r8, r8, #1
 802dcce:	45c1      	cmp	r9, r8
 802dcd0:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 802dcd4:	dc1a      	bgt.n	802dd0c <__tzcalc_limits+0x150>
 802dcd6:	f102 0804 	add.w	r8, r2, #4
 802dcda:	2307      	movs	r3, #7
 802dcdc:	fb98 f3f3 	sdiv	r3, r8, r3
 802dce0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802dce4:	eba8 0303 	sub.w	r3, r8, r3
 802dce8:	ebbc 0c03 	subs.w	ip, ip, r3
 802dcec:	690b      	ldr	r3, [r1, #16]
 802dcee:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 802dcf2:	bf48      	it	mi
 802dcf4:	f10c 0c07 	addmi.w	ip, ip, #7
 802dcf8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802dcfc:	449c      	add	ip, r3
 802dcfe:	45f4      	cmp	ip, lr
 802dd00:	da06      	bge.n	802dd10 <__tzcalc_limits+0x154>
 802dd02:	eb02 030c 	add.w	r3, r2, ip
 802dd06:	e7a1      	b.n	802dc4c <__tzcalc_limits+0x90>
 802dd08:	2301      	movs	r3, #1
 802dd0a:	e7d3      	b.n	802dcb4 <__tzcalc_limits+0xf8>
 802dd0c:	4472      	add	r2, lr
 802dd0e:	e7dc      	b.n	802dcca <__tzcalc_limits+0x10e>
 802dd10:	f1ac 0c07 	sub.w	ip, ip, #7
 802dd14:	e7f3      	b.n	802dcfe <__tzcalc_limits+0x142>
 802dd16:	2000      	movs	r0, #0
 802dd18:	e7b1      	b.n	802dc7e <__tzcalc_limits+0xc2>
 802dd1a:	bf00      	nop
 802dd1c:	00015180 	.word	0x00015180
 802dd20:	0803de94 	.word	0x0803de94

0802dd24 <__tz_lock>:
 802dd24:	4801      	ldr	r0, [pc, #4]	@ (802dd2c <__tz_lock+0x8>)
 802dd26:	f000 bae3 	b.w	802e2f0 <__retarget_lock_acquire>
 802dd2a:	bf00      	nop
 802dd2c:	2001a290 	.word	0x2001a290

0802dd30 <__tz_unlock>:
 802dd30:	4801      	ldr	r0, [pc, #4]	@ (802dd38 <__tz_unlock+0x8>)
 802dd32:	f000 badf 	b.w	802e2f4 <__retarget_lock_release>
 802dd36:	bf00      	nop
 802dd38:	2001a290 	.word	0x2001a290

0802dd3c <_tzset_unlocked>:
 802dd3c:	4b01      	ldr	r3, [pc, #4]	@ (802dd44 <_tzset_unlocked+0x8>)
 802dd3e:	6818      	ldr	r0, [r3, #0]
 802dd40:	f000 b802 	b.w	802dd48 <_tzset_unlocked_r>
 802dd44:	2000017c 	.word	0x2000017c

0802dd48 <_tzset_unlocked_r>:
 802dd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dd4c:	b08d      	sub	sp, #52	@ 0x34
 802dd4e:	4607      	mov	r7, r0
 802dd50:	f007 fcbc 	bl	80356cc <__gettzinfo>
 802dd54:	49bc      	ldr	r1, [pc, #752]	@ (802e048 <_tzset_unlocked_r+0x300>)
 802dd56:	4dbd      	ldr	r5, [pc, #756]	@ (802e04c <_tzset_unlocked_r+0x304>)
 802dd58:	4604      	mov	r4, r0
 802dd5a:	4638      	mov	r0, r7
 802dd5c:	f000 fc50 	bl	802e600 <_getenv_r>
 802dd60:	4606      	mov	r6, r0
 802dd62:	bb10      	cbnz	r0, 802ddaa <_tzset_unlocked_r+0x62>
 802dd64:	4bba      	ldr	r3, [pc, #744]	@ (802e050 <_tzset_unlocked_r+0x308>)
 802dd66:	4abb      	ldr	r2, [pc, #748]	@ (802e054 <_tzset_unlocked_r+0x30c>)
 802dd68:	6018      	str	r0, [r3, #0]
 802dd6a:	4bbb      	ldr	r3, [pc, #748]	@ (802e058 <_tzset_unlocked_r+0x310>)
 802dd6c:	62a0      	str	r0, [r4, #40]	@ 0x28
 802dd6e:	6018      	str	r0, [r3, #0]
 802dd70:	4bba      	ldr	r3, [pc, #744]	@ (802e05c <_tzset_unlocked_r+0x314>)
 802dd72:	6520      	str	r0, [r4, #80]	@ 0x50
 802dd74:	e9c3 2200 	strd	r2, r2, [r3]
 802dd78:	214a      	movs	r1, #74	@ 0x4a
 802dd7a:	2200      	movs	r2, #0
 802dd7c:	2300      	movs	r3, #0
 802dd7e:	e9c4 0003 	strd	r0, r0, [r4, #12]
 802dd82:	e9c4 0005 	strd	r0, r0, [r4, #20]
 802dd86:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 802dd8a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 802dd8e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802dd92:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802dd96:	6828      	ldr	r0, [r5, #0]
 802dd98:	7221      	strb	r1, [r4, #8]
 802dd9a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802dd9e:	f000 fc43 	bl	802e628 <free>
 802dda2:	602e      	str	r6, [r5, #0]
 802dda4:	b00d      	add	sp, #52	@ 0x34
 802dda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ddaa:	6829      	ldr	r1, [r5, #0]
 802ddac:	2900      	cmp	r1, #0
 802ddae:	f040 808e 	bne.w	802dece <_tzset_unlocked_r+0x186>
 802ddb2:	6828      	ldr	r0, [r5, #0]
 802ddb4:	f000 fc38 	bl	802e628 <free>
 802ddb8:	4630      	mov	r0, r6
 802ddba:	f7e2 fa71 	bl	80102a0 <strlen>
 802ddbe:	1c41      	adds	r1, r0, #1
 802ddc0:	4638      	mov	r0, r7
 802ddc2:	f000 fc39 	bl	802e638 <_malloc_r>
 802ddc6:	6028      	str	r0, [r5, #0]
 802ddc8:	2800      	cmp	r0, #0
 802ddca:	f040 8086 	bne.w	802deda <_tzset_unlocked_r+0x192>
 802ddce:	4aa2      	ldr	r2, [pc, #648]	@ (802e058 <_tzset_unlocked_r+0x310>)
 802ddd0:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 802e05c <_tzset_unlocked_r+0x314>
 802ddd4:	f8df a278 	ldr.w	sl, [pc, #632]	@ 802e050 <_tzset_unlocked_r+0x308>
 802ddd8:	2300      	movs	r3, #0
 802ddda:	6013      	str	r3, [r2, #0]
 802dddc:	4aa0      	ldr	r2, [pc, #640]	@ (802e060 <_tzset_unlocked_r+0x318>)
 802ddde:	f8ca 3000 	str.w	r3, [sl]
 802dde2:	2000      	movs	r0, #0
 802dde4:	2100      	movs	r1, #0
 802dde6:	e9c8 2200 	strd	r2, r2, [r8]
 802ddea:	e9c4 3303 	strd	r3, r3, [r4, #12]
 802ddee:	e9c4 3305 	strd	r3, r3, [r4, #20]
 802ddf2:	e9c4 0108 	strd	r0, r1, [r4, #32]
 802ddf6:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 802ddfa:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 802ddfe:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 802de02:	224a      	movs	r2, #74	@ 0x4a
 802de04:	7222      	strb	r2, [r4, #8]
 802de06:	62a3      	str	r3, [r4, #40]	@ 0x28
 802de08:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 802de0c:	6523      	str	r3, [r4, #80]	@ 0x50
 802de0e:	7833      	ldrb	r3, [r6, #0]
 802de10:	2b3a      	cmp	r3, #58	@ 0x3a
 802de12:	bf08      	it	eq
 802de14:	3601      	addeq	r6, #1
 802de16:	7833      	ldrb	r3, [r6, #0]
 802de18:	2b3c      	cmp	r3, #60	@ 0x3c
 802de1a:	d162      	bne.n	802dee2 <_tzset_unlocked_r+0x19a>
 802de1c:	1c75      	adds	r5, r6, #1
 802de1e:	4a91      	ldr	r2, [pc, #580]	@ (802e064 <_tzset_unlocked_r+0x31c>)
 802de20:	4991      	ldr	r1, [pc, #580]	@ (802e068 <_tzset_unlocked_r+0x320>)
 802de22:	ab0a      	add	r3, sp, #40	@ 0x28
 802de24:	4628      	mov	r0, r5
 802de26:	f000 fe41 	bl	802eaac <siscanf>
 802de2a:	2800      	cmp	r0, #0
 802de2c:	ddba      	ble.n	802dda4 <_tzset_unlocked_r+0x5c>
 802de2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802de30:	1eda      	subs	r2, r3, #3
 802de32:	2a07      	cmp	r2, #7
 802de34:	d8b6      	bhi.n	802dda4 <_tzset_unlocked_r+0x5c>
 802de36:	5ceb      	ldrb	r3, [r5, r3]
 802de38:	2b3e      	cmp	r3, #62	@ 0x3e
 802de3a:	d1b3      	bne.n	802dda4 <_tzset_unlocked_r+0x5c>
 802de3c:	3602      	adds	r6, #2
 802de3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802de40:	18f5      	adds	r5, r6, r3
 802de42:	5cf3      	ldrb	r3, [r6, r3]
 802de44:	2b2d      	cmp	r3, #45	@ 0x2d
 802de46:	d15a      	bne.n	802defe <_tzset_unlocked_r+0x1b6>
 802de48:	3501      	adds	r5, #1
 802de4a:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802de4e:	2300      	movs	r3, #0
 802de50:	f8ad 301e 	strh.w	r3, [sp, #30]
 802de54:	f8ad 3020 	strh.w	r3, [sp, #32]
 802de58:	af08      	add	r7, sp, #32
 802de5a:	ab0a      	add	r3, sp, #40	@ 0x28
 802de5c:	e9cd 3701 	strd	r3, r7, [sp, #4]
 802de60:	9303      	str	r3, [sp, #12]
 802de62:	f10d 031e 	add.w	r3, sp, #30
 802de66:	9300      	str	r3, [sp, #0]
 802de68:	4980      	ldr	r1, [pc, #512]	@ (802e06c <_tzset_unlocked_r+0x324>)
 802de6a:	ab0a      	add	r3, sp, #40	@ 0x28
 802de6c:	aa07      	add	r2, sp, #28
 802de6e:	4628      	mov	r0, r5
 802de70:	f000 fe1c 	bl	802eaac <siscanf>
 802de74:	2800      	cmp	r0, #0
 802de76:	dd95      	ble.n	802dda4 <_tzset_unlocked_r+0x5c>
 802de78:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802de7c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 802de80:	223c      	movs	r2, #60	@ 0x3c
 802de82:	fb02 6603 	mla	r6, r2, r3, r6
 802de86:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802de8a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802de8e:	fb02 6603 	mla	r6, r2, r3, r6
 802de92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802de94:	fb09 f606 	mul.w	r6, r9, r6
 802de98:	eb05 0903 	add.w	r9, r5, r3
 802de9c:	5ceb      	ldrb	r3, [r5, r3]
 802de9e:	2b3c      	cmp	r3, #60	@ 0x3c
 802dea0:	f040 80ee 	bne.w	802e080 <_tzset_unlocked_r+0x338>
 802dea4:	f109 0501 	add.w	r5, r9, #1
 802dea8:	4a71      	ldr	r2, [pc, #452]	@ (802e070 <_tzset_unlocked_r+0x328>)
 802deaa:	496f      	ldr	r1, [pc, #444]	@ (802e068 <_tzset_unlocked_r+0x320>)
 802deac:	ab0a      	add	r3, sp, #40	@ 0x28
 802deae:	4628      	mov	r0, r5
 802deb0:	f000 fdfc 	bl	802eaac <siscanf>
 802deb4:	2800      	cmp	r0, #0
 802deb6:	dc28      	bgt.n	802df0a <_tzset_unlocked_r+0x1c2>
 802deb8:	f899 3001 	ldrb.w	r3, [r9, #1]
 802debc:	2b3e      	cmp	r3, #62	@ 0x3e
 802debe:	d124      	bne.n	802df0a <_tzset_unlocked_r+0x1c2>
 802dec0:	4b68      	ldr	r3, [pc, #416]	@ (802e064 <_tzset_unlocked_r+0x31c>)
 802dec2:	62a6      	str	r6, [r4, #40]	@ 0x28
 802dec4:	e9c8 3300 	strd	r3, r3, [r8]
 802dec8:	f8ca 6000 	str.w	r6, [sl]
 802decc:	e76a      	b.n	802dda4 <_tzset_unlocked_r+0x5c>
 802dece:	f7e2 f987 	bl	80101e0 <strcmp>
 802ded2:	2800      	cmp	r0, #0
 802ded4:	f47f af6d 	bne.w	802ddb2 <_tzset_unlocked_r+0x6a>
 802ded8:	e764      	b.n	802dda4 <_tzset_unlocked_r+0x5c>
 802deda:	4631      	mov	r1, r6
 802dedc:	f000 f9da 	bl	802e294 <strcpy>
 802dee0:	e775      	b.n	802ddce <_tzset_unlocked_r+0x86>
 802dee2:	4a60      	ldr	r2, [pc, #384]	@ (802e064 <_tzset_unlocked_r+0x31c>)
 802dee4:	4963      	ldr	r1, [pc, #396]	@ (802e074 <_tzset_unlocked_r+0x32c>)
 802dee6:	ab0a      	add	r3, sp, #40	@ 0x28
 802dee8:	4630      	mov	r0, r6
 802deea:	f000 fddf 	bl	802eaac <siscanf>
 802deee:	2800      	cmp	r0, #0
 802def0:	f77f af58 	ble.w	802dda4 <_tzset_unlocked_r+0x5c>
 802def4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802def6:	3b03      	subs	r3, #3
 802def8:	2b07      	cmp	r3, #7
 802defa:	d9a0      	bls.n	802de3e <_tzset_unlocked_r+0xf6>
 802defc:	e752      	b.n	802dda4 <_tzset_unlocked_r+0x5c>
 802defe:	2b2b      	cmp	r3, #43	@ 0x2b
 802df00:	bf08      	it	eq
 802df02:	3501      	addeq	r5, #1
 802df04:	f04f 0901 	mov.w	r9, #1
 802df08:	e7a1      	b.n	802de4e <_tzset_unlocked_r+0x106>
 802df0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802df0c:	1eda      	subs	r2, r3, #3
 802df0e:	2a07      	cmp	r2, #7
 802df10:	f63f af48 	bhi.w	802dda4 <_tzset_unlocked_r+0x5c>
 802df14:	5ceb      	ldrb	r3, [r5, r3]
 802df16:	2b3e      	cmp	r3, #62	@ 0x3e
 802df18:	f47f af44 	bne.w	802dda4 <_tzset_unlocked_r+0x5c>
 802df1c:	f109 0902 	add.w	r9, r9, #2
 802df20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802df22:	eb09 0503 	add.w	r5, r9, r3
 802df26:	f819 3003 	ldrb.w	r3, [r9, r3]
 802df2a:	2b2d      	cmp	r3, #45	@ 0x2d
 802df2c:	f040 80b7 	bne.w	802e09e <_tzset_unlocked_r+0x356>
 802df30:	3501      	adds	r5, #1
 802df32:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802df36:	2300      	movs	r3, #0
 802df38:	f8ad 301c 	strh.w	r3, [sp, #28]
 802df3c:	f8ad 301e 	strh.w	r3, [sp, #30]
 802df40:	f8ad 3020 	strh.w	r3, [sp, #32]
 802df44:	930a      	str	r3, [sp, #40]	@ 0x28
 802df46:	ab0a      	add	r3, sp, #40	@ 0x28
 802df48:	e9cd 7302 	strd	r7, r3, [sp, #8]
 802df4c:	9301      	str	r3, [sp, #4]
 802df4e:	f10d 031e 	add.w	r3, sp, #30
 802df52:	9300      	str	r3, [sp, #0]
 802df54:	4945      	ldr	r1, [pc, #276]	@ (802e06c <_tzset_unlocked_r+0x324>)
 802df56:	ab0a      	add	r3, sp, #40	@ 0x28
 802df58:	aa07      	add	r2, sp, #28
 802df5a:	4628      	mov	r0, r5
 802df5c:	f000 fda6 	bl	802eaac <siscanf>
 802df60:	2800      	cmp	r0, #0
 802df62:	f300 80a2 	bgt.w	802e0aa <_tzset_unlocked_r+0x362>
 802df66:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 802df6a:	9304      	str	r3, [sp, #16]
 802df6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802df6e:	4627      	mov	r7, r4
 802df70:	441d      	add	r5, r3
 802df72:	f04f 0b00 	mov.w	fp, #0
 802df76:	782b      	ldrb	r3, [r5, #0]
 802df78:	2b2c      	cmp	r3, #44	@ 0x2c
 802df7a:	bf08      	it	eq
 802df7c:	3501      	addeq	r5, #1
 802df7e:	f895 9000 	ldrb.w	r9, [r5]
 802df82:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 802df86:	f040 80a3 	bne.w	802e0d0 <_tzset_unlocked_r+0x388>
 802df8a:	ab0a      	add	r3, sp, #40	@ 0x28
 802df8c:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 802df90:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802df94:	aa09      	add	r2, sp, #36	@ 0x24
 802df96:	9200      	str	r2, [sp, #0]
 802df98:	4937      	ldr	r1, [pc, #220]	@ (802e078 <_tzset_unlocked_r+0x330>)
 802df9a:	9303      	str	r3, [sp, #12]
 802df9c:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 802dfa0:	4628      	mov	r0, r5
 802dfa2:	f000 fd83 	bl	802eaac <siscanf>
 802dfa6:	2803      	cmp	r0, #3
 802dfa8:	f47f aefc 	bne.w	802dda4 <_tzset_unlocked_r+0x5c>
 802dfac:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 802dfb0:	1e4b      	subs	r3, r1, #1
 802dfb2:	2b0b      	cmp	r3, #11
 802dfb4:	f63f aef6 	bhi.w	802dda4 <_tzset_unlocked_r+0x5c>
 802dfb8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 802dfbc:	1e53      	subs	r3, r2, #1
 802dfbe:	2b04      	cmp	r3, #4
 802dfc0:	f63f aef0 	bhi.w	802dda4 <_tzset_unlocked_r+0x5c>
 802dfc4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 802dfc8:	2b06      	cmp	r3, #6
 802dfca:	f63f aeeb 	bhi.w	802dda4 <_tzset_unlocked_r+0x5c>
 802dfce:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802dfd2:	f887 9008 	strb.w	r9, [r7, #8]
 802dfd6:	617b      	str	r3, [r7, #20]
 802dfd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dfda:	eb05 0903 	add.w	r9, r5, r3
 802dfde:	2500      	movs	r5, #0
 802dfe0:	f04f 0302 	mov.w	r3, #2
 802dfe4:	f8ad 301c 	strh.w	r3, [sp, #28]
 802dfe8:	f8ad 501e 	strh.w	r5, [sp, #30]
 802dfec:	f8ad 5020 	strh.w	r5, [sp, #32]
 802dff0:	950a      	str	r5, [sp, #40]	@ 0x28
 802dff2:	f899 3000 	ldrb.w	r3, [r9]
 802dff6:	2b2f      	cmp	r3, #47	@ 0x2f
 802dff8:	f040 8096 	bne.w	802e128 <_tzset_unlocked_r+0x3e0>
 802dffc:	ab0a      	add	r3, sp, #40	@ 0x28
 802dffe:	aa08      	add	r2, sp, #32
 802e000:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802e004:	f10d 021e 	add.w	r2, sp, #30
 802e008:	9200      	str	r2, [sp, #0]
 802e00a:	491c      	ldr	r1, [pc, #112]	@ (802e07c <_tzset_unlocked_r+0x334>)
 802e00c:	9303      	str	r3, [sp, #12]
 802e00e:	aa07      	add	r2, sp, #28
 802e010:	4648      	mov	r0, r9
 802e012:	f000 fd4b 	bl	802eaac <siscanf>
 802e016:	42a8      	cmp	r0, r5
 802e018:	f300 8086 	bgt.w	802e128 <_tzset_unlocked_r+0x3e0>
 802e01c:	214a      	movs	r1, #74	@ 0x4a
 802e01e:	2200      	movs	r2, #0
 802e020:	2300      	movs	r3, #0
 802e022:	e9c4 5503 	strd	r5, r5, [r4, #12]
 802e026:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802e02a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802e02e:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 802e032:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 802e036:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802e03a:	7221      	strb	r1, [r4, #8]
 802e03c:	62a5      	str	r5, [r4, #40]	@ 0x28
 802e03e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802e042:	6525      	str	r5, [r4, #80]	@ 0x50
 802e044:	e6ae      	b.n	802dda4 <_tzset_unlocked_r+0x5c>
 802e046:	bf00      	nop
 802e048:	0803db4e 	.word	0x0803db4e
 802e04c:	2001a268 	.word	0x2001a268
 802e050:	2001a284 	.word	0x2001a284
 802e054:	0803db51 	.word	0x0803db51
 802e058:	2001a288 	.word	0x2001a288
 802e05c:	20000174 	.word	0x20000174
 802e060:	0803dac3 	.word	0x0803dac3
 802e064:	2001a278 	.word	0x2001a278
 802e068:	0803db55 	.word	0x0803db55
 802e06c:	0803db8a 	.word	0x0803db8a
 802e070:	2001a26c 	.word	0x2001a26c
 802e074:	0803db68 	.word	0x0803db68
 802e078:	0803db76 	.word	0x0803db76
 802e07c:	0803db89 	.word	0x0803db89
 802e080:	4a3e      	ldr	r2, [pc, #248]	@ (802e17c <_tzset_unlocked_r+0x434>)
 802e082:	493f      	ldr	r1, [pc, #252]	@ (802e180 <_tzset_unlocked_r+0x438>)
 802e084:	ab0a      	add	r3, sp, #40	@ 0x28
 802e086:	4648      	mov	r0, r9
 802e088:	f000 fd10 	bl	802eaac <siscanf>
 802e08c:	2800      	cmp	r0, #0
 802e08e:	f77f af17 	ble.w	802dec0 <_tzset_unlocked_r+0x178>
 802e092:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e094:	3b03      	subs	r3, #3
 802e096:	2b07      	cmp	r3, #7
 802e098:	f67f af42 	bls.w	802df20 <_tzset_unlocked_r+0x1d8>
 802e09c:	e682      	b.n	802dda4 <_tzset_unlocked_r+0x5c>
 802e09e:	2b2b      	cmp	r3, #43	@ 0x2b
 802e0a0:	bf08      	it	eq
 802e0a2:	3501      	addeq	r5, #1
 802e0a4:	f04f 0901 	mov.w	r9, #1
 802e0a8:	e745      	b.n	802df36 <_tzset_unlocked_r+0x1ee>
 802e0aa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802e0ae:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802e0b2:	213c      	movs	r1, #60	@ 0x3c
 802e0b4:	fb01 3302 	mla	r3, r1, r2, r3
 802e0b8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802e0bc:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802e0c0:	fb01 3302 	mla	r3, r1, r2, r3
 802e0c4:	fb09 f303 	mul.w	r3, r9, r3
 802e0c8:	e74f      	b.n	802df6a <_tzset_unlocked_r+0x222>
 802e0ca:	f04f 0b01 	mov.w	fp, #1
 802e0ce:	e752      	b.n	802df76 <_tzset_unlocked_r+0x22e>
 802e0d0:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 802e0d4:	bf06      	itte	eq
 802e0d6:	3501      	addeq	r5, #1
 802e0d8:	464b      	moveq	r3, r9
 802e0da:	2344      	movne	r3, #68	@ 0x44
 802e0dc:	220a      	movs	r2, #10
 802e0de:	a90b      	add	r1, sp, #44	@ 0x2c
 802e0e0:	4628      	mov	r0, r5
 802e0e2:	9305      	str	r3, [sp, #20]
 802e0e4:	f007 f97a 	bl	80353dc <strtoul>
 802e0e8:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 802e0ec:	9b05      	ldr	r3, [sp, #20]
 802e0ee:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 802e0f2:	45a9      	cmp	r9, r5
 802e0f4:	d114      	bne.n	802e120 <_tzset_unlocked_r+0x3d8>
 802e0f6:	234d      	movs	r3, #77	@ 0x4d
 802e0f8:	f1bb 0f00 	cmp.w	fp, #0
 802e0fc:	d107      	bne.n	802e10e <_tzset_unlocked_r+0x3c6>
 802e0fe:	7223      	strb	r3, [r4, #8]
 802e100:	2103      	movs	r1, #3
 802e102:	2302      	movs	r3, #2
 802e104:	e9c4 1303 	strd	r1, r3, [r4, #12]
 802e108:	f8c4 b014 	str.w	fp, [r4, #20]
 802e10c:	e767      	b.n	802dfde <_tzset_unlocked_r+0x296>
 802e10e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 802e112:	220b      	movs	r2, #11
 802e114:	2301      	movs	r3, #1
 802e116:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 802e11a:	2300      	movs	r3, #0
 802e11c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 802e11e:	e75e      	b.n	802dfde <_tzset_unlocked_r+0x296>
 802e120:	b280      	uxth	r0, r0
 802e122:	723b      	strb	r3, [r7, #8]
 802e124:	6178      	str	r0, [r7, #20]
 802e126:	e75a      	b.n	802dfde <_tzset_unlocked_r+0x296>
 802e128:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802e12c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802e130:	213c      	movs	r1, #60	@ 0x3c
 802e132:	fb01 3302 	mla	r3, r1, r2, r3
 802e136:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802e13a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802e13e:	fb01 3302 	mla	r3, r1, r2, r3
 802e142:	61bb      	str	r3, [r7, #24]
 802e144:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802e146:	3728      	adds	r7, #40	@ 0x28
 802e148:	444d      	add	r5, r9
 802e14a:	f1bb 0f00 	cmp.w	fp, #0
 802e14e:	d0bc      	beq.n	802e0ca <_tzset_unlocked_r+0x382>
 802e150:	9b04      	ldr	r3, [sp, #16]
 802e152:	6523      	str	r3, [r4, #80]	@ 0x50
 802e154:	4b0b      	ldr	r3, [pc, #44]	@ (802e184 <_tzset_unlocked_r+0x43c>)
 802e156:	f8c8 3000 	str.w	r3, [r8]
 802e15a:	6860      	ldr	r0, [r4, #4]
 802e15c:	4b07      	ldr	r3, [pc, #28]	@ (802e17c <_tzset_unlocked_r+0x434>)
 802e15e:	62a6      	str	r6, [r4, #40]	@ 0x28
 802e160:	f8c8 3004 	str.w	r3, [r8, #4]
 802e164:	f7ff fd2a 	bl	802dbbc <__tzcalc_limits>
 802e168:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 802e16a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802e16c:	f8ca 2000 	str.w	r2, [sl]
 802e170:	1a9b      	subs	r3, r3, r2
 802e172:	4a05      	ldr	r2, [pc, #20]	@ (802e188 <_tzset_unlocked_r+0x440>)
 802e174:	bf18      	it	ne
 802e176:	2301      	movne	r3, #1
 802e178:	6013      	str	r3, [r2, #0]
 802e17a:	e613      	b.n	802dda4 <_tzset_unlocked_r+0x5c>
 802e17c:	2001a26c 	.word	0x2001a26c
 802e180:	0803db68 	.word	0x0803db68
 802e184:	2001a278 	.word	0x2001a278
 802e188:	2001a288 	.word	0x2001a288

0802e18c <_localeconv_r>:
 802e18c:	4800      	ldr	r0, [pc, #0]	@ (802e190 <_localeconv_r+0x4>)
 802e18e:	4770      	bx	lr
 802e190:	20000820 	.word	0x20000820

0802e194 <_close_r>:
 802e194:	b538      	push	{r3, r4, r5, lr}
 802e196:	4d06      	ldr	r5, [pc, #24]	@ (802e1b0 <_close_r+0x1c>)
 802e198:	2300      	movs	r3, #0
 802e19a:	4604      	mov	r4, r0
 802e19c:	4608      	mov	r0, r1
 802e19e:	602b      	str	r3, [r5, #0]
 802e1a0:	f7e4 fc7c 	bl	8012a9c <_close>
 802e1a4:	1c43      	adds	r3, r0, #1
 802e1a6:	d102      	bne.n	802e1ae <_close_r+0x1a>
 802e1a8:	682b      	ldr	r3, [r5, #0]
 802e1aa:	b103      	cbz	r3, 802e1ae <_close_r+0x1a>
 802e1ac:	6023      	str	r3, [r4, #0]
 802e1ae:	bd38      	pop	{r3, r4, r5, pc}
 802e1b0:	2001a28c 	.word	0x2001a28c

0802e1b4 <_reclaim_reent>:
 802e1b4:	4b18      	ldr	r3, [pc, #96]	@ (802e218 <_reclaim_reent+0x64>)
 802e1b6:	681b      	ldr	r3, [r3, #0]
 802e1b8:	4283      	cmp	r3, r0
 802e1ba:	b570      	push	{r4, r5, r6, lr}
 802e1bc:	4604      	mov	r4, r0
 802e1be:	d02a      	beq.n	802e216 <_reclaim_reent+0x62>
 802e1c0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802e1c2:	b153      	cbz	r3, 802e1da <_reclaim_reent+0x26>
 802e1c4:	2500      	movs	r5, #0
 802e1c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 802e1c8:	5959      	ldr	r1, [r3, r5]
 802e1ca:	b999      	cbnz	r1, 802e1f4 <_reclaim_reent+0x40>
 802e1cc:	3504      	adds	r5, #4
 802e1ce:	2d80      	cmp	r5, #128	@ 0x80
 802e1d0:	d1f9      	bne.n	802e1c6 <_reclaim_reent+0x12>
 802e1d2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802e1d4:	4620      	mov	r0, r4
 802e1d6:	f000 f917 	bl	802e408 <_free_r>
 802e1da:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802e1dc:	b111      	cbz	r1, 802e1e4 <_reclaim_reent+0x30>
 802e1de:	4620      	mov	r0, r4
 802e1e0:	f000 f912 	bl	802e408 <_free_r>
 802e1e4:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 802e1e6:	b15d      	cbz	r5, 802e200 <_reclaim_reent+0x4c>
 802e1e8:	4629      	mov	r1, r5
 802e1ea:	4620      	mov	r0, r4
 802e1ec:	682d      	ldr	r5, [r5, #0]
 802e1ee:	f000 f90b 	bl	802e408 <_free_r>
 802e1f2:	e7f8      	b.n	802e1e6 <_reclaim_reent+0x32>
 802e1f4:	680e      	ldr	r6, [r1, #0]
 802e1f6:	4620      	mov	r0, r4
 802e1f8:	f000 f906 	bl	802e408 <_free_r>
 802e1fc:	4631      	mov	r1, r6
 802e1fe:	e7e4      	b.n	802e1ca <_reclaim_reent+0x16>
 802e200:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 802e202:	b111      	cbz	r1, 802e20a <_reclaim_reent+0x56>
 802e204:	4620      	mov	r0, r4
 802e206:	f000 f8ff 	bl	802e408 <_free_r>
 802e20a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802e20c:	b11b      	cbz	r3, 802e216 <_reclaim_reent+0x62>
 802e20e:	4620      	mov	r0, r4
 802e210:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802e214:	4718      	bx	r3
 802e216:	bd70      	pop	{r4, r5, r6, pc}
 802e218:	2000017c 	.word	0x2000017c

0802e21c <_lseek_r>:
 802e21c:	b538      	push	{r3, r4, r5, lr}
 802e21e:	4d07      	ldr	r5, [pc, #28]	@ (802e23c <_lseek_r+0x20>)
 802e220:	4604      	mov	r4, r0
 802e222:	4608      	mov	r0, r1
 802e224:	4611      	mov	r1, r2
 802e226:	2200      	movs	r2, #0
 802e228:	602a      	str	r2, [r5, #0]
 802e22a:	461a      	mov	r2, r3
 802e22c:	f7e4 fc40 	bl	8012ab0 <_lseek>
 802e230:	1c43      	adds	r3, r0, #1
 802e232:	d102      	bne.n	802e23a <_lseek_r+0x1e>
 802e234:	682b      	ldr	r3, [r5, #0]
 802e236:	b103      	cbz	r3, 802e23a <_lseek_r+0x1e>
 802e238:	6023      	str	r3, [r4, #0]
 802e23a:	bd38      	pop	{r3, r4, r5, pc}
 802e23c:	2001a28c 	.word	0x2001a28c

0802e240 <_read_r>:
 802e240:	b538      	push	{r3, r4, r5, lr}
 802e242:	4d07      	ldr	r5, [pc, #28]	@ (802e260 <_read_r+0x20>)
 802e244:	4604      	mov	r4, r0
 802e246:	4608      	mov	r0, r1
 802e248:	4611      	mov	r1, r2
 802e24a:	2200      	movs	r2, #0
 802e24c:	602a      	str	r2, [r5, #0]
 802e24e:	461a      	mov	r2, r3
 802e250:	f7e4 fc06 	bl	8012a60 <_read>
 802e254:	1c43      	adds	r3, r0, #1
 802e256:	d102      	bne.n	802e25e <_read_r+0x1e>
 802e258:	682b      	ldr	r3, [r5, #0]
 802e25a:	b103      	cbz	r3, 802e25e <_read_r+0x1e>
 802e25c:	6023      	str	r3, [r4, #0]
 802e25e:	bd38      	pop	{r3, r4, r5, pc}
 802e260:	2001a28c 	.word	0x2001a28c

0802e264 <_write_r>:
 802e264:	b538      	push	{r3, r4, r5, lr}
 802e266:	4d07      	ldr	r5, [pc, #28]	@ (802e284 <_write_r+0x20>)
 802e268:	4604      	mov	r4, r0
 802e26a:	4608      	mov	r0, r1
 802e26c:	4611      	mov	r1, r2
 802e26e:	2200      	movs	r2, #0
 802e270:	602a      	str	r2, [r5, #0]
 802e272:	461a      	mov	r2, r3
 802e274:	f7e4 fc04 	bl	8012a80 <_write>
 802e278:	1c43      	adds	r3, r0, #1
 802e27a:	d102      	bne.n	802e282 <_write_r+0x1e>
 802e27c:	682b      	ldr	r3, [r5, #0]
 802e27e:	b103      	cbz	r3, 802e282 <_write_r+0x1e>
 802e280:	6023      	str	r3, [r4, #0]
 802e282:	bd38      	pop	{r3, r4, r5, pc}
 802e284:	2001a28c 	.word	0x2001a28c

0802e288 <__errno>:
 802e288:	4b01      	ldr	r3, [pc, #4]	@ (802e290 <__errno+0x8>)
 802e28a:	6818      	ldr	r0, [r3, #0]
 802e28c:	4770      	bx	lr
 802e28e:	bf00      	nop
 802e290:	2000017c 	.word	0x2000017c

0802e294 <strcpy>:
 802e294:	4603      	mov	r3, r0
 802e296:	f811 2b01 	ldrb.w	r2, [r1], #1
 802e29a:	f803 2b01 	strb.w	r2, [r3], #1
 802e29e:	2a00      	cmp	r2, #0
 802e2a0:	d1f9      	bne.n	802e296 <strcpy+0x2>
 802e2a2:	4770      	bx	lr

0802e2a4 <__libc_init_array>:
 802e2a4:	b570      	push	{r4, r5, r6, lr}
 802e2a6:	4d0d      	ldr	r5, [pc, #52]	@ (802e2dc <__libc_init_array+0x38>)
 802e2a8:	4c0d      	ldr	r4, [pc, #52]	@ (802e2e0 <__libc_init_array+0x3c>)
 802e2aa:	1b64      	subs	r4, r4, r5
 802e2ac:	10a4      	asrs	r4, r4, #2
 802e2ae:	2600      	movs	r6, #0
 802e2b0:	42a6      	cmp	r6, r4
 802e2b2:	d109      	bne.n	802e2c8 <__libc_init_array+0x24>
 802e2b4:	4d0b      	ldr	r5, [pc, #44]	@ (802e2e4 <__libc_init_array+0x40>)
 802e2b6:	4c0c      	ldr	r4, [pc, #48]	@ (802e2e8 <__libc_init_array+0x44>)
 802e2b8:	f009 fade 	bl	8037878 <_init>
 802e2bc:	1b64      	subs	r4, r4, r5
 802e2be:	10a4      	asrs	r4, r4, #2
 802e2c0:	2600      	movs	r6, #0
 802e2c2:	42a6      	cmp	r6, r4
 802e2c4:	d105      	bne.n	802e2d2 <__libc_init_array+0x2e>
 802e2c6:	bd70      	pop	{r4, r5, r6, pc}
 802e2c8:	f855 3b04 	ldr.w	r3, [r5], #4
 802e2cc:	4798      	blx	r3
 802e2ce:	3601      	adds	r6, #1
 802e2d0:	e7ee      	b.n	802e2b0 <__libc_init_array+0xc>
 802e2d2:	f855 3b04 	ldr.w	r3, [r5], #4
 802e2d6:	4798      	blx	r3
 802e2d8:	3601      	adds	r6, #1
 802e2da:	e7f2      	b.n	802e2c2 <__libc_init_array+0x1e>
 802e2dc:	0803e2f8 	.word	0x0803e2f8
 802e2e0:	0803e2f8 	.word	0x0803e2f8
 802e2e4:	0803e2f8 	.word	0x0803e2f8
 802e2e8:	0803e300 	.word	0x0803e300

0802e2ec <__retarget_lock_init_recursive>:
 802e2ec:	4770      	bx	lr

0802e2ee <__retarget_lock_close_recursive>:
 802e2ee:	4770      	bx	lr

0802e2f0 <__retarget_lock_acquire>:
 802e2f0:	4770      	bx	lr

0802e2f2 <__retarget_lock_acquire_recursive>:
 802e2f2:	4770      	bx	lr

0802e2f4 <__retarget_lock_release>:
 802e2f4:	4770      	bx	lr

0802e2f6 <__retarget_lock_release_recursive>:
 802e2f6:	4770      	bx	lr

0802e2f8 <memcpy>:
 802e2f8:	440a      	add	r2, r1
 802e2fa:	4291      	cmp	r1, r2
 802e2fc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802e300:	d100      	bne.n	802e304 <memcpy+0xc>
 802e302:	4770      	bx	lr
 802e304:	b510      	push	{r4, lr}
 802e306:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e30a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e30e:	4291      	cmp	r1, r2
 802e310:	d1f9      	bne.n	802e306 <memcpy+0xe>
 802e312:	bd10      	pop	{r4, pc}

0802e314 <register_fini>:
 802e314:	4b02      	ldr	r3, [pc, #8]	@ (802e320 <register_fini+0xc>)
 802e316:	b113      	cbz	r3, 802e31e <register_fini+0xa>
 802e318:	4802      	ldr	r0, [pc, #8]	@ (802e324 <register_fini+0x10>)
 802e31a:	f000 b810 	b.w	802e33e <atexit>
 802e31e:	4770      	bx	lr
 802e320:	00000000 	.word	0x00000000
 802e324:	080359d5 	.word	0x080359d5

0802e328 <abort>:
 802e328:	b508      	push	{r3, lr}
 802e32a:	2006      	movs	r0, #6
 802e32c:	f007 f9c6 	bl	80356bc <raise>
 802e330:	2001      	movs	r0, #1
 802e332:	f7e4 fb8f 	bl	8012a54 <_exit>

0802e336 <abs>:
 802e336:	2800      	cmp	r0, #0
 802e338:	bfb8      	it	lt
 802e33a:	4240      	neglt	r0, r0
 802e33c:	4770      	bx	lr

0802e33e <atexit>:
 802e33e:	2300      	movs	r3, #0
 802e340:	4601      	mov	r1, r0
 802e342:	461a      	mov	r2, r3
 802e344:	4618      	mov	r0, r3
 802e346:	f007 bb81 	b.w	8035a4c <__register_exitproc>

0802e34a <div>:
 802e34a:	b510      	push	{r4, lr}
 802e34c:	fb91 f4f2 	sdiv	r4, r1, r2
 802e350:	fb02 1114 	mls	r1, r2, r4, r1
 802e354:	6004      	str	r4, [r0, #0]
 802e356:	6041      	str	r1, [r0, #4]
 802e358:	bd10      	pop	{r4, pc}
	...

0802e35c <_malloc_trim_r>:
 802e35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e360:	4606      	mov	r6, r0
 802e362:	2008      	movs	r0, #8
 802e364:	4689      	mov	r9, r1
 802e366:	f007 fb29 	bl	80359bc <sysconf>
 802e36a:	4f24      	ldr	r7, [pc, #144]	@ (802e3fc <_malloc_trim_r+0xa0>)
 802e36c:	4680      	mov	r8, r0
 802e36e:	4630      	mov	r0, r6
 802e370:	f005 ff48 	bl	8034204 <__malloc_lock>
 802e374:	68bb      	ldr	r3, [r7, #8]
 802e376:	685d      	ldr	r5, [r3, #4]
 802e378:	f025 0503 	bic.w	r5, r5, #3
 802e37c:	f1a5 0411 	sub.w	r4, r5, #17
 802e380:	eba4 0409 	sub.w	r4, r4, r9
 802e384:	4444      	add	r4, r8
 802e386:	fbb4 f4f8 	udiv	r4, r4, r8
 802e38a:	3c01      	subs	r4, #1
 802e38c:	fb08 f404 	mul.w	r4, r8, r4
 802e390:	45a0      	cmp	r8, r4
 802e392:	dd05      	ble.n	802e3a0 <_malloc_trim_r+0x44>
 802e394:	4630      	mov	r0, r6
 802e396:	f005 ff3b 	bl	8034210 <__malloc_unlock>
 802e39a:	2000      	movs	r0, #0
 802e39c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e3a0:	2100      	movs	r1, #0
 802e3a2:	4630      	mov	r0, r6
 802e3a4:	f007 fa62 	bl	803586c <_sbrk_r>
 802e3a8:	68bb      	ldr	r3, [r7, #8]
 802e3aa:	442b      	add	r3, r5
 802e3ac:	4298      	cmp	r0, r3
 802e3ae:	d1f1      	bne.n	802e394 <_malloc_trim_r+0x38>
 802e3b0:	4261      	negs	r1, r4
 802e3b2:	4630      	mov	r0, r6
 802e3b4:	f007 fa5a 	bl	803586c <_sbrk_r>
 802e3b8:	3001      	adds	r0, #1
 802e3ba:	d110      	bne.n	802e3de <_malloc_trim_r+0x82>
 802e3bc:	2100      	movs	r1, #0
 802e3be:	4630      	mov	r0, r6
 802e3c0:	f007 fa54 	bl	803586c <_sbrk_r>
 802e3c4:	68ba      	ldr	r2, [r7, #8]
 802e3c6:	1a83      	subs	r3, r0, r2
 802e3c8:	2b0f      	cmp	r3, #15
 802e3ca:	dde3      	ble.n	802e394 <_malloc_trim_r+0x38>
 802e3cc:	490c      	ldr	r1, [pc, #48]	@ (802e400 <_malloc_trim_r+0xa4>)
 802e3ce:	6809      	ldr	r1, [r1, #0]
 802e3d0:	1a40      	subs	r0, r0, r1
 802e3d2:	490c      	ldr	r1, [pc, #48]	@ (802e404 <_malloc_trim_r+0xa8>)
 802e3d4:	f043 0301 	orr.w	r3, r3, #1
 802e3d8:	6008      	str	r0, [r1, #0]
 802e3da:	6053      	str	r3, [r2, #4]
 802e3dc:	e7da      	b.n	802e394 <_malloc_trim_r+0x38>
 802e3de:	68bb      	ldr	r3, [r7, #8]
 802e3e0:	4a08      	ldr	r2, [pc, #32]	@ (802e404 <_malloc_trim_r+0xa8>)
 802e3e2:	1b2d      	subs	r5, r5, r4
 802e3e4:	f045 0501 	orr.w	r5, r5, #1
 802e3e8:	605d      	str	r5, [r3, #4]
 802e3ea:	6813      	ldr	r3, [r2, #0]
 802e3ec:	4630      	mov	r0, r6
 802e3ee:	1b1b      	subs	r3, r3, r4
 802e3f0:	6013      	str	r3, [r2, #0]
 802e3f2:	f005 ff0d 	bl	8034210 <__malloc_unlock>
 802e3f6:	2001      	movs	r0, #1
 802e3f8:	e7d0      	b.n	802e39c <_malloc_trim_r+0x40>
 802e3fa:	bf00      	nop
 802e3fc:	200002cc 	.word	0x200002cc
 802e400:	200002c4 	.word	0x200002c4
 802e404:	2001a29c 	.word	0x2001a29c

0802e408 <_free_r>:
 802e408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e40a:	4604      	mov	r4, r0
 802e40c:	460f      	mov	r7, r1
 802e40e:	2900      	cmp	r1, #0
 802e410:	f000 80b1 	beq.w	802e576 <_free_r+0x16e>
 802e414:	f005 fef6 	bl	8034204 <__malloc_lock>
 802e418:	f857 2c04 	ldr.w	r2, [r7, #-4]
 802e41c:	4d56      	ldr	r5, [pc, #344]	@ (802e578 <_free_r+0x170>)
 802e41e:	f022 0001 	bic.w	r0, r2, #1
 802e422:	f1a7 0308 	sub.w	r3, r7, #8
 802e426:	eb03 0c00 	add.w	ip, r3, r0
 802e42a:	68a9      	ldr	r1, [r5, #8]
 802e42c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802e430:	4561      	cmp	r1, ip
 802e432:	f026 0603 	bic.w	r6, r6, #3
 802e436:	f002 0201 	and.w	r2, r2, #1
 802e43a:	d11b      	bne.n	802e474 <_free_r+0x6c>
 802e43c:	4406      	add	r6, r0
 802e43e:	b93a      	cbnz	r2, 802e450 <_free_r+0x48>
 802e440:	f857 2c08 	ldr.w	r2, [r7, #-8]
 802e444:	1a9b      	subs	r3, r3, r2
 802e446:	4416      	add	r6, r2
 802e448:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 802e44c:	60ca      	str	r2, [r1, #12]
 802e44e:	6091      	str	r1, [r2, #8]
 802e450:	f046 0201 	orr.w	r2, r6, #1
 802e454:	605a      	str	r2, [r3, #4]
 802e456:	60ab      	str	r3, [r5, #8]
 802e458:	4b48      	ldr	r3, [pc, #288]	@ (802e57c <_free_r+0x174>)
 802e45a:	681b      	ldr	r3, [r3, #0]
 802e45c:	42b3      	cmp	r3, r6
 802e45e:	d804      	bhi.n	802e46a <_free_r+0x62>
 802e460:	4b47      	ldr	r3, [pc, #284]	@ (802e580 <_free_r+0x178>)
 802e462:	4620      	mov	r0, r4
 802e464:	6819      	ldr	r1, [r3, #0]
 802e466:	f7ff ff79 	bl	802e35c <_malloc_trim_r>
 802e46a:	4620      	mov	r0, r4
 802e46c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802e470:	f005 bece 	b.w	8034210 <__malloc_unlock>
 802e474:	f8cc 6004 	str.w	r6, [ip, #4]
 802e478:	2a00      	cmp	r2, #0
 802e47a:	d138      	bne.n	802e4ee <_free_r+0xe6>
 802e47c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 802e480:	1a5b      	subs	r3, r3, r1
 802e482:	4408      	add	r0, r1
 802e484:	6899      	ldr	r1, [r3, #8]
 802e486:	f105 0708 	add.w	r7, r5, #8
 802e48a:	42b9      	cmp	r1, r7
 802e48c:	d031      	beq.n	802e4f2 <_free_r+0xea>
 802e48e:	68df      	ldr	r7, [r3, #12]
 802e490:	60cf      	str	r7, [r1, #12]
 802e492:	60b9      	str	r1, [r7, #8]
 802e494:	eb0c 0106 	add.w	r1, ip, r6
 802e498:	6849      	ldr	r1, [r1, #4]
 802e49a:	07c9      	lsls	r1, r1, #31
 802e49c:	d40b      	bmi.n	802e4b6 <_free_r+0xae>
 802e49e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 802e4a2:	4430      	add	r0, r6
 802e4a4:	bb3a      	cbnz	r2, 802e4f6 <_free_r+0xee>
 802e4a6:	4e37      	ldr	r6, [pc, #220]	@ (802e584 <_free_r+0x17c>)
 802e4a8:	42b1      	cmp	r1, r6
 802e4aa:	d124      	bne.n	802e4f6 <_free_r+0xee>
 802e4ac:	e9c5 3304 	strd	r3, r3, [r5, #16]
 802e4b0:	e9c3 1102 	strd	r1, r1, [r3, #8]
 802e4b4:	2201      	movs	r2, #1
 802e4b6:	f040 0101 	orr.w	r1, r0, #1
 802e4ba:	6059      	str	r1, [r3, #4]
 802e4bc:	5018      	str	r0, [r3, r0]
 802e4be:	2a00      	cmp	r2, #0
 802e4c0:	d1d3      	bne.n	802e46a <_free_r+0x62>
 802e4c2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 802e4c6:	d21b      	bcs.n	802e500 <_free_r+0xf8>
 802e4c8:	08c2      	lsrs	r2, r0, #3
 802e4ca:	2101      	movs	r1, #1
 802e4cc:	0940      	lsrs	r0, r0, #5
 802e4ce:	4081      	lsls	r1, r0
 802e4d0:	6868      	ldr	r0, [r5, #4]
 802e4d2:	3201      	adds	r2, #1
 802e4d4:	4301      	orrs	r1, r0
 802e4d6:	6069      	str	r1, [r5, #4]
 802e4d8:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 802e4dc:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 802e4e0:	3908      	subs	r1, #8
 802e4e2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802e4e6:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 802e4ea:	60c3      	str	r3, [r0, #12]
 802e4ec:	e7bd      	b.n	802e46a <_free_r+0x62>
 802e4ee:	2200      	movs	r2, #0
 802e4f0:	e7d0      	b.n	802e494 <_free_r+0x8c>
 802e4f2:	2201      	movs	r2, #1
 802e4f4:	e7ce      	b.n	802e494 <_free_r+0x8c>
 802e4f6:	f8dc 600c 	ldr.w	r6, [ip, #12]
 802e4fa:	60ce      	str	r6, [r1, #12]
 802e4fc:	60b1      	str	r1, [r6, #8]
 802e4fe:	e7da      	b.n	802e4b6 <_free_r+0xae>
 802e500:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 802e504:	ea4f 2250 	mov.w	r2, r0, lsr #9
 802e508:	d214      	bcs.n	802e534 <_free_r+0x12c>
 802e50a:	0982      	lsrs	r2, r0, #6
 802e50c:	3238      	adds	r2, #56	@ 0x38
 802e50e:	1c51      	adds	r1, r2, #1
 802e510:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 802e514:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 802e518:	428e      	cmp	r6, r1
 802e51a:	d125      	bne.n	802e568 <_free_r+0x160>
 802e51c:	2001      	movs	r0, #1
 802e51e:	1092      	asrs	r2, r2, #2
 802e520:	fa00 f202 	lsl.w	r2, r0, r2
 802e524:	6868      	ldr	r0, [r5, #4]
 802e526:	4302      	orrs	r2, r0
 802e528:	606a      	str	r2, [r5, #4]
 802e52a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 802e52e:	60b3      	str	r3, [r6, #8]
 802e530:	60cb      	str	r3, [r1, #12]
 802e532:	e79a      	b.n	802e46a <_free_r+0x62>
 802e534:	2a14      	cmp	r2, #20
 802e536:	d801      	bhi.n	802e53c <_free_r+0x134>
 802e538:	325b      	adds	r2, #91	@ 0x5b
 802e53a:	e7e8      	b.n	802e50e <_free_r+0x106>
 802e53c:	2a54      	cmp	r2, #84	@ 0x54
 802e53e:	d802      	bhi.n	802e546 <_free_r+0x13e>
 802e540:	0b02      	lsrs	r2, r0, #12
 802e542:	326e      	adds	r2, #110	@ 0x6e
 802e544:	e7e3      	b.n	802e50e <_free_r+0x106>
 802e546:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802e54a:	d802      	bhi.n	802e552 <_free_r+0x14a>
 802e54c:	0bc2      	lsrs	r2, r0, #15
 802e54e:	3277      	adds	r2, #119	@ 0x77
 802e550:	e7dd      	b.n	802e50e <_free_r+0x106>
 802e552:	f240 5154 	movw	r1, #1364	@ 0x554
 802e556:	428a      	cmp	r2, r1
 802e558:	bf9a      	itte	ls
 802e55a:	0c82      	lsrls	r2, r0, #18
 802e55c:	327c      	addls	r2, #124	@ 0x7c
 802e55e:	227e      	movhi	r2, #126	@ 0x7e
 802e560:	e7d5      	b.n	802e50e <_free_r+0x106>
 802e562:	6889      	ldr	r1, [r1, #8]
 802e564:	428e      	cmp	r6, r1
 802e566:	d004      	beq.n	802e572 <_free_r+0x16a>
 802e568:	684a      	ldr	r2, [r1, #4]
 802e56a:	f022 0203 	bic.w	r2, r2, #3
 802e56e:	4282      	cmp	r2, r0
 802e570:	d8f7      	bhi.n	802e562 <_free_r+0x15a>
 802e572:	68ce      	ldr	r6, [r1, #12]
 802e574:	e7d9      	b.n	802e52a <_free_r+0x122>
 802e576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e578:	200002cc 	.word	0x200002cc
 802e57c:	200002c8 	.word	0x200002c8
 802e580:	2001a2cc 	.word	0x2001a2cc
 802e584:	200002d4 	.word	0x200002d4

0802e588 <_findenv_r>:
 802e588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e58c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 802e5fc <_findenv_r+0x74>
 802e590:	4606      	mov	r6, r0
 802e592:	4689      	mov	r9, r1
 802e594:	4617      	mov	r7, r2
 802e596:	f008 f91d 	bl	80367d4 <__env_lock>
 802e59a:	f8da 4000 	ldr.w	r4, [sl]
 802e59e:	b134      	cbz	r4, 802e5ae <_findenv_r+0x26>
 802e5a0:	464b      	mov	r3, r9
 802e5a2:	4698      	mov	r8, r3
 802e5a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e5a8:	b13a      	cbz	r2, 802e5ba <_findenv_r+0x32>
 802e5aa:	2a3d      	cmp	r2, #61	@ 0x3d
 802e5ac:	d1f9      	bne.n	802e5a2 <_findenv_r+0x1a>
 802e5ae:	4630      	mov	r0, r6
 802e5b0:	f008 f916 	bl	80367e0 <__env_unlock>
 802e5b4:	2000      	movs	r0, #0
 802e5b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e5ba:	eba8 0809 	sub.w	r8, r8, r9
 802e5be:	46a3      	mov	fp, r4
 802e5c0:	f854 0b04 	ldr.w	r0, [r4], #4
 802e5c4:	2800      	cmp	r0, #0
 802e5c6:	d0f2      	beq.n	802e5ae <_findenv_r+0x26>
 802e5c8:	4642      	mov	r2, r8
 802e5ca:	4649      	mov	r1, r9
 802e5cc:	f7fe f94d 	bl	802c86a <strncmp>
 802e5d0:	2800      	cmp	r0, #0
 802e5d2:	d1f4      	bne.n	802e5be <_findenv_r+0x36>
 802e5d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802e5d8:	eb03 0508 	add.w	r5, r3, r8
 802e5dc:	f813 3008 	ldrb.w	r3, [r3, r8]
 802e5e0:	2b3d      	cmp	r3, #61	@ 0x3d
 802e5e2:	d1ec      	bne.n	802e5be <_findenv_r+0x36>
 802e5e4:	f8da 3000 	ldr.w	r3, [sl]
 802e5e8:	ebab 0303 	sub.w	r3, fp, r3
 802e5ec:	109b      	asrs	r3, r3, #2
 802e5ee:	4630      	mov	r0, r6
 802e5f0:	603b      	str	r3, [r7, #0]
 802e5f2:	f008 f8f5 	bl	80367e0 <__env_unlock>
 802e5f6:	1c68      	adds	r0, r5, #1
 802e5f8:	e7dd      	b.n	802e5b6 <_findenv_r+0x2e>
 802e5fa:	bf00      	nop
 802e5fc:	20000014 	.word	0x20000014

0802e600 <_getenv_r>:
 802e600:	b507      	push	{r0, r1, r2, lr}
 802e602:	aa01      	add	r2, sp, #4
 802e604:	f7ff ffc0 	bl	802e588 <_findenv_r>
 802e608:	b003      	add	sp, #12
 802e60a:	f85d fb04 	ldr.w	pc, [sp], #4

0802e60e <labs>:
 802e60e:	2800      	cmp	r0, #0
 802e610:	bfb8      	it	lt
 802e612:	4240      	neglt	r0, r0
 802e614:	4770      	bx	lr
	...

0802e618 <malloc>:
 802e618:	4b02      	ldr	r3, [pc, #8]	@ (802e624 <malloc+0xc>)
 802e61a:	4601      	mov	r1, r0
 802e61c:	6818      	ldr	r0, [r3, #0]
 802e61e:	f000 b80b 	b.w	802e638 <_malloc_r>
 802e622:	bf00      	nop
 802e624:	2000017c 	.word	0x2000017c

0802e628 <free>:
 802e628:	4b02      	ldr	r3, [pc, #8]	@ (802e634 <free+0xc>)
 802e62a:	4601      	mov	r1, r0
 802e62c:	6818      	ldr	r0, [r3, #0]
 802e62e:	f7ff beeb 	b.w	802e408 <_free_r>
 802e632:	bf00      	nop
 802e634:	2000017c 	.word	0x2000017c

0802e638 <_malloc_r>:
 802e638:	f101 030b 	add.w	r3, r1, #11
 802e63c:	2b16      	cmp	r3, #22
 802e63e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e642:	4605      	mov	r5, r0
 802e644:	d906      	bls.n	802e654 <_malloc_r+0x1c>
 802e646:	f033 0707 	bics.w	r7, r3, #7
 802e64a:	d504      	bpl.n	802e656 <_malloc_r+0x1e>
 802e64c:	230c      	movs	r3, #12
 802e64e:	602b      	str	r3, [r5, #0]
 802e650:	2400      	movs	r4, #0
 802e652:	e1a3      	b.n	802e99c <_malloc_r+0x364>
 802e654:	2710      	movs	r7, #16
 802e656:	42b9      	cmp	r1, r7
 802e658:	d8f8      	bhi.n	802e64c <_malloc_r+0x14>
 802e65a:	4628      	mov	r0, r5
 802e65c:	f005 fdd2 	bl	8034204 <__malloc_lock>
 802e660:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 802e664:	4eaf      	ldr	r6, [pc, #700]	@ (802e924 <_malloc_r+0x2ec>)
 802e666:	d237      	bcs.n	802e6d8 <_malloc_r+0xa0>
 802e668:	f107 0208 	add.w	r2, r7, #8
 802e66c:	4432      	add	r2, r6
 802e66e:	f1a2 0108 	sub.w	r1, r2, #8
 802e672:	6854      	ldr	r4, [r2, #4]
 802e674:	428c      	cmp	r4, r1
 802e676:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 802e67a:	d102      	bne.n	802e682 <_malloc_r+0x4a>
 802e67c:	68d4      	ldr	r4, [r2, #12]
 802e67e:	42a2      	cmp	r2, r4
 802e680:	d010      	beq.n	802e6a4 <_malloc_r+0x6c>
 802e682:	6863      	ldr	r3, [r4, #4]
 802e684:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 802e688:	f023 0303 	bic.w	r3, r3, #3
 802e68c:	60ca      	str	r2, [r1, #12]
 802e68e:	4423      	add	r3, r4
 802e690:	6091      	str	r1, [r2, #8]
 802e692:	685a      	ldr	r2, [r3, #4]
 802e694:	f042 0201 	orr.w	r2, r2, #1
 802e698:	605a      	str	r2, [r3, #4]
 802e69a:	4628      	mov	r0, r5
 802e69c:	f005 fdb8 	bl	8034210 <__malloc_unlock>
 802e6a0:	3408      	adds	r4, #8
 802e6a2:	e17b      	b.n	802e99c <_malloc_r+0x364>
 802e6a4:	3302      	adds	r3, #2
 802e6a6:	6934      	ldr	r4, [r6, #16]
 802e6a8:	499f      	ldr	r1, [pc, #636]	@ (802e928 <_malloc_r+0x2f0>)
 802e6aa:	428c      	cmp	r4, r1
 802e6ac:	d077      	beq.n	802e79e <_malloc_r+0x166>
 802e6ae:	6862      	ldr	r2, [r4, #4]
 802e6b0:	f022 0c03 	bic.w	ip, r2, #3
 802e6b4:	ebac 0007 	sub.w	r0, ip, r7
 802e6b8:	280f      	cmp	r0, #15
 802e6ba:	dd48      	ble.n	802e74e <_malloc_r+0x116>
 802e6bc:	19e2      	adds	r2, r4, r7
 802e6be:	f040 0301 	orr.w	r3, r0, #1
 802e6c2:	f047 0701 	orr.w	r7, r7, #1
 802e6c6:	6067      	str	r7, [r4, #4]
 802e6c8:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802e6cc:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802e6d0:	6053      	str	r3, [r2, #4]
 802e6d2:	f844 000c 	str.w	r0, [r4, ip]
 802e6d6:	e7e0      	b.n	802e69a <_malloc_r+0x62>
 802e6d8:	0a7b      	lsrs	r3, r7, #9
 802e6da:	d02a      	beq.n	802e732 <_malloc_r+0xfa>
 802e6dc:	2b04      	cmp	r3, #4
 802e6de:	d812      	bhi.n	802e706 <_malloc_r+0xce>
 802e6e0:	09bb      	lsrs	r3, r7, #6
 802e6e2:	3338      	adds	r3, #56	@ 0x38
 802e6e4:	1c5a      	adds	r2, r3, #1
 802e6e6:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 802e6ea:	f1a2 0c08 	sub.w	ip, r2, #8
 802e6ee:	6854      	ldr	r4, [r2, #4]
 802e6f0:	4564      	cmp	r4, ip
 802e6f2:	d006      	beq.n	802e702 <_malloc_r+0xca>
 802e6f4:	6862      	ldr	r2, [r4, #4]
 802e6f6:	f022 0203 	bic.w	r2, r2, #3
 802e6fa:	1bd0      	subs	r0, r2, r7
 802e6fc:	280f      	cmp	r0, #15
 802e6fe:	dd1c      	ble.n	802e73a <_malloc_r+0x102>
 802e700:	3b01      	subs	r3, #1
 802e702:	3301      	adds	r3, #1
 802e704:	e7cf      	b.n	802e6a6 <_malloc_r+0x6e>
 802e706:	2b14      	cmp	r3, #20
 802e708:	d801      	bhi.n	802e70e <_malloc_r+0xd6>
 802e70a:	335b      	adds	r3, #91	@ 0x5b
 802e70c:	e7ea      	b.n	802e6e4 <_malloc_r+0xac>
 802e70e:	2b54      	cmp	r3, #84	@ 0x54
 802e710:	d802      	bhi.n	802e718 <_malloc_r+0xe0>
 802e712:	0b3b      	lsrs	r3, r7, #12
 802e714:	336e      	adds	r3, #110	@ 0x6e
 802e716:	e7e5      	b.n	802e6e4 <_malloc_r+0xac>
 802e718:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 802e71c:	d802      	bhi.n	802e724 <_malloc_r+0xec>
 802e71e:	0bfb      	lsrs	r3, r7, #15
 802e720:	3377      	adds	r3, #119	@ 0x77
 802e722:	e7df      	b.n	802e6e4 <_malloc_r+0xac>
 802e724:	f240 5254 	movw	r2, #1364	@ 0x554
 802e728:	4293      	cmp	r3, r2
 802e72a:	d804      	bhi.n	802e736 <_malloc_r+0xfe>
 802e72c:	0cbb      	lsrs	r3, r7, #18
 802e72e:	337c      	adds	r3, #124	@ 0x7c
 802e730:	e7d8      	b.n	802e6e4 <_malloc_r+0xac>
 802e732:	233f      	movs	r3, #63	@ 0x3f
 802e734:	e7d6      	b.n	802e6e4 <_malloc_r+0xac>
 802e736:	237e      	movs	r3, #126	@ 0x7e
 802e738:	e7d4      	b.n	802e6e4 <_malloc_r+0xac>
 802e73a:	2800      	cmp	r0, #0
 802e73c:	68e1      	ldr	r1, [r4, #12]
 802e73e:	db04      	blt.n	802e74a <_malloc_r+0x112>
 802e740:	68a3      	ldr	r3, [r4, #8]
 802e742:	60d9      	str	r1, [r3, #12]
 802e744:	608b      	str	r3, [r1, #8]
 802e746:	18a3      	adds	r3, r4, r2
 802e748:	e7a3      	b.n	802e692 <_malloc_r+0x5a>
 802e74a:	460c      	mov	r4, r1
 802e74c:	e7d0      	b.n	802e6f0 <_malloc_r+0xb8>
 802e74e:	2800      	cmp	r0, #0
 802e750:	e9c6 1104 	strd	r1, r1, [r6, #16]
 802e754:	db07      	blt.n	802e766 <_malloc_r+0x12e>
 802e756:	44a4      	add	ip, r4
 802e758:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802e75c:	f043 0301 	orr.w	r3, r3, #1
 802e760:	f8cc 3004 	str.w	r3, [ip, #4]
 802e764:	e799      	b.n	802e69a <_malloc_r+0x62>
 802e766:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 802e76a:	6870      	ldr	r0, [r6, #4]
 802e76c:	f080 8095 	bcs.w	802e89a <_malloc_r+0x262>
 802e770:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 802e774:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 802e778:	f04f 0c01 	mov.w	ip, #1
 802e77c:	3201      	adds	r2, #1
 802e77e:	fa0c fc0e 	lsl.w	ip, ip, lr
 802e782:	ea4c 0000 	orr.w	r0, ip, r0
 802e786:	6070      	str	r0, [r6, #4]
 802e788:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 802e78c:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 802e790:	3808      	subs	r0, #8
 802e792:	e9c4 c002 	strd	ip, r0, [r4, #8]
 802e796:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 802e79a:	f8cc 400c 	str.w	r4, [ip, #12]
 802e79e:	1098      	asrs	r0, r3, #2
 802e7a0:	2201      	movs	r2, #1
 802e7a2:	4082      	lsls	r2, r0
 802e7a4:	6870      	ldr	r0, [r6, #4]
 802e7a6:	4290      	cmp	r0, r2
 802e7a8:	d326      	bcc.n	802e7f8 <_malloc_r+0x1c0>
 802e7aa:	4210      	tst	r0, r2
 802e7ac:	d106      	bne.n	802e7bc <_malloc_r+0x184>
 802e7ae:	f023 0303 	bic.w	r3, r3, #3
 802e7b2:	0052      	lsls	r2, r2, #1
 802e7b4:	4210      	tst	r0, r2
 802e7b6:	f103 0304 	add.w	r3, r3, #4
 802e7ba:	d0fa      	beq.n	802e7b2 <_malloc_r+0x17a>
 802e7bc:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 802e7c0:	46c1      	mov	r9, r8
 802e7c2:	469e      	mov	lr, r3
 802e7c4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 802e7c8:	454c      	cmp	r4, r9
 802e7ca:	f040 80b9 	bne.w	802e940 <_malloc_r+0x308>
 802e7ce:	f10e 0e01 	add.w	lr, lr, #1
 802e7d2:	f01e 0f03 	tst.w	lr, #3
 802e7d6:	f109 0908 	add.w	r9, r9, #8
 802e7da:	d1f3      	bne.n	802e7c4 <_malloc_r+0x18c>
 802e7dc:	0798      	lsls	r0, r3, #30
 802e7de:	f040 80e3 	bne.w	802e9a8 <_malloc_r+0x370>
 802e7e2:	6873      	ldr	r3, [r6, #4]
 802e7e4:	ea23 0302 	bic.w	r3, r3, r2
 802e7e8:	6073      	str	r3, [r6, #4]
 802e7ea:	6870      	ldr	r0, [r6, #4]
 802e7ec:	0052      	lsls	r2, r2, #1
 802e7ee:	4290      	cmp	r0, r2
 802e7f0:	d302      	bcc.n	802e7f8 <_malloc_r+0x1c0>
 802e7f2:	2a00      	cmp	r2, #0
 802e7f4:	f040 80e5 	bne.w	802e9c2 <_malloc_r+0x38a>
 802e7f8:	f8d6 a008 	ldr.w	sl, [r6, #8]
 802e7fc:	f8da 3004 	ldr.w	r3, [sl, #4]
 802e800:	f023 0903 	bic.w	r9, r3, #3
 802e804:	45b9      	cmp	r9, r7
 802e806:	d304      	bcc.n	802e812 <_malloc_r+0x1da>
 802e808:	eba9 0207 	sub.w	r2, r9, r7
 802e80c:	2a0f      	cmp	r2, #15
 802e80e:	f300 8141 	bgt.w	802ea94 <_malloc_r+0x45c>
 802e812:	4b46      	ldr	r3, [pc, #280]	@ (802e92c <_malloc_r+0x2f4>)
 802e814:	6819      	ldr	r1, [r3, #0]
 802e816:	3110      	adds	r1, #16
 802e818:	4439      	add	r1, r7
 802e81a:	2008      	movs	r0, #8
 802e81c:	9101      	str	r1, [sp, #4]
 802e81e:	f007 f8cd 	bl	80359bc <sysconf>
 802e822:	4a43      	ldr	r2, [pc, #268]	@ (802e930 <_malloc_r+0x2f8>)
 802e824:	9901      	ldr	r1, [sp, #4]
 802e826:	6813      	ldr	r3, [r2, #0]
 802e828:	3301      	adds	r3, #1
 802e82a:	bf1f      	itttt	ne
 802e82c:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 802e830:	1809      	addne	r1, r1, r0
 802e832:	4243      	negne	r3, r0
 802e834:	4019      	andne	r1, r3
 802e836:	4680      	mov	r8, r0
 802e838:	4628      	mov	r0, r5
 802e83a:	9101      	str	r1, [sp, #4]
 802e83c:	f007 f816 	bl	803586c <_sbrk_r>
 802e840:	1c42      	adds	r2, r0, #1
 802e842:	eb0a 0b09 	add.w	fp, sl, r9
 802e846:	4604      	mov	r4, r0
 802e848:	f000 80f7 	beq.w	802ea3a <_malloc_r+0x402>
 802e84c:	4583      	cmp	fp, r0
 802e84e:	9901      	ldr	r1, [sp, #4]
 802e850:	4a37      	ldr	r2, [pc, #220]	@ (802e930 <_malloc_r+0x2f8>)
 802e852:	d902      	bls.n	802e85a <_malloc_r+0x222>
 802e854:	45b2      	cmp	sl, r6
 802e856:	f040 80f0 	bne.w	802ea3a <_malloc_r+0x402>
 802e85a:	4b36      	ldr	r3, [pc, #216]	@ (802e934 <_malloc_r+0x2fc>)
 802e85c:	6818      	ldr	r0, [r3, #0]
 802e85e:	45a3      	cmp	fp, r4
 802e860:	eb00 0e01 	add.w	lr, r0, r1
 802e864:	f8c3 e000 	str.w	lr, [r3]
 802e868:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 802e86c:	f040 80ab 	bne.w	802e9c6 <_malloc_r+0x38e>
 802e870:	ea1b 0f0c 	tst.w	fp, ip
 802e874:	f040 80a7 	bne.w	802e9c6 <_malloc_r+0x38e>
 802e878:	68b2      	ldr	r2, [r6, #8]
 802e87a:	4449      	add	r1, r9
 802e87c:	f041 0101 	orr.w	r1, r1, #1
 802e880:	6051      	str	r1, [r2, #4]
 802e882:	4a2d      	ldr	r2, [pc, #180]	@ (802e938 <_malloc_r+0x300>)
 802e884:	681b      	ldr	r3, [r3, #0]
 802e886:	6811      	ldr	r1, [r2, #0]
 802e888:	428b      	cmp	r3, r1
 802e88a:	bf88      	it	hi
 802e88c:	6013      	strhi	r3, [r2, #0]
 802e88e:	4a2b      	ldr	r2, [pc, #172]	@ (802e93c <_malloc_r+0x304>)
 802e890:	6811      	ldr	r1, [r2, #0]
 802e892:	428b      	cmp	r3, r1
 802e894:	bf88      	it	hi
 802e896:	6013      	strhi	r3, [r2, #0]
 802e898:	e0cf      	b.n	802ea3a <_malloc_r+0x402>
 802e89a:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 802e89e:	ea4f 225c 	mov.w	r2, ip, lsr #9
 802e8a2:	d218      	bcs.n	802e8d6 <_malloc_r+0x29e>
 802e8a4:	ea4f 129c 	mov.w	r2, ip, lsr #6
 802e8a8:	3238      	adds	r2, #56	@ 0x38
 802e8aa:	f102 0e01 	add.w	lr, r2, #1
 802e8ae:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 802e8b2:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 802e8b6:	45f0      	cmp	r8, lr
 802e8b8:	d12b      	bne.n	802e912 <_malloc_r+0x2da>
 802e8ba:	1092      	asrs	r2, r2, #2
 802e8bc:	f04f 0c01 	mov.w	ip, #1
 802e8c0:	fa0c f202 	lsl.w	r2, ip, r2
 802e8c4:	4302      	orrs	r2, r0
 802e8c6:	6072      	str	r2, [r6, #4]
 802e8c8:	e9c4 e802 	strd	lr, r8, [r4, #8]
 802e8cc:	f8c8 4008 	str.w	r4, [r8, #8]
 802e8d0:	f8ce 400c 	str.w	r4, [lr, #12]
 802e8d4:	e763      	b.n	802e79e <_malloc_r+0x166>
 802e8d6:	2a14      	cmp	r2, #20
 802e8d8:	d801      	bhi.n	802e8de <_malloc_r+0x2a6>
 802e8da:	325b      	adds	r2, #91	@ 0x5b
 802e8dc:	e7e5      	b.n	802e8aa <_malloc_r+0x272>
 802e8de:	2a54      	cmp	r2, #84	@ 0x54
 802e8e0:	d803      	bhi.n	802e8ea <_malloc_r+0x2b2>
 802e8e2:	ea4f 321c 	mov.w	r2, ip, lsr #12
 802e8e6:	326e      	adds	r2, #110	@ 0x6e
 802e8e8:	e7df      	b.n	802e8aa <_malloc_r+0x272>
 802e8ea:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802e8ee:	d803      	bhi.n	802e8f8 <_malloc_r+0x2c0>
 802e8f0:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 802e8f4:	3277      	adds	r2, #119	@ 0x77
 802e8f6:	e7d8      	b.n	802e8aa <_malloc_r+0x272>
 802e8f8:	f240 5e54 	movw	lr, #1364	@ 0x554
 802e8fc:	4572      	cmp	r2, lr
 802e8fe:	bf9a      	itte	ls
 802e900:	ea4f 429c 	movls.w	r2, ip, lsr #18
 802e904:	327c      	addls	r2, #124	@ 0x7c
 802e906:	227e      	movhi	r2, #126	@ 0x7e
 802e908:	e7cf      	b.n	802e8aa <_malloc_r+0x272>
 802e90a:	f8de e008 	ldr.w	lr, [lr, #8]
 802e90e:	45f0      	cmp	r8, lr
 802e910:	d005      	beq.n	802e91e <_malloc_r+0x2e6>
 802e912:	f8de 2004 	ldr.w	r2, [lr, #4]
 802e916:	f022 0203 	bic.w	r2, r2, #3
 802e91a:	4562      	cmp	r2, ip
 802e91c:	d8f5      	bhi.n	802e90a <_malloc_r+0x2d2>
 802e91e:	f8de 800c 	ldr.w	r8, [lr, #12]
 802e922:	e7d1      	b.n	802e8c8 <_malloc_r+0x290>
 802e924:	200002cc 	.word	0x200002cc
 802e928:	200002d4 	.word	0x200002d4
 802e92c:	2001a2cc 	.word	0x2001a2cc
 802e930:	200002c4 	.word	0x200002c4
 802e934:	2001a29c 	.word	0x2001a29c
 802e938:	2001a2c8 	.word	0x2001a2c8
 802e93c:	2001a2c4 	.word	0x2001a2c4
 802e940:	6860      	ldr	r0, [r4, #4]
 802e942:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802e946:	f020 0003 	bic.w	r0, r0, #3
 802e94a:	eba0 0a07 	sub.w	sl, r0, r7
 802e94e:	f1ba 0f0f 	cmp.w	sl, #15
 802e952:	dd12      	ble.n	802e97a <_malloc_r+0x342>
 802e954:	68a3      	ldr	r3, [r4, #8]
 802e956:	19e2      	adds	r2, r4, r7
 802e958:	f047 0701 	orr.w	r7, r7, #1
 802e95c:	6067      	str	r7, [r4, #4]
 802e95e:	f8c3 c00c 	str.w	ip, [r3, #12]
 802e962:	f8cc 3008 	str.w	r3, [ip, #8]
 802e966:	f04a 0301 	orr.w	r3, sl, #1
 802e96a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802e96e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802e972:	6053      	str	r3, [r2, #4]
 802e974:	f844 a000 	str.w	sl, [r4, r0]
 802e978:	e68f      	b.n	802e69a <_malloc_r+0x62>
 802e97a:	f1ba 0f00 	cmp.w	sl, #0
 802e97e:	db11      	blt.n	802e9a4 <_malloc_r+0x36c>
 802e980:	4420      	add	r0, r4
 802e982:	6843      	ldr	r3, [r0, #4]
 802e984:	f043 0301 	orr.w	r3, r3, #1
 802e988:	6043      	str	r3, [r0, #4]
 802e98a:	f854 3f08 	ldr.w	r3, [r4, #8]!
 802e98e:	4628      	mov	r0, r5
 802e990:	f8c3 c00c 	str.w	ip, [r3, #12]
 802e994:	f8cc 3008 	str.w	r3, [ip, #8]
 802e998:	f005 fc3a 	bl	8034210 <__malloc_unlock>
 802e99c:	4620      	mov	r0, r4
 802e99e:	b003      	add	sp, #12
 802e9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e9a4:	4664      	mov	r4, ip
 802e9a6:	e70f      	b.n	802e7c8 <_malloc_r+0x190>
 802e9a8:	f858 0908 	ldr.w	r0, [r8], #-8
 802e9ac:	4540      	cmp	r0, r8
 802e9ae:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 802e9b2:	f43f af13 	beq.w	802e7dc <_malloc_r+0x1a4>
 802e9b6:	e718      	b.n	802e7ea <_malloc_r+0x1b2>
 802e9b8:	3304      	adds	r3, #4
 802e9ba:	0052      	lsls	r2, r2, #1
 802e9bc:	4210      	tst	r0, r2
 802e9be:	d0fb      	beq.n	802e9b8 <_malloc_r+0x380>
 802e9c0:	e6fc      	b.n	802e7bc <_malloc_r+0x184>
 802e9c2:	4673      	mov	r3, lr
 802e9c4:	e7fa      	b.n	802e9bc <_malloc_r+0x384>
 802e9c6:	6810      	ldr	r0, [r2, #0]
 802e9c8:	3001      	adds	r0, #1
 802e9ca:	bf1b      	ittet	ne
 802e9cc:	eba4 0b0b 	subne.w	fp, r4, fp
 802e9d0:	eb0b 020e 	addne.w	r2, fp, lr
 802e9d4:	6014      	streq	r4, [r2, #0]
 802e9d6:	601a      	strne	r2, [r3, #0]
 802e9d8:	f014 0b07 	ands.w	fp, r4, #7
 802e9dc:	bf1a      	itte	ne
 802e9de:	f1cb 0008 	rsbne	r0, fp, #8
 802e9e2:	1824      	addne	r4, r4, r0
 802e9e4:	4658      	moveq	r0, fp
 802e9e6:	1862      	adds	r2, r4, r1
 802e9e8:	ea02 010c 	and.w	r1, r2, ip
 802e9ec:	4480      	add	r8, r0
 802e9ee:	eba8 0801 	sub.w	r8, r8, r1
 802e9f2:	ea08 080c 	and.w	r8, r8, ip
 802e9f6:	4641      	mov	r1, r8
 802e9f8:	4628      	mov	r0, r5
 802e9fa:	9201      	str	r2, [sp, #4]
 802e9fc:	f006 ff36 	bl	803586c <_sbrk_r>
 802ea00:	1c43      	adds	r3, r0, #1
 802ea02:	9a01      	ldr	r2, [sp, #4]
 802ea04:	4b28      	ldr	r3, [pc, #160]	@ (802eaa8 <_malloc_r+0x470>)
 802ea06:	d107      	bne.n	802ea18 <_malloc_r+0x3e0>
 802ea08:	f1bb 0f00 	cmp.w	fp, #0
 802ea0c:	d023      	beq.n	802ea56 <_malloc_r+0x41e>
 802ea0e:	f1ab 0008 	sub.w	r0, fp, #8
 802ea12:	4410      	add	r0, r2
 802ea14:	f04f 0800 	mov.w	r8, #0
 802ea18:	681a      	ldr	r2, [r3, #0]
 802ea1a:	60b4      	str	r4, [r6, #8]
 802ea1c:	1b00      	subs	r0, r0, r4
 802ea1e:	4440      	add	r0, r8
 802ea20:	4442      	add	r2, r8
 802ea22:	f040 0001 	orr.w	r0, r0, #1
 802ea26:	45b2      	cmp	sl, r6
 802ea28:	601a      	str	r2, [r3, #0]
 802ea2a:	6060      	str	r0, [r4, #4]
 802ea2c:	f43f af29 	beq.w	802e882 <_malloc_r+0x24a>
 802ea30:	f1b9 0f0f 	cmp.w	r9, #15
 802ea34:	d812      	bhi.n	802ea5c <_malloc_r+0x424>
 802ea36:	2301      	movs	r3, #1
 802ea38:	6063      	str	r3, [r4, #4]
 802ea3a:	68b3      	ldr	r3, [r6, #8]
 802ea3c:	685b      	ldr	r3, [r3, #4]
 802ea3e:	f023 0303 	bic.w	r3, r3, #3
 802ea42:	42bb      	cmp	r3, r7
 802ea44:	eba3 0207 	sub.w	r2, r3, r7
 802ea48:	d301      	bcc.n	802ea4e <_malloc_r+0x416>
 802ea4a:	2a0f      	cmp	r2, #15
 802ea4c:	dc22      	bgt.n	802ea94 <_malloc_r+0x45c>
 802ea4e:	4628      	mov	r0, r5
 802ea50:	f005 fbde 	bl	8034210 <__malloc_unlock>
 802ea54:	e5fc      	b.n	802e650 <_malloc_r+0x18>
 802ea56:	4610      	mov	r0, r2
 802ea58:	46d8      	mov	r8, fp
 802ea5a:	e7dd      	b.n	802ea18 <_malloc_r+0x3e0>
 802ea5c:	f8da 2004 	ldr.w	r2, [sl, #4]
 802ea60:	f1a9 090c 	sub.w	r9, r9, #12
 802ea64:	f029 0907 	bic.w	r9, r9, #7
 802ea68:	f002 0201 	and.w	r2, r2, #1
 802ea6c:	ea42 0209 	orr.w	r2, r2, r9
 802ea70:	f8ca 2004 	str.w	r2, [sl, #4]
 802ea74:	2105      	movs	r1, #5
 802ea76:	eb0a 0209 	add.w	r2, sl, r9
 802ea7a:	f1b9 0f0f 	cmp.w	r9, #15
 802ea7e:	e9c2 1101 	strd	r1, r1, [r2, #4]
 802ea82:	f67f aefe 	bls.w	802e882 <_malloc_r+0x24a>
 802ea86:	f10a 0108 	add.w	r1, sl, #8
 802ea8a:	4628      	mov	r0, r5
 802ea8c:	f7ff fcbc 	bl	802e408 <_free_r>
 802ea90:	4b05      	ldr	r3, [pc, #20]	@ (802eaa8 <_malloc_r+0x470>)
 802ea92:	e6f6      	b.n	802e882 <_malloc_r+0x24a>
 802ea94:	68b4      	ldr	r4, [r6, #8]
 802ea96:	f047 0301 	orr.w	r3, r7, #1
 802ea9a:	4427      	add	r7, r4
 802ea9c:	f042 0201 	orr.w	r2, r2, #1
 802eaa0:	6063      	str	r3, [r4, #4]
 802eaa2:	60b7      	str	r7, [r6, #8]
 802eaa4:	607a      	str	r2, [r7, #4]
 802eaa6:	e5f8      	b.n	802e69a <_malloc_r+0x62>
 802eaa8:	2001a29c 	.word	0x2001a29c

0802eaac <siscanf>:
 802eaac:	b40e      	push	{r1, r2, r3}
 802eaae:	b570      	push	{r4, r5, r6, lr}
 802eab0:	b09d      	sub	sp, #116	@ 0x74
 802eab2:	ac21      	add	r4, sp, #132	@ 0x84
 802eab4:	2500      	movs	r5, #0
 802eab6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802eaba:	f854 6b04 	ldr.w	r6, [r4], #4
 802eabe:	f8ad 2014 	strh.w	r2, [sp, #20]
 802eac2:	951b      	str	r5, [sp, #108]	@ 0x6c
 802eac4:	9002      	str	r0, [sp, #8]
 802eac6:	9006      	str	r0, [sp, #24]
 802eac8:	f7e1 fbea 	bl	80102a0 <strlen>
 802eacc:	4b0b      	ldr	r3, [pc, #44]	@ (802eafc <siscanf+0x50>)
 802eace:	9003      	str	r0, [sp, #12]
 802ead0:	9007      	str	r0, [sp, #28]
 802ead2:	480b      	ldr	r0, [pc, #44]	@ (802eb00 <siscanf+0x54>)
 802ead4:	930a      	str	r3, [sp, #40]	@ 0x28
 802ead6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802eada:	f8ad 3016 	strh.w	r3, [sp, #22]
 802eade:	4632      	mov	r2, r6
 802eae0:	4623      	mov	r3, r4
 802eae2:	a902      	add	r1, sp, #8
 802eae4:	6800      	ldr	r0, [r0, #0]
 802eae6:	950e      	str	r5, [sp, #56]	@ 0x38
 802eae8:	9513      	str	r5, [sp, #76]	@ 0x4c
 802eaea:	9401      	str	r4, [sp, #4]
 802eaec:	f000 fd1e 	bl	802f52c <__ssvfiscanf_r>
 802eaf0:	b01d      	add	sp, #116	@ 0x74
 802eaf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802eaf6:	b003      	add	sp, #12
 802eaf8:	4770      	bx	lr
 802eafa:	bf00      	nop
 802eafc:	0802c4d7 	.word	0x0802c4d7
 802eb00:	2000017c 	.word	0x2000017c

0802eb04 <sniprintf>:
 802eb04:	b40c      	push	{r2, r3}
 802eb06:	b530      	push	{r4, r5, lr}
 802eb08:	4b18      	ldr	r3, [pc, #96]	@ (802eb6c <sniprintf+0x68>)
 802eb0a:	1e0c      	subs	r4, r1, #0
 802eb0c:	681d      	ldr	r5, [r3, #0]
 802eb0e:	b09d      	sub	sp, #116	@ 0x74
 802eb10:	da08      	bge.n	802eb24 <sniprintf+0x20>
 802eb12:	238b      	movs	r3, #139	@ 0x8b
 802eb14:	602b      	str	r3, [r5, #0]
 802eb16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802eb1a:	b01d      	add	sp, #116	@ 0x74
 802eb1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802eb20:	b002      	add	sp, #8
 802eb22:	4770      	bx	lr
 802eb24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802eb28:	f8ad 3014 	strh.w	r3, [sp, #20]
 802eb2c:	f04f 0300 	mov.w	r3, #0
 802eb30:	931b      	str	r3, [sp, #108]	@ 0x6c
 802eb32:	bf14      	ite	ne
 802eb34:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802eb38:	4623      	moveq	r3, r4
 802eb3a:	9304      	str	r3, [sp, #16]
 802eb3c:	9307      	str	r3, [sp, #28]
 802eb3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802eb42:	9002      	str	r0, [sp, #8]
 802eb44:	9006      	str	r0, [sp, #24]
 802eb46:	f8ad 3016 	strh.w	r3, [sp, #22]
 802eb4a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802eb4c:	ab21      	add	r3, sp, #132	@ 0x84
 802eb4e:	a902      	add	r1, sp, #8
 802eb50:	4628      	mov	r0, r5
 802eb52:	9301      	str	r3, [sp, #4]
 802eb54:	f000 f80c 	bl	802eb70 <_svfiprintf_r>
 802eb58:	1c43      	adds	r3, r0, #1
 802eb5a:	bfbc      	itt	lt
 802eb5c:	238b      	movlt	r3, #139	@ 0x8b
 802eb5e:	602b      	strlt	r3, [r5, #0]
 802eb60:	2c00      	cmp	r4, #0
 802eb62:	d0da      	beq.n	802eb1a <sniprintf+0x16>
 802eb64:	9b02      	ldr	r3, [sp, #8]
 802eb66:	2200      	movs	r2, #0
 802eb68:	701a      	strb	r2, [r3, #0]
 802eb6a:	e7d6      	b.n	802eb1a <sniprintf+0x16>
 802eb6c:	2000017c 	.word	0x2000017c

0802eb70 <_svfiprintf_r>:
 802eb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802eb74:	461d      	mov	r5, r3
 802eb76:	b0bb      	sub	sp, #236	@ 0xec
 802eb78:	898b      	ldrh	r3, [r1, #12]
 802eb7a:	9200      	str	r2, [sp, #0]
 802eb7c:	061a      	lsls	r2, r3, #24
 802eb7e:	9001      	str	r0, [sp, #4]
 802eb80:	468b      	mov	fp, r1
 802eb82:	d513      	bpl.n	802ebac <_svfiprintf_r+0x3c>
 802eb84:	690b      	ldr	r3, [r1, #16]
 802eb86:	b98b      	cbnz	r3, 802ebac <_svfiprintf_r+0x3c>
 802eb88:	2140      	movs	r1, #64	@ 0x40
 802eb8a:	f7ff fd55 	bl	802e638 <_malloc_r>
 802eb8e:	f8cb 0000 	str.w	r0, [fp]
 802eb92:	f8cb 0010 	str.w	r0, [fp, #16]
 802eb96:	b930      	cbnz	r0, 802eba6 <_svfiprintf_r+0x36>
 802eb98:	9a01      	ldr	r2, [sp, #4]
 802eb9a:	230c      	movs	r3, #12
 802eb9c:	6013      	str	r3, [r2, #0]
 802eb9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802eba2:	9304      	str	r3, [sp, #16]
 802eba4:	e3de      	b.n	802f364 <_svfiprintf_r+0x7f4>
 802eba6:	2340      	movs	r3, #64	@ 0x40
 802eba8:	f8cb 3014 	str.w	r3, [fp, #20]
 802ebac:	2300      	movs	r3, #0
 802ebae:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802ebb2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802ebb6:	e9cd 3307 	strd	r3, r3, [sp, #28]
 802ebba:	ae11      	add	r6, sp, #68	@ 0x44
 802ebbc:	960e      	str	r6, [sp, #56]	@ 0x38
 802ebbe:	9304      	str	r3, [sp, #16]
 802ebc0:	9b00      	ldr	r3, [sp, #0]
 802ebc2:	461c      	mov	r4, r3
 802ebc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ebc8:	b10a      	cbz	r2, 802ebce <_svfiprintf_r+0x5e>
 802ebca:	2a25      	cmp	r2, #37	@ 0x25
 802ebcc:	d1f9      	bne.n	802ebc2 <_svfiprintf_r+0x52>
 802ebce:	9b00      	ldr	r3, [sp, #0]
 802ebd0:	1ae7      	subs	r7, r4, r3
 802ebd2:	d00d      	beq.n	802ebf0 <_svfiprintf_r+0x80>
 802ebd4:	e9c6 3700 	strd	r3, r7, [r6]
 802ebd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ebda:	443b      	add	r3, r7
 802ebdc:	9310      	str	r3, [sp, #64]	@ 0x40
 802ebde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ebe0:	3301      	adds	r3, #1
 802ebe2:	2b07      	cmp	r3, #7
 802ebe4:	930f      	str	r3, [sp, #60]	@ 0x3c
 802ebe6:	dc76      	bgt.n	802ecd6 <_svfiprintf_r+0x166>
 802ebe8:	3608      	adds	r6, #8
 802ebea:	9b04      	ldr	r3, [sp, #16]
 802ebec:	443b      	add	r3, r7
 802ebee:	9304      	str	r3, [sp, #16]
 802ebf0:	7823      	ldrb	r3, [r4, #0]
 802ebf2:	2b00      	cmp	r3, #0
 802ebf4:	f000 83cd 	beq.w	802f392 <_svfiprintf_r+0x822>
 802ebf8:	2300      	movs	r3, #0
 802ebfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802ebfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802ec02:	3401      	adds	r4, #1
 802ec04:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802ec08:	4699      	mov	r9, r3
 802ec0a:	4622      	mov	r2, r4
 802ec0c:	f812 3b01 	ldrb.w	r3, [r2], #1
 802ec10:	9200      	str	r2, [sp, #0]
 802ec12:	f1a3 0220 	sub.w	r2, r3, #32
 802ec16:	2a5a      	cmp	r2, #90	@ 0x5a
 802ec18:	f200 8317 	bhi.w	802f24a <_svfiprintf_r+0x6da>
 802ec1c:	e8df f012 	tbh	[pc, r2, lsl #1]
 802ec20:	0315009a 	.word	0x0315009a
 802ec24:	00a20315 	.word	0x00a20315
 802ec28:	03150315 	.word	0x03150315
 802ec2c:	00820315 	.word	0x00820315
 802ec30:	03150315 	.word	0x03150315
 802ec34:	00af00a5 	.word	0x00af00a5
 802ec38:	00ac0315 	.word	0x00ac0315
 802ec3c:	031500b1 	.word	0x031500b1
 802ec40:	00cf00cc 	.word	0x00cf00cc
 802ec44:	00cf00cf 	.word	0x00cf00cf
 802ec48:	00cf00cf 	.word	0x00cf00cf
 802ec4c:	00cf00cf 	.word	0x00cf00cf
 802ec50:	00cf00cf 	.word	0x00cf00cf
 802ec54:	03150315 	.word	0x03150315
 802ec58:	03150315 	.word	0x03150315
 802ec5c:	03150315 	.word	0x03150315
 802ec60:	03150315 	.word	0x03150315
 802ec64:	00fa0315 	.word	0x00fa0315
 802ec68:	03150107 	.word	0x03150107
 802ec6c:	03150315 	.word	0x03150315
 802ec70:	03150315 	.word	0x03150315
 802ec74:	03150315 	.word	0x03150315
 802ec78:	03150315 	.word	0x03150315
 802ec7c:	01550315 	.word	0x01550315
 802ec80:	03150315 	.word	0x03150315
 802ec84:	019c0315 	.word	0x019c0315
 802ec88:	027d0315 	.word	0x027d0315
 802ec8c:	03150315 	.word	0x03150315
 802ec90:	0315029d 	.word	0x0315029d
 802ec94:	03150315 	.word	0x03150315
 802ec98:	03150315 	.word	0x03150315
 802ec9c:	03150315 	.word	0x03150315
 802eca0:	03150315 	.word	0x03150315
 802eca4:	00fa0315 	.word	0x00fa0315
 802eca8:	03150109 	.word	0x03150109
 802ecac:	03150315 	.word	0x03150315
 802ecb0:	010900e0 	.word	0x010900e0
 802ecb4:	031500f4 	.word	0x031500f4
 802ecb8:	031500ed 	.word	0x031500ed
 802ecbc:	01570135 	.word	0x01570135
 802ecc0:	00f4018b 	.word	0x00f4018b
 802ecc4:	019c0315 	.word	0x019c0315
 802ecc8:	027f0098 	.word	0x027f0098
 802eccc:	03150315 	.word	0x03150315
 802ecd0:	03150065 	.word	0x03150065
 802ecd4:	0098      	.short	0x0098
 802ecd6:	9801      	ldr	r0, [sp, #4]
 802ecd8:	aa0e      	add	r2, sp, #56	@ 0x38
 802ecda:	4659      	mov	r1, fp
 802ecdc:	f006 fb88 	bl	80353f0 <__ssprint_r>
 802ece0:	2800      	cmp	r0, #0
 802ece2:	f040 833a 	bne.w	802f35a <_svfiprintf_r+0x7ea>
 802ece6:	ae11      	add	r6, sp, #68	@ 0x44
 802ece8:	e77f      	b.n	802ebea <_svfiprintf_r+0x7a>
 802ecea:	4a9a      	ldr	r2, [pc, #616]	@ (802ef54 <_svfiprintf_r+0x3e4>)
 802ecec:	9205      	str	r2, [sp, #20]
 802ecee:	f019 0220 	ands.w	r2, r9, #32
 802ecf2:	f000 8234 	beq.w	802f15e <_svfiprintf_r+0x5ee>
 802ecf6:	3507      	adds	r5, #7
 802ecf8:	f025 0507 	bic.w	r5, r5, #7
 802ecfc:	462f      	mov	r7, r5
 802ecfe:	686d      	ldr	r5, [r5, #4]
 802ed00:	f857 4b08 	ldr.w	r4, [r7], #8
 802ed04:	f019 0f01 	tst.w	r9, #1
 802ed08:	d009      	beq.n	802ed1e <_svfiprintf_r+0x1ae>
 802ed0a:	ea54 0205 	orrs.w	r2, r4, r5
 802ed0e:	bf1f      	itttt	ne
 802ed10:	2230      	movne	r2, #48	@ 0x30
 802ed12:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802ed16:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802ed1a:	f049 0902 	orrne.w	r9, r9, #2
 802ed1e:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802ed22:	e114      	b.n	802ef4e <_svfiprintf_r+0x3de>
 802ed24:	9801      	ldr	r0, [sp, #4]
 802ed26:	f7ff fa31 	bl	802e18c <_localeconv_r>
 802ed2a:	6843      	ldr	r3, [r0, #4]
 802ed2c:	9308      	str	r3, [sp, #32]
 802ed2e:	4618      	mov	r0, r3
 802ed30:	f7e1 fab6 	bl	80102a0 <strlen>
 802ed34:	9007      	str	r0, [sp, #28]
 802ed36:	9801      	ldr	r0, [sp, #4]
 802ed38:	f7ff fa28 	bl	802e18c <_localeconv_r>
 802ed3c:	6883      	ldr	r3, [r0, #8]
 802ed3e:	9306      	str	r3, [sp, #24]
 802ed40:	9b07      	ldr	r3, [sp, #28]
 802ed42:	b12b      	cbz	r3, 802ed50 <_svfiprintf_r+0x1e0>
 802ed44:	9b06      	ldr	r3, [sp, #24]
 802ed46:	b11b      	cbz	r3, 802ed50 <_svfiprintf_r+0x1e0>
 802ed48:	781b      	ldrb	r3, [r3, #0]
 802ed4a:	b10b      	cbz	r3, 802ed50 <_svfiprintf_r+0x1e0>
 802ed4c:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 802ed50:	9c00      	ldr	r4, [sp, #0]
 802ed52:	e75a      	b.n	802ec0a <_svfiprintf_r+0x9a>
 802ed54:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802ed58:	2b00      	cmp	r3, #0
 802ed5a:	d1f9      	bne.n	802ed50 <_svfiprintf_r+0x1e0>
 802ed5c:	2320      	movs	r3, #32
 802ed5e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802ed62:	e7f5      	b.n	802ed50 <_svfiprintf_r+0x1e0>
 802ed64:	f049 0901 	orr.w	r9, r9, #1
 802ed68:	e7f2      	b.n	802ed50 <_svfiprintf_r+0x1e0>
 802ed6a:	f855 3b04 	ldr.w	r3, [r5], #4
 802ed6e:	9303      	str	r3, [sp, #12]
 802ed70:	2b00      	cmp	r3, #0
 802ed72:	daed      	bge.n	802ed50 <_svfiprintf_r+0x1e0>
 802ed74:	425b      	negs	r3, r3
 802ed76:	9303      	str	r3, [sp, #12]
 802ed78:	f049 0904 	orr.w	r9, r9, #4
 802ed7c:	e7e8      	b.n	802ed50 <_svfiprintf_r+0x1e0>
 802ed7e:	232b      	movs	r3, #43	@ 0x2b
 802ed80:	e7ed      	b.n	802ed5e <_svfiprintf_r+0x1ee>
 802ed82:	9a00      	ldr	r2, [sp, #0]
 802ed84:	f812 3b01 	ldrb.w	r3, [r2], #1
 802ed88:	2b2a      	cmp	r3, #42	@ 0x2a
 802ed8a:	d112      	bne.n	802edb2 <_svfiprintf_r+0x242>
 802ed8c:	f855 3b04 	ldr.w	r3, [r5], #4
 802ed90:	9200      	str	r2, [sp, #0]
 802ed92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802ed96:	9302      	str	r3, [sp, #8]
 802ed98:	e7da      	b.n	802ed50 <_svfiprintf_r+0x1e0>
 802ed9a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802ed9e:	fb04 0101 	mla	r1, r4, r1, r0
 802eda2:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 802eda6:	2809      	cmp	r0, #9
 802eda8:	d9f7      	bls.n	802ed9a <_svfiprintf_r+0x22a>
 802edaa:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
 802edae:	9102      	str	r1, [sp, #8]
 802edb0:	e72e      	b.n	802ec10 <_svfiprintf_r+0xa0>
 802edb2:	2100      	movs	r1, #0
 802edb4:	240a      	movs	r4, #10
 802edb6:	e7f4      	b.n	802eda2 <_svfiprintf_r+0x232>
 802edb8:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 802edbc:	e7c8      	b.n	802ed50 <_svfiprintf_r+0x1e0>
 802edbe:	2200      	movs	r2, #0
 802edc0:	9203      	str	r2, [sp, #12]
 802edc2:	210a      	movs	r1, #10
 802edc4:	9a03      	ldr	r2, [sp, #12]
 802edc6:	3b30      	subs	r3, #48	@ 0x30
 802edc8:	fb01 3302 	mla	r3, r1, r2, r3
 802edcc:	9a00      	ldr	r2, [sp, #0]
 802edce:	9303      	str	r3, [sp, #12]
 802edd0:	f812 3b01 	ldrb.w	r3, [r2], #1
 802edd4:	9200      	str	r2, [sp, #0]
 802edd6:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 802edda:	2a09      	cmp	r2, #9
 802eddc:	d9f2      	bls.n	802edc4 <_svfiprintf_r+0x254>
 802edde:	e718      	b.n	802ec12 <_svfiprintf_r+0xa2>
 802ede0:	9b00      	ldr	r3, [sp, #0]
 802ede2:	781b      	ldrb	r3, [r3, #0]
 802ede4:	2b68      	cmp	r3, #104	@ 0x68
 802ede6:	bf01      	itttt	eq
 802ede8:	9b00      	ldreq	r3, [sp, #0]
 802edea:	3301      	addeq	r3, #1
 802edec:	9300      	streq	r3, [sp, #0]
 802edee:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 802edf2:	bf18      	it	ne
 802edf4:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 802edf8:	e7aa      	b.n	802ed50 <_svfiprintf_r+0x1e0>
 802edfa:	9b00      	ldr	r3, [sp, #0]
 802edfc:	781b      	ldrb	r3, [r3, #0]
 802edfe:	2b6c      	cmp	r3, #108	@ 0x6c
 802ee00:	d105      	bne.n	802ee0e <_svfiprintf_r+0x29e>
 802ee02:	9b00      	ldr	r3, [sp, #0]
 802ee04:	3301      	adds	r3, #1
 802ee06:	9300      	str	r3, [sp, #0]
 802ee08:	f049 0920 	orr.w	r9, r9, #32
 802ee0c:	e7a0      	b.n	802ed50 <_svfiprintf_r+0x1e0>
 802ee0e:	f049 0910 	orr.w	r9, r9, #16
 802ee12:	e79d      	b.n	802ed50 <_svfiprintf_r+0x1e0>
 802ee14:	462f      	mov	r7, r5
 802ee16:	2400      	movs	r4, #0
 802ee18:	f857 3b04 	ldr.w	r3, [r7], #4
 802ee1c:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802ee20:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802ee24:	2301      	movs	r3, #1
 802ee26:	9302      	str	r3, [sp, #8]
 802ee28:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 802ee2c:	e0a9      	b.n	802ef82 <_svfiprintf_r+0x412>
 802ee2e:	f049 0910 	orr.w	r9, r9, #16
 802ee32:	f019 0f20 	tst.w	r9, #32
 802ee36:	d011      	beq.n	802ee5c <_svfiprintf_r+0x2ec>
 802ee38:	3507      	adds	r5, #7
 802ee3a:	f025 0507 	bic.w	r5, r5, #7
 802ee3e:	462f      	mov	r7, r5
 802ee40:	686d      	ldr	r5, [r5, #4]
 802ee42:	f857 4b08 	ldr.w	r4, [r7], #8
 802ee46:	2d00      	cmp	r5, #0
 802ee48:	da06      	bge.n	802ee58 <_svfiprintf_r+0x2e8>
 802ee4a:	4264      	negs	r4, r4
 802ee4c:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802ee50:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802ee54:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802ee58:	2301      	movs	r3, #1
 802ee5a:	e048      	b.n	802eeee <_svfiprintf_r+0x37e>
 802ee5c:	462f      	mov	r7, r5
 802ee5e:	f019 0f10 	tst.w	r9, #16
 802ee62:	f857 5b04 	ldr.w	r5, [r7], #4
 802ee66:	d002      	beq.n	802ee6e <_svfiprintf_r+0x2fe>
 802ee68:	462c      	mov	r4, r5
 802ee6a:	17ed      	asrs	r5, r5, #31
 802ee6c:	e7eb      	b.n	802ee46 <_svfiprintf_r+0x2d6>
 802ee6e:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802ee72:	d003      	beq.n	802ee7c <_svfiprintf_r+0x30c>
 802ee74:	b22c      	sxth	r4, r5
 802ee76:	f345 35c0 	sbfx	r5, r5, #15, #1
 802ee7a:	e7e4      	b.n	802ee46 <_svfiprintf_r+0x2d6>
 802ee7c:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802ee80:	d0f2      	beq.n	802ee68 <_svfiprintf_r+0x2f8>
 802ee82:	b26c      	sxtb	r4, r5
 802ee84:	f345 15c0 	sbfx	r5, r5, #7, #1
 802ee88:	e7dd      	b.n	802ee46 <_svfiprintf_r+0x2d6>
 802ee8a:	f019 0f20 	tst.w	r9, #32
 802ee8e:	d007      	beq.n	802eea0 <_svfiprintf_r+0x330>
 802ee90:	9a04      	ldr	r2, [sp, #16]
 802ee92:	682b      	ldr	r3, [r5, #0]
 802ee94:	9904      	ldr	r1, [sp, #16]
 802ee96:	17d2      	asrs	r2, r2, #31
 802ee98:	e9c3 1200 	strd	r1, r2, [r3]
 802ee9c:	3504      	adds	r5, #4
 802ee9e:	e68f      	b.n	802ebc0 <_svfiprintf_r+0x50>
 802eea0:	f019 0f10 	tst.w	r9, #16
 802eea4:	d003      	beq.n	802eeae <_svfiprintf_r+0x33e>
 802eea6:	682b      	ldr	r3, [r5, #0]
 802eea8:	9a04      	ldr	r2, [sp, #16]
 802eeaa:	601a      	str	r2, [r3, #0]
 802eeac:	e7f6      	b.n	802ee9c <_svfiprintf_r+0x32c>
 802eeae:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802eeb2:	d003      	beq.n	802eebc <_svfiprintf_r+0x34c>
 802eeb4:	682b      	ldr	r3, [r5, #0]
 802eeb6:	9a04      	ldr	r2, [sp, #16]
 802eeb8:	801a      	strh	r2, [r3, #0]
 802eeba:	e7ef      	b.n	802ee9c <_svfiprintf_r+0x32c>
 802eebc:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802eec0:	d0f1      	beq.n	802eea6 <_svfiprintf_r+0x336>
 802eec2:	682b      	ldr	r3, [r5, #0]
 802eec4:	9a04      	ldr	r2, [sp, #16]
 802eec6:	701a      	strb	r2, [r3, #0]
 802eec8:	e7e8      	b.n	802ee9c <_svfiprintf_r+0x32c>
 802eeca:	f049 0910 	orr.w	r9, r9, #16
 802eece:	f019 0320 	ands.w	r3, r9, #32
 802eed2:	d01e      	beq.n	802ef12 <_svfiprintf_r+0x3a2>
 802eed4:	3507      	adds	r5, #7
 802eed6:	f025 0507 	bic.w	r5, r5, #7
 802eeda:	462f      	mov	r7, r5
 802eedc:	686d      	ldr	r5, [r5, #4]
 802eede:	f857 4b08 	ldr.w	r4, [r7], #8
 802eee2:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802eee6:	2300      	movs	r3, #0
 802eee8:	2200      	movs	r2, #0
 802eeea:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802eeee:	9a02      	ldr	r2, [sp, #8]
 802eef0:	2a00      	cmp	r2, #0
 802eef2:	f2c0 8257 	blt.w	802f3a4 <_svfiprintf_r+0x834>
 802eef6:	ea54 0205 	orrs.w	r2, r4, r5
 802eefa:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 802eefe:	f040 8256 	bne.w	802f3ae <_svfiprintf_r+0x83e>
 802ef02:	9a02      	ldr	r2, [sp, #8]
 802ef04:	2a00      	cmp	r2, #0
 802ef06:	f000 8197 	beq.w	802f238 <_svfiprintf_r+0x6c8>
 802ef0a:	2b01      	cmp	r3, #1
 802ef0c:	f040 8252 	bne.w	802f3b4 <_svfiprintf_r+0x844>
 802ef10:	e13c      	b.n	802f18c <_svfiprintf_r+0x61c>
 802ef12:	462f      	mov	r7, r5
 802ef14:	f019 0510 	ands.w	r5, r9, #16
 802ef18:	f857 4b04 	ldr.w	r4, [r7], #4
 802ef1c:	d001      	beq.n	802ef22 <_svfiprintf_r+0x3b2>
 802ef1e:	461d      	mov	r5, r3
 802ef20:	e7df      	b.n	802eee2 <_svfiprintf_r+0x372>
 802ef22:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802ef26:	d001      	beq.n	802ef2c <_svfiprintf_r+0x3bc>
 802ef28:	b2a4      	uxth	r4, r4
 802ef2a:	e7da      	b.n	802eee2 <_svfiprintf_r+0x372>
 802ef2c:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802ef30:	d0d7      	beq.n	802eee2 <_svfiprintf_r+0x372>
 802ef32:	b2e4      	uxtb	r4, r4
 802ef34:	e7f3      	b.n	802ef1e <_svfiprintf_r+0x3ae>
 802ef36:	462f      	mov	r7, r5
 802ef38:	f647 0330 	movw	r3, #30768	@ 0x7830
 802ef3c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802ef40:	f857 4b04 	ldr.w	r4, [r7], #4
 802ef44:	4b03      	ldr	r3, [pc, #12]	@ (802ef54 <_svfiprintf_r+0x3e4>)
 802ef46:	9305      	str	r3, [sp, #20]
 802ef48:	2500      	movs	r5, #0
 802ef4a:	f049 0902 	orr.w	r9, r9, #2
 802ef4e:	2302      	movs	r3, #2
 802ef50:	e7ca      	b.n	802eee8 <_svfiprintf_r+0x378>
 802ef52:	bf00      	nop
 802ef54:	0803dad5 	.word	0x0803dad5
 802ef58:	9b02      	ldr	r3, [sp, #8]
 802ef5a:	462f      	mov	r7, r5
 802ef5c:	2500      	movs	r5, #0
 802ef5e:	42ab      	cmp	r3, r5
 802ef60:	f857 8b04 	ldr.w	r8, [r7], #4
 802ef64:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802ef68:	f2c0 80d2 	blt.w	802f110 <_svfiprintf_r+0x5a0>
 802ef6c:	461a      	mov	r2, r3
 802ef6e:	4629      	mov	r1, r5
 802ef70:	4640      	mov	r0, r8
 802ef72:	f7e1 f945 	bl	8010200 <memchr>
 802ef76:	4604      	mov	r4, r0
 802ef78:	b118      	cbz	r0, 802ef82 <_svfiprintf_r+0x412>
 802ef7a:	eba0 0308 	sub.w	r3, r0, r8
 802ef7e:	9302      	str	r3, [sp, #8]
 802ef80:	462c      	mov	r4, r5
 802ef82:	9d02      	ldr	r5, [sp, #8]
 802ef84:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802ef88:	42a5      	cmp	r5, r4
 802ef8a:	bfb8      	it	lt
 802ef8c:	4625      	movlt	r5, r4
 802ef8e:	b103      	cbz	r3, 802ef92 <_svfiprintf_r+0x422>
 802ef90:	3501      	adds	r5, #1
 802ef92:	f019 0302 	ands.w	r3, r9, #2
 802ef96:	9309      	str	r3, [sp, #36]	@ 0x24
 802ef98:	bf18      	it	ne
 802ef9a:	3502      	addne	r5, #2
 802ef9c:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 802efa0:	930a      	str	r3, [sp, #40]	@ 0x28
 802efa2:	d123      	bne.n	802efec <_svfiprintf_r+0x47c>
 802efa4:	9b03      	ldr	r3, [sp, #12]
 802efa6:	eba3 0a05 	sub.w	sl, r3, r5
 802efaa:	f1ba 0f00 	cmp.w	sl, #0
 802efae:	dd1d      	ble.n	802efec <_svfiprintf_r+0x47c>
 802efb0:	4bab      	ldr	r3, [pc, #684]	@ (802f260 <_svfiprintf_r+0x6f0>)
 802efb2:	6033      	str	r3, [r6, #0]
 802efb4:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802efb8:	f1ba 0f10 	cmp.w	sl, #16
 802efbc:	f102 0201 	add.w	r2, r2, #1
 802efc0:	f106 0008 	add.w	r0, r6, #8
 802efc4:	f300 8152 	bgt.w	802f26c <_svfiprintf_r+0x6fc>
 802efc8:	eb0c 010a 	add.w	r1, ip, sl
 802efcc:	2a07      	cmp	r2, #7
 802efce:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802efd2:	f8c6 a004 	str.w	sl, [r6, #4]
 802efd6:	f340 815d 	ble.w	802f294 <_svfiprintf_r+0x724>
 802efda:	9801      	ldr	r0, [sp, #4]
 802efdc:	aa0e      	add	r2, sp, #56	@ 0x38
 802efde:	4659      	mov	r1, fp
 802efe0:	f006 fa06 	bl	80353f0 <__ssprint_r>
 802efe4:	2800      	cmp	r0, #0
 802efe6:	f040 81b8 	bne.w	802f35a <_svfiprintf_r+0x7ea>
 802efea:	ae11      	add	r6, sp, #68	@ 0x44
 802efec:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802eff0:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802eff4:	b161      	cbz	r1, 802f010 <_svfiprintf_r+0x4a0>
 802eff6:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802effa:	3301      	adds	r3, #1
 802effc:	6031      	str	r1, [r6, #0]
 802effe:	2101      	movs	r1, #1
 802f000:	440a      	add	r2, r1
 802f002:	2b07      	cmp	r3, #7
 802f004:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802f008:	6071      	str	r1, [r6, #4]
 802f00a:	f300 8145 	bgt.w	802f298 <_svfiprintf_r+0x728>
 802f00e:	3608      	adds	r6, #8
 802f010:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802f012:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802f016:	b159      	cbz	r1, 802f030 <_svfiprintf_r+0x4c0>
 802f018:	a90d      	add	r1, sp, #52	@ 0x34
 802f01a:	3301      	adds	r3, #1
 802f01c:	6031      	str	r1, [r6, #0]
 802f01e:	2102      	movs	r1, #2
 802f020:	440a      	add	r2, r1
 802f022:	2b07      	cmp	r3, #7
 802f024:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802f028:	6071      	str	r1, [r6, #4]
 802f02a:	f300 813e 	bgt.w	802f2aa <_svfiprintf_r+0x73a>
 802f02e:	3608      	adds	r6, #8
 802f030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802f032:	2b80      	cmp	r3, #128	@ 0x80
 802f034:	d123      	bne.n	802f07e <_svfiprintf_r+0x50e>
 802f036:	9b03      	ldr	r3, [sp, #12]
 802f038:	eba3 0a05 	sub.w	sl, r3, r5
 802f03c:	f1ba 0f00 	cmp.w	sl, #0
 802f040:	dd1d      	ble.n	802f07e <_svfiprintf_r+0x50e>
 802f042:	4b88      	ldr	r3, [pc, #544]	@ (802f264 <_svfiprintf_r+0x6f4>)
 802f044:	6033      	str	r3, [r6, #0]
 802f046:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802f04a:	f1ba 0f10 	cmp.w	sl, #16
 802f04e:	f102 0201 	add.w	r2, r2, #1
 802f052:	f106 0008 	add.w	r0, r6, #8
 802f056:	f300 8131 	bgt.w	802f2bc <_svfiprintf_r+0x74c>
 802f05a:	eb0c 010a 	add.w	r1, ip, sl
 802f05e:	2a07      	cmp	r2, #7
 802f060:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802f064:	f8c6 a004 	str.w	sl, [r6, #4]
 802f068:	f340 813c 	ble.w	802f2e4 <_svfiprintf_r+0x774>
 802f06c:	9801      	ldr	r0, [sp, #4]
 802f06e:	aa0e      	add	r2, sp, #56	@ 0x38
 802f070:	4659      	mov	r1, fp
 802f072:	f006 f9bd 	bl	80353f0 <__ssprint_r>
 802f076:	2800      	cmp	r0, #0
 802f078:	f040 816f 	bne.w	802f35a <_svfiprintf_r+0x7ea>
 802f07c:	ae11      	add	r6, sp, #68	@ 0x44
 802f07e:	9b02      	ldr	r3, [sp, #8]
 802f080:	1ae4      	subs	r4, r4, r3
 802f082:	2c00      	cmp	r4, #0
 802f084:	dd1a      	ble.n	802f0bc <_svfiprintf_r+0x54c>
 802f086:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802f08a:	4876      	ldr	r0, [pc, #472]	@ (802f264 <_svfiprintf_r+0x6f4>)
 802f08c:	6030      	str	r0, [r6, #0]
 802f08e:	2c10      	cmp	r4, #16
 802f090:	f103 0301 	add.w	r3, r3, #1
 802f094:	f106 0108 	add.w	r1, r6, #8
 802f098:	f300 8126 	bgt.w	802f2e8 <_svfiprintf_r+0x778>
 802f09c:	6074      	str	r4, [r6, #4]
 802f09e:	2b07      	cmp	r3, #7
 802f0a0:	4414      	add	r4, r2
 802f0a2:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802f0a6:	f340 8130 	ble.w	802f30a <_svfiprintf_r+0x79a>
 802f0aa:	9801      	ldr	r0, [sp, #4]
 802f0ac:	aa0e      	add	r2, sp, #56	@ 0x38
 802f0ae:	4659      	mov	r1, fp
 802f0b0:	f006 f99e 	bl	80353f0 <__ssprint_r>
 802f0b4:	2800      	cmp	r0, #0
 802f0b6:	f040 8150 	bne.w	802f35a <_svfiprintf_r+0x7ea>
 802f0ba:	ae11      	add	r6, sp, #68	@ 0x44
 802f0bc:	9b02      	ldr	r3, [sp, #8]
 802f0be:	9a02      	ldr	r2, [sp, #8]
 802f0c0:	6073      	str	r3, [r6, #4]
 802f0c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802f0c4:	f8c6 8000 	str.w	r8, [r6]
 802f0c8:	4413      	add	r3, r2
 802f0ca:	9310      	str	r3, [sp, #64]	@ 0x40
 802f0cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802f0ce:	3301      	adds	r3, #1
 802f0d0:	2b07      	cmp	r3, #7
 802f0d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 802f0d4:	f300 811b 	bgt.w	802f30e <_svfiprintf_r+0x79e>
 802f0d8:	f106 0308 	add.w	r3, r6, #8
 802f0dc:	f019 0f04 	tst.w	r9, #4
 802f0e0:	f040 811d 	bne.w	802f31e <_svfiprintf_r+0x7ae>
 802f0e4:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 802f0e8:	42aa      	cmp	r2, r5
 802f0ea:	bfac      	ite	ge
 802f0ec:	189b      	addge	r3, r3, r2
 802f0ee:	195b      	addlt	r3, r3, r5
 802f0f0:	9304      	str	r3, [sp, #16]
 802f0f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802f0f4:	b13b      	cbz	r3, 802f106 <_svfiprintf_r+0x596>
 802f0f6:	9801      	ldr	r0, [sp, #4]
 802f0f8:	aa0e      	add	r2, sp, #56	@ 0x38
 802f0fa:	4659      	mov	r1, fp
 802f0fc:	f006 f978 	bl	80353f0 <__ssprint_r>
 802f100:	2800      	cmp	r0, #0
 802f102:	f040 812a 	bne.w	802f35a <_svfiprintf_r+0x7ea>
 802f106:	2300      	movs	r3, #0
 802f108:	930f      	str	r3, [sp, #60]	@ 0x3c
 802f10a:	463d      	mov	r5, r7
 802f10c:	ae11      	add	r6, sp, #68	@ 0x44
 802f10e:	e557      	b.n	802ebc0 <_svfiprintf_r+0x50>
 802f110:	4640      	mov	r0, r8
 802f112:	f7e1 f8c5 	bl	80102a0 <strlen>
 802f116:	9002      	str	r0, [sp, #8]
 802f118:	e732      	b.n	802ef80 <_svfiprintf_r+0x410>
 802f11a:	f049 0910 	orr.w	r9, r9, #16
 802f11e:	f019 0320 	ands.w	r3, r9, #32
 802f122:	d008      	beq.n	802f136 <_svfiprintf_r+0x5c6>
 802f124:	3507      	adds	r5, #7
 802f126:	f025 0507 	bic.w	r5, r5, #7
 802f12a:	462f      	mov	r7, r5
 802f12c:	686d      	ldr	r5, [r5, #4]
 802f12e:	f857 4b08 	ldr.w	r4, [r7], #8
 802f132:	2301      	movs	r3, #1
 802f134:	e6d8      	b.n	802eee8 <_svfiprintf_r+0x378>
 802f136:	462f      	mov	r7, r5
 802f138:	f019 0510 	ands.w	r5, r9, #16
 802f13c:	f857 4b04 	ldr.w	r4, [r7], #4
 802f140:	d001      	beq.n	802f146 <_svfiprintf_r+0x5d6>
 802f142:	461d      	mov	r5, r3
 802f144:	e7f5      	b.n	802f132 <_svfiprintf_r+0x5c2>
 802f146:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802f14a:	d001      	beq.n	802f150 <_svfiprintf_r+0x5e0>
 802f14c:	b2a4      	uxth	r4, r4
 802f14e:	e7f0      	b.n	802f132 <_svfiprintf_r+0x5c2>
 802f150:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802f154:	d0ed      	beq.n	802f132 <_svfiprintf_r+0x5c2>
 802f156:	b2e4      	uxtb	r4, r4
 802f158:	e7f3      	b.n	802f142 <_svfiprintf_r+0x5d2>
 802f15a:	4a43      	ldr	r2, [pc, #268]	@ (802f268 <_svfiprintf_r+0x6f8>)
 802f15c:	e5c6      	b.n	802ecec <_svfiprintf_r+0x17c>
 802f15e:	462f      	mov	r7, r5
 802f160:	f019 0510 	ands.w	r5, r9, #16
 802f164:	f857 4b04 	ldr.w	r4, [r7], #4
 802f168:	d001      	beq.n	802f16e <_svfiprintf_r+0x5fe>
 802f16a:	4615      	mov	r5, r2
 802f16c:	e5ca      	b.n	802ed04 <_svfiprintf_r+0x194>
 802f16e:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 802f172:	d001      	beq.n	802f178 <_svfiprintf_r+0x608>
 802f174:	b2a4      	uxth	r4, r4
 802f176:	e5c5      	b.n	802ed04 <_svfiprintf_r+0x194>
 802f178:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802f17c:	f43f adc2 	beq.w	802ed04 <_svfiprintf_r+0x194>
 802f180:	b2e4      	uxtb	r4, r4
 802f182:	e7f2      	b.n	802f16a <_svfiprintf_r+0x5fa>
 802f184:	2c0a      	cmp	r4, #10
 802f186:	f175 0300 	sbcs.w	r3, r5, #0
 802f18a:	d206      	bcs.n	802f19a <_svfiprintf_r+0x62a>
 802f18c:	3430      	adds	r4, #48	@ 0x30
 802f18e:	b2e4      	uxtb	r4, r4
 802f190:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802f194:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 802f198:	e128      	b.n	802f3ec <_svfiprintf_r+0x87c>
 802f19a:	ab3a      	add	r3, sp, #232	@ 0xe8
 802f19c:	9309      	str	r3, [sp, #36]	@ 0x24
 802f19e:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 802f1a2:	f04f 0900 	mov.w	r9, #0
 802f1a6:	930a      	str	r3, [sp, #40]	@ 0x28
 802f1a8:	220a      	movs	r2, #10
 802f1aa:	2300      	movs	r3, #0
 802f1ac:	4620      	mov	r0, r4
 802f1ae:	4629      	mov	r1, r5
 802f1b0:	f7e1 fdd2 	bl	8010d58 <__aeabi_uldivmod>
 802f1b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 802f1b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802f1b8:	3230      	adds	r2, #48	@ 0x30
 802f1ba:	f801 2c01 	strb.w	r2, [r1, #-1]
 802f1be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802f1c0:	4603      	mov	r3, r0
 802f1c2:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 802f1c6:	f109 0901 	add.w	r9, r9, #1
 802f1ca:	b312      	cbz	r2, 802f212 <_svfiprintf_r+0x6a2>
 802f1cc:	9a06      	ldr	r2, [sp, #24]
 802f1ce:	7812      	ldrb	r2, [r2, #0]
 802f1d0:	454a      	cmp	r2, r9
 802f1d2:	d11e      	bne.n	802f212 <_svfiprintf_r+0x6a2>
 802f1d4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802f1d8:	d01b      	beq.n	802f212 <_svfiprintf_r+0x6a2>
 802f1da:	2c0a      	cmp	r4, #10
 802f1dc:	f175 0500 	sbcs.w	r5, r5, #0
 802f1e0:	f0c0 8104 	bcc.w	802f3ec <_svfiprintf_r+0x87c>
 802f1e4:	9b07      	ldr	r3, [sp, #28]
 802f1e6:	9009      	str	r0, [sp, #36]	@ 0x24
 802f1e8:	eba8 0803 	sub.w	r8, r8, r3
 802f1ec:	461a      	mov	r2, r3
 802f1ee:	9908      	ldr	r1, [sp, #32]
 802f1f0:	4640      	mov	r0, r8
 802f1f2:	f7fd fb4c 	bl	802c88e <strncpy>
 802f1f6:	9b06      	ldr	r3, [sp, #24]
 802f1f8:	785a      	ldrb	r2, [r3, #1]
 802f1fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802f1fc:	b112      	cbz	r2, 802f204 <_svfiprintf_r+0x694>
 802f1fe:	9a06      	ldr	r2, [sp, #24]
 802f200:	3201      	adds	r2, #1
 802f202:	9206      	str	r2, [sp, #24]
 802f204:	f04f 0900 	mov.w	r9, #0
 802f208:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802f20a:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802f20e:	461c      	mov	r4, r3
 802f210:	e7ca      	b.n	802f1a8 <_svfiprintf_r+0x638>
 802f212:	2c0a      	cmp	r4, #10
 802f214:	f175 0500 	sbcs.w	r5, r5, #0
 802f218:	d2f6      	bcs.n	802f208 <_svfiprintf_r+0x698>
 802f21a:	e0e7      	b.n	802f3ec <_svfiprintf_r+0x87c>
 802f21c:	f004 030f 	and.w	r3, r4, #15
 802f220:	9a05      	ldr	r2, [sp, #20]
 802f222:	0924      	lsrs	r4, r4, #4
 802f224:	5cd3      	ldrb	r3, [r2, r3]
 802f226:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802f22a:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802f22e:	092d      	lsrs	r5, r5, #4
 802f230:	ea54 0305 	orrs.w	r3, r4, r5
 802f234:	d1f2      	bne.n	802f21c <_svfiprintf_r+0x6ac>
 802f236:	e0d9      	b.n	802f3ec <_svfiprintf_r+0x87c>
 802f238:	b923      	cbnz	r3, 802f244 <_svfiprintf_r+0x6d4>
 802f23a:	f019 0f01 	tst.w	r9, #1
 802f23e:	d001      	beq.n	802f244 <_svfiprintf_r+0x6d4>
 802f240:	2430      	movs	r4, #48	@ 0x30
 802f242:	e7a5      	b.n	802f190 <_svfiprintf_r+0x620>
 802f244:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802f248:	e0d0      	b.n	802f3ec <_svfiprintf_r+0x87c>
 802f24a:	2b00      	cmp	r3, #0
 802f24c:	f000 80a1 	beq.w	802f392 <_svfiprintf_r+0x822>
 802f250:	2400      	movs	r4, #0
 802f252:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802f256:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802f25a:	462f      	mov	r7, r5
 802f25c:	e5e2      	b.n	802ee24 <_svfiprintf_r+0x2b4>
 802f25e:	bf00      	nop
 802f260:	0803e105 	.word	0x0803e105
 802f264:	0803e0f5 	.word	0x0803e0f5
 802f268:	0803dac4 	.word	0x0803dac4
 802f26c:	2110      	movs	r1, #16
 802f26e:	6071      	str	r1, [r6, #4]
 802f270:	2a07      	cmp	r2, #7
 802f272:	4461      	add	r1, ip
 802f274:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802f278:	dd08      	ble.n	802f28c <_svfiprintf_r+0x71c>
 802f27a:	9801      	ldr	r0, [sp, #4]
 802f27c:	aa0e      	add	r2, sp, #56	@ 0x38
 802f27e:	4659      	mov	r1, fp
 802f280:	f006 f8b6 	bl	80353f0 <__ssprint_r>
 802f284:	2800      	cmp	r0, #0
 802f286:	d168      	bne.n	802f35a <_svfiprintf_r+0x7ea>
 802f288:	4b5c      	ldr	r3, [pc, #368]	@ (802f3fc <_svfiprintf_r+0x88c>)
 802f28a:	a811      	add	r0, sp, #68	@ 0x44
 802f28c:	f1aa 0a10 	sub.w	sl, sl, #16
 802f290:	4606      	mov	r6, r0
 802f292:	e68e      	b.n	802efb2 <_svfiprintf_r+0x442>
 802f294:	4606      	mov	r6, r0
 802f296:	e6a9      	b.n	802efec <_svfiprintf_r+0x47c>
 802f298:	9801      	ldr	r0, [sp, #4]
 802f29a:	aa0e      	add	r2, sp, #56	@ 0x38
 802f29c:	4659      	mov	r1, fp
 802f29e:	f006 f8a7 	bl	80353f0 <__ssprint_r>
 802f2a2:	2800      	cmp	r0, #0
 802f2a4:	d159      	bne.n	802f35a <_svfiprintf_r+0x7ea>
 802f2a6:	ae11      	add	r6, sp, #68	@ 0x44
 802f2a8:	e6b2      	b.n	802f010 <_svfiprintf_r+0x4a0>
 802f2aa:	9801      	ldr	r0, [sp, #4]
 802f2ac:	aa0e      	add	r2, sp, #56	@ 0x38
 802f2ae:	4659      	mov	r1, fp
 802f2b0:	f006 f89e 	bl	80353f0 <__ssprint_r>
 802f2b4:	2800      	cmp	r0, #0
 802f2b6:	d150      	bne.n	802f35a <_svfiprintf_r+0x7ea>
 802f2b8:	ae11      	add	r6, sp, #68	@ 0x44
 802f2ba:	e6b9      	b.n	802f030 <_svfiprintf_r+0x4c0>
 802f2bc:	2110      	movs	r1, #16
 802f2be:	6071      	str	r1, [r6, #4]
 802f2c0:	2a07      	cmp	r2, #7
 802f2c2:	4461      	add	r1, ip
 802f2c4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802f2c8:	dd08      	ble.n	802f2dc <_svfiprintf_r+0x76c>
 802f2ca:	9801      	ldr	r0, [sp, #4]
 802f2cc:	aa0e      	add	r2, sp, #56	@ 0x38
 802f2ce:	4659      	mov	r1, fp
 802f2d0:	f006 f88e 	bl	80353f0 <__ssprint_r>
 802f2d4:	2800      	cmp	r0, #0
 802f2d6:	d140      	bne.n	802f35a <_svfiprintf_r+0x7ea>
 802f2d8:	4b49      	ldr	r3, [pc, #292]	@ (802f400 <_svfiprintf_r+0x890>)
 802f2da:	a811      	add	r0, sp, #68	@ 0x44
 802f2dc:	f1aa 0a10 	sub.w	sl, sl, #16
 802f2e0:	4606      	mov	r6, r0
 802f2e2:	e6af      	b.n	802f044 <_svfiprintf_r+0x4d4>
 802f2e4:	4606      	mov	r6, r0
 802f2e6:	e6ca      	b.n	802f07e <_svfiprintf_r+0x50e>
 802f2e8:	2010      	movs	r0, #16
 802f2ea:	4402      	add	r2, r0
 802f2ec:	2b07      	cmp	r3, #7
 802f2ee:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802f2f2:	6070      	str	r0, [r6, #4]
 802f2f4:	dd06      	ble.n	802f304 <_svfiprintf_r+0x794>
 802f2f6:	9801      	ldr	r0, [sp, #4]
 802f2f8:	aa0e      	add	r2, sp, #56	@ 0x38
 802f2fa:	4659      	mov	r1, fp
 802f2fc:	f006 f878 	bl	80353f0 <__ssprint_r>
 802f300:	bb58      	cbnz	r0, 802f35a <_svfiprintf_r+0x7ea>
 802f302:	a911      	add	r1, sp, #68	@ 0x44
 802f304:	3c10      	subs	r4, #16
 802f306:	460e      	mov	r6, r1
 802f308:	e6bd      	b.n	802f086 <_svfiprintf_r+0x516>
 802f30a:	460e      	mov	r6, r1
 802f30c:	e6d6      	b.n	802f0bc <_svfiprintf_r+0x54c>
 802f30e:	9801      	ldr	r0, [sp, #4]
 802f310:	aa0e      	add	r2, sp, #56	@ 0x38
 802f312:	4659      	mov	r1, fp
 802f314:	f006 f86c 	bl	80353f0 <__ssprint_r>
 802f318:	b9f8      	cbnz	r0, 802f35a <_svfiprintf_r+0x7ea>
 802f31a:	ab11      	add	r3, sp, #68	@ 0x44
 802f31c:	e6de      	b.n	802f0dc <_svfiprintf_r+0x56c>
 802f31e:	9a03      	ldr	r2, [sp, #12]
 802f320:	1b54      	subs	r4, r2, r5
 802f322:	2c00      	cmp	r4, #0
 802f324:	f77f aede 	ble.w	802f0e4 <_svfiprintf_r+0x574>
 802f328:	4e34      	ldr	r6, [pc, #208]	@ (802f3fc <_svfiprintf_r+0x88c>)
 802f32a:	f04f 0810 	mov.w	r8, #16
 802f32e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802f332:	2c10      	cmp	r4, #16
 802f334:	f102 0201 	add.w	r2, r2, #1
 802f338:	601e      	str	r6, [r3, #0]
 802f33a:	dc17      	bgt.n	802f36c <_svfiprintf_r+0x7fc>
 802f33c:	4421      	add	r1, r4
 802f33e:	2a07      	cmp	r2, #7
 802f340:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802f344:	605c      	str	r4, [r3, #4]
 802f346:	f77f aecd 	ble.w	802f0e4 <_svfiprintf_r+0x574>
 802f34a:	9801      	ldr	r0, [sp, #4]
 802f34c:	aa0e      	add	r2, sp, #56	@ 0x38
 802f34e:	4659      	mov	r1, fp
 802f350:	f006 f84e 	bl	80353f0 <__ssprint_r>
 802f354:	2800      	cmp	r0, #0
 802f356:	f43f aec5 	beq.w	802f0e4 <_svfiprintf_r+0x574>
 802f35a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802f35e:	065b      	lsls	r3, r3, #25
 802f360:	f53f ac1d 	bmi.w	802eb9e <_svfiprintf_r+0x2e>
 802f364:	9804      	ldr	r0, [sp, #16]
 802f366:	b03b      	add	sp, #236	@ 0xec
 802f368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f36c:	3110      	adds	r1, #16
 802f36e:	2a07      	cmp	r2, #7
 802f370:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802f374:	f8c3 8004 	str.w	r8, [r3, #4]
 802f378:	dc02      	bgt.n	802f380 <_svfiprintf_r+0x810>
 802f37a:	3308      	adds	r3, #8
 802f37c:	3c10      	subs	r4, #16
 802f37e:	e7d6      	b.n	802f32e <_svfiprintf_r+0x7be>
 802f380:	9801      	ldr	r0, [sp, #4]
 802f382:	aa0e      	add	r2, sp, #56	@ 0x38
 802f384:	4659      	mov	r1, fp
 802f386:	f006 f833 	bl	80353f0 <__ssprint_r>
 802f38a:	2800      	cmp	r0, #0
 802f38c:	d1e5      	bne.n	802f35a <_svfiprintf_r+0x7ea>
 802f38e:	ab11      	add	r3, sp, #68	@ 0x44
 802f390:	e7f4      	b.n	802f37c <_svfiprintf_r+0x80c>
 802f392:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802f394:	2b00      	cmp	r3, #0
 802f396:	d0e0      	beq.n	802f35a <_svfiprintf_r+0x7ea>
 802f398:	9801      	ldr	r0, [sp, #4]
 802f39a:	aa0e      	add	r2, sp, #56	@ 0x38
 802f39c:	4659      	mov	r1, fp
 802f39e:	f006 f827 	bl	80353f0 <__ssprint_r>
 802f3a2:	e7da      	b.n	802f35a <_svfiprintf_r+0x7ea>
 802f3a4:	ea54 0205 	orrs.w	r2, r4, r5
 802f3a8:	46ca      	mov	sl, r9
 802f3aa:	f43f adae 	beq.w	802ef0a <_svfiprintf_r+0x39a>
 802f3ae:	2b01      	cmp	r3, #1
 802f3b0:	f43f aee8 	beq.w	802f184 <_svfiprintf_r+0x614>
 802f3b4:	2b02      	cmp	r3, #2
 802f3b6:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802f3ba:	f43f af2f 	beq.w	802f21c <_svfiprintf_r+0x6ac>
 802f3be:	f004 0307 	and.w	r3, r4, #7
 802f3c2:	08e4      	lsrs	r4, r4, #3
 802f3c4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802f3c8:	08ed      	lsrs	r5, r5, #3
 802f3ca:	3330      	adds	r3, #48	@ 0x30
 802f3cc:	ea54 0105 	orrs.w	r1, r4, r5
 802f3d0:	4642      	mov	r2, r8
 802f3d2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802f3d6:	d1f2      	bne.n	802f3be <_svfiprintf_r+0x84e>
 802f3d8:	f01a 0f01 	tst.w	sl, #1
 802f3dc:	d006      	beq.n	802f3ec <_svfiprintf_r+0x87c>
 802f3de:	2b30      	cmp	r3, #48	@ 0x30
 802f3e0:	d004      	beq.n	802f3ec <_svfiprintf_r+0x87c>
 802f3e2:	2330      	movs	r3, #48	@ 0x30
 802f3e4:	f808 3c01 	strb.w	r3, [r8, #-1]
 802f3e8:	f1a2 0802 	sub.w	r8, r2, #2
 802f3ec:	ab3a      	add	r3, sp, #232	@ 0xe8
 802f3ee:	eba3 0308 	sub.w	r3, r3, r8
 802f3f2:	9c02      	ldr	r4, [sp, #8]
 802f3f4:	9302      	str	r3, [sp, #8]
 802f3f6:	46d1      	mov	r9, sl
 802f3f8:	e5c3      	b.n	802ef82 <_svfiprintf_r+0x412>
 802f3fa:	bf00      	nop
 802f3fc:	0803e105 	.word	0x0803e105
 802f400:	0803e0f5 	.word	0x0803e0f5

0802f404 <_sungetc_r>:
 802f404:	b538      	push	{r3, r4, r5, lr}
 802f406:	1c4b      	adds	r3, r1, #1
 802f408:	4614      	mov	r4, r2
 802f40a:	d103      	bne.n	802f414 <_sungetc_r+0x10>
 802f40c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 802f410:	4628      	mov	r0, r5
 802f412:	bd38      	pop	{r3, r4, r5, pc}
 802f414:	8993      	ldrh	r3, [r2, #12]
 802f416:	f023 0320 	bic.w	r3, r3, #32
 802f41a:	8193      	strh	r3, [r2, #12]
 802f41c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802f41e:	6852      	ldr	r2, [r2, #4]
 802f420:	b2cd      	uxtb	r5, r1
 802f422:	b18b      	cbz	r3, 802f448 <_sungetc_r+0x44>
 802f424:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802f426:	4293      	cmp	r3, r2
 802f428:	dd08      	ble.n	802f43c <_sungetc_r+0x38>
 802f42a:	6823      	ldr	r3, [r4, #0]
 802f42c:	1e5a      	subs	r2, r3, #1
 802f42e:	6022      	str	r2, [r4, #0]
 802f430:	f803 5c01 	strb.w	r5, [r3, #-1]
 802f434:	6863      	ldr	r3, [r4, #4]
 802f436:	3301      	adds	r3, #1
 802f438:	6063      	str	r3, [r4, #4]
 802f43a:	e7e9      	b.n	802f410 <_sungetc_r+0xc>
 802f43c:	4621      	mov	r1, r4
 802f43e:	f006 f88d 	bl	803555c <__submore>
 802f442:	2800      	cmp	r0, #0
 802f444:	d0f1      	beq.n	802f42a <_sungetc_r+0x26>
 802f446:	e7e1      	b.n	802f40c <_sungetc_r+0x8>
 802f448:	6921      	ldr	r1, [r4, #16]
 802f44a:	6823      	ldr	r3, [r4, #0]
 802f44c:	b151      	cbz	r1, 802f464 <_sungetc_r+0x60>
 802f44e:	4299      	cmp	r1, r3
 802f450:	d208      	bcs.n	802f464 <_sungetc_r+0x60>
 802f452:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802f456:	42a9      	cmp	r1, r5
 802f458:	d104      	bne.n	802f464 <_sungetc_r+0x60>
 802f45a:	3b01      	subs	r3, #1
 802f45c:	3201      	adds	r2, #1
 802f45e:	6023      	str	r3, [r4, #0]
 802f460:	6062      	str	r2, [r4, #4]
 802f462:	e7d5      	b.n	802f410 <_sungetc_r+0xc>
 802f464:	e9c4 320e 	strd	r3, r2, [r4, #56]	@ 0x38
 802f468:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802f46c:	6323      	str	r3, [r4, #48]	@ 0x30
 802f46e:	2303      	movs	r3, #3
 802f470:	6363      	str	r3, [r4, #52]	@ 0x34
 802f472:	4623      	mov	r3, r4
 802f474:	f803 5f42 	strb.w	r5, [r3, #66]!
 802f478:	6023      	str	r3, [r4, #0]
 802f47a:	2301      	movs	r3, #1
 802f47c:	e7dc      	b.n	802f438 <_sungetc_r+0x34>

0802f47e <__ssrefill_r>:
 802f47e:	b510      	push	{r4, lr}
 802f480:	460c      	mov	r4, r1
 802f482:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 802f484:	b169      	cbz	r1, 802f4a2 <__ssrefill_r+0x24>
 802f486:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802f48a:	4299      	cmp	r1, r3
 802f48c:	d001      	beq.n	802f492 <__ssrefill_r+0x14>
 802f48e:	f7fe ffbb 	bl	802e408 <_free_r>
 802f492:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802f494:	6063      	str	r3, [r4, #4]
 802f496:	2000      	movs	r0, #0
 802f498:	6320      	str	r0, [r4, #48]	@ 0x30
 802f49a:	b113      	cbz	r3, 802f4a2 <__ssrefill_r+0x24>
 802f49c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 802f49e:	6023      	str	r3, [r4, #0]
 802f4a0:	bd10      	pop	{r4, pc}
 802f4a2:	6923      	ldr	r3, [r4, #16]
 802f4a4:	6023      	str	r3, [r4, #0]
 802f4a6:	2300      	movs	r3, #0
 802f4a8:	6063      	str	r3, [r4, #4]
 802f4aa:	89a3      	ldrh	r3, [r4, #12]
 802f4ac:	f043 0320 	orr.w	r3, r3, #32
 802f4b0:	81a3      	strh	r3, [r4, #12]
 802f4b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802f4b6:	e7f3      	b.n	802f4a0 <__ssrefill_r+0x22>

0802f4b8 <_sfread_r>:
 802f4b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f4bc:	461f      	mov	r7, r3
 802f4be:	4613      	mov	r3, r2
 802f4c0:	437b      	muls	r3, r7
 802f4c2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802f4c4:	9000      	str	r0, [sp, #0]
 802f4c6:	4688      	mov	r8, r1
 802f4c8:	4691      	mov	r9, r2
 802f4ca:	d028      	beq.n	802f51e <_sfread_r+0x66>
 802f4cc:	461e      	mov	r6, r3
 802f4ce:	f04f 0b00 	mov.w	fp, #0
 802f4d2:	e9d4 1500 	ldrd	r1, r5, [r4]
 802f4d6:	42b5      	cmp	r5, r6
 802f4d8:	d30b      	bcc.n	802f4f2 <_sfread_r+0x3a>
 802f4da:	4632      	mov	r2, r6
 802f4dc:	4640      	mov	r0, r8
 802f4de:	f7fe ff0b 	bl	802e2f8 <memcpy>
 802f4e2:	6862      	ldr	r2, [r4, #4]
 802f4e4:	6821      	ldr	r1, [r4, #0]
 802f4e6:	1b92      	subs	r2, r2, r6
 802f4e8:	4431      	add	r1, r6
 802f4ea:	6062      	str	r2, [r4, #4]
 802f4ec:	6021      	str	r1, [r4, #0]
 802f4ee:	463b      	mov	r3, r7
 802f4f0:	e015      	b.n	802f51e <_sfread_r+0x66>
 802f4f2:	462a      	mov	r2, r5
 802f4f4:	4640      	mov	r0, r8
 802f4f6:	9301      	str	r3, [sp, #4]
 802f4f8:	f7fe fefe 	bl	802e2f8 <memcpy>
 802f4fc:	6822      	ldr	r2, [r4, #0]
 802f4fe:	9800      	ldr	r0, [sp, #0]
 802f500:	442a      	add	r2, r5
 802f502:	e9c4 2b00 	strd	r2, fp, [r4]
 802f506:	4621      	mov	r1, r4
 802f508:	f7ff ffb9 	bl	802f47e <__ssrefill_r>
 802f50c:	44a8      	add	r8, r5
 802f50e:	9b01      	ldr	r3, [sp, #4]
 802f510:	eba6 0a05 	sub.w	sl, r6, r5
 802f514:	b138      	cbz	r0, 802f526 <_sfread_r+0x6e>
 802f516:	441d      	add	r5, r3
 802f518:	1bad      	subs	r5, r5, r6
 802f51a:	fbb5 f3f9 	udiv	r3, r5, r9
 802f51e:	4618      	mov	r0, r3
 802f520:	b003      	add	sp, #12
 802f522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f526:	4656      	mov	r6, sl
 802f528:	e7d3      	b.n	802f4d2 <_sfread_r+0x1a>
	...

0802f52c <__ssvfiscanf_r>:
 802f52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f530:	b0df      	sub	sp, #380	@ 0x17c
 802f532:	af02      	add	r7, sp, #8
 802f534:	460c      	mov	r4, r1
 802f536:	61fb      	str	r3, [r7, #28]
 802f538:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 802f53c:	6278      	str	r0, [r7, #36]	@ 0x24
 802f53e:	049e      	lsls	r6, r3, #18
 802f540:	60ba      	str	r2, [r7, #8]
 802f542:	d406      	bmi.n	802f552 <__ssvfiscanf_r+0x26>
 802f544:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
 802f546:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802f54a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 802f54e:	818b      	strh	r3, [r1, #12]
 802f550:	664a      	str	r2, [r1, #100]	@ 0x64
 802f552:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802f554:	049d      	lsls	r5, r3, #18
 802f556:	f3c3 3240 	ubfx	r2, r3, #13, #1
 802f55a:	f100 80fb 	bmi.w	802f754 <__ssvfiscanf_r+0x228>
 802f55e:	e9c7 2205 	strd	r2, r2, [r7, #20]
 802f562:	60fa      	str	r2, [r7, #12]
 802f564:	4693      	mov	fp, r2
 802f566:	4613      	mov	r3, r2
 802f568:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802f56a:	623b      	str	r3, [r7, #32]
 802f56c:	e005      	b.n	802f57a <__ssvfiscanf_r+0x4e>
 802f56e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f570:	4621      	mov	r1, r4
 802f572:	f7ff ff84 	bl	802f47e <__ssrefill_r>
 802f576:	b168      	cbz	r0, 802f594 <__ssvfiscanf_r+0x68>
 802f578:	60bd      	str	r5, [r7, #8]
 802f57a:	68bd      	ldr	r5, [r7, #8]
 802f57c:	f815 3b01 	ldrb.w	r3, [r5], #1
 802f580:	637b      	str	r3, [r7, #52]	@ 0x34
 802f582:	b353      	cbz	r3, 802f5da <__ssvfiscanf_r+0xae>
 802f584:	4a9d      	ldr	r2, [pc, #628]	@ (802f7fc <__ssvfiscanf_r+0x2d0>)
 802f586:	5cd6      	ldrb	r6, [r2, r3]
 802f588:	f016 0608 	ands.w	r6, r6, #8
 802f58c:	d011      	beq.n	802f5b2 <__ssvfiscanf_r+0x86>
 802f58e:	6863      	ldr	r3, [r4, #4]
 802f590:	2b00      	cmp	r3, #0
 802f592:	ddec      	ble.n	802f56e <__ssvfiscanf_r+0x42>
 802f594:	6823      	ldr	r3, [r4, #0]
 802f596:	4999      	ldr	r1, [pc, #612]	@ (802f7fc <__ssvfiscanf_r+0x2d0>)
 802f598:	781a      	ldrb	r2, [r3, #0]
 802f59a:	5c8a      	ldrb	r2, [r1, r2]
 802f59c:	0710      	lsls	r0, r2, #28
 802f59e:	d5eb      	bpl.n	802f578 <__ssvfiscanf_r+0x4c>
 802f5a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f5a2:	3201      	adds	r2, #1
 802f5a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802f5a6:	6862      	ldr	r2, [r4, #4]
 802f5a8:	3301      	adds	r3, #1
 802f5aa:	3a01      	subs	r2, #1
 802f5ac:	6062      	str	r2, [r4, #4]
 802f5ae:	6023      	str	r3, [r4, #0]
 802f5b0:	e7ed      	b.n	802f58e <__ssvfiscanf_r+0x62>
 802f5b2:	2b25      	cmp	r3, #37	@ 0x25
 802f5b4:	f040 80ab 	bne.w	802f70e <__ssvfiscanf_r+0x1e2>
 802f5b8:	62be      	str	r6, [r7, #40]	@ 0x28
 802f5ba:	462a      	mov	r2, r5
 802f5bc:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f5c0:	60ba      	str	r2, [r7, #8]
 802f5c2:	2b7a      	cmp	r3, #122	@ 0x7a
 802f5c4:	d809      	bhi.n	802f5da <__ssvfiscanf_r+0xae>
 802f5c6:	2b42      	cmp	r3, #66	@ 0x42
 802f5c8:	d819      	bhi.n	802f5fe <__ssvfiscanf_r+0xd2>
 802f5ca:	2b2a      	cmp	r3, #42	@ 0x2a
 802f5cc:	f000 80c6 	beq.w	802f75c <__ssvfiscanf_r+0x230>
 802f5d0:	f200 808c 	bhi.w	802f6ec <__ssvfiscanf_r+0x1c0>
 802f5d4:	2b25      	cmp	r3, #37	@ 0x25
 802f5d6:	f000 8099 	beq.w	802f70c <__ssvfiscanf_r+0x1e0>
 802f5da:	f1bb 0f00 	cmp.w	fp, #0
 802f5de:	d008      	beq.n	802f5f2 <__ssvfiscanf_r+0xc6>
 802f5e0:	6a3b      	ldr	r3, [r7, #32]
 802f5e2:	3301      	adds	r3, #1
 802f5e4:	f000 86f4 	beq.w	80303d0 <__ssvfiscanf_r+0xea4>
 802f5e8:	f8db 0000 	ldr.w	r0, [fp]
 802f5ec:	2800      	cmp	r0, #0
 802f5ee:	f040 86f2 	bne.w	80303d6 <__ssvfiscanf_r+0xeaa>
 802f5f2:	6a38      	ldr	r0, [r7, #32]
 802f5f4:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 802f5f8:	46bd      	mov	sp, r7
 802f5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f5fe:	3b43      	subs	r3, #67	@ 0x43
 802f600:	2b37      	cmp	r3, #55	@ 0x37
 802f602:	d8ea      	bhi.n	802f5da <__ssvfiscanf_r+0xae>
 802f604:	a201      	add	r2, pc, #4	@ (adr r2, 802f60c <__ssvfiscanf_r+0xe0>)
 802f606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f60a:	bf00      	nop
 802f60c:	0802f899 	.word	0x0802f899
 802f610:	0802f7cf 	.word	0x0802f7cf
 802f614:	0802f5db 	.word	0x0802f5db
 802f618:	0802f5db 	.word	0x0802f5db
 802f61c:	0802f5db 	.word	0x0802f5db
 802f620:	0802f5db 	.word	0x0802f5db
 802f624:	0802f5db 	.word	0x0802f5db
 802f628:	0802f5db 	.word	0x0802f5db
 802f62c:	0802f5db 	.word	0x0802f5db
 802f630:	0802f7a3 	.word	0x0802f7a3
 802f634:	0802f5db 	.word	0x0802f5db
 802f638:	0802f5db 	.word	0x0802f5db
 802f63c:	0802f7d7 	.word	0x0802f7d7
 802f640:	0802f5db 	.word	0x0802f5db
 802f644:	0802f5db 	.word	0x0802f5db
 802f648:	0802f5db 	.word	0x0802f5db
 802f64c:	0802f809 	.word	0x0802f809
 802f650:	0802f5db 	.word	0x0802f5db
 802f654:	0802f5db 	.word	0x0802f5db
 802f658:	0802f5db 	.word	0x0802f5db
 802f65c:	0802f5db 	.word	0x0802f5db
 802f660:	0802f7ef 	.word	0x0802f7ef
 802f664:	0802f5db 	.word	0x0802f5db
 802f668:	0802f5db 	.word	0x0802f5db
 802f66c:	0802f885 	.word	0x0802f885
 802f670:	0802f5db 	.word	0x0802f5db
 802f674:	0802f5db 	.word	0x0802f5db
 802f678:	0802f5db 	.word	0x0802f5db
 802f67c:	0802f5db 	.word	0x0802f5db
 802f680:	0802f5db 	.word	0x0802f5db
 802f684:	0802f5db 	.word	0x0802f5db
 802f688:	0802f5db 	.word	0x0802f5db
 802f68c:	0802f89d 	.word	0x0802f89d
 802f690:	0802f7d3 	.word	0x0802f7d3
 802f694:	0802f5db 	.word	0x0802f5db
 802f698:	0802f5db 	.word	0x0802f5db
 802f69c:	0802f5db 	.word	0x0802f5db
 802f6a0:	0802f789 	.word	0x0802f789
 802f6a4:	0802f8e7 	.word	0x0802f8e7
 802f6a8:	0802f7a3 	.word	0x0802f7a3
 802f6ac:	0802f5db 	.word	0x0802f5db
 802f6b0:	0802f76d 	.word	0x0802f76d
 802f6b4:	0802f7b1 	.word	0x0802f7b1
 802f6b8:	0802f8ab 	.word	0x0802f8ab
 802f6bc:	0802f7db 	.word	0x0802f7db
 802f6c0:	0802f8a5 	.word	0x0802f8a5
 802f6c4:	0802f5db 	.word	0x0802f5db
 802f6c8:	0802f5db 	.word	0x0802f5db
 802f6cc:	0802f80d 	.word	0x0802f80d
 802f6d0:	0802f7ab 	.word	0x0802f7ab
 802f6d4:	0802f7e7 	.word	0x0802f7e7
 802f6d8:	0802f5db 	.word	0x0802f5db
 802f6dc:	0802f5db 	.word	0x0802f5db
 802f6e0:	0802f7ef 	.word	0x0802f7ef
 802f6e4:	0802f5db 	.word	0x0802f5db
 802f6e8:	0802f7ab 	.word	0x0802f7ab
 802f6ec:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 802f6f0:	2a09      	cmp	r2, #9
 802f6f2:	f63f af72 	bhi.w	802f5da <__ssvfiscanf_r+0xae>
 802f6f6:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 802f6fa:	f47f af6e 	bne.w	802f5da <__ssvfiscanf_r+0xae>
 802f6fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802f700:	220a      	movs	r2, #10
 802f702:	fb02 3301 	mla	r3, r2, r1, r3
 802f706:	3b30      	subs	r3, #48	@ 0x30
 802f708:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f70a:	e02d      	b.n	802f768 <__ssvfiscanf_r+0x23c>
 802f70c:	68bd      	ldr	r5, [r7, #8]
 802f70e:	6863      	ldr	r3, [r4, #4]
 802f710:	2b00      	cmp	r3, #0
 802f712:	dd0f      	ble.n	802f734 <__ssvfiscanf_r+0x208>
 802f714:	6823      	ldr	r3, [r4, #0]
 802f716:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802f71a:	7819      	ldrb	r1, [r3, #0]
 802f71c:	4291      	cmp	r1, r2
 802f71e:	f47f af5c 	bne.w	802f5da <__ssvfiscanf_r+0xae>
 802f722:	3301      	adds	r3, #1
 802f724:	6862      	ldr	r2, [r4, #4]
 802f726:	6023      	str	r3, [r4, #0]
 802f728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802f72a:	3a01      	subs	r2, #1
 802f72c:	3301      	adds	r3, #1
 802f72e:	6062      	str	r2, [r4, #4]
 802f730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f732:	e721      	b.n	802f578 <__ssvfiscanf_r+0x4c>
 802f734:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f736:	4621      	mov	r1, r4
 802f738:	f7ff fea1 	bl	802f47e <__ssrefill_r>
 802f73c:	2800      	cmp	r0, #0
 802f73e:	d0e9      	beq.n	802f714 <__ssvfiscanf_r+0x1e8>
 802f740:	6a3b      	ldr	r3, [r7, #32]
 802f742:	b11b      	cbz	r3, 802f74c <__ssvfiscanf_r+0x220>
 802f744:	89a3      	ldrh	r3, [r4, #12]
 802f746:	065b      	lsls	r3, r3, #25
 802f748:	f57f af47 	bpl.w	802f5da <__ssvfiscanf_r+0xae>
 802f74c:	f1bb 0f00 	cmp.w	fp, #0
 802f750:	f040 863e 	bne.w	80303d0 <__ssvfiscanf_r+0xea4>
 802f754:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802f758:	623b      	str	r3, [r7, #32]
 802f75a:	e74a      	b.n	802f5f2 <__ssvfiscanf_r+0xc6>
 802f75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f75e:	4333      	orrs	r3, r6
 802f760:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f762:	f47f af3a 	bne.w	802f5da <__ssvfiscanf_r+0xae>
 802f766:	2610      	movs	r6, #16
 802f768:	68bd      	ldr	r5, [r7, #8]
 802f76a:	e726      	b.n	802f5ba <__ssvfiscanf_r+0x8e>
 802f76c:	0731      	lsls	r1, r6, #28
 802f76e:	f47f af34 	bne.w	802f5da <__ssvfiscanf_r+0xae>
 802f772:	786b      	ldrb	r3, [r5, #1]
 802f774:	2b6c      	cmp	r3, #108	@ 0x6c
 802f776:	d104      	bne.n	802f782 <__ssvfiscanf_r+0x256>
 802f778:	1cab      	adds	r3, r5, #2
 802f77a:	60bb      	str	r3, [r7, #8]
 802f77c:	f046 0602 	orr.w	r6, r6, #2
 802f780:	e7f2      	b.n	802f768 <__ssvfiscanf_r+0x23c>
 802f782:	f046 0601 	orr.w	r6, r6, #1
 802f786:	e7ef      	b.n	802f768 <__ssvfiscanf_r+0x23c>
 802f788:	0732      	lsls	r2, r6, #28
 802f78a:	f47f af26 	bne.w	802f5da <__ssvfiscanf_r+0xae>
 802f78e:	786b      	ldrb	r3, [r5, #1]
 802f790:	2b68      	cmp	r3, #104	@ 0x68
 802f792:	bf03      	ittte	eq
 802f794:	1cab      	addeq	r3, r5, #2
 802f796:	60bb      	streq	r3, [r7, #8]
 802f798:	f046 0608 	orreq.w	r6, r6, #8
 802f79c:	f046 0604 	orrne.w	r6, r6, #4
 802f7a0:	e7e2      	b.n	802f768 <__ssvfiscanf_r+0x23c>
 802f7a2:	0733      	lsls	r3, r6, #28
 802f7a4:	f47f af19 	bne.w	802f5da <__ssvfiscanf_r+0xae>
 802f7a8:	e7e8      	b.n	802f77c <__ssvfiscanf_r+0x250>
 802f7aa:	0735      	lsls	r5, r6, #28
 802f7ac:	d0dc      	beq.n	802f768 <__ssvfiscanf_r+0x23c>
 802f7ae:	e714      	b.n	802f5da <__ssvfiscanf_r+0xae>
 802f7b0:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 802f7b4:	f47f af11 	bne.w	802f5da <__ssvfiscanf_r+0xae>
 802f7b8:	f1bb 0f00 	cmp.w	fp, #0
 802f7bc:	d104      	bne.n	802f7c8 <__ssvfiscanf_r+0x29c>
 802f7be:	b082      	sub	sp, #8
 802f7c0:	f10d 0b08 	add.w	fp, sp, #8
 802f7c4:	e9cb 3300 	strd	r3, r3, [fp]
 802f7c8:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 802f7cc:	e7cc      	b.n	802f768 <__ssvfiscanf_r+0x23c>
 802f7ce:	f046 0601 	orr.w	r6, r6, #1
 802f7d2:	4b0b      	ldr	r3, [pc, #44]	@ (802f800 <__ssvfiscanf_r+0x2d4>)
 802f7d4:	e008      	b.n	802f7e8 <__ssvfiscanf_r+0x2bc>
 802f7d6:	f046 0601 	orr.w	r6, r6, #1
 802f7da:	4b0a      	ldr	r3, [pc, #40]	@ (802f804 <__ssvfiscanf_r+0x2d8>)
 802f7dc:	60fb      	str	r3, [r7, #12]
 802f7de:	2308      	movs	r3, #8
 802f7e0:	617b      	str	r3, [r7, #20]
 802f7e2:	2503      	movs	r5, #3
 802f7e4:	e013      	b.n	802f80e <__ssvfiscanf_r+0x2e2>
 802f7e6:	4b07      	ldr	r3, [pc, #28]	@ (802f804 <__ssvfiscanf_r+0x2d8>)
 802f7e8:	60fb      	str	r3, [r7, #12]
 802f7ea:	230a      	movs	r3, #10
 802f7ec:	e7f8      	b.n	802f7e0 <__ssvfiscanf_r+0x2b4>
 802f7ee:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 802f7f2:	4b04      	ldr	r3, [pc, #16]	@ (802f804 <__ssvfiscanf_r+0x2d8>)
 802f7f4:	60fb      	str	r3, [r7, #12]
 802f7f6:	2310      	movs	r3, #16
 802f7f8:	e7f2      	b.n	802f7e0 <__ssvfiscanf_r+0x2b4>
 802f7fa:	bf00      	nop
 802f7fc:	0803dff5 	.word	0x0803dff5
 802f800:	0802c179 	.word	0x0802c179
 802f804:	080353d9 	.word	0x080353d9
 802f808:	f046 0601 	orr.w	r6, r6, #1
 802f80c:	2502      	movs	r5, #2
 802f80e:	6863      	ldr	r3, [r4, #4]
 802f810:	2b00      	cmp	r3, #0
 802f812:	dd6c      	ble.n	802f8ee <__ssvfiscanf_r+0x3c2>
 802f814:	0671      	lsls	r1, r6, #25
 802f816:	d407      	bmi.n	802f828 <__ssvfiscanf_r+0x2fc>
 802f818:	f8df 8360 	ldr.w	r8, [pc, #864]	@ 802fb7c <__ssvfiscanf_r+0x650>
 802f81c:	6823      	ldr	r3, [r4, #0]
 802f81e:	781a      	ldrb	r2, [r3, #0]
 802f820:	f818 2002 	ldrb.w	r2, [r8, r2]
 802f824:	0712      	lsls	r2, r2, #28
 802f826:	d469      	bmi.n	802f8fc <__ssvfiscanf_r+0x3d0>
 802f828:	2d02      	cmp	r5, #2
 802f82a:	f000 8359 	beq.w	802fee0 <__ssvfiscanf_r+0x9b4>
 802f82e:	2d03      	cmp	r5, #3
 802f830:	f000 84de 	beq.w	80301f0 <__ssvfiscanf_r+0xcc4>
 802f834:	f006 0310 	and.w	r3, r6, #16
 802f838:	2d01      	cmp	r5, #1
 802f83a:	613b      	str	r3, [r7, #16]
 802f83c:	f006 0501 	and.w	r5, r6, #1
 802f840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f842:	f000 819d 	beq.w	802fb80 <__ssvfiscanf_r+0x654>
 802f846:	2b01      	cmp	r3, #1
 802f848:	bf38      	it	cc
 802f84a:	2301      	movcc	r3, #1
 802f84c:	4698      	mov	r8, r3
 802f84e:	693b      	ldr	r3, [r7, #16]
 802f850:	2d00      	cmp	r5, #0
 802f852:	f000 8128 	beq.w	802faa6 <__ssvfiscanf_r+0x57a>
 802f856:	2b00      	cmp	r3, #0
 802f858:	f040 80c5 	bne.w	802f9e6 <__ssvfiscanf_r+0x4ba>
 802f85c:	69fb      	ldr	r3, [r7, #28]
 802f85e:	0636      	lsls	r6, r6, #24
 802f860:	f853 5b04 	ldr.w	r5, [r3], #4
 802f864:	61fb      	str	r3, [r7, #28]
 802f866:	f140 80c4 	bpl.w	802f9f2 <__ssvfiscanf_r+0x4c6>
 802f86a:	2d00      	cmp	r5, #0
 802f86c:	f43f aeb5 	beq.w	802f5da <__ssvfiscanf_r+0xae>
 802f870:	2080      	movs	r0, #128	@ 0x80
 802f872:	f7fe fed1 	bl	802e618 <malloc>
 802f876:	4606      	mov	r6, r0
 802f878:	2800      	cmp	r0, #0
 802f87a:	d152      	bne.n	802f922 <__ssvfiscanf_r+0x3f6>
 802f87c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802f880:	623b      	str	r3, [r7, #32]
 802f882:	e6aa      	b.n	802f5da <__ssvfiscanf_r+0xae>
 802f884:	68b9      	ldr	r1, [r7, #8]
 802f886:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 802f88a:	f005 fdd8 	bl	803543e <__sccl>
 802f88e:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802f892:	60b8      	str	r0, [r7, #8]
 802f894:	2501      	movs	r5, #1
 802f896:	e7ba      	b.n	802f80e <__ssvfiscanf_r+0x2e2>
 802f898:	f046 0601 	orr.w	r6, r6, #1
 802f89c:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802f8a0:	2500      	movs	r5, #0
 802f8a2:	e7b4      	b.n	802f80e <__ssvfiscanf_r+0x2e2>
 802f8a4:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 802f8a8:	e7a3      	b.n	802f7f2 <__ssvfiscanf_r+0x2c6>
 802f8aa:	06f0      	lsls	r0, r6, #27
 802f8ac:	f53f ae65 	bmi.w	802f57a <__ssvfiscanf_r+0x4e>
 802f8b0:	69fa      	ldr	r2, [r7, #28]
 802f8b2:	0731      	lsls	r1, r6, #28
 802f8b4:	f852 3b04 	ldr.w	r3, [r2], #4
 802f8b8:	61fa      	str	r2, [r7, #28]
 802f8ba:	d502      	bpl.n	802f8c2 <__ssvfiscanf_r+0x396>
 802f8bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f8be:	701a      	strb	r2, [r3, #0]
 802f8c0:	e65b      	b.n	802f57a <__ssvfiscanf_r+0x4e>
 802f8c2:	0772      	lsls	r2, r6, #29
 802f8c4:	d502      	bpl.n	802f8cc <__ssvfiscanf_r+0x3a0>
 802f8c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f8c8:	801a      	strh	r2, [r3, #0]
 802f8ca:	e656      	b.n	802f57a <__ssvfiscanf_r+0x4e>
 802f8cc:	07f5      	lsls	r5, r6, #31
 802f8ce:	d502      	bpl.n	802f8d6 <__ssvfiscanf_r+0x3aa>
 802f8d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f8d2:	601a      	str	r2, [r3, #0]
 802f8d4:	e651      	b.n	802f57a <__ssvfiscanf_r+0x4e>
 802f8d6:	07b0      	lsls	r0, r6, #30
 802f8d8:	d5fa      	bpl.n	802f8d0 <__ssvfiscanf_r+0x3a4>
 802f8da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f8dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802f8de:	17d2      	asrs	r2, r2, #31
 802f8e0:	e9c3 1200 	strd	r1, r2, [r3]
 802f8e4:	e649      	b.n	802f57a <__ssvfiscanf_r+0x4e>
 802f8e6:	4ba4      	ldr	r3, [pc, #656]	@ (802fb78 <__ssvfiscanf_r+0x64c>)
 802f8e8:	60fb      	str	r3, [r7, #12]
 802f8ea:	2300      	movs	r3, #0
 802f8ec:	e778      	b.n	802f7e0 <__ssvfiscanf_r+0x2b4>
 802f8ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f8f0:	4621      	mov	r1, r4
 802f8f2:	f7ff fdc4 	bl	802f47e <__ssrefill_r>
 802f8f6:	2800      	cmp	r0, #0
 802f8f8:	d08c      	beq.n	802f814 <__ssvfiscanf_r+0x2e8>
 802f8fa:	e721      	b.n	802f740 <__ssvfiscanf_r+0x214>
 802f8fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f8fe:	3201      	adds	r2, #1
 802f900:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802f902:	6862      	ldr	r2, [r4, #4]
 802f904:	3a01      	subs	r2, #1
 802f906:	2a00      	cmp	r2, #0
 802f908:	6062      	str	r2, [r4, #4]
 802f90a:	dd02      	ble.n	802f912 <__ssvfiscanf_r+0x3e6>
 802f90c:	3301      	adds	r3, #1
 802f90e:	6023      	str	r3, [r4, #0]
 802f910:	e784      	b.n	802f81c <__ssvfiscanf_r+0x2f0>
 802f912:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f914:	4621      	mov	r1, r4
 802f916:	f7ff fdb2 	bl	802f47e <__ssrefill_r>
 802f91a:	2800      	cmp	r0, #0
 802f91c:	f43f af7e 	beq.w	802f81c <__ssvfiscanf_r+0x2f0>
 802f920:	e70e      	b.n	802f740 <__ssvfiscanf_r+0x214>
 802f922:	f8bb a006 	ldrh.w	sl, [fp, #6]
 802f926:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 802f92a:	6028      	str	r0, [r5, #0]
 802f92c:	45ca      	cmp	sl, r9
 802f92e:	d311      	bcc.n	802f954 <__ssvfiscanf_r+0x428>
 802f930:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802f934:	4599      	cmp	r9, r3
 802f936:	d8a1      	bhi.n	802f87c <__ssvfiscanf_r+0x350>
 802f938:	f109 0908 	add.w	r9, r9, #8
 802f93c:	f8db 0000 	ldr.w	r0, [fp]
 802f940:	ea4f 0189 	mov.w	r1, r9, lsl #2
 802f944:	f004 fc88 	bl	8034258 <realloc>
 802f948:	2800      	cmp	r0, #0
 802f94a:	d097      	beq.n	802f87c <__ssvfiscanf_r+0x350>
 802f94c:	f8cb 0000 	str.w	r0, [fp]
 802f950:	f8ab 9004 	strh.w	r9, [fp, #4]
 802f954:	f8db 3000 	ldr.w	r3, [fp]
 802f958:	f10a 0201 	add.w	r2, sl, #1
 802f95c:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 802f960:	f8ab 2006 	strh.w	r2, [fp, #6]
 802f964:	46aa      	mov	sl, r5
 802f966:	f04f 0920 	mov.w	r9, #32
 802f96a:	4635      	mov	r5, r6
 802f96c:	2200      	movs	r2, #0
 802f96e:	62ba      	str	r2, [r7, #40]	@ 0x28
 802f970:	f005 feb0 	bl	80356d4 <__locale_mb_cur_max>
 802f974:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802f976:	4290      	cmp	r0, r2
 802f978:	f43f aee2 	beq.w	802f740 <__ssvfiscanf_r+0x214>
 802f97c:	6821      	ldr	r1, [r4, #0]
 802f97e:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 802f982:	f811 0b01 	ldrb.w	r0, [r1], #1
 802f986:	f80c 0002 	strb.w	r0, [ip, r2]
 802f98a:	1c53      	adds	r3, r2, #1
 802f98c:	6862      	ldr	r2, [r4, #4]
 802f98e:	3a01      	subs	r2, #1
 802f990:	e9c4 1200 	strd	r1, r2, [r4]
 802f994:	69ba      	ldr	r2, [r7, #24]
 802f996:	2a03      	cmp	r2, #3
 802f998:	d102      	bne.n	802f9a0 <__ssvfiscanf_r+0x474>
 802f99a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802f99c:	2a04      	cmp	r2, #4
 802f99e:	d007      	beq.n	802f9b0 <__ssvfiscanf_r+0x484>
 802f9a0:	2208      	movs	r2, #8
 802f9a2:	2100      	movs	r1, #0
 802f9a4:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802f9a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f9aa:	f7fc ff29 	bl	802c800 <memset>
 802f9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f9b0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 802f9b4:	9200      	str	r2, [sp, #0]
 802f9b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f9b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f9ba:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802f9be:	4629      	mov	r1, r5
 802f9c0:	f006 f81c 	bl	80359fc <_mbrtowc_r>
 802f9c4:	4603      	mov	r3, r0
 802f9c6:	61b8      	str	r0, [r7, #24]
 802f9c8:	1c58      	adds	r0, r3, #1
 802f9ca:	f43f aeb9 	beq.w	802f740 <__ssvfiscanf_r+0x214>
 802f9ce:	461a      	mov	r2, r3
 802f9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f9d2:	b9b2      	cbnz	r2, 802fa02 <__ssvfiscanf_r+0x4d6>
 802f9d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f9d6:	441a      	add	r2, r3
 802f9d8:	4613      	mov	r3, r2
 802f9da:	693a      	ldr	r2, [r7, #16]
 802f9dc:	b172      	cbz	r2, 802f9fc <__ssvfiscanf_r+0x4d0>
 802f9de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f9e0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802f9e4:	e019      	b.n	802fa1a <__ssvfiscanf_r+0x4ee>
 802f9e6:	f04f 0900 	mov.w	r9, #0
 802f9ea:	464e      	mov	r6, r9
 802f9ec:	46ca      	mov	sl, r9
 802f9ee:	464d      	mov	r5, r9
 802f9f0:	e7bc      	b.n	802f96c <__ssvfiscanf_r+0x440>
 802f9f2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802f9f6:	464e      	mov	r6, r9
 802f9f8:	46ca      	mov	sl, r9
 802f9fa:	e7b7      	b.n	802f96c <__ssvfiscanf_r+0x440>
 802f9fc:	693a      	ldr	r2, [r7, #16]
 802f9fe:	602a      	str	r2, [r5, #0]
 802fa00:	e7ed      	b.n	802f9de <__ssvfiscanf_r+0x4b2>
 802fa02:	69ba      	ldr	r2, [r7, #24]
 802fa04:	3202      	adds	r2, #2
 802fa06:	d024      	beq.n	802fa52 <__ssvfiscanf_r+0x526>
 802fa08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802fa0a:	441a      	add	r2, r3
 802fa0c:	69bb      	ldr	r3, [r7, #24]
 802fa0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802fa10:	2b03      	cmp	r3, #3
 802fa12:	d1e5      	bne.n	802f9e0 <__ssvfiscanf_r+0x4b4>
 802fa14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802fa16:	2b04      	cmp	r3, #4
 802fa18:	d1e2      	bne.n	802f9e0 <__ssvfiscanf_r+0x4b4>
 802fa1a:	693b      	ldr	r3, [r7, #16]
 802fa1c:	b9bb      	cbnz	r3, 802fa4e <__ssvfiscanf_r+0x522>
 802fa1e:	f1ba 0f00 	cmp.w	sl, #0
 802fa22:	d013      	beq.n	802fa4c <__ssvfiscanf_r+0x520>
 802fa24:	1bab      	subs	r3, r5, r6
 802fa26:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 802fa2a:	d80f      	bhi.n	802fa4c <__ssvfiscanf_r+0x520>
 802fa2c:	4630      	mov	r0, r6
 802fa2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802fa32:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fa34:	f004 fc10 	bl	8034258 <realloc>
 802fa38:	4606      	mov	r6, r0
 802fa3a:	2800      	cmp	r0, #0
 802fa3c:	f43f af1e 	beq.w	802f87c <__ssvfiscanf_r+0x350>
 802fa40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fa42:	f8ca 0000 	str.w	r0, [sl]
 802fa46:	18c5      	adds	r5, r0, r3
 802fa48:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802fa4c:	3504      	adds	r5, #4
 802fa4e:	2200      	movs	r2, #0
 802fa50:	e000      	b.n	802fa54 <__ssvfiscanf_r+0x528>
 802fa52:	461a      	mov	r2, r3
 802fa54:	6863      	ldr	r3, [r4, #4]
 802fa56:	2b00      	cmp	r3, #0
 802fa58:	dc13      	bgt.n	802fa82 <__ssvfiscanf_r+0x556>
 802fa5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fa5c:	62ba      	str	r2, [r7, #40]	@ 0x28
 802fa5e:	4621      	mov	r1, r4
 802fa60:	f7ff fd0d 	bl	802f47e <__ssrefill_r>
 802fa64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802fa66:	b160      	cbz	r0, 802fa82 <__ssvfiscanf_r+0x556>
 802fa68:	2a00      	cmp	r2, #0
 802fa6a:	f47f ae69 	bne.w	802f740 <__ssvfiscanf_r+0x214>
 802fa6e:	f1ba 0f00 	cmp.w	sl, #0
 802fa72:	d10b      	bne.n	802fa8c <__ssvfiscanf_r+0x560>
 802fa74:	693b      	ldr	r3, [r7, #16]
 802fa76:	2b00      	cmp	r3, #0
 802fa78:	f47f ad7f 	bne.w	802f57a <__ssvfiscanf_r+0x4e>
 802fa7c:	6a3b      	ldr	r3, [r7, #32]
 802fa7e:	3301      	adds	r3, #1
 802fa80:	e573      	b.n	802f56a <__ssvfiscanf_r+0x3e>
 802fa82:	f1b8 0f00 	cmp.w	r8, #0
 802fa86:	f47f af72 	bne.w	802f96e <__ssvfiscanf_r+0x442>
 802fa8a:	e7f0      	b.n	802fa6e <__ssvfiscanf_r+0x542>
 802fa8c:	1ba9      	subs	r1, r5, r6
 802fa8e:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 802fa92:	d9ef      	bls.n	802fa74 <__ssvfiscanf_r+0x548>
 802fa94:	f8da 0000 	ldr.w	r0, [sl]
 802fa98:	f004 fbde 	bl	8034258 <realloc>
 802fa9c:	2800      	cmp	r0, #0
 802fa9e:	d0e9      	beq.n	802fa74 <__ssvfiscanf_r+0x548>
 802faa0:	f8ca 0000 	str.w	r0, [sl]
 802faa4:	e7e6      	b.n	802fa74 <__ssvfiscanf_r+0x548>
 802faa6:	b1db      	cbz	r3, 802fae0 <__ssvfiscanf_r+0x5b4>
 802faa8:	e9d4 2300 	ldrd	r2, r3, [r4]
 802faac:	4598      	cmp	r8, r3
 802faae:	dd10      	ble.n	802fad2 <__ssvfiscanf_r+0x5a6>
 802fab0:	441a      	add	r2, r3
 802fab2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fab4:	6022      	str	r2, [r4, #0]
 802fab6:	4621      	mov	r1, r4
 802fab8:	441d      	add	r5, r3
 802faba:	eba8 0803 	sub.w	r8, r8, r3
 802fabe:	f7ff fcde 	bl	802f47e <__ssrefill_r>
 802fac2:	2800      	cmp	r0, #0
 802fac4:	d0f0      	beq.n	802faa8 <__ssvfiscanf_r+0x57c>
 802fac6:	2d00      	cmp	r5, #0
 802fac8:	f43f ae3a 	beq.w	802f740 <__ssvfiscanf_r+0x214>
 802facc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802face:	442b      	add	r3, r5
 802fad0:	e1ff      	b.n	802fed2 <__ssvfiscanf_r+0x9a6>
 802fad2:	eba3 0308 	sub.w	r3, r3, r8
 802fad6:	4442      	add	r2, r8
 802fad8:	4445      	add	r5, r8
 802fada:	6063      	str	r3, [r4, #4]
 802fadc:	6022      	str	r2, [r4, #0]
 802fade:	e7f5      	b.n	802facc <__ssvfiscanf_r+0x5a0>
 802fae0:	69fb      	ldr	r3, [r7, #28]
 802fae2:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802fae6:	f853 5b04 	ldr.w	r5, [r3], #4
 802faea:	61fb      	str	r3, [r7, #28]
 802faec:	d02c      	beq.n	802fb48 <__ssvfiscanf_r+0x61c>
 802faee:	2d00      	cmp	r5, #0
 802faf0:	f43f ad73 	beq.w	802f5da <__ssvfiscanf_r+0xae>
 802faf4:	4640      	mov	r0, r8
 802faf6:	f7fe fd8f 	bl	802e618 <malloc>
 802fafa:	4681      	mov	r9, r0
 802fafc:	2800      	cmp	r0, #0
 802fafe:	f43f ae25 	beq.w	802f74c <__ssvfiscanf_r+0x220>
 802fb02:	f8bb a006 	ldrh.w	sl, [fp, #6]
 802fb06:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 802fb0a:	6028      	str	r0, [r5, #0]
 802fb0c:	45b2      	cmp	sl, r6
 802fb0e:	d311      	bcc.n	802fb34 <__ssvfiscanf_r+0x608>
 802fb10:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802fb14:	429e      	cmp	r6, r3
 802fb16:	f200 845b 	bhi.w	80303d0 <__ssvfiscanf_r+0xea4>
 802fb1a:	3608      	adds	r6, #8
 802fb1c:	f8db 0000 	ldr.w	r0, [fp]
 802fb20:	00b1      	lsls	r1, r6, #2
 802fb22:	f004 fb99 	bl	8034258 <realloc>
 802fb26:	2800      	cmp	r0, #0
 802fb28:	f000 8452 	beq.w	80303d0 <__ssvfiscanf_r+0xea4>
 802fb2c:	f8cb 0000 	str.w	r0, [fp]
 802fb30:	f8ab 6004 	strh.w	r6, [fp, #4]
 802fb34:	f8db 3000 	ldr.w	r3, [fp]
 802fb38:	f10a 0201 	add.w	r2, sl, #1
 802fb3c:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 802fb40:	462e      	mov	r6, r5
 802fb42:	f8ab 2006 	strh.w	r2, [fp, #6]
 802fb46:	464d      	mov	r5, r9
 802fb48:	9400      	str	r4, [sp, #0]
 802fb4a:	4629      	mov	r1, r5
 802fb4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fb4e:	4643      	mov	r3, r8
 802fb50:	2201      	movs	r2, #1
 802fb52:	f7ff fcb1 	bl	802f4b8 <_sfread_r>
 802fb56:	4605      	mov	r5, r0
 802fb58:	2800      	cmp	r0, #0
 802fb5a:	f43f adf1 	beq.w	802f740 <__ssvfiscanf_r+0x214>
 802fb5e:	b13e      	cbz	r6, 802fb70 <__ssvfiscanf_r+0x644>
 802fb60:	4580      	cmp	r8, r0
 802fb62:	d905      	bls.n	802fb70 <__ssvfiscanf_r+0x644>
 802fb64:	4601      	mov	r1, r0
 802fb66:	6830      	ldr	r0, [r6, #0]
 802fb68:	f004 fb76 	bl	8034258 <realloc>
 802fb6c:	b100      	cbz	r0, 802fb70 <__ssvfiscanf_r+0x644>
 802fb6e:	6030      	str	r0, [r6, #0]
 802fb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fb72:	442b      	add	r3, r5
 802fb74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802fb76:	e781      	b.n	802fa7c <__ssvfiscanf_r+0x550>
 802fb78:	0802c179 	.word	0x0802c179
 802fb7c:	0803dff5 	.word	0x0803dff5
 802fb80:	2b00      	cmp	r3, #0
 802fb82:	bf08      	it	eq
 802fb84:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802fb88:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fb8a:	693b      	ldr	r3, [r7, #16]
 802fb8c:	2d00      	cmp	r5, #0
 802fb8e:	f000 80fe 	beq.w	802fd8e <__ssvfiscanf_r+0x862>
 802fb92:	2b00      	cmp	r3, #0
 802fb94:	f040 80a3 	bne.w	802fcde <__ssvfiscanf_r+0x7b2>
 802fb98:	69fb      	ldr	r3, [r7, #28]
 802fb9a:	0631      	lsls	r1, r6, #24
 802fb9c:	f853 5b04 	ldr.w	r5, [r3], #4
 802fba0:	61fb      	str	r3, [r7, #28]
 802fba2:	f140 80a3 	bpl.w	802fcec <__ssvfiscanf_r+0x7c0>
 802fba6:	2d00      	cmp	r5, #0
 802fba8:	f43f ad17 	beq.w	802f5da <__ssvfiscanf_r+0xae>
 802fbac:	2080      	movs	r0, #128	@ 0x80
 802fbae:	f7fe fd33 	bl	802e618 <malloc>
 802fbb2:	4680      	mov	r8, r0
 802fbb4:	2800      	cmp	r0, #0
 802fbb6:	f43f ae61 	beq.w	802f87c <__ssvfiscanf_r+0x350>
 802fbba:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802fbbe:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 802fbc2:	6028      	str	r0, [r5, #0]
 802fbc4:	45b1      	cmp	r9, r6
 802fbc6:	d311      	bcc.n	802fbec <__ssvfiscanf_r+0x6c0>
 802fbc8:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802fbcc:	429e      	cmp	r6, r3
 802fbce:	f63f ae55 	bhi.w	802f87c <__ssvfiscanf_r+0x350>
 802fbd2:	3608      	adds	r6, #8
 802fbd4:	f8db 0000 	ldr.w	r0, [fp]
 802fbd8:	00b1      	lsls	r1, r6, #2
 802fbda:	f004 fb3d 	bl	8034258 <realloc>
 802fbde:	2800      	cmp	r0, #0
 802fbe0:	f43f ae4c 	beq.w	802f87c <__ssvfiscanf_r+0x350>
 802fbe4:	f8cb 0000 	str.w	r0, [fp]
 802fbe8:	f8ab 6004 	strh.w	r6, [fp, #4]
 802fbec:	f8db 3000 	ldr.w	r3, [fp]
 802fbf0:	f109 0201 	add.w	r2, r9, #1
 802fbf4:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802fbf8:	46aa      	mov	sl, r5
 802fbfa:	f8ab 2006 	strh.w	r2, [fp, #6]
 802fbfe:	4645      	mov	r5, r8
 802fc00:	f04f 0920 	mov.w	r9, #32
 802fc04:	2600      	movs	r6, #0
 802fc06:	f005 fd65 	bl	80356d4 <__locale_mb_cur_max>
 802fc0a:	42b0      	cmp	r0, r6
 802fc0c:	f43f ad98 	beq.w	802f740 <__ssvfiscanf_r+0x214>
 802fc10:	1c73      	adds	r3, r6, #1
 802fc12:	607b      	str	r3, [r7, #4]
 802fc14:	6823      	ldr	r3, [r4, #0]
 802fc16:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802fc1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802fc1e:	558a      	strb	r2, [r1, r6]
 802fc20:	6862      	ldr	r2, [r4, #4]
 802fc22:	3a01      	subs	r2, #1
 802fc24:	e9c4 3200 	strd	r3, r2, [r4]
 802fc28:	69bb      	ldr	r3, [r7, #24]
 802fc2a:	2b03      	cmp	r3, #3
 802fc2c:	d102      	bne.n	802fc34 <__ssvfiscanf_r+0x708>
 802fc2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802fc30:	2b04      	cmp	r3, #4
 802fc32:	d005      	beq.n	802fc40 <__ssvfiscanf_r+0x714>
 802fc34:	2208      	movs	r2, #8
 802fc36:	2100      	movs	r1, #0
 802fc38:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 802fc3c:	f7fc fde0 	bl	802c800 <memset>
 802fc40:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 802fc44:	9300      	str	r3, [sp, #0]
 802fc46:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802fc4a:	687b      	ldr	r3, [r7, #4]
 802fc4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fc4e:	4629      	mov	r1, r5
 802fc50:	f005 fed4 	bl	80359fc <_mbrtowc_r>
 802fc54:	1c42      	adds	r2, r0, #1
 802fc56:	61b8      	str	r0, [r7, #24]
 802fc58:	f43f ad72 	beq.w	802f740 <__ssvfiscanf_r+0x214>
 802fc5c:	2800      	cmp	r0, #0
 802fc5e:	d14a      	bne.n	802fcf6 <__ssvfiscanf_r+0x7ca>
 802fc60:	6028      	str	r0, [r5, #0]
 802fc62:	682e      	ldr	r6, [r5, #0]
 802fc64:	1c73      	adds	r3, r6, #1
 802fc66:	d056      	beq.n	802fd16 <__ssvfiscanf_r+0x7ea>
 802fc68:	2208      	movs	r2, #8
 802fc6a:	2100      	movs	r1, #0
 802fc6c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802fc70:	f7fc fdc6 	bl	802c800 <memset>
 802fc74:	4b99      	ldr	r3, [pc, #612]	@ (802fedc <__ssvfiscanf_r+0x9b0>)
 802fc76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fc78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 802fc7c:	603b      	str	r3, [r7, #0]
 802fc7e:	4632      	mov	r2, r6
 802fc80:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802fc84:	683e      	ldr	r6, [r7, #0]
 802fc86:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 802fc8a:	47b0      	blx	r6
 802fc8c:	2801      	cmp	r0, #1
 802fc8e:	d144      	bne.n	802fd1a <__ssvfiscanf_r+0x7ee>
 802fc90:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 802fc94:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 802fc98:	5c9b      	ldrb	r3, [r3, r2]
 802fc9a:	2b00      	cmp	r3, #0
 802fc9c:	d148      	bne.n	802fd30 <__ssvfiscanf_r+0x804>
 802fc9e:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 802fca2:	687b      	ldr	r3, [r7, #4]
 802fca4:	2b00      	cmp	r3, #0
 802fca6:	d13a      	bne.n	802fd1e <__ssvfiscanf_r+0x7f2>
 802fca8:	693b      	ldr	r3, [r7, #16]
 802fcaa:	2b00      	cmp	r3, #0
 802fcac:	f47f ac65 	bne.w	802f57a <__ssvfiscanf_r+0x4e>
 802fcb0:	602b      	str	r3, [r5, #0]
 802fcb2:	f1ba 0f00 	cmp.w	sl, #0
 802fcb6:	f43f aee1 	beq.w	802fa7c <__ssvfiscanf_r+0x550>
 802fcba:	eba5 0108 	sub.w	r1, r5, r8
 802fcbe:	108b      	asrs	r3, r1, #2
 802fcc0:	3301      	adds	r3, #1
 802fcc2:	4599      	cmp	r9, r3
 802fcc4:	f67f aeda 	bls.w	802fa7c <__ssvfiscanf_r+0x550>
 802fcc8:	f8da 0000 	ldr.w	r0, [sl]
 802fccc:	3104      	adds	r1, #4
 802fcce:	f004 fac3 	bl	8034258 <realloc>
 802fcd2:	2800      	cmp	r0, #0
 802fcd4:	f43f aed2 	beq.w	802fa7c <__ssvfiscanf_r+0x550>
 802fcd8:	f8ca 0000 	str.w	r0, [sl]
 802fcdc:	e6ce      	b.n	802fa7c <__ssvfiscanf_r+0x550>
 802fcde:	f04f 0900 	mov.w	r9, #0
 802fce2:	46c8      	mov	r8, r9
 802fce4:	46ca      	mov	sl, r9
 802fce6:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 802fcea:	e78b      	b.n	802fc04 <__ssvfiscanf_r+0x6d8>
 802fcec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802fcf0:	46c8      	mov	r8, r9
 802fcf2:	46ca      	mov	sl, r9
 802fcf4:	e786      	b.n	802fc04 <__ssvfiscanf_r+0x6d8>
 802fcf6:	69bb      	ldr	r3, [r7, #24]
 802fcf8:	3302      	adds	r3, #2
 802fcfa:	d1b2      	bne.n	802fc62 <__ssvfiscanf_r+0x736>
 802fcfc:	687e      	ldr	r6, [r7, #4]
 802fcfe:	6863      	ldr	r3, [r4, #4]
 802fd00:	2b00      	cmp	r3, #0
 802fd02:	dc3f      	bgt.n	802fd84 <__ssvfiscanf_r+0x858>
 802fd04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fd06:	4621      	mov	r1, r4
 802fd08:	f7ff fbb9 	bl	802f47e <__ssrefill_r>
 802fd0c:	2800      	cmp	r0, #0
 802fd0e:	d039      	beq.n	802fd84 <__ssvfiscanf_r+0x858>
 802fd10:	2e00      	cmp	r6, #0
 802fd12:	d0c9      	beq.n	802fca8 <__ssvfiscanf_r+0x77c>
 802fd14:	e514      	b.n	802f740 <__ssvfiscanf_r+0x214>
 802fd16:	4632      	mov	r2, r6
 802fd18:	e7bc      	b.n	802fc94 <__ssvfiscanf_r+0x768>
 802fd1a:	2200      	movs	r2, #0
 802fd1c:	e7ba      	b.n	802fc94 <__ssvfiscanf_r+0x768>
 802fd1e:	687b      	ldr	r3, [r7, #4]
 802fd20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fd22:	3b01      	subs	r3, #1
 802fd24:	4622      	mov	r2, r4
 802fd26:	5cf1      	ldrb	r1, [r6, r3]
 802fd28:	607b      	str	r3, [r7, #4]
 802fd2a:	f7ff fb6b 	bl	802f404 <_sungetc_r>
 802fd2e:	e7b8      	b.n	802fca2 <__ssvfiscanf_r+0x776>
 802fd30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fd32:	687a      	ldr	r2, [r7, #4]
 802fd34:	4413      	add	r3, r2
 802fd36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802fd38:	69bb      	ldr	r3, [r7, #24]
 802fd3a:	2b03      	cmp	r3, #3
 802fd3c:	d102      	bne.n	802fd44 <__ssvfiscanf_r+0x818>
 802fd3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802fd40:	2b04      	cmp	r3, #4
 802fd42:	d002      	beq.n	802fd4a <__ssvfiscanf_r+0x81e>
 802fd44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fd46:	3b01      	subs	r3, #1
 802fd48:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fd4a:	693b      	ldr	r3, [r7, #16]
 802fd4c:	b9c3      	cbnz	r3, 802fd80 <__ssvfiscanf_r+0x854>
 802fd4e:	3504      	adds	r5, #4
 802fd50:	f1ba 0f00 	cmp.w	sl, #0
 802fd54:	d014      	beq.n	802fd80 <__ssvfiscanf_r+0x854>
 802fd56:	eba5 0608 	sub.w	r6, r5, r8
 802fd5a:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 802fd5e:	d80d      	bhi.n	802fd7c <__ssvfiscanf_r+0x850>
 802fd60:	4640      	mov	r0, r8
 802fd62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802fd66:	f004 fa77 	bl	8034258 <realloc>
 802fd6a:	4680      	mov	r8, r0
 802fd6c:	2800      	cmp	r0, #0
 802fd6e:	f43f ad85 	beq.w	802f87c <__ssvfiscanf_r+0x350>
 802fd72:	1985      	adds	r5, r0, r6
 802fd74:	f8ca 0000 	str.w	r0, [sl]
 802fd78:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802fd7c:	693e      	ldr	r6, [r7, #16]
 802fd7e:	e7be      	b.n	802fcfe <__ssvfiscanf_r+0x7d2>
 802fd80:	2600      	movs	r6, #0
 802fd82:	e7bc      	b.n	802fcfe <__ssvfiscanf_r+0x7d2>
 802fd84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fd86:	2b00      	cmp	r3, #0
 802fd88:	f47f af3d 	bne.w	802fc06 <__ssvfiscanf_r+0x6da>
 802fd8c:	e78c      	b.n	802fca8 <__ssvfiscanf_r+0x77c>
 802fd8e:	b1e3      	cbz	r3, 802fdca <__ssvfiscanf_r+0x89e>
 802fd90:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 802fd94:	6823      	ldr	r3, [r4, #0]
 802fd96:	781a      	ldrb	r2, [r3, #0]
 802fd98:	5cb2      	ldrb	r2, [r6, r2]
 802fd9a:	b91a      	cbnz	r2, 802fda4 <__ssvfiscanf_r+0x878>
 802fd9c:	2d00      	cmp	r5, #0
 802fd9e:	f47f ae95 	bne.w	802facc <__ssvfiscanf_r+0x5a0>
 802fda2:	e41a      	b.n	802f5da <__ssvfiscanf_r+0xae>
 802fda4:	3301      	adds	r3, #1
 802fda6:	6862      	ldr	r2, [r4, #4]
 802fda8:	6023      	str	r3, [r4, #0]
 802fdaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fdac:	3501      	adds	r5, #1
 802fdae:	3a01      	subs	r2, #1
 802fdb0:	429d      	cmp	r5, r3
 802fdb2:	6062      	str	r2, [r4, #4]
 802fdb4:	f43f ae8a 	beq.w	802facc <__ssvfiscanf_r+0x5a0>
 802fdb8:	2a00      	cmp	r2, #0
 802fdba:	dceb      	bgt.n	802fd94 <__ssvfiscanf_r+0x868>
 802fdbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fdbe:	4621      	mov	r1, r4
 802fdc0:	f7ff fb5d 	bl	802f47e <__ssrefill_r>
 802fdc4:	2800      	cmp	r0, #0
 802fdc6:	d0e5      	beq.n	802fd94 <__ssvfiscanf_r+0x868>
 802fdc8:	e680      	b.n	802facc <__ssvfiscanf_r+0x5a0>
 802fdca:	69fb      	ldr	r3, [r7, #28]
 802fdcc:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 802fdd0:	f853 5b04 	ldr.w	r5, [r3], #4
 802fdd4:	61fb      	str	r3, [r7, #28]
 802fdd6:	d07f      	beq.n	802fed8 <__ssvfiscanf_r+0x9ac>
 802fdd8:	2d00      	cmp	r5, #0
 802fdda:	f43f abfe 	beq.w	802f5da <__ssvfiscanf_r+0xae>
 802fdde:	2020      	movs	r0, #32
 802fde0:	f7fe fc1a 	bl	802e618 <malloc>
 802fde4:	4680      	mov	r8, r0
 802fde6:	2800      	cmp	r0, #0
 802fde8:	f43f acb0 	beq.w	802f74c <__ssvfiscanf_r+0x220>
 802fdec:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802fdf0:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 802fdf4:	6028      	str	r0, [r5, #0]
 802fdf6:	45b1      	cmp	r9, r6
 802fdf8:	d311      	bcc.n	802fe1e <__ssvfiscanf_r+0x8f2>
 802fdfa:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802fdfe:	429e      	cmp	r6, r3
 802fe00:	f200 82e6 	bhi.w	80303d0 <__ssvfiscanf_r+0xea4>
 802fe04:	3608      	adds	r6, #8
 802fe06:	f8db 0000 	ldr.w	r0, [fp]
 802fe0a:	00b1      	lsls	r1, r6, #2
 802fe0c:	f004 fa24 	bl	8034258 <realloc>
 802fe10:	2800      	cmp	r0, #0
 802fe12:	f000 82dd 	beq.w	80303d0 <__ssvfiscanf_r+0xea4>
 802fe16:	f8cb 0000 	str.w	r0, [fp]
 802fe1a:	f8ab 6004 	strh.w	r6, [fp, #4]
 802fe1e:	f8db 3000 	ldr.w	r3, [fp]
 802fe22:	f109 0201 	add.w	r2, r9, #1
 802fe26:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802fe2a:	46aa      	mov	sl, r5
 802fe2c:	f8ab 2006 	strh.w	r2, [fp, #6]
 802fe30:	4645      	mov	r5, r8
 802fe32:	f04f 0920 	mov.w	r9, #32
 802fe36:	462e      	mov	r6, r5
 802fe38:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 802fe3c:	6823      	ldr	r3, [r4, #0]
 802fe3e:	781a      	ldrb	r2, [r3, #0]
 802fe40:	f818 2002 	ldrb.w	r2, [r8, r2]
 802fe44:	b91a      	cbnz	r2, 802fe4e <__ssvfiscanf_r+0x922>
 802fe46:	1bae      	subs	r6, r5, r6
 802fe48:	d12f      	bne.n	802feaa <__ssvfiscanf_r+0x97e>
 802fe4a:	f7ff bbc6 	b.w	802f5da <__ssvfiscanf_r+0xae>
 802fe4e:	6862      	ldr	r2, [r4, #4]
 802fe50:	3a01      	subs	r2, #1
 802fe52:	6062      	str	r2, [r4, #4]
 802fe54:	1c5a      	adds	r2, r3, #1
 802fe56:	6022      	str	r2, [r4, #0]
 802fe58:	781b      	ldrb	r3, [r3, #0]
 802fe5a:	f805 3b01 	strb.w	r3, [r5], #1
 802fe5e:	f1ba 0f00 	cmp.w	sl, #0
 802fe62:	d011      	beq.n	802fe88 <__ssvfiscanf_r+0x95c>
 802fe64:	1bab      	subs	r3, r5, r6
 802fe66:	454b      	cmp	r3, r9
 802fe68:	d30e      	bcc.n	802fe88 <__ssvfiscanf_r+0x95c>
 802fe6a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802fe6e:	4630      	mov	r0, r6
 802fe70:	4649      	mov	r1, r9
 802fe72:	613b      	str	r3, [r7, #16]
 802fe74:	f004 f9f0 	bl	8034258 <realloc>
 802fe78:	4606      	mov	r6, r0
 802fe7a:	2800      	cmp	r0, #0
 802fe7c:	f43f ac66 	beq.w	802f74c <__ssvfiscanf_r+0x220>
 802fe80:	693b      	ldr	r3, [r7, #16]
 802fe82:	f8ca 0000 	str.w	r0, [sl]
 802fe86:	18c5      	adds	r5, r0, r3
 802fe88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fe8a:	3b01      	subs	r3, #1
 802fe8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fe8e:	d0da      	beq.n	802fe46 <__ssvfiscanf_r+0x91a>
 802fe90:	6863      	ldr	r3, [r4, #4]
 802fe92:	2b00      	cmp	r3, #0
 802fe94:	dcd2      	bgt.n	802fe3c <__ssvfiscanf_r+0x910>
 802fe96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fe98:	4621      	mov	r1, r4
 802fe9a:	f7ff faf0 	bl	802f47e <__ssrefill_r>
 802fe9e:	2800      	cmp	r0, #0
 802fea0:	d0cc      	beq.n	802fe3c <__ssvfiscanf_r+0x910>
 802fea2:	42b5      	cmp	r5, r6
 802fea4:	f43f ac4c 	beq.w	802f740 <__ssvfiscanf_r+0x214>
 802fea8:	1bae      	subs	r6, r5, r6
 802feaa:	2300      	movs	r3, #0
 802feac:	702b      	strb	r3, [r5, #0]
 802feae:	f1ba 0f00 	cmp.w	sl, #0
 802feb2:	d009      	beq.n	802fec8 <__ssvfiscanf_r+0x99c>
 802feb4:	1c71      	adds	r1, r6, #1
 802feb6:	4549      	cmp	r1, r9
 802feb8:	d206      	bcs.n	802fec8 <__ssvfiscanf_r+0x99c>
 802feba:	f8da 0000 	ldr.w	r0, [sl]
 802febe:	f004 f9cb 	bl	8034258 <realloc>
 802fec2:	b108      	cbz	r0, 802fec8 <__ssvfiscanf_r+0x99c>
 802fec4:	f8ca 0000 	str.w	r0, [sl]
 802fec8:	6a3b      	ldr	r3, [r7, #32]
 802feca:	3301      	adds	r3, #1
 802fecc:	623b      	str	r3, [r7, #32]
 802fece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fed0:	4433      	add	r3, r6
 802fed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802fed4:	f7ff bb51 	b.w	802f57a <__ssvfiscanf_r+0x4e>
 802fed8:	46ca      	mov	sl, r9
 802feda:	e7ac      	b.n	802fe36 <__ssvfiscanf_r+0x90a>
 802fedc:	20000730 	.word	0x20000730
 802fee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fee2:	2b00      	cmp	r3, #0
 802fee4:	bf08      	it	eq
 802fee6:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802feea:	f016 0501 	ands.w	r5, r6, #1
 802feee:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fef0:	f006 0810 	and.w	r8, r6, #16
 802fef4:	f000 80e0 	beq.w	80300b8 <__ssvfiscanf_r+0xb8c>
 802fef8:	f1b8 0f00 	cmp.w	r8, #0
 802fefc:	f040 8088 	bne.w	8030010 <__ssvfiscanf_r+0xae4>
 802ff00:	69fb      	ldr	r3, [r7, #28]
 802ff02:	0636      	lsls	r6, r6, #24
 802ff04:	f853 5b04 	ldr.w	r5, [r3], #4
 802ff08:	61fb      	str	r3, [r7, #28]
 802ff0a:	f140 8088 	bpl.w	803001e <__ssvfiscanf_r+0xaf2>
 802ff0e:	2d00      	cmp	r5, #0
 802ff10:	f43f ab63 	beq.w	802f5da <__ssvfiscanf_r+0xae>
 802ff14:	2080      	movs	r0, #128	@ 0x80
 802ff16:	f7fe fb7f 	bl	802e618 <malloc>
 802ff1a:	4606      	mov	r6, r0
 802ff1c:	2800      	cmp	r0, #0
 802ff1e:	f43f acad 	beq.w	802f87c <__ssvfiscanf_r+0x350>
 802ff22:	f8bb a006 	ldrh.w	sl, [fp, #6]
 802ff26:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 802ff2a:	6028      	str	r0, [r5, #0]
 802ff2c:	45ca      	cmp	sl, r9
 802ff2e:	d313      	bcc.n	802ff58 <__ssvfiscanf_r+0xa2c>
 802ff30:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802ff34:	4599      	cmp	r9, r3
 802ff36:	f63f aca1 	bhi.w	802f87c <__ssvfiscanf_r+0x350>
 802ff3a:	f109 0908 	add.w	r9, r9, #8
 802ff3e:	f8db 0000 	ldr.w	r0, [fp]
 802ff42:	ea4f 0189 	mov.w	r1, r9, lsl #2
 802ff46:	f004 f987 	bl	8034258 <realloc>
 802ff4a:	2800      	cmp	r0, #0
 802ff4c:	f43f ac96 	beq.w	802f87c <__ssvfiscanf_r+0x350>
 802ff50:	f8cb 0000 	str.w	r0, [fp]
 802ff54:	f8ab 9004 	strh.w	r9, [fp, #4]
 802ff58:	f8db 3000 	ldr.w	r3, [fp]
 802ff5c:	f10a 0201 	add.w	r2, sl, #1
 802ff60:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 802ff64:	f8ab 2006 	strh.w	r2, [fp, #6]
 802ff68:	46aa      	mov	sl, r5
 802ff6a:	f04f 0920 	mov.w	r9, #32
 802ff6e:	4635      	mov	r5, r6
 802ff70:	2300      	movs	r3, #0
 802ff72:	6822      	ldr	r2, [r4, #0]
 802ff74:	499d      	ldr	r1, [pc, #628]	@ (80301ec <__ssvfiscanf_r+0xcc0>)
 802ff76:	7812      	ldrb	r2, [r2, #0]
 802ff78:	5c8a      	ldrb	r2, [r1, r2]
 802ff7a:	0711      	lsls	r1, r2, #28
 802ff7c:	d43c      	bmi.n	802fff8 <__ssvfiscanf_r+0xacc>
 802ff7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802ff80:	2a00      	cmp	r2, #0
 802ff82:	d039      	beq.n	802fff8 <__ssvfiscanf_r+0xacc>
 802ff84:	613b      	str	r3, [r7, #16]
 802ff86:	f005 fba5 	bl	80356d4 <__locale_mb_cur_max>
 802ff8a:	693b      	ldr	r3, [r7, #16]
 802ff8c:	4298      	cmp	r0, r3
 802ff8e:	f43f abd7 	beq.w	802f740 <__ssvfiscanf_r+0x214>
 802ff92:	1c5a      	adds	r2, r3, #1
 802ff94:	613a      	str	r2, [r7, #16]
 802ff96:	6822      	ldr	r2, [r4, #0]
 802ff98:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802ff9c:	f812 0b01 	ldrb.w	r0, [r2], #1
 802ffa0:	54c8      	strb	r0, [r1, r3]
 802ffa2:	6863      	ldr	r3, [r4, #4]
 802ffa4:	3b01      	subs	r3, #1
 802ffa6:	e9c4 2300 	strd	r2, r3, [r4]
 802ffaa:	69bb      	ldr	r3, [r7, #24]
 802ffac:	2b03      	cmp	r3, #3
 802ffae:	d102      	bne.n	802ffb6 <__ssvfiscanf_r+0xa8a>
 802ffb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802ffb2:	2b04      	cmp	r3, #4
 802ffb4:	d005      	beq.n	802ffc2 <__ssvfiscanf_r+0xa96>
 802ffb6:	2208      	movs	r2, #8
 802ffb8:	2100      	movs	r1, #0
 802ffba:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802ffbe:	f7fc fc1f 	bl	802c800 <memset>
 802ffc2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802ffc6:	9300      	str	r3, [sp, #0]
 802ffc8:	693b      	ldr	r3, [r7, #16]
 802ffca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802ffcc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802ffd0:	4629      	mov	r1, r5
 802ffd2:	f005 fd13 	bl	80359fc <_mbrtowc_r>
 802ffd6:	4603      	mov	r3, r0
 802ffd8:	61b8      	str	r0, [r7, #24]
 802ffda:	1c58      	adds	r0, r3, #1
 802ffdc:	f43f abb0 	beq.w	802f740 <__ssvfiscanf_r+0x214>
 802ffe0:	bb0b      	cbnz	r3, 8030026 <__ssvfiscanf_r+0xafa>
 802ffe2:	602b      	str	r3, [r5, #0]
 802ffe4:	6828      	ldr	r0, [r5, #0]
 802ffe6:	f005 fd23 	bl	8035a30 <iswspace>
 802ffea:	4603      	mov	r3, r0
 802ffec:	2800      	cmp	r0, #0
 802ffee:	d037      	beq.n	8030060 <__ssvfiscanf_r+0xb34>
 802fff0:	693a      	ldr	r2, [r7, #16]
 802fff2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802fff6:	bb4a      	cbnz	r2, 803004c <__ssvfiscanf_r+0xb20>
 802fff8:	f1b8 0f00 	cmp.w	r8, #0
 802fffc:	f47f aabd 	bne.w	802f57a <__ssvfiscanf_r+0x4e>
 8030000:	f8c5 8000 	str.w	r8, [r5]
 8030004:	f1ba 0f00 	cmp.w	sl, #0
 8030008:	f43f ad38 	beq.w	802fa7c <__ssvfiscanf_r+0x550>
 803000c:	1ba9      	subs	r1, r5, r6
 803000e:	e656      	b.n	802fcbe <__ssvfiscanf_r+0x792>
 8030010:	f04f 0900 	mov.w	r9, #0
 8030014:	464e      	mov	r6, r9
 8030016:	46ca      	mov	sl, r9
 8030018:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 803001c:	e7a8      	b.n	802ff70 <__ssvfiscanf_r+0xa44>
 803001e:	46c1      	mov	r9, r8
 8030020:	4646      	mov	r6, r8
 8030022:	46c2      	mov	sl, r8
 8030024:	e7a4      	b.n	802ff70 <__ssvfiscanf_r+0xa44>
 8030026:	69bb      	ldr	r3, [r7, #24]
 8030028:	3302      	adds	r3, #2
 803002a:	d1db      	bne.n	802ffe4 <__ssvfiscanf_r+0xab8>
 803002c:	693b      	ldr	r3, [r7, #16]
 803002e:	6862      	ldr	r2, [r4, #4]
 8030030:	2a00      	cmp	r2, #0
 8030032:	dc9e      	bgt.n	802ff72 <__ssvfiscanf_r+0xa46>
 8030034:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030036:	613b      	str	r3, [r7, #16]
 8030038:	4621      	mov	r1, r4
 803003a:	f7ff fa20 	bl	802f47e <__ssrefill_r>
 803003e:	693b      	ldr	r3, [r7, #16]
 8030040:	2800      	cmp	r0, #0
 8030042:	d096      	beq.n	802ff72 <__ssvfiscanf_r+0xa46>
 8030044:	2b00      	cmp	r3, #0
 8030046:	f47f ab7b 	bne.w	802f740 <__ssvfiscanf_r+0x214>
 803004a:	e7d5      	b.n	802fff8 <__ssvfiscanf_r+0xacc>
 803004c:	693a      	ldr	r2, [r7, #16]
 803004e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030050:	3a01      	subs	r2, #1
 8030052:	613a      	str	r2, [r7, #16]
 8030054:	6939      	ldr	r1, [r7, #16]
 8030056:	4622      	mov	r2, r4
 8030058:	5c59      	ldrb	r1, [r3, r1]
 803005a:	f7ff f9d3 	bl	802f404 <_sungetc_r>
 803005e:	e7c7      	b.n	802fff0 <__ssvfiscanf_r+0xac4>
 8030060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8030062:	6939      	ldr	r1, [r7, #16]
 8030064:	440a      	add	r2, r1
 8030066:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8030068:	69ba      	ldr	r2, [r7, #24]
 803006a:	2a03      	cmp	r2, #3
 803006c:	d102      	bne.n	8030074 <__ssvfiscanf_r+0xb48>
 803006e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8030070:	2a04      	cmp	r2, #4
 8030072:	d002      	beq.n	803007a <__ssvfiscanf_r+0xb4e>
 8030074:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8030076:	3a01      	subs	r2, #1
 8030078:	62ba      	str	r2, [r7, #40]	@ 0x28
 803007a:	f1b8 0f00 	cmp.w	r8, #0
 803007e:	d1d6      	bne.n	803002e <__ssvfiscanf_r+0xb02>
 8030080:	3504      	adds	r5, #4
 8030082:	f1ba 0f00 	cmp.w	sl, #0
 8030086:	d015      	beq.n	80300b4 <__ssvfiscanf_r+0xb88>
 8030088:	1bab      	subs	r3, r5, r6
 803008a:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 803008e:	d80f      	bhi.n	80300b0 <__ssvfiscanf_r+0xb84>
 8030090:	4630      	mov	r0, r6
 8030092:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8030096:	613b      	str	r3, [r7, #16]
 8030098:	f004 f8de 	bl	8034258 <realloc>
 803009c:	4606      	mov	r6, r0
 803009e:	2800      	cmp	r0, #0
 80300a0:	f43f abec 	beq.w	802f87c <__ssvfiscanf_r+0x350>
 80300a4:	693b      	ldr	r3, [r7, #16]
 80300a6:	f8ca 0000 	str.w	r0, [sl]
 80300aa:	18c5      	adds	r5, r0, r3
 80300ac:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80300b0:	4643      	mov	r3, r8
 80300b2:	e7bc      	b.n	803002e <__ssvfiscanf_r+0xb02>
 80300b4:	4653      	mov	r3, sl
 80300b6:	e7ba      	b.n	803002e <__ssvfiscanf_r+0xb02>
 80300b8:	f1b8 0f00 	cmp.w	r8, #0
 80300bc:	d019      	beq.n	80300f2 <__ssvfiscanf_r+0xbc6>
 80300be:	4e4b      	ldr	r6, [pc, #300]	@ (80301ec <__ssvfiscanf_r+0xcc0>)
 80300c0:	6823      	ldr	r3, [r4, #0]
 80300c2:	781a      	ldrb	r2, [r3, #0]
 80300c4:	5cb2      	ldrb	r2, [r6, r2]
 80300c6:	0712      	lsls	r2, r2, #28
 80300c8:	f53f ad00 	bmi.w	802facc <__ssvfiscanf_r+0x5a0>
 80300cc:	3301      	adds	r3, #1
 80300ce:	6862      	ldr	r2, [r4, #4]
 80300d0:	6023      	str	r3, [r4, #0]
 80300d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80300d4:	3501      	adds	r5, #1
 80300d6:	3a01      	subs	r2, #1
 80300d8:	429d      	cmp	r5, r3
 80300da:	6062      	str	r2, [r4, #4]
 80300dc:	f43f acf6 	beq.w	802facc <__ssvfiscanf_r+0x5a0>
 80300e0:	2a00      	cmp	r2, #0
 80300e2:	dced      	bgt.n	80300c0 <__ssvfiscanf_r+0xb94>
 80300e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80300e6:	4621      	mov	r1, r4
 80300e8:	f7ff f9c9 	bl	802f47e <__ssrefill_r>
 80300ec:	2800      	cmp	r0, #0
 80300ee:	d0e7      	beq.n	80300c0 <__ssvfiscanf_r+0xb94>
 80300f0:	e4ec      	b.n	802facc <__ssvfiscanf_r+0x5a0>
 80300f2:	69fb      	ldr	r3, [r7, #28]
 80300f4:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 80300f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80300fc:	61fb      	str	r3, [r7, #28]
 80300fe:	d073      	beq.n	80301e8 <__ssvfiscanf_r+0xcbc>
 8030100:	2d00      	cmp	r5, #0
 8030102:	f43f aa6a 	beq.w	802f5da <__ssvfiscanf_r+0xae>
 8030106:	2020      	movs	r0, #32
 8030108:	f7fe fa86 	bl	802e618 <malloc>
 803010c:	4680      	mov	r8, r0
 803010e:	2800      	cmp	r0, #0
 8030110:	f43f ab1c 	beq.w	802f74c <__ssvfiscanf_r+0x220>
 8030114:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8030118:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 803011c:	6028      	str	r0, [r5, #0]
 803011e:	45b1      	cmp	r9, r6
 8030120:	d311      	bcc.n	8030146 <__ssvfiscanf_r+0xc1a>
 8030122:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8030126:	429e      	cmp	r6, r3
 8030128:	f200 8152 	bhi.w	80303d0 <__ssvfiscanf_r+0xea4>
 803012c:	3608      	adds	r6, #8
 803012e:	f8db 0000 	ldr.w	r0, [fp]
 8030132:	00b1      	lsls	r1, r6, #2
 8030134:	f004 f890 	bl	8034258 <realloc>
 8030138:	2800      	cmp	r0, #0
 803013a:	f000 8149 	beq.w	80303d0 <__ssvfiscanf_r+0xea4>
 803013e:	f8cb 0000 	str.w	r0, [fp]
 8030142:	f8ab 6004 	strh.w	r6, [fp, #4]
 8030146:	f8db 3000 	ldr.w	r3, [fp]
 803014a:	f109 0201 	add.w	r2, r9, #1
 803014e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8030152:	46aa      	mov	sl, r5
 8030154:	f8ab 2006 	strh.w	r2, [fp, #6]
 8030158:	4645      	mov	r5, r8
 803015a:	2620      	movs	r6, #32
 803015c:	46a9      	mov	r9, r5
 803015e:	6823      	ldr	r3, [r4, #0]
 8030160:	4922      	ldr	r1, [pc, #136]	@ (80301ec <__ssvfiscanf_r+0xcc0>)
 8030162:	781a      	ldrb	r2, [r3, #0]
 8030164:	5c8a      	ldrb	r2, [r1, r2]
 8030166:	0710      	lsls	r0, r2, #28
 8030168:	d428      	bmi.n	80301bc <__ssvfiscanf_r+0xc90>
 803016a:	6862      	ldr	r2, [r4, #4]
 803016c:	3a01      	subs	r2, #1
 803016e:	6062      	str	r2, [r4, #4]
 8030170:	1c5a      	adds	r2, r3, #1
 8030172:	6022      	str	r2, [r4, #0]
 8030174:	781b      	ldrb	r3, [r3, #0]
 8030176:	f805 3b01 	strb.w	r3, [r5], #1
 803017a:	f1ba 0f00 	cmp.w	sl, #0
 803017e:	d010      	beq.n	80301a2 <__ssvfiscanf_r+0xc76>
 8030180:	eba5 0809 	sub.w	r8, r5, r9
 8030184:	45b0      	cmp	r8, r6
 8030186:	d30c      	bcc.n	80301a2 <__ssvfiscanf_r+0xc76>
 8030188:	0076      	lsls	r6, r6, #1
 803018a:	4648      	mov	r0, r9
 803018c:	4631      	mov	r1, r6
 803018e:	f004 f863 	bl	8034258 <realloc>
 8030192:	4681      	mov	r9, r0
 8030194:	2800      	cmp	r0, #0
 8030196:	f43f aad9 	beq.w	802f74c <__ssvfiscanf_r+0x220>
 803019a:	eb00 0508 	add.w	r5, r0, r8
 803019e:	f8ca 0000 	str.w	r0, [sl]
 80301a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80301a4:	3b01      	subs	r3, #1
 80301a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80301a8:	d008      	beq.n	80301bc <__ssvfiscanf_r+0xc90>
 80301aa:	6863      	ldr	r3, [r4, #4]
 80301ac:	2b00      	cmp	r3, #0
 80301ae:	dcd6      	bgt.n	803015e <__ssvfiscanf_r+0xc32>
 80301b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80301b2:	4621      	mov	r1, r4
 80301b4:	f7ff f963 	bl	802f47e <__ssrefill_r>
 80301b8:	2800      	cmp	r0, #0
 80301ba:	d0d0      	beq.n	803015e <__ssvfiscanf_r+0xc32>
 80301bc:	2300      	movs	r3, #0
 80301be:	702b      	strb	r3, [r5, #0]
 80301c0:	eba5 0509 	sub.w	r5, r5, r9
 80301c4:	f1ba 0f00 	cmp.w	sl, #0
 80301c8:	f43f acd2 	beq.w	802fb70 <__ssvfiscanf_r+0x644>
 80301cc:	1c69      	adds	r1, r5, #1
 80301ce:	428e      	cmp	r6, r1
 80301d0:	f67f acce 	bls.w	802fb70 <__ssvfiscanf_r+0x644>
 80301d4:	f8da 0000 	ldr.w	r0, [sl]
 80301d8:	f004 f83e 	bl	8034258 <realloc>
 80301dc:	2800      	cmp	r0, #0
 80301de:	f43f acc7 	beq.w	802fb70 <__ssvfiscanf_r+0x644>
 80301e2:	f8ca 0000 	str.w	r0, [sl]
 80301e6:	e4c3      	b.n	802fb70 <__ssvfiscanf_r+0x644>
 80301e8:	46b2      	mov	sl, r6
 80301ea:	e7b7      	b.n	803015c <__ssvfiscanf_r+0xc30>
 80301ec:	0803dff5 	.word	0x0803dff5
 80301f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80301f2:	3b01      	subs	r3, #1
 80301f4:	2b26      	cmp	r3, #38	@ 0x26
 80301f6:	bf82      	ittt	hi
 80301f8:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 80301fa:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 80301fe:	2327      	movhi	r3, #39	@ 0x27
 8030200:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 8030204:	bf8c      	ite	hi
 8030206:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 8030208:	f04f 0800 	movls.w	r8, #0
 803020c:	f04f 0900 	mov.w	r9, #0
 8030210:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 8030214:	6822      	ldr	r2, [r4, #0]
 8030216:	7813      	ldrb	r3, [r2, #0]
 8030218:	2b39      	cmp	r3, #57	@ 0x39
 803021a:	d80f      	bhi.n	803023c <__ssvfiscanf_r+0xd10>
 803021c:	2b2a      	cmp	r3, #42	@ 0x2a
 803021e:	d915      	bls.n	803024c <__ssvfiscanf_r+0xd20>
 8030220:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8030224:	290e      	cmp	r1, #14
 8030226:	d811      	bhi.n	803024c <__ssvfiscanf_r+0xd20>
 8030228:	e8df f001 	tbb	[pc, r1]
 803022c:	10831083 	.word	0x10831083
 8030230:	70704710 	.word	0x70704710
 8030234:	70707070 	.word	0x70707070
 8030238:	7870      	.short	0x7870
 803023a:	78          	.byte	0x78
 803023b:	00          	.byte	0x00
 803023c:	2b66      	cmp	r3, #102	@ 0x66
 803023e:	d83a      	bhi.n	80302b6 <__ssvfiscanf_r+0xd8a>
 8030240:	2b60      	cmp	r3, #96	@ 0x60
 8030242:	d873      	bhi.n	803032c <__ssvfiscanf_r+0xe00>
 8030244:	2b46      	cmp	r3, #70	@ 0x46
 8030246:	d828      	bhi.n	803029a <__ssvfiscanf_r+0xd6e>
 8030248:	2b40      	cmp	r3, #64	@ 0x40
 803024a:	d86f      	bhi.n	803032c <__ssvfiscanf_r+0xe00>
 803024c:	05f1      	lsls	r1, r6, #23
 803024e:	d511      	bpl.n	8030274 <__ssvfiscanf_r+0xd48>
 8030250:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030254:	459a      	cmp	sl, r3
 8030256:	d908      	bls.n	803026a <__ssvfiscanf_r+0xd3e>
 8030258:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 803025c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803025e:	4622      	mov	r2, r4
 8030260:	f7ff f8d0 	bl	802f404 <_sungetc_r>
 8030264:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
 8030268:	46c2      	mov	sl, r8
 803026a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 803026e:	459a      	cmp	sl, r3
 8030270:	f43f a9b3 	beq.w	802f5da <__ssvfiscanf_r+0xae>
 8030274:	f016 0210 	ands.w	r2, r6, #16
 8030278:	d170      	bne.n	803035c <__ssvfiscanf_r+0xe30>
 803027a:	697b      	ldr	r3, [r7, #20]
 803027c:	f88a 2000 	strb.w	r2, [sl]
 8030280:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030282:	68fd      	ldr	r5, [r7, #12]
 8030284:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030288:	47a8      	blx	r5
 803028a:	69fb      	ldr	r3, [r7, #28]
 803028c:	06b2      	lsls	r2, r6, #26
 803028e:	f103 0804 	add.w	r8, r3, #4
 8030292:	d55a      	bpl.n	803034a <__ssvfiscanf_r+0xe1e>
 8030294:	681b      	ldr	r3, [r3, #0]
 8030296:	6018      	str	r0, [r3, #0]
 8030298:	e05c      	b.n	8030354 <__ssvfiscanf_r+0xe28>
 803029a:	2b58      	cmp	r3, #88	@ 0x58
 803029c:	d1d6      	bne.n	803024c <__ssvfiscanf_r+0xd20>
 803029e:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 80302a2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80302a6:	d1d1      	bne.n	803024c <__ssvfiscanf_r+0xd20>
 80302a8:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 80302ac:	2110      	movs	r1, #16
 80302ae:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 80302b2:	6179      	str	r1, [r7, #20]
 80302b4:	e00d      	b.n	80302d2 <__ssvfiscanf_r+0xda6>
 80302b6:	2b78      	cmp	r3, #120	@ 0x78
 80302b8:	e7f0      	b.n	803029c <__ssvfiscanf_r+0xd70>
 80302ba:	0531      	lsls	r1, r6, #20
 80302bc:	d509      	bpl.n	80302d2 <__ssvfiscanf_r+0xda6>
 80302be:	6979      	ldr	r1, [r7, #20]
 80302c0:	b919      	cbnz	r1, 80302ca <__ssvfiscanf_r+0xd9e>
 80302c2:	2108      	movs	r1, #8
 80302c4:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 80302c8:	6179      	str	r1, [r7, #20]
 80302ca:	0575      	lsls	r5, r6, #21
 80302cc:	d506      	bpl.n	80302dc <__ssvfiscanf_r+0xdb0>
 80302ce:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 80302d2:	4655      	mov	r5, sl
 80302d4:	f805 3b01 	strb.w	r3, [r5], #1
 80302d8:	46aa      	mov	sl, r5
 80302da:	e00b      	b.n	80302f4 <__ssvfiscanf_r+0xdc8>
 80302dc:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 80302e0:	f1b8 0f00 	cmp.w	r8, #0
 80302e4:	d004      	beq.n	80302f0 <__ssvfiscanf_r+0xdc4>
 80302e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80302e8:	3301      	adds	r3, #1
 80302ea:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80302ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80302f0:	f109 0901 	add.w	r9, r9, #1
 80302f4:	6863      	ldr	r3, [r4, #4]
 80302f6:	3b01      	subs	r3, #1
 80302f8:	2b00      	cmp	r3, #0
 80302fa:	6063      	str	r3, [r4, #4]
 80302fc:	dd1e      	ble.n	803033c <__ssvfiscanf_r+0xe10>
 80302fe:	3201      	adds	r2, #1
 8030300:	6022      	str	r2, [r4, #0]
 8030302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030304:	3b01      	subs	r3, #1
 8030306:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030308:	d184      	bne.n	8030214 <__ssvfiscanf_r+0xce8>
 803030a:	e79f      	b.n	803024c <__ssvfiscanf_r+0xd20>
 803030c:	6978      	ldr	r0, [r7, #20]
 803030e:	4934      	ldr	r1, [pc, #208]	@ (80303e0 <__ssvfiscanf_r+0xeb4>)
 8030310:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8030314:	6179      	str	r1, [r7, #20]
 8030316:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 803031a:	e7da      	b.n	80302d2 <__ssvfiscanf_r+0xda6>
 803031c:	6978      	ldr	r0, [r7, #20]
 803031e:	4930      	ldr	r1, [pc, #192]	@ (80303e0 <__ssvfiscanf_r+0xeb4>)
 8030320:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8030324:	6179      	str	r1, [r7, #20]
 8030326:	2908      	cmp	r1, #8
 8030328:	dcf5      	bgt.n	8030316 <__ssvfiscanf_r+0xdea>
 803032a:	e78f      	b.n	803024c <__ssvfiscanf_r+0xd20>
 803032c:	6979      	ldr	r1, [r7, #20]
 803032e:	290a      	cmp	r1, #10
 8030330:	e7fa      	b.n	8030328 <__ssvfiscanf_r+0xdfc>
 8030332:	0630      	lsls	r0, r6, #24
 8030334:	d58a      	bpl.n	803024c <__ssvfiscanf_r+0xd20>
 8030336:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 803033a:	e7ca      	b.n	80302d2 <__ssvfiscanf_r+0xda6>
 803033c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803033e:	4621      	mov	r1, r4
 8030340:	f7ff f89d 	bl	802f47e <__ssrefill_r>
 8030344:	2800      	cmp	r0, #0
 8030346:	d0dc      	beq.n	8030302 <__ssvfiscanf_r+0xdd6>
 8030348:	e780      	b.n	803024c <__ssvfiscanf_r+0xd20>
 803034a:	0733      	lsls	r3, r6, #28
 803034c:	d50d      	bpl.n	803036a <__ssvfiscanf_r+0xe3e>
 803034e:	69fb      	ldr	r3, [r7, #28]
 8030350:	681b      	ldr	r3, [r3, #0]
 8030352:	7018      	strb	r0, [r3, #0]
 8030354:	6a3b      	ldr	r3, [r7, #32]
 8030356:	3301      	adds	r3, #1
 8030358:	e9c7 8307 	strd	r8, r3, [r7, #28]
 803035c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030360:	ebaa 0503 	sub.w	r5, sl, r3
 8030364:	444d      	add	r5, r9
 8030366:	f7ff bbb1 	b.w	802facc <__ssvfiscanf_r+0x5a0>
 803036a:	0775      	lsls	r5, r6, #29
 803036c:	d503      	bpl.n	8030376 <__ssvfiscanf_r+0xe4a>
 803036e:	69fb      	ldr	r3, [r7, #28]
 8030370:	681b      	ldr	r3, [r3, #0]
 8030372:	8018      	strh	r0, [r3, #0]
 8030374:	e7ee      	b.n	8030354 <__ssvfiscanf_r+0xe28>
 8030376:	f016 0201 	ands.w	r2, r6, #1
 803037a:	d001      	beq.n	8030380 <__ssvfiscanf_r+0xe54>
 803037c:	69fb      	ldr	r3, [r7, #28]
 803037e:	e789      	b.n	8030294 <__ssvfiscanf_r+0xd68>
 8030380:	07b1      	lsls	r1, r6, #30
 8030382:	d5fb      	bpl.n	803037c <__ssvfiscanf_r+0xe50>
 8030384:	4b17      	ldr	r3, [pc, #92]	@ (80303e4 <__ssvfiscanf_r+0xeb8>)
 8030386:	68f9      	ldr	r1, [r7, #12]
 8030388:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803038a:	4299      	cmp	r1, r3
 803038c:	697b      	ldr	r3, [r7, #20]
 803038e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030392:	d106      	bne.n	80303a2 <__ssvfiscanf_r+0xe76>
 8030394:	f005 fb10 	bl	80359b8 <_strtoull_r>
 8030398:	69fb      	ldr	r3, [r7, #28]
 803039a:	681b      	ldr	r3, [r3, #0]
 803039c:	e9c3 0100 	strd	r0, r1, [r3]
 80303a0:	e7d8      	b.n	8030354 <__ssvfiscanf_r+0xe28>
 80303a2:	f005 fa61 	bl	8035868 <_strtoll_r>
 80303a6:	e7f7      	b.n	8030398 <__ssvfiscanf_r+0xe6c>
 80303a8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80303ac:	6818      	ldr	r0, [r3, #0]
 80303ae:	f7fe f93b 	bl	802e628 <free>
 80303b2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80303b6:	3401      	adds	r4, #1
 80303b8:	601e      	str	r6, [r3, #0]
 80303ba:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 80303be:	f8db 5000 	ldr.w	r5, [fp]
 80303c2:	42a3      	cmp	r3, r4
 80303c4:	dcf0      	bgt.n	80303a8 <__ssvfiscanf_r+0xe7c>
 80303c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80303ca:	623b      	str	r3, [r7, #32]
 80303cc:	f7ff b90c 	b.w	802f5e8 <__ssvfiscanf_r+0xbc>
 80303d0:	2400      	movs	r4, #0
 80303d2:	4626      	mov	r6, r4
 80303d4:	e7f1      	b.n	80303ba <__ssvfiscanf_r+0xe8e>
 80303d6:	f7fe f927 	bl	802e628 <free>
 80303da:	f7ff b90a 	b.w	802f5f2 <__ssvfiscanf_r+0xc6>
 80303de:	bf00      	nop
 80303e0:	0803e116 	.word	0x0803e116
 80303e4:	080353d9 	.word	0x080353d9

080303e8 <_svfprintf_r>:
 80303e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80303ec:	b0d3      	sub	sp, #332	@ 0x14c
 80303ee:	4693      	mov	fp, r2
 80303f0:	9106      	str	r1, [sp, #24]
 80303f2:	461f      	mov	r7, r3
 80303f4:	9003      	str	r0, [sp, #12]
 80303f6:	f7fd fec9 	bl	802e18c <_localeconv_r>
 80303fa:	6803      	ldr	r3, [r0, #0]
 80303fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80303fe:	4618      	mov	r0, r3
 8030400:	f7df ff4e 	bl	80102a0 <strlen>
 8030404:	9b06      	ldr	r3, [sp, #24]
 8030406:	900e      	str	r0, [sp, #56]	@ 0x38
 8030408:	899b      	ldrh	r3, [r3, #12]
 803040a:	061a      	lsls	r2, r3, #24
 803040c:	d514      	bpl.n	8030438 <_svfprintf_r+0x50>
 803040e:	9b06      	ldr	r3, [sp, #24]
 8030410:	691b      	ldr	r3, [r3, #16]
 8030412:	b98b      	cbnz	r3, 8030438 <_svfprintf_r+0x50>
 8030414:	9803      	ldr	r0, [sp, #12]
 8030416:	2140      	movs	r1, #64	@ 0x40
 8030418:	f7fe f90e 	bl	802e638 <_malloc_r>
 803041c:	9b06      	ldr	r3, [sp, #24]
 803041e:	6018      	str	r0, [r3, #0]
 8030420:	6118      	str	r0, [r3, #16]
 8030422:	b930      	cbnz	r0, 8030432 <_svfprintf_r+0x4a>
 8030424:	9a03      	ldr	r2, [sp, #12]
 8030426:	230c      	movs	r3, #12
 8030428:	6013      	str	r3, [r2, #0]
 803042a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803042e:	9310      	str	r3, [sp, #64]	@ 0x40
 8030430:	e1f5      	b.n	803081e <_svfprintf_r+0x436>
 8030432:	9a06      	ldr	r2, [sp, #24]
 8030434:	2340      	movs	r3, #64	@ 0x40
 8030436:	6153      	str	r3, [r2, #20]
 8030438:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8030688 <_svfprintf_r+0x2a0>
 803043c:	2300      	movs	r3, #0
 803043e:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 8030442:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8030446:	ac29      	add	r4, sp, #164	@ 0xa4
 8030448:	9426      	str	r4, [sp, #152]	@ 0x98
 803044a:	9304      	str	r3, [sp, #16]
 803044c:	931a      	str	r3, [sp, #104]	@ 0x68
 803044e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8030450:	930a      	str	r3, [sp, #40]	@ 0x28
 8030452:	9314      	str	r3, [sp, #80]	@ 0x50
 8030454:	9316      	str	r3, [sp, #88]	@ 0x58
 8030456:	9310      	str	r3, [sp, #64]	@ 0x40
 8030458:	465b      	mov	r3, fp
 803045a:	461d      	mov	r5, r3
 803045c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030460:	b10a      	cbz	r2, 8030466 <_svfprintf_r+0x7e>
 8030462:	2a25      	cmp	r2, #37	@ 0x25
 8030464:	d1f9      	bne.n	803045a <_svfprintf_r+0x72>
 8030466:	ebb5 060b 	subs.w	r6, r5, fp
 803046a:	d00d      	beq.n	8030488 <_svfprintf_r+0xa0>
 803046c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803046e:	4433      	add	r3, r6
 8030470:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030472:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030474:	3301      	adds	r3, #1
 8030476:	2b07      	cmp	r3, #7
 8030478:	e9c4 b600 	strd	fp, r6, [r4]
 803047c:	9327      	str	r3, [sp, #156]	@ 0x9c
 803047e:	dc75      	bgt.n	803056c <_svfprintf_r+0x184>
 8030480:	3408      	adds	r4, #8
 8030482:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030484:	4433      	add	r3, r6
 8030486:	9310      	str	r3, [sp, #64]	@ 0x40
 8030488:	782b      	ldrb	r3, [r5, #0]
 803048a:	2b00      	cmp	r3, #0
 803048c:	f001 8140 	beq.w	8031710 <_svfprintf_r+0x1328>
 8030490:	2200      	movs	r2, #0
 8030492:	1c6b      	adds	r3, r5, #1
 8030494:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8030498:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 803049c:	920f      	str	r2, [sp, #60]	@ 0x3c
 803049e:	4615      	mov	r5, r2
 80304a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80304a4:	9207      	str	r2, [sp, #28]
 80304a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80304a8:	9b07      	ldr	r3, [sp, #28]
 80304aa:	3b20      	subs	r3, #32
 80304ac:	2b5a      	cmp	r3, #90	@ 0x5a
 80304ae:	f200 859d 	bhi.w	8030fec <_svfprintf_r+0xc04>
 80304b2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80304b6:	009e      	.short	0x009e
 80304b8:	059b059b 	.word	0x059b059b
 80304bc:	059b00a6 	.word	0x059b00a6
 80304c0:	059b059b 	.word	0x059b059b
 80304c4:	059b0086 	.word	0x059b0086
 80304c8:	00a9059b 	.word	0x00a9059b
 80304cc:	059b00b3 	.word	0x059b00b3
 80304d0:	00b500b0 	.word	0x00b500b0
 80304d4:	00d0059b 	.word	0x00d0059b
 80304d8:	00d300d3 	.word	0x00d300d3
 80304dc:	00d300d3 	.word	0x00d300d3
 80304e0:	00d300d3 	.word	0x00d300d3
 80304e4:	00d300d3 	.word	0x00d300d3
 80304e8:	059b00d3 	.word	0x059b00d3
 80304ec:	059b059b 	.word	0x059b059b
 80304f0:	059b059b 	.word	0x059b059b
 80304f4:	059b059b 	.word	0x059b059b
 80304f8:	059b014a 	.word	0x059b014a
 80304fc:	011b0109 	.word	0x011b0109
 8030500:	014a014a 	.word	0x014a014a
 8030504:	059b014a 	.word	0x059b014a
 8030508:	059b059b 	.word	0x059b059b
 803050c:	00e6059b 	.word	0x00e6059b
 8030510:	059b059b 	.word	0x059b059b
 8030514:	059b0494 	.word	0x059b0494
 8030518:	059b059b 	.word	0x059b059b
 803051c:	059b04de 	.word	0x059b04de
 8030520:	059b04fd 	.word	0x059b04fd
 8030524:	0520059b 	.word	0x0520059b
 8030528:	059b059b 	.word	0x059b059b
 803052c:	059b059b 	.word	0x059b059b
 8030530:	059b059b 	.word	0x059b059b
 8030534:	059b059b 	.word	0x059b059b
 8030538:	059b014a 	.word	0x059b014a
 803053c:	011d0109 	.word	0x011d0109
 8030540:	014a014a 	.word	0x014a014a
 8030544:	00ef014a 	.word	0x00ef014a
 8030548:	0103011d 	.word	0x0103011d
 803054c:	00fc059b 	.word	0x00fc059b
 8030550:	0475059b 	.word	0x0475059b
 8030554:	04cc0496 	.word	0x04cc0496
 8030558:	059b0103 	.word	0x059b0103
 803055c:	009c04de 	.word	0x009c04de
 8030560:	059b04ff 	.word	0x059b04ff
 8030564:	0065059b 	.word	0x0065059b
 8030568:	009c059b 	.word	0x009c059b
 803056c:	9906      	ldr	r1, [sp, #24]
 803056e:	9803      	ldr	r0, [sp, #12]
 8030570:	aa26      	add	r2, sp, #152	@ 0x98
 8030572:	f004 ff3d 	bl	80353f0 <__ssprint_r>
 8030576:	2800      	cmp	r0, #0
 8030578:	f040 814c 	bne.w	8030814 <_svfprintf_r+0x42c>
 803057c:	ac29      	add	r4, sp, #164	@ 0xa4
 803057e:	e780      	b.n	8030482 <_svfprintf_r+0x9a>
 8030580:	4b43      	ldr	r3, [pc, #268]	@ (8030690 <_svfprintf_r+0x2a8>)
 8030582:	931a      	str	r3, [sp, #104]	@ 0x68
 8030584:	f015 0320 	ands.w	r3, r5, #32
 8030588:	f000 84b8 	beq.w	8030efc <_svfprintf_r+0xb14>
 803058c:	3707      	adds	r7, #7
 803058e:	f027 0307 	bic.w	r3, r7, #7
 8030592:	461a      	mov	r2, r3
 8030594:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8030598:	f852 7b08 	ldr.w	r7, [r2], #8
 803059c:	9208      	str	r2, [sp, #32]
 803059e:	07e8      	lsls	r0, r5, #31
 80305a0:	d50a      	bpl.n	80305b8 <_svfprintf_r+0x1d0>
 80305a2:	ea57 0308 	orrs.w	r3, r7, r8
 80305a6:	d007      	beq.n	80305b8 <_svfprintf_r+0x1d0>
 80305a8:	2330      	movs	r3, #48	@ 0x30
 80305aa:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 80305ae:	9b07      	ldr	r3, [sp, #28]
 80305b0:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80305b4:	f045 0502 	orr.w	r5, r5, #2
 80305b8:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80305bc:	2302      	movs	r3, #2
 80305be:	f000 bc1f 	b.w	8030e00 <_svfprintf_r+0xa18>
 80305c2:	9803      	ldr	r0, [sp, #12]
 80305c4:	f7fd fde2 	bl	802e18c <_localeconv_r>
 80305c8:	6843      	ldr	r3, [r0, #4]
 80305ca:	9316      	str	r3, [sp, #88]	@ 0x58
 80305cc:	4618      	mov	r0, r3
 80305ce:	f7df fe67 	bl	80102a0 <strlen>
 80305d2:	9014      	str	r0, [sp, #80]	@ 0x50
 80305d4:	9803      	ldr	r0, [sp, #12]
 80305d6:	f7fd fdd9 	bl	802e18c <_localeconv_r>
 80305da:	6883      	ldr	r3, [r0, #8]
 80305dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80305de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80305e0:	b12b      	cbz	r3, 80305ee <_svfprintf_r+0x206>
 80305e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80305e4:	b11b      	cbz	r3, 80305ee <_svfprintf_r+0x206>
 80305e6:	781b      	ldrb	r3, [r3, #0]
 80305e8:	b10b      	cbz	r3, 80305ee <_svfprintf_r+0x206>
 80305ea:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 80305ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80305f0:	e756      	b.n	80304a0 <_svfprintf_r+0xb8>
 80305f2:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 80305f6:	2b00      	cmp	r3, #0
 80305f8:	d1f9      	bne.n	80305ee <_svfprintf_r+0x206>
 80305fa:	2320      	movs	r3, #32
 80305fc:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030600:	e7f5      	b.n	80305ee <_svfprintf_r+0x206>
 8030602:	f045 0501 	orr.w	r5, r5, #1
 8030606:	e7f2      	b.n	80305ee <_svfprintf_r+0x206>
 8030608:	f857 3b04 	ldr.w	r3, [r7], #4
 803060c:	930f      	str	r3, [sp, #60]	@ 0x3c
 803060e:	2b00      	cmp	r3, #0
 8030610:	daed      	bge.n	80305ee <_svfprintf_r+0x206>
 8030612:	425b      	negs	r3, r3
 8030614:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030616:	f045 0504 	orr.w	r5, r5, #4
 803061a:	e7e8      	b.n	80305ee <_svfprintf_r+0x206>
 803061c:	232b      	movs	r3, #43	@ 0x2b
 803061e:	e7ed      	b.n	80305fc <_svfprintf_r+0x214>
 8030620:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8030622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030626:	9207      	str	r2, [sp, #28]
 8030628:	2a2a      	cmp	r2, #42	@ 0x2a
 803062a:	d111      	bne.n	8030650 <_svfprintf_r+0x268>
 803062c:	f857 6b04 	ldr.w	r6, [r7], #4
 8030630:	930b      	str	r3, [sp, #44]	@ 0x2c
 8030632:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 8030636:	e7da      	b.n	80305ee <_svfprintf_r+0x206>
 8030638:	fb01 2606 	mla	r6, r1, r6, r2
 803063c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030640:	9207      	str	r2, [sp, #28]
 8030642:	9a07      	ldr	r2, [sp, #28]
 8030644:	3a30      	subs	r2, #48	@ 0x30
 8030646:	2a09      	cmp	r2, #9
 8030648:	d9f6      	bls.n	8030638 <_svfprintf_r+0x250>
 803064a:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 803064e:	e72a      	b.n	80304a6 <_svfprintf_r+0xbe>
 8030650:	2600      	movs	r6, #0
 8030652:	210a      	movs	r1, #10
 8030654:	e7f5      	b.n	8030642 <_svfprintf_r+0x25a>
 8030656:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 803065a:	e7c8      	b.n	80305ee <_svfprintf_r+0x206>
 803065c:	2300      	movs	r3, #0
 803065e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030660:	220a      	movs	r2, #10
 8030662:	9b07      	ldr	r3, [sp, #28]
 8030664:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8030666:	3b30      	subs	r3, #48	@ 0x30
 8030668:	fb02 3301 	mla	r3, r2, r1, r3
 803066c:	930f      	str	r3, [sp, #60]	@ 0x3c
 803066e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8030670:	f813 1b01 	ldrb.w	r1, [r3], #1
 8030674:	930b      	str	r3, [sp, #44]	@ 0x2c
 8030676:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 803067a:	2b09      	cmp	r3, #9
 803067c:	9107      	str	r1, [sp, #28]
 803067e:	d9f0      	bls.n	8030662 <_svfprintf_r+0x27a>
 8030680:	e712      	b.n	80304a8 <_svfprintf_r+0xc0>
 8030682:	f045 0508 	orr.w	r5, r5, #8
 8030686:	e7b2      	b.n	80305ee <_svfprintf_r+0x206>
	...
 8030690:	0803dad5 	.word	0x0803dad5
 8030694:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8030696:	781b      	ldrb	r3, [r3, #0]
 8030698:	2b68      	cmp	r3, #104	@ 0x68
 803069a:	bf01      	itttt	eq
 803069c:	9b0b      	ldreq	r3, [sp, #44]	@ 0x2c
 803069e:	3301      	addeq	r3, #1
 80306a0:	930b      	streq	r3, [sp, #44]	@ 0x2c
 80306a2:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 80306a6:	bf18      	it	ne
 80306a8:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 80306ac:	e79f      	b.n	80305ee <_svfprintf_r+0x206>
 80306ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80306b0:	781b      	ldrb	r3, [r3, #0]
 80306b2:	2b6c      	cmp	r3, #108	@ 0x6c
 80306b4:	d105      	bne.n	80306c2 <_svfprintf_r+0x2da>
 80306b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80306b8:	3301      	adds	r3, #1
 80306ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80306bc:	f045 0520 	orr.w	r5, r5, #32
 80306c0:	e795      	b.n	80305ee <_svfprintf_r+0x206>
 80306c2:	f045 0510 	orr.w	r5, r5, #16
 80306c6:	e792      	b.n	80305ee <_svfprintf_r+0x206>
 80306c8:	463a      	mov	r2, r7
 80306ca:	f852 3b04 	ldr.w	r3, [r2], #4
 80306ce:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 80306d2:	2300      	movs	r3, #0
 80306d4:	9208      	str	r2, [sp, #32]
 80306d6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80306da:	469a      	mov	sl, r3
 80306dc:	2601      	movs	r6, #1
 80306de:	4699      	mov	r9, r3
 80306e0:	4698      	mov	r8, r3
 80306e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80306e4:	461f      	mov	r7, r3
 80306e6:	f10d 0be4 	add.w	fp, sp, #228	@ 0xe4
 80306ea:	e1b4      	b.n	8030a56 <_svfprintf_r+0x66e>
 80306ec:	f045 0510 	orr.w	r5, r5, #16
 80306f0:	06ab      	lsls	r3, r5, #26
 80306f2:	d514      	bpl.n	803071e <_svfprintf_r+0x336>
 80306f4:	3707      	adds	r7, #7
 80306f6:	f027 0307 	bic.w	r3, r7, #7
 80306fa:	461a      	mov	r2, r3
 80306fc:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8030700:	f852 7b08 	ldr.w	r7, [r2], #8
 8030704:	9208      	str	r2, [sp, #32]
 8030706:	f1b8 0f00 	cmp.w	r8, #0
 803070a:	da06      	bge.n	803071a <_svfprintf_r+0x332>
 803070c:	427f      	negs	r7, r7
 803070e:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8030712:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
 8030716:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803071a:	2301      	movs	r3, #1
 803071c:	e373      	b.n	8030e06 <_svfprintf_r+0xa1e>
 803071e:	463a      	mov	r2, r7
 8030720:	06ef      	lsls	r7, r5, #27
 8030722:	f852 3b04 	ldr.w	r3, [r2], #4
 8030726:	9208      	str	r2, [sp, #32]
 8030728:	d503      	bpl.n	8030732 <_svfprintf_r+0x34a>
 803072a:	461f      	mov	r7, r3
 803072c:	ea4f 78e3 	mov.w	r8, r3, asr #31
 8030730:	e7e9      	b.n	8030706 <_svfprintf_r+0x31e>
 8030732:	0668      	lsls	r0, r5, #25
 8030734:	d503      	bpl.n	803073e <_svfprintf_r+0x356>
 8030736:	b21f      	sxth	r7, r3
 8030738:	f343 38c0 	sbfx	r8, r3, #15, #1
 803073c:	e7e3      	b.n	8030706 <_svfprintf_r+0x31e>
 803073e:	05a9      	lsls	r1, r5, #22
 8030740:	d5f3      	bpl.n	803072a <_svfprintf_r+0x342>
 8030742:	b25f      	sxtb	r7, r3
 8030744:	f343 18c0 	sbfx	r8, r3, #7, #1
 8030748:	e7dd      	b.n	8030706 <_svfprintf_r+0x31e>
 803074a:	3707      	adds	r7, #7
 803074c:	f027 0307 	bic.w	r3, r7, #7
 8030750:	ecb3 7b02 	vldmia	r3!, {d7}
 8030754:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8030758:	9308      	str	r3, [sp, #32]
 803075a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803075c:	9318      	str	r3, [sp, #96]	@ 0x60
 803075e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8030760:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8030764:	9319      	str	r3, [sp, #100]	@ 0x64
 8030766:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 803076a:	4b6e      	ldr	r3, [pc, #440]	@ (8030924 <_svfprintf_r+0x53c>)
 803076c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8030770:	f7e0 f9f4 	bl	8010b5c <__aeabi_dcmpun>
 8030774:	bb00      	cbnz	r0, 80307b8 <_svfprintf_r+0x3d0>
 8030776:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 803077a:	4b6a      	ldr	r3, [pc, #424]	@ (8030924 <_svfprintf_r+0x53c>)
 803077c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8030780:	f7e0 f9ce 	bl	8010b20 <__aeabi_dcmple>
 8030784:	b9c0      	cbnz	r0, 80307b8 <_svfprintf_r+0x3d0>
 8030786:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 803078a:	2200      	movs	r2, #0
 803078c:	2300      	movs	r3, #0
 803078e:	f7e0 f9bd 	bl	8010b0c <__aeabi_dcmplt>
 8030792:	b110      	cbz	r0, 803079a <_svfprintf_r+0x3b2>
 8030794:	232d      	movs	r3, #45	@ 0x2d
 8030796:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803079a:	4a63      	ldr	r2, [pc, #396]	@ (8030928 <_svfprintf_r+0x540>)
 803079c:	4b63      	ldr	r3, [pc, #396]	@ (803092c <_svfprintf_r+0x544>)
 803079e:	9907      	ldr	r1, [sp, #28]
 80307a0:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 80307a4:	2947      	cmp	r1, #71	@ 0x47
 80307a6:	bfcc      	ite	gt
 80307a8:	4693      	movgt	fp, r2
 80307aa:	469b      	movle	fp, r3
 80307ac:	f04f 0a00 	mov.w	sl, #0
 80307b0:	2603      	movs	r6, #3
 80307b2:	46d1      	mov	r9, sl
 80307b4:	f000 bfe3 	b.w	803177e <_svfprintf_r+0x1396>
 80307b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80307bc:	4610      	mov	r0, r2
 80307be:	4619      	mov	r1, r3
 80307c0:	f7e0 f9cc 	bl	8010b5c <__aeabi_dcmpun>
 80307c4:	4682      	mov	sl, r0
 80307c6:	b140      	cbz	r0, 80307da <_svfprintf_r+0x3f2>
 80307c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80307ca:	4a59      	ldr	r2, [pc, #356]	@ (8030930 <_svfprintf_r+0x548>)
 80307cc:	2b00      	cmp	r3, #0
 80307ce:	bfbc      	itt	lt
 80307d0:	232d      	movlt	r3, #45	@ 0x2d
 80307d2:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 80307d6:	4b57      	ldr	r3, [pc, #348]	@ (8030934 <_svfprintf_r+0x54c>)
 80307d8:	e7e1      	b.n	803079e <_svfprintf_r+0x3b6>
 80307da:	9b07      	ldr	r3, [sp, #28]
 80307dc:	2b61      	cmp	r3, #97	@ 0x61
 80307de:	d022      	beq.n	8030826 <_svfprintf_r+0x43e>
 80307e0:	2b41      	cmp	r3, #65	@ 0x41
 80307e2:	d122      	bne.n	803082a <_svfprintf_r+0x442>
 80307e4:	2358      	movs	r3, #88	@ 0x58
 80307e6:	2230      	movs	r2, #48	@ 0x30
 80307e8:	2e63      	cmp	r6, #99	@ 0x63
 80307ea:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 80307ee:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80307f2:	f045 0502 	orr.w	r5, r5, #2
 80307f6:	f340 8081 	ble.w	80308fc <_svfprintf_r+0x514>
 80307fa:	9803      	ldr	r0, [sp, #12]
 80307fc:	1c71      	adds	r1, r6, #1
 80307fe:	f7fd ff1b 	bl	802e638 <_malloc_r>
 8030802:	4683      	mov	fp, r0
 8030804:	2800      	cmp	r0, #0
 8030806:	d17e      	bne.n	8030906 <_svfprintf_r+0x51e>
 8030808:	9b06      	ldr	r3, [sp, #24]
 803080a:	9a06      	ldr	r2, [sp, #24]
 803080c:	899b      	ldrh	r3, [r3, #12]
 803080e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8030812:	8193      	strh	r3, [r2, #12]
 8030814:	9b06      	ldr	r3, [sp, #24]
 8030816:	899b      	ldrh	r3, [r3, #12]
 8030818:	065b      	lsls	r3, r3, #25
 803081a:	f53f ae06 	bmi.w	803042a <_svfprintf_r+0x42>
 803081e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8030820:	b053      	add	sp, #332	@ 0x14c
 8030822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030826:	2378      	movs	r3, #120	@ 0x78
 8030828:	e7dd      	b.n	80307e6 <_svfprintf_r+0x3fe>
 803082a:	1c72      	adds	r2, r6, #1
 803082c:	d06d      	beq.n	803090a <_svfprintf_r+0x522>
 803082e:	9b07      	ldr	r3, [sp, #28]
 8030830:	f023 0320 	bic.w	r3, r3, #32
 8030834:	2b47      	cmp	r3, #71	@ 0x47
 8030836:	d101      	bne.n	803083c <_svfprintf_r+0x454>
 8030838:	2e00      	cmp	r6, #0
 803083a:	d068      	beq.n	803090e <_svfprintf_r+0x526>
 803083c:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8030840:	9311      	str	r3, [sp, #68]	@ 0x44
 8030842:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8030844:	2b00      	cmp	r3, #0
 8030846:	da65      	bge.n	8030914 <_svfprintf_r+0x52c>
 8030848:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803084a:	9312      	str	r3, [sp, #72]	@ 0x48
 803084c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803084e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8030852:	9313      	str	r3, [sp, #76]	@ 0x4c
 8030854:	232d      	movs	r3, #45	@ 0x2d
 8030856:	931b      	str	r3, [sp, #108]	@ 0x6c
 8030858:	9b07      	ldr	r3, [sp, #28]
 803085a:	f023 0820 	bic.w	r8, r3, #32
 803085e:	f1b8 0f41 	cmp.w	r8, #65	@ 0x41
 8030862:	f040 81d9 	bne.w	8030c18 <_svfprintf_r+0x830>
 8030866:	a820      	add	r0, sp, #128	@ 0x80
 8030868:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 803086c:	f005 f93e 	bl	8035aec <frexp>
 8030870:	2200      	movs	r2, #0
 8030872:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8030876:	ec51 0b10 	vmov	r0, r1, d0
 803087a:	f7df fed5 	bl	8010628 <__aeabi_dmul>
 803087e:	4602      	mov	r2, r0
 8030880:	460b      	mov	r3, r1
 8030882:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8030886:	2200      	movs	r2, #0
 8030888:	2300      	movs	r3, #0
 803088a:	f7e0 f935 	bl	8010af8 <__aeabi_dcmpeq>
 803088e:	b108      	cbz	r0, 8030894 <_svfprintf_r+0x4ac>
 8030890:	2301      	movs	r3, #1
 8030892:	9320      	str	r3, [sp, #128]	@ 0x80
 8030894:	4a28      	ldr	r2, [pc, #160]	@ (8030938 <_svfprintf_r+0x550>)
 8030896:	4b29      	ldr	r3, [pc, #164]	@ (803093c <_svfprintf_r+0x554>)
 8030898:	9907      	ldr	r1, [sp, #28]
 803089a:	2961      	cmp	r1, #97	@ 0x61
 803089c:	bf08      	it	eq
 803089e:	461a      	moveq	r2, r3
 80308a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80308a2:	3e01      	subs	r6, #1
 80308a4:	465f      	mov	r7, fp
 80308a6:	4b26      	ldr	r3, [pc, #152]	@ (8030940 <_svfprintf_r+0x558>)
 80308a8:	2200      	movs	r2, #0
 80308aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80308ae:	f7df febb 	bl	8010628 <__aeabi_dmul>
 80308b2:	4680      	mov	r8, r0
 80308b4:	4689      	mov	r9, r1
 80308b6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80308ba:	f7e0 f965 	bl	8010b88 <__aeabi_d2iz>
 80308be:	4680      	mov	r8, r0
 80308c0:	f7df fe48 	bl	8010554 <__aeabi_i2d>
 80308c4:	4602      	mov	r2, r0
 80308c6:	460b      	mov	r3, r1
 80308c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80308cc:	f7df fcf4 	bl	80102b8 <__aeabi_dsub>
 80308d0:	460b      	mov	r3, r1
 80308d2:	4602      	mov	r2, r0
 80308d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80308d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80308da:	f813 3008 	ldrb.w	r3, [r3, r8]
 80308de:	f807 3b01 	strb.w	r3, [r7], #1
 80308e2:	1c73      	adds	r3, r6, #1
 80308e4:	d02e      	beq.n	8030944 <_svfprintf_r+0x55c>
 80308e6:	2200      	movs	r2, #0
 80308e8:	2300      	movs	r3, #0
 80308ea:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
 80308ee:	f7e0 f903 	bl	8010af8 <__aeabi_dcmpeq>
 80308f2:	b1a8      	cbz	r0, 8030920 <_svfprintf_r+0x538>
 80308f4:	463b      	mov	r3, r7
 80308f6:	19b9      	adds	r1, r7, r6
 80308f8:	2030      	movs	r0, #48	@ 0x30
 80308fa:	e184      	b.n	8030c06 <_svfprintf_r+0x81e>
 80308fc:	f04f 0a00 	mov.w	sl, #0
 8030900:	f10d 0be4 	add.w	fp, sp, #228	@ 0xe4
 8030904:	e79a      	b.n	803083c <_svfprintf_r+0x454>
 8030906:	4682      	mov	sl, r0
 8030908:	e798      	b.n	803083c <_svfprintf_r+0x454>
 803090a:	2606      	movs	r6, #6
 803090c:	e796      	b.n	803083c <_svfprintf_r+0x454>
 803090e:	46b2      	mov	sl, r6
 8030910:	2601      	movs	r6, #1
 8030912:	e793      	b.n	803083c <_svfprintf_r+0x454>
 8030914:	ed9d 7b0c 	vldr	d7, [sp, #48]	@ 0x30
 8030918:	2300      	movs	r3, #0
 803091a:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 803091e:	e79a      	b.n	8030856 <_svfprintf_r+0x46e>
 8030920:	4646      	mov	r6, r8
 8030922:	e7c0      	b.n	80308a6 <_svfprintf_r+0x4be>
 8030924:	7fefffff 	.word	0x7fefffff
 8030928:	0803dccb 	.word	0x0803dccb
 803092c:	0803dcc7 	.word	0x0803dcc7
 8030930:	0803dcd3 	.word	0x0803dcd3
 8030934:	0803dccf 	.word	0x0803dccf
 8030938:	0803dac4 	.word	0x0803dac4
 803093c:	0803dad5 	.word	0x0803dad5
 8030940:	40300000 	.word	0x40300000
 8030944:	4baa      	ldr	r3, [pc, #680]	@ (8030bf0 <_svfprintf_r+0x808>)
 8030946:	2200      	movs	r2, #0
 8030948:	f7e0 f8fe 	bl	8010b48 <__aeabi_dcmpgt>
 803094c:	b950      	cbnz	r0, 8030964 <_svfprintf_r+0x57c>
 803094e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8030952:	4ba7      	ldr	r3, [pc, #668]	@ (8030bf0 <_svfprintf_r+0x808>)
 8030954:	2200      	movs	r2, #0
 8030956:	f7e0 f8cf 	bl	8010af8 <__aeabi_dcmpeq>
 803095a:	2800      	cmp	r0, #0
 803095c:	d0ca      	beq.n	80308f4 <_svfprintf_r+0x50c>
 803095e:	f018 0f01 	tst.w	r8, #1
 8030962:	d0c7      	beq.n	80308f4 <_svfprintf_r+0x50c>
 8030964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030966:	9724      	str	r7, [sp, #144]	@ 0x90
 8030968:	7bd9      	ldrb	r1, [r3, #15]
 803096a:	2030      	movs	r0, #48	@ 0x30
 803096c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 803096e:	1e53      	subs	r3, r2, #1
 8030970:	9324      	str	r3, [sp, #144]	@ 0x90
 8030972:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8030976:	428b      	cmp	r3, r1
 8030978:	f000 8140 	beq.w	8030bfc <_svfprintf_r+0x814>
 803097c:	2b39      	cmp	r3, #57	@ 0x39
 803097e:	bf0b      	itete	eq
 8030980:	9b09      	ldreq	r3, [sp, #36]	@ 0x24
 8030982:	3301      	addne	r3, #1
 8030984:	7a9b      	ldrbeq	r3, [r3, #10]
 8030986:	b2db      	uxtbne	r3, r3
 8030988:	f802 3c01 	strb.w	r3, [r2, #-1]
 803098c:	eba7 030b 	sub.w	r3, r7, fp
 8030990:	9304      	str	r3, [sp, #16]
 8030992:	9907      	ldr	r1, [sp, #28]
 8030994:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8030998:	9820      	ldr	r0, [sp, #128]	@ 0x80
 803099a:	f021 0120 	bic.w	r1, r1, #32
 803099e:	2941      	cmp	r1, #65	@ 0x41
 80309a0:	bf08      	it	eq
 80309a2:	320f      	addeq	r2, #15
 80309a4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80309a8:	bf06      	itte	eq
 80309aa:	b2d2      	uxtbeq	r2, r2
 80309ac:	2101      	moveq	r1, #1
 80309ae:	2100      	movne	r1, #0
 80309b0:	2b00      	cmp	r3, #0
 80309b2:	9320      	str	r3, [sp, #128]	@ 0x80
 80309b4:	bfb8      	it	lt
 80309b6:	f1c0 0301 	rsblt	r3, r0, #1
 80309ba:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 80309be:	bfb4      	ite	lt
 80309c0:	222d      	movlt	r2, #45	@ 0x2d
 80309c2:	222b      	movge	r2, #43	@ 0x2b
 80309c4:	2b09      	cmp	r3, #9
 80309c6:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 80309ca:	f340 8192 	ble.w	8030cf2 <_svfprintf_r+0x90a>
 80309ce:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 80309d2:	270a      	movs	r7, #10
 80309d4:	4602      	mov	r2, r0
 80309d6:	fbb3 f6f7 	udiv	r6, r3, r7
 80309da:	fb07 3116 	mls	r1, r7, r6, r3
 80309de:	3130      	adds	r1, #48	@ 0x30
 80309e0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80309e4:	4619      	mov	r1, r3
 80309e6:	2963      	cmp	r1, #99	@ 0x63
 80309e8:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 80309ec:	4633      	mov	r3, r6
 80309ee:	dcf1      	bgt.n	80309d4 <_svfprintf_r+0x5ec>
 80309f0:	3330      	adds	r3, #48	@ 0x30
 80309f2:	1e91      	subs	r1, r2, #2
 80309f4:	f800 3c01 	strb.w	r3, [r0, #-1]
 80309f8:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 80309fc:	460b      	mov	r3, r1
 80309fe:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8030a02:	4283      	cmp	r3, r0
 8030a04:	f0c0 8170 	bcc.w	8030ce8 <_svfprintf_r+0x900>
 8030a08:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8030a0c:	1a9b      	subs	r3, r3, r2
 8030a0e:	4281      	cmp	r1, r0
 8030a10:	bf88      	it	hi
 8030a12:	2300      	movhi	r3, #0
 8030a14:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8030a18:	441a      	add	r2, r3
 8030a1a:	ab22      	add	r3, sp, #136	@ 0x88
 8030a1c:	1ad3      	subs	r3, r2, r3
 8030a1e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8030a20:	9b04      	ldr	r3, [sp, #16]
 8030a22:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8030a24:	2b01      	cmp	r3, #1
 8030a26:	eb03 0602 	add.w	r6, r3, r2
 8030a2a:	dc01      	bgt.n	8030a30 <_svfprintf_r+0x648>
 8030a2c:	07e8      	lsls	r0, r5, #31
 8030a2e:	d501      	bpl.n	8030a34 <_svfprintf_r+0x64c>
 8030a30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8030a32:	441e      	add	r6, r3
 8030a34:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8030a38:	f04f 0800 	mov.w	r8, #0
 8030a3c:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8030a40:	9311      	str	r3, [sp, #68]	@ 0x44
 8030a42:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8030a46:	4647      	mov	r7, r8
 8030a48:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8030a4a:	2b00      	cmp	r3, #0
 8030a4c:	f040 81a4 	bne.w	8030d98 <_svfprintf_r+0x9b0>
 8030a50:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8030a52:	f04f 0900 	mov.w	r9, #0
 8030a56:	45b1      	cmp	r9, r6
 8030a58:	464b      	mov	r3, r9
 8030a5a:	bfb8      	it	lt
 8030a5c:	4633      	movlt	r3, r6
 8030a5e:	9311      	str	r3, [sp, #68]	@ 0x44
 8030a60:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8030a64:	b113      	cbz	r3, 8030a6c <_svfprintf_r+0x684>
 8030a66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8030a68:	3301      	adds	r3, #1
 8030a6a:	9311      	str	r3, [sp, #68]	@ 0x44
 8030a6c:	f015 0302 	ands.w	r3, r5, #2
 8030a70:	931b      	str	r3, [sp, #108]	@ 0x6c
 8030a72:	bf1e      	ittt	ne
 8030a74:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 8030a76:	3302      	addne	r3, #2
 8030a78:	9311      	strne	r3, [sp, #68]	@ 0x44
 8030a7a:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8030a7e:	931c      	str	r3, [sp, #112]	@ 0x70
 8030a80:	d120      	bne.n	8030ac4 <_svfprintf_r+0x6dc>
 8030a82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8030a84:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8030a86:	1a9b      	subs	r3, r3, r2
 8030a88:	2b00      	cmp	r3, #0
 8030a8a:	dd1b      	ble.n	8030ac4 <_svfprintf_r+0x6dc>
 8030a8c:	e9dd 2c27 	ldrd	r2, ip, [sp, #156]	@ 0x9c
 8030a90:	4958      	ldr	r1, [pc, #352]	@ (8030bf4 <_svfprintf_r+0x80c>)
 8030a92:	6021      	str	r1, [r4, #0]
 8030a94:	2b10      	cmp	r3, #16
 8030a96:	f102 0201 	add.w	r2, r2, #1
 8030a9a:	f104 0008 	add.w	r0, r4, #8
 8030a9e:	f300 82b1 	bgt.w	8031004 <_svfprintf_r+0xc1c>
 8030aa2:	eb0c 0103 	add.w	r1, ip, r3
 8030aa6:	2a07      	cmp	r2, #7
 8030aa8:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 8030aac:	6063      	str	r3, [r4, #4]
 8030aae:	f340 82be 	ble.w	803102e <_svfprintf_r+0xc46>
 8030ab2:	9906      	ldr	r1, [sp, #24]
 8030ab4:	9803      	ldr	r0, [sp, #12]
 8030ab6:	aa26      	add	r2, sp, #152	@ 0x98
 8030ab8:	f004 fc9a 	bl	80353f0 <__ssprint_r>
 8030abc:	2800      	cmp	r0, #0
 8030abe:	f040 8605 	bne.w	80316cc <_svfprintf_r+0x12e4>
 8030ac2:	ac29      	add	r4, sp, #164	@ 0xa4
 8030ac4:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8030ac8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030aca:	b16a      	cbz	r2, 8030ae8 <_svfprintf_r+0x700>
 8030acc:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8030ad0:	6022      	str	r2, [r4, #0]
 8030ad2:	2201      	movs	r2, #1
 8030ad4:	4413      	add	r3, r2
 8030ad6:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030ad8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030ada:	6062      	str	r2, [r4, #4]
 8030adc:	4413      	add	r3, r2
 8030ade:	2b07      	cmp	r3, #7
 8030ae0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030ae2:	f300 82a6 	bgt.w	8031032 <_svfprintf_r+0xc4a>
 8030ae6:	3408      	adds	r4, #8
 8030ae8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8030aea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030aec:	b162      	cbz	r2, 8030b08 <_svfprintf_r+0x720>
 8030aee:	aa1f      	add	r2, sp, #124	@ 0x7c
 8030af0:	6022      	str	r2, [r4, #0]
 8030af2:	2202      	movs	r2, #2
 8030af4:	4413      	add	r3, r2
 8030af6:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030af8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030afa:	6062      	str	r2, [r4, #4]
 8030afc:	3301      	adds	r3, #1
 8030afe:	2b07      	cmp	r3, #7
 8030b00:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030b02:	f300 82a0 	bgt.w	8031046 <_svfprintf_r+0xc5e>
 8030b06:	3408      	adds	r4, #8
 8030b08:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8030b0a:	2b80      	cmp	r3, #128	@ 0x80
 8030b0c:	d120      	bne.n	8030b50 <_svfprintf_r+0x768>
 8030b0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8030b10:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8030b12:	1a9b      	subs	r3, r3, r2
 8030b14:	2b00      	cmp	r3, #0
 8030b16:	dd1b      	ble.n	8030b50 <_svfprintf_r+0x768>
 8030b18:	e9dd 2c27 	ldrd	r2, ip, [sp, #156]	@ 0x9c
 8030b1c:	4936      	ldr	r1, [pc, #216]	@ (8030bf8 <_svfprintf_r+0x810>)
 8030b1e:	6021      	str	r1, [r4, #0]
 8030b20:	2b10      	cmp	r3, #16
 8030b22:	f102 0201 	add.w	r2, r2, #1
 8030b26:	f104 0008 	add.w	r0, r4, #8
 8030b2a:	f300 8296 	bgt.w	803105a <_svfprintf_r+0xc72>
 8030b2e:	eb0c 0103 	add.w	r1, ip, r3
 8030b32:	2a07      	cmp	r2, #7
 8030b34:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 8030b38:	6063      	str	r3, [r4, #4]
 8030b3a:	f340 82a3 	ble.w	8031084 <_svfprintf_r+0xc9c>
 8030b3e:	9906      	ldr	r1, [sp, #24]
 8030b40:	9803      	ldr	r0, [sp, #12]
 8030b42:	aa26      	add	r2, sp, #152	@ 0x98
 8030b44:	f004 fc54 	bl	80353f0 <__ssprint_r>
 8030b48:	2800      	cmp	r0, #0
 8030b4a:	f040 85bf 	bne.w	80316cc <_svfprintf_r+0x12e4>
 8030b4e:	ac29      	add	r4, sp, #164	@ 0xa4
 8030b50:	eba9 0906 	sub.w	r9, r9, r6
 8030b54:	f1b9 0f00 	cmp.w	r9, #0
 8030b58:	dd1c      	ble.n	8030b94 <_svfprintf_r+0x7ac>
 8030b5a:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8030b5e:	4826      	ldr	r0, [pc, #152]	@ (8030bf8 <_svfprintf_r+0x810>)
 8030b60:	6020      	str	r0, [r4, #0]
 8030b62:	f1b9 0f10 	cmp.w	r9, #16
 8030b66:	f102 0201 	add.w	r2, r2, #1
 8030b6a:	f104 0108 	add.w	r1, r4, #8
 8030b6e:	f300 828b 	bgt.w	8031088 <_svfprintf_r+0xca0>
 8030b72:	444b      	add	r3, r9
 8030b74:	2a07      	cmp	r2, #7
 8030b76:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8030b7a:	f8c4 9004 	str.w	r9, [r4, #4]
 8030b7e:	f340 8297 	ble.w	80310b0 <_svfprintf_r+0xcc8>
 8030b82:	9906      	ldr	r1, [sp, #24]
 8030b84:	9803      	ldr	r0, [sp, #12]
 8030b86:	aa26      	add	r2, sp, #152	@ 0x98
 8030b88:	f004 fc32 	bl	80353f0 <__ssprint_r>
 8030b8c:	2800      	cmp	r0, #0
 8030b8e:	f040 859d 	bne.w	80316cc <_svfprintf_r+0x12e4>
 8030b92:	ac29      	add	r4, sp, #164	@ 0xa4
 8030b94:	05eb      	lsls	r3, r5, #23
 8030b96:	f8dd 90a0 	ldr.w	r9, [sp, #160]	@ 0xa0
 8030b9a:	f100 828f 	bmi.w	80310bc <_svfprintf_r+0xcd4>
 8030b9e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030ba0:	3301      	adds	r3, #1
 8030ba2:	e9c4 b600 	strd	fp, r6, [r4]
 8030ba6:	2b07      	cmp	r3, #7
 8030ba8:	444e      	add	r6, r9
 8030baa:	9628      	str	r6, [sp, #160]	@ 0xa0
 8030bac:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030bae:	f300 82ca 	bgt.w	8031146 <_svfprintf_r+0xd5e>
 8030bb2:	3408      	adds	r4, #8
 8030bb4:	076a      	lsls	r2, r5, #29
 8030bb6:	f100 856b 	bmi.w	8031690 <_svfprintf_r+0x12a8>
 8030bba:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	@ 0x3c
 8030bbe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8030bc0:	428a      	cmp	r2, r1
 8030bc2:	bfac      	ite	ge
 8030bc4:	189b      	addge	r3, r3, r2
 8030bc6:	185b      	addlt	r3, r3, r1
 8030bc8:	9310      	str	r3, [sp, #64]	@ 0x40
 8030bca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030bcc:	b13b      	cbz	r3, 8030bde <_svfprintf_r+0x7f6>
 8030bce:	9906      	ldr	r1, [sp, #24]
 8030bd0:	9803      	ldr	r0, [sp, #12]
 8030bd2:	aa26      	add	r2, sp, #152	@ 0x98
 8030bd4:	f004 fc0c 	bl	80353f0 <__ssprint_r>
 8030bd8:	2800      	cmp	r0, #0
 8030bda:	f040 8577 	bne.w	80316cc <_svfprintf_r+0x12e4>
 8030bde:	2300      	movs	r3, #0
 8030be0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030be2:	f1ba 0f00 	cmp.w	sl, #0
 8030be6:	f040 858d 	bne.w	8031704 <_svfprintf_r+0x131c>
 8030bea:	9f08      	ldr	r7, [sp, #32]
 8030bec:	ac29      	add	r4, sp, #164	@ 0xa4
 8030bee:	e0e0      	b.n	8030db2 <_svfprintf_r+0x9ca>
 8030bf0:	3fe00000 	.word	0x3fe00000
 8030bf4:	0803e148 	.word	0x0803e148
 8030bf8:	0803e138 	.word	0x0803e138
 8030bfc:	f802 0c01 	strb.w	r0, [r2, #-1]
 8030c00:	e6b4      	b.n	803096c <_svfprintf_r+0x584>
 8030c02:	f803 0b01 	strb.w	r0, [r3], #1
 8030c06:	1aca      	subs	r2, r1, r3
 8030c08:	2a00      	cmp	r2, #0
 8030c0a:	dafa      	bge.n	8030c02 <_svfprintf_r+0x81a>
 8030c0c:	1c73      	adds	r3, r6, #1
 8030c0e:	3601      	adds	r6, #1
 8030c10:	bfb8      	it	lt
 8030c12:	2300      	movlt	r3, #0
 8030c14:	441f      	add	r7, r3
 8030c16:	e6b9      	b.n	803098c <_svfprintf_r+0x5a4>
 8030c18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8030c1c:	d005      	beq.n	8030c2a <_svfprintf_r+0x842>
 8030c1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8030c22:	d12f      	bne.n	8030c84 <_svfprintf_r+0x89c>
 8030c24:	1c77      	adds	r7, r6, #1
 8030c26:	2102      	movs	r1, #2
 8030c28:	e001      	b.n	8030c2e <_svfprintf_r+0x846>
 8030c2a:	4637      	mov	r7, r6
 8030c2c:	2103      	movs	r1, #3
 8030c2e:	ab24      	add	r3, sp, #144	@ 0x90
 8030c30:	9301      	str	r3, [sp, #4]
 8030c32:	ab21      	add	r3, sp, #132	@ 0x84
 8030c34:	9300      	str	r3, [sp, #0]
 8030c36:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 8030c3a:	9803      	ldr	r0, [sp, #12]
 8030c3c:	ab20      	add	r3, sp, #128	@ 0x80
 8030c3e:	463a      	mov	r2, r7
 8030c40:	f005 f812 	bl	8035c68 <_dtoa_r>
 8030c44:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8030c48:	4683      	mov	fp, r0
 8030c4a:	d130      	bne.n	8030cae <_svfprintf_r+0x8c6>
 8030c4c:	07ea      	lsls	r2, r5, #31
 8030c4e:	d41b      	bmi.n	8030c88 <_svfprintf_r+0x8a0>
 8030c50:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8030c52:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8030c54:	eba3 030b 	sub.w	r3, r3, fp
 8030c58:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8030c5c:	9304      	str	r3, [sp, #16]
 8030c5e:	d03b      	beq.n	8030cd8 <_svfprintf_r+0x8f0>
 8030c60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8030c64:	f47f ae95 	bne.w	8030992 <_svfprintf_r+0x5aa>
 8030c68:	f005 0301 	and.w	r3, r5, #1
 8030c6c:	2f00      	cmp	r7, #0
 8030c6e:	ea43 0306 	orr.w	r3, r3, r6
 8030c72:	dd58      	ble.n	8030d26 <_svfprintf_r+0x93e>
 8030c74:	2b00      	cmp	r3, #0
 8030c76:	d060      	beq.n	8030d3a <_svfprintf_r+0x952>
 8030c78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8030c7a:	18fb      	adds	r3, r7, r3
 8030c7c:	441e      	add	r6, r3
 8030c7e:	2366      	movs	r3, #102	@ 0x66
 8030c80:	9307      	str	r3, [sp, #28]
 8030c82:	e05f      	b.n	8030d44 <_svfprintf_r+0x95c>
 8030c84:	4637      	mov	r7, r6
 8030c86:	e7ce      	b.n	8030c26 <_svfprintf_r+0x83e>
 8030c88:	eb00 0907 	add.w	r9, r0, r7
 8030c8c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	@ 0x48
 8030c90:	2200      	movs	r2, #0
 8030c92:	2300      	movs	r3, #0
 8030c94:	f7df ff30 	bl	8010af8 <__aeabi_dcmpeq>
 8030c98:	b108      	cbz	r0, 8030c9e <_svfprintf_r+0x8b6>
 8030c9a:	f8cd 9090 	str.w	r9, [sp, #144]	@ 0x90
 8030c9e:	2230      	movs	r2, #48	@ 0x30
 8030ca0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8030ca2:	4599      	cmp	r9, r3
 8030ca4:	d9d4      	bls.n	8030c50 <_svfprintf_r+0x868>
 8030ca6:	1c59      	adds	r1, r3, #1
 8030ca8:	9124      	str	r1, [sp, #144]	@ 0x90
 8030caa:	701a      	strb	r2, [r3, #0]
 8030cac:	e7f8      	b.n	8030ca0 <_svfprintf_r+0x8b8>
 8030cae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8030cb2:	eb00 0907 	add.w	r9, r0, r7
 8030cb6:	d1e9      	bne.n	8030c8c <_svfprintf_r+0x8a4>
 8030cb8:	7803      	ldrb	r3, [r0, #0]
 8030cba:	2b30      	cmp	r3, #48	@ 0x30
 8030cbc:	d109      	bne.n	8030cd2 <_svfprintf_r+0x8ea>
 8030cbe:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	@ 0x48
 8030cc2:	2200      	movs	r2, #0
 8030cc4:	2300      	movs	r3, #0
 8030cc6:	f7df ff17 	bl	8010af8 <__aeabi_dcmpeq>
 8030cca:	b910      	cbnz	r0, 8030cd2 <_svfprintf_r+0x8ea>
 8030ccc:	f1c7 0701 	rsb	r7, r7, #1
 8030cd0:	9720      	str	r7, [sp, #128]	@ 0x80
 8030cd2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8030cd4:	4499      	add	r9, r3
 8030cd6:	e7d9      	b.n	8030c8c <_svfprintf_r+0x8a4>
 8030cd8:	1cfb      	adds	r3, r7, #3
 8030cda:	db01      	blt.n	8030ce0 <_svfprintf_r+0x8f8>
 8030cdc:	42be      	cmp	r6, r7
 8030cde:	da15      	bge.n	8030d0c <_svfprintf_r+0x924>
 8030ce0:	9b07      	ldr	r3, [sp, #28]
 8030ce2:	3b02      	subs	r3, #2
 8030ce4:	9307      	str	r3, [sp, #28]
 8030ce6:	e654      	b.n	8030992 <_svfprintf_r+0x5aa>
 8030ce8:	f813 7b01 	ldrb.w	r7, [r3], #1
 8030cec:	f806 7f01 	strb.w	r7, [r6, #1]!
 8030cf0:	e687      	b.n	8030a02 <_svfprintf_r+0x61a>
 8030cf2:	b941      	cbnz	r1, 8030d06 <_svfprintf_r+0x91e>
 8030cf4:	2230      	movs	r2, #48	@ 0x30
 8030cf6:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8030cfa:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8030cfe:	3330      	adds	r3, #48	@ 0x30
 8030d00:	f802 3b01 	strb.w	r3, [r2], #1
 8030d04:	e689      	b.n	8030a1a <_svfprintf_r+0x632>
 8030d06:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8030d0a:	e7f8      	b.n	8030cfe <_svfprintf_r+0x916>
 8030d0c:	9b04      	ldr	r3, [sp, #16]
 8030d0e:	42bb      	cmp	r3, r7
 8030d10:	dd0d      	ble.n	8030d2e <_svfprintf_r+0x946>
 8030d12:	9b04      	ldr	r3, [sp, #16]
 8030d14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8030d16:	2f00      	cmp	r7, #0
 8030d18:	eb03 0602 	add.w	r6, r3, r2
 8030d1c:	dc0b      	bgt.n	8030d36 <_svfprintf_r+0x94e>
 8030d1e:	f1c7 0301 	rsb	r3, r7, #1
 8030d22:	441e      	add	r6, r3
 8030d24:	e007      	b.n	8030d36 <_svfprintf_r+0x94e>
 8030d26:	b153      	cbz	r3, 8030d3e <_svfprintf_r+0x956>
 8030d28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8030d2a:	3301      	adds	r3, #1
 8030d2c:	e7a6      	b.n	8030c7c <_svfprintf_r+0x894>
 8030d2e:	07e9      	lsls	r1, r5, #31
 8030d30:	d51d      	bpl.n	8030d6e <_svfprintf_r+0x986>
 8030d32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8030d34:	18fe      	adds	r6, r7, r3
 8030d36:	2367      	movs	r3, #103	@ 0x67
 8030d38:	e7a2      	b.n	8030c80 <_svfprintf_r+0x898>
 8030d3a:	463e      	mov	r6, r7
 8030d3c:	e79f      	b.n	8030c7e <_svfprintf_r+0x896>
 8030d3e:	2366      	movs	r3, #102	@ 0x66
 8030d40:	9307      	str	r3, [sp, #28]
 8030d42:	2601      	movs	r6, #1
 8030d44:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8030d48:	9309      	str	r3, [sp, #36]	@ 0x24
 8030d4a:	d022      	beq.n	8030d92 <_svfprintf_r+0x9aa>
 8030d4c:	f04f 0800 	mov.w	r8, #0
 8030d50:	2f00      	cmp	r7, #0
 8030d52:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8030d56:	f77f ae77 	ble.w	8030a48 <_svfprintf_r+0x660>
 8030d5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8030d5c:	781b      	ldrb	r3, [r3, #0]
 8030d5e:	2bff      	cmp	r3, #255	@ 0xff
 8030d60:	d107      	bne.n	8030d72 <_svfprintf_r+0x98a>
 8030d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030d64:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8030d66:	4443      	add	r3, r8
 8030d68:	fb02 6603 	mla	r6, r2, r3, r6
 8030d6c:	e66c      	b.n	8030a48 <_svfprintf_r+0x660>
 8030d6e:	463e      	mov	r6, r7
 8030d70:	e7e1      	b.n	8030d36 <_svfprintf_r+0x94e>
 8030d72:	42bb      	cmp	r3, r7
 8030d74:	daf5      	bge.n	8030d62 <_svfprintf_r+0x97a>
 8030d76:	1aff      	subs	r7, r7, r3
 8030d78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8030d7a:	785b      	ldrb	r3, [r3, #1]
 8030d7c:	b133      	cbz	r3, 8030d8c <_svfprintf_r+0x9a4>
 8030d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030d80:	3301      	adds	r3, #1
 8030d82:	9309      	str	r3, [sp, #36]	@ 0x24
 8030d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8030d86:	3301      	adds	r3, #1
 8030d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8030d8a:	e7e6      	b.n	8030d5a <_svfprintf_r+0x972>
 8030d8c:	f108 0801 	add.w	r8, r8, #1
 8030d90:	e7e3      	b.n	8030d5a <_svfprintf_r+0x972>
 8030d92:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8030d96:	e657      	b.n	8030a48 <_svfprintf_r+0x660>
 8030d98:	232d      	movs	r3, #45	@ 0x2d
 8030d9a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030d9e:	e657      	b.n	8030a50 <_svfprintf_r+0x668>
 8030da0:	06aa      	lsls	r2, r5, #26
 8030da2:	d50a      	bpl.n	8030dba <_svfprintf_r+0x9d2>
 8030da4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8030da6:	683b      	ldr	r3, [r7, #0]
 8030da8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8030daa:	17d2      	asrs	r2, r2, #31
 8030dac:	e9c3 1200 	strd	r1, r2, [r3]
 8030db0:	3704      	adds	r7, #4
 8030db2:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 8030db6:	f7ff bb4f 	b.w	8030458 <_svfprintf_r+0x70>
 8030dba:	06eb      	lsls	r3, r5, #27
 8030dbc:	d503      	bpl.n	8030dc6 <_svfprintf_r+0x9de>
 8030dbe:	683b      	ldr	r3, [r7, #0]
 8030dc0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8030dc2:	601a      	str	r2, [r3, #0]
 8030dc4:	e7f4      	b.n	8030db0 <_svfprintf_r+0x9c8>
 8030dc6:	066e      	lsls	r6, r5, #25
 8030dc8:	d503      	bpl.n	8030dd2 <_svfprintf_r+0x9ea>
 8030dca:	683b      	ldr	r3, [r7, #0]
 8030dcc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8030dce:	801a      	strh	r2, [r3, #0]
 8030dd0:	e7ee      	b.n	8030db0 <_svfprintf_r+0x9c8>
 8030dd2:	05ad      	lsls	r5, r5, #22
 8030dd4:	d5f3      	bpl.n	8030dbe <_svfprintf_r+0x9d6>
 8030dd6:	683b      	ldr	r3, [r7, #0]
 8030dd8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8030dda:	701a      	strb	r2, [r3, #0]
 8030ddc:	e7e8      	b.n	8030db0 <_svfprintf_r+0x9c8>
 8030dde:	f045 0510 	orr.w	r5, r5, #16
 8030de2:	f015 0320 	ands.w	r3, r5, #32
 8030de6:	d01f      	beq.n	8030e28 <_svfprintf_r+0xa40>
 8030de8:	3707      	adds	r7, #7
 8030dea:	f027 0307 	bic.w	r3, r7, #7
 8030dee:	461a      	mov	r2, r3
 8030df0:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8030df4:	f852 7b08 	ldr.w	r7, [r2], #8
 8030df8:	9208      	str	r2, [sp, #32]
 8030dfa:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8030dfe:	2300      	movs	r3, #0
 8030e00:	2200      	movs	r2, #0
 8030e02:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8030e06:	2e00      	cmp	r6, #0
 8030e08:	f2c0 848d 	blt.w	8031726 <_svfprintf_r+0x133e>
 8030e0c:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8030e10:	9209      	str	r2, [sp, #36]	@ 0x24
 8030e12:	ea57 0208 	orrs.w	r2, r7, r8
 8030e16:	f040 848b 	bne.w	8031730 <_svfprintf_r+0x1348>
 8030e1a:	2e00      	cmp	r6, #0
 8030e1c:	f000 80de 	beq.w	8030fdc <_svfprintf_r+0xbf4>
 8030e20:	2b01      	cmp	r3, #1
 8030e22:	f040 8488 	bne.w	8031736 <_svfprintf_r+0x134e>
 8030e26:	e083      	b.n	8030f30 <_svfprintf_r+0xb48>
 8030e28:	463a      	mov	r2, r7
 8030e2a:	f015 0810 	ands.w	r8, r5, #16
 8030e2e:	f852 7b04 	ldr.w	r7, [r2], #4
 8030e32:	9208      	str	r2, [sp, #32]
 8030e34:	d001      	beq.n	8030e3a <_svfprintf_r+0xa52>
 8030e36:	4698      	mov	r8, r3
 8030e38:	e7df      	b.n	8030dfa <_svfprintf_r+0xa12>
 8030e3a:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8030e3e:	d001      	beq.n	8030e44 <_svfprintf_r+0xa5c>
 8030e40:	b2bf      	uxth	r7, r7
 8030e42:	e7da      	b.n	8030dfa <_svfprintf_r+0xa12>
 8030e44:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 8030e48:	d0d7      	beq.n	8030dfa <_svfprintf_r+0xa12>
 8030e4a:	b2ff      	uxtb	r7, r7
 8030e4c:	e7f3      	b.n	8030e36 <_svfprintf_r+0xa4e>
 8030e4e:	463b      	mov	r3, r7
 8030e50:	2278      	movs	r2, #120	@ 0x78
 8030e52:	f853 7b04 	ldr.w	r7, [r3], #4
 8030e56:	9308      	str	r3, [sp, #32]
 8030e58:	f647 0330 	movw	r3, #30768	@ 0x7830
 8030e5c:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8030e60:	4b94      	ldr	r3, [pc, #592]	@ (80310b4 <_svfprintf_r+0xccc>)
 8030e62:	931a      	str	r3, [sp, #104]	@ 0x68
 8030e64:	f04f 0800 	mov.w	r8, #0
 8030e68:	f045 0502 	orr.w	r5, r5, #2
 8030e6c:	2302      	movs	r3, #2
 8030e6e:	9207      	str	r2, [sp, #28]
 8030e70:	e7c6      	b.n	8030e00 <_svfprintf_r+0xa18>
 8030e72:	463b      	mov	r3, r7
 8030e74:	2700      	movs	r7, #0
 8030e76:	f853 bb04 	ldr.w	fp, [r3], #4
 8030e7a:	9308      	str	r3, [sp, #32]
 8030e7c:	42be      	cmp	r6, r7
 8030e7e:	f88d 707b 	strb.w	r7, [sp, #123]	@ 0x7b
 8030e82:	db0f      	blt.n	8030ea4 <_svfprintf_r+0xabc>
 8030e84:	4632      	mov	r2, r6
 8030e86:	4639      	mov	r1, r7
 8030e88:	4658      	mov	r0, fp
 8030e8a:	f7df f9b9 	bl	8010200 <memchr>
 8030e8e:	4682      	mov	sl, r0
 8030e90:	2800      	cmp	r0, #0
 8030e92:	f43f ac8e 	beq.w	80307b2 <_svfprintf_r+0x3ca>
 8030e96:	eba0 060b 	sub.w	r6, r0, fp
 8030e9a:	46ba      	mov	sl, r7
 8030e9c:	46b9      	mov	r9, r7
 8030e9e:	46b8      	mov	r8, r7
 8030ea0:	9709      	str	r7, [sp, #36]	@ 0x24
 8030ea2:	e5d8      	b.n	8030a56 <_svfprintf_r+0x66e>
 8030ea4:	4658      	mov	r0, fp
 8030ea6:	f7df f9fb 	bl	80102a0 <strlen>
 8030eaa:	46ba      	mov	sl, r7
 8030eac:	4606      	mov	r6, r0
 8030eae:	e480      	b.n	80307b2 <_svfprintf_r+0x3ca>
 8030eb0:	f045 0510 	orr.w	r5, r5, #16
 8030eb4:	f015 0320 	ands.w	r3, r5, #32
 8030eb8:	d00a      	beq.n	8030ed0 <_svfprintf_r+0xae8>
 8030eba:	3707      	adds	r7, #7
 8030ebc:	f027 0307 	bic.w	r3, r7, #7
 8030ec0:	461a      	mov	r2, r3
 8030ec2:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8030ec6:	f852 7b08 	ldr.w	r7, [r2], #8
 8030eca:	9208      	str	r2, [sp, #32]
 8030ecc:	2301      	movs	r3, #1
 8030ece:	e797      	b.n	8030e00 <_svfprintf_r+0xa18>
 8030ed0:	463a      	mov	r2, r7
 8030ed2:	f015 0810 	ands.w	r8, r5, #16
 8030ed6:	f852 7b04 	ldr.w	r7, [r2], #4
 8030eda:	9208      	str	r2, [sp, #32]
 8030edc:	d001      	beq.n	8030ee2 <_svfprintf_r+0xafa>
 8030ede:	4698      	mov	r8, r3
 8030ee0:	e7f4      	b.n	8030ecc <_svfprintf_r+0xae4>
 8030ee2:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8030ee6:	d001      	beq.n	8030eec <_svfprintf_r+0xb04>
 8030ee8:	b2bf      	uxth	r7, r7
 8030eea:	e7ef      	b.n	8030ecc <_svfprintf_r+0xae4>
 8030eec:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 8030ef0:	d0ec      	beq.n	8030ecc <_svfprintf_r+0xae4>
 8030ef2:	b2ff      	uxtb	r7, r7
 8030ef4:	e7f3      	b.n	8030ede <_svfprintf_r+0xaf6>
 8030ef6:	4b70      	ldr	r3, [pc, #448]	@ (80310b8 <_svfprintf_r+0xcd0>)
 8030ef8:	f7ff bb43 	b.w	8030582 <_svfprintf_r+0x19a>
 8030efc:	463a      	mov	r2, r7
 8030efe:	f015 0810 	ands.w	r8, r5, #16
 8030f02:	f852 7b04 	ldr.w	r7, [r2], #4
 8030f06:	9208      	str	r2, [sp, #32]
 8030f08:	d002      	beq.n	8030f10 <_svfprintf_r+0xb28>
 8030f0a:	4698      	mov	r8, r3
 8030f0c:	f7ff bb47 	b.w	803059e <_svfprintf_r+0x1b6>
 8030f10:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8030f14:	d002      	beq.n	8030f1c <_svfprintf_r+0xb34>
 8030f16:	b2bf      	uxth	r7, r7
 8030f18:	f7ff bb41 	b.w	803059e <_svfprintf_r+0x1b6>
 8030f1c:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 8030f20:	f43f ab3d 	beq.w	803059e <_svfprintf_r+0x1b6>
 8030f24:	b2ff      	uxtb	r7, r7
 8030f26:	e7f0      	b.n	8030f0a <_svfprintf_r+0xb22>
 8030f28:	2f0a      	cmp	r7, #10
 8030f2a:	f178 0300 	sbcs.w	r3, r8, #0
 8030f2e:	d207      	bcs.n	8030f40 <_svfprintf_r+0xb58>
 8030f30:	3730      	adds	r7, #48	@ 0x30
 8030f32:	b2ff      	uxtb	r7, r7
 8030f34:	f88d 7147 	strb.w	r7, [sp, #327]	@ 0x147
 8030f38:	f20d 1b47 	addw	fp, sp, #327	@ 0x147
 8030f3c:	f000 bc18 	b.w	8031770 <_svfprintf_r+0x1388>
 8030f40:	2300      	movs	r3, #0
 8030f42:	9304      	str	r3, [sp, #16]
 8030f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8030f4a:	ad52      	add	r5, sp, #328	@ 0x148
 8030f4c:	9311      	str	r3, [sp, #68]	@ 0x44
 8030f4e:	220a      	movs	r2, #10
 8030f50:	2300      	movs	r3, #0
 8030f52:	4638      	mov	r0, r7
 8030f54:	4641      	mov	r1, r8
 8030f56:	f7df feff 	bl	8010d58 <__aeabi_uldivmod>
 8030f5a:	9b04      	ldr	r3, [sp, #16]
 8030f5c:	3301      	adds	r3, #1
 8030f5e:	9304      	str	r3, [sp, #16]
 8030f60:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8030f62:	3230      	adds	r2, #48	@ 0x30
 8030f64:	4682      	mov	sl, r0
 8030f66:	4689      	mov	r9, r1
 8030f68:	f105 3bff 	add.w	fp, r5, #4294967295	@ 0xffffffff
 8030f6c:	f805 2c01 	strb.w	r2, [r5, #-1]
 8030f70:	b303      	cbz	r3, 8030fb4 <_svfprintf_r+0xbcc>
 8030f72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8030f74:	781a      	ldrb	r2, [r3, #0]
 8030f76:	9b04      	ldr	r3, [sp, #16]
 8030f78:	4293      	cmp	r3, r2
 8030f7a:	d11b      	bne.n	8030fb4 <_svfprintf_r+0xbcc>
 8030f7c:	2bff      	cmp	r3, #255	@ 0xff
 8030f7e:	d019      	beq.n	8030fb4 <_svfprintf_r+0xbcc>
 8030f80:	2f0a      	cmp	r7, #10
 8030f82:	f178 0800 	sbcs.w	r8, r8, #0
 8030f86:	f0c0 83f3 	bcc.w	8031770 <_svfprintf_r+0x1388>
 8030f8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8030f8c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8030f8e:	ebab 0b03 	sub.w	fp, fp, r3
 8030f92:	461a      	mov	r2, r3
 8030f94:	4658      	mov	r0, fp
 8030f96:	f7fb fc7a 	bl	802c88e <strncpy>
 8030f9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8030f9c:	785a      	ldrb	r2, [r3, #1]
 8030f9e:	b13a      	cbz	r2, 8030fb0 <_svfprintf_r+0xbc8>
 8030fa0:	3301      	adds	r3, #1
 8030fa2:	930a      	str	r3, [sp, #40]	@ 0x28
 8030fa4:	2300      	movs	r3, #0
 8030fa6:	9304      	str	r3, [sp, #16]
 8030fa8:	4657      	mov	r7, sl
 8030faa:	46c8      	mov	r8, r9
 8030fac:	465d      	mov	r5, fp
 8030fae:	e7ce      	b.n	8030f4e <_svfprintf_r+0xb66>
 8030fb0:	9204      	str	r2, [sp, #16]
 8030fb2:	e7f9      	b.n	8030fa8 <_svfprintf_r+0xbc0>
 8030fb4:	2f0a      	cmp	r7, #10
 8030fb6:	f178 0800 	sbcs.w	r8, r8, #0
 8030fba:	d2f5      	bcs.n	8030fa8 <_svfprintf_r+0xbc0>
 8030fbc:	e3d8      	b.n	8031770 <_svfprintf_r+0x1388>
 8030fbe:	f007 030f 	and.w	r3, r7, #15
 8030fc2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8030fc4:	093f      	lsrs	r7, r7, #4
 8030fc6:	5cd3      	ldrb	r3, [r2, r3]
 8030fc8:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8030fcc:	ea47 7708 	orr.w	r7, r7, r8, lsl #28
 8030fd0:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8030fd4:	ea57 0308 	orrs.w	r3, r7, r8
 8030fd8:	d1f1      	bne.n	8030fbe <_svfprintf_r+0xbd6>
 8030fda:	e3c9      	b.n	8031770 <_svfprintf_r+0x1388>
 8030fdc:	b91b      	cbnz	r3, 8030fe6 <_svfprintf_r+0xbfe>
 8030fde:	07ea      	lsls	r2, r5, #31
 8030fe0:	d501      	bpl.n	8030fe6 <_svfprintf_r+0xbfe>
 8030fe2:	2730      	movs	r7, #48	@ 0x30
 8030fe4:	e7a6      	b.n	8030f34 <_svfprintf_r+0xb4c>
 8030fe6:	f50d 7ba4 	add.w	fp, sp, #328	@ 0x148
 8030fea:	e3c1      	b.n	8031770 <_svfprintf_r+0x1388>
 8030fec:	9b07      	ldr	r3, [sp, #28]
 8030fee:	2b00      	cmp	r3, #0
 8030ff0:	f000 838e 	beq.w	8031710 <_svfprintf_r+0x1328>
 8030ff4:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8030ff8:	2300      	movs	r3, #0
 8030ffa:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030ffe:	9708      	str	r7, [sp, #32]
 8031000:	f7ff bb6b 	b.w	80306da <_svfprintf_r+0x2f2>
 8031004:	2110      	movs	r1, #16
 8031006:	6061      	str	r1, [r4, #4]
 8031008:	2a07      	cmp	r2, #7
 803100a:	4461      	add	r1, ip
 803100c:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 8031010:	dd0a      	ble.n	8031028 <_svfprintf_r+0xc40>
 8031012:	9906      	ldr	r1, [sp, #24]
 8031014:	9803      	ldr	r0, [sp, #12]
 8031016:	931d      	str	r3, [sp, #116]	@ 0x74
 8031018:	aa26      	add	r2, sp, #152	@ 0x98
 803101a:	f004 f9e9 	bl	80353f0 <__ssprint_r>
 803101e:	2800      	cmp	r0, #0
 8031020:	f040 8354 	bne.w	80316cc <_svfprintf_r+0x12e4>
 8031024:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8031026:	a829      	add	r0, sp, #164	@ 0xa4
 8031028:	3b10      	subs	r3, #16
 803102a:	4604      	mov	r4, r0
 803102c:	e52e      	b.n	8030a8c <_svfprintf_r+0x6a4>
 803102e:	4604      	mov	r4, r0
 8031030:	e548      	b.n	8030ac4 <_svfprintf_r+0x6dc>
 8031032:	9906      	ldr	r1, [sp, #24]
 8031034:	9803      	ldr	r0, [sp, #12]
 8031036:	aa26      	add	r2, sp, #152	@ 0x98
 8031038:	f004 f9da 	bl	80353f0 <__ssprint_r>
 803103c:	2800      	cmp	r0, #0
 803103e:	f040 8345 	bne.w	80316cc <_svfprintf_r+0x12e4>
 8031042:	ac29      	add	r4, sp, #164	@ 0xa4
 8031044:	e550      	b.n	8030ae8 <_svfprintf_r+0x700>
 8031046:	9906      	ldr	r1, [sp, #24]
 8031048:	9803      	ldr	r0, [sp, #12]
 803104a:	aa26      	add	r2, sp, #152	@ 0x98
 803104c:	f004 f9d0 	bl	80353f0 <__ssprint_r>
 8031050:	2800      	cmp	r0, #0
 8031052:	f040 833b 	bne.w	80316cc <_svfprintf_r+0x12e4>
 8031056:	ac29      	add	r4, sp, #164	@ 0xa4
 8031058:	e556      	b.n	8030b08 <_svfprintf_r+0x720>
 803105a:	2110      	movs	r1, #16
 803105c:	6061      	str	r1, [r4, #4]
 803105e:	2a07      	cmp	r2, #7
 8031060:	4461      	add	r1, ip
 8031062:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 8031066:	dd0a      	ble.n	803107e <_svfprintf_r+0xc96>
 8031068:	9906      	ldr	r1, [sp, #24]
 803106a:	9803      	ldr	r0, [sp, #12]
 803106c:	931b      	str	r3, [sp, #108]	@ 0x6c
 803106e:	aa26      	add	r2, sp, #152	@ 0x98
 8031070:	f004 f9be 	bl	80353f0 <__ssprint_r>
 8031074:	2800      	cmp	r0, #0
 8031076:	f040 8329 	bne.w	80316cc <_svfprintf_r+0x12e4>
 803107a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 803107c:	a829      	add	r0, sp, #164	@ 0xa4
 803107e:	3b10      	subs	r3, #16
 8031080:	4604      	mov	r4, r0
 8031082:	e549      	b.n	8030b18 <_svfprintf_r+0x730>
 8031084:	4604      	mov	r4, r0
 8031086:	e563      	b.n	8030b50 <_svfprintf_r+0x768>
 8031088:	2010      	movs	r0, #16
 803108a:	4403      	add	r3, r0
 803108c:	2a07      	cmp	r2, #7
 803108e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031092:	6060      	str	r0, [r4, #4]
 8031094:	dd08      	ble.n	80310a8 <_svfprintf_r+0xcc0>
 8031096:	9906      	ldr	r1, [sp, #24]
 8031098:	9803      	ldr	r0, [sp, #12]
 803109a:	aa26      	add	r2, sp, #152	@ 0x98
 803109c:	f004 f9a8 	bl	80353f0 <__ssprint_r>
 80310a0:	2800      	cmp	r0, #0
 80310a2:	f040 8313 	bne.w	80316cc <_svfprintf_r+0x12e4>
 80310a6:	a929      	add	r1, sp, #164	@ 0xa4
 80310a8:	f1a9 0910 	sub.w	r9, r9, #16
 80310ac:	460c      	mov	r4, r1
 80310ae:	e554      	b.n	8030b5a <_svfprintf_r+0x772>
 80310b0:	460c      	mov	r4, r1
 80310b2:	e56f      	b.n	8030b94 <_svfprintf_r+0x7ac>
 80310b4:	0803dad5 	.word	0x0803dad5
 80310b8:	0803dac4 	.word	0x0803dac4
 80310bc:	9b07      	ldr	r3, [sp, #28]
 80310be:	2b65      	cmp	r3, #101	@ 0x65
 80310c0:	f340 8245 	ble.w	803154e <_svfprintf_r+0x1166>
 80310c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80310c8:	2200      	movs	r2, #0
 80310ca:	2300      	movs	r3, #0
 80310cc:	f7df fd14 	bl	8010af8 <__aeabi_dcmpeq>
 80310d0:	2800      	cmp	r0, #0
 80310d2:	d069      	beq.n	80311a8 <_svfprintf_r+0xdc0>
 80310d4:	4b72      	ldr	r3, [pc, #456]	@ (80312a0 <_svfprintf_r+0xeb8>)
 80310d6:	6023      	str	r3, [r4, #0]
 80310d8:	2301      	movs	r3, #1
 80310da:	6063      	str	r3, [r4, #4]
 80310dc:	444b      	add	r3, r9
 80310de:	9328      	str	r3, [sp, #160]	@ 0xa0
 80310e0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80310e2:	3301      	adds	r3, #1
 80310e4:	2b07      	cmp	r3, #7
 80310e6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80310e8:	dc37      	bgt.n	803115a <_svfprintf_r+0xd72>
 80310ea:	3408      	adds	r4, #8
 80310ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80310ee:	9a04      	ldr	r2, [sp, #16]
 80310f0:	4293      	cmp	r3, r2
 80310f2:	db02      	blt.n	80310fa <_svfprintf_r+0xd12>
 80310f4:	07ef      	lsls	r7, r5, #31
 80310f6:	f57f ad5d 	bpl.w	8030bb4 <_svfprintf_r+0x7cc>
 80310fa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80310fc:	6023      	str	r3, [r4, #0]
 80310fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031100:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8031102:	6063      	str	r3, [r4, #4]
 8031104:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031106:	4413      	add	r3, r2
 8031108:	9328      	str	r3, [sp, #160]	@ 0xa0
 803110a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803110c:	3301      	adds	r3, #1
 803110e:	2b07      	cmp	r3, #7
 8031110:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031112:	dc2c      	bgt.n	803116e <_svfprintf_r+0xd86>
 8031114:	3408      	adds	r4, #8
 8031116:	9b04      	ldr	r3, [sp, #16]
 8031118:	1e5e      	subs	r6, r3, #1
 803111a:	2e00      	cmp	r6, #0
 803111c:	f77f ad4a 	ble.w	8030bb4 <_svfprintf_r+0x7cc>
 8031120:	4f60      	ldr	r7, [pc, #384]	@ (80312a4 <_svfprintf_r+0xebc>)
 8031122:	f04f 0810 	mov.w	r8, #16
 8031126:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803112a:	2e10      	cmp	r6, #16
 803112c:	f103 0301 	add.w	r3, r3, #1
 8031130:	f104 0108 	add.w	r1, r4, #8
 8031134:	6027      	str	r7, [r4, #0]
 8031136:	dc24      	bgt.n	8031182 <_svfprintf_r+0xd9a>
 8031138:	6066      	str	r6, [r4, #4]
 803113a:	2b07      	cmp	r3, #7
 803113c:	4416      	add	r6, r2
 803113e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8031142:	f340 82a2 	ble.w	803168a <_svfprintf_r+0x12a2>
 8031146:	9906      	ldr	r1, [sp, #24]
 8031148:	9803      	ldr	r0, [sp, #12]
 803114a:	aa26      	add	r2, sp, #152	@ 0x98
 803114c:	f004 f950 	bl	80353f0 <__ssprint_r>
 8031150:	2800      	cmp	r0, #0
 8031152:	f040 82bb 	bne.w	80316cc <_svfprintf_r+0x12e4>
 8031156:	ac29      	add	r4, sp, #164	@ 0xa4
 8031158:	e52c      	b.n	8030bb4 <_svfprintf_r+0x7cc>
 803115a:	9906      	ldr	r1, [sp, #24]
 803115c:	9803      	ldr	r0, [sp, #12]
 803115e:	aa26      	add	r2, sp, #152	@ 0x98
 8031160:	f004 f946 	bl	80353f0 <__ssprint_r>
 8031164:	2800      	cmp	r0, #0
 8031166:	f040 82b1 	bne.w	80316cc <_svfprintf_r+0x12e4>
 803116a:	ac29      	add	r4, sp, #164	@ 0xa4
 803116c:	e7be      	b.n	80310ec <_svfprintf_r+0xd04>
 803116e:	9906      	ldr	r1, [sp, #24]
 8031170:	9803      	ldr	r0, [sp, #12]
 8031172:	aa26      	add	r2, sp, #152	@ 0x98
 8031174:	f004 f93c 	bl	80353f0 <__ssprint_r>
 8031178:	2800      	cmp	r0, #0
 803117a:	f040 82a7 	bne.w	80316cc <_svfprintf_r+0x12e4>
 803117e:	ac29      	add	r4, sp, #164	@ 0xa4
 8031180:	e7c9      	b.n	8031116 <_svfprintf_r+0xd2e>
 8031182:	3210      	adds	r2, #16
 8031184:	2b07      	cmp	r3, #7
 8031186:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803118a:	f8c4 8004 	str.w	r8, [r4, #4]
 803118e:	dd08      	ble.n	80311a2 <_svfprintf_r+0xdba>
 8031190:	9906      	ldr	r1, [sp, #24]
 8031192:	9803      	ldr	r0, [sp, #12]
 8031194:	aa26      	add	r2, sp, #152	@ 0x98
 8031196:	f004 f92b 	bl	80353f0 <__ssprint_r>
 803119a:	2800      	cmp	r0, #0
 803119c:	f040 8296 	bne.w	80316cc <_svfprintf_r+0x12e4>
 80311a0:	a929      	add	r1, sp, #164	@ 0xa4
 80311a2:	3e10      	subs	r6, #16
 80311a4:	460c      	mov	r4, r1
 80311a6:	e7be      	b.n	8031126 <_svfprintf_r+0xd3e>
 80311a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80311aa:	2b00      	cmp	r3, #0
 80311ac:	dc7c      	bgt.n	80312a8 <_svfprintf_r+0xec0>
 80311ae:	4b3c      	ldr	r3, [pc, #240]	@ (80312a0 <_svfprintf_r+0xeb8>)
 80311b0:	6023      	str	r3, [r4, #0]
 80311b2:	2301      	movs	r3, #1
 80311b4:	6063      	str	r3, [r4, #4]
 80311b6:	444b      	add	r3, r9
 80311b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80311ba:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80311bc:	3301      	adds	r3, #1
 80311be:	2b07      	cmp	r3, #7
 80311c0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80311c2:	dc46      	bgt.n	8031252 <_svfprintf_r+0xe6a>
 80311c4:	3408      	adds	r4, #8
 80311c6:	9904      	ldr	r1, [sp, #16]
 80311c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80311ca:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80311cc:	430b      	orrs	r3, r1
 80311ce:	f005 0101 	and.w	r1, r5, #1
 80311d2:	430b      	orrs	r3, r1
 80311d4:	f43f acee 	beq.w	8030bb4 <_svfprintf_r+0x7cc>
 80311d8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80311da:	6023      	str	r3, [r4, #0]
 80311dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80311de:	6063      	str	r3, [r4, #4]
 80311e0:	441a      	add	r2, r3
 80311e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80311e4:	9228      	str	r2, [sp, #160]	@ 0xa0
 80311e6:	3301      	adds	r3, #1
 80311e8:	2b07      	cmp	r3, #7
 80311ea:	9327      	str	r3, [sp, #156]	@ 0x9c
 80311ec:	dc3b      	bgt.n	8031266 <_svfprintf_r+0xe7e>
 80311ee:	f104 0308 	add.w	r3, r4, #8
 80311f2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80311f4:	2e00      	cmp	r6, #0
 80311f6:	da1b      	bge.n	8031230 <_svfprintf_r+0xe48>
 80311f8:	4f2a      	ldr	r7, [pc, #168]	@ (80312a4 <_svfprintf_r+0xebc>)
 80311fa:	4276      	negs	r6, r6
 80311fc:	461a      	mov	r2, r3
 80311fe:	2410      	movs	r4, #16
 8031200:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8031204:	2e10      	cmp	r6, #16
 8031206:	f101 0101 	add.w	r1, r1, #1
 803120a:	f103 0308 	add.w	r3, r3, #8
 803120e:	6017      	str	r7, [r2, #0]
 8031210:	dc33      	bgt.n	803127a <_svfprintf_r+0xe92>
 8031212:	6056      	str	r6, [r2, #4]
 8031214:	2907      	cmp	r1, #7
 8031216:	4406      	add	r6, r0
 8031218:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 803121c:	dd08      	ble.n	8031230 <_svfprintf_r+0xe48>
 803121e:	9906      	ldr	r1, [sp, #24]
 8031220:	9803      	ldr	r0, [sp, #12]
 8031222:	aa26      	add	r2, sp, #152	@ 0x98
 8031224:	f004 f8e4 	bl	80353f0 <__ssprint_r>
 8031228:	2800      	cmp	r0, #0
 803122a:	f040 824f 	bne.w	80316cc <_svfprintf_r+0x12e4>
 803122e:	ab29      	add	r3, sp, #164	@ 0xa4
 8031230:	9a04      	ldr	r2, [sp, #16]
 8031232:	9904      	ldr	r1, [sp, #16]
 8031234:	605a      	str	r2, [r3, #4]
 8031236:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8031238:	f8c3 b000 	str.w	fp, [r3]
 803123c:	440a      	add	r2, r1
 803123e:	9228      	str	r2, [sp, #160]	@ 0xa0
 8031240:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8031242:	3201      	adds	r2, #1
 8031244:	2a07      	cmp	r2, #7
 8031246:	9227      	str	r2, [sp, #156]	@ 0x9c
 8031248:	f73f af7d 	bgt.w	8031146 <_svfprintf_r+0xd5e>
 803124c:	f103 0408 	add.w	r4, r3, #8
 8031250:	e4b0      	b.n	8030bb4 <_svfprintf_r+0x7cc>
 8031252:	9906      	ldr	r1, [sp, #24]
 8031254:	9803      	ldr	r0, [sp, #12]
 8031256:	aa26      	add	r2, sp, #152	@ 0x98
 8031258:	f004 f8ca 	bl	80353f0 <__ssprint_r>
 803125c:	2800      	cmp	r0, #0
 803125e:	f040 8235 	bne.w	80316cc <_svfprintf_r+0x12e4>
 8031262:	ac29      	add	r4, sp, #164	@ 0xa4
 8031264:	e7af      	b.n	80311c6 <_svfprintf_r+0xdde>
 8031266:	9906      	ldr	r1, [sp, #24]
 8031268:	9803      	ldr	r0, [sp, #12]
 803126a:	aa26      	add	r2, sp, #152	@ 0x98
 803126c:	f004 f8c0 	bl	80353f0 <__ssprint_r>
 8031270:	2800      	cmp	r0, #0
 8031272:	f040 822b 	bne.w	80316cc <_svfprintf_r+0x12e4>
 8031276:	ab29      	add	r3, sp, #164	@ 0xa4
 8031278:	e7bb      	b.n	80311f2 <_svfprintf_r+0xe0a>
 803127a:	3010      	adds	r0, #16
 803127c:	2907      	cmp	r1, #7
 803127e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8031282:	6054      	str	r4, [r2, #4]
 8031284:	dd08      	ble.n	8031298 <_svfprintf_r+0xeb0>
 8031286:	9906      	ldr	r1, [sp, #24]
 8031288:	9803      	ldr	r0, [sp, #12]
 803128a:	aa26      	add	r2, sp, #152	@ 0x98
 803128c:	f004 f8b0 	bl	80353f0 <__ssprint_r>
 8031290:	2800      	cmp	r0, #0
 8031292:	f040 821b 	bne.w	80316cc <_svfprintf_r+0x12e4>
 8031296:	ab29      	add	r3, sp, #164	@ 0xa4
 8031298:	3e10      	subs	r6, #16
 803129a:	461a      	mov	r2, r3
 803129c:	e7b0      	b.n	8031200 <_svfprintf_r+0xe18>
 803129e:	bf00      	nop
 80312a0:	0803dcd7 	.word	0x0803dcd7
 80312a4:	0803e138 	.word	0x0803e138
 80312a8:	9b04      	ldr	r3, [sp, #16]
 80312aa:	42bb      	cmp	r3, r7
 80312ac:	bfa8      	it	ge
 80312ae:	463b      	movge	r3, r7
 80312b0:	2b00      	cmp	r3, #0
 80312b2:	461e      	mov	r6, r3
 80312b4:	dd0a      	ble.n	80312cc <_svfprintf_r+0xee4>
 80312b6:	e9c4 b300 	strd	fp, r3, [r4]
 80312ba:	444b      	add	r3, r9
 80312bc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80312be:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80312c0:	3301      	adds	r3, #1
 80312c2:	2b07      	cmp	r3, #7
 80312c4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80312c6:	f300 808e 	bgt.w	80313e6 <_svfprintf_r+0xffe>
 80312ca:	3408      	adds	r4, #8
 80312cc:	2e00      	cmp	r6, #0
 80312ce:	bfac      	ite	ge
 80312d0:	1bbe      	subge	r6, r7, r6
 80312d2:	463e      	movlt	r6, r7
 80312d4:	2e00      	cmp	r6, #0
 80312d6:	dd1c      	ble.n	8031312 <_svfprintf_r+0xf2a>
 80312d8:	f8df 9344 	ldr.w	r9, [pc, #836]	@ 8031620 <_svfprintf_r+0x1238>
 80312dc:	f8c4 9000 	str.w	r9, [r4]
 80312e0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80312e4:	2e10      	cmp	r6, #16
 80312e6:	f103 0301 	add.w	r3, r3, #1
 80312ea:	f104 0108 	add.w	r1, r4, #8
 80312ee:	f300 8084 	bgt.w	80313fa <_svfprintf_r+0x1012>
 80312f2:	6066      	str	r6, [r4, #4]
 80312f4:	2b07      	cmp	r3, #7
 80312f6:	4416      	add	r6, r2
 80312f8:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80312fc:	f340 8090 	ble.w	8031420 <_svfprintf_r+0x1038>
 8031300:	9906      	ldr	r1, [sp, #24]
 8031302:	9803      	ldr	r0, [sp, #12]
 8031304:	aa26      	add	r2, sp, #152	@ 0x98
 8031306:	f004 f873 	bl	80353f0 <__ssprint_r>
 803130a:	2800      	cmp	r0, #0
 803130c:	f040 81de 	bne.w	80316cc <_svfprintf_r+0x12e4>
 8031310:	ac29      	add	r4, sp, #164	@ 0xa4
 8031312:	056e      	lsls	r6, r5, #21
 8031314:	445f      	add	r7, fp
 8031316:	d50c      	bpl.n	8031332 <_svfprintf_r+0xf4a>
 8031318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803131a:	2b00      	cmp	r3, #0
 803131c:	f300 8082 	bgt.w	8031424 <_svfprintf_r+0x103c>
 8031320:	f1b8 0f00 	cmp.w	r8, #0
 8031324:	f300 8081 	bgt.w	803142a <_svfprintf_r+0x1042>
 8031328:	9b04      	ldr	r3, [sp, #16]
 803132a:	445b      	add	r3, fp
 803132c:	429f      	cmp	r7, r3
 803132e:	bf28      	it	cs
 8031330:	461f      	movcs	r7, r3
 8031332:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8031334:	9a04      	ldr	r2, [sp, #16]
 8031336:	4293      	cmp	r3, r2
 8031338:	db01      	blt.n	803133e <_svfprintf_r+0xf56>
 803133a:	07e8      	lsls	r0, r5, #31
 803133c:	d50e      	bpl.n	803135c <_svfprintf_r+0xf74>
 803133e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8031340:	6023      	str	r3, [r4, #0]
 8031342:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031344:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8031346:	6063      	str	r3, [r4, #4]
 8031348:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803134a:	4413      	add	r3, r2
 803134c:	9328      	str	r3, [sp, #160]	@ 0xa0
 803134e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031350:	3301      	adds	r3, #1
 8031352:	2b07      	cmp	r3, #7
 8031354:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031356:	f300 80e6 	bgt.w	8031526 <_svfprintf_r+0x113e>
 803135a:	3408      	adds	r4, #8
 803135c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803135e:	9a04      	ldr	r2, [sp, #16]
 8031360:	eba2 0803 	sub.w	r8, r2, r3
 8031364:	eb0b 0302 	add.w	r3, fp, r2
 8031368:	1bdb      	subs	r3, r3, r7
 803136a:	4598      	cmp	r8, r3
 803136c:	bfa8      	it	ge
 803136e:	4698      	movge	r8, r3
 8031370:	f1b8 0f00 	cmp.w	r8, #0
 8031374:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031376:	dd0a      	ble.n	803138e <_svfprintf_r+0xfa6>
 8031378:	4443      	add	r3, r8
 803137a:	9328      	str	r3, [sp, #160]	@ 0xa0
 803137c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803137e:	3301      	adds	r3, #1
 8031380:	2b07      	cmp	r3, #7
 8031382:	e9c4 7800 	strd	r7, r8, [r4]
 8031386:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031388:	f300 80d7 	bgt.w	803153a <_svfprintf_r+0x1152>
 803138c:	3408      	adds	r4, #8
 803138e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8031390:	9b04      	ldr	r3, [sp, #16]
 8031392:	f1b8 0f00 	cmp.w	r8, #0
 8031396:	eba3 0606 	sub.w	r6, r3, r6
 803139a:	bfa8      	it	ge
 803139c:	eba6 0608 	subge.w	r6, r6, r8
 80313a0:	2e00      	cmp	r6, #0
 80313a2:	f77f ac07 	ble.w	8030bb4 <_svfprintf_r+0x7cc>
 80313a6:	4f9e      	ldr	r7, [pc, #632]	@ (8031620 <_svfprintf_r+0x1238>)
 80313a8:	f04f 0810 	mov.w	r8, #16
 80313ac:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80313b0:	2e10      	cmp	r6, #16
 80313b2:	f103 0301 	add.w	r3, r3, #1
 80313b6:	f104 0108 	add.w	r1, r4, #8
 80313ba:	6027      	str	r7, [r4, #0]
 80313bc:	f77f aebc 	ble.w	8031138 <_svfprintf_r+0xd50>
 80313c0:	3210      	adds	r2, #16
 80313c2:	2b07      	cmp	r3, #7
 80313c4:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80313c8:	f8c4 8004 	str.w	r8, [r4, #4]
 80313cc:	dd08      	ble.n	80313e0 <_svfprintf_r+0xff8>
 80313ce:	9906      	ldr	r1, [sp, #24]
 80313d0:	9803      	ldr	r0, [sp, #12]
 80313d2:	aa26      	add	r2, sp, #152	@ 0x98
 80313d4:	f004 f80c 	bl	80353f0 <__ssprint_r>
 80313d8:	2800      	cmp	r0, #0
 80313da:	f040 8177 	bne.w	80316cc <_svfprintf_r+0x12e4>
 80313de:	a929      	add	r1, sp, #164	@ 0xa4
 80313e0:	3e10      	subs	r6, #16
 80313e2:	460c      	mov	r4, r1
 80313e4:	e7e2      	b.n	80313ac <_svfprintf_r+0xfc4>
 80313e6:	9906      	ldr	r1, [sp, #24]
 80313e8:	9803      	ldr	r0, [sp, #12]
 80313ea:	aa26      	add	r2, sp, #152	@ 0x98
 80313ec:	f004 f800 	bl	80353f0 <__ssprint_r>
 80313f0:	2800      	cmp	r0, #0
 80313f2:	f040 816b 	bne.w	80316cc <_svfprintf_r+0x12e4>
 80313f6:	ac29      	add	r4, sp, #164	@ 0xa4
 80313f8:	e768      	b.n	80312cc <_svfprintf_r+0xee4>
 80313fa:	2010      	movs	r0, #16
 80313fc:	4402      	add	r2, r0
 80313fe:	2b07      	cmp	r3, #7
 8031400:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031404:	6060      	str	r0, [r4, #4]
 8031406:	dd08      	ble.n	803141a <_svfprintf_r+0x1032>
 8031408:	9906      	ldr	r1, [sp, #24]
 803140a:	9803      	ldr	r0, [sp, #12]
 803140c:	aa26      	add	r2, sp, #152	@ 0x98
 803140e:	f003 ffef 	bl	80353f0 <__ssprint_r>
 8031412:	2800      	cmp	r0, #0
 8031414:	f040 815a 	bne.w	80316cc <_svfprintf_r+0x12e4>
 8031418:	a929      	add	r1, sp, #164	@ 0xa4
 803141a:	3e10      	subs	r6, #16
 803141c:	460c      	mov	r4, r1
 803141e:	e75d      	b.n	80312dc <_svfprintf_r+0xef4>
 8031420:	460c      	mov	r4, r1
 8031422:	e776      	b.n	8031312 <_svfprintf_r+0xf2a>
 8031424:	f1b8 0f00 	cmp.w	r8, #0
 8031428:	dd4d      	ble.n	80314c6 <_svfprintf_r+0x10de>
 803142a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 803142e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8031430:	6023      	str	r3, [r4, #0]
 8031432:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8031434:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8031436:	6063      	str	r3, [r4, #4]
 8031438:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803143a:	4413      	add	r3, r2
 803143c:	9328      	str	r3, [sp, #160]	@ 0xa0
 803143e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031440:	3301      	adds	r3, #1
 8031442:	2b07      	cmp	r3, #7
 8031444:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031446:	dc45      	bgt.n	80314d4 <_svfprintf_r+0x10ec>
 8031448:	3408      	adds	r4, #8
 803144a:	9b04      	ldr	r3, [sp, #16]
 803144c:	eb0b 0903 	add.w	r9, fp, r3
 8031450:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8031452:	781b      	ldrb	r3, [r3, #0]
 8031454:	eba9 0907 	sub.w	r9, r9, r7
 8031458:	4599      	cmp	r9, r3
 803145a:	bfa8      	it	ge
 803145c:	4699      	movge	r9, r3
 803145e:	f1b9 0f00 	cmp.w	r9, #0
 8031462:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031464:	dd09      	ble.n	803147a <_svfprintf_r+0x1092>
 8031466:	444b      	add	r3, r9
 8031468:	9328      	str	r3, [sp, #160]	@ 0xa0
 803146a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803146c:	3301      	adds	r3, #1
 803146e:	2b07      	cmp	r3, #7
 8031470:	e9c4 7900 	strd	r7, r9, [r4]
 8031474:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031476:	dc37      	bgt.n	80314e8 <_svfprintf_r+0x1100>
 8031478:	3408      	adds	r4, #8
 803147a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803147c:	781e      	ldrb	r6, [r3, #0]
 803147e:	f1b9 0f00 	cmp.w	r9, #0
 8031482:	bfa8      	it	ge
 8031484:	eba6 0609 	subge.w	r6, r6, r9
 8031488:	2e00      	cmp	r6, #0
 803148a:	dd18      	ble.n	80314be <_svfprintf_r+0x10d6>
 803148c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031490:	4863      	ldr	r0, [pc, #396]	@ (8031620 <_svfprintf_r+0x1238>)
 8031492:	6020      	str	r0, [r4, #0]
 8031494:	2e10      	cmp	r6, #16
 8031496:	f103 0301 	add.w	r3, r3, #1
 803149a:	f104 0108 	add.w	r1, r4, #8
 803149e:	dc2d      	bgt.n	80314fc <_svfprintf_r+0x1114>
 80314a0:	6066      	str	r6, [r4, #4]
 80314a2:	2b07      	cmp	r3, #7
 80314a4:	4416      	add	r6, r2
 80314a6:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80314aa:	dd3a      	ble.n	8031522 <_svfprintf_r+0x113a>
 80314ac:	9906      	ldr	r1, [sp, #24]
 80314ae:	9803      	ldr	r0, [sp, #12]
 80314b0:	aa26      	add	r2, sp, #152	@ 0x98
 80314b2:	f003 ff9d 	bl	80353f0 <__ssprint_r>
 80314b6:	2800      	cmp	r0, #0
 80314b8:	f040 8108 	bne.w	80316cc <_svfprintf_r+0x12e4>
 80314bc:	ac29      	add	r4, sp, #164	@ 0xa4
 80314be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80314c0:	781b      	ldrb	r3, [r3, #0]
 80314c2:	441f      	add	r7, r3
 80314c4:	e728      	b.n	8031318 <_svfprintf_r+0xf30>
 80314c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80314c8:	3b01      	subs	r3, #1
 80314ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80314cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80314ce:	3b01      	subs	r3, #1
 80314d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80314d2:	e7ac      	b.n	803142e <_svfprintf_r+0x1046>
 80314d4:	9906      	ldr	r1, [sp, #24]
 80314d6:	9803      	ldr	r0, [sp, #12]
 80314d8:	aa26      	add	r2, sp, #152	@ 0x98
 80314da:	f003 ff89 	bl	80353f0 <__ssprint_r>
 80314de:	2800      	cmp	r0, #0
 80314e0:	f040 80f4 	bne.w	80316cc <_svfprintf_r+0x12e4>
 80314e4:	ac29      	add	r4, sp, #164	@ 0xa4
 80314e6:	e7b0      	b.n	803144a <_svfprintf_r+0x1062>
 80314e8:	9906      	ldr	r1, [sp, #24]
 80314ea:	9803      	ldr	r0, [sp, #12]
 80314ec:	aa26      	add	r2, sp, #152	@ 0x98
 80314ee:	f003 ff7f 	bl	80353f0 <__ssprint_r>
 80314f2:	2800      	cmp	r0, #0
 80314f4:	f040 80ea 	bne.w	80316cc <_svfprintf_r+0x12e4>
 80314f8:	ac29      	add	r4, sp, #164	@ 0xa4
 80314fa:	e7be      	b.n	803147a <_svfprintf_r+0x1092>
 80314fc:	2010      	movs	r0, #16
 80314fe:	4402      	add	r2, r0
 8031500:	2b07      	cmp	r3, #7
 8031502:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031506:	6060      	str	r0, [r4, #4]
 8031508:	dd08      	ble.n	803151c <_svfprintf_r+0x1134>
 803150a:	9906      	ldr	r1, [sp, #24]
 803150c:	9803      	ldr	r0, [sp, #12]
 803150e:	aa26      	add	r2, sp, #152	@ 0x98
 8031510:	f003 ff6e 	bl	80353f0 <__ssprint_r>
 8031514:	2800      	cmp	r0, #0
 8031516:	f040 80d9 	bne.w	80316cc <_svfprintf_r+0x12e4>
 803151a:	a929      	add	r1, sp, #164	@ 0xa4
 803151c:	3e10      	subs	r6, #16
 803151e:	460c      	mov	r4, r1
 8031520:	e7b4      	b.n	803148c <_svfprintf_r+0x10a4>
 8031522:	460c      	mov	r4, r1
 8031524:	e7cb      	b.n	80314be <_svfprintf_r+0x10d6>
 8031526:	9906      	ldr	r1, [sp, #24]
 8031528:	9803      	ldr	r0, [sp, #12]
 803152a:	aa26      	add	r2, sp, #152	@ 0x98
 803152c:	f003 ff60 	bl	80353f0 <__ssprint_r>
 8031530:	2800      	cmp	r0, #0
 8031532:	f040 80cb 	bne.w	80316cc <_svfprintf_r+0x12e4>
 8031536:	ac29      	add	r4, sp, #164	@ 0xa4
 8031538:	e710      	b.n	803135c <_svfprintf_r+0xf74>
 803153a:	9906      	ldr	r1, [sp, #24]
 803153c:	9803      	ldr	r0, [sp, #12]
 803153e:	aa26      	add	r2, sp, #152	@ 0x98
 8031540:	f003 ff56 	bl	80353f0 <__ssprint_r>
 8031544:	2800      	cmp	r0, #0
 8031546:	f040 80c1 	bne.w	80316cc <_svfprintf_r+0x12e4>
 803154a:	ac29      	add	r4, sp, #164	@ 0xa4
 803154c:	e71f      	b.n	803138e <_svfprintf_r+0xfa6>
 803154e:	9904      	ldr	r1, [sp, #16]
 8031550:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8031552:	2901      	cmp	r1, #1
 8031554:	f109 0301 	add.w	r3, r9, #1
 8031558:	f102 0201 	add.w	r2, r2, #1
 803155c:	f104 0608 	add.w	r6, r4, #8
 8031560:	dc02      	bgt.n	8031568 <_svfprintf_r+0x1180>
 8031562:	07e9      	lsls	r1, r5, #31
 8031564:	f140 8086 	bpl.w	8031674 <_svfprintf_r+0x128c>
 8031568:	2101      	movs	r1, #1
 803156a:	2a07      	cmp	r2, #7
 803156c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031570:	f8c4 b000 	str.w	fp, [r4]
 8031574:	6061      	str	r1, [r4, #4]
 8031576:	dd08      	ble.n	803158a <_svfprintf_r+0x11a2>
 8031578:	9906      	ldr	r1, [sp, #24]
 803157a:	9803      	ldr	r0, [sp, #12]
 803157c:	aa26      	add	r2, sp, #152	@ 0x98
 803157e:	f003 ff37 	bl	80353f0 <__ssprint_r>
 8031582:	2800      	cmp	r0, #0
 8031584:	f040 80a2 	bne.w	80316cc <_svfprintf_r+0x12e4>
 8031588:	ae29      	add	r6, sp, #164	@ 0xa4
 803158a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 803158c:	6033      	str	r3, [r6, #0]
 803158e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031590:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8031592:	6073      	str	r3, [r6, #4]
 8031594:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031596:	4413      	add	r3, r2
 8031598:	9328      	str	r3, [sp, #160]	@ 0xa0
 803159a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803159c:	3301      	adds	r3, #1
 803159e:	2b07      	cmp	r3, #7
 80315a0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80315a2:	dc33      	bgt.n	803160c <_svfprintf_r+0x1224>
 80315a4:	3608      	adds	r6, #8
 80315a6:	9b04      	ldr	r3, [sp, #16]
 80315a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80315ac:	1e5c      	subs	r4, r3, #1
 80315ae:	2200      	movs	r2, #0
 80315b0:	2300      	movs	r3, #0
 80315b2:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 80315b6:	f7df fa9f 	bl	8010af8 <__aeabi_dcmpeq>
 80315ba:	2800      	cmp	r0, #0
 80315bc:	d132      	bne.n	8031624 <_svfprintf_r+0x123c>
 80315be:	f10b 0201 	add.w	r2, fp, #1
 80315c2:	e9c6 2400 	strd	r2, r4, [r6]
 80315c6:	9a04      	ldr	r2, [sp, #16]
 80315c8:	f108 0301 	add.w	r3, r8, #1
 80315cc:	3f01      	subs	r7, #1
 80315ce:	4417      	add	r7, r2
 80315d0:	2b07      	cmp	r3, #7
 80315d2:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 80315d6:	dd56      	ble.n	8031686 <_svfprintf_r+0x129e>
 80315d8:	9906      	ldr	r1, [sp, #24]
 80315da:	9803      	ldr	r0, [sp, #12]
 80315dc:	aa26      	add	r2, sp, #152	@ 0x98
 80315de:	f003 ff07 	bl	80353f0 <__ssprint_r>
 80315e2:	2800      	cmp	r0, #0
 80315e4:	d172      	bne.n	80316cc <_svfprintf_r+0x12e4>
 80315e6:	ae29      	add	r6, sp, #164	@ 0xa4
 80315e8:	ab22      	add	r3, sp, #136	@ 0x88
 80315ea:	6033      	str	r3, [r6, #0]
 80315ec:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80315ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80315f0:	6073      	str	r3, [r6, #4]
 80315f2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80315f4:	4413      	add	r3, r2
 80315f6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80315f8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80315fa:	3301      	adds	r3, #1
 80315fc:	2b07      	cmp	r3, #7
 80315fe:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031600:	f73f ada1 	bgt.w	8031146 <_svfprintf_r+0xd5e>
 8031604:	f106 0408 	add.w	r4, r6, #8
 8031608:	f7ff bad4 	b.w	8030bb4 <_svfprintf_r+0x7cc>
 803160c:	9906      	ldr	r1, [sp, #24]
 803160e:	9803      	ldr	r0, [sp, #12]
 8031610:	aa26      	add	r2, sp, #152	@ 0x98
 8031612:	f003 feed 	bl	80353f0 <__ssprint_r>
 8031616:	2800      	cmp	r0, #0
 8031618:	d158      	bne.n	80316cc <_svfprintf_r+0x12e4>
 803161a:	ae29      	add	r6, sp, #164	@ 0xa4
 803161c:	e7c3      	b.n	80315a6 <_svfprintf_r+0x11be>
 803161e:	bf00      	nop
 8031620:	0803e138 	.word	0x0803e138
 8031624:	9b04      	ldr	r3, [sp, #16]
 8031626:	2b01      	cmp	r3, #1
 8031628:	ddde      	ble.n	80315e8 <_svfprintf_r+0x1200>
 803162a:	4f58      	ldr	r7, [pc, #352]	@ (803178c <_svfprintf_r+0x13a4>)
 803162c:	f04f 0810 	mov.w	r8, #16
 8031630:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031634:	2c10      	cmp	r4, #16
 8031636:	f103 0301 	add.w	r3, r3, #1
 803163a:	f106 0108 	add.w	r1, r6, #8
 803163e:	6037      	str	r7, [r6, #0]
 8031640:	dc07      	bgt.n	8031652 <_svfprintf_r+0x126a>
 8031642:	6074      	str	r4, [r6, #4]
 8031644:	2b07      	cmp	r3, #7
 8031646:	4414      	add	r4, r2
 8031648:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 803164c:	dcc4      	bgt.n	80315d8 <_svfprintf_r+0x11f0>
 803164e:	460e      	mov	r6, r1
 8031650:	e7ca      	b.n	80315e8 <_svfprintf_r+0x1200>
 8031652:	3210      	adds	r2, #16
 8031654:	2b07      	cmp	r3, #7
 8031656:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803165a:	f8c6 8004 	str.w	r8, [r6, #4]
 803165e:	dd06      	ble.n	803166e <_svfprintf_r+0x1286>
 8031660:	9906      	ldr	r1, [sp, #24]
 8031662:	9803      	ldr	r0, [sp, #12]
 8031664:	aa26      	add	r2, sp, #152	@ 0x98
 8031666:	f003 fec3 	bl	80353f0 <__ssprint_r>
 803166a:	bb78      	cbnz	r0, 80316cc <_svfprintf_r+0x12e4>
 803166c:	a929      	add	r1, sp, #164	@ 0xa4
 803166e:	3c10      	subs	r4, #16
 8031670:	460e      	mov	r6, r1
 8031672:	e7dd      	b.n	8031630 <_svfprintf_r+0x1248>
 8031674:	2101      	movs	r1, #1
 8031676:	2a07      	cmp	r2, #7
 8031678:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803167c:	f8c4 b000 	str.w	fp, [r4]
 8031680:	6061      	str	r1, [r4, #4]
 8031682:	ddb1      	ble.n	80315e8 <_svfprintf_r+0x1200>
 8031684:	e7a8      	b.n	80315d8 <_svfprintf_r+0x11f0>
 8031686:	3608      	adds	r6, #8
 8031688:	e7ae      	b.n	80315e8 <_svfprintf_r+0x1200>
 803168a:	460c      	mov	r4, r1
 803168c:	f7ff ba92 	b.w	8030bb4 <_svfprintf_r+0x7cc>
 8031690:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8031692:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8031694:	1a9d      	subs	r5, r3, r2
 8031696:	2d00      	cmp	r5, #0
 8031698:	f77f aa8f 	ble.w	8030bba <_svfprintf_r+0x7d2>
 803169c:	4e3c      	ldr	r6, [pc, #240]	@ (8031790 <_svfprintf_r+0x13a8>)
 803169e:	2710      	movs	r7, #16
 80316a0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80316a4:	2d10      	cmp	r5, #16
 80316a6:	f103 0301 	add.w	r3, r3, #1
 80316aa:	6026      	str	r6, [r4, #0]
 80316ac:	dc18      	bgt.n	80316e0 <_svfprintf_r+0x12f8>
 80316ae:	6065      	str	r5, [r4, #4]
 80316b0:	2b07      	cmp	r3, #7
 80316b2:	4415      	add	r5, r2
 80316b4:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 80316b8:	f77f aa7f 	ble.w	8030bba <_svfprintf_r+0x7d2>
 80316bc:	9906      	ldr	r1, [sp, #24]
 80316be:	9803      	ldr	r0, [sp, #12]
 80316c0:	aa26      	add	r2, sp, #152	@ 0x98
 80316c2:	f003 fe95 	bl	80353f0 <__ssprint_r>
 80316c6:	2800      	cmp	r0, #0
 80316c8:	f43f aa77 	beq.w	8030bba <_svfprintf_r+0x7d2>
 80316cc:	f1ba 0f00 	cmp.w	sl, #0
 80316d0:	f43f a8a0 	beq.w	8030814 <_svfprintf_r+0x42c>
 80316d4:	9803      	ldr	r0, [sp, #12]
 80316d6:	4651      	mov	r1, sl
 80316d8:	f7fc fe96 	bl	802e408 <_free_r>
 80316dc:	f7ff b89a 	b.w	8030814 <_svfprintf_r+0x42c>
 80316e0:	3210      	adds	r2, #16
 80316e2:	2b07      	cmp	r3, #7
 80316e4:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80316e8:	6067      	str	r7, [r4, #4]
 80316ea:	dc02      	bgt.n	80316f2 <_svfprintf_r+0x130a>
 80316ec:	3408      	adds	r4, #8
 80316ee:	3d10      	subs	r5, #16
 80316f0:	e7d6      	b.n	80316a0 <_svfprintf_r+0x12b8>
 80316f2:	9906      	ldr	r1, [sp, #24]
 80316f4:	9803      	ldr	r0, [sp, #12]
 80316f6:	aa26      	add	r2, sp, #152	@ 0x98
 80316f8:	f003 fe7a 	bl	80353f0 <__ssprint_r>
 80316fc:	2800      	cmp	r0, #0
 80316fe:	d1e5      	bne.n	80316cc <_svfprintf_r+0x12e4>
 8031700:	ac29      	add	r4, sp, #164	@ 0xa4
 8031702:	e7f4      	b.n	80316ee <_svfprintf_r+0x1306>
 8031704:	9803      	ldr	r0, [sp, #12]
 8031706:	4651      	mov	r1, sl
 8031708:	f7fc fe7e 	bl	802e408 <_free_r>
 803170c:	f7ff ba6d 	b.w	8030bea <_svfprintf_r+0x802>
 8031710:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031712:	2b00      	cmp	r3, #0
 8031714:	f43f a87e 	beq.w	8030814 <_svfprintf_r+0x42c>
 8031718:	9906      	ldr	r1, [sp, #24]
 803171a:	9803      	ldr	r0, [sp, #12]
 803171c:	aa26      	add	r2, sp, #152	@ 0x98
 803171e:	f003 fe67 	bl	80353f0 <__ssprint_r>
 8031722:	f7ff b877 	b.w	8030814 <_svfprintf_r+0x42c>
 8031726:	ea57 0208 	orrs.w	r2, r7, r8
 803172a:	9509      	str	r5, [sp, #36]	@ 0x24
 803172c:	f43f ab78 	beq.w	8030e20 <_svfprintf_r+0xa38>
 8031730:	2b01      	cmp	r3, #1
 8031732:	f43f abf9 	beq.w	8030f28 <_svfprintf_r+0xb40>
 8031736:	2b02      	cmp	r3, #2
 8031738:	f50d 7ba4 	add.w	fp, sp, #328	@ 0x148
 803173c:	f43f ac3f 	beq.w	8030fbe <_svfprintf_r+0xbd6>
 8031740:	f007 0307 	and.w	r3, r7, #7
 8031744:	08ff      	lsrs	r7, r7, #3
 8031746:	ea47 7748 	orr.w	r7, r7, r8, lsl #29
 803174a:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 803174e:	3330      	adds	r3, #48	@ 0x30
 8031750:	ea57 0108 	orrs.w	r1, r7, r8
 8031754:	465a      	mov	r2, fp
 8031756:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 803175a:	d1f1      	bne.n	8031740 <_svfprintf_r+0x1358>
 803175c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 803175e:	07c9      	lsls	r1, r1, #31
 8031760:	d506      	bpl.n	8031770 <_svfprintf_r+0x1388>
 8031762:	2b30      	cmp	r3, #48	@ 0x30
 8031764:	d004      	beq.n	8031770 <_svfprintf_r+0x1388>
 8031766:	2330      	movs	r3, #48	@ 0x30
 8031768:	f80b 3c01 	strb.w	r3, [fp, #-1]
 803176c:	f1a2 0b02 	sub.w	fp, r2, #2
 8031770:	ab52      	add	r3, sp, #328	@ 0x148
 8031772:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8031774:	46b1      	mov	r9, r6
 8031776:	f04f 0a00 	mov.w	sl, #0
 803177a:	eba3 060b 	sub.w	r6, r3, fp
 803177e:	46d0      	mov	r8, sl
 8031780:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8031784:	4657      	mov	r7, sl
 8031786:	f7ff b966 	b.w	8030a56 <_svfprintf_r+0x66e>
 803178a:	bf00      	nop
 803178c:	0803e138 	.word	0x0803e138
 8031790:	0803e148 	.word	0x0803e148

08031794 <__ssvfscanf_r>:
 8031794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031798:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 803179c:	461d      	mov	r5, r3
 803179e:	af02      	add	r7, sp, #8
 80317a0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80317a4:	617a      	str	r2, [r7, #20]
 80317a6:	049a      	lsls	r2, r3, #18
 80317a8:	62b8      	str	r0, [r7, #40]	@ 0x28
 80317aa:	460c      	mov	r4, r1
 80317ac:	d406      	bmi.n	80317bc <__ssvfscanf_r+0x28>
 80317ae:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
 80317b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80317b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80317b8:	818b      	strh	r3, [r1, #12]
 80317ba:	664a      	str	r2, [r1, #100]	@ 0x64
 80317bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80317be:	049e      	lsls	r6, r3, #18
 80317c0:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80317c4:	f100 80b6 	bmi.w	8031934 <__ssvfscanf_r+0x1a0>
 80317c8:	e9c7 2207 	strd	r2, r2, [r7, #28]
 80317cc:	61ba      	str	r2, [r7, #24]
 80317ce:	637a      	str	r2, [r7, #52]	@ 0x34
 80317d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80317d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80317d4:	f8d7 8014 	ldr.w	r8, [r7, #20]
 80317d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80317dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80317de:	2b00      	cmp	r3, #0
 80317e0:	f000 80d3 	beq.w	803198a <__ssvfscanf_r+0x1f6>
 80317e4:	4a8a      	ldr	r2, [pc, #552]	@ (8031a10 <__ssvfscanf_r+0x27c>)
 80317e6:	5cd6      	ldrb	r6, [r2, r3]
 80317e8:	f016 0608 	ands.w	r6, r6, #8
 80317ec:	d01b      	beq.n	8031826 <__ssvfscanf_r+0x92>
 80317ee:	6863      	ldr	r3, [r4, #4]
 80317f0:	2b00      	cmp	r3, #0
 80317f2:	dd08      	ble.n	8031806 <__ssvfscanf_r+0x72>
 80317f4:	6823      	ldr	r3, [r4, #0]
 80317f6:	4986      	ldr	r1, [pc, #536]	@ (8031a10 <__ssvfscanf_r+0x27c>)
 80317f8:	781a      	ldrb	r2, [r3, #0]
 80317fa:	5c8a      	ldrb	r2, [r1, r2]
 80317fc:	0710      	lsls	r0, r2, #28
 80317fe:	d409      	bmi.n	8031814 <__ssvfscanf_r+0x80>
 8031800:	f8c7 8014 	str.w	r8, [r7, #20]
 8031804:	e7e6      	b.n	80317d4 <__ssvfscanf_r+0x40>
 8031806:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031808:	4621      	mov	r1, r4
 803180a:	f7fd fe38 	bl	802f47e <__ssrefill_r>
 803180e:	2800      	cmp	r0, #0
 8031810:	d0f0      	beq.n	80317f4 <__ssvfscanf_r+0x60>
 8031812:	e7f5      	b.n	8031800 <__ssvfscanf_r+0x6c>
 8031814:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031816:	3201      	adds	r2, #1
 8031818:	633a      	str	r2, [r7, #48]	@ 0x30
 803181a:	6862      	ldr	r2, [r4, #4]
 803181c:	3301      	adds	r3, #1
 803181e:	3a01      	subs	r2, #1
 8031820:	6062      	str	r2, [r4, #4]
 8031822:	6023      	str	r3, [r4, #0]
 8031824:	e7e3      	b.n	80317ee <__ssvfscanf_r+0x5a>
 8031826:	2b25      	cmp	r3, #37	@ 0x25
 8031828:	d163      	bne.n	80318f2 <__ssvfscanf_r+0x15e>
 803182a:	62fe      	str	r6, [r7, #44]	@ 0x2c
 803182c:	4642      	mov	r2, r8
 803182e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8031832:	617a      	str	r2, [r7, #20]
 8031834:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 8031838:	2a55      	cmp	r2, #85	@ 0x55
 803183a:	f200 80a6 	bhi.w	803198a <__ssvfscanf_r+0x1f6>
 803183e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8031842:	0056      	.short	0x0056
 8031844:	00a400a4 	.word	0x00a400a4
 8031848:	00a400a4 	.word	0x00a400a4
 803184c:	00a4007d 	.word	0x00a4007d
 8031850:	00a400a4 	.word	0x00a400a4
 8031854:	00a400a4 	.word	0x00a400a4
 8031858:	00c500c5 	.word	0x00c500c5
 803185c:	00c500c5 	.word	0x00c500c5
 8031860:	00c500c5 	.word	0x00c500c5
 8031864:	00c500c5 	.word	0x00c500c5
 8031868:	00c500c5 	.word	0x00c500c5
 803186c:	00a400a4 	.word	0x00a400a4
 8031870:	00a400a4 	.word	0x00a400a4
 8031874:	00a400a4 	.word	0x00a400a4
 8031878:	00ed00a4 	.word	0x00ed00a4
 803187c:	011700a4 	.word	0x011700a4
 8031880:	00ed00cf 	.word	0x00ed00cf
 8031884:	00ed00ed 	.word	0x00ed00ed
 8031888:	00a400a4 	.word	0x00a400a4
 803188c:	00a400a4 	.word	0x00a400a4
 8031890:	00a400a2 	.word	0x00a400a2
 8031894:	00d300a4 	.word	0x00d300a4
 8031898:	00a400a4 	.word	0x00a400a4
 803189c:	010700a4 	.word	0x010700a4
 80318a0:	00a400a4 	.word	0x00a400a4
 80318a4:	00a400a4 	.word	0x00a400a4
 80318a8:	00a400e0 	.word	0x00a400e0
 80318ac:	010c00a4 	.word	0x010c00a4
 80318b0:	00a400a4 	.word	0x00a400a4
 80318b4:	00a400a4 	.word	0x00a400a4
 80318b8:	00ed00a4 	.word	0x00ed00a4
 80318bc:	011900a4 	.word	0x011900a4
 80318c0:	00ed00d1 	.word	0x00ed00d1
 80318c4:	00ed00ed 	.word	0x00ed00ed
 80318c8:	013d0094 	.word	0x013d0094
 80318cc:	00a400a2 	.word	0x00a400a2
 80318d0:	00b80085 	.word	0x00b80085
 80318d4:	00d50121 	.word	0x00d50121
 80318d8:	00a4011e 	.word	0x00a4011e
 80318dc:	010900a4 	.word	0x010900a4
 80318e0:	00dc00b5 	.word	0x00dc00b5
 80318e4:	00a400a4 	.word	0x00a400a4
 80318e8:	00a400e0 	.word	0x00a400e0
 80318ec:	00b5      	.short	0x00b5
 80318ee:	f8d7 8014 	ldr.w	r8, [r7, #20]
 80318f2:	6863      	ldr	r3, [r4, #4]
 80318f4:	2b00      	cmp	r3, #0
 80318f6:	dd0e      	ble.n	8031916 <__ssvfscanf_r+0x182>
 80318f8:	6823      	ldr	r3, [r4, #0]
 80318fa:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80318fe:	7819      	ldrb	r1, [r3, #0]
 8031900:	4291      	cmp	r1, r2
 8031902:	d142      	bne.n	803198a <__ssvfscanf_r+0x1f6>
 8031904:	3301      	adds	r3, #1
 8031906:	6862      	ldr	r2, [r4, #4]
 8031908:	6023      	str	r3, [r4, #0]
 803190a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803190c:	3a01      	subs	r2, #1
 803190e:	3301      	adds	r3, #1
 8031910:	6062      	str	r2, [r4, #4]
 8031912:	633b      	str	r3, [r7, #48]	@ 0x30
 8031914:	e774      	b.n	8031800 <__ssvfscanf_r+0x6c>
 8031916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031918:	4621      	mov	r1, r4
 803191a:	f7fd fdb0 	bl	802f47e <__ssrefill_r>
 803191e:	2800      	cmp	r0, #0
 8031920:	d0ea      	beq.n	80318f8 <__ssvfscanf_r+0x164>
 8031922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031924:	b113      	cbz	r3, 803192c <__ssvfscanf_r+0x198>
 8031926:	89a3      	ldrh	r3, [r4, #12]
 8031928:	065b      	lsls	r3, r3, #25
 803192a:	d52e      	bpl.n	803198a <__ssvfscanf_r+0x1f6>
 803192c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803192e:	2b00      	cmp	r3, #0
 8031930:	f041 8096 	bne.w	8032a60 <__ssvfscanf_r+0x12cc>
 8031934:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8031938:	627b      	str	r3, [r7, #36]	@ 0x24
 803193a:	e031      	b.n	80319a0 <__ssvfscanf_r+0x20c>
 803193c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803193e:	4333      	orrs	r3, r6
 8031940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031942:	d122      	bne.n	803198a <__ssvfscanf_r+0x1f6>
 8031944:	2610      	movs	r6, #16
 8031946:	f8d7 8014 	ldr.w	r8, [r7, #20]
 803194a:	e76f      	b.n	803182c <__ssvfscanf_r+0x98>
 803194c:	0731      	lsls	r1, r6, #28
 803194e:	d11c      	bne.n	803198a <__ssvfscanf_r+0x1f6>
 8031950:	f898 3001 	ldrb.w	r3, [r8, #1]
 8031954:	2b6c      	cmp	r3, #108	@ 0x6c
 8031956:	d105      	bne.n	8031964 <__ssvfscanf_r+0x1d0>
 8031958:	f108 0302 	add.w	r3, r8, #2
 803195c:	617b      	str	r3, [r7, #20]
 803195e:	f046 0602 	orr.w	r6, r6, #2
 8031962:	e7f0      	b.n	8031946 <__ssvfscanf_r+0x1b2>
 8031964:	f046 0601 	orr.w	r6, r6, #1
 8031968:	e7ed      	b.n	8031946 <__ssvfscanf_r+0x1b2>
 803196a:	0732      	lsls	r2, r6, #28
 803196c:	d10d      	bne.n	803198a <__ssvfscanf_r+0x1f6>
 803196e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8031972:	2b68      	cmp	r3, #104	@ 0x68
 8031974:	bf03      	ittte	eq
 8031976:	f108 0302 	addeq.w	r3, r8, #2
 803197a:	617b      	streq	r3, [r7, #20]
 803197c:	f046 0608 	orreq.w	r6, r6, #8
 8031980:	f046 0604 	orrne.w	r6, r6, #4
 8031984:	e7df      	b.n	8031946 <__ssvfscanf_r+0x1b2>
 8031986:	0733      	lsls	r3, r6, #28
 8031988:	d0e9      	beq.n	803195e <__ssvfscanf_r+0x1ca>
 803198a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803198c:	b143      	cbz	r3, 80319a0 <__ssvfscanf_r+0x20c>
 803198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031990:	3301      	adds	r3, #1
 8031992:	f001 8065 	beq.w	8032a60 <__ssvfscanf_r+0x12cc>
 8031996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031998:	6818      	ldr	r0, [r3, #0]
 803199a:	2800      	cmp	r0, #0
 803199c:	f041 8063 	bne.w	8032a66 <__ssvfscanf_r+0x12d2>
 80319a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80319a2:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 80319a6:	46bd      	mov	sp, r7
 80319a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80319ac:	0730      	lsls	r0, r6, #28
 80319ae:	d0ca      	beq.n	8031946 <__ssvfscanf_r+0x1b2>
 80319b0:	e7eb      	b.n	803198a <__ssvfscanf_r+0x1f6>
 80319b2:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 80319b6:	d1e8      	bne.n	803198a <__ssvfscanf_r+0x1f6>
 80319b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80319ba:	b922      	cbnz	r2, 80319c6 <__ssvfscanf_r+0x232>
 80319bc:	b082      	sub	sp, #8
 80319be:	aa02      	add	r2, sp, #8
 80319c0:	e9c2 3300 	strd	r3, r3, [r2]
 80319c4:	637a      	str	r2, [r7, #52]	@ 0x34
 80319c6:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 80319ca:	e7bc      	b.n	8031946 <__ssvfscanf_r+0x1b2>
 80319cc:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 80319d0:	d1db      	bne.n	803198a <__ssvfscanf_r+0x1f6>
 80319d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80319d4:	220a      	movs	r2, #10
 80319d6:	fb02 3301 	mla	r3, r2, r1, r3
 80319da:	3b30      	subs	r3, #48	@ 0x30
 80319dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80319de:	e7b2      	b.n	8031946 <__ssvfscanf_r+0x1b2>
 80319e0:	f046 0601 	orr.w	r6, r6, #1
 80319e4:	4b0b      	ldr	r3, [pc, #44]	@ (8031a14 <__ssvfscanf_r+0x280>)
 80319e6:	e009      	b.n	80319fc <__ssvfscanf_r+0x268>
 80319e8:	f046 0601 	orr.w	r6, r6, #1
 80319ec:	4b0a      	ldr	r3, [pc, #40]	@ (8031a18 <__ssvfscanf_r+0x284>)
 80319ee:	61bb      	str	r3, [r7, #24]
 80319f0:	2308      	movs	r3, #8
 80319f2:	61fb      	str	r3, [r7, #28]
 80319f4:	f04f 0803 	mov.w	r8, #3
 80319f8:	e012      	b.n	8031a20 <__ssvfscanf_r+0x28c>
 80319fa:	4b07      	ldr	r3, [pc, #28]	@ (8031a18 <__ssvfscanf_r+0x284>)
 80319fc:	61bb      	str	r3, [r7, #24]
 80319fe:	230a      	movs	r3, #10
 8031a00:	e7f7      	b.n	80319f2 <__ssvfscanf_r+0x25e>
 8031a02:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8031a06:	4b04      	ldr	r3, [pc, #16]	@ (8031a18 <__ssvfscanf_r+0x284>)
 8031a08:	61bb      	str	r3, [r7, #24]
 8031a0a:	2310      	movs	r3, #16
 8031a0c:	e7f1      	b.n	80319f2 <__ssvfscanf_r+0x25e>
 8031a0e:	bf00      	nop
 8031a10:	0803dff5 	.word	0x0803dff5
 8031a14:	0802c179 	.word	0x0802c179
 8031a18:	080353d9 	.word	0x080353d9
 8031a1c:	f04f 0804 	mov.w	r8, #4
 8031a20:	6863      	ldr	r3, [r4, #4]
 8031a22:	2b00      	cmp	r3, #0
 8031a24:	dd4e      	ble.n	8031ac4 <__ssvfscanf_r+0x330>
 8031a26:	0673      	lsls	r3, r6, #25
 8031a28:	d407      	bmi.n	8031a3a <__ssvfscanf_r+0x2a6>
 8031a2a:	f8df 92d8 	ldr.w	r9, [pc, #728]	@ 8031d04 <__ssvfscanf_r+0x570>
 8031a2e:	6823      	ldr	r3, [r4, #0]
 8031a30:	781a      	ldrb	r2, [r3, #0]
 8031a32:	f819 2002 	ldrb.w	r2, [r9, r2]
 8031a36:	0710      	lsls	r0, r2, #28
 8031a38:	d44b      	bmi.n	8031ad2 <__ssvfscanf_r+0x33e>
 8031a3a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8031a3e:	f1b8 0f03 	cmp.w	r8, #3
 8031a42:	d858      	bhi.n	8031af6 <__ssvfscanf_r+0x362>
 8031a44:	e8df f018 	tbh	[pc, r8, lsl #1]
 8031a48:	036401ae 	.word	0x036401ae
 8031a4c:	05de04fe 	.word	0x05de04fe
 8031a50:	f046 0601 	orr.w	r6, r6, #1
 8031a54:	f04f 0802 	mov.w	r8, #2
 8031a58:	e7e2      	b.n	8031a20 <__ssvfscanf_r+0x28c>
 8031a5a:	6979      	ldr	r1, [r7, #20]
 8031a5c:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8031a60:	f003 fced 	bl	803543e <__sccl>
 8031a64:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8031a68:	6178      	str	r0, [r7, #20]
 8031a6a:	f04f 0801 	mov.w	r8, #1
 8031a6e:	e7d7      	b.n	8031a20 <__ssvfscanf_r+0x28c>
 8031a70:	f046 0601 	orr.w	r6, r6, #1
 8031a74:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8031a78:	f04f 0800 	mov.w	r8, #0
 8031a7c:	e7d0      	b.n	8031a20 <__ssvfscanf_r+0x28c>
 8031a7e:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 8031a82:	e7c0      	b.n	8031a06 <__ssvfscanf_r+0x272>
 8031a84:	06f1      	lsls	r1, r6, #27
 8031a86:	f53f aea5 	bmi.w	80317d4 <__ssvfscanf_r+0x40>
 8031a8a:	0732      	lsls	r2, r6, #28
 8031a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8031a90:	d502      	bpl.n	8031a98 <__ssvfscanf_r+0x304>
 8031a92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031a94:	701a      	strb	r2, [r3, #0]
 8031a96:	e69d      	b.n	80317d4 <__ssvfscanf_r+0x40>
 8031a98:	0770      	lsls	r0, r6, #29
 8031a9a:	d502      	bpl.n	8031aa2 <__ssvfscanf_r+0x30e>
 8031a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031a9e:	801a      	strh	r2, [r3, #0]
 8031aa0:	e698      	b.n	80317d4 <__ssvfscanf_r+0x40>
 8031aa2:	07f1      	lsls	r1, r6, #31
 8031aa4:	d502      	bpl.n	8031aac <__ssvfscanf_r+0x318>
 8031aa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031aa8:	601a      	str	r2, [r3, #0]
 8031aaa:	e693      	b.n	80317d4 <__ssvfscanf_r+0x40>
 8031aac:	07b2      	lsls	r2, r6, #30
 8031aae:	d5fa      	bpl.n	8031aa6 <__ssvfscanf_r+0x312>
 8031ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031ab2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8031ab4:	17d2      	asrs	r2, r2, #31
 8031ab6:	e9c3 1200 	strd	r1, r2, [r3]
 8031aba:	e68b      	b.n	80317d4 <__ssvfscanf_r+0x40>
 8031abc:	4b90      	ldr	r3, [pc, #576]	@ (8031d00 <__ssvfscanf_r+0x56c>)
 8031abe:	61bb      	str	r3, [r7, #24]
 8031ac0:	2300      	movs	r3, #0
 8031ac2:	e796      	b.n	80319f2 <__ssvfscanf_r+0x25e>
 8031ac4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031ac6:	4621      	mov	r1, r4
 8031ac8:	f7fd fcd9 	bl	802f47e <__ssrefill_r>
 8031acc:	2800      	cmp	r0, #0
 8031ace:	d0aa      	beq.n	8031a26 <__ssvfscanf_r+0x292>
 8031ad0:	e727      	b.n	8031922 <__ssvfscanf_r+0x18e>
 8031ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031ad4:	3201      	adds	r2, #1
 8031ad6:	633a      	str	r2, [r7, #48]	@ 0x30
 8031ad8:	6862      	ldr	r2, [r4, #4]
 8031ada:	3a01      	subs	r2, #1
 8031adc:	2a00      	cmp	r2, #0
 8031ade:	6062      	str	r2, [r4, #4]
 8031ae0:	dd02      	ble.n	8031ae8 <__ssvfscanf_r+0x354>
 8031ae2:	3301      	adds	r3, #1
 8031ae4:	6023      	str	r3, [r4, #0]
 8031ae6:	e7a2      	b.n	8031a2e <__ssvfscanf_r+0x29a>
 8031ae8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031aea:	4621      	mov	r1, r4
 8031aec:	f7fd fcc7 	bl	802f47e <__ssrefill_r>
 8031af0:	2800      	cmp	r0, #0
 8031af2:	d09c      	beq.n	8031a2e <__ssvfscanf_r+0x29a>
 8031af4:	e715      	b.n	8031922 <__ssvfscanf_r+0x18e>
 8031af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031af8:	2b01      	cmp	r3, #1
 8031afa:	bf38      	it	cc
 8031afc:	2301      	movcc	r3, #1
 8031afe:	4698      	mov	r8, r3
 8031b00:	f016 0301 	ands.w	r3, r6, #1
 8031b04:	f006 0b10 	and.w	fp, r6, #16
 8031b08:	f000 80d9 	beq.w	8031cbe <__ssvfscanf_r+0x52a>
 8031b0c:	f1bb 0f00 	cmp.w	fp, #0
 8031b10:	d173      	bne.n	8031bfa <__ssvfscanf_r+0x466>
 8031b12:	462b      	mov	r3, r5
 8031b14:	0631      	lsls	r1, r6, #24
 8031b16:	f853 5b04 	ldr.w	r5, [r3], #4
 8031b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031b1c:	d574      	bpl.n	8031c08 <__ssvfscanf_r+0x474>
 8031b1e:	2d00      	cmp	r5, #0
 8031b20:	f43f af33 	beq.w	803198a <__ssvfscanf_r+0x1f6>
 8031b24:	2080      	movs	r0, #128	@ 0x80
 8031b26:	f7fc fd77 	bl	802e618 <malloc>
 8031b2a:	4606      	mov	r6, r0
 8031b2c:	b918      	cbnz	r0, 8031b36 <__ssvfscanf_r+0x3a2>
 8031b2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8031b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8031b34:	e729      	b.n	803198a <__ssvfscanf_r+0x1f6>
 8031b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031b38:	6028      	str	r0, [r5, #0]
 8031b3a:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8031b3e:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8031b42:	45ca      	cmp	sl, r9
 8031b44:	d311      	bcc.n	8031b6a <__ssvfscanf_r+0x3d6>
 8031b46:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8031b4a:	4599      	cmp	r9, r3
 8031b4c:	d8ef      	bhi.n	8031b2e <__ssvfscanf_r+0x39a>
 8031b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031b50:	f109 0908 	add.w	r9, r9, #8
 8031b54:	6818      	ldr	r0, [r3, #0]
 8031b56:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8031b5a:	f002 fb7d 	bl	8034258 <realloc>
 8031b5e:	2800      	cmp	r0, #0
 8031b60:	d0e5      	beq.n	8031b2e <__ssvfscanf_r+0x39a>
 8031b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031b64:	6018      	str	r0, [r3, #0]
 8031b66:	f8a3 9004 	strh.w	r9, [r3, #4]
 8031b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031b6c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8031b6e:	681b      	ldr	r3, [r3, #0]
 8031b70:	f10a 0201 	add.w	r2, sl, #1
 8031b74:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8031b78:	80ca      	strh	r2, [r1, #6]
 8031b7a:	46aa      	mov	sl, r5
 8031b7c:	f04f 0920 	mov.w	r9, #32
 8031b80:	4635      	mov	r5, r6
 8031b82:	2200      	movs	r2, #0
 8031b84:	613a      	str	r2, [r7, #16]
 8031b86:	f003 fda5 	bl	80356d4 <__locale_mb_cur_max>
 8031b8a:	693a      	ldr	r2, [r7, #16]
 8031b8c:	4290      	cmp	r0, r2
 8031b8e:	f43f aec8 	beq.w	8031922 <__ssvfscanf_r+0x18e>
 8031b92:	6821      	ldr	r1, [r4, #0]
 8031b94:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 8031b98:	f811 0b01 	ldrb.w	r0, [r1], #1
 8031b9c:	f80c 0002 	strb.w	r0, [ip, r2]
 8031ba0:	1c53      	adds	r3, r2, #1
 8031ba2:	6862      	ldr	r2, [r4, #4]
 8031ba4:	3a01      	subs	r2, #1
 8031ba6:	e9c4 1200 	strd	r1, r2, [r4]
 8031baa:	6a3a      	ldr	r2, [r7, #32]
 8031bac:	2a03      	cmp	r2, #3
 8031bae:	d102      	bne.n	8031bb6 <__ssvfscanf_r+0x422>
 8031bb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8031bb2:	2a04      	cmp	r2, #4
 8031bb4:	d007      	beq.n	8031bc6 <__ssvfscanf_r+0x432>
 8031bb6:	2208      	movs	r2, #8
 8031bb8:	2100      	movs	r1, #0
 8031bba:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8031bbe:	623b      	str	r3, [r7, #32]
 8031bc0:	f7fa fe1e 	bl	802c800 <memset>
 8031bc4:	6a3b      	ldr	r3, [r7, #32]
 8031bc6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8031bca:	9200      	str	r2, [sp, #0]
 8031bcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031bce:	613b      	str	r3, [r7, #16]
 8031bd0:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8031bd4:	4629      	mov	r1, r5
 8031bd6:	f003 ff11 	bl	80359fc <_mbrtowc_r>
 8031bda:	1c42      	adds	r2, r0, #1
 8031bdc:	6238      	str	r0, [r7, #32]
 8031bde:	f43f aea0 	beq.w	8031922 <__ssvfscanf_r+0x18e>
 8031be2:	693b      	ldr	r3, [r7, #16]
 8031be4:	b9b8      	cbnz	r0, 8031c16 <__ssvfscanf_r+0x482>
 8031be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031be8:	441a      	add	r2, r3
 8031bea:	4613      	mov	r3, r2
 8031bec:	f1bb 0f00 	cmp.w	fp, #0
 8031bf0:	d00e      	beq.n	8031c10 <__ssvfscanf_r+0x47c>
 8031bf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8031bf4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8031bf8:	e019      	b.n	8031c2e <__ssvfscanf_r+0x49a>
 8031bfa:	f04f 0900 	mov.w	r9, #0
 8031bfe:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8031c00:	464e      	mov	r6, r9
 8031c02:	46ca      	mov	sl, r9
 8031c04:	464d      	mov	r5, r9
 8031c06:	e7bc      	b.n	8031b82 <__ssvfscanf_r+0x3ee>
 8031c08:	46d9      	mov	r9, fp
 8031c0a:	465e      	mov	r6, fp
 8031c0c:	46da      	mov	sl, fp
 8031c0e:	e7b8      	b.n	8031b82 <__ssvfscanf_r+0x3ee>
 8031c10:	f8c5 b000 	str.w	fp, [r5]
 8031c14:	e7ed      	b.n	8031bf2 <__ssvfscanf_r+0x45e>
 8031c16:	6a3a      	ldr	r2, [r7, #32]
 8031c18:	3202      	adds	r2, #2
 8031c1a:	d025      	beq.n	8031c68 <__ssvfscanf_r+0x4d4>
 8031c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031c1e:	441a      	add	r2, r3
 8031c20:	6a3b      	ldr	r3, [r7, #32]
 8031c22:	633a      	str	r2, [r7, #48]	@ 0x30
 8031c24:	2b03      	cmp	r3, #3
 8031c26:	d1e5      	bne.n	8031bf4 <__ssvfscanf_r+0x460>
 8031c28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8031c2a:	2b04      	cmp	r3, #4
 8031c2c:	d1e2      	bne.n	8031bf4 <__ssvfscanf_r+0x460>
 8031c2e:	f1bb 0f00 	cmp.w	fp, #0
 8031c32:	d117      	bne.n	8031c64 <__ssvfscanf_r+0x4d0>
 8031c34:	f1ba 0f00 	cmp.w	sl, #0
 8031c38:	d013      	beq.n	8031c62 <__ssvfscanf_r+0x4ce>
 8031c3a:	1bab      	subs	r3, r5, r6
 8031c3c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8031c40:	d80f      	bhi.n	8031c62 <__ssvfscanf_r+0x4ce>
 8031c42:	4630      	mov	r0, r6
 8031c44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8031c48:	613b      	str	r3, [r7, #16]
 8031c4a:	f002 fb05 	bl	8034258 <realloc>
 8031c4e:	4606      	mov	r6, r0
 8031c50:	2800      	cmp	r0, #0
 8031c52:	f43f af6c 	beq.w	8031b2e <__ssvfscanf_r+0x39a>
 8031c56:	693b      	ldr	r3, [r7, #16]
 8031c58:	f8ca 0000 	str.w	r0, [sl]
 8031c5c:	18c5      	adds	r5, r0, r3
 8031c5e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8031c62:	3504      	adds	r5, #4
 8031c64:	2200      	movs	r2, #0
 8031c66:	e000      	b.n	8031c6a <__ssvfscanf_r+0x4d6>
 8031c68:	461a      	mov	r2, r3
 8031c6a:	6863      	ldr	r3, [r4, #4]
 8031c6c:	2b00      	cmp	r3, #0
 8031c6e:	dc14      	bgt.n	8031c9a <__ssvfscanf_r+0x506>
 8031c70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031c72:	613a      	str	r2, [r7, #16]
 8031c74:	4621      	mov	r1, r4
 8031c76:	f7fd fc02 	bl	802f47e <__ssrefill_r>
 8031c7a:	693a      	ldr	r2, [r7, #16]
 8031c7c:	b168      	cbz	r0, 8031c9a <__ssvfscanf_r+0x506>
 8031c7e:	2a00      	cmp	r2, #0
 8031c80:	f47f ae4f 	bne.w	8031922 <__ssvfscanf_r+0x18e>
 8031c84:	f1ba 0f00 	cmp.w	sl, #0
 8031c88:	d10c      	bne.n	8031ca4 <__ssvfscanf_r+0x510>
 8031c8a:	f1bb 0f00 	cmp.w	fp, #0
 8031c8e:	d102      	bne.n	8031c96 <__ssvfscanf_r+0x502>
 8031c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031c92:	3301      	adds	r3, #1
 8031c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8031c96:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8031c98:	e59c      	b.n	80317d4 <__ssvfscanf_r+0x40>
 8031c9a:	f1b8 0f00 	cmp.w	r8, #0
 8031c9e:	f47f af71 	bne.w	8031b84 <__ssvfscanf_r+0x3f0>
 8031ca2:	e7ef      	b.n	8031c84 <__ssvfscanf_r+0x4f0>
 8031ca4:	1ba9      	subs	r1, r5, r6
 8031ca6:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8031caa:	d9ee      	bls.n	8031c8a <__ssvfscanf_r+0x4f6>
 8031cac:	f8da 0000 	ldr.w	r0, [sl]
 8031cb0:	f002 fad2 	bl	8034258 <realloc>
 8031cb4:	2800      	cmp	r0, #0
 8031cb6:	d0e8      	beq.n	8031c8a <__ssvfscanf_r+0x4f6>
 8031cb8:	f8ca 0000 	str.w	r0, [sl]
 8031cbc:	e7e5      	b.n	8031c8a <__ssvfscanf_r+0x4f6>
 8031cbe:	f1bb 0f00 	cmp.w	fp, #0
 8031cc2:	d021      	beq.n	8031d08 <__ssvfscanf_r+0x574>
 8031cc4:	461e      	mov	r6, r3
 8031cc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8031cca:	4598      	cmp	r8, r3
 8031ccc:	dd11      	ble.n	8031cf2 <__ssvfscanf_r+0x55e>
 8031cce:	441a      	add	r2, r3
 8031cd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031cd2:	6022      	str	r2, [r4, #0]
 8031cd4:	4621      	mov	r1, r4
 8031cd6:	441e      	add	r6, r3
 8031cd8:	eba8 0803 	sub.w	r8, r8, r3
 8031cdc:	f7fd fbcf 	bl	802f47e <__ssrefill_r>
 8031ce0:	2800      	cmp	r0, #0
 8031ce2:	d0f0      	beq.n	8031cc6 <__ssvfscanf_r+0x532>
 8031ce4:	2e00      	cmp	r6, #0
 8031ce6:	f43f ae1c 	beq.w	8031922 <__ssvfscanf_r+0x18e>
 8031cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8031cec:	4433      	add	r3, r6
 8031cee:	633b      	str	r3, [r7, #48]	@ 0x30
 8031cf0:	e570      	b.n	80317d4 <__ssvfscanf_r+0x40>
 8031cf2:	eba3 0308 	sub.w	r3, r3, r8
 8031cf6:	4442      	add	r2, r8
 8031cf8:	4446      	add	r6, r8
 8031cfa:	6063      	str	r3, [r4, #4]
 8031cfc:	6022      	str	r2, [r4, #0]
 8031cfe:	e7f4      	b.n	8031cea <__ssvfscanf_r+0x556>
 8031d00:	0802c179 	.word	0x0802c179
 8031d04:	0803dff5 	.word	0x0803dff5
 8031d08:	46a9      	mov	r9, r5
 8031d0a:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8031d0e:	f859 5b04 	ldr.w	r5, [r9], #4
 8031d12:	d02b      	beq.n	8031d6c <__ssvfscanf_r+0x5d8>
 8031d14:	2d00      	cmp	r5, #0
 8031d16:	f43f ae38 	beq.w	803198a <__ssvfscanf_r+0x1f6>
 8031d1a:	4640      	mov	r0, r8
 8031d1c:	f7fc fc7c 	bl	802e618 <malloc>
 8031d20:	4682      	mov	sl, r0
 8031d22:	2800      	cmp	r0, #0
 8031d24:	f43f ae02 	beq.w	803192c <__ssvfscanf_r+0x198>
 8031d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031d2a:	6028      	str	r0, [r5, #0]
 8031d2c:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8031d30:	889e      	ldrh	r6, [r3, #4]
 8031d32:	45b3      	cmp	fp, r6
 8031d34:	d310      	bcc.n	8031d58 <__ssvfscanf_r+0x5c4>
 8031d36:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8031d3a:	429e      	cmp	r6, r3
 8031d3c:	f200 8690 	bhi.w	8032a60 <__ssvfscanf_r+0x12cc>
 8031d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031d42:	3608      	adds	r6, #8
 8031d44:	6818      	ldr	r0, [r3, #0]
 8031d46:	00b1      	lsls	r1, r6, #2
 8031d48:	f002 fa86 	bl	8034258 <realloc>
 8031d4c:	2800      	cmp	r0, #0
 8031d4e:	f000 8687 	beq.w	8032a60 <__ssvfscanf_r+0x12cc>
 8031d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031d54:	6018      	str	r0, [r3, #0]
 8031d56:	809e      	strh	r6, [r3, #4]
 8031d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031d5a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8031d5c:	681b      	ldr	r3, [r3, #0]
 8031d5e:	f10b 0201 	add.w	r2, fp, #1
 8031d62:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8031d66:	462e      	mov	r6, r5
 8031d68:	80ca      	strh	r2, [r1, #6]
 8031d6a:	4655      	mov	r5, sl
 8031d6c:	9400      	str	r4, [sp, #0]
 8031d6e:	4629      	mov	r1, r5
 8031d70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031d72:	4643      	mov	r3, r8
 8031d74:	2201      	movs	r2, #1
 8031d76:	f7fd fb9f 	bl	802f4b8 <_sfread_r>
 8031d7a:	4605      	mov	r5, r0
 8031d7c:	2800      	cmp	r0, #0
 8031d7e:	f43f add0 	beq.w	8031922 <__ssvfscanf_r+0x18e>
 8031d82:	b13e      	cbz	r6, 8031d94 <__ssvfscanf_r+0x600>
 8031d84:	4580      	cmp	r8, r0
 8031d86:	d905      	bls.n	8031d94 <__ssvfscanf_r+0x600>
 8031d88:	4601      	mov	r1, r0
 8031d8a:	6830      	ldr	r0, [r6, #0]
 8031d8c:	f002 fa64 	bl	8034258 <realloc>
 8031d90:	b100      	cbz	r0, 8031d94 <__ssvfscanf_r+0x600>
 8031d92:	6030      	str	r0, [r6, #0]
 8031d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8031d96:	442b      	add	r3, r5
 8031d98:	633b      	str	r3, [r7, #48]	@ 0x30
 8031d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031d9c:	3301      	adds	r3, #1
 8031d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8031da0:	464d      	mov	r5, r9
 8031da2:	e517      	b.n	80317d4 <__ssvfscanf_r+0x40>
 8031da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031da6:	2b00      	cmp	r3, #0
 8031da8:	bf08      	it	eq
 8031daa:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8031dae:	f016 0801 	ands.w	r8, r6, #1
 8031db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031db4:	f006 0a10 	and.w	sl, r6, #16
 8031db8:	f000 80ff 	beq.w	8031fba <__ssvfscanf_r+0x826>
 8031dbc:	f1ba 0f00 	cmp.w	sl, #0
 8031dc0:	f040 80a2 	bne.w	8031f08 <__ssvfscanf_r+0x774>
 8031dc4:	462b      	mov	r3, r5
 8031dc6:	f853 5b04 	ldr.w	r5, [r3], #4
 8031dca:	60fb      	str	r3, [r7, #12]
 8031dcc:	0633      	lsls	r3, r6, #24
 8031dce:	f140 80a3 	bpl.w	8031f18 <__ssvfscanf_r+0x784>
 8031dd2:	2d00      	cmp	r5, #0
 8031dd4:	f43f add9 	beq.w	803198a <__ssvfscanf_r+0x1f6>
 8031dd8:	2080      	movs	r0, #128	@ 0x80
 8031dda:	f7fc fc1d 	bl	802e618 <malloc>
 8031dde:	4680      	mov	r8, r0
 8031de0:	2800      	cmp	r0, #0
 8031de2:	f43f aea4 	beq.w	8031b2e <__ssvfscanf_r+0x39a>
 8031de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031de8:	6028      	str	r0, [r5, #0]
 8031dea:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8031dee:	889e      	ldrh	r6, [r3, #4]
 8031df0:	45b1      	cmp	r9, r6
 8031df2:	d310      	bcc.n	8031e16 <__ssvfscanf_r+0x682>
 8031df4:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8031df8:	429e      	cmp	r6, r3
 8031dfa:	f63f ae98 	bhi.w	8031b2e <__ssvfscanf_r+0x39a>
 8031dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031e00:	3608      	adds	r6, #8
 8031e02:	6818      	ldr	r0, [r3, #0]
 8031e04:	00b1      	lsls	r1, r6, #2
 8031e06:	f002 fa27 	bl	8034258 <realloc>
 8031e0a:	2800      	cmp	r0, #0
 8031e0c:	f43f ae8f 	beq.w	8031b2e <__ssvfscanf_r+0x39a>
 8031e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031e12:	6018      	str	r0, [r3, #0]
 8031e14:	809e      	strh	r6, [r3, #4]
 8031e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031e18:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8031e1a:	681b      	ldr	r3, [r3, #0]
 8031e1c:	f109 0201 	add.w	r2, r9, #1
 8031e20:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8031e24:	46ab      	mov	fp, r5
 8031e26:	80ca      	strh	r2, [r1, #6]
 8031e28:	4645      	mov	r5, r8
 8031e2a:	f04f 0920 	mov.w	r9, #32
 8031e2e:	2600      	movs	r6, #0
 8031e30:	f003 fc50 	bl	80356d4 <__locale_mb_cur_max>
 8031e34:	42b0      	cmp	r0, r6
 8031e36:	f43f ad74 	beq.w	8031922 <__ssvfscanf_r+0x18e>
 8031e3a:	1c73      	adds	r3, r6, #1
 8031e3c:	613b      	str	r3, [r7, #16]
 8031e3e:	6823      	ldr	r3, [r4, #0]
 8031e40:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8031e44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8031e48:	558a      	strb	r2, [r1, r6]
 8031e4a:	6862      	ldr	r2, [r4, #4]
 8031e4c:	3a01      	subs	r2, #1
 8031e4e:	e9c4 3200 	strd	r3, r2, [r4]
 8031e52:	6a3b      	ldr	r3, [r7, #32]
 8031e54:	2b03      	cmp	r3, #3
 8031e56:	d102      	bne.n	8031e5e <__ssvfscanf_r+0x6ca>
 8031e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8031e5a:	2b04      	cmp	r3, #4
 8031e5c:	d005      	beq.n	8031e6a <__ssvfscanf_r+0x6d6>
 8031e5e:	2208      	movs	r2, #8
 8031e60:	2100      	movs	r1, #0
 8031e62:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8031e66:	f7fa fccb 	bl	802c800 <memset>
 8031e6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8031e6e:	9300      	str	r3, [sp, #0]
 8031e70:	693b      	ldr	r3, [r7, #16]
 8031e72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031e74:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8031e78:	4629      	mov	r1, r5
 8031e7a:	f003 fdbf 	bl	80359fc <_mbrtowc_r>
 8031e7e:	1c46      	adds	r6, r0, #1
 8031e80:	6238      	str	r0, [r7, #32]
 8031e82:	f43f ad4e 	beq.w	8031922 <__ssvfscanf_r+0x18e>
 8031e86:	2800      	cmp	r0, #0
 8031e88:	d14a      	bne.n	8031f20 <__ssvfscanf_r+0x78c>
 8031e8a:	6028      	str	r0, [r5, #0]
 8031e8c:	682e      	ldr	r6, [r5, #0]
 8031e8e:	1c70      	adds	r0, r6, #1
 8031e90:	d056      	beq.n	8031f40 <__ssvfscanf_r+0x7ac>
 8031e92:	2208      	movs	r2, #8
 8031e94:	2100      	movs	r1, #0
 8031e96:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8031e9a:	f7fa fcb1 	bl	802c800 <memset>
 8031e9e:	4b9b      	ldr	r3, [pc, #620]	@ (803210c <__ssvfscanf_r+0x978>)
 8031ea0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8031ea6:	60bb      	str	r3, [r7, #8]
 8031ea8:	4632      	mov	r2, r6
 8031eaa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8031eae:	68be      	ldr	r6, [r7, #8]
 8031eb0:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8031eb4:	47b0      	blx	r6
 8031eb6:	2801      	cmp	r0, #1
 8031eb8:	d144      	bne.n	8031f44 <__ssvfscanf_r+0x7b0>
 8031eba:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8031ebe:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8031ec2:	5c9b      	ldrb	r3, [r3, r2]
 8031ec4:	2b00      	cmp	r3, #0
 8031ec6:	d148      	bne.n	8031f5a <__ssvfscanf_r+0x7c6>
 8031ec8:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 8031ecc:	693b      	ldr	r3, [r7, #16]
 8031ece:	2b00      	cmp	r3, #0
 8031ed0:	d13a      	bne.n	8031f48 <__ssvfscanf_r+0x7b4>
 8031ed2:	f1ba 0f00 	cmp.w	sl, #0
 8031ed6:	d115      	bne.n	8031f04 <__ssvfscanf_r+0x770>
 8031ed8:	f8c5 a000 	str.w	sl, [r5]
 8031edc:	f1bb 0f00 	cmp.w	fp, #0
 8031ee0:	d00d      	beq.n	8031efe <__ssvfscanf_r+0x76a>
 8031ee2:	eba5 0108 	sub.w	r1, r5, r8
 8031ee6:	108b      	asrs	r3, r1, #2
 8031ee8:	3301      	adds	r3, #1
 8031eea:	4599      	cmp	r9, r3
 8031eec:	d907      	bls.n	8031efe <__ssvfscanf_r+0x76a>
 8031eee:	f8db 0000 	ldr.w	r0, [fp]
 8031ef2:	3104      	adds	r1, #4
 8031ef4:	f002 f9b0 	bl	8034258 <realloc>
 8031ef8:	b108      	cbz	r0, 8031efe <__ssvfscanf_r+0x76a>
 8031efa:	f8cb 0000 	str.w	r0, [fp]
 8031efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031f00:	3301      	adds	r3, #1
 8031f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8031f04:	68fd      	ldr	r5, [r7, #12]
 8031f06:	e465      	b.n	80317d4 <__ssvfscanf_r+0x40>
 8031f08:	f04f 0900 	mov.w	r9, #0
 8031f0c:	60fd      	str	r5, [r7, #12]
 8031f0e:	46c8      	mov	r8, r9
 8031f10:	46cb      	mov	fp, r9
 8031f12:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8031f16:	e78a      	b.n	8031e2e <__ssvfscanf_r+0x69a>
 8031f18:	46d1      	mov	r9, sl
 8031f1a:	46d0      	mov	r8, sl
 8031f1c:	46d3      	mov	fp, sl
 8031f1e:	e786      	b.n	8031e2e <__ssvfscanf_r+0x69a>
 8031f20:	6a3b      	ldr	r3, [r7, #32]
 8031f22:	3302      	adds	r3, #2
 8031f24:	d1b2      	bne.n	8031e8c <__ssvfscanf_r+0x6f8>
 8031f26:	693e      	ldr	r6, [r7, #16]
 8031f28:	6863      	ldr	r3, [r4, #4]
 8031f2a:	2b00      	cmp	r3, #0
 8031f2c:	dc40      	bgt.n	8031fb0 <__ssvfscanf_r+0x81c>
 8031f2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031f30:	4621      	mov	r1, r4
 8031f32:	f7fd faa4 	bl	802f47e <__ssrefill_r>
 8031f36:	2800      	cmp	r0, #0
 8031f38:	d03a      	beq.n	8031fb0 <__ssvfscanf_r+0x81c>
 8031f3a:	2e00      	cmp	r6, #0
 8031f3c:	d0c9      	beq.n	8031ed2 <__ssvfscanf_r+0x73e>
 8031f3e:	e4f0      	b.n	8031922 <__ssvfscanf_r+0x18e>
 8031f40:	4632      	mov	r2, r6
 8031f42:	e7bc      	b.n	8031ebe <__ssvfscanf_r+0x72a>
 8031f44:	2200      	movs	r2, #0
 8031f46:	e7ba      	b.n	8031ebe <__ssvfscanf_r+0x72a>
 8031f48:	693b      	ldr	r3, [r7, #16]
 8031f4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031f4c:	3b01      	subs	r3, #1
 8031f4e:	4622      	mov	r2, r4
 8031f50:	5cf1      	ldrb	r1, [r6, r3]
 8031f52:	613b      	str	r3, [r7, #16]
 8031f54:	f7fd fa56 	bl	802f404 <_sungetc_r>
 8031f58:	e7b8      	b.n	8031ecc <__ssvfscanf_r+0x738>
 8031f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8031f5c:	693a      	ldr	r2, [r7, #16]
 8031f5e:	4413      	add	r3, r2
 8031f60:	633b      	str	r3, [r7, #48]	@ 0x30
 8031f62:	6a3b      	ldr	r3, [r7, #32]
 8031f64:	2b03      	cmp	r3, #3
 8031f66:	d102      	bne.n	8031f6e <__ssvfscanf_r+0x7da>
 8031f68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8031f6a:	2b04      	cmp	r3, #4
 8031f6c:	d002      	beq.n	8031f74 <__ssvfscanf_r+0x7e0>
 8031f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031f70:	3b01      	subs	r3, #1
 8031f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031f74:	f1ba 0f00 	cmp.w	sl, #0
 8031f78:	d118      	bne.n	8031fac <__ssvfscanf_r+0x818>
 8031f7a:	3504      	adds	r5, #4
 8031f7c:	f1bb 0f00 	cmp.w	fp, #0
 8031f80:	d014      	beq.n	8031fac <__ssvfscanf_r+0x818>
 8031f82:	eba5 0608 	sub.w	r6, r5, r8
 8031f86:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 8031f8a:	d80d      	bhi.n	8031fa8 <__ssvfscanf_r+0x814>
 8031f8c:	4640      	mov	r0, r8
 8031f8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8031f92:	f002 f961 	bl	8034258 <realloc>
 8031f96:	4680      	mov	r8, r0
 8031f98:	2800      	cmp	r0, #0
 8031f9a:	f43f adc8 	beq.w	8031b2e <__ssvfscanf_r+0x39a>
 8031f9e:	1985      	adds	r5, r0, r6
 8031fa0:	f8cb 0000 	str.w	r0, [fp]
 8031fa4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8031fa8:	4656      	mov	r6, sl
 8031faa:	e7bd      	b.n	8031f28 <__ssvfscanf_r+0x794>
 8031fac:	2600      	movs	r6, #0
 8031fae:	e7bb      	b.n	8031f28 <__ssvfscanf_r+0x794>
 8031fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031fb2:	2b00      	cmp	r3, #0
 8031fb4:	f47f af3c 	bne.w	8031e30 <__ssvfscanf_r+0x69c>
 8031fb8:	e78b      	b.n	8031ed2 <__ssvfscanf_r+0x73e>
 8031fba:	f1ba 0f00 	cmp.w	sl, #0
 8031fbe:	d01e      	beq.n	8031ffe <__ssvfscanf_r+0x86a>
 8031fc0:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 8031fc4:	6823      	ldr	r3, [r4, #0]
 8031fc6:	781a      	ldrb	r2, [r3, #0]
 8031fc8:	5cb2      	ldrb	r2, [r6, r2]
 8031fca:	b91a      	cbnz	r2, 8031fd4 <__ssvfscanf_r+0x840>
 8031fcc:	f1b8 0f00 	cmp.w	r8, #0
 8031fd0:	d112      	bne.n	8031ff8 <__ssvfscanf_r+0x864>
 8031fd2:	e4da      	b.n	803198a <__ssvfscanf_r+0x1f6>
 8031fd4:	3301      	adds	r3, #1
 8031fd6:	6862      	ldr	r2, [r4, #4]
 8031fd8:	6023      	str	r3, [r4, #0]
 8031fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031fdc:	f108 0801 	add.w	r8, r8, #1
 8031fe0:	3a01      	subs	r2, #1
 8031fe2:	4598      	cmp	r8, r3
 8031fe4:	6062      	str	r2, [r4, #4]
 8031fe6:	d007      	beq.n	8031ff8 <__ssvfscanf_r+0x864>
 8031fe8:	2a00      	cmp	r2, #0
 8031fea:	dceb      	bgt.n	8031fc4 <__ssvfscanf_r+0x830>
 8031fec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031fee:	4621      	mov	r1, r4
 8031ff0:	f7fd fa45 	bl	802f47e <__ssrefill_r>
 8031ff4:	2800      	cmp	r0, #0
 8031ff6:	d0e5      	beq.n	8031fc4 <__ssvfscanf_r+0x830>
 8031ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8031ffa:	4443      	add	r3, r8
 8031ffc:	e677      	b.n	8031cee <__ssvfscanf_r+0x55a>
 8031ffe:	46a9      	mov	r9, r5
 8032000:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8032004:	f859 8b04 	ldr.w	r8, [r9], #4
 8032008:	d07e      	beq.n	8032108 <__ssvfscanf_r+0x974>
 803200a:	f1b8 0f00 	cmp.w	r8, #0
 803200e:	f43f acbc 	beq.w	803198a <__ssvfscanf_r+0x1f6>
 8032012:	2020      	movs	r0, #32
 8032014:	f7fc fb00 	bl	802e618 <malloc>
 8032018:	4606      	mov	r6, r0
 803201a:	2800      	cmp	r0, #0
 803201c:	f43f ac86 	beq.w	803192c <__ssvfscanf_r+0x198>
 8032020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032022:	f8c8 0000 	str.w	r0, [r8]
 8032026:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 803202a:	889d      	ldrh	r5, [r3, #4]
 803202c:	45aa      	cmp	sl, r5
 803202e:	d310      	bcc.n	8032052 <__ssvfscanf_r+0x8be>
 8032030:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8032034:	429d      	cmp	r5, r3
 8032036:	f200 8513 	bhi.w	8032a60 <__ssvfscanf_r+0x12cc>
 803203a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803203c:	3508      	adds	r5, #8
 803203e:	6818      	ldr	r0, [r3, #0]
 8032040:	00a9      	lsls	r1, r5, #2
 8032042:	f002 f909 	bl	8034258 <realloc>
 8032046:	2800      	cmp	r0, #0
 8032048:	f000 850a 	beq.w	8032a60 <__ssvfscanf_r+0x12cc>
 803204c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803204e:	6018      	str	r0, [r3, #0]
 8032050:	809d      	strh	r5, [r3, #4]
 8032052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032054:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032056:	681b      	ldr	r3, [r3, #0]
 8032058:	f10a 0201 	add.w	r2, sl, #1
 803205c:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 8032060:	80ca      	strh	r2, [r1, #6]
 8032062:	46c2      	mov	sl, r8
 8032064:	46b0      	mov	r8, r6
 8032066:	2620      	movs	r6, #32
 8032068:	4645      	mov	r5, r8
 803206a:	6823      	ldr	r3, [r4, #0]
 803206c:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8032070:	781a      	ldrb	r2, [r3, #0]
 8032072:	5c8a      	ldrb	r2, [r1, r2]
 8032074:	b91a      	cbnz	r2, 803207e <__ssvfscanf_r+0x8ea>
 8032076:	ebb8 0505 	subs.w	r5, r8, r5
 803207a:	d12e      	bne.n	80320da <__ssvfscanf_r+0x946>
 803207c:	e485      	b.n	803198a <__ssvfscanf_r+0x1f6>
 803207e:	6862      	ldr	r2, [r4, #4]
 8032080:	3a01      	subs	r2, #1
 8032082:	6062      	str	r2, [r4, #4]
 8032084:	1c5a      	adds	r2, r3, #1
 8032086:	6022      	str	r2, [r4, #0]
 8032088:	781b      	ldrb	r3, [r3, #0]
 803208a:	f808 3b01 	strb.w	r3, [r8], #1
 803208e:	f1ba 0f00 	cmp.w	sl, #0
 8032092:	d010      	beq.n	80320b6 <__ssvfscanf_r+0x922>
 8032094:	eba8 0b05 	sub.w	fp, r8, r5
 8032098:	45b3      	cmp	fp, r6
 803209a:	d30c      	bcc.n	80320b6 <__ssvfscanf_r+0x922>
 803209c:	0076      	lsls	r6, r6, #1
 803209e:	4628      	mov	r0, r5
 80320a0:	4631      	mov	r1, r6
 80320a2:	f002 f8d9 	bl	8034258 <realloc>
 80320a6:	4605      	mov	r5, r0
 80320a8:	2800      	cmp	r0, #0
 80320aa:	f43f ac3f 	beq.w	803192c <__ssvfscanf_r+0x198>
 80320ae:	eb00 080b 	add.w	r8, r0, fp
 80320b2:	f8ca 0000 	str.w	r0, [sl]
 80320b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80320b8:	3b01      	subs	r3, #1
 80320ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80320bc:	d0db      	beq.n	8032076 <__ssvfscanf_r+0x8e2>
 80320be:	6863      	ldr	r3, [r4, #4]
 80320c0:	2b00      	cmp	r3, #0
 80320c2:	dcd2      	bgt.n	803206a <__ssvfscanf_r+0x8d6>
 80320c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80320c6:	4621      	mov	r1, r4
 80320c8:	f7fd f9d9 	bl	802f47e <__ssrefill_r>
 80320cc:	2800      	cmp	r0, #0
 80320ce:	d0cc      	beq.n	803206a <__ssvfscanf_r+0x8d6>
 80320d0:	45a8      	cmp	r8, r5
 80320d2:	f43f ac26 	beq.w	8031922 <__ssvfscanf_r+0x18e>
 80320d6:	eba8 0505 	sub.w	r5, r8, r5
 80320da:	2300      	movs	r3, #0
 80320dc:	f888 3000 	strb.w	r3, [r8]
 80320e0:	f1ba 0f00 	cmp.w	sl, #0
 80320e4:	d009      	beq.n	80320fa <__ssvfscanf_r+0x966>
 80320e6:	1c69      	adds	r1, r5, #1
 80320e8:	42b1      	cmp	r1, r6
 80320ea:	d206      	bcs.n	80320fa <__ssvfscanf_r+0x966>
 80320ec:	f8da 0000 	ldr.w	r0, [sl]
 80320f0:	f002 f8b2 	bl	8034258 <realloc>
 80320f4:	b108      	cbz	r0, 80320fa <__ssvfscanf_r+0x966>
 80320f6:	f8ca 0000 	str.w	r0, [sl]
 80320fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80320fc:	3301      	adds	r3, #1
 80320fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8032100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032102:	442b      	add	r3, r5
 8032104:	633b      	str	r3, [r7, #48]	@ 0x30
 8032106:	e64b      	b.n	8031da0 <__ssvfscanf_r+0x60c>
 8032108:	46b2      	mov	sl, r6
 803210a:	e7ad      	b.n	8032068 <__ssvfscanf_r+0x8d4>
 803210c:	20000730 	.word	0x20000730
 8032110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032112:	2b00      	cmp	r3, #0
 8032114:	bf08      	it	eq
 8032116:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 803211a:	f016 0901 	ands.w	r9, r6, #1
 803211e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032120:	f006 0810 	and.w	r8, r6, #16
 8032124:	f000 80ef 	beq.w	8032306 <__ssvfscanf_r+0xb72>
 8032128:	f1b8 0f00 	cmp.w	r8, #0
 803212c:	f040 8098 	bne.w	8032260 <__ssvfscanf_r+0xacc>
 8032130:	462b      	mov	r3, r5
 8032132:	0631      	lsls	r1, r6, #24
 8032134:	f853 5b04 	ldr.w	r5, [r3], #4
 8032138:	613b      	str	r3, [r7, #16]
 803213a:	f140 8099 	bpl.w	8032270 <__ssvfscanf_r+0xadc>
 803213e:	2d00      	cmp	r5, #0
 8032140:	f43f ac23 	beq.w	803198a <__ssvfscanf_r+0x1f6>
 8032144:	2080      	movs	r0, #128	@ 0x80
 8032146:	f7fc fa67 	bl	802e618 <malloc>
 803214a:	4606      	mov	r6, r0
 803214c:	2800      	cmp	r0, #0
 803214e:	f43f acee 	beq.w	8031b2e <__ssvfscanf_r+0x39a>
 8032152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032154:	6028      	str	r0, [r5, #0]
 8032156:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 803215a:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 803215e:	45ca      	cmp	sl, r9
 8032160:	d313      	bcc.n	803218a <__ssvfscanf_r+0x9f6>
 8032162:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8032166:	4599      	cmp	r9, r3
 8032168:	f63f ace1 	bhi.w	8031b2e <__ssvfscanf_r+0x39a>
 803216c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803216e:	f109 0908 	add.w	r9, r9, #8
 8032172:	6818      	ldr	r0, [r3, #0]
 8032174:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8032178:	f002 f86e 	bl	8034258 <realloc>
 803217c:	2800      	cmp	r0, #0
 803217e:	f43f acd6 	beq.w	8031b2e <__ssvfscanf_r+0x39a>
 8032182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032184:	6018      	str	r0, [r3, #0]
 8032186:	f8a3 9004 	strh.w	r9, [r3, #4]
 803218a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803218c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803218e:	681b      	ldr	r3, [r3, #0]
 8032190:	f10a 0201 	add.w	r2, sl, #1
 8032194:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8032198:	80ca      	strh	r2, [r1, #6]
 803219a:	46aa      	mov	sl, r5
 803219c:	f04f 0920 	mov.w	r9, #32
 80321a0:	4635      	mov	r5, r6
 80321a2:	2300      	movs	r3, #0
 80321a4:	6822      	ldr	r2, [r4, #0]
 80321a6:	49a6      	ldr	r1, [pc, #664]	@ (8032440 <__ssvfscanf_r+0xcac>)
 80321a8:	7812      	ldrb	r2, [r2, #0]
 80321aa:	5c8a      	ldrb	r2, [r1, r2]
 80321ac:	0710      	lsls	r0, r2, #28
 80321ae:	d43c      	bmi.n	803222a <__ssvfscanf_r+0xa96>
 80321b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80321b2:	2a00      	cmp	r2, #0
 80321b4:	d039      	beq.n	803222a <__ssvfscanf_r+0xa96>
 80321b6:	60fb      	str	r3, [r7, #12]
 80321b8:	f003 fa8c 	bl	80356d4 <__locale_mb_cur_max>
 80321bc:	68fb      	ldr	r3, [r7, #12]
 80321be:	4298      	cmp	r0, r3
 80321c0:	f43f abaf 	beq.w	8031922 <__ssvfscanf_r+0x18e>
 80321c4:	6822      	ldr	r2, [r4, #0]
 80321c6:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80321ca:	f812 0b01 	ldrb.w	r0, [r2], #1
 80321ce:	54c8      	strb	r0, [r1, r3]
 80321d0:	f103 0b01 	add.w	fp, r3, #1
 80321d4:	6863      	ldr	r3, [r4, #4]
 80321d6:	3b01      	subs	r3, #1
 80321d8:	e9c4 2300 	strd	r2, r3, [r4]
 80321dc:	6a3b      	ldr	r3, [r7, #32]
 80321de:	2b03      	cmp	r3, #3
 80321e0:	d102      	bne.n	80321e8 <__ssvfscanf_r+0xa54>
 80321e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80321e4:	2b04      	cmp	r3, #4
 80321e6:	d005      	beq.n	80321f4 <__ssvfscanf_r+0xa60>
 80321e8:	2208      	movs	r2, #8
 80321ea:	2100      	movs	r1, #0
 80321ec:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80321f0:	f7fa fb06 	bl	802c800 <memset>
 80321f4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80321f8:	9300      	str	r3, [sp, #0]
 80321fa:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80321fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032200:	465b      	mov	r3, fp
 8032202:	4629      	mov	r1, r5
 8032204:	f003 fbfa 	bl	80359fc <_mbrtowc_r>
 8032208:	1c42      	adds	r2, r0, #1
 803220a:	6238      	str	r0, [r7, #32]
 803220c:	f43f ab89 	beq.w	8031922 <__ssvfscanf_r+0x18e>
 8032210:	bb90      	cbnz	r0, 8032278 <__ssvfscanf_r+0xae4>
 8032212:	6028      	str	r0, [r5, #0]
 8032214:	6828      	ldr	r0, [r5, #0]
 8032216:	f003 fc0b 	bl	8035a30 <iswspace>
 803221a:	4603      	mov	r3, r0
 803221c:	2800      	cmp	r0, #0
 803221e:	d047      	beq.n	80322b0 <__ssvfscanf_r+0xb1c>
 8032220:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8032224:	f1bb 0f00 	cmp.w	fp, #0
 8032228:	d139      	bne.n	803229e <__ssvfscanf_r+0xb0a>
 803222a:	f1b8 0f00 	cmp.w	r8, #0
 803222e:	d114      	bne.n	803225a <__ssvfscanf_r+0xac6>
 8032230:	f8c5 8000 	str.w	r8, [r5]
 8032234:	f1ba 0f00 	cmp.w	sl, #0
 8032238:	d00c      	beq.n	8032254 <__ssvfscanf_r+0xac0>
 803223a:	1ba9      	subs	r1, r5, r6
 803223c:	108b      	asrs	r3, r1, #2
 803223e:	3301      	adds	r3, #1
 8032240:	4599      	cmp	r9, r3
 8032242:	d907      	bls.n	8032254 <__ssvfscanf_r+0xac0>
 8032244:	f8da 0000 	ldr.w	r0, [sl]
 8032248:	3104      	adds	r1, #4
 803224a:	f002 f805 	bl	8034258 <realloc>
 803224e:	b108      	cbz	r0, 8032254 <__ssvfscanf_r+0xac0>
 8032250:	f8ca 0000 	str.w	r0, [sl]
 8032254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032256:	3301      	adds	r3, #1
 8032258:	627b      	str	r3, [r7, #36]	@ 0x24
 803225a:	693d      	ldr	r5, [r7, #16]
 803225c:	f7ff baba 	b.w	80317d4 <__ssvfscanf_r+0x40>
 8032260:	f04f 0900 	mov.w	r9, #0
 8032264:	613d      	str	r5, [r7, #16]
 8032266:	464e      	mov	r6, r9
 8032268:	46ca      	mov	sl, r9
 803226a:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 803226e:	e798      	b.n	80321a2 <__ssvfscanf_r+0xa0e>
 8032270:	46c1      	mov	r9, r8
 8032272:	4646      	mov	r6, r8
 8032274:	46c2      	mov	sl, r8
 8032276:	e794      	b.n	80321a2 <__ssvfscanf_r+0xa0e>
 8032278:	6a3b      	ldr	r3, [r7, #32]
 803227a:	3302      	adds	r3, #2
 803227c:	d1ca      	bne.n	8032214 <__ssvfscanf_r+0xa80>
 803227e:	465b      	mov	r3, fp
 8032280:	6862      	ldr	r2, [r4, #4]
 8032282:	2a00      	cmp	r2, #0
 8032284:	dc8e      	bgt.n	80321a4 <__ssvfscanf_r+0xa10>
 8032286:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032288:	60fb      	str	r3, [r7, #12]
 803228a:	4621      	mov	r1, r4
 803228c:	f7fd f8f7 	bl	802f47e <__ssrefill_r>
 8032290:	68fb      	ldr	r3, [r7, #12]
 8032292:	2800      	cmp	r0, #0
 8032294:	d086      	beq.n	80321a4 <__ssvfscanf_r+0xa10>
 8032296:	2b00      	cmp	r3, #0
 8032298:	f47f ab43 	bne.w	8031922 <__ssvfscanf_r+0x18e>
 803229c:	e7c5      	b.n	803222a <__ssvfscanf_r+0xa96>
 803229e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80322a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80322a4:	f813 100b 	ldrb.w	r1, [r3, fp]
 80322a8:	4622      	mov	r2, r4
 80322aa:	f7fd f8ab 	bl	802f404 <_sungetc_r>
 80322ae:	e7b7      	b.n	8032220 <__ssvfscanf_r+0xa8c>
 80322b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80322b2:	445a      	add	r2, fp
 80322b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80322b6:	6a3a      	ldr	r2, [r7, #32]
 80322b8:	2a03      	cmp	r2, #3
 80322ba:	d102      	bne.n	80322c2 <__ssvfscanf_r+0xb2e>
 80322bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80322be:	2a04      	cmp	r2, #4
 80322c0:	d002      	beq.n	80322c8 <__ssvfscanf_r+0xb34>
 80322c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80322c4:	3a01      	subs	r2, #1
 80322c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80322c8:	f1b8 0f00 	cmp.w	r8, #0
 80322cc:	d1d8      	bne.n	8032280 <__ssvfscanf_r+0xaec>
 80322ce:	3504      	adds	r5, #4
 80322d0:	f1ba 0f00 	cmp.w	sl, #0
 80322d4:	d015      	beq.n	8032302 <__ssvfscanf_r+0xb6e>
 80322d6:	eba5 0b06 	sub.w	fp, r5, r6
 80322da:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 80322de:	d80e      	bhi.n	80322fe <__ssvfscanf_r+0xb6a>
 80322e0:	4630      	mov	r0, r6
 80322e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80322e6:	f001 ffb7 	bl	8034258 <realloc>
 80322ea:	4606      	mov	r6, r0
 80322ec:	2800      	cmp	r0, #0
 80322ee:	f43f ac1e 	beq.w	8031b2e <__ssvfscanf_r+0x39a>
 80322f2:	eb00 050b 	add.w	r5, r0, fp
 80322f6:	f8ca 0000 	str.w	r0, [sl]
 80322fa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80322fe:	4643      	mov	r3, r8
 8032300:	e7be      	b.n	8032280 <__ssvfscanf_r+0xaec>
 8032302:	4653      	mov	r3, sl
 8032304:	e7bc      	b.n	8032280 <__ssvfscanf_r+0xaec>
 8032306:	f1b8 0f00 	cmp.w	r8, #0
 803230a:	d01a      	beq.n	8032342 <__ssvfscanf_r+0xbae>
 803230c:	4e4c      	ldr	r6, [pc, #304]	@ (8032440 <__ssvfscanf_r+0xcac>)
 803230e:	6823      	ldr	r3, [r4, #0]
 8032310:	781a      	ldrb	r2, [r3, #0]
 8032312:	5cb2      	ldrb	r2, [r6, r2]
 8032314:	0711      	lsls	r1, r2, #28
 8032316:	d411      	bmi.n	803233c <__ssvfscanf_r+0xba8>
 8032318:	3301      	adds	r3, #1
 803231a:	6862      	ldr	r2, [r4, #4]
 803231c:	6023      	str	r3, [r4, #0]
 803231e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032320:	f109 0901 	add.w	r9, r9, #1
 8032324:	3a01      	subs	r2, #1
 8032326:	4599      	cmp	r9, r3
 8032328:	6062      	str	r2, [r4, #4]
 803232a:	d007      	beq.n	803233c <__ssvfscanf_r+0xba8>
 803232c:	2a00      	cmp	r2, #0
 803232e:	dcee      	bgt.n	803230e <__ssvfscanf_r+0xb7a>
 8032330:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032332:	4621      	mov	r1, r4
 8032334:	f7fd f8a3 	bl	802f47e <__ssrefill_r>
 8032338:	2800      	cmp	r0, #0
 803233a:	d0e8      	beq.n	803230e <__ssvfscanf_r+0xb7a>
 803233c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803233e:	444b      	add	r3, r9
 8032340:	e4d5      	b.n	8031cee <__ssvfscanf_r+0x55a>
 8032342:	46a8      	mov	r8, r5
 8032344:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8032348:	f858 5b04 	ldr.w	r5, [r8], #4
 803234c:	d076      	beq.n	803243c <__ssvfscanf_r+0xca8>
 803234e:	2d00      	cmp	r5, #0
 8032350:	f43f ab1b 	beq.w	803198a <__ssvfscanf_r+0x1f6>
 8032354:	2020      	movs	r0, #32
 8032356:	f7fc f95f 	bl	802e618 <malloc>
 803235a:	4681      	mov	r9, r0
 803235c:	2800      	cmp	r0, #0
 803235e:	f43f aae5 	beq.w	803192c <__ssvfscanf_r+0x198>
 8032362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032364:	6028      	str	r0, [r5, #0]
 8032366:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 803236a:	889e      	ldrh	r6, [r3, #4]
 803236c:	45b2      	cmp	sl, r6
 803236e:	d310      	bcc.n	8032392 <__ssvfscanf_r+0xbfe>
 8032370:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8032374:	429e      	cmp	r6, r3
 8032376:	f200 8373 	bhi.w	8032a60 <__ssvfscanf_r+0x12cc>
 803237a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803237c:	3608      	adds	r6, #8
 803237e:	6818      	ldr	r0, [r3, #0]
 8032380:	00b1      	lsls	r1, r6, #2
 8032382:	f001 ff69 	bl	8034258 <realloc>
 8032386:	2800      	cmp	r0, #0
 8032388:	f000 836a 	beq.w	8032a60 <__ssvfscanf_r+0x12cc>
 803238c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803238e:	6018      	str	r0, [r3, #0]
 8032390:	809e      	strh	r6, [r3, #4]
 8032392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032394:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032396:	681b      	ldr	r3, [r3, #0]
 8032398:	f10a 0201 	add.w	r2, sl, #1
 803239c:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 80323a0:	80ca      	strh	r2, [r1, #6]
 80323a2:	46aa      	mov	sl, r5
 80323a4:	2620      	movs	r6, #32
 80323a6:	464d      	mov	r5, r9
 80323a8:	46a9      	mov	r9, r5
 80323aa:	6823      	ldr	r3, [r4, #0]
 80323ac:	4924      	ldr	r1, [pc, #144]	@ (8032440 <__ssvfscanf_r+0xcac>)
 80323ae:	781a      	ldrb	r2, [r3, #0]
 80323b0:	5c8a      	ldrb	r2, [r1, r2]
 80323b2:	0712      	lsls	r2, r2, #28
 80323b4:	d428      	bmi.n	8032408 <__ssvfscanf_r+0xc74>
 80323b6:	6862      	ldr	r2, [r4, #4]
 80323b8:	3a01      	subs	r2, #1
 80323ba:	6062      	str	r2, [r4, #4]
 80323bc:	1c5a      	adds	r2, r3, #1
 80323be:	6022      	str	r2, [r4, #0]
 80323c0:	781b      	ldrb	r3, [r3, #0]
 80323c2:	f805 3b01 	strb.w	r3, [r5], #1
 80323c6:	f1ba 0f00 	cmp.w	sl, #0
 80323ca:	d010      	beq.n	80323ee <__ssvfscanf_r+0xc5a>
 80323cc:	eba5 0b09 	sub.w	fp, r5, r9
 80323d0:	45b3      	cmp	fp, r6
 80323d2:	d30c      	bcc.n	80323ee <__ssvfscanf_r+0xc5a>
 80323d4:	0076      	lsls	r6, r6, #1
 80323d6:	4648      	mov	r0, r9
 80323d8:	4631      	mov	r1, r6
 80323da:	f001 ff3d 	bl	8034258 <realloc>
 80323de:	4681      	mov	r9, r0
 80323e0:	2800      	cmp	r0, #0
 80323e2:	f43f aaa3 	beq.w	803192c <__ssvfscanf_r+0x198>
 80323e6:	eb00 050b 	add.w	r5, r0, fp
 80323ea:	f8ca 0000 	str.w	r0, [sl]
 80323ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80323f0:	3b01      	subs	r3, #1
 80323f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80323f4:	d008      	beq.n	8032408 <__ssvfscanf_r+0xc74>
 80323f6:	6863      	ldr	r3, [r4, #4]
 80323f8:	2b00      	cmp	r3, #0
 80323fa:	dcd6      	bgt.n	80323aa <__ssvfscanf_r+0xc16>
 80323fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80323fe:	4621      	mov	r1, r4
 8032400:	f7fd f83d 	bl	802f47e <__ssrefill_r>
 8032404:	2800      	cmp	r0, #0
 8032406:	d0d0      	beq.n	80323aa <__ssvfscanf_r+0xc16>
 8032408:	2300      	movs	r3, #0
 803240a:	702b      	strb	r3, [r5, #0]
 803240c:	eba5 0509 	sub.w	r5, r5, r9
 8032410:	f1ba 0f00 	cmp.w	sl, #0
 8032414:	d009      	beq.n	803242a <__ssvfscanf_r+0xc96>
 8032416:	1c69      	adds	r1, r5, #1
 8032418:	428e      	cmp	r6, r1
 803241a:	d906      	bls.n	803242a <__ssvfscanf_r+0xc96>
 803241c:	f8da 0000 	ldr.w	r0, [sl]
 8032420:	f001 ff1a 	bl	8034258 <realloc>
 8032424:	b108      	cbz	r0, 803242a <__ssvfscanf_r+0xc96>
 8032426:	f8ca 0000 	str.w	r0, [sl]
 803242a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803242c:	442b      	add	r3, r5
 803242e:	633b      	str	r3, [r7, #48]	@ 0x30
 8032430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032432:	3301      	adds	r3, #1
 8032434:	627b      	str	r3, [r7, #36]	@ 0x24
 8032436:	4645      	mov	r5, r8
 8032438:	f7ff b9cc 	b.w	80317d4 <__ssvfscanf_r+0x40>
 803243c:	46b2      	mov	sl, r6
 803243e:	e7b3      	b.n	80323a8 <__ssvfscanf_r+0xc14>
 8032440:	0803dff5 	.word	0x0803dff5
 8032444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032446:	3b01      	subs	r3, #1
 8032448:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 803244c:	bf88      	it	hi
 803244e:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8032450:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 8032454:	bf81      	itttt	hi
 8032456:	f46f 76ae 	mvnhi.w	r6, #348	@ 0x15c
 803245a:	eb03 0906 	addhi.w	r9, r3, r6
 803245e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8032462:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 8032464:	bf98      	it	ls
 8032466:	f04f 0900 	movls.w	r9, #0
 803246a:	f04f 0a00 	mov.w	sl, #0
 803246e:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 8032472:	6822      	ldr	r2, [r4, #0]
 8032474:	7813      	ldrb	r3, [r2, #0]
 8032476:	2b39      	cmp	r3, #57	@ 0x39
 8032478:	d80f      	bhi.n	803249a <__ssvfscanf_r+0xd06>
 803247a:	2b2a      	cmp	r3, #42	@ 0x2a
 803247c:	d915      	bls.n	80324aa <__ssvfscanf_r+0xd16>
 803247e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8032482:	290e      	cmp	r1, #14
 8032484:	d811      	bhi.n	80324aa <__ssvfscanf_r+0xd16>
 8032486:	e8df f001 	tbb	[pc, r1]
 803248a:	1084      	.short	0x1084
 803248c:	48101084 	.word	0x48101084
 8032490:	71717171 	.word	0x71717171
 8032494:	79717171 	.word	0x79717171
 8032498:	79          	.byte	0x79
 8032499:	00          	.byte	0x00
 803249a:	2b66      	cmp	r3, #102	@ 0x66
 803249c:	d83b      	bhi.n	8032516 <__ssvfscanf_r+0xd82>
 803249e:	2b60      	cmp	r3, #96	@ 0x60
 80324a0:	d874      	bhi.n	803258c <__ssvfscanf_r+0xdf8>
 80324a2:	2b46      	cmp	r3, #70	@ 0x46
 80324a4:	d829      	bhi.n	80324fa <__ssvfscanf_r+0xd66>
 80324a6:	2b40      	cmp	r3, #64	@ 0x40
 80324a8:	d870      	bhi.n	803258c <__ssvfscanf_r+0xdf8>
 80324aa:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 80324ae:	d011      	beq.n	80324d4 <__ssvfscanf_r+0xd40>
 80324b0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80324b4:	4598      	cmp	r8, r3
 80324b6:	d908      	bls.n	80324ca <__ssvfscanf_r+0xd36>
 80324b8:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 80324bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80324be:	4622      	mov	r2, r4
 80324c0:	f7fc ffa0 	bl	802f404 <_sungetc_r>
 80324c4:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 80324c8:	46c8      	mov	r8, r9
 80324ca:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80324ce:	4598      	cmp	r8, r3
 80324d0:	f43f aa5b 	beq.w	803198a <__ssvfscanf_r+0x1f6>
 80324d4:	f01b 0210 	ands.w	r2, fp, #16
 80324d8:	d171      	bne.n	80325be <__ssvfscanf_r+0xe2a>
 80324da:	69fb      	ldr	r3, [r7, #28]
 80324dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80324de:	69be      	ldr	r6, [r7, #24]
 80324e0:	f888 2000 	strb.w	r2, [r8]
 80324e4:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80324e8:	47b0      	blx	r6
 80324ea:	f01b 0f20 	tst.w	fp, #32
 80324ee:	f105 0904 	add.w	r9, r5, #4
 80324f2:	d05b      	beq.n	80325ac <__ssvfscanf_r+0xe18>
 80324f4:	682b      	ldr	r3, [r5, #0]
 80324f6:	6018      	str	r0, [r3, #0]
 80324f8:	e05d      	b.n	80325b6 <__ssvfscanf_r+0xe22>
 80324fa:	2b58      	cmp	r3, #88	@ 0x58
 80324fc:	d1d5      	bne.n	80324aa <__ssvfscanf_r+0xd16>
 80324fe:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 8032502:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8032506:	d1d0      	bne.n	80324aa <__ssvfscanf_r+0xd16>
 8032508:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 803250c:	2110      	movs	r1, #16
 803250e:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 8032512:	61f9      	str	r1, [r7, #28]
 8032514:	e00f      	b.n	8032536 <__ssvfscanf_r+0xda2>
 8032516:	2b78      	cmp	r3, #120	@ 0x78
 8032518:	e7f0      	b.n	80324fc <__ssvfscanf_r+0xd68>
 803251a:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 803251e:	d00a      	beq.n	8032536 <__ssvfscanf_r+0xda2>
 8032520:	69f9      	ldr	r1, [r7, #28]
 8032522:	b919      	cbnz	r1, 803252c <__ssvfscanf_r+0xd98>
 8032524:	2108      	movs	r1, #8
 8032526:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 803252a:	61f9      	str	r1, [r7, #28]
 803252c:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 8032530:	d004      	beq.n	803253c <__ssvfscanf_r+0xda8>
 8032532:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 8032536:	f808 3b01 	strb.w	r3, [r8], #1
 803253a:	e00b      	b.n	8032554 <__ssvfscanf_r+0xdc0>
 803253c:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 8032540:	f1b9 0f00 	cmp.w	r9, #0
 8032544:	d004      	beq.n	8032550 <__ssvfscanf_r+0xdbc>
 8032546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032548:	3301      	adds	r3, #1
 803254a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 803254e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032550:	f10a 0a01 	add.w	sl, sl, #1
 8032554:	6863      	ldr	r3, [r4, #4]
 8032556:	3b01      	subs	r3, #1
 8032558:	2b00      	cmp	r3, #0
 803255a:	6063      	str	r3, [r4, #4]
 803255c:	dd1f      	ble.n	803259e <__ssvfscanf_r+0xe0a>
 803255e:	3201      	adds	r2, #1
 8032560:	6022      	str	r2, [r4, #0]
 8032562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032564:	3b01      	subs	r3, #1
 8032566:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032568:	d183      	bne.n	8032472 <__ssvfscanf_r+0xcde>
 803256a:	e79e      	b.n	80324aa <__ssvfscanf_r+0xd16>
 803256c:	69f8      	ldr	r0, [r7, #28]
 803256e:	4997      	ldr	r1, [pc, #604]	@ (80327cc <__ssvfscanf_r+0x1038>)
 8032570:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8032574:	61f9      	str	r1, [r7, #28]
 8032576:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 803257a:	e7dc      	b.n	8032536 <__ssvfscanf_r+0xda2>
 803257c:	69f8      	ldr	r0, [r7, #28]
 803257e:	4993      	ldr	r1, [pc, #588]	@ (80327cc <__ssvfscanf_r+0x1038>)
 8032580:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8032584:	61f9      	str	r1, [r7, #28]
 8032586:	2908      	cmp	r1, #8
 8032588:	dcf5      	bgt.n	8032576 <__ssvfscanf_r+0xde2>
 803258a:	e78e      	b.n	80324aa <__ssvfscanf_r+0xd16>
 803258c:	69f9      	ldr	r1, [r7, #28]
 803258e:	290a      	cmp	r1, #10
 8032590:	e7fa      	b.n	8032588 <__ssvfscanf_r+0xdf4>
 8032592:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 8032596:	d088      	beq.n	80324aa <__ssvfscanf_r+0xd16>
 8032598:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 803259c:	e7cb      	b.n	8032536 <__ssvfscanf_r+0xda2>
 803259e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80325a0:	4621      	mov	r1, r4
 80325a2:	f7fc ff6c 	bl	802f47e <__ssrefill_r>
 80325a6:	2800      	cmp	r0, #0
 80325a8:	d0db      	beq.n	8032562 <__ssvfscanf_r+0xdce>
 80325aa:	e77e      	b.n	80324aa <__ssvfscanf_r+0xd16>
 80325ac:	f01b 0f08 	tst.w	fp, #8
 80325b0:	d00b      	beq.n	80325ca <__ssvfscanf_r+0xe36>
 80325b2:	682b      	ldr	r3, [r5, #0]
 80325b4:	7018      	strb	r0, [r3, #0]
 80325b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80325b8:	3301      	adds	r3, #1
 80325ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80325bc:	464d      	mov	r5, r9
 80325be:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80325c2:	eba8 0803 	sub.w	r8, r8, r3
 80325c6:	44d0      	add	r8, sl
 80325c8:	e516      	b.n	8031ff8 <__ssvfscanf_r+0x864>
 80325ca:	f01b 0f04 	tst.w	fp, #4
 80325ce:	d002      	beq.n	80325d6 <__ssvfscanf_r+0xe42>
 80325d0:	682b      	ldr	r3, [r5, #0]
 80325d2:	8018      	strh	r0, [r3, #0]
 80325d4:	e7ef      	b.n	80325b6 <__ssvfscanf_r+0xe22>
 80325d6:	f01b 0201 	ands.w	r2, fp, #1
 80325da:	d18b      	bne.n	80324f4 <__ssvfscanf_r+0xd60>
 80325dc:	f01b 0f02 	tst.w	fp, #2
 80325e0:	d088      	beq.n	80324f4 <__ssvfscanf_r+0xd60>
 80325e2:	4b7b      	ldr	r3, [pc, #492]	@ (80327d0 <__ssvfscanf_r+0x103c>)
 80325e4:	69b9      	ldr	r1, [r7, #24]
 80325e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80325e8:	4299      	cmp	r1, r3
 80325ea:	69fb      	ldr	r3, [r7, #28]
 80325ec:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80325f0:	d105      	bne.n	80325fe <__ssvfscanf_r+0xe6a>
 80325f2:	f003 f9e1 	bl	80359b8 <_strtoull_r>
 80325f6:	682b      	ldr	r3, [r5, #0]
 80325f8:	e9c3 0100 	strd	r0, r1, [r3]
 80325fc:	e7db      	b.n	80325b6 <__ssvfscanf_r+0xe22>
 80325fe:	f003 f933 	bl	8035868 <_strtoll_r>
 8032602:	e7f8      	b.n	80325f6 <__ssvfscanf_r+0xe62>
 8032604:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032606:	f7fb fdc1 	bl	802e18c <_localeconv_r>
 803260a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803260c:	6802      	ldr	r2, [r0, #0]
 803260e:	3b01      	subs	r3, #1
 8032610:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 8032614:	f04f 0800 	mov.w	r8, #0
 8032618:	bf88      	it	hi
 803261a:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 803261c:	f8c7 8010 	str.w	r8, [r7, #16]
 8032620:	e9c7 8802 	strd	r8, r8, [r7, #8]
 8032624:	bf84      	itt	hi
 8032626:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 803262a:	f240 115d 	movwhi	r1, #349	@ 0x15d
 803262e:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 8032632:	bf86      	itte	hi
 8032634:	181b      	addhi	r3, r3, r0
 8032636:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 8032638:	2300      	movls	r3, #0
 803263a:	46c3      	mov	fp, r8
 803263c:	46c2      	mov	sl, r8
 803263e:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 8032642:	6821      	ldr	r1, [r4, #0]
 8032644:	6079      	str	r1, [r7, #4]
 8032646:	7808      	ldrb	r0, [r1, #0]
 8032648:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 803264c:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 8032650:	f200 8124 	bhi.w	803289c <__ssvfscanf_r+0x1108>
 8032654:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8032658:	01220089 	.word	0x01220089
 803265c:	01220089 	.word	0x01220089
 8032660:	004f0122 	.word	0x004f0122
 8032664:	006f006f 	.word	0x006f006f
 8032668:	006f006f 	.word	0x006f006f
 803266c:	006f006f 	.word	0x006f006f
 8032670:	006f006f 	.word	0x006f006f
 8032674:	0122006f 	.word	0x0122006f
 8032678:	01220122 	.word	0x01220122
 803267c:	01220122 	.word	0x01220122
 8032680:	01220122 	.word	0x01220122
 8032684:	006d00af 	.word	0x006d00af
 8032688:	006d006d 	.word	0x006d006d
 803268c:	00ee011f 	.word	0x00ee011f
 8032690:	01220122 	.word	0x01220122
 8032694:	012200d7 	.word	0x012200d7
 8032698:	01220122 	.word	0x01220122
 803269c:	00900122 	.word	0x00900122
 80326a0:	01050122 	.word	0x01050122
 80326a4:	01220122 	.word	0x01220122
 80326a8:	00f90122 	.word	0x00f90122
 80326ac:	01220122 	.word	0x01220122
 80326b0:	00730122 	.word	0x00730122
 80326b4:	012200ff 	.word	0x012200ff
 80326b8:	01220122 	.word	0x01220122
 80326bc:	01220122 	.word	0x01220122
 80326c0:	01220122 	.word	0x01220122
 80326c4:	006d00af 	.word	0x006d00af
 80326c8:	006d006d 	.word	0x006d006d
 80326cc:	00ee011f 	.word	0x00ee011f
 80326d0:	01220122 	.word	0x01220122
 80326d4:	012200d7 	.word	0x012200d7
 80326d8:	01220122 	.word	0x01220122
 80326dc:	00900122 	.word	0x00900122
 80326e0:	01050122 	.word	0x01050122
 80326e4:	01220122 	.word	0x01220122
 80326e8:	00f90122 	.word	0x00f90122
 80326ec:	01220122 	.word	0x01220122
 80326f0:	00730122 	.word	0x00730122
 80326f4:	00ff      	.short	0x00ff
 80326f6:	05f1      	lsls	r1, r6, #23
 80326f8:	d51d      	bpl.n	8032736 <__ssvfscanf_r+0xfa2>
 80326fa:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 80326fe:	f10a 0a01 	add.w	sl, sl, #1
 8032702:	b11b      	cbz	r3, 803270c <__ssvfscanf_r+0xf78>
 8032704:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8032706:	3001      	adds	r0, #1
 8032708:	3b01      	subs	r3, #1
 803270a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 803270c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 803270e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8032710:	3001      	adds	r0, #1
 8032712:	6338      	str	r0, [r7, #48]	@ 0x30
 8032714:	6860      	ldr	r0, [r4, #4]
 8032716:	3801      	subs	r0, #1
 8032718:	3901      	subs	r1, #1
 803271a:	2800      	cmp	r0, #0
 803271c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 803271e:	6060      	str	r0, [r4, #4]
 8032720:	f340 80cd 	ble.w	80328be <__ssvfscanf_r+0x112a>
 8032724:	6879      	ldr	r1, [r7, #4]
 8032726:	3101      	adds	r1, #1
 8032728:	6021      	str	r1, [r4, #0]
 803272a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 803272c:	2900      	cmp	r1, #0
 803272e:	d188      	bne.n	8032642 <__ssvfscanf_r+0xeae>
 8032730:	e053      	b.n	80327da <__ssvfscanf_r+0x1046>
 8032732:	0531      	lsls	r1, r6, #20
 8032734:	d551      	bpl.n	80327da <__ssvfscanf_r+0x1046>
 8032736:	eb1b 0c08 	adds.w	ip, fp, r8
 803273a:	d041      	beq.n	80327c0 <__ssvfscanf_r+0x102c>
 803273c:	e04d      	b.n	80327da <__ssvfscanf_r+0x1046>
 803273e:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 8032742:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 8032746:	d148      	bne.n	80327da <__ssvfscanf_r+0x1046>
 8032748:	f1ba 0f01 	cmp.w	sl, #1
 803274c:	d145      	bne.n	80327da <__ssvfscanf_r+0x1046>
 803274e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8032750:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 8032754:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 8032758:	3901      	subs	r1, #1
 803275a:	f809 cb01 	strb.w	ip, [r9], #1
 803275e:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 8032762:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8032764:	f04f 0a00 	mov.w	sl, #0
 8032768:	e003      	b.n	8032772 <__ssvfscanf_r+0xfde>
 803276a:	0631      	lsls	r1, r6, #24
 803276c:	d535      	bpl.n	80327da <__ssvfscanf_r+0x1046>
 803276e:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8032772:	f809 0b01 	strb.w	r0, [r9], #1
 8032776:	e7c9      	b.n	803270c <__ssvfscanf_r+0xf78>
 8032778:	f1bb 0f00 	cmp.w	fp, #0
 803277c:	d10c      	bne.n	8032798 <__ssvfscanf_r+0x1004>
 803277e:	f1ba 0f00 	cmp.w	sl, #0
 8032782:	d10d      	bne.n	80327a0 <__ssvfscanf_r+0x100c>
 8032784:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 8032788:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 803278c:	d108      	bne.n	80327a0 <__ssvfscanf_r+0x100c>
 803278e:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8032792:	f04f 0b01 	mov.w	fp, #1
 8032796:	e7ec      	b.n	8032772 <__ssvfscanf_r+0xfde>
 8032798:	f1bb 0f02 	cmp.w	fp, #2
 803279c:	f000 8089 	beq.w	80328b2 <__ssvfscanf_r+0x111e>
 80327a0:	f1b8 0f01 	cmp.w	r8, #1
 80327a4:	d002      	beq.n	80327ac <__ssvfscanf_r+0x1018>
 80327a6:	f1b8 0f04 	cmp.w	r8, #4
 80327aa:	d116      	bne.n	80327da <__ssvfscanf_r+0x1046>
 80327ac:	f108 0801 	add.w	r8, r8, #1
 80327b0:	fa5f f888 	uxtb.w	r8, r8
 80327b4:	e7dd      	b.n	8032772 <__ssvfscanf_r+0xfde>
 80327b6:	0531      	lsls	r1, r6, #20
 80327b8:	d50c      	bpl.n	80327d4 <__ssvfscanf_r+0x1040>
 80327ba:	eb1b 0c08 	adds.w	ip, fp, r8
 80327be:	d109      	bne.n	80327d4 <__ssvfscanf_r+0x1040>
 80327c0:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 80327c4:	46e0      	mov	r8, ip
 80327c6:	46e3      	mov	fp, ip
 80327c8:	e7d3      	b.n	8032772 <__ssvfscanf_r+0xfde>
 80327ca:	bf00      	nop
 80327cc:	0803e158 	.word	0x0803e158
 80327d0:	080353d9 	.word	0x080353d9
 80327d4:	f1bb 0f01 	cmp.w	fp, #1
 80327d8:	d06e      	beq.n	80328b8 <__ssvfscanf_r+0x1124>
 80327da:	f1ba 0f00 	cmp.w	sl, #0
 80327de:	d001      	beq.n	80327e4 <__ssvfscanf_r+0x1050>
 80327e0:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 80327e4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80327e8:	f1bb 0f01 	cmp.w	fp, #1
 80327ec:	d873      	bhi.n	80328d6 <__ssvfscanf_r+0x1142>
 80327ee:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 80327f2:	45a9      	cmp	r9, r5
 80327f4:	f67f a8c9 	bls.w	803198a <__ssvfscanf_r+0x1f6>
 80327f8:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80327fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80327fe:	4622      	mov	r2, r4
 8032800:	f7fc fe00 	bl	802f404 <_sungetc_r>
 8032804:	e7f5      	b.n	80327f2 <__ssvfscanf_r+0x105e>
 8032806:	f1b8 0f00 	cmp.w	r8, #0
 803280a:	d10d      	bne.n	8032828 <__ssvfscanf_r+0x1094>
 803280c:	f1ba 0f00 	cmp.w	sl, #0
 8032810:	d1e6      	bne.n	80327e0 <__ssvfscanf_r+0x104c>
 8032812:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 8032816:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 803281a:	f040 8128 	bne.w	8032a6e <__ssvfscanf_r+0x12da>
 803281e:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8032822:	f04f 0801 	mov.w	r8, #1
 8032826:	e7a4      	b.n	8032772 <__ssvfscanf_r+0xfde>
 8032828:	f1b8 0f03 	cmp.w	r8, #3
 803282c:	d0be      	beq.n	80327ac <__ssvfscanf_r+0x1018>
 803282e:	f1b8 0f05 	cmp.w	r8, #5
 8032832:	e7ba      	b.n	80327aa <__ssvfscanf_r+0x1016>
 8032834:	0531      	lsls	r1, r6, #20
 8032836:	d502      	bpl.n	803283e <__ssvfscanf_r+0x10aa>
 8032838:	eb1b 0c08 	adds.w	ip, fp, r8
 803283c:	d0c0      	beq.n	80327c0 <__ssvfscanf_r+0x102c>
 803283e:	f1b8 0f02 	cmp.w	r8, #2
 8032842:	d1ca      	bne.n	80327da <__ssvfscanf_r+0x1046>
 8032844:	f04f 0803 	mov.w	r8, #3
 8032848:	e793      	b.n	8032772 <__ssvfscanf_r+0xfde>
 803284a:	f1b8 0f06 	cmp.w	r8, #6
 803284e:	d1c4      	bne.n	80327da <__ssvfscanf_r+0x1046>
 8032850:	f04f 0807 	mov.w	r8, #7
 8032854:	e78d      	b.n	8032772 <__ssvfscanf_r+0xfde>
 8032856:	f1b8 0f07 	cmp.w	r8, #7
 803285a:	d1be      	bne.n	80327da <__ssvfscanf_r+0x1046>
 803285c:	f04f 0808 	mov.w	r8, #8
 8032860:	e787      	b.n	8032772 <__ssvfscanf_r+0xfde>
 8032862:	0531      	lsls	r1, r6, #20
 8032864:	d5b9      	bpl.n	80327da <__ssvfscanf_r+0x1046>
 8032866:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 803286a:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 803286e:	d005      	beq.n	803287c <__ssvfscanf_r+0x10e8>
 8032870:	0571      	lsls	r1, r6, #21
 8032872:	d5b2      	bpl.n	80327da <__ssvfscanf_r+0x1046>
 8032874:	f1ba 0f00 	cmp.w	sl, #0
 8032878:	f000 80f9 	beq.w	8032a6e <__ssvfscanf_r+0x12da>
 803287c:	05b1      	lsls	r1, r6, #22
 803287e:	bf58      	it	pl
 8032880:	6939      	ldrpl	r1, [r7, #16]
 8032882:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 8032886:	bf5c      	itt	pl
 8032888:	ebaa 0101 	subpl.w	r1, sl, r1
 803288c:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 8032890:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 8032894:	e766      	b.n	8032764 <__ssvfscanf_r+0xfd0>
 8032896:	0531      	lsls	r1, r6, #20
 8032898:	d5e5      	bpl.n	8032866 <__ssvfscanf_r+0x10d2>
 803289a:	e74c      	b.n	8032736 <__ssvfscanf_r+0xfa2>
 803289c:	f892 c000 	ldrb.w	ip, [r2]
 80328a0:	4584      	cmp	ip, r0
 80328a2:	d19a      	bne.n	80327da <__ssvfscanf_r+0x1046>
 80328a4:	05b1      	lsls	r1, r6, #22
 80328a6:	d598      	bpl.n	80327da <__ssvfscanf_r+0x1046>
 80328a8:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 80328ac:	f8c7 a010 	str.w	sl, [r7, #16]
 80328b0:	e75f      	b.n	8032772 <__ssvfscanf_r+0xfde>
 80328b2:	f04f 0b03 	mov.w	fp, #3
 80328b6:	e75c      	b.n	8032772 <__ssvfscanf_r+0xfde>
 80328b8:	f04f 0b02 	mov.w	fp, #2
 80328bc:	e759      	b.n	8032772 <__ssvfscanf_r+0xfde>
 80328be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80328c0:	4621      	mov	r1, r4
 80328c2:	e9c7 2300 	strd	r2, r3, [r7]
 80328c6:	f7fc fdda 	bl	802f47e <__ssrefill_r>
 80328ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80328ce:	2800      	cmp	r0, #0
 80328d0:	f43f af2b 	beq.w	803272a <__ssvfscanf_r+0xf96>
 80328d4:	e781      	b.n	80327da <__ssvfscanf_r+0x1046>
 80328d6:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80328da:	2b06      	cmp	r3, #6
 80328dc:	d827      	bhi.n	803292e <__ssvfscanf_r+0x119a>
 80328de:	f1b8 0f02 	cmp.w	r8, #2
 80328e2:	d834      	bhi.n	803294e <__ssvfscanf_r+0x11ba>
 80328e4:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 80328e8:	45a9      	cmp	r9, r5
 80328ea:	f67f a84e 	bls.w	803198a <__ssvfscanf_r+0x1f6>
 80328ee:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80328f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80328f4:	4622      	mov	r2, r4
 80328f6:	f7fc fd85 	bl	802f404 <_sungetc_r>
 80328fa:	e7f5      	b.n	80328e8 <__ssvfscanf_r+0x1154>
 80328fc:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8032900:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032904:	4622      	mov	r2, r4
 8032906:	f7fc fd7d 	bl	802f404 <_sungetc_r>
 803290a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803290c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8032910:	fa5f fb8b 	uxtb.w	fp, fp
 8032914:	f1bb 0f02 	cmp.w	fp, #2
 8032918:	d1f0      	bne.n	80328fc <__ssvfscanf_r+0x1168>
 803291a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803291c:	f1a8 0803 	sub.w	r8, r8, #3
 8032920:	fa5f f888 	uxtb.w	r8, r8
 8032924:	eba3 0308 	sub.w	r3, r3, r8
 8032928:	eba9 0908 	sub.w	r9, r9, r8
 803292c:	633b      	str	r3, [r7, #48]	@ 0x30
 803292e:	05f3      	lsls	r3, r6, #23
 8032930:	d52d      	bpl.n	803298e <__ssvfscanf_r+0x11fa>
 8032932:	0570      	lsls	r0, r6, #21
 8032934:	d50e      	bpl.n	8032954 <__ssvfscanf_r+0x11c0>
 8032936:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803293a:	45a9      	cmp	r9, r5
 803293c:	f67f a825 	bls.w	803198a <__ssvfscanf_r+0x1f6>
 8032940:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8032944:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032946:	4622      	mov	r2, r4
 8032948:	f7fc fd5c 	bl	802f404 <_sungetc_r>
 803294c:	e7f5      	b.n	803293a <__ssvfscanf_r+0x11a6>
 803294e:	46c3      	mov	fp, r8
 8032950:	464b      	mov	r3, r9
 8032952:	e7db      	b.n	803290c <__ssvfscanf_r+0x1178>
 8032954:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 8032958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803295a:	2965      	cmp	r1, #101	@ 0x65
 803295c:	f109 38ff 	add.w	r8, r9, #4294967295	@ 0xffffffff
 8032960:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8032964:	d00c      	beq.n	8032980 <__ssvfscanf_r+0x11ec>
 8032966:	2945      	cmp	r1, #69	@ 0x45
 8032968:	d00a      	beq.n	8032980 <__ssvfscanf_r+0x11ec>
 803296a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803296c:	4622      	mov	r2, r4
 803296e:	f7fc fd49 	bl	802f404 <_sungetc_r>
 8032972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032974:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 8032978:	f1a9 0802 	sub.w	r8, r9, #2
 803297c:	f1a3 0b02 	sub.w	fp, r3, #2
 8032980:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032982:	4622      	mov	r2, r4
 8032984:	f7fc fd3e 	bl	802f404 <_sungetc_r>
 8032988:	46c1      	mov	r9, r8
 803298a:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 803298e:	f016 0210 	ands.w	r2, r6, #16
 8032992:	f47e af1f 	bne.w	80317d4 <__ssvfscanf_r+0x40>
 8032996:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 803299a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 803299e:	f889 2000 	strb.w	r2, [r9]
 80329a2:	d123      	bne.n	80329ec <__ssvfscanf_r+0x1258>
 80329a4:	693b      	ldr	r3, [r7, #16]
 80329a6:	4553      	cmp	r3, sl
 80329a8:	d00b      	beq.n	80329c2 <__ssvfscanf_r+0x122e>
 80329aa:	eba3 020a 	sub.w	r2, r3, sl
 80329ae:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 80329b2:	4599      	cmp	r9, r3
 80329b4:	bf28      	it	cs
 80329b6:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 80329ba:	492e      	ldr	r1, [pc, #184]	@ (8032a74 <__ssvfscanf_r+0x12e0>)
 80329bc:	4648      	mov	r0, r9
 80329be:	f7f9 fd2b 	bl	802c418 <sprintf>
 80329c2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80329c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80329c8:	2200      	movs	r2, #0
 80329ca:	f002 fc91 	bl	80352f0 <_strtod_r>
 80329ce:	07f1      	lsls	r1, r6, #31
 80329d0:	ec59 8b10 	vmov	r8, r9, d0
 80329d4:	f105 0a04 	add.w	sl, r5, #4
 80329d8:	d516      	bpl.n	8032a08 <__ssvfscanf_r+0x1274>
 80329da:	682b      	ldr	r3, [r5, #0]
 80329dc:	ed83 0b00 	vstr	d0, [r3]
 80329e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80329e2:	3301      	adds	r3, #1
 80329e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80329e6:	4655      	mov	r5, sl
 80329e8:	f7fe bef4 	b.w	80317d4 <__ssvfscanf_r+0x40>
 80329ec:	68fb      	ldr	r3, [r7, #12]
 80329ee:	2b00      	cmp	r3, #0
 80329f0:	d0e7      	beq.n	80329c2 <__ssvfscanf_r+0x122e>
 80329f2:	68b9      	ldr	r1, [r7, #8]
 80329f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80329f6:	230a      	movs	r3, #10
 80329f8:	3101      	adds	r1, #1
 80329fa:	f7f9 fbbd 	bl	802c178 <_strtol_r>
 80329fe:	68fb      	ldr	r3, [r7, #12]
 8032a00:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8032a04:	1ac2      	subs	r2, r0, r3
 8032a06:	e7d2      	b.n	80329ae <__ssvfscanf_r+0x121a>
 8032a08:	07b2      	lsls	r2, r6, #30
 8032a0a:	682d      	ldr	r5, [r5, #0]
 8032a0c:	d502      	bpl.n	8032a14 <__ssvfscanf_r+0x1280>
 8032a0e:	ed85 0b00 	vstr	d0, [r5]
 8032a12:	e7e5      	b.n	80329e0 <__ssvfscanf_r+0x124c>
 8032a14:	4642      	mov	r2, r8
 8032a16:	464b      	mov	r3, r9
 8032a18:	4640      	mov	r0, r8
 8032a1a:	4649      	mov	r1, r9
 8032a1c:	f7de f89e 	bl	8010b5c <__aeabi_dcmpun>
 8032a20:	b128      	cbz	r0, 8032a2e <__ssvfscanf_r+0x129a>
 8032a22:	4815      	ldr	r0, [pc, #84]	@ (8032a78 <__ssvfscanf_r+0x12e4>)
 8032a24:	f003 f85c 	bl	8035ae0 <nanf>
 8032a28:	ed85 0a00 	vstr	s0, [r5]
 8032a2c:	e7d8      	b.n	80329e0 <__ssvfscanf_r+0x124c>
 8032a2e:	4640      	mov	r0, r8
 8032a30:	4649      	mov	r1, r9
 8032a32:	f7de f8f1 	bl	8010c18 <__aeabi_d2f>
 8032a36:	6028      	str	r0, [r5, #0]
 8032a38:	e7d2      	b.n	80329e0 <__ssvfscanf_r+0x124c>
 8032a3a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8032a3e:	6818      	ldr	r0, [r3, #0]
 8032a40:	f7fb fdf2 	bl	802e628 <free>
 8032a44:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8032a48:	3401      	adds	r4, #1
 8032a4a:	601e      	str	r6, [r3, #0]
 8032a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032a4e:	681d      	ldr	r5, [r3, #0]
 8032a50:	88db      	ldrh	r3, [r3, #6]
 8032a52:	42a3      	cmp	r3, r4
 8032a54:	dcf1      	bgt.n	8032a3a <__ssvfscanf_r+0x12a6>
 8032a56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8032a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8032a5c:	f7fe bf9b 	b.w	8031996 <__ssvfscanf_r+0x202>
 8032a60:	2400      	movs	r4, #0
 8032a62:	4626      	mov	r6, r4
 8032a64:	e7f2      	b.n	8032a4c <__ssvfscanf_r+0x12b8>
 8032a66:	f7fb fddf 	bl	802e628 <free>
 8032a6a:	f7fe bf99 	b.w	80319a0 <__ssvfscanf_r+0x20c>
 8032a6e:	f04f 0a00 	mov.w	sl, #0
 8032a72:	e6b7      	b.n	80327e4 <__ssvfscanf_r+0x1050>
 8032a74:	0803dcd9 	.word	0x0803dcd9
 8032a78:	0803dac3 	.word	0x0803dac3
 8032a7c:	00000000 	.word	0x00000000

08032a80 <_vfprintf_r>:
 8032a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032a84:	b0d3      	sub	sp, #332	@ 0x14c
 8032a86:	468a      	mov	sl, r1
 8032a88:	4691      	mov	r9, r2
 8032a8a:	461c      	mov	r4, r3
 8032a8c:	461f      	mov	r7, r3
 8032a8e:	9003      	str	r0, [sp, #12]
 8032a90:	f7fb fb7c 	bl	802e18c <_localeconv_r>
 8032a94:	6803      	ldr	r3, [r0, #0]
 8032a96:	9315      	str	r3, [sp, #84]	@ 0x54
 8032a98:	4618      	mov	r0, r3
 8032a9a:	f7dd fc01 	bl	80102a0 <strlen>
 8032a9e:	9b03      	ldr	r3, [sp, #12]
 8032aa0:	900d      	str	r0, [sp, #52]	@ 0x34
 8032aa2:	b123      	cbz	r3, 8032aae <_vfprintf_r+0x2e>
 8032aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8032aa6:	b913      	cbnz	r3, 8032aae <_vfprintf_r+0x2e>
 8032aa8:	9803      	ldr	r0, [sp, #12]
 8032aaa:	f7f9 fdd5 	bl	802c658 <__sinit>
 8032aae:	f8da 3064 	ldr.w	r3, [sl, #100]	@ 0x64
 8032ab2:	07de      	lsls	r6, r3, #31
 8032ab4:	d407      	bmi.n	8032ac6 <_vfprintf_r+0x46>
 8032ab6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8032aba:	059d      	lsls	r5, r3, #22
 8032abc:	d403      	bmi.n	8032ac6 <_vfprintf_r+0x46>
 8032abe:	f8da 0058 	ldr.w	r0, [sl, #88]	@ 0x58
 8032ac2:	f7fb fc16 	bl	802e2f2 <__retarget_lock_acquire_recursive>
 8032ac6:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8032aca:	0498      	lsls	r0, r3, #18
 8032acc:	d409      	bmi.n	8032ae2 <_vfprintf_r+0x62>
 8032ace:	f8da 2064 	ldr.w	r2, [sl, #100]	@ 0x64
 8032ad2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8032ad6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8032ada:	f8aa 300c 	strh.w	r3, [sl, #12]
 8032ade:	f8ca 2064 	str.w	r2, [sl, #100]	@ 0x64
 8032ae2:	f8da 3064 	ldr.w	r3, [sl, #100]	@ 0x64
 8032ae6:	0499      	lsls	r1, r3, #18
 8032ae8:	d508      	bpl.n	8032afc <_vfprintf_r+0x7c>
 8032aea:	07da      	lsls	r2, r3, #31
 8032aec:	d515      	bpl.n	8032b1a <_vfprintf_r+0x9a>
 8032aee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8032af2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8032af4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8032af6:	b053      	add	sp, #332	@ 0x14c
 8032af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8032afc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8032b00:	071b      	lsls	r3, r3, #28
 8032b02:	d502      	bpl.n	8032b0a <_vfprintf_r+0x8a>
 8032b04:	f8da 3010 	ldr.w	r3, [sl, #16]
 8032b08:	b983      	cbnz	r3, 8032b2c <_vfprintf_r+0xac>
 8032b0a:	9803      	ldr	r0, [sp, #12]
 8032b0c:	4651      	mov	r1, sl
 8032b0e:	f7f9 fdf7 	bl	802c700 <__swsetup_r>
 8032b12:	b158      	cbz	r0, 8032b2c <_vfprintf_r+0xac>
 8032b14:	f8da 3064 	ldr.w	r3, [sl, #100]	@ 0x64
 8032b18:	e7e7      	b.n	8032aea <_vfprintf_r+0x6a>
 8032b1a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8032b1e:	059e      	lsls	r6, r3, #22
 8032b20:	d4e5      	bmi.n	8032aee <_vfprintf_r+0x6e>
 8032b22:	f8da 0058 	ldr.w	r0, [sl, #88]	@ 0x58
 8032b26:	f7fb fbe6 	bl	802e2f6 <__retarget_lock_release_recursive>
 8032b2a:	e7e0      	b.n	8032aee <_vfprintf_r+0x6e>
 8032b2c:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8032b30:	f003 021a 	and.w	r2, r3, #26
 8032b34:	2a0a      	cmp	r2, #10
 8032b36:	d116      	bne.n	8032b66 <_vfprintf_r+0xe6>
 8032b38:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 8032b3c:	2a00      	cmp	r2, #0
 8032b3e:	db12      	blt.n	8032b66 <_vfprintf_r+0xe6>
 8032b40:	f8da 2064 	ldr.w	r2, [sl, #100]	@ 0x64
 8032b44:	07d5      	lsls	r5, r2, #31
 8032b46:	d405      	bmi.n	8032b54 <_vfprintf_r+0xd4>
 8032b48:	0598      	lsls	r0, r3, #22
 8032b4a:	d403      	bmi.n	8032b54 <_vfprintf_r+0xd4>
 8032b4c:	f8da 0058 	ldr.w	r0, [sl, #88]	@ 0x58
 8032b50:	f7fb fbd1 	bl	802e2f6 <__retarget_lock_release_recursive>
 8032b54:	9803      	ldr	r0, [sp, #12]
 8032b56:	4623      	mov	r3, r4
 8032b58:	464a      	mov	r2, r9
 8032b5a:	4651      	mov	r1, sl
 8032b5c:	b053      	add	sp, #332	@ 0x14c
 8032b5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032b62:	f001 b9c3 	b.w	8033eec <__sbprintf>
 8032b66:	ed9f 7b94 	vldr	d7, [pc, #592]	@ 8032db8 <_vfprintf_r+0x338>
 8032b6a:	2300      	movs	r3, #0
 8032b6c:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 8032b70:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8032b74:	ac29      	add	r4, sp, #164	@ 0xa4
 8032b76:	9426      	str	r4, [sp, #152]	@ 0x98
 8032b78:	9304      	str	r3, [sp, #16]
 8032b7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8032b7c:	9317      	str	r3, [sp, #92]	@ 0x5c
 8032b7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8032b80:	9314      	str	r3, [sp, #80]	@ 0x50
 8032b82:	9316      	str	r3, [sp, #88]	@ 0x58
 8032b84:	930f      	str	r3, [sp, #60]	@ 0x3c
 8032b86:	464b      	mov	r3, r9
 8032b88:	461d      	mov	r5, r3
 8032b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8032b8e:	b10a      	cbz	r2, 8032b94 <_vfprintf_r+0x114>
 8032b90:	2a25      	cmp	r2, #37	@ 0x25
 8032b92:	d1f9      	bne.n	8032b88 <_vfprintf_r+0x108>
 8032b94:	ebb5 0609 	subs.w	r6, r5, r9
 8032b98:	d00d      	beq.n	8032bb6 <_vfprintf_r+0x136>
 8032b9a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8032b9c:	4433      	add	r3, r6
 8032b9e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8032ba0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8032ba2:	3301      	adds	r3, #1
 8032ba4:	2b07      	cmp	r3, #7
 8032ba6:	e9c4 9600 	strd	r9, r6, [r4]
 8032baa:	9327      	str	r3, [sp, #156]	@ 0x9c
 8032bac:	dc75      	bgt.n	8032c9a <_vfprintf_r+0x21a>
 8032bae:	3408      	adds	r4, #8
 8032bb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8032bb2:	4433      	add	r3, r6
 8032bb4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8032bb6:	782b      	ldrb	r3, [r5, #0]
 8032bb8:	2b00      	cmp	r3, #0
 8032bba:	f001 8152 	beq.w	8033e62 <_vfprintf_r+0x13e2>
 8032bbe:	2200      	movs	r2, #0
 8032bc0:	1c6b      	adds	r3, r5, #1
 8032bc2:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8032bc6:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8032bca:	920e      	str	r2, [sp, #56]	@ 0x38
 8032bcc:	4615      	mov	r5, r2
 8032bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8032bd2:	9206      	str	r2, [sp, #24]
 8032bd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8032bd6:	9b06      	ldr	r3, [sp, #24]
 8032bd8:	3b20      	subs	r3, #32
 8032bda:	2b5a      	cmp	r3, #90	@ 0x5a
 8032bdc:	f200 85af 	bhi.w	803373e <_vfprintf_r+0xcbe>
 8032be0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8032be4:	05ad009e 	.word	0x05ad009e
 8032be8:	00a605ad 	.word	0x00a605ad
 8032bec:	05ad05ad 	.word	0x05ad05ad
 8032bf0:	008605ad 	.word	0x008605ad
 8032bf4:	05ad05ad 	.word	0x05ad05ad
 8032bf8:	00b300a9 	.word	0x00b300a9
 8032bfc:	00b005ad 	.word	0x00b005ad
 8032c00:	05ad00b5 	.word	0x05ad00b5
 8032c04:	00d300d0 	.word	0x00d300d0
 8032c08:	00d300d3 	.word	0x00d300d3
 8032c0c:	00d300d3 	.word	0x00d300d3
 8032c10:	00d300d3 	.word	0x00d300d3
 8032c14:	00d300d3 	.word	0x00d300d3
 8032c18:	05ad05ad 	.word	0x05ad05ad
 8032c1c:	05ad05ad 	.word	0x05ad05ad
 8032c20:	05ad05ad 	.word	0x05ad05ad
 8032c24:	014b05ad 	.word	0x014b05ad
 8032c28:	010a05ad 	.word	0x010a05ad
 8032c2c:	014b011c 	.word	0x014b011c
 8032c30:	014b014b 	.word	0x014b014b
 8032c34:	05ad05ad 	.word	0x05ad05ad
 8032c38:	05ad05ad 	.word	0x05ad05ad
 8032c3c:	05ad00e6 	.word	0x05ad00e6
 8032c40:	04a505ad 	.word	0x04a505ad
 8032c44:	05ad05ad 	.word	0x05ad05ad
 8032c48:	04ef05ad 	.word	0x04ef05ad
 8032c4c:	050e05ad 	.word	0x050e05ad
 8032c50:	05ad05ad 	.word	0x05ad05ad
 8032c54:	05ad0531 	.word	0x05ad0531
 8032c58:	05ad05ad 	.word	0x05ad05ad
 8032c5c:	05ad05ad 	.word	0x05ad05ad
 8032c60:	05ad05ad 	.word	0x05ad05ad
 8032c64:	014b05ad 	.word	0x014b05ad
 8032c68:	010a05ad 	.word	0x010a05ad
 8032c6c:	014b011e 	.word	0x014b011e
 8032c70:	014b014b 	.word	0x014b014b
 8032c74:	011e00f0 	.word	0x011e00f0
 8032c78:	05ad0104 	.word	0x05ad0104
 8032c7c:	05ad00fd 	.word	0x05ad00fd
 8032c80:	04a70489 	.word	0x04a70489
 8032c84:	010404dd 	.word	0x010404dd
 8032c88:	04ef05ad 	.word	0x04ef05ad
 8032c8c:	0510009c 	.word	0x0510009c
 8032c90:	05ad05ad 	.word	0x05ad05ad
 8032c94:	05ad0065 	.word	0x05ad0065
 8032c98:	009c      	.short	0x009c
 8032c9a:	9803      	ldr	r0, [sp, #12]
 8032c9c:	aa26      	add	r2, sp, #152	@ 0x98
 8032c9e:	4651      	mov	r1, sl
 8032ca0:	f7f9 fa76 	bl	802c190 <__sprint_r>
 8032ca4:	2800      	cmp	r0, #0
 8032ca6:	f040 814f 	bne.w	8032f48 <_vfprintf_r+0x4c8>
 8032caa:	ac29      	add	r4, sp, #164	@ 0xa4
 8032cac:	e780      	b.n	8032bb0 <_vfprintf_r+0x130>
 8032cae:	4b44      	ldr	r3, [pc, #272]	@ (8032dc0 <_vfprintf_r+0x340>)
 8032cb0:	931a      	str	r3, [sp, #104]	@ 0x68
 8032cb2:	f015 0320 	ands.w	r3, r5, #32
 8032cb6:	f000 84c9 	beq.w	803364c <_vfprintf_r+0xbcc>
 8032cba:	3707      	adds	r7, #7
 8032cbc:	f027 0307 	bic.w	r3, r7, #7
 8032cc0:	461a      	mov	r2, r3
 8032cc2:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8032cc6:	f852 7b08 	ldr.w	r7, [r2], #8
 8032cca:	9207      	str	r2, [sp, #28]
 8032ccc:	07eb      	lsls	r3, r5, #31
 8032cce:	d50a      	bpl.n	8032ce6 <_vfprintf_r+0x266>
 8032cd0:	ea57 0308 	orrs.w	r3, r7, r8
 8032cd4:	d007      	beq.n	8032ce6 <_vfprintf_r+0x266>
 8032cd6:	2330      	movs	r3, #48	@ 0x30
 8032cd8:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8032cdc:	9b06      	ldr	r3, [sp, #24]
 8032cde:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8032ce2:	f045 0502 	orr.w	r5, r5, #2
 8032ce6:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8032cea:	2302      	movs	r3, #2
 8032cec:	f000 bc30 	b.w	8033550 <_vfprintf_r+0xad0>
 8032cf0:	9803      	ldr	r0, [sp, #12]
 8032cf2:	f7fb fa4b 	bl	802e18c <_localeconv_r>
 8032cf6:	6843      	ldr	r3, [r0, #4]
 8032cf8:	9316      	str	r3, [sp, #88]	@ 0x58
 8032cfa:	4618      	mov	r0, r3
 8032cfc:	f7dd fad0 	bl	80102a0 <strlen>
 8032d00:	9014      	str	r0, [sp, #80]	@ 0x50
 8032d02:	9803      	ldr	r0, [sp, #12]
 8032d04:	f7fb fa42 	bl	802e18c <_localeconv_r>
 8032d08:	6883      	ldr	r3, [r0, #8]
 8032d0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8032d0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8032d0e:	b12b      	cbz	r3, 8032d1c <_vfprintf_r+0x29c>
 8032d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8032d12:	b11b      	cbz	r3, 8032d1c <_vfprintf_r+0x29c>
 8032d14:	781b      	ldrb	r3, [r3, #0]
 8032d16:	b10b      	cbz	r3, 8032d1c <_vfprintf_r+0x29c>
 8032d18:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8032d1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8032d1e:	e756      	b.n	8032bce <_vfprintf_r+0x14e>
 8032d20:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8032d24:	2b00      	cmp	r3, #0
 8032d26:	d1f9      	bne.n	8032d1c <_vfprintf_r+0x29c>
 8032d28:	2320      	movs	r3, #32
 8032d2a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8032d2e:	e7f5      	b.n	8032d1c <_vfprintf_r+0x29c>
 8032d30:	f045 0501 	orr.w	r5, r5, #1
 8032d34:	e7f2      	b.n	8032d1c <_vfprintf_r+0x29c>
 8032d36:	f857 3b04 	ldr.w	r3, [r7], #4
 8032d3a:	930e      	str	r3, [sp, #56]	@ 0x38
 8032d3c:	2b00      	cmp	r3, #0
 8032d3e:	daed      	bge.n	8032d1c <_vfprintf_r+0x29c>
 8032d40:	425b      	negs	r3, r3
 8032d42:	930e      	str	r3, [sp, #56]	@ 0x38
 8032d44:	f045 0504 	orr.w	r5, r5, #4
 8032d48:	e7e8      	b.n	8032d1c <_vfprintf_r+0x29c>
 8032d4a:	232b      	movs	r3, #43	@ 0x2b
 8032d4c:	e7ed      	b.n	8032d2a <_vfprintf_r+0x2aa>
 8032d4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8032d50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8032d54:	9206      	str	r2, [sp, #24]
 8032d56:	2a2a      	cmp	r2, #42	@ 0x2a
 8032d58:	d111      	bne.n	8032d7e <_vfprintf_r+0x2fe>
 8032d5a:	f857 6b04 	ldr.w	r6, [r7], #4
 8032d5e:	930c      	str	r3, [sp, #48]	@ 0x30
 8032d60:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 8032d64:	e7da      	b.n	8032d1c <_vfprintf_r+0x29c>
 8032d66:	fb01 2606 	mla	r6, r1, r6, r2
 8032d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8032d6e:	9206      	str	r2, [sp, #24]
 8032d70:	9a06      	ldr	r2, [sp, #24]
 8032d72:	3a30      	subs	r2, #48	@ 0x30
 8032d74:	2a09      	cmp	r2, #9
 8032d76:	d9f6      	bls.n	8032d66 <_vfprintf_r+0x2e6>
 8032d78:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 8032d7c:	e72a      	b.n	8032bd4 <_vfprintf_r+0x154>
 8032d7e:	2600      	movs	r6, #0
 8032d80:	210a      	movs	r1, #10
 8032d82:	e7f5      	b.n	8032d70 <_vfprintf_r+0x2f0>
 8032d84:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8032d88:	e7c8      	b.n	8032d1c <_vfprintf_r+0x29c>
 8032d8a:	2300      	movs	r3, #0
 8032d8c:	930e      	str	r3, [sp, #56]	@ 0x38
 8032d8e:	220a      	movs	r2, #10
 8032d90:	9b06      	ldr	r3, [sp, #24]
 8032d92:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8032d94:	3b30      	subs	r3, #48	@ 0x30
 8032d96:	fb02 3301 	mla	r3, r2, r1, r3
 8032d9a:	930e      	str	r3, [sp, #56]	@ 0x38
 8032d9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8032d9e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8032da2:	930c      	str	r3, [sp, #48]	@ 0x30
 8032da4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8032da8:	2b09      	cmp	r3, #9
 8032daa:	9106      	str	r1, [sp, #24]
 8032dac:	d9f0      	bls.n	8032d90 <_vfprintf_r+0x310>
 8032dae:	e712      	b.n	8032bd6 <_vfprintf_r+0x156>
 8032db0:	f045 0508 	orr.w	r5, r5, #8
 8032db4:	e7b2      	b.n	8032d1c <_vfprintf_r+0x29c>
 8032db6:	bf00      	nop
	...
 8032dc0:	0803dad5 	.word	0x0803dad5
 8032dc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8032dc6:	781b      	ldrb	r3, [r3, #0]
 8032dc8:	2b68      	cmp	r3, #104	@ 0x68
 8032dca:	bf01      	itttt	eq
 8032dcc:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8032dce:	3301      	addeq	r3, #1
 8032dd0:	930c      	streq	r3, [sp, #48]	@ 0x30
 8032dd2:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 8032dd6:	bf18      	it	ne
 8032dd8:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8032ddc:	e79e      	b.n	8032d1c <_vfprintf_r+0x29c>
 8032dde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8032de0:	781b      	ldrb	r3, [r3, #0]
 8032de2:	2b6c      	cmp	r3, #108	@ 0x6c
 8032de4:	d105      	bne.n	8032df2 <_vfprintf_r+0x372>
 8032de6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8032de8:	3301      	adds	r3, #1
 8032dea:	930c      	str	r3, [sp, #48]	@ 0x30
 8032dec:	f045 0520 	orr.w	r5, r5, #32
 8032df0:	e794      	b.n	8032d1c <_vfprintf_r+0x29c>
 8032df2:	f045 0510 	orr.w	r5, r5, #16
 8032df6:	e791      	b.n	8032d1c <_vfprintf_r+0x29c>
 8032df8:	463a      	mov	r2, r7
 8032dfa:	f852 3b04 	ldr.w	r3, [r2], #4
 8032dfe:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8032e02:	2300      	movs	r3, #0
 8032e04:	9207      	str	r2, [sp, #28]
 8032e06:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8032e0a:	469b      	mov	fp, r3
 8032e0c:	2601      	movs	r6, #1
 8032e0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8032e10:	4698      	mov	r8, r3
 8032e12:	9308      	str	r3, [sp, #32]
 8032e14:	461f      	mov	r7, r3
 8032e16:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8032e1a:	e1c0      	b.n	803319e <_vfprintf_r+0x71e>
 8032e1c:	f045 0510 	orr.w	r5, r5, #16
 8032e20:	06a9      	lsls	r1, r5, #26
 8032e22:	d514      	bpl.n	8032e4e <_vfprintf_r+0x3ce>
 8032e24:	3707      	adds	r7, #7
 8032e26:	f027 0307 	bic.w	r3, r7, #7
 8032e2a:	461a      	mov	r2, r3
 8032e2c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8032e30:	f852 7b08 	ldr.w	r7, [r2], #8
 8032e34:	9207      	str	r2, [sp, #28]
 8032e36:	f1b8 0f00 	cmp.w	r8, #0
 8032e3a:	da06      	bge.n	8032e4a <_vfprintf_r+0x3ca>
 8032e3c:	427f      	negs	r7, r7
 8032e3e:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8032e42:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
 8032e46:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8032e4a:	2301      	movs	r3, #1
 8032e4c:	e383      	b.n	8033556 <_vfprintf_r+0xad6>
 8032e4e:	463a      	mov	r2, r7
 8032e50:	f852 3b04 	ldr.w	r3, [r2], #4
 8032e54:	9207      	str	r2, [sp, #28]
 8032e56:	06ea      	lsls	r2, r5, #27
 8032e58:	d503      	bpl.n	8032e62 <_vfprintf_r+0x3e2>
 8032e5a:	461f      	mov	r7, r3
 8032e5c:	ea4f 78e3 	mov.w	r8, r3, asr #31
 8032e60:	e7e9      	b.n	8032e36 <_vfprintf_r+0x3b6>
 8032e62:	066f      	lsls	r7, r5, #25
 8032e64:	d503      	bpl.n	8032e6e <_vfprintf_r+0x3ee>
 8032e66:	b21f      	sxth	r7, r3
 8032e68:	f343 38c0 	sbfx	r8, r3, #15, #1
 8032e6c:	e7e3      	b.n	8032e36 <_vfprintf_r+0x3b6>
 8032e6e:	05a8      	lsls	r0, r5, #22
 8032e70:	d5f3      	bpl.n	8032e5a <_vfprintf_r+0x3da>
 8032e72:	b25f      	sxtb	r7, r3
 8032e74:	f343 18c0 	sbfx	r8, r3, #7, #1
 8032e78:	e7dd      	b.n	8032e36 <_vfprintf_r+0x3b6>
 8032e7a:	3707      	adds	r7, #7
 8032e7c:	f027 0307 	bic.w	r3, r7, #7
 8032e80:	ecb3 7b02 	vldmia	r3!, {d7}
 8032e84:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8032e88:	9307      	str	r3, [sp, #28]
 8032e8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8032e8c:	9318      	str	r3, [sp, #96]	@ 0x60
 8032e8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8032e90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8032e94:	9319      	str	r3, [sp, #100]	@ 0x64
 8032e96:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8032e9a:	4b74      	ldr	r3, [pc, #464]	@ (803306c <_vfprintf_r+0x5ec>)
 8032e9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8032ea0:	f7dd fe5c 	bl	8010b5c <__aeabi_dcmpun>
 8032ea4:	bb08      	cbnz	r0, 8032eea <_vfprintf_r+0x46a>
 8032ea6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8032eaa:	4b70      	ldr	r3, [pc, #448]	@ (803306c <_vfprintf_r+0x5ec>)
 8032eac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8032eb0:	f7dd fe36 	bl	8010b20 <__aeabi_dcmple>
 8032eb4:	b9c8      	cbnz	r0, 8032eea <_vfprintf_r+0x46a>
 8032eb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8032eba:	2200      	movs	r2, #0
 8032ebc:	2300      	movs	r3, #0
 8032ebe:	f7dd fe25 	bl	8010b0c <__aeabi_dcmplt>
 8032ec2:	b110      	cbz	r0, 8032eca <_vfprintf_r+0x44a>
 8032ec4:	232d      	movs	r3, #45	@ 0x2d
 8032ec6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8032eca:	4a69      	ldr	r2, [pc, #420]	@ (8033070 <_vfprintf_r+0x5f0>)
 8032ecc:	4b69      	ldr	r3, [pc, #420]	@ (8033074 <_vfprintf_r+0x5f4>)
 8032ece:	9906      	ldr	r1, [sp, #24]
 8032ed0:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8032ed4:	2947      	cmp	r1, #71	@ 0x47
 8032ed6:	bfcc      	ite	gt
 8032ed8:	4691      	movgt	r9, r2
 8032eda:	4699      	movle	r9, r3
 8032edc:	f04f 0b00 	mov.w	fp, #0
 8032ee0:	2603      	movs	r6, #3
 8032ee2:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8032ee6:	f000 bff7 	b.w	8033ed8 <_vfprintf_r+0x1458>
 8032eea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8032eee:	4610      	mov	r0, r2
 8032ef0:	4619      	mov	r1, r3
 8032ef2:	f7dd fe33 	bl	8010b5c <__aeabi_dcmpun>
 8032ef6:	4683      	mov	fp, r0
 8032ef8:	b140      	cbz	r0, 8032f0c <_vfprintf_r+0x48c>
 8032efa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8032efc:	4a5e      	ldr	r2, [pc, #376]	@ (8033078 <_vfprintf_r+0x5f8>)
 8032efe:	2b00      	cmp	r3, #0
 8032f00:	bfbc      	itt	lt
 8032f02:	232d      	movlt	r3, #45	@ 0x2d
 8032f04:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 8032f08:	4b5c      	ldr	r3, [pc, #368]	@ (803307c <_vfprintf_r+0x5fc>)
 8032f0a:	e7e0      	b.n	8032ece <_vfprintf_r+0x44e>
 8032f0c:	9b06      	ldr	r3, [sp, #24]
 8032f0e:	2b61      	cmp	r3, #97	@ 0x61
 8032f10:	d02c      	beq.n	8032f6c <_vfprintf_r+0x4ec>
 8032f12:	2b41      	cmp	r3, #65	@ 0x41
 8032f14:	d12c      	bne.n	8032f70 <_vfprintf_r+0x4f0>
 8032f16:	2358      	movs	r3, #88	@ 0x58
 8032f18:	2230      	movs	r2, #48	@ 0x30
 8032f1a:	2e63      	cmp	r6, #99	@ 0x63
 8032f1c:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8032f20:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8032f24:	f045 0502 	orr.w	r5, r5, #2
 8032f28:	f340 808b 	ble.w	8033042 <_vfprintf_r+0x5c2>
 8032f2c:	9803      	ldr	r0, [sp, #12]
 8032f2e:	1c71      	adds	r1, r6, #1
 8032f30:	f7fb fb82 	bl	802e638 <_malloc_r>
 8032f34:	4681      	mov	r9, r0
 8032f36:	2800      	cmp	r0, #0
 8032f38:	f040 8088 	bne.w	803304c <_vfprintf_r+0x5cc>
 8032f3c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8032f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8032f44:	f8aa 300c 	strh.w	r3, [sl, #12]
 8032f48:	f8da 3064 	ldr.w	r3, [sl, #100]	@ 0x64
 8032f4c:	07d9      	lsls	r1, r3, #31
 8032f4e:	d407      	bmi.n	8032f60 <_vfprintf_r+0x4e0>
 8032f50:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8032f54:	059a      	lsls	r2, r3, #22
 8032f56:	d403      	bmi.n	8032f60 <_vfprintf_r+0x4e0>
 8032f58:	f8da 0058 	ldr.w	r0, [sl, #88]	@ 0x58
 8032f5c:	f7fb f9cb 	bl	802e2f6 <__retarget_lock_release_recursive>
 8032f60:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8032f64:	065b      	lsls	r3, r3, #25
 8032f66:	f57f adc5 	bpl.w	8032af4 <_vfprintf_r+0x74>
 8032f6a:	e5c0      	b.n	8032aee <_vfprintf_r+0x6e>
 8032f6c:	2378      	movs	r3, #120	@ 0x78
 8032f6e:	e7d3      	b.n	8032f18 <_vfprintf_r+0x498>
 8032f70:	1c71      	adds	r1, r6, #1
 8032f72:	d06d      	beq.n	8033050 <_vfprintf_r+0x5d0>
 8032f74:	9b06      	ldr	r3, [sp, #24]
 8032f76:	f023 0320 	bic.w	r3, r3, #32
 8032f7a:	2b47      	cmp	r3, #71	@ 0x47
 8032f7c:	d101      	bne.n	8032f82 <_vfprintf_r+0x502>
 8032f7e:	2e00      	cmp	r6, #0
 8032f80:	d068      	beq.n	8033054 <_vfprintf_r+0x5d4>
 8032f82:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8032f86:	9310      	str	r3, [sp, #64]	@ 0x40
 8032f88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8032f8a:	2b00      	cmp	r3, #0
 8032f8c:	da65      	bge.n	803305a <_vfprintf_r+0x5da>
 8032f8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8032f90:	9312      	str	r3, [sp, #72]	@ 0x48
 8032f92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8032f94:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8032f98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8032f9a:	232d      	movs	r3, #45	@ 0x2d
 8032f9c:	9311      	str	r3, [sp, #68]	@ 0x44
 8032f9e:	9b06      	ldr	r3, [sp, #24]
 8032fa0:	f023 0820 	bic.w	r8, r3, #32
 8032fa4:	f1b8 0f41 	cmp.w	r8, #65	@ 0x41
 8032fa8:	f040 81dd 	bne.w	8033366 <_vfprintf_r+0x8e6>
 8032fac:	a820      	add	r0, sp, #128	@ 0x80
 8032fae:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 8032fb2:	f002 fd9b 	bl	8035aec <frexp>
 8032fb6:	2200      	movs	r2, #0
 8032fb8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8032fbc:	ec51 0b10 	vmov	r0, r1, d0
 8032fc0:	f7dd fb32 	bl	8010628 <__aeabi_dmul>
 8032fc4:	4602      	mov	r2, r0
 8032fc6:	460b      	mov	r3, r1
 8032fc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8032fcc:	2200      	movs	r2, #0
 8032fce:	2300      	movs	r3, #0
 8032fd0:	f7dd fd92 	bl	8010af8 <__aeabi_dcmpeq>
 8032fd4:	b108      	cbz	r0, 8032fda <_vfprintf_r+0x55a>
 8032fd6:	2301      	movs	r3, #1
 8032fd8:	9320      	str	r3, [sp, #128]	@ 0x80
 8032fda:	4a29      	ldr	r2, [pc, #164]	@ (8033080 <_vfprintf_r+0x600>)
 8032fdc:	4b29      	ldr	r3, [pc, #164]	@ (8033084 <_vfprintf_r+0x604>)
 8032fde:	9906      	ldr	r1, [sp, #24]
 8032fe0:	3e01      	subs	r6, #1
 8032fe2:	2961      	cmp	r1, #97	@ 0x61
 8032fe4:	bf14      	ite	ne
 8032fe6:	4690      	movne	r8, r2
 8032fe8:	4698      	moveq	r8, r3
 8032fea:	464f      	mov	r7, r9
 8032fec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8032ff0:	4b25      	ldr	r3, [pc, #148]	@ (8033088 <_vfprintf_r+0x608>)
 8032ff2:	2200      	movs	r2, #0
 8032ff4:	f7dd fb18 	bl	8010628 <__aeabi_dmul>
 8032ff8:	4602      	mov	r2, r0
 8032ffa:	460b      	mov	r3, r1
 8032ffc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8033000:	f7dd fdc2 	bl	8010b88 <__aeabi_d2iz>
 8033004:	9008      	str	r0, [sp, #32]
 8033006:	f7dd faa5 	bl	8010554 <__aeabi_i2d>
 803300a:	4602      	mov	r2, r0
 803300c:	460b      	mov	r3, r1
 803300e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8033012:	f7dd f951 	bl	80102b8 <__aeabi_dsub>
 8033016:	4602      	mov	r2, r0
 8033018:	460b      	mov	r3, r1
 803301a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 803301e:	9b08      	ldr	r3, [sp, #32]
 8033020:	1c72      	adds	r2, r6, #1
 8033022:	f818 3003 	ldrb.w	r3, [r8, r3]
 8033026:	f807 3b01 	strb.w	r3, [r7], #1
 803302a:	d02f      	beq.n	803308c <_vfprintf_r+0x60c>
 803302c:	1e73      	subs	r3, r6, #1
 803302e:	9308      	str	r3, [sp, #32]
 8033030:	2200      	movs	r2, #0
 8033032:	2300      	movs	r3, #0
 8033034:	f7dd fd60 	bl	8010af8 <__aeabi_dcmpeq>
 8033038:	b1a8      	cbz	r0, 8033066 <_vfprintf_r+0x5e6>
 803303a:	463b      	mov	r3, r7
 803303c:	19b9      	adds	r1, r7, r6
 803303e:	2030      	movs	r0, #48	@ 0x30
 8033040:	e188      	b.n	8033354 <_vfprintf_r+0x8d4>
 8033042:	f04f 0b00 	mov.w	fp, #0
 8033046:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 803304a:	e79a      	b.n	8032f82 <_vfprintf_r+0x502>
 803304c:	4683      	mov	fp, r0
 803304e:	e798      	b.n	8032f82 <_vfprintf_r+0x502>
 8033050:	2606      	movs	r6, #6
 8033052:	e796      	b.n	8032f82 <_vfprintf_r+0x502>
 8033054:	46b3      	mov	fp, r6
 8033056:	2601      	movs	r6, #1
 8033058:	e793      	b.n	8032f82 <_vfprintf_r+0x502>
 803305a:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 803305e:	2300      	movs	r3, #0
 8033060:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 8033064:	e79a      	b.n	8032f9c <_vfprintf_r+0x51c>
 8033066:	9e08      	ldr	r6, [sp, #32]
 8033068:	e7c0      	b.n	8032fec <_vfprintf_r+0x56c>
 803306a:	bf00      	nop
 803306c:	7fefffff 	.word	0x7fefffff
 8033070:	0803dccb 	.word	0x0803dccb
 8033074:	0803dcc7 	.word	0x0803dcc7
 8033078:	0803dcd3 	.word	0x0803dcd3
 803307c:	0803dccf 	.word	0x0803dccf
 8033080:	0803dac4 	.word	0x0803dac4
 8033084:	0803dad5 	.word	0x0803dad5
 8033088:	40300000 	.word	0x40300000
 803308c:	4ba9      	ldr	r3, [pc, #676]	@ (8033334 <_vfprintf_r+0x8b4>)
 803308e:	2200      	movs	r2, #0
 8033090:	f7dd fd5a 	bl	8010b48 <__aeabi_dcmpgt>
 8033094:	b950      	cbnz	r0, 80330ac <_vfprintf_r+0x62c>
 8033096:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803309a:	4ba6      	ldr	r3, [pc, #664]	@ (8033334 <_vfprintf_r+0x8b4>)
 803309c:	2200      	movs	r2, #0
 803309e:	f7dd fd2b 	bl	8010af8 <__aeabi_dcmpeq>
 80330a2:	2800      	cmp	r0, #0
 80330a4:	d0c9      	beq.n	803303a <_vfprintf_r+0x5ba>
 80330a6:	9b08      	ldr	r3, [sp, #32]
 80330a8:	07db      	lsls	r3, r3, #31
 80330aa:	d5c6      	bpl.n	803303a <_vfprintf_r+0x5ba>
 80330ac:	f898 100f 	ldrb.w	r1, [r8, #15]
 80330b0:	9724      	str	r7, [sp, #144]	@ 0x90
 80330b2:	2030      	movs	r0, #48	@ 0x30
 80330b4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80330b6:	1e53      	subs	r3, r2, #1
 80330b8:	9324      	str	r3, [sp, #144]	@ 0x90
 80330ba:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80330be:	428b      	cmp	r3, r1
 80330c0:	f000 8143 	beq.w	803334a <_vfprintf_r+0x8ca>
 80330c4:	2b39      	cmp	r3, #57	@ 0x39
 80330c6:	bf16      	itet	ne
 80330c8:	3301      	addne	r3, #1
 80330ca:	f898 300a 	ldrbeq.w	r3, [r8, #10]
 80330ce:	b2db      	uxtbne	r3, r3
 80330d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80330d4:	eba7 0309 	sub.w	r3, r7, r9
 80330d8:	9304      	str	r3, [sp, #16]
 80330da:	9906      	ldr	r1, [sp, #24]
 80330dc:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80330e0:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80330e2:	f021 0120 	bic.w	r1, r1, #32
 80330e6:	2941      	cmp	r1, #65	@ 0x41
 80330e8:	bf08      	it	eq
 80330ea:	320f      	addeq	r2, #15
 80330ec:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80330f0:	bf06      	itte	eq
 80330f2:	b2d2      	uxtbeq	r2, r2
 80330f4:	2101      	moveq	r1, #1
 80330f6:	2100      	movne	r1, #0
 80330f8:	2b00      	cmp	r3, #0
 80330fa:	9320      	str	r3, [sp, #128]	@ 0x80
 80330fc:	bfb8      	it	lt
 80330fe:	f1c0 0301 	rsblt	r3, r0, #1
 8033102:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 8033106:	bfb4      	ite	lt
 8033108:	222d      	movlt	r2, #45	@ 0x2d
 803310a:	222b      	movge	r2, #43	@ 0x2b
 803310c:	2b09      	cmp	r3, #9
 803310e:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8033112:	f340 8199 	ble.w	8033448 <_vfprintf_r+0x9c8>
 8033116:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 803311a:	270a      	movs	r7, #10
 803311c:	4602      	mov	r2, r0
 803311e:	fbb3 f6f7 	udiv	r6, r3, r7
 8033122:	fb07 3116 	mls	r1, r7, r6, r3
 8033126:	3130      	adds	r1, #48	@ 0x30
 8033128:	f802 1c01 	strb.w	r1, [r2, #-1]
 803312c:	4619      	mov	r1, r3
 803312e:	2963      	cmp	r1, #99	@ 0x63
 8033130:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8033134:	4633      	mov	r3, r6
 8033136:	dcf1      	bgt.n	803311c <_vfprintf_r+0x69c>
 8033138:	3330      	adds	r3, #48	@ 0x30
 803313a:	1e91      	subs	r1, r2, #2
 803313c:	f800 3c01 	strb.w	r3, [r0, #-1]
 8033140:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8033144:	460b      	mov	r3, r1
 8033146:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 803314a:	4283      	cmp	r3, r0
 803314c:	f0c0 8177 	bcc.w	803343e <_vfprintf_r+0x9be>
 8033150:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8033154:	1a9b      	subs	r3, r3, r2
 8033156:	4281      	cmp	r1, r0
 8033158:	bf88      	it	hi
 803315a:	2300      	movhi	r3, #0
 803315c:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8033160:	441a      	add	r2, r3
 8033162:	ab22      	add	r3, sp, #136	@ 0x88
 8033164:	1ad3      	subs	r3, r2, r3
 8033166:	9317      	str	r3, [sp, #92]	@ 0x5c
 8033168:	9b04      	ldr	r3, [sp, #16]
 803316a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 803316c:	2b01      	cmp	r3, #1
 803316e:	eb03 0602 	add.w	r6, r3, r2
 8033172:	dc01      	bgt.n	8033178 <_vfprintf_r+0x6f8>
 8033174:	07ea      	lsls	r2, r5, #31
 8033176:	d501      	bpl.n	803317c <_vfprintf_r+0x6fc>
 8033178:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803317a:	441e      	add	r6, r3
 803317c:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8033180:	f04f 0800 	mov.w	r8, #0
 8033184:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8033188:	9310      	str	r3, [sp, #64]	@ 0x40
 803318a:	f8cd 8020 	str.w	r8, [sp, #32]
 803318e:	4647      	mov	r7, r8
 8033190:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8033192:	2b00      	cmp	r3, #0
 8033194:	f040 81ab 	bne.w	80334ee <_vfprintf_r+0xa6e>
 8033198:	2300      	movs	r3, #0
 803319a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 803319c:	9310      	str	r3, [sp, #64]	@ 0x40
 803319e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80331a0:	42b3      	cmp	r3, r6
 80331a2:	bfb8      	it	lt
 80331a4:	4633      	movlt	r3, r6
 80331a6:	9311      	str	r3, [sp, #68]	@ 0x44
 80331a8:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 80331ac:	b113      	cbz	r3, 80331b4 <_vfprintf_r+0x734>
 80331ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80331b0:	3301      	adds	r3, #1
 80331b2:	9311      	str	r3, [sp, #68]	@ 0x44
 80331b4:	f015 0302 	ands.w	r3, r5, #2
 80331b8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80331ba:	bf1e      	ittt	ne
 80331bc:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 80331be:	3302      	addne	r3, #2
 80331c0:	9311      	strne	r3, [sp, #68]	@ 0x44
 80331c2:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 80331c6:	931c      	str	r3, [sp, #112]	@ 0x70
 80331c8:	d120      	bne.n	803320c <_vfprintf_r+0x78c>
 80331ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80331cc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80331ce:	1a9b      	subs	r3, r3, r2
 80331d0:	2b00      	cmp	r3, #0
 80331d2:	dd1b      	ble.n	803320c <_vfprintf_r+0x78c>
 80331d4:	e9dd 2c27 	ldrd	r2, ip, [sp, #156]	@ 0x9c
 80331d8:	4957      	ldr	r1, [pc, #348]	@ (8033338 <_vfprintf_r+0x8b8>)
 80331da:	6021      	str	r1, [r4, #0]
 80331dc:	2b10      	cmp	r3, #16
 80331de:	f102 0201 	add.w	r2, r2, #1
 80331e2:	f104 0008 	add.w	r0, r4, #8
 80331e6:	f300 82b6 	bgt.w	8033756 <_vfprintf_r+0xcd6>
 80331ea:	eb0c 0103 	add.w	r1, ip, r3
 80331ee:	2a07      	cmp	r2, #7
 80331f0:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 80331f4:	6063      	str	r3, [r4, #4]
 80331f6:	f340 82c3 	ble.w	8033780 <_vfprintf_r+0xd00>
 80331fa:	9803      	ldr	r0, [sp, #12]
 80331fc:	aa26      	add	r2, sp, #152	@ 0x98
 80331fe:	4651      	mov	r1, sl
 8033200:	f7f8 ffc6 	bl	802c190 <__sprint_r>
 8033204:	2800      	cmp	r0, #0
 8033206:	f040 860a 	bne.w	8033e1e <_vfprintf_r+0x139e>
 803320a:	ac29      	add	r4, sp, #164	@ 0xa4
 803320c:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8033210:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033212:	b16a      	cbz	r2, 8033230 <_vfprintf_r+0x7b0>
 8033214:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8033218:	6022      	str	r2, [r4, #0]
 803321a:	2201      	movs	r2, #1
 803321c:	4413      	add	r3, r2
 803321e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033220:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033222:	6062      	str	r2, [r4, #4]
 8033224:	4413      	add	r3, r2
 8033226:	2b07      	cmp	r3, #7
 8033228:	9327      	str	r3, [sp, #156]	@ 0x9c
 803322a:	f300 82ab 	bgt.w	8033784 <_vfprintf_r+0xd04>
 803322e:	3408      	adds	r4, #8
 8033230:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8033232:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033234:	b162      	cbz	r2, 8033250 <_vfprintf_r+0x7d0>
 8033236:	aa1f      	add	r2, sp, #124	@ 0x7c
 8033238:	6022      	str	r2, [r4, #0]
 803323a:	2202      	movs	r2, #2
 803323c:	4413      	add	r3, r2
 803323e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033240:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033242:	6062      	str	r2, [r4, #4]
 8033244:	3301      	adds	r3, #1
 8033246:	2b07      	cmp	r3, #7
 8033248:	9327      	str	r3, [sp, #156]	@ 0x9c
 803324a:	f300 82a5 	bgt.w	8033798 <_vfprintf_r+0xd18>
 803324e:	3408      	adds	r4, #8
 8033250:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8033252:	2b80      	cmp	r3, #128	@ 0x80
 8033254:	d120      	bne.n	8033298 <_vfprintf_r+0x818>
 8033256:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8033258:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803325a:	1a9b      	subs	r3, r3, r2
 803325c:	2b00      	cmp	r3, #0
 803325e:	dd1b      	ble.n	8033298 <_vfprintf_r+0x818>
 8033260:	e9dd 2c27 	ldrd	r2, ip, [sp, #156]	@ 0x9c
 8033264:	4935      	ldr	r1, [pc, #212]	@ (803333c <_vfprintf_r+0x8bc>)
 8033266:	6021      	str	r1, [r4, #0]
 8033268:	2b10      	cmp	r3, #16
 803326a:	f102 0201 	add.w	r2, r2, #1
 803326e:	f104 0008 	add.w	r0, r4, #8
 8033272:	f300 829b 	bgt.w	80337ac <_vfprintf_r+0xd2c>
 8033276:	eb0c 0103 	add.w	r1, ip, r3
 803327a:	2a07      	cmp	r2, #7
 803327c:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 8033280:	6063      	str	r3, [r4, #4]
 8033282:	f340 82a8 	ble.w	80337d6 <_vfprintf_r+0xd56>
 8033286:	9803      	ldr	r0, [sp, #12]
 8033288:	aa26      	add	r2, sp, #152	@ 0x98
 803328a:	4651      	mov	r1, sl
 803328c:	f7f8 ff80 	bl	802c190 <__sprint_r>
 8033290:	2800      	cmp	r0, #0
 8033292:	f040 85c4 	bne.w	8033e1e <_vfprintf_r+0x139e>
 8033296:	ac29      	add	r4, sp, #164	@ 0xa4
 8033298:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803329a:	1b9b      	subs	r3, r3, r6
 803329c:	2b00      	cmp	r3, #0
 803329e:	9310      	str	r3, [sp, #64]	@ 0x40
 80332a0:	dd1c      	ble.n	80332dc <_vfprintf_r+0x85c>
 80332a2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80332a4:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80332a8:	2810      	cmp	r0, #16
 80332aa:	4824      	ldr	r0, [pc, #144]	@ (803333c <_vfprintf_r+0x8bc>)
 80332ac:	6020      	str	r0, [r4, #0]
 80332ae:	f102 0201 	add.w	r2, r2, #1
 80332b2:	f104 0108 	add.w	r1, r4, #8
 80332b6:	f300 8290 	bgt.w	80337da <_vfprintf_r+0xd5a>
 80332ba:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80332bc:	6060      	str	r0, [r4, #4]
 80332be:	4403      	add	r3, r0
 80332c0:	2a07      	cmp	r2, #7
 80332c2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80332c6:	f340 829d 	ble.w	8033804 <_vfprintf_r+0xd84>
 80332ca:	9803      	ldr	r0, [sp, #12]
 80332cc:	aa26      	add	r2, sp, #152	@ 0x98
 80332ce:	4651      	mov	r1, sl
 80332d0:	f7f8 ff5e 	bl	802c190 <__sprint_r>
 80332d4:	2800      	cmp	r0, #0
 80332d6:	f040 85a2 	bne.w	8033e1e <_vfprintf_r+0x139e>
 80332da:	ac29      	add	r4, sp, #164	@ 0xa4
 80332dc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80332de:	9310      	str	r3, [sp, #64]	@ 0x40
 80332e0:	05e8      	lsls	r0, r5, #23
 80332e2:	f100 8295 	bmi.w	8033810 <_vfprintf_r+0xd90>
 80332e6:	e9c4 9600 	strd	r9, r6, [r4]
 80332ea:	441e      	add	r6, r3
 80332ec:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80332ee:	9628      	str	r6, [sp, #160]	@ 0xa0
 80332f0:	3301      	adds	r3, #1
 80332f2:	2b07      	cmp	r3, #7
 80332f4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80332f6:	f300 82d1 	bgt.w	803389c <_vfprintf_r+0xe1c>
 80332fa:	3408      	adds	r4, #8
 80332fc:	0768      	lsls	r0, r5, #29
 80332fe:	f100 8570 	bmi.w	8033de2 <_vfprintf_r+0x1362>
 8033302:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8033306:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8033308:	428a      	cmp	r2, r1
 803330a:	bfac      	ite	ge
 803330c:	189b      	addge	r3, r3, r2
 803330e:	185b      	addlt	r3, r3, r1
 8033310:	930f      	str	r3, [sp, #60]	@ 0x3c
 8033312:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033314:	b13b      	cbz	r3, 8033326 <_vfprintf_r+0x8a6>
 8033316:	9803      	ldr	r0, [sp, #12]
 8033318:	aa26      	add	r2, sp, #152	@ 0x98
 803331a:	4651      	mov	r1, sl
 803331c:	f7f8 ff38 	bl	802c190 <__sprint_r>
 8033320:	2800      	cmp	r0, #0
 8033322:	f040 857c 	bne.w	8033e1e <_vfprintf_r+0x139e>
 8033326:	2300      	movs	r3, #0
 8033328:	9327      	str	r3, [sp, #156]	@ 0x9c
 803332a:	f1bb 0f00 	cmp.w	fp, #0
 803332e:	f040 8592 	bne.w	8033e56 <_vfprintf_r+0x13d6>
 8033332:	e005      	b.n	8033340 <_vfprintf_r+0x8c0>
 8033334:	3fe00000 	.word	0x3fe00000
 8033338:	0803e18a 	.word	0x0803e18a
 803333c:	0803e17a 	.word	0x0803e17a
 8033340:	9f07      	ldr	r7, [sp, #28]
 8033342:	ac29      	add	r4, sp, #164	@ 0xa4
 8033344:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8033348:	e41d      	b.n	8032b86 <_vfprintf_r+0x106>
 803334a:	f802 0c01 	strb.w	r0, [r2, #-1]
 803334e:	e6b1      	b.n	80330b4 <_vfprintf_r+0x634>
 8033350:	f803 0b01 	strb.w	r0, [r3], #1
 8033354:	1aca      	subs	r2, r1, r3
 8033356:	2a00      	cmp	r2, #0
 8033358:	dafa      	bge.n	8033350 <_vfprintf_r+0x8d0>
 803335a:	1c73      	adds	r3, r6, #1
 803335c:	3601      	adds	r6, #1
 803335e:	bfb8      	it	lt
 8033360:	2300      	movlt	r3, #0
 8033362:	441f      	add	r7, r3
 8033364:	e6b6      	b.n	80330d4 <_vfprintf_r+0x654>
 8033366:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 803336a:	d005      	beq.n	8033378 <_vfprintf_r+0x8f8>
 803336c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8033370:	d12f      	bne.n	80333d2 <_vfprintf_r+0x952>
 8033372:	1c77      	adds	r7, r6, #1
 8033374:	2102      	movs	r1, #2
 8033376:	e001      	b.n	803337c <_vfprintf_r+0x8fc>
 8033378:	4637      	mov	r7, r6
 803337a:	2103      	movs	r1, #3
 803337c:	ab24      	add	r3, sp, #144	@ 0x90
 803337e:	9301      	str	r3, [sp, #4]
 8033380:	ab21      	add	r3, sp, #132	@ 0x84
 8033382:	9300      	str	r3, [sp, #0]
 8033384:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 8033388:	9803      	ldr	r0, [sp, #12]
 803338a:	ab20      	add	r3, sp, #128	@ 0x80
 803338c:	463a      	mov	r2, r7
 803338e:	f002 fc6b 	bl	8035c68 <_dtoa_r>
 8033392:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8033396:	4681      	mov	r9, r0
 8033398:	d132      	bne.n	8033400 <_vfprintf_r+0x980>
 803339a:	07e8      	lsls	r0, r5, #31
 803339c:	d41b      	bmi.n	80333d6 <_vfprintf_r+0x956>
 803339e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80333a0:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 80333a2:	eba3 0309 	sub.w	r3, r3, r9
 80333a6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80333aa:	9304      	str	r3, [sp, #16]
 80333ac:	d03f      	beq.n	803342e <_vfprintf_r+0x9ae>
 80333ae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80333b2:	f47f ae92 	bne.w	80330da <_vfprintf_r+0x65a>
 80333b6:	f005 0301 	and.w	r3, r5, #1
 80333ba:	2f00      	cmp	r7, #0
 80333bc:	ea43 0306 	orr.w	r3, r3, r6
 80333c0:	dd5c      	ble.n	803347c <_vfprintf_r+0x9fc>
 80333c2:	2b00      	cmp	r3, #0
 80333c4:	d064      	beq.n	8033490 <_vfprintf_r+0xa10>
 80333c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80333c8:	18fb      	adds	r3, r7, r3
 80333ca:	441e      	add	r6, r3
 80333cc:	2366      	movs	r3, #102	@ 0x66
 80333ce:	9306      	str	r3, [sp, #24]
 80333d0:	e063      	b.n	803349a <_vfprintf_r+0xa1a>
 80333d2:	4637      	mov	r7, r6
 80333d4:	e7ce      	b.n	8033374 <_vfprintf_r+0x8f4>
 80333d6:	eb09 0307 	add.w	r3, r9, r7
 80333da:	9304      	str	r3, [sp, #16]
 80333dc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	@ 0x48
 80333e0:	2200      	movs	r2, #0
 80333e2:	2300      	movs	r3, #0
 80333e4:	f7dd fb88 	bl	8010af8 <__aeabi_dcmpeq>
 80333e8:	b108      	cbz	r0, 80333ee <_vfprintf_r+0x96e>
 80333ea:	9b04      	ldr	r3, [sp, #16]
 80333ec:	9324      	str	r3, [sp, #144]	@ 0x90
 80333ee:	2230      	movs	r2, #48	@ 0x30
 80333f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80333f2:	9904      	ldr	r1, [sp, #16]
 80333f4:	4299      	cmp	r1, r3
 80333f6:	d9d2      	bls.n	803339e <_vfprintf_r+0x91e>
 80333f8:	1c59      	adds	r1, r3, #1
 80333fa:	9124      	str	r1, [sp, #144]	@ 0x90
 80333fc:	701a      	strb	r2, [r3, #0]
 80333fe:	e7f7      	b.n	80333f0 <_vfprintf_r+0x970>
 8033400:	19c3      	adds	r3, r0, r7
 8033402:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8033406:	9304      	str	r3, [sp, #16]
 8033408:	d1e8      	bne.n	80333dc <_vfprintf_r+0x95c>
 803340a:	7803      	ldrb	r3, [r0, #0]
 803340c:	2b30      	cmp	r3, #48	@ 0x30
 803340e:	d109      	bne.n	8033424 <_vfprintf_r+0x9a4>
 8033410:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	@ 0x48
 8033414:	2200      	movs	r2, #0
 8033416:	2300      	movs	r3, #0
 8033418:	f7dd fb6e 	bl	8010af8 <__aeabi_dcmpeq>
 803341c:	b910      	cbnz	r0, 8033424 <_vfprintf_r+0x9a4>
 803341e:	f1c7 0701 	rsb	r7, r7, #1
 8033422:	9720      	str	r7, [sp, #128]	@ 0x80
 8033424:	9a04      	ldr	r2, [sp, #16]
 8033426:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8033428:	441a      	add	r2, r3
 803342a:	9204      	str	r2, [sp, #16]
 803342c:	e7d6      	b.n	80333dc <_vfprintf_r+0x95c>
 803342e:	1cf9      	adds	r1, r7, #3
 8033430:	db01      	blt.n	8033436 <_vfprintf_r+0x9b6>
 8033432:	42be      	cmp	r6, r7
 8033434:	da15      	bge.n	8033462 <_vfprintf_r+0x9e2>
 8033436:	9b06      	ldr	r3, [sp, #24]
 8033438:	3b02      	subs	r3, #2
 803343a:	9306      	str	r3, [sp, #24]
 803343c:	e64d      	b.n	80330da <_vfprintf_r+0x65a>
 803343e:	f813 7b01 	ldrb.w	r7, [r3], #1
 8033442:	f806 7f01 	strb.w	r7, [r6, #1]!
 8033446:	e680      	b.n	803314a <_vfprintf_r+0x6ca>
 8033448:	b941      	cbnz	r1, 803345c <_vfprintf_r+0x9dc>
 803344a:	2230      	movs	r2, #48	@ 0x30
 803344c:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8033450:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8033454:	3330      	adds	r3, #48	@ 0x30
 8033456:	f802 3b01 	strb.w	r3, [r2], #1
 803345a:	e682      	b.n	8033162 <_vfprintf_r+0x6e2>
 803345c:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8033460:	e7f8      	b.n	8033454 <_vfprintf_r+0x9d4>
 8033462:	9b04      	ldr	r3, [sp, #16]
 8033464:	42bb      	cmp	r3, r7
 8033466:	dd0d      	ble.n	8033484 <_vfprintf_r+0xa04>
 8033468:	9b04      	ldr	r3, [sp, #16]
 803346a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803346c:	2f00      	cmp	r7, #0
 803346e:	eb03 0602 	add.w	r6, r3, r2
 8033472:	dc0b      	bgt.n	803348c <_vfprintf_r+0xa0c>
 8033474:	f1c7 0301 	rsb	r3, r7, #1
 8033478:	441e      	add	r6, r3
 803347a:	e007      	b.n	803348c <_vfprintf_r+0xa0c>
 803347c:	b153      	cbz	r3, 8033494 <_vfprintf_r+0xa14>
 803347e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8033480:	3301      	adds	r3, #1
 8033482:	e7a2      	b.n	80333ca <_vfprintf_r+0x94a>
 8033484:	07eb      	lsls	r3, r5, #31
 8033486:	d51d      	bpl.n	80334c4 <_vfprintf_r+0xa44>
 8033488:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803348a:	18fe      	adds	r6, r7, r3
 803348c:	2367      	movs	r3, #103	@ 0x67
 803348e:	e79e      	b.n	80333ce <_vfprintf_r+0x94e>
 8033490:	463e      	mov	r6, r7
 8033492:	e79b      	b.n	80333cc <_vfprintf_r+0x94c>
 8033494:	2366      	movs	r3, #102	@ 0x66
 8033496:	9306      	str	r3, [sp, #24]
 8033498:	2601      	movs	r6, #1
 803349a:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 803349e:	9308      	str	r3, [sp, #32]
 80334a0:	d022      	beq.n	80334e8 <_vfprintf_r+0xa68>
 80334a2:	f04f 0800 	mov.w	r8, #0
 80334a6:	2f00      	cmp	r7, #0
 80334a8:	f8cd 8020 	str.w	r8, [sp, #32]
 80334ac:	f77f ae70 	ble.w	8033190 <_vfprintf_r+0x710>
 80334b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80334b2:	781b      	ldrb	r3, [r3, #0]
 80334b4:	2bff      	cmp	r3, #255	@ 0xff
 80334b6:	d107      	bne.n	80334c8 <_vfprintf_r+0xa48>
 80334b8:	9b08      	ldr	r3, [sp, #32]
 80334ba:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80334bc:	4443      	add	r3, r8
 80334be:	fb02 6603 	mla	r6, r2, r3, r6
 80334c2:	e665      	b.n	8033190 <_vfprintf_r+0x710>
 80334c4:	463e      	mov	r6, r7
 80334c6:	e7e1      	b.n	803348c <_vfprintf_r+0xa0c>
 80334c8:	42bb      	cmp	r3, r7
 80334ca:	daf5      	bge.n	80334b8 <_vfprintf_r+0xa38>
 80334cc:	1aff      	subs	r7, r7, r3
 80334ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80334d0:	785b      	ldrb	r3, [r3, #1]
 80334d2:	b133      	cbz	r3, 80334e2 <_vfprintf_r+0xa62>
 80334d4:	9b08      	ldr	r3, [sp, #32]
 80334d6:	3301      	adds	r3, #1
 80334d8:	9308      	str	r3, [sp, #32]
 80334da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80334dc:	3301      	adds	r3, #1
 80334de:	9309      	str	r3, [sp, #36]	@ 0x24
 80334e0:	e7e6      	b.n	80334b0 <_vfprintf_r+0xa30>
 80334e2:	f108 0801 	add.w	r8, r8, #1
 80334e6:	e7e3      	b.n	80334b0 <_vfprintf_r+0xa30>
 80334e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80334ec:	e650      	b.n	8033190 <_vfprintf_r+0x710>
 80334ee:	232d      	movs	r3, #45	@ 0x2d
 80334f0:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80334f4:	e650      	b.n	8033198 <_vfprintf_r+0x718>
 80334f6:	06ae      	lsls	r6, r5, #26
 80334f8:	d507      	bpl.n	803350a <_vfprintf_r+0xa8a>
 80334fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80334fc:	683b      	ldr	r3, [r7, #0]
 80334fe:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8033500:	17d2      	asrs	r2, r2, #31
 8033502:	e9c3 1200 	strd	r1, r2, [r3]
 8033506:	3704      	adds	r7, #4
 8033508:	e71c      	b.n	8033344 <_vfprintf_r+0x8c4>
 803350a:	06e8      	lsls	r0, r5, #27
 803350c:	d503      	bpl.n	8033516 <_vfprintf_r+0xa96>
 803350e:	683b      	ldr	r3, [r7, #0]
 8033510:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8033512:	601a      	str	r2, [r3, #0]
 8033514:	e7f7      	b.n	8033506 <_vfprintf_r+0xa86>
 8033516:	0669      	lsls	r1, r5, #25
 8033518:	d503      	bpl.n	8033522 <_vfprintf_r+0xaa2>
 803351a:	683b      	ldr	r3, [r7, #0]
 803351c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803351e:	801a      	strh	r2, [r3, #0]
 8033520:	e7f1      	b.n	8033506 <_vfprintf_r+0xa86>
 8033522:	05aa      	lsls	r2, r5, #22
 8033524:	d5f3      	bpl.n	803350e <_vfprintf_r+0xa8e>
 8033526:	683b      	ldr	r3, [r7, #0]
 8033528:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803352a:	701a      	strb	r2, [r3, #0]
 803352c:	e7eb      	b.n	8033506 <_vfprintf_r+0xa86>
 803352e:	f045 0510 	orr.w	r5, r5, #16
 8033532:	f015 0320 	ands.w	r3, r5, #32
 8033536:	d01f      	beq.n	8033578 <_vfprintf_r+0xaf8>
 8033538:	3707      	adds	r7, #7
 803353a:	f027 0307 	bic.w	r3, r7, #7
 803353e:	461a      	mov	r2, r3
 8033540:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8033544:	f852 7b08 	ldr.w	r7, [r2], #8
 8033548:	9207      	str	r2, [sp, #28]
 803354a:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 803354e:	2300      	movs	r3, #0
 8033550:	2200      	movs	r2, #0
 8033552:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8033556:	2e00      	cmp	r6, #0
 8033558:	f2c0 8492 	blt.w	8033e80 <_vfprintf_r+0x1400>
 803355c:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8033560:	9208      	str	r2, [sp, #32]
 8033562:	ea57 0208 	orrs.w	r2, r7, r8
 8033566:	f040 8490 	bne.w	8033e8a <_vfprintf_r+0x140a>
 803356a:	2e00      	cmp	r6, #0
 803356c:	f000 80df 	beq.w	803372e <_vfprintf_r+0xcae>
 8033570:	2b01      	cmp	r3, #1
 8033572:	f040 848d 	bne.w	8033e90 <_vfprintf_r+0x1410>
 8033576:	e083      	b.n	8033680 <_vfprintf_r+0xc00>
 8033578:	463a      	mov	r2, r7
 803357a:	f015 0810 	ands.w	r8, r5, #16
 803357e:	f852 7b04 	ldr.w	r7, [r2], #4
 8033582:	9207      	str	r2, [sp, #28]
 8033584:	d001      	beq.n	803358a <_vfprintf_r+0xb0a>
 8033586:	4698      	mov	r8, r3
 8033588:	e7df      	b.n	803354a <_vfprintf_r+0xaca>
 803358a:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 803358e:	d001      	beq.n	8033594 <_vfprintf_r+0xb14>
 8033590:	b2bf      	uxth	r7, r7
 8033592:	e7da      	b.n	803354a <_vfprintf_r+0xaca>
 8033594:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 8033598:	d0d7      	beq.n	803354a <_vfprintf_r+0xaca>
 803359a:	b2ff      	uxtb	r7, r7
 803359c:	e7f3      	b.n	8033586 <_vfprintf_r+0xb06>
 803359e:	463b      	mov	r3, r7
 80335a0:	2278      	movs	r2, #120	@ 0x78
 80335a2:	f853 7b04 	ldr.w	r7, [r3], #4
 80335a6:	9307      	str	r3, [sp, #28]
 80335a8:	f647 0330 	movw	r3, #30768	@ 0x7830
 80335ac:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 80335b0:	4b95      	ldr	r3, [pc, #596]	@ (8033808 <_vfprintf_r+0xd88>)
 80335b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80335b4:	f04f 0800 	mov.w	r8, #0
 80335b8:	f045 0502 	orr.w	r5, r5, #2
 80335bc:	2302      	movs	r3, #2
 80335be:	9206      	str	r2, [sp, #24]
 80335c0:	e7c6      	b.n	8033550 <_vfprintf_r+0xad0>
 80335c2:	463b      	mov	r3, r7
 80335c4:	2700      	movs	r7, #0
 80335c6:	f853 9b04 	ldr.w	r9, [r3], #4
 80335ca:	9307      	str	r3, [sp, #28]
 80335cc:	42be      	cmp	r6, r7
 80335ce:	f88d 707b 	strb.w	r7, [sp, #123]	@ 0x7b
 80335d2:	db0f      	blt.n	80335f4 <_vfprintf_r+0xb74>
 80335d4:	4632      	mov	r2, r6
 80335d6:	4639      	mov	r1, r7
 80335d8:	4648      	mov	r0, r9
 80335da:	f7dc fe11 	bl	8010200 <memchr>
 80335de:	4683      	mov	fp, r0
 80335e0:	2800      	cmp	r0, #0
 80335e2:	f43f ac7e 	beq.w	8032ee2 <_vfprintf_r+0x462>
 80335e6:	eba0 0609 	sub.w	r6, r0, r9
 80335ea:	46bb      	mov	fp, r7
 80335ec:	9710      	str	r7, [sp, #64]	@ 0x40
 80335ee:	46b8      	mov	r8, r7
 80335f0:	9708      	str	r7, [sp, #32]
 80335f2:	e5d4      	b.n	803319e <_vfprintf_r+0x71e>
 80335f4:	4648      	mov	r0, r9
 80335f6:	f7dc fe53 	bl	80102a0 <strlen>
 80335fa:	46bb      	mov	fp, r7
 80335fc:	4606      	mov	r6, r0
 80335fe:	e470      	b.n	8032ee2 <_vfprintf_r+0x462>
 8033600:	f045 0510 	orr.w	r5, r5, #16
 8033604:	f015 0320 	ands.w	r3, r5, #32
 8033608:	d00a      	beq.n	8033620 <_vfprintf_r+0xba0>
 803360a:	3707      	adds	r7, #7
 803360c:	f027 0307 	bic.w	r3, r7, #7
 8033610:	461a      	mov	r2, r3
 8033612:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8033616:	f852 7b08 	ldr.w	r7, [r2], #8
 803361a:	9207      	str	r2, [sp, #28]
 803361c:	2301      	movs	r3, #1
 803361e:	e797      	b.n	8033550 <_vfprintf_r+0xad0>
 8033620:	463a      	mov	r2, r7
 8033622:	f015 0810 	ands.w	r8, r5, #16
 8033626:	f852 7b04 	ldr.w	r7, [r2], #4
 803362a:	9207      	str	r2, [sp, #28]
 803362c:	d001      	beq.n	8033632 <_vfprintf_r+0xbb2>
 803362e:	4698      	mov	r8, r3
 8033630:	e7f4      	b.n	803361c <_vfprintf_r+0xb9c>
 8033632:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8033636:	d001      	beq.n	803363c <_vfprintf_r+0xbbc>
 8033638:	b2bf      	uxth	r7, r7
 803363a:	e7ef      	b.n	803361c <_vfprintf_r+0xb9c>
 803363c:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 8033640:	d0ec      	beq.n	803361c <_vfprintf_r+0xb9c>
 8033642:	b2ff      	uxtb	r7, r7
 8033644:	e7f3      	b.n	803362e <_vfprintf_r+0xbae>
 8033646:	4b71      	ldr	r3, [pc, #452]	@ (803380c <_vfprintf_r+0xd8c>)
 8033648:	f7ff bb32 	b.w	8032cb0 <_vfprintf_r+0x230>
 803364c:	463a      	mov	r2, r7
 803364e:	f015 0810 	ands.w	r8, r5, #16
 8033652:	f852 7b04 	ldr.w	r7, [r2], #4
 8033656:	9207      	str	r2, [sp, #28]
 8033658:	d002      	beq.n	8033660 <_vfprintf_r+0xbe0>
 803365a:	4698      	mov	r8, r3
 803365c:	f7ff bb36 	b.w	8032ccc <_vfprintf_r+0x24c>
 8033660:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8033664:	d002      	beq.n	803366c <_vfprintf_r+0xbec>
 8033666:	b2bf      	uxth	r7, r7
 8033668:	f7ff bb30 	b.w	8032ccc <_vfprintf_r+0x24c>
 803366c:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 8033670:	f43f ab2c 	beq.w	8032ccc <_vfprintf_r+0x24c>
 8033674:	b2ff      	uxtb	r7, r7
 8033676:	e7f0      	b.n	803365a <_vfprintf_r+0xbda>
 8033678:	2f0a      	cmp	r7, #10
 803367a:	f178 0300 	sbcs.w	r3, r8, #0
 803367e:	d207      	bcs.n	8033690 <_vfprintf_r+0xc10>
 8033680:	3730      	adds	r7, #48	@ 0x30
 8033682:	b2ff      	uxtb	r7, r7
 8033684:	f88d 7147 	strb.w	r7, [sp, #327]	@ 0x147
 8033688:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 803368c:	f000 bc1d 	b.w	8033eca <_vfprintf_r+0x144a>
 8033690:	2300      	movs	r3, #0
 8033692:	9304      	str	r3, [sp, #16]
 8033694:	9b08      	ldr	r3, [sp, #32]
 8033696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 803369a:	ad52      	add	r5, sp, #328	@ 0x148
 803369c:	9310      	str	r3, [sp, #64]	@ 0x40
 803369e:	220a      	movs	r2, #10
 80336a0:	2300      	movs	r3, #0
 80336a2:	4638      	mov	r0, r7
 80336a4:	4641      	mov	r1, r8
 80336a6:	f7dd fb57 	bl	8010d58 <__aeabi_uldivmod>
 80336aa:	3230      	adds	r2, #48	@ 0x30
 80336ac:	f805 2c01 	strb.w	r2, [r5, #-1]
 80336b0:	9a04      	ldr	r2, [sp, #16]
 80336b2:	3201      	adds	r2, #1
 80336b4:	9204      	str	r2, [sp, #16]
 80336b6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80336b8:	4603      	mov	r3, r0
 80336ba:	468b      	mov	fp, r1
 80336bc:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80336c0:	b30a      	cbz	r2, 8033706 <_vfprintf_r+0xc86>
 80336c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80336c4:	9904      	ldr	r1, [sp, #16]
 80336c6:	7812      	ldrb	r2, [r2, #0]
 80336c8:	4291      	cmp	r1, r2
 80336ca:	d11c      	bne.n	8033706 <_vfprintf_r+0xc86>
 80336cc:	29ff      	cmp	r1, #255	@ 0xff
 80336ce:	d01a      	beq.n	8033706 <_vfprintf_r+0xc86>
 80336d0:	2f0a      	cmp	r7, #10
 80336d2:	f178 0800 	sbcs.w	r8, r8, #0
 80336d6:	f0c0 83f8 	bcc.w	8033eca <_vfprintf_r+0x144a>
 80336da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80336dc:	9004      	str	r0, [sp, #16]
 80336de:	eba9 0903 	sub.w	r9, r9, r3
 80336e2:	461a      	mov	r2, r3
 80336e4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80336e6:	4648      	mov	r0, r9
 80336e8:	f7f9 f8d1 	bl	802c88e <strncpy>
 80336ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80336ee:	785a      	ldrb	r2, [r3, #1]
 80336f0:	9b04      	ldr	r3, [sp, #16]
 80336f2:	b11a      	cbz	r2, 80336fc <_vfprintf_r+0xc7c>
 80336f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80336f6:	3201      	adds	r2, #1
 80336f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80336fa:	2200      	movs	r2, #0
 80336fc:	9204      	str	r2, [sp, #16]
 80336fe:	461f      	mov	r7, r3
 8033700:	46d8      	mov	r8, fp
 8033702:	464d      	mov	r5, r9
 8033704:	e7cb      	b.n	803369e <_vfprintf_r+0xc1e>
 8033706:	2f0a      	cmp	r7, #10
 8033708:	f178 0800 	sbcs.w	r8, r8, #0
 803370c:	d2f7      	bcs.n	80336fe <_vfprintf_r+0xc7e>
 803370e:	e3dc      	b.n	8033eca <_vfprintf_r+0x144a>
 8033710:	f007 030f 	and.w	r3, r7, #15
 8033714:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8033716:	093f      	lsrs	r7, r7, #4
 8033718:	5cd3      	ldrb	r3, [r2, r3]
 803371a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 803371e:	ea47 7708 	orr.w	r7, r7, r8, lsl #28
 8033722:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8033726:	ea57 0308 	orrs.w	r3, r7, r8
 803372a:	d1f1      	bne.n	8033710 <_vfprintf_r+0xc90>
 803372c:	e3cd      	b.n	8033eca <_vfprintf_r+0x144a>
 803372e:	b91b      	cbnz	r3, 8033738 <_vfprintf_r+0xcb8>
 8033730:	07ed      	lsls	r5, r5, #31
 8033732:	d501      	bpl.n	8033738 <_vfprintf_r+0xcb8>
 8033734:	2730      	movs	r7, #48	@ 0x30
 8033736:	e7a5      	b.n	8033684 <_vfprintf_r+0xc04>
 8033738:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 803373c:	e3c5      	b.n	8033eca <_vfprintf_r+0x144a>
 803373e:	9b06      	ldr	r3, [sp, #24]
 8033740:	2b00      	cmp	r3, #0
 8033742:	f000 838e 	beq.w	8033e62 <_vfprintf_r+0x13e2>
 8033746:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 803374a:	2300      	movs	r3, #0
 803374c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8033750:	9707      	str	r7, [sp, #28]
 8033752:	f7ff bb5a 	b.w	8032e0a <_vfprintf_r+0x38a>
 8033756:	2110      	movs	r1, #16
 8033758:	6061      	str	r1, [r4, #4]
 803375a:	2a07      	cmp	r2, #7
 803375c:	4461      	add	r1, ip
 803375e:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 8033762:	dd0a      	ble.n	803377a <_vfprintf_r+0xcfa>
 8033764:	9803      	ldr	r0, [sp, #12]
 8033766:	931d      	str	r3, [sp, #116]	@ 0x74
 8033768:	aa26      	add	r2, sp, #152	@ 0x98
 803376a:	4651      	mov	r1, sl
 803376c:	f7f8 fd10 	bl	802c190 <__sprint_r>
 8033770:	2800      	cmp	r0, #0
 8033772:	f040 8354 	bne.w	8033e1e <_vfprintf_r+0x139e>
 8033776:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8033778:	a829      	add	r0, sp, #164	@ 0xa4
 803377a:	3b10      	subs	r3, #16
 803377c:	4604      	mov	r4, r0
 803377e:	e529      	b.n	80331d4 <_vfprintf_r+0x754>
 8033780:	4604      	mov	r4, r0
 8033782:	e543      	b.n	803320c <_vfprintf_r+0x78c>
 8033784:	9803      	ldr	r0, [sp, #12]
 8033786:	aa26      	add	r2, sp, #152	@ 0x98
 8033788:	4651      	mov	r1, sl
 803378a:	f7f8 fd01 	bl	802c190 <__sprint_r>
 803378e:	2800      	cmp	r0, #0
 8033790:	f040 8345 	bne.w	8033e1e <_vfprintf_r+0x139e>
 8033794:	ac29      	add	r4, sp, #164	@ 0xa4
 8033796:	e54b      	b.n	8033230 <_vfprintf_r+0x7b0>
 8033798:	9803      	ldr	r0, [sp, #12]
 803379a:	aa26      	add	r2, sp, #152	@ 0x98
 803379c:	4651      	mov	r1, sl
 803379e:	f7f8 fcf7 	bl	802c190 <__sprint_r>
 80337a2:	2800      	cmp	r0, #0
 80337a4:	f040 833b 	bne.w	8033e1e <_vfprintf_r+0x139e>
 80337a8:	ac29      	add	r4, sp, #164	@ 0xa4
 80337aa:	e551      	b.n	8033250 <_vfprintf_r+0x7d0>
 80337ac:	2110      	movs	r1, #16
 80337ae:	6061      	str	r1, [r4, #4]
 80337b0:	2a07      	cmp	r2, #7
 80337b2:	4461      	add	r1, ip
 80337b4:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 80337b8:	dd0a      	ble.n	80337d0 <_vfprintf_r+0xd50>
 80337ba:	9803      	ldr	r0, [sp, #12]
 80337bc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80337be:	aa26      	add	r2, sp, #152	@ 0x98
 80337c0:	4651      	mov	r1, sl
 80337c2:	f7f8 fce5 	bl	802c190 <__sprint_r>
 80337c6:	2800      	cmp	r0, #0
 80337c8:	f040 8329 	bne.w	8033e1e <_vfprintf_r+0x139e>
 80337cc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80337ce:	a829      	add	r0, sp, #164	@ 0xa4
 80337d0:	3b10      	subs	r3, #16
 80337d2:	4604      	mov	r4, r0
 80337d4:	e544      	b.n	8033260 <_vfprintf_r+0x7e0>
 80337d6:	4604      	mov	r4, r0
 80337d8:	e55e      	b.n	8033298 <_vfprintf_r+0x818>
 80337da:	2010      	movs	r0, #16
 80337dc:	4403      	add	r3, r0
 80337de:	2a07      	cmp	r2, #7
 80337e0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80337e4:	6060      	str	r0, [r4, #4]
 80337e6:	dd08      	ble.n	80337fa <_vfprintf_r+0xd7a>
 80337e8:	9803      	ldr	r0, [sp, #12]
 80337ea:	aa26      	add	r2, sp, #152	@ 0x98
 80337ec:	4651      	mov	r1, sl
 80337ee:	f7f8 fccf 	bl	802c190 <__sprint_r>
 80337f2:	2800      	cmp	r0, #0
 80337f4:	f040 8313 	bne.w	8033e1e <_vfprintf_r+0x139e>
 80337f8:	a929      	add	r1, sp, #164	@ 0xa4
 80337fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80337fc:	3b10      	subs	r3, #16
 80337fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8033800:	460c      	mov	r4, r1
 8033802:	e54e      	b.n	80332a2 <_vfprintf_r+0x822>
 8033804:	460c      	mov	r4, r1
 8033806:	e569      	b.n	80332dc <_vfprintf_r+0x85c>
 8033808:	0803dad5 	.word	0x0803dad5
 803380c:	0803dac4 	.word	0x0803dac4
 8033810:	9b06      	ldr	r3, [sp, #24]
 8033812:	2b65      	cmp	r3, #101	@ 0x65
 8033814:	f340 8246 	ble.w	8033ca4 <_vfprintf_r+0x1224>
 8033818:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803381c:	2200      	movs	r2, #0
 803381e:	2300      	movs	r3, #0
 8033820:	f7dd f96a 	bl	8010af8 <__aeabi_dcmpeq>
 8033824:	2800      	cmp	r0, #0
 8033826:	d06a      	beq.n	80338fe <_vfprintf_r+0xe7e>
 8033828:	4b73      	ldr	r3, [pc, #460]	@ (80339f8 <_vfprintf_r+0xf78>)
 803382a:	6023      	str	r3, [r4, #0]
 803382c:	2301      	movs	r3, #1
 803382e:	6063      	str	r3, [r4, #4]
 8033830:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8033832:	3301      	adds	r3, #1
 8033834:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033836:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033838:	3301      	adds	r3, #1
 803383a:	2b07      	cmp	r3, #7
 803383c:	9327      	str	r3, [sp, #156]	@ 0x9c
 803383e:	dc37      	bgt.n	80338b0 <_vfprintf_r+0xe30>
 8033840:	3408      	adds	r4, #8
 8033842:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8033844:	9a04      	ldr	r2, [sp, #16]
 8033846:	4293      	cmp	r3, r2
 8033848:	db02      	blt.n	8033850 <_vfprintf_r+0xdd0>
 803384a:	07e9      	lsls	r1, r5, #31
 803384c:	f57f ad56 	bpl.w	80332fc <_vfprintf_r+0x87c>
 8033850:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8033852:	6023      	str	r3, [r4, #0]
 8033854:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8033856:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8033858:	6063      	str	r3, [r4, #4]
 803385a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803385c:	4413      	add	r3, r2
 803385e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033860:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033862:	3301      	adds	r3, #1
 8033864:	2b07      	cmp	r3, #7
 8033866:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033868:	dc2c      	bgt.n	80338c4 <_vfprintf_r+0xe44>
 803386a:	3408      	adds	r4, #8
 803386c:	9b04      	ldr	r3, [sp, #16]
 803386e:	1e5e      	subs	r6, r3, #1
 8033870:	2e00      	cmp	r6, #0
 8033872:	f77f ad43 	ble.w	80332fc <_vfprintf_r+0x87c>
 8033876:	4f61      	ldr	r7, [pc, #388]	@ (80339fc <_vfprintf_r+0xf7c>)
 8033878:	f04f 0810 	mov.w	r8, #16
 803387c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8033880:	2e10      	cmp	r6, #16
 8033882:	f103 0301 	add.w	r3, r3, #1
 8033886:	f104 0108 	add.w	r1, r4, #8
 803388a:	6027      	str	r7, [r4, #0]
 803388c:	dc24      	bgt.n	80338d8 <_vfprintf_r+0xe58>
 803388e:	6066      	str	r6, [r4, #4]
 8033890:	2b07      	cmp	r3, #7
 8033892:	4416      	add	r6, r2
 8033894:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8033898:	f340 82a0 	ble.w	8033ddc <_vfprintf_r+0x135c>
 803389c:	9803      	ldr	r0, [sp, #12]
 803389e:	aa26      	add	r2, sp, #152	@ 0x98
 80338a0:	4651      	mov	r1, sl
 80338a2:	f7f8 fc75 	bl	802c190 <__sprint_r>
 80338a6:	2800      	cmp	r0, #0
 80338a8:	f040 82b9 	bne.w	8033e1e <_vfprintf_r+0x139e>
 80338ac:	ac29      	add	r4, sp, #164	@ 0xa4
 80338ae:	e525      	b.n	80332fc <_vfprintf_r+0x87c>
 80338b0:	9803      	ldr	r0, [sp, #12]
 80338b2:	aa26      	add	r2, sp, #152	@ 0x98
 80338b4:	4651      	mov	r1, sl
 80338b6:	f7f8 fc6b 	bl	802c190 <__sprint_r>
 80338ba:	2800      	cmp	r0, #0
 80338bc:	f040 82af 	bne.w	8033e1e <_vfprintf_r+0x139e>
 80338c0:	ac29      	add	r4, sp, #164	@ 0xa4
 80338c2:	e7be      	b.n	8033842 <_vfprintf_r+0xdc2>
 80338c4:	9803      	ldr	r0, [sp, #12]
 80338c6:	aa26      	add	r2, sp, #152	@ 0x98
 80338c8:	4651      	mov	r1, sl
 80338ca:	f7f8 fc61 	bl	802c190 <__sprint_r>
 80338ce:	2800      	cmp	r0, #0
 80338d0:	f040 82a5 	bne.w	8033e1e <_vfprintf_r+0x139e>
 80338d4:	ac29      	add	r4, sp, #164	@ 0xa4
 80338d6:	e7c9      	b.n	803386c <_vfprintf_r+0xdec>
 80338d8:	3210      	adds	r2, #16
 80338da:	2b07      	cmp	r3, #7
 80338dc:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80338e0:	f8c4 8004 	str.w	r8, [r4, #4]
 80338e4:	dd08      	ble.n	80338f8 <_vfprintf_r+0xe78>
 80338e6:	9803      	ldr	r0, [sp, #12]
 80338e8:	aa26      	add	r2, sp, #152	@ 0x98
 80338ea:	4651      	mov	r1, sl
 80338ec:	f7f8 fc50 	bl	802c190 <__sprint_r>
 80338f0:	2800      	cmp	r0, #0
 80338f2:	f040 8294 	bne.w	8033e1e <_vfprintf_r+0x139e>
 80338f6:	a929      	add	r1, sp, #164	@ 0xa4
 80338f8:	3e10      	subs	r6, #16
 80338fa:	460c      	mov	r4, r1
 80338fc:	e7be      	b.n	803387c <_vfprintf_r+0xdfc>
 80338fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8033900:	2b00      	cmp	r3, #0
 8033902:	dc7d      	bgt.n	8033a00 <_vfprintf_r+0xf80>
 8033904:	4b3c      	ldr	r3, [pc, #240]	@ (80339f8 <_vfprintf_r+0xf78>)
 8033906:	6023      	str	r3, [r4, #0]
 8033908:	2301      	movs	r3, #1
 803390a:	6063      	str	r3, [r4, #4]
 803390c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803390e:	3301      	adds	r3, #1
 8033910:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033912:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033914:	3301      	adds	r3, #1
 8033916:	2b07      	cmp	r3, #7
 8033918:	9327      	str	r3, [sp, #156]	@ 0x9c
 803391a:	dc46      	bgt.n	80339aa <_vfprintf_r+0xf2a>
 803391c:	3408      	adds	r4, #8
 803391e:	9904      	ldr	r1, [sp, #16]
 8033920:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8033922:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8033924:	430b      	orrs	r3, r1
 8033926:	f005 0101 	and.w	r1, r5, #1
 803392a:	430b      	orrs	r3, r1
 803392c:	f43f ace6 	beq.w	80332fc <_vfprintf_r+0x87c>
 8033930:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8033932:	6023      	str	r3, [r4, #0]
 8033934:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8033936:	6063      	str	r3, [r4, #4]
 8033938:	441a      	add	r2, r3
 803393a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803393c:	9228      	str	r2, [sp, #160]	@ 0xa0
 803393e:	3301      	adds	r3, #1
 8033940:	2b07      	cmp	r3, #7
 8033942:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033944:	dc3b      	bgt.n	80339be <_vfprintf_r+0xf3e>
 8033946:	f104 0308 	add.w	r3, r4, #8
 803394a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 803394c:	2e00      	cmp	r6, #0
 803394e:	da1b      	bge.n	8033988 <_vfprintf_r+0xf08>
 8033950:	4f2a      	ldr	r7, [pc, #168]	@ (80339fc <_vfprintf_r+0xf7c>)
 8033952:	4276      	negs	r6, r6
 8033954:	461a      	mov	r2, r3
 8033956:	2410      	movs	r4, #16
 8033958:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 803395c:	2e10      	cmp	r6, #16
 803395e:	f101 0101 	add.w	r1, r1, #1
 8033962:	f103 0308 	add.w	r3, r3, #8
 8033966:	6017      	str	r7, [r2, #0]
 8033968:	dc33      	bgt.n	80339d2 <_vfprintf_r+0xf52>
 803396a:	6056      	str	r6, [r2, #4]
 803396c:	2907      	cmp	r1, #7
 803396e:	4406      	add	r6, r0
 8033970:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8033974:	dd08      	ble.n	8033988 <_vfprintf_r+0xf08>
 8033976:	9803      	ldr	r0, [sp, #12]
 8033978:	aa26      	add	r2, sp, #152	@ 0x98
 803397a:	4651      	mov	r1, sl
 803397c:	f7f8 fc08 	bl	802c190 <__sprint_r>
 8033980:	2800      	cmp	r0, #0
 8033982:	f040 824c 	bne.w	8033e1e <_vfprintf_r+0x139e>
 8033986:	ab29      	add	r3, sp, #164	@ 0xa4
 8033988:	9a04      	ldr	r2, [sp, #16]
 803398a:	9904      	ldr	r1, [sp, #16]
 803398c:	605a      	str	r2, [r3, #4]
 803398e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8033990:	f8c3 9000 	str.w	r9, [r3]
 8033994:	440a      	add	r2, r1
 8033996:	9228      	str	r2, [sp, #160]	@ 0xa0
 8033998:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 803399a:	3201      	adds	r2, #1
 803399c:	2a07      	cmp	r2, #7
 803399e:	9227      	str	r2, [sp, #156]	@ 0x9c
 80339a0:	f73f af7c 	bgt.w	803389c <_vfprintf_r+0xe1c>
 80339a4:	f103 0408 	add.w	r4, r3, #8
 80339a8:	e4a8      	b.n	80332fc <_vfprintf_r+0x87c>
 80339aa:	9803      	ldr	r0, [sp, #12]
 80339ac:	aa26      	add	r2, sp, #152	@ 0x98
 80339ae:	4651      	mov	r1, sl
 80339b0:	f7f8 fbee 	bl	802c190 <__sprint_r>
 80339b4:	2800      	cmp	r0, #0
 80339b6:	f040 8232 	bne.w	8033e1e <_vfprintf_r+0x139e>
 80339ba:	ac29      	add	r4, sp, #164	@ 0xa4
 80339bc:	e7af      	b.n	803391e <_vfprintf_r+0xe9e>
 80339be:	9803      	ldr	r0, [sp, #12]
 80339c0:	aa26      	add	r2, sp, #152	@ 0x98
 80339c2:	4651      	mov	r1, sl
 80339c4:	f7f8 fbe4 	bl	802c190 <__sprint_r>
 80339c8:	2800      	cmp	r0, #0
 80339ca:	f040 8228 	bne.w	8033e1e <_vfprintf_r+0x139e>
 80339ce:	ab29      	add	r3, sp, #164	@ 0xa4
 80339d0:	e7bb      	b.n	803394a <_vfprintf_r+0xeca>
 80339d2:	3010      	adds	r0, #16
 80339d4:	2907      	cmp	r1, #7
 80339d6:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 80339da:	6054      	str	r4, [r2, #4]
 80339dc:	dd08      	ble.n	80339f0 <_vfprintf_r+0xf70>
 80339de:	9803      	ldr	r0, [sp, #12]
 80339e0:	aa26      	add	r2, sp, #152	@ 0x98
 80339e2:	4651      	mov	r1, sl
 80339e4:	f7f8 fbd4 	bl	802c190 <__sprint_r>
 80339e8:	2800      	cmp	r0, #0
 80339ea:	f040 8218 	bne.w	8033e1e <_vfprintf_r+0x139e>
 80339ee:	ab29      	add	r3, sp, #164	@ 0xa4
 80339f0:	3e10      	subs	r6, #16
 80339f2:	461a      	mov	r2, r3
 80339f4:	e7b0      	b.n	8033958 <_vfprintf_r+0xed8>
 80339f6:	bf00      	nop
 80339f8:	0803dcd7 	.word	0x0803dcd7
 80339fc:	0803e17a 	.word	0x0803e17a
 8033a00:	9b04      	ldr	r3, [sp, #16]
 8033a02:	42bb      	cmp	r3, r7
 8033a04:	bfa8      	it	ge
 8033a06:	463b      	movge	r3, r7
 8033a08:	2b00      	cmp	r3, #0
 8033a0a:	461e      	mov	r6, r3
 8033a0c:	dd0b      	ble.n	8033a26 <_vfprintf_r+0xfa6>
 8033a0e:	e9c4 9300 	strd	r9, r3, [r4]
 8033a12:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8033a14:	4433      	add	r3, r6
 8033a16:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033a18:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033a1a:	3301      	adds	r3, #1
 8033a1c:	2b07      	cmp	r3, #7
 8033a1e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033a20:	f300 808c 	bgt.w	8033b3c <_vfprintf_r+0x10bc>
 8033a24:	3408      	adds	r4, #8
 8033a26:	2e00      	cmp	r6, #0
 8033a28:	bfac      	ite	ge
 8033a2a:	1bbe      	subge	r6, r7, r6
 8033a2c:	463e      	movlt	r6, r7
 8033a2e:	2e00      	cmp	r6, #0
 8033a30:	dd1a      	ble.n	8033a68 <_vfprintf_r+0xfe8>
 8033a32:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8033a36:	489a      	ldr	r0, [pc, #616]	@ (8033ca0 <_vfprintf_r+0x1220>)
 8033a38:	6020      	str	r0, [r4, #0]
 8033a3a:	2e10      	cmp	r6, #16
 8033a3c:	f103 0301 	add.w	r3, r3, #1
 8033a40:	f104 0108 	add.w	r1, r4, #8
 8033a44:	f300 8084 	bgt.w	8033b50 <_vfprintf_r+0x10d0>
 8033a48:	6066      	str	r6, [r4, #4]
 8033a4a:	2b07      	cmp	r3, #7
 8033a4c:	4416      	add	r6, r2
 8033a4e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8033a52:	f340 8090 	ble.w	8033b76 <_vfprintf_r+0x10f6>
 8033a56:	9803      	ldr	r0, [sp, #12]
 8033a58:	aa26      	add	r2, sp, #152	@ 0x98
 8033a5a:	4651      	mov	r1, sl
 8033a5c:	f7f8 fb98 	bl	802c190 <__sprint_r>
 8033a60:	2800      	cmp	r0, #0
 8033a62:	f040 81dc 	bne.w	8033e1e <_vfprintf_r+0x139e>
 8033a66:	ac29      	add	r4, sp, #164	@ 0xa4
 8033a68:	056a      	lsls	r2, r5, #21
 8033a6a:	444f      	add	r7, r9
 8033a6c:	d50c      	bpl.n	8033a88 <_vfprintf_r+0x1008>
 8033a6e:	9b08      	ldr	r3, [sp, #32]
 8033a70:	2b00      	cmp	r3, #0
 8033a72:	f300 8082 	bgt.w	8033b7a <_vfprintf_r+0x10fa>
 8033a76:	f1b8 0f00 	cmp.w	r8, #0
 8033a7a:	f300 8081 	bgt.w	8033b80 <_vfprintf_r+0x1100>
 8033a7e:	9b04      	ldr	r3, [sp, #16]
 8033a80:	444b      	add	r3, r9
 8033a82:	429f      	cmp	r7, r3
 8033a84:	bf28      	it	cs
 8033a86:	461f      	movcs	r7, r3
 8033a88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8033a8a:	9a04      	ldr	r2, [sp, #16]
 8033a8c:	4293      	cmp	r3, r2
 8033a8e:	db01      	blt.n	8033a94 <_vfprintf_r+0x1014>
 8033a90:	07eb      	lsls	r3, r5, #31
 8033a92:	d50e      	bpl.n	8033ab2 <_vfprintf_r+0x1032>
 8033a94:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8033a96:	6023      	str	r3, [r4, #0]
 8033a98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8033a9a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8033a9c:	6063      	str	r3, [r4, #4]
 8033a9e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033aa0:	4413      	add	r3, r2
 8033aa2:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033aa4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033aa6:	3301      	adds	r3, #1
 8033aa8:	2b07      	cmp	r3, #7
 8033aaa:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033aac:	f300 80e3 	bgt.w	8033c76 <_vfprintf_r+0x11f6>
 8033ab0:	3408      	adds	r4, #8
 8033ab2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8033ab4:	9a04      	ldr	r2, [sp, #16]
 8033ab6:	eba2 0803 	sub.w	r8, r2, r3
 8033aba:	eb09 0302 	add.w	r3, r9, r2
 8033abe:	1bdb      	subs	r3, r3, r7
 8033ac0:	4598      	cmp	r8, r3
 8033ac2:	bfa8      	it	ge
 8033ac4:	4698      	movge	r8, r3
 8033ac6:	f1b8 0f00 	cmp.w	r8, #0
 8033aca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033acc:	dd0a      	ble.n	8033ae4 <_vfprintf_r+0x1064>
 8033ace:	4443      	add	r3, r8
 8033ad0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033ad2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033ad4:	3301      	adds	r3, #1
 8033ad6:	2b07      	cmp	r3, #7
 8033ad8:	e9c4 7800 	strd	r7, r8, [r4]
 8033adc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033ade:	f300 80d4 	bgt.w	8033c8a <_vfprintf_r+0x120a>
 8033ae2:	3408      	adds	r4, #8
 8033ae4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8033ae6:	9b04      	ldr	r3, [sp, #16]
 8033ae8:	f1b8 0f00 	cmp.w	r8, #0
 8033aec:	eba3 0606 	sub.w	r6, r3, r6
 8033af0:	bfa8      	it	ge
 8033af2:	eba6 0608 	subge.w	r6, r6, r8
 8033af6:	2e00      	cmp	r6, #0
 8033af8:	f77f ac00 	ble.w	80332fc <_vfprintf_r+0x87c>
 8033afc:	4f68      	ldr	r7, [pc, #416]	@ (8033ca0 <_vfprintf_r+0x1220>)
 8033afe:	f04f 0810 	mov.w	r8, #16
 8033b02:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8033b06:	2e10      	cmp	r6, #16
 8033b08:	f103 0301 	add.w	r3, r3, #1
 8033b0c:	f104 0108 	add.w	r1, r4, #8
 8033b10:	6027      	str	r7, [r4, #0]
 8033b12:	f77f aebc 	ble.w	803388e <_vfprintf_r+0xe0e>
 8033b16:	3210      	adds	r2, #16
 8033b18:	2b07      	cmp	r3, #7
 8033b1a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8033b1e:	f8c4 8004 	str.w	r8, [r4, #4]
 8033b22:	dd08      	ble.n	8033b36 <_vfprintf_r+0x10b6>
 8033b24:	9803      	ldr	r0, [sp, #12]
 8033b26:	aa26      	add	r2, sp, #152	@ 0x98
 8033b28:	4651      	mov	r1, sl
 8033b2a:	f7f8 fb31 	bl	802c190 <__sprint_r>
 8033b2e:	2800      	cmp	r0, #0
 8033b30:	f040 8175 	bne.w	8033e1e <_vfprintf_r+0x139e>
 8033b34:	a929      	add	r1, sp, #164	@ 0xa4
 8033b36:	3e10      	subs	r6, #16
 8033b38:	460c      	mov	r4, r1
 8033b3a:	e7e2      	b.n	8033b02 <_vfprintf_r+0x1082>
 8033b3c:	9803      	ldr	r0, [sp, #12]
 8033b3e:	aa26      	add	r2, sp, #152	@ 0x98
 8033b40:	4651      	mov	r1, sl
 8033b42:	f7f8 fb25 	bl	802c190 <__sprint_r>
 8033b46:	2800      	cmp	r0, #0
 8033b48:	f040 8169 	bne.w	8033e1e <_vfprintf_r+0x139e>
 8033b4c:	ac29      	add	r4, sp, #164	@ 0xa4
 8033b4e:	e76a      	b.n	8033a26 <_vfprintf_r+0xfa6>
 8033b50:	2010      	movs	r0, #16
 8033b52:	4402      	add	r2, r0
 8033b54:	2b07      	cmp	r3, #7
 8033b56:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8033b5a:	6060      	str	r0, [r4, #4]
 8033b5c:	dd08      	ble.n	8033b70 <_vfprintf_r+0x10f0>
 8033b5e:	9803      	ldr	r0, [sp, #12]
 8033b60:	aa26      	add	r2, sp, #152	@ 0x98
 8033b62:	4651      	mov	r1, sl
 8033b64:	f7f8 fb14 	bl	802c190 <__sprint_r>
 8033b68:	2800      	cmp	r0, #0
 8033b6a:	f040 8158 	bne.w	8033e1e <_vfprintf_r+0x139e>
 8033b6e:	a929      	add	r1, sp, #164	@ 0xa4
 8033b70:	3e10      	subs	r6, #16
 8033b72:	460c      	mov	r4, r1
 8033b74:	e75d      	b.n	8033a32 <_vfprintf_r+0xfb2>
 8033b76:	460c      	mov	r4, r1
 8033b78:	e776      	b.n	8033a68 <_vfprintf_r+0xfe8>
 8033b7a:	f1b8 0f00 	cmp.w	r8, #0
 8033b7e:	dd4a      	ble.n	8033c16 <_vfprintf_r+0x1196>
 8033b80:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8033b84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8033b86:	6023      	str	r3, [r4, #0]
 8033b88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8033b8a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8033b8c:	6063      	str	r3, [r4, #4]
 8033b8e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033b90:	4413      	add	r3, r2
 8033b92:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033b94:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033b96:	3301      	adds	r3, #1
 8033b98:	2b07      	cmp	r3, #7
 8033b9a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033b9c:	dc42      	bgt.n	8033c24 <_vfprintf_r+0x11a4>
 8033b9e:	3408      	adds	r4, #8
 8033ba0:	9b04      	ldr	r3, [sp, #16]
 8033ba2:	444b      	add	r3, r9
 8033ba4:	1bda      	subs	r2, r3, r7
 8033ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033ba8:	781b      	ldrb	r3, [r3, #0]
 8033baa:	429a      	cmp	r2, r3
 8033bac:	bfa8      	it	ge
 8033bae:	461a      	movge	r2, r3
 8033bb0:	2a00      	cmp	r2, #0
 8033bb2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033bb4:	9206      	str	r2, [sp, #24]
 8033bb6:	dd09      	ble.n	8033bcc <_vfprintf_r+0x114c>
 8033bb8:	4413      	add	r3, r2
 8033bba:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033bbc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033bbe:	3301      	adds	r3, #1
 8033bc0:	2b07      	cmp	r3, #7
 8033bc2:	e9c4 7200 	strd	r7, r2, [r4]
 8033bc6:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033bc8:	dc36      	bgt.n	8033c38 <_vfprintf_r+0x11b8>
 8033bca:	3408      	adds	r4, #8
 8033bcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033bce:	781e      	ldrb	r6, [r3, #0]
 8033bd0:	9b06      	ldr	r3, [sp, #24]
 8033bd2:	2b00      	cmp	r3, #0
 8033bd4:	bfa8      	it	ge
 8033bd6:	1af6      	subge	r6, r6, r3
 8033bd8:	2e00      	cmp	r6, #0
 8033bda:	dd18      	ble.n	8033c0e <_vfprintf_r+0x118e>
 8033bdc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8033be0:	482f      	ldr	r0, [pc, #188]	@ (8033ca0 <_vfprintf_r+0x1220>)
 8033be2:	6020      	str	r0, [r4, #0]
 8033be4:	2e10      	cmp	r6, #16
 8033be6:	f103 0301 	add.w	r3, r3, #1
 8033bea:	f104 0108 	add.w	r1, r4, #8
 8033bee:	dc2d      	bgt.n	8033c4c <_vfprintf_r+0x11cc>
 8033bf0:	6066      	str	r6, [r4, #4]
 8033bf2:	2b07      	cmp	r3, #7
 8033bf4:	4416      	add	r6, r2
 8033bf6:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8033bfa:	dd3a      	ble.n	8033c72 <_vfprintf_r+0x11f2>
 8033bfc:	9803      	ldr	r0, [sp, #12]
 8033bfe:	aa26      	add	r2, sp, #152	@ 0x98
 8033c00:	4651      	mov	r1, sl
 8033c02:	f7f8 fac5 	bl	802c190 <__sprint_r>
 8033c06:	2800      	cmp	r0, #0
 8033c08:	f040 8109 	bne.w	8033e1e <_vfprintf_r+0x139e>
 8033c0c:	ac29      	add	r4, sp, #164	@ 0xa4
 8033c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033c10:	781b      	ldrb	r3, [r3, #0]
 8033c12:	441f      	add	r7, r3
 8033c14:	e72b      	b.n	8033a6e <_vfprintf_r+0xfee>
 8033c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033c18:	3b01      	subs	r3, #1
 8033c1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8033c1c:	9b08      	ldr	r3, [sp, #32]
 8033c1e:	3b01      	subs	r3, #1
 8033c20:	9308      	str	r3, [sp, #32]
 8033c22:	e7af      	b.n	8033b84 <_vfprintf_r+0x1104>
 8033c24:	9803      	ldr	r0, [sp, #12]
 8033c26:	aa26      	add	r2, sp, #152	@ 0x98
 8033c28:	4651      	mov	r1, sl
 8033c2a:	f7f8 fab1 	bl	802c190 <__sprint_r>
 8033c2e:	2800      	cmp	r0, #0
 8033c30:	f040 80f5 	bne.w	8033e1e <_vfprintf_r+0x139e>
 8033c34:	ac29      	add	r4, sp, #164	@ 0xa4
 8033c36:	e7b3      	b.n	8033ba0 <_vfprintf_r+0x1120>
 8033c38:	9803      	ldr	r0, [sp, #12]
 8033c3a:	aa26      	add	r2, sp, #152	@ 0x98
 8033c3c:	4651      	mov	r1, sl
 8033c3e:	f7f8 faa7 	bl	802c190 <__sprint_r>
 8033c42:	2800      	cmp	r0, #0
 8033c44:	f040 80eb 	bne.w	8033e1e <_vfprintf_r+0x139e>
 8033c48:	ac29      	add	r4, sp, #164	@ 0xa4
 8033c4a:	e7bf      	b.n	8033bcc <_vfprintf_r+0x114c>
 8033c4c:	2010      	movs	r0, #16
 8033c4e:	4402      	add	r2, r0
 8033c50:	2b07      	cmp	r3, #7
 8033c52:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8033c56:	6060      	str	r0, [r4, #4]
 8033c58:	dd08      	ble.n	8033c6c <_vfprintf_r+0x11ec>
 8033c5a:	9803      	ldr	r0, [sp, #12]
 8033c5c:	aa26      	add	r2, sp, #152	@ 0x98
 8033c5e:	4651      	mov	r1, sl
 8033c60:	f7f8 fa96 	bl	802c190 <__sprint_r>
 8033c64:	2800      	cmp	r0, #0
 8033c66:	f040 80da 	bne.w	8033e1e <_vfprintf_r+0x139e>
 8033c6a:	a929      	add	r1, sp, #164	@ 0xa4
 8033c6c:	3e10      	subs	r6, #16
 8033c6e:	460c      	mov	r4, r1
 8033c70:	e7b4      	b.n	8033bdc <_vfprintf_r+0x115c>
 8033c72:	460c      	mov	r4, r1
 8033c74:	e7cb      	b.n	8033c0e <_vfprintf_r+0x118e>
 8033c76:	9803      	ldr	r0, [sp, #12]
 8033c78:	aa26      	add	r2, sp, #152	@ 0x98
 8033c7a:	4651      	mov	r1, sl
 8033c7c:	f7f8 fa88 	bl	802c190 <__sprint_r>
 8033c80:	2800      	cmp	r0, #0
 8033c82:	f040 80cc 	bne.w	8033e1e <_vfprintf_r+0x139e>
 8033c86:	ac29      	add	r4, sp, #164	@ 0xa4
 8033c88:	e713      	b.n	8033ab2 <_vfprintf_r+0x1032>
 8033c8a:	9803      	ldr	r0, [sp, #12]
 8033c8c:	aa26      	add	r2, sp, #152	@ 0x98
 8033c8e:	4651      	mov	r1, sl
 8033c90:	f7f8 fa7e 	bl	802c190 <__sprint_r>
 8033c94:	2800      	cmp	r0, #0
 8033c96:	f040 80c2 	bne.w	8033e1e <_vfprintf_r+0x139e>
 8033c9a:	ac29      	add	r4, sp, #164	@ 0xa4
 8033c9c:	e722      	b.n	8033ae4 <_vfprintf_r+0x1064>
 8033c9e:	bf00      	nop
 8033ca0:	0803e17a 	.word	0x0803e17a
 8033ca4:	9904      	ldr	r1, [sp, #16]
 8033ca6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8033ca8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8033caa:	2901      	cmp	r1, #1
 8033cac:	f103 0301 	add.w	r3, r3, #1
 8033cb0:	f102 0201 	add.w	r2, r2, #1
 8033cb4:	f104 0608 	add.w	r6, r4, #8
 8033cb8:	dc02      	bgt.n	8033cc0 <_vfprintf_r+0x1240>
 8033cba:	07ef      	lsls	r7, r5, #31
 8033cbc:	f140 8083 	bpl.w	8033dc6 <_vfprintf_r+0x1346>
 8033cc0:	2101      	movs	r1, #1
 8033cc2:	2a07      	cmp	r2, #7
 8033cc4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8033cc8:	f8c4 9000 	str.w	r9, [r4]
 8033ccc:	6061      	str	r1, [r4, #4]
 8033cce:	dd08      	ble.n	8033ce2 <_vfprintf_r+0x1262>
 8033cd0:	9803      	ldr	r0, [sp, #12]
 8033cd2:	aa26      	add	r2, sp, #152	@ 0x98
 8033cd4:	4651      	mov	r1, sl
 8033cd6:	f7f8 fa5b 	bl	802c190 <__sprint_r>
 8033cda:	2800      	cmp	r0, #0
 8033cdc:	f040 809f 	bne.w	8033e1e <_vfprintf_r+0x139e>
 8033ce0:	ae29      	add	r6, sp, #164	@ 0xa4
 8033ce2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8033ce4:	6033      	str	r3, [r6, #0]
 8033ce6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8033ce8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8033cea:	6073      	str	r3, [r6, #4]
 8033cec:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033cee:	4413      	add	r3, r2
 8033cf0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033cf2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033cf4:	3301      	adds	r3, #1
 8033cf6:	2b07      	cmp	r3, #7
 8033cf8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033cfa:	dc33      	bgt.n	8033d64 <_vfprintf_r+0x12e4>
 8033cfc:	3608      	adds	r6, #8
 8033cfe:	9b04      	ldr	r3, [sp, #16]
 8033d00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8033d04:	1e5c      	subs	r4, r3, #1
 8033d06:	2200      	movs	r2, #0
 8033d08:	2300      	movs	r3, #0
 8033d0a:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 8033d0e:	f7dc fef3 	bl	8010af8 <__aeabi_dcmpeq>
 8033d12:	2800      	cmp	r0, #0
 8033d14:	d12f      	bne.n	8033d76 <_vfprintf_r+0x12f6>
 8033d16:	f109 0201 	add.w	r2, r9, #1
 8033d1a:	e9c6 2400 	strd	r2, r4, [r6]
 8033d1e:	9a04      	ldr	r2, [sp, #16]
 8033d20:	f108 0301 	add.w	r3, r8, #1
 8033d24:	3f01      	subs	r7, #1
 8033d26:	4417      	add	r7, r2
 8033d28:	2b07      	cmp	r3, #7
 8033d2a:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8033d2e:	dd53      	ble.n	8033dd8 <_vfprintf_r+0x1358>
 8033d30:	9803      	ldr	r0, [sp, #12]
 8033d32:	aa26      	add	r2, sp, #152	@ 0x98
 8033d34:	4651      	mov	r1, sl
 8033d36:	f7f8 fa2b 	bl	802c190 <__sprint_r>
 8033d3a:	2800      	cmp	r0, #0
 8033d3c:	d16f      	bne.n	8033e1e <_vfprintf_r+0x139e>
 8033d3e:	ae29      	add	r6, sp, #164	@ 0xa4
 8033d40:	ab22      	add	r3, sp, #136	@ 0x88
 8033d42:	6033      	str	r3, [r6, #0]
 8033d44:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8033d46:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8033d48:	6073      	str	r3, [r6, #4]
 8033d4a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033d4c:	4413      	add	r3, r2
 8033d4e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033d50:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033d52:	3301      	adds	r3, #1
 8033d54:	2b07      	cmp	r3, #7
 8033d56:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033d58:	f73f ada0 	bgt.w	803389c <_vfprintf_r+0xe1c>
 8033d5c:	f106 0408 	add.w	r4, r6, #8
 8033d60:	f7ff bacc 	b.w	80332fc <_vfprintf_r+0x87c>
 8033d64:	9803      	ldr	r0, [sp, #12]
 8033d66:	aa26      	add	r2, sp, #152	@ 0x98
 8033d68:	4651      	mov	r1, sl
 8033d6a:	f7f8 fa11 	bl	802c190 <__sprint_r>
 8033d6e:	2800      	cmp	r0, #0
 8033d70:	d155      	bne.n	8033e1e <_vfprintf_r+0x139e>
 8033d72:	ae29      	add	r6, sp, #164	@ 0xa4
 8033d74:	e7c3      	b.n	8033cfe <_vfprintf_r+0x127e>
 8033d76:	9b04      	ldr	r3, [sp, #16]
 8033d78:	2b01      	cmp	r3, #1
 8033d7a:	dde1      	ble.n	8033d40 <_vfprintf_r+0x12c0>
 8033d7c:	4f59      	ldr	r7, [pc, #356]	@ (8033ee4 <_vfprintf_r+0x1464>)
 8033d7e:	f04f 0810 	mov.w	r8, #16
 8033d82:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8033d86:	2c10      	cmp	r4, #16
 8033d88:	f103 0301 	add.w	r3, r3, #1
 8033d8c:	f106 0108 	add.w	r1, r6, #8
 8033d90:	6037      	str	r7, [r6, #0]
 8033d92:	dc07      	bgt.n	8033da4 <_vfprintf_r+0x1324>
 8033d94:	4422      	add	r2, r4
 8033d96:	2b07      	cmp	r3, #7
 8033d98:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8033d9c:	6074      	str	r4, [r6, #4]
 8033d9e:	dcc7      	bgt.n	8033d30 <_vfprintf_r+0x12b0>
 8033da0:	460e      	mov	r6, r1
 8033da2:	e7cd      	b.n	8033d40 <_vfprintf_r+0x12c0>
 8033da4:	3210      	adds	r2, #16
 8033da6:	2b07      	cmp	r3, #7
 8033da8:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8033dac:	f8c6 8004 	str.w	r8, [r6, #4]
 8033db0:	dd06      	ble.n	8033dc0 <_vfprintf_r+0x1340>
 8033db2:	9803      	ldr	r0, [sp, #12]
 8033db4:	aa26      	add	r2, sp, #152	@ 0x98
 8033db6:	4651      	mov	r1, sl
 8033db8:	f7f8 f9ea 	bl	802c190 <__sprint_r>
 8033dbc:	bb78      	cbnz	r0, 8033e1e <_vfprintf_r+0x139e>
 8033dbe:	a929      	add	r1, sp, #164	@ 0xa4
 8033dc0:	3c10      	subs	r4, #16
 8033dc2:	460e      	mov	r6, r1
 8033dc4:	e7dd      	b.n	8033d82 <_vfprintf_r+0x1302>
 8033dc6:	2101      	movs	r1, #1
 8033dc8:	2a07      	cmp	r2, #7
 8033dca:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8033dce:	f8c4 9000 	str.w	r9, [r4]
 8033dd2:	6061      	str	r1, [r4, #4]
 8033dd4:	ddb4      	ble.n	8033d40 <_vfprintf_r+0x12c0>
 8033dd6:	e7ab      	b.n	8033d30 <_vfprintf_r+0x12b0>
 8033dd8:	3608      	adds	r6, #8
 8033dda:	e7b1      	b.n	8033d40 <_vfprintf_r+0x12c0>
 8033ddc:	460c      	mov	r4, r1
 8033dde:	f7ff ba8d 	b.w	80332fc <_vfprintf_r+0x87c>
 8033de2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8033de4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8033de6:	1a9d      	subs	r5, r3, r2
 8033de8:	2d00      	cmp	r5, #0
 8033dea:	f77f aa8a 	ble.w	8033302 <_vfprintf_r+0x882>
 8033dee:	4e3e      	ldr	r6, [pc, #248]	@ (8033ee8 <_vfprintf_r+0x1468>)
 8033df0:	2710      	movs	r7, #16
 8033df2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8033df6:	2d10      	cmp	r5, #16
 8033df8:	f103 0301 	add.w	r3, r3, #1
 8033dfc:	6026      	str	r6, [r4, #0]
 8033dfe:	dc18      	bgt.n	8033e32 <_vfprintf_r+0x13b2>
 8033e00:	6065      	str	r5, [r4, #4]
 8033e02:	2b07      	cmp	r3, #7
 8033e04:	4415      	add	r5, r2
 8033e06:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 8033e0a:	f77f aa7a 	ble.w	8033302 <_vfprintf_r+0x882>
 8033e0e:	9803      	ldr	r0, [sp, #12]
 8033e10:	aa26      	add	r2, sp, #152	@ 0x98
 8033e12:	4651      	mov	r1, sl
 8033e14:	f7f8 f9bc 	bl	802c190 <__sprint_r>
 8033e18:	2800      	cmp	r0, #0
 8033e1a:	f43f aa72 	beq.w	8033302 <_vfprintf_r+0x882>
 8033e1e:	f1bb 0f00 	cmp.w	fp, #0
 8033e22:	f43f a891 	beq.w	8032f48 <_vfprintf_r+0x4c8>
 8033e26:	9803      	ldr	r0, [sp, #12]
 8033e28:	4659      	mov	r1, fp
 8033e2a:	f7fa faed 	bl	802e408 <_free_r>
 8033e2e:	f7ff b88b 	b.w	8032f48 <_vfprintf_r+0x4c8>
 8033e32:	3210      	adds	r2, #16
 8033e34:	2b07      	cmp	r3, #7
 8033e36:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8033e3a:	6067      	str	r7, [r4, #4]
 8033e3c:	dc02      	bgt.n	8033e44 <_vfprintf_r+0x13c4>
 8033e3e:	3408      	adds	r4, #8
 8033e40:	3d10      	subs	r5, #16
 8033e42:	e7d6      	b.n	8033df2 <_vfprintf_r+0x1372>
 8033e44:	9803      	ldr	r0, [sp, #12]
 8033e46:	aa26      	add	r2, sp, #152	@ 0x98
 8033e48:	4651      	mov	r1, sl
 8033e4a:	f7f8 f9a1 	bl	802c190 <__sprint_r>
 8033e4e:	2800      	cmp	r0, #0
 8033e50:	d1e5      	bne.n	8033e1e <_vfprintf_r+0x139e>
 8033e52:	ac29      	add	r4, sp, #164	@ 0xa4
 8033e54:	e7f4      	b.n	8033e40 <_vfprintf_r+0x13c0>
 8033e56:	9803      	ldr	r0, [sp, #12]
 8033e58:	4659      	mov	r1, fp
 8033e5a:	f7fa fad5 	bl	802e408 <_free_r>
 8033e5e:	f7ff ba6f 	b.w	8033340 <_vfprintf_r+0x8c0>
 8033e62:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033e64:	b91b      	cbnz	r3, 8033e6e <_vfprintf_r+0x13ee>
 8033e66:	2300      	movs	r3, #0
 8033e68:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033e6a:	f7ff b86d 	b.w	8032f48 <_vfprintf_r+0x4c8>
 8033e6e:	9803      	ldr	r0, [sp, #12]
 8033e70:	aa26      	add	r2, sp, #152	@ 0x98
 8033e72:	4651      	mov	r1, sl
 8033e74:	f7f8 f98c 	bl	802c190 <__sprint_r>
 8033e78:	2800      	cmp	r0, #0
 8033e7a:	d0f4      	beq.n	8033e66 <_vfprintf_r+0x13e6>
 8033e7c:	f7ff b864 	b.w	8032f48 <_vfprintf_r+0x4c8>
 8033e80:	ea57 0208 	orrs.w	r2, r7, r8
 8033e84:	9508      	str	r5, [sp, #32]
 8033e86:	f43f ab73 	beq.w	8033570 <_vfprintf_r+0xaf0>
 8033e8a:	2b01      	cmp	r3, #1
 8033e8c:	f43f abf4 	beq.w	8033678 <_vfprintf_r+0xbf8>
 8033e90:	2b02      	cmp	r3, #2
 8033e92:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8033e96:	f43f ac3b 	beq.w	8033710 <_vfprintf_r+0xc90>
 8033e9a:	f007 0307 	and.w	r3, r7, #7
 8033e9e:	08ff      	lsrs	r7, r7, #3
 8033ea0:	ea47 7748 	orr.w	r7, r7, r8, lsl #29
 8033ea4:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8033ea8:	3330      	adds	r3, #48	@ 0x30
 8033eaa:	ea57 0108 	orrs.w	r1, r7, r8
 8033eae:	464a      	mov	r2, r9
 8033eb0:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8033eb4:	d1f1      	bne.n	8033e9a <_vfprintf_r+0x141a>
 8033eb6:	9908      	ldr	r1, [sp, #32]
 8033eb8:	07cf      	lsls	r7, r1, #31
 8033eba:	d506      	bpl.n	8033eca <_vfprintf_r+0x144a>
 8033ebc:	2b30      	cmp	r3, #48	@ 0x30
 8033ebe:	d004      	beq.n	8033eca <_vfprintf_r+0x144a>
 8033ec0:	2330      	movs	r3, #48	@ 0x30
 8033ec2:	f809 3c01 	strb.w	r3, [r9, #-1]
 8033ec6:	f1a2 0902 	sub.w	r9, r2, #2
 8033eca:	ab52      	add	r3, sp, #328	@ 0x148
 8033ecc:	9d08      	ldr	r5, [sp, #32]
 8033ece:	9610      	str	r6, [sp, #64]	@ 0x40
 8033ed0:	f04f 0b00 	mov.w	fp, #0
 8033ed4:	eba3 0609 	sub.w	r6, r3, r9
 8033ed8:	46d8      	mov	r8, fp
 8033eda:	f8cd b020 	str.w	fp, [sp, #32]
 8033ede:	465f      	mov	r7, fp
 8033ee0:	f7ff b95d 	b.w	803319e <_vfprintf_r+0x71e>
 8033ee4:	0803e17a 	.word	0x0803e17a
 8033ee8:	0803e18a 	.word	0x0803e18a

08033eec <__sbprintf>:
 8033eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8033eee:	461f      	mov	r7, r3
 8033ef0:	898b      	ldrh	r3, [r1, #12]
 8033ef2:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8033ef6:	f023 0302 	bic.w	r3, r3, #2
 8033efa:	f8ad 300c 	strh.w	r3, [sp, #12]
 8033efe:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8033f00:	9319      	str	r3, [sp, #100]	@ 0x64
 8033f02:	89cb      	ldrh	r3, [r1, #14]
 8033f04:	f8ad 300e 	strh.w	r3, [sp, #14]
 8033f08:	69cb      	ldr	r3, [r1, #28]
 8033f0a:	9307      	str	r3, [sp, #28]
 8033f0c:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8033f0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8033f10:	ab1a      	add	r3, sp, #104	@ 0x68
 8033f12:	9300      	str	r3, [sp, #0]
 8033f14:	9304      	str	r3, [sp, #16]
 8033f16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8033f1a:	4615      	mov	r5, r2
 8033f1c:	4606      	mov	r6, r0
 8033f1e:	9302      	str	r3, [sp, #8]
 8033f20:	9305      	str	r3, [sp, #20]
 8033f22:	a816      	add	r0, sp, #88	@ 0x58
 8033f24:	2300      	movs	r3, #0
 8033f26:	460c      	mov	r4, r1
 8033f28:	9306      	str	r3, [sp, #24]
 8033f2a:	f7fa f9df 	bl	802e2ec <__retarget_lock_init_recursive>
 8033f2e:	462a      	mov	r2, r5
 8033f30:	463b      	mov	r3, r7
 8033f32:	4669      	mov	r1, sp
 8033f34:	4630      	mov	r0, r6
 8033f36:	f7fe fda3 	bl	8032a80 <_vfprintf_r>
 8033f3a:	1e05      	subs	r5, r0, #0
 8033f3c:	db07      	blt.n	8033f4e <__sbprintf+0x62>
 8033f3e:	4669      	mov	r1, sp
 8033f40:	4630      	mov	r0, r6
 8033f42:	f7f8 fa0d 	bl	802c360 <_fflush_r>
 8033f46:	2800      	cmp	r0, #0
 8033f48:	bf18      	it	ne
 8033f4a:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8033f4e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8033f52:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8033f54:	065b      	lsls	r3, r3, #25
 8033f56:	bf42      	ittt	mi
 8033f58:	89a3      	ldrhmi	r3, [r4, #12]
 8033f5a:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8033f5e:	81a3      	strhmi	r3, [r4, #12]
 8033f60:	f7fa f9c5 	bl	802e2ee <__retarget_lock_close_recursive>
 8033f64:	4628      	mov	r0, r5
 8033f66:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8033f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08033f6c <__sfvwrite_r>:
 8033f6c:	6893      	ldr	r3, [r2, #8]
 8033f6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033f72:	4606      	mov	r6, r0
 8033f74:	460c      	mov	r4, r1
 8033f76:	4691      	mov	r9, r2
 8033f78:	b91b      	cbnz	r3, 8033f82 <__sfvwrite_r+0x16>
 8033f7a:	2000      	movs	r0, #0
 8033f7c:	b003      	add	sp, #12
 8033f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033f82:	898b      	ldrh	r3, [r1, #12]
 8033f84:	0718      	lsls	r0, r3, #28
 8033f86:	d550      	bpl.n	803402a <__sfvwrite_r+0xbe>
 8033f88:	690b      	ldr	r3, [r1, #16]
 8033f8a:	2b00      	cmp	r3, #0
 8033f8c:	d04d      	beq.n	803402a <__sfvwrite_r+0xbe>
 8033f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8033f92:	f8d9 8000 	ldr.w	r8, [r9]
 8033f96:	f013 0702 	ands.w	r7, r3, #2
 8033f9a:	d16b      	bne.n	8034074 <__sfvwrite_r+0x108>
 8033f9c:	f013 0301 	ands.w	r3, r3, #1
 8033fa0:	f000 809c 	beq.w	80340dc <__sfvwrite_r+0x170>
 8033fa4:	4638      	mov	r0, r7
 8033fa6:	46ba      	mov	sl, r7
 8033fa8:	46bb      	mov	fp, r7
 8033faa:	f1bb 0f00 	cmp.w	fp, #0
 8033fae:	f000 8103 	beq.w	80341b8 <__sfvwrite_r+0x24c>
 8033fb2:	b950      	cbnz	r0, 8033fca <__sfvwrite_r+0x5e>
 8033fb4:	465a      	mov	r2, fp
 8033fb6:	210a      	movs	r1, #10
 8033fb8:	4650      	mov	r0, sl
 8033fba:	f7dc f921 	bl	8010200 <memchr>
 8033fbe:	2800      	cmp	r0, #0
 8033fc0:	f000 8100 	beq.w	80341c4 <__sfvwrite_r+0x258>
 8033fc4:	3001      	adds	r0, #1
 8033fc6:	eba0 070a 	sub.w	r7, r0, sl
 8033fca:	6820      	ldr	r0, [r4, #0]
 8033fcc:	6921      	ldr	r1, [r4, #16]
 8033fce:	68a5      	ldr	r5, [r4, #8]
 8033fd0:	6963      	ldr	r3, [r4, #20]
 8033fd2:	455f      	cmp	r7, fp
 8033fd4:	463a      	mov	r2, r7
 8033fd6:	bf28      	it	cs
 8033fd8:	465a      	movcs	r2, fp
 8033fda:	4288      	cmp	r0, r1
 8033fdc:	f240 80f5 	bls.w	80341ca <__sfvwrite_r+0x25e>
 8033fe0:	441d      	add	r5, r3
 8033fe2:	42aa      	cmp	r2, r5
 8033fe4:	f340 80f1 	ble.w	80341ca <__sfvwrite_r+0x25e>
 8033fe8:	4651      	mov	r1, sl
 8033fea:	462a      	mov	r2, r5
 8033fec:	f7f8 fbee 	bl	802c7cc <memmove>
 8033ff0:	6823      	ldr	r3, [r4, #0]
 8033ff2:	442b      	add	r3, r5
 8033ff4:	6023      	str	r3, [r4, #0]
 8033ff6:	4621      	mov	r1, r4
 8033ff8:	4630      	mov	r0, r6
 8033ffa:	f7f8 f9b1 	bl	802c360 <_fflush_r>
 8033ffe:	2800      	cmp	r0, #0
 8034000:	d167      	bne.n	80340d2 <__sfvwrite_r+0x166>
 8034002:	1b7f      	subs	r7, r7, r5
 8034004:	f040 80f9 	bne.w	80341fa <__sfvwrite_r+0x28e>
 8034008:	4621      	mov	r1, r4
 803400a:	4630      	mov	r0, r6
 803400c:	f7f8 f9a8 	bl	802c360 <_fflush_r>
 8034010:	2800      	cmp	r0, #0
 8034012:	d15e      	bne.n	80340d2 <__sfvwrite_r+0x166>
 8034014:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8034018:	1b5b      	subs	r3, r3, r5
 803401a:	44aa      	add	sl, r5
 803401c:	ebab 0b05 	sub.w	fp, fp, r5
 8034020:	f8c9 3008 	str.w	r3, [r9, #8]
 8034024:	2b00      	cmp	r3, #0
 8034026:	d1c0      	bne.n	8033faa <__sfvwrite_r+0x3e>
 8034028:	e7a7      	b.n	8033f7a <__sfvwrite_r+0xe>
 803402a:	4621      	mov	r1, r4
 803402c:	4630      	mov	r0, r6
 803402e:	f7f8 fb67 	bl	802c700 <__swsetup_r>
 8034032:	2800      	cmp	r0, #0
 8034034:	d0ab      	beq.n	8033f8e <__sfvwrite_r+0x22>
 8034036:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803403a:	e79f      	b.n	8033f7c <__sfvwrite_r+0x10>
 803403c:	e9d8 a500 	ldrd	sl, r5, [r8]
 8034040:	f108 0808 	add.w	r8, r8, #8
 8034044:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8034048:	69e1      	ldr	r1, [r4, #28]
 803404a:	2d00      	cmp	r5, #0
 803404c:	d0f6      	beq.n	803403c <__sfvwrite_r+0xd0>
 803404e:	42bd      	cmp	r5, r7
 8034050:	462b      	mov	r3, r5
 8034052:	4652      	mov	r2, sl
 8034054:	bf28      	it	cs
 8034056:	463b      	movcs	r3, r7
 8034058:	4630      	mov	r0, r6
 803405a:	47d8      	blx	fp
 803405c:	2800      	cmp	r0, #0
 803405e:	dd38      	ble.n	80340d2 <__sfvwrite_r+0x166>
 8034060:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8034064:	1a1b      	subs	r3, r3, r0
 8034066:	4482      	add	sl, r0
 8034068:	1a2d      	subs	r5, r5, r0
 803406a:	f8c9 3008 	str.w	r3, [r9, #8]
 803406e:	2b00      	cmp	r3, #0
 8034070:	d1e8      	bne.n	8034044 <__sfvwrite_r+0xd8>
 8034072:	e782      	b.n	8033f7a <__sfvwrite_r+0xe>
 8034074:	f04f 0a00 	mov.w	sl, #0
 8034078:	4f61      	ldr	r7, [pc, #388]	@ (8034200 <__sfvwrite_r+0x294>)
 803407a:	4655      	mov	r5, sl
 803407c:	e7e2      	b.n	8034044 <__sfvwrite_r+0xd8>
 803407e:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8034082:	f108 0808 	add.w	r8, r8, #8
 8034086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803408a:	6820      	ldr	r0, [r4, #0]
 803408c:	68a2      	ldr	r2, [r4, #8]
 803408e:	f1ba 0f00 	cmp.w	sl, #0
 8034092:	d0f4      	beq.n	803407e <__sfvwrite_r+0x112>
 8034094:	0599      	lsls	r1, r3, #22
 8034096:	d563      	bpl.n	8034160 <__sfvwrite_r+0x1f4>
 8034098:	4552      	cmp	r2, sl
 803409a:	d836      	bhi.n	803410a <__sfvwrite_r+0x19e>
 803409c:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 80340a0:	d033      	beq.n	803410a <__sfvwrite_r+0x19e>
 80340a2:	6921      	ldr	r1, [r4, #16]
 80340a4:	6965      	ldr	r5, [r4, #20]
 80340a6:	eba0 0b01 	sub.w	fp, r0, r1
 80340aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80340ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80340b2:	f10b 0201 	add.w	r2, fp, #1
 80340b6:	106d      	asrs	r5, r5, #1
 80340b8:	4452      	add	r2, sl
 80340ba:	4295      	cmp	r5, r2
 80340bc:	bf38      	it	cc
 80340be:	4615      	movcc	r5, r2
 80340c0:	055b      	lsls	r3, r3, #21
 80340c2:	d53d      	bpl.n	8034140 <__sfvwrite_r+0x1d4>
 80340c4:	4629      	mov	r1, r5
 80340c6:	4630      	mov	r0, r6
 80340c8:	f7fa fab6 	bl	802e638 <_malloc_r>
 80340cc:	b948      	cbnz	r0, 80340e2 <__sfvwrite_r+0x176>
 80340ce:	230c      	movs	r3, #12
 80340d0:	6033      	str	r3, [r6, #0]
 80340d2:	89a3      	ldrh	r3, [r4, #12]
 80340d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80340d8:	81a3      	strh	r3, [r4, #12]
 80340da:	e7ac      	b.n	8034036 <__sfvwrite_r+0xca>
 80340dc:	461f      	mov	r7, r3
 80340de:	469a      	mov	sl, r3
 80340e0:	e7d1      	b.n	8034086 <__sfvwrite_r+0x11a>
 80340e2:	465a      	mov	r2, fp
 80340e4:	6921      	ldr	r1, [r4, #16]
 80340e6:	9001      	str	r0, [sp, #4]
 80340e8:	f7fa f906 	bl	802e2f8 <memcpy>
 80340ec:	89a2      	ldrh	r2, [r4, #12]
 80340ee:	9b01      	ldr	r3, [sp, #4]
 80340f0:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80340f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80340f8:	81a2      	strh	r2, [r4, #12]
 80340fa:	6123      	str	r3, [r4, #16]
 80340fc:	6165      	str	r5, [r4, #20]
 80340fe:	445b      	add	r3, fp
 8034100:	eba5 050b 	sub.w	r5, r5, fp
 8034104:	6023      	str	r3, [r4, #0]
 8034106:	4652      	mov	r2, sl
 8034108:	60a5      	str	r5, [r4, #8]
 803410a:	4552      	cmp	r2, sl
 803410c:	bf28      	it	cs
 803410e:	4652      	movcs	r2, sl
 8034110:	6820      	ldr	r0, [r4, #0]
 8034112:	9201      	str	r2, [sp, #4]
 8034114:	4639      	mov	r1, r7
 8034116:	f7f8 fb59 	bl	802c7cc <memmove>
 803411a:	68a3      	ldr	r3, [r4, #8]
 803411c:	9a01      	ldr	r2, [sp, #4]
 803411e:	1a9b      	subs	r3, r3, r2
 8034120:	60a3      	str	r3, [r4, #8]
 8034122:	6823      	ldr	r3, [r4, #0]
 8034124:	4413      	add	r3, r2
 8034126:	4655      	mov	r5, sl
 8034128:	6023      	str	r3, [r4, #0]
 803412a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 803412e:	1b5b      	subs	r3, r3, r5
 8034130:	442f      	add	r7, r5
 8034132:	ebaa 0a05 	sub.w	sl, sl, r5
 8034136:	f8c9 3008 	str.w	r3, [r9, #8]
 803413a:	2b00      	cmp	r3, #0
 803413c:	d1a3      	bne.n	8034086 <__sfvwrite_r+0x11a>
 803413e:	e71c      	b.n	8033f7a <__sfvwrite_r+0xe>
 8034140:	462a      	mov	r2, r5
 8034142:	4630      	mov	r0, r6
 8034144:	f000 f8f4 	bl	8034330 <_realloc_r>
 8034148:	4603      	mov	r3, r0
 803414a:	2800      	cmp	r0, #0
 803414c:	d1d5      	bne.n	80340fa <__sfvwrite_r+0x18e>
 803414e:	6921      	ldr	r1, [r4, #16]
 8034150:	4630      	mov	r0, r6
 8034152:	f7fa f959 	bl	802e408 <_free_r>
 8034156:	89a3      	ldrh	r3, [r4, #12]
 8034158:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 803415c:	81a3      	strh	r3, [r4, #12]
 803415e:	e7b6      	b.n	80340ce <__sfvwrite_r+0x162>
 8034160:	6923      	ldr	r3, [r4, #16]
 8034162:	4283      	cmp	r3, r0
 8034164:	d302      	bcc.n	803416c <__sfvwrite_r+0x200>
 8034166:	6961      	ldr	r1, [r4, #20]
 8034168:	4551      	cmp	r1, sl
 803416a:	d915      	bls.n	8034198 <__sfvwrite_r+0x22c>
 803416c:	4552      	cmp	r2, sl
 803416e:	bf28      	it	cs
 8034170:	4652      	movcs	r2, sl
 8034172:	4639      	mov	r1, r7
 8034174:	4615      	mov	r5, r2
 8034176:	f7f8 fb29 	bl	802c7cc <memmove>
 803417a:	68a3      	ldr	r3, [r4, #8]
 803417c:	6822      	ldr	r2, [r4, #0]
 803417e:	1b5b      	subs	r3, r3, r5
 8034180:	442a      	add	r2, r5
 8034182:	60a3      	str	r3, [r4, #8]
 8034184:	6022      	str	r2, [r4, #0]
 8034186:	2b00      	cmp	r3, #0
 8034188:	d1cf      	bne.n	803412a <__sfvwrite_r+0x1be>
 803418a:	4621      	mov	r1, r4
 803418c:	4630      	mov	r0, r6
 803418e:	f7f8 f8e7 	bl	802c360 <_fflush_r>
 8034192:	2800      	cmp	r0, #0
 8034194:	d0c9      	beq.n	803412a <__sfvwrite_r+0x1be>
 8034196:	e79c      	b.n	80340d2 <__sfvwrite_r+0x166>
 8034198:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 803419c:	4553      	cmp	r3, sl
 803419e:	bf28      	it	cs
 80341a0:	4653      	movcs	r3, sl
 80341a2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80341a4:	fb93 f3f1 	sdiv	r3, r3, r1
 80341a8:	463a      	mov	r2, r7
 80341aa:	434b      	muls	r3, r1
 80341ac:	4630      	mov	r0, r6
 80341ae:	69e1      	ldr	r1, [r4, #28]
 80341b0:	47a8      	blx	r5
 80341b2:	1e05      	subs	r5, r0, #0
 80341b4:	dcb9      	bgt.n	803412a <__sfvwrite_r+0x1be>
 80341b6:	e78c      	b.n	80340d2 <__sfvwrite_r+0x166>
 80341b8:	e9d8 ab00 	ldrd	sl, fp, [r8]
 80341bc:	2000      	movs	r0, #0
 80341be:	f108 0808 	add.w	r8, r8, #8
 80341c2:	e6f2      	b.n	8033faa <__sfvwrite_r+0x3e>
 80341c4:	f10b 0701 	add.w	r7, fp, #1
 80341c8:	e6ff      	b.n	8033fca <__sfvwrite_r+0x5e>
 80341ca:	4293      	cmp	r3, r2
 80341cc:	dc08      	bgt.n	80341e0 <__sfvwrite_r+0x274>
 80341ce:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80341d0:	69e1      	ldr	r1, [r4, #28]
 80341d2:	4652      	mov	r2, sl
 80341d4:	4630      	mov	r0, r6
 80341d6:	47a8      	blx	r5
 80341d8:	1e05      	subs	r5, r0, #0
 80341da:	f73f af12 	bgt.w	8034002 <__sfvwrite_r+0x96>
 80341de:	e778      	b.n	80340d2 <__sfvwrite_r+0x166>
 80341e0:	4651      	mov	r1, sl
 80341e2:	9201      	str	r2, [sp, #4]
 80341e4:	f7f8 faf2 	bl	802c7cc <memmove>
 80341e8:	9a01      	ldr	r2, [sp, #4]
 80341ea:	68a3      	ldr	r3, [r4, #8]
 80341ec:	1a9b      	subs	r3, r3, r2
 80341ee:	60a3      	str	r3, [r4, #8]
 80341f0:	6823      	ldr	r3, [r4, #0]
 80341f2:	4413      	add	r3, r2
 80341f4:	6023      	str	r3, [r4, #0]
 80341f6:	4615      	mov	r5, r2
 80341f8:	e703      	b.n	8034002 <__sfvwrite_r+0x96>
 80341fa:	2001      	movs	r0, #1
 80341fc:	e70a      	b.n	8034014 <__sfvwrite_r+0xa8>
 80341fe:	bf00      	nop
 8034200:	7ffffc00 	.word	0x7ffffc00

08034204 <__malloc_lock>:
 8034204:	4801      	ldr	r0, [pc, #4]	@ (803420c <__malloc_lock+0x8>)
 8034206:	f7fa b874 	b.w	802e2f2 <__retarget_lock_acquire_recursive>
 803420a:	bf00      	nop
 803420c:	2001a292 	.word	0x2001a292

08034210 <__malloc_unlock>:
 8034210:	4801      	ldr	r0, [pc, #4]	@ (8034218 <__malloc_unlock+0x8>)
 8034212:	f7fa b870 	b.w	802e2f6 <__retarget_lock_release_recursive>
 8034216:	bf00      	nop
 8034218:	2001a292 	.word	0x2001a292

0803421c <_fwalk_sglue>:
 803421c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8034220:	4607      	mov	r7, r0
 8034222:	4688      	mov	r8, r1
 8034224:	4614      	mov	r4, r2
 8034226:	2600      	movs	r6, #0
 8034228:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 803422c:	f1b9 0901 	subs.w	r9, r9, #1
 8034230:	d505      	bpl.n	803423e <_fwalk_sglue+0x22>
 8034232:	6824      	ldr	r4, [r4, #0]
 8034234:	2c00      	cmp	r4, #0
 8034236:	d1f7      	bne.n	8034228 <_fwalk_sglue+0xc>
 8034238:	4630      	mov	r0, r6
 803423a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803423e:	89ab      	ldrh	r3, [r5, #12]
 8034240:	2b01      	cmp	r3, #1
 8034242:	d907      	bls.n	8034254 <_fwalk_sglue+0x38>
 8034244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8034248:	3301      	adds	r3, #1
 803424a:	d003      	beq.n	8034254 <_fwalk_sglue+0x38>
 803424c:	4629      	mov	r1, r5
 803424e:	4638      	mov	r0, r7
 8034250:	47c0      	blx	r8
 8034252:	4306      	orrs	r6, r0
 8034254:	3568      	adds	r5, #104	@ 0x68
 8034256:	e7e9      	b.n	803422c <_fwalk_sglue+0x10>

08034258 <realloc>:
 8034258:	4b02      	ldr	r3, [pc, #8]	@ (8034264 <realloc+0xc>)
 803425a:	460a      	mov	r2, r1
 803425c:	4601      	mov	r1, r0
 803425e:	6818      	ldr	r0, [r3, #0]
 8034260:	f000 b866 	b.w	8034330 <_realloc_r>
 8034264:	2000017c 	.word	0x2000017c

08034268 <__swhatbuf_r>:
 8034268:	b570      	push	{r4, r5, r6, lr}
 803426a:	460c      	mov	r4, r1
 803426c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8034270:	2900      	cmp	r1, #0
 8034272:	b096      	sub	sp, #88	@ 0x58
 8034274:	4615      	mov	r5, r2
 8034276:	461e      	mov	r6, r3
 8034278:	da07      	bge.n	803428a <__swhatbuf_r+0x22>
 803427a:	89a1      	ldrh	r1, [r4, #12]
 803427c:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8034280:	d117      	bne.n	80342b2 <__swhatbuf_r+0x4a>
 8034282:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8034286:	4608      	mov	r0, r1
 8034288:	e00f      	b.n	80342aa <__swhatbuf_r+0x42>
 803428a:	466a      	mov	r2, sp
 803428c:	f001 fa28 	bl	80356e0 <_fstat_r>
 8034290:	2800      	cmp	r0, #0
 8034292:	dbf2      	blt.n	803427a <__swhatbuf_r+0x12>
 8034294:	9901      	ldr	r1, [sp, #4]
 8034296:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 803429a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 803429e:	4259      	negs	r1, r3
 80342a0:	4159      	adcs	r1, r3
 80342a2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80342a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80342aa:	6031      	str	r1, [r6, #0]
 80342ac:	602b      	str	r3, [r5, #0]
 80342ae:	b016      	add	sp, #88	@ 0x58
 80342b0:	bd70      	pop	{r4, r5, r6, pc}
 80342b2:	2100      	movs	r1, #0
 80342b4:	2340      	movs	r3, #64	@ 0x40
 80342b6:	e7e6      	b.n	8034286 <__swhatbuf_r+0x1e>

080342b8 <__smakebuf_r>:
 80342b8:	898b      	ldrh	r3, [r1, #12]
 80342ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80342bc:	079d      	lsls	r5, r3, #30
 80342be:	4606      	mov	r6, r0
 80342c0:	460c      	mov	r4, r1
 80342c2:	d507      	bpl.n	80342d4 <__smakebuf_r+0x1c>
 80342c4:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 80342c8:	6023      	str	r3, [r4, #0]
 80342ca:	6123      	str	r3, [r4, #16]
 80342cc:	2301      	movs	r3, #1
 80342ce:	6163      	str	r3, [r4, #20]
 80342d0:	b003      	add	sp, #12
 80342d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80342d4:	ab01      	add	r3, sp, #4
 80342d6:	466a      	mov	r2, sp
 80342d8:	f7ff ffc6 	bl	8034268 <__swhatbuf_r>
 80342dc:	9f00      	ldr	r7, [sp, #0]
 80342de:	4605      	mov	r5, r0
 80342e0:	4639      	mov	r1, r7
 80342e2:	4630      	mov	r0, r6
 80342e4:	f7fa f9a8 	bl	802e638 <_malloc_r>
 80342e8:	b948      	cbnz	r0, 80342fe <__smakebuf_r+0x46>
 80342ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80342ee:	059a      	lsls	r2, r3, #22
 80342f0:	d4ee      	bmi.n	80342d0 <__smakebuf_r+0x18>
 80342f2:	f023 0303 	bic.w	r3, r3, #3
 80342f6:	f043 0302 	orr.w	r3, r3, #2
 80342fa:	81a3      	strh	r3, [r4, #12]
 80342fc:	e7e2      	b.n	80342c4 <__smakebuf_r+0xc>
 80342fe:	89a3      	ldrh	r3, [r4, #12]
 8034300:	6020      	str	r0, [r4, #0]
 8034302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8034306:	81a3      	strh	r3, [r4, #12]
 8034308:	9b01      	ldr	r3, [sp, #4]
 803430a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 803430e:	b15b      	cbz	r3, 8034328 <__smakebuf_r+0x70>
 8034310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8034314:	4630      	mov	r0, r6
 8034316:	f001 f9f5 	bl	8035704 <_isatty_r>
 803431a:	b128      	cbz	r0, 8034328 <__smakebuf_r+0x70>
 803431c:	89a3      	ldrh	r3, [r4, #12]
 803431e:	f023 0303 	bic.w	r3, r3, #3
 8034322:	f043 0301 	orr.w	r3, r3, #1
 8034326:	81a3      	strh	r3, [r4, #12]
 8034328:	89a3      	ldrh	r3, [r4, #12]
 803432a:	431d      	orrs	r5, r3
 803432c:	81a5      	strh	r5, [r4, #12]
 803432e:	e7cf      	b.n	80342d0 <__smakebuf_r+0x18>

08034330 <_realloc_r>:
 8034330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034334:	4682      	mov	sl, r0
 8034336:	4693      	mov	fp, r2
 8034338:	460c      	mov	r4, r1
 803433a:	b929      	cbnz	r1, 8034348 <_realloc_r+0x18>
 803433c:	4611      	mov	r1, r2
 803433e:	b003      	add	sp, #12
 8034340:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034344:	f7fa b978 	b.w	802e638 <_malloc_r>
 8034348:	f7ff ff5c 	bl	8034204 <__malloc_lock>
 803434c:	f10b 080b 	add.w	r8, fp, #11
 8034350:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8034354:	f1b8 0f16 	cmp.w	r8, #22
 8034358:	f1a4 0908 	sub.w	r9, r4, #8
 803435c:	f025 0603 	bic.w	r6, r5, #3
 8034360:	d908      	bls.n	8034374 <_realloc_r+0x44>
 8034362:	f038 0807 	bics.w	r8, r8, #7
 8034366:	d507      	bpl.n	8034378 <_realloc_r+0x48>
 8034368:	230c      	movs	r3, #12
 803436a:	f8ca 3000 	str.w	r3, [sl]
 803436e:	f04f 0b00 	mov.w	fp, #0
 8034372:	e032      	b.n	80343da <_realloc_r+0xaa>
 8034374:	f04f 0810 	mov.w	r8, #16
 8034378:	45c3      	cmp	fp, r8
 803437a:	d8f5      	bhi.n	8034368 <_realloc_r+0x38>
 803437c:	4546      	cmp	r6, r8
 803437e:	f280 8174 	bge.w	803466a <_realloc_r+0x33a>
 8034382:	4b9e      	ldr	r3, [pc, #632]	@ (80345fc <_realloc_r+0x2cc>)
 8034384:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8034388:	eb09 0106 	add.w	r1, r9, r6
 803438c:	458c      	cmp	ip, r1
 803438e:	6848      	ldr	r0, [r1, #4]
 8034390:	d005      	beq.n	803439e <_realloc_r+0x6e>
 8034392:	f020 0201 	bic.w	r2, r0, #1
 8034396:	440a      	add	r2, r1
 8034398:	6852      	ldr	r2, [r2, #4]
 803439a:	07d7      	lsls	r7, r2, #31
 803439c:	d449      	bmi.n	8034432 <_realloc_r+0x102>
 803439e:	f020 0003 	bic.w	r0, r0, #3
 80343a2:	458c      	cmp	ip, r1
 80343a4:	eb06 0700 	add.w	r7, r6, r0
 80343a8:	d11b      	bne.n	80343e2 <_realloc_r+0xb2>
 80343aa:	f108 0210 	add.w	r2, r8, #16
 80343ae:	42ba      	cmp	r2, r7
 80343b0:	dc41      	bgt.n	8034436 <_realloc_r+0x106>
 80343b2:	eb09 0208 	add.w	r2, r9, r8
 80343b6:	eba7 0708 	sub.w	r7, r7, r8
 80343ba:	f047 0701 	orr.w	r7, r7, #1
 80343be:	609a      	str	r2, [r3, #8]
 80343c0:	6057      	str	r7, [r2, #4]
 80343c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80343c6:	f003 0301 	and.w	r3, r3, #1
 80343ca:	ea43 0308 	orr.w	r3, r3, r8
 80343ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80343d2:	4650      	mov	r0, sl
 80343d4:	f7ff ff1c 	bl	8034210 <__malloc_unlock>
 80343d8:	46a3      	mov	fp, r4
 80343da:	4658      	mov	r0, fp
 80343dc:	b003      	add	sp, #12
 80343de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80343e2:	45b8      	cmp	r8, r7
 80343e4:	dc27      	bgt.n	8034436 <_realloc_r+0x106>
 80343e6:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80343ea:	60d3      	str	r3, [r2, #12]
 80343ec:	609a      	str	r2, [r3, #8]
 80343ee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80343f2:	eba7 0008 	sub.w	r0, r7, r8
 80343f6:	280f      	cmp	r0, #15
 80343f8:	f003 0301 	and.w	r3, r3, #1
 80343fc:	eb09 0207 	add.w	r2, r9, r7
 8034400:	f240 8135 	bls.w	803466e <_realloc_r+0x33e>
 8034404:	eb09 0108 	add.w	r1, r9, r8
 8034408:	ea48 0303 	orr.w	r3, r8, r3
 803440c:	f040 0001 	orr.w	r0, r0, #1
 8034410:	f8c9 3004 	str.w	r3, [r9, #4]
 8034414:	6048      	str	r0, [r1, #4]
 8034416:	6853      	ldr	r3, [r2, #4]
 8034418:	f043 0301 	orr.w	r3, r3, #1
 803441c:	6053      	str	r3, [r2, #4]
 803441e:	3108      	adds	r1, #8
 8034420:	4650      	mov	r0, sl
 8034422:	f7f9 fff1 	bl	802e408 <_free_r>
 8034426:	4650      	mov	r0, sl
 8034428:	f7ff fef2 	bl	8034210 <__malloc_unlock>
 803442c:	f109 0b08 	add.w	fp, r9, #8
 8034430:	e7d3      	b.n	80343da <_realloc_r+0xaa>
 8034432:	2000      	movs	r0, #0
 8034434:	4601      	mov	r1, r0
 8034436:	07ea      	lsls	r2, r5, #31
 8034438:	f100 80c7 	bmi.w	80345ca <_realloc_r+0x29a>
 803443c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8034440:	eba9 0505 	sub.w	r5, r9, r5
 8034444:	686a      	ldr	r2, [r5, #4]
 8034446:	f022 0203 	bic.w	r2, r2, #3
 803444a:	4432      	add	r2, r6
 803444c:	9201      	str	r2, [sp, #4]
 803444e:	2900      	cmp	r1, #0
 8034450:	f000 8086 	beq.w	8034560 <_realloc_r+0x230>
 8034454:	458c      	cmp	ip, r1
 8034456:	eb00 0702 	add.w	r7, r0, r2
 803445a:	d149      	bne.n	80344f0 <_realloc_r+0x1c0>
 803445c:	f108 0210 	add.w	r2, r8, #16
 8034460:	42ba      	cmp	r2, r7
 8034462:	dc7d      	bgt.n	8034560 <_realloc_r+0x230>
 8034464:	46ab      	mov	fp, r5
 8034466:	68ea      	ldr	r2, [r5, #12]
 8034468:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 803446c:	60ca      	str	r2, [r1, #12]
 803446e:	6091      	str	r1, [r2, #8]
 8034470:	1f32      	subs	r2, r6, #4
 8034472:	2a24      	cmp	r2, #36	@ 0x24
 8034474:	d836      	bhi.n	80344e4 <_realloc_r+0x1b4>
 8034476:	2a13      	cmp	r2, #19
 8034478:	d932      	bls.n	80344e0 <_realloc_r+0x1b0>
 803447a:	6821      	ldr	r1, [r4, #0]
 803447c:	60a9      	str	r1, [r5, #8]
 803447e:	6861      	ldr	r1, [r4, #4]
 8034480:	60e9      	str	r1, [r5, #12]
 8034482:	2a1b      	cmp	r2, #27
 8034484:	d81a      	bhi.n	80344bc <_realloc_r+0x18c>
 8034486:	3408      	adds	r4, #8
 8034488:	f105 0210 	add.w	r2, r5, #16
 803448c:	6821      	ldr	r1, [r4, #0]
 803448e:	6011      	str	r1, [r2, #0]
 8034490:	6861      	ldr	r1, [r4, #4]
 8034492:	6051      	str	r1, [r2, #4]
 8034494:	68a1      	ldr	r1, [r4, #8]
 8034496:	6091      	str	r1, [r2, #8]
 8034498:	eb05 0208 	add.w	r2, r5, r8
 803449c:	eba7 0708 	sub.w	r7, r7, r8
 80344a0:	f047 0701 	orr.w	r7, r7, #1
 80344a4:	609a      	str	r2, [r3, #8]
 80344a6:	6057      	str	r7, [r2, #4]
 80344a8:	686b      	ldr	r3, [r5, #4]
 80344aa:	f003 0301 	and.w	r3, r3, #1
 80344ae:	ea43 0308 	orr.w	r3, r3, r8
 80344b2:	606b      	str	r3, [r5, #4]
 80344b4:	4650      	mov	r0, sl
 80344b6:	f7ff feab 	bl	8034210 <__malloc_unlock>
 80344ba:	e78e      	b.n	80343da <_realloc_r+0xaa>
 80344bc:	68a1      	ldr	r1, [r4, #8]
 80344be:	6129      	str	r1, [r5, #16]
 80344c0:	68e1      	ldr	r1, [r4, #12]
 80344c2:	6169      	str	r1, [r5, #20]
 80344c4:	2a24      	cmp	r2, #36	@ 0x24
 80344c6:	bf01      	itttt	eq
 80344c8:	6922      	ldreq	r2, [r4, #16]
 80344ca:	61aa      	streq	r2, [r5, #24]
 80344cc:	6961      	ldreq	r1, [r4, #20]
 80344ce:	61e9      	streq	r1, [r5, #28]
 80344d0:	bf19      	ittee	ne
 80344d2:	3410      	addne	r4, #16
 80344d4:	f105 0218 	addne.w	r2, r5, #24
 80344d8:	f105 0220 	addeq.w	r2, r5, #32
 80344dc:	3418      	addeq	r4, #24
 80344de:	e7d5      	b.n	803448c <_realloc_r+0x15c>
 80344e0:	465a      	mov	r2, fp
 80344e2:	e7d3      	b.n	803448c <_realloc_r+0x15c>
 80344e4:	4621      	mov	r1, r4
 80344e6:	4658      	mov	r0, fp
 80344e8:	f7f8 f970 	bl	802c7cc <memmove>
 80344ec:	4b43      	ldr	r3, [pc, #268]	@ (80345fc <_realloc_r+0x2cc>)
 80344ee:	e7d3      	b.n	8034498 <_realloc_r+0x168>
 80344f0:	45b8      	cmp	r8, r7
 80344f2:	dc35      	bgt.n	8034560 <_realloc_r+0x230>
 80344f4:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80344f8:	4628      	mov	r0, r5
 80344fa:	60d3      	str	r3, [r2, #12]
 80344fc:	609a      	str	r2, [r3, #8]
 80344fe:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8034502:	68eb      	ldr	r3, [r5, #12]
 8034504:	60d3      	str	r3, [r2, #12]
 8034506:	609a      	str	r2, [r3, #8]
 8034508:	1f32      	subs	r2, r6, #4
 803450a:	2a24      	cmp	r2, #36	@ 0x24
 803450c:	d824      	bhi.n	8034558 <_realloc_r+0x228>
 803450e:	2a13      	cmp	r2, #19
 8034510:	d908      	bls.n	8034524 <_realloc_r+0x1f4>
 8034512:	6823      	ldr	r3, [r4, #0]
 8034514:	60ab      	str	r3, [r5, #8]
 8034516:	6863      	ldr	r3, [r4, #4]
 8034518:	60eb      	str	r3, [r5, #12]
 803451a:	2a1b      	cmp	r2, #27
 803451c:	d80a      	bhi.n	8034534 <_realloc_r+0x204>
 803451e:	3408      	adds	r4, #8
 8034520:	f105 0010 	add.w	r0, r5, #16
 8034524:	6823      	ldr	r3, [r4, #0]
 8034526:	6003      	str	r3, [r0, #0]
 8034528:	6863      	ldr	r3, [r4, #4]
 803452a:	6043      	str	r3, [r0, #4]
 803452c:	68a3      	ldr	r3, [r4, #8]
 803452e:	6083      	str	r3, [r0, #8]
 8034530:	46a9      	mov	r9, r5
 8034532:	e75c      	b.n	80343ee <_realloc_r+0xbe>
 8034534:	68a3      	ldr	r3, [r4, #8]
 8034536:	612b      	str	r3, [r5, #16]
 8034538:	68e3      	ldr	r3, [r4, #12]
 803453a:	616b      	str	r3, [r5, #20]
 803453c:	2a24      	cmp	r2, #36	@ 0x24
 803453e:	bf01      	itttt	eq
 8034540:	6923      	ldreq	r3, [r4, #16]
 8034542:	61ab      	streq	r3, [r5, #24]
 8034544:	6963      	ldreq	r3, [r4, #20]
 8034546:	61eb      	streq	r3, [r5, #28]
 8034548:	bf19      	ittee	ne
 803454a:	3410      	addne	r4, #16
 803454c:	f105 0018 	addne.w	r0, r5, #24
 8034550:	f105 0020 	addeq.w	r0, r5, #32
 8034554:	3418      	addeq	r4, #24
 8034556:	e7e5      	b.n	8034524 <_realloc_r+0x1f4>
 8034558:	4621      	mov	r1, r4
 803455a:	f7f8 f937 	bl	802c7cc <memmove>
 803455e:	e7e7      	b.n	8034530 <_realloc_r+0x200>
 8034560:	9b01      	ldr	r3, [sp, #4]
 8034562:	4598      	cmp	r8, r3
 8034564:	dc31      	bgt.n	80345ca <_realloc_r+0x29a>
 8034566:	4628      	mov	r0, r5
 8034568:	68eb      	ldr	r3, [r5, #12]
 803456a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803456e:	60d3      	str	r3, [r2, #12]
 8034570:	609a      	str	r2, [r3, #8]
 8034572:	1f32      	subs	r2, r6, #4
 8034574:	2a24      	cmp	r2, #36	@ 0x24
 8034576:	d824      	bhi.n	80345c2 <_realloc_r+0x292>
 8034578:	2a13      	cmp	r2, #19
 803457a:	d908      	bls.n	803458e <_realloc_r+0x25e>
 803457c:	6823      	ldr	r3, [r4, #0]
 803457e:	60ab      	str	r3, [r5, #8]
 8034580:	6863      	ldr	r3, [r4, #4]
 8034582:	60eb      	str	r3, [r5, #12]
 8034584:	2a1b      	cmp	r2, #27
 8034586:	d80a      	bhi.n	803459e <_realloc_r+0x26e>
 8034588:	3408      	adds	r4, #8
 803458a:	f105 0010 	add.w	r0, r5, #16
 803458e:	6823      	ldr	r3, [r4, #0]
 8034590:	6003      	str	r3, [r0, #0]
 8034592:	6863      	ldr	r3, [r4, #4]
 8034594:	6043      	str	r3, [r0, #4]
 8034596:	68a3      	ldr	r3, [r4, #8]
 8034598:	6083      	str	r3, [r0, #8]
 803459a:	9f01      	ldr	r7, [sp, #4]
 803459c:	e7c8      	b.n	8034530 <_realloc_r+0x200>
 803459e:	68a3      	ldr	r3, [r4, #8]
 80345a0:	612b      	str	r3, [r5, #16]
 80345a2:	68e3      	ldr	r3, [r4, #12]
 80345a4:	616b      	str	r3, [r5, #20]
 80345a6:	2a24      	cmp	r2, #36	@ 0x24
 80345a8:	bf01      	itttt	eq
 80345aa:	6923      	ldreq	r3, [r4, #16]
 80345ac:	61ab      	streq	r3, [r5, #24]
 80345ae:	6963      	ldreq	r3, [r4, #20]
 80345b0:	61eb      	streq	r3, [r5, #28]
 80345b2:	bf19      	ittee	ne
 80345b4:	3410      	addne	r4, #16
 80345b6:	f105 0018 	addne.w	r0, r5, #24
 80345ba:	f105 0020 	addeq.w	r0, r5, #32
 80345be:	3418      	addeq	r4, #24
 80345c0:	e7e5      	b.n	803458e <_realloc_r+0x25e>
 80345c2:	4621      	mov	r1, r4
 80345c4:	f7f8 f902 	bl	802c7cc <memmove>
 80345c8:	e7e7      	b.n	803459a <_realloc_r+0x26a>
 80345ca:	4659      	mov	r1, fp
 80345cc:	4650      	mov	r0, sl
 80345ce:	f7fa f833 	bl	802e638 <_malloc_r>
 80345d2:	4683      	mov	fp, r0
 80345d4:	b918      	cbnz	r0, 80345de <_realloc_r+0x2ae>
 80345d6:	4650      	mov	r0, sl
 80345d8:	f7ff fe1a 	bl	8034210 <__malloc_unlock>
 80345dc:	e6c7      	b.n	803436e <_realloc_r+0x3e>
 80345de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80345e2:	f023 0301 	bic.w	r3, r3, #1
 80345e6:	444b      	add	r3, r9
 80345e8:	f1a0 0208 	sub.w	r2, r0, #8
 80345ec:	4293      	cmp	r3, r2
 80345ee:	d107      	bne.n	8034600 <_realloc_r+0x2d0>
 80345f0:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80345f4:	f027 0703 	bic.w	r7, r7, #3
 80345f8:	4437      	add	r7, r6
 80345fa:	e6f8      	b.n	80343ee <_realloc_r+0xbe>
 80345fc:	200002cc 	.word	0x200002cc
 8034600:	1f32      	subs	r2, r6, #4
 8034602:	2a24      	cmp	r2, #36	@ 0x24
 8034604:	d82d      	bhi.n	8034662 <_realloc_r+0x332>
 8034606:	2a13      	cmp	r2, #19
 8034608:	d928      	bls.n	803465c <_realloc_r+0x32c>
 803460a:	6823      	ldr	r3, [r4, #0]
 803460c:	6003      	str	r3, [r0, #0]
 803460e:	6863      	ldr	r3, [r4, #4]
 8034610:	6043      	str	r3, [r0, #4]
 8034612:	2a1b      	cmp	r2, #27
 8034614:	d80e      	bhi.n	8034634 <_realloc_r+0x304>
 8034616:	f104 0208 	add.w	r2, r4, #8
 803461a:	f100 0308 	add.w	r3, r0, #8
 803461e:	6811      	ldr	r1, [r2, #0]
 8034620:	6019      	str	r1, [r3, #0]
 8034622:	6851      	ldr	r1, [r2, #4]
 8034624:	6059      	str	r1, [r3, #4]
 8034626:	6892      	ldr	r2, [r2, #8]
 8034628:	609a      	str	r2, [r3, #8]
 803462a:	4621      	mov	r1, r4
 803462c:	4650      	mov	r0, sl
 803462e:	f7f9 feeb 	bl	802e408 <_free_r>
 8034632:	e73f      	b.n	80344b4 <_realloc_r+0x184>
 8034634:	68a3      	ldr	r3, [r4, #8]
 8034636:	6083      	str	r3, [r0, #8]
 8034638:	68e3      	ldr	r3, [r4, #12]
 803463a:	60c3      	str	r3, [r0, #12]
 803463c:	2a24      	cmp	r2, #36	@ 0x24
 803463e:	bf01      	itttt	eq
 8034640:	6923      	ldreq	r3, [r4, #16]
 8034642:	6103      	streq	r3, [r0, #16]
 8034644:	6961      	ldreq	r1, [r4, #20]
 8034646:	6141      	streq	r1, [r0, #20]
 8034648:	bf19      	ittee	ne
 803464a:	f104 0210 	addne.w	r2, r4, #16
 803464e:	f100 0310 	addne.w	r3, r0, #16
 8034652:	f104 0218 	addeq.w	r2, r4, #24
 8034656:	f100 0318 	addeq.w	r3, r0, #24
 803465a:	e7e0      	b.n	803461e <_realloc_r+0x2ee>
 803465c:	4603      	mov	r3, r0
 803465e:	4622      	mov	r2, r4
 8034660:	e7dd      	b.n	803461e <_realloc_r+0x2ee>
 8034662:	4621      	mov	r1, r4
 8034664:	f7f8 f8b2 	bl	802c7cc <memmove>
 8034668:	e7df      	b.n	803462a <_realloc_r+0x2fa>
 803466a:	4637      	mov	r7, r6
 803466c:	e6bf      	b.n	80343ee <_realloc_r+0xbe>
 803466e:	431f      	orrs	r7, r3
 8034670:	f8c9 7004 	str.w	r7, [r9, #4]
 8034674:	6853      	ldr	r3, [r2, #4]
 8034676:	f043 0301 	orr.w	r3, r3, #1
 803467a:	6053      	str	r3, [r2, #4]
 803467c:	e6d3      	b.n	8034426 <_realloc_r+0xf6>
 803467e:	bf00      	nop

08034680 <_putc_r>:
 8034680:	b570      	push	{r4, r5, r6, lr}
 8034682:	460d      	mov	r5, r1
 8034684:	4614      	mov	r4, r2
 8034686:	4606      	mov	r6, r0
 8034688:	b118      	cbz	r0, 8034692 <_putc_r+0x12>
 803468a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 803468c:	b90b      	cbnz	r3, 8034692 <_putc_r+0x12>
 803468e:	f7f7 ffe3 	bl	802c658 <__sinit>
 8034692:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8034694:	07d8      	lsls	r0, r3, #31
 8034696:	d405      	bmi.n	80346a4 <_putc_r+0x24>
 8034698:	89a3      	ldrh	r3, [r4, #12]
 803469a:	0599      	lsls	r1, r3, #22
 803469c:	d402      	bmi.n	80346a4 <_putc_r+0x24>
 803469e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80346a0:	f7f9 fe27 	bl	802e2f2 <__retarget_lock_acquire_recursive>
 80346a4:	68a3      	ldr	r3, [r4, #8]
 80346a6:	3b01      	subs	r3, #1
 80346a8:	2b00      	cmp	r3, #0
 80346aa:	60a3      	str	r3, [r4, #8]
 80346ac:	da05      	bge.n	80346ba <_putc_r+0x3a>
 80346ae:	69a2      	ldr	r2, [r4, #24]
 80346b0:	4293      	cmp	r3, r2
 80346b2:	db12      	blt.n	80346da <_putc_r+0x5a>
 80346b4:	b2eb      	uxtb	r3, r5
 80346b6:	2b0a      	cmp	r3, #10
 80346b8:	d00f      	beq.n	80346da <_putc_r+0x5a>
 80346ba:	6823      	ldr	r3, [r4, #0]
 80346bc:	1c5a      	adds	r2, r3, #1
 80346be:	6022      	str	r2, [r4, #0]
 80346c0:	701d      	strb	r5, [r3, #0]
 80346c2:	b2ed      	uxtb	r5, r5
 80346c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80346c6:	07da      	lsls	r2, r3, #31
 80346c8:	d405      	bmi.n	80346d6 <_putc_r+0x56>
 80346ca:	89a3      	ldrh	r3, [r4, #12]
 80346cc:	059b      	lsls	r3, r3, #22
 80346ce:	d402      	bmi.n	80346d6 <_putc_r+0x56>
 80346d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80346d2:	f7f9 fe10 	bl	802e2f6 <__retarget_lock_release_recursive>
 80346d6:	4628      	mov	r0, r5
 80346d8:	bd70      	pop	{r4, r5, r6, pc}
 80346da:	4629      	mov	r1, r5
 80346dc:	4622      	mov	r2, r4
 80346de:	4630      	mov	r0, r6
 80346e0:	f000 ff76 	bl	80355d0 <__swbuf_r>
 80346e4:	4605      	mov	r5, r0
 80346e6:	e7ed      	b.n	80346c4 <_putc_r+0x44>

080346e8 <sulp>:
 80346e8:	b570      	push	{r4, r5, r6, lr}
 80346ea:	4604      	mov	r4, r0
 80346ec:	460d      	mov	r5, r1
 80346ee:	ec45 4b10 	vmov	d0, r4, r5
 80346f2:	4616      	mov	r6, r2
 80346f4:	f002 fee4 	bl	80374c0 <__ulp>
 80346f8:	ec51 0b10 	vmov	r0, r1, d0
 80346fc:	b17e      	cbz	r6, 803471e <sulp+0x36>
 80346fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8034702:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8034706:	2b00      	cmp	r3, #0
 8034708:	dd09      	ble.n	803471e <sulp+0x36>
 803470a:	051b      	lsls	r3, r3, #20
 803470c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8034710:	2400      	movs	r4, #0
 8034712:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8034716:	4622      	mov	r2, r4
 8034718:	462b      	mov	r3, r5
 803471a:	f7db ff85 	bl	8010628 <__aeabi_dmul>
 803471e:	ec41 0b10 	vmov	d0, r0, r1
 8034722:	bd70      	pop	{r4, r5, r6, pc}
 8034724:	0000      	movs	r0, r0
	...

08034728 <_strtod_l>:
 8034728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803472c:	b09f      	sub	sp, #124	@ 0x7c
 803472e:	460c      	mov	r4, r1
 8034730:	9217      	str	r2, [sp, #92]	@ 0x5c
 8034732:	2200      	movs	r2, #0
 8034734:	921a      	str	r2, [sp, #104]	@ 0x68
 8034736:	9005      	str	r0, [sp, #20]
 8034738:	f04f 0a00 	mov.w	sl, #0
 803473c:	f04f 0b00 	mov.w	fp, #0
 8034740:	460a      	mov	r2, r1
 8034742:	9219      	str	r2, [sp, #100]	@ 0x64
 8034744:	7811      	ldrb	r1, [r2, #0]
 8034746:	292b      	cmp	r1, #43	@ 0x2b
 8034748:	d04a      	beq.n	80347e0 <_strtod_l+0xb8>
 803474a:	d838      	bhi.n	80347be <_strtod_l+0x96>
 803474c:	290d      	cmp	r1, #13
 803474e:	d832      	bhi.n	80347b6 <_strtod_l+0x8e>
 8034750:	2908      	cmp	r1, #8
 8034752:	d832      	bhi.n	80347ba <_strtod_l+0x92>
 8034754:	2900      	cmp	r1, #0
 8034756:	d03b      	beq.n	80347d0 <_strtod_l+0xa8>
 8034758:	2200      	movs	r2, #0
 803475a:	920e      	str	r2, [sp, #56]	@ 0x38
 803475c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 803475e:	782a      	ldrb	r2, [r5, #0]
 8034760:	2a30      	cmp	r2, #48	@ 0x30
 8034762:	f040 80b2 	bne.w	80348ca <_strtod_l+0x1a2>
 8034766:	786a      	ldrb	r2, [r5, #1]
 8034768:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 803476c:	2a58      	cmp	r2, #88	@ 0x58
 803476e:	d16e      	bne.n	803484e <_strtod_l+0x126>
 8034770:	9302      	str	r3, [sp, #8]
 8034772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034774:	9301      	str	r3, [sp, #4]
 8034776:	ab1a      	add	r3, sp, #104	@ 0x68
 8034778:	9300      	str	r3, [sp, #0]
 803477a:	4a8f      	ldr	r2, [pc, #572]	@ (80349b8 <_strtod_l+0x290>)
 803477c:	9805      	ldr	r0, [sp, #20]
 803477e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8034780:	a919      	add	r1, sp, #100	@ 0x64
 8034782:	f002 f89b 	bl	80368bc <__gethex>
 8034786:	f010 060f 	ands.w	r6, r0, #15
 803478a:	4604      	mov	r4, r0
 803478c:	d005      	beq.n	803479a <_strtod_l+0x72>
 803478e:	2e06      	cmp	r6, #6
 8034790:	d128      	bne.n	80347e4 <_strtod_l+0xbc>
 8034792:	3501      	adds	r5, #1
 8034794:	2300      	movs	r3, #0
 8034796:	9519      	str	r5, [sp, #100]	@ 0x64
 8034798:	930e      	str	r3, [sp, #56]	@ 0x38
 803479a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803479c:	2b00      	cmp	r3, #0
 803479e:	f040 858e 	bne.w	80352be <_strtod_l+0xb96>
 80347a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80347a4:	b1cb      	cbz	r3, 80347da <_strtod_l+0xb2>
 80347a6:	4652      	mov	r2, sl
 80347a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80347ac:	ec43 2b10 	vmov	d0, r2, r3
 80347b0:	b01f      	add	sp, #124	@ 0x7c
 80347b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80347b6:	2920      	cmp	r1, #32
 80347b8:	d1ce      	bne.n	8034758 <_strtod_l+0x30>
 80347ba:	3201      	adds	r2, #1
 80347bc:	e7c1      	b.n	8034742 <_strtod_l+0x1a>
 80347be:	292d      	cmp	r1, #45	@ 0x2d
 80347c0:	d1ca      	bne.n	8034758 <_strtod_l+0x30>
 80347c2:	2101      	movs	r1, #1
 80347c4:	910e      	str	r1, [sp, #56]	@ 0x38
 80347c6:	1c51      	adds	r1, r2, #1
 80347c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80347ca:	7852      	ldrb	r2, [r2, #1]
 80347cc:	2a00      	cmp	r2, #0
 80347ce:	d1c5      	bne.n	803475c <_strtod_l+0x34>
 80347d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80347d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80347d4:	2b00      	cmp	r3, #0
 80347d6:	f040 8570 	bne.w	80352ba <_strtod_l+0xb92>
 80347da:	4652      	mov	r2, sl
 80347dc:	465b      	mov	r3, fp
 80347de:	e7e5      	b.n	80347ac <_strtod_l+0x84>
 80347e0:	2100      	movs	r1, #0
 80347e2:	e7ef      	b.n	80347c4 <_strtod_l+0x9c>
 80347e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80347e6:	b13a      	cbz	r2, 80347f8 <_strtod_l+0xd0>
 80347e8:	2135      	movs	r1, #53	@ 0x35
 80347ea:	a81c      	add	r0, sp, #112	@ 0x70
 80347ec:	f002 ff62 	bl	80376b4 <__copybits>
 80347f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80347f2:	9805      	ldr	r0, [sp, #20]
 80347f4:	f002 fb6a 	bl	8036ecc <_Bfree>
 80347f8:	3e01      	subs	r6, #1
 80347fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80347fc:	2e04      	cmp	r6, #4
 80347fe:	d806      	bhi.n	803480e <_strtod_l+0xe6>
 8034800:	e8df f006 	tbb	[pc, r6]
 8034804:	201d0314 	.word	0x201d0314
 8034808:	14          	.byte	0x14
 8034809:	00          	.byte	0x00
 803480a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 803480e:	05e1      	lsls	r1, r4, #23
 8034810:	bf48      	it	mi
 8034812:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8034816:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 803481a:	0d1b      	lsrs	r3, r3, #20
 803481c:	051b      	lsls	r3, r3, #20
 803481e:	2b00      	cmp	r3, #0
 8034820:	d1bb      	bne.n	803479a <_strtod_l+0x72>
 8034822:	f7f9 fd31 	bl	802e288 <__errno>
 8034826:	2322      	movs	r3, #34	@ 0x22
 8034828:	6003      	str	r3, [r0, #0]
 803482a:	e7b6      	b.n	803479a <_strtod_l+0x72>
 803482c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8034830:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8034834:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8034838:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 803483c:	e7e7      	b.n	803480e <_strtod_l+0xe6>
 803483e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80349c0 <_strtod_l+0x298>
 8034842:	e7e4      	b.n	803480e <_strtod_l+0xe6>
 8034844:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8034848:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 803484c:	e7df      	b.n	803480e <_strtod_l+0xe6>
 803484e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034850:	1c5a      	adds	r2, r3, #1
 8034852:	9219      	str	r2, [sp, #100]	@ 0x64
 8034854:	785b      	ldrb	r3, [r3, #1]
 8034856:	2b30      	cmp	r3, #48	@ 0x30
 8034858:	d0f9      	beq.n	803484e <_strtod_l+0x126>
 803485a:	2b00      	cmp	r3, #0
 803485c:	d09d      	beq.n	803479a <_strtod_l+0x72>
 803485e:	2301      	movs	r3, #1
 8034860:	2700      	movs	r7, #0
 8034862:	9308      	str	r3, [sp, #32]
 8034864:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034866:	930c      	str	r3, [sp, #48]	@ 0x30
 8034868:	970b      	str	r7, [sp, #44]	@ 0x2c
 803486a:	46b9      	mov	r9, r7
 803486c:	220a      	movs	r2, #10
 803486e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8034870:	7805      	ldrb	r5, [r0, #0]
 8034872:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8034876:	b2d9      	uxtb	r1, r3
 8034878:	2909      	cmp	r1, #9
 803487a:	d928      	bls.n	80348ce <_strtod_l+0x1a6>
 803487c:	494f      	ldr	r1, [pc, #316]	@ (80349bc <_strtod_l+0x294>)
 803487e:	2201      	movs	r2, #1
 8034880:	f7f7 fff3 	bl	802c86a <strncmp>
 8034884:	2800      	cmp	r0, #0
 8034886:	d032      	beq.n	80348ee <_strtod_l+0x1c6>
 8034888:	2000      	movs	r0, #0
 803488a:	462a      	mov	r2, r5
 803488c:	900a      	str	r0, [sp, #40]	@ 0x28
 803488e:	464d      	mov	r5, r9
 8034890:	4603      	mov	r3, r0
 8034892:	2a65      	cmp	r2, #101	@ 0x65
 8034894:	d001      	beq.n	803489a <_strtod_l+0x172>
 8034896:	2a45      	cmp	r2, #69	@ 0x45
 8034898:	d114      	bne.n	80348c4 <_strtod_l+0x19c>
 803489a:	b91d      	cbnz	r5, 80348a4 <_strtod_l+0x17c>
 803489c:	9a08      	ldr	r2, [sp, #32]
 803489e:	4302      	orrs	r2, r0
 80348a0:	d096      	beq.n	80347d0 <_strtod_l+0xa8>
 80348a2:	2500      	movs	r5, #0
 80348a4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80348a6:	1c62      	adds	r2, r4, #1
 80348a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80348aa:	7862      	ldrb	r2, [r4, #1]
 80348ac:	2a2b      	cmp	r2, #43	@ 0x2b
 80348ae:	d07a      	beq.n	80349a6 <_strtod_l+0x27e>
 80348b0:	2a2d      	cmp	r2, #45	@ 0x2d
 80348b2:	d07e      	beq.n	80349b2 <_strtod_l+0x28a>
 80348b4:	f04f 0c00 	mov.w	ip, #0
 80348b8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80348bc:	2909      	cmp	r1, #9
 80348be:	f240 8085 	bls.w	80349cc <_strtod_l+0x2a4>
 80348c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80348c4:	f04f 0800 	mov.w	r8, #0
 80348c8:	e0a5      	b.n	8034a16 <_strtod_l+0x2ee>
 80348ca:	2300      	movs	r3, #0
 80348cc:	e7c8      	b.n	8034860 <_strtod_l+0x138>
 80348ce:	f1b9 0f08 	cmp.w	r9, #8
 80348d2:	bfd8      	it	le
 80348d4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80348d6:	f100 0001 	add.w	r0, r0, #1
 80348da:	bfda      	itte	le
 80348dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80348e0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80348e2:	fb02 3707 	mlagt	r7, r2, r7, r3
 80348e6:	f109 0901 	add.w	r9, r9, #1
 80348ea:	9019      	str	r0, [sp, #100]	@ 0x64
 80348ec:	e7bf      	b.n	803486e <_strtod_l+0x146>
 80348ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80348f0:	1c5a      	adds	r2, r3, #1
 80348f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80348f4:	785a      	ldrb	r2, [r3, #1]
 80348f6:	f1b9 0f00 	cmp.w	r9, #0
 80348fa:	d03b      	beq.n	8034974 <_strtod_l+0x24c>
 80348fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80348fe:	464d      	mov	r5, r9
 8034900:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8034904:	2b09      	cmp	r3, #9
 8034906:	d912      	bls.n	803492e <_strtod_l+0x206>
 8034908:	2301      	movs	r3, #1
 803490a:	e7c2      	b.n	8034892 <_strtod_l+0x16a>
 803490c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803490e:	1c5a      	adds	r2, r3, #1
 8034910:	9219      	str	r2, [sp, #100]	@ 0x64
 8034912:	785a      	ldrb	r2, [r3, #1]
 8034914:	3001      	adds	r0, #1
 8034916:	2a30      	cmp	r2, #48	@ 0x30
 8034918:	d0f8      	beq.n	803490c <_strtod_l+0x1e4>
 803491a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 803491e:	2b08      	cmp	r3, #8
 8034920:	f200 84d2 	bhi.w	80352c8 <_strtod_l+0xba0>
 8034924:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034926:	900a      	str	r0, [sp, #40]	@ 0x28
 8034928:	2000      	movs	r0, #0
 803492a:	930c      	str	r3, [sp, #48]	@ 0x30
 803492c:	4605      	mov	r5, r0
 803492e:	3a30      	subs	r2, #48	@ 0x30
 8034930:	f100 0301 	add.w	r3, r0, #1
 8034934:	d018      	beq.n	8034968 <_strtod_l+0x240>
 8034936:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8034938:	4419      	add	r1, r3
 803493a:	910a      	str	r1, [sp, #40]	@ 0x28
 803493c:	462e      	mov	r6, r5
 803493e:	f04f 0e0a 	mov.w	lr, #10
 8034942:	1c71      	adds	r1, r6, #1
 8034944:	eba1 0c05 	sub.w	ip, r1, r5
 8034948:	4563      	cmp	r3, ip
 803494a:	dc15      	bgt.n	8034978 <_strtod_l+0x250>
 803494c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8034950:	182b      	adds	r3, r5, r0
 8034952:	2b08      	cmp	r3, #8
 8034954:	f105 0501 	add.w	r5, r5, #1
 8034958:	4405      	add	r5, r0
 803495a:	dc1a      	bgt.n	8034992 <_strtod_l+0x26a>
 803495c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 803495e:	230a      	movs	r3, #10
 8034960:	fb03 2301 	mla	r3, r3, r1, r2
 8034964:	930b      	str	r3, [sp, #44]	@ 0x2c
 8034966:	2300      	movs	r3, #0
 8034968:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803496a:	1c51      	adds	r1, r2, #1
 803496c:	9119      	str	r1, [sp, #100]	@ 0x64
 803496e:	7852      	ldrb	r2, [r2, #1]
 8034970:	4618      	mov	r0, r3
 8034972:	e7c5      	b.n	8034900 <_strtod_l+0x1d8>
 8034974:	4648      	mov	r0, r9
 8034976:	e7ce      	b.n	8034916 <_strtod_l+0x1ee>
 8034978:	2e08      	cmp	r6, #8
 803497a:	dc05      	bgt.n	8034988 <_strtod_l+0x260>
 803497c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 803497e:	fb0e f606 	mul.w	r6, lr, r6
 8034982:	960b      	str	r6, [sp, #44]	@ 0x2c
 8034984:	460e      	mov	r6, r1
 8034986:	e7dc      	b.n	8034942 <_strtod_l+0x21a>
 8034988:	2910      	cmp	r1, #16
 803498a:	bfd8      	it	le
 803498c:	fb0e f707 	mulle.w	r7, lr, r7
 8034990:	e7f8      	b.n	8034984 <_strtod_l+0x25c>
 8034992:	2b0f      	cmp	r3, #15
 8034994:	bfdc      	itt	le
 8034996:	230a      	movle	r3, #10
 8034998:	fb03 2707 	mlale	r7, r3, r7, r2
 803499c:	e7e3      	b.n	8034966 <_strtod_l+0x23e>
 803499e:	2300      	movs	r3, #0
 80349a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80349a2:	2301      	movs	r3, #1
 80349a4:	e77a      	b.n	803489c <_strtod_l+0x174>
 80349a6:	f04f 0c00 	mov.w	ip, #0
 80349aa:	1ca2      	adds	r2, r4, #2
 80349ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80349ae:	78a2      	ldrb	r2, [r4, #2]
 80349b0:	e782      	b.n	80348b8 <_strtod_l+0x190>
 80349b2:	f04f 0c01 	mov.w	ip, #1
 80349b6:	e7f8      	b.n	80349aa <_strtod_l+0x282>
 80349b8:	0803e1b0 	.word	0x0803e1b0
 80349bc:	0803dcde 	.word	0x0803dcde
 80349c0:	7ff00000 	.word	0x7ff00000
 80349c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80349c6:	1c51      	adds	r1, r2, #1
 80349c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80349ca:	7852      	ldrb	r2, [r2, #1]
 80349cc:	2a30      	cmp	r2, #48	@ 0x30
 80349ce:	d0f9      	beq.n	80349c4 <_strtod_l+0x29c>
 80349d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80349d4:	2908      	cmp	r1, #8
 80349d6:	f63f af75 	bhi.w	80348c4 <_strtod_l+0x19c>
 80349da:	3a30      	subs	r2, #48	@ 0x30
 80349dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80349de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80349e0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80349e2:	f04f 080a 	mov.w	r8, #10
 80349e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80349e8:	1c56      	adds	r6, r2, #1
 80349ea:	9619      	str	r6, [sp, #100]	@ 0x64
 80349ec:	7852      	ldrb	r2, [r2, #1]
 80349ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80349f2:	f1be 0f09 	cmp.w	lr, #9
 80349f6:	d939      	bls.n	8034a6c <_strtod_l+0x344>
 80349f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80349fa:	1a76      	subs	r6, r6, r1
 80349fc:	2e08      	cmp	r6, #8
 80349fe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8034a02:	dc03      	bgt.n	8034a0c <_strtod_l+0x2e4>
 8034a04:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8034a06:	4588      	cmp	r8, r1
 8034a08:	bfa8      	it	ge
 8034a0a:	4688      	movge	r8, r1
 8034a0c:	f1bc 0f00 	cmp.w	ip, #0
 8034a10:	d001      	beq.n	8034a16 <_strtod_l+0x2ee>
 8034a12:	f1c8 0800 	rsb	r8, r8, #0
 8034a16:	2d00      	cmp	r5, #0
 8034a18:	d14e      	bne.n	8034ab8 <_strtod_l+0x390>
 8034a1a:	9908      	ldr	r1, [sp, #32]
 8034a1c:	4308      	orrs	r0, r1
 8034a1e:	f47f aebc 	bne.w	803479a <_strtod_l+0x72>
 8034a22:	2b00      	cmp	r3, #0
 8034a24:	f47f aed4 	bne.w	80347d0 <_strtod_l+0xa8>
 8034a28:	2a69      	cmp	r2, #105	@ 0x69
 8034a2a:	d028      	beq.n	8034a7e <_strtod_l+0x356>
 8034a2c:	dc25      	bgt.n	8034a7a <_strtod_l+0x352>
 8034a2e:	2a49      	cmp	r2, #73	@ 0x49
 8034a30:	d025      	beq.n	8034a7e <_strtod_l+0x356>
 8034a32:	2a4e      	cmp	r2, #78	@ 0x4e
 8034a34:	f47f aecc 	bne.w	80347d0 <_strtod_l+0xa8>
 8034a38:	499a      	ldr	r1, [pc, #616]	@ (8034ca4 <_strtod_l+0x57c>)
 8034a3a:	a819      	add	r0, sp, #100	@ 0x64
 8034a3c:	f002 f960 	bl	8036d00 <__match>
 8034a40:	2800      	cmp	r0, #0
 8034a42:	f43f aec5 	beq.w	80347d0 <_strtod_l+0xa8>
 8034a46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034a48:	781b      	ldrb	r3, [r3, #0]
 8034a4a:	2b28      	cmp	r3, #40	@ 0x28
 8034a4c:	d12e      	bne.n	8034aac <_strtod_l+0x384>
 8034a4e:	4996      	ldr	r1, [pc, #600]	@ (8034ca8 <_strtod_l+0x580>)
 8034a50:	aa1c      	add	r2, sp, #112	@ 0x70
 8034a52:	a819      	add	r0, sp, #100	@ 0x64
 8034a54:	f002 f968 	bl	8036d28 <__hexnan>
 8034a58:	2805      	cmp	r0, #5
 8034a5a:	d127      	bne.n	8034aac <_strtod_l+0x384>
 8034a5c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8034a5e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8034a62:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8034a66:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8034a6a:	e696      	b.n	803479a <_strtod_l+0x72>
 8034a6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8034a6e:	fb08 2101 	mla	r1, r8, r1, r2
 8034a72:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8034a76:	9209      	str	r2, [sp, #36]	@ 0x24
 8034a78:	e7b5      	b.n	80349e6 <_strtod_l+0x2be>
 8034a7a:	2a6e      	cmp	r2, #110	@ 0x6e
 8034a7c:	e7da      	b.n	8034a34 <_strtod_l+0x30c>
 8034a7e:	498b      	ldr	r1, [pc, #556]	@ (8034cac <_strtod_l+0x584>)
 8034a80:	a819      	add	r0, sp, #100	@ 0x64
 8034a82:	f002 f93d 	bl	8036d00 <__match>
 8034a86:	2800      	cmp	r0, #0
 8034a88:	f43f aea2 	beq.w	80347d0 <_strtod_l+0xa8>
 8034a8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034a8e:	4988      	ldr	r1, [pc, #544]	@ (8034cb0 <_strtod_l+0x588>)
 8034a90:	3b01      	subs	r3, #1
 8034a92:	a819      	add	r0, sp, #100	@ 0x64
 8034a94:	9319      	str	r3, [sp, #100]	@ 0x64
 8034a96:	f002 f933 	bl	8036d00 <__match>
 8034a9a:	b910      	cbnz	r0, 8034aa2 <_strtod_l+0x37a>
 8034a9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034a9e:	3301      	adds	r3, #1
 8034aa0:	9319      	str	r3, [sp, #100]	@ 0x64
 8034aa2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8034cc0 <_strtod_l+0x598>
 8034aa6:	f04f 0a00 	mov.w	sl, #0
 8034aaa:	e676      	b.n	803479a <_strtod_l+0x72>
 8034aac:	4881      	ldr	r0, [pc, #516]	@ (8034cb4 <_strtod_l+0x58c>)
 8034aae:	f001 f80f 	bl	8035ad0 <nan>
 8034ab2:	ec5b ab10 	vmov	sl, fp, d0
 8034ab6:	e670      	b.n	803479a <_strtod_l+0x72>
 8034ab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034aba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8034abc:	eba8 0303 	sub.w	r3, r8, r3
 8034ac0:	f1b9 0f00 	cmp.w	r9, #0
 8034ac4:	bf08      	it	eq
 8034ac6:	46a9      	moveq	r9, r5
 8034ac8:	2d10      	cmp	r5, #16
 8034aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8034acc:	462c      	mov	r4, r5
 8034ace:	bfa8      	it	ge
 8034ad0:	2410      	movge	r4, #16
 8034ad2:	f7db fd2f 	bl	8010534 <__aeabi_ui2d>
 8034ad6:	2d09      	cmp	r5, #9
 8034ad8:	4682      	mov	sl, r0
 8034ada:	468b      	mov	fp, r1
 8034adc:	dc13      	bgt.n	8034b06 <_strtod_l+0x3de>
 8034ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034ae0:	2b00      	cmp	r3, #0
 8034ae2:	f43f ae5a 	beq.w	803479a <_strtod_l+0x72>
 8034ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034ae8:	dd78      	ble.n	8034bdc <_strtod_l+0x4b4>
 8034aea:	2b16      	cmp	r3, #22
 8034aec:	dc5f      	bgt.n	8034bae <_strtod_l+0x486>
 8034aee:	4972      	ldr	r1, [pc, #456]	@ (8034cb8 <_strtod_l+0x590>)
 8034af0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8034af4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8034af8:	4652      	mov	r2, sl
 8034afa:	465b      	mov	r3, fp
 8034afc:	f7db fd94 	bl	8010628 <__aeabi_dmul>
 8034b00:	4682      	mov	sl, r0
 8034b02:	468b      	mov	fp, r1
 8034b04:	e649      	b.n	803479a <_strtod_l+0x72>
 8034b06:	4b6c      	ldr	r3, [pc, #432]	@ (8034cb8 <_strtod_l+0x590>)
 8034b08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8034b0c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8034b10:	f7db fd8a 	bl	8010628 <__aeabi_dmul>
 8034b14:	4682      	mov	sl, r0
 8034b16:	4638      	mov	r0, r7
 8034b18:	468b      	mov	fp, r1
 8034b1a:	f7db fd0b 	bl	8010534 <__aeabi_ui2d>
 8034b1e:	4602      	mov	r2, r0
 8034b20:	460b      	mov	r3, r1
 8034b22:	4650      	mov	r0, sl
 8034b24:	4659      	mov	r1, fp
 8034b26:	f7db fbc9 	bl	80102bc <__adddf3>
 8034b2a:	2d0f      	cmp	r5, #15
 8034b2c:	4682      	mov	sl, r0
 8034b2e:	468b      	mov	fp, r1
 8034b30:	ddd5      	ble.n	8034ade <_strtod_l+0x3b6>
 8034b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034b34:	1b2c      	subs	r4, r5, r4
 8034b36:	441c      	add	r4, r3
 8034b38:	2c00      	cmp	r4, #0
 8034b3a:	f340 8093 	ble.w	8034c64 <_strtod_l+0x53c>
 8034b3e:	f014 030f 	ands.w	r3, r4, #15
 8034b42:	d00a      	beq.n	8034b5a <_strtod_l+0x432>
 8034b44:	495c      	ldr	r1, [pc, #368]	@ (8034cb8 <_strtod_l+0x590>)
 8034b46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8034b4a:	4652      	mov	r2, sl
 8034b4c:	465b      	mov	r3, fp
 8034b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8034b52:	f7db fd69 	bl	8010628 <__aeabi_dmul>
 8034b56:	4682      	mov	sl, r0
 8034b58:	468b      	mov	fp, r1
 8034b5a:	f034 040f 	bics.w	r4, r4, #15
 8034b5e:	d073      	beq.n	8034c48 <_strtod_l+0x520>
 8034b60:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8034b64:	dd49      	ble.n	8034bfa <_strtod_l+0x4d2>
 8034b66:	2400      	movs	r4, #0
 8034b68:	46a0      	mov	r8, r4
 8034b6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8034b6c:	46a1      	mov	r9, r4
 8034b6e:	9a05      	ldr	r2, [sp, #20]
 8034b70:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8034cc0 <_strtod_l+0x598>
 8034b74:	2322      	movs	r3, #34	@ 0x22
 8034b76:	6013      	str	r3, [r2, #0]
 8034b78:	f04f 0a00 	mov.w	sl, #0
 8034b7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8034b7e:	2b00      	cmp	r3, #0
 8034b80:	f43f ae0b 	beq.w	803479a <_strtod_l+0x72>
 8034b84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034b86:	9805      	ldr	r0, [sp, #20]
 8034b88:	f002 f9a0 	bl	8036ecc <_Bfree>
 8034b8c:	9805      	ldr	r0, [sp, #20]
 8034b8e:	4649      	mov	r1, r9
 8034b90:	f002 f99c 	bl	8036ecc <_Bfree>
 8034b94:	9805      	ldr	r0, [sp, #20]
 8034b96:	4641      	mov	r1, r8
 8034b98:	f002 f998 	bl	8036ecc <_Bfree>
 8034b9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8034b9e:	9805      	ldr	r0, [sp, #20]
 8034ba0:	f002 f994 	bl	8036ecc <_Bfree>
 8034ba4:	9805      	ldr	r0, [sp, #20]
 8034ba6:	4621      	mov	r1, r4
 8034ba8:	f002 f990 	bl	8036ecc <_Bfree>
 8034bac:	e5f5      	b.n	803479a <_strtod_l+0x72>
 8034bae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034bb0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8034bb4:	4293      	cmp	r3, r2
 8034bb6:	dbbc      	blt.n	8034b32 <_strtod_l+0x40a>
 8034bb8:	4c3f      	ldr	r4, [pc, #252]	@ (8034cb8 <_strtod_l+0x590>)
 8034bba:	f1c5 050f 	rsb	r5, r5, #15
 8034bbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8034bc2:	4652      	mov	r2, sl
 8034bc4:	465b      	mov	r3, fp
 8034bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8034bca:	f7db fd2d 	bl	8010628 <__aeabi_dmul>
 8034bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034bd0:	1b5d      	subs	r5, r3, r5
 8034bd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8034bd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8034bda:	e78f      	b.n	8034afc <_strtod_l+0x3d4>
 8034bdc:	3316      	adds	r3, #22
 8034bde:	dba8      	blt.n	8034b32 <_strtod_l+0x40a>
 8034be0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034be2:	eba3 0808 	sub.w	r8, r3, r8
 8034be6:	4b34      	ldr	r3, [pc, #208]	@ (8034cb8 <_strtod_l+0x590>)
 8034be8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8034bec:	e9d8 2300 	ldrd	r2, r3, [r8]
 8034bf0:	4650      	mov	r0, sl
 8034bf2:	4659      	mov	r1, fp
 8034bf4:	f7db fe42 	bl	801087c <__aeabi_ddiv>
 8034bf8:	e782      	b.n	8034b00 <_strtod_l+0x3d8>
 8034bfa:	2300      	movs	r3, #0
 8034bfc:	4f2f      	ldr	r7, [pc, #188]	@ (8034cbc <_strtod_l+0x594>)
 8034bfe:	1124      	asrs	r4, r4, #4
 8034c00:	4650      	mov	r0, sl
 8034c02:	4659      	mov	r1, fp
 8034c04:	461e      	mov	r6, r3
 8034c06:	2c01      	cmp	r4, #1
 8034c08:	dc21      	bgt.n	8034c4e <_strtod_l+0x526>
 8034c0a:	b10b      	cbz	r3, 8034c10 <_strtod_l+0x4e8>
 8034c0c:	4682      	mov	sl, r0
 8034c0e:	468b      	mov	fp, r1
 8034c10:	492a      	ldr	r1, [pc, #168]	@ (8034cbc <_strtod_l+0x594>)
 8034c12:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8034c16:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8034c1a:	4652      	mov	r2, sl
 8034c1c:	465b      	mov	r3, fp
 8034c1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8034c22:	f7db fd01 	bl	8010628 <__aeabi_dmul>
 8034c26:	4b26      	ldr	r3, [pc, #152]	@ (8034cc0 <_strtod_l+0x598>)
 8034c28:	460a      	mov	r2, r1
 8034c2a:	400b      	ands	r3, r1
 8034c2c:	4925      	ldr	r1, [pc, #148]	@ (8034cc4 <_strtod_l+0x59c>)
 8034c2e:	428b      	cmp	r3, r1
 8034c30:	4682      	mov	sl, r0
 8034c32:	d898      	bhi.n	8034b66 <_strtod_l+0x43e>
 8034c34:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8034c38:	428b      	cmp	r3, r1
 8034c3a:	bf86      	itte	hi
 8034c3c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8034cc8 <_strtod_l+0x5a0>
 8034c40:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8034c44:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8034c48:	2300      	movs	r3, #0
 8034c4a:	9308      	str	r3, [sp, #32]
 8034c4c:	e076      	b.n	8034d3c <_strtod_l+0x614>
 8034c4e:	07e2      	lsls	r2, r4, #31
 8034c50:	d504      	bpl.n	8034c5c <_strtod_l+0x534>
 8034c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8034c56:	f7db fce7 	bl	8010628 <__aeabi_dmul>
 8034c5a:	2301      	movs	r3, #1
 8034c5c:	3601      	adds	r6, #1
 8034c5e:	1064      	asrs	r4, r4, #1
 8034c60:	3708      	adds	r7, #8
 8034c62:	e7d0      	b.n	8034c06 <_strtod_l+0x4de>
 8034c64:	d0f0      	beq.n	8034c48 <_strtod_l+0x520>
 8034c66:	4264      	negs	r4, r4
 8034c68:	f014 020f 	ands.w	r2, r4, #15
 8034c6c:	d00a      	beq.n	8034c84 <_strtod_l+0x55c>
 8034c6e:	4b12      	ldr	r3, [pc, #72]	@ (8034cb8 <_strtod_l+0x590>)
 8034c70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8034c74:	4650      	mov	r0, sl
 8034c76:	4659      	mov	r1, fp
 8034c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034c7c:	f7db fdfe 	bl	801087c <__aeabi_ddiv>
 8034c80:	4682      	mov	sl, r0
 8034c82:	468b      	mov	fp, r1
 8034c84:	1124      	asrs	r4, r4, #4
 8034c86:	d0df      	beq.n	8034c48 <_strtod_l+0x520>
 8034c88:	2c1f      	cmp	r4, #31
 8034c8a:	dd1f      	ble.n	8034ccc <_strtod_l+0x5a4>
 8034c8c:	2400      	movs	r4, #0
 8034c8e:	46a0      	mov	r8, r4
 8034c90:	940b      	str	r4, [sp, #44]	@ 0x2c
 8034c92:	46a1      	mov	r9, r4
 8034c94:	9a05      	ldr	r2, [sp, #20]
 8034c96:	2322      	movs	r3, #34	@ 0x22
 8034c98:	f04f 0a00 	mov.w	sl, #0
 8034c9c:	f04f 0b00 	mov.w	fp, #0
 8034ca0:	6013      	str	r3, [r2, #0]
 8034ca2:	e76b      	b.n	8034b7c <_strtod_l+0x454>
 8034ca4:	0803db9d 	.word	0x0803db9d
 8034ca8:	0803e19c 	.word	0x0803e19c
 8034cac:	0803dccc 	.word	0x0803dccc
 8034cb0:	0803dceb 	.word	0x0803dceb
 8034cb4:	0803dac3 	.word	0x0803dac3
 8034cb8:	0803e228 	.word	0x0803e228
 8034cbc:	0803e200 	.word	0x0803e200
 8034cc0:	7ff00000 	.word	0x7ff00000
 8034cc4:	7ca00000 	.word	0x7ca00000
 8034cc8:	7fefffff 	.word	0x7fefffff
 8034ccc:	f014 0310 	ands.w	r3, r4, #16
 8034cd0:	bf18      	it	ne
 8034cd2:	236a      	movne	r3, #106	@ 0x6a
 8034cd4:	4ea9      	ldr	r6, [pc, #676]	@ (8034f7c <_strtod_l+0x854>)
 8034cd6:	9308      	str	r3, [sp, #32]
 8034cd8:	4650      	mov	r0, sl
 8034cda:	4659      	mov	r1, fp
 8034cdc:	2300      	movs	r3, #0
 8034cde:	07e7      	lsls	r7, r4, #31
 8034ce0:	d504      	bpl.n	8034cec <_strtod_l+0x5c4>
 8034ce2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8034ce6:	f7db fc9f 	bl	8010628 <__aeabi_dmul>
 8034cea:	2301      	movs	r3, #1
 8034cec:	1064      	asrs	r4, r4, #1
 8034cee:	f106 0608 	add.w	r6, r6, #8
 8034cf2:	d1f4      	bne.n	8034cde <_strtod_l+0x5b6>
 8034cf4:	b10b      	cbz	r3, 8034cfa <_strtod_l+0x5d2>
 8034cf6:	4682      	mov	sl, r0
 8034cf8:	468b      	mov	fp, r1
 8034cfa:	9b08      	ldr	r3, [sp, #32]
 8034cfc:	b1b3      	cbz	r3, 8034d2c <_strtod_l+0x604>
 8034cfe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8034d02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8034d06:	2b00      	cmp	r3, #0
 8034d08:	4659      	mov	r1, fp
 8034d0a:	dd0f      	ble.n	8034d2c <_strtod_l+0x604>
 8034d0c:	2b1f      	cmp	r3, #31
 8034d0e:	dd56      	ble.n	8034dbe <_strtod_l+0x696>
 8034d10:	2b34      	cmp	r3, #52	@ 0x34
 8034d12:	bfde      	ittt	le
 8034d14:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8034d18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8034d1c:	4093      	lslle	r3, r2
 8034d1e:	f04f 0a00 	mov.w	sl, #0
 8034d22:	bfcc      	ite	gt
 8034d24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8034d28:	ea03 0b01 	andle.w	fp, r3, r1
 8034d2c:	2200      	movs	r2, #0
 8034d2e:	2300      	movs	r3, #0
 8034d30:	4650      	mov	r0, sl
 8034d32:	4659      	mov	r1, fp
 8034d34:	f7db fee0 	bl	8010af8 <__aeabi_dcmpeq>
 8034d38:	2800      	cmp	r0, #0
 8034d3a:	d1a7      	bne.n	8034c8c <_strtod_l+0x564>
 8034d3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8034d3e:	9300      	str	r3, [sp, #0]
 8034d40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8034d42:	9805      	ldr	r0, [sp, #20]
 8034d44:	462b      	mov	r3, r5
 8034d46:	464a      	mov	r2, r9
 8034d48:	f002 f910 	bl	8036f6c <__s2b>
 8034d4c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8034d4e:	2800      	cmp	r0, #0
 8034d50:	f43f af09 	beq.w	8034b66 <_strtod_l+0x43e>
 8034d54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034d56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034d58:	2a00      	cmp	r2, #0
 8034d5a:	eba3 0308 	sub.w	r3, r3, r8
 8034d5e:	bfa8      	it	ge
 8034d60:	2300      	movge	r3, #0
 8034d62:	9312      	str	r3, [sp, #72]	@ 0x48
 8034d64:	2400      	movs	r4, #0
 8034d66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8034d6a:	9316      	str	r3, [sp, #88]	@ 0x58
 8034d6c:	46a0      	mov	r8, r4
 8034d6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8034d70:	9805      	ldr	r0, [sp, #20]
 8034d72:	6859      	ldr	r1, [r3, #4]
 8034d74:	f002 f885 	bl	8036e82 <_Balloc>
 8034d78:	4681      	mov	r9, r0
 8034d7a:	2800      	cmp	r0, #0
 8034d7c:	f43f aef7 	beq.w	8034b6e <_strtod_l+0x446>
 8034d80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8034d82:	691a      	ldr	r2, [r3, #16]
 8034d84:	3202      	adds	r2, #2
 8034d86:	f103 010c 	add.w	r1, r3, #12
 8034d8a:	0092      	lsls	r2, r2, #2
 8034d8c:	300c      	adds	r0, #12
 8034d8e:	f7f9 fab3 	bl	802e2f8 <memcpy>
 8034d92:	ec4b ab10 	vmov	d0, sl, fp
 8034d96:	9805      	ldr	r0, [sp, #20]
 8034d98:	aa1c      	add	r2, sp, #112	@ 0x70
 8034d9a:	a91b      	add	r1, sp, #108	@ 0x6c
 8034d9c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8034da0:	f002 fbfe 	bl	80375a0 <__d2b>
 8034da4:	901a      	str	r0, [sp, #104]	@ 0x68
 8034da6:	2800      	cmp	r0, #0
 8034da8:	f43f aee1 	beq.w	8034b6e <_strtod_l+0x446>
 8034dac:	9805      	ldr	r0, [sp, #20]
 8034dae:	2101      	movs	r1, #1
 8034db0:	f002 f972 	bl	8037098 <__i2b>
 8034db4:	4680      	mov	r8, r0
 8034db6:	b948      	cbnz	r0, 8034dcc <_strtod_l+0x6a4>
 8034db8:	f04f 0800 	mov.w	r8, #0
 8034dbc:	e6d7      	b.n	8034b6e <_strtod_l+0x446>
 8034dbe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8034dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8034dc6:	ea03 0a0a 	and.w	sl, r3, sl
 8034dca:	e7af      	b.n	8034d2c <_strtod_l+0x604>
 8034dcc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8034dce:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8034dd0:	2d00      	cmp	r5, #0
 8034dd2:	bfab      	itete	ge
 8034dd4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8034dd6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8034dd8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8034dda:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8034ddc:	bfac      	ite	ge
 8034dde:	18ef      	addge	r7, r5, r3
 8034de0:	1b5e      	sublt	r6, r3, r5
 8034de2:	9b08      	ldr	r3, [sp, #32]
 8034de4:	1aed      	subs	r5, r5, r3
 8034de6:	4415      	add	r5, r2
 8034de8:	4b65      	ldr	r3, [pc, #404]	@ (8034f80 <_strtod_l+0x858>)
 8034dea:	3d01      	subs	r5, #1
 8034dec:	429d      	cmp	r5, r3
 8034dee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8034df2:	da50      	bge.n	8034e96 <_strtod_l+0x76e>
 8034df4:	1b5b      	subs	r3, r3, r5
 8034df6:	2b1f      	cmp	r3, #31
 8034df8:	eba2 0203 	sub.w	r2, r2, r3
 8034dfc:	f04f 0101 	mov.w	r1, #1
 8034e00:	dc3d      	bgt.n	8034e7e <_strtod_l+0x756>
 8034e02:	fa01 f303 	lsl.w	r3, r1, r3
 8034e06:	9313      	str	r3, [sp, #76]	@ 0x4c
 8034e08:	2300      	movs	r3, #0
 8034e0a:	9310      	str	r3, [sp, #64]	@ 0x40
 8034e0c:	18bd      	adds	r5, r7, r2
 8034e0e:	9b08      	ldr	r3, [sp, #32]
 8034e10:	42af      	cmp	r7, r5
 8034e12:	4416      	add	r6, r2
 8034e14:	441e      	add	r6, r3
 8034e16:	463b      	mov	r3, r7
 8034e18:	bfa8      	it	ge
 8034e1a:	462b      	movge	r3, r5
 8034e1c:	42b3      	cmp	r3, r6
 8034e1e:	bfa8      	it	ge
 8034e20:	4633      	movge	r3, r6
 8034e22:	2b00      	cmp	r3, #0
 8034e24:	bfc2      	ittt	gt
 8034e26:	1aed      	subgt	r5, r5, r3
 8034e28:	1af6      	subgt	r6, r6, r3
 8034e2a:	1aff      	subgt	r7, r7, r3
 8034e2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8034e2e:	2b00      	cmp	r3, #0
 8034e30:	dd16      	ble.n	8034e60 <_strtod_l+0x738>
 8034e32:	4641      	mov	r1, r8
 8034e34:	9805      	ldr	r0, [sp, #20]
 8034e36:	461a      	mov	r2, r3
 8034e38:	f002 f9e6 	bl	8037208 <__pow5mult>
 8034e3c:	4680      	mov	r8, r0
 8034e3e:	2800      	cmp	r0, #0
 8034e40:	d0ba      	beq.n	8034db8 <_strtod_l+0x690>
 8034e42:	4601      	mov	r1, r0
 8034e44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8034e46:	9805      	ldr	r0, [sp, #20]
 8034e48:	f002 f93c 	bl	80370c4 <__multiply>
 8034e4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8034e4e:	2800      	cmp	r0, #0
 8034e50:	f43f ae8d 	beq.w	8034b6e <_strtod_l+0x446>
 8034e54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034e56:	9805      	ldr	r0, [sp, #20]
 8034e58:	f002 f838 	bl	8036ecc <_Bfree>
 8034e5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034e5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8034e60:	2d00      	cmp	r5, #0
 8034e62:	dc1d      	bgt.n	8034ea0 <_strtod_l+0x778>
 8034e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034e66:	2b00      	cmp	r3, #0
 8034e68:	dd23      	ble.n	8034eb2 <_strtod_l+0x78a>
 8034e6a:	4649      	mov	r1, r9
 8034e6c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8034e6e:	9805      	ldr	r0, [sp, #20]
 8034e70:	f002 f9ca 	bl	8037208 <__pow5mult>
 8034e74:	4681      	mov	r9, r0
 8034e76:	b9e0      	cbnz	r0, 8034eb2 <_strtod_l+0x78a>
 8034e78:	f04f 0900 	mov.w	r9, #0
 8034e7c:	e677      	b.n	8034b6e <_strtod_l+0x446>
 8034e7e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8034e82:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8034e86:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8034e8a:	35e2      	adds	r5, #226	@ 0xe2
 8034e8c:	fa01 f305 	lsl.w	r3, r1, r5
 8034e90:	9310      	str	r3, [sp, #64]	@ 0x40
 8034e92:	9113      	str	r1, [sp, #76]	@ 0x4c
 8034e94:	e7ba      	b.n	8034e0c <_strtod_l+0x6e4>
 8034e96:	2300      	movs	r3, #0
 8034e98:	9310      	str	r3, [sp, #64]	@ 0x40
 8034e9a:	2301      	movs	r3, #1
 8034e9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8034e9e:	e7b5      	b.n	8034e0c <_strtod_l+0x6e4>
 8034ea0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034ea2:	9805      	ldr	r0, [sp, #20]
 8034ea4:	462a      	mov	r2, r5
 8034ea6:	f002 f9ef 	bl	8037288 <__lshift>
 8034eaa:	901a      	str	r0, [sp, #104]	@ 0x68
 8034eac:	2800      	cmp	r0, #0
 8034eae:	d1d9      	bne.n	8034e64 <_strtod_l+0x73c>
 8034eb0:	e65d      	b.n	8034b6e <_strtod_l+0x446>
 8034eb2:	2e00      	cmp	r6, #0
 8034eb4:	dd07      	ble.n	8034ec6 <_strtod_l+0x79e>
 8034eb6:	4649      	mov	r1, r9
 8034eb8:	9805      	ldr	r0, [sp, #20]
 8034eba:	4632      	mov	r2, r6
 8034ebc:	f002 f9e4 	bl	8037288 <__lshift>
 8034ec0:	4681      	mov	r9, r0
 8034ec2:	2800      	cmp	r0, #0
 8034ec4:	d0d8      	beq.n	8034e78 <_strtod_l+0x750>
 8034ec6:	2f00      	cmp	r7, #0
 8034ec8:	dd08      	ble.n	8034edc <_strtod_l+0x7b4>
 8034eca:	4641      	mov	r1, r8
 8034ecc:	9805      	ldr	r0, [sp, #20]
 8034ece:	463a      	mov	r2, r7
 8034ed0:	f002 f9da 	bl	8037288 <__lshift>
 8034ed4:	4680      	mov	r8, r0
 8034ed6:	2800      	cmp	r0, #0
 8034ed8:	f43f ae49 	beq.w	8034b6e <_strtod_l+0x446>
 8034edc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034ede:	9805      	ldr	r0, [sp, #20]
 8034ee0:	464a      	mov	r2, r9
 8034ee2:	f002 fa59 	bl	8037398 <__mdiff>
 8034ee6:	4604      	mov	r4, r0
 8034ee8:	2800      	cmp	r0, #0
 8034eea:	f43f ae40 	beq.w	8034b6e <_strtod_l+0x446>
 8034eee:	68c3      	ldr	r3, [r0, #12]
 8034ef0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8034ef2:	2300      	movs	r3, #0
 8034ef4:	60c3      	str	r3, [r0, #12]
 8034ef6:	4641      	mov	r1, r8
 8034ef8:	f002 fa32 	bl	8037360 <__mcmp>
 8034efc:	2800      	cmp	r0, #0
 8034efe:	da45      	bge.n	8034f8c <_strtod_l+0x864>
 8034f00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034f02:	ea53 030a 	orrs.w	r3, r3, sl
 8034f06:	d16b      	bne.n	8034fe0 <_strtod_l+0x8b8>
 8034f08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8034f0c:	2b00      	cmp	r3, #0
 8034f0e:	d167      	bne.n	8034fe0 <_strtod_l+0x8b8>
 8034f10:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8034f14:	0d1b      	lsrs	r3, r3, #20
 8034f16:	051b      	lsls	r3, r3, #20
 8034f18:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8034f1c:	d960      	bls.n	8034fe0 <_strtod_l+0x8b8>
 8034f1e:	6963      	ldr	r3, [r4, #20]
 8034f20:	b913      	cbnz	r3, 8034f28 <_strtod_l+0x800>
 8034f22:	6923      	ldr	r3, [r4, #16]
 8034f24:	2b01      	cmp	r3, #1
 8034f26:	dd5b      	ble.n	8034fe0 <_strtod_l+0x8b8>
 8034f28:	4621      	mov	r1, r4
 8034f2a:	2201      	movs	r2, #1
 8034f2c:	9805      	ldr	r0, [sp, #20]
 8034f2e:	f002 f9ab 	bl	8037288 <__lshift>
 8034f32:	4641      	mov	r1, r8
 8034f34:	4604      	mov	r4, r0
 8034f36:	f002 fa13 	bl	8037360 <__mcmp>
 8034f3a:	2800      	cmp	r0, #0
 8034f3c:	dd50      	ble.n	8034fe0 <_strtod_l+0x8b8>
 8034f3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8034f42:	9a08      	ldr	r2, [sp, #32]
 8034f44:	0d1b      	lsrs	r3, r3, #20
 8034f46:	051b      	lsls	r3, r3, #20
 8034f48:	2a00      	cmp	r2, #0
 8034f4a:	d06a      	beq.n	8035022 <_strtod_l+0x8fa>
 8034f4c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8034f50:	d867      	bhi.n	8035022 <_strtod_l+0x8fa>
 8034f52:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8034f56:	f67f ae9d 	bls.w	8034c94 <_strtod_l+0x56c>
 8034f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8034f84 <_strtod_l+0x85c>)
 8034f5c:	4650      	mov	r0, sl
 8034f5e:	4659      	mov	r1, fp
 8034f60:	2200      	movs	r2, #0
 8034f62:	f7db fb61 	bl	8010628 <__aeabi_dmul>
 8034f66:	4b08      	ldr	r3, [pc, #32]	@ (8034f88 <_strtod_l+0x860>)
 8034f68:	400b      	ands	r3, r1
 8034f6a:	4682      	mov	sl, r0
 8034f6c:	468b      	mov	fp, r1
 8034f6e:	2b00      	cmp	r3, #0
 8034f70:	f47f ae08 	bne.w	8034b84 <_strtod_l+0x45c>
 8034f74:	9a05      	ldr	r2, [sp, #20]
 8034f76:	2322      	movs	r3, #34	@ 0x22
 8034f78:	6013      	str	r3, [r2, #0]
 8034f7a:	e603      	b.n	8034b84 <_strtod_l+0x45c>
 8034f7c:	0803e1c8 	.word	0x0803e1c8
 8034f80:	fffffc02 	.word	0xfffffc02
 8034f84:	39500000 	.word	0x39500000
 8034f88:	7ff00000 	.word	0x7ff00000
 8034f8c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8034f90:	d165      	bne.n	803505e <_strtod_l+0x936>
 8034f92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8034f94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8034f98:	b35a      	cbz	r2, 8034ff2 <_strtod_l+0x8ca>
 8034f9a:	4a9f      	ldr	r2, [pc, #636]	@ (8035218 <_strtod_l+0xaf0>)
 8034f9c:	4293      	cmp	r3, r2
 8034f9e:	d12b      	bne.n	8034ff8 <_strtod_l+0x8d0>
 8034fa0:	9b08      	ldr	r3, [sp, #32]
 8034fa2:	4651      	mov	r1, sl
 8034fa4:	b303      	cbz	r3, 8034fe8 <_strtod_l+0x8c0>
 8034fa6:	4b9d      	ldr	r3, [pc, #628]	@ (803521c <_strtod_l+0xaf4>)
 8034fa8:	465a      	mov	r2, fp
 8034faa:	4013      	ands	r3, r2
 8034fac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8034fb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8034fb4:	d81b      	bhi.n	8034fee <_strtod_l+0x8c6>
 8034fb6:	0d1b      	lsrs	r3, r3, #20
 8034fb8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8034fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8034fc0:	4299      	cmp	r1, r3
 8034fc2:	d119      	bne.n	8034ff8 <_strtod_l+0x8d0>
 8034fc4:	4b96      	ldr	r3, [pc, #600]	@ (8035220 <_strtod_l+0xaf8>)
 8034fc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8034fc8:	429a      	cmp	r2, r3
 8034fca:	d102      	bne.n	8034fd2 <_strtod_l+0x8aa>
 8034fcc:	3101      	adds	r1, #1
 8034fce:	f43f adce 	beq.w	8034b6e <_strtod_l+0x446>
 8034fd2:	4b92      	ldr	r3, [pc, #584]	@ (803521c <_strtod_l+0xaf4>)
 8034fd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8034fd6:	401a      	ands	r2, r3
 8034fd8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8034fdc:	f04f 0a00 	mov.w	sl, #0
 8034fe0:	9b08      	ldr	r3, [sp, #32]
 8034fe2:	2b00      	cmp	r3, #0
 8034fe4:	d1b9      	bne.n	8034f5a <_strtod_l+0x832>
 8034fe6:	e5cd      	b.n	8034b84 <_strtod_l+0x45c>
 8034fe8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8034fec:	e7e8      	b.n	8034fc0 <_strtod_l+0x898>
 8034fee:	4613      	mov	r3, r2
 8034ff0:	e7e6      	b.n	8034fc0 <_strtod_l+0x898>
 8034ff2:	ea53 030a 	orrs.w	r3, r3, sl
 8034ff6:	d0a2      	beq.n	8034f3e <_strtod_l+0x816>
 8034ff8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8034ffa:	b1db      	cbz	r3, 8035034 <_strtod_l+0x90c>
 8034ffc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8034ffe:	4213      	tst	r3, r2
 8035000:	d0ee      	beq.n	8034fe0 <_strtod_l+0x8b8>
 8035002:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035004:	9a08      	ldr	r2, [sp, #32]
 8035006:	4650      	mov	r0, sl
 8035008:	4659      	mov	r1, fp
 803500a:	b1bb      	cbz	r3, 803503c <_strtod_l+0x914>
 803500c:	f7ff fb6c 	bl	80346e8 <sulp>
 8035010:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8035014:	ec53 2b10 	vmov	r2, r3, d0
 8035018:	f7db f950 	bl	80102bc <__adddf3>
 803501c:	4682      	mov	sl, r0
 803501e:	468b      	mov	fp, r1
 8035020:	e7de      	b.n	8034fe0 <_strtod_l+0x8b8>
 8035022:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8035026:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 803502a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 803502e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8035032:	e7d5      	b.n	8034fe0 <_strtod_l+0x8b8>
 8035034:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8035036:	ea13 0f0a 	tst.w	r3, sl
 803503a:	e7e1      	b.n	8035000 <_strtod_l+0x8d8>
 803503c:	f7ff fb54 	bl	80346e8 <sulp>
 8035040:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8035044:	ec53 2b10 	vmov	r2, r3, d0
 8035048:	f7db f936 	bl	80102b8 <__aeabi_dsub>
 803504c:	2200      	movs	r2, #0
 803504e:	2300      	movs	r3, #0
 8035050:	4682      	mov	sl, r0
 8035052:	468b      	mov	fp, r1
 8035054:	f7db fd50 	bl	8010af8 <__aeabi_dcmpeq>
 8035058:	2800      	cmp	r0, #0
 803505a:	d0c1      	beq.n	8034fe0 <_strtod_l+0x8b8>
 803505c:	e61a      	b.n	8034c94 <_strtod_l+0x56c>
 803505e:	4641      	mov	r1, r8
 8035060:	4620      	mov	r0, r4
 8035062:	f002 faf5 	bl	8037650 <__ratio>
 8035066:	ec57 6b10 	vmov	r6, r7, d0
 803506a:	2200      	movs	r2, #0
 803506c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8035070:	4630      	mov	r0, r6
 8035072:	4639      	mov	r1, r7
 8035074:	f7db fd54 	bl	8010b20 <__aeabi_dcmple>
 8035078:	2800      	cmp	r0, #0
 803507a:	d06f      	beq.n	803515c <_strtod_l+0xa34>
 803507c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803507e:	2b00      	cmp	r3, #0
 8035080:	d17a      	bne.n	8035178 <_strtod_l+0xa50>
 8035082:	f1ba 0f00 	cmp.w	sl, #0
 8035086:	d158      	bne.n	803513a <_strtod_l+0xa12>
 8035088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803508a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 803508e:	2b00      	cmp	r3, #0
 8035090:	d15a      	bne.n	8035148 <_strtod_l+0xa20>
 8035092:	4b64      	ldr	r3, [pc, #400]	@ (8035224 <_strtod_l+0xafc>)
 8035094:	2200      	movs	r2, #0
 8035096:	4630      	mov	r0, r6
 8035098:	4639      	mov	r1, r7
 803509a:	f7db fd37 	bl	8010b0c <__aeabi_dcmplt>
 803509e:	2800      	cmp	r0, #0
 80350a0:	d159      	bne.n	8035156 <_strtod_l+0xa2e>
 80350a2:	4630      	mov	r0, r6
 80350a4:	4639      	mov	r1, r7
 80350a6:	4b60      	ldr	r3, [pc, #384]	@ (8035228 <_strtod_l+0xb00>)
 80350a8:	2200      	movs	r2, #0
 80350aa:	f7db fabd 	bl	8010628 <__aeabi_dmul>
 80350ae:	4606      	mov	r6, r0
 80350b0:	460f      	mov	r7, r1
 80350b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80350b6:	9606      	str	r6, [sp, #24]
 80350b8:	9307      	str	r3, [sp, #28]
 80350ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80350be:	4d57      	ldr	r5, [pc, #348]	@ (803521c <_strtod_l+0xaf4>)
 80350c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80350c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80350c6:	401d      	ands	r5, r3
 80350c8:	4b58      	ldr	r3, [pc, #352]	@ (803522c <_strtod_l+0xb04>)
 80350ca:	429d      	cmp	r5, r3
 80350cc:	f040 80b2 	bne.w	8035234 <_strtod_l+0xb0c>
 80350d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80350d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80350d6:	ec4b ab10 	vmov	d0, sl, fp
 80350da:	f002 f9f1 	bl	80374c0 <__ulp>
 80350de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80350e2:	ec51 0b10 	vmov	r0, r1, d0
 80350e6:	f7db fa9f 	bl	8010628 <__aeabi_dmul>
 80350ea:	4652      	mov	r2, sl
 80350ec:	465b      	mov	r3, fp
 80350ee:	f7db f8e5 	bl	80102bc <__adddf3>
 80350f2:	460b      	mov	r3, r1
 80350f4:	4949      	ldr	r1, [pc, #292]	@ (803521c <_strtod_l+0xaf4>)
 80350f6:	4a4e      	ldr	r2, [pc, #312]	@ (8035230 <_strtod_l+0xb08>)
 80350f8:	4019      	ands	r1, r3
 80350fa:	4291      	cmp	r1, r2
 80350fc:	4682      	mov	sl, r0
 80350fe:	d942      	bls.n	8035186 <_strtod_l+0xa5e>
 8035100:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8035102:	4b47      	ldr	r3, [pc, #284]	@ (8035220 <_strtod_l+0xaf8>)
 8035104:	429a      	cmp	r2, r3
 8035106:	d103      	bne.n	8035110 <_strtod_l+0x9e8>
 8035108:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803510a:	3301      	adds	r3, #1
 803510c:	f43f ad2f 	beq.w	8034b6e <_strtod_l+0x446>
 8035110:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8035220 <_strtod_l+0xaf8>
 8035114:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8035118:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803511a:	9805      	ldr	r0, [sp, #20]
 803511c:	f001 fed6 	bl	8036ecc <_Bfree>
 8035120:	9805      	ldr	r0, [sp, #20]
 8035122:	4649      	mov	r1, r9
 8035124:	f001 fed2 	bl	8036ecc <_Bfree>
 8035128:	9805      	ldr	r0, [sp, #20]
 803512a:	4641      	mov	r1, r8
 803512c:	f001 fece 	bl	8036ecc <_Bfree>
 8035130:	9805      	ldr	r0, [sp, #20]
 8035132:	4621      	mov	r1, r4
 8035134:	f001 feca 	bl	8036ecc <_Bfree>
 8035138:	e619      	b.n	8034d6e <_strtod_l+0x646>
 803513a:	f1ba 0f01 	cmp.w	sl, #1
 803513e:	d103      	bne.n	8035148 <_strtod_l+0xa20>
 8035140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8035142:	2b00      	cmp	r3, #0
 8035144:	f43f ada6 	beq.w	8034c94 <_strtod_l+0x56c>
 8035148:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80351f8 <_strtod_l+0xad0>
 803514c:	4f35      	ldr	r7, [pc, #212]	@ (8035224 <_strtod_l+0xafc>)
 803514e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8035152:	2600      	movs	r6, #0
 8035154:	e7b1      	b.n	80350ba <_strtod_l+0x992>
 8035156:	4f34      	ldr	r7, [pc, #208]	@ (8035228 <_strtod_l+0xb00>)
 8035158:	2600      	movs	r6, #0
 803515a:	e7aa      	b.n	80350b2 <_strtod_l+0x98a>
 803515c:	4b32      	ldr	r3, [pc, #200]	@ (8035228 <_strtod_l+0xb00>)
 803515e:	4630      	mov	r0, r6
 8035160:	4639      	mov	r1, r7
 8035162:	2200      	movs	r2, #0
 8035164:	f7db fa60 	bl	8010628 <__aeabi_dmul>
 8035168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803516a:	4606      	mov	r6, r0
 803516c:	460f      	mov	r7, r1
 803516e:	2b00      	cmp	r3, #0
 8035170:	d09f      	beq.n	80350b2 <_strtod_l+0x98a>
 8035172:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8035176:	e7a0      	b.n	80350ba <_strtod_l+0x992>
 8035178:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8035200 <_strtod_l+0xad8>
 803517c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8035180:	ec57 6b17 	vmov	r6, r7, d7
 8035184:	e799      	b.n	80350ba <_strtod_l+0x992>
 8035186:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 803518a:	9b08      	ldr	r3, [sp, #32]
 803518c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8035190:	2b00      	cmp	r3, #0
 8035192:	d1c1      	bne.n	8035118 <_strtod_l+0x9f0>
 8035194:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8035198:	0d1b      	lsrs	r3, r3, #20
 803519a:	051b      	lsls	r3, r3, #20
 803519c:	429d      	cmp	r5, r3
 803519e:	d1bb      	bne.n	8035118 <_strtod_l+0x9f0>
 80351a0:	4630      	mov	r0, r6
 80351a2:	4639      	mov	r1, r7
 80351a4:	f7db fe04 	bl	8010db0 <__aeabi_d2lz>
 80351a8:	f7db fa10 	bl	80105cc <__aeabi_l2d>
 80351ac:	4602      	mov	r2, r0
 80351ae:	460b      	mov	r3, r1
 80351b0:	4630      	mov	r0, r6
 80351b2:	4639      	mov	r1, r7
 80351b4:	f7db f880 	bl	80102b8 <__aeabi_dsub>
 80351b8:	460b      	mov	r3, r1
 80351ba:	4602      	mov	r2, r0
 80351bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80351c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80351c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80351c6:	ea46 060a 	orr.w	r6, r6, sl
 80351ca:	431e      	orrs	r6, r3
 80351cc:	d06f      	beq.n	80352ae <_strtod_l+0xb86>
 80351ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8035208 <_strtod_l+0xae0>)
 80351d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80351d4:	f7db fc9a 	bl	8010b0c <__aeabi_dcmplt>
 80351d8:	2800      	cmp	r0, #0
 80351da:	f47f acd3 	bne.w	8034b84 <_strtod_l+0x45c>
 80351de:	a30c      	add	r3, pc, #48	@ (adr r3, 8035210 <_strtod_l+0xae8>)
 80351e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80351e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80351e8:	f7db fcae 	bl	8010b48 <__aeabi_dcmpgt>
 80351ec:	2800      	cmp	r0, #0
 80351ee:	d093      	beq.n	8035118 <_strtod_l+0x9f0>
 80351f0:	e4c8      	b.n	8034b84 <_strtod_l+0x45c>
 80351f2:	bf00      	nop
 80351f4:	f3af 8000 	nop.w
 80351f8:	00000000 	.word	0x00000000
 80351fc:	bff00000 	.word	0xbff00000
 8035200:	00000000 	.word	0x00000000
 8035204:	3ff00000 	.word	0x3ff00000
 8035208:	94a03595 	.word	0x94a03595
 803520c:	3fdfffff 	.word	0x3fdfffff
 8035210:	35afe535 	.word	0x35afe535
 8035214:	3fe00000 	.word	0x3fe00000
 8035218:	000fffff 	.word	0x000fffff
 803521c:	7ff00000 	.word	0x7ff00000
 8035220:	7fefffff 	.word	0x7fefffff
 8035224:	3ff00000 	.word	0x3ff00000
 8035228:	3fe00000 	.word	0x3fe00000
 803522c:	7fe00000 	.word	0x7fe00000
 8035230:	7c9fffff 	.word	0x7c9fffff
 8035234:	9b08      	ldr	r3, [sp, #32]
 8035236:	b323      	cbz	r3, 8035282 <_strtod_l+0xb5a>
 8035238:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 803523c:	d821      	bhi.n	8035282 <_strtod_l+0xb5a>
 803523e:	a328      	add	r3, pc, #160	@ (adr r3, 80352e0 <_strtod_l+0xbb8>)
 8035240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035244:	4630      	mov	r0, r6
 8035246:	4639      	mov	r1, r7
 8035248:	f7db fc6a 	bl	8010b20 <__aeabi_dcmple>
 803524c:	b1a0      	cbz	r0, 8035278 <_strtod_l+0xb50>
 803524e:	4639      	mov	r1, r7
 8035250:	4630      	mov	r0, r6
 8035252:	f7db fcc1 	bl	8010bd8 <__aeabi_d2uiz>
 8035256:	2801      	cmp	r0, #1
 8035258:	bf38      	it	cc
 803525a:	2001      	movcc	r0, #1
 803525c:	f7db f96a 	bl	8010534 <__aeabi_ui2d>
 8035260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035262:	4606      	mov	r6, r0
 8035264:	460f      	mov	r7, r1
 8035266:	b9fb      	cbnz	r3, 80352a8 <_strtod_l+0xb80>
 8035268:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 803526c:	9014      	str	r0, [sp, #80]	@ 0x50
 803526e:	9315      	str	r3, [sp, #84]	@ 0x54
 8035270:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8035274:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8035278:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803527a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 803527e:	1b5b      	subs	r3, r3, r5
 8035280:	9311      	str	r3, [sp, #68]	@ 0x44
 8035282:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8035286:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 803528a:	f002 f919 	bl	80374c0 <__ulp>
 803528e:	4650      	mov	r0, sl
 8035290:	ec53 2b10 	vmov	r2, r3, d0
 8035294:	4659      	mov	r1, fp
 8035296:	f7db f9c7 	bl	8010628 <__aeabi_dmul>
 803529a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 803529e:	f7db f80d 	bl	80102bc <__adddf3>
 80352a2:	4682      	mov	sl, r0
 80352a4:	468b      	mov	fp, r1
 80352a6:	e770      	b.n	803518a <_strtod_l+0xa62>
 80352a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80352ac:	e7e0      	b.n	8035270 <_strtod_l+0xb48>
 80352ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80352e8 <_strtod_l+0xbc0>)
 80352b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80352b4:	f7db fc2a 	bl	8010b0c <__aeabi_dcmplt>
 80352b8:	e798      	b.n	80351ec <_strtod_l+0xac4>
 80352ba:	2300      	movs	r3, #0
 80352bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80352be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80352c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80352c2:	6013      	str	r3, [r2, #0]
 80352c4:	f7ff ba6d 	b.w	80347a2 <_strtod_l+0x7a>
 80352c8:	2a65      	cmp	r2, #101	@ 0x65
 80352ca:	f43f ab68 	beq.w	803499e <_strtod_l+0x276>
 80352ce:	2a45      	cmp	r2, #69	@ 0x45
 80352d0:	f43f ab65 	beq.w	803499e <_strtod_l+0x276>
 80352d4:	2301      	movs	r3, #1
 80352d6:	f7ff bba0 	b.w	8034a1a <_strtod_l+0x2f2>
 80352da:	bf00      	nop
 80352dc:	f3af 8000 	nop.w
 80352e0:	ffc00000 	.word	0xffc00000
 80352e4:	41dfffff 	.word	0x41dfffff
 80352e8:	94a03595 	.word	0x94a03595
 80352ec:	3fcfffff 	.word	0x3fcfffff

080352f0 <_strtod_r>:
 80352f0:	4b01      	ldr	r3, [pc, #4]	@ (80352f8 <_strtod_r+0x8>)
 80352f2:	f7ff ba19 	b.w	8034728 <_strtod_l>
 80352f6:	bf00      	nop
 80352f8:	20000730 	.word	0x20000730

080352fc <_strtoul_l.isra.0>:
 80352fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8035300:	4e34      	ldr	r6, [pc, #208]	@ (80353d4 <_strtoul_l.isra.0+0xd8>)
 8035302:	4686      	mov	lr, r0
 8035304:	460d      	mov	r5, r1
 8035306:	4628      	mov	r0, r5
 8035308:	f815 4b01 	ldrb.w	r4, [r5], #1
 803530c:	5d37      	ldrb	r7, [r6, r4]
 803530e:	f017 0708 	ands.w	r7, r7, #8
 8035312:	d1f8      	bne.n	8035306 <_strtoul_l.isra.0+0xa>
 8035314:	2c2d      	cmp	r4, #45	@ 0x2d
 8035316:	d110      	bne.n	803533a <_strtoul_l.isra.0+0x3e>
 8035318:	782c      	ldrb	r4, [r5, #0]
 803531a:	2701      	movs	r7, #1
 803531c:	1c85      	adds	r5, r0, #2
 803531e:	f033 0010 	bics.w	r0, r3, #16
 8035322:	d115      	bne.n	8035350 <_strtoul_l.isra.0+0x54>
 8035324:	2c30      	cmp	r4, #48	@ 0x30
 8035326:	d10d      	bne.n	8035344 <_strtoul_l.isra.0+0x48>
 8035328:	7828      	ldrb	r0, [r5, #0]
 803532a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 803532e:	2858      	cmp	r0, #88	@ 0x58
 8035330:	d108      	bne.n	8035344 <_strtoul_l.isra.0+0x48>
 8035332:	786c      	ldrb	r4, [r5, #1]
 8035334:	3502      	adds	r5, #2
 8035336:	2310      	movs	r3, #16
 8035338:	e00a      	b.n	8035350 <_strtoul_l.isra.0+0x54>
 803533a:	2c2b      	cmp	r4, #43	@ 0x2b
 803533c:	bf04      	itt	eq
 803533e:	782c      	ldrbeq	r4, [r5, #0]
 8035340:	1c85      	addeq	r5, r0, #2
 8035342:	e7ec      	b.n	803531e <_strtoul_l.isra.0+0x22>
 8035344:	2b00      	cmp	r3, #0
 8035346:	d1f6      	bne.n	8035336 <_strtoul_l.isra.0+0x3a>
 8035348:	2c30      	cmp	r4, #48	@ 0x30
 803534a:	bf14      	ite	ne
 803534c:	230a      	movne	r3, #10
 803534e:	2308      	moveq	r3, #8
 8035350:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8035354:	2600      	movs	r6, #0
 8035356:	fbb8 f8f3 	udiv	r8, r8, r3
 803535a:	fb03 f908 	mul.w	r9, r3, r8
 803535e:	ea6f 0909 	mvn.w	r9, r9
 8035362:	4630      	mov	r0, r6
 8035364:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8035368:	f1bc 0f09 	cmp.w	ip, #9
 803536c:	d810      	bhi.n	8035390 <_strtoul_l.isra.0+0x94>
 803536e:	4664      	mov	r4, ip
 8035370:	42a3      	cmp	r3, r4
 8035372:	dd1e      	ble.n	80353b2 <_strtoul_l.isra.0+0xb6>
 8035374:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8035378:	d007      	beq.n	803538a <_strtoul_l.isra.0+0x8e>
 803537a:	4580      	cmp	r8, r0
 803537c:	d316      	bcc.n	80353ac <_strtoul_l.isra.0+0xb0>
 803537e:	d101      	bne.n	8035384 <_strtoul_l.isra.0+0x88>
 8035380:	45a1      	cmp	r9, r4
 8035382:	db13      	blt.n	80353ac <_strtoul_l.isra.0+0xb0>
 8035384:	fb00 4003 	mla	r0, r0, r3, r4
 8035388:	2601      	movs	r6, #1
 803538a:	f815 4b01 	ldrb.w	r4, [r5], #1
 803538e:	e7e9      	b.n	8035364 <_strtoul_l.isra.0+0x68>
 8035390:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8035394:	f1bc 0f19 	cmp.w	ip, #25
 8035398:	d801      	bhi.n	803539e <_strtoul_l.isra.0+0xa2>
 803539a:	3c37      	subs	r4, #55	@ 0x37
 803539c:	e7e8      	b.n	8035370 <_strtoul_l.isra.0+0x74>
 803539e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80353a2:	f1bc 0f19 	cmp.w	ip, #25
 80353a6:	d804      	bhi.n	80353b2 <_strtoul_l.isra.0+0xb6>
 80353a8:	3c57      	subs	r4, #87	@ 0x57
 80353aa:	e7e1      	b.n	8035370 <_strtoul_l.isra.0+0x74>
 80353ac:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80353b0:	e7eb      	b.n	803538a <_strtoul_l.isra.0+0x8e>
 80353b2:	1c73      	adds	r3, r6, #1
 80353b4:	d106      	bne.n	80353c4 <_strtoul_l.isra.0+0xc8>
 80353b6:	2322      	movs	r3, #34	@ 0x22
 80353b8:	f8ce 3000 	str.w	r3, [lr]
 80353bc:	4630      	mov	r0, r6
 80353be:	b932      	cbnz	r2, 80353ce <_strtoul_l.isra.0+0xd2>
 80353c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80353c4:	b107      	cbz	r7, 80353c8 <_strtoul_l.isra.0+0xcc>
 80353c6:	4240      	negs	r0, r0
 80353c8:	2a00      	cmp	r2, #0
 80353ca:	d0f9      	beq.n	80353c0 <_strtoul_l.isra.0+0xc4>
 80353cc:	b106      	cbz	r6, 80353d0 <_strtoul_l.isra.0+0xd4>
 80353ce:	1e69      	subs	r1, r5, #1
 80353d0:	6011      	str	r1, [r2, #0]
 80353d2:	e7f5      	b.n	80353c0 <_strtoul_l.isra.0+0xc4>
 80353d4:	0803dff5 	.word	0x0803dff5

080353d8 <_strtoul_r>:
 80353d8:	f7ff bf90 	b.w	80352fc <_strtoul_l.isra.0>

080353dc <strtoul>:
 80353dc:	4613      	mov	r3, r2
 80353de:	460a      	mov	r2, r1
 80353e0:	4601      	mov	r1, r0
 80353e2:	4802      	ldr	r0, [pc, #8]	@ (80353ec <strtoul+0x10>)
 80353e4:	6800      	ldr	r0, [r0, #0]
 80353e6:	f7ff bf89 	b.w	80352fc <_strtoul_l.isra.0>
 80353ea:	bf00      	nop
 80353ec:	2000017c 	.word	0x2000017c

080353f0 <__ssprint_r>:
 80353f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80353f4:	6815      	ldr	r5, [r2, #0]
 80353f6:	4606      	mov	r6, r0
 80353f8:	460f      	mov	r7, r1
 80353fa:	4614      	mov	r4, r2
 80353fc:	68a3      	ldr	r3, [r4, #8]
 80353fe:	3508      	adds	r5, #8
 8035400:	b92b      	cbnz	r3, 803540e <__ssprint_r+0x1e>
 8035402:	2000      	movs	r0, #0
 8035404:	2300      	movs	r3, #0
 8035406:	e9c4 3301 	strd	r3, r3, [r4, #4]
 803540a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803540e:	6863      	ldr	r3, [r4, #4]
 8035410:	1e5a      	subs	r2, r3, #1
 8035412:	2b00      	cmp	r3, #0
 8035414:	6062      	str	r2, [r4, #4]
 8035416:	ddf4      	ble.n	8035402 <__ssprint_r+0x12>
 8035418:	f855 8c04 	ldr.w	r8, [r5, #-4]
 803541c:	f1b8 0f00 	cmp.w	r8, #0
 8035420:	d0ec      	beq.n	80353fc <__ssprint_r+0xc>
 8035422:	4643      	mov	r3, r8
 8035424:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8035428:	4639      	mov	r1, r7
 803542a:	4630      	mov	r0, r6
 803542c:	f002 f986 	bl	803773c <__ssputs_r>
 8035430:	1c43      	adds	r3, r0, #1
 8035432:	d0e7      	beq.n	8035404 <__ssprint_r+0x14>
 8035434:	68a2      	ldr	r2, [r4, #8]
 8035436:	eba2 0208 	sub.w	r2, r2, r8
 803543a:	60a2      	str	r2, [r4, #8]
 803543c:	e7de      	b.n	80353fc <__ssprint_r+0xc>

0803543e <__sccl>:
 803543e:	b570      	push	{r4, r5, r6, lr}
 8035440:	780b      	ldrb	r3, [r1, #0]
 8035442:	4604      	mov	r4, r0
 8035444:	2b5e      	cmp	r3, #94	@ 0x5e
 8035446:	bf0b      	itete	eq
 8035448:	784b      	ldrbeq	r3, [r1, #1]
 803544a:	1c4a      	addne	r2, r1, #1
 803544c:	1c8a      	addeq	r2, r1, #2
 803544e:	2100      	movne	r1, #0
 8035450:	bf08      	it	eq
 8035452:	2101      	moveq	r1, #1
 8035454:	3801      	subs	r0, #1
 8035456:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 803545a:	f800 1f01 	strb.w	r1, [r0, #1]!
 803545e:	42a8      	cmp	r0, r5
 8035460:	d1fb      	bne.n	803545a <__sccl+0x1c>
 8035462:	b90b      	cbnz	r3, 8035468 <__sccl+0x2a>
 8035464:	1e50      	subs	r0, r2, #1
 8035466:	bd70      	pop	{r4, r5, r6, pc}
 8035468:	f081 0101 	eor.w	r1, r1, #1
 803546c:	54e1      	strb	r1, [r4, r3]
 803546e:	4610      	mov	r0, r2
 8035470:	4602      	mov	r2, r0
 8035472:	f812 5b01 	ldrb.w	r5, [r2], #1
 8035476:	2d2d      	cmp	r5, #45	@ 0x2d
 8035478:	d005      	beq.n	8035486 <__sccl+0x48>
 803547a:	2d5d      	cmp	r5, #93	@ 0x5d
 803547c:	d016      	beq.n	80354ac <__sccl+0x6e>
 803547e:	2d00      	cmp	r5, #0
 8035480:	d0f1      	beq.n	8035466 <__sccl+0x28>
 8035482:	462b      	mov	r3, r5
 8035484:	e7f2      	b.n	803546c <__sccl+0x2e>
 8035486:	7846      	ldrb	r6, [r0, #1]
 8035488:	2e5d      	cmp	r6, #93	@ 0x5d
 803548a:	d0fa      	beq.n	8035482 <__sccl+0x44>
 803548c:	42b3      	cmp	r3, r6
 803548e:	dcf8      	bgt.n	8035482 <__sccl+0x44>
 8035490:	3002      	adds	r0, #2
 8035492:	461a      	mov	r2, r3
 8035494:	3201      	adds	r2, #1
 8035496:	4296      	cmp	r6, r2
 8035498:	54a1      	strb	r1, [r4, r2]
 803549a:	dcfb      	bgt.n	8035494 <__sccl+0x56>
 803549c:	1af2      	subs	r2, r6, r3
 803549e:	3a01      	subs	r2, #1
 80354a0:	1c5d      	adds	r5, r3, #1
 80354a2:	42b3      	cmp	r3, r6
 80354a4:	bfa8      	it	ge
 80354a6:	2200      	movge	r2, #0
 80354a8:	18ab      	adds	r3, r5, r2
 80354aa:	e7e1      	b.n	8035470 <__sccl+0x32>
 80354ac:	4610      	mov	r0, r2
 80354ae:	e7da      	b.n	8035466 <__sccl+0x28>

080354b0 <_fclose_r>:
 80354b0:	b570      	push	{r4, r5, r6, lr}
 80354b2:	4605      	mov	r5, r0
 80354b4:	460c      	mov	r4, r1
 80354b6:	b1b9      	cbz	r1, 80354e8 <_fclose_r+0x38>
 80354b8:	b118      	cbz	r0, 80354c2 <_fclose_r+0x12>
 80354ba:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80354bc:	b90b      	cbnz	r3, 80354c2 <_fclose_r+0x12>
 80354be:	f7f7 f8cb 	bl	802c658 <__sinit>
 80354c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80354c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80354c8:	07d6      	lsls	r6, r2, #31
 80354ca:	d404      	bmi.n	80354d6 <_fclose_r+0x26>
 80354cc:	0598      	lsls	r0, r3, #22
 80354ce:	d40e      	bmi.n	80354ee <_fclose_r+0x3e>
 80354d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80354d2:	f7f8 ff0e 	bl	802e2f2 <__retarget_lock_acquire_recursive>
 80354d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80354da:	b943      	cbnz	r3, 80354ee <_fclose_r+0x3e>
 80354dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80354de:	07d9      	lsls	r1, r3, #31
 80354e0:	d402      	bmi.n	80354e8 <_fclose_r+0x38>
 80354e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80354e4:	f7f8 ff07 	bl	802e2f6 <__retarget_lock_release_recursive>
 80354e8:	2600      	movs	r6, #0
 80354ea:	4630      	mov	r0, r6
 80354ec:	bd70      	pop	{r4, r5, r6, pc}
 80354ee:	4621      	mov	r1, r4
 80354f0:	4628      	mov	r0, r5
 80354f2:	f7f6 fead 	bl	802c250 <__sflush_r>
 80354f6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80354f8:	4606      	mov	r6, r0
 80354fa:	b133      	cbz	r3, 803550a <_fclose_r+0x5a>
 80354fc:	69e1      	ldr	r1, [r4, #28]
 80354fe:	4628      	mov	r0, r5
 8035500:	4798      	blx	r3
 8035502:	2800      	cmp	r0, #0
 8035504:	bfb8      	it	lt
 8035506:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 803550a:	89a3      	ldrh	r3, [r4, #12]
 803550c:	061a      	lsls	r2, r3, #24
 803550e:	d503      	bpl.n	8035518 <_fclose_r+0x68>
 8035510:	6921      	ldr	r1, [r4, #16]
 8035512:	4628      	mov	r0, r5
 8035514:	f7f8 ff78 	bl	802e408 <_free_r>
 8035518:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 803551a:	b141      	cbz	r1, 803552e <_fclose_r+0x7e>
 803551c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8035520:	4299      	cmp	r1, r3
 8035522:	d002      	beq.n	803552a <_fclose_r+0x7a>
 8035524:	4628      	mov	r0, r5
 8035526:	f7f8 ff6f 	bl	802e408 <_free_r>
 803552a:	2300      	movs	r3, #0
 803552c:	6323      	str	r3, [r4, #48]	@ 0x30
 803552e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8035530:	b121      	cbz	r1, 803553c <_fclose_r+0x8c>
 8035532:	4628      	mov	r0, r5
 8035534:	f7f8 ff68 	bl	802e408 <_free_r>
 8035538:	2300      	movs	r3, #0
 803553a:	6463      	str	r3, [r4, #68]	@ 0x44
 803553c:	f7f7 f880 	bl	802c640 <__sfp_lock_acquire>
 8035540:	2300      	movs	r3, #0
 8035542:	81a3      	strh	r3, [r4, #12]
 8035544:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8035546:	07db      	lsls	r3, r3, #31
 8035548:	d402      	bmi.n	8035550 <_fclose_r+0xa0>
 803554a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803554c:	f7f8 fed3 	bl	802e2f6 <__retarget_lock_release_recursive>
 8035550:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8035552:	f7f8 fecc 	bl	802e2ee <__retarget_lock_close_recursive>
 8035556:	f7f7 f879 	bl	802c64c <__sfp_lock_release>
 803555a:	e7c6      	b.n	80354ea <_fclose_r+0x3a>

0803555c <__submore>:
 803555c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8035560:	460c      	mov	r4, r1
 8035562:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8035564:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8035568:	4299      	cmp	r1, r3
 803556a:	d11d      	bne.n	80355a8 <__submore+0x4c>
 803556c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8035570:	f7f9 f862 	bl	802e638 <_malloc_r>
 8035574:	b918      	cbnz	r0, 803557e <__submore+0x22>
 8035576:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803557a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803557e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8035582:	6363      	str	r3, [r4, #52]	@ 0x34
 8035584:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8035588:	6320      	str	r0, [r4, #48]	@ 0x30
 803558a:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 803558e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8035592:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8035596:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 803559a:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 803559e:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80355a2:	6020      	str	r0, [r4, #0]
 80355a4:	2000      	movs	r0, #0
 80355a6:	e7e8      	b.n	803557a <__submore+0x1e>
 80355a8:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 80355aa:	0077      	lsls	r7, r6, #1
 80355ac:	463a      	mov	r2, r7
 80355ae:	f7fe febf 	bl	8034330 <_realloc_r>
 80355b2:	4605      	mov	r5, r0
 80355b4:	2800      	cmp	r0, #0
 80355b6:	d0de      	beq.n	8035576 <__submore+0x1a>
 80355b8:	eb00 0806 	add.w	r8, r0, r6
 80355bc:	4601      	mov	r1, r0
 80355be:	4632      	mov	r2, r6
 80355c0:	4640      	mov	r0, r8
 80355c2:	f7f8 fe99 	bl	802e2f8 <memcpy>
 80355c6:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 80355ca:	f8c4 8000 	str.w	r8, [r4]
 80355ce:	e7e9      	b.n	80355a4 <__submore+0x48>

080355d0 <__swbuf_r>:
 80355d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80355d2:	460e      	mov	r6, r1
 80355d4:	4614      	mov	r4, r2
 80355d6:	4605      	mov	r5, r0
 80355d8:	b118      	cbz	r0, 80355e2 <__swbuf_r+0x12>
 80355da:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80355dc:	b90b      	cbnz	r3, 80355e2 <__swbuf_r+0x12>
 80355de:	f7f7 f83b 	bl	802c658 <__sinit>
 80355e2:	69a3      	ldr	r3, [r4, #24]
 80355e4:	60a3      	str	r3, [r4, #8]
 80355e6:	89a3      	ldrh	r3, [r4, #12]
 80355e8:	0718      	lsls	r0, r3, #28
 80355ea:	d52b      	bpl.n	8035644 <__swbuf_r+0x74>
 80355ec:	6923      	ldr	r3, [r4, #16]
 80355ee:	b34b      	cbz	r3, 8035644 <__swbuf_r+0x74>
 80355f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80355f4:	b2f6      	uxtb	r6, r6
 80355f6:	0499      	lsls	r1, r3, #18
 80355f8:	4637      	mov	r7, r6
 80355fa:	d52d      	bpl.n	8035658 <__swbuf_r+0x88>
 80355fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80355fe:	049a      	lsls	r2, r3, #18
 8035600:	d426      	bmi.n	8035650 <__swbuf_r+0x80>
 8035602:	6823      	ldr	r3, [r4, #0]
 8035604:	6922      	ldr	r2, [r4, #16]
 8035606:	1a98      	subs	r0, r3, r2
 8035608:	6963      	ldr	r3, [r4, #20]
 803560a:	4283      	cmp	r3, r0
 803560c:	dc04      	bgt.n	8035618 <__swbuf_r+0x48>
 803560e:	4621      	mov	r1, r4
 8035610:	4628      	mov	r0, r5
 8035612:	f7f6 fea5 	bl	802c360 <_fflush_r>
 8035616:	b9d8      	cbnz	r0, 8035650 <__swbuf_r+0x80>
 8035618:	68a3      	ldr	r3, [r4, #8]
 803561a:	3b01      	subs	r3, #1
 803561c:	60a3      	str	r3, [r4, #8]
 803561e:	6823      	ldr	r3, [r4, #0]
 8035620:	1c5a      	adds	r2, r3, #1
 8035622:	6022      	str	r2, [r4, #0]
 8035624:	701e      	strb	r6, [r3, #0]
 8035626:	6962      	ldr	r2, [r4, #20]
 8035628:	1c43      	adds	r3, r0, #1
 803562a:	429a      	cmp	r2, r3
 803562c:	d004      	beq.n	8035638 <__swbuf_r+0x68>
 803562e:	89a3      	ldrh	r3, [r4, #12]
 8035630:	07db      	lsls	r3, r3, #31
 8035632:	d50f      	bpl.n	8035654 <__swbuf_r+0x84>
 8035634:	2e0a      	cmp	r6, #10
 8035636:	d10d      	bne.n	8035654 <__swbuf_r+0x84>
 8035638:	4621      	mov	r1, r4
 803563a:	4628      	mov	r0, r5
 803563c:	f7f6 fe90 	bl	802c360 <_fflush_r>
 8035640:	b140      	cbz	r0, 8035654 <__swbuf_r+0x84>
 8035642:	e005      	b.n	8035650 <__swbuf_r+0x80>
 8035644:	4621      	mov	r1, r4
 8035646:	4628      	mov	r0, r5
 8035648:	f7f7 f85a 	bl	802c700 <__swsetup_r>
 803564c:	2800      	cmp	r0, #0
 803564e:	d0cf      	beq.n	80355f0 <__swbuf_r+0x20>
 8035650:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8035654:	4638      	mov	r0, r7
 8035656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8035658:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 803565a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 803565e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8035662:	81a3      	strh	r3, [r4, #12]
 8035664:	6662      	str	r2, [r4, #100]	@ 0x64
 8035666:	e7c9      	b.n	80355fc <__swbuf_r+0x2c>

08035668 <_raise_r>:
 8035668:	291f      	cmp	r1, #31
 803566a:	b538      	push	{r3, r4, r5, lr}
 803566c:	4605      	mov	r5, r0
 803566e:	460c      	mov	r4, r1
 8035670:	d904      	bls.n	803567c <_raise_r+0x14>
 8035672:	2316      	movs	r3, #22
 8035674:	6003      	str	r3, [r0, #0]
 8035676:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803567a:	bd38      	pop	{r3, r4, r5, pc}
 803567c:	f8d0 2138 	ldr.w	r2, [r0, #312]	@ 0x138
 8035680:	b112      	cbz	r2, 8035688 <_raise_r+0x20>
 8035682:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8035686:	b94b      	cbnz	r3, 803569c <_raise_r+0x34>
 8035688:	4628      	mov	r0, r5
 803568a:	f000 f85d 	bl	8035748 <_getpid_r>
 803568e:	4622      	mov	r2, r4
 8035690:	4601      	mov	r1, r0
 8035692:	4628      	mov	r0, r5
 8035694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8035698:	f000 b844 	b.w	8035724 <_kill_r>
 803569c:	2b01      	cmp	r3, #1
 803569e:	d00a      	beq.n	80356b6 <_raise_r+0x4e>
 80356a0:	1c59      	adds	r1, r3, #1
 80356a2:	d103      	bne.n	80356ac <_raise_r+0x44>
 80356a4:	2316      	movs	r3, #22
 80356a6:	6003      	str	r3, [r0, #0]
 80356a8:	2001      	movs	r0, #1
 80356aa:	e7e6      	b.n	803567a <_raise_r+0x12>
 80356ac:	2100      	movs	r1, #0
 80356ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80356b2:	4620      	mov	r0, r4
 80356b4:	4798      	blx	r3
 80356b6:	2000      	movs	r0, #0
 80356b8:	e7df      	b.n	803567a <_raise_r+0x12>
	...

080356bc <raise>:
 80356bc:	4b02      	ldr	r3, [pc, #8]	@ (80356c8 <raise+0xc>)
 80356be:	4601      	mov	r1, r0
 80356c0:	6818      	ldr	r0, [r3, #0]
 80356c2:	f7ff bfd1 	b.w	8035668 <_raise_r>
 80356c6:	bf00      	nop
 80356c8:	2000017c 	.word	0x2000017c

080356cc <__gettzinfo>:
 80356cc:	4800      	ldr	r0, [pc, #0]	@ (80356d0 <__gettzinfo+0x4>)
 80356ce:	4770      	bx	lr
 80356d0:	200006d8 	.word	0x200006d8

080356d4 <__locale_mb_cur_max>:
 80356d4:	4b01      	ldr	r3, [pc, #4]	@ (80356dc <__locale_mb_cur_max+0x8>)
 80356d6:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 80356da:	4770      	bx	lr
 80356dc:	20000730 	.word	0x20000730

080356e0 <_fstat_r>:
 80356e0:	b538      	push	{r3, r4, r5, lr}
 80356e2:	4d07      	ldr	r5, [pc, #28]	@ (8035700 <_fstat_r+0x20>)
 80356e4:	2300      	movs	r3, #0
 80356e6:	4604      	mov	r4, r0
 80356e8:	4608      	mov	r0, r1
 80356ea:	4611      	mov	r1, r2
 80356ec:	602b      	str	r3, [r5, #0]
 80356ee:	f7dd f9d8 	bl	8012aa2 <_fstat>
 80356f2:	1c43      	adds	r3, r0, #1
 80356f4:	d102      	bne.n	80356fc <_fstat_r+0x1c>
 80356f6:	682b      	ldr	r3, [r5, #0]
 80356f8:	b103      	cbz	r3, 80356fc <_fstat_r+0x1c>
 80356fa:	6023      	str	r3, [r4, #0]
 80356fc:	bd38      	pop	{r3, r4, r5, pc}
 80356fe:	bf00      	nop
 8035700:	2001a28c 	.word	0x2001a28c

08035704 <_isatty_r>:
 8035704:	b538      	push	{r3, r4, r5, lr}
 8035706:	4d06      	ldr	r5, [pc, #24]	@ (8035720 <_isatty_r+0x1c>)
 8035708:	2300      	movs	r3, #0
 803570a:	4604      	mov	r4, r0
 803570c:	4608      	mov	r0, r1
 803570e:	602b      	str	r3, [r5, #0]
 8035710:	f7dd f9cc 	bl	8012aac <_isatty>
 8035714:	1c43      	adds	r3, r0, #1
 8035716:	d102      	bne.n	803571e <_isatty_r+0x1a>
 8035718:	682b      	ldr	r3, [r5, #0]
 803571a:	b103      	cbz	r3, 803571e <_isatty_r+0x1a>
 803571c:	6023      	str	r3, [r4, #0]
 803571e:	bd38      	pop	{r3, r4, r5, pc}
 8035720:	2001a28c 	.word	0x2001a28c

08035724 <_kill_r>:
 8035724:	b538      	push	{r3, r4, r5, lr}
 8035726:	4d07      	ldr	r5, [pc, #28]	@ (8035744 <_kill_r+0x20>)
 8035728:	2300      	movs	r3, #0
 803572a:	4604      	mov	r4, r0
 803572c:	4608      	mov	r0, r1
 803572e:	4611      	mov	r1, r2
 8035730:	602b      	str	r3, [r5, #0]
 8035732:	f7dd f987 	bl	8012a44 <_kill>
 8035736:	1c43      	adds	r3, r0, #1
 8035738:	d102      	bne.n	8035740 <_kill_r+0x1c>
 803573a:	682b      	ldr	r3, [r5, #0]
 803573c:	b103      	cbz	r3, 8035740 <_kill_r+0x1c>
 803573e:	6023      	str	r3, [r4, #0]
 8035740:	bd38      	pop	{r3, r4, r5, pc}
 8035742:	bf00      	nop
 8035744:	2001a28c 	.word	0x2001a28c

08035748 <_getpid_r>:
 8035748:	f7dd b97a 	b.w	8012a40 <_getpid>

0803574c <_strtoll_l.isra.0>:
 803574c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035750:	b085      	sub	sp, #20
 8035752:	4690      	mov	r8, r2
 8035754:	4a43      	ldr	r2, [pc, #268]	@ (8035864 <_strtoll_l.isra.0+0x118>)
 8035756:	9002      	str	r0, [sp, #8]
 8035758:	4689      	mov	r9, r1
 803575a:	461e      	mov	r6, r3
 803575c:	460d      	mov	r5, r1
 803575e:	462b      	mov	r3, r5
 8035760:	f815 4b01 	ldrb.w	r4, [r5], #1
 8035764:	5d17      	ldrb	r7, [r2, r4]
 8035766:	f017 0708 	ands.w	r7, r7, #8
 803576a:	d1f8      	bne.n	803575e <_strtoll_l.isra.0+0x12>
 803576c:	2c2d      	cmp	r4, #45	@ 0x2d
 803576e:	d110      	bne.n	8035792 <_strtoll_l.isra.0+0x46>
 8035770:	782c      	ldrb	r4, [r5, #0]
 8035772:	2701      	movs	r7, #1
 8035774:	1c9d      	adds	r5, r3, #2
 8035776:	f036 0310 	bics.w	r3, r6, #16
 803577a:	d115      	bne.n	80357a8 <_strtoll_l.isra.0+0x5c>
 803577c:	2c30      	cmp	r4, #48	@ 0x30
 803577e:	d10d      	bne.n	803579c <_strtoll_l.isra.0+0x50>
 8035780:	782b      	ldrb	r3, [r5, #0]
 8035782:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8035786:	2b58      	cmp	r3, #88	@ 0x58
 8035788:	d108      	bne.n	803579c <_strtoll_l.isra.0+0x50>
 803578a:	786c      	ldrb	r4, [r5, #1]
 803578c:	3502      	adds	r5, #2
 803578e:	2610      	movs	r6, #16
 8035790:	e00a      	b.n	80357a8 <_strtoll_l.isra.0+0x5c>
 8035792:	2c2b      	cmp	r4, #43	@ 0x2b
 8035794:	bf04      	itt	eq
 8035796:	782c      	ldrbeq	r4, [r5, #0]
 8035798:	1c9d      	addeq	r5, r3, #2
 803579a:	e7ec      	b.n	8035776 <_strtoll_l.isra.0+0x2a>
 803579c:	2e00      	cmp	r6, #0
 803579e:	d1f6      	bne.n	803578e <_strtoll_l.isra.0+0x42>
 80357a0:	2c30      	cmp	r4, #48	@ 0x30
 80357a2:	bf14      	ite	ne
 80357a4:	260a      	movne	r6, #10
 80357a6:	2608      	moveq	r6, #8
 80357a8:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 80357ac:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 80357b0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80357b4:	17f3      	asrs	r3, r6, #31
 80357b6:	4632      	mov	r2, r6
 80357b8:	4658      	mov	r0, fp
 80357ba:	4651      	mov	r1, sl
 80357bc:	9303      	str	r3, [sp, #12]
 80357be:	f7db facb 	bl	8010d58 <__aeabi_uldivmod>
 80357c2:	9201      	str	r2, [sp, #4]
 80357c4:	2200      	movs	r2, #0
 80357c6:	468e      	mov	lr, r1
 80357c8:	4684      	mov	ip, r0
 80357ca:	4611      	mov	r1, r2
 80357cc:	4610      	mov	r0, r2
 80357ce:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80357d2:	2b09      	cmp	r3, #9
 80357d4:	d905      	bls.n	80357e2 <_strtoll_l.isra.0+0x96>
 80357d6:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 80357da:	2b19      	cmp	r3, #25
 80357dc:	d81e      	bhi.n	803581c <_strtoll_l.isra.0+0xd0>
 80357de:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 80357e2:	429e      	cmp	r6, r3
 80357e4:	dd24      	ble.n	8035830 <_strtoll_l.isra.0+0xe4>
 80357e6:	1c54      	adds	r4, r2, #1
 80357e8:	d015      	beq.n	8035816 <_strtoll_l.isra.0+0xca>
 80357ea:	4584      	cmp	ip, r0
 80357ec:	eb7e 0201 	sbcs.w	r2, lr, r1
 80357f0:	d31b      	bcc.n	803582a <_strtoll_l.isra.0+0xde>
 80357f2:	458e      	cmp	lr, r1
 80357f4:	bf08      	it	eq
 80357f6:	4584      	cmpeq	ip, r0
 80357f8:	d102      	bne.n	8035800 <_strtoll_l.isra.0+0xb4>
 80357fa:	9a01      	ldr	r2, [sp, #4]
 80357fc:	429a      	cmp	r2, r3
 80357fe:	db14      	blt.n	803582a <_strtoll_l.isra.0+0xde>
 8035800:	9a03      	ldr	r2, [sp, #12]
 8035802:	4371      	muls	r1, r6
 8035804:	fb00 1102 	mla	r1, r0, r2, r1
 8035808:	fba6 0200 	umull	r0, r2, r6, r0
 803580c:	440a      	add	r2, r1
 803580e:	1818      	adds	r0, r3, r0
 8035810:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 8035814:	2201      	movs	r2, #1
 8035816:	f815 4b01 	ldrb.w	r4, [r5], #1
 803581a:	e7d8      	b.n	80357ce <_strtoll_l.isra.0+0x82>
 803581c:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 8035820:	2b19      	cmp	r3, #25
 8035822:	d805      	bhi.n	8035830 <_strtoll_l.isra.0+0xe4>
 8035824:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 8035828:	e7db      	b.n	80357e2 <_strtoll_l.isra.0+0x96>
 803582a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 803582e:	e7f2      	b.n	8035816 <_strtoll_l.isra.0+0xca>
 8035830:	1c53      	adds	r3, r2, #1
 8035832:	d10a      	bne.n	803584a <_strtoll_l.isra.0+0xfe>
 8035834:	9a02      	ldr	r2, [sp, #8]
 8035836:	2322      	movs	r3, #34	@ 0x22
 8035838:	6013      	str	r3, [r2, #0]
 803583a:	4658      	mov	r0, fp
 803583c:	4651      	mov	r1, sl
 803583e:	f1b8 0f00 	cmp.w	r8, #0
 8035842:	d10a      	bne.n	803585a <_strtoll_l.isra.0+0x10e>
 8035844:	b005      	add	sp, #20
 8035846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803584a:	b117      	cbz	r7, 8035852 <_strtoll_l.isra.0+0x106>
 803584c:	4240      	negs	r0, r0
 803584e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8035852:	f1b8 0f00 	cmp.w	r8, #0
 8035856:	d0f5      	beq.n	8035844 <_strtoll_l.isra.0+0xf8>
 8035858:	b10a      	cbz	r2, 803585e <_strtoll_l.isra.0+0x112>
 803585a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 803585e:	f8c8 9000 	str.w	r9, [r8]
 8035862:	e7ef      	b.n	8035844 <_strtoll_l.isra.0+0xf8>
 8035864:	0803dff5 	.word	0x0803dff5

08035868 <_strtoll_r>:
 8035868:	f7ff bf70 	b.w	803574c <_strtoll_l.isra.0>

0803586c <_sbrk_r>:
 803586c:	b538      	push	{r3, r4, r5, lr}
 803586e:	4d06      	ldr	r5, [pc, #24]	@ (8035888 <_sbrk_r+0x1c>)
 8035870:	2300      	movs	r3, #0
 8035872:	4604      	mov	r4, r0
 8035874:	4608      	mov	r0, r1
 8035876:	602b      	str	r3, [r5, #0]
 8035878:	f7dd f91c 	bl	8012ab4 <_sbrk>
 803587c:	1c43      	adds	r3, r0, #1
 803587e:	d102      	bne.n	8035886 <_sbrk_r+0x1a>
 8035880:	682b      	ldr	r3, [r5, #0]
 8035882:	b103      	cbz	r3, 8035886 <_sbrk_r+0x1a>
 8035884:	6023      	str	r3, [r4, #0]
 8035886:	bd38      	pop	{r3, r4, r5, pc}
 8035888:	2001a28c 	.word	0x2001a28c

0803588c <_strtoull_l.isra.0>:
 803588c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035890:	4691      	mov	r9, r2
 8035892:	4a48      	ldr	r2, [pc, #288]	@ (80359b4 <_strtoull_l.isra.0+0x128>)
 8035894:	9001      	str	r0, [sp, #4]
 8035896:	468a      	mov	sl, r1
 8035898:	461e      	mov	r6, r3
 803589a:	460d      	mov	r5, r1
 803589c:	462b      	mov	r3, r5
 803589e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80358a2:	5d17      	ldrb	r7, [r2, r4]
 80358a4:	f017 0708 	ands.w	r7, r7, #8
 80358a8:	d1f8      	bne.n	803589c <_strtoull_l.isra.0+0x10>
 80358aa:	2c2d      	cmp	r4, #45	@ 0x2d
 80358ac:	d110      	bne.n	80358d0 <_strtoull_l.isra.0+0x44>
 80358ae:	782c      	ldrb	r4, [r5, #0]
 80358b0:	2701      	movs	r7, #1
 80358b2:	1c9d      	adds	r5, r3, #2
 80358b4:	f036 0310 	bics.w	r3, r6, #16
 80358b8:	d115      	bne.n	80358e6 <_strtoull_l.isra.0+0x5a>
 80358ba:	2c30      	cmp	r4, #48	@ 0x30
 80358bc:	d10d      	bne.n	80358da <_strtoull_l.isra.0+0x4e>
 80358be:	782b      	ldrb	r3, [r5, #0]
 80358c0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80358c4:	2b58      	cmp	r3, #88	@ 0x58
 80358c6:	d108      	bne.n	80358da <_strtoull_l.isra.0+0x4e>
 80358c8:	786c      	ldrb	r4, [r5, #1]
 80358ca:	3502      	adds	r5, #2
 80358cc:	2610      	movs	r6, #16
 80358ce:	e00a      	b.n	80358e6 <_strtoull_l.isra.0+0x5a>
 80358d0:	2c2b      	cmp	r4, #43	@ 0x2b
 80358d2:	bf04      	itt	eq
 80358d4:	782c      	ldrbeq	r4, [r5, #0]
 80358d6:	1c9d      	addeq	r5, r3, #2
 80358d8:	e7ec      	b.n	80358b4 <_strtoull_l.isra.0+0x28>
 80358da:	2e00      	cmp	r6, #0
 80358dc:	d1f6      	bne.n	80358cc <_strtoull_l.isra.0+0x40>
 80358de:	2c30      	cmp	r4, #48	@ 0x30
 80358e0:	bf14      	ite	ne
 80358e2:	260a      	movne	r6, #10
 80358e4:	2608      	moveq	r6, #8
 80358e6:	ea4f 7be6 	mov.w	fp, r6, asr #31
 80358ea:	4632      	mov	r2, r6
 80358ec:	465b      	mov	r3, fp
 80358ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80358f2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80358f6:	f7db fa2f 	bl	8010d58 <__aeabi_uldivmod>
 80358fa:	4632      	mov	r2, r6
 80358fc:	9000      	str	r0, [sp, #0]
 80358fe:	4688      	mov	r8, r1
 8035900:	465b      	mov	r3, fp
 8035902:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035906:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 803590a:	f7db fa25 	bl	8010d58 <__aeabi_uldivmod>
 803590e:	2300      	movs	r3, #0
 8035910:	4618      	mov	r0, r3
 8035912:	4619      	mov	r1, r3
 8035914:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8035918:	f1bc 0f09 	cmp.w	ip, #9
 803591c:	d81e      	bhi.n	803595c <_strtoull_l.isra.0+0xd0>
 803591e:	4664      	mov	r4, ip
 8035920:	42a6      	cmp	r6, r4
 8035922:	dd2c      	ble.n	803597e <_strtoull_l.isra.0+0xf2>
 8035924:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8035928:	d015      	beq.n	8035956 <_strtoull_l.isra.0+0xca>
 803592a:	9b00      	ldr	r3, [sp, #0]
 803592c:	4283      	cmp	r3, r0
 803592e:	eb78 0301 	sbcs.w	r3, r8, r1
 8035932:	d321      	bcc.n	8035978 <_strtoull_l.isra.0+0xec>
 8035934:	9b00      	ldr	r3, [sp, #0]
 8035936:	4588      	cmp	r8, r1
 8035938:	bf08      	it	eq
 803593a:	4283      	cmpeq	r3, r0
 803593c:	d101      	bne.n	8035942 <_strtoull_l.isra.0+0xb6>
 803593e:	42a2      	cmp	r2, r4
 8035940:	db1a      	blt.n	8035978 <_strtoull_l.isra.0+0xec>
 8035942:	4371      	muls	r1, r6
 8035944:	fb00 110b 	mla	r1, r0, fp, r1
 8035948:	fba6 0300 	umull	r0, r3, r6, r0
 803594c:	4419      	add	r1, r3
 803594e:	1820      	adds	r0, r4, r0
 8035950:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8035954:	2301      	movs	r3, #1
 8035956:	f815 4b01 	ldrb.w	r4, [r5], #1
 803595a:	e7db      	b.n	8035914 <_strtoull_l.isra.0+0x88>
 803595c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8035960:	f1bc 0f19 	cmp.w	ip, #25
 8035964:	d801      	bhi.n	803596a <_strtoull_l.isra.0+0xde>
 8035966:	3c37      	subs	r4, #55	@ 0x37
 8035968:	e7da      	b.n	8035920 <_strtoull_l.isra.0+0x94>
 803596a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 803596e:	f1bc 0f19 	cmp.w	ip, #25
 8035972:	d804      	bhi.n	803597e <_strtoull_l.isra.0+0xf2>
 8035974:	3c57      	subs	r4, #87	@ 0x57
 8035976:	e7d3      	b.n	8035920 <_strtoull_l.isra.0+0x94>
 8035978:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803597c:	e7eb      	b.n	8035956 <_strtoull_l.isra.0+0xca>
 803597e:	1c5a      	adds	r2, r3, #1
 8035980:	d10a      	bne.n	8035998 <_strtoull_l.isra.0+0x10c>
 8035982:	9901      	ldr	r1, [sp, #4]
 8035984:	2222      	movs	r2, #34	@ 0x22
 8035986:	600a      	str	r2, [r1, #0]
 8035988:	4618      	mov	r0, r3
 803598a:	4619      	mov	r1, r3
 803598c:	f1b9 0f00 	cmp.w	r9, #0
 8035990:	d10a      	bne.n	80359a8 <_strtoull_l.isra.0+0x11c>
 8035992:	b003      	add	sp, #12
 8035994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035998:	b117      	cbz	r7, 80359a0 <_strtoull_l.isra.0+0x114>
 803599a:	4240      	negs	r0, r0
 803599c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80359a0:	f1b9 0f00 	cmp.w	r9, #0
 80359a4:	d0f5      	beq.n	8035992 <_strtoull_l.isra.0+0x106>
 80359a6:	b10b      	cbz	r3, 80359ac <_strtoull_l.isra.0+0x120>
 80359a8:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 80359ac:	f8c9 a000 	str.w	sl, [r9]
 80359b0:	e7ef      	b.n	8035992 <_strtoull_l.isra.0+0x106>
 80359b2:	bf00      	nop
 80359b4:	0803dff5 	.word	0x0803dff5

080359b8 <_strtoull_r>:
 80359b8:	f7ff bf68 	b.w	803588c <_strtoull_l.isra.0>

080359bc <sysconf>:
 80359bc:	2808      	cmp	r0, #8
 80359be:	b508      	push	{r3, lr}
 80359c0:	d006      	beq.n	80359d0 <sysconf+0x14>
 80359c2:	f7f8 fc61 	bl	802e288 <__errno>
 80359c6:	2316      	movs	r3, #22
 80359c8:	6003      	str	r3, [r0, #0]
 80359ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80359ce:	bd08      	pop	{r3, pc}
 80359d0:	2080      	movs	r0, #128	@ 0x80
 80359d2:	e7fc      	b.n	80359ce <sysconf+0x12>

080359d4 <__libc_fini_array>:
 80359d4:	b538      	push	{r3, r4, r5, lr}
 80359d6:	4d07      	ldr	r5, [pc, #28]	@ (80359f4 <__libc_fini_array+0x20>)
 80359d8:	4c07      	ldr	r4, [pc, #28]	@ (80359f8 <__libc_fini_array+0x24>)
 80359da:	1b64      	subs	r4, r4, r5
 80359dc:	10a4      	asrs	r4, r4, #2
 80359de:	b91c      	cbnz	r4, 80359e8 <__libc_fini_array+0x14>
 80359e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80359e4:	f001 bf4e 	b.w	8037884 <_fini>
 80359e8:	3c01      	subs	r4, #1
 80359ea:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80359ee:	4798      	blx	r3
 80359f0:	e7f5      	b.n	80359de <__libc_fini_array+0xa>
 80359f2:	bf00      	nop
 80359f4:	0803e300 	.word	0x0803e300
 80359f8:	0803e304 	.word	0x0803e304

080359fc <_mbrtowc_r>:
 80359fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80359fe:	4c0a      	ldr	r4, [pc, #40]	@ (8035a28 <_mbrtowc_r+0x2c>)
 8035a00:	9e08      	ldr	r6, [sp, #32]
 8035a02:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 8035a06:	9600      	str	r6, [sp, #0]
 8035a08:	4605      	mov	r5, r0
 8035a0a:	4614      	mov	r4, r2
 8035a0c:	b912      	cbnz	r2, 8035a14 <_mbrtowc_r+0x18>
 8035a0e:	4a07      	ldr	r2, [pc, #28]	@ (8035a2c <_mbrtowc_r+0x30>)
 8035a10:	2301      	movs	r3, #1
 8035a12:	4621      	mov	r1, r4
 8035a14:	47b8      	blx	r7
 8035a16:	1c43      	adds	r3, r0, #1
 8035a18:	bf01      	itttt	eq
 8035a1a:	2300      	moveq	r3, #0
 8035a1c:	6033      	streq	r3, [r6, #0]
 8035a1e:	238a      	moveq	r3, #138	@ 0x8a
 8035a20:	602b      	streq	r3, [r5, #0]
 8035a22:	b003      	add	sp, #12
 8035a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8035a26:	bf00      	nop
 8035a28:	20000730 	.word	0x20000730
 8035a2c:	0803dac3 	.word	0x0803dac3

08035a30 <iswspace>:
 8035a30:	2100      	movs	r1, #0
 8035a32:	f000 b801 	b.w	8035a38 <iswspace_l>
	...

08035a38 <iswspace_l>:
 8035a38:	28ff      	cmp	r0, #255	@ 0xff
 8035a3a:	bf9d      	ittte	ls
 8035a3c:	4b02      	ldrls	r3, [pc, #8]	@ (8035a48 <iswspace_l+0x10>)
 8035a3e:	5c18      	ldrbls	r0, [r3, r0]
 8035a40:	f000 0008 	andls.w	r0, r0, #8
 8035a44:	2000      	movhi	r0, #0
 8035a46:	4770      	bx	lr
 8035a48:	0803dff5 	.word	0x0803dff5

08035a4c <__register_exitproc>:
 8035a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8035a50:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8035ac8 <__register_exitproc+0x7c>
 8035a54:	4606      	mov	r6, r0
 8035a56:	f8da 0000 	ldr.w	r0, [sl]
 8035a5a:	4698      	mov	r8, r3
 8035a5c:	460f      	mov	r7, r1
 8035a5e:	4691      	mov	r9, r2
 8035a60:	f7f8 fc47 	bl	802e2f2 <__retarget_lock_acquire_recursive>
 8035a64:	4b16      	ldr	r3, [pc, #88]	@ (8035ac0 <__register_exitproc+0x74>)
 8035a66:	681c      	ldr	r4, [r3, #0]
 8035a68:	b90c      	cbnz	r4, 8035a6e <__register_exitproc+0x22>
 8035a6a:	4c16      	ldr	r4, [pc, #88]	@ (8035ac4 <__register_exitproc+0x78>)
 8035a6c:	601c      	str	r4, [r3, #0]
 8035a6e:	6865      	ldr	r5, [r4, #4]
 8035a70:	f8da 0000 	ldr.w	r0, [sl]
 8035a74:	2d1f      	cmp	r5, #31
 8035a76:	dd05      	ble.n	8035a84 <__register_exitproc+0x38>
 8035a78:	f7f8 fc3d 	bl	802e2f6 <__retarget_lock_release_recursive>
 8035a7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8035a84:	b19e      	cbz	r6, 8035aae <__register_exitproc+0x62>
 8035a86:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8035a8a:	2201      	movs	r2, #1
 8035a8c:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8035a90:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8035a94:	40aa      	lsls	r2, r5
 8035a96:	4313      	orrs	r3, r2
 8035a98:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8035a9c:	2e02      	cmp	r6, #2
 8035a9e:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8035aa2:	bf02      	ittt	eq
 8035aa4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8035aa8:	4313      	orreq	r3, r2
 8035aaa:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8035aae:	1c6b      	adds	r3, r5, #1
 8035ab0:	3502      	adds	r5, #2
 8035ab2:	6063      	str	r3, [r4, #4]
 8035ab4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8035ab8:	f7f8 fc1d 	bl	802e2f6 <__retarget_lock_release_recursive>
 8035abc:	2000      	movs	r0, #0
 8035abe:	e7df      	b.n	8035a80 <__register_exitproc+0x34>
 8035ac0:	2001a298 	.word	0x2001a298
 8035ac4:	2001a2d0 	.word	0x2001a2d0
 8035ac8:	200002c0 	.word	0x200002c0
 8035acc:	00000000 	.word	0x00000000

08035ad0 <nan>:
 8035ad0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8035ad8 <nan+0x8>
 8035ad4:	4770      	bx	lr
 8035ad6:	bf00      	nop
 8035ad8:	00000000 	.word	0x00000000
 8035adc:	7ff80000 	.word	0x7ff80000

08035ae0 <nanf>:
 8035ae0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8035ae8 <nanf+0x8>
 8035ae4:	4770      	bx	lr
 8035ae6:	bf00      	nop
 8035ae8:	7fc00000 	.word	0x7fc00000

08035aec <frexp>:
 8035aec:	b570      	push	{r4, r5, r6, lr}
 8035aee:	2100      	movs	r1, #0
 8035af0:	ec55 4b10 	vmov	r4, r5, d0
 8035af4:	6001      	str	r1, [r0, #0]
 8035af6:	4914      	ldr	r1, [pc, #80]	@ (8035b48 <frexp+0x5c>)
 8035af8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8035afc:	428b      	cmp	r3, r1
 8035afe:	4606      	mov	r6, r0
 8035b00:	462a      	mov	r2, r5
 8035b02:	d81e      	bhi.n	8035b42 <frexp+0x56>
 8035b04:	4621      	mov	r1, r4
 8035b06:	4319      	orrs	r1, r3
 8035b08:	d01b      	beq.n	8035b42 <frexp+0x56>
 8035b0a:	4910      	ldr	r1, [pc, #64]	@ (8035b4c <frexp+0x60>)
 8035b0c:	4029      	ands	r1, r5
 8035b0e:	b961      	cbnz	r1, 8035b2a <frexp+0x3e>
 8035b10:	4b0f      	ldr	r3, [pc, #60]	@ (8035b50 <frexp+0x64>)
 8035b12:	2200      	movs	r2, #0
 8035b14:	4620      	mov	r0, r4
 8035b16:	4629      	mov	r1, r5
 8035b18:	f7da fd86 	bl	8010628 <__aeabi_dmul>
 8035b1c:	460a      	mov	r2, r1
 8035b1e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8035b22:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8035b26:	4604      	mov	r4, r0
 8035b28:	6031      	str	r1, [r6, #0]
 8035b2a:	6831      	ldr	r1, [r6, #0]
 8035b2c:	151b      	asrs	r3, r3, #20
 8035b2e:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8035b32:	f36f 521e 	bfc	r2, #20, #11
 8035b36:	4419      	add	r1, r3
 8035b38:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8035b3c:	6031      	str	r1, [r6, #0]
 8035b3e:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 8035b42:	ec45 4b10 	vmov	d0, r4, r5
 8035b46:	bd70      	pop	{r4, r5, r6, pc}
 8035b48:	7fefffff 	.word	0x7fefffff
 8035b4c:	7ff00000 	.word	0x7ff00000
 8035b50:	43500000 	.word	0x43500000

08035b54 <quorem>:
 8035b54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035b58:	6903      	ldr	r3, [r0, #16]
 8035b5a:	690c      	ldr	r4, [r1, #16]
 8035b5c:	42a3      	cmp	r3, r4
 8035b5e:	4607      	mov	r7, r0
 8035b60:	db7e      	blt.n	8035c60 <quorem+0x10c>
 8035b62:	3c01      	subs	r4, #1
 8035b64:	f101 0814 	add.w	r8, r1, #20
 8035b68:	00a3      	lsls	r3, r4, #2
 8035b6a:	f100 0514 	add.w	r5, r0, #20
 8035b6e:	9300      	str	r3, [sp, #0]
 8035b70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8035b74:	9301      	str	r3, [sp, #4]
 8035b76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8035b7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8035b7e:	3301      	adds	r3, #1
 8035b80:	429a      	cmp	r2, r3
 8035b82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8035b86:	fbb2 f6f3 	udiv	r6, r2, r3
 8035b8a:	d32e      	bcc.n	8035bea <quorem+0x96>
 8035b8c:	f04f 0a00 	mov.w	sl, #0
 8035b90:	46c4      	mov	ip, r8
 8035b92:	46ae      	mov	lr, r5
 8035b94:	46d3      	mov	fp, sl
 8035b96:	f85c 3b04 	ldr.w	r3, [ip], #4
 8035b9a:	b298      	uxth	r0, r3
 8035b9c:	fb06 a000 	mla	r0, r6, r0, sl
 8035ba0:	0c02      	lsrs	r2, r0, #16
 8035ba2:	0c1b      	lsrs	r3, r3, #16
 8035ba4:	fb06 2303 	mla	r3, r6, r3, r2
 8035ba8:	f8de 2000 	ldr.w	r2, [lr]
 8035bac:	b280      	uxth	r0, r0
 8035bae:	b292      	uxth	r2, r2
 8035bb0:	1a12      	subs	r2, r2, r0
 8035bb2:	445a      	add	r2, fp
 8035bb4:	f8de 0000 	ldr.w	r0, [lr]
 8035bb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8035bbc:	b29b      	uxth	r3, r3
 8035bbe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8035bc2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8035bc6:	b292      	uxth	r2, r2
 8035bc8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8035bcc:	45e1      	cmp	r9, ip
 8035bce:	f84e 2b04 	str.w	r2, [lr], #4
 8035bd2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8035bd6:	d2de      	bcs.n	8035b96 <quorem+0x42>
 8035bd8:	9b00      	ldr	r3, [sp, #0]
 8035bda:	58eb      	ldr	r3, [r5, r3]
 8035bdc:	b92b      	cbnz	r3, 8035bea <quorem+0x96>
 8035bde:	9b01      	ldr	r3, [sp, #4]
 8035be0:	3b04      	subs	r3, #4
 8035be2:	429d      	cmp	r5, r3
 8035be4:	461a      	mov	r2, r3
 8035be6:	d32f      	bcc.n	8035c48 <quorem+0xf4>
 8035be8:	613c      	str	r4, [r7, #16]
 8035bea:	4638      	mov	r0, r7
 8035bec:	f001 fbb8 	bl	8037360 <__mcmp>
 8035bf0:	2800      	cmp	r0, #0
 8035bf2:	db25      	blt.n	8035c40 <quorem+0xec>
 8035bf4:	4629      	mov	r1, r5
 8035bf6:	2000      	movs	r0, #0
 8035bf8:	f858 2b04 	ldr.w	r2, [r8], #4
 8035bfc:	f8d1 c000 	ldr.w	ip, [r1]
 8035c00:	fa1f fe82 	uxth.w	lr, r2
 8035c04:	fa1f f38c 	uxth.w	r3, ip
 8035c08:	eba3 030e 	sub.w	r3, r3, lr
 8035c0c:	4403      	add	r3, r0
 8035c0e:	0c12      	lsrs	r2, r2, #16
 8035c10:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8035c14:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8035c18:	b29b      	uxth	r3, r3
 8035c1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8035c1e:	45c1      	cmp	r9, r8
 8035c20:	f841 3b04 	str.w	r3, [r1], #4
 8035c24:	ea4f 4022 	mov.w	r0, r2, asr #16
 8035c28:	d2e6      	bcs.n	8035bf8 <quorem+0xa4>
 8035c2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8035c2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8035c32:	b922      	cbnz	r2, 8035c3e <quorem+0xea>
 8035c34:	3b04      	subs	r3, #4
 8035c36:	429d      	cmp	r5, r3
 8035c38:	461a      	mov	r2, r3
 8035c3a:	d30b      	bcc.n	8035c54 <quorem+0x100>
 8035c3c:	613c      	str	r4, [r7, #16]
 8035c3e:	3601      	adds	r6, #1
 8035c40:	4630      	mov	r0, r6
 8035c42:	b003      	add	sp, #12
 8035c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035c48:	6812      	ldr	r2, [r2, #0]
 8035c4a:	3b04      	subs	r3, #4
 8035c4c:	2a00      	cmp	r2, #0
 8035c4e:	d1cb      	bne.n	8035be8 <quorem+0x94>
 8035c50:	3c01      	subs	r4, #1
 8035c52:	e7c6      	b.n	8035be2 <quorem+0x8e>
 8035c54:	6812      	ldr	r2, [r2, #0]
 8035c56:	3b04      	subs	r3, #4
 8035c58:	2a00      	cmp	r2, #0
 8035c5a:	d1ef      	bne.n	8035c3c <quorem+0xe8>
 8035c5c:	3c01      	subs	r4, #1
 8035c5e:	e7ea      	b.n	8035c36 <quorem+0xe2>
 8035c60:	2000      	movs	r0, #0
 8035c62:	e7ee      	b.n	8035c42 <quorem+0xee>
 8035c64:	0000      	movs	r0, r0
	...

08035c68 <_dtoa_r>:
 8035c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035c6c:	b097      	sub	sp, #92	@ 0x5c
 8035c6e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8035c72:	9107      	str	r1, [sp, #28]
 8035c74:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8035c76:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8035c78:	920c      	str	r2, [sp, #48]	@ 0x30
 8035c7a:	ec55 4b10 	vmov	r4, r5, d0
 8035c7e:	4681      	mov	r9, r0
 8035c80:	9311      	str	r3, [sp, #68]	@ 0x44
 8035c82:	b149      	cbz	r1, 8035c98 <_dtoa_r+0x30>
 8035c84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8035c86:	604a      	str	r2, [r1, #4]
 8035c88:	2301      	movs	r3, #1
 8035c8a:	4093      	lsls	r3, r2
 8035c8c:	608b      	str	r3, [r1, #8]
 8035c8e:	f001 f91d 	bl	8036ecc <_Bfree>
 8035c92:	2300      	movs	r3, #0
 8035c94:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
 8035c98:	1e2b      	subs	r3, r5, #0
 8035c9a:	bfb9      	ittee	lt
 8035c9c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8035ca0:	9305      	strlt	r3, [sp, #20]
 8035ca2:	2300      	movge	r3, #0
 8035ca4:	6033      	strge	r3, [r6, #0]
 8035ca6:	9f05      	ldr	r7, [sp, #20]
 8035ca8:	4b99      	ldr	r3, [pc, #612]	@ (8035f10 <_dtoa_r+0x2a8>)
 8035caa:	bfbc      	itt	lt
 8035cac:	2201      	movlt	r2, #1
 8035cae:	6032      	strlt	r2, [r6, #0]
 8035cb0:	43bb      	bics	r3, r7
 8035cb2:	d114      	bne.n	8035cde <_dtoa_r+0x76>
 8035cb4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8035cb6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8035cba:	6013      	str	r3, [r2, #0]
 8035cbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8035cc0:	4323      	orrs	r3, r4
 8035cc2:	f000 8557 	beq.w	8036774 <_dtoa_r+0xb0c>
 8035cc6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8035cc8:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8035f28 <_dtoa_r+0x2c0>
 8035ccc:	b11b      	cbz	r3, 8035cd6 <_dtoa_r+0x6e>
 8035cce:	f10a 0303 	add.w	r3, sl, #3
 8035cd2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8035cd4:	6013      	str	r3, [r2, #0]
 8035cd6:	4650      	mov	r0, sl
 8035cd8:	b017      	add	sp, #92	@ 0x5c
 8035cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035cde:	ed9d 7b04 	vldr	d7, [sp, #16]
 8035ce2:	2200      	movs	r2, #0
 8035ce4:	ec51 0b17 	vmov	r0, r1, d7
 8035ce8:	2300      	movs	r3, #0
 8035cea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8035cee:	f7da ff03 	bl	8010af8 <__aeabi_dcmpeq>
 8035cf2:	4680      	mov	r8, r0
 8035cf4:	b150      	cbz	r0, 8035d0c <_dtoa_r+0xa4>
 8035cf6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8035cf8:	2301      	movs	r3, #1
 8035cfa:	6013      	str	r3, [r2, #0]
 8035cfc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8035cfe:	b113      	cbz	r3, 8035d06 <_dtoa_r+0x9e>
 8035d00:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8035d02:	4b84      	ldr	r3, [pc, #528]	@ (8035f14 <_dtoa_r+0x2ac>)
 8035d04:	6013      	str	r3, [r2, #0]
 8035d06:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8035f2c <_dtoa_r+0x2c4>
 8035d0a:	e7e4      	b.n	8035cd6 <_dtoa_r+0x6e>
 8035d0c:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8035d10:	aa14      	add	r2, sp, #80	@ 0x50
 8035d12:	a915      	add	r1, sp, #84	@ 0x54
 8035d14:	4648      	mov	r0, r9
 8035d16:	f001 fc43 	bl	80375a0 <__d2b>
 8035d1a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8035d1e:	9002      	str	r0, [sp, #8]
 8035d20:	2e00      	cmp	r6, #0
 8035d22:	d078      	beq.n	8035e16 <_dtoa_r+0x1ae>
 8035d24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8035d26:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8035d2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8035d2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8035d32:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8035d36:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8035d3a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8035d3e:	4619      	mov	r1, r3
 8035d40:	2200      	movs	r2, #0
 8035d42:	4b75      	ldr	r3, [pc, #468]	@ (8035f18 <_dtoa_r+0x2b0>)
 8035d44:	f7da fab8 	bl	80102b8 <__aeabi_dsub>
 8035d48:	a36b      	add	r3, pc, #428	@ (adr r3, 8035ef8 <_dtoa_r+0x290>)
 8035d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035d4e:	f7da fc6b 	bl	8010628 <__aeabi_dmul>
 8035d52:	a36b      	add	r3, pc, #428	@ (adr r3, 8035f00 <_dtoa_r+0x298>)
 8035d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035d58:	f7da fab0 	bl	80102bc <__adddf3>
 8035d5c:	4604      	mov	r4, r0
 8035d5e:	4630      	mov	r0, r6
 8035d60:	460d      	mov	r5, r1
 8035d62:	f7da fbf7 	bl	8010554 <__aeabi_i2d>
 8035d66:	a368      	add	r3, pc, #416	@ (adr r3, 8035f08 <_dtoa_r+0x2a0>)
 8035d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035d6c:	f7da fc5c 	bl	8010628 <__aeabi_dmul>
 8035d70:	4602      	mov	r2, r0
 8035d72:	460b      	mov	r3, r1
 8035d74:	4620      	mov	r0, r4
 8035d76:	4629      	mov	r1, r5
 8035d78:	f7da faa0 	bl	80102bc <__adddf3>
 8035d7c:	4604      	mov	r4, r0
 8035d7e:	460d      	mov	r5, r1
 8035d80:	f7da ff02 	bl	8010b88 <__aeabi_d2iz>
 8035d84:	2200      	movs	r2, #0
 8035d86:	4607      	mov	r7, r0
 8035d88:	2300      	movs	r3, #0
 8035d8a:	4620      	mov	r0, r4
 8035d8c:	4629      	mov	r1, r5
 8035d8e:	f7da febd 	bl	8010b0c <__aeabi_dcmplt>
 8035d92:	b140      	cbz	r0, 8035da6 <_dtoa_r+0x13e>
 8035d94:	4638      	mov	r0, r7
 8035d96:	f7da fbdd 	bl	8010554 <__aeabi_i2d>
 8035d9a:	4622      	mov	r2, r4
 8035d9c:	462b      	mov	r3, r5
 8035d9e:	f7da feab 	bl	8010af8 <__aeabi_dcmpeq>
 8035da2:	b900      	cbnz	r0, 8035da6 <_dtoa_r+0x13e>
 8035da4:	3f01      	subs	r7, #1
 8035da6:	2f16      	cmp	r7, #22
 8035da8:	d852      	bhi.n	8035e50 <_dtoa_r+0x1e8>
 8035daa:	4b5c      	ldr	r3, [pc, #368]	@ (8035f1c <_dtoa_r+0x2b4>)
 8035dac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8035db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035db4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8035db8:	f7da fea8 	bl	8010b0c <__aeabi_dcmplt>
 8035dbc:	2800      	cmp	r0, #0
 8035dbe:	d049      	beq.n	8035e54 <_dtoa_r+0x1ec>
 8035dc0:	3f01      	subs	r7, #1
 8035dc2:	2300      	movs	r3, #0
 8035dc4:	9310      	str	r3, [sp, #64]	@ 0x40
 8035dc6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8035dc8:	1b9b      	subs	r3, r3, r6
 8035dca:	1e5a      	subs	r2, r3, #1
 8035dcc:	bf45      	ittet	mi
 8035dce:	f1c3 0301 	rsbmi	r3, r3, #1
 8035dd2:	9300      	strmi	r3, [sp, #0]
 8035dd4:	2300      	movpl	r3, #0
 8035dd6:	2300      	movmi	r3, #0
 8035dd8:	9206      	str	r2, [sp, #24]
 8035dda:	bf54      	ite	pl
 8035ddc:	9300      	strpl	r3, [sp, #0]
 8035dde:	9306      	strmi	r3, [sp, #24]
 8035de0:	2f00      	cmp	r7, #0
 8035de2:	db39      	blt.n	8035e58 <_dtoa_r+0x1f0>
 8035de4:	9b06      	ldr	r3, [sp, #24]
 8035de6:	970d      	str	r7, [sp, #52]	@ 0x34
 8035de8:	443b      	add	r3, r7
 8035dea:	9306      	str	r3, [sp, #24]
 8035dec:	2300      	movs	r3, #0
 8035dee:	9308      	str	r3, [sp, #32]
 8035df0:	9b07      	ldr	r3, [sp, #28]
 8035df2:	2b09      	cmp	r3, #9
 8035df4:	d864      	bhi.n	8035ec0 <_dtoa_r+0x258>
 8035df6:	2b05      	cmp	r3, #5
 8035df8:	bfc4      	itt	gt
 8035dfa:	3b04      	subgt	r3, #4
 8035dfc:	9307      	strgt	r3, [sp, #28]
 8035dfe:	9b07      	ldr	r3, [sp, #28]
 8035e00:	f1a3 0302 	sub.w	r3, r3, #2
 8035e04:	bfcc      	ite	gt
 8035e06:	2400      	movgt	r4, #0
 8035e08:	2401      	movle	r4, #1
 8035e0a:	2b03      	cmp	r3, #3
 8035e0c:	d864      	bhi.n	8035ed8 <_dtoa_r+0x270>
 8035e0e:	e8df f003 	tbb	[pc, r3]
 8035e12:	5553      	.short	0x5553
 8035e14:	2b37      	.short	0x2b37
 8035e16:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8035e1a:	441e      	add	r6, r3
 8035e1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8035e20:	2b20      	cmp	r3, #32
 8035e22:	bfc1      	itttt	gt
 8035e24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8035e28:	409f      	lslgt	r7, r3
 8035e2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8035e2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8035e32:	bfd6      	itet	le
 8035e34:	f1c3 0320 	rsble	r3, r3, #32
 8035e38:	ea47 0003 	orrgt.w	r0, r7, r3
 8035e3c:	fa04 f003 	lslle.w	r0, r4, r3
 8035e40:	f7da fb78 	bl	8010534 <__aeabi_ui2d>
 8035e44:	2201      	movs	r2, #1
 8035e46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8035e4a:	3e01      	subs	r6, #1
 8035e4c:	9212      	str	r2, [sp, #72]	@ 0x48
 8035e4e:	e776      	b.n	8035d3e <_dtoa_r+0xd6>
 8035e50:	2301      	movs	r3, #1
 8035e52:	e7b7      	b.n	8035dc4 <_dtoa_r+0x15c>
 8035e54:	9010      	str	r0, [sp, #64]	@ 0x40
 8035e56:	e7b6      	b.n	8035dc6 <_dtoa_r+0x15e>
 8035e58:	9b00      	ldr	r3, [sp, #0]
 8035e5a:	1bdb      	subs	r3, r3, r7
 8035e5c:	9300      	str	r3, [sp, #0]
 8035e5e:	427b      	negs	r3, r7
 8035e60:	9308      	str	r3, [sp, #32]
 8035e62:	2300      	movs	r3, #0
 8035e64:	930d      	str	r3, [sp, #52]	@ 0x34
 8035e66:	e7c3      	b.n	8035df0 <_dtoa_r+0x188>
 8035e68:	2301      	movs	r3, #1
 8035e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8035e6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8035e6e:	eb07 0b03 	add.w	fp, r7, r3
 8035e72:	f10b 0301 	add.w	r3, fp, #1
 8035e76:	2b01      	cmp	r3, #1
 8035e78:	9303      	str	r3, [sp, #12]
 8035e7a:	bfb8      	it	lt
 8035e7c:	2301      	movlt	r3, #1
 8035e7e:	e006      	b.n	8035e8e <_dtoa_r+0x226>
 8035e80:	2301      	movs	r3, #1
 8035e82:	9309      	str	r3, [sp, #36]	@ 0x24
 8035e84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8035e86:	2b00      	cmp	r3, #0
 8035e88:	dd29      	ble.n	8035ede <_dtoa_r+0x276>
 8035e8a:	469b      	mov	fp, r3
 8035e8c:	9303      	str	r3, [sp, #12]
 8035e8e:	2100      	movs	r1, #0
 8035e90:	2204      	movs	r2, #4
 8035e92:	f102 0014 	add.w	r0, r2, #20
 8035e96:	4298      	cmp	r0, r3
 8035e98:	d929      	bls.n	8035eee <_dtoa_r+0x286>
 8035e9a:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
 8035e9e:	4648      	mov	r0, r9
 8035ea0:	f000 ffef 	bl	8036e82 <_Balloc>
 8035ea4:	4682      	mov	sl, r0
 8035ea6:	2800      	cmp	r0, #0
 8035ea8:	d142      	bne.n	8035f30 <_dtoa_r+0x2c8>
 8035eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8035f20 <_dtoa_r+0x2b8>)
 8035eac:	4602      	mov	r2, r0
 8035eae:	f240 11af 	movw	r1, #431	@ 0x1af
 8035eb2:	481c      	ldr	r0, [pc, #112]	@ (8035f24 <_dtoa_r+0x2bc>)
 8035eb4:	f7f5 fbaa 	bl	802b60c <__assert_func>
 8035eb8:	2300      	movs	r3, #0
 8035eba:	e7e2      	b.n	8035e82 <_dtoa_r+0x21a>
 8035ebc:	2300      	movs	r3, #0
 8035ebe:	e7d4      	b.n	8035e6a <_dtoa_r+0x202>
 8035ec0:	2401      	movs	r4, #1
 8035ec2:	2300      	movs	r3, #0
 8035ec4:	9307      	str	r3, [sp, #28]
 8035ec6:	9409      	str	r4, [sp, #36]	@ 0x24
 8035ec8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8035ecc:	2200      	movs	r2, #0
 8035ece:	f8cd b00c 	str.w	fp, [sp, #12]
 8035ed2:	2312      	movs	r3, #18
 8035ed4:	920c      	str	r2, [sp, #48]	@ 0x30
 8035ed6:	e7da      	b.n	8035e8e <_dtoa_r+0x226>
 8035ed8:	2301      	movs	r3, #1
 8035eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8035edc:	e7f4      	b.n	8035ec8 <_dtoa_r+0x260>
 8035ede:	f04f 0b01 	mov.w	fp, #1
 8035ee2:	f8cd b00c 	str.w	fp, [sp, #12]
 8035ee6:	465b      	mov	r3, fp
 8035ee8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8035eec:	e7cf      	b.n	8035e8e <_dtoa_r+0x226>
 8035eee:	3101      	adds	r1, #1
 8035ef0:	0052      	lsls	r2, r2, #1
 8035ef2:	e7ce      	b.n	8035e92 <_dtoa_r+0x22a>
 8035ef4:	f3af 8000 	nop.w
 8035ef8:	636f4361 	.word	0x636f4361
 8035efc:	3fd287a7 	.word	0x3fd287a7
 8035f00:	8b60c8b3 	.word	0x8b60c8b3
 8035f04:	3fc68a28 	.word	0x3fc68a28
 8035f08:	509f79fb 	.word	0x509f79fb
 8035f0c:	3fd34413 	.word	0x3fd34413
 8035f10:	7ff00000 	.word	0x7ff00000
 8035f14:	0803dcd8 	.word	0x0803dcd8
 8035f18:	3ff80000 	.word	0x3ff80000
 8035f1c:	0803e228 	.word	0x0803e228
 8035f20:	0803dcf5 	.word	0x0803dcf5
 8035f24:	0803dd06 	.word	0x0803dd06
 8035f28:	0803dcf1 	.word	0x0803dcf1
 8035f2c:	0803dcd7 	.word	0x0803dcd7
 8035f30:	9b03      	ldr	r3, [sp, #12]
 8035f32:	f8c9 0038 	str.w	r0, [r9, #56]	@ 0x38
 8035f36:	2b0e      	cmp	r3, #14
 8035f38:	f200 80a1 	bhi.w	803607e <_dtoa_r+0x416>
 8035f3c:	2c00      	cmp	r4, #0
 8035f3e:	f000 809e 	beq.w	803607e <_dtoa_r+0x416>
 8035f42:	2f00      	cmp	r7, #0
 8035f44:	dd33      	ble.n	8035fae <_dtoa_r+0x346>
 8035f46:	4b9c      	ldr	r3, [pc, #624]	@ (80361b8 <_dtoa_r+0x550>)
 8035f48:	f007 020f 	and.w	r2, r7, #15
 8035f4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8035f50:	ed93 7b00 	vldr	d7, [r3]
 8035f54:	05f8      	lsls	r0, r7, #23
 8035f56:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8035f5a:	ea4f 1427 	mov.w	r4, r7, asr #4
 8035f5e:	d516      	bpl.n	8035f8e <_dtoa_r+0x326>
 8035f60:	4b96      	ldr	r3, [pc, #600]	@ (80361bc <_dtoa_r+0x554>)
 8035f62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8035f66:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8035f6a:	f7da fc87 	bl	801087c <__aeabi_ddiv>
 8035f6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8035f72:	f004 040f 	and.w	r4, r4, #15
 8035f76:	2603      	movs	r6, #3
 8035f78:	4d90      	ldr	r5, [pc, #576]	@ (80361bc <_dtoa_r+0x554>)
 8035f7a:	b954      	cbnz	r4, 8035f92 <_dtoa_r+0x32a>
 8035f7c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8035f80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8035f84:	f7da fc7a 	bl	801087c <__aeabi_ddiv>
 8035f88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8035f8c:	e028      	b.n	8035fe0 <_dtoa_r+0x378>
 8035f8e:	2602      	movs	r6, #2
 8035f90:	e7f2      	b.n	8035f78 <_dtoa_r+0x310>
 8035f92:	07e1      	lsls	r1, r4, #31
 8035f94:	d508      	bpl.n	8035fa8 <_dtoa_r+0x340>
 8035f96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8035f9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8035f9e:	f7da fb43 	bl	8010628 <__aeabi_dmul>
 8035fa2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8035fa6:	3601      	adds	r6, #1
 8035fa8:	1064      	asrs	r4, r4, #1
 8035faa:	3508      	adds	r5, #8
 8035fac:	e7e5      	b.n	8035f7a <_dtoa_r+0x312>
 8035fae:	f000 80af 	beq.w	8036110 <_dtoa_r+0x4a8>
 8035fb2:	427c      	negs	r4, r7
 8035fb4:	4b80      	ldr	r3, [pc, #512]	@ (80361b8 <_dtoa_r+0x550>)
 8035fb6:	4d81      	ldr	r5, [pc, #516]	@ (80361bc <_dtoa_r+0x554>)
 8035fb8:	f004 020f 	and.w	r2, r4, #15
 8035fbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8035fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035fc4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8035fc8:	f7da fb2e 	bl	8010628 <__aeabi_dmul>
 8035fcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8035fd0:	1124      	asrs	r4, r4, #4
 8035fd2:	2300      	movs	r3, #0
 8035fd4:	2602      	movs	r6, #2
 8035fd6:	2c00      	cmp	r4, #0
 8035fd8:	f040 808f 	bne.w	80360fa <_dtoa_r+0x492>
 8035fdc:	2b00      	cmp	r3, #0
 8035fde:	d1d3      	bne.n	8035f88 <_dtoa_r+0x320>
 8035fe0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8035fe2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8035fe6:	2b00      	cmp	r3, #0
 8035fe8:	f000 8094 	beq.w	8036114 <_dtoa_r+0x4ac>
 8035fec:	4b74      	ldr	r3, [pc, #464]	@ (80361c0 <_dtoa_r+0x558>)
 8035fee:	2200      	movs	r2, #0
 8035ff0:	4620      	mov	r0, r4
 8035ff2:	4629      	mov	r1, r5
 8035ff4:	f7da fd8a 	bl	8010b0c <__aeabi_dcmplt>
 8035ff8:	2800      	cmp	r0, #0
 8035ffa:	f000 808b 	beq.w	8036114 <_dtoa_r+0x4ac>
 8035ffe:	9b03      	ldr	r3, [sp, #12]
 8036000:	2b00      	cmp	r3, #0
 8036002:	f000 8087 	beq.w	8036114 <_dtoa_r+0x4ac>
 8036006:	f1bb 0f00 	cmp.w	fp, #0
 803600a:	dd34      	ble.n	8036076 <_dtoa_r+0x40e>
 803600c:	4620      	mov	r0, r4
 803600e:	4b6d      	ldr	r3, [pc, #436]	@ (80361c4 <_dtoa_r+0x55c>)
 8036010:	2200      	movs	r2, #0
 8036012:	4629      	mov	r1, r5
 8036014:	f7da fb08 	bl	8010628 <__aeabi_dmul>
 8036018:	e9cd 0104 	strd	r0, r1, [sp, #16]
 803601c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8036020:	3601      	adds	r6, #1
 8036022:	465c      	mov	r4, fp
 8036024:	4630      	mov	r0, r6
 8036026:	f7da fa95 	bl	8010554 <__aeabi_i2d>
 803602a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 803602e:	f7da fafb 	bl	8010628 <__aeabi_dmul>
 8036032:	4b65      	ldr	r3, [pc, #404]	@ (80361c8 <_dtoa_r+0x560>)
 8036034:	2200      	movs	r2, #0
 8036036:	f7da f941 	bl	80102bc <__adddf3>
 803603a:	4605      	mov	r5, r0
 803603c:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8036040:	2c00      	cmp	r4, #0
 8036042:	d16a      	bne.n	803611a <_dtoa_r+0x4b2>
 8036044:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8036048:	4b60      	ldr	r3, [pc, #384]	@ (80361cc <_dtoa_r+0x564>)
 803604a:	2200      	movs	r2, #0
 803604c:	f7da f934 	bl	80102b8 <__aeabi_dsub>
 8036050:	4602      	mov	r2, r0
 8036052:	460b      	mov	r3, r1
 8036054:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8036058:	462a      	mov	r2, r5
 803605a:	4633      	mov	r3, r6
 803605c:	f7da fd74 	bl	8010b48 <__aeabi_dcmpgt>
 8036060:	2800      	cmp	r0, #0
 8036062:	f040 8297 	bne.w	8036594 <_dtoa_r+0x92c>
 8036066:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803606a:	462a      	mov	r2, r5
 803606c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8036070:	f7da fd4c 	bl	8010b0c <__aeabi_dcmplt>
 8036074:	bb38      	cbnz	r0, 80360c6 <_dtoa_r+0x45e>
 8036076:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 803607a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 803607e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8036080:	2b00      	cmp	r3, #0
 8036082:	f2c0 8156 	blt.w	8036332 <_dtoa_r+0x6ca>
 8036086:	2f0e      	cmp	r7, #14
 8036088:	f300 8153 	bgt.w	8036332 <_dtoa_r+0x6ca>
 803608c:	4b4a      	ldr	r3, [pc, #296]	@ (80361b8 <_dtoa_r+0x550>)
 803608e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8036092:	ed93 7b00 	vldr	d7, [r3]
 8036096:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8036098:	2b00      	cmp	r3, #0
 803609a:	ed8d 7b00 	vstr	d7, [sp]
 803609e:	f280 80e4 	bge.w	803626a <_dtoa_r+0x602>
 80360a2:	9b03      	ldr	r3, [sp, #12]
 80360a4:	2b00      	cmp	r3, #0
 80360a6:	f300 80e0 	bgt.w	803626a <_dtoa_r+0x602>
 80360aa:	d10c      	bne.n	80360c6 <_dtoa_r+0x45e>
 80360ac:	4b47      	ldr	r3, [pc, #284]	@ (80361cc <_dtoa_r+0x564>)
 80360ae:	2200      	movs	r2, #0
 80360b0:	ec51 0b17 	vmov	r0, r1, d7
 80360b4:	f7da fab8 	bl	8010628 <__aeabi_dmul>
 80360b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80360bc:	f7da fd3a 	bl	8010b34 <__aeabi_dcmpge>
 80360c0:	2800      	cmp	r0, #0
 80360c2:	f000 8265 	beq.w	8036590 <_dtoa_r+0x928>
 80360c6:	2400      	movs	r4, #0
 80360c8:	4625      	mov	r5, r4
 80360ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80360cc:	4656      	mov	r6, sl
 80360ce:	ea6f 0803 	mvn.w	r8, r3
 80360d2:	2700      	movs	r7, #0
 80360d4:	4621      	mov	r1, r4
 80360d6:	4648      	mov	r0, r9
 80360d8:	f000 fef8 	bl	8036ecc <_Bfree>
 80360dc:	2d00      	cmp	r5, #0
 80360de:	f000 80bc 	beq.w	803625a <_dtoa_r+0x5f2>
 80360e2:	b12f      	cbz	r7, 80360f0 <_dtoa_r+0x488>
 80360e4:	42af      	cmp	r7, r5
 80360e6:	d003      	beq.n	80360f0 <_dtoa_r+0x488>
 80360e8:	4639      	mov	r1, r7
 80360ea:	4648      	mov	r0, r9
 80360ec:	f000 feee 	bl	8036ecc <_Bfree>
 80360f0:	4629      	mov	r1, r5
 80360f2:	4648      	mov	r0, r9
 80360f4:	f000 feea 	bl	8036ecc <_Bfree>
 80360f8:	e0af      	b.n	803625a <_dtoa_r+0x5f2>
 80360fa:	07e2      	lsls	r2, r4, #31
 80360fc:	d505      	bpl.n	803610a <_dtoa_r+0x4a2>
 80360fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8036102:	f7da fa91 	bl	8010628 <__aeabi_dmul>
 8036106:	3601      	adds	r6, #1
 8036108:	2301      	movs	r3, #1
 803610a:	1064      	asrs	r4, r4, #1
 803610c:	3508      	adds	r5, #8
 803610e:	e762      	b.n	8035fd6 <_dtoa_r+0x36e>
 8036110:	2602      	movs	r6, #2
 8036112:	e765      	b.n	8035fe0 <_dtoa_r+0x378>
 8036114:	9c03      	ldr	r4, [sp, #12]
 8036116:	46b8      	mov	r8, r7
 8036118:	e784      	b.n	8036024 <_dtoa_r+0x3bc>
 803611a:	4b27      	ldr	r3, [pc, #156]	@ (80361b8 <_dtoa_r+0x550>)
 803611c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 803611e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8036122:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8036126:	4454      	add	r4, sl
 8036128:	2900      	cmp	r1, #0
 803612a:	d053      	beq.n	80361d4 <_dtoa_r+0x56c>
 803612c:	4928      	ldr	r1, [pc, #160]	@ (80361d0 <_dtoa_r+0x568>)
 803612e:	2000      	movs	r0, #0
 8036130:	f7da fba4 	bl	801087c <__aeabi_ddiv>
 8036134:	4633      	mov	r3, r6
 8036136:	462a      	mov	r2, r5
 8036138:	f7da f8be 	bl	80102b8 <__aeabi_dsub>
 803613c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8036140:	4656      	mov	r6, sl
 8036142:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8036146:	f7da fd1f 	bl	8010b88 <__aeabi_d2iz>
 803614a:	4605      	mov	r5, r0
 803614c:	f7da fa02 	bl	8010554 <__aeabi_i2d>
 8036150:	4602      	mov	r2, r0
 8036152:	460b      	mov	r3, r1
 8036154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8036158:	f7da f8ae 	bl	80102b8 <__aeabi_dsub>
 803615c:	3530      	adds	r5, #48	@ 0x30
 803615e:	4602      	mov	r2, r0
 8036160:	460b      	mov	r3, r1
 8036162:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8036166:	f806 5b01 	strb.w	r5, [r6], #1
 803616a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 803616e:	f7da fccd 	bl	8010b0c <__aeabi_dcmplt>
 8036172:	2800      	cmp	r0, #0
 8036174:	d171      	bne.n	803625a <_dtoa_r+0x5f2>
 8036176:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 803617a:	4911      	ldr	r1, [pc, #68]	@ (80361c0 <_dtoa_r+0x558>)
 803617c:	2000      	movs	r0, #0
 803617e:	f7da f89b 	bl	80102b8 <__aeabi_dsub>
 8036182:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8036186:	f7da fcc1 	bl	8010b0c <__aeabi_dcmplt>
 803618a:	2800      	cmp	r0, #0
 803618c:	f040 80b3 	bne.w	80362f6 <_dtoa_r+0x68e>
 8036190:	42a6      	cmp	r6, r4
 8036192:	f43f af70 	beq.w	8036076 <_dtoa_r+0x40e>
 8036196:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 803619a:	4b0a      	ldr	r3, [pc, #40]	@ (80361c4 <_dtoa_r+0x55c>)
 803619c:	2200      	movs	r2, #0
 803619e:	f7da fa43 	bl	8010628 <__aeabi_dmul>
 80361a2:	4b08      	ldr	r3, [pc, #32]	@ (80361c4 <_dtoa_r+0x55c>)
 80361a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80361a8:	2200      	movs	r2, #0
 80361aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80361ae:	f7da fa3b 	bl	8010628 <__aeabi_dmul>
 80361b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80361b6:	e7c4      	b.n	8036142 <_dtoa_r+0x4da>
 80361b8:	0803e228 	.word	0x0803e228
 80361bc:	0803e200 	.word	0x0803e200
 80361c0:	3ff00000 	.word	0x3ff00000
 80361c4:	40240000 	.word	0x40240000
 80361c8:	401c0000 	.word	0x401c0000
 80361cc:	40140000 	.word	0x40140000
 80361d0:	3fe00000 	.word	0x3fe00000
 80361d4:	4631      	mov	r1, r6
 80361d6:	4628      	mov	r0, r5
 80361d8:	f7da fa26 	bl	8010628 <__aeabi_dmul>
 80361dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80361e0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80361e2:	4656      	mov	r6, sl
 80361e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80361e8:	f7da fcce 	bl	8010b88 <__aeabi_d2iz>
 80361ec:	4605      	mov	r5, r0
 80361ee:	f7da f9b1 	bl	8010554 <__aeabi_i2d>
 80361f2:	4602      	mov	r2, r0
 80361f4:	460b      	mov	r3, r1
 80361f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80361fa:	f7da f85d 	bl	80102b8 <__aeabi_dsub>
 80361fe:	3530      	adds	r5, #48	@ 0x30
 8036200:	f806 5b01 	strb.w	r5, [r6], #1
 8036204:	4602      	mov	r2, r0
 8036206:	460b      	mov	r3, r1
 8036208:	42a6      	cmp	r6, r4
 803620a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 803620e:	f04f 0200 	mov.w	r2, #0
 8036212:	d124      	bne.n	803625e <_dtoa_r+0x5f6>
 8036214:	4baf      	ldr	r3, [pc, #700]	@ (80364d4 <_dtoa_r+0x86c>)
 8036216:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 803621a:	f7da f84f 	bl	80102bc <__adddf3>
 803621e:	4602      	mov	r2, r0
 8036220:	460b      	mov	r3, r1
 8036222:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8036226:	f7da fc8f 	bl	8010b48 <__aeabi_dcmpgt>
 803622a:	2800      	cmp	r0, #0
 803622c:	d163      	bne.n	80362f6 <_dtoa_r+0x68e>
 803622e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8036232:	49a8      	ldr	r1, [pc, #672]	@ (80364d4 <_dtoa_r+0x86c>)
 8036234:	2000      	movs	r0, #0
 8036236:	f7da f83f 	bl	80102b8 <__aeabi_dsub>
 803623a:	4602      	mov	r2, r0
 803623c:	460b      	mov	r3, r1
 803623e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8036242:	f7da fc63 	bl	8010b0c <__aeabi_dcmplt>
 8036246:	2800      	cmp	r0, #0
 8036248:	f43f af15 	beq.w	8036076 <_dtoa_r+0x40e>
 803624c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 803624e:	1e73      	subs	r3, r6, #1
 8036250:	9313      	str	r3, [sp, #76]	@ 0x4c
 8036252:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8036256:	2b30      	cmp	r3, #48	@ 0x30
 8036258:	d0f8      	beq.n	803624c <_dtoa_r+0x5e4>
 803625a:	4647      	mov	r7, r8
 803625c:	e03b      	b.n	80362d6 <_dtoa_r+0x66e>
 803625e:	4b9e      	ldr	r3, [pc, #632]	@ (80364d8 <_dtoa_r+0x870>)
 8036260:	f7da f9e2 	bl	8010628 <__aeabi_dmul>
 8036264:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8036268:	e7bc      	b.n	80361e4 <_dtoa_r+0x57c>
 803626a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 803626e:	4656      	mov	r6, sl
 8036270:	e9dd 2300 	ldrd	r2, r3, [sp]
 8036274:	4620      	mov	r0, r4
 8036276:	4629      	mov	r1, r5
 8036278:	f7da fb00 	bl	801087c <__aeabi_ddiv>
 803627c:	f7da fc84 	bl	8010b88 <__aeabi_d2iz>
 8036280:	4680      	mov	r8, r0
 8036282:	f7da f967 	bl	8010554 <__aeabi_i2d>
 8036286:	e9dd 2300 	ldrd	r2, r3, [sp]
 803628a:	f7da f9cd 	bl	8010628 <__aeabi_dmul>
 803628e:	4602      	mov	r2, r0
 8036290:	460b      	mov	r3, r1
 8036292:	4620      	mov	r0, r4
 8036294:	4629      	mov	r1, r5
 8036296:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 803629a:	f7da f80d 	bl	80102b8 <__aeabi_dsub>
 803629e:	f806 4b01 	strb.w	r4, [r6], #1
 80362a2:	9d03      	ldr	r5, [sp, #12]
 80362a4:	eba6 040a 	sub.w	r4, r6, sl
 80362a8:	42a5      	cmp	r5, r4
 80362aa:	4602      	mov	r2, r0
 80362ac:	460b      	mov	r3, r1
 80362ae:	d133      	bne.n	8036318 <_dtoa_r+0x6b0>
 80362b0:	f7da f804 	bl	80102bc <__adddf3>
 80362b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80362b8:	4604      	mov	r4, r0
 80362ba:	460d      	mov	r5, r1
 80362bc:	f7da fc44 	bl	8010b48 <__aeabi_dcmpgt>
 80362c0:	b9c0      	cbnz	r0, 80362f4 <_dtoa_r+0x68c>
 80362c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80362c6:	4620      	mov	r0, r4
 80362c8:	4629      	mov	r1, r5
 80362ca:	f7da fc15 	bl	8010af8 <__aeabi_dcmpeq>
 80362ce:	b110      	cbz	r0, 80362d6 <_dtoa_r+0x66e>
 80362d0:	f018 0f01 	tst.w	r8, #1
 80362d4:	d10e      	bne.n	80362f4 <_dtoa_r+0x68c>
 80362d6:	9902      	ldr	r1, [sp, #8]
 80362d8:	4648      	mov	r0, r9
 80362da:	f000 fdf7 	bl	8036ecc <_Bfree>
 80362de:	2300      	movs	r3, #0
 80362e0:	7033      	strb	r3, [r6, #0]
 80362e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80362e4:	3701      	adds	r7, #1
 80362e6:	601f      	str	r7, [r3, #0]
 80362e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80362ea:	2b00      	cmp	r3, #0
 80362ec:	f43f acf3 	beq.w	8035cd6 <_dtoa_r+0x6e>
 80362f0:	601e      	str	r6, [r3, #0]
 80362f2:	e4f0      	b.n	8035cd6 <_dtoa_r+0x6e>
 80362f4:	46b8      	mov	r8, r7
 80362f6:	4633      	mov	r3, r6
 80362f8:	461e      	mov	r6, r3
 80362fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80362fe:	2a39      	cmp	r2, #57	@ 0x39
 8036300:	d106      	bne.n	8036310 <_dtoa_r+0x6a8>
 8036302:	459a      	cmp	sl, r3
 8036304:	d1f8      	bne.n	80362f8 <_dtoa_r+0x690>
 8036306:	2230      	movs	r2, #48	@ 0x30
 8036308:	f108 0801 	add.w	r8, r8, #1
 803630c:	f88a 2000 	strb.w	r2, [sl]
 8036310:	781a      	ldrb	r2, [r3, #0]
 8036312:	3201      	adds	r2, #1
 8036314:	701a      	strb	r2, [r3, #0]
 8036316:	e7a0      	b.n	803625a <_dtoa_r+0x5f2>
 8036318:	4b6f      	ldr	r3, [pc, #444]	@ (80364d8 <_dtoa_r+0x870>)
 803631a:	2200      	movs	r2, #0
 803631c:	f7da f984 	bl	8010628 <__aeabi_dmul>
 8036320:	2200      	movs	r2, #0
 8036322:	2300      	movs	r3, #0
 8036324:	4604      	mov	r4, r0
 8036326:	460d      	mov	r5, r1
 8036328:	f7da fbe6 	bl	8010af8 <__aeabi_dcmpeq>
 803632c:	2800      	cmp	r0, #0
 803632e:	d09f      	beq.n	8036270 <_dtoa_r+0x608>
 8036330:	e7d1      	b.n	80362d6 <_dtoa_r+0x66e>
 8036332:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8036334:	2a00      	cmp	r2, #0
 8036336:	f000 80ea 	beq.w	803650e <_dtoa_r+0x8a6>
 803633a:	9a07      	ldr	r2, [sp, #28]
 803633c:	2a01      	cmp	r2, #1
 803633e:	f300 80cd 	bgt.w	80364dc <_dtoa_r+0x874>
 8036342:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8036344:	2a00      	cmp	r2, #0
 8036346:	f000 80c1 	beq.w	80364cc <_dtoa_r+0x864>
 803634a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 803634e:	9c08      	ldr	r4, [sp, #32]
 8036350:	9e00      	ldr	r6, [sp, #0]
 8036352:	9a00      	ldr	r2, [sp, #0]
 8036354:	441a      	add	r2, r3
 8036356:	9200      	str	r2, [sp, #0]
 8036358:	9a06      	ldr	r2, [sp, #24]
 803635a:	2101      	movs	r1, #1
 803635c:	441a      	add	r2, r3
 803635e:	4648      	mov	r0, r9
 8036360:	9206      	str	r2, [sp, #24]
 8036362:	f000 fe99 	bl	8037098 <__i2b>
 8036366:	4605      	mov	r5, r0
 8036368:	b166      	cbz	r6, 8036384 <_dtoa_r+0x71c>
 803636a:	9b06      	ldr	r3, [sp, #24]
 803636c:	2b00      	cmp	r3, #0
 803636e:	dd09      	ble.n	8036384 <_dtoa_r+0x71c>
 8036370:	42b3      	cmp	r3, r6
 8036372:	9a00      	ldr	r2, [sp, #0]
 8036374:	bfa8      	it	ge
 8036376:	4633      	movge	r3, r6
 8036378:	1ad2      	subs	r2, r2, r3
 803637a:	9200      	str	r2, [sp, #0]
 803637c:	9a06      	ldr	r2, [sp, #24]
 803637e:	1af6      	subs	r6, r6, r3
 8036380:	1ad3      	subs	r3, r2, r3
 8036382:	9306      	str	r3, [sp, #24]
 8036384:	9b08      	ldr	r3, [sp, #32]
 8036386:	b30b      	cbz	r3, 80363cc <_dtoa_r+0x764>
 8036388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803638a:	2b00      	cmp	r3, #0
 803638c:	f000 80c6 	beq.w	803651c <_dtoa_r+0x8b4>
 8036390:	2c00      	cmp	r4, #0
 8036392:	f000 80c0 	beq.w	8036516 <_dtoa_r+0x8ae>
 8036396:	4629      	mov	r1, r5
 8036398:	4622      	mov	r2, r4
 803639a:	4648      	mov	r0, r9
 803639c:	f000 ff34 	bl	8037208 <__pow5mult>
 80363a0:	9a02      	ldr	r2, [sp, #8]
 80363a2:	4601      	mov	r1, r0
 80363a4:	4605      	mov	r5, r0
 80363a6:	4648      	mov	r0, r9
 80363a8:	f000 fe8c 	bl	80370c4 <__multiply>
 80363ac:	9902      	ldr	r1, [sp, #8]
 80363ae:	4680      	mov	r8, r0
 80363b0:	4648      	mov	r0, r9
 80363b2:	f000 fd8b 	bl	8036ecc <_Bfree>
 80363b6:	9b08      	ldr	r3, [sp, #32]
 80363b8:	1b1b      	subs	r3, r3, r4
 80363ba:	9308      	str	r3, [sp, #32]
 80363bc:	f000 80b1 	beq.w	8036522 <_dtoa_r+0x8ba>
 80363c0:	9a08      	ldr	r2, [sp, #32]
 80363c2:	4641      	mov	r1, r8
 80363c4:	4648      	mov	r0, r9
 80363c6:	f000 ff1f 	bl	8037208 <__pow5mult>
 80363ca:	9002      	str	r0, [sp, #8]
 80363cc:	2101      	movs	r1, #1
 80363ce:	4648      	mov	r0, r9
 80363d0:	f000 fe62 	bl	8037098 <__i2b>
 80363d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80363d6:	4604      	mov	r4, r0
 80363d8:	2b00      	cmp	r3, #0
 80363da:	f000 81d5 	beq.w	8036788 <_dtoa_r+0xb20>
 80363de:	461a      	mov	r2, r3
 80363e0:	4601      	mov	r1, r0
 80363e2:	4648      	mov	r0, r9
 80363e4:	f000 ff10 	bl	8037208 <__pow5mult>
 80363e8:	9b07      	ldr	r3, [sp, #28]
 80363ea:	2b01      	cmp	r3, #1
 80363ec:	4604      	mov	r4, r0
 80363ee:	f300 809f 	bgt.w	8036530 <_dtoa_r+0x8c8>
 80363f2:	9b04      	ldr	r3, [sp, #16]
 80363f4:	2b00      	cmp	r3, #0
 80363f6:	f040 8097 	bne.w	8036528 <_dtoa_r+0x8c0>
 80363fa:	9b05      	ldr	r3, [sp, #20]
 80363fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8036400:	2b00      	cmp	r3, #0
 8036402:	f040 8093 	bne.w	803652c <_dtoa_r+0x8c4>
 8036406:	9b05      	ldr	r3, [sp, #20]
 8036408:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 803640c:	0d1b      	lsrs	r3, r3, #20
 803640e:	051b      	lsls	r3, r3, #20
 8036410:	b133      	cbz	r3, 8036420 <_dtoa_r+0x7b8>
 8036412:	9b00      	ldr	r3, [sp, #0]
 8036414:	3301      	adds	r3, #1
 8036416:	9300      	str	r3, [sp, #0]
 8036418:	9b06      	ldr	r3, [sp, #24]
 803641a:	3301      	adds	r3, #1
 803641c:	9306      	str	r3, [sp, #24]
 803641e:	2301      	movs	r3, #1
 8036420:	9308      	str	r3, [sp, #32]
 8036422:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8036424:	2b00      	cmp	r3, #0
 8036426:	f000 81b5 	beq.w	8036794 <_dtoa_r+0xb2c>
 803642a:	6923      	ldr	r3, [r4, #16]
 803642c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8036430:	6918      	ldr	r0, [r3, #16]
 8036432:	f000 fde5 	bl	8037000 <__hi0bits>
 8036436:	f1c0 0020 	rsb	r0, r0, #32
 803643a:	9b06      	ldr	r3, [sp, #24]
 803643c:	4418      	add	r0, r3
 803643e:	f010 001f 	ands.w	r0, r0, #31
 8036442:	f000 8082 	beq.w	803654a <_dtoa_r+0x8e2>
 8036446:	f1c0 0320 	rsb	r3, r0, #32
 803644a:	2b04      	cmp	r3, #4
 803644c:	dd73      	ble.n	8036536 <_dtoa_r+0x8ce>
 803644e:	9b00      	ldr	r3, [sp, #0]
 8036450:	f1c0 001c 	rsb	r0, r0, #28
 8036454:	4403      	add	r3, r0
 8036456:	9300      	str	r3, [sp, #0]
 8036458:	9b06      	ldr	r3, [sp, #24]
 803645a:	4403      	add	r3, r0
 803645c:	4406      	add	r6, r0
 803645e:	9306      	str	r3, [sp, #24]
 8036460:	9b00      	ldr	r3, [sp, #0]
 8036462:	2b00      	cmp	r3, #0
 8036464:	dd05      	ble.n	8036472 <_dtoa_r+0x80a>
 8036466:	9902      	ldr	r1, [sp, #8]
 8036468:	461a      	mov	r2, r3
 803646a:	4648      	mov	r0, r9
 803646c:	f000 ff0c 	bl	8037288 <__lshift>
 8036470:	9002      	str	r0, [sp, #8]
 8036472:	9b06      	ldr	r3, [sp, #24]
 8036474:	2b00      	cmp	r3, #0
 8036476:	dd05      	ble.n	8036484 <_dtoa_r+0x81c>
 8036478:	4621      	mov	r1, r4
 803647a:	461a      	mov	r2, r3
 803647c:	4648      	mov	r0, r9
 803647e:	f000 ff03 	bl	8037288 <__lshift>
 8036482:	4604      	mov	r4, r0
 8036484:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8036486:	2b00      	cmp	r3, #0
 8036488:	d061      	beq.n	803654e <_dtoa_r+0x8e6>
 803648a:	9802      	ldr	r0, [sp, #8]
 803648c:	4621      	mov	r1, r4
 803648e:	f000 ff67 	bl	8037360 <__mcmp>
 8036492:	2800      	cmp	r0, #0
 8036494:	da5b      	bge.n	803654e <_dtoa_r+0x8e6>
 8036496:	2300      	movs	r3, #0
 8036498:	9902      	ldr	r1, [sp, #8]
 803649a:	220a      	movs	r2, #10
 803649c:	4648      	mov	r0, r9
 803649e:	f000 fd1f 	bl	8036ee0 <__multadd>
 80364a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80364a4:	9002      	str	r0, [sp, #8]
 80364a6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80364aa:	2b00      	cmp	r3, #0
 80364ac:	f000 8174 	beq.w	8036798 <_dtoa_r+0xb30>
 80364b0:	4629      	mov	r1, r5
 80364b2:	2300      	movs	r3, #0
 80364b4:	220a      	movs	r2, #10
 80364b6:	4648      	mov	r0, r9
 80364b8:	f000 fd12 	bl	8036ee0 <__multadd>
 80364bc:	f1bb 0f00 	cmp.w	fp, #0
 80364c0:	4605      	mov	r5, r0
 80364c2:	dc6f      	bgt.n	80365a4 <_dtoa_r+0x93c>
 80364c4:	9b07      	ldr	r3, [sp, #28]
 80364c6:	2b02      	cmp	r3, #2
 80364c8:	dc49      	bgt.n	803655e <_dtoa_r+0x8f6>
 80364ca:	e06b      	b.n	80365a4 <_dtoa_r+0x93c>
 80364cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80364ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80364d2:	e73c      	b.n	803634e <_dtoa_r+0x6e6>
 80364d4:	3fe00000 	.word	0x3fe00000
 80364d8:	40240000 	.word	0x40240000
 80364dc:	9b03      	ldr	r3, [sp, #12]
 80364de:	1e5c      	subs	r4, r3, #1
 80364e0:	9b08      	ldr	r3, [sp, #32]
 80364e2:	42a3      	cmp	r3, r4
 80364e4:	db09      	blt.n	80364fa <_dtoa_r+0x892>
 80364e6:	1b1c      	subs	r4, r3, r4
 80364e8:	9b03      	ldr	r3, [sp, #12]
 80364ea:	2b00      	cmp	r3, #0
 80364ec:	f6bf af30 	bge.w	8036350 <_dtoa_r+0x6e8>
 80364f0:	9b00      	ldr	r3, [sp, #0]
 80364f2:	9a03      	ldr	r2, [sp, #12]
 80364f4:	1a9e      	subs	r6, r3, r2
 80364f6:	2300      	movs	r3, #0
 80364f8:	e72b      	b.n	8036352 <_dtoa_r+0x6ea>
 80364fa:	9b08      	ldr	r3, [sp, #32]
 80364fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80364fe:	9408      	str	r4, [sp, #32]
 8036500:	1ae3      	subs	r3, r4, r3
 8036502:	441a      	add	r2, r3
 8036504:	9e00      	ldr	r6, [sp, #0]
 8036506:	9b03      	ldr	r3, [sp, #12]
 8036508:	920d      	str	r2, [sp, #52]	@ 0x34
 803650a:	2400      	movs	r4, #0
 803650c:	e721      	b.n	8036352 <_dtoa_r+0x6ea>
 803650e:	9c08      	ldr	r4, [sp, #32]
 8036510:	9e00      	ldr	r6, [sp, #0]
 8036512:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8036514:	e728      	b.n	8036368 <_dtoa_r+0x700>
 8036516:	f8dd 8008 	ldr.w	r8, [sp, #8]
 803651a:	e751      	b.n	80363c0 <_dtoa_r+0x758>
 803651c:	9a08      	ldr	r2, [sp, #32]
 803651e:	9902      	ldr	r1, [sp, #8]
 8036520:	e750      	b.n	80363c4 <_dtoa_r+0x75c>
 8036522:	f8cd 8008 	str.w	r8, [sp, #8]
 8036526:	e751      	b.n	80363cc <_dtoa_r+0x764>
 8036528:	2300      	movs	r3, #0
 803652a:	e779      	b.n	8036420 <_dtoa_r+0x7b8>
 803652c:	9b04      	ldr	r3, [sp, #16]
 803652e:	e777      	b.n	8036420 <_dtoa_r+0x7b8>
 8036530:	2300      	movs	r3, #0
 8036532:	9308      	str	r3, [sp, #32]
 8036534:	e779      	b.n	803642a <_dtoa_r+0x7c2>
 8036536:	d093      	beq.n	8036460 <_dtoa_r+0x7f8>
 8036538:	9a00      	ldr	r2, [sp, #0]
 803653a:	331c      	adds	r3, #28
 803653c:	441a      	add	r2, r3
 803653e:	9200      	str	r2, [sp, #0]
 8036540:	9a06      	ldr	r2, [sp, #24]
 8036542:	441a      	add	r2, r3
 8036544:	441e      	add	r6, r3
 8036546:	9206      	str	r2, [sp, #24]
 8036548:	e78a      	b.n	8036460 <_dtoa_r+0x7f8>
 803654a:	4603      	mov	r3, r0
 803654c:	e7f4      	b.n	8036538 <_dtoa_r+0x8d0>
 803654e:	9b03      	ldr	r3, [sp, #12]
 8036550:	2b00      	cmp	r3, #0
 8036552:	46b8      	mov	r8, r7
 8036554:	dc20      	bgt.n	8036598 <_dtoa_r+0x930>
 8036556:	469b      	mov	fp, r3
 8036558:	9b07      	ldr	r3, [sp, #28]
 803655a:	2b02      	cmp	r3, #2
 803655c:	dd1e      	ble.n	803659c <_dtoa_r+0x934>
 803655e:	f1bb 0f00 	cmp.w	fp, #0
 8036562:	f47f adb2 	bne.w	80360ca <_dtoa_r+0x462>
 8036566:	4621      	mov	r1, r4
 8036568:	465b      	mov	r3, fp
 803656a:	2205      	movs	r2, #5
 803656c:	4648      	mov	r0, r9
 803656e:	f000 fcb7 	bl	8036ee0 <__multadd>
 8036572:	4601      	mov	r1, r0
 8036574:	4604      	mov	r4, r0
 8036576:	9802      	ldr	r0, [sp, #8]
 8036578:	f000 fef2 	bl	8037360 <__mcmp>
 803657c:	2800      	cmp	r0, #0
 803657e:	f77f ada4 	ble.w	80360ca <_dtoa_r+0x462>
 8036582:	4656      	mov	r6, sl
 8036584:	2331      	movs	r3, #49	@ 0x31
 8036586:	f806 3b01 	strb.w	r3, [r6], #1
 803658a:	f108 0801 	add.w	r8, r8, #1
 803658e:	e5a0      	b.n	80360d2 <_dtoa_r+0x46a>
 8036590:	9c03      	ldr	r4, [sp, #12]
 8036592:	46b8      	mov	r8, r7
 8036594:	4625      	mov	r5, r4
 8036596:	e7f4      	b.n	8036582 <_dtoa_r+0x91a>
 8036598:	f8dd b00c 	ldr.w	fp, [sp, #12]
 803659c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803659e:	2b00      	cmp	r3, #0
 80365a0:	f000 80fe 	beq.w	80367a0 <_dtoa_r+0xb38>
 80365a4:	2e00      	cmp	r6, #0
 80365a6:	dd05      	ble.n	80365b4 <_dtoa_r+0x94c>
 80365a8:	4629      	mov	r1, r5
 80365aa:	4632      	mov	r2, r6
 80365ac:	4648      	mov	r0, r9
 80365ae:	f000 fe6b 	bl	8037288 <__lshift>
 80365b2:	4605      	mov	r5, r0
 80365b4:	9b08      	ldr	r3, [sp, #32]
 80365b6:	2b00      	cmp	r3, #0
 80365b8:	d05b      	beq.n	8036672 <_dtoa_r+0xa0a>
 80365ba:	6869      	ldr	r1, [r5, #4]
 80365bc:	4648      	mov	r0, r9
 80365be:	f000 fc60 	bl	8036e82 <_Balloc>
 80365c2:	4606      	mov	r6, r0
 80365c4:	b920      	cbnz	r0, 80365d0 <_dtoa_r+0x968>
 80365c6:	4b81      	ldr	r3, [pc, #516]	@ (80367cc <_dtoa_r+0xb64>)
 80365c8:	4602      	mov	r2, r0
 80365ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80365ce:	e470      	b.n	8035eb2 <_dtoa_r+0x24a>
 80365d0:	692a      	ldr	r2, [r5, #16]
 80365d2:	3202      	adds	r2, #2
 80365d4:	0092      	lsls	r2, r2, #2
 80365d6:	f105 010c 	add.w	r1, r5, #12
 80365da:	300c      	adds	r0, #12
 80365dc:	f7f7 fe8c 	bl	802e2f8 <memcpy>
 80365e0:	2201      	movs	r2, #1
 80365e2:	4631      	mov	r1, r6
 80365e4:	4648      	mov	r0, r9
 80365e6:	f000 fe4f 	bl	8037288 <__lshift>
 80365ea:	f10a 0301 	add.w	r3, sl, #1
 80365ee:	9300      	str	r3, [sp, #0]
 80365f0:	eb0a 030b 	add.w	r3, sl, fp
 80365f4:	9308      	str	r3, [sp, #32]
 80365f6:	9b04      	ldr	r3, [sp, #16]
 80365f8:	f003 0301 	and.w	r3, r3, #1
 80365fc:	462f      	mov	r7, r5
 80365fe:	9306      	str	r3, [sp, #24]
 8036600:	4605      	mov	r5, r0
 8036602:	9b00      	ldr	r3, [sp, #0]
 8036604:	9802      	ldr	r0, [sp, #8]
 8036606:	4621      	mov	r1, r4
 8036608:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 803660c:	f7ff faa2 	bl	8035b54 <quorem>
 8036610:	4603      	mov	r3, r0
 8036612:	3330      	adds	r3, #48	@ 0x30
 8036614:	9003      	str	r0, [sp, #12]
 8036616:	4639      	mov	r1, r7
 8036618:	9802      	ldr	r0, [sp, #8]
 803661a:	9309      	str	r3, [sp, #36]	@ 0x24
 803661c:	f000 fea0 	bl	8037360 <__mcmp>
 8036620:	462a      	mov	r2, r5
 8036622:	9004      	str	r0, [sp, #16]
 8036624:	4621      	mov	r1, r4
 8036626:	4648      	mov	r0, r9
 8036628:	f000 feb6 	bl	8037398 <__mdiff>
 803662c:	68c2      	ldr	r2, [r0, #12]
 803662e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8036630:	4606      	mov	r6, r0
 8036632:	bb02      	cbnz	r2, 8036676 <_dtoa_r+0xa0e>
 8036634:	4601      	mov	r1, r0
 8036636:	9802      	ldr	r0, [sp, #8]
 8036638:	f000 fe92 	bl	8037360 <__mcmp>
 803663c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803663e:	4602      	mov	r2, r0
 8036640:	4631      	mov	r1, r6
 8036642:	4648      	mov	r0, r9
 8036644:	920c      	str	r2, [sp, #48]	@ 0x30
 8036646:	9309      	str	r3, [sp, #36]	@ 0x24
 8036648:	f000 fc40 	bl	8036ecc <_Bfree>
 803664c:	9b07      	ldr	r3, [sp, #28]
 803664e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8036650:	9e00      	ldr	r6, [sp, #0]
 8036652:	ea42 0103 	orr.w	r1, r2, r3
 8036656:	9b06      	ldr	r3, [sp, #24]
 8036658:	4319      	orrs	r1, r3
 803665a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803665c:	d10d      	bne.n	803667a <_dtoa_r+0xa12>
 803665e:	2b39      	cmp	r3, #57	@ 0x39
 8036660:	d027      	beq.n	80366b2 <_dtoa_r+0xa4a>
 8036662:	9a04      	ldr	r2, [sp, #16]
 8036664:	2a00      	cmp	r2, #0
 8036666:	dd01      	ble.n	803666c <_dtoa_r+0xa04>
 8036668:	9b03      	ldr	r3, [sp, #12]
 803666a:	3331      	adds	r3, #49	@ 0x31
 803666c:	f88b 3000 	strb.w	r3, [fp]
 8036670:	e530      	b.n	80360d4 <_dtoa_r+0x46c>
 8036672:	4628      	mov	r0, r5
 8036674:	e7b9      	b.n	80365ea <_dtoa_r+0x982>
 8036676:	2201      	movs	r2, #1
 8036678:	e7e2      	b.n	8036640 <_dtoa_r+0x9d8>
 803667a:	9904      	ldr	r1, [sp, #16]
 803667c:	2900      	cmp	r1, #0
 803667e:	db04      	blt.n	803668a <_dtoa_r+0xa22>
 8036680:	9807      	ldr	r0, [sp, #28]
 8036682:	4301      	orrs	r1, r0
 8036684:	9806      	ldr	r0, [sp, #24]
 8036686:	4301      	orrs	r1, r0
 8036688:	d120      	bne.n	80366cc <_dtoa_r+0xa64>
 803668a:	2a00      	cmp	r2, #0
 803668c:	ddee      	ble.n	803666c <_dtoa_r+0xa04>
 803668e:	9902      	ldr	r1, [sp, #8]
 8036690:	9300      	str	r3, [sp, #0]
 8036692:	2201      	movs	r2, #1
 8036694:	4648      	mov	r0, r9
 8036696:	f000 fdf7 	bl	8037288 <__lshift>
 803669a:	4621      	mov	r1, r4
 803669c:	9002      	str	r0, [sp, #8]
 803669e:	f000 fe5f 	bl	8037360 <__mcmp>
 80366a2:	2800      	cmp	r0, #0
 80366a4:	9b00      	ldr	r3, [sp, #0]
 80366a6:	dc02      	bgt.n	80366ae <_dtoa_r+0xa46>
 80366a8:	d1e0      	bne.n	803666c <_dtoa_r+0xa04>
 80366aa:	07da      	lsls	r2, r3, #31
 80366ac:	d5de      	bpl.n	803666c <_dtoa_r+0xa04>
 80366ae:	2b39      	cmp	r3, #57	@ 0x39
 80366b0:	d1da      	bne.n	8036668 <_dtoa_r+0xa00>
 80366b2:	2339      	movs	r3, #57	@ 0x39
 80366b4:	f88b 3000 	strb.w	r3, [fp]
 80366b8:	4633      	mov	r3, r6
 80366ba:	461e      	mov	r6, r3
 80366bc:	3b01      	subs	r3, #1
 80366be:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80366c2:	2a39      	cmp	r2, #57	@ 0x39
 80366c4:	d04e      	beq.n	8036764 <_dtoa_r+0xafc>
 80366c6:	3201      	adds	r2, #1
 80366c8:	701a      	strb	r2, [r3, #0]
 80366ca:	e503      	b.n	80360d4 <_dtoa_r+0x46c>
 80366cc:	2a00      	cmp	r2, #0
 80366ce:	dd03      	ble.n	80366d8 <_dtoa_r+0xa70>
 80366d0:	2b39      	cmp	r3, #57	@ 0x39
 80366d2:	d0ee      	beq.n	80366b2 <_dtoa_r+0xa4a>
 80366d4:	3301      	adds	r3, #1
 80366d6:	e7c9      	b.n	803666c <_dtoa_r+0xa04>
 80366d8:	9a00      	ldr	r2, [sp, #0]
 80366da:	9908      	ldr	r1, [sp, #32]
 80366dc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80366e0:	428a      	cmp	r2, r1
 80366e2:	d028      	beq.n	8036736 <_dtoa_r+0xace>
 80366e4:	9902      	ldr	r1, [sp, #8]
 80366e6:	2300      	movs	r3, #0
 80366e8:	220a      	movs	r2, #10
 80366ea:	4648      	mov	r0, r9
 80366ec:	f000 fbf8 	bl	8036ee0 <__multadd>
 80366f0:	42af      	cmp	r7, r5
 80366f2:	9002      	str	r0, [sp, #8]
 80366f4:	f04f 0300 	mov.w	r3, #0
 80366f8:	f04f 020a 	mov.w	r2, #10
 80366fc:	4639      	mov	r1, r7
 80366fe:	4648      	mov	r0, r9
 8036700:	d107      	bne.n	8036712 <_dtoa_r+0xaaa>
 8036702:	f000 fbed 	bl	8036ee0 <__multadd>
 8036706:	4607      	mov	r7, r0
 8036708:	4605      	mov	r5, r0
 803670a:	9b00      	ldr	r3, [sp, #0]
 803670c:	3301      	adds	r3, #1
 803670e:	9300      	str	r3, [sp, #0]
 8036710:	e777      	b.n	8036602 <_dtoa_r+0x99a>
 8036712:	f000 fbe5 	bl	8036ee0 <__multadd>
 8036716:	4629      	mov	r1, r5
 8036718:	4607      	mov	r7, r0
 803671a:	2300      	movs	r3, #0
 803671c:	220a      	movs	r2, #10
 803671e:	4648      	mov	r0, r9
 8036720:	f000 fbde 	bl	8036ee0 <__multadd>
 8036724:	4605      	mov	r5, r0
 8036726:	e7f0      	b.n	803670a <_dtoa_r+0xaa2>
 8036728:	f1bb 0f00 	cmp.w	fp, #0
 803672c:	bfcc      	ite	gt
 803672e:	465e      	movgt	r6, fp
 8036730:	2601      	movle	r6, #1
 8036732:	4456      	add	r6, sl
 8036734:	2700      	movs	r7, #0
 8036736:	9902      	ldr	r1, [sp, #8]
 8036738:	9300      	str	r3, [sp, #0]
 803673a:	2201      	movs	r2, #1
 803673c:	4648      	mov	r0, r9
 803673e:	f000 fda3 	bl	8037288 <__lshift>
 8036742:	4621      	mov	r1, r4
 8036744:	9002      	str	r0, [sp, #8]
 8036746:	f000 fe0b 	bl	8037360 <__mcmp>
 803674a:	2800      	cmp	r0, #0
 803674c:	dcb4      	bgt.n	80366b8 <_dtoa_r+0xa50>
 803674e:	d102      	bne.n	8036756 <_dtoa_r+0xaee>
 8036750:	9b00      	ldr	r3, [sp, #0]
 8036752:	07db      	lsls	r3, r3, #31
 8036754:	d4b0      	bmi.n	80366b8 <_dtoa_r+0xa50>
 8036756:	4633      	mov	r3, r6
 8036758:	461e      	mov	r6, r3
 803675a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 803675e:	2a30      	cmp	r2, #48	@ 0x30
 8036760:	d0fa      	beq.n	8036758 <_dtoa_r+0xaf0>
 8036762:	e4b7      	b.n	80360d4 <_dtoa_r+0x46c>
 8036764:	459a      	cmp	sl, r3
 8036766:	d1a8      	bne.n	80366ba <_dtoa_r+0xa52>
 8036768:	2331      	movs	r3, #49	@ 0x31
 803676a:	f108 0801 	add.w	r8, r8, #1
 803676e:	f88a 3000 	strb.w	r3, [sl]
 8036772:	e4af      	b.n	80360d4 <_dtoa_r+0x46c>
 8036774:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8036776:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80367d0 <_dtoa_r+0xb68>
 803677a:	2b00      	cmp	r3, #0
 803677c:	f43f aaab 	beq.w	8035cd6 <_dtoa_r+0x6e>
 8036780:	f10a 0308 	add.w	r3, sl, #8
 8036784:	f7ff baa5 	b.w	8035cd2 <_dtoa_r+0x6a>
 8036788:	9b07      	ldr	r3, [sp, #28]
 803678a:	2b01      	cmp	r3, #1
 803678c:	f77f ae31 	ble.w	80363f2 <_dtoa_r+0x78a>
 8036790:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8036792:	9308      	str	r3, [sp, #32]
 8036794:	2001      	movs	r0, #1
 8036796:	e650      	b.n	803643a <_dtoa_r+0x7d2>
 8036798:	f1bb 0f00 	cmp.w	fp, #0
 803679c:	f77f aedc 	ble.w	8036558 <_dtoa_r+0x8f0>
 80367a0:	4656      	mov	r6, sl
 80367a2:	9802      	ldr	r0, [sp, #8]
 80367a4:	4621      	mov	r1, r4
 80367a6:	f7ff f9d5 	bl	8035b54 <quorem>
 80367aa:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80367ae:	f806 3b01 	strb.w	r3, [r6], #1
 80367b2:	eba6 020a 	sub.w	r2, r6, sl
 80367b6:	4593      	cmp	fp, r2
 80367b8:	ddb6      	ble.n	8036728 <_dtoa_r+0xac0>
 80367ba:	9902      	ldr	r1, [sp, #8]
 80367bc:	2300      	movs	r3, #0
 80367be:	220a      	movs	r2, #10
 80367c0:	4648      	mov	r0, r9
 80367c2:	f000 fb8d 	bl	8036ee0 <__multadd>
 80367c6:	9002      	str	r0, [sp, #8]
 80367c8:	e7eb      	b.n	80367a2 <_dtoa_r+0xb3a>
 80367ca:	bf00      	nop
 80367cc:	0803dcf5 	.word	0x0803dcf5
 80367d0:	0803dce8 	.word	0x0803dce8

080367d4 <__env_lock>:
 80367d4:	4801      	ldr	r0, [pc, #4]	@ (80367dc <__env_lock+0x8>)
 80367d6:	f7f7 bd8c 	b.w	802e2f2 <__retarget_lock_acquire_recursive>
 80367da:	bf00      	nop
 80367dc:	2001a291 	.word	0x2001a291

080367e0 <__env_unlock>:
 80367e0:	4801      	ldr	r0, [pc, #4]	@ (80367e8 <__env_unlock+0x8>)
 80367e2:	f7f7 bd88 	b.w	802e2f6 <__retarget_lock_release_recursive>
 80367e6:	bf00      	nop
 80367e8:	2001a291 	.word	0x2001a291

080367ec <rshift>:
 80367ec:	6903      	ldr	r3, [r0, #16]
 80367ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80367f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80367f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80367fa:	f100 0414 	add.w	r4, r0, #20
 80367fe:	dd45      	ble.n	803688c <rshift+0xa0>
 8036800:	f011 011f 	ands.w	r1, r1, #31
 8036804:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8036808:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 803680c:	d10c      	bne.n	8036828 <rshift+0x3c>
 803680e:	f100 0710 	add.w	r7, r0, #16
 8036812:	4629      	mov	r1, r5
 8036814:	42b1      	cmp	r1, r6
 8036816:	d334      	bcc.n	8036882 <rshift+0x96>
 8036818:	1a9b      	subs	r3, r3, r2
 803681a:	009b      	lsls	r3, r3, #2
 803681c:	1eea      	subs	r2, r5, #3
 803681e:	4296      	cmp	r6, r2
 8036820:	bf38      	it	cc
 8036822:	2300      	movcc	r3, #0
 8036824:	4423      	add	r3, r4
 8036826:	e015      	b.n	8036854 <rshift+0x68>
 8036828:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 803682c:	f1c1 0820 	rsb	r8, r1, #32
 8036830:	40cf      	lsrs	r7, r1
 8036832:	f105 0e04 	add.w	lr, r5, #4
 8036836:	46a1      	mov	r9, r4
 8036838:	4576      	cmp	r6, lr
 803683a:	46f4      	mov	ip, lr
 803683c:	d815      	bhi.n	803686a <rshift+0x7e>
 803683e:	1a9a      	subs	r2, r3, r2
 8036840:	0092      	lsls	r2, r2, #2
 8036842:	3a04      	subs	r2, #4
 8036844:	3501      	adds	r5, #1
 8036846:	42ae      	cmp	r6, r5
 8036848:	bf38      	it	cc
 803684a:	2200      	movcc	r2, #0
 803684c:	18a3      	adds	r3, r4, r2
 803684e:	50a7      	str	r7, [r4, r2]
 8036850:	b107      	cbz	r7, 8036854 <rshift+0x68>
 8036852:	3304      	adds	r3, #4
 8036854:	1b1a      	subs	r2, r3, r4
 8036856:	42a3      	cmp	r3, r4
 8036858:	ea4f 02a2 	mov.w	r2, r2, asr #2
 803685c:	bf08      	it	eq
 803685e:	2300      	moveq	r3, #0
 8036860:	6102      	str	r2, [r0, #16]
 8036862:	bf08      	it	eq
 8036864:	6143      	streq	r3, [r0, #20]
 8036866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803686a:	f8dc c000 	ldr.w	ip, [ip]
 803686e:	fa0c fc08 	lsl.w	ip, ip, r8
 8036872:	ea4c 0707 	orr.w	r7, ip, r7
 8036876:	f849 7b04 	str.w	r7, [r9], #4
 803687a:	f85e 7b04 	ldr.w	r7, [lr], #4
 803687e:	40cf      	lsrs	r7, r1
 8036880:	e7da      	b.n	8036838 <rshift+0x4c>
 8036882:	f851 cb04 	ldr.w	ip, [r1], #4
 8036886:	f847 cf04 	str.w	ip, [r7, #4]!
 803688a:	e7c3      	b.n	8036814 <rshift+0x28>
 803688c:	4623      	mov	r3, r4
 803688e:	e7e1      	b.n	8036854 <rshift+0x68>

08036890 <__hexdig_fun>:
 8036890:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8036894:	2b09      	cmp	r3, #9
 8036896:	d802      	bhi.n	803689e <__hexdig_fun+0xe>
 8036898:	3820      	subs	r0, #32
 803689a:	b2c0      	uxtb	r0, r0
 803689c:	4770      	bx	lr
 803689e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80368a2:	2b05      	cmp	r3, #5
 80368a4:	d801      	bhi.n	80368aa <__hexdig_fun+0x1a>
 80368a6:	3847      	subs	r0, #71	@ 0x47
 80368a8:	e7f7      	b.n	803689a <__hexdig_fun+0xa>
 80368aa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80368ae:	2b05      	cmp	r3, #5
 80368b0:	d801      	bhi.n	80368b6 <__hexdig_fun+0x26>
 80368b2:	3827      	subs	r0, #39	@ 0x27
 80368b4:	e7f1      	b.n	803689a <__hexdig_fun+0xa>
 80368b6:	2000      	movs	r0, #0
 80368b8:	4770      	bx	lr
	...

080368bc <__gethex>:
 80368bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80368c0:	b085      	sub	sp, #20
 80368c2:	468a      	mov	sl, r1
 80368c4:	9302      	str	r3, [sp, #8]
 80368c6:	680b      	ldr	r3, [r1, #0]
 80368c8:	9001      	str	r0, [sp, #4]
 80368ca:	4690      	mov	r8, r2
 80368cc:	1c9c      	adds	r4, r3, #2
 80368ce:	46a1      	mov	r9, r4
 80368d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80368d4:	2830      	cmp	r0, #48	@ 0x30
 80368d6:	d0fa      	beq.n	80368ce <__gethex+0x12>
 80368d8:	eba9 0303 	sub.w	r3, r9, r3
 80368dc:	f1a3 0b02 	sub.w	fp, r3, #2
 80368e0:	f7ff ffd6 	bl	8036890 <__hexdig_fun>
 80368e4:	4605      	mov	r5, r0
 80368e6:	2800      	cmp	r0, #0
 80368e8:	d168      	bne.n	80369bc <__gethex+0x100>
 80368ea:	49a0      	ldr	r1, [pc, #640]	@ (8036b6c <__gethex+0x2b0>)
 80368ec:	2201      	movs	r2, #1
 80368ee:	4648      	mov	r0, r9
 80368f0:	f7f5 ffbb 	bl	802c86a <strncmp>
 80368f4:	4607      	mov	r7, r0
 80368f6:	2800      	cmp	r0, #0
 80368f8:	d167      	bne.n	80369ca <__gethex+0x10e>
 80368fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 80368fe:	4626      	mov	r6, r4
 8036900:	f7ff ffc6 	bl	8036890 <__hexdig_fun>
 8036904:	2800      	cmp	r0, #0
 8036906:	d062      	beq.n	80369ce <__gethex+0x112>
 8036908:	4623      	mov	r3, r4
 803690a:	7818      	ldrb	r0, [r3, #0]
 803690c:	2830      	cmp	r0, #48	@ 0x30
 803690e:	4699      	mov	r9, r3
 8036910:	f103 0301 	add.w	r3, r3, #1
 8036914:	d0f9      	beq.n	803690a <__gethex+0x4e>
 8036916:	f7ff ffbb 	bl	8036890 <__hexdig_fun>
 803691a:	fab0 f580 	clz	r5, r0
 803691e:	096d      	lsrs	r5, r5, #5
 8036920:	f04f 0b01 	mov.w	fp, #1
 8036924:	464a      	mov	r2, r9
 8036926:	4616      	mov	r6, r2
 8036928:	3201      	adds	r2, #1
 803692a:	7830      	ldrb	r0, [r6, #0]
 803692c:	f7ff ffb0 	bl	8036890 <__hexdig_fun>
 8036930:	2800      	cmp	r0, #0
 8036932:	d1f8      	bne.n	8036926 <__gethex+0x6a>
 8036934:	498d      	ldr	r1, [pc, #564]	@ (8036b6c <__gethex+0x2b0>)
 8036936:	2201      	movs	r2, #1
 8036938:	4630      	mov	r0, r6
 803693a:	f7f5 ff96 	bl	802c86a <strncmp>
 803693e:	2800      	cmp	r0, #0
 8036940:	d13f      	bne.n	80369c2 <__gethex+0x106>
 8036942:	b944      	cbnz	r4, 8036956 <__gethex+0x9a>
 8036944:	1c74      	adds	r4, r6, #1
 8036946:	4622      	mov	r2, r4
 8036948:	4616      	mov	r6, r2
 803694a:	3201      	adds	r2, #1
 803694c:	7830      	ldrb	r0, [r6, #0]
 803694e:	f7ff ff9f 	bl	8036890 <__hexdig_fun>
 8036952:	2800      	cmp	r0, #0
 8036954:	d1f8      	bne.n	8036948 <__gethex+0x8c>
 8036956:	1ba4      	subs	r4, r4, r6
 8036958:	00a7      	lsls	r7, r4, #2
 803695a:	7833      	ldrb	r3, [r6, #0]
 803695c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8036960:	2b50      	cmp	r3, #80	@ 0x50
 8036962:	d13e      	bne.n	80369e2 <__gethex+0x126>
 8036964:	7873      	ldrb	r3, [r6, #1]
 8036966:	2b2b      	cmp	r3, #43	@ 0x2b
 8036968:	d033      	beq.n	80369d2 <__gethex+0x116>
 803696a:	2b2d      	cmp	r3, #45	@ 0x2d
 803696c:	d034      	beq.n	80369d8 <__gethex+0x11c>
 803696e:	1c71      	adds	r1, r6, #1
 8036970:	2400      	movs	r4, #0
 8036972:	7808      	ldrb	r0, [r1, #0]
 8036974:	f7ff ff8c 	bl	8036890 <__hexdig_fun>
 8036978:	1e43      	subs	r3, r0, #1
 803697a:	b2db      	uxtb	r3, r3
 803697c:	2b18      	cmp	r3, #24
 803697e:	d830      	bhi.n	80369e2 <__gethex+0x126>
 8036980:	f1a0 0210 	sub.w	r2, r0, #16
 8036984:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8036988:	f7ff ff82 	bl	8036890 <__hexdig_fun>
 803698c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8036990:	fa5f fc8c 	uxtb.w	ip, ip
 8036994:	f1bc 0f18 	cmp.w	ip, #24
 8036998:	f04f 030a 	mov.w	r3, #10
 803699c:	d91e      	bls.n	80369dc <__gethex+0x120>
 803699e:	b104      	cbz	r4, 80369a2 <__gethex+0xe6>
 80369a0:	4252      	negs	r2, r2
 80369a2:	4417      	add	r7, r2
 80369a4:	f8ca 1000 	str.w	r1, [sl]
 80369a8:	b1ed      	cbz	r5, 80369e6 <__gethex+0x12a>
 80369aa:	f1bb 0f00 	cmp.w	fp, #0
 80369ae:	bf0c      	ite	eq
 80369b0:	2506      	moveq	r5, #6
 80369b2:	2500      	movne	r5, #0
 80369b4:	4628      	mov	r0, r5
 80369b6:	b005      	add	sp, #20
 80369b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80369bc:	2500      	movs	r5, #0
 80369be:	462c      	mov	r4, r5
 80369c0:	e7b0      	b.n	8036924 <__gethex+0x68>
 80369c2:	2c00      	cmp	r4, #0
 80369c4:	d1c7      	bne.n	8036956 <__gethex+0x9a>
 80369c6:	4627      	mov	r7, r4
 80369c8:	e7c7      	b.n	803695a <__gethex+0x9e>
 80369ca:	464e      	mov	r6, r9
 80369cc:	462f      	mov	r7, r5
 80369ce:	2501      	movs	r5, #1
 80369d0:	e7c3      	b.n	803695a <__gethex+0x9e>
 80369d2:	2400      	movs	r4, #0
 80369d4:	1cb1      	adds	r1, r6, #2
 80369d6:	e7cc      	b.n	8036972 <__gethex+0xb6>
 80369d8:	2401      	movs	r4, #1
 80369da:	e7fb      	b.n	80369d4 <__gethex+0x118>
 80369dc:	fb03 0002 	mla	r0, r3, r2, r0
 80369e0:	e7ce      	b.n	8036980 <__gethex+0xc4>
 80369e2:	4631      	mov	r1, r6
 80369e4:	e7de      	b.n	80369a4 <__gethex+0xe8>
 80369e6:	eba6 0309 	sub.w	r3, r6, r9
 80369ea:	3b01      	subs	r3, #1
 80369ec:	4629      	mov	r1, r5
 80369ee:	2b07      	cmp	r3, #7
 80369f0:	dc0a      	bgt.n	8036a08 <__gethex+0x14c>
 80369f2:	9801      	ldr	r0, [sp, #4]
 80369f4:	f000 fa45 	bl	8036e82 <_Balloc>
 80369f8:	4604      	mov	r4, r0
 80369fa:	b940      	cbnz	r0, 8036a0e <__gethex+0x152>
 80369fc:	4b5c      	ldr	r3, [pc, #368]	@ (8036b70 <__gethex+0x2b4>)
 80369fe:	4602      	mov	r2, r0
 8036a00:	21e4      	movs	r1, #228	@ 0xe4
 8036a02:	485c      	ldr	r0, [pc, #368]	@ (8036b74 <__gethex+0x2b8>)
 8036a04:	f7f4 fe02 	bl	802b60c <__assert_func>
 8036a08:	3101      	adds	r1, #1
 8036a0a:	105b      	asrs	r3, r3, #1
 8036a0c:	e7ef      	b.n	80369ee <__gethex+0x132>
 8036a0e:	f100 0a14 	add.w	sl, r0, #20
 8036a12:	2300      	movs	r3, #0
 8036a14:	4655      	mov	r5, sl
 8036a16:	469b      	mov	fp, r3
 8036a18:	45b1      	cmp	r9, r6
 8036a1a:	d337      	bcc.n	8036a8c <__gethex+0x1d0>
 8036a1c:	f845 bb04 	str.w	fp, [r5], #4
 8036a20:	eba5 050a 	sub.w	r5, r5, sl
 8036a24:	10ad      	asrs	r5, r5, #2
 8036a26:	6125      	str	r5, [r4, #16]
 8036a28:	4658      	mov	r0, fp
 8036a2a:	f000 fae9 	bl	8037000 <__hi0bits>
 8036a2e:	016d      	lsls	r5, r5, #5
 8036a30:	f8d8 6000 	ldr.w	r6, [r8]
 8036a34:	1a2d      	subs	r5, r5, r0
 8036a36:	42b5      	cmp	r5, r6
 8036a38:	dd54      	ble.n	8036ae4 <__gethex+0x228>
 8036a3a:	1bad      	subs	r5, r5, r6
 8036a3c:	4629      	mov	r1, r5
 8036a3e:	4620      	mov	r0, r4
 8036a40:	f000 fe5b 	bl	80376fa <__any_on>
 8036a44:	4681      	mov	r9, r0
 8036a46:	b178      	cbz	r0, 8036a68 <__gethex+0x1ac>
 8036a48:	1e6b      	subs	r3, r5, #1
 8036a4a:	1159      	asrs	r1, r3, #5
 8036a4c:	f003 021f 	and.w	r2, r3, #31
 8036a50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8036a54:	f04f 0901 	mov.w	r9, #1
 8036a58:	fa09 f202 	lsl.w	r2, r9, r2
 8036a5c:	420a      	tst	r2, r1
 8036a5e:	d003      	beq.n	8036a68 <__gethex+0x1ac>
 8036a60:	454b      	cmp	r3, r9
 8036a62:	dc36      	bgt.n	8036ad2 <__gethex+0x216>
 8036a64:	f04f 0902 	mov.w	r9, #2
 8036a68:	4629      	mov	r1, r5
 8036a6a:	4620      	mov	r0, r4
 8036a6c:	f7ff febe 	bl	80367ec <rshift>
 8036a70:	442f      	add	r7, r5
 8036a72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8036a76:	42bb      	cmp	r3, r7
 8036a78:	da42      	bge.n	8036b00 <__gethex+0x244>
 8036a7a:	9801      	ldr	r0, [sp, #4]
 8036a7c:	4621      	mov	r1, r4
 8036a7e:	f000 fa25 	bl	8036ecc <_Bfree>
 8036a82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8036a84:	2300      	movs	r3, #0
 8036a86:	6013      	str	r3, [r2, #0]
 8036a88:	25a3      	movs	r5, #163	@ 0xa3
 8036a8a:	e793      	b.n	80369b4 <__gethex+0xf8>
 8036a8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8036a90:	2a2e      	cmp	r2, #46	@ 0x2e
 8036a92:	d012      	beq.n	8036aba <__gethex+0x1fe>
 8036a94:	2b20      	cmp	r3, #32
 8036a96:	d104      	bne.n	8036aa2 <__gethex+0x1e6>
 8036a98:	f845 bb04 	str.w	fp, [r5], #4
 8036a9c:	f04f 0b00 	mov.w	fp, #0
 8036aa0:	465b      	mov	r3, fp
 8036aa2:	7830      	ldrb	r0, [r6, #0]
 8036aa4:	9303      	str	r3, [sp, #12]
 8036aa6:	f7ff fef3 	bl	8036890 <__hexdig_fun>
 8036aaa:	9b03      	ldr	r3, [sp, #12]
 8036aac:	f000 000f 	and.w	r0, r0, #15
 8036ab0:	4098      	lsls	r0, r3
 8036ab2:	ea4b 0b00 	orr.w	fp, fp, r0
 8036ab6:	3304      	adds	r3, #4
 8036ab8:	e7ae      	b.n	8036a18 <__gethex+0x15c>
 8036aba:	45b1      	cmp	r9, r6
 8036abc:	d8ea      	bhi.n	8036a94 <__gethex+0x1d8>
 8036abe:	492b      	ldr	r1, [pc, #172]	@ (8036b6c <__gethex+0x2b0>)
 8036ac0:	9303      	str	r3, [sp, #12]
 8036ac2:	2201      	movs	r2, #1
 8036ac4:	4630      	mov	r0, r6
 8036ac6:	f7f5 fed0 	bl	802c86a <strncmp>
 8036aca:	9b03      	ldr	r3, [sp, #12]
 8036acc:	2800      	cmp	r0, #0
 8036ace:	d1e1      	bne.n	8036a94 <__gethex+0x1d8>
 8036ad0:	e7a2      	b.n	8036a18 <__gethex+0x15c>
 8036ad2:	1ea9      	subs	r1, r5, #2
 8036ad4:	4620      	mov	r0, r4
 8036ad6:	f000 fe10 	bl	80376fa <__any_on>
 8036ada:	2800      	cmp	r0, #0
 8036adc:	d0c2      	beq.n	8036a64 <__gethex+0x1a8>
 8036ade:	f04f 0903 	mov.w	r9, #3
 8036ae2:	e7c1      	b.n	8036a68 <__gethex+0x1ac>
 8036ae4:	da09      	bge.n	8036afa <__gethex+0x23e>
 8036ae6:	1b75      	subs	r5, r6, r5
 8036ae8:	4621      	mov	r1, r4
 8036aea:	9801      	ldr	r0, [sp, #4]
 8036aec:	462a      	mov	r2, r5
 8036aee:	f000 fbcb 	bl	8037288 <__lshift>
 8036af2:	1b7f      	subs	r7, r7, r5
 8036af4:	4604      	mov	r4, r0
 8036af6:	f100 0a14 	add.w	sl, r0, #20
 8036afa:	f04f 0900 	mov.w	r9, #0
 8036afe:	e7b8      	b.n	8036a72 <__gethex+0x1b6>
 8036b00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8036b04:	42bd      	cmp	r5, r7
 8036b06:	dd6f      	ble.n	8036be8 <__gethex+0x32c>
 8036b08:	1bed      	subs	r5, r5, r7
 8036b0a:	42ae      	cmp	r6, r5
 8036b0c:	dc34      	bgt.n	8036b78 <__gethex+0x2bc>
 8036b0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8036b12:	2b02      	cmp	r3, #2
 8036b14:	d022      	beq.n	8036b5c <__gethex+0x2a0>
 8036b16:	2b03      	cmp	r3, #3
 8036b18:	d024      	beq.n	8036b64 <__gethex+0x2a8>
 8036b1a:	2b01      	cmp	r3, #1
 8036b1c:	d115      	bne.n	8036b4a <__gethex+0x28e>
 8036b1e:	42ae      	cmp	r6, r5
 8036b20:	d113      	bne.n	8036b4a <__gethex+0x28e>
 8036b22:	2e01      	cmp	r6, #1
 8036b24:	d10b      	bne.n	8036b3e <__gethex+0x282>
 8036b26:	9a02      	ldr	r2, [sp, #8]
 8036b28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8036b2c:	6013      	str	r3, [r2, #0]
 8036b2e:	2301      	movs	r3, #1
 8036b30:	6123      	str	r3, [r4, #16]
 8036b32:	f8ca 3000 	str.w	r3, [sl]
 8036b36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8036b38:	2562      	movs	r5, #98	@ 0x62
 8036b3a:	601c      	str	r4, [r3, #0]
 8036b3c:	e73a      	b.n	80369b4 <__gethex+0xf8>
 8036b3e:	1e71      	subs	r1, r6, #1
 8036b40:	4620      	mov	r0, r4
 8036b42:	f000 fdda 	bl	80376fa <__any_on>
 8036b46:	2800      	cmp	r0, #0
 8036b48:	d1ed      	bne.n	8036b26 <__gethex+0x26a>
 8036b4a:	9801      	ldr	r0, [sp, #4]
 8036b4c:	4621      	mov	r1, r4
 8036b4e:	f000 f9bd 	bl	8036ecc <_Bfree>
 8036b52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8036b54:	2300      	movs	r3, #0
 8036b56:	6013      	str	r3, [r2, #0]
 8036b58:	2550      	movs	r5, #80	@ 0x50
 8036b5a:	e72b      	b.n	80369b4 <__gethex+0xf8>
 8036b5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8036b5e:	2b00      	cmp	r3, #0
 8036b60:	d1f3      	bne.n	8036b4a <__gethex+0x28e>
 8036b62:	e7e0      	b.n	8036b26 <__gethex+0x26a>
 8036b64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8036b66:	2b00      	cmp	r3, #0
 8036b68:	d1dd      	bne.n	8036b26 <__gethex+0x26a>
 8036b6a:	e7ee      	b.n	8036b4a <__gethex+0x28e>
 8036b6c:	0803dcde 	.word	0x0803dcde
 8036b70:	0803dcf5 	.word	0x0803dcf5
 8036b74:	0803dd5e 	.word	0x0803dd5e
 8036b78:	1e6f      	subs	r7, r5, #1
 8036b7a:	f1b9 0f00 	cmp.w	r9, #0
 8036b7e:	d130      	bne.n	8036be2 <__gethex+0x326>
 8036b80:	b127      	cbz	r7, 8036b8c <__gethex+0x2d0>
 8036b82:	4639      	mov	r1, r7
 8036b84:	4620      	mov	r0, r4
 8036b86:	f000 fdb8 	bl	80376fa <__any_on>
 8036b8a:	4681      	mov	r9, r0
 8036b8c:	117a      	asrs	r2, r7, #5
 8036b8e:	2301      	movs	r3, #1
 8036b90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8036b94:	f007 071f 	and.w	r7, r7, #31
 8036b98:	40bb      	lsls	r3, r7
 8036b9a:	4213      	tst	r3, r2
 8036b9c:	4629      	mov	r1, r5
 8036b9e:	4620      	mov	r0, r4
 8036ba0:	bf18      	it	ne
 8036ba2:	f049 0902 	orrne.w	r9, r9, #2
 8036ba6:	f7ff fe21 	bl	80367ec <rshift>
 8036baa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8036bae:	1b76      	subs	r6, r6, r5
 8036bb0:	2502      	movs	r5, #2
 8036bb2:	f1b9 0f00 	cmp.w	r9, #0
 8036bb6:	d047      	beq.n	8036c48 <__gethex+0x38c>
 8036bb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8036bbc:	2b02      	cmp	r3, #2
 8036bbe:	d015      	beq.n	8036bec <__gethex+0x330>
 8036bc0:	2b03      	cmp	r3, #3
 8036bc2:	d017      	beq.n	8036bf4 <__gethex+0x338>
 8036bc4:	2b01      	cmp	r3, #1
 8036bc6:	d109      	bne.n	8036bdc <__gethex+0x320>
 8036bc8:	f019 0f02 	tst.w	r9, #2
 8036bcc:	d006      	beq.n	8036bdc <__gethex+0x320>
 8036bce:	f8da 3000 	ldr.w	r3, [sl]
 8036bd2:	ea49 0903 	orr.w	r9, r9, r3
 8036bd6:	f019 0f01 	tst.w	r9, #1
 8036bda:	d10e      	bne.n	8036bfa <__gethex+0x33e>
 8036bdc:	f045 0510 	orr.w	r5, r5, #16
 8036be0:	e032      	b.n	8036c48 <__gethex+0x38c>
 8036be2:	f04f 0901 	mov.w	r9, #1
 8036be6:	e7d1      	b.n	8036b8c <__gethex+0x2d0>
 8036be8:	2501      	movs	r5, #1
 8036bea:	e7e2      	b.n	8036bb2 <__gethex+0x2f6>
 8036bec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8036bee:	f1c3 0301 	rsb	r3, r3, #1
 8036bf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8036bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8036bf6:	2b00      	cmp	r3, #0
 8036bf8:	d0f0      	beq.n	8036bdc <__gethex+0x320>
 8036bfa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8036bfe:	f104 0314 	add.w	r3, r4, #20
 8036c02:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8036c06:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8036c0a:	f04f 0c00 	mov.w	ip, #0
 8036c0e:	4618      	mov	r0, r3
 8036c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8036c14:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8036c18:	d01b      	beq.n	8036c52 <__gethex+0x396>
 8036c1a:	3201      	adds	r2, #1
 8036c1c:	6002      	str	r2, [r0, #0]
 8036c1e:	2d02      	cmp	r5, #2
 8036c20:	f104 0314 	add.w	r3, r4, #20
 8036c24:	d13c      	bne.n	8036ca0 <__gethex+0x3e4>
 8036c26:	f8d8 2000 	ldr.w	r2, [r8]
 8036c2a:	3a01      	subs	r2, #1
 8036c2c:	42b2      	cmp	r2, r6
 8036c2e:	d109      	bne.n	8036c44 <__gethex+0x388>
 8036c30:	1171      	asrs	r1, r6, #5
 8036c32:	2201      	movs	r2, #1
 8036c34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8036c38:	f006 061f 	and.w	r6, r6, #31
 8036c3c:	fa02 f606 	lsl.w	r6, r2, r6
 8036c40:	421e      	tst	r6, r3
 8036c42:	d13a      	bne.n	8036cba <__gethex+0x3fe>
 8036c44:	f045 0520 	orr.w	r5, r5, #32
 8036c48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8036c4a:	601c      	str	r4, [r3, #0]
 8036c4c:	9b02      	ldr	r3, [sp, #8]
 8036c4e:	601f      	str	r7, [r3, #0]
 8036c50:	e6b0      	b.n	80369b4 <__gethex+0xf8>
 8036c52:	4299      	cmp	r1, r3
 8036c54:	f843 cc04 	str.w	ip, [r3, #-4]
 8036c58:	d8d9      	bhi.n	8036c0e <__gethex+0x352>
 8036c5a:	68a3      	ldr	r3, [r4, #8]
 8036c5c:	459b      	cmp	fp, r3
 8036c5e:	db17      	blt.n	8036c90 <__gethex+0x3d4>
 8036c60:	6861      	ldr	r1, [r4, #4]
 8036c62:	9801      	ldr	r0, [sp, #4]
 8036c64:	3101      	adds	r1, #1
 8036c66:	f000 f90c 	bl	8036e82 <_Balloc>
 8036c6a:	4681      	mov	r9, r0
 8036c6c:	b918      	cbnz	r0, 8036c76 <__gethex+0x3ba>
 8036c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8036cd8 <__gethex+0x41c>)
 8036c70:	4602      	mov	r2, r0
 8036c72:	2184      	movs	r1, #132	@ 0x84
 8036c74:	e6c5      	b.n	8036a02 <__gethex+0x146>
 8036c76:	6922      	ldr	r2, [r4, #16]
 8036c78:	3202      	adds	r2, #2
 8036c7a:	f104 010c 	add.w	r1, r4, #12
 8036c7e:	0092      	lsls	r2, r2, #2
 8036c80:	300c      	adds	r0, #12
 8036c82:	f7f7 fb39 	bl	802e2f8 <memcpy>
 8036c86:	4621      	mov	r1, r4
 8036c88:	9801      	ldr	r0, [sp, #4]
 8036c8a:	f000 f91f 	bl	8036ecc <_Bfree>
 8036c8e:	464c      	mov	r4, r9
 8036c90:	6923      	ldr	r3, [r4, #16]
 8036c92:	1c5a      	adds	r2, r3, #1
 8036c94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8036c98:	6122      	str	r2, [r4, #16]
 8036c9a:	2201      	movs	r2, #1
 8036c9c:	615a      	str	r2, [r3, #20]
 8036c9e:	e7be      	b.n	8036c1e <__gethex+0x362>
 8036ca0:	6922      	ldr	r2, [r4, #16]
 8036ca2:	455a      	cmp	r2, fp
 8036ca4:	dd0b      	ble.n	8036cbe <__gethex+0x402>
 8036ca6:	2101      	movs	r1, #1
 8036ca8:	4620      	mov	r0, r4
 8036caa:	f7ff fd9f 	bl	80367ec <rshift>
 8036cae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8036cb2:	3701      	adds	r7, #1
 8036cb4:	42bb      	cmp	r3, r7
 8036cb6:	f6ff aee0 	blt.w	8036a7a <__gethex+0x1be>
 8036cba:	2501      	movs	r5, #1
 8036cbc:	e7c2      	b.n	8036c44 <__gethex+0x388>
 8036cbe:	f016 061f 	ands.w	r6, r6, #31
 8036cc2:	d0fa      	beq.n	8036cba <__gethex+0x3fe>
 8036cc4:	4453      	add	r3, sl
 8036cc6:	f1c6 0620 	rsb	r6, r6, #32
 8036cca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8036cce:	f000 f997 	bl	8037000 <__hi0bits>
 8036cd2:	42b0      	cmp	r0, r6
 8036cd4:	dbe7      	blt.n	8036ca6 <__gethex+0x3ea>
 8036cd6:	e7f0      	b.n	8036cba <__gethex+0x3fe>
 8036cd8:	0803dcf5 	.word	0x0803dcf5

08036cdc <L_shift>:
 8036cdc:	f1c2 0208 	rsb	r2, r2, #8
 8036ce0:	0092      	lsls	r2, r2, #2
 8036ce2:	b570      	push	{r4, r5, r6, lr}
 8036ce4:	f1c2 0620 	rsb	r6, r2, #32
 8036ce8:	6843      	ldr	r3, [r0, #4]
 8036cea:	6804      	ldr	r4, [r0, #0]
 8036cec:	fa03 f506 	lsl.w	r5, r3, r6
 8036cf0:	432c      	orrs	r4, r5
 8036cf2:	40d3      	lsrs	r3, r2
 8036cf4:	6004      	str	r4, [r0, #0]
 8036cf6:	f840 3f04 	str.w	r3, [r0, #4]!
 8036cfa:	4288      	cmp	r0, r1
 8036cfc:	d3f4      	bcc.n	8036ce8 <L_shift+0xc>
 8036cfe:	bd70      	pop	{r4, r5, r6, pc}

08036d00 <__match>:
 8036d00:	b530      	push	{r4, r5, lr}
 8036d02:	6803      	ldr	r3, [r0, #0]
 8036d04:	3301      	adds	r3, #1
 8036d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8036d0a:	b914      	cbnz	r4, 8036d12 <__match+0x12>
 8036d0c:	6003      	str	r3, [r0, #0]
 8036d0e:	2001      	movs	r0, #1
 8036d10:	bd30      	pop	{r4, r5, pc}
 8036d12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8036d16:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8036d1a:	2d19      	cmp	r5, #25
 8036d1c:	bf98      	it	ls
 8036d1e:	3220      	addls	r2, #32
 8036d20:	42a2      	cmp	r2, r4
 8036d22:	d0f0      	beq.n	8036d06 <__match+0x6>
 8036d24:	2000      	movs	r0, #0
 8036d26:	e7f3      	b.n	8036d10 <__match+0x10>

08036d28 <__hexnan>:
 8036d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8036d2c:	680b      	ldr	r3, [r1, #0]
 8036d2e:	6801      	ldr	r1, [r0, #0]
 8036d30:	115e      	asrs	r6, r3, #5
 8036d32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8036d36:	f013 031f 	ands.w	r3, r3, #31
 8036d3a:	b087      	sub	sp, #28
 8036d3c:	bf18      	it	ne
 8036d3e:	3604      	addne	r6, #4
 8036d40:	2500      	movs	r5, #0
 8036d42:	1f37      	subs	r7, r6, #4
 8036d44:	4682      	mov	sl, r0
 8036d46:	4690      	mov	r8, r2
 8036d48:	9301      	str	r3, [sp, #4]
 8036d4a:	f846 5c04 	str.w	r5, [r6, #-4]
 8036d4e:	46b9      	mov	r9, r7
 8036d50:	463c      	mov	r4, r7
 8036d52:	9502      	str	r5, [sp, #8]
 8036d54:	46ab      	mov	fp, r5
 8036d56:	784a      	ldrb	r2, [r1, #1]
 8036d58:	1c4b      	adds	r3, r1, #1
 8036d5a:	9303      	str	r3, [sp, #12]
 8036d5c:	b342      	cbz	r2, 8036db0 <__hexnan+0x88>
 8036d5e:	4610      	mov	r0, r2
 8036d60:	9105      	str	r1, [sp, #20]
 8036d62:	9204      	str	r2, [sp, #16]
 8036d64:	f7ff fd94 	bl	8036890 <__hexdig_fun>
 8036d68:	2800      	cmp	r0, #0
 8036d6a:	d151      	bne.n	8036e10 <__hexnan+0xe8>
 8036d6c:	9a04      	ldr	r2, [sp, #16]
 8036d6e:	9905      	ldr	r1, [sp, #20]
 8036d70:	2a20      	cmp	r2, #32
 8036d72:	d818      	bhi.n	8036da6 <__hexnan+0x7e>
 8036d74:	9b02      	ldr	r3, [sp, #8]
 8036d76:	459b      	cmp	fp, r3
 8036d78:	dd13      	ble.n	8036da2 <__hexnan+0x7a>
 8036d7a:	454c      	cmp	r4, r9
 8036d7c:	d206      	bcs.n	8036d8c <__hexnan+0x64>
 8036d7e:	2d07      	cmp	r5, #7
 8036d80:	dc04      	bgt.n	8036d8c <__hexnan+0x64>
 8036d82:	462a      	mov	r2, r5
 8036d84:	4649      	mov	r1, r9
 8036d86:	4620      	mov	r0, r4
 8036d88:	f7ff ffa8 	bl	8036cdc <L_shift>
 8036d8c:	4544      	cmp	r4, r8
 8036d8e:	d952      	bls.n	8036e36 <__hexnan+0x10e>
 8036d90:	2300      	movs	r3, #0
 8036d92:	f1a4 0904 	sub.w	r9, r4, #4
 8036d96:	f844 3c04 	str.w	r3, [r4, #-4]
 8036d9a:	f8cd b008 	str.w	fp, [sp, #8]
 8036d9e:	464c      	mov	r4, r9
 8036da0:	461d      	mov	r5, r3
 8036da2:	9903      	ldr	r1, [sp, #12]
 8036da4:	e7d7      	b.n	8036d56 <__hexnan+0x2e>
 8036da6:	2a29      	cmp	r2, #41	@ 0x29
 8036da8:	d157      	bne.n	8036e5a <__hexnan+0x132>
 8036daa:	3102      	adds	r1, #2
 8036dac:	f8ca 1000 	str.w	r1, [sl]
 8036db0:	f1bb 0f00 	cmp.w	fp, #0
 8036db4:	d051      	beq.n	8036e5a <__hexnan+0x132>
 8036db6:	454c      	cmp	r4, r9
 8036db8:	d206      	bcs.n	8036dc8 <__hexnan+0xa0>
 8036dba:	2d07      	cmp	r5, #7
 8036dbc:	dc04      	bgt.n	8036dc8 <__hexnan+0xa0>
 8036dbe:	462a      	mov	r2, r5
 8036dc0:	4649      	mov	r1, r9
 8036dc2:	4620      	mov	r0, r4
 8036dc4:	f7ff ff8a 	bl	8036cdc <L_shift>
 8036dc8:	4544      	cmp	r4, r8
 8036dca:	d936      	bls.n	8036e3a <__hexnan+0x112>
 8036dcc:	f1a8 0204 	sub.w	r2, r8, #4
 8036dd0:	4623      	mov	r3, r4
 8036dd2:	f853 1b04 	ldr.w	r1, [r3], #4
 8036dd6:	f842 1f04 	str.w	r1, [r2, #4]!
 8036dda:	429f      	cmp	r7, r3
 8036ddc:	d2f9      	bcs.n	8036dd2 <__hexnan+0xaa>
 8036dde:	1b3b      	subs	r3, r7, r4
 8036de0:	f023 0303 	bic.w	r3, r3, #3
 8036de4:	3304      	adds	r3, #4
 8036de6:	3401      	adds	r4, #1
 8036de8:	3e03      	subs	r6, #3
 8036dea:	42b4      	cmp	r4, r6
 8036dec:	bf88      	it	hi
 8036dee:	2304      	movhi	r3, #4
 8036df0:	4443      	add	r3, r8
 8036df2:	2200      	movs	r2, #0
 8036df4:	f843 2b04 	str.w	r2, [r3], #4
 8036df8:	429f      	cmp	r7, r3
 8036dfa:	d2fb      	bcs.n	8036df4 <__hexnan+0xcc>
 8036dfc:	683b      	ldr	r3, [r7, #0]
 8036dfe:	b91b      	cbnz	r3, 8036e08 <__hexnan+0xe0>
 8036e00:	4547      	cmp	r7, r8
 8036e02:	d128      	bne.n	8036e56 <__hexnan+0x12e>
 8036e04:	2301      	movs	r3, #1
 8036e06:	603b      	str	r3, [r7, #0]
 8036e08:	2005      	movs	r0, #5
 8036e0a:	b007      	add	sp, #28
 8036e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8036e10:	3501      	adds	r5, #1
 8036e12:	2d08      	cmp	r5, #8
 8036e14:	f10b 0b01 	add.w	fp, fp, #1
 8036e18:	dd06      	ble.n	8036e28 <__hexnan+0x100>
 8036e1a:	4544      	cmp	r4, r8
 8036e1c:	d9c1      	bls.n	8036da2 <__hexnan+0x7a>
 8036e1e:	2300      	movs	r3, #0
 8036e20:	f844 3c04 	str.w	r3, [r4, #-4]
 8036e24:	2501      	movs	r5, #1
 8036e26:	3c04      	subs	r4, #4
 8036e28:	6822      	ldr	r2, [r4, #0]
 8036e2a:	f000 000f 	and.w	r0, r0, #15
 8036e2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8036e32:	6020      	str	r0, [r4, #0]
 8036e34:	e7b5      	b.n	8036da2 <__hexnan+0x7a>
 8036e36:	2508      	movs	r5, #8
 8036e38:	e7b3      	b.n	8036da2 <__hexnan+0x7a>
 8036e3a:	9b01      	ldr	r3, [sp, #4]
 8036e3c:	2b00      	cmp	r3, #0
 8036e3e:	d0dd      	beq.n	8036dfc <__hexnan+0xd4>
 8036e40:	f1c3 0320 	rsb	r3, r3, #32
 8036e44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8036e48:	40da      	lsrs	r2, r3
 8036e4a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8036e4e:	4013      	ands	r3, r2
 8036e50:	f846 3c04 	str.w	r3, [r6, #-4]
 8036e54:	e7d2      	b.n	8036dfc <__hexnan+0xd4>
 8036e56:	3f04      	subs	r7, #4
 8036e58:	e7d0      	b.n	8036dfc <__hexnan+0xd4>
 8036e5a:	2004      	movs	r0, #4
 8036e5c:	e7d5      	b.n	8036e0a <__hexnan+0xe2>

08036e5e <__ascii_mbtowc>:
 8036e5e:	b082      	sub	sp, #8
 8036e60:	b901      	cbnz	r1, 8036e64 <__ascii_mbtowc+0x6>
 8036e62:	a901      	add	r1, sp, #4
 8036e64:	b142      	cbz	r2, 8036e78 <__ascii_mbtowc+0x1a>
 8036e66:	b14b      	cbz	r3, 8036e7c <__ascii_mbtowc+0x1e>
 8036e68:	7813      	ldrb	r3, [r2, #0]
 8036e6a:	600b      	str	r3, [r1, #0]
 8036e6c:	7812      	ldrb	r2, [r2, #0]
 8036e6e:	1e10      	subs	r0, r2, #0
 8036e70:	bf18      	it	ne
 8036e72:	2001      	movne	r0, #1
 8036e74:	b002      	add	sp, #8
 8036e76:	4770      	bx	lr
 8036e78:	4610      	mov	r0, r2
 8036e7a:	e7fb      	b.n	8036e74 <__ascii_mbtowc+0x16>
 8036e7c:	f06f 0001 	mvn.w	r0, #1
 8036e80:	e7f8      	b.n	8036e74 <__ascii_mbtowc+0x16>

08036e82 <_Balloc>:
 8036e82:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8036e84:	b570      	push	{r4, r5, r6, lr}
 8036e86:	4605      	mov	r5, r0
 8036e88:	460c      	mov	r4, r1
 8036e8a:	b17b      	cbz	r3, 8036eac <_Balloc+0x2a>
 8036e8c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8036e8e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8036e92:	b9a0      	cbnz	r0, 8036ebe <_Balloc+0x3c>
 8036e94:	2101      	movs	r1, #1
 8036e96:	fa01 f604 	lsl.w	r6, r1, r4
 8036e9a:	1d72      	adds	r2, r6, #5
 8036e9c:	0092      	lsls	r2, r2, #2
 8036e9e:	4628      	mov	r0, r5
 8036ea0:	f000 fcb4 	bl	803780c <_calloc_r>
 8036ea4:	b148      	cbz	r0, 8036eba <_Balloc+0x38>
 8036ea6:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8036eaa:	e00b      	b.n	8036ec4 <_Balloc+0x42>
 8036eac:	2221      	movs	r2, #33	@ 0x21
 8036eae:	2104      	movs	r1, #4
 8036eb0:	f000 fcac 	bl	803780c <_calloc_r>
 8036eb4:	6468      	str	r0, [r5, #68]	@ 0x44
 8036eb6:	2800      	cmp	r0, #0
 8036eb8:	d1e8      	bne.n	8036e8c <_Balloc+0xa>
 8036eba:	2000      	movs	r0, #0
 8036ebc:	bd70      	pop	{r4, r5, r6, pc}
 8036ebe:	6802      	ldr	r2, [r0, #0]
 8036ec0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8036ec4:	2300      	movs	r3, #0
 8036ec6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8036eca:	e7f7      	b.n	8036ebc <_Balloc+0x3a>

08036ecc <_Bfree>:
 8036ecc:	b131      	cbz	r1, 8036edc <_Bfree+0x10>
 8036ece:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8036ed0:	684a      	ldr	r2, [r1, #4]
 8036ed2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8036ed6:	6008      	str	r0, [r1, #0]
 8036ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8036edc:	4770      	bx	lr
	...

08036ee0 <__multadd>:
 8036ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8036ee4:	690d      	ldr	r5, [r1, #16]
 8036ee6:	4607      	mov	r7, r0
 8036ee8:	460c      	mov	r4, r1
 8036eea:	461e      	mov	r6, r3
 8036eec:	f101 0c14 	add.w	ip, r1, #20
 8036ef0:	2000      	movs	r0, #0
 8036ef2:	f8dc 3000 	ldr.w	r3, [ip]
 8036ef6:	b299      	uxth	r1, r3
 8036ef8:	fb02 6101 	mla	r1, r2, r1, r6
 8036efc:	0c1e      	lsrs	r6, r3, #16
 8036efe:	0c0b      	lsrs	r3, r1, #16
 8036f00:	fb02 3306 	mla	r3, r2, r6, r3
 8036f04:	b289      	uxth	r1, r1
 8036f06:	3001      	adds	r0, #1
 8036f08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8036f0c:	4285      	cmp	r5, r0
 8036f0e:	f84c 1b04 	str.w	r1, [ip], #4
 8036f12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8036f16:	dcec      	bgt.n	8036ef2 <__multadd+0x12>
 8036f18:	b30e      	cbz	r6, 8036f5e <__multadd+0x7e>
 8036f1a:	68a3      	ldr	r3, [r4, #8]
 8036f1c:	42ab      	cmp	r3, r5
 8036f1e:	dc19      	bgt.n	8036f54 <__multadd+0x74>
 8036f20:	6861      	ldr	r1, [r4, #4]
 8036f22:	4638      	mov	r0, r7
 8036f24:	3101      	adds	r1, #1
 8036f26:	f7ff ffac 	bl	8036e82 <_Balloc>
 8036f2a:	4680      	mov	r8, r0
 8036f2c:	b928      	cbnz	r0, 8036f3a <__multadd+0x5a>
 8036f2e:	4602      	mov	r2, r0
 8036f30:	4b0c      	ldr	r3, [pc, #48]	@ (8036f64 <__multadd+0x84>)
 8036f32:	480d      	ldr	r0, [pc, #52]	@ (8036f68 <__multadd+0x88>)
 8036f34:	21ba      	movs	r1, #186	@ 0xba
 8036f36:	f7f4 fb69 	bl	802b60c <__assert_func>
 8036f3a:	6922      	ldr	r2, [r4, #16]
 8036f3c:	3202      	adds	r2, #2
 8036f3e:	f104 010c 	add.w	r1, r4, #12
 8036f42:	0092      	lsls	r2, r2, #2
 8036f44:	300c      	adds	r0, #12
 8036f46:	f7f7 f9d7 	bl	802e2f8 <memcpy>
 8036f4a:	4621      	mov	r1, r4
 8036f4c:	4638      	mov	r0, r7
 8036f4e:	f7ff ffbd 	bl	8036ecc <_Bfree>
 8036f52:	4644      	mov	r4, r8
 8036f54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8036f58:	3501      	adds	r5, #1
 8036f5a:	615e      	str	r6, [r3, #20]
 8036f5c:	6125      	str	r5, [r4, #16]
 8036f5e:	4620      	mov	r0, r4
 8036f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8036f64:	0803dcf5 	.word	0x0803dcf5
 8036f68:	0803ddbe 	.word	0x0803ddbe

08036f6c <__s2b>:
 8036f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8036f70:	460c      	mov	r4, r1
 8036f72:	4615      	mov	r5, r2
 8036f74:	461f      	mov	r7, r3
 8036f76:	2209      	movs	r2, #9
 8036f78:	3308      	adds	r3, #8
 8036f7a:	4606      	mov	r6, r0
 8036f7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8036f80:	2100      	movs	r1, #0
 8036f82:	2201      	movs	r2, #1
 8036f84:	429a      	cmp	r2, r3
 8036f86:	db09      	blt.n	8036f9c <__s2b+0x30>
 8036f88:	4630      	mov	r0, r6
 8036f8a:	f7ff ff7a 	bl	8036e82 <_Balloc>
 8036f8e:	b940      	cbnz	r0, 8036fa2 <__s2b+0x36>
 8036f90:	4602      	mov	r2, r0
 8036f92:	4b19      	ldr	r3, [pc, #100]	@ (8036ff8 <__s2b+0x8c>)
 8036f94:	4819      	ldr	r0, [pc, #100]	@ (8036ffc <__s2b+0x90>)
 8036f96:	21d3      	movs	r1, #211	@ 0xd3
 8036f98:	f7f4 fb38 	bl	802b60c <__assert_func>
 8036f9c:	0052      	lsls	r2, r2, #1
 8036f9e:	3101      	adds	r1, #1
 8036fa0:	e7f0      	b.n	8036f84 <__s2b+0x18>
 8036fa2:	9b08      	ldr	r3, [sp, #32]
 8036fa4:	6143      	str	r3, [r0, #20]
 8036fa6:	2d09      	cmp	r5, #9
 8036fa8:	f04f 0301 	mov.w	r3, #1
 8036fac:	6103      	str	r3, [r0, #16]
 8036fae:	dd16      	ble.n	8036fde <__s2b+0x72>
 8036fb0:	f104 0909 	add.w	r9, r4, #9
 8036fb4:	46c8      	mov	r8, r9
 8036fb6:	442c      	add	r4, r5
 8036fb8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8036fbc:	4601      	mov	r1, r0
 8036fbe:	3b30      	subs	r3, #48	@ 0x30
 8036fc0:	220a      	movs	r2, #10
 8036fc2:	4630      	mov	r0, r6
 8036fc4:	f7ff ff8c 	bl	8036ee0 <__multadd>
 8036fc8:	45a0      	cmp	r8, r4
 8036fca:	d1f5      	bne.n	8036fb8 <__s2b+0x4c>
 8036fcc:	f1a5 0408 	sub.w	r4, r5, #8
 8036fd0:	444c      	add	r4, r9
 8036fd2:	1b2d      	subs	r5, r5, r4
 8036fd4:	1963      	adds	r3, r4, r5
 8036fd6:	42bb      	cmp	r3, r7
 8036fd8:	db04      	blt.n	8036fe4 <__s2b+0x78>
 8036fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8036fde:	340a      	adds	r4, #10
 8036fe0:	2509      	movs	r5, #9
 8036fe2:	e7f6      	b.n	8036fd2 <__s2b+0x66>
 8036fe4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8036fe8:	4601      	mov	r1, r0
 8036fea:	3b30      	subs	r3, #48	@ 0x30
 8036fec:	220a      	movs	r2, #10
 8036fee:	4630      	mov	r0, r6
 8036ff0:	f7ff ff76 	bl	8036ee0 <__multadd>
 8036ff4:	e7ee      	b.n	8036fd4 <__s2b+0x68>
 8036ff6:	bf00      	nop
 8036ff8:	0803dcf5 	.word	0x0803dcf5
 8036ffc:	0803ddbe 	.word	0x0803ddbe

08037000 <__hi0bits>:
 8037000:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8037004:	4603      	mov	r3, r0
 8037006:	bf36      	itet	cc
 8037008:	0403      	lslcc	r3, r0, #16
 803700a:	2000      	movcs	r0, #0
 803700c:	2010      	movcc	r0, #16
 803700e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8037012:	bf3c      	itt	cc
 8037014:	021b      	lslcc	r3, r3, #8
 8037016:	3008      	addcc	r0, #8
 8037018:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 803701c:	bf3c      	itt	cc
 803701e:	011b      	lslcc	r3, r3, #4
 8037020:	3004      	addcc	r0, #4
 8037022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8037026:	bf3c      	itt	cc
 8037028:	009b      	lslcc	r3, r3, #2
 803702a:	3002      	addcc	r0, #2
 803702c:	2b00      	cmp	r3, #0
 803702e:	db05      	blt.n	803703c <__hi0bits+0x3c>
 8037030:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8037034:	f100 0001 	add.w	r0, r0, #1
 8037038:	bf08      	it	eq
 803703a:	2020      	moveq	r0, #32
 803703c:	4770      	bx	lr

0803703e <__lo0bits>:
 803703e:	6803      	ldr	r3, [r0, #0]
 8037040:	4602      	mov	r2, r0
 8037042:	f013 0007 	ands.w	r0, r3, #7
 8037046:	d00b      	beq.n	8037060 <__lo0bits+0x22>
 8037048:	07d9      	lsls	r1, r3, #31
 803704a:	d421      	bmi.n	8037090 <__lo0bits+0x52>
 803704c:	0798      	lsls	r0, r3, #30
 803704e:	bf49      	itett	mi
 8037050:	085b      	lsrmi	r3, r3, #1
 8037052:	089b      	lsrpl	r3, r3, #2
 8037054:	2001      	movmi	r0, #1
 8037056:	6013      	strmi	r3, [r2, #0]
 8037058:	bf5c      	itt	pl
 803705a:	6013      	strpl	r3, [r2, #0]
 803705c:	2002      	movpl	r0, #2
 803705e:	4770      	bx	lr
 8037060:	b299      	uxth	r1, r3
 8037062:	b909      	cbnz	r1, 8037068 <__lo0bits+0x2a>
 8037064:	0c1b      	lsrs	r3, r3, #16
 8037066:	2010      	movs	r0, #16
 8037068:	b2d9      	uxtb	r1, r3
 803706a:	b909      	cbnz	r1, 8037070 <__lo0bits+0x32>
 803706c:	3008      	adds	r0, #8
 803706e:	0a1b      	lsrs	r3, r3, #8
 8037070:	0719      	lsls	r1, r3, #28
 8037072:	bf04      	itt	eq
 8037074:	091b      	lsreq	r3, r3, #4
 8037076:	3004      	addeq	r0, #4
 8037078:	0799      	lsls	r1, r3, #30
 803707a:	bf04      	itt	eq
 803707c:	089b      	lsreq	r3, r3, #2
 803707e:	3002      	addeq	r0, #2
 8037080:	07d9      	lsls	r1, r3, #31
 8037082:	d403      	bmi.n	803708c <__lo0bits+0x4e>
 8037084:	085b      	lsrs	r3, r3, #1
 8037086:	f100 0001 	add.w	r0, r0, #1
 803708a:	d003      	beq.n	8037094 <__lo0bits+0x56>
 803708c:	6013      	str	r3, [r2, #0]
 803708e:	4770      	bx	lr
 8037090:	2000      	movs	r0, #0
 8037092:	4770      	bx	lr
 8037094:	2020      	movs	r0, #32
 8037096:	4770      	bx	lr

08037098 <__i2b>:
 8037098:	b510      	push	{r4, lr}
 803709a:	460c      	mov	r4, r1
 803709c:	2101      	movs	r1, #1
 803709e:	f7ff fef0 	bl	8036e82 <_Balloc>
 80370a2:	4602      	mov	r2, r0
 80370a4:	b928      	cbnz	r0, 80370b2 <__i2b+0x1a>
 80370a6:	4b05      	ldr	r3, [pc, #20]	@ (80370bc <__i2b+0x24>)
 80370a8:	4805      	ldr	r0, [pc, #20]	@ (80370c0 <__i2b+0x28>)
 80370aa:	f240 1145 	movw	r1, #325	@ 0x145
 80370ae:	f7f4 faad 	bl	802b60c <__assert_func>
 80370b2:	2301      	movs	r3, #1
 80370b4:	6144      	str	r4, [r0, #20]
 80370b6:	6103      	str	r3, [r0, #16]
 80370b8:	bd10      	pop	{r4, pc}
 80370ba:	bf00      	nop
 80370bc:	0803dcf5 	.word	0x0803dcf5
 80370c0:	0803ddbe 	.word	0x0803ddbe

080370c4 <__multiply>:
 80370c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80370c8:	4617      	mov	r7, r2
 80370ca:	690a      	ldr	r2, [r1, #16]
 80370cc:	693b      	ldr	r3, [r7, #16]
 80370ce:	429a      	cmp	r2, r3
 80370d0:	bfa8      	it	ge
 80370d2:	463b      	movge	r3, r7
 80370d4:	4689      	mov	r9, r1
 80370d6:	bfa4      	itt	ge
 80370d8:	460f      	movge	r7, r1
 80370da:	4699      	movge	r9, r3
 80370dc:	693d      	ldr	r5, [r7, #16]
 80370de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80370e2:	68bb      	ldr	r3, [r7, #8]
 80370e4:	6879      	ldr	r1, [r7, #4]
 80370e6:	eb05 060a 	add.w	r6, r5, sl
 80370ea:	42b3      	cmp	r3, r6
 80370ec:	b085      	sub	sp, #20
 80370ee:	bfb8      	it	lt
 80370f0:	3101      	addlt	r1, #1
 80370f2:	f7ff fec6 	bl	8036e82 <_Balloc>
 80370f6:	b930      	cbnz	r0, 8037106 <__multiply+0x42>
 80370f8:	4602      	mov	r2, r0
 80370fa:	4b41      	ldr	r3, [pc, #260]	@ (8037200 <__multiply+0x13c>)
 80370fc:	4841      	ldr	r0, [pc, #260]	@ (8037204 <__multiply+0x140>)
 80370fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8037102:	f7f4 fa83 	bl	802b60c <__assert_func>
 8037106:	f100 0414 	add.w	r4, r0, #20
 803710a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 803710e:	4623      	mov	r3, r4
 8037110:	2200      	movs	r2, #0
 8037112:	4573      	cmp	r3, lr
 8037114:	d320      	bcc.n	8037158 <__multiply+0x94>
 8037116:	f107 0814 	add.w	r8, r7, #20
 803711a:	f109 0114 	add.w	r1, r9, #20
 803711e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8037122:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8037126:	9302      	str	r3, [sp, #8]
 8037128:	1beb      	subs	r3, r5, r7
 803712a:	3b15      	subs	r3, #21
 803712c:	f023 0303 	bic.w	r3, r3, #3
 8037130:	3304      	adds	r3, #4
 8037132:	3715      	adds	r7, #21
 8037134:	42bd      	cmp	r5, r7
 8037136:	bf38      	it	cc
 8037138:	2304      	movcc	r3, #4
 803713a:	9301      	str	r3, [sp, #4]
 803713c:	9b02      	ldr	r3, [sp, #8]
 803713e:	9103      	str	r1, [sp, #12]
 8037140:	428b      	cmp	r3, r1
 8037142:	d80c      	bhi.n	803715e <__multiply+0x9a>
 8037144:	2e00      	cmp	r6, #0
 8037146:	dd03      	ble.n	8037150 <__multiply+0x8c>
 8037148:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 803714c:	2b00      	cmp	r3, #0
 803714e:	d055      	beq.n	80371fc <__multiply+0x138>
 8037150:	6106      	str	r6, [r0, #16]
 8037152:	b005      	add	sp, #20
 8037154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8037158:	f843 2b04 	str.w	r2, [r3], #4
 803715c:	e7d9      	b.n	8037112 <__multiply+0x4e>
 803715e:	f8b1 a000 	ldrh.w	sl, [r1]
 8037162:	f1ba 0f00 	cmp.w	sl, #0
 8037166:	d01f      	beq.n	80371a8 <__multiply+0xe4>
 8037168:	46c4      	mov	ip, r8
 803716a:	46a1      	mov	r9, r4
 803716c:	2700      	movs	r7, #0
 803716e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8037172:	f8d9 3000 	ldr.w	r3, [r9]
 8037176:	fa1f fb82 	uxth.w	fp, r2
 803717a:	b29b      	uxth	r3, r3
 803717c:	fb0a 330b 	mla	r3, sl, fp, r3
 8037180:	443b      	add	r3, r7
 8037182:	f8d9 7000 	ldr.w	r7, [r9]
 8037186:	0c12      	lsrs	r2, r2, #16
 8037188:	0c3f      	lsrs	r7, r7, #16
 803718a:	fb0a 7202 	mla	r2, sl, r2, r7
 803718e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8037192:	b29b      	uxth	r3, r3
 8037194:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8037198:	4565      	cmp	r5, ip
 803719a:	f849 3b04 	str.w	r3, [r9], #4
 803719e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80371a2:	d8e4      	bhi.n	803716e <__multiply+0xaa>
 80371a4:	9b01      	ldr	r3, [sp, #4]
 80371a6:	50e7      	str	r7, [r4, r3]
 80371a8:	9b03      	ldr	r3, [sp, #12]
 80371aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80371ae:	3104      	adds	r1, #4
 80371b0:	f1b9 0f00 	cmp.w	r9, #0
 80371b4:	d020      	beq.n	80371f8 <__multiply+0x134>
 80371b6:	6823      	ldr	r3, [r4, #0]
 80371b8:	4647      	mov	r7, r8
 80371ba:	46a4      	mov	ip, r4
 80371bc:	f04f 0a00 	mov.w	sl, #0
 80371c0:	f8b7 b000 	ldrh.w	fp, [r7]
 80371c4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80371c8:	fb09 220b 	mla	r2, r9, fp, r2
 80371cc:	4452      	add	r2, sl
 80371ce:	b29b      	uxth	r3, r3
 80371d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80371d4:	f84c 3b04 	str.w	r3, [ip], #4
 80371d8:	f857 3b04 	ldr.w	r3, [r7], #4
 80371dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80371e0:	f8bc 3000 	ldrh.w	r3, [ip]
 80371e4:	fb09 330a 	mla	r3, r9, sl, r3
 80371e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80371ec:	42bd      	cmp	r5, r7
 80371ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80371f2:	d8e5      	bhi.n	80371c0 <__multiply+0xfc>
 80371f4:	9a01      	ldr	r2, [sp, #4]
 80371f6:	50a3      	str	r3, [r4, r2]
 80371f8:	3404      	adds	r4, #4
 80371fa:	e79f      	b.n	803713c <__multiply+0x78>
 80371fc:	3e01      	subs	r6, #1
 80371fe:	e7a1      	b.n	8037144 <__multiply+0x80>
 8037200:	0803dcf5 	.word	0x0803dcf5
 8037204:	0803ddbe 	.word	0x0803ddbe

08037208 <__pow5mult>:
 8037208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803720c:	4615      	mov	r5, r2
 803720e:	f012 0203 	ands.w	r2, r2, #3
 8037212:	4607      	mov	r7, r0
 8037214:	460e      	mov	r6, r1
 8037216:	d007      	beq.n	8037228 <__pow5mult+0x20>
 8037218:	4c1a      	ldr	r4, [pc, #104]	@ (8037284 <__pow5mult+0x7c>)
 803721a:	3a01      	subs	r2, #1
 803721c:	2300      	movs	r3, #0
 803721e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8037222:	f7ff fe5d 	bl	8036ee0 <__multadd>
 8037226:	4606      	mov	r6, r0
 8037228:	10ad      	asrs	r5, r5, #2
 803722a:	d027      	beq.n	803727c <__pow5mult+0x74>
 803722c:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 803722e:	b944      	cbnz	r4, 8037242 <__pow5mult+0x3a>
 8037230:	f240 2171 	movw	r1, #625	@ 0x271
 8037234:	4638      	mov	r0, r7
 8037236:	f7ff ff2f 	bl	8037098 <__i2b>
 803723a:	2300      	movs	r3, #0
 803723c:	6438      	str	r0, [r7, #64]	@ 0x40
 803723e:	4604      	mov	r4, r0
 8037240:	6003      	str	r3, [r0, #0]
 8037242:	f04f 0900 	mov.w	r9, #0
 8037246:	07eb      	lsls	r3, r5, #31
 8037248:	d50a      	bpl.n	8037260 <__pow5mult+0x58>
 803724a:	4631      	mov	r1, r6
 803724c:	4622      	mov	r2, r4
 803724e:	4638      	mov	r0, r7
 8037250:	f7ff ff38 	bl	80370c4 <__multiply>
 8037254:	4631      	mov	r1, r6
 8037256:	4680      	mov	r8, r0
 8037258:	4638      	mov	r0, r7
 803725a:	f7ff fe37 	bl	8036ecc <_Bfree>
 803725e:	4646      	mov	r6, r8
 8037260:	106d      	asrs	r5, r5, #1
 8037262:	d00b      	beq.n	803727c <__pow5mult+0x74>
 8037264:	6820      	ldr	r0, [r4, #0]
 8037266:	b938      	cbnz	r0, 8037278 <__pow5mult+0x70>
 8037268:	4622      	mov	r2, r4
 803726a:	4621      	mov	r1, r4
 803726c:	4638      	mov	r0, r7
 803726e:	f7ff ff29 	bl	80370c4 <__multiply>
 8037272:	6020      	str	r0, [r4, #0]
 8037274:	f8c0 9000 	str.w	r9, [r0]
 8037278:	4604      	mov	r4, r0
 803727a:	e7e4      	b.n	8037246 <__pow5mult+0x3e>
 803727c:	4630      	mov	r0, r6
 803727e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8037282:	bf00      	nop
 8037284:	0803e1f0 	.word	0x0803e1f0

08037288 <__lshift>:
 8037288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803728c:	460c      	mov	r4, r1
 803728e:	6849      	ldr	r1, [r1, #4]
 8037290:	6923      	ldr	r3, [r4, #16]
 8037292:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8037296:	68a3      	ldr	r3, [r4, #8]
 8037298:	4607      	mov	r7, r0
 803729a:	4691      	mov	r9, r2
 803729c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80372a0:	f108 0601 	add.w	r6, r8, #1
 80372a4:	42b3      	cmp	r3, r6
 80372a6:	db0b      	blt.n	80372c0 <__lshift+0x38>
 80372a8:	4638      	mov	r0, r7
 80372aa:	f7ff fdea 	bl	8036e82 <_Balloc>
 80372ae:	4605      	mov	r5, r0
 80372b0:	b948      	cbnz	r0, 80372c6 <__lshift+0x3e>
 80372b2:	4602      	mov	r2, r0
 80372b4:	4b28      	ldr	r3, [pc, #160]	@ (8037358 <__lshift+0xd0>)
 80372b6:	4829      	ldr	r0, [pc, #164]	@ (803735c <__lshift+0xd4>)
 80372b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80372bc:	f7f4 f9a6 	bl	802b60c <__assert_func>
 80372c0:	3101      	adds	r1, #1
 80372c2:	005b      	lsls	r3, r3, #1
 80372c4:	e7ee      	b.n	80372a4 <__lshift+0x1c>
 80372c6:	2300      	movs	r3, #0
 80372c8:	f100 0114 	add.w	r1, r0, #20
 80372cc:	f100 0210 	add.w	r2, r0, #16
 80372d0:	4618      	mov	r0, r3
 80372d2:	4553      	cmp	r3, sl
 80372d4:	db33      	blt.n	803733e <__lshift+0xb6>
 80372d6:	6920      	ldr	r0, [r4, #16]
 80372d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80372dc:	f104 0314 	add.w	r3, r4, #20
 80372e0:	f019 091f 	ands.w	r9, r9, #31
 80372e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80372e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80372ec:	d02b      	beq.n	8037346 <__lshift+0xbe>
 80372ee:	f1c9 0e20 	rsb	lr, r9, #32
 80372f2:	468a      	mov	sl, r1
 80372f4:	2200      	movs	r2, #0
 80372f6:	6818      	ldr	r0, [r3, #0]
 80372f8:	fa00 f009 	lsl.w	r0, r0, r9
 80372fc:	4310      	orrs	r0, r2
 80372fe:	f84a 0b04 	str.w	r0, [sl], #4
 8037302:	f853 2b04 	ldr.w	r2, [r3], #4
 8037306:	459c      	cmp	ip, r3
 8037308:	fa22 f20e 	lsr.w	r2, r2, lr
 803730c:	d8f3      	bhi.n	80372f6 <__lshift+0x6e>
 803730e:	ebac 0304 	sub.w	r3, ip, r4
 8037312:	3b15      	subs	r3, #21
 8037314:	f023 0303 	bic.w	r3, r3, #3
 8037318:	3304      	adds	r3, #4
 803731a:	f104 0015 	add.w	r0, r4, #21
 803731e:	4560      	cmp	r0, ip
 8037320:	bf88      	it	hi
 8037322:	2304      	movhi	r3, #4
 8037324:	50ca      	str	r2, [r1, r3]
 8037326:	b10a      	cbz	r2, 803732c <__lshift+0xa4>
 8037328:	f108 0602 	add.w	r6, r8, #2
 803732c:	3e01      	subs	r6, #1
 803732e:	4638      	mov	r0, r7
 8037330:	612e      	str	r6, [r5, #16]
 8037332:	4621      	mov	r1, r4
 8037334:	f7ff fdca 	bl	8036ecc <_Bfree>
 8037338:	4628      	mov	r0, r5
 803733a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803733e:	f842 0f04 	str.w	r0, [r2, #4]!
 8037342:	3301      	adds	r3, #1
 8037344:	e7c5      	b.n	80372d2 <__lshift+0x4a>
 8037346:	3904      	subs	r1, #4
 8037348:	f853 2b04 	ldr.w	r2, [r3], #4
 803734c:	f841 2f04 	str.w	r2, [r1, #4]!
 8037350:	459c      	cmp	ip, r3
 8037352:	d8f9      	bhi.n	8037348 <__lshift+0xc0>
 8037354:	e7ea      	b.n	803732c <__lshift+0xa4>
 8037356:	bf00      	nop
 8037358:	0803dcf5 	.word	0x0803dcf5
 803735c:	0803ddbe 	.word	0x0803ddbe

08037360 <__mcmp>:
 8037360:	690a      	ldr	r2, [r1, #16]
 8037362:	4603      	mov	r3, r0
 8037364:	6900      	ldr	r0, [r0, #16]
 8037366:	1a80      	subs	r0, r0, r2
 8037368:	b530      	push	{r4, r5, lr}
 803736a:	d10e      	bne.n	803738a <__mcmp+0x2a>
 803736c:	3314      	adds	r3, #20
 803736e:	3114      	adds	r1, #20
 8037370:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8037374:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8037378:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 803737c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8037380:	4295      	cmp	r5, r2
 8037382:	d003      	beq.n	803738c <__mcmp+0x2c>
 8037384:	d205      	bcs.n	8037392 <__mcmp+0x32>
 8037386:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803738a:	bd30      	pop	{r4, r5, pc}
 803738c:	42a3      	cmp	r3, r4
 803738e:	d3f3      	bcc.n	8037378 <__mcmp+0x18>
 8037390:	e7fb      	b.n	803738a <__mcmp+0x2a>
 8037392:	2001      	movs	r0, #1
 8037394:	e7f9      	b.n	803738a <__mcmp+0x2a>
	...

08037398 <__mdiff>:
 8037398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803739c:	4689      	mov	r9, r1
 803739e:	4606      	mov	r6, r0
 80373a0:	4611      	mov	r1, r2
 80373a2:	4648      	mov	r0, r9
 80373a4:	4614      	mov	r4, r2
 80373a6:	f7ff ffdb 	bl	8037360 <__mcmp>
 80373aa:	1e05      	subs	r5, r0, #0
 80373ac:	d112      	bne.n	80373d4 <__mdiff+0x3c>
 80373ae:	4629      	mov	r1, r5
 80373b0:	4630      	mov	r0, r6
 80373b2:	f7ff fd66 	bl	8036e82 <_Balloc>
 80373b6:	4602      	mov	r2, r0
 80373b8:	b928      	cbnz	r0, 80373c6 <__mdiff+0x2e>
 80373ba:	4b3f      	ldr	r3, [pc, #252]	@ (80374b8 <__mdiff+0x120>)
 80373bc:	f240 2137 	movw	r1, #567	@ 0x237
 80373c0:	483e      	ldr	r0, [pc, #248]	@ (80374bc <__mdiff+0x124>)
 80373c2:	f7f4 f923 	bl	802b60c <__assert_func>
 80373c6:	2301      	movs	r3, #1
 80373c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80373cc:	4610      	mov	r0, r2
 80373ce:	b003      	add	sp, #12
 80373d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80373d4:	bfbc      	itt	lt
 80373d6:	464b      	movlt	r3, r9
 80373d8:	46a1      	movlt	r9, r4
 80373da:	4630      	mov	r0, r6
 80373dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80373e0:	bfba      	itte	lt
 80373e2:	461c      	movlt	r4, r3
 80373e4:	2501      	movlt	r5, #1
 80373e6:	2500      	movge	r5, #0
 80373e8:	f7ff fd4b 	bl	8036e82 <_Balloc>
 80373ec:	4602      	mov	r2, r0
 80373ee:	b918      	cbnz	r0, 80373f8 <__mdiff+0x60>
 80373f0:	4b31      	ldr	r3, [pc, #196]	@ (80374b8 <__mdiff+0x120>)
 80373f2:	f240 2145 	movw	r1, #581	@ 0x245
 80373f6:	e7e3      	b.n	80373c0 <__mdiff+0x28>
 80373f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80373fc:	6926      	ldr	r6, [r4, #16]
 80373fe:	60c5      	str	r5, [r0, #12]
 8037400:	f109 0310 	add.w	r3, r9, #16
 8037404:	f109 0514 	add.w	r5, r9, #20
 8037408:	f104 0e14 	add.w	lr, r4, #20
 803740c:	f100 0b14 	add.w	fp, r0, #20
 8037410:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8037414:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8037418:	9301      	str	r3, [sp, #4]
 803741a:	46d9      	mov	r9, fp
 803741c:	f04f 0c00 	mov.w	ip, #0
 8037420:	9b01      	ldr	r3, [sp, #4]
 8037422:	f85e 0b04 	ldr.w	r0, [lr], #4
 8037426:	f853 af04 	ldr.w	sl, [r3, #4]!
 803742a:	9301      	str	r3, [sp, #4]
 803742c:	fa1f f38a 	uxth.w	r3, sl
 8037430:	4619      	mov	r1, r3
 8037432:	b283      	uxth	r3, r0
 8037434:	1acb      	subs	r3, r1, r3
 8037436:	0c00      	lsrs	r0, r0, #16
 8037438:	4463      	add	r3, ip
 803743a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 803743e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8037442:	b29b      	uxth	r3, r3
 8037444:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8037448:	4576      	cmp	r6, lr
 803744a:	f849 3b04 	str.w	r3, [r9], #4
 803744e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8037452:	d8e5      	bhi.n	8037420 <__mdiff+0x88>
 8037454:	1b33      	subs	r3, r6, r4
 8037456:	3b15      	subs	r3, #21
 8037458:	f023 0303 	bic.w	r3, r3, #3
 803745c:	3415      	adds	r4, #21
 803745e:	3304      	adds	r3, #4
 8037460:	42a6      	cmp	r6, r4
 8037462:	bf38      	it	cc
 8037464:	2304      	movcc	r3, #4
 8037466:	441d      	add	r5, r3
 8037468:	445b      	add	r3, fp
 803746a:	461e      	mov	r6, r3
 803746c:	462c      	mov	r4, r5
 803746e:	4544      	cmp	r4, r8
 8037470:	d30e      	bcc.n	8037490 <__mdiff+0xf8>
 8037472:	f108 0103 	add.w	r1, r8, #3
 8037476:	1b49      	subs	r1, r1, r5
 8037478:	f021 0103 	bic.w	r1, r1, #3
 803747c:	3d03      	subs	r5, #3
 803747e:	45a8      	cmp	r8, r5
 8037480:	bf38      	it	cc
 8037482:	2100      	movcc	r1, #0
 8037484:	440b      	add	r3, r1
 8037486:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 803748a:	b191      	cbz	r1, 80374b2 <__mdiff+0x11a>
 803748c:	6117      	str	r7, [r2, #16]
 803748e:	e79d      	b.n	80373cc <__mdiff+0x34>
 8037490:	f854 1b04 	ldr.w	r1, [r4], #4
 8037494:	46e6      	mov	lr, ip
 8037496:	0c08      	lsrs	r0, r1, #16
 8037498:	fa1c fc81 	uxtah	ip, ip, r1
 803749c:	4471      	add	r1, lr
 803749e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80374a2:	b289      	uxth	r1, r1
 80374a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80374a8:	f846 1b04 	str.w	r1, [r6], #4
 80374ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80374b0:	e7dd      	b.n	803746e <__mdiff+0xd6>
 80374b2:	3f01      	subs	r7, #1
 80374b4:	e7e7      	b.n	8037486 <__mdiff+0xee>
 80374b6:	bf00      	nop
 80374b8:	0803dcf5 	.word	0x0803dcf5
 80374bc:	0803ddbe 	.word	0x0803ddbe

080374c0 <__ulp>:
 80374c0:	b082      	sub	sp, #8
 80374c2:	ed8d 0b00 	vstr	d0, [sp]
 80374c6:	9a01      	ldr	r2, [sp, #4]
 80374c8:	4b0f      	ldr	r3, [pc, #60]	@ (8037508 <__ulp+0x48>)
 80374ca:	4013      	ands	r3, r2
 80374cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80374d0:	2b00      	cmp	r3, #0
 80374d2:	dc08      	bgt.n	80374e6 <__ulp+0x26>
 80374d4:	425b      	negs	r3, r3
 80374d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80374da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80374de:	da04      	bge.n	80374ea <__ulp+0x2a>
 80374e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80374e4:	4113      	asrs	r3, r2
 80374e6:	2200      	movs	r2, #0
 80374e8:	e008      	b.n	80374fc <__ulp+0x3c>
 80374ea:	f1a2 0314 	sub.w	r3, r2, #20
 80374ee:	2b1e      	cmp	r3, #30
 80374f0:	bfda      	itte	le
 80374f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80374f6:	40da      	lsrle	r2, r3
 80374f8:	2201      	movgt	r2, #1
 80374fa:	2300      	movs	r3, #0
 80374fc:	4619      	mov	r1, r3
 80374fe:	4610      	mov	r0, r2
 8037500:	ec41 0b10 	vmov	d0, r0, r1
 8037504:	b002      	add	sp, #8
 8037506:	4770      	bx	lr
 8037508:	7ff00000 	.word	0x7ff00000

0803750c <__b2d>:
 803750c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8037510:	6906      	ldr	r6, [r0, #16]
 8037512:	f100 0814 	add.w	r8, r0, #20
 8037516:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 803751a:	1f37      	subs	r7, r6, #4
 803751c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8037520:	4610      	mov	r0, r2
 8037522:	f7ff fd6d 	bl	8037000 <__hi0bits>
 8037526:	f1c0 0320 	rsb	r3, r0, #32
 803752a:	280a      	cmp	r0, #10
 803752c:	600b      	str	r3, [r1, #0]
 803752e:	491b      	ldr	r1, [pc, #108]	@ (803759c <__b2d+0x90>)
 8037530:	dc15      	bgt.n	803755e <__b2d+0x52>
 8037532:	f1c0 0c0b 	rsb	ip, r0, #11
 8037536:	fa22 f30c 	lsr.w	r3, r2, ip
 803753a:	45b8      	cmp	r8, r7
 803753c:	ea43 0501 	orr.w	r5, r3, r1
 8037540:	bf34      	ite	cc
 8037542:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8037546:	2300      	movcs	r3, #0
 8037548:	3015      	adds	r0, #21
 803754a:	fa02 f000 	lsl.w	r0, r2, r0
 803754e:	fa23 f30c 	lsr.w	r3, r3, ip
 8037552:	4303      	orrs	r3, r0
 8037554:	461c      	mov	r4, r3
 8037556:	ec45 4b10 	vmov	d0, r4, r5
 803755a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803755e:	45b8      	cmp	r8, r7
 8037560:	bf3a      	itte	cc
 8037562:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8037566:	f1a6 0708 	subcc.w	r7, r6, #8
 803756a:	2300      	movcs	r3, #0
 803756c:	380b      	subs	r0, #11
 803756e:	d012      	beq.n	8037596 <__b2d+0x8a>
 8037570:	f1c0 0120 	rsb	r1, r0, #32
 8037574:	fa23 f401 	lsr.w	r4, r3, r1
 8037578:	4082      	lsls	r2, r0
 803757a:	4322      	orrs	r2, r4
 803757c:	4547      	cmp	r7, r8
 803757e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8037582:	bf8c      	ite	hi
 8037584:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8037588:	2200      	movls	r2, #0
 803758a:	4083      	lsls	r3, r0
 803758c:	40ca      	lsrs	r2, r1
 803758e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8037592:	4313      	orrs	r3, r2
 8037594:	e7de      	b.n	8037554 <__b2d+0x48>
 8037596:	ea42 0501 	orr.w	r5, r2, r1
 803759a:	e7db      	b.n	8037554 <__b2d+0x48>
 803759c:	3ff00000 	.word	0x3ff00000

080375a0 <__d2b>:
 80375a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80375a4:	460f      	mov	r7, r1
 80375a6:	2101      	movs	r1, #1
 80375a8:	ec59 8b10 	vmov	r8, r9, d0
 80375ac:	4616      	mov	r6, r2
 80375ae:	f7ff fc68 	bl	8036e82 <_Balloc>
 80375b2:	4604      	mov	r4, r0
 80375b4:	b930      	cbnz	r0, 80375c4 <__d2b+0x24>
 80375b6:	4602      	mov	r2, r0
 80375b8:	4b23      	ldr	r3, [pc, #140]	@ (8037648 <__d2b+0xa8>)
 80375ba:	4824      	ldr	r0, [pc, #144]	@ (803764c <__d2b+0xac>)
 80375bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80375c0:	f7f4 f824 	bl	802b60c <__assert_func>
 80375c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80375c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80375cc:	b10d      	cbz	r5, 80375d2 <__d2b+0x32>
 80375ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80375d2:	9301      	str	r3, [sp, #4]
 80375d4:	f1b8 0300 	subs.w	r3, r8, #0
 80375d8:	d023      	beq.n	8037622 <__d2b+0x82>
 80375da:	4668      	mov	r0, sp
 80375dc:	9300      	str	r3, [sp, #0]
 80375de:	f7ff fd2e 	bl	803703e <__lo0bits>
 80375e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80375e6:	b1d0      	cbz	r0, 803761e <__d2b+0x7e>
 80375e8:	f1c0 0320 	rsb	r3, r0, #32
 80375ec:	fa02 f303 	lsl.w	r3, r2, r3
 80375f0:	430b      	orrs	r3, r1
 80375f2:	40c2      	lsrs	r2, r0
 80375f4:	6163      	str	r3, [r4, #20]
 80375f6:	9201      	str	r2, [sp, #4]
 80375f8:	9b01      	ldr	r3, [sp, #4]
 80375fa:	61a3      	str	r3, [r4, #24]
 80375fc:	2b00      	cmp	r3, #0
 80375fe:	bf0c      	ite	eq
 8037600:	2201      	moveq	r2, #1
 8037602:	2202      	movne	r2, #2
 8037604:	6122      	str	r2, [r4, #16]
 8037606:	b1a5      	cbz	r5, 8037632 <__d2b+0x92>
 8037608:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 803760c:	4405      	add	r5, r0
 803760e:	603d      	str	r5, [r7, #0]
 8037610:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8037614:	6030      	str	r0, [r6, #0]
 8037616:	4620      	mov	r0, r4
 8037618:	b003      	add	sp, #12
 803761a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803761e:	6161      	str	r1, [r4, #20]
 8037620:	e7ea      	b.n	80375f8 <__d2b+0x58>
 8037622:	a801      	add	r0, sp, #4
 8037624:	f7ff fd0b 	bl	803703e <__lo0bits>
 8037628:	9b01      	ldr	r3, [sp, #4]
 803762a:	6163      	str	r3, [r4, #20]
 803762c:	3020      	adds	r0, #32
 803762e:	2201      	movs	r2, #1
 8037630:	e7e8      	b.n	8037604 <__d2b+0x64>
 8037632:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8037636:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 803763a:	6038      	str	r0, [r7, #0]
 803763c:	6918      	ldr	r0, [r3, #16]
 803763e:	f7ff fcdf 	bl	8037000 <__hi0bits>
 8037642:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8037646:	e7e5      	b.n	8037614 <__d2b+0x74>
 8037648:	0803dcf5 	.word	0x0803dcf5
 803764c:	0803ddbe 	.word	0x0803ddbe

08037650 <__ratio>:
 8037650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8037654:	b085      	sub	sp, #20
 8037656:	e9cd 1000 	strd	r1, r0, [sp]
 803765a:	a902      	add	r1, sp, #8
 803765c:	f7ff ff56 	bl	803750c <__b2d>
 8037660:	9800      	ldr	r0, [sp, #0]
 8037662:	a903      	add	r1, sp, #12
 8037664:	ec55 4b10 	vmov	r4, r5, d0
 8037668:	f7ff ff50 	bl	803750c <__b2d>
 803766c:	9b01      	ldr	r3, [sp, #4]
 803766e:	6919      	ldr	r1, [r3, #16]
 8037670:	9b00      	ldr	r3, [sp, #0]
 8037672:	691b      	ldr	r3, [r3, #16]
 8037674:	1ac9      	subs	r1, r1, r3
 8037676:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 803767a:	1a9b      	subs	r3, r3, r2
 803767c:	ec5b ab10 	vmov	sl, fp, d0
 8037680:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8037684:	2b00      	cmp	r3, #0
 8037686:	bfce      	itee	gt
 8037688:	462a      	movgt	r2, r5
 803768a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 803768e:	465a      	movle	r2, fp
 8037690:	462f      	mov	r7, r5
 8037692:	46d9      	mov	r9, fp
 8037694:	bfcc      	ite	gt
 8037696:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 803769a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 803769e:	464b      	mov	r3, r9
 80376a0:	4652      	mov	r2, sl
 80376a2:	4620      	mov	r0, r4
 80376a4:	4639      	mov	r1, r7
 80376a6:	f7d9 f8e9 	bl	801087c <__aeabi_ddiv>
 80376aa:	ec41 0b10 	vmov	d0, r0, r1
 80376ae:	b005      	add	sp, #20
 80376b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080376b4 <__copybits>:
 80376b4:	3901      	subs	r1, #1
 80376b6:	b570      	push	{r4, r5, r6, lr}
 80376b8:	1149      	asrs	r1, r1, #5
 80376ba:	6914      	ldr	r4, [r2, #16]
 80376bc:	3101      	adds	r1, #1
 80376be:	f102 0314 	add.w	r3, r2, #20
 80376c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80376c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80376ca:	1f05      	subs	r5, r0, #4
 80376cc:	42a3      	cmp	r3, r4
 80376ce:	d30c      	bcc.n	80376ea <__copybits+0x36>
 80376d0:	1aa3      	subs	r3, r4, r2
 80376d2:	3b11      	subs	r3, #17
 80376d4:	f023 0303 	bic.w	r3, r3, #3
 80376d8:	3211      	adds	r2, #17
 80376da:	42a2      	cmp	r2, r4
 80376dc:	bf88      	it	hi
 80376de:	2300      	movhi	r3, #0
 80376e0:	4418      	add	r0, r3
 80376e2:	2300      	movs	r3, #0
 80376e4:	4288      	cmp	r0, r1
 80376e6:	d305      	bcc.n	80376f4 <__copybits+0x40>
 80376e8:	bd70      	pop	{r4, r5, r6, pc}
 80376ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80376ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80376f2:	e7eb      	b.n	80376cc <__copybits+0x18>
 80376f4:	f840 3b04 	str.w	r3, [r0], #4
 80376f8:	e7f4      	b.n	80376e4 <__copybits+0x30>

080376fa <__any_on>:
 80376fa:	f100 0214 	add.w	r2, r0, #20
 80376fe:	6900      	ldr	r0, [r0, #16]
 8037700:	114b      	asrs	r3, r1, #5
 8037702:	4298      	cmp	r0, r3
 8037704:	b510      	push	{r4, lr}
 8037706:	db11      	blt.n	803772c <__any_on+0x32>
 8037708:	dd0a      	ble.n	8037720 <__any_on+0x26>
 803770a:	f011 011f 	ands.w	r1, r1, #31
 803770e:	d007      	beq.n	8037720 <__any_on+0x26>
 8037710:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8037714:	fa24 f001 	lsr.w	r0, r4, r1
 8037718:	fa00 f101 	lsl.w	r1, r0, r1
 803771c:	428c      	cmp	r4, r1
 803771e:	d10b      	bne.n	8037738 <__any_on+0x3e>
 8037720:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8037724:	4293      	cmp	r3, r2
 8037726:	d803      	bhi.n	8037730 <__any_on+0x36>
 8037728:	2000      	movs	r0, #0
 803772a:	bd10      	pop	{r4, pc}
 803772c:	4603      	mov	r3, r0
 803772e:	e7f7      	b.n	8037720 <__any_on+0x26>
 8037730:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8037734:	2900      	cmp	r1, #0
 8037736:	d0f5      	beq.n	8037724 <__any_on+0x2a>
 8037738:	2001      	movs	r0, #1
 803773a:	e7f6      	b.n	803772a <__any_on+0x30>

0803773c <__ssputs_r>:
 803773c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8037740:	688e      	ldr	r6, [r1, #8]
 8037742:	461f      	mov	r7, r3
 8037744:	42be      	cmp	r6, r7
 8037746:	680b      	ldr	r3, [r1, #0]
 8037748:	4682      	mov	sl, r0
 803774a:	460c      	mov	r4, r1
 803774c:	4690      	mov	r8, r2
 803774e:	d82d      	bhi.n	80377ac <__ssputs_r+0x70>
 8037750:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8037754:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8037758:	d026      	beq.n	80377a8 <__ssputs_r+0x6c>
 803775a:	6965      	ldr	r5, [r4, #20]
 803775c:	6909      	ldr	r1, [r1, #16]
 803775e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8037762:	eba3 0901 	sub.w	r9, r3, r1
 8037766:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 803776a:	1c7b      	adds	r3, r7, #1
 803776c:	444b      	add	r3, r9
 803776e:	106d      	asrs	r5, r5, #1
 8037770:	429d      	cmp	r5, r3
 8037772:	bf38      	it	cc
 8037774:	461d      	movcc	r5, r3
 8037776:	0553      	lsls	r3, r2, #21
 8037778:	d527      	bpl.n	80377ca <__ssputs_r+0x8e>
 803777a:	4629      	mov	r1, r5
 803777c:	f7f6 ff5c 	bl	802e638 <_malloc_r>
 8037780:	4606      	mov	r6, r0
 8037782:	b360      	cbz	r0, 80377de <__ssputs_r+0xa2>
 8037784:	6921      	ldr	r1, [r4, #16]
 8037786:	464a      	mov	r2, r9
 8037788:	f7f6 fdb6 	bl	802e2f8 <memcpy>
 803778c:	89a3      	ldrh	r3, [r4, #12]
 803778e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8037792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8037796:	81a3      	strh	r3, [r4, #12]
 8037798:	6126      	str	r6, [r4, #16]
 803779a:	6165      	str	r5, [r4, #20]
 803779c:	444e      	add	r6, r9
 803779e:	eba5 0509 	sub.w	r5, r5, r9
 80377a2:	6026      	str	r6, [r4, #0]
 80377a4:	60a5      	str	r5, [r4, #8]
 80377a6:	463e      	mov	r6, r7
 80377a8:	42be      	cmp	r6, r7
 80377aa:	d900      	bls.n	80377ae <__ssputs_r+0x72>
 80377ac:	463e      	mov	r6, r7
 80377ae:	6820      	ldr	r0, [r4, #0]
 80377b0:	4632      	mov	r2, r6
 80377b2:	4641      	mov	r1, r8
 80377b4:	f7f5 f80a 	bl	802c7cc <memmove>
 80377b8:	68a3      	ldr	r3, [r4, #8]
 80377ba:	1b9b      	subs	r3, r3, r6
 80377bc:	60a3      	str	r3, [r4, #8]
 80377be:	6823      	ldr	r3, [r4, #0]
 80377c0:	4433      	add	r3, r6
 80377c2:	6023      	str	r3, [r4, #0]
 80377c4:	2000      	movs	r0, #0
 80377c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80377ca:	462a      	mov	r2, r5
 80377cc:	f7fc fdb0 	bl	8034330 <_realloc_r>
 80377d0:	4606      	mov	r6, r0
 80377d2:	2800      	cmp	r0, #0
 80377d4:	d1e0      	bne.n	8037798 <__ssputs_r+0x5c>
 80377d6:	6921      	ldr	r1, [r4, #16]
 80377d8:	4650      	mov	r0, sl
 80377da:	f7f6 fe15 	bl	802e408 <_free_r>
 80377de:	230c      	movs	r3, #12
 80377e0:	f8ca 3000 	str.w	r3, [sl]
 80377e4:	89a3      	ldrh	r3, [r4, #12]
 80377e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80377ea:	81a3      	strh	r3, [r4, #12]
 80377ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80377f0:	e7e9      	b.n	80377c6 <__ssputs_r+0x8a>

080377f2 <__ascii_wctomb>:
 80377f2:	4603      	mov	r3, r0
 80377f4:	4608      	mov	r0, r1
 80377f6:	b141      	cbz	r1, 803780a <__ascii_wctomb+0x18>
 80377f8:	2aff      	cmp	r2, #255	@ 0xff
 80377fa:	d904      	bls.n	8037806 <__ascii_wctomb+0x14>
 80377fc:	228a      	movs	r2, #138	@ 0x8a
 80377fe:	601a      	str	r2, [r3, #0]
 8037800:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8037804:	4770      	bx	lr
 8037806:	700a      	strb	r2, [r1, #0]
 8037808:	2001      	movs	r0, #1
 803780a:	4770      	bx	lr

0803780c <_calloc_r>:
 803780c:	b538      	push	{r3, r4, r5, lr}
 803780e:	fba1 1502 	umull	r1, r5, r1, r2
 8037812:	b935      	cbnz	r5, 8037822 <_calloc_r+0x16>
 8037814:	f7f6 ff10 	bl	802e638 <_malloc_r>
 8037818:	4604      	mov	r4, r0
 803781a:	b938      	cbnz	r0, 803782c <_calloc_r+0x20>
 803781c:	2400      	movs	r4, #0
 803781e:	4620      	mov	r0, r4
 8037820:	bd38      	pop	{r3, r4, r5, pc}
 8037822:	f7f6 fd31 	bl	802e288 <__errno>
 8037826:	230c      	movs	r3, #12
 8037828:	6003      	str	r3, [r0, #0]
 803782a:	e7f7      	b.n	803781c <_calloc_r+0x10>
 803782c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8037830:	f022 0203 	bic.w	r2, r2, #3
 8037834:	3a04      	subs	r2, #4
 8037836:	2a24      	cmp	r2, #36	@ 0x24
 8037838:	d819      	bhi.n	803786e <_calloc_r+0x62>
 803783a:	2a13      	cmp	r2, #19
 803783c:	d915      	bls.n	803786a <_calloc_r+0x5e>
 803783e:	2a1b      	cmp	r2, #27
 8037840:	e9c0 5500 	strd	r5, r5, [r0]
 8037844:	d806      	bhi.n	8037854 <_calloc_r+0x48>
 8037846:	f100 0308 	add.w	r3, r0, #8
 803784a:	2200      	movs	r2, #0
 803784c:	e9c3 2200 	strd	r2, r2, [r3]
 8037850:	609a      	str	r2, [r3, #8]
 8037852:	e7e4      	b.n	803781e <_calloc_r+0x12>
 8037854:	2a24      	cmp	r2, #36	@ 0x24
 8037856:	e9c0 5502 	strd	r5, r5, [r0, #8]
 803785a:	bf11      	iteee	ne
 803785c:	f100 0310 	addne.w	r3, r0, #16
 8037860:	6105      	streq	r5, [r0, #16]
 8037862:	f100 0318 	addeq.w	r3, r0, #24
 8037866:	6145      	streq	r5, [r0, #20]
 8037868:	e7ef      	b.n	803784a <_calloc_r+0x3e>
 803786a:	4603      	mov	r3, r0
 803786c:	e7ed      	b.n	803784a <_calloc_r+0x3e>
 803786e:	4629      	mov	r1, r5
 8037870:	f7f4 ffc6 	bl	802c800 <memset>
 8037874:	e7d3      	b.n	803781e <_calloc_r+0x12>
	...

08037878 <_init>:
 8037878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803787a:	bf00      	nop
 803787c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803787e:	bc08      	pop	{r3}
 8037880:	469e      	mov	lr, r3
 8037882:	4770      	bx	lr

08037884 <_fini>:
 8037884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8037886:	bf00      	nop
 8037888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803788a:	bc08      	pop	{r3}
 803788c:	469e      	mov	lr, r3
 803788e:	4770      	bx	lr
