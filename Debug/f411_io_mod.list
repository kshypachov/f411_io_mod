
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022bf4  080101a0  080101a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005ae8  08032d98  08032d98  00023d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08038880  08038880  0002a7e8  2**0
                  CONTENTS
  4 .ARM          00000008  08038880  08038880  00029880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08038888  08038888  0002a7e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08038888  08038888  00029888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08038890  08038890  00029890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000007e8  20000000  08038894  0002a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017b70  200007e8  0803907c  0002a7e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20018358  0803907c  0002b358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002a7e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00055034  00000000  00000000  0002a818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e2b  00000000  00000000  0007f84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00026589  00000000  00000000  00086677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d68  00000000  00000000  000acc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002dec  00000000  00000000  000af968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f826  00000000  00000000  000b2754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00042c22  00000000  00000000  000d1f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8774  00000000  00000000  00114b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001bd310  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b808  00000000  00000000  001bd354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001c8b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	@ (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	@ (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	@ (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	200007e8 	.word	0x200007e8
 80101bc:	00000000 	.word	0x00000000
 80101c0:	08032d7c 	.word	0x08032d7c

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	@ (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	@ (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	@ (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	200007ec 	.word	0x200007ec
 80101dc:	08032d7c 	.word	0x08032d7c

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	@ 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_ldivmod>:
 8010cb8:	b97b      	cbnz	r3, 8010cda <__aeabi_ldivmod+0x22>
 8010cba:	b972      	cbnz	r2, 8010cda <__aeabi_ldivmod+0x22>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bfbe      	ittt	lt
 8010cc0:	2000      	movlt	r0, #0
 8010cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8010cc6:	e006      	blt.n	8010cd6 <__aeabi_ldivmod+0x1e>
 8010cc8:	bf08      	it	eq
 8010cca:	2800      	cmpeq	r0, #0
 8010ccc:	bf1c      	itt	ne
 8010cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8010cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010cd6:	f000 b9ff 	b.w	80110d8 <__aeabi_idiv0>
 8010cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010ce2:	2900      	cmp	r1, #0
 8010ce4:	db09      	blt.n	8010cfa <__aeabi_ldivmod+0x42>
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	db1a      	blt.n	8010d20 <__aeabi_ldivmod+0x68>
 8010cea:	f000 f897 	bl	8010e1c <__udivmoddi4>
 8010cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cf6:	b004      	add	sp, #16
 8010cf8:	4770      	bx	lr
 8010cfa:	4240      	negs	r0, r0
 8010cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	db1b      	blt.n	8010d3c <__aeabi_ldivmod+0x84>
 8010d04:	f000 f88a 	bl	8010e1c <__udivmoddi4>
 8010d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d10:	b004      	add	sp, #16
 8010d12:	4240      	negs	r0, r0
 8010d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d18:	4252      	negs	r2, r2
 8010d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d1e:	4770      	bx	lr
 8010d20:	4252      	negs	r2, r2
 8010d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d26:	f000 f879 	bl	8010e1c <__udivmoddi4>
 8010d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d32:	b004      	add	sp, #16
 8010d34:	4240      	negs	r0, r0
 8010d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3a:	4770      	bx	lr
 8010d3c:	4252      	negs	r2, r2
 8010d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d42:	f000 f86b 	bl	8010e1c <__udivmoddi4>
 8010d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d4e:	b004      	add	sp, #16
 8010d50:	4252      	negs	r2, r2
 8010d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d56:	4770      	bx	lr

08010d58 <__aeabi_uldivmod>:
 8010d58:	b953      	cbnz	r3, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5a:	b94a      	cbnz	r2, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	bf08      	it	eq
 8010d60:	2800      	cmpeq	r0, #0
 8010d62:	bf1c      	itt	ne
 8010d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8010d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010d6c:	f000 b9b4 	b.w	80110d8 <__aeabi_idiv0>
 8010d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8010d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010d78:	f000 f850 	bl	8010e1c <__udivmoddi4>
 8010d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d84:	b004      	add	sp, #16
 8010d86:	4770      	bx	lr

08010d88 <__popcountsi2>:
 8010d88:	0843      	lsrs	r3, r0, #1
 8010d8a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8010d8e:	1ac0      	subs	r0, r0, r3
 8010d90:	0883      	lsrs	r3, r0, #2
 8010d92:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8010d96:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8010d9a:	4418      	add	r0, r3
 8010d9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010da0:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8010da4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010da8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010dac:	0e00      	lsrs	r0, r0, #24
 8010dae:	4770      	bx	lr

08010db0 <__aeabi_d2lz>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	2200      	movs	r2, #0
 8010db4:	2300      	movs	r3, #0
 8010db6:	4604      	mov	r4, r0
 8010db8:	460d      	mov	r5, r1
 8010dba:	f7ff fea7 	bl	8010b0c <__aeabi_dcmplt>
 8010dbe:	b928      	cbnz	r0, 8010dcc <__aeabi_d2lz+0x1c>
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc8:	f000 b80a 	b.w	8010de0 <__aeabi_d2ulz>
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8010dd2:	f000 f805 	bl	8010de0 <__aeabi_d2ulz>
 8010dd6:	4240      	negs	r0, r0
 8010dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010ddc:	bd38      	pop	{r3, r4, r5, pc}
 8010dde:	bf00      	nop

08010de0 <__aeabi_d2ulz>:
 8010de0:	b5d0      	push	{r4, r6, r7, lr}
 8010de2:	4b0c      	ldr	r3, [pc, #48]	@ (8010e14 <__aeabi_d2ulz+0x34>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	4606      	mov	r6, r0
 8010de8:	460f      	mov	r7, r1
 8010dea:	f7ff fc1d 	bl	8010628 <__aeabi_dmul>
 8010dee:	f7ff fef3 	bl	8010bd8 <__aeabi_d2uiz>
 8010df2:	4604      	mov	r4, r0
 8010df4:	f7ff fb9e 	bl	8010534 <__aeabi_ui2d>
 8010df8:	4b07      	ldr	r3, [pc, #28]	@ (8010e18 <__aeabi_d2ulz+0x38>)
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f7ff fc14 	bl	8010628 <__aeabi_dmul>
 8010e00:	4602      	mov	r2, r0
 8010e02:	460b      	mov	r3, r1
 8010e04:	4630      	mov	r0, r6
 8010e06:	4639      	mov	r1, r7
 8010e08:	f7ff fa56 	bl	80102b8 <__aeabi_dsub>
 8010e0c:	f7ff fee4 	bl	8010bd8 <__aeabi_d2uiz>
 8010e10:	4621      	mov	r1, r4
 8010e12:	bdd0      	pop	{r4, r6, r7, pc}
 8010e14:	3df00000 	.word	0x3df00000
 8010e18:	41f00000 	.word	0x41f00000

08010e1c <__udivmoddi4>:
 8010e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e20:	9d08      	ldr	r5, [sp, #32]
 8010e22:	460c      	mov	r4, r1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d14e      	bne.n	8010ec6 <__udivmoddi4+0xaa>
 8010e28:	4694      	mov	ip, r2
 8010e2a:	458c      	cmp	ip, r1
 8010e2c:	4686      	mov	lr, r0
 8010e2e:	fab2 f282 	clz	r2, r2
 8010e32:	d962      	bls.n	8010efa <__udivmoddi4+0xde>
 8010e34:	b14a      	cbz	r2, 8010e4a <__udivmoddi4+0x2e>
 8010e36:	f1c2 0320 	rsb	r3, r2, #32
 8010e3a:	4091      	lsls	r1, r2
 8010e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8010e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8010e44:	4319      	orrs	r1, r3
 8010e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8010e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e4e:	fa1f f68c 	uxth.w	r6, ip
 8010e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8010e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8010e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e62:	fb04 f106 	mul.w	r1, r4, r6
 8010e66:	4299      	cmp	r1, r3
 8010e68:	d90a      	bls.n	8010e80 <__udivmoddi4+0x64>
 8010e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8010e72:	f080 8112 	bcs.w	801109a <__udivmoddi4+0x27e>
 8010e76:	4299      	cmp	r1, r3
 8010e78:	f240 810f 	bls.w	801109a <__udivmoddi4+0x27e>
 8010e7c:	3c02      	subs	r4, #2
 8010e7e:	4463      	add	r3, ip
 8010e80:	1a59      	subs	r1, r3, r1
 8010e82:	fa1f f38e 	uxth.w	r3, lr
 8010e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8010e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8010e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e92:	fb00 f606 	mul.w	r6, r0, r6
 8010e96:	429e      	cmp	r6, r3
 8010e98:	d90a      	bls.n	8010eb0 <__udivmoddi4+0x94>
 8010e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8010ea2:	f080 80fc 	bcs.w	801109e <__udivmoddi4+0x282>
 8010ea6:	429e      	cmp	r6, r3
 8010ea8:	f240 80f9 	bls.w	801109e <__udivmoddi4+0x282>
 8010eac:	4463      	add	r3, ip
 8010eae:	3802      	subs	r0, #2
 8010eb0:	1b9b      	subs	r3, r3, r6
 8010eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	b11d      	cbz	r5, 8010ec2 <__udivmoddi4+0xa6>
 8010eba:	40d3      	lsrs	r3, r2
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8010ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec6:	428b      	cmp	r3, r1
 8010ec8:	d905      	bls.n	8010ed6 <__udivmoddi4+0xba>
 8010eca:	b10d      	cbz	r5, 8010ed0 <__udivmoddi4+0xb4>
 8010ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	4608      	mov	r0, r1
 8010ed4:	e7f5      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010ed6:	fab3 f183 	clz	r1, r3
 8010eda:	2900      	cmp	r1, #0
 8010edc:	d146      	bne.n	8010f6c <__udivmoddi4+0x150>
 8010ede:	42a3      	cmp	r3, r4
 8010ee0:	d302      	bcc.n	8010ee8 <__udivmoddi4+0xcc>
 8010ee2:	4290      	cmp	r0, r2
 8010ee4:	f0c0 80f0 	bcc.w	80110c8 <__udivmoddi4+0x2ac>
 8010ee8:	1a86      	subs	r6, r0, r2
 8010eea:	eb64 0303 	sbc.w	r3, r4, r3
 8010eee:	2001      	movs	r0, #1
 8010ef0:	2d00      	cmp	r5, #0
 8010ef2:	d0e6      	beq.n	8010ec2 <__udivmoddi4+0xa6>
 8010ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8010ef8:	e7e3      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010efa:	2a00      	cmp	r2, #0
 8010efc:	f040 8090 	bne.w	8011020 <__udivmoddi4+0x204>
 8010f00:	eba1 040c 	sub.w	r4, r1, ip
 8010f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8010f08:	fa1f f78c 	uxth.w	r7, ip
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8010f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010f16:	fb08 4416 	mls	r4, r8, r6, r4
 8010f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f1e:	fb07 f006 	mul.w	r0, r7, r6
 8010f22:	4298      	cmp	r0, r3
 8010f24:	d908      	bls.n	8010f38 <__udivmoddi4+0x11c>
 8010f26:	eb1c 0303 	adds.w	r3, ip, r3
 8010f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8010f2e:	d202      	bcs.n	8010f36 <__udivmoddi4+0x11a>
 8010f30:	4298      	cmp	r0, r3
 8010f32:	f200 80cd 	bhi.w	80110d0 <__udivmoddi4+0x2b4>
 8010f36:	4626      	mov	r6, r4
 8010f38:	1a1c      	subs	r4, r3, r0
 8010f3a:	fa1f f38e 	uxth.w	r3, lr
 8010f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8010f42:	fb08 4410 	mls	r4, r8, r0, r4
 8010f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f4a:	fb00 f707 	mul.w	r7, r0, r7
 8010f4e:	429f      	cmp	r7, r3
 8010f50:	d908      	bls.n	8010f64 <__udivmoddi4+0x148>
 8010f52:	eb1c 0303 	adds.w	r3, ip, r3
 8010f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8010f5a:	d202      	bcs.n	8010f62 <__udivmoddi4+0x146>
 8010f5c:	429f      	cmp	r7, r3
 8010f5e:	f200 80b0 	bhi.w	80110c2 <__udivmoddi4+0x2a6>
 8010f62:	4620      	mov	r0, r4
 8010f64:	1bdb      	subs	r3, r3, r7
 8010f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010f6a:	e7a5      	b.n	8010eb8 <__udivmoddi4+0x9c>
 8010f6c:	f1c1 0620 	rsb	r6, r1, #32
 8010f70:	408b      	lsls	r3, r1
 8010f72:	fa22 f706 	lsr.w	r7, r2, r6
 8010f76:	431f      	orrs	r7, r3
 8010f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8010f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8010f80:	ea43 030c 	orr.w	r3, r3, ip
 8010f84:	40f4      	lsrs	r4, r6
 8010f86:	fa00 f801 	lsl.w	r8, r0, r1
 8010f8a:	0c38      	lsrs	r0, r7, #16
 8010f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8010f90:	fbb4 fef0 	udiv	lr, r4, r0
 8010f94:	fa1f fc87 	uxth.w	ip, r7
 8010f98:	fb00 441e 	mls	r4, r0, lr, r4
 8010f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8010fa4:	45a1      	cmp	r9, r4
 8010fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8010faa:	d90a      	bls.n	8010fc2 <__udivmoddi4+0x1a6>
 8010fac:	193c      	adds	r4, r7, r4
 8010fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8010fb2:	f080 8084 	bcs.w	80110be <__udivmoddi4+0x2a2>
 8010fb6:	45a1      	cmp	r9, r4
 8010fb8:	f240 8081 	bls.w	80110be <__udivmoddi4+0x2a2>
 8010fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8010fc0:	443c      	add	r4, r7
 8010fc2:	eba4 0409 	sub.w	r4, r4, r9
 8010fc6:	fa1f f983 	uxth.w	r9, r3
 8010fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8010fce:	fb00 4413 	mls	r4, r0, r3, r4
 8010fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8010fda:	45a4      	cmp	ip, r4
 8010fdc:	d907      	bls.n	8010fee <__udivmoddi4+0x1d2>
 8010fde:	193c      	adds	r4, r7, r4
 8010fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8010fe4:	d267      	bcs.n	80110b6 <__udivmoddi4+0x29a>
 8010fe6:	45a4      	cmp	ip, r4
 8010fe8:	d965      	bls.n	80110b6 <__udivmoddi4+0x29a>
 8010fea:	3b02      	subs	r3, #2
 8010fec:	443c      	add	r4, r7
 8010fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8010ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8010ff6:	eba4 040c 	sub.w	r4, r4, ip
 8010ffa:	429c      	cmp	r4, r3
 8010ffc:	46ce      	mov	lr, r9
 8010ffe:	469c      	mov	ip, r3
 8011000:	d351      	bcc.n	80110a6 <__udivmoddi4+0x28a>
 8011002:	d04e      	beq.n	80110a2 <__udivmoddi4+0x286>
 8011004:	b155      	cbz	r5, 801101c <__udivmoddi4+0x200>
 8011006:	ebb8 030e 	subs.w	r3, r8, lr
 801100a:	eb64 040c 	sbc.w	r4, r4, ip
 801100e:	fa04 f606 	lsl.w	r6, r4, r6
 8011012:	40cb      	lsrs	r3, r1
 8011014:	431e      	orrs	r6, r3
 8011016:	40cc      	lsrs	r4, r1
 8011018:	e9c5 6400 	strd	r6, r4, [r5]
 801101c:	2100      	movs	r1, #0
 801101e:	e750      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8011020:	f1c2 0320 	rsb	r3, r2, #32
 8011024:	fa20 f103 	lsr.w	r1, r0, r3
 8011028:	fa0c fc02 	lsl.w	ip, ip, r2
 801102c:	fa24 f303 	lsr.w	r3, r4, r3
 8011030:	4094      	lsls	r4, r2
 8011032:	430c      	orrs	r4, r1
 8011034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8011038:	fa00 fe02 	lsl.w	lr, r0, r2
 801103c:	fa1f f78c 	uxth.w	r7, ip
 8011040:	fbb3 f0f8 	udiv	r0, r3, r8
 8011044:	fb08 3110 	mls	r1, r8, r0, r3
 8011048:	0c23      	lsrs	r3, r4, #16
 801104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801104e:	fb00 f107 	mul.w	r1, r0, r7
 8011052:	4299      	cmp	r1, r3
 8011054:	d908      	bls.n	8011068 <__udivmoddi4+0x24c>
 8011056:	eb1c 0303 	adds.w	r3, ip, r3
 801105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 801105e:	d22c      	bcs.n	80110ba <__udivmoddi4+0x29e>
 8011060:	4299      	cmp	r1, r3
 8011062:	d92a      	bls.n	80110ba <__udivmoddi4+0x29e>
 8011064:	3802      	subs	r0, #2
 8011066:	4463      	add	r3, ip
 8011068:	1a5b      	subs	r3, r3, r1
 801106a:	b2a4      	uxth	r4, r4
 801106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8011070:	fb08 3311 	mls	r3, r8, r1, r3
 8011074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8011078:	fb01 f307 	mul.w	r3, r1, r7
 801107c:	42a3      	cmp	r3, r4
 801107e:	d908      	bls.n	8011092 <__udivmoddi4+0x276>
 8011080:	eb1c 0404 	adds.w	r4, ip, r4
 8011084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8011088:	d213      	bcs.n	80110b2 <__udivmoddi4+0x296>
 801108a:	42a3      	cmp	r3, r4
 801108c:	d911      	bls.n	80110b2 <__udivmoddi4+0x296>
 801108e:	3902      	subs	r1, #2
 8011090:	4464      	add	r4, ip
 8011092:	1ae4      	subs	r4, r4, r3
 8011094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011098:	e739      	b.n	8010f0e <__udivmoddi4+0xf2>
 801109a:	4604      	mov	r4, r0
 801109c:	e6f0      	b.n	8010e80 <__udivmoddi4+0x64>
 801109e:	4608      	mov	r0, r1
 80110a0:	e706      	b.n	8010eb0 <__udivmoddi4+0x94>
 80110a2:	45c8      	cmp	r8, r9
 80110a4:	d2ae      	bcs.n	8011004 <__udivmoddi4+0x1e8>
 80110a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80110aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80110ae:	3801      	subs	r0, #1
 80110b0:	e7a8      	b.n	8011004 <__udivmoddi4+0x1e8>
 80110b2:	4631      	mov	r1, r6
 80110b4:	e7ed      	b.n	8011092 <__udivmoddi4+0x276>
 80110b6:	4603      	mov	r3, r0
 80110b8:	e799      	b.n	8010fee <__udivmoddi4+0x1d2>
 80110ba:	4630      	mov	r0, r6
 80110bc:	e7d4      	b.n	8011068 <__udivmoddi4+0x24c>
 80110be:	46d6      	mov	lr, sl
 80110c0:	e77f      	b.n	8010fc2 <__udivmoddi4+0x1a6>
 80110c2:	4463      	add	r3, ip
 80110c4:	3802      	subs	r0, #2
 80110c6:	e74d      	b.n	8010f64 <__udivmoddi4+0x148>
 80110c8:	4606      	mov	r6, r0
 80110ca:	4623      	mov	r3, r4
 80110cc:	4608      	mov	r0, r1
 80110ce:	e70f      	b.n	8010ef0 <__udivmoddi4+0xd4>
 80110d0:	3e02      	subs	r6, #2
 80110d2:	4463      	add	r3, ip
 80110d4:	e730      	b.n	8010f38 <__udivmoddi4+0x11c>
 80110d6:	bf00      	nop

080110d8 <__aeabi_idiv0>:
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop

080110dc <EthBegin>:

void EthResetEnd(void){
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
}

void EthBegin(void * param){
 80110dc:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 80110de:	2200      	movs	r2, #0
 80110e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80110e4:	4801      	ldr	r0, [pc, #4]	@ (80110ec <EthBegin+0x10>)
 80110e6:	f003 fe82 	bl	8014dee <HAL_GPIO_WritePin>
}
 80110ea:	bd08      	pop	{r3, pc}
 80110ec:	40020400 	.word	0x40020400

080110f0 <EthEnd>:

void EthEnd(void * param){
 80110f0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 80110f2:	2201      	movs	r2, #1
 80110f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80110f8:	4801      	ldr	r0, [pc, #4]	@ (8011100 <EthEnd+0x10>)
 80110fa:	f003 fe78 	bl	8014dee <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 80110fe:	bd08      	pop	{r3, pc}
 8011100:	40020400 	.word	0x40020400

08011104 <FlashBegin>:
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
  return rx_data;
}

void FlashBegin(void){
 8011104:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8011106:	2200      	movs	r2, #0
 8011108:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801110c:	4801      	ldr	r0, [pc, #4]	@ (8011114 <FlashBegin+0x10>)
 801110e:	f003 fe6e 	bl	8014dee <HAL_GPIO_WritePin>
}
 8011112:	bd08      	pop	{r3, pc}
 8011114:	40020000 	.word	0x40020000

08011118 <FlashEnd>:

void FlashEnd(void){
 8011118:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 801111a:	2201      	movs	r2, #1
 801111c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011120:	4801      	ldr	r0, [pc, #4]	@ (8011128 <FlashEnd+0x10>)
 8011122:	f003 fe64 	bl	8014dee <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 8011126:	bd08      	pop	{r3, pc}
 8011128:	40020000 	.word	0x40020000

0801112c <StartIOTask>:
{
 801112c:	b510      	push	{r4, lr}
 801112e:	b08e      	sub	sp, #56	@ 0x38
	uint16_t pinCoils[] = {coil1_Pin, coil2_Pin, coil3_Pin};
 8011130:	4b48      	ldr	r3, [pc, #288]	@ (8011254 <StartIOTask+0x128>)
 8011132:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011136:	900c      	str	r0, [sp, #48]	@ 0x30
 8011138:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
	GPIO_TypeDef* portCoils[] = {coil1_GPIO_Port, coil2_GPIO_Port, coil3_GPIO_Port};
 801113c:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 8011140:	f103 0408 	add.w	r4, r3, #8
 8011144:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011148:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	uint16_t pinInputs[] = {input1_Pin, input2_Pin, input3_Pin};
 801114c:	3314      	adds	r3, #20
 801114e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011152:	9007      	str	r0, [sp, #28]
 8011154:	f8ad 1020 	strh.w	r1, [sp, #32]
	GPIO_TypeDef* portInputs[] = {input1_GPIO_Port, input2_GPIO_Port, input3_GPIO_Port};
 8011158:	ab04      	add	r3, sp, #16
 801115a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801115e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if ((sizeof(pinCoils) / sizeof(pinCoils[0])) != OUTPUTS_COUNT ||
 8011162:	e06f      	b.n	8011244 <StartIOTask+0x118>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 8011164:	2300      	movs	r3, #0
 8011166:	461a      	mov	r2, r3
 8011168:	a901      	add	r1, sp, #4
 801116a:	483b      	ldr	r0, [pc, #236]	@ (8011258 <StartIOTask+0x12c>)
 801116c:	6800      	ldr	r0, [r0, #0]
 801116e:	f005 feb8 	bl	8016ee2 <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011172:	2400      	movs	r4, #0
 8011174:	e00e      	b.n	8011194 <StartIOTask+0x68>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 8011176:	2200      	movs	r2, #0
 8011178:	ab0e      	add	r3, sp, #56	@ 0x38
 801117a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801117e:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 8011182:	ab0e      	add	r3, sp, #56	@ 0x38
 8011184:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011188:	f853 0c14 	ldr.w	r0, [r3, #-20]
 801118c:	f003 fe2f 	bl	8014dee <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011190:	3401      	adds	r4, #1
 8011192:	b2e4      	uxtb	r4, r4
 8011194:	2c02      	cmp	r4, #2
 8011196:	d85b      	bhi.n	8011250 <StartIOTask+0x124>
		     if (pinOutputs_w[i]) {
 8011198:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801119c:	446b      	add	r3, sp
 801119e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d0e7      	beq.n	8011176 <StartIOTask+0x4a>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 80111a6:	2201      	movs	r2, #1
 80111a8:	ab0e      	add	r3, sp, #56	@ 0x38
 80111aa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80111ae:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 80111b2:	ab0e      	add	r3, sp, #56	@ 0x38
 80111b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80111b8:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80111bc:	f003 fe17 	bl	8014dee <HAL_GPIO_WritePin>
 80111c0:	e7e6      	b.n	8011190 <StartIOTask+0x64>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 80111c2:	ab0e      	add	r3, sp, #56	@ 0x38
 80111c4:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 80111c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80111cc:	f832 1c08 	ldrh.w	r1, [r2, #-8]
 80111d0:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80111d4:	f003 fe04 	bl	8014de0 <HAL_GPIO_ReadPin>
 80111d8:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80111dc:	446b      	add	r3, sp
 80111de:	f803 0c30 	strb.w	r0, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80111e2:	3401      	adds	r4, #1
 80111e4:	b2e4      	uxtb	r4, r4
 80111e6:	2c02      	cmp	r4, #2
 80111e8:	d9eb      	bls.n	80111c2 <StartIOTask+0x96>
	osMessageQueueReset(outputReadQHandle);
 80111ea:	4c1c      	ldr	r4, [pc, #112]	@ (801125c <StartIOTask+0x130>)
 80111ec:	6820      	ldr	r0, [r4, #0]
 80111ee:	f005 fec6 	bl	8016f7e <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 80111f2:	2300      	movs	r3, #0
 80111f4:	461a      	mov	r2, r3
 80111f6:	a902      	add	r1, sp, #8
 80111f8:	6820      	ldr	r0, [r4, #0]
 80111fa:	f005 fe30 	bl	8016e5e <osMessageQueuePut>
	for (i = 0; i < INPUTS_COUNT; i++) {
 80111fe:	2400      	movs	r4, #0
 8011200:	e011      	b.n	8011226 <StartIOTask+0xfa>
		pinInputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]);
 8011202:	ab0e      	add	r3, sp, #56	@ 0x38
 8011204:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8011208:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801120c:	f832 1c1c 	ldrh.w	r1, [r2, #-28]
 8011210:	f853 0c28 	ldr.w	r0, [r3, #-40]
 8011214:	f003 fde4 	bl	8014de0 <HAL_GPIO_ReadPin>
 8011218:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801121c:	446b      	add	r3, sp
 801121e:	f803 0c2c 	strb.w	r0, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 8011222:	3401      	adds	r4, #1
 8011224:	b2e4      	uxtb	r4, r4
 8011226:	2c02      	cmp	r4, #2
 8011228:	d9eb      	bls.n	8011202 <StartIOTask+0xd6>
	osMessageQueueReset(inputReadQHandle);
 801122a:	4c0d      	ldr	r4, [pc, #52]	@ (8011260 <StartIOTask+0x134>)
 801122c:	6820      	ldr	r0, [r4, #0]
 801122e:	f005 fea6 	bl	8016f7e <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 8011232:	2300      	movs	r3, #0
 8011234:	461a      	mov	r2, r3
 8011236:	a903      	add	r1, sp, #12
 8011238:	6820      	ldr	r0, [r4, #0]
 801123a:	f005 fe10 	bl	8016e5e <osMessageQueuePut>
    osDelay(1);
 801123e:	2001      	movs	r0, #1
 8011240:	f005 fd15 	bl	8016c6e <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 8011244:	4b04      	ldr	r3, [pc, #16]	@ (8011258 <StartIOTask+0x12c>)
 8011246:	6818      	ldr	r0, [r3, #0]
 8011248:	f005 fe8c 	bl	8016f64 <osMessageQueueGetCount>
 801124c:	2800      	cmp	r0, #0
 801124e:	d189      	bne.n	8011164 <StartIOTask+0x38>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011250:	2400      	movs	r4, #0
 8011252:	e7c8      	b.n	80111e6 <StartIOTask+0xba>
 8011254:	08032d98 	.word	0x08032d98
 8011258:	20000814 	.word	0x20000814
 801125c:	20000818 	.word	0x20000818
 8011260:	2000081c 	.word	0x2000081c

08011264 <add_log_mess_to_q>:
				xQueueOverwrite(outputWriteQHandle, output);
			}
	}
}

void add_log_mess_to_q(struct log_message mess){
 8011264:	b084      	sub	sp, #16
 8011266:	b508      	push	{r3, lr}
 8011268:	f10d 0c08 	add.w	ip, sp, #8
 801126c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	osMessageQueuePut(loggingQHandle,  &mess, 0, 0);
 8011270:	2300      	movs	r3, #0
 8011272:	461a      	mov	r2, r3
 8011274:	4661      	mov	r1, ip
 8011276:	4804      	ldr	r0, [pc, #16]	@ (8011288 <add_log_mess_to_q+0x24>)
 8011278:	6800      	ldr	r0, [r0, #0]
 801127a:	f005 fdf0 	bl	8016e5e <osMessageQueuePut>

}
 801127e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011282:	b004      	add	sp, #16
 8011284:	4770      	bx	lr
 8011286:	bf00      	nop
 8011288:	2000080c 	.word	0x2000080c

0801128c <StartDisplayTask>:
{
 801128c:	b570      	push	{r4, r5, r6, lr}
 801128e:	b08a      	sub	sp, #40	@ 0x28
	osDelay(1000);//
 8011290:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011294:	f005 fceb 	bl	8016c6e <osDelay>
	SSD1306_Init (); // initialise the display
 8011298:	f005 fb82 	bl	80169a0 <SSD1306_Init>
	osDelay(100);//
 801129c:	2064      	movs	r0, #100	@ 0x64
 801129e:	f005 fce6 	bl	8016c6e <osDelay>
    SSD1306_GotoXY(x=1,y=0);
 80112a2:	2100      	movs	r1, #0
 80112a4:	2001      	movs	r0, #1
 80112a6:	f005 fadf 	bl	8016868 <SSD1306_GotoXY>
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80112aa:	2000      	movs	r0, #0
 80112ac:	f005 faa0 	bl	80167f0 <SSD1306_Fill>
    SSD1306_Puts("Compiled: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80112b0:	4c48      	ldr	r4, [pc, #288]	@ (80113d4 <StartDisplayTask+0x148>)
 80112b2:	2201      	movs	r2, #1
 80112b4:	4621      	mov	r1, r4
 80112b6:	4848      	ldr	r0, [pc, #288]	@ (80113d8 <StartDisplayTask+0x14c>)
 80112b8:	f005 fb2a 	bl	8016910 <SSD1306_Puts>
    SSD1306_Puts(__TIME__, &Font_7x10, SSD1306_COLOR_WHITE);
 80112bc:	2201      	movs	r2, #1
 80112be:	4621      	mov	r1, r4
 80112c0:	4846      	ldr	r0, [pc, #280]	@ (80113dc <StartDisplayTask+0x150>)
 80112c2:	f005 fb25 	bl	8016910 <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80112c6:	210b      	movs	r1, #11
 80112c8:	2001      	movs	r0, #1
 80112ca:	f005 facd 	bl	8016868 <SSD1306_GotoXY>
    SSD1306_Puts(__DATE__, &Font_7x10, SSD1306_COLOR_WHITE);
 80112ce:	2201      	movs	r2, #1
 80112d0:	4621      	mov	r1, r4
 80112d2:	4843      	ldr	r0, [pc, #268]	@ (80113e0 <StartDisplayTask+0x154>)
 80112d4:	f005 fb1c 	bl	8016910 <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80112d8:	2116      	movs	r1, #22
 80112da:	2001      	movs	r0, #1
 80112dc:	f005 fac4 	bl	8016868 <SSD1306_GotoXY>
	SSD1306_Puts("MAC: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80112e0:	2201      	movs	r2, #1
 80112e2:	4621      	mov	r1, r4
 80112e4:	483f      	ldr	r0, [pc, #252]	@ (80113e4 <StartDisplayTask+0x158>)
 80112e6:	f005 fb13 	bl	8016910 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 80112ea:	2121      	movs	r1, #33	@ 0x21
 80112ec:	2001      	movs	r0, #1
 80112ee:	f005 fabb 	bl	8016868 <SSD1306_GotoXY>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 80112f2:	4b3d      	ldr	r3, [pc, #244]	@ (80113e8 <StartDisplayTask+0x15c>)
 80112f4:	6859      	ldr	r1, [r3, #4]
 80112f6:	780a      	ldrb	r2, [r1, #0]
 80112f8:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 80112fa:	7888      	ldrb	r0, [r1, #2]
 80112fc:	78cd      	ldrb	r5, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 80112fe:	790e      	ldrb	r6, [r1, #4]
 8011300:	7949      	ldrb	r1, [r1, #5]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011302:	9103      	str	r1, [sp, #12]
 8011304:	9602      	str	r6, [sp, #8]
 8011306:	9501      	str	r5, [sp, #4]
 8011308:	9000      	str	r0, [sp, #0]
 801130a:	4938      	ldr	r1, [pc, #224]	@ (80113ec <StartDisplayTask+0x160>)
 801130c:	a805      	add	r0, sp, #20
 801130e:	f017 fff5 	bl	80292fc <sprintf>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011312:	2201      	movs	r2, #1
 8011314:	4621      	mov	r1, r4
 8011316:	a805      	add	r0, sp, #20
 8011318:	f005 fafa 	bl	8016910 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 801131c:	f005 fbea 	bl	8016af4 <SSD1306_UpdateScreen>
    vTaskDelay(3000);
 8011320:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011324:	f007 f80e 	bl	8018344 <vTaskDelay>
    int i=0;
 8011328:	2500      	movs	r5, #0
 801132a:	e003      	b.n	8011334 <StartDisplayTask+0xa8>
		osDelay(1000);
 801132c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011330:	f005 fc9d 	bl	8016c6e <osDelay>
		SSD1306_GotoXY(x=1,y=0);
 8011334:	2100      	movs	r1, #0
 8011336:	2001      	movs	r0, #1
 8011338:	f005 fa96 	bl	8016868 <SSD1306_GotoXY>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 801133c:	2000      	movs	r0, #0
 801133e:	f005 fa57 	bl	80167f0 <SSD1306_Fill>
		SSD1306_Puts("IP:", &Font_7x10, SSD1306_COLOR_WHITE);
 8011342:	4c24      	ldr	r4, [pc, #144]	@ (80113d4 <StartDisplayTask+0x148>)
 8011344:	2201      	movs	r2, #1
 8011346:	4621      	mov	r1, r4
 8011348:	4829      	ldr	r0, [pc, #164]	@ (80113f0 <StartDisplayTask+0x164>)
 801134a:	f005 fae1 	bl	8016910 <SSD1306_Puts>
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 801134e:	4b26      	ldr	r3, [pc, #152]	@ (80113e8 <StartDisplayTask+0x15c>)
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011354:	0e13      	lsrs	r3, r2, #24
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 8011356:	9301      	str	r3, [sp, #4]
 8011358:	f3c2 4307 	ubfx	r3, r2, #16, #8
 801135c:	9300      	str	r3, [sp, #0]
 801135e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011362:	b2d2      	uxtb	r2, r2
 8011364:	4923      	ldr	r1, [pc, #140]	@ (80113f4 <StartDisplayTask+0x168>)
 8011366:	a805      	add	r0, sp, #20
 8011368:	f017 ffc8 	bl	80292fc <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801136c:	2201      	movs	r2, #1
 801136e:	4621      	mov	r1, r4
 8011370:	a805      	add	r0, sp, #20
 8011372:	f005 facd 	bl	8016910 <SSD1306_Puts>
	    SSD1306_GotoXY(x=1,y=10);
 8011376:	210a      	movs	r1, #10
 8011378:	2001      	movs	r0, #1
 801137a:	f005 fa75 	bl	8016868 <SSD1306_GotoXY>
	    SSD1306_Puts("I=", &Font_7x10, SSD1306_COLOR_WHITE);
 801137e:	2201      	movs	r2, #1
 8011380:	4621      	mov	r1, r4
 8011382:	481d      	ldr	r0, [pc, #116]	@ (80113f8 <StartDisplayTask+0x16c>)
 8011384:	f005 fac4 	bl	8016910 <SSD1306_Puts>
	    sprintf(buf,"%d", ++i);
 8011388:	3501      	adds	r5, #1
 801138a:	462a      	mov	r2, r5
 801138c:	491b      	ldr	r1, [pc, #108]	@ (80113fc <StartDisplayTask+0x170>)
 801138e:	a805      	add	r0, sp, #20
 8011390:	f017 ffb4 	bl	80292fc <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011394:	2201      	movs	r2, #1
 8011396:	4621      	mov	r1, r4
 8011398:	a805      	add	r0, sp, #20
 801139a:	f005 fab9 	bl	8016910 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 801139e:	f005 fba9 	bl	8016af4 <SSD1306_UpdateScreen>
		while(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 80113a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80113a6:	2201      	movs	r2, #1
 80113a8:	2178      	movs	r1, #120	@ 0x78
 80113aa:	4815      	ldr	r0, [pc, #84]	@ (8011400 <StartDisplayTask+0x174>)
 80113ac:	f004 f86a 	bl	8015484 <HAL_I2C_IsDeviceReady>
 80113b0:	2800      	cmp	r0, #0
 80113b2:	d0bb      	beq.n	801132c <StartDisplayTask+0xa0>
			HAL_I2C_DeInit(&hi2c1);
 80113b4:	4812      	ldr	r0, [pc, #72]	@ (8011400 <StartDisplayTask+0x174>)
 80113b6:	f003 ff8f 	bl	80152d8 <HAL_I2C_DeInit>
			vTaskDelay(1000);
 80113ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113be:	f006 ffc1 	bl	8018344 <vTaskDelay>
			MX_I2C1_Init();
 80113c2:	f000 fbc9 	bl	8011b58 <MX_I2C1_Init>
			vTaskDelay(1000);
 80113c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113ca:	f006 ffbb 	bl	8018344 <vTaskDelay>
			SSD1306_Init ();
 80113ce:	f005 fae7 	bl	80169a0 <SSD1306_Init>
 80113d2:	e7e6      	b.n	80113a2 <StartDisplayTask+0x116>
 80113d4:	20000088 	.word	0x20000088
 80113d8:	08033014 	.word	0x08033014
 80113dc:	08033020 	.word	0x08033020
 80113e0:	0803302c 	.word	0x0803302c
 80113e4:	08033038 	.word	0x08033038
 80113e8:	20000834 	.word	0x20000834
 80113ec:	08033040 	.word	0x08033040
 80113f0:	08033060 	.word	0x08033060
 80113f4:	08033064 	.word	0x08033064
 80113f8:	08033074 	.word	0x08033074
 80113fc:	0803791c 	.word	0x0803791c
 8011400:	2000083c 	.word	0x2000083c

08011404 <RW_parameters_from_queue>:
void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 8011404:	b508      	push	{r3, lr}
	switch (param_type) {
 8011406:	2901      	cmp	r1, #1
 8011408:	d014      	beq.n	8011434 <RW_parameters_from_queue+0x30>
 801140a:	2902      	cmp	r1, #2
 801140c:	d01a      	beq.n	8011444 <RW_parameters_from_queue+0x40>
 801140e:	b101      	cbz	r1, 8011412 <RW_parameters_from_queue+0xe>
}
 8011410:	bd08      	pop	{r3, pc}
			if (direction == S_READ){
 8011412:	b14a      	cbz	r2, 8011428 <RW_parameters_from_queue+0x24>
			}else if (direction == S_WRITE){
 8011414:	2a01      	cmp	r2, #1
 8011416:	d1fb      	bne.n	8011410 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(mqttQHandle, pr);
 8011418:	2302      	movs	r3, #2
 801141a:	2200      	movs	r2, #0
 801141c:	4601      	mov	r1, r0
 801141e:	4812      	ldr	r0, [pc, #72]	@ (8011468 <RW_parameters_from_queue+0x64>)
 8011420:	6800      	ldr	r0, [r0, #0]
 8011422:	f005 ff83 	bl	801732c <xQueueGenericSend>
 8011426:	e7f3      	b.n	8011410 <RW_parameters_from_queue+0xc>
				xQueuePeek(mqttQHandle, pr, 0);
 8011428:	4601      	mov	r1, r0
 801142a:	4b0f      	ldr	r3, [pc, #60]	@ (8011468 <RW_parameters_from_queue+0x64>)
 801142c:	6818      	ldr	r0, [r3, #0]
 801142e:	f006 fa90 	bl	8017952 <xQueuePeek>
 8011432:	e7ed      	b.n	8011410 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 8011434:	2a00      	cmp	r2, #0
 8011436:	d1eb      	bne.n	8011410 <RW_parameters_from_queue+0xc>
				xQueuePeek(inputReadQHandle, input, 0);
 8011438:	4601      	mov	r1, r0
 801143a:	4b0c      	ldr	r3, [pc, #48]	@ (801146c <RW_parameters_from_queue+0x68>)
 801143c:	6818      	ldr	r0, [r3, #0]
 801143e:	f006 fa88 	bl	8017952 <xQueuePeek>
 8011442:	e7e5      	b.n	8011410 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 8011444:	b14a      	cbz	r2, 801145a <RW_parameters_from_queue+0x56>
			}else if(direction == S_WRITE){
 8011446:	2a01      	cmp	r2, #1
 8011448:	d1e2      	bne.n	8011410 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(outputWriteQHandle, output);
 801144a:	2302      	movs	r3, #2
 801144c:	2200      	movs	r2, #0
 801144e:	4601      	mov	r1, r0
 8011450:	4807      	ldr	r0, [pc, #28]	@ (8011470 <RW_parameters_from_queue+0x6c>)
 8011452:	6800      	ldr	r0, [r0, #0]
 8011454:	f005 ff6a 	bl	801732c <xQueueGenericSend>
}
 8011458:	e7da      	b.n	8011410 <RW_parameters_from_queue+0xc>
				xQueuePeek(outputReadQHandle, output, 0);
 801145a:	4601      	mov	r1, r0
 801145c:	4b05      	ldr	r3, [pc, #20]	@ (8011474 <RW_parameters_from_queue+0x70>)
 801145e:	6818      	ldr	r0, [r3, #0]
 8011460:	f006 fa77 	bl	8017952 <xQueuePeek>
 8011464:	e7d4      	b.n	8011410 <RW_parameters_from_queue+0xc>
 8011466:	bf00      	nop
 8011468:	20000810 	.word	0x20000810
 801146c:	2000081c 	.word	0x2000081c
 8011470:	20000814 	.word	0x20000814
 8011474:	20000818 	.word	0x20000818

08011478 <StartSettingsTask>:
{
 8011478:	b510      	push	{r4, lr}
 801147a:	b0b4      	sub	sp, #208	@ 0xd0
	size_t  f_size = 0;
 801147c:	2300      	movs	r3, #0
 801147e:	9333      	str	r3, [sp, #204]	@ 0xcc
  SPI_flash_reg_cb(FlashBegin, FlashEnd, FlashSPIrecvBuff, FlashSPIsendByte);
 8011480:	4b3b      	ldr	r3, [pc, #236]	@ (8011570 <StartSettingsTask+0xf8>)
 8011482:	4a3c      	ldr	r2, [pc, #240]	@ (8011574 <StartSettingsTask+0xfc>)
 8011484:	493c      	ldr	r1, [pc, #240]	@ (8011578 <StartSettingsTask+0x100>)
 8011486:	483d      	ldr	r0, [pc, #244]	@ (801157c <StartSettingsTask+0x104>)
 8011488:	f003 f844 	bl	8014514 <SPI_flash_reg_cb>
  if (lfs_fs_ll_init(FS_Lock, FS_Unlock) < 0){
 801148c:	493c      	ldr	r1, [pc, #240]	@ (8011580 <StartSettingsTask+0x108>)
 801148e:	483d      	ldr	r0, [pc, #244]	@ (8011584 <StartSettingsTask+0x10c>)
 8011490:	f008 f81e 	bl	80194d0 <lfs_fs_ll_init>
 8011494:	2800      	cmp	r0, #0
 8011496:	db31      	blt.n	80114fc <StartSettingsTask+0x84>
  mg_fs_lfs_mkdir("/web");
 8011498:	483b      	ldr	r0, [pc, #236]	@ (8011588 <StartSettingsTask+0x110>)
 801149a:	f008 f80d 	bl	80194b8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 801149e:	4c3b      	ldr	r4, [pc, #236]	@ (801158c <StartSettingsTask+0x114>)
 80114a0:	4620      	mov	r0, r4
 80114a2:	f007 fffd 	bl	80194a0 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 80114a6:	483a      	ldr	r0, [pc, #232]	@ (8011590 <StartSettingsTask+0x118>)
 80114a8:	f007 fffa 	bl	80194a0 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 80114ac:	4620      	mov	r0, r4
 80114ae:	f008 f803 	bl	80194b8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 80114b2:	4838      	ldr	r0, [pc, #224]	@ (8011594 <StartSettingsTask+0x11c>)
 80114b4:	f008 f800 	bl	80194b8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/certs");
 80114b8:	4837      	ldr	r0, [pc, #220]	@ (8011598 <StartSettingsTask+0x120>)
 80114ba:	f007 fffd 	bl	80194b8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/log");
 80114be:	4837      	ldr	r0, [pc, #220]	@ (801159c <StartSettingsTask+0x124>)
 80114c0:	f007 fffa 	bl	80194b8 <mg_fs_lfs_mkdir>
  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 80114c4:	2200      	movs	r2, #0
 80114c6:	a933      	add	r1, sp, #204	@ 0xcc
 80114c8:	4835      	ldr	r0, [pc, #212]	@ (80115a0 <StartSettingsTask+0x128>)
 80114ca:	f007 ff3d 	bl	8019348 <mg_fs_lfs_status>
 80114ce:	b1c0      	cbz	r0, 8011502 <StartSettingsTask+0x8a>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 80114d0:	2101      	movs	r1, #1
 80114d2:	4833      	ldr	r0, [pc, #204]	@ (80115a0 <StartSettingsTask+0x128>)
 80114d4:	f007 ff76 	bl	80193c4 <mg_fs_lfs_open>
 80114d8:	4604      	mov	r4, r0
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 80114da:	22c6      	movs	r2, #198	@ 0xc6
 80114dc:	a901      	add	r1, sp, #4
 80114de:	f007 ffa1 	bl	8019424 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 80114e2:	4620      	mov	r0, r4
 80114e4:	f007 ff92 	bl	801940c <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 80114e8:	2200      	movs	r2, #0
 80114ea:	f88d 2004 	strb.w	r2, [sp, #4]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80114ee:	2302      	movs	r3, #2
 80114f0:	a901      	add	r1, sp, #4
 80114f2:	482c      	ldr	r0, [pc, #176]	@ (80115a4 <StartSettingsTask+0x12c>)
 80114f4:	6800      	ldr	r0, [r0, #0]
 80114f6:	f005 ff19 	bl	801732c <xQueueGenericSend>
 80114fa:	e013      	b.n	8011524 <StartSettingsTask+0xac>
	  HAL_NVIC_SystemReset(); //TODO fo Release uncomment
 80114fc:	f003 fb00 	bl	8014b00 <HAL_NVIC_SystemReset>
 8011500:	e7ca      	b.n	8011498 <StartSettingsTask+0x20>
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 8011502:	22c6      	movs	r2, #198	@ 0xc6
 8011504:	2100      	movs	r1, #0
 8011506:	a801      	add	r0, sp, #4
 8011508:	f018 faba 	bl	8029a80 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 801150c:	2302      	movs	r3, #2
 801150e:	2200      	movs	r2, #0
 8011510:	a901      	add	r1, sp, #4
 8011512:	4824      	ldr	r0, [pc, #144]	@ (80115a4 <StartSettingsTask+0x12c>)
 8011514:	6800      	ldr	r0, [r0, #0]
 8011516:	f005 ff09 	bl	801732c <xQueueGenericSend>
 801151a:	e003      	b.n	8011524 <StartSettingsTask+0xac>
	  osDelay(1000);
 801151c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011520:	f005 fba5 	bl	8016c6e <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 8011524:	2200      	movs	r2, #0
 8011526:	a901      	add	r1, sp, #4
 8011528:	4b1e      	ldr	r3, [pc, #120]	@ (80115a4 <StartSettingsTask+0x12c>)
 801152a:	6818      	ldr	r0, [r3, #0]
 801152c:	f006 fa11 	bl	8017952 <xQueuePeek>
	  if(mqtt_config.save){
 8011530:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d0f1      	beq.n	801151c <StartSettingsTask+0xa4>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 8011538:	4c19      	ldr	r4, [pc, #100]	@ (80115a0 <StartSettingsTask+0x128>)
 801153a:	4620      	mov	r0, r4
 801153c:	f007 ffb0 	bl	80194a0 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 8011540:	2102      	movs	r1, #2
 8011542:	4620      	mov	r0, r4
 8011544:	f007 ff3e 	bl	80193c4 <mg_fs_lfs_open>
 8011548:	4604      	mov	r4, r0
 801154a:	2800      	cmp	r0, #0
 801154c:	d0e6      	beq.n	801151c <StartSettingsTask+0xa4>
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 801154e:	22c6      	movs	r2, #198	@ 0xc6
 8011550:	a901      	add	r1, sp, #4
 8011552:	f007 ff73 	bl	801943c <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 8011556:	4620      	mov	r0, r4
 8011558:	f007 ff58 	bl	801940c <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 801155c:	2200      	movs	r2, #0
 801155e:	f88d 2004 	strb.w	r2, [sp, #4]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011562:	2302      	movs	r3, #2
 8011564:	a901      	add	r1, sp, #4
 8011566:	480f      	ldr	r0, [pc, #60]	@ (80115a4 <StartSettingsTask+0x12c>)
 8011568:	6800      	ldr	r0, [r0, #0]
 801156a:	f005 fedf 	bl	801732c <xQueueGenericSend>
 801156e:	e7d5      	b.n	801151c <StartSettingsTask+0xa4>
 8011570:	080116fd 	.word	0x080116fd
 8011574:	08011721 	.word	0x08011721
 8011578:	08011119 	.word	0x08011119
 801157c:	08011105 	.word	0x08011105
 8011580:	0801174d 	.word	0x0801174d
 8011584:	08011739 	.word	0x08011739
 8011588:	08033078 	.word	0x08033078
 801158c:	08033080 	.word	0x08033080
 8011590:	0803308c 	.word	0x0803308c
 8011594:	0803309c 	.word	0x0803309c
 8011598:	080330a8 	.word	0x080330a8
 801159c:	080330b0 	.word	0x080330b0
 80115a0:	080330b8 	.word	0x080330b8
 80115a4:	20000810 	.word	0x20000810

080115a8 <StartLoggingTask>:
{
 80115a8:	b530      	push	{r4, r5, lr}
 80115aa:	b0d1      	sub	sp, #324	@ 0x144
	osDelay(2000);
 80115ac:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80115b0:	f005 fb5d 	bl	8016c6e <osDelay>
	reg_logging_fn(add_log_mess_to_q);
 80115b4:	483c      	ldr	r0, [pc, #240]	@ (80116a8 <StartLoggingTask+0x100>)
 80115b6:	f000 fb57 	bl	8011c68 <reg_logging_fn>
	logger_set_level(L_INFO);
 80115ba:	2001      	movs	r0, #1
 80115bc:	f000 fb5a 	bl	8011c74 <logger_set_level>
	logging(L_INFO, "Device started...");
 80115c0:	493a      	ldr	r1, [pc, #232]	@ (80116ac <StartLoggingTask+0x104>)
 80115c2:	2001      	movs	r0, #1
 80115c4:	f000 fb5c 	bl	8011c80 <logging>
	uint32_t count = 2000;
 80115c8:	f44f 64fa 	mov.w	r4, #2000	@ 0x7d0
 80115cc:	e048      	b.n	8011660 <StartLoggingTask+0xb8>
		  osMessageQueueGet(loggingQHandle, &log, 0, 0);
 80115ce:	2300      	movs	r3, #0
 80115d0:	461a      	mov	r2, r3
 80115d2:	a907      	add	r1, sp, #28
 80115d4:	4836      	ldr	r0, [pc, #216]	@ (80116b0 <StartLoggingTask+0x108>)
 80115d6:	6800      	ldr	r0, [r0, #0]
 80115d8:	f005 fc83 	bl	8016ee2 <osMessageQueueGet>
		  f_pointer = mg_fs_lfs_open(LOG_FILE_LOCATION, MG_FS_WRITE);
 80115dc:	2102      	movs	r1, #2
 80115de:	4835      	ldr	r0, [pc, #212]	@ (80116b4 <StartLoggingTask+0x10c>)
 80115e0:	f007 fef0 	bl	80193c4 <mg_fs_lfs_open>
 80115e4:	4605      	mov	r5, r0
		  mg_fs_lfs_write(f_pointer, &log.log_text, log.log_len); //
 80115e6:	f89d 211d 	ldrb.w	r2, [sp, #285]	@ 0x11d
 80115ea:	f10d 011d 	add.w	r1, sp, #29
 80115ee:	f007 ff25 	bl	801943c <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 80115f2:	4628      	mov	r0, r5
 80115f4:	f007 ff0a 	bl	801940c <mg_fs_lfs_close>
 80115f8:	e038      	b.n	801166c <StartLoggingTask+0xc4>
    	vPortGetHeapStats(&heap_status);
 80115fa:	a848      	add	r0, sp, #288	@ 0x120
 80115fc:	f007 fdfc 	bl	80191f8 <vPortGetHeapStats>
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
 8011600:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8011602:	9304      	str	r3, [sp, #16]
 8011604:	9b4d      	ldr	r3, [sp, #308]	@ 0x134
 8011606:	9303      	str	r3, [sp, #12]
 8011608:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 801160a:	9302      	str	r3, [sp, #8]
 801160c:	9b4b      	ldr	r3, [sp, #300]	@ 0x12c
 801160e:	9301      	str	r3, [sp, #4]
 8011610:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 8011612:	9300      	str	r3, [sp, #0]
 8011614:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 8011616:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8011618:	4927      	ldr	r1, [pc, #156]	@ (80116b8 <StartLoggingTask+0x110>)
 801161a:	2001      	movs	r0, #1
 801161c:	f000 fb30 	bl	8011c80 <logging>
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011620:	4c26      	ldr	r4, [pc, #152]	@ (80116bc <StartLoggingTask+0x114>)
 8011622:	6863      	ldr	r3, [r4, #4]
 8011624:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011626:	0e13      	lsrs	r3, r2, #24
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8011628:	9301      	str	r3, [sp, #4]
 801162a:	f3c2 4307 	ubfx	r3, r2, #16, #8
 801162e:	9300      	str	r3, [sp, #0]
 8011630:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011634:	b2d2      	uxtb	r2, r2
 8011636:	4922      	ldr	r1, [pc, #136]	@ (80116c0 <StartLoggingTask+0x118>)
 8011638:	2001      	movs	r0, #1
 801163a:	f000 fb21 	bl	8011c80 <logging>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 801163e:	6861      	ldr	r1, [r4, #4]
 8011640:	780a      	ldrb	r2, [r1, #0]
 8011642:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011644:	7888      	ldrb	r0, [r1, #2]
 8011646:	78cc      	ldrb	r4, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8011648:	790d      	ldrb	r5, [r1, #4]
 801164a:	7949      	ldrb	r1, [r1, #5]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 801164c:	9103      	str	r1, [sp, #12]
 801164e:	9502      	str	r5, [sp, #8]
 8011650:	9401      	str	r4, [sp, #4]
 8011652:	9000      	str	r0, [sp, #0]
 8011654:	491b      	ldr	r1, [pc, #108]	@ (80116c4 <StartLoggingTask+0x11c>)
 8011656:	2001      	movs	r0, #1
 8011658:	f000 fb12 	bl	8011c80 <logging>
    	count = 0;
 801165c:	2400      	movs	r4, #0
    count ++;
 801165e:	3401      	adds	r4, #1
	  if (osMessageQueueGetCount(loggingQHandle)){
 8011660:	4b13      	ldr	r3, [pc, #76]	@ (80116b0 <StartLoggingTask+0x108>)
 8011662:	6818      	ldr	r0, [r3, #0]
 8011664:	f005 fc7e 	bl	8016f64 <osMessageQueueGetCount>
 8011668:	2800      	cmp	r0, #0
 801166a:	d1b0      	bne.n	80115ce <StartLoggingTask+0x26>
    osDelay(500);
 801166c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011670:	f005 fafd 	bl	8016c6e <osDelay>
    if (count == 2000){
 8011674:	f5b4 6ffa 	cmp.w	r4, #2000	@ 0x7d0
 8011678:	d1f1      	bne.n	801165e <StartLoggingTask+0xb6>
    	mg_fs_lfs_status(LOG_FILE_LOCATION, &fs_size, NULL);
 801167a:	2200      	movs	r2, #0
 801167c:	a94f      	add	r1, sp, #316	@ 0x13c
 801167e:	480d      	ldr	r0, [pc, #52]	@ (80116b4 <StartLoggingTask+0x10c>)
 8011680:	f007 fe62 	bl	8019348 <mg_fs_lfs_status>
    	if (fs_size > LOG_FILE_MAX_SIZE){
 8011684:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 8011686:	f24c 3350 	movw	r3, #50000	@ 0xc350
 801168a:	429a      	cmp	r2, r3
 801168c:	d9b5      	bls.n	80115fa <StartLoggingTask+0x52>
    		mg_fs_lfs_remove(LOG_FILE_LOCATION_OLD);
 801168e:	4c0e      	ldr	r4, [pc, #56]	@ (80116c8 <StartLoggingTask+0x120>)
 8011690:	4620      	mov	r0, r4
 8011692:	f007 ff05 	bl	80194a0 <mg_fs_lfs_remove>
    		mg_fs_lfs_rename(LOG_FILE_LOCATION, LOG_FILE_LOCATION_OLD);
 8011696:	4621      	mov	r1, r4
 8011698:	4806      	ldr	r0, [pc, #24]	@ (80116b4 <StartLoggingTask+0x10c>)
 801169a:	f007 fef5 	bl	8019488 <mg_fs_lfs_rename>
    		logging(L_INFO, "Log file rotated");
 801169e:	490b      	ldr	r1, [pc, #44]	@ (80116cc <StartLoggingTask+0x124>)
 80116a0:	2001      	movs	r0, #1
 80116a2:	f000 faed 	bl	8011c80 <logging>
 80116a6:	e7a8      	b.n	80115fa <StartLoggingTask+0x52>
 80116a8:	08011265 	.word	0x08011265
 80116ac:	080330cc 	.word	0x080330cc
 80116b0:	2000080c 	.word	0x2000080c
 80116b4:	080330e0 	.word	0x080330e0
 80116b8:	08033114 	.word	0x08033114
 80116bc:	20000834 	.word	0x20000834
 80116c0:	080331a8 	.word	0x080331a8
 80116c4:	080331c4 	.word	0x080331c4
 80116c8:	080330f0 	.word	0x080330f0
 80116cc:	08033100 	.word	0x08033100

080116d0 <EthTxn>:
uint8_t EthTxn(void *spi, uint8_t data) {
 80116d0:	b500      	push	{lr}
 80116d2:	b087      	sub	sp, #28
 80116d4:	f88d 100f 	strb.w	r1, [sp, #15]
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 80116d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80116dc:	9300      	str	r3, [sp, #0]
 80116de:	2301      	movs	r3, #1
 80116e0:	f10d 0217 	add.w	r2, sp, #23
 80116e4:	f10d 010f 	add.w	r1, sp, #15
 80116e8:	4803      	ldr	r0, [pc, #12]	@ (80116f8 <EthTxn+0x28>)
 80116ea:	f004 fd1e 	bl	801612a <HAL_SPI_TransmitReceive>
}
 80116ee:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80116f2:	b007      	add	sp, #28
 80116f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80116f8:	20000894 	.word	0x20000894

080116fc <FlashSPIsendByte>:
void FlashSPIsendByte(uint8_t byte){
 80116fc:	b500      	push	{lr}
 80116fe:	b083      	sub	sp, #12
 8011700:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8011704:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011708:	2201      	movs	r2, #1
 801170a:	f10d 0107 	add.w	r1, sp, #7
 801170e:	4803      	ldr	r0, [pc, #12]	@ (801171c <FlashSPIsendByte+0x20>)
 8011710:	f004 fc29 	bl	8015f66 <HAL_SPI_Transmit>
}
 8011714:	b003      	add	sp, #12
 8011716:	f85d fb04 	ldr.w	pc, [sp], #4
 801171a:	bf00      	nop
 801171c:	200008ec 	.word	0x200008ec

08011720 <FlashSPIrecvBuff>:
int FlashSPIrecvBuff(uint8_t * buffer, uint16_t size){
 8011720:	b508      	push	{r3, lr}
 8011722:	460a      	mov	r2, r1
	return HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8011724:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011728:	4601      	mov	r1, r0
 801172a:	4802      	ldr	r0, [pc, #8]	@ (8011734 <FlashSPIrecvBuff+0x14>)
 801172c:	f004 fe27 	bl	801637e <HAL_SPI_Receive>
}
 8011730:	bd08      	pop	{r3, pc}
 8011732:	bf00      	nop
 8011734:	200008ec 	.word	0x200008ec

08011738 <FS_Lock>:
void FS_Lock(void * param){
 8011738:	b508      	push	{r3, lr}
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 801173a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801173e:	4b02      	ldr	r3, [pc, #8]	@ (8011748 <FS_Lock+0x10>)
 8011740:	6818      	ldr	r0, [r3, #0]
 8011742:	f005 faeb 	bl	8016d1c <osMutexAcquire>
}
 8011746:	bd08      	pop	{r3, pc}
 8011748:	20000804 	.word	0x20000804

0801174c <FS_Unlock>:
void FS_Unlock(void * param){
 801174c:	b508      	push	{r3, lr}
	osMutexRelease(FSMutexHandle);
 801174e:	4b02      	ldr	r3, [pc, #8]	@ (8011758 <FS_Unlock+0xc>)
 8011750:	6818      	ldr	r0, [r3, #0]
 8011752:	f005 fb12 	bl	8016d7a <osMutexRelease>
}
 8011756:	bd08      	pop	{r3, pc}
 8011758:	20000804 	.word	0x20000804

0801175c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 801175c:	b508      	push	{r3, lr}
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 801175e:	4829      	ldr	r0, [pc, #164]	@ (8011804 <MX_FREERTOS_Init+0xa8>)
 8011760:	f005 fa93 	bl	8016c8a <osMutexNew>
 8011764:	4b28      	ldr	r3, [pc, #160]	@ (8011808 <MX_FREERTOS_Init+0xac>)
 8011766:	6018      	str	r0, [r3, #0]
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 8011768:	4828      	ldr	r0, [pc, #160]	@ (801180c <MX_FREERTOS_Init+0xb0>)
 801176a:	f005 fa8e 	bl	8016c8a <osMutexNew>
 801176e:	4b28      	ldr	r3, [pc, #160]	@ (8011810 <MX_FREERTOS_Init+0xb4>)
 8011770:	6018      	str	r0, [r3, #0]
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 8011772:	4a28      	ldr	r2, [pc, #160]	@ (8011814 <MX_FREERTOS_Init+0xb8>)
 8011774:	2103      	movs	r1, #3
 8011776:	2001      	movs	r0, #1
 8011778:	f005 fb26 	bl	8016dc8 <osMessageQueueNew>
 801177c:	4b26      	ldr	r3, [pc, #152]	@ (8011818 <MX_FREERTOS_Init+0xbc>)
 801177e:	6018      	str	r0, [r3, #0]
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 8011780:	4a26      	ldr	r2, [pc, #152]	@ (801181c <MX_FREERTOS_Init+0xc0>)
 8011782:	2103      	movs	r1, #3
 8011784:	2001      	movs	r0, #1
 8011786:	f005 fb1f 	bl	8016dc8 <osMessageQueueNew>
 801178a:	4b25      	ldr	r3, [pc, #148]	@ (8011820 <MX_FREERTOS_Init+0xc4>)
 801178c:	6018      	str	r0, [r3, #0]
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 801178e:	4a25      	ldr	r2, [pc, #148]	@ (8011824 <MX_FREERTOS_Init+0xc8>)
 8011790:	2103      	movs	r1, #3
 8011792:	2001      	movs	r0, #1
 8011794:	f005 fb18 	bl	8016dc8 <osMessageQueueNew>
 8011798:	4b23      	ldr	r3, [pc, #140]	@ (8011828 <MX_FREERTOS_Init+0xcc>)
 801179a:	6018      	str	r0, [r3, #0]
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 801179c:	4a23      	ldr	r2, [pc, #140]	@ (801182c <MX_FREERTOS_Init+0xd0>)
 801179e:	21c6      	movs	r1, #198	@ 0xc6
 80117a0:	2001      	movs	r0, #1
 80117a2:	f005 fb11 	bl	8016dc8 <osMessageQueueNew>
 80117a6:	4b22      	ldr	r3, [pc, #136]	@ (8011830 <MX_FREERTOS_Init+0xd4>)
 80117a8:	6018      	str	r0, [r3, #0]
  loggingQHandle = osMessageQueueNew (15, sizeof(log_message_t), &loggingQ_attributes);
 80117aa:	4a22      	ldr	r2, [pc, #136]	@ (8011834 <MX_FREERTOS_Init+0xd8>)
 80117ac:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80117b0:	200f      	movs	r0, #15
 80117b2:	f005 fb09 	bl	8016dc8 <osMessageQueueNew>
 80117b6:	4b20      	ldr	r3, [pc, #128]	@ (8011838 <MX_FREERTOS_Init+0xdc>)
 80117b8:	6018      	str	r0, [r3, #0]
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 80117ba:	4a20      	ldr	r2, [pc, #128]	@ (801183c <MX_FREERTOS_Init+0xe0>)
 80117bc:	2100      	movs	r1, #0
 80117be:	4820      	ldr	r0, [pc, #128]	@ (8011840 <MX_FREERTOS_Init+0xe4>)
 80117c0:	f005 f9f6 	bl	8016bb0 <osThreadNew>
 80117c4:	4b1f      	ldr	r3, [pc, #124]	@ (8011844 <MX_FREERTOS_Init+0xe8>)
 80117c6:	6018      	str	r0, [r3, #0]
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 80117c8:	4a1f      	ldr	r2, [pc, #124]	@ (8011848 <MX_FREERTOS_Init+0xec>)
 80117ca:	2100      	movs	r1, #0
 80117cc:	481f      	ldr	r0, [pc, #124]	@ (801184c <MX_FREERTOS_Init+0xf0>)
 80117ce:	f005 f9ef 	bl	8016bb0 <osThreadNew>
 80117d2:	4b1f      	ldr	r3, [pc, #124]	@ (8011850 <MX_FREERTOS_Init+0xf4>)
 80117d4:	6018      	str	r0, [r3, #0]
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 80117d6:	4a1f      	ldr	r2, [pc, #124]	@ (8011854 <MX_FREERTOS_Init+0xf8>)
 80117d8:	2100      	movs	r1, #0
 80117da:	481f      	ldr	r0, [pc, #124]	@ (8011858 <MX_FREERTOS_Init+0xfc>)
 80117dc:	f005 f9e8 	bl	8016bb0 <osThreadNew>
 80117e0:	4b1e      	ldr	r3, [pc, #120]	@ (801185c <MX_FREERTOS_Init+0x100>)
 80117e2:	6018      	str	r0, [r3, #0]
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 80117e4:	4a1e      	ldr	r2, [pc, #120]	@ (8011860 <MX_FREERTOS_Init+0x104>)
 80117e6:	2100      	movs	r1, #0
 80117e8:	481e      	ldr	r0, [pc, #120]	@ (8011864 <MX_FREERTOS_Init+0x108>)
 80117ea:	f005 f9e1 	bl	8016bb0 <osThreadNew>
 80117ee:	4b1e      	ldr	r3, [pc, #120]	@ (8011868 <MX_FREERTOS_Init+0x10c>)
 80117f0:	6018      	str	r0, [r3, #0]
  loggingTaskHandle = osThreadNew(StartLoggingTask, NULL, &loggingTask_attributes);
 80117f2:	4a1e      	ldr	r2, [pc, #120]	@ (801186c <MX_FREERTOS_Init+0x110>)
 80117f4:	2100      	movs	r1, #0
 80117f6:	481e      	ldr	r0, [pc, #120]	@ (8011870 <MX_FREERTOS_Init+0x114>)
 80117f8:	f005 f9da 	bl	8016bb0 <osThreadNew>
 80117fc:	4b1d      	ldr	r3, [pc, #116]	@ (8011874 <MX_FREERTOS_Init+0x118>)
 80117fe:	6018      	str	r0, [r3, #0]
}
 8011800:	bd08      	pop	{r3, pc}
 8011802:	bf00      	nop
 8011804:	080332c8 	.word	0x080332c8
 8011808:	20000808 	.word	0x20000808
 801180c:	080332b8 	.word	0x080332b8
 8011810:	20000804 	.word	0x20000804
 8011814:	08033338 	.word	0x08033338
 8011818:	2000081c 	.word	0x2000081c
 801181c:	08033320 	.word	0x08033320
 8011820:	20000818 	.word	0x20000818
 8011824:	08033308 	.word	0x08033308
 8011828:	20000814 	.word	0x20000814
 801182c:	080332f0 	.word	0x080332f0
 8011830:	20000810 	.word	0x20000810
 8011834:	080332d8 	.word	0x080332d8
 8011838:	2000080c 	.word	0x2000080c
 801183c:	080333e0 	.word	0x080333e0
 8011840:	080118a1 	.word	0x080118a1
 8011844:	20000830 	.word	0x20000830
 8011848:	080333bc 	.word	0x080333bc
 801184c:	0801112d 	.word	0x0801112d
 8011850:	2000082c 	.word	0x2000082c
 8011854:	08033398 	.word	0x08033398
 8011858:	0801128d 	.word	0x0801128d
 801185c:	20000828 	.word	0x20000828
 8011860:	08033374 	.word	0x08033374
 8011864:	08011479 	.word	0x08011479
 8011868:	20000824 	.word	0x20000824
 801186c:	08033350 	.word	0x08033350
 8011870:	080115a9 	.word	0x080115a9
 8011874:	20000820 	.word	0x20000820

08011878 <EthResetBegin>:
void EthResetBegin(void){
 8011878:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 801187a:	2200      	movs	r2, #0
 801187c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011880:	4801      	ldr	r0, [pc, #4]	@ (8011888 <EthResetBegin+0x10>)
 8011882:	f003 fab4 	bl	8014dee <HAL_GPIO_WritePin>
}
 8011886:	bd08      	pop	{r3, pc}
 8011888:	40020000 	.word	0x40020000

0801188c <EthResetEnd>:
void EthResetEnd(void){
 801188c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 801188e:	2201      	movs	r2, #1
 8011890:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011894:	4801      	ldr	r0, [pc, #4]	@ (801189c <EthResetEnd+0x10>)
 8011896:	f003 faaa 	bl	8014dee <HAL_GPIO_WritePin>
}
 801189a:	bd08      	pop	{r3, pc}
 801189c:	40020000 	.word	0x40020000

080118a0 <StartEthTask>:
{
 80118a0:	b530      	push	{r4, r5, lr}
 80118a2:	b0eb      	sub	sp, #428	@ 0x1ac
  struct               mg_tcpip_spi spi = {
 80118a4:	ad22      	add	r5, sp, #136	@ 0x88
 80118a6:	4b5d      	ldr	r3, [pc, #372]	@ (8011a1c <StartEthTask+0x17c>)
 80118a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80118aa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  struct              mg_tcpip_if   mif = {
 80118ae:	ac02      	add	r4, sp, #8
 80118b0:	2280      	movs	r2, #128	@ 0x80
 80118b2:	2100      	movs	r1, #0
 80118b4:	4620      	mov	r0, r4
 80118b6:	f018 f8e3 	bl	8029a80 <memset>
 80118ba:	2340      	movs	r3, #64	@ 0x40
 80118bc:	f88d 3008 	strb.w	r3, [sp, #8]
 80118c0:	2322      	movs	r3, #34	@ 0x22
 80118c2:	f88d 3009 	strb.w	r3, [sp, #9]
													  *(uint8_t*)(UID_BASE),
 80118c6:	4b56      	ldr	r3, [pc, #344]	@ (8011a20 <StartEthTask+0x180>)
 80118c8:	7c1a      	ldrb	r2, [r3, #16]
  struct              mg_tcpip_if   mif = {
 80118ca:	f88d 200a 	strb.w	r2, [sp, #10]
													  *(uint8_t*)(UID_BASE + 0x02),
 80118ce:	7c9a      	ldrb	r2, [r3, #18]
  struct              mg_tcpip_if   mif = {
 80118d0:	f88d 200b 	strb.w	r2, [sp, #11]
													  *(uint8_t*)(UID_BASE + 0x04),
 80118d4:	7d1a      	ldrb	r2, [r3, #20]
  struct              mg_tcpip_if   mif = {
 80118d6:	f88d 200c 	strb.w	r2, [sp, #12]
													  *(uint8_t*)(UID_BASE + 0x08)
 80118da:	7e1b      	ldrb	r3, [r3, #24]
  struct              mg_tcpip_if   mif = {
 80118dc:	f88d 300d 	strb.w	r3, [sp, #13]
 80118e0:	2301      	movs	r3, #1
 80118e2:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 80118e6:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80118ea:	4b4e      	ldr	r3, [pc, #312]	@ (8011a24 <StartEthTask+0x184>)
 80118ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80118ee:	950c      	str	r5, [sp, #48]	@ 0x30
  mg_full_info.mgr =  &mgr;
 80118f0:	4b4d      	ldr	r3, [pc, #308]	@ (8011a28 <StartEthTask+0x188>)
 80118f2:	a858      	add	r0, sp, #352	@ 0x160
 80118f4:	6018      	str	r0, [r3, #0]
  mg_full_info.mgr_if =  &mif;
 80118f6:	605c      	str	r4, [r3, #4]
  mg_mgr_init(&mgr);        // Mongoose event manager
 80118f8:	f00f f898 	bl	8020a2c <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 80118fc:	4b4b      	ldr	r3, [pc, #300]	@ (8011a2c <StartEthTask+0x18c>)
 80118fe:	2203      	movs	r2, #3
 8011900:	601a      	str	r2, [r3, #0]
  web_handler = dash_hdl(); // Get dashboard handler
 8011902:	f001 fbf1 	bl	80130e8 <dash_hdl>
 8011906:	4604      	mov	r4, r0
  while(mif.mtu == 0){
 8011908:	e00f      	b.n	801192a <StartEthTask+0x8a>
	  EthResetBegin();
 801190a:	f7ff ffb5 	bl	8011878 <EthResetBegin>
	  osDelay(500);
 801190e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011912:	f005 f9ac 	bl	8016c6e <osDelay>
	  EthResetEnd();
 8011916:	f7ff ffb9 	bl	801188c <EthResetEnd>
	  osDelay(2000);
 801191a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 801191e:	f005 f9a6 	bl	8016c6e <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 8011922:	a902      	add	r1, sp, #8
 8011924:	a858      	add	r0, sp, #352	@ 0x160
 8011926:	f014 facd 	bl	8025ec4 <mg_tcpip_init>
  while(mif.mtu == 0){
 801192a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801192e:	2b00      	cmp	r3, #0
 8011930:	d0eb      	beq.n	801190a <StartEthTask+0x6a>
  set_device_id(mif.mac, sizeof(mif.mac));
 8011932:	2106      	movs	r1, #6
 8011934:	a802      	add	r0, sp, #8
 8011936:	f001 fff9 	bl	801392c <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 801193a:	483d      	ldr	r0, [pc, #244]	@ (8011a30 <StartEthTask+0x190>)
 801193c:	f001 fbd8 	bl	80130f0 <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8011940:	4b39      	ldr	r3, [pc, #228]	@ (8011a28 <StartEthTask+0x188>)
 8011942:	4622      	mov	r2, r4
 8011944:	493b      	ldr	r1, [pc, #236]	@ (8011a34 <StartEthTask+0x194>)
 8011946:	a858      	add	r0, sp, #352	@ 0x160
 8011948:	f012 fcea 	bl	8024320 <mg_http_listen>
  while (mif.state != MG_TCPIP_STATE_READY) {
 801194c:	e006      	b.n	801195c <StartEthTask+0xbc>
    mg_mgr_poll(&mgr, 1);
 801194e:	2101      	movs	r1, #1
 8011950:	a858      	add	r0, sp, #352	@ 0x160
 8011952:	f015 f851 	bl	80269f8 <mg_mgr_poll>
    osDelay(1);
 8011956:	2001      	movs	r0, #1
 8011958:	f005 f989 	bl	8016c6e <osDelay>
  while (mif.state != MG_TCPIP_STATE_READY) {
 801195c:	f89d 3084 	ldrb.w	r3, [sp, #132]	@ 0x84
 8011960:	2b03      	cmp	r3, #3
 8011962:	d1f4      	bne.n	801194e <StartEthTask+0xae>
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011964:	4b30      	ldr	r3, [pc, #192]	@ (8011a28 <StartEthTask+0x188>)
 8011966:	685b      	ldr	r3, [r3, #4]
 8011968:	689a      	ldr	r2, [r3, #8]
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 801196a:	0e13      	lsrs	r3, r2, #24
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 801196c:	9301      	str	r3, [sp, #4]
 801196e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011972:	9300      	str	r3, [sp, #0]
 8011974:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011978:	b2d2      	uxtb	r2, r2
 801197a:	492f      	ldr	r1, [pc, #188]	@ (8011a38 <StartEthTask+0x198>)
 801197c:	2001      	movs	r0, #1
 801197e:	f000 f97f 	bl	8011c80 <logging>
  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 8011982:	2200      	movs	r2, #0
 8011984:	4611      	mov	r1, r2
 8011986:	a826      	add	r0, sp, #152	@ 0x98
 8011988:	f7ff fd3c 	bl	8011404 <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 801198c:	f89d 3099 	ldrb.w	r3, [sp, #153]	@ 0x99
 8011990:	b1d3      	cbz	r3, 80119c8 <StartEthTask+0x128>
	  logging(L_INFO, "MQTT function enabled.");
 8011992:	492a      	ldr	r1, [pc, #168]	@ (8011a3c <StartEthTask+0x19c>)
 8011994:	2001      	movs	r0, #1
 8011996:	f000 f973 	bl	8011c80 <logging>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 801199a:	4b25      	ldr	r3, [pc, #148]	@ (8011a30 <StartEthTask+0x190>)
 801199c:	9301      	str	r3, [sp, #4]
 801199e:	f20d 133d 	addw	r3, sp, #317	@ 0x13d
 80119a2:	9300      	str	r3, [sp, #0]
 80119a4:	ab47      	add	r3, sp, #284	@ 0x11c
 80119a6:	f10d 029a 	add.w	r2, sp, #154	@ 0x9a
 80119aa:	a902      	add	r1, sp, #8
 80119ac:	a858      	add	r0, sp, #352	@ 0x160
 80119ae:	f001 fefb 	bl	80137a8 <mqtt_init>
  start_sntp(&mgr);
 80119b2:	a858      	add	r0, sp, #352	@ 0x160
 80119b4:	f002 fb90 	bl	80140d8 <start_sntp>
  ssdp_start_server(&mgr, &mif);
 80119b8:	a902      	add	r1, sp, #8
 80119ba:	a858      	add	r0, sp, #352	@ 0x160
 80119bc:	f002 fd58 	bl	8014470 <ssdp_start_server>
  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 80119c0:	f006 fbb2 	bl	8018128 <xTaskGetTickCount>
 80119c4:	4605      	mov	r5, r0
 80119c6:	e008      	b.n	80119da <StartEthTask+0x13a>
	  logging(L_INFO, "MQTT function disabled");
 80119c8:	491d      	ldr	r1, [pc, #116]	@ (8011a40 <StartEthTask+0x1a0>)
 80119ca:	2001      	movs	r0, #1
 80119cc:	f000 f958 	bl	8011c80 <logging>
 80119d0:	e7ef      	b.n	80119b2 <StartEthTask+0x112>
      osDelay(1);
 80119d2:	2001      	movs	r0, #1
 80119d4:	f005 f94b 	bl	8016c6e <osDelay>
	  last_tick = current_tick; // обновляем значение тиков
 80119d8:	4625      	mov	r5, r4
	  TickType_t current_tick = xTaskGetTickCount();
 80119da:	f006 fba5 	bl	8018128 <xTaskGetTickCount>
 80119de:	4604      	mov	r4, r0
	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 80119e0:	1b41      	subs	r1, r0, r5
 80119e2:	a858      	add	r0, sp, #352	@ 0x160
 80119e4:	f015 f808 	bl	80269f8 <mg_mgr_poll>
      while (mif.driver->up(&mif) == false){
 80119e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80119ea:	68db      	ldr	r3, [r3, #12]
 80119ec:	a802      	add	r0, sp, #8
 80119ee:	4798      	blx	r3
 80119f0:	2800      	cmp	r0, #0
 80119f2:	d1ee      	bne.n	80119d2 <StartEthTask+0x132>
    	  EthResetBegin(); //enable reset state w5500
 80119f4:	f7ff ff40 	bl	8011878 <EthResetBegin>
    	  osDelay(100);
 80119f8:	2064      	movs	r0, #100	@ 0x64
 80119fa:	f005 f938 	bl	8016c6e <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 80119fe:	f7ff ff45 	bl	801188c <EthResetEnd>
    	  osDelay(3000);
 8011a02:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011a06:	f005 f932 	bl	8016c6e <osDelay>
    	  mif.driver->init(&mif);
 8011a0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	a802      	add	r0, sp, #8
 8011a10:	4798      	blx	r3
    	  osDelay(7000);
 8011a12:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8011a16:	f005 f92a 	bl	8016c6e <osDelay>
 8011a1a:	e7e5      	b.n	80119e8 <StartEthTask+0x148>
 8011a1c:	08032db4 	.word	0x08032db4
 8011a20:	1fff7a00 	.word	0x1fff7a00
 8011a24:	20000094 	.word	0x20000094
 8011a28:	20000834 	.word	0x20000834
 8011a2c:	200000a8 	.word	0x200000a8
 8011a30:	08011405 	.word	0x08011405
 8011a34:	080331ec 	.word	0x080331ec
 8011a38:	080331a8 	.word	0x080331a8
 8011a3c:	08033200 	.word	0x08033200
 8011a40:	08033218 	.word	0x08033218

08011a44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8011a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a48:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011a4a:	2400      	movs	r4, #0
 8011a4c:	9403      	str	r4, [sp, #12]
 8011a4e:	9404      	str	r4, [sp, #16]
 8011a50:	9405      	str	r4, [sp, #20]
 8011a52:	9406      	str	r4, [sp, #24]
 8011a54:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011a56:	9400      	str	r4, [sp, #0]
 8011a58:	4b3c      	ldr	r3, [pc, #240]	@ (8011b4c <MX_GPIO_Init+0x108>)
 8011a5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011a5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8011a60:	631a      	str	r2, [r3, #48]	@ 0x30
 8011a62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011a64:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8011a68:	9200      	str	r2, [sp, #0]
 8011a6a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011a6c:	9401      	str	r4, [sp, #4]
 8011a6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011a70:	f042 0201 	orr.w	r2, r2, #1
 8011a74:	631a      	str	r2, [r3, #48]	@ 0x30
 8011a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011a78:	f002 0201 	and.w	r2, r2, #1
 8011a7c:	9201      	str	r2, [sp, #4]
 8011a7e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011a80:	9402      	str	r4, [sp, #8]
 8011a82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011a84:	f042 0202 	orr.w	r2, r2, #2
 8011a88:	631a      	str	r2, [r3, #48]	@ 0x30
 8011a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a8c:	f003 0302 	and.w	r3, r3, #2
 8011a90:	9302      	str	r3, [sp, #8]
 8011a92:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 8011a94:	4e2e      	ldr	r6, [pc, #184]	@ (8011b50 <MX_GPIO_Init+0x10c>)
 8011a96:	4622      	mov	r2, r4
 8011a98:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8011a9c:	4630      	mov	r0, r6
 8011a9e:	f003 f9a6 	bl	8014dee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8011aa2:	4d2c      	ldr	r5, [pc, #176]	@ (8011b54 <MX_GPIO_Init+0x110>)
 8011aa4:	4622      	mov	r2, r4
 8011aa6:	2107      	movs	r1, #7
 8011aa8:	4628      	mov	r0, r5
 8011aaa:	f003 f9a0 	bl	8014dee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8011aae:	2201      	movs	r2, #1
 8011ab0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011ab4:	4628      	mov	r0, r5
 8011ab6:	f003 f99a 	bl	8014dee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8011aba:	2201      	movs	r2, #1
 8011abc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011ac0:	4630      	mov	r0, r6
 8011ac2:	f003 f994 	bl	8014dee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 8011ac6:	f04f 0907 	mov.w	r9, #7
 8011aca:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011ace:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011ad0:	f04f 0802 	mov.w	r8, #2
 8011ad4:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011ad8:	a903      	add	r1, sp, #12
 8011ada:	4630      	mov	r0, r6
 8011adc:	f003 f814 	bl	8014b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 8011ae0:	23e0      	movs	r3, #224	@ 0xe0
 8011ae2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011ae4:	2701      	movs	r7, #1
 8011ae6:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ae8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011aea:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011aec:	a903      	add	r1, sp, #12
 8011aee:	4630      	mov	r0, r6
 8011af0:	f003 f80a 	bl	8014b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8011af4:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011af8:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011afa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011afc:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011afe:	a903      	add	r1, sp, #12
 8011b00:	4628      	mov	r0, r5
 8011b02:	f003 f801 	bl	8014b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8011b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011b0a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011b0c:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b0e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011b10:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8011b14:	a903      	add	r1, sp, #12
 8011b16:	4628      	mov	r0, r5
 8011b18:	f002 fff6 	bl	8014b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 8011b1c:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8011b20:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011b22:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b24:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011b26:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011b2a:	a903      	add	r1, sp, #12
 8011b2c:	4630      	mov	r0, r6
 8011b2e:	f002 ffeb 	bl	8014b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8011b32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011b36:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011b38:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b3a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8011b3c:	a903      	add	r1, sp, #12
 8011b3e:	4628      	mov	r0, r5
 8011b40:	f002 ffe2 	bl	8014b08 <HAL_GPIO_Init>

}
 8011b44:	b009      	add	sp, #36	@ 0x24
 8011b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b4a:	bf00      	nop
 8011b4c:	40023800 	.word	0x40023800
 8011b50:	40020000 	.word	0x40020000
 8011b54:	40020400 	.word	0x40020400

08011b58 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8011b58:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8011b5a:	480b      	ldr	r0, [pc, #44]	@ (8011b88 <MX_I2C1_Init+0x30>)
 8011b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8011b8c <MX_I2C1_Init+0x34>)
 8011b5e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 200000;
 8011b60:	4b0b      	ldr	r3, [pc, #44]	@ (8011b90 <MX_I2C1_Init+0x38>)
 8011b62:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8011b64:	2300      	movs	r3, #0
 8011b66:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8011b68:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011b6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8011b6e:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011b70:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8011b72:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011b74:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011b76:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8011b78:	f003 fad0 	bl	801511c <HAL_I2C_Init>
 8011b7c:	b900      	cbnz	r0, 8011b80 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8011b7e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011b80:	f000 f928 	bl	8011dd4 <Error_Handler>
}
 8011b84:	e7fb      	b.n	8011b7e <MX_I2C1_Init+0x26>
 8011b86:	bf00      	nop
 8011b88:	2000083c 	.word	0x2000083c
 8011b8c:	40005400 	.word	0x40005400
 8011b90:	00030d40 	.word	0x00030d40

08011b94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8011b94:	b530      	push	{r4, r5, lr}
 8011b96:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011b98:	2300      	movs	r3, #0
 8011b9a:	9303      	str	r3, [sp, #12]
 8011b9c:	9304      	str	r3, [sp, #16]
 8011b9e:	9305      	str	r3, [sp, #20]
 8011ba0:	9306      	str	r3, [sp, #24]
 8011ba2:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8011ba4:	6802      	ldr	r2, [r0, #0]
 8011ba6:	4b15      	ldr	r3, [pc, #84]	@ (8011bfc <HAL_I2C_MspInit+0x68>)
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d001      	beq.n	8011bb0 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8011bac:	b009      	add	sp, #36	@ 0x24
 8011bae:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011bb0:	2500      	movs	r5, #0
 8011bb2:	9501      	str	r5, [sp, #4]
 8011bb4:	4c12      	ldr	r4, [pc, #72]	@ (8011c00 <HAL_I2C_MspInit+0x6c>)
 8011bb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011bb8:	f043 0302 	orr.w	r3, r3, #2
 8011bbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8011bbe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011bc0:	f003 0302 	and.w	r3, r3, #2
 8011bc4:	9301      	str	r3, [sp, #4]
 8011bc6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8011bc8:	23c0      	movs	r3, #192	@ 0xc0
 8011bca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011bcc:	2312      	movs	r3, #18
 8011bce:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011bd4:	2303      	movs	r3, #3
 8011bd6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8011bd8:	2304      	movs	r3, #4
 8011bda:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011bdc:	a903      	add	r1, sp, #12
 8011bde:	4809      	ldr	r0, [pc, #36]	@ (8011c04 <HAL_I2C_MspInit+0x70>)
 8011be0:	f002 ff92 	bl	8014b08 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8011be4:	9502      	str	r5, [sp, #8]
 8011be6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011be8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011bec:	6423      	str	r3, [r4, #64]	@ 0x40
 8011bee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011bf4:	9302      	str	r3, [sp, #8]
 8011bf6:	9b02      	ldr	r3, [sp, #8]
}
 8011bf8:	e7d8      	b.n	8011bac <HAL_I2C_MspInit+0x18>
 8011bfa:	bf00      	nop
 8011bfc:	40005400 	.word	0x40005400
 8011c00:	40023800 	.word	0x40023800
 8011c04:	40020400 	.word	0x40020400

08011c08 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 8011c08:	6802      	ldr	r2, [r0, #0]
 8011c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8011c34 <HAL_I2C_MspDeInit+0x2c>)
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d000      	beq.n	8011c12 <HAL_I2C_MspDeInit+0xa>
 8011c10:	4770      	bx	lr
{
 8011c12:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8011c14:	4a08      	ldr	r2, [pc, #32]	@ (8011c38 <HAL_I2C_MspDeInit+0x30>)
 8011c16:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011c18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011c1c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8011c1e:	4c07      	ldr	r4, [pc, #28]	@ (8011c3c <HAL_I2C_MspDeInit+0x34>)
 8011c20:	2140      	movs	r1, #64	@ 0x40
 8011c22:	4620      	mov	r0, r4
 8011c24:	f003 f854 	bl	8014cd0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8011c28:	2180      	movs	r1, #128	@ 0x80
 8011c2a:	4620      	mov	r0, r4
 8011c2c:	f003 f850 	bl	8014cd0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8011c30:	bd10      	pop	{r4, pc}
 8011c32:	bf00      	nop
 8011c34:	40005400 	.word	0x40005400
 8011c38:	40023800 	.word	0x40023800
 8011c3c:	40020400 	.word	0x40020400

08011c40 <proto>:
#define time_ms_now() mg_now()

logging_level_t _level_ = L_DEBUG;
const char *level_strings[] = {"DEBUG", "INFO", "WARNING", "ERROR"};

static void proto(struct log_message mess ){};
 8011c40:	b084      	sub	sp, #16
 8011c42:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011c46:	b004      	add	sp, #16
 8011c48:	4770      	bx	lr

08011c4a <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 8011c4a:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8011c4c:	fb01 f400 	mul.w	r4, r1, r0
 8011c50:	4620      	mov	r0, r4
 8011c52:	f007 fa11 	bl	8019078 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8011c56:	4605      	mov	r5, r0
 8011c58:	b118      	cbz	r0, 8011c62 <mg_calloc+0x18>
 8011c5a:	4622      	mov	r2, r4
 8011c5c:	2100      	movs	r1, #0
 8011c5e:	f017 ff0f 	bl	8029a80 <memset>
  return p;
}
 8011c62:	4628      	mov	r0, r5
 8011c64:	bd38      	pop	{r3, r4, r5, pc}
	...

08011c68 <reg_logging_fn>:

void (*_send_log_mess)(struct log_message mess) = proto;


void reg_logging_fn(void (* fn)(struct log_message)){
	if (fn != NULL){
 8011c68:	b108      	cbz	r0, 8011c6e <reg_logging_fn+0x6>
		_send_log_mess = fn;
 8011c6a:	4a01      	ldr	r2, [pc, #4]	@ (8011c70 <reg_logging_fn+0x8>)
 8011c6c:	6010      	str	r0, [r2, #0]
	}
}
 8011c6e:	4770      	bx	lr
 8011c70:	20000000 	.word	0x20000000

08011c74 <logger_set_level>:

void logger_set_level(logging_level_t l){
	_level_ = l;
 8011c74:	4b01      	ldr	r3, [pc, #4]	@ (8011c7c <logger_set_level+0x8>)
 8011c76:	7018      	strb	r0, [r3, #0]
}
 8011c78:	4770      	bx	lr
 8011c7a:	bf00      	nop
 8011c7c:	20000890 	.word	0x20000890

08011c80 <logging>:

void logging(logging_level_t level, const char *format, ...){
 8011c80:	b40e      	push	{r1, r2, r3}
 8011c82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c84:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
    int formatted_len;
    int time_len;

    char * tmp_buf = NULL;

    if (level < _level_) return;
 8011c88:	4b44      	ldr	r3, [pc, #272]	@ (8011d9c <logging+0x11c>)
 8011c8a:	781b      	ldrb	r3, [r3, #0]
 8011c8c:	4283      	cmp	r3, r0
 8011c8e:	d905      	bls.n	8011c9c <logging+0x1c>
    if (_send_log_mess) {
        _send_log_mess(mess);
    }

    free(tmp_buf);
}
 8011c90:	f50d 7d1c 	add.w	sp, sp, #624	@ 0x270
 8011c94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011c98:	b003      	add	sp, #12
 8011c9a:	4770      	bx	lr
 8011c9c:	4604      	mov	r4, r0
    tmp_buf = calloc(LOG_MES_TEXT_LEN, sizeof(char));
 8011c9e:	2101      	movs	r1, #1
 8011ca0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8011ca4:	f7ff ffd1 	bl	8011c4a <mg_calloc>
    if (!tmp_buf){
 8011ca8:	4605      	mov	r5, r0
 8011caa:	2800      	cmp	r0, #0
 8011cac:	d0f0      	beq.n	8011c90 <logging+0x10>
    memset(&mess, 0, sizeof(log_message_t));
 8011cae:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8011cb2:	2100      	movs	r1, #0
 8011cb4:	a85b      	add	r0, sp, #364	@ 0x16c
 8011cb6:	f017 fee3 	bl	8029a80 <memset>
    mess.log_level = level;
 8011cba:	f88d 416c 	strb.w	r4, [sp, #364]	@ 0x16c
    double ms_now = time_ms_now();
 8011cbe:	f014 ff2f 	bl	8026b20 <mg_now>
 8011cc2:	f7fe fc7b 	bl	80105bc <__aeabi_ul2d>
 8011cc6:	4606      	mov	r6, r0
 8011cc8:	460f      	mov	r7, r1
    time_t now = (time_t)(ms_now / 1000.0);
 8011cca:	2200      	movs	r2, #0
 8011ccc:	4b34      	ldr	r3, [pc, #208]	@ (8011da0 <logging+0x120>)
 8011cce:	f7fe fdd5 	bl	801087c <__aeabi_ddiv>
 8011cd2:	f7ff f86d 	bl	8010db0 <__aeabi_d2lz>
 8011cd6:	e9cd 0158 	strd	r0, r1, [sp, #352]	@ 0x160
    localtime_r(&now, &tm_info);
 8011cda:	a94f      	add	r1, sp, #316	@ 0x13c
 8011cdc:	a858      	add	r0, sp, #352	@ 0x160
 8011cde:	f017 ff65 	bl	8029bac <localtime_r>
    time_len = strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", &tm_info);
 8011ce2:	ab4f      	add	r3, sp, #316	@ 0x13c
 8011ce4:	4a2f      	ldr	r2, [pc, #188]	@ (8011da4 <logging+0x124>)
 8011ce6:	2140      	movs	r1, #64	@ 0x40
 8011ce8:	a83f      	add	r0, sp, #252	@ 0xfc
 8011cea:	f018 fd71 	bl	802a7d0 <strftime>
 8011cee:	4604      	mov	r4, r0
    int millis = (int)(ms_now) % 1000;
 8011cf0:	4630      	mov	r0, r6
 8011cf2:	4639      	mov	r1, r7
 8011cf4:	f7fe ff48 	bl	8010b88 <__aeabi_d2iz>
 8011cf8:	4a2b      	ldr	r2, [pc, #172]	@ (8011da8 <logging+0x128>)
 8011cfa:	fb82 3200 	smull	r3, r2, r2, r0
 8011cfe:	17c3      	asrs	r3, r0, #31
 8011d00:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    time_len += snprintf(time_str + time_len, sizeof(time_str) - time_len, ".%03d", millis);
 8011d04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011d08:	fb02 0313 	mls	r3, r2, r3, r0
 8011d0c:	4a27      	ldr	r2, [pc, #156]	@ (8011dac <logging+0x12c>)
 8011d0e:	f1c4 0140 	rsb	r1, r4, #64	@ 0x40
 8011d12:	a83f      	add	r0, sp, #252	@ 0xfc
 8011d14:	4420      	add	r0, r4
 8011d16:	f017 f989 	bl	802902c <snprintf>
 8011d1a:	4404      	add	r4, r0
    time_str[time_len++] = ' ';
 8011d1c:	1c63      	adds	r3, r4, #1
 8011d1e:	2220      	movs	r2, #32
 8011d20:	a93f      	add	r1, sp, #252	@ 0xfc
 8011d22:	550a      	strb	r2, [r1, r4]
    time_str[time_len++] = '\0';
 8011d24:	2200      	movs	r2, #0
 8011d26:	54ca      	strb	r2, [r1, r3]
    va_start(args, format);
 8011d28:	aba2      	add	r3, sp, #648	@ 0x288
 8011d2a:	935a      	str	r3, [sp, #360]	@ 0x168
    formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN - 3, format, args);
 8011d2c:	f20d 166d 	addw	r6, sp, #365	@ 0x16d
 8011d30:	9aa1      	ldr	r2, [sp, #644]	@ 0x284
 8011d32:	21fd      	movs	r1, #253	@ 0xfd
 8011d34:	4630      	mov	r0, r6
 8011d36:	f017 fc41 	bl	80295bc <vsnprintf>
 8011d3a:	4604      	mov	r4, r0
    snprintf(tmp_buf ,LOG_MES_TEXT_LEN, "%s %s:%s\r\n", time_str, level_strings[mess.log_level], mess.log_text);
 8011d3c:	f89d 216c 	ldrb.w	r2, [sp, #364]	@ 0x16c
 8011d40:	9601      	str	r6, [sp, #4]
 8011d42:	4b1b      	ldr	r3, [pc, #108]	@ (8011db0 <logging+0x130>)
 8011d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d48:	9300      	str	r3, [sp, #0]
 8011d4a:	ab3f      	add	r3, sp, #252	@ 0xfc
 8011d4c:	4a19      	ldr	r2, [pc, #100]	@ (8011db4 <logging+0x134>)
 8011d4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011d52:	4628      	mov	r0, r5
 8011d54:	f017 f96a 	bl	802902c <snprintf>
     if (formatted_len >= 0 && formatted_len < LOG_MES_TEXT_LEN - 10) {
 8011d58:	2cf5      	cmp	r4, #245	@ 0xf5
 8011d5a:	d81b      	bhi.n	8011d94 <logging+0x114>
         mess.log_len = strlen(tmp_buf);
 8011d5c:	4628      	mov	r0, r5
 8011d5e:	f7fe fa9f 	bl	80102a0 <strlen>
 8011d62:	f88d 026d 	strb.w	r0, [sp, #621]	@ 0x26d
     strncpy(mess.log_text, tmp_buf, LOG_MES_TEXT_LEN);
 8011d66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011d6a:	4629      	mov	r1, r5
 8011d6c:	f20d 106d 	addw	r0, sp, #365	@ 0x16d
 8011d70:	f017 fecd 	bl	8029b0e <strncpy>
    if (_send_log_mess) {
 8011d74:	4b10      	ldr	r3, [pc, #64]	@ (8011db8 <logging+0x138>)
 8011d76:	681e      	ldr	r6, [r3, #0]
 8011d78:	b146      	cbz	r6, 8011d8c <logging+0x10c>
        _send_log_mess(mess);
 8011d7a:	ac5b      	add	r4, sp, #364	@ 0x16c
 8011d7c:	22f2      	movs	r2, #242	@ 0xf2
 8011d7e:	a95f      	add	r1, sp, #380	@ 0x17c
 8011d80:	4668      	mov	r0, sp
 8011d82:	f019 f8b9 	bl	802aef8 <memcpy>
 8011d86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011d8a:	47b0      	blx	r6
    free(tmp_buf);
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	f007 f9f5 	bl	801917c <vPortFree>
 8011d92:	e77d      	b.n	8011c90 <logging+0x10>
         mess.log_len = LOG_MES_TEXT_LEN - 10;
 8011d94:	23f6      	movs	r3, #246	@ 0xf6
 8011d96:	f88d 326d 	strb.w	r3, [sp, #621]	@ 0x26d
 8011d9a:	e7e4      	b.n	8011d66 <logging+0xe6>
 8011d9c:	20000890 	.word	0x20000890
 8011da0:	408f4000 	.word	0x408f4000
 8011da4:	08033404 	.word	0x08033404
 8011da8:	10624dd3 	.word	0x10624dd3
 8011dac:	08033418 	.word	0x08033418
 8011db0:	20000004 	.word	0x20000004
 8011db4:	08033420 	.word	0x08033420
 8011db8:	20000000 	.word	0x20000000

08011dbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011dbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8011dbe:	6802      	ldr	r2, [r0, #0]
 8011dc0:	4b03      	ldr	r3, [pc, #12]	@ (8011dd0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	d000      	beq.n	8011dc8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8011dc6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8011dc8:	f002 fdfa 	bl	80149c0 <HAL_IncTick>
}
 8011dcc:	e7fb      	b.n	8011dc6 <HAL_TIM_PeriodElapsedCallback+0xa>
 8011dce:	bf00      	nop
 8011dd0:	40014000 	.word	0x40014000

08011dd4 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8011dd4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8011dd6:	e7fe      	b.n	8011dd6 <Error_Handler+0x2>

08011dd8 <SystemClock_Config>:
{
 8011dd8:	b500      	push	{lr}
 8011dda:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011ddc:	2230      	movs	r2, #48	@ 0x30
 8011dde:	2100      	movs	r1, #0
 8011de0:	a808      	add	r0, sp, #32
 8011de2:	f017 fe4d 	bl	8029a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011de6:	2300      	movs	r3, #0
 8011de8:	9303      	str	r3, [sp, #12]
 8011dea:	9304      	str	r3, [sp, #16]
 8011dec:	9305      	str	r3, [sp, #20]
 8011dee:	9306      	str	r3, [sp, #24]
 8011df0:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011df2:	9301      	str	r3, [sp, #4]
 8011df4:	4a1e      	ldr	r2, [pc, #120]	@ (8011e70 <SystemClock_Config+0x98>)
 8011df6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8011df8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8011dfc:	6411      	str	r1, [r2, #64]	@ 0x40
 8011dfe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8011e00:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8011e04:	9201      	str	r2, [sp, #4]
 8011e06:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8011e08:	9302      	str	r3, [sp, #8]
 8011e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8011e74 <SystemClock_Config+0x9c>)
 8011e0c:	6811      	ldr	r1, [r2, #0]
 8011e0e:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8011e12:	6011      	str	r1, [r2, #0]
 8011e14:	6812      	ldr	r2, [r2, #0]
 8011e16:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8011e1a:	9202      	str	r2, [sp, #8]
 8011e1c:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8011e1e:	2202      	movs	r2, #2
 8011e20:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8011e22:	2101      	movs	r1, #1
 8011e24:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8011e26:	2110      	movs	r1, #16
 8011e28:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8011e2a:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8011e2c:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8011e2e:	2308      	movs	r3, #8
 8011e30:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8011e32:	2364      	movs	r3, #100	@ 0x64
 8011e34:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8011e36:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8011e38:	2304      	movs	r3, #4
 8011e3a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8011e3c:	a808      	add	r0, sp, #32
 8011e3e:	f003 fbeb 	bl	8015618 <HAL_RCC_OscConfig>
 8011e42:	b988      	cbnz	r0, 8011e68 <SystemClock_Config+0x90>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8011e44:	230f      	movs	r3, #15
 8011e46:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011e48:	2302      	movs	r3, #2
 8011e4a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8011e50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011e54:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8011e56:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8011e58:	2103      	movs	r1, #3
 8011e5a:	a803      	add	r0, sp, #12
 8011e5c:	f003 fe46 	bl	8015aec <HAL_RCC_ClockConfig>
 8011e60:	b920      	cbnz	r0, 8011e6c <SystemClock_Config+0x94>
}
 8011e62:	b015      	add	sp, #84	@ 0x54
 8011e64:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8011e68:	f7ff ffb4 	bl	8011dd4 <Error_Handler>
    Error_Handler();
 8011e6c:	f7ff ffb2 	bl	8011dd4 <Error_Handler>
 8011e70:	40023800 	.word	0x40023800
 8011e74:	40007000 	.word	0x40007000

08011e78 <main>:
{
 8011e78:	b500      	push	{lr}
 8011e7a:	b083      	sub	sp, #12
 8011e7c:	b672      	cpsid	i
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 8011e7e:	4b10      	ldr	r3, [pc, #64]	@ (8011ec0 <main+0x48>)
 8011e80:	4a10      	ldr	r2, [pc, #64]	@ (8011ec4 <main+0x4c>)
 8011e82:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8011e84:	b662      	cpsie	i
	volatile int i = 1000000;
 8011e86:	4b10      	ldr	r3, [pc, #64]	@ (8011ec8 <main+0x50>)
 8011e88:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 8011e8a:	e002      	b.n	8011e92 <main+0x1a>
		i--;
 8011e8c:	9b01      	ldr	r3, [sp, #4]
 8011e8e:	3b01      	subs	r3, #1
 8011e90:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 8011e92:	9b01      	ldr	r3, [sp, #4]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	dcf9      	bgt.n	8011e8c <main+0x14>
  HAL_Init();
 8011e98:	f002 fd78 	bl	801498c <HAL_Init>
  SystemClock_Config();
 8011e9c:	f7ff ff9c 	bl	8011dd8 <SystemClock_Config>
  MX_GPIO_Init();
 8011ea0:	f7ff fdd0 	bl	8011a44 <MX_GPIO_Init>
  MX_SPI2_Init();
 8011ea4:	f000 f834 	bl	8011f10 <MX_SPI2_Init>
  MX_I2C1_Init();
 8011ea8:	f7ff fe56 	bl	8011b58 <MX_I2C1_Init>
  MX_SPI1_Init();
 8011eac:	f000 f80e 	bl	8011ecc <MX_SPI1_Init>
  osKernelInitialize();
 8011eb0:	f004 fe50 	bl	8016b54 <osKernelInitialize>
  MX_FREERTOS_Init();
 8011eb4:	f7ff fc52 	bl	801175c <MX_FREERTOS_Init>
  osKernelStart();
 8011eb8:	f004 fe5e 	bl	8016b78 <osKernelStart>
  while (1)
 8011ebc:	e7fe      	b.n	8011ebc <main+0x44>
 8011ebe:	bf00      	nop
 8011ec0:	e000ed00 	.word	0xe000ed00
 8011ec4:	08010000 	.word	0x08010000
 8011ec8:	000f4240 	.word	0x000f4240

08011ecc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8011ecc:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8011ece:	480e      	ldr	r0, [pc, #56]	@ (8011f08 <MX_SPI1_Init+0x3c>)
 8011ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8011f0c <MX_SPI1_Init+0x40>)
 8011ed2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8011ed4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8011ed8:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8011eda:	2300      	movs	r3, #0
 8011edc:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8011ede:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011ee0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011ee2:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8011ee4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011ee8:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8011eea:	2208      	movs	r2, #8
 8011eec:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011eee:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8011ef0:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011ef2:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8011ef4:	230a      	movs	r3, #10
 8011ef6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8011ef8:	f003 ffd6 	bl	8015ea8 <HAL_SPI_Init>
 8011efc:	b900      	cbnz	r0, 8011f00 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8011efe:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011f00:	f7ff ff68 	bl	8011dd4 <Error_Handler>
}
 8011f04:	e7fb      	b.n	8011efe <MX_SPI1_Init+0x32>
 8011f06:	bf00      	nop
 8011f08:	200008ec 	.word	0x200008ec
 8011f0c:	40013000 	.word	0x40013000

08011f10 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8011f10:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8011f12:	480d      	ldr	r0, [pc, #52]	@ (8011f48 <MX_SPI2_Init+0x38>)
 8011f14:	4b0d      	ldr	r3, [pc, #52]	@ (8011f4c <MX_SPI2_Init+0x3c>)
 8011f16:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8011f18:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8011f1c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8011f1e:	2300      	movs	r3, #0
 8011f20:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8011f22:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011f24:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011f26:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8011f28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011f2c:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011f2e:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011f30:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8011f32:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011f34:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8011f36:	230a      	movs	r3, #10
 8011f38:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8011f3a:	f003 ffb5 	bl	8015ea8 <HAL_SPI_Init>
 8011f3e:	b900      	cbnz	r0, 8011f42 <MX_SPI2_Init+0x32>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8011f40:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011f42:	f7ff ff47 	bl	8011dd4 <Error_Handler>
}
 8011f46:	e7fb      	b.n	8011f40 <MX_SPI2_Init+0x30>
 8011f48:	20000894 	.word	0x20000894
 8011f4c:	40003800 	.word	0x40003800

08011f50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8011f50:	b500      	push	{lr}
 8011f52:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011f54:	2300      	movs	r3, #0
 8011f56:	9305      	str	r3, [sp, #20]
 8011f58:	9306      	str	r3, [sp, #24]
 8011f5a:	9307      	str	r3, [sp, #28]
 8011f5c:	9308      	str	r3, [sp, #32]
 8011f5e:	9309      	str	r3, [sp, #36]	@ 0x24
  if(spiHandle->Instance==SPI1)
 8011f60:	6803      	ldr	r3, [r0, #0]
 8011f62:	4a28      	ldr	r2, [pc, #160]	@ (8012004 <HAL_SPI_MspInit+0xb4>)
 8011f64:	4293      	cmp	r3, r2
 8011f66:	d005      	beq.n	8011f74 <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8011f68:	4a27      	ldr	r2, [pc, #156]	@ (8012008 <HAL_SPI_MspInit+0xb8>)
 8011f6a:	4293      	cmp	r3, r2
 8011f6c:	d025      	beq.n	8011fba <HAL_SPI_MspInit+0x6a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8011f6e:	b00b      	add	sp, #44	@ 0x2c
 8011f70:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8011f74:	2100      	movs	r1, #0
 8011f76:	9101      	str	r1, [sp, #4]
 8011f78:	4b24      	ldr	r3, [pc, #144]	@ (801200c <HAL_SPI_MspInit+0xbc>)
 8011f7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f7c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011f80:	645a      	str	r2, [r3, #68]	@ 0x44
 8011f82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f84:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8011f88:	9201      	str	r2, [sp, #4]
 8011f8a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011f8c:	9102      	str	r1, [sp, #8]
 8011f8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011f90:	f042 0202 	orr.w	r2, r2, #2
 8011f94:	631a      	str	r2, [r3, #48]	@ 0x30
 8011f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f98:	f003 0302 	and.w	r3, r3, #2
 8011f9c:	9302      	str	r3, [sp, #8]
 8011f9e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8011fa0:	2338      	movs	r3, #56	@ 0x38
 8011fa2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011fa4:	2302      	movs	r3, #2
 8011fa6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011fa8:	2303      	movs	r3, #3
 8011faa:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8011fac:	2305      	movs	r3, #5
 8011fae:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011fb0:	a905      	add	r1, sp, #20
 8011fb2:	4817      	ldr	r0, [pc, #92]	@ (8012010 <HAL_SPI_MspInit+0xc0>)
 8011fb4:	f002 fda8 	bl	8014b08 <HAL_GPIO_Init>
 8011fb8:	e7d9      	b.n	8011f6e <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8011fba:	2100      	movs	r1, #0
 8011fbc:	9103      	str	r1, [sp, #12]
 8011fbe:	4b13      	ldr	r3, [pc, #76]	@ (801200c <HAL_SPI_MspInit+0xbc>)
 8011fc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011fc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011fc6:	641a      	str	r2, [r3, #64]	@ 0x40
 8011fc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011fca:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8011fce:	9203      	str	r2, [sp, #12]
 8011fd0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011fd2:	9104      	str	r1, [sp, #16]
 8011fd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011fd6:	f042 0202 	orr.w	r2, r2, #2
 8011fda:	631a      	str	r2, [r3, #48]	@ 0x30
 8011fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fde:	f003 0302 	and.w	r3, r3, #2
 8011fe2:	9304      	str	r3, [sp, #16]
 8011fe4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8011fe6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8011fea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011fec:	2302      	movs	r3, #2
 8011fee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ff0:	2303      	movs	r3, #3
 8011ff2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8011ff4:	2305      	movs	r3, #5
 8011ff6:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011ff8:	a905      	add	r1, sp, #20
 8011ffa:	4805      	ldr	r0, [pc, #20]	@ (8012010 <HAL_SPI_MspInit+0xc0>)
 8011ffc:	f002 fd84 	bl	8014b08 <HAL_GPIO_Init>
}
 8012000:	e7b5      	b.n	8011f6e <HAL_SPI_MspInit+0x1e>
 8012002:	bf00      	nop
 8012004:	40013000 	.word	0x40013000
 8012008:	40003800 	.word	0x40003800
 801200c:	40023800 	.word	0x40023800
 8012010:	40020400 	.word	0x40020400

08012014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012014:	b500      	push	{lr}
 8012016:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012018:	2200      	movs	r2, #0
 801201a:	9200      	str	r2, [sp, #0]
 801201c:	4b0d      	ldr	r3, [pc, #52]	@ (8012054 <HAL_MspInit+0x40>)
 801201e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012020:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8012024:	6459      	str	r1, [r3, #68]	@ 0x44
 8012026:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012028:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 801202c:	9100      	str	r1, [sp, #0]
 801202e:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012030:	9201      	str	r2, [sp, #4]
 8012032:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8012034:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8012038:	6419      	str	r1, [r3, #64]	@ 0x40
 801203a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801203c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012040:	9301      	str	r3, [sp, #4]
 8012042:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8012044:	210f      	movs	r1, #15
 8012046:	f06f 0001 	mvn.w	r0, #1
 801204a:	f002 fd45 	bl	8014ad8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801204e:	b003      	add	sp, #12
 8012050:	f85d fb04 	ldr.w	pc, [sp], #4
 8012054:	40023800 	.word	0x40023800

08012058 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012058:	b530      	push	{r4, r5, lr}
 801205a:	b089      	sub	sp, #36	@ 0x24
 801205c:	4605      	mov	r5, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 801205e:	2400      	movs	r4, #0
 8012060:	9401      	str	r4, [sp, #4]
 8012062:	4b1d      	ldr	r3, [pc, #116]	@ (80120d8 <HAL_InitTick+0x80>)
 8012064:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012066:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 801206a:	645a      	str	r2, [r3, #68]	@ 0x44
 801206c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801206e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012072:	9301      	str	r3, [sp, #4]
 8012074:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012076:	a902      	add	r1, sp, #8
 8012078:	a803      	add	r0, sp, #12
 801207a:	f003 fe0d 	bl	8015c98 <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 801207e:	f003 fdfb 	bl	8015c78 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8012082:	4a16      	ldr	r2, [pc, #88]	@ (80120dc <HAL_InitTick+0x84>)
 8012084:	fba2 2300 	umull	r2, r3, r2, r0
 8012088:	0c9b      	lsrs	r3, r3, #18
 801208a:	3b01      	subs	r3, #1

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 801208c:	4814      	ldr	r0, [pc, #80]	@ (80120e0 <HAL_InitTick+0x88>)
 801208e:	4a15      	ldr	r2, [pc, #84]	@ (80120e4 <HAL_InitTick+0x8c>)
 8012090:	6002      	str	r2, [r0, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8012092:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8012096:	60c2      	str	r2, [r0, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8012098:	6043      	str	r3, [r0, #4]
  htim9.Init.ClockDivision = 0;
 801209a:	6104      	str	r4, [r0, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 801209c:	6084      	str	r4, [r0, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801209e:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim9);
 80120a0:	f004 fb78 	bl	8016794 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80120a4:	4604      	mov	r4, r0
 80120a6:	b110      	cbz	r0, 80120ae <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 80120a8:	4620      	mov	r0, r4
 80120aa:	b009      	add	sp, #36	@ 0x24
 80120ac:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim9);
 80120ae:	480c      	ldr	r0, [pc, #48]	@ (80120e0 <HAL_InitTick+0x88>)
 80120b0:	f004 fa2a 	bl	8016508 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80120b4:	4604      	mov	r4, r0
 80120b6:	2800      	cmp	r0, #0
 80120b8:	d1f6      	bne.n	80120a8 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80120ba:	2018      	movs	r0, #24
 80120bc:	f002 fd1c 	bl	8014af8 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80120c0:	2d0f      	cmp	r5, #15
 80120c2:	d901      	bls.n	80120c8 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 80120c4:	2401      	movs	r4, #1
 80120c6:	e7ef      	b.n	80120a8 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 80120c8:	2200      	movs	r2, #0
 80120ca:	4629      	mov	r1, r5
 80120cc:	2018      	movs	r0, #24
 80120ce:	f002 fd03 	bl	8014ad8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80120d2:	4b05      	ldr	r3, [pc, #20]	@ (80120e8 <HAL_InitTick+0x90>)
 80120d4:	601d      	str	r5, [r3, #0]
 80120d6:	e7e7      	b.n	80120a8 <HAL_InitTick+0x50>
 80120d8:	40023800 	.word	0x40023800
 80120dc:	431bde83 	.word	0x431bde83
 80120e0:	20000944 	.word	0x20000944
 80120e4:	40014000 	.word	0x40014000
 80120e8:	20000084 	.word	0x20000084

080120ec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80120ec:	e7fe      	b.n	80120ec <NMI_Handler>

080120ee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80120ee:	e7fe      	b.n	80120ee <HardFault_Handler>

080120f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80120f0:	e7fe      	b.n	80120f0 <MemManage_Handler>

080120f2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80120f2:	e7fe      	b.n	80120f2 <BusFault_Handler>

080120f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80120f4:	e7fe      	b.n	80120f4 <UsageFault_Handler>

080120f6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80120f6:	4770      	bx	lr

080120f8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80120f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80120fa:	4802      	ldr	r0, [pc, #8]	@ (8012104 <TIM1_BRK_TIM9_IRQHandler+0xc>)
 80120fc:	f004 fa44 	bl	8016588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8012100:	bd08      	pop	{r3, pc}
 8012102:	bf00      	nop
 8012104:	20000944 	.word	0x20000944

08012108 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8012108:	2001      	movs	r0, #1
 801210a:	4770      	bx	lr

0801210c <_kill>:

int _kill(int pid, int sig)
{
 801210c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801210e:	f018 febb 	bl	802ae88 <__errno>
 8012112:	2316      	movs	r3, #22
 8012114:	6003      	str	r3, [r0, #0]
  return -1;
}
 8012116:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801211a:	bd08      	pop	{r3, pc}

0801211c <_exit>:

void _exit (int status)
{
 801211c:	b508      	push	{r3, lr}
  _kill(status, -1);
 801211e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012122:	f7ff fff3 	bl	801210c <_kill>
  while (1) {}    /* Make sure we hang here */
 8012126:	e7fe      	b.n	8012126 <_exit+0xa>

08012128 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012128:	b570      	push	{r4, r5, r6, lr}
 801212a:	460c      	mov	r4, r1
 801212c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801212e:	2500      	movs	r5, #0
 8012130:	e006      	b.n	8012140 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8012132:	f3af 8000 	nop.w
 8012136:	4621      	mov	r1, r4
 8012138:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801213c:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 801213e:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012140:	42b5      	cmp	r5, r6
 8012142:	dbf6      	blt.n	8012132 <_read+0xa>
  }

  return len;
}
 8012144:	4630      	mov	r0, r6
 8012146:	bd70      	pop	{r4, r5, r6, pc}

08012148 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012148:	b570      	push	{r4, r5, r6, lr}
 801214a:	460c      	mov	r4, r1
 801214c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801214e:	2500      	movs	r5, #0
 8012150:	e004      	b.n	801215c <_write+0x14>
  {
    __io_putchar(*ptr++);
 8012152:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012156:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801215a:	3501      	adds	r5, #1
 801215c:	42b5      	cmp	r5, r6
 801215e:	dbf8      	blt.n	8012152 <_write+0xa>
  }
  return len;
}
 8012160:	4630      	mov	r0, r6
 8012162:	bd70      	pop	{r4, r5, r6, pc}

08012164 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8012164:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012168:	4770      	bx	lr

0801216a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 801216a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801216e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8012170:	2000      	movs	r0, #0
 8012172:	4770      	bx	lr

08012174 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8012174:	2001      	movs	r0, #1
 8012176:	4770      	bx	lr

08012178 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8012178:	2000      	movs	r0, #0
 801217a:	4770      	bx	lr

0801217c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801217c:	b510      	push	{r4, lr}
 801217e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012180:	4a0c      	ldr	r2, [pc, #48]	@ (80121b4 <_sbrk+0x38>)
 8012182:	490d      	ldr	r1, [pc, #52]	@ (80121b8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012184:	480d      	ldr	r0, [pc, #52]	@ (80121bc <_sbrk+0x40>)
 8012186:	6800      	ldr	r0, [r0, #0]
 8012188:	b140      	cbz	r0, 801219c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801218a:	480c      	ldr	r0, [pc, #48]	@ (80121bc <_sbrk+0x40>)
 801218c:	6800      	ldr	r0, [r0, #0]
 801218e:	4403      	add	r3, r0
 8012190:	1a52      	subs	r2, r2, r1
 8012192:	4293      	cmp	r3, r2
 8012194:	d806      	bhi.n	80121a4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8012196:	4a09      	ldr	r2, [pc, #36]	@ (80121bc <_sbrk+0x40>)
 8012198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 801219a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 801219c:	4807      	ldr	r0, [pc, #28]	@ (80121bc <_sbrk+0x40>)
 801219e:	4c08      	ldr	r4, [pc, #32]	@ (80121c0 <_sbrk+0x44>)
 80121a0:	6004      	str	r4, [r0, #0]
 80121a2:	e7f2      	b.n	801218a <_sbrk+0xe>
    errno = ENOMEM;
 80121a4:	f018 fe70 	bl	802ae88 <__errno>
 80121a8:	230c      	movs	r3, #12
 80121aa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80121ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80121b0:	e7f3      	b.n	801219a <_sbrk+0x1e>
 80121b2:	bf00      	nop
 80121b4:	20020000 	.word	0x20020000
 80121b8:	00000800 	.word	0x00000800
 80121bc:	20000990 	.word	0x20000990
 80121c0:	20018358 	.word	0x20018358

080121c4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80121c4:	4a03      	ldr	r2, [pc, #12]	@ (80121d4 <SystemInit+0x10>)
 80121c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80121ca:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80121ce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80121d2:	4770      	bx	lr
 80121d4:	e000ed00 	.word	0xe000ed00

080121d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80121d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8012210 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80121dc:	f7ff fff2 	bl	80121c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80121e0:	480c      	ldr	r0, [pc, #48]	@ (8012214 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80121e2:	490d      	ldr	r1, [pc, #52]	@ (8012218 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80121e4:	4a0d      	ldr	r2, [pc, #52]	@ (801221c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80121e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80121e8:	e002      	b.n	80121f0 <LoopCopyDataInit>

080121ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80121ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80121ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80121ee:	3304      	adds	r3, #4

080121f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80121f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80121f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80121f4:	d3f9      	bcc.n	80121ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80121f6:	4a0a      	ldr	r2, [pc, #40]	@ (8012220 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80121f8:	4c0a      	ldr	r4, [pc, #40]	@ (8012224 <LoopFillZerobss+0x22>)
  movs r3, #0
 80121fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80121fc:	e001      	b.n	8012202 <LoopFillZerobss>

080121fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80121fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012200:	3204      	adds	r2, #4

08012202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012204:	d3fb      	bcc.n	80121fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8012206:	f018 fe4d 	bl	802aea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801220a:	f7ff fe35 	bl	8011e78 <main>
  bx  lr    
 801220e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8012210:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8012214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012218:	200007e8 	.word	0x200007e8
  ldr r2, =_sidata
 801221c:	08038894 	.word	0x08038894
  ldr r2, =_sbss
 8012220:	200007e8 	.word	0x200007e8
  ldr r4, =_ebss
 8012224:	20018358 	.word	0x20018358

08012228 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012228:	e7fe      	b.n	8012228 <ADC_IRQHandler>
	...

0801222c <handle_OPTIONS_method>:
	free(pub_topics_str);
	free(subscr_topics_str);
}


static void handle_OPTIONS_method(struct mg_connection *c){
 801222c:	b508      	push	{r3, lr}

	mg_http_reply(c, 200,
 801222e:	4b03      	ldr	r3, [pc, #12]	@ (801223c <handle_OPTIONS_method+0x10>)
 8012230:	4a03      	ldr	r2, [pc, #12]	@ (8012240 <handle_OPTIONS_method+0x14>)
 8012232:	21c8      	movs	r1, #200	@ 0xc8
 8012234:	f00f f90e 	bl	8021454 <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 8012238:	bd08      	pop	{r3, pc}
 801223a:	bf00      	nop
 801223c:	0803727c 	.word	0x0803727c
 8012240:	08033464 	.word	0x08033464

08012244 <handle_firmware_deactivate>:
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}

static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 8012244:	b570      	push	{r4, r5, r6, lr}
 8012246:	b084      	sub	sp, #16
 8012248:	4605      	mov	r5, r0
 801224a:	460c      	mov	r4, r1

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 801224c:	ae02      	add	r6, sp, #8
 801224e:	4914      	ldr	r1, [pc, #80]	@ (80122a0 <handle_firmware_deactivate+0x5c>)
 8012250:	4630      	mov	r0, r6
 8012252:	f00f f9e1 	bl	8021618 <mg_str_s>
 8012256:	2300      	movs	r3, #0
 8012258:	9300      	str	r3, [sp, #0]
 801225a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801225e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012262:	f00f fb8d 	bl	8021980 <mg_match>
 8012266:	b198      	cbz	r0, 8012290 <handle_firmware_deactivate+0x4c>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 8012268:	4b0e      	ldr	r3, [pc, #56]	@ (80122a4 <handle_firmware_deactivate+0x60>)
 801226a:	6a1b      	ldr	r3, [r3, #32]
 801226c:	480e      	ldr	r0, [pc, #56]	@ (80122a8 <handle_firmware_deactivate+0x64>)
 801226e:	4798      	blx	r3
 8012270:	b138      	cbz	r0, 8012282 <handle_firmware_deactivate+0x3e>

			mg_http_reply(c, 200, headers, //TODO delete for release,
 8012272:	4b0e      	ldr	r3, [pc, #56]	@ (80122ac <handle_firmware_deactivate+0x68>)
 8012274:	4a0e      	ldr	r2, [pc, #56]	@ (80122b0 <handle_firmware_deactivate+0x6c>)
 8012276:	21c8      	movs	r1, #200	@ 0xc8
 8012278:	4628      	mov	r0, r5
 801227a:	f00f f8eb 	bl	8021454 <mg_http_reply>
				}
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 801227e:	b004      	add	sp, #16
 8012280:	bd70      	pop	{r4, r5, r6, pc}
					mg_http_reply(c, 200, headers, //TODO delete for release,
 8012282:	4b0c      	ldr	r3, [pc, #48]	@ (80122b4 <handle_firmware_deactivate+0x70>)
 8012284:	4a0a      	ldr	r2, [pc, #40]	@ (80122b0 <handle_firmware_deactivate+0x6c>)
 8012286:	21c8      	movs	r1, #200	@ 0xc8
 8012288:	4628      	mov	r0, r5
 801228a:	f00f f8e3 	bl	8021454 <mg_http_reply>
 801228e:	e7f6      	b.n	801227e <handle_firmware_deactivate+0x3a>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012290:	4b09      	ldr	r3, [pc, #36]	@ (80122b8 <handle_firmware_deactivate+0x74>)
 8012292:	4a07      	ldr	r2, [pc, #28]	@ (80122b0 <handle_firmware_deactivate+0x6c>)
 8012294:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012298:	4628      	mov	r0, r5
 801229a:	f00f f8db 	bl	8021454 <mg_http_reply>
}
 801229e:	e7ee      	b.n	801227e <handle_firmware_deactivate+0x3a>
 80122a0:	08033504 	.word	0x08033504
 80122a4:	2000001c 	.word	0x2000001c
 80122a8:	0803308c 	.word	0x0803308c
 80122ac:	0803350c 	.word	0x0803350c
 80122b0:	08033548 	.word	0x08033548
 80122b4:	080335b8 	.word	0x080335b8
 80122b8:	080335fc 	.word	0x080335fc

080122bc <handle_web_files_remove>:

static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 80122bc:	b570      	push	{r4, r5, r6, lr}
 80122be:	b084      	sub	sp, #16
 80122c0:	4605      	mov	r5, r0
 80122c2:	460c      	mov	r4, r1

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 80122c4:	ae02      	add	r6, sp, #8
 80122c6:	4912      	ldr	r1, [pc, #72]	@ (8012310 <handle_web_files_remove+0x54>)
 80122c8:	4630      	mov	r0, r6
 80122ca:	f00f f9a5 	bl	8021618 <mg_str_s>
 80122ce:	2300      	movs	r3, #0
 80122d0:	9300      	str	r3, [sp, #0]
 80122d2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80122d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80122da:	f00f fb51 	bl	8021980 <mg_match>
 80122de:	b178      	cbz	r0, 8012300 <handle_web_files_remove+0x44>
			mg_fs_lfs.rm("/web");
 80122e0:	4e0c      	ldr	r6, [pc, #48]	@ (8012314 <handle_web_files_remove+0x58>)
 80122e2:	6a33      	ldr	r3, [r6, #32]
 80122e4:	4c0c      	ldr	r4, [pc, #48]	@ (8012318 <handle_web_files_remove+0x5c>)
 80122e6:	4620      	mov	r0, r4
 80122e8:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 80122ea:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80122ec:	4620      	mov	r0, r4
 80122ee:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 80122f0:	4b0a      	ldr	r3, [pc, #40]	@ (801231c <handle_web_files_remove+0x60>)
 80122f2:	4a0b      	ldr	r2, [pc, #44]	@ (8012320 <handle_web_files_remove+0x64>)
 80122f4:	21c8      	movs	r1, #200	@ 0xc8
 80122f6:	4628      	mov	r0, r5
 80122f8:	f00f f8ac 	bl	8021454 <mg_http_reply>
			    "{\"status\":\"success\",\"message\":\"All web interface files are deleted\"}\r\n");
    }else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
    }
}
 80122fc:	b004      	add	sp, #16
 80122fe:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012300:	4b08      	ldr	r3, [pc, #32]	@ (8012324 <handle_web_files_remove+0x68>)
 8012302:	4a07      	ldr	r2, [pc, #28]	@ (8012320 <handle_web_files_remove+0x64>)
 8012304:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012308:	4628      	mov	r0, r5
 801230a:	f00f f8a3 	bl	8021454 <mg_http_reply>
}
 801230e:	e7f5      	b.n	80122fc <handle_web_files_remove+0x40>
 8012310:	08033504 	.word	0x08033504
 8012314:	2000001c 	.word	0x2000001c
 8012318:	08033078 	.word	0x08033078
 801231c:	0803364c 	.word	0x0803364c
 8012320:	08033548 	.word	0x08033548
 8012324:	080335fc 	.word	0x080335fc

08012328 <handle_ram_status_get>:
static void handle_ram_status_get(struct mg_connection *c){
 8012328:	b510      	push	{r4, lr}
 801232a:	b090      	sub	sp, #64	@ 0x40
 801232c:	4604      	mov	r4, r0
	vPortGetHeapStats(&heap_status);
 801232e:	a809      	add	r0, sp, #36	@ 0x24
 8012330:	f006 ff62 	bl	80191f8 <vPortGetHeapStats>
	logging(1, "Start execute API RAM status");
 8012334:	490c      	ldr	r1, [pc, #48]	@ (8012368 <handle_ram_status_get+0x40>)
 8012336:	2001      	movs	r0, #1
 8012338:	f7ff fca2 	bl	8011c80 <logging>
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 801233c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801233e:	9306      	str	r3, [sp, #24]
 8012340:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012342:	9305      	str	r3, [sp, #20]
 8012344:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012346:	9304      	str	r3, [sp, #16]
 8012348:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801234a:	9303      	str	r3, [sp, #12]
 801234c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801234e:	9302      	str	r3, [sp, #8]
 8012350:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012352:	9301      	str	r3, [sp, #4]
 8012354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012356:	9300      	str	r3, [sp, #0]
 8012358:	4b04      	ldr	r3, [pc, #16]	@ (801236c <handle_ram_status_get+0x44>)
 801235a:	4a05      	ldr	r2, [pc, #20]	@ (8012370 <handle_ram_status_get+0x48>)
 801235c:	21c8      	movs	r1, #200	@ 0xc8
 801235e:	4620      	mov	r0, r4
 8012360:	f00f f878 	bl	8021454 <mg_http_reply>
}
 8012364:	b010      	add	sp, #64	@ 0x40
 8012366:	bd10      	pop	{r4, pc}
 8012368:	08033694 	.word	0x08033694
 801236c:	080336b4 	.word	0x080336b4
 8012370:	080337b8 	.word	0x080337b8

08012374 <handle_io_status_get>:
static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 8012374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012376:	b091      	sub	sp, #68	@ 0x44
 8012378:	4606      	mov	r6, r0
 801237a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 801237c:	ad0c      	add	r5, sp, #48	@ 0x30
 801237e:	494b      	ldr	r1, [pc, #300]	@ (80124ac <handle_io_status_get+0x138>)
 8012380:	4628      	mov	r0, r5
 8012382:	f00f f949 	bl	8021618 <mg_str_s>
 8012386:	2300      	movs	r3, #0
 8012388:	9300      	str	r3, [sp, #0]
 801238a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801238e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012392:	f00f faf5 	bl	8021980 <mg_match>
 8012396:	b328      	cbz	r0, 80123e4 <handle_io_status_get+0x70>
		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 8012398:	4c45      	ldr	r4, [pc, #276]	@ (80124b0 <handle_io_status_get+0x13c>)
 801239a:	6823      	ldr	r3, [r4, #0]
 801239c:	2200      	movs	r2, #0
 801239e:	2101      	movs	r1, #1
 80123a0:	a80a      	add	r0, sp, #40	@ 0x28
 80123a2:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 80123a4:	6823      	ldr	r3, [r4, #0]
 80123a6:	2200      	movs	r2, #0
 80123a8:	2102      	movs	r1, #2
 80123aa:	f10d 002b 	add.w	r0, sp, #43	@ 0x2b
 80123ae:	4798      	blx	r3
						status.inputs[0], status.inputs[1], status.inputs[2],
 80123b0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80123b4:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 80123b8:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
						status.outputs[0], status.outputs[1], status.outputs[2]
 80123bc:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 80123c0:	f89d 402c 	ldrb.w	r4, [sp, #44]	@ 0x2c
 80123c4:	f89d 502d 	ldrb.w	r5, [sp, #45]	@ 0x2d
		mg_http_reply(c, 200, headers, //TODO delete for release,
 80123c8:	9505      	str	r5, [sp, #20]
 80123ca:	9404      	str	r4, [sp, #16]
 80123cc:	9003      	str	r0, [sp, #12]
 80123ce:	9102      	str	r1, [sp, #8]
 80123d0:	9201      	str	r2, [sp, #4]
 80123d2:	9300      	str	r3, [sp, #0]
 80123d4:	4b37      	ldr	r3, [pc, #220]	@ (80124b4 <handle_io_status_get+0x140>)
 80123d6:	4a38      	ldr	r2, [pc, #224]	@ (80124b8 <handle_io_status_get+0x144>)
 80123d8:	21c8      	movs	r1, #200	@ 0xc8
 80123da:	4630      	mov	r0, r6
 80123dc:	f00f f83a 	bl	8021454 <mg_http_reply>
}
 80123e0:	b011      	add	sp, #68	@ 0x44
 80123e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 80123e4:	ad0e      	add	r5, sp, #56	@ 0x38
 80123e6:	4935      	ldr	r1, [pc, #212]	@ (80124bc <handle_io_status_get+0x148>)
 80123e8:	4628      	mov	r0, r5
 80123ea:	f00f f915 	bl	8021618 <mg_str_s>
 80123ee:	2300      	movs	r3, #0
 80123f0:	9300      	str	r3, [sp, #0]
 80123f2:	e895 000c 	ldmia.w	r5, {r2, r3}
 80123f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80123fa:	f00f fac1 	bl	8021980 <mg_match>
 80123fe:	2800      	cmp	r0, #0
 8012400:	d04b      	beq.n	801249a <handle_io_status_get+0x126>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8012402:	ab08      	add	r3, sp, #32
 8012404:	4a2e      	ldr	r2, [pc, #184]	@ (80124c0 <handle_io_status_get+0x14c>)
 8012406:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 801240a:	c903      	ldmia	r1, {r0, r1}
 801240c:	f00e f8e8 	bl	80205e0 <mg_json_get_num>
 8012410:	2800      	cmp	r0, #0
 8012412:	d03a      	beq.n	801248a <handle_io_status_get+0x116>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 8012414:	ab0a      	add	r3, sp, #40	@ 0x28
 8012416:	4a2b      	ldr	r2, [pc, #172]	@ (80124c4 <handle_io_status_get+0x150>)
 8012418:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 801241c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012420:	f00e f8de 	bl	80205e0 <mg_json_get_num>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8012424:	2800      	cmp	r0, #0
 8012426:	d030      	beq.n	801248a <handle_io_status_get+0x116>
			relay_id = (uint8_t) tmp1;
 8012428:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801242c:	f7fe fbd4 	bl	8010bd8 <__aeabi_d2uiz>
 8012430:	b2c4      	uxtb	r4, r0
			state = (uint8_t) tmp2;
 8012432:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8012436:	f7fe fbcf 	bl	8010bd8 <__aeabi_d2uiz>
 801243a:	b2c5      	uxtb	r5, r0
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 801243c:	1e63      	subs	r3, r4, #1
 801243e:	b2db      	uxtb	r3, r3
 8012440:	2b02      	cmp	r3, #2
 8012442:	d801      	bhi.n	8012448 <handle_io_status_get+0xd4>
 8012444:	2d01      	cmp	r5, #1
 8012446:	d907      	bls.n	8012458 <handle_io_status_get+0xe4>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 8012448:	4b1f      	ldr	r3, [pc, #124]	@ (80124c8 <handle_io_status_get+0x154>)
 801244a:	4a1b      	ldr	r2, [pc, #108]	@ (80124b8 <handle_io_status_get+0x144>)
 801244c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012450:	4630      	mov	r0, r6
 8012452:	f00e ffff 	bl	8021454 <mg_http_reply>
 8012456:	e7c3      	b.n	80123e0 <handle_io_status_get+0x6c>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 8012458:	4f15      	ldr	r7, [pc, #84]	@ (80124b0 <handle_io_status_get+0x13c>)
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	2200      	movs	r2, #0
 801245e:	2102      	movs	r1, #2
 8012460:	a807      	add	r0, sp, #28
 8012462:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 8012464:	f104 033f 	add.w	r3, r4, #63	@ 0x3f
 8012468:	446b      	add	r3, sp
 801246a:	f803 5c24 	strb.w	r5, [r3, #-36]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	2201      	movs	r2, #1
 8012472:	2102      	movs	r1, #2
 8012474:	a807      	add	r0, sp, #28
 8012476:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 8012478:	9501      	str	r5, [sp, #4]
 801247a:	9400      	str	r4, [sp, #0]
 801247c:	4b13      	ldr	r3, [pc, #76]	@ (80124cc <handle_io_status_get+0x158>)
 801247e:	4a0e      	ldr	r2, [pc, #56]	@ (80124b8 <handle_io_status_get+0x144>)
 8012480:	21c8      	movs	r1, #200	@ 0xc8
 8012482:	4630      	mov	r0, r6
 8012484:	f00e ffe6 	bl	8021454 <mg_http_reply>
 8012488:	e7aa      	b.n	80123e0 <handle_io_status_get+0x6c>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 801248a:	4b11      	ldr	r3, [pc, #68]	@ (80124d0 <handle_io_status_get+0x15c>)
 801248c:	4a0a      	ldr	r2, [pc, #40]	@ (80124b8 <handle_io_status_get+0x144>)
 801248e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012492:	4630      	mov	r0, r6
 8012494:	f00e ffde 	bl	8021454 <mg_http_reply>
 8012498:	e7a2      	b.n	80123e0 <handle_io_status_get+0x6c>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 801249a:	4b0e      	ldr	r3, [pc, #56]	@ (80124d4 <handle_io_status_get+0x160>)
 801249c:	4a06      	ldr	r2, [pc, #24]	@ (80124b8 <handle_io_status_get+0x144>)
 801249e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80124a2:	4630      	mov	r0, r6
 80124a4:	f00e ffd6 	bl	8021454 <mg_http_reply>
}
 80124a8:	e79a      	b.n	80123e0 <handle_io_status_get+0x6c>
 80124aa:	bf00      	nop
 80124ac:	080337fc 	.word	0x080337fc
 80124b0:	20000994 	.word	0x20000994
 80124b4:	08033800 	.word	0x08033800
 80124b8:	08033548 	.word	0x08033548
 80124bc:	08033504 	.word	0x08033504
 80124c0:	08033834 	.word	0x08033834
 80124c4:	08033840 	.word	0x08033840
 80124c8:	08033880 	.word	0x08033880
 80124cc:	08033848 	.word	0x08033848
 80124d0:	080338bc 	.word	0x080338bc
 80124d4:	080338f8 	.word	0x080338f8

080124d8 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 80124d8:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80124da:	fb01 f400 	mul.w	r4, r1, r0
 80124de:	4620      	mov	r0, r4
 80124e0:	f006 fdca 	bl	8019078 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80124e4:	4605      	mov	r5, r0
 80124e6:	b118      	cbz	r0, 80124f0 <mg_calloc+0x18>
 80124e8:	4622      	mov	r2, r4
 80124ea:	2100      	movs	r1, #0
 80124ec:	f017 fac8 	bl	8029a80 <memset>
}
 80124f0:	4628      	mov	r0, r5
 80124f2:	bd38      	pop	{r3, r4, r5, pc}

080124f4 <handle_mqtt_conf>:
static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 80124f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124f6:	b08b      	sub	sp, #44	@ 0x2c
 80124f8:	4606      	mov	r6, r0
 80124fa:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80124fc:	ad06      	add	r5, sp, #24
 80124fe:	4984      	ldr	r1, [pc, #528]	@ (8012710 <handle_mqtt_conf+0x21c>)
 8012500:	4628      	mov	r0, r5
 8012502:	f00f f889 	bl	8021618 <mg_str_s>
 8012506:	2300      	movs	r3, #0
 8012508:	9300      	str	r3, [sp, #0]
 801250a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801250e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012512:	f00f fa35 	bl	8021980 <mg_match>
 8012516:	2800      	cmp	r0, #0
 8012518:	d03b      	beq.n	8012592 <handle_mqtt_conf+0x9e>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 801251a:	21c6      	movs	r1, #198	@ 0xc6
 801251c:	2001      	movs	r0, #1
 801251e:	f7ff ffdb 	bl	80124d8 <mg_calloc>
		if (mqtt_config == NULL) {
 8012522:	4605      	mov	r5, r0
 8012524:	b340      	cbz	r0, 8012578 <handle_mqtt_conf+0x84>
		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 8012526:	4b7b      	ldr	r3, [pc, #492]	@ (8012714 <handle_mqtt_conf+0x220>)
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	2200      	movs	r2, #0
 801252c:	4611      	mov	r1, r2
 801252e:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 8012530:	f105 07a5 	add.w	r7, r5, #165	@ 0xa5
 8012534:	4638      	mov	r0, r7
 8012536:	f7fd feb3 	bl	80102a0 <strlen>
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 801253a:	b2c4      	uxtb	r4, r0
 801253c:	4622      	mov	r2, r4
 801253e:	212a      	movs	r1, #42	@ 0x2a
 8012540:	4638      	mov	r0, r7
 8012542:	f017 fa9d 	bl	8029a80 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 8012546:	442c      	add	r4, r5
 8012548:	2300      	movs	r3, #0
 801254a:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 801254e:	786b      	ldrb	r3, [r5, #1]
 8012550:	b1eb      	cbz	r3, 801258e <handle_mqtt_conf+0x9a>
 8012552:	4b71      	ldr	r3, [pc, #452]	@ (8012718 <handle_mqtt_conf+0x224>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 8012554:	1caa      	adds	r2, r5, #2
 8012556:	f105 0184 	add.w	r1, r5, #132	@ 0x84
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 801255a:	9703      	str	r7, [sp, #12]
 801255c:	9102      	str	r1, [sp, #8]
 801255e:	9201      	str	r2, [sp, #4]
 8012560:	9300      	str	r3, [sp, #0]
 8012562:	4b6e      	ldr	r3, [pc, #440]	@ (801271c <handle_mqtt_conf+0x228>)
 8012564:	4a6e      	ldr	r2, [pc, #440]	@ (8012720 <handle_mqtt_conf+0x22c>)
 8012566:	21c8      	movs	r1, #200	@ 0xc8
 8012568:	4630      	mov	r0, r6
 801256a:	f00e ff73 	bl	8021454 <mg_http_reply>
		free(mqtt_config);
 801256e:	4628      	mov	r0, r5
 8012570:	f006 fe04 	bl	801917c <vPortFree>
}
 8012574:	b00b      	add	sp, #44	@ 0x2c
 8012576:	bdf0      	pop	{r4, r5, r6, r7, pc}
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8012578:	4b6a      	ldr	r3, [pc, #424]	@ (8012724 <handle_mqtt_conf+0x230>)
 801257a:	4a69      	ldr	r2, [pc, #420]	@ (8012720 <handle_mqtt_conf+0x22c>)
 801257c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8012580:	4630      	mov	r0, r6
 8012582:	f00e ff67 	bl	8021454 <mg_http_reply>
			free(mqtt_config);
 8012586:	4628      	mov	r0, r5
 8012588:	f006 fdf8 	bl	801917c <vPortFree>
			return;
 801258c:	e7f2      	b.n	8012574 <handle_mqtt_conf+0x80>
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 801258e:	4b66      	ldr	r3, [pc, #408]	@ (8012728 <handle_mqtt_conf+0x234>)
 8012590:	e7e0      	b.n	8012554 <handle_mqtt_conf+0x60>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8012592:	ad08      	add	r5, sp, #32
 8012594:	4965      	ldr	r1, [pc, #404]	@ (801272c <handle_mqtt_conf+0x238>)
 8012596:	4628      	mov	r0, r5
 8012598:	f00f f83e 	bl	8021618 <mg_str_s>
 801259c:	2300      	movs	r3, #0
 801259e:	9300      	str	r3, [sp, #0]
 80125a0:	e895 000c 	ldmia.w	r5, {r2, r3}
 80125a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80125a8:	f00f f9ea 	bl	8021980 <mg_match>
 80125ac:	2800      	cmp	r0, #0
 80125ae:	f000 80a7 	beq.w	8012700 <handle_mqtt_conf+0x20c>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 80125b2:	21c6      	movs	r1, #198	@ 0xc6
 80125b4:	2001      	movs	r0, #1
 80125b6:	f7ff ff8f 	bl	80124d8 <mg_calloc>
		if (mqtt_config == NULL) {
 80125ba:	4605      	mov	r5, r0
 80125bc:	b310      	cbz	r0, 8012604 <handle_mqtt_conf+0x110>
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 80125be:	ab05      	add	r3, sp, #20
 80125c0:	4a5b      	ldr	r2, [pc, #364]	@ (8012730 <handle_mqtt_conf+0x23c>)
 80125c2:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 80125c6:	c903      	ldmia	r1, {r0, r1}
 80125c8:	f00d fda0 	bl	802010c <mg_json_get>
 80125cc:	2800      	cmp	r0, #0
 80125ce:	db24      	blt.n	801261a <handle_mqtt_conf+0x126>
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 80125d0:	1c6b      	adds	r3, r5, #1
 80125d2:	4a58      	ldr	r2, [pc, #352]	@ (8012734 <handle_mqtt_conf+0x240>)
 80125d4:	f504 7700 	add.w	r7, r4, #512	@ 0x200
 80125d8:	e897 0003 	ldmia.w	r7, {r0, r1}
 80125dc:	f00e f826 	bl	802062c <mg_json_get_bool>
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 80125e0:	4a55      	ldr	r2, [pc, #340]	@ (8012738 <handle_mqtt_conf+0x244>)
 80125e2:	e897 0003 	ldmia.w	r7, {r0, r1}
 80125e6:	f010 f807 	bl	80225f8 <mg_json_get_str>
 80125ea:	4607      	mov	r7, r0
 80125ec:	b328      	cbz	r0, 801263a <handle_mqtt_conf+0x146>
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 80125ee:	f014 fcb3 	bl	8026f58 <is_valid_mqtt_url>
 80125f2:	4603      	mov	r3, r0
 80125f4:	b1e0      	cbz	r0, 8012630 <handle_mqtt_conf+0x13c>
					switch (err) {
 80125f6:	3304      	adds	r3, #4
 80125f8:	2b03      	cmp	r3, #3
 80125fa:	d879      	bhi.n	80126f0 <handle_mqtt_conf+0x1fc>
 80125fc:	e8df f003 	tbb	[pc, r3]
 8012600:	52606870 	.word	0x52606870
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8012604:	4b47      	ldr	r3, [pc, #284]	@ (8012724 <handle_mqtt_conf+0x230>)
 8012606:	4a46      	ldr	r2, [pc, #280]	@ (8012720 <handle_mqtt_conf+0x22c>)
 8012608:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 801260c:	4630      	mov	r0, r6
 801260e:	f00e ff21 	bl	8021454 <mg_http_reply>
			free(mqtt_config);
 8012612:	4628      	mov	r0, r5
 8012614:	f006 fdb2 	bl	801917c <vPortFree>
			return;
 8012618:	e7ac      	b.n	8012574 <handle_mqtt_conf+0x80>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 801261a:	4b48      	ldr	r3, [pc, #288]	@ (801273c <handle_mqtt_conf+0x248>)
 801261c:	4a40      	ldr	r2, [pc, #256]	@ (8012720 <handle_mqtt_conf+0x22c>)
 801261e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012622:	4630      	mov	r0, r6
 8012624:	f00e ff16 	bl	8021454 <mg_http_reply>
		free(mqtt_config);
 8012628:	4628      	mov	r0, r5
 801262a:	f006 fda7 	bl	801917c <vPortFree>
 801262e:	e7a1      	b.n	8012574 <handle_mqtt_conf+0x80>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 8012630:	227f      	movs	r2, #127	@ 0x7f
 8012632:	4639      	mov	r1, r7
 8012634:	1ca8      	adds	r0, r5, #2
 8012636:	f017 fa6a 	bl	8029b0e <strncpy>
			free(broker);
 801263a:	4638      	mov	r0, r7
 801263c:	f006 fd9e 	bl	801917c <vPortFree>
			if((username = mg_json_get_str(hm->body, "$.username"))){
 8012640:	4a3f      	ldr	r2, [pc, #252]	@ (8012740 <handle_mqtt_conf+0x24c>)
 8012642:	f504 7300 	add.w	r3, r4, #512	@ 0x200
 8012646:	e893 0003 	ldmia.w	r3, {r0, r1}
 801264a:	f00f ffd5 	bl	80225f8 <mg_json_get_str>
 801264e:	4607      	mov	r7, r0
 8012650:	b128      	cbz	r0, 801265e <handle_mqtt_conf+0x16a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 8012652:	2220      	movs	r2, #32
 8012654:	4601      	mov	r1, r0
 8012656:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 801265a:	f017 fa58 	bl	8029b0e <strncpy>
			free(username);
 801265e:	4638      	mov	r0, r7
 8012660:	f006 fd8c 	bl	801917c <vPortFree>
			if((password = mg_json_get_str(hm->body, "$.password"))){
 8012664:	4a37      	ldr	r2, [pc, #220]	@ (8012744 <handle_mqtt_conf+0x250>)
 8012666:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 801266a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801266e:	f00f ffc3 	bl	80225f8 <mg_json_get_str>
 8012672:	4604      	mov	r4, r0
 8012674:	b128      	cbz	r0, 8012682 <handle_mqtt_conf+0x18e>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 8012676:	2220      	movs	r2, #32
 8012678:	4601      	mov	r1, r0
 801267a:	f105 00a5 	add.w	r0, r5, #165	@ 0xa5
 801267e:	f017 fa46 	bl	8029b0e <strncpy>
			free(password);
 8012682:	4620      	mov	r0, r4
 8012684:	f006 fd7a 	bl	801917c <vPortFree>
			mqtt_config->save = 1;
 8012688:	2201      	movs	r2, #1
 801268a:	702a      	strb	r2, [r5, #0]
			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 801268c:	4b21      	ldr	r3, [pc, #132]	@ (8012714 <handle_mqtt_conf+0x220>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	2100      	movs	r1, #0
 8012692:	4628      	mov	r0, r5
 8012694:	4798      	blx	r3
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8012696:	4b2c      	ldr	r3, [pc, #176]	@ (8012748 <handle_mqtt_conf+0x254>)
 8012698:	4a21      	ldr	r2, [pc, #132]	@ (8012720 <handle_mqtt_conf+0x22c>)
 801269a:	21c8      	movs	r1, #200	@ 0xc8
 801269c:	4630      	mov	r0, r6
 801269e:	f00e fed9 	bl	8021454 <mg_http_reply>
 80126a2:	e7c1      	b.n	8012628 <handle_mqtt_conf+0x134>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80126a4:	4b29      	ldr	r3, [pc, #164]	@ (801274c <handle_mqtt_conf+0x258>)
 80126a6:	4a1e      	ldr	r2, [pc, #120]	@ (8012720 <handle_mqtt_conf+0x22c>)
 80126a8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80126ac:	4630      	mov	r0, r6
 80126ae:	f00e fed1 	bl	8021454 <mg_http_reply>
					free(broker);
 80126b2:	4638      	mov	r0, r7
 80126b4:	f006 fd62 	bl	801917c <vPortFree>
					free(mqtt_config);
 80126b8:	4628      	mov	r0, r5
 80126ba:	f006 fd5f 	bl	801917c <vPortFree>
					return;
 80126be:	e759      	b.n	8012574 <handle_mqtt_conf+0x80>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80126c0:	4b23      	ldr	r3, [pc, #140]	@ (8012750 <handle_mqtt_conf+0x25c>)
 80126c2:	4a17      	ldr	r2, [pc, #92]	@ (8012720 <handle_mqtt_conf+0x22c>)
 80126c4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80126c8:	4630      	mov	r0, r6
 80126ca:	f00e fec3 	bl	8021454 <mg_http_reply>
							break;
 80126ce:	e7f0      	b.n	80126b2 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80126d0:	4b20      	ldr	r3, [pc, #128]	@ (8012754 <handle_mqtt_conf+0x260>)
 80126d2:	4a13      	ldr	r2, [pc, #76]	@ (8012720 <handle_mqtt_conf+0x22c>)
 80126d4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80126d8:	4630      	mov	r0, r6
 80126da:	f00e febb 	bl	8021454 <mg_http_reply>
							break;
 80126de:	e7e8      	b.n	80126b2 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80126e0:	4b1d      	ldr	r3, [pc, #116]	@ (8012758 <handle_mqtt_conf+0x264>)
 80126e2:	4a0f      	ldr	r2, [pc, #60]	@ (8012720 <handle_mqtt_conf+0x22c>)
 80126e4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80126e8:	4630      	mov	r0, r6
 80126ea:	f00e feb3 	bl	8021454 <mg_http_reply>
							break;
 80126ee:	e7e0      	b.n	80126b2 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80126f0:	4b1a      	ldr	r3, [pc, #104]	@ (801275c <handle_mqtt_conf+0x268>)
 80126f2:	4a0b      	ldr	r2, [pc, #44]	@ (8012720 <handle_mqtt_conf+0x22c>)
 80126f4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80126f8:	4630      	mov	r0, r6
 80126fa:	f00e feab 	bl	8021454 <mg_http_reply>
							break;
 80126fe:	e7d8      	b.n	80126b2 <handle_mqtt_conf+0x1be>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012700:	4b17      	ldr	r3, [pc, #92]	@ (8012760 <handle_mqtt_conf+0x26c>)
 8012702:	4a07      	ldr	r2, [pc, #28]	@ (8012720 <handle_mqtt_conf+0x22c>)
 8012704:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012708:	4630      	mov	r0, r6
 801270a:	f00e fea3 	bl	8021454 <mg_http_reply>
 801270e:	e731      	b.n	8012574 <handle_mqtt_conf+0x80>
 8012710:	080337fc 	.word	0x080337fc
 8012714:	20000994 	.word	0x20000994
 8012718:	0803394c 	.word	0x0803394c
 801271c:	08033998 	.word	0x08033998
 8012720:	08033548 	.word	0x08033548
 8012724:	0803395c 	.word	0x0803395c
 8012728:	08033954 	.word	0x08033954
 801272c:	08033504 	.word	0x08033504
 8012730:	080339e0 	.word	0x080339e0
 8012734:	08033a14 	.word	0x08033a14
 8012738:	08033a20 	.word	0x08033a20
 801273c:	080339e4 	.word	0x080339e4
 8012740:	08033b68 	.word	0x08033b68
 8012744:	08033b74 	.word	0x08033b74
 8012748:	08033b80 	.word	0x08033b80
 801274c:	08033a2c 	.word	0x08033a2c
 8012750:	08033a70 	.word	0x08033a70
 8012754:	08033abc 	.word	0x08033abc
 8012758:	08033afc 	.word	0x08033afc
 801275c:	08033b34 	.word	0x08033b34
 8012760:	080338f8 	.word	0x080338f8

08012764 <handle_dev_status>:
static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 8012764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012768:	b0c7      	sub	sp, #284	@ 0x11c
 801276a:	4681      	mov	r9, r0
 801276c:	468a      	mov	sl, r1
	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 801276e:	2272      	movs	r2, #114	@ 0x72
 8012770:	498e      	ldr	r1, [pc, #568]	@ (80129ac <handle_dev_status+0x248>)
 8012772:	a827      	add	r0, sp, #156	@ 0x9c
 8012774:	f018 fbc0 	bl	802aef8 <memcpy>
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 8012778:	2101      	movs	r1, #1
 801277a:	201e      	movs	r0, #30
 801277c:	f7ff feac 	bl	80124d8 <mg_calloc>
 8012780:	4606      	mov	r6, r0
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8012782:	2101      	movs	r1, #1
 8012784:	202e      	movs	r0, #46	@ 0x2e
 8012786:	f7ff fea7 	bl	80124d8 <mg_calloc>
 801278a:	4607      	mov	r7, r0
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 801278c:	2101      	movs	r1, #1
 801278e:	202e      	movs	r0, #46	@ 0x2e
 8012790:	f7ff fea2 	bl	80124d8 <mg_calloc>
 8012794:	4680      	mov	r8, r0
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8012796:	2101      	movs	r1, #1
 8012798:	f44f 7040 	mov.w	r0, #768	@ 0x300
 801279c:	f7ff fe9c 	bl	80124d8 <mg_calloc>
 80127a0:	4604      	mov	r4, r0
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 80127a2:	2101      	movs	r1, #1
 80127a4:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80127a8:	f7ff fe96 	bl	80124d8 <mg_calloc>
 80127ac:	4605      	mov	r5, r0
	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 80127ae:	2e00      	cmp	r6, #0
 80127b0:	f000 80e3 	beq.w	801297a <handle_dev_status+0x216>
 80127b4:	2f00      	cmp	r7, #0
 80127b6:	f000 80e0 	beq.w	801297a <handle_dev_status+0x216>
 80127ba:	f1b8 0f00 	cmp.w	r8, #0
 80127be:	f000 80dc 	beq.w	801297a <handle_dev_status+0x216>
 80127c2:	2c00      	cmp	r4, #0
 80127c4:	f000 80d9 	beq.w	801297a <handle_dev_status+0x216>
 80127c8:	2800      	cmp	r0, #0
 80127ca:	f000 80d6 	beq.w	801297a <handle_dev_status+0x216>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 80127ce:	f50d 7b88 	add.w	fp, sp, #272	@ 0x110
 80127d2:	4977      	ldr	r1, [pc, #476]	@ (80129b0 <handle_dev_status+0x24c>)
 80127d4:	4658      	mov	r0, fp
 80127d6:	f00e ff1f 	bl	8021618 <mg_str_s>
 80127da:	2300      	movs	r3, #0
 80127dc:	9300      	str	r3, [sp, #0]
 80127de:	e89b 000c 	ldmia.w	fp, {r2, r3}
 80127e2:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80127e6:	f00f f8cb 	bl	8021980 <mg_match>
 80127ea:	2800      	cmp	r0, #0
 80127ec:	f000 80bd 	beq.w	801296a <handle_dev_status+0x206>
			mqtt_connection =  get_mqtt_connection();
 80127f0:	f000 ffd4 	bl	801379c <get_mqtt_connection>
			if(!mqtt_connection){
 80127f4:	4682      	mov	sl, r0
 80127f6:	b358      	cbz	r0, 8012850 <handle_dev_status+0xec>
				if (mqtt_connection->is_connecting){
 80127f8:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80127fc:	f013 0f20 	tst.w	r3, #32
 8012800:	d12c      	bne.n	801285c <handle_dev_status+0xf8>
				}else if(mqtt_connection->is_closing){
 8012802:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8012806:	f013 0f20 	tst.w	r3, #32
 801280a:	d02d      	beq.n	8012868 <handle_dev_status+0x104>
					strncpy(mqtt_status_str, "closing",str_part_len);
 801280c:	221e      	movs	r2, #30
 801280e:	4969      	ldr	r1, [pc, #420]	@ (80129b4 <handle_dev_status+0x250>)
 8012810:	4630      	mov	r0, r6
 8012812:	f017 f97c 	bl	8029b0e <strncpy>
				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 8012816:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 80129dc <handle_dev_status+0x278>
 801281a:	f10a 0308 	add.w	r3, sl, #8
 801281e:	9300      	str	r3, [sp, #0]
 8012820:	465b      	mov	r3, fp
 8012822:	4a65      	ldr	r2, [pc, #404]	@ (80129b8 <handle_dev_status+0x254>)
 8012824:	212e      	movs	r1, #46	@ 0x2e
 8012826:	4640      	mov	r0, r8
 8012828:	f00e f916 	bl	8020a58 <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 801282c:	f10a 031c 	add.w	r3, sl, #28
 8012830:	9300      	str	r3, [sp, #0]
 8012832:	465b      	mov	r3, fp
 8012834:	4a60      	ldr	r2, [pc, #384]	@ (80129b8 <handle_dev_status+0x254>)
 8012836:	212e      	movs	r1, #46	@ 0x2e
 8012838:	4638      	mov	r0, r7
 801283a:	f00e f90d 	bl	8020a58 <mg_snprintf>
			strcat(pub_topics_str, "\"");
 801283e:	4620      	mov	r0, r4
 8012840:	f7fd fd2e 	bl	80102a0 <strlen>
 8012844:	4b5d      	ldr	r3, [pc, #372]	@ (80129bc <handle_dev_status+0x258>)
 8012846:	881b      	ldrh	r3, [r3, #0]
 8012848:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 801284a:	f04f 0a01 	mov.w	sl, #1
 801284e:	e028      	b.n	80128a2 <handle_dev_status+0x13e>
				strncpy(mqtt_status_str, "closed", str_part_len);
 8012850:	221e      	movs	r2, #30
 8012852:	495b      	ldr	r1, [pc, #364]	@ (80129c0 <handle_dev_status+0x25c>)
 8012854:	4630      	mov	r0, r6
 8012856:	f017 f95a 	bl	8029b0e <strncpy>
 801285a:	e7f0      	b.n	801283e <handle_dev_status+0xda>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 801285c:	221e      	movs	r2, #30
 801285e:	4959      	ldr	r1, [pc, #356]	@ (80129c4 <handle_dev_status+0x260>)
 8012860:	4630      	mov	r0, r6
 8012862:	f017 f954 	bl	8029b0e <strncpy>
 8012866:	e7d6      	b.n	8012816 <handle_dev_status+0xb2>
					strncpy(mqtt_status_str, "established", str_part_len);
 8012868:	221e      	movs	r2, #30
 801286a:	4957      	ldr	r1, [pc, #348]	@ (80129c8 <handle_dev_status+0x264>)
 801286c:	4630      	mov	r0, r6
 801286e:	f017 f94e 	bl	8029b0e <strncpy>
 8012872:	e7d0      	b.n	8012816 <handle_dev_status+0xb2>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 8012874:	fa5f f38a 	uxtb.w	r3, sl
 8012878:	2201      	movs	r2, #1
 801287a:	2180      	movs	r1, #128	@ 0x80
 801287c:	a807      	add	r0, sp, #28
 801287e:	f001 fb7d 	bl	8013f7c <generate_status_topik>
				strcat(pub_topics_str, topic);
 8012882:	a907      	add	r1, sp, #28
 8012884:	4620      	mov	r0, r4
 8012886:	f017 f903 	bl	8029a90 <strcat>
				strcat(pub_topics_str, "\", \"");
 801288a:	4620      	mov	r0, r4
 801288c:	f7fd fd08 	bl	80102a0 <strlen>
 8012890:	4603      	mov	r3, r0
 8012892:	1821      	adds	r1, r4, r0
 8012894:	4a4d      	ldr	r2, [pc, #308]	@ (80129cc <handle_dev_status+0x268>)
 8012896:	6810      	ldr	r0, [r2, #0]
 8012898:	50e0      	str	r0, [r4, r3]
 801289a:	7913      	ldrb	r3, [r2, #4]
 801289c:	710b      	strb	r3, [r1, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 801289e:	f10a 0a01 	add.w	sl, sl, #1
 80128a2:	f1ba 0f03 	cmp.w	sl, #3
 80128a6:	dde5      	ble.n	8012874 <handle_dev_status+0x110>
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 80128a8:	f04f 0a01 	mov.w	sl, #1
 80128ac:	e007      	b.n	80128be <handle_dev_status+0x15a>
					strcat(pub_topics_str, "\"");
 80128ae:	4620      	mov	r0, r4
 80128b0:	f7fd fcf6 	bl	80102a0 <strlen>
 80128b4:	4b41      	ldr	r3, [pc, #260]	@ (80129bc <handle_dev_status+0x258>)
 80128b6:	881b      	ldrh	r3, [r3, #0]
 80128b8:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 80128ba:	f10a 0a01 	add.w	sl, sl, #1
 80128be:	f1ba 0f03 	cmp.w	sl, #3
 80128c2:	dc18      	bgt.n	80128f6 <handle_dev_status+0x192>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 80128c4:	fa5f f38a 	uxtb.w	r3, sl
 80128c8:	2202      	movs	r2, #2
 80128ca:	2180      	movs	r1, #128	@ 0x80
 80128cc:	a807      	add	r0, sp, #28
 80128ce:	f001 fb55 	bl	8013f7c <generate_status_topik>
				strcat(pub_topics_str, topic);
 80128d2:	a907      	add	r1, sp, #28
 80128d4:	4620      	mov	r0, r4
 80128d6:	f017 f8db 	bl	8029a90 <strcat>
				if (i < OUTPUTS_COUNT) {
 80128da:	f1ba 0f02 	cmp.w	sl, #2
 80128de:	dce6      	bgt.n	80128ae <handle_dev_status+0x14a>
					strcat(pub_topics_str, "\", \"");
 80128e0:	4620      	mov	r0, r4
 80128e2:	f7fd fcdd 	bl	80102a0 <strlen>
 80128e6:	4603      	mov	r3, r0
 80128e8:	1821      	adds	r1, r4, r0
 80128ea:	4a38      	ldr	r2, [pc, #224]	@ (80129cc <handle_dev_status+0x268>)
 80128ec:	6810      	ldr	r0, [r2, #0]
 80128ee:	50e0      	str	r0, [r4, r3]
 80128f0:	7913      	ldrb	r3, [r2, #4]
 80128f2:	710b      	strb	r3, [r1, #4]
 80128f4:	e7e1      	b.n	80128ba <handle_dev_status+0x156>
			strcat(subscr_topics_str, "\"");
 80128f6:	4628      	mov	r0, r5
 80128f8:	f7fd fcd2 	bl	80102a0 <strlen>
 80128fc:	4b2f      	ldr	r3, [pc, #188]	@ (80129bc <handle_dev_status+0x258>)
 80128fe:	881b      	ldrh	r3, [r3, #0]
 8012900:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8012902:	f04f 0a01 	mov.w	sl, #1
 8012906:	e007      	b.n	8012918 <handle_dev_status+0x1b4>
					strcat(subscr_topics_str, "\"");
 8012908:	4628      	mov	r0, r5
 801290a:	f7fd fcc9 	bl	80102a0 <strlen>
 801290e:	4b2b      	ldr	r3, [pc, #172]	@ (80129bc <handle_dev_status+0x258>)
 8012910:	881b      	ldrh	r3, [r3, #0]
 8012912:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8012914:	f10a 0a01 	add.w	sl, sl, #1
 8012918:	f1ba 0f03 	cmp.w	sl, #3
 801291c:	dc18      	bgt.n	8012950 <handle_dev_status+0x1ec>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 801291e:	fa5f f38a 	uxtb.w	r3, sl
 8012922:	2202      	movs	r2, #2
 8012924:	2180      	movs	r1, #128	@ 0x80
 8012926:	a807      	add	r0, sp, #28
 8012928:	f001 fb10 	bl	8013f4c <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 801292c:	a907      	add	r1, sp, #28
 801292e:	4628      	mov	r0, r5
 8012930:	f017 f8ae 	bl	8029a90 <strcat>
				if (i < OUTPUTS_COUNT) {
 8012934:	f1ba 0f02 	cmp.w	sl, #2
 8012938:	dce6      	bgt.n	8012908 <handle_dev_status+0x1a4>
					strcat(subscr_topics_str, "\", \"");
 801293a:	4628      	mov	r0, r5
 801293c:	f7fd fcb0 	bl	80102a0 <strlen>
 8012940:	4603      	mov	r3, r0
 8012942:	1829      	adds	r1, r5, r0
 8012944:	4a21      	ldr	r2, [pc, #132]	@ (80129cc <handle_dev_status+0x268>)
 8012946:	6810      	ldr	r0, [r2, #0]
 8012948:	50e8      	str	r0, [r5, r3]
 801294a:	7913      	ldrb	r3, [r2, #4]
 801294c:	710b      	strb	r3, [r1, #4]
 801294e:	e7e1      	b.n	8012914 <handle_dev_status+0x1b0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8012950:	9504      	str	r5, [sp, #16]
 8012952:	9403      	str	r4, [sp, #12]
 8012954:	9702      	str	r7, [sp, #8]
 8012956:	f8cd 8004 	str.w	r8, [sp, #4]
 801295a:	9600      	str	r6, [sp, #0]
 801295c:	ab27      	add	r3, sp, #156	@ 0x9c
 801295e:	4a1c      	ldr	r2, [pc, #112]	@ (80129d0 <handle_dev_status+0x26c>)
 8012960:	21c8      	movs	r1, #200	@ 0xc8
 8012962:	4648      	mov	r0, r9
 8012964:	f00e fd76 	bl	8021454 <mg_http_reply>
 8012968:	e00e      	b.n	8012988 <handle_dev_status+0x224>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 801296a:	4b1a      	ldr	r3, [pc, #104]	@ (80129d4 <handle_dev_status+0x270>)
 801296c:	4a18      	ldr	r2, [pc, #96]	@ (80129d0 <handle_dev_status+0x26c>)
 801296e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012972:	4648      	mov	r0, r9
 8012974:	f00e fd6e 	bl	8021454 <mg_http_reply>
 8012978:	e006      	b.n	8012988 <handle_dev_status+0x224>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 801297a:	4b17      	ldr	r3, [pc, #92]	@ (80129d8 <handle_dev_status+0x274>)
 801297c:	4a14      	ldr	r2, [pc, #80]	@ (80129d0 <handle_dev_status+0x26c>)
 801297e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012982:	4648      	mov	r0, r9
 8012984:	f00e fd66 	bl	8021454 <mg_http_reply>
	free(mqtt_status_str);
 8012988:	4630      	mov	r0, r6
 801298a:	f006 fbf7 	bl	801917c <vPortFree>
	free(mqtt_server_addr);
 801298e:	4638      	mov	r0, r7
 8012990:	f006 fbf4 	bl	801917c <vPortFree>
	free(mqtt_local_addr);
 8012994:	4640      	mov	r0, r8
 8012996:	f006 fbf1 	bl	801917c <vPortFree>
	free(pub_topics_str);
 801299a:	4620      	mov	r0, r4
 801299c:	f006 fbee 	bl	801917c <vPortFree>
	free(subscr_topics_str);
 80129a0:	4628      	mov	r0, r5
 80129a2:	f006 fbeb 	bl	801917c <vPortFree>
}
 80129a6:	b047      	add	sp, #284	@ 0x11c
 80129a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ac:	08033c28 	.word	0x08033c28
 80129b0:	080337fc 	.word	0x080337fc
 80129b4:	08033bc8 	.word	0x08033bc8
 80129b8:	08033bdc 	.word	0x08033bdc
 80129bc:	08033be0 	.word	0x08033be0
 80129c0:	0803740c 	.word	0x0803740c
 80129c4:	08033bbc 	.word	0x08033bbc
 80129c8:	08033bd0 	.word	0x08033bd0
 80129cc:	08033be4 	.word	0x08033be4
 80129d0:	08033548 	.word	0x08033548
 80129d4:	080338f8 	.word	0x080338f8
 80129d8:	08033bec 	.word	0x08033bec
 80129dc:	080231b5 	.word	0x080231b5

080129e0 <handle_fs_get_log>:
  }
}

// function for show logging
// function for show logging
static void handle_fs_get_log(struct mg_connection *c, struct mg_http_message *hm, int number){
 80129e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129e2:	b08d      	sub	sp, #52	@ 0x34
 80129e4:	4607      	mov	r7, r0
 80129e6:	460c      	mov	r4, r1
 80129e8:	4615      	mov	r5, r2

	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80129ea:	ae08      	add	r6, sp, #32
 80129ec:	4923      	ldr	r1, [pc, #140]	@ (8012a7c <handle_fs_get_log+0x9c>)
 80129ee:	4630      	mov	r0, r6
 80129f0:	f00e fe12 	bl	8021618 <mg_str_s>
 80129f4:	2300      	movs	r3, #0
 80129f6:	9300      	str	r3, [sp, #0]
 80129f8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80129fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012a00:	f00e ffbe 	bl	8021980 <mg_match>
 8012a04:	b318      	cbz	r0, 8012a4e <handle_fs_get_log+0x6e>

		struct mg_http_serve_opts opts = {
 8012a06:	2300      	movs	r3, #0
 8012a08:	9302      	str	r3, [sp, #8]
 8012a0a:	9303      	str	r3, [sp, #12]
 8012a0c:	9304      	str	r3, [sp, #16]
 8012a0e:	9305      	str	r3, [sp, #20]
 8012a10:	9306      	str	r3, [sp, #24]
 8012a12:	9307      	str	r3, [sp, #28]
 8012a14:	4b1a      	ldr	r3, [pc, #104]	@ (8012a80 <handle_fs_get_log+0xa0>)
 8012a16:	9302      	str	r3, [sp, #8]
 8012a18:	4b1a      	ldr	r3, [pc, #104]	@ (8012a84 <handle_fs_get_log+0xa4>)
 8012a1a:	9307      	str	r3, [sp, #28]
			.root_dir = "/log",
			.fs = &mg_fs_lfs
		};

		switch (number) {
 8012a1c:	b145      	cbz	r5, 8012a30 <handle_fs_get_log+0x50>
 8012a1e:	2d01      	cmp	r5, #1
 8012a20:	d00e      	beq.n	8012a40 <handle_fs_get_log+0x60>
				break;
			case 1:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
				break;
			default:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8012a22:	ab02      	add	r3, sp, #8
 8012a24:	4a18      	ldr	r2, [pc, #96]	@ (8012a88 <handle_fs_get_log+0xa8>)
 8012a26:	4621      	mov	r1, r4
 8012a28:	4638      	mov	r0, r7
 8012a2a:	f00f f965 	bl	8021cf8 <mg_http_serve_file>
				break;
 8012a2e:	e005      	b.n	8012a3c <handle_fs_get_log+0x5c>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8012a30:	ab02      	add	r3, sp, #8
 8012a32:	4a15      	ldr	r2, [pc, #84]	@ (8012a88 <handle_fs_get_log+0xa8>)
 8012a34:	4621      	mov	r1, r4
 8012a36:	4638      	mov	r0, r7
 8012a38:	f00f f95e 	bl	8021cf8 <mg_http_serve_file>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}
}
 8012a3c:	b00d      	add	sp, #52	@ 0x34
 8012a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
 8012a40:	ab02      	add	r3, sp, #8
 8012a42:	4a12      	ldr	r2, [pc, #72]	@ (8012a8c <handle_fs_get_log+0xac>)
 8012a44:	4621      	mov	r1, r4
 8012a46:	4638      	mov	r0, r7
 8012a48:	f00f f956 	bl	8021cf8 <mg_http_serve_file>
				break;
 8012a4c:	e7f6      	b.n	8012a3c <handle_fs_get_log+0x5c>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012a4e:	ad0a      	add	r5, sp, #40	@ 0x28
 8012a50:	490f      	ldr	r1, [pc, #60]	@ (8012a90 <handle_fs_get_log+0xb0>)
 8012a52:	4628      	mov	r0, r5
 8012a54:	f00e fde0 	bl	8021618 <mg_str_s>
 8012a58:	2300      	movs	r3, #0
 8012a5a:	9300      	str	r3, [sp, #0]
 8012a5c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012a60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012a64:	f00e ff8c 	bl	8021980 <mg_match>
 8012a68:	2800      	cmp	r0, #0
 8012a6a:	d1e7      	bne.n	8012a3c <handle_fs_get_log+0x5c>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012a6c:	4b09      	ldr	r3, [pc, #36]	@ (8012a94 <handle_fs_get_log+0xb4>)
 8012a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8012a98 <handle_fs_get_log+0xb8>)
 8012a70:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012a74:	4638      	mov	r0, r7
 8012a76:	f00e fced 	bl	8021454 <mg_http_reply>
}
 8012a7a:	e7df      	b.n	8012a3c <handle_fs_get_log+0x5c>
 8012a7c:	080337fc 	.word	0x080337fc
 8012a80:	080330b0 	.word	0x080330b0
 8012a84:	2000001c 	.word	0x2000001c
 8012a88:	080330e0 	.word	0x080330e0
 8012a8c:	080330f0 	.word	0x080330f0
 8012a90:	08033504 	.word	0x08033504
 8012a94:	08033c9c 	.word	0x08033c9c
 8012a98:	08033548 	.word	0x08033548

08012a9c <handle_restart_mcu>:
static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 8012a9c:	b570      	push	{r4, r5, r6, lr}
 8012a9e:	b086      	sub	sp, #24
 8012aa0:	4605      	mov	r5, r0
 8012aa2:	460c      	mov	r4, r1
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012aa4:	ae04      	add	r6, sp, #16
 8012aa6:	4915      	ldr	r1, [pc, #84]	@ (8012afc <handle_restart_mcu+0x60>)
 8012aa8:	4630      	mov	r0, r6
 8012aaa:	f00e fdb5 	bl	8021618 <mg_str_s>
 8012aae:	2300      	movs	r3, #0
 8012ab0:	9300      	str	r3, [sp, #0]
 8012ab2:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012ab6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012aba:	f00e ff61 	bl	8021980 <mg_match>
 8012abe:	b1a0      	cbz	r0, 8012aea <handle_restart_mcu+0x4e>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 8012ac0:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
		mg_timer_add(param->mgr, 2000 /* 2 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 8012ac2:	6818      	ldr	r0, [r3, #0]
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	9302      	str	r3, [sp, #8]
 8012ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8012b00 <handle_restart_mcu+0x64>)
 8012aca:	9301      	str	r3, [sp, #4]
 8012acc:	2301      	movs	r3, #1
 8012ace:	9300      	str	r3, [sp, #0]
 8012ad0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	f00f fe81 	bl	80227dc <mg_timer_add>
		mg_http_reply(c, 200, headers, //TODO delete for release,
 8012ada:	4b0a      	ldr	r3, [pc, #40]	@ (8012b04 <handle_restart_mcu+0x68>)
 8012adc:	4a0a      	ldr	r2, [pc, #40]	@ (8012b08 <handle_restart_mcu+0x6c>)
 8012ade:	21c8      	movs	r1, #200	@ 0xc8
 8012ae0:	4628      	mov	r0, r5
 8012ae2:	f00e fcb7 	bl	8021454 <mg_http_reply>
}
 8012ae6:	b006      	add	sp, #24
 8012ae8:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012aea:	4b08      	ldr	r3, [pc, #32]	@ (8012b0c <handle_restart_mcu+0x70>)
 8012aec:	4a06      	ldr	r2, [pc, #24]	@ (8012b08 <handle_restart_mcu+0x6c>)
 8012aee:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012af2:	4628      	mov	r0, r5
 8012af4:	f00e fcae 	bl	8021454 <mg_http_reply>
}
 8012af8:	e7f5      	b.n	8012ae6 <handle_restart_mcu+0x4a>
 8012afa:	bf00      	nop
 8012afc:	08033504 	.word	0x08033504
 8012b00:	08014b01 	.word	0x08014b01
 8012b04:	08033cf4 	.word	0x08033cf4
 8012b08:	08033548 	.word	0x08033548
 8012b0c:	080335fc 	.word	0x080335fc

08012b10 <handle_activete_and_reboot>:
static void handle_activete_and_reboot(struct mg_connection *c, struct mg_http_message *hm){
 8012b10:	b570      	push	{r4, r5, r6, lr}
 8012b12:	b084      	sub	sp, #16
 8012b14:	4605      	mov	r5, r0
 8012b16:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012b18:	ae02      	add	r6, sp, #8
 8012b1a:	4914      	ldr	r1, [pc, #80]	@ (8012b6c <handle_activete_and_reboot+0x5c>)
 8012b1c:	4630      	mov	r0, r6
 8012b1e:	f00e fd7b 	bl	8021618 <mg_str_s>
 8012b22:	2300      	movs	r3, #0
 8012b24:	9300      	str	r3, [sp, #0]
 8012b26:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012b2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012b2e:	f00e ff27 	bl	8021980 <mg_match>
 8012b32:	b198      	cbz	r0, 8012b5c <handle_activete_and_reboot+0x4c>
		if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 8012b34:	4b0e      	ldr	r3, [pc, #56]	@ (8012b70 <handle_activete_and_reboot+0x60>)
 8012b36:	69db      	ldr	r3, [r3, #28]
 8012b38:	490e      	ldr	r1, [pc, #56]	@ (8012b74 <handle_activete_and_reboot+0x64>)
 8012b3a:	480f      	ldr	r0, [pc, #60]	@ (8012b78 <handle_activete_and_reboot+0x68>)
 8012b3c:	4798      	blx	r3
 8012b3e:	b128      	cbz	r0, 8012b4c <handle_activete_and_reboot+0x3c>
			handle_restart_mcu(c, hm);
 8012b40:	4621      	mov	r1, r4
 8012b42:	4628      	mov	r0, r5
 8012b44:	f7ff ffaa 	bl	8012a9c <handle_restart_mcu>
}
 8012b48:	b004      	add	sp, #16
 8012b4a:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 500, headers, //TODO delete for release,
 8012b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8012b7c <handle_activete_and_reboot+0x6c>)
 8012b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8012b80 <handle_activete_and_reboot+0x70>)
 8012b50:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8012b54:	4628      	mov	r0, r5
 8012b56:	f00e fc7d 	bl	8021454 <mg_http_reply>
 8012b5a:	e7f5      	b.n	8012b48 <handle_activete_and_reboot+0x38>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012b5c:	4b09      	ldr	r3, [pc, #36]	@ (8012b84 <handle_activete_and_reboot+0x74>)
 8012b5e:	4a08      	ldr	r2, [pc, #32]	@ (8012b80 <handle_activete_and_reboot+0x70>)
 8012b60:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012b64:	4628      	mov	r0, r5
 8012b66:	f00e fc75 	bl	8021454 <mg_http_reply>
}
 8012b6a:	e7ed      	b.n	8012b48 <handle_activete_and_reboot+0x38>
 8012b6c:	08033504 	.word	0x08033504
 8012b70:	2000001c 	.word	0x2000001c
 8012b74:	0803308c 	.word	0x0803308c
 8012b78:	08033d28 	.word	0x08033d28
 8012b7c:	08033d40 	.word	0x08033d40
 8012b80:	08033548 	.word	0x08033548
 8012b84:	080335fc 	.word	0x080335fc

08012b88 <handle_firmware_upload>:
static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 8012b88:	b570      	push	{r4, r5, r6, lr}
 8012b8a:	b0a4      	sub	sp, #144	@ 0x90
 8012b8c:	4605      	mov	r5, r0
 8012b8e:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012b90:	ae22      	add	r6, sp, #136	@ 0x88
 8012b92:	491a      	ldr	r1, [pc, #104]	@ (8012bfc <handle_firmware_upload+0x74>)
 8012b94:	4630      	mov	r0, r6
 8012b96:	f00e fd3f 	bl	8021618 <mg_str_s>
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	9300      	str	r3, [sp, #0]
 8012b9e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012ba2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012ba6:	f00e feeb 	bl	8021980 <mg_match>
 8012baa:	b1f0      	cbz	r0, 8012bea <handle_firmware_upload+0x62>
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8012bac:	2380      	movs	r3, #128	@ 0x80
 8012bae:	aa02      	add	r2, sp, #8
 8012bb0:	4913      	ldr	r1, [pc, #76]	@ (8012c00 <handle_firmware_upload+0x78>)
 8012bb2:	f104 0010 	add.w	r0, r4, #16
 8012bb6:	f00f fbae 	bl	8022316 <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 8012bba:	4912      	ldr	r1, [pc, #72]	@ (8012c04 <handle_firmware_upload+0x7c>)
 8012bbc:	a802      	add	r0, sp, #8
 8012bbe:	f7fd fb0f 	bl	80101e0 <strcmp>
 8012bc2:	b940      	cbnz	r0, 8012bd6 <handle_firmware_upload+0x4e>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 8012bc4:	4b10      	ldr	r3, [pc, #64]	@ (8012c08 <handle_firmware_upload+0x80>)
 8012bc6:	9300      	str	r3, [sp, #0]
 8012bc8:	4b10      	ldr	r3, [pc, #64]	@ (8012c0c <handle_firmware_upload+0x84>)
 8012bca:	4a11      	ldr	r2, [pc, #68]	@ (8012c10 <handle_firmware_upload+0x88>)
 8012bcc:	4621      	mov	r1, r4
 8012bce:	4628      	mov	r0, r5
 8012bd0:	f011 f89a 	bl	8023d08 <mg_http_upload>
 8012bd4:	e010      	b.n	8012bf8 <handle_firmware_upload+0x70>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8012bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8012c04 <handle_firmware_upload+0x7c>)
 8012bd8:	9300      	str	r3, [sp, #0]
 8012bda:	4b0e      	ldr	r3, [pc, #56]	@ (8012c14 <handle_firmware_upload+0x8c>)
 8012bdc:	4a0e      	ldr	r2, [pc, #56]	@ (8012c18 <handle_firmware_upload+0x90>)
 8012bde:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012be2:	4628      	mov	r0, r5
 8012be4:	f00e fc36 	bl	8021454 <mg_http_reply>
 8012be8:	e006      	b.n	8012bf8 <handle_firmware_upload+0x70>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012bea:	4b0c      	ldr	r3, [pc, #48]	@ (8012c1c <handle_firmware_upload+0x94>)
 8012bec:	4a0a      	ldr	r2, [pc, #40]	@ (8012c18 <handle_firmware_upload+0x90>)
 8012bee:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012bf2:	4628      	mov	r0, r5
 8012bf4:	f00e fc2e 	bl	8021454 <mg_http_reply>
}
 8012bf8:	b024      	add	sp, #144	@ 0x90
 8012bfa:	bd70      	pop	{r4, r5, r6, pc}
 8012bfc:	08033504 	.word	0x08033504
 8012c00:	08037368 	.word	0x08037368
 8012c04:	08033d84 	.word	0x08033d84
 8012c08:	00030d40 	.word	0x00030d40
 8012c0c:	08033080 	.word	0x08033080
 8012c10:	2000001c 	.word	0x2000001c
 8012c14:	08033d94 	.word	0x08033d94
 8012c18:	08033548 	.word	0x08033548
 8012c1c:	080335fc 	.word	0x080335fc

08012c20 <calc_file_md5sum>:
static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 8012c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c22:	b097      	sub	sp, #92	@ 0x5c
 8012c24:	4604      	mov	r4, r0
 8012c26:	460e      	mov	r6, r1
	char * buff = calloc(buff_len, 1);
 8012c28:	2101      	movs	r1, #1
 8012c2a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8012c2e:	f7ff fc53 	bl	80124d8 <mg_calloc>
	if (buff == NULL){
 8012c32:	4605      	mov	r5, r0
 8012c34:	b150      	cbz	r0, 8012c4c <calc_file_md5sum+0x2c>
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 8012c36:	2201      	movs	r2, #1
 8012c38:	4621      	mov	r1, r4
 8012c3a:	4828      	ldr	r0, [pc, #160]	@ (8012cdc <calc_file_md5sum+0xbc>)
 8012c3c:	f00d f97d 	bl	801ff3a <mg_fs_open>
	if (fd==NULL){
 8012c40:	4604      	mov	r4, r0
 8012c42:	b140      	cbz	r0, 8012c56 <calc_file_md5sum+0x36>
	mg_md5_init(&md5_ctx);
 8012c44:	4668      	mov	r0, sp
 8012c46:	f00d fd87 	bl	8020758 <mg_md5_init>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8012c4a:	e010      	b.n	8012c6e <calc_file_md5sum+0x4e>
		free(buff);
 8012c4c:	f006 fa96 	bl	801917c <vPortFree>
		return -1;
 8012c50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c54:	e040      	b.n	8012cd8 <calc_file_md5sum+0xb8>
		mg_fs_close(fd);
 8012c56:	f00d f989 	bl	801ff6c <mg_fs_close>
		free(buff);
 8012c5a:	4628      	mov	r0, r5
 8012c5c:	f006 fa8e 	bl	801917c <vPortFree>
		return -2;
 8012c60:	f06f 0001 	mvn.w	r0, #1
 8012c64:	e038      	b.n	8012cd8 <calc_file_md5sum+0xb8>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 8012c66:	4629      	mov	r1, r5
 8012c68:	4668      	mov	r0, sp
 8012c6a:	f00d fd8b 	bl	8020784 <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8012c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8012cdc <calc_file_md5sum+0xbc>)
 8012c70:	691b      	ldr	r3, [r3, #16]
 8012c72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8012c76:	4629      	mov	r1, r5
 8012c78:	6820      	ldr	r0, [r4, #0]
 8012c7a:	4798      	blx	r3
 8012c7c:	4602      	mov	r2, r0
 8012c7e:	2800      	cmp	r0, #0
 8012c80:	d1f1      	bne.n	8012c66 <calc_file_md5sum+0x46>
	mg_fs_close(fd);
 8012c82:	4620      	mov	r0, r4
 8012c84:	f00d f972 	bl	801ff6c <mg_fs_close>
	uint8_t * digest = calloc(digest_len, 1);
 8012c88:	2101      	movs	r1, #1
 8012c8a:	2010      	movs	r0, #16
 8012c8c:	f7ff fc24 	bl	80124d8 <mg_calloc>
	if (digest == NULL){
 8012c90:	4607      	mov	r7, r0
 8012c92:	b128      	cbz	r0, 8012ca0 <calc_file_md5sum+0x80>
	mg_md5_final(&md5_ctx, digest);
 8012c94:	4601      	mov	r1, r0
 8012c96:	4668      	mov	r0, sp
 8012c98:	f00d fdcb 	bl	8020832 <mg_md5_final>
	for (int i = 0; i < 16; ++i) {
 8012c9c:	2400      	movs	r4, #0
 8012c9e:	e012      	b.n	8012cc6 <calc_file_md5sum+0xa6>
		free(buff);
 8012ca0:	4628      	mov	r0, r5
 8012ca2:	f006 fa6b 	bl	801917c <vPortFree>
		free(digest);
 8012ca6:	4638      	mov	r0, r7
 8012ca8:	f006 fa68 	bl	801917c <vPortFree>
		return -1;
 8012cac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012cb0:	e012      	b.n	8012cd8 <calc_file_md5sum+0xb8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 8012cb2:	0061      	lsls	r1, r4, #1
 8012cb4:	5d3b      	ldrb	r3, [r7, r4]
 8012cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8012ce0 <calc_file_md5sum+0xc0>)
 8012cb8:	f1c1 0121 	rsb	r1, r1, #33	@ 0x21
 8012cbc:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 8012cc0:	f016 f9b4 	bl	802902c <snprintf>
	for (int i = 0; i < 16; ++i) {
 8012cc4:	3401      	adds	r4, #1
 8012cc6:	2c0f      	cmp	r4, #15
 8012cc8:	ddf3      	ble.n	8012cb2 <calc_file_md5sum+0x92>
	free(buff);
 8012cca:	4628      	mov	r0, r5
 8012ccc:	f006 fa56 	bl	801917c <vPortFree>
	free(digest);
 8012cd0:	4638      	mov	r0, r7
 8012cd2:	f006 fa53 	bl	801917c <vPortFree>
	return 0;
 8012cd6:	2000      	movs	r0, #0
}
 8012cd8:	b017      	add	sp, #92	@ 0x5c
 8012cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cdc:	2000001c 	.word	0x2000001c
 8012ce0:	08033de0 	.word	0x08033de0

08012ce4 <handle_firmware_md5>:
static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 8012ce4:	b570      	push	{r4, r5, r6, lr}
 8012ce6:	b084      	sub	sp, #16
 8012ce8:	4605      	mov	r5, r0
 8012cea:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012cec:	ae02      	add	r6, sp, #8
 8012cee:	4919      	ldr	r1, [pc, #100]	@ (8012d54 <handle_firmware_md5+0x70>)
 8012cf0:	4630      	mov	r0, r6
 8012cf2:	f00e fc91 	bl	8021618 <mg_str_s>
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	9300      	str	r3, [sp, #0]
 8012cfa:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012cfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012d02:	f00e fe3d 	bl	8021980 <mg_match>
 8012d06:	b1e8      	cbz	r0, 8012d44 <handle_firmware_md5+0x60>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 8012d08:	2101      	movs	r1, #1
 8012d0a:	2021      	movs	r0, #33	@ 0x21
 8012d0c:	f7ff fbe4 	bl	80124d8 <mg_calloc>
 8012d10:	4604      	mov	r4, r0
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 8012d12:	4601      	mov	r1, r0
 8012d14:	4810      	ldr	r0, [pc, #64]	@ (8012d58 <handle_firmware_md5+0x74>)
 8012d16:	f7ff ff83 	bl	8012c20 <calc_file_md5sum>
 8012d1a:	b958      	cbnz	r0, 8012d34 <handle_firmware_md5+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8012d1c:	9400      	str	r4, [sp, #0]
 8012d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8012d5c <handle_firmware_md5+0x78>)
 8012d20:	4a0f      	ldr	r2, [pc, #60]	@ (8012d60 <handle_firmware_md5+0x7c>)
 8012d22:	21c8      	movs	r1, #200	@ 0xc8
 8012d24:	4628      	mov	r0, r5
 8012d26:	f00e fb95 	bl	8021454 <mg_http_reply>
		free(md5_str);
 8012d2a:	4620      	mov	r0, r4
 8012d2c:	f006 fa26 	bl	801917c <vPortFree>
}
 8012d30:	b004      	add	sp, #16
 8012d32:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 404, headers, //TODO delete for release,
 8012d34:	4b0b      	ldr	r3, [pc, #44]	@ (8012d64 <handle_firmware_md5+0x80>)
 8012d36:	4a0a      	ldr	r2, [pc, #40]	@ (8012d60 <handle_firmware_md5+0x7c>)
 8012d38:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8012d3c:	4628      	mov	r0, r5
 8012d3e:	f00e fb89 	bl	8021454 <mg_http_reply>
 8012d42:	e7f2      	b.n	8012d2a <handle_firmware_md5+0x46>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012d44:	4b08      	ldr	r3, [pc, #32]	@ (8012d68 <handle_firmware_md5+0x84>)
 8012d46:	4a06      	ldr	r2, [pc, #24]	@ (8012d60 <handle_firmware_md5+0x7c>)
 8012d48:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012d4c:	4628      	mov	r0, r5
 8012d4e:	f00e fb81 	bl	8021454 <mg_http_reply>
}
 8012d52:	e7ed      	b.n	8012d30 <handle_firmware_md5+0x4c>
 8012d54:	080337fc 	.word	0x080337fc
 8012d58:	08033d28 	.word	0x08033d28
 8012d5c:	08033de8 	.word	0x08033de8
 8012d60:	08033548 	.word	0x08033548
 8012d64:	08033e0c 	.word	0x08033e0c
 8012d68:	08033e4c 	.word	0x08033e4c

08012d6c <handle_fs_mkdir>:
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 8012d6c:	b570      	push	{r4, r5, r6, lr}
 8012d6e:	b0c4      	sub	sp, #272	@ 0x110
 8012d70:	4606      	mov	r6, r0
 8012d72:	460c      	mov	r4, r1
  if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012d74:	ad42      	add	r5, sp, #264	@ 0x108
 8012d76:	4920      	ldr	r1, [pc, #128]	@ (8012df8 <handle_fs_mkdir+0x8c>)
 8012d78:	4628      	mov	r0, r5
 8012d7a:	f00e fc4d 	bl	8021618 <mg_str_s>
 8012d7e:	2300      	movs	r3, #0
 8012d80:	9300      	str	r3, [sp, #0]
 8012d82:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012d86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012d8a:	f00e fdf9 	bl	8021980 <mg_match>
 8012d8e:	b350      	cbz	r0, 8012de6 <handle_fs_mkdir+0x7a>
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 8012d90:	237b      	movs	r3, #123	@ 0x7b
 8012d92:	aa23      	add	r2, sp, #140	@ 0x8c
 8012d94:	4919      	ldr	r1, [pc, #100]	@ (8012dfc <handle_fs_mkdir+0x90>)
 8012d96:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 8012d9a:	f00f fabc 	bl	8022316 <mg_http_get_var>
 8012d9e:	2800      	cmp	r0, #0
 8012da0:	dd19      	ble.n	8012dd6 <handle_fs_mkdir+0x6a>
		snprintf(path, sizeof(path), "/web/%s", name);
 8012da2:	ab23      	add	r3, sp, #140	@ 0x8c
 8012da4:	4a16      	ldr	r2, [pc, #88]	@ (8012e00 <handle_fs_mkdir+0x94>)
 8012da6:	2180      	movs	r1, #128	@ 0x80
 8012da8:	a803      	add	r0, sp, #12
 8012daa:	f016 f93f 	bl	802902c <snprintf>
		if (mg_fs_lfs.mkd(path)) {
 8012dae:	4b15      	ldr	r3, [pc, #84]	@ (8012e04 <handle_fs_mkdir+0x98>)
 8012db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012db2:	a803      	add	r0, sp, #12
 8012db4:	4798      	blx	r3
 8012db6:	b130      	cbz	r0, 8012dc6 <handle_fs_mkdir+0x5a>
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 8012db8:	4b13      	ldr	r3, [pc, #76]	@ (8012e08 <handle_fs_mkdir+0x9c>)
 8012dba:	4a14      	ldr	r2, [pc, #80]	@ (8012e0c <handle_fs_mkdir+0xa0>)
 8012dbc:	21c8      	movs	r1, #200	@ 0xc8
 8012dbe:	4630      	mov	r0, r6
 8012dc0:	f00e fb48 	bl	8021454 <mg_http_reply>
 8012dc4:	e016      	b.n	8012df4 <handle_fs_mkdir+0x88>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 8012dc6:	4b12      	ldr	r3, [pc, #72]	@ (8012e10 <handle_fs_mkdir+0xa4>)
 8012dc8:	4a10      	ldr	r2, [pc, #64]	@ (8012e0c <handle_fs_mkdir+0xa0>)
 8012dca:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8012dce:	4630      	mov	r0, r6
 8012dd0:	f00e fb40 	bl	8021454 <mg_http_reply>
 8012dd4:	e00e      	b.n	8012df4 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8012e14 <handle_fs_mkdir+0xa8>)
 8012dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8012e0c <handle_fs_mkdir+0xa0>)
 8012dda:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012dde:	4630      	mov	r0, r6
 8012de0:	f00e fb38 	bl	8021454 <mg_http_reply>
 8012de4:	e006      	b.n	8012df4 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012de6:	4b0c      	ldr	r3, [pc, #48]	@ (8012e18 <handle_fs_mkdir+0xac>)
 8012de8:	4a08      	ldr	r2, [pc, #32]	@ (8012e0c <handle_fs_mkdir+0xa0>)
 8012dea:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012dee:	4630      	mov	r0, r6
 8012df0:	f00e fb30 	bl	8021454 <mg_http_reply>
}
 8012df4:	b044      	add	sp, #272	@ 0x110
 8012df6:	bd70      	pop	{r4, r5, r6, pc}
 8012df8:	08033504 	.word	0x08033504
 8012dfc:	08033e9c 	.word	0x08033e9c
 8012e00:	08033ea4 	.word	0x08033ea4
 8012e04:	2000001c 	.word	0x2000001c
 8012e08:	08033eac 	.word	0x08033eac
 8012e0c:	08033548 	.word	0x08033548
 8012e10:	08033ee0 	.word	0x08033ee0
 8012e14:	08033f1c 	.word	0x08033f1c
 8012e18:	080335fc 	.word	0x080335fc

08012e1c <dashboard>:

static void dashboard(struct mg_connection *c, int ev, void *ev_data) {

	if (ev == MG_EV_HTTP_MSG) {
 8012e1c:	290b      	cmp	r1, #11
 8012e1e:	d000      	beq.n	8012e22 <dashboard+0x6>
 8012e20:	4770      	bx	lr
static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 8012e22:	b570      	push	{r4, r5, r6, lr}
 8012e24:	b0a6      	sub	sp, #152	@ 0x98
 8012e26:	4605      	mov	r5, r0
 8012e28:	4614      	mov	r4, r2
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 8012e2a:	ae08      	add	r6, sp, #32
 8012e2c:	499c      	ldr	r1, [pc, #624]	@ (80130a0 <dashboard+0x284>)
 8012e2e:	4630      	mov	r0, r6
 8012e30:	f00e fbf2 	bl	8021618 <mg_str_s>
 8012e34:	2300      	movs	r3, #0
 8012e36:	9300      	str	r3, [sp, #0]
 8012e38:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012e3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012e40:	f00e fd9e 	bl	8021980 <mg_match>
 8012e44:	b120      	cbz	r0, 8012e50 <dashboard+0x34>
            	handle_OPTIONS_method(c);
 8012e46:	4628      	mov	r0, r5
 8012e48:	f7ff f9f0 	bl	801222c <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 8012e4c:	b026      	add	sp, #152	@ 0x98
 8012e4e:	bd70      	pop	{r4, r5, r6, pc}
        }else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 8012e50:	ae0a      	add	r6, sp, #40	@ 0x28
 8012e52:	4994      	ldr	r1, [pc, #592]	@ (80130a4 <dashboard+0x288>)
 8012e54:	4630      	mov	r0, r6
 8012e56:	f00e fbdf 	bl	8021618 <mg_str_s>
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	9300      	str	r3, [sp, #0]
 8012e5e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012e62:	f104 0108 	add.w	r1, r4, #8
 8012e66:	c903      	ldmia	r1, {r0, r1}
 8012e68:	f00e fd8a 	bl	8021980 <mg_match>
 8012e6c:	b118      	cbz	r0, 8012e76 <dashboard+0x5a>
			handle_ram_status_get(c);
 8012e6e:	4628      	mov	r0, r5
 8012e70:	f7ff fa5a 	bl	8012328 <handle_ram_status_get>
 8012e74:	e7ea      	b.n	8012e4c <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 8012e76:	ae0c      	add	r6, sp, #48	@ 0x30
 8012e78:	498b      	ldr	r1, [pc, #556]	@ (80130a8 <dashboard+0x28c>)
 8012e7a:	4630      	mov	r0, r6
 8012e7c:	f00e fbcc 	bl	8021618 <mg_str_s>
 8012e80:	2300      	movs	r3, #0
 8012e82:	9300      	str	r3, [sp, #0]
 8012e84:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012e88:	f104 0108 	add.w	r1, r4, #8
 8012e8c:	c903      	ldmia	r1, {r0, r1}
 8012e8e:	f00e fd77 	bl	8021980 <mg_match>
 8012e92:	b120      	cbz	r0, 8012e9e <dashboard+0x82>
			handle_io_status_get(c, hm);
 8012e94:	4621      	mov	r1, r4
 8012e96:	4628      	mov	r0, r5
 8012e98:	f7ff fa6c 	bl	8012374 <handle_io_status_get>
 8012e9c:	e7d6      	b.n	8012e4c <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 8012e9e:	ae0e      	add	r6, sp, #56	@ 0x38
 8012ea0:	4982      	ldr	r1, [pc, #520]	@ (80130ac <dashboard+0x290>)
 8012ea2:	4630      	mov	r0, r6
 8012ea4:	f00e fbb8 	bl	8021618 <mg_str_s>
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	9300      	str	r3, [sp, #0]
 8012eac:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012eb0:	f104 0108 	add.w	r1, r4, #8
 8012eb4:	c903      	ldmia	r1, {r0, r1}
 8012eb6:	f00e fd63 	bl	8021980 <mg_match>
 8012eba:	b120      	cbz	r0, 8012ec6 <dashboard+0xaa>
			handle_mqtt_conf(c, hm);
 8012ebc:	4621      	mov	r1, r4
 8012ebe:	4628      	mov	r0, r5
 8012ec0:	f7ff fb18 	bl	80124f4 <handle_mqtt_conf>
 8012ec4:	e7c2      	b.n	8012e4c <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 8012ec6:	ae10      	add	r6, sp, #64	@ 0x40
 8012ec8:	4979      	ldr	r1, [pc, #484]	@ (80130b0 <dashboard+0x294>)
 8012eca:	4630      	mov	r0, r6
 8012ecc:	f00e fba4 	bl	8021618 <mg_str_s>
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	9300      	str	r3, [sp, #0]
 8012ed4:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012ed8:	f104 0108 	add.w	r1, r4, #8
 8012edc:	c903      	ldmia	r1, {r0, r1}
 8012ede:	f00e fd4f 	bl	8021980 <mg_match>
 8012ee2:	b120      	cbz	r0, 8012eee <dashboard+0xd2>
			handle_dev_status(c, hm);
 8012ee4:	4621      	mov	r1, r4
 8012ee6:	4628      	mov	r0, r5
 8012ee8:	f7ff fc3c 	bl	8012764 <handle_dev_status>
 8012eec:	e7ae      	b.n	8012e4c <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/device/log"), NULL)){
 8012eee:	ae12      	add	r6, sp, #72	@ 0x48
 8012ef0:	4970      	ldr	r1, [pc, #448]	@ (80130b4 <dashboard+0x298>)
 8012ef2:	4630      	mov	r0, r6
 8012ef4:	f00e fb90 	bl	8021618 <mg_str_s>
 8012ef8:	2300      	movs	r3, #0
 8012efa:	9300      	str	r3, [sp, #0]
 8012efc:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012f00:	f104 0108 	add.w	r1, r4, #8
 8012f04:	c903      	ldmia	r1, {r0, r1}
 8012f06:	f00e fd3b 	bl	8021980 <mg_match>
 8012f0a:	b128      	cbz	r0, 8012f18 <dashboard+0xfc>
			handle_fs_get_log(c, hm, 0);
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	4621      	mov	r1, r4
 8012f10:	4628      	mov	r0, r5
 8012f12:	f7ff fd65 	bl	80129e0 <handle_fs_get_log>
 8012f16:	e799      	b.n	8012e4c <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/device/log_old"), NULL)){
 8012f18:	ae14      	add	r6, sp, #80	@ 0x50
 8012f1a:	4967      	ldr	r1, [pc, #412]	@ (80130b8 <dashboard+0x29c>)
 8012f1c:	4630      	mov	r0, r6
 8012f1e:	f00e fb7b 	bl	8021618 <mg_str_s>
 8012f22:	2300      	movs	r3, #0
 8012f24:	9300      	str	r3, [sp, #0]
 8012f26:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012f2a:	f104 0108 	add.w	r1, r4, #8
 8012f2e:	c903      	ldmia	r1, {r0, r1}
 8012f30:	f00e fd26 	bl	8021980 <mg_match>
 8012f34:	b128      	cbz	r0, 8012f42 <dashboard+0x126>
			handle_fs_get_log(c, hm, 1);
 8012f36:	2201      	movs	r2, #1
 8012f38:	4621      	mov	r1, r4
 8012f3a:	4628      	mov	r0, r5
 8012f3c:	f7ff fd50 	bl	80129e0 <handle_fs_get_log>
 8012f40:	e784      	b.n	8012e4c <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 8012f42:	ae16      	add	r6, sp, #88	@ 0x58
 8012f44:	495d      	ldr	r1, [pc, #372]	@ (80130bc <dashboard+0x2a0>)
 8012f46:	4630      	mov	r0, r6
 8012f48:	f00e fb66 	bl	8021618 <mg_str_s>
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	9300      	str	r3, [sp, #0]
 8012f50:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012f54:	f104 0108 	add.w	r1, r4, #8
 8012f58:	c903      	ldmia	r1, {r0, r1}
 8012f5a:	f00e fd11 	bl	8021980 <mg_match>
 8012f5e:	b120      	cbz	r0, 8012f6a <dashboard+0x14e>
			handle_restart_mcu(c, hm);
 8012f60:	4621      	mov	r1, r4
 8012f62:	4628      	mov	r0, r5
 8012f64:	f7ff fd9a 	bl	8012a9c <handle_restart_mcu>
 8012f68:	e770      	b.n	8012e4c <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 8012f6a:	ae18      	add	r6, sp, #96	@ 0x60
 8012f6c:	4954      	ldr	r1, [pc, #336]	@ (80130c0 <dashboard+0x2a4>)
 8012f6e:	4630      	mov	r0, r6
 8012f70:	f00e fb52 	bl	8021618 <mg_str_s>
 8012f74:	2300      	movs	r3, #0
 8012f76:	9300      	str	r3, [sp, #0]
 8012f78:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012f7c:	68e1      	ldr	r1, [r4, #12]
 8012f7e:	68a0      	ldr	r0, [r4, #8]
 8012f80:	f00e fcfe 	bl	8021980 <mg_match>
 8012f84:	b120      	cbz	r0, 8012f90 <dashboard+0x174>
			handle_firmware_upload(c, hm);
 8012f86:	4621      	mov	r1, r4
 8012f88:	4628      	mov	r0, r5
 8012f8a:	f7ff fdfd 	bl	8012b88 <handle_firmware_upload>
 8012f8e:	e75d      	b.n	8012e4c <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 8012f90:	ae1a      	add	r6, sp, #104	@ 0x68
 8012f92:	494c      	ldr	r1, [pc, #304]	@ (80130c4 <dashboard+0x2a8>)
 8012f94:	4630      	mov	r0, r6
 8012f96:	f00e fb3f 	bl	8021618 <mg_str_s>
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	9300      	str	r3, [sp, #0]
 8012f9e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012fa2:	68e1      	ldr	r1, [r4, #12]
 8012fa4:	68a0      	ldr	r0, [r4, #8]
 8012fa6:	f00e fceb 	bl	8021980 <mg_match>
 8012faa:	b120      	cbz	r0, 8012fb6 <dashboard+0x19a>
			handle_firmware_md5(c, hm);
 8012fac:	4621      	mov	r1, r4
 8012fae:	4628      	mov	r0, r5
 8012fb0:	f7ff fe98 	bl	8012ce4 <handle_firmware_md5>
 8012fb4:	e74a      	b.n	8012e4c <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/activate_and_reboot"), NULL)){
 8012fb6:	ae1c      	add	r6, sp, #112	@ 0x70
 8012fb8:	4943      	ldr	r1, [pc, #268]	@ (80130c8 <dashboard+0x2ac>)
 8012fba:	4630      	mov	r0, r6
 8012fbc:	f00e fb2c 	bl	8021618 <mg_str_s>
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	9300      	str	r3, [sp, #0]
 8012fc4:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012fc8:	68e1      	ldr	r1, [r4, #12]
 8012fca:	68a0      	ldr	r0, [r4, #8]
 8012fcc:	f00e fcd8 	bl	8021980 <mg_match>
 8012fd0:	b120      	cbz	r0, 8012fdc <dashboard+0x1c0>
			handle_activete_and_reboot(c, hm);
 8012fd2:	4621      	mov	r1, r4
 8012fd4:	4628      	mov	r0, r5
 8012fd6:	f7ff fd9b 	bl	8012b10 <handle_activete_and_reboot>
 8012fda:	e737      	b.n	8012e4c <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 8012fdc:	ae1e      	add	r6, sp, #120	@ 0x78
 8012fde:	493b      	ldr	r1, [pc, #236]	@ (80130cc <dashboard+0x2b0>)
 8012fe0:	4630      	mov	r0, r6
 8012fe2:	f00e fb19 	bl	8021618 <mg_str_s>
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	9300      	str	r3, [sp, #0]
 8012fea:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012fee:	68e1      	ldr	r1, [r4, #12]
 8012ff0:	68a0      	ldr	r0, [r4, #8]
 8012ff2:	f00e fcc5 	bl	8021980 <mg_match>
 8012ff6:	b120      	cbz	r0, 8013002 <dashboard+0x1e6>
			handle_firmware_deactivate(c, hm);
 8012ff8:	4621      	mov	r1, r4
 8012ffa:	4628      	mov	r0, r5
 8012ffc:	f7ff f922 	bl	8012244 <handle_firmware_deactivate>
 8013000:	e724      	b.n	8012e4c <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 8013002:	ae20      	add	r6, sp, #128	@ 0x80
 8013004:	4932      	ldr	r1, [pc, #200]	@ (80130d0 <dashboard+0x2b4>)
 8013006:	4630      	mov	r0, r6
 8013008:	f00e fb06 	bl	8021618 <mg_str_s>
 801300c:	2300      	movs	r3, #0
 801300e:	9300      	str	r3, [sp, #0]
 8013010:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013014:	68e1      	ldr	r1, [r4, #12]
 8013016:	68a0      	ldr	r0, [r4, #8]
 8013018:	f00e fcb2 	bl	8021980 <mg_match>
 801301c:	b120      	cbz	r0, 8013028 <dashboard+0x20c>
			 handle_web_files_remove(c, hm);
 801301e:	4621      	mov	r1, r4
 8013020:	4628      	mov	r0, r5
 8013022:	f7ff f94b 	bl	80122bc <handle_web_files_remove>
 8013026:	e711      	b.n	8012e4c <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 8013028:	ae22      	add	r6, sp, #136	@ 0x88
 801302a:	492a      	ldr	r1, [pc, #168]	@ (80130d4 <dashboard+0x2b8>)
 801302c:	4630      	mov	r0, r6
 801302e:	f00e faf3 	bl	8021618 <mg_str_s>
 8013032:	2300      	movs	r3, #0
 8013034:	9300      	str	r3, [sp, #0]
 8013036:	e896 000c 	ldmia.w	r6, {r2, r3}
 801303a:	68e1      	ldr	r1, [r4, #12]
 801303c:	68a0      	ldr	r0, [r4, #8]
 801303e:	f00e fc9f 	bl	8021980 <mg_match>
 8013042:	b140      	cbz	r0, 8013056 <dashboard+0x23a>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 8013044:	4b24      	ldr	r3, [pc, #144]	@ (80130d8 <dashboard+0x2bc>)
 8013046:	9300      	str	r3, [sp, #0]
 8013048:	4b24      	ldr	r3, [pc, #144]	@ (80130dc <dashboard+0x2c0>)
 801304a:	4a25      	ldr	r2, [pc, #148]	@ (80130e0 <dashboard+0x2c4>)
 801304c:	4621      	mov	r1, r4
 801304e:	4628      	mov	r0, r5
 8013050:	f010 fe5a 	bl	8023d08 <mg_http_upload>
 8013054:	e6fa      	b.n	8012e4c <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 8013056:	ae24      	add	r6, sp, #144	@ 0x90
 8013058:	4922      	ldr	r1, [pc, #136]	@ (80130e4 <dashboard+0x2c8>)
 801305a:	4630      	mov	r0, r6
 801305c:	f00e fadc 	bl	8021618 <mg_str_s>
 8013060:	2300      	movs	r3, #0
 8013062:	9300      	str	r3, [sp, #0]
 8013064:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013068:	68e1      	ldr	r1, [r4, #12]
 801306a:	68a0      	ldr	r0, [r4, #8]
 801306c:	f00e fc88 	bl	8021980 <mg_match>
 8013070:	b120      	cbz	r0, 801307c <dashboard+0x260>
			 handle_fs_mkdir(c, hm);
 8013072:	4621      	mov	r1, r4
 8013074:	4628      	mov	r0, r5
 8013076:	f7ff fe79 	bl	8012d6c <handle_fs_mkdir>
 801307a:	e6e7      	b.n	8012e4c <dashboard+0x30>
			struct mg_http_serve_opts opts = {
 801307c:	2300      	movs	r3, #0
 801307e:	9302      	str	r3, [sp, #8]
 8013080:	9303      	str	r3, [sp, #12]
 8013082:	9304      	str	r3, [sp, #16]
 8013084:	9305      	str	r3, [sp, #20]
 8013086:	9306      	str	r3, [sp, #24]
 8013088:	9307      	str	r3, [sp, #28]
 801308a:	4b14      	ldr	r3, [pc, #80]	@ (80130dc <dashboard+0x2c0>)
 801308c:	9302      	str	r3, [sp, #8]
 801308e:	4b14      	ldr	r3, [pc, #80]	@ (80130e0 <dashboard+0x2c4>)
 8013090:	9307      	str	r3, [sp, #28]
			mg_http_serve_dir(c, ev_data, &opts);
 8013092:	aa02      	add	r2, sp, #8
 8013094:	4621      	mov	r1, r4
 8013096:	4628      	mov	r0, r5
 8013098:	f010 fd50 	bl	8023b3c <mg_http_serve_dir>
}
 801309c:	e6d6      	b.n	8012e4c <dashboard+0x30>
 801309e:	bf00      	nop
 80130a0:	08033f58 	.word	0x08033f58
 80130a4:	08033f60 	.word	0x08033f60
 80130a8:	08033f70 	.word	0x08033f70
 80130ac:	08033f80 	.word	0x08033f80
 80130b0:	08033f94 	.word	0x08033f94
 80130b4:	08033fa8 	.word	0x08033fa8
 80130b8:	08033fb8 	.word	0x08033fb8
 80130bc:	08033fcc 	.word	0x08033fcc
 80130c0:	08033fe0 	.word	0x08033fe0
 80130c4:	08033ff8 	.word	0x08033ff8
 80130c8:	0803400c 	.word	0x0803400c
 80130cc:	08034030 	.word	0x08034030
 80130d0:	0803404c 	.word	0x0803404c
 80130d4:	08034068 	.word	0x08034068
 80130d8:	0016e360 	.word	0x0016e360
 80130dc:	08033078 	.word	0x08033078
 80130e0:	2000001c 	.word	0x2000001c
 80130e4:	08034084 	.word	0x08034084

080130e8 <dash_hdl>:

void * dash_hdl (void){
	return &dashboard;
}
 80130e8:	4800      	ldr	r0, [pc, #0]	@ (80130ec <dash_hdl+0x4>)
 80130ea:	4770      	bx	lr
 80130ec:	08012e1d 	.word	0x08012e1d

080130f0 <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
    r_w_parameter = func;
 80130f0:	4b01      	ldr	r3, [pc, #4]	@ (80130f8 <reg_parameter_handler+0x8>)
 80130f2:	6018      	str	r0, [r3, #0]
}
 80130f4:	4770      	bx	lr
 80130f6:	bf00      	nop
 80130f8:	20000994 	.word	0x20000994

080130fc <_ZL18mqtt_timer_handlerPv>:
	}
}

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
	if (!mqtt_conn){
 80130fc:	4b1a      	ldr	r3, [pc, #104]	@ (8013168 <_ZL18mqtt_timer_handlerPv+0x6c>)
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	b103      	cbz	r3, 8013104 <_ZL18mqtt_timer_handlerPv+0x8>
 8013102:	4770      	bx	lr
static void mqtt_timer_handler(void *arg){
 8013104:	b530      	push	{r4, r5, lr}
 8013106:	b085      	sub	sp, #20
		logging(L_INFO, "Try to connect to MQTT server");
 8013108:	4918      	ldr	r1, [pc, #96]	@ (801316c <_ZL18mqtt_timer_handlerPv+0x70>)
 801310a:	2001      	movs	r0, #1
 801310c:	f7fe fdb8 	bl	8011c80 <logging>
		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 8013110:	4c17      	ldr	r4, [pc, #92]	@ (8013170 <_ZL18mqtt_timer_handlerPv+0x74>)
 8013112:	2240      	movs	r2, #64	@ 0x40
 8013114:	2100      	movs	r1, #0
 8013116:	4620      	mov	r0, r4
 8013118:	f016 fcb2 	bl	8029a80 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 801311c:	ad02      	add	r5, sp, #8
 801311e:	4b15      	ldr	r3, [pc, #84]	@ (8013174 <_ZL18mqtt_timer_handlerPv+0x78>)
 8013120:	6819      	ldr	r1, [r3, #0]
 8013122:	4628      	mov	r0, r5
 8013124:	f00e fa78 	bl	8021618 <mg_str_s>
 8013128:	e895 0003 	ldmia.w	r5, {r0, r1}
 801312c:	e884 0003 	stmia.w	r4, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 8013130:	4b11      	ldr	r3, [pc, #68]	@ (8013178 <_ZL18mqtt_timer_handlerPv+0x7c>)
 8013132:	6819      	ldr	r1, [r3, #0]
 8013134:	4628      	mov	r0, r5
 8013136:	f00e fa6f 	bl	8021618 <mg_str_s>
 801313a:	f104 0308 	add.w	r3, r4, #8
 801313e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013142:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 8013146:	233c      	movs	r3, #60	@ 0x3c
 8013148:	8563      	strh	r3, [r4, #42]	@ 0x2a
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 801314a:	2300      	movs	r3, #0
 801314c:	9300      	str	r3, [sp, #0]
 801314e:	4b0b      	ldr	r3, [pc, #44]	@ (801317c <_ZL18mqtt_timer_handlerPv+0x80>)
 8013150:	4622      	mov	r2, r4
 8013152:	490b      	ldr	r1, [pc, #44]	@ (8013180 <_ZL18mqtt_timer_handlerPv+0x84>)
 8013154:	6809      	ldr	r1, [r1, #0]
 8013156:	480b      	ldr	r0, [pc, #44]	@ (8013184 <_ZL18mqtt_timer_handlerPv+0x88>)
 8013158:	6800      	ldr	r0, [r0, #0]
 801315a:	f012 fe95 	bl	8025e88 <mg_mqtt_connect>
 801315e:	4b02      	ldr	r3, [pc, #8]	@ (8013168 <_ZL18mqtt_timer_handlerPv+0x6c>)
 8013160:	6018      	str	r0, [r3, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 8013162:	b005      	add	sp, #20
 8013164:	bd30      	pop	{r4, r5, pc}
 8013166:	bf00      	nop
 8013168:	200009b8 	.word	0x200009b8
 801316c:	080340a0 	.word	0x080340a0
 8013170:	200009bc 	.word	0x200009bc
 8013174:	20000a10 	.word	0x20000a10
 8013178:	20000a0c 	.word	0x20000a0c
 801317c:	080136d9 	.word	0x080136d9
 8013180:	20000a14 	.word	0x20000a14
 8013184:	20000a00 	.word	0x20000a00

08013188 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 8013188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801318c:	b085      	sub	sp, #20
 801318e:	4681      	mov	r9, r0
 8013190:	4688      	mov	r8, r1
 8013192:	4692      	mov	sl, r2
	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 8013194:	4c2a      	ldr	r4, [pc, #168]	@ (8013240 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xb8>)
 8013196:	f100 0308 	add.w	r3, r0, #8
 801319a:	9300      	str	r3, [sp, #0]
 801319c:	4b29      	ldr	r3, [pc, #164]	@ (8013244 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xbc>)
 801319e:	4a2a      	ldr	r2, [pc, #168]	@ (8013248 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc0>)
 80131a0:	2128      	movs	r1, #40	@ 0x28
 80131a2:	6820      	ldr	r0, [r4, #0]
 80131a4:	f00d fc58 	bl	8020a58 <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 80131a8:	6824      	ldr	r4, [r4, #0]
 80131aa:	4620      	mov	r0, r4
 80131ac:	f7fd f878 	bl	80102a0 <strlen>
 80131b0:	4601      	mov	r1, r0
 80131b2:	4620      	mov	r0, r4
 80131b4:	f000 fbe0 	bl	8013978 <set_device_conf_ip>
	for (size_t i = 0; i < sensor_count; i++) {
 80131b8:	2600      	movs	r6, #0
 80131ba:	e03b      	b.n	8013234 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xac>
	        int sensor_type = sensors[i].sensor_type;
 80131bc:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 80131c0:	f818 4036 	ldrb.w	r4, [r8, r6, lsl #3]
 80131c4:	791d      	ldrb	r5, [r3, #4]
 80131c6:	4f21      	ldr	r7, [pc, #132]	@ (801324c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc4>)
 80131c8:	462b      	mov	r3, r5
 80131ca:	4622      	mov	r2, r4
 80131cc:	2180      	movs	r1, #128	@ 0x80
 80131ce:	6838      	ldr	r0, [r7, #0]
 80131d0:	f000 fbf0 	bl	80139b4 <get_config_topik_string>
			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 80131d4:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8013258 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xd0>
 80131d8:	462b      	mov	r3, r5
 80131da:	4622      	mov	r2, r4
 80131dc:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80131e0:	f8db 0000 	ldr.w	r0, [fp]
 80131e4:	f000 fc96 	bl	8013b14 <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 80131e8:	4d19      	ldr	r5, [pc, #100]	@ (8013250 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc8>)
 80131ea:	ac02      	add	r4, sp, #8
 80131ec:	6839      	ldr	r1, [r7, #0]
 80131ee:	4620      	mov	r0, r4
 80131f0:	f00e fa12 	bl	8021618 <mg_str_s>
 80131f4:	f105 0318 	add.w	r3, r5, #24
 80131f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80131fc:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 8013200:	f8db 1000 	ldr.w	r1, [fp]
 8013204:	4620      	mov	r0, r4
 8013206:	f00e fa07 	bl	8021618 <mg_str_s>
 801320a:	f105 0320 	add.w	r3, r5, #32
 801320e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013212:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 8013216:	2401      	movs	r4, #1
 8013218:	f885 4028 	strb.w	r4, [r5, #40]	@ 0x28
			mqtt_opts.retain = 1;
 801321c:	f885 402e 	strb.w	r4, [r5, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8013220:	4629      	mov	r1, r5
 8013222:	4648      	mov	r0, r9
 8013224:	f011 fb96 	bl	8024954 <mg_mqtt_pub>
			logging(L_INFO, "Sending registration data to: %s", topik_buff);
 8013228:	683a      	ldr	r2, [r7, #0]
 801322a:	490a      	ldr	r1, [pc, #40]	@ (8013254 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xcc>)
 801322c:	4620      	mov	r0, r4
 801322e:	f7fe fd27 	bl	8011c80 <logging>
	for (size_t i = 0; i < sensor_count; i++) {
 8013232:	4426      	add	r6, r4
 8013234:	4556      	cmp	r6, sl
 8013236:	d3c1      	bcc.n	80131bc <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x34>
}
 8013238:	b005      	add	sp, #20
 801323a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801323e:	bf00      	nop
 8013240:	200009b4 	.word	0x200009b4
 8013244:	08023199 	.word	0x08023199
 8013248:	08033bdc 	.word	0x08033bdc
 801324c:	20000a08 	.word	0x20000a08
 8013250:	200009bc 	.word	0x200009bc
 8013254:	080340c0 	.word	0x080340c0
 8013258:	20000a04 	.word	0x20000a04

0801325c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:
static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 801325c:	b570      	push	{r4, r5, r6, lr}
 801325e:	b084      	sub	sp, #16
	int relay_number = 0;  // Переменная для хранения номера реле
 8013260:	2300      	movs	r3, #0
 8013262:	9301      	str	r3, [sp, #4]
    const char *topic = mess->topic.buf;
 8013264:	6805      	ldr	r5, [r0, #0]
    const char *message = mess->data.buf;
 8013266:	6886      	ldr	r6, [r0, #8]
    if(message == NULL || topic == NULL){
 8013268:	b326      	cbz	r6, 80132b4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x58>
 801326a:	4604      	mov	r4, r0
 801326c:	b315      	cbz	r5, 80132b4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x58>
    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 801326e:	4b71      	ldr	r3, [pc, #452]	@ (8013434 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	2200      	movs	r2, #0
 8013274:	2102      	movs	r1, #2
 8013276:	a803      	add	r0, sp, #12
 8013278:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 801327a:	9b03      	ldr	r3, [sp, #12]
 801327c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8013280:	0c1b      	lsrs	r3, r3, #16
 8013282:	f88d 300a 	strb.w	r3, [sp, #10]
    const char *switch_position = strstr(topic, "switch");
 8013286:	496c      	ldr	r1, [pc, #432]	@ (8013438 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1dc>)
 8013288:	4628      	mov	r0, r5
 801328a:	f016 fc79 	bl	8029b80 <strstr>
    if (switch_position != NULL) {
 801328e:	2800      	cmp	r0, #0
 8013290:	f000 80ba 	beq.w	8013408 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ac>
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 8013294:	aa01      	add	r2, sp, #4
 8013296:	4969      	ldr	r1, [pc, #420]	@ (801343c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e0>)
 8013298:	f016 f850 	bl	802933c <sscanf>
 801329c:	2801      	cmp	r0, #1
 801329e:	d018      	beq.n	80132d2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x76>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 80132a0:	4b67      	ldr	r3, [pc, #412]	@ (8013440 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	f300 80a5 	bgt.w	80133f4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x198>
			logging(L_ERR, "Error: relay number is not found, or incorrect format.");
 80132aa:	4966      	ldr	r1, [pc, #408]	@ (8013444 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e8>)
 80132ac:	2003      	movs	r0, #3
 80132ae:	f7fe fce7 	bl	8011c80 <logging>
 80132b2:	e0b2      	b.n	801341a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 80132b4:	4b62      	ldr	r3, [pc, #392]	@ (8013440 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	f340 80ae 	ble.w	801341a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
 80132be:	4b62      	ldr	r3, [pc, #392]	@ (8013448 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 80132c0:	2292      	movs	r2, #146	@ 0x92
 80132c2:	4962      	ldr	r1, [pc, #392]	@ (801344c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 80132c4:	2001      	movs	r0, #1
 80132c6:	f00f ffdf 	bl	8023288 <mg_log_prefix>
 80132ca:	4861      	ldr	r0, [pc, #388]	@ (8013450 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f4>)
 80132cc:	f00e f86e 	bl	80213ac <mg_log>
    	return;
 80132d0:	e0a3      	b.n	801341a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 80132d2:	4b5b      	ldr	r3, [pc, #364]	@ (8013440 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	2b01      	cmp	r3, #1
 80132d8:	dc18      	bgt.n	801330c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xb0>
    		logging(L_INFO, "Getting relay number %d, from topik %s.", relay_number, topic);
 80132da:	462b      	mov	r3, r5
 80132dc:	9a01      	ldr	r2, [sp, #4]
 80132de:	495d      	ldr	r1, [pc, #372]	@ (8013454 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f8>)
 80132e0:	2001      	movs	r0, #1
 80132e2:	f7fe fccd 	bl	8011c80 <logging>
    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 80132e6:	9d01      	ldr	r5, [sp, #4]
 80132e8:	1e6b      	subs	r3, r5, #1
 80132ea:	2b02      	cmp	r3, #2
 80132ec:	d81a      	bhi.n	8013324 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xc8>
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 80132ee:	68e4      	ldr	r4, [r4, #12]
 80132f0:	2c02      	cmp	r4, #2
 80132f2:	d02e      	beq.n	8013352 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xf6>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 80132f4:	2c03      	cmp	r4, #3
 80132f6:	d04f      	beq.n	8013398 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x13c>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 80132f8:	4b51      	ldr	r3, [pc, #324]	@ (8013440 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	dc6e      	bgt.n	80133de <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x182>
				logging(L_ERR, "Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message);
 8013300:	4632      	mov	r2, r6
 8013302:	4955      	ldr	r1, [pc, #340]	@ (8013458 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 8013304:	2003      	movs	r0, #3
 8013306:	f7fe fcbb 	bl	8011c80 <logging>
 801330a:	e086      	b.n	801341a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 801330c:	4b4e      	ldr	r3, [pc, #312]	@ (8013448 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 801330e:	229f      	movs	r2, #159	@ 0x9f
 8013310:	494e      	ldr	r1, [pc, #312]	@ (801344c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8013312:	2002      	movs	r0, #2
 8013314:	f00f ffb8 	bl	8023288 <mg_log_prefix>
 8013318:	462a      	mov	r2, r5
 801331a:	9901      	ldr	r1, [sp, #4]
 801331c:	484f      	ldr	r0, [pc, #316]	@ (801345c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x200>)
 801331e:	f00e f845 	bl	80213ac <mg_log>
 8013322:	e7da      	b.n	80132da <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x7e>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8013324:	4b46      	ldr	r3, [pc, #280]	@ (8013440 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	2b00      	cmp	r3, #0
 801332a:	dc06      	bgt.n	801333a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xde>
    			logging(L_ERR, "Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number);
 801332c:	9b01      	ldr	r3, [sp, #4]
 801332e:	2203      	movs	r2, #3
 8013330:	494b      	ldr	r1, [pc, #300]	@ (8013460 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x204>)
 8013332:	4610      	mov	r0, r2
 8013334:	f7fe fca4 	bl	8011c80 <logging>
    			return;
 8013338:	e06f      	b.n	801341a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 801333a:	4b43      	ldr	r3, [pc, #268]	@ (8013448 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 801333c:	22a4      	movs	r2, #164	@ 0xa4
 801333e:	4943      	ldr	r1, [pc, #268]	@ (801344c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8013340:	2001      	movs	r0, #1
 8013342:	f00f ffa1 	bl	8023288 <mg_log_prefix>
 8013346:	9a01      	ldr	r2, [sp, #4]
 8013348:	2103      	movs	r1, #3
 801334a:	4845      	ldr	r0, [pc, #276]	@ (8013460 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x204>)
 801334c:	f00e f82e 	bl	80213ac <mg_log>
 8013350:	e7ec      	b.n	801332c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xd0>
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 8013352:	2202      	movs	r2, #2
 8013354:	4943      	ldr	r1, [pc, #268]	@ (8013464 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x208>)
 8013356:	4630      	mov	r0, r6
 8013358:	f016 fbc7 	bl	8029aea <strncmp>
 801335c:	2800      	cmp	r0, #0
 801335e:	d1c9      	bne.n	80132f4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x98>
				sw_w[relay_number-1] = 1;
 8013360:	f105 030f 	add.w	r3, r5, #15
 8013364:	446b      	add	r3, sp
 8013366:	2201      	movs	r2, #1
 8013368:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 801336c:	4b34      	ldr	r3, [pc, #208]	@ (8013440 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	4293      	cmp	r3, r2
 8013372:	dc06      	bgt.n	8013382 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x126>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8013374:	4b2f      	ldr	r3, [pc, #188]	@ (8013434 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	2201      	movs	r2, #1
 801337a:	2102      	movs	r1, #2
 801337c:	a802      	add	r0, sp, #8
 801337e:	4798      	blx	r3
 8013380:	e04b      	b.n	801341a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
				MG_INFO(("Relay %d is ON.\n", relay_number));
 8013382:	4b31      	ldr	r3, [pc, #196]	@ (8013448 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8013384:	22ae      	movs	r2, #174	@ 0xae
 8013386:	4931      	ldr	r1, [pc, #196]	@ (801344c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8013388:	2002      	movs	r0, #2
 801338a:	f00f ff7d 	bl	8023288 <mg_log_prefix>
 801338e:	9901      	ldr	r1, [sp, #4]
 8013390:	4835      	ldr	r0, [pc, #212]	@ (8013468 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x20c>)
 8013392:	f00e f80b 	bl	80213ac <mg_log>
 8013396:	e7ed      	b.n	8013374 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x118>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 8013398:	2203      	movs	r2, #3
 801339a:	4934      	ldr	r1, [pc, #208]	@ (801346c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x210>)
 801339c:	4630      	mov	r0, r6
 801339e:	f016 fba4 	bl	8029aea <strncmp>
 80133a2:	2800      	cmp	r0, #0
 80133a4:	d1a8      	bne.n	80132f8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x9c>
				sw_w[relay_number-1] = 0;
 80133a6:	f105 030f 	add.w	r3, r5, #15
 80133aa:	446b      	add	r3, sp
 80133ac:	2200      	movs	r2, #0
 80133ae:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 80133b2:	4b23      	ldr	r3, [pc, #140]	@ (8013440 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	2b01      	cmp	r3, #1
 80133b8:	dc06      	bgt.n	80133c8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x16c>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 80133ba:	4b1e      	ldr	r3, [pc, #120]	@ (8013434 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	2201      	movs	r2, #1
 80133c0:	2102      	movs	r1, #2
 80133c2:	a802      	add	r0, sp, #8
 80133c4:	4798      	blx	r3
 80133c6:	e028      	b.n	801341a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 80133c8:	4b1f      	ldr	r3, [pc, #124]	@ (8013448 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 80133ca:	22b2      	movs	r2, #178	@ 0xb2
 80133cc:	491f      	ldr	r1, [pc, #124]	@ (801344c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 80133ce:	2002      	movs	r0, #2
 80133d0:	f00f ff5a 	bl	8023288 <mg_log_prefix>
 80133d4:	9901      	ldr	r1, [sp, #4]
 80133d6:	4826      	ldr	r0, [pc, #152]	@ (8013470 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x214>)
 80133d8:	f00d ffe8 	bl	80213ac <mg_log>
 80133dc:	e7ed      	b.n	80133ba <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x15e>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 80133de:	4b1a      	ldr	r3, [pc, #104]	@ (8013448 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 80133e0:	22b6      	movs	r2, #182	@ 0xb6
 80133e2:	491a      	ldr	r1, [pc, #104]	@ (801344c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 80133e4:	2001      	movs	r0, #1
 80133e6:	f00f ff4f 	bl	8023288 <mg_log_prefix>
 80133ea:	4631      	mov	r1, r6
 80133ec:	481a      	ldr	r0, [pc, #104]	@ (8013458 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 80133ee:	f00d ffdd 	bl	80213ac <mg_log>
 80133f2:	e785      	b.n	8013300 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xa4>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 80133f4:	4b14      	ldr	r3, [pc, #80]	@ (8013448 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 80133f6:	22bb      	movs	r2, #187	@ 0xbb
 80133f8:	4914      	ldr	r1, [pc, #80]	@ (801344c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 80133fa:	2001      	movs	r0, #1
 80133fc:	f00f ff44 	bl	8023288 <mg_log_prefix>
 8013400:	481c      	ldr	r0, [pc, #112]	@ (8013474 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>)
 8013402:	f00d ffd3 	bl	80213ac <mg_log>
 8013406:	e750      	b.n	80132aa <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x4e>
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 8013408:	4b0d      	ldr	r3, [pc, #52]	@ (8013440 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	2b00      	cmp	r3, #0
 801340e:	dc06      	bgt.n	801341e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1c2>
    	logging(L_ERR, "Substring \"switch\" is not fount in topik %s. \n", topic);
 8013410:	462a      	mov	r2, r5
 8013412:	4919      	ldr	r1, [pc, #100]	@ (8013478 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21c>)
 8013414:	2003      	movs	r0, #3
 8013416:	f7fe fc33 	bl	8011c80 <logging>
}
 801341a:	b004      	add	sp, #16
 801341c:	bd70      	pop	{r4, r5, r6, pc}
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 801341e:	4b0a      	ldr	r3, [pc, #40]	@ (8013448 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8013420:	22bf      	movs	r2, #191	@ 0xbf
 8013422:	490a      	ldr	r1, [pc, #40]	@ (801344c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8013424:	2001      	movs	r0, #1
 8013426:	f00f ff2f 	bl	8023288 <mg_log_prefix>
 801342a:	4629      	mov	r1, r5
 801342c:	4812      	ldr	r0, [pc, #72]	@ (8013478 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21c>)
 801342e:	f00d ffbd 	bl	80213ac <mg_log>
 8013432:	e7ed      	b.n	8013410 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1b4>
 8013434:	200009a0 	.word	0x200009a0
 8013438:	08034154 	.word	0x08034154
 801343c:	0803415c 	.word	0x0803415c
 8013440:	200000a8 	.word	0x200000a8
 8013444:	080342b0 	.word	0x080342b0
 8013448:	080340e4 	.word	0x080340e4
 801344c:	08034104 	.word	0x08034104
 8013450:	08034130 	.word	0x08034130
 8013454:	08034194 	.word	0x08034194
 8013458:	0803423c 	.word	0x0803423c
 801345c:	08034168 	.word	0x08034168
 8013460:	080341bc 	.word	0x080341bc
 8013464:	0803420c 	.word	0x0803420c
 8013468:	08034210 	.word	0x08034210
 801346c:	08034224 	.word	0x08034224
 8013470:	08034228 	.word	0x08034228
 8013474:	08034278 	.word	0x08034278
 8013478:	080342e8 	.word	0x080342e8

0801347c <_ZL9my_callocjj>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 801347c:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801347e:	fb01 f400 	mul.w	r4, r1, r0
 8013482:	4620      	mov	r0, r4
 8013484:	f005 fdf8 	bl	8019078 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8013488:	4605      	mov	r5, r0
 801348a:	b118      	cbz	r0, 8013494 <_ZL9my_callocjj+0x18>
 801348c:	4622      	mov	r2, r4
 801348e:	2100      	movs	r1, #0
 8013490:	f016 faf6 	bl	8029a80 <memset>
  return p;
}
 8013494:	4628      	mov	r0, r5
 8013496:	bd38      	pop	{r3, r4, r5, pc}

08013498 <_ZL19mqtt_send_io_statusP13mg_connectionb>:
static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 8013498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801349c:	b087      	sub	sp, #28
 801349e:	4607      	mov	r7, r0
 80134a0:	460c      	mov	r4, r1
	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 80134a2:	4d58      	ldr	r5, [pc, #352]	@ (8013604 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x16c>)
 80134a4:	682b      	ldr	r3, [r5, #0]
 80134a6:	2200      	movs	r2, #0
 80134a8:	2101      	movs	r1, #1
 80134aa:	a804      	add	r0, sp, #16
 80134ac:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 80134ae:	682b      	ldr	r3, [r5, #0]
 80134b0:	2200      	movs	r2, #0
 80134b2:	2102      	movs	r1, #2
 80134b4:	f10d 0013 	add.w	r0, sp, #19
 80134b8:	4798      	blx	r3
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 80134ba:	2203      	movs	r2, #3
 80134bc:	4952      	ldr	r1, [pc, #328]	@ (8013608 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 80134be:	a804      	add	r0, sp, #16
 80134c0:	f016 fa4a 	bl	8029958 <memcmp>
 80134c4:	b948      	cbnz	r0, 80134da <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 80134c6:	2203      	movs	r2, #3
 80134c8:	4950      	ldr	r1, [pc, #320]	@ (801360c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x174>)
 80134ca:	f10d 0013 	add.w	r0, sp, #19
 80134ce:	f016 fa43 	bl	8029958 <memcmp>
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 80134d2:	b910      	cbnz	r0, 80134da <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 80134d4:	2c00      	cmp	r4, #0
 80134d6:	f000 8091 	beq.w	80135fc <_ZL19mqtt_send_io_statusP13mg_connectionb+0x164>
		memcpy(&prev_status, &status, sizeof(status));
 80134da:	4b4b      	ldr	r3, [pc, #300]	@ (8013608 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 80134dc:	aa06      	add	r2, sp, #24
 80134de:	e912 0003 	ldmdb	r2, {r0, r1}
 80134e2:	6018      	str	r0, [r3, #0]
 80134e4:	8099      	strh	r1, [r3, #4]
		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 80134e6:	2101      	movs	r1, #1
 80134e8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80134ec:	f7ff ffc6 	bl	801347c <_ZL9my_callocjj>
 80134f0:	4606      	mov	r6, r0
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 80134f2:	2101      	movs	r1, #1
 80134f4:	2080      	movs	r0, #128	@ 0x80
 80134f6:	f7ff ffc1 	bl	801347c <_ZL9my_callocjj>
 80134fa:	4605      	mov	r5, r0
		for (i = 0; i < INPUTS_COUNT; i++){
 80134fc:	2200      	movs	r2, #0
 80134fe:	e038      	b.n	8013572 <_ZL19mqtt_send_io_statusP13mg_connectionb+0xda>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 8013500:	f102 0801 	add.w	r8, r2, #1
 8013504:	fa5f f888 	uxtb.w	r8, r8
 8013508:	f102 0318 	add.w	r3, r2, #24
 801350c:	eb0d 0203 	add.w	r2, sp, r3
 8013510:	f812 3c08 	ldrb.w	r3, [r2, #-8]
 8013514:	9300      	str	r3, [sp, #0]
 8013516:	4643      	mov	r3, r8
 8013518:	2201      	movs	r2, #1
 801351a:	f44f 7116 	mov.w	r1, #600	@ 0x258
 801351e:	4630      	mov	r0, r6
 8013520:	f000 fcec 	bl	8013efc <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 8013524:	4643      	mov	r3, r8
 8013526:	2201      	movs	r2, #1
 8013528:	2180      	movs	r1, #128	@ 0x80
 801352a:	4628      	mov	r0, r5
 801352c:	f000 fd26 	bl	8013f7c <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8013530:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8013610 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 8013534:	ac02      	add	r4, sp, #8
 8013536:	4629      	mov	r1, r5
 8013538:	4620      	mov	r0, r4
 801353a:	f00e f86d 	bl	8021618 <mg_str_s>
 801353e:	f109 0318 	add.w	r3, r9, #24
 8013542:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013546:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 801354a:	4631      	mov	r1, r6
 801354c:	4620      	mov	r0, r4
 801354e:	f00e f863 	bl	8021618 <mg_str_s>
 8013552:	f109 0320 	add.w	r3, r9, #32
 8013556:	e894 0003 	ldmia.w	r4, {r0, r1}
 801355a:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 801355e:	2300      	movs	r3, #0
 8013560:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8013564:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8013568:	4649      	mov	r1, r9
 801356a:	4638      	mov	r0, r7
 801356c:	f011 f9f2 	bl	8024954 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 8013570:	4642      	mov	r2, r8
 8013572:	2a02      	cmp	r2, #2
 8013574:	d9c4      	bls.n	8013500 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x68>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8013576:	2200      	movs	r2, #0
 8013578:	e038      	b.n	80135ec <_ZL19mqtt_send_io_statusP13mg_connectionb+0x154>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 801357a:	f102 0801 	add.w	r8, r2, #1
 801357e:	fa5f f888 	uxtb.w	r8, r8
 8013582:	f102 0318 	add.w	r3, r2, #24
 8013586:	eb0d 0203 	add.w	r2, sp, r3
 801358a:	f812 3c05 	ldrb.w	r3, [r2, #-5]
 801358e:	9300      	str	r3, [sp, #0]
 8013590:	4643      	mov	r3, r8
 8013592:	2202      	movs	r2, #2
 8013594:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8013598:	4630      	mov	r0, r6
 801359a:	f000 fcaf 	bl	8013efc <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 801359e:	4643      	mov	r3, r8
 80135a0:	2202      	movs	r2, #2
 80135a2:	2180      	movs	r1, #128	@ 0x80
 80135a4:	4628      	mov	r0, r5
 80135a6:	f000 fce9 	bl	8013f7c <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 80135aa:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8013610 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 80135ae:	ac02      	add	r4, sp, #8
 80135b0:	4629      	mov	r1, r5
 80135b2:	4620      	mov	r0, r4
 80135b4:	f00e f830 	bl	8021618 <mg_str_s>
 80135b8:	f109 0318 	add.w	r3, r9, #24
 80135bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80135c0:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 80135c4:	4631      	mov	r1, r6
 80135c6:	4620      	mov	r0, r4
 80135c8:	f00e f826 	bl	8021618 <mg_str_s>
 80135cc:	f109 0320 	add.w	r3, r9, #32
 80135d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80135d4:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 80135d8:	2300      	movs	r3, #0
 80135da:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 80135de:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 80135e2:	4649      	mov	r1, r9
 80135e4:	4638      	mov	r0, r7
 80135e6:	f011 f9b5 	bl	8024954 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 80135ea:	4642      	mov	r2, r8
 80135ec:	2a02      	cmp	r2, #2
 80135ee:	d9c4      	bls.n	801357a <_ZL19mqtt_send_io_statusP13mg_connectionb+0xe2>
		free(payload);
 80135f0:	4630      	mov	r0, r6
 80135f2:	f005 fdc3 	bl	801917c <vPortFree>
		free(topik);
 80135f6:	4628      	mov	r0, r5
 80135f8:	f005 fdc0 	bl	801917c <vPortFree>
}
 80135fc:	b007      	add	sp, #28
 80135fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013602:	bf00      	nop
 8013604:	200009a0 	.word	0x200009a0
 8013608:	20000998 	.word	0x20000998
 801360c:	2000099b 	.word	0x2000099b
 8013610:	200009bc 	.word	0x200009bc

08013614 <_ZL33mqtt_timer_handler_cher_io_statusPv>:

static void mqtt_timer_handler_cher_io_status(void *arg){
 8013614:	b508      	push	{r3, lr}
	if(mqtt_conn && is_registered){
 8013616:	4b05      	ldr	r3, [pc, #20]	@ (801362c <_ZL33mqtt_timer_handler_cher_io_statusPv+0x18>)
 8013618:	6818      	ldr	r0, [r3, #0]
 801361a:	b110      	cbz	r0, 8013622 <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 801361c:	4b04      	ldr	r3, [pc, #16]	@ (8013630 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x1c>)
 801361e:	781b      	ldrb	r3, [r3, #0]
 8013620:	b903      	cbnz	r3, 8013624 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x10>
		mqtt_send_io_status(mqtt_conn, 0);
	}
}
 8013622:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 0);
 8013624:	2100      	movs	r1, #0
 8013626:	f7ff ff37 	bl	8013498 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 801362a:	e7fa      	b.n	8013622 <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 801362c:	200009b8 	.word	0x200009b8
 8013630:	200009a4 	.word	0x200009a4

08013634 <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:
static void mqtt_pereodic_status_send_timer_handler(void *arg){
 8013634:	b508      	push	{r3, lr}
	if(is_registered){
 8013636:	4b05      	ldr	r3, [pc, #20]	@ (801364c <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x18>)
 8013638:	781b      	ldrb	r3, [r3, #0]
 801363a:	b903      	cbnz	r3, 801363e <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0xa>
}
 801363c:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 1);
 801363e:	2101      	movs	r1, #1
 8013640:	4b03      	ldr	r3, [pc, #12]	@ (8013650 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>)
 8013642:	6818      	ldr	r0, [r3, #0]
 8013644:	f7ff ff28 	bl	8013498 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8013648:	e7f8      	b.n	801363c <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x8>
 801364a:	bf00      	nop
 801364c:	200009a4 	.word	0x200009a4
 8013650:	200009b8 	.word	0x200009b8

08013654 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:
static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 8013654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013658:	b083      	sub	sp, #12
 801365a:	4681      	mov	r9, r0
 801365c:	460d      	mov	r5, r1
 801365e:	4616      	mov	r6, r2
	for (size_t i = 0; i < sensor_count; i++) {
 8013660:	2400      	movs	r4, #0
 8013662:	e000      	b.n	8013666 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x12>
 8013664:	3401      	adds	r4, #1
 8013666:	42b4      	cmp	r4, r6
 8013668:	d22e      	bcs.n	80136c8 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x74>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 801366a:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
 801366e:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8013672:	2b02      	cmp	r3, #2
 8013674:	d1f6      	bne.n	8013664 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8013676:	2101      	movs	r1, #1
 8013678:	2080      	movs	r0, #128	@ 0x80
 801367a:	f7ff feff 	bl	801347c <_ZL9my_callocjj>
 801367e:	4607      	mov	r7, r0
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 8013680:	f898 3004 	ldrb.w	r3, [r8, #4]
 8013684:	2202      	movs	r2, #2
 8013686:	2180      	movs	r1, #128	@ 0x80
 8013688:	f000 fc60 	bl	8013f4c <generate_comand_topik_for_subscrabe>
			mqtt_opts.qos = 1;
 801368c:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 80136d4 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x80>
 8013690:	f04f 0b01 	mov.w	fp, #1
 8013694:	f888 b028 	strb.w	fp, [r8, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 8013698:	46ea      	mov	sl, sp
 801369a:	4639      	mov	r1, r7
 801369c:	4650      	mov	r0, sl
 801369e:	f00d ffbb 	bl	8021618 <mg_str_s>
 80136a2:	f108 0318 	add.w	r3, r8, #24
 80136a6:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80136aa:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 80136ae:	4641      	mov	r1, r8
 80136b0:	4648      	mov	r0, r9
 80136b2:	f011 f901 	bl	80248b8 <mg_mqtt_sub>
			logging(L_INFO, "Subscribe on MQTT topik: %s", topik);
 80136b6:	463a      	mov	r2, r7
 80136b8:	4905      	ldr	r1, [pc, #20]	@ (80136d0 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7c>)
 80136ba:	4658      	mov	r0, fp
 80136bc:	f7fe fae0 	bl	8011c80 <logging>
			free(topik);
 80136c0:	4638      	mov	r0, r7
 80136c2:	f005 fd5b 	bl	801917c <vPortFree>
 80136c6:	e7cd      	b.n	8013664 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
}
 80136c8:	b003      	add	sp, #12
 80136ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ce:	bf00      	nop
 80136d0:	08034318 	.word	0x08034318
 80136d4:	200009bc 	.word	0x200009bc

080136d8 <_ZL18mqtt_event_handlerP13mg_connectioniPv>:
static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 80136d8:	b570      	push	{r4, r5, r6, lr}
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 80136da:	2910      	cmp	r1, #16
 80136dc:	d031      	beq.n	8013742 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x6a>
 80136de:	4605      	mov	r5, r0
 80136e0:	2911      	cmp	r1, #17
 80136e2:	d002      	beq.n	80136ea <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x12>
 80136e4:	2909      	cmp	r1, #9
 80136e6:	d03a      	beq.n	801375e <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x86>
}
 80136e8:	bd70      	pop	{r4, r5, r6, pc}
		MG_DEBUG(("MQTT_open_connection"));
 80136ea:	4b22      	ldr	r3, [pc, #136]	@ (8013774 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9c>)
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	2b02      	cmp	r3, #2
 80136f0:	dc1d      	bgt.n	801372e <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x56>
		logging(L_INFO, "MQTT Open connection");
 80136f2:	4921      	ldr	r1, [pc, #132]	@ (8013778 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa0>)
 80136f4:	2001      	movs	r0, #1
 80136f6:	f7fe fac3 	bl	8011c80 <logging>
		mqtt_conn = conn;
 80136fa:	4b20      	ldr	r3, [pc, #128]	@ (801377c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 80136fc:	601d      	str	r5, [r3, #0]
		if(!is_registered){
 80136fe:	4b20      	ldr	r3, [pc, #128]	@ (8013780 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8013700:	781b      	ldrb	r3, [r3, #0]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d1f0      	bne.n	80136e8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8013706:	4e1f      	ldr	r6, [pc, #124]	@ (8013784 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xac>)
 8013708:	2206      	movs	r2, #6
 801370a:	4631      	mov	r1, r6
 801370c:	4628      	mov	r0, r5
 801370e:	f7ff fd3b 	bl	8013188 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 8013712:	4c1a      	ldr	r4, [pc, #104]	@ (801377c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8013714:	2101      	movs	r1, #1
 8013716:	6820      	ldr	r0, [r4, #0]
 8013718:	f7ff febe 	bl	8013498 <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 801371c:	2206      	movs	r2, #6
 801371e:	4631      	mov	r1, r6
 8013720:	6820      	ldr	r0, [r4, #0]
 8013722:	f7ff ff97 	bl	8013654 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 8013726:	4b16      	ldr	r3, [pc, #88]	@ (8013780 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8013728:	2201      	movs	r2, #1
 801372a:	701a      	strb	r2, [r3, #0]
 801372c:	e7dc      	b.n	80136e8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		MG_DEBUG(("MQTT_open_connection"));
 801372e:	4b16      	ldr	r3, [pc, #88]	@ (8013788 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb0>)
 8013730:	22cd      	movs	r2, #205	@ 0xcd
 8013732:	4916      	ldr	r1, [pc, #88]	@ (801378c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb4>)
 8013734:	2003      	movs	r0, #3
 8013736:	f00f fda7 	bl	8023288 <mg_log_prefix>
 801373a:	4815      	ldr	r0, [pc, #84]	@ (8013790 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb8>)
 801373c:	f00d fe36 	bl	80213ac <mg_log>
 8013740:	e7d7      	b.n	80136f2 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x1a>
 8013742:	4614      	mov	r4, r2
		logging(L_INFO, "Receive message from MQTT server");
 8013744:	4913      	ldr	r1, [pc, #76]	@ (8013794 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbc>)
 8013746:	2001      	movs	r0, #1
 8013748:	f7fe fa9a 	bl	8011c80 <logging>
		 mqtt_subscrabe_recv_cmd_parce(mm);
 801374c:	4620      	mov	r0, r4
 801374e:	f7ff fd85 	bl	801325c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 8013752:	2100      	movs	r1, #0
 8013754:	4b09      	ldr	r3, [pc, #36]	@ (801377c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8013756:	6818      	ldr	r0, [r3, #0]
 8013758:	f7ff fe9e 	bl	8013498 <_ZL19mqtt_send_io_statusP13mg_connectionb>
 801375c:	e7c4      	b.n	80136e8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		logging(L_INFO, "MQTT Close connection");
 801375e:	490e      	ldr	r1, [pc, #56]	@ (8013798 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc0>)
 8013760:	2001      	movs	r0, #1
 8013762:	f7fe fa8d 	bl	8011c80 <logging>
		mqtt_conn     = NULL;
 8013766:	2300      	movs	r3, #0
 8013768:	4a04      	ldr	r2, [pc, #16]	@ (801377c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 801376a:	6013      	str	r3, [r2, #0]
		is_registered = false;
 801376c:	4a04      	ldr	r2, [pc, #16]	@ (8013780 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 801376e:	7013      	strb	r3, [r2, #0]
}
 8013770:	e7ba      	b.n	80136e8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
 8013772:	bf00      	nop
 8013774:	200000a8 	.word	0x200000a8
 8013778:	08034360 	.word	0x08034360
 801377c:	200009b8 	.word	0x200009b8
 8013780:	200009a4 	.word	0x200009a4
 8013784:	20000044 	.word	0x20000044
 8013788:	08034334 	.word	0x08034334
 801378c:	08034104 	.word	0x08034104
 8013790:	08034348 	.word	0x08034348
 8013794:	08034378 	.word	0x08034378
 8013798:	0803439c 	.word	0x0803439c

0801379c <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
    return mqtt_conn;
}
 801379c:	4b01      	ldr	r3, [pc, #4]	@ (80137a4 <get_mqtt_connection+0x8>)
 801379e:	6818      	ldr	r0, [r3, #0]
 80137a0:	4770      	bx	lr
 80137a2:	bf00      	nop
 80137a4:	200009b8 	.word	0x200009b8

080137a8 <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 80137a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137ac:	b086      	sub	sp, #24
 80137ae:	4606      	mov	r6, r0
 80137b0:	460c      	mov	r4, r1
 80137b2:	4691      	mov	r9, r2
 80137b4:	461d      	mov	r5, r3

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 80137b6:	2101      	movs	r1, #1
 80137b8:	2080      	movs	r0, #128	@ 0x80
 80137ba:	f7ff fe5f 	bl	801347c <_ZL9my_callocjj>
 80137be:	f8df a148 	ldr.w	sl, [pc, #328]	@ 8013908 <mqtt_init+0x160>
 80137c2:	f8ca 0000 	str.w	r0, [sl]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 80137c6:	2101      	movs	r1, #1
 80137c8:	2021      	movs	r0, #33	@ 0x21
 80137ca:	f7ff fe57 	bl	801347c <_ZL9my_callocjj>
 80137ce:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 801390c <mqtt_init+0x164>
 80137d2:	f8c8 0000 	str.w	r0, [r8]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 80137d6:	2101      	movs	r1, #1
 80137d8:	2021      	movs	r0, #33	@ 0x21
 80137da:	f7ff fe4f 	bl	801347c <_ZL9my_callocjj>
 80137de:	4f3b      	ldr	r7, [pc, #236]	@ (80138cc <mqtt_init+0x124>)
 80137e0:	6038      	str	r0, [r7, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 80137e2:	2101      	movs	r1, #1
 80137e4:	2080      	movs	r0, #128	@ 0x80
 80137e6:	f7ff fe49 	bl	801347c <_ZL9my_callocjj>
 80137ea:	4b39      	ldr	r3, [pc, #228]	@ (80138d0 <mqtt_init+0x128>)
 80137ec:	6018      	str	r0, [r3, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 80137ee:	2101      	movs	r1, #1
 80137f0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80137f4:	f7ff fe42 	bl	801347c <_ZL9my_callocjj>
 80137f8:	4b36      	ldr	r3, [pc, #216]	@ (80138d4 <mqtt_init+0x12c>)
 80137fa:	6018      	str	r0, [r3, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 80137fc:	2101      	movs	r1, #1
 80137fe:	2028      	movs	r0, #40	@ 0x28
 8013800:	f7ff fe3c 	bl	801347c <_ZL9my_callocjj>
 8013804:	4b34      	ldr	r3, [pc, #208]	@ (80138d8 <mqtt_init+0x130>)
 8013806:	6018      	str	r0, [r3, #0]
	r_w_parameter   = fn;
 8013808:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801380a:	4b34      	ldr	r3, [pc, #208]	@ (80138dc <mqtt_init+0x134>)
 801380c:	601a      	str	r2, [r3, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 801380e:	f8da a000 	ldr.w	sl, [sl]
 8013812:	4649      	mov	r1, r9
 8013814:	4650      	mov	r0, sl
 8013816:	f017 fb3d 	bl	802ae94 <strcpy>
	strcpy(mqtt_username,   (char *)username);
 801381a:	f8d8 9000 	ldr.w	r9, [r8]
 801381e:	4629      	mov	r1, r5
 8013820:	4648      	mov	r0, r9
 8013822:	f017 fb37 	bl	802ae94 <strcpy>
	strcpy(mqtt_password,   (char *)password);
 8013826:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013828:	6838      	ldr	r0, [r7, #0]
 801382a:	f017 fb33 	bl	802ae94 <strcpy>

	logging(L_INFO, "Start MQTT task, server: %s, username: %s", mqtt_broker_url, mqtt_username);
 801382e:	464b      	mov	r3, r9
 8013830:	4652      	mov	r2, sl
 8013832:	492b      	ldr	r1, [pc, #172]	@ (80138e0 <mqtt_init+0x138>)
 8013834:	2001      	movs	r0, #1
 8013836:	f7fe fa23 	bl	8011c80 <logging>

	mgr = (struct mg_mgr *)     mgr_parameter;
 801383a:	4d2a      	ldr	r5, [pc, #168]	@ (80138e4 <mqtt_init+0x13c>)
 801383c:	602e      	str	r6, [r5, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 801383e:	4b2a      	ldr	r3, [pc, #168]	@ (80138e8 <mqtt_init+0x140>)
 8013840:	601c      	str	r4, [r3, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 8013842:	2106      	movs	r1, #6
 8013844:	4620      	mov	r0, r4
 8013846:	f000 f871 	bl	801392c <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 801384a:	4e28      	ldr	r6, [pc, #160]	@ (80138ec <mqtt_init+0x144>)
 801384c:	ac04      	add	r4, sp, #16
 801384e:	f8d8 1000 	ldr.w	r1, [r8]
 8013852:	4620      	mov	r0, r4
 8013854:	f00d fee0 	bl	8021618 <mg_str_s>
 8013858:	e894 0003 	ldmia.w	r4, {r0, r1}
 801385c:	e886 0003 	stmia.w	r6, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 8013860:	6839      	ldr	r1, [r7, #0]
 8013862:	4620      	mov	r0, r4
 8013864:	f00d fed8 	bl	8021618 <mg_str_s>
 8013868:	f106 0308 	add.w	r3, r6, #8
 801386c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013870:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= 60;
 8013874:	233c      	movs	r3, #60	@ 0x3c
 8013876:	8573      	strh	r3, [r6, #42]	@ 0x2a

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, mqtt_timer_handler,                      NULL); // Timer for following connection and reconnect every 10 seconds if needed
 8013878:	2400      	movs	r4, #0
 801387a:	9402      	str	r4, [sp, #8]
 801387c:	4b1c      	ldr	r3, [pc, #112]	@ (80138f0 <mqtt_init+0x148>)
 801387e:	9301      	str	r3, [sp, #4]
 8013880:	2303      	movs	r3, #3
 8013882:	9300      	str	r3, [sp, #0]
 8013884:	f242 7210 	movw	r2, #10000	@ 0x2710
 8013888:	2300      	movs	r3, #0
 801388a:	6828      	ldr	r0, [r5, #0]
 801388c:	f00e ffa6 	bl	80227dc <mg_timer_add>
 8013890:	4b18      	ldr	r3, [pc, #96]	@ (80138f4 <mqtt_init+0x14c>)
 8013892:	6018      	str	r0, [r3, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 15000 /* 15 seconds */, MG_TIMER_REPEAT,                mqtt_pereodic_status_send_timer_handler, NULL); // Timer for send io statuses every ~150 seconds
 8013894:	9402      	str	r4, [sp, #8]
 8013896:	4b18      	ldr	r3, [pc, #96]	@ (80138f8 <mqtt_init+0x150>)
 8013898:	9301      	str	r3, [sp, #4]
 801389a:	2601      	movs	r6, #1
 801389c:	9600      	str	r6, [sp, #0]
 801389e:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80138a2:	2300      	movs	r3, #0
 80138a4:	6828      	ldr	r0, [r5, #0]
 80138a6:	f00e ff99 	bl	80227dc <mg_timer_add>
 80138aa:	4b14      	ldr	r3, [pc, #80]	@ (80138fc <mqtt_init+0x154>)
 80138ac:	6018      	str	r0, [r3, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */, MG_TIMER_REPEAT,                    mqtt_timer_handler_cher_io_status,       NULL); // timer for follow io status every 0.5 seconds
 80138ae:	9402      	str	r4, [sp, #8]
 80138b0:	4b13      	ldr	r3, [pc, #76]	@ (8013900 <mqtt_init+0x158>)
 80138b2:	9301      	str	r3, [sp, #4]
 80138b4:	9600      	str	r6, [sp, #0]
 80138b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80138ba:	2300      	movs	r3, #0
 80138bc:	6828      	ldr	r0, [r5, #0]
 80138be:	f00e ff8d 	bl	80227dc <mg_timer_add>
 80138c2:	4b10      	ldr	r3, [pc, #64]	@ (8013904 <mqtt_init+0x15c>)
 80138c4:	6018      	str	r0, [r3, #0]

}
 80138c6:	b006      	add	sp, #24
 80138c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138cc:	20000a0c 	.word	0x20000a0c
 80138d0:	20000a08 	.word	0x20000a08
 80138d4:	20000a04 	.word	0x20000a04
 80138d8:	200009b4 	.word	0x200009b4
 80138dc:	200009a0 	.word	0x200009a0
 80138e0:	080343b4 	.word	0x080343b4
 80138e4:	20000a00 	.word	0x20000a00
 80138e8:	200009fc 	.word	0x200009fc
 80138ec:	200009bc 	.word	0x200009bc
 80138f0:	080130fd 	.word	0x080130fd
 80138f4:	200009b0 	.word	0x200009b0
 80138f8:	08013635 	.word	0x08013635
 80138fc:	200009ac 	.word	0x200009ac
 8013900:	08013615 	.word	0x08013615
 8013904:	200009a8 	.word	0x200009a8
 8013908:	20000a14 	.word	0x20000a14
 801390c:	20000a10 	.word	0x20000a10

08013910 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8013910:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8013912:	fb01 f400 	mul.w	r4, r1, r0
 8013916:	4620      	mov	r0, r4
 8013918:	f005 fbae 	bl	8019078 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801391c:	4605      	mov	r5, r0
 801391e:	b118      	cbz	r0, 8013928 <_ZL9my_callocjj+0x18>
 8013920:	4622      	mov	r2, r4
 8013922:	2100      	movs	r1, #0
 8013924:	f016 f8ac 	bl	8029a80 <memset>
}
 8013928:	4628      	mov	r0, r5
 801392a:	bd38      	pop	{r3, r4, r5, pc}

0801392c <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 801392c:	b570      	push	{r4, r5, r6, lr}
 801392e:	4606      	mov	r6, r0
 8013930:	460d      	mov	r5, r1

	if ( unical_id){
 8013932:	4b0f      	ldr	r3, [pc, #60]	@ (8013970 <set_device_id+0x44>)
 8013934:	6818      	ldr	r0, [r3, #0]
 8013936:	b108      	cbz	r0, 801393c <set_device_id+0x10>
		free(unical_id);
 8013938:	f005 fc20 	bl	801917c <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 801393c:	0068      	lsls	r0, r5, #1
 801393e:	2101      	movs	r1, #1
 8013940:	4408      	add	r0, r1
 8013942:	f7ff ffe5 	bl	8013910 <_ZL9my_callocjj>
 8013946:	4b0a      	ldr	r3, [pc, #40]	@ (8013970 <set_device_id+0x44>)
 8013948:	6018      	str	r0, [r3, #0]


	if (unical_id){
 801394a:	b108      	cbz	r0, 8013950 <set_device_id+0x24>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 801394c:	2400      	movs	r4, #0
 801394e:	e00b      	b.n	8013968 <set_device_id+0x3c>
            // Конвертируем каждый байт в два символа и добавляем в строку
            sprintf(&unical_id[i * 2], "%02X", id[i]);
        }
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 8013950:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013954:	e00b      	b.n	801396e <set_device_id+0x42>
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 8013956:	4b06      	ldr	r3, [pc, #24]	@ (8013970 <set_device_id+0x44>)
 8013958:	6818      	ldr	r0, [r3, #0]
 801395a:	5d32      	ldrb	r2, [r6, r4]
 801395c:	4905      	ldr	r1, [pc, #20]	@ (8013974 <set_device_id+0x48>)
 801395e:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8013962:	f015 fccb 	bl	80292fc <sprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 8013966:	3401      	adds	r4, #1
 8013968:	42ac      	cmp	r4, r5
 801396a:	d3f4      	bcc.n	8013956 <set_device_id+0x2a>
	}

	return NO_ERR; // Успешно
 801396c:	2000      	movs	r0, #0
}
 801396e:	bd70      	pop	{r4, r5, r6, pc}
 8013970:	20000a1c 	.word	0x20000a1c
 8013974:	080343e0 	.word	0x080343e0

08013978 <set_device_conf_ip>:

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 8013978:	b538      	push	{r3, r4, r5, lr}
 801397a:	4605      	mov	r5, r0
 801397c:	460c      	mov	r4, r1

	if(dev_conf_ip){
 801397e:	4b0c      	ldr	r3, [pc, #48]	@ (80139b0 <set_device_conf_ip+0x38>)
 8013980:	6818      	ldr	r0, [r3, #0]
 8013982:	b108      	cbz	r0, 8013988 <set_device_conf_ip+0x10>
		free(dev_conf_ip);
 8013984:	f005 fbfa 	bl	801917c <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len+1, sizeof(char)); // +1 для нулевого символа
 8013988:	2101      	movs	r1, #1
 801398a:	1860      	adds	r0, r4, r1
 801398c:	f7ff ffc0 	bl	8013910 <_ZL9my_callocjj>
 8013990:	4b07      	ldr	r3, [pc, #28]	@ (80139b0 <set_device_conf_ip+0x38>)
 8013992:	6018      	str	r0, [r3, #0]

	if(dev_conf_ip){
 8013994:	b140      	cbz	r0, 80139a8 <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 8013996:	4622      	mov	r2, r4
 8013998:	4629      	mov	r1, r5
 801399a:	f016 f8b8 	bl	8029b0e <strncpy>
		dev_conf_ip[ip_len] = '\0'; // Явно добавляем нулевой символ
 801399e:	4b04      	ldr	r3, [pc, #16]	@ (80139b0 <set_device_conf_ip+0x38>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	2000      	movs	r0, #0
 80139a4:	5518      	strb	r0, [r3, r4]
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
}
 80139a6:	bd38      	pop	{r3, r4, r5, pc}
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 80139a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80139ac:	e7fb      	b.n	80139a6 <set_device_conf_ip+0x2e>
 80139ae:	bf00      	nop
 80139b0:	20000a18 	.word	0x20000a18

080139b4 <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 80139b4:	b500      	push	{lr}
 80139b6:	b087      	sub	sp, #28

	strcpy(buff, "");
 80139b8:	f04f 0c00 	mov.w	ip, #0
 80139bc:	f880 c000 	strb.w	ip, [r0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 80139c0:	3a01      	subs	r2, #1
 80139c2:	2a07      	cmp	r2, #7
 80139c4:	f200 8087 	bhi.w	8013ad6 <get_config_topik_string+0x122>
 80139c8:	e8df f002 	tbb	[pc, r2]
 80139cc:	45251604 	.word	0x45251604
 80139d0:	55756535 	.word	0x55756535
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 80139d4:	9304      	str	r3, [sp, #16]
 80139d6:	4b41      	ldr	r3, [pc, #260]	@ (8013adc <get_config_topik_string+0x128>)
 80139d8:	9303      	str	r3, [sp, #12]
 80139da:	4b41      	ldr	r3, [pc, #260]	@ (8013ae0 <get_config_topik_string+0x12c>)
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	9302      	str	r3, [sp, #8]
 80139e0:	4b40      	ldr	r3, [pc, #256]	@ (8013ae4 <get_config_topik_string+0x130>)
 80139e2:	9301      	str	r3, [sp, #4]
 80139e4:	4b40      	ldr	r3, [pc, #256]	@ (8013ae8 <get_config_topik_string+0x134>)
 80139e6:	9300      	str	r3, [sp, #0]
 80139e8:	4b40      	ldr	r3, [pc, #256]	@ (8013aec <get_config_topik_string+0x138>)
 80139ea:	4a41      	ldr	r2, [pc, #260]	@ (8013af0 <get_config_topik_string+0x13c>)
 80139ec:	f015 fb1e 	bl	802902c <snprintf>
			return -1;
			break;
	}


	return 0;
 80139f0:	2000      	movs	r0, #0
}
 80139f2:	b007      	add	sp, #28
 80139f4:	f85d fb04 	ldr.w	pc, [sp], #4
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 80139f8:	9304      	str	r3, [sp, #16]
 80139fa:	4b3e      	ldr	r3, [pc, #248]	@ (8013af4 <get_config_topik_string+0x140>)
 80139fc:	9303      	str	r3, [sp, #12]
 80139fe:	4a38      	ldr	r2, [pc, #224]	@ (8013ae0 <get_config_topik_string+0x12c>)
 8013a00:	6812      	ldr	r2, [r2, #0]
 8013a02:	9202      	str	r2, [sp, #8]
 8013a04:	4a37      	ldr	r2, [pc, #220]	@ (8013ae4 <get_config_topik_string+0x130>)
 8013a06:	9201      	str	r2, [sp, #4]
 8013a08:	9300      	str	r3, [sp, #0]
 8013a0a:	4b38      	ldr	r3, [pc, #224]	@ (8013aec <get_config_topik_string+0x138>)
 8013a0c:	4a38      	ldr	r2, [pc, #224]	@ (8013af0 <get_config_topik_string+0x13c>)
 8013a0e:	f015 fb0d 	bl	802902c <snprintf>
	return 0;
 8013a12:	2000      	movs	r0, #0
			break;
 8013a14:	e7ed      	b.n	80139f2 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 8013a16:	9304      	str	r3, [sp, #16]
 8013a18:	4b37      	ldr	r3, [pc, #220]	@ (8013af8 <get_config_topik_string+0x144>)
 8013a1a:	9303      	str	r3, [sp, #12]
 8013a1c:	4b30      	ldr	r3, [pc, #192]	@ (8013ae0 <get_config_topik_string+0x12c>)
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	9302      	str	r3, [sp, #8]
 8013a22:	4b30      	ldr	r3, [pc, #192]	@ (8013ae4 <get_config_topik_string+0x130>)
 8013a24:	9301      	str	r3, [sp, #4]
 8013a26:	4b35      	ldr	r3, [pc, #212]	@ (8013afc <get_config_topik_string+0x148>)
 8013a28:	9300      	str	r3, [sp, #0]
 8013a2a:	4b30      	ldr	r3, [pc, #192]	@ (8013aec <get_config_topik_string+0x138>)
 8013a2c:	4a30      	ldr	r2, [pc, #192]	@ (8013af0 <get_config_topik_string+0x13c>)
 8013a2e:	f015 fafd 	bl	802902c <snprintf>
	return 0;
 8013a32:	2000      	movs	r0, #0
			break;
 8013a34:	e7dd      	b.n	80139f2 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 8013a36:	9304      	str	r3, [sp, #16]
 8013a38:	4b31      	ldr	r3, [pc, #196]	@ (8013b00 <get_config_topik_string+0x14c>)
 8013a3a:	9303      	str	r3, [sp, #12]
 8013a3c:	4b28      	ldr	r3, [pc, #160]	@ (8013ae0 <get_config_topik_string+0x12c>)
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	9302      	str	r3, [sp, #8]
 8013a42:	4b28      	ldr	r3, [pc, #160]	@ (8013ae4 <get_config_topik_string+0x130>)
 8013a44:	9301      	str	r3, [sp, #4]
 8013a46:	4b2d      	ldr	r3, [pc, #180]	@ (8013afc <get_config_topik_string+0x148>)
 8013a48:	9300      	str	r3, [sp, #0]
 8013a4a:	4b28      	ldr	r3, [pc, #160]	@ (8013aec <get_config_topik_string+0x138>)
 8013a4c:	4a28      	ldr	r2, [pc, #160]	@ (8013af0 <get_config_topik_string+0x13c>)
 8013a4e:	f015 faed 	bl	802902c <snprintf>
	return 0;
 8013a52:	2000      	movs	r0, #0
			break;
 8013a54:	e7cd      	b.n	80139f2 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 8013a56:	9304      	str	r3, [sp, #16]
 8013a58:	4b2a      	ldr	r3, [pc, #168]	@ (8013b04 <get_config_topik_string+0x150>)
 8013a5a:	9303      	str	r3, [sp, #12]
 8013a5c:	4b20      	ldr	r3, [pc, #128]	@ (8013ae0 <get_config_topik_string+0x12c>)
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	9302      	str	r3, [sp, #8]
 8013a62:	4b20      	ldr	r3, [pc, #128]	@ (8013ae4 <get_config_topik_string+0x130>)
 8013a64:	9301      	str	r3, [sp, #4]
 8013a66:	4b25      	ldr	r3, [pc, #148]	@ (8013afc <get_config_topik_string+0x148>)
 8013a68:	9300      	str	r3, [sp, #0]
 8013a6a:	4b20      	ldr	r3, [pc, #128]	@ (8013aec <get_config_topik_string+0x138>)
 8013a6c:	4a20      	ldr	r2, [pc, #128]	@ (8013af0 <get_config_topik_string+0x13c>)
 8013a6e:	f015 fadd 	bl	802902c <snprintf>
	return 0;
 8013a72:	2000      	movs	r0, #0
			break;
 8013a74:	e7bd      	b.n	80139f2 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 8013a76:	9304      	str	r3, [sp, #16]
 8013a78:	4b23      	ldr	r3, [pc, #140]	@ (8013b08 <get_config_topik_string+0x154>)
 8013a7a:	9303      	str	r3, [sp, #12]
 8013a7c:	4b18      	ldr	r3, [pc, #96]	@ (8013ae0 <get_config_topik_string+0x12c>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	9302      	str	r3, [sp, #8]
 8013a82:	4b18      	ldr	r3, [pc, #96]	@ (8013ae4 <get_config_topik_string+0x130>)
 8013a84:	9301      	str	r3, [sp, #4]
 8013a86:	4b1d      	ldr	r3, [pc, #116]	@ (8013afc <get_config_topik_string+0x148>)
 8013a88:	9300      	str	r3, [sp, #0]
 8013a8a:	4b18      	ldr	r3, [pc, #96]	@ (8013aec <get_config_topik_string+0x138>)
 8013a8c:	4a18      	ldr	r2, [pc, #96]	@ (8013af0 <get_config_topik_string+0x13c>)
 8013a8e:	f015 facd 	bl	802902c <snprintf>
	return 0;
 8013a92:	2000      	movs	r0, #0
			break;
 8013a94:	e7ad      	b.n	80139f2 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 8013a96:	9304      	str	r3, [sp, #16]
 8013a98:	4b1c      	ldr	r3, [pc, #112]	@ (8013b0c <get_config_topik_string+0x158>)
 8013a9a:	9303      	str	r3, [sp, #12]
 8013a9c:	4b10      	ldr	r3, [pc, #64]	@ (8013ae0 <get_config_topik_string+0x12c>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	9302      	str	r3, [sp, #8]
 8013aa2:	4b10      	ldr	r3, [pc, #64]	@ (8013ae4 <get_config_topik_string+0x130>)
 8013aa4:	9301      	str	r3, [sp, #4]
 8013aa6:	4b15      	ldr	r3, [pc, #84]	@ (8013afc <get_config_topik_string+0x148>)
 8013aa8:	9300      	str	r3, [sp, #0]
 8013aaa:	4b10      	ldr	r3, [pc, #64]	@ (8013aec <get_config_topik_string+0x138>)
 8013aac:	4a10      	ldr	r2, [pc, #64]	@ (8013af0 <get_config_topik_string+0x13c>)
 8013aae:	f015 fabd 	bl	802902c <snprintf>
	return 0;
 8013ab2:	2000      	movs	r0, #0
			break;
 8013ab4:	e79d      	b.n	80139f2 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 8013ab6:	9304      	str	r3, [sp, #16]
 8013ab8:	4b15      	ldr	r3, [pc, #84]	@ (8013b10 <get_config_topik_string+0x15c>)
 8013aba:	9303      	str	r3, [sp, #12]
 8013abc:	4b08      	ldr	r3, [pc, #32]	@ (8013ae0 <get_config_topik_string+0x12c>)
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	9302      	str	r3, [sp, #8]
 8013ac2:	4b08      	ldr	r3, [pc, #32]	@ (8013ae4 <get_config_topik_string+0x130>)
 8013ac4:	9301      	str	r3, [sp, #4]
 8013ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8013afc <get_config_topik_string+0x148>)
 8013ac8:	9300      	str	r3, [sp, #0]
 8013aca:	4b08      	ldr	r3, [pc, #32]	@ (8013aec <get_config_topik_string+0x138>)
 8013acc:	4a08      	ldr	r2, [pc, #32]	@ (8013af0 <get_config_topik_string+0x13c>)
 8013ace:	f015 faad 	bl	802902c <snprintf>
	return 0;
 8013ad2:	2000      	movs	r0, #0
			break;
 8013ad4:	e78d      	b.n	80139f2 <get_config_topik_string+0x3e>
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 8013ad6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013ada:	e78a      	b.n	80139f2 <get_config_topik_string+0x3e>
 8013adc:	08034400 	.word	0x08034400
 8013ae0:	20000a1c 	.word	0x20000a1c
 8013ae4:	08034408 	.word	0x08034408
 8013ae8:	08034410 	.word	0x08034410
 8013aec:	20000074 	.word	0x20000074
 8013af0:	080343e8 	.word	0x080343e8
 8013af4:	08034154 	.word	0x08034154
 8013af8:	08034420 	.word	0x08034420
 8013afc:	08034428 	.word	0x08034428
 8013b00:	08034430 	.word	0x08034430
 8013b04:	08034438 	.word	0x08034438
 8013b08:	08034440 	.word	0x08034440
 8013b0c:	08034450 	.word	0x08034450
 8013b10:	08034460 	.word	0x08034460

08013b14 <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 8013b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b18:	b099      	sub	sp, #100	@ 0x64
 8013b1a:	9017      	str	r0, [sp, #92]	@ 0x5c
 8013b1c:	460d      	mov	r5, r1
 8013b1e:	4617      	mov	r7, r2
 8013b20:	461c      	mov	r4, r3

	uint8_t len = 0;
	char * name      = NULL;
	char * com_topik = NULL;
	memset(payload, 0, payload_len * sizeof(char));
 8013b22:	460a      	mov	r2, r1
 8013b24:	2100      	movs	r1, #0
 8013b26:	f015 ffab 	bl	8029a80 <memset>

	switch (payload_type) {
 8013b2a:	1e7a      	subs	r2, r7, #1
 8013b2c:	2a07      	cmp	r2, #7
 8013b2e:	f200 81ba 	bhi.w	8013ea6 <get_config_payload_string+0x392>
 8013b32:	e8df f012 	tbh	[pc, r2, lsl #1]
 8013b36:	0008      	.short	0x0008
 8013b38:	00a10043 	.word	0x00a10043
 8013b3c:	00c500ea 	.word	0x00c500ea
 8013b40:	0193016e 	.word	0x0193016e
 8013b44:	0149      	.short	0x0149

		case INP_CONF_PAYLOAD:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8013b46:	2101      	movs	r1, #1
 8013b48:	2080      	movs	r0, #128	@ 0x80
 8013b4a:	f7ff fee1 	bl	8013910 <_ZL9my_callocjj>
 8013b4e:	4607      	mov	r7, r0
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 8013b50:	9400      	str	r4, [sp, #0]
 8013b52:	4b80      	ldr	r3, [pc, #512]	@ (8013d54 <get_config_payload_string+0x240>)
 8013b54:	4a80      	ldr	r2, [pc, #512]	@ (8013d58 <get_config_payload_string+0x244>)
 8013b56:	2180      	movs	r1, #128	@ 0x80
 8013b58:	f015 fa68 	bl	802902c <snprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, dev_system, \
 8013b5c:	4b7f      	ldr	r3, [pc, #508]	@ (8013d5c <get_config_payload_string+0x248>)
 8013b5e:	681a      	ldr	r2, [r3, #0]
 8013b60:	4b7f      	ldr	r3, [pc, #508]	@ (8013d60 <get_config_payload_string+0x24c>)
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	9314      	str	r3, [sp, #80]	@ 0x50
 8013b66:	4b7f      	ldr	r3, [pc, #508]	@ (8013d64 <get_config_payload_string+0x250>)
 8013b68:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8013d68 <get_config_payload_string+0x254>)
 8013b6c:	9312      	str	r3, [sp, #72]	@ 0x48
 8013b6e:	4b7f      	ldr	r3, [pc, #508]	@ (8013d6c <get_config_payload_string+0x258>)
 8013b70:	9311      	str	r3, [sp, #68]	@ 0x44
 8013b72:	4b7f      	ldr	r3, [pc, #508]	@ (8013d70 <get_config_payload_string+0x25c>)
 8013b74:	9310      	str	r3, [sp, #64]	@ 0x40
 8013b76:	4b7f      	ldr	r3, [pc, #508]	@ (8013d74 <get_config_payload_string+0x260>)
 8013b78:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013b7a:	920e      	str	r2, [sp, #56]	@ 0x38
 8013b7c:	4b7e      	ldr	r3, [pc, #504]	@ (8013d78 <get_config_payload_string+0x264>)
 8013b7e:	930d      	str	r3, [sp, #52]	@ 0x34
 8013b80:	497e      	ldr	r1, [pc, #504]	@ (8013d7c <get_config_payload_string+0x268>)
 8013b82:	910c      	str	r1, [sp, #48]	@ 0x30
 8013b84:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013b86:	497e      	ldr	r1, [pc, #504]	@ (8013d80 <get_config_payload_string+0x26c>)
 8013b88:	910a      	str	r1, [sp, #40]	@ 0x28
 8013b8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8013b8c:	9308      	str	r3, [sp, #32]
 8013b8e:	9707      	str	r7, [sp, #28]
 8013b90:	487c      	ldr	r0, [pc, #496]	@ (8013d84 <get_config_payload_string+0x270>)
 8013b92:	9006      	str	r0, [sp, #24]
 8013b94:	9405      	str	r4, [sp, #20]
 8013b96:	9104      	str	r1, [sp, #16]
 8013b98:	9403      	str	r4, [sp, #12]
 8013b9a:	9102      	str	r1, [sp, #8]
 8013b9c:	9201      	str	r2, [sp, #4]
 8013b9e:	9300      	str	r3, [sp, #0]
 8013ba0:	4b79      	ldr	r3, [pc, #484]	@ (8013d88 <get_config_payload_string+0x274>)
 8013ba2:	4a7a      	ldr	r2, [pc, #488]	@ (8013d8c <get_config_payload_string+0x278>)
 8013ba4:	4629      	mov	r1, r5
 8013ba6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013ba8:	f015 fa40 	bl	802902c <snprintf>
 8013bac:	4604      	mov	r4, r0
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 8013bae:	4638      	mov	r0, r7
 8013bb0:	f005 fae4 	bl	801917c <vPortFree>

			return len;
 8013bb4:	b2e0      	uxtb	r0, r4

		default:
			return -1;
			break;
	}
}
 8013bb6:	b019      	add	sp, #100	@ 0x64
 8013bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8013bbc:	2101      	movs	r1, #1
 8013bbe:	2080      	movs	r0, #128	@ 0x80
 8013bc0:	f7ff fea6 	bl	8013910 <_ZL9my_callocjj>
 8013bc4:	4607      	mov	r7, r0
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8013bc6:	2101      	movs	r1, #1
 8013bc8:	2080      	movs	r0, #128	@ 0x80
 8013bca:	f7ff fea1 	bl	8013910 <_ZL9my_callocjj>
 8013bce:	4680      	mov	r8, r0
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 8013bd0:	f8df 91f0 	ldr.w	r9, [pc, #496]	@ 8013dc4 <get_config_payload_string+0x2b0>
 8013bd4:	9400      	str	r4, [sp, #0]
 8013bd6:	464b      	mov	r3, r9
 8013bd8:	4a6d      	ldr	r2, [pc, #436]	@ (8013d90 <get_config_payload_string+0x27c>)
 8013bda:	2180      	movs	r1, #128	@ 0x80
 8013bdc:	4638      	mov	r0, r7
 8013bde:	f015 fa25 	bl	802902c <snprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 8013be2:	f8df a194 	ldr.w	sl, [pc, #404]	@ 8013d78 <get_config_payload_string+0x264>
 8013be6:	4e65      	ldr	r6, [pc, #404]	@ (8013d7c <get_config_payload_string+0x268>)
 8013be8:	9602      	str	r6, [sp, #8]
 8013bea:	9701      	str	r7, [sp, #4]
 8013bec:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8013d5c <get_config_payload_string+0x248>
 8013bf0:	f8db 3000 	ldr.w	r3, [fp]
 8013bf4:	9300      	str	r3, [sp, #0]
 8013bf6:	4653      	mov	r3, sl
 8013bf8:	4a66      	ldr	r2, [pc, #408]	@ (8013d94 <get_config_payload_string+0x280>)
 8013bfa:	2180      	movs	r1, #128	@ 0x80
 8013bfc:	4640      	mov	r0, r8
 8013bfe:	f015 fa15 	bl	802902c <snprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 8013c02:	9400      	str	r4, [sp, #0]
 8013c04:	4b64      	ldr	r3, [pc, #400]	@ (8013d98 <get_config_payload_string+0x284>)
 8013c06:	4a54      	ldr	r2, [pc, #336]	@ (8013d58 <get_config_payload_string+0x244>)
 8013c08:	2180      	movs	r1, #128	@ 0x80
 8013c0a:	4638      	mov	r0, r7
 8013c0c:	f015 fa0e 	bl	802902c <snprintf>
			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, dev_system, \
 8013c10:	f8db 3000 	ldr.w	r3, [fp]
 8013c14:	4a52      	ldr	r2, [pc, #328]	@ (8013d60 <get_config_payload_string+0x24c>)
 8013c16:	6812      	ldr	r2, [r2, #0]
 8013c18:	9214      	str	r2, [sp, #80]	@ 0x50
 8013c1a:	4a52      	ldr	r2, [pc, #328]	@ (8013d64 <get_config_payload_string+0x250>)
 8013c1c:	9213      	str	r2, [sp, #76]	@ 0x4c
 8013c1e:	4a52      	ldr	r2, [pc, #328]	@ (8013d68 <get_config_payload_string+0x254>)
 8013c20:	9212      	str	r2, [sp, #72]	@ 0x48
 8013c22:	4a52      	ldr	r2, [pc, #328]	@ (8013d6c <get_config_payload_string+0x258>)
 8013c24:	9211      	str	r2, [sp, #68]	@ 0x44
 8013c26:	4a52      	ldr	r2, [pc, #328]	@ (8013d70 <get_config_payload_string+0x25c>)
 8013c28:	9210      	str	r2, [sp, #64]	@ 0x40
 8013c2a:	4a52      	ldr	r2, [pc, #328]	@ (8013d74 <get_config_payload_string+0x260>)
 8013c2c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013c2e:	930e      	str	r3, [sp, #56]	@ 0x38
 8013c30:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8013c34:	960c      	str	r6, [sp, #48]	@ 0x30
 8013c36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013c38:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8013c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c3e:	f8cd a020 	str.w	sl, [sp, #32]
 8013c42:	9707      	str	r7, [sp, #28]
 8013c44:	f8cd 8018 	str.w	r8, [sp, #24]
 8013c48:	9405      	str	r4, [sp, #20]
 8013c4a:	f8cd 9010 	str.w	r9, [sp, #16]
 8013c4e:	9403      	str	r4, [sp, #12]
 8013c50:	f8cd 9008 	str.w	r9, [sp, #8]
 8013c54:	9301      	str	r3, [sp, #4]
 8013c56:	f8cd a000 	str.w	sl, [sp]
 8013c5a:	464b      	mov	r3, r9
 8013c5c:	4a4b      	ldr	r2, [pc, #300]	@ (8013d8c <get_config_payload_string+0x278>)
 8013c5e:	4629      	mov	r1, r5
 8013c60:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013c62:	f015 f9e3 	bl	802902c <snprintf>
 8013c66:	4604      	mov	r4, r0
			free(name);
 8013c68:	4638      	mov	r0, r7
 8013c6a:	f005 fa87 	bl	801917c <vPortFree>
			free(com_topik);
 8013c6e:	4640      	mov	r0, r8
 8013c70:	f005 fa84 	bl	801917c <vPortFree>
			return len;
 8013c74:	b2e0      	uxtb	r0, r4
 8013c76:	e79e      	b.n	8013bb6 <get_config_payload_string+0xa2>
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 8013c78:	4b38      	ldr	r3, [pc, #224]	@ (8013d5c <get_config_payload_string+0x248>)
 8013c7a:	6819      	ldr	r1, [r3, #0]
 8013c7c:	4b3e      	ldr	r3, [pc, #248]	@ (8013d78 <get_config_payload_string+0x264>)
 8013c7e:	4a47      	ldr	r2, [pc, #284]	@ (8013d9c <get_config_payload_string+0x288>)
 8013c80:	4837      	ldr	r0, [pc, #220]	@ (8013d60 <get_config_payload_string+0x24c>)
 8013c82:	6800      	ldr	r0, [r0, #0]
 8013c84:	9010      	str	r0, [sp, #64]	@ 0x40
 8013c86:	4837      	ldr	r0, [pc, #220]	@ (8013d64 <get_config_payload_string+0x250>)
 8013c88:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013c8a:	4837      	ldr	r0, [pc, #220]	@ (8013d68 <get_config_payload_string+0x254>)
 8013c8c:	900e      	str	r0, [sp, #56]	@ 0x38
 8013c8e:	4837      	ldr	r0, [pc, #220]	@ (8013d6c <get_config_payload_string+0x258>)
 8013c90:	900d      	str	r0, [sp, #52]	@ 0x34
 8013c92:	4837      	ldr	r0, [pc, #220]	@ (8013d70 <get_config_payload_string+0x25c>)
 8013c94:	900c      	str	r0, [sp, #48]	@ 0x30
 8013c96:	4837      	ldr	r0, [pc, #220]	@ (8013d74 <get_config_payload_string+0x260>)
 8013c98:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013c9a:	910a      	str	r1, [sp, #40]	@ 0x28
 8013c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c9e:	4840      	ldr	r0, [pc, #256]	@ (8013da0 <get_config_payload_string+0x28c>)
 8013ca0:	9008      	str	r0, [sp, #32]
 8013ca2:	9207      	str	r2, [sp, #28]
 8013ca4:	9106      	str	r1, [sp, #24]
 8013ca6:	9305      	str	r3, [sp, #20]
 8013ca8:	483e      	ldr	r0, [pc, #248]	@ (8013da4 <get_config_payload_string+0x290>)
 8013caa:	9004      	str	r0, [sp, #16]
 8013cac:	483e      	ldr	r0, [pc, #248]	@ (8013da8 <get_config_payload_string+0x294>)
 8013cae:	9003      	str	r0, [sp, #12]
 8013cb0:	9202      	str	r2, [sp, #8]
 8013cb2:	483e      	ldr	r0, [pc, #248]	@ (8013dac <get_config_payload_string+0x298>)
 8013cb4:	9001      	str	r0, [sp, #4]
 8013cb6:	9100      	str	r1, [sp, #0]
 8013cb8:	4934      	ldr	r1, [pc, #208]	@ (8013d8c <get_config_payload_string+0x278>)
 8013cba:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013cbc:	f015 fb1e 	bl	80292fc <sprintf>
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8013cc0:	4b26      	ldr	r3, [pc, #152]	@ (8013d5c <get_config_payload_string+0x248>)
 8013cc2:	6819      	ldr	r1, [r3, #0]
 8013cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8013d78 <get_config_payload_string+0x264>)
 8013cc6:	4a3a      	ldr	r2, [pc, #232]	@ (8013db0 <get_config_payload_string+0x29c>)
 8013cc8:	4825      	ldr	r0, [pc, #148]	@ (8013d60 <get_config_payload_string+0x24c>)
 8013cca:	6800      	ldr	r0, [r0, #0]
 8013ccc:	9010      	str	r0, [sp, #64]	@ 0x40
 8013cce:	4825      	ldr	r0, [pc, #148]	@ (8013d64 <get_config_payload_string+0x250>)
 8013cd0:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013cd2:	4825      	ldr	r0, [pc, #148]	@ (8013d68 <get_config_payload_string+0x254>)
 8013cd4:	900e      	str	r0, [sp, #56]	@ 0x38
 8013cd6:	4825      	ldr	r0, [pc, #148]	@ (8013d6c <get_config_payload_string+0x258>)
 8013cd8:	900d      	str	r0, [sp, #52]	@ 0x34
 8013cda:	4825      	ldr	r0, [pc, #148]	@ (8013d70 <get_config_payload_string+0x25c>)
 8013cdc:	900c      	str	r0, [sp, #48]	@ 0x30
 8013cde:	4825      	ldr	r0, [pc, #148]	@ (8013d74 <get_config_payload_string+0x260>)
 8013ce0:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013ce2:	910a      	str	r1, [sp, #40]	@ 0x28
 8013ce4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ce6:	4833      	ldr	r0, [pc, #204]	@ (8013db4 <get_config_payload_string+0x2a0>)
 8013ce8:	9008      	str	r0, [sp, #32]
 8013cea:	9207      	str	r2, [sp, #28]
 8013cec:	9106      	str	r1, [sp, #24]
 8013cee:	9305      	str	r3, [sp, #20]
 8013cf0:	4831      	ldr	r0, [pc, #196]	@ (8013db8 <get_config_payload_string+0x2a4>)
 8013cf2:	9004      	str	r0, [sp, #16]
 8013cf4:	4823      	ldr	r0, [pc, #140]	@ (8013d84 <get_config_payload_string+0x270>)
 8013cf6:	9003      	str	r0, [sp, #12]
 8013cf8:	9202      	str	r2, [sp, #8]
 8013cfa:	482c      	ldr	r0, [pc, #176]	@ (8013dac <get_config_payload_string+0x298>)
 8013cfc:	9001      	str	r0, [sp, #4]
 8013cfe:	9100      	str	r1, [sp, #0]
 8013d00:	4922      	ldr	r1, [pc, #136]	@ (8013d8c <get_config_payload_string+0x278>)
 8013d02:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013d04:	f015 fafa 	bl	80292fc <sprintf>
			break;
 8013d08:	e7da      	b.n	8013cc0 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 8013d0a:	4b14      	ldr	r3, [pc, #80]	@ (8013d5c <get_config_payload_string+0x248>)
 8013d0c:	6819      	ldr	r1, [r3, #0]
 8013d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8013d78 <get_config_payload_string+0x264>)
 8013d10:	4a1d      	ldr	r2, [pc, #116]	@ (8013d88 <get_config_payload_string+0x274>)
 8013d12:	4813      	ldr	r0, [pc, #76]	@ (8013d60 <get_config_payload_string+0x24c>)
 8013d14:	6800      	ldr	r0, [r0, #0]
 8013d16:	9010      	str	r0, [sp, #64]	@ 0x40
 8013d18:	4812      	ldr	r0, [pc, #72]	@ (8013d64 <get_config_payload_string+0x250>)
 8013d1a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013d1c:	4812      	ldr	r0, [pc, #72]	@ (8013d68 <get_config_payload_string+0x254>)
 8013d1e:	900e      	str	r0, [sp, #56]	@ 0x38
 8013d20:	4812      	ldr	r0, [pc, #72]	@ (8013d6c <get_config_payload_string+0x258>)
 8013d22:	900d      	str	r0, [sp, #52]	@ 0x34
 8013d24:	4812      	ldr	r0, [pc, #72]	@ (8013d70 <get_config_payload_string+0x25c>)
 8013d26:	900c      	str	r0, [sp, #48]	@ 0x30
 8013d28:	4812      	ldr	r0, [pc, #72]	@ (8013d74 <get_config_payload_string+0x260>)
 8013d2a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013d2c:	910a      	str	r1, [sp, #40]	@ 0x28
 8013d2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d30:	4822      	ldr	r0, [pc, #136]	@ (8013dbc <get_config_payload_string+0x2a8>)
 8013d32:	9008      	str	r0, [sp, #32]
 8013d34:	9207      	str	r2, [sp, #28]
 8013d36:	9106      	str	r1, [sp, #24]
 8013d38:	9305      	str	r3, [sp, #20]
 8013d3a:	4821      	ldr	r0, [pc, #132]	@ (8013dc0 <get_config_payload_string+0x2ac>)
 8013d3c:	9004      	str	r0, [sp, #16]
 8013d3e:	4811      	ldr	r0, [pc, #68]	@ (8013d84 <get_config_payload_string+0x270>)
 8013d40:	9003      	str	r0, [sp, #12]
 8013d42:	9202      	str	r2, [sp, #8]
 8013d44:	4819      	ldr	r0, [pc, #100]	@ (8013dac <get_config_payload_string+0x298>)
 8013d46:	9001      	str	r0, [sp, #4]
 8013d48:	9100      	str	r1, [sp, #0]
 8013d4a:	4910      	ldr	r1, [pc, #64]	@ (8013d8c <get_config_payload_string+0x278>)
 8013d4c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013d4e:	f015 fad5 	bl	80292fc <sprintf>
			break;
 8013d52:	e7b5      	b.n	8013cc0 <get_config_payload_string+0x1ac>
 8013d54:	08034468 	.word	0x08034468
 8013d58:	08034474 	.word	0x08034474
 8013d5c:	20000a1c 	.word	0x20000a1c
 8013d60:	20000a18 	.word	0x20000a18
 8013d64:	0803447c 	.word	0x0803447c
 8013d68:	08034480 	.word	0x08034480
 8013d6c:	08034484 	.word	0x08034484
 8013d70:	08034494 	.word	0x08034494
 8013d74:	080344a8 	.word	0x080344a8
 8013d78:	08034408 	.word	0x08034408
 8013d7c:	080337f8 	.word	0x080337f8
 8013d80:	08034400 	.word	0x08034400
 8013d84:	080368dc 	.word	0x080368dc
 8013d88:	08034438 	.word	0x08034438
 8013d8c:	0803460c 	.word	0x0803460c
 8013d90:	080344b4 	.word	0x080344b4
 8013d94:	080345e4 	.word	0x080345e4
 8013d98:	080344bc 	.word	0x080344bc
 8013d9c:	08034420 	.word	0x08034420
 8013da0:	080344d0 	.word	0x080344d0
 8013da4:	080344d4 	.word	0x080344d4
 8013da8:	080344e4 	.word	0x080344e4
 8013dac:	08034508 	.word	0x08034508
 8013db0:	08034430 	.word	0x08034430
 8013db4:	08034510 	.word	0x08034510
 8013db8:	08034514 	.word	0x08034514
 8013dbc:	08034524 	.word	0x08034524
 8013dc0:	08034528 	.word	0x08034528
 8013dc4:	08034154 	.word	0x08034154
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 8013dc8:	4b38      	ldr	r3, [pc, #224]	@ (8013eac <get_config_payload_string+0x398>)
 8013dca:	6819      	ldr	r1, [r3, #0]
 8013dcc:	4b38      	ldr	r3, [pc, #224]	@ (8013eb0 <get_config_payload_string+0x39c>)
 8013dce:	4a39      	ldr	r2, [pc, #228]	@ (8013eb4 <get_config_payload_string+0x3a0>)
 8013dd0:	4839      	ldr	r0, [pc, #228]	@ (8013eb8 <get_config_payload_string+0x3a4>)
 8013dd2:	6800      	ldr	r0, [r0, #0]
 8013dd4:	9010      	str	r0, [sp, #64]	@ 0x40
 8013dd6:	4839      	ldr	r0, [pc, #228]	@ (8013ebc <get_config_payload_string+0x3a8>)
 8013dd8:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013dda:	4839      	ldr	r0, [pc, #228]	@ (8013ec0 <get_config_payload_string+0x3ac>)
 8013ddc:	900e      	str	r0, [sp, #56]	@ 0x38
 8013dde:	4839      	ldr	r0, [pc, #228]	@ (8013ec4 <get_config_payload_string+0x3b0>)
 8013de0:	900d      	str	r0, [sp, #52]	@ 0x34
 8013de2:	4839      	ldr	r0, [pc, #228]	@ (8013ec8 <get_config_payload_string+0x3b4>)
 8013de4:	900c      	str	r0, [sp, #48]	@ 0x30
 8013de6:	4839      	ldr	r0, [pc, #228]	@ (8013ecc <get_config_payload_string+0x3b8>)
 8013de8:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013dea:	910a      	str	r1, [sp, #40]	@ 0x28
 8013dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8013dee:	4838      	ldr	r0, [pc, #224]	@ (8013ed0 <get_config_payload_string+0x3bc>)
 8013df0:	9008      	str	r0, [sp, #32]
 8013df2:	9207      	str	r2, [sp, #28]
 8013df4:	9106      	str	r1, [sp, #24]
 8013df6:	9305      	str	r3, [sp, #20]
 8013df8:	4836      	ldr	r0, [pc, #216]	@ (8013ed4 <get_config_payload_string+0x3c0>)
 8013dfa:	9004      	str	r0, [sp, #16]
 8013dfc:	4836      	ldr	r0, [pc, #216]	@ (8013ed8 <get_config_payload_string+0x3c4>)
 8013dfe:	9003      	str	r0, [sp, #12]
 8013e00:	9202      	str	r2, [sp, #8]
 8013e02:	4836      	ldr	r0, [pc, #216]	@ (8013edc <get_config_payload_string+0x3c8>)
 8013e04:	9001      	str	r0, [sp, #4]
 8013e06:	9100      	str	r1, [sp, #0]
 8013e08:	4935      	ldr	r1, [pc, #212]	@ (8013ee0 <get_config_payload_string+0x3cc>)
 8013e0a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013e0c:	f015 fa76 	bl	80292fc <sprintf>
			break;
 8013e10:	e756      	b.n	8013cc0 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 8013e12:	4b26      	ldr	r3, [pc, #152]	@ (8013eac <get_config_payload_string+0x398>)
 8013e14:	6819      	ldr	r1, [r3, #0]
 8013e16:	4b26      	ldr	r3, [pc, #152]	@ (8013eb0 <get_config_payload_string+0x39c>)
 8013e18:	4a32      	ldr	r2, [pc, #200]	@ (8013ee4 <get_config_payload_string+0x3d0>)
 8013e1a:	4827      	ldr	r0, [pc, #156]	@ (8013eb8 <get_config_payload_string+0x3a4>)
 8013e1c:	6800      	ldr	r0, [r0, #0]
 8013e1e:	9010      	str	r0, [sp, #64]	@ 0x40
 8013e20:	4826      	ldr	r0, [pc, #152]	@ (8013ebc <get_config_payload_string+0x3a8>)
 8013e22:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013e24:	4826      	ldr	r0, [pc, #152]	@ (8013ec0 <get_config_payload_string+0x3ac>)
 8013e26:	900e      	str	r0, [sp, #56]	@ 0x38
 8013e28:	4826      	ldr	r0, [pc, #152]	@ (8013ec4 <get_config_payload_string+0x3b0>)
 8013e2a:	900d      	str	r0, [sp, #52]	@ 0x34
 8013e2c:	4826      	ldr	r0, [pc, #152]	@ (8013ec8 <get_config_payload_string+0x3b4>)
 8013e2e:	900c      	str	r0, [sp, #48]	@ 0x30
 8013e30:	4826      	ldr	r0, [pc, #152]	@ (8013ecc <get_config_payload_string+0x3b8>)
 8013e32:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013e34:	910a      	str	r1, [sp, #40]	@ 0x28
 8013e36:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e38:	482b      	ldr	r0, [pc, #172]	@ (8013ee8 <get_config_payload_string+0x3d4>)
 8013e3a:	9008      	str	r0, [sp, #32]
 8013e3c:	9207      	str	r2, [sp, #28]
 8013e3e:	9106      	str	r1, [sp, #24]
 8013e40:	9305      	str	r3, [sp, #20]
 8013e42:	482a      	ldr	r0, [pc, #168]	@ (8013eec <get_config_payload_string+0x3d8>)
 8013e44:	9004      	str	r0, [sp, #16]
 8013e46:	4824      	ldr	r0, [pc, #144]	@ (8013ed8 <get_config_payload_string+0x3c4>)
 8013e48:	9003      	str	r0, [sp, #12]
 8013e4a:	9202      	str	r2, [sp, #8]
 8013e4c:	4823      	ldr	r0, [pc, #140]	@ (8013edc <get_config_payload_string+0x3c8>)
 8013e4e:	9001      	str	r0, [sp, #4]
 8013e50:	9100      	str	r1, [sp, #0]
 8013e52:	4923      	ldr	r1, [pc, #140]	@ (8013ee0 <get_config_payload_string+0x3cc>)
 8013e54:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013e56:	f015 fa51 	bl	80292fc <sprintf>
			break;
 8013e5a:	e731      	b.n	8013cc0 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8013e5c:	4b13      	ldr	r3, [pc, #76]	@ (8013eac <get_config_payload_string+0x398>)
 8013e5e:	6819      	ldr	r1, [r3, #0]
 8013e60:	4b13      	ldr	r3, [pc, #76]	@ (8013eb0 <get_config_payload_string+0x39c>)
 8013e62:	4a23      	ldr	r2, [pc, #140]	@ (8013ef0 <get_config_payload_string+0x3dc>)
 8013e64:	4814      	ldr	r0, [pc, #80]	@ (8013eb8 <get_config_payload_string+0x3a4>)
 8013e66:	6800      	ldr	r0, [r0, #0]
 8013e68:	9010      	str	r0, [sp, #64]	@ 0x40
 8013e6a:	4814      	ldr	r0, [pc, #80]	@ (8013ebc <get_config_payload_string+0x3a8>)
 8013e6c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013e6e:	4814      	ldr	r0, [pc, #80]	@ (8013ec0 <get_config_payload_string+0x3ac>)
 8013e70:	900e      	str	r0, [sp, #56]	@ 0x38
 8013e72:	4814      	ldr	r0, [pc, #80]	@ (8013ec4 <get_config_payload_string+0x3b0>)
 8013e74:	900d      	str	r0, [sp, #52]	@ 0x34
 8013e76:	4814      	ldr	r0, [pc, #80]	@ (8013ec8 <get_config_payload_string+0x3b4>)
 8013e78:	900c      	str	r0, [sp, #48]	@ 0x30
 8013e7a:	4814      	ldr	r0, [pc, #80]	@ (8013ecc <get_config_payload_string+0x3b8>)
 8013e7c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013e7e:	910a      	str	r1, [sp, #40]	@ 0x28
 8013e80:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e82:	481c      	ldr	r0, [pc, #112]	@ (8013ef4 <get_config_payload_string+0x3e0>)
 8013e84:	9008      	str	r0, [sp, #32]
 8013e86:	9207      	str	r2, [sp, #28]
 8013e88:	9106      	str	r1, [sp, #24]
 8013e8a:	9305      	str	r3, [sp, #20]
 8013e8c:	481a      	ldr	r0, [pc, #104]	@ (8013ef8 <get_config_payload_string+0x3e4>)
 8013e8e:	9004      	str	r0, [sp, #16]
 8013e90:	4811      	ldr	r0, [pc, #68]	@ (8013ed8 <get_config_payload_string+0x3c4>)
 8013e92:	9003      	str	r0, [sp, #12]
 8013e94:	9202      	str	r2, [sp, #8]
 8013e96:	4811      	ldr	r0, [pc, #68]	@ (8013edc <get_config_payload_string+0x3c8>)
 8013e98:	9001      	str	r0, [sp, #4]
 8013e9a:	9100      	str	r1, [sp, #0]
 8013e9c:	4910      	ldr	r1, [pc, #64]	@ (8013ee0 <get_config_payload_string+0x3cc>)
 8013e9e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013ea0:	f015 fa2c 	bl	80292fc <sprintf>
			break;
 8013ea4:	e70c      	b.n	8013cc0 <get_config_payload_string+0x1ac>
	switch (payload_type) {
 8013ea6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013eaa:	e684      	b.n	8013bb6 <get_config_payload_string+0xa2>
 8013eac:	20000a1c 	.word	0x20000a1c
 8013eb0:	08034408 	.word	0x08034408
 8013eb4:	08034440 	.word	0x08034440
 8013eb8:	20000a18 	.word	0x20000a18
 8013ebc:	0803447c 	.word	0x0803447c
 8013ec0:	08034480 	.word	0x08034480
 8013ec4:	08034484 	.word	0x08034484
 8013ec8:	08034494 	.word	0x08034494
 8013ecc:	080344a8 	.word	0x080344a8
 8013ed0:	0803454c 	.word	0x0803454c
 8013ed4:	08034550 	.word	0x08034550
 8013ed8:	080368dc 	.word	0x080368dc
 8013edc:	08034508 	.word	0x08034508
 8013ee0:	0803460c 	.word	0x0803460c
 8013ee4:	08034450 	.word	0x08034450
 8013ee8:	08034570 	.word	0x08034570
 8013eec:	08034574 	.word	0x08034574
 8013ef0:	08034460 	.word	0x08034460
 8013ef4:	080345a0 	.word	0x080345a0
 8013ef8:	080345a4 	.word	0x080345a4

08013efc <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 8013efc:	b530      	push	{r4, r5, lr}
 8013efe:	b083      	sub	sp, #12
 8013f00:	461c      	mov	r4, r3
 8013f02:	f89d 5018 	ldrb.w	r5, [sp, #24]

	char * sens_name = NULL;
	switch (sensor_type) {
 8013f06:	2a01      	cmp	r2, #1
 8013f08:	d00b      	beq.n	8013f22 <gen_bin_sensor_status_payload_JSON+0x26>
 8013f0a:	2a02      	cmp	r2, #2
 8013f0c:	d10b      	bne.n	8013f26 <gen_bin_sensor_status_payload_JSON+0x2a>
		case INPUT_SENSOR:
			sens_name = (char *)component_input;
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
 8013f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8013f38 <gen_bin_sensor_status_payload_JSON+0x3c>)
			break;
		default:
			break;
	}

	if (state){
 8013f10:	b15d      	cbz	r5, 8013f2a <gen_bin_sensor_status_payload_JSON+0x2e>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 8013f12:	4a0a      	ldr	r2, [pc, #40]	@ (8013f3c <gen_bin_sensor_status_payload_JSON+0x40>)
 8013f14:	9201      	str	r2, [sp, #4]
 8013f16:	9400      	str	r4, [sp, #0]
 8013f18:	4a09      	ldr	r2, [pc, #36]	@ (8013f40 <gen_bin_sensor_status_payload_JSON+0x44>)
 8013f1a:	f015 f887 	bl	802902c <snprintf>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
	}
}
 8013f1e:	b003      	add	sp, #12
 8013f20:	bd30      	pop	{r4, r5, pc}
			sens_name = (char *)component_input;
 8013f22:	4b08      	ldr	r3, [pc, #32]	@ (8013f44 <gen_bin_sensor_status_payload_JSON+0x48>)
 8013f24:	e7f4      	b.n	8013f10 <gen_bin_sensor_status_payload_JSON+0x14>
	switch (sensor_type) {
 8013f26:	2300      	movs	r3, #0
 8013f28:	e7f2      	b.n	8013f10 <gen_bin_sensor_status_payload_JSON+0x14>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 8013f2a:	4a07      	ldr	r2, [pc, #28]	@ (8013f48 <gen_bin_sensor_status_payload_JSON+0x4c>)
 8013f2c:	9201      	str	r2, [sp, #4]
 8013f2e:	9400      	str	r4, [sp, #0]
 8013f30:	4a03      	ldr	r2, [pc, #12]	@ (8013f40 <gen_bin_sensor_status_payload_JSON+0x44>)
 8013f32:	f015 f87b 	bl	802902c <snprintf>
 8013f36:	e7f2      	b.n	8013f1e <gen_bin_sensor_status_payload_JSON+0x22>
 8013f38:	08034154 	.word	0x08034154
 8013f3c:	0803420c 	.word	0x0803420c
 8013f40:	080345d4 	.word	0x080345d4
 8013f44:	08034400 	.word	0x08034400
 8013f48:	08034224 	.word	0x08034224

08013f4c <generate_comand_topik_for_subscrabe>:
//	strcat(buff, "\n}");
//
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 8013f4c:	b500      	push	{lr}
 8013f4e:	b085      	sub	sp, #20

	switch(sensor_type){

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 8013f50:	9302      	str	r3, [sp, #8]
 8013f52:	4b06      	ldr	r3, [pc, #24]	@ (8013f6c <generate_comand_topik_for_subscrabe+0x20>)
 8013f54:	9301      	str	r3, [sp, #4]
 8013f56:	4b06      	ldr	r3, [pc, #24]	@ (8013f70 <generate_comand_topik_for_subscrabe+0x24>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	9300      	str	r3, [sp, #0]
 8013f5c:	4b05      	ldr	r3, [pc, #20]	@ (8013f74 <generate_comand_topik_for_subscrabe+0x28>)
 8013f5e:	4a06      	ldr	r2, [pc, #24]	@ (8013f78 <generate_comand_topik_for_subscrabe+0x2c>)
 8013f60:	f015 f864 	bl	802902c <snprintf>
			break;
	}
}
 8013f64:	b005      	add	sp, #20
 8013f66:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f6a:	bf00      	nop
 8013f6c:	08034154 	.word	0x08034154
 8013f70:	20000a1c 	.word	0x20000a1c
 8013f74:	08034408 	.word	0x08034408
 8013f78:	080345b0 	.word	0x080345b0

08013f7c <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 8013f7c:	b500      	push	{lr}
 8013f7e:	b085      	sub	sp, #20

	strcpy(topik, "\0");
 8013f80:	f04f 0c00 	mov.w	ip, #0
 8013f84:	f880 c000 	strb.w	ip, [r0]

	switch (sensor_type) {
 8013f88:	2a01      	cmp	r2, #1
 8013f8a:	d006      	beq.n	8013f9a <generate_status_topik+0x1e>
 8013f8c:	2a02      	cmp	r2, #2
 8013f8e:	d00f      	beq.n	8013fb0 <generate_status_topik+0x34>
 8013f90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
			return -1;
			break;
	}

	return 0;
}
 8013f94:	b005      	add	sp, #20
 8013f96:	f85d fb04 	ldr.w	pc, [sp], #4
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 8013f9a:	9302      	str	r3, [sp, #8]
 8013f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8013fc8 <generate_status_topik+0x4c>)
 8013f9e:	9301      	str	r3, [sp, #4]
 8013fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8013fcc <generate_status_topik+0x50>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	9300      	str	r3, [sp, #0]
 8013fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8013fd0 <generate_status_topik+0x54>)
 8013fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8013fd4 <generate_status_topik+0x58>)
 8013faa:	f015 f83f 	bl	802902c <snprintf>
 8013fae:	e7f1      	b.n	8013f94 <generate_status_topik+0x18>
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 8013fb0:	9302      	str	r3, [sp, #8]
 8013fb2:	4b09      	ldr	r3, [pc, #36]	@ (8013fd8 <generate_status_topik+0x5c>)
 8013fb4:	9301      	str	r3, [sp, #4]
 8013fb6:	4b05      	ldr	r3, [pc, #20]	@ (8013fcc <generate_status_topik+0x50>)
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	9300      	str	r3, [sp, #0]
 8013fbc:	4b04      	ldr	r3, [pc, #16]	@ (8013fd0 <generate_status_topik+0x54>)
 8013fbe:	4a05      	ldr	r2, [pc, #20]	@ (8013fd4 <generate_status_topik+0x58>)
 8013fc0:	f015 f834 	bl	802902c <snprintf>
 8013fc4:	e7e6      	b.n	8013f94 <generate_status_topik+0x18>
 8013fc6:	bf00      	nop
 8013fc8:	08034400 	.word	0x08034400
 8013fcc:	20000a1c 	.word	0x20000a1c
 8013fd0:	08034408 	.word	0x08034408
 8013fd4:	080345c0 	.word	0x080345c0
 8013fd8:	08034154 	.word	0x08034154

08013fdc <timer_fn>:
  }
  (void) c;
}


void timer_fn(void *arg) {
 8013fdc:	b508      	push	{r3, lr}
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8013fde:	4b08      	ldr	r3, [pc, #32]	@ (8014000 <timer_fn+0x24>)
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	b12b      	cbz	r3, 8013ff0 <timer_fn+0x14>
  if (s_sntp_conn != NULL) mg_sntp_request(s_sntp_conn);
 8013fe4:	4b06      	ldr	r3, [pc, #24]	@ (8014000 <timer_fn+0x24>)
 8013fe6:	6818      	ldr	r0, [r3, #0]
 8013fe8:	b108      	cbz	r0, 8013fee <timer_fn+0x12>
 8013fea:	f012 fe5d 	bl	8026ca8 <mg_sntp_request>
}
 8013fee:	bd08      	pop	{r3, pc}
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8013ff0:	4a04      	ldr	r2, [pc, #16]	@ (8014004 <timer_fn+0x28>)
 8013ff2:	4619      	mov	r1, r3
 8013ff4:	f012 ff2a 	bl	8026e4c <mg_sntp_connect>
 8013ff8:	4b01      	ldr	r3, [pc, #4]	@ (8014000 <timer_fn+0x24>)
 8013ffa:	6018      	str	r0, [r3, #0]
 8013ffc:	e7f2      	b.n	8013fe4 <timer_fn+0x8>
 8013ffe:	bf00      	nop
 8014000:	20000a20 	.word	0x20000a20
 8014004:	08014009 	.word	0x08014009

08014008 <sfn>:
static void sfn(struct mg_connection *c, int ev, void *ev_data) {
 8014008:	b570      	push	{r4, r5, r6, lr}
  if (ev == MG_EV_SNTP_TIME) {
 801400a:	2912      	cmp	r1, #18
 801400c:	d002      	beq.n	8014014 <sfn+0xc>
  } else if (ev == MG_EV_CLOSE) {
 801400e:	2909      	cmp	r1, #9
 8014010:	d046      	beq.n	80140a0 <sfn+0x98>
}
 8014012:	bd70      	pop	{r4, r5, r6, pc}
 8014014:	4614      	mov	r4, r2
	  logging(L_INFO, "Response from NTP server received");
 8014016:	4926      	ldr	r1, [pc, #152]	@ (80140b0 <sfn+0xa8>)
 8014018:	2001      	movs	r0, #1
 801401a:	f7fd fe31 	bl	8011c80 <logging>
    uint64_t curtime = mg_now();
 801401e:	f012 fd7f 	bl	8026b20 <mg_now>
 8014022:	4606      	mov	r6, r0
 8014024:	460d      	mov	r5, r1
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 8014026:	4b23      	ldr	r3, [pc, #140]	@ (80140b4 <sfn+0xac>)
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	2b01      	cmp	r3, #1
 801402c:	dc20      	bgt.n	8014070 <sfn+0x68>
    logging(L_INFO,"SNTP-updated current time is: %" PRIu64 " ms from epoch", curtime);
 801402e:	4632      	mov	r2, r6
 8014030:	462b      	mov	r3, r5
 8014032:	4921      	ldr	r1, [pc, #132]	@ (80140b8 <sfn+0xb0>)
 8014034:	2001      	movs	r0, #1
 8014036:	f7fd fe23 	bl	8011c80 <logging>
      uint64_t t = *(uint64_t *) ev_data;
 801403a:	6825      	ldr	r5, [r4, #0]
 801403c:	6864      	ldr	r4, [r4, #4]
      s_boot_timestamp = (time_t) ((t - mg_millis()) / 1000);
 801403e:	f00f f91e 	bl	802327e <mg_millis>
 8014042:	1a28      	subs	r0, r5, r0
 8014044:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014048:	f04f 0300 	mov.w	r3, #0
 801404c:	eb64 0101 	sbc.w	r1, r4, r1
 8014050:	f7fc fe82 	bl	8010d58 <__aeabi_uldivmod>
 8014054:	4b19      	ldr	r3, [pc, #100]	@ (80140bc <sfn+0xb4>)
 8014056:	e9c3 0100 	strd	r0, r1, [r3]
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 801405a:	4b16      	ldr	r3, [pc, #88]	@ (80140b4 <sfn+0xac>)
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	2b01      	cmp	r3, #1
 8014060:	dc12      	bgt.n	8014088 <sfn+0x80>
      logging(L_INFO,"Got SNTP time: %" PRIu64 " ms from epoch", t);
 8014062:	462a      	mov	r2, r5
 8014064:	4623      	mov	r3, r4
 8014066:	4916      	ldr	r1, [pc, #88]	@ (80140c0 <sfn+0xb8>)
 8014068:	2001      	movs	r0, #1
 801406a:	f7fd fe09 	bl	8011c80 <logging>
 801406e:	e7d0      	b.n	8014012 <sfn+0xa>
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 8014070:	4b14      	ldr	r3, [pc, #80]	@ (80140c4 <sfn+0xbc>)
 8014072:	221b      	movs	r2, #27
 8014074:	4914      	ldr	r1, [pc, #80]	@ (80140c8 <sfn+0xc0>)
 8014076:	2002      	movs	r0, #2
 8014078:	f00f f906 	bl	8023288 <mg_log_prefix>
 801407c:	4632      	mov	r2, r6
 801407e:	462b      	mov	r3, r5
 8014080:	480d      	ldr	r0, [pc, #52]	@ (80140b8 <sfn+0xb0>)
 8014082:	f00d f993 	bl	80213ac <mg_log>
 8014086:	e7d2      	b.n	801402e <sfn+0x26>
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 8014088:	4b0e      	ldr	r3, [pc, #56]	@ (80140c4 <sfn+0xbc>)
 801408a:	2221      	movs	r2, #33	@ 0x21
 801408c:	490e      	ldr	r1, [pc, #56]	@ (80140c8 <sfn+0xc0>)
 801408e:	2002      	movs	r0, #2
 8014090:	f00f f8fa 	bl	8023288 <mg_log_prefix>
 8014094:	462a      	mov	r2, r5
 8014096:	4623      	mov	r3, r4
 8014098:	480c      	ldr	r0, [pc, #48]	@ (80140cc <sfn+0xc4>)
 801409a:	f00d f987 	bl	80213ac <mg_log>
 801409e:	e7e0      	b.n	8014062 <sfn+0x5a>
	  logging(L_INFO, "NTP connection is closed");
 80140a0:	490b      	ldr	r1, [pc, #44]	@ (80140d0 <sfn+0xc8>)
 80140a2:	2001      	movs	r0, #1
 80140a4:	f7fd fdec 	bl	8011c80 <logging>
    s_sntp_conn = NULL;
 80140a8:	4b0a      	ldr	r3, [pc, #40]	@ (80140d4 <sfn+0xcc>)
 80140aa:	2200      	movs	r2, #0
 80140ac:	601a      	str	r2, [r3, #0]
}
 80140ae:	e7b0      	b.n	8014012 <sfn+0xa>
 80140b0:	0803478c 	.word	0x0803478c
 80140b4:	200000a8 	.word	0x200000a8
 80140b8:	080347d0 	.word	0x080347d0
 80140bc:	20000a28 	.word	0x20000a28
 80140c0:	08034828 	.word	0x08034828
 80140c4:	08034884 	.word	0x08034884
 80140c8:	080347b0 	.word	0x080347b0
 80140cc:	08034804 	.word	0x08034804
 80140d0:	0803484c 	.word	0x0803484c
 80140d4:	20000a20 	.word	0x20000a20

080140d8 <start_sntp>:

void start_sntp(void *arg){
 80140d8:	b530      	push	{r4, r5, lr}
 80140da:	b085      	sub	sp, #20
 80140dc:	4604      	mov	r4, r0
	logging(L_INFO, "starting NTP client service");
 80140de:	490d      	ldr	r1, [pc, #52]	@ (8014114 <start_sntp+0x3c>)
 80140e0:	2001      	movs	r0, #1
 80140e2:	f7fd fdcd 	bl	8011c80 <logging>
	struct mg_mgr *mgr = (struct mg_mgr*)arg;

	mg_timer_add(mgr, 20000,  MG_TIMER_ONCE, timer_fn, mgr); //Run once with delay 20 seconds
 80140e6:	9402      	str	r4, [sp, #8]
 80140e8:	4d0b      	ldr	r5, [pc, #44]	@ (8014118 <start_sntp+0x40>)
 80140ea:	9501      	str	r5, [sp, #4]
 80140ec:	2300      	movs	r3, #0
 80140ee:	9300      	str	r3, [sp, #0]
 80140f0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80140f4:	2300      	movs	r3, #0
 80140f6:	4620      	mov	r0, r4
 80140f8:	f00e fb70 	bl	80227dc <mg_timer_add>
	mg_timer_add(mgr, 1080000, MG_TIMER_REPEAT, timer_fn, mgr); //Repeat every 30 minutes 1080 seconds
 80140fc:	9402      	str	r4, [sp, #8]
 80140fe:	9501      	str	r5, [sp, #4]
 8014100:	2301      	movs	r3, #1
 8014102:	9300      	str	r3, [sp, #0]
 8014104:	4a05      	ldr	r2, [pc, #20]	@ (801411c <start_sntp+0x44>)
 8014106:	2300      	movs	r3, #0
 8014108:	4620      	mov	r0, r4
 801410a:	f00e fb67 	bl	80227dc <mg_timer_add>

}
 801410e:	b005      	add	sp, #20
 8014110:	bd30      	pop	{r4, r5, pc}
 8014112:	bf00      	nop
 8014114:	08034868 	.word	0x08034868
 8014118:	08013fdd 	.word	0x08013fdd
 801411c:	00107ac0 	.word	0x00107ac0

08014120 <my_calloc>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8014120:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8014122:	fb01 f400 	mul.w	r4, r1, r0
 8014126:	4620      	mov	r0, r4
 8014128:	f004 ffa6 	bl	8019078 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801412c:	4605      	mov	r5, r0
 801412e:	b118      	cbz	r0, 8014138 <my_calloc+0x18>
 8014130:	4622      	mov	r2, r4
 8014132:	2100      	movs	r1, #0
 8014134:	f015 fca4 	bl	8029a80 <memset>
}
 8014138:	4628      	mov	r0, r5
 801413a:	bd38      	pop	{r3, r4, r5, pc}

0801413c <dev_description_handler>:
		}
	}
}


static void dev_description_handler(struct mg_connection *c, struct mg_http_message *hm){
 801413c:	b570      	push	{r4, r5, r6, lr}
 801413e:	b088      	sub	sp, #32
 8014140:	4605      	mov	r5, r0
 8014142:	460c      	mov	r4, r1
	logging(L_DEBUG, "Call dev_description_handler");
 8014144:	4917      	ldr	r1, [pc, #92]	@ (80141a4 <dev_description_handler+0x68>)
 8014146:	2000      	movs	r0, #0
 8014148:	f7fd fd9a 	bl	8011c80 <logging>
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 801414c:	ae06      	add	r6, sp, #24
 801414e:	4916      	ldr	r1, [pc, #88]	@ (80141a8 <dev_description_handler+0x6c>)
 8014150:	4630      	mov	r0, r6
 8014152:	f00d fa61 	bl	8021618 <mg_str_s>
 8014156:	2300      	movs	r3, #0
 8014158:	9300      	str	r3, [sp, #0]
 801415a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801415e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014162:	f00d fc0d 	bl	8021980 <mg_match>
 8014166:	b1a8      	cbz	r0, 8014194 <dev_description_handler+0x58>
		mg_http_reply(c, 200, "", device_description, ssdp_dev_name, ssdp_dev_manufacturer_name, ssdp_dev_model_name, ssdp_dev_ver, dev_id, ip_addr_str);
 8014168:	4b10      	ldr	r3, [pc, #64]	@ (80141ac <dev_description_handler+0x70>)
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	9305      	str	r3, [sp, #20]
 801416e:	4b10      	ldr	r3, [pc, #64]	@ (80141b0 <dev_description_handler+0x74>)
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	9304      	str	r3, [sp, #16]
 8014174:	4b0f      	ldr	r3, [pc, #60]	@ (80141b4 <dev_description_handler+0x78>)
 8014176:	9303      	str	r3, [sp, #12]
 8014178:	4b0f      	ldr	r3, [pc, #60]	@ (80141b8 <dev_description_handler+0x7c>)
 801417a:	9302      	str	r3, [sp, #8]
 801417c:	4b0f      	ldr	r3, [pc, #60]	@ (80141bc <dev_description_handler+0x80>)
 801417e:	9301      	str	r3, [sp, #4]
 8014180:	4b0f      	ldr	r3, [pc, #60]	@ (80141c0 <dev_description_handler+0x84>)
 8014182:	9300      	str	r3, [sp, #0]
 8014184:	4b0f      	ldr	r3, [pc, #60]	@ (80141c4 <dev_description_handler+0x88>)
 8014186:	4a10      	ldr	r2, [pc, #64]	@ (80141c8 <dev_description_handler+0x8c>)
 8014188:	21c8      	movs	r1, #200	@ 0xc8
 801418a:	4628      	mov	r0, r5
 801418c:	f00d f962 	bl	8021454 <mg_http_reply>
	}else{
		mg_http_reply(c, 400, "", //TODO delete for release,
								"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}

}
 8014190:	b008      	add	sp, #32
 8014192:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, "", //TODO delete for release,
 8014194:	4b0d      	ldr	r3, [pc, #52]	@ (80141cc <dev_description_handler+0x90>)
 8014196:	4a0c      	ldr	r2, [pc, #48]	@ (80141c8 <dev_description_handler+0x8c>)
 8014198:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801419c:	4628      	mov	r0, r5
 801419e:	f00d f959 	bl	8021454 <mg_http_reply>
}
 80141a2:	e7f5      	b.n	8014190 <dev_description_handler+0x54>
 80141a4:	08034888 	.word	0x08034888
 80141a8:	080337fc 	.word	0x080337fc
 80141ac:	20000a3c 	.word	0x20000a3c
 80141b0:	20000a44 	.word	0x20000a44
 80141b4:	0803447c 	.word	0x0803447c
 80141b8:	08034494 	.word	0x08034494
 80141bc:	08034484 	.word	0x08034484
 80141c0:	080344a8 	.word	0x080344a8
 80141c4:	08034b90 	.word	0x08034b90
 80141c8:	080337f8 	.word	0x080337f8
 80141cc:	08033c9c 	.word	0x08033c9c

080141d0 <dev_404_handler>:


static void dev_404_handler(struct mg_connection *c, struct mg_http_message *hm){
 80141d0:	b510      	push	{r4, lr}
 80141d2:	4604      	mov	r4, r0
	logging(L_DEBUG, "Call  dev_404_handler");
 80141d4:	4905      	ldr	r1, [pc, #20]	@ (80141ec <dev_404_handler+0x1c>)
 80141d6:	2000      	movs	r0, #0
 80141d8:	f7fd fd52 	bl	8011c80 <logging>
	mg_http_reply(c, 404, "", //TODO delete for release,
 80141dc:	4b04      	ldr	r3, [pc, #16]	@ (80141f0 <dev_404_handler+0x20>)
 80141de:	4a05      	ldr	r2, [pc, #20]	@ (80141f4 <dev_404_handler+0x24>)
 80141e0:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80141e4:	4620      	mov	r0, r4
 80141e6:	f00d f935 	bl	8021454 <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Not found\"}\r\n");

}
 80141ea:	bd10      	pop	{r4, pc}
 80141ec:	080348a8 	.word	0x080348a8
 80141f0:	080348c0 	.word	0x080348c0
 80141f4:	080337f8 	.word	0x080337f8

080141f8 <ssdp_web_handler>:

static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_HTTP_MSG) {
 80141f8:	290b      	cmp	r1, #11
 80141fa:	d000      	beq.n	80141fe <ssdp_web_handler+0x6>
 80141fc:	4770      	bx	lr
static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){
 80141fe:	b570      	push	{r4, r5, r6, lr}
 8014200:	b086      	sub	sp, #24
 8014202:	4605      	mov	r5, r0
 8014204:	4614      	mov	r4, r2
		logging(L_DEBUG, "Call ssdp_web_handler MG_EV_HTTP_MSG");
 8014206:	4917      	ldr	r1, [pc, #92]	@ (8014264 <ssdp_web_handler+0x6c>)
 8014208:	2000      	movs	r0, #0
 801420a:	f7fd fd39 	bl	8011c80 <logging>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;

		if (mg_match(hm->uri, mg_str("/device_description.xml"), NULL)) {
 801420e:	ae02      	add	r6, sp, #8
 8014210:	4915      	ldr	r1, [pc, #84]	@ (8014268 <ssdp_web_handler+0x70>)
 8014212:	4630      	mov	r0, r6
 8014214:	f00d fa00 	bl	8021618 <mg_str_s>
 8014218:	2300      	movs	r3, #0
 801421a:	9300      	str	r3, [sp, #0]
 801421c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014220:	f104 0108 	add.w	r1, r4, #8
 8014224:	c903      	ldmia	r1, {r0, r1}
 8014226:	f00d fbab 	bl	8021980 <mg_match>
 801422a:	b128      	cbz	r0, 8014238 <ssdp_web_handler+0x40>
			dev_description_handler(c, hm);
 801422c:	4621      	mov	r1, r4
 801422e:	4628      	mov	r0, r5
 8014230:	f7ff ff84 	bl	801413c <dev_description_handler>
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
			dev_404_handler(c, hm);
		}
	}
}
 8014234:	b006      	add	sp, #24
 8014236:	bd70      	pop	{r4, r5, r6, pc}
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
 8014238:	ae04      	add	r6, sp, #16
 801423a:	490c      	ldr	r1, [pc, #48]	@ (801426c <ssdp_web_handler+0x74>)
 801423c:	4630      	mov	r0, r6
 801423e:	f00d f9eb 	bl	8021618 <mg_str_s>
 8014242:	2300      	movs	r3, #0
 8014244:	9300      	str	r3, [sp, #0]
 8014246:	e896 000c 	ldmia.w	r6, {r2, r3}
 801424a:	f104 0108 	add.w	r1, r4, #8
 801424e:	c903      	ldmia	r1, {r0, r1}
 8014250:	f00d fb96 	bl	8021980 <mg_match>
 8014254:	2800      	cmp	r0, #0
 8014256:	d0ed      	beq.n	8014234 <ssdp_web_handler+0x3c>
			dev_404_handler(c, hm);
 8014258:	4621      	mov	r1, r4
 801425a:	4628      	mov	r0, r5
 801425c:	f7ff ffb8 	bl	80141d0 <dev_404_handler>
}
 8014260:	e7e8      	b.n	8014234 <ssdp_web_handler+0x3c>
 8014262:	bf00      	nop
 8014264:	080348ec 	.word	0x080348ec
 8014268:	08034914 	.word	0x08034914
 801426c:	0803492c 	.word	0x0803492c

08014270 <ip_to_string>:
void ip_to_string(uint32_t ip, char *buffer) {
 8014270:	b510      	push	{r4, lr}
 8014272:	b084      	sub	sp, #16
 8014274:	4602      	mov	r2, r0
 8014276:	4608      	mov	r0, r1
    bytes[3] = (ip >> 24) & 0xFF; // Старший байт
 8014278:	0e14      	lsrs	r4, r2, #24
 801427a:	f88d 400f 	strb.w	r4, [sp, #15]
    bytes[2] = (ip >> 16) & 0xFF;
 801427e:	0c11      	lsrs	r1, r2, #16
 8014280:	f88d 100e 	strb.w	r1, [sp, #14]
    bytes[1] = (ip >> 8) & 0xFF;
 8014284:	0a13      	lsrs	r3, r2, #8
 8014286:	f88d 300d 	strb.w	r3, [sp, #13]
    bytes[0] = ip & 0xFF;         // Младший байт
 801428a:	f88d 200c 	strb.w	r2, [sp, #12]
    sprintf(buffer, "%u.%u.%u.%u", bytes[0], bytes[1], bytes[2], bytes[3]);
 801428e:	9401      	str	r4, [sp, #4]
 8014290:	b2c9      	uxtb	r1, r1
 8014292:	9100      	str	r1, [sp, #0]
 8014294:	b2db      	uxtb	r3, r3
 8014296:	b2d2      	uxtb	r2, r2
 8014298:	4902      	ldr	r1, [pc, #8]	@ (80142a4 <ip_to_string+0x34>)
 801429a:	f015 f82f 	bl	80292fc <sprintf>
}
 801429e:	b004      	add	sp, #16
 80142a0:	bd10      	pop	{r4, pc}
 80142a2:	bf00      	nop
 80142a4:	08034930 	.word	0x08034930

080142a8 <send_ssdp_notify>:
static void send_ssdp_notify(void *param){
 80142a8:	b570      	push	{r4, r5, r6, lr}
 80142aa:	b084      	sub	sp, #16
 80142ac:	4606      	mov	r6, r0
	logging(L_DEBUG, "Call send_ssdp_notify");
 80142ae:	491e      	ldr	r1, [pc, #120]	@ (8014328 <send_ssdp_notify+0x80>)
 80142b0:	2000      	movs	r0, #0
 80142b2:	f7fd fce5 	bl	8011c80 <logging>
	size_t buff_len = (strlen(ssdp_notify_template) + strlen(MG_VERSION) + IP_v6_STR_LEN  + strlen(ssdp_web_port) + strlen(dev_id)+ 20); //20 just for spirit healthy, in rel +1 for \0 is needed
 80142b6:	4b1d      	ldr	r3, [pc, #116]	@ (801432c <send_ssdp_notify+0x84>)
 80142b8:	6818      	ldr	r0, [r3, #0]
 80142ba:	f7fb fff1 	bl	80102a0 <strlen>
 80142be:	4604      	mov	r4, r0
	buff = calloc(buff_len, sizeof(char));
 80142c0:	2101      	movs	r1, #1
 80142c2:	f200 1039 	addw	r0, r0, #313	@ 0x139
 80142c6:	f7ff ff2b 	bl	8014120 <my_calloc>
 80142ca:	4a19      	ldr	r2, [pc, #100]	@ (8014330 <send_ssdp_notify+0x88>)
 80142cc:	6010      	str	r0, [r2, #0]
	if (!buff) {
 80142ce:	b330      	cbz	r0, 801431e <send_ssdp_notify+0x76>
	ip_to_string(mif->ip, ip_addr_str);
 80142d0:	4b18      	ldr	r3, [pc, #96]	@ (8014334 <send_ssdp_notify+0x8c>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	4d18      	ldr	r5, [pc, #96]	@ (8014338 <send_ssdp_notify+0x90>)
 80142d6:	6829      	ldr	r1, [r5, #0]
 80142d8:	6898      	ldr	r0, [r3, #8]
 80142da:	f7ff ffc9 	bl	8014270 <ip_to_string>
	snprintf(buff, buff_len-1, ssdp_notify_template, MG_VERSION, ip_addr_str, ssdp_web_port, dev_id);
 80142de:	4b13      	ldr	r3, [pc, #76]	@ (801432c <send_ssdp_notify+0x84>)
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	9302      	str	r3, [sp, #8]
 80142e4:	4b15      	ldr	r3, [pc, #84]	@ (801433c <send_ssdp_notify+0x94>)
 80142e6:	9301      	str	r3, [sp, #4]
 80142e8:	682b      	ldr	r3, [r5, #0]
 80142ea:	9300      	str	r3, [sp, #0]
 80142ec:	4b14      	ldr	r3, [pc, #80]	@ (8014340 <send_ssdp_notify+0x98>)
 80142ee:	4a15      	ldr	r2, [pc, #84]	@ (8014344 <send_ssdp_notify+0x9c>)
 80142f0:	f504 719c 	add.w	r1, r4, #312	@ 0x138
 80142f4:	480e      	ldr	r0, [pc, #56]	@ (8014330 <send_ssdp_notify+0x88>)
 80142f6:	6800      	ldr	r0, [r0, #0]
 80142f8:	f014 fe98 	bl	802902c <snprintf>
    if (udp_conn != NULL) {
 80142fc:	b14e      	cbz	r6, 8014312 <send_ssdp_notify+0x6a>
        mg_send(udp_conn, buff, strlen(buff));
 80142fe:	4b0c      	ldr	r3, [pc, #48]	@ (8014330 <send_ssdp_notify+0x88>)
 8014300:	681c      	ldr	r4, [r3, #0]
 8014302:	4620      	mov	r0, r4
 8014304:	f7fb ffcc 	bl	80102a0 <strlen>
 8014308:	4602      	mov	r2, r0
 801430a:	4621      	mov	r1, r4
 801430c:	4630      	mov	r0, r6
 801430e:	f010 f86f 	bl	80243f0 <mg_send>
    free(buff);
 8014312:	4b07      	ldr	r3, [pc, #28]	@ (8014330 <send_ssdp_notify+0x88>)
 8014314:	6818      	ldr	r0, [r3, #0]
 8014316:	f004 ff31 	bl	801917c <vPortFree>
}
 801431a:	b004      	add	sp, #16
 801431c:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Error allocating memory for send SSDP Message");
 801431e:	490a      	ldr	r1, [pc, #40]	@ (8014348 <send_ssdp_notify+0xa0>)
 8014320:	2003      	movs	r0, #3
 8014322:	f7fd fcad 	bl	8011c80 <logging>
		return; //TODO add log
 8014326:	e7f8      	b.n	801431a <send_ssdp_notify+0x72>
 8014328:	0803493c 	.word	0x0803493c
 801432c:	20000a44 	.word	0x20000a44
 8014330:	20000a40 	.word	0x20000a40
 8014334:	20000a34 	.word	0x20000a34
 8014338:	20000a3c 	.word	0x20000a3c
 801433c:	0803498c 	.word	0x0803498c
 8014340:	08034984 	.word	0x08034984
 8014344:	08034a98 	.word	0x08034a98
 8014348:	08034954 	.word	0x08034954

0801434c <ssdp_listener_handler>:
}

static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
	//char *buffer = NULL;

	if (ev == MG_EV_READ) {
 801434c:	2907      	cmp	r1, #7
 801434e:	d000      	beq.n	8014352 <ssdp_listener_handler+0x6>
 8014350:	4770      	bx	lr
static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
 8014352:	b570      	push	{r4, r5, r6, lr}
 8014354:	b088      	sub	sp, #32
 8014356:	4604      	mov	r4, r0
		logging(L_DEBUG, "Call ssdp_listener_handler if (ev == MG_EV_READ)");
 8014358:	491a      	ldr	r1, [pc, #104]	@ (80143c4 <ssdp_listener_handler+0x78>)
 801435a:	2000      	movs	r0, #0
 801435c:	f7fd fc90 	bl	8011c80 <logging>
		struct mg_str msg = mg_str_n((char *) udp_listen_conn->recv.buf, udp_listen_conn->recv.len);
 8014360:	4b19      	ldr	r3, [pc, #100]	@ (80143c8 <ssdp_listener_handler+0x7c>)
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	ad02      	add	r5, sp, #8
 8014366:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014368:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801436a:	4628      	mov	r0, r5
 801436c:	f00d f960 	bl	8021630 <mg_str_n>
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8014370:	ae04      	add	r6, sp, #16
 8014372:	4916      	ldr	r1, [pc, #88]	@ (80143cc <ssdp_listener_handler+0x80>)
 8014374:	4630      	mov	r0, r6
 8014376:	f00d f94f 	bl	8021618 <mg_str_s>
 801437a:	2300      	movs	r3, #0
 801437c:	9300      	str	r3, [sp, #0]
 801437e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014382:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014386:	f00d fafb 	bl	8021980 <mg_match>
 801438a:	b918      	cbnz	r0, 8014394 <ssdp_listener_handler+0x48>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
			send_ssdp_notify(udp_listen_conn);
		}
		c->recv.len = 0;
 801438c:	2300      	movs	r3, #0
 801438e:	6423      	str	r3, [r4, #64]	@ 0x40
	}
}
 8014390:	b008      	add	sp, #32
 8014392:	bd70      	pop	{r4, r5, r6, pc}
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8014394:	ad06      	add	r5, sp, #24
 8014396:	490e      	ldr	r1, [pc, #56]	@ (80143d0 <ssdp_listener_handler+0x84>)
 8014398:	4628      	mov	r0, r5
 801439a:	f00d f93d 	bl	8021618 <mg_str_s>
 801439e:	2300      	movs	r3, #0
 80143a0:	9300      	str	r3, [sp, #0]
 80143a2:	e895 000c 	ldmia.w	r5, {r2, r3}
 80143a6:	a902      	add	r1, sp, #8
 80143a8:	c903      	ldmia	r1, {r0, r1}
 80143aa:	f00d fae9 	bl	8021980 <mg_match>
 80143ae:	2800      	cmp	r0, #0
 80143b0:	d0ec      	beq.n	801438c <ssdp_listener_handler+0x40>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
 80143b2:	4908      	ldr	r1, [pc, #32]	@ (80143d4 <ssdp_listener_handler+0x88>)
 80143b4:	2000      	movs	r0, #0
 80143b6:	f7fd fc63 	bl	8011c80 <logging>
			send_ssdp_notify(udp_listen_conn);
 80143ba:	4b03      	ldr	r3, [pc, #12]	@ (80143c8 <ssdp_listener_handler+0x7c>)
 80143bc:	6818      	ldr	r0, [r3, #0]
 80143be:	f7ff ff73 	bl	80142a8 <send_ssdp_notify>
 80143c2:	e7e3      	b.n	801438c <ssdp_listener_handler+0x40>
 80143c4:	08034994 	.word	0x08034994
 80143c8:	20000a30 	.word	0x20000a30
 80143cc:	080349c8 	.word	0x080349c8
 80143d0:	080349d4 	.word	0x080349d4
 80143d4:	080349e4 	.word	0x080349e4

080143d8 <ssdp_timer_handler>:
static void ssdp_timer_handler(void *param){
 80143d8:	b510      	push	{r4, lr}
	logging(L_DEBUG, "Call ssdp_timer_handler");
 80143da:	490c      	ldr	r1, [pc, #48]	@ (801440c <ssdp_timer_handler+0x34>)
 80143dc:	2000      	movs	r0, #0
 80143de:	f7fd fc4f 	bl	8011c80 <logging>
	struct mg_connection *conn = mg_connect(mgr, ssdp_addr, NULL, NULL);
 80143e2:	2300      	movs	r3, #0
 80143e4:	461a      	mov	r2, r3
 80143e6:	490a      	ldr	r1, [pc, #40]	@ (8014410 <ssdp_timer_handler+0x38>)
 80143e8:	480a      	ldr	r0, [pc, #40]	@ (8014414 <ssdp_timer_handler+0x3c>)
 80143ea:	6800      	ldr	r0, [r0, #0]
 80143ec:	f011 fcd4 	bl	8025d98 <mg_connect>
	if (conn == NULL){
 80143f0:	b130      	cbz	r0, 8014400 <ssdp_timer_handler+0x28>
 80143f2:	4604      	mov	r4, r0
	send_ssdp_notify(conn);
 80143f4:	f7ff ff58 	bl	80142a8 <send_ssdp_notify>
	mg_close_conn(conn);
 80143f8:	4620      	mov	r0, r4
 80143fa:	f00f feb7 	bl	802416c <mg_close_conn>
}
 80143fe:	bd10      	pop	{r4, pc}
		logging(L_ERR, "Call ssdp_timer_handler error open conn");
 8014400:	4905      	ldr	r1, [pc, #20]	@ (8014418 <ssdp_timer_handler+0x40>)
 8014402:	2003      	movs	r0, #3
 8014404:	f7fd fc3c 	bl	8011c80 <logging>
		return ;
 8014408:	e7f9      	b.n	80143fe <ssdp_timer_handler+0x26>
 801440a:	bf00      	nop
 801440c:	08034a14 	.word	0x08034a14
 8014410:	08034d34 	.word	0x08034d34
 8014414:	20000a38 	.word	0x20000a38
 8014418:	08034a2c 	.word	0x08034a2c

0801441c <ssdp_set_id>:
void ssdp_set_id(const uint8_t* id, uint8_t id_len){
 801441c:	b570      	push	{r4, r5, r6, lr}
 801441e:	4606      	mov	r6, r0
 8014420:	460d      	mov	r5, r1
	logging(L_DEBUG, "Call ssdp_set_id");
 8014422:	4910      	ldr	r1, [pc, #64]	@ (8014464 <ssdp_set_id+0x48>)
 8014424:	2000      	movs	r0, #0
 8014426:	f7fd fc2b 	bl	8011c80 <logging>
	if (id && (id_len > 0)){
 801442a:	b1d6      	cbz	r6, 8014462 <ssdp_set_id+0x46>
 801442c:	b1cd      	cbz	r5, 8014462 <ssdp_set_id+0x46>
		if(dev_id) free(dev_id);
 801442e:	4b0e      	ldr	r3, [pc, #56]	@ (8014468 <ssdp_set_id+0x4c>)
 8014430:	6818      	ldr	r0, [r3, #0]
 8014432:	b108      	cbz	r0, 8014438 <ssdp_set_id+0x1c>
 8014434:	f004 fea2 	bl	801917c <vPortFree>
		dev_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8014438:	0068      	lsls	r0, r5, #1
 801443a:	2101      	movs	r1, #1
 801443c:	4408      	add	r0, r1
 801443e:	f7ff fe6f 	bl	8014120 <my_calloc>
 8014442:	4b09      	ldr	r3, [pc, #36]	@ (8014468 <ssdp_set_id+0x4c>)
 8014444:	6018      	str	r0, [r3, #0]
		if (dev_id ){
 8014446:	b160      	cbz	r0, 8014462 <ssdp_set_id+0x46>
	        for (unsigned int i = 0; i < id_len; i++) {
 8014448:	2400      	movs	r4, #0
 801444a:	e008      	b.n	801445e <ssdp_set_id+0x42>
	            sprintf(&dev_id[i * 2], "%02X", id[i]);
 801444c:	4b06      	ldr	r3, [pc, #24]	@ (8014468 <ssdp_set_id+0x4c>)
 801444e:	6818      	ldr	r0, [r3, #0]
 8014450:	5d32      	ldrb	r2, [r6, r4]
 8014452:	4906      	ldr	r1, [pc, #24]	@ (801446c <ssdp_set_id+0x50>)
 8014454:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8014458:	f014 ff50 	bl	80292fc <sprintf>
	        for (unsigned int i = 0; i < id_len; i++) {
 801445c:	3401      	adds	r4, #1
 801445e:	42a5      	cmp	r5, r4
 8014460:	d8f4      	bhi.n	801444c <ssdp_set_id+0x30>
}
 8014462:	bd70      	pop	{r4, r5, r6, pc}
 8014464:	08034a54 	.word	0x08034a54
 8014468:	20000a44 	.word	0x20000a44
 801446c:	080343e0 	.word	0x080343e0

08014470 <ssdp_start_server>:

void ssdp_start_server(void * param_mgr, void * param_mif){
 8014470:	b530      	push	{r4, r5, lr}
 8014472:	b085      	sub	sp, #20
	mgr 		= (struct mg_mgr *)param_mgr;
 8014474:	4b18      	ldr	r3, [pc, #96]	@ (80144d8 <ssdp_start_server+0x68>)
 8014476:	6018      	str	r0, [r3, #0]
	mif			= (struct mg_tcpip_if *)param_mif;
 8014478:	4b18      	ldr	r3, [pc, #96]	@ (80144dc <ssdp_start_server+0x6c>)
 801447a:	6019      	str	r1, [r3, #0]
	ip_addr_str = (char *) calloc(IP_v6_STR_LEN, sizeof(char));
 801447c:	2101      	movs	r1, #1
 801447e:	2028      	movs	r0, #40	@ 0x28
 8014480:	f7ff fe4e 	bl	8014120 <my_calloc>
 8014484:	4b16      	ldr	r3, [pc, #88]	@ (80144e0 <ssdp_start_server+0x70>)
 8014486:	6018      	str	r0, [r3, #0]
	if (!ip_addr_str) return; //TODO add logging
 8014488:	b318      	cbz	r0, 80144d2 <ssdp_start_server+0x62>

	ssdp_set_id(mif->mac, mac_len);
 801448a:	4d14      	ldr	r5, [pc, #80]	@ (80144dc <ssdp_start_server+0x6c>)
 801448c:	2106      	movs	r1, #6
 801448e:	6828      	ldr	r0, [r5, #0]
 8014490:	f7ff ffc4 	bl	801441c <ssdp_set_id>

	logging(L_INFO, "Starting SSDP service");
 8014494:	4913      	ldr	r1, [pc, #76]	@ (80144e4 <ssdp_start_server+0x74>)
 8014496:	2001      	movs	r0, #1
 8014498:	f7fd fbf2 	bl	8011c80 <logging>
	mg_timer_add(mgr, 60000, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, ssdp_timer_handler, NULL);
 801449c:	4c0e      	ldr	r4, [pc, #56]	@ (80144d8 <ssdp_start_server+0x68>)
 801449e:	2300      	movs	r3, #0
 80144a0:	9302      	str	r3, [sp, #8]
 80144a2:	4b11      	ldr	r3, [pc, #68]	@ (80144e8 <ssdp_start_server+0x78>)
 80144a4:	9301      	str	r3, [sp, #4]
 80144a6:	2303      	movs	r3, #3
 80144a8:	9300      	str	r3, [sp, #0]
 80144aa:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80144ae:	2300      	movs	r3, #0
 80144b0:	6820      	ldr	r0, [r4, #0]
 80144b2:	f00e f993 	bl	80227dc <mg_timer_add>
	mg_http_listen(mgr, "http://0.0.0.0:40000", ssdp_web_handler, mif);
 80144b6:	682b      	ldr	r3, [r5, #0]
 80144b8:	4a0c      	ldr	r2, [pc, #48]	@ (80144ec <ssdp_start_server+0x7c>)
 80144ba:	490d      	ldr	r1, [pc, #52]	@ (80144f0 <ssdp_start_server+0x80>)
 80144bc:	6820      	ldr	r0, [r4, #0]
 80144be:	f00f ff2f 	bl	8024320 <mg_http_listen>
	udp_listen_conn = mg_listen(mgr, ssdp_addr, ssdp_listener_handler, mif);
 80144c2:	682b      	ldr	r3, [r5, #0]
 80144c4:	4a0b      	ldr	r2, [pc, #44]	@ (80144f4 <ssdp_start_server+0x84>)
 80144c6:	490c      	ldr	r1, [pc, #48]	@ (80144f8 <ssdp_start_server+0x88>)
 80144c8:	6820      	ldr	r0, [r4, #0]
 80144ca:	f00f fea5 	bl	8024218 <mg_listen>
 80144ce:	4b0b      	ldr	r3, [pc, #44]	@ (80144fc <ssdp_start_server+0x8c>)
 80144d0:	6018      	str	r0, [r3, #0]
}
 80144d2:	b005      	add	sp, #20
 80144d4:	bd30      	pop	{r4, r5, pc}
 80144d6:	bf00      	nop
 80144d8:	20000a38 	.word	0x20000a38
 80144dc:	20000a34 	.word	0x20000a34
 80144e0:	20000a3c 	.word	0x20000a3c
 80144e4:	08034a68 	.word	0x08034a68
 80144e8:	080143d9 	.word	0x080143d9
 80144ec:	080141f9 	.word	0x080141f9
 80144f0:	08034a80 	.word	0x08034a80
 80144f4:	0801434d 	.word	0x0801434d
 80144f8:	08034d34 	.word	0x08034d34
 80144fc:	20000a30 	.word	0x20000a30

08014500 <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 8014500:	4770      	bx	lr
	...

08014504 <sFLASH_SPI_ReadBuffer>:
	flash_conf.receive_buffer(&byte, 1);
	return byte;
}


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 8014504:	b508      	push	{r3, lr}
	flash_conf.receive_buffer(buffer, size);
 8014506:	4b02      	ldr	r3, [pc, #8]	@ (8014510 <sFLASH_SPI_ReadBuffer+0xc>)
 8014508:	685b      	ldr	r3, [r3, #4]
 801450a:	4798      	blx	r3
}
 801450c:	bd08      	pop	{r3, pc}
 801450e:	bf00      	nop
 8014510:	20000a88 	.word	0x20000a88

08014514 <SPI_flash_reg_cb>:
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 8014514:	b410      	push	{r4}
	if (chip_select){
 8014516:	b158      	cbz	r0, 8014530 <SPI_flash_reg_cb+0x1c>
 8014518:	4604      	mov	r4, r0
		flash_conf.select_chip		= chip_select;
 801451a:	4809      	ldr	r0, [pc, #36]	@ (8014540 <SPI_flash_reg_cb+0x2c>)
 801451c:	60c4      	str	r4, [r0, #12]
	if (chip_deselect){
 801451e:	b159      	cbz	r1, 8014538 <SPI_flash_reg_cb+0x24>
		flash_conf.deselect_chip	= chip_deselect;
 8014520:	4807      	ldr	r0, [pc, #28]	@ (8014540 <SPI_flash_reg_cb+0x2c>)
 8014522:	6101      	str	r1, [r0, #16]
	flash_conf.receive_buffer	= receive_buffer;
 8014524:	4906      	ldr	r1, [pc, #24]	@ (8014540 <SPI_flash_reg_cb+0x2c>)
 8014526:	604a      	str	r2, [r1, #4]
	flash_conf.send_byte		= send_byte;
 8014528:	608b      	str	r3, [r1, #8]
}
 801452a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801452e:	4770      	bx	lr
		flash_conf.select_chip		= function_prototype;
 8014530:	4803      	ldr	r0, [pc, #12]	@ (8014540 <SPI_flash_reg_cb+0x2c>)
 8014532:	4c04      	ldr	r4, [pc, #16]	@ (8014544 <SPI_flash_reg_cb+0x30>)
 8014534:	60c4      	str	r4, [r0, #12]
 8014536:	e7f2      	b.n	801451e <SPI_flash_reg_cb+0xa>
		flash_conf.deselect_chip	= function_prototype;
 8014538:	4901      	ldr	r1, [pc, #4]	@ (8014540 <SPI_flash_reg_cb+0x2c>)
 801453a:	4802      	ldr	r0, [pc, #8]	@ (8014544 <SPI_flash_reg_cb+0x30>)
 801453c:	6108      	str	r0, [r1, #16]
 801453e:	e7f1      	b.n	8014524 <SPI_flash_reg_cb+0x10>
 8014540:	20000a88 	.word	0x20000a88
 8014544:	08014501 	.word	0x08014501

08014548 <sFLASH_CS_LOW>:
void sFLASH_CS_LOW(void){ //select chip
 8014548:	b508      	push	{r3, lr}
	flash_conf.select_chip();
 801454a:	4b02      	ldr	r3, [pc, #8]	@ (8014554 <sFLASH_CS_LOW+0xc>)
 801454c:	68db      	ldr	r3, [r3, #12]
 801454e:	4798      	blx	r3
}
 8014550:	bd08      	pop	{r3, pc}
 8014552:	bf00      	nop
 8014554:	20000a88 	.word	0x20000a88

08014558 <sFLASH_CS_HIGH>:
void sFLASH_CS_HIGH(void){ //deselect chip
 8014558:	b508      	push	{r3, lr}
	flash_conf.deselect_chip();
 801455a:	4b02      	ldr	r3, [pc, #8]	@ (8014564 <sFLASH_CS_HIGH+0xc>)
 801455c:	691b      	ldr	r3, [r3, #16]
 801455e:	4798      	blx	r3
}
 8014560:	bd08      	pop	{r3, pc}
 8014562:	bf00      	nop
 8014564:	20000a88 	.word	0x20000a88

08014568 <sFLASH_ReadByte>:
{
 8014568:	b500      	push	{lr}
 801456a:	b083      	sub	sp, #12
	flash_conf.receive_buffer(&byte, 1);
 801456c:	4b05      	ldr	r3, [pc, #20]	@ (8014584 <sFLASH_ReadByte+0x1c>)
 801456e:	685b      	ldr	r3, [r3, #4]
 8014570:	2101      	movs	r1, #1
 8014572:	f10d 0007 	add.w	r0, sp, #7
 8014576:	4798      	blx	r3
}
 8014578:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801457c:	b003      	add	sp, #12
 801457e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014582:	bf00      	nop
 8014584:	20000a88 	.word	0x20000a88

08014588 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8014588:	b508      	push	{r3, lr}
	flash_conf.send_byte(byte);
 801458a:	4b02      	ldr	r3, [pc, #8]	@ (8014594 <sFLASH_SendByte+0xc>)
 801458c:	689b      	ldr	r3, [r3, #8]
 801458e:	4798      	blx	r3
}
 8014590:	bd08      	pop	{r3, pc}
 8014592:	bf00      	nop
 8014594:	20000a88 	.word	0x20000a88

08014598 <sFLASH_Reset>:
void sFLASH_Reset(void){
 8014598:	b508      	push	{r3, lr}
    sFLASH_CS_LOW();
 801459a:	f7ff ffd5 	bl	8014548 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 801459e:	2066      	movs	r0, #102	@ 0x66
 80145a0:	f7ff fff2 	bl	8014588 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 80145a4:	2099      	movs	r0, #153	@ 0x99
 80145a6:	f7ff ffef 	bl	8014588 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 80145aa:	f7ff ffd5 	bl	8014558 <sFLASH_CS_HIGH>
}
 80145ae:	bd08      	pop	{r3, pc}

080145b0 <sFLASH_Init>:
void sFLASH_Init(void){
 80145b0:	b508      	push	{r3, lr}
    HAL_Delay(100);
 80145b2:	2064      	movs	r0, #100	@ 0x64
 80145b4:	f000 fa16 	bl	80149e4 <HAL_Delay>
    sFLASH_Reset();
 80145b8:	f7ff ffee 	bl	8014598 <sFLASH_Reset>
    HAL_Delay(100);
 80145bc:	2064      	movs	r0, #100	@ 0x64
 80145be:	f000 fa11 	bl	80149e4 <HAL_Delay>
    HAL_Delay(100);
 80145c2:	2064      	movs	r0, #100	@ 0x64
 80145c4:	f000 fa0e 	bl	80149e4 <HAL_Delay>
}
 80145c8:	bd08      	pop	{r3, pc}

080145ca <sFLASH_ReadBuffer>:
{
 80145ca:	b570      	push	{r4, r5, r6, lr}
 80145cc:	4606      	mov	r6, r0
 80145ce:	460c      	mov	r4, r1
 80145d0:	4615      	mov	r5, r2
  sFLASH_CS_LOW();
 80145d2:	f7ff ffb9 	bl	8014548 <sFLASH_CS_LOW>
  if (NumByteToRead > 16){
 80145d6:	2d10      	cmp	r5, #16
 80145d8:	d917      	bls.n	801460a <sFLASH_ReadBuffer+0x40>
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 80145da:	200b      	movs	r0, #11
 80145dc:	f7ff ffd4 	bl	8014588 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 80145e0:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80145e4:	f7ff ffd0 	bl	8014588 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 80145e8:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80145ec:	f7ff ffcc 	bl	8014588 <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 80145f0:	b2e0      	uxtb	r0, r4
 80145f2:	f7ff ffc9 	bl	8014588 <sFLASH_SendByte>
	  sFLASH_SendByte(0x00);
 80145f6:	2000      	movs	r0, #0
 80145f8:	f7ff ffc6 	bl	8014588 <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 80145fc:	4629      	mov	r1, r5
 80145fe:	4630      	mov	r0, r6
 8014600:	f7ff ff80 	bl	8014504 <sFLASH_SPI_ReadBuffer>
  sFLASH_CS_HIGH();
 8014604:	f7ff ffa8 	bl	8014558 <sFLASH_CS_HIGH>
}
 8014608:	bd70      	pop	{r4, r5, r6, pc}
	  sFLASH_SendByte(sFLASH_CMD_READ);
 801460a:	2003      	movs	r0, #3
 801460c:	f7ff ffbc 	bl	8014588 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8014610:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8014614:	f7ff ffb8 	bl	8014588 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8014618:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801461c:	f7ff ffb4 	bl	8014588 <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8014620:	b2e0      	uxtb	r0, r4
 8014622:	f7ff ffb1 	bl	8014588 <sFLASH_SendByte>
	  while (NumByteToRead--) /*!< while there is data to be read */
 8014626:	e004      	b.n	8014632 <sFLASH_ReadBuffer+0x68>
		  *pBuffer = sFLASH_ReadByte();
 8014628:	f7ff ff9e 	bl	8014568 <sFLASH_ReadByte>
 801462c:	f806 0b01 	strb.w	r0, [r6], #1
	  while (NumByteToRead--) /*!< while there is data to be read */
 8014630:	4625      	mov	r5, r4
 8014632:	1e6b      	subs	r3, r5, #1
 8014634:	b29c      	uxth	r4, r3
 8014636:	2d00      	cmp	r5, #0
 8014638:	d1f6      	bne.n	8014628 <sFLASH_ReadBuffer+0x5e>
 801463a:	e7e3      	b.n	8014604 <sFLASH_ReadBuffer+0x3a>

0801463c <sFLASH_ReadID>:
{
 801463c:	b570      	push	{r4, r5, r6, lr}
  sFLASH_CS_LOW();
 801463e:	f7ff ff83 	bl	8014548 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8014642:	f7ff ff89 	bl	8014558 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8014646:	f7ff ff7f 	bl	8014548 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 801464a:	f7ff ff85 	bl	8014558 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 801464e:	f7ff ff7b 	bl	8014548 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_RDID);
 8014652:	209f      	movs	r0, #159	@ 0x9f
 8014654:	f7ff ff98 	bl	8014588 <sFLASH_SendByte>
  Temp0 = sFLASH_ReadByte();
 8014658:	f7ff ff86 	bl	8014568 <sFLASH_ReadByte>
 801465c:	4606      	mov	r6, r0
  Temp1 = sFLASH_ReadByte();
 801465e:	f7ff ff83 	bl	8014568 <sFLASH_ReadByte>
 8014662:	4604      	mov	r4, r0
  Temp2 = sFLASH_ReadByte();
 8014664:	f7ff ff80 	bl	8014568 <sFLASH_ReadByte>
 8014668:	4605      	mov	r5, r0
  sFLASH_CS_HIGH();
 801466a:	f7ff ff75 	bl	8014558 <sFLASH_CS_HIGH>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 801466e:	0224      	lsls	r4, r4, #8
 8014670:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
}
 8014674:	ea44 0005 	orr.w	r0, r4, r5
 8014678:	bd70      	pop	{r4, r5, r6, pc}
	...

0801467c <sFLASH_GetInfo>:
struct SPI_flash_info sFLASH_GetInfo(void){
 801467c:	b538      	push	{r3, r4, r5, lr}
 801467e:	4605      	mov	r5, r0
	sFLASH_Init();
 8014680:	f7ff ff96 	bl	80145b0 <sFLASH_Init>
	flash_id = sFLASH_ReadID();
 8014684:	f7ff ffda 	bl	801463c <sFLASH_ReadID>
	switch (flash_id) {
 8014688:	4b52      	ldr	r3, [pc, #328]	@ (80147d4 <sFLASH_GetInfo+0x158>)
 801468a:	4298      	cmp	r0, r3
 801468c:	f000 8085 	beq.w	801479a <sFLASH_GetInfo+0x11e>
 8014690:	f0c0 809c 	bcc.w	80147cc <sFLASH_GetInfo+0x150>
 8014694:	4b50      	ldr	r3, [pc, #320]	@ (80147d8 <sFLASH_GetInfo+0x15c>)
 8014696:	4298      	cmp	r0, r3
 8014698:	f200 8098 	bhi.w	80147cc <sFLASH_GetInfo+0x150>
 801469c:	3b03      	subs	r3, #3
 801469e:	4298      	cmp	r0, r3
 80146a0:	f0c0 8094 	bcc.w	80147cc <sFLASH_GetInfo+0x150>
 80146a4:	4b4d      	ldr	r3, [pc, #308]	@ (80147dc <sFLASH_GetInfo+0x160>)
 80146a6:	4403      	add	r3, r0
 80146a8:	2b03      	cmp	r3, #3
 80146aa:	f200 808f 	bhi.w	80147cc <sFLASH_GetInfo+0x150>
 80146ae:	e8df f003 	tbb	[pc, r3]
 80146b2:	2b02      	.short	0x2b02
 80146b4:	5d44      	.short	0x5d44
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 80146b6:	4c4a      	ldr	r4, [pc, #296]	@ (80147e0 <sFLASH_GetInfo+0x164>)
 80146b8:	4b4a      	ldr	r3, [pc, #296]	@ (80147e4 <sFLASH_GetInfo+0x168>)
 80146ba:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 80146bc:	2301      	movs	r3, #1
 80146be:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 80146c0:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 80146c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80146c6:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 80146c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80146cc:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 512;
 80146ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80146d2:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q16", sizeof(flash_info.model_name) - 1);
 80146d4:	2231      	movs	r2, #49	@ 0x31
 80146d6:	4944      	ldr	r1, [pc, #272]	@ (80147e8 <sFLASH_GetInfo+0x16c>)
 80146d8:	f104 000e 	add.w	r0, r4, #14
 80146dc:	f015 fa17 	bl	8029b0e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 80146e0:	2300      	movs	r3, #0
 80146e2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
	return flash_info;
 80146e6:	46ac      	mov	ip, r5
 80146e8:	4c3d      	ldr	r4, [pc, #244]	@ (80147e0 <sFLASH_GetInfo+0x164>)
 80146ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014700:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 8014704:	4628      	mov	r0, r5
 8014706:	bd38      	pop	{r3, r4, r5, pc}
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 8014708:	4c35      	ldr	r4, [pc, #212]	@ (80147e0 <sFLASH_GetInfo+0x164>)
 801470a:	4b38      	ldr	r3, [pc, #224]	@ (80147ec <sFLASH_GetInfo+0x170>)
 801470c:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 801470e:	2301      	movs	r3, #1
 8014710:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8014712:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8014714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014718:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 801471a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801471e:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 8014720:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014724:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q32", sizeof(flash_info.model_name) - 1);
 8014726:	2231      	movs	r2, #49	@ 0x31
 8014728:	4931      	ldr	r1, [pc, #196]	@ (80147f0 <sFLASH_GetInfo+0x174>)
 801472a:	f104 000e 	add.w	r0, r4, #14
 801472e:	f015 f9ee 	bl	8029b0e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8014732:	2300      	movs	r3, #0
 8014734:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8014738:	e7d5      	b.n	80146e6 <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 801473a:	4c29      	ldr	r4, [pc, #164]	@ (80147e0 <sFLASH_GetInfo+0x164>)
 801473c:	4b2d      	ldr	r3, [pc, #180]	@ (80147f4 <sFLASH_GetInfo+0x178>)
 801473e:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8014740:	2301      	movs	r3, #1
 8014742:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8014744:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8014746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801474a:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 801474c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014750:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 2048;
 8014752:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014756:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q64", sizeof(flash_info.model_name) - 1);
 8014758:	2231      	movs	r2, #49	@ 0x31
 801475a:	4927      	ldr	r1, [pc, #156]	@ (80147f8 <sFLASH_GetInfo+0x17c>)
 801475c:	f104 000e 	add.w	r0, r4, #14
 8014760:	f015 f9d5 	bl	8029b0e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8014764:	2300      	movs	r3, #0
 8014766:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 801476a:	e7bc      	b.n	80146e6 <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 801476c:	4c1c      	ldr	r4, [pc, #112]	@ (80147e0 <sFLASH_GetInfo+0x164>)
 801476e:	4b1a      	ldr	r3, [pc, #104]	@ (80147d8 <sFLASH_GetInfo+0x15c>)
 8014770:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8014772:	2301      	movs	r3, #1
 8014774:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8014776:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8014778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801477c:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 801477e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014782:	8162      	strh	r2, [r4, #10]
			flash_info.block_count = 4096;
 8014784:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q128", sizeof(flash_info.model_name) - 1);
 8014786:	2231      	movs	r2, #49	@ 0x31
 8014788:	491c      	ldr	r1, [pc, #112]	@ (80147fc <sFLASH_GetInfo+0x180>)
 801478a:	f104 000e 	add.w	r0, r4, #14
 801478e:	f015 f9be 	bl	8029b0e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8014792:	2300      	movs	r3, #0
 8014794:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8014798:	e7a5      	b.n	80146e6 <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 801479a:	4c11      	ldr	r4, [pc, #68]	@ (80147e0 <sFLASH_GetInfo+0x164>)
 801479c:	4b0d      	ldr	r3, [pc, #52]	@ (80147d4 <sFLASH_GetInfo+0x158>)
 801479e:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 80147a0:	2301      	movs	r3, #1
 80147a2:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 80147a4:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 80147a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80147aa:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 80147ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80147b0:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 80147b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80147b6:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "MX25L32", sizeof(flash_info.model_name) - 1);
 80147b8:	2231      	movs	r2, #49	@ 0x31
 80147ba:	4911      	ldr	r1, [pc, #68]	@ (8014800 <sFLASH_GetInfo+0x184>)
 80147bc:	f104 000e 	add.w	r0, r4, #14
 80147c0:	f015 f9a5 	bl	8029b0e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 80147c4:	2300      	movs	r3, #0
 80147c6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 80147ca:	e78c      	b.n	80146e6 <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 80147cc:	4b04      	ldr	r3, [pc, #16]	@ (80147e0 <sFLASH_GetInfo+0x164>)
 80147ce:	2200      	movs	r2, #0
 80147d0:	601a      	str	r2, [r3, #0]
			break;
 80147d2:	e788      	b.n	80146e6 <sFLASH_GetInfo+0x6a>
 80147d4:	00c22016 	.word	0x00c22016
 80147d8:	00ef4018 	.word	0x00ef4018
 80147dc:	ff10bfeb 	.word	0xff10bfeb
 80147e0:	20000a48 	.word	0x20000a48
 80147e4:	00ef4015 	.word	0x00ef4015
 80147e8:	08034d50 	.word	0x08034d50
 80147ec:	00ef4016 	.word	0x00ef4016
 80147f0:	08034d58 	.word	0x08034d58
 80147f4:	00ef4017 	.word	0x00ef4017
 80147f8:	08034d60 	.word	0x08034d60
 80147fc:	08034d68 	.word	0x08034d68
 8014800:	08034d70 	.word	0x08034d70

08014804 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8014804:	b508      	push	{r3, lr}
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8014806:	f7ff fe9f 	bl	8014548 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 801480a:	2006      	movs	r0, #6
 801480c:	f7ff febc 	bl	8014588 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8014810:	f7ff fea2 	bl	8014558 <sFLASH_CS_HIGH>
}
 8014814:	bd08      	pop	{r3, pc}
	...

08014818 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 8014818:	b538      	push	{r3, r4, r5, lr}
  uint8_t flashstatus = 0;

  int32_t timeout = 100000;
 801481a:	4d09      	ldr	r5, [pc, #36]	@ (8014840 <sFLASH_WaitForWriteEnd+0x28>)
  //(sFLASH_CMD_RDSR);

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  sFLASH_CS_LOW();
 801481c:	f7ff fe94 	bl	8014548 <sFLASH_CS_LOW>
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8014820:	2005      	movs	r0, #5
 8014822:	f7ff feb1 	bl	8014588 <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 8014826:	f7ff fe9f 	bl	8014568 <sFLASH_ReadByte>
 801482a:	4604      	mov	r4, r0

	  sFLASH_CS_HIGH();
 801482c:	f7ff fe94 	bl	8014558 <sFLASH_CS_HIGH>

	  /*!< Decrement timeout to avoid infinite loop */
	  if (timeout-- == 0)
 8014830:	462b      	mov	r3, r5
 8014832:	3d01      	subs	r5, #1
 8014834:	b113      	cbz	r3, 801483c <sFLASH_WaitForWriteEnd+0x24>
		  //printf("Timeout waiting for Write End\n"); Logging
		  return; //Exit if timeout
	  }

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8014836:	f014 0f01 	tst.w	r4, #1
 801483a:	d1ef      	bne.n	801481c <sFLASH_WaitForWriteEnd+0x4>

  /*!< Deselect the FLASH: Chip Select high */
  //sFLASH_CS_HIGH();
}
 801483c:	bd38      	pop	{r3, r4, r5, pc}
 801483e:	bf00      	nop
 8014840:	000186a0 	.word	0x000186a0

08014844 <sFLASH_EraseSector>:
{
 8014844:	b510      	push	{r4, lr}
 8014846:	4604      	mov	r4, r0
  sFLASH_WriteEnable();
 8014848:	f7ff ffdc 	bl	8014804 <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 801484c:	f7ff fe7c 	bl	8014548 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_SE);
 8014850:	2020      	movs	r0, #32
 8014852:	f7ff fe99 	bl	8014588 <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 8014856:	f3c4 4007 	ubfx	r0, r4, #16, #8
 801485a:	f7ff fe95 	bl	8014588 <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 801485e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8014862:	f7ff fe91 	bl	8014588 <sFLASH_SendByte>
  sFLASH_SendByte(SectorAddr & 0xFF);
 8014866:	b2e0      	uxtb	r0, r4
 8014868:	f7ff fe8e 	bl	8014588 <sFLASH_SendByte>
  sFLASH_CS_HIGH();
 801486c:	f7ff fe74 	bl	8014558 <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 8014870:	f7ff ffd2 	bl	8014818 <sFLASH_WaitForWriteEnd>
}
 8014874:	bd10      	pop	{r4, pc}

08014876 <sFLASH_WritePage>:
{
 8014876:	b570      	push	{r4, r5, r6, lr}
 8014878:	4606      	mov	r6, r0
 801487a:	460c      	mov	r4, r1
 801487c:	4615      	mov	r5, r2
  sFLASH_WriteEnable();
 801487e:	f7ff ffc1 	bl	8014804 <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 8014882:	f7ff fe61 	bl	8014548 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 8014886:	2002      	movs	r0, #2
 8014888:	f7ff fe7e 	bl	8014588 <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 801488c:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8014890:	f7ff fe7a 	bl	8014588 <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 8014894:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8014898:	f7ff fe76 	bl	8014588 <sFLASH_SendByte>
  sFLASH_SendByte(WriteAddr & 0xFF);
 801489c:	b2e0      	uxtb	r0, r4
 801489e:	f7ff fe73 	bl	8014588 <sFLASH_SendByte>
  while (NumByteToWrite--)
 80148a2:	e004      	b.n	80148ae <sFLASH_WritePage+0x38>
    sFLASH_SendByte(*pBuffer);
 80148a4:	f816 0b01 	ldrb.w	r0, [r6], #1
 80148a8:	f7ff fe6e 	bl	8014588 <sFLASH_SendByte>
  while (NumByteToWrite--)
 80148ac:	4625      	mov	r5, r4
 80148ae:	1e6b      	subs	r3, r5, #1
 80148b0:	b29c      	uxth	r4, r3
 80148b2:	2d00      	cmp	r5, #0
 80148b4:	d1f6      	bne.n	80148a4 <sFLASH_WritePage+0x2e>
  sFLASH_CS_HIGH();
 80148b6:	f7ff fe4f 	bl	8014558 <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 80148ba:	f7ff ffad 	bl	8014818 <sFLASH_WaitForWriteEnd>
}
 80148be:	bd70      	pop	{r4, r5, r6, pc}

080148c0 <sFLASH_WriteBuffer>:
{
 80148c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148c4:	4605      	mov	r5, r0
 80148c6:	460c      	mov	r4, r1
 80148c8:	4617      	mov	r7, r2
  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 80148ca:	b2cb      	uxtb	r3, r1
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80148cc:	0a11      	lsrs	r1, r2, #8
  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 80148ce:	b9d3      	cbnz	r3, 8014906 <sFLASH_WriteBuffer+0x46>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80148d0:	b971      	cbnz	r1, 80148f0 <sFLASH_WriteBuffer+0x30>
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80148d2:	4621      	mov	r1, r4
 80148d4:	f7ff ffcf 	bl	8014876 <sFLASH_WritePage>
 80148d8:	e013      	b.n	8014902 <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80148da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80148de:	4621      	mov	r1, r4
 80148e0:	4628      	mov	r0, r5
 80148e2:	f7ff ffc8 	bl	8014876 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80148e6:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 80148ea:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 80148ee:	4631      	mov	r1, r6
 80148f0:	1e4b      	subs	r3, r1, #1
 80148f2:	b2de      	uxtb	r6, r3
 80148f4:	2900      	cmp	r1, #0
 80148f6:	d1f0      	bne.n	80148da <sFLASH_WriteBuffer+0x1a>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80148f8:	b2fa      	uxtb	r2, r7
 80148fa:	4621      	mov	r1, r4
 80148fc:	4628      	mov	r0, r5
 80148fe:	f7ff ffba 	bl	8014876 <sFLASH_WritePage>
}
 8014902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014906:	f1c3 0800 	rsb	r8, r3, #0
 801490a:	fa5f f888 	uxtb.w	r8, r8
 801490e:	b2d2      	uxtb	r2, r2
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8014910:	b9a1      	cbnz	r1, 801493c <sFLASH_WriteBuffer+0x7c>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 8014912:	4590      	cmp	r8, r2
 8014914:	d20d      	bcs.n	8014932 <sFLASH_WriteBuffer+0x72>
        temp = NumOfSingle - count;
 8014916:	4413      	add	r3, r2
 8014918:	b2de      	uxtb	r6, r3
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 801491a:	4642      	mov	r2, r8
 801491c:	4621      	mov	r1, r4
 801491e:	f7ff ffaa 	bl	8014876 <sFLASH_WritePage>
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 8014922:	4632      	mov	r2, r6
 8014924:	eb08 0104 	add.w	r1, r8, r4
 8014928:	eb05 0008 	add.w	r0, r5, r8
 801492c:	f7ff ffa3 	bl	8014876 <sFLASH_WritePage>
 8014930:	e7e7      	b.n	8014902 <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8014932:	463a      	mov	r2, r7
 8014934:	4621      	mov	r1, r4
 8014936:	f7ff ff9e 	bl	8014876 <sFLASH_WritePage>
 801493a:	e7e2      	b.n	8014902 <sFLASH_WriteBuffer+0x42>
      NumByteToWrite -= count;
 801493c:	eba7 0708 	sub.w	r7, r7, r8
 8014940:	fa1f f987 	uxth.w	r9, r7
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8014944:	f3c7 2607 	ubfx	r6, r7, #8, #8
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8014948:	b2ff      	uxtb	r7, r7
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 801494a:	4642      	mov	r2, r8
 801494c:	4621      	mov	r1, r4
 801494e:	f7ff ff92 	bl	8014876 <sFLASH_WritePage>
      WriteAddr +=  count;
 8014952:	4444      	add	r4, r8
      pBuffer += count;
 8014954:	4445      	add	r5, r8
      while (NumOfPage--)
 8014956:	e00a      	b.n	801496e <sFLASH_WriteBuffer+0xae>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8014958:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801495c:	4621      	mov	r1, r4
 801495e:	4628      	mov	r0, r5
 8014960:	f7ff ff89 	bl	8014876 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8014964:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 8014968:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 801496c:	4646      	mov	r6, r8
 801496e:	1e73      	subs	r3, r6, #1
 8014970:	fa5f f883 	uxtb.w	r8, r3
 8014974:	2e00      	cmp	r6, #0
 8014976:	d1ef      	bne.n	8014958 <sFLASH_WriteBuffer+0x98>
      if (NumOfSingle != 0)
 8014978:	2f00      	cmp	r7, #0
 801497a:	d0c2      	beq.n	8014902 <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 801497c:	fa5f f289 	uxtb.w	r2, r9
 8014980:	4621      	mov	r1, r4
 8014982:	4628      	mov	r0, r5
 8014984:	f7ff ff77 	bl	8014876 <sFLASH_WritePage>
}
 8014988:	e7bb      	b.n	8014902 <sFLASH_WriteBuffer+0x42>
	...

0801498c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801498c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801498e:	4b0b      	ldr	r3, [pc, #44]	@ (80149bc <HAL_Init+0x30>)
 8014990:	681a      	ldr	r2, [r3, #0]
 8014992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014996:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8014998:	681a      	ldr	r2, [r3, #0]
 801499a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801499e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80149a0:	681a      	ldr	r2, [r3, #0]
 80149a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80149a6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80149a8:	2003      	movs	r0, #3
 80149aa:	f000 f883 	bl	8014ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80149ae:	200f      	movs	r0, #15
 80149b0:	f7fd fb52 	bl	8012058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80149b4:	f7fd fb2e 	bl	8012014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80149b8:	2000      	movs	r0, #0
 80149ba:	bd08      	pop	{r3, pc}
 80149bc:	40023c00 	.word	0x40023c00

080149c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80149c0:	4a03      	ldr	r2, [pc, #12]	@ (80149d0 <HAL_IncTick+0x10>)
 80149c2:	6811      	ldr	r1, [r2, #0]
 80149c4:	4b03      	ldr	r3, [pc, #12]	@ (80149d4 <HAL_IncTick+0x14>)
 80149c6:	781b      	ldrb	r3, [r3, #0]
 80149c8:	440b      	add	r3, r1
 80149ca:	6013      	str	r3, [r2, #0]
}
 80149cc:	4770      	bx	lr
 80149ce:	bf00      	nop
 80149d0:	20000a9c 	.word	0x20000a9c
 80149d4:	20000082 	.word	0x20000082

080149d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80149d8:	4b01      	ldr	r3, [pc, #4]	@ (80149e0 <HAL_GetTick+0x8>)
 80149da:	6818      	ldr	r0, [r3, #0]
}
 80149dc:	4770      	bx	lr
 80149de:	bf00      	nop
 80149e0:	20000a9c 	.word	0x20000a9c

080149e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80149e4:	b538      	push	{r3, r4, r5, lr}
 80149e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80149e8:	f7ff fff6 	bl	80149d8 <HAL_GetTick>
 80149ec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80149ee:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80149f2:	d002      	beq.n	80149fa <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80149f4:	4b04      	ldr	r3, [pc, #16]	@ (8014a08 <HAL_Delay+0x24>)
 80149f6:	781b      	ldrb	r3, [r3, #0]
 80149f8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80149fa:	f7ff ffed 	bl	80149d8 <HAL_GetTick>
 80149fe:	1b40      	subs	r0, r0, r5
 8014a00:	42a0      	cmp	r0, r4
 8014a02:	d3fa      	bcc.n	80149fa <HAL_Delay+0x16>
  {
  }
}
 8014a04:	bd38      	pop	{r3, r4, r5, pc}
 8014a06:	bf00      	nop
 8014a08:	20000082 	.word	0x20000082

08014a0c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8014a0c:	2800      	cmp	r0, #0
 8014a0e:	db07      	blt.n	8014a20 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014a10:	f000 021f 	and.w	r2, r0, #31
 8014a14:	0940      	lsrs	r0, r0, #5
 8014a16:	2301      	movs	r3, #1
 8014a18:	4093      	lsls	r3, r2
 8014a1a:	4a02      	ldr	r2, [pc, #8]	@ (8014a24 <__NVIC_EnableIRQ+0x18>)
 8014a1c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8014a20:	4770      	bx	lr
 8014a22:	bf00      	nop
 8014a24:	e000e100 	.word	0xe000e100

08014a28 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8014a28:	2800      	cmp	r0, #0
 8014a2a:	db08      	blt.n	8014a3e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014a2c:	0109      	lsls	r1, r1, #4
 8014a2e:	b2c9      	uxtb	r1, r1
 8014a30:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8014a34:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8014a38:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8014a3c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014a3e:	f000 000f 	and.w	r0, r0, #15
 8014a42:	0109      	lsls	r1, r1, #4
 8014a44:	b2c9      	uxtb	r1, r1
 8014a46:	4b01      	ldr	r3, [pc, #4]	@ (8014a4c <__NVIC_SetPriority+0x24>)
 8014a48:	5419      	strb	r1, [r3, r0]
  }
}
 8014a4a:	4770      	bx	lr
 8014a4c:	e000ed14 	.word	0xe000ed14

08014a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8014a50:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8014a52:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8014a56:	f1c0 0c07 	rsb	ip, r0, #7
 8014a5a:	f1bc 0f04 	cmp.w	ip, #4
 8014a5e:	bf28      	it	cs
 8014a60:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8014a64:	1d03      	adds	r3, r0, #4
 8014a66:	2b06      	cmp	r3, #6
 8014a68:	d90f      	bls.n	8014a8a <NVIC_EncodePriority+0x3a>
 8014a6a:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8014a6c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8014a70:	fa0e f00c 	lsl.w	r0, lr, ip
 8014a74:	ea21 0100 	bic.w	r1, r1, r0
 8014a78:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8014a7a:	fa0e fe03 	lsl.w	lr, lr, r3
 8014a7e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8014a82:	ea41 0002 	orr.w	r0, r1, r2
 8014a86:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	e7ee      	b.n	8014a6c <NVIC_EncodePriority+0x1c>
	...

08014a90 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8014a90:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8014a94:	4905      	ldr	r1, [pc, #20]	@ (8014aac <__NVIC_SystemReset+0x1c>)
 8014a96:	68ca      	ldr	r2, [r1, #12]
 8014a98:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8014a9c:	4b04      	ldr	r3, [pc, #16]	@ (8014ab0 <__NVIC_SystemReset+0x20>)
 8014a9e:	4313      	orrs	r3, r2
 8014aa0:	60cb      	str	r3, [r1, #12]
 8014aa2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8014aa6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8014aa8:	e7fd      	b.n	8014aa6 <__NVIC_SystemReset+0x16>
 8014aaa:	bf00      	nop
 8014aac:	e000ed00 	.word	0xe000ed00
 8014ab0:	05fa0004 	.word	0x05fa0004

08014ab4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8014ab4:	4a07      	ldr	r2, [pc, #28]	@ (8014ad4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8014ab6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8014ab8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8014abc:	041b      	lsls	r3, r3, #16
 8014abe:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8014ac0:	0200      	lsls	r0, r0, #8
 8014ac2:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8014ac6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8014ac8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8014acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8014ad0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8014ad2:	4770      	bx	lr
 8014ad4:	e000ed00 	.word	0xe000ed00

08014ad8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8014ad8:	b510      	push	{r4, lr}
 8014ada:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8014adc:	4b05      	ldr	r3, [pc, #20]	@ (8014af4 <HAL_NVIC_SetPriority+0x1c>)
 8014ade:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8014ae0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8014ae4:	f7ff ffb4 	bl	8014a50 <NVIC_EncodePriority>
 8014ae8:	4601      	mov	r1, r0
 8014aea:	4620      	mov	r0, r4
 8014aec:	f7ff ff9c 	bl	8014a28 <__NVIC_SetPriority>
}
 8014af0:	bd10      	pop	{r4, pc}
 8014af2:	bf00      	nop
 8014af4:	e000ed00 	.word	0xe000ed00

08014af8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014af8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8014afa:	f7ff ff87 	bl	8014a0c <__NVIC_EnableIRQ>
}
 8014afe:	bd08      	pop	{r3, pc}

08014b00 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8014b00:	b508      	push	{r3, lr}
  /* System Reset */
  NVIC_SystemReset();
 8014b02:	f7ff ffc5 	bl	8014a90 <__NVIC_SystemReset>
	...

08014b08 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8014b08:	2300      	movs	r3, #0
 8014b0a:	2b0f      	cmp	r3, #15
 8014b0c:	f200 80d7 	bhi.w	8014cbe <HAL_GPIO_Init+0x1b6>
{
 8014b10:	b570      	push	{r4, r5, r6, lr}
 8014b12:	b082      	sub	sp, #8
 8014b14:	e065      	b.n	8014be2 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8014b16:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8014b18:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8014b1c:	2403      	movs	r4, #3
 8014b1e:	fa04 f40e 	lsl.w	r4, r4, lr
 8014b22:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8014b26:	68cc      	ldr	r4, [r1, #12]
 8014b28:	fa04 f40e 	lsl.w	r4, r4, lr
 8014b2c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8014b2e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8014b30:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8014b32:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8014b36:	684a      	ldr	r2, [r1, #4]
 8014b38:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8014b3c:	409a      	lsls	r2, r3
 8014b3e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8014b40:	6042      	str	r2, [r0, #4]
 8014b42:	e05c      	b.n	8014bfe <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8014b44:	08dc      	lsrs	r4, r3, #3
 8014b46:	3408      	adds	r4, #8
 8014b48:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8014b4c:	f003 0507 	and.w	r5, r3, #7
 8014b50:	00ad      	lsls	r5, r5, #2
 8014b52:	f04f 0e0f 	mov.w	lr, #15
 8014b56:	fa0e fe05 	lsl.w	lr, lr, r5
 8014b5a:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8014b5e:	690a      	ldr	r2, [r1, #16]
 8014b60:	40aa      	lsls	r2, r5
 8014b62:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8014b66:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8014b6a:	e05c      	b.n	8014c26 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8014b6c:	2204      	movs	r2, #4
 8014b6e:	e000      	b.n	8014b72 <HAL_GPIO_Init+0x6a>
 8014b70:	2200      	movs	r2, #0
 8014b72:	fa02 f20e 	lsl.w	r2, r2, lr
 8014b76:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8014b78:	3402      	adds	r4, #2
 8014b7a:	4d51      	ldr	r5, [pc, #324]	@ (8014cc0 <HAL_GPIO_Init+0x1b8>)
 8014b7c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8014b80:	4a50      	ldr	r2, [pc, #320]	@ (8014cc4 <HAL_GPIO_Init+0x1bc>)
 8014b82:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8014b84:	ea6f 020c 	mvn.w	r2, ip
 8014b88:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8014b8c:	684e      	ldr	r6, [r1, #4]
 8014b8e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8014b92:	d001      	beq.n	8014b98 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8014b94:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8014b98:	4c4a      	ldr	r4, [pc, #296]	@ (8014cc4 <HAL_GPIO_Init+0x1bc>)
 8014b9a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8014b9c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8014b9e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8014ba2:	684e      	ldr	r6, [r1, #4]
 8014ba4:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8014ba8:	d001      	beq.n	8014bae <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8014baa:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8014bae:	4c45      	ldr	r4, [pc, #276]	@ (8014cc4 <HAL_GPIO_Init+0x1bc>)
 8014bb0:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8014bb2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8014bb4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8014bb8:	684e      	ldr	r6, [r1, #4]
 8014bba:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8014bbe:	d001      	beq.n	8014bc4 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8014bc0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8014bc4:	4c3f      	ldr	r4, [pc, #252]	@ (8014cc4 <HAL_GPIO_Init+0x1bc>)
 8014bc6:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8014bc8:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8014bca:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8014bcc:	684d      	ldr	r5, [r1, #4]
 8014bce:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8014bd2:	d001      	beq.n	8014bd8 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8014bd4:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8014bd8:	4c3a      	ldr	r4, [pc, #232]	@ (8014cc4 <HAL_GPIO_Init+0x1bc>)
 8014bda:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8014bdc:	3301      	adds	r3, #1
 8014bde:	2b0f      	cmp	r3, #15
 8014be0:	d86b      	bhi.n	8014cba <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8014be2:	2201      	movs	r2, #1
 8014be4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8014be6:	680c      	ldr	r4, [r1, #0]
 8014be8:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8014bec:	ea32 0404 	bics.w	r4, r2, r4
 8014bf0:	d1f4      	bne.n	8014bdc <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8014bf2:	684c      	ldr	r4, [r1, #4]
 8014bf4:	f004 0403 	and.w	r4, r4, #3
 8014bf8:	3c01      	subs	r4, #1
 8014bfa:	2c01      	cmp	r4, #1
 8014bfc:	d98b      	bls.n	8014b16 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8014bfe:	684a      	ldr	r2, [r1, #4]
 8014c00:	f002 0203 	and.w	r2, r2, #3
 8014c04:	2a03      	cmp	r2, #3
 8014c06:	d009      	beq.n	8014c1c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8014c08:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8014c0a:	005d      	lsls	r5, r3, #1
 8014c0c:	2203      	movs	r2, #3
 8014c0e:	40aa      	lsls	r2, r5
 8014c10:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8014c14:	688a      	ldr	r2, [r1, #8]
 8014c16:	40aa      	lsls	r2, r5
 8014c18:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8014c1a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8014c1c:	684a      	ldr	r2, [r1, #4]
 8014c1e:	f002 0203 	and.w	r2, r2, #3
 8014c22:	2a02      	cmp	r2, #2
 8014c24:	d08e      	beq.n	8014b44 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8014c26:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8014c28:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8014c2c:	2203      	movs	r2, #3
 8014c2e:	fa02 f20e 	lsl.w	r2, r2, lr
 8014c32:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8014c36:	684a      	ldr	r2, [r1, #4]
 8014c38:	f002 0203 	and.w	r2, r2, #3
 8014c3c:	fa02 f20e 	lsl.w	r2, r2, lr
 8014c40:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8014c42:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8014c44:	684a      	ldr	r2, [r1, #4]
 8014c46:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8014c4a:	d0c7      	beq.n	8014bdc <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	9201      	str	r2, [sp, #4]
 8014c50:	4a1d      	ldr	r2, [pc, #116]	@ (8014cc8 <HAL_GPIO_Init+0x1c0>)
 8014c52:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8014c54:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8014c58:	6454      	str	r4, [r2, #68]	@ 0x44
 8014c5a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8014c5c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8014c60:	9201      	str	r2, [sp, #4]
 8014c62:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8014c64:	089c      	lsrs	r4, r3, #2
 8014c66:	1ca5      	adds	r5, r4, #2
 8014c68:	4a15      	ldr	r2, [pc, #84]	@ (8014cc0 <HAL_GPIO_Init+0x1b8>)
 8014c6a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8014c6e:	f003 0e03 	and.w	lr, r3, #3
 8014c72:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8014c76:	220f      	movs	r2, #15
 8014c78:	fa02 f20e 	lsl.w	r2, r2, lr
 8014c7c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8014c80:	4a12      	ldr	r2, [pc, #72]	@ (8014ccc <HAL_GPIO_Init+0x1c4>)
 8014c82:	4290      	cmp	r0, r2
 8014c84:	f43f af74 	beq.w	8014b70 <HAL_GPIO_Init+0x68>
 8014c88:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8014c8c:	4290      	cmp	r0, r2
 8014c8e:	d00e      	beq.n	8014cae <HAL_GPIO_Init+0x1a6>
 8014c90:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8014c94:	4290      	cmp	r0, r2
 8014c96:	d00c      	beq.n	8014cb2 <HAL_GPIO_Init+0x1aa>
 8014c98:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8014c9c:	4290      	cmp	r0, r2
 8014c9e:	d00a      	beq.n	8014cb6 <HAL_GPIO_Init+0x1ae>
 8014ca0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8014ca4:	4290      	cmp	r0, r2
 8014ca6:	f43f af61 	beq.w	8014b6c <HAL_GPIO_Init+0x64>
 8014caa:	2207      	movs	r2, #7
 8014cac:	e761      	b.n	8014b72 <HAL_GPIO_Init+0x6a>
 8014cae:	2201      	movs	r2, #1
 8014cb0:	e75f      	b.n	8014b72 <HAL_GPIO_Init+0x6a>
 8014cb2:	2202      	movs	r2, #2
 8014cb4:	e75d      	b.n	8014b72 <HAL_GPIO_Init+0x6a>
 8014cb6:	2203      	movs	r2, #3
 8014cb8:	e75b      	b.n	8014b72 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8014cba:	b002      	add	sp, #8
 8014cbc:	bd70      	pop	{r4, r5, r6, pc}
 8014cbe:	4770      	bx	lr
 8014cc0:	40013800 	.word	0x40013800
 8014cc4:	40013c00 	.word	0x40013c00
 8014cc8:	40023800 	.word	0x40023800
 8014ccc:	40020000 	.word	0x40020000

08014cd0 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	2b0f      	cmp	r3, #15
 8014cd4:	d87c      	bhi.n	8014dd0 <HAL_GPIO_DeInit+0x100>
{
 8014cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cd8:	e02d      	b.n	8014d36 <HAL_GPIO_DeInit+0x66>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8014cda:	2504      	movs	r5, #4
 8014cdc:	e000      	b.n	8014ce0 <HAL_GPIO_DeInit+0x10>
 8014cde:	2500      	movs	r5, #0
 8014ce0:	fa05 f50c 	lsl.w	r5, r5, ip
 8014ce4:	42a5      	cmp	r5, r4
 8014ce6:	d057      	beq.n	8014d98 <HAL_GPIO_DeInit+0xc8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8014ce8:	6804      	ldr	r4, [r0, #0]
 8014cea:	005d      	lsls	r5, r3, #1
 8014cec:	f04f 0c03 	mov.w	ip, #3
 8014cf0:	fa0c fc05 	lsl.w	ip, ip, r5
 8014cf4:	ea24 040c 	bic.w	r4, r4, ip
 8014cf8:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8014cfa:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8014cfe:	f10e 0e08 	add.w	lr, lr, #8
 8014d02:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8014d06:	f003 0607 	and.w	r6, r3, #7
 8014d0a:	00b6      	lsls	r6, r6, #2
 8014d0c:	250f      	movs	r5, #15
 8014d0e:	40b5      	lsls	r5, r6
 8014d10:	ea24 0405 	bic.w	r4, r4, r5
 8014d14:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8014d18:	68c4      	ldr	r4, [r0, #12]
 8014d1a:	ea24 040c 	bic.w	r4, r4, ip
 8014d1e:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8014d20:	6844      	ldr	r4, [r0, #4]
 8014d22:	ea24 0202 	bic.w	r2, r4, r2
 8014d26:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8014d28:	6882      	ldr	r2, [r0, #8]
 8014d2a:	ea22 020c 	bic.w	r2, r2, ip
 8014d2e:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8014d30:	3301      	adds	r3, #1
 8014d32:	2b0f      	cmp	r3, #15
 8014d34:	d84b      	bhi.n	8014dce <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 8014d36:	2201      	movs	r2, #1
 8014d38:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8014d3a:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8014d3e:	ea32 0401 	bics.w	r4, r2, r1
 8014d42:	d1f5      	bne.n	8014d30 <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8014d44:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8014d48:	f10e 0502 	add.w	r5, lr, #2
 8014d4c:	4c21      	ldr	r4, [pc, #132]	@ (8014dd4 <HAL_GPIO_DeInit+0x104>)
 8014d4e:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8014d52:	f003 0c03 	and.w	ip, r3, #3
 8014d56:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8014d5a:	250f      	movs	r5, #15
 8014d5c:	fa05 f70c 	lsl.w	r7, r5, ip
 8014d60:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8014d62:	4d1d      	ldr	r5, [pc, #116]	@ (8014dd8 <HAL_GPIO_DeInit+0x108>)
 8014d64:	42a8      	cmp	r0, r5
 8014d66:	d0ba      	beq.n	8014cde <HAL_GPIO_DeInit+0xe>
 8014d68:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8014d6c:	42a8      	cmp	r0, r5
 8014d6e:	d00d      	beq.n	8014d8c <HAL_GPIO_DeInit+0xbc>
 8014d70:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8014d74:	42a8      	cmp	r0, r5
 8014d76:	d00b      	beq.n	8014d90 <HAL_GPIO_DeInit+0xc0>
 8014d78:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8014d7c:	42a8      	cmp	r0, r5
 8014d7e:	d009      	beq.n	8014d94 <HAL_GPIO_DeInit+0xc4>
 8014d80:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8014d84:	42a8      	cmp	r0, r5
 8014d86:	d0a8      	beq.n	8014cda <HAL_GPIO_DeInit+0xa>
 8014d88:	2507      	movs	r5, #7
 8014d8a:	e7a9      	b.n	8014ce0 <HAL_GPIO_DeInit+0x10>
 8014d8c:	2501      	movs	r5, #1
 8014d8e:	e7a7      	b.n	8014ce0 <HAL_GPIO_DeInit+0x10>
 8014d90:	2502      	movs	r5, #2
 8014d92:	e7a5      	b.n	8014ce0 <HAL_GPIO_DeInit+0x10>
 8014d94:	2503      	movs	r5, #3
 8014d96:	e7a3      	b.n	8014ce0 <HAL_GPIO_DeInit+0x10>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8014d98:	4c10      	ldr	r4, [pc, #64]	@ (8014ddc <HAL_GPIO_DeInit+0x10c>)
 8014d9a:	6825      	ldr	r5, [r4, #0]
 8014d9c:	ea25 0506 	bic.w	r5, r5, r6
 8014da0:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8014da2:	6865      	ldr	r5, [r4, #4]
 8014da4:	ea25 0506 	bic.w	r5, r5, r6
 8014da8:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8014daa:	68e5      	ldr	r5, [r4, #12]
 8014dac:	ea25 0506 	bic.w	r5, r5, r6
 8014db0:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8014db2:	68a5      	ldr	r5, [r4, #8]
 8014db4:	ea25 0506 	bic.w	r5, r5, r6
 8014db8:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8014dba:	4e06      	ldr	r6, [pc, #24]	@ (8014dd4 <HAL_GPIO_DeInit+0x104>)
 8014dbc:	f10e 0402 	add.w	r4, lr, #2
 8014dc0:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8014dc4:	ea25 0507 	bic.w	r5, r5, r7
 8014dc8:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 8014dcc:	e78c      	b.n	8014ce8 <HAL_GPIO_DeInit+0x18>
    }
  }
}
 8014dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dd0:	4770      	bx	lr
 8014dd2:	bf00      	nop
 8014dd4:	40013800 	.word	0x40013800
 8014dd8:	40020000 	.word	0x40020000
 8014ddc:	40013c00 	.word	0x40013c00

08014de0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8014de0:	6903      	ldr	r3, [r0, #16]
 8014de2:	4219      	tst	r1, r3
 8014de4:	d001      	beq.n	8014dea <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8014de6:	2001      	movs	r0, #1
 8014de8:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8014dea:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8014dec:	4770      	bx	lr

08014dee <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8014dee:	b10a      	cbz	r2, 8014df4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8014df0:	6181      	str	r1, [r0, #24]
 8014df2:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8014df4:	0409      	lsls	r1, r1, #16
 8014df6:	6181      	str	r1, [r0, #24]
  }
}
 8014df8:	4770      	bx	lr

08014dfa <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014dfa:	6803      	ldr	r3, [r0, #0]
 8014dfc:	695a      	ldr	r2, [r3, #20]
 8014dfe:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8014e02:	d101      	bne.n	8014e08 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8014e04:	2000      	movs	r0, #0
}
 8014e06:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014e08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8014e0c:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8014e0e:	2300      	movs	r3, #0
 8014e10:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8014e12:	2220      	movs	r2, #32
 8014e14:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014e18:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8014e1c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8014e1e:	f042 0204 	orr.w	r2, r2, #4
 8014e22:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8014e24:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8014e28:	2001      	movs	r0, #1
 8014e2a:	4770      	bx	lr

08014e2c <I2C_WaitOnFlagUntilTimeout>:
{
 8014e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e30:	4606      	mov	r6, r0
 8014e32:	460c      	mov	r4, r1
 8014e34:	4617      	mov	r7, r2
 8014e36:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014e38:	e03b      	b.n	8014eb2 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014e3a:	f7ff fdcd 	bl	80149d8 <HAL_GetTick>
 8014e3e:	9b06      	ldr	r3, [sp, #24]
 8014e40:	1ac0      	subs	r0, r0, r3
 8014e42:	4540      	cmp	r0, r8
 8014e44:	d802      	bhi.n	8014e4c <I2C_WaitOnFlagUntilTimeout+0x20>
 8014e46:	f1b8 0f00 	cmp.w	r8, #0
 8014e4a:	d132      	bne.n	8014eb2 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8014e4c:	2d01      	cmp	r5, #1
 8014e4e:	d018      	beq.n	8014e82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8014e50:	6833      	ldr	r3, [r6, #0]
 8014e52:	699b      	ldr	r3, [r3, #24]
 8014e54:	ea24 0303 	bic.w	r3, r4, r3
 8014e58:	b29b      	uxth	r3, r3
 8014e5a:	fab3 f383 	clz	r3, r3
 8014e5e:	095b      	lsrs	r3, r3, #5
 8014e60:	429f      	cmp	r7, r3
 8014e62:	d126      	bne.n	8014eb2 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8014e64:	2300      	movs	r3, #0
 8014e66:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8014e68:	2220      	movs	r2, #32
 8014e6a:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8014e6e:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8014e72:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8014e74:	f042 0220 	orr.w	r2, r2, #32
 8014e78:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8014e7a:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8014e7e:	2001      	movs	r0, #1
 8014e80:	e027      	b.n	8014ed2 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8014e82:	6833      	ldr	r3, [r6, #0]
 8014e84:	695b      	ldr	r3, [r3, #20]
 8014e86:	ea24 0303 	bic.w	r3, r4, r3
 8014e8a:	b29b      	uxth	r3, r3
 8014e8c:	fab3 f383 	clz	r3, r3
 8014e90:	095b      	lsrs	r3, r3, #5
 8014e92:	e7e5      	b.n	8014e60 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014e94:	6833      	ldr	r3, [r6, #0]
 8014e96:	695b      	ldr	r3, [r3, #20]
 8014e98:	ea24 0c03 	bic.w	ip, r4, r3
 8014e9c:	fa1f fc8c 	uxth.w	ip, ip
 8014ea0:	fabc fc8c 	clz	ip, ip
 8014ea4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8014ea8:	4567      	cmp	r7, ip
 8014eaa:	d111      	bne.n	8014ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8014eac:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8014eb0:	d1c3      	bne.n	8014e3a <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014eb2:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8014eb6:	2d01      	cmp	r5, #1
 8014eb8:	d0ec      	beq.n	8014e94 <I2C_WaitOnFlagUntilTimeout+0x68>
 8014eba:	6833      	ldr	r3, [r6, #0]
 8014ebc:	699b      	ldr	r3, [r3, #24]
 8014ebe:	ea24 0c03 	bic.w	ip, r4, r3
 8014ec2:	fa1f fc8c 	uxth.w	ip, ip
 8014ec6:	fabc fc8c 	clz	ip, ip
 8014eca:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8014ece:	e7eb      	b.n	8014ea8 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8014ed0:	2000      	movs	r0, #0
}
 8014ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8014ed6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014eda:	4605      	mov	r5, r0
 8014edc:	460e      	mov	r6, r1
 8014ede:	4690      	mov	r8, r2
 8014ee0:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8014ee2:	e053      	b.n	8014f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014ee4:	681a      	ldr	r2, [r3, #0]
 8014ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014eea:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014eec:	682b      	ldr	r3, [r5, #0]
 8014eee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8014ef2:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8014ef8:	2220      	movs	r2, #32
 8014efa:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014efe:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8014f02:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8014f04:	f042 0204 	orr.w	r2, r2, #4
 8014f08:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8014f0a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8014f0e:	2001      	movs	r0, #1
 8014f10:	e04a      	b.n	8014fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014f12:	f7ff fd61 	bl	80149d8 <HAL_GetTick>
 8014f16:	eba0 0009 	sub.w	r0, r0, r9
 8014f1a:	4540      	cmp	r0, r8
 8014f1c:	d802      	bhi.n	8014f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8014f1e:	f1b8 0f00 	cmp.w	r8, #0
 8014f22:	d133      	bne.n	8014f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8014f24:	2f01      	cmp	r7, #1
 8014f26:	d017      	beq.n	8014f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8014f28:	682b      	ldr	r3, [r5, #0]
 8014f2a:	699b      	ldr	r3, [r3, #24]
 8014f2c:	ea26 0303 	bic.w	r3, r6, r3
 8014f30:	b29b      	uxth	r3, r3
 8014f32:	3b00      	subs	r3, #0
 8014f34:	bf18      	it	ne
 8014f36:	2301      	movne	r3, #1
 8014f38:	b343      	cbz	r3, 8014f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8014f3e:	2220      	movs	r2, #32
 8014f40:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014f44:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014f48:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8014f4a:	f042 0220 	orr.w	r2, r2, #32
 8014f4e:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8014f50:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8014f54:	2001      	movs	r0, #1
 8014f56:	e027      	b.n	8014fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8014f58:	682b      	ldr	r3, [r5, #0]
 8014f5a:	695b      	ldr	r3, [r3, #20]
 8014f5c:	ea26 0303 	bic.w	r3, r6, r3
 8014f60:	b29b      	uxth	r3, r3
 8014f62:	3b00      	subs	r3, #0
 8014f64:	bf18      	it	ne
 8014f66:	2301      	movne	r3, #1
 8014f68:	e7e6      	b.n	8014f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8014f6a:	682b      	ldr	r3, [r5, #0]
 8014f6c:	699c      	ldr	r4, [r3, #24]
 8014f6e:	ea26 0404 	bic.w	r4, r6, r4
 8014f72:	b2a4      	uxth	r4, r4
 8014f74:	3c00      	subs	r4, #0
 8014f76:	bf18      	it	ne
 8014f78:	2401      	movne	r4, #1
 8014f7a:	b1a4      	cbz	r4, 8014fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014f7c:	682b      	ldr	r3, [r5, #0]
 8014f7e:	695a      	ldr	r2, [r3, #20]
 8014f80:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8014f84:	d1ae      	bne.n	8014ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8014f86:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8014f8a:	d1c2      	bne.n	8014f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8014f8c:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8014f90:	2f01      	cmp	r7, #1
 8014f92:	d1ea      	bne.n	8014f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8014f94:	682b      	ldr	r3, [r5, #0]
 8014f96:	695c      	ldr	r4, [r3, #20]
 8014f98:	ea26 0404 	bic.w	r4, r6, r4
 8014f9c:	b2a4      	uxth	r4, r4
 8014f9e:	3c00      	subs	r4, #0
 8014fa0:	bf18      	it	ne
 8014fa2:	2401      	movne	r4, #1
 8014fa4:	e7e9      	b.n	8014f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8014fa6:	2000      	movs	r0, #0
}
 8014fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014fac <I2C_MasterRequestWrite>:
{
 8014fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014fae:	b083      	sub	sp, #12
 8014fb0:	4604      	mov	r4, r0
 8014fb2:	460d      	mov	r5, r1
 8014fb4:	4616      	mov	r6, r2
 8014fb6:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8014fb8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8014fba:	2b08      	cmp	r3, #8
 8014fbc:	d00d      	beq.n	8014fda <I2C_MasterRequestWrite+0x2e>
 8014fbe:	2b01      	cmp	r3, #1
 8014fc0:	d00b      	beq.n	8014fda <I2C_MasterRequestWrite+0x2e>
 8014fc2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8014fc6:	d008      	beq.n	8014fda <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8014fc8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014fca:	2b12      	cmp	r3, #18
 8014fcc:	d10a      	bne.n	8014fe4 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8014fce:	6802      	ldr	r2, [r0, #0]
 8014fd0:	6813      	ldr	r3, [r2, #0]
 8014fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014fd6:	6013      	str	r3, [r2, #0]
 8014fd8:	e004      	b.n	8014fe4 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8014fda:	6822      	ldr	r2, [r4, #0]
 8014fdc:	6813      	ldr	r3, [r2, #0]
 8014fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014fe2:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8014fe4:	9700      	str	r7, [sp, #0]
 8014fe6:	4633      	mov	r3, r6
 8014fe8:	2200      	movs	r2, #0
 8014fea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8014fee:	4620      	mov	r0, r4
 8014ff0:	f7ff ff1c 	bl	8014e2c <I2C_WaitOnFlagUntilTimeout>
 8014ff4:	b980      	cbnz	r0, 8015018 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8014ff6:	6923      	ldr	r3, [r4, #16]
 8014ff8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014ffc:	d116      	bne.n	801502c <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8014ffe:	6823      	ldr	r3, [r4, #0]
 8015000:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8015004:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8015006:	463b      	mov	r3, r7
 8015008:	4632      	mov	r2, r6
 801500a:	4913      	ldr	r1, [pc, #76]	@ (8015058 <I2C_MasterRequestWrite+0xac>)
 801500c:	4620      	mov	r0, r4
 801500e:	f7ff ff62 	bl	8014ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8015012:	b9f8      	cbnz	r0, 8015054 <I2C_MasterRequestWrite+0xa8>
}
 8015014:	b003      	add	sp, #12
 8015016:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8015018:	6823      	ldr	r3, [r4, #0]
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8015020:	d002      	beq.n	8015028 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8015022:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015026:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8015028:	2003      	movs	r0, #3
 801502a:	e7f3      	b.n	8015014 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 801502c:	11eb      	asrs	r3, r5, #7
 801502e:	6822      	ldr	r2, [r4, #0]
 8015030:	f003 0306 	and.w	r3, r3, #6
 8015034:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8015038:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801503a:	463b      	mov	r3, r7
 801503c:	4632      	mov	r2, r6
 801503e:	4907      	ldr	r1, [pc, #28]	@ (801505c <I2C_MasterRequestWrite+0xb0>)
 8015040:	4620      	mov	r0, r4
 8015042:	f7ff ff48 	bl	8014ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8015046:	b918      	cbnz	r0, 8015050 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8015048:	6823      	ldr	r3, [r4, #0]
 801504a:	b2ed      	uxtb	r5, r5
 801504c:	611d      	str	r5, [r3, #16]
 801504e:	e7da      	b.n	8015006 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8015050:	2001      	movs	r0, #1
 8015052:	e7df      	b.n	8015014 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8015054:	2001      	movs	r0, #1
 8015056:	e7dd      	b.n	8015014 <I2C_MasterRequestWrite+0x68>
 8015058:	00010002 	.word	0x00010002
 801505c:	00010008 	.word	0x00010008

08015060 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8015060:	b570      	push	{r4, r5, r6, lr}
 8015062:	4604      	mov	r4, r0
 8015064:	460d      	mov	r5, r1
 8015066:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8015068:	6823      	ldr	r3, [r4, #0]
 801506a:	695b      	ldr	r3, [r3, #20]
 801506c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015070:	d121      	bne.n	80150b6 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8015072:	4620      	mov	r0, r4
 8015074:	f7ff fec1 	bl	8014dfa <I2C_IsAcknowledgeFailed>
 8015078:	b9f8      	cbnz	r0, 80150ba <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 801507a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 801507e:	d0f3      	beq.n	8015068 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015080:	f7ff fcaa 	bl	80149d8 <HAL_GetTick>
 8015084:	1b80      	subs	r0, r0, r6
 8015086:	42a8      	cmp	r0, r5
 8015088:	d801      	bhi.n	801508e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 801508a:	2d00      	cmp	r5, #0
 801508c:	d1ec      	bne.n	8015068 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 801508e:	6823      	ldr	r3, [r4, #0]
 8015090:	695b      	ldr	r3, [r3, #20]
 8015092:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015096:	d1e7      	bne.n	8015068 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8015098:	2300      	movs	r3, #0
 801509a:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 801509c:	2220      	movs	r2, #32
 801509e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80150a2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80150a6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80150a8:	f042 0220 	orr.w	r2, r2, #32
 80150ac:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80150ae:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80150b2:	2001      	movs	r0, #1
 80150b4:	e000      	b.n	80150b8 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 80150b6:	2000      	movs	r0, #0
}
 80150b8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80150ba:	2001      	movs	r0, #1
 80150bc:	e7fc      	b.n	80150b8 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

080150be <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80150be:	b570      	push	{r4, r5, r6, lr}
 80150c0:	4604      	mov	r4, r0
 80150c2:	460d      	mov	r5, r1
 80150c4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80150c6:	6823      	ldr	r3, [r4, #0]
 80150c8:	695b      	ldr	r3, [r3, #20]
 80150ca:	f013 0f04 	tst.w	r3, #4
 80150ce:	d121      	bne.n	8015114 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80150d0:	4620      	mov	r0, r4
 80150d2:	f7ff fe92 	bl	8014dfa <I2C_IsAcknowledgeFailed>
 80150d6:	b9f8      	cbnz	r0, 8015118 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80150d8:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80150dc:	d0f3      	beq.n	80150c6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80150de:	f7ff fc7b 	bl	80149d8 <HAL_GetTick>
 80150e2:	1b80      	subs	r0, r0, r6
 80150e4:	42a8      	cmp	r0, r5
 80150e6:	d801      	bhi.n	80150ec <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80150e8:	2d00      	cmp	r5, #0
 80150ea:	d1ec      	bne.n	80150c6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80150ec:	6823      	ldr	r3, [r4, #0]
 80150ee:	695b      	ldr	r3, [r3, #20]
 80150f0:	f013 0f04 	tst.w	r3, #4
 80150f4:	d1e7      	bne.n	80150c6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80150f6:	2300      	movs	r3, #0
 80150f8:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80150fa:	2220      	movs	r2, #32
 80150fc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8015100:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8015104:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8015106:	f042 0220 	orr.w	r2, r2, #32
 801510a:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 801510c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8015110:	2001      	movs	r0, #1
 8015112:	e000      	b.n	8015116 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8015114:	2000      	movs	r0, #0
}
 8015116:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8015118:	2001      	movs	r0, #1
 801511a:	e7fc      	b.n	8015116 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

0801511c <HAL_I2C_Init>:
  if (hi2c == NULL)
 801511c:	2800      	cmp	r0, #0
 801511e:	f000 80cc 	beq.w	80152ba <HAL_I2C_Init+0x19e>
{
 8015122:	b570      	push	{r4, r5, r6, lr}
 8015124:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015126:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 801512a:	2b00      	cmp	r3, #0
 801512c:	d077      	beq.n	801521e <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 801512e:	2324      	movs	r3, #36	@ 0x24
 8015130:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8015134:	6822      	ldr	r2, [r4, #0]
 8015136:	6813      	ldr	r3, [r2, #0]
 8015138:	f023 0301 	bic.w	r3, r3, #1
 801513c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801513e:	6822      	ldr	r2, [r4, #0]
 8015140:	6813      	ldr	r3, [r2, #0]
 8015142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8015146:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8015148:	6822      	ldr	r2, [r4, #0]
 801514a:	6813      	ldr	r3, [r2, #0]
 801514c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8015150:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8015152:	f000 fd81 	bl	8015c58 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8015156:	6862      	ldr	r2, [r4, #4]
 8015158:	4b5a      	ldr	r3, [pc, #360]	@ (80152c4 <HAL_I2C_Init+0x1a8>)
 801515a:	429a      	cmp	r2, r3
 801515c:	d864      	bhi.n	8015228 <HAL_I2C_Init+0x10c>
 801515e:	4b5a      	ldr	r3, [pc, #360]	@ (80152c8 <HAL_I2C_Init+0x1ac>)
 8015160:	4298      	cmp	r0, r3
 8015162:	bf8c      	ite	hi
 8015164:	2300      	movhi	r3, #0
 8015166:	2301      	movls	r3, #1
 8015168:	2b00      	cmp	r3, #0
 801516a:	f040 80a8 	bne.w	80152be <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 801516e:	4957      	ldr	r1, [pc, #348]	@ (80152cc <HAL_I2C_Init+0x1b0>)
 8015170:	fba1 3100 	umull	r3, r1, r1, r0
 8015174:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8015176:	6825      	ldr	r5, [r4, #0]
 8015178:	686a      	ldr	r2, [r5, #4]
 801517a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 801517e:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8015182:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8015184:	6821      	ldr	r1, [r4, #0]
 8015186:	6a0a      	ldr	r2, [r1, #32]
 8015188:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 801518c:	6866      	ldr	r6, [r4, #4]
 801518e:	4d4d      	ldr	r5, [pc, #308]	@ (80152c4 <HAL_I2C_Init+0x1a8>)
 8015190:	42ae      	cmp	r6, r5
 8015192:	d84f      	bhi.n	8015234 <HAL_I2C_Init+0x118>
 8015194:	3301      	adds	r3, #1
 8015196:	4313      	orrs	r3, r2
 8015198:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801519a:	6821      	ldr	r1, [r4, #0]
 801519c:	69ca      	ldr	r2, [r1, #28]
 801519e:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 80151a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80151a6:	6865      	ldr	r5, [r4, #4]
 80151a8:	4b46      	ldr	r3, [pc, #280]	@ (80152c4 <HAL_I2C_Init+0x1a8>)
 80151aa:	429d      	cmp	r5, r3
 80151ac:	d84c      	bhi.n	8015248 <HAL_I2C_Init+0x12c>
 80151ae:	1e43      	subs	r3, r0, #1
 80151b0:	006d      	lsls	r5, r5, #1
 80151b2:	fbb3 f3f5 	udiv	r3, r3, r5
 80151b6:	3301      	adds	r3, #1
 80151b8:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80151bc:	4203      	tst	r3, r0
 80151be:	d078      	beq.n	80152b2 <HAL_I2C_Init+0x196>
 80151c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80151c4:	431a      	orrs	r2, r3
 80151c6:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80151c8:	6821      	ldr	r1, [r4, #0]
 80151ca:	680b      	ldr	r3, [r1, #0]
 80151cc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80151d0:	69e2      	ldr	r2, [r4, #28]
 80151d2:	6a20      	ldr	r0, [r4, #32]
 80151d4:	4302      	orrs	r2, r0
 80151d6:	4313      	orrs	r3, r2
 80151d8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80151da:	6821      	ldr	r1, [r4, #0]
 80151dc:	688b      	ldr	r3, [r1, #8]
 80151de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80151e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80151e6:	6922      	ldr	r2, [r4, #16]
 80151e8:	68e0      	ldr	r0, [r4, #12]
 80151ea:	4302      	orrs	r2, r0
 80151ec:	4313      	orrs	r3, r2
 80151ee:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80151f0:	6821      	ldr	r1, [r4, #0]
 80151f2:	68cb      	ldr	r3, [r1, #12]
 80151f4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80151f8:	6962      	ldr	r2, [r4, #20]
 80151fa:	69a0      	ldr	r0, [r4, #24]
 80151fc:	4302      	orrs	r2, r0
 80151fe:	4313      	orrs	r3, r2
 8015200:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8015202:	6822      	ldr	r2, [r4, #0]
 8015204:	6813      	ldr	r3, [r2, #0]
 8015206:	f043 0301 	orr.w	r3, r3, #1
 801520a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801520c:	2000      	movs	r0, #0
 801520e:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8015210:	2320      	movs	r3, #32
 8015212:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8015216:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015218:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 801521c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 801521e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8015222:	f7fc fcb7 	bl	8011b94 <HAL_I2C_MspInit>
 8015226:	e782      	b.n	801512e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8015228:	4b29      	ldr	r3, [pc, #164]	@ (80152d0 <HAL_I2C_Init+0x1b4>)
 801522a:	4298      	cmp	r0, r3
 801522c:	bf8c      	ite	hi
 801522e:	2300      	movhi	r3, #0
 8015230:	2301      	movls	r3, #1
 8015232:	e799      	b.n	8015168 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8015234:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8015238:	fb05 f303 	mul.w	r3, r5, r3
 801523c:	4d25      	ldr	r5, [pc, #148]	@ (80152d4 <HAL_I2C_Init+0x1b8>)
 801523e:	fba5 5303 	umull	r5, r3, r5, r3
 8015242:	099b      	lsrs	r3, r3, #6
 8015244:	3301      	adds	r3, #1
 8015246:	e7a6      	b.n	8015196 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8015248:	68a6      	ldr	r6, [r4, #8]
 801524a:	b9be      	cbnz	r6, 801527c <HAL_I2C_Init+0x160>
 801524c:	1e43      	subs	r3, r0, #1
 801524e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8015252:	fbb3 f3fc 	udiv	r3, r3, ip
 8015256:	3301      	adds	r3, #1
 8015258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801525c:	fab3 f383 	clz	r3, r3
 8015260:	095b      	lsrs	r3, r3, #5
 8015262:	bb43      	cbnz	r3, 80152b6 <HAL_I2C_Init+0x19a>
 8015264:	b9c6      	cbnz	r6, 8015298 <HAL_I2C_Init+0x17c>
 8015266:	1e43      	subs	r3, r0, #1
 8015268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801526c:	fbb3 f3f5 	udiv	r3, r3, r5
 8015270:	3301      	adds	r3, #1
 8015272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015276:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801527a:	e7a3      	b.n	80151c4 <HAL_I2C_Init+0xa8>
 801527c:	1e43      	subs	r3, r0, #1
 801527e:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8015282:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8015286:	fbb3 f3fc 	udiv	r3, r3, ip
 801528a:	3301      	adds	r3, #1
 801528c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015290:	fab3 f383 	clz	r3, r3
 8015294:	095b      	lsrs	r3, r3, #5
 8015296:	e7e4      	b.n	8015262 <HAL_I2C_Init+0x146>
 8015298:	1e43      	subs	r3, r0, #1
 801529a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801529e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80152a2:	fbb3 f3f5 	udiv	r3, r3, r5
 80152a6:	3301      	adds	r3, #1
 80152a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80152ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80152b0:	e788      	b.n	80151c4 <HAL_I2C_Init+0xa8>
 80152b2:	2304      	movs	r3, #4
 80152b4:	e786      	b.n	80151c4 <HAL_I2C_Init+0xa8>
 80152b6:	2301      	movs	r3, #1
 80152b8:	e784      	b.n	80151c4 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80152ba:	2001      	movs	r0, #1
}
 80152bc:	4770      	bx	lr
    return HAL_ERROR;
 80152be:	2001      	movs	r0, #1
 80152c0:	e7ac      	b.n	801521c <HAL_I2C_Init+0x100>
 80152c2:	bf00      	nop
 80152c4:	000186a0 	.word	0x000186a0
 80152c8:	001e847f 	.word	0x001e847f
 80152cc:	431bde83 	.word	0x431bde83
 80152d0:	003d08ff 	.word	0x003d08ff
 80152d4:	10624dd3 	.word	0x10624dd3

080152d8 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80152d8:	b1a8      	cbz	r0, 8015306 <HAL_I2C_DeInit+0x2e>
{
 80152da:	b510      	push	{r4, lr}
 80152dc:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80152de:	2324      	movs	r3, #36	@ 0x24
 80152e0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80152e4:	6802      	ldr	r2, [r0, #0]
 80152e6:	6813      	ldr	r3, [r2, #0]
 80152e8:	f023 0301 	bic.w	r3, r3, #1
 80152ec:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80152ee:	f7fc fc8b 	bl	8011c08 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80152f2:	2000      	movs	r0, #0
 80152f4:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80152f6:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80152fa:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80152fc:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 8015300:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8015304:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8015306:	2001      	movs	r0, #1
}
 8015308:	4770      	bx	lr
	...

0801530c <HAL_I2C_Master_Transmit>:
{
 801530c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015310:	b085      	sub	sp, #20
 8015312:	4604      	mov	r4, r0
 8015314:	460f      	mov	r7, r1
 8015316:	4691      	mov	r9, r2
 8015318:	4698      	mov	r8, r3
 801531a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 801531c:	f7ff fb5c 	bl	80149d8 <HAL_GetTick>
 8015320:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8015322:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8015326:	b2c0      	uxtb	r0, r0
 8015328:	2820      	cmp	r0, #32
 801532a:	d004      	beq.n	8015336 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 801532c:	2702      	movs	r7, #2
}
 801532e:	4638      	mov	r0, r7
 8015330:	b005      	add	sp, #20
 8015332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8015336:	9500      	str	r5, [sp, #0]
 8015338:	2319      	movs	r3, #25
 801533a:	2201      	movs	r2, #1
 801533c:	494f      	ldr	r1, [pc, #316]	@ (801547c <HAL_I2C_Master_Transmit+0x170>)
 801533e:	4620      	mov	r0, r4
 8015340:	f7ff fd74 	bl	8014e2c <I2C_WaitOnFlagUntilTimeout>
 8015344:	2800      	cmp	r0, #0
 8015346:	f040 8092 	bne.w	801546e <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 801534a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 801534e:	2b01      	cmp	r3, #1
 8015350:	f000 808f 	beq.w	8015472 <HAL_I2C_Master_Transmit+0x166>
 8015354:	2301      	movs	r3, #1
 8015356:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801535a:	6823      	ldr	r3, [r4, #0]
 801535c:	681a      	ldr	r2, [r3, #0]
 801535e:	f012 0f01 	tst.w	r2, #1
 8015362:	d103      	bne.n	801536c <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8015364:	681a      	ldr	r2, [r3, #0]
 8015366:	f042 0201 	orr.w	r2, r2, #1
 801536a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801536c:	6822      	ldr	r2, [r4, #0]
 801536e:	6813      	ldr	r3, [r2, #0]
 8015370:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015374:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8015376:	2321      	movs	r3, #33	@ 0x21
 8015378:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801537c:	2310      	movs	r3, #16
 801537e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8015382:	2300      	movs	r3, #0
 8015384:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8015386:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 801538a:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801538e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8015390:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015392:	4b3b      	ldr	r3, [pc, #236]	@ (8015480 <HAL_I2C_Master_Transmit+0x174>)
 8015394:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8015396:	462b      	mov	r3, r5
 8015398:	4632      	mov	r2, r6
 801539a:	4639      	mov	r1, r7
 801539c:	4620      	mov	r0, r4
 801539e:	f7ff fe05 	bl	8014fac <I2C_MasterRequestWrite>
 80153a2:	4607      	mov	r7, r0
 80153a4:	2800      	cmp	r0, #0
 80153a6:	d166      	bne.n	8015476 <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80153a8:	2300      	movs	r3, #0
 80153aa:	9303      	str	r3, [sp, #12]
 80153ac:	6823      	ldr	r3, [r4, #0]
 80153ae:	695a      	ldr	r2, [r3, #20]
 80153b0:	9203      	str	r2, [sp, #12]
 80153b2:	699b      	ldr	r3, [r3, #24]
 80153b4:	9303      	str	r3, [sp, #12]
 80153b6:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80153b8:	e011      	b.n	80153de <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80153ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80153bc:	2b04      	cmp	r3, #4
 80153be:	d001      	beq.n	80153c4 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 80153c0:	2701      	movs	r7, #1
 80153c2:	e7b4      	b.n	801532e <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80153c4:	6822      	ldr	r2, [r4, #0]
 80153c6:	6813      	ldr	r3, [r2, #0]
 80153c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80153cc:	6013      	str	r3, [r2, #0]
 80153ce:	e7f7      	b.n	80153c0 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80153d0:	462a      	mov	r2, r5
 80153d2:	4631      	mov	r1, r6
 80153d4:	4620      	mov	r0, r4
 80153d6:	f7ff fe72 	bl	80150be <I2C_WaitOnBTFFlagUntilTimeout>
 80153da:	2800      	cmp	r0, #0
 80153dc:	d12e      	bne.n	801543c <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 80153de:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d036      	beq.n	8015452 <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80153e4:	462a      	mov	r2, r5
 80153e6:	4631      	mov	r1, r6
 80153e8:	4620      	mov	r0, r4
 80153ea:	f7ff fe39 	bl	8015060 <I2C_WaitOnTXEFlagUntilTimeout>
 80153ee:	2800      	cmp	r0, #0
 80153f0:	d1e3      	bne.n	80153ba <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80153f2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80153f4:	6823      	ldr	r3, [r4, #0]
 80153f6:	7812      	ldrb	r2, [r2, #0]
 80153f8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80153fa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80153fc:	1c43      	adds	r3, r0, #1
 80153fe:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8015400:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8015402:	b289      	uxth	r1, r1
 8015404:	3901      	subs	r1, #1
 8015406:	b289      	uxth	r1, r1
 8015408:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 801540a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 801540c:	3b01      	subs	r3, #1
 801540e:	b29b      	uxth	r3, r3
 8015410:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8015412:	6822      	ldr	r2, [r4, #0]
 8015414:	6951      	ldr	r1, [r2, #20]
 8015416:	f011 0f04 	tst.w	r1, #4
 801541a:	d0d9      	beq.n	80153d0 <HAL_I2C_Master_Transmit+0xc4>
 801541c:	2b00      	cmp	r3, #0
 801541e:	d0d7      	beq.n	80153d0 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8015420:	7843      	ldrb	r3, [r0, #1]
 8015422:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8015424:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8015426:	3301      	adds	r3, #1
 8015428:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 801542a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801542c:	b29b      	uxth	r3, r3
 801542e:	3b01      	subs	r3, #1
 8015430:	b29b      	uxth	r3, r3
 8015432:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8015434:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8015436:	3b01      	subs	r3, #1
 8015438:	8523      	strh	r3, [r4, #40]	@ 0x28
 801543a:	e7c9      	b.n	80153d0 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801543c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801543e:	2b04      	cmp	r3, #4
 8015440:	d001      	beq.n	8015446 <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8015442:	2701      	movs	r7, #1
 8015444:	e773      	b.n	801532e <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015446:	6822      	ldr	r2, [r4, #0]
 8015448:	6813      	ldr	r3, [r2, #0]
 801544a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801544e:	6013      	str	r3, [r2, #0]
 8015450:	e7f7      	b.n	8015442 <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015452:	6822      	ldr	r2, [r4, #0]
 8015454:	6813      	ldr	r3, [r2, #0]
 8015456:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801545a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 801545c:	2320      	movs	r3, #32
 801545e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8015462:	2300      	movs	r3, #0
 8015464:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8015468:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 801546c:	e75f      	b.n	801532e <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 801546e:	2702      	movs	r7, #2
 8015470:	e75d      	b.n	801532e <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8015472:	2702      	movs	r7, #2
 8015474:	e75b      	b.n	801532e <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8015476:	2701      	movs	r7, #1
 8015478:	e759      	b.n	801532e <HAL_I2C_Master_Transmit+0x22>
 801547a:	bf00      	nop
 801547c:	00100002 	.word	0x00100002
 8015480:	ffff0000 	.word	0xffff0000

08015484 <HAL_I2C_IsDeviceReady>:
{
 8015484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015488:	b085      	sub	sp, #20
 801548a:	4604      	mov	r4, r0
 801548c:	4688      	mov	r8, r1
 801548e:	4691      	mov	r9, r2
 8015490:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8015492:	f7ff faa1 	bl	80149d8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8015496:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 801549a:	b2db      	uxtb	r3, r3
 801549c:	2b20      	cmp	r3, #32
 801549e:	d003      	beq.n	80154a8 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80154a0:	2002      	movs	r0, #2
}
 80154a2:	b005      	add	sp, #20
 80154a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154a8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80154aa:	9000      	str	r0, [sp, #0]
 80154ac:	2319      	movs	r3, #25
 80154ae:	2201      	movs	r2, #1
 80154b0:	4957      	ldr	r1, [pc, #348]	@ (8015610 <HAL_I2C_IsDeviceReady+0x18c>)
 80154b2:	4620      	mov	r0, r4
 80154b4:	f7ff fcba 	bl	8014e2c <I2C_WaitOnFlagUntilTimeout>
 80154b8:	2800      	cmp	r0, #0
 80154ba:	f040 80a0 	bne.w	80155fe <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 80154be:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80154c2:	2b01      	cmp	r3, #1
 80154c4:	f000 809d 	beq.w	8015602 <HAL_I2C_IsDeviceReady+0x17e>
 80154c8:	2301      	movs	r3, #1
 80154ca:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80154ce:	6823      	ldr	r3, [r4, #0]
 80154d0:	681a      	ldr	r2, [r3, #0]
 80154d2:	f012 0f01 	tst.w	r2, #1
 80154d6:	d103      	bne.n	80154e0 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 80154d8:	681a      	ldr	r2, [r3, #0]
 80154da:	f042 0201 	orr.w	r2, r2, #1
 80154de:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80154e0:	6822      	ldr	r2, [r4, #0]
 80154e2:	6813      	ldr	r3, [r2, #0]
 80154e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80154e8:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80154ea:	2324      	movs	r3, #36	@ 0x24
 80154ec:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80154f0:	2700      	movs	r7, #0
 80154f2:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80154f4:	4b47      	ldr	r3, [pc, #284]	@ (8015614 <HAL_I2C_IsDeviceReady+0x190>)
 80154f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80154f8:	e040      	b.n	801557c <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80154fa:	6823      	ldr	r3, [r4, #0]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8015502:	d002      	beq.n	801550a <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8015504:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015508:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 801550a:	2003      	movs	r0, #3
 801550c:	e7c9      	b.n	80154a2 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 801550e:	23a0      	movs	r3, #160	@ 0xa0
 8015510:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8015514:	6822      	ldr	r2, [r4, #0]
 8015516:	6953      	ldr	r3, [r2, #20]
 8015518:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801551c:	6952      	ldr	r2, [r2, #20]
 801551e:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8015522:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 8015526:	fa5f fc8c 	uxtb.w	ip, ip
 801552a:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 801552e:	d009      	beq.n	8015544 <HAL_I2C_IsDeviceReady+0xc0>
 8015530:	b943      	cbnz	r3, 8015544 <HAL_I2C_IsDeviceReady+0xc0>
 8015532:	b93a      	cbnz	r2, 8015544 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015534:	f7ff fa50 	bl	80149d8 <HAL_GetTick>
 8015538:	1b80      	subs	r0, r0, r6
 801553a:	42a8      	cmp	r0, r5
 801553c:	d8e7      	bhi.n	801550e <HAL_I2C_IsDeviceReady+0x8a>
 801553e:	2d00      	cmp	r5, #0
 8015540:	d1e8      	bne.n	8015514 <HAL_I2C_IsDeviceReady+0x90>
 8015542:	e7e4      	b.n	801550e <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8015544:	2320      	movs	r3, #32
 8015546:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 801554a:	6823      	ldr	r3, [r4, #0]
 801554c:	695a      	ldr	r2, [r3, #20]
 801554e:	f012 0f02 	tst.w	r2, #2
 8015552:	d131      	bne.n	80155b8 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015554:	681a      	ldr	r2, [r3, #0]
 8015556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801555a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801555c:	6823      	ldr	r3, [r4, #0]
 801555e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8015562:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8015564:	9600      	str	r6, [sp, #0]
 8015566:	2319      	movs	r3, #25
 8015568:	2201      	movs	r2, #1
 801556a:	4929      	ldr	r1, [pc, #164]	@ (8015610 <HAL_I2C_IsDeviceReady+0x18c>)
 801556c:	4620      	mov	r0, r4
 801556e:	f7ff fc5d 	bl	8014e2c <I2C_WaitOnFlagUntilTimeout>
 8015572:	2800      	cmp	r0, #0
 8015574:	d149      	bne.n	801560a <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 8015576:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8015578:	454f      	cmp	r7, r9
 801557a:	d238      	bcs.n	80155ee <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801557c:	6822      	ldr	r2, [r4, #0]
 801557e:	6813      	ldr	r3, [r2, #0]
 8015580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015584:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8015586:	9600      	str	r6, [sp, #0]
 8015588:	462b      	mov	r3, r5
 801558a:	2200      	movs	r2, #0
 801558c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8015590:	4620      	mov	r0, r4
 8015592:	f7ff fc4b 	bl	8014e2c <I2C_WaitOnFlagUntilTimeout>
 8015596:	2800      	cmp	r0, #0
 8015598:	d1af      	bne.n	80154fa <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801559a:	6823      	ldr	r3, [r4, #0]
 801559c:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 80155a0:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80155a2:	f7ff fa19 	bl	80149d8 <HAL_GetTick>
 80155a6:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80155a8:	6822      	ldr	r2, [r4, #0]
 80155aa:	6953      	ldr	r3, [r2, #20]
 80155ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80155b0:	6952      	ldr	r2, [r2, #20]
 80155b2:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80155b6:	e7b4      	b.n	8015522 <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80155b8:	681a      	ldr	r2, [r3, #0]
 80155ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80155be:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80155c0:	2300      	movs	r3, #0
 80155c2:	9303      	str	r3, [sp, #12]
 80155c4:	6823      	ldr	r3, [r4, #0]
 80155c6:	695a      	ldr	r2, [r3, #20]
 80155c8:	9203      	str	r2, [sp, #12]
 80155ca:	699b      	ldr	r3, [r3, #24]
 80155cc:	9303      	str	r3, [sp, #12]
 80155ce:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80155d0:	9600      	str	r6, [sp, #0]
 80155d2:	2319      	movs	r3, #25
 80155d4:	2201      	movs	r2, #1
 80155d6:	490e      	ldr	r1, [pc, #56]	@ (8015610 <HAL_I2C_IsDeviceReady+0x18c>)
 80155d8:	4620      	mov	r0, r4
 80155da:	f7ff fc27 	bl	8014e2c <I2C_WaitOnFlagUntilTimeout>
 80155de:	b990      	cbnz	r0, 8015606 <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 80155e0:	2320      	movs	r3, #32
 80155e2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 80155e6:	2300      	movs	r3, #0
 80155e8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 80155ec:	e759      	b.n	80154a2 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80155ee:	2320      	movs	r3, #32
 80155f0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80155f4:	2300      	movs	r3, #0
 80155f6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 80155fa:	2001      	movs	r0, #1
 80155fc:	e751      	b.n	80154a2 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 80155fe:	2002      	movs	r0, #2
 8015600:	e74f      	b.n	80154a2 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8015602:	2002      	movs	r0, #2
 8015604:	e74d      	b.n	80154a2 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8015606:	2001      	movs	r0, #1
 8015608:	e74b      	b.n	80154a2 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 801560a:	2001      	movs	r0, #1
 801560c:	e749      	b.n	80154a2 <HAL_I2C_IsDeviceReady+0x1e>
 801560e:	bf00      	nop
 8015610:	00100002 	.word	0x00100002
 8015614:	ffff0000 	.word	0xffff0000

08015618 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8015618:	2800      	cmp	r0, #0
 801561a:	f000 81e0 	beq.w	80159de <HAL_RCC_OscConfig+0x3c6>
{
 801561e:	b570      	push	{r4, r5, r6, lr}
 8015620:	b082      	sub	sp, #8
 8015622:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8015624:	6803      	ldr	r3, [r0, #0]
 8015626:	f013 0f01 	tst.w	r3, #1
 801562a:	d03b      	beq.n	80156a4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 801562c:	4b9f      	ldr	r3, [pc, #636]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 801562e:	689b      	ldr	r3, [r3, #8]
 8015630:	f003 030c 	and.w	r3, r3, #12
 8015634:	2b04      	cmp	r3, #4
 8015636:	d02c      	beq.n	8015692 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8015638:	4b9c      	ldr	r3, [pc, #624]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 801563a:	689b      	ldr	r3, [r3, #8]
 801563c:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8015640:	2b08      	cmp	r3, #8
 8015642:	d021      	beq.n	8015688 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015644:	6863      	ldr	r3, [r4, #4]
 8015646:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801564a:	d04f      	beq.n	80156ec <HAL_RCC_OscConfig+0xd4>
 801564c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8015650:	d052      	beq.n	80156f8 <HAL_RCC_OscConfig+0xe0>
 8015652:	4b96      	ldr	r3, [pc, #600]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 8015654:	681a      	ldr	r2, [r3, #0]
 8015656:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 801565a:	601a      	str	r2, [r3, #0]
 801565c:	681a      	ldr	r2, [r3, #0]
 801565e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8015662:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8015664:	6863      	ldr	r3, [r4, #4]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d050      	beq.n	801570c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801566a:	f7ff f9b5 	bl	80149d8 <HAL_GetTick>
 801566e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015670:	4b8e      	ldr	r3, [pc, #568]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8015678:	d114      	bne.n	80156a4 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801567a:	f7ff f9ad 	bl	80149d8 <HAL_GetTick>
 801567e:	1b40      	subs	r0, r0, r5
 8015680:	2864      	cmp	r0, #100	@ 0x64
 8015682:	d9f5      	bls.n	8015670 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8015684:	2003      	movs	r0, #3
 8015686:	e1b1      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8015688:	4b88      	ldr	r3, [pc, #544]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 801568a:	685b      	ldr	r3, [r3, #4]
 801568c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8015690:	d0d8      	beq.n	8015644 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015692:	4b86      	ldr	r3, [pc, #536]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801569a:	d003      	beq.n	80156a4 <HAL_RCC_OscConfig+0x8c>
 801569c:	6863      	ldr	r3, [r4, #4]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	f000 819f 	beq.w	80159e2 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80156a4:	6823      	ldr	r3, [r4, #0]
 80156a6:	f013 0f02 	tst.w	r3, #2
 80156aa:	d054      	beq.n	8015756 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80156ac:	4b7f      	ldr	r3, [pc, #508]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 80156ae:	689b      	ldr	r3, [r3, #8]
 80156b0:	f013 0f0c 	tst.w	r3, #12
 80156b4:	d03e      	beq.n	8015734 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80156b6:	4b7d      	ldr	r3, [pc, #500]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 80156b8:	689b      	ldr	r3, [r3, #8]
 80156ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80156be:	2b08      	cmp	r3, #8
 80156c0:	d033      	beq.n	801572a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80156c2:	68e3      	ldr	r3, [r4, #12]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d068      	beq.n	801579a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80156c8:	4b79      	ldr	r3, [pc, #484]	@ (80158b0 <HAL_RCC_OscConfig+0x298>)
 80156ca:	2201      	movs	r2, #1
 80156cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80156ce:	f7ff f983 	bl	80149d8 <HAL_GetTick>
 80156d2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80156d4:	4b75      	ldr	r3, [pc, #468]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	f013 0f02 	tst.w	r3, #2
 80156dc:	d154      	bne.n	8015788 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80156de:	f7ff f97b 	bl	80149d8 <HAL_GetTick>
 80156e2:	1b40      	subs	r0, r0, r5
 80156e4:	2802      	cmp	r0, #2
 80156e6:	d9f5      	bls.n	80156d4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80156e8:	2003      	movs	r0, #3
 80156ea:	e17f      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80156ec:	4a6f      	ldr	r2, [pc, #444]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 80156ee:	6813      	ldr	r3, [r2, #0]
 80156f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80156f4:	6013      	str	r3, [r2, #0]
 80156f6:	e7b5      	b.n	8015664 <HAL_RCC_OscConfig+0x4c>
 80156f8:	4b6c      	ldr	r3, [pc, #432]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 80156fa:	681a      	ldr	r2, [r3, #0]
 80156fc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8015700:	601a      	str	r2, [r3, #0]
 8015702:	681a      	ldr	r2, [r3, #0]
 8015704:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8015708:	601a      	str	r2, [r3, #0]
 801570a:	e7ab      	b.n	8015664 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 801570c:	f7ff f964 	bl	80149d8 <HAL_GetTick>
 8015710:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8015712:	4b66      	ldr	r3, [pc, #408]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801571a:	d0c3      	beq.n	80156a4 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801571c:	f7ff f95c 	bl	80149d8 <HAL_GetTick>
 8015720:	1b40      	subs	r0, r0, r5
 8015722:	2864      	cmp	r0, #100	@ 0x64
 8015724:	d9f5      	bls.n	8015712 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8015726:	2003      	movs	r0, #3
 8015728:	e160      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801572a:	4b60      	ldr	r3, [pc, #384]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 801572c:	685b      	ldr	r3, [r3, #4]
 801572e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8015732:	d1c6      	bne.n	80156c2 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8015734:	4b5d      	ldr	r3, [pc, #372]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	f013 0f02 	tst.w	r3, #2
 801573c:	d003      	beq.n	8015746 <HAL_RCC_OscConfig+0x12e>
 801573e:	68e3      	ldr	r3, [r4, #12]
 8015740:	2b01      	cmp	r3, #1
 8015742:	f040 8150 	bne.w	80159e6 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015746:	4a59      	ldr	r2, [pc, #356]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 8015748:	6813      	ldr	r3, [r2, #0]
 801574a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 801574e:	6921      	ldr	r1, [r4, #16]
 8015750:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8015754:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015756:	6823      	ldr	r3, [r4, #0]
 8015758:	f013 0f08 	tst.w	r3, #8
 801575c:	d042      	beq.n	80157e4 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801575e:	6963      	ldr	r3, [r4, #20]
 8015760:	b36b      	cbz	r3, 80157be <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8015762:	4b53      	ldr	r3, [pc, #332]	@ (80158b0 <HAL_RCC_OscConfig+0x298>)
 8015764:	2201      	movs	r2, #1
 8015766:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801576a:	f7ff f935 	bl	80149d8 <HAL_GetTick>
 801576e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8015770:	4b4e      	ldr	r3, [pc, #312]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 8015772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015774:	f013 0f02 	tst.w	r3, #2
 8015778:	d134      	bne.n	80157e4 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801577a:	f7ff f92d 	bl	80149d8 <HAL_GetTick>
 801577e:	1b40      	subs	r0, r0, r5
 8015780:	2802      	cmp	r0, #2
 8015782:	d9f5      	bls.n	8015770 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8015784:	2003      	movs	r0, #3
 8015786:	e131      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015788:	4a48      	ldr	r2, [pc, #288]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 801578a:	6813      	ldr	r3, [r2, #0]
 801578c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8015790:	6921      	ldr	r1, [r4, #16]
 8015792:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8015796:	6013      	str	r3, [r2, #0]
 8015798:	e7dd      	b.n	8015756 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 801579a:	4b45      	ldr	r3, [pc, #276]	@ (80158b0 <HAL_RCC_OscConfig+0x298>)
 801579c:	2200      	movs	r2, #0
 801579e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80157a0:	f7ff f91a 	bl	80149d8 <HAL_GetTick>
 80157a4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80157a6:	4b41      	ldr	r3, [pc, #260]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	f013 0f02 	tst.w	r3, #2
 80157ae:	d0d2      	beq.n	8015756 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80157b0:	f7ff f912 	bl	80149d8 <HAL_GetTick>
 80157b4:	1b40      	subs	r0, r0, r5
 80157b6:	2802      	cmp	r0, #2
 80157b8:	d9f5      	bls.n	80157a6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80157ba:	2003      	movs	r0, #3
 80157bc:	e116      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80157be:	4b3c      	ldr	r3, [pc, #240]	@ (80158b0 <HAL_RCC_OscConfig+0x298>)
 80157c0:	2200      	movs	r2, #0
 80157c2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80157c6:	f7ff f907 	bl	80149d8 <HAL_GetTick>
 80157ca:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80157cc:	4b37      	ldr	r3, [pc, #220]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 80157ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80157d0:	f013 0f02 	tst.w	r3, #2
 80157d4:	d006      	beq.n	80157e4 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80157d6:	f7ff f8ff 	bl	80149d8 <HAL_GetTick>
 80157da:	1b40      	subs	r0, r0, r5
 80157dc:	2802      	cmp	r0, #2
 80157de:	d9f5      	bls.n	80157cc <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80157e0:	2003      	movs	r0, #3
 80157e2:	e103      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80157e4:	6823      	ldr	r3, [r4, #0]
 80157e6:	f013 0f04 	tst.w	r3, #4
 80157ea:	d077      	beq.n	80158dc <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80157ec:	4b2f      	ldr	r3, [pc, #188]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 80157ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80157f0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80157f4:	d133      	bne.n	801585e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80157f6:	2300      	movs	r3, #0
 80157f8:	9301      	str	r3, [sp, #4]
 80157fa:	4b2c      	ldr	r3, [pc, #176]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 80157fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80157fe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8015802:	641a      	str	r2, [r3, #64]	@ 0x40
 8015804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801580a:	9301      	str	r3, [sp, #4]
 801580c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 801580e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015810:	4b28      	ldr	r3, [pc, #160]	@ (80158b4 <HAL_RCC_OscConfig+0x29c>)
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8015818:	d023      	beq.n	8015862 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801581a:	68a3      	ldr	r3, [r4, #8]
 801581c:	2b01      	cmp	r3, #1
 801581e:	d034      	beq.n	801588a <HAL_RCC_OscConfig+0x272>
 8015820:	2b05      	cmp	r3, #5
 8015822:	d038      	beq.n	8015896 <HAL_RCC_OscConfig+0x27e>
 8015824:	4b21      	ldr	r3, [pc, #132]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 8015826:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8015828:	f022 0201 	bic.w	r2, r2, #1
 801582c:	671a      	str	r2, [r3, #112]	@ 0x70
 801582e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8015830:	f022 0204 	bic.w	r2, r2, #4
 8015834:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8015836:	68a3      	ldr	r3, [r4, #8]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d03d      	beq.n	80158b8 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801583c:	f7ff f8cc 	bl	80149d8 <HAL_GetTick>
 8015840:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015842:	4b1a      	ldr	r3, [pc, #104]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 8015844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015846:	f013 0f02 	tst.w	r3, #2
 801584a:	d146      	bne.n	80158da <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801584c:	f7ff f8c4 	bl	80149d8 <HAL_GetTick>
 8015850:	1b80      	subs	r0, r0, r6
 8015852:	f241 3388 	movw	r3, #5000	@ 0x1388
 8015856:	4298      	cmp	r0, r3
 8015858:	d9f3      	bls.n	8015842 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 801585a:	2003      	movs	r0, #3
 801585c:	e0c6      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 801585e:	2500      	movs	r5, #0
 8015860:	e7d6      	b.n	8015810 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015862:	4a14      	ldr	r2, [pc, #80]	@ (80158b4 <HAL_RCC_OscConfig+0x29c>)
 8015864:	6813      	ldr	r3, [r2, #0]
 8015866:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801586a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 801586c:	f7ff f8b4 	bl	80149d8 <HAL_GetTick>
 8015870:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015872:	4b10      	ldr	r3, [pc, #64]	@ (80158b4 <HAL_RCC_OscConfig+0x29c>)
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	f413 7f80 	tst.w	r3, #256	@ 0x100
 801587a:	d1ce      	bne.n	801581a <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801587c:	f7ff f8ac 	bl	80149d8 <HAL_GetTick>
 8015880:	1b80      	subs	r0, r0, r6
 8015882:	2802      	cmp	r0, #2
 8015884:	d9f5      	bls.n	8015872 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8015886:	2003      	movs	r0, #3
 8015888:	e0b0      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801588a:	4a08      	ldr	r2, [pc, #32]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 801588c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 801588e:	f043 0301 	orr.w	r3, r3, #1
 8015892:	6713      	str	r3, [r2, #112]	@ 0x70
 8015894:	e7cf      	b.n	8015836 <HAL_RCC_OscConfig+0x21e>
 8015896:	4b05      	ldr	r3, [pc, #20]	@ (80158ac <HAL_RCC_OscConfig+0x294>)
 8015898:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801589a:	f042 0204 	orr.w	r2, r2, #4
 801589e:	671a      	str	r2, [r3, #112]	@ 0x70
 80158a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80158a2:	f042 0201 	orr.w	r2, r2, #1
 80158a6:	671a      	str	r2, [r3, #112]	@ 0x70
 80158a8:	e7c5      	b.n	8015836 <HAL_RCC_OscConfig+0x21e>
 80158aa:	bf00      	nop
 80158ac:	40023800 	.word	0x40023800
 80158b0:	42470000 	.word	0x42470000
 80158b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80158b8:	f7ff f88e 	bl	80149d8 <HAL_GetTick>
 80158bc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80158be:	4b52      	ldr	r3, [pc, #328]	@ (8015a08 <HAL_RCC_OscConfig+0x3f0>)
 80158c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158c2:	f013 0f02 	tst.w	r3, #2
 80158c6:	d008      	beq.n	80158da <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80158c8:	f7ff f886 	bl	80149d8 <HAL_GetTick>
 80158cc:	1b80      	subs	r0, r0, r6
 80158ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80158d2:	4298      	cmp	r0, r3
 80158d4:	d9f3      	bls.n	80158be <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80158d6:	2003      	movs	r0, #3
 80158d8:	e088      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80158da:	b9ed      	cbnz	r5, 8015918 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80158dc:	69a3      	ldr	r3, [r4, #24]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	f000 8083 	beq.w	80159ea <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80158e4:	4a48      	ldr	r2, [pc, #288]	@ (8015a08 <HAL_RCC_OscConfig+0x3f0>)
 80158e6:	6892      	ldr	r2, [r2, #8]
 80158e8:	f002 020c 	and.w	r2, r2, #12
 80158ec:	2a08      	cmp	r2, #8
 80158ee:	d051      	beq.n	8015994 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80158f0:	2b02      	cmp	r3, #2
 80158f2:	d017      	beq.n	8015924 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80158f4:	4b45      	ldr	r3, [pc, #276]	@ (8015a0c <HAL_RCC_OscConfig+0x3f4>)
 80158f6:	2200      	movs	r2, #0
 80158f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80158fa:	f7ff f86d 	bl	80149d8 <HAL_GetTick>
 80158fe:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015900:	4b41      	ldr	r3, [pc, #260]	@ (8015a08 <HAL_RCC_OscConfig+0x3f0>)
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8015908:	d042      	beq.n	8015990 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801590a:	f7ff f865 	bl	80149d8 <HAL_GetTick>
 801590e:	1b00      	subs	r0, r0, r4
 8015910:	2802      	cmp	r0, #2
 8015912:	d9f5      	bls.n	8015900 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8015914:	2003      	movs	r0, #3
 8015916:	e069      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8015918:	4a3b      	ldr	r2, [pc, #236]	@ (8015a08 <HAL_RCC_OscConfig+0x3f0>)
 801591a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801591c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8015920:	6413      	str	r3, [r2, #64]	@ 0x40
 8015922:	e7db      	b.n	80158dc <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8015924:	4b39      	ldr	r3, [pc, #228]	@ (8015a0c <HAL_RCC_OscConfig+0x3f4>)
 8015926:	2200      	movs	r2, #0
 8015928:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 801592a:	f7ff f855 	bl	80149d8 <HAL_GetTick>
 801592e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015930:	4b35      	ldr	r3, [pc, #212]	@ (8015a08 <HAL_RCC_OscConfig+0x3f0>)
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8015938:	d006      	beq.n	8015948 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801593a:	f7ff f84d 	bl	80149d8 <HAL_GetTick>
 801593e:	1b40      	subs	r0, r0, r5
 8015940:	2802      	cmp	r0, #2
 8015942:	d9f5      	bls.n	8015930 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8015944:	2003      	movs	r0, #3
 8015946:	e051      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8015948:	69e3      	ldr	r3, [r4, #28]
 801594a:	6a22      	ldr	r2, [r4, #32]
 801594c:	4313      	orrs	r3, r2
 801594e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015950:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8015954:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8015956:	0852      	lsrs	r2, r2, #1
 8015958:	3a01      	subs	r2, #1
 801595a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801595e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015960:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8015964:	4a28      	ldr	r2, [pc, #160]	@ (8015a08 <HAL_RCC_OscConfig+0x3f0>)
 8015966:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8015968:	4b28      	ldr	r3, [pc, #160]	@ (8015a0c <HAL_RCC_OscConfig+0x3f4>)
 801596a:	2201      	movs	r2, #1
 801596c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 801596e:	f7ff f833 	bl	80149d8 <HAL_GetTick>
 8015972:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8015974:	4b24      	ldr	r3, [pc, #144]	@ (8015a08 <HAL_RCC_OscConfig+0x3f0>)
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 801597c:	d106      	bne.n	801598c <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801597e:	f7ff f82b 	bl	80149d8 <HAL_GetTick>
 8015982:	1b00      	subs	r0, r0, r4
 8015984:	2802      	cmp	r0, #2
 8015986:	d9f5      	bls.n	8015974 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8015988:	2003      	movs	r0, #3
 801598a:	e02f      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 801598c:	2000      	movs	r0, #0
 801598e:	e02d      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
 8015990:	2000      	movs	r0, #0
 8015992:	e02b      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8015994:	2b01      	cmp	r3, #1
 8015996:	d02b      	beq.n	80159f0 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8015998:	4b1b      	ldr	r3, [pc, #108]	@ (8015a08 <HAL_RCC_OscConfig+0x3f0>)
 801599a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801599c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80159a0:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80159a2:	4291      	cmp	r1, r2
 80159a4:	d126      	bne.n	80159f4 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80159a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80159aa:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80159ac:	428a      	cmp	r2, r1
 80159ae:	d123      	bne.n	80159f8 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80159b0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80159b2:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80159b6:	401a      	ands	r2, r3
 80159b8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80159bc:	d11e      	bne.n	80159fc <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80159be:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80159c2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80159c4:	0852      	lsrs	r2, r2, #1
 80159c6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80159c8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80159cc:	d118      	bne.n	8015a00 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80159ce:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80159d2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80159d4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80159d8:	d114      	bne.n	8015a04 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80159da:	2000      	movs	r0, #0
 80159dc:	e006      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80159de:	2001      	movs	r0, #1
}
 80159e0:	4770      	bx	lr
        return HAL_ERROR;
 80159e2:	2001      	movs	r0, #1
 80159e4:	e002      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80159e6:	2001      	movs	r0, #1
 80159e8:	e000      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80159ea:	2000      	movs	r0, #0
}
 80159ec:	b002      	add	sp, #8
 80159ee:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80159f0:	2001      	movs	r0, #1
 80159f2:	e7fb      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80159f4:	2001      	movs	r0, #1
 80159f6:	e7f9      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
 80159f8:	2001      	movs	r0, #1
 80159fa:	e7f7      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
 80159fc:	2001      	movs	r0, #1
 80159fe:	e7f5      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
 8015a00:	2001      	movs	r0, #1
 8015a02:	e7f3      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
 8015a04:	2001      	movs	r0, #1
 8015a06:	e7f1      	b.n	80159ec <HAL_RCC_OscConfig+0x3d4>
 8015a08:	40023800 	.word	0x40023800
 8015a0c:	42470000 	.word	0x42470000

08015a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015a10:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8015a12:	4b33      	ldr	r3, [pc, #204]	@ (8015ae0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8015a14:	689b      	ldr	r3, [r3, #8]
 8015a16:	f003 030c 	and.w	r3, r3, #12
 8015a1a:	2b04      	cmp	r3, #4
 8015a1c:	d05b      	beq.n	8015ad6 <HAL_RCC_GetSysClockFreq+0xc6>
 8015a1e:	2b08      	cmp	r3, #8
 8015a20:	d15b      	bne.n	8015ada <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8015a22:	4b2f      	ldr	r3, [pc, #188]	@ (8015ae0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8015a24:	685a      	ldr	r2, [r3, #4]
 8015a26:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8015a2a:	685b      	ldr	r3, [r3, #4]
 8015a2c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8015a30:	d02c      	beq.n	8015a8c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8015a32:	4b2b      	ldr	r3, [pc, #172]	@ (8015ae0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8015a34:	6858      	ldr	r0, [r3, #4]
 8015a36:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8015a3a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8015a3e:	ebbc 0c00 	subs.w	ip, ip, r0
 8015a42:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8015a46:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8015a4a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8015a4e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8015a52:	ebb1 010c 	subs.w	r1, r1, ip
 8015a56:	eb63 030e 	sbc.w	r3, r3, lr
 8015a5a:	00db      	lsls	r3, r3, #3
 8015a5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015a60:	00c9      	lsls	r1, r1, #3
 8015a62:	eb11 0c00 	adds.w	ip, r1, r0
 8015a66:	f143 0300 	adc.w	r3, r3, #0
 8015a6a:	0259      	lsls	r1, r3, #9
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8015a72:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8015a76:	f7fb f96f 	bl	8010d58 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8015a7a:	4b19      	ldr	r3, [pc, #100]	@ (8015ae0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8015a7c:	685b      	ldr	r3, [r3, #4]
 8015a7e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8015a82:	3301      	adds	r3, #1
 8015a84:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8015a86:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8015a8a:	e027      	b.n	8015adc <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8015a8c:	4b14      	ldr	r3, [pc, #80]	@ (8015ae0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8015a8e:	6858      	ldr	r0, [r3, #4]
 8015a90:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8015a94:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8015a98:	ebbc 0c00 	subs.w	ip, ip, r0
 8015a9c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8015aa0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8015aa4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8015aa8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8015aac:	ebb1 010c 	subs.w	r1, r1, ip
 8015ab0:	eb63 030e 	sbc.w	r3, r3, lr
 8015ab4:	00db      	lsls	r3, r3, #3
 8015ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015aba:	00c9      	lsls	r1, r1, #3
 8015abc:	eb11 0c00 	adds.w	ip, r1, r0
 8015ac0:	f143 0300 	adc.w	r3, r3, #0
 8015ac4:	0299      	lsls	r1, r3, #10
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8015acc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8015ad0:	f7fb f942 	bl	8010d58 <__aeabi_uldivmod>
 8015ad4:	e7d1      	b.n	8015a7a <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8015ad6:	4803      	ldr	r0, [pc, #12]	@ (8015ae4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8015ad8:	e000      	b.n	8015adc <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8015ada:	4803      	ldr	r0, [pc, #12]	@ (8015ae8 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8015adc:	bd08      	pop	{r3, pc}
 8015ade:	bf00      	nop
 8015ae0:	40023800 	.word	0x40023800
 8015ae4:	007a1200 	.word	0x007a1200
 8015ae8:	00f42400 	.word	0x00f42400

08015aec <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8015aec:	2800      	cmp	r0, #0
 8015aee:	f000 809b 	beq.w	8015c28 <HAL_RCC_ClockConfig+0x13c>
{
 8015af2:	b570      	push	{r4, r5, r6, lr}
 8015af4:	460d      	mov	r5, r1
 8015af6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8015af8:	4b4f      	ldr	r3, [pc, #316]	@ (8015c38 <HAL_RCC_ClockConfig+0x14c>)
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	f003 0307 	and.w	r3, r3, #7
 8015b00:	428b      	cmp	r3, r1
 8015b02:	d208      	bcs.n	8015b16 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015b04:	b2cb      	uxtb	r3, r1
 8015b06:	4a4c      	ldr	r2, [pc, #304]	@ (8015c38 <HAL_RCC_ClockConfig+0x14c>)
 8015b08:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015b0a:	6813      	ldr	r3, [r2, #0]
 8015b0c:	f003 0307 	and.w	r3, r3, #7
 8015b10:	428b      	cmp	r3, r1
 8015b12:	f040 808b 	bne.w	8015c2c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015b16:	6823      	ldr	r3, [r4, #0]
 8015b18:	f013 0f02 	tst.w	r3, #2
 8015b1c:	d017      	beq.n	8015b4e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015b1e:	f013 0f04 	tst.w	r3, #4
 8015b22:	d004      	beq.n	8015b2e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8015b24:	4a45      	ldr	r2, [pc, #276]	@ (8015c3c <HAL_RCC_ClockConfig+0x150>)
 8015b26:	6893      	ldr	r3, [r2, #8]
 8015b28:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8015b2c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015b2e:	6823      	ldr	r3, [r4, #0]
 8015b30:	f013 0f08 	tst.w	r3, #8
 8015b34:	d004      	beq.n	8015b40 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8015b36:	4a41      	ldr	r2, [pc, #260]	@ (8015c3c <HAL_RCC_ClockConfig+0x150>)
 8015b38:	6893      	ldr	r3, [r2, #8]
 8015b3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8015b3e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015b40:	4a3e      	ldr	r2, [pc, #248]	@ (8015c3c <HAL_RCC_ClockConfig+0x150>)
 8015b42:	6893      	ldr	r3, [r2, #8]
 8015b44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8015b48:	68a1      	ldr	r1, [r4, #8]
 8015b4a:	430b      	orrs	r3, r1
 8015b4c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8015b4e:	6823      	ldr	r3, [r4, #0]
 8015b50:	f013 0f01 	tst.w	r3, #1
 8015b54:	d032      	beq.n	8015bbc <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015b56:	6863      	ldr	r3, [r4, #4]
 8015b58:	2b01      	cmp	r3, #1
 8015b5a:	d021      	beq.n	8015ba0 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8015b5c:	1e9a      	subs	r2, r3, #2
 8015b5e:	2a01      	cmp	r2, #1
 8015b60:	d925      	bls.n	8015bae <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015b62:	4a36      	ldr	r2, [pc, #216]	@ (8015c3c <HAL_RCC_ClockConfig+0x150>)
 8015b64:	6812      	ldr	r2, [r2, #0]
 8015b66:	f012 0f02 	tst.w	r2, #2
 8015b6a:	d061      	beq.n	8015c30 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8015b6c:	4933      	ldr	r1, [pc, #204]	@ (8015c3c <HAL_RCC_ClockConfig+0x150>)
 8015b6e:	688a      	ldr	r2, [r1, #8]
 8015b70:	f022 0203 	bic.w	r2, r2, #3
 8015b74:	4313      	orrs	r3, r2
 8015b76:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8015b78:	f7fe ff2e 	bl	80149d8 <HAL_GetTick>
 8015b7c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8015c3c <HAL_RCC_ClockConfig+0x150>)
 8015b80:	689b      	ldr	r3, [r3, #8]
 8015b82:	f003 030c 	and.w	r3, r3, #12
 8015b86:	6862      	ldr	r2, [r4, #4]
 8015b88:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8015b8c:	d016      	beq.n	8015bbc <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015b8e:	f7fe ff23 	bl	80149d8 <HAL_GetTick>
 8015b92:	1b80      	subs	r0, r0, r6
 8015b94:	f241 3388 	movw	r3, #5000	@ 0x1388
 8015b98:	4298      	cmp	r0, r3
 8015b9a:	d9f0      	bls.n	8015b7e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8015b9c:	2003      	movs	r0, #3
 8015b9e:	e042      	b.n	8015c26 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015ba0:	4a26      	ldr	r2, [pc, #152]	@ (8015c3c <HAL_RCC_ClockConfig+0x150>)
 8015ba2:	6812      	ldr	r2, [r2, #0]
 8015ba4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8015ba8:	d1e0      	bne.n	8015b6c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8015baa:	2001      	movs	r0, #1
 8015bac:	e03b      	b.n	8015c26 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8015bae:	4a23      	ldr	r2, [pc, #140]	@ (8015c3c <HAL_RCC_ClockConfig+0x150>)
 8015bb0:	6812      	ldr	r2, [r2, #0]
 8015bb2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8015bb6:	d1d9      	bne.n	8015b6c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8015bb8:	2001      	movs	r0, #1
 8015bba:	e034      	b.n	8015c26 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8015bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8015c38 <HAL_RCC_ClockConfig+0x14c>)
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	f003 0307 	and.w	r3, r3, #7
 8015bc4:	42ab      	cmp	r3, r5
 8015bc6:	d907      	bls.n	8015bd8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015bc8:	b2ea      	uxtb	r2, r5
 8015bca:	4b1b      	ldr	r3, [pc, #108]	@ (8015c38 <HAL_RCC_ClockConfig+0x14c>)
 8015bcc:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	f003 0307 	and.w	r3, r3, #7
 8015bd4:	42ab      	cmp	r3, r5
 8015bd6:	d12d      	bne.n	8015c34 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015bd8:	6823      	ldr	r3, [r4, #0]
 8015bda:	f013 0f04 	tst.w	r3, #4
 8015bde:	d006      	beq.n	8015bee <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8015be0:	4a16      	ldr	r2, [pc, #88]	@ (8015c3c <HAL_RCC_ClockConfig+0x150>)
 8015be2:	6893      	ldr	r3, [r2, #8]
 8015be4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8015be8:	68e1      	ldr	r1, [r4, #12]
 8015bea:	430b      	orrs	r3, r1
 8015bec:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015bee:	6823      	ldr	r3, [r4, #0]
 8015bf0:	f013 0f08 	tst.w	r3, #8
 8015bf4:	d007      	beq.n	8015c06 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8015bf6:	4a11      	ldr	r2, [pc, #68]	@ (8015c3c <HAL_RCC_ClockConfig+0x150>)
 8015bf8:	6893      	ldr	r3, [r2, #8]
 8015bfa:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8015bfe:	6921      	ldr	r1, [r4, #16]
 8015c00:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8015c04:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8015c06:	f7ff ff03 	bl	8015a10 <HAL_RCC_GetSysClockFreq>
 8015c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8015c3c <HAL_RCC_ClockConfig+0x150>)
 8015c0c:	689b      	ldr	r3, [r3, #8]
 8015c0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8015c12:	4a0b      	ldr	r2, [pc, #44]	@ (8015c40 <HAL_RCC_ClockConfig+0x154>)
 8015c14:	5cd3      	ldrb	r3, [r2, r3]
 8015c16:	40d8      	lsrs	r0, r3
 8015c18:	4b0a      	ldr	r3, [pc, #40]	@ (8015c44 <HAL_RCC_ClockConfig+0x158>)
 8015c1a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8015c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8015c48 <HAL_RCC_ClockConfig+0x15c>)
 8015c1e:	6818      	ldr	r0, [r3, #0]
 8015c20:	f7fc fa1a 	bl	8012058 <HAL_InitTick>
  return HAL_OK;
 8015c24:	2000      	movs	r0, #0
}
 8015c26:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8015c28:	2001      	movs	r0, #1
}
 8015c2a:	4770      	bx	lr
      return HAL_ERROR;
 8015c2c:	2001      	movs	r0, #1
 8015c2e:	e7fa      	b.n	8015c26 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8015c30:	2001      	movs	r0, #1
 8015c32:	e7f8      	b.n	8015c26 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8015c34:	2001      	movs	r0, #1
 8015c36:	e7f6      	b.n	8015c26 <HAL_RCC_ClockConfig+0x13a>
 8015c38:	40023c00 	.word	0x40023c00
 8015c3c:	40023800 	.word	0x40023800
 8015c40:	08033454 	.word	0x08033454
 8015c44:	20000018 	.word	0x20000018
 8015c48:	20000084 	.word	0x20000084

08015c4c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8015c4c:	4b01      	ldr	r3, [pc, #4]	@ (8015c54 <HAL_RCC_GetHCLKFreq+0x8>)
 8015c4e:	6818      	ldr	r0, [r3, #0]
 8015c50:	4770      	bx	lr
 8015c52:	bf00      	nop
 8015c54:	20000018 	.word	0x20000018

08015c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015c58:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8015c5a:	f7ff fff7 	bl	8015c4c <HAL_RCC_GetHCLKFreq>
 8015c5e:	4b04      	ldr	r3, [pc, #16]	@ (8015c70 <HAL_RCC_GetPCLK1Freq+0x18>)
 8015c60:	689b      	ldr	r3, [r3, #8]
 8015c62:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8015c66:	4a03      	ldr	r2, [pc, #12]	@ (8015c74 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8015c68:	5cd3      	ldrb	r3, [r2, r3]
}
 8015c6a:	40d8      	lsrs	r0, r3
 8015c6c:	bd08      	pop	{r3, pc}
 8015c6e:	bf00      	nop
 8015c70:	40023800 	.word	0x40023800
 8015c74:	0803344c 	.word	0x0803344c

08015c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015c78:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8015c7a:	f7ff ffe7 	bl	8015c4c <HAL_RCC_GetHCLKFreq>
 8015c7e:	4b04      	ldr	r3, [pc, #16]	@ (8015c90 <HAL_RCC_GetPCLK2Freq+0x18>)
 8015c80:	689b      	ldr	r3, [r3, #8]
 8015c82:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8015c86:	4a03      	ldr	r2, [pc, #12]	@ (8015c94 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8015c88:	5cd3      	ldrb	r3, [r2, r3]
}
 8015c8a:	40d8      	lsrs	r0, r3
 8015c8c:	bd08      	pop	{r3, pc}
 8015c8e:	bf00      	nop
 8015c90:	40023800 	.word	0x40023800
 8015c94:	0803344c 	.word	0x0803344c

08015c98 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8015c98:	230f      	movs	r3, #15
 8015c9a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8015c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8015ccc <HAL_RCC_GetClockConfig+0x34>)
 8015c9e:	689a      	ldr	r2, [r3, #8]
 8015ca0:	f002 0203 	and.w	r2, r2, #3
 8015ca4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8015ca6:	689a      	ldr	r2, [r3, #8]
 8015ca8:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8015cac:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8015cae:	689a      	ldr	r2, [r3, #8]
 8015cb0:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8015cb4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8015cb6:	689b      	ldr	r3, [r3, #8]
 8015cb8:	08db      	lsrs	r3, r3, #3
 8015cba:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8015cbe:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8015cc0:	4b03      	ldr	r3, [pc, #12]	@ (8015cd0 <HAL_RCC_GetClockConfig+0x38>)
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	f003 0307 	and.w	r3, r3, #7
 8015cc8:	600b      	str	r3, [r1, #0]
}
 8015cca:	4770      	bx	lr
 8015ccc:	40023800 	.word	0x40023800
 8015cd0:	40023c00 	.word	0x40023c00

08015cd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8015cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cd8:	b082      	sub	sp, #8
 8015cda:	4605      	mov	r5, r0
 8015cdc:	4688      	mov	r8, r1
 8015cde:	4617      	mov	r7, r2
 8015ce0:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8015ce2:	f7fe fe79 	bl	80149d8 <HAL_GetTick>
 8015ce6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015ce8:	1a1b      	subs	r3, r3, r0
 8015cea:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8015cee:	f7fe fe73 	bl	80149d8 <HAL_GetTick>
 8015cf2:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8015cf4:	4b28      	ldr	r3, [pc, #160]	@ (8015d98 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8015cfc:	fb09 f303 	mul.w	r3, r9, r3
 8015d00:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8015d02:	682b      	ldr	r3, [r5, #0]
 8015d04:	689c      	ldr	r4, [r3, #8]
 8015d06:	ea38 0404 	bics.w	r4, r8, r4
 8015d0a:	bf0c      	ite	eq
 8015d0c:	2301      	moveq	r3, #1
 8015d0e:	2300      	movne	r3, #0
 8015d10:	42bb      	cmp	r3, r7
 8015d12:	d03d      	beq.n	8015d90 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8015d14:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8015d18:	d0f3      	beq.n	8015d02 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8015d1a:	f7fe fe5d 	bl	80149d8 <HAL_GetTick>
 8015d1e:	eba0 000a 	sub.w	r0, r0, sl
 8015d22:	4548      	cmp	r0, r9
 8015d24:	d207      	bcs.n	8015d36 <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8015d26:	9a01      	ldr	r2, [sp, #4]
 8015d28:	b102      	cbz	r2, 8015d2c <SPI_WaitFlagStateUntilTimeout+0x58>
 8015d2a:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8015d2c:	9b01      	ldr	r3, [sp, #4]
 8015d2e:	3b01      	subs	r3, #1
 8015d30:	9301      	str	r3, [sp, #4]
 8015d32:	4691      	mov	r9, r2
 8015d34:	e7e5      	b.n	8015d02 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8015d36:	682a      	ldr	r2, [r5, #0]
 8015d38:	6853      	ldr	r3, [r2, #4]
 8015d3a:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8015d3e:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015d40:	686b      	ldr	r3, [r5, #4]
 8015d42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8015d46:	d00b      	beq.n	8015d60 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8015d48:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8015d4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015d4e:	d014      	beq.n	8015d7a <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8015d50:	2301      	movs	r3, #1
 8015d52:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8015d56:	2300      	movs	r3, #0
 8015d58:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8015d5c:	2003      	movs	r0, #3
 8015d5e:	e018      	b.n	8015d92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015d60:	68ab      	ldr	r3, [r5, #8]
 8015d62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015d66:	d002      	beq.n	8015d6e <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015d6c:	d1ec      	bne.n	8015d48 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8015d6e:	682a      	ldr	r2, [r5, #0]
 8015d70:	6813      	ldr	r3, [r2, #0]
 8015d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015d76:	6013      	str	r3, [r2, #0]
 8015d78:	e7e6      	b.n	8015d48 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8015d7a:	682a      	ldr	r2, [r5, #0]
 8015d7c:	6813      	ldr	r3, [r2, #0]
 8015d7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8015d82:	6013      	str	r3, [r2, #0]
 8015d84:	682a      	ldr	r2, [r5, #0]
 8015d86:	6813      	ldr	r3, [r2, #0]
 8015d88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8015d8c:	6013      	str	r3, [r2, #0]
 8015d8e:	e7df      	b.n	8015d50 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8015d90:	2000      	movs	r0, #0
}
 8015d92:	b002      	add	sp, #8
 8015d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d98:	20000018 	.word	0x20000018

08015d9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8015d9c:	b570      	push	{r4, r5, r6, lr}
 8015d9e:	b084      	sub	sp, #16
 8015da0:	4604      	mov	r4, r0
 8015da2:	460d      	mov	r5, r1
 8015da4:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8015da6:	9200      	str	r2, [sp, #0]
 8015da8:	460b      	mov	r3, r1
 8015daa:	2201      	movs	r2, #1
 8015dac:	2102      	movs	r1, #2
 8015dae:	f7ff ff91 	bl	8015cd4 <SPI_WaitFlagStateUntilTimeout>
 8015db2:	b9d0      	cbnz	r0, 8015dea <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8015db4:	4b17      	ldr	r3, [pc, #92]	@ (8015e14 <SPI_EndRxTxTransaction+0x78>)
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	4a17      	ldr	r2, [pc, #92]	@ (8015e18 <SPI_EndRxTxTransaction+0x7c>)
 8015dba:	fba2 2303 	umull	r2, r3, r2, r3
 8015dbe:	0d5b      	lsrs	r3, r3, #21
 8015dc0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015dc4:	fb02 f303 	mul.w	r3, r2, r3
 8015dc8:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015dca:	6863      	ldr	r3, [r4, #4]
 8015dcc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8015dd0:	d011      	beq.n	8015df6 <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8015dd2:	9b03      	ldr	r3, [sp, #12]
 8015dd4:	b13b      	cbz	r3, 8015de6 <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 8015dd6:	9b03      	ldr	r3, [sp, #12]
 8015dd8:	3b01      	subs	r3, #1
 8015dda:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8015ddc:	6823      	ldr	r3, [r4, #0]
 8015dde:	689b      	ldr	r3, [r3, #8]
 8015de0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015de4:	d1f5      	bne.n	8015dd2 <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 8015de6:	b004      	add	sp, #16
 8015de8:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015dea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8015dec:	f043 0320 	orr.w	r3, r3, #32
 8015df0:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8015df2:	2003      	movs	r0, #3
 8015df4:	e7f7      	b.n	8015de6 <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8015df6:	9600      	str	r6, [sp, #0]
 8015df8:	462b      	mov	r3, r5
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	2180      	movs	r1, #128	@ 0x80
 8015dfe:	4620      	mov	r0, r4
 8015e00:	f7ff ff68 	bl	8015cd4 <SPI_WaitFlagStateUntilTimeout>
 8015e04:	2800      	cmp	r0, #0
 8015e06:	d0ee      	beq.n	8015de6 <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015e08:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8015e0a:	f043 0320 	orr.w	r3, r3, #32
 8015e0e:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8015e10:	2003      	movs	r0, #3
 8015e12:	e7e8      	b.n	8015de6 <SPI_EndRxTxTransaction+0x4a>
 8015e14:	20000018 	.word	0x20000018
 8015e18:	165e9f81 	.word	0x165e9f81

08015e1c <SPI_EndRxTransaction>:
{
 8015e1c:	b510      	push	{r4, lr}
 8015e1e:	b082      	sub	sp, #8
 8015e20:	4604      	mov	r4, r0
 8015e22:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015e24:	6841      	ldr	r1, [r0, #4]
 8015e26:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8015e2a:	d014      	beq.n	8015e56 <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015e2c:	6861      	ldr	r1, [r4, #4]
 8015e2e:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8015e32:	d12a      	bne.n	8015e8a <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8015e34:	68a1      	ldr	r1, [r4, #8]
 8015e36:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8015e3a:	d019      	beq.n	8015e70 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8015e3c:	9200      	str	r2, [sp, #0]
 8015e3e:	2200      	movs	r2, #0
 8015e40:	2180      	movs	r1, #128	@ 0x80
 8015e42:	4620      	mov	r0, r4
 8015e44:	f7ff ff46 	bl	8015cd4 <SPI_WaitFlagStateUntilTimeout>
 8015e48:	b330      	cbz	r0, 8015e98 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015e4a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8015e4c:	f043 0320 	orr.w	r3, r3, #32
 8015e50:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8015e52:	2003      	movs	r0, #3
 8015e54:	e020      	b.n	8015e98 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015e56:	6881      	ldr	r1, [r0, #8]
 8015e58:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8015e5c:	d002      	beq.n	8015e64 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015e5e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8015e62:	d1e3      	bne.n	8015e2c <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8015e64:	6820      	ldr	r0, [r4, #0]
 8015e66:	6801      	ldr	r1, [r0, #0]
 8015e68:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8015e6c:	6001      	str	r1, [r0, #0]
 8015e6e:	e7dd      	b.n	8015e2c <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8015e70:	9200      	str	r2, [sp, #0]
 8015e72:	2200      	movs	r2, #0
 8015e74:	2101      	movs	r1, #1
 8015e76:	4620      	mov	r0, r4
 8015e78:	f7ff ff2c 	bl	8015cd4 <SPI_WaitFlagStateUntilTimeout>
 8015e7c:	b160      	cbz	r0, 8015e98 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015e7e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8015e80:	f043 0320 	orr.w	r3, r3, #32
 8015e84:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8015e86:	2003      	movs	r0, #3
 8015e88:	e006      	b.n	8015e98 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8015e8a:	9200      	str	r2, [sp, #0]
 8015e8c:	2200      	movs	r2, #0
 8015e8e:	2101      	movs	r1, #1
 8015e90:	4620      	mov	r0, r4
 8015e92:	f7ff ff1f 	bl	8015cd4 <SPI_WaitFlagStateUntilTimeout>
 8015e96:	b908      	cbnz	r0, 8015e9c <SPI_EndRxTransaction+0x80>
}
 8015e98:	b002      	add	sp, #8
 8015e9a:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015e9c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8015e9e:	f043 0320 	orr.w	r3, r3, #32
 8015ea2:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8015ea4:	2003      	movs	r0, #3
 8015ea6:	e7f7      	b.n	8015e98 <SPI_EndRxTransaction+0x7c>

08015ea8 <HAL_SPI_Init>:
  if (hspi == NULL)
 8015ea8:	2800      	cmp	r0, #0
 8015eaa:	d05a      	beq.n	8015f62 <HAL_SPI_Init+0xba>
{
 8015eac:	b510      	push	{r4, lr}
 8015eae:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8015eb0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8015eb2:	b933      	cbnz	r3, 8015ec2 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015eb4:	6843      	ldr	r3, [r0, #4]
 8015eb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8015eba:	d005      	beq.n	8015ec8 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	61c3      	str	r3, [r0, #28]
 8015ec0:	e002      	b.n	8015ec8 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8015ec6:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8015ec8:	2300      	movs	r3, #0
 8015eca:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8015ecc:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d040      	beq.n	8015f56 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8015ed4:	2302      	movs	r3, #2
 8015ed6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8015eda:	6822      	ldr	r2, [r4, #0]
 8015edc:	6813      	ldr	r3, [r2, #0]
 8015ede:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015ee2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8015ee4:	6863      	ldr	r3, [r4, #4]
 8015ee6:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8015eea:	68a2      	ldr	r2, [r4, #8]
 8015eec:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8015ef0:	4313      	orrs	r3, r2
 8015ef2:	68e2      	ldr	r2, [r4, #12]
 8015ef4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8015ef8:	4313      	orrs	r3, r2
 8015efa:	6922      	ldr	r2, [r4, #16]
 8015efc:	f002 0202 	and.w	r2, r2, #2
 8015f00:	4313      	orrs	r3, r2
 8015f02:	6962      	ldr	r2, [r4, #20]
 8015f04:	f002 0201 	and.w	r2, r2, #1
 8015f08:	4313      	orrs	r3, r2
 8015f0a:	69a2      	ldr	r2, [r4, #24]
 8015f0c:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8015f10:	4313      	orrs	r3, r2
 8015f12:	69e2      	ldr	r2, [r4, #28]
 8015f14:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8015f18:	4313      	orrs	r3, r2
 8015f1a:	6a22      	ldr	r2, [r4, #32]
 8015f1c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8015f20:	4313      	orrs	r3, r2
 8015f22:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8015f24:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8015f28:	6821      	ldr	r1, [r4, #0]
 8015f2a:	4313      	orrs	r3, r2
 8015f2c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8015f2e:	8b63      	ldrh	r3, [r4, #26]
 8015f30:	f003 0304 	and.w	r3, r3, #4
 8015f34:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015f36:	f002 0210 	and.w	r2, r2, #16
 8015f3a:	6821      	ldr	r1, [r4, #0]
 8015f3c:	4313      	orrs	r3, r2
 8015f3e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8015f40:	6822      	ldr	r2, [r4, #0]
 8015f42:	69d3      	ldr	r3, [r2, #28]
 8015f44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015f48:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8015f4a:	2000      	movs	r0, #0
 8015f4c:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8015f4e:	2301      	movs	r3, #1
 8015f50:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8015f54:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8015f56:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8015f5a:	4620      	mov	r0, r4
 8015f5c:	f7fb fff8 	bl	8011f50 <HAL_SPI_MspInit>
 8015f60:	e7b8      	b.n	8015ed4 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8015f62:	2001      	movs	r0, #1
}
 8015f64:	4770      	bx	lr

08015f66 <HAL_SPI_Transmit>:
{
 8015f66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f6a:	b083      	sub	sp, #12
 8015f6c:	4604      	mov	r4, r0
 8015f6e:	4689      	mov	r9, r1
 8015f70:	4690      	mov	r8, r2
 8015f72:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 8015f74:	f7fe fd30 	bl	80149d8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8015f78:	f894 6051 	ldrb.w	r6, [r4, #81]	@ 0x51
 8015f7c:	b2f6      	uxtb	r6, r6
 8015f7e:	2e01      	cmp	r6, #1
 8015f80:	f040 80cc 	bne.w	801611c <HAL_SPI_Transmit+0x1b6>
 8015f84:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8015f86:	f1b9 0f00 	cmp.w	r9, #0
 8015f8a:	f000 80c8 	beq.w	801611e <HAL_SPI_Transmit+0x1b8>
 8015f8e:	f1b8 0f00 	cmp.w	r8, #0
 8015f92:	f000 80c4 	beq.w	801611e <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 8015f96:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8015f9a:	2b01      	cmp	r3, #1
 8015f9c:	f000 80c3 	beq.w	8016126 <HAL_SPI_Transmit+0x1c0>
 8015fa0:	2301      	movs	r3, #1
 8015fa2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8015fa6:	2303      	movs	r3, #3
 8015fa8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015fac:	2300      	movs	r3, #0
 8015fae:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8015fb0:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8015fb4:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8015fb8:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8015fbc:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8015fbe:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8015fc0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8015fc2:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8015fc4:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015fc6:	68a3      	ldr	r3, [r4, #8]
 8015fc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015fcc:	d01e      	beq.n	801600c <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8015fce:	6823      	ldr	r3, [r4, #0]
 8015fd0:	681a      	ldr	r2, [r3, #0]
 8015fd2:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8015fd6:	d103      	bne.n	8015fe0 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8015fd8:	681a      	ldr	r2, [r3, #0]
 8015fda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015fde:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8015fe0:	68e3      	ldr	r3, [r4, #12]
 8015fe2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015fe6:	d01c      	beq.n	8016022 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8015fe8:	6863      	ldr	r3, [r4, #4]
 8015fea:	b113      	cbz	r3, 8015ff2 <HAL_SPI_Transmit+0x8c>
 8015fec:	f1b8 0f01 	cmp.w	r8, #1
 8015ff0:	d15f      	bne.n	80160b2 <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8015ff2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015ff4:	6823      	ldr	r3, [r4, #0]
 8015ff6:	7812      	ldrb	r2, [r2, #0]
 8015ff8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8015ffa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ffc:	3301      	adds	r3, #1
 8015ffe:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8016000:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016002:	b29b      	uxth	r3, r3
 8016004:	3b01      	subs	r3, #1
 8016006:	b29b      	uxth	r3, r3
 8016008:	86e3      	strh	r3, [r4, #54]	@ 0x36
 801600a:	e052      	b.n	80160b2 <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 801600c:	6822      	ldr	r2, [r4, #0]
 801600e:	6813      	ldr	r3, [r2, #0]
 8016010:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016014:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8016016:	6822      	ldr	r2, [r4, #0]
 8016018:	6813      	ldr	r3, [r2, #0]
 801601a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801601e:	6013      	str	r3, [r2, #0]
 8016020:	e7d5      	b.n	8015fce <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016022:	6863      	ldr	r3, [r4, #4]
 8016024:	b113      	cbz	r3, 801602c <HAL_SPI_Transmit+0xc6>
 8016026:	f1b8 0f01 	cmp.w	r8, #1
 801602a:	d115      	bne.n	8016058 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801602c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801602e:	6823      	ldr	r3, [r4, #0]
 8016030:	8812      	ldrh	r2, [r2, #0]
 8016032:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8016034:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016036:	3302      	adds	r3, #2
 8016038:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 801603a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801603c:	b29b      	uxth	r3, r3
 801603e:	3b01      	subs	r3, #1
 8016040:	b29b      	uxth	r3, r3
 8016042:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8016044:	e008      	b.n	8016058 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016046:	f7fe fcc7 	bl	80149d8 <HAL_GetTick>
 801604a:	1bc0      	subs	r0, r0, r7
 801604c:	42a8      	cmp	r0, r5
 801604e:	d302      	bcc.n	8016056 <HAL_SPI_Transmit+0xf0>
 8016050:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8016054:	d115      	bne.n	8016082 <HAL_SPI_Transmit+0x11c>
 8016056:	b1a5      	cbz	r5, 8016082 <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 8016058:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801605a:	b29b      	uxth	r3, r3
 801605c:	2b00      	cmp	r3, #0
 801605e:	d042      	beq.n	80160e6 <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016060:	6823      	ldr	r3, [r4, #0]
 8016062:	689a      	ldr	r2, [r3, #8]
 8016064:	f012 0f02 	tst.w	r2, #2
 8016068:	d0ed      	beq.n	8016046 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801606a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801606c:	8812      	ldrh	r2, [r2, #0]
 801606e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8016070:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016072:	3302      	adds	r3, #2
 8016074:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8016076:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016078:	b29b      	uxth	r3, r3
 801607a:	3b01      	subs	r3, #1
 801607c:	b29b      	uxth	r3, r3
 801607e:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8016080:	e7ea      	b.n	8016058 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 8016082:	2301      	movs	r3, #1
 8016084:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8016088:	2300      	movs	r3, #0
 801608a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 801608e:	2603      	movs	r6, #3
 8016090:	e045      	b.n	801611e <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8016092:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016094:	7812      	ldrb	r2, [r2, #0]
 8016096:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8016098:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801609a:	3301      	adds	r3, #1
 801609c:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 801609e:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 80160a2:	fa1f fc8c 	uxth.w	ip, ip
 80160a6:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80160aa:	fa1f fc8c 	uxth.w	ip, ip
 80160ae:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80160b2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80160b4:	b29b      	uxth	r3, r3
 80160b6:	b1b3      	cbz	r3, 80160e6 <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80160b8:	6823      	ldr	r3, [r4, #0]
 80160ba:	689a      	ldr	r2, [r3, #8]
 80160bc:	f012 0f02 	tst.w	r2, #2
 80160c0:	d1e7      	bne.n	8016092 <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80160c2:	f7fe fc89 	bl	80149d8 <HAL_GetTick>
 80160c6:	1bc0      	subs	r0, r0, r7
 80160c8:	42a8      	cmp	r0, r5
 80160ca:	d302      	bcc.n	80160d2 <HAL_SPI_Transmit+0x16c>
 80160cc:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80160d0:	d101      	bne.n	80160d6 <HAL_SPI_Transmit+0x170>
 80160d2:	2d00      	cmp	r5, #0
 80160d4:	d1ed      	bne.n	80160b2 <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 80160d6:	2301      	movs	r3, #1
 80160d8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80160dc:	2300      	movs	r3, #0
 80160de:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80160e2:	2603      	movs	r6, #3
 80160e4:	e01b      	b.n	801611e <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80160e6:	463a      	mov	r2, r7
 80160e8:	4629      	mov	r1, r5
 80160ea:	4620      	mov	r0, r4
 80160ec:	f7ff fe56 	bl	8015d9c <SPI_EndRxTxTransaction>
 80160f0:	b108      	cbz	r0, 80160f6 <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80160f2:	2320      	movs	r3, #32
 80160f4:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80160f6:	68a3      	ldr	r3, [r4, #8]
 80160f8:	b933      	cbnz	r3, 8016108 <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80160fa:	9301      	str	r3, [sp, #4]
 80160fc:	6823      	ldr	r3, [r4, #0]
 80160fe:	68da      	ldr	r2, [r3, #12]
 8016100:	9201      	str	r2, [sp, #4]
 8016102:	689b      	ldr	r3, [r3, #8]
 8016104:	9301      	str	r3, [sp, #4]
 8016106:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8016108:	2301      	movs	r3, #1
 801610a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 801610e:	2300      	movs	r3, #0
 8016110:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016114:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8016116:	b913      	cbnz	r3, 801611e <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 8016118:	2600      	movs	r6, #0
 801611a:	e000      	b.n	801611e <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 801611c:	2602      	movs	r6, #2
}
 801611e:	4630      	mov	r0, r6
 8016120:	b003      	add	sp, #12
 8016122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8016126:	2602      	movs	r6, #2
 8016128:	e7f9      	b.n	801611e <HAL_SPI_Transmit+0x1b8>

0801612a <HAL_SPI_TransmitReceive>:
{
 801612a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801612e:	b083      	sub	sp, #12
 8016130:	4604      	mov	r4, r0
 8016132:	4688      	mov	r8, r1
 8016134:	4691      	mov	r9, r2
 8016136:	461f      	mov	r7, r3
 8016138:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 801613a:	f7fe fc4d 	bl	80149d8 <HAL_GetTick>
 801613e:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8016140:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8016144:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8016146:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8016148:	2b01      	cmp	r3, #1
 801614a:	d00a      	beq.n	8016162 <HAL_SPI_TransmitReceive+0x38>
 801614c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8016150:	f040 8105 	bne.w	801635e <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8016154:	68a2      	ldr	r2, [r4, #8]
 8016156:	2a00      	cmp	r2, #0
 8016158:	f040 8105 	bne.w	8016366 <HAL_SPI_TransmitReceive+0x23c>
 801615c:	2b04      	cmp	r3, #4
 801615e:	f040 8104 	bne.w	801636a <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8016162:	f1b8 0f00 	cmp.w	r8, #0
 8016166:	f000 8102 	beq.w	801636e <HAL_SPI_TransmitReceive+0x244>
 801616a:	f1b9 0f00 	cmp.w	r9, #0
 801616e:	f000 8100 	beq.w	8016372 <HAL_SPI_TransmitReceive+0x248>
 8016172:	2f00      	cmp	r7, #0
 8016174:	f000 80ff 	beq.w	8016376 <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 8016178:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 801617c:	2b01      	cmp	r3, #1
 801617e:	f000 80fc 	beq.w	801637a <HAL_SPI_TransmitReceive+0x250>
 8016182:	2301      	movs	r3, #1
 8016184:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8016188:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 801618c:	b2db      	uxtb	r3, r3
 801618e:	2b04      	cmp	r3, #4
 8016190:	d002      	beq.n	8016198 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8016192:	2305      	movs	r3, #5
 8016194:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016198:	2300      	movs	r3, #0
 801619a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801619c:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80161a0:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80161a2:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80161a4:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80161a8:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80161aa:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 80161ac:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80161ae:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80161b0:	6823      	ldr	r3, [r4, #0]
 80161b2:	681a      	ldr	r2, [r3, #0]
 80161b4:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80161b8:	d103      	bne.n	80161c2 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80161ba:	681a      	ldr	r2, [r3, #0]
 80161bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80161c0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80161c2:	68e3      	ldr	r3, [r4, #12]
 80161c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80161c8:	d011      	beq.n	80161ee <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80161ca:	6863      	ldr	r3, [r4, #4]
 80161cc:	b10b      	cbz	r3, 80161d2 <HAL_SPI_TransmitReceive+0xa8>
 80161ce:	2f01      	cmp	r7, #1
 80161d0:	d10b      	bne.n	80161ea <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80161d2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80161d4:	6823      	ldr	r3, [r4, #0]
 80161d6:	7812      	ldrb	r2, [r2, #0]
 80161d8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80161da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80161dc:	3301      	adds	r3, #1
 80161de:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80161e0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80161e2:	b29b      	uxth	r3, r3
 80161e4:	3b01      	subs	r3, #1
 80161e6:	b29b      	uxth	r3, r3
 80161e8:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80161ea:	2701      	movs	r7, #1
 80161ec:	e071      	b.n	80162d2 <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80161ee:	6863      	ldr	r3, [r4, #4]
 80161f0:	b10b      	cbz	r3, 80161f6 <HAL_SPI_TransmitReceive+0xcc>
 80161f2:	2f01      	cmp	r7, #1
 80161f4:	d10b      	bne.n	801620e <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80161f6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80161f8:	6823      	ldr	r3, [r4, #0]
 80161fa:	8812      	ldrh	r2, [r2, #0]
 80161fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80161fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016200:	3302      	adds	r3, #2
 8016202:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8016204:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016206:	b29b      	uxth	r3, r3
 8016208:	3b01      	subs	r3, #1
 801620a:	b29b      	uxth	r3, r3
 801620c:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 801620e:	2701      	movs	r7, #1
 8016210:	e01b      	b.n	801624a <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8016212:	6823      	ldr	r3, [r4, #0]
 8016214:	689a      	ldr	r2, [r3, #8]
 8016216:	f012 0f01 	tst.w	r2, #1
 801621a:	d00e      	beq.n	801623a <HAL_SPI_TransmitReceive+0x110>
 801621c:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801621e:	b292      	uxth	r2, r2
 8016220:	b15a      	cbz	r2, 801623a <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8016222:	68da      	ldr	r2, [r3, #12]
 8016224:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8016226:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8016228:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801622a:	3302      	adds	r3, #2
 801622c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 801622e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8016230:	b29b      	uxth	r3, r3
 8016232:	3b01      	subs	r3, #1
 8016234:	b29b      	uxth	r3, r3
 8016236:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8016238:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801623a:	f7fe fbcd 	bl	80149d8 <HAL_GetTick>
 801623e:	1b80      	subs	r0, r0, r6
 8016240:	42a8      	cmp	r0, r5
 8016242:	d302      	bcc.n	801624a <HAL_SPI_TransmitReceive+0x120>
 8016244:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8016248:	d11e      	bne.n	8016288 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801624a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801624c:	b29b      	uxth	r3, r3
 801624e:	b91b      	cbnz	r3, 8016258 <HAL_SPI_TransmitReceive+0x12e>
 8016250:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8016252:	b29b      	uxth	r3, r3
 8016254:	2b00      	cmp	r3, #0
 8016256:	d062      	beq.n	801631e <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8016258:	6823      	ldr	r3, [r4, #0]
 801625a:	689a      	ldr	r2, [r3, #8]
 801625c:	f012 0f02 	tst.w	r2, #2
 8016260:	d0d7      	beq.n	8016212 <HAL_SPI_TransmitReceive+0xe8>
 8016262:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8016264:	b292      	uxth	r2, r2
 8016266:	2a00      	cmp	r2, #0
 8016268:	d0d3      	beq.n	8016212 <HAL_SPI_TransmitReceive+0xe8>
 801626a:	2f00      	cmp	r7, #0
 801626c:	d0d1      	beq.n	8016212 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801626e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016270:	8812      	ldrh	r2, [r2, #0]
 8016272:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8016274:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016276:	3302      	adds	r3, #2
 8016278:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 801627a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801627c:	b29b      	uxth	r3, r3
 801627e:	3b01      	subs	r3, #1
 8016280:	b29b      	uxth	r3, r3
 8016282:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8016284:	2700      	movs	r7, #0
 8016286:	e7c4      	b.n	8016212 <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8016288:	2301      	movs	r3, #1
 801628a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 801628e:	2300      	movs	r3, #0
 8016290:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8016294:	2003      	movs	r0, #3
 8016296:	e063      	b.n	8016360 <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8016298:	6823      	ldr	r3, [r4, #0]
 801629a:	689a      	ldr	r2, [r3, #8]
 801629c:	f012 0f01 	tst.w	r2, #1
 80162a0:	d00e      	beq.n	80162c0 <HAL_SPI_TransmitReceive+0x196>
 80162a2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80162a4:	b292      	uxth	r2, r2
 80162a6:	b15a      	cbz	r2, 80162c0 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80162a8:	68da      	ldr	r2, [r3, #12]
 80162aa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80162ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80162ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80162b0:	3301      	adds	r3, #1
 80162b2:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80162b4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80162b6:	b29b      	uxth	r3, r3
 80162b8:	3b01      	subs	r3, #1
 80162ba:	b29b      	uxth	r3, r3
 80162bc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80162be:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80162c0:	f7fe fb8a 	bl	80149d8 <HAL_GetTick>
 80162c4:	1b83      	subs	r3, r0, r6
 80162c6:	42ab      	cmp	r3, r5
 80162c8:	d302      	bcc.n	80162d0 <HAL_SPI_TransmitReceive+0x1a6>
 80162ca:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80162ce:	d11e      	bne.n	801630e <HAL_SPI_TransmitReceive+0x1e4>
 80162d0:	b1ed      	cbz	r5, 801630e <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80162d2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80162d4:	b29b      	uxth	r3, r3
 80162d6:	b913      	cbnz	r3, 80162de <HAL_SPI_TransmitReceive+0x1b4>
 80162d8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80162da:	b29b      	uxth	r3, r3
 80162dc:	b1fb      	cbz	r3, 801631e <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80162de:	6823      	ldr	r3, [r4, #0]
 80162e0:	689a      	ldr	r2, [r3, #8]
 80162e2:	f012 0f02 	tst.w	r2, #2
 80162e6:	d0d7      	beq.n	8016298 <HAL_SPI_TransmitReceive+0x16e>
 80162e8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80162ea:	b292      	uxth	r2, r2
 80162ec:	2a00      	cmp	r2, #0
 80162ee:	d0d3      	beq.n	8016298 <HAL_SPI_TransmitReceive+0x16e>
 80162f0:	2f00      	cmp	r7, #0
 80162f2:	d0d1      	beq.n	8016298 <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80162f4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80162f6:	7812      	ldrb	r2, [r2, #0]
 80162f8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80162fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80162fc:	3301      	adds	r3, #1
 80162fe:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8016300:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016302:	b29b      	uxth	r3, r3
 8016304:	3b01      	subs	r3, #1
 8016306:	b29b      	uxth	r3, r3
 8016308:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 801630a:	2700      	movs	r7, #0
 801630c:	e7c4      	b.n	8016298 <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 801630e:	2301      	movs	r3, #1
 8016310:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8016314:	2300      	movs	r3, #0
 8016316:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 801631a:	2003      	movs	r0, #3
 801631c:	e020      	b.n	8016360 <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801631e:	4632      	mov	r2, r6
 8016320:	4629      	mov	r1, r5
 8016322:	4620      	mov	r0, r4
 8016324:	f7ff fd3a 	bl	8015d9c <SPI_EndRxTxTransaction>
 8016328:	b990      	cbnz	r0, 8016350 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801632a:	68a3      	ldr	r3, [r4, #8]
 801632c:	b933      	cbnz	r3, 801633c <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801632e:	9301      	str	r3, [sp, #4]
 8016330:	6823      	ldr	r3, [r4, #0]
 8016332:	68da      	ldr	r2, [r3, #12]
 8016334:	9201      	str	r2, [sp, #4]
 8016336:	689b      	ldr	r3, [r3, #8]
 8016338:	9301      	str	r3, [sp, #4]
 801633a:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 801633c:	2301      	movs	r3, #1
 801633e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8016342:	2300      	movs	r3, #0
 8016344:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016348:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801634a:	b14b      	cbz	r3, 8016360 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 801634c:	2001      	movs	r0, #1
 801634e:	e007      	b.n	8016360 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016350:	2320      	movs	r3, #32
 8016352:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8016354:	2300      	movs	r3, #0
 8016356:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 801635a:	2001      	movs	r0, #1
 801635c:	e000      	b.n	8016360 <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 801635e:	2002      	movs	r0, #2
}
 8016360:	b003      	add	sp, #12
 8016362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8016366:	2002      	movs	r0, #2
 8016368:	e7fa      	b.n	8016360 <HAL_SPI_TransmitReceive+0x236>
 801636a:	2002      	movs	r0, #2
 801636c:	e7f8      	b.n	8016360 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 801636e:	2001      	movs	r0, #1
 8016370:	e7f6      	b.n	8016360 <HAL_SPI_TransmitReceive+0x236>
 8016372:	2001      	movs	r0, #1
 8016374:	e7f4      	b.n	8016360 <HAL_SPI_TransmitReceive+0x236>
 8016376:	2001      	movs	r0, #1
 8016378:	e7f2      	b.n	8016360 <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 801637a:	2002      	movs	r0, #2
 801637c:	e7f0      	b.n	8016360 <HAL_SPI_TransmitReceive+0x236>

0801637e <HAL_SPI_Receive>:
{
 801637e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016382:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 8016384:	f890 6051 	ldrb.w	r6, [r0, #81]	@ 0x51
 8016388:	b2f6      	uxtb	r6, r6
 801638a:	2e01      	cmp	r6, #1
 801638c:	f040 80b4 	bne.w	80164f8 <HAL_SPI_Receive+0x17a>
 8016390:	4604      	mov	r4, r0
 8016392:	4689      	mov	r9, r1
 8016394:	4690      	mov	r8, r2
 8016396:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8016398:	6843      	ldr	r3, [r0, #4]
 801639a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801639e:	d101      	bne.n	80163a4 <HAL_SPI_Receive+0x26>
 80163a0:	6883      	ldr	r3, [r0, #8]
 80163a2:	b393      	cbz	r3, 801640a <HAL_SPI_Receive+0x8c>
  tickstart = HAL_GetTick();
 80163a4:	f7fe fb18 	bl	80149d8 <HAL_GetTick>
 80163a8:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 80163aa:	f1b9 0f00 	cmp.w	r9, #0
 80163ae:	f000 80a4 	beq.w	80164fa <HAL_SPI_Receive+0x17c>
 80163b2:	f1b8 0f00 	cmp.w	r8, #0
 80163b6:	f000 80a0 	beq.w	80164fa <HAL_SPI_Receive+0x17c>
  __HAL_LOCK(hspi);
 80163ba:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80163be:	2b01      	cmp	r3, #1
 80163c0:	f000 809f 	beq.w	8016502 <HAL_SPI_Receive+0x184>
 80163c4:	2301      	movs	r3, #1
 80163c6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80163ca:	2304      	movs	r3, #4
 80163cc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80163d0:	2300      	movs	r3, #0
 80163d2:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80163d4:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80163d8:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80163dc:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80163e0:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80163e2:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80163e4:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80163e6:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80163e8:	6463      	str	r3, [r4, #68]	@ 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80163ea:	68a3      	ldr	r3, [r4, #8]
 80163ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80163f0:	d015      	beq.n	801641e <HAL_SPI_Receive+0xa0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80163f2:	6823      	ldr	r3, [r4, #0]
 80163f4:	681a      	ldr	r2, [r3, #0]
 80163f6:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80163fa:	d103      	bne.n	8016404 <HAL_SPI_Receive+0x86>
    __HAL_SPI_ENABLE(hspi);
 80163fc:	681a      	ldr	r2, [r3, #0]
 80163fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016402:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8016404:	68e3      	ldr	r3, [r4, #12]
 8016406:	b1f3      	cbz	r3, 8016446 <HAL_SPI_Receive+0xc8>
 8016408:	e043      	b.n	8016492 <HAL_SPI_Receive+0x114>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801640a:	2304      	movs	r3, #4
 801640c:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8016410:	9500      	str	r5, [sp, #0]
 8016412:	4613      	mov	r3, r2
 8016414:	460a      	mov	r2, r1
 8016416:	f7ff fe88 	bl	801612a <HAL_SPI_TransmitReceive>
 801641a:	4606      	mov	r6, r0
 801641c:	e06d      	b.n	80164fa <HAL_SPI_Receive+0x17c>
    __HAL_SPI_DISABLE(hspi);
 801641e:	6822      	ldr	r2, [r4, #0]
 8016420:	6813      	ldr	r3, [r2, #0]
 8016422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016426:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8016428:	6822      	ldr	r2, [r4, #0]
 801642a:	6813      	ldr	r3, [r2, #0]
 801642c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8016430:	6013      	str	r3, [r2, #0]
 8016432:	e7de      	b.n	80163f2 <HAL_SPI_Receive+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016434:	f7fe fad0 	bl	80149d8 <HAL_GetTick>
 8016438:	1bc0      	subs	r0, r0, r7
 801643a:	42a8      	cmp	r0, r5
 801643c:	d302      	bcc.n	8016444 <HAL_SPI_Receive+0xc6>
 801643e:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8016442:	d115      	bne.n	8016470 <HAL_SPI_Receive+0xf2>
 8016444:	b1a5      	cbz	r5, 8016470 <HAL_SPI_Receive+0xf2>
    while (hspi->RxXferCount > 0U)
 8016446:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8016448:	b29b      	uxth	r3, r3
 801644a:	2b00      	cmp	r3, #0
 801644c:	d042      	beq.n	80164d4 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801644e:	6823      	ldr	r3, [r4, #0]
 8016450:	689a      	ldr	r2, [r3, #8]
 8016452:	f012 0f01 	tst.w	r2, #1
 8016456:	d0ed      	beq.n	8016434 <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8016458:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801645a:	7b1b      	ldrb	r3, [r3, #12]
 801645c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801645e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8016460:	3301      	adds	r3, #1
 8016462:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8016464:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8016466:	b29b      	uxth	r3, r3
 8016468:	3b01      	subs	r3, #1
 801646a:	b29b      	uxth	r3, r3
 801646c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 801646e:	e7ea      	b.n	8016446 <HAL_SPI_Receive+0xc8>
          hspi->State = HAL_SPI_STATE_READY;
 8016470:	2301      	movs	r3, #1
 8016472:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8016476:	2300      	movs	r3, #0
 8016478:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 801647c:	2603      	movs	r6, #3
 801647e:	e03c      	b.n	80164fa <HAL_SPI_Receive+0x17c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016480:	f7fe faaa 	bl	80149d8 <HAL_GetTick>
 8016484:	1bc0      	subs	r0, r0, r7
 8016486:	42a8      	cmp	r0, r5
 8016488:	d302      	bcc.n	8016490 <HAL_SPI_Receive+0x112>
 801648a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 801648e:	d119      	bne.n	80164c4 <HAL_SPI_Receive+0x146>
 8016490:	b1c5      	cbz	r5, 80164c4 <HAL_SPI_Receive+0x146>
    while (hspi->RxXferCount > 0U)
 8016492:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8016494:	b29b      	uxth	r3, r3
 8016496:	b1eb      	cbz	r3, 80164d4 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8016498:	6823      	ldr	r3, [r4, #0]
 801649a:	689a      	ldr	r2, [r3, #8]
 801649c:	f012 0f01 	tst.w	r2, #1
 80164a0:	d0ee      	beq.n	8016480 <HAL_SPI_Receive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80164a2:	68da      	ldr	r2, [r3, #12]
 80164a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80164a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80164a8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80164aa:	3302      	adds	r3, #2
 80164ac:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80164ae:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 80164b2:	fa1f fc8c 	uxth.w	ip, ip
 80164b6:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80164ba:	fa1f fc8c 	uxth.w	ip, ip
 80164be:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 80164c2:	e7e6      	b.n	8016492 <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 80164c4:	2301      	movs	r3, #1
 80164c6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80164ca:	2300      	movs	r3, #0
 80164cc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80164d0:	2603      	movs	r6, #3
 80164d2:	e012      	b.n	80164fa <HAL_SPI_Receive+0x17c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80164d4:	463a      	mov	r2, r7
 80164d6:	4629      	mov	r1, r5
 80164d8:	4620      	mov	r0, r4
 80164da:	f7ff fc9f 	bl	8015e1c <SPI_EndRxTransaction>
 80164de:	b108      	cbz	r0, 80164e4 <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80164e0:	2320      	movs	r3, #32
 80164e2:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80164e4:	2301      	movs	r3, #1
 80164e6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80164ea:	2300      	movs	r3, #0
 80164ec:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80164f0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80164f2:	b913      	cbnz	r3, 80164fa <HAL_SPI_Receive+0x17c>
    return HAL_OK;
 80164f4:	2600      	movs	r6, #0
 80164f6:	e000      	b.n	80164fa <HAL_SPI_Receive+0x17c>
    return HAL_BUSY;
 80164f8:	2602      	movs	r6, #2
}
 80164fa:	4630      	mov	r0, r6
 80164fc:	b003      	add	sp, #12
 80164fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8016502:	2602      	movs	r6, #2
 8016504:	e7f9      	b.n	80164fa <HAL_SPI_Receive+0x17c>

08016506 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8016506:	4770      	bx	lr

08016508 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016508:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 801650c:	b2db      	uxtb	r3, r3
 801650e:	2b01      	cmp	r3, #1
 8016510:	d12f      	bne.n	8016572 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016512:	2302      	movs	r3, #2
 8016514:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016518:	6802      	ldr	r2, [r0, #0]
 801651a:	68d3      	ldr	r3, [r2, #12]
 801651c:	f043 0301 	orr.w	r3, r3, #1
 8016520:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016522:	6803      	ldr	r3, [r0, #0]
 8016524:	4a15      	ldr	r2, [pc, #84]	@ (801657c <HAL_TIM_Base_Start_IT+0x74>)
 8016526:	4293      	cmp	r3, r2
 8016528:	d018      	beq.n	801655c <HAL_TIM_Base_Start_IT+0x54>
 801652a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801652e:	d015      	beq.n	801655c <HAL_TIM_Base_Start_IT+0x54>
 8016530:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8016534:	4293      	cmp	r3, r2
 8016536:	d011      	beq.n	801655c <HAL_TIM_Base_Start_IT+0x54>
 8016538:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801653c:	4293      	cmp	r3, r2
 801653e:	d00d      	beq.n	801655c <HAL_TIM_Base_Start_IT+0x54>
 8016540:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016544:	4293      	cmp	r3, r2
 8016546:	d009      	beq.n	801655c <HAL_TIM_Base_Start_IT+0x54>
 8016548:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 801654c:	4293      	cmp	r3, r2
 801654e:	d005      	beq.n	801655c <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016550:	681a      	ldr	r2, [r3, #0]
 8016552:	f042 0201 	orr.w	r2, r2, #1
 8016556:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016558:	2000      	movs	r0, #0
 801655a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801655c:	689a      	ldr	r2, [r3, #8]
 801655e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016562:	2a06      	cmp	r2, #6
 8016564:	d007      	beq.n	8016576 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8016566:	681a      	ldr	r2, [r3, #0]
 8016568:	f042 0201 	orr.w	r2, r2, #1
 801656c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 801656e:	2000      	movs	r0, #0
 8016570:	4770      	bx	lr
    return HAL_ERROR;
 8016572:	2001      	movs	r0, #1
 8016574:	4770      	bx	lr
  return HAL_OK;
 8016576:	2000      	movs	r0, #0
}
 8016578:	4770      	bx	lr
 801657a:	bf00      	nop
 801657c:	40010000 	.word	0x40010000

08016580 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8016580:	4770      	bx	lr

08016582 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8016582:	4770      	bx	lr

08016584 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8016584:	4770      	bx	lr

08016586 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8016586:	4770      	bx	lr

08016588 <HAL_TIM_IRQHandler>:
{
 8016588:	b570      	push	{r4, r5, r6, lr}
 801658a:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 801658c:	6803      	ldr	r3, [r0, #0]
 801658e:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8016590:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8016592:	f015 0f02 	tst.w	r5, #2
 8016596:	d010      	beq.n	80165ba <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8016598:	f016 0f02 	tst.w	r6, #2
 801659c:	d00d      	beq.n	80165ba <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801659e:	f06f 0202 	mvn.w	r2, #2
 80165a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80165a4:	2301      	movs	r3, #1
 80165a6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80165a8:	6803      	ldr	r3, [r0, #0]
 80165aa:	699b      	ldr	r3, [r3, #24]
 80165ac:	f013 0f03 	tst.w	r3, #3
 80165b0:	d05e      	beq.n	8016670 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80165b2:	f7ff ffe6 	bl	8016582 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80165b6:	2300      	movs	r3, #0
 80165b8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80165ba:	f015 0f04 	tst.w	r5, #4
 80165be:	d012      	beq.n	80165e6 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80165c0:	f016 0f04 	tst.w	r6, #4
 80165c4:	d00f      	beq.n	80165e6 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80165c6:	6823      	ldr	r3, [r4, #0]
 80165c8:	f06f 0204 	mvn.w	r2, #4
 80165cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80165ce:	2302      	movs	r3, #2
 80165d0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80165d2:	6823      	ldr	r3, [r4, #0]
 80165d4:	699b      	ldr	r3, [r3, #24]
 80165d6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80165da:	d04f      	beq.n	801667c <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80165dc:	4620      	mov	r0, r4
 80165de:	f7ff ffd0 	bl	8016582 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80165e2:	2300      	movs	r3, #0
 80165e4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80165e6:	f015 0f08 	tst.w	r5, #8
 80165ea:	d012      	beq.n	8016612 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80165ec:	f016 0f08 	tst.w	r6, #8
 80165f0:	d00f      	beq.n	8016612 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80165f2:	6823      	ldr	r3, [r4, #0]
 80165f4:	f06f 0208 	mvn.w	r2, #8
 80165f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80165fa:	2304      	movs	r3, #4
 80165fc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80165fe:	6823      	ldr	r3, [r4, #0]
 8016600:	69db      	ldr	r3, [r3, #28]
 8016602:	f013 0f03 	tst.w	r3, #3
 8016606:	d040      	beq.n	801668a <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8016608:	4620      	mov	r0, r4
 801660a:	f7ff ffba 	bl	8016582 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801660e:	2300      	movs	r3, #0
 8016610:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8016612:	f015 0f10 	tst.w	r5, #16
 8016616:	d012      	beq.n	801663e <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8016618:	f016 0f10 	tst.w	r6, #16
 801661c:	d00f      	beq.n	801663e <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801661e:	6823      	ldr	r3, [r4, #0]
 8016620:	f06f 0210 	mvn.w	r2, #16
 8016624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016626:	2308      	movs	r3, #8
 8016628:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801662a:	6823      	ldr	r3, [r4, #0]
 801662c:	69db      	ldr	r3, [r3, #28]
 801662e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8016632:	d031      	beq.n	8016698 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8016634:	4620      	mov	r0, r4
 8016636:	f7ff ffa4 	bl	8016582 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801663a:	2300      	movs	r3, #0
 801663c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801663e:	f015 0f01 	tst.w	r5, #1
 8016642:	d002      	beq.n	801664a <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8016644:	f016 0f01 	tst.w	r6, #1
 8016648:	d12d      	bne.n	80166a6 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 801664a:	f015 0f80 	tst.w	r5, #128	@ 0x80
 801664e:	d002      	beq.n	8016656 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016650:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8016654:	d12f      	bne.n	80166b6 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8016656:	f015 0f40 	tst.w	r5, #64	@ 0x40
 801665a:	d002      	beq.n	8016662 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801665c:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8016660:	d131      	bne.n	80166c6 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8016662:	f015 0f20 	tst.w	r5, #32
 8016666:	d002      	beq.n	801666e <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8016668:	f016 0f20 	tst.w	r6, #32
 801666c:	d133      	bne.n	80166d6 <HAL_TIM_IRQHandler+0x14e>
}
 801666e:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016670:	f7ff ff86 	bl	8016580 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016674:	4620      	mov	r0, r4
 8016676:	f7ff ff85 	bl	8016584 <HAL_TIM_PWM_PulseFinishedCallback>
 801667a:	e79c      	b.n	80165b6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801667c:	4620      	mov	r0, r4
 801667e:	f7ff ff7f 	bl	8016580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016682:	4620      	mov	r0, r4
 8016684:	f7ff ff7e 	bl	8016584 <HAL_TIM_PWM_PulseFinishedCallback>
 8016688:	e7ab      	b.n	80165e2 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801668a:	4620      	mov	r0, r4
 801668c:	f7ff ff78 	bl	8016580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016690:	4620      	mov	r0, r4
 8016692:	f7ff ff77 	bl	8016584 <HAL_TIM_PWM_PulseFinishedCallback>
 8016696:	e7ba      	b.n	801660e <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016698:	4620      	mov	r0, r4
 801669a:	f7ff ff71 	bl	8016580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801669e:	4620      	mov	r0, r4
 80166a0:	f7ff ff70 	bl	8016584 <HAL_TIM_PWM_PulseFinishedCallback>
 80166a4:	e7c9      	b.n	801663a <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80166a6:	6823      	ldr	r3, [r4, #0]
 80166a8:	f06f 0201 	mvn.w	r2, #1
 80166ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80166ae:	4620      	mov	r0, r4
 80166b0:	f7fb fb84 	bl	8011dbc <HAL_TIM_PeriodElapsedCallback>
 80166b4:	e7c9      	b.n	801664a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80166b6:	6823      	ldr	r3, [r4, #0]
 80166b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80166bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80166be:	4620      	mov	r0, r4
 80166c0:	f000 f895 	bl	80167ee <HAL_TIMEx_BreakCallback>
 80166c4:	e7c7      	b.n	8016656 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80166c6:	6823      	ldr	r3, [r4, #0]
 80166c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80166cc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80166ce:	4620      	mov	r0, r4
 80166d0:	f7ff ff59 	bl	8016586 <HAL_TIM_TriggerCallback>
 80166d4:	e7c5      	b.n	8016662 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80166d6:	6823      	ldr	r3, [r4, #0]
 80166d8:	f06f 0220 	mvn.w	r2, #32
 80166dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80166de:	4620      	mov	r0, r4
 80166e0:	f000 f884 	bl	80167ec <HAL_TIMEx_CommutCallback>
}
 80166e4:	e7c3      	b.n	801666e <HAL_TIM_IRQHandler+0xe6>
	...

080166e8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80166e8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80166ea:	4a29      	ldr	r2, [pc, #164]	@ (8016790 <TIM_Base_SetConfig+0xa8>)
 80166ec:	4290      	cmp	r0, r2
 80166ee:	d00e      	beq.n	801670e <TIM_Base_SetConfig+0x26>
 80166f0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80166f4:	d00b      	beq.n	801670e <TIM_Base_SetConfig+0x26>
 80166f6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80166fa:	4290      	cmp	r0, r2
 80166fc:	d007      	beq.n	801670e <TIM_Base_SetConfig+0x26>
 80166fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016702:	4290      	cmp	r0, r2
 8016704:	d003      	beq.n	801670e <TIM_Base_SetConfig+0x26>
 8016706:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801670a:	4290      	cmp	r0, r2
 801670c:	d103      	bne.n	8016716 <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801670e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8016712:	684a      	ldr	r2, [r1, #4]
 8016714:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016716:	4a1e      	ldr	r2, [pc, #120]	@ (8016790 <TIM_Base_SetConfig+0xa8>)
 8016718:	4290      	cmp	r0, r2
 801671a:	d01a      	beq.n	8016752 <TIM_Base_SetConfig+0x6a>
 801671c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8016720:	d017      	beq.n	8016752 <TIM_Base_SetConfig+0x6a>
 8016722:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8016726:	4290      	cmp	r0, r2
 8016728:	d013      	beq.n	8016752 <TIM_Base_SetConfig+0x6a>
 801672a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801672e:	4290      	cmp	r0, r2
 8016730:	d00f      	beq.n	8016752 <TIM_Base_SetConfig+0x6a>
 8016732:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016736:	4290      	cmp	r0, r2
 8016738:	d00b      	beq.n	8016752 <TIM_Base_SetConfig+0x6a>
 801673a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 801673e:	4290      	cmp	r0, r2
 8016740:	d007      	beq.n	8016752 <TIM_Base_SetConfig+0x6a>
 8016742:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016746:	4290      	cmp	r0, r2
 8016748:	d003      	beq.n	8016752 <TIM_Base_SetConfig+0x6a>
 801674a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801674e:	4290      	cmp	r0, r2
 8016750:	d103      	bne.n	801675a <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016752:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016756:	68ca      	ldr	r2, [r1, #12]
 8016758:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801675a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801675e:	694a      	ldr	r2, [r1, #20]
 8016760:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8016762:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016764:	688b      	ldr	r3, [r1, #8]
 8016766:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016768:	680b      	ldr	r3, [r1, #0]
 801676a:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801676c:	4b08      	ldr	r3, [pc, #32]	@ (8016790 <TIM_Base_SetConfig+0xa8>)
 801676e:	4298      	cmp	r0, r3
 8016770:	d00a      	beq.n	8016788 <TIM_Base_SetConfig+0xa0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016772:	2301      	movs	r3, #1
 8016774:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8016776:	6903      	ldr	r3, [r0, #16]
 8016778:	f013 0f01 	tst.w	r3, #1
 801677c:	d003      	beq.n	8016786 <TIM_Base_SetConfig+0x9e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801677e:	6903      	ldr	r3, [r0, #16]
 8016780:	f023 0301 	bic.w	r3, r3, #1
 8016784:	6103      	str	r3, [r0, #16]
  }
}
 8016786:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8016788:	690b      	ldr	r3, [r1, #16]
 801678a:	6303      	str	r3, [r0, #48]	@ 0x30
 801678c:	e7f1      	b.n	8016772 <TIM_Base_SetConfig+0x8a>
 801678e:	bf00      	nop
 8016790:	40010000 	.word	0x40010000

08016794 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8016794:	b340      	cbz	r0, 80167e8 <HAL_TIM_Base_Init+0x54>
{
 8016796:	b510      	push	{r4, lr}
 8016798:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 801679a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 801679e:	b1f3      	cbz	r3, 80167de <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80167a0:	2302      	movs	r3, #2
 80167a2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80167a6:	4621      	mov	r1, r4
 80167a8:	f851 0b04 	ldr.w	r0, [r1], #4
 80167ac:	f7ff ff9c 	bl	80166e8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80167b0:	2301      	movs	r3, #1
 80167b2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80167b6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80167ba:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80167be:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80167c2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80167c6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80167ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80167ce:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80167d2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80167d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80167da:	2000      	movs	r0, #0
}
 80167dc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80167de:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80167e2:	f7ff fe90 	bl	8016506 <HAL_TIM_Base_MspInit>
 80167e6:	e7db      	b.n	80167a0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80167e8:	2001      	movs	r0, #1
}
 80167ea:	4770      	bx	lr

080167ec <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80167ec:	4770      	bx	lr

080167ee <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80167ee:	4770      	bx	lr

080167f0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80167f0:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80167f2:	b930      	cbnz	r0, 8016802 <SSD1306_Fill+0x12>
 80167f4:	2100      	movs	r1, #0
 80167f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80167fa:	4803      	ldr	r0, [pc, #12]	@ (8016808 <SSD1306_Fill+0x18>)
 80167fc:	f013 f940 	bl	8029a80 <memset>
}
 8016800:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8016802:	21ff      	movs	r1, #255	@ 0xff
 8016804:	e7f7      	b.n	80167f6 <SSD1306_Fill+0x6>
 8016806:	bf00      	nop
 8016808:	20000aa8 	.word	0x20000aa8

0801680c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 801680c:	287f      	cmp	r0, #127	@ 0x7f
 801680e:	d825      	bhi.n	801685c <SSD1306_DrawPixel+0x50>
		x >= SSD1306_WIDTH ||
 8016810:	293f      	cmp	r1, #63	@ 0x3f
 8016812:	d823      	bhi.n	801685c <SSD1306_DrawPixel+0x50>
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8016814:	b410      	push	{r4}
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8016816:	4b12      	ldr	r3, [pc, #72]	@ (8016860 <SSD1306_DrawPixel+0x54>)
 8016818:	791b      	ldrb	r3, [r3, #4]
 801681a:	b113      	cbz	r3, 8016822 <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 801681c:	fab2 f282 	clz	r2, r2
 8016820:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8016822:	2a01      	cmp	r2, #1
 8016824:	d00f      	beq.n	8016846 <SSD1306_DrawPixel+0x3a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8016826:	08cb      	lsrs	r3, r1, #3
 8016828:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 801682c:	4c0d      	ldr	r4, [pc, #52]	@ (8016864 <SSD1306_DrawPixel+0x58>)
 801682e:	5c22      	ldrb	r2, [r4, r0]
 8016830:	f001 0107 	and.w	r1, r1, #7
 8016834:	2301      	movs	r3, #1
 8016836:	408b      	lsls	r3, r1
 8016838:	43db      	mvns	r3, r3
 801683a:	b25b      	sxtb	r3, r3
 801683c:	4013      	ands	r3, r2
 801683e:	5423      	strb	r3, [r4, r0]
	}
}
 8016840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016844:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8016846:	08cb      	lsrs	r3, r1, #3
 8016848:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 801684c:	4c05      	ldr	r4, [pc, #20]	@ (8016864 <SSD1306_DrawPixel+0x58>)
 801684e:	5c23      	ldrb	r3, [r4, r0]
 8016850:	f001 0107 	and.w	r1, r1, #7
 8016854:	408a      	lsls	r2, r1
 8016856:	4313      	orrs	r3, r2
 8016858:	5423      	strb	r3, [r4, r0]
 801685a:	e7f1      	b.n	8016840 <SSD1306_DrawPixel+0x34>
 801685c:	4770      	bx	lr
 801685e:	bf00      	nop
 8016860:	20000aa0 	.word	0x20000aa0
 8016864:	20000aa8 	.word	0x20000aa8

08016868 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8016868:	4b01      	ldr	r3, [pc, #4]	@ (8016870 <SSD1306_GotoXY+0x8>)
 801686a:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 801686c:	8059      	strh	r1, [r3, #2]
}
 801686e:	4770      	bx	lr
 8016870:	20000aa0 	.word	0x20000aa0

08016874 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8016874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016878:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 801687a:	4b24      	ldr	r3, [pc, #144]	@ (801690c <SSD1306_Putc+0x98>)
 801687c:	881b      	ldrh	r3, [r3, #0]
 801687e:	780a      	ldrb	r2, [r1, #0]
 8016880:	4413      	add	r3, r2
	if (
 8016882:	2b7f      	cmp	r3, #127	@ 0x7f
 8016884:	dc3e      	bgt.n	8016904 <SSD1306_Putc+0x90>
 8016886:	4681      	mov	r9, r0
 8016888:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 801688a:	4b20      	ldr	r3, [pc, #128]	@ (801690c <SSD1306_Putc+0x98>)
 801688c:	885b      	ldrh	r3, [r3, #2]
 801688e:	784a      	ldrb	r2, [r1, #1]
 8016890:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8016892:	2b3f      	cmp	r3, #63	@ 0x3f
 8016894:	dc38      	bgt.n	8016908 <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8016896:	2600      	movs	r6, #0
 8016898:	e020      	b.n	80168dc <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 801689a:	4b1c      	ldr	r3, [pc, #112]	@ (801690c <SSD1306_Putc+0x98>)
 801689c:	8818      	ldrh	r0, [r3, #0]
 801689e:	8859      	ldrh	r1, [r3, #2]
 80168a0:	4431      	add	r1, r6
 80168a2:	4420      	add	r0, r4
 80168a4:	fab8 f288 	clz	r2, r8
 80168a8:	0952      	lsrs	r2, r2, #5
 80168aa:	b289      	uxth	r1, r1
 80168ac:	b280      	uxth	r0, r0
 80168ae:	f7ff ffad 	bl	801680c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80168b2:	3401      	adds	r4, #1
 80168b4:	782b      	ldrb	r3, [r5, #0]
 80168b6:	42a3      	cmp	r3, r4
 80168b8:	d90f      	bls.n	80168da <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 80168ba:	fa07 f304 	lsl.w	r3, r7, r4
 80168be:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80168c2:	d0ea      	beq.n	801689a <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80168c4:	4b11      	ldr	r3, [pc, #68]	@ (801690c <SSD1306_Putc+0x98>)
 80168c6:	8818      	ldrh	r0, [r3, #0]
 80168c8:	8859      	ldrh	r1, [r3, #2]
 80168ca:	4431      	add	r1, r6
 80168cc:	4420      	add	r0, r4
 80168ce:	4642      	mov	r2, r8
 80168d0:	b289      	uxth	r1, r1
 80168d2:	b280      	uxth	r0, r0
 80168d4:	f7ff ff9a 	bl	801680c <SSD1306_DrawPixel>
 80168d8:	e7eb      	b.n	80168b2 <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 80168da:	3601      	adds	r6, #1
 80168dc:	786a      	ldrb	r2, [r5, #1]
 80168de:	42b2      	cmp	r2, r6
 80168e0:	d908      	bls.n	80168f4 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80168e2:	6869      	ldr	r1, [r5, #4]
 80168e4:	f1a9 0320 	sub.w	r3, r9, #32
 80168e8:	fb02 6303 	mla	r3, r2, r3, r6
 80168ec:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 80168f0:	2400      	movs	r4, #0
 80168f2:	e7df      	b.n	80168b4 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80168f4:	4a05      	ldr	r2, [pc, #20]	@ (801690c <SSD1306_Putc+0x98>)
 80168f6:	8813      	ldrh	r3, [r2, #0]
 80168f8:	7829      	ldrb	r1, [r5, #0]
 80168fa:	440b      	add	r3, r1
 80168fc:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 80168fe:	4648      	mov	r0, r9
}
 8016900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 8016904:	2000      	movs	r0, #0
 8016906:	e7fb      	b.n	8016900 <SSD1306_Putc+0x8c>
 8016908:	2000      	movs	r0, #0
 801690a:	e7f9      	b.n	8016900 <SSD1306_Putc+0x8c>
 801690c:	20000aa0 	.word	0x20000aa0

08016910 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8016910:	b570      	push	{r4, r5, r6, lr}
 8016912:	4604      	mov	r4, r0
 8016914:	460e      	mov	r6, r1
 8016916:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 8016918:	e000      	b.n	801691c <SSD1306_Puts+0xc>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 801691a:	3401      	adds	r4, #1
	while (*str) {
 801691c:	7820      	ldrb	r0, [r4, #0]
 801691e:	b138      	cbz	r0, 8016930 <SSD1306_Puts+0x20>
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8016920:	462a      	mov	r2, r5
 8016922:	4631      	mov	r1, r6
 8016924:	f7ff ffa6 	bl	8016874 <SSD1306_Putc>
 8016928:	4603      	mov	r3, r0
 801692a:	7820      	ldrb	r0, [r4, #0]
 801692c:	4283      	cmp	r3, r0
 801692e:	d0f4      	beq.n	801691a <SSD1306_Puts+0xa>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8016930:	bd70      	pop	{r4, r5, r6, pc}
	...

08016934 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8016934:	b500      	push	{lr}
 8016936:	b0c3      	sub	sp, #268	@ 0x10c
uint8_t dt[256];
dt[0] = reg;
 8016938:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 801693c:	f04f 0c00 	mov.w	ip, #0
 8016940:	e009      	b.n	8016956 <ssd1306_I2C_WriteMulti+0x22>
dt[i+1] = data[i];
 8016942:	f10c 0e01 	add.w	lr, ip, #1
 8016946:	f812 100c 	ldrb.w	r1, [r2, ip]
 801694a:	f10d 0c08 	add.w	ip, sp, #8
 801694e:	f80c 100e 	strb.w	r1, [ip, lr]
for(i = 0; i < count; i++)
 8016952:	fa5f fc8e 	uxtb.w	ip, lr
 8016956:	459c      	cmp	ip, r3
 8016958:	d3f3      	bcc.n	8016942 <ssd1306_I2C_WriteMulti+0xe>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 801695a:	3301      	adds	r3, #1
 801695c:	220a      	movs	r2, #10
 801695e:	9200      	str	r2, [sp, #0]
 8016960:	b29b      	uxth	r3, r3
 8016962:	aa02      	add	r2, sp, #8
 8016964:	4601      	mov	r1, r0
 8016966:	4803      	ldr	r0, [pc, #12]	@ (8016974 <ssd1306_I2C_WriteMulti+0x40>)
 8016968:	f7fe fcd0 	bl	801530c <HAL_I2C_Master_Transmit>
}
 801696c:	b043      	add	sp, #268	@ 0x10c
 801696e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016972:	bf00      	nop
 8016974:	2000083c 	.word	0x2000083c

08016978 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8016978:	b500      	push	{lr}
 801697a:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 801697c:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8016980:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8016984:	230a      	movs	r3, #10
 8016986:	9300      	str	r3, [sp, #0]
 8016988:	2302      	movs	r3, #2
 801698a:	aa03      	add	r2, sp, #12
 801698c:	4601      	mov	r1, r0
 801698e:	4803      	ldr	r0, [pc, #12]	@ (801699c <ssd1306_I2C_Write+0x24>)
 8016990:	f7fe fcbc 	bl	801530c <HAL_I2C_Master_Transmit>
}
 8016994:	b005      	add	sp, #20
 8016996:	f85d fb04 	ldr.w	pc, [sp], #4
 801699a:	bf00      	nop
 801699c:	2000083c 	.word	0x2000083c

080169a0 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 80169a0:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80169a2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80169a6:	2201      	movs	r2, #1
 80169a8:	2178      	movs	r1, #120	@ 0x78
 80169aa:	4850      	ldr	r0, [pc, #320]	@ (8016aec <SSD1306_Init+0x14c>)
 80169ac:	f7fe fd6a 	bl	8015484 <HAL_I2C_IsDeviceReady>
 80169b0:	2800      	cmp	r0, #0
 80169b2:	f040 8099 	bne.w	8016ae8 <SSD1306_Init+0x148>
	uint32_t p = 2500;
 80169b6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80169ba:	e000      	b.n	80169be <SSD1306_Init+0x1e>
		p--;
 80169bc:	3b01      	subs	r3, #1
	while(p>0)
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d1fc      	bne.n	80169bc <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 80169c2:	22ae      	movs	r2, #174	@ 0xae
 80169c4:	2100      	movs	r1, #0
 80169c6:	2078      	movs	r0, #120	@ 0x78
 80169c8:	f7ff ffd6 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80169cc:	2220      	movs	r2, #32
 80169ce:	2100      	movs	r1, #0
 80169d0:	2078      	movs	r0, #120	@ 0x78
 80169d2:	f7ff ffd1 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80169d6:	2210      	movs	r2, #16
 80169d8:	2100      	movs	r1, #0
 80169da:	2078      	movs	r0, #120	@ 0x78
 80169dc:	f7ff ffcc 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80169e0:	22b0      	movs	r2, #176	@ 0xb0
 80169e2:	2100      	movs	r1, #0
 80169e4:	2078      	movs	r0, #120	@ 0x78
 80169e6:	f7ff ffc7 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80169ea:	22c8      	movs	r2, #200	@ 0xc8
 80169ec:	2100      	movs	r1, #0
 80169ee:	2078      	movs	r0, #120	@ 0x78
 80169f0:	f7ff ffc2 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80169f4:	2200      	movs	r2, #0
 80169f6:	4611      	mov	r1, r2
 80169f8:	2078      	movs	r0, #120	@ 0x78
 80169fa:	f7ff ffbd 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80169fe:	2210      	movs	r2, #16
 8016a00:	2100      	movs	r1, #0
 8016a02:	2078      	movs	r0, #120	@ 0x78
 8016a04:	f7ff ffb8 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8016a08:	2240      	movs	r2, #64	@ 0x40
 8016a0a:	2100      	movs	r1, #0
 8016a0c:	2078      	movs	r0, #120	@ 0x78
 8016a0e:	f7ff ffb3 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8016a12:	2281      	movs	r2, #129	@ 0x81
 8016a14:	2100      	movs	r1, #0
 8016a16:	2078      	movs	r0, #120	@ 0x78
 8016a18:	f7ff ffae 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8016a1c:	22ff      	movs	r2, #255	@ 0xff
 8016a1e:	2100      	movs	r1, #0
 8016a20:	2078      	movs	r0, #120	@ 0x78
 8016a22:	f7ff ffa9 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8016a26:	22a1      	movs	r2, #161	@ 0xa1
 8016a28:	2100      	movs	r1, #0
 8016a2a:	2078      	movs	r0, #120	@ 0x78
 8016a2c:	f7ff ffa4 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8016a30:	22a6      	movs	r2, #166	@ 0xa6
 8016a32:	2100      	movs	r1, #0
 8016a34:	2078      	movs	r0, #120	@ 0x78
 8016a36:	f7ff ff9f 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8016a3a:	22a8      	movs	r2, #168	@ 0xa8
 8016a3c:	2100      	movs	r1, #0
 8016a3e:	2078      	movs	r0, #120	@ 0x78
 8016a40:	f7ff ff9a 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8016a44:	223f      	movs	r2, #63	@ 0x3f
 8016a46:	2100      	movs	r1, #0
 8016a48:	2078      	movs	r0, #120	@ 0x78
 8016a4a:	f7ff ff95 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8016a4e:	22a4      	movs	r2, #164	@ 0xa4
 8016a50:	2100      	movs	r1, #0
 8016a52:	2078      	movs	r0, #120	@ 0x78
 8016a54:	f7ff ff90 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8016a58:	22d3      	movs	r2, #211	@ 0xd3
 8016a5a:	2100      	movs	r1, #0
 8016a5c:	2078      	movs	r0, #120	@ 0x78
 8016a5e:	f7ff ff8b 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8016a62:	2200      	movs	r2, #0
 8016a64:	4611      	mov	r1, r2
 8016a66:	2078      	movs	r0, #120	@ 0x78
 8016a68:	f7ff ff86 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8016a6c:	22d5      	movs	r2, #213	@ 0xd5
 8016a6e:	2100      	movs	r1, #0
 8016a70:	2078      	movs	r0, #120	@ 0x78
 8016a72:	f7ff ff81 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8016a76:	22f0      	movs	r2, #240	@ 0xf0
 8016a78:	2100      	movs	r1, #0
 8016a7a:	2078      	movs	r0, #120	@ 0x78
 8016a7c:	f7ff ff7c 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8016a80:	22d9      	movs	r2, #217	@ 0xd9
 8016a82:	2100      	movs	r1, #0
 8016a84:	2078      	movs	r0, #120	@ 0x78
 8016a86:	f7ff ff77 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8016a8a:	2222      	movs	r2, #34	@ 0x22
 8016a8c:	2100      	movs	r1, #0
 8016a8e:	2078      	movs	r0, #120	@ 0x78
 8016a90:	f7ff ff72 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8016a94:	22da      	movs	r2, #218	@ 0xda
 8016a96:	2100      	movs	r1, #0
 8016a98:	2078      	movs	r0, #120	@ 0x78
 8016a9a:	f7ff ff6d 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8016a9e:	2212      	movs	r2, #18
 8016aa0:	2100      	movs	r1, #0
 8016aa2:	2078      	movs	r0, #120	@ 0x78
 8016aa4:	f7ff ff68 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8016aa8:	22db      	movs	r2, #219	@ 0xdb
 8016aaa:	2100      	movs	r1, #0
 8016aac:	2078      	movs	r0, #120	@ 0x78
 8016aae:	f7ff ff63 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8016ab2:	2220      	movs	r2, #32
 8016ab4:	2100      	movs	r1, #0
 8016ab6:	2078      	movs	r0, #120	@ 0x78
 8016ab8:	f7ff ff5e 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8016abc:	228d      	movs	r2, #141	@ 0x8d
 8016abe:	2100      	movs	r1, #0
 8016ac0:	2078      	movs	r0, #120	@ 0x78
 8016ac2:	f7ff ff59 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8016ac6:	2214      	movs	r2, #20
 8016ac8:	2100      	movs	r1, #0
 8016aca:	2078      	movs	r0, #120	@ 0x78
 8016acc:	f7ff ff54 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8016ad0:	22af      	movs	r2, #175	@ 0xaf
 8016ad2:	2100      	movs	r1, #0
 8016ad4:	2078      	movs	r0, #120	@ 0x78
 8016ad6:	f7ff ff4f 	bl	8016978 <ssd1306_I2C_Write>
	SSD1306.CurrentX = 0;
 8016ada:	4b05      	ldr	r3, [pc, #20]	@ (8016af0 <SSD1306_Init+0x150>)
 8016adc:	2200      	movs	r2, #0
 8016ade:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8016ae0:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8016ae2:	2001      	movs	r0, #1
 8016ae4:	7158      	strb	r0, [r3, #5]
}
 8016ae6:	bd08      	pop	{r3, pc}
		return 0;
 8016ae8:	2000      	movs	r0, #0
 8016aea:	e7fc      	b.n	8016ae6 <SSD1306_Init+0x146>
 8016aec:	2000083c 	.word	0x2000083c
 8016af0:	20000aa0 	.word	0x20000aa0

08016af4 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8016af4:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 8016af6:	2400      	movs	r4, #0
 8016af8:	e01a      	b.n	8016b30 <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8016afa:	f1a4 0250 	sub.w	r2, r4, #80	@ 0x50
 8016afe:	b2d2      	uxtb	r2, r2
 8016b00:	2100      	movs	r1, #0
 8016b02:	2078      	movs	r0, #120	@ 0x78
 8016b04:	f7ff ff38 	bl	8016978 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8016b08:	2200      	movs	r2, #0
 8016b0a:	4611      	mov	r1, r2
 8016b0c:	2078      	movs	r0, #120	@ 0x78
 8016b0e:	f7ff ff33 	bl	8016978 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8016b12:	2210      	movs	r2, #16
 8016b14:	2100      	movs	r1, #0
 8016b16:	2078      	movs	r0, #120	@ 0x78
 8016b18:	f7ff ff2e 	bl	8016978 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8016b1c:	2380      	movs	r3, #128	@ 0x80
 8016b1e:	4a06      	ldr	r2, [pc, #24]	@ (8016b38 <SSD1306_UpdateScreen+0x44>)
 8016b20:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8016b24:	2140      	movs	r1, #64	@ 0x40
 8016b26:	2078      	movs	r0, #120	@ 0x78
 8016b28:	f7ff ff04 	bl	8016934 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8016b2c:	3401      	adds	r4, #1
 8016b2e:	b2e4      	uxtb	r4, r4
 8016b30:	2c07      	cmp	r4, #7
 8016b32:	d9e2      	bls.n	8016afa <SSD1306_UpdateScreen+0x6>
}
 8016b34:	bd10      	pop	{r4, pc}
 8016b36:	bf00      	nop
 8016b38:	20000aa8 	.word	0x20000aa8

08016b3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016b3c:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8016b3e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8016b42:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016b44:	f001 fd4a 	bl	80185dc <xTaskGetSchedulerState>
 8016b48:	2801      	cmp	r0, #1
 8016b4a:	d100      	bne.n	8016b4e <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8016b4c:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8016b4e:	f002 f949 	bl	8018de4 <xPortSysTickHandler>
}
 8016b52:	e7fb      	b.n	8016b4c <SysTick_Handler+0x10>

08016b54 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016b54:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8016b58:	b92b      	cbnz	r3, 8016b66 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8016b5a:	4b06      	ldr	r3, [pc, #24]	@ (8016b74 <osKernelInitialize+0x20>)
 8016b5c:	6818      	ldr	r0, [r3, #0]
 8016b5e:	b928      	cbnz	r0, 8016b6c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016b60:	2201      	movs	r2, #1
 8016b62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016b64:	4770      	bx	lr
    stat = osErrorISR;
 8016b66:	f06f 0005 	mvn.w	r0, #5
 8016b6a:	4770      	bx	lr
    } else {
      stat = osError;
 8016b6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }
  }

  return (stat);
}
 8016b70:	4770      	bx	lr
 8016b72:	bf00      	nop
 8016b74:	200017a8 	.word	0x200017a8

08016b78 <osKernelStart>:
 8016b78:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8016b7c:	b973      	cbnz	r3, 8016b9c <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8016b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8016ba8 <osKernelStart+0x30>)
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	2b01      	cmp	r3, #1
 8016b84:	d10d      	bne.n	8016ba2 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8016b86:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016b88:	2400      	movs	r4, #0
 8016b8a:	4b08      	ldr	r3, [pc, #32]	@ (8016bac <osKernelStart+0x34>)
 8016b8c:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8016b8e:	4b06      	ldr	r3, [pc, #24]	@ (8016ba8 <osKernelStart+0x30>)
 8016b90:	2202      	movs	r2, #2
 8016b92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016b94:	f001 fa6a 	bl	801806c <vTaskStartScheduler>
      stat = osOK;
 8016b98:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8016b9a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8016b9c:	f06f 0005 	mvn.w	r0, #5
 8016ba0:	4770      	bx	lr
      stat = osError;
 8016ba2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8016ba6:	4770      	bx	lr
 8016ba8:	200017a8 	.word	0x200017a8
 8016bac:	e000ed00 	.word	0xe000ed00

08016bb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bb2:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016bb4:	2400      	movs	r4, #0
 8016bb6:	9405      	str	r4, [sp, #20]
 8016bb8:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8016bbc:	bb7c      	cbnz	r4, 8016c1e <osThreadNew+0x6e>
 8016bbe:	b370      	cbz	r0, 8016c1e <osThreadNew+0x6e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8016bc0:	b32a      	cbz	r2, 8016c0e <osThreadNew+0x5e>
      if (attr->name != NULL) {
 8016bc2:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8016bc4:	6993      	ldr	r3, [r2, #24]
 8016bc6:	b903      	cbnz	r3, 8016bca <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 8016bc8:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016bca:	1e5c      	subs	r4, r3, #1
 8016bcc:	2c37      	cmp	r4, #55	@ 0x37
 8016bce:	d84a      	bhi.n	8016c66 <osThreadNew+0xb6>
 8016bd0:	6854      	ldr	r4, [r2, #4]
 8016bd2:	f014 0f01 	tst.w	r4, #1
 8016bd6:	d148      	bne.n	8016c6a <osThreadNew+0xba>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8016bd8:	6956      	ldr	r6, [r2, #20]
 8016bda:	b176      	cbz	r6, 8016bfa <osThreadNew+0x4a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016bdc:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016be0:	6894      	ldr	r4, [r2, #8]
 8016be2:	b134      	cbz	r4, 8016bf2 <osThreadNew+0x42>
 8016be4:	68d7      	ldr	r7, [r2, #12]
 8016be6:	f5b7 7fc0 	cmp.w	r7, #384	@ 0x180
 8016bea:	d302      	bcc.n	8016bf2 <osThreadNew+0x42>
 8016bec:	6917      	ldr	r7, [r2, #16]
 8016bee:	b107      	cbz	r7, 8016bf2 <osThreadNew+0x42>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016bf0:	b9c6      	cbnz	r6, 8016c24 <osThreadNew+0x74>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016bf2:	b12c      	cbz	r4, 8016c00 <osThreadNew+0x50>
    mem  = -1;
 8016bf4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016bf8:	e00e      	b.n	8016c18 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 8016bfa:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8016bfe:	e7ef      	b.n	8016be0 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016c00:	68d4      	ldr	r4, [r2, #12]
 8016c02:	b98c      	cbnz	r4, 8016c28 <osThreadNew+0x78>
 8016c04:	6914      	ldr	r4, [r2, #16]
 8016c06:	b194      	cbz	r4, 8016c2e <osThreadNew+0x7e>
    mem  = -1;
 8016c08:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016c0c:	e004      	b.n	8016c18 <osThreadNew+0x68>
    name = NULL;
 8016c0e:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8016c10:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8016c12:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8016c14:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 8016c18:	2c01      	cmp	r4, #1
 8016c1a:	d00a      	beq.n	8016c32 <osThreadNew+0x82>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8016c1c:	b1ac      	cbz	r4, 8016c4a <osThreadNew+0x9a>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016c1e:	9805      	ldr	r0, [sp, #20]
}
 8016c20:	b007      	add	sp, #28
 8016c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8016c24:	2401      	movs	r4, #1
 8016c26:	e7f7      	b.n	8016c18 <osThreadNew+0x68>
    mem  = -1;
 8016c28:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016c2c:	e7f4      	b.n	8016c18 <osThreadNew+0x68>
          mem = 0;
 8016c2e:	2400      	movs	r4, #0
 8016c30:	e7f2      	b.n	8016c18 <osThreadNew+0x68>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016c32:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8016c34:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016c36:	9202      	str	r2, [sp, #8]
 8016c38:	9401      	str	r4, [sp, #4]
 8016c3a:	9300      	str	r3, [sp, #0]
 8016c3c:	460b      	mov	r3, r1
 8016c3e:	4662      	mov	r2, ip
 8016c40:	4629      	mov	r1, r5
 8016c42:	f001 f9a3 	bl	8017f8c <xTaskCreateStatic>
 8016c46:	9005      	str	r0, [sp, #20]
 8016c48:	e7e9      	b.n	8016c1e <osThreadNew+0x6e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016c4a:	aa05      	add	r2, sp, #20
 8016c4c:	9201      	str	r2, [sp, #4]
 8016c4e:	9300      	str	r3, [sp, #0]
 8016c50:	460b      	mov	r3, r1
 8016c52:	fa1f f28c 	uxth.w	r2, ip
 8016c56:	4629      	mov	r1, r5
 8016c58:	f001 f9d5 	bl	8018006 <xTaskCreate>
 8016c5c:	2801      	cmp	r0, #1
 8016c5e:	d0de      	beq.n	8016c1e <osThreadNew+0x6e>
            hTask = NULL;
 8016c60:	2300      	movs	r3, #0
 8016c62:	9305      	str	r3, [sp, #20]
 8016c64:	e7db      	b.n	8016c1e <osThreadNew+0x6e>
        return (NULL);
 8016c66:	2000      	movs	r0, #0
 8016c68:	e7da      	b.n	8016c20 <osThreadNew+0x70>
 8016c6a:	2000      	movs	r0, #0
 8016c6c:	e7d8      	b.n	8016c20 <osThreadNew+0x70>

08016c6e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016c6e:	b508      	push	{r3, lr}
 8016c70:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8016c74:	b933      	cbnz	r3, 8016c84 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8016c76:	b908      	cbnz	r0, 8016c7c <osDelay+0xe>
    stat = osOK;
 8016c78:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8016c7a:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8016c7c:	f001 fb62 	bl	8018344 <vTaskDelay>
    stat = osOK;
 8016c80:	2000      	movs	r0, #0
 8016c82:	e7fa      	b.n	8016c7a <osDelay+0xc>
    stat = osErrorISR;
 8016c84:	f06f 0005 	mvn.w	r0, #5
 8016c88:	e7f7      	b.n	8016c7a <osDelay+0xc>

08016c8a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8016c8a:	b570      	push	{r4, r5, r6, lr}
 8016c8c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d13c      	bne.n	8016d0e <osMutexNew+0x84>
 8016c94:	4604      	mov	r4, r0
    if (attr != NULL) {
 8016c96:	b100      	cbz	r0, 8016c9a <osMutexNew+0x10>
      type = attr->attr_bits;
 8016c98:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8016c9a:	f013 0601 	ands.w	r6, r3, #1
 8016c9e:	d000      	beq.n	8016ca2 <osMutexNew+0x18>
      rmtx = 1U;
 8016ca0:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8016ca2:	f013 0f08 	tst.w	r3, #8
 8016ca6:	d135      	bne.n	8016d14 <osMutexNew+0x8a>
      mem = -1;

      if (attr != NULL) {
 8016ca8:	b344      	cbz	r4, 8016cfc <osMutexNew+0x72>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8016caa:	68a1      	ldr	r1, [r4, #8]
 8016cac:	b111      	cbz	r1, 8016cb4 <osMutexNew+0x2a>
 8016cae:	68e3      	ldr	r3, [r4, #12]
 8016cb0:	2b4f      	cmp	r3, #79	@ 0x4f
 8016cb2:	d818      	bhi.n	8016ce6 <osMutexNew+0x5c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016cb4:	b191      	cbz	r1, 8016cdc <osMutexNew+0x52>
      mem = -1;
 8016cb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 8016cba:	bb6b      	cbnz	r3, 8016d18 <osMutexNew+0x8e>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8016cbc:	b316      	cbz	r6, 8016d04 <osMutexNew+0x7a>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8016cbe:	2004      	movs	r0, #4
 8016cc0:	f000 fc04 	bl	80174cc <xQueueCreateMutex>
 8016cc4:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8016cc6:	b31d      	cbz	r5, 8016d10 <osMutexNew+0x86>
        if (attr != NULL) {
 8016cc8:	b104      	cbz	r4, 8016ccc <osMutexNew+0x42>
          name = attr->name;
 8016cca:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8016ccc:	4621      	mov	r1, r4
 8016cce:	4628      	mov	r0, r5
 8016cd0:	f000 ff64 	bl	8017b9c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8016cd4:	b1e6      	cbz	r6, 8016d10 <osMutexNew+0x86>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8016cd6:	f045 0501 	orr.w	r5, r5, #1
 8016cda:	e019      	b.n	8016d10 <osMutexNew+0x86>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016cdc:	68e3      	ldr	r3, [r4, #12]
 8016cde:	b17b      	cbz	r3, 8016d00 <osMutexNew+0x76>
      mem = -1;
 8016ce0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016ce4:	e7e9      	b.n	8016cba <osMutexNew+0x30>
          if (rmtx != 0U) {
 8016ce6:	b126      	cbz	r6, 8016cf2 <osMutexNew+0x68>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8016ce8:	2004      	movs	r0, #4
 8016cea:	f000 fbfa 	bl	80174e2 <xQueueCreateMutexStatic>
 8016cee:	4605      	mov	r5, r0
 8016cf0:	e7e9      	b.n	8016cc6 <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8016cf2:	2001      	movs	r0, #1
 8016cf4:	f000 fbf5 	bl	80174e2 <xQueueCreateMutexStatic>
 8016cf8:	4605      	mov	r5, r0
 8016cfa:	e7e4      	b.n	8016cc6 <osMutexNew+0x3c>
        mem = 0;
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	e7dc      	b.n	8016cba <osMutexNew+0x30>
            mem = 0;
 8016d00:	2300      	movs	r3, #0
 8016d02:	e7da      	b.n	8016cba <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 8016d04:	2001      	movs	r0, #1
 8016d06:	f000 fbe1 	bl	80174cc <xQueueCreateMutex>
 8016d0a:	4605      	mov	r5, r0
 8016d0c:	e7db      	b.n	8016cc6 <osMutexNew+0x3c>
  hMutex = NULL;
 8016d0e:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8016d10:	4628      	mov	r0, r5
 8016d12:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8016d14:	2500      	movs	r5, #0
 8016d16:	e7fb      	b.n	8016d10 <osMutexNew+0x86>
 8016d18:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8016d1a:	e7f9      	b.n	8016d10 <osMutexNew+0x86>

08016d1c <osMutexAcquire>:
 8016d1c:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8016d20:	b9da      	cbnz	r2, 8016d5a <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8016d22:	b510      	push	{r4, lr}
 8016d24:	4603      	mov	r3, r0
 8016d26:	460c      	mov	r4, r1
 8016d28:	f020 0001 	bic.w	r0, r0, #1
 8016d2c:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8016d30:	2b01      	cmp	r3, #1
 8016d32:	d915      	bls.n	8016d60 <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8016d34:	b141      	cbz	r1, 8016d48 <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8016d36:	4621      	mov	r1, r4
 8016d38:	f000 fdeb 	bl	8017912 <xQueueTakeMutexRecursive>
 8016d3c:	2801      	cmp	r0, #1
 8016d3e:	d012      	beq.n	8016d66 <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 8016d40:	b19c      	cbz	r4, 8016d6a <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 8016d42:	f06f 0001 	mvn.w	r0, #1
 8016d46:	e00f      	b.n	8016d68 <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8016d48:	4621      	mov	r1, r4
 8016d4a:	f000 fd0f 	bl	801776c <xQueueSemaphoreTake>
 8016d4e:	2801      	cmp	r0, #1
 8016d50:	d00e      	beq.n	8016d70 <osMutexAcquire+0x54>
        if (timeout != 0U) {
 8016d52:	b17c      	cbz	r4, 8016d74 <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 8016d54:	f06f 0001 	mvn.w	r0, #1
 8016d58:	e006      	b.n	8016d68 <osMutexAcquire+0x4c>
    stat = osErrorISR;
 8016d5a:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8016d5e:	4770      	bx	lr
    stat = osErrorParameter;
 8016d60:	f06f 0003 	mvn.w	r0, #3
 8016d64:	e000      	b.n	8016d68 <osMutexAcquire+0x4c>
  stat = osOK;
 8016d66:	2000      	movs	r0, #0
}
 8016d68:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 8016d6a:	f06f 0002 	mvn.w	r0, #2
 8016d6e:	e7fb      	b.n	8016d68 <osMutexAcquire+0x4c>
  stat = osOK;
 8016d70:	2000      	movs	r0, #0
 8016d72:	e7f9      	b.n	8016d68 <osMutexAcquire+0x4c>
          stat = osErrorResource;
 8016d74:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8016d78:	e7f6      	b.n	8016d68 <osMutexAcquire+0x4c>

08016d7a <osMutexRelease>:
 8016d7a:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8016d7e:	b9ba      	cbnz	r2, 8016db0 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8016d80:	b508      	push	{r3, lr}
 8016d82:	4603      	mov	r3, r0
 8016d84:	f020 0001 	bic.w	r0, r0, #1
 8016d88:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8016d8c:	2b01      	cmp	r3, #1
 8016d8e:	d912      	bls.n	8016db6 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8016d90:	b129      	cbz	r1, 8016d9e <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8016d92:	f000 fbb5 	bl	8017500 <xQueueGiveMutexRecursive>
 8016d96:	2801      	cmp	r0, #1
 8016d98:	d110      	bne.n	8016dbc <osMutexRelease+0x42>
  stat = osOK;
 8016d9a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8016d9c:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8016d9e:	2300      	movs	r3, #0
 8016da0:	461a      	mov	r2, r3
 8016da2:	4619      	mov	r1, r3
 8016da4:	f000 fac2 	bl	801732c <xQueueGenericSend>
 8016da8:	2801      	cmp	r0, #1
 8016daa:	d10a      	bne.n	8016dc2 <osMutexRelease+0x48>
  stat = osOK;
 8016dac:	2000      	movs	r0, #0
 8016dae:	e7f5      	b.n	8016d9c <osMutexRelease+0x22>
    stat = osErrorISR;
 8016db0:	f06f 0005 	mvn.w	r0, #5
}
 8016db4:	4770      	bx	lr
    stat = osErrorParameter;
 8016db6:	f06f 0003 	mvn.w	r0, #3
 8016dba:	e7ef      	b.n	8016d9c <osMutexRelease+0x22>
        stat = osErrorResource;
 8016dbc:	f06f 0002 	mvn.w	r0, #2
 8016dc0:	e7ec      	b.n	8016d9c <osMutexRelease+0x22>
        stat = osErrorResource;
 8016dc2:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8016dc6:	e7e9      	b.n	8016d9c <osMutexRelease+0x22>

08016dc8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8016dc8:	b570      	push	{r4, r5, r6, lr}
 8016dca:	b082      	sub	sp, #8
 8016dcc:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d13a      	bne.n	8016e4a <osMessageQueueNew+0x82>
 8016dd4:	4614      	mov	r4, r2
 8016dd6:	2800      	cmp	r0, #0
 8016dd8:	d03b      	beq.n	8016e52 <osMessageQueueNew+0x8a>
 8016dda:	2900      	cmp	r1, #0
 8016ddc:	d03b      	beq.n	8016e56 <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 8016dde:	b36a      	cbz	r2, 8016e3c <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8016de0:	6893      	ldr	r3, [r2, #8]
 8016de2:	b14b      	cbz	r3, 8016df8 <osMessageQueueNew+0x30>
 8016de4:	68d2      	ldr	r2, [r2, #12]
 8016de6:	2a4f      	cmp	r2, #79	@ 0x4f
 8016de8:	d906      	bls.n	8016df8 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8016dea:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8016dec:	b122      	cbz	r2, 8016df8 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8016dee:	fb01 f500 	mul.w	r5, r1, r0
 8016df2:	6966      	ldr	r6, [r4, #20]
 8016df4:	42ae      	cmp	r6, r5
 8016df6:	d21b      	bcs.n	8016e30 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8016df8:	b173      	cbz	r3, 8016e18 <osMessageQueueNew+0x50>
    mem = -1;
 8016dfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8016dfe:	bb63      	cbnz	r3, 8016e5a <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8016e00:	2200      	movs	r2, #0
 8016e02:	f000 fa6f 	bl	80172e4 <xQueueGenericCreate>
 8016e06:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8016e08:	b305      	cbz	r5, 8016e4c <osMessageQueueNew+0x84>
      if (attr != NULL) {
 8016e0a:	b104      	cbz	r4, 8016e0e <osMessageQueueNew+0x46>
        name = attr->name;
 8016e0c:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8016e0e:	4621      	mov	r1, r4
 8016e10:	4628      	mov	r0, r5
 8016e12:	f000 fec3 	bl	8017b9c <vQueueAddToRegistry>
 8016e16:	e019      	b.n	8016e4c <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8016e18:	68e3      	ldr	r3, [r4, #12]
 8016e1a:	b98b      	cbnz	r3, 8016e40 <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8016e1c:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8016e1e:	b113      	cbz	r3, 8016e26 <osMessageQueueNew+0x5e>
    mem = -1;
 8016e20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016e24:	e7eb      	b.n	8016dfe <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8016e26:	6963      	ldr	r3, [r4, #20]
 8016e28:	b16b      	cbz	r3, 8016e46 <osMessageQueueNew+0x7e>
    mem = -1;
 8016e2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016e2e:	e7e6      	b.n	8016dfe <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8016e30:	2500      	movs	r5, #0
 8016e32:	9500      	str	r5, [sp, #0]
 8016e34:	f000 fa0c 	bl	8017250 <xQueueGenericCreateStatic>
 8016e38:	4605      	mov	r5, r0
 8016e3a:	e7e5      	b.n	8016e08 <osMessageQueueNew+0x40>
      mem = 0;
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	e7de      	b.n	8016dfe <osMessageQueueNew+0x36>
    mem = -1;
 8016e40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016e44:	e7db      	b.n	8016dfe <osMessageQueueNew+0x36>
          mem = 0;
 8016e46:	2300      	movs	r3, #0
 8016e48:	e7d9      	b.n	8016dfe <osMessageQueueNew+0x36>
  hQueue = NULL;
 8016e4a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8016e4c:	4628      	mov	r0, r5
 8016e4e:	b002      	add	sp, #8
 8016e50:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8016e52:	2500      	movs	r5, #0
 8016e54:	e7fa      	b.n	8016e4c <osMessageQueueNew+0x84>
 8016e56:	2500      	movs	r5, #0
 8016e58:	e7f8      	b.n	8016e4c <osMessageQueueNew+0x84>
 8016e5a:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8016e5c:	e7f6      	b.n	8016e4c <osMessageQueueNew+0x84>

08016e5e <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8016e5e:	b510      	push	{r4, lr}
 8016e60:	b082      	sub	sp, #8
 8016e62:	461c      	mov	r4, r3
 8016e64:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8016e68:	b1c3      	cbz	r3, 8016e9c <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016e6a:	b318      	cbz	r0, 8016eb4 <osMessageQueuePut+0x56>
 8016e6c:	b329      	cbz	r1, 8016eba <osMessageQueuePut+0x5c>
 8016e6e:	bb3c      	cbnz	r4, 8016ec0 <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8016e70:	2300      	movs	r3, #0
 8016e72:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8016e74:	aa01      	add	r2, sp, #4
 8016e76:	f000 fb63 	bl	8017540 <xQueueGenericSendFromISR>
 8016e7a:	2801      	cmp	r0, #1
 8016e7c:	d123      	bne.n	8016ec6 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8016e7e:	9801      	ldr	r0, [sp, #4]
 8016e80:	b150      	cbz	r0, 8016e98 <osMessageQueuePut+0x3a>
 8016e82:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8016e86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016e8a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8016e8e:	f3bf 8f4f 	dsb	sy
 8016e92:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8016e96:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8016e98:	b002      	add	sp, #8
 8016e9a:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8016e9c:	b1b0      	cbz	r0, 8016ecc <osMessageQueuePut+0x6e>
 8016e9e:	b1c1      	cbz	r1, 8016ed2 <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	4622      	mov	r2, r4
 8016ea4:	f000 fa42 	bl	801732c <xQueueGenericSend>
 8016ea8:	2801      	cmp	r0, #1
 8016eaa:	d015      	beq.n	8016ed8 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 8016eac:	b1b4      	cbz	r4, 8016edc <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 8016eae:	f06f 0001 	mvn.w	r0, #1
 8016eb2:	e7f1      	b.n	8016e98 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8016eb4:	f06f 0003 	mvn.w	r0, #3
 8016eb8:	e7ee      	b.n	8016e98 <osMessageQueuePut+0x3a>
 8016eba:	f06f 0003 	mvn.w	r0, #3
 8016ebe:	e7eb      	b.n	8016e98 <osMessageQueuePut+0x3a>
 8016ec0:	f06f 0003 	mvn.w	r0, #3
 8016ec4:	e7e8      	b.n	8016e98 <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 8016ec6:	f06f 0002 	mvn.w	r0, #2
 8016eca:	e7e5      	b.n	8016e98 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8016ecc:	f06f 0003 	mvn.w	r0, #3
 8016ed0:	e7e2      	b.n	8016e98 <osMessageQueuePut+0x3a>
 8016ed2:	f06f 0003 	mvn.w	r0, #3
 8016ed6:	e7df      	b.n	8016e98 <osMessageQueuePut+0x3a>
  stat = osOK;
 8016ed8:	2000      	movs	r0, #0
 8016eda:	e7dd      	b.n	8016e98 <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 8016edc:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8016ee0:	e7da      	b.n	8016e98 <osMessageQueuePut+0x3a>

08016ee2 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8016ee2:	b510      	push	{r4, lr}
 8016ee4:	b082      	sub	sp, #8
 8016ee6:	461c      	mov	r4, r3
 8016ee8:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8016eec:	b1c3      	cbz	r3, 8016f20 <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016eee:	b310      	cbz	r0, 8016f36 <osMessageQueueGet+0x54>
 8016ef0:	b321      	cbz	r1, 8016f3c <osMessageQueueGet+0x5a>
 8016ef2:	bb34      	cbnz	r4, 8016f42 <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8016ef8:	aa01      	add	r2, sp, #4
 8016efa:	f000 fdd9 	bl	8017ab0 <xQueueReceiveFromISR>
 8016efe:	2801      	cmp	r0, #1
 8016f00:	d122      	bne.n	8016f48 <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8016f02:	9801      	ldr	r0, [sp, #4]
 8016f04:	b150      	cbz	r0, 8016f1c <osMessageQueueGet+0x3a>
 8016f06:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8016f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016f0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8016f12:	f3bf 8f4f 	dsb	sy
 8016f16:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8016f1a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8016f1c:	b002      	add	sp, #8
 8016f1e:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8016f20:	b1a8      	cbz	r0, 8016f4e <osMessageQueueGet+0x6c>
 8016f22:	b1b9      	cbz	r1, 8016f54 <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8016f24:	4622      	mov	r2, r4
 8016f26:	f000 fb72 	bl	801760e <xQueueReceive>
 8016f2a:	2801      	cmp	r0, #1
 8016f2c:	d015      	beq.n	8016f5a <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 8016f2e:	b1b4      	cbz	r4, 8016f5e <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 8016f30:	f06f 0001 	mvn.w	r0, #1
 8016f34:	e7f2      	b.n	8016f1c <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8016f36:	f06f 0003 	mvn.w	r0, #3
 8016f3a:	e7ef      	b.n	8016f1c <osMessageQueueGet+0x3a>
 8016f3c:	f06f 0003 	mvn.w	r0, #3
 8016f40:	e7ec      	b.n	8016f1c <osMessageQueueGet+0x3a>
 8016f42:	f06f 0003 	mvn.w	r0, #3
 8016f46:	e7e9      	b.n	8016f1c <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 8016f48:	f06f 0002 	mvn.w	r0, #2
 8016f4c:	e7e6      	b.n	8016f1c <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8016f4e:	f06f 0003 	mvn.w	r0, #3
 8016f52:	e7e3      	b.n	8016f1c <osMessageQueueGet+0x3a>
 8016f54:	f06f 0003 	mvn.w	r0, #3
 8016f58:	e7e0      	b.n	8016f1c <osMessageQueueGet+0x3a>
  stat = osOK;
 8016f5a:	2000      	movs	r0, #0
 8016f5c:	e7de      	b.n	8016f1c <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 8016f5e:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8016f62:	e7db      	b.n	8016f1c <osMessageQueueGet+0x3a>

08016f64 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 8016f64:	b148      	cbz	r0, 8016f7a <osMessageQueueGetCount+0x16>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8016f66:	b508      	push	{r3, lr}
 8016f68:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8016f6c:	b112      	cbz	r2, 8016f74 <osMessageQueueGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8016f6e:	f000 fe09 	bl	8017b84 <uxQueueMessagesWaitingFromISR>
  else {
    count = uxQueueMessagesWaiting (hQueue);
  }

  return ((uint32_t)count);
}
 8016f72:	bd08      	pop	{r3, pc}
    count = uxQueueMessagesWaiting (hQueue);
 8016f74:	f000 fdf3 	bl	8017b5e <uxQueueMessagesWaiting>
 8016f78:	e7fb      	b.n	8016f72 <osMessageQueueGetCount+0xe>
    count = 0U;
 8016f7a:	2000      	movs	r0, #0
}
 8016f7c:	4770      	bx	lr

08016f7e <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8016f7e:	b508      	push	{r3, lr}
 8016f80:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8016f84:	b92b      	cbnz	r3, 8016f92 <osMessageQueueReset+0x14>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 8016f86:	b138      	cbz	r0, 8016f98 <osMessageQueueReset+0x1a>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 8016f88:	2100      	movs	r1, #0
 8016f8a:	f000 f90e 	bl	80171aa <xQueueGenericReset>
    stat = osOK;
 8016f8e:	2000      	movs	r0, #0
  }

  return (stat);
}
 8016f90:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8016f92:	f06f 0005 	mvn.w	r0, #5
 8016f96:	e7fb      	b.n	8016f90 <osMessageQueueReset+0x12>
    stat = osErrorParameter;
 8016f98:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8016f9c:	e7f8      	b.n	8016f90 <osMessageQueueReset+0x12>
	...

08016fa0 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016fa0:	4b03      	ldr	r3, [pc, #12]	@ (8016fb0 <vApplicationGetIdleTaskMemory+0x10>)
 8016fa2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016fa4:	4b03      	ldr	r3, [pc, #12]	@ (8016fb4 <vApplicationGetIdleTaskMemory+0x14>)
 8016fa6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016fa8:	2380      	movs	r3, #128	@ 0x80
 8016faa:	6013      	str	r3, [r2, #0]
}
 8016fac:	4770      	bx	lr
 8016fae:	bf00      	nop
 8016fb0:	20001628 	.word	0x20001628
 8016fb4:	20001428 	.word	0x20001428

08016fb8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016fb8:	4b03      	ldr	r3, [pc, #12]	@ (8016fc8 <vApplicationGetTimerTaskMemory+0x10>)
 8016fba:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016fbc:	4b03      	ldr	r3, [pc, #12]	@ (8016fcc <vApplicationGetTimerTaskMemory+0x14>)
 8016fbe:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016fc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016fc4:	6013      	str	r3, [r2, #0]
}
 8016fc6:	4770      	bx	lr
 8016fc8:	200012a8 	.word	0x200012a8
 8016fcc:	20000ea8 	.word	0x20000ea8

08016fd0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016fd0:	f100 0308 	add.w	r3, r0, #8
 8016fd4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016fd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016fda:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016fdc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016fde:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016fe4:	4770      	bx	lr

08016fe6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016fea:	4770      	bx	lr

08016fec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8016fec:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016fee:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016ff0:	689a      	ldr	r2, [r3, #8]
 8016ff2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016ff4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016ff6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016ff8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8016ffa:	6803      	ldr	r3, [r0, #0]
 8016ffc:	3301      	adds	r3, #1
 8016ffe:	6003      	str	r3, [r0, #0]
}
 8017000:	4770      	bx	lr

08017002 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017002:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017004:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017006:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 801700a:	d011      	beq.n	8017030 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801700c:	f100 0308 	add.w	r3, r0, #8
 8017010:	461c      	mov	r4, r3
 8017012:	685b      	ldr	r3, [r3, #4]
 8017014:	681a      	ldr	r2, [r3, #0]
 8017016:	42aa      	cmp	r2, r5
 8017018:	d9fa      	bls.n	8017010 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801701a:	6863      	ldr	r3, [r4, #4]
 801701c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801701e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017020:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8017022:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017024:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8017026:	6803      	ldr	r3, [r0, #0]
 8017028:	3301      	adds	r3, #1
 801702a:	6003      	str	r3, [r0, #0]
}
 801702c:	bc30      	pop	{r4, r5}
 801702e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8017030:	6904      	ldr	r4, [r0, #16]
 8017032:	e7f2      	b.n	801701a <vListInsert+0x18>

08017034 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017034:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017036:	6841      	ldr	r1, [r0, #4]
 8017038:	6882      	ldr	r2, [r0, #8]
 801703a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801703c:	6841      	ldr	r1, [r0, #4]
 801703e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8017040:	685a      	ldr	r2, [r3, #4]
 8017042:	4282      	cmp	r2, r0
 8017044:	d006      	beq.n	8017054 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017046:	2200      	movs	r2, #0
 8017048:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 801704a:	681a      	ldr	r2, [r3, #0]
 801704c:	3a01      	subs	r2, #1
 801704e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017050:	6818      	ldr	r0, [r3, #0]
}
 8017052:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017054:	6882      	ldr	r2, [r0, #8]
 8017056:	605a      	str	r2, [r3, #4]
 8017058:	e7f5      	b.n	8017046 <uxListRemove+0x12>

0801705a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801705a:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801705c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801705e:	b118      	cbz	r0, 8017068 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8017060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017062:	6818      	ldr	r0, [r3, #0]
 8017064:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8017068:	4770      	bx	lr

0801706a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801706a:	b510      	push	{r4, lr}
 801706c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801706e:	f001 fe49 	bl	8018d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017072:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8017074:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8017076:	429a      	cmp	r2, r3
 8017078:	d004      	beq.n	8017084 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 801707a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 801707c:	f001 fe64 	bl	8018d48 <vPortExitCritical>

	return xReturn;
}
 8017080:	4620      	mov	r0, r4
 8017082:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8017084:	2401      	movs	r4, #1
 8017086:	e7f9      	b.n	801707c <prvIsQueueFull+0x12>

08017088 <prvIsQueueEmpty>:
{
 8017088:	b510      	push	{r4, lr}
 801708a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801708c:	f001 fe3a 	bl	8018d04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017090:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017092:	b923      	cbnz	r3, 801709e <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8017094:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8017096:	f001 fe57 	bl	8018d48 <vPortExitCritical>
}
 801709a:	4620      	mov	r0, r4
 801709c:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 801709e:	2400      	movs	r4, #0
 80170a0:	e7f9      	b.n	8017096 <prvIsQueueEmpty+0xe>

080170a2 <prvCopyDataToQueue>:
{
 80170a2:	b570      	push	{r4, r5, r6, lr}
 80170a4:	4604      	mov	r4, r0
 80170a6:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80170a8:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80170aa:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80170ac:	b95a      	cbnz	r2, 80170c6 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80170ae:	6803      	ldr	r3, [r0, #0]
 80170b0:	b11b      	cbz	r3, 80170ba <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80170b2:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80170b4:	3601      	adds	r6, #1
 80170b6:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 80170b8:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80170ba:	6880      	ldr	r0, [r0, #8]
 80170bc:	f001 faea 	bl	8018694 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80170c0:	2300      	movs	r3, #0
 80170c2:	60a3      	str	r3, [r4, #8]
 80170c4:	e7f6      	b.n	80170b4 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80170c6:	b96d      	cbnz	r5, 80170e4 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80170c8:	6840      	ldr	r0, [r0, #4]
 80170ca:	f013 ff15 	bl	802aef8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80170ce:	6863      	ldr	r3, [r4, #4]
 80170d0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80170d2:	4413      	add	r3, r2
 80170d4:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80170d6:	68a2      	ldr	r2, [r4, #8]
 80170d8:	4293      	cmp	r3, r2
 80170da:	d319      	bcc.n	8017110 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80170dc:	6823      	ldr	r3, [r4, #0]
 80170de:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80170e0:	4628      	mov	r0, r5
 80170e2:	e7e7      	b.n	80170b4 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80170e4:	68c0      	ldr	r0, [r0, #12]
 80170e6:	f013 ff07 	bl	802aef8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80170ea:	68e3      	ldr	r3, [r4, #12]
 80170ec:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80170ee:	4251      	negs	r1, r2
 80170f0:	1a9b      	subs	r3, r3, r2
 80170f2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80170f4:	6822      	ldr	r2, [r4, #0]
 80170f6:	4293      	cmp	r3, r2
 80170f8:	d202      	bcs.n	8017100 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80170fa:	68a3      	ldr	r3, [r4, #8]
 80170fc:	440b      	add	r3, r1
 80170fe:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8017100:	2d02      	cmp	r5, #2
 8017102:	d001      	beq.n	8017108 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8017104:	2000      	movs	r0, #0
 8017106:	e7d5      	b.n	80170b4 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017108:	b126      	cbz	r6, 8017114 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 801710a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 801710c:	2000      	movs	r0, #0
 801710e:	e7d1      	b.n	80170b4 <prvCopyDataToQueue+0x12>
 8017110:	4628      	mov	r0, r5
 8017112:	e7cf      	b.n	80170b4 <prvCopyDataToQueue+0x12>
 8017114:	2000      	movs	r0, #0
 8017116:	e7cd      	b.n	80170b4 <prvCopyDataToQueue+0x12>

08017118 <prvCopyDataFromQueue>:
{
 8017118:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801711a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 801711c:	b16a      	cbz	r2, 801713a <prvCopyDataFromQueue+0x22>
{
 801711e:	b510      	push	{r4, lr}
 8017120:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017122:	68d9      	ldr	r1, [r3, #12]
 8017124:	4411      	add	r1, r2
 8017126:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017128:	689c      	ldr	r4, [r3, #8]
 801712a:	42a1      	cmp	r1, r4
 801712c:	d301      	bcc.n	8017132 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801712e:	6819      	ldr	r1, [r3, #0]
 8017130:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017132:	68d9      	ldr	r1, [r3, #12]
 8017134:	f013 fee0 	bl	802aef8 <memcpy>
}
 8017138:	bd10      	pop	{r4, pc}
 801713a:	4770      	bx	lr

0801713c <prvUnlockQueue>:
{
 801713c:	b538      	push	{r3, r4, r5, lr}
 801713e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8017140:	f001 fde0 	bl	8018d04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8017144:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8017148:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801714a:	e001      	b.n	8017150 <prvUnlockQueue+0x14>
			--cTxLock;
 801714c:	3c01      	subs	r4, #1
 801714e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017150:	2c00      	cmp	r4, #0
 8017152:	dd0a      	ble.n	801716a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017154:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8017156:	b143      	cbz	r3, 801716a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017158:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 801715c:	f001 f99e 	bl	801849c <xTaskRemoveFromEventList>
 8017160:	2800      	cmp	r0, #0
 8017162:	d0f3      	beq.n	801714c <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8017164:	f001 fa2e 	bl	80185c4 <vTaskMissedYield>
 8017168:	e7f0      	b.n	801714c <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 801716a:	23ff      	movs	r3, #255	@ 0xff
 801716c:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8017170:	f001 fdea 	bl	8018d48 <vPortExitCritical>
	taskENTER_CRITICAL();
 8017174:	f001 fdc6 	bl	8018d04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8017178:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 801717c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801717e:	e001      	b.n	8017184 <prvUnlockQueue+0x48>
				--cRxLock;
 8017180:	3c01      	subs	r4, #1
 8017182:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017184:	2c00      	cmp	r4, #0
 8017186:	dd0a      	ble.n	801719e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017188:	692b      	ldr	r3, [r5, #16]
 801718a:	b143      	cbz	r3, 801719e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801718c:	f105 0010 	add.w	r0, r5, #16
 8017190:	f001 f984 	bl	801849c <xTaskRemoveFromEventList>
 8017194:	2800      	cmp	r0, #0
 8017196:	d0f3      	beq.n	8017180 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8017198:	f001 fa14 	bl	80185c4 <vTaskMissedYield>
 801719c:	e7f0      	b.n	8017180 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 801719e:	23ff      	movs	r3, #255	@ 0xff
 80171a0:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 80171a4:	f001 fdd0 	bl	8018d48 <vPortExitCritical>
}
 80171a8:	bd38      	pop	{r3, r4, r5, pc}

080171aa <xQueueGenericReset>:
{
 80171aa:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80171ac:	b1e0      	cbz	r0, 80171e8 <xQueueGenericReset+0x3e>
 80171ae:	460d      	mov	r5, r1
 80171b0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80171b2:	f001 fda7 	bl	8018d04 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80171b6:	6823      	ldr	r3, [r4, #0]
 80171b8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80171ba:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80171bc:	fb01 3002 	mla	r0, r1, r2, r3
 80171c0:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80171c2:	2000      	movs	r0, #0
 80171c4:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80171c6:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80171c8:	3a01      	subs	r2, #1
 80171ca:	fb02 3301 	mla	r3, r2, r1, r3
 80171ce:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80171d0:	23ff      	movs	r3, #255	@ 0xff
 80171d2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80171d6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80171da:	b9fd      	cbnz	r5, 801721c <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80171dc:	6923      	ldr	r3, [r4, #16]
 80171de:	b963      	cbnz	r3, 80171fa <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80171e0:	f001 fdb2 	bl	8018d48 <vPortExitCritical>
}
 80171e4:	2001      	movs	r0, #1
 80171e6:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80171e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80171ec:	f383 8811 	msr	BASEPRI, r3
 80171f0:	f3bf 8f6f 	isb	sy
 80171f4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80171f8:	e7fe      	b.n	80171f8 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80171fa:	f104 0010 	add.w	r0, r4, #16
 80171fe:	f001 f94d 	bl	801849c <xTaskRemoveFromEventList>
 8017202:	2800      	cmp	r0, #0
 8017204:	d0ec      	beq.n	80171e0 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8017206:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801720a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801720e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8017212:	f3bf 8f4f 	dsb	sy
 8017216:	f3bf 8f6f 	isb	sy
 801721a:	e7e1      	b.n	80171e0 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801721c:	f104 0010 	add.w	r0, r4, #16
 8017220:	f7ff fed6 	bl	8016fd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017224:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8017228:	f7ff fed2 	bl	8016fd0 <vListInitialise>
 801722c:	e7d8      	b.n	80171e0 <xQueueGenericReset+0x36>

0801722e <prvInitialiseNewQueue>:
{
 801722e:	b538      	push	{r3, r4, r5, lr}
 8017230:	461d      	mov	r5, r3
 8017232:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8017234:	460b      	mov	r3, r1
 8017236:	b949      	cbnz	r1, 801724c <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017238:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 801723a:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801723c:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801723e:	2101      	movs	r1, #1
 8017240:	4620      	mov	r0, r4
 8017242:	f7ff ffb2 	bl	80171aa <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8017246:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 801724a:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801724c:	6022      	str	r2, [r4, #0]
 801724e:	e7f4      	b.n	801723a <prvInitialiseNewQueue+0xc>

08017250 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017250:	b940      	cbnz	r0, 8017264 <xQueueGenericCreateStatic+0x14>
 8017252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017256:	f383 8811 	msr	BASEPRI, r3
 801725a:	f3bf 8f6f 	isb	sy
 801725e:	f3bf 8f4f 	dsb	sy
 8017262:	e7fe      	b.n	8017262 <xQueueGenericCreateStatic+0x12>
	{
 8017264:	b510      	push	{r4, lr}
 8017266:	b084      	sub	sp, #16
 8017268:	461c      	mov	r4, r3
 801726a:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 801726c:	b153      	cbz	r3, 8017284 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801726e:	b192      	cbz	r2, 8017296 <xQueueGenericCreateStatic+0x46>
 8017270:	b989      	cbnz	r1, 8017296 <xQueueGenericCreateStatic+0x46>
 8017272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017276:	f383 8811 	msr	BASEPRI, r3
 801727a:	f3bf 8f6f 	isb	sy
 801727e:	f3bf 8f4f 	dsb	sy
 8017282:	e7fe      	b.n	8017282 <xQueueGenericCreateStatic+0x32>
 8017284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017288:	f383 8811 	msr	BASEPRI, r3
 801728c:	f3bf 8f6f 	isb	sy
 8017290:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8017294:	e7fe      	b.n	8017294 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017296:	b16a      	cbz	r2, 80172b4 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017298:	2350      	movs	r3, #80	@ 0x50
 801729a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 801729c:	9b03      	ldr	r3, [sp, #12]
 801729e:	2b50      	cmp	r3, #80	@ 0x50
 80172a0:	d013      	beq.n	80172ca <xQueueGenericCreateStatic+0x7a>
 80172a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172a6:	f383 8811 	msr	BASEPRI, r3
 80172aa:	f3bf 8f6f 	isb	sy
 80172ae:	f3bf 8f4f 	dsb	sy
 80172b2:	e7fe      	b.n	80172b2 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80172b4:	2900      	cmp	r1, #0
 80172b6:	d0ef      	beq.n	8017298 <xQueueGenericCreateStatic+0x48>
 80172b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172bc:	f383 8811 	msr	BASEPRI, r3
 80172c0:	f3bf 8f6f 	isb	sy
 80172c4:	f3bf 8f4f 	dsb	sy
 80172c8:	e7fe      	b.n	80172c8 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80172ca:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80172cc:	2301      	movs	r3, #1
 80172ce:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80172d2:	9400      	str	r4, [sp, #0]
 80172d4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80172d8:	4660      	mov	r0, ip
 80172da:	f7ff ffa8 	bl	801722e <prvInitialiseNewQueue>
	}
 80172de:	4620      	mov	r0, r4
 80172e0:	b004      	add	sp, #16
 80172e2:	bd10      	pop	{r4, pc}

080172e4 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80172e4:	b940      	cbnz	r0, 80172f8 <xQueueGenericCreate+0x14>
 80172e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172ea:	f383 8811 	msr	BASEPRI, r3
 80172ee:	f3bf 8f6f 	isb	sy
 80172f2:	f3bf 8f4f 	dsb	sy
 80172f6:	e7fe      	b.n	80172f6 <xQueueGenericCreate+0x12>
	{
 80172f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172fa:	b083      	sub	sp, #12
 80172fc:	460d      	mov	r5, r1
 80172fe:	4614      	mov	r4, r2
 8017300:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017302:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8017306:	3050      	adds	r0, #80	@ 0x50
 8017308:	f001 feb6 	bl	8019078 <pvPortMalloc>
		if( pxNewQueue != NULL )
 801730c:	4607      	mov	r7, r0
 801730e:	b150      	cbz	r0, 8017326 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8017310:	2300      	movs	r3, #0
 8017312:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017316:	9000      	str	r0, [sp, #0]
 8017318:	4623      	mov	r3, r4
 801731a:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 801731e:	4629      	mov	r1, r5
 8017320:	4630      	mov	r0, r6
 8017322:	f7ff ff84 	bl	801722e <prvInitialiseNewQueue>
	}
 8017326:	4638      	mov	r0, r7
 8017328:	b003      	add	sp, #12
 801732a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801732c <xQueueGenericSend>:
{
 801732c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801732e:	b085      	sub	sp, #20
 8017330:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8017332:	b188      	cbz	r0, 8017358 <xQueueGenericSend+0x2c>
 8017334:	460f      	mov	r7, r1
 8017336:	461d      	mov	r5, r3
 8017338:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801733a:	b1b1      	cbz	r1, 801736a <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801733c:	2d02      	cmp	r5, #2
 801733e:	d120      	bne.n	8017382 <xQueueGenericSend+0x56>
 8017340:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8017342:	2b01      	cmp	r3, #1
 8017344:	d01d      	beq.n	8017382 <xQueueGenericSend+0x56>
 8017346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801734a:	f383 8811 	msr	BASEPRI, r3
 801734e:	f3bf 8f6f 	isb	sy
 8017352:	f3bf 8f4f 	dsb	sy
 8017356:	e7fe      	b.n	8017356 <xQueueGenericSend+0x2a>
 8017358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801735c:	f383 8811 	msr	BASEPRI, r3
 8017360:	f3bf 8f6f 	isb	sy
 8017364:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8017368:	e7fe      	b.n	8017368 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801736a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801736c:	2b00      	cmp	r3, #0
 801736e:	d0e5      	beq.n	801733c <xQueueGenericSend+0x10>
 8017370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017374:	f383 8811 	msr	BASEPRI, r3
 8017378:	f3bf 8f6f 	isb	sy
 801737c:	f3bf 8f4f 	dsb	sy
 8017380:	e7fe      	b.n	8017380 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017382:	f001 f92b 	bl	80185dc <xTaskGetSchedulerState>
 8017386:	4606      	mov	r6, r0
 8017388:	b958      	cbnz	r0, 80173a2 <xQueueGenericSend+0x76>
 801738a:	9b01      	ldr	r3, [sp, #4]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d048      	beq.n	8017422 <xQueueGenericSend+0xf6>
 8017390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017394:	f383 8811 	msr	BASEPRI, r3
 8017398:	f3bf 8f6f 	isb	sy
 801739c:	f3bf 8f4f 	dsb	sy
 80173a0:	e7fe      	b.n	80173a0 <xQueueGenericSend+0x74>
 80173a2:	2600      	movs	r6, #0
 80173a4:	e03d      	b.n	8017422 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80173a6:	462a      	mov	r2, r5
 80173a8:	4639      	mov	r1, r7
 80173aa:	4620      	mov	r0, r4
 80173ac:	f7ff fe79 	bl	80170a2 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80173b0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80173b2:	b97b      	cbnz	r3, 80173d4 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 80173b4:	b148      	cbz	r0, 80173ca <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80173b6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80173ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80173be:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80173c2:	f3bf 8f4f 	dsb	sy
 80173c6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80173ca:	f001 fcbd 	bl	8018d48 <vPortExitCritical>
				return pdPASS;
 80173ce:	2001      	movs	r0, #1
}
 80173d0:	b005      	add	sp, #20
 80173d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80173d4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80173d8:	f001 f860 	bl	801849c <xTaskRemoveFromEventList>
 80173dc:	2800      	cmp	r0, #0
 80173de:	d0f4      	beq.n	80173ca <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 80173e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80173e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80173e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80173ec:	f3bf 8f4f 	dsb	sy
 80173f0:	f3bf 8f6f 	isb	sy
 80173f4:	e7e9      	b.n	80173ca <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 80173f6:	f001 fca7 	bl	8018d48 <vPortExitCritical>
					return errQUEUE_FULL;
 80173fa:	2000      	movs	r0, #0
 80173fc:	e7e8      	b.n	80173d0 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80173fe:	a802      	add	r0, sp, #8
 8017400:	f001 f892 	bl	8018528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017404:	2601      	movs	r6, #1
 8017406:	e019      	b.n	801743c <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8017408:	2300      	movs	r3, #0
 801740a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801740e:	e021      	b.n	8017454 <xQueueGenericSend+0x128>
 8017410:	2300      	movs	r3, #0
 8017412:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8017416:	e023      	b.n	8017460 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8017418:	4620      	mov	r0, r4
 801741a:	f7ff fe8f 	bl	801713c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801741e:	f000 ff15 	bl	801824c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8017422:	f001 fc6f 	bl	8018d04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017426:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8017428:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801742a:	429a      	cmp	r2, r3
 801742c:	d3bb      	bcc.n	80173a6 <xQueueGenericSend+0x7a>
 801742e:	2d02      	cmp	r5, #2
 8017430:	d0b9      	beq.n	80173a6 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8017432:	9b01      	ldr	r3, [sp, #4]
 8017434:	2b00      	cmp	r3, #0
 8017436:	d0de      	beq.n	80173f6 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8017438:	2e00      	cmp	r6, #0
 801743a:	d0e0      	beq.n	80173fe <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 801743c:	f001 fc84 	bl	8018d48 <vPortExitCritical>
		vTaskSuspendAll();
 8017440:	f000 fe6a 	bl	8018118 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017444:	f001 fc5e 	bl	8018d04 <vPortEnterCritical>
 8017448:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 801744c:	b252      	sxtb	r2, r2
 801744e:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8017452:	d0d9      	beq.n	8017408 <xQueueGenericSend+0xdc>
 8017454:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8017458:	b252      	sxtb	r2, r2
 801745a:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801745e:	d0d7      	beq.n	8017410 <xQueueGenericSend+0xe4>
 8017460:	f001 fc72 	bl	8018d48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017464:	a901      	add	r1, sp, #4
 8017466:	a802      	add	r0, sp, #8
 8017468:	f001 f86a 	bl	8018540 <xTaskCheckForTimeOut>
 801746c:	b9d8      	cbnz	r0, 80174a6 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801746e:	4620      	mov	r0, r4
 8017470:	f7ff fdfb 	bl	801706a <prvIsQueueFull>
 8017474:	2800      	cmp	r0, #0
 8017476:	d0cf      	beq.n	8017418 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017478:	9901      	ldr	r1, [sp, #4]
 801747a:	f104 0010 	add.w	r0, r4, #16
 801747e:	f000 ffd9 	bl	8018434 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017482:	4620      	mov	r0, r4
 8017484:	f7ff fe5a 	bl	801713c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017488:	f000 fee0 	bl	801824c <xTaskResumeAll>
 801748c:	2800      	cmp	r0, #0
 801748e:	d1c8      	bne.n	8017422 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8017490:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017494:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017498:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801749c:	f3bf 8f4f 	dsb	sy
 80174a0:	f3bf 8f6f 	isb	sy
 80174a4:	e7bd      	b.n	8017422 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 80174a6:	4620      	mov	r0, r4
 80174a8:	f7ff fe48 	bl	801713c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80174ac:	f000 fece 	bl	801824c <xTaskResumeAll>
			return errQUEUE_FULL;
 80174b0:	2000      	movs	r0, #0
 80174b2:	e78d      	b.n	80173d0 <xQueueGenericSend+0xa4>

080174b4 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80174b4:	b148      	cbz	r0, 80174ca <prvInitialiseMutex+0x16>
	{
 80174b6:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80174b8:	2100      	movs	r1, #0
 80174ba:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80174bc:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80174be:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80174c0:	460b      	mov	r3, r1
 80174c2:	460a      	mov	r2, r1
 80174c4:	f7ff ff32 	bl	801732c <xQueueGenericSend>
	}
 80174c8:	bd08      	pop	{r3, pc}
 80174ca:	4770      	bx	lr

080174cc <xQueueCreateMutex>:
	{
 80174cc:	b510      	push	{r4, lr}
 80174ce:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80174d0:	2100      	movs	r1, #0
 80174d2:	2001      	movs	r0, #1
 80174d4:	f7ff ff06 	bl	80172e4 <xQueueGenericCreate>
 80174d8:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80174da:	f7ff ffeb 	bl	80174b4 <prvInitialiseMutex>
	}
 80174de:	4620      	mov	r0, r4
 80174e0:	bd10      	pop	{r4, pc}

080174e2 <xQueueCreateMutexStatic>:
	{
 80174e2:	b510      	push	{r4, lr}
 80174e4:	b082      	sub	sp, #8
 80174e6:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80174e8:	9000      	str	r0, [sp, #0]
 80174ea:	2200      	movs	r2, #0
 80174ec:	4611      	mov	r1, r2
 80174ee:	2001      	movs	r0, #1
 80174f0:	f7ff feae 	bl	8017250 <xQueueGenericCreateStatic>
 80174f4:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80174f6:	f7ff ffdd 	bl	80174b4 <prvInitialiseMutex>
	}
 80174fa:	4620      	mov	r0, r4
 80174fc:	b002      	add	sp, #8
 80174fe:	bd10      	pop	{r4, pc}

08017500 <xQueueGiveMutexRecursive>:
	{
 8017500:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8017502:	b138      	cbz	r0, 8017514 <xQueueGiveMutexRecursive+0x14>
 8017504:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8017506:	6885      	ldr	r5, [r0, #8]
 8017508:	f001 f862 	bl	80185d0 <xTaskGetCurrentTaskHandle>
 801750c:	4285      	cmp	r5, r0
 801750e:	d00a      	beq.n	8017526 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8017510:	2000      	movs	r0, #0
	}
 8017512:	bd38      	pop	{r3, r4, r5, pc}
 8017514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017518:	f383 8811 	msr	BASEPRI, r3
 801751c:	f3bf 8f6f 	isb	sy
 8017520:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8017524:	e7fe      	b.n	8017524 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8017526:	68e3      	ldr	r3, [r4, #12]
 8017528:	3b01      	subs	r3, #1
 801752a:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 801752c:	b10b      	cbz	r3, 8017532 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 801752e:	2001      	movs	r0, #1
		return xReturn;
 8017530:	e7ef      	b.n	8017512 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8017532:	461a      	mov	r2, r3
 8017534:	4619      	mov	r1, r3
 8017536:	4620      	mov	r0, r4
 8017538:	f7ff fef8 	bl	801732c <xQueueGenericSend>
			xReturn = pdPASS;
 801753c:	2001      	movs	r0, #1
 801753e:	e7e8      	b.n	8017512 <xQueueGiveMutexRecursive+0x12>

08017540 <xQueueGenericSendFromISR>:
{
 8017540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8017544:	b190      	cbz	r0, 801756c <xQueueGenericSendFromISR+0x2c>
 8017546:	460f      	mov	r7, r1
 8017548:	4616      	mov	r6, r2
 801754a:	461c      	mov	r4, r3
 801754c:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801754e:	b1b1      	cbz	r1, 801757e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017550:	2c02      	cmp	r4, #2
 8017552:	d120      	bne.n	8017596 <xQueueGenericSendFromISR+0x56>
 8017554:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8017556:	2b01      	cmp	r3, #1
 8017558:	d01d      	beq.n	8017596 <xQueueGenericSendFromISR+0x56>
 801755a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801755e:	f383 8811 	msr	BASEPRI, r3
 8017562:	f3bf 8f6f 	isb	sy
 8017566:	f3bf 8f4f 	dsb	sy
 801756a:	e7fe      	b.n	801756a <xQueueGenericSendFromISR+0x2a>
 801756c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017570:	f383 8811 	msr	BASEPRI, r3
 8017574:	f3bf 8f6f 	isb	sy
 8017578:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801757c:	e7fe      	b.n	801757c <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801757e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8017580:	2b00      	cmp	r3, #0
 8017582:	d0e5      	beq.n	8017550 <xQueueGenericSendFromISR+0x10>
 8017584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017588:	f383 8811 	msr	BASEPRI, r3
 801758c:	f3bf 8f6f 	isb	sy
 8017590:	f3bf 8f4f 	dsb	sy
 8017594:	e7fe      	b.n	8017594 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017596:	f001 fcdb 	bl	8018f50 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801759a:	f3ef 8811 	mrs	r8, BASEPRI
 801759e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175a2:	f383 8811 	msr	BASEPRI, r3
 80175a6:	f3bf 8f6f 	isb	sy
 80175aa:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80175ae:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 80175b0:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80175b2:	429a      	cmp	r2, r3
 80175b4:	d306      	bcc.n	80175c4 <xQueueGenericSendFromISR+0x84>
 80175b6:	2c02      	cmp	r4, #2
 80175b8:	d004      	beq.n	80175c4 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80175ba:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80175bc:	f388 8811 	msr	BASEPRI, r8
}
 80175c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80175c4:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 80175c8:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80175cc:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80175ce:	4622      	mov	r2, r4
 80175d0:	4639      	mov	r1, r7
 80175d2:	4628      	mov	r0, r5
 80175d4:	f7ff fd65 	bl	80170a2 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80175d8:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 80175dc:	d006      	beq.n	80175ec <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80175de:	f109 0301 	add.w	r3, r9, #1
 80175e2:	b25b      	sxtb	r3, r3
 80175e4:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 80175e8:	2001      	movs	r0, #1
 80175ea:	e7e7      	b.n	80175bc <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80175ec:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80175ee:	b90b      	cbnz	r3, 80175f4 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 80175f0:	2001      	movs	r0, #1
 80175f2:	e7e3      	b.n	80175bc <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80175f4:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80175f8:	f000 ff50 	bl	801849c <xTaskRemoveFromEventList>
 80175fc:	b118      	cbz	r0, 8017606 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 80175fe:	b126      	cbz	r6, 801760a <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017600:	2001      	movs	r0, #1
 8017602:	6030      	str	r0, [r6, #0]
 8017604:	e7da      	b.n	80175bc <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8017606:	2001      	movs	r0, #1
 8017608:	e7d8      	b.n	80175bc <xQueueGenericSendFromISR+0x7c>
 801760a:	2001      	movs	r0, #1
 801760c:	e7d6      	b.n	80175bc <xQueueGenericSendFromISR+0x7c>

0801760e <xQueueReceive>:
{
 801760e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017610:	b085      	sub	sp, #20
 8017612:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8017614:	b190      	cbz	r0, 801763c <xQueueReceive+0x2e>
 8017616:	460f      	mov	r7, r1
 8017618:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801761a:	b1c1      	cbz	r1, 801764e <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801761c:	f000 ffde 	bl	80185dc <xTaskGetSchedulerState>
 8017620:	4606      	mov	r6, r0
 8017622:	bb00      	cbnz	r0, 8017666 <xQueueReceive+0x58>
 8017624:	9b01      	ldr	r3, [sp, #4]
 8017626:	2b00      	cmp	r3, #0
 8017628:	d05e      	beq.n	80176e8 <xQueueReceive+0xda>
	__asm volatile
 801762a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801762e:	f383 8811 	msr	BASEPRI, r3
 8017632:	f3bf 8f6f 	isb	sy
 8017636:	f3bf 8f4f 	dsb	sy
 801763a:	e7fe      	b.n	801763a <xQueueReceive+0x2c>
 801763c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017640:	f383 8811 	msr	BASEPRI, r3
 8017644:	f3bf 8f6f 	isb	sy
 8017648:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 801764c:	e7fe      	b.n	801764c <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801764e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8017650:	2b00      	cmp	r3, #0
 8017652:	d0e3      	beq.n	801761c <xQueueReceive+0xe>
 8017654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017658:	f383 8811 	msr	BASEPRI, r3
 801765c:	f3bf 8f6f 	isb	sy
 8017660:	f3bf 8f4f 	dsb	sy
 8017664:	e7fe      	b.n	8017664 <xQueueReceive+0x56>
 8017666:	2600      	movs	r6, #0
 8017668:	e03e      	b.n	80176e8 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801766a:	4639      	mov	r1, r7
 801766c:	4620      	mov	r0, r4
 801766e:	f7ff fd53 	bl	8017118 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017672:	3d01      	subs	r5, #1
 8017674:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017676:	6923      	ldr	r3, [r4, #16]
 8017678:	b923      	cbnz	r3, 8017684 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 801767a:	f001 fb65 	bl	8018d48 <vPortExitCritical>
				return pdPASS;
 801767e:	2001      	movs	r0, #1
}
 8017680:	b005      	add	sp, #20
 8017682:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017684:	f104 0010 	add.w	r0, r4, #16
 8017688:	f000 ff08 	bl	801849c <xTaskRemoveFromEventList>
 801768c:	2800      	cmp	r0, #0
 801768e:	d0f4      	beq.n	801767a <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8017690:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017698:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801769c:	f3bf 8f4f 	dsb	sy
 80176a0:	f3bf 8f6f 	isb	sy
 80176a4:	e7e9      	b.n	801767a <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80176a6:	f001 fb4f 	bl	8018d48 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80176aa:	2000      	movs	r0, #0
 80176ac:	e7e8      	b.n	8017680 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80176ae:	a802      	add	r0, sp, #8
 80176b0:	f000 ff3a 	bl	8018528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80176b4:	2601      	movs	r6, #1
 80176b6:	e021      	b.n	80176fc <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 80176b8:	2300      	movs	r3, #0
 80176ba:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80176be:	e029      	b.n	8017714 <xQueueReceive+0x106>
 80176c0:	2300      	movs	r3, #0
 80176c2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80176c6:	e02b      	b.n	8017720 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 80176c8:	4620      	mov	r0, r4
 80176ca:	f7ff fd37 	bl	801713c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80176ce:	f000 fdbd 	bl	801824c <xTaskResumeAll>
 80176d2:	e009      	b.n	80176e8 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 80176d4:	4620      	mov	r0, r4
 80176d6:	f7ff fd31 	bl	801713c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80176da:	f000 fdb7 	bl	801824c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80176de:	4620      	mov	r0, r4
 80176e0:	f7ff fcd2 	bl	8017088 <prvIsQueueEmpty>
 80176e4:	2800      	cmp	r0, #0
 80176e6:	d13f      	bne.n	8017768 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 80176e8:	f001 fb0c 	bl	8018d04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80176ec:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80176ee:	2d00      	cmp	r5, #0
 80176f0:	d1bb      	bne.n	801766a <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80176f2:	9b01      	ldr	r3, [sp, #4]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d0d6      	beq.n	80176a6 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 80176f8:	2e00      	cmp	r6, #0
 80176fa:	d0d8      	beq.n	80176ae <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 80176fc:	f001 fb24 	bl	8018d48 <vPortExitCritical>
		vTaskSuspendAll();
 8017700:	f000 fd0a 	bl	8018118 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017704:	f001 fafe 	bl	8018d04 <vPortEnterCritical>
 8017708:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801770c:	b25b      	sxtb	r3, r3
 801770e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017712:	d0d1      	beq.n	80176b8 <xQueueReceive+0xaa>
 8017714:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8017718:	b25b      	sxtb	r3, r3
 801771a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801771e:	d0cf      	beq.n	80176c0 <xQueueReceive+0xb2>
 8017720:	f001 fb12 	bl	8018d48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017724:	a901      	add	r1, sp, #4
 8017726:	a802      	add	r0, sp, #8
 8017728:	f000 ff0a 	bl	8018540 <xTaskCheckForTimeOut>
 801772c:	2800      	cmp	r0, #0
 801772e:	d1d1      	bne.n	80176d4 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017730:	4620      	mov	r0, r4
 8017732:	f7ff fca9 	bl	8017088 <prvIsQueueEmpty>
 8017736:	2800      	cmp	r0, #0
 8017738:	d0c6      	beq.n	80176c8 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801773a:	9901      	ldr	r1, [sp, #4]
 801773c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8017740:	f000 fe78 	bl	8018434 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017744:	4620      	mov	r0, r4
 8017746:	f7ff fcf9 	bl	801713c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801774a:	f000 fd7f 	bl	801824c <xTaskResumeAll>
 801774e:	2800      	cmp	r0, #0
 8017750:	d1ca      	bne.n	80176e8 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8017752:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801775a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801775e:	f3bf 8f4f 	dsb	sy
 8017762:	f3bf 8f6f 	isb	sy
 8017766:	e7bf      	b.n	80176e8 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8017768:	2000      	movs	r0, #0
 801776a:	e789      	b.n	8017680 <xQueueReceive+0x72>

0801776c <xQueueSemaphoreTake>:
{
 801776c:	b570      	push	{r4, r5, r6, lr}
 801776e:	b084      	sub	sp, #16
 8017770:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8017772:	b158      	cbz	r0, 801778c <xQueueSemaphoreTake+0x20>
 8017774:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8017776:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8017778:	b18b      	cbz	r3, 801779e <xQueueSemaphoreTake+0x32>
 801777a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801777e:	f383 8811 	msr	BASEPRI, r3
 8017782:	f3bf 8f6f 	isb	sy
 8017786:	f3bf 8f4f 	dsb	sy
 801778a:	e7fe      	b.n	801778a <xQueueSemaphoreTake+0x1e>
 801778c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017790:	f383 8811 	msr	BASEPRI, r3
 8017794:	f3bf 8f6f 	isb	sy
 8017798:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 801779c:	e7fe      	b.n	801779c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801779e:	f000 ff1d 	bl	80185dc <xTaskGetSchedulerState>
 80177a2:	4605      	mov	r5, r0
 80177a4:	b950      	cbnz	r0, 80177bc <xQueueSemaphoreTake+0x50>
 80177a6:	9b01      	ldr	r3, [sp, #4]
 80177a8:	b15b      	cbz	r3, 80177c2 <xQueueSemaphoreTake+0x56>
 80177aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80177ae:	f383 8811 	msr	BASEPRI, r3
 80177b2:	f3bf 8f6f 	isb	sy
 80177b6:	f3bf 8f4f 	dsb	sy
 80177ba:	e7fe      	b.n	80177ba <xQueueSemaphoreTake+0x4e>
 80177bc:	2600      	movs	r6, #0
 80177be:	4635      	mov	r5, r6
 80177c0:	e055      	b.n	801786e <xQueueSemaphoreTake+0x102>
 80177c2:	4606      	mov	r6, r0
 80177c4:	e053      	b.n	801786e <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80177c6:	3b01      	subs	r3, #1
 80177c8:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80177ca:	6823      	ldr	r3, [r4, #0]
 80177cc:	b13b      	cbz	r3, 80177de <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80177ce:	6923      	ldr	r3, [r4, #16]
 80177d0:	b94b      	cbnz	r3, 80177e6 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 80177d2:	f001 fab9 	bl	8018d48 <vPortExitCritical>
				return pdPASS;
 80177d6:	2601      	movs	r6, #1
}
 80177d8:	4630      	mov	r0, r6
 80177da:	b004      	add	sp, #16
 80177dc:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80177de:	f000 fff1 	bl	80187c4 <pvTaskIncrementMutexHeldCount>
 80177e2:	60a0      	str	r0, [r4, #8]
 80177e4:	e7f3      	b.n	80177ce <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80177e6:	f104 0010 	add.w	r0, r4, #16
 80177ea:	f000 fe57 	bl	801849c <xTaskRemoveFromEventList>
 80177ee:	2800      	cmp	r0, #0
 80177f0:	d0ef      	beq.n	80177d2 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 80177f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80177f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80177fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80177fe:	f3bf 8f4f 	dsb	sy
 8017802:	f3bf 8f6f 	isb	sy
 8017806:	e7e4      	b.n	80177d2 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8017808:	b146      	cbz	r6, 801781c <xQueueSemaphoreTake+0xb0>
 801780a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801780e:	f383 8811 	msr	BASEPRI, r3
 8017812:	f3bf 8f6f 	isb	sy
 8017816:	f3bf 8f4f 	dsb	sy
 801781a:	e7fe      	b.n	801781a <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 801781c:	f001 fa94 	bl	8018d48 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8017820:	e7da      	b.n	80177d8 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017822:	a802      	add	r0, sp, #8
 8017824:	f000 fe80 	bl	8018528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017828:	2501      	movs	r5, #1
 801782a:	e02a      	b.n	8017882 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 801782c:	2300      	movs	r3, #0
 801782e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8017832:	e032      	b.n	801789a <xQueueSemaphoreTake+0x12e>
 8017834:	2300      	movs	r3, #0
 8017836:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801783a:	e034      	b.n	80178a6 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 801783c:	f001 fa62 	bl	8018d04 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017840:	68a0      	ldr	r0, [r4, #8]
 8017842:	f000 fedb 	bl	80185fc <xTaskPriorityInherit>
 8017846:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8017848:	f001 fa7e 	bl	8018d48 <vPortExitCritical>
 801784c:	e03b      	b.n	80178c6 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 801784e:	4620      	mov	r0, r4
 8017850:	f7ff fc74 	bl	801713c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017854:	f000 fcfa 	bl	801824c <xTaskResumeAll>
 8017858:	e009      	b.n	801786e <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 801785a:	4620      	mov	r0, r4
 801785c:	f7ff fc6e 	bl	801713c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017860:	f000 fcf4 	bl	801824c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017864:	4620      	mov	r0, r4
 8017866:	f7ff fc0f 	bl	8017088 <prvIsQueueEmpty>
 801786a:	2800      	cmp	r0, #0
 801786c:	d142      	bne.n	80178f4 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 801786e:	f001 fa49 	bl	8018d04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8017872:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8017874:	2b00      	cmp	r3, #0
 8017876:	d1a6      	bne.n	80177c6 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8017878:	9b01      	ldr	r3, [sp, #4]
 801787a:	2b00      	cmp	r3, #0
 801787c:	d0c4      	beq.n	8017808 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 801787e:	2d00      	cmp	r5, #0
 8017880:	d0cf      	beq.n	8017822 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 8017882:	f001 fa61 	bl	8018d48 <vPortExitCritical>
		vTaskSuspendAll();
 8017886:	f000 fc47 	bl	8018118 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801788a:	f001 fa3b 	bl	8018d04 <vPortEnterCritical>
 801788e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017892:	b25b      	sxtb	r3, r3
 8017894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017898:	d0c8      	beq.n	801782c <xQueueSemaphoreTake+0xc0>
 801789a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801789e:	b25b      	sxtb	r3, r3
 80178a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80178a4:	d0c6      	beq.n	8017834 <xQueueSemaphoreTake+0xc8>
 80178a6:	f001 fa4f 	bl	8018d48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80178aa:	a901      	add	r1, sp, #4
 80178ac:	a802      	add	r0, sp, #8
 80178ae:	f000 fe47 	bl	8018540 <xTaskCheckForTimeOut>
 80178b2:	2800      	cmp	r0, #0
 80178b4:	d1d1      	bne.n	801785a <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80178b6:	4620      	mov	r0, r4
 80178b8:	f7ff fbe6 	bl	8017088 <prvIsQueueEmpty>
 80178bc:	2800      	cmp	r0, #0
 80178be:	d0c6      	beq.n	801784e <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80178c0:	6823      	ldr	r3, [r4, #0]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d0ba      	beq.n	801783c <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80178c6:	9901      	ldr	r1, [sp, #4]
 80178c8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80178cc:	f000 fdb2 	bl	8018434 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80178d0:	4620      	mov	r0, r4
 80178d2:	f7ff fc33 	bl	801713c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80178d6:	f000 fcb9 	bl	801824c <xTaskResumeAll>
 80178da:	2800      	cmp	r0, #0
 80178dc:	d1c7      	bne.n	801786e <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 80178de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80178e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80178e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80178ea:	f3bf 8f4f 	dsb	sy
 80178ee:	f3bf 8f6f 	isb	sy
 80178f2:	e7bc      	b.n	801786e <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 80178f4:	b90e      	cbnz	r6, 80178fa <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 80178f6:	2600      	movs	r6, #0
 80178f8:	e76e      	b.n	80177d8 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 80178fa:	f001 fa03 	bl	8018d04 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80178fe:	4620      	mov	r0, r4
 8017900:	f7ff fbab 	bl	801705a <prvGetDisinheritPriorityAfterTimeout>
 8017904:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017906:	68a0      	ldr	r0, [r4, #8]
 8017908:	f000 ff0c 	bl	8018724 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 801790c:	f001 fa1c 	bl	8018d48 <vPortExitCritical>
 8017910:	e7f1      	b.n	80178f6 <xQueueSemaphoreTake+0x18a>

08017912 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8017912:	b180      	cbz	r0, 8017936 <xQueueTakeMutexRecursive+0x24>
	{
 8017914:	b570      	push	{r4, r5, r6, lr}
 8017916:	460c      	mov	r4, r1
 8017918:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801791a:	6886      	ldr	r6, [r0, #8]
 801791c:	f000 fe58 	bl	80185d0 <xTaskGetCurrentTaskHandle>
 8017920:	4286      	cmp	r6, r0
 8017922:	d011      	beq.n	8017948 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8017924:	4621      	mov	r1, r4
 8017926:	4628      	mov	r0, r5
 8017928:	f7ff ff20 	bl	801776c <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 801792c:	b180      	cbz	r0, 8017950 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801792e:	68eb      	ldr	r3, [r5, #12]
 8017930:	3301      	adds	r3, #1
 8017932:	60eb      	str	r3, [r5, #12]
		return xReturn;
 8017934:	e00c      	b.n	8017950 <xQueueTakeMutexRecursive+0x3e>
 8017936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801793a:	f383 8811 	msr	BASEPRI, r3
 801793e:	f3bf 8f6f 	isb	sy
 8017942:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8017946:	e7fe      	b.n	8017946 <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8017948:	68eb      	ldr	r3, [r5, #12]
 801794a:	3301      	adds	r3, #1
 801794c:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 801794e:	2001      	movs	r0, #1
	}
 8017950:	bd70      	pop	{r4, r5, r6, pc}

08017952 <xQueuePeek>:
{
 8017952:	b570      	push	{r4, r5, r6, lr}
 8017954:	b084      	sub	sp, #16
 8017956:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8017958:	b190      	cbz	r0, 8017980 <xQueuePeek+0x2e>
 801795a:	460e      	mov	r6, r1
 801795c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801795e:	b1c1      	cbz	r1, 8017992 <xQueuePeek+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017960:	f000 fe3c 	bl	80185dc <xTaskGetSchedulerState>
 8017964:	4605      	mov	r5, r0
 8017966:	bb00      	cbnz	r0, 80179aa <xQueuePeek+0x58>
 8017968:	9b01      	ldr	r3, [sp, #4]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d05e      	beq.n	8017a2c <xQueuePeek+0xda>
 801796e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017972:	f383 8811 	msr	BASEPRI, r3
 8017976:	f3bf 8f6f 	isb	sy
 801797a:	f3bf 8f4f 	dsb	sy
 801797e:	e7fe      	b.n	801797e <xQueuePeek+0x2c>
 8017980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017984:	f383 8811 	msr	BASEPRI, r3
 8017988:	f3bf 8f6f 	isb	sy
 801798c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8017990:	e7fe      	b.n	8017990 <xQueuePeek+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017992:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8017994:	2b00      	cmp	r3, #0
 8017996:	d0e3      	beq.n	8017960 <xQueuePeek+0xe>
 8017998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801799c:	f383 8811 	msr	BASEPRI, r3
 80179a0:	f3bf 8f6f 	isb	sy
 80179a4:	f3bf 8f4f 	dsb	sy
 80179a8:	e7fe      	b.n	80179a8 <xQueuePeek+0x56>
 80179aa:	2500      	movs	r5, #0
 80179ac:	e03e      	b.n	8017a2c <xQueuePeek+0xda>
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80179ae:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80179b0:	4631      	mov	r1, r6
 80179b2:	4620      	mov	r0, r4
 80179b4:	f7ff fbb0 	bl	8017118 <prvCopyDataFromQueue>
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80179b8:	60e5      	str	r5, [r4, #12]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80179ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80179bc:	b923      	cbnz	r3, 80179c8 <xQueuePeek+0x76>
				taskEXIT_CRITICAL();
 80179be:	f001 f9c3 	bl	8018d48 <vPortExitCritical>
				return pdPASS;
 80179c2:	2001      	movs	r0, #1
}
 80179c4:	b004      	add	sp, #16
 80179c6:	bd70      	pop	{r4, r5, r6, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80179c8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80179cc:	f000 fd66 	bl	801849c <xTaskRemoveFromEventList>
 80179d0:	2800      	cmp	r0, #0
 80179d2:	d0f4      	beq.n	80179be <xQueuePeek+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80179d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80179d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80179dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80179e0:	f3bf 8f4f 	dsb	sy
 80179e4:	f3bf 8f6f 	isb	sy
 80179e8:	e7e9      	b.n	80179be <xQueuePeek+0x6c>
					taskEXIT_CRITICAL();
 80179ea:	f001 f9ad 	bl	8018d48 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80179ee:	2000      	movs	r0, #0
 80179f0:	e7e8      	b.n	80179c4 <xQueuePeek+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80179f2:	a802      	add	r0, sp, #8
 80179f4:	f000 fd98 	bl	8018528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80179f8:	2501      	movs	r5, #1
 80179fa:	e021      	b.n	8017a40 <xQueuePeek+0xee>
		prvLockQueue( pxQueue );
 80179fc:	2300      	movs	r3, #0
 80179fe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8017a02:	e029      	b.n	8017a58 <xQueuePeek+0x106>
 8017a04:	2300      	movs	r3, #0
 8017a06:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8017a0a:	e02b      	b.n	8017a64 <xQueuePeek+0x112>
				prvUnlockQueue( pxQueue );
 8017a0c:	4620      	mov	r0, r4
 8017a0e:	f7ff fb95 	bl	801713c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017a12:	f000 fc1b 	bl	801824c <xTaskResumeAll>
 8017a16:	e009      	b.n	8017a2c <xQueuePeek+0xda>
			prvUnlockQueue( pxQueue );
 8017a18:	4620      	mov	r0, r4
 8017a1a:	f7ff fb8f 	bl	801713c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017a1e:	f000 fc15 	bl	801824c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017a22:	4620      	mov	r0, r4
 8017a24:	f7ff fb30 	bl	8017088 <prvIsQueueEmpty>
 8017a28:	2800      	cmp	r0, #0
 8017a2a:	d13f      	bne.n	8017aac <xQueuePeek+0x15a>
		taskENTER_CRITICAL();
 8017a2c:	f001 f96a 	bl	8018d04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017a30:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d1bb      	bne.n	80179ae <xQueuePeek+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8017a36:	9b01      	ldr	r3, [sp, #4]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d0d6      	beq.n	80179ea <xQueuePeek+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8017a3c:	2d00      	cmp	r5, #0
 8017a3e:	d0d8      	beq.n	80179f2 <xQueuePeek+0xa0>
		taskEXIT_CRITICAL();
 8017a40:	f001 f982 	bl	8018d48 <vPortExitCritical>
		vTaskSuspendAll();
 8017a44:	f000 fb68 	bl	8018118 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017a48:	f001 f95c 	bl	8018d04 <vPortEnterCritical>
 8017a4c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017a50:	b25b      	sxtb	r3, r3
 8017a52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017a56:	d0d1      	beq.n	80179fc <xQueuePeek+0xaa>
 8017a58:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8017a5c:	b25b      	sxtb	r3, r3
 8017a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017a62:	d0cf      	beq.n	8017a04 <xQueuePeek+0xb2>
 8017a64:	f001 f970 	bl	8018d48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017a68:	a901      	add	r1, sp, #4
 8017a6a:	a802      	add	r0, sp, #8
 8017a6c:	f000 fd68 	bl	8018540 <xTaskCheckForTimeOut>
 8017a70:	2800      	cmp	r0, #0
 8017a72:	d1d1      	bne.n	8017a18 <xQueuePeek+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017a74:	4620      	mov	r0, r4
 8017a76:	f7ff fb07 	bl	8017088 <prvIsQueueEmpty>
 8017a7a:	2800      	cmp	r0, #0
 8017a7c:	d0c6      	beq.n	8017a0c <xQueuePeek+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017a7e:	9901      	ldr	r1, [sp, #4]
 8017a80:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8017a84:	f000 fcd6 	bl	8018434 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017a88:	4620      	mov	r0, r4
 8017a8a:	f7ff fb57 	bl	801713c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017a8e:	f000 fbdd 	bl	801824c <xTaskResumeAll>
 8017a92:	2800      	cmp	r0, #0
 8017a94:	d1ca      	bne.n	8017a2c <xQueuePeek+0xda>
					portYIELD_WITHIN_API();
 8017a96:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017a9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017a9e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8017aa2:	f3bf 8f4f 	dsb	sy
 8017aa6:	f3bf 8f6f 	isb	sy
 8017aaa:	e7bf      	b.n	8017a2c <xQueuePeek+0xda>
				return errQUEUE_EMPTY;
 8017aac:	2000      	movs	r0, #0
 8017aae:	e789      	b.n	80179c4 <xQueuePeek+0x72>

08017ab0 <xQueueReceiveFromISR>:
{
 8017ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8017ab4:	b1b0      	cbz	r0, 8017ae4 <xQueueReceiveFromISR+0x34>
 8017ab6:	460d      	mov	r5, r1
 8017ab8:	4690      	mov	r8, r2
 8017aba:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017abc:	b1d9      	cbz	r1, 8017af6 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017abe:	f001 fa47 	bl	8018f50 <vPortValidateInterruptPriority>
	__asm volatile
 8017ac2:	f3ef 8711 	mrs	r7, BASEPRI
 8017ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017aca:	f383 8811 	msr	BASEPRI, r3
 8017ace:	f3bf 8f6f 	isb	sy
 8017ad2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017ad6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017ad8:	b9ce      	cbnz	r6, 8017b0e <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8017ada:	2000      	movs	r0, #0
	__asm volatile
 8017adc:	f387 8811 	msr	BASEPRI, r7
}
 8017ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8017ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017ae8:	f383 8811 	msr	BASEPRI, r3
 8017aec:	f3bf 8f6f 	isb	sy
 8017af0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8017af4:	e7fe      	b.n	8017af4 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017af6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d0e0      	beq.n	8017abe <xQueueReceiveFromISR+0xe>
 8017afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b00:	f383 8811 	msr	BASEPRI, r3
 8017b04:	f3bf 8f6f 	isb	sy
 8017b08:	f3bf 8f4f 	dsb	sy
 8017b0c:	e7fe      	b.n	8017b0c <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8017b0e:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 8017b12:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017b16:	4629      	mov	r1, r5
 8017b18:	4620      	mov	r0, r4
 8017b1a:	f7ff fafd 	bl	8017118 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017b1e:	1e73      	subs	r3, r6, #1
 8017b20:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8017b22:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8017b26:	d006      	beq.n	8017b36 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017b28:	f109 0301 	add.w	r3, r9, #1
 8017b2c:	b25b      	sxtb	r3, r3
 8017b2e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8017b32:	2001      	movs	r0, #1
 8017b34:	e7d2      	b.n	8017adc <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017b36:	6923      	ldr	r3, [r4, #16]
 8017b38:	b90b      	cbnz	r3, 8017b3e <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8017b3a:	2001      	movs	r0, #1
 8017b3c:	e7ce      	b.n	8017adc <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017b3e:	f104 0010 	add.w	r0, r4, #16
 8017b42:	f000 fcab 	bl	801849c <xTaskRemoveFromEventList>
 8017b46:	b130      	cbz	r0, 8017b56 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 8017b48:	f1b8 0f00 	cmp.w	r8, #0
 8017b4c:	d005      	beq.n	8017b5a <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017b4e:	2001      	movs	r0, #1
 8017b50:	f8c8 0000 	str.w	r0, [r8]
 8017b54:	e7c2      	b.n	8017adc <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8017b56:	2001      	movs	r0, #1
 8017b58:	e7c0      	b.n	8017adc <xQueueReceiveFromISR+0x2c>
 8017b5a:	2001      	movs	r0, #1
 8017b5c:	e7be      	b.n	8017adc <xQueueReceiveFromISR+0x2c>

08017b5e <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8017b5e:	b140      	cbz	r0, 8017b72 <uxQueueMessagesWaiting+0x14>
{
 8017b60:	b510      	push	{r4, lr}
 8017b62:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8017b64:	f001 f8ce 	bl	8018d04 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8017b68:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8017b6a:	f001 f8ed 	bl	8018d48 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8017b6e:	4620      	mov	r0, r4
 8017b70:	bd10      	pop	{r4, pc}
 8017b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b76:	f383 8811 	msr	BASEPRI, r3
 8017b7a:	f3bf 8f6f 	isb	sy
 8017b7e:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 8017b82:	e7fe      	b.n	8017b82 <uxQueueMessagesWaiting+0x24>

08017b84 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8017b84:	b108      	cbz	r0, 8017b8a <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 8017b86:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8017b88:	4770      	bx	lr
 8017b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b8e:	f383 8811 	msr	BASEPRI, r3
 8017b92:	f3bf 8f6f 	isb	sy
 8017b96:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8017b9a:	e7fe      	b.n	8017b9a <uxQueueMessagesWaitingFromISR+0x16>

08017b9c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	2b07      	cmp	r3, #7
 8017ba0:	d80c      	bhi.n	8017bbc <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017ba2:	4a07      	ldr	r2, [pc, #28]	@ (8017bc0 <vQueueAddToRegistry+0x24>)
 8017ba4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8017ba8:	b10a      	cbz	r2, 8017bae <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017baa:	3301      	adds	r3, #1
 8017bac:	e7f7      	b.n	8017b9e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017bae:	4a04      	ldr	r2, [pc, #16]	@ (8017bc0 <vQueueAddToRegistry+0x24>)
 8017bb0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017bb4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017bb8:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017bba:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017bbc:	4770      	bx	lr
 8017bbe:	bf00      	nop
 8017bc0:	200017ac 	.word	0x200017ac

08017bc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017bc4:	b570      	push	{r4, r5, r6, lr}
 8017bc6:	4604      	mov	r4, r0
 8017bc8:	460d      	mov	r5, r1
 8017bca:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017bcc:	f001 f89a 	bl	8018d04 <vPortEnterCritical>
 8017bd0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017bd4:	b25b      	sxtb	r3, r3
 8017bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017bda:	d00d      	beq.n	8017bf8 <vQueueWaitForMessageRestricted+0x34>
 8017bdc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8017be0:	b25b      	sxtb	r3, r3
 8017be2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017be6:	d00b      	beq.n	8017c00 <vQueueWaitForMessageRestricted+0x3c>
 8017be8:	f001 f8ae 	bl	8018d48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017bec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017bee:	b15b      	cbz	r3, 8017c08 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017bf0:	4620      	mov	r0, r4
 8017bf2:	f7ff faa3 	bl	801713c <prvUnlockQueue>
	}
 8017bf6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8017bfe:	e7ed      	b.n	8017bdc <vQueueWaitForMessageRestricted+0x18>
 8017c00:	2300      	movs	r3, #0
 8017c02:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8017c06:	e7ef      	b.n	8017be8 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017c08:	4632      	mov	r2, r6
 8017c0a:	4629      	mov	r1, r5
 8017c0c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8017c10:	f000 fc28 	bl	8018464 <vTaskPlaceOnEventListRestricted>
 8017c14:	e7ec      	b.n	8017bf0 <vQueueWaitForMessageRestricted+0x2c>
	...

08017c18 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017c18:	4b08      	ldr	r3, [pc, #32]	@ (8017c3c <prvResetNextTaskUnblockTime+0x24>)
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	b923      	cbnz	r3, 8017c2a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017c20:	4b07      	ldr	r3, [pc, #28]	@ (8017c40 <prvResetNextTaskUnblockTime+0x28>)
 8017c22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017c26:	601a      	str	r2, [r3, #0]
 8017c28:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017c2a:	4b04      	ldr	r3, [pc, #16]	@ (8017c3c <prvResetNextTaskUnblockTime+0x24>)
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	68db      	ldr	r3, [r3, #12]
 8017c30:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017c32:	685a      	ldr	r2, [r3, #4]
 8017c34:	4b02      	ldr	r3, [pc, #8]	@ (8017c40 <prvResetNextTaskUnblockTime+0x28>)
 8017c36:	601a      	str	r2, [r3, #0]
	}
}
 8017c38:	4770      	bx	lr
 8017c3a:	bf00      	nop
 8017c3c:	2000185c 	.word	0x2000185c
 8017c40:	200017f4 	.word	0x200017f4

08017c44 <prvInitialiseNewTask>:
{
 8017c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c48:	4680      	mov	r8, r0
 8017c4a:	460d      	mov	r5, r1
 8017c4c:	4617      	mov	r7, r2
 8017c4e:	4699      	mov	r9, r3
 8017c50:	9e08      	ldr	r6, [sp, #32]
 8017c52:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8017c56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017c58:	0092      	lsls	r2, r2, #2
 8017c5a:	21a5      	movs	r1, #165	@ 0xa5
 8017c5c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8017c5e:	f011 ff0f 	bl	8029a80 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017c62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017c64:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8017c68:	3a01      	subs	r2, #1
 8017c6a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017c6e:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8017c72:	2d00      	cmp	r5, #0
 8017c74:	d061      	beq.n	8017d3a <prvInitialiseNewTask+0xf6>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017c76:	f04f 0c00 	mov.w	ip, #0
 8017c7a:	f1bc 0f0f 	cmp.w	ip, #15
 8017c7e:	d809      	bhi.n	8017c94 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017c80:	f815 300c 	ldrb.w	r3, [r5, ip]
 8017c84:	eb04 020c 	add.w	r2, r4, ip
 8017c88:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8017c8c:	b113      	cbz	r3, 8017c94 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017c8e:	f10c 0c01 	add.w	ip, ip, #1
 8017c92:	e7f2      	b.n	8017c7a <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017c94:	2300      	movs	r3, #0
 8017c96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017c9a:	2e37      	cmp	r6, #55	@ 0x37
 8017c9c:	d900      	bls.n	8017ca0 <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017c9e:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8017ca0:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8017ca2:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017ca4:	2500      	movs	r5, #0
 8017ca6:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017ca8:	1d20      	adds	r0, r4, #4
 8017caa:	f7ff f99c 	bl	8016fe6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017cae:	f104 0018 	add.w	r0, r4, #24
 8017cb2:	f7ff f998 	bl	8016fe6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017cb6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017cb8:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8017cbc:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017cbe:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8017cc0:	f8c4 5178 	str.w	r5, [r4, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017cc4:	f884 517c 	strb.w	r5, [r4, #380]	@ 0x17c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8017cc8:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8017ccc:	4629      	mov	r1, r5
 8017cce:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017cd2:	f011 fed5 	bl	8029a80 <memset>
 8017cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8017d44 <prvInitialiseNewTask+0x100>)
 8017cd8:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8017cda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017cde:	6622      	str	r2, [r4, #96]	@ 0x60
 8017ce0:	33d0      	adds	r3, #208	@ 0xd0
 8017ce2:	6663      	str	r3, [r4, #100]	@ 0x64
 8017ce4:	2201      	movs	r2, #1
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	e9c4 233c 	strd	r2, r3, [r4, #240]	@ 0xf0
 8017cec:	f243 330e 	movw	r3, #13070	@ 0x330e
 8017cf0:	f8a4 30f8 	strh.w	r3, [r4, #248]	@ 0xf8
 8017cf4:	f64a 33cd 	movw	r3, #43981	@ 0xabcd
 8017cf8:	f8a4 30fa 	strh.w	r3, [r4, #250]	@ 0xfa
 8017cfc:	f241 2334 	movw	r3, #4660	@ 0x1234
 8017d00:	f8a4 30fc 	strh.w	r3, [r4, #252]	@ 0xfc
 8017d04:	f24e 636d 	movw	r3, #58989	@ 0xe66d
 8017d08:	f8a4 30fe 	strh.w	r3, [r4, #254]	@ 0xfe
 8017d0c:	f64d 63ec 	movw	r3, #57068	@ 0xdeec
 8017d10:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 8017d14:	2305      	movs	r3, #5
 8017d16:	f8a4 3102 	strh.w	r3, [r4, #258]	@ 0x102
 8017d1a:	230b      	movs	r3, #11
 8017d1c:	f8a4 3104 	strh.w	r3, [r4, #260]	@ 0x104
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017d20:	464a      	mov	r2, r9
 8017d22:	4641      	mov	r1, r8
 8017d24:	4638      	mov	r0, r7
 8017d26:	f000 ffc3 	bl	8018cb0 <pxPortInitialiseStack>
 8017d2a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8017d2c:	f1ba 0f00 	cmp.w	sl, #0
 8017d30:	d001      	beq.n	8017d36 <prvInitialiseNewTask+0xf2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017d32:	f8ca 4000 	str.w	r4, [sl]
}
 8017d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8017d40:	e7ab      	b.n	8017c9a <prvInitialiseNewTask+0x56>
 8017d42:	bf00      	nop
 8017d44:	20018024 	.word	0x20018024

08017d48 <prvInitialiseTaskLists>:
{
 8017d48:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017d4a:	2400      	movs	r4, #0
 8017d4c:	e007      	b.n	8017d5e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017d4e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8017d52:	0093      	lsls	r3, r2, #2
 8017d54:	480e      	ldr	r0, [pc, #56]	@ (8017d90 <prvInitialiseTaskLists+0x48>)
 8017d56:	4418      	add	r0, r3
 8017d58:	f7ff f93a 	bl	8016fd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017d5c:	3401      	adds	r4, #1
 8017d5e:	2c37      	cmp	r4, #55	@ 0x37
 8017d60:	d9f5      	bls.n	8017d4e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8017d62:	4d0c      	ldr	r5, [pc, #48]	@ (8017d94 <prvInitialiseTaskLists+0x4c>)
 8017d64:	4628      	mov	r0, r5
 8017d66:	f7ff f933 	bl	8016fd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017d6a:	4c0b      	ldr	r4, [pc, #44]	@ (8017d98 <prvInitialiseTaskLists+0x50>)
 8017d6c:	4620      	mov	r0, r4
 8017d6e:	f7ff f92f 	bl	8016fd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017d72:	480a      	ldr	r0, [pc, #40]	@ (8017d9c <prvInitialiseTaskLists+0x54>)
 8017d74:	f7ff f92c 	bl	8016fd0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8017d78:	4809      	ldr	r0, [pc, #36]	@ (8017da0 <prvInitialiseTaskLists+0x58>)
 8017d7a:	f7ff f929 	bl	8016fd0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8017d7e:	4809      	ldr	r0, [pc, #36]	@ (8017da4 <prvInitialiseTaskLists+0x5c>)
 8017d80:	f7ff f926 	bl	8016fd0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8017d84:	4b08      	ldr	r3, [pc, #32]	@ (8017da8 <prvInitialiseTaskLists+0x60>)
 8017d86:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017d88:	4b08      	ldr	r3, [pc, #32]	@ (8017dac <prvInitialiseTaskLists+0x64>)
 8017d8a:	601c      	str	r4, [r3, #0]
}
 8017d8c:	bd38      	pop	{r3, r4, r5, pc}
 8017d8e:	bf00      	nop
 8017d90:	20001888 	.word	0x20001888
 8017d94:	20001874 	.word	0x20001874
 8017d98:	20001860 	.word	0x20001860
 8017d9c:	20001844 	.word	0x20001844
 8017da0:	20001830 	.word	0x20001830
 8017da4:	20001818 	.word	0x20001818
 8017da8:	2000185c 	.word	0x2000185c
 8017dac:	20001858 	.word	0x20001858

08017db0 <prvAddNewTaskToReadyList>:
{
 8017db0:	b510      	push	{r4, lr}
 8017db2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8017db4:	f000 ffa6 	bl	8018d04 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8017db8:	4a22      	ldr	r2, [pc, #136]	@ (8017e44 <prvAddNewTaskToReadyList+0x94>)
 8017dba:	6813      	ldr	r3, [r2, #0]
 8017dbc:	3301      	adds	r3, #1
 8017dbe:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017dc0:	4b21      	ldr	r3, [pc, #132]	@ (8017e48 <prvAddNewTaskToReadyList+0x98>)
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	b15b      	cbz	r3, 8017dde <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8017dc6:	4b21      	ldr	r3, [pc, #132]	@ (8017e4c <prvAddNewTaskToReadyList+0x9c>)
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	b96b      	cbnz	r3, 8017de8 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8017e48 <prvAddNewTaskToReadyList+0x98>)
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017dd2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8017dd4:	429a      	cmp	r2, r3
 8017dd6:	d807      	bhi.n	8017de8 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8017dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8017e48 <prvAddNewTaskToReadyList+0x98>)
 8017dda:	601c      	str	r4, [r3, #0]
 8017ddc:	e004      	b.n	8017de8 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8017dde:	4b1a      	ldr	r3, [pc, #104]	@ (8017e48 <prvAddNewTaskToReadyList+0x98>)
 8017de0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017de2:	6813      	ldr	r3, [r2, #0]
 8017de4:	2b01      	cmp	r3, #1
 8017de6:	d029      	beq.n	8017e3c <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8017de8:	4a19      	ldr	r2, [pc, #100]	@ (8017e50 <prvAddNewTaskToReadyList+0xa0>)
 8017dea:	6813      	ldr	r3, [r2, #0]
 8017dec:	3301      	adds	r3, #1
 8017dee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017df0:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8017df2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8017df4:	4b17      	ldr	r3, [pc, #92]	@ (8017e54 <prvAddNewTaskToReadyList+0xa4>)
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	4298      	cmp	r0, r3
 8017dfa:	d901      	bls.n	8017e00 <prvAddNewTaskToReadyList+0x50>
 8017dfc:	4b15      	ldr	r3, [pc, #84]	@ (8017e54 <prvAddNewTaskToReadyList+0xa4>)
 8017dfe:	6018      	str	r0, [r3, #0]
 8017e00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017e04:	1d21      	adds	r1, r4, #4
 8017e06:	4b14      	ldr	r3, [pc, #80]	@ (8017e58 <prvAddNewTaskToReadyList+0xa8>)
 8017e08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017e0c:	f7ff f8ee 	bl	8016fec <vListInsertEnd>
	taskEXIT_CRITICAL();
 8017e10:	f000 ff9a 	bl	8018d48 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8017e14:	4b0d      	ldr	r3, [pc, #52]	@ (8017e4c <prvAddNewTaskToReadyList+0x9c>)
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	b17b      	cbz	r3, 8017e3a <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8017e48 <prvAddNewTaskToReadyList+0x98>)
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017e20:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8017e22:	429a      	cmp	r2, r3
 8017e24:	d209      	bcs.n	8017e3a <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8017e26:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017e2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017e2e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8017e32:	f3bf 8f4f 	dsb	sy
 8017e36:	f3bf 8f6f 	isb	sy
}
 8017e3a:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8017e3c:	f7ff ff84 	bl	8017d48 <prvInitialiseTaskLists>
 8017e40:	e7d2      	b.n	8017de8 <prvAddNewTaskToReadyList+0x38>
 8017e42:	bf00      	nop
 8017e44:	20001814 	.word	0x20001814
 8017e48:	20001ce8 	.word	0x20001ce8
 8017e4c:	20001808 	.word	0x20001808
 8017e50:	200017f8 	.word	0x200017f8
 8017e54:	2000180c 	.word	0x2000180c
 8017e58:	20001888 	.word	0x20001888

08017e5c <prvDeleteTCB>:
	{
 8017e5c:	b510      	push	{r4, lr}
 8017e5e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017e60:	3058      	adds	r0, #88	@ 0x58
 8017e62:	f012 ffaf 	bl	802adc4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017e66:	f894 317d 	ldrb.w	r3, [r4, #381]	@ 0x17d
 8017e6a:	b163      	cbz	r3, 8017e86 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017e6c:	2b01      	cmp	r3, #1
 8017e6e:	d011      	beq.n	8017e94 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017e70:	2b02      	cmp	r3, #2
 8017e72:	d00e      	beq.n	8017e92 <prvDeleteTCB+0x36>
 8017e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e78:	f383 8811 	msr	BASEPRI, r3
 8017e7c:	f3bf 8f6f 	isb	sy
 8017e80:	f3bf 8f4f 	dsb	sy
 8017e84:	e7fe      	b.n	8017e84 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8017e86:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8017e88:	f001 f978 	bl	801917c <vPortFree>
				vPortFree( pxTCB );
 8017e8c:	4620      	mov	r0, r4
 8017e8e:	f001 f975 	bl	801917c <vPortFree>
	}
 8017e92:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8017e94:	4620      	mov	r0, r4
 8017e96:	f001 f971 	bl	801917c <vPortFree>
 8017e9a:	e7fa      	b.n	8017e92 <prvDeleteTCB+0x36>

08017e9c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8017edc <prvCheckTasksWaitingTermination+0x40>)
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	b1d3      	cbz	r3, 8017ed8 <prvCheckTasksWaitingTermination+0x3c>
{
 8017ea2:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8017ea4:	f000 ff2e 	bl	8018d04 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8017ee0 <prvCheckTasksWaitingTermination+0x44>)
 8017eaa:	68db      	ldr	r3, [r3, #12]
 8017eac:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017eae:	1d20      	adds	r0, r4, #4
 8017eb0:	f7ff f8c0 	bl	8017034 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8017ee4 <prvCheckTasksWaitingTermination+0x48>)
 8017eb6:	6813      	ldr	r3, [r2, #0]
 8017eb8:	3b01      	subs	r3, #1
 8017eba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017ebc:	4a07      	ldr	r2, [pc, #28]	@ (8017edc <prvCheckTasksWaitingTermination+0x40>)
 8017ebe:	6813      	ldr	r3, [r2, #0]
 8017ec0:	3b01      	subs	r3, #1
 8017ec2:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8017ec4:	f000 ff40 	bl	8018d48 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8017ec8:	4620      	mov	r0, r4
 8017eca:	f7ff ffc7 	bl	8017e5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017ece:	4b03      	ldr	r3, [pc, #12]	@ (8017edc <prvCheckTasksWaitingTermination+0x40>)
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d1e6      	bne.n	8017ea4 <prvCheckTasksWaitingTermination+0x8>
}
 8017ed6:	bd10      	pop	{r4, pc}
 8017ed8:	4770      	bx	lr
 8017eda:	bf00      	nop
 8017edc:	2000182c 	.word	0x2000182c
 8017ee0:	20001830 	.word	0x20001830
 8017ee4:	20001814 	.word	0x20001814

08017ee8 <prvIdleTask>:
{
 8017ee8:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8017eea:	f7ff ffd7 	bl	8017e9c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017eee:	4b07      	ldr	r3, [pc, #28]	@ (8017f0c <prvIdleTask+0x24>)
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	2b01      	cmp	r3, #1
 8017ef4:	d9f9      	bls.n	8017eea <prvIdleTask+0x2>
				taskYIELD();
 8017ef6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017efa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017efe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8017f02:	f3bf 8f4f 	dsb	sy
 8017f06:	f3bf 8f6f 	isb	sy
 8017f0a:	e7ee      	b.n	8017eea <prvIdleTask+0x2>
 8017f0c:	20001888 	.word	0x20001888

08017f10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017f10:	b570      	push	{r4, r5, r6, lr}
 8017f12:	4604      	mov	r4, r0
 8017f14:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017f16:	4b17      	ldr	r3, [pc, #92]	@ (8017f74 <prvAddCurrentTaskToDelayedList+0x64>)
 8017f18:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017f1a:	4b17      	ldr	r3, [pc, #92]	@ (8017f78 <prvAddCurrentTaskToDelayedList+0x68>)
 8017f1c:	6818      	ldr	r0, [r3, #0]
 8017f1e:	3004      	adds	r0, #4
 8017f20:	f7ff f888 	bl	8017034 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017f24:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8017f28:	d00d      	beq.n	8017f46 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017f2a:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017f2c:	4b12      	ldr	r3, [pc, #72]	@ (8017f78 <prvAddCurrentTaskToDelayedList+0x68>)
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8017f32:	42a6      	cmp	r6, r4
 8017f34:	d910      	bls.n	8017f58 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017f36:	4b11      	ldr	r3, [pc, #68]	@ (8017f7c <prvAddCurrentTaskToDelayedList+0x6c>)
 8017f38:	6818      	ldr	r0, [r3, #0]
 8017f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8017f78 <prvAddCurrentTaskToDelayedList+0x68>)
 8017f3c:	6819      	ldr	r1, [r3, #0]
 8017f3e:	3104      	adds	r1, #4
 8017f40:	f7ff f85f 	bl	8017002 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017f44:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017f46:	2d00      	cmp	r5, #0
 8017f48:	d0ef      	beq.n	8017f2a <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8017f78 <prvAddCurrentTaskToDelayedList+0x68>)
 8017f4c:	6819      	ldr	r1, [r3, #0]
 8017f4e:	3104      	adds	r1, #4
 8017f50:	480b      	ldr	r0, [pc, #44]	@ (8017f80 <prvAddCurrentTaskToDelayedList+0x70>)
 8017f52:	f7ff f84b 	bl	8016fec <vListInsertEnd>
 8017f56:	e7f5      	b.n	8017f44 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017f58:	4b0a      	ldr	r3, [pc, #40]	@ (8017f84 <prvAddCurrentTaskToDelayedList+0x74>)
 8017f5a:	6818      	ldr	r0, [r3, #0]
 8017f5c:	4b06      	ldr	r3, [pc, #24]	@ (8017f78 <prvAddCurrentTaskToDelayedList+0x68>)
 8017f5e:	6819      	ldr	r1, [r3, #0]
 8017f60:	3104      	adds	r1, #4
 8017f62:	f7ff f84e 	bl	8017002 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017f66:	4b08      	ldr	r3, [pc, #32]	@ (8017f88 <prvAddCurrentTaskToDelayedList+0x78>)
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	42a3      	cmp	r3, r4
 8017f6c:	d9ea      	bls.n	8017f44 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8017f6e:	4b06      	ldr	r3, [pc, #24]	@ (8017f88 <prvAddCurrentTaskToDelayedList+0x78>)
 8017f70:	601c      	str	r4, [r3, #0]
}
 8017f72:	e7e7      	b.n	8017f44 <prvAddCurrentTaskToDelayedList+0x34>
 8017f74:	20001810 	.word	0x20001810
 8017f78:	20001ce8 	.word	0x20001ce8
 8017f7c:	20001858 	.word	0x20001858
 8017f80:	20001818 	.word	0x20001818
 8017f84:	2000185c 	.word	0x2000185c
 8017f88:	200017f4 	.word	0x200017f4

08017f8c <xTaskCreateStatic>:
	{
 8017f8c:	b530      	push	{r4, r5, lr}
 8017f8e:	b087      	sub	sp, #28
 8017f90:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8017f92:	b18c      	cbz	r4, 8017fb8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8017f94:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8017f96:	b1c5      	cbz	r5, 8017fca <xTaskCreateStatic+0x3e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8017f98:	f44f 75c0 	mov.w	r5, #384	@ 0x180
 8017f9c:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017f9e:	9d04      	ldr	r5, [sp, #16]
 8017fa0:	f5b5 7fc0 	cmp.w	r5, #384	@ 0x180
 8017fa4:	d01a      	beq.n	8017fdc <xTaskCreateStatic+0x50>
 8017fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017faa:	f383 8811 	msr	BASEPRI, r3
 8017fae:	f3bf 8f6f 	isb	sy
 8017fb2:	f3bf 8f4f 	dsb	sy
 8017fb6:	e7fe      	b.n	8017fb6 <xTaskCreateStatic+0x2a>
 8017fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017fbc:	f383 8811 	msr	BASEPRI, r3
 8017fc0:	f3bf 8f6f 	isb	sy
 8017fc4:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8017fc8:	e7fe      	b.n	8017fc8 <xTaskCreateStatic+0x3c>
 8017fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017fce:	f383 8811 	msr	BASEPRI, r3
 8017fd2:	f3bf 8f6f 	isb	sy
 8017fd6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8017fda:	e7fe      	b.n	8017fda <xTaskCreateStatic+0x4e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017fdc:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017fde:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8017fe0:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017fe2:	2402      	movs	r4, #2
 8017fe4:	f885 417d 	strb.w	r4, [r5, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017fe8:	2400      	movs	r4, #0
 8017fea:	9403      	str	r4, [sp, #12]
 8017fec:	9502      	str	r5, [sp, #8]
 8017fee:	ac05      	add	r4, sp, #20
 8017ff0:	9401      	str	r4, [sp, #4]
 8017ff2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017ff4:	9400      	str	r4, [sp, #0]
 8017ff6:	f7ff fe25 	bl	8017c44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017ffa:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8017ffc:	f7ff fed8 	bl	8017db0 <prvAddNewTaskToReadyList>
	}
 8018000:	9805      	ldr	r0, [sp, #20]
 8018002:	b007      	add	sp, #28
 8018004:	bd30      	pop	{r4, r5, pc}

08018006 <xTaskCreate>:
	{
 8018006:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801800a:	b085      	sub	sp, #20
 801800c:	4607      	mov	r7, r0
 801800e:	4688      	mov	r8, r1
 8018010:	4614      	mov	r4, r2
 8018012:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018014:	0090      	lsls	r0, r2, #2
 8018016:	f001 f82f 	bl	8019078 <pvPortMalloc>
			if( pxStack != NULL )
 801801a:	b310      	cbz	r0, 8018062 <xTaskCreate+0x5c>
 801801c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801801e:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8018022:	f001 f829 	bl	8019078 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8018026:	4605      	mov	r5, r0
 8018028:	b1a8      	cbz	r0, 8018056 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 801802a:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801802e:	2300      	movs	r3, #0
 8018030:	f880 317d 	strb.w	r3, [r0, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018034:	9303      	str	r3, [sp, #12]
 8018036:	9002      	str	r0, [sp, #8]
 8018038:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801803a:	9301      	str	r3, [sp, #4]
 801803c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801803e:	9300      	str	r3, [sp, #0]
 8018040:	4633      	mov	r3, r6
 8018042:	4622      	mov	r2, r4
 8018044:	4641      	mov	r1, r8
 8018046:	4638      	mov	r0, r7
 8018048:	f7ff fdfc 	bl	8017c44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801804c:	4628      	mov	r0, r5
 801804e:	f7ff feaf 	bl	8017db0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018052:	2001      	movs	r0, #1
 8018054:	e007      	b.n	8018066 <xTaskCreate+0x60>
					vPortFree( pxStack );
 8018056:	4648      	mov	r0, r9
 8018058:	f001 f890 	bl	801917c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801805c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018060:	e001      	b.n	8018066 <xTaskCreate+0x60>
 8018062:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 8018066:	b005      	add	sp, #20
 8018068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801806c <vTaskStartScheduler>:
{
 801806c:	b510      	push	{r4, lr}
 801806e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018070:	2400      	movs	r4, #0
 8018072:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018074:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018076:	aa07      	add	r2, sp, #28
 8018078:	a906      	add	r1, sp, #24
 801807a:	a805      	add	r0, sp, #20
 801807c:	f7fe ff90 	bl	8016fa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018080:	9b05      	ldr	r3, [sp, #20]
 8018082:	9302      	str	r3, [sp, #8]
 8018084:	9b06      	ldr	r3, [sp, #24]
 8018086:	9301      	str	r3, [sp, #4]
 8018088:	9400      	str	r4, [sp, #0]
 801808a:	4623      	mov	r3, r4
 801808c:	9a07      	ldr	r2, [sp, #28]
 801808e:	491a      	ldr	r1, [pc, #104]	@ (80180f8 <vTaskStartScheduler+0x8c>)
 8018090:	481a      	ldr	r0, [pc, #104]	@ (80180fc <vTaskStartScheduler+0x90>)
 8018092:	f7ff ff7b 	bl	8017f8c <xTaskCreateStatic>
 8018096:	4b1a      	ldr	r3, [pc, #104]	@ (8018100 <vTaskStartScheduler+0x94>)
 8018098:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 801809a:	b1e8      	cbz	r0, 80180d8 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 801809c:	f000 fc0c 	bl	80188b8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80180a0:	2801      	cmp	r0, #1
 80180a2:	d11a      	bne.n	80180da <vTaskStartScheduler+0x6e>
 80180a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80180a8:	f383 8811 	msr	BASEPRI, r3
 80180ac:	f3bf 8f6f 	isb	sy
 80180b0:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80180b4:	4b13      	ldr	r3, [pc, #76]	@ (8018104 <vTaskStartScheduler+0x98>)
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	3358      	adds	r3, #88	@ 0x58
 80180ba:	4a13      	ldr	r2, [pc, #76]	@ (8018108 <vTaskStartScheduler+0x9c>)
 80180bc:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80180be:	4b13      	ldr	r3, [pc, #76]	@ (801810c <vTaskStartScheduler+0xa0>)
 80180c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80180c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80180c6:	4b12      	ldr	r3, [pc, #72]	@ (8018110 <vTaskStartScheduler+0xa4>)
 80180c8:	2201      	movs	r2, #1
 80180ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80180cc:	4b11      	ldr	r3, [pc, #68]	@ (8018114 <vTaskStartScheduler+0xa8>)
 80180ce:	2200      	movs	r2, #0
 80180d0:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80180d2:	f000 feb1 	bl	8018e38 <xPortStartScheduler>
 80180d6:	e003      	b.n	80180e0 <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 80180d8:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80180da:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 80180de:	d001      	beq.n	80180e4 <vTaskStartScheduler+0x78>
}
 80180e0:	b008      	add	sp, #32
 80180e2:	bd10      	pop	{r4, pc}
 80180e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80180e8:	f383 8811 	msr	BASEPRI, r3
 80180ec:	f3bf 8f6f 	isb	sy
 80180f0:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80180f4:	e7fe      	b.n	80180f4 <vTaskStartScheduler+0x88>
 80180f6:	bf00      	nop
 80180f8:	080354e4 	.word	0x080354e4
 80180fc:	08017ee9 	.word	0x08017ee9
 8018100:	200017f0 	.word	0x200017f0
 8018104:	20001ce8 	.word	0x20001ce8
 8018108:	20000254 	.word	0x20000254
 801810c:	200017f4 	.word	0x200017f4
 8018110:	20001808 	.word	0x20001808
 8018114:	20001810 	.word	0x20001810

08018118 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8018118:	4a02      	ldr	r2, [pc, #8]	@ (8018124 <vTaskSuspendAll+0xc>)
 801811a:	6813      	ldr	r3, [r2, #0]
 801811c:	3301      	adds	r3, #1
 801811e:	6013      	str	r3, [r2, #0]
}
 8018120:	4770      	bx	lr
 8018122:	bf00      	nop
 8018124:	200017ec 	.word	0x200017ec

08018128 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8018128:	4b01      	ldr	r3, [pc, #4]	@ (8018130 <xTaskGetTickCount+0x8>)
 801812a:	6818      	ldr	r0, [r3, #0]
}
 801812c:	4770      	bx	lr
 801812e:	bf00      	nop
 8018130:	20001810 	.word	0x20001810

08018134 <xTaskIncrementTick>:
{
 8018134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018136:	4b3a      	ldr	r3, [pc, #232]	@ (8018220 <xTaskIncrementTick+0xec>)
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d169      	bne.n	8018212 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801813e:	4b39      	ldr	r3, [pc, #228]	@ (8018224 <xTaskIncrementTick+0xf0>)
 8018140:	681d      	ldr	r5, [r3, #0]
 8018142:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8018144:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018146:	b9c5      	cbnz	r5, 801817a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8018148:	4b37      	ldr	r3, [pc, #220]	@ (8018228 <xTaskIncrementTick+0xf4>)
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	b143      	cbz	r3, 8018162 <xTaskIncrementTick+0x2e>
 8018150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018154:	f383 8811 	msr	BASEPRI, r3
 8018158:	f3bf 8f6f 	isb	sy
 801815c:	f3bf 8f4f 	dsb	sy
 8018160:	e7fe      	b.n	8018160 <xTaskIncrementTick+0x2c>
 8018162:	4a31      	ldr	r2, [pc, #196]	@ (8018228 <xTaskIncrementTick+0xf4>)
 8018164:	6811      	ldr	r1, [r2, #0]
 8018166:	4b31      	ldr	r3, [pc, #196]	@ (801822c <xTaskIncrementTick+0xf8>)
 8018168:	6818      	ldr	r0, [r3, #0]
 801816a:	6010      	str	r0, [r2, #0]
 801816c:	6019      	str	r1, [r3, #0]
 801816e:	4a30      	ldr	r2, [pc, #192]	@ (8018230 <xTaskIncrementTick+0xfc>)
 8018170:	6813      	ldr	r3, [r2, #0]
 8018172:	3301      	adds	r3, #1
 8018174:	6013      	str	r3, [r2, #0]
 8018176:	f7ff fd4f 	bl	8017c18 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 801817a:	4b2e      	ldr	r3, [pc, #184]	@ (8018234 <xTaskIncrementTick+0x100>)
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	42ab      	cmp	r3, r5
 8018180:	d93d      	bls.n	80181fe <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8018182:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018184:	4b2c      	ldr	r3, [pc, #176]	@ (8018238 <xTaskIncrementTick+0x104>)
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801818a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801818e:	009a      	lsls	r2, r3, #2
 8018190:	4b2a      	ldr	r3, [pc, #168]	@ (801823c <xTaskIncrementTick+0x108>)
 8018192:	589b      	ldr	r3, [r3, r2]
 8018194:	2b01      	cmp	r3, #1
 8018196:	d900      	bls.n	801819a <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8018198:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 801819a:	4b29      	ldr	r3, [pc, #164]	@ (8018240 <xTaskIncrementTick+0x10c>)
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d03c      	beq.n	801821c <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 80181a2:	2701      	movs	r7, #1
	return xSwitchRequired;
 80181a4:	e03a      	b.n	801821c <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 80181a6:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80181a8:	4b1f      	ldr	r3, [pc, #124]	@ (8018228 <xTaskIncrementTick+0xf4>)
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	b343      	cbz	r3, 8018202 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80181b0:	4b1d      	ldr	r3, [pc, #116]	@ (8018228 <xTaskIncrementTick+0xf4>)
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	68db      	ldr	r3, [r3, #12]
 80181b6:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80181b8:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80181ba:	429d      	cmp	r5, r3
 80181bc:	d326      	bcc.n	801820c <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80181be:	1d26      	adds	r6, r4, #4
 80181c0:	4630      	mov	r0, r6
 80181c2:	f7fe ff37 	bl	8017034 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80181c6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80181c8:	b11b      	cbz	r3, 80181d2 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80181ca:	f104 0018 	add.w	r0, r4, #24
 80181ce:	f7fe ff31 	bl	8017034 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80181d2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80181d4:	4a1b      	ldr	r2, [pc, #108]	@ (8018244 <xTaskIncrementTick+0x110>)
 80181d6:	6812      	ldr	r2, [r2, #0]
 80181d8:	4293      	cmp	r3, r2
 80181da:	d901      	bls.n	80181e0 <xTaskIncrementTick+0xac>
 80181dc:	4a19      	ldr	r2, [pc, #100]	@ (8018244 <xTaskIncrementTick+0x110>)
 80181de:	6013      	str	r3, [r2, #0]
 80181e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80181e4:	009a      	lsls	r2, r3, #2
 80181e6:	4631      	mov	r1, r6
 80181e8:	4814      	ldr	r0, [pc, #80]	@ (801823c <xTaskIncrementTick+0x108>)
 80181ea:	4410      	add	r0, r2
 80181ec:	f7fe fefe 	bl	8016fec <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80181f0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80181f2:	4b11      	ldr	r3, [pc, #68]	@ (8018238 <xTaskIncrementTick+0x104>)
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80181f8:	429a      	cmp	r2, r3
 80181fa:	d2d4      	bcs.n	80181a6 <xTaskIncrementTick+0x72>
 80181fc:	e7d4      	b.n	80181a8 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 80181fe:	2700      	movs	r7, #0
 8018200:	e7d2      	b.n	80181a8 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018202:	4b0c      	ldr	r3, [pc, #48]	@ (8018234 <xTaskIncrementTick+0x100>)
 8018204:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018208:	601a      	str	r2, [r3, #0]
					break;
 801820a:	e7bb      	b.n	8018184 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 801820c:	4a09      	ldr	r2, [pc, #36]	@ (8018234 <xTaskIncrementTick+0x100>)
 801820e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018210:	e7b8      	b.n	8018184 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8018212:	4a0d      	ldr	r2, [pc, #52]	@ (8018248 <xTaskIncrementTick+0x114>)
 8018214:	6813      	ldr	r3, [r2, #0]
 8018216:	3301      	adds	r3, #1
 8018218:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 801821a:	2700      	movs	r7, #0
}
 801821c:	4638      	mov	r0, r7
 801821e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018220:	200017ec 	.word	0x200017ec
 8018224:	20001810 	.word	0x20001810
 8018228:	2000185c 	.word	0x2000185c
 801822c:	20001858 	.word	0x20001858
 8018230:	200017fc 	.word	0x200017fc
 8018234:	200017f4 	.word	0x200017f4
 8018238:	20001ce8 	.word	0x20001ce8
 801823c:	20001888 	.word	0x20001888
 8018240:	20001800 	.word	0x20001800
 8018244:	2000180c 	.word	0x2000180c
 8018248:	20001804 	.word	0x20001804

0801824c <xTaskResumeAll>:
{
 801824c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 801824e:	4b35      	ldr	r3, [pc, #212]	@ (8018324 <xTaskResumeAll+0xd8>)
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	b943      	cbnz	r3, 8018266 <xTaskResumeAll+0x1a>
 8018254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018258:	f383 8811 	msr	BASEPRI, r3
 801825c:	f3bf 8f6f 	isb	sy
 8018260:	f3bf 8f4f 	dsb	sy
 8018264:	e7fe      	b.n	8018264 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8018266:	f000 fd4d 	bl	8018d04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801826a:	4b2e      	ldr	r3, [pc, #184]	@ (8018324 <xTaskResumeAll+0xd8>)
 801826c:	681a      	ldr	r2, [r3, #0]
 801826e:	3a01      	subs	r2, #1
 8018270:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d14f      	bne.n	8018318 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018278:	4b2b      	ldr	r3, [pc, #172]	@ (8018328 <xTaskResumeAll+0xdc>)
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	b90b      	cbnz	r3, 8018282 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 801827e:	2400      	movs	r4, #0
 8018280:	e04b      	b.n	801831a <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8018282:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018284:	4b29      	ldr	r3, [pc, #164]	@ (801832c <xTaskResumeAll+0xe0>)
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	b31b      	cbz	r3, 80182d2 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801828a:	4b28      	ldr	r3, [pc, #160]	@ (801832c <xTaskResumeAll+0xe0>)
 801828c:	68db      	ldr	r3, [r3, #12]
 801828e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018290:	f104 0018 	add.w	r0, r4, #24
 8018294:	f7fe fece 	bl	8017034 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018298:	1d25      	adds	r5, r4, #4
 801829a:	4628      	mov	r0, r5
 801829c:	f7fe feca 	bl	8017034 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80182a0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80182a2:	4b23      	ldr	r3, [pc, #140]	@ (8018330 <xTaskResumeAll+0xe4>)
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	4298      	cmp	r0, r3
 80182a8:	d901      	bls.n	80182ae <xTaskResumeAll+0x62>
 80182aa:	4b21      	ldr	r3, [pc, #132]	@ (8018330 <xTaskResumeAll+0xe4>)
 80182ac:	6018      	str	r0, [r3, #0]
 80182ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80182b2:	4629      	mov	r1, r5
 80182b4:	4b1f      	ldr	r3, [pc, #124]	@ (8018334 <xTaskResumeAll+0xe8>)
 80182b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80182ba:	f7fe fe97 	bl	8016fec <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80182be:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80182c0:	4b1d      	ldr	r3, [pc, #116]	@ (8018338 <xTaskResumeAll+0xec>)
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80182c6:	429a      	cmp	r2, r3
 80182c8:	d3dc      	bcc.n	8018284 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 80182ca:	4b1c      	ldr	r3, [pc, #112]	@ (801833c <xTaskResumeAll+0xf0>)
 80182cc:	2201      	movs	r2, #1
 80182ce:	601a      	str	r2, [r3, #0]
 80182d0:	e7d8      	b.n	8018284 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 80182d2:	b10c      	cbz	r4, 80182d8 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 80182d4:	f7ff fca0 	bl	8017c18 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80182d8:	4b19      	ldr	r3, [pc, #100]	@ (8018340 <xTaskResumeAll+0xf4>)
 80182da:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80182dc:	b984      	cbnz	r4, 8018300 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 80182de:	4b17      	ldr	r3, [pc, #92]	@ (801833c <xTaskResumeAll+0xf0>)
 80182e0:	681c      	ldr	r4, [r3, #0]
 80182e2:	b1d4      	cbz	r4, 801831a <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 80182e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80182e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80182ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80182f0:	f3bf 8f4f 	dsb	sy
 80182f4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80182f8:	2401      	movs	r4, #1
 80182fa:	e00e      	b.n	801831a <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 80182fc:	3c01      	subs	r4, #1
 80182fe:	d007      	beq.n	8018310 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8018300:	f7ff ff18 	bl	8018134 <xTaskIncrementTick>
 8018304:	2800      	cmp	r0, #0
 8018306:	d0f9      	beq.n	80182fc <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8018308:	4b0c      	ldr	r3, [pc, #48]	@ (801833c <xTaskResumeAll+0xf0>)
 801830a:	2201      	movs	r2, #1
 801830c:	601a      	str	r2, [r3, #0]
 801830e:	e7f5      	b.n	80182fc <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8018310:	4b0b      	ldr	r3, [pc, #44]	@ (8018340 <xTaskResumeAll+0xf4>)
 8018312:	2200      	movs	r2, #0
 8018314:	601a      	str	r2, [r3, #0]
 8018316:	e7e2      	b.n	80182de <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8018318:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801831a:	f000 fd15 	bl	8018d48 <vPortExitCritical>
}
 801831e:	4620      	mov	r0, r4
 8018320:	bd38      	pop	{r3, r4, r5, pc}
 8018322:	bf00      	nop
 8018324:	200017ec 	.word	0x200017ec
 8018328:	20001814 	.word	0x20001814
 801832c:	20001844 	.word	0x20001844
 8018330:	2000180c 	.word	0x2000180c
 8018334:	20001888 	.word	0x20001888
 8018338:	20001ce8 	.word	0x20001ce8
 801833c:	20001800 	.word	0x20001800
 8018340:	20001804 	.word	0x20001804

08018344 <vTaskDelay>:
	{
 8018344:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018346:	b1a8      	cbz	r0, 8018374 <vTaskDelay+0x30>
 8018348:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 801834a:	4b10      	ldr	r3, [pc, #64]	@ (801838c <vTaskDelay+0x48>)
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	b143      	cbz	r3, 8018362 <vTaskDelay+0x1e>
 8018350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018354:	f383 8811 	msr	BASEPRI, r3
 8018358:	f3bf 8f6f 	isb	sy
 801835c:	f3bf 8f4f 	dsb	sy
 8018360:	e7fe      	b.n	8018360 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8018362:	f7ff fed9 	bl	8018118 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018366:	2100      	movs	r1, #0
 8018368:	4620      	mov	r0, r4
 801836a:	f7ff fdd1 	bl	8017f10 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 801836e:	f7ff ff6d 	bl	801824c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8018372:	b948      	cbnz	r0, 8018388 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8018374:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801837c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018380:	f3bf 8f4f 	dsb	sy
 8018384:	f3bf 8f6f 	isb	sy
	}
 8018388:	bd10      	pop	{r4, pc}
 801838a:	bf00      	nop
 801838c:	200017ec 	.word	0x200017ec

08018390 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018390:	4b22      	ldr	r3, [pc, #136]	@ (801841c <vTaskSwitchContext+0x8c>)
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	b11b      	cbz	r3, 801839e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8018396:	4b22      	ldr	r3, [pc, #136]	@ (8018420 <vTaskSwitchContext+0x90>)
 8018398:	2201      	movs	r2, #1
 801839a:	601a      	str	r2, [r3, #0]
 801839c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 801839e:	4b20      	ldr	r3, [pc, #128]	@ (8018420 <vTaskSwitchContext+0x90>)
 80183a0:	2200      	movs	r2, #0
 80183a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80183a4:	4b1f      	ldr	r3, [pc, #124]	@ (8018424 <vTaskSwitchContext+0x94>)
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80183ac:	008a      	lsls	r2, r1, #2
 80183ae:	491e      	ldr	r1, [pc, #120]	@ (8018428 <vTaskSwitchContext+0x98>)
 80183b0:	588a      	ldr	r2, [r1, r2]
 80183b2:	b95a      	cbnz	r2, 80183cc <vTaskSwitchContext+0x3c>
 80183b4:	b10b      	cbz	r3, 80183ba <vTaskSwitchContext+0x2a>
 80183b6:	3b01      	subs	r3, #1
 80183b8:	e7f6      	b.n	80183a8 <vTaskSwitchContext+0x18>
 80183ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80183be:	f383 8811 	msr	BASEPRI, r3
 80183c2:	f3bf 8f6f 	isb	sy
 80183c6:	f3bf 8f4f 	dsb	sy
 80183ca:	e7fe      	b.n	80183ca <vTaskSwitchContext+0x3a>
 80183cc:	4608      	mov	r0, r1
 80183ce:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80183d2:	008a      	lsls	r2, r1, #2
 80183d4:	4402      	add	r2, r0
 80183d6:	6851      	ldr	r1, [r2, #4]
 80183d8:	6849      	ldr	r1, [r1, #4]
 80183da:	6051      	str	r1, [r2, #4]
 80183dc:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80183e0:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80183e4:	3208      	adds	r2, #8
 80183e6:	4402      	add	r2, r0
 80183e8:	4291      	cmp	r1, r2
 80183ea:	d00f      	beq.n	801840c <vTaskSwitchContext+0x7c>
 80183ec:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80183f0:	0091      	lsls	r1, r2, #2
 80183f2:	4a0d      	ldr	r2, [pc, #52]	@ (8018428 <vTaskSwitchContext+0x98>)
 80183f4:	440a      	add	r2, r1
 80183f6:	6852      	ldr	r2, [r2, #4]
 80183f8:	68d1      	ldr	r1, [r2, #12]
 80183fa:	4a0c      	ldr	r2, [pc, #48]	@ (801842c <vTaskSwitchContext+0x9c>)
 80183fc:	6011      	str	r1, [r2, #0]
 80183fe:	4909      	ldr	r1, [pc, #36]	@ (8018424 <vTaskSwitchContext+0x94>)
 8018400:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8018402:	6813      	ldr	r3, [r2, #0]
 8018404:	3358      	adds	r3, #88	@ 0x58
 8018406:	4a0a      	ldr	r2, [pc, #40]	@ (8018430 <vTaskSwitchContext+0xa0>)
 8018408:	6013      	str	r3, [r2, #0]
}
 801840a:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801840c:	6848      	ldr	r0, [r1, #4]
 801840e:	4662      	mov	r2, ip
 8018410:	0091      	lsls	r1, r2, #2
 8018412:	4a05      	ldr	r2, [pc, #20]	@ (8018428 <vTaskSwitchContext+0x98>)
 8018414:	440a      	add	r2, r1
 8018416:	6050      	str	r0, [r2, #4]
 8018418:	e7e8      	b.n	80183ec <vTaskSwitchContext+0x5c>
 801841a:	bf00      	nop
 801841c:	200017ec 	.word	0x200017ec
 8018420:	20001800 	.word	0x20001800
 8018424:	2000180c 	.word	0x2000180c
 8018428:	20001888 	.word	0x20001888
 801842c:	20001ce8 	.word	0x20001ce8
 8018430:	20000254 	.word	0x20000254

08018434 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8018434:	b158      	cbz	r0, 801844e <vTaskPlaceOnEventList+0x1a>
{
 8018436:	b510      	push	{r4, lr}
 8018438:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801843a:	4a09      	ldr	r2, [pc, #36]	@ (8018460 <vTaskPlaceOnEventList+0x2c>)
 801843c:	6811      	ldr	r1, [r2, #0]
 801843e:	3118      	adds	r1, #24
 8018440:	f7fe fddf 	bl	8017002 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018444:	2101      	movs	r1, #1
 8018446:	4620      	mov	r0, r4
 8018448:	f7ff fd62 	bl	8017f10 <prvAddCurrentTaskToDelayedList>
}
 801844c:	bd10      	pop	{r4, pc}
 801844e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018452:	f383 8811 	msr	BASEPRI, r3
 8018456:	f3bf 8f6f 	isb	sy
 801845a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 801845e:	e7fe      	b.n	801845e <vTaskPlaceOnEventList+0x2a>
 8018460:	20001ce8 	.word	0x20001ce8

08018464 <vTaskPlaceOnEventListRestricted>:
	{
 8018464:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8018466:	b170      	cbz	r0, 8018486 <vTaskPlaceOnEventListRestricted+0x22>
 8018468:	460d      	mov	r5, r1
 801846a:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801846c:	4a0a      	ldr	r2, [pc, #40]	@ (8018498 <vTaskPlaceOnEventListRestricted+0x34>)
 801846e:	6811      	ldr	r1, [r2, #0]
 8018470:	3118      	adds	r1, #24
 8018472:	f7fe fdbb 	bl	8016fec <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8018476:	b10c      	cbz	r4, 801847c <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8018478:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801847c:	4621      	mov	r1, r4
 801847e:	4628      	mov	r0, r5
 8018480:	f7ff fd46 	bl	8017f10 <prvAddCurrentTaskToDelayedList>
	}
 8018484:	bd38      	pop	{r3, r4, r5, pc}
 8018486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801848a:	f383 8811 	msr	BASEPRI, r3
 801848e:	f3bf 8f6f 	isb	sy
 8018492:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8018496:	e7fe      	b.n	8018496 <vTaskPlaceOnEventListRestricted+0x32>
 8018498:	20001ce8 	.word	0x20001ce8

0801849c <xTaskRemoveFromEventList>:
{
 801849c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801849e:	68c3      	ldr	r3, [r0, #12]
 80184a0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80184a2:	b324      	cbz	r4, 80184ee <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80184a4:	f104 0518 	add.w	r5, r4, #24
 80184a8:	4628      	mov	r0, r5
 80184aa:	f7fe fdc3 	bl	8017034 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80184ae:	4b18      	ldr	r3, [pc, #96]	@ (8018510 <xTaskRemoveFromEventList+0x74>)
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	bb2b      	cbnz	r3, 8018500 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80184b4:	1d25      	adds	r5, r4, #4
 80184b6:	4628      	mov	r0, r5
 80184b8:	f7fe fdbc 	bl	8017034 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80184bc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80184be:	4b15      	ldr	r3, [pc, #84]	@ (8018514 <xTaskRemoveFromEventList+0x78>)
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	4298      	cmp	r0, r3
 80184c4:	d901      	bls.n	80184ca <xTaskRemoveFromEventList+0x2e>
 80184c6:	4b13      	ldr	r3, [pc, #76]	@ (8018514 <xTaskRemoveFromEventList+0x78>)
 80184c8:	6018      	str	r0, [r3, #0]
 80184ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80184ce:	4629      	mov	r1, r5
 80184d0:	4b11      	ldr	r3, [pc, #68]	@ (8018518 <xTaskRemoveFromEventList+0x7c>)
 80184d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80184d6:	f7fe fd89 	bl	8016fec <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80184da:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80184dc:	4b0f      	ldr	r3, [pc, #60]	@ (801851c <xTaskRemoveFromEventList+0x80>)
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80184e2:	429a      	cmp	r2, r3
 80184e4:	d911      	bls.n	801850a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 80184e6:	2001      	movs	r0, #1
 80184e8:	4b0d      	ldr	r3, [pc, #52]	@ (8018520 <xTaskRemoveFromEventList+0x84>)
 80184ea:	6018      	str	r0, [r3, #0]
}
 80184ec:	bd38      	pop	{r3, r4, r5, pc}
 80184ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80184f2:	f383 8811 	msr	BASEPRI, r3
 80184f6:	f3bf 8f6f 	isb	sy
 80184fa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80184fe:	e7fe      	b.n	80184fe <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018500:	4629      	mov	r1, r5
 8018502:	4808      	ldr	r0, [pc, #32]	@ (8018524 <xTaskRemoveFromEventList+0x88>)
 8018504:	f7fe fd72 	bl	8016fec <vListInsertEnd>
 8018508:	e7e7      	b.n	80184da <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 801850a:	2000      	movs	r0, #0
	return xReturn;
 801850c:	e7ee      	b.n	80184ec <xTaskRemoveFromEventList+0x50>
 801850e:	bf00      	nop
 8018510:	200017ec 	.word	0x200017ec
 8018514:	2000180c 	.word	0x2000180c
 8018518:	20001888 	.word	0x20001888
 801851c:	20001ce8 	.word	0x20001ce8
 8018520:	20001800 	.word	0x20001800
 8018524:	20001844 	.word	0x20001844

08018528 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018528:	4b03      	ldr	r3, [pc, #12]	@ (8018538 <vTaskInternalSetTimeOutState+0x10>)
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801852e:	4b03      	ldr	r3, [pc, #12]	@ (801853c <vTaskInternalSetTimeOutState+0x14>)
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	6043      	str	r3, [r0, #4]
}
 8018534:	4770      	bx	lr
 8018536:	bf00      	nop
 8018538:	200017fc 	.word	0x200017fc
 801853c:	20001810 	.word	0x20001810

08018540 <xTaskCheckForTimeOut>:
{
 8018540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8018542:	b1c8      	cbz	r0, 8018578 <xTaskCheckForTimeOut+0x38>
 8018544:	460c      	mov	r4, r1
 8018546:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8018548:	b1f9      	cbz	r1, 801858a <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 801854a:	f000 fbdb 	bl	8018d04 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 801854e:	4b1b      	ldr	r3, [pc, #108]	@ (80185bc <xTaskCheckForTimeOut+0x7c>)
 8018550:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018552:	686b      	ldr	r3, [r5, #4]
 8018554:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8018556:	6822      	ldr	r2, [r4, #0]
 8018558:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801855c:	d026      	beq.n	80185ac <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801855e:	4e18      	ldr	r6, [pc, #96]	@ (80185c0 <xTaskCheckForTimeOut+0x80>)
 8018560:	6836      	ldr	r6, [r6, #0]
 8018562:	682f      	ldr	r7, [r5, #0]
 8018564:	42b7      	cmp	r7, r6
 8018566:	d001      	beq.n	801856c <xTaskCheckForTimeOut+0x2c>
 8018568:	428b      	cmp	r3, r1
 801856a:	d924      	bls.n	80185b6 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801856c:	4282      	cmp	r2, r0
 801856e:	d815      	bhi.n	801859c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8018570:	2300      	movs	r3, #0
 8018572:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8018574:	2401      	movs	r4, #1
 8018576:	e01a      	b.n	80185ae <xTaskCheckForTimeOut+0x6e>
 8018578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801857c:	f383 8811 	msr	BASEPRI, r3
 8018580:	f3bf 8f6f 	isb	sy
 8018584:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8018588:	e7fe      	b.n	8018588 <xTaskCheckForTimeOut+0x48>
 801858a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801858e:	f383 8811 	msr	BASEPRI, r3
 8018592:	f3bf 8f6f 	isb	sy
 8018596:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 801859a:	e7fe      	b.n	801859a <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 801859c:	1a5b      	subs	r3, r3, r1
 801859e:	4413      	add	r3, r2
 80185a0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80185a2:	4628      	mov	r0, r5
 80185a4:	f7ff ffc0 	bl	8018528 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80185a8:	2400      	movs	r4, #0
 80185aa:	e000      	b.n	80185ae <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 80185ac:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80185ae:	f000 fbcb 	bl	8018d48 <vPortExitCritical>
}
 80185b2:	4620      	mov	r0, r4
 80185b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 80185b6:	2401      	movs	r4, #1
 80185b8:	e7f9      	b.n	80185ae <xTaskCheckForTimeOut+0x6e>
 80185ba:	bf00      	nop
 80185bc:	20001810 	.word	0x20001810
 80185c0:	200017fc 	.word	0x200017fc

080185c4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80185c4:	4b01      	ldr	r3, [pc, #4]	@ (80185cc <vTaskMissedYield+0x8>)
 80185c6:	2201      	movs	r2, #1
 80185c8:	601a      	str	r2, [r3, #0]
}
 80185ca:	4770      	bx	lr
 80185cc:	20001800 	.word	0x20001800

080185d0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80185d0:	4b01      	ldr	r3, [pc, #4]	@ (80185d8 <xTaskGetCurrentTaskHandle+0x8>)
 80185d2:	6818      	ldr	r0, [r3, #0]
	}
 80185d4:	4770      	bx	lr
 80185d6:	bf00      	nop
 80185d8:	20001ce8 	.word	0x20001ce8

080185dc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80185dc:	4b05      	ldr	r3, [pc, #20]	@ (80185f4 <xTaskGetSchedulerState+0x18>)
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	b133      	cbz	r3, 80185f0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80185e2:	4b05      	ldr	r3, [pc, #20]	@ (80185f8 <xTaskGetSchedulerState+0x1c>)
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	b10b      	cbz	r3, 80185ec <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80185e8:	2000      	movs	r0, #0
	}
 80185ea:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80185ec:	2002      	movs	r0, #2
 80185ee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80185f0:	2001      	movs	r0, #1
 80185f2:	4770      	bx	lr
 80185f4:	20001808 	.word	0x20001808
 80185f8:	200017ec 	.word	0x200017ec

080185fc <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80185fc:	2800      	cmp	r0, #0
 80185fe:	d03e      	beq.n	801867e <xTaskPriorityInherit+0x82>
	{
 8018600:	b538      	push	{r3, r4, r5, lr}
 8018602:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8018604:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018606:	4a20      	ldr	r2, [pc, #128]	@ (8018688 <xTaskPriorityInherit+0x8c>)
 8018608:	6812      	ldr	r2, [r2, #0]
 801860a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801860c:	4293      	cmp	r3, r2
 801860e:	d22e      	bcs.n	801866e <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018610:	6982      	ldr	r2, [r0, #24]
 8018612:	2a00      	cmp	r2, #0
 8018614:	db05      	blt.n	8018622 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018616:	4a1c      	ldr	r2, [pc, #112]	@ (8018688 <xTaskPriorityInherit+0x8c>)
 8018618:	6812      	ldr	r2, [r2, #0]
 801861a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801861c:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8018620:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8018622:	6961      	ldr	r1, [r4, #20]
 8018624:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8018628:	4a18      	ldr	r2, [pc, #96]	@ (801868c <xTaskPriorityInherit+0x90>)
 801862a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801862e:	4299      	cmp	r1, r3
 8018630:	d005      	beq.n	801863e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018632:	4b15      	ldr	r3, [pc, #84]	@ (8018688 <xTaskPriorityInherit+0x8c>)
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018638:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 801863a:	2001      	movs	r0, #1
	}
 801863c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801863e:	1d25      	adds	r5, r4, #4
 8018640:	4628      	mov	r0, r5
 8018642:	f7fe fcf7 	bl	8017034 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018646:	4b10      	ldr	r3, [pc, #64]	@ (8018688 <xTaskPriorityInherit+0x8c>)
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801864c:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801864e:	4b10      	ldr	r3, [pc, #64]	@ (8018690 <xTaskPriorityInherit+0x94>)
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	4298      	cmp	r0, r3
 8018654:	d901      	bls.n	801865a <xTaskPriorityInherit+0x5e>
 8018656:	4b0e      	ldr	r3, [pc, #56]	@ (8018690 <xTaskPriorityInherit+0x94>)
 8018658:	6018      	str	r0, [r3, #0]
 801865a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801865e:	4629      	mov	r1, r5
 8018660:	4b0a      	ldr	r3, [pc, #40]	@ (801868c <xTaskPriorityInherit+0x90>)
 8018662:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018666:	f7fe fcc1 	bl	8016fec <vListInsertEnd>
				xReturn = pdTRUE;
 801866a:	2001      	movs	r0, #1
 801866c:	e7e6      	b.n	801863c <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801866e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8018670:	4b05      	ldr	r3, [pc, #20]	@ (8018688 <xTaskPriorityInherit+0x8c>)
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018676:	429a      	cmp	r2, r3
 8018678:	d303      	bcc.n	8018682 <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 801867a:	2000      	movs	r0, #0
 801867c:	e7de      	b.n	801863c <xTaskPriorityInherit+0x40>
 801867e:	2000      	movs	r0, #0
	}
 8018680:	4770      	bx	lr
					xReturn = pdTRUE;
 8018682:	2001      	movs	r0, #1
		return xReturn;
 8018684:	e7da      	b.n	801863c <xTaskPriorityInherit+0x40>
 8018686:	bf00      	nop
 8018688:	20001ce8 	.word	0x20001ce8
 801868c:	20001888 	.word	0x20001888
 8018690:	2000180c 	.word	0x2000180c

08018694 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8018694:	2800      	cmp	r0, #0
 8018696:	d03b      	beq.n	8018710 <xTaskPriorityDisinherit+0x7c>
	{
 8018698:	b538      	push	{r3, r4, r5, lr}
 801869a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 801869c:	4b1e      	ldr	r3, [pc, #120]	@ (8018718 <xTaskPriorityDisinherit+0x84>)
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	4283      	cmp	r3, r0
 80186a2:	d008      	beq.n	80186b6 <xTaskPriorityDisinherit+0x22>
 80186a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80186a8:	f383 8811 	msr	BASEPRI, r3
 80186ac:	f3bf 8f6f 	isb	sy
 80186b0:	f3bf 8f4f 	dsb	sy
 80186b4:	e7fe      	b.n	80186b4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80186b6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80186b8:	b943      	cbnz	r3, 80186cc <xTaskPriorityDisinherit+0x38>
 80186ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80186be:	f383 8811 	msr	BASEPRI, r3
 80186c2:	f3bf 8f6f 	isb	sy
 80186c6:	f3bf 8f4f 	dsb	sy
 80186ca:	e7fe      	b.n	80186ca <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80186cc:	3b01      	subs	r3, #1
 80186ce:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80186d0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80186d2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80186d4:	4291      	cmp	r1, r2
 80186d6:	d01d      	beq.n	8018714 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80186d8:	b10b      	cbz	r3, 80186de <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 80186da:	2000      	movs	r0, #0
	}
 80186dc:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80186de:	1d05      	adds	r5, r0, #4
 80186e0:	4628      	mov	r0, r5
 80186e2:	f7fe fca7 	bl	8017034 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80186e6:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80186e8:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80186ea:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 80186ee:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80186f0:	4b0a      	ldr	r3, [pc, #40]	@ (801871c <xTaskPriorityDisinherit+0x88>)
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	4298      	cmp	r0, r3
 80186f6:	d901      	bls.n	80186fc <xTaskPriorityDisinherit+0x68>
 80186f8:	4b08      	ldr	r3, [pc, #32]	@ (801871c <xTaskPriorityDisinherit+0x88>)
 80186fa:	6018      	str	r0, [r3, #0]
 80186fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018700:	4629      	mov	r1, r5
 8018702:	4b07      	ldr	r3, [pc, #28]	@ (8018720 <xTaskPriorityDisinherit+0x8c>)
 8018704:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018708:	f7fe fc70 	bl	8016fec <vListInsertEnd>
					xReturn = pdTRUE;
 801870c:	2001      	movs	r0, #1
 801870e:	e7e5      	b.n	80186dc <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8018710:	2000      	movs	r0, #0
	}
 8018712:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8018714:	2000      	movs	r0, #0
 8018716:	e7e1      	b.n	80186dc <xTaskPriorityDisinherit+0x48>
 8018718:	20001ce8 	.word	0x20001ce8
 801871c:	2000180c 	.word	0x2000180c
 8018720:	20001888 	.word	0x20001888

08018724 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8018724:	2800      	cmp	r0, #0
 8018726:	d046      	beq.n	80187b6 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 8018728:	b538      	push	{r3, r4, r5, lr}
 801872a:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 801872c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801872e:	b943      	cbnz	r3, 8018742 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8018730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018734:	f383 8811 	msr	BASEPRI, r3
 8018738:	f3bf 8f6f 	isb	sy
 801873c:	f3bf 8f4f 	dsb	sy
 8018740:	e7fe      	b.n	8018740 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018742:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8018744:	428a      	cmp	r2, r1
 8018746:	d200      	bcs.n	801874a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018748:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 801874a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801874c:	4291      	cmp	r1, r2
 801874e:	d001      	beq.n	8018754 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018750:	2b01      	cmp	r3, #1
 8018752:	d000      	beq.n	8018756 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8018754:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8018756:	4b18      	ldr	r3, [pc, #96]	@ (80187b8 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	42a3      	cmp	r3, r4
 801875c:	d022      	beq.n	80187a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 801875e:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018760:	69a3      	ldr	r3, [r4, #24]
 8018762:	2b00      	cmp	r3, #0
 8018764:	db02      	blt.n	801876c <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018766:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 801876a:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801876c:	6962      	ldr	r2, [r4, #20]
 801876e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8018772:	4b12      	ldr	r3, [pc, #72]	@ (80187bc <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8018774:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8018778:	429a      	cmp	r2, r3
 801877a:	d1eb      	bne.n	8018754 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801877c:	1d25      	adds	r5, r4, #4
 801877e:	4628      	mov	r0, r5
 8018780:	f7fe fc58 	bl	8017034 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8018784:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8018786:	4b0e      	ldr	r3, [pc, #56]	@ (80187c0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	4298      	cmp	r0, r3
 801878c:	d901      	bls.n	8018792 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 801878e:	4b0c      	ldr	r3, [pc, #48]	@ (80187c0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8018790:	6018      	str	r0, [r3, #0]
 8018792:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018796:	4629      	mov	r1, r5
 8018798:	4b08      	ldr	r3, [pc, #32]	@ (80187bc <vTaskPriorityDisinheritAfterTimeout+0x98>)
 801879a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801879e:	f7fe fc25 	bl	8016fec <vListInsertEnd>
	}
 80187a2:	e7d7      	b.n	8018754 <vTaskPriorityDisinheritAfterTimeout+0x30>
 80187a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80187a8:	f383 8811 	msr	BASEPRI, r3
 80187ac:	f3bf 8f6f 	isb	sy
 80187b0:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 80187b4:	e7fe      	b.n	80187b4 <vTaskPriorityDisinheritAfterTimeout+0x90>
 80187b6:	4770      	bx	lr
 80187b8:	20001ce8 	.word	0x20001ce8
 80187bc:	20001888 	.word	0x20001888
 80187c0:	2000180c 	.word	0x2000180c

080187c4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80187c4:	4b05      	ldr	r3, [pc, #20]	@ (80187dc <pvTaskIncrementMutexHeldCount+0x18>)
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	b123      	cbz	r3, 80187d4 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 80187ca:	4b04      	ldr	r3, [pc, #16]	@ (80187dc <pvTaskIncrementMutexHeldCount+0x18>)
 80187cc:	681a      	ldr	r2, [r3, #0]
 80187ce:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80187d0:	3301      	adds	r3, #1
 80187d2:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 80187d4:	4b01      	ldr	r3, [pc, #4]	@ (80187dc <pvTaskIncrementMutexHeldCount+0x18>)
 80187d6:	6818      	ldr	r0, [r3, #0]
	}
 80187d8:	4770      	bx	lr
 80187da:	bf00      	nop
 80187dc:	20001ce8 	.word	0x20001ce8

080187e0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80187e0:	4b06      	ldr	r3, [pc, #24]	@ (80187fc <prvGetNextExpireTime+0x1c>)
 80187e2:	681a      	ldr	r2, [r3, #0]
 80187e4:	6813      	ldr	r3, [r2, #0]
 80187e6:	b92b      	cbnz	r3, 80187f4 <prvGetNextExpireTime+0x14>
 80187e8:	2301      	movs	r3, #1
 80187ea:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 80187ec:	b923      	cbnz	r3, 80187f8 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80187ee:	68d3      	ldr	r3, [r2, #12]
 80187f0:	6818      	ldr	r0, [r3, #0]
 80187f2:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80187f4:	2300      	movs	r3, #0
 80187f6:	e7f8      	b.n	80187ea <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80187f8:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 80187fa:	4770      	bx	lr
 80187fc:	20001dec 	.word	0x20001dec

08018800 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018800:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018802:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018804:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018806:	4291      	cmp	r1, r2
 8018808:	d80c      	bhi.n	8018824 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801880a:	1ad2      	subs	r2, r2, r3
 801880c:	6983      	ldr	r3, [r0, #24]
 801880e:	429a      	cmp	r2, r3
 8018810:	d301      	bcc.n	8018816 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018812:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8018814:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018816:	1d01      	adds	r1, r0, #4
 8018818:	4b09      	ldr	r3, [pc, #36]	@ (8018840 <prvInsertTimerInActiveList+0x40>)
 801881a:	6818      	ldr	r0, [r3, #0]
 801881c:	f7fe fbf1 	bl	8017002 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8018820:	2000      	movs	r0, #0
 8018822:	e7f7      	b.n	8018814 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018824:	429a      	cmp	r2, r3
 8018826:	d201      	bcs.n	801882c <prvInsertTimerInActiveList+0x2c>
 8018828:	4299      	cmp	r1, r3
 801882a:	d206      	bcs.n	801883a <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801882c:	1d01      	adds	r1, r0, #4
 801882e:	4b05      	ldr	r3, [pc, #20]	@ (8018844 <prvInsertTimerInActiveList+0x44>)
 8018830:	6818      	ldr	r0, [r3, #0]
 8018832:	f7fe fbe6 	bl	8017002 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8018836:	2000      	movs	r0, #0
 8018838:	e7ec      	b.n	8018814 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 801883a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 801883c:	e7ea      	b.n	8018814 <prvInsertTimerInActiveList+0x14>
 801883e:	bf00      	nop
 8018840:	20001de8 	.word	0x20001de8
 8018844:	20001dec 	.word	0x20001dec

08018848 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018848:	b530      	push	{r4, r5, lr}
 801884a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801884c:	f000 fa5a 	bl	8018d04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018850:	4b11      	ldr	r3, [pc, #68]	@ (8018898 <prvCheckForValidListAndQueue+0x50>)
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	b11b      	cbz	r3, 801885e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018856:	f000 fa77 	bl	8018d48 <vPortExitCritical>
}
 801885a:	b003      	add	sp, #12
 801885c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 801885e:	4d0f      	ldr	r5, [pc, #60]	@ (801889c <prvCheckForValidListAndQueue+0x54>)
 8018860:	4628      	mov	r0, r5
 8018862:	f7fe fbb5 	bl	8016fd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018866:	4c0e      	ldr	r4, [pc, #56]	@ (80188a0 <prvCheckForValidListAndQueue+0x58>)
 8018868:	4620      	mov	r0, r4
 801886a:	f7fe fbb1 	bl	8016fd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801886e:	4b0d      	ldr	r3, [pc, #52]	@ (80188a4 <prvCheckForValidListAndQueue+0x5c>)
 8018870:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018872:	4b0d      	ldr	r3, [pc, #52]	@ (80188a8 <prvCheckForValidListAndQueue+0x60>)
 8018874:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018876:	2300      	movs	r3, #0
 8018878:	9300      	str	r3, [sp, #0]
 801887a:	4b0c      	ldr	r3, [pc, #48]	@ (80188ac <prvCheckForValidListAndQueue+0x64>)
 801887c:	4a0c      	ldr	r2, [pc, #48]	@ (80188b0 <prvCheckForValidListAndQueue+0x68>)
 801887e:	2110      	movs	r1, #16
 8018880:	200a      	movs	r0, #10
 8018882:	f7fe fce5 	bl	8017250 <xQueueGenericCreateStatic>
 8018886:	4b04      	ldr	r3, [pc, #16]	@ (8018898 <prvCheckForValidListAndQueue+0x50>)
 8018888:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 801888a:	2800      	cmp	r0, #0
 801888c:	d0e3      	beq.n	8018856 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801888e:	4909      	ldr	r1, [pc, #36]	@ (80188b4 <prvCheckForValidListAndQueue+0x6c>)
 8018890:	f7ff f984 	bl	8017b9c <vQueueAddToRegistry>
 8018894:	e7df      	b.n	8018856 <prvCheckForValidListAndQueue+0xe>
 8018896:	bf00      	nop
 8018898:	20001de4 	.word	0x20001de4
 801889c:	20001e04 	.word	0x20001e04
 80188a0:	20001df0 	.word	0x20001df0
 80188a4:	20001dec 	.word	0x20001dec
 80188a8:	20001de8 	.word	0x20001de8
 80188ac:	20001cec 	.word	0x20001cec
 80188b0:	20001d3c 	.word	0x20001d3c
 80188b4:	080354ec 	.word	0x080354ec

080188b8 <xTimerCreateTimerTask>:
{
 80188b8:	b510      	push	{r4, lr}
 80188ba:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80188bc:	f7ff ffc4 	bl	8018848 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80188c0:	4b12      	ldr	r3, [pc, #72]	@ (801890c <xTimerCreateTimerTask+0x54>)
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	b1cb      	cbz	r3, 80188fa <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80188c6:	2400      	movs	r4, #0
 80188c8:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80188ca:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80188cc:	aa07      	add	r2, sp, #28
 80188ce:	a906      	add	r1, sp, #24
 80188d0:	a805      	add	r0, sp, #20
 80188d2:	f7fe fb71 	bl	8016fb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80188d6:	9b05      	ldr	r3, [sp, #20]
 80188d8:	9302      	str	r3, [sp, #8]
 80188da:	9b06      	ldr	r3, [sp, #24]
 80188dc:	9301      	str	r3, [sp, #4]
 80188de:	2302      	movs	r3, #2
 80188e0:	9300      	str	r3, [sp, #0]
 80188e2:	4623      	mov	r3, r4
 80188e4:	9a07      	ldr	r2, [sp, #28]
 80188e6:	490a      	ldr	r1, [pc, #40]	@ (8018910 <xTimerCreateTimerTask+0x58>)
 80188e8:	480a      	ldr	r0, [pc, #40]	@ (8018914 <xTimerCreateTimerTask+0x5c>)
 80188ea:	f7ff fb4f 	bl	8017f8c <xTaskCreateStatic>
 80188ee:	4b0a      	ldr	r3, [pc, #40]	@ (8018918 <xTimerCreateTimerTask+0x60>)
 80188f0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80188f2:	b110      	cbz	r0, 80188fa <xTimerCreateTimerTask+0x42>
}
 80188f4:	2001      	movs	r0, #1
 80188f6:	b008      	add	sp, #32
 80188f8:	bd10      	pop	{r4, pc}
 80188fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80188fe:	f383 8811 	msr	BASEPRI, r3
 8018902:	f3bf 8f6f 	isb	sy
 8018906:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 801890a:	e7fe      	b.n	801890a <xTimerCreateTimerTask+0x52>
 801890c:	20001de4 	.word	0x20001de4
 8018910:	080354f4 	.word	0x080354f4
 8018914:	08018c1d 	.word	0x08018c1d
 8018918:	20001de0 	.word	0x20001de0

0801891c <xTimerGenericCommand>:
	configASSERT( xTimer );
 801891c:	b1b8      	cbz	r0, 801894e <xTimerGenericCommand+0x32>
 801891e:	469c      	mov	ip, r3
 8018920:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8018922:	4818      	ldr	r0, [pc, #96]	@ (8018984 <xTimerGenericCommand+0x68>)
 8018924:	6800      	ldr	r0, [r0, #0]
 8018926:	b358      	cbz	r0, 8018980 <xTimerGenericCommand+0x64>
{
 8018928:	b500      	push	{lr}
 801892a:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 801892c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801892e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018930:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018932:	2905      	cmp	r1, #5
 8018934:	dc1c      	bgt.n	8018970 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018936:	f7ff fe51 	bl	80185dc <xTaskGetSchedulerState>
 801893a:	2802      	cmp	r0, #2
 801893c:	d010      	beq.n	8018960 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801893e:	2300      	movs	r3, #0
 8018940:	461a      	mov	r2, r3
 8018942:	4669      	mov	r1, sp
 8018944:	480f      	ldr	r0, [pc, #60]	@ (8018984 <xTimerGenericCommand+0x68>)
 8018946:	6800      	ldr	r0, [r0, #0]
 8018948:	f7fe fcf0 	bl	801732c <xQueueGenericSend>
 801894c:	e015      	b.n	801897a <xTimerGenericCommand+0x5e>
 801894e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018952:	f383 8811 	msr	BASEPRI, r3
 8018956:	f3bf 8f6f 	isb	sy
 801895a:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 801895e:	e7fe      	b.n	801895e <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018960:	2300      	movs	r3, #0
 8018962:	9a06      	ldr	r2, [sp, #24]
 8018964:	4669      	mov	r1, sp
 8018966:	4807      	ldr	r0, [pc, #28]	@ (8018984 <xTimerGenericCommand+0x68>)
 8018968:	6800      	ldr	r0, [r0, #0]
 801896a:	f7fe fcdf 	bl	801732c <xQueueGenericSend>
 801896e:	e004      	b.n	801897a <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018970:	2300      	movs	r3, #0
 8018972:	4662      	mov	r2, ip
 8018974:	4669      	mov	r1, sp
 8018976:	f7fe fde3 	bl	8017540 <xQueueGenericSendFromISR>
}
 801897a:	b005      	add	sp, #20
 801897c:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8018980:	2000      	movs	r0, #0
}
 8018982:	4770      	bx	lr
 8018984:	20001de4 	.word	0x20001de4

08018988 <prvSwitchTimerLists>:
{
 8018988:	b570      	push	{r4, r5, r6, lr}
 801898a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801898c:	4b1b      	ldr	r3, [pc, #108]	@ (80189fc <prvSwitchTimerLists+0x74>)
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	681a      	ldr	r2, [r3, #0]
 8018992:	b362      	cbz	r2, 80189ee <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018994:	68db      	ldr	r3, [r3, #12]
 8018996:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018998:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801899a:	1d25      	adds	r5, r4, #4
 801899c:	4628      	mov	r0, r5
 801899e:	f7fe fb49 	bl	8017034 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80189a2:	6a23      	ldr	r3, [r4, #32]
 80189a4:	4620      	mov	r0, r4
 80189a6:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80189a8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80189ac:	f013 0f04 	tst.w	r3, #4
 80189b0:	d0ec      	beq.n	801898c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80189b2:	69a3      	ldr	r3, [r4, #24]
 80189b4:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 80189b6:	429e      	cmp	r6, r3
 80189b8:	d207      	bcs.n	80189ca <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80189ba:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80189bc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80189be:	4629      	mov	r1, r5
 80189c0:	4b0e      	ldr	r3, [pc, #56]	@ (80189fc <prvSwitchTimerLists+0x74>)
 80189c2:	6818      	ldr	r0, [r3, #0]
 80189c4:	f7fe fb1d 	bl	8017002 <vListInsert>
 80189c8:	e7e0      	b.n	801898c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80189ca:	2100      	movs	r1, #0
 80189cc:	9100      	str	r1, [sp, #0]
 80189ce:	460b      	mov	r3, r1
 80189d0:	4632      	mov	r2, r6
 80189d2:	4620      	mov	r0, r4
 80189d4:	f7ff ffa2 	bl	801891c <xTimerGenericCommand>
				configASSERT( xResult );
 80189d8:	2800      	cmp	r0, #0
 80189da:	d1d7      	bne.n	801898c <prvSwitchTimerLists+0x4>
 80189dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80189e0:	f383 8811 	msr	BASEPRI, r3
 80189e4:	f3bf 8f6f 	isb	sy
 80189e8:	f3bf 8f4f 	dsb	sy
 80189ec:	e7fe      	b.n	80189ec <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 80189ee:	4a04      	ldr	r2, [pc, #16]	@ (8018a00 <prvSwitchTimerLists+0x78>)
 80189f0:	6810      	ldr	r0, [r2, #0]
 80189f2:	4902      	ldr	r1, [pc, #8]	@ (80189fc <prvSwitchTimerLists+0x74>)
 80189f4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80189f6:	6013      	str	r3, [r2, #0]
}
 80189f8:	b002      	add	sp, #8
 80189fa:	bd70      	pop	{r4, r5, r6, pc}
 80189fc:	20001dec 	.word	0x20001dec
 8018a00:	20001de8 	.word	0x20001de8

08018a04 <prvSampleTimeNow>:
{
 8018a04:	b538      	push	{r3, r4, r5, lr}
 8018a06:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8018a08:	f7ff fb8e 	bl	8018128 <xTaskGetTickCount>
 8018a0c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8018a0e:	4b07      	ldr	r3, [pc, #28]	@ (8018a2c <prvSampleTimeNow+0x28>)
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	4283      	cmp	r3, r0
 8018a14:	d805      	bhi.n	8018a22 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8018a16:	2300      	movs	r3, #0
 8018a18:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8018a1a:	4b04      	ldr	r3, [pc, #16]	@ (8018a2c <prvSampleTimeNow+0x28>)
 8018a1c:	601c      	str	r4, [r3, #0]
}
 8018a1e:	4620      	mov	r0, r4
 8018a20:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8018a22:	f7ff ffb1 	bl	8018988 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018a26:	2301      	movs	r3, #1
 8018a28:	602b      	str	r3, [r5, #0]
 8018a2a:	e7f6      	b.n	8018a1a <prvSampleTimeNow+0x16>
 8018a2c:	20001ddc 	.word	0x20001ddc

08018a30 <prvProcessExpiredTimer>:
{
 8018a30:	b570      	push	{r4, r5, r6, lr}
 8018a32:	b082      	sub	sp, #8
 8018a34:	4606      	mov	r6, r0
 8018a36:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a38:	4917      	ldr	r1, [pc, #92]	@ (8018a98 <prvProcessExpiredTimer+0x68>)
 8018a3a:	6809      	ldr	r1, [r1, #0]
 8018a3c:	68c9      	ldr	r1, [r1, #12]
 8018a3e:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018a40:	1d20      	adds	r0, r4, #4
 8018a42:	f7fe faf7 	bl	8017034 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018a46:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 8018a4a:	f01c 0f04 	tst.w	ip, #4
 8018a4e:	d108      	bne.n	8018a62 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018a50:	f02c 0c01 	bic.w	ip, ip, #1
 8018a54:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018a58:	6a23      	ldr	r3, [r4, #32]
 8018a5a:	4620      	mov	r0, r4
 8018a5c:	4798      	blx	r3
}
 8018a5e:	b002      	add	sp, #8
 8018a60:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018a62:	69a1      	ldr	r1, [r4, #24]
 8018a64:	4633      	mov	r3, r6
 8018a66:	462a      	mov	r2, r5
 8018a68:	4431      	add	r1, r6
 8018a6a:	4620      	mov	r0, r4
 8018a6c:	f7ff fec8 	bl	8018800 <prvInsertTimerInActiveList>
 8018a70:	2800      	cmp	r0, #0
 8018a72:	d0f1      	beq.n	8018a58 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018a74:	2100      	movs	r1, #0
 8018a76:	9100      	str	r1, [sp, #0]
 8018a78:	460b      	mov	r3, r1
 8018a7a:	4632      	mov	r2, r6
 8018a7c:	4620      	mov	r0, r4
 8018a7e:	f7ff ff4d 	bl	801891c <xTimerGenericCommand>
			configASSERT( xResult );
 8018a82:	2800      	cmp	r0, #0
 8018a84:	d1e8      	bne.n	8018a58 <prvProcessExpiredTimer+0x28>
 8018a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a8a:	f383 8811 	msr	BASEPRI, r3
 8018a8e:	f3bf 8f6f 	isb	sy
 8018a92:	f3bf 8f4f 	dsb	sy
 8018a96:	e7fe      	b.n	8018a96 <prvProcessExpiredTimer+0x66>
 8018a98:	20001dec 	.word	0x20001dec

08018a9c <prvProcessTimerOrBlockTask>:
{
 8018a9c:	b570      	push	{r4, r5, r6, lr}
 8018a9e:	b082      	sub	sp, #8
 8018aa0:	4606      	mov	r6, r0
 8018aa2:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8018aa4:	f7ff fb38 	bl	8018118 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018aa8:	a801      	add	r0, sp, #4
 8018aaa:	f7ff ffab 	bl	8018a04 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8018aae:	9b01      	ldr	r3, [sp, #4]
 8018ab0:	bb33      	cbnz	r3, 8018b00 <prvProcessTimerOrBlockTask+0x64>
 8018ab2:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018ab4:	b9e4      	cbnz	r4, 8018af0 <prvProcessTimerOrBlockTask+0x54>
 8018ab6:	42b0      	cmp	r0, r6
 8018ab8:	d213      	bcs.n	8018ae2 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018aba:	4622      	mov	r2, r4
 8018abc:	1b71      	subs	r1, r6, r5
 8018abe:	4b12      	ldr	r3, [pc, #72]	@ (8018b08 <prvProcessTimerOrBlockTask+0x6c>)
 8018ac0:	6818      	ldr	r0, [r3, #0]
 8018ac2:	f7ff f87f 	bl	8017bc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018ac6:	f7ff fbc1 	bl	801824c <xTaskResumeAll>
 8018aca:	b9d8      	cbnz	r0, 8018b04 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8018acc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018ad4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018ad8:	f3bf 8f4f 	dsb	sy
 8018adc:	f3bf 8f6f 	isb	sy
 8018ae0:	e010      	b.n	8018b04 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8018ae2:	f7ff fbb3 	bl	801824c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018ae6:	4629      	mov	r1, r5
 8018ae8:	4630      	mov	r0, r6
 8018aea:	f7ff ffa1 	bl	8018a30 <prvProcessExpiredTimer>
 8018aee:	e009      	b.n	8018b04 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018af0:	4a06      	ldr	r2, [pc, #24]	@ (8018b0c <prvProcessTimerOrBlockTask+0x70>)
 8018af2:	6812      	ldr	r2, [r2, #0]
 8018af4:	6812      	ldr	r2, [r2, #0]
 8018af6:	b90a      	cbnz	r2, 8018afc <prvProcessTimerOrBlockTask+0x60>
 8018af8:	2401      	movs	r4, #1
 8018afa:	e7de      	b.n	8018aba <prvProcessTimerOrBlockTask+0x1e>
 8018afc:	461c      	mov	r4, r3
 8018afe:	e7dc      	b.n	8018aba <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 8018b00:	f7ff fba4 	bl	801824c <xTaskResumeAll>
}
 8018b04:	b002      	add	sp, #8
 8018b06:	bd70      	pop	{r4, r5, r6, pc}
 8018b08:	20001de4 	.word	0x20001de4
 8018b0c:	20001de8 	.word	0x20001de8

08018b10 <prvProcessReceivedCommands>:
{
 8018b10:	b510      	push	{r4, lr}
 8018b12:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018b14:	e002      	b.n	8018b1c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018b16:	9b04      	ldr	r3, [sp, #16]
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	da0f      	bge.n	8018b3c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018b1c:	2200      	movs	r2, #0
 8018b1e:	a904      	add	r1, sp, #16
 8018b20:	4b3d      	ldr	r3, [pc, #244]	@ (8018c18 <prvProcessReceivedCommands+0x108>)
 8018b22:	6818      	ldr	r0, [r3, #0]
 8018b24:	f7fe fd73 	bl	801760e <xQueueReceive>
 8018b28:	2800      	cmp	r0, #0
 8018b2a:	d073      	beq.n	8018c14 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018b2c:	9b04      	ldr	r3, [sp, #16]
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	daf1      	bge.n	8018b16 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018b32:	9907      	ldr	r1, [sp, #28]
 8018b34:	9806      	ldr	r0, [sp, #24]
 8018b36:	9b05      	ldr	r3, [sp, #20]
 8018b38:	4798      	blx	r3
 8018b3a:	e7ec      	b.n	8018b16 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018b3c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018b3e:	6963      	ldr	r3, [r4, #20]
 8018b40:	b113      	cbz	r3, 8018b48 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018b42:	1d20      	adds	r0, r4, #4
 8018b44:	f7fe fa76 	bl	8017034 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018b48:	a803      	add	r0, sp, #12
 8018b4a:	f7ff ff5b 	bl	8018a04 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8018b4e:	9b04      	ldr	r3, [sp, #16]
 8018b50:	2b09      	cmp	r3, #9
 8018b52:	d8e3      	bhi.n	8018b1c <prvProcessReceivedCommands+0xc>
 8018b54:	e8df f003 	tbb	[pc, r3]
 8018b58:	30050505 	.word	0x30050505
 8018b5c:	05055037 	.word	0x05055037
 8018b60:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018b62:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8018b66:	f043 0301 	orr.w	r3, r3, #1
 8018b6a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018b6e:	9b05      	ldr	r3, [sp, #20]
 8018b70:	69a1      	ldr	r1, [r4, #24]
 8018b72:	4602      	mov	r2, r0
 8018b74:	4419      	add	r1, r3
 8018b76:	4620      	mov	r0, r4
 8018b78:	f7ff fe42 	bl	8018800 <prvInsertTimerInActiveList>
 8018b7c:	2800      	cmp	r0, #0
 8018b7e:	d0cd      	beq.n	8018b1c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018b80:	6a23      	ldr	r3, [r4, #32]
 8018b82:	4620      	mov	r0, r4
 8018b84:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018b86:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8018b8a:	f013 0f04 	tst.w	r3, #4
 8018b8e:	d0c5      	beq.n	8018b1c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018b90:	69a2      	ldr	r2, [r4, #24]
 8018b92:	2100      	movs	r1, #0
 8018b94:	9100      	str	r1, [sp, #0]
 8018b96:	460b      	mov	r3, r1
 8018b98:	9805      	ldr	r0, [sp, #20]
 8018b9a:	4402      	add	r2, r0
 8018b9c:	4620      	mov	r0, r4
 8018b9e:	f7ff febd 	bl	801891c <xTimerGenericCommand>
							configASSERT( xResult );
 8018ba2:	2800      	cmp	r0, #0
 8018ba4:	d1ba      	bne.n	8018b1c <prvProcessReceivedCommands+0xc>
 8018ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018baa:	f383 8811 	msr	BASEPRI, r3
 8018bae:	f3bf 8f6f 	isb	sy
 8018bb2:	f3bf 8f4f 	dsb	sy
 8018bb6:	e7fe      	b.n	8018bb6 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018bb8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8018bbc:	f023 0301 	bic.w	r3, r3, #1
 8018bc0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 8018bc4:	e7aa      	b.n	8018b1c <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018bc6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8018bca:	f043 0301 	orr.w	r3, r3, #1
 8018bce:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018bd2:	9905      	ldr	r1, [sp, #20]
 8018bd4:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018bd6:	b131      	cbz	r1, 8018be6 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018bd8:	4603      	mov	r3, r0
 8018bda:	4602      	mov	r2, r0
 8018bdc:	4401      	add	r1, r0
 8018bde:	4620      	mov	r0, r4
 8018be0:	f7ff fe0e 	bl	8018800 <prvInsertTimerInActiveList>
					break;
 8018be4:	e79a      	b.n	8018b1c <prvProcessReceivedCommands+0xc>
 8018be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018bea:	f383 8811 	msr	BASEPRI, r3
 8018bee:	f3bf 8f6f 	isb	sy
 8018bf2:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018bf6:	e7fe      	b.n	8018bf6 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018bf8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8018bfc:	f013 0f02 	tst.w	r3, #2
 8018c00:	d004      	beq.n	8018c0c <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018c02:	f023 0301 	bic.w	r3, r3, #1
 8018c06:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8018c0a:	e787      	b.n	8018b1c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8018c0c:	4620      	mov	r0, r4
 8018c0e:	f000 fab5 	bl	801917c <vPortFree>
 8018c12:	e783      	b.n	8018b1c <prvProcessReceivedCommands+0xc>
}
 8018c14:	b008      	add	sp, #32
 8018c16:	bd10      	pop	{r4, pc}
 8018c18:	20001de4 	.word	0x20001de4

08018c1c <prvTimerTask>:
{
 8018c1c:	b500      	push	{lr}
 8018c1e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018c20:	a801      	add	r0, sp, #4
 8018c22:	f7ff fddd 	bl	80187e0 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018c26:	9901      	ldr	r1, [sp, #4]
 8018c28:	f7ff ff38 	bl	8018a9c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8018c2c:	f7ff ff70 	bl	8018b10 <prvProcessReceivedCommands>
	for( ;; )
 8018c30:	e7f6      	b.n	8018c20 <prvTimerTask+0x4>
	...

08018c34 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018c34:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8018c36:	2300      	movs	r3, #0
 8018c38:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8018c70 <prvTaskExitError+0x3c>)
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018c42:	d008      	beq.n	8018c56 <prvTaskExitError+0x22>
 8018c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c48:	f383 8811 	msr	BASEPRI, r3
 8018c4c:	f3bf 8f6f 	isb	sy
 8018c50:	f3bf 8f4f 	dsb	sy
 8018c54:	e7fe      	b.n	8018c54 <prvTaskExitError+0x20>
 8018c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c5a:	f383 8811 	msr	BASEPRI, r3
 8018c5e:	f3bf 8f6f 	isb	sy
 8018c62:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018c66:	9b01      	ldr	r3, [sp, #4]
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d0fc      	beq.n	8018c66 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018c6c:	b002      	add	sp, #8
 8018c6e:	4770      	bx	lr
 8018c70:	20000090 	.word	0x20000090

08018c74 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018c74:	4808      	ldr	r0, [pc, #32]	@ (8018c98 <prvPortStartFirstTask+0x24>)
 8018c76:	6800      	ldr	r0, [r0, #0]
 8018c78:	6800      	ldr	r0, [r0, #0]
 8018c7a:	f380 8808 	msr	MSP, r0
 8018c7e:	f04f 0000 	mov.w	r0, #0
 8018c82:	f380 8814 	msr	CONTROL, r0
 8018c86:	b662      	cpsie	i
 8018c88:	b661      	cpsie	f
 8018c8a:	f3bf 8f4f 	dsb	sy
 8018c8e:	f3bf 8f6f 	isb	sy
 8018c92:	df00      	svc	0
 8018c94:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018c96:	0000      	.short	0x0000
 8018c98:	e000ed08 	.word	0xe000ed08

08018c9c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018c9c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8018cac <vPortEnableVFP+0x10>
 8018ca0:	6801      	ldr	r1, [r0, #0]
 8018ca2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8018ca6:	6001      	str	r1, [r0, #0]
 8018ca8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018caa:	0000      	.short	0x0000
 8018cac:	e000ed88 	.word	0xe000ed88

08018cb0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018cb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8018cb4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018cb8:	f021 0101 	bic.w	r1, r1, #1
 8018cbc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018cc0:	4b05      	ldr	r3, [pc, #20]	@ (8018cd8 <pxPortInitialiseStack+0x28>)
 8018cc2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018cc6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018cca:	f06f 0302 	mvn.w	r3, #2
 8018cce:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8018cd2:	3844      	subs	r0, #68	@ 0x44
 8018cd4:	4770      	bx	lr
 8018cd6:	bf00      	nop
 8018cd8:	08018c35 	.word	0x08018c35
 8018cdc:	00000000 	.word	0x00000000

08018ce0 <SVC_Handler>:
	__asm volatile (
 8018ce0:	4b07      	ldr	r3, [pc, #28]	@ (8018d00 <pxCurrentTCBConst2>)
 8018ce2:	6819      	ldr	r1, [r3, #0]
 8018ce4:	6808      	ldr	r0, [r1, #0]
 8018ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cea:	f380 8809 	msr	PSP, r0
 8018cee:	f3bf 8f6f 	isb	sy
 8018cf2:	f04f 0000 	mov.w	r0, #0
 8018cf6:	f380 8811 	msr	BASEPRI, r0
 8018cfa:	4770      	bx	lr
 8018cfc:	f3af 8000 	nop.w

08018d00 <pxCurrentTCBConst2>:
 8018d00:	20001ce8 	.word	0x20001ce8

08018d04 <vPortEnterCritical>:
 8018d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d08:	f383 8811 	msr	BASEPRI, r3
 8018d0c:	f3bf 8f6f 	isb	sy
 8018d10:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8018d14:	4a0b      	ldr	r2, [pc, #44]	@ (8018d44 <vPortEnterCritical+0x40>)
 8018d16:	6813      	ldr	r3, [r2, #0]
 8018d18:	3301      	adds	r3, #1
 8018d1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8018d1c:	2b01      	cmp	r3, #1
 8018d1e:	d000      	beq.n	8018d22 <vPortEnterCritical+0x1e>
}
 8018d20:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018d22:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018d26:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8018d2a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 8018d2e:	d0f7      	beq.n	8018d20 <vPortEnterCritical+0x1c>
 8018d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d34:	f383 8811 	msr	BASEPRI, r3
 8018d38:	f3bf 8f6f 	isb	sy
 8018d3c:	f3bf 8f4f 	dsb	sy
 8018d40:	e7fe      	b.n	8018d40 <vPortEnterCritical+0x3c>
 8018d42:	bf00      	nop
 8018d44:	20000090 	.word	0x20000090

08018d48 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8018d48:	4b09      	ldr	r3, [pc, #36]	@ (8018d70 <vPortExitCritical+0x28>)
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	b943      	cbnz	r3, 8018d60 <vPortExitCritical+0x18>
 8018d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d52:	f383 8811 	msr	BASEPRI, r3
 8018d56:	f3bf 8f6f 	isb	sy
 8018d5a:	f3bf 8f4f 	dsb	sy
 8018d5e:	e7fe      	b.n	8018d5e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8018d60:	3b01      	subs	r3, #1
 8018d62:	4a03      	ldr	r2, [pc, #12]	@ (8018d70 <vPortExitCritical+0x28>)
 8018d64:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018d66:	b90b      	cbnz	r3, 8018d6c <vPortExitCritical+0x24>
	__asm volatile
 8018d68:	f383 8811 	msr	BASEPRI, r3
}
 8018d6c:	4770      	bx	lr
 8018d6e:	bf00      	nop
 8018d70:	20000090 	.word	0x20000090
	...

08018d80 <PendSV_Handler>:
	__asm volatile
 8018d80:	f3ef 8009 	mrs	r0, PSP
 8018d84:	f3bf 8f6f 	isb	sy
 8018d88:	4b15      	ldr	r3, [pc, #84]	@ (8018de0 <pxCurrentTCBConst>)
 8018d8a:	681a      	ldr	r2, [r3, #0]
 8018d8c:	f01e 0f10 	tst.w	lr, #16
 8018d90:	bf08      	it	eq
 8018d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d9a:	6010      	str	r0, [r2, #0]
 8018d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018da0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8018da4:	f380 8811 	msr	BASEPRI, r0
 8018da8:	f3bf 8f4f 	dsb	sy
 8018dac:	f3bf 8f6f 	isb	sy
 8018db0:	f7ff faee 	bl	8018390 <vTaskSwitchContext>
 8018db4:	f04f 0000 	mov.w	r0, #0
 8018db8:	f380 8811 	msr	BASEPRI, r0
 8018dbc:	bc09      	pop	{r0, r3}
 8018dbe:	6819      	ldr	r1, [r3, #0]
 8018dc0:	6808      	ldr	r0, [r1, #0]
 8018dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dc6:	f01e 0f10 	tst.w	lr, #16
 8018dca:	bf08      	it	eq
 8018dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018dd0:	f380 8809 	msr	PSP, r0
 8018dd4:	f3bf 8f6f 	isb	sy
 8018dd8:	4770      	bx	lr
 8018dda:	bf00      	nop
 8018ddc:	f3af 8000 	nop.w

08018de0 <pxCurrentTCBConst>:
 8018de0:	20001ce8 	.word	0x20001ce8

08018de4 <xPortSysTickHandler>:
{
 8018de4:	b508      	push	{r3, lr}
	__asm volatile
 8018de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018dea:	f383 8811 	msr	BASEPRI, r3
 8018dee:	f3bf 8f6f 	isb	sy
 8018df2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8018df6:	f7ff f99d 	bl	8018134 <xTaskIncrementTick>
 8018dfa:	b128      	cbz	r0, 8018e08 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018dfc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018e00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018e04:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8018e08:	2300      	movs	r3, #0
 8018e0a:	f383 8811 	msr	BASEPRI, r3
}
 8018e0e:	bd08      	pop	{r3, pc}

08018e10 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018e10:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8018e14:	2300      	movs	r3, #0
 8018e16:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018e18:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018e1a:	4b05      	ldr	r3, [pc, #20]	@ (8018e30 <vPortSetupTimerInterrupt+0x20>)
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	4905      	ldr	r1, [pc, #20]	@ (8018e34 <vPortSetupTimerInterrupt+0x24>)
 8018e20:	fba1 1303 	umull	r1, r3, r1, r3
 8018e24:	099b      	lsrs	r3, r3, #6
 8018e26:	3b01      	subs	r3, #1
 8018e28:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018e2a:	2307      	movs	r3, #7
 8018e2c:	6113      	str	r3, [r2, #16]
}
 8018e2e:	4770      	bx	lr
 8018e30:	20000018 	.word	0x20000018
 8018e34:	10624dd3 	.word	0x10624dd3

08018e38 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018e38:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018e3c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8018e40:	4b3d      	ldr	r3, [pc, #244]	@ (8018f38 <xPortStartScheduler+0x100>)
 8018e42:	429a      	cmp	r2, r3
 8018e44:	d01c      	beq.n	8018e80 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018e46:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018e4a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8018e4e:	4b3b      	ldr	r3, [pc, #236]	@ (8018f3c <xPortStartScheduler+0x104>)
 8018e50:	429a      	cmp	r2, r3
 8018e52:	d01e      	beq.n	8018e92 <xPortStartScheduler+0x5a>
{
 8018e54:	b530      	push	{r4, r5, lr}
 8018e56:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018e58:	4b39      	ldr	r3, [pc, #228]	@ (8018f40 <xPortStartScheduler+0x108>)
 8018e5a:	781a      	ldrb	r2, [r3, #0]
 8018e5c:	b2d2      	uxtb	r2, r2
 8018e5e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018e60:	22ff      	movs	r2, #255	@ 0xff
 8018e62:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018e64:	781b      	ldrb	r3, [r3, #0]
 8018e66:	b2db      	uxtb	r3, r3
 8018e68:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018e6c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018e70:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8018e74:	4a33      	ldr	r2, [pc, #204]	@ (8018f44 <xPortStartScheduler+0x10c>)
 8018e76:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018e78:	4b33      	ldr	r3, [pc, #204]	@ (8018f48 <xPortStartScheduler+0x110>)
 8018e7a:	2207      	movs	r2, #7
 8018e7c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018e7e:	e01b      	b.n	8018eb8 <xPortStartScheduler+0x80>
	__asm volatile
 8018e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e84:	f383 8811 	msr	BASEPRI, r3
 8018e88:	f3bf 8f6f 	isb	sy
 8018e8c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018e90:	e7fe      	b.n	8018e90 <xPortStartScheduler+0x58>
 8018e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e96:	f383 8811 	msr	BASEPRI, r3
 8018e9a:	f3bf 8f6f 	isb	sy
 8018e9e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018ea2:	e7fe      	b.n	8018ea2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8018ea4:	4a28      	ldr	r2, [pc, #160]	@ (8018f48 <xPortStartScheduler+0x110>)
 8018ea6:	6813      	ldr	r3, [r2, #0]
 8018ea8:	3b01      	subs	r3, #1
 8018eaa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018eac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018eb0:	005b      	lsls	r3, r3, #1
 8018eb2:	b2db      	uxtb	r3, r3
 8018eb4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018eb8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018ebc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018ec0:	d1f0      	bne.n	8018ea4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018ec2:	4b21      	ldr	r3, [pc, #132]	@ (8018f48 <xPortStartScheduler+0x110>)
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	2b03      	cmp	r3, #3
 8018ec8:	d008      	beq.n	8018edc <xPortStartScheduler+0xa4>
 8018eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ece:	f383 8811 	msr	BASEPRI, r3
 8018ed2:	f3bf 8f6f 	isb	sy
 8018ed6:	f3bf 8f4f 	dsb	sy
 8018eda:	e7fe      	b.n	8018eda <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018edc:	021b      	lsls	r3, r3, #8
 8018ede:	4a1a      	ldr	r2, [pc, #104]	@ (8018f48 <xPortStartScheduler+0x110>)
 8018ee0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018ee2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8018ee6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018ee8:	9b01      	ldr	r3, [sp, #4]
 8018eea:	b2db      	uxtb	r3, r3
 8018eec:	4a14      	ldr	r2, [pc, #80]	@ (8018f40 <xPortStartScheduler+0x108>)
 8018eee:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018ef0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8018ef4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8018ef8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8018efc:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018f00:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8018f04:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8018f08:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8018f0c:	f7ff ff80 	bl	8018e10 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8018f10:	2500      	movs	r5, #0
 8018f12:	4b0e      	ldr	r3, [pc, #56]	@ (8018f4c <xPortStartScheduler+0x114>)
 8018f14:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8018f16:	f7ff fec1 	bl	8018c9c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018f1a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8018f1e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8018f22:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8018f26:	f7ff fea5 	bl	8018c74 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8018f2a:	f7ff fa31 	bl	8018390 <vTaskSwitchContext>
	prvTaskExitError();
 8018f2e:	f7ff fe81 	bl	8018c34 <prvTaskExitError>
}
 8018f32:	4628      	mov	r0, r5
 8018f34:	b003      	add	sp, #12
 8018f36:	bd30      	pop	{r4, r5, pc}
 8018f38:	410fc271 	.word	0x410fc271
 8018f3c:	410fc270 	.word	0x410fc270
 8018f40:	e000e400 	.word	0xe000e400
 8018f44:	20001e1c 	.word	0x20001e1c
 8018f48:	20001e18 	.word	0x20001e18
 8018f4c:	20000090 	.word	0x20000090

08018f50 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018f50:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018f54:	2b0f      	cmp	r3, #15
 8018f56:	d90f      	bls.n	8018f78 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018f58:	4a11      	ldr	r2, [pc, #68]	@ (8018fa0 <vPortValidateInterruptPriority+0x50>)
 8018f5a:	5c9b      	ldrb	r3, [r3, r2]
 8018f5c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018f5e:	4a11      	ldr	r2, [pc, #68]	@ (8018fa4 <vPortValidateInterruptPriority+0x54>)
 8018f60:	7812      	ldrb	r2, [r2, #0]
 8018f62:	429a      	cmp	r2, r3
 8018f64:	d908      	bls.n	8018f78 <vPortValidateInterruptPriority+0x28>
 8018f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f6a:	f383 8811 	msr	BASEPRI, r3
 8018f6e:	f3bf 8f6f 	isb	sy
 8018f72:	f3bf 8f4f 	dsb	sy
 8018f76:	e7fe      	b.n	8018f76 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018f78:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018f7c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8018f80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8018f84:	4a08      	ldr	r2, [pc, #32]	@ (8018fa8 <vPortValidateInterruptPriority+0x58>)
 8018f86:	6812      	ldr	r2, [r2, #0]
 8018f88:	4293      	cmp	r3, r2
 8018f8a:	d908      	bls.n	8018f9e <vPortValidateInterruptPriority+0x4e>
 8018f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f90:	f383 8811 	msr	BASEPRI, r3
 8018f94:	f3bf 8f6f 	isb	sy
 8018f98:	f3bf 8f4f 	dsb	sy
 8018f9c:	e7fe      	b.n	8018f9c <vPortValidateInterruptPriority+0x4c>
	}
 8018f9e:	4770      	bx	lr
 8018fa0:	e000e3f0 	.word	0xe000e3f0
 8018fa4:	20001e1c 	.word	0x20001e1c
 8018fa8:	20001e18 	.word	0x20001e18

08018fac <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018fac:	4a12      	ldr	r2, [pc, #72]	@ (8018ff8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018fae:	f012 0f07 	tst.w	r2, #7
 8018fb2:	d01f      	beq.n	8018ff4 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018fb4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018fb6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8018fba:	f5c1 33b0 	rsb	r3, r1, #90112	@ 0x16000
 8018fbe:	33f8      	adds	r3, #248	@ 0xf8
 8018fc0:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018fc2:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018fc4:	480d      	ldr	r0, [pc, #52]	@ (8018ffc <prvHeapInit+0x50>)
 8018fc6:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018fc8:	2100      	movs	r1, #0
 8018fca:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018fcc:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8018fce:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018fd0:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8018fd4:	480a      	ldr	r0, [pc, #40]	@ (8019000 <prvHeapInit+0x54>)
 8018fd6:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8018fd8:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8018fda:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018fdc:	1a99      	subs	r1, r3, r2
 8018fde:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018fe0:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018fe2:	4b08      	ldr	r3, [pc, #32]	@ (8019004 <prvHeapInit+0x58>)
 8018fe4:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018fe6:	4b08      	ldr	r3, [pc, #32]	@ (8019008 <prvHeapInit+0x5c>)
 8018fe8:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018fea:	4b08      	ldr	r3, [pc, #32]	@ (801900c <prvHeapInit+0x60>)
 8018fec:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8018ff0:	601a      	str	r2, [r3, #0]
}
 8018ff2:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018ff4:	4b06      	ldr	r3, [pc, #24]	@ (8019010 <prvHeapInit+0x64>)
 8018ff6:	e7e5      	b.n	8018fc4 <prvHeapInit+0x18>
 8018ff8:	20001e40 	.word	0x20001e40
 8018ffc:	20001e38 	.word	0x20001e38
 8019000:	20001e34 	.word	0x20001e34
 8019004:	20001e2c 	.word	0x20001e2c
 8019008:	20001e30 	.word	0x20001e30
 801900c:	20001e20 	.word	0x20001e20
 8019010:	000160f8 	.word	0x000160f8

08019014 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019014:	4b16      	ldr	r3, [pc, #88]	@ (8019070 <prvInsertBlockIntoFreeList+0x5c>)
 8019016:	461a      	mov	r2, r3
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	4283      	cmp	r3, r0
 801901c:	d3fb      	bcc.n	8019016 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801901e:	6851      	ldr	r1, [r2, #4]
 8019020:	eb02 0c01 	add.w	ip, r2, r1
 8019024:	4584      	cmp	ip, r0
 8019026:	d009      	beq.n	801903c <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019028:	6841      	ldr	r1, [r0, #4]
 801902a:	eb00 0c01 	add.w	ip, r0, r1
 801902e:	4563      	cmp	r3, ip
 8019030:	d009      	beq.n	8019046 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019032:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019034:	4290      	cmp	r0, r2
 8019036:	d019      	beq.n	801906c <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019038:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 801903a:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801903c:	6840      	ldr	r0, [r0, #4]
 801903e:	4401      	add	r1, r0
 8019040:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8019042:	4610      	mov	r0, r2
 8019044:	e7f0      	b.n	8019028 <prvInsertBlockIntoFreeList+0x14>
{
 8019046:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019048:	4c0a      	ldr	r4, [pc, #40]	@ (8019074 <prvInsertBlockIntoFreeList+0x60>)
 801904a:	6824      	ldr	r4, [r4, #0]
 801904c:	42a3      	cmp	r3, r4
 801904e:	d00b      	beq.n	8019068 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019050:	685b      	ldr	r3, [r3, #4]
 8019052:	4419      	add	r1, r3
 8019054:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019056:	6813      	ldr	r3, [r2, #0]
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 801905c:	4290      	cmp	r0, r2
 801905e:	d000      	beq.n	8019062 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019060:	6010      	str	r0, [r2, #0]
	}
}
 8019062:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019066:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019068:	6004      	str	r4, [r0, #0]
 801906a:	e7f7      	b.n	801905c <prvInsertBlockIntoFreeList+0x48>
 801906c:	4770      	bx	lr
 801906e:	bf00      	nop
 8019070:	20001e38 	.word	0x20001e38
 8019074:	20001e34 	.word	0x20001e34

08019078 <pvPortMalloc>:
{
 8019078:	b538      	push	{r3, r4, r5, lr}
 801907a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801907c:	f7ff f84c 	bl	8018118 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8019080:	4b38      	ldr	r3, [pc, #224]	@ (8019164 <pvPortMalloc+0xec>)
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	b1b3      	cbz	r3, 80190b4 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019086:	4b38      	ldr	r3, [pc, #224]	@ (8019168 <pvPortMalloc+0xf0>)
 8019088:	681b      	ldr	r3, [r3, #0]
 801908a:	421c      	tst	r4, r3
 801908c:	d150      	bne.n	8019130 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 801908e:	2c00      	cmp	r4, #0
 8019090:	d050      	beq.n	8019134 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 8019092:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019096:	f014 0f07 	tst.w	r4, #7
 801909a:	d002      	beq.n	80190a2 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801909c:	f022 0207 	bic.w	r2, r2, #7
 80190a0:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80190a2:	2a00      	cmp	r2, #0
 80190a4:	d055      	beq.n	8019152 <pvPortMalloc+0xda>
 80190a6:	4b31      	ldr	r3, [pc, #196]	@ (801916c <pvPortMalloc+0xf4>)
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	4293      	cmp	r3, r2
 80190ac:	d353      	bcc.n	8019156 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 80190ae:	4930      	ldr	r1, [pc, #192]	@ (8019170 <pvPortMalloc+0xf8>)
 80190b0:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80190b2:	e004      	b.n	80190be <pvPortMalloc+0x46>
			prvHeapInit();
 80190b4:	f7ff ff7a 	bl	8018fac <prvHeapInit>
 80190b8:	e7e5      	b.n	8019086 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 80190ba:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80190bc:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80190be:	6863      	ldr	r3, [r4, #4]
 80190c0:	4293      	cmp	r3, r2
 80190c2:	d202      	bcs.n	80190ca <pvPortMalloc+0x52>
 80190c4:	6823      	ldr	r3, [r4, #0]
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d1f7      	bne.n	80190ba <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 80190ca:	4b26      	ldr	r3, [pc, #152]	@ (8019164 <pvPortMalloc+0xec>)
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	42a3      	cmp	r3, r4
 80190d0:	d043      	beq.n	801915a <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80190d2:	680d      	ldr	r5, [r1, #0]
 80190d4:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80190d6:	6823      	ldr	r3, [r4, #0]
 80190d8:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80190da:	6863      	ldr	r3, [r4, #4]
 80190dc:	1a9b      	subs	r3, r3, r2
 80190de:	2b10      	cmp	r3, #16
 80190e0:	d910      	bls.n	8019104 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80190e2:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80190e4:	f010 0f07 	tst.w	r0, #7
 80190e8:	d008      	beq.n	80190fc <pvPortMalloc+0x84>
 80190ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190ee:	f383 8811 	msr	BASEPRI, r3
 80190f2:	f3bf 8f6f 	isb	sy
 80190f6:	f3bf 8f4f 	dsb	sy
 80190fa:	e7fe      	b.n	80190fa <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80190fc:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80190fe:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019100:	f7ff ff88 	bl	8019014 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019104:	6862      	ldr	r2, [r4, #4]
 8019106:	4919      	ldr	r1, [pc, #100]	@ (801916c <pvPortMalloc+0xf4>)
 8019108:	680b      	ldr	r3, [r1, #0]
 801910a:	1a9b      	subs	r3, r3, r2
 801910c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801910e:	4919      	ldr	r1, [pc, #100]	@ (8019174 <pvPortMalloc+0xfc>)
 8019110:	6809      	ldr	r1, [r1, #0]
 8019112:	428b      	cmp	r3, r1
 8019114:	d201      	bcs.n	801911a <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019116:	4917      	ldr	r1, [pc, #92]	@ (8019174 <pvPortMalloc+0xfc>)
 8019118:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801911a:	4b13      	ldr	r3, [pc, #76]	@ (8019168 <pvPortMalloc+0xf0>)
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	4313      	orrs	r3, r2
 8019120:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019122:	2300      	movs	r3, #0
 8019124:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8019126:	4a14      	ldr	r2, [pc, #80]	@ (8019178 <pvPortMalloc+0x100>)
 8019128:	6813      	ldr	r3, [r2, #0]
 801912a:	3301      	adds	r3, #1
 801912c:	6013      	str	r3, [r2, #0]
 801912e:	e002      	b.n	8019136 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8019130:	2500      	movs	r5, #0
 8019132:	e000      	b.n	8019136 <pvPortMalloc+0xbe>
 8019134:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8019136:	f7ff f889 	bl	801824c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801913a:	f015 0f07 	tst.w	r5, #7
 801913e:	d00e      	beq.n	801915e <pvPortMalloc+0xe6>
 8019140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019144:	f383 8811 	msr	BASEPRI, r3
 8019148:	f3bf 8f6f 	isb	sy
 801914c:	f3bf 8f4f 	dsb	sy
 8019150:	e7fe      	b.n	8019150 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8019152:	2500      	movs	r5, #0
 8019154:	e7ef      	b.n	8019136 <pvPortMalloc+0xbe>
 8019156:	2500      	movs	r5, #0
 8019158:	e7ed      	b.n	8019136 <pvPortMalloc+0xbe>
 801915a:	2500      	movs	r5, #0
 801915c:	e7eb      	b.n	8019136 <pvPortMalloc+0xbe>
}
 801915e:	4628      	mov	r0, r5
 8019160:	bd38      	pop	{r3, r4, r5, pc}
 8019162:	bf00      	nop
 8019164:	20001e34 	.word	0x20001e34
 8019168:	20001e20 	.word	0x20001e20
 801916c:	20001e30 	.word	0x20001e30
 8019170:	20001e38 	.word	0x20001e38
 8019174:	20001e2c 	.word	0x20001e2c
 8019178:	20001e28 	.word	0x20001e28

0801917c <vPortFree>:
	if( pv != NULL )
 801917c:	2800      	cmp	r0, #0
 801917e:	d034      	beq.n	80191ea <vPortFree+0x6e>
{
 8019180:	b538      	push	{r3, r4, r5, lr}
 8019182:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8019184:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019188:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801918c:	4a17      	ldr	r2, [pc, #92]	@ (80191ec <vPortFree+0x70>)
 801918e:	6812      	ldr	r2, [r2, #0]
 8019190:	4213      	tst	r3, r2
 8019192:	d108      	bne.n	80191a6 <vPortFree+0x2a>
 8019194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019198:	f383 8811 	msr	BASEPRI, r3
 801919c:	f3bf 8f6f 	isb	sy
 80191a0:	f3bf 8f4f 	dsb	sy
 80191a4:	e7fe      	b.n	80191a4 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80191a6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80191aa:	b141      	cbz	r1, 80191be <vPortFree+0x42>
 80191ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80191b0:	f383 8811 	msr	BASEPRI, r3
 80191b4:	f3bf 8f6f 	isb	sy
 80191b8:	f3bf 8f4f 	dsb	sy
 80191bc:	e7fe      	b.n	80191bc <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80191be:	ea23 0302 	bic.w	r3, r3, r2
 80191c2:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80191c6:	f7fe ffa7 	bl	8018118 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80191ca:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80191ce:	4a08      	ldr	r2, [pc, #32]	@ (80191f0 <vPortFree+0x74>)
 80191d0:	6813      	ldr	r3, [r2, #0]
 80191d2:	440b      	add	r3, r1
 80191d4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80191d6:	4628      	mov	r0, r5
 80191d8:	f7ff ff1c 	bl	8019014 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80191dc:	4a05      	ldr	r2, [pc, #20]	@ (80191f4 <vPortFree+0x78>)
 80191de:	6813      	ldr	r3, [r2, #0]
 80191e0:	3301      	adds	r3, #1
 80191e2:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80191e4:	f7ff f832 	bl	801824c <xTaskResumeAll>
}
 80191e8:	bd38      	pop	{r3, r4, r5, pc}
 80191ea:	4770      	bx	lr
 80191ec:	20001e20 	.word	0x20001e20
 80191f0:	20001e30 	.word	0x20001e30
 80191f4:	20001e24 	.word	0x20001e24

080191f8 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 80191f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191fa:	4607      	mov	r7, r0
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */

	vTaskSuspendAll();
 80191fc:	f7fe ff8c 	bl	8018118 <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 8019200:	4b17      	ldr	r3, [pc, #92]	@ (8019260 <vPortGetHeapStats+0x68>)
 8019202:	681b      	ldr	r3, [r3, #0]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 8019204:	b193      	cbz	r3, 801922c <vPortGetHeapStats+0x34>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 8019206:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801920a:	2500      	movs	r5, #0
 801920c:	462c      	mov	r4, r5
 801920e:	e004      	b.n	801921a <vPortGetHeapStats+0x22>
					xMinSize = pxBlock->xBlockSize;
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 8019210:	681b      	ldr	r3, [r3, #0]
			} while( pxBlock != pxEnd );
 8019212:	4a14      	ldr	r2, [pc, #80]	@ (8019264 <vPortGetHeapStats+0x6c>)
 8019214:	6812      	ldr	r2, [r2, #0]
 8019216:	429a      	cmp	r2, r3
 8019218:	d00c      	beq.n	8019234 <vPortGetHeapStats+0x3c>
				xBlocks++;
 801921a:	3401      	adds	r4, #1
				if( pxBlock->xBlockSize > xMaxSize )
 801921c:	685a      	ldr	r2, [r3, #4]
 801921e:	42aa      	cmp	r2, r5
 8019220:	d900      	bls.n	8019224 <vPortGetHeapStats+0x2c>
					xMaxSize = pxBlock->xBlockSize;
 8019222:	4615      	mov	r5, r2
				if( pxBlock->xBlockSize < xMinSize )
 8019224:	42b2      	cmp	r2, r6
 8019226:	d2f3      	bcs.n	8019210 <vPortGetHeapStats+0x18>
					xMinSize = pxBlock->xBlockSize;
 8019228:	4616      	mov	r6, r2
 801922a:	e7f1      	b.n	8019210 <vPortGetHeapStats+0x18>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801922c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8019230:	2500      	movs	r5, #0
 8019232:	462c      	mov	r4, r5
		}
	}
	xTaskResumeAll();
 8019234:	f7ff f80a 	bl	801824c <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 8019238:	607d      	str	r5, [r7, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 801923a:	60be      	str	r6, [r7, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 801923c:	60fc      	str	r4, [r7, #12]

	taskENTER_CRITICAL();
 801923e:	f7ff fd61 	bl	8018d04 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 8019242:	4b09      	ldr	r3, [pc, #36]	@ (8019268 <vPortGetHeapStats+0x70>)
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	603b      	str	r3, [r7, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 8019248:	4b08      	ldr	r3, [pc, #32]	@ (801926c <vPortGetHeapStats+0x74>)
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	617b      	str	r3, [r7, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 801924e:	4b08      	ldr	r3, [pc, #32]	@ (8019270 <vPortGetHeapStats+0x78>)
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	61bb      	str	r3, [r7, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 8019254:	4b07      	ldr	r3, [pc, #28]	@ (8019274 <vPortGetHeapStats+0x7c>)
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801925a:	f7ff fd75 	bl	8018d48 <vPortExitCritical>
}
 801925e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019260:	20001e38 	.word	0x20001e38
 8019264:	20001e34 	.word	0x20001e34
 8019268:	20001e30 	.word	0x20001e30
 801926c:	20001e28 	.word	0x20001e28
 8019270:	20001e24 	.word	0x20001e24
 8019274:	20001e2c 	.word	0x20001e2c

08019278 <block_device_sync>:
	return 0;
}

int block_device_sync(const struct lfs_config *c){
	return 0;
}
 8019278:	2000      	movs	r0, #0
 801927a:	4770      	bx	lr

0801927c <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 801927c:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801927e:	fb01 f400 	mul.w	r4, r1, r0
 8019282:	4620      	mov	r0, r4
 8019284:	f7ff fef8 	bl	8019078 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8019288:	4605      	mov	r5, r0
 801928a:	b118      	cbz	r0, 8019294 <mg_calloc+0x18>
 801928c:	4622      	mov	r2, r4
 801928e:	2100      	movs	r1, #0
 8019290:	f010 fbf6 	bl	8029a80 <memset>
}
 8019294:	4628      	mov	r0, r5
 8019296:	bd38      	pop	{r3, r4, r5, pc}

08019298 <block_device_read>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 8019298:	b508      	push	{r3, lr}
 801929a:	4684      	mov	ip, r0
 801929c:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801929e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 80192a2:	428b      	cmp	r3, r1
 80192a4:	d90a      	bls.n	80192bc <block_device_read+0x24>
 80192a6:	4696      	mov	lr, r2
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 80192a8:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 80192ac:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80192b0:	fb01 e103 	mla	r1, r1, r3, lr
 80192b4:	f7fb f989 	bl	80145ca <sFLASH_ReadBuffer>
}
 80192b8:	2000      	movs	r0, #0
 80192ba:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 80192bc:	4b03      	ldr	r3, [pc, #12]	@ (80192cc <block_device_read+0x34>)
 80192be:	4a04      	ldr	r2, [pc, #16]	@ (80192d0 <block_device_read+0x38>)
 80192c0:	f240 1111 	movw	r1, #273	@ 0x111
 80192c4:	4803      	ldr	r0, [pc, #12]	@ (80192d4 <block_device_read+0x3c>)
 80192c6:	f00d fe89 	bl	8026fdc <__assert_func>
 80192ca:	bf00      	nop
 80192cc:	080354fc 	.word	0x080354fc
 80192d0:	08035578 	.word	0x08035578
 80192d4:	08035514 	.word	0x08035514

080192d8 <block_device_erase>:
int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 80192d8:	b508      	push	{r3, lr}
	assert(block < c->block_count);
 80192da:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80192dc:	428b      	cmp	r3, r1
 80192de:	d906      	bls.n	80192ee <block_device_erase+0x16>
	sFLASH_EraseSector(block * (c -> block_size));
 80192e0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80192e2:	fb01 f000 	mul.w	r0, r1, r0
 80192e6:	f7fb faad 	bl	8014844 <sFLASH_EraseSector>
}
 80192ea:	2000      	movs	r0, #0
 80192ec:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 80192ee:	4b03      	ldr	r3, [pc, #12]	@ (80192fc <block_device_erase+0x24>)
 80192f0:	4a03      	ldr	r2, [pc, #12]	@ (8019300 <block_device_erase+0x28>)
 80192f2:	f240 1119 	movw	r1, #281	@ 0x119
 80192f6:	4803      	ldr	r0, [pc, #12]	@ (8019304 <block_device_erase+0x2c>)
 80192f8:	f00d fe70 	bl	8026fdc <__assert_func>
 80192fc:	080354fc 	.word	0x080354fc
 8019300:	08035564 	.word	0x08035564
 8019304:	08035514 	.word	0x08035514

08019308 <block_device_prog>:
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 8019308:	b508      	push	{r3, lr}
 801930a:	4684      	mov	ip, r0
 801930c:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801930e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 8019312:	428b      	cmp	r3, r1
 8019314:	d90a      	bls.n	801932c <block_device_prog+0x24>
 8019316:	4696      	mov	lr, r2
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 8019318:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801931c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019320:	fb01 e103 	mla	r1, r1, r3, lr
 8019324:	f7fb facc 	bl	80148c0 <sFLASH_WriteBuffer>
}
 8019328:	2000      	movs	r0, #0
 801932a:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801932c:	4b03      	ldr	r3, [pc, #12]	@ (801933c <block_device_prog+0x34>)
 801932e:	4a04      	ldr	r2, [pc, #16]	@ (8019340 <block_device_prog+0x38>)
 8019330:	f240 1121 	movw	r1, #289	@ 0x121
 8019334:	4803      	ldr	r0, [pc, #12]	@ (8019344 <block_device_prog+0x3c>)
 8019336:	f00d fe51 	bl	8026fdc <__assert_func>
 801933a:	bf00      	nop
 801933c:	080354fc 	.word	0x080354fc
 8019340:	08035550 	.word	0x08035550
 8019344:	08035514 	.word	0x08035514

08019348 <mg_fs_lfs_status>:
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 8019348:	b530      	push	{r4, r5, lr}
 801934a:	b0c3      	sub	sp, #268	@ 0x10c
 801934c:	460d      	mov	r5, r1
 801934e:	4614      	mov	r4, r2
    if (lfs_stat(&lfs, path, &info) == 0) {
 8019350:	466a      	mov	r2, sp
 8019352:	4601      	mov	r1, r0
 8019354:	480b      	ldr	r0, [pc, #44]	@ (8019384 <mg_fs_lfs_status+0x3c>)
 8019356:	f004 fd85 	bl	801de64 <lfs_stat>
 801935a:	b110      	cbz	r0, 8019362 <mg_fs_lfs_status+0x1a>
    return 0;
 801935c:	2000      	movs	r0, #0
}
 801935e:	b043      	add	sp, #268	@ 0x10c
 8019360:	bd30      	pop	{r4, r5, pc}
        if (size) *size = info.size;
 8019362:	b10d      	cbz	r5, 8019368 <mg_fs_lfs_status+0x20>
 8019364:	9b01      	ldr	r3, [sp, #4]
 8019366:	602b      	str	r3, [r5, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 8019368:	b11c      	cbz	r4, 8019372 <mg_fs_lfs_status+0x2a>
 801936a:	2200      	movs	r2, #0
 801936c:	2300      	movs	r3, #0
 801936e:	e9c4 2300 	strd	r2, r3, [r4]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 8019372:	f89d 3000 	ldrb.w	r3, [sp]
 8019376:	2b02      	cmp	r3, #2
 8019378:	d001      	beq.n	801937e <mg_fs_lfs_status+0x36>
 801937a:	2001      	movs	r0, #1
 801937c:	e7ef      	b.n	801935e <mg_fs_lfs_status+0x16>
 801937e:	2004      	movs	r0, #4
 8019380:	e7ed      	b.n	801935e <mg_fs_lfs_status+0x16>
 8019382:	bf00      	nop
 8019384:	20017f94 	.word	0x20017f94

08019388 <mg_fs_lfs_list>:
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 8019388:	b530      	push	{r4, r5, lr}
 801938a:	b0d1      	sub	sp, #324	@ 0x144
 801938c:	460d      	mov	r5, r1
 801938e:	4614      	mov	r4, r2
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 8019390:	4602      	mov	r2, r0
 8019392:	a901      	add	r1, sp, #4
 8019394:	480a      	ldr	r0, [pc, #40]	@ (80193c0 <mg_fs_lfs_list+0x38>)
 8019396:	f004 fe8b 	bl	801e0b0 <lfs_dir_open>
 801939a:	b120      	cbz	r0, 80193a6 <mg_fs_lfs_list+0x1e>
}
 801939c:	b051      	add	sp, #324	@ 0x144
 801939e:	bd30      	pop	{r4, r5, pc}
            fn(info.name, userdata);
 80193a0:	4621      	mov	r1, r4
 80193a2:	a810      	add	r0, sp, #64	@ 0x40
 80193a4:	47a8      	blx	r5
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 80193a6:	aa0e      	add	r2, sp, #56	@ 0x38
 80193a8:	a901      	add	r1, sp, #4
 80193aa:	4805      	ldr	r0, [pc, #20]	@ (80193c0 <mg_fs_lfs_list+0x38>)
 80193ac:	f004 febb 	bl	801e126 <lfs_dir_read>
 80193b0:	2800      	cmp	r0, #0
 80193b2:	dcf5      	bgt.n	80193a0 <mg_fs_lfs_list+0x18>
        lfs_dir_close(&lfs, &dir);
 80193b4:	a901      	add	r1, sp, #4
 80193b6:	4802      	ldr	r0, [pc, #8]	@ (80193c0 <mg_fs_lfs_list+0x38>)
 80193b8:	f004 fea2 	bl	801e100 <lfs_dir_close>
}
 80193bc:	e7ee      	b.n	801939c <mg_fs_lfs_list+0x14>
 80193be:	bf00      	nop
 80193c0:	20017f94 	.word	0x20017f94

080193c4 <mg_fs_lfs_open>:
void *mg_fs_lfs_open(const char *path, int flags) {
 80193c4:	b570      	push	{r4, r5, r6, lr}
 80193c6:	4605      	mov	r5, r0
 80193c8:	460c      	mov	r4, r1
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 80193ca:	2054      	movs	r0, #84	@ 0x54
 80193cc:	f7ff fe54 	bl	8019078 <pvPortMalloc>
    if (fd == NULL) return NULL;
 80193d0:	4606      	mov	r6, r0
 80193d2:	b188      	cbz	r0, 80193f8 <mg_fs_lfs_open+0x34>
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 80193d4:	f014 0301 	ands.w	r3, r4, #1
 80193d8:	d000      	beq.n	80193dc <mg_fs_lfs_open+0x18>
 80193da:	2301      	movs	r3, #1
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 80193dc:	f014 0f02 	tst.w	r4, #2
 80193e0:	d003      	beq.n	80193ea <mg_fs_lfs_open+0x26>
 80193e2:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 80193e6:	f043 0302 	orr.w	r3, r3, #2
    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 80193ea:	462a      	mov	r2, r5
 80193ec:	4631      	mov	r1, r6
 80193ee:	4806      	ldr	r0, [pc, #24]	@ (8019408 <mg_fs_lfs_open+0x44>)
 80193f0:	f004 fd4e 	bl	801de90 <lfs_file_open>
 80193f4:	2800      	cmp	r0, #0
 80193f6:	db01      	blt.n	80193fc <mg_fs_lfs_open+0x38>
}
 80193f8:	4630      	mov	r0, r6
 80193fa:	bd70      	pop	{r4, r5, r6, pc}
        free(fd);
 80193fc:	4630      	mov	r0, r6
 80193fe:	f7ff febd 	bl	801917c <vPortFree>
        return NULL;
 8019402:	2600      	movs	r6, #0
 8019404:	e7f8      	b.n	80193f8 <mg_fs_lfs_open+0x34>
 8019406:	bf00      	nop
 8019408:	20017f94 	.word	0x20017f94

0801940c <mg_fs_lfs_close>:
void mg_fs_lfs_close(void *fd) {
 801940c:	b510      	push	{r4, lr}
 801940e:	4604      	mov	r4, r0
    lfs_file_close(&lfs, &file->file);
 8019410:	4601      	mov	r1, r0
 8019412:	4803      	ldr	r0, [pc, #12]	@ (8019420 <mg_fs_lfs_close+0x14>)
 8019414:	f004 fd68 	bl	801dee8 <lfs_file_close>
    free(file);
 8019418:	4620      	mov	r0, r4
 801941a:	f7ff feaf 	bl	801917c <vPortFree>
}
 801941e:	bd10      	pop	{r4, pc}
 8019420:	20017f94 	.word	0x20017f94

08019424 <mg_fs_lfs_read>:
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 8019424:	b508      	push	{r3, lr}
 8019426:	4613      	mov	r3, r2
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 8019428:	460a      	mov	r2, r1
 801942a:	4601      	mov	r1, r0
 801942c:	4802      	ldr	r0, [pc, #8]	@ (8019438 <mg_fs_lfs_read+0x14>)
 801942e:	f004 fd81 	bl	801df34 <lfs_file_read>
}
 8019432:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8019436:	bd08      	pop	{r3, pc}
 8019438:	20017f94 	.word	0x20017f94

0801943c <mg_fs_lfs_write>:
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 801943c:	b508      	push	{r3, lr}
 801943e:	4613      	mov	r3, r2
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 8019440:	460a      	mov	r2, r1
 8019442:	4601      	mov	r1, r0
 8019444:	4802      	ldr	r0, [pc, #8]	@ (8019450 <mg_fs_lfs_write+0x14>)
 8019446:	f004 fda1 	bl	801df8c <lfs_file_write>
}
 801944a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801944e:	bd08      	pop	{r3, pc}
 8019450:	20017f94 	.word	0x20017f94

08019454 <mg_fs_lfs_seek>:
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 8019454:	b510      	push	{r4, lr}
 8019456:	4604      	mov	r4, r0
 8019458:	460a      	mov	r2, r1
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 801945a:	2300      	movs	r3, #0
 801945c:	4601      	mov	r1, r0
 801945e:	4809      	ldr	r0, [pc, #36]	@ (8019484 <mg_fs_lfs_seek+0x30>)
 8019460:	f004 fdc0 	bl	801dfe4 <lfs_file_seek>
 8019464:	2800      	cmp	r0, #0
 8019466:	db06      	blt.n	8019476 <mg_fs_lfs_seek+0x22>
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 8019468:	4621      	mov	r1, r4
 801946a:	4806      	ldr	r0, [pc, #24]	@ (8019484 <mg_fs_lfs_seek+0x30>)
 801946c:	f004 fde6 	bl	801e03c <lfs_file_tell>
     if (pos < 0) {
 8019470:	2800      	cmp	r0, #0
 8019472:	db03      	blt.n	801947c <mg_fs_lfs_seek+0x28>
}
 8019474:	bd10      	pop	{r4, pc}
        return (size_t)-1;  // Ошибка при перемещении
 8019476:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801947a:	e7fb      	b.n	8019474 <mg_fs_lfs_seek+0x20>
         return (size_t)-1;  // Ошибка при получении позиции
 801947c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019480:	e7f8      	b.n	8019474 <mg_fs_lfs_seek+0x20>
 8019482:	bf00      	nop
 8019484:	20017f94 	.word	0x20017f94

08019488 <mg_fs_lfs_rename>:
bool mg_fs_lfs_rename(const char *from, const char *to) {
 8019488:	b508      	push	{r3, lr}
 801948a:	460a      	mov	r2, r1
    return lfs_rename(&lfs, from, to) == 0;
 801948c:	4601      	mov	r1, r0
 801948e:	4803      	ldr	r0, [pc, #12]	@ (801949c <mg_fs_lfs_rename+0x14>)
 8019490:	f004 fcd3 	bl	801de3a <lfs_rename>
}
 8019494:	fab0 f080 	clz	r0, r0
 8019498:	0940      	lsrs	r0, r0, #5
 801949a:	bd08      	pop	{r3, pc}
 801949c:	20017f94 	.word	0x20017f94

080194a0 <mg_fs_lfs_remove>:
bool mg_fs_lfs_remove(const char *path) {
 80194a0:	b508      	push	{r3, lr}
 80194a2:	4601      	mov	r1, r0
    return lfs_remove(&lfs, path) == 0;
 80194a4:	4803      	ldr	r0, [pc, #12]	@ (80194b4 <mg_fs_lfs_remove+0x14>)
 80194a6:	f004 fcb5 	bl	801de14 <lfs_remove>
}
 80194aa:	fab0 f080 	clz	r0, r0
 80194ae:	0940      	lsrs	r0, r0, #5
 80194b0:	bd08      	pop	{r3, pc}
 80194b2:	bf00      	nop
 80194b4:	20017f94 	.word	0x20017f94

080194b8 <mg_fs_lfs_mkdir>:
bool mg_fs_lfs_mkdir(const char *path) {
 80194b8:	b508      	push	{r3, lr}
 80194ba:	4601      	mov	r1, r0
    return lfs_mkdir(&lfs, path) == 0;
 80194bc:	4803      	ldr	r0, [pc, #12]	@ (80194cc <mg_fs_lfs_mkdir+0x14>)
 80194be:	f004 fde3 	bl	801e088 <lfs_mkdir>
}
 80194c2:	fab0 f080 	clz	r0, r0
 80194c6:	0940      	lsrs	r0, r0, #5
 80194c8:	bd08      	pop	{r3, pc}
 80194ca:	bf00      	nop
 80194cc:	20017f94 	.word	0x20017f94

080194d0 <lfs_fs_ll_init>:
int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 80194d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194d4:	b090      	sub	sp, #64	@ 0x40
 80194d6:	4680      	mov	r8, r0
 80194d8:	460f      	mov	r7, r1
	flash_info = sFLASH_GetInfo();
 80194da:	4668      	mov	r0, sp
 80194dc:	f7fb f8ce 	bl	801467c <sFLASH_GetInfo>
	if (flash_info.flash_id == 0x0) return -1;
 80194e0:	9b00      	ldr	r3, [sp, #0]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d04b      	beq.n	801957e <lfs_fs_ll_init+0xae>
	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 80194e6:	f8bd 400a 	ldrh.w	r4, [sp, #10]
 80194ea:	4621      	mov	r1, r4
 80194ec:	2001      	movs	r0, #1
 80194ee:	f7ff fec5 	bl	801927c <mg_calloc>
 80194f2:	4605      	mov	r5, r0
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 80194f4:	4621      	mov	r1, r4
 80194f6:	2001      	movs	r0, #1
 80194f8:	f7ff fec0 	bl	801927c <mg_calloc>
 80194fc:	4606      	mov	r6, r0
	void * lookahead_buff = calloc(1, flash_info.page_size);
 80194fe:	4621      	mov	r1, r4
 8019500:	2001      	movs	r0, #1
 8019502:	f7ff febb 	bl	801927c <mg_calloc>
	if (!(read_buff || write_buff || lookahead_buff)){
 8019506:	b345      	cbz	r5, 801955a <lfs_fs_ll_init+0x8a>
	cfg.read_size         = flash_info.read_size;
 8019508:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801950c:	491d      	ldr	r1, [pc, #116]	@ (8019584 <lfs_fs_ll_init+0xb4>)
 801950e:	61cb      	str	r3, [r1, #28]
	cfg.prog_size         = flash_info.write_size;
 8019510:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019514:	620b      	str	r3, [r1, #32]
    cfg.block_size        = flash_info.erase_size;
 8019516:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801951a:	624b      	str	r3, [r1, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 801951c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8019520:	628b      	str	r3, [r1, #40]	@ 0x28
    cfg.lookahead_size    = flash_info.page_size;
 8019522:	634c      	str	r4, [r1, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 8019524:	630c      	str	r4, [r1, #48]	@ 0x30
    cfg.read_buffer       = read_buff;
 8019526:	63cd      	str	r5, [r1, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 8019528:	640e      	str	r6, [r1, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 801952a:	6448      	str	r0, [r1, #68]	@ 0x44
    cfg.read   = block_device_read;
 801952c:	4b16      	ldr	r3, [pc, #88]	@ (8019588 <lfs_fs_ll_init+0xb8>)
 801952e:	604b      	str	r3, [r1, #4]
    cfg.prog   = block_device_prog;
 8019530:	4b16      	ldr	r3, [pc, #88]	@ (801958c <lfs_fs_ll_init+0xbc>)
 8019532:	608b      	str	r3, [r1, #8]
    cfg.erase  = block_device_erase;
 8019534:	4b16      	ldr	r3, [pc, #88]	@ (8019590 <lfs_fs_ll_init+0xc0>)
 8019536:	60cb      	str	r3, [r1, #12]
    cfg.sync   = block_device_sync;
 8019538:	4b16      	ldr	r3, [pc, #88]	@ (8019594 <lfs_fs_ll_init+0xc4>)
 801953a:	610b      	str	r3, [r1, #16]
    cfg.lock 	= lock;
 801953c:	f8c1 8014 	str.w	r8, [r1, #20]
	cfg.unlock	= unlock;
 8019540:	618f      	str	r7, [r1, #24]
    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 8019542:	f242 7310 	movw	r3, #10000	@ 0x2710
 8019546:	62cb      	str	r3, [r1, #44]	@ 0x2c
    if (lfs_mount(&lfs, &cfg)< 0){
 8019548:	4813      	ldr	r0, [pc, #76]	@ (8019598 <lfs_fs_ll_init+0xc8>)
 801954a:	f004 fc50 	bl	801ddee <lfs_mount>
 801954e:	2800      	cmp	r0, #0
 8019550:	db0a      	blt.n	8019568 <lfs_fs_ll_init+0x98>
	return 0;
 8019552:	2000      	movs	r0, #0
}
 8019554:	b010      	add	sp, #64	@ 0x40
 8019556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(read_buff || write_buff || lookahead_buff)){
 801955a:	2e00      	cmp	r6, #0
 801955c:	d1d4      	bne.n	8019508 <lfs_fs_ll_init+0x38>
 801955e:	2800      	cmp	r0, #0
 8019560:	d1d2      	bne.n	8019508 <lfs_fs_ll_init+0x38>
		return -2;
 8019562:	f06f 0001 	mvn.w	r0, #1
 8019566:	e7f5      	b.n	8019554 <lfs_fs_ll_init+0x84>
    	lfs_format(&lfs, &cfg);
 8019568:	4d06      	ldr	r5, [pc, #24]	@ (8019584 <lfs_fs_ll_init+0xb4>)
 801956a:	4c0b      	ldr	r4, [pc, #44]	@ (8019598 <lfs_fs_ll_init+0xc8>)
 801956c:	4629      	mov	r1, r5
 801956e:	4620      	mov	r0, r4
 8019570:	f004 fc2a 	bl	801ddc8 <lfs_format>
    	return lfs_mount(&lfs, &cfg);
 8019574:	4629      	mov	r1, r5
 8019576:	4620      	mov	r0, r4
 8019578:	f004 fc39 	bl	801ddee <lfs_mount>
 801957c:	e7ea      	b.n	8019554 <lfs_fs_ll_init+0x84>
	if (flash_info.flash_id == 0x0) return -1;
 801957e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019582:	e7e7      	b.n	8019554 <lfs_fs_ll_init+0x84>
 8019584:	20017f38 	.word	0x20017f38
 8019588:	08019299 	.word	0x08019299
 801958c:	08019309 	.word	0x08019309
 8019590:	080192d9 	.word	0x080192d9
 8019594:	08019279 	.word	0x08019279
 8019598:	20017f94 	.word	0x20017f94

0801959c <lfs_pair_issync>:
}

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801959c:	6803      	ldr	r3, [r0, #0]
 801959e:	680a      	ldr	r2, [r1, #0]
 80195a0:	4293      	cmp	r3, r2
 80195a2:	d004      	beq.n	80195ae <lfs_pair_issync+0x12>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80195a4:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80195a6:	428b      	cmp	r3, r1
 80195a8:	d015      	beq.n	80195d6 <lfs_pair_issync+0x3a>
 80195aa:	2000      	movs	r0, #0
 80195ac:	4770      	bx	lr
        const lfs_block_t pairb[2]) {
 80195ae:	b430      	push	{r4, r5}
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80195b0:	6844      	ldr	r4, [r0, #4]
 80195b2:	684d      	ldr	r5, [r1, #4]
 80195b4:	42ac      	cmp	r4, r5
 80195b6:	d00a      	beq.n	80195ce <lfs_pair_issync+0x32>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80195b8:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80195ba:	428b      	cmp	r3, r1
 80195bc:	d002      	beq.n	80195c4 <lfs_pair_issync+0x28>
 80195be:	2000      	movs	r0, #0
}
 80195c0:	bc30      	pop	{r4, r5}
 80195c2:	4770      	bx	lr
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80195c4:	6843      	ldr	r3, [r0, #4]
 80195c6:	429a      	cmp	r2, r3
 80195c8:	d003      	beq.n	80195d2 <lfs_pair_issync+0x36>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80195ca:	2000      	movs	r0, #0
 80195cc:	e7f8      	b.n	80195c0 <lfs_pair_issync+0x24>
 80195ce:	2001      	movs	r0, #1
 80195d0:	e7f6      	b.n	80195c0 <lfs_pair_issync+0x24>
 80195d2:	2001      	movs	r0, #1
 80195d4:	e7f4      	b.n	80195c0 <lfs_pair_issync+0x24>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80195d6:	6843      	ldr	r3, [r0, #4]
 80195d8:	429a      	cmp	r2, r3
 80195da:	d001      	beq.n	80195e0 <lfs_pair_issync+0x44>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80195dc:	2000      	movs	r0, #0
 80195de:	4770      	bx	lr
 80195e0:	2001      	movs	r0, #1
}
 80195e2:	4770      	bx	lr

080195e4 <lfs_gstate_xor>:
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
 80195e4:	2300      	movs	r3, #0
 80195e6:	2b02      	cmp	r3, #2
 80195e8:	dc0d      	bgt.n	8019606 <lfs_gstate_xor+0x22>
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 80195ea:	b410      	push	{r4}
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 80195ec:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80195f0:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 80195f4:	4062      	eors	r2, r4
 80195f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 80195fa:	3301      	adds	r3, #1
 80195fc:	2b02      	cmp	r3, #2
 80195fe:	ddf5      	ble.n	80195ec <lfs_gstate_xor+0x8>
    }
}
 8019600:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019604:	4770      	bx	lr
 8019606:	4770      	bx	lr

08019608 <lfs_gstate_hasmovehere>:
    return lfs_tag_size(a->tag) >> 9;
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8019608:	6803      	ldr	r3, [r0, #0]
    return (tag & 0x70000000) >> 20;
 801960a:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801960c:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 8019610:	d00f      	beq.n	8019632 <lfs_gstate_hasmovehere+0x2a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8019612:	6843      	ldr	r3, [r0, #4]
 8019614:	680a      	ldr	r2, [r1, #0]
 8019616:	4293      	cmp	r3, r2
 8019618:	d00d      	beq.n	8019636 <lfs_gstate_hasmovehere+0x2e>
 801961a:	6880      	ldr	r0, [r0, #8]
 801961c:	6849      	ldr	r1, [r1, #4]
 801961e:	4288      	cmp	r0, r1
 8019620:	d00b      	beq.n	801963a <lfs_gstate_hasmovehere+0x32>
 8019622:	428b      	cmp	r3, r1
 8019624:	d00b      	beq.n	801963e <lfs_gstate_hasmovehere+0x36>
 8019626:	4282      	cmp	r2, r0
 8019628:	d001      	beq.n	801962e <lfs_gstate_hasmovehere+0x26>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801962a:	2000      	movs	r0, #0
}
 801962c:	4770      	bx	lr
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801962e:	2001      	movs	r0, #1
 8019630:	4770      	bx	lr
 8019632:	2000      	movs	r0, #0
 8019634:	4770      	bx	lr
 8019636:	2001      	movs	r0, #1
 8019638:	4770      	bx	lr
 801963a:	2001      	movs	r0, #1
 801963c:	4770      	bx	lr
 801963e:	2001      	movs	r0, #1
 8019640:	4770      	bx	lr

08019642 <lfs_mlist_isopen>:
}
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8019642:	b082      	sub	sp, #8
 8019644:	9001      	str	r0, [sp, #4]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8019646:	ab01      	add	r3, sp, #4
 8019648:	681b      	ldr	r3, [r3, #0]
 801964a:	b11b      	cbz	r3, 8019654 <lfs_mlist_isopen+0x12>
        if (*p == (struct lfs_mlist*)node) {
 801964c:	428b      	cmp	r3, r1
 801964e:	d1fb      	bne.n	8019648 <lfs_mlist_isopen+0x6>
            return true;
 8019650:	2001      	movs	r0, #1
 8019652:	e000      	b.n	8019656 <lfs_mlist_isopen+0x14>
        }
    }

    return false;
 8019654:	2000      	movs	r0, #0
}
 8019656:	b002      	add	sp, #8
 8019658:	4770      	bx	lr

0801965a <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 801965a:	3028      	adds	r0, #40	@ 0x28
 801965c:	e000      	b.n	8019660 <lfs_mlist_remove+0x6>
 801965e:	4618      	mov	r0, r3
 8019660:	6803      	ldr	r3, [r0, #0]
 8019662:	b123      	cbz	r3, 801966e <lfs_mlist_remove+0x14>
        if (*p == mlist) {
 8019664:	428b      	cmp	r3, r1
 8019666:	d1fa      	bne.n	801965e <lfs_mlist_remove+0x4>
            *p = (*p)->next;
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	6003      	str	r3, [r0, #0]
            break;
 801966c:	4770      	bx	lr
        }
    }
}
 801966e:	4770      	bx	lr

08019670 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
    mlist->next = lfs->mlist;
 8019670:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8019672:	600b      	str	r3, [r1, #0]
    lfs->mlist = mlist;
 8019674:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8019676:	4770      	bx	lr

08019678 <lfs_fs_disk_version>:
    } else
#endif
    {
        return LFS_DISK_VERSION;
    }
}
 8019678:	4800      	ldr	r0, [pc, #0]	@ (801967c <lfs_fs_disk_version+0x4>)
 801967a:	4770      	bx	lr
 801967c:	00020001 	.word	0x00020001

08019680 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 8019680:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 8019682:	f7ff fff9 	bl	8019678 <lfs_fs_disk_version>

}
 8019686:	0c00      	lsrs	r0, r0, #16
 8019688:	bd08      	pop	{r3, pc}

0801968a <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 801968a:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 801968c:	f7ff fff4 	bl	8019678 <lfs_fs_disk_version>
}
 8019690:	b280      	uxth	r0, r0
 8019692:	bd08      	pop	{r3, pc}

08019694 <lfs_alloc_ckpoint>:
// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
    lfs->lookahead.ckpoint = lfs->block_count;
 8019694:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8019696:	6603      	str	r3, [r0, #96]	@ 0x60
}
 8019698:	4770      	bx	lr

0801969a <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 801969a:	b508      	push	{r3, lr}
    lfs->lookahead.size = 0;
 801969c:	2200      	movs	r2, #0
 801969e:	6582      	str	r2, [r0, #88]	@ 0x58
    lfs->lookahead.next = 0;
 80196a0:	65c2      	str	r2, [r0, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 80196a2:	f7ff fff7 	bl	8019694 <lfs_alloc_ckpoint>
}
 80196a6:	bd08      	pop	{r3, pc}

080196a8 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->lookahead.start)
 80196a8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80196aa:	1ac9      	subs	r1, r1, r3
            + lfs->block_count) % lfs->block_count;
 80196ac:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80196ae:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->lookahead.start)
 80196b0:	fbb1 f2f3 	udiv	r2, r1, r3
 80196b4:	fb03 1112 	mls	r1, r3, r2, r1

    if (off < lfs->lookahead.size) {
 80196b8:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80196ba:	428b      	cmp	r3, r1
 80196bc:	d90d      	bls.n	80196da <lfs_alloc_lookahead+0x32>
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80196be:	b410      	push	{r4}
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 80196c0:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 80196c2:	08c8      	lsrs	r0, r1, #3
 80196c4:	5c23      	ldrb	r3, [r4, r0]
 80196c6:	f001 0107 	and.w	r1, r1, #7
 80196ca:	2201      	movs	r2, #1
 80196cc:	408a      	lsls	r2, r1
 80196ce:	4313      	orrs	r3, r2
 80196d0:	5423      	strb	r3, [r4, r0]
    }

    return 0;
}
 80196d2:	2000      	movs	r0, #0
 80196d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80196d8:	4770      	bx	lr
 80196da:	2000      	movs	r0, #0
 80196dc:	4770      	bx	lr
	...

080196e0 <lfs_dir_traverse_filter>:
    return 0;
}

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 80196e0:	b410      	push	{r4}
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 80196e2:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 80196e6:	d01c      	beq.n	8019722 <lfs_dir_traverse_filter+0x42>
 80196e8:	4a19      	ldr	r2, [pc, #100]	@ (8019750 <lfs_dir_traverse_filter+0x70>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 80196ea:	6803      	ldr	r3, [r0, #0]
 80196ec:	ea83 0401 	eor.w	r4, r3, r1
 80196f0:	4214      	tst	r4, r2
 80196f2:	d018      	beq.n	8019726 <lfs_dir_traverse_filter+0x46>
    return ((int32_t)(tag << 22) >> 22) == -1;
 80196f4:	f343 0209 	sbfx	r2, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
 80196f8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80196fc:	d013      	beq.n	8019726 <lfs_dir_traverse_filter+0x46>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 80196fe:	4c14      	ldr	r4, [pc, #80]	@ (8019750 <lfs_dir_traverse_filter+0x70>)
 8019700:	400c      	ands	r4, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8019702:	4a14      	ldr	r2, [pc, #80]	@ (8019754 <lfs_dir_traverse_filter+0x74>)
 8019704:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8019706:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801970a:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 801970e:	4294      	cmp	r4, r2
 8019710:	d009      	beq.n	8019726 <lfs_dir_traverse_filter+0x46>
    return (tag & 0x70000000) >> 20;
 8019712:	0d0a      	lsrs	r2, r1, #20
 8019714:	f402 64e0 	and.w	r4, r2, #1792	@ 0x700
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8019718:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 801971c:	d009      	beq.n	8019732 <lfs_dir_traverse_filter+0x52>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
 801971e:	2000      	movs	r0, #0
 8019720:	e004      	b.n	801972c <lfs_dir_traverse_filter+0x4c>
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8019722:	4a0d      	ldr	r2, [pc, #52]	@ (8019758 <lfs_dir_traverse_filter+0x78>)
 8019724:	e7e1      	b.n	80196ea <lfs_dir_traverse_filter+0xa>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8019726:	2300      	movs	r3, #0
 8019728:	6003      	str	r3, [r0, #0]
        return true;
 801972a:	2001      	movs	r0, #1
}
 801972c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019730:	4770      	bx	lr
    return (tag & 0x000ffc00) >> 10;
 8019732:	f3c1 2189 	ubfx	r1, r1, #10, #10
 8019736:	f3c3 2489 	ubfx	r4, r3, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801973a:	428c      	cmp	r4, r1
 801973c:	d305      	bcc.n	801974a <lfs_dir_traverse_filter+0x6a>
    return (int8_t)lfs_tag_chunk(tag);
 801973e:	b252      	sxtb	r2, r2
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8019740:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 8019744:	6003      	str	r3, [r0, #0]
    return false;
 8019746:	2000      	movs	r0, #0
 8019748:	e7f0      	b.n	801972c <lfs_dir_traverse_filter+0x4c>
 801974a:	2000      	movs	r0, #0
 801974c:	e7ee      	b.n	801972c <lfs_dir_traverse_filter+0x4c>
 801974e:	bf00      	nop
 8019750:	7ffffc00 	.word	0x7ffffc00
 8019754:	000ffc00 	.word	0x000ffc00
 8019758:	700ffc00 	.word	0x700ffc00

0801975c <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
 801975c:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8019760:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019764:	bf08      	it	eq
 8019766:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
 8019768:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801976c:	3104      	adds	r1, #4
#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 801976e:	6803      	ldr	r3, [r0, #0]
 8019770:	440b      	add	r3, r1
 8019772:	6003      	str	r3, [r0, #0]
    return 0;
}
 8019774:	2000      	movs	r0, #0
 8019776:	4770      	bx	lr

08019778 <lfs_dir_needsrelocation>:
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8019778:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801977a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 801977c:	2b00      	cmp	r3, #0
 801977e:	dd0b      	ble.n	8019798 <lfs_dir_needsrelocation+0x20>
 8019780:	688a      	ldr	r2, [r1, #8]
 8019782:	3201      	adds	r2, #1
 8019784:	3301      	adds	r3, #1
 8019786:	f043 0301 	orr.w	r3, r3, #1
 801978a:	fbb2 f1f3 	udiv	r1, r2, r3
 801978e:	fb03 2211 	mls	r2, r3, r1, r2
 8019792:	b11a      	cbz	r2, 801979c <lfs_dir_needsrelocation+0x24>
 8019794:	2000      	movs	r0, #0
 8019796:	4770      	bx	lr
 8019798:	2000      	movs	r0, #0
 801979a:	4770      	bx	lr
 801979c:	2001      	movs	r0, #1
}
 801979e:	4770      	bx	lr

080197a0 <lfs_dir_close_>:
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);

    return 0;
}

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 80197a0:	b508      	push	{r3, lr}
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 80197a2:	f7ff ff5a 	bl	801965a <lfs_mlist_remove>

    return 0;
}
 80197a6:	2000      	movs	r0, #0
 80197a8:	bd08      	pop	{r3, pc}

080197aa <lfs_file_tell_>:
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}
 80197aa:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 80197ac:	4770      	bx	lr

080197ae <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80197ae:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80197b0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80197b4:	d101      	bne.n	80197ba <lfs_file_size_+0xc>
        return lfs_max(file->pos, file->ctz.size);
    }
#endif

    return file->ctz.size;
 80197b6:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
}
 80197b8:	4770      	bx	lr
        return lfs_max(file->pos, file->ctz.size);
 80197ba:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 80197bc:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80197be:	4298      	cmp	r0, r3
 80197c0:	bf38      	it	cc
 80197c2:	4618      	movcc	r0, r3
 80197c4:	4770      	bx	lr

080197c6 <lfs_fs_prepsuperblock>:
    return LFS_ERR_NOENT;
}
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 80197c6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80197c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 80197cc:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 80197d0:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80197d2:	4770      	bx	lr

080197d4 <lfs_fs_prepmove>:
}
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 80197d4:	b410      	push	{r4}
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80197d6:	4b13      	ldr	r3, [pc, #76]	@ (8019824 <lfs_fs_prepmove+0x50>)
 80197d8:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80197da:	4023      	ands	r3, r4
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 80197dc:	f240 3cff 	movw	ip, #1023	@ 0x3ff
 80197e0:	4561      	cmp	r1, ip
 80197e2:	d017      	beq.n	8019814 <lfs_fs_prepmove+0x40>
 80197e4:	ea4f 2c81 	mov.w	ip, r1, lsl #10
 80197e8:	f04c 4c9f 	orr.w	ip, ip, #1333788672	@ 0x4f800000
 80197ec:	f44c 0ce0 	orr.w	ip, ip, #7340032	@ 0x700000
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80197f0:	ea43 030c 	orr.w	r3, r3, ip
 80197f4:	6303      	str	r3, [r0, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80197f6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80197fa:	4299      	cmp	r1, r3
 80197fc:	d00d      	beq.n	801981a <lfs_fs_prepmove+0x46>
 80197fe:	6813      	ldr	r3, [r2, #0]
 8019800:	6343      	str	r3, [r0, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8019802:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8019806:	4299      	cmp	r1, r3
 8019808:	d009      	beq.n	801981e <lfs_fs_prepmove+0x4a>
 801980a:	6853      	ldr	r3, [r2, #4]
 801980c:	6383      	str	r3, [r0, #56]	@ 0x38
}
 801980e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019812:	4770      	bx	lr
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8019814:	f04f 0c00 	mov.w	ip, #0
 8019818:	e7ea      	b.n	80197f0 <lfs_fs_prepmove+0x1c>
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801981a:	2300      	movs	r3, #0
 801981c:	e7f0      	b.n	8019800 <lfs_fs_prepmove+0x2c>
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801981e:	2300      	movs	r3, #0
 8019820:	e7f4      	b.n	801980c <lfs_fs_prepmove+0x38>
 8019822:	bf00      	nop
 8019824:	800003ff 	.word	0x800003ff

08019828 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 8019828:	6803      	ldr	r3, [r0, #0]
 801982a:	3301      	adds	r3, #1
 801982c:	6003      	str	r3, [r0, #0]
    return 0;
}
 801982e:	2000      	movs	r0, #0
 8019830:	4770      	bx	lr
	...

08019834 <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8019834:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->block_count);
 8019836:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8019838:	428b      	cmp	r3, r1
 801983a:	d905      	bls.n	8019848 <lfs_bd_erase+0x14>
    int err = lfs->cfg->erase(lfs->cfg, block);
 801983c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801983e:	68c3      	ldr	r3, [r0, #12]
 8019840:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 8019842:	2800      	cmp	r0, #0
 8019844:	dc07      	bgt.n	8019856 <lfs_bd_erase+0x22>
}
 8019846:	bd08      	pop	{r3, pc}
    LFS_ASSERT(block < lfs->block_count);
 8019848:	4b06      	ldr	r3, [pc, #24]	@ (8019864 <lfs_bd_erase+0x30>)
 801984a:	4a07      	ldr	r2, [pc, #28]	@ (8019868 <lfs_bd_erase+0x34>)
 801984c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8019850:	4806      	ldr	r0, [pc, #24]	@ (801986c <lfs_bd_erase+0x38>)
 8019852:	f00d fbc3 	bl	8026fdc <__assert_func>
    LFS_ASSERT(err <= 0);
 8019856:	4b06      	ldr	r3, [pc, #24]	@ (8019870 <lfs_bd_erase+0x3c>)
 8019858:	4a03      	ldr	r2, [pc, #12]	@ (8019868 <lfs_bd_erase+0x34>)
 801985a:	f44f 718b 	mov.w	r1, #278	@ 0x116
 801985e:	4803      	ldr	r0, [pc, #12]	@ (801986c <lfs_bd_erase+0x38>)
 8019860:	f00d fbbc 	bl	8026fdc <__assert_func>
 8019864:	08035678 	.word	0x08035678
 8019868:	080362d8 	.word	0x080362d8
 801986c:	0803558c 	.word	0x0803558c
 8019870:	080355bc 	.word	0x080355bc

08019874 <lfs_fs_preporphans>:
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8019874:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8019876:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 8019878:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801987c:	b90a      	cbnz	r2, 8019882 <lfs_fs_preporphans+0xe>
 801987e:	2900      	cmp	r1, #0
 8019880:	db12      	blt.n	80198a8 <lfs_fs_preporphans+0x34>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8019882:	f5b2 7fff 	cmp.w	r2, #510	@ 0x1fe
 8019886:	d901      	bls.n	801988c <lfs_fs_preporphans+0x18>
 8019888:	2900      	cmp	r1, #0
 801988a:	dc14      	bgt.n	80198b6 <lfs_fs_preporphans+0x42>
    lfs->gstate.tag += orphans;
 801988c:	4419      	add	r1, r3
 801988e:	6301      	str	r1, [r0, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8019890:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
    return tag & 0x000003ff;
 8019894:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return lfs_tag_size(a->tag);
 8019898:	3900      	subs	r1, #0
 801989a:	bf18      	it	ne
 801989c:	2101      	movne	r1, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801989e:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 80198a2:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80198a4:	2000      	movs	r0, #0
 80198a6:	bd08      	pop	{r3, pc}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 80198a8:	4b06      	ldr	r3, [pc, #24]	@ (80198c4 <lfs_fs_preporphans+0x50>)
 80198aa:	4a07      	ldr	r2, [pc, #28]	@ (80198c8 <lfs_fs_preporphans+0x54>)
 80198ac:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 80198b0:	4806      	ldr	r0, [pc, #24]	@ (80198cc <lfs_fs_preporphans+0x58>)
 80198b2:	f00d fb93 	bl	8026fdc <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 80198b6:	4b06      	ldr	r3, [pc, #24]	@ (80198d0 <lfs_fs_preporphans+0x5c>)
 80198b8:	4a03      	ldr	r2, [pc, #12]	@ (80198c8 <lfs_fs_preporphans+0x54>)
 80198ba:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 80198be:	4803      	ldr	r0, [pc, #12]	@ (80198cc <lfs_fs_preporphans+0x58>)
 80198c0:	f00d fb8c 	bl	8026fdc <__assert_func>
 80198c4:	080355c8 	.word	0x080355c8
 80198c8:	080362a8 	.word	0x080362a8
 80198cc:	0803558c 	.word	0x0803558c
 80198d0:	08035600 	.word	0x08035600

080198d4 <lfs_cache_zero>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 80198d4:	b510      	push	{r4, lr}
 80198d6:	460c      	mov	r4, r1
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 80198d8:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80198da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80198dc:	21ff      	movs	r1, #255	@ 0xff
 80198de:	68e0      	ldr	r0, [r4, #12]
 80198e0:	f010 f8ce 	bl	8029a80 <memset>
    pcache->block = LFS_BLOCK_NULL;
 80198e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80198e8:	6023      	str	r3, [r4, #0]
}
 80198ea:	bd10      	pop	{r4, pc}

080198ec <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 80198ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
 80198ee:	680d      	ldr	r5, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80198f0:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80198f2:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
 80198f4:	3f08      	subs	r7, #8
    lfs_off_t i = size / b;
 80198f6:	fbb5 f0f7 	udiv	r0, r5, r7
    if (i == 0) {
 80198fa:	42bd      	cmp	r5, r7
 80198fc:	d312      	bcc.n	8019924 <lfs_ctz_index+0x38>
 80198fe:	460e      	mov	r6, r1
}

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8019900:	3801      	subs	r0, #1
 8019902:	f7f7 fa41 	bl	8010d88 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8019906:	1c84      	adds	r4, r0, #2
 8019908:	eba5 0484 	sub.w	r4, r5, r4, lsl #2
 801990c:	fbb4 f4f7 	udiv	r4, r4, r7
    *off = size - b*i - 4*lfs_popc(i);
 8019910:	fb04 5517 	mls	r5, r4, r7, r5
 8019914:	4620      	mov	r0, r4
 8019916:	f7f7 fa37 	bl	8010d88 <__popcountsi2>
 801991a:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
 801991e:	6035      	str	r5, [r6, #0]
    return i;
 8019920:	4620      	mov	r0, r4
}
 8019922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8019924:	2000      	movs	r0, #0
 8019926:	e7fc      	b.n	8019922 <lfs_ctz_index+0x36>

08019928 <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
 8019928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801992c:	b087      	sub	sp, #28
 801992e:	4615      	mov	r5, r2
 8019930:	469b      	mov	fp, r3
 8019932:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8019934:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8019936:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
    if (off+size > lfs->cfg->block_size
 801993a:	eb04 020a 	add.w	r2, r4, sl
 801993e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8019940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019942:	429a      	cmp	r2, r3
 8019944:	f200 80d0 	bhi.w	8019ae8 <lfs_bd_read+0x1c0>
 8019948:	4689      	mov	r9, r1
            || (lfs->block_count && block >= lfs->block_count)) {
 801994a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801994c:	2b00      	cmp	r3, #0
 801994e:	f000 80c7 	beq.w	8019ae0 <lfs_bd_read+0x1b8>
 8019952:	42bb      	cmp	r3, r7
 8019954:	f240 80cb 	bls.w	8019aee <lfs_bd_read+0x1c6>
 8019958:	9003      	str	r0, [sp, #12]
 801995a:	e084      	b.n	8019a66 <lfs_bd_read+0x13e>
                off < pcache->off + pcache->size) {
 801995c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019960:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8019964:	1899      	adds	r1, r3, r2
        if (pcache && block == pcache->block &&
 8019966:	42a1      	cmp	r1, r4
 8019968:	d91e      	bls.n	80199a8 <lfs_bd_read+0x80>
            if (off >= pcache->off) {
 801996a:	42a3      	cmp	r3, r4
 801996c:	d905      	bls.n	801997a <lfs_bd_read+0x52>
            diff = lfs_min(diff, pcache->off-off);
 801996e:	1b1b      	subs	r3, r3, r4
    return (a < b) ? a : b;
 8019970:	4553      	cmp	r3, sl
 8019972:	bf28      	it	cs
 8019974:	4653      	movcs	r3, sl
 8019976:	4698      	mov	r8, r3
 8019978:	e081      	b.n	8019a7e <lfs_bd_read+0x156>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801997a:	1b19      	subs	r1, r3, r4
 801997c:	eb02 0801 	add.w	r8, r2, r1
 8019980:	45d0      	cmp	r8, sl
 8019982:	bf28      	it	cs
 8019984:	46d0      	movcs	r8, sl
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8019986:	f8d9 100c 	ldr.w	r1, [r9, #12]
 801998a:	1ae3      	subs	r3, r4, r3
 801998c:	4642      	mov	r2, r8
 801998e:	4419      	add	r1, r3
 8019990:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8019992:	f011 fab1 	bl	802aef8 <memcpy>
                data += diff;
 8019996:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019998:	4443      	add	r3, r8
 801999a:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801999c:	4444      	add	r4, r8
                size -= diff;
 801999e:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 80199a2:	e060      	b.n	8019a66 <lfs_bd_read+0x13e>
        lfs_size_t diff = size;
 80199a4:	46d0      	mov	r8, sl
 80199a6:	e06a      	b.n	8019a7e <lfs_bd_read+0x156>
 80199a8:	46d0      	mov	r8, sl
 80199aa:	e068      	b.n	8019a7e <lfs_bd_read+0x156>
                off < rcache->off + rcache->size) {
 80199ac:	686b      	ldr	r3, [r5, #4]
 80199ae:	68aa      	ldr	r2, [r5, #8]
 80199b0:	1899      	adds	r1, r3, r2
        if (block == rcache->block &&
 80199b2:	42a1      	cmp	r1, r4
 80199b4:	d966      	bls.n	8019a84 <lfs_bd_read+0x15c>
            if (off >= rcache->off) {
 80199b6:	42a3      	cmp	r3, r4
 80199b8:	d904      	bls.n	80199c4 <lfs_bd_read+0x9c>
            diff = lfs_min(diff, rcache->off-off);
 80199ba:	1b1b      	subs	r3, r3, r4
 80199bc:	4598      	cmp	r8, r3
 80199be:	bf28      	it	cs
 80199c0:	4698      	movcs	r8, r3
 80199c2:	e05f      	b.n	8019a84 <lfs_bd_read+0x15c>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80199c4:	1b19      	subs	r1, r3, r4
 80199c6:	440a      	add	r2, r1
 80199c8:	4590      	cmp	r8, r2
 80199ca:	bf28      	it	cs
 80199cc:	4690      	movcs	r8, r2
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80199ce:	68e9      	ldr	r1, [r5, #12]
 80199d0:	1ae3      	subs	r3, r4, r3
 80199d2:	4642      	mov	r2, r8
 80199d4:	4419      	add	r1, r3
 80199d6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80199d8:	f011 fa8e 	bl	802aef8 <memcpy>
                data += diff;
 80199dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80199de:	4443      	add	r3, r8
 80199e0:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 80199e2:	4444      	add	r4, r8
                size -= diff;
 80199e4:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 80199e8:	e03d      	b.n	8019a66 <lfs_bd_read+0x13e>
            data += diff;
 80199ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80199ec:	9b04      	ldr	r3, [sp, #16]
 80199ee:	441a      	add	r2, r3
 80199f0:	9212      	str	r2, [sp, #72]	@ 0x48
            off += diff;
 80199f2:	441c      	add	r4, r3
            size -= diff;
 80199f4:	9b05      	ldr	r3, [sp, #20]
 80199f6:	eba3 0308 	sub.w	r3, r3, r8
 80199fa:	449a      	add	sl, r3
            continue;
 80199fc:	e033      	b.n	8019a66 <lfs_bd_read+0x13e>
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 80199fe:	9b03      	ldr	r3, [sp, #12]
 8019a00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019a02:	b10b      	cbz	r3, 8019a08 <lfs_bd_read+0xe0>
 8019a04:	42bb      	cmp	r3, r7
 8019a06:	d95f      	bls.n	8019ac8 <lfs_bd_read+0x1a0>
        rcache->block = block;
 8019a08:	602f      	str	r7, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8019a0a:	9e03      	ldr	r6, [sp, #12]
 8019a0c:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 8019a0e:	69da      	ldr	r2, [r3, #28]
    return a - (a % alignment);
 8019a10:	fbb4 f3f2 	udiv	r3, r4, r2
 8019a14:	fb02 4313 	mls	r3, r2, r3, r4
 8019a18:	1ae2      	subs	r2, r4, r3
 8019a1a:	606a      	str	r2, [r5, #4]
                lfs_min(
 8019a1c:	eb04 010b 	add.w	r1, r4, fp
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8019a20:	f8d6 c068 	ldr.w	ip, [r6, #104]	@ 0x68
 8019a24:	f8dc 001c 	ldr.w	r0, [ip, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 8019a28:	4401      	add	r1, r0
 8019a2a:	3901      	subs	r1, #1
    return a - (a % alignment);
 8019a2c:	fbb1 fef0 	udiv	lr, r1, r0
 8019a30:	fb00 101e 	mls	r0, r0, lr, r1
 8019a34:	1a09      	subs	r1, r1, r0
                    lfs->cfg->block_size)
 8019a36:	f8dc 0024 	ldr.w	r0, [ip, #36]	@ 0x24
        rcache->size = lfs_min(
 8019a3a:	1b1b      	subs	r3, r3, r4
 8019a3c:	4288      	cmp	r0, r1
 8019a3e:	bf94      	ite	ls
 8019a40:	181b      	addls	r3, r3, r0
 8019a42:	185b      	addhi	r3, r3, r1
                lfs->cfg->cache_size);
 8019a44:	f8dc 1030 	ldr.w	r1, [ip, #48]	@ 0x30
    return (a < b) ? a : b;
 8019a48:	428b      	cmp	r3, r1
 8019a4a:	bf28      	it	cs
 8019a4c:	460b      	movcs	r3, r1
        rcache->size = lfs_min(
 8019a4e:	60ab      	str	r3, [r5, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8019a50:	6eb0      	ldr	r0, [r6, #104]	@ 0x68
 8019a52:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8019a56:	9300      	str	r3, [sp, #0]
 8019a58:	68eb      	ldr	r3, [r5, #12]
 8019a5a:	4639      	mov	r1, r7
 8019a5c:	47c0      	blx	r8
        LFS_ASSERT(err <= 0);
 8019a5e:	1e03      	subs	r3, r0, #0
 8019a60:	dc38      	bgt.n	8019ad4 <lfs_bd_read+0x1ac>
        if (err) {
 8019a62:	2b00      	cmp	r3, #0
 8019a64:	d146      	bne.n	8019af4 <lfs_bd_read+0x1cc>
    while (size > 0) {
 8019a66:	f1ba 0f00 	cmp.w	sl, #0
 8019a6a:	d03b      	beq.n	8019ae4 <lfs_bd_read+0x1bc>
        if (pcache && block == pcache->block &&
 8019a6c:	f1b9 0f00 	cmp.w	r9, #0
 8019a70:	d098      	beq.n	80199a4 <lfs_bd_read+0x7c>
 8019a72:	f8d9 3000 	ldr.w	r3, [r9]
 8019a76:	42bb      	cmp	r3, r7
 8019a78:	f43f af70 	beq.w	801995c <lfs_bd_read+0x34>
        lfs_size_t diff = size;
 8019a7c:	46d0      	mov	r8, sl
        if (block == rcache->block &&
 8019a7e:	682b      	ldr	r3, [r5, #0]
 8019a80:	42bb      	cmp	r3, r7
 8019a82:	d093      	beq.n	80199ac <lfs_bd_read+0x84>
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8019a84:	45da      	cmp	sl, fp
 8019a86:	d3ba      	bcc.n	80199fe <lfs_bd_read+0xd6>
 8019a88:	9b03      	ldr	r3, [sp, #12]
 8019a8a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8019a8c:	69c2      	ldr	r2, [r0, #28]
 8019a8e:	fbb4 f3f2 	udiv	r3, r4, r2
 8019a92:	fb02 4313 	mls	r3, r2, r3, r4
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d1b1      	bne.n	80199fe <lfs_bd_read+0xd6>
 8019a9a:	4552      	cmp	r2, sl
 8019a9c:	d8af      	bhi.n	80199fe <lfs_bd_read+0xd6>
    return a - (a % alignment);
 8019a9e:	fbb8 f3f2 	udiv	r3, r8, r2
 8019aa2:	fb02 8313 	mls	r3, r2, r3, r8
 8019aa6:	9305      	str	r3, [sp, #20]
 8019aa8:	eba8 0203 	sub.w	r2, r8, r3
 8019aac:	4613      	mov	r3, r2
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8019aae:	6842      	ldr	r2, [r0, #4]
 8019ab0:	4616      	mov	r6, r2
 8019ab2:	9304      	str	r3, [sp, #16]
 8019ab4:	9300      	str	r3, [sp, #0]
 8019ab6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019ab8:	4622      	mov	r2, r4
 8019aba:	4639      	mov	r1, r7
 8019abc:	47b0      	blx	r6
            if (err) {
 8019abe:	2800      	cmp	r0, #0
 8019ac0:	d093      	beq.n	80199ea <lfs_bd_read+0xc2>
}
 8019ac2:	b007      	add	sp, #28
 8019ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8019ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8019af8 <lfs_bd_read+0x1d0>)
 8019aca:	4a0c      	ldr	r2, [pc, #48]	@ (8019afc <lfs_bd_read+0x1d4>)
 8019acc:	216b      	movs	r1, #107	@ 0x6b
 8019ace:	480c      	ldr	r0, [pc, #48]	@ (8019b00 <lfs_bd_read+0x1d8>)
 8019ad0:	f00d fa84 	bl	8026fdc <__assert_func>
        LFS_ASSERT(err <= 0);
 8019ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8019b04 <lfs_bd_read+0x1dc>)
 8019ad6:	4a09      	ldr	r2, [pc, #36]	@ (8019afc <lfs_bd_read+0x1d4>)
 8019ad8:	2176      	movs	r1, #118	@ 0x76
 8019ada:	4809      	ldr	r0, [pc, #36]	@ (8019b00 <lfs_bd_read+0x1d8>)
 8019adc:	f00d fa7e 	bl	8026fdc <__assert_func>
 8019ae0:	9003      	str	r0, [sp, #12]
 8019ae2:	e7c0      	b.n	8019a66 <lfs_bd_read+0x13e>
    return 0;
 8019ae4:	2000      	movs	r0, #0
 8019ae6:	e7ec      	b.n	8019ac2 <lfs_bd_read+0x19a>
        return LFS_ERR_CORRUPT;
 8019ae8:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 8019aec:	e7e9      	b.n	8019ac2 <lfs_bd_read+0x19a>
 8019aee:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 8019af2:	e7e6      	b.n	8019ac2 <lfs_bd_read+0x19a>
 8019af4:	4618      	mov	r0, r3
 8019af6:	e7e4      	b.n	8019ac2 <lfs_bd_read+0x19a>
 8019af8:	08035638 	.word	0x08035638
 8019afc:	08036300 	.word	0x08036300
 8019b00:	0803558c 	.word	0x0803558c
 8019b04:	080355bc 	.word	0x080355bc

08019b08 <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8019b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b0c:	b089      	sub	sp, #36	@ 0x24
 8019b0e:	4607      	mov	r7, r0
 8019b10:	468a      	mov	sl, r1
 8019b12:	4690      	mov	r8, r2
 8019b14:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
 8019b16:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
 8019b18:	690b      	ldr	r3, [r1, #16]
 8019b1a:	9307      	str	r3, [sp, #28]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8019b1c:	303c      	adds	r0, #60	@ 0x3c
 8019b1e:	f7ff fd73 	bl	8019608 <lfs_gstate_hasmovehere>
 8019b22:	2800      	cmp	r0, #0
 8019b24:	f000 808d 	beq.w	8019c42 <lfs_dir_getslice+0x13a>
    return (tag & 0x000ffc00) >> 10;
 8019b28:	f3c8 2389 	ubfx	r3, r8, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	f000 808a 	beq.w	8019c46 <lfs_dir_getslice+0x13e>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 8019b32:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 8019b34:	f3c2 238f 	ubfx	r3, r2, #10, #16
 8019b38:	f3c2 2289 	ubfx	r2, r2, #10, #10
 8019b3c:	f3cb 218f 	ubfx	r1, fp, #10, #16
 8019b40:	f3cb 2089 	ubfx	r0, fp, #10, #10
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 8019b44:	404b      	eors	r3, r1
 8019b46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	f000 8085 	beq.w	8019c5a <lfs_dir_getslice+0x152>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 8019b50:	4282      	cmp	r2, r0
 8019b52:	d37a      	bcc.n	8019c4a <lfs_dir_getslice+0x142>
    lfs_stag_t gdiff = 0;
 8019b54:	2600      	movs	r6, #0
 8019b56:	e006      	b.n	8019b66 <lfs_dir_getslice+0x5e>
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8019b58:	9605      	str	r6, [sp, #20]
 8019b5a:	ebab 0306 	sub.w	r3, fp, r6
 8019b5e:	4063      	eors	r3, r4
 8019b60:	ea13 0f08 	tst.w	r3, r8
 8019b64:	d048      	beq.n	8019bf8 <lfs_dir_getslice+0xf0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8019b66:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8019b68:	f344 0909 	sbfx	r9, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8019b6c:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8019b70:	bf14      	ite	ne
 8019b72:	4623      	movne	r3, r4
 8019b74:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
 8019b76:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8019b7a:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8019b7c:	3308      	adds	r3, #8
 8019b7e:	42ab      	cmp	r3, r5
 8019b80:	d865      	bhi.n	8019c4e <lfs_dir_getslice+0x146>
        off -= lfs_tag_dsize(ntag);
 8019b82:	1aad      	subs	r5, r5, r2
                dir->pair[0], off, &ntag, sizeof(ntag));
 8019b84:	f8da 2000 	ldr.w	r2, [sl]
        int err = lfs_bd_read(lfs,
 8019b88:	2304      	movs	r3, #4
 8019b8a:	9303      	str	r3, [sp, #12]
 8019b8c:	a907      	add	r1, sp, #28
 8019b8e:	9102      	str	r1, [sp, #8]
 8019b90:	9501      	str	r5, [sp, #4]
 8019b92:	9200      	str	r2, [sp, #0]
 8019b94:	463a      	mov	r2, r7
 8019b96:	2100      	movs	r1, #0
 8019b98:	4638      	mov	r0, r7
 8019b9a:	f7ff fec5 	bl	8019928 <lfs_bd_read>
        if (err) {
 8019b9e:	4603      	mov	r3, r0
 8019ba0:	2800      	cmp	r0, #0
 8019ba2:	d156      	bne.n	8019c52 <lfs_dir_getslice+0x14a>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8019ba4:	9b07      	ldr	r3, [sp, #28]
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8019ba6:	ba1b      	rev	r3, r3
 8019ba8:	4063      	eors	r3, r4
 8019baa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019bae:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
 8019bb0:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d0cf      	beq.n	8019b58 <lfs_dir_getslice+0x50>
    return (tag & 0x70000000) >> 20;
 8019bb8:	0d23      	lsrs	r3, r4, #20
 8019bba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
        if (lfs_tag_id(gmask) != 0 &&
 8019bbe:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8019bc2:	d1c9      	bne.n	8019b58 <lfs_dir_getslice+0x50>
    return (tag & 0x000ffc00) >> 10;
 8019bc4:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8019bc8:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
 8019bcc:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8019bd0:	4584      	cmp	ip, r0
 8019bd2:	d3c1      	bcc.n	8019b58 <lfs_dir_getslice+0x50>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8019bd4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8019bd8:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8019bdc:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 8019be0:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8019be4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8019be8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8019bec:	42a2      	cmp	r2, r4
 8019bee:	d037      	beq.n	8019c60 <lfs_dir_getslice+0x158>
    return (int8_t)lfs_tag_chunk(tag);
 8019bf0:	b25b      	sxtb	r3, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8019bf2:	eb06 2683 	add.w	r6, r6, r3, lsl #10
 8019bf6:	e7af      	b.n	8019b58 <lfs_dir_getslice+0x50>
            if (lfs_tag_isdelete(tag)) {
 8019bf8:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8019bfc:	d033      	beq.n	8019c66 <lfs_dir_getslice+0x15e>
    return tag & 0x000003ff;
 8019bfe:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
 8019c02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019c04:	429e      	cmp	r6, r3
 8019c06:	bf28      	it	cs
 8019c08:	461e      	movcs	r6, r3
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8019c0a:	f8da 2000 	ldr.w	r2, [sl]
 8019c0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019c10:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
 8019c12:	9603      	str	r6, [sp, #12]
 8019c14:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8019c16:	9102      	str	r1, [sp, #8]
 8019c18:	3304      	adds	r3, #4
 8019c1a:	9301      	str	r3, [sp, #4]
 8019c1c:	9200      	str	r2, [sp, #0]
 8019c1e:	4633      	mov	r3, r6
 8019c20:	463a      	mov	r2, r7
 8019c22:	2100      	movs	r1, #0
 8019c24:	4638      	mov	r0, r7
 8019c26:	f7ff fe7f 	bl	8019928 <lfs_bd_read>
            if (err) {
 8019c2a:	4603      	mov	r3, r0
 8019c2c:	b988      	cbnz	r0, 8019c52 <lfs_dir_getslice+0x14a>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8019c2e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019c30:	1b9a      	subs	r2, r3, r6
 8019c32:	2100      	movs	r1, #0
 8019c34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019c36:	1998      	adds	r0, r3, r6
 8019c38:	f00f ff22 	bl	8029a80 <memset>
            return tag + gdiff;
 8019c3c:	9b05      	ldr	r3, [sp, #20]
 8019c3e:	4423      	add	r3, r4
 8019c40:	e007      	b.n	8019c52 <lfs_dir_getslice+0x14a>
    lfs_stag_t gdiff = 0;
 8019c42:	2600      	movs	r6, #0
 8019c44:	e78f      	b.n	8019b66 <lfs_dir_getslice+0x5e>
 8019c46:	2600      	movs	r6, #0
 8019c48:	e78d      	b.n	8019b66 <lfs_dir_getslice+0x5e>
            gdiff -= LFS_MKTAG(0, 1, 0);
 8019c4a:	4e08      	ldr	r6, [pc, #32]	@ (8019c6c <lfs_dir_getslice+0x164>)
 8019c4c:	e78b      	b.n	8019b66 <lfs_dir_getslice+0x5e>
    return LFS_ERR_NOENT;
 8019c4e:	f06f 0301 	mvn.w	r3, #1
}
 8019c52:	4618      	mov	r0, r3
 8019c54:	b009      	add	sp, #36	@ 0x24
 8019c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOENT;
 8019c5a:	f06f 0301 	mvn.w	r3, #1
 8019c5e:	e7f8      	b.n	8019c52 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 8019c60:	f06f 0301 	mvn.w	r3, #1
 8019c64:	e7f5      	b.n	8019c52 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 8019c66:	f06f 0301 	mvn.w	r3, #1
 8019c6a:	e7f2      	b.n	8019c52 <lfs_dir_getslice+0x14a>
 8019c6c:	fffffc00 	.word	0xfffffc00

08019c70 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8019c70:	b510      	push	{r4, lr}
 8019c72:	b084      	sub	sp, #16
    return tag & 0x000003ff;
 8019c74:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 8019c78:	9402      	str	r4, [sp, #8]
 8019c7a:	9c06      	ldr	r4, [sp, #24]
 8019c7c:	9401      	str	r4, [sp, #4]
 8019c7e:	2400      	movs	r4, #0
 8019c80:	9400      	str	r4, [sp, #0]
 8019c82:	f7ff ff41 	bl	8019b08 <lfs_dir_getslice>
}
 8019c86:	b004      	add	sp, #16
 8019c88:	bd10      	pop	{r4, pc}
	...

08019c8c <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
 8019c8c:	b510      	push	{r4, lr}
 8019c8e:	b086      	sub	sp, #24
 8019c90:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8019c92:	ab03      	add	r3, sp, #12
 8019c94:	9300      	str	r3, [sp, #0]
 8019c96:	4b09      	ldr	r3, [pc, #36]	@ (8019cbc <lfs_dir_getgstate+0x30>)
 8019c98:	4a09      	ldr	r2, [pc, #36]	@ (8019cc0 <lfs_dir_getgstate+0x34>)
 8019c9a:	f7ff ffe9 	bl	8019c70 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 8019c9e:	2800      	cmp	r0, #0
 8019ca0:	da04      	bge.n	8019cac <lfs_dir_getgstate+0x20>
 8019ca2:	f110 0f02 	cmn.w	r0, #2
 8019ca6:	d106      	bne.n	8019cb6 <lfs_dir_getgstate+0x2a>
    return 0;
 8019ca8:	2000      	movs	r0, #0
 8019caa:	e004      	b.n	8019cb6 <lfs_dir_getgstate+0x2a>
        lfs_gstate_xor(gstate, &temp);
 8019cac:	a903      	add	r1, sp, #12
 8019cae:	4620      	mov	r0, r4
 8019cb0:	f7ff fc98 	bl	80195e4 <lfs_gstate_xor>
    return 0;
 8019cb4:	2000      	movs	r0, #0
}
 8019cb6:	b006      	add	sp, #24
 8019cb8:	bd10      	pop	{r4, pc}
 8019cba:	bf00      	nop
 8019cbc:	7ff0000c 	.word	0x7ff0000c
 8019cc0:	7ff00000 	.word	0x7ff00000

08019cc4 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
 8019cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cc8:	b089      	sub	sp, #36	@ 0x24
 8019cca:	461c      	mov	r4, r3
 8019ccc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019cce:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8019cd0:	9f14      	ldr	r7, [sp, #80]	@ 0x50
    if (size == 0) {
 8019cd2:	b923      	cbnz	r3, 8019cde <lfs_ctz_traverse+0x1a>
        return 0;
 8019cd4:	2300      	movs	r3, #0
}
 8019cd6:	4618      	mov	r0, r3
 8019cd8:	b009      	add	sp, #36	@ 0x24
 8019cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cde:	4680      	mov	r8, r0
 8019ce0:	4689      	mov	r9, r1
 8019ce2:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8019ce4:	3b01      	subs	r3, #1
 8019ce6:	9307      	str	r3, [sp, #28]
 8019ce8:	a907      	add	r1, sp, #28
 8019cea:	f7ff fdff 	bl	80198ec <lfs_ctz_index>
 8019cee:	4605      	mov	r5, r0
        int err = cb(data, head);
 8019cf0:	4621      	mov	r1, r4
 8019cf2:	4638      	mov	r0, r7
 8019cf4:	47b0      	blx	r6
        if (err) {
 8019cf6:	4603      	mov	r3, r0
 8019cf8:	2800      	cmp	r0, #0
 8019cfa:	d1ec      	bne.n	8019cd6 <lfs_ctz_traverse+0x12>
        if (index == 0) {
 8019cfc:	2d00      	cmp	r5, #0
 8019cfe:	d0ea      	beq.n	8019cd6 <lfs_ctz_traverse+0x12>
        int count = 2 - (index & 1);
 8019d00:	f005 0b01 	and.w	fp, r5, #1
 8019d04:	f1cb 0302 	rsb	r3, fp, #2
                pcache, rcache, count*sizeof(head),
 8019d08:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8019d0a:	9303      	str	r3, [sp, #12]
 8019d0c:	aa05      	add	r2, sp, #20
 8019d0e:	9202      	str	r2, [sp, #8]
 8019d10:	2200      	movs	r2, #0
 8019d12:	9201      	str	r2, [sp, #4]
 8019d14:	9400      	str	r4, [sp, #0]
 8019d16:	4652      	mov	r2, sl
 8019d18:	4649      	mov	r1, r9
 8019d1a:	4640      	mov	r0, r8
 8019d1c:	f7ff fe04 	bl	8019928 <lfs_bd_read>
        if (err) {
 8019d20:	4604      	mov	r4, r0
 8019d22:	b9c8      	cbnz	r0, 8019d58 <lfs_ctz_traverse+0x94>
        for (int i = 0; i < count-1; i++) {
 8019d24:	43eb      	mvns	r3, r5
 8019d26:	f003 0301 	and.w	r3, r3, #1
 8019d2a:	42a3      	cmp	r3, r4
 8019d2c:	dd0b      	ble.n	8019d46 <lfs_ctz_traverse+0x82>
            err = cb(data, heads[i]);
 8019d2e:	ab08      	add	r3, sp, #32
 8019d30:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019d34:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 8019d38:	4638      	mov	r0, r7
 8019d3a:	47b0      	blx	r6
            if (err) {
 8019d3c:	4603      	mov	r3, r0
 8019d3e:	2800      	cmp	r0, #0
 8019d40:	d1c9      	bne.n	8019cd6 <lfs_ctz_traverse+0x12>
        for (int i = 0; i < count-1; i++) {
 8019d42:	3401      	adds	r4, #1
 8019d44:	e7ee      	b.n	8019d24 <lfs_ctz_traverse+0x60>
        head = heads[count-1];
 8019d46:	aa08      	add	r2, sp, #32
 8019d48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019d4c:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
 8019d50:	f1ab 0b02 	sub.w	fp, fp, #2
 8019d54:	445d      	add	r5, fp
    while (true) {
 8019d56:	e7cb      	b.n	8019cf0 <lfs_ctz_traverse+0x2c>
            return err;
 8019d58:	4603      	mov	r3, r0
 8019d5a:	e7bc      	b.n	8019cd6 <lfs_ctz_traverse+0x12>

08019d5c <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 8019d5c:	b530      	push	{r4, r5, lr}
 8019d5e:	b087      	sub	sp, #28
 8019d60:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
 8019d62:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8019d64:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8019d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 8019d68:	6811      	ldr	r1, [r2, #0]
 8019d6a:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8019d6c:	2508      	movs	r5, #8
 8019d6e:	9503      	str	r5, [sp, #12]
 8019d70:	ad04      	add	r5, sp, #16
 8019d72:	9502      	str	r5, [sp, #8]
 8019d74:	9201      	str	r2, [sp, #4]
 8019d76:	9100      	str	r1, [sp, #0]
 8019d78:	4602      	mov	r2, r0
 8019d7a:	f100 0110 	add.w	r1, r0, #16
 8019d7e:	f7ff fdd3 	bl	8019928 <lfs_bd_read>
    if (err) {
 8019d82:	4603      	mov	r3, r0
 8019d84:	b978      	cbnz	r0, 8019da6 <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8019d86:	9a04      	ldr	r2, [sp, #16]
 8019d88:	6861      	ldr	r1, [r4, #4]
 8019d8a:	4291      	cmp	r1, r2
 8019d8c:	d008      	beq.n	8019da0 <lfs_fs_parent_match+0x44>
 8019d8e:	9d05      	ldr	r5, [sp, #20]
 8019d90:	68a0      	ldr	r0, [r4, #8]
 8019d92:	4285      	cmp	r5, r0
 8019d94:	d004      	beq.n	8019da0 <lfs_fs_parent_match+0x44>
 8019d96:	4282      	cmp	r2, r0
 8019d98:	d002      	beq.n	8019da0 <lfs_fs_parent_match+0x44>
 8019d9a:	42a9      	cmp	r1, r5
 8019d9c:	d000      	beq.n	8019da0 <lfs_fs_parent_match+0x44>
 8019d9e:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8019da0:	3b00      	subs	r3, #0
 8019da2:	bf18      	it	ne
 8019da4:	2301      	movne	r3, #1
}
 8019da6:	4618      	mov	r0, r3
 8019da8:	b007      	add	sp, #28
 8019daa:	bd30      	pop	{r4, r5, pc}

08019dac <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8019dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019db0:	b0af      	sub	sp, #188	@ 0xbc
 8019db2:	9007      	str	r0, [sp, #28]
 8019db4:	460e      	mov	r6, r1
 8019db6:	4617      	mov	r7, r2
 8019db8:	461c      	mov	r4, r3
 8019dba:	f8dd 80e0 	ldr.w	r8, [sp, #224]	@ 0xe0
 8019dbe:	f8dd b0e4 	ldr.w	fp, [sp, #228]	@ 0xe4
 8019dc2:	f8dd a0e8 	ldr.w	sl, [sp, #232]	@ 0xe8
 8019dc6:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
 8019dca:	9304      	str	r3, [sp, #16]
 8019dcc:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	@ 0xf4
 8019dd0:	9305      	str	r3, [sp, #20]
 8019dd2:	f9bd 30f8 	ldrsh.w	r3, [sp, #248]	@ 0xf8
 8019dd6:	9306      	str	r3, [sp, #24]
    struct lfs_diskoff disk = {0};
 8019dd8:	2500      	movs	r5, #0
 8019dda:	950d      	str	r5, [sp, #52]	@ 0x34
 8019ddc:	950e      	str	r5, [sp, #56]	@ 0x38
    return ((int32_t)(tag << 22) >> 22) == -1;
 8019dde:	f344 0309 	sbfx	r3, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8019de2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019de6:	bf14      	ite	ne
 8019de8:	46a1      	movne	r9, r4
 8019dea:	f104 0901 	addeq.w	r9, r4, #1
    return tag & 0x000003ff;
 8019dee:	f3c9 0909 	ubfx	r9, r9, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8019df2:	f109 0904 	add.w	r9, r9, #4
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8019df6:	44b9      	add	r9, r7
 8019df8:	68f3      	ldr	r3, [r6, #12]
 8019dfa:	4599      	cmp	r9, r3
 8019dfc:	d35e      	bcc.n	8019ebc <lfs_dir_traverse+0x110>
            } else if (attrcount > 0) {
 8019dfe:	f1bb 0f00 	cmp.w	fp, #0
 8019e02:	f340 80fa 	ble.w	8019ffa <lfs_dir_traverse+0x24e>
                tag = attrs[0].tag;
 8019e06:	f8d8 3000 	ldr.w	r3, [r8]
 8019e0a:	930f      	str	r3, [sp, #60]	@ 0x3c
                buffer = attrs[0].buffer;
 8019e0c:	f8d8 9004 	ldr.w	r9, [r8, #4]
                attrs += 1;
 8019e10:	f108 0808 	add.w	r8, r8, #8
                attrcount -= 1;
 8019e14:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8019e18:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8019e1a:	4ba9      	ldr	r3, [pc, #676]	@ (801a0c0 <lfs_dir_traverse+0x314>)
 8019e1c:	ea0a 0303 	and.w	r3, sl, r3
 8019e20:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8019e22:	404a      	eors	r2, r1
 8019e24:	401a      	ands	r2, r3
 8019e26:	d1da      	bne.n	8019dde <lfs_dir_traverse+0x32>
    return (tag & 0x000ffc00) >> 10;
 8019e28:	f3ca 2389 	ubfx	r3, sl, #10, #10
            if (lfs_tag_id(tmask) != 0) {
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	f000 8116 	beq.w	801a05e <lfs_dir_traverse+0x2b2>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8019e32:	2d02      	cmp	r5, #2
 8019e34:	d862      	bhi.n	8019efc <lfs_dir_traverse+0x150>
                stack[sp] = (struct lfs_dir_traverse){
 8019e36:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 8019e3a:	a82e      	add	r0, sp, #184	@ 0xb8
 8019e3c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8019e40:	f843 6c78 	str.w	r6, [r3, #-120]
 8019e44:	f843 7c74 	str.w	r7, [r3, #-116]
 8019e48:	f843 4c70 	str.w	r4, [r3, #-112]
 8019e4c:	f843 8c6c 	str.w	r8, [r3, #-108]
 8019e50:	f843 bc68 	str.w	fp, [r3, #-104]
 8019e54:	f843 ac64 	str.w	sl, [r3, #-100]
 8019e58:	983b      	ldr	r0, [sp, #236]	@ 0xec
 8019e5a:	f843 0c60 	str.w	r0, [r3, #-96]
 8019e5e:	9804      	ldr	r0, [sp, #16]
 8019e60:	f823 0c5c 	strh.w	r0, [r3, #-92]
 8019e64:	9805      	ldr	r0, [sp, #20]
 8019e66:	f823 0c5a 	strh.w	r0, [r3, #-90]
 8019e6a:	9806      	ldr	r0, [sp, #24]
 8019e6c:	f823 0c58 	strh.w	r0, [r3, #-88]
 8019e70:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 8019e72:	f843 0c54 	str.w	r0, [r3, #-84]
 8019e76:	9840      	ldr	r0, [sp, #256]	@ 0x100
 8019e78:	f843 0c50 	str.w	r0, [r3, #-80]
 8019e7c:	f843 1c4c 	str.w	r1, [r3, #-76]
 8019e80:	f843 9c48 	str.w	r9, [r3, #-72]
 8019e84:	3b44      	subs	r3, #68	@ 0x44
 8019e86:	a90d      	add	r1, sp, #52	@ 0x34
 8019e88:	c903      	ldmia	r1, {r0, r1}
 8019e8a:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
 8019e8e:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 8019e92:	009b      	lsls	r3, r3, #2
 8019e94:	3328      	adds	r3, #40	@ 0x28
 8019e96:	a910      	add	r1, sp, #64	@ 0x40
 8019e98:	440b      	add	r3, r1
 8019e9a:	3304      	adds	r3, #4
 8019e9c:	9340      	str	r3, [sp, #256]	@ 0x100
                sp += 1;
 8019e9e:	3501      	adds	r5, #1
                ttag = 0;
 8019ea0:	923b      	str	r2, [sp, #236]	@ 0xec
                tmask = 0;
 8019ea2:	4692      	mov	sl, r2
                cb = lfs_dir_traverse_filter;
 8019ea4:	4b87      	ldr	r3, [pc, #540]	@ (801a0c4 <lfs_dir_traverse+0x318>)
 8019ea6:	933f      	str	r3, [sp, #252]	@ 0xfc
                diff = 0;
 8019ea8:	2300      	movs	r3, #0
 8019eaa:	9306      	str	r3, [sp, #24]
                end = 0;
 8019eac:	9305      	str	r3, [sp, #20]
                begin = 0;
 8019eae:	9304      	str	r3, [sp, #16]
 8019eb0:	e795      	b.n	8019dde <lfs_dir_traverse+0x32>
 8019eb2:	9d08      	ldr	r5, [sp, #32]
 8019eb4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8019eb6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8019eb8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019eba:	e790      	b.n	8019dde <lfs_dir_traverse+0x32>
                        dir->pair[0], off, &tag, sizeof(tag));
 8019ebc:	6832      	ldr	r2, [r6, #0]
                int err = lfs_bd_read(lfs,
 8019ebe:	2304      	movs	r3, #4
 8019ec0:	9303      	str	r3, [sp, #12]
 8019ec2:	a90f      	add	r1, sp, #60	@ 0x3c
 8019ec4:	9102      	str	r1, [sp, #8]
 8019ec6:	f8cd 9004 	str.w	r9, [sp, #4]
 8019eca:	9200      	str	r2, [sp, #0]
 8019ecc:	9a07      	ldr	r2, [sp, #28]
 8019ece:	2100      	movs	r1, #0
 8019ed0:	4610      	mov	r0, r2
 8019ed2:	f7ff fd29 	bl	8019928 <lfs_bd_read>
                if (err) {
 8019ed6:	4603      	mov	r3, r0
 8019ed8:	2800      	cmp	r0, #0
 8019eda:	f040 80ec 	bne.w	801a0b6 <lfs_dir_traverse+0x30a>
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8019ede:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return __builtin_bswap32(a);
 8019ee0:	ba1b      	rev	r3, r3
 8019ee2:	4063      	eors	r3, r4
 8019ee4:	f043 4400 	orr.w	r4, r3, #2147483648	@ 0x80000000
 8019ee8:	940f      	str	r4, [sp, #60]	@ 0x3c
                disk.block = dir->pair[0];
 8019eea:	6833      	ldr	r3, [r6, #0]
 8019eec:	930d      	str	r3, [sp, #52]	@ 0x34
                disk.off = off+sizeof(lfs_tag_t);
 8019eee:	f109 0304 	add.w	r3, r9, #4
 8019ef2:	930e      	str	r3, [sp, #56]	@ 0x38
                off += lfs_tag_dsize(ptag);
 8019ef4:	464f      	mov	r7, r9
                buffer = &disk;
 8019ef6:	f10d 0934 	add.w	r9, sp, #52	@ 0x34
 8019efa:	e78d      	b.n	8019e18 <lfs_dir_traverse+0x6c>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8019efc:	4b72      	ldr	r3, [pc, #456]	@ (801a0c8 <lfs_dir_traverse+0x31c>)
 8019efe:	4a73      	ldr	r2, [pc, #460]	@ (801a0cc <lfs_dir_traverse+0x320>)
 8019f00:	f240 31b6 	movw	r1, #950	@ 0x3b6
 8019f04:	4872      	ldr	r0, [pc, #456]	@ (801a0d0 <lfs_dir_traverse+0x324>)
 8019f06:	f00d f869 	bl	8026fdc <__assert_func>
            if (cb == lfs_dir_traverse_filter) {
 8019f0a:	4b6e      	ldr	r3, [pc, #440]	@ (801a0c4 <lfs_dir_traverse+0x318>)
 8019f0c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8019f0e:	429a      	cmp	r2, r3
 8019f10:	f43f af65 	beq.w	8019dde <lfs_dir_traverse+0x32>
            stack[sp] = (struct lfs_dir_traverse){
 8019f14:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 8019f18:	aa2e      	add	r2, sp, #184	@ 0xb8
 8019f1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019f1e:	223c      	movs	r2, #60	@ 0x3c
 8019f20:	2100      	movs	r1, #0
 8019f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8019f24:	f1a3 0078 	sub.w	r0, r3, #120	@ 0x78
 8019f28:	f00f fdaa 	bl	8029a80 <memset>
 8019f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f2e:	f843 6c78 	str.w	r6, [r3, #-120]
 8019f32:	f843 7c74 	str.w	r7, [r3, #-116]
 8019f36:	f843 4c70 	str.w	r4, [r3, #-112]
 8019f3a:	f843 8c6c 	str.w	r8, [r3, #-108]
 8019f3e:	f843 bc68 	str.w	fp, [r3, #-104]
 8019f42:	f843 ac64 	str.w	sl, [r3, #-100]
 8019f46:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8019f48:	f843 2c60 	str.w	r2, [r3, #-96]
 8019f4c:	9a04      	ldr	r2, [sp, #16]
 8019f4e:	f823 2c5c 	strh.w	r2, [r3, #-92]
 8019f52:	9a05      	ldr	r2, [sp, #20]
 8019f54:	f823 2c5a 	strh.w	r2, [r3, #-90]
 8019f58:	9906      	ldr	r1, [sp, #24]
 8019f5a:	f823 1c58 	strh.w	r1, [r3, #-88]
 8019f5e:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8019f60:	f843 2c54 	str.w	r2, [r3, #-84]
 8019f64:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 8019f66:	f843 2c50 	str.w	r2, [r3, #-80]
            sp += 1;
 8019f6a:	3501      	adds	r5, #1
            uint16_t fromid = lfs_tag_size(tag);
 8019f6c:	9b08      	ldr	r3, [sp, #32]
 8019f6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8019f72:	9204      	str	r2, [sp, #16]
    return (tag & 0x000ffc00) >> 10;
 8019f74:	f3c3 2389 	ubfx	r3, r3, #10, #10
            end = fromid+1;
 8019f78:	1c50      	adds	r0, r2, #1
 8019f7a:	9005      	str	r0, [sp, #20]
            diff = toid-fromid+diff;
 8019f7c:	1a9b      	subs	r3, r3, r2
 8019f7e:	fa11 f383 	uxtah	r3, r1, r3
 8019f82:	b21b      	sxth	r3, r3
 8019f84:	9306      	str	r3, [sp, #24]
            dir = buffer;
 8019f86:	464e      	mov	r6, r9
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8019f88:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8019f8c:	933b      	str	r3, [sp, #236]	@ 0xec
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8019f8e:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801a0d4 <lfs_dir_traverse+0x328>
            attrcount = 0;
 8019f92:	f04f 0b00 	mov.w	fp, #0
            attrs = NULL;
 8019f96:	46d8      	mov	r8, fp
            ptag = 0xffffffff;
 8019f98:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
            off = 0;
 8019f9c:	465f      	mov	r7, fp
 8019f9e:	e71e      	b.n	8019dde <lfs_dir_traverse+0x32>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8019fa0:	2300      	movs	r3, #0
 8019fa2:	9508      	str	r5, [sp, #32]
 8019fa4:	9609      	str	r6, [sp, #36]	@ 0x24
 8019fa6:	970a      	str	r7, [sp, #40]	@ 0x28
 8019fa8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8019faa:	461c      	mov	r4, r3
 8019fac:	9d06      	ldr	r5, [sp, #24]
 8019fae:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 8019fb0:	9f40      	ldr	r7, [sp, #256]	@ 0x100
 8019fb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return tag & 0x000003ff;
 8019fb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8019fb8:	4294      	cmp	r4, r2
 8019fba:	d219      	bcs.n	8019ff0 <lfs_dir_traverse+0x244>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8019fbc:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8019fc0:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 8019fc4:	f819 1021 	ldrb.w	r1, [r9, r1, lsl #2]
 8019fc8:	f501 7140 	add.w	r1, r1, #768	@ 0x300
    return (tag & 0x000ffc00) >> 10;
 8019fcc:	f3c3 2389 	ubfx	r3, r3, #10, #10
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8019fd0:	442b      	add	r3, r5
 8019fd2:	029b      	lsls	r3, r3, #10
 8019fd4:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8019fd8:	6891      	ldr	r1, [r2, #8]
 8019fda:	6852      	ldr	r2, [r2, #4]
 8019fdc:	4319      	orrs	r1, r3
 8019fde:	4638      	mov	r0, r7
 8019fe0:	47b0      	blx	r6
                if (res < 0) {
 8019fe2:	2800      	cmp	r0, #0
 8019fe4:	db66      	blt.n	801a0b4 <lfs_dir_traverse+0x308>
                if (res) {
 8019fe6:	2800      	cmp	r0, #0
 8019fe8:	f47f af63 	bne.w	8019eb2 <lfs_dir_traverse+0x106>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8019fec:	3401      	adds	r4, #1
 8019fee:	e7e0      	b.n	8019fb2 <lfs_dir_traverse+0x206>
 8019ff0:	9d08      	ldr	r5, [sp, #32]
 8019ff2:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8019ff4:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8019ff6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019ff8:	e6f1      	b.n	8019dde <lfs_dir_traverse+0x32>
                res = 0;
 8019ffa:	2300      	movs	r3, #0
    if (sp > 0) {
 8019ffc:	2d00      	cmp	r5, #0
 8019ffe:	d05a      	beq.n	801a0b6 <lfs_dir_traverse+0x30a>
        dir         = stack[sp-1].dir;
 801a000:	3d01      	subs	r5, #1
 801a002:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801a006:	aa2e      	add	r2, sp, #184	@ 0xb8
 801a008:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a00c:	f853 6c78 	ldr.w	r6, [r3, #-120]
        off         = stack[sp-1].off;
 801a010:	f853 7c74 	ldr.w	r7, [r3, #-116]
        ptag        = stack[sp-1].ptag;
 801a014:	f853 4c70 	ldr.w	r4, [r3, #-112]
        attrs       = stack[sp-1].attrs;
 801a018:	f853 8c6c 	ldr.w	r8, [r3, #-108]
        attrcount   = stack[sp-1].attrcount;
 801a01c:	f853 bc68 	ldr.w	fp, [r3, #-104]
        tmask       = stack[sp-1].tmask;
 801a020:	f853 ac64 	ldr.w	sl, [r3, #-100]
        ttag        = stack[sp-1].ttag;
 801a024:	f853 2c60 	ldr.w	r2, [r3, #-96]
 801a028:	923b      	str	r2, [sp, #236]	@ 0xec
        begin       = stack[sp-1].begin;
 801a02a:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 801a02e:	9204      	str	r2, [sp, #16]
        end         = stack[sp-1].end;
 801a030:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
 801a034:	9205      	str	r2, [sp, #20]
        diff        = stack[sp-1].diff;
 801a036:	f933 2c58 	ldrsh.w	r2, [r3, #-88]
 801a03a:	9206      	str	r2, [sp, #24]
        cb          = stack[sp-1].cb;
 801a03c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 801a040:	923f      	str	r2, [sp, #252]	@ 0xfc
        data        = stack[sp-1].data;
 801a042:	f853 2c50 	ldr.w	r2, [r3, #-80]
 801a046:	9240      	str	r2, [sp, #256]	@ 0x100
        tag         = stack[sp-1].tag;
 801a048:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 801a04c:	920f      	str	r2, [sp, #60]	@ 0x3c
        buffer      = stack[sp-1].buffer;
 801a04e:	f853 9c48 	ldr.w	r9, [r3, #-72]
        disk        = stack[sp-1].disk;
 801a052:	aa0d      	add	r2, sp, #52	@ 0x34
 801a054:	3b44      	subs	r3, #68	@ 0x44
 801a056:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a05a:	e882 0003 	stmia.w	r2, {r0, r1}
    return (tag & 0x000ffc00) >> 10;
 801a05e:	f3ca 2389 	ubfx	r3, sl, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801a062:	b153      	cbz	r3, 801a07a <lfs_dir_traverse+0x2ce>
    return (tag & 0x000ffc00) >> 10;
 801a064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a066:	f3c3 2389 	ubfx	r3, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801a06a:	9a04      	ldr	r2, [sp, #16]
 801a06c:	429a      	cmp	r2, r3
 801a06e:	f63f aeb6 	bhi.w	8019dde <lfs_dir_traverse+0x32>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 801a072:	9a05      	ldr	r2, [sp, #20]
 801a074:	429a      	cmp	r2, r3
 801a076:	f67f aeb2 	bls.w	8019dde <lfs_dir_traverse+0x32>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801a07a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a07c:	9308      	str	r3, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801a07e:	f3c3 530a 	ubfx	r3, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801a082:	2b00      	cmp	r3, #0
 801a084:	f43f aeab 	beq.w	8019dde <lfs_dir_traverse+0x32>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 801a088:	f240 1201 	movw	r2, #257	@ 0x101
 801a08c:	4293      	cmp	r3, r2
 801a08e:	f43f af3c 	beq.w	8019f0a <lfs_dir_traverse+0x15e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 801a092:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 801a096:	d083      	beq.n	8019fa0 <lfs_dir_traverse+0x1f4>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 801a098:	464a      	mov	r2, r9
 801a09a:	9b08      	ldr	r3, [sp, #32]
 801a09c:	9906      	ldr	r1, [sp, #24]
 801a09e:	eb03 2181 	add.w	r1, r3, r1, lsl #10
 801a0a2:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801a0a4:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 801a0a6:	4798      	blx	r3
            if (res < 0) {
 801a0a8:	1e03      	subs	r3, r0, #0
 801a0aa:	db04      	blt.n	801a0b6 <lfs_dir_traverse+0x30a>
            if (res) {
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	f43f ae96 	beq.w	8019dde <lfs_dir_traverse+0x32>
 801a0b2:	e7a3      	b.n	8019ffc <lfs_dir_traverse+0x250>
 801a0b4:	4603      	mov	r3, r0
}
 801a0b6:	4618      	mov	r0, r3
 801a0b8:	b02f      	add	sp, #188	@ 0xbc
 801a0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0be:	bf00      	nop
 801a0c0:	7ff00000 	.word	0x7ff00000
 801a0c4:	080196e1 	.word	0x080196e1
 801a0c8:	08035668 	.word	0x08035668
 801a0cc:	08036278 	.word	0x08036278
 801a0d0:	0803558c 	.word	0x0803558c
 801a0d4:	600ffc00 	.word	0x600ffc00

0801a0d8 <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
 801a0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0dc:	b087      	sub	sp, #28
 801a0de:	4606      	mov	r6, r0
 801a0e0:	468a      	mov	sl, r1
 801a0e2:	4617      	mov	r7, r2
 801a0e4:	461c      	mov	r4, r3
 801a0e6:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 801a0ea:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 801a0ee:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801a0f0:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
    if (off+size > lfs->cfg->block_size) {
 801a0f4:	eb05 0208 	add.w	r2, r5, r8
 801a0f8:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801a0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a0fc:	429a      	cmp	r2, r3
 801a0fe:	d94d      	bls.n	801a19c <lfs_dir_getread+0xc4>
        return LFS_ERR_CORRUPT;
 801a100:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801a104:	e076      	b.n	801a1f4 <lfs_dir_getread+0x11c>
                off < pcache->off + pcache->size) {
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	68ba      	ldr	r2, [r7, #8]
 801a10a:	1899      	adds	r1, r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801a10c:	42a9      	cmp	r1, r5
 801a10e:	d91c      	bls.n	801a14a <lfs_dir_getread+0x72>
            if (off >= pcache->off) {
 801a110:	42ab      	cmp	r3, r5
 801a112:	d904      	bls.n	801a11e <lfs_dir_getread+0x46>
            diff = lfs_min(diff, pcache->off-off);
 801a114:	1b5b      	subs	r3, r3, r5
    return (a < b) ? a : b;
 801a116:	4543      	cmp	r3, r8
 801a118:	bf28      	it	cs
 801a11a:	4643      	movcs	r3, r8
 801a11c:	e048      	b.n	801a1b0 <lfs_dir_getread+0xd8>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801a11e:	1b59      	subs	r1, r3, r5
 801a120:	440a      	add	r2, r1
 801a122:	4542      	cmp	r2, r8
 801a124:	bf28      	it	cs
 801a126:	4642      	movcs	r2, r8
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801a128:	68f9      	ldr	r1, [r7, #12]
 801a12a:	1aeb      	subs	r3, r5, r3
 801a12c:	9205      	str	r2, [sp, #20]
 801a12e:	4419      	add	r1, r3
 801a130:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801a132:	f010 fee1 	bl	802aef8 <memcpy>
                data += diff;
 801a136:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801a138:	9b05      	ldr	r3, [sp, #20]
 801a13a:	4419      	add	r1, r3
 801a13c:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801a13e:	441d      	add	r5, r3
                size -= diff;
 801a140:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801a144:	e02a      	b.n	801a19c <lfs_dir_getread+0xc4>
        lfs_size_t diff = size;
 801a146:	4643      	mov	r3, r8
 801a148:	e032      	b.n	801a1b0 <lfs_dir_getread+0xd8>
 801a14a:	4643      	mov	r3, r8
 801a14c:	e030      	b.n	801a1b0 <lfs_dir_getread+0xd8>
        rcache->block = LFS_BLOCK_INLINE;
 801a14e:	f06f 0301 	mvn.w	r3, #1
 801a152:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801a154:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801a156:	69db      	ldr	r3, [r3, #28]
    return a - (a % alignment);
 801a158:	fbb5 f2f3 	udiv	r2, r5, r3
 801a15c:	fb03 5212 	mls	r2, r3, r2, r5
 801a160:	1aaa      	subs	r2, r5, r2
 801a162:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801a164:	eb05 030b 	add.w	r3, r5, fp
 801a168:	6eb1      	ldr	r1, [r6, #104]	@ 0x68
 801a16a:	69c8      	ldr	r0, [r1, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801a16c:	4403      	add	r3, r0
 801a16e:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801a170:	fbb3 fcf0 	udiv	ip, r3, r0
 801a174:	fb00 301c 	mls	r0, r0, ip, r3
 801a178:	1a1b      	subs	r3, r3, r0
                lfs->cfg->cache_size);
 801a17a:	6b09      	ldr	r1, [r1, #48]	@ 0x30
    return (a < b) ? a : b;
 801a17c:	428b      	cmp	r3, r1
 801a17e:	bf28      	it	cs
 801a180:	460b      	movcs	r3, r1
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801a182:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
 801a184:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 801a186:	9302      	str	r3, [sp, #8]
 801a188:	9101      	str	r1, [sp, #4]
 801a18a:	9200      	str	r2, [sp, #0]
 801a18c:	464b      	mov	r3, r9
 801a18e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a190:	4651      	mov	r1, sl
 801a192:	4630      	mov	r0, r6
 801a194:	f7ff fcb8 	bl	8019b08 <lfs_dir_getslice>
        if (err < 0) {
 801a198:	2800      	cmp	r0, #0
 801a19a:	db2b      	blt.n	801a1f4 <lfs_dir_getread+0x11c>
    while (size > 0) {
 801a19c:	f1b8 0f00 	cmp.w	r8, #0
 801a1a0:	d027      	beq.n	801a1f2 <lfs_dir_getread+0x11a>
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801a1a2:	2f00      	cmp	r7, #0
 801a1a4:	d0cf      	beq.n	801a146 <lfs_dir_getread+0x6e>
 801a1a6:	683b      	ldr	r3, [r7, #0]
 801a1a8:	f113 0f02 	cmn.w	r3, #2
 801a1ac:	d0ab      	beq.n	801a106 <lfs_dir_getread+0x2e>
        lfs_size_t diff = size;
 801a1ae:	4643      	mov	r3, r8
        if (rcache->block == LFS_BLOCK_INLINE &&
 801a1b0:	6822      	ldr	r2, [r4, #0]
 801a1b2:	f112 0f02 	cmn.w	r2, #2
 801a1b6:	d1ca      	bne.n	801a14e <lfs_dir_getread+0x76>
                off < rcache->off + rcache->size) {
 801a1b8:	6862      	ldr	r2, [r4, #4]
 801a1ba:	68a1      	ldr	r1, [r4, #8]
 801a1bc:	1850      	adds	r0, r2, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
 801a1be:	42a8      	cmp	r0, r5
 801a1c0:	d9c5      	bls.n	801a14e <lfs_dir_getread+0x76>
            if (off >= rcache->off) {
 801a1c2:	42aa      	cmp	r2, r5
 801a1c4:	d8c3      	bhi.n	801a14e <lfs_dir_getread+0x76>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801a1c6:	1b50      	subs	r0, r2, r5
 801a1c8:	4401      	add	r1, r0
 801a1ca:	4608      	mov	r0, r1
 801a1cc:	4299      	cmp	r1, r3
 801a1ce:	bf28      	it	cs
 801a1d0:	4618      	movcs	r0, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801a1d2:	68e3      	ldr	r3, [r4, #12]
 801a1d4:	1aa9      	subs	r1, r5, r2
 801a1d6:	9005      	str	r0, [sp, #20]
 801a1d8:	4602      	mov	r2, r0
 801a1da:	4419      	add	r1, r3
 801a1dc:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801a1de:	f010 fe8b 	bl	802aef8 <memcpy>
                data += diff;
 801a1e2:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801a1e4:	9b05      	ldr	r3, [sp, #20]
 801a1e6:	4419      	add	r1, r3
 801a1e8:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801a1ea:	441d      	add	r5, r3
                size -= diff;
 801a1ec:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801a1f0:	e7d4      	b.n	801a19c <lfs_dir_getread+0xc4>
    return 0;
 801a1f2:	2000      	movs	r0, #0
}
 801a1f4:	b007      	add	sp, #28
 801a1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a1fa <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
 801a1fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1fe:	b089      	sub	sp, #36	@ 0x24
 801a200:	4682      	mov	sl, r0
 801a202:	4689      	mov	r9, r1
 801a204:	9205      	str	r2, [sp, #20]
 801a206:	461f      	mov	r7, r3
 801a208:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 801a20c:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 801a210:	9e15      	ldr	r6, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801a212:	2400      	movs	r4, #0
 801a214:	e002      	b.n	801a21c <lfs_bd_cmp+0x22>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801a216:	2301      	movs	r3, #1
 801a218:	e023      	b.n	801a262 <lfs_bd_cmp+0x68>
    for (lfs_off_t i = 0; i < size; i += diff) {
 801a21a:	442c      	add	r4, r5
 801a21c:	42b4      	cmp	r4, r6
 801a21e:	d21f      	bcs.n	801a260 <lfs_bd_cmp+0x66>
        diff = lfs_min(size-i, sizeof(dat));
 801a220:	1b35      	subs	r5, r6, r4
 801a222:	2d08      	cmp	r5, #8
 801a224:	bf28      	it	cs
 801a226:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801a228:	9503      	str	r5, [sp, #12]
 801a22a:	ab06      	add	r3, sp, #24
 801a22c:	9302      	str	r3, [sp, #8]
 801a22e:	eb04 0308 	add.w	r3, r4, r8
 801a232:	9301      	str	r3, [sp, #4]
 801a234:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a236:	9300      	str	r3, [sp, #0]
 801a238:	1b3b      	subs	r3, r7, r4
 801a23a:	9a05      	ldr	r2, [sp, #20]
 801a23c:	4649      	mov	r1, r9
 801a23e:	4650      	mov	r0, sl
 801a240:	f7ff fb72 	bl	8019928 <lfs_bd_read>
        if (err) {
 801a244:	4603      	mov	r3, r0
 801a246:	b960      	cbnz	r0, 801a262 <lfs_bd_cmp+0x68>
        int res = memcmp(dat, data + i, diff);
 801a248:	462a      	mov	r2, r5
 801a24a:	eb0b 0104 	add.w	r1, fp, r4
 801a24e:	a806      	add	r0, sp, #24
 801a250:	f00f fb82 	bl	8029958 <memcmp>
        if (res) {
 801a254:	2800      	cmp	r0, #0
 801a256:	d0e0      	beq.n	801a21a <lfs_bd_cmp+0x20>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801a258:	2800      	cmp	r0, #0
 801a25a:	dbdc      	blt.n	801a216 <lfs_bd_cmp+0x1c>
 801a25c:	2302      	movs	r3, #2
 801a25e:	e000      	b.n	801a262 <lfs_bd_cmp+0x68>
    return LFS_CMP_EQ;
 801a260:	2300      	movs	r3, #0
}
 801a262:	4618      	mov	r0, r3
 801a264:	b009      	add	sp, #36	@ 0x24
 801a266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a26c <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801a26c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a270:	b085      	sub	sp, #20
 801a272:	460c      	mov	r4, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 801a274:	6809      	ldr	r1, [r1, #0]
 801a276:	f111 0f03 	cmn.w	r1, #3
 801a27a:	d83f      	bhi.n	801a2fc <lfs_bd_flush+0x90>
 801a27c:	4607      	mov	r7, r0
 801a27e:	4691      	mov	r9, r2
 801a280:	4698      	mov	r8, r3
        LFS_ASSERT(pcache->block < lfs->block_count);
 801a282:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801a284:	4299      	cmp	r1, r3
 801a286:	d22d      	bcs.n	801a2e4 <lfs_bd_flush+0x78>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 801a288:	68a5      	ldr	r5, [r4, #8]
 801a28a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801a28c:	6a02      	ldr	r2, [r0, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801a28e:	4415      	add	r5, r2
 801a290:	3d01      	subs	r5, #1
    return a - (a % alignment);
 801a292:	fbb5 f3f2 	udiv	r3, r5, r2
 801a296:	fb02 5313 	mls	r3, r2, r3, r5
 801a29a:	1aee      	subs	r6, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 801a29c:	6885      	ldr	r5, [r0, #8]
 801a29e:	9600      	str	r6, [sp, #0]
 801a2a0:	68e3      	ldr	r3, [r4, #12]
 801a2a2:	6862      	ldr	r2, [r4, #4]
 801a2a4:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
 801a2a6:	1e05      	subs	r5, r0, #0
 801a2a8:	dc22      	bgt.n	801a2f0 <lfs_bd_flush+0x84>
        if (err) {
 801a2aa:	bb45      	cbnz	r5, 801a2fe <lfs_bd_flush+0x92>
        if (validate) {
 801a2ac:	f1b8 0f00 	cmp.w	r8, #0
 801a2b0:	d013      	beq.n	801a2da <lfs_bd_flush+0x6e>
    rcache->block = LFS_BLOCK_NULL;
 801a2b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a2b6:	f8c9 3000 	str.w	r3, [r9]
                    pcache->block, pcache->off, pcache->buffer, diff);
 801a2ba:	68e3      	ldr	r3, [r4, #12]
            int res = lfs_bd_cmp(lfs,
 801a2bc:	9603      	str	r6, [sp, #12]
 801a2be:	9302      	str	r3, [sp, #8]
 801a2c0:	6863      	ldr	r3, [r4, #4]
 801a2c2:	9301      	str	r3, [sp, #4]
 801a2c4:	6823      	ldr	r3, [r4, #0]
 801a2c6:	9300      	str	r3, [sp, #0]
 801a2c8:	4633      	mov	r3, r6
 801a2ca:	464a      	mov	r2, r9
 801a2cc:	2100      	movs	r1, #0
 801a2ce:	4638      	mov	r0, r7
 801a2d0:	f7ff ff93 	bl	801a1fa <lfs_bd_cmp>
            if (res < 0) {
 801a2d4:	2800      	cmp	r0, #0
 801a2d6:	db16      	blt.n	801a306 <lfs_bd_flush+0x9a>
            if (res != LFS_CMP_EQ) {
 801a2d8:	b9b8      	cbnz	r0, 801a30a <lfs_bd_flush+0x9e>
        lfs_cache_zero(lfs, pcache);
 801a2da:	4621      	mov	r1, r4
 801a2dc:	4638      	mov	r0, r7
 801a2de:	f7ff faf9 	bl	80198d4 <lfs_cache_zero>
 801a2e2:	e00c      	b.n	801a2fe <lfs_bd_flush+0x92>
        LFS_ASSERT(pcache->block < lfs->block_count);
 801a2e4:	4b0a      	ldr	r3, [pc, #40]	@ (801a310 <lfs_bd_flush+0xa4>)
 801a2e6:	4a0b      	ldr	r2, [pc, #44]	@ (801a314 <lfs_bd_flush+0xa8>)
 801a2e8:	21b3      	movs	r1, #179	@ 0xb3
 801a2ea:	480b      	ldr	r0, [pc, #44]	@ (801a318 <lfs_bd_flush+0xac>)
 801a2ec:	f00c fe76 	bl	8026fdc <__assert_func>
        LFS_ASSERT(err <= 0);
 801a2f0:	4b0a      	ldr	r3, [pc, #40]	@ (801a31c <lfs_bd_flush+0xb0>)
 801a2f2:	4a08      	ldr	r2, [pc, #32]	@ (801a314 <lfs_bd_flush+0xa8>)
 801a2f4:	21b7      	movs	r1, #183	@ 0xb7
 801a2f6:	4808      	ldr	r0, [pc, #32]	@ (801a318 <lfs_bd_flush+0xac>)
 801a2f8:	f00c fe70 	bl	8026fdc <__assert_func>
    return 0;
 801a2fc:	2500      	movs	r5, #0
}
 801a2fe:	4628      	mov	r0, r5
 801a300:	b005      	add	sp, #20
 801a302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return res;
 801a306:	4605      	mov	r5, r0
 801a308:	e7f9      	b.n	801a2fe <lfs_bd_flush+0x92>
                return LFS_ERR_CORRUPT;
 801a30a:	f06f 0553 	mvn.w	r5, #83	@ 0x53
 801a30e:	e7f6      	b.n	801a2fe <lfs_bd_flush+0x92>
 801a310:	08035670 	.word	0x08035670
 801a314:	080362bc 	.word	0x080362bc
 801a318:	0803558c 	.word	0x0803558c
 801a31c:	080355bc 	.word	0x080355bc

0801a320 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 801a320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a324:	b083      	sub	sp, #12
 801a326:	4607      	mov	r7, r0
 801a328:	460c      	mov	r4, r1
 801a32a:	9201      	str	r2, [sp, #4]
 801a32c:	469b      	mov	fp, r3
 801a32e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a330:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801a332:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801a336:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801a33a:	f116 0f02 	cmn.w	r6, #2
 801a33e:	d002      	beq.n	801a346 <lfs_bd_prog+0x26>
 801a340:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801a342:	42b3      	cmp	r3, r6
 801a344:	d90b      	bls.n	801a35e <lfs_bd_prog+0x3e>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 801a346:	eb05 0308 	add.w	r3, r5, r8
 801a34a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a34c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801a34e:	4293      	cmp	r3, r2
 801a350:	d919      	bls.n	801a386 <lfs_bd_prog+0x66>
 801a352:	4b2b      	ldr	r3, [pc, #172]	@ (801a400 <lfs_bd_prog+0xe0>)
 801a354:	4a2b      	ldr	r2, [pc, #172]	@ (801a404 <lfs_bd_prog+0xe4>)
 801a356:	21e9      	movs	r1, #233	@ 0xe9
 801a358:	482b      	ldr	r0, [pc, #172]	@ (801a408 <lfs_bd_prog+0xe8>)
 801a35a:	f00c fe3f 	bl	8026fdc <__assert_func>
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801a35e:	4b2b      	ldr	r3, [pc, #172]	@ (801a40c <lfs_bd_prog+0xec>)
 801a360:	4a28      	ldr	r2, [pc, #160]	@ (801a404 <lfs_bd_prog+0xe4>)
 801a362:	21e8      	movs	r1, #232	@ 0xe8
 801a364:	4828      	ldr	r0, [pc, #160]	@ (801a408 <lfs_bd_prog+0xe8>)
 801a366:	f00c fe39 	bl	8026fdc <__assert_func>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801a36a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a36e:	d13c      	bne.n	801a3ea <lfs_bd_prog+0xca>
        pcache->block = block;
 801a370:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 801a372:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a374:	6a1a      	ldr	r2, [r3, #32]
 801a376:	fbb5 f3f2 	udiv	r3, r5, r2
 801a37a:	fb02 5313 	mls	r3, r2, r3, r5
 801a37e:	1aeb      	subs	r3, r5, r3
 801a380:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
 801a382:	2300      	movs	r3, #0
 801a384:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
 801a386:	f1b8 0f00 	cmp.w	r8, #0
 801a38a:	d035      	beq.n	801a3f8 <lfs_bd_prog+0xd8>
        if (block == pcache->block &&
 801a38c:	6823      	ldr	r3, [r4, #0]
 801a38e:	42b3      	cmp	r3, r6
 801a390:	d1eb      	bne.n	801a36a <lfs_bd_prog+0x4a>
                off >= pcache->off &&
 801a392:	6862      	ldr	r2, [r4, #4]
        if (block == pcache->block &&
 801a394:	42aa      	cmp	r2, r5
 801a396:	d8e8      	bhi.n	801a36a <lfs_bd_prog+0x4a>
                off < pcache->off + lfs->cfg->cache_size) {
 801a398:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a39a:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 801a39c:	1850      	adds	r0, r2, r1
                off >= pcache->off &&
 801a39e:	42a8      	cmp	r0, r5
 801a3a0:	d9e3      	bls.n	801a36a <lfs_bd_prog+0x4a>
                    lfs->cfg->cache_size - (off-pcache->off));
 801a3a2:	1b53      	subs	r3, r2, r5
            lfs_size_t diff = lfs_min(size,
 801a3a4:	eb01 0903 	add.w	r9, r1, r3
    return (a < b) ? a : b;
 801a3a8:	45c1      	cmp	r9, r8
 801a3aa:	bf28      	it	cs
 801a3ac:	46c1      	movcs	r9, r8
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 801a3ae:	68e3      	ldr	r3, [r4, #12]
 801a3b0:	1aa8      	subs	r0, r5, r2
 801a3b2:	464a      	mov	r2, r9
 801a3b4:	4651      	mov	r1, sl
 801a3b6:	4418      	add	r0, r3
 801a3b8:	f010 fd9e 	bl	802aef8 <memcpy>
            data += diff;
 801a3bc:	44ca      	add	sl, r9
            off += diff;
 801a3be:	444d      	add	r5, r9
            size -= diff;
 801a3c0:	eba8 0809 	sub.w	r8, r8, r9
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 801a3c4:	68a2      	ldr	r2, [r4, #8]
 801a3c6:	6863      	ldr	r3, [r4, #4]
 801a3c8:	1aeb      	subs	r3, r5, r3
    return (a > b) ? a : b;
 801a3ca:	4293      	cmp	r3, r2
 801a3cc:	bf38      	it	cc
 801a3ce:	4613      	movcc	r3, r2
 801a3d0:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 801a3d2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a3d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801a3d6:	429a      	cmp	r2, r3
 801a3d8:	d1d5      	bne.n	801a386 <lfs_bd_prog+0x66>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801a3da:	465b      	mov	r3, fp
 801a3dc:	9a01      	ldr	r2, [sp, #4]
 801a3de:	4621      	mov	r1, r4
 801a3e0:	4638      	mov	r0, r7
 801a3e2:	f7ff ff43 	bl	801a26c <lfs_bd_flush>
                if (err) {
 801a3e6:	b940      	cbnz	r0, 801a3fa <lfs_bd_prog+0xda>
 801a3e8:	e7cd      	b.n	801a386 <lfs_bd_prog+0x66>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801a3ea:	4b09      	ldr	r3, [pc, #36]	@ (801a410 <lfs_bd_prog+0xf0>)
 801a3ec:	4a05      	ldr	r2, [pc, #20]	@ (801a404 <lfs_bd_prog+0xe4>)
 801a3ee:	f44f 7183 	mov.w	r1, #262	@ 0x106
 801a3f2:	4805      	ldr	r0, [pc, #20]	@ (801a408 <lfs_bd_prog+0xe8>)
 801a3f4:	f00c fdf2 	bl	8026fdc <__assert_func>
    return 0;
 801a3f8:	2000      	movs	r0, #0
}
 801a3fa:	b003      	add	sp, #12
 801a3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a400:	080356cc 	.word	0x080356cc
 801a404:	080362cc 	.word	0x080362cc
 801a408:	0803558c 	.word	0x0803558c
 801a40c:	08035694 	.word	0x08035694
 801a410:	080356f0 	.word	0x080356f0

0801a414 <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801a414:	b538      	push	{r3, r4, r5, lr}
 801a416:	4604      	mov	r4, r0
    rcache->block = LFS_BLOCK_NULL;
 801a418:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801a41c:	6015      	str	r5, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801a41e:	f7ff ff25 	bl	801a26c <lfs_bd_flush>
    if (err) {
 801a422:	4603      	mov	r3, r0
 801a424:	b920      	cbnz	r0, 801a430 <lfs_bd_sync+0x1c>
    err = lfs->cfg->sync(lfs->cfg);
 801a426:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801a428:	6903      	ldr	r3, [r0, #16]
 801a42a:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801a42c:	1e03      	subs	r3, r0, #0
 801a42e:	dc01      	bgt.n	801a434 <lfs_bd_sync+0x20>
}
 801a430:	4618      	mov	r0, r3
 801a432:	bd38      	pop	{r3, r4, r5, pc}
    LFS_ASSERT(err <= 0);
 801a434:	4b02      	ldr	r3, [pc, #8]	@ (801a440 <lfs_bd_sync+0x2c>)
 801a436:	4a03      	ldr	r2, [pc, #12]	@ (801a444 <lfs_bd_sync+0x30>)
 801a438:	21dd      	movs	r1, #221	@ 0xdd
 801a43a:	4803      	ldr	r0, [pc, #12]	@ (801a448 <lfs_bd_sync+0x34>)
 801a43c:	f00c fdce 	bl	8026fdc <__assert_func>
 801a440:	080355bc 	.word	0x080355bc
 801a444:	0803626c 	.word	0x0803626c
 801a448:	0803558c 	.word	0x0803558c

0801a44c <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 801a44c:	b570      	push	{r4, r5, r6, lr}
 801a44e:	b084      	sub	sp, #16
 801a450:	4604      	mov	r4, r0
 801a452:	4694      	mov	ip, r2
    lfs_t *lfs = name->lfs;
 801a454:	6800      	ldr	r0, [r0, #0]
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 801a456:	68a3      	ldr	r3, [r4, #8]
    return tag & 0x000003ff;
 801a458:	f3c1 0509 	ubfx	r5, r1, #0, #10
    return (a < b) ? a : b;
 801a45c:	42ab      	cmp	r3, r5
 801a45e:	bf28      	it	cs
 801a460:	462b      	movcs	r3, r5
            disk->block, disk->off, name->name, diff);
 801a462:	6812      	ldr	r2, [r2, #0]
 801a464:	f8dc 1004 	ldr.w	r1, [ip, #4]
    int res = lfs_bd_cmp(lfs,
 801a468:	9303      	str	r3, [sp, #12]
 801a46a:	6866      	ldr	r6, [r4, #4]
 801a46c:	9602      	str	r6, [sp, #8]
 801a46e:	9101      	str	r1, [sp, #4]
 801a470:	9200      	str	r2, [sp, #0]
 801a472:	4602      	mov	r2, r0
 801a474:	2100      	movs	r1, #0
 801a476:	f7ff fec0 	bl	801a1fa <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
 801a47a:	b920      	cbnz	r0, 801a486 <lfs_dir_find_match+0x3a>
    if (name->size != lfs_tag_size(tag)) {
 801a47c:	68a3      	ldr	r3, [r4, #8]
 801a47e:	42ab      	cmp	r3, r5
 801a480:	d001      	beq.n	801a486 <lfs_dir_find_match+0x3a>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801a482:	d202      	bcs.n	801a48a <lfs_dir_find_match+0x3e>
 801a484:	2001      	movs	r0, #1
}
 801a486:	b004      	add	sp, #16
 801a488:	bd70      	pop	{r4, r5, r6, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801a48a:	2002      	movs	r0, #2
 801a48c:	e7fb      	b.n	801a486 <lfs_dir_find_match+0x3a>

0801a48e <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 801a48e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a492:	b089      	sub	sp, #36	@ 0x24
 801a494:	9305      	str	r3, [sp, #20]
 801a496:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (size == 0) {
 801a498:	b953      	cbnz	r3, 801a4b0 <lfs_ctz_find+0x22>
        *block = LFS_BLOCK_NULL;
 801a49a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a49e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a4a0:	6013      	str	r3, [r2, #0]
        *off = 0;
 801a4a2:	2300      	movs	r3, #0
 801a4a4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a4a6:	6013      	str	r3, [r2, #0]
}
 801a4a8:	4618      	mov	r0, r3
 801a4aa:	b009      	add	sp, #36	@ 0x24
 801a4ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a4b0:	4607      	mov	r7, r0
 801a4b2:	4688      	mov	r8, r1
 801a4b4:	4691      	mov	r9, r2
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801a4b6:	3b01      	subs	r3, #1
 801a4b8:	9307      	str	r3, [sp, #28]
 801a4ba:	a907      	add	r1, sp, #28
 801a4bc:	f7ff fa16 	bl	80198ec <lfs_ctz_index>
 801a4c0:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 801a4c2:	a911      	add	r1, sp, #68	@ 0x44
 801a4c4:	4638      	mov	r0, r7
 801a4c6:	f7ff fa11 	bl	80198ec <lfs_ctz_index>
 801a4ca:	4606      	mov	r6, r0
    while (current > target) {
 801a4cc:	42b5      	cmp	r5, r6
 801a4ce:	d91f      	bls.n	801a510 <lfs_ctz_find+0x82>
                lfs_npw2(current-target+1) - 1,
 801a4d0:	1bac      	subs	r4, r5, r6
    return 32 - __builtin_clz(a-1);
 801a4d2:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
 801a4d6:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
 801a4da:	fa95 f3a5 	rbit	r3, r5
 801a4de:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
 801a4e2:	429c      	cmp	r4, r3
 801a4e4:	bf28      	it	cs
 801a4e6:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 801a4e8:	2304      	movs	r3, #4
 801a4ea:	9303      	str	r3, [sp, #12]
 801a4ec:	aa05      	add	r2, sp, #20
 801a4ee:	9202      	str	r2, [sp, #8]
 801a4f0:	00a2      	lsls	r2, r4, #2
 801a4f2:	9201      	str	r2, [sp, #4]
 801a4f4:	9a05      	ldr	r2, [sp, #20]
 801a4f6:	9200      	str	r2, [sp, #0]
 801a4f8:	464a      	mov	r2, r9
 801a4fa:	4641      	mov	r1, r8
 801a4fc:	4638      	mov	r0, r7
 801a4fe:	f7ff fa13 	bl	8019928 <lfs_bd_read>
        if (err) {
 801a502:	4603      	mov	r3, r0
 801a504:	2800      	cmp	r0, #0
 801a506:	d1cf      	bne.n	801a4a8 <lfs_ctz_find+0x1a>
        current -= 1 << skip;
 801a508:	2301      	movs	r3, #1
 801a50a:	40a3      	lsls	r3, r4
 801a50c:	1aed      	subs	r5, r5, r3
 801a50e:	e7dd      	b.n	801a4cc <lfs_ctz_find+0x3e>
    *block = head;
 801a510:	9b05      	ldr	r3, [sp, #20]
 801a512:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a514:	6013      	str	r3, [r2, #0]
    *off = pos;
 801a516:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a518:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a51a:	6013      	str	r3, [r2, #0]
    return 0;
 801a51c:	2300      	movs	r3, #0
 801a51e:	e7c3      	b.n	801a4a8 <lfs_ctz_find+0x1a>

0801a520 <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
 801a520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a524:	b087      	sub	sp, #28
 801a526:	460c      	mov	r4, r1
 801a528:	4617      	mov	r7, r2
    if (file->pos >= file->ctz.size) {
 801a52a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801a52c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a52e:	4291      	cmp	r1, r2
 801a530:	d272      	bcs.n	801a618 <lfs_file_flushedread+0xf8>
 801a532:	4680      	mov	r8, r0
    size = lfs_min(size, file->ctz.size - file->pos);
 801a534:	eba2 0901 	sub.w	r9, r2, r1
 801a538:	4599      	cmp	r9, r3
 801a53a:	bf28      	it	cs
 801a53c:	4699      	movcs	r9, r3
    nsize = size;
 801a53e:	464e      	mov	r6, r9
    while (nsize > 0) {
 801a540:	e037      	b.n	801a5b2 <lfs_file_flushedread+0x92>
            if (!(file->flags & LFS_F_INLINE)) {
 801a542:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801a546:	d041      	beq.n	801a5cc <lfs_file_flushedread+0xac>
                file->block = LFS_BLOCK_INLINE;
 801a548:	f06f 0301 	mvn.w	r3, #1
 801a54c:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801a54e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a550:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_READING;
 801a552:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801a558:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801a55a:	f8d8 3068 	ldr.w	r3, [r8, #104]	@ 0x68
 801a55e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a560:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801a562:	1a9d      	subs	r5, r3, r2
 801a564:	42b5      	cmp	r5, r6
 801a566:	bf28      	it	cs
 801a568:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
 801a56a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a56c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 801a570:	d041      	beq.n	801a5f6 <lfs_file_flushedread+0xd6>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801a572:	88a1      	ldrh	r1, [r4, #4]
 801a574:	0289      	lsls	r1, r1, #10
            int err = lfs_dir_getread(lfs, &file->m,
 801a576:	9505      	str	r5, [sp, #20]
 801a578:	9704      	str	r7, [sp, #16]
 801a57a:	9203      	str	r2, [sp, #12]
 801a57c:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801a580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 801a584:	9102      	str	r1, [sp, #8]
 801a586:	4a27      	ldr	r2, [pc, #156]	@ (801a624 <lfs_file_flushedread+0x104>)
 801a588:	9201      	str	r2, [sp, #4]
 801a58a:	9300      	str	r3, [sp, #0]
 801a58c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801a590:	2200      	movs	r2, #0
 801a592:	f104 0108 	add.w	r1, r4, #8
 801a596:	4640      	mov	r0, r8
 801a598:	f7ff fd9e 	bl	801a0d8 <lfs_dir_getread>
            if (err) {
 801a59c:	4603      	mov	r3, r0
 801a59e:	2800      	cmp	r0, #0
 801a5a0:	d13b      	bne.n	801a61a <lfs_file_flushedread+0xfa>
        file->pos += diff;
 801a5a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a5a4:	442b      	add	r3, r5
 801a5a6:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801a5a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801a5aa:	442b      	add	r3, r5
 801a5ac:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801a5ae:	442f      	add	r7, r5
        nsize -= diff;
 801a5b0:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
 801a5b2:	2e00      	cmp	r6, #0
 801a5b4:	d02e      	beq.n	801a614 <lfs_file_flushedread+0xf4>
        if (!(file->flags & LFS_F_READING) ||
 801a5b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a5b8:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801a5bc:	d0c1      	beq.n	801a542 <lfs_file_flushedread+0x22>
                file->off == lfs->cfg->block_size) {
 801a5be:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801a5c0:	f8d8 2068 	ldr.w	r2, [r8, #104]	@ 0x68
 801a5c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 801a5c6:	4291      	cmp	r1, r2
 801a5c8:	d1c7      	bne.n	801a55a <lfs_file_flushedread+0x3a>
 801a5ca:	e7ba      	b.n	801a542 <lfs_file_flushedread+0x22>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801a5cc:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801a5d0:	9303      	str	r3, [sp, #12]
 801a5d2:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801a5d6:	9302      	str	r3, [sp, #8]
 801a5d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a5da:	9301      	str	r3, [sp, #4]
 801a5dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801a5de:	9300      	str	r3, [sp, #0]
 801a5e0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801a5e2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801a5e6:	2100      	movs	r1, #0
 801a5e8:	4640      	mov	r0, r8
 801a5ea:	f7ff ff50 	bl	801a48e <lfs_ctz_find>
                if (err) {
 801a5ee:	4603      	mov	r3, r0
 801a5f0:	2800      	cmp	r0, #0
 801a5f2:	d0ae      	beq.n	801a552 <lfs_file_flushedread+0x32>
 801a5f4:	e011      	b.n	801a61a <lfs_file_flushedread+0xfa>
            int err = lfs_bd_read(lfs,
 801a5f6:	9503      	str	r5, [sp, #12]
 801a5f8:	9702      	str	r7, [sp, #8]
 801a5fa:	9201      	str	r2, [sp, #4]
 801a5fc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801a5fe:	9200      	str	r2, [sp, #0]
 801a600:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801a604:	2100      	movs	r1, #0
 801a606:	4640      	mov	r0, r8
 801a608:	f7ff f98e 	bl	8019928 <lfs_bd_read>
            if (err) {
 801a60c:	4603      	mov	r3, r0
 801a60e:	2800      	cmp	r0, #0
 801a610:	d0c7      	beq.n	801a5a2 <lfs_file_flushedread+0x82>
 801a612:	e002      	b.n	801a61a <lfs_file_flushedread+0xfa>
    return size;
 801a614:	464b      	mov	r3, r9
 801a616:	e000      	b.n	801a61a <lfs_file_flushedread+0xfa>
        return 0;
 801a618:	2300      	movs	r3, #0
}
 801a61a:	4618      	mov	r0, r3
 801a61c:	b007      	add	sp, #28
 801a61e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a622:	bf00      	nop
 801a624:	fff7fc00 	.word	0xfff7fc00

0801a628 <lfs_bd_crc>:
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 801a628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a62c:	b089      	sub	sp, #36	@ 0x24
 801a62e:	4683      	mov	fp, r0
 801a630:	468a      	mov	sl, r1
 801a632:	9205      	str	r2, [sp, #20]
 801a634:	4698      	mov	r8, r3
 801a636:	f8dd 904c 	ldr.w	r9, [sp, #76]	@ 0x4c
 801a63a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801a63c:	9f15      	ldr	r7, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801a63e:	2400      	movs	r4, #0
 801a640:	e006      	b.n	801a650 <lfs_bd_crc+0x28>
        *crc = lfs_crc(*crc, &dat, diff);
 801a642:	462a      	mov	r2, r5
 801a644:	a906      	add	r1, sp, #24
 801a646:	6838      	ldr	r0, [r7, #0]
 801a648:	f003 fd82 	bl	801e150 <lfs_crc>
 801a64c:	6038      	str	r0, [r7, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 801a64e:	442c      	add	r4, r5
 801a650:	42b4      	cmp	r4, r6
 801a652:	d216      	bcs.n	801a682 <lfs_bd_crc+0x5a>
        diff = lfs_min(size-i, sizeof(dat));
 801a654:	1b35      	subs	r5, r6, r4
 801a656:	2d08      	cmp	r5, #8
 801a658:	bf28      	it	cs
 801a65a:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801a65c:	9503      	str	r5, [sp, #12]
 801a65e:	ab06      	add	r3, sp, #24
 801a660:	9302      	str	r3, [sp, #8]
 801a662:	eb04 0309 	add.w	r3, r4, r9
 801a666:	9301      	str	r3, [sp, #4]
 801a668:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a66a:	9300      	str	r3, [sp, #0]
 801a66c:	eba8 0304 	sub.w	r3, r8, r4
 801a670:	9a05      	ldr	r2, [sp, #20]
 801a672:	4651      	mov	r1, sl
 801a674:	4658      	mov	r0, fp
 801a676:	f7ff f957 	bl	8019928 <lfs_bd_read>
        if (err) {
 801a67a:	4603      	mov	r3, r0
 801a67c:	2800      	cmp	r0, #0
 801a67e:	d0e0      	beq.n	801a642 <lfs_bd_crc+0x1a>
 801a680:	e000      	b.n	801a684 <lfs_bd_crc+0x5c>
    return 0;
 801a682:	2300      	movs	r3, #0
}
 801a684:	4618      	mov	r0, r3
 801a686:	b009      	add	sp, #36	@ 0x24
 801a688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a68c <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801a68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a690:	b097      	sub	sp, #92	@ 0x5c
 801a692:	4605      	mov	r5, r0
 801a694:	460e      	mov	r6, r1
 801a696:	4617      	mov	r7, r2
 801a698:	9305      	str	r3, [sp, #20]
    if (lfs->block_count 
 801a69a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801a69c:	b13b      	cbz	r3, 801a6ae <lfs_dir_fetchmatch+0x22>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 801a69e:	6812      	ldr	r2, [r2, #0]
 801a6a0:	4293      	cmp	r3, r2
 801a6a2:	f240 825a 	bls.w	801ab5a <lfs_dir_fetchmatch+0x4ce>
 801a6a6:	687a      	ldr	r2, [r7, #4]
 801a6a8:	4293      	cmp	r3, r2
 801a6aa:	f240 8259 	bls.w	801ab60 <lfs_dir_fetchmatch+0x4d4>
    uint32_t revs[2] = {0, 0};
 801a6ae:	2400      	movs	r4, #0
 801a6b0:	9412      	str	r4, [sp, #72]	@ 0x48
 801a6b2:	9413      	str	r4, [sp, #76]	@ 0x4c
    for (int i = 0; i < 2; i++) {
 801a6b4:	46a0      	mov	r8, r4
 801a6b6:	e010      	b.n	801a6da <lfs_dir_fetchmatch+0x4e>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 801a6b8:	f118 0301 	adds.w	r3, r8, #1
 801a6bc:	f003 0301 	and.w	r3, r3, #1
 801a6c0:	bf48      	it	mi
 801a6c2:	425b      	negmi	r3, r3
 801a6c4:	a916      	add	r1, sp, #88	@ 0x58
 801a6c6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a6ca:	f853 3c10 	ldr.w	r3, [r3, #-16]
    return (int)(unsigned)(a - b);
 801a6ce:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
 801a6d0:	2a00      	cmp	r2, #0
 801a6d2:	dd00      	ble.n	801a6d6 <lfs_dir_fetchmatch+0x4a>
            r = i;
 801a6d4:	4644      	mov	r4, r8
    for (int i = 0; i < 2; i++) {
 801a6d6:	f108 0801 	add.w	r8, r8, #1
 801a6da:	f1b8 0f01 	cmp.w	r8, #1
 801a6de:	dc1d      	bgt.n	801a71c <lfs_dir_fetchmatch+0x90>
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801a6e0:	ea4f 0988 	mov.w	r9, r8, lsl #2
 801a6e4:	ab12      	add	r3, sp, #72	@ 0x48
 801a6e6:	eb03 0288 	add.w	r2, r3, r8, lsl #2
        int err = lfs_bd_read(lfs,
 801a6ea:	2304      	movs	r3, #4
 801a6ec:	9303      	str	r3, [sp, #12]
 801a6ee:	9202      	str	r2, [sp, #8]
 801a6f0:	2100      	movs	r1, #0
 801a6f2:	9101      	str	r1, [sp, #4]
 801a6f4:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 801a6f8:	9200      	str	r2, [sp, #0]
 801a6fa:	462a      	mov	r2, r5
 801a6fc:	4628      	mov	r0, r5
 801a6fe:	f7ff f913 	bl	8019928 <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
 801a702:	f109 0358 	add.w	r3, r9, #88	@ 0x58
 801a706:	eb0d 0903 	add.w	r9, sp, r3
 801a70a:	f859 2c10 	ldr.w	r2, [r9, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
 801a70e:	4683      	mov	fp, r0
 801a710:	2800      	cmp	r0, #0
 801a712:	d0d1      	beq.n	801a6b8 <lfs_dir_fetchmatch+0x2c>
 801a714:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801a718:	d0dd      	beq.n	801a6d6 <lfs_dir_fetchmatch+0x4a>
 801a71a:	e21a      	b.n	801ab52 <lfs_dir_fetchmatch+0x4c6>
    dir->pair[0] = pair[(r+0)%2];
 801a71c:	2c00      	cmp	r4, #0
 801a71e:	f004 0301 	and.w	r3, r4, #1
 801a722:	bfb8      	it	lt
 801a724:	425b      	neglt	r3, r3
 801a726:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 801a72a:	6032      	str	r2, [r6, #0]
    dir->pair[1] = pair[(r+1)%2];
 801a72c:	f114 0c01 	adds.w	ip, r4, #1
 801a730:	f00c 0c01 	and.w	ip, ip, #1
 801a734:	bf48      	it	mi
 801a736:	f1cc 0c00 	rsbmi	ip, ip, #0
 801a73a:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 801a73e:	6072      	str	r2, [r6, #4]
    dir->rev = revs[(r+0)%2];
 801a740:	aa16      	add	r2, sp, #88	@ 0x58
 801a742:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a746:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801a74a:	60b3      	str	r3, [r6, #8]
    dir->off = 0; // nonzero = found some commits
 801a74c:	2400      	movs	r4, #0
 801a74e:	60f4      	str	r4, [r6, #12]
    lfs_stag_t besttag = -1;
 801a750:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801a754:	f8cd c01c 	str.w	ip, [sp, #28]
 801a758:	46a1      	mov	r9, r4
    for (int i = 0; i < 2; i++) {
 801a75a:	f1b9 0f01 	cmp.w	r9, #1
 801a75e:	f300 81eb 	bgt.w	801ab38 <lfs_dir_fetchmatch+0x4ac>
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801a762:	4a90      	ldr	r2, [pc, #576]	@ (801a9a4 <lfs_dir_fetchmatch+0x318>)
 801a764:	ab0e      	add	r3, sp, #56	@ 0x38
 801a766:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a76a:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 801a76e:	2204      	movs	r2, #4
 801a770:	f106 0108 	add.w	r1, r6, #8
 801a774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a778:	f003 fcea 	bl	801e150 <lfs_crc>
 801a77c:	900b      	str	r0, [sp, #44]	@ 0x2c
        lfs_stag_t tempbesttag = besttag;
 801a77e:	f8cd b018 	str.w	fp, [sp, #24]
        bool hasfcrc = false;
 801a782:	2300      	movs	r3, #0
 801a784:	461c      	mov	r4, r3
 801a786:	9308      	str	r3, [sp, #32]
        bool tempsplit = false;
 801a788:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_tag_t ptag = 0xffffffff;
 801a78a:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
        lfs_off_t off = 0;
 801a78e:	461f      	mov	r7, r3
 801a790:	e110      	b.n	801a9b4 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801a792:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801a796:	d101      	bne.n	801a79c <lfs_dir_fetchmatch+0x110>
        bool maybeerased = false;
 801a798:	2300      	movs	r3, #0
 801a79a:	e01e      	b.n	801a7da <lfs_dir_fetchmatch+0x14e>
                return err;
 801a79c:	4683      	mov	fp, r0
 801a79e:	e1d8      	b.n	801ab52 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x78000000) >> 20;
 801a7a0:	ea4f 5318 	mov.w	r3, r8, lsr #20
 801a7a4:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 801a7a8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801a7ac:	bf14      	ite	ne
 801a7ae:	2300      	movne	r3, #0
 801a7b0:	2301      	moveq	r3, #1
                break;
 801a7b2:	e012      	b.n	801a7da <lfs_dir_fetchmatch+0x14e>
                err = lfs_bd_read(lfs,
 801a7b4:	2204      	movs	r2, #4
 801a7b6:	9203      	str	r2, [sp, #12]
 801a7b8:	aa0d      	add	r2, sp, #52	@ 0x34
 801a7ba:	9202      	str	r2, [sp, #8]
 801a7bc:	1d22      	adds	r2, r4, #4
 801a7be:	9201      	str	r2, [sp, #4]
 801a7c0:	6832      	ldr	r2, [r6, #0]
 801a7c2:	9200      	str	r2, [sp, #0]
 801a7c4:	462a      	mov	r2, r5
 801a7c6:	2100      	movs	r1, #0
 801a7c8:	4628      	mov	r0, r5
 801a7ca:	f7ff f8ad 	bl	8019928 <lfs_bd_read>
                if (err) {
 801a7ce:	bb80      	cbnz	r0, 801a832 <lfs_dir_fetchmatch+0x1a6>
                if (crc != dcrc) {
 801a7d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a7d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a7d4:	429a      	cmp	r2, r3
 801a7d6:	d031      	beq.n	801a83c <lfs_dir_fetchmatch+0x1b0>
        bool maybeerased = false;
 801a7d8:	2300      	movs	r3, #0
        if (dir->off == 0) {
 801a7da:	68f2      	ldr	r2, [r6, #12]
 801a7dc:	2a00      	cmp	r2, #0
 801a7de:	f000 8165 	beq.w	801aaac <lfs_dir_fetchmatch+0x420>
        dir->erased = false;
 801a7e2:	2100      	movs	r1, #0
 801a7e4:	75b1      	strb	r1, [r6, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 801a7e6:	b153      	cbz	r3, 801a7fe <lfs_dir_fetchmatch+0x172>
 801a7e8:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 801a7ea:	6a01      	ldr	r1, [r0, #32]
 801a7ec:	fbb2 f3f1 	udiv	r3, r2, r1
 801a7f0:	fb01 2313 	mls	r3, r1, r3, r2
 801a7f4:	b91b      	cbnz	r3, 801a7fe <lfs_dir_fetchmatch+0x172>
            if (hasfcrc) {
 801a7f6:	9b08      	ldr	r3, [sp, #32]
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	f040 8165 	bne.w	801aac8 <lfs_dir_fetchmatch+0x43c>
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 801a7fe:	4631      	mov	r1, r6
 801a800:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 801a804:	f7fe ff00 	bl	8019608 <lfs_gstate_hasmovehere>
 801a808:	2800      	cmp	r0, #0
 801a80a:	f000 817d 	beq.w	801ab08 <lfs_dir_fetchmatch+0x47c>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801a80e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801a810:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801a814:	f3cb 2289 	ubfx	r2, fp, #10, #10
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801a818:	429a      	cmp	r2, r3
 801a81a:	f000 8173 	beq.w	801ab04 <lfs_dir_fetchmatch+0x478>
            } else if (besttag != -1 &&
 801a81e:	f1bb 3fff 	cmp.w	fp, #4294967295	@ 0xffffffff
 801a822:	f000 8171 	beq.w	801ab08 <lfs_dir_fetchmatch+0x47c>
 801a826:	429a      	cmp	r2, r3
 801a828:	f240 816e 	bls.w	801ab08 <lfs_dir_fetchmatch+0x47c>
                besttag -= LFS_MKTAG(0, 1, 0);
 801a82c:	f5ab 6b80 	sub.w	fp, fp, #1024	@ 0x400
 801a830:	e16a      	b.n	801ab08 <lfs_dir_fetchmatch+0x47c>
                    if (err == LFS_ERR_CORRUPT) {
 801a832:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801a836:	d0cf      	beq.n	801a7d8 <lfs_dir_fetchmatch+0x14c>
                    return err;
 801a838:	4683      	mov	fp, r0
 801a83a:	e18a      	b.n	801ab52 <lfs_dir_fetchmatch+0x4c6>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 801a83c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a83e:	f3c3 5307 	ubfx	r3, r3, #20, #8
 801a842:	ea8a 78c3 	eor.w	r8, sl, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 801a846:	2204      	movs	r2, #4
 801a848:	a90b      	add	r1, sp, #44	@ 0x2c
 801a84a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801a84c:	f003 fc80 	bl	801e150 <lfs_crc>
 801a850:	62e8      	str	r0, [r5, #44]	@ 0x2c
                dir->off = off + lfs_tag_dsize(tag);
 801a852:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 801a854:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801a858:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801a85c:	bf08      	it	eq
 801a85e:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 801a860:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801a864:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
 801a866:	4423      	add	r3, r4
 801a868:	60f3      	str	r3, [r6, #12]
                dir->etag = ptag;
 801a86a:	f8c6 8010 	str.w	r8, [r6, #16]
                dir->count = tempcount;
 801a86e:	82b7      	strh	r7, [r6, #20]
                dir->tail[0] = temptail[0];
 801a870:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a872:	61b3      	str	r3, [r6, #24]
                dir->tail[1] = temptail[1];
 801a874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a876:	61f3      	str	r3, [r6, #28]
                dir->split = tempsplit;
 801a878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a87a:	75f3      	strb	r3, [r6, #23]
                crc = 0xffffffff;
 801a87c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a880:	930b      	str	r3, [sp, #44]	@ 0x2c
                besttag = tempbesttag;
 801a882:	f8dd b018 	ldr.w	fp, [sp, #24]
 801a886:	e095      	b.n	801a9b4 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801a888:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801a88c:	d101      	bne.n	801a892 <lfs_dir_fetchmatch+0x206>
        bool maybeerased = false;
 801a88e:	2300      	movs	r3, #0
 801a890:	e7a3      	b.n	801a7da <lfs_dir_fetchmatch+0x14e>
                return err;
 801a892:	4683      	mov	fp, r0
 801a894:	e15d      	b.n	801ab52 <lfs_dir_fetchmatch+0x4c6>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 801a896:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801a89a:	d021      	beq.n	801a8e0 <lfs_dir_fetchmatch+0x254>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 801a89c:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801a8a0:	d046      	beq.n	801a930 <lfs_dir_fetchmatch+0x2a4>
    return (tag & 0x7ff00000) >> 20;
 801a8a2:	f3c0 020a 	ubfx	r2, r0, #0, #11
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 801a8a6:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 801a8aa:	429a      	cmp	r2, r3
 801a8ac:	f040 80e3 	bne.w	801aa76 <lfs_dir_fetchmatch+0x3ea>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801a8b0:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801a8b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801a8b4:	2208      	movs	r2, #8
 801a8b6:	9203      	str	r2, [sp, #12]
 801a8b8:	aa10      	add	r2, sp, #64	@ 0x40
 801a8ba:	9202      	str	r2, [sp, #8]
 801a8bc:	f8cd 8004 	str.w	r8, [sp, #4]
 801a8c0:	6832      	ldr	r2, [r6, #0]
 801a8c2:	9200      	str	r2, [sp, #0]
 801a8c4:	462a      	mov	r2, r5
 801a8c6:	2100      	movs	r1, #0
 801a8c8:	4628      	mov	r0, r5
 801a8ca:	f7ff f82d 	bl	8019928 <lfs_bd_read>
                if (err) {
 801a8ce:	2800      	cmp	r0, #0
 801a8d0:	d04a      	beq.n	801a968 <lfs_dir_fetchmatch+0x2dc>
                    if (err == LFS_ERR_CORRUPT) {
 801a8d2:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801a8d6:	f000 80e7 	beq.w	801aaa8 <lfs_dir_fetchmatch+0x41c>
                hasfcrc = true;
 801a8da:	2301      	movs	r3, #1
 801a8dc:	9308      	str	r3, [sp, #32]
 801a8de:	e0ca      	b.n	801aa76 <lfs_dir_fetchmatch+0x3ea>
    return (int8_t)lfs_tag_chunk(tag);
 801a8e0:	b240      	sxtb	r0, r0
                tempcount += lfs_tag_splice(tag);
 801a8e2:	fa17 f280 	uxtah	r2, r7, r0
 801a8e6:	b297      	uxth	r7, r2
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 801a8e8:	9a06      	ldr	r2, [sp, #24]
 801a8ea:	4611      	mov	r1, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801a8ec:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801a8f0:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801a8f4:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801a8f8:	f022 0203 	bic.w	r2, r2, #3
 801a8fc:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801a900:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
 801a904:	4293      	cmp	r3, r2
 801a906:	d00f      	beq.n	801a928 <lfs_dir_fetchmatch+0x29c>
                } else if (tempbesttag != -1 &&
 801a908:	9a06      	ldr	r2, [sp, #24]
 801a90a:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801a90e:	f000 80b2 	beq.w	801aa76 <lfs_dir_fetchmatch+0x3ea>
    return (tag & 0x000ffc00) >> 10;
 801a912:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801a916:	f3c1 2289 	ubfx	r2, r1, #10, #10
                } else if (tempbesttag != -1 &&
 801a91a:	429a      	cmp	r2, r3
 801a91c:	f0c0 80ab 	bcc.w	801aa76 <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801a920:	eb01 2380 	add.w	r3, r1, r0, lsl #10
 801a924:	9306      	str	r3, [sp, #24]
 801a926:	e0a6      	b.n	801aa76 <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag |= 0x80000000;
 801a928:	f041 4300 	orr.w	r3, r1, #2147483648	@ 0x80000000
 801a92c:	9306      	str	r3, [sp, #24]
 801a92e:	e0a2      	b.n	801aa76 <lfs_dir_fetchmatch+0x3ea>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 801a930:	f000 0301 	and.w	r3, r0, #1
 801a934:	9309      	str	r3, [sp, #36]	@ 0x24
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801a936:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801a938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801a93a:	2208      	movs	r2, #8
 801a93c:	9203      	str	r2, [sp, #12]
 801a93e:	aa0e      	add	r2, sp, #56	@ 0x38
 801a940:	9202      	str	r2, [sp, #8]
 801a942:	f8cd 8004 	str.w	r8, [sp, #4]
 801a946:	6832      	ldr	r2, [r6, #0]
 801a948:	9200      	str	r2, [sp, #0]
 801a94a:	462a      	mov	r2, r5
 801a94c:	2100      	movs	r1, #0
 801a94e:	4628      	mov	r0, r5
 801a950:	f7fe ffea 	bl	8019928 <lfs_bd_read>
                if (err) {
 801a954:	2800      	cmp	r0, #0
 801a956:	f000 808e 	beq.w	801aa76 <lfs_dir_fetchmatch+0x3ea>
                    if (err == LFS_ERR_CORRUPT) {
 801a95a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801a95e:	d101      	bne.n	801a964 <lfs_dir_fetchmatch+0x2d8>
        bool maybeerased = false;
 801a960:	2300      	movs	r3, #0
 801a962:	e73a      	b.n	801a7da <lfs_dir_fetchmatch+0x14e>
                    return err;
 801a964:	4683      	mov	fp, r0
 801a966:	e0f4      	b.n	801ab52 <lfs_dir_fetchmatch+0x4c6>
                hasfcrc = true;
 801a968:	2301      	movs	r3, #1
 801a96a:	9308      	str	r3, [sp, #32]
 801a96c:	e083      	b.n	801aa76 <lfs_dir_fetchmatch+0x3ea>
                    if (res == LFS_ERR_CORRUPT) {
 801a96e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801a972:	d101      	bne.n	801a978 <lfs_dir_fetchmatch+0x2ec>
        bool maybeerased = false;
 801a974:	2300      	movs	r3, #0
 801a976:	e730      	b.n	801a7da <lfs_dir_fetchmatch+0x14e>
                    return res;
 801a978:	4683      	mov	fp, r0
 801a97a:	e0ea      	b.n	801ab52 <lfs_dir_fetchmatch+0x4c6>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 801a97c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a97e:	9b06      	ldr	r3, [sp, #24]
 801a980:	469c      	mov	ip, r3
 801a982:	ea82 0103 	eor.w	r1, r2, r3
 801a986:	4b08      	ldr	r3, [pc, #32]	@ (801a9a8 <lfs_dir_fetchmatch+0x31c>)
 801a988:	400b      	ands	r3, r1
 801a98a:	b17b      	cbz	r3, 801a9ac <lfs_dir_fetchmatch+0x320>
                } else if (res == LFS_CMP_GT &&
 801a98c:	2802      	cmp	r0, #2
 801a98e:	d110      	bne.n	801a9b2 <lfs_dir_fetchmatch+0x326>
    return (tag & 0x000ffc00) >> 10;
 801a990:	f3c2 2389 	ubfx	r3, r2, #10, #10
 801a994:	f3cc 2c89 	ubfx	ip, ip, #10, #10
                } else if (res == LFS_CMP_GT &&
 801a998:	459c      	cmp	ip, r3
 801a99a:	d30a      	bcc.n	801a9b2 <lfs_dir_fetchmatch+0x326>
                    tempbesttag = tag | 0x80000000;
 801a99c:	f042 4300 	orr.w	r3, r2, #2147483648	@ 0x80000000
 801a9a0:	9306      	str	r3, [sp, #24]
 801a9a2:	e006      	b.n	801a9b2 <lfs_dir_fetchmatch+0x326>
 801a9a4:	08032dc4 	.word	0x08032dc4
 801a9a8:	7ffffc00 	.word	0x7ffffc00
                    tempbesttag = -1;
 801a9ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a9b0:	9306      	str	r3, [sp, #24]
            ptag = tag;
 801a9b2:	46d0      	mov	r8, sl
    return ((int32_t)(tag << 22) >> 22) == -1;
 801a9b4:	f348 0209 	sbfx	r2, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801a9b8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801a9bc:	bf14      	ite	ne
 801a9be:	4643      	movne	r3, r8
 801a9c0:	f108 0301 	addeq.w	r3, r8, #1
    return tag & 0x000003ff;
 801a9c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801a9c8:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
 801a9ca:	441c      	add	r4, r3
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 801a9cc:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801a9ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 801a9d0:	2204      	movs	r2, #4
 801a9d2:	9203      	str	r2, [sp, #12]
 801a9d4:	aa0c      	add	r2, sp, #48	@ 0x30
 801a9d6:	9202      	str	r2, [sp, #8]
 801a9d8:	9401      	str	r4, [sp, #4]
 801a9da:	6832      	ldr	r2, [r6, #0]
 801a9dc:	9200      	str	r2, [sp, #0]
 801a9de:	462a      	mov	r2, r5
 801a9e0:	2100      	movs	r1, #0
 801a9e2:	4628      	mov	r0, r5
 801a9e4:	f7fe ffa0 	bl	8019928 <lfs_bd_read>
            if (err) {
 801a9e8:	2800      	cmp	r0, #0
 801a9ea:	f47f aed2 	bne.w	801a792 <lfs_dir_fetchmatch+0x106>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 801a9ee:	2204      	movs	r2, #4
 801a9f0:	a90c      	add	r1, sp, #48	@ 0x30
 801a9f2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801a9f4:	f003 fbac 	bl	801e150 <lfs_crc>
 801a9f8:	900b      	str	r0, [sp, #44]	@ 0x2c
            tag = lfs_frombe32(tag) ^ ptag;
 801a9fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return __builtin_bswap32(a);
 801a9fc:	ba1b      	rev	r3, r3
 801a9fe:	ea88 0a03 	eor.w	sl, r8, r3
 801aa02:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
            if (!lfs_tag_isvalid(tag)) {
 801aa06:	f1ba 0f00 	cmp.w	sl, #0
 801aa0a:	f6ff aec9 	blt.w	801a7a0 <lfs_dir_fetchmatch+0x114>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801aa0e:	f34a 0309 	sbfx	r3, sl, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801aa12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801aa16:	bf14      	ite	ne
 801aa18:	4652      	movne	r2, sl
 801aa1a:	f10a 0201 	addeq.w	r2, sl, #1
    return tag & 0x000003ff;
 801aa1e:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801aa22:	1d11      	adds	r1, r2, #4
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 801aa24:	4421      	add	r1, r4
 801aa26:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801aa28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa2a:	4299      	cmp	r1, r3
 801aa2c:	d83a      	bhi.n	801aaa4 <lfs_dir_fetchmatch+0x418>
    return (tag & 0x78000000) >> 20;
 801aa2e:	ea4f 511a 	mov.w	r1, sl, lsr #20
 801aa32:	f401 61f0 	and.w	r1, r1, #1920	@ 0x780
            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 801aa36:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 801aa3a:	f43f aebb 	beq.w	801a7b4 <lfs_dir_fetchmatch+0x128>
            err = lfs_bd_crc(lfs,
 801aa3e:	f104 0804 	add.w	r8, r4, #4
 801aa42:	a90b      	add	r1, sp, #44	@ 0x2c
 801aa44:	9103      	str	r1, [sp, #12]
 801aa46:	9202      	str	r2, [sp, #8]
 801aa48:	f8cd 8004 	str.w	r8, [sp, #4]
 801aa4c:	6832      	ldr	r2, [r6, #0]
 801aa4e:	9200      	str	r2, [sp, #0]
 801aa50:	462a      	mov	r2, r5
 801aa52:	2100      	movs	r1, #0
 801aa54:	4628      	mov	r0, r5
 801aa56:	f7ff fde7 	bl	801a628 <lfs_bd_crc>
            if (err) {
 801aa5a:	2800      	cmp	r0, #0
 801aa5c:	f47f af14 	bne.w	801a888 <lfs_dir_fetchmatch+0x1fc>
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801aa60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801aa62:	0d18      	lsrs	r0, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801aa64:	f410 61e0 	ands.w	r1, r0, #1792	@ 0x700
 801aa68:	f47f af15 	bne.w	801a896 <lfs_dir_fetchmatch+0x20a>
    return (tag & 0x000ffc00) >> 10;
 801aa6c:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 801aa70:	429f      	cmp	r7, r3
 801aa72:	d800      	bhi.n	801aa76 <lfs_dir_fetchmatch+0x3ea>
                    tempcount = lfs_tag_id(tag) + 1;
 801aa74:	1c5f      	adds	r7, r3, #1
            if ((fmask & tag) == (fmask & ftag)) {
 801aa76:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801aa78:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801aa7a:	404b      	eors	r3, r1
 801aa7c:	9a05      	ldr	r2, [sp, #20]
 801aa7e:	4213      	tst	r3, r2
 801aa80:	d197      	bne.n	801a9b2 <lfs_dir_fetchmatch+0x326>
                        dir->pair[0], off+sizeof(tag)});
 801aa82:	6833      	ldr	r3, [r6, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 801aa84:	9314      	str	r3, [sp, #80]	@ 0x50
 801aa86:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 801aa8a:	aa14      	add	r2, sp, #80	@ 0x50
 801aa8c:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801aa8e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801aa90:	4798      	blx	r3
                if (res < 0) {
 801aa92:	2800      	cmp	r0, #0
 801aa94:	f6ff af6b 	blt.w	801a96e <lfs_dir_fetchmatch+0x2e2>
                if (res == LFS_CMP_EQ) {
 801aa98:	2800      	cmp	r0, #0
 801aa9a:	f47f af6f 	bne.w	801a97c <lfs_dir_fetchmatch+0x2f0>
                    tempbesttag = tag;
 801aa9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aaa0:	9306      	str	r3, [sp, #24]
 801aaa2:	e786      	b.n	801a9b2 <lfs_dir_fetchmatch+0x326>
        bool maybeerased = false;
 801aaa4:	2300      	movs	r3, #0
 801aaa6:	e698      	b.n	801a7da <lfs_dir_fetchmatch+0x14e>
 801aaa8:	2300      	movs	r3, #0
 801aaaa:	e696      	b.n	801a7da <lfs_dir_fetchmatch+0x14e>
    lfs_block_t t = pair[0];
 801aaac:	6833      	ldr	r3, [r6, #0]
    pair[0] = pair[1];
 801aaae:	6872      	ldr	r2, [r6, #4]
 801aab0:	6032      	str	r2, [r6, #0]
    pair[1] = t;
 801aab2:	6073      	str	r3, [r6, #4]
            dir->rev = revs[(r+1)%2];
 801aab4:	aa16      	add	r2, sp, #88	@ 0x58
 801aab6:	9b07      	ldr	r3, [sp, #28]
 801aab8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801aabc:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801aac0:	60b3      	str	r3, [r6, #8]
    for (int i = 0; i < 2; i++) {
 801aac2:	f109 0901 	add.w	r9, r9, #1
 801aac6:	e648      	b.n	801a75a <lfs_dir_fetchmatch+0xce>
                uint32_t fcrc_ = 0xffffffff;
 801aac8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801aacc:	930d      	str	r3, [sp, #52]	@ 0x34
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801aace:	6a43      	ldr	r3, [r0, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 801aad0:	a90d      	add	r1, sp, #52	@ 0x34
 801aad2:	9103      	str	r1, [sp, #12]
 801aad4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801aad6:	9102      	str	r1, [sp, #8]
 801aad8:	9201      	str	r2, [sp, #4]
 801aada:	6832      	ldr	r2, [r6, #0]
 801aadc:	9200      	str	r2, [sp, #0]
 801aade:	462a      	mov	r2, r5
 801aae0:	2100      	movs	r1, #0
 801aae2:	4628      	mov	r0, r5
 801aae4:	f7ff fda0 	bl	801a628 <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801aae8:	b120      	cbz	r0, 801aaf4 <lfs_dir_fetchmatch+0x468>
 801aaea:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801aaee:	d001      	beq.n	801aaf4 <lfs_dir_fetchmatch+0x468>
                    return err;
 801aaf0:	4683      	mov	fp, r0
 801aaf2:	e02e      	b.n	801ab52 <lfs_dir_fetchmatch+0x4c6>
                dir->erased = (fcrc_ == fcrc.crc);
 801aaf4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801aaf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801aaf8:	4293      	cmp	r3, r2
 801aafa:	bf14      	ite	ne
 801aafc:	2300      	movne	r3, #0
 801aafe:	2301      	moveq	r3, #1
 801ab00:	75b3      	strb	r3, [r6, #22]
 801ab02:	e67c      	b.n	801a7fe <lfs_dir_fetchmatch+0x172>
                besttag |= 0x80000000;
 801ab04:	f04b 4b00 	orr.w	fp, fp, #2147483648	@ 0x80000000
        if (id) {
 801ab08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ab0a:	b13b      	cbz	r3, 801ab1c <lfs_dir_fetchmatch+0x490>
    return (tag & 0x000ffc00) >> 10;
 801ab0c:	f3cb 2389 	ubfx	r3, fp, #10, #10
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 801ab10:	8ab2      	ldrh	r2, [r6, #20]
    return (a < b) ? a : b;
 801ab12:	4293      	cmp	r3, r2
 801ab14:	bf28      	it	cs
 801ab16:	4613      	movcs	r3, r2
 801ab18:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ab1a:	8013      	strh	r3, [r2, #0]
        if (lfs_tag_isvalid(besttag)) {
 801ab1c:	f1bb 0f00 	cmp.w	fp, #0
 801ab20:	da17      	bge.n	801ab52 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x000ffc00) >> 10;
 801ab22:	f3cb 2389 	ubfx	r3, fp, #10, #10
        } else if (lfs_tag_id(besttag) < dir->count) {
 801ab26:	8ab2      	ldrh	r2, [r6, #20]
 801ab28:	429a      	cmp	r2, r3
 801ab2a:	d902      	bls.n	801ab32 <lfs_dir_fetchmatch+0x4a6>
            return LFS_ERR_NOENT;
 801ab2c:	f06f 0b01 	mvn.w	fp, #1
 801ab30:	e00f      	b.n	801ab52 <lfs_dir_fetchmatch+0x4c6>
            return 0;
 801ab32:	f04f 0b00 	mov.w	fp, #0
 801ab36:	e00c      	b.n	801ab52 <lfs_dir_fetchmatch+0x4c6>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 801ab38:	4b0b      	ldr	r3, [pc, #44]	@ (801ab68 <lfs_dir_fetchmatch+0x4dc>)
 801ab3a:	9301      	str	r3, [sp, #4]
 801ab3c:	6873      	ldr	r3, [r6, #4]
 801ab3e:	9300      	str	r3, [sp, #0]
 801ab40:	6833      	ldr	r3, [r6, #0]
 801ab42:	f240 5259 	movw	r2, #1369	@ 0x559
 801ab46:	4909      	ldr	r1, [pc, #36]	@ (801ab6c <lfs_dir_fetchmatch+0x4e0>)
 801ab48:	4809      	ldr	r0, [pc, #36]	@ (801ab70 <lfs_dir_fetchmatch+0x4e4>)
 801ab4a:	f00c fa7b 	bl	8027044 <printf>
    return LFS_ERR_CORRUPT;
 801ab4e:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
}
 801ab52:	4658      	mov	r0, fp
 801ab54:	b017      	add	sp, #92	@ 0x5c
 801ab56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801ab5a:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801ab5e:	e7f8      	b.n	801ab52 <lfs_dir_fetchmatch+0x4c6>
 801ab60:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801ab64:	e7f5      	b.n	801ab52 <lfs_dir_fetchmatch+0x4c6>
 801ab66:	bf00      	nop
 801ab68:	080337f8 	.word	0x080337f8
 801ab6c:	0803558c 	.word	0x0803558c
 801ab70:	08035714 	.word	0x08035714

0801ab74 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 801ab74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab78:	b08a      	sub	sp, #40	@ 0x28
 801ab7a:	4681      	mov	r9, r0
 801ab7c:	4688      	mov	r8, r1
 801ab7e:	4614      	mov	r4, r2
    parent->tail[0] = 0;
 801ab80:	2300      	movs	r3, #0
 801ab82:	6193      	str	r3, [r2, #24]
    parent->tail[1] = 1;
 801ab84:	2501      	movs	r5, #1
 801ab86:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801ab88:	4a29      	ldr	r2, [pc, #164]	@ (801ac30 <lfs_fs_parent+0xbc>)
 801ab8a:	ab05      	add	r3, sp, #20
 801ab8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ab90:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801ab94:	46aa      	mov	sl, r5
    while (!lfs_pair_isnull(parent->tail)) {
 801ab96:	e03a      	b.n	801ac0e <lfs_fs_parent+0x9a>
            LFS_WARN("Cycle detected in tail list");
 801ab98:	4b26      	ldr	r3, [pc, #152]	@ (801ac34 <lfs_fs_parent+0xc0>)
 801ab9a:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 801ab9e:	4926      	ldr	r1, [pc, #152]	@ (801ac38 <lfs_fs_parent+0xc4>)
 801aba0:	4826      	ldr	r0, [pc, #152]	@ (801ac3c <lfs_fs_parent+0xc8>)
 801aba2:	f00c fa4f 	bl	8027044 <printf>
            return LFS_ERR_CORRUPT;
 801aba6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801abaa:	e03c      	b.n	801ac26 <lfs_fs_parent+0xb2>
            tortoise[0] = parent->tail[0];
 801abac:	9705      	str	r7, [sp, #20]
            tortoise[1] = parent->tail[1];
 801abae:	69e3      	ldr	r3, [r4, #28]
 801abb0:	9306      	str	r3, [sp, #24]
            tortoise_period *= 2;
 801abb2:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801abb6:	2500      	movs	r5, #0
 801abb8:	e00d      	b.n	801abd6 <lfs_fs_parent+0x62>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801abba:	2301      	movs	r3, #1
 801abbc:	e000      	b.n	801abc0 <lfs_fs_parent+0x4c>
 801abbe:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(parent->tail)) {
 801abc0:	bb7b      	cbnz	r3, 801ac22 <lfs_fs_parent+0xae>
        if (lfs_pair_issync(parent->tail, tortoise)) {
 801abc2:	f104 0618 	add.w	r6, r4, #24
 801abc6:	a905      	add	r1, sp, #20
 801abc8:	4630      	mov	r0, r6
 801abca:	f7fe fce7 	bl	801959c <lfs_pair_issync>
 801abce:	2800      	cmp	r0, #0
 801abd0:	d1e2      	bne.n	801ab98 <lfs_fs_parent+0x24>
        if (tortoise_i == tortoise_period) {
 801abd2:	4555      	cmp	r5, sl
 801abd4:	d0ea      	beq.n	801abac <lfs_fs_parent+0x38>
        tortoise_i += 1;
 801abd6:	3501      	adds	r5, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801abd8:	f8cd 901c 	str.w	r9, [sp, #28]
                    lfs, {pair[0], pair[1]}});
 801abdc:	f8d8 3000 	ldr.w	r3, [r8]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801abe0:	9308      	str	r3, [sp, #32]
                    lfs, {pair[0], pair[1]}});
 801abe2:	f8d8 3004 	ldr.w	r3, [r8, #4]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801abe6:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 801abe8:	ab07      	add	r3, sp, #28
 801abea:	9303      	str	r3, [sp, #12]
 801abec:	4b14      	ldr	r3, [pc, #80]	@ (801ac40 <lfs_fs_parent+0xcc>)
 801abee:	9302      	str	r3, [sp, #8]
 801abf0:	2300      	movs	r3, #0
 801abf2:	9301      	str	r3, [sp, #4]
 801abf4:	4b13      	ldr	r3, [pc, #76]	@ (801ac44 <lfs_fs_parent+0xd0>)
 801abf6:	9300      	str	r3, [sp, #0]
 801abf8:	4b13      	ldr	r3, [pc, #76]	@ (801ac48 <lfs_fs_parent+0xd4>)
 801abfa:	4632      	mov	r2, r6
 801abfc:	4621      	mov	r1, r4
 801abfe:	4648      	mov	r0, r9
 801ac00:	f7ff fd44 	bl	801a68c <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 801ac04:	4603      	mov	r3, r0
 801ac06:	b110      	cbz	r0, 801ac0e <lfs_fs_parent+0x9a>
 801ac08:	f110 0f02 	cmn.w	r0, #2
 801ac0c:	d10b      	bne.n	801ac26 <lfs_fs_parent+0xb2>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801ac0e:	69a7      	ldr	r7, [r4, #24]
 801ac10:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801ac14:	d0d3      	beq.n	801abbe <lfs_fs_parent+0x4a>
 801ac16:	69e3      	ldr	r3, [r4, #28]
 801ac18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ac1c:	d0cd      	beq.n	801abba <lfs_fs_parent+0x46>
 801ac1e:	2300      	movs	r3, #0
 801ac20:	e7ce      	b.n	801abc0 <lfs_fs_parent+0x4c>
    return LFS_ERR_NOENT;
 801ac22:	f06f 0301 	mvn.w	r3, #1
}
 801ac26:	4618      	mov	r0, r3
 801ac28:	b00a      	add	sp, #40	@ 0x28
 801ac2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac2e:	bf00      	nop
 801ac30:	08032dc4 	.word	0x08032dc4
 801ac34:	080337f8 	.word	0x080337f8
 801ac38:	0803558c 	.word	0x0803558c
 801ac3c:	0803574c 	.word	0x0803574c
 801ac40:	08019d5d 	.word	0x08019d5d
 801ac44:	20000008 	.word	0x20000008
 801ac48:	7ff003ff 	.word	0x7ff003ff

0801ac4c <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 801ac4c:	b500      	push	{lr}
 801ac4e:	b085      	sub	sp, #20
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 801ac50:	2300      	movs	r3, #0
 801ac52:	9303      	str	r3, [sp, #12]
 801ac54:	9302      	str	r3, [sp, #8]
 801ac56:	9301      	str	r3, [sp, #4]
 801ac58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ac5c:	9300      	str	r3, [sp, #0]
 801ac5e:	f7ff fd15 	bl	801a68c <lfs_dir_fetchmatch>
}
 801ac62:	b005      	add	sp, #20
 801ac64:	f85d fb04 	ldr.w	pc, [sp], #4

0801ac68 <lfs_fs_traverse_>:
        bool includeorphans) {
 801ac68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac6c:	b093      	sub	sp, #76	@ 0x4c
 801ac6e:	4606      	mov	r6, r0
 801ac70:	460f      	mov	r7, r1
 801ac72:	4690      	mov	r8, r2
 801ac74:	4699      	mov	r9, r3
    lfs_mdir_t dir = {.tail = {0, 1}};
 801ac76:	2220      	movs	r2, #32
 801ac78:	2100      	movs	r1, #0
 801ac7a:	a80a      	add	r0, sp, #40	@ 0x28
 801ac7c:	f00e ff00 	bl	8029a80 <memset>
 801ac80:	2501      	movs	r5, #1
 801ac82:	9511      	str	r5, [sp, #68]	@ 0x44
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801ac84:	4a62      	ldr	r2, [pc, #392]	@ (801ae10 <lfs_fs_traverse_+0x1a8>)
 801ac86:	ab08      	add	r3, sp, #32
 801ac88:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ac8c:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801ac90:	46aa      	mov	sl, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801ac92:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ac94:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801ac98:	f000 8081 	beq.w	801ad9e <lfs_fs_traverse_+0x136>
 801ac9c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ac9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801aca2:	d07a      	beq.n	801ad9a <lfs_fs_traverse_+0x132>
 801aca4:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d17b      	bne.n	801ada2 <lfs_fs_traverse_+0x13a>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801acaa:	a908      	add	r1, sp, #32
 801acac:	a810      	add	r0, sp, #64	@ 0x40
 801acae:	f7fe fc75 	bl	801959c <lfs_pair_issync>
 801acb2:	b988      	cbnz	r0, 801acd8 <lfs_fs_traverse_+0x70>
        if (tortoise_i == tortoise_period) {
 801acb4:	4555      	cmp	r5, sl
 801acb6:	d019      	beq.n	801acec <lfs_fs_traverse_+0x84>
        tortoise_i += 1;
 801acb8:	3501      	adds	r5, #1
        for (int i = 0; i < 2; i++) {
 801acba:	2400      	movs	r4, #0
 801acbc:	2c01      	cmp	r4, #1
 801acbe:	dc1c      	bgt.n	801acfa <lfs_fs_traverse_+0x92>
            int err = cb(data, dir.tail[i]);
 801acc0:	1da3      	adds	r3, r4, #6
 801acc2:	aa12      	add	r2, sp, #72	@ 0x48
 801acc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801acc8:	f853 1c20 	ldr.w	r1, [r3, #-32]
 801accc:	4640      	mov	r0, r8
 801acce:	47b8      	blx	r7
            if (err) {
 801acd0:	4603      	mov	r3, r0
 801acd2:	b9f8      	cbnz	r0, 801ad14 <lfs_fs_traverse_+0xac>
        for (int i = 0; i < 2; i++) {
 801acd4:	3401      	adds	r4, #1
 801acd6:	e7f1      	b.n	801acbc <lfs_fs_traverse_+0x54>
            LFS_WARN("Cycle detected in tail list");
 801acd8:	4b4e      	ldr	r3, [pc, #312]	@ (801ae14 <lfs_fs_traverse_+0x1ac>)
 801acda:	f241 2222 	movw	r2, #4642	@ 0x1222
 801acde:	494e      	ldr	r1, [pc, #312]	@ (801ae18 <lfs_fs_traverse_+0x1b0>)
 801ace0:	484e      	ldr	r0, [pc, #312]	@ (801ae1c <lfs_fs_traverse_+0x1b4>)
 801ace2:	f00c f9af 	bl	8027044 <printf>
            return LFS_ERR_CORRUPT;
 801ace6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801acea:	e013      	b.n	801ad14 <lfs_fs_traverse_+0xac>
            tortoise[0] = dir.tail[0];
 801acec:	9408      	str	r4, [sp, #32]
            tortoise[1] = dir.tail[1];
 801acee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801acf0:	9309      	str	r3, [sp, #36]	@ 0x24
            tortoise_period *= 2;
 801acf2:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801acf6:	2500      	movs	r5, #0
 801acf8:	e7de      	b.n	801acb8 <lfs_fs_traverse_+0x50>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 801acfa:	aa10      	add	r2, sp, #64	@ 0x40
 801acfc:	a90a      	add	r1, sp, #40	@ 0x28
 801acfe:	4630      	mov	r0, r6
 801ad00:	f7ff ffa4 	bl	801ac4c <lfs_dir_fetch>
        if (err) {
 801ad04:	9005      	str	r0, [sp, #20]
 801ad06:	2800      	cmp	r0, #0
 801ad08:	d17f      	bne.n	801ae0a <lfs_fs_traverse_+0x1a2>
        for (uint16_t id = 0; id < dir.count; id++) {
 801ad0a:	2400      	movs	r4, #0
 801ad0c:	e016      	b.n	801ad3c <lfs_fs_traverse_+0xd4>
                if (tag == LFS_ERR_NOENT) {
 801ad0e:	f113 0f02 	cmn.w	r3, #2
 801ad12:	d011      	beq.n	801ad38 <lfs_fs_traverse_+0xd0>
}
 801ad14:	4618      	mov	r0, r3
 801ad16:	b013      	add	sp, #76	@ 0x4c
 801ad18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 801ad1c:	f8cd 8008 	str.w	r8, [sp, #8]
 801ad20:	9701      	str	r7, [sp, #4]
 801ad22:	9b07      	ldr	r3, [sp, #28]
 801ad24:	9300      	str	r3, [sp, #0]
 801ad26:	9b06      	ldr	r3, [sp, #24]
 801ad28:	4632      	mov	r2, r6
 801ad2a:	2100      	movs	r1, #0
 801ad2c:	4630      	mov	r0, r6
 801ad2e:	f7fe ffc9 	bl	8019cc4 <lfs_ctz_traverse>
                if (err) {
 801ad32:	4603      	mov	r3, r0
 801ad34:	2800      	cmp	r0, #0
 801ad36:	d1ed      	bne.n	801ad14 <lfs_fs_traverse_+0xac>
        for (uint16_t id = 0; id < dir.count; id++) {
 801ad38:	3401      	adds	r4, #1
 801ad3a:	b2a4      	uxth	r4, r4
 801ad3c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801ad40:	42a3      	cmp	r3, r4
 801ad42:	d9a6      	bls.n	801ac92 <lfs_fs_traverse_+0x2a>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 801ad44:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801ad46:	aa06      	add	r2, sp, #24
 801ad48:	9200      	str	r2, [sp, #0]
 801ad4a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801ad4e:	f043 0308 	orr.w	r3, r3, #8
 801ad52:	4a33      	ldr	r2, [pc, #204]	@ (801ae20 <lfs_fs_traverse_+0x1b8>)
 801ad54:	a90a      	add	r1, sp, #40	@ 0x28
 801ad56:	4630      	mov	r0, r6
 801ad58:	f7fe ff8a 	bl	8019c70 <lfs_dir_get>
            if (tag < 0) {
 801ad5c:	1e03      	subs	r3, r0, #0
 801ad5e:	dbd6      	blt.n	801ad0e <lfs_fs_traverse_+0xa6>
    return (tag & 0x7ff00000) >> 20;
 801ad60:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801ad64:	f240 2202 	movw	r2, #514	@ 0x202
 801ad68:	4293      	cmp	r3, r2
 801ad6a:	d0d7      	beq.n	801ad1c <lfs_fs_traverse_+0xb4>
            } else if (includeorphans &&
 801ad6c:	f1b9 0f00 	cmp.w	r9, #0
 801ad70:	d0e2      	beq.n	801ad38 <lfs_fs_traverse_+0xd0>
 801ad72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ad76:	d1df      	bne.n	801ad38 <lfs_fs_traverse_+0xd0>
                for (int i = 0; i < 2; i++) {
 801ad78:	f8dd b014 	ldr.w	fp, [sp, #20]
 801ad7c:	e001      	b.n	801ad82 <lfs_fs_traverse_+0x11a>
 801ad7e:	f10b 0b01 	add.w	fp, fp, #1
 801ad82:	f1bb 0f01 	cmp.w	fp, #1
 801ad86:	dcd7      	bgt.n	801ad38 <lfs_fs_traverse_+0xd0>
                    err = cb(data, (&ctz.head)[i]);
 801ad88:	ab06      	add	r3, sp, #24
 801ad8a:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 801ad8e:	4640      	mov	r0, r8
 801ad90:	47b8      	blx	r7
                    if (err) {
 801ad92:	4603      	mov	r3, r0
 801ad94:	2800      	cmp	r0, #0
 801ad96:	d0f2      	beq.n	801ad7e <lfs_fs_traverse_+0x116>
 801ad98:	e7bc      	b.n	801ad14 <lfs_fs_traverse_+0xac>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801ad9a:	2301      	movs	r3, #1
 801ad9c:	e783      	b.n	801aca6 <lfs_fs_traverse_+0x3e>
 801ad9e:	2301      	movs	r3, #1
 801ada0:	e781      	b.n	801aca6 <lfs_fs_traverse_+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801ada2:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
 801ada4:	e00f      	b.n	801adc6 <lfs_fs_traverse_+0x15e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801ada6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801ada8:	f8cd 8008 	str.w	r8, [sp, #8]
 801adac:	9701      	str	r7, [sp, #4]
 801adae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801adb0:	9200      	str	r2, [sp, #0]
 801adb2:	4632      	mov	r2, r6
 801adb4:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801adb8:	4630      	mov	r0, r6
 801adba:	f7fe ff83 	bl	8019cc4 <lfs_ctz_traverse>
            if (err) {
 801adbe:	4603      	mov	r3, r0
 801adc0:	b158      	cbz	r0, 801adda <lfs_fs_traverse_+0x172>
 801adc2:	e7a7      	b.n	801ad14 <lfs_fs_traverse_+0xac>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801adc4:	6824      	ldr	r4, [r4, #0]
 801adc6:	b1f4      	cbz	r4, 801ae06 <lfs_fs_traverse_+0x19e>
        if (f->type != LFS_TYPE_REG) {
 801adc8:	79a3      	ldrb	r3, [r4, #6]
 801adca:	2b01      	cmp	r3, #1
 801adcc:	d1fa      	bne.n	801adc4 <lfs_fs_traverse_+0x15c>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 801adce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801add0:	f403 1388 	and.w	r3, r3, #1114112	@ 0x110000
 801add4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801add8:	d0e5      	beq.n	801ada6 <lfs_fs_traverse_+0x13e>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 801adda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801addc:	f403 1390 	and.w	r3, r3, #1179648	@ 0x120000
 801ade0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ade4:	d1ee      	bne.n	801adc4 <lfs_fs_traverse_+0x15c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801ade6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801ade8:	f8cd 8008 	str.w	r8, [sp, #8]
 801adec:	9701      	str	r7, [sp, #4]
 801adee:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801adf0:	9200      	str	r2, [sp, #0]
 801adf2:	4632      	mov	r2, r6
 801adf4:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801adf8:	4630      	mov	r0, r6
 801adfa:	f7fe ff63 	bl	8019cc4 <lfs_ctz_traverse>
            if (err) {
 801adfe:	4603      	mov	r3, r0
 801ae00:	2800      	cmp	r0, #0
 801ae02:	d0df      	beq.n	801adc4 <lfs_fs_traverse_+0x15c>
 801ae04:	e786      	b.n	801ad14 <lfs_fs_traverse_+0xac>
    return 0;
 801ae06:	2300      	movs	r3, #0
 801ae08:	e784      	b.n	801ad14 <lfs_fs_traverse_+0xac>
            return err;
 801ae0a:	9b05      	ldr	r3, [sp, #20]
 801ae0c:	e782      	b.n	801ad14 <lfs_fs_traverse_+0xac>
 801ae0e:	bf00      	nop
 801ae10:	08032dc4 	.word	0x08032dc4
 801ae14:	080337f8 	.word	0x080337f8
 801ae18:	0803558c 	.word	0x0803558c
 801ae1c:	0803574c 	.word	0x0803574c
 801ae20:	700ffc00 	.word	0x700ffc00

0801ae24 <lfs_alloc_scan>:
static int lfs_alloc_scan(lfs_t *lfs) {
 801ae24:	b538      	push	{r3, r4, r5, lr}
 801ae26:	4604      	mov	r4, r0
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801ae28:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801ae2a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 801ae2c:	4413      	add	r3, r2
            % lfs->block_count;
 801ae2e:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 801ae30:	fbb3 f1f2 	udiv	r1, r3, r2
 801ae34:	fb02 3311 	mls	r3, r2, r1, r3
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801ae38:	6543      	str	r3, [r0, #84]	@ 0x54
    lfs->lookahead.next = 0;
 801ae3a:	2100      	movs	r1, #0
 801ae3c:	65c1      	str	r1, [r0, #92]	@ 0x5c
            8*lfs->cfg->lookahead_size,
 801ae3e:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801ae40:	6b53      	ldr	r3, [r2, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 801ae42:	00db      	lsls	r3, r3, #3
 801ae44:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801ae46:	4283      	cmp	r3, r0
 801ae48:	bf28      	it	cs
 801ae4a:	4603      	movcs	r3, r0
 801ae4c:	65a3      	str	r3, [r4, #88]	@ 0x58
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801ae4e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801ae50:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801ae52:	f00e fe15 	bl	8029a80 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 801ae56:	2301      	movs	r3, #1
 801ae58:	4622      	mov	r2, r4
 801ae5a:	4906      	ldr	r1, [pc, #24]	@ (801ae74 <lfs_alloc_scan+0x50>)
 801ae5c:	4620      	mov	r0, r4
 801ae5e:	f7ff ff03 	bl	801ac68 <lfs_fs_traverse_>
    if (err) {
 801ae62:	4605      	mov	r5, r0
 801ae64:	b908      	cbnz	r0, 801ae6a <lfs_alloc_scan+0x46>
}
 801ae66:	4628      	mov	r0, r5
 801ae68:	bd38      	pop	{r3, r4, r5, pc}
        lfs_alloc_drop(lfs);
 801ae6a:	4620      	mov	r0, r4
 801ae6c:	f7fe fc15 	bl	801969a <lfs_alloc_drop>
        return err;
 801ae70:	e7f9      	b.n	801ae66 <lfs_alloc_scan+0x42>
 801ae72:	bf00      	nop
 801ae74:	080196a9 	.word	0x080196a9

0801ae78 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 801ae78:	b530      	push	{r4, r5, lr}
 801ae7a:	b083      	sub	sp, #12
 801ae7c:	4604      	mov	r4, r0
 801ae7e:	460d      	mov	r5, r1
        while (lfs->lookahead.next < lfs->lookahead.size) {
 801ae80:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801ae82:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801ae84:	4293      	cmp	r3, r2
 801ae86:	d22b      	bcs.n	801aee0 <lfs_alloc+0x68>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801ae88:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801ae8a:	08da      	lsrs	r2, r3, #3
 801ae8c:	5c8a      	ldrb	r2, [r1, r2]
                    & (1U << (lfs->lookahead.next % 8)))) {
 801ae8e:	f003 0107 	and.w	r1, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801ae92:	40ca      	lsrs	r2, r1
 801ae94:	f012 0f01 	tst.w	r2, #1
 801ae98:	d005      	beq.n	801aea6 <lfs_alloc+0x2e>
            lfs->lookahead.next += 1;
 801ae9a:	3301      	adds	r3, #1
 801ae9c:	65e3      	str	r3, [r4, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 801ae9e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801aea0:	3b01      	subs	r3, #1
 801aea2:	6623      	str	r3, [r4, #96]	@ 0x60
 801aea4:	e7ec      	b.n	801ae80 <lfs_alloc+0x8>
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801aea6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801aea8:	4413      	add	r3, r2
                        % lfs->block_count;
 801aeaa:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801aeac:	fbb3 f1f2 	udiv	r1, r3, r2
 801aeb0:	fb02 3311 	mls	r3, r2, r1, r3
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801aeb4:	602b      	str	r3, [r5, #0]
                    lfs->lookahead.next += 1;
 801aeb6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801aeb8:	3301      	adds	r3, #1
 801aeba:	65e3      	str	r3, [r4, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 801aebc:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801aebe:	3a01      	subs	r2, #1
 801aec0:	6622      	str	r2, [r4, #96]	@ 0x60
                    if (lfs->lookahead.next >= lfs->lookahead.size
 801aec2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801aec4:	4293      	cmp	r3, r2
 801aec6:	d225      	bcs.n	801af14 <lfs_alloc+0x9c>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801aec8:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801aeca:	08da      	lsrs	r2, r3, #3
 801aecc:	5c8a      	ldrb	r2, [r1, r2]
                                & (1U << (lfs->lookahead.next % 8)))) {
 801aece:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801aed2:	fa22 f303 	lsr.w	r3, r2, r3
 801aed6:	f013 0f01 	tst.w	r3, #1
 801aeda:	d1ec      	bne.n	801aeb6 <lfs_alloc+0x3e>
                        return 0;
 801aedc:	2000      	movs	r0, #0
 801aede:	e01a      	b.n	801af16 <lfs_alloc+0x9e>
        if (lfs->lookahead.ckpoint <= 0) {
 801aee0:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801aee2:	b12a      	cbz	r2, 801aef0 <lfs_alloc+0x78>
        int err = lfs_alloc_scan(lfs);
 801aee4:	4620      	mov	r0, r4
 801aee6:	f7ff ff9d 	bl	801ae24 <lfs_alloc_scan>
        if(err) {
 801aeea:	2800      	cmp	r0, #0
 801aeec:	d0c8      	beq.n	801ae80 <lfs_alloc+0x8>
 801aeee:	e012      	b.n	801af16 <lfs_alloc+0x9e>
            LFS_ERROR("No more free space 0x%"PRIx32,
 801aef0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801aef2:	4413      	add	r3, r2
 801aef4:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801aef6:	fbb3 f1f2 	udiv	r1, r3, r2
 801aefa:	4808      	ldr	r0, [pc, #32]	@ (801af1c <lfs_alloc+0xa4>)
 801aefc:	9000      	str	r0, [sp, #0]
 801aefe:	fb02 3311 	mls	r3, r2, r1, r3
 801af02:	f240 22b1 	movw	r2, #689	@ 0x2b1
 801af06:	4906      	ldr	r1, [pc, #24]	@ (801af20 <lfs_alloc+0xa8>)
 801af08:	4806      	ldr	r0, [pc, #24]	@ (801af24 <lfs_alloc+0xac>)
 801af0a:	f00c f89b 	bl	8027044 <printf>
            return LFS_ERR_NOSPC;
 801af0e:	f06f 001b 	mvn.w	r0, #27
 801af12:	e000      	b.n	801af16 <lfs_alloc+0x9e>
                        return 0;
 801af14:	2000      	movs	r0, #0
}
 801af16:	b003      	add	sp, #12
 801af18:	bd30      	pop	{r4, r5, pc}
 801af1a:	bf00      	nop
 801af1c:	080337f8 	.word	0x080337f8
 801af20:	0803558c 	.word	0x0803558c
 801af24:	08035778 	.word	0x08035778

0801af28 <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 801af28:	b570      	push	{r4, r5, r6, lr}
 801af2a:	b084      	sub	sp, #16
 801af2c:	4606      	mov	r6, r0
 801af2e:	460c      	mov	r4, r1
    for (int i = 0; i < 2; i++) {
 801af30:	2500      	movs	r5, #0
 801af32:	2d01      	cmp	r5, #1
 801af34:	dc0d      	bgt.n	801af52 <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 801af36:	3501      	adds	r5, #1
 801af38:	f005 0101 	and.w	r1, r5, #1
 801af3c:	bf48      	it	mi
 801af3e:	4249      	negmi	r1, r1
 801af40:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801af44:	4630      	mov	r0, r6
 801af46:	f7ff ff97 	bl	801ae78 <lfs_alloc>
        if (err) {
 801af4a:	4603      	mov	r3, r0
 801af4c:	2800      	cmp	r0, #0
 801af4e:	d0f0      	beq.n	801af32 <lfs_dir_alloc+0xa>
 801af50:	e02d      	b.n	801afae <lfs_dir_alloc+0x86>
    dir->rev = 0;
 801af52:	2100      	movs	r1, #0
 801af54:	4622      	mov	r2, r4
 801af56:	f842 1f08 	str.w	r1, [r2, #8]!
    int err = lfs_bd_read(lfs,
 801af5a:	2304      	movs	r3, #4
 801af5c:	9303      	str	r3, [sp, #12]
 801af5e:	9202      	str	r2, [sp, #8]
 801af60:	9101      	str	r1, [sp, #4]
 801af62:	6822      	ldr	r2, [r4, #0]
 801af64:	9200      	str	r2, [sp, #0]
 801af66:	4632      	mov	r2, r6
 801af68:	4630      	mov	r0, r6
 801af6a:	f7fe fcdd 	bl	8019928 <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
 801af6e:	68a2      	ldr	r2, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 801af70:	4603      	mov	r3, r0
 801af72:	b110      	cbz	r0, 801af7a <lfs_dir_alloc+0x52>
 801af74:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801af78:	d119      	bne.n	801afae <lfs_dir_alloc+0x86>
    if (lfs->cfg->block_cycles > 0) {
 801af7a:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801af7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af7e:	2b00      	cmp	r3, #0
 801af80:	dd0a      	ble.n	801af98 <lfs_dir_alloc+0x70>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 801af82:	3301      	adds	r3, #1
 801af84:	f043 0101 	orr.w	r1, r3, #1
    return lfs_aligndown(a + alignment-1, alignment);
 801af88:	1853      	adds	r3, r2, r1
 801af8a:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801af8c:	fbb3 f2f1 	udiv	r2, r3, r1
 801af90:	fb01 3212 	mls	r2, r1, r2, r3
 801af94:	1a9b      	subs	r3, r3, r2
 801af96:	60a3      	str	r3, [r4, #8]
    dir->off = sizeof(dir->rev);
 801af98:	2304      	movs	r3, #4
 801af9a:	60e3      	str	r3, [r4, #12]
    dir->etag = 0xffffffff;
 801af9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801afa0:	6122      	str	r2, [r4, #16]
    dir->count = 0;
 801afa2:	2300      	movs	r3, #0
 801afa4:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 801afa6:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 801afa8:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
 801afaa:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
 801afac:	75e3      	strb	r3, [r4, #23]
}
 801afae:	4618      	mov	r0, r3
 801afb0:	b004      	add	sp, #16
 801afb2:	bd70      	pop	{r4, r5, r6, pc}

0801afb4 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 801afb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801afb6:	b089      	sub	sp, #36	@ 0x24
 801afb8:	4605      	mov	r5, r0
 801afba:	460e      	mov	r6, r1
 801afbc:	e053      	b.n	801b066 <lfs_file_relocate+0xb2>
                err = lfs_bd_read(lfs,
 801afbe:	2201      	movs	r2, #1
 801afc0:	9203      	str	r2, [sp, #12]
 801afc2:	f10d 021b 	add.w	r2, sp, #27
 801afc6:	9202      	str	r2, [sp, #8]
 801afc8:	9401      	str	r4, [sp, #4]
 801afca:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 801afcc:	9200      	str	r2, [sp, #0]
 801afce:	1b1b      	subs	r3, r3, r4
 801afd0:	462a      	mov	r2, r5
 801afd2:	f106 0140 	add.w	r1, r6, #64	@ 0x40
 801afd6:	4628      	mov	r0, r5
 801afd8:	f7fe fca6 	bl	8019928 <lfs_bd_read>
                if (err) {
 801afdc:	2800      	cmp	r0, #0
 801afde:	d152      	bne.n	801b086 <lfs_file_relocate+0xd2>
            err = lfs_bd_prog(lfs,
 801afe0:	2301      	movs	r3, #1
 801afe2:	9303      	str	r3, [sp, #12]
 801afe4:	f10d 021b 	add.w	r2, sp, #27
 801afe8:	9202      	str	r2, [sp, #8]
 801afea:	9401      	str	r4, [sp, #4]
 801afec:	9a07      	ldr	r2, [sp, #28]
 801afee:	9200      	str	r2, [sp, #0]
 801aff0:	462a      	mov	r2, r5
 801aff2:	f105 0110 	add.w	r1, r5, #16
 801aff6:	4628      	mov	r0, r5
 801aff8:	f7ff f992 	bl	801a320 <lfs_bd_prog>
            if (err) {
 801affc:	bb20      	cbnz	r0, 801b048 <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801affe:	3401      	adds	r4, #1
 801b000:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 801b002:	42a3      	cmp	r3, r4
 801b004:	d945      	bls.n	801b092 <lfs_file_relocate+0xde>
            if (file->flags & LFS_F_INLINE) {
 801b006:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 801b008:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 801b00c:	d0d7      	beq.n	801afbe <lfs_file_relocate+0xa>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801b00e:	88b2      	ldrh	r2, [r6, #4]
 801b010:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
 801b012:	2101      	movs	r1, #1
 801b014:	9105      	str	r1, [sp, #20]
 801b016:	f10d 011b 	add.w	r1, sp, #27
 801b01a:	9104      	str	r1, [sp, #16]
 801b01c:	9403      	str	r4, [sp, #12]
 801b01e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 801b022:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801b026:	9202      	str	r2, [sp, #8]
 801b028:	4a27      	ldr	r2, [pc, #156]	@ (801b0c8 <lfs_file_relocate+0x114>)
 801b02a:	9201      	str	r2, [sp, #4]
 801b02c:	1b1b      	subs	r3, r3, r4
 801b02e:	9300      	str	r3, [sp, #0]
 801b030:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 801b034:	2200      	movs	r2, #0
 801b036:	f106 0108 	add.w	r1, r6, #8
 801b03a:	4628      	mov	r0, r5
 801b03c:	f7ff f84c 	bl	801a0d8 <lfs_dir_getread>
                if (err) {
 801b040:	2800      	cmp	r0, #0
 801b042:	d0cd      	beq.n	801afe0 <lfs_file_relocate+0x2c>
                    return err;
 801b044:	4607      	mov	r7, r0
 801b046:	e03b      	b.n	801b0c0 <lfs_file_relocate+0x10c>
                if (err == LFS_ERR_CORRUPT) {
 801b048:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b04c:	d11d      	bne.n	801b08a <lfs_file_relocate+0xd6>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801b04e:	4b1f      	ldr	r3, [pc, #124]	@ (801b0cc <lfs_file_relocate+0x118>)
 801b050:	9300      	str	r3, [sp, #0]
 801b052:	9b07      	ldr	r3, [sp, #28]
 801b054:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 801b058:	491d      	ldr	r1, [pc, #116]	@ (801b0d0 <lfs_file_relocate+0x11c>)
 801b05a:	481e      	ldr	r0, [pc, #120]	@ (801b0d4 <lfs_file_relocate+0x120>)
 801b05c:	f00b fff2 	bl	8027044 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801b060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b064:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
 801b066:	a907      	add	r1, sp, #28
 801b068:	4628      	mov	r0, r5
 801b06a:	f7ff ff05 	bl	801ae78 <lfs_alloc>
        if (err) {
 801b06e:	4607      	mov	r7, r0
 801b070:	bb30      	cbnz	r0, 801b0c0 <lfs_file_relocate+0x10c>
        err = lfs_bd_erase(lfs, nblock);
 801b072:	9907      	ldr	r1, [sp, #28]
 801b074:	4628      	mov	r0, r5
 801b076:	f7fe fbdd 	bl	8019834 <lfs_bd_erase>
        if (err) {
 801b07a:	4607      	mov	r7, r0
 801b07c:	b138      	cbz	r0, 801b08e <lfs_file_relocate+0xda>
            if (err == LFS_ERR_CORRUPT) {
 801b07e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b082:	d0e4      	beq.n	801b04e <lfs_file_relocate+0x9a>
 801b084:	e01c      	b.n	801b0c0 <lfs_file_relocate+0x10c>
                    return err;
 801b086:	4607      	mov	r7, r0
 801b088:	e01a      	b.n	801b0c0 <lfs_file_relocate+0x10c>
                return err;
 801b08a:	4607      	mov	r7, r0
 801b08c:	e018      	b.n	801b0c0 <lfs_file_relocate+0x10c>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801b08e:	2400      	movs	r4, #0
 801b090:	e7b6      	b.n	801b000 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 801b092:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801b094:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b096:	69e9      	ldr	r1, [r5, #28]
 801b098:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801b09a:	f00f ff2d 	bl	802aef8 <memcpy>
        file->cache.block = lfs->pcache.block;
 801b09e:	692b      	ldr	r3, [r5, #16]
 801b0a0:	6433      	str	r3, [r6, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 801b0a2:	696b      	ldr	r3, [r5, #20]
 801b0a4:	6473      	str	r3, [r6, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 801b0a6:	69ab      	ldr	r3, [r5, #24]
 801b0a8:	64b3      	str	r3, [r6, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 801b0aa:	f105 0110 	add.w	r1, r5, #16
 801b0ae:	4628      	mov	r0, r5
 801b0b0:	f7fe fc10 	bl	80198d4 <lfs_cache_zero>
        file->block = nblock;
 801b0b4:	9b07      	ldr	r3, [sp, #28]
 801b0b6:	63b3      	str	r3, [r6, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 801b0b8:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 801b0ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b0be:	6333      	str	r3, [r6, #48]	@ 0x30
}
 801b0c0:	4638      	mov	r0, r7
 801b0c2:	b009      	add	sp, #36	@ 0x24
 801b0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0c6:	bf00      	nop
 801b0c8:	fff7fc00 	.word	0xfff7fc00
 801b0cc:	080337f8 	.word	0x080337f8
 801b0d0:	0803558c 	.word	0x0803558c
 801b0d4:	080357a4 	.word	0x080357a4

0801b0d8 <lfs_file_outline>:
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 801b0d8:	b538      	push	{r3, r4, r5, lr}
 801b0da:	4605      	mov	r5, r0
 801b0dc:	460c      	mov	r4, r1
    file->off = file->pos;
 801b0de:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801b0e0:	63cb      	str	r3, [r1, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 801b0e2:	f7fe fad7 	bl	8019694 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 801b0e6:	4621      	mov	r1, r4
 801b0e8:	4628      	mov	r0, r5
 801b0ea:	f7ff ff63 	bl	801afb4 <lfs_file_relocate>
    if (err) {
 801b0ee:	b918      	cbnz	r0, 801b0f8 <lfs_file_outline+0x20>
    file->flags &= ~LFS_F_INLINE;
 801b0f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b0f2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801b0f6:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801b0f8:	bd38      	pop	{r3, r4, r5, pc}
	...

0801b0fc <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
 801b0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b100:	b08b      	sub	sp, #44	@ 0x2c
 801b102:	4605      	mov	r5, r0
 801b104:	460f      	mov	r7, r1
 801b106:	4616      	mov	r6, r2
 801b108:	9305      	str	r3, [sp, #20]
 801b10a:	e04d      	b.n	801b1a8 <lfs_ctz_extend+0xac>
            if (size == 0) {
 801b10c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d032      	beq.n	801b178 <lfs_ctz_extend+0x7c>
            lfs_size_t noff = size - 1;
 801b112:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b114:	3b01      	subs	r3, #1
 801b116:	9308      	str	r3, [sp, #32]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 801b118:	a908      	add	r1, sp, #32
 801b11a:	4628      	mov	r0, r5
 801b11c:	f7fe fbe6 	bl	80198ec <lfs_ctz_index>
            noff = noff + 1;
 801b120:	9b08      	ldr	r3, [sp, #32]
 801b122:	3301      	adds	r3, #1
 801b124:	9308      	str	r3, [sp, #32]
            if (noff != lfs->cfg->block_size) {
 801b126:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801b128:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801b12a:	4293      	cmp	r3, r2
 801b12c:	d05b      	beq.n	801b1e6 <lfs_ctz_extend+0xea>
                for (lfs_off_t i = 0; i < noff; i++) {
 801b12e:	2400      	movs	r4, #0
 801b130:	46b9      	mov	r9, r7
 801b132:	9f05      	ldr	r7, [sp, #20]
 801b134:	9b08      	ldr	r3, [sp, #32]
 801b136:	42a3      	cmp	r3, r4
 801b138:	d94a      	bls.n	801b1d0 <lfs_ctz_extend+0xd4>
                    err = lfs_bd_read(lfs,
 801b13a:	2201      	movs	r2, #1
 801b13c:	9203      	str	r2, [sp, #12]
 801b13e:	aa09      	add	r2, sp, #36	@ 0x24
 801b140:	9202      	str	r2, [sp, #8]
 801b142:	9401      	str	r4, [sp, #4]
 801b144:	9700      	str	r7, [sp, #0]
 801b146:	1b1b      	subs	r3, r3, r4
 801b148:	4632      	mov	r2, r6
 801b14a:	2100      	movs	r1, #0
 801b14c:	4628      	mov	r0, r5
 801b14e:	f7fe fbeb 	bl	8019928 <lfs_bd_read>
                    if (err) {
 801b152:	4603      	mov	r3, r0
 801b154:	2800      	cmp	r0, #0
 801b156:	d139      	bne.n	801b1cc <lfs_ctz_extend+0xd0>
                    err = lfs_bd_prog(lfs,
 801b158:	2301      	movs	r3, #1
 801b15a:	9303      	str	r3, [sp, #12]
 801b15c:	aa09      	add	r2, sp, #36	@ 0x24
 801b15e:	9202      	str	r2, [sp, #8]
 801b160:	9401      	str	r4, [sp, #4]
 801b162:	9a07      	ldr	r2, [sp, #28]
 801b164:	9200      	str	r2, [sp, #0]
 801b166:	4632      	mov	r2, r6
 801b168:	4649      	mov	r1, r9
 801b16a:	4628      	mov	r0, r5
 801b16c:	f7ff f8d8 	bl	801a320 <lfs_bd_prog>
                    if (err) {
 801b170:	4603      	mov	r3, r0
 801b172:	b948      	cbnz	r0, 801b188 <lfs_ctz_extend+0x8c>
                for (lfs_off_t i = 0; i < noff; i++) {
 801b174:	3401      	adds	r4, #1
 801b176:	e7dd      	b.n	801b134 <lfs_ctz_extend+0x38>
                *block = nblock;
 801b178:	4682      	mov	sl, r0
 801b17a:	9b07      	ldr	r3, [sp, #28]
 801b17c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801b17e:	6013      	str	r3, [r2, #0]
                *off = 0;
 801b180:	2300      	movs	r3, #0
 801b182:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b184:	6013      	str	r3, [r2, #0]
                return 0;
 801b186:	e02a      	b.n	801b1de <lfs_ctz_extend+0xe2>
                        if (err == LFS_ERR_CORRUPT) {
 801b188:	464f      	mov	r7, r9
 801b18a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b18e:	d11d      	bne.n	801b1cc <lfs_ctz_extend+0xd0>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801b190:	4b36      	ldr	r3, [pc, #216]	@ (801b26c <lfs_ctz_extend+0x170>)
 801b192:	9300      	str	r3, [sp, #0]
 801b194:	9b07      	ldr	r3, [sp, #28]
 801b196:	f640 32a6 	movw	r2, #2982	@ 0xba6
 801b19a:	4935      	ldr	r1, [pc, #212]	@ (801b270 <lfs_ctz_extend+0x174>)
 801b19c:	4835      	ldr	r0, [pc, #212]	@ (801b274 <lfs_ctz_extend+0x178>)
 801b19e:	f00b ff51 	bl	8027044 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801b1a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b1a6:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
 801b1a8:	a907      	add	r1, sp, #28
 801b1aa:	4628      	mov	r0, r5
 801b1ac:	f7ff fe64 	bl	801ae78 <lfs_alloc>
        if (err) {
 801b1b0:	2800      	cmp	r0, #0
 801b1b2:	d159      	bne.n	801b268 <lfs_ctz_extend+0x16c>
            err = lfs_bd_erase(lfs, nblock);
 801b1b4:	9907      	ldr	r1, [sp, #28]
 801b1b6:	4628      	mov	r0, r5
 801b1b8:	f7fe fb3c 	bl	8019834 <lfs_bd_erase>
            if (err) {
 801b1bc:	4680      	mov	r8, r0
 801b1be:	2800      	cmp	r0, #0
 801b1c0:	d0a4      	beq.n	801b10c <lfs_ctz_extend+0x10>
                if (err == LFS_ERR_CORRUPT) {
 801b1c2:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b1c6:	d0e3      	beq.n	801b190 <lfs_ctz_extend+0x94>
 801b1c8:	4682      	mov	sl, r0
 801b1ca:	e008      	b.n	801b1de <lfs_ctz_extend+0xe2>
                        return err;
 801b1cc:	469a      	mov	sl, r3
 801b1ce:	e006      	b.n	801b1de <lfs_ctz_extend+0xe2>
                *block = nblock;
 801b1d0:	46c2      	mov	sl, r8
 801b1d2:	9b07      	ldr	r3, [sp, #28]
 801b1d4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801b1d6:	6013      	str	r3, [r2, #0]
                *off = noff;
 801b1d8:	9b08      	ldr	r3, [sp, #32]
 801b1da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b1dc:	6013      	str	r3, [r2, #0]
}
 801b1de:	4650      	mov	r0, sl
 801b1e0:	b00b      	add	sp, #44	@ 0x2c
 801b1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
 801b1e6:	3001      	adds	r0, #1
    return __builtin_ctz(a);
 801b1e8:	fa90 f9a0 	rbit	r9, r0
 801b1ec:	fab9 f989 	clz	r9, r9
            lfs_size_t skips = lfs_ctz(index) + 1;
 801b1f0:	f109 0a01 	add.w	sl, r9, #1
            lfs_block_t nhead = head;
 801b1f4:	9b05      	ldr	r3, [sp, #20]
 801b1f6:	9309      	str	r3, [sp, #36]	@ 0x24
            for (lfs_off_t i = 0; i < skips; i++) {
 801b1f8:	2400      	movs	r4, #0
 801b1fa:	46ab      	mov	fp, r5
 801b1fc:	e006      	b.n	801b20c <lfs_ctz_extend+0x110>
                    if (err == LFS_ERR_CORRUPT) {
 801b1fe:	465d      	mov	r5, fp
 801b200:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b204:	d0c4      	beq.n	801b190 <lfs_ctz_extend+0x94>
                    return err;
 801b206:	4682      	mov	sl, r0
 801b208:	e7e9      	b.n	801b1de <lfs_ctz_extend+0xe2>
            for (lfs_off_t i = 0; i < skips; i++) {
 801b20a:	3401      	adds	r4, #1
 801b20c:	4554      	cmp	r4, sl
 801b20e:	d221      	bcs.n	801b254 <lfs_ctz_extend+0x158>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 801b210:	00a5      	lsls	r5, r4, #2
 801b212:	2304      	movs	r3, #4
 801b214:	9303      	str	r3, [sp, #12]
 801b216:	ab09      	add	r3, sp, #36	@ 0x24
 801b218:	9302      	str	r3, [sp, #8]
 801b21a:	9501      	str	r5, [sp, #4]
 801b21c:	9b07      	ldr	r3, [sp, #28]
 801b21e:	9300      	str	r3, [sp, #0]
 801b220:	2301      	movs	r3, #1
 801b222:	4632      	mov	r2, r6
 801b224:	4639      	mov	r1, r7
 801b226:	4658      	mov	r0, fp
 801b228:	f7ff f87a 	bl	801a320 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
 801b22c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
                if (err) {
 801b22e:	2800      	cmp	r0, #0
 801b230:	d1e5      	bne.n	801b1fe <lfs_ctz_extend+0x102>
                if (i != skips-1) {
 801b232:	454c      	cmp	r4, r9
 801b234:	d0e9      	beq.n	801b20a <lfs_ctz_extend+0x10e>
                    err = lfs_bd_read(lfs,
 801b236:	2304      	movs	r3, #4
 801b238:	9303      	str	r3, [sp, #12]
 801b23a:	a909      	add	r1, sp, #36	@ 0x24
 801b23c:	9102      	str	r1, [sp, #8]
 801b23e:	9501      	str	r5, [sp, #4]
 801b240:	9200      	str	r2, [sp, #0]
 801b242:	4632      	mov	r2, r6
 801b244:	2100      	movs	r1, #0
 801b246:	4658      	mov	r0, fp
 801b248:	f7fe fb6e 	bl	8019928 <lfs_bd_read>
                    if (err) {
 801b24c:	2800      	cmp	r0, #0
 801b24e:	d0dc      	beq.n	801b20a <lfs_ctz_extend+0x10e>
                        return err;
 801b250:	4682      	mov	sl, r0
 801b252:	e7c4      	b.n	801b1de <lfs_ctz_extend+0xe2>
            *block = nblock;
 801b254:	46d1      	mov	r9, sl
 801b256:	46c2      	mov	sl, r8
 801b258:	9b07      	ldr	r3, [sp, #28]
 801b25a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801b25c:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
 801b25e:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801b262:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b264:	6019      	str	r1, [r3, #0]
            return 0;
 801b266:	e7ba      	b.n	801b1de <lfs_ctz_extend+0xe2>
 801b268:	4682      	mov	sl, r0
 801b26a:	e7b8      	b.n	801b1de <lfs_ctz_extend+0xe2>
 801b26c:	080337f8 	.word	0x080337f8
 801b270:	0803558c 	.word	0x0803558c
 801b274:	080357a4 	.word	0x080357a4

0801b278 <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
 801b278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b27c:	b087      	sub	sp, #28
 801b27e:	4605      	mov	r5, r0
 801b280:	460c      	mov	r4, r1
 801b282:	4617      	mov	r7, r2
 801b284:	4699      	mov	r9, r3
    if ((file->flags & LFS_F_INLINE) &&
 801b286:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801b288:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801b28c:	d008      	beq.n	801b2a0 <lfs_file_flushedwrite+0x28>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 801b28e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801b290:	444b      	add	r3, r9
 801b292:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
    return (a > b) ? a : b;
 801b294:	4293      	cmp	r3, r2
 801b296:	bf38      	it	cc
 801b298:	4613      	movcc	r3, r2
 801b29a:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 801b29c:	429a      	cmp	r2, r3
 801b29e:	d32d      	bcc.n	801b2fc <lfs_file_flushedwrite+0x84>
        const void *buffer, lfs_size_t size) {
 801b2a0:	46c8      	mov	r8, r9
    while (nsize > 0) {
 801b2a2:	f1b8 0f00 	cmp.w	r8, #0
 801b2a6:	f000 8094 	beq.w	801b3d2 <lfs_file_flushedwrite+0x15a>
        if (!(file->flags & LFS_F_WRITING) ||
 801b2aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b2ac:	f413 3200 	ands.w	r2, r3, #131072	@ 0x20000
 801b2b0:	d004      	beq.n	801b2bc <lfs_file_flushedwrite+0x44>
                file->off == lfs->cfg->block_size) {
 801b2b2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801b2b4:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 801b2b6:	6a49      	ldr	r1, [r1, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 801b2b8:	4288      	cmp	r0, r1
 801b2ba:	d150      	bne.n	801b35e <lfs_file_flushedwrite+0xe6>
            if (!(file->flags & LFS_F_INLINE)) {
 801b2bc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801b2c0:	d144      	bne.n	801b34c <lfs_file_flushedwrite+0xd4>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 801b2c2:	b90a      	cbnz	r2, 801b2c8 <lfs_file_flushedwrite+0x50>
 801b2c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b2c6:	bb1b      	cbnz	r3, 801b310 <lfs_file_flushedwrite+0x98>
                lfs_alloc_ckpoint(lfs);
 801b2c8:	4628      	mov	r0, r5
 801b2ca:	f7fe f9e3 	bl	8019694 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 801b2ce:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801b2d2:	9302      	str	r3, [sp, #8]
 801b2d4:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801b2d8:	9301      	str	r3, [sp, #4]
 801b2da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b2dc:	9300      	str	r3, [sp, #0]
 801b2de:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801b2e0:	462a      	mov	r2, r5
 801b2e2:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801b2e6:	4628      	mov	r0, r5
 801b2e8:	f7ff ff08 	bl	801b0fc <lfs_ctz_extend>
                if (err) {
 801b2ec:	4601      	mov	r1, r0
 801b2ee:	2800      	cmp	r0, #0
 801b2f0:	d031      	beq.n	801b356 <lfs_file_flushedwrite+0xde>
                    file->flags |= LFS_F_ERRED;
 801b2f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b2f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801b2f8:	6323      	str	r3, [r4, #48]	@ 0x30
                    return err;
 801b2fa:	e059      	b.n	801b3b0 <lfs_file_flushedwrite+0x138>
        int err = lfs_file_outline(lfs, file);
 801b2fc:	f7ff feec 	bl	801b0d8 <lfs_file_outline>
        if (err) {
 801b300:	4601      	mov	r1, r0
 801b302:	2800      	cmp	r0, #0
 801b304:	d0cc      	beq.n	801b2a0 <lfs_file_flushedwrite+0x28>
            file->flags |= LFS_F_ERRED;
 801b306:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b308:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801b30c:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801b30e:	e04f      	b.n	801b3b0 <lfs_file_flushedwrite+0x138>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801b310:	f104 0640 	add.w	r6, r4, #64	@ 0x40
 801b314:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                            file->pos-1, &file->block, &(lfs_off_t){0});
 801b316:	2100      	movs	r1, #0
 801b318:	9105      	str	r1, [sp, #20]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801b31a:	a805      	add	r0, sp, #20
 801b31c:	9003      	str	r0, [sp, #12]
 801b31e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801b322:	9002      	str	r0, [sp, #8]
 801b324:	3b01      	subs	r3, #1
 801b326:	9301      	str	r3, [sp, #4]
 801b328:	9200      	str	r2, [sp, #0]
 801b32a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801b32c:	4632      	mov	r2, r6
 801b32e:	4628      	mov	r0, r5
 801b330:	f7ff f8ad 	bl	801a48e <lfs_ctz_find>
                    if (err) {
 801b334:	4601      	mov	r1, r0
 801b336:	b920      	cbnz	r0, 801b342 <lfs_file_flushedwrite+0xca>
                    lfs_cache_zero(lfs, &file->cache);
 801b338:	4631      	mov	r1, r6
 801b33a:	4628      	mov	r0, r5
 801b33c:	f7fe faca 	bl	80198d4 <lfs_cache_zero>
 801b340:	e7c2      	b.n	801b2c8 <lfs_file_flushedwrite+0x50>
                        file->flags |= LFS_F_ERRED;
 801b342:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b344:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801b348:	6323      	str	r3, [r4, #48]	@ 0x30
                        return err;
 801b34a:	e031      	b.n	801b3b0 <lfs_file_flushedwrite+0x138>
                file->block = LFS_BLOCK_INLINE;
 801b34c:	f06f 0301 	mvn.w	r3, #1
 801b350:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801b352:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b354:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_WRITING;
 801b356:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b35c:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801b35e:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801b360:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 801b362:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801b364:	1af6      	subs	r6, r6, r3
    return (a < b) ? a : b;
 801b366:	4546      	cmp	r6, r8
 801b368:	bf28      	it	cs
 801b36a:	4646      	movcs	r6, r8
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 801b36c:	9603      	str	r6, [sp, #12]
 801b36e:	9702      	str	r7, [sp, #8]
 801b370:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801b372:	9301      	str	r3, [sp, #4]
 801b374:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801b376:	9300      	str	r3, [sp, #0]
 801b378:	2301      	movs	r3, #1
 801b37a:	462a      	mov	r2, r5
 801b37c:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801b380:	4628      	mov	r0, r5
 801b382:	f7fe ffcd 	bl	801a320 <lfs_bd_prog>
            if (err) {
 801b386:	4601      	mov	r1, r0
 801b388:	b1b0      	cbz	r0, 801b3b8 <lfs_file_flushedwrite+0x140>
                if (err == LFS_ERR_CORRUPT) {
 801b38a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b38e:	d10b      	bne.n	801b3a8 <lfs_file_flushedwrite+0x130>
            err = lfs_file_relocate(lfs, file);
 801b390:	4621      	mov	r1, r4
 801b392:	4628      	mov	r0, r5
 801b394:	f7ff fe0e 	bl	801afb4 <lfs_file_relocate>
            if (err) {
 801b398:	4601      	mov	r1, r0
 801b39a:	2800      	cmp	r0, #0
 801b39c:	d0e6      	beq.n	801b36c <lfs_file_flushedwrite+0xf4>
                file->flags |= LFS_F_ERRED;
 801b39e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b3a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801b3a4:	6323      	str	r3, [r4, #48]	@ 0x30
                return err;
 801b3a6:	e003      	b.n	801b3b0 <lfs_file_flushedwrite+0x138>
                file->flags |= LFS_F_ERRED;
 801b3a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b3aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801b3ae:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801b3b0:	4608      	mov	r0, r1
 801b3b2:	b007      	add	sp, #28
 801b3b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
 801b3b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b3ba:	4433      	add	r3, r6
 801b3bc:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801b3be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801b3c0:	4433      	add	r3, r6
 801b3c2:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801b3c4:	4437      	add	r7, r6
        nsize -= diff;
 801b3c6:	eba8 0806 	sub.w	r8, r8, r6
        lfs_alloc_ckpoint(lfs);
 801b3ca:	4628      	mov	r0, r5
 801b3cc:	f7fe f962 	bl	8019694 <lfs_alloc_ckpoint>
 801b3d0:	e767      	b.n	801b2a2 <lfs_file_flushedwrite+0x2a>
    return size;
 801b3d2:	4649      	mov	r1, r9
 801b3d4:	e7ec      	b.n	801b3b0 <lfs_file_flushedwrite+0x138>
	...

0801b3d8 <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 801b3d8:	b570      	push	{r4, r5, r6, lr}
 801b3da:	b098      	sub	sp, #96	@ 0x60
 801b3dc:	4605      	mov	r5, r0
 801b3de:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 801b3e0:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801b3e2:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801b3e6:	d008      	beq.n	801b3fa <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
 801b3e8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801b3ec:	d102      	bne.n	801b3f4 <lfs_file_flush+0x1c>
    rcache->block = LFS_BLOCK_NULL;
 801b3ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b3f2:	640a      	str	r2, [r1, #64]	@ 0x40
        file->flags &= ~LFS_F_READING;
 801b3f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801b3f8:	6323      	str	r3, [r4, #48]	@ 0x30
    if (file->flags & LFS_F_WRITING) {
 801b3fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b3fc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801b400:	d068      	beq.n	801b4d4 <lfs_file_flush+0xfc>
        lfs_off_t pos = file->pos;
 801b402:	6b66      	ldr	r6, [r4, #52]	@ 0x34
        if (!(file->flags & LFS_F_INLINE)) {
 801b404:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801b408:	d151      	bne.n	801b4ae <lfs_file_flush+0xd6>
            lfs_file_t orig = {
 801b40a:	2254      	movs	r2, #84	@ 0x54
 801b40c:	2100      	movs	r1, #0
 801b40e:	a803      	add	r0, sp, #12
 801b410:	f00e fb36 	bl	8029a80 <memset>
                .ctz.head = file->ctz.head,
 801b414:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            lfs_file_t orig = {
 801b416:	930d      	str	r3, [sp, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 801b418:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            lfs_file_t orig = {
 801b41a:	930e      	str	r3, [sp, #56]	@ 0x38
 801b41c:	2301      	movs	r3, #1
 801b41e:	930f      	str	r3, [sp, #60]	@ 0x3c
                .pos = file->pos,
 801b420:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            lfs_file_t orig = {
 801b422:	9310      	str	r3, [sp, #64]	@ 0x40
 801b424:	f10d 0c4c 	add.w	ip, sp, #76	@ 0x4c
 801b428:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801b42c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
 801b430:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b434:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
 801b436:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801b438:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801b43a:	429a      	cmp	r2, r3
 801b43c:	d21a      	bcs.n	801b474 <lfs_file_flush+0x9c>
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 801b43e:	2301      	movs	r3, #1
 801b440:	f10d 020b 	add.w	r2, sp, #11
 801b444:	a903      	add	r1, sp, #12
 801b446:	4628      	mov	r0, r5
 801b448:	f7ff f86a 	bl	801a520 <lfs_file_flushedread>
                if (res < 0) {
 801b44c:	1e03      	subs	r3, r0, #0
 801b44e:	db42      	blt.n	801b4d6 <lfs_file_flush+0xfe>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 801b450:	2301      	movs	r3, #1
 801b452:	f10d 020b 	add.w	r2, sp, #11
 801b456:	4621      	mov	r1, r4
 801b458:	4628      	mov	r0, r5
 801b45a:	f7ff ff0d 	bl	801b278 <lfs_file_flushedwrite>
                if (res < 0) {
 801b45e:	1e03      	subs	r3, r0, #0
 801b460:	db39      	blt.n	801b4d6 <lfs_file_flush+0xfe>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 801b462:	682b      	ldr	r3, [r5, #0]
 801b464:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b468:	d0e5      	beq.n	801b436 <lfs_file_flush+0x5e>
    rcache->block = LFS_BLOCK_NULL;
 801b46a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b46e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b470:	602b      	str	r3, [r5, #0]
}
 801b472:	e7e0      	b.n	801b436 <lfs_file_flush+0x5e>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 801b474:	2301      	movs	r3, #1
 801b476:	462a      	mov	r2, r5
 801b478:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801b47c:	4628      	mov	r0, r5
 801b47e:	f7fe fef5 	bl	801a26c <lfs_bd_flush>
                if (err) {
 801b482:	4603      	mov	r3, r0
 801b484:	b1c0      	cbz	r0, 801b4b8 <lfs_file_flush+0xe0>
                    if (err == LFS_ERR_CORRUPT) {
 801b486:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b48a:	d124      	bne.n	801b4d6 <lfs_file_flush+0xfe>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 801b48c:	4b13      	ldr	r3, [pc, #76]	@ (801b4dc <lfs_file_flush+0x104>)
 801b48e:	9300      	str	r3, [sp, #0]
 801b490:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801b492:	f640 522b 	movw	r2, #3371	@ 0xd2b
 801b496:	4912      	ldr	r1, [pc, #72]	@ (801b4e0 <lfs_file_flush+0x108>)
 801b498:	4812      	ldr	r0, [pc, #72]	@ (801b4e4 <lfs_file_flush+0x10c>)
 801b49a:	f00b fdd3 	bl	8027044 <printf>
                err = lfs_file_relocate(lfs, file);
 801b49e:	4621      	mov	r1, r4
 801b4a0:	4628      	mov	r0, r5
 801b4a2:	f7ff fd87 	bl	801afb4 <lfs_file_relocate>
                if (err) {
 801b4a6:	4603      	mov	r3, r0
 801b4a8:	2800      	cmp	r0, #0
 801b4aa:	d0e3      	beq.n	801b474 <lfs_file_flush+0x9c>
 801b4ac:	e013      	b.n	801b4d6 <lfs_file_flush+0xfe>
            file->pos = lfs_max(file->pos, file->ctz.size);
 801b4ae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    return (a > b) ? a : b;
 801b4b0:	42b3      	cmp	r3, r6
 801b4b2:	bf38      	it	cc
 801b4b4:	4633      	movcc	r3, r6
 801b4b6:	6363      	str	r3, [r4, #52]	@ 0x34
        file->ctz.head = file->block;
 801b4b8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801b4ba:	62a3      	str	r3, [r4, #40]	@ 0x28
        file->ctz.size = file->pos;
 801b4bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b4be:	62e3      	str	r3, [r4, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 801b4c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b4c2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801b4c6:	6323      	str	r3, [r4, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 801b4c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801b4cc:	6323      	str	r3, [r4, #48]	@ 0x30
        file->pos = pos;
 801b4ce:	6366      	str	r6, [r4, #52]	@ 0x34
    return 0;
 801b4d0:	2300      	movs	r3, #0
 801b4d2:	e000      	b.n	801b4d6 <lfs_file_flush+0xfe>
 801b4d4:	2300      	movs	r3, #0
}
 801b4d6:	4618      	mov	r0, r3
 801b4d8:	b018      	add	sp, #96	@ 0x60
 801b4da:	bd70      	pop	{r4, r5, r6, pc}
 801b4dc:	080337f8 	.word	0x080337f8
 801b4e0:	0803558c 	.word	0x0803558c
 801b4e4:	080357a4 	.word	0x080357a4

0801b4e8 <lfs_file_read_>:
        void *buffer, lfs_size_t size) {
 801b4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4ea:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801b4ec:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801b4ee:	f013 0f01 	tst.w	r3, #1
 801b4f2:	d00f      	beq.n	801b514 <lfs_file_read_+0x2c>
 801b4f4:	4605      	mov	r5, r0
 801b4f6:	460c      	mov	r4, r1
 801b4f8:	4616      	mov	r6, r2
    if (file->flags & LFS_F_WRITING) {
 801b4fa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801b4fe:	d002      	beq.n	801b506 <lfs_file_read_+0x1e>
        int err = lfs_file_flush(lfs, file);
 801b500:	f7ff ff6a 	bl	801b3d8 <lfs_file_flush>
        if (err) {
 801b504:	b928      	cbnz	r0, 801b512 <lfs_file_read_+0x2a>
    return lfs_file_flushedread(lfs, file, buffer, size);
 801b506:	463b      	mov	r3, r7
 801b508:	4632      	mov	r2, r6
 801b50a:	4621      	mov	r1, r4
 801b50c:	4628      	mov	r0, r5
 801b50e:	f7ff f807 	bl	801a520 <lfs_file_flushedread>
}
 801b512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801b514:	4b03      	ldr	r3, [pc, #12]	@ (801b524 <lfs_file_read_+0x3c>)
 801b516:	4a04      	ldr	r2, [pc, #16]	@ (801b528 <lfs_file_read_+0x40>)
 801b518:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 801b51c:	4803      	ldr	r0, [pc, #12]	@ (801b52c <lfs_file_read_+0x44>)
 801b51e:	f00b fd5d 	bl	8026fdc <__assert_func>
 801b522:	bf00      	nop
 801b524:	080357c8 	.word	0x080357c8
 801b528:	08036200 	.word	0x08036200
 801b52c:	0803558c 	.word	0x0803558c

0801b530 <lfs_file_seek_>:
        lfs_soff_t off, int whence) {
 801b530:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b532:	b083      	sub	sp, #12
 801b534:	4606      	mov	r6, r0
 801b536:	460d      	mov	r5, r1
 801b538:	4614      	mov	r4, r2
    lfs_off_t npos = file->pos;
 801b53a:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
    if (whence == LFS_SEEK_SET) {
 801b53c:	b123      	cbz	r3, 801b548 <lfs_file_seek_+0x18>
    } else if (whence == LFS_SEEK_CUR) {
 801b53e:	2b01      	cmp	r3, #1
 801b540:	d021      	beq.n	801b586 <lfs_file_seek_+0x56>
    } else if (whence == LFS_SEEK_END) {
 801b542:	2b02      	cmp	r3, #2
 801b544:	d023      	beq.n	801b58e <lfs_file_seek_+0x5e>
    lfs_off_t npos = file->pos;
 801b546:	463c      	mov	r4, r7
    if (npos > lfs->file_max) {
 801b548:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 801b54a:	42a3      	cmp	r3, r4
 801b54c:	d339      	bcc.n	801b5c2 <lfs_file_seek_+0x92>
    if (file->pos == npos) {
 801b54e:	42bc      	cmp	r4, r7
 801b550:	d023      	beq.n	801b59a <lfs_file_seek_+0x6a>
        !(file->flags & LFS_F_WRITING)
 801b552:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    if (
 801b554:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801b558:	d10c      	bne.n	801b574 <lfs_file_seek_+0x44>
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 801b55a:	9701      	str	r7, [sp, #4]
 801b55c:	a901      	add	r1, sp, #4
 801b55e:	4630      	mov	r0, r6
 801b560:	f7fe f9c4 	bl	80198ec <lfs_ctz_index>
 801b564:	4607      	mov	r7, r0
        lfs_off_t noff = npos;
 801b566:	9400      	str	r4, [sp, #0]
        int nindex = lfs_ctz_index(lfs, &noff);
 801b568:	4669      	mov	r1, sp
 801b56a:	4630      	mov	r0, r6
 801b56c:	f7fe f9be 	bl	80198ec <lfs_ctz_index>
        if (oindex == nindex
 801b570:	4287      	cmp	r7, r0
 801b572:	d014      	beq.n	801b59e <lfs_file_seek_+0x6e>
    int err = lfs_file_flush(lfs, file);
 801b574:	4629      	mov	r1, r5
 801b576:	4630      	mov	r0, r6
 801b578:	f7ff ff2e 	bl	801b3d8 <lfs_file_flush>
    if (err) {
 801b57c:	b908      	cbnz	r0, 801b582 <lfs_file_seek_+0x52>
    file->pos = npos;
 801b57e:	636c      	str	r4, [r5, #52]	@ 0x34
    return npos;
 801b580:	4620      	mov	r0, r4
}
 801b582:	b003      	add	sp, #12
 801b584:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((lfs_soff_t)file->pos + off < 0) {
 801b586:	42e7      	cmn	r7, r4
 801b588:	d415      	bmi.n	801b5b6 <lfs_file_seek_+0x86>
            npos = file->pos + off;
 801b58a:	443c      	add	r4, r7
 801b58c:	e7dc      	b.n	801b548 <lfs_file_seek_+0x18>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 801b58e:	f7fe f90e 	bl	80197ae <lfs_file_size_>
        if (res < 0) {
 801b592:	1900      	adds	r0, r0, r4
 801b594:	d412      	bmi.n	801b5bc <lfs_file_seek_+0x8c>
            npos = res;
 801b596:	4604      	mov	r4, r0
 801b598:	e7d6      	b.n	801b548 <lfs_file_seek_+0x18>
        return npos;
 801b59a:	4620      	mov	r0, r4
 801b59c:	e7f1      	b.n	801b582 <lfs_file_seek_+0x52>
                && noff >= file->cache.off
 801b59e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801b5a0:	9a00      	ldr	r2, [sp, #0]
 801b5a2:	4293      	cmp	r3, r2
 801b5a4:	d8e6      	bhi.n	801b574 <lfs_file_seek_+0x44>
                && noff < file->cache.off + file->cache.size) {
 801b5a6:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 801b5a8:	440b      	add	r3, r1
 801b5aa:	429a      	cmp	r2, r3
 801b5ac:	d2e2      	bcs.n	801b574 <lfs_file_seek_+0x44>
            file->pos = npos;
 801b5ae:	636c      	str	r4, [r5, #52]	@ 0x34
            file->off = noff;
 801b5b0:	63ea      	str	r2, [r5, #60]	@ 0x3c
            return npos;
 801b5b2:	4620      	mov	r0, r4
 801b5b4:	e7e5      	b.n	801b582 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801b5b6:	f06f 0015 	mvn.w	r0, #21
 801b5ba:	e7e2      	b.n	801b582 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801b5bc:	f06f 0015 	mvn.w	r0, #21
 801b5c0:	e7df      	b.n	801b582 <lfs_file_seek_+0x52>
        return LFS_ERR_INVAL;
 801b5c2:	f06f 0015 	mvn.w	r0, #21
 801b5c6:	e7dc      	b.n	801b582 <lfs_file_seek_+0x52>

0801b5c8 <lfs_file_write_>:
        const void *buffer, lfs_size_t size) {
 801b5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5cc:	b082      	sub	sp, #8
 801b5ce:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801b5d0:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801b5d2:	f013 0f02 	tst.w	r3, #2
 801b5d6:	d02a      	beq.n	801b62e <lfs_file_write_+0x66>
 801b5d8:	4605      	mov	r5, r0
 801b5da:	460c      	mov	r4, r1
 801b5dc:	4690      	mov	r8, r2
    if (file->flags & LFS_F_READING) {
 801b5de:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801b5e2:	d12b      	bne.n	801b63c <lfs_file_write_+0x74>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 801b5e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b5e6:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 801b5ea:	d004      	beq.n	801b5f6 <lfs_file_write_+0x2e>
 801b5ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b5ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801b5f0:	4291      	cmp	r1, r2
 801b5f2:	d200      	bcs.n	801b5f6 <lfs_file_write_+0x2e>
        file->pos = file->ctz.size;
 801b5f4:	6362      	str	r2, [r4, #52]	@ 0x34
    if (file->pos + size > lfs->file_max) {
 801b5f6:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 801b5f8:	19f1      	adds	r1, r6, r7
 801b5fa:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 801b5fc:	4291      	cmp	r1, r2
 801b5fe:	d831      	bhi.n	801b664 <lfs_file_write_+0x9c>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 801b600:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801b604:	d11f      	bne.n	801b646 <lfs_file_write_+0x7e>
 801b606:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801b608:	429e      	cmp	r6, r3
 801b60a:	d91c      	bls.n	801b646 <lfs_file_write_+0x7e>
        file->pos = file->ctz.size;
 801b60c:	6363      	str	r3, [r4, #52]	@ 0x34
        while (file->pos < pos) {
 801b60e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b610:	428e      	cmp	r6, r1
 801b612:	d918      	bls.n	801b646 <lfs_file_write_+0x7e>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 801b614:	2300      	movs	r3, #0
 801b616:	f88d 3007 	strb.w	r3, [sp, #7]
 801b61a:	2301      	movs	r3, #1
 801b61c:	f10d 0207 	add.w	r2, sp, #7
 801b620:	4621      	mov	r1, r4
 801b622:	4628      	mov	r0, r5
 801b624:	f7ff fe28 	bl	801b278 <lfs_file_flushedwrite>
            if (res < 0) {
 801b628:	2800      	cmp	r0, #0
 801b62a:	daf0      	bge.n	801b60e <lfs_file_write_+0x46>
 801b62c:	e017      	b.n	801b65e <lfs_file_write_+0x96>
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801b62e:	4b0f      	ldr	r3, [pc, #60]	@ (801b66c <lfs_file_write_+0xa4>)
 801b630:	4a0f      	ldr	r2, [pc, #60]	@ (801b670 <lfs_file_write_+0xa8>)
 801b632:	f640 6126 	movw	r1, #3622	@ 0xe26
 801b636:	480f      	ldr	r0, [pc, #60]	@ (801b674 <lfs_file_write_+0xac>)
 801b638:	f00b fcd0 	bl	8026fdc <__assert_func>
        int err = lfs_file_flush(lfs, file);
 801b63c:	f7ff fecc 	bl	801b3d8 <lfs_file_flush>
        if (err) {
 801b640:	2800      	cmp	r0, #0
 801b642:	d0cf      	beq.n	801b5e4 <lfs_file_write_+0x1c>
 801b644:	e00b      	b.n	801b65e <lfs_file_write_+0x96>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 801b646:	463b      	mov	r3, r7
 801b648:	4642      	mov	r2, r8
 801b64a:	4621      	mov	r1, r4
 801b64c:	4628      	mov	r0, r5
 801b64e:	f7ff fe13 	bl	801b278 <lfs_file_flushedwrite>
    if (nsize < 0) {
 801b652:	2800      	cmp	r0, #0
 801b654:	db03      	blt.n	801b65e <lfs_file_write_+0x96>
    file->flags &= ~LFS_F_ERRED;
 801b656:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b658:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 801b65c:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801b65e:	b002      	add	sp, #8
 801b660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LFS_ERR_FBIG;
 801b664:	f06f 001a 	mvn.w	r0, #26
 801b668:	e7f9      	b.n	801b65e <lfs_file_write_+0x96>
 801b66a:	bf00      	nop
 801b66c:	080357f8 	.word	0x080357f8
 801b670:	080361e0 	.word	0x080361e0
 801b674:	0803558c 	.word	0x0803558c

0801b678 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 801b678:	b500      	push	{lr}
 801b67a:	b083      	sub	sp, #12
    lfs_size_t size = 0;
 801b67c:	2300      	movs	r3, #0
 801b67e:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 801b680:	aa01      	add	r2, sp, #4
 801b682:	4904      	ldr	r1, [pc, #16]	@ (801b694 <lfs_fs_size_+0x1c>)
 801b684:	f7ff faf0 	bl	801ac68 <lfs_fs_traverse_>
    if (err) {
 801b688:	b900      	cbnz	r0, 801b68c <lfs_fs_size_+0x14>
        return err;
    }

    return size;
 801b68a:	9801      	ldr	r0, [sp, #4]
}
 801b68c:	b003      	add	sp, #12
 801b68e:	f85d fb04 	ldr.w	pc, [sp], #4
 801b692:	bf00      	nop
 801b694:	08019829 	.word	0x08019829

0801b698 <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 801b698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b69c:	b082      	sub	sp, #8
 801b69e:	4680      	mov	r8, r0
 801b6a0:	460e      	mov	r6, r1
 801b6a2:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
 801b6a4:	2300      	movs	r3, #0
 801b6a6:	6193      	str	r3, [r2, #24]
    pdir->tail[1] = 1;
 801b6a8:	2501      	movs	r5, #1
 801b6aa:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801b6ac:	4b27      	ldr	r3, [pc, #156]	@ (801b74c <lfs_fs_pred+0xb4>)
 801b6ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b6b2:	ab02      	add	r3, sp, #8
 801b6b4:	e903 0003 	stmdb	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801b6b8:	46a9      	mov	r9, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801b6ba:	69a7      	ldr	r7, [r4, #24]
 801b6bc:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801b6c0:	d035      	beq.n	801b72e <lfs_fs_pred+0x96>
 801b6c2:	69e3      	ldr	r3, [r4, #28]
 801b6c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b6c8:	d02f      	beq.n	801b72a <lfs_fs_pred+0x92>
 801b6ca:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(pdir->tail)) {
 801b6cc:	bb8b      	cbnz	r3, 801b732 <lfs_fs_pred+0x9a>
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 801b6ce:	f104 0a18 	add.w	sl, r4, #24
 801b6d2:	4669      	mov	r1, sp
 801b6d4:	4650      	mov	r0, sl
 801b6d6:	f7fd ff61 	bl	801959c <lfs_pair_issync>
 801b6da:	b9a8      	cbnz	r0, 801b708 <lfs_fs_pred+0x70>
        if (tortoise_i == tortoise_period) {
 801b6dc:	454d      	cmp	r5, r9
 801b6de:	d01d      	beq.n	801b71c <lfs_fs_pred+0x84>
        tortoise_i += 1;
 801b6e0:	3501      	adds	r5, #1
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801b6e2:	6833      	ldr	r3, [r6, #0]
 801b6e4:	42bb      	cmp	r3, r7
 801b6e6:	d027      	beq.n	801b738 <lfs_fs_pred+0xa0>
 801b6e8:	69e1      	ldr	r1, [r4, #28]
 801b6ea:	6872      	ldr	r2, [r6, #4]
 801b6ec:	4291      	cmp	r1, r2
 801b6ee:	d027      	beq.n	801b740 <lfs_fs_pred+0xa8>
 801b6f0:	42ba      	cmp	r2, r7
 801b6f2:	d027      	beq.n	801b744 <lfs_fs_pred+0xac>
 801b6f4:	4299      	cmp	r1, r3
 801b6f6:	d027      	beq.n	801b748 <lfs_fs_pred+0xb0>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 801b6f8:	4652      	mov	r2, sl
 801b6fa:	4621      	mov	r1, r4
 801b6fc:	4640      	mov	r0, r8
 801b6fe:	f7ff faa5 	bl	801ac4c <lfs_dir_fetch>
        if (err) {
 801b702:	2800      	cmp	r0, #0
 801b704:	d0d9      	beq.n	801b6ba <lfs_fs_pred+0x22>
 801b706:	e018      	b.n	801b73a <lfs_fs_pred+0xa2>
            LFS_WARN("Cycle detected in tail list");
 801b708:	4b11      	ldr	r3, [pc, #68]	@ (801b750 <lfs_fs_pred+0xb8>)
 801b70a:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 801b70e:	4911      	ldr	r1, [pc, #68]	@ (801b754 <lfs_fs_pred+0xbc>)
 801b710:	4811      	ldr	r0, [pc, #68]	@ (801b758 <lfs_fs_pred+0xc0>)
 801b712:	f00b fc97 	bl	8027044 <printf>
            return LFS_ERR_CORRUPT;
 801b716:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801b71a:	e00e      	b.n	801b73a <lfs_fs_pred+0xa2>
            tortoise[0] = pdir->tail[0];
 801b71c:	9700      	str	r7, [sp, #0]
            tortoise[1] = pdir->tail[1];
 801b71e:	69e3      	ldr	r3, [r4, #28]
 801b720:	9301      	str	r3, [sp, #4]
            tortoise_period *= 2;
 801b722:	ea4f 0949 	mov.w	r9, r9, lsl #1
            tortoise_i = 0;
 801b726:	2500      	movs	r5, #0
 801b728:	e7da      	b.n	801b6e0 <lfs_fs_pred+0x48>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801b72a:	2301      	movs	r3, #1
 801b72c:	e7ce      	b.n	801b6cc <lfs_fs_pred+0x34>
 801b72e:	2301      	movs	r3, #1
 801b730:	e7cc      	b.n	801b6cc <lfs_fs_pred+0x34>
    return LFS_ERR_NOENT;
 801b732:	f06f 0001 	mvn.w	r0, #1
 801b736:	e000      	b.n	801b73a <lfs_fs_pred+0xa2>
            return 0;
 801b738:	2000      	movs	r0, #0
}
 801b73a:	b002      	add	sp, #8
 801b73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return 0;
 801b740:	2000      	movs	r0, #0
 801b742:	e7fa      	b.n	801b73a <lfs_fs_pred+0xa2>
 801b744:	2000      	movs	r0, #0
 801b746:	e7f8      	b.n	801b73a <lfs_fs_pred+0xa2>
 801b748:	2000      	movs	r0, #0
 801b74a:	e7f6      	b.n	801b73a <lfs_fs_pred+0xa2>
 801b74c:	08032dc4 	.word	0x08032dc4
 801b750:	080337f8 	.word	0x080337f8
 801b754:	0803558c 	.word	0x0803558c
 801b758:	0803574c 	.word	0x0803574c

0801b75c <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 801b75c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b75e:	b085      	sub	sp, #20
 801b760:	460c      	mov	r4, r1
 801b762:	4616      	mov	r6, r2
 801b764:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
 801b766:	9303      	str	r3, [sp, #12]
 801b768:	9202      	str	r2, [sp, #8]
 801b76a:	684b      	ldr	r3, [r1, #4]
 801b76c:	9301      	str	r3, [sp, #4]
 801b76e:	680b      	ldr	r3, [r1, #0]
 801b770:	9300      	str	r3, [sp, #0]
 801b772:	2300      	movs	r3, #0
 801b774:	4602      	mov	r2, r0
 801b776:	f100 0110 	add.w	r1, r0, #16
 801b77a:	f7fe fdd1 	bl	801a320 <lfs_bd_prog>
    if (err) {
 801b77e:	4607      	mov	r7, r0
 801b780:	b110      	cbz	r0, 801b788 <lfs_dir_commitprog+0x2c>
}
 801b782:	4638      	mov	r0, r7
 801b784:	b005      	add	sp, #20
 801b786:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
 801b788:	462a      	mov	r2, r5
 801b78a:	4631      	mov	r1, r6
 801b78c:	68e0      	ldr	r0, [r4, #12]
 801b78e:	f002 fcdf 	bl	801e150 <lfs_crc>
 801b792:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 801b794:	6863      	ldr	r3, [r4, #4]
 801b796:	442b      	add	r3, r5
 801b798:	6063      	str	r3, [r4, #4]
    return 0;
 801b79a:	e7f2      	b.n	801b782 <lfs_dir_commitprog+0x26>

0801b79c <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 801b79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7a0:	b087      	sub	sp, #28
 801b7a2:	4614      	mov	r4, r2
 801b7a4:	461f      	mov	r7, r3
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b7a6:	f342 0309 	sbfx	r3, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b7aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b7ae:	bf14      	ite	ne
 801b7b0:	4690      	movne	r8, r2
 801b7b2:	f102 0801 	addeq.w	r8, r2, #1
    return tag & 0x000003ff;
 801b7b6:	f3c8 0809 	ubfx	r8, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b7ba:	f108 0904 	add.w	r9, r8, #4
    if (commit->off + dsize > commit->end) {
 801b7be:	684b      	ldr	r3, [r1, #4]
 801b7c0:	444b      	add	r3, r9
 801b7c2:	694a      	ldr	r2, [r1, #20]
 801b7c4:	4293      	cmp	r3, r2
 801b7c6:	d841      	bhi.n	801b84c <lfs_dir_commitattr+0xb0>
 801b7c8:	4605      	mov	r5, r0
 801b7ca:	460e      	mov	r6, r1
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 801b7cc:	f024 4b00 	bic.w	fp, r4, #2147483648	@ 0x80000000
 801b7d0:	688b      	ldr	r3, [r1, #8]
 801b7d2:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
 801b7d6:	ba1b      	rev	r3, r3
 801b7d8:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 801b7da:	2304      	movs	r3, #4
 801b7dc:	aa05      	add	r2, sp, #20
 801b7de:	f7ff ffbd 	bl	801b75c <lfs_dir_commitprog>
    if (err) {
 801b7e2:	4682      	mov	sl, r0
 801b7e4:	bb60      	cbnz	r0, 801b840 <lfs_dir_commitattr+0xa4>
    if (!(tag & 0x80000000)) {
 801b7e6:	2c00      	cmp	r4, #0
 801b7e8:	da21      	bge.n	801b82e <lfs_dir_commitattr+0x92>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801b7ea:	2400      	movs	r4, #0
 801b7ec:	4544      	cmp	r4, r8
 801b7ee:	d225      	bcs.n	801b83c <lfs_dir_commitattr+0xa0>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 801b7f0:	eba9 0304 	sub.w	r3, r9, r4
                    disk->block, disk->off+i, &dat, 1);
 801b7f4:	6839      	ldr	r1, [r7, #0]
 801b7f6:	687a      	ldr	r2, [r7, #4]
            err = lfs_bd_read(lfs,
 801b7f8:	2001      	movs	r0, #1
 801b7fa:	9003      	str	r0, [sp, #12]
 801b7fc:	f10d 0013 	add.w	r0, sp, #19
 801b800:	9002      	str	r0, [sp, #8]
 801b802:	4422      	add	r2, r4
 801b804:	9201      	str	r2, [sp, #4]
 801b806:	9100      	str	r1, [sp, #0]
 801b808:	3b04      	subs	r3, #4
 801b80a:	462a      	mov	r2, r5
 801b80c:	2100      	movs	r1, #0
 801b80e:	4628      	mov	r0, r5
 801b810:	f7fe f88a 	bl	8019928 <lfs_bd_read>
            if (err) {
 801b814:	4603      	mov	r3, r0
 801b816:	b9b8      	cbnz	r0, 801b848 <lfs_dir_commitattr+0xac>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 801b818:	2301      	movs	r3, #1
 801b81a:	f10d 0213 	add.w	r2, sp, #19
 801b81e:	4631      	mov	r1, r6
 801b820:	4628      	mov	r0, r5
 801b822:	f7ff ff9b 	bl	801b75c <lfs_dir_commitprog>
            if (err) {
 801b826:	4603      	mov	r3, r0
 801b828:	b970      	cbnz	r0, 801b848 <lfs_dir_commitattr+0xac>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801b82a:	3401      	adds	r4, #1
 801b82c:	e7de      	b.n	801b7ec <lfs_dir_commitattr+0x50>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 801b82e:	4643      	mov	r3, r8
 801b830:	463a      	mov	r2, r7
 801b832:	4631      	mov	r1, r6
 801b834:	4628      	mov	r0, r5
 801b836:	f7ff ff91 	bl	801b75c <lfs_dir_commitprog>
        if (err) {
 801b83a:	b950      	cbnz	r0, 801b852 <lfs_dir_commitattr+0xb6>
    commit->ptag = tag & 0x7fffffff;
 801b83c:	f8c6 b008 	str.w	fp, [r6, #8]
}
 801b840:	4650      	mov	r0, sl
 801b842:	b007      	add	sp, #28
 801b844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return err;
 801b848:	469a      	mov	sl, r3
 801b84a:	e7f9      	b.n	801b840 <lfs_dir_commitattr+0xa4>
        return LFS_ERR_NOSPC;
 801b84c:	f06f 0a1b 	mvn.w	sl, #27
 801b850:	e7f6      	b.n	801b840 <lfs_dir_commitattr+0xa4>
            return err;
 801b852:	4682      	mov	sl, r0
 801b854:	e7f4      	b.n	801b840 <lfs_dir_commitattr+0xa4>

0801b856 <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 801b856:	b508      	push	{r3, lr}
 801b858:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 801b85a:	460a      	mov	r2, r1
 801b85c:	6841      	ldr	r1, [r0, #4]
 801b85e:	6800      	ldr	r0, [r0, #0]
 801b860:	f7ff ff9c 	bl	801b79c <lfs_dir_commitattr>
}
 801b864:	bd08      	pop	{r3, pc}
	...

0801b868 <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 801b868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b86c:	b08b      	sub	sp, #44	@ 0x2c
 801b86e:	4607      	mov	r7, r0
 801b870:	460e      	mov	r6, r1
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801b872:	684b      	ldr	r3, [r1, #4]
    const lfs_off_t end = lfs_alignup(
 801b874:	3314      	adds	r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801b876:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801b878:	6a51      	ldr	r1, [r2, #36]	@ 0x24
            lfs->cfg->prog_size);
 801b87a:	6a12      	ldr	r2, [r2, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801b87c:	428b      	cmp	r3, r1
 801b87e:	bf94      	ite	ls
 801b880:	eb02 0803 	addls.w	r8, r2, r3
 801b884:	eb02 0801 	addhi.w	r8, r2, r1
 801b888:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
    return a - (a % alignment);
 801b88c:	fbb8 f3f2 	udiv	r3, r8, r2
 801b890:	fb02 8313 	mls	r3, r2, r3, r8
 801b894:	eba8 0803 	sub.w	r8, r8, r3
    uint32_t crc1 = 0;
 801b898:	2300      	movs	r3, #0
 801b89a:	9305      	str	r3, [sp, #20]
    lfs_off_t off1 = 0;
 801b89c:	469b      	mov	fp, r3
    while (commit->off < end) {
 801b89e:	e03c      	b.n	801b91a <lfs_dir_commitcrc+0xb2>
            int err = lfs_bd_read(lfs,
 801b8a0:	2201      	movs	r2, #1
 801b8a2:	9203      	str	r2, [sp, #12]
 801b8a4:	f10d 021b 	add.w	r2, sp, #27
 801b8a8:	9202      	str	r2, [sp, #8]
 801b8aa:	9401      	str	r4, [sp, #4]
 801b8ac:	6832      	ldr	r2, [r6, #0]
 801b8ae:	9200      	str	r2, [sp, #0]
 801b8b0:	463a      	mov	r2, r7
 801b8b2:	2100      	movs	r1, #0
 801b8b4:	4638      	mov	r0, r7
 801b8b6:	f7fe f837 	bl	8019928 <lfs_bd_read>
            if (err && err != LFS_ERR_CORRUPT) {
 801b8ba:	4603      	mov	r3, r0
 801b8bc:	b118      	cbz	r0, 801b8c6 <lfs_dir_commitcrc+0x5e>
 801b8be:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b8c2:	f040 80c0 	bne.w	801ba46 <lfs_dir_commitcrc+0x1de>
                    .size = lfs->cfg->prog_size,
 801b8c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b8c8:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 801b8ca:	9307      	str	r3, [sp, #28]
 801b8cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b8d0:	9208      	str	r2, [sp, #32]
                err = lfs_bd_crc(lfs,
 801b8d2:	aa08      	add	r2, sp, #32
 801b8d4:	9203      	str	r2, [sp, #12]
 801b8d6:	9302      	str	r3, [sp, #8]
 801b8d8:	9401      	str	r4, [sp, #4]
 801b8da:	6832      	ldr	r2, [r6, #0]
 801b8dc:	9200      	str	r2, [sp, #0]
 801b8de:	463a      	mov	r2, r7
 801b8e0:	2100      	movs	r1, #0
 801b8e2:	4638      	mov	r0, r7
 801b8e4:	f7fe fea0 	bl	801a628 <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801b8e8:	4603      	mov	r3, r0
 801b8ea:	b118      	cbz	r0, 801b8f4 <lfs_dir_commitcrc+0x8c>
 801b8ec:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b8f0:	f040 80a9 	bne.w	801ba46 <lfs_dir_commitcrc+0x1de>
                err = lfs_dir_commitattr(lfs, commit,
 801b8f4:	ab07      	add	r3, sp, #28
 801b8f6:	4a59      	ldr	r2, [pc, #356]	@ (801ba5c <lfs_dir_commitcrc+0x1f4>)
 801b8f8:	4631      	mov	r1, r6
 801b8fa:	4638      	mov	r0, r7
 801b8fc:	f7ff ff4e 	bl	801b79c <lfs_dir_commitattr>
                if (err) {
 801b900:	4603      	mov	r3, r0
 801b902:	b348      	cbz	r0, 801b958 <lfs_dir_commitcrc+0xf0>
 801b904:	e09f      	b.n	801ba46 <lfs_dir_commitcrc+0x1de>
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801b906:	2300      	movs	r3, #0
 801b908:	463a      	mov	r2, r7
 801b90a:	4651      	mov	r1, sl
 801b90c:	4638      	mov	r0, r7
 801b90e:	f7fe fd81 	bl	801a414 <lfs_bd_sync>
            if (err) {
 801b912:	4603      	mov	r3, r0
 801b914:	2800      	cmp	r0, #0
 801b916:	f040 8096 	bne.w	801ba46 <lfs_dir_commitcrc+0x1de>
    while (commit->off < end) {
 801b91a:	6874      	ldr	r4, [r6, #4]
 801b91c:	4544      	cmp	r4, r8
 801b91e:	d268      	bcs.n	801b9f2 <lfs_dir_commitcrc+0x18a>
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 801b920:	eba8 0304 	sub.w	r3, r8, r4
 801b924:	3b04      	subs	r3, #4
                + (commit->off+sizeof(lfs_tag_t)));
 801b926:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801b92a:	4293      	cmp	r3, r2
 801b92c:	bf94      	ite	ls
 801b92e:	18e4      	addls	r4, r4, r3
 801b930:	18a4      	addhi	r4, r4, r2
        lfs_off_t noff = (
 801b932:	3404      	adds	r4, #4
        if (noff < end) {
 801b934:	4544      	cmp	r4, r8
 801b936:	d204      	bcs.n	801b942 <lfs_dir_commitcrc+0xda>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 801b938:	f1a8 0314 	sub.w	r3, r8, #20
    return (a < b) ? a : b;
 801b93c:	429c      	cmp	r4, r3
 801b93e:	bf28      	it	cs
 801b940:	461c      	movcs	r4, r3
        uint8_t eperturb = (uint8_t)-1;
 801b942:	23ff      	movs	r3, #255	@ 0xff
 801b944:	f88d 301b 	strb.w	r3, [sp, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 801b948:	4544      	cmp	r4, r8
 801b94a:	d305      	bcc.n	801b958 <lfs_dir_commitcrc+0xf0>
 801b94c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b94e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b950:	6a1b      	ldr	r3, [r3, #32]
 801b952:	1ad2      	subs	r2, r2, r3
 801b954:	42a2      	cmp	r2, r4
 801b956:	d2a3      	bcs.n	801b8a0 <lfs_dir_commitcrc+0x38>
        lfs_tag_t ntag = LFS_MKTAG(
 801b958:	f89d 201b 	ldrb.w	r2, [sp, #27]
 801b95c:	43d2      	mvns	r2, r2
 801b95e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 801b962:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801b966:	6873      	ldr	r3, [r6, #4]
 801b968:	1ae5      	subs	r5, r4, r3
 801b96a:	3d04      	subs	r5, #4
 801b96c:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 801b970:	f445 257f 	orr.w	r5, r5, #1044480	@ 0xff000
 801b974:	f445 6540 	orr.w	r5, r5, #3072	@ 0xc00
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 801b978:	68b3      	ldr	r3, [r6, #8]
 801b97a:	406b      	eors	r3, r5
    return __builtin_bswap32(a);
 801b97c:	ba1b      	rev	r3, r3
 801b97e:	9307      	str	r3, [sp, #28]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 801b980:	f10d 091c 	add.w	r9, sp, #28
 801b984:	2204      	movs	r2, #4
 801b986:	4649      	mov	r1, r9
 801b988:	68f0      	ldr	r0, [r6, #12]
 801b98a:	f002 fbe1 	bl	801e150 <lfs_crc>
 801b98e:	60f0      	str	r0, [r6, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 801b990:	9008      	str	r0, [sp, #32]
        int err = lfs_bd_prog(lfs,
 801b992:	f107 0a10 	add.w	sl, r7, #16
 801b996:	2308      	movs	r3, #8
 801b998:	9303      	str	r3, [sp, #12]
 801b99a:	f8cd 9008 	str.w	r9, [sp, #8]
 801b99e:	6873      	ldr	r3, [r6, #4]
 801b9a0:	9301      	str	r3, [sp, #4]
 801b9a2:	6833      	ldr	r3, [r6, #0]
 801b9a4:	9300      	str	r3, [sp, #0]
 801b9a6:	2300      	movs	r3, #0
 801b9a8:	463a      	mov	r2, r7
 801b9aa:	4651      	mov	r1, sl
 801b9ac:	4638      	mov	r0, r7
 801b9ae:	f7fe fcb7 	bl	801a320 <lfs_bd_prog>
        if (err) {
 801b9b2:	4603      	mov	r3, r0
 801b9b4:	2800      	cmp	r0, #0
 801b9b6:	d146      	bne.n	801ba46 <lfs_dir_commitcrc+0x1de>
        if (off1 == 0) {
 801b9b8:	f1bb 0f00 	cmp.w	fp, #0
 801b9bc:	d104      	bne.n	801b9c8 <lfs_dir_commitcrc+0x160>
            off1 = commit->off + sizeof(lfs_tag_t);
 801b9be:	6873      	ldr	r3, [r6, #4]
 801b9c0:	f103 0b04 	add.w	fp, r3, #4
            crc1 = commit->crc;
 801b9c4:	68f3      	ldr	r3, [r6, #12]
 801b9c6:	9305      	str	r3, [sp, #20]
        commit->off = noff;
 801b9c8:	6074      	str	r4, [r6, #4]
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 801b9ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801b9ce:	43db      	mvns	r3, r3
 801b9d0:	061b      	lsls	r3, r3, #24
 801b9d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801b9d6:	406b      	eors	r3, r5
 801b9d8:	60b3      	str	r3, [r6, #8]
        commit->crc = 0xffffffff;
 801b9da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b9de:	60f3      	str	r3, [r6, #12]
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 801b9e0:	4544      	cmp	r4, r8
 801b9e2:	d290      	bcs.n	801b906 <lfs_dir_commitcrc+0x9e>
 801b9e4:	697b      	ldr	r3, [r7, #20]
 801b9e6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801b9e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801b9ea:	4413      	add	r3, r2
 801b9ec:	42a3      	cmp	r3, r4
 801b9ee:	d894      	bhi.n	801b91a <lfs_dir_commitcrc+0xb2>
 801b9f0:	e789      	b.n	801b906 <lfs_dir_commitcrc+0x9e>
    lfs_off_t off = commit->begin;
 801b9f2:	6933      	ldr	r3, [r6, #16]
    uint32_t crc = 0xffffffff;
 801b9f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b9f8:	9209      	str	r2, [sp, #36]	@ 0x24
    int err = lfs_bd_crc(lfs,
 801b9fa:	aa09      	add	r2, sp, #36	@ 0x24
 801b9fc:	9203      	str	r2, [sp, #12]
 801b9fe:	ebab 0203 	sub.w	r2, fp, r3
 801ba02:	9202      	str	r2, [sp, #8]
 801ba04:	9301      	str	r3, [sp, #4]
 801ba06:	6833      	ldr	r3, [r6, #0]
 801ba08:	9300      	str	r3, [sp, #0]
 801ba0a:	f10b 0304 	add.w	r3, fp, #4
 801ba0e:	463a      	mov	r2, r7
 801ba10:	2100      	movs	r1, #0
 801ba12:	4638      	mov	r0, r7
 801ba14:	f7fe fe08 	bl	801a628 <lfs_bd_crc>
    if (err) {
 801ba18:	4603      	mov	r3, r0
 801ba1a:	b9a0      	cbnz	r0, 801ba46 <lfs_dir_commitcrc+0x1de>
    if (crc != crc1) {
 801ba1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ba1e:	9a05      	ldr	r2, [sp, #20]
 801ba20:	4293      	cmp	r3, r2
 801ba22:	d114      	bne.n	801ba4e <lfs_dir_commitcrc+0x1e6>
    err = lfs_bd_crc(lfs,
 801ba24:	ab09      	add	r3, sp, #36	@ 0x24
 801ba26:	9303      	str	r3, [sp, #12]
 801ba28:	2304      	movs	r3, #4
 801ba2a:	9302      	str	r3, [sp, #8]
 801ba2c:	f8cd b004 	str.w	fp, [sp, #4]
 801ba30:	6832      	ldr	r2, [r6, #0]
 801ba32:	9200      	str	r2, [sp, #0]
 801ba34:	463a      	mov	r2, r7
 801ba36:	2100      	movs	r1, #0
 801ba38:	4638      	mov	r0, r7
 801ba3a:	f7fe fdf5 	bl	801a628 <lfs_bd_crc>
    if (err) {
 801ba3e:	4603      	mov	r3, r0
 801ba40:	b908      	cbnz	r0, 801ba46 <lfs_dir_commitcrc+0x1de>
    if (crc != 0) {
 801ba42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ba44:	b932      	cbnz	r2, 801ba54 <lfs_dir_commitcrc+0x1ec>
}
 801ba46:	4618      	mov	r0, r3
 801ba48:	b00b      	add	sp, #44	@ 0x2c
 801ba4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801ba4e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801ba52:	e7f8      	b.n	801ba46 <lfs_dir_commitcrc+0x1de>
        return LFS_ERR_CORRUPT;
 801ba54:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801ba58:	e7f5      	b.n	801ba46 <lfs_dir_commitcrc+0x1de>
 801ba5a:	bf00      	nop
 801ba5c:	5ffffc08 	.word	0x5ffffc08

0801ba60 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801ba60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba64:	b09b      	sub	sp, #108	@ 0x6c
 801ba66:	4605      	mov	r5, r0
 801ba68:	460c      	mov	r4, r1
 801ba6a:	4616      	mov	r6, r2
 801ba6c:	461f      	mov	r7, r3
 801ba6e:	f8bd 8094 	ldrh.w	r8, [sp, #148]	@ 0x94
 801ba72:	f8bd a098 	ldrh.w	sl, [sp, #152]	@ 0x98
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 801ba76:	f7fd fe7f 	bl	8019778 <lfs_dir_needsrelocation>
    dir->rev += 1;
 801ba7a:	68a3      	ldr	r3, [r4, #8]
 801ba7c:	3301      	adds	r3, #1
 801ba7e:	60a3      	str	r3, [r4, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 801ba80:	4681      	mov	r9, r0
 801ba82:	2800      	cmp	r0, #0
 801ba84:	d034      	beq.n	801baf0 <lfs_dir_compact+0x90>
 801ba86:	2300      	movs	r3, #0
 801ba88:	9314      	str	r3, [sp, #80]	@ 0x50
 801ba8a:	2301      	movs	r3, #1
 801ba8c:	9315      	str	r3, [sp, #84]	@ 0x54
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801ba8e:	6823      	ldr	r3, [r4, #0]
 801ba90:	b373      	cbz	r3, 801baf0 <lfs_dir_compact+0x90>
 801ba92:	6862      	ldr	r2, [r4, #4]
 801ba94:	2a01      	cmp	r2, #1
 801ba96:	d02b      	beq.n	801baf0 <lfs_dir_compact+0x90>
 801ba98:	2b01      	cmp	r3, #1
 801ba9a:	d029      	beq.n	801baf0 <lfs_dir_compact+0x90>
 801ba9c:	b342      	cbz	r2, 801baf0 <lfs_dir_compact+0x90>
    rcache->block = LFS_BLOCK_NULL;
 801ba9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801baa2:	612b      	str	r3, [r5, #16]
        if (!tired) {
 801baa4:	f1b9 0f00 	cmp.w	r9, #0
 801baa8:	f000 810d 	beq.w	801bcc6 <lfs_dir_compact+0x266>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801baac:	2300      	movs	r3, #0
 801baae:	9318      	str	r3, [sp, #96]	@ 0x60
 801bab0:	2301      	movs	r3, #1
 801bab2:	9319      	str	r3, [sp, #100]	@ 0x64
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801bab4:	6823      	ldr	r3, [r4, #0]
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	f000 810f 	beq.w	801bcda <lfs_dir_compact+0x27a>
 801babc:	6862      	ldr	r2, [r4, #4]
 801babe:	2a01      	cmp	r2, #1
 801bac0:	f000 810b 	beq.w	801bcda <lfs_dir_compact+0x27a>
 801bac4:	2b01      	cmp	r3, #1
 801bac6:	f000 8108 	beq.w	801bcda <lfs_dir_compact+0x27a>
 801baca:	2a00      	cmp	r2, #0
 801bacc:	f000 8105 	beq.w	801bcda <lfs_dir_compact+0x27a>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 801bad0:	1d21      	adds	r1, r4, #4
 801bad2:	4628      	mov	r0, r5
 801bad4:	f7ff f9d0 	bl	801ae78 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 801bad8:	4603      	mov	r3, r0
 801bada:	b330      	cbz	r0, 801bb2a <lfs_dir_compact+0xca>
 801badc:	f110 0f1c 	cmn.w	r0, #28
 801bae0:	d11f      	bne.n	801bb22 <lfs_dir_compact+0xc2>
 801bae2:	f1b9 0f00 	cmp.w	r9, #0
 801bae6:	d01c      	beq.n	801bb22 <lfs_dir_compact+0xc2>
        relocated = true;
 801bae8:	46cb      	mov	fp, r9
        tired = false;
 801baea:	f04f 0900 	mov.w	r9, #0
 801baee:	e001      	b.n	801baf4 <lfs_dir_compact+0x94>
    bool relocated = false;
 801baf0:	f04f 0b00 	mov.w	fp, #0
                .block = dir->pair[1],
 801baf4:	6863      	ldr	r3, [r4, #4]
            struct lfs_commit commit = {
 801baf6:	930e      	str	r3, [sp, #56]	@ 0x38
 801baf8:	2300      	movs	r3, #0
 801bafa:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bafc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801bb00:	9210      	str	r2, [sp, #64]	@ 0x40
 801bb02:	9211      	str	r2, [sp, #68]	@ 0x44
 801bb04:	9312      	str	r3, [sp, #72]	@ 0x48
                .end = (lfs->cfg->metadata_max ?
 801bb06:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801bb08:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801bb0a:	b19b      	cbz	r3, 801bb34 <lfs_dir_compact+0xd4>
 801bb0c:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 801bb0e:	9313      	str	r3, [sp, #76]	@ 0x4c
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 801bb10:	6861      	ldr	r1, [r4, #4]
 801bb12:	4628      	mov	r0, r5
 801bb14:	f7fd fe8e 	bl	8019834 <lfs_bd_erase>
            if (err) {
 801bb18:	4603      	mov	r3, r0
 801bb1a:	b170      	cbz	r0, 801bb3a <lfs_dir_compact+0xda>
                if (err == LFS_ERR_CORRUPT) {
 801bb1c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bb20:	d0bd      	beq.n	801ba9e <lfs_dir_compact+0x3e>
}
 801bb22:	4618      	mov	r0, r3
 801bb24:	b01b      	add	sp, #108	@ 0x6c
 801bb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tired = false;
 801bb2a:	f04f 0900 	mov.w	r9, #0
        relocated = true;
 801bb2e:	f04f 0b01 	mov.w	fp, #1
 801bb32:	e7df      	b.n	801baf4 <lfs_dir_compact+0x94>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801bb34:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801bb36:	3b08      	subs	r3, #8
 801bb38:	e7e9      	b.n	801bb0e <lfs_dir_compact+0xae>
            err = lfs_dir_commitprog(lfs, &commit,
 801bb3a:	2304      	movs	r3, #4
 801bb3c:	f104 0208 	add.w	r2, r4, #8
 801bb40:	a90e      	add	r1, sp, #56	@ 0x38
 801bb42:	4628      	mov	r0, r5
 801bb44:	f7ff fe0a 	bl	801b75c <lfs_dir_commitprog>
            if (err) {
 801bb48:	4603      	mov	r3, r0
 801bb4a:	b118      	cbz	r0, 801bb54 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 801bb4c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bb50:	d1e7      	bne.n	801bb22 <lfs_dir_compact+0xc2>
 801bb52:	e7a4      	b.n	801ba9e <lfs_dir_compact+0x3e>
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801bb54:	9516      	str	r5, [sp, #88]	@ 0x58
 801bb56:	ab0e      	add	r3, sp, #56	@ 0x38
 801bb58:	9317      	str	r3, [sp, #92]	@ 0x5c
            err = lfs_dir_traverse(lfs,
 801bb5a:	ab16      	add	r3, sp, #88	@ 0x58
 801bb5c:	9308      	str	r3, [sp, #32]
 801bb5e:	4b65      	ldr	r3, [pc, #404]	@ (801bcf4 <lfs_dir_compact+0x294>)
 801bb60:	9307      	str	r3, [sp, #28]
 801bb62:	f1c8 0300 	rsb	r3, r8, #0
 801bb66:	b21b      	sxth	r3, r3
 801bb68:	9306      	str	r3, [sp, #24]
 801bb6a:	f8cd a014 	str.w	sl, [sp, #20]
 801bb6e:	f8cd 8010 	str.w	r8, [sp, #16]
 801bb72:	2200      	movs	r2, #0
 801bb74:	9203      	str	r2, [sp, #12]
 801bb76:	4b60      	ldr	r3, [pc, #384]	@ (801bcf8 <lfs_dir_compact+0x298>)
 801bb78:	9302      	str	r3, [sp, #8]
 801bb7a:	9701      	str	r7, [sp, #4]
 801bb7c:	9600      	str	r6, [sp, #0]
 801bb7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bb82:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801bb84:	4628      	mov	r0, r5
 801bb86:	f7fe f911 	bl	8019dac <lfs_dir_traverse>
            if (err) {
 801bb8a:	4603      	mov	r3, r0
 801bb8c:	b118      	cbz	r0, 801bb96 <lfs_dir_compact+0x136>
                if (err == LFS_ERR_CORRUPT) {
 801bb8e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bb92:	d1c6      	bne.n	801bb22 <lfs_dir_compact+0xc2>
 801bb94:	e783      	b.n	801ba9e <lfs_dir_compact+0x3e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801bb96:	69a2      	ldr	r2, [r4, #24]
 801bb98:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801bb9c:	d02c      	beq.n	801bbf8 <lfs_dir_compact+0x198>
 801bb9e:	69e2      	ldr	r2, [r4, #28]
 801bba0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801bba4:	d026      	beq.n	801bbf4 <lfs_dir_compact+0x194>
            if (!lfs_pair_isnull(dir->tail)) {
 801bba6:	f013 0f01 	tst.w	r3, #1
 801bbaa:	d027      	beq.n	801bbfc <lfs_dir_compact+0x19c>
            lfs_gstate_t delta = {0};
 801bbac:	2300      	movs	r3, #0
 801bbae:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bbb0:	930c      	str	r3, [sp, #48]	@ 0x30
 801bbb2:	930d      	str	r3, [sp, #52]	@ 0x34
            if (!relocated) {
 801bbb4:	f1bb 0f00 	cmp.w	fp, #0
 801bbb8:	d033      	beq.n	801bc22 <lfs_dir_compact+0x1c2>
            lfs_gstate_xor(&delta, &lfs->gdelta);
 801bbba:	f105 0148 	add.w	r1, r5, #72	@ 0x48
 801bbbe:	a80b      	add	r0, sp, #44	@ 0x2c
 801bbc0:	f7fd fd10 	bl	80195e4 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801bbc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bbc6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801bbca:	f023 0303 	bic.w	r3, r3, #3
 801bbce:	930b      	str	r3, [sp, #44]	@ 0x2c
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801bbd0:	aa0b      	add	r2, sp, #44	@ 0x2c
 801bbd2:	4621      	mov	r1, r4
 801bbd4:	4628      	mov	r0, r5
 801bbd6:	f7fe f859 	bl	8019c8c <lfs_dir_getgstate>
            if (err) {
 801bbda:	4603      	mov	r3, r0
 801bbdc:	2800      	cmp	r0, #0
 801bbde:	d1a0      	bne.n	801bb22 <lfs_dir_compact+0xc2>
    for (int i = 0; i < 3; i++) {
 801bbe0:	2b02      	cmp	r3, #2
 801bbe2:	dc29      	bgt.n	801bc38 <lfs_dir_compact+0x1d8>
        if (((uint32_t*)a)[i] != 0) {
 801bbe4:	aa1a      	add	r2, sp, #104	@ 0x68
 801bbe6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801bbea:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 801bbee:	bb92      	cbnz	r2, 801bc56 <lfs_dir_compact+0x1f6>
    for (int i = 0; i < 3; i++) {
 801bbf0:	3301      	adds	r3, #1
 801bbf2:	e7f5      	b.n	801bbe0 <lfs_dir_compact+0x180>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801bbf4:	2301      	movs	r3, #1
 801bbf6:	e7d6      	b.n	801bba6 <lfs_dir_compact+0x146>
 801bbf8:	2301      	movs	r3, #1
 801bbfa:	e7d4      	b.n	801bba6 <lfs_dir_compact+0x146>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 801bbfc:	7de2      	ldrb	r2, [r4, #23]
 801bbfe:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 801bc02:	f104 0318 	add.w	r3, r4, #24
 801bc06:	493d      	ldr	r1, [pc, #244]	@ (801bcfc <lfs_dir_compact+0x29c>)
 801bc08:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 801bc0c:	a90e      	add	r1, sp, #56	@ 0x38
 801bc0e:	4628      	mov	r0, r5
 801bc10:	f7ff fdc4 	bl	801b79c <lfs_dir_commitattr>
                if (err) {
 801bc14:	4603      	mov	r3, r0
 801bc16:	2800      	cmp	r0, #0
 801bc18:	d0c8      	beq.n	801bbac <lfs_dir_compact+0x14c>
                    if (err == LFS_ERR_CORRUPT) {
 801bc1a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bc1e:	d180      	bne.n	801bb22 <lfs_dir_compact+0xc2>
 801bc20:	e73d      	b.n	801ba9e <lfs_dir_compact+0x3e>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 801bc22:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
 801bc26:	a80b      	add	r0, sp, #44	@ 0x2c
 801bc28:	f7fd fcdc 	bl	80195e4 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 801bc2c:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 801bc30:	a80b      	add	r0, sp, #44	@ 0x2c
 801bc32:	f7fd fcd7 	bl	80195e4 <lfs_gstate_xor>
 801bc36:	e7c0      	b.n	801bbba <lfs_dir_compact+0x15a>
    return true;
 801bc38:	2301      	movs	r3, #1
            if (!lfs_gstate_iszero(&delta)) {
 801bc3a:	b973      	cbnz	r3, 801bc5a <lfs_dir_compact+0x1fa>
                err = lfs_dir_commitattr(lfs, &commit,
 801bc3c:	ab0b      	add	r3, sp, #44	@ 0x2c
 801bc3e:	4a30      	ldr	r2, [pc, #192]	@ (801bd00 <lfs_dir_compact+0x2a0>)
 801bc40:	a90e      	add	r1, sp, #56	@ 0x38
 801bc42:	4628      	mov	r0, r5
 801bc44:	f7ff fdaa 	bl	801b79c <lfs_dir_commitattr>
                if (err) {
 801bc48:	4603      	mov	r3, r0
 801bc4a:	b130      	cbz	r0, 801bc5a <lfs_dir_compact+0x1fa>
                    if (err == LFS_ERR_CORRUPT) {
 801bc4c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bc50:	f47f af67 	bne.w	801bb22 <lfs_dir_compact+0xc2>
 801bc54:	e723      	b.n	801ba9e <lfs_dir_compact+0x3e>
            return false;
 801bc56:	2300      	movs	r3, #0
 801bc58:	e7ef      	b.n	801bc3a <lfs_dir_compact+0x1da>
            err = lfs_dir_commitcrc(lfs, &commit);
 801bc5a:	a90e      	add	r1, sp, #56	@ 0x38
 801bc5c:	4628      	mov	r0, r5
 801bc5e:	f7ff fe03 	bl	801b868 <lfs_dir_commitcrc>
            if (err) {
 801bc62:	4603      	mov	r3, r0
 801bc64:	b120      	cbz	r0, 801bc70 <lfs_dir_compact+0x210>
                if (err == LFS_ERR_CORRUPT) {
 801bc66:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bc6a:	f47f af5a 	bne.w	801bb22 <lfs_dir_compact+0xc2>
 801bc6e:	e716      	b.n	801ba9e <lfs_dir_compact+0x3e>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801bc70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bc72:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801bc74:	6a12      	ldr	r2, [r2, #32]
 801bc76:	fbb3 f1f2 	udiv	r1, r3, r2
 801bc7a:	fb02 3311 	mls	r3, r2, r1, r3
 801bc7e:	b9db      	cbnz	r3, 801bcb8 <lfs_dir_compact+0x258>
    lfs_block_t t = pair[0];
 801bc80:	6823      	ldr	r3, [r4, #0]
    pair[0] = pair[1];
 801bc82:	6862      	ldr	r2, [r4, #4]
 801bc84:	6022      	str	r2, [r4, #0]
    pair[1] = t;
 801bc86:	6063      	str	r3, [r4, #4]
            dir->count = end - begin;
 801bc88:	ebaa 0808 	sub.w	r8, sl, r8
 801bc8c:	f8a4 8014 	strh.w	r8, [r4, #20]
            dir->off = commit.off;
 801bc90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bc92:	60e3      	str	r3, [r4, #12]
            dir->etag = commit.ptag;
 801bc94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bc96:	6123      	str	r3, [r4, #16]
            lfs->gdelta = (lfs_gstate_t){0};
 801bc98:	2200      	movs	r2, #0
 801bc9a:	64aa      	str	r2, [r5, #72]	@ 0x48
 801bc9c:	64ea      	str	r2, [r5, #76]	@ 0x4c
 801bc9e:	652a      	str	r2, [r5, #80]	@ 0x50
            if (!relocated) {
 801bca0:	f1bb 0f00 	cmp.w	fp, #0
 801bca4:	d106      	bne.n	801bcb4 <lfs_dir_compact+0x254>
                lfs->gdisk = lfs->gstate;
 801bca6:	f105 033c 	add.w	r3, r5, #60	@ 0x3c
 801bcaa:	3530      	adds	r5, #48	@ 0x30
 801bcac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801bcb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
 801bcb4:	465b      	mov	r3, fp
 801bcb6:	e734      	b.n	801bb22 <lfs_dir_compact+0xc2>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801bcb8:	4b12      	ldr	r3, [pc, #72]	@ (801bd04 <lfs_dir_compact+0x2a4>)
 801bcba:	4a13      	ldr	r2, [pc, #76]	@ (801bd08 <lfs_dir_compact+0x2a8>)
 801bcbc:	f640 0106 	movw	r1, #2054	@ 0x806
 801bcc0:	4812      	ldr	r0, [pc, #72]	@ (801bd0c <lfs_dir_compact+0x2ac>)
 801bcc2:	f00b f98b 	bl	8026fdc <__assert_func>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 801bcc6:	4b12      	ldr	r3, [pc, #72]	@ (801bd10 <lfs_dir_compact+0x2b0>)
 801bcc8:	9300      	str	r3, [sp, #0]
 801bcca:	6863      	ldr	r3, [r4, #4]
 801bccc:	f640 0218 	movw	r2, #2072	@ 0x818
 801bcd0:	490e      	ldr	r1, [pc, #56]	@ (801bd0c <lfs_dir_compact+0x2ac>)
 801bcd2:	4810      	ldr	r0, [pc, #64]	@ (801bd14 <lfs_dir_compact+0x2b4>)
 801bcd4:	f00b f9b6 	bl	8027044 <printf>
 801bcd8:	e6e8      	b.n	801baac <lfs_dir_compact+0x4c>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 801bcda:	4b0d      	ldr	r3, [pc, #52]	@ (801bd10 <lfs_dir_compact+0x2b0>)
 801bcdc:	9300      	str	r3, [sp, #0]
 801bcde:	6863      	ldr	r3, [r4, #4]
 801bce0:	f640 021d 	movw	r2, #2077	@ 0x81d
 801bce4:	4909      	ldr	r1, [pc, #36]	@ (801bd0c <lfs_dir_compact+0x2ac>)
 801bce6:	480c      	ldr	r0, [pc, #48]	@ (801bd18 <lfs_dir_compact+0x2b8>)
 801bce8:	f00b f9ac 	bl	8027044 <printf>
            return LFS_ERR_NOSPC;
 801bcec:	f06f 031b 	mvn.w	r3, #27
 801bcf0:	e717      	b.n	801bb22 <lfs_dir_compact+0xc2>
 801bcf2:	bf00      	nop
 801bcf4:	0801b857 	.word	0x0801b857
 801bcf8:	400ffc00 	.word	0x400ffc00
 801bcfc:	000ffc08 	.word	0x000ffc08
 801bd00:	7ffffc0c 	.word	0x7ffffc0c
 801bd04:	08035828 	.word	0x08035828
 801bd08:	0803625c 	.word	0x0803625c
 801bd0c:	0803558c 	.word	0x0803558c
 801bd10:	080337f8 	.word	0x080337f8
 801bd14:	080357a4 	.word	0x080357a4
 801bd18:	08035850 	.word	0x08035850

0801bd1c <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 801bd1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bd20:	b08d      	sub	sp, #52	@ 0x34
 801bd22:	4605      	mov	r5, r0
 801bd24:	460c      	mov	r4, r1
 801bd26:	4691      	mov	r9, r2
 801bd28:	461e      	mov	r6, r3
 801bd2a:	f8bd 8054 	ldrh.w	r8, [sp, #84]	@ 0x54
    int err = lfs_dir_alloc(lfs, &tail);
 801bd2e:	a904      	add	r1, sp, #16
 801bd30:	f7ff f8fa 	bl	801af28 <lfs_dir_alloc>
    if (err) {
 801bd34:	4607      	mov	r7, r0
 801bd36:	b118      	cbz	r0, 801bd40 <lfs_dir_split+0x24>
}
 801bd38:	4638      	mov	r0, r7
 801bd3a:	b00d      	add	sp, #52	@ 0x34
 801bd3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tail.split = dir->split;
 801bd40:	7de3      	ldrb	r3, [r4, #23]
 801bd42:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 801bd46:	69a3      	ldr	r3, [r4, #24]
 801bd48:	930a      	str	r3, [sp, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 801bd4a:	69e3      	ldr	r3, [r4, #28]
 801bd4c:	930b      	str	r3, [sp, #44]	@ 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 801bd4e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801bd52:	9302      	str	r3, [sp, #8]
 801bd54:	f8cd 8004 	str.w	r8, [sp, #4]
 801bd58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bd5a:	9300      	str	r3, [sp, #0]
 801bd5c:	4633      	mov	r3, r6
 801bd5e:	464a      	mov	r2, r9
 801bd60:	a904      	add	r1, sp, #16
 801bd62:	4628      	mov	r0, r5
 801bd64:	f7ff fe7c 	bl	801ba60 <lfs_dir_compact>
    if (res < 0) {
 801bd68:	2800      	cmp	r0, #0
 801bd6a:	db17      	blt.n	801bd9c <lfs_dir_split+0x80>
    dir->tail[0] = tail.pair[0];
 801bd6c:	9904      	ldr	r1, [sp, #16]
 801bd6e:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
 801bd70:	9a05      	ldr	r2, [sp, #20]
 801bd72:	61e2      	str	r2, [r4, #28]
    dir->split = true;
 801bd74:	2301      	movs	r3, #1
 801bd76:	75e3      	strb	r3, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801bd78:	6823      	ldr	r3, [r4, #0]
 801bd7a:	6a28      	ldr	r0, [r5, #32]
 801bd7c:	4283      	cmp	r3, r0
 801bd7e:	d007      	beq.n	801bd90 <lfs_dir_split+0x74>
 801bd80:	6866      	ldr	r6, [r4, #4]
 801bd82:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 801bd84:	42a6      	cmp	r6, r4
 801bd86:	d003      	beq.n	801bd90 <lfs_dir_split+0x74>
 801bd88:	42a3      	cmp	r3, r4
 801bd8a:	d001      	beq.n	801bd90 <lfs_dir_split+0x74>
 801bd8c:	42b0      	cmp	r0, r6
 801bd8e:	d1d3      	bne.n	801bd38 <lfs_dir_split+0x1c>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 801bd90:	f1b8 0f00 	cmp.w	r8, #0
 801bd94:	d1d0      	bne.n	801bd38 <lfs_dir_split+0x1c>
        lfs->root[0] = tail.pair[0];
 801bd96:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
 801bd98:	626a      	str	r2, [r5, #36]	@ 0x24
 801bd9a:	e7cd      	b.n	801bd38 <lfs_dir_split+0x1c>
        return res;
 801bd9c:	4607      	mov	r7, r0
 801bd9e:	e7cb      	b.n	801bd38 <lfs_dir_split+0x1c>

0801bda0 <lfs_dir_splittingcompact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801bda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bda4:	b091      	sub	sp, #68	@ 0x44
 801bda6:	4607      	mov	r7, r0
 801bda8:	4615      	mov	r5, r2
 801bdaa:	4699      	mov	r9, r3
 801bdac:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801bdb0:	f8bd b06c 	ldrh.w	fp, [sp, #108]	@ 0x6c
 801bdb4:	f8bd 6070 	ldrh.w	r6, [sp, #112]	@ 0x70
 801bdb8:	910b      	str	r1, [sp, #44]	@ 0x2c
 801bdba:	e04c      	b.n	801be56 <lfs_dir_splittingcompact+0xb6>
                    && size <= lfs_min(
 801bdbc:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 801bdbe:	6a08      	ldr	r0, [r1, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801bdc0:	4403      	add	r3, r0
 801bdc2:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801bdc4:	fbb3 f1f0 	udiv	r1, r3, r0
 801bdc8:	fb00 3111 	mls	r1, r0, r1, r3
 801bdcc:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 801bdce:	4293      	cmp	r3, r2
 801bdd0:	bf28      	it	cs
 801bdd2:	4613      	movcs	r3, r2
                    && size <= lfs_min(
 801bdd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bdd6:	429a      	cmp	r2, r3
 801bdd8:	d92d      	bls.n	801be36 <lfs_dir_splittingcompact+0x96>
            split = split + ((end - split) / 2);
 801bdda:	eb04 0458 	add.w	r4, r4, r8, lsr #1
        while (end - split > 1) {
 801bdde:	eba6 0804 	sub.w	r8, r6, r4
 801bde2:	f1b8 0f01 	cmp.w	r8, #1
 801bde6:	d926      	bls.n	801be36 <lfs_dir_splittingcompact+0x96>
            lfs_size_t size = 0;
 801bde8:	2200      	movs	r2, #0
 801bdea:	920d      	str	r2, [sp, #52]	@ 0x34
            int err = lfs_dir_traverse(lfs,
 801bdec:	b2a1      	uxth	r1, r4
 801bdee:	ab0d      	add	r3, sp, #52	@ 0x34
 801bdf0:	9308      	str	r3, [sp, #32]
 801bdf2:	4b4d      	ldr	r3, [pc, #308]	@ (801bf28 <lfs_dir_splittingcompact+0x188>)
 801bdf4:	9307      	str	r3, [sp, #28]
 801bdf6:	424b      	negs	r3, r1
 801bdf8:	b21b      	sxth	r3, r3
 801bdfa:	9306      	str	r3, [sp, #24]
 801bdfc:	9605      	str	r6, [sp, #20]
 801bdfe:	9104      	str	r1, [sp, #16]
 801be00:	9203      	str	r2, [sp, #12]
 801be02:	4b4a      	ldr	r3, [pc, #296]	@ (801bf2c <lfs_dir_splittingcompact+0x18c>)
 801be04:	9302      	str	r3, [sp, #8]
 801be06:	f8cd 9004 	str.w	r9, [sp, #4]
 801be0a:	9500      	str	r5, [sp, #0]
 801be0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801be10:	4651      	mov	r1, sl
 801be12:	4638      	mov	r0, r7
 801be14:	f7fd ffca 	bl	8019dac <lfs_dir_traverse>
            if (err) {
 801be18:	4603      	mov	r3, r0
 801be1a:	2800      	cmp	r0, #0
 801be1c:	d15b      	bne.n	801bed6 <lfs_dir_splittingcompact+0x136>
            if (end - split < 0xff
 801be1e:	f1b8 0ffe 	cmp.w	r8, #254	@ 0xfe
 801be22:	d8da      	bhi.n	801bdda <lfs_dir_splittingcompact+0x3a>
                        lfs->cfg->block_size - 40,
 801be24:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801be26:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
                    && size <= lfs_min(
 801be28:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
                            (lfs->cfg->metadata_max
 801be2c:	6d48      	ldr	r0, [r1, #84]	@ 0x54
                    && size <= lfs_min(
 801be2e:	2800      	cmp	r0, #0
 801be30:	d0c4      	beq.n	801bdbc <lfs_dir_splittingcompact+0x1c>
 801be32:	0843      	lsrs	r3, r0, #1
 801be34:	e7c3      	b.n	801bdbe <lfs_dir_splittingcompact+0x1e>
        if (split == begin) {
 801be36:	455c      	cmp	r4, fp
 801be38:	d022      	beq.n	801be80 <lfs_dir_splittingcompact+0xe0>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801be3a:	b2a4      	uxth	r4, r4
 801be3c:	9602      	str	r6, [sp, #8]
 801be3e:	9401      	str	r4, [sp, #4]
 801be40:	f8cd a000 	str.w	sl, [sp]
 801be44:	464b      	mov	r3, r9
 801be46:	462a      	mov	r2, r5
 801be48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801be4a:	4638      	mov	r0, r7
 801be4c:	f7ff ff66 	bl	801bd1c <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
 801be50:	4603      	mov	r3, r0
 801be52:	b910      	cbnz	r0, 801be5a <lfs_dir_splittingcompact+0xba>
            end = split;
 801be54:	4626      	mov	r6, r4
        lfs_size_t split = begin;
 801be56:	465c      	mov	r4, fp
        while (end - split > 1) {
 801be58:	e7c1      	b.n	801bdde <lfs_dir_splittingcompact+0x3e>
        if (err && err != LFS_ERR_NOSPC) {
 801be5a:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 801be5e:	f110 0f1c 	cmn.w	r0, #28
 801be62:	d138      	bne.n	801bed6 <lfs_dir_splittingcompact+0x136>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 801be64:	4b32      	ldr	r3, [pc, #200]	@ (801bf30 <lfs_dir_splittingcompact+0x190>)
 801be66:	9301      	str	r3, [sp, #4]
 801be68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801be6c:	9300      	str	r3, [sp, #0]
 801be6e:	f8d8 3000 	ldr.w	r3, [r8]
 801be72:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 801be76:	492f      	ldr	r1, [pc, #188]	@ (801bf34 <lfs_dir_splittingcompact+0x194>)
 801be78:	482f      	ldr	r0, [pc, #188]	@ (801bf38 <lfs_dir_splittingcompact+0x198>)
 801be7a:	f00b f8e3 	bl	8027044 <printf>
            break;
 801be7e:	e001      	b.n	801be84 <lfs_dir_splittingcompact+0xe4>
 801be80:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
    if (lfs_dir_needsrelocation(lfs, dir)
 801be84:	4641      	mov	r1, r8
 801be86:	4638      	mov	r0, r7
 801be88:	f7fd fc76 	bl	8019778 <lfs_dir_needsrelocation>
 801be8c:	b1b8      	cbz	r0, 801bebe <lfs_dir_splittingcompact+0x11e>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801be8e:	2300      	movs	r3, #0
 801be90:	930e      	str	r3, [sp, #56]	@ 0x38
 801be92:	2301      	movs	r3, #1
 801be94:	930f      	str	r3, [sp, #60]	@ 0x3c
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801be96:	f8d8 2000 	ldr.w	r2, [r8]
 801be9a:	b132      	cbz	r2, 801beaa <lfs_dir_splittingcompact+0x10a>
 801be9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801bea0:	2b01      	cmp	r3, #1
 801bea2:	d002      	beq.n	801beaa <lfs_dir_splittingcompact+0x10a>
 801bea4:	2a01      	cmp	r2, #1
 801bea6:	d000      	beq.n	801beaa <lfs_dir_splittingcompact+0x10a>
 801bea8:	b94b      	cbnz	r3, 801bebe <lfs_dir_splittingcompact+0x11e>
        lfs_ssize_t size = lfs_fs_size_(lfs);
 801beaa:	4638      	mov	r0, r7
 801beac:	f7ff fbe4 	bl	801b678 <lfs_fs_size_>
        if (size < 0) {
 801beb0:	1e03      	subs	r3, r0, #0
 801beb2:	db10      	blt.n	801bed6 <lfs_dir_splittingcompact+0x136>
        if (lfs->block_count - size > lfs->block_count/8) {
 801beb4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801beb6:	1ad3      	subs	r3, r2, r3
 801beb8:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 801bebc:	d80f      	bhi.n	801bede <lfs_dir_splittingcompact+0x13e>
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 801bebe:	9602      	str	r6, [sp, #8]
 801bec0:	f8cd b004 	str.w	fp, [sp, #4]
 801bec4:	f8cd a000 	str.w	sl, [sp]
 801bec8:	464b      	mov	r3, r9
 801beca:	462a      	mov	r2, r5
 801becc:	4641      	mov	r1, r8
 801bece:	4638      	mov	r0, r7
 801bed0:	f7ff fdc6 	bl	801ba60 <lfs_dir_compact>
 801bed4:	4603      	mov	r3, r0
}
 801bed6:	4618      	mov	r0, r3
 801bed8:	b011      	add	sp, #68	@ 0x44
 801beda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 801bede:	4b14      	ldr	r3, [pc, #80]	@ (801bf30 <lfs_dir_splittingcompact+0x190>)
 801bee0:	9300      	str	r3, [sp, #0]
 801bee2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801bee6:	f640 0286 	movw	r2, #2182	@ 0x886
 801beea:	4912      	ldr	r1, [pc, #72]	@ (801bf34 <lfs_dir_splittingcompact+0x194>)
 801beec:	4813      	ldr	r0, [pc, #76]	@ (801bf3c <lfs_dir_splittingcompact+0x19c>)
 801beee:	f00b f8a9 	bl	8027044 <printf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801bef2:	9602      	str	r6, [sp, #8]
 801bef4:	f8cd b004 	str.w	fp, [sp, #4]
 801bef8:	f8cd a000 	str.w	sl, [sp]
 801befc:	464b      	mov	r3, r9
 801befe:	462a      	mov	r2, r5
 801bf00:	4641      	mov	r1, r8
 801bf02:	4638      	mov	r0, r7
 801bf04:	f7ff ff0a 	bl	801bd1c <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
 801bf08:	4603      	mov	r3, r0
 801bf0a:	b150      	cbz	r0, 801bf22 <lfs_dir_splittingcompact+0x182>
 801bf0c:	f110 0f1c 	cmn.w	r0, #28
 801bf10:	d1e1      	bne.n	801bed6 <lfs_dir_splittingcompact+0x136>
                LFS_WARN("Unable to expand superblock");
 801bf12:	4b07      	ldr	r3, [pc, #28]	@ (801bf30 <lfs_dir_splittingcompact+0x190>)
 801bf14:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 801bf18:	4906      	ldr	r1, [pc, #24]	@ (801bf34 <lfs_dir_splittingcompact+0x194>)
 801bf1a:	4809      	ldr	r0, [pc, #36]	@ (801bf40 <lfs_dir_splittingcompact+0x1a0>)
 801bf1c:	f00b f892 	bl	8027044 <printf>
 801bf20:	e7cd      	b.n	801bebe <lfs_dir_splittingcompact+0x11e>
                end = 1;
 801bf22:	2601      	movs	r6, #1
 801bf24:	e7cb      	b.n	801bebe <lfs_dir_splittingcompact+0x11e>
 801bf26:	bf00      	nop
 801bf28:	0801975d 	.word	0x0801975d
 801bf2c:	400ffc00 	.word	0x400ffc00
 801bf30:	080337f8 	.word	0x080337f8
 801bf34:	0803558c 	.word	0x0803558c
 801bf38:	08035888 	.word	0x08035888
 801bf3c:	080358b8 	.word	0x080358b8
 801bf40:	080358e8 	.word	0x080358e8

0801bf44 <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
 801bf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf48:	b09b      	sub	sp, #108	@ 0x6c
 801bf4a:	4607      	mov	r7, r0
 801bf4c:	460e      	mov	r6, r1
 801bf4e:	4691      	mov	r9, r2
 801bf50:	461d      	mov	r5, r3
 801bf52:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
    for (int i = 0; i < attrcount; i++) {
 801bf56:	2300      	movs	r3, #0
    bool hasdelete = false;
 801bf58:	469c      	mov	ip, r3
    for (int i = 0; i < attrcount; i++) {
 801bf5a:	e003      	b.n	801bf64 <lfs_dir_relocatingcommit+0x20>
            dir->count += 1;
 801bf5c:	8ab2      	ldrh	r2, [r6, #20]
 801bf5e:	3201      	adds	r2, #1
 801bf60:	82b2      	strh	r2, [r6, #20]
    for (int i = 0; i < attrcount; i++) {
 801bf62:	3301      	adds	r3, #1
 801bf64:	4543      	cmp	r3, r8
 801bf66:	da2d      	bge.n	801bfc4 <lfs_dir_relocatingcommit+0x80>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801bf68:	00d8      	lsls	r0, r3, #3
 801bf6a:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 801bf6e:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801bf72:	0d11      	lsrs	r1, r2, #20
 801bf74:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801bf78:	f240 4e01 	movw	lr, #1025	@ 0x401
 801bf7c:	4572      	cmp	r2, lr
 801bf7e:	d0ed      	beq.n	801bf5c <lfs_dir_relocatingcommit+0x18>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 801bf80:	f240 4eff 	movw	lr, #1279	@ 0x4ff
 801bf84:	4572      	cmp	r2, lr
 801bf86:	d00f      	beq.n	801bfa8 <lfs_dir_relocatingcommit+0x64>
    return (tag & 0x70000000) >> 20;
 801bf88:	f401 61e0 	and.w	r1, r1, #1792	@ 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 801bf8c:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801bf90:	d1e7      	bne.n	801bf62 <lfs_dir_relocatingcommit+0x1e>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 801bf92:	6862      	ldr	r2, [r4, #4]
 801bf94:	6812      	ldr	r2, [r2, #0]
 801bf96:	61b2      	str	r2, [r6, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 801bf98:	6862      	ldr	r2, [r4, #4]
 801bf9a:	6852      	ldr	r2, [r2, #4]
 801bf9c:	61f2      	str	r2, [r6, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 801bf9e:	582a      	ldr	r2, [r5, r0]
 801bfa0:	f3c2 5200 	ubfx	r2, r2, #20, #1
 801bfa4:	75f2      	strb	r2, [r6, #23]
            lfs_pair_fromle32(dir->tail);
 801bfa6:	e7dc      	b.n	801bf62 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801bfa8:	8ab2      	ldrh	r2, [r6, #20]
 801bfaa:	b122      	cbz	r2, 801bfb6 <lfs_dir_relocatingcommit+0x72>
            dir->count -= 1;
 801bfac:	3a01      	subs	r2, #1
 801bfae:	82b2      	strh	r2, [r6, #20]
            hasdelete = true;
 801bfb0:	f04f 0c01 	mov.w	ip, #1
 801bfb4:	e7d5      	b.n	801bf62 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801bfb6:	4ba0      	ldr	r3, [pc, #640]	@ (801c238 <lfs_dir_relocatingcommit+0x2f4>)
 801bfb8:	4aa0      	ldr	r2, [pc, #640]	@ (801c23c <lfs_dir_relocatingcommit+0x2f8>)
 801bfba:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 801bfbe:	48a0      	ldr	r0, [pc, #640]	@ (801c240 <lfs_dir_relocatingcommit+0x2fc>)
 801bfc0:	f00b f80c 	bl	8026fdc <__assert_func>
    if (hasdelete && dir->count == 0) {
 801bfc4:	f1bc 0f00 	cmp.w	ip, #0
 801bfc8:	d01b      	beq.n	801c002 <lfs_dir_relocatingcommit+0xbe>
 801bfca:	8ab3      	ldrh	r3, [r6, #20]
 801bfcc:	b9cb      	cbnz	r3, 801c002 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801bfce:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801bfd0:	b15b      	cbz	r3, 801bfea <lfs_dir_relocatingcommit+0xa6>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 801bfd2:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801bfd4:	4631      	mov	r1, r6
 801bfd6:	4638      	mov	r0, r7
 801bfd8:	f7ff fb5e 	bl	801b698 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801bfdc:	4682      	mov	sl, r0
 801bfde:	b158      	cbz	r0, 801bff8 <lfs_dir_relocatingcommit+0xb4>
 801bfe0:	f110 0f02 	cmn.w	r0, #2
 801bfe4:	f040 8159 	bne.w	801c29a <lfs_dir_relocatingcommit+0x356>
 801bfe8:	e00b      	b.n	801c002 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801bfea:	4b96      	ldr	r3, [pc, #600]	@ (801c244 <lfs_dir_relocatingcommit+0x300>)
 801bfec:	4a93      	ldr	r2, [pc, #588]	@ (801c23c <lfs_dir_relocatingcommit+0x2f8>)
 801bfee:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 801bff2:	4893      	ldr	r0, [pc, #588]	@ (801c240 <lfs_dir_relocatingcommit+0x2fc>)
 801bff4:	f00a fff2 	bl	8026fdc <__assert_func>
        if (err != LFS_ERR_NOENT && pdir->split) {
 801bff8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801bffa:	7ddb      	ldrb	r3, [r3, #23]
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	f040 80bf 	bne.w	801c180 <lfs_dir_relocatingcommit+0x23c>
    if (dir->erased) {
 801c002:	7db4      	ldrb	r4, [r6, #22]
 801c004:	2c00      	cmp	r4, #0
 801c006:	d02e      	beq.n	801c066 <lfs_dir_relocatingcommit+0x122>
            .block = dir->pair[0],
 801c008:	6833      	ldr	r3, [r6, #0]
        struct lfs_commit commit = {
 801c00a:	9310      	str	r3, [sp, #64]	@ 0x40
            .off = dir->off,
 801c00c:	68f3      	ldr	r3, [r6, #12]
        struct lfs_commit commit = {
 801c00e:	9311      	str	r3, [sp, #68]	@ 0x44
            .ptag = dir->etag,
 801c010:	6932      	ldr	r2, [r6, #16]
        struct lfs_commit commit = {
 801c012:	9212      	str	r2, [sp, #72]	@ 0x48
 801c014:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c018:	9213      	str	r2, [sp, #76]	@ 0x4c
 801c01a:	9314      	str	r3, [sp, #80]	@ 0x50
            .end = (lfs->cfg->metadata_max ?
 801c01c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801c01e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801c020:	2b00      	cmp	r3, #0
 801c022:	d03c      	beq.n	801c09e <lfs_dir_relocatingcommit+0x15a>
 801c024:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 801c026:	9315      	str	r3, [sp, #84]	@ 0x54
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801c028:	9718      	str	r7, [sp, #96]	@ 0x60
 801c02a:	ab10      	add	r3, sp, #64	@ 0x40
 801c02c:	9319      	str	r3, [sp, #100]	@ 0x64
        int err = lfs_dir_traverse(lfs,
 801c02e:	ab18      	add	r3, sp, #96	@ 0x60
 801c030:	9308      	str	r3, [sp, #32]
 801c032:	4b85      	ldr	r3, [pc, #532]	@ (801c248 <lfs_dir_relocatingcommit+0x304>)
 801c034:	9307      	str	r3, [sp, #28]
 801c036:	2300      	movs	r3, #0
 801c038:	9306      	str	r3, [sp, #24]
 801c03a:	9305      	str	r3, [sp, #20]
 801c03c:	9304      	str	r3, [sp, #16]
 801c03e:	9303      	str	r3, [sp, #12]
 801c040:	9302      	str	r3, [sp, #8]
 801c042:	f8cd 8004 	str.w	r8, [sp, #4]
 801c046:	9500      	str	r5, [sp, #0]
 801c048:	6933      	ldr	r3, [r6, #16]
 801c04a:	68f2      	ldr	r2, [r6, #12]
 801c04c:	4631      	mov	r1, r6
 801c04e:	4638      	mov	r0, r7
 801c050:	f7fd feac 	bl	8019dac <lfs_dir_traverse>
        if (err) {
 801c054:	4682      	mov	sl, r0
 801c056:	b328      	cbz	r0, 801c0a4 <lfs_dir_relocatingcommit+0x160>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801c058:	f110 0f1c 	cmn.w	r0, #28
 801c05c:	d003      	beq.n	801c066 <lfs_dir_relocatingcommit+0x122>
 801c05e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c062:	f040 811a 	bne.w	801c29a <lfs_dir_relocatingcommit+0x356>
    rcache->block = LFS_BLOCK_NULL;
 801c066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c06a:	613b      	str	r3, [r7, #16]
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 801c06c:	8ab3      	ldrh	r3, [r6, #20]
 801c06e:	9302      	str	r3, [sp, #8]
 801c070:	2300      	movs	r3, #0
 801c072:	9301      	str	r3, [sp, #4]
 801c074:	9600      	str	r6, [sp, #0]
 801c076:	4643      	mov	r3, r8
 801c078:	462a      	mov	r2, r5
 801c07a:	4631      	mov	r1, r6
 801c07c:	4638      	mov	r0, r7
 801c07e:	f7ff fe8f 	bl	801bda0 <lfs_dir_splittingcompact>
    if (state < 0) {
 801c082:	1e01      	subs	r1, r0, #0
 801c084:	f2c0 8106 	blt.w	801c294 <lfs_dir_relocatingcommit+0x350>
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 801c088:	f8d9 b000 	ldr.w	fp, [r9]
 801c08c:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 801c090:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801c094:	9217      	str	r2, [sp, #92]	@ 0x5c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801c096:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 801c098:	4692      	mov	sl, r2
 801c09a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c09c:	e0db      	b.n	801c256 <lfs_dir_relocatingcommit+0x312>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801c09e:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801c0a0:	3b08      	subs	r3, #8
 801c0a2:	e7c0      	b.n	801c026 <lfs_dir_relocatingcommit+0xe2>
        lfs_gstate_t delta = {0};
 801c0a4:	2300      	movs	r3, #0
 801c0a6:	930d      	str	r3, [sp, #52]	@ 0x34
 801c0a8:	930e      	str	r3, [sp, #56]	@ 0x38
 801c0aa:	930f      	str	r3, [sp, #60]	@ 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
 801c0ac:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801c0b0:	a80d      	add	r0, sp, #52	@ 0x34
 801c0b2:	f7fd fa97 	bl	80195e4 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 801c0b6:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 801c0ba:	a80d      	add	r0, sp, #52	@ 0x34
 801c0bc:	f7fd fa92 	bl	80195e4 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 801c0c0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801c0c4:	a80d      	add	r0, sp, #52	@ 0x34
 801c0c6:	f7fd fa8d 	bl	80195e4 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801c0ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c0cc:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801c0d0:	f023 0303 	bic.w	r3, r3, #3
 801c0d4:	930d      	str	r3, [sp, #52]	@ 0x34
    for (int i = 0; i < 3; i++) {
 801c0d6:	e001      	b.n	801c0dc <lfs_dir_relocatingcommit+0x198>
 801c0d8:	f10a 0a01 	add.w	sl, sl, #1
 801c0dc:	f1ba 0f02 	cmp.w	sl, #2
 801c0e0:	dc07      	bgt.n	801c0f2 <lfs_dir_relocatingcommit+0x1ae>
        if (((uint32_t*)a)[i] != 0) {
 801c0e2:	ab1a      	add	r3, sp, #104	@ 0x68
 801c0e4:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801c0e8:	f853 3c34 	ldr.w	r3, [r3, #-52]
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d0f3      	beq.n	801c0d8 <lfs_dir_relocatingcommit+0x194>
            return false;
 801c0f0:	2400      	movs	r4, #0
        if (!lfs_gstate_iszero(&delta)) {
 801c0f2:	b9c4      	cbnz	r4, 801c126 <lfs_dir_relocatingcommit+0x1e2>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801c0f4:	aa0d      	add	r2, sp, #52	@ 0x34
 801c0f6:	4631      	mov	r1, r6
 801c0f8:	4638      	mov	r0, r7
 801c0fa:	f7fd fdc7 	bl	8019c8c <lfs_dir_getgstate>
            if (err) {
 801c0fe:	4682      	mov	sl, r0
 801c100:	2800      	cmp	r0, #0
 801c102:	f040 80ca 	bne.w	801c29a <lfs_dir_relocatingcommit+0x356>
            err = lfs_dir_commitattr(lfs, &commit,
 801c106:	ab0d      	add	r3, sp, #52	@ 0x34
 801c108:	4a50      	ldr	r2, [pc, #320]	@ (801c24c <lfs_dir_relocatingcommit+0x308>)
 801c10a:	a910      	add	r1, sp, #64	@ 0x40
 801c10c:	4638      	mov	r0, r7
 801c10e:	f7ff fb45 	bl	801b79c <lfs_dir_commitattr>
            if (err) {
 801c112:	4682      	mov	sl, r0
 801c114:	b138      	cbz	r0, 801c126 <lfs_dir_relocatingcommit+0x1e2>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801c116:	f110 0f1c 	cmn.w	r0, #28
 801c11a:	d0a4      	beq.n	801c066 <lfs_dir_relocatingcommit+0x122>
 801c11c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c120:	f040 80bb 	bne.w	801c29a <lfs_dir_relocatingcommit+0x356>
 801c124:	e79f      	b.n	801c066 <lfs_dir_relocatingcommit+0x122>
        err = lfs_dir_commitcrc(lfs, &commit);
 801c126:	a910      	add	r1, sp, #64	@ 0x40
 801c128:	4638      	mov	r0, r7
 801c12a:	f7ff fb9d 	bl	801b868 <lfs_dir_commitcrc>
        if (err) {
 801c12e:	4682      	mov	sl, r0
 801c130:	b138      	cbz	r0, 801c142 <lfs_dir_relocatingcommit+0x1fe>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801c132:	f110 0f1c 	cmn.w	r0, #28
 801c136:	d096      	beq.n	801c066 <lfs_dir_relocatingcommit+0x122>
 801c138:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c13c:	f040 80ad 	bne.w	801c29a <lfs_dir_relocatingcommit+0x356>
 801c140:	e791      	b.n	801c066 <lfs_dir_relocatingcommit+0x122>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801c142:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c144:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801c146:	6a11      	ldr	r1, [r2, #32]
 801c148:	fbb3 f2f1 	udiv	r2, r3, r1
 801c14c:	fb01 3212 	mls	r2, r1, r2, r3
 801c150:	b97a      	cbnz	r2, 801c172 <lfs_dir_relocatingcommit+0x22e>
        dir->off = commit.off;
 801c152:	60f3      	str	r3, [r6, #12]
        dir->etag = commit.ptag;
 801c154:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c156:	6133      	str	r3, [r6, #16]
        lfs->gdisk = lfs->gstate;
 801c158:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801c15c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801c160:	ca07      	ldmia	r2, {r0, r1, r2}
 801c162:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 801c166:	2200      	movs	r2, #0
 801c168:	64ba      	str	r2, [r7, #72]	@ 0x48
 801c16a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801c16c:	653a      	str	r2, [r7, #80]	@ 0x50
    int state = 0;
 801c16e:	4651      	mov	r1, sl
 801c170:	e78a      	b.n	801c088 <lfs_dir_relocatingcommit+0x144>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801c172:	4b37      	ldr	r3, [pc, #220]	@ (801c250 <lfs_dir_relocatingcommit+0x30c>)
 801c174:	4a31      	ldr	r2, [pc, #196]	@ (801c23c <lfs_dir_relocatingcommit+0x2f8>)
 801c176:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 801c17a:	4831      	ldr	r0, [pc, #196]	@ (801c240 <lfs_dir_relocatingcommit+0x2fc>)
 801c17c:	f00a ff2e 	bl	8026fdc <__assert_func>
            state = LFS_OK_DROPPED;
 801c180:	2102      	movs	r1, #2
 801c182:	e781      	b.n	801c088 <lfs_dir_relocatingcommit+0x144>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 801c184:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801c188:	f3c1 2089 	ubfx	r0, r1, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801c18c:	4584      	cmp	ip, r0
 801c18e:	d10e      	bne.n	801c1ae <lfs_dir_relocatingcommit+0x26a>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 801c190:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c194:	60a2      	str	r2, [r4, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 801c196:	60e2      	str	r2, [r4, #12]
                for (int i = 0; i < attrcount; i++) {
 801c198:	3301      	adds	r3, #1
 801c19a:	4543      	cmp	r3, r8
 801c19c:	da34      	bge.n	801c208 <lfs_dir_relocatingcommit+0x2c4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801c19e:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801c1a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801c1a6:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801c1aa:	4282      	cmp	r2, r0
 801c1ac:	d0ea      	beq.n	801c184 <lfs_dir_relocatingcommit+0x240>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801c1ae:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801c1b2:	4282      	cmp	r2, r0
 801c1b4:	d011      	beq.n	801c1da <lfs_dir_relocatingcommit+0x296>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801c1b6:	f240 4001 	movw	r0, #1025	@ 0x401
 801c1ba:	4282      	cmp	r2, r0
 801c1bc:	d1ec      	bne.n	801c198 <lfs_dir_relocatingcommit+0x254>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 801c1be:	88a2      	ldrh	r2, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801c1c0:	f3c1 2189 	ubfx	r1, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801c1c4:	428a      	cmp	r2, r1
 801c1c6:	d3e7      	bcc.n	801c198 <lfs_dir_relocatingcommit+0x254>
                        d->id += 1;
 801c1c8:	3201      	adds	r2, #1
 801c1ca:	80a2      	strh	r2, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801c1cc:	79a2      	ldrb	r2, [r4, #6]
 801c1ce:	2a02      	cmp	r2, #2
 801c1d0:	d1e2      	bne.n	801c198 <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos += 1;
 801c1d2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801c1d4:	3201      	adds	r2, #1
 801c1d6:	62a2      	str	r2, [r4, #40]	@ 0x28
 801c1d8:	e7de      	b.n	801c198 <lfs_dir_relocatingcommit+0x254>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 801c1da:	88a0      	ldrh	r0, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801c1dc:	f3c1 2c89 	ubfx	ip, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801c1e0:	4560      	cmp	r0, ip
 801c1e2:	d9e8      	bls.n	801c1b6 <lfs_dir_relocatingcommit+0x272>
                        d->id -= 1;
 801c1e4:	3801      	subs	r0, #1
 801c1e6:	80a0      	strh	r0, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801c1e8:	79a2      	ldrb	r2, [r4, #6]
 801c1ea:	2a02      	cmp	r2, #2
 801c1ec:	d1d4      	bne.n	801c198 <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos -= 1;
 801c1ee:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801c1f0:	3a01      	subs	r2, #1
 801c1f2:	62a2      	str	r2, [r4, #40]	@ 0x28
 801c1f4:	e7d0      	b.n	801c198 <lfs_dir_relocatingcommit+0x254>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 801c1f6:	f104 0220 	add.w	r2, r4, #32
 801c1fa:	f104 0108 	add.w	r1, r4, #8
 801c1fe:	4638      	mov	r0, r7
 801c200:	f7fe fd24 	bl	801ac4c <lfs_dir_fetch>
                if (err) {
 801c204:	2800      	cmp	r0, #0
 801c206:	d147      	bne.n	801c298 <lfs_dir_relocatingcommit+0x354>
            while (d->id >= d->m.count && d->m.split) {
 801c208:	88a3      	ldrh	r3, [r4, #4]
 801c20a:	8ba1      	ldrh	r1, [r4, #28]
 801c20c:	428b      	cmp	r3, r1
 801c20e:	d321      	bcc.n	801c254 <lfs_dir_relocatingcommit+0x310>
 801c210:	7fe2      	ldrb	r2, [r4, #31]
 801c212:	b1fa      	cbz	r2, 801c254 <lfs_dir_relocatingcommit+0x310>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c214:	6a22      	ldr	r2, [r4, #32]
 801c216:	6a38      	ldr	r0, [r7, #32]
 801c218:	4282      	cmp	r2, r0
 801c21a:	d0ec      	beq.n	801c1f6 <lfs_dir_relocatingcommit+0x2b2>
 801c21c:	f8d4 e024 	ldr.w	lr, [r4, #36]	@ 0x24
 801c220:	f8d7 c024 	ldr.w	ip, [r7, #36]	@ 0x24
 801c224:	45e6      	cmp	lr, ip
 801c226:	d0e6      	beq.n	801c1f6 <lfs_dir_relocatingcommit+0x2b2>
 801c228:	4562      	cmp	r2, ip
 801c22a:	d0e4      	beq.n	801c1f6 <lfs_dir_relocatingcommit+0x2b2>
 801c22c:	4570      	cmp	r0, lr
 801c22e:	d0e2      	beq.n	801c1f6 <lfs_dir_relocatingcommit+0x2b2>
                    d->id -= d->m.count;
 801c230:	1a5b      	subs	r3, r3, r1
 801c232:	80a3      	strh	r3, [r4, #4]
 801c234:	e7df      	b.n	801c1f6 <lfs_dir_relocatingcommit+0x2b2>
 801c236:	bf00      	nop
 801c238:	08035914 	.word	0x08035914
 801c23c:	0803628c 	.word	0x0803628c
 801c240:	0803558c 	.word	0x0803558c
 801c244:	08035924 	.word	0x08035924
 801c248:	0801b857 	.word	0x0801b857
 801c24c:	7ffffc0c 	.word	0x7ffffc0c
 801c250:	08035828 	.word	0x08035828
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801c254:	6824      	ldr	r4, [r4, #0]
 801c256:	b1d4      	cbz	r4, 801c28e <lfs_dir_relocatingcommit+0x34a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c258:	68a3      	ldr	r3, [r4, #8]
 801c25a:	459b      	cmp	fp, r3
 801c25c:	d006      	beq.n	801c26c <lfs_dir_relocatingcommit+0x328>
 801c25e:	68e2      	ldr	r2, [r4, #12]
 801c260:	4592      	cmp	sl, r2
 801c262:	d003      	beq.n	801c26c <lfs_dir_relocatingcommit+0x328>
 801c264:	459a      	cmp	sl, r3
 801c266:	d001      	beq.n	801c26c <lfs_dir_relocatingcommit+0x328>
 801c268:	4593      	cmp	fp, r2
 801c26a:	d1f3      	bne.n	801c254 <lfs_dir_relocatingcommit+0x310>
            d->m = *dir;
 801c26c:	f104 0c08 	add.w	ip, r4, #8
 801c270:	46b6      	mov	lr, r6
 801c272:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c276:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c27a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801c27e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 801c282:	f104 0308 	add.w	r3, r4, #8
 801c286:	454b      	cmp	r3, r9
 801c288:	d0be      	beq.n	801c208 <lfs_dir_relocatingcommit+0x2c4>
                for (int i = 0; i < attrcount; i++) {
 801c28a:	2300      	movs	r3, #0
 801c28c:	e785      	b.n	801c19a <lfs_dir_relocatingcommit+0x256>
    return state;
 801c28e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c290:	468a      	mov	sl, r1
 801c292:	e002      	b.n	801c29a <lfs_dir_relocatingcommit+0x356>
        return state;
 801c294:	468a      	mov	sl, r1
 801c296:	e000      	b.n	801c29a <lfs_dir_relocatingcommit+0x356>
 801c298:	4682      	mov	sl, r0
}
 801c29a:	4650      	mov	r0, sl
 801c29c:	b01b      	add	sp, #108	@ 0x6c
 801c29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2a2:	bf00      	nop

0801c2a4 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801c2a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c2a8:	b0a3      	sub	sp, #140	@ 0x8c
 801c2aa:	4605      	mov	r5, r0
 801c2ac:	460e      	mov	r6, r1
 801c2ae:	4690      	mov	r8, r2
 801c2b0:	4699      	mov	r9, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801c2b2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801c2b4:	e003      	b.n	801c2be <lfs_dir_orphaningcommit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801c2b6:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801c2b8:	2b01      	cmp	r3, #1
 801c2ba:	d012      	beq.n	801c2e2 <lfs_dir_orphaningcommit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801c2bc:	6824      	ldr	r4, [r4, #0]
 801c2be:	b34c      	cbz	r4, 801c314 <lfs_dir_orphaningcommit+0x70>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801c2c0:	f104 0108 	add.w	r1, r4, #8
 801c2c4:	42b1      	cmp	r1, r6
 801c2c6:	d0f9      	beq.n	801c2bc <lfs_dir_orphaningcommit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c2c8:	68a1      	ldr	r1, [r4, #8]
 801c2ca:	6833      	ldr	r3, [r6, #0]
 801c2cc:	428b      	cmp	r3, r1
 801c2ce:	d0f2      	beq.n	801c2b6 <lfs_dir_orphaningcommit+0x12>
 801c2d0:	68e0      	ldr	r0, [r4, #12]
 801c2d2:	6872      	ldr	r2, [r6, #4]
 801c2d4:	4282      	cmp	r2, r0
 801c2d6:	d0ee      	beq.n	801c2b6 <lfs_dir_orphaningcommit+0x12>
 801c2d8:	428a      	cmp	r2, r1
 801c2da:	d0ec      	beq.n	801c2b6 <lfs_dir_orphaningcommit+0x12>
 801c2dc:	4298      	cmp	r0, r3
 801c2de:	d1ed      	bne.n	801c2bc <lfs_dir_orphaningcommit+0x18>
 801c2e0:	e7e9      	b.n	801c2b6 <lfs_dir_orphaningcommit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801c2e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c2e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801c2e8:	d0e8      	beq.n	801c2bc <lfs_dir_orphaningcommit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
 801c2ea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c2ec:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c2ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801c2f0:	429a      	cmp	r2, r3
 801c2f2:	d9e3      	bls.n	801c2bc <lfs_dir_orphaningcommit+0x18>
            int err = lfs_file_outline(lfs, f);
 801c2f4:	4621      	mov	r1, r4
 801c2f6:	4628      	mov	r0, r5
 801c2f8:	f7fe feee 	bl	801b0d8 <lfs_file_outline>
            if (err) {
 801c2fc:	4607      	mov	r7, r0
 801c2fe:	2800      	cmp	r0, #0
 801c300:	f040 81bc 	bne.w	801c67c <lfs_dir_orphaningcommit+0x3d8>
            err = lfs_file_flush(lfs, f);
 801c304:	4621      	mov	r1, r4
 801c306:	4628      	mov	r0, r5
 801c308:	f7ff f866 	bl	801b3d8 <lfs_file_flush>
            if (err) {
 801c30c:	4607      	mov	r7, r0
 801c30e:	2800      	cmp	r0, #0
 801c310:	d0d4      	beq.n	801c2bc <lfs_dir_orphaningcommit+0x18>
 801c312:	e1b3      	b.n	801c67c <lfs_dir_orphaningcommit+0x3d8>
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 801c314:	6833      	ldr	r3, [r6, #0]
 801c316:	9316      	str	r3, [sp, #88]	@ 0x58
 801c318:	6873      	ldr	r3, [r6, #4]
 801c31a:	9317      	str	r3, [sp, #92]	@ 0x5c
    lfs_mdir_t ldir = *dir;
 801c31c:	ac0e      	add	r4, sp, #56	@ 0x38
 801c31e:	4637      	mov	r7, r6
 801c320:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801c322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c324:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801c328:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 801c32c:	ab06      	add	r3, sp, #24
 801c32e:	9301      	str	r3, [sp, #4]
 801c330:	f8cd 9000 	str.w	r9, [sp]
 801c334:	4643      	mov	r3, r8
 801c336:	4632      	mov	r2, r6
 801c338:	a90e      	add	r1, sp, #56	@ 0x38
 801c33a:	4628      	mov	r0, r5
 801c33c:	f7ff fe02 	bl	801bf44 <lfs_dir_relocatingcommit>
    if (state < 0) {
 801c340:	1e07      	subs	r7, r0, #0
 801c342:	f2c0 819b 	blt.w	801c67c <lfs_dir_orphaningcommit+0x3d8>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c346:	6833      	ldr	r3, [r6, #0]
 801c348:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c34a:	429a      	cmp	r2, r3
 801c34c:	d007      	beq.n	801c35e <lfs_dir_orphaningcommit+0xba>
 801c34e:	6870      	ldr	r0, [r6, #4]
 801c350:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801c352:	4281      	cmp	r1, r0
 801c354:	d003      	beq.n	801c35e <lfs_dir_orphaningcommit+0xba>
 801c356:	4299      	cmp	r1, r3
 801c358:	d001      	beq.n	801c35e <lfs_dir_orphaningcommit+0xba>
 801c35a:	4290      	cmp	r0, r2
 801c35c:	d109      	bne.n	801c372 <lfs_dir_orphaningcommit+0xce>
        *dir = ldir;
 801c35e:	4634      	mov	r4, r6
 801c360:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801c364:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c36a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801c36e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
 801c372:	2f02      	cmp	r7, #2
 801c374:	d001      	beq.n	801c37a <lfs_dir_orphaningcommit+0xd6>
                orphans = true;
 801c376:	2600      	movs	r6, #0
 801c378:	e0b8      	b.n	801c4ec <lfs_dir_orphaningcommit+0x248>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 801c37a:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801c37e:	4631      	mov	r1, r6
 801c380:	4628      	mov	r0, r5
 801c382:	f7fd fc83 	bl	8019c8c <lfs_dir_getgstate>
        if (err) {
 801c386:	4607      	mov	r7, r0
 801c388:	2800      	cmp	r0, #0
 801c38a:	f040 8177 	bne.w	801c67c <lfs_dir_orphaningcommit+0x3d8>
        lpair[0] = pdir.pair[0];
 801c38e:	9b06      	ldr	r3, [sp, #24]
 801c390:	9316      	str	r3, [sp, #88]	@ 0x58
        lpair[1] = pdir.pair[1];
 801c392:	9b07      	ldr	r3, [sp, #28]
 801c394:	9317      	str	r3, [sp, #92]	@ 0x5c
        lfs_pair_tole32(dir->tail);
 801c396:	f106 0118 	add.w	r1, r6, #24
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801c39a:	7df2      	ldrb	r2, [r6, #23]
 801c39c:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801c3a0:	4ba2      	ldr	r3, [pc, #648]	@ (801c62c <lfs_dir_orphaningcommit+0x388>)
 801c3a2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801c3a6:	9318      	str	r3, [sp, #96]	@ 0x60
 801c3a8:	9119      	str	r1, [sp, #100]	@ 0x64
 801c3aa:	2300      	movs	r3, #0
 801c3ac:	9301      	str	r3, [sp, #4]
 801c3ae:	2301      	movs	r3, #1
 801c3b0:	9300      	str	r3, [sp, #0]
 801c3b2:	ab18      	add	r3, sp, #96	@ 0x60
 801c3b4:	aa16      	add	r2, sp, #88	@ 0x58
 801c3b6:	a906      	add	r1, sp, #24
 801c3b8:	4628      	mov	r0, r5
 801c3ba:	f7ff fdc3 	bl	801bf44 <lfs_dir_relocatingcommit>
        if (state < 0) {
 801c3be:	1e07      	subs	r7, r0, #0
 801c3c0:	f2c0 815c 	blt.w	801c67c <lfs_dir_orphaningcommit+0x3d8>
        ldir = pdir;
 801c3c4:	ac0e      	add	r4, sp, #56	@ 0x38
 801c3c6:	ae06      	add	r6, sp, #24
 801c3c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c3ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c3cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801c3d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801c3d4:	e7cf      	b.n	801c376 <lfs_dir_orphaningcommit+0xd2>
                d->m.pair[0] = ldir.pair[0];
 801c3d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c3d8:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 801c3da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c3dc:	60da      	str	r2, [r3, #12]
            if (d->type == LFS_TYPE_DIR &&
 801c3de:	799a      	ldrb	r2, [r3, #6]
 801c3e0:	2a02      	cmp	r2, #2
 801c3e2:	d00d      	beq.n	801c400 <lfs_dir_orphaningcommit+0x15c>
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801c3e4:	681b      	ldr	r3, [r3, #0]
 801c3e6:	b1db      	cbz	r3, 801c420 <lfs_dir_orphaningcommit+0x17c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c3e8:	689a      	ldr	r2, [r3, #8]
 801c3ea:	4291      	cmp	r1, r2
 801c3ec:	d0f3      	beq.n	801c3d6 <lfs_dir_orphaningcommit+0x132>
 801c3ee:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801c3f0:	68dc      	ldr	r4, [r3, #12]
 801c3f2:	4284      	cmp	r4, r0
 801c3f4:	d0ef      	beq.n	801c3d6 <lfs_dir_orphaningcommit+0x132>
 801c3f6:	428c      	cmp	r4, r1
 801c3f8:	d0ed      	beq.n	801c3d6 <lfs_dir_orphaningcommit+0x132>
 801c3fa:	4290      	cmp	r0, r2
 801c3fc:	d1ef      	bne.n	801c3de <lfs_dir_orphaningcommit+0x13a>
 801c3fe:	e7ea      	b.n	801c3d6 <lfs_dir_orphaningcommit+0x132>
 801c400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c402:	428a      	cmp	r2, r1
 801c404:	d007      	beq.n	801c416 <lfs_dir_orphaningcommit+0x172>
 801c406:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801c408:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801c40a:	42a0      	cmp	r0, r4
 801c40c:	d003      	beq.n	801c416 <lfs_dir_orphaningcommit+0x172>
 801c40e:	4288      	cmp	r0, r1
 801c410:	d001      	beq.n	801c416 <lfs_dir_orphaningcommit+0x172>
 801c412:	4294      	cmp	r4, r2
 801c414:	d1e6      	bne.n	801c3e4 <lfs_dir_orphaningcommit+0x140>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 801c416:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c418:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 801c41a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c41c:	631a      	str	r2, [r3, #48]	@ 0x30
 801c41e:	e7e1      	b.n	801c3e4 <lfs_dir_orphaningcommit+0x140>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801c420:	aa06      	add	r2, sp, #24
 801c422:	a916      	add	r1, sp, #88	@ 0x58
 801c424:	4628      	mov	r0, r5
 801c426:	f7fe fba5 	bl	801ab74 <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 801c42a:	1e04      	subs	r4, r0, #0
 801c42c:	f280 8082 	bge.w	801c534 <lfs_dir_orphaningcommit+0x290>
 801c430:	f114 0f02 	cmn.w	r4, #2
 801c434:	f040 8128 	bne.w	801c688 <lfs_dir_orphaningcommit+0x3e4>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801c438:	f114 0802 	adds.w	r8, r4, #2
 801c43c:	bf18      	it	ne
 801c43e:	f04f 0801 	movne.w	r8, #1
        state = 0;
 801c442:	2700      	movs	r7, #0
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 801c444:	aa06      	add	r2, sp, #24
 801c446:	a916      	add	r1, sp, #88	@ 0x58
 801c448:	4628      	mov	r0, r5
 801c44a:	f7ff f925 	bl	801b698 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801c44e:	4603      	mov	r3, r0
 801c450:	b118      	cbz	r0, 801c45a <lfs_dir_orphaningcommit+0x1b6>
 801c452:	f110 0f02 	cmn.w	r0, #2
 801c456:	f040 8119 	bne.w	801c68c <lfs_dir_orphaningcommit+0x3e8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801c45a:	f114 0f02 	cmn.w	r4, #2
 801c45e:	f000 80d6 	beq.w	801c60e <lfs_dir_orphaningcommit+0x36a>
 801c462:	f113 0f02 	cmn.w	r3, #2
 801c466:	f000 80cb 	beq.w	801c600 <lfs_dir_orphaningcommit+0x35c>
    return lfs_tag_size(a->tag);
 801c46a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    return tag & 0x000003ff;
 801c46c:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 801c470:	2b00      	cmp	r3, #0
 801c472:	f040 80d1 	bne.w	801c618 <lfs_dir_orphaningcommit+0x374>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801c476:	a906      	add	r1, sp, #24
 801c478:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801c47c:	f7fd f8c4 	bl	8019608 <lfs_gstate_hasmovehere>
 801c480:	2800      	cmp	r0, #0
 801c482:	f040 80e1 	bne.w	801c648 <lfs_dir_orphaningcommit+0x3a4>
            uint16_t moveid = 0x3ff;
 801c486:	f240 34ff 	movw	r4, #1023	@ 0x3ff
            lpair[0] = pdir.pair[0];
 801c48a:	9b06      	ldr	r3, [sp, #24]
 801c48c:	9316      	str	r3, [sp, #88]	@ 0x58
            lpair[1] = pdir.pair[1];
 801c48e:	9b07      	ldr	r3, [sp, #28]
 801c490:	9317      	str	r3, [sp, #92]	@ 0x5c
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801c492:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801c496:	429c      	cmp	r4, r3
 801c498:	f000 80ec 	beq.w	801c674 <lfs_dir_orphaningcommit+0x3d0>
 801c49c:	02a3      	lsls	r3, r4, #10
 801c49e:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801c4a2:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801c4a6:	931e      	str	r3, [sp, #120]	@ 0x78
 801c4a8:	2100      	movs	r1, #0
 801c4aa:	911f      	str	r1, [sp, #124]	@ 0x7c
 801c4ac:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 801c4b0:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801c4b4:	4b5d      	ldr	r3, [pc, #372]	@ (801c62c <lfs_dir_orphaningcommit+0x388>)
 801c4b6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801c4ba:	9320      	str	r3, [sp, #128]	@ 0x80
 801c4bc:	ab0e      	add	r3, sp, #56	@ 0x38
 801c4be:	9321      	str	r3, [sp, #132]	@ 0x84
 801c4c0:	9101      	str	r1, [sp, #4]
 801c4c2:	2302      	movs	r3, #2
 801c4c4:	9300      	str	r3, [sp, #0]
 801c4c6:	ab1e      	add	r3, sp, #120	@ 0x78
 801c4c8:	aa16      	add	r2, sp, #88	@ 0x58
 801c4ca:	a906      	add	r1, sp, #24
 801c4cc:	4628      	mov	r0, r5
 801c4ce:	f7ff fd39 	bl	801bf44 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801c4d2:	1e07      	subs	r7, r0, #0
 801c4d4:	f2c0 80d2 	blt.w	801c67c <lfs_dir_orphaningcommit+0x3d8>
            ldir = pdir;
 801c4d8:	ac0e      	add	r4, sp, #56	@ 0x38
 801c4da:	f10d 0c18 	add.w	ip, sp, #24
 801c4de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c4e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c4e4:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801c4e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 801c4ec:	2f01      	cmp	r7, #1
 801c4ee:	f040 80c3 	bne.w	801c678 <lfs_dir_orphaningcommit+0x3d4>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 801c4f2:	4b4f      	ldr	r3, [pc, #316]	@ (801c630 <lfs_dir_orphaningcommit+0x38c>)
 801c4f4:	9303      	str	r3, [sp, #12]
 801c4f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c4f8:	9302      	str	r3, [sp, #8]
 801c4fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c4fc:	9301      	str	r3, [sp, #4]
 801c4fe:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c500:	9300      	str	r3, [sp, #0]
 801c502:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c504:	f640 128c 	movw	r2, #2444	@ 0x98c
 801c508:	494a      	ldr	r1, [pc, #296]	@ (801c634 <lfs_dir_orphaningcommit+0x390>)
 801c50a:	484b      	ldr	r0, [pc, #300]	@ (801c638 <lfs_dir_orphaningcommit+0x394>)
 801c50c:	f00a fd9a 	bl	8027044 <printf>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c510:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801c512:	6a2b      	ldr	r3, [r5, #32]
 801c514:	428b      	cmp	r3, r1
 801c516:	d007      	beq.n	801c528 <lfs_dir_orphaningcommit+0x284>
 801c518:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801c51a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801c51c:	4282      	cmp	r2, r0
 801c51e:	d003      	beq.n	801c528 <lfs_dir_orphaningcommit+0x284>
 801c520:	428a      	cmp	r2, r1
 801c522:	d001      	beq.n	801c528 <lfs_dir_orphaningcommit+0x284>
 801c524:	4298      	cmp	r0, r3
 801c526:	d103      	bne.n	801c530 <lfs_dir_orphaningcommit+0x28c>
            lfs->root[0] = ldir.pair[0];
 801c528:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c52a:	622b      	str	r3, [r5, #32]
            lfs->root[1] = ldir.pair[1];
 801c52c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c52e:	626b      	str	r3, [r5, #36]	@ 0x24
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801c530:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801c532:	e758      	b.n	801c3e6 <lfs_dir_orphaningcommit+0x142>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801c534:	f114 0802 	adds.w	r8, r4, #2
 801c538:	bf18      	it	ne
 801c53a:	f04f 0801 	movne.w	r8, #1
            int err = lfs_fs_preporphans(lfs, +1);
 801c53e:	2101      	movs	r1, #1
 801c540:	4628      	mov	r0, r5
 801c542:	f7fd f997 	bl	8019874 <lfs_fs_preporphans>
            if (err) {
 801c546:	4607      	mov	r7, r0
 801c548:	2800      	cmp	r0, #0
 801c54a:	f040 8097 	bne.w	801c67c <lfs_dir_orphaningcommit+0x3d8>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801c54e:	a906      	add	r1, sp, #24
 801c550:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801c554:	f7fd f858 	bl	8019608 <lfs_gstate_hasmovehere>
 801c558:	2800      	cmp	r0, #0
 801c55a:	d131      	bne.n	801c5c0 <lfs_dir_orphaningcommit+0x31c>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801c55c:	4622      	mov	r2, r4
            uint16_t moveid = 0x3ff;
 801c55e:	f240 37ff 	movw	r7, #1023	@ 0x3ff
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 801c562:	9b06      	ldr	r3, [sp, #24]
 801c564:	9304      	str	r3, [sp, #16]
 801c566:	9b07      	ldr	r3, [sp, #28]
 801c568:	9305      	str	r3, [sp, #20]
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801c56a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801c56e:	429f      	cmp	r7, r3
 801c570:	d044      	beq.n	801c5fc <lfs_dir_orphaningcommit+0x358>
 801c572:	02bb      	lsls	r3, r7, #10
 801c574:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801c578:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801c57c:	931a      	str	r3, [sp, #104]	@ 0x68
 801c57e:	2300      	movs	r3, #0
 801c580:	931b      	str	r3, [sp, #108]	@ 0x6c
 801c582:	921c      	str	r2, [sp, #112]	@ 0x70
 801c584:	aa0e      	add	r2, sp, #56	@ 0x38
 801c586:	921d      	str	r2, [sp, #116]	@ 0x74
 801c588:	9301      	str	r3, [sp, #4]
 801c58a:	2302      	movs	r3, #2
 801c58c:	9300      	str	r3, [sp, #0]
 801c58e:	ab1a      	add	r3, sp, #104	@ 0x68
 801c590:	aa04      	add	r2, sp, #16
 801c592:	a906      	add	r1, sp, #24
 801c594:	4628      	mov	r0, r5
 801c596:	f7ff fcd5 	bl	801bf44 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801c59a:	1e07      	subs	r7, r0, #0
 801c59c:	db6e      	blt.n	801c67c <lfs_dir_orphaningcommit+0x3d8>
            if (state == LFS_OK_RELOCATED) {
 801c59e:	2f01      	cmp	r7, #1
 801c5a0:	f47f af50 	bne.w	801c444 <lfs_dir_orphaningcommit+0x1a0>
                lpair[0] = ppair[0];
 801c5a4:	9b04      	ldr	r3, [sp, #16]
 801c5a6:	9316      	str	r3, [sp, #88]	@ 0x58
                lpair[1] = ppair[1];
 801c5a8:	9b05      	ldr	r3, [sp, #20]
 801c5aa:	9317      	str	r3, [sp, #92]	@ 0x5c
                ldir = pdir;
 801c5ac:	ac0e      	add	r4, sp, #56	@ 0x38
 801c5ae:	ae06      	add	r6, sp, #24
 801c5b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c5b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c5b4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801c5b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 801c5bc:	2601      	movs	r6, #1
 801c5be:	e795      	b.n	801c4ec <lfs_dir_orphaningcommit+0x248>
                moveid = lfs_tag_id(lfs->gstate.tag);
 801c5c0:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801c5c2:	f3c7 2789 	ubfx	r7, r7, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801c5c6:	4b1a      	ldr	r3, [pc, #104]	@ (801c630 <lfs_dir_orphaningcommit+0x38c>)
 801c5c8:	9302      	str	r3, [sp, #8]
 801c5ca:	9701      	str	r7, [sp, #4]
 801c5cc:	9b07      	ldr	r3, [sp, #28]
 801c5ce:	9300      	str	r3, [sp, #0]
 801c5d0:	9b06      	ldr	r3, [sp, #24]
 801c5d2:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 801c5d6:	4917      	ldr	r1, [pc, #92]	@ (801c634 <lfs_dir_orphaningcommit+0x390>)
 801c5d8:	4818      	ldr	r0, [pc, #96]	@ (801c63c <lfs_dir_orphaningcommit+0x398>)
 801c5da:	f00a fd33 	bl	8027044 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801c5de:	2200      	movs	r2, #0
 801c5e0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801c5e4:	4628      	mov	r0, r5
 801c5e6:	f7fd f8f5 	bl	80197d4 <lfs_fs_prepmove>
    return (tag & 0x000ffc00) >> 10;
 801c5ea:	f3c4 2389 	ubfx	r3, r4, #10, #10
                if (moveid < lfs_tag_id(tag)) {
 801c5ee:	42bb      	cmp	r3, r7
 801c5f0:	d902      	bls.n	801c5f8 <lfs_dir_orphaningcommit+0x354>
                    tag -= LFS_MKTAG(0, 1, 0);
 801c5f2:	f5a4 6280 	sub.w	r2, r4, #1024	@ 0x400
 801c5f6:	e7b4      	b.n	801c562 <lfs_dir_orphaningcommit+0x2be>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801c5f8:	4622      	mov	r2, r4
 801c5fa:	e7b2      	b.n	801c562 <lfs_dir_orphaningcommit+0x2be>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801c5fc:	2300      	movs	r3, #0
 801c5fe:	e7bd      	b.n	801c57c <lfs_dir_orphaningcommit+0x2d8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801c600:	4b0f      	ldr	r3, [pc, #60]	@ (801c640 <lfs_dir_orphaningcommit+0x39c>)
 801c602:	4a10      	ldr	r2, [pc, #64]	@ (801c644 <lfs_dir_orphaningcommit+0x3a0>)
 801c604:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 801c608:	480a      	ldr	r0, [pc, #40]	@ (801c634 <lfs_dir_orphaningcommit+0x390>)
 801c60a:	f00a fce7 	bl	8026fdc <__assert_func>
        if (err != LFS_ERR_NOENT) {
 801c60e:	f113 0f02 	cmn.w	r3, #2
 801c612:	f47f af2a 	bne.w	801c46a <lfs_dir_orphaningcommit+0x1c6>
 801c616:	e769      	b.n	801c4ec <lfs_dir_orphaningcommit+0x248>
                err = lfs_fs_preporphans(lfs, -hasparent);
 801c618:	f1c8 0100 	rsb	r1, r8, #0
 801c61c:	4628      	mov	r0, r5
 801c61e:	f7fd f929 	bl	8019874 <lfs_fs_preporphans>
                if (err) {
 801c622:	4607      	mov	r7, r0
 801c624:	2800      	cmp	r0, #0
 801c626:	f43f af26 	beq.w	801c476 <lfs_dir_orphaningcommit+0x1d2>
 801c62a:	e027      	b.n	801c67c <lfs_dir_orphaningcommit+0x3d8>
 801c62c:	000ffc08 	.word	0x000ffc08
 801c630:	080337f8 	.word	0x080337f8
 801c634:	0803558c 	.word	0x0803558c
 801c638:	0803592c 	.word	0x0803592c
 801c63c:	08035968 	.word	0x08035968
 801c640:	080359ac 	.word	0x080359ac
 801c644:	080362e8 	.word	0x080362e8
                moveid = lfs_tag_id(lfs->gstate.tag);
 801c648:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801c64a:	f3c4 2489 	ubfx	r4, r4, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801c64e:	4b10      	ldr	r3, [pc, #64]	@ (801c690 <lfs_dir_orphaningcommit+0x3ec>)
 801c650:	9302      	str	r3, [sp, #8]
 801c652:	9401      	str	r4, [sp, #4]
 801c654:	9b07      	ldr	r3, [sp, #28]
 801c656:	9300      	str	r3, [sp, #0]
 801c658:	9b06      	ldr	r3, [sp, #24]
 801c65a:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 801c65e:	490d      	ldr	r1, [pc, #52]	@ (801c694 <lfs_dir_orphaningcommit+0x3f0>)
 801c660:	480d      	ldr	r0, [pc, #52]	@ (801c698 <lfs_dir_orphaningcommit+0x3f4>)
 801c662:	f00a fcef 	bl	8027044 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801c666:	2200      	movs	r2, #0
 801c668:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801c66c:	4628      	mov	r0, r5
 801c66e:	f7fd f8b1 	bl	80197d4 <lfs_fs_prepmove>
 801c672:	e70a      	b.n	801c48a <lfs_dir_orphaningcommit+0x1e6>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801c674:	2300      	movs	r3, #0
 801c676:	e716      	b.n	801c4a6 <lfs_dir_orphaningcommit+0x202>
    return orphans ? LFS_OK_ORPHANED : 0;
 801c678:	b926      	cbnz	r6, 801c684 <lfs_dir_orphaningcommit+0x3e0>
 801c67a:	2700      	movs	r7, #0
}
 801c67c:	4638      	mov	r0, r7
 801c67e:	b023      	add	sp, #140	@ 0x8c
 801c680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return orphans ? LFS_OK_ORPHANED : 0;
 801c684:	2703      	movs	r7, #3
 801c686:	e7f9      	b.n	801c67c <lfs_dir_orphaningcommit+0x3d8>
            return tag;
 801c688:	4627      	mov	r7, r4
 801c68a:	e7f7      	b.n	801c67c <lfs_dir_orphaningcommit+0x3d8>
            return err;
 801c68c:	4607      	mov	r7, r0
 801c68e:	e7f5      	b.n	801c67c <lfs_dir_orphaningcommit+0x3d8>
 801c690:	080337f8 	.word	0x080337f8
 801c694:	0803558c 	.word	0x0803558c
 801c698:	08035968 	.word	0x08035968

0801c69c <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 801c69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c6a0:	b0a4      	sub	sp, #144	@ 0x90
    return lfs_tag_size(a->tag);
 801c6a2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801c6a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	f000 80ea 	beq.w	801c882 <lfs_fs_deorphan+0x1e6>
 801c6ae:	4605      	mov	r5, r0
 801c6b0:	460f      	mov	r7, r1
    int pass = 0;
 801c6b2:	2600      	movs	r6, #0
    while (pass < 2) {
 801c6b4:	2e01      	cmp	r6, #1
 801c6b6:	f300 80db 	bgt.w	801c870 <lfs_fs_deorphan+0x1d4>
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 801c6ba:	2220      	movs	r2, #32
 801c6bc:	2100      	movs	r1, #0
 801c6be:	a806      	add	r0, sp, #24
 801c6c0:	f00d f9de 	bl	8029a80 <memset>
 801c6c4:	2301      	movs	r3, #1
 801c6c6:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
 801c6ca:	930d      	str	r3, [sp, #52]	@ 0x34
        bool moreorphans = false;
 801c6cc:	f04f 0800 	mov.w	r8, #0
        while (!lfs_pair_isnull(pdir.tail)) {
 801c6d0:	e0bd      	b.n	801c84e <lfs_fs_deorphan+0x1b2>
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 801c6d2:	aa16      	add	r2, sp, #88	@ 0x58
 801c6d4:	a90c      	add	r1, sp, #48	@ 0x30
 801c6d6:	4628      	mov	r0, r5
 801c6d8:	f7fe fa4c 	bl	801ab74 <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801c6dc:	1e04      	subs	r4, r0, #0
 801c6de:	db39      	blt.n	801c754 <lfs_fs_deorphan+0xb8>
                if (pass == 0 && tag != LFS_ERR_NOENT) {
 801c6e0:	b916      	cbnz	r6, 801c6e8 <lfs_fs_deorphan+0x4c>
 801c6e2:	f114 0f02 	cmn.w	r4, #2
 801c6e6:	d139      	bne.n	801c75c <lfs_fs_deorphan+0xc0>
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 801c6e8:	2e01      	cmp	r6, #1
 801c6ea:	f040 80a4 	bne.w	801c836 <lfs_fs_deorphan+0x19a>
 801c6ee:	f114 0f02 	cmn.w	r4, #2
 801c6f2:	f040 80a0 	bne.w	801c836 <lfs_fs_deorphan+0x19a>
 801c6f6:	2f00      	cmp	r7, #0
 801c6f8:	f000 809d 	beq.w	801c836 <lfs_fs_deorphan+0x19a>
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 801c6fc:	4b63      	ldr	r3, [pc, #396]	@ (801c88c <lfs_fs_deorphan+0x1f0>)
 801c6fe:	9301      	str	r3, [sp, #4]
 801c700:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c702:	9300      	str	r3, [sp, #0]
 801c704:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c706:	f241 329c 	movw	r2, #5020	@ 0x139c
 801c70a:	4961      	ldr	r1, [pc, #388]	@ (801c890 <lfs_fs_deorphan+0x1f4>)
 801c70c:	4861      	ldr	r0, [pc, #388]	@ (801c894 <lfs_fs_deorphan+0x1f8>)
 801c70e:	f00a fc99 	bl	8027044 <printf>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 801c712:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801c716:	a90e      	add	r1, sp, #56	@ 0x38
 801c718:	4628      	mov	r0, r5
 801c71a:	f7fd fab7 	bl	8019c8c <lfs_dir_getgstate>
                    if (err) {
 801c71e:	4604      	mov	r4, r0
 801c720:	2800      	cmp	r0, #0
 801c722:	f040 80af 	bne.w	801c884 <lfs_fs_deorphan+0x1e8>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801c726:	f89d 204f 	ldrb.w	r2, [sp, #79]	@ 0x4f
 801c72a:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801c72e:	4b5a      	ldr	r3, [pc, #360]	@ (801c898 <lfs_fs_deorphan+0x1fc>)
 801c730:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801c734:	9322      	str	r3, [sp, #136]	@ 0x88
 801c736:	ab14      	add	r3, sp, #80	@ 0x50
 801c738:	9323      	str	r3, [sp, #140]	@ 0x8c
 801c73a:	2301      	movs	r3, #1
 801c73c:	aa22      	add	r2, sp, #136	@ 0x88
 801c73e:	a906      	add	r1, sp, #24
 801c740:	4628      	mov	r0, r5
 801c742:	f7ff fdaf 	bl	801c2a4 <lfs_dir_orphaningcommit>
                    if (state < 0) {
 801c746:	1e04      	subs	r4, r0, #0
 801c748:	f2c0 809c 	blt.w	801c884 <lfs_fs_deorphan+0x1e8>
                    if (state == LFS_OK_ORPHANED) {
 801c74c:	2c03      	cmp	r4, #3
 801c74e:	d17e      	bne.n	801c84e <lfs_fs_deorphan+0x1b2>
                        moreorphans = true;
 801c750:	46b8      	mov	r8, r7
                    continue;
 801c752:	e07c      	b.n	801c84e <lfs_fs_deorphan+0x1b2>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801c754:	f114 0f02 	cmn.w	r4, #2
 801c758:	d0c2      	beq.n	801c6e0 <lfs_fs_deorphan+0x44>
 801c75a:	e093      	b.n	801c884 <lfs_fs_deorphan+0x1e8>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 801c75c:	ab04      	add	r3, sp, #16
 801c75e:	9300      	str	r3, [sp, #0]
 801c760:	4623      	mov	r3, r4
 801c762:	4a4e      	ldr	r2, [pc, #312]	@ (801c89c <lfs_fs_deorphan+0x200>)
 801c764:	a916      	add	r1, sp, #88	@ 0x58
 801c766:	4628      	mov	r0, r5
 801c768:	f7fd fa82 	bl	8019c70 <lfs_dir_get>
                    if (state < 0) {
 801c76c:	2800      	cmp	r0, #0
 801c76e:	db50      	blt.n	801c812 <lfs_fs_deorphan+0x176>
                    if (!lfs_pair_issync(pair, pdir.tail)) {
 801c770:	a90c      	add	r1, sp, #48	@ 0x30
 801c772:	a804      	add	r0, sp, #16
 801c774:	f7fc ff12 	bl	801959c <lfs_pair_issync>
 801c778:	2800      	cmp	r0, #0
 801c77a:	d1b5      	bne.n	801c6e8 <lfs_fs_deorphan+0x4c>
                        LFS_DEBUG("Fixing half-orphan "
 801c77c:	4b43      	ldr	r3, [pc, #268]	@ (801c88c <lfs_fs_deorphan+0x1f0>)
 801c77e:	9303      	str	r3, [sp, #12]
 801c780:	9b05      	ldr	r3, [sp, #20]
 801c782:	9302      	str	r3, [sp, #8]
 801c784:	9b04      	ldr	r3, [sp, #16]
 801c786:	9301      	str	r3, [sp, #4]
 801c788:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c78a:	9300      	str	r3, [sp, #0]
 801c78c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c78e:	f241 3271 	movw	r2, #4977	@ 0x1371
 801c792:	493f      	ldr	r1, [pc, #252]	@ (801c890 <lfs_fs_deorphan+0x1f4>)
 801c794:	4842      	ldr	r0, [pc, #264]	@ (801c8a0 <lfs_fs_deorphan+0x204>)
 801c796:	f00a fc55 	bl	8027044 <printf>
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801c79a:	a906      	add	r1, sp, #24
 801c79c:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801c7a0:	f7fc ff32 	bl	8019608 <lfs_gstate_hasmovehere>
 801c7a4:	b9a0      	cbnz	r0, 801c7d0 <lfs_fs_deorphan+0x134>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801c7a6:	2300      	movs	r3, #0
 801c7a8:	931e      	str	r3, [sp, #120]	@ 0x78
 801c7aa:	2300      	movs	r3, #0
 801c7ac:	931f      	str	r3, [sp, #124]	@ 0x7c
 801c7ae:	4b3d      	ldr	r3, [pc, #244]	@ (801c8a4 <lfs_fs_deorphan+0x208>)
 801c7b0:	9320      	str	r3, [sp, #128]	@ 0x80
 801c7b2:	ab04      	add	r3, sp, #16
 801c7b4:	9321      	str	r3, [sp, #132]	@ 0x84
 801c7b6:	2302      	movs	r3, #2
 801c7b8:	aa1e      	add	r2, sp, #120	@ 0x78
 801c7ba:	a906      	add	r1, sp, #24
 801c7bc:	4628      	mov	r0, r5
 801c7be:	f7ff fd71 	bl	801c2a4 <lfs_dir_orphaningcommit>
                        if (state < 0) {
 801c7c2:	1e04      	subs	r4, r0, #0
 801c7c4:	db5e      	blt.n	801c884 <lfs_fs_deorphan+0x1e8>
                        if (state == LFS_OK_ORPHANED) {
 801c7c6:	2c03      	cmp	r4, #3
 801c7c8:	d141      	bne.n	801c84e <lfs_fs_deorphan+0x1b2>
                            moreorphans = true;
 801c7ca:	f04f 0801 	mov.w	r8, #1
                        continue;
 801c7ce:	e03e      	b.n	801c84e <lfs_fs_deorphan+0x1b2>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 801c7d0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801c7d2:	f3c4 2489 	ubfx	r4, r4, #10, #10
                            LFS_DEBUG("Fixing move while fixing orphans "
 801c7d6:	4b2d      	ldr	r3, [pc, #180]	@ (801c88c <lfs_fs_deorphan+0x1f0>)
 801c7d8:	9302      	str	r3, [sp, #8]
 801c7da:	9401      	str	r4, [sp, #4]
 801c7dc:	9b07      	ldr	r3, [sp, #28]
 801c7de:	9300      	str	r3, [sp, #0]
 801c7e0:	9b06      	ldr	r3, [sp, #24]
 801c7e2:	f241 327c 	movw	r2, #4988	@ 0x137c
 801c7e6:	492a      	ldr	r1, [pc, #168]	@ (801c890 <lfs_fs_deorphan+0x1f4>)
 801c7e8:	482f      	ldr	r0, [pc, #188]	@ (801c8a8 <lfs_fs_deorphan+0x20c>)
 801c7ea:	f00a fc2b 	bl	8027044 <printf>
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801c7ee:	2200      	movs	r2, #0
 801c7f0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801c7f4:	4628      	mov	r0, r5
 801c7f6:	f7fc ffed 	bl	80197d4 <lfs_fs_prepmove>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801c7fa:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801c7fe:	429c      	cmp	r4, r3
 801c800:	d005      	beq.n	801c80e <lfs_fs_deorphan+0x172>
 801c802:	02a3      	lsls	r3, r4, #10
 801c804:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801c808:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801c80c:	e7cc      	b.n	801c7a8 <lfs_fs_deorphan+0x10c>
 801c80e:	2300      	movs	r3, #0
 801c810:	e7ca      	b.n	801c7a8 <lfs_fs_deorphan+0x10c>
                        return state;
 801c812:	4604      	mov	r4, r0
 801c814:	e036      	b.n	801c884 <lfs_fs_deorphan+0x1e8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c816:	2301      	movs	r3, #1
 801c818:	e000      	b.n	801c81c <lfs_fs_deorphan+0x180>
 801c81a:	2301      	movs	r3, #1
        while (!lfs_pair_isnull(pdir.tail)) {
 801c81c:	bb0b      	cbnz	r3, 801c862 <lfs_fs_deorphan+0x1c6>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 801c81e:	aa0c      	add	r2, sp, #48	@ 0x30
 801c820:	a90e      	add	r1, sp, #56	@ 0x38
 801c822:	4628      	mov	r0, r5
 801c824:	f7fe fa12 	bl	801ac4c <lfs_dir_fetch>
            if (err) {
 801c828:	4604      	mov	r4, r0
 801c82a:	bb58      	cbnz	r0, 801c884 <lfs_fs_deorphan+0x1e8>
            if (!pdir.split) {
 801c82c:	f89d 302f 	ldrb.w	r3, [sp, #47]	@ 0x2f
 801c830:	2b00      	cmp	r3, #0
 801c832:	f43f af4e 	beq.w	801c6d2 <lfs_fs_deorphan+0x36>
            pdir = dir;
 801c836:	f10d 0c18 	add.w	ip, sp, #24
 801c83a:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 801c83e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c842:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c846:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801c84a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c84e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c850:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c854:	d0e1      	beq.n	801c81a <lfs_fs_deorphan+0x17e>
 801c856:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c858:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c85c:	d0db      	beq.n	801c816 <lfs_fs_deorphan+0x17a>
 801c85e:	2300      	movs	r3, #0
 801c860:	e7dc      	b.n	801c81c <lfs_fs_deorphan+0x180>
        pass = moreorphans ? 0 : pass+1;
 801c862:	f1b8 0f00 	cmp.w	r8, #0
 801c866:	d101      	bne.n	801c86c <lfs_fs_deorphan+0x1d0>
 801c868:	3601      	adds	r6, #1
 801c86a:	e723      	b.n	801c6b4 <lfs_fs_deorphan+0x18>
 801c86c:	2600      	movs	r6, #0
 801c86e:	e721      	b.n	801c6b4 <lfs_fs_deorphan+0x18>
    return lfs_tag_size(a->tag) & 0x1ff;
 801c870:	f895 1030 	ldrb.w	r1, [r5, #48]	@ 0x30
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 801c874:	4249      	negs	r1, r1
 801c876:	b249      	sxtb	r1, r1
 801c878:	4628      	mov	r0, r5
 801c87a:	f7fc fffb 	bl	8019874 <lfs_fs_preporphans>
 801c87e:	4604      	mov	r4, r0
 801c880:	e000      	b.n	801c884 <lfs_fs_deorphan+0x1e8>
        return 0;
 801c882:	2400      	movs	r4, #0
}
 801c884:	4620      	mov	r0, r4
 801c886:	b024      	add	sp, #144	@ 0x90
 801c888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c88c:	080337f8 	.word	0x080337f8
 801c890:	0803558c 	.word	0x0803558c
 801c894:	08035a60 	.word	0x08035a60
 801c898:	000ffc08 	.word	0x000ffc08
 801c89c:	7ffffc00 	.word	0x7ffffc00
 801c8a0:	080359d4 	.word	0x080359d4
 801c8a4:	600ffc08 	.word	0x600ffc08
 801c8a8:	08035a18 	.word	0x08035a18

0801c8ac <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801c8ac:	b510      	push	{r4, lr}
 801c8ae:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 801c8b0:	f7ff fcf8 	bl	801c2a4 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
 801c8b4:	2800      	cmp	r0, #0
 801c8b6:	db00      	blt.n	801c8ba <lfs_dir_commit+0xe>
    if (orphans) {
 801c8b8:	b900      	cbnz	r0, 801c8bc <lfs_dir_commit+0x10>
}
 801c8ba:	bd10      	pop	{r4, pc}
        int err = lfs_fs_deorphan(lfs, false);
 801c8bc:	2100      	movs	r1, #0
 801c8be:	4620      	mov	r0, r4
 801c8c0:	f7ff feec 	bl	801c69c <lfs_fs_deorphan>
        if (err) {
 801c8c4:	e7f9      	b.n	801c8ba <lfs_dir_commit+0xe>
	...

0801c8c8 <lfs_fs_desuperblock>:
static int lfs_fs_desuperblock(lfs_t *lfs) {
 801c8c8:	b530      	push	{r4, r5, lr}
 801c8ca:	b093      	sub	sp, #76	@ 0x4c
    return lfs_tag_size(a->tag) >> 9;
 801c8cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 801c8ce:	f413 7f00 	tst.w	r3, #512	@ 0x200
 801c8d2:	d103      	bne.n	801c8dc <lfs_fs_desuperblock+0x14>
        return 0;
 801c8d4:	2500      	movs	r5, #0
}
 801c8d6:	4628      	mov	r0, r5
 801c8d8:	b013      	add	sp, #76	@ 0x4c
 801c8da:	bd30      	pop	{r4, r5, pc}
 801c8dc:	4604      	mov	r4, r0
    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 801c8de:	4b1a      	ldr	r3, [pc, #104]	@ (801c948 <lfs_fs_desuperblock+0x80>)
 801c8e0:	9301      	str	r3, [sp, #4]
 801c8e2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801c8e4:	9300      	str	r3, [sp, #0]
 801c8e6:	6a03      	ldr	r3, [r0, #32]
 801c8e8:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 801c8ec:	4917      	ldr	r1, [pc, #92]	@ (801c94c <lfs_fs_desuperblock+0x84>)
 801c8ee:	4818      	ldr	r0, [pc, #96]	@ (801c950 <lfs_fs_desuperblock+0x88>)
 801c8f0:	f00a fba8 	bl	8027044 <printf>
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 801c8f4:	f104 0220 	add.w	r2, r4, #32
 801c8f8:	a908      	add	r1, sp, #32
 801c8fa:	4620      	mov	r0, r4
 801c8fc:	f7fe f9a6 	bl	801ac4c <lfs_dir_fetch>
    if (err) {
 801c900:	4605      	mov	r5, r0
 801c902:	2800      	cmp	r0, #0
 801c904:	d1e7      	bne.n	801c8d6 <lfs_fs_desuperblock+0xe>
        .version     = lfs_fs_disk_version(lfs),
 801c906:	4620      	mov	r0, r4
 801c908:	f7fc feb6 	bl	8019678 <lfs_fs_disk_version>
    lfs_superblock_t superblock = {
 801c90c:	9002      	str	r0, [sp, #8]
        .block_size  = lfs->cfg->block_size,
 801c90e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801c910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 801c912:	9303      	str	r3, [sp, #12]
        .block_count = lfs->block_count,
 801c914:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 801c916:	9304      	str	r3, [sp, #16]
        .name_max    = lfs->name_max,
 801c918:	6f23      	ldr	r3, [r4, #112]	@ 0x70
    lfs_superblock_t superblock = {
 801c91a:	9305      	str	r3, [sp, #20]
        .file_max    = lfs->file_max,
 801c91c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
    lfs_superblock_t superblock = {
 801c91e:	9306      	str	r3, [sp, #24]
        .attr_max    = lfs->attr_max,
 801c920:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    lfs_superblock_t superblock = {
 801c922:	9307      	str	r3, [sp, #28]
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801c924:	4b0b      	ldr	r3, [pc, #44]	@ (801c954 <lfs_fs_desuperblock+0x8c>)
 801c926:	9310      	str	r3, [sp, #64]	@ 0x40
 801c928:	ab02      	add	r3, sp, #8
 801c92a:	9311      	str	r3, [sp, #68]	@ 0x44
 801c92c:	2301      	movs	r3, #1
 801c92e:	aa10      	add	r2, sp, #64	@ 0x40
 801c930:	a908      	add	r1, sp, #32
 801c932:	4620      	mov	r0, r4
 801c934:	f7ff ffba 	bl	801c8ac <lfs_dir_commit>
    if (err) {
 801c938:	4605      	mov	r5, r0
 801c93a:	2800      	cmp	r0, #0
 801c93c:	d1cb      	bne.n	801c8d6 <lfs_fs_desuperblock+0xe>
    lfs_fs_prepsuperblock(lfs, false);
 801c93e:	2100      	movs	r1, #0
 801c940:	4620      	mov	r0, r4
 801c942:	f7fc ff40 	bl	80197c6 <lfs_fs_prepsuperblock>
    return 0;
 801c946:	e7c6      	b.n	801c8d6 <lfs_fs_desuperblock+0xe>
 801c948:	080337f8 	.word	0x080337f8
 801c94c:	0803558c 	.word	0x0803558c
 801c950:	08035a90 	.word	0x08035a90
 801c954:	20100018 	.word	0x20100018

0801c958 <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
 801c958:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
    return (tag & 0x70000000) >> 20;
 801c95a:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 801c95c:	f412 6fe0 	tst.w	r2, #1792	@ 0x700
 801c960:	d101      	bne.n	801c966 <lfs_fs_demove+0xe>
        return 0;
 801c962:	2000      	movs	r0, #0
}
 801c964:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
 801c966:	b530      	push	{r4, r5, lr}
 801c968:	b08f      	sub	sp, #60	@ 0x3c
 801c96a:	4604      	mov	r4, r0
    return (tag & 0x000ffc00) >> 10;
 801c96c:	f3c3 2389 	ubfx	r3, r3, #10, #10
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 801c970:	4a1d      	ldr	r2, [pc, #116]	@ (801c9e8 <lfs_fs_demove+0x90>)
 801c972:	9202      	str	r2, [sp, #8]
 801c974:	9301      	str	r3, [sp, #4]
 801c976:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801c978:	9300      	str	r3, [sp, #0]
 801c97a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801c97c:	f241 3224 	movw	r2, #4900	@ 0x1324
 801c980:	491a      	ldr	r1, [pc, #104]	@ (801c9ec <lfs_fs_demove+0x94>)
 801c982:	481b      	ldr	r0, [pc, #108]	@ (801c9f0 <lfs_fs_demove+0x98>)
 801c984:	f00a fb5e 	bl	8027044 <printf>
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801c988:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    return (tag & 0x7ff00000) >> 20;
 801c98a:	f3c3 530a 	ubfx	r3, r3, #20, #11
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801c98e:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 801c992:	4293      	cmp	r3, r2
 801c994:	d108      	bne.n	801c9a8 <lfs_fs_demove+0x50>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 801c996:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801c99a:	a904      	add	r1, sp, #16
 801c99c:	4620      	mov	r0, r4
 801c99e:	f7fe f955 	bl	801ac4c <lfs_dir_fetch>
    if (err) {
 801c9a2:	b140      	cbz	r0, 801c9b6 <lfs_fs_demove+0x5e>
}
 801c9a4:	b00f      	add	sp, #60	@ 0x3c
 801c9a6:	bd30      	pop	{r4, r5, pc}
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801c9a8:	4b12      	ldr	r3, [pc, #72]	@ (801c9f4 <lfs_fs_demove+0x9c>)
 801c9aa:	4a13      	ldr	r2, [pc, #76]	@ (801c9f8 <lfs_fs_demove+0xa0>)
 801c9ac:	f241 312b 	movw	r1, #4907	@ 0x132b
 801c9b0:	480e      	ldr	r0, [pc, #56]	@ (801c9ec <lfs_fs_demove+0x94>)
 801c9b2:	f00a fb13 	bl	8026fdc <__assert_func>
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 801c9b6:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801c9b8:	f3c5 2589 	ubfx	r5, r5, #10, #10
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801c9bc:	2200      	movs	r2, #0
 801c9be:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801c9c2:	4620      	mov	r0, r4
 801c9c4:	f7fc ff06 	bl	80197d4 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 801c9c8:	02ab      	lsls	r3, r5, #10
 801c9ca:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801c9ce:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801c9d2:	930c      	str	r3, [sp, #48]	@ 0x30
 801c9d4:	2300      	movs	r3, #0
 801c9d6:	930d      	str	r3, [sp, #52]	@ 0x34
 801c9d8:	2301      	movs	r3, #1
 801c9da:	aa0c      	add	r2, sp, #48	@ 0x30
 801c9dc:	a904      	add	r1, sp, #16
 801c9de:	4620      	mov	r0, r4
 801c9e0:	f7ff ff64 	bl	801c8ac <lfs_dir_commit>
    if (err) {
 801c9e4:	e7de      	b.n	801c9a4 <lfs_fs_demove+0x4c>
 801c9e6:	bf00      	nop
 801c9e8:	080337f8 	.word	0x080337f8
 801c9ec:	0803558c 	.word	0x0803558c
 801c9f0:	08035ac4 	.word	0x08035ac4
 801c9f4:	08035af8 	.word	0x08035af8
 801c9f8:	0803624c 	.word	0x0803624c

0801c9fc <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 801c9fc:	b510      	push	{r4, lr}
 801c9fe:	4604      	mov	r4, r0
    int err = lfs_fs_desuperblock(lfs);
 801ca00:	f7ff ff62 	bl	801c8c8 <lfs_fs_desuperblock>
    if (err) {
 801ca04:	4603      	mov	r3, r0
 801ca06:	b108      	cbz	r0, 801ca0c <lfs_fs_forceconsistency+0x10>
}
 801ca08:	4618      	mov	r0, r3
 801ca0a:	bd10      	pop	{r4, pc}
    err = lfs_fs_demove(lfs);
 801ca0c:	4620      	mov	r0, r4
 801ca0e:	f7ff ffa3 	bl	801c958 <lfs_fs_demove>
    if (err) {
 801ca12:	4603      	mov	r3, r0
 801ca14:	2800      	cmp	r0, #0
 801ca16:	d1f7      	bne.n	801ca08 <lfs_fs_forceconsistency+0xc>
    err = lfs_fs_deorphan(lfs, true);
 801ca18:	2101      	movs	r1, #1
 801ca1a:	4620      	mov	r0, r4
 801ca1c:	f7ff fe3e 	bl	801c69c <lfs_fs_deorphan>
 801ca20:	4603      	mov	r3, r0
    if (err) {
 801ca22:	e7f1      	b.n	801ca08 <lfs_fs_forceconsistency+0xc>

0801ca24 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 801ca24:	b570      	push	{r4, r5, r6, lr}
 801ca26:	b082      	sub	sp, #8
 801ca28:	4605      	mov	r5, r0
 801ca2a:	460e      	mov	r6, r1
 801ca2c:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 801ca2e:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 801ca32:	4621      	mov	r1, r4
 801ca34:	f7fd f92a 	bl	8019c8c <lfs_dir_getgstate>
    if (err) {
 801ca38:	b108      	cbz	r0, 801ca3e <lfs_dir_drop+0x1a>
}
 801ca3a:	b002      	add	sp, #8
 801ca3c:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
 801ca3e:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 801ca42:	7de2      	ldrb	r2, [r4, #23]
 801ca44:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801ca48:	4b05      	ldr	r3, [pc, #20]	@ (801ca60 <lfs_dir_drop+0x3c>)
 801ca4a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801ca4e:	9300      	str	r3, [sp, #0]
 801ca50:	9101      	str	r1, [sp, #4]
 801ca52:	2301      	movs	r3, #1
 801ca54:	466a      	mov	r2, sp
 801ca56:	4631      	mov	r1, r6
 801ca58:	4628      	mov	r0, r5
 801ca5a:	f7ff ff27 	bl	801c8ac <lfs_dir_commit>
    if (err) {
 801ca5e:	e7ec      	b.n	801ca3a <lfs_dir_drop+0x16>
 801ca60:	000ffc08 	.word	0x000ffc08

0801ca64 <lfs_file_sync_>:
    if (file->flags & LFS_F_ERRED) {
 801ca64:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801ca66:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 801ca6a:	d001      	beq.n	801ca70 <lfs_file_sync_+0xc>
        return 0;
 801ca6c:	2000      	movs	r0, #0
}
 801ca6e:	4770      	bx	lr
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 801ca70:	b530      	push	{r4, r5, lr}
 801ca72:	b087      	sub	sp, #28
 801ca74:	4605      	mov	r5, r0
 801ca76:	460c      	mov	r4, r1
    int err = lfs_file_flush(lfs, file);
 801ca78:	f7fe fcae 	bl	801b3d8 <lfs_file_flush>
    if (err) {
 801ca7c:	2800      	cmp	r0, #0
 801ca7e:	d136      	bne.n	801caee <lfs_file_sync_+0x8a>
    if ((file->flags & LFS_F_DIRTY) &&
 801ca80:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ca82:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 801ca86:	d036      	beq.n	801caf6 <lfs_file_sync_+0x92>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801ca88:	68a2      	ldr	r2, [r4, #8]
 801ca8a:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801ca8e:	d036      	beq.n	801cafe <lfs_file_sync_+0x9a>
 801ca90:	68e2      	ldr	r2, [r4, #12]
 801ca92:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801ca96:	d030      	beq.n	801cafa <lfs_file_sync_+0x96>
 801ca98:	4602      	mov	r2, r0
    if ((file->flags & LFS_F_DIRTY) &&
 801ca9a:	f012 0f01 	tst.w	r2, #1
 801ca9e:	d12a      	bne.n	801caf6 <lfs_file_sync_+0x92>
        if (!(file->flags & LFS_F_INLINE)) {
 801caa0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801caa4:	d02d      	beq.n	801cb02 <lfs_file_sync_+0x9e>
        if (file->flags & LFS_F_INLINE) {
 801caa6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801caa8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801caac:	d033      	beq.n	801cb16 <lfs_file_sync_+0xb2>
            buffer = file->cache.buffer;
 801caae:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
            size = file->ctz.size;
 801cab0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
            type = LFS_TYPE_INLINESTRUCT;
 801cab2:	f240 2201 	movw	r2, #513	@ 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801cab6:	88a3      	ldrh	r3, [r4, #4]
 801cab8:	029b      	lsls	r3, r3, #10
 801caba:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
 801cabe:	4302      	orrs	r2, r0
 801cac0:	9202      	str	r2, [sp, #8]
 801cac2:	9103      	str	r1, [sp, #12]
 801cac4:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801cac6:	6891      	ldr	r1, [r2, #8]
 801cac8:	430b      	orrs	r3, r1
 801caca:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 801cace:	9304      	str	r3, [sp, #16]
 801cad0:	6853      	ldr	r3, [r2, #4]
 801cad2:	9305      	str	r3, [sp, #20]
 801cad4:	2302      	movs	r3, #2
 801cad6:	aa02      	add	r2, sp, #8
 801cad8:	f104 0108 	add.w	r1, r4, #8
 801cadc:	4628      	mov	r0, r5
 801cade:	f7ff fee5 	bl	801c8ac <lfs_dir_commit>
        if (err) {
 801cae2:	bb20      	cbnz	r0, 801cb2e <lfs_file_sync_+0xca>
        file->flags &= ~LFS_F_DIRTY;
 801cae4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801caea:	6323      	str	r3, [r4, #48]	@ 0x30
 801caec:	e003      	b.n	801caf6 <lfs_file_sync_+0x92>
        file->flags |= LFS_F_ERRED;
 801caee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801caf0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801caf4:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801caf6:	b007      	add	sp, #28
 801caf8:	bd30      	pop	{r4, r5, pc}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801cafa:	2201      	movs	r2, #1
 801cafc:	e7cd      	b.n	801ca9a <lfs_file_sync_+0x36>
 801cafe:	2201      	movs	r2, #1
 801cb00:	e7cb      	b.n	801ca9a <lfs_file_sync_+0x36>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801cb02:	2300      	movs	r3, #0
 801cb04:	462a      	mov	r2, r5
 801cb06:	f105 0110 	add.w	r1, r5, #16
 801cb0a:	4628      	mov	r0, r5
 801cb0c:	f7fd fc82 	bl	801a414 <lfs_bd_sync>
            if (err) {
 801cb10:	2800      	cmp	r0, #0
 801cb12:	d0c8      	beq.n	801caa6 <lfs_file_sync_+0x42>
 801cb14:	e7ef      	b.n	801caf6 <lfs_file_sync_+0x92>
            ctz = file->ctz;
 801cb16:	466b      	mov	r3, sp
 801cb18:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 801cb1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cb20:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
 801cb24:	2008      	movs	r0, #8
            buffer = &ctz;
 801cb26:	4619      	mov	r1, r3
            type = LFS_TYPE_CTZSTRUCT;
 801cb28:	f240 2202 	movw	r2, #514	@ 0x202
 801cb2c:	e7c3      	b.n	801cab6 <lfs_file_sync_+0x52>
            file->flags |= LFS_F_ERRED;
 801cb2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cb30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801cb34:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801cb36:	e7de      	b.n	801caf6 <lfs_file_sync_+0x92>

0801cb38 <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
 801cb38:	b510      	push	{r4, lr}
 801cb3a:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 801cb3c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801cb3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cb40:	b13b      	cbz	r3, 801cb52 <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
 801cb42:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801cb44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801cb46:	b143      	cbz	r3, 801cb5a <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
 801cb48:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801cb4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cb4c:	b14b      	cbz	r3, 801cb62 <lfs_deinit+0x2a>
}
 801cb4e:	2000      	movs	r0, #0
 801cb50:	bd10      	pop	{r4, pc}
// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 801cb52:	68c0      	ldr	r0, [r0, #12]
 801cb54:	f7fc fb12 	bl	801917c <vPortFree>
#else
    (void)p;
#endif
}
 801cb58:	e7f3      	b.n	801cb42 <lfs_deinit+0xa>
    free(p);
 801cb5a:	69e0      	ldr	r0, [r4, #28]
 801cb5c:	f7fc fb0e 	bl	801917c <vPortFree>
}
 801cb60:	e7f2      	b.n	801cb48 <lfs_deinit+0x10>
    free(p);
 801cb62:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801cb64:	f7fc fb0a 	bl	801917c <vPortFree>
}
 801cb68:	e7f1      	b.n	801cb4e <lfs_deinit+0x16>
	...

0801cb6c <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 801cb6c:	b538      	push	{r3, r4, r5, lr}
    lfs->cfg = cfg;
 801cb6e:	6681      	str	r1, [r0, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 801cb70:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801cb72:	66c3      	str	r3, [r0, #108]	@ 0x6c
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801cb74:	69cb      	ldr	r3, [r1, #28]
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	f000 80b1 	beq.w	801ccde <lfs_init+0x172>
 801cb7c:	4604      	mov	r4, r0
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801cb7e:	6a0a      	ldr	r2, [r1, #32]
 801cb80:	2a00      	cmp	r2, #0
 801cb82:	f000 80b3 	beq.w	801ccec <lfs_init+0x180>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801cb86:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 801cb88:	2800      	cmp	r0, #0
 801cb8a:	f000 80b6 	beq.w	801ccfa <lfs_init+0x18e>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801cb8e:	fbb0 fcf3 	udiv	ip, r0, r3
 801cb92:	fb03 031c 	mls	r3, r3, ip, r0
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	f040 80b6 	bne.w	801cd08 <lfs_init+0x19c>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801cb9c:	fbb0 f3f2 	udiv	r3, r0, r2
 801cba0:	fb02 0313 	mls	r3, r2, r3, r0
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	f040 80b6 	bne.w	801cd16 <lfs_init+0x1aa>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801cbaa:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801cbac:	fbb2 f3f0 	udiv	r3, r2, r0
 801cbb0:	fb00 2313 	mls	r3, r0, r3, r2
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	f040 80b5 	bne.w	801cd24 <lfs_init+0x1b8>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801cbba:	2a7f      	cmp	r2, #127	@ 0x7f
 801cbbc:	f240 80b9 	bls.w	801cd32 <lfs_init+0x1c6>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801cbc0:	f1a2 0c08 	sub.w	ip, r2, #8
 801cbc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cbc8:	fbb3 f3fc 	udiv	r3, r3, ip
    return 32 - __builtin_clz(a-1);
 801cbcc:	3b01      	subs	r3, #1
 801cbce:	fab3 f383 	clz	r3, r3
 801cbd2:	f1c3 0320 	rsb	r3, r3, #32
 801cbd6:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 801cbda:	f0c0 80b1 	bcc.w	801cd40 <lfs_init+0x1d4>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801cbde:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801cbe0:	2b00      	cmp	r3, #0
 801cbe2:	f000 80b4 	beq.w	801cd4e <lfs_init+0x1e2>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801cbe6:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 801cbe8:	b11b      	cbz	r3, 801cbf2 <lfs_init+0x86>
 801cbea:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 801cbee:	f0c0 80b5 	bcc.w	801cd5c <lfs_init+0x1f0>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801cbf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cbf6:	d002      	beq.n	801cbfe <lfs_init+0x92>
 801cbf8:	429a      	cmp	r2, r3
 801cbfa:	f0c0 80b6 	bcc.w	801cd6a <lfs_init+0x1fe>
    if (lfs->cfg->read_buffer) {
 801cbfe:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	f000 80b9 	beq.w	801cd78 <lfs_init+0x20c>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 801cc06:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 801cc08:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801cc0a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801cc0c:	2b00      	cmp	r3, #0
 801cc0e:	f000 80bf 	beq.w	801cd90 <lfs_init+0x224>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 801cc12:	61e3      	str	r3, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
 801cc14:	4621      	mov	r1, r4
 801cc16:	4620      	mov	r0, r4
 801cc18:	f7fc fe5c 	bl	80198d4 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 801cc1c:	f104 0110 	add.w	r1, r4, #16
 801cc20:	4620      	mov	r0, r4
 801cc22:	f7fc fe57 	bl	80198d4 <lfs_cache_zero>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801cc26:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801cc28:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801cc2a:	2800      	cmp	r0, #0
 801cc2c:	f000 80b8 	beq.w	801cda0 <lfs_init+0x234>
    if (lfs->cfg->lookahead_buffer) {
 801cc30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	f000 80bb 	beq.w	801cdae <lfs_init+0x242>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 801cc38:	6663      	str	r3, [r4, #100]	@ 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801cc3a:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801cc3c:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 801cc3e:	2bff      	cmp	r3, #255	@ 0xff
 801cc40:	f200 80bc 	bhi.w	801cdbc <lfs_init+0x250>
    lfs->name_max = lfs->cfg->name_max;
 801cc44:	6723      	str	r3, [r4, #112]	@ 0x70
    if (!lfs->name_max) {
 801cc46:	b90b      	cbnz	r3, 801cc4c <lfs_init+0xe0>
        lfs->name_max = LFS_NAME_MAX;
 801cc48:	23ff      	movs	r3, #255	@ 0xff
 801cc4a:	6723      	str	r3, [r4, #112]	@ 0x70
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801cc4c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	f2c0 80bb 	blt.w	801cdca <lfs_init+0x25e>
    lfs->file_max = lfs->cfg->file_max;
 801cc54:	6763      	str	r3, [r4, #116]	@ 0x74
    if (!lfs->file_max) {
 801cc56:	b913      	cbnz	r3, 801cc5e <lfs_init+0xf2>
        lfs->file_max = LFS_FILE_MAX;
 801cc58:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801cc5c:	6763      	str	r3, [r4, #116]	@ 0x74
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801cc5e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801cc60:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 801cc64:	428b      	cmp	r3, r1
 801cc66:	f200 80b7 	bhi.w	801cdd8 <lfs_init+0x26c>
    lfs->attr_max = lfs->cfg->attr_max;
 801cc6a:	67a3      	str	r3, [r4, #120]	@ 0x78
    if (!lfs->attr_max) {
 801cc6c:	b913      	cbnz	r3, 801cc74 <lfs_init+0x108>
        lfs->attr_max = LFS_ATTR_MAX;
 801cc6e:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801cc72:	67a3      	str	r3, [r4, #120]	@ 0x78
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801cc74:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 801cc76:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 801cc78:	4288      	cmp	r0, r1
 801cc7a:	f200 80b4 	bhi.w	801cde6 <lfs_init+0x27a>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801cc7e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 801cc80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cc84:	d003      	beq.n	801cc8e <lfs_init+0x122>
 801cc86:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 801cc88:	42ab      	cmp	r3, r5
 801cc8a:	f200 80b3 	bhi.w	801cdf4 <lfs_init+0x288>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801cc8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cc92:	d003      	beq.n	801cc9c <lfs_init+0x130>
 801cc94:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 801cc96:	42ab      	cmp	r3, r5
 801cc98:	f200 80b3 	bhi.w	801ce02 <lfs_init+0x296>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801cc9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cca0:	d006      	beq.n	801ccb0 <lfs_init+0x144>
 801cca2:	2800      	cmp	r0, #0
 801cca4:	f000 80b4 	beq.w	801ce10 <lfs_init+0x2a4>
 801cca8:	08c1      	lsrs	r1, r0, #3
 801ccaa:	428b      	cmp	r3, r1
 801ccac:	f200 80b2 	bhi.w	801ce14 <lfs_init+0x2a8>
    lfs->inline_max = lfs->cfg->inline_max;
 801ccb0:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 801ccb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ccb6:	f000 80b4 	beq.w	801ce22 <lfs_init+0x2b6>
    } else if (lfs->inline_max == 0) {
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	f040 80b3 	bne.w	801ce26 <lfs_init+0x2ba>
                lfs->cfg->cache_size,
 801ccc0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 801ccc2:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
                    ((lfs->cfg->metadata_max)
 801ccc4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	f000 80be 	beq.w	801ce48 <lfs_init+0x2dc>
 801cccc:	08db      	lsrs	r3, r3, #3
    return (a < b) ? a : b;
 801ccce:	4283      	cmp	r3, r0
 801ccd0:	bf28      	it	cs
 801ccd2:	4603      	movcs	r3, r0
 801ccd4:	428b      	cmp	r3, r1
 801ccd6:	bf28      	it	cs
 801ccd8:	460b      	movcs	r3, r1
 801ccda:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801ccdc:	e0a3      	b.n	801ce26 <lfs_init+0x2ba>
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801ccde:	4b5c      	ldr	r3, [pc, #368]	@ (801ce50 <lfs_init+0x2e4>)
 801cce0:	4a5c      	ldr	r2, [pc, #368]	@ (801ce54 <lfs_init+0x2e8>)
 801cce2:	f241 0152 	movw	r1, #4178	@ 0x1052
 801cce6:	485c      	ldr	r0, [pc, #368]	@ (801ce58 <lfs_init+0x2ec>)
 801cce8:	f00a f978 	bl	8026fdc <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801ccec:	4b5b      	ldr	r3, [pc, #364]	@ (801ce5c <lfs_init+0x2f0>)
 801ccee:	4a59      	ldr	r2, [pc, #356]	@ (801ce54 <lfs_init+0x2e8>)
 801ccf0:	f241 0153 	movw	r1, #4179	@ 0x1053
 801ccf4:	4858      	ldr	r0, [pc, #352]	@ (801ce58 <lfs_init+0x2ec>)
 801ccf6:	f00a f971 	bl	8026fdc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801ccfa:	4b59      	ldr	r3, [pc, #356]	@ (801ce60 <lfs_init+0x2f4>)
 801ccfc:	4a55      	ldr	r2, [pc, #340]	@ (801ce54 <lfs_init+0x2e8>)
 801ccfe:	f241 0154 	movw	r1, #4180	@ 0x1054
 801cd02:	4855      	ldr	r0, [pc, #340]	@ (801ce58 <lfs_init+0x2ec>)
 801cd04:	f00a f96a 	bl	8026fdc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801cd08:	4b56      	ldr	r3, [pc, #344]	@ (801ce64 <lfs_init+0x2f8>)
 801cd0a:	4a52      	ldr	r2, [pc, #328]	@ (801ce54 <lfs_init+0x2e8>)
 801cd0c:	f241 0158 	movw	r1, #4184	@ 0x1058
 801cd10:	4851      	ldr	r0, [pc, #324]	@ (801ce58 <lfs_init+0x2ec>)
 801cd12:	f00a f963 	bl	8026fdc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801cd16:	4b54      	ldr	r3, [pc, #336]	@ (801ce68 <lfs_init+0x2fc>)
 801cd18:	4a4e      	ldr	r2, [pc, #312]	@ (801ce54 <lfs_init+0x2e8>)
 801cd1a:	f241 0159 	movw	r1, #4185	@ 0x1059
 801cd1e:	484e      	ldr	r0, [pc, #312]	@ (801ce58 <lfs_init+0x2ec>)
 801cd20:	f00a f95c 	bl	8026fdc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801cd24:	4b51      	ldr	r3, [pc, #324]	@ (801ce6c <lfs_init+0x300>)
 801cd26:	4a4b      	ldr	r2, [pc, #300]	@ (801ce54 <lfs_init+0x2e8>)
 801cd28:	f241 015a 	movw	r1, #4186	@ 0x105a
 801cd2c:	484a      	ldr	r0, [pc, #296]	@ (801ce58 <lfs_init+0x2ec>)
 801cd2e:	f00a f955 	bl	8026fdc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801cd32:	4b4f      	ldr	r3, [pc, #316]	@ (801ce70 <lfs_init+0x304>)
 801cd34:	4a47      	ldr	r2, [pc, #284]	@ (801ce54 <lfs_init+0x2e8>)
 801cd36:	f241 015d 	movw	r1, #4189	@ 0x105d
 801cd3a:	4847      	ldr	r0, [pc, #284]	@ (801ce58 <lfs_init+0x2ec>)
 801cd3c:	f00a f94e 	bl	8026fdc <__assert_func>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801cd40:	4b4c      	ldr	r3, [pc, #304]	@ (801ce74 <lfs_init+0x308>)
 801cd42:	4a44      	ldr	r2, [pc, #272]	@ (801ce54 <lfs_init+0x2e8>)
 801cd44:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 801cd48:	4843      	ldr	r0, [pc, #268]	@ (801ce58 <lfs_init+0x2ec>)
 801cd4a:	f00a f947 	bl	8026fdc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801cd4e:	4b4a      	ldr	r3, [pc, #296]	@ (801ce78 <lfs_init+0x30c>)
 801cd50:	4a40      	ldr	r2, [pc, #256]	@ (801ce54 <lfs_init+0x2e8>)
 801cd52:	f241 0169 	movw	r1, #4201	@ 0x1069
 801cd56:	4840      	ldr	r0, [pc, #256]	@ (801ce58 <lfs_init+0x2ec>)
 801cd58:	f00a f940 	bl	8026fdc <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801cd5c:	4b47      	ldr	r3, [pc, #284]	@ (801ce7c <lfs_init+0x310>)
 801cd5e:	4a3d      	ldr	r2, [pc, #244]	@ (801ce54 <lfs_init+0x2e8>)
 801cd60:	f241 016f 	movw	r1, #4207	@ 0x106f
 801cd64:	483c      	ldr	r0, [pc, #240]	@ (801ce58 <lfs_init+0x2ec>)
 801cd66:	f00a f939 	bl	8026fdc <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801cd6a:	4b45      	ldr	r3, [pc, #276]	@ (801ce80 <lfs_init+0x314>)
 801cd6c:	4a39      	ldr	r2, [pc, #228]	@ (801ce54 <lfs_init+0x2e8>)
 801cd6e:	f241 0171 	movw	r1, #4209	@ 0x1071
 801cd72:	4839      	ldr	r0, [pc, #228]	@ (801ce58 <lfs_init+0x2ec>)
 801cd74:	f00a f932 	bl	8026fdc <__assert_func>
    return malloc(size);
 801cd78:	f7fc f97e 	bl	8019078 <pvPortMalloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801cd7c:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 801cd7e:	2800      	cmp	r0, #0
 801cd80:	f47f af42 	bne.w	801cc08 <lfs_init+0x9c>
    lfs_deinit(lfs);
 801cd84:	4620      	mov	r0, r4
 801cd86:	f7ff fed7 	bl	801cb38 <lfs_deinit>
    return err;
 801cd8a:	f06f 000b 	mvn.w	r0, #11
 801cd8e:	e05a      	b.n	801ce46 <lfs_init+0x2da>
 801cd90:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 801cd92:	f7fc f971 	bl	8019078 <pvPortMalloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801cd96:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 801cd98:	2800      	cmp	r0, #0
 801cd9a:	f47f af3b 	bne.w	801cc14 <lfs_init+0xa8>
 801cd9e:	e7f1      	b.n	801cd84 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801cda0:	4b38      	ldr	r3, [pc, #224]	@ (801ce84 <lfs_init+0x318>)
 801cda2:	4a2c      	ldr	r2, [pc, #176]	@ (801ce54 <lfs_init+0x2e8>)
 801cda4:	f241 0190 	movw	r1, #4240	@ 0x1090
 801cda8:	482b      	ldr	r0, [pc, #172]	@ (801ce58 <lfs_init+0x2ec>)
 801cdaa:	f00a f917 	bl	8026fdc <__assert_func>
 801cdae:	f7fc f963 	bl	8019078 <pvPortMalloc>
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 801cdb2:	6660      	str	r0, [r4, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 801cdb4:	2800      	cmp	r0, #0
 801cdb6:	f47f af40 	bne.w	801cc3a <lfs_init+0xce>
 801cdba:	e7e3      	b.n	801cd84 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801cdbc:	4b32      	ldr	r3, [pc, #200]	@ (801ce88 <lfs_init+0x31c>)
 801cdbe:	4a25      	ldr	r2, [pc, #148]	@ (801ce54 <lfs_init+0x2e8>)
 801cdc0:	f241 019c 	movw	r1, #4252	@ 0x109c
 801cdc4:	4824      	ldr	r0, [pc, #144]	@ (801ce58 <lfs_init+0x2ec>)
 801cdc6:	f00a f909 	bl	8026fdc <__assert_func>
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801cdca:	4b30      	ldr	r3, [pc, #192]	@ (801ce8c <lfs_init+0x320>)
 801cdcc:	4a21      	ldr	r2, [pc, #132]	@ (801ce54 <lfs_init+0x2e8>)
 801cdce:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 801cdd2:	4821      	ldr	r0, [pc, #132]	@ (801ce58 <lfs_init+0x2ec>)
 801cdd4:	f00a f902 	bl	8026fdc <__assert_func>
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801cdd8:	4b2d      	ldr	r3, [pc, #180]	@ (801ce90 <lfs_init+0x324>)
 801cdda:	4a1e      	ldr	r2, [pc, #120]	@ (801ce54 <lfs_init+0x2e8>)
 801cddc:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 801cde0:	481d      	ldr	r0, [pc, #116]	@ (801ce58 <lfs_init+0x2ec>)
 801cde2:	f00a f8fb 	bl	8026fdc <__assert_func>
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801cde6:	4b2b      	ldr	r3, [pc, #172]	@ (801ce94 <lfs_init+0x328>)
 801cde8:	4a1a      	ldr	r2, [pc, #104]	@ (801ce54 <lfs_init+0x2e8>)
 801cdea:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 801cdee:	481a      	ldr	r0, [pc, #104]	@ (801ce58 <lfs_init+0x2ec>)
 801cdf0:	f00a f8f4 	bl	8026fdc <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801cdf4:	4b28      	ldr	r3, [pc, #160]	@ (801ce98 <lfs_init+0x32c>)
 801cdf6:	4a17      	ldr	r2, [pc, #92]	@ (801ce54 <lfs_init+0x2e8>)
 801cdf8:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 801cdfc:	4816      	ldr	r0, [pc, #88]	@ (801ce58 <lfs_init+0x2ec>)
 801cdfe:	f00a f8ed 	bl	8026fdc <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801ce02:	4b26      	ldr	r3, [pc, #152]	@ (801ce9c <lfs_init+0x330>)
 801ce04:	4a13      	ldr	r2, [pc, #76]	@ (801ce54 <lfs_init+0x2e8>)
 801ce06:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 801ce0a:	4813      	ldr	r0, [pc, #76]	@ (801ce58 <lfs_init+0x2ec>)
 801ce0c:	f00a f8e6 	bl	8026fdc <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801ce10:	08c9      	lsrs	r1, r1, #3
 801ce12:	e74a      	b.n	801ccaa <lfs_init+0x13e>
 801ce14:	4b22      	ldr	r3, [pc, #136]	@ (801cea0 <lfs_init+0x334>)
 801ce16:	4a0f      	ldr	r2, [pc, #60]	@ (801ce54 <lfs_init+0x2e8>)
 801ce18:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 801ce1c:	480e      	ldr	r0, [pc, #56]	@ (801ce58 <lfs_init+0x2ec>)
 801ce1e:	f00a f8dd 	bl	8026fdc <__assert_func>
        lfs->inline_max = 0;
 801ce22:	2300      	movs	r3, #0
 801ce24:	67e3      	str	r3, [r4, #124]	@ 0x7c
    lfs->root[0] = LFS_BLOCK_NULL;
 801ce26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ce2a:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801ce2c:	6263      	str	r3, [r4, #36]	@ 0x24
    lfs->mlist = NULL;
 801ce2e:	2000      	movs	r0, #0
 801ce30:	62a0      	str	r0, [r4, #40]	@ 0x28
    lfs->seed = 0;
 801ce32:	62e0      	str	r0, [r4, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 801ce34:	63e0      	str	r0, [r4, #60]	@ 0x3c
 801ce36:	6420      	str	r0, [r4, #64]	@ 0x40
 801ce38:	6460      	str	r0, [r4, #68]	@ 0x44
    lfs->gstate = (lfs_gstate_t){0};
 801ce3a:	6320      	str	r0, [r4, #48]	@ 0x30
 801ce3c:	6360      	str	r0, [r4, #52]	@ 0x34
 801ce3e:	63a0      	str	r0, [r4, #56]	@ 0x38
    lfs->gdelta = (lfs_gstate_t){0};
 801ce40:	64a0      	str	r0, [r4, #72]	@ 0x48
 801ce42:	64e0      	str	r0, [r4, #76]	@ 0x4c
 801ce44:	6520      	str	r0, [r4, #80]	@ 0x50
}
 801ce46:	bd38      	pop	{r3, r4, r5, pc}
                        : lfs->cfg->block_size)/8));
 801ce48:	6a53      	ldr	r3, [r2, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 801ce4a:	08db      	lsrs	r3, r3, #3
 801ce4c:	e73f      	b.n	801ccce <lfs_init+0x162>
 801ce4e:	bf00      	nop
 801ce50:	08035b2c 	.word	0x08035b2c
 801ce54:	0803630c 	.word	0x0803630c
 801ce58:	0803558c 	.word	0x0803558c
 801ce5c:	08035b48 	.word	0x08035b48
 801ce60:	08035b64 	.word	0x08035b64
 801ce64:	08035b80 	.word	0x08035b80
 801ce68:	08035bb0 	.word	0x08035bb0
 801ce6c:	08035be0 	.word	0x08035be0
 801ce70:	08035c14 	.word	0x08035c14
 801ce74:	08035c30 	.word	0x08035c30
 801ce78:	08035c7c 	.word	0x08035c7c
 801ce7c:	08035c98 	.word	0x08035c98
 801ce80:	08035cec 	.word	0x08035cec
 801ce84:	08035d4c 	.word	0x08035d4c
 801ce88:	08035d6c 	.word	0x08035d6c
 801ce8c:	08035d88 	.word	0x08035d88
 801ce90:	08035dac 	.word	0x08035dac
 801ce94:	08035dc8 	.word	0x08035dc8
 801ce98:	08035df8 	.word	0x08035df8
 801ce9c:	08035e50 	.word	0x08035e50
 801cea0:	08035ea0 	.word	0x08035ea0

0801cea4 <lfs_format_>:
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 801cea4:	b570      	push	{r4, r5, r6, lr}
 801cea6:	b096      	sub	sp, #88	@ 0x58
 801cea8:	4604      	mov	r4, r0
 801ceaa:	460d      	mov	r5, r1
        err = lfs_init(lfs, cfg);
 801ceac:	f7ff fe5e 	bl	801cb6c <lfs_init>
        if (err) {
 801ceb0:	4606      	mov	r6, r0
 801ceb2:	b9f0      	cbnz	r0, 801cef2 <lfs_format_+0x4e>
        LFS_ASSERT(cfg->block_count != 0);
 801ceb4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801ceb6:	b1fb      	cbz	r3, 801cef8 <lfs_format_+0x54>
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801ceb8:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801ceba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801cebc:	2100      	movs	r1, #0
 801cebe:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801cec0:	f00c fdde 	bl	8029a80 <memset>
        lfs->lookahead.start = 0;
 801cec4:	2200      	movs	r2, #0
 801cec6:	6562      	str	r2, [r4, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 801cec8:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801ceca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cecc:	00db      	lsls	r3, r3, #3
 801cece:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
    return (a < b) ? a : b;
 801ced0:	428b      	cmp	r3, r1
 801ced2:	bf28      	it	cs
 801ced4:	460b      	movcs	r3, r1
 801ced6:	65a3      	str	r3, [r4, #88]	@ 0x58
        lfs->lookahead.next = 0;
 801ced8:	65e2      	str	r2, [r4, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 801ceda:	4620      	mov	r0, r4
 801cedc:	f7fc fbda 	bl	8019694 <lfs_alloc_ckpoint>
        err = lfs_dir_alloc(lfs, &root);
 801cee0:	a906      	add	r1, sp, #24
 801cee2:	4620      	mov	r0, r4
 801cee4:	f7fe f820 	bl	801af28 <lfs_dir_alloc>
        if (err) {
 801cee8:	4606      	mov	r6, r0
 801ceea:	b160      	cbz	r0, 801cf06 <lfs_format_+0x62>
    lfs_deinit(lfs);
 801ceec:	4620      	mov	r0, r4
 801ceee:	f7ff fe23 	bl	801cb38 <lfs_deinit>
}
 801cef2:	4630      	mov	r0, r6
 801cef4:	b016      	add	sp, #88	@ 0x58
 801cef6:	bd70      	pop	{r4, r5, r6, pc}
        LFS_ASSERT(cfg->block_count != 0);
 801cef8:	4b20      	ldr	r3, [pc, #128]	@ (801cf7c <lfs_format_+0xd8>)
 801cefa:	4a21      	ldr	r2, [pc, #132]	@ (801cf80 <lfs_format_+0xdc>)
 801cefc:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 801cf00:	4820      	ldr	r0, [pc, #128]	@ (801cf84 <lfs_format_+0xe0>)
 801cf02:	f00a f86b 	bl	8026fdc <__assert_func>
            .version     = lfs_fs_disk_version(lfs),
 801cf06:	4620      	mov	r0, r4
 801cf08:	f7fc fbb6 	bl	8019678 <lfs_fs_disk_version>
        lfs_superblock_t superblock = {
 801cf0c:	9000      	str	r0, [sp, #0]
            .block_size  = lfs->cfg->block_size,
 801cf0e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801cf10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 801cf12:	9301      	str	r3, [sp, #4]
            .block_count = lfs->block_count,
 801cf14:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 801cf16:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
 801cf18:	6f23      	ldr	r3, [r4, #112]	@ 0x70
        lfs_superblock_t superblock = {
 801cf1a:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
 801cf1c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
        lfs_superblock_t superblock = {
 801cf1e:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
 801cf20:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        lfs_superblock_t superblock = {
 801cf22:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801cf24:	4b18      	ldr	r3, [pc, #96]	@ (801cf88 <lfs_format_+0xe4>)
 801cf26:	930e      	str	r3, [sp, #56]	@ 0x38
 801cf28:	2300      	movs	r3, #0
 801cf2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cf2c:	4b17      	ldr	r3, [pc, #92]	@ (801cf8c <lfs_format_+0xe8>)
 801cf2e:	9310      	str	r3, [sp, #64]	@ 0x40
 801cf30:	4b17      	ldr	r3, [pc, #92]	@ (801cf90 <lfs_format_+0xec>)
 801cf32:	9311      	str	r3, [sp, #68]	@ 0x44
 801cf34:	4b17      	ldr	r3, [pc, #92]	@ (801cf94 <lfs_format_+0xf0>)
 801cf36:	9312      	str	r3, [sp, #72]	@ 0x48
 801cf38:	f8cd d04c 	str.w	sp, [sp, #76]	@ 0x4c
 801cf3c:	2303      	movs	r3, #3
 801cf3e:	aa0e      	add	r2, sp, #56	@ 0x38
 801cf40:	a906      	add	r1, sp, #24
 801cf42:	4620      	mov	r0, r4
 801cf44:	f7ff fcb2 	bl	801c8ac <lfs_dir_commit>
        if (err) {
 801cf48:	4606      	mov	r6, r0
 801cf4a:	2800      	cmp	r0, #0
 801cf4c:	d1ce      	bne.n	801ceec <lfs_format_+0x48>
        root.erased = false;
 801cf4e:	2200      	movs	r2, #0
 801cf50:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 801cf54:	4613      	mov	r3, r2
 801cf56:	a906      	add	r1, sp, #24
 801cf58:	4620      	mov	r0, r4
 801cf5a:	f7ff fca7 	bl	801c8ac <lfs_dir_commit>
        if (err) {
 801cf5e:	4606      	mov	r6, r0
 801cf60:	2800      	cmp	r0, #0
 801cf62:	d1c3      	bne.n	801ceec <lfs_format_+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 801cf64:	2300      	movs	r3, #0
 801cf66:	9314      	str	r3, [sp, #80]	@ 0x50
 801cf68:	2301      	movs	r3, #1
 801cf6a:	9315      	str	r3, [sp, #84]	@ 0x54
 801cf6c:	aa14      	add	r2, sp, #80	@ 0x50
 801cf6e:	a906      	add	r1, sp, #24
 801cf70:	4620      	mov	r0, r4
 801cf72:	f7fd fe6b 	bl	801ac4c <lfs_dir_fetch>
 801cf76:	4606      	mov	r6, r0
        if (err) {
 801cf78:	e7b8      	b.n	801ceec <lfs_format_+0x48>
 801cf7a:	bf00      	nop
 801cf7c:	08035f30 	.word	0x08035f30
 801cf80:	08036318 	.word	0x08036318
 801cf84:	0803558c 	.word	0x0803558c
 801cf88:	40100000 	.word	0x40100000
 801cf8c:	0ff00008 	.word	0x0ff00008
 801cf90:	08035f48 	.word	0x08035f48
 801cf94:	20100018 	.word	0x20100018

0801cf98 <lfs_unmount_>:
static int lfs_unmount_(lfs_t *lfs) {
 801cf98:	b508      	push	{r3, lr}
    return lfs_deinit(lfs);
 801cf9a:	f7ff fdcd 	bl	801cb38 <lfs_deinit>
}
 801cf9e:	bd08      	pop	{r3, pc}

0801cfa0 <lfs_mount_>:
static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 801cfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfa4:	b09b      	sub	sp, #108	@ 0x6c
 801cfa6:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 801cfa8:	f7ff fde0 	bl	801cb6c <lfs_init>
    if (err) {
 801cfac:	9005      	str	r0, [sp, #20]
 801cfae:	b9d8      	cbnz	r0, 801cfe8 <lfs_mount_+0x48>
    lfs_mdir_t dir = {.tail = {0, 1}};
 801cfb0:	2220      	movs	r2, #32
 801cfb2:	2100      	movs	r1, #0
 801cfb4:	a80f      	add	r0, sp, #60	@ 0x3c
 801cfb6:	f00c fd63 	bl	8029a80 <memset>
 801cfba:	2501      	movs	r5, #1
 801cfbc:	9516      	str	r5, [sp, #88]	@ 0x58
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801cfbe:	4aa1      	ldr	r2, [pc, #644]	@ (801d244 <lfs_mount_+0x2a4>)
 801cfc0:	ab0d      	add	r3, sp, #52	@ 0x34
 801cfc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cfc6:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801cfca:	462e      	mov	r6, r5
    while (!lfs_pair_isnull(dir.tail)) {
 801cfcc:	e073      	b.n	801d0b6 <lfs_mount_+0x116>
            LFS_WARN("Cycle detected in tail list");
 801cfce:	4b9e      	ldr	r3, [pc, #632]	@ (801d248 <lfs_mount_+0x2a8>)
 801cfd0:	f241 123d 	movw	r2, #4413	@ 0x113d
 801cfd4:	499d      	ldr	r1, [pc, #628]	@ (801d24c <lfs_mount_+0x2ac>)
 801cfd6:	489e      	ldr	r0, [pc, #632]	@ (801d250 <lfs_mount_+0x2b0>)
 801cfd8:	f00a f834 	bl	8027044 <printf>
            err = LFS_ERR_CORRUPT;
 801cfdc:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801cfe0:	9305      	str	r3, [sp, #20]
    lfs_unmount_(lfs);
 801cfe2:	4620      	mov	r0, r4
 801cfe4:	f7ff ffd8 	bl	801cf98 <lfs_unmount_>
}
 801cfe8:	9805      	ldr	r0, [sp, #20]
 801cfea:	b01b      	add	sp, #108	@ 0x6c
 801cfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            tortoise[0] = dir.tail[0];
 801cff0:	970d      	str	r7, [sp, #52]	@ 0x34
            tortoise[1] = dir.tail[1];
 801cff2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cff4:	930e      	str	r3, [sp, #56]	@ 0x38
            tortoise_period *= 2;
 801cff6:	0076      	lsls	r6, r6, #1
            tortoise_i = 0;
 801cff8:	2500      	movs	r5, #0
 801cffa:	e075      	b.n	801d0e8 <lfs_mount_+0x148>
                LFS_ERROR("Invalid version "
 801cffc:	4620      	mov	r0, r4
 801cffe:	f7fc fb44 	bl	801968a <lfs_fs_disk_version_minor>
 801d002:	4b91      	ldr	r3, [pc, #580]	@ (801d248 <lfs_mount_+0x2a8>)
 801d004:	9303      	str	r3, [sp, #12]
 801d006:	9002      	str	r0, [sp, #8]
 801d008:	f8cd 9004 	str.w	r9, [sp, #4]
 801d00c:	b2bf      	uxth	r7, r7
 801d00e:	9700      	str	r7, [sp, #0]
 801d010:	4643      	mov	r3, r8
 801d012:	f241 126b 	movw	r2, #4459	@ 0x116b
 801d016:	498d      	ldr	r1, [pc, #564]	@ (801d24c <lfs_mount_+0x2ac>)
 801d018:	488e      	ldr	r0, [pc, #568]	@ (801d254 <lfs_mount_+0x2b4>)
 801d01a:	f00a f813 	bl	8027044 <printf>
                err = LFS_ERR_INVAL;
 801d01e:	f06f 0315 	mvn.w	r3, #21
 801d022:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801d024:	e7dd      	b.n	801cfe2 <lfs_mount_+0x42>
                LFS_DEBUG("Found older minor version "
 801d026:	4b88      	ldr	r3, [pc, #544]	@ (801d248 <lfs_mount_+0x2a8>)
 801d028:	9303      	str	r3, [sp, #12]
 801d02a:	9002      	str	r0, [sp, #8]
 801d02c:	f8cd 9004 	str.w	r9, [sp, #4]
 801d030:	b2bf      	uxth	r7, r7
 801d032:	9700      	str	r7, [sp, #0]
 801d034:	4643      	mov	r3, r8
 801d036:	f241 127a 	movw	r2, #4474	@ 0x117a
 801d03a:	4984      	ldr	r1, [pc, #528]	@ (801d24c <lfs_mount_+0x2ac>)
 801d03c:	4886      	ldr	r0, [pc, #536]	@ (801d258 <lfs_mount_+0x2b8>)
 801d03e:	f00a f801 	bl	8027044 <printf>
                needssuperblock = true;
 801d042:	2301      	movs	r3, #1
 801d044:	9304      	str	r3, [sp, #16]
 801d046:	e08f      	b.n	801d168 <lfs_mount_+0x1c8>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 801d048:	497f      	ldr	r1, [pc, #508]	@ (801d248 <lfs_mount_+0x2a8>)
 801d04a:	9101      	str	r1, [sp, #4]
 801d04c:	9200      	str	r2, [sp, #0]
 801d04e:	f241 1289 	movw	r2, #4489	@ 0x1189
 801d052:	497e      	ldr	r1, [pc, #504]	@ (801d24c <lfs_mount_+0x2ac>)
 801d054:	4881      	ldr	r0, [pc, #516]	@ (801d25c <lfs_mount_+0x2bc>)
 801d056:	f009 fff5 	bl	8027044 <printf>
                    err = LFS_ERR_INVAL;
 801d05a:	f06f 0315 	mvn.w	r3, #21
 801d05e:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801d060:	e7bf      	b.n	801cfe2 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 801d062:	4979      	ldr	r1, [pc, #484]	@ (801d248 <lfs_mount_+0x2a8>)
 801d064:	9101      	str	r1, [sp, #4]
 801d066:	9200      	str	r2, [sp, #0]
 801d068:	f241 1294 	movw	r2, #4500	@ 0x1194
 801d06c:	4977      	ldr	r1, [pc, #476]	@ (801d24c <lfs_mount_+0x2ac>)
 801d06e:	487c      	ldr	r0, [pc, #496]	@ (801d260 <lfs_mount_+0x2c0>)
 801d070:	f009 ffe8 	bl	8027044 <printf>
                    err = LFS_ERR_INVAL;
 801d074:	f06f 0315 	mvn.w	r3, #21
 801d078:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801d07a:	e7b2      	b.n	801cfe2 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 801d07c:	4972      	ldr	r1, [pc, #456]	@ (801d248 <lfs_mount_+0x2a8>)
 801d07e:	9101      	str	r1, [sp, #4]
 801d080:	9200      	str	r2, [sp, #0]
 801d082:	f241 129f 	movw	r2, #4511	@ 0x119f
 801d086:	4971      	ldr	r1, [pc, #452]	@ (801d24c <lfs_mount_+0x2ac>)
 801d088:	4876      	ldr	r0, [pc, #472]	@ (801d264 <lfs_mount_+0x2c4>)
 801d08a:	f009 ffdb 	bl	8027044 <printf>
                    err = LFS_ERR_INVAL;
 801d08e:	f06f 0315 	mvn.w	r3, #21
 801d092:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801d094:	e7a5      	b.n	801cfe2 <lfs_mount_+0x42>
            lfs->block_count = superblock.block_count;
 801d096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d098:	66e3      	str	r3, [r4, #108]	@ 0x6c
            if (superblock.block_size != lfs->cfg->block_size) {
 801d09a:	9b08      	ldr	r3, [sp, #32]
 801d09c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801d09e:	4293      	cmp	r3, r2
 801d0a0:	f040 8096 	bne.w	801d1d0 <lfs_mount_+0x230>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801d0a4:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801d0a8:	a90f      	add	r1, sp, #60	@ 0x3c
 801d0aa:	4620      	mov	r0, r4
 801d0ac:	f7fc fdee 	bl	8019c8c <lfs_dir_getgstate>
        if (err) {
 801d0b0:	2800      	cmp	r0, #0
 801d0b2:	f040 809e 	bne.w	801d1f2 <lfs_mount_+0x252>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d0b6:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801d0b8:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801d0bc:	f000 809d 	beq.w	801d1fa <lfs_mount_+0x25a>
 801d0c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d0c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d0c6:	f000 8096 	beq.w	801d1f6 <lfs_mount_+0x256>
 801d0ca:	9b05      	ldr	r3, [sp, #20]
    while (!lfs_pair_isnull(dir.tail)) {
 801d0cc:	f013 0301 	ands.w	r3, r3, #1
 801d0d0:	f040 8095 	bne.w	801d1fe <lfs_mount_+0x25e>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801d0d4:	a90d      	add	r1, sp, #52	@ 0x34
 801d0d6:	a815      	add	r0, sp, #84	@ 0x54
 801d0d8:	f7fc fa60 	bl	801959c <lfs_pair_issync>
 801d0dc:	9004      	str	r0, [sp, #16]
 801d0de:	2800      	cmp	r0, #0
 801d0e0:	f47f af75 	bne.w	801cfce <lfs_mount_+0x2e>
        if (tortoise_i == tortoise_period) {
 801d0e4:	42b5      	cmp	r5, r6
 801d0e6:	d083      	beq.n	801cff0 <lfs_mount_+0x50>
        tortoise_i += 1;
 801d0e8:	3501      	adds	r5, #1
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 801d0ea:	9417      	str	r4, [sp, #92]	@ 0x5c
 801d0ec:	4b5e      	ldr	r3, [pc, #376]	@ (801d268 <lfs_mount_+0x2c8>)
 801d0ee:	9318      	str	r3, [sp, #96]	@ 0x60
 801d0f0:	2308      	movs	r3, #8
 801d0f2:	9319      	str	r3, [sp, #100]	@ 0x64
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 801d0f4:	ab17      	add	r3, sp, #92	@ 0x5c
 801d0f6:	9303      	str	r3, [sp, #12]
 801d0f8:	4b5c      	ldr	r3, [pc, #368]	@ (801d26c <lfs_mount_+0x2cc>)
 801d0fa:	9302      	str	r3, [sp, #8]
 801d0fc:	2300      	movs	r3, #0
 801d0fe:	9301      	str	r3, [sp, #4]
 801d100:	4b5b      	ldr	r3, [pc, #364]	@ (801d270 <lfs_mount_+0x2d0>)
 801d102:	9300      	str	r3, [sp, #0]
 801d104:	4b5b      	ldr	r3, [pc, #364]	@ (801d274 <lfs_mount_+0x2d4>)
 801d106:	aa15      	add	r2, sp, #84	@ 0x54
 801d108:	a90f      	add	r1, sp, #60	@ 0x3c
 801d10a:	4620      	mov	r0, r4
 801d10c:	f7fd fabe 	bl	801a68c <lfs_dir_fetchmatch>
        if (tag < 0) {
 801d110:	2800      	cmp	r0, #0
 801d112:	db6c      	blt.n	801d1ee <lfs_mount_+0x24e>
        if (tag && !lfs_tag_isdelete(tag)) {
 801d114:	2800      	cmp	r0, #0
 801d116:	d0c5      	beq.n	801d0a4 <lfs_mount_+0x104>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801d118:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 801d11c:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801d120:	d0c0      	beq.n	801d0a4 <lfs_mount_+0x104>
            lfs->root[0] = dir.pair[0];
 801d122:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d124:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 801d126:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d128:	6263      	str	r3, [r4, #36]	@ 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 801d12a:	ab07      	add	r3, sp, #28
 801d12c:	9300      	str	r3, [sp, #0]
 801d12e:	4b52      	ldr	r3, [pc, #328]	@ (801d278 <lfs_mount_+0x2d8>)
 801d130:	4a50      	ldr	r2, [pc, #320]	@ (801d274 <lfs_mount_+0x2d4>)
 801d132:	a90f      	add	r1, sp, #60	@ 0x3c
 801d134:	4620      	mov	r0, r4
 801d136:	f7fc fd9b 	bl	8019c70 <lfs_dir_get>
            if (tag < 0) {
 801d13a:	2800      	cmp	r0, #0
 801d13c:	db55      	blt.n	801d1ea <lfs_mount_+0x24a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 801d13e:	9f07      	ldr	r7, [sp, #28]
 801d140:	ea4f 4817 	mov.w	r8, r7, lsr #16
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 801d144:	fa1f fa87 	uxth.w	sl, r7
            if (major_version != lfs_fs_disk_version_major(lfs)
 801d148:	4620      	mov	r0, r4
 801d14a:	f7fc fa99 	bl	8019680 <lfs_fs_disk_version_major>
 801d14e:	4681      	mov	r9, r0
 801d150:	4540      	cmp	r0, r8
 801d152:	f47f af53 	bne.w	801cffc <lfs_mount_+0x5c>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 801d156:	4620      	mov	r0, r4
 801d158:	f7fc fa97 	bl	801968a <lfs_fs_disk_version_minor>
 801d15c:	4550      	cmp	r0, sl
 801d15e:	f4ff af4d 	bcc.w	801cffc <lfs_mount_+0x5c>
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 801d162:	4550      	cmp	r0, sl
 801d164:	f63f af5f 	bhi.w	801d026 <lfs_mount_+0x86>
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 801d168:	9904      	ldr	r1, [sp, #16]
 801d16a:	4620      	mov	r0, r4
 801d16c:	f7fc fb2b 	bl	80197c6 <lfs_fs_prepsuperblock>
            if (superblock.name_max) {
 801d170:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d172:	b123      	cbz	r3, 801d17e <lfs_mount_+0x1de>
                if (superblock.name_max > lfs->name_max) {
 801d174:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801d176:	4293      	cmp	r3, r2
 801d178:	f63f af66 	bhi.w	801d048 <lfs_mount_+0xa8>
                lfs->name_max = superblock.name_max;
 801d17c:	6723      	str	r3, [r4, #112]	@ 0x70
            if (superblock.file_max) {
 801d17e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d180:	b123      	cbz	r3, 801d18c <lfs_mount_+0x1ec>
                if (superblock.file_max > lfs->file_max) {
 801d182:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 801d184:	4293      	cmp	r3, r2
 801d186:	f63f af6c 	bhi.w	801d062 <lfs_mount_+0xc2>
                lfs->file_max = superblock.file_max;
 801d18a:	6763      	str	r3, [r4, #116]	@ 0x74
            if (superblock.attr_max) {
 801d18c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d18e:	b14b      	cbz	r3, 801d1a4 <lfs_mount_+0x204>
                if (superblock.attr_max > lfs->attr_max) {
 801d190:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801d192:	4293      	cmp	r3, r2
 801d194:	f63f af72 	bhi.w	801d07c <lfs_mount_+0xdc>
                lfs->attr_max = superblock.attr_max;
 801d198:	67a3      	str	r3, [r4, #120]	@ 0x78
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 801d19a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801d19c:	4293      	cmp	r3, r2
 801d19e:	bf28      	it	cs
 801d1a0:	4613      	movcs	r3, r2
 801d1a2:	67e3      	str	r3, [r4, #124]	@ 0x7c
            if (lfs->cfg->block_count
 801d1a4:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801d1a6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801d1a8:	2900      	cmp	r1, #0
 801d1aa:	f43f af74 	beq.w	801d096 <lfs_mount_+0xf6>
                    && superblock.block_count != lfs->cfg->block_count) {
 801d1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d1b0:	4299      	cmp	r1, r3
 801d1b2:	f43f af70 	beq.w	801d096 <lfs_mount_+0xf6>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 801d1b6:	4a24      	ldr	r2, [pc, #144]	@ (801d248 <lfs_mount_+0x2a8>)
 801d1b8:	9201      	str	r2, [sp, #4]
 801d1ba:	9100      	str	r1, [sp, #0]
 801d1bc:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 801d1c0:	4922      	ldr	r1, [pc, #136]	@ (801d24c <lfs_mount_+0x2ac>)
 801d1c2:	482e      	ldr	r0, [pc, #184]	@ (801d27c <lfs_mount_+0x2dc>)
 801d1c4:	f009 ff3e 	bl	8027044 <printf>
                err = LFS_ERR_INVAL;
 801d1c8:	f06f 0315 	mvn.w	r3, #21
 801d1cc:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801d1ce:	e708      	b.n	801cfe2 <lfs_mount_+0x42>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 801d1d0:	491d      	ldr	r1, [pc, #116]	@ (801d248 <lfs_mount_+0x2a8>)
 801d1d2:	9101      	str	r1, [sp, #4]
 801d1d4:	9200      	str	r2, [sp, #0]
 801d1d6:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 801d1da:	491c      	ldr	r1, [pc, #112]	@ (801d24c <lfs_mount_+0x2ac>)
 801d1dc:	4828      	ldr	r0, [pc, #160]	@ (801d280 <lfs_mount_+0x2e0>)
 801d1de:	f009 ff31 	bl	8027044 <printf>
                err = LFS_ERR_INVAL;
 801d1e2:	f06f 0315 	mvn.w	r3, #21
 801d1e6:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801d1e8:	e6fb      	b.n	801cfe2 <lfs_mount_+0x42>
                err = tag;
 801d1ea:	9005      	str	r0, [sp, #20]
 801d1ec:	e6f9      	b.n	801cfe2 <lfs_mount_+0x42>
            err = tag;
 801d1ee:	9005      	str	r0, [sp, #20]
 801d1f0:	e6f7      	b.n	801cfe2 <lfs_mount_+0x42>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801d1f2:	9005      	str	r0, [sp, #20]
 801d1f4:	e6f5      	b.n	801cfe2 <lfs_mount_+0x42>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d1f6:	2301      	movs	r3, #1
 801d1f8:	e768      	b.n	801d0cc <lfs_mount_+0x12c>
 801d1fa:	2301      	movs	r3, #1
 801d1fc:	e766      	b.n	801d0cc <lfs_mount_+0x12c>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801d1fe:	f104 0030 	add.w	r0, r4, #48	@ 0x30
    for (int i = 0; i < 3; i++) {
 801d202:	9a05      	ldr	r2, [sp, #20]
 801d204:	2a02      	cmp	r2, #2
 801d206:	dc05      	bgt.n	801d214 <lfs_mount_+0x274>
        if (((uint32_t*)a)[i] != 0) {
 801d208:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 801d20c:	b909      	cbnz	r1, 801d212 <lfs_mount_+0x272>
    for (int i = 0; i < 3; i++) {
 801d20e:	3201      	adds	r2, #1
 801d210:	e7f8      	b.n	801d204 <lfs_mount_+0x264>
            return false;
 801d212:	2300      	movs	r3, #0
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801d214:	b3b3      	cbz	r3, 801d284 <lfs_mount_+0x2e4>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 801d216:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d218:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801d21c:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 801d21e:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801d222:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801d226:	ca07      	ldmia	r2, {r0, r1, r2}
 801d228:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 801d22c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801d22e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801d230:	fbb3 f1f2 	udiv	r1, r3, r2
 801d234:	fb02 3311 	mls	r3, r2, r1, r3
 801d238:	6563      	str	r3, [r4, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 801d23a:	4620      	mov	r0, r4
 801d23c:	f7fc fa2d 	bl	801969a <lfs_alloc_drop>
    return 0;
 801d240:	e6d2      	b.n	801cfe8 <lfs_mount_+0x48>
 801d242:	bf00      	nop
 801d244:	08032dc4 	.word	0x08032dc4
 801d248:	080337f8 	.word	0x080337f8
 801d24c:	0803558c 	.word	0x0803558c
 801d250:	0803574c 	.word	0x0803574c
 801d254:	08035f54 	.word	0x08035f54
 801d258:	08035f8c 	.word	0x08035f8c
 801d25c:	08035fcc 	.word	0x08035fcc
 801d260:	08036000 	.word	0x08036000
 801d264:	08036034 	.word	0x08036034
 801d268:	08035f48 	.word	0x08035f48
 801d26c:	0801a44d 	.word	0x0801a44d
 801d270:	0ff00008 	.word	0x0ff00008
 801d274:	7ffffc00 	.word	0x7ffffc00
 801d278:	20100018 	.word	0x20100018
 801d27c:	08036068 	.word	0x08036068
 801d280:	0803609c 	.word	0x0803609c
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 801d284:	4b06      	ldr	r3, [pc, #24]	@ (801d2a0 <lfs_mount_+0x300>)
 801d286:	9302      	str	r3, [sp, #8]
 801d288:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801d28a:	9301      	str	r3, [sp, #4]
 801d28c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d28e:	9300      	str	r3, [sp, #0]
 801d290:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d292:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 801d296:	4903      	ldr	r1, [pc, #12]	@ (801d2a4 <lfs_mount_+0x304>)
 801d298:	4803      	ldr	r0, [pc, #12]	@ (801d2a8 <lfs_mount_+0x308>)
 801d29a:	f009 fed3 	bl	8027044 <printf>
 801d29e:	e7ba      	b.n	801d216 <lfs_mount_+0x276>
 801d2a0:	080337f8 	.word	0x080337f8
 801d2a4:	0803558c 	.word	0x0803558c
 801d2a8:	080360cc 	.word	0x080360cc

0801d2ac <lfs_file_close_>:
static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 801d2ac:	b570      	push	{r4, r5, r6, lr}
 801d2ae:	4606      	mov	r6, r0
 801d2b0:	460c      	mov	r4, r1
    int err = lfs_file_sync_(lfs, file);
 801d2b2:	f7ff fbd7 	bl	801ca64 <lfs_file_sync_>
 801d2b6:	4605      	mov	r5, r0
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 801d2b8:	4621      	mov	r1, r4
 801d2ba:	4630      	mov	r0, r6
 801d2bc:	f7fc f9cd 	bl	801965a <lfs_mlist_remove>
    if (!file->cfg->buffer) {
 801d2c0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801d2c2:	681b      	ldr	r3, [r3, #0]
 801d2c4:	b10b      	cbz	r3, 801d2ca <lfs_file_close_+0x1e>
}
 801d2c6:	4628      	mov	r0, r5
 801d2c8:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
 801d2ca:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801d2cc:	f7fb ff56 	bl	801917c <vPortFree>
    return err;
 801d2d0:	e7f9      	b.n	801d2c6 <lfs_file_close_+0x1a>
	...

0801d2d4 <lfs_dir_find>:
        const char **path, uint16_t *id) {
 801d2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2d8:	b08d      	sub	sp, #52	@ 0x34
 801d2da:	4682      	mov	sl, r0
 801d2dc:	4688      	mov	r8, r1
 801d2de:	9207      	str	r2, [sp, #28]
    const char *name = *path;
 801d2e0:	6812      	ldr	r2, [r2, #0]
 801d2e2:	9205      	str	r2, [sp, #20]
    if (id) {
 801d2e4:	9306      	str	r3, [sp, #24]
 801d2e6:	b11b      	cbz	r3, 801d2f0 <lfs_dir_find+0x1c>
 801d2e8:	461a      	mov	r2, r3
        *id = 0x3ff;
 801d2ea:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d2ee:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 801d2f0:	f8da 3020 	ldr.w	r3, [sl, #32]
 801d2f4:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
 801d2f8:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 801d2fc:	f8c8 301c 	str.w	r3, [r8, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 801d300:	4e4d      	ldr	r6, [pc, #308]	@ (801d438 <lfs_dir_find+0x164>)
        name += strspn(name, "/");
 801d302:	4d4e      	ldr	r5, [pc, #312]	@ (801d43c <lfs_dir_find+0x168>)
 801d304:	4629      	mov	r1, r5
 801d306:	9f05      	ldr	r7, [sp, #20]
 801d308:	4638      	mov	r0, r7
 801d30a:	f00c fc29 	bl	8029b60 <strspn>
 801d30e:	4604      	mov	r4, r0
 801d310:	eb07 0900 	add.w	r9, r7, r0
        lfs_size_t namelen = strcspn(name, "/");
 801d314:	4629      	mov	r1, r5
 801d316:	4648      	mov	r0, r9
 801d318:	f00c fbd6 	bl	8029ac8 <strcspn>
 801d31c:	4605      	mov	r5, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801d31e:	2801      	cmp	r0, #1
 801d320:	d00a      	beq.n	801d338 <lfs_dir_find+0x64>
 801d322:	2d02      	cmp	r5, #2
 801d324:	d00c      	beq.n	801d340 <lfs_dir_find+0x6c>
        const char *suffix = name + namelen;
 801d326:	eb09 0305 	add.w	r3, r9, r5
 801d32a:	9305      	str	r3, [sp, #20]
 801d32c:	469b      	mov	fp, r3
        int depth = 1;
 801d32e:	2701      	movs	r7, #1
 801d330:	e013      	b.n	801d35a <lfs_dir_find+0x86>
 801d332:	46b2      	mov	sl, r6
 801d334:	4606      	mov	r6, r0
 801d336:	e7e4      	b.n	801d302 <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801d338:	5d3b      	ldrb	r3, [r7, r4]
 801d33a:	2b2e      	cmp	r3, #46	@ 0x2e
 801d33c:	d1f1      	bne.n	801d322 <lfs_dir_find+0x4e>
 801d33e:	e006      	b.n	801d34e <lfs_dir_find+0x7a>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 801d340:	2202      	movs	r2, #2
 801d342:	493f      	ldr	r1, [pc, #252]	@ (801d440 <lfs_dir_find+0x16c>)
 801d344:	4648      	mov	r0, r9
 801d346:	f00c fb07 	bl	8029958 <memcmp>
 801d34a:	2800      	cmp	r0, #0
 801d34c:	d1eb      	bne.n	801d326 <lfs_dir_find+0x52>
            name += namelen;
 801d34e:	eb09 0305 	add.w	r3, r9, r5
 801d352:	9305      	str	r3, [sp, #20]
            goto nextname;
 801d354:	e7d5      	b.n	801d302 <lfs_dir_find+0x2e>
                depth += 1;
 801d356:	3701      	adds	r7, #1
            suffix += sufflen;
 801d358:	44a3      	add	fp, r4
            suffix += strspn(suffix, "/");
 801d35a:	4c38      	ldr	r4, [pc, #224]	@ (801d43c <lfs_dir_find+0x168>)
 801d35c:	4621      	mov	r1, r4
 801d35e:	4658      	mov	r0, fp
 801d360:	f00c fbfe 	bl	8029b60 <strspn>
 801d364:	4483      	add	fp, r0
            sufflen = strcspn(suffix, "/");
 801d366:	4621      	mov	r1, r4
 801d368:	4658      	mov	r0, fp
 801d36a:	f00c fbad 	bl	8029ac8 <strcspn>
            if (sufflen == 0) {
 801d36e:	4604      	mov	r4, r0
 801d370:	b170      	cbz	r0, 801d390 <lfs_dir_find+0xbc>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 801d372:	2802      	cmp	r0, #2
 801d374:	d1ef      	bne.n	801d356 <lfs_dir_find+0x82>
 801d376:	2202      	movs	r2, #2
 801d378:	4931      	ldr	r1, [pc, #196]	@ (801d440 <lfs_dir_find+0x16c>)
 801d37a:	4658      	mov	r0, fp
 801d37c:	f00c faec 	bl	8029958 <memcmp>
 801d380:	2800      	cmp	r0, #0
 801d382:	d1e8      	bne.n	801d356 <lfs_dir_find+0x82>
                if (depth == 0) {
 801d384:	3f01      	subs	r7, #1
 801d386:	d1e7      	bne.n	801d358 <lfs_dir_find+0x84>
                    name = suffix + sufflen;
 801d388:	eb0b 0304 	add.w	r3, fp, r4
 801d38c:	9305      	str	r3, [sp, #20]
                    goto nextname;
 801d38e:	e7b8      	b.n	801d302 <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
 801d390:	f899 3000 	ldrb.w	r3, [r9]
 801d394:	2b00      	cmp	r3, #0
 801d396:	d04a      	beq.n	801d42e <lfs_dir_find+0x15a>
        *path = name;
 801d398:	9b07      	ldr	r3, [sp, #28]
 801d39a:	f8c3 9000 	str.w	r9, [r3]
    return (tag & 0x7ff00000) >> 20;
 801d39e:	f3c6 530a 	ubfx	r3, r6, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801d3a2:	2b02      	cmp	r3, #2
 801d3a4:	d13f      	bne.n	801d426 <lfs_dir_find+0x152>
    return (tag & 0x000ffc00) >> 10;
 801d3a6:	f3c6 2689 	ubfx	r6, r6, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 801d3aa:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d3ae:	429e      	cmp	r6, r3
 801d3b0:	d102      	bne.n	801d3b8 <lfs_dir_find+0xe4>
 801d3b2:	464c      	mov	r4, r9
 801d3b4:	4656      	mov	r6, sl
 801d3b6:	e029      	b.n	801d40c <lfs_dir_find+0x138>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 801d3b8:	02b6      	lsls	r6, r6, #10
 801d3ba:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801d3be:	9300      	str	r3, [sp, #0]
 801d3c0:	f046 5300 	orr.w	r3, r6, #536870912	@ 0x20000000
 801d3c4:	f043 0308 	orr.w	r3, r3, #8
 801d3c8:	4a1e      	ldr	r2, [pc, #120]	@ (801d444 <lfs_dir_find+0x170>)
 801d3ca:	4641      	mov	r1, r8
 801d3cc:	4650      	mov	r0, sl
 801d3ce:	f7fc fc4f 	bl	8019c70 <lfs_dir_get>
            if (res < 0) {
 801d3d2:	1e06      	subs	r6, r0, #0
 801d3d4:	db2b      	blt.n	801d42e <lfs_dir_find+0x15a>
 801d3d6:	464c      	mov	r4, r9
 801d3d8:	4656      	mov	r6, sl
 801d3da:	e017      	b.n	801d40c <lfs_dir_find+0x138>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801d3dc:	9b06      	ldr	r3, [sp, #24]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 801d3de:	9609      	str	r6, [sp, #36]	@ 0x24
 801d3e0:	940a      	str	r4, [sp, #40]	@ 0x28
 801d3e2:	950b      	str	r5, [sp, #44]	@ 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801d3e4:	aa09      	add	r2, sp, #36	@ 0x24
 801d3e6:	9203      	str	r2, [sp, #12]
 801d3e8:	4a17      	ldr	r2, [pc, #92]	@ (801d448 <lfs_dir_find+0x174>)
 801d3ea:	9202      	str	r2, [sp, #8]
 801d3ec:	9301      	str	r3, [sp, #4]
 801d3ee:	9500      	str	r5, [sp, #0]
 801d3f0:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 801d3f4:	463a      	mov	r2, r7
 801d3f6:	4641      	mov	r1, r8
 801d3f8:	4630      	mov	r0, r6
 801d3fa:	f7fd f947 	bl	801a68c <lfs_dir_fetchmatch>
            if (tag < 0) {
 801d3fe:	2800      	cmp	r0, #0
 801d400:	db14      	blt.n	801d42c <lfs_dir_find+0x158>
            if (tag) {
 801d402:	2800      	cmp	r0, #0
 801d404:	d195      	bne.n	801d332 <lfs_dir_find+0x5e>
            if (!dir->split) {
 801d406:	f898 3017 	ldrb.w	r3, [r8, #23]
 801d40a:	b14b      	cbz	r3, 801d420 <lfs_dir_find+0x14c>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801d40c:	f108 0718 	add.w	r7, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
 801d410:	212f      	movs	r1, #47	@ 0x2f
 801d412:	4620      	mov	r0, r4
 801d414:	f00c fb4b 	bl	8029aae <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801d418:	2800      	cmp	r0, #0
 801d41a:	d0df      	beq.n	801d3dc <lfs_dir_find+0x108>
 801d41c:	2300      	movs	r3, #0
 801d41e:	e7de      	b.n	801d3de <lfs_dir_find+0x10a>
                return LFS_ERR_NOENT;
 801d420:	f06f 0601 	mvn.w	r6, #1
 801d424:	e003      	b.n	801d42e <lfs_dir_find+0x15a>
            return LFS_ERR_NOTDIR;
 801d426:	f06f 0613 	mvn.w	r6, #19
 801d42a:	e000      	b.n	801d42e <lfs_dir_find+0x15a>
 801d42c:	4606      	mov	r6, r0
}
 801d42e:	4630      	mov	r0, r6
 801d430:	b00d      	add	sp, #52	@ 0x34
 801d432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d436:	bf00      	nop
 801d438:	002ffc00 	.word	0x002ffc00
 801d43c:	08036920 	.word	0x08036920
 801d440:	08036104 	.word	0x08036104
 801d444:	700ffc00 	.word	0x700ffc00
 801d448:	0801a44d 	.word	0x0801a44d

0801d44c <lfs_remove_>:
static int lfs_remove_(lfs_t *lfs, const char *path) {
 801d44c:	b570      	push	{r4, r5, r6, lr}
 801d44e:	b09a      	sub	sp, #104	@ 0x68
 801d450:	4604      	mov	r4, r0
 801d452:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
 801d454:	f7ff fad2 	bl	801c9fc <lfs_fs_forceconsistency>
    if (err) {
 801d458:	4603      	mov	r3, r0
 801d45a:	b110      	cbz	r0, 801d462 <lfs_remove_+0x16>
}
 801d45c:	4618      	mov	r0, r3
 801d45e:	b01a      	add	sp, #104	@ 0x68
 801d460:	bd70      	pop	{r4, r5, r6, pc}
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801d462:	2300      	movs	r3, #0
 801d464:	aa03      	add	r2, sp, #12
 801d466:	a910      	add	r1, sp, #64	@ 0x40
 801d468:	4620      	mov	r0, r4
 801d46a:	f7ff ff33 	bl	801d2d4 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801d46e:	1e03      	subs	r3, r0, #0
 801d470:	dbf4      	blt.n	801d45c <lfs_remove_+0x10>
    return (tag & 0x000ffc00) >> 10;
 801d472:	f3c3 2589 	ubfx	r5, r3, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801d476:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801d47a:	4295      	cmp	r5, r2
 801d47c:	d031      	beq.n	801d4e2 <lfs_remove_+0x96>
    dir.next = lfs->mlist;
 801d47e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801d480:	9206      	str	r2, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
 801d482:	f3c3 560a 	ubfx	r6, r3, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801d486:	2e02      	cmp	r6, #2
 801d488:	d02e      	beq.n	801d4e8 <lfs_remove_+0x9c>
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 801d48a:	02ad      	lsls	r5, r5, #10
 801d48c:	f045 459f 	orr.w	r5, r5, #1333788672	@ 0x4f800000
 801d490:	f445 05e0 	orr.w	r5, r5, #7340032	@ 0x700000
 801d494:	9518      	str	r5, [sp, #96]	@ 0x60
 801d496:	2300      	movs	r3, #0
 801d498:	9319      	str	r3, [sp, #100]	@ 0x64
 801d49a:	2301      	movs	r3, #1
 801d49c:	aa18      	add	r2, sp, #96	@ 0x60
 801d49e:	a910      	add	r1, sp, #64	@ 0x40
 801d4a0:	4620      	mov	r0, r4
 801d4a2:	f7ff fa03 	bl	801c8ac <lfs_dir_commit>
    if (err) {
 801d4a6:	4603      	mov	r3, r0
 801d4a8:	2800      	cmp	r0, #0
 801d4aa:	d142      	bne.n	801d532 <lfs_remove_+0xe6>
    lfs->mlist = dir.next;
 801d4ac:	9a06      	ldr	r2, [sp, #24]
 801d4ae:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801d4b0:	2e02      	cmp	r6, #2
 801d4b2:	d1d3      	bne.n	801d45c <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, -1);
 801d4b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801d4b8:	4620      	mov	r0, r4
 801d4ba:	f7fc f9db 	bl	8019874 <lfs_fs_preporphans>
        if (err) {
 801d4be:	4603      	mov	r3, r0
 801d4c0:	2800      	cmp	r0, #0
 801d4c2:	d1cb      	bne.n	801d45c <lfs_remove_+0x10>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 801d4c4:	aa10      	add	r2, sp, #64	@ 0x40
 801d4c6:	a908      	add	r1, sp, #32
 801d4c8:	4620      	mov	r0, r4
 801d4ca:	f7fe f8e5 	bl	801b698 <lfs_fs_pred>
        if (err) {
 801d4ce:	4603      	mov	r3, r0
 801d4d0:	2800      	cmp	r0, #0
 801d4d2:	d1c3      	bne.n	801d45c <lfs_remove_+0x10>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 801d4d4:	aa08      	add	r2, sp, #32
 801d4d6:	a910      	add	r1, sp, #64	@ 0x40
 801d4d8:	4620      	mov	r0, r4
 801d4da:	f7ff faa3 	bl	801ca24 <lfs_dir_drop>
 801d4de:	4603      	mov	r3, r0
        if (err) {
 801d4e0:	e7bc      	b.n	801d45c <lfs_remove_+0x10>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 801d4e2:	f06f 0315 	mvn.w	r3, #21
 801d4e6:	e7b9      	b.n	801d45c <lfs_remove_+0x10>
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801d4e8:	02ab      	lsls	r3, r5, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801d4ea:	aa04      	add	r2, sp, #16
 801d4ec:	9200      	str	r2, [sp, #0]
 801d4ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801d4f2:	f043 0308 	orr.w	r3, r3, #8
 801d4f6:	4a10      	ldr	r2, [pc, #64]	@ (801d538 <lfs_remove_+0xec>)
 801d4f8:	a910      	add	r1, sp, #64	@ 0x40
 801d4fa:	4620      	mov	r0, r4
 801d4fc:	f7fc fbb8 	bl	8019c70 <lfs_dir_get>
        if (res < 0) {
 801d500:	1e03      	subs	r3, r0, #0
 801d502:	dbab      	blt.n	801d45c <lfs_remove_+0x10>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
 801d504:	aa04      	add	r2, sp, #16
 801d506:	a908      	add	r1, sp, #32
 801d508:	4620      	mov	r0, r4
 801d50a:	f7fd fb9f 	bl	801ac4c <lfs_dir_fetch>
        if (err) {
 801d50e:	4603      	mov	r3, r0
 801d510:	2800      	cmp	r0, #0
 801d512:	d1a3      	bne.n	801d45c <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801d514:	2101      	movs	r1, #1
 801d516:	4620      	mov	r0, r4
 801d518:	f7fc f9ac 	bl	8019874 <lfs_fs_preporphans>
        if (err) {
 801d51c:	4603      	mov	r3, r0
 801d51e:	2800      	cmp	r0, #0
 801d520:	d19c      	bne.n	801d45c <lfs_remove_+0x10>
        dir.type = 0;
 801d522:	2300      	movs	r3, #0
 801d524:	f88d 301e 	strb.w	r3, [sp, #30]
        dir.id = 0;
 801d528:	f8ad 301c 	strh.w	r3, [sp, #28]
        lfs->mlist = &dir;
 801d52c:	ab06      	add	r3, sp, #24
 801d52e:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d530:	e7ab      	b.n	801d48a <lfs_remove_+0x3e>
        lfs->mlist = dir.next;
 801d532:	9a06      	ldr	r2, [sp, #24]
 801d534:	62a2      	str	r2, [r4, #40]	@ 0x28
        return err;
 801d536:	e791      	b.n	801d45c <lfs_remove_+0x10>
 801d538:	700ffc00 	.word	0x700ffc00

0801d53c <lfs_dir_open_>:
static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801d53c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d53e:	b087      	sub	sp, #28
 801d540:	4607      	mov	r7, r0
 801d542:	460d      	mov	r5, r1
 801d544:	9203      	str	r2, [sp, #12]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 801d546:	f101 0608 	add.w	r6, r1, #8
 801d54a:	2300      	movs	r3, #0
 801d54c:	aa03      	add	r2, sp, #12
 801d54e:	4631      	mov	r1, r6
 801d550:	f7ff fec0 	bl	801d2d4 <lfs_dir_find>
    if (tag < 0) {
 801d554:	1e04      	subs	r4, r0, #0
 801d556:	db14      	blt.n	801d582 <lfs_dir_open_+0x46>
    return (tag & 0x7ff00000) >> 20;
 801d558:	f3c4 530a 	ubfx	r3, r4, #20, #11
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801d55c:	2b02      	cmp	r3, #2
 801d55e:	d130      	bne.n	801d5c2 <lfs_dir_open_+0x86>
    return (tag & 0x000ffc00) >> 10;
 801d560:	f3c4 2489 	ubfx	r4, r4, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
 801d564:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d568:	429c      	cmp	r4, r3
 801d56a:	d10d      	bne.n	801d588 <lfs_dir_open_+0x4c>
        pair[0] = lfs->root[0];
 801d56c:	6a3b      	ldr	r3, [r7, #32]
 801d56e:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
 801d570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d572:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 801d574:	aa04      	add	r2, sp, #16
 801d576:	4631      	mov	r1, r6
 801d578:	4638      	mov	r0, r7
 801d57a:	f7fd fb67 	bl	801ac4c <lfs_dir_fetch>
    if (err) {
 801d57e:	4604      	mov	r4, r0
 801d580:	b188      	cbz	r0, 801d5a6 <lfs_dir_open_+0x6a>
}
 801d582:	4620      	mov	r0, r4
 801d584:	b007      	add	sp, #28
 801d586:	bdf0      	pop	{r4, r5, r6, r7, pc}
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801d588:	02a4      	lsls	r4, r4, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801d58a:	ab04      	add	r3, sp, #16
 801d58c:	9300      	str	r3, [sp, #0]
 801d58e:	f044 5300 	orr.w	r3, r4, #536870912	@ 0x20000000
 801d592:	f043 0308 	orr.w	r3, r3, #8
 801d596:	4a0c      	ldr	r2, [pc, #48]	@ (801d5c8 <lfs_dir_open_+0x8c>)
 801d598:	4631      	mov	r1, r6
 801d59a:	4638      	mov	r0, r7
 801d59c:	f7fc fb68 	bl	8019c70 <lfs_dir_get>
        if (res < 0) {
 801d5a0:	1e04      	subs	r4, r0, #0
 801d5a2:	dae7      	bge.n	801d574 <lfs_dir_open_+0x38>
 801d5a4:	e7ed      	b.n	801d582 <lfs_dir_open_+0x46>
    dir->head[0] = dir->m.pair[0];
 801d5a6:	68ab      	ldr	r3, [r5, #8]
 801d5a8:	62eb      	str	r3, [r5, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 801d5aa:	68eb      	ldr	r3, [r5, #12]
 801d5ac:	632b      	str	r3, [r5, #48]	@ 0x30
    dir->id = 0;
 801d5ae:	2300      	movs	r3, #0
 801d5b0:	80ab      	strh	r3, [r5, #4]
    dir->pos = 0;
 801d5b2:	62ab      	str	r3, [r5, #40]	@ 0x28
    dir->type = LFS_TYPE_DIR;
 801d5b4:	2302      	movs	r3, #2
 801d5b6:	71ab      	strb	r3, [r5, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 801d5b8:	4629      	mov	r1, r5
 801d5ba:	4638      	mov	r0, r7
 801d5bc:	f7fc f858 	bl	8019670 <lfs_mlist_append>
    return 0;
 801d5c0:	e7df      	b.n	801d582 <lfs_dir_open_+0x46>
        return LFS_ERR_NOTDIR;
 801d5c2:	f06f 0413 	mvn.w	r4, #19
 801d5c6:	e7dc      	b.n	801d582 <lfs_dir_open_+0x46>
 801d5c8:	700ffc00 	.word	0x700ffc00

0801d5cc <lfs_rename_>:
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801d5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5d0:	b0ad      	sub	sp, #180	@ 0xb4
 801d5d2:	4604      	mov	r4, r0
 801d5d4:	9103      	str	r1, [sp, #12]
 801d5d6:	9202      	str	r2, [sp, #8]
    int err = lfs_fs_forceconsistency(lfs);
 801d5d8:	f7ff fa10 	bl	801c9fc <lfs_fs_forceconsistency>
    if (err) {
 801d5dc:	4606      	mov	r6, r0
 801d5de:	b118      	cbz	r0, 801d5e8 <lfs_rename_+0x1c>
}
 801d5e0:	4630      	mov	r0, r6
 801d5e2:	b02d      	add	sp, #180	@ 0xb4
 801d5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 801d5e8:	2300      	movs	r3, #0
 801d5ea:	aa03      	add	r2, sp, #12
 801d5ec:	a922      	add	r1, sp, #136	@ 0x88
 801d5ee:	4620      	mov	r0, r4
 801d5f0:	f7ff fe70 	bl	801d2d4 <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801d5f4:	2800      	cmp	r0, #0
 801d5f6:	f2c0 809e 	blt.w	801d736 <lfs_rename_+0x16a>
 801d5fa:	4680      	mov	r8, r0
    return (tag & 0x000ffc00) >> 10;
 801d5fc:	f3c0 2589 	ubfx	r5, r0, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801d600:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d604:	429d      	cmp	r5, r3
 801d606:	f000 8094 	beq.w	801d732 <lfs_rename_+0x166>
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 801d60a:	f10d 0366 	add.w	r3, sp, #102	@ 0x66
 801d60e:	aa02      	add	r2, sp, #8
 801d610:	a91a      	add	r1, sp, #104	@ 0x68
 801d612:	4620      	mov	r0, r4
 801d614:	f7ff fe5e 	bl	801d2d4 <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801d618:	f1b0 0900 	subs.w	r9, r0, #0
 801d61c:	f2c0 808d 	blt.w	801d73a <lfs_rename_+0x16e>
    return (tag & 0x000ffc00) >> 10;
 801d620:	f3c9 2289 	ubfx	r2, r9, #10, #10
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801d624:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d628:	429a      	cmp	r2, r3
 801d62a:	f000 8086 	beq.w	801d73a <lfs_rename_+0x16e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d62e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d630:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d632:	429a      	cmp	r2, r3
 801d634:	d008      	beq.n	801d648 <lfs_rename_+0x7c>
 801d636:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801d638:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801d63a:	4281      	cmp	r1, r0
 801d63c:	d004      	beq.n	801d648 <lfs_rename_+0x7c>
 801d63e:	4299      	cmp	r1, r3
 801d640:	d002      	beq.n	801d648 <lfs_rename_+0x7c>
 801d642:	4290      	cmp	r0, r2
 801d644:	d000      	beq.n	801d648 <lfs_rename_+0x7c>
 801d646:	2601      	movs	r6, #1
    prevdir.next = lfs->mlist;
 801d648:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801d64a:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (prevtag == LFS_ERR_NOENT) {
 801d64c:	f119 0f02 	cmn.w	r9, #2
 801d650:	f000 8085 	beq.w	801d75e <lfs_rename_+0x192>
    return (tag & 0x7ff00000) >> 20;
 801d654:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801d658:	ea4f 5318 	mov.w	r3, r8, lsr #20
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 801d65c:	ea83 5319 	eor.w	r3, r3, r9, lsr #20
 801d660:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d664:	2b00      	cmp	r3, #0
 801d666:	f040 808a 	bne.w	801d77e <lfs_rename_+0x1b2>
    } else if (samepair && newid == newoldid) {
 801d66a:	b91e      	cbnz	r6, 801d674 <lfs_rename_+0xa8>
 801d66c:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801d670:	42ab      	cmp	r3, r5
 801d672:	d0b5      	beq.n	801d5e0 <lfs_rename_+0x14>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801d674:	2a02      	cmp	r2, #2
 801d676:	f000 808a 	beq.w	801d78e <lfs_rename_+0x1c2>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801d67a:	46aa      	mov	sl, r5
    if (!samepair) {
 801d67c:	b126      	cbz	r6, 801d688 <lfs_rename_+0xbc>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 801d67e:	aa22      	add	r2, sp, #136	@ 0x88
 801d680:	4651      	mov	r1, sl
 801d682:	4620      	mov	r0, r4
 801d684:	f7fc f8a6 	bl	80197d4 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801d688:	f119 0f02 	cmn.w	r9, #2
 801d68c:	f000 80b4 	beq.w	801d7f8 <lfs_rename_+0x22c>
 801d690:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801d694:	029b      	lsls	r3, r3, #10
 801d696:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801d69a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801d69e:	9305      	str	r3, [sp, #20]
 801d6a0:	2200      	movs	r2, #0
 801d6a2:	9206      	str	r2, [sp, #24]
 801d6a4:	f8bd 7066 	ldrh.w	r7, [sp, #102]	@ 0x66
 801d6a8:	02bf      	lsls	r7, r7, #10
 801d6aa:	f047 4380 	orr.w	r3, r7, #1073741824	@ 0x40000000
 801d6ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d6b2:	9307      	str	r3, [sp, #28]
 801d6b4:	9208      	str	r2, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801d6b6:	f3c8 580a 	ubfx	r8, r8, #20, #11
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801d6ba:	ea47 5808 	orr.w	r8, r7, r8, lsl #20
 801d6be:	f8dd b008 	ldr.w	fp, [sp, #8]
 801d6c2:	4658      	mov	r0, fp
 801d6c4:	f7f2 fdec 	bl	80102a0 <strlen>
 801d6c8:	ea48 0000 	orr.w	r0, r8, r0
 801d6cc:	9009      	str	r0, [sp, #36]	@ 0x24
 801d6ce:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801d6d2:	432f      	orrs	r7, r5
 801d6d4:	f047 5780 	orr.w	r7, r7, #268435456	@ 0x10000000
 801d6d8:	f447 1780 	orr.w	r7, r7, #1048576	@ 0x100000
 801d6dc:	970b      	str	r7, [sp, #44]	@ 0x2c
 801d6de:	ab22      	add	r3, sp, #136	@ 0x88
 801d6e0:	930c      	str	r3, [sp, #48]	@ 0x30
 801d6e2:	2e00      	cmp	r6, #0
 801d6e4:	f040 808a 	bne.w	801d7fc <lfs_rename_+0x230>
 801d6e8:	ea4f 2a8a 	mov.w	sl, sl, lsl #10
 801d6ec:	f04a 439f 	orr.w	r3, sl, #1333788672	@ 0x4f800000
 801d6f0:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801d6f4:	930d      	str	r3, [sp, #52]	@ 0x34
 801d6f6:	2300      	movs	r3, #0
 801d6f8:	930e      	str	r3, [sp, #56]	@ 0x38
 801d6fa:	2305      	movs	r3, #5
 801d6fc:	aa05      	add	r2, sp, #20
 801d6fe:	a91a      	add	r1, sp, #104	@ 0x68
 801d700:	4620      	mov	r0, r4
 801d702:	f7ff f8d3 	bl	801c8ac <lfs_dir_commit>
    if (err) {
 801d706:	4607      	mov	r7, r0
 801d708:	2800      	cmp	r0, #0
 801d70a:	d179      	bne.n	801d800 <lfs_rename_+0x234>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801d70c:	b126      	cbz	r6, 801d718 <lfs_rename_+0x14c>
    return lfs_tag_type1(a->tag);
 801d70e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801d710:	0d1b      	lsrs	r3, r3, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801d712:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801d716:	d177      	bne.n	801d808 <lfs_rename_+0x23c>
    lfs->mlist = prevdir.next;
 801d718:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d71a:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 801d71c:	f119 0f02 	cmn.w	r9, #2
 801d720:	f000 80a9 	beq.w	801d876 <lfs_rename_+0x2aa>
    return (tag & 0x7ff00000) >> 20;
 801d724:	f3c9 500a 	ubfx	r0, r9, #20, #11
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801d728:	2802      	cmp	r0, #2
 801d72a:	f000 8088 	beq.w	801d83e <lfs_rename_+0x272>
    return 0;
 801d72e:	463e      	mov	r6, r7
 801d730:	e756      	b.n	801d5e0 <lfs_rename_+0x14>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 801d732:	f06f 0015 	mvn.w	r0, #21
 801d736:	4606      	mov	r6, r0
 801d738:	e752      	b.n	801d5e0 <lfs_rename_+0x14>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801d73a:	f119 0f02 	cmn.w	r9, #2
 801d73e:	d106      	bne.n	801d74e <lfs_rename_+0x182>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 801d740:	f8bd 2066 	ldrh.w	r2, [sp, #102]	@ 0x66
 801d744:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d748:	429a      	cmp	r2, r3
 801d74a:	f47f af70 	bne.w	801d62e <lfs_rename_+0x62>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 801d74e:	f1b9 0f00 	cmp.w	r9, #0
 801d752:	db02      	blt.n	801d75a <lfs_rename_+0x18e>
 801d754:	f06f 0615 	mvn.w	r6, #21
 801d758:	e742      	b.n	801d5e0 <lfs_rename_+0x14>
 801d75a:	464e      	mov	r6, r9
 801d75c:	e740      	b.n	801d5e0 <lfs_rename_+0x14>
        lfs_size_t nlen = strlen(newpath);
 801d75e:	9802      	ldr	r0, [sp, #8]
 801d760:	f7f2 fd9e 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801d764:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801d766:	4283      	cmp	r3, r0
 801d768:	f0c0 8082 	bcc.w	801d870 <lfs_rename_+0x2a4>
        if (samepair && newid <= newoldid) {
 801d76c:	2e00      	cmp	r6, #0
 801d76e:	d141      	bne.n	801d7f4 <lfs_rename_+0x228>
 801d770:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801d774:	42ab      	cmp	r3, r5
 801d776:	d83b      	bhi.n	801d7f0 <lfs_rename_+0x224>
            newoldid += 1;
 801d778:	f105 0a01 	add.w	sl, r5, #1
 801d77c:	e77e      	b.n	801d67c <lfs_rename_+0xb0>
                : LFS_ERR_NOTDIR;
 801d77e:	2a02      	cmp	r2, #2
 801d780:	d002      	beq.n	801d788 <lfs_rename_+0x1bc>
 801d782:	f06f 0613 	mvn.w	r6, #19
 801d786:	e72b      	b.n	801d5e0 <lfs_rename_+0x14>
 801d788:	f06f 0614 	mvn.w	r6, #20
 801d78c:	e728      	b.n	801d5e0 <lfs_rename_+0x14>
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 801d78e:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801d792:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801d794:	aa05      	add	r2, sp, #20
 801d796:	9200      	str	r2, [sp, #0]
 801d798:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801d79c:	f043 0308 	orr.w	r3, r3, #8
 801d7a0:	4a36      	ldr	r2, [pc, #216]	@ (801d87c <lfs_rename_+0x2b0>)
 801d7a2:	a91a      	add	r1, sp, #104	@ 0x68
 801d7a4:	4620      	mov	r0, r4
 801d7a6:	f7fc fa63 	bl	8019c70 <lfs_dir_get>
        if (res < 0) {
 801d7aa:	2800      	cmp	r0, #0
 801d7ac:	db1a      	blt.n	801d7e4 <lfs_rename_+0x218>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 801d7ae:	aa05      	add	r2, sp, #20
 801d7b0:	a911      	add	r1, sp, #68	@ 0x44
 801d7b2:	4620      	mov	r0, r4
 801d7b4:	f7fd fa4a 	bl	801ac4c <lfs_dir_fetch>
        if (err) {
 801d7b8:	b9b0      	cbnz	r0, 801d7e8 <lfs_rename_+0x21c>
        if (prevdir.m.count > 0 || prevdir.m.split) {
 801d7ba:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d7bc:	f433 037f 	bics.w	r3, r3, #16711680	@ 0xff0000
 801d7c0:	d002      	beq.n	801d7c8 <lfs_rename_+0x1fc>
            return LFS_ERR_NOTEMPTY;
 801d7c2:	f06f 0626 	mvn.w	r6, #38	@ 0x26
 801d7c6:	e70b      	b.n	801d5e0 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, +1);
 801d7c8:	2101      	movs	r1, #1
 801d7ca:	4620      	mov	r0, r4
 801d7cc:	f7fc f852 	bl	8019874 <lfs_fs_preporphans>
        if (err) {
 801d7d0:	b960      	cbnz	r0, 801d7ec <lfs_rename_+0x220>
        prevdir.type = 0;
 801d7d2:	2300      	movs	r3, #0
 801d7d4:	f88d 3042 	strb.w	r3, [sp, #66]	@ 0x42
        prevdir.id = 0;
 801d7d8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
        lfs->mlist = &prevdir;
 801d7dc:	ab0f      	add	r3, sp, #60	@ 0x3c
 801d7de:	62a3      	str	r3, [r4, #40]	@ 0x28
    uint16_t newoldid = lfs_tag_id(oldtag);
 801d7e0:	46aa      	mov	sl, r5
 801d7e2:	e74b      	b.n	801d67c <lfs_rename_+0xb0>
            return (int)res;
 801d7e4:	4606      	mov	r6, r0
 801d7e6:	e6fb      	b.n	801d5e0 <lfs_rename_+0x14>
            return err;
 801d7e8:	4606      	mov	r6, r0
 801d7ea:	e6f9      	b.n	801d5e0 <lfs_rename_+0x14>
            return err;
 801d7ec:	4606      	mov	r6, r0
 801d7ee:	e6f7      	b.n	801d5e0 <lfs_rename_+0x14>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801d7f0:	46aa      	mov	sl, r5
 801d7f2:	e743      	b.n	801d67c <lfs_rename_+0xb0>
 801d7f4:	46aa      	mov	sl, r5
 801d7f6:	e742      	b.n	801d67e <lfs_rename_+0xb2>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801d7f8:	2300      	movs	r3, #0
 801d7fa:	e750      	b.n	801d69e <lfs_rename_+0xd2>
 801d7fc:	2300      	movs	r3, #0
 801d7fe:	e779      	b.n	801d6f4 <lfs_rename_+0x128>
        lfs->mlist = prevdir.next;
 801d800:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d802:	62a3      	str	r3, [r4, #40]	@ 0x28
        return err;
 801d804:	4606      	mov	r6, r0
 801d806:	e6eb      	b.n	801d5e0 <lfs_rename_+0x14>
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801d808:	2200      	movs	r2, #0
 801d80a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801d80e:	4620      	mov	r0, r4
 801d810:	f7fb ffe0 	bl	80197d4 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 801d814:	02ab      	lsls	r3, r5, #10
 801d816:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801d81a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801d81e:	932a      	str	r3, [sp, #168]	@ 0xa8
 801d820:	2300      	movs	r3, #0
 801d822:	932b      	str	r3, [sp, #172]	@ 0xac
 801d824:	2301      	movs	r3, #1
 801d826:	aa2a      	add	r2, sp, #168	@ 0xa8
 801d828:	a922      	add	r1, sp, #136	@ 0x88
 801d82a:	4620      	mov	r0, r4
 801d82c:	f7ff f83e 	bl	801c8ac <lfs_dir_commit>
        if (err) {
 801d830:	4606      	mov	r6, r0
 801d832:	2800      	cmp	r0, #0
 801d834:	f43f af70 	beq.w	801d718 <lfs_rename_+0x14c>
            lfs->mlist = prevdir.next;
 801d838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d83a:	62a3      	str	r3, [r4, #40]	@ 0x28
            return err;
 801d83c:	e6d0      	b.n	801d5e0 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, -1);
 801d83e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801d842:	4620      	mov	r0, r4
 801d844:	f7fc f816 	bl	8019874 <lfs_fs_preporphans>
        if (err) {
 801d848:	4606      	mov	r6, r0
 801d84a:	2800      	cmp	r0, #0
 801d84c:	f47f aec8 	bne.w	801d5e0 <lfs_rename_+0x14>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 801d850:	aa1a      	add	r2, sp, #104	@ 0x68
 801d852:	a911      	add	r1, sp, #68	@ 0x44
 801d854:	4620      	mov	r0, r4
 801d856:	f7fd ff1f 	bl	801b698 <lfs_fs_pred>
        if (err) {
 801d85a:	4606      	mov	r6, r0
 801d85c:	2800      	cmp	r0, #0
 801d85e:	f47f aebf 	bne.w	801d5e0 <lfs_rename_+0x14>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 801d862:	aa11      	add	r2, sp, #68	@ 0x44
 801d864:	a91a      	add	r1, sp, #104	@ 0x68
 801d866:	4620      	mov	r0, r4
 801d868:	f7ff f8dc 	bl	801ca24 <lfs_dir_drop>
 801d86c:	4606      	mov	r6, r0
        if (err) {
 801d86e:	e6b7      	b.n	801d5e0 <lfs_rename_+0x14>
            return LFS_ERR_NAMETOOLONG;
 801d870:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801d874:	e6b4      	b.n	801d5e0 <lfs_rename_+0x14>
    return 0;
 801d876:	463e      	mov	r6, r7
 801d878:	e6b2      	b.n	801d5e0 <lfs_rename_+0x14>
 801d87a:	bf00      	nop
 801d87c:	700ffc00 	.word	0x700ffc00

0801d880 <lfs_file_opencfg_>:
        const struct lfs_file_config *cfg) {
 801d880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d884:	b08b      	sub	sp, #44	@ 0x2c
 801d886:	4607      	mov	r7, r0
 801d888:	460c      	mov	r4, r1
 801d88a:	9203      	str	r2, [sp, #12]
 801d88c:	461d      	mov	r5, r3
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801d88e:	f013 0f02 	tst.w	r3, #2
 801d892:	d005      	beq.n	801d8a0 <lfs_file_opencfg_+0x20>
        int err = lfs_fs_forceconsistency(lfs);
 801d894:	f7ff f8b2 	bl	801c9fc <lfs_fs_forceconsistency>
        if (err) {
 801d898:	4606      	mov	r6, r0
 801d89a:	2800      	cmp	r0, #0
 801d89c:	f040 8109 	bne.w	801dab2 <lfs_file_opencfg_+0x232>
    file->cfg = cfg;
 801d8a0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d8a2:	6523      	str	r3, [r4, #80]	@ 0x50
    file->flags = flags;
 801d8a4:	6325      	str	r5, [r4, #48]	@ 0x30
    file->pos = 0;
 801d8a6:	2300      	movs	r3, #0
 801d8a8:	6363      	str	r3, [r4, #52]	@ 0x34
    file->off = 0;
 801d8aa:	63e3      	str	r3, [r4, #60]	@ 0x3c
    file->cache.buffer = NULL;
 801d8ac:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 801d8ae:	f104 0808 	add.w	r8, r4, #8
 801d8b2:	1d23      	adds	r3, r4, #4
 801d8b4:	aa03      	add	r2, sp, #12
 801d8b6:	4641      	mov	r1, r8
 801d8b8:	4638      	mov	r0, r7
 801d8ba:	f7ff fd0b 	bl	801d2d4 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 801d8be:	1e06      	subs	r6, r0, #0
 801d8c0:	da09      	bge.n	801d8d6 <lfs_file_opencfg_+0x56>
 801d8c2:	f116 0f02 	cmn.w	r6, #2
 801d8c6:	f040 80ec 	bne.w	801daa2 <lfs_file_opencfg_+0x222>
 801d8ca:	88a2      	ldrh	r2, [r4, #4]
 801d8cc:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d8d0:	429a      	cmp	r2, r3
 801d8d2:	f000 80e6 	beq.w	801daa2 <lfs_file_opencfg_+0x222>
    file->type = LFS_TYPE_REG;
 801d8d6:	2301      	movs	r3, #1
 801d8d8:	71a3      	strb	r3, [r4, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 801d8da:	4621      	mov	r1, r4
 801d8dc:	4638      	mov	r0, r7
 801d8de:	f7fb fec7 	bl	8019670 <lfs_mlist_append>
    if (tag == LFS_ERR_NOENT) {
 801d8e2:	f116 0f02 	cmn.w	r6, #2
 801d8e6:	d019      	beq.n	801d91c <lfs_file_opencfg_+0x9c>
    } else if (flags & LFS_O_EXCL) {
 801d8e8:	f415 7f00 	tst.w	r5, #512	@ 0x200
 801d8ec:	f040 80d7 	bne.w	801da9e <lfs_file_opencfg_+0x21e>
    return (tag & 0x7ff00000) >> 20;
 801d8f0:	f3c6 560a 	ubfx	r6, r6, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 801d8f4:	2e01      	cmp	r6, #1
 801d8f6:	f040 80e0 	bne.w	801daba <lfs_file_opencfg_+0x23a>
    } else if (flags & LFS_O_TRUNC) {
 801d8fa:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 801d8fe:	d042      	beq.n	801d986 <lfs_file_opencfg_+0x106>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 801d900:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 801d904:	ea4f 2989 	mov.w	r9, r9, lsl #10
 801d908:	f049 5900 	orr.w	r9, r9, #536870912	@ 0x20000000
 801d90c:	f449 1980 	orr.w	r9, r9, #1048576	@ 0x100000
        file->flags |= LFS_F_DIRTY;
 801d910:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d916:	6323      	str	r3, [r4, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801d918:	2500      	movs	r5, #0
 801d91a:	e064      	b.n	801d9e6 <lfs_file_opencfg_+0x166>
        if (!(flags & LFS_O_CREAT)) {
 801d91c:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801d920:	f000 80bf 	beq.w	801daa2 <lfs_file_opencfg_+0x222>
        lfs_size_t nlen = strlen(path);
 801d924:	9d03      	ldr	r5, [sp, #12]
 801d926:	4628      	mov	r0, r5
 801d928:	f7f2 fcba 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801d92c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801d92e:	4283      	cmp	r3, r0
 801d930:	d202      	bcs.n	801d938 <lfs_file_opencfg_+0xb8>
            err = LFS_ERR_NAMETOOLONG;
 801d932:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801d936:	e0b4      	b.n	801daa2 <lfs_file_opencfg_+0x222>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801d938:	88a3      	ldrh	r3, [r4, #4]
 801d93a:	029b      	lsls	r3, r3, #10
 801d93c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801d940:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801d944:	9204      	str	r2, [sp, #16]
 801d946:	2200      	movs	r2, #0
 801d948:	9205      	str	r2, [sp, #20]
 801d94a:	4318      	orrs	r0, r3
 801d94c:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 801d950:	9006      	str	r0, [sp, #24]
 801d952:	9507      	str	r5, [sp, #28]
 801d954:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801d958:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d95c:	9308      	str	r3, [sp, #32]
 801d95e:	9209      	str	r2, [sp, #36]	@ 0x24
 801d960:	2303      	movs	r3, #3
 801d962:	aa04      	add	r2, sp, #16
 801d964:	4641      	mov	r1, r8
 801d966:	4638      	mov	r0, r7
 801d968:	f7fe ffa0 	bl	801c8ac <lfs_dir_commit>
 801d96c:	4606      	mov	r6, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801d96e:	f110 0f1c 	cmn.w	r0, #28
 801d972:	d005      	beq.n	801d980 <lfs_file_opencfg_+0x100>
        if (err) {
 801d974:	2800      	cmp	r0, #0
 801d976:	f040 8094 	bne.w	801daa2 <lfs_file_opencfg_+0x222>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 801d97a:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 801dad0 <lfs_file_opencfg_+0x250>
 801d97e:	e7cb      	b.n	801d918 <lfs_file_opencfg_+0x98>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801d980:	f06f 0623 	mvn.w	r6, #35	@ 0x23
            goto cleanup;
 801d984:	e08d      	b.n	801daa2 <lfs_file_opencfg_+0x222>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 801d986:	88a3      	ldrh	r3, [r4, #4]
 801d988:	029b      	lsls	r3, r3, #10
 801d98a:	f104 0228 	add.w	r2, r4, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801d98e:	9200      	str	r2, [sp, #0]
 801d990:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801d994:	f043 0308 	orr.w	r3, r3, #8
 801d998:	4a4b      	ldr	r2, [pc, #300]	@ (801dac8 <lfs_file_opencfg_+0x248>)
 801d99a:	4641      	mov	r1, r8
 801d99c:	4638      	mov	r0, r7
 801d99e:	f7fc f967 	bl	8019c70 <lfs_dir_get>
        if (tag < 0) {
 801d9a2:	f1b0 0900 	subs.w	r9, r0, #0
 801d9a6:	dab7      	bge.n	801d918 <lfs_file_opencfg_+0x98>
            err = tag;
 801d9a8:	464e      	mov	r6, r9
 801d9aa:	e07a      	b.n	801daa2 <lfs_file_opencfg_+0x222>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 801d9ac:	685b      	ldr	r3, [r3, #4]
 801d9ae:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801d9b2:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 801d9b6:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 801d9ba:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 801d9be:	88a3      	ldrh	r3, [r4, #4]
 801d9c0:	029b      	lsls	r3, r3, #10
 801d9c2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801d9c6:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801d9c8:	6849      	ldr	r1, [r1, #4]
 801d9ca:	9100      	str	r1, [sp, #0]
 801d9cc:	4313      	orrs	r3, r2
 801d9ce:	4a3f      	ldr	r2, [pc, #252]	@ (801dacc <lfs_file_opencfg_+0x24c>)
 801d9d0:	4641      	mov	r1, r8
 801d9d2:	4638      	mov	r0, r7
 801d9d4:	f7fc f94c 	bl	8019c70 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 801d9d8:	1e06      	subs	r6, r0, #0
 801d9da:	da0c      	bge.n	801d9f6 <lfs_file_opencfg_+0x176>
 801d9dc:	f116 0f02 	cmn.w	r6, #2
 801d9e0:	d009      	beq.n	801d9f6 <lfs_file_opencfg_+0x176>
 801d9e2:	e05e      	b.n	801daa2 <lfs_file_opencfg_+0x222>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801d9e4:	3501      	adds	r5, #1
 801d9e6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801d9e8:	689a      	ldr	r2, [r3, #8]
 801d9ea:	42aa      	cmp	r2, r5
 801d9ec:	d915      	bls.n	801da1a <lfs_file_opencfg_+0x19a>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 801d9ee:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801d9f0:	f012 0f01 	tst.w	r2, #1
 801d9f4:	d1da      	bne.n	801d9ac <lfs_file_opencfg_+0x12c>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801d9f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d9f8:	f013 0f02 	tst.w	r3, #2
 801d9fc:	d0f2      	beq.n	801d9e4 <lfs_file_opencfg_+0x164>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 801d9fe:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801da00:	6852      	ldr	r2, [r2, #4]
 801da02:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801da06:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801da0a:	6891      	ldr	r1, [r2, #8]
 801da0c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801da0e:	4291      	cmp	r1, r2
 801da10:	d856      	bhi.n	801dac0 <lfs_file_opencfg_+0x240>
            file->flags |= LFS_F_DIRTY;
 801da12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801da16:	6323      	str	r3, [r4, #48]	@ 0x30
 801da18:	e7e4      	b.n	801d9e4 <lfs_file_opencfg_+0x164>
    if (file->cfg->buffer) {
 801da1a:	681b      	ldr	r3, [r3, #0]
 801da1c:	b16b      	cbz	r3, 801da3a <lfs_file_opencfg_+0x1ba>
        file->cache.buffer = file->cfg->buffer;
 801da1e:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_cache_zero(lfs, &file->cache);
 801da20:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801da24:	4638      	mov	r0, r7
 801da26:	f7fb ff55 	bl	80198d4 <lfs_cache_zero>
    return (tag & 0x7ff00000) >> 20;
 801da2a:	f3c9 520a 	ubfx	r2, r9, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801da2e:	f240 2301 	movw	r3, #513	@ 0x201
 801da32:	429a      	cmp	r2, r3
 801da34:	d00b      	beq.n	801da4e <lfs_file_opencfg_+0x1ce>
    return 0;
 801da36:	2600      	movs	r6, #0
 801da38:	e03b      	b.n	801dab2 <lfs_file_opencfg_+0x232>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801da3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
    return malloc(size);
 801da3c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801da3e:	f7fb fb1b 	bl	8019078 <pvPortMalloc>
 801da42:	64e0      	str	r0, [r4, #76]	@ 0x4c
        if (!file->cache.buffer) {
 801da44:	2800      	cmp	r0, #0
 801da46:	d1eb      	bne.n	801da20 <lfs_file_opencfg_+0x1a0>
            err = LFS_ERR_NOMEM;
 801da48:	f06f 060b 	mvn.w	r6, #11
 801da4c:	e029      	b.n	801daa2 <lfs_file_opencfg_+0x222>
        file->ctz.head = LFS_BLOCK_INLINE;
 801da4e:	f06f 0101 	mvn.w	r1, #1
 801da52:	62a1      	str	r1, [r4, #40]	@ 0x28
    return tag & 0x000003ff;
 801da54:	f3c9 0209 	ubfx	r2, r9, #0, #10
        file->ctz.size = lfs_tag_size(tag);
 801da58:	62e2      	str	r2, [r4, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 801da5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801da5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801da60:	6323      	str	r3, [r4, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 801da62:	6421      	str	r1, [r4, #64]	@ 0x40
        file->cache.off = 0;
 801da64:	2300      	movs	r3, #0
 801da66:	6463      	str	r3, [r4, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 801da68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801da6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801da6c:	64a3      	str	r3, [r4, #72]	@ 0x48
        if (file->ctz.size > 0) {
 801da6e:	b90a      	cbnz	r2, 801da74 <lfs_file_opencfg_+0x1f4>
    return 0;
 801da70:	2600      	movs	r6, #0
 801da72:	e01e      	b.n	801dab2 <lfs_file_opencfg_+0x232>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 801da74:	88a1      	ldrh	r1, [r4, #4]
    return (a < b) ? a : b;
 801da76:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801da7a:	4293      	cmp	r3, r2
 801da7c:	bf28      	it	cs
 801da7e:	4613      	movcs	r3, r2
 801da80:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
                    file->cache.buffer);
 801da84:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801da86:	9200      	str	r2, [sp, #0]
 801da88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801da8c:	4a0e      	ldr	r2, [pc, #56]	@ (801dac8 <lfs_file_opencfg_+0x248>)
 801da8e:	4641      	mov	r1, r8
 801da90:	4638      	mov	r0, r7
 801da92:	f7fc f8ed 	bl	8019c70 <lfs_dir_get>
            if (res < 0) {
 801da96:	1e06      	subs	r6, r0, #0
 801da98:	db03      	blt.n	801daa2 <lfs_file_opencfg_+0x222>
    return 0;
 801da9a:	2600      	movs	r6, #0
 801da9c:	e009      	b.n	801dab2 <lfs_file_opencfg_+0x232>
        err = LFS_ERR_EXIST;
 801da9e:	f06f 0610 	mvn.w	r6, #16
    file->flags |= LFS_F_ERRED;
 801daa2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801daa4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801daa8:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs_file_close_(lfs, file);
 801daaa:	4621      	mov	r1, r4
 801daac:	4638      	mov	r0, r7
 801daae:	f7ff fbfd 	bl	801d2ac <lfs_file_close_>
}
 801dab2:	4630      	mov	r0, r6
 801dab4:	b00b      	add	sp, #44	@ 0x2c
 801dab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = LFS_ERR_ISDIR;
 801daba:	f06f 0614 	mvn.w	r6, #20
 801dabe:	e7f0      	b.n	801daa2 <lfs_file_opencfg_+0x222>
                err = LFS_ERR_NOSPC;
 801dac0:	f06f 061b 	mvn.w	r6, #27
 801dac4:	e7ed      	b.n	801daa2 <lfs_file_opencfg_+0x222>
 801dac6:	bf00      	nop
 801dac8:	700ffc00 	.word	0x700ffc00
 801dacc:	7ffffc00 	.word	0x7ffffc00
 801dad0:	20100000 	.word	0x20100000

0801dad4 <lfs_file_open_>:
        const char *path, int flags) {
 801dad4:	b510      	push	{r4, lr}
 801dad6:	b082      	sub	sp, #8
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 801dad8:	4c02      	ldr	r4, [pc, #8]	@ (801dae4 <lfs_file_open_+0x10>)
 801dada:	9400      	str	r4, [sp, #0]
 801dadc:	f7ff fed0 	bl	801d880 <lfs_file_opencfg_>
}
 801dae0:	b002      	add	sp, #8
 801dae2:	bd10      	pop	{r4, pc}
 801dae4:	08036230 	.word	0x08036230

0801dae8 <lfs_mkdir_>:
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 801dae8:	b530      	push	{r4, r5, lr}
 801daea:	b0ab      	sub	sp, #172	@ 0xac
 801daec:	4604      	mov	r4, r0
 801daee:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
 801daf0:	f7fe ff84 	bl	801c9fc <lfs_fs_forceconsistency>
    if (err) {
 801daf4:	4603      	mov	r3, r0
 801daf6:	b110      	cbz	r0, 801dafe <lfs_mkdir_+0x16>
}
 801daf8:	4618      	mov	r0, r3
 801dafa:	b02b      	add	sp, #172	@ 0xac
 801dafc:	bd30      	pop	{r4, r5, pc}
    cwd.next = lfs->mlist;
 801dafe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801db00:	931c      	str	r3, [sp, #112]	@ 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 801db02:	f10d 036e 	add.w	r3, sp, #110	@ 0x6e
 801db06:	aa01      	add	r2, sp, #4
 801db08:	a91e      	add	r1, sp, #120	@ 0x78
 801db0a:	4620      	mov	r0, r4
 801db0c:	f7ff fbe2 	bl	801d2d4 <lfs_dir_find>
 801db10:	4603      	mov	r3, r0
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 801db12:	f110 0f02 	cmn.w	r0, #2
 801db16:	d12f      	bne.n	801db78 <lfs_mkdir_+0x90>
 801db18:	f8bd 106e 	ldrh.w	r1, [sp, #110]	@ 0x6e
 801db1c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801db20:	4291      	cmp	r1, r2
 801db22:	d029      	beq.n	801db78 <lfs_mkdir_+0x90>
    lfs_size_t nlen = strlen(path);
 801db24:	9801      	ldr	r0, [sp, #4]
 801db26:	f7f2 fbbb 	bl	80102a0 <strlen>
 801db2a:	4605      	mov	r5, r0
    if (nlen > lfs->name_max) {
 801db2c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801db2e:	4283      	cmp	r3, r0
 801db30:	f0c0 8089 	bcc.w	801dc46 <lfs_mkdir_+0x15e>
    lfs_alloc_ckpoint(lfs);
 801db34:	4620      	mov	r0, r4
 801db36:	f7fb fdad 	bl	8019694 <lfs_alloc_ckpoint>
    err = lfs_dir_alloc(lfs, &dir);
 801db3a:	a913      	add	r1, sp, #76	@ 0x4c
 801db3c:	4620      	mov	r0, r4
 801db3e:	f7fd f9f3 	bl	801af28 <lfs_dir_alloc>
    if (err) {
 801db42:	4603      	mov	r3, r0
 801db44:	2800      	cmp	r0, #0
 801db46:	d1d7      	bne.n	801daf8 <lfs_mkdir_+0x10>
    lfs_mdir_t pred = cwd.m;
 801db48:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 801db4c:	f10d 0e78 	add.w	lr, sp, #120	@ 0x78
 801db50:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801db54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801db58:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801db5c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while (pred.split) {
 801db60:	f89d 3043 	ldrb.w	r3, [sp, #67]	@ 0x43
 801db64:	b16b      	cbz	r3, 801db82 <lfs_mkdir_+0x9a>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 801db66:	aa11      	add	r2, sp, #68	@ 0x44
 801db68:	a90b      	add	r1, sp, #44	@ 0x2c
 801db6a:	4620      	mov	r0, r4
 801db6c:	f7fd f86e 	bl	801ac4c <lfs_dir_fetch>
        if (err) {
 801db70:	4603      	mov	r3, r0
 801db72:	2800      	cmp	r0, #0
 801db74:	d0f4      	beq.n	801db60 <lfs_mkdir_+0x78>
 801db76:	e7bf      	b.n	801daf8 <lfs_mkdir_+0x10>
        return (err < 0) ? err : LFS_ERR_EXIST;
 801db78:	2b00      	cmp	r3, #0
 801db7a:	dbbd      	blt.n	801daf8 <lfs_mkdir_+0x10>
 801db7c:	f06f 0310 	mvn.w	r3, #16
 801db80:	e7ba      	b.n	801daf8 <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 801db82:	4b32      	ldr	r3, [pc, #200]	@ (801dc4c <lfs_mkdir_+0x164>)
 801db84:	9326      	str	r3, [sp, #152]	@ 0x98
 801db86:	ab11      	add	r3, sp, #68	@ 0x44
 801db88:	9327      	str	r3, [sp, #156]	@ 0x9c
 801db8a:	2301      	movs	r3, #1
 801db8c:	aa26      	add	r2, sp, #152	@ 0x98
 801db8e:	a913      	add	r1, sp, #76	@ 0x4c
 801db90:	4620      	mov	r0, r4
 801db92:	f7fe fe8b 	bl	801c8ac <lfs_dir_commit>
    if (err) {
 801db96:	4603      	mov	r3, r0
 801db98:	2800      	cmp	r0, #0
 801db9a:	d1ad      	bne.n	801daf8 <lfs_mkdir_+0x10>
    if (cwd.m.split) {
 801db9c:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801dba0:	bb33      	cbnz	r3, 801dbf0 <lfs_mkdir_+0x108>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801dba2:	f8bd 306e 	ldrh.w	r3, [sp, #110]	@ 0x6e
 801dba6:	029b      	lsls	r3, r3, #10
 801dba8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801dbac:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801dbb0:	9203      	str	r2, [sp, #12]
 801dbb2:	2200      	movs	r2, #0
 801dbb4:	9204      	str	r2, [sp, #16]
 801dbb6:	431d      	orrs	r5, r3
 801dbb8:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 801dbbc:	9505      	str	r5, [sp, #20]
 801dbbe:	9a01      	ldr	r2, [sp, #4]
 801dbc0:	9206      	str	r2, [sp, #24]
 801dbc2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801dbc6:	f043 0308 	orr.w	r3, r3, #8
 801dbca:	9307      	str	r3, [sp, #28]
 801dbcc:	ab13      	add	r3, sp, #76	@ 0x4c
 801dbce:	9308      	str	r3, [sp, #32]
 801dbd0:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	d134      	bne.n	801dc42 <lfs_mkdir_+0x15a>
 801dbd8:	4b1c      	ldr	r3, [pc, #112]	@ (801dc4c <lfs_mkdir_+0x164>)
 801dbda:	9309      	str	r3, [sp, #36]	@ 0x24
 801dbdc:	ab13      	add	r3, sp, #76	@ 0x4c
 801dbde:	930a      	str	r3, [sp, #40]	@ 0x28
 801dbe0:	2304      	movs	r3, #4
 801dbe2:	aa03      	add	r2, sp, #12
 801dbe4:	a91e      	add	r1, sp, #120	@ 0x78
 801dbe6:	4620      	mov	r0, r4
 801dbe8:	f7fe fe60 	bl	801c8ac <lfs_dir_commit>
 801dbec:	4603      	mov	r3, r0
    if (err) {
 801dbee:	e783      	b.n	801daf8 <lfs_mkdir_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801dbf0:	2101      	movs	r1, #1
 801dbf2:	4620      	mov	r0, r4
 801dbf4:	f7fb fe3e 	bl	8019874 <lfs_fs_preporphans>
        if (err) {
 801dbf8:	4603      	mov	r3, r0
 801dbfa:	2800      	cmp	r0, #0
 801dbfc:	f47f af7c 	bne.w	801daf8 <lfs_mkdir_+0x10>
        cwd.type = 0;
 801dc00:	2300      	movs	r3, #0
 801dc02:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
        cwd.id = 0;
 801dc06:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
        lfs->mlist = &cwd;
 801dc0a:	ab1c      	add	r3, sp, #112	@ 0x70
 801dc0c:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 801dc0e:	4b0f      	ldr	r3, [pc, #60]	@ (801dc4c <lfs_mkdir_+0x164>)
 801dc10:	9328      	str	r3, [sp, #160]	@ 0xa0
 801dc12:	ab13      	add	r3, sp, #76	@ 0x4c
 801dc14:	9329      	str	r3, [sp, #164]	@ 0xa4
 801dc16:	2301      	movs	r3, #1
 801dc18:	aa28      	add	r2, sp, #160	@ 0xa0
 801dc1a:	a90b      	add	r1, sp, #44	@ 0x2c
 801dc1c:	4620      	mov	r0, r4
 801dc1e:	f7fe fe45 	bl	801c8ac <lfs_dir_commit>
        if (err) {
 801dc22:	4603      	mov	r3, r0
 801dc24:	b110      	cbz	r0, 801dc2c <lfs_mkdir_+0x144>
            lfs->mlist = cwd.next;
 801dc26:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801dc28:	62a2      	str	r2, [r4, #40]	@ 0x28
            return err;
 801dc2a:	e765      	b.n	801daf8 <lfs_mkdir_+0x10>
        lfs->mlist = cwd.next;
 801dc2c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801dc2e:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 801dc30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801dc34:	4620      	mov	r0, r4
 801dc36:	f7fb fe1d 	bl	8019874 <lfs_fs_preporphans>
        if (err) {
 801dc3a:	4603      	mov	r3, r0
 801dc3c:	2800      	cmp	r0, #0
 801dc3e:	d0b0      	beq.n	801dba2 <lfs_mkdir_+0xba>
 801dc40:	e75a      	b.n	801daf8 <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801dc42:	2300      	movs	r3, #0
 801dc44:	e7c9      	b.n	801dbda <lfs_mkdir_+0xf2>
        return LFS_ERR_NAMETOOLONG;
 801dc46:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 801dc4a:	e755      	b.n	801daf8 <lfs_mkdir_+0x10>
 801dc4c:	600ffc08 	.word	0x600ffc08

0801dc50 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
 801dc50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc52:	b085      	sub	sp, #20
 801dc54:	461d      	mov	r5, r3
    if (id == 0x3ff) {
 801dc56:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801dc5a:	429a      	cmp	r2, r3
 801dc5c:	d02b      	beq.n	801dcb6 <lfs_dir_getinfo+0x66>
 801dc5e:	4604      	mov	r4, r0
 801dc60:	460e      	mov	r6, r1
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 801dc62:	0297      	lsls	r7, r2, #10
 801dc64:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801dc66:	3301      	adds	r3, #1
 801dc68:	f105 0108 	add.w	r1, r5, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 801dc6c:	9100      	str	r1, [sp, #0]
 801dc6e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 801dc72:	4a19      	ldr	r2, [pc, #100]	@ (801dcd8 <lfs_dir_getinfo+0x88>)
 801dc74:	4631      	mov	r1, r6
 801dc76:	f7fb fffb 	bl	8019c70 <lfs_dir_get>
    if (tag < 0) {
 801dc7a:	2800      	cmp	r0, #0
 801dc7c:	db21      	blt.n	801dcc2 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801dc7e:	f3c0 520a 	ubfx	r2, r0, #20, #11
    info->type = lfs_tag_type3(tag);
 801dc82:	702a      	strb	r2, [r5, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801dc84:	ab02      	add	r3, sp, #8
 801dc86:	9300      	str	r3, [sp, #0]
 801dc88:	f047 5300 	orr.w	r3, r7, #536870912	@ 0x20000000
 801dc8c:	f043 0308 	orr.w	r3, r3, #8
 801dc90:	4a12      	ldr	r2, [pc, #72]	@ (801dcdc <lfs_dir_getinfo+0x8c>)
 801dc92:	4631      	mov	r1, r6
 801dc94:	4620      	mov	r0, r4
 801dc96:	f7fb ffeb 	bl	8019c70 <lfs_dir_get>
    if (tag < 0) {
 801dc9a:	2800      	cmp	r0, #0
 801dc9c:	db11      	blt.n	801dcc2 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801dc9e:	f3c0 530a 	ubfx	r3, r0, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801dca2:	f240 2202 	movw	r2, #514	@ 0x202
 801dca6:	4293      	cmp	r3, r2
 801dca8:	d00d      	beq.n	801dcc6 <lfs_dir_getinfo+0x76>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801dcaa:	f240 2201 	movw	r2, #513	@ 0x201
 801dcae:	4293      	cmp	r3, r2
 801dcb0:	d00d      	beq.n	801dcce <lfs_dir_getinfo+0x7e>
    return 0;
 801dcb2:	2000      	movs	r0, #0
 801dcb4:	e005      	b.n	801dcc2 <lfs_dir_getinfo+0x72>
        strcpy(info->name, "/");
 801dcb6:	4b0a      	ldr	r3, [pc, #40]	@ (801dce0 <lfs_dir_getinfo+0x90>)
 801dcb8:	881b      	ldrh	r3, [r3, #0]
 801dcba:	812b      	strh	r3, [r5, #8]
        info->type = LFS_TYPE_DIR;
 801dcbc:	2302      	movs	r3, #2
 801dcbe:	702b      	strb	r3, [r5, #0]
        return 0;
 801dcc0:	2000      	movs	r0, #0
}
 801dcc2:	b005      	add	sp, #20
 801dcc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        info->size = ctz.size;
 801dcc6:	9b03      	ldr	r3, [sp, #12]
 801dcc8:	606b      	str	r3, [r5, #4]
    return 0;
 801dcca:	2000      	movs	r0, #0
 801dccc:	e7f9      	b.n	801dcc2 <lfs_dir_getinfo+0x72>
    return tag & 0x000003ff;
 801dcce:	f3c0 0009 	ubfx	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
 801dcd2:	6068      	str	r0, [r5, #4]
    return 0;
 801dcd4:	2000      	movs	r0, #0
 801dcd6:	e7f4      	b.n	801dcc2 <lfs_dir_getinfo+0x72>
 801dcd8:	780ffc00 	.word	0x780ffc00
 801dcdc:	700ffc00 	.word	0x700ffc00
 801dce0:	08036920 	.word	0x08036920

0801dce4 <lfs_stat_>:
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801dce4:	b530      	push	{r4, r5, lr}
 801dce6:	b08b      	sub	sp, #44	@ 0x2c
 801dce8:	4604      	mov	r4, r0
 801dcea:	9101      	str	r1, [sp, #4]
 801dcec:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801dcee:	2300      	movs	r3, #0
 801dcf0:	aa01      	add	r2, sp, #4
 801dcf2:	a902      	add	r1, sp, #8
 801dcf4:	f7ff faee 	bl	801d2d4 <lfs_dir_find>
    if (tag < 0) {
 801dcf8:	2800      	cmp	r0, #0
 801dcfa:	db06      	blt.n	801dd0a <lfs_stat_+0x26>
    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 801dcfc:	462b      	mov	r3, r5
 801dcfe:	f3c0 2289 	ubfx	r2, r0, #10, #10
 801dd02:	a902      	add	r1, sp, #8
 801dd04:	4620      	mov	r0, r4
 801dd06:	f7ff ffa3 	bl	801dc50 <lfs_dir_getinfo>
}
 801dd0a:	b00b      	add	sp, #44	@ 0x2c
 801dd0c:	bd30      	pop	{r4, r5, pc}
	...

0801dd10 <lfs_dir_read_>:
static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801dd10:	b570      	push	{r4, r5, r6, lr}
 801dd12:	4605      	mov	r5, r0
 801dd14:	460c      	mov	r4, r1
 801dd16:	4616      	mov	r6, r2
    memset(info, 0, sizeof(*info));
 801dd18:	f44f 7284 	mov.w	r2, #264	@ 0x108
 801dd1c:	2100      	movs	r1, #0
 801dd1e:	4630      	mov	r0, r6
 801dd20:	f00b feae 	bl	8029a80 <memset>
    if (dir->pos == 0) {
 801dd24:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801dd26:	b183      	cbz	r3, 801dd4a <lfs_dir_read_+0x3a>
    } else if (dir->pos == 1) {
 801dd28:	2b01      	cmp	r3, #1
 801dd2a:	d11f      	bne.n	801dd6c <lfs_dir_read_+0x5c>
        info->type = LFS_TYPE_DIR;
 801dd2c:	4633      	mov	r3, r6
 801dd2e:	2202      	movs	r2, #2
 801dd30:	f803 2b08 	strb.w	r2, [r3], #8
        strcpy(info->name, "..");
 801dd34:	4a22      	ldr	r2, [pc, #136]	@ (801ddc0 <lfs_dir_read_+0xb0>)
 801dd36:	8811      	ldrh	r1, [r2, #0]
 801dd38:	7892      	ldrb	r2, [r2, #2]
 801dd3a:	8131      	strh	r1, [r6, #8]
 801dd3c:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 801dd3e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801dd40:	3301      	adds	r3, #1
 801dd42:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801dd44:	f04f 0c01 	mov.w	ip, #1
 801dd48:	e034      	b.n	801ddb4 <lfs_dir_read_+0xa4>
        info->type = LFS_TYPE_DIR;
 801dd4a:	2302      	movs	r3, #2
 801dd4c:	7033      	strb	r3, [r6, #0]
        strcpy(info->name, ".");
 801dd4e:	4b1d      	ldr	r3, [pc, #116]	@ (801ddc4 <lfs_dir_read_+0xb4>)
 801dd50:	881b      	ldrh	r3, [r3, #0]
 801dd52:	8133      	strh	r3, [r6, #8]
        dir->pos += 1;
 801dd54:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801dd56:	3301      	adds	r3, #1
 801dd58:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801dd5a:	f04f 0c01 	mov.w	ip, #1
 801dd5e:	e029      	b.n	801ddb4 <lfs_dir_read_+0xa4>
        dir->id += 1;
 801dd60:	88a1      	ldrh	r1, [r4, #4]
 801dd62:	3101      	adds	r1, #1
 801dd64:	80a1      	strh	r1, [r4, #4]
        if (err != LFS_ERR_NOENT) {
 801dd66:	f11c 0f02 	cmn.w	ip, #2
 801dd6a:	d11e      	bne.n	801ddaa <lfs_dir_read_+0x9a>
        if (dir->id == dir->m.count) {
 801dd6c:	88a3      	ldrh	r3, [r4, #4]
 801dd6e:	8ba1      	ldrh	r1, [r4, #28]
 801dd70:	428b      	cmp	r3, r1
 801dd72:	d10c      	bne.n	801dd8e <lfs_dir_read_+0x7e>
            if (!dir->m.split) {
 801dd74:	7fe3      	ldrb	r3, [r4, #31]
 801dd76:	b1fb      	cbz	r3, 801ddb8 <lfs_dir_read_+0xa8>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 801dd78:	f104 0220 	add.w	r2, r4, #32
 801dd7c:	f104 0108 	add.w	r1, r4, #8
 801dd80:	4628      	mov	r0, r5
 801dd82:	f7fc ff63 	bl	801ac4c <lfs_dir_fetch>
            if (err) {
 801dd86:	4684      	mov	ip, r0
 801dd88:	b9a0      	cbnz	r0, 801ddb4 <lfs_dir_read_+0xa4>
            dir->id = 0;
 801dd8a:	2300      	movs	r3, #0
 801dd8c:	80a3      	strh	r3, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 801dd8e:	4633      	mov	r3, r6
 801dd90:	88a2      	ldrh	r2, [r4, #4]
 801dd92:	f104 0108 	add.w	r1, r4, #8
 801dd96:	4628      	mov	r0, r5
 801dd98:	f7ff ff5a 	bl	801dc50 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
 801dd9c:	4684      	mov	ip, r0
 801dd9e:	2800      	cmp	r0, #0
 801dda0:	d0de      	beq.n	801dd60 <lfs_dir_read_+0x50>
 801dda2:	f110 0f02 	cmn.w	r0, #2
 801dda6:	d0db      	beq.n	801dd60 <lfs_dir_read_+0x50>
 801dda8:	e004      	b.n	801ddb4 <lfs_dir_read_+0xa4>
    dir->pos += 1;
 801ddaa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801ddac:	3301      	adds	r3, #1
 801ddae:	62a3      	str	r3, [r4, #40]	@ 0x28
    return true;
 801ddb0:	f04f 0c01 	mov.w	ip, #1
}
 801ddb4:	4660      	mov	r0, ip
 801ddb6:	bd70      	pop	{r4, r5, r6, pc}
                return false;
 801ddb8:	f04f 0c00 	mov.w	ip, #0
 801ddbc:	e7fa      	b.n	801ddb4 <lfs_dir_read_+0xa4>
 801ddbe:	bf00      	nop
 801ddc0:	08036104 	.word	0x08036104
 801ddc4:	080330dc 	.word	0x080330dc

0801ddc8 <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 801ddc8:	b570      	push	{r4, r5, r6, lr}
 801ddca:	4605      	mov	r5, r0
 801ddcc:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801ddce:	694b      	ldr	r3, [r1, #20]
 801ddd0:	4608      	mov	r0, r1
 801ddd2:	4798      	blx	r3
    if (err) {
 801ddd4:	4606      	mov	r6, r0
 801ddd6:	b108      	cbz	r0, 801dddc <lfs_format+0x14>
    err = lfs_format_(lfs, cfg);

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801ddd8:	4630      	mov	r0, r6
 801ddda:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_format_(lfs, cfg);
 801dddc:	4621      	mov	r1, r4
 801ddde:	4628      	mov	r0, r5
 801dde0:	f7ff f860 	bl	801cea4 <lfs_format_>
 801dde4:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801dde6:	69a3      	ldr	r3, [r4, #24]
 801dde8:	4620      	mov	r0, r4
 801ddea:	4798      	blx	r3
    return err;
 801ddec:	e7f4      	b.n	801ddd8 <lfs_format+0x10>

0801ddee <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 801ddee:	b570      	push	{r4, r5, r6, lr}
 801ddf0:	4605      	mov	r5, r0
 801ddf2:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801ddf4:	694b      	ldr	r3, [r1, #20]
 801ddf6:	4608      	mov	r0, r1
 801ddf8:	4798      	blx	r3
    if (err) {
 801ddfa:	4606      	mov	r6, r0
 801ddfc:	b108      	cbz	r0, 801de02 <lfs_mount+0x14>
    err = lfs_mount_(lfs, cfg);

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801ddfe:	4630      	mov	r0, r6
 801de00:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mount_(lfs, cfg);
 801de02:	4621      	mov	r1, r4
 801de04:	4628      	mov	r0, r5
 801de06:	f7ff f8cb 	bl	801cfa0 <lfs_mount_>
 801de0a:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801de0c:	69a3      	ldr	r3, [r4, #24]
 801de0e:	4620      	mov	r0, r4
 801de10:	4798      	blx	r3
    return err;
 801de12:	e7f4      	b.n	801ddfe <lfs_mount+0x10>

0801de14 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 801de14:	b570      	push	{r4, r5, r6, lr}
 801de16:	4604      	mov	r4, r0
 801de18:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801de1a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801de1c:	6943      	ldr	r3, [r0, #20]
 801de1e:	4798      	blx	r3
    if (err) {
 801de20:	4606      	mov	r6, r0
 801de22:	b108      	cbz	r0, 801de28 <lfs_remove+0x14>
    err = lfs_remove_(lfs, path);

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801de24:	4630      	mov	r0, r6
 801de26:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_remove_(lfs, path);
 801de28:	4629      	mov	r1, r5
 801de2a:	4620      	mov	r0, r4
 801de2c:	f7ff fb0e 	bl	801d44c <lfs_remove_>
 801de30:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801de32:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801de34:	6983      	ldr	r3, [r0, #24]
 801de36:	4798      	blx	r3
    return err;
 801de38:	e7f4      	b.n	801de24 <lfs_remove+0x10>

0801de3a <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801de3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de3c:	4604      	mov	r4, r0
 801de3e:	460d      	mov	r5, r1
 801de40:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801de42:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801de44:	6943      	ldr	r3, [r0, #20]
 801de46:	4798      	blx	r3
    if (err) {
 801de48:	4607      	mov	r7, r0
 801de4a:	b108      	cbz	r0, 801de50 <lfs_rename+0x16>
    err = lfs_rename_(lfs, oldpath, newpath);

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801de4c:	4638      	mov	r0, r7
 801de4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_rename_(lfs, oldpath, newpath);
 801de50:	4632      	mov	r2, r6
 801de52:	4629      	mov	r1, r5
 801de54:	4620      	mov	r0, r4
 801de56:	f7ff fbb9 	bl	801d5cc <lfs_rename_>
 801de5a:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801de5c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801de5e:	6983      	ldr	r3, [r0, #24]
 801de60:	4798      	blx	r3
    return err;
 801de62:	e7f3      	b.n	801de4c <lfs_rename+0x12>

0801de64 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801de64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de66:	4604      	mov	r4, r0
 801de68:	460d      	mov	r5, r1
 801de6a:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801de6c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801de6e:	6943      	ldr	r3, [r0, #20]
 801de70:	4798      	blx	r3
    if (err) {
 801de72:	4607      	mov	r7, r0
 801de74:	b108      	cbz	r0, 801de7a <lfs_stat+0x16>
    err = lfs_stat_(lfs, path, info);

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801de76:	4638      	mov	r0, r7
 801de78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_stat_(lfs, path, info);
 801de7a:	4632      	mov	r2, r6
 801de7c:	4629      	mov	r1, r5
 801de7e:	4620      	mov	r0, r4
 801de80:	f7ff ff30 	bl	801dce4 <lfs_stat_>
 801de84:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801de86:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801de88:	6983      	ldr	r3, [r0, #24]
 801de8a:	4798      	blx	r3
    return err;
 801de8c:	e7f3      	b.n	801de76 <lfs_stat+0x12>
	...

0801de90 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 801de90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de94:	4604      	mov	r4, r0
 801de96:	460d      	mov	r5, r1
 801de98:	4616      	mov	r6, r2
 801de9a:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801de9c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801de9e:	6942      	ldr	r2, [r0, #20]
 801dea0:	4790      	blx	r2
    if (err) {
 801dea2:	4607      	mov	r7, r0
 801dea4:	b110      	cbz	r0, 801deac <lfs_file_open+0x1c>
    err = lfs_file_open_(lfs, file, path, flags);

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801dea6:	4638      	mov	r0, r7
 801dea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801deac:	4629      	mov	r1, r5
 801deae:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801deb0:	f7fb fbc7 	bl	8019642 <lfs_mlist_isopen>
 801deb4:	b950      	cbnz	r0, 801decc <lfs_file_open+0x3c>
    err = lfs_file_open_(lfs, file, path, flags);
 801deb6:	4643      	mov	r3, r8
 801deb8:	4632      	mov	r2, r6
 801deba:	4629      	mov	r1, r5
 801debc:	4620      	mov	r0, r4
 801debe:	f7ff fe09 	bl	801dad4 <lfs_file_open_>
 801dec2:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801dec4:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801dec6:	6983      	ldr	r3, [r0, #24]
 801dec8:	4798      	blx	r3
    return err;
 801deca:	e7ec      	b.n	801dea6 <lfs_file_open+0x16>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801decc:	4b03      	ldr	r3, [pc, #12]	@ (801dedc <lfs_file_open+0x4c>)
 801dece:	4a04      	ldr	r2, [pc, #16]	@ (801dee0 <lfs_file_open+0x50>)
 801ded0:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 801ded4:	4803      	ldr	r0, [pc, #12]	@ (801dee4 <lfs_file_open+0x54>)
 801ded6:	f009 f881 	bl	8026fdc <__assert_func>
 801deda:	bf00      	nop
 801dedc:	08036108 	.word	0x08036108
 801dee0:	0803623c 	.word	0x0803623c
 801dee4:	0803558c 	.word	0x0803558c

0801dee8 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 801dee8:	b570      	push	{r4, r5, r6, lr}
 801deea:	4604      	mov	r4, r0
 801deec:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801deee:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801def0:	6943      	ldr	r3, [r0, #20]
 801def2:	4798      	blx	r3
    if (err) {
 801def4:	4606      	mov	r6, r0
 801def6:	b108      	cbz	r0, 801defc <lfs_file_close+0x14>
    err = lfs_file_close_(lfs, file);

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801def8:	4630      	mov	r0, r6
 801defa:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801defc:	4629      	mov	r1, r5
 801defe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801df00:	f7fb fb9f 	bl	8019642 <lfs_mlist_isopen>
 801df04:	b140      	cbz	r0, 801df18 <lfs_file_close+0x30>
    err = lfs_file_close_(lfs, file);
 801df06:	4629      	mov	r1, r5
 801df08:	4620      	mov	r0, r4
 801df0a:	f7ff f9cf 	bl	801d2ac <lfs_file_close_>
 801df0e:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801df10:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801df12:	6983      	ldr	r3, [r0, #24]
 801df14:	4798      	blx	r3
    return err;
 801df16:	e7ef      	b.n	801def8 <lfs_file_close+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801df18:	4b03      	ldr	r3, [pc, #12]	@ (801df28 <lfs_file_close+0x40>)
 801df1a:	4a04      	ldr	r2, [pc, #16]	@ (801df2c <lfs_file_close+0x44>)
 801df1c:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 801df20:	4803      	ldr	r0, [pc, #12]	@ (801df30 <lfs_file_close+0x48>)
 801df22:	f009 f85b 	bl	8026fdc <__assert_func>
 801df26:	bf00      	nop
 801df28:	08036140 	.word	0x08036140
 801df2c:	08036220 	.word	0x08036220
 801df30:	0803558c 	.word	0x0803558c

0801df34 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 801df34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df38:	4604      	mov	r4, r0
 801df3a:	460d      	mov	r5, r1
 801df3c:	4616      	mov	r6, r2
 801df3e:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801df40:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801df42:	6942      	ldr	r2, [r0, #20]
 801df44:	4790      	blx	r2
    if (err) {
 801df46:	4607      	mov	r7, r0
 801df48:	b110      	cbz	r0, 801df50 <lfs_file_read+0x1c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801df4a:	4638      	mov	r0, r7
 801df4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801df50:	4629      	mov	r1, r5
 801df52:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801df54:	f7fb fb75 	bl	8019642 <lfs_mlist_isopen>
 801df58:	b150      	cbz	r0, 801df70 <lfs_file_read+0x3c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 801df5a:	4643      	mov	r3, r8
 801df5c:	4632      	mov	r2, r6
 801df5e:	4629      	mov	r1, r5
 801df60:	4620      	mov	r0, r4
 801df62:	f7fd fac1 	bl	801b4e8 <lfs_file_read_>
 801df66:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801df68:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801df6a:	6983      	ldr	r3, [r0, #24]
 801df6c:	4798      	blx	r3
    return res;
 801df6e:	e7ec      	b.n	801df4a <lfs_file_read+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801df70:	4b03      	ldr	r3, [pc, #12]	@ (801df80 <lfs_file_read+0x4c>)
 801df72:	4a04      	ldr	r2, [pc, #16]	@ (801df84 <lfs_file_read+0x50>)
 801df74:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 801df78:	4803      	ldr	r0, [pc, #12]	@ (801df88 <lfs_file_read+0x54>)
 801df7a:	f009 f82f 	bl	8026fdc <__assert_func>
 801df7e:	bf00      	nop
 801df80:	08036140 	.word	0x08036140
 801df84:	08036210 	.word	0x08036210
 801df88:	0803558c 	.word	0x0803558c

0801df8c <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 801df8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df90:	4604      	mov	r4, r0
 801df92:	460d      	mov	r5, r1
 801df94:	4616      	mov	r6, r2
 801df96:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801df98:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801df9a:	6942      	ldr	r2, [r0, #20]
 801df9c:	4790      	blx	r2
    if (err) {
 801df9e:	4607      	mov	r7, r0
 801dfa0:	b110      	cbz	r0, 801dfa8 <lfs_file_write+0x1c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801dfa2:	4638      	mov	r0, r7
 801dfa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801dfa8:	4629      	mov	r1, r5
 801dfaa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801dfac:	f7fb fb49 	bl	8019642 <lfs_mlist_isopen>
 801dfb0:	b150      	cbz	r0, 801dfc8 <lfs_file_write+0x3c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 801dfb2:	4643      	mov	r3, r8
 801dfb4:	4632      	mov	r2, r6
 801dfb6:	4629      	mov	r1, r5
 801dfb8:	4620      	mov	r0, r4
 801dfba:	f7fd fb05 	bl	801b5c8 <lfs_file_write_>
 801dfbe:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801dfc0:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801dfc2:	6983      	ldr	r3, [r0, #24]
 801dfc4:	4798      	blx	r3
    return res;
 801dfc6:	e7ec      	b.n	801dfa2 <lfs_file_write+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801dfc8:	4b03      	ldr	r3, [pc, #12]	@ (801dfd8 <lfs_file_write+0x4c>)
 801dfca:	4a04      	ldr	r2, [pc, #16]	@ (801dfdc <lfs_file_write+0x50>)
 801dfcc:	f641 0105 	movw	r1, #6149	@ 0x1805
 801dfd0:	4803      	ldr	r0, [pc, #12]	@ (801dfe0 <lfs_file_write+0x54>)
 801dfd2:	f009 f803 	bl	8026fdc <__assert_func>
 801dfd6:	bf00      	nop
 801dfd8:	08036140 	.word	0x08036140
 801dfdc:	080361f0 	.word	0x080361f0
 801dfe0:	0803558c 	.word	0x0803558c

0801dfe4 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 801dfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dfe8:	4604      	mov	r4, r0
 801dfea:	460d      	mov	r5, r1
 801dfec:	4616      	mov	r6, r2
 801dfee:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801dff0:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801dff2:	6942      	ldr	r2, [r0, #20]
 801dff4:	4790      	blx	r2
    if (err) {
 801dff6:	4607      	mov	r7, r0
 801dff8:	b110      	cbz	r0, 801e000 <lfs_file_seek+0x1c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801dffa:	4638      	mov	r0, r7
 801dffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801e000:	4629      	mov	r1, r5
 801e002:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801e004:	f7fb fb1d 	bl	8019642 <lfs_mlist_isopen>
 801e008:	b150      	cbz	r0, 801e020 <lfs_file_seek+0x3c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 801e00a:	4643      	mov	r3, r8
 801e00c:	4632      	mov	r2, r6
 801e00e:	4629      	mov	r1, r5
 801e010:	4620      	mov	r0, r4
 801e012:	f7fd fa8d 	bl	801b530 <lfs_file_seek_>
 801e016:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801e018:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801e01a:	6983      	ldr	r3, [r0, #24]
 801e01c:	4798      	blx	r3
    return res;
 801e01e:	e7ec      	b.n	801dffa <lfs_file_seek+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801e020:	4b03      	ldr	r3, [pc, #12]	@ (801e030 <lfs_file_seek+0x4c>)
 801e022:	4a04      	ldr	r2, [pc, #16]	@ (801e034 <lfs_file_seek+0x50>)
 801e024:	f641 0117 	movw	r1, #6167	@ 0x1817
 801e028:	4803      	ldr	r0, [pc, #12]	@ (801e038 <lfs_file_seek+0x54>)
 801e02a:	f008 ffd7 	bl	8026fdc <__assert_func>
 801e02e:	bf00      	nop
 801e030:	08036140 	.word	0x08036140
 801e034:	080361d0 	.word	0x080361d0
 801e038:	0803558c 	.word	0x0803558c

0801e03c <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 801e03c:	b570      	push	{r4, r5, r6, lr}
 801e03e:	4604      	mov	r4, r0
 801e040:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801e042:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801e044:	6943      	ldr	r3, [r0, #20]
 801e046:	4798      	blx	r3
    if (err) {
 801e048:	4606      	mov	r6, r0
 801e04a:	b108      	cbz	r0, 801e050 <lfs_file_tell+0x14>
    lfs_soff_t res = lfs_file_tell_(lfs, file);

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801e04c:	4630      	mov	r0, r6
 801e04e:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801e050:	4629      	mov	r1, r5
 801e052:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801e054:	f7fb faf5 	bl	8019642 <lfs_mlist_isopen>
 801e058:	b140      	cbz	r0, 801e06c <lfs_file_tell+0x30>
    lfs_soff_t res = lfs_file_tell_(lfs, file);
 801e05a:	4629      	mov	r1, r5
 801e05c:	4620      	mov	r0, r4
 801e05e:	f7fb fba4 	bl	80197aa <lfs_file_tell_>
 801e062:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801e064:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801e066:	6983      	ldr	r3, [r0, #24]
 801e068:	4798      	blx	r3
    return res;
 801e06a:	e7ef      	b.n	801e04c <lfs_file_tell+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801e06c:	4b03      	ldr	r3, [pc, #12]	@ (801e07c <lfs_file_tell+0x40>)
 801e06e:	4a04      	ldr	r2, [pc, #16]	@ (801e080 <lfs_file_tell+0x44>)
 801e070:	f641 0138 	movw	r1, #6200	@ 0x1838
 801e074:	4803      	ldr	r0, [pc, #12]	@ (801e084 <lfs_file_tell+0x48>)
 801e076:	f008 ffb1 	bl	8026fdc <__assert_func>
 801e07a:	bf00      	nop
 801e07c:	08036140 	.word	0x08036140
 801e080:	080361c0 	.word	0x080361c0
 801e084:	0803558c 	.word	0x0803558c

0801e088 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 801e088:	b570      	push	{r4, r5, r6, lr}
 801e08a:	4604      	mov	r4, r0
 801e08c:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801e08e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801e090:	6943      	ldr	r3, [r0, #20]
 801e092:	4798      	blx	r3
    if (err) {
 801e094:	4606      	mov	r6, r0
 801e096:	b108      	cbz	r0, 801e09c <lfs_mkdir+0x14>
    err = lfs_mkdir_(lfs, path);

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801e098:	4630      	mov	r0, r6
 801e09a:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mkdir_(lfs, path);
 801e09c:	4629      	mov	r1, r5
 801e09e:	4620      	mov	r0, r4
 801e0a0:	f7ff fd22 	bl	801dae8 <lfs_mkdir_>
 801e0a4:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801e0a6:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801e0a8:	6983      	ldr	r3, [r0, #24]
 801e0aa:	4798      	blx	r3
    return err;
 801e0ac:	e7f4      	b.n	801e098 <lfs_mkdir+0x10>
	...

0801e0b0 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801e0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0b2:	4604      	mov	r4, r0
 801e0b4:	460f      	mov	r7, r1
 801e0b6:	4615      	mov	r5, r2
    int err = LFS_LOCK(lfs->cfg);
 801e0b8:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801e0ba:	6943      	ldr	r3, [r0, #20]
 801e0bc:	4798      	blx	r3
    if (err) {
 801e0be:	4606      	mov	r6, r0
 801e0c0:	b108      	cbz	r0, 801e0c6 <lfs_dir_open+0x16>
    err = lfs_dir_open_(lfs, dir, path);

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801e0c2:	4630      	mov	r0, r6
 801e0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801e0c6:	4639      	mov	r1, r7
 801e0c8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801e0ca:	f7fb faba 	bl	8019642 <lfs_mlist_isopen>
 801e0ce:	b948      	cbnz	r0, 801e0e4 <lfs_dir_open+0x34>
    err = lfs_dir_open_(lfs, dir, path);
 801e0d0:	462a      	mov	r2, r5
 801e0d2:	4639      	mov	r1, r7
 801e0d4:	4620      	mov	r0, r4
 801e0d6:	f7ff fa31 	bl	801d53c <lfs_dir_open_>
 801e0da:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801e0dc:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801e0de:	6983      	ldr	r3, [r0, #24]
 801e0e0:	4798      	blx	r3
    return err;
 801e0e2:	e7ee      	b.n	801e0c2 <lfs_dir_open+0x12>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801e0e4:	4b03      	ldr	r3, [pc, #12]	@ (801e0f4 <lfs_dir_open+0x44>)
 801e0e6:	4a04      	ldr	r2, [pc, #16]	@ (801e0f8 <lfs_dir_open+0x48>)
 801e0e8:	f641 0174 	movw	r1, #6260	@ 0x1874
 801e0ec:	4803      	ldr	r0, [pc, #12]	@ (801e0fc <lfs_dir_open+0x4c>)
 801e0ee:	f008 ff75 	bl	8026fdc <__assert_func>
 801e0f2:	bf00      	nop
 801e0f4:	08036178 	.word	0x08036178
 801e0f8:	080361b0 	.word	0x080361b0
 801e0fc:	0803558c 	.word	0x0803558c

0801e100 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 801e100:	b570      	push	{r4, r5, r6, lr}
 801e102:	4604      	mov	r4, r0
 801e104:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801e106:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801e108:	6943      	ldr	r3, [r0, #20]
 801e10a:	4798      	blx	r3
    if (err) {
 801e10c:	4606      	mov	r6, r0
 801e10e:	b108      	cbz	r0, 801e114 <lfs_dir_close+0x14>
    err = lfs_dir_close_(lfs, dir);

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801e110:	4630      	mov	r0, r6
 801e112:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_dir_close_(lfs, dir);
 801e114:	4629      	mov	r1, r5
 801e116:	4620      	mov	r0, r4
 801e118:	f7fb fb42 	bl	80197a0 <lfs_dir_close_>
 801e11c:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801e11e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801e120:	6983      	ldr	r3, [r0, #24]
 801e122:	4798      	blx	r3
    return err;
 801e124:	e7f4      	b.n	801e110 <lfs_dir_close+0x10>

0801e126 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801e126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e128:	4604      	mov	r4, r0
 801e12a:	460d      	mov	r5, r1
 801e12c:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801e12e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801e130:	6943      	ldr	r3, [r0, #20]
 801e132:	4798      	blx	r3
    if (err) {
 801e134:	4607      	mov	r7, r0
 801e136:	b108      	cbz	r0, 801e13c <lfs_dir_read+0x16>
    err = lfs_dir_read_(lfs, dir, info);

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801e138:	4638      	mov	r0, r7
 801e13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_dir_read_(lfs, dir, info);
 801e13c:	4632      	mov	r2, r6
 801e13e:	4629      	mov	r1, r5
 801e140:	4620      	mov	r0, r4
 801e142:	f7ff fde5 	bl	801dd10 <lfs_dir_read_>
 801e146:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801e148:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801e14a:	6983      	ldr	r3, [r0, #24]
 801e14c:	4798      	blx	r3
    return err;
 801e14e:	e7f3      	b.n	801e138 <lfs_dir_read+0x12>

0801e150 <lfs_crc>:
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
 801e150:	f04f 0c00 	mov.w	ip, #0
 801e154:	4594      	cmp	ip, r2
 801e156:	d218      	bcs.n	801e18a <lfs_crc+0x3a>
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 801e158:	b530      	push	{r4, r5, lr}
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 801e15a:	f811 300c 	ldrb.w	r3, [r1, ip]
 801e15e:	ea83 0e00 	eor.w	lr, r3, r0
 801e162:	f00e 0e0f 	and.w	lr, lr, #15
 801e166:	4c09      	ldr	r4, [pc, #36]	@ (801e18c <lfs_crc+0x3c>)
 801e168:	f854 502e 	ldr.w	r5, [r4, lr, lsl #2]
 801e16c:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 801e170:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 801e174:	f003 030f 	and.w	r3, r3, #15
 801e178:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801e17c:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
 801e180:	f10c 0c01 	add.w	ip, ip, #1
 801e184:	4594      	cmp	ip, r2
 801e186:	d3e8      	bcc.n	801e15a <lfs_crc+0xa>
    }

    return crc;
}
 801e188:	bd30      	pop	{r4, r5, pc}
 801e18a:	4770      	bx	lr
 801e18c:	08036324 	.word	0x08036324

0801e190 <is_digit>:




static bool is_digit(int c) {
  return c >= '0' && c <= '9';
 801e190:	3830      	subs	r0, #48	@ 0x30
}
 801e192:	2809      	cmp	r0, #9
 801e194:	bf8c      	ite	hi
 801e196:	2000      	movhi	r0, #0
 801e198:	2001      	movls	r0, #1
 801e19a:	4770      	bx	lr

0801e19c <addexp>:

static int addexp(char *buf, int e, int sign) {
 801e19c:	4684      	mov	ip, r0
  int n = 0;
  buf[n++] = 'e';
 801e19e:	2365      	movs	r3, #101	@ 0x65
 801e1a0:	7003      	strb	r3, [r0, #0]
  buf[n++] = (char) sign;
 801e1a2:	7042      	strb	r2, [r0, #1]
  if (e > 400) return 0;
 801e1a4:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 801e1a8:	dc2c      	bgt.n	801e204 <addexp+0x68>
  if (e < 10) buf[n++] = '0';
 801e1aa:	2909      	cmp	r1, #9
 801e1ac:	dc03      	bgt.n	801e1b6 <addexp+0x1a>
 801e1ae:	2330      	movs	r3, #48	@ 0x30
 801e1b0:	7083      	strb	r3, [r0, #2]
 801e1b2:	2303      	movs	r3, #3
 801e1b4:	e000      	b.n	801e1b8 <addexp+0x1c>
  buf[n++] = (char) sign;
 801e1b6:	2302      	movs	r3, #2
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 801e1b8:	2963      	cmp	r1, #99	@ 0x63
 801e1ba:	dd0d      	ble.n	801e1d8 <addexp+0x3c>
 801e1bc:	4812      	ldr	r0, [pc, #72]	@ (801e208 <addexp+0x6c>)
 801e1be:	fb80 2001 	smull	r2, r0, r0, r1
 801e1c2:	17ca      	asrs	r2, r1, #31
 801e1c4:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 801e1c8:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 801e1cc:	f80c 0003 	strb.w	r0, [ip, r3]
 801e1d0:	2064      	movs	r0, #100	@ 0x64
 801e1d2:	fb00 1112 	mls	r1, r0, r2, r1
 801e1d6:	3301      	adds	r3, #1
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 801e1d8:	2909      	cmp	r1, #9
 801e1da:	dd0e      	ble.n	801e1fa <addexp+0x5e>
 801e1dc:	480b      	ldr	r0, [pc, #44]	@ (801e20c <addexp+0x70>)
 801e1de:	fb80 2001 	smull	r2, r0, r0, r1
 801e1e2:	17ca      	asrs	r2, r1, #31
 801e1e4:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 801e1e8:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 801e1ec:	f80c 0003 	strb.w	r0, [ip, r3]
 801e1f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801e1f4:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
 801e1f8:	3301      	adds	r3, #1
  buf[n++] = (char) (e + '0');
 801e1fa:	1c58      	adds	r0, r3, #1
 801e1fc:	3130      	adds	r1, #48	@ 0x30
 801e1fe:	f80c 1003 	strb.w	r1, [ip, r3]
  return n;
 801e202:	4770      	bx	lr
  if (e > 400) return 0;
 801e204:	2000      	movs	r0, #0
}
 801e206:	4770      	bx	lr
 801e208:	51eb851f 	.word	0x51eb851f
 801e20c:	66666667 	.word	0x66666667

0801e210 <xisinf>:

static int xisinf(double x) {
 801e210:	ec53 2b10 	vmov	r2, r3, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 801e214:	4611      	mov	r1, r2
 801e216:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e21a:	4a05      	ldr	r2, [pc, #20]	@ (801e230 <xisinf+0x20>)
 801e21c:	4293      	cmp	r3, r2
 801e21e:	d001      	beq.n	801e224 <xisinf+0x14>
 801e220:	2000      	movs	r0, #0
 801e222:	4770      	bx	lr
 801e224:	b109      	cbz	r1, 801e22a <xisinf+0x1a>
 801e226:	2000      	movs	r0, #0
 801e228:	4770      	bx	lr
 801e22a:	2001      	movs	r0, #1
         ((unsigned) ieee754.u == 0);
}
 801e22c:	4770      	bx	lr
 801e22e:	bf00      	nop
 801e230:	7ff00000 	.word	0x7ff00000

0801e234 <xisnan>:

static int xisnan(double x) {
 801e234:	ec51 0b10 	vmov	r0, r1, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 801e238:	4602      	mov	r2, r0
 801e23a:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 801e23e:	2a00      	cmp	r2, #0
 801e240:	bf18      	it	ne
 801e242:	3001      	addne	r0, #1
             ((unsigned) ieee754.u != 0) >
         0x7ff00000;
}
 801e244:	4b02      	ldr	r3, [pc, #8]	@ (801e250 <xisnan+0x1c>)
 801e246:	4298      	cmp	r0, r3
 801e248:	bf94      	ite	ls
 801e24a:	2000      	movls	r0, #0
 801e24c:	2001      	movhi	r0, #1
 801e24e:	4770      	bx	lr
 801e250:	7ff00000 	.word	0x7ff00000

0801e254 <mg_lld>:
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
  buf[n] = '\0';
  return mg_snprintf(dst, dstlen, "%s", buf);
}

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 801e254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e258:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801e25c:	f89d 101c 	ldrb.w	r1, [sp, #28]
  const char *letters = "0123456789abcdef";
  uint64_t v = (uint64_t) val;
 801e260:	4694      	mov	ip, r2
 801e262:	469e      	mov	lr, r3
  size_t s = 0, n, i;
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 801e264:	b15c      	cbz	r4, 801e27e <mg_lld+0x2a>
 801e266:	2b00      	cmp	r3, #0
 801e268:	db01      	blt.n	801e26e <mg_lld+0x1a>
  size_t s = 0, n, i;
 801e26a:	2500      	movs	r5, #0
 801e26c:	e008      	b.n	801e280 <mg_lld+0x2c>
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 801e26e:	242d      	movs	r4, #45	@ 0x2d
 801e270:	7004      	strb	r4, [r0, #0]
 801e272:	f1d2 0c00 	rsbs	ip, r2, #0
 801e276:	eb63 0e43 	sbc.w	lr, r3, r3, lsl #1
 801e27a:	2501      	movs	r5, #1
 801e27c:	e000      	b.n	801e280 <mg_lld+0x2c>
  size_t s = 0, n, i;
 801e27e:	2500      	movs	r5, #0
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 801e280:	b909      	cbnz	r1, 801e286 <mg_lld+0x32>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 801e282:	2400      	movs	r4, #0
 801e284:	e02f      	b.n	801e2e6 <mg_lld+0x92>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 801e286:	2400      	movs	r4, #0
 801e288:	ea5c 010e 	orrs.w	r1, ip, lr
 801e28c:	d05a      	beq.n	801e344 <mg_lld+0xf0>
 801e28e:	f00c 060f 	and.w	r6, ip, #15
 801e292:	1929      	adds	r1, r5, r4
 801e294:	4f38      	ldr	r7, [pc, #224]	@ (801e378 <mg_lld+0x124>)
 801e296:	5dbe      	ldrb	r6, [r7, r6]
 801e298:	5446      	strb	r6, [r0, r1]
 801e29a:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 801e29e:	ea4c 7c0e 	orr.w	ip, ip, lr, lsl #28
 801e2a2:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801e2a6:	3401      	adds	r4, #1
 801e2a8:	e7ee      	b.n	801e288 <mg_lld+0x34>
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 801e2aa:	2601      	movs	r6, #1
 801e2ac:	e022      	b.n	801e2f4 <mg_lld+0xa0>
 801e2ae:	4421      	add	r1, r4
 801e2b0:	4f32      	ldr	r7, [pc, #200]	@ (801e37c <mg_lld+0x128>)
 801e2b2:	fba7 4801 	umull	r4, r8, r7, r1
 801e2b6:	f028 0403 	bic.w	r4, r8, #3
 801e2ba:	eb04 0498 	add.w	r4, r4, r8, lsr #2
 801e2be:	1b09      	subs	r1, r1, r4
 801e2c0:	ebbc 0101 	subs.w	r1, ip, r1
 801e2c4:	f16e 0e00 	sbc.w	lr, lr, #0
 801e2c8:	f04f 34cc 	mov.w	r4, #3435973836	@ 0xcccccccc
 801e2cc:	fb01 f404 	mul.w	r4, r1, r4
 801e2d0:	fb07 440e 	mla	r4, r7, lr, r4
 801e2d4:	fba1 1707 	umull	r1, r7, r1, r7
 801e2d8:	443c      	add	r4, r7
 801e2da:	0849      	lsrs	r1, r1, #1
 801e2dc:	ea41 7cc4 	orr.w	ip, r1, r4, lsl #31
 801e2e0:	ea4f 0e54 	mov.w	lr, r4, lsr #1
 801e2e4:	4634      	mov	r4, r6
 801e2e6:	ea5c 010e 	orrs.w	r1, ip, lr
 801e2ea:	d02b      	beq.n	801e344 <mg_lld+0xf0>
 801e2ec:	2600      	movs	r6, #0
 801e2ee:	eb1c 010e 	adds.w	r1, ip, lr
 801e2f2:	d2da      	bcs.n	801e2aa <mg_lld+0x56>
 801e2f4:	4431      	add	r1, r6
 801e2f6:	4f21      	ldr	r7, [pc, #132]	@ (801e37c <mg_lld+0x128>)
 801e2f8:	fba7 6801 	umull	r6, r8, r7, r1
 801e2fc:	f028 0603 	bic.w	r6, r8, #3
 801e300:	eb06 0698 	add.w	r6, r6, r8, lsr #2
 801e304:	1b89      	subs	r1, r1, r6
 801e306:	ebbc 0101 	subs.w	r1, ip, r1
 801e30a:	f16e 0800 	sbc.w	r8, lr, #0
 801e30e:	f04f 36cc 	mov.w	r6, #3435973836	@ 0xcccccccc
 801e312:	fb01 f606 	mul.w	r6, r1, r6
 801e316:	fb07 6608 	mla	r6, r7, r8, r6
 801e31a:	fba1 1707 	umull	r1, r7, r1, r7
 801e31e:	443e      	add	r6, r7
 801e320:	0849      	lsrs	r1, r1, #1
 801e322:	ea41 71c6 	orr.w	r1, r1, r6, lsl #31
 801e326:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801e32a:	ebac 0141 	sub.w	r1, ip, r1, lsl #1
 801e32e:	1c66      	adds	r6, r4, #1
 801e330:	442c      	add	r4, r5
 801e332:	4f11      	ldr	r7, [pc, #68]	@ (801e378 <mg_lld+0x124>)
 801e334:	5c79      	ldrb	r1, [r7, r1]
 801e336:	5501      	strb	r1, [r0, r4]
 801e338:	2400      	movs	r4, #0
 801e33a:	eb1c 010e 	adds.w	r1, ip, lr
 801e33e:	d3b6      	bcc.n	801e2ae <mg_lld+0x5a>
 801e340:	2401      	movs	r4, #1
 801e342:	e7b4      	b.n	801e2ae <mg_lld+0x5a>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 801e344:	2600      	movs	r6, #0
 801e346:	e00c      	b.n	801e362 <mg_lld+0x10e>
    char t = buf[s + i];
 801e348:	19af      	adds	r7, r5, r6
 801e34a:	f810 c007 	ldrb.w	ip, [r0, r7]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 801e34e:	1929      	adds	r1, r5, r4
 801e350:	1b89      	subs	r1, r1, r6
 801e352:	3901      	subs	r1, #1
 801e354:	f810 e001 	ldrb.w	lr, [r0, r1]
 801e358:	f800 e007 	strb.w	lr, [r0, r7]
 801e35c:	f800 c001 	strb.w	ip, [r0, r1]
  for (i = 0; i < n / 2; i++) {
 801e360:	3601      	adds	r6, #1
 801e362:	ebb6 0f54 	cmp.w	r6, r4, lsr #1
 801e366:	d3ef      	bcc.n	801e348 <mg_lld+0xf4>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 801e368:	4313      	orrs	r3, r2
 801e36a:	d102      	bne.n	801e372 <mg_lld+0x11e>
 801e36c:	2330      	movs	r3, #48	@ 0x30
 801e36e:	5503      	strb	r3, [r0, r4]
 801e370:	3401      	adds	r4, #1
  return n + s;
}
 801e372:	1928      	adds	r0, r5, r4
 801e374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e378:	08036364 	.word	0x08036364
 801e37c:	cccccccd 	.word	0xcccccccd

0801e380 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 801e380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e384:	4680      	mov	r8, r0
 801e386:	460f      	mov	r7, r1
 801e388:	4616      	mov	r6, r2
 801e38a:	461d      	mov	r5, r3
  size_t i = 0;
 801e38c:	2400      	movs	r4, #0
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 801e38e:	e002      	b.n	801e396 <scpy+0x16>
 801e390:	3401      	adds	r4, #1
 801e392:	4639      	mov	r1, r7
 801e394:	47c0      	blx	r8
 801e396:	42ac      	cmp	r4, r5
 801e398:	d202      	bcs.n	801e3a0 <scpy+0x20>
 801e39a:	5d30      	ldrb	r0, [r6, r4]
 801e39c:	2800      	cmp	r0, #0
 801e39e:	d1f7      	bne.n	801e390 <scpy+0x10>
  return i;
}
 801e3a0:	4620      	mov	r0, r4
 801e3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e3a6 <p_stat>:
#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
  (void) path, (void) size, (void) mtime;
  return 0;
}
 801e3a6:	2000      	movs	r0, #0
 801e3a8:	4770      	bx	lr

0801e3aa <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
  (void) path, (void) fn, (void) userdata;
}
 801e3aa:	4770      	bx	lr

0801e3ac <p_open>:
static void *p_open(const char *path, int flags) {
  (void) path, (void) flags;
  return NULL;
}
 801e3ac:	2000      	movs	r0, #0
 801e3ae:	4770      	bx	lr

0801e3b0 <p_close>:
static void p_close(void *fp) {
  (void) fp;
}
 801e3b0:	4770      	bx	lr

0801e3b2 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 801e3b2:	2000      	movs	r0, #0
 801e3b4:	4770      	bx	lr

0801e3b6 <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 801e3b6:	2000      	movs	r0, #0
 801e3b8:	4770      	bx	lr

0801e3ba <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
  (void) fd, (void) offset;
  return (size_t) ~0;
}
 801e3ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e3be:	4770      	bx	lr

0801e3c0 <p_rename>:
static bool p_rename(const char *from, const char *to) {
  (void) from, (void) to;
  return false;
}
 801e3c0:	2000      	movs	r0, #0
 801e3c2:	4770      	bx	lr

0801e3c4 <p_remove>:
static bool p_remove(const char *path) {
  (void) path;
  return false;
}
 801e3c4:	2000      	movs	r0, #0
 801e3c6:	4770      	bx	lr

0801e3c8 <p_mkdir>:
static bool p_mkdir(const char *path) {
  (void) path;
  return false;
}
 801e3c8:	2000      	movs	r0, #0
 801e3ca:	4770      	bx	lr

0801e3cc <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 801e3cc:	b530      	push	{r4, r5, lr}
 801e3ce:	4686      	mov	lr, r0
  int diff = 0;
  if (len > 0) do {
 801e3d0:	4614      	mov	r4, r2
 801e3d2:	b94a      	cbnz	r2, 801e3e8 <mg_ncasecmp+0x1c>
  int diff = 0;
 801e3d4:	2000      	movs	r0, #0
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
      diff = c - d;
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
  return diff;
}
 801e3d6:	bd30      	pop	{r4, r5, pc}
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 801e3d8:	f10c 0020 	add.w	r0, ip, #32
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 801e3dc:	1a18      	subs	r0, r3, r0
 801e3de:	d1fa      	bne.n	801e3d6 <mg_ncasecmp+0xa>
 801e3e0:	2a00      	cmp	r2, #0
 801e3e2:	d0f8      	beq.n	801e3d6 <mg_ncasecmp+0xa>
 801e3e4:	3c01      	subs	r4, #1
 801e3e6:	d0f6      	beq.n	801e3d6 <mg_ncasecmp+0xa>
      int c = *s1++, d = *s2++;
 801e3e8:	f89e 2000 	ldrb.w	r2, [lr]
 801e3ec:	f10e 0e01 	add.w	lr, lr, #1
 801e3f0:	4613      	mov	r3, r2
 801e3f2:	f891 c000 	ldrb.w	ip, [r1]
 801e3f6:	3101      	adds	r1, #1
 801e3f8:	4660      	mov	r0, ip
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 801e3fa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801e3fe:	2d19      	cmp	r5, #25
 801e400:	d801      	bhi.n	801e406 <mg_ncasecmp+0x3a>
 801e402:	f102 0320 	add.w	r3, r2, #32
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 801e406:	f1ac 0541 	sub.w	r5, ip, #65	@ 0x41
 801e40a:	2d19      	cmp	r5, #25
 801e40c:	d8e6      	bhi.n	801e3dc <mg_ncasecmp+0x10>
 801e40e:	e7e3      	b.n	801e3d8 <mg_ncasecmp+0xc>

0801e410 <isx>:
  }
  return len;
}

static bool isx(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801e410:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801e414:	2b09      	cmp	r3, #9
 801e416:	d908      	bls.n	801e42a <isx+0x1a>
 801e418:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801e41c:	2b05      	cmp	r3, #5
 801e41e:	d906      	bls.n	801e42e <isx+0x1e>
         (c >= 'A' && c <= 'F');
 801e420:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801e422:	2805      	cmp	r0, #5
 801e424:	d805      	bhi.n	801e432 <isx+0x22>
 801e426:	2001      	movs	r0, #1
 801e428:	4770      	bx	lr
 801e42a:	2001      	movs	r0, #1
 801e42c:	4770      	bx	lr
 801e42e:	2001      	movs	r0, #1
 801e430:	4770      	bx	lr
 801e432:	2000      	movs	r0, #0
}
 801e434:	4770      	bx	lr

0801e436 <isok>:
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
  return i >= src_len && j < dst_len ? (int) j : -1;
}

static bool isok(uint8_t c) {
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 801e436:	280a      	cmp	r0, #10
 801e438:	d007      	beq.n	801e44a <isok+0x14>
 801e43a:	280d      	cmp	r0, #13
 801e43c:	d007      	beq.n	801e44e <isok+0x18>
 801e43e:	2809      	cmp	r0, #9
 801e440:	d007      	beq.n	801e452 <isok+0x1c>
 801e442:	281f      	cmp	r0, #31
 801e444:	d907      	bls.n	801e456 <isok+0x20>
 801e446:	2001      	movs	r0, #1
 801e448:	4770      	bx	lr
 801e44a:	2001      	movs	r0, #1
 801e44c:	4770      	bx	lr
 801e44e:	2001      	movs	r0, #1
 801e450:	4770      	bx	lr
 801e452:	2001      	movs	r0, #1
 801e454:	4770      	bx	lr
 801e456:	2000      	movs	r0, #0
}
 801e458:	4770      	bx	lr

0801e45a <vcb>:
  return NULL;
}

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
  return (c & 0xc0) == 0x80;
 801e45a:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
}
 801e45e:	2880      	cmp	r0, #128	@ 0x80
 801e460:	bf14      	ite	ne
 801e462:	2000      	movne	r0, #0
 801e464:	2001      	moveq	r0, #1
 801e466:	4770      	bx	lr

0801e468 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 801e468:	b570      	push	{r4, r5, r6, lr}
  const unsigned char *u = (unsigned char *) s, c = *u;
 801e46a:	7805      	ldrb	r5, [r0, #0]
  long n = (long) (end - s);
 801e46c:	1a0e      	subs	r6, r1, r0
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 801e46e:	f1a5 0321 	sub.w	r3, r5, #33	@ 0x21
 801e472:	b2db      	uxtb	r3, r3
 801e474:	2b5c      	cmp	r3, #92	@ 0x5c
 801e476:	d936      	bls.n	801e4e6 <clen+0x7e>
 801e478:	4604      	mov	r4, r0
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 801e47a:	f005 03e0 	and.w	r3, r5, #224	@ 0xe0
 801e47e:	2bc0      	cmp	r3, #192	@ 0xc0
 801e480:	d009      	beq.n	801e496 <clen+0x2e>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 801e482:	f005 03f0 	and.w	r3, r5, #240	@ 0xf0
 801e486:	2be0      	cmp	r3, #224	@ 0xe0
 801e488:	d00e      	beq.n	801e4a8 <clen+0x40>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 801e48a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801e48e:	2df0      	cmp	r5, #240	@ 0xf0
 801e490:	d018      	beq.n	801e4c4 <clen+0x5c>
    return 4;
  return 0;
 801e492:	2000      	movs	r0, #0
}
 801e494:	bd70      	pop	{r4, r5, r6, pc}
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 801e496:	2e01      	cmp	r6, #1
 801e498:	ddf3      	ble.n	801e482 <clen+0x1a>
 801e49a:	7840      	ldrb	r0, [r0, #1]
 801e49c:	f7ff ffdd 	bl	801e45a <vcb>
 801e4a0:	2800      	cmp	r0, #0
 801e4a2:	d0ee      	beq.n	801e482 <clen+0x1a>
 801e4a4:	2002      	movs	r0, #2
 801e4a6:	e7f5      	b.n	801e494 <clen+0x2c>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 801e4a8:	2e02      	cmp	r6, #2
 801e4aa:	ddee      	ble.n	801e48a <clen+0x22>
 801e4ac:	7860      	ldrb	r0, [r4, #1]
 801e4ae:	f7ff ffd4 	bl	801e45a <vcb>
 801e4b2:	2800      	cmp	r0, #0
 801e4b4:	d0e9      	beq.n	801e48a <clen+0x22>
 801e4b6:	78a0      	ldrb	r0, [r4, #2]
 801e4b8:	f7ff ffcf 	bl	801e45a <vcb>
 801e4bc:	2800      	cmp	r0, #0
 801e4be:	d0e4      	beq.n	801e48a <clen+0x22>
 801e4c0:	2003      	movs	r0, #3
 801e4c2:	e7e7      	b.n	801e494 <clen+0x2c>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 801e4c4:	2e03      	cmp	r6, #3
 801e4c6:	dd10      	ble.n	801e4ea <clen+0x82>
 801e4c8:	7860      	ldrb	r0, [r4, #1]
 801e4ca:	f7ff ffc6 	bl	801e45a <vcb>
 801e4ce:	b170      	cbz	r0, 801e4ee <clen+0x86>
 801e4d0:	78a0      	ldrb	r0, [r4, #2]
 801e4d2:	f7ff ffc2 	bl	801e45a <vcb>
 801e4d6:	b160      	cbz	r0, 801e4f2 <clen+0x8a>
 801e4d8:	78e0      	ldrb	r0, [r4, #3]
 801e4da:	f7ff ffbe 	bl	801e45a <vcb>
 801e4de:	2800      	cmp	r0, #0
 801e4e0:	d0d8      	beq.n	801e494 <clen+0x2c>
    return 4;
 801e4e2:	2004      	movs	r0, #4
 801e4e4:	e7d6      	b.n	801e494 <clen+0x2c>
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 801e4e6:	2001      	movs	r0, #1
 801e4e8:	e7d4      	b.n	801e494 <clen+0x2c>
  return 0;
 801e4ea:	2000      	movs	r0, #0
 801e4ec:	e7d2      	b.n	801e494 <clen+0x2c>
 801e4ee:	2000      	movs	r0, #0
 801e4f0:	e7d0      	b.n	801e494 <clen+0x2c>
 801e4f2:	2000      	movs	r0, #0
 801e4f4:	e7ce      	b.n	801e494 <clen+0x2c>

0801e4f6 <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
  v->buf = (char *) s;
 801e4f6:	6010      	str	r0, [r2, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 801e4f8:	e003      	b.n	801e502 <skiptorn+0xc>
 801e4fa:	3001      	adds	r0, #1
 801e4fc:	6853      	ldr	r3, [r2, #4]
 801e4fe:	3301      	adds	r3, #1
 801e500:	6053      	str	r3, [r2, #4]
 801e502:	4288      	cmp	r0, r1
 801e504:	d204      	bcs.n	801e510 <skiptorn+0x1a>
 801e506:	7803      	ldrb	r3, [r0, #0]
 801e508:	2b0a      	cmp	r3, #10
 801e50a:	d001      	beq.n	801e510 <skiptorn+0x1a>
 801e50c:	2b0d      	cmp	r3, #13
 801e50e:	d1f4      	bne.n	801e4fa <skiptorn+0x4>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801e510:	4288      	cmp	r0, r1
 801e512:	d212      	bcs.n	801e53a <skiptorn+0x44>
 801e514:	7803      	ldrb	r3, [r0, #0]
 801e516:	2b0d      	cmp	r3, #13
 801e518:	d008      	beq.n	801e52c <skiptorn+0x36>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 801e51a:	2b0d      	cmp	r3, #13
 801e51c:	d00b      	beq.n	801e536 <skiptorn+0x40>
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 801e51e:	4288      	cmp	r0, r1
 801e520:	d20d      	bcs.n	801e53e <skiptorn+0x48>
 801e522:	f810 3b01 	ldrb.w	r3, [r0], #1
 801e526:	2b0a      	cmp	r3, #10
 801e528:	d10b      	bne.n	801e542 <skiptorn+0x4c>
  return s;
}
 801e52a:	4770      	bx	lr
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801e52c:	7842      	ldrb	r2, [r0, #1]
 801e52e:	2a0a      	cmp	r2, #10
 801e530:	d0f3      	beq.n	801e51a <skiptorn+0x24>
 801e532:	2000      	movs	r0, #0
 801e534:	4770      	bx	lr
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 801e536:	3001      	adds	r0, #1
 801e538:	e7f1      	b.n	801e51e <skiptorn+0x28>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801e53a:	2000      	movs	r0, #0
 801e53c:	4770      	bx	lr
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 801e53e:	2000      	movs	r0, #0
 801e540:	4770      	bx	lr
 801e542:	2000      	movs	r0, #0
 801e544:	e7f1      	b.n	801e52a <skiptorn+0x34>

0801e546 <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 801e546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e54a:	b084      	sub	sp, #16
 801e54c:	4604      	mov	r4, r0
 801e54e:	460d      	mov	r5, r1
 801e550:	4690      	mov	r8, r2
 801e552:	461f      	mov	r7, r3
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 801e554:	2600      	movs	r6, #0
 801e556:	e04d      	b.n	801e5f4 <mg_http_parse_headers+0xae>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
    if (s >= end) return false;
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 801e558:	7863      	ldrb	r3, [r4, #1]
 801e55a:	2b0a      	cmp	r3, #10
 801e55c:	d158      	bne.n	801e610 <mg_http_parse_headers+0xca>
      v.len--;  // Trim spaces
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
  }
  return true;
 801e55e:	2001      	movs	r0, #1
 801e560:	e01e      	b.n	801e5a0 <mg_http_parse_headers+0x5a>
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 801e562:	4414      	add	r4, r2
 801e564:	9b01      	ldr	r3, [sp, #4]
 801e566:	4413      	add	r3, r2
 801e568:	9301      	str	r3, [sp, #4]
 801e56a:	42ac      	cmp	r4, r5
 801e56c:	d209      	bcs.n	801e582 <mg_http_parse_headers+0x3c>
 801e56e:	7823      	ldrb	r3, [r4, #0]
 801e570:	2b3a      	cmp	r3, #58	@ 0x3a
 801e572:	d006      	beq.n	801e582 <mg_http_parse_headers+0x3c>
 801e574:	4629      	mov	r1, r5
 801e576:	4620      	mov	r0, r4
 801e578:	f7ff ff76 	bl	801e468 <clen>
 801e57c:	4602      	mov	r2, r0
 801e57e:	2800      	cmp	r0, #0
 801e580:	d1ef      	bne.n	801e562 <mg_http_parse_headers+0x1c>
    if (k.len == 0) return false;                     // Empty name
 801e582:	9b01      	ldr	r3, [sp, #4]
 801e584:	b15b      	cbz	r3, 801e59e <mg_http_parse_headers+0x58>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 801e586:	42ac      	cmp	r4, r5
 801e588:	d209      	bcs.n	801e59e <mg_http_parse_headers+0x58>
 801e58a:	4629      	mov	r1, r5
 801e58c:	4620      	mov	r0, r4
 801e58e:	f7ff ff6b 	bl	801e468 <clen>
 801e592:	b120      	cbz	r0, 801e59e <mg_http_parse_headers+0x58>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 801e594:	4620      	mov	r0, r4
 801e596:	f810 3b01 	ldrb.w	r3, [r0], #1
 801e59a:	2b3a      	cmp	r3, #58	@ 0x3a
 801e59c:	d004      	beq.n	801e5a8 <mg_http_parse_headers+0x62>
    if (s >= end) return false;
 801e59e:	2000      	movs	r0, #0
}
 801e5a0:	b004      	add	sp, #16
 801e5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 801e5a6:	3001      	adds	r0, #1
 801e5a8:	42a8      	cmp	r0, r5
 801e5aa:	d204      	bcs.n	801e5b6 <mg_http_parse_headers+0x70>
 801e5ac:	7803      	ldrb	r3, [r0, #0]
 801e5ae:	2b20      	cmp	r3, #32
 801e5b0:	d0f9      	beq.n	801e5a6 <mg_http_parse_headers+0x60>
 801e5b2:	2b09      	cmp	r3, #9
 801e5b4:	d0f7      	beq.n	801e5a6 <mg_http_parse_headers+0x60>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 801e5b6:	aa02      	add	r2, sp, #8
 801e5b8:	4629      	mov	r1, r5
 801e5ba:	f7ff ff9c 	bl	801e4f6 <skiptorn>
 801e5be:	4604      	mov	r4, r0
 801e5c0:	b908      	cbnz	r0, 801e5c6 <mg_http_parse_headers+0x80>
 801e5c2:	e7ec      	b.n	801e59e <mg_http_parse_headers+0x58>
      v.len--;  // Trim spaces
 801e5c4:	9003      	str	r0, [sp, #12]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 801e5c6:	9803      	ldr	r0, [sp, #12]
 801e5c8:	b130      	cbz	r0, 801e5d8 <mg_http_parse_headers+0x92>
 801e5ca:	3801      	subs	r0, #1
 801e5cc:	9b02      	ldr	r3, [sp, #8]
 801e5ce:	5c1b      	ldrb	r3, [r3, r0]
 801e5d0:	2b20      	cmp	r3, #32
 801e5d2:	d0f7      	beq.n	801e5c4 <mg_http_parse_headers+0x7e>
 801e5d4:	2b09      	cmp	r3, #9
 801e5d6:	d0f5      	beq.n	801e5c4 <mg_http_parse_headers+0x7e>
    h[i].name = k, h[i].value = v;  // Success. Assign values
 801e5d8:	eb08 1306 	add.w	r3, r8, r6, lsl #4
 801e5dc:	466a      	mov	r2, sp
 801e5de:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e5e2:	e883 0003 	stmia.w	r3, {r0, r1}
 801e5e6:	3308      	adds	r3, #8
 801e5e8:	aa04      	add	r2, sp, #16
 801e5ea:	e912 0003 	ldmdb	r2, {r0, r1}
 801e5ee:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 801e5f2:	3601      	adds	r6, #1
 801e5f4:	42be      	cmp	r6, r7
 801e5f6:	d20d      	bcs.n	801e614 <mg_http_parse_headers+0xce>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 801e5f8:	2300      	movs	r3, #0
 801e5fa:	9300      	str	r3, [sp, #0]
 801e5fc:	9301      	str	r3, [sp, #4]
 801e5fe:	9302      	str	r3, [sp, #8]
 801e600:	9303      	str	r3, [sp, #12]
    if (s >= end) return false;
 801e602:	42ac      	cmp	r4, r5
 801e604:	d2cb      	bcs.n	801e59e <mg_http_parse_headers+0x58>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 801e606:	7823      	ldrb	r3, [r4, #0]
 801e608:	2b0a      	cmp	r3, #10
 801e60a:	d0a8      	beq.n	801e55e <mg_http_parse_headers+0x18>
 801e60c:	2b0d      	cmp	r3, #13
 801e60e:	d0a3      	beq.n	801e558 <mg_http_parse_headers+0x12>
    k.buf = (char *) s;
 801e610:	9400      	str	r4, [sp, #0]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 801e612:	e7aa      	b.n	801e56a <mg_http_parse_headers+0x24>
  return true;
 801e614:	2001      	movs	r0, #1
 801e616:	e7c3      	b.n	801e5a0 <mg_http_parse_headers+0x5a>

0801e618 <mg_http_status_code_str>:
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
  switch (status_code) {
 801e618:	3864      	subs	r0, #100	@ 0x64
 801e61a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 801e61e:	4298      	cmp	r0, r3
 801e620:	f200 8272 	bhi.w	801eb08 <mg_http_status_code_str+0x4f0>
 801e624:	e8df f010 	tbh	[pc, r0, lsl #1]
 801e628:	027201f4 	.word	0x027201f4
 801e62c:	027001f6 	.word	0x027001f6
 801e630:	02700270 	.word	0x02700270
 801e634:	02700270 	.word	0x02700270
 801e638:	02700270 	.word	0x02700270
 801e63c:	02700270 	.word	0x02700270
 801e640:	02700270 	.word	0x02700270
 801e644:	02700270 	.word	0x02700270
 801e648:	02700270 	.word	0x02700270
 801e64c:	02700270 	.word	0x02700270
 801e650:	02700270 	.word	0x02700270
 801e654:	02700270 	.word	0x02700270
 801e658:	02700270 	.word	0x02700270
 801e65c:	02700270 	.word	0x02700270
 801e660:	02700270 	.word	0x02700270
 801e664:	02700270 	.word	0x02700270
 801e668:	02700270 	.word	0x02700270
 801e66c:	02700270 	.word	0x02700270
 801e670:	02700270 	.word	0x02700270
 801e674:	02700270 	.word	0x02700270
 801e678:	02700270 	.word	0x02700270
 801e67c:	02700270 	.word	0x02700270
 801e680:	02700270 	.word	0x02700270
 801e684:	02700270 	.word	0x02700270
 801e688:	02700270 	.word	0x02700270
 801e68c:	02700270 	.word	0x02700270
 801e690:	02700270 	.word	0x02700270
 801e694:	02700270 	.word	0x02700270
 801e698:	02700270 	.word	0x02700270
 801e69c:	02700270 	.word	0x02700270
 801e6a0:	02700270 	.word	0x02700270
 801e6a4:	02700270 	.word	0x02700270
 801e6a8:	02700270 	.word	0x02700270
 801e6ac:	02700270 	.word	0x02700270
 801e6b0:	02700270 	.word	0x02700270
 801e6b4:	02700270 	.word	0x02700270
 801e6b8:	02700270 	.word	0x02700270
 801e6bc:	02700270 	.word	0x02700270
 801e6c0:	02700270 	.word	0x02700270
 801e6c4:	02700270 	.word	0x02700270
 801e6c8:	02700270 	.word	0x02700270
 801e6cc:	02700270 	.word	0x02700270
 801e6d0:	02700270 	.word	0x02700270
 801e6d4:	02700270 	.word	0x02700270
 801e6d8:	02700270 	.word	0x02700270
 801e6dc:	02700270 	.word	0x02700270
 801e6e0:	02700270 	.word	0x02700270
 801e6e4:	02700270 	.word	0x02700270
 801e6e8:	02700270 	.word	0x02700270
 801e6ec:	02700270 	.word	0x02700270
 801e6f0:	01fa01f8 	.word	0x01fa01f8
 801e6f4:	01fe01fc 	.word	0x01fe01fc
 801e6f8:	02020200 	.word	0x02020200
 801e6fc:	02060204 	.word	0x02060204
 801e700:	02700208 	.word	0x02700208
 801e704:	02700270 	.word	0x02700270
 801e708:	02700270 	.word	0x02700270
 801e70c:	02700270 	.word	0x02700270
 801e710:	02700270 	.word	0x02700270
 801e714:	02700270 	.word	0x02700270
 801e718:	02700270 	.word	0x02700270
 801e71c:	02700270 	.word	0x02700270
 801e720:	02700270 	.word	0x02700270
 801e724:	0270020a 	.word	0x0270020a
 801e728:	02700270 	.word	0x02700270
 801e72c:	02700270 	.word	0x02700270
 801e730:	02700270 	.word	0x02700270
 801e734:	02700270 	.word	0x02700270
 801e738:	02700270 	.word	0x02700270
 801e73c:	02700270 	.word	0x02700270
 801e740:	02700270 	.word	0x02700270
 801e744:	02700270 	.word	0x02700270
 801e748:	02700270 	.word	0x02700270
 801e74c:	02700270 	.word	0x02700270
 801e750:	02700270 	.word	0x02700270
 801e754:	02700270 	.word	0x02700270
 801e758:	02700270 	.word	0x02700270
 801e75c:	02700270 	.word	0x02700270
 801e760:	02700270 	.word	0x02700270
 801e764:	02700270 	.word	0x02700270
 801e768:	02700270 	.word	0x02700270
 801e76c:	02700270 	.word	0x02700270
 801e770:	02700270 	.word	0x02700270
 801e774:	02700270 	.word	0x02700270
 801e778:	02700270 	.word	0x02700270
 801e77c:	02700270 	.word	0x02700270
 801e780:	02700270 	.word	0x02700270
 801e784:	02700270 	.word	0x02700270
 801e788:	02700270 	.word	0x02700270
 801e78c:	02700270 	.word	0x02700270
 801e790:	02700270 	.word	0x02700270
 801e794:	02700270 	.word	0x02700270
 801e798:	02700270 	.word	0x02700270
 801e79c:	02700270 	.word	0x02700270
 801e7a0:	02700270 	.word	0x02700270
 801e7a4:	02700270 	.word	0x02700270
 801e7a8:	02700270 	.word	0x02700270
 801e7ac:	02700270 	.word	0x02700270
 801e7b0:	02700270 	.word	0x02700270
 801e7b4:	02700270 	.word	0x02700270
 801e7b8:	020e020c 	.word	0x020e020c
 801e7bc:	02120210 	.word	0x02120210
 801e7c0:	02160214 	.word	0x02160214
 801e7c4:	02180270 	.word	0x02180270
 801e7c8:	0270021a 	.word	0x0270021a
 801e7cc:	02700270 	.word	0x02700270
 801e7d0:	02700270 	.word	0x02700270
 801e7d4:	02700270 	.word	0x02700270
 801e7d8:	02700270 	.word	0x02700270
 801e7dc:	02700270 	.word	0x02700270
 801e7e0:	02700270 	.word	0x02700270
 801e7e4:	02700270 	.word	0x02700270
 801e7e8:	02700270 	.word	0x02700270
 801e7ec:	02700270 	.word	0x02700270
 801e7f0:	02700270 	.word	0x02700270
 801e7f4:	02700270 	.word	0x02700270
 801e7f8:	02700270 	.word	0x02700270
 801e7fc:	02700270 	.word	0x02700270
 801e800:	02700270 	.word	0x02700270
 801e804:	02700270 	.word	0x02700270
 801e808:	02700270 	.word	0x02700270
 801e80c:	02700270 	.word	0x02700270
 801e810:	02700270 	.word	0x02700270
 801e814:	02700270 	.word	0x02700270
 801e818:	02700270 	.word	0x02700270
 801e81c:	02700270 	.word	0x02700270
 801e820:	02700270 	.word	0x02700270
 801e824:	02700270 	.word	0x02700270
 801e828:	02700270 	.word	0x02700270
 801e82c:	02700270 	.word	0x02700270
 801e830:	02700270 	.word	0x02700270
 801e834:	02700270 	.word	0x02700270
 801e838:	02700270 	.word	0x02700270
 801e83c:	02700270 	.word	0x02700270
 801e840:	02700270 	.word	0x02700270
 801e844:	02700270 	.word	0x02700270
 801e848:	02700270 	.word	0x02700270
 801e84c:	02700270 	.word	0x02700270
 801e850:	02700270 	.word	0x02700270
 801e854:	02700270 	.word	0x02700270
 801e858:	02700270 	.word	0x02700270
 801e85c:	02700270 	.word	0x02700270
 801e860:	02700270 	.word	0x02700270
 801e864:	02700270 	.word	0x02700270
 801e868:	02700270 	.word	0x02700270
 801e86c:	02700270 	.word	0x02700270
 801e870:	02700270 	.word	0x02700270
 801e874:	02700270 	.word	0x02700270
 801e878:	02700270 	.word	0x02700270
 801e87c:	02700270 	.word	0x02700270
 801e880:	021e021c 	.word	0x021e021c
 801e884:	02220220 	.word	0x02220220
 801e888:	02260224 	.word	0x02260224
 801e88c:	022a0228 	.word	0x022a0228
 801e890:	022e022c 	.word	0x022e022c
 801e894:	02320230 	.word	0x02320230
 801e898:	02360234 	.word	0x02360234
 801e89c:	023a0238 	.word	0x023a0238
 801e8a0:	023e023c 	.word	0x023e023c
 801e8a4:	02700240 	.word	0x02700240
 801e8a8:	02420270 	.word	0x02420270
 801e8ac:	02460244 	.word	0x02460244
 801e8b0:	02700248 	.word	0x02700248
 801e8b4:	0270024a 	.word	0x0270024a
 801e8b8:	024e024c 	.word	0x024e024c
 801e8bc:	02500270 	.word	0x02500270
 801e8c0:	02700270 	.word	0x02700270
 801e8c4:	02700270 	.word	0x02700270
 801e8c8:	02700270 	.word	0x02700270
 801e8cc:	02700270 	.word	0x02700270
 801e8d0:	02700270 	.word	0x02700270
 801e8d4:	02700270 	.word	0x02700270
 801e8d8:	02700252 	.word	0x02700252
 801e8dc:	02700270 	.word	0x02700270
 801e8e0:	02700270 	.word	0x02700270
 801e8e4:	02540270 	.word	0x02540270
 801e8e8:	02700270 	.word	0x02700270
 801e8ec:	02700270 	.word	0x02700270
 801e8f0:	02700270 	.word	0x02700270
 801e8f4:	02700270 	.word	0x02700270
 801e8f8:	02700270 	.word	0x02700270
 801e8fc:	02700270 	.word	0x02700270
 801e900:	02700270 	.word	0x02700270
 801e904:	02700270 	.word	0x02700270
 801e908:	02700270 	.word	0x02700270
 801e90c:	02700270 	.word	0x02700270
 801e910:	02700270 	.word	0x02700270
 801e914:	02700270 	.word	0x02700270
 801e918:	02700270 	.word	0x02700270
 801e91c:	02700270 	.word	0x02700270
 801e920:	02700270 	.word	0x02700270
 801e924:	02700270 	.word	0x02700270
 801e928:	02700270 	.word	0x02700270
 801e92c:	02700270 	.word	0x02700270
 801e930:	02700270 	.word	0x02700270
 801e934:	02700270 	.word	0x02700270
 801e938:	02700270 	.word	0x02700270
 801e93c:	02700270 	.word	0x02700270
 801e940:	02700270 	.word	0x02700270
 801e944:	02560270 	.word	0x02560270
 801e948:	025a0258 	.word	0x025a0258
 801e94c:	025e025c 	.word	0x025e025c
 801e950:	02620260 	.word	0x02620260
 801e954:	02660264 	.word	0x02660264
 801e958:	02700268 	.word	0x02700268
 801e95c:	026c026a 	.word	0x026c026a
 801e960:	02700270 	.word	0x02700270
 801e964:	02700270 	.word	0x02700270
 801e968:	02700270 	.word	0x02700270
 801e96c:	02700270 	.word	0x02700270
 801e970:	02700270 	.word	0x02700270
 801e974:	02700270 	.word	0x02700270
 801e978:	02700270 	.word	0x02700270
 801e97c:	02700270 	.word	0x02700270
 801e980:	02700270 	.word	0x02700270
 801e984:	02700270 	.word	0x02700270
 801e988:	02700270 	.word	0x02700270
 801e98c:	02700270 	.word	0x02700270
 801e990:	02700270 	.word	0x02700270
 801e994:	02700270 	.word	0x02700270
 801e998:	02700270 	.word	0x02700270
 801e99c:	02700270 	.word	0x02700270
 801e9a0:	02700270 	.word	0x02700270
 801e9a4:	02700270 	.word	0x02700270
 801e9a8:	02700270 	.word	0x02700270
 801e9ac:	02700270 	.word	0x02700270
 801e9b0:	02700270 	.word	0x02700270
 801e9b4:	02700270 	.word	0x02700270
 801e9b8:	02700270 	.word	0x02700270
 801e9bc:	02700270 	.word	0x02700270
 801e9c0:	02700270 	.word	0x02700270
 801e9c4:	02700270 	.word	0x02700270
 801e9c8:	02700270 	.word	0x02700270
 801e9cc:	02700270 	.word	0x02700270
 801e9d0:	02700270 	.word	0x02700270
 801e9d4:	02700270 	.word	0x02700270
 801e9d8:	02700270 	.word	0x02700270
 801e9dc:	02700270 	.word	0x02700270
 801e9e0:	02700270 	.word	0x02700270
 801e9e4:	02700270 	.word	0x02700270
 801e9e8:	02700270 	.word	0x02700270
 801e9ec:	02700270 	.word	0x02700270
 801e9f0:	02700270 	.word	0x02700270
 801e9f4:	02700270 	.word	0x02700270
 801e9f8:	02700270 	.word	0x02700270
 801e9fc:	02700270 	.word	0x02700270
 801ea00:	02700270 	.word	0x02700270
 801ea04:	02700270 	.word	0x02700270
 801ea08:	02700270 	.word	0x02700270
 801ea0c:	026e0270 	.word	0x026e0270
 801ea10:	483f      	ldr	r0, [pc, #252]	@ (801eb10 <mg_http_status_code_str+0x4f8>)
 801ea12:	4770      	bx	lr
    case 100: return "Continue";
    case 101: return "Switching Protocols";
    case 102: return "Processing";
 801ea14:	483f      	ldr	r0, [pc, #252]	@ (801eb14 <mg_http_status_code_str+0x4fc>)
 801ea16:	4770      	bx	lr
    case 200: return "OK";
 801ea18:	483f      	ldr	r0, [pc, #252]	@ (801eb18 <mg_http_status_code_str+0x500>)
 801ea1a:	4770      	bx	lr
    case 201: return "Created";
 801ea1c:	483f      	ldr	r0, [pc, #252]	@ (801eb1c <mg_http_status_code_str+0x504>)
 801ea1e:	4770      	bx	lr
    case 202: return "Accepted";
 801ea20:	483f      	ldr	r0, [pc, #252]	@ (801eb20 <mg_http_status_code_str+0x508>)
 801ea22:	4770      	bx	lr
    case 203: return "Non-authoritative Information";
 801ea24:	483f      	ldr	r0, [pc, #252]	@ (801eb24 <mg_http_status_code_str+0x50c>)
 801ea26:	4770      	bx	lr
    case 204: return "No Content";
 801ea28:	483f      	ldr	r0, [pc, #252]	@ (801eb28 <mg_http_status_code_str+0x510>)
 801ea2a:	4770      	bx	lr
    case 205: return "Reset Content";
 801ea2c:	483f      	ldr	r0, [pc, #252]	@ (801eb2c <mg_http_status_code_str+0x514>)
 801ea2e:	4770      	bx	lr
    case 206: return "Partial Content";
 801ea30:	483f      	ldr	r0, [pc, #252]	@ (801eb30 <mg_http_status_code_str+0x518>)
 801ea32:	4770      	bx	lr
    case 207: return "Multi-Status";
 801ea34:	483f      	ldr	r0, [pc, #252]	@ (801eb34 <mg_http_status_code_str+0x51c>)
 801ea36:	4770      	bx	lr
    case 208: return "Already Reported";
 801ea38:	483f      	ldr	r0, [pc, #252]	@ (801eb38 <mg_http_status_code_str+0x520>)
 801ea3a:	4770      	bx	lr
    case 226: return "IM Used";
 801ea3c:	483f      	ldr	r0, [pc, #252]	@ (801eb3c <mg_http_status_code_str+0x524>)
 801ea3e:	4770      	bx	lr
    case 300: return "Multiple Choices";
 801ea40:	483f      	ldr	r0, [pc, #252]	@ (801eb40 <mg_http_status_code_str+0x528>)
 801ea42:	4770      	bx	lr
    case 301: return "Moved Permanently";
 801ea44:	483f      	ldr	r0, [pc, #252]	@ (801eb44 <mg_http_status_code_str+0x52c>)
 801ea46:	4770      	bx	lr
    case 302: return "Found";
 801ea48:	483f      	ldr	r0, [pc, #252]	@ (801eb48 <mg_http_status_code_str+0x530>)
 801ea4a:	4770      	bx	lr
    case 303: return "See Other";
 801ea4c:	483f      	ldr	r0, [pc, #252]	@ (801eb4c <mg_http_status_code_str+0x534>)
 801ea4e:	4770      	bx	lr
    case 304: return "Not Modified";
 801ea50:	483f      	ldr	r0, [pc, #252]	@ (801eb50 <mg_http_status_code_str+0x538>)
 801ea52:	4770      	bx	lr
    case 305: return "Use Proxy";
 801ea54:	483f      	ldr	r0, [pc, #252]	@ (801eb54 <mg_http_status_code_str+0x53c>)
 801ea56:	4770      	bx	lr
    case 307: return "Temporary Redirect";
 801ea58:	483f      	ldr	r0, [pc, #252]	@ (801eb58 <mg_http_status_code_str+0x540>)
 801ea5a:	4770      	bx	lr
    case 308: return "Permanent Redirect";
 801ea5c:	483f      	ldr	r0, [pc, #252]	@ (801eb5c <mg_http_status_code_str+0x544>)
 801ea5e:	4770      	bx	lr
    case 400: return "Bad Request";
 801ea60:	483f      	ldr	r0, [pc, #252]	@ (801eb60 <mg_http_status_code_str+0x548>)
 801ea62:	4770      	bx	lr
    case 401: return "Unauthorized";
 801ea64:	483f      	ldr	r0, [pc, #252]	@ (801eb64 <mg_http_status_code_str+0x54c>)
 801ea66:	4770      	bx	lr
    case 402: return "Payment Required";
 801ea68:	483f      	ldr	r0, [pc, #252]	@ (801eb68 <mg_http_status_code_str+0x550>)
 801ea6a:	4770      	bx	lr
    case 403: return "Forbidden";
 801ea6c:	483f      	ldr	r0, [pc, #252]	@ (801eb6c <mg_http_status_code_str+0x554>)
 801ea6e:	4770      	bx	lr
    case 404: return "Not Found";
 801ea70:	483f      	ldr	r0, [pc, #252]	@ (801eb70 <mg_http_status_code_str+0x558>)
 801ea72:	4770      	bx	lr
    case 405: return "Method Not Allowed";
 801ea74:	483f      	ldr	r0, [pc, #252]	@ (801eb74 <mg_http_status_code_str+0x55c>)
 801ea76:	4770      	bx	lr
    case 406: return "Not Acceptable";
 801ea78:	483f      	ldr	r0, [pc, #252]	@ (801eb78 <mg_http_status_code_str+0x560>)
 801ea7a:	4770      	bx	lr
    case 407: return "Proxy Authentication Required";
 801ea7c:	483f      	ldr	r0, [pc, #252]	@ (801eb7c <mg_http_status_code_str+0x564>)
 801ea7e:	4770      	bx	lr
    case 408: return "Request Timeout";
 801ea80:	483f      	ldr	r0, [pc, #252]	@ (801eb80 <mg_http_status_code_str+0x568>)
 801ea82:	4770      	bx	lr
    case 409: return "Conflict";
 801ea84:	483f      	ldr	r0, [pc, #252]	@ (801eb84 <mg_http_status_code_str+0x56c>)
 801ea86:	4770      	bx	lr
    case 410: return "Gone";
 801ea88:	483f      	ldr	r0, [pc, #252]	@ (801eb88 <mg_http_status_code_str+0x570>)
 801ea8a:	4770      	bx	lr
    case 411: return "Length Required";
 801ea8c:	483f      	ldr	r0, [pc, #252]	@ (801eb8c <mg_http_status_code_str+0x574>)
 801ea8e:	4770      	bx	lr
    case 412: return "Precondition Failed";
 801ea90:	483f      	ldr	r0, [pc, #252]	@ (801eb90 <mg_http_status_code_str+0x578>)
 801ea92:	4770      	bx	lr
    case 413: return "Payload Too Large";
 801ea94:	483f      	ldr	r0, [pc, #252]	@ (801eb94 <mg_http_status_code_str+0x57c>)
 801ea96:	4770      	bx	lr
    case 414: return "Request-URI Too Long";
 801ea98:	483f      	ldr	r0, [pc, #252]	@ (801eb98 <mg_http_status_code_str+0x580>)
 801ea9a:	4770      	bx	lr
    case 415: return "Unsupported Media Type";
 801ea9c:	483f      	ldr	r0, [pc, #252]	@ (801eb9c <mg_http_status_code_str+0x584>)
 801ea9e:	4770      	bx	lr
    case 416: return "Requested Range Not Satisfiable";
 801eaa0:	483f      	ldr	r0, [pc, #252]	@ (801eba0 <mg_http_status_code_str+0x588>)
 801eaa2:	4770      	bx	lr
    case 417: return "Expectation Failed";
 801eaa4:	483f      	ldr	r0, [pc, #252]	@ (801eba4 <mg_http_status_code_str+0x58c>)
 801eaa6:	4770      	bx	lr
    case 418: return "I'm a teapot";
 801eaa8:	483f      	ldr	r0, [pc, #252]	@ (801eba8 <mg_http_status_code_str+0x590>)
 801eaaa:	4770      	bx	lr
    case 421: return "Misdirected Request";
 801eaac:	483f      	ldr	r0, [pc, #252]	@ (801ebac <mg_http_status_code_str+0x594>)
 801eaae:	4770      	bx	lr
    case 422: return "Unprocessable Entity";
 801eab0:	483f      	ldr	r0, [pc, #252]	@ (801ebb0 <mg_http_status_code_str+0x598>)
 801eab2:	4770      	bx	lr
    case 423: return "Locked";
 801eab4:	483f      	ldr	r0, [pc, #252]	@ (801ebb4 <mg_http_status_code_str+0x59c>)
 801eab6:	4770      	bx	lr
    case 424: return "Failed Dependency";
 801eab8:	483f      	ldr	r0, [pc, #252]	@ (801ebb8 <mg_http_status_code_str+0x5a0>)
 801eaba:	4770      	bx	lr
    case 426: return "Upgrade Required";
 801eabc:	483f      	ldr	r0, [pc, #252]	@ (801ebbc <mg_http_status_code_str+0x5a4>)
 801eabe:	4770      	bx	lr
    case 428: return "Precondition Required";
 801eac0:	483f      	ldr	r0, [pc, #252]	@ (801ebc0 <mg_http_status_code_str+0x5a8>)
 801eac2:	4770      	bx	lr
    case 429: return "Too Many Requests";
 801eac4:	483f      	ldr	r0, [pc, #252]	@ (801ebc4 <mg_http_status_code_str+0x5ac>)
 801eac6:	4770      	bx	lr
    case 431: return "Request Header Fields Too Large";
 801eac8:	483f      	ldr	r0, [pc, #252]	@ (801ebc8 <mg_http_status_code_str+0x5b0>)
 801eaca:	4770      	bx	lr
    case 444: return "Connection Closed Without Response";
 801eacc:	483f      	ldr	r0, [pc, #252]	@ (801ebcc <mg_http_status_code_str+0x5b4>)
 801eace:	4770      	bx	lr
    case 451: return "Unavailable For Legal Reasons";
 801ead0:	483f      	ldr	r0, [pc, #252]	@ (801ebd0 <mg_http_status_code_str+0x5b8>)
 801ead2:	4770      	bx	lr
    case 499: return "Client Closed Request";
 801ead4:	483f      	ldr	r0, [pc, #252]	@ (801ebd4 <mg_http_status_code_str+0x5bc>)
 801ead6:	4770      	bx	lr
    case 500: return "Internal Server Error";
 801ead8:	483f      	ldr	r0, [pc, #252]	@ (801ebd8 <mg_http_status_code_str+0x5c0>)
 801eada:	4770      	bx	lr
    case 501: return "Not Implemented";
 801eadc:	483f      	ldr	r0, [pc, #252]	@ (801ebdc <mg_http_status_code_str+0x5c4>)
 801eade:	4770      	bx	lr
    case 502: return "Bad Gateway";
 801eae0:	483f      	ldr	r0, [pc, #252]	@ (801ebe0 <mg_http_status_code_str+0x5c8>)
 801eae2:	4770      	bx	lr
    case 503: return "Service Unavailable";
 801eae4:	483f      	ldr	r0, [pc, #252]	@ (801ebe4 <mg_http_status_code_str+0x5cc>)
 801eae6:	4770      	bx	lr
    case 504: return "Gateway Timeout";
 801eae8:	483f      	ldr	r0, [pc, #252]	@ (801ebe8 <mg_http_status_code_str+0x5d0>)
 801eaea:	4770      	bx	lr
    case 505: return "HTTP Version Not Supported";
 801eaec:	483f      	ldr	r0, [pc, #252]	@ (801ebec <mg_http_status_code_str+0x5d4>)
 801eaee:	4770      	bx	lr
    case 506: return "Variant Also Negotiates";
 801eaf0:	483f      	ldr	r0, [pc, #252]	@ (801ebf0 <mg_http_status_code_str+0x5d8>)
 801eaf2:	4770      	bx	lr
    case 507: return "Insufficient Storage";
 801eaf4:	483f      	ldr	r0, [pc, #252]	@ (801ebf4 <mg_http_status_code_str+0x5dc>)
 801eaf6:	4770      	bx	lr
    case 508: return "Loop Detected";
 801eaf8:	483f      	ldr	r0, [pc, #252]	@ (801ebf8 <mg_http_status_code_str+0x5e0>)
 801eafa:	4770      	bx	lr
    case 510: return "Not Extended";
 801eafc:	483f      	ldr	r0, [pc, #252]	@ (801ebfc <mg_http_status_code_str+0x5e4>)
 801eafe:	4770      	bx	lr
    case 511: return "Network Authentication Required";
 801eb00:	483f      	ldr	r0, [pc, #252]	@ (801ec00 <mg_http_status_code_str+0x5e8>)
 801eb02:	4770      	bx	lr
    case 599: return "Network Connect Timeout Error";
 801eb04:	483f      	ldr	r0, [pc, #252]	@ (801ec04 <mg_http_status_code_str+0x5ec>)
 801eb06:	4770      	bx	lr
    default: return "";
 801eb08:	483f      	ldr	r0, [pc, #252]	@ (801ec08 <mg_http_status_code_str+0x5f0>)
 801eb0a:	4770      	bx	lr
    case 101: return "Switching Protocols";
 801eb0c:	483f      	ldr	r0, [pc, #252]	@ (801ec0c <mg_http_status_code_str+0x5f4>)
  }
}
 801eb0e:	4770      	bx	lr
 801eb10:	08036378 	.word	0x08036378
 801eb14:	08036398 	.word	0x08036398
 801eb18:	080363a4 	.word	0x080363a4
 801eb1c:	080363a8 	.word	0x080363a8
 801eb20:	080363b0 	.word	0x080363b0
 801eb24:	080363bc 	.word	0x080363bc
 801eb28:	080363dc 	.word	0x080363dc
 801eb2c:	080363e8 	.word	0x080363e8
 801eb30:	080363f8 	.word	0x080363f8
 801eb34:	08036408 	.word	0x08036408
 801eb38:	08036418 	.word	0x08036418
 801eb3c:	0803642c 	.word	0x0803642c
 801eb40:	08036434 	.word	0x08036434
 801eb44:	08036448 	.word	0x08036448
 801eb48:	080364ec 	.word	0x080364ec
 801eb4c:	0803645c 	.word	0x0803645c
 801eb50:	08036468 	.word	0x08036468
 801eb54:	08036478 	.word	0x08036478
 801eb58:	08036484 	.word	0x08036484
 801eb5c:	08036498 	.word	0x08036498
 801eb60:	080364ac 	.word	0x080364ac
 801eb64:	080364b8 	.word	0x080364b8
 801eb68:	080364c8 	.word	0x080364c8
 801eb6c:	080364dc 	.word	0x080364dc
 801eb70:	080364e8 	.word	0x080364e8
 801eb74:	080364f4 	.word	0x080364f4
 801eb78:	08036508 	.word	0x08036508
 801eb7c:	08036518 	.word	0x08036518
 801eb80:	08036538 	.word	0x08036538
 801eb84:	08036548 	.word	0x08036548
 801eb88:	08036554 	.word	0x08036554
 801eb8c:	0803655c 	.word	0x0803655c
 801eb90:	0803656c 	.word	0x0803656c
 801eb94:	08036580 	.word	0x08036580
 801eb98:	08036594 	.word	0x08036594
 801eb9c:	080365ac 	.word	0x080365ac
 801eba0:	080365c4 	.word	0x080365c4
 801eba4:	080365e4 	.word	0x080365e4
 801eba8:	080365f8 	.word	0x080365f8
 801ebac:	08036608 	.word	0x08036608
 801ebb0:	0803661c 	.word	0x0803661c
 801ebb4:	08036634 	.word	0x08036634
 801ebb8:	0803663c 	.word	0x0803663c
 801ebbc:	08036650 	.word	0x08036650
 801ebc0:	08036664 	.word	0x08036664
 801ebc4:	0803667c 	.word	0x0803667c
 801ebc8:	08036690 	.word	0x08036690
 801ebcc:	080366b0 	.word	0x080366b0
 801ebd0:	080366d4 	.word	0x080366d4
 801ebd4:	080366f4 	.word	0x080366f4
 801ebd8:	0803670c 	.word	0x0803670c
 801ebdc:	08036724 	.word	0x08036724
 801ebe0:	08036734 	.word	0x08036734
 801ebe4:	08036740 	.word	0x08036740
 801ebe8:	08036754 	.word	0x08036754
 801ebec:	08036764 	.word	0x08036764
 801ebf0:	08036780 	.word	0x08036780
 801ebf4:	08036798 	.word	0x08036798
 801ebf8:	080367b0 	.word	0x080367b0
 801ebfc:	080367c0 	.word	0x080367c0
 801ec00:	080367d0 	.word	0x080367d0
 801ec04:	080367f0 	.word	0x080367f0
 801ec08:	080337f8 	.word	0x080337f8
 801ec0c:	08036384 	.word	0x08036384

0801ec10 <mg_is_url_safe>:
    mg_http_serve_file(c, hm, path, opts);
  }
}

static bool mg_is_url_safe(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 801ec10:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 801ec14:	2b09      	cmp	r3, #9
 801ec16:	d91c      	bls.n	801ec52 <mg_is_url_safe+0x42>
 801ec18:	285f      	cmp	r0, #95	@ 0x5f
 801ec1a:	d01c      	beq.n	801ec56 <mg_is_url_safe+0x46>
 801ec1c:	dc0d      	bgt.n	801ec3a <mg_is_url_safe+0x2a>
 801ec1e:	282e      	cmp	r0, #46	@ 0x2e
 801ec20:	d01b      	beq.n	801ec5a <mg_is_url_safe+0x4a>
 801ec22:	dd04      	ble.n	801ec2e <mg_is_url_safe+0x1e>
 801ec24:	3841      	subs	r0, #65	@ 0x41
 801ec26:	2819      	cmp	r0, #25
 801ec28:	d805      	bhi.n	801ec36 <mg_is_url_safe+0x26>
 801ec2a:	2001      	movs	r0, #1
 801ec2c:	4770      	bx	lr
 801ec2e:	282d      	cmp	r0, #45	@ 0x2d
 801ec30:	d115      	bne.n	801ec5e <mg_is_url_safe+0x4e>
 801ec32:	2001      	movs	r0, #1
 801ec34:	4770      	bx	lr
 801ec36:	2000      	movs	r0, #0
 801ec38:	4770      	bx	lr
 801ec3a:	287a      	cmp	r0, #122	@ 0x7a
 801ec3c:	dd03      	ble.n	801ec46 <mg_is_url_safe+0x36>
 801ec3e:	287e      	cmp	r0, #126	@ 0x7e
 801ec40:	d10f      	bne.n	801ec62 <mg_is_url_safe+0x52>
 801ec42:	2001      	movs	r0, #1
 801ec44:	4770      	bx	lr
 801ec46:	2861      	cmp	r0, #97	@ 0x61
 801ec48:	da01      	bge.n	801ec4e <mg_is_url_safe+0x3e>
 801ec4a:	2000      	movs	r0, #0
 801ec4c:	4770      	bx	lr
 801ec4e:	2001      	movs	r0, #1
 801ec50:	4770      	bx	lr
 801ec52:	2001      	movs	r0, #1
 801ec54:	4770      	bx	lr
 801ec56:	2001      	movs	r0, #1
 801ec58:	4770      	bx	lr
 801ec5a:	2001      	movs	r0, #1
 801ec5c:	4770      	bx	lr
 801ec5e:	2000      	movs	r0, #0
 801ec60:	4770      	bx	lr
 801ec62:	2000      	movs	r0, #0
}
 801ec64:	4770      	bx	lr

0801ec66 <is_hex_digit>:
int mg_http_status(const struct mg_http_message *hm) {
  return atoi(hm->uri.buf);
}

static bool is_hex_digit(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801ec66:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801ec6a:	2b09      	cmp	r3, #9
 801ec6c:	d908      	bls.n	801ec80 <is_hex_digit+0x1a>
 801ec6e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801ec72:	2b05      	cmp	r3, #5
 801ec74:	d906      	bls.n	801ec84 <is_hex_digit+0x1e>
         (c >= 'A' && c <= 'F');
 801ec76:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801ec78:	2805      	cmp	r0, #5
 801ec7a:	d805      	bhi.n	801ec88 <is_hex_digit+0x22>
 801ec7c:	2001      	movs	r0, #1
 801ec7e:	4770      	bx	lr
 801ec80:	2001      	movs	r0, #1
 801ec82:	4770      	bx	lr
 801ec84:	2001      	movs	r0, #1
 801ec86:	4770      	bx	lr
 801ec88:	2000      	movs	r0, #0
}
 801ec8a:	4770      	bx	lr

0801ec8c <roundup>:




static size_t roundup(size_t size, size_t align) {
  return align == 0 ? size : (size + align - 1) / align * align;
 801ec8c:	b129      	cbz	r1, 801ec9a <roundup+0xe>
 801ec8e:	4408      	add	r0, r1
 801ec90:	3801      	subs	r0, #1
 801ec92:	fbb0 f0f1 	udiv	r0, r0, r1
 801ec96:	fb01 f000 	mul.w	r0, r1, r0
}
 801ec9a:	4770      	bx	lr

0801ec9c <escapeseq>:




static const char *escapeseq(int esc) {
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 801ec9c:	b108      	cbz	r0, 801eca2 <escapeseq+0x6>
 801ec9e:	4802      	ldr	r0, [pc, #8]	@ (801eca8 <escapeseq+0xc>)
 801eca0:	4770      	bx	lr
 801eca2:	4802      	ldr	r0, [pc, #8]	@ (801ecac <escapeseq+0x10>)
}
 801eca4:	4770      	bx	lr
 801eca6:	bf00      	nop
 801eca8:	08036810 	.word	0x08036810
 801ecac:	08036818 	.word	0x08036818

0801ecb0 <json_esc>:

static char json_esc(int c, int esc) {
 801ecb0:	b570      	push	{r4, r5, r6, lr}
 801ecb2:	4604      	mov	r4, r0
 801ecb4:	460d      	mov	r5, r1
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 801ecb6:	4608      	mov	r0, r1
 801ecb8:	f7ff fff0 	bl	801ec9c <escapeseq>
 801ecbc:	4606      	mov	r6, r0
 801ecbe:	fab5 f085 	clz	r0, r5
 801ecc2:	0940      	lsrs	r0, r0, #5
 801ecc4:	f7ff ffea 	bl	801ec9c <escapeseq>
 801ecc8:	4602      	mov	r2, r0
  for (p = esc1; *p != '\0'; p++) {
 801ecca:	4633      	mov	r3, r6
 801eccc:	e000      	b.n	801ecd0 <json_esc+0x20>
 801ecce:	3301      	adds	r3, #1
 801ecd0:	7818      	ldrb	r0, [r3, #0]
 801ecd2:	b118      	cbz	r0, 801ecdc <json_esc+0x2c>
    if (*p == c) return esc2[p - esc1];
 801ecd4:	42a0      	cmp	r0, r4
 801ecd6:	d1fa      	bne.n	801ecce <json_esc+0x1e>
 801ecd8:	1b9b      	subs	r3, r3, r6
 801ecda:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 801ecdc:	bd70      	pop	{r4, r5, r6, pc}

0801ecde <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 801ecde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ece2:	4607      	mov	r7, r0
 801ece4:	460e      	mov	r6, r1
  int i;
  for (i = 0; i < len; i++) {
 801ece6:	2400      	movs	r4, #0
 801ece8:	e003      	b.n	801ecf2 <mg_pass_string+0x14>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
      i++;
    } else if (s[i] == '\0') {
 801ecea:	b1d5      	cbz	r5, 801ed22 <mg_pass_string+0x44>
      return MG_JSON_INVALID;
    } else if (s[i] == '"') {
 801ecec:	2d22      	cmp	r5, #34	@ 0x22
 801ecee:	d015      	beq.n	801ed1c <mg_pass_string+0x3e>
  for (i = 0; i < len; i++) {
 801ecf0:	3401      	adds	r4, #1
 801ecf2:	42b4      	cmp	r4, r6
 801ecf4:	da10      	bge.n	801ed18 <mg_pass_string+0x3a>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 801ecf6:	4623      	mov	r3, r4
 801ecf8:	5d3d      	ldrb	r5, [r7, r4]
 801ecfa:	2d5c      	cmp	r5, #92	@ 0x5c
 801ecfc:	d1f5      	bne.n	801ecea <mg_pass_string+0xc>
 801ecfe:	f104 0801 	add.w	r8, r4, #1
 801ed02:	45b0      	cmp	r8, r6
 801ed04:	daf1      	bge.n	801ecea <mg_pass_string+0xc>
 801ed06:	443b      	add	r3, r7
 801ed08:	2101      	movs	r1, #1
 801ed0a:	7858      	ldrb	r0, [r3, #1]
 801ed0c:	f7ff ffd0 	bl	801ecb0 <json_esc>
 801ed10:	2800      	cmp	r0, #0
 801ed12:	d0ea      	beq.n	801ecea <mg_pass_string+0xc>
      i++;
 801ed14:	4644      	mov	r4, r8
 801ed16:	e7eb      	b.n	801ecf0 <mg_pass_string+0x12>
      return i;
    }
  }
  return MG_JSON_INVALID;
 801ed18:	f06f 0401 	mvn.w	r4, #1
}
 801ed1c:	4620      	mov	r0, r4
 801ed1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MG_JSON_INVALID;
 801ed22:	f06f 0401 	mvn.w	r4, #1
 801ed26:	e7f9      	b.n	801ed1c <mg_pass_string+0x3e>

0801ed28 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 801ed28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed2c:	ed2d 8b02 	vpush	{d8}
 801ed30:	b085      	sub	sp, #20
 801ed32:	4681      	mov	r9, r0
 801ed34:	9201      	str	r2, [sp, #4]
  double d = 0.0;
  int i = 0, sign = 1;

  // Sign
  if (i < len && *p == '-') {
 801ed36:	f1b1 0800 	subs.w	r8, r1, #0
 801ed3a:	dd49      	ble.n	801edd0 <mg_atod+0xa8>
 801ed3c:	7803      	ldrb	r3, [r0, #0]
 801ed3e:	2b2d      	cmp	r3, #45	@ 0x2d
 801ed40:	d04c      	beq.n	801eddc <mg_atod+0xb4>
    sign = -1, i++;
  } else if (i < len && *p == '+') {
 801ed42:	2b2b      	cmp	r3, #43	@ 0x2b
 801ed44:	d04e      	beq.n	801ede4 <mg_atod+0xbc>
  int i = 0, sign = 1;
 801ed46:	f04f 0a01 	mov.w	sl, #1
 801ed4a:	2400      	movs	r4, #0
 801ed4c:	e043      	b.n	801edd6 <mg_atod+0xae>
    i++;
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
    d *= 10.0;
 801ed4e:	2200      	movs	r2, #0
 801ed50:	4b71      	ldr	r3, [pc, #452]	@ (801ef18 <mg_atod+0x1f0>)
 801ed52:	4630      	mov	r0, r6
 801ed54:	4639      	mov	r1, r7
 801ed56:	f7f1 fc67 	bl	8010628 <__aeabi_dmul>
 801ed5a:	4606      	mov	r6, r0
 801ed5c:	460f      	mov	r7, r1
    d += p[i] - '0';
 801ed5e:	f1a5 0030 	sub.w	r0, r5, #48	@ 0x30
 801ed62:	f7f1 fbf7 	bl	8010554 <__aeabi_i2d>
 801ed66:	4632      	mov	r2, r6
 801ed68:	463b      	mov	r3, r7
 801ed6a:	f7f1 faa7 	bl	80102bc <__adddf3>
 801ed6e:	4606      	mov	r6, r0
 801ed70:	460f      	mov	r7, r1
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801ed72:	3401      	adds	r4, #1
 801ed74:	4544      	cmp	r4, r8
 801ed76:	da05      	bge.n	801ed84 <mg_atod+0x5c>
 801ed78:	f819 5004 	ldrb.w	r5, [r9, r4]
 801ed7c:	2d2f      	cmp	r5, #47	@ 0x2f
 801ed7e:	d901      	bls.n	801ed84 <mg_atod+0x5c>
 801ed80:	2d39      	cmp	r5, #57	@ 0x39
 801ed82:	d9e4      	bls.n	801ed4e <mg_atod+0x26>
  }
  d *= sign;
 801ed84:	4650      	mov	r0, sl
 801ed86:	f7f1 fbe5 	bl	8010554 <__aeabi_i2d>
 801ed8a:	4602      	mov	r2, r0
 801ed8c:	460b      	mov	r3, r1
 801ed8e:	ec43 2b18 	vmov	d8, r2, r3
 801ed92:	4632      	mov	r2, r6
 801ed94:	463b      	mov	r3, r7
 801ed96:	f7f1 fc47 	bl	8010628 <__aeabi_dmul>
 801ed9a:	4606      	mov	r6, r0
 801ed9c:	460f      	mov	r7, r1

  // Fractional
  if (i < len && p[i] == '.') {
 801ed9e:	4544      	cmp	r4, r8
 801eda0:	da03      	bge.n	801edaa <mg_atod+0x82>
 801eda2:	f819 3004 	ldrb.w	r3, [r9, r4]
 801eda6:	2b2e      	cmp	r3, #46	@ 0x2e
 801eda8:	d020      	beq.n	801edec <mg_atod+0xc4>
    }
    d += frac * sign;
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 801edaa:	4544      	cmp	r4, r8
 801edac:	f280 80a1 	bge.w	801eef2 <mg_atod+0x1ca>
 801edb0:	f819 3004 	ldrb.w	r3, [r9, r4]
 801edb4:	2b65      	cmp	r3, #101	@ 0x65
 801edb6:	d002      	beq.n	801edbe <mg_atod+0x96>
 801edb8:	2b45      	cmp	r3, #69	@ 0x45
 801edba:	f040 809a 	bne.w	801eef2 <mg_atod+0x1ca>
    int j, exp = 0, minus = 0;
    i++;
 801edbe:	1c63      	adds	r3, r4, #1
    if (i < len && p[i] == '-') minus = 1, i++;
 801edc0:	4598      	cmp	r8, r3
 801edc2:	dd58      	ble.n	801ee76 <mg_atod+0x14e>
 801edc4:	f819 2003 	ldrb.w	r2, [r9, r3]
 801edc8:	2a2d      	cmp	r2, #45	@ 0x2d
 801edca:	d051      	beq.n	801ee70 <mg_atod+0x148>
    int j, exp = 0, minus = 0;
 801edcc:	2200      	movs	r2, #0
 801edce:	e053      	b.n	801ee78 <mg_atod+0x150>
  int i = 0, sign = 1;
 801edd0:	f04f 0a01 	mov.w	sl, #1
 801edd4:	2400      	movs	r4, #0
    i++;
 801edd6:	2600      	movs	r6, #0
 801edd8:	2700      	movs	r7, #0
 801edda:	e7cb      	b.n	801ed74 <mg_atod+0x4c>
    sign = -1, i++;
 801eddc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801ede0:	2401      	movs	r4, #1
 801ede2:	e7f8      	b.n	801edd6 <mg_atod+0xae>
  int i = 0, sign = 1;
 801ede4:	f04f 0a01 	mov.w	sl, #1
    i++;
 801ede8:	4654      	mov	r4, sl
 801edea:	e7f4      	b.n	801edd6 <mg_atod+0xae>
    i++;
 801edec:	3401      	adds	r4, #1
    double frac = 0.0, base = 0.1;
 801edee:	f20f 1b18 	addw	fp, pc, #280	@ 0x118
 801edf2:	e9db ab00 	ldrd	sl, fp, [fp]
 801edf6:	ed9f 7b46 	vldr	d7, [pc, #280]	@ 801ef10 <mg_atod+0x1e8>
 801edfa:	ec53 2b17 	vmov	r2, r3, d7
 801edfe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801ee02:	464f      	mov	r7, r9
 801ee04:	4645      	mov	r5, r8
 801ee06:	4690      	mov	r8, r2
 801ee08:	4699      	mov	r9, r3
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801ee0a:	e017      	b.n	801ee3c <mg_atod+0x114>
      frac += base * (p[i] - '0');
 801ee0c:	3830      	subs	r0, #48	@ 0x30
 801ee0e:	f7f1 fba1 	bl	8010554 <__aeabi_i2d>
 801ee12:	4652      	mov	r2, sl
 801ee14:	465b      	mov	r3, fp
 801ee16:	f7f1 fc07 	bl	8010628 <__aeabi_dmul>
 801ee1a:	4602      	mov	r2, r0
 801ee1c:	460b      	mov	r3, r1
 801ee1e:	4640      	mov	r0, r8
 801ee20:	4649      	mov	r1, r9
 801ee22:	f7f1 fa4b 	bl	80102bc <__adddf3>
 801ee26:	4680      	mov	r8, r0
 801ee28:	4689      	mov	r9, r1
      base /= 10.0;
 801ee2a:	2200      	movs	r2, #0
 801ee2c:	4b3a      	ldr	r3, [pc, #232]	@ (801ef18 <mg_atod+0x1f0>)
 801ee2e:	4650      	mov	r0, sl
 801ee30:	4659      	mov	r1, fp
 801ee32:	f7f1 fd23 	bl	801087c <__aeabi_ddiv>
 801ee36:	4682      	mov	sl, r0
 801ee38:	468b      	mov	fp, r1
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801ee3a:	3401      	adds	r4, #1
 801ee3c:	42ac      	cmp	r4, r5
 801ee3e:	da04      	bge.n	801ee4a <mg_atod+0x122>
 801ee40:	5d38      	ldrb	r0, [r7, r4]
 801ee42:	282f      	cmp	r0, #47	@ 0x2f
 801ee44:	d901      	bls.n	801ee4a <mg_atod+0x122>
 801ee46:	2839      	cmp	r0, #57	@ 0x39
 801ee48:	d9e0      	bls.n	801ee0c <mg_atod+0xe4>
    d += frac * sign;
 801ee4a:	4642      	mov	r2, r8
 801ee4c:	464b      	mov	r3, r9
 801ee4e:	46b9      	mov	r9, r7
 801ee50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ee54:	46a8      	mov	r8, r5
 801ee56:	ec51 0b18 	vmov	r0, r1, d8
 801ee5a:	f7f1 fbe5 	bl	8010628 <__aeabi_dmul>
 801ee5e:	4602      	mov	r2, r0
 801ee60:	460b      	mov	r3, r1
 801ee62:	4630      	mov	r0, r6
 801ee64:	4639      	mov	r1, r7
 801ee66:	f7f1 fa29 	bl	80102bc <__adddf3>
 801ee6a:	4606      	mov	r6, r0
 801ee6c:	460f      	mov	r7, r1
 801ee6e:	e79c      	b.n	801edaa <mg_atod+0x82>
    if (i < len && p[i] == '-') minus = 1, i++;
 801ee70:	1ca3      	adds	r3, r4, #2
 801ee72:	2201      	movs	r2, #1
 801ee74:	e000      	b.n	801ee78 <mg_atod+0x150>
    int j, exp = 0, minus = 0;
 801ee76:	2200      	movs	r2, #0
    if (i < len && p[i] == '+') i++;
 801ee78:	4543      	cmp	r3, r8
 801ee7a:	da03      	bge.n	801ee84 <mg_atod+0x15c>
 801ee7c:	f819 1003 	ldrb.w	r1, [r9, r3]
 801ee80:	292b      	cmp	r1, #43	@ 0x2b
 801ee82:	d013      	beq.n	801eeac <mg_atod+0x184>
    if (i < len && p[i] == '-') minus = 1, i++;
 801ee84:	461c      	mov	r4, r3
 801ee86:	2500      	movs	r5, #0
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 801ee88:	4544      	cmp	r4, r8
 801ee8a:	da11      	bge.n	801eeb0 <mg_atod+0x188>
 801ee8c:	f819 3004 	ldrb.w	r3, [r9, r4]
 801ee90:	2b2f      	cmp	r3, #47	@ 0x2f
 801ee92:	d90d      	bls.n	801eeb0 <mg_atod+0x188>
 801ee94:	2b39      	cmp	r3, #57	@ 0x39
 801ee96:	d80b      	bhi.n	801eeb0 <mg_atod+0x188>
 801ee98:	f5b5 7f9a 	cmp.w	r5, #308	@ 0x134
 801ee9c:	da08      	bge.n	801eeb0 <mg_atod+0x188>
      exp = exp * 10 + (p[i++] - '0');
 801ee9e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801eea2:	3401      	adds	r4, #1
 801eea4:	3b30      	subs	r3, #48	@ 0x30
 801eea6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801eeaa:	e7ed      	b.n	801ee88 <mg_atod+0x160>
    if (i < len && p[i] == '+') i++;
 801eeac:	3301      	adds	r3, #1
 801eeae:	e7e9      	b.n	801ee84 <mg_atod+0x15c>
    if (minus) exp = -exp;
 801eeb0:	b102      	cbz	r2, 801eeb4 <mg_atod+0x18c>
 801eeb2:	426d      	negs	r5, r5
    for (j = 0; j < exp; j++) d *= 10.0;
 801eeb4:	f04f 0800 	mov.w	r8, #0
 801eeb8:	e009      	b.n	801eece <mg_atod+0x1a6>
 801eeba:	2200      	movs	r2, #0
 801eebc:	4b16      	ldr	r3, [pc, #88]	@ (801ef18 <mg_atod+0x1f0>)
 801eebe:	4630      	mov	r0, r6
 801eec0:	4639      	mov	r1, r7
 801eec2:	f7f1 fbb1 	bl	8010628 <__aeabi_dmul>
 801eec6:	4606      	mov	r6, r0
 801eec8:	460f      	mov	r7, r1
 801eeca:	f108 0801 	add.w	r8, r8, #1
 801eece:	45a8      	cmp	r8, r5
 801eed0:	dbf3      	blt.n	801eeba <mg_atod+0x192>
    for (j = 0; j < -exp; j++) d /= 10.0;
 801eed2:	f04f 0800 	mov.w	r8, #0
 801eed6:	e009      	b.n	801eeec <mg_atod+0x1c4>
 801eed8:	2200      	movs	r2, #0
 801eeda:	4b0f      	ldr	r3, [pc, #60]	@ (801ef18 <mg_atod+0x1f0>)
 801eedc:	4630      	mov	r0, r6
 801eede:	4639      	mov	r1, r7
 801eee0:	f7f1 fccc 	bl	801087c <__aeabi_ddiv>
 801eee4:	4606      	mov	r6, r0
 801eee6:	460f      	mov	r7, r1
 801eee8:	f108 0801 	add.w	r8, r8, #1
 801eeec:	426b      	negs	r3, r5
 801eeee:	4543      	cmp	r3, r8
 801eef0:	dcf2      	bgt.n	801eed8 <mg_atod+0x1b0>
  }

  if (numlen != NULL) *numlen = i;
 801eef2:	9b01      	ldr	r3, [sp, #4]
 801eef4:	b103      	cbz	r3, 801eef8 <mg_atod+0x1d0>
 801eef6:	601c      	str	r4, [r3, #0]
  return d;
}
 801eef8:	ec47 6b10 	vmov	d0, r6, r7
 801eefc:	b005      	add	sp, #20
 801eefe:	ecbd 8b02 	vpop	{d8}
 801ef02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef06:	bf00      	nop
 801ef08:	9999999a 	.word	0x9999999a
 801ef0c:	3fb99999 	.word	0x3fb99999
	...
 801ef18:	40240000 	.word	0x40240000

0801ef1c <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 801ef1c:	b508      	push	{r3, lr}
  s_log_func((char) c, s_log_func_param);
 801ef1e:	4b03      	ldr	r3, [pc, #12]	@ (801ef2c <logc+0x10>)
 801ef20:	681b      	ldr	r3, [r3, #0]
 801ef22:	4a03      	ldr	r2, [pc, #12]	@ (801ef30 <logc+0x14>)
 801ef24:	6811      	ldr	r1, [r2, #0]
 801ef26:	4798      	blx	r3
}
 801ef28:	bd08      	pop	{r3, pc}
 801ef2a:	bf00      	nop
 801ef2c:	200000a4 	.word	0x200000a4
 801ef30:	20018020 	.word	0x20018020

0801ef34 <logs>:

static void logs(const char *buf, size_t len) {
 801ef34:	b570      	push	{r4, r5, r6, lr}
 801ef36:	4606      	mov	r6, r0
 801ef38:	460d      	mov	r5, r1
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 801ef3a:	2400      	movs	r4, #0
 801ef3c:	e003      	b.n	801ef46 <logs+0x12>
 801ef3e:	5d30      	ldrb	r0, [r6, r4]
 801ef40:	f7ff ffec 	bl	801ef1c <logc>
 801ef44:	3401      	adds	r4, #1
 801ef46:	42ac      	cmp	r4, r5
 801ef48:	d3f9      	bcc.n	801ef3e <logs+0xa>
}
 801ef4a:	bd70      	pop	{r4, r5, r6, pc}

0801ef4c <nibble>:
  logs("\r\n", 2);
}
#endif

static unsigned char nibble(unsigned c) {
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 801ef4c:	2809      	cmp	r0, #9
 801ef4e:	d803      	bhi.n	801ef58 <nibble+0xc>
 801ef50:	b2c0      	uxtb	r0, r0
 801ef52:	3030      	adds	r0, #48	@ 0x30
 801ef54:	b2c0      	uxtb	r0, r0
 801ef56:	4770      	bx	lr
 801ef58:	b2c0      	uxtb	r0, r0
 801ef5a:	3057      	adds	r0, #87	@ 0x57
 801ef5c:	b2c0      	uxtb	r0, r0
}
 801ef5e:	4770      	bx	lr

0801ef60 <mg_md5_transform>:

  ctx->bits[0] = 0;
  ctx->bits[1] = 0;
}

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 801ef60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef64:	b08d      	sub	sp, #52	@ 0x34
  uint32_t a, b, c, d;

  a = buf[0];
  b = buf[1];
 801ef66:	6846      	ldr	r6, [r0, #4]
  c = buf[2];
  d = buf[3];

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 801ef68:	6883      	ldr	r3, [r0, #8]
 801ef6a:	68c2      	ldr	r2, [r0, #12]
 801ef6c:	4053      	eors	r3, r2
 801ef6e:	4033      	ands	r3, r6
 801ef70:	4053      	eors	r3, r2
 801ef72:	f8d1 a000 	ldr.w	sl, [r1]
 801ef76:	4453      	add	r3, sl
 801ef78:	6802      	ldr	r2, [r0, #0]
 801ef7a:	4413      	add	r3, r2
 801ef7c:	4ae0      	ldr	r2, [pc, #896]	@ (801f300 <mg_md5_transform+0x3a0>)
 801ef7e:	441a      	add	r2, r3
 801ef80:	eb06 6272 	add.w	r2, r6, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 801ef84:	6883      	ldr	r3, [r0, #8]
 801ef86:	ea86 0503 	eor.w	r5, r6, r3
 801ef8a:	4015      	ands	r5, r2
 801ef8c:	405d      	eors	r5, r3
 801ef8e:	684b      	ldr	r3, [r1, #4]
 801ef90:	9301      	str	r3, [sp, #4]
 801ef92:	441d      	add	r5, r3
 801ef94:	68c4      	ldr	r4, [r0, #12]
 801ef96:	4425      	add	r5, r4
 801ef98:	4bda      	ldr	r3, [pc, #872]	@ (801f304 <mg_md5_transform+0x3a4>)
 801ef9a:	442b      	add	r3, r5
 801ef9c:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 801efa0:	ea86 0502 	eor.w	r5, r6, r2
 801efa4:	401d      	ands	r5, r3
 801efa6:	960b      	str	r6, [sp, #44]	@ 0x2c
 801efa8:	4075      	eors	r5, r6
 801efaa:	688c      	ldr	r4, [r1, #8]
 801efac:	4425      	add	r5, r4
 801efae:	6886      	ldr	r6, [r0, #8]
 801efb0:	4435      	add	r5, r6
 801efb2:	4ed5      	ldr	r6, [pc, #852]	@ (801f308 <mg_md5_transform+0x3a8>)
 801efb4:	442e      	add	r6, r5
 801efb6:	eb03 3cf6 	add.w	ip, r3, r6, ror #15
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 801efba:	ea82 0703 	eor.w	r7, r2, r3
 801efbe:	ea07 070c 	and.w	r7, r7, ip
 801efc2:	4057      	eors	r7, r2
 801efc4:	68cd      	ldr	r5, [r1, #12]
 801efc6:	950a      	str	r5, [sp, #40]	@ 0x28
 801efc8:	442f      	add	r7, r5
 801efca:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801efcc:	4437      	add	r7, r6
 801efce:	4dcf      	ldr	r5, [pc, #828]	@ (801f30c <mg_md5_transform+0x3ac>)
 801efd0:	443d      	add	r5, r7
 801efd2:	eb0c 25b5 	add.w	r5, ip, r5, ror #10
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 801efd6:	ea83 070c 	eor.w	r7, r3, ip
 801efda:	402f      	ands	r7, r5
 801efdc:	405f      	eors	r7, r3
 801efde:	690e      	ldr	r6, [r1, #16]
 801efe0:	9602      	str	r6, [sp, #8]
 801efe2:	4437      	add	r7, r6
 801efe4:	4417      	add	r7, r2
 801efe6:	4aca      	ldr	r2, [pc, #808]	@ (801f310 <mg_md5_transform+0x3b0>)
 801efe8:	443a      	add	r2, r7
 801efea:	eb05 6272 	add.w	r2, r5, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 801efee:	ea8c 0705 	eor.w	r7, ip, r5
 801eff2:	4017      	ands	r7, r2
 801eff4:	ea87 070c 	eor.w	r7, r7, ip
 801eff8:	694e      	ldr	r6, [r1, #20]
 801effa:	9603      	str	r6, [sp, #12]
 801effc:	4437      	add	r7, r6
 801effe:	441f      	add	r7, r3
 801f000:	4bc4      	ldr	r3, [pc, #784]	@ (801f314 <mg_md5_transform+0x3b4>)
 801f002:	443b      	add	r3, r7
 801f004:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 801f008:	ea85 0702 	eor.w	r7, r5, r2
 801f00c:	401f      	ands	r7, r3
 801f00e:	406f      	eors	r7, r5
 801f010:	698e      	ldr	r6, [r1, #24]
 801f012:	9604      	str	r6, [sp, #16]
 801f014:	4437      	add	r7, r6
 801f016:	eb0c 0607 	add.w	r6, ip, r7
 801f01a:	4fbf      	ldr	r7, [pc, #764]	@ (801f318 <mg_md5_transform+0x3b8>)
 801f01c:	4437      	add	r7, r6
 801f01e:	eb03 3cf7 	add.w	ip, r3, r7, ror #15
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 801f022:	ea82 0603 	eor.w	r6, r2, r3
 801f026:	ea06 060c 	and.w	r6, r6, ip
 801f02a:	4056      	eors	r6, r2
 801f02c:	f8d1 901c 	ldr.w	r9, [r1, #28]
 801f030:	444e      	add	r6, r9
 801f032:	4435      	add	r5, r6
 801f034:	4fb9      	ldr	r7, [pc, #740]	@ (801f31c <mg_md5_transform+0x3bc>)
 801f036:	442f      	add	r7, r5
 801f038:	eb0c 27b7 	add.w	r7, ip, r7, ror #10
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 801f03c:	ea83 050c 	eor.w	r5, r3, ip
 801f040:	403d      	ands	r5, r7
 801f042:	405d      	eors	r5, r3
 801f044:	6a0e      	ldr	r6, [r1, #32]
 801f046:	9605      	str	r6, [sp, #20]
 801f048:	4435      	add	r5, r6
 801f04a:	442a      	add	r2, r5
 801f04c:	4eb4      	ldr	r6, [pc, #720]	@ (801f320 <mg_md5_transform+0x3c0>)
 801f04e:	4416      	add	r6, r2
 801f050:	eb07 6676 	add.w	r6, r7, r6, ror #25
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 801f054:	ea8c 0207 	eor.w	r2, ip, r7
 801f058:	4032      	ands	r2, r6
 801f05a:	ea82 020c 	eor.w	r2, r2, ip
 801f05e:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 801f060:	9506      	str	r5, [sp, #24]
 801f062:	442a      	add	r2, r5
 801f064:	4413      	add	r3, r2
 801f066:	4daf      	ldr	r5, [pc, #700]	@ (801f324 <mg_md5_transform+0x3c4>)
 801f068:	441d      	add	r5, r3
 801f06a:	eb06 5535 	add.w	r5, r6, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 801f06e:	ea87 0306 	eor.w	r3, r7, r6
 801f072:	402b      	ands	r3, r5
 801f074:	407b      	eors	r3, r7
 801f076:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 801f078:	9207      	str	r2, [sp, #28]
 801f07a:	4413      	add	r3, r2
 801f07c:	4463      	add	r3, ip
 801f07e:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 801f082:	3b4f      	subs	r3, #79	@ 0x4f
 801f084:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 801f088:	ea86 0c05 	eor.w	ip, r6, r5
 801f08c:	ea0c 0c03 	and.w	ip, ip, r3
 801f090:	ea8c 0c06 	eor.w	ip, ip, r6
 801f094:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801f096:	9208      	str	r2, [sp, #32]
 801f098:	4494      	add	ip, r2
 801f09a:	4467      	add	r7, ip
 801f09c:	f8df e2a8 	ldr.w	lr, [pc, #680]	@ 801f348 <mg_md5_transform+0x3e8>
 801f0a0:	44be      	add	lr, r7
 801f0a2:	eb03 2ebe 	add.w	lr, r3, lr, ror #10
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 801f0a6:	ea85 0c03 	eor.w	ip, r5, r3
 801f0aa:	ea0c 0c0e 	and.w	ip, ip, lr
 801f0ae:	ea8c 0c05 	eor.w	ip, ip, r5
 801f0b2:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 801f0b4:	44bc      	add	ip, r7
 801f0b6:	4466      	add	r6, ip
 801f0b8:	f8df c290 	ldr.w	ip, [pc, #656]	@ 801f34c <mg_md5_transform+0x3ec>
 801f0bc:	44b4      	add	ip, r6
 801f0be:	eb0e 6c7c 	add.w	ip, lr, ip, ror #25
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 801f0c2:	ea83 080e 	eor.w	r8, r3, lr
 801f0c6:	ea08 080c 	and.w	r8, r8, ip
 801f0ca:	ea88 0803 	eor.w	r8, r8, r3
 801f0ce:	6b4e      	ldr	r6, [r1, #52]	@ 0x34
 801f0d0:	44b0      	add	r8, r6
 801f0d2:	44a8      	add	r8, r5
 801f0d4:	4d94      	ldr	r5, [pc, #592]	@ (801f328 <mg_md5_transform+0x3c8>)
 801f0d6:	4445      	add	r5, r8
 801f0d8:	eb0c 5535 	add.w	r5, ip, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 801f0dc:	ea8e 0b0c 	eor.w	fp, lr, ip
 801f0e0:	ea0b 0b05 	and.w	fp, fp, r5
 801f0e4:	ea8b 0b0e 	eor.w	fp, fp, lr
 801f0e8:	f8d1 8038 	ldr.w	r8, [r1, #56]	@ 0x38
 801f0ec:	44c3      	add	fp, r8
 801f0ee:	449b      	add	fp, r3
 801f0f0:	4b8e      	ldr	r3, [pc, #568]	@ (801f32c <mg_md5_transform+0x3cc>)
 801f0f2:	445b      	add	r3, fp
 801f0f4:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 801f0f8:	ea8c 0b05 	eor.w	fp, ip, r5
 801f0fc:	ea0b 0b03 	and.w	fp, fp, r3
 801f100:	ea8b 0b0c 	eor.w	fp, fp, ip
 801f104:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 801f106:	9109      	str	r1, [sp, #36]	@ 0x24
 801f108:	448b      	add	fp, r1
 801f10a:	44f3      	add	fp, lr
 801f10c:	f8df e240 	ldr.w	lr, [pc, #576]	@ 801f350 <mg_md5_transform+0x3f0>
 801f110:	44de      	add	lr, fp
 801f112:	eb03 2ebe 	add.w	lr, r3, lr, ror #10

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 801f116:	ea83 0b0e 	eor.w	fp, r3, lr
 801f11a:	ea0b 0b05 	and.w	fp, fp, r5
 801f11e:	ea8b 0b03 	eor.w	fp, fp, r3
 801f122:	9a01      	ldr	r2, [sp, #4]
 801f124:	4493      	add	fp, r2
 801f126:	44e3      	add	fp, ip
 801f128:	f8df c228 	ldr.w	ip, [pc, #552]	@ 801f354 <mg_md5_transform+0x3f4>
 801f12c:	44dc      	add	ip, fp
 801f12e:	eb0e 6cfc 	add.w	ip, lr, ip, ror #27
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 801f132:	ea8e 0b0c 	eor.w	fp, lr, ip
 801f136:	ea0b 0b03 	and.w	fp, fp, r3
 801f13a:	ea8b 0b0e 	eor.w	fp, fp, lr
 801f13e:	9a04      	ldr	r2, [sp, #16]
 801f140:	4493      	add	fp, r2
 801f142:	44ab      	add	fp, r5
 801f144:	4d7a      	ldr	r5, [pc, #488]	@ (801f330 <mg_md5_transform+0x3d0>)
 801f146:	445d      	add	r5, fp
 801f148:	eb0c 55f5 	add.w	r5, ip, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 801f14c:	ea8c 0b05 	eor.w	fp, ip, r5
 801f150:	ea0b 0b0e 	and.w	fp, fp, lr
 801f154:	ea8b 0b0c 	eor.w	fp, fp, ip
 801f158:	9908      	ldr	r1, [sp, #32]
 801f15a:	448b      	add	fp, r1
 801f15c:	445b      	add	r3, fp
 801f15e:	f8df b1f8 	ldr.w	fp, [pc, #504]	@ 801f358 <mg_md5_transform+0x3f8>
 801f162:	449b      	add	fp, r3
 801f164:	eb05 4bbb 	add.w	fp, r5, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 801f168:	ea85 030b 	eor.w	r3, r5, fp
 801f16c:	ea03 030c 	and.w	r3, r3, ip
 801f170:	406b      	eors	r3, r5
 801f172:	4453      	add	r3, sl
 801f174:	4473      	add	r3, lr
 801f176:	f8df e1e4 	ldr.w	lr, [pc, #484]	@ 801f35c <mg_md5_transform+0x3fc>
 801f17a:	449e      	add	lr, r3
 801f17c:	eb0b 3e3e 	add.w	lr, fp, lr, ror #12
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 801f180:	ea8b 030e 	eor.w	r3, fp, lr
 801f184:	402b      	ands	r3, r5
 801f186:	ea83 030b 	eor.w	r3, r3, fp
 801f18a:	9a03      	ldr	r2, [sp, #12]
 801f18c:	4413      	add	r3, r2
 801f18e:	449c      	add	ip, r3
 801f190:	4b68      	ldr	r3, [pc, #416]	@ (801f334 <mg_md5_transform+0x3d4>)
 801f192:	4463      	add	r3, ip
 801f194:	eb0e 63f3 	add.w	r3, lr, r3, ror #27
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 801f198:	ea8e 0c03 	eor.w	ip, lr, r3
 801f19c:	ea0c 0c0b 	and.w	ip, ip, fp
 801f1a0:	ea8c 0c0e 	eor.w	ip, ip, lr
 801f1a4:	9a07      	ldr	r2, [sp, #28]
 801f1a6:	4494      	add	ip, r2
 801f1a8:	4465      	add	r5, ip
 801f1aa:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 801f360 <mg_md5_transform+0x400>
 801f1ae:	44ac      	add	ip, r5
 801f1b0:	eb03 5cfc 	add.w	ip, r3, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 801f1b4:	ea83 050c 	eor.w	r5, r3, ip
 801f1b8:	ea05 050e 	and.w	r5, r5, lr
 801f1bc:	405d      	eors	r5, r3
 801f1be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f1c0:	440d      	add	r5, r1
 801f1c2:	445d      	add	r5, fp
 801f1c4:	f8df b19c 	ldr.w	fp, [pc, #412]	@ 801f364 <mg_md5_transform+0x404>
 801f1c8:	44ab      	add	fp, r5
 801f1ca:	eb0c 4bbb 	add.w	fp, ip, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 801f1ce:	ea8c 050b 	eor.w	r5, ip, fp
 801f1d2:	401d      	ands	r5, r3
 801f1d4:	ea85 050c 	eor.w	r5, r5, ip
 801f1d8:	9a02      	ldr	r2, [sp, #8]
 801f1da:	4415      	add	r5, r2
 801f1dc:	44ae      	add	lr, r5
 801f1de:	4d56      	ldr	r5, [pc, #344]	@ (801f338 <mg_md5_transform+0x3d8>)
 801f1e0:	4475      	add	r5, lr
 801f1e2:	eb0b 3535 	add.w	r5, fp, r5, ror #12
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 801f1e6:	ea8b 0e05 	eor.w	lr, fp, r5
 801f1ea:	ea0e 0e0c 	and.w	lr, lr, ip
 801f1ee:	ea8e 0e0b 	eor.w	lr, lr, fp
 801f1f2:	9906      	ldr	r1, [sp, #24]
 801f1f4:	448e      	add	lr, r1
 801f1f6:	4473      	add	r3, lr
 801f1f8:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 801f368 <mg_md5_transform+0x408>
 801f1fc:	449e      	add	lr, r3
 801f1fe:	eb05 6efe 	add.w	lr, r5, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 801f202:	ea85 030e 	eor.w	r3, r5, lr
 801f206:	ea03 030b 	and.w	r3, r3, fp
 801f20a:	406b      	eors	r3, r5
 801f20c:	4443      	add	r3, r8
 801f20e:	4463      	add	r3, ip
 801f210:	f8df c158 	ldr.w	ip, [pc, #344]	@ 801f36c <mg_md5_transform+0x40c>
 801f214:	449c      	add	ip, r3
 801f216:	eb0e 5cfc 	add.w	ip, lr, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 801f21a:	ea8e 030c 	eor.w	r3, lr, ip
 801f21e:	402b      	ands	r3, r5
 801f220:	ea83 030e 	eor.w	r3, r3, lr
 801f224:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f226:	4413      	add	r3, r2
 801f228:	449b      	add	fp, r3
 801f22a:	4b44      	ldr	r3, [pc, #272]	@ (801f33c <mg_md5_transform+0x3dc>)
 801f22c:	445b      	add	r3, fp
 801f22e:	eb0c 43b3 	add.w	r3, ip, r3, ror #18
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 801f232:	ea8c 0b03 	eor.w	fp, ip, r3
 801f236:	ea0b 0b0e 	and.w	fp, fp, lr
 801f23a:	ea8b 0b0c 	eor.w	fp, fp, ip
 801f23e:	9905      	ldr	r1, [sp, #20]
 801f240:	448b      	add	fp, r1
 801f242:	445d      	add	r5, fp
 801f244:	f8df b128 	ldr.w	fp, [pc, #296]	@ 801f370 <mg_md5_transform+0x410>
 801f248:	44ab      	add	fp, r5
 801f24a:	eb03 3b3b 	add.w	fp, r3, fp, ror #12
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 801f24e:	ea83 050b 	eor.w	r5, r3, fp
 801f252:	ea05 050c 	and.w	r5, r5, ip
 801f256:	405d      	eors	r5, r3
 801f258:	4435      	add	r5, r6
 801f25a:	4475      	add	r5, lr
 801f25c:	f8df e114 	ldr.w	lr, [pc, #276]	@ 801f374 <mg_md5_transform+0x414>
 801f260:	44ae      	add	lr, r5
 801f262:	eb0b 6efe 	add.w	lr, fp, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 801f266:	ea8b 050e 	eor.w	r5, fp, lr
 801f26a:	401d      	ands	r5, r3
 801f26c:	ea85 050b 	eor.w	r5, r5, fp
 801f270:	4425      	add	r5, r4
 801f272:	44ac      	add	ip, r5
 801f274:	4d32      	ldr	r5, [pc, #200]	@ (801f340 <mg_md5_transform+0x3e0>)
 801f276:	4465      	add	r5, ip
 801f278:	eb0e 55f5 	add.w	r5, lr, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 801f27c:	ea8e 0c05 	eor.w	ip, lr, r5
 801f280:	ea0c 0c0b 	and.w	ip, ip, fp
 801f284:	ea8c 0c0e 	eor.w	ip, ip, lr
 801f288:	44cc      	add	ip, r9
 801f28a:	4463      	add	r3, ip
 801f28c:	f8df c0e8 	ldr.w	ip, [pc, #232]	@ 801f378 <mg_md5_transform+0x418>
 801f290:	449c      	add	ip, r3
 801f292:	eb05 4cbc 	add.w	ip, r5, ip, ror #18
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 801f296:	ea85 030c 	eor.w	r3, r5, ip
 801f29a:	ea03 030e 	and.w	r3, r3, lr
 801f29e:	406b      	eors	r3, r5
 801f2a0:	443b      	add	r3, r7
 801f2a2:	445b      	add	r3, fp
 801f2a4:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 801f37c <mg_md5_transform+0x41c>
 801f2a8:	449b      	add	fp, r3
 801f2aa:	eb0c 3b3b 	add.w	fp, ip, fp, ror #12

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 801f2ae:	ea8c 030b 	eor.w	r3, ip, fp
 801f2b2:	406b      	eors	r3, r5
 801f2b4:	9a03      	ldr	r2, [sp, #12]
 801f2b6:	4413      	add	r3, r2
 801f2b8:	4473      	add	r3, lr
 801f2ba:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 801f2be:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 801f2c2:	eb0b 7333 	add.w	r3, fp, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 801f2c6:	ea8b 0e03 	eor.w	lr, fp, r3
 801f2ca:	ea8e 0e0c 	eor.w	lr, lr, ip
 801f2ce:	448e      	add	lr, r1
 801f2d0:	44ae      	add	lr, r5
 801f2d2:	4d1c      	ldr	r5, [pc, #112]	@ (801f344 <mg_md5_transform+0x3e4>)
 801f2d4:	4475      	add	r5, lr
 801f2d6:	eb03 5575 	add.w	r5, r3, r5, ror #21
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 801f2da:	ea83 0e05 	eor.w	lr, r3, r5
 801f2de:	ea8e 0e0b 	eor.w	lr, lr, fp
 801f2e2:	9908      	ldr	r1, [sp, #32]
 801f2e4:	448e      	add	lr, r1
 801f2e6:	44f4      	add	ip, lr
 801f2e8:	f8df e094 	ldr.w	lr, [pc, #148]	@ 801f380 <mg_md5_transform+0x420>
 801f2ec:	44e6      	add	lr, ip
 801f2ee:	eb05 4e3e 	add.w	lr, r5, lr, ror #16
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 801f2f2:	ea85 0c0e 	eor.w	ip, r5, lr
 801f2f6:	ea8c 0c03 	eor.w	ip, ip, r3
 801f2fa:	44c4      	add	ip, r8
 801f2fc:	44e3      	add	fp, ip
 801f2fe:	e041      	b.n	801f384 <mg_md5_transform+0x424>
 801f300:	d76aa478 	.word	0xd76aa478
 801f304:	e8c7b756 	.word	0xe8c7b756
 801f308:	242070db 	.word	0x242070db
 801f30c:	c1bdceee 	.word	0xc1bdceee
 801f310:	f57c0faf 	.word	0xf57c0faf
 801f314:	4787c62a 	.word	0x4787c62a
 801f318:	a8304613 	.word	0xa8304613
 801f31c:	fd469501 	.word	0xfd469501
 801f320:	698098d8 	.word	0x698098d8
 801f324:	8b44f7af 	.word	0x8b44f7af
 801f328:	fd987193 	.word	0xfd987193
 801f32c:	a679438e 	.word	0xa679438e
 801f330:	c040b340 	.word	0xc040b340
 801f334:	d62f105d 	.word	0xd62f105d
 801f338:	e7d3fbc8 	.word	0xe7d3fbc8
 801f33c:	f4d50d87 	.word	0xf4d50d87
 801f340:	fcefa3f8 	.word	0xfcefa3f8
 801f344:	8771f681 	.word	0x8771f681
 801f348:	895cd7be 	.word	0x895cd7be
 801f34c:	6b901122 	.word	0x6b901122
 801f350:	49b40821 	.word	0x49b40821
 801f354:	f61e2562 	.word	0xf61e2562
 801f358:	265e5a51 	.word	0x265e5a51
 801f35c:	e9b6c7aa 	.word	0xe9b6c7aa
 801f360:	02441453 	.word	0x02441453
 801f364:	d8a1e681 	.word	0xd8a1e681
 801f368:	21e1cde6 	.word	0x21e1cde6
 801f36c:	c33707d6 	.word	0xc33707d6
 801f370:	455a14ed 	.word	0x455a14ed
 801f374:	a9e3e905 	.word	0xa9e3e905
 801f378:	676f02d9 	.word	0x676f02d9
 801f37c:	8d2a4c8a 	.word	0x8d2a4c8a
 801f380:	6d9d6122 	.word	0x6d9d6122
 801f384:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 801f64c <mg_md5_transform+0x6ec>
 801f388:	44dc      	add	ip, fp
 801f38a:	eb0e 2c7c 	add.w	ip, lr, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 801f38e:	ea8e 0b0c 	eor.w	fp, lr, ip
 801f392:	ea8b 0b05 	eor.w	fp, fp, r5
 801f396:	9a01      	ldr	r2, [sp, #4]
 801f398:	4493      	add	fp, r2
 801f39a:	449b      	add	fp, r3
 801f39c:	4b99      	ldr	r3, [pc, #612]	@ (801f604 <mg_md5_transform+0x6a4>)
 801f39e:	445b      	add	r3, fp
 801f3a0:	eb0c 7333 	add.w	r3, ip, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 801f3a4:	ea8c 0b03 	eor.w	fp, ip, r3
 801f3a8:	ea8b 0b0e 	eor.w	fp, fp, lr
 801f3ac:	9a02      	ldr	r2, [sp, #8]
 801f3ae:	4493      	add	fp, r2
 801f3b0:	445d      	add	r5, fp
 801f3b2:	f8df b29c 	ldr.w	fp, [pc, #668]	@ 801f650 <mg_md5_transform+0x6f0>
 801f3b6:	44ab      	add	fp, r5
 801f3b8:	eb03 5b7b 	add.w	fp, r3, fp, ror #21
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 801f3bc:	ea83 050b 	eor.w	r5, r3, fp
 801f3c0:	ea85 050c 	eor.w	r5, r5, ip
 801f3c4:	444d      	add	r5, r9
 801f3c6:	44ae      	add	lr, r5
 801f3c8:	4d8f      	ldr	r5, [pc, #572]	@ (801f608 <mg_md5_transform+0x6a8>)
 801f3ca:	4475      	add	r5, lr
 801f3cc:	eb0b 4535 	add.w	r5, fp, r5, ror #16
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 801f3d0:	ea8b 0e05 	eor.w	lr, fp, r5
 801f3d4:	ea8e 0e03 	eor.w	lr, lr, r3
 801f3d8:	9a07      	ldr	r2, [sp, #28]
 801f3da:	4496      	add	lr, r2
 801f3dc:	44e6      	add	lr, ip
 801f3de:	f8df c274 	ldr.w	ip, [pc, #628]	@ 801f654 <mg_md5_transform+0x6f4>
 801f3e2:	44f4      	add	ip, lr
 801f3e4:	eb05 2c7c 	add.w	ip, r5, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 801f3e8:	ea85 0e0c 	eor.w	lr, r5, ip
 801f3ec:	ea8e 0e0b 	eor.w	lr, lr, fp
 801f3f0:	44b6      	add	lr, r6
 801f3f2:	4473      	add	r3, lr
 801f3f4:	f8df e260 	ldr.w	lr, [pc, #608]	@ 801f658 <mg_md5_transform+0x6f8>
 801f3f8:	449e      	add	lr, r3
 801f3fa:	eb0c 7e3e 	add.w	lr, ip, lr, ror #28
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 801f3fe:	ea8c 030e 	eor.w	r3, ip, lr
 801f402:	406b      	eors	r3, r5
 801f404:	4453      	add	r3, sl
 801f406:	449b      	add	fp, r3
 801f408:	4b80      	ldr	r3, [pc, #512]	@ (801f60c <mg_md5_transform+0x6ac>)
 801f40a:	445b      	add	r3, fp
 801f40c:	eb0e 5373 	add.w	r3, lr, r3, ror #21
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 801f410:	ea8e 0b03 	eor.w	fp, lr, r3
 801f414:	ea8b 0b0c 	eor.w	fp, fp, ip
 801f418:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f41a:	4493      	add	fp, r2
 801f41c:	445d      	add	r5, fp
 801f41e:	f8df b23c 	ldr.w	fp, [pc, #572]	@ 801f65c <mg_md5_transform+0x6fc>
 801f422:	44ab      	add	fp, r5
 801f424:	eb03 4b3b 	add.w	fp, r3, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 801f428:	ea83 050b 	eor.w	r5, r3, fp
 801f42c:	ea85 050e 	eor.w	r5, r5, lr
 801f430:	9904      	ldr	r1, [sp, #16]
 801f432:	440d      	add	r5, r1
 801f434:	4465      	add	r5, ip
 801f436:	f8df c228 	ldr.w	ip, [pc, #552]	@ 801f660 <mg_md5_transform+0x700>
 801f43a:	44ac      	add	ip, r5
 801f43c:	eb0b 2c7c 	add.w	ip, fp, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 801f440:	ea8b 050c 	eor.w	r5, fp, ip
 801f444:	405d      	eors	r5, r3
 801f446:	9906      	ldr	r1, [sp, #24]
 801f448:	440d      	add	r5, r1
 801f44a:	44ae      	add	lr, r5
 801f44c:	4d70      	ldr	r5, [pc, #448]	@ (801f610 <mg_md5_transform+0x6b0>)
 801f44e:	4475      	add	r5, lr
 801f450:	eb0c 7535 	add.w	r5, ip, r5, ror #28
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 801f454:	ea8c 0e05 	eor.w	lr, ip, r5
 801f458:	ea8e 0e0b 	eor.w	lr, lr, fp
 801f45c:	44be      	add	lr, r7
 801f45e:	4473      	add	r3, lr
 801f460:	f8df e200 	ldr.w	lr, [pc, #512]	@ 801f664 <mg_md5_transform+0x704>
 801f464:	449e      	add	lr, r3
 801f466:	eb05 5e7e 	add.w	lr, r5, lr, ror #21
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 801f46a:	ea85 030e 	eor.w	r3, r5, lr
 801f46e:	ea83 030c 	eor.w	r3, r3, ip
 801f472:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f474:	440b      	add	r3, r1
 801f476:	445b      	add	r3, fp
 801f478:	f8df b1ec 	ldr.w	fp, [pc, #492]	@ 801f668 <mg_md5_transform+0x708>
 801f47c:	449b      	add	fp, r3
 801f47e:	eb0e 4b3b 	add.w	fp, lr, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 801f482:	ea8e 030b 	eor.w	r3, lr, fp
 801f486:	406b      	eors	r3, r5
 801f488:	940a      	str	r4, [sp, #40]	@ 0x28
 801f48a:	4423      	add	r3, r4
 801f48c:	449c      	add	ip, r3
 801f48e:	4b61      	ldr	r3, [pc, #388]	@ (801f614 <mg_md5_transform+0x6b4>)
 801f490:	4463      	add	r3, ip
 801f492:	eb0b 2373 	add.w	r3, fp, r3, ror #9

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 801f496:	ea63 0c0e 	orn	ip, r3, lr
 801f49a:	ea8c 0c0b 	eor.w	ip, ip, fp
 801f49e:	44e2      	add	sl, ip
 801f4a0:	44aa      	add	sl, r5
 801f4a2:	4d5d      	ldr	r5, [pc, #372]	@ (801f618 <mg_md5_transform+0x6b8>)
 801f4a4:	4455      	add	r5, sl
 801f4a6:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 801f4aa:	ea65 0c0b 	orn	ip, r5, fp
 801f4ae:	ea8c 0c03 	eor.w	ip, ip, r3
 801f4b2:	44e1      	add	r9, ip
 801f4b4:	44f1      	add	r9, lr
 801f4b6:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 801f66c <mg_md5_transform+0x70c>
 801f4ba:	44cc      	add	ip, r9
 801f4bc:	eb05 5cbc 	add.w	ip, r5, ip, ror #22
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 801f4c0:	ea6c 0e03 	orn	lr, ip, r3
 801f4c4:	ea8e 0e05 	eor.w	lr, lr, r5
 801f4c8:	44f0      	add	r8, lr
 801f4ca:	44d8      	add	r8, fp
 801f4cc:	f8df e1a0 	ldr.w	lr, [pc, #416]	@ 801f670 <mg_md5_transform+0x710>
 801f4d0:	44c6      	add	lr, r8
 801f4d2:	eb0c 4e7e 	add.w	lr, ip, lr, ror #17
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 801f4d6:	ea6e 0805 	orn	r8, lr, r5
 801f4da:	ea88 080c 	eor.w	r8, r8, ip
 801f4de:	9c03      	ldr	r4, [sp, #12]
 801f4e0:	44a0      	add	r8, r4
 801f4e2:	4498      	add	r8, r3
 801f4e4:	4b4d      	ldr	r3, [pc, #308]	@ (801f61c <mg_md5_transform+0x6bc>)
 801f4e6:	4443      	add	r3, r8
 801f4e8:	eb0e 23f3 	add.w	r3, lr, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 801f4ec:	ea63 080c 	orn	r8, r3, ip
 801f4f0:	ea88 080e 	eor.w	r8, r8, lr
 801f4f4:	4447      	add	r7, r8
 801f4f6:	442f      	add	r7, r5
 801f4f8:	4d49      	ldr	r5, [pc, #292]	@ (801f620 <mg_md5_transform+0x6c0>)
 801f4fa:	443d      	add	r5, r7
 801f4fc:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 801f500:	ea65 070e 	orn	r7, r5, lr
 801f504:	405f      	eors	r7, r3
 801f506:	4417      	add	r7, r2
 801f508:	44bc      	add	ip, r7
 801f50a:	4f46      	ldr	r7, [pc, #280]	@ (801f624 <mg_md5_transform+0x6c4>)
 801f50c:	4467      	add	r7, ip
 801f50e:	eb05 57b7 	add.w	r7, r5, r7, ror #22
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 801f512:	ea67 0c03 	orn	ip, r7, r3
 801f516:	ea8c 0c05 	eor.w	ip, ip, r5
 801f51a:	9a07      	ldr	r2, [sp, #28]
 801f51c:	4462      	add	r2, ip
 801f51e:	4472      	add	r2, lr
 801f520:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 801f524:	f6a2 3283 	subw	r2, r2, #2947	@ 0xb83
 801f528:	eb07 4272 	add.w	r2, r7, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 801f52c:	ea62 0c05 	orn	ip, r2, r5
 801f530:	ea8c 0c07 	eor.w	ip, ip, r7
 801f534:	9c01      	ldr	r4, [sp, #4]
 801f536:	44a4      	add	ip, r4
 801f538:	449c      	add	ip, r3
 801f53a:	4b3b      	ldr	r3, [pc, #236]	@ (801f628 <mg_md5_transform+0x6c8>)
 801f53c:	4463      	add	r3, ip
 801f53e:	eb02 23f3 	add.w	r3, r2, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 801f542:	ea63 0c07 	orn	ip, r3, r7
 801f546:	ea8c 0c02 	eor.w	ip, ip, r2
 801f54a:	9905      	ldr	r1, [sp, #20]
 801f54c:	448c      	add	ip, r1
 801f54e:	44ac      	add	ip, r5
 801f550:	4d36      	ldr	r5, [pc, #216]	@ (801f62c <mg_md5_transform+0x6cc>)
 801f552:	4465      	add	r5, ip
 801f554:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 801f558:	ea65 0c02 	orn	ip, r5, r2
 801f55c:	ea8c 0c03 	eor.w	ip, ip, r3
 801f560:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f562:	4461      	add	r1, ip
 801f564:	440f      	add	r7, r1
 801f566:	4932      	ldr	r1, [pc, #200]	@ (801f630 <mg_md5_transform+0x6d0>)
 801f568:	4439      	add	r1, r7
 801f56a:	eb05 51b1 	add.w	r1, r5, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 801f56e:	ea61 0703 	orn	r7, r1, r3
 801f572:	406f      	eors	r7, r5
 801f574:	9c04      	ldr	r4, [sp, #16]
 801f576:	4427      	add	r7, r4
 801f578:	4417      	add	r7, r2
 801f57a:	4a2e      	ldr	r2, [pc, #184]	@ (801f634 <mg_md5_transform+0x6d4>)
 801f57c:	443a      	add	r2, r7
 801f57e:	eb01 4272 	add.w	r2, r1, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 801f582:	ea62 0705 	orn	r7, r2, r5
 801f586:	404f      	eors	r7, r1
 801f588:	443e      	add	r6, r7
 801f58a:	4433      	add	r3, r6
 801f58c:	4e2a      	ldr	r6, [pc, #168]	@ (801f638 <mg_md5_transform+0x6d8>)
 801f58e:	441e      	add	r6, r3
 801f590:	eb02 26f6 	add.w	r6, r2, r6, ror #11
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 801f594:	ea66 0301 	orn	r3, r6, r1
 801f598:	4053      	eors	r3, r2
 801f59a:	9f02      	ldr	r7, [sp, #8]
 801f59c:	443b      	add	r3, r7
 801f59e:	441d      	add	r5, r3
 801f5a0:	4b26      	ldr	r3, [pc, #152]	@ (801f63c <mg_md5_transform+0x6dc>)
 801f5a2:	442b      	add	r3, r5
 801f5a4:	eb06 63b3 	add.w	r3, r6, r3, ror #26
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 801f5a8:	ea63 0502 	orn	r5, r3, r2
 801f5ac:	4075      	eors	r5, r6
 801f5ae:	9f08      	ldr	r7, [sp, #32]
 801f5b0:	443d      	add	r5, r7
 801f5b2:	440d      	add	r5, r1
 801f5b4:	4922      	ldr	r1, [pc, #136]	@ (801f640 <mg_md5_transform+0x6e0>)
 801f5b6:	4429      	add	r1, r5
 801f5b8:	eb03 51b1 	add.w	r1, r3, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 801f5bc:	ea61 0506 	orn	r5, r1, r6
 801f5c0:	405d      	eors	r5, r3
 801f5c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f5c4:	4425      	add	r5, r4
 801f5c6:	442a      	add	r2, r5
 801f5c8:	4d1e      	ldr	r5, [pc, #120]	@ (801f644 <mg_md5_transform+0x6e4>)
 801f5ca:	4415      	add	r5, r2
 801f5cc:	eb01 4575 	add.w	r5, r1, r5, ror #17
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 801f5d0:	ea65 0203 	orn	r2, r5, r3
 801f5d4:	404a      	eors	r2, r1
 801f5d6:	9c06      	ldr	r4, [sp, #24]
 801f5d8:	4422      	add	r2, r4
 801f5da:	4432      	add	r2, r6
 801f5dc:	4e1a      	ldr	r6, [pc, #104]	@ (801f648 <mg_md5_transform+0x6e8>)
 801f5de:	4416      	add	r6, r2
 801f5e0:	eb05 26f6 	add.w	r6, r5, r6, ror #11

  buf[0] += a;
 801f5e4:	6802      	ldr	r2, [r0, #0]
 801f5e6:	4413      	add	r3, r2
 801f5e8:	6003      	str	r3, [r0, #0]
  buf[1] += b;
 801f5ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f5ec:	4434      	add	r4, r6
 801f5ee:	6044      	str	r4, [r0, #4]
  buf[2] += c;
 801f5f0:	6883      	ldr	r3, [r0, #8]
 801f5f2:	441d      	add	r5, r3
 801f5f4:	6085      	str	r5, [r0, #8]
  buf[3] += d;
 801f5f6:	68c3      	ldr	r3, [r0, #12]
 801f5f8:	4419      	add	r1, r3
 801f5fa:	60c1      	str	r1, [r0, #12]
}
 801f5fc:	b00d      	add	sp, #52	@ 0x34
 801f5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f602:	bf00      	nop
 801f604:	a4beea44 	.word	0xa4beea44
 801f608:	f6bb4b60 	.word	0xf6bb4b60
 801f60c:	eaa127fa 	.word	0xeaa127fa
 801f610:	d9d4d039 	.word	0xd9d4d039
 801f614:	c4ac5665 	.word	0xc4ac5665
 801f618:	f4292244 	.word	0xf4292244
 801f61c:	fc93a039 	.word	0xfc93a039
 801f620:	655b59c3 	.word	0x655b59c3
 801f624:	8f0ccc92 	.word	0x8f0ccc92
 801f628:	85845dd1 	.word	0x85845dd1
 801f62c:	6fa87e4f 	.word	0x6fa87e4f
 801f630:	fe2ce6e0 	.word	0xfe2ce6e0
 801f634:	a3014314 	.word	0xa3014314
 801f638:	4e0811a1 	.word	0x4e0811a1
 801f63c:	f7537e82 	.word	0xf7537e82
 801f640:	bd3af235 	.word	0xbd3af235
 801f644:	2ad7d2bb 	.word	0x2ad7d2bb
 801f648:	eb86d391 	.word	0xeb86d391
 801f64c:	fde5380c 	.word	0xfde5380c
 801f650:	4bdecfa9 	.word	0x4bdecfa9
 801f654:	bebfbc70 	.word	0xbebfbc70
 801f658:	289b7ec6 	.word	0x289b7ec6
 801f65c:	d4ef3085 	.word	0xd4ef3085
 801f660:	04881d05 	.word	0x04881d05
 801f664:	e6db99e5 	.word	0xe6db99e5
 801f668:	1fa27cf8 	.word	0x1fa27cf8
 801f66c:	432aff97 	.word	0x432aff97
 801f670:	ab9423a7 	.word	0xab9423a7

0801f674 <varint_size>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
  mg_send(c, &value, sizeof(value));
}

static uint8_t varint_size(size_t length) {
 801f674:	4602      	mov	r2, r0
  uint8_t bytes_needed = 0;
 801f676:	2000      	movs	r0, #0
  do {
    bytes_needed++;
 801f678:	3001      	adds	r0, #1
 801f67a:	b2c0      	uxtb	r0, r0
    length /= 0x80;
  } while (length > 0);
 801f67c:	2a7f      	cmp	r2, #127	@ 0x7f
 801f67e:	ea4f 12d2 	mov.w	r2, r2, lsr #7
 801f682:	d8f9      	bhi.n	801f678 <varint_size+0x4>
  return bytes_needed;
}
 801f684:	4770      	bx	lr

0801f686 <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 801f686:	b500      	push	{lr}
 801f688:	4686      	mov	lr, r0
  size_t len = 0;
 801f68a:	2300      	movs	r3, #0
 801f68c:	e007      	b.n	801f69e <encode_varint+0x18>

  do {
    uint8_t b = (uint8_t) (value % 128);
    value /= 128;
    if (value > 0) b |= 0x80;
 801f68e:	f04c 0c80 	orr.w	ip, ip, #128	@ 0x80
    buf[len++] = b;
 801f692:	1c58      	adds	r0, r3, #1
 801f694:	f80e c003 	strb.w	ip, [lr, r3]
  } while (value > 0);
 801f698:	2a7f      	cmp	r2, #127	@ 0x7f
 801f69a:	d907      	bls.n	801f6ac <encode_varint+0x26>
    buf[len++] = b;
 801f69c:	4603      	mov	r3, r0
    uint8_t b = (uint8_t) (value % 128);
 801f69e:	f001 0c7f 	and.w	ip, r1, #127	@ 0x7f
    value /= 128;
 801f6a2:	460a      	mov	r2, r1
 801f6a4:	09c9      	lsrs	r1, r1, #7
    if (value > 0) b |= 0x80;
 801f6a6:	2a7f      	cmp	r2, #127	@ 0x7f
 801f6a8:	d9f3      	bls.n	801f692 <encode_varint+0xc>
 801f6aa:	e7f0      	b.n	801f68e <encode_varint+0x8>

  return len;
}
 801f6ac:	f85d fb04 	ldr.w	pc, [sp], #4

0801f6b0 <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
  size_t multiplier = 1, offset;
  *value = 0;
 801f6b0:	2300      	movs	r3, #0
 801f6b2:	6013      	str	r3, [r2, #0]
  size_t multiplier = 1, offset;
 801f6b4:	f04f 0c01 	mov.w	ip, #1

  for (offset = 0; offset < 4 && offset < len; offset++) {
 801f6b8:	2b03      	cmp	r3, #3
 801f6ba:	d81d      	bhi.n	801f6f8 <decode_varint+0x48>
 801f6bc:	428b      	cmp	r3, r1
 801f6be:	d219      	bcs.n	801f6f4 <decode_varint+0x44>
static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 801f6c0:	b530      	push	{r4, r5, lr}
 801f6c2:	e003      	b.n	801f6cc <decode_varint+0x1c>
    uint8_t encoded_byte = buf[offset];
    *value += (encoded_byte & 0x7f) * multiplier;
    multiplier *= 128;

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 801f6c4:	1c58      	adds	r0, r3, #1
 801f6c6:	e012      	b.n	801f6ee <decode_varint+0x3e>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 801f6c8:	428b      	cmp	r3, r1
 801f6ca:	d211      	bcs.n	801f6f0 <decode_varint+0x40>
    uint8_t encoded_byte = buf[offset];
 801f6cc:	f810 e003 	ldrb.w	lr, [r0, r3]
    *value += (encoded_byte & 0x7f) * multiplier;
 801f6d0:	f00e 047f 	and.w	r4, lr, #127	@ 0x7f
 801f6d4:	6815      	ldr	r5, [r2, #0]
 801f6d6:	fb0c 5404 	mla	r4, ip, r4, r5
 801f6da:	6014      	str	r4, [r2, #0]
    multiplier *= 128;
 801f6dc:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
    if ((encoded_byte & 0x80) == 0) return offset + 1;
 801f6e0:	f01e 0f80 	tst.w	lr, #128	@ 0x80
 801f6e4:	d0ee      	beq.n	801f6c4 <decode_varint+0x14>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 801f6e6:	3301      	adds	r3, #1
 801f6e8:	2b03      	cmp	r3, #3
 801f6ea:	d9ed      	bls.n	801f6c8 <decode_varint+0x18>
  }

  return 0;
 801f6ec:	2000      	movs	r0, #0
}
 801f6ee:	bd30      	pop	{r4, r5, pc}
  return 0;
 801f6f0:	2000      	movs	r0, #0
 801f6f2:	e7fc      	b.n	801f6ee <decode_varint+0x3e>
 801f6f4:	2000      	movs	r0, #0
 801f6f6:	4770      	bx	lr
 801f6f8:	2000      	movs	r0, #0
}
 801f6fa:	4770      	bx	lr

0801f6fc <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
  for (i = 0; i < num_properties; ++i) {
 801f6fc:	2300      	movs	r3, #0
 801f6fe:	2b1a      	cmp	r3, #26
 801f700:	d80b      	bhi.n	801f71a <mqtt_prop_type_by_id+0x1e>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 801f702:	4a07      	ldr	r2, [pc, #28]	@ (801f720 <mqtt_prop_type_by_id+0x24>)
 801f704:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801f708:	4282      	cmp	r2, r0
 801f70a:	d001      	beq.n	801f710 <mqtt_prop_type_by_id+0x14>
  for (i = 0; i < num_properties; ++i) {
 801f70c:	3301      	adds	r3, #1
 801f70e:	e7f6      	b.n	801f6fe <mqtt_prop_type_by_id+0x2>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 801f710:	4a03      	ldr	r2, [pc, #12]	@ (801f720 <mqtt_prop_type_by_id+0x24>)
 801f712:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f716:	7858      	ldrb	r0, [r3, #1]
 801f718:	4770      	bx	lr
  }
  return -1;  // Property ID not found
 801f71a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 801f71e:	4770      	bx	lr
 801f720:	08037b90 	.word	0x08037b90

0801f724 <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 801f724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f728:	4606      	mov	r6, r0
 801f72a:	4688      	mov	r8, r1
  size_t i, size = 0;
 801f72c:	2500      	movs	r5, #0
  for (i = 0; i < count; i++) {
 801f72e:	462c      	mov	r4, r5
 801f730:	e005      	b.n	801f73e <get_properties_length+0x1a>
    size++;  // identifier
    switch (mqtt_prop_type_by_id(props[i].id)) {
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 801f732:	697d      	ldr	r5, [r7, #20]
 801f734:	68fb      	ldr	r3, [r7, #12]
 801f736:	441d      	add	r5, r3
 801f738:	444d      	add	r5, r9
 801f73a:	3504      	adds	r5, #4
  for (i = 0; i < count; i++) {
 801f73c:	3401      	adds	r4, #1
 801f73e:	4544      	cmp	r4, r8
 801f740:	d231      	bcs.n	801f7a6 <get_properties_length+0x82>
    size++;  // identifier
 801f742:	f105 0901 	add.w	r9, r5, #1
    switch (mqtt_prop_type_by_id(props[i].id)) {
 801f746:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801f74a:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
 801f74e:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
 801f752:	f7ff ffd3 	bl	801f6fc <mqtt_prop_type_by_id>
 801f756:	2806      	cmp	r0, #6
 801f758:	d824      	bhi.n	801f7a4 <get_properties_length+0x80>
 801f75a:	a301      	add	r3, pc, #4	@ (adr r3, 801f760 <get_properties_length+0x3c>)
 801f75c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 801f760:	0801f7a1 	.word	0x0801f7a1
 801f764:	0801f77d 	.word	0x0801f77d
 801f768:	0801f733 	.word	0x0801f733
 801f76c:	0801f785 	.word	0x0801f785
 801f770:	0801f78d 	.word	0x0801f78d
 801f774:	0801f799 	.word	0x0801f799
 801f778:	0801f79d 	.word	0x0801f79d
                            2 * sizeof(uint16_t));
        break;
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 801f77c:	697d      	ldr	r5, [r7, #20]
 801f77e:	444d      	add	r5, r9
 801f780:	3502      	adds	r5, #2
        break;
 801f782:	e7db      	b.n	801f73c <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 801f784:	697d      	ldr	r5, [r7, #20]
 801f786:	444d      	add	r5, r9
 801f788:	3502      	adds	r5, #2
        break;
 801f78a:	e7d7      	b.n	801f73c <get_properties_length+0x18>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 801f78c:	6878      	ldr	r0, [r7, #4]
 801f78e:	f7ff ff71 	bl	801f674 <varint_size>
 801f792:	eb00 0509 	add.w	r5, r0, r9
        break;
 801f796:	e7d1      	b.n	801f73c <get_properties_length+0x18>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 801f798:	3505      	adds	r5, #5
        break;
 801f79a:	e7cf      	b.n	801f73c <get_properties_length+0x18>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 801f79c:	3503      	adds	r5, #3
        break;
 801f79e:	e7cd      	b.n	801f73c <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 801f7a0:	3502      	adds	r5, #2
        break;
 801f7a2:	e7cb      	b.n	801f73c <get_properties_length+0x18>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 801f7a4:	464d      	mov	r5, r9
        return size;  // cannot parse further down
    }
  }

  return size;
}
 801f7a6:	4628      	mov	r0, r5
 801f7a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801f7ac <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 801f7ac:	b510      	push	{r4, lr}
  size_t size = get_properties_length(props, count);
 801f7ae:	f7ff ffb9 	bl	801f724 <get_properties_length>
 801f7b2:	4604      	mov	r4, r0
  size += varint_size(size);
 801f7b4:	f7ff ff5e 	bl	801f674 <varint_size>
  return size;
}
 801f7b8:	4420      	add	r0, r4
 801f7ba:	bd10      	pop	{r4, pc}

0801f7bc <mg_aton4>:
  memset(addr->ip, 0, sizeof(addr->ip));
  addr->is_ip6 = false;
  return true;
}

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 801f7bc:	b410      	push	{r4}
 801f7be:	b085      	sub	sp, #20
 801f7c0:	466b      	mov	r3, sp
 801f7c2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t data[4] = {0, 0, 0, 0};
 801f7c6:	2300      	movs	r3, #0
 801f7c8:	9303      	str	r3, [sp, #12]
  size_t i, num_dots = 0;
 801f7ca:	469c      	mov	ip, r3
  for (i = 0; i < str.len; i++) {
 801f7cc:	9901      	ldr	r1, [sp, #4]
 801f7ce:	4299      	cmp	r1, r3
 801f7d0:	d92c      	bls.n	801f82c <mg_aton4+0x70>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 801f7d2:	9c00      	ldr	r4, [sp, #0]
 801f7d4:	5ce1      	ldrb	r1, [r4, r3]
 801f7d6:	f1a1 0030 	sub.w	r0, r1, #48	@ 0x30
 801f7da:	b2c0      	uxtb	r0, r0
 801f7dc:	2809      	cmp	r0, #9
 801f7de:	d812      	bhi.n	801f806 <mg_aton4+0x4a>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 801f7e0:	f10c 0010 	add.w	r0, ip, #16
 801f7e4:	4468      	add	r0, sp
 801f7e6:	f810 0c04 	ldrb.w	r0, [r0, #-4]
 801f7ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801f7ee:	3930      	subs	r1, #48	@ 0x30
 801f7f0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
      if (octet > 255) return false;
 801f7f4:	29ff      	cmp	r1, #255	@ 0xff
 801f7f6:	dc28      	bgt.n	801f84a <mg_aton4+0x8e>
      data[num_dots] = (uint8_t) octet;
 801f7f8:	f10c 0010 	add.w	r0, ip, #16
 801f7fc:	4468      	add	r0, sp
 801f7fe:	f800 1c04 	strb.w	r1, [r0, #-4]
  for (i = 0; i < str.len; i++) {
 801f802:	3301      	adds	r3, #1
 801f804:	e7e2      	b.n	801f7cc <mg_aton4+0x10>
    } else if (str.buf[i] == '.') {
 801f806:	292e      	cmp	r1, #46	@ 0x2e
 801f808:	d121      	bne.n	801f84e <mg_aton4+0x92>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 801f80a:	f1bc 0f02 	cmp.w	ip, #2
 801f80e:	d820      	bhi.n	801f852 <mg_aton4+0x96>
 801f810:	b923      	cbnz	r3, 801f81c <mg_aton4+0x60>
 801f812:	2000      	movs	r0, #0
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
  memcpy(&addr->ip, data, sizeof(data));
  addr->is_ip6 = false;
  return true;
}
 801f814:	b005      	add	sp, #20
 801f816:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f81a:	4770      	bx	lr
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 801f81c:	441c      	add	r4, r3
 801f81e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801f822:	292e      	cmp	r1, #46	@ 0x2e
 801f824:	d017      	beq.n	801f856 <mg_aton4+0x9a>
      num_dots++;
 801f826:	f10c 0c01 	add.w	ip, ip, #1
 801f82a:	e7ea      	b.n	801f802 <mg_aton4+0x46>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 801f82c:	f1bc 0f03 	cmp.w	ip, #3
 801f830:	d113      	bne.n	801f85a <mg_aton4+0x9e>
 801f832:	9900      	ldr	r1, [sp, #0]
 801f834:	4419      	add	r1, r3
 801f836:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 801f83a:	2b2e      	cmp	r3, #46	@ 0x2e
 801f83c:	d00f      	beq.n	801f85e <mg_aton4+0xa2>
  memcpy(&addr->ip, data, sizeof(data));
 801f83e:	9b03      	ldr	r3, [sp, #12]
 801f840:	6013      	str	r3, [r2, #0]
  addr->is_ip6 = false;
 801f842:	2300      	movs	r3, #0
 801f844:	74d3      	strb	r3, [r2, #19]
  return true;
 801f846:	2001      	movs	r0, #1
 801f848:	e7e4      	b.n	801f814 <mg_aton4+0x58>
      if (octet > 255) return false;
 801f84a:	2000      	movs	r0, #0
 801f84c:	e7e2      	b.n	801f814 <mg_aton4+0x58>
      return false;
 801f84e:	2000      	movs	r0, #0
 801f850:	e7e0      	b.n	801f814 <mg_aton4+0x58>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 801f852:	2000      	movs	r0, #0
 801f854:	e7de      	b.n	801f814 <mg_aton4+0x58>
 801f856:	2000      	movs	r0, #0
 801f858:	e7dc      	b.n	801f814 <mg_aton4+0x58>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 801f85a:	2000      	movs	r0, #0
 801f85c:	e7da      	b.n	801f814 <mg_aton4+0x58>
 801f85e:	2000      	movs	r0, #0
 801f860:	e7d8      	b.n	801f814 <mg_aton4+0x58>

0801f862 <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 801f862:	b508      	push	{r3, lr}
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 801f864:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801f866:	b103      	cbz	r3, 801f86a <mg_tcpip_call+0x8>
 801f868:	4798      	blx	r3
}
 801f86a:	bd08      	pop	{r3, pc}

0801f86c <csumup>:
}

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 801f86c:	2300      	movs	r3, #0
 801f86e:	e005      	b.n	801f87c <csumup+0x10>
 801f870:	f811 c003 	ldrb.w	ip, [r1, r3]
 801f874:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 801f878:	4460      	add	r0, ip
 801f87a:	3301      	adds	r3, #1
 801f87c:	4293      	cmp	r3, r2
 801f87e:	d205      	bcs.n	801f88c <csumup+0x20>
 801f880:	f013 0f01 	tst.w	r3, #1
 801f884:	d0f4      	beq.n	801f870 <csumup+0x4>
 801f886:	f811 c003 	ldrb.w	ip, [r1, r3]
 801f88a:	e7f5      	b.n	801f878 <csumup+0xc>
  return sum;
}
 801f88c:	4770      	bx	lr

0801f88e <ether_output>:
  s->timer = ifp->now + n;
  s->ttype = type;
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
}

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 801f88e:	b538      	push	{r3, r4, r5, lr}
 801f890:	4604      	mov	r4, r0
 801f892:	460d      	mov	r5, r1
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 801f894:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801f896:	685b      	ldr	r3, [r3, #4]
 801f898:	4602      	mov	r2, r0
 801f89a:	6940      	ldr	r0, [r0, #20]
 801f89c:	4798      	blx	r3
  if (n == len) ifp->nsent++;
 801f89e:	4285      	cmp	r5, r0
 801f8a0:	d000      	beq.n	801f8a4 <ether_output+0x16>
  return n;
}
 801f8a2:	bd38      	pop	{r3, r4, r5, pc}
  if (n == len) ifp->nsent++;
 801f8a4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801f8a6:	3301      	adds	r3, #1
 801f8a8:	6763      	str	r3, [r4, #116]	@ 0x74
  return n;
 801f8aa:	e7fa      	b.n	801f8a2 <ether_output+0x14>

0801f8ac <can_write>:
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
  mg_close_conn(c);
}

static bool can_write(struct mg_connection *c) {
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 801f8ac:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 801f8b0:	f013 0f28 	tst.w	r3, #40	@ 0x28
 801f8b4:	d106      	bne.n	801f8c4 <can_write+0x18>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 801f8b6:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 801f8b8:	b132      	cbz	r2, 801f8c8 <can_write+0x1c>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 801f8ba:	f013 0f90 	tst.w	r3, #144	@ 0x90
 801f8be:	d005      	beq.n	801f8cc <can_write+0x20>
 801f8c0:	2000      	movs	r0, #0
 801f8c2:	4770      	bx	lr
 801f8c4:	2000      	movs	r0, #0
 801f8c6:	4770      	bx	lr
 801f8c8:	2000      	movs	r0, #0
 801f8ca:	4770      	bx	lr
 801f8cc:	2001      	movs	r0, #1
}
 801f8ce:	4770      	bx	lr

0801f8d0 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 801f8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f8d4:	4607      	mov	r7, r0
 801f8d6:	460e      	mov	r6, r1
  size_t bl = (size_t) va_arg(*ap, int);
 801f8d8:	6811      	ldr	r1, [r2, #0]
 801f8da:	1d0b      	adds	r3, r1, #4
 801f8dc:	6013      	str	r3, [r2, #0]
 801f8de:	f8d1 9000 	ldr.w	r9, [r1]
  uint8_t *p = va_arg(*ap, uint8_t *);
 801f8e2:	f101 0308 	add.w	r3, r1, #8
 801f8e6:	6013      	str	r3, [r2, #0]
 801f8e8:	f8d1 8004 	ldr.w	r8, [r1, #4]
  const char *hex = "0123456789abcdef";
  size_t j;
  for (j = 0; j < bl; j++) {
 801f8ec:	2400      	movs	r4, #0
 801f8ee:	e00e      	b.n	801f90e <mg_print_hex+0x3e>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 801f8f0:	f818 3004 	ldrb.w	r3, [r8, r4]
 801f8f4:	091b      	lsrs	r3, r3, #4
 801f8f6:	4d09      	ldr	r5, [pc, #36]	@ (801f91c <mg_print_hex+0x4c>)
 801f8f8:	4631      	mov	r1, r6
 801f8fa:	5ce8      	ldrb	r0, [r5, r3]
 801f8fc:	47b8      	blx	r7
    out(hex[p[j] & 0x0F], arg);
 801f8fe:	f818 3004 	ldrb.w	r3, [r8, r4]
 801f902:	f003 030f 	and.w	r3, r3, #15
 801f906:	4631      	mov	r1, r6
 801f908:	5ce8      	ldrb	r0, [r5, r3]
 801f90a:	47b8      	blx	r7
  for (j = 0; j < bl; j++) {
 801f90c:	3401      	adds	r4, #1
 801f90e:	454c      	cmp	r4, r9
 801f910:	d3ee      	bcc.n	801f8f0 <mg_print_hex+0x20>
  }
  return 2 * bl;
}
 801f912:	ea4f 0049 	mov.w	r0, r9, lsl #1
 801f916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f91a:	bf00      	nop
 801f91c:	08036364 	.word	0x08036364

0801f920 <mg_tolc>:
  struct mg_str str = {(char *) s, n};
  return str;
}

static int mg_tolc(char c) {
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 801f920:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801f924:	b2db      	uxtb	r3, r3
 801f926:	2b19      	cmp	r3, #25
 801f928:	d800      	bhi.n	801f92c <mg_tolc+0xc>
 801f92a:	3020      	adds	r0, #32
}
 801f92c:	4770      	bx	lr

0801f92e <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 801f92e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f932:	b082      	sub	sp, #8
 801f934:	4605      	mov	r5, r0
 801f936:	9e08      	ldr	r6, [sp, #32]
 801f938:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  size_t i;
  uint8_t *p = (uint8_t *) buf;
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 801f93a:	0a10      	lsrs	r0, r2, #8
 801f93c:	f88d 0004 	strb.w	r0, [sp, #4]
 801f940:	f88d 2005 	strb.w	r2, [sp, #5]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 801f944:	00c9      	lsls	r1, r1, #3
 801f946:	b249      	sxtb	r1, r1
 801f948:	4698      	mov	r8, r3
 801f94a:	b143      	cbz	r3, 801f95e <w5500_txn+0x30>
 801f94c:	2304      	movs	r3, #4
 801f94e:	4319      	orrs	r1, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 801f950:	f88d 1006 	strb.w	r1, [sp, #6]
  s->begin(s->spi);
 801f954:	686b      	ldr	r3, [r5, #4]
 801f956:	6828      	ldr	r0, [r5, #0]
 801f958:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 801f95a:	2400      	movs	r4, #0
 801f95c:	e00a      	b.n	801f974 <w5500_txn+0x46>
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 801f95e:	2300      	movs	r3, #0
 801f960:	e7f5      	b.n	801f94e <w5500_txn+0x20>
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 801f962:	68eb      	ldr	r3, [r5, #12]
 801f964:	f104 0208 	add.w	r2, r4, #8
 801f968:	446a      	add	r2, sp
 801f96a:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 801f96e:	6828      	ldr	r0, [r5, #0]
 801f970:	4798      	blx	r3
 801f972:	3401      	adds	r4, #1
 801f974:	2c02      	cmp	r4, #2
 801f976:	d9f4      	bls.n	801f962 <w5500_txn+0x34>
  for (i = 0; i < len; i++) {
 801f978:	2400      	movs	r4, #0
 801f97a:	e000      	b.n	801f97e <w5500_txn+0x50>
 801f97c:	3401      	adds	r4, #1
 801f97e:	42bc      	cmp	r4, r7
 801f980:	d208      	bcs.n	801f994 <w5500_txn+0x66>
    uint8_t r = s->txn(s->spi, p[i]);
 801f982:	68eb      	ldr	r3, [r5, #12]
 801f984:	5d31      	ldrb	r1, [r6, r4]
 801f986:	6828      	ldr	r0, [r5, #0]
 801f988:	4798      	blx	r3
    if (!wr) p[i] = r;
 801f98a:	f1b8 0f00 	cmp.w	r8, #0
 801f98e:	d1f5      	bne.n	801f97c <w5500_txn+0x4e>
 801f990:	5530      	strb	r0, [r6, r4]
 801f992:	e7f3      	b.n	801f97c <w5500_txn+0x4e>
  }
  s->end(s->spi);
 801f994:	68ab      	ldr	r3, [r5, #8]
 801f996:	6828      	ldr	r0, [r5, #0]
 801f998:	4798      	blx	r3
}
 801f99a:	b002      	add	sp, #8
 801f99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f9a0 <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 801f9a0:	b510      	push	{r4, lr}
 801f9a2:	b082      	sub	sp, #8
 801f9a4:	9c04      	ldr	r4, [sp, #16]
 801f9a6:	9401      	str	r4, [sp, #4]
 801f9a8:	9300      	str	r3, [sp, #0]
 801f9aa:	2301      	movs	r3, #1
 801f9ac:	f7ff ffbf 	bl	801f92e <w5500_txn>
 801f9b0:	b002      	add	sp, #8
 801f9b2:	bd10      	pop	{r4, pc}

0801f9b4 <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 801f9b4:	b500      	push	{lr}
 801f9b6:	b085      	sub	sp, #20
 801f9b8:	f88d 300f 	strb.w	r3, [sp, #15]
 801f9bc:	2301      	movs	r3, #1
 801f9be:	9300      	str	r3, [sp, #0]
 801f9c0:	f10d 030f 	add.w	r3, sp, #15
 801f9c4:	f7ff ffec 	bl	801f9a0 <w5500_wn>
 801f9c8:	b005      	add	sp, #20
 801f9ca:	f85d fb04 	ldr.w	pc, [sp], #4

0801f9ce <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 801f9ce:	b500      	push	{lr}
 801f9d0:	b085      	sub	sp, #20
 801f9d2:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 801f9d6:	f88d c00c 	strb.w	ip, [sp, #12]
 801f9da:	f88d 300d 	strb.w	r3, [sp, #13]
 801f9de:	2302      	movs	r3, #2
 801f9e0:	9300      	str	r3, [sp, #0]
 801f9e2:	ab03      	add	r3, sp, #12
 801f9e4:	f7ff ffdc 	bl	801f9a0 <w5500_wn>
 801f9e8:	b005      	add	sp, #20
 801f9ea:	f85d fb04 	ldr.w	pc, [sp], #4

0801f9ee <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 801f9ee:	b510      	push	{r4, lr}
 801f9f0:	b082      	sub	sp, #8
 801f9f2:	9c04      	ldr	r4, [sp, #16]
 801f9f4:	9401      	str	r4, [sp, #4]
 801f9f6:	9300      	str	r3, [sp, #0]
 801f9f8:	2300      	movs	r3, #0
 801f9fa:	f7ff ff98 	bl	801f92e <w5500_txn>
 801f9fe:	b002      	add	sp, #8
 801fa00:	bd10      	pop	{r4, pc}

0801fa02 <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 801fa02:	b500      	push	{lr}
 801fa04:	b085      	sub	sp, #20
 801fa06:	2300      	movs	r3, #0
 801fa08:	f88d 300f 	strb.w	r3, [sp, #15]
 801fa0c:	2301      	movs	r3, #1
 801fa0e:	9300      	str	r3, [sp, #0]
 801fa10:	f10d 030f 	add.w	r3, sp, #15
 801fa14:	f7ff ffeb 	bl	801f9ee <w5500_rn>
 801fa18:	f89d 000f 	ldrb.w	r0, [sp, #15]
 801fa1c:	b005      	add	sp, #20
 801fa1e:	f85d fb04 	ldr.w	pc, [sp], #4

0801fa22 <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 801fa22:	b500      	push	{lr}
 801fa24:	b085      	sub	sp, #20
 801fa26:	2300      	movs	r3, #0
 801fa28:	f8ad 300c 	strh.w	r3, [sp, #12]
 801fa2c:	2302      	movs	r3, #2
 801fa2e:	9300      	str	r3, [sp, #0]
 801fa30:	ab03      	add	r3, sp, #12
 801fa32:	f7ff ffdc 	bl	801f9ee <w5500_rn>
 801fa36:	f89d 000c 	ldrb.w	r0, [sp, #12]
 801fa3a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801fa3e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 801fa42:	b005      	add	sp, #20
 801fa44:	f85d fb04 	ldr.w	pc, [sp], #4

0801fa48 <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 801fa48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fa4c:	b083      	sub	sp, #12
 801fa4e:	4606      	mov	r6, r0
 801fa50:	4688      	mov	r8, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 801fa52:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 801fa54:	2000      	movs	r0, #0
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 801fa56:	4604      	mov	r4, r0
 801fa58:	2226      	movs	r2, #38	@ 0x26
 801fa5a:	2101      	movs	r1, #1
 801fa5c:	4628      	mov	r0, r5
 801fa5e:	f7ff ffe0 	bl	801fa22 <w5500_r2>
 801fa62:	4284      	cmp	r4, r0
 801fa64:	d3f7      	bcc.n	801fa56 <w5500_rx+0xe>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 801fa66:	b91c      	cbnz	r4, 801fa70 <w5500_rx+0x28>
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
}
 801fa68:	4620      	mov	r0, r4
 801fa6a:	b003      	add	sp, #12
 801fa6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 801fa70:	2228      	movs	r2, #40	@ 0x28
 801fa72:	2101      	movs	r1, #1
 801fa74:	4628      	mov	r0, r5
 801fa76:	f7ff ffd4 	bl	801fa22 <w5500_r2>
 801fa7a:	4607      	mov	r7, r0
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 801fa7c:	4602      	mov	r2, r0
 801fa7e:	2103      	movs	r1, #3
 801fa80:	4628      	mov	r0, r5
 801fa82:	f7ff ffce 	bl	801fa22 <w5500_r2>
 801fa86:	4681      	mov	r9, r0
    if (n <= len + 2 && n > 1) {
 801fa88:	fa1f f188 	uxth.w	r1, r8
 801fa8c:	3102      	adds	r1, #2
 801fa8e:	4288      	cmp	r0, r1
 801fa90:	dc0e      	bgt.n	801fab0 <w5500_rx+0x68>
 801fa92:	2801      	cmp	r0, #1
 801fa94:	d801      	bhi.n	801fa9a <w5500_rx+0x52>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 801fa96:	2400      	movs	r4, #0
 801fa98:	e00b      	b.n	801fab2 <w5500_rx+0x6a>
      r = (uint16_t) (n - 2);
 801fa9a:	1e84      	subs	r4, r0, #2
 801fa9c:	b2a4      	uxth	r4, r4
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 801fa9e:	1cba      	adds	r2, r7, #2
 801faa0:	9400      	str	r4, [sp, #0]
 801faa2:	4633      	mov	r3, r6
 801faa4:	b292      	uxth	r2, r2
 801faa6:	2103      	movs	r1, #3
 801faa8:	4628      	mov	r0, r5
 801faaa:	f7ff ffa0 	bl	801f9ee <w5500_rn>
 801faae:	e000      	b.n	801fab2 <w5500_rx+0x6a>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 801fab0:	2400      	movs	r4, #0
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 801fab2:	eb07 0309 	add.w	r3, r7, r9
 801fab6:	b29b      	uxth	r3, r3
 801fab8:	2228      	movs	r2, #40	@ 0x28
 801faba:	2101      	movs	r1, #1
 801fabc:	4628      	mov	r0, r5
 801fabe:	f7ff ff86 	bl	801f9ce <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 801fac2:	2340      	movs	r3, #64	@ 0x40
 801fac4:	2201      	movs	r2, #1
 801fac6:	4611      	mov	r1, r2
 801fac8:	4628      	mov	r0, r5
 801faca:	f7ff ff73 	bl	801f9b4 <w5500_w1>
 801face:	e7cb      	b.n	801fa68 <w5500_rx+0x20>

0801fad0 <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 801fad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fad4:	b082      	sub	sp, #8
 801fad6:	4680      	mov	r8, r0
 801fad8:	460d      	mov	r5, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 801fada:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 801fadc:	b28f      	uxth	r7, r1
 801fade:	2000      	movs	r0, #0
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 801fae0:	e004      	b.n	801faec <w5500_tx+0x1c>
 801fae2:	2220      	movs	r2, #32
 801fae4:	2101      	movs	r1, #1
 801fae6:	4630      	mov	r0, r6
 801fae8:	f7ff ff9b 	bl	801fa22 <w5500_r2>
 801faec:	42b8      	cmp	r0, r7
 801faee:	d3f8      	bcc.n	801fae2 <w5500_tx+0x12>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 801faf0:	2224      	movs	r2, #36	@ 0x24
 801faf2:	2101      	movs	r1, #1
 801faf4:	4630      	mov	r0, r6
 801faf6:	f7ff ff94 	bl	801fa22 <w5500_r2>
 801fafa:	4604      	mov	r4, r0
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 801fafc:	b2ad      	uxth	r5, r5
 801fafe:	9500      	str	r5, [sp, #0]
 801fb00:	4643      	mov	r3, r8
 801fb02:	4602      	mov	r2, r0
 801fb04:	2102      	movs	r1, #2
 801fb06:	4630      	mov	r0, r6
 801fb08:	f7ff ff4a 	bl	801f9a0 <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 801fb0c:	193b      	adds	r3, r7, r4
 801fb0e:	b29b      	uxth	r3, r3
 801fb10:	2224      	movs	r2, #36	@ 0x24
 801fb12:	2101      	movs	r1, #1
 801fb14:	4630      	mov	r0, r6
 801fb16:	f7ff ff5a 	bl	801f9ce <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 801fb1a:	2320      	movs	r3, #32
 801fb1c:	2201      	movs	r2, #1
 801fb1e:	4611      	mov	r1, r2
 801fb20:	4630      	mov	r0, r6
 801fb22:	f7ff ff47 	bl	801f9b4 <w5500_w1>
  for (i = 0; i < 40; i++) {
 801fb26:	2400      	movs	r4, #0
 801fb28:	e004      	b.n	801fb34 <w5500_tx+0x64>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
    if (ir == 0) continue;
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
    if (ir & 8) len = 0;           // Timeout. Report error
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 801fb2a:	f015 0f18 	tst.w	r5, #24
 801fb2e:	d116      	bne.n	801fb5e <w5500_tx+0x8e>
  for (i = 0; i < 40; i++) {
 801fb30:	3401      	adds	r4, #1
 801fb32:	b2a4      	uxth	r4, r4
 801fb34:	2c27      	cmp	r4, #39	@ 0x27
 801fb36:	d812      	bhi.n	801fb5e <w5500_tx+0x8e>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 801fb38:	2202      	movs	r2, #2
 801fb3a:	2101      	movs	r1, #1
 801fb3c:	4630      	mov	r0, r6
 801fb3e:	f7ff ff60 	bl	801fa02 <w5500_r1>
    if (ir == 0) continue;
 801fb42:	4605      	mov	r5, r0
 801fb44:	2800      	cmp	r0, #0
 801fb46:	d0f3      	beq.n	801fb30 <w5500_tx+0x60>
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 801fb48:	4603      	mov	r3, r0
 801fb4a:	2202      	movs	r2, #2
 801fb4c:	2101      	movs	r1, #1
 801fb4e:	4630      	mov	r0, r6
 801fb50:	f7ff ff30 	bl	801f9b4 <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 801fb54:	f015 0f08 	tst.w	r5, #8
 801fb58:	d0e7      	beq.n	801fb2a <w5500_tx+0x5a>
 801fb5a:	2700      	movs	r7, #0
 801fb5c:	e7e5      	b.n	801fb2a <w5500_tx+0x5a>
  }
  return len;
}
 801fb5e:	4638      	mov	r0, r7
 801fb60:	b002      	add	sp, #8
 801fb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801fb66 <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 801fb66:	b510      	push	{r4, lr}
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 801fb68:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  s->end(s->spi);
 801fb6a:	68a3      	ldr	r3, [r4, #8]
 801fb6c:	6820      	ldr	r0, [r4, #0]
 801fb6e:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 801fb70:	2380      	movs	r3, #128	@ 0x80
 801fb72:	2200      	movs	r2, #0
 801fb74:	4611      	mov	r1, r2
 801fb76:	4620      	mov	r0, r4
 801fb78:	f7ff ff1c 	bl	801f9b4 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 801fb7c:	2300      	movs	r3, #0
 801fb7e:	222e      	movs	r2, #46	@ 0x2e
 801fb80:	4619      	mov	r1, r3
 801fb82:	4620      	mov	r0, r4
 801fb84:	f7ff ff16 	bl	801f9b4 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 801fb88:	23f8      	movs	r3, #248	@ 0xf8
 801fb8a:	222e      	movs	r2, #46	@ 0x2e
 801fb8c:	2100      	movs	r1, #0
 801fb8e:	4620      	mov	r0, r4
 801fb90:	f7ff ff10 	bl	801f9b4 <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 801fb94:	2310      	movs	r3, #16
 801fb96:	221e      	movs	r2, #30
 801fb98:	2101      	movs	r1, #1
 801fb9a:	4620      	mov	r0, r4
 801fb9c:	f7ff ff0a 	bl	801f9b4 <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 801fba0:	2310      	movs	r3, #16
 801fba2:	221f      	movs	r2, #31
 801fba4:	2101      	movs	r1, #1
 801fba6:	4620      	mov	r0, r4
 801fba8:	f7ff ff04 	bl	801f9b4 <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 801fbac:	2304      	movs	r3, #4
 801fbae:	2200      	movs	r2, #0
 801fbb0:	2101      	movs	r1, #1
 801fbb2:	4620      	mov	r0, r4
 801fbb4:	f7ff fefe 	bl	801f9b4 <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 801fbb8:	2301      	movs	r3, #1
 801fbba:	461a      	mov	r2, r3
 801fbbc:	4619      	mov	r1, r3
 801fbbe:	4620      	mov	r0, r4
 801fbc0:	f7ff fef8 	bl	801f9b4 <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 801fbc4:	2203      	movs	r2, #3
 801fbc6:	2101      	movs	r1, #1
 801fbc8:	4620      	mov	r0, r4
 801fbca:	f7ff ff1a 	bl	801fa02 <w5500_r1>
}
 801fbce:	2842      	cmp	r0, #66	@ 0x42
 801fbd0:	bf14      	ite	ne
 801fbd2:	2000      	movne	r0, #0
 801fbd4:	2001      	moveq	r0, #1
 801fbd6:	bd10      	pop	{r4, pc}

0801fbd8 <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 801fbd8:	b508      	push	{r3, lr}
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 801fbda:	222e      	movs	r2, #46	@ 0x2e
 801fbdc:	2100      	movs	r1, #0
 801fbde:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801fbe0:	f7ff ff0f 	bl	801fa02 <w5500_r1>
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
}
 801fbe4:	f000 0001 	and.w	r0, r0, #1
 801fbe8:	bd08      	pop	{r3, pc}

0801fbea <mg_dns_free>:
static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 801fbea:	b508      	push	{r3, lr}
 801fbec:	4602      	mov	r2, r0
 801fbee:	4608      	mov	r0, r1
  LIST_DELETE(struct dns_data, head, d);
 801fbf0:	e000      	b.n	801fbf4 <mg_dns_free+0xa>
 801fbf2:	461a      	mov	r2, r3
 801fbf4:	6813      	ldr	r3, [r2, #0]
 801fbf6:	4283      	cmp	r3, r0
 801fbf8:	d1fb      	bne.n	801fbf2 <mg_dns_free+0x8>
 801fbfa:	6803      	ldr	r3, [r0, #0]
 801fbfc:	6013      	str	r3, [r2, #0]
  free(d);
 801fbfe:	f7f9 fabd 	bl	801917c <vPortFree>
}
 801fc02:	bd08      	pop	{r3, pc}

0801fc04 <mg_atone>:
static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 801fc04:	b082      	sub	sp, #8
 801fc06:	ab02      	add	r3, sp, #8
 801fc08:	e903 0003 	stmdb	r3, {r0, r1}
  if (str.len > 0) return false;
 801fc0c:	b111      	cbz	r1, 801fc14 <mg_atone+0x10>
 801fc0e:	2000      	movs	r0, #0
}
 801fc10:	b002      	add	sp, #8
 801fc12:	4770      	bx	lr
  memset(addr->ip, 0, sizeof(addr->ip));
 801fc14:	6011      	str	r1, [r2, #0]
 801fc16:	6051      	str	r1, [r2, #4]
 801fc18:	6091      	str	r1, [r2, #8]
 801fc1a:	60d1      	str	r1, [r2, #12]
  addr->is_ip6 = false;
 801fc1c:	74d1      	strb	r1, [r2, #19]
  return true;
 801fc1e:	2001      	movs	r0, #1
 801fc20:	e7f6      	b.n	801fc10 <mg_atone+0xc>

0801fc22 <urlparse>:
static struct url urlparse(const char *url) {
 801fc22:	b510      	push	{r4, lr}
 801fc24:	b088      	sub	sp, #32
 801fc26:	4604      	mov	r4, r0
  memset(&u, 0, sizeof(u));
 801fc28:	2200      	movs	r2, #0
 801fc2a:	9201      	str	r2, [sp, #4]
 801fc2c:	9202      	str	r2, [sp, #8]
 801fc2e:	9203      	str	r2, [sp, #12]
 801fc30:	9204      	str	r2, [sp, #16]
 801fc32:	9205      	str	r2, [sp, #20]
 801fc34:	9206      	str	r2, [sp, #24]
 801fc36:	9207      	str	r2, [sp, #28]
  for (i = 0; url[i] != '\0'; i++) {
 801fc38:	e00f      	b.n	801fc5a <urlparse+0x38>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 801fc3a:	b19a      	cbz	r2, 801fc64 <urlparse+0x42>
 801fc3c:	9804      	ldr	r0, [sp, #16]
 801fc3e:	b988      	cbnz	r0, 801fc64 <urlparse+0x42>
 801fc40:	1888      	adds	r0, r1, r2
 801fc42:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 801fc46:	282f      	cmp	r0, #47	@ 0x2f
 801fc48:	d10c      	bne.n	801fc64 <urlparse+0x42>
      u.host = i + 1;
 801fc4a:	1c53      	adds	r3, r2, #1
 801fc4c:	9304      	str	r3, [sp, #16]
      u.port = 0;
 801fc4e:	2300      	movs	r3, #0
 801fc50:	9305      	str	r3, [sp, #20]
 801fc52:	e001      	b.n	801fc58 <urlparse+0x36>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 801fc54:	2300      	movs	r3, #0
 801fc56:	9305      	str	r3, [sp, #20]
  for (i = 0; url[i] != '\0'; i++) {
 801fc58:	3201      	adds	r2, #1
 801fc5a:	5c8b      	ldrb	r3, [r1, r2]
 801fc5c:	2b00      	cmp	r3, #0
 801fc5e:	d02c      	beq.n	801fcba <urlparse+0x98>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 801fc60:	2b2f      	cmp	r3, #47	@ 0x2f
 801fc62:	d0ea      	beq.n	801fc3a <urlparse+0x18>
    } else if (url[i] == ']') {
 801fc64:	2b5d      	cmp	r3, #93	@ 0x5d
 801fc66:	d0f5      	beq.n	801fc54 <urlparse+0x32>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 801fc68:	2b3a      	cmp	r3, #58	@ 0x3a
 801fc6a:	d00b      	beq.n	801fc84 <urlparse+0x62>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 801fc6c:	2b40      	cmp	r3, #64	@ 0x40
 801fc6e:	d012      	beq.n	801fc96 <urlparse+0x74>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 801fc70:	2b2f      	cmp	r3, #47	@ 0x2f
 801fc72:	d1f1      	bne.n	801fc58 <urlparse+0x36>
 801fc74:	9b04      	ldr	r3, [sp, #16]
 801fc76:	2b00      	cmp	r3, #0
 801fc78:	d0ee      	beq.n	801fc58 <urlparse+0x36>
 801fc7a:	9b06      	ldr	r3, [sp, #24]
 801fc7c:	2b00      	cmp	r3, #0
 801fc7e:	d1eb      	bne.n	801fc58 <urlparse+0x36>
      u.uri = i;
 801fc80:	9206      	str	r2, [sp, #24]
 801fc82:	e7e9      	b.n	801fc58 <urlparse+0x36>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 801fc84:	9805      	ldr	r0, [sp, #20]
 801fc86:	2800      	cmp	r0, #0
 801fc88:	d1f0      	bne.n	801fc6c <urlparse+0x4a>
 801fc8a:	9806      	ldr	r0, [sp, #24]
 801fc8c:	2800      	cmp	r0, #0
 801fc8e:	d1ed      	bne.n	801fc6c <urlparse+0x4a>
      u.port = i + 1;
 801fc90:	1c53      	adds	r3, r2, #1
 801fc92:	9305      	str	r3, [sp, #20]
 801fc94:	e7e0      	b.n	801fc58 <urlparse+0x36>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 801fc96:	9802      	ldr	r0, [sp, #8]
 801fc98:	2800      	cmp	r0, #0
 801fc9a:	d1e9      	bne.n	801fc70 <urlparse+0x4e>
 801fc9c:	9803      	ldr	r0, [sp, #12]
 801fc9e:	2800      	cmp	r0, #0
 801fca0:	d1e6      	bne.n	801fc70 <urlparse+0x4e>
 801fca2:	9806      	ldr	r0, [sp, #24]
 801fca4:	2800      	cmp	r0, #0
 801fca6:	d1e3      	bne.n	801fc70 <urlparse+0x4e>
      u.user = u.host;
 801fca8:	9b04      	ldr	r3, [sp, #16]
 801fcaa:	9302      	str	r3, [sp, #8]
      u.pass = u.port;
 801fcac:	9b05      	ldr	r3, [sp, #20]
 801fcae:	9303      	str	r3, [sp, #12]
      u.host = i + 1;
 801fcb0:	1c53      	adds	r3, r2, #1
 801fcb2:	9304      	str	r3, [sp, #16]
      u.port = 0;
 801fcb4:	2300      	movs	r3, #0
 801fcb6:	9305      	str	r3, [sp, #20]
 801fcb8:	e7ce      	b.n	801fc58 <urlparse+0x36>
  u.end = i;
 801fcba:	9207      	str	r2, [sp, #28]
  return u;
 801fcbc:	46a4      	mov	ip, r4
 801fcbe:	f10d 0e04 	add.w	lr, sp, #4
 801fcc2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801fcc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801fcca:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801fcce:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
}
 801fcd2:	4620      	mov	r0, r4
 801fcd4:	b008      	add	sp, #32
 801fcd6:	bd10      	pop	{r4, pc}

0801fcd8 <mg_dns_parse_name_depth>:
                                      int depth) {
 801fcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcdc:	b085      	sub	sp, #20
 801fcde:	4681      	mov	r9, r0
 801fce0:	4688      	mov	r8, r1
 801fce2:	4693      	mov	fp, r2
 801fce4:	469a      	mov	sl, r3
 801fce6:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801fce8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
  if (tolen > 0 && depth == 0) to[0] = '\0';
 801fcea:	b11f      	cbz	r7, 801fcf4 <mg_dns_parse_name_depth+0x1c>
 801fcec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fcee:	b90b      	cbnz	r3, 801fcf4 <mg_dns_parse_name_depth+0x1c>
 801fcf0:	f88a 3000 	strb.w	r3, [sl]
  if (depth > 5) return 0;
 801fcf4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fcf6:	2b05      	cmp	r3, #5
 801fcf8:	dc4f      	bgt.n	801fd9a <mg_dns_parse_name_depth+0xc2>
  size_t i = 0;
 801fcfa:	2600      	movs	r6, #0
 801fcfc:	e02f      	b.n	801fd5e <mg_dns_parse_name_depth+0x86>
      i++;
 801fcfe:	3601      	adds	r6, #1
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 801fd00:	2f00      	cmp	r7, #0
 801fd02:	d04b      	beq.n	801fd9c <mg_dns_parse_name_depth+0xc4>
 801fd04:	3f01      	subs	r7, #1
 801fd06:	2300      	movs	r3, #0
 801fd08:	f80a 3007 	strb.w	r3, [sl, r7]
 801fd0c:	e046      	b.n	801fd9c <mg_dns_parse_name_depth+0xc4>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 801fd0e:	0222      	lsls	r2, r4, #8
 801fd10:	f402 527c 	and.w	r2, r2, #16128	@ 0x3f00
 801fd14:	f819 3001 	ldrb.w	r3, [r9, r1]
 801fd18:	431a      	orrs	r2, r3
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 801fd1a:	1c53      	adds	r3, r2, #1
 801fd1c:	4543      	cmp	r3, r8
 801fd1e:	d203      	bcs.n	801fd28 <mg_dns_parse_name_depth+0x50>
 801fd20:	f819 3002 	ldrb.w	r3, [r9, r2]
 801fd24:	2b3f      	cmp	r3, #63	@ 0x3f
 801fd26:	d901      	bls.n	801fd2c <mg_dns_parse_name_depth+0x54>
      i += 2;
 801fd28:	3602      	adds	r6, #2
      break;
 801fd2a:	e7e9      	b.n	801fd00 <mg_dns_parse_name_depth+0x28>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 801fd2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fd2e:	3301      	adds	r3, #1
 801fd30:	9302      	str	r3, [sp, #8]
 801fd32:	9501      	str	r5, [sp, #4]
 801fd34:	9700      	str	r7, [sp, #0]
 801fd36:	4653      	mov	r3, sl
 801fd38:	4641      	mov	r1, r8
 801fd3a:	4648      	mov	r0, r9
 801fd3c:	f7ff ffcc 	bl	801fcd8 <mg_dns_parse_name_depth>
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 801fd40:	2800      	cmp	r0, #0
 801fd42:	d1f1      	bne.n	801fd28 <mg_dns_parse_name_depth+0x50>
        return 0;
 801fd44:	4606      	mov	r6, r0
 801fd46:	e029      	b.n	801fd9c <mg_dns_parse_name_depth+0xc4>
 801fd48:	4628      	mov	r0, r5
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 801fd4a:	1905      	adds	r5, r0, r4
 801fd4c:	42bd      	cmp	r5, r7
 801fd4e:	d31e      	bcc.n	801fd8e <mg_dns_parse_name_depth+0xb6>
    i += n + 1;
 801fd50:	4426      	add	r6, r4
 801fd52:	3601      	adds	r6, #1
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 801fd54:	42bd      	cmp	r5, r7
 801fd56:	d202      	bcs.n	801fd5e <mg_dns_parse_name_depth+0x86>
 801fd58:	2300      	movs	r3, #0
 801fd5a:	f80a 3005 	strb.w	r3, [sl, r5]
  while (ofs + i + 1 < len) {
 801fd5e:	eb06 030b 	add.w	r3, r6, fp
 801fd62:	1c59      	adds	r1, r3, #1
 801fd64:	4541      	cmp	r1, r8
 801fd66:	d2cb      	bcs.n	801fd00 <mg_dns_parse_name_depth+0x28>
    size_t n = s[ofs + i];
 801fd68:	f819 4003 	ldrb.w	r4, [r9, r3]
    if (n == 0) {
 801fd6c:	2c00      	cmp	r4, #0
 801fd6e:	d0c6      	beq.n	801fcfe <mg_dns_parse_name_depth+0x26>
    if (n & 0xc0) {
 801fd70:	2c3f      	cmp	r4, #63	@ 0x3f
 801fd72:	d8cc      	bhi.n	801fd0e <mg_dns_parse_name_depth+0x36>
    if (ofs + i + n + 1 >= len) return 0;
 801fd74:	4423      	add	r3, r4
 801fd76:	3301      	adds	r3, #1
 801fd78:	4543      	cmp	r3, r8
 801fd7a:	d213      	bcs.n	801fda4 <mg_dns_parse_name_depth+0xcc>
    if (j > 0) {
 801fd7c:	2d00      	cmp	r5, #0
 801fd7e:	d0e3      	beq.n	801fd48 <mg_dns_parse_name_depth+0x70>
      if (j < tolen) to[j] = '.';
 801fd80:	42bd      	cmp	r5, r7
 801fd82:	d202      	bcs.n	801fd8a <mg_dns_parse_name_depth+0xb2>
 801fd84:	232e      	movs	r3, #46	@ 0x2e
 801fd86:	f80a 3005 	strb.w	r3, [sl, r5]
      j++;
 801fd8a:	1c68      	adds	r0, r5, #1
 801fd8c:	e7dd      	b.n	801fd4a <mg_dns_parse_name_depth+0x72>
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 801fd8e:	4622      	mov	r2, r4
 801fd90:	4449      	add	r1, r9
 801fd92:	4450      	add	r0, sl
 801fd94:	f00b f8b0 	bl	802aef8 <memcpy>
 801fd98:	e7da      	b.n	801fd50 <mg_dns_parse_name_depth+0x78>
  if (depth > 5) return 0;
 801fd9a:	2600      	movs	r6, #0
}
 801fd9c:	4630      	mov	r0, r6
 801fd9e:	b005      	add	sp, #20
 801fda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ofs + i + n + 1 >= len) return 0;
 801fda4:	2600      	movs	r6, #0
 801fda6:	e7f9      	b.n	801fd9c <mg_dns_parse_name_depth+0xc4>

0801fda8 <mg_dns_parse_name>:
                                char *dst, size_t dstlen) {
 801fda8:	b510      	push	{r4, lr}
 801fdaa:	b084      	sub	sp, #16
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 801fdac:	2400      	movs	r4, #0
 801fdae:	9402      	str	r4, [sp, #8]
 801fdb0:	9401      	str	r4, [sp, #4]
 801fdb2:	9c06      	ldr	r4, [sp, #24]
 801fdb4:	9400      	str	r4, [sp, #0]
 801fdb6:	f7ff ff8f 	bl	801fcd8 <mg_dns_parse_name_depth>
}
 801fdba:	b004      	add	sp, #16
 801fdbc:	bd10      	pop	{r4, pc}

0801fdbe <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 801fdbe:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801fdc0:	fb01 f400 	mul.w	r4, r1, r0
 801fdc4:	4620      	mov	r0, r4
 801fdc6:	f7f9 f957 	bl	8019078 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801fdca:	4605      	mov	r5, r0
 801fdcc:	b118      	cbz	r0, 801fdd6 <mg_calloc+0x18>
 801fdce:	4622      	mov	r2, r4
 801fdd0:	2100      	movs	r1, #0
 801fdd2:	f009 fe55 	bl	8029a80 <memset>
}
 801fdd6:	4628      	mov	r0, r5
 801fdd8:	bd38      	pop	{r3, r4, r5, pc}

0801fdda <getpeer>:
                                     bool lsn) {
 801fdda:	b570      	push	{r4, r5, r6, lr}
 801fddc:	460d      	mov	r5, r1
 801fdde:	4616      	mov	r6, r2
  for (c = mgr->conns; c != NULL; c = c->next) {
 801fde0:	6804      	ldr	r4, [r0, #0]
 801fde2:	e000      	b.n	801fde6 <getpeer+0xc>
 801fde4:	6824      	ldr	r4, [r4, #0]
 801fde6:	b364      	cbz	r4, 801fe42 <getpeer+0x68>
    if (c->is_arplooking && pkt->arp &&
 801fde8:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 801fdec:	f013 0f10 	tst.w	r3, #16
 801fdf0:	d008      	beq.n	801fe04 <getpeer+0x2a>
 801fdf2:	69a8      	ldr	r0, [r5, #24]
 801fdf4:	b130      	cbz	r0, 801fe04 <getpeer+0x2a>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 801fdf6:	2204      	movs	r2, #4
 801fdf8:	f104 011c 	add.w	r1, r4, #28
 801fdfc:	300e      	adds	r0, #14
 801fdfe:	f009 fdab 	bl	8029958 <memcmp>
    if (c->is_arplooking && pkt->arp &&
 801fe02:	b1f0      	cbz	r0, 801fe42 <getpeer+0x68>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 801fe04:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 801fe08:	f013 0301 	ands.w	r3, r3, #1
 801fe0c:	d005      	beq.n	801fe1a <getpeer+0x40>
 801fe0e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 801fe10:	b11a      	cbz	r2, 801fe1a <getpeer+0x40>
 801fe12:	8b21      	ldrh	r1, [r4, #24]
 801fe14:	8852      	ldrh	r2, [r2, #2]
 801fe16:	4291      	cmp	r1, r2
 801fe18:	d013      	beq.n	801fe42 <getpeer+0x68>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	d1e2      	bne.n	801fde4 <getpeer+0xa>
 801fe1e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801fe20:	2b00      	cmp	r3, #0
 801fe22:	d0df      	beq.n	801fde4 <getpeer+0xa>
 801fe24:	8b21      	ldrh	r1, [r4, #24]
 801fe26:	885a      	ldrh	r2, [r3, #2]
 801fe28:	4291      	cmp	r1, r2
 801fe2a:	d1db      	bne.n	801fde4 <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 801fe2c:	f894 20ac 	ldrb.w	r2, [r4, #172]	@ 0xac
 801fe30:	f002 0201 	and.w	r2, r2, #1
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 801fe34:	42b2      	cmp	r2, r6
 801fe36:	d1d5      	bne.n	801fde4 <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 801fe38:	b91e      	cbnz	r6, 801fe42 <getpeer+0x68>
 801fe3a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 801fe3c:	881b      	ldrh	r3, [r3, #0]
 801fe3e:	429a      	cmp	r2, r3
 801fe40:	d1d0      	bne.n	801fde4 <getpeer+0xa>
}
 801fe42:	4620      	mov	r0, r4
 801fe44:	bd70      	pop	{r4, r5, r6, pc}

0801fe46 <mg_pfn_stdout>:
void mg_pfn_stdout(char c, void *param) {
 801fe46:	b508      	push	{r3, lr}
  putchar(c);
 801fe48:	f009 f874 	bl	8028f34 <putchar>
}
 801fe4c:	bd08      	pop	{r3, pc}

0801fe4e <mg_queue_read_len>:
  MG_MEMORY_BARRIER();
 801fe4e:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 801fe52:	6802      	ldr	r2, [r0, #0]
 801fe54:	6883      	ldr	r3, [r0, #8]
}
 801fe56:	58d0      	ldr	r0, [r2, r3]
 801fe58:	4770      	bx	lr

0801fe5a <mg_resolve_cancel>:
void mg_resolve_cancel(struct mg_connection *c) {
 801fe5a:	b570      	push	{r4, r5, r6, lr}
 801fe5c:	4605      	mov	r5, r0
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 801fe5e:	6843      	ldr	r3, [r0, #4]
 801fe60:	f103 0630 	add.w	r6, r3, #48	@ 0x30
  for (d = *head; d != NULL; d = tmp) {
 801fe64:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801fe66:	e000      	b.n	801fe6a <mg_resolve_cancel+0x10>
void mg_resolve_cancel(struct mg_connection *c) {
 801fe68:	4621      	mov	r1, r4
  for (d = *head; d != NULL; d = tmp) {
 801fe6a:	b139      	cbz	r1, 801fe7c <mg_resolve_cancel+0x22>
    tmp = d->next;
 801fe6c:	680c      	ldr	r4, [r1, #0]
    if (d->c == c) mg_dns_free(head, d);
 801fe6e:	684b      	ldr	r3, [r1, #4]
 801fe70:	42ab      	cmp	r3, r5
 801fe72:	d1f9      	bne.n	801fe68 <mg_resolve_cancel+0xe>
 801fe74:	4630      	mov	r0, r6
 801fe76:	f7ff feb8 	bl	801fbea <mg_dns_free>
 801fe7a:	e7f5      	b.n	801fe68 <mg_resolve_cancel+0xe>
}
 801fe7c:	bd70      	pop	{r4, r5, r6, pc}

0801fe7e <mg_dns_parse_rr>:
                       bool is_question, struct mg_dns_rr *rr) {
 801fe7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe80:	b083      	sub	sp, #12
 801fe82:	9c08      	ldr	r4, [sp, #32]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 801fe84:	1886      	adds	r6, r0, r2
 801fe86:	1847      	adds	r7, r0, r1
  memset(rr, 0, sizeof(*rr));
 801fe88:	f04f 0c00 	mov.w	ip, #0
 801fe8c:	f8c4 c000 	str.w	ip, [r4]
 801fe90:	f8c4 c004 	str.w	ip, [r4, #4]
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 801fe94:	290b      	cmp	r1, #11
 801fe96:	d934      	bls.n	801ff02 <mg_dns_parse_rr+0x84>
 801fe98:	461d      	mov	r5, r3
  if (len > 512) return 0;  //  Too large, we don't expect that
 801fe9a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801fe9e:	d833      	bhi.n	801ff08 <mg_dns_parse_rr+0x8a>
  if (s >= e) return 0;     //  Overflow
 801fea0:	42be      	cmp	r6, r7
 801fea2:	d301      	bcc.n	801fea8 <mg_dns_parse_rr+0x2a>
 801fea4:	2000      	movs	r0, #0
 801fea6:	e02d      	b.n	801ff04 <mg_dns_parse_rr+0x86>
  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 801fea8:	4663      	mov	r3, ip
 801feaa:	f8cd c000 	str.w	ip, [sp]
 801feae:	f7ff ff7b 	bl	801fda8 <mg_dns_parse_name>
 801feb2:	b283      	uxth	r3, r0
 801feb4:	8023      	strh	r3, [r4, #0]
 801feb6:	b34b      	cbz	r3, 801ff0c <mg_dns_parse_rr+0x8e>
  s += rr->nlen + 4;
 801feb8:	3304      	adds	r3, #4
 801feba:	441e      	add	r6, r3
  if (s > e) return 0;
 801febc:	42b7      	cmp	r7, r6
 801febe:	d327      	bcc.n	801ff10 <mg_dns_parse_rr+0x92>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 801fec0:	f816 2c04 	ldrb.w	r2, [r6, #-4]
 801fec4:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 801fec8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801fecc:	8063      	strh	r3, [r4, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 801fece:	f816 2c02 	ldrb.w	r2, [r6, #-2]
 801fed2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801fed6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801feda:	80a3      	strh	r3, [r4, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 801fedc:	b975      	cbnz	r5, 801fefc <mg_dns_parse_rr+0x7e>
  s += 6;
 801fede:	1db3      	adds	r3, r6, #6
  if (s > e) return 0;
 801fee0:	429f      	cmp	r7, r3
 801fee2:	d317      	bcc.n	801ff14 <mg_dns_parse_rr+0x96>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 801fee4:	7931      	ldrb	r1, [r6, #4]
 801fee6:	7972      	ldrb	r2, [r6, #5]
 801fee8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801feec:	80e2      	strh	r2, [r4, #6]
  if (s + rr->alen > e) return 0;
 801feee:	4413      	add	r3, r2
 801fef0:	42bb      	cmp	r3, r7
 801fef2:	d811      	bhi.n	801ff18 <mg_dns_parse_rr+0x9a>
  return (size_t) (rr->nlen + rr->alen + 10);
 801fef4:	fa12 f080 	uxtah	r0, r2, r0
 801fef8:	300a      	adds	r0, #10
 801fefa:	e003      	b.n	801ff04 <mg_dns_parse_rr+0x86>
  if (is_question) return (size_t) (rr->nlen + 4);
 801fefc:	b280      	uxth	r0, r0
 801fefe:	3004      	adds	r0, #4
 801ff00:	e000      	b.n	801ff04 <mg_dns_parse_rr+0x86>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 801ff02:	2000      	movs	r0, #0
}
 801ff04:	b003      	add	sp, #12
 801ff06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (len > 512) return 0;  //  Too large, we don't expect that
 801ff08:	2000      	movs	r0, #0
 801ff0a:	e7fb      	b.n	801ff04 <mg_dns_parse_rr+0x86>
    return 0;
 801ff0c:	2000      	movs	r0, #0
 801ff0e:	e7f9      	b.n	801ff04 <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 801ff10:	2000      	movs	r0, #0
 801ff12:	e7f7      	b.n	801ff04 <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 801ff14:	2000      	movs	r0, #0
 801ff16:	e7f5      	b.n	801ff04 <mg_dns_parse_rr+0x86>
  if (s + rr->alen > e) return 0;
 801ff18:	2000      	movs	r0, #0
 801ff1a:	e7f3      	b.n	801ff04 <mg_dns_parse_rr+0x86>

0801ff1c <mg_call>:
void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 801ff1c:	b570      	push	{r4, r5, r6, lr}
 801ff1e:	4604      	mov	r4, r0
 801ff20:	460d      	mov	r5, r1
 801ff22:	4616      	mov	r6, r2
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 801ff24:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 801ff28:	b103      	cbz	r3, 801ff2c <mg_call+0x10>
 801ff2a:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 801ff2c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801ff2e:	b11b      	cbz	r3, 801ff38 <mg_call+0x1c>
 801ff30:	4632      	mov	r2, r6
 801ff32:	4629      	mov	r1, r5
 801ff34:	4620      	mov	r0, r4
 801ff36:	4798      	blx	r3
}
 801ff38:	bd70      	pop	{r4, r5, r6, pc}

0801ff3a <mg_fs_open>:
struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 801ff3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff3c:	4604      	mov	r4, r0
 801ff3e:	460d      	mov	r5, r1
 801ff40:	4616      	mov	r6, r2
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 801ff42:	2108      	movs	r1, #8
 801ff44:	2001      	movs	r0, #1
 801ff46:	f7ff ff3a 	bl	801fdbe <mg_calloc>
  if (fd != NULL) {
 801ff4a:	4607      	mov	r7, r0
 801ff4c:	b138      	cbz	r0, 801ff5e <mg_fs_open+0x24>
    fd->fd = fs->op(path, flags);
 801ff4e:	68a3      	ldr	r3, [r4, #8]
 801ff50:	4631      	mov	r1, r6
 801ff52:	4628      	mov	r0, r5
 801ff54:	4798      	blx	r3
 801ff56:	4605      	mov	r5, r0
 801ff58:	6038      	str	r0, [r7, #0]
    fd->fs = fs;
 801ff5a:	607c      	str	r4, [r7, #4]
    if (fd->fd == NULL) {
 801ff5c:	b108      	cbz	r0, 801ff62 <mg_fs_open+0x28>
}
 801ff5e:	4638      	mov	r0, r7
 801ff60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      free(fd);
 801ff62:	4638      	mov	r0, r7
 801ff64:	f7f9 f90a 	bl	801917c <vPortFree>
      fd = NULL;
 801ff68:	462f      	mov	r7, r5
  return fd;
 801ff6a:	e7f8      	b.n	801ff5e <mg_fs_open+0x24>

0801ff6c <mg_fs_close>:
  if (fd != NULL) {
 801ff6c:	b148      	cbz	r0, 801ff82 <mg_fs_close+0x16>
void mg_fs_close(struct mg_fd *fd) {
 801ff6e:	b510      	push	{r4, lr}
 801ff70:	4604      	mov	r4, r0
    fd->fs->cl(fd->fd);
 801ff72:	6843      	ldr	r3, [r0, #4]
 801ff74:	68db      	ldr	r3, [r3, #12]
 801ff76:	6800      	ldr	r0, [r0, #0]
 801ff78:	4798      	blx	r3
    free(fd);
 801ff7a:	4620      	mov	r0, r4
 801ff7c:	f7f9 f8fe 	bl	801917c <vPortFree>
}
 801ff80:	bd10      	pop	{r4, pc}
 801ff82:	4770      	bx	lr

0801ff84 <restore_http_cb>:
static void restore_http_cb(struct mg_connection *c) {
 801ff84:	b510      	push	{r4, lr}
 801ff86:	4604      	mov	r4, r0
  mg_fs_close((struct mg_fd *) c->pfn_data);
 801ff88:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 801ff8c:	f7ff ffee 	bl	801ff6c <mg_fs_close>
  c->pfn_data = NULL;
 801ff90:	2200      	movs	r2, #0
 801ff92:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  c->pfn = http_cb;
 801ff96:	4b05      	ldr	r3, [pc, #20]	@ (801ffac <restore_http_cb+0x28>)
 801ff98:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->is_resp = 0;
 801ff9c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 801ffa0:	f362 13c7 	bfi	r3, r2, #7, #1
 801ffa4:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 801ffa8:	bd10      	pop	{r4, pc}
 801ffaa:	bf00      	nop
 801ffac:	0802350d 	.word	0x0802350d

0801ffb0 <mg_to_size_t>:
bool mg_to_size_t(struct mg_str str, size_t *val) {
 801ffb0:	b470      	push	{r4, r5, r6}
 801ffb2:	b083      	sub	sp, #12
 801ffb4:	ab02      	add	r3, sp, #8
 801ffb6:	e903 0003 	stmdb	r3, {r0, r1}
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 801ffba:	2300      	movs	r3, #0
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 801ffbc:	e000      	b.n	801ffc0 <mg_to_size_t+0x10>
 801ffbe:	3301      	adds	r3, #1
 801ffc0:	9c01      	ldr	r4, [sp, #4]
 801ffc2:	429c      	cmp	r4, r3
 801ffc4:	d905      	bls.n	801ffd2 <mg_to_size_t+0x22>
 801ffc6:	9900      	ldr	r1, [sp, #0]
 801ffc8:	5cc9      	ldrb	r1, [r1, r3]
 801ffca:	2920      	cmp	r1, #32
 801ffcc:	d0f7      	beq.n	801ffbe <mg_to_size_t+0xe>
 801ffce:	2909      	cmp	r1, #9
 801ffd0:	d0f5      	beq.n	801ffbe <mg_to_size_t+0xe>
  if (i < str.len && str.buf[i] == '-') return false;
 801ffd2:	429c      	cmp	r4, r3
 801ffd4:	d906      	bls.n	801ffe4 <mg_to_size_t+0x34>
 801ffd6:	9900      	ldr	r1, [sp, #0]
 801ffd8:	5cc9      	ldrb	r1, [r1, r3]
 801ffda:	292d      	cmp	r1, #45	@ 0x2d
 801ffdc:	d02c      	beq.n	8020038 <mg_to_size_t+0x88>
 801ffde:	2500      	movs	r5, #0
 801ffe0:	4628      	mov	r0, r5
 801ffe2:	e001      	b.n	801ffe8 <mg_to_size_t+0x38>
 801ffe4:	2500      	movs	r5, #0
 801ffe6:	4628      	mov	r0, r5
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 801ffe8:	429c      	cmp	r4, r3
 801ffea:	d917      	bls.n	802001c <mg_to_size_t+0x6c>
 801ffec:	9900      	ldr	r1, [sp, #0]
 801ffee:	5cc9      	ldrb	r1, [r1, r3]
 801fff0:	292f      	cmp	r1, #47	@ 0x2f
 801fff2:	d913      	bls.n	802001c <mg_to_size_t+0x6c>
 801fff4:	2939      	cmp	r1, #57	@ 0x39
 801fff6:	d811      	bhi.n	802001c <mg_to_size_t+0x6c>
    size_t digit = (size_t) (str.buf[i] - '0');
 801fff8:	3930      	subs	r1, #48	@ 0x30
    if (result > max2) return false;  // Overflow
 801fffa:	4e15      	ldr	r6, [pc, #84]	@ (8020050 <mg_to_size_t+0xa0>)
 801fffc:	42b0      	cmp	r0, r6
 801fffe:	d81d      	bhi.n	802003c <mg_to_size_t+0x8c>
    result *= 10;
 8020000:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8020004:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    if (result > max - digit) return false;  // Overflow
 8020008:	43ce      	mvns	r6, r1
 802000a:	ebb6 0f40 	cmp.w	r6, r0, lsl #1
 802000e:	d317      	bcc.n	8020040 <mg_to_size_t+0x90>
    result += digit;
 8020010:	eb01 000c 	add.w	r0, r1, ip
    i++, ndigits++;
 8020014:	3301      	adds	r3, #1
 8020016:	3501      	adds	r5, #1
 8020018:	e7e6      	b.n	801ffe8 <mg_to_size_t+0x38>
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 802001a:	3301      	adds	r3, #1
 802001c:	429c      	cmp	r4, r3
 802001e:	d905      	bls.n	802002c <mg_to_size_t+0x7c>
 8020020:	9900      	ldr	r1, [sp, #0]
 8020022:	5cc9      	ldrb	r1, [r1, r3]
 8020024:	2920      	cmp	r1, #32
 8020026:	d0f8      	beq.n	802001a <mg_to_size_t+0x6a>
 8020028:	2909      	cmp	r1, #9
 802002a:	d0f6      	beq.n	802001a <mg_to_size_t+0x6a>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 802002c:	b155      	cbz	r5, 8020044 <mg_to_size_t+0x94>
  if (i != str.len) return false;  // Ditto
 802002e:	429c      	cmp	r4, r3
 8020030:	d10c      	bne.n	802004c <mg_to_size_t+0x9c>
  *val = (size_t) result;
 8020032:	6010      	str	r0, [r2, #0]
  return true;
 8020034:	2001      	movs	r0, #1
 8020036:	e006      	b.n	8020046 <mg_to_size_t+0x96>
  if (i < str.len && str.buf[i] == '-') return false;
 8020038:	2000      	movs	r0, #0
 802003a:	e004      	b.n	8020046 <mg_to_size_t+0x96>
    if (result > max2) return false;  // Overflow
 802003c:	2000      	movs	r0, #0
 802003e:	e002      	b.n	8020046 <mg_to_size_t+0x96>
    if (result > max - digit) return false;  // Overflow
 8020040:	2000      	movs	r0, #0
 8020042:	e000      	b.n	8020046 <mg_to_size_t+0x96>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8020044:	2000      	movs	r0, #0
}
 8020046:	b003      	add	sp, #12
 8020048:	bc70      	pop	{r4, r5, r6}
 802004a:	4770      	bx	lr
  if (i != str.len) return false;  // Ditto
 802004c:	2000      	movs	r0, #0
 802004e:	e7fa      	b.n	8020046 <mg_to_size_t+0x96>
 8020050:	19999999 	.word	0x19999999

08020054 <mg_http_get_request_len>:
int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8020054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020056:	4606      	mov	r6, r0
 8020058:	460f      	mov	r7, r1
  for (i = 0; i < buf_len; i++) {
 802005a:	2400      	movs	r4, #0
 802005c:	e007      	b.n	802006e <mg_http_get_request_len+0x1a>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 802005e:	1933      	adds	r3, r6, r4
 8020060:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8020064:	2b0a      	cmp	r3, #10
 8020066:	d10d      	bne.n	8020084 <mg_http_get_request_len+0x30>
      return (int) i + 1;
 8020068:	1c60      	adds	r0, r4, #1
 802006a:	e01b      	b.n	80200a4 <mg_http_get_request_len+0x50>
  for (i = 0; i < buf_len; i++) {
 802006c:	3401      	adds	r4, #1
 802006e:	42bc      	cmp	r4, r7
 8020070:	d217      	bcs.n	80200a2 <mg_http_get_request_len+0x4e>
    if (!isok(buf[i])) return -1;
 8020072:	5d35      	ldrb	r5, [r6, r4]
 8020074:	4628      	mov	r0, r5
 8020076:	f7fe f9de 	bl	801e436 <isok>
 802007a:	b1a0      	cbz	r0, 80200a6 <mg_http_get_request_len+0x52>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 802007c:	2c00      	cmp	r4, #0
 802007e:	d0f5      	beq.n	802006c <mg_http_get_request_len+0x18>
 8020080:	2d0a      	cmp	r5, #10
 8020082:	d0ec      	beq.n	802005e <mg_http_get_request_len+0xa>
 8020084:	2c03      	cmp	r4, #3
 8020086:	d9f1      	bls.n	802006c <mg_http_get_request_len+0x18>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8020088:	2d0a      	cmp	r5, #10
 802008a:	d1ef      	bne.n	802006c <mg_http_get_request_len+0x18>
 802008c:	1933      	adds	r3, r6, r4
 802008e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8020092:	2b0d      	cmp	r3, #13
 8020094:	d1ea      	bne.n	802006c <mg_http_get_request_len+0x18>
 8020096:	1933      	adds	r3, r6, r4
 8020098:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 802009c:	2b0a      	cmp	r3, #10
 802009e:	d1e5      	bne.n	802006c <mg_http_get_request_len+0x18>
 80200a0:	e7e2      	b.n	8020068 <mg_http_get_request_len+0x14>
  return 0;
 80200a2:	2000      	movs	r0, #0
}
 80200a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!isok(buf[i])) return -1;
 80200a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80200aa:	e7fb      	b.n	80200a4 <mg_http_get_request_len+0x50>

080200ac <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 80200ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200b0:	4605      	mov	r5, r0
 80200b2:	460f      	mov	r7, r1
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 80200b4:	4608      	mov	r0, r1
 80200b6:	f7f0 f8f3 	bl	80102a0 <strlen>
 80200ba:	4606      	mov	r6, r0
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80200bc:	2400      	movs	r4, #0
 80200be:	e000      	b.n	80200c2 <mg_http_get_header+0x16>
 80200c0:	3401      	adds	r4, #1
 80200c2:	2c1d      	cmp	r4, #29
 80200c4:	d819      	bhi.n	80200fa <mg_http_get_header+0x4e>
 80200c6:	1ca3      	adds	r3, r4, #2
 80200c8:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80200cc:	685a      	ldr	r2, [r3, #4]
 80200ce:	b17a      	cbz	r2, 80200f0 <mg_http_get_header+0x44>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 80200d0:	0123      	lsls	r3, r4, #4
 80200d2:	3328      	adds	r3, #40	@ 0x28
 80200d4:	eb05 0803 	add.w	r8, r5, r3
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 80200d8:	42b2      	cmp	r2, r6
 80200da:	d1f1      	bne.n	80200c0 <mg_http_get_header+0x14>
 80200dc:	1ca3      	adds	r3, r4, #2
 80200de:	011b      	lsls	r3, r3, #4
 80200e0:	4632      	mov	r2, r6
 80200e2:	4639      	mov	r1, r7
 80200e4:	58e8      	ldr	r0, [r5, r3]
 80200e6:	f7fe f971 	bl	801e3cc <mg_ncasecmp>
 80200ea:	2800      	cmp	r0, #0
 80200ec:	d1e8      	bne.n	80200c0 <mg_http_get_header+0x14>
 80200ee:	e001      	b.n	80200f4 <mg_http_get_header+0x48>
  return NULL;
 80200f0:	f04f 0800 	mov.w	r8, #0
}
 80200f4:	4640      	mov	r0, r8
 80200f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 80200fa:	f04f 0800 	mov.w	r8, #0
 80200fe:	e7f9      	b.n	80200f4 <mg_http_get_header+0x48>

08020100 <mg_http_status>:
int mg_http_status(const struct mg_http_message *hm) {
 8020100:	b508      	push	{r3, lr}
  return atoi(hm->uri.buf);
 8020102:	6880      	ldr	r0, [r0, #8]
 8020104:	f006 ff88 	bl	8027018 <atoi>
}
 8020108:	bd08      	pop	{r3, pc}
	...

0802010c <mg_json_get>:
int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 802010c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020110:	b095      	sub	sp, #84	@ 0x54
 8020112:	ac08      	add	r4, sp, #32
 8020114:	e884 0003 	stmia.w	r4, {r0, r1}
 8020118:	9202      	str	r2, [sp, #8]
  const char *s = json.buf;
 802011a:	4606      	mov	r6, r0
  int len = (int) json.len;
 802011c:	4688      	mov	r8, r1
  if (toklen) *toklen = 0;
 802011e:	469a      	mov	sl, r3
 8020120:	b113      	cbz	r3, 8020128 <mg_json_get+0x1c>
 8020122:	2300      	movs	r3, #0
 8020124:	f8ca 3000 	str.w	r3, [sl]
  if (path[0] != '$') return MG_JSON_INVALID;
 8020128:	9b02      	ldr	r3, [sp, #8]
 802012a:	781b      	ldrb	r3, [r3, #0]
 802012c:	2b24      	cmp	r3, #36	@ 0x24
 802012e:	f040 8232 	bne.w	8020596 <mg_json_get+0x48a>
  int ci = -1, ei = -1;  // Current and expected index in array
 8020132:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020136:	9303      	str	r3, [sp, #12]
 8020138:	9301      	str	r3, [sp, #4]
  int pos = 1;           // Current position in `path`
 802013a:	2301      	movs	r3, #1
 802013c:	9304      	str	r3, [sp, #16]
  int ed = 0;            // Expected depth
 802013e:	f04f 0b00 	mov.w	fp, #0
  int depth = 0;         // Current depth (nesting level)
 8020142:	465f      	mov	r7, fp
  int j = 0;             // Offset in `s` we're looking for (return value)
 8020144:	f8cd b014 	str.w	fp, [sp, #20]
  for (i = 0; i < len; i++) {
 8020148:	465c      	mov	r4, fp
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 802014a:	465b      	mov	r3, fp
 802014c:	f8cd a018 	str.w	sl, [sp, #24]
 8020150:	e190      	b.n	8020474 <mg_json_get+0x368>
        if (depth == ed) j = i;
 8020152:	455f      	cmp	r7, fp
 8020154:	d029      	beq.n	80201aa <mg_json_get+0x9e>
        if (c == '{') {
 8020156:	2d7b      	cmp	r5, #123	@ 0x7b
 8020158:	d029      	beq.n	80201ae <mg_json_get+0xa2>
        } else if (c == '[') {
 802015a:	2d5b      	cmp	r5, #91	@ 0x5b
 802015c:	d047      	beq.n	80201ee <mg_json_get+0xe2>
        } else if (c == ']' && depth > 0) {  // Empty array
 802015e:	2d5d      	cmp	r5, #93	@ 0x5d
 8020160:	d07a      	beq.n	8020258 <mg_json_get+0x14c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8020162:	2d74      	cmp	r5, #116	@ 0x74
 8020164:	f000 80a4 	beq.w	80202b0 <mg_json_get+0x1a4>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8020168:	2d6e      	cmp	r5, #110	@ 0x6e
 802016a:	f000 80b0 	beq.w	80202ce <mg_json_get+0x1c2>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 802016e:	2d66      	cmp	r5, #102	@ 0x66
 8020170:	f000 80bc 	beq.w	80202ec <mg_json_get+0x1e0>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8020174:	2d2d      	cmp	r5, #45	@ 0x2d
 8020176:	d005      	beq.n	8020184 <mg_json_get+0x78>
 8020178:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 802017c:	b2db      	uxtb	r3, r3
 802017e:	2b09      	cmp	r3, #9
 8020180:	f200 80c3 	bhi.w	802030a <mg_json_get+0x1fe>
          int numlen = 0;
 8020184:	2300      	movs	r3, #0
 8020186:	930b      	str	r3, [sp, #44]	@ 0x2c
          mg_atod(&s[i], len - i, &numlen);
 8020188:	aa0b      	add	r2, sp, #44	@ 0x2c
 802018a:	eba8 0104 	sub.w	r1, r8, r4
 802018e:	4648      	mov	r0, r9
 8020190:	f7fe fdca 	bl	801ed28 <mg_atod>
          i += numlen - 1;
 8020194:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020196:	3b01      	subs	r3, #1
 8020198:	441c      	add	r4, r3
        MG_CHECKRET('V');
 802019a:	455f      	cmp	r7, fp
 802019c:	f000 80c6 	beq.w	802032c <mg_json_get+0x220>
        if (depth == ed && ei >= 0) ci++;
 80201a0:	455f      	cmp	r7, fp
 80201a2:	f000 80da 	beq.w	802035a <mg_json_get+0x24e>
        expecting = S_COMMA_OR_EOO;
 80201a6:	2303      	movs	r3, #3
 80201a8:	e163      	b.n	8020472 <mg_json_get+0x366>
        if (depth == ed) j = i;
 80201aa:	9405      	str	r4, [sp, #20]
 80201ac:	e7d3      	b.n	8020156 <mg_json_get+0x4a>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80201ae:	2f1d      	cmp	r7, #29
 80201b0:	f300 81f4 	bgt.w	802059c <mg_json_get+0x490>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 80201b4:	455f      	cmp	r7, fp
 80201b6:	d007      	beq.n	80201c8 <mg_json_get+0xbc>
          nesting[depth++] = c;
 80201b8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80201bc:	446b      	add	r3, sp
 80201be:	f803 5c20 	strb.w	r5, [r3, #-32]
 80201c2:	3701      	adds	r7, #1
          expecting = S_KEY;
 80201c4:	2301      	movs	r3, #1
          break;
 80201c6:	e154      	b.n	8020472 <mg_json_get+0x366>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 80201c8:	9b02      	ldr	r3, [sp, #8]
 80201ca:	9a04      	ldr	r2, [sp, #16]
 80201cc:	5c9b      	ldrb	r3, [r3, r2]
 80201ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80201d0:	d1f2      	bne.n	80201b8 <mg_json_get+0xac>
 80201d2:	9b01      	ldr	r3, [sp, #4]
 80201d4:	9a03      	ldr	r2, [sp, #12]
 80201d6:	4293      	cmp	r3, r2
 80201d8:	d1ee      	bne.n	80201b8 <mg_json_get+0xac>
            ed++, pos++, ci = ei = -1;
 80201da:	f10b 0b01 	add.w	fp, fp, #1
 80201de:	9b04      	ldr	r3, [sp, #16]
 80201e0:	3301      	adds	r3, #1
 80201e2:	9304      	str	r3, [sp, #16]
 80201e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80201e8:	9303      	str	r3, [sp, #12]
 80201ea:	9301      	str	r3, [sp, #4]
 80201ec:	e7e4      	b.n	80201b8 <mg_json_get+0xac>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80201ee:	2f1d      	cmp	r7, #29
 80201f0:	f300 81d7 	bgt.w	80205a2 <mg_json_get+0x496>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 80201f4:	455f      	cmp	r7, fp
 80201f6:	d006      	beq.n	8020206 <mg_json_get+0xfa>
          nesting[depth++] = c;
 80201f8:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80201fc:	446a      	add	r2, sp
 80201fe:	f802 5c20 	strb.w	r5, [r2, #-32]
 8020202:	3701      	adds	r7, #1
          break;
 8020204:	e135      	b.n	8020472 <mg_json_get+0x366>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8020206:	9a02      	ldr	r2, [sp, #8]
 8020208:	9904      	ldr	r1, [sp, #16]
 802020a:	5c52      	ldrb	r2, [r2, r1]
 802020c:	2a5b      	cmp	r2, #91	@ 0x5b
 802020e:	d1f3      	bne.n	80201f8 <mg_json_get+0xec>
 8020210:	9a01      	ldr	r2, [sp, #4]
 8020212:	9903      	ldr	r1, [sp, #12]
 8020214:	428a      	cmp	r2, r1
 8020216:	d1ef      	bne.n	80201f8 <mg_json_get+0xec>
            ed++, pos++, ci = 0;
 8020218:	f10b 0b01 	add.w	fp, fp, #1
 802021c:	9804      	ldr	r0, [sp, #16]
 802021e:	3001      	adds	r0, #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8020220:	2100      	movs	r1, #0
 8020222:	f8dd c008 	ldr.w	ip, [sp, #8]
 8020226:	e005      	b.n	8020234 <mg_json_get+0x128>
              ei *= 10;
 8020228:	eb01 0181 	add.w	r1, r1, r1, lsl #2
              ei += path[pos] - '0';
 802022c:	3a30      	subs	r2, #48	@ 0x30
 802022e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8020232:	3001      	adds	r0, #1
 8020234:	f81c 2000 	ldrb.w	r2, [ip, r0]
 8020238:	2a5d      	cmp	r2, #93	@ 0x5d
 802023a:	d001      	beq.n	8020240 <mg_json_get+0x134>
 802023c:	2a00      	cmp	r2, #0
 802023e:	d1f3      	bne.n	8020228 <mg_json_get+0x11c>
            if (path[pos] != 0) pos++;
 8020240:	9004      	str	r0, [sp, #16]
 8020242:	9103      	str	r1, [sp, #12]
 8020244:	b12a      	cbz	r2, 8020252 <mg_json_get+0x146>
 8020246:	4602      	mov	r2, r0
 8020248:	3201      	adds	r2, #1
 802024a:	9204      	str	r2, [sp, #16]
            ed++, pos++, ci = 0;
 802024c:	2200      	movs	r2, #0
 802024e:	9201      	str	r2, [sp, #4]
 8020250:	e7d2      	b.n	80201f8 <mg_json_get+0xec>
 8020252:	2200      	movs	r2, #0
 8020254:	9201      	str	r2, [sp, #4]
 8020256:	e7cf      	b.n	80201f8 <mg_json_get+0xec>
        } else if (c == ']' && depth > 0) {  // Empty array
 8020258:	2f00      	cmp	r7, #0
 802025a:	dd82      	ble.n	8020162 <mg_json_get+0x56>
          MG_EOO(']');
 802025c:	455f      	cmp	r7, fp
 802025e:	d020      	beq.n	80202a2 <mg_json_get+0x196>
 8020260:	3f01      	subs	r7, #1
 8020262:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8020266:	446b      	add	r3, sp
 8020268:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 802026c:	3302      	adds	r3, #2
 802026e:	429d      	cmp	r5, r3
 8020270:	f040 819a 	bne.w	80205a8 <mg_json_get+0x49c>
 8020274:	455f      	cmp	r7, fp
 8020276:	d190      	bne.n	802019a <mg_json_get+0x8e>
 8020278:	9b02      	ldr	r3, [sp, #8]
 802027a:	9a04      	ldr	r2, [sp, #16]
 802027c:	5c9b      	ldrb	r3, [r3, r2]
 802027e:	2b00      	cmp	r3, #0
 8020280:	d18b      	bne.n	802019a <mg_json_get+0x8e>
 8020282:	9b01      	ldr	r3, [sp, #4]
 8020284:	9a03      	ldr	r2, [sp, #12]
 8020286:	4293      	cmp	r3, r2
 8020288:	d187      	bne.n	802019a <mg_json_get+0x8e>
 802028a:	f8dd a018 	ldr.w	sl, [sp, #24]
 802028e:	f1ba 0f00 	cmp.w	sl, #0
 8020292:	d004      	beq.n	802029e <mg_json_get+0x192>
 8020294:	9b05      	ldr	r3, [sp, #20]
 8020296:	1ae3      	subs	r3, r4, r3
 8020298:	3301      	adds	r3, #1
 802029a:	f8ca 3000 	str.w	r3, [sl]
 802029e:	9d05      	ldr	r5, [sp, #20]
 80202a0:	e175      	b.n	802058e <mg_json_get+0x482>
 80202a2:	9b01      	ldr	r3, [sp, #4]
 80202a4:	9a03      	ldr	r2, [sp, #12]
 80202a6:	4293      	cmp	r3, r2
 80202a8:	d0da      	beq.n	8020260 <mg_json_get+0x154>
 80202aa:	f06f 0502 	mvn.w	r5, #2
 80202ae:	e16e      	b.n	802058e <mg_json_get+0x482>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 80202b0:	1ce3      	adds	r3, r4, #3
 80202b2:	9307      	str	r3, [sp, #28]
 80202b4:	4543      	cmp	r3, r8
 80202b6:	f6bf af57 	bge.w	8020168 <mg_json_get+0x5c>
 80202ba:	2204      	movs	r2, #4
 80202bc:	49a3      	ldr	r1, [pc, #652]	@ (802054c <mg_json_get+0x440>)
 80202be:	4648      	mov	r0, r9
 80202c0:	f009 fb4a 	bl	8029958 <memcmp>
 80202c4:	2800      	cmp	r0, #0
 80202c6:	f47f af4f 	bne.w	8020168 <mg_json_get+0x5c>
          i += 3;
 80202ca:	9c07      	ldr	r4, [sp, #28]
 80202cc:	e765      	b.n	802019a <mg_json_get+0x8e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 80202ce:	1ce3      	adds	r3, r4, #3
 80202d0:	9307      	str	r3, [sp, #28]
 80202d2:	4543      	cmp	r3, r8
 80202d4:	f6bf af4b 	bge.w	802016e <mg_json_get+0x62>
 80202d8:	2204      	movs	r2, #4
 80202da:	499d      	ldr	r1, [pc, #628]	@ (8020550 <mg_json_get+0x444>)
 80202dc:	4648      	mov	r0, r9
 80202de:	f009 fb3b 	bl	8029958 <memcmp>
 80202e2:	2800      	cmp	r0, #0
 80202e4:	f47f af43 	bne.w	802016e <mg_json_get+0x62>
          i += 3;
 80202e8:	9c07      	ldr	r4, [sp, #28]
 80202ea:	e756      	b.n	802019a <mg_json_get+0x8e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 80202ec:	1d23      	adds	r3, r4, #4
 80202ee:	9307      	str	r3, [sp, #28]
 80202f0:	4543      	cmp	r3, r8
 80202f2:	f6bf af3f 	bge.w	8020174 <mg_json_get+0x68>
 80202f6:	2205      	movs	r2, #5
 80202f8:	4996      	ldr	r1, [pc, #600]	@ (8020554 <mg_json_get+0x448>)
 80202fa:	4648      	mov	r0, r9
 80202fc:	f009 fb2c 	bl	8029958 <memcmp>
 8020300:	2800      	cmp	r0, #0
 8020302:	f47f af37 	bne.w	8020174 <mg_json_get+0x68>
          i += 4;
 8020306:	9c07      	ldr	r4, [sp, #28]
 8020308:	e747      	b.n	802019a <mg_json_get+0x8e>
        } else if (c == '"') {
 802030a:	2d22      	cmp	r5, #34	@ 0x22
 802030c:	f040 814f 	bne.w	80205ae <mg_json_get+0x4a2>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8020310:	f10a 0001 	add.w	r0, sl, #1
 8020314:	eba8 0104 	sub.w	r1, r8, r4
 8020318:	3901      	subs	r1, #1
 802031a:	4430      	add	r0, r6
 802031c:	f7fe fcdf 	bl	801ecde <mg_pass_string>
          if (n < 0) return n;
 8020320:	1e05      	subs	r5, r0, #0
 8020322:	f2c0 8134 	blt.w	802058e <mg_json_get+0x482>
          i += n + 1;
 8020326:	3501      	adds	r5, #1
 8020328:	442c      	add	r4, r5
 802032a:	e736      	b.n	802019a <mg_json_get+0x8e>
        MG_CHECKRET('V');
 802032c:	9b02      	ldr	r3, [sp, #8]
 802032e:	9a04      	ldr	r2, [sp, #16]
 8020330:	5c9b      	ldrb	r3, [r3, r2]
 8020332:	2b00      	cmp	r3, #0
 8020334:	f47f af34 	bne.w	80201a0 <mg_json_get+0x94>
 8020338:	9b01      	ldr	r3, [sp, #4]
 802033a:	9a03      	ldr	r2, [sp, #12]
 802033c:	4293      	cmp	r3, r2
 802033e:	f47f af2f 	bne.w	80201a0 <mg_json_get+0x94>
 8020342:	f8dd a018 	ldr.w	sl, [sp, #24]
 8020346:	f1ba 0f00 	cmp.w	sl, #0
 802034a:	d004      	beq.n	8020356 <mg_json_get+0x24a>
 802034c:	9b05      	ldr	r3, [sp, #20]
 802034e:	1ae3      	subs	r3, r4, r3
 8020350:	3301      	adds	r3, #1
 8020352:	f8ca 3000 	str.w	r3, [sl]
 8020356:	9d05      	ldr	r5, [sp, #20]
 8020358:	e119      	b.n	802058e <mg_json_get+0x482>
        if (depth == ed && ei >= 0) ci++;
 802035a:	9b03      	ldr	r3, [sp, #12]
 802035c:	2b00      	cmp	r3, #0
 802035e:	f2c0 8110 	blt.w	8020582 <mg_json_get+0x476>
 8020362:	9b01      	ldr	r3, [sp, #4]
 8020364:	3301      	adds	r3, #1
 8020366:	9301      	str	r3, [sp, #4]
        expecting = S_COMMA_OR_EOO;
 8020368:	2303      	movs	r3, #3
 802036a:	e082      	b.n	8020472 <mg_json_get+0x366>
        if (c == '"') {
 802036c:	2d22      	cmp	r5, #34	@ 0x22
 802036e:	d014      	beq.n	802039a <mg_json_get+0x28e>
        } else if (c == '}') {  // Empty object
 8020370:	2d7d      	cmp	r5, #125	@ 0x7d
 8020372:	f040 8125 	bne.w	80205c0 <mg_json_get+0x4b4>
          MG_EOO('}');
 8020376:	455f      	cmp	r7, fp
 8020378:	d053      	beq.n	8020422 <mg_json_get+0x316>
 802037a:	3f01      	subs	r7, #1
 802037c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8020380:	446b      	add	r3, sp
 8020382:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8020386:	3302      	adds	r3, #2
 8020388:	429d      	cmp	r5, r3
 802038a:	f040 811c 	bne.w	80205c6 <mg_json_get+0x4ba>
 802038e:	455f      	cmp	r7, fp
 8020390:	d04e      	beq.n	8020430 <mg_json_get+0x324>
          if (depth == ed && ei >= 0) ci++;
 8020392:	455f      	cmp	r7, fp
 8020394:	d061      	beq.n	802045a <mg_json_get+0x34e>
          expecting = S_COMMA_OR_EOO;
 8020396:	2303      	movs	r3, #3
 8020398:	e06b      	b.n	8020472 <mg_json_get+0x366>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 802039a:	f104 0901 	add.w	r9, r4, #1
 802039e:	44b1      	add	r9, r6
 80203a0:	eba8 0104 	sub.w	r1, r8, r4
 80203a4:	3901      	subs	r1, #1
 80203a6:	4648      	mov	r0, r9
 80203a8:	f7fe fc99 	bl	801ecde <mg_pass_string>
          if (n < 0) return n;
 80203ac:	1e05      	subs	r5, r0, #0
 80203ae:	f2c0 80ee 	blt.w	802058e <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 80203b2:	1c63      	adds	r3, r4, #1
 80203b4:	442b      	add	r3, r5
 80203b6:	4543      	cmp	r3, r8
 80203b8:	f280 80fc 	bge.w	80205b4 <mg_json_get+0x4a8>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 80203bc:	455f      	cmp	r7, fp
 80203be:	f2c0 80fc 	blt.w	80205ba <mg_json_get+0x4ae>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 80203c2:	d005      	beq.n	80203d0 <mg_json_get+0x2c4>
          if (depth == ed && path[pos - 1] == '.' &&
 80203c4:	455f      	cmp	r7, fp
 80203c6:	d00d      	beq.n	80203e4 <mg_json_get+0x2d8>
          i += n + 1;
 80203c8:	3501      	adds	r5, #1
 80203ca:	442c      	add	r4, r5
          expecting = S_COLON;
 80203cc:	2302      	movs	r3, #2
 80203ce:	e050      	b.n	8020472 <mg_json_get+0x366>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 80203d0:	9b02      	ldr	r3, [sp, #8]
 80203d2:	9a04      	ldr	r2, [sp, #16]
 80203d4:	4413      	add	r3, r2
 80203d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80203da:	2b2e      	cmp	r3, #46	@ 0x2e
 80203dc:	d0f2      	beq.n	80203c4 <mg_json_get+0x2b8>
 80203de:	f06f 0502 	mvn.w	r5, #2
 80203e2:	e0d4      	b.n	802058e <mg_json_get+0x482>
          if (depth == ed && path[pos - 1] == '.' &&
 80203e4:	9b02      	ldr	r3, [sp, #8]
 80203e6:	9a04      	ldr	r2, [sp, #16]
 80203e8:	4413      	add	r3, r2
 80203ea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80203ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80203f0:	d1ea      	bne.n	80203c8 <mg_json_get+0x2bc>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 80203f2:	462a      	mov	r2, r5
 80203f4:	9b02      	ldr	r3, [sp, #8]
 80203f6:	9904      	ldr	r1, [sp, #16]
 80203f8:	1859      	adds	r1, r3, r1
 80203fa:	4648      	mov	r0, r9
 80203fc:	f009 fb75 	bl	8029aea <strncmp>
          if (depth == ed && path[pos - 1] == '.' &&
 8020400:	2800      	cmp	r0, #0
 8020402:	d1e1      	bne.n	80203c8 <mg_json_get+0x2bc>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8020404:	9904      	ldr	r1, [sp, #16]
 8020406:	194b      	adds	r3, r1, r5
 8020408:	9a02      	ldr	r2, [sp, #8]
 802040a:	5cd2      	ldrb	r2, [r2, r3]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 802040c:	b12a      	cbz	r2, 802041a <mg_json_get+0x30e>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 802040e:	2a2e      	cmp	r2, #46	@ 0x2e
 8020410:	d005      	beq.n	802041e <mg_json_get+0x312>
 8020412:	2a5b      	cmp	r2, #91	@ 0x5b
 8020414:	d1d8      	bne.n	80203c8 <mg_json_get+0x2bc>
            pos += n;
 8020416:	9304      	str	r3, [sp, #16]
 8020418:	e7d6      	b.n	80203c8 <mg_json_get+0x2bc>
 802041a:	9304      	str	r3, [sp, #16]
 802041c:	e7d4      	b.n	80203c8 <mg_json_get+0x2bc>
 802041e:	9304      	str	r3, [sp, #16]
 8020420:	e7d2      	b.n	80203c8 <mg_json_get+0x2bc>
          MG_EOO('}');
 8020422:	9b01      	ldr	r3, [sp, #4]
 8020424:	9a03      	ldr	r2, [sp, #12]
 8020426:	4293      	cmp	r3, r2
 8020428:	d0a7      	beq.n	802037a <mg_json_get+0x26e>
 802042a:	f06f 0502 	mvn.w	r5, #2
 802042e:	e0ae      	b.n	802058e <mg_json_get+0x482>
 8020430:	9b02      	ldr	r3, [sp, #8]
 8020432:	9a04      	ldr	r2, [sp, #16]
 8020434:	5c9b      	ldrb	r3, [r3, r2]
 8020436:	2b00      	cmp	r3, #0
 8020438:	d1ab      	bne.n	8020392 <mg_json_get+0x286>
 802043a:	9b01      	ldr	r3, [sp, #4]
 802043c:	9a03      	ldr	r2, [sp, #12]
 802043e:	4293      	cmp	r3, r2
 8020440:	d1a7      	bne.n	8020392 <mg_json_get+0x286>
 8020442:	f8dd a018 	ldr.w	sl, [sp, #24]
 8020446:	f1ba 0f00 	cmp.w	sl, #0
 802044a:	d004      	beq.n	8020456 <mg_json_get+0x34a>
 802044c:	9b05      	ldr	r3, [sp, #20]
 802044e:	1ae3      	subs	r3, r4, r3
 8020450:	3301      	adds	r3, #1
 8020452:	f8ca 3000 	str.w	r3, [sl]
 8020456:	9d05      	ldr	r5, [sp, #20]
 8020458:	e099      	b.n	802058e <mg_json_get+0x482>
          if (depth == ed && ei >= 0) ci++;
 802045a:	9b03      	ldr	r3, [sp, #12]
 802045c:	2b00      	cmp	r3, #0
 802045e:	f2c0 8092 	blt.w	8020586 <mg_json_get+0x47a>
 8020462:	9b01      	ldr	r3, [sp, #4]
 8020464:	3301      	adds	r3, #1
 8020466:	9301      	str	r3, [sp, #4]
          expecting = S_COMMA_OR_EOO;
 8020468:	2303      	movs	r3, #3
 802046a:	e002      	b.n	8020472 <mg_json_get+0x366>
        if (c == ':') {
 802046c:	2d3a      	cmp	r5, #58	@ 0x3a
 802046e:	d11d      	bne.n	80204ac <mg_json_get+0x3a0>
          expecting = S_VALUE;
 8020470:	2300      	movs	r3, #0
  for (i = 0; i < len; i++) {
 8020472:	3401      	adds	r4, #1
 8020474:	4544      	cmp	r4, r8
 8020476:	f280 8088 	bge.w	802058a <mg_json_get+0x47e>
    unsigned char c = ((unsigned char *) s)[i];
 802047a:	46a2      	mov	sl, r4
 802047c:	eb06 0904 	add.w	r9, r6, r4
 8020480:	5d35      	ldrb	r5, [r6, r4]
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8020482:	2d20      	cmp	r5, #32
 8020484:	d0f5      	beq.n	8020472 <mg_json_get+0x366>
 8020486:	2d09      	cmp	r5, #9
 8020488:	d0f3      	beq.n	8020472 <mg_json_get+0x366>
 802048a:	2d0a      	cmp	r5, #10
 802048c:	d0f1      	beq.n	8020472 <mg_json_get+0x366>
 802048e:	2d0d      	cmp	r5, #13
 8020490:	d0ef      	beq.n	8020472 <mg_json_get+0x366>
    switch (expecting) {
 8020492:	2b03      	cmp	r3, #3
 8020494:	d8ed      	bhi.n	8020472 <mg_json_get+0x366>
 8020496:	a201      	add	r2, pc, #4	@ (adr r2, 802049c <mg_json_get+0x390>)
 8020498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802049c:	08020153 	.word	0x08020153
 80204a0:	0802036d 	.word	0x0802036d
 80204a4:	0802046d 	.word	0x0802046d
 80204a8:	080204b3 	.word	0x080204b3
          return MG_JSON_INVALID;
 80204ac:	f06f 0501 	mvn.w	r5, #1
 80204b0:	e06d      	b.n	802058e <mg_json_get+0x482>
        if (depth <= 0) {
 80204b2:	2f00      	cmp	r7, #0
 80204b4:	f340 808a 	ble.w	80205cc <mg_json_get+0x4c0>
        } else if (c == ',') {
 80204b8:	2d2c      	cmp	r5, #44	@ 0x2c
 80204ba:	d01e      	beq.n	80204fa <mg_json_get+0x3ee>
        } else if (c == ']' || c == '}') {
 80204bc:	2d5d      	cmp	r5, #93	@ 0x5d
 80204be:	d002      	beq.n	80204c6 <mg_json_get+0x3ba>
 80204c0:	2d7d      	cmp	r5, #125	@ 0x7d
 80204c2:	f040 8086 	bne.w	80205d2 <mg_json_get+0x4c6>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 80204c6:	455f      	cmp	r7, fp
 80204c8:	d021      	beq.n	802050e <mg_json_get+0x402>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 80204ca:	455f      	cmp	r7, fp
 80204cc:	d02b      	beq.n	8020526 <mg_json_get+0x41a>
          MG_EOO('O');
 80204ce:	455f      	cmp	r7, fp
 80204d0:	d035      	beq.n	802053e <mg_json_get+0x432>
 80204d2:	3f01      	subs	r7, #1
 80204d4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80204d8:	446a      	add	r2, sp
 80204da:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 80204de:	3202      	adds	r2, #2
 80204e0:	4295      	cmp	r5, r2
 80204e2:	d179      	bne.n	80205d8 <mg_json_get+0x4cc>
 80204e4:	455f      	cmp	r7, fp
 80204e6:	d037      	beq.n	8020558 <mg_json_get+0x44c>
          if (depth == ed && ei >= 0) ci++;
 80204e8:	455f      	cmp	r7, fp
 80204ea:	d1c2      	bne.n	8020472 <mg_json_get+0x366>
 80204ec:	9a03      	ldr	r2, [sp, #12]
 80204ee:	2a00      	cmp	r2, #0
 80204f0:	dbbf      	blt.n	8020472 <mg_json_get+0x366>
 80204f2:	9a01      	ldr	r2, [sp, #4]
 80204f4:	3201      	adds	r2, #1
 80204f6:	9201      	str	r2, [sp, #4]
 80204f8:	e7bb      	b.n	8020472 <mg_json_get+0x366>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 80204fa:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 80204fe:	446b      	add	r3, sp
 8020500:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8020504:	2b7b      	cmp	r3, #123	@ 0x7b
 8020506:	bf14      	ite	ne
 8020508:	2300      	movne	r3, #0
 802050a:	2301      	moveq	r3, #1
 802050c:	e7b1      	b.n	8020472 <mg_json_get+0x366>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 802050e:	2d7d      	cmp	r5, #125	@ 0x7d
 8020510:	d1db      	bne.n	80204ca <mg_json_get+0x3be>
 8020512:	9a02      	ldr	r2, [sp, #8]
 8020514:	9904      	ldr	r1, [sp, #16]
 8020516:	440a      	add	r2, r1
 8020518:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 802051c:	2a2e      	cmp	r2, #46	@ 0x2e
 802051e:	d1d4      	bne.n	80204ca <mg_json_get+0x3be>
            return MG_JSON_NOT_FOUND;
 8020520:	f06f 0502 	mvn.w	r5, #2
 8020524:	e033      	b.n	802058e <mg_json_get+0x482>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 8020526:	2d5d      	cmp	r5, #93	@ 0x5d
 8020528:	d1d1      	bne.n	80204ce <mg_json_get+0x3c2>
 802052a:	9a02      	ldr	r2, [sp, #8]
 802052c:	9904      	ldr	r1, [sp, #16]
 802052e:	440a      	add	r2, r1
 8020530:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8020534:	2a2c      	cmp	r2, #44	@ 0x2c
 8020536:	d1ca      	bne.n	80204ce <mg_json_get+0x3c2>
            return MG_JSON_NOT_FOUND;
 8020538:	f06f 0502 	mvn.w	r5, #2
 802053c:	e027      	b.n	802058e <mg_json_get+0x482>
          MG_EOO('O');
 802053e:	9a01      	ldr	r2, [sp, #4]
 8020540:	9903      	ldr	r1, [sp, #12]
 8020542:	428a      	cmp	r2, r1
 8020544:	d0c5      	beq.n	80204d2 <mg_json_get+0x3c6>
 8020546:	f06f 0502 	mvn.w	r5, #2
 802054a:	e020      	b.n	802058e <mg_json_get+0x482>
 802054c:	0803394c 	.word	0x0803394c
 8020550:	08036820 	.word	0x08036820
 8020554:	08033954 	.word	0x08033954
 8020558:	9a02      	ldr	r2, [sp, #8]
 802055a:	9904      	ldr	r1, [sp, #16]
 802055c:	5c52      	ldrb	r2, [r2, r1]
 802055e:	2a00      	cmp	r2, #0
 8020560:	d1c2      	bne.n	80204e8 <mg_json_get+0x3dc>
 8020562:	9a01      	ldr	r2, [sp, #4]
 8020564:	9903      	ldr	r1, [sp, #12]
 8020566:	428a      	cmp	r2, r1
 8020568:	d1be      	bne.n	80204e8 <mg_json_get+0x3dc>
 802056a:	f8dd a018 	ldr.w	sl, [sp, #24]
 802056e:	f1ba 0f00 	cmp.w	sl, #0
 8020572:	d004      	beq.n	802057e <mg_json_get+0x472>
 8020574:	9b05      	ldr	r3, [sp, #20]
 8020576:	1ae3      	subs	r3, r4, r3
 8020578:	3301      	adds	r3, #1
 802057a:	f8ca 3000 	str.w	r3, [sl]
 802057e:	9d05      	ldr	r5, [sp, #20]
 8020580:	e005      	b.n	802058e <mg_json_get+0x482>
        expecting = S_COMMA_OR_EOO;
 8020582:	2303      	movs	r3, #3
 8020584:	e775      	b.n	8020472 <mg_json_get+0x366>
          expecting = S_COMMA_OR_EOO;
 8020586:	2303      	movs	r3, #3
 8020588:	e773      	b.n	8020472 <mg_json_get+0x366>
  return MG_JSON_NOT_FOUND;
 802058a:	f06f 0502 	mvn.w	r5, #2
}
 802058e:	4628      	mov	r0, r5
 8020590:	b015      	add	sp, #84	@ 0x54
 8020592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (path[0] != '$') return MG_JSON_INVALID;
 8020596:	f06f 0501 	mvn.w	r5, #1
 802059a:	e7f8      	b.n	802058e <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 802059c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80205a0:	e7f5      	b.n	802058e <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80205a2:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80205a6:	e7f2      	b.n	802058e <mg_json_get+0x482>
          MG_EOO(']');
 80205a8:	f06f 0501 	mvn.w	r5, #1
 80205ac:	e7ef      	b.n	802058e <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80205ae:	f06f 0501 	mvn.w	r5, #1
 80205b2:	e7ec      	b.n	802058e <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 80205b4:	f06f 0502 	mvn.w	r5, #2
 80205b8:	e7e9      	b.n	802058e <mg_json_get+0x482>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 80205ba:	f06f 0502 	mvn.w	r5, #2
 80205be:	e7e6      	b.n	802058e <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80205c0:	f06f 0501 	mvn.w	r5, #1
 80205c4:	e7e3      	b.n	802058e <mg_json_get+0x482>
          MG_EOO('}');
 80205c6:	f06f 0501 	mvn.w	r5, #1
 80205ca:	e7e0      	b.n	802058e <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80205cc:	f06f 0501 	mvn.w	r5, #1
 80205d0:	e7dd      	b.n	802058e <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80205d2:	f06f 0501 	mvn.w	r5, #1
 80205d6:	e7da      	b.n	802058e <mg_json_get+0x482>
          MG_EOO('O');
 80205d8:	f06f 0501 	mvn.w	r5, #1
 80205dc:	e7d7      	b.n	802058e <mg_json_get+0x482>
 80205de:	bf00      	nop

080205e0 <mg_json_get_num>:
bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 80205e0:	b510      	push	{r4, lr}
 80205e2:	b084      	sub	sp, #16
 80205e4:	46ec      	mov	ip, sp
 80205e6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80205ea:	461c      	mov	r4, r3
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 80205ec:	ab03      	add	r3, sp, #12
 80205ee:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80205f2:	f7ff fd8b 	bl	802010c <mg_json_get>
 80205f6:	1e02      	subs	r2, r0, #0
 80205f8:	db11      	blt.n	802061e <mg_json_get_num+0x3e>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 80205fa:	9b00      	ldr	r3, [sp, #0]
 80205fc:	1898      	adds	r0, r3, r2
 80205fe:	5c9a      	ldrb	r2, [r3, r2]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8020600:	2a2d      	cmp	r2, #45	@ 0x2d
 8020602:	d003      	beq.n	802060c <mg_json_get_num+0x2c>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8020604:	3a30      	subs	r2, #48	@ 0x30
 8020606:	b2d2      	uxtb	r2, r2
 8020608:	2a09      	cmp	r2, #9
 802060a:	d80b      	bhi.n	8020624 <mg_json_get_num+0x44>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 802060c:	b164      	cbz	r4, 8020628 <mg_json_get_num+0x48>
 802060e:	2200      	movs	r2, #0
 8020610:	9903      	ldr	r1, [sp, #12]
 8020612:	f7fe fb89 	bl	801ed28 <mg_atod>
 8020616:	ed84 0b00 	vstr	d0, [r4]
    found = 1;
 802061a:	2001      	movs	r0, #1
 802061c:	e000      	b.n	8020620 <mg_json_get_num+0x40>
  int n, toklen, found = 0;
 802061e:	2000      	movs	r0, #0
}
 8020620:	b004      	add	sp, #16
 8020622:	bd10      	pop	{r4, pc}
  int n, toklen, found = 0;
 8020624:	2000      	movs	r0, #0
 8020626:	e7fb      	b.n	8020620 <mg_json_get_num+0x40>
    found = 1;
 8020628:	2001      	movs	r0, #1
 802062a:	e7f9      	b.n	8020620 <mg_json_get_num+0x40>

0802062c <mg_json_get_bool>:
bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 802062c:	b510      	push	{r4, lr}
 802062e:	b082      	sub	sp, #8
 8020630:	46ec      	mov	ip, sp
 8020632:	e88c 0003 	stmia.w	ip, {r0, r1}
 8020636:	461c      	mov	r4, r3
  int found = 0, off = mg_json_get(json, path, NULL);
 8020638:	2300      	movs	r3, #0
 802063a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 802063e:	f7ff fd65 	bl	802010c <mg_json_get>
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 8020642:	2800      	cmp	r0, #0
 8020644:	db0f      	blt.n	8020666 <mg_json_get_bool+0x3a>
 8020646:	9b00      	ldr	r3, [sp, #0]
 8020648:	5c1b      	ldrb	r3, [r3, r0]
 802064a:	2b74      	cmp	r3, #116	@ 0x74
 802064c:	d003      	beq.n	8020656 <mg_json_get_bool+0x2a>
 802064e:	2b66      	cmp	r3, #102	@ 0x66
 8020650:	d001      	beq.n	8020656 <mg_json_get_bool+0x2a>
  int found = 0, off = mg_json_get(json, path, NULL);
 8020652:	2000      	movs	r0, #0
 8020654:	e008      	b.n	8020668 <mg_json_get_bool+0x3c>
    if (v != NULL) *v = json.buf[off] == 't';
 8020656:	b14c      	cbz	r4, 802066c <mg_json_get_bool+0x40>
 8020658:	2b74      	cmp	r3, #116	@ 0x74
 802065a:	bf14      	ite	ne
 802065c:	2300      	movne	r3, #0
 802065e:	2301      	moveq	r3, #1
 8020660:	7023      	strb	r3, [r4, #0]
    found = 1;
 8020662:	2001      	movs	r0, #1
 8020664:	e000      	b.n	8020668 <mg_json_get_bool+0x3c>
  int found = 0, off = mg_json_get(json, path, NULL);
 8020666:	2000      	movs	r0, #0
}
 8020668:	b002      	add	sp, #8
 802066a:	bd10      	pop	{r4, pc}
    found = 1;
 802066c:	2001      	movs	r0, #1
 802066e:	e7fb      	b.n	8020668 <mg_json_get_bool+0x3c>

08020670 <mg_hexdump>:
void mg_hexdump(const void *buf, size_t len) {
 8020670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020672:	b085      	sub	sp, #20
 8020674:	4606      	mov	r6, r0
 8020676:	460f      	mov	r7, r1
  for (i = 0; i < len; i++) {
 8020678:	2500      	movs	r5, #0
  unsigned char ascii[16], alen = 0;
 802067a:	462c      	mov	r4, r5
  for (i = 0; i < len; i++) {
 802067c:	e038      	b.n	80206f0 <mg_hexdump+0x80>
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 802067e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020682:	f7fe fc63 	bl	801ef4c <nibble>
 8020686:	f7fe fc49 	bl	801ef1c <logc>
 802068a:	f3c5 2003 	ubfx	r0, r5, #8, #4
 802068e:	f7fe fc5d 	bl	801ef4c <nibble>
 8020692:	f7fe fc43 	bl	801ef1c <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 8020696:	f3c5 1003 	ubfx	r0, r5, #4, #4
 802069a:	f7fe fc57 	bl	801ef4c <nibble>
 802069e:	f7fe fc3d 	bl	801ef1c <logc>
 80206a2:	2030      	movs	r0, #48	@ 0x30
 80206a4:	f7fe fc3a 	bl	801ef1c <logc>
 80206a8:	2103      	movs	r1, #3
 80206aa:	4829      	ldr	r0, [pc, #164]	@ (8020750 <mg_hexdump+0xe0>)
 80206ac:	f7fe fc42 	bl	801ef34 <logs>
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 80206b0:	5d70      	ldrb	r0, [r6, r5]
 80206b2:	0900      	lsrs	r0, r0, #4
 80206b4:	f7fe fc4a 	bl	801ef4c <nibble>
 80206b8:	f7fe fc30 	bl	801ef1c <logc>
 80206bc:	5d70      	ldrb	r0, [r6, r5]
 80206be:	f000 000f 	and.w	r0, r0, #15
 80206c2:	f7fe fc43 	bl	801ef4c <nibble>
 80206c6:	f7fe fc29 	bl	801ef1c <logc>
    logc(' ');                                         // Space after hex number
 80206ca:	2020      	movs	r0, #32
 80206cc:	f7fe fc26 	bl	801ef1c <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 80206d0:	5d72      	ldrb	r2, [r6, r5]
 80206d2:	f1a2 0320 	sub.w	r3, r2, #32
 80206d6:	b2db      	uxtb	r3, r3
 80206d8:	2b5e      	cmp	r3, #94	@ 0x5e
 80206da:	d900      	bls.n	80206de <mg_hexdump+0x6e>
 80206dc:	222e      	movs	r2, #46	@ 0x2e
 80206de:	1c63      	adds	r3, r4, #1
 80206e0:	f104 0110 	add.w	r1, r4, #16
 80206e4:	eb0d 0401 	add.w	r4, sp, r1
 80206e8:	f804 2c10 	strb.w	r2, [r4, #-16]
  for (i = 0; i < len; i++) {
 80206ec:	3501      	adds	r5, #1
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 80206ee:	b2dc      	uxtb	r4, r3
  for (i = 0; i < len; i++) {
 80206f0:	42bd      	cmp	r5, r7
 80206f2:	d21e      	bcs.n	8020732 <mg_hexdump+0xc2>
    if ((i % 16) == 0) {
 80206f4:	f015 0f0f 	tst.w	r5, #15
 80206f8:	d1da      	bne.n	80206b0 <mg_hexdump+0x40>
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 80206fa:	2d00      	cmp	r5, #0
 80206fc:	d0bf      	beq.n	802067e <mg_hexdump+0xe>
 80206fe:	2102      	movs	r1, #2
 8020700:	4814      	ldr	r0, [pc, #80]	@ (8020754 <mg_hexdump+0xe4>)
 8020702:	f7fe fc17 	bl	801ef34 <logs>
 8020706:	2110      	movs	r1, #16
 8020708:	4668      	mov	r0, sp
 802070a:	f7fe fc13 	bl	801ef34 <logs>
 802070e:	200a      	movs	r0, #10
 8020710:	f7fe fc04 	bl	801ef1c <logc>
 8020714:	2400      	movs	r4, #0
 8020716:	e7b2      	b.n	802067e <mg_hexdump+0xe>
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 8020718:	2103      	movs	r1, #3
 802071a:	480d      	ldr	r0, [pc, #52]	@ (8020750 <mg_hexdump+0xe0>)
 802071c:	f7fe fc0a 	bl	801ef34 <logs>
 8020720:	1c63      	adds	r3, r4, #1
 8020722:	f104 0210 	add.w	r2, r4, #16
 8020726:	eb0d 0402 	add.w	r4, sp, r2
 802072a:	2220      	movs	r2, #32
 802072c:	f804 2c10 	strb.w	r2, [r4, #-16]
 8020730:	b2dc      	uxtb	r4, r3
 8020732:	2c0f      	cmp	r4, #15
 8020734:	d9f0      	bls.n	8020718 <mg_hexdump+0xa8>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 8020736:	2102      	movs	r1, #2
 8020738:	4806      	ldr	r0, [pc, #24]	@ (8020754 <mg_hexdump+0xe4>)
 802073a:	f7fe fbfb 	bl	801ef34 <logs>
 802073e:	2110      	movs	r1, #16
 8020740:	4668      	mov	r0, sp
 8020742:	f7fe fbf7 	bl	801ef34 <logs>
 8020746:	200a      	movs	r0, #10
 8020748:	f7fe fbe8 	bl	801ef1c <logc>
}
 802074c:	b005      	add	sp, #20
 802074e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020750:	0803682c 	.word	0x0803682c
 8020754:	08036828 	.word	0x08036828

08020758 <mg_md5_init>:
  ctx->buf[0] = 0x67452301;
 8020758:	4b09      	ldr	r3, [pc, #36]	@ (8020780 <mg_md5_init+0x28>)
 802075a:	6003      	str	r3, [r0, #0]
  ctx->buf[1] = 0xefcdab89;
 802075c:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 8020760:	6043      	str	r3, [r0, #4]
  ctx->buf[2] = 0x98badcfe;
 8020762:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 8020766:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 802076a:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 802076e:	6083      	str	r3, [r0, #8]
  ctx->buf[3] = 0x10325476;
 8020770:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 8020774:	60c3      	str	r3, [r0, #12]
  ctx->bits[0] = 0;
 8020776:	2300      	movs	r3, #0
 8020778:	6103      	str	r3, [r0, #16]
  ctx->bits[1] = 0;
 802077a:	6143      	str	r3, [r0, #20]
}
 802077c:	4770      	bx	lr
 802077e:	bf00      	nop
 8020780:	67452301 	.word	0x67452301

08020784 <mg_md5_update>:
void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 8020784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020788:	4606      	mov	r6, r0
 802078a:	460c      	mov	r4, r1
 802078c:	4615      	mov	r5, r2
  t = ctx->bits[0];
 802078e:	6903      	ldr	r3, [r0, #16]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 8020790:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8020794:	6102      	str	r2, [r0, #16]
 8020796:	429a      	cmp	r2, r3
 8020798:	d202      	bcs.n	80207a0 <mg_md5_update+0x1c>
 802079a:	6942      	ldr	r2, [r0, #20]
 802079c:	3201      	adds	r2, #1
 802079e:	6142      	str	r2, [r0, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 80207a0:	6972      	ldr	r2, [r6, #20]
 80207a2:	eb02 7255 	add.w	r2, r2, r5, lsr #29
 80207a6:	6172      	str	r2, [r6, #20]
  t = (t >> 3) & 0x3f;
 80207a8:	f3c3 07c5 	ubfx	r7, r3, #3, #6
  if (t) {
 80207ac:	f413 7ffc 	tst.w	r3, #504	@ 0x1f8
 80207b0:	d035      	beq.n	802081e <mg_md5_update+0x9a>
    unsigned char *p = (unsigned char *) ctx->in + t;
 80207b2:	f106 0918 	add.w	r9, r6, #24
 80207b6:	eb09 0007 	add.w	r0, r9, r7
    t = 64 - t;
 80207ba:	f1c7 0840 	rsb	r8, r7, #64	@ 0x40
    if (len < t) {
 80207be:	4545      	cmp	r5, r8
 80207c0:	d30b      	bcc.n	80207da <mg_md5_update+0x56>
    memcpy(p, buf, t);
 80207c2:	4642      	mov	r2, r8
 80207c4:	4621      	mov	r1, r4
 80207c6:	f00a fb97 	bl	802aef8 <memcpy>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 80207ca:	4649      	mov	r1, r9
 80207cc:	4630      	mov	r0, r6
 80207ce:	f7fe fbc7 	bl	801ef60 <mg_md5_transform>
    buf += t;
 80207d2:	4444      	add	r4, r8
    len -= t;
 80207d4:	3f40      	subs	r7, #64	@ 0x40
 80207d6:	443d      	add	r5, r7
 80207d8:	e021      	b.n	802081e <mg_md5_update+0x9a>
      memcpy(p, buf, len);
 80207da:	462a      	mov	r2, r5
 80207dc:	4621      	mov	r1, r4
 80207de:	f00a fb8b 	bl	802aef8 <memcpy>
      return;
 80207e2:	e024      	b.n	802082e <mg_md5_update+0xaa>
    memcpy(ctx->in, buf, 64);
 80207e4:	f106 0118 	add.w	r1, r6, #24
 80207e8:	4623      	mov	r3, r4
 80207ea:	468c      	mov	ip, r1
 80207ec:	f104 0840 	add.w	r8, r4, #64	@ 0x40
 80207f0:	681f      	ldr	r7, [r3, #0]
 80207f2:	f8d3 e004 	ldr.w	lr, [r3, #4]
 80207f6:	6898      	ldr	r0, [r3, #8]
 80207f8:	68da      	ldr	r2, [r3, #12]
 80207fa:	f8cc 7000 	str.w	r7, [ip]
 80207fe:	f8cc e004 	str.w	lr, [ip, #4]
 8020802:	f8cc 0008 	str.w	r0, [ip, #8]
 8020806:	f8cc 200c 	str.w	r2, [ip, #12]
 802080a:	3310      	adds	r3, #16
 802080c:	f10c 0c10 	add.w	ip, ip, #16
 8020810:	4543      	cmp	r3, r8
 8020812:	d1ed      	bne.n	80207f0 <mg_md5_update+0x6c>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8020814:	4630      	mov	r0, r6
 8020816:	f7fe fba3 	bl	801ef60 <mg_md5_transform>
    buf += 64;
 802081a:	3440      	adds	r4, #64	@ 0x40
    len -= 64;
 802081c:	3d40      	subs	r5, #64	@ 0x40
  while (len >= 64) {
 802081e:	2d3f      	cmp	r5, #63	@ 0x3f
 8020820:	d8e0      	bhi.n	80207e4 <mg_md5_update+0x60>
  memcpy(ctx->in, buf, len);
 8020822:	462a      	mov	r2, r5
 8020824:	4621      	mov	r1, r4
 8020826:	f106 0018 	add.w	r0, r6, #24
 802082a:	f00a fb65 	bl	802aef8 <memcpy>
}
 802082e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08020832 <mg_md5_final>:
void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 8020832:	b570      	push	{r4, r5, r6, lr}
 8020834:	4604      	mov	r4, r0
 8020836:	460d      	mov	r5, r1
  count = (ctx->bits[0] >> 3) & 0x3F;
 8020838:	6903      	ldr	r3, [r0, #16]
 802083a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  p = ctx->in + count;
 802083e:	f100 0618 	add.w	r6, r0, #24
 8020842:	18f0      	adds	r0, r6, r3
  *p++ = 0x80;
 8020844:	3001      	adds	r0, #1
 8020846:	2280      	movs	r2, #128	@ 0x80
 8020848:	54f2      	strb	r2, [r6, r3]
  count = 64 - 1 - count;
 802084a:	f1c3 023f 	rsb	r2, r3, #63	@ 0x3f
  if (count < 8) {
 802084e:	2a07      	cmp	r2, #7
 8020850:	d821      	bhi.n	8020896 <mg_md5_final+0x64>
    memset(p, 0, count);
 8020852:	2100      	movs	r1, #0
 8020854:	f009 f914 	bl	8029a80 <memset>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8020858:	4631      	mov	r1, r6
 802085a:	4620      	mov	r0, r4
 802085c:	f7fe fb80 	bl	801ef60 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 8020860:	2238      	movs	r2, #56	@ 0x38
 8020862:	2100      	movs	r1, #0
 8020864:	4630      	mov	r0, r6
 8020866:	f009 f90b 	bl	8029a80 <memset>
  a[14] = ctx->bits[0];
 802086a:	6923      	ldr	r3, [r4, #16]
 802086c:	6523      	str	r3, [r4, #80]	@ 0x50
  a[15] = ctx->bits[1];
 802086e:	6963      	ldr	r3, [r4, #20]
 8020870:	6563      	str	r3, [r4, #84]	@ 0x54
  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8020872:	4631      	mov	r1, r6
 8020874:	4620      	mov	r0, r4
 8020876:	f7fe fb73 	bl	801ef60 <mg_md5_transform>
  memcpy(digest, ctx->buf, 16);
 802087a:	6820      	ldr	r0, [r4, #0]
 802087c:	6861      	ldr	r1, [r4, #4]
 802087e:	68a2      	ldr	r2, [r4, #8]
 8020880:	68e3      	ldr	r3, [r4, #12]
 8020882:	6028      	str	r0, [r5, #0]
 8020884:	6069      	str	r1, [r5, #4]
 8020886:	60aa      	str	r2, [r5, #8]
 8020888:	60eb      	str	r3, [r5, #12]
  memset((char *) ctx, 0, sizeof(*ctx));
 802088a:	2258      	movs	r2, #88	@ 0x58
 802088c:	2100      	movs	r1, #0
 802088e:	4620      	mov	r0, r4
 8020890:	f009 f8f6 	bl	8029a80 <memset>
}
 8020894:	bd70      	pop	{r4, r5, r6, pc}
    memset(p, 0, count - 8);
 8020896:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 802089a:	2100      	movs	r1, #0
 802089c:	f009 f8f0 	bl	8029a80 <memset>
 80208a0:	e7e3      	b.n	802086a <mg_md5_final+0x38>

080208a2 <mg_mqtt_parse>:
                  struct mg_mqtt_message *m) {
 80208a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80208a6:	4604      	mov	r4, r0
 80208a8:	460d      	mov	r5, r1
 80208aa:	4617      	mov	r7, r2
 80208ac:	461e      	mov	r6, r3
  memset(m, 0, sizeof(*m));
 80208ae:	2228      	movs	r2, #40	@ 0x28
 80208b0:	2100      	movs	r1, #0
 80208b2:	4618      	mov	r0, r3
 80208b4:	f009 f8e4 	bl	8029a80 <memset>
  m->dgram.buf = (char *) buf;
 80208b8:	6134      	str	r4, [r6, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 80208ba:	2d01      	cmp	r5, #1
 80208bc:	f240 8088 	bls.w	80209d0 <mg_mqtt_parse+0x12e>
  m->cmd = (uint8_t) (buf[0] >> 4);
 80208c0:	7820      	ldrb	r0, [r4, #0]
 80208c2:	0900      	lsrs	r0, r0, #4
 80208c4:	76b0      	strb	r0, [r6, #26]
  m->qos = (buf[0] >> 1) & 3;
 80208c6:	46a4      	mov	ip, r4
 80208c8:	f81c 9b01 	ldrb.w	r9, [ip], #1
 80208cc:	f3c9 0941 	ubfx	r9, r9, #1, #2
 80208d0:	f886 901b 	strb.w	r9, [r6, #27]
  n = len_len = 0;
 80208d4:	2300      	movs	r3, #0
 80208d6:	4619      	mov	r1, r3
  uint8_t lc = 0, *p, *end;
 80208d8:	461a      	mov	r2, r3
  while ((size_t) (p - buf) < len) {
 80208da:	ebac 0e04 	sub.w	lr, ip, r4
 80208de:	45ae      	cmp	lr, r5
 80208e0:	d211      	bcs.n	8020906 <mg_mqtt_parse+0x64>
    lc = *((uint8_t *) p++);
 80208e2:	f81c 2b01 	ldrb.w	r2, [ip], #1
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 80208e6:	f002 0e7f 	and.w	lr, r2, #127	@ 0x7f
 80208ea:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
 80208ee:	fa0e fe08 	lsl.w	lr, lr, r8
 80208f2:	4471      	add	r1, lr
    len_len++;
 80208f4:	3301      	adds	r3, #1
    if (!(lc & 0x80)) break;
 80208f6:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80208fa:	d004      	beq.n	8020906 <mg_mqtt_parse+0x64>
    if (len_len >= 4) return MQTT_MALFORMED;
 80208fc:	2b03      	cmp	r3, #3
 80208fe:	d9ec      	bls.n	80208da <mg_mqtt_parse+0x38>
 8020900:	2002      	movs	r0, #2
}
 8020902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  end = p + n;
 8020906:	eb0c 0801 	add.w	r8, ip, r1
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 802090a:	f012 0f80 	tst.w	r2, #128	@ 0x80
 802090e:	d161      	bne.n	80209d4 <mg_mqtt_parse+0x132>
 8020910:	4425      	add	r5, r4
 8020912:	4545      	cmp	r5, r8
 8020914:	d360      	bcc.n	80209d8 <mg_mqtt_parse+0x136>
  m->dgram.len = (size_t) (end - buf);
 8020916:	eba8 0304 	sub.w	r3, r8, r4
 802091a:	6173      	str	r3, [r6, #20]
  switch (m->cmd) {
 802091c:	2803      	cmp	r0, #3
 802091e:	d01c      	beq.n	802095a <mg_mqtt_parse+0xb8>
 8020920:	d80a      	bhi.n	8020938 <mg_mqtt_parse+0x96>
 8020922:	2802      	cmp	r0, #2
 8020924:	d106      	bne.n	8020934 <mg_mqtt_parse+0x92>
      if (end - p < 2) return MQTT_MALFORMED;
 8020926:	2901      	cmp	r1, #1
 8020928:	dd5a      	ble.n	80209e0 <mg_mqtt_parse+0x13e>
      m->ack = p[1];
 802092a:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802092e:	7733      	strb	r3, [r6, #28]
  return MQTT_OK;
 8020930:	2000      	movs	r0, #0
      break;
 8020932:	e7e6      	b.n	8020902 <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 8020934:	2000      	movs	r0, #0
 8020936:	e7e4      	b.n	8020902 <mg_mqtt_parse+0x60>
 8020938:	3804      	subs	r0, #4
 802093a:	b2c0      	uxtb	r0, r0
 802093c:	2807      	cmp	r0, #7
 802093e:	d84d      	bhi.n	80209dc <mg_mqtt_parse+0x13a>
      if (p + 2 > end) return MQTT_MALFORMED;
 8020940:	f10c 0302 	add.w	r3, ip, #2
 8020944:	4543      	cmp	r3, r8
 8020946:	d84d      	bhi.n	80209e4 <mg_mqtt_parse+0x142>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8020948:	f89c 2000 	ldrb.w	r2, [ip]
 802094c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8020950:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8020954:	8333      	strh	r3, [r6, #24]
  return MQTT_OK;
 8020956:	2000      	movs	r0, #0
      break;
 8020958:	e7d3      	b.n	8020902 <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 802095a:	f10c 0202 	add.w	r2, ip, #2
 802095e:	4542      	cmp	r2, r8
 8020960:	d842      	bhi.n	80209e8 <mg_mqtt_parse+0x146>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8020962:	f89c 1000 	ldrb.w	r1, [ip]
 8020966:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802096a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 802096e:	6073      	str	r3, [r6, #4]
      m->topic.buf = (char *) p + 2;
 8020970:	6032      	str	r2, [r6, #0]
      p += 2 + m->topic.len;
 8020972:	3302      	adds	r3, #2
 8020974:	eb0c 0503 	add.w	r5, ip, r3
      if (p > end) return MQTT_MALFORMED;
 8020978:	45a8      	cmp	r8, r5
 802097a:	d337      	bcc.n	80209ec <mg_mqtt_parse+0x14a>
      if (m->qos > 0) {
 802097c:	f1b9 0f00 	cmp.w	r9, #0
 8020980:	d008      	beq.n	8020994 <mg_mqtt_parse+0xf2>
        if (p + 2 > end) return MQTT_MALFORMED;
 8020982:	1caa      	adds	r2, r5, #2
 8020984:	4542      	cmp	r2, r8
 8020986:	d833      	bhi.n	80209f0 <mg_mqtt_parse+0x14e>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8020988:	7829      	ldrb	r1, [r5, #0]
 802098a:	786b      	ldrb	r3, [r5, #1]
 802098c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8020990:	8333      	strh	r3, [r6, #24]
        p += 2;
 8020992:	4615      	mov	r5, r2
      if (p > end) return MQTT_MALFORMED;
 8020994:	4545      	cmp	r5, r8
 8020996:	d82d      	bhi.n	80209f4 <mg_mqtt_parse+0x152>
      if (version == 5 && p + 2 < end) {
 8020998:	2f05      	cmp	r7, #5
 802099a:	d007      	beq.n	80209ac <mg_mqtt_parse+0x10a>
      if (p > end) return MQTT_MALFORMED;
 802099c:	4545      	cmp	r5, r8
 802099e:	d82d      	bhi.n	80209fc <mg_mqtt_parse+0x15a>
      m->data.buf = (char *) p;
 80209a0:	60b5      	str	r5, [r6, #8]
      m->data.len = (size_t) (end - p);
 80209a2:	eba8 0505 	sub.w	r5, r8, r5
 80209a6:	60f5      	str	r5, [r6, #12]
  return MQTT_OK;
 80209a8:	2000      	movs	r0, #0
      break;
 80209aa:	e7aa      	b.n	8020902 <mg_mqtt_parse+0x60>
      if (version == 5 && p + 2 < end) {
 80209ac:	1cab      	adds	r3, r5, #2
 80209ae:	4543      	cmp	r3, r8
 80209b0:	d2f4      	bcs.n	802099c <mg_mqtt_parse+0xfa>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 80209b2:	f106 0224 	add.w	r2, r6, #36	@ 0x24
 80209b6:	eba8 0105 	sub.w	r1, r8, r5
 80209ba:	4628      	mov	r0, r5
 80209bc:	f7fe fe78 	bl	801f6b0 <decode_varint>
        if (!len_len) return MQTT_MALFORMED;
 80209c0:	b1d0      	cbz	r0, 80209f8 <mg_mqtt_parse+0x156>
        m->props_start = (size_t) (p + len_len - buf);
 80209c2:	182b      	adds	r3, r5, r0
 80209c4:	1b1b      	subs	r3, r3, r4
 80209c6:	6233      	str	r3, [r6, #32]
        p += len_len + m->props_size;
 80209c8:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80209ca:	4403      	add	r3, r0
 80209cc:	441d      	add	r5, r3
 80209ce:	e7e5      	b.n	802099c <mg_mqtt_parse+0xfa>
  if (len < 2) return MQTT_INCOMPLETE;
 80209d0:	2001      	movs	r0, #1
 80209d2:	e796      	b.n	8020902 <mg_mqtt_parse+0x60>
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 80209d4:	2001      	movs	r0, #1
 80209d6:	e794      	b.n	8020902 <mg_mqtt_parse+0x60>
 80209d8:	2001      	movs	r0, #1
 80209da:	e792      	b.n	8020902 <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 80209dc:	2000      	movs	r0, #0
 80209de:	e790      	b.n	8020902 <mg_mqtt_parse+0x60>
      if (end - p < 2) return MQTT_MALFORMED;
 80209e0:	2002      	movs	r0, #2
 80209e2:	e78e      	b.n	8020902 <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 80209e4:	2002      	movs	r0, #2
 80209e6:	e78c      	b.n	8020902 <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 80209e8:	2002      	movs	r0, #2
 80209ea:	e78a      	b.n	8020902 <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 80209ec:	2002      	movs	r0, #2
 80209ee:	e788      	b.n	8020902 <mg_mqtt_parse+0x60>
        if (p + 2 > end) return MQTT_MALFORMED;
 80209f0:	2002      	movs	r0, #2
 80209f2:	e786      	b.n	8020902 <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 80209f4:	2002      	movs	r0, #2
 80209f6:	e784      	b.n	8020902 <mg_mqtt_parse+0x60>
        if (!len_len) return MQTT_MALFORMED;
 80209f8:	2002      	movs	r0, #2
 80209fa:	e782      	b.n	8020902 <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 80209fc:	2002      	movs	r0, #2
 80209fe:	e780      	b.n	8020902 <mg_mqtt_parse+0x60>

08020a00 <mg_alloc_conn>:
struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 8020a00:	b510      	push	{r4, lr}
 8020a02:	4604      	mov	r4, r0
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 8020a04:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8020a06:	31b0      	adds	r1, #176	@ 0xb0
 8020a08:	2001      	movs	r0, #1
 8020a0a:	f7ff f9d8 	bl	801fdbe <mg_calloc>
  if (c != NULL) {
 8020a0e:	4603      	mov	r3, r0
 8020a10:	b148      	cbz	r0, 8020a26 <mg_alloc_conn+0x26>
    c->mgr = mgr;
 8020a12:	6044      	str	r4, [r0, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 8020a14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8020a18:	6742      	str	r2, [r0, #116]	@ 0x74
 8020a1a:	6442      	str	r2, [r0, #68]	@ 0x44
 8020a1c:	6542      	str	r2, [r0, #84]	@ 0x54
    c->id = ++mgr->nextid;
 8020a1e:	69e2      	ldr	r2, [r4, #28]
 8020a20:	3201      	adds	r2, #1
 8020a22:	61e2      	str	r2, [r4, #28]
 8020a24:	6342      	str	r2, [r0, #52]	@ 0x34
}
 8020a26:	4618      	mov	r0, r3
 8020a28:	bd10      	pop	{r4, pc}
	...

08020a2c <mg_mgr_init>:
void mg_mgr_init(struct mg_mgr *mgr) {
 8020a2c:	b510      	push	{r4, lr}
 8020a2e:	4604      	mov	r4, r0
  memset(mgr, 0, sizeof(*mgr));
 8020a30:	2248      	movs	r2, #72	@ 0x48
 8020a32:	2100      	movs	r1, #0
 8020a34:	f009 f824 	bl	8029a80 <memset>
  mgr->epoll_fd = -1;
 8020a38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020a3c:	63a3      	str	r3, [r4, #56]	@ 0x38
  mgr->pipe = MG_INVALID_SOCKET;
 8020a3e:	6463      	str	r3, [r4, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 8020a40:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8020a44:	6163      	str	r3, [r4, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 8020a46:	4b02      	ldr	r3, [pc, #8]	@ (8020a50 <mg_mgr_init+0x24>)
 8020a48:	6063      	str	r3, [r4, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8020a4a:	4b02      	ldr	r3, [pc, #8]	@ (8020a54 <mg_mgr_init+0x28>)
 8020a4c:	60e3      	str	r3, [r4, #12]
}
 8020a4e:	bd10      	pop	{r4, pc}
 8020a50:	08036830 	.word	0x08036830
 8020a54:	08036844 	.word	0x08036844

08020a58 <mg_snprintf>:
size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8020a58:	b40c      	push	{r2, r3}
 8020a5a:	b500      	push	{lr}
 8020a5c:	b083      	sub	sp, #12
 8020a5e:	ab04      	add	r3, sp, #16
 8020a60:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8020a64:	9301      	str	r3, [sp, #4]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8020a66:	ab01      	add	r3, sp, #4
 8020a68:	f000 fcde 	bl	8021428 <mg_vsnprintf>
}
 8020a6c:	b003      	add	sp, #12
 8020a6e:	f85d eb04 	ldr.w	lr, [sp], #4
 8020a72:	b002      	add	sp, #8
 8020a74:	4770      	bx	lr
	...

08020a78 <mg_dtoa>:
static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8020a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a7c:	b093      	sub	sp, #76	@ 0x4c
 8020a7e:	9005      	str	r0, [sp, #20]
 8020a80:	9106      	str	r1, [sp, #24]
 8020a82:	ec51 0b10 	vmov	r0, r1, d0
 8020a86:	ed8d 0b02 	vstr	d0, [sp, #8]
 8020a8a:	4690      	mov	r8, r2
 8020a8c:	9307      	str	r3, [sp, #28]
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8020a8e:	2200      	movs	r2, #0
 8020a90:	2300      	movs	r3, #0
 8020a92:	f7f0 f831 	bl	8010af8 <__aeabi_dcmpeq>
 8020a96:	b9c8      	cbnz	r0, 8020acc <mg_dtoa+0x54>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8020a98:	ed9d 0b02 	vldr	d0, [sp, #8]
 8020a9c:	f7fd fbb8 	bl	801e210 <xisinf>
 8020aa0:	b9d8      	cbnz	r0, 8020ada <mg_dtoa+0x62>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8020aa2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8020aa6:	f7fd fbc5 	bl	801e234 <xisnan>
 8020aaa:	4606      	mov	r6, r0
 8020aac:	bb28      	cbnz	r0, 8020afa <mg_dtoa+0x82>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8020aae:	2200      	movs	r2, #0
 8020ab0:	2300      	movs	r3, #0
 8020ab2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8020ab6:	4620      	mov	r0, r4
 8020ab8:	4629      	mov	r1, r5
 8020aba:	f7f0 f827 	bl	8010b0c <__aeabi_dcmplt>
 8020abe:	bb18      	cbnz	r0, 8020b08 <mg_dtoa+0x90>
  int i, s = 0, n = 0, e = 0;
 8020ac0:	4637      	mov	r7, r6
  mul = 1.0;
 8020ac2:	2400      	movs	r4, #0
 8020ac4:	4dba      	ldr	r5, [pc, #744]	@ (8020db0 <mg_dtoa+0x338>)
 8020ac6:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8020aca:	e02f      	b.n	8020b2c <mg_dtoa+0xb4>
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8020acc:	4bb9      	ldr	r3, [pc, #740]	@ (8020db4 <mg_dtoa+0x33c>)
 8020ace:	4aba      	ldr	r2, [pc, #744]	@ (8020db8 <mg_dtoa+0x340>)
 8020ad0:	9906      	ldr	r1, [sp, #24]
 8020ad2:	9805      	ldr	r0, [sp, #20]
 8020ad4:	f7ff ffc0 	bl	8020a58 <mg_snprintf>
 8020ad8:	e1d3      	b.n	8020e82 <mg_dtoa+0x40a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8020ada:	2200      	movs	r2, #0
 8020adc:	2300      	movs	r3, #0
 8020ade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020ae2:	f7f0 f831 	bl	8010b48 <__aeabi_dcmpgt>
 8020ae6:	b130      	cbz	r0, 8020af6 <mg_dtoa+0x7e>
 8020ae8:	4bb4      	ldr	r3, [pc, #720]	@ (8020dbc <mg_dtoa+0x344>)
 8020aea:	4ab3      	ldr	r2, [pc, #716]	@ (8020db8 <mg_dtoa+0x340>)
 8020aec:	9906      	ldr	r1, [sp, #24]
 8020aee:	9805      	ldr	r0, [sp, #20]
 8020af0:	f7ff ffb2 	bl	8020a58 <mg_snprintf>
 8020af4:	e1c5      	b.n	8020e82 <mg_dtoa+0x40a>
 8020af6:	4bb2      	ldr	r3, [pc, #712]	@ (8020dc0 <mg_dtoa+0x348>)
 8020af8:	e7f7      	b.n	8020aea <mg_dtoa+0x72>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8020afa:	4bb2      	ldr	r3, [pc, #712]	@ (8020dc4 <mg_dtoa+0x34c>)
 8020afc:	4aae      	ldr	r2, [pc, #696]	@ (8020db8 <mg_dtoa+0x340>)
 8020afe:	9906      	ldr	r1, [sp, #24]
 8020b00:	9805      	ldr	r0, [sp, #20]
 8020b02:	f7ff ffa9 	bl	8020a58 <mg_snprintf>
 8020b06:	e1bc      	b.n	8020e82 <mg_dtoa+0x40a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8020b08:	4622      	mov	r2, r4
 8020b0a:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8020b0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8020b12:	232d      	movs	r3, #45	@ 0x2d
 8020b14:	f88d 3020 	strb.w	r3, [sp, #32]
 8020b18:	2701      	movs	r7, #1
 8020b1a:	e7d2      	b.n	8020ac2 <mg_dtoa+0x4a>
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8020b1c:	2200      	movs	r2, #0
 8020b1e:	4baa      	ldr	r3, [pc, #680]	@ (8020dc8 <mg_dtoa+0x350>)
 8020b20:	4620      	mov	r0, r4
 8020b22:	4629      	mov	r1, r5
 8020b24:	f7ef fd80 	bl	8010628 <__aeabi_dmul>
 8020b28:	4604      	mov	r4, r0
 8020b2a:	460d      	mov	r5, r1
 8020b2c:	2200      	movs	r2, #0
 8020b2e:	4ba6      	ldr	r3, [pc, #664]	@ (8020dc8 <mg_dtoa+0x350>)
 8020b30:	4650      	mov	r0, sl
 8020b32:	4659      	mov	r1, fp
 8020b34:	f7ef fffe 	bl	8010b34 <__aeabi_dcmpge>
 8020b38:	b1b0      	cbz	r0, 8020b68 <mg_dtoa+0xf0>
 8020b3a:	4622      	mov	r2, r4
 8020b3c:	462b      	mov	r3, r5
 8020b3e:	4650      	mov	r0, sl
 8020b40:	4659      	mov	r1, fp
 8020b42:	f7ef fe9b 	bl	801087c <__aeabi_ddiv>
 8020b46:	2200      	movs	r2, #0
 8020b48:	4b9f      	ldr	r3, [pc, #636]	@ (8020dc8 <mg_dtoa+0x350>)
 8020b4a:	f7ef fff3 	bl	8010b34 <__aeabi_dcmpge>
 8020b4e:	2800      	cmp	r0, #0
 8020b50:	d1e4      	bne.n	8020b1c <mg_dtoa+0xa4>
 8020b52:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8020b56:	e007      	b.n	8020b68 <mg_dtoa+0xf0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8020b58:	2200      	movs	r2, #0
 8020b5a:	4b9b      	ldr	r3, [pc, #620]	@ (8020dc8 <mg_dtoa+0x350>)
 8020b5c:	4620      	mov	r0, r4
 8020b5e:	4629      	mov	r1, r5
 8020b60:	f7ef fe8c 	bl	801087c <__aeabi_ddiv>
 8020b64:	4604      	mov	r4, r0
 8020b66:	460d      	mov	r5, r1
 8020b68:	2200      	movs	r2, #0
 8020b6a:	4b91      	ldr	r3, [pc, #580]	@ (8020db0 <mg_dtoa+0x338>)
 8020b6c:	4650      	mov	r0, sl
 8020b6e:	4659      	mov	r1, fp
 8020b70:	f7ef ffd6 	bl	8010b20 <__aeabi_dcmple>
 8020b74:	b158      	cbz	r0, 8020b8e <mg_dtoa+0x116>
 8020b76:	4622      	mov	r2, r4
 8020b78:	462b      	mov	r3, r5
 8020b7a:	4650      	mov	r0, sl
 8020b7c:	4659      	mov	r1, fp
 8020b7e:	f7ef fe7d 	bl	801087c <__aeabi_ddiv>
 8020b82:	2200      	movs	r2, #0
 8020b84:	4b8a      	ldr	r3, [pc, #552]	@ (8020db0 <mg_dtoa+0x338>)
 8020b86:	f7ef ffcb 	bl	8010b20 <__aeabi_dcmple>
 8020b8a:	2800      	cmp	r0, #0
 8020b8c:	d1e4      	bne.n	8020b58 <mg_dtoa+0xe0>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8020b8e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8020b92:	2200      	movs	r2, #0
 8020b94:	4b8d      	ldr	r3, [pc, #564]	@ (8020dcc <mg_dtoa+0x354>)
 8020b96:	4620      	mov	r0, r4
 8020b98:	4629      	mov	r1, r5
 8020b9a:	f7ef fd45 	bl	8010628 <__aeabi_dmul>
 8020b9e:	4634      	mov	r4, r6
 8020ba0:	e004      	b.n	8020bac <mg_dtoa+0x134>
 8020ba2:	2200      	movs	r2, #0
 8020ba4:	4b88      	ldr	r3, [pc, #544]	@ (8020dc8 <mg_dtoa+0x350>)
 8020ba6:	f7ef fe69 	bl	801087c <__aeabi_ddiv>
 8020baa:	3401      	adds	r4, #1
 8020bac:	4544      	cmp	r4, r8
 8020bae:	dbf8      	blt.n	8020ba2 <mg_dtoa+0x12a>
  d += t;
 8020bb0:	4602      	mov	r2, r0
 8020bb2:	460b      	mov	r3, r1
 8020bb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020bb8:	f7ef fb80 	bl	80102bc <__adddf3>
 8020bbc:	4682      	mov	sl, r0
 8020bbe:	468b      	mov	fp, r1
  int i, s = 0, n = 0, e = 0;
 8020bc0:	46b1      	mov	r9, r6
  mul = 1.0;
 8020bc2:	2400      	movs	r4, #0
 8020bc4:	4d7a      	ldr	r5, [pc, #488]	@ (8020db0 <mg_dtoa+0x338>)
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8020bc6:	e009      	b.n	8020bdc <mg_dtoa+0x164>
 8020bc8:	2200      	movs	r2, #0
 8020bca:	4b7f      	ldr	r3, [pc, #508]	@ (8020dc8 <mg_dtoa+0x350>)
 8020bcc:	4620      	mov	r0, r4
 8020bce:	4629      	mov	r1, r5
 8020bd0:	f7ef fd2a 	bl	8010628 <__aeabi_dmul>
 8020bd4:	4604      	mov	r4, r0
 8020bd6:	460d      	mov	r5, r1
 8020bd8:	f109 0901 	add.w	r9, r9, #1
 8020bdc:	2200      	movs	r2, #0
 8020bde:	4b7a      	ldr	r3, [pc, #488]	@ (8020dc8 <mg_dtoa+0x350>)
 8020be0:	4650      	mov	r0, sl
 8020be2:	4659      	mov	r1, fp
 8020be4:	f7ef ffa6 	bl	8010b34 <__aeabi_dcmpge>
 8020be8:	b1b0      	cbz	r0, 8020c18 <mg_dtoa+0x1a0>
 8020bea:	4622      	mov	r2, r4
 8020bec:	462b      	mov	r3, r5
 8020bee:	4650      	mov	r0, sl
 8020bf0:	4659      	mov	r1, fp
 8020bf2:	f7ef fe43 	bl	801087c <__aeabi_ddiv>
 8020bf6:	2200      	movs	r2, #0
 8020bf8:	4b73      	ldr	r3, [pc, #460]	@ (8020dc8 <mg_dtoa+0x350>)
 8020bfa:	f7ef ff9b 	bl	8010b34 <__aeabi_dcmpge>
 8020bfe:	2800      	cmp	r0, #0
 8020c00:	d1e2      	bne.n	8020bc8 <mg_dtoa+0x150>
 8020c02:	e009      	b.n	8020c18 <mg_dtoa+0x1a0>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8020c04:	2200      	movs	r2, #0
 8020c06:	4b70      	ldr	r3, [pc, #448]	@ (8020dc8 <mg_dtoa+0x350>)
 8020c08:	4620      	mov	r0, r4
 8020c0a:	4629      	mov	r1, r5
 8020c0c:	f7ef fe36 	bl	801087c <__aeabi_ddiv>
 8020c10:	4604      	mov	r4, r0
 8020c12:	460d      	mov	r5, r1
 8020c14:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8020c18:	2200      	movs	r2, #0
 8020c1a:	4b65      	ldr	r3, [pc, #404]	@ (8020db0 <mg_dtoa+0x338>)
 8020c1c:	4650      	mov	r0, sl
 8020c1e:	4659      	mov	r1, fp
 8020c20:	f7ef ff74 	bl	8010b0c <__aeabi_dcmplt>
 8020c24:	b158      	cbz	r0, 8020c3e <mg_dtoa+0x1c6>
 8020c26:	4622      	mov	r2, r4
 8020c28:	462b      	mov	r3, r5
 8020c2a:	4650      	mov	r0, sl
 8020c2c:	4659      	mov	r1, fp
 8020c2e:	f7ef fe25 	bl	801087c <__aeabi_ddiv>
 8020c32:	2200      	movs	r2, #0
 8020c34:	4b5e      	ldr	r3, [pc, #376]	@ (8020db0 <mg_dtoa+0x338>)
 8020c36:	f7ef ff69 	bl	8010b0c <__aeabi_dcmplt>
 8020c3a:	2800      	cmp	r0, #0
 8020c3c:	d1e2      	bne.n	8020c04 <mg_dtoa+0x18c>
  if (e >= width && width > 1) {
 8020c3e:	45c1      	cmp	r9, r8
 8020c40:	db02      	blt.n	8020c48 <mg_dtoa+0x1d0>
 8020c42:	f1b8 0f01 	cmp.w	r8, #1
 8020c46:	dc25      	bgt.n	8020c94 <mg_dtoa+0x21c>
  } else if (e <= -width && width > 1) {
 8020c48:	f1c8 0300 	rsb	r3, r8, #0
 8020c4c:	454b      	cmp	r3, r9
 8020c4e:	db5e      	blt.n	8020d0e <mg_dtoa+0x296>
 8020c50:	f1b8 0f01 	cmp.w	r8, #1
 8020c54:	dd5b      	ble.n	8020d0e <mg_dtoa+0x296>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8020c56:	4622      	mov	r2, r4
 8020c58:	462b      	mov	r3, r5
 8020c5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020c5e:	f7ef fe0d 	bl	801087c <__aeabi_ddiv>
 8020c62:	ad08      	add	r5, sp, #32
 8020c64:	9b07      	ldr	r3, [sp, #28]
 8020c66:	4642      	mov	r2, r8
 8020c68:	ec41 0b10 	vmov	d0, r0, r1
 8020c6c:	2128      	movs	r1, #40	@ 0x28
 8020c6e:	4628      	mov	r0, r5
 8020c70:	f7ff ff02 	bl	8020a78 <mg_dtoa>
 8020c74:	4604      	mov	r4, r0
    n += addexp(buf + s + n, -e, '-');
 8020c76:	1838      	adds	r0, r7, r0
 8020c78:	222d      	movs	r2, #45	@ 0x2d
 8020c7a:	f1c9 0100 	rsb	r1, r9, #0
 8020c7e:	4428      	add	r0, r5
 8020c80:	f7fd fa8c 	bl	801e19c <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8020c84:	9500      	str	r5, [sp, #0]
 8020c86:	1823      	adds	r3, r4, r0
 8020c88:	4a51      	ldr	r2, [pc, #324]	@ (8020dd0 <mg_dtoa+0x358>)
 8020c8a:	9906      	ldr	r1, [sp, #24]
 8020c8c:	9805      	ldr	r0, [sp, #20]
 8020c8e:	f7ff fee3 	bl	8020a58 <mg_snprintf>
 8020c92:	e0f6      	b.n	8020e82 <mg_dtoa+0x40a>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8020c94:	4622      	mov	r2, r4
 8020c96:	462b      	mov	r3, r5
 8020c98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020c9c:	f7ef fdee 	bl	801087c <__aeabi_ddiv>
 8020ca0:	ad08      	add	r5, sp, #32
 8020ca2:	9b07      	ldr	r3, [sp, #28]
 8020ca4:	4642      	mov	r2, r8
 8020ca6:	ec41 0b10 	vmov	d0, r0, r1
 8020caa:	2128      	movs	r1, #40	@ 0x28
 8020cac:	4628      	mov	r0, r5
 8020cae:	f7ff fee3 	bl	8020a78 <mg_dtoa>
 8020cb2:	4604      	mov	r4, r0
    n += addexp(buf + s + n, e, '+');
 8020cb4:	1838      	adds	r0, r7, r0
 8020cb6:	222b      	movs	r2, #43	@ 0x2b
 8020cb8:	4649      	mov	r1, r9
 8020cba:	4428      	add	r0, r5
 8020cbc:	f7fd fa6e 	bl	801e19c <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8020cc0:	9500      	str	r5, [sp, #0]
 8020cc2:	1823      	adds	r3, r4, r0
 8020cc4:	4a42      	ldr	r2, [pc, #264]	@ (8020dd0 <mg_dtoa+0x358>)
 8020cc6:	9906      	ldr	r1, [sp, #24]
 8020cc8:	9805      	ldr	r0, [sp, #20]
 8020cca:	f7ff fec5 	bl	8020a58 <mg_snprintf>
 8020cce:	e0d8      	b.n	8020e82 <mg_dtoa+0x40a>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8020cd0:	3601      	adds	r6, #1
 8020cd2:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8020cd6:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8020cda:	eb0d 0902 	add.w	r9, sp, r2
 8020cde:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 8020ce2:	f7ef fc37 	bl	8010554 <__aeabi_i2d>
 8020ce6:	4622      	mov	r2, r4
 8020ce8:	462b      	mov	r3, r5
 8020cea:	f7ef fc9d 	bl	8010628 <__aeabi_dmul>
 8020cee:	4602      	mov	r2, r0
 8020cf0:	460b      	mov	r3, r1
 8020cf2:	4650      	mov	r0, sl
 8020cf4:	4659      	mov	r1, fp
 8020cf6:	f7ef fadf 	bl	80102b8 <__aeabi_dsub>
 8020cfa:	4682      	mov	sl, r0
 8020cfc:	468b      	mov	fp, r1
      t /= 10.0;
 8020cfe:	2200      	movs	r2, #0
 8020d00:	4b31      	ldr	r3, [pc, #196]	@ (8020dc8 <mg_dtoa+0x350>)
 8020d02:	4620      	mov	r0, r4
 8020d04:	4629      	mov	r1, r5
 8020d06:	f7ef fdb9 	bl	801087c <__aeabi_ddiv>
 8020d0a:	4604      	mov	r4, r0
 8020d0c:	460d      	mov	r5, r1
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8020d0e:	2200      	movs	r2, #0
 8020d10:	4b27      	ldr	r3, [pc, #156]	@ (8020db0 <mg_dtoa+0x338>)
 8020d12:	4620      	mov	r0, r4
 8020d14:	4629      	mov	r1, r5
 8020d16:	f7ef ff0d 	bl	8010b34 <__aeabi_dcmpge>
 8020d1a:	b188      	cbz	r0, 8020d40 <mg_dtoa+0x2c8>
 8020d1c:	eb07 0906 	add.w	r9, r7, r6
 8020d20:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 8020d24:	dc0c      	bgt.n	8020d40 <mg_dtoa+0x2c8>
      int ch = (int) (d / t);
 8020d26:	4622      	mov	r2, r4
 8020d28:	462b      	mov	r3, r5
 8020d2a:	4650      	mov	r0, sl
 8020d2c:	4659      	mov	r1, fp
 8020d2e:	f7ef fda5 	bl	801087c <__aeabi_ddiv>
 8020d32:	f7ef ff29 	bl	8010b88 <__aeabi_d2iz>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8020d36:	2e00      	cmp	r6, #0
 8020d38:	dcca      	bgt.n	8020cd0 <mg_dtoa+0x258>
 8020d3a:	2800      	cmp	r0, #0
 8020d3c:	dcc8      	bgt.n	8020cd0 <mg_dtoa+0x258>
 8020d3e:	e7d0      	b.n	8020ce2 <mg_dtoa+0x26a>
    if (n == 0) buf[s++] = '0';
 8020d40:	b9ce      	cbnz	r6, 8020d76 <mg_dtoa+0x2fe>
 8020d42:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8020d46:	446b      	add	r3, sp
 8020d48:	2230      	movs	r2, #48	@ 0x30
 8020d4a:	f803 2c28 	strb.w	r2, [r3, #-40]
 8020d4e:	3701      	adds	r7, #1
 8020d50:	e011      	b.n	8020d76 <mg_dtoa+0x2fe>
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8020d52:	f106 0901 	add.w	r9, r6, #1
 8020d56:	f106 0348 	add.w	r3, r6, #72	@ 0x48
 8020d5a:	eb0d 0603 	add.w	r6, sp, r3
 8020d5e:	2330      	movs	r3, #48	@ 0x30
 8020d60:	f806 3c28 	strb.w	r3, [r6, #-40]
 8020d64:	2200      	movs	r2, #0
 8020d66:	4b18      	ldr	r3, [pc, #96]	@ (8020dc8 <mg_dtoa+0x350>)
 8020d68:	4620      	mov	r0, r4
 8020d6a:	4629      	mov	r1, r5
 8020d6c:	f7ef fd86 	bl	801087c <__aeabi_ddiv>
 8020d70:	4604      	mov	r4, r0
 8020d72:	460d      	mov	r5, r1
 8020d74:	464e      	mov	r6, r9
 8020d76:	2200      	movs	r2, #0
 8020d78:	4b0d      	ldr	r3, [pc, #52]	@ (8020db0 <mg_dtoa+0x338>)
 8020d7a:	4620      	mov	r0, r4
 8020d7c:	4629      	mov	r1, r5
 8020d7e:	f7ef fed9 	bl	8010b34 <__aeabi_dcmpge>
 8020d82:	b110      	cbz	r0, 8020d8a <mg_dtoa+0x312>
 8020d84:	19f3      	adds	r3, r6, r7
 8020d86:	2b27      	cmp	r3, #39	@ 0x27
 8020d88:	dde3      	ble.n	8020d52 <mg_dtoa+0x2da>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8020d8a:	19f3      	adds	r3, r6, r7
 8020d8c:	2b27      	cmp	r3, #39	@ 0x27
 8020d8e:	dc05      	bgt.n	8020d9c <mg_dtoa+0x324>
 8020d90:	3701      	adds	r7, #1
 8020d92:	3348      	adds	r3, #72	@ 0x48
 8020d94:	446b      	add	r3, sp
 8020d96:	222e      	movs	r2, #46	@ 0x2e
 8020d98:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8020d9c:	a502      	add	r5, pc, #8	@ (adr r5, 8020da8 <mg_dtoa+0x330>)
 8020d9e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8020da2:	e03e      	b.n	8020e22 <mg_dtoa+0x3aa>
 8020da4:	f3af 8000 	nop.w
 8020da8:	9999999a 	.word	0x9999999a
 8020dac:	3fb99999 	.word	0x3fb99999
 8020db0:	3ff00000 	.word	0x3ff00000
 8020db4:	08035b7c 	.word	0x08035b7c
 8020db8:	08037418 	.word	0x08037418
 8020dbc:	08036864 	.word	0x08036864
 8020dc0:	08036868 	.word	0x08036868
 8020dc4:	08036870 	.word	0x08036870
 8020dc8:	40240000 	.word	0x40240000
 8020dcc:	40140000 	.word	0x40140000
 8020dd0:	08036874 	.word	0x08036874
      int ch = (int) (d / t);
 8020dd4:	4622      	mov	r2, r4
 8020dd6:	462b      	mov	r3, r5
 8020dd8:	4650      	mov	r0, sl
 8020dda:	4659      	mov	r1, fp
 8020ddc:	f7ef fd4e 	bl	801087c <__aeabi_ddiv>
 8020de0:	f7ef fed2 	bl	8010b88 <__aeabi_d2iz>
      buf[s + n++] = (char) (ch + '0');
 8020de4:	3601      	adds	r6, #1
 8020de6:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8020dea:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8020dee:	eb0d 0902 	add.w	r9, sp, r2
 8020df2:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 8020df6:	f7ef fbad 	bl	8010554 <__aeabi_i2d>
 8020dfa:	4622      	mov	r2, r4
 8020dfc:	462b      	mov	r3, r5
 8020dfe:	f7ef fc13 	bl	8010628 <__aeabi_dmul>
 8020e02:	4602      	mov	r2, r0
 8020e04:	460b      	mov	r3, r1
 8020e06:	4650      	mov	r0, sl
 8020e08:	4659      	mov	r1, fp
 8020e0a:	f7ef fa55 	bl	80102b8 <__aeabi_dsub>
 8020e0e:	4682      	mov	sl, r0
 8020e10:	468b      	mov	fp, r1
      t /= 10.0;
 8020e12:	2200      	movs	r2, #0
 8020e14:	4b1d      	ldr	r3, [pc, #116]	@ (8020e8c <mg_dtoa+0x414>)
 8020e16:	4620      	mov	r0, r4
 8020e18:	4629      	mov	r1, r5
 8020e1a:	f7ef fd2f 	bl	801087c <__aeabi_ddiv>
 8020e1e:	4604      	mov	r4, r0
 8020e20:	460d      	mov	r5, r1
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8020e22:	eb07 0906 	add.w	r9, r7, r6
 8020e26:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 8020e2a:	dc03      	bgt.n	8020e34 <mg_dtoa+0x3bc>
 8020e2c:	4546      	cmp	r6, r8
 8020e2e:	dbd1      	blt.n	8020dd4 <mg_dtoa+0x35c>
 8020e30:	9a07      	ldr	r2, [sp, #28]
 8020e32:	e000      	b.n	8020e36 <mg_dtoa+0x3be>
 8020e34:	9a07      	ldr	r2, [sp, #28]
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8020e36:	b152      	cbz	r2, 8020e4e <mg_dtoa+0x3d6>
 8020e38:	2e00      	cmp	r6, #0
 8020e3a:	dd08      	ble.n	8020e4e <mg_dtoa+0x3d6>
 8020e3c:	19bb      	adds	r3, r7, r6
 8020e3e:	3347      	adds	r3, #71	@ 0x47
 8020e40:	446b      	add	r3, sp
 8020e42:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8020e46:	2b30      	cmp	r3, #48	@ 0x30
 8020e48:	d101      	bne.n	8020e4e <mg_dtoa+0x3d6>
 8020e4a:	3e01      	subs	r6, #1
 8020e4c:	e7f3      	b.n	8020e36 <mg_dtoa+0x3be>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8020e4e:	2e00      	cmp	r6, #0
 8020e50:	dd06      	ble.n	8020e60 <mg_dtoa+0x3e8>
 8020e52:	19bb      	adds	r3, r7, r6
 8020e54:	3347      	adds	r3, #71	@ 0x47
 8020e56:	446b      	add	r3, sp
 8020e58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8020e5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8020e5e:	d013      	beq.n	8020e88 <mg_dtoa+0x410>
  n += s;
 8020e60:	4437      	add	r7, r6
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8020e62:	2f27      	cmp	r7, #39	@ 0x27
 8020e64:	dd00      	ble.n	8020e68 <mg_dtoa+0x3f0>
 8020e66:	2727      	movs	r7, #39	@ 0x27
  buf[n] = '\0';
 8020e68:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8020e6c:	eb0d 0703 	add.w	r7, sp, r3
 8020e70:	2300      	movs	r3, #0
 8020e72:	f807 3c28 	strb.w	r3, [r7, #-40]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8020e76:	ab08      	add	r3, sp, #32
 8020e78:	4a05      	ldr	r2, [pc, #20]	@ (8020e90 <mg_dtoa+0x418>)
 8020e7a:	9906      	ldr	r1, [sp, #24]
 8020e7c:	9805      	ldr	r0, [sp, #20]
 8020e7e:	f7ff fdeb 	bl	8020a58 <mg_snprintf>
}
 8020e82:	b013      	add	sp, #76	@ 0x4c
 8020e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8020e88:	3e01      	subs	r6, #1
 8020e8a:	e7e9      	b.n	8020e60 <mg_dtoa+0x3e8>
 8020e8c:	40240000 	.word	0x40240000
 8020e90:	08037418 	.word	0x08037418

08020e94 <mg_vxprintf>:
                   va_list *ap) {
 8020e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e98:	b093      	sub	sp, #76	@ 0x4c
 8020e9a:	4681      	mov	r9, r0
 8020e9c:	468a      	mov	sl, r1
 8020e9e:	4693      	mov	fp, r2
 8020ea0:	9303      	str	r3, [sp, #12]
  size_t i = 0, n = 0;
 8020ea2:	2700      	movs	r7, #0
 8020ea4:	463c      	mov	r4, r7
  while (fmt[i] != '\0') {
 8020ea6:	e1bc      	b.n	8021222 <mg_vxprintf+0x38e>
      char pad = ' ', minus = 0, c = fmt[++i];
 8020ea8:	2320      	movs	r3, #32
 8020eaa:	f88d 301f 	strb.w	r3, [sp, #31]
 8020eae:	1c66      	adds	r6, r4, #1
 8020eb0:	f81b 5006 	ldrb.w	r5, [fp, r6]
      if (c == '#') x++, c = fmt[++i];
 8020eb4:	2d23      	cmp	r5, #35	@ 0x23
 8020eb6:	d00c      	beq.n	8020ed2 <mg_vxprintf+0x3e>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8020eb8:	2300      	movs	r3, #0
 8020eba:	9302      	str	r3, [sp, #8]
      if (c == '-') minus++, c = fmt[++i];
 8020ebc:	2d2d      	cmp	r5, #45	@ 0x2d
 8020ebe:	d10e      	bne.n	8020ede <mg_vxprintf+0x4a>
 8020ec0:	3601      	adds	r6, #1
 8020ec2:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8020ec6:	2301      	movs	r3, #1
 8020ec8:	9304      	str	r3, [sp, #16]
      if (c == '0') pad = '0', c = fmt[++i];
 8020eca:	2d30      	cmp	r5, #48	@ 0x30
 8020ecc:	d00a      	beq.n	8020ee4 <mg_vxprintf+0x50>
      if (c == '-') minus++, c = fmt[++i];
 8020ece:	2400      	movs	r4, #0
 8020ed0:	e017      	b.n	8020f02 <mg_vxprintf+0x6e>
      if (c == '#') x++, c = fmt[++i];
 8020ed2:	1ca6      	adds	r6, r4, #2
 8020ed4:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8020ed8:	2301      	movs	r3, #1
 8020eda:	9302      	str	r3, [sp, #8]
 8020edc:	e7ee      	b.n	8020ebc <mg_vxprintf+0x28>
      char pad = ' ', minus = 0, c = fmt[++i];
 8020ede:	2300      	movs	r3, #0
 8020ee0:	9304      	str	r3, [sp, #16]
 8020ee2:	e7f2      	b.n	8020eca <mg_vxprintf+0x36>
      if (c == '0') pad = '0', c = fmt[++i];
 8020ee4:	2330      	movs	r3, #48	@ 0x30
 8020ee6:	f88d 301f 	strb.w	r3, [sp, #31]
 8020eea:	3601      	adds	r6, #1
 8020eec:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8020ef0:	e7ed      	b.n	8020ece <mg_vxprintf+0x3a>
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8020ef2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8020ef6:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8020efa:	3c30      	subs	r4, #48	@ 0x30
 8020efc:	3601      	adds	r6, #1
 8020efe:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8020f02:	4628      	mov	r0, r5
 8020f04:	f7fd f944 	bl	801e190 <is_digit>
 8020f08:	4601      	mov	r1, r0
 8020f0a:	2800      	cmp	r0, #0
 8020f0c:	d1f1      	bne.n	8020ef2 <mg_vxprintf+0x5e>
      if (c == '.') {
 8020f0e:	2d2e      	cmp	r5, #46	@ 0x2e
 8020f10:	d002      	beq.n	8020f18 <mg_vxprintf+0x84>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8020f12:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8020f16:	e026      	b.n	8020f66 <mg_vxprintf+0xd2>
        c = fmt[++i];
 8020f18:	1c73      	adds	r3, r6, #1
 8020f1a:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == '*') {
 8020f1e:	2d2a      	cmp	r5, #42	@ 0x2a
 8020f20:	d119      	bne.n	8020f56 <mg_vxprintf+0xc2>
          pr = (size_t) va_arg(*ap, int);
 8020f22:	9803      	ldr	r0, [sp, #12]
 8020f24:	6803      	ldr	r3, [r0, #0]
 8020f26:	1d1a      	adds	r2, r3, #4
 8020f28:	6002      	str	r2, [r0, #0]
 8020f2a:	f8d3 8000 	ldr.w	r8, [r3]
          c = fmt[++i];
 8020f2e:	3602      	adds	r6, #2
 8020f30:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8020f34:	e017      	b.n	8020f66 <mg_vxprintf+0xd2>
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8020f36:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8020f3a:	eb05 0848 	add.w	r8, r5, r8, lsl #1
 8020f3e:	f1a8 0830 	sub.w	r8, r8, #48	@ 0x30
 8020f42:	3601      	adds	r6, #1
 8020f44:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8020f48:	4628      	mov	r0, r5
 8020f4a:	f7fd f921 	bl	801e190 <is_digit>
 8020f4e:	2800      	cmp	r0, #0
 8020f50:	d1f1      	bne.n	8020f36 <mg_vxprintf+0xa2>
 8020f52:	9905      	ldr	r1, [sp, #20]
 8020f54:	e007      	b.n	8020f66 <mg_vxprintf+0xd2>
          pr = 0;
 8020f56:	f04f 0800 	mov.w	r8, #0
 8020f5a:	461e      	mov	r6, r3
 8020f5c:	9005      	str	r0, [sp, #20]
 8020f5e:	e7f3      	b.n	8020f48 <mg_vxprintf+0xb4>
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8020f60:	3601      	adds	r6, #1
 8020f62:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8020f66:	2d68      	cmp	r5, #104	@ 0x68
 8020f68:	d0fa      	beq.n	8020f60 <mg_vxprintf+0xcc>
      if (c == 'l') {
 8020f6a:	2d6c      	cmp	r5, #108	@ 0x6c
 8020f6c:	d05f      	beq.n	802102e <mg_vxprintf+0x19a>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8020f6e:	2200      	movs	r2, #0
      if (c == 'p') x = 1, is_long = 1;
 8020f70:	2d70      	cmp	r5, #112	@ 0x70
 8020f72:	d069      	beq.n	8021048 <mg_vxprintf+0x1b4>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8020f74:	2d64      	cmp	r5, #100	@ 0x64
 8020f76:	d06a      	beq.n	802104e <mg_vxprintf+0x1ba>
 8020f78:	f1a5 0325 	sub.w	r3, r5, #37	@ 0x25
 8020f7c:	2b53      	cmp	r3, #83	@ 0x53
 8020f7e:	f200 81bc 	bhi.w	80212fa <mg_vxprintf+0x466>
 8020f82:	e8df f013 	tbh	[pc, r3, lsl #1]
 8020f86:	01b5      	.short	0x01b5
 8020f88:	01ba01ba 	.word	0x01ba01ba
 8020f8c:	01ba01ba 	.word	0x01ba01ba
 8020f90:	01ba01ba 	.word	0x01ba01ba
 8020f94:	01ba01ba 	.word	0x01ba01ba
 8020f98:	01ba01ba 	.word	0x01ba01ba
 8020f9c:	01ba01ba 	.word	0x01ba01ba
 8020fa0:	01ba01ba 	.word	0x01ba01ba
 8020fa4:	01ba01ba 	.word	0x01ba01ba
 8020fa8:	01ba01ba 	.word	0x01ba01ba
 8020fac:	01ba01ba 	.word	0x01ba01ba
 8020fb0:	01ba01ba 	.word	0x01ba01ba
 8020fb4:	01ba01ba 	.word	0x01ba01ba
 8020fb8:	01ba01ba 	.word	0x01ba01ba
 8020fbc:	01ba01ba 	.word	0x01ba01ba
 8020fc0:	01ba01ba 	.word	0x01ba01ba
 8020fc4:	01ba01ba 	.word	0x01ba01ba
 8020fc8:	01ba01ba 	.word	0x01ba01ba
 8020fcc:	01ba01ba 	.word	0x01ba01ba
 8020fd0:	01ba01ba 	.word	0x01ba01ba
 8020fd4:	014101ba 	.word	0x014101ba
 8020fd8:	01ba01ba 	.word	0x01ba01ba
 8020fdc:	01ba01ba 	.word	0x01ba01ba
 8020fe0:	01ba01ba 	.word	0x01ba01ba
 8020fe4:	01ba01ba 	.word	0x01ba01ba
 8020fe8:	01ba01ba 	.word	0x01ba01ba
 8020fec:	01ba0065 	.word	0x01ba0065
 8020ff0:	01ba01ba 	.word	0x01ba01ba
 8020ff4:	01ba01ba 	.word	0x01ba01ba
 8020ff8:	01ba01ba 	.word	0x01ba01ba
 8020ffc:	01ba01ba 	.word	0x01ba01ba
 8021000:	016801ba 	.word	0x016801ba
 8021004:	01ba01ba 	.word	0x01ba01ba
 8021008:	00650065 	.word	0x00650065
 802100c:	01ba01ba 	.word	0x01ba01ba
 8021010:	01ba01ba 	.word	0x01ba01ba
 8021014:	015a01ba 	.word	0x015a01ba
 8021018:	01ba01ba 	.word	0x01ba01ba
 802101c:	01ba0065 	.word	0x01ba0065
 8021020:	017101ba 	.word	0x017101ba
 8021024:	006501ba 	.word	0x006501ba
 8021028:	01ba01ba 	.word	0x01ba01ba
 802102c:	008d      	.short	0x008d
        is_long++, c = fmt[++i];
 802102e:	1c73      	adds	r3, r6, #1
 8021030:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == 'l') is_long++, c = fmt[++i];
 8021034:	2d6c      	cmp	r5, #108	@ 0x6c
 8021036:	d002      	beq.n	802103e <mg_vxprintf+0x1aa>
        is_long++, c = fmt[++i];
 8021038:	461e      	mov	r6, r3
 802103a:	2201      	movs	r2, #1
 802103c:	e798      	b.n	8020f70 <mg_vxprintf+0xdc>
        if (c == 'l') is_long++, c = fmt[++i];
 802103e:	3602      	adds	r6, #2
 8021040:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8021044:	2202      	movs	r2, #2
 8021046:	e793      	b.n	8020f70 <mg_vxprintf+0xdc>
      if (c == 'p') x = 1, is_long = 1;
 8021048:	2201      	movs	r2, #1
 802104a:	9202      	str	r2, [sp, #8]
 802104c:	e792      	b.n	8020f74 <mg_vxprintf+0xe0>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 802104e:	2101      	movs	r1, #1
 8021050:	2d58      	cmp	r5, #88	@ 0x58
 8021052:	d027      	beq.n	80210a4 <mg_vxprintf+0x210>
 8021054:	2d70      	cmp	r5, #112	@ 0x70
 8021056:	d021      	beq.n	802109c <mg_vxprintf+0x208>
 8021058:	2300      	movs	r3, #0
 802105a:	4618      	mov	r0, r3
        size_t xl = x ? 2 : 0;
 802105c:	9b02      	ldr	r3, [sp, #8]
 802105e:	b10b      	cbz	r3, 8021064 <mg_vxprintf+0x1d0>
 8021060:	2302      	movs	r3, #2
 8021062:	9302      	str	r3, [sp, #8]
        if (c == 'g' || c == 'f') {
 8021064:	f1a5 0366 	sub.w	r3, r5, #102	@ 0x66
 8021068:	b2db      	uxtb	r3, r3
 802106a:	2b01      	cmp	r3, #1
 802106c:	d91c      	bls.n	80210a8 <mg_vxprintf+0x214>
        } else if (is_long == 2) {
 802106e:	2a02      	cmp	r2, #2
 8021070:	d037      	beq.n	80210e2 <mg_vxprintf+0x24e>
        } else if (is_long == 1) {
 8021072:	2a01      	cmp	r2, #1
 8021074:	d046      	beq.n	8021104 <mg_vxprintf+0x270>
          int v = va_arg(*ap, int);
 8021076:	9b03      	ldr	r3, [sp, #12]
 8021078:	f8d3 c000 	ldr.w	ip, [r3]
 802107c:	f10c 0204 	add.w	r2, ip, #4
 8021080:	601a      	str	r2, [r3, #0]
 8021082:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8021086:	2d64      	cmp	r5, #100	@ 0x64
 8021088:	d052      	beq.n	8021130 <mg_vxprintf+0x29c>
 802108a:	461a      	mov	r2, r3
 802108c:	2300      	movs	r3, #0
 802108e:	9001      	str	r0, [sp, #4]
 8021090:	9100      	str	r1, [sp, #0]
 8021092:	a808      	add	r0, sp, #32
 8021094:	f7fd f8de 	bl	801e254 <mg_lld>
 8021098:	4605      	mov	r5, r0
 802109a:	e01c      	b.n	80210d6 <mg_vxprintf+0x242>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 802109c:	2301      	movs	r3, #1
 802109e:	e7dc      	b.n	802105a <mg_vxprintf+0x1c6>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 80210a0:	2301      	movs	r3, #1
 80210a2:	e7da      	b.n	802105a <mg_vxprintf+0x1c6>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 80210a4:	2301      	movs	r3, #1
 80210a6:	e7d8      	b.n	802105a <mg_vxprintf+0x1c6>
          double v = va_arg(*ap, double);
 80210a8:	9903      	ldr	r1, [sp, #12]
 80210aa:	680b      	ldr	r3, [r1, #0]
 80210ac:	3307      	adds	r3, #7
 80210ae:	f023 0307 	bic.w	r3, r3, #7
 80210b2:	f103 0208 	add.w	r2, r3, #8
 80210b6:	600a      	str	r2, [r1, #0]
 80210b8:	ed93 0b00 	vldr	d0, [r3]
          if (pr == ~0U) pr = 6;
 80210bc:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80210c0:	d00c      	beq.n	80210dc <mg_vxprintf+0x248>
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 80210c2:	2d67      	cmp	r5, #103	@ 0x67
 80210c4:	bf14      	ite	ne
 80210c6:	2300      	movne	r3, #0
 80210c8:	2301      	moveq	r3, #1
 80210ca:	4642      	mov	r2, r8
 80210cc:	2128      	movs	r1, #40	@ 0x28
 80210ce:	a808      	add	r0, sp, #32
 80210d0:	f7ff fcd2 	bl	8020a78 <mg_dtoa>
 80210d4:	4605      	mov	r5, r0
        for (j = 0; j < xl && w > 0; j++) w--;
 80210d6:	2300      	movs	r3, #0
 80210d8:	9a02      	ldr	r2, [sp, #8]
 80210da:	e02e      	b.n	802113a <mg_vxprintf+0x2a6>
          if (pr == ~0U) pr = 6;
 80210dc:	f04f 0806 	mov.w	r8, #6
 80210e0:	e7ef      	b.n	80210c2 <mg_vxprintf+0x22e>
          int64_t v = va_arg(*ap, int64_t);
 80210e2:	9d03      	ldr	r5, [sp, #12]
 80210e4:	682b      	ldr	r3, [r5, #0]
 80210e6:	3307      	adds	r3, #7
 80210e8:	f023 0307 	bic.w	r3, r3, #7
 80210ec:	f103 0208 	add.w	r2, r3, #8
 80210f0:	602a      	str	r2, [r5, #0]
 80210f2:	e9d3 2300 	ldrd	r2, r3, [r3]
          k = mg_lld(tmp, v, s, h);
 80210f6:	9001      	str	r0, [sp, #4]
 80210f8:	9100      	str	r1, [sp, #0]
 80210fa:	a808      	add	r0, sp, #32
 80210fc:	f7fd f8aa 	bl	801e254 <mg_lld>
 8021100:	4605      	mov	r5, r0
 8021102:	e7e8      	b.n	80210d6 <mg_vxprintf+0x242>
          long v = va_arg(*ap, long);
 8021104:	9b03      	ldr	r3, [sp, #12]
 8021106:	f8d3 c000 	ldr.w	ip, [r3]
 802110a:	f10c 0204 	add.w	r2, ip, #4
 802110e:	601a      	str	r2, [r3, #0]
 8021110:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8021114:	2d64      	cmp	r5, #100	@ 0x64
 8021116:	d008      	beq.n	802112a <mg_vxprintf+0x296>
 8021118:	461a      	mov	r2, r3
 802111a:	2300      	movs	r3, #0
 802111c:	9001      	str	r0, [sp, #4]
 802111e:	9100      	str	r1, [sp, #0]
 8021120:	a808      	add	r0, sp, #32
 8021122:	f7fd f897 	bl	801e254 <mg_lld>
 8021126:	4605      	mov	r5, r0
 8021128:	e7d5      	b.n	80210d6 <mg_vxprintf+0x242>
 802112a:	461a      	mov	r2, r3
 802112c:	17db      	asrs	r3, r3, #31
 802112e:	e7f5      	b.n	802111c <mg_vxprintf+0x288>
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8021130:	461a      	mov	r2, r3
 8021132:	17db      	asrs	r3, r3, #31
 8021134:	e7ab      	b.n	802108e <mg_vxprintf+0x1fa>
        for (j = 0; j < xl && w > 0; j++) w--;
 8021136:	3c01      	subs	r4, #1
 8021138:	3301      	adds	r3, #1
 802113a:	4293      	cmp	r3, r2
 802113c:	d225      	bcs.n	802118a <mg_vxprintf+0x2f6>
 802113e:	2c00      	cmp	r4, #0
 8021140:	d1f9      	bne.n	8021136 <mg_vxprintf+0x2a2>
 8021142:	46a0      	mov	r8, r4
 8021144:	9605      	str	r6, [sp, #20]
 8021146:	9e04      	ldr	r6, [sp, #16]
 8021148:	e009      	b.n	802115e <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 802114a:	2301      	movs	r3, #1
 802114c:	f10d 021f 	add.w	r2, sp, #31
 8021150:	4651      	mov	r1, sl
 8021152:	4648      	mov	r0, r9
 8021154:	f7fd f914 	bl	801e380 <scpy>
 8021158:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 802115a:	f108 0801 	add.w	r8, r8, #1
 802115e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8021162:	2b20      	cmp	r3, #32
 8021164:	d106      	bne.n	8021174 <mg_vxprintf+0x2e0>
 8021166:	b92e      	cbnz	r6, 8021174 <mg_vxprintf+0x2e0>
 8021168:	42a5      	cmp	r5, r4
 802116a:	d203      	bcs.n	8021174 <mg_vxprintf+0x2e0>
 802116c:	eb08 0305 	add.w	r3, r8, r5
 8021170:	42a3      	cmp	r3, r4
 8021172:	d3ea      	bcc.n	802114a <mg_vxprintf+0x2b6>
        n += scpy(out, param, (char *) "0x", xl);
 8021174:	9e05      	ldr	r6, [sp, #20]
 8021176:	9b02      	ldr	r3, [sp, #8]
 8021178:	4a6b      	ldr	r2, [pc, #428]	@ (8021328 <mg_vxprintf+0x494>)
 802117a:	4651      	mov	r1, sl
 802117c:	4648      	mov	r0, r9
 802117e:	f7fd f8ff 	bl	801e380 <scpy>
 8021182:	eb07 0800 	add.w	r8, r7, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8021186:	2700      	movs	r7, #0
 8021188:	e00d      	b.n	80211a6 <mg_vxprintf+0x312>
 802118a:	f04f 0800 	mov.w	r8, #0
 802118e:	9605      	str	r6, [sp, #20]
 8021190:	9e04      	ldr	r6, [sp, #16]
 8021192:	e7e4      	b.n	802115e <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 8021194:	2301      	movs	r3, #1
 8021196:	f10d 021f 	add.w	r2, sp, #31
 802119a:	4651      	mov	r1, sl
 802119c:	4648      	mov	r0, r9
 802119e:	f7fd f8ef 	bl	801e380 <scpy>
 80211a2:	4480      	add	r8, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 80211a4:	3701      	adds	r7, #1
 80211a6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80211aa:	2b30      	cmp	r3, #48	@ 0x30
 80211ac:	d104      	bne.n	80211b8 <mg_vxprintf+0x324>
 80211ae:	42a5      	cmp	r5, r4
 80211b0:	d202      	bcs.n	80211b8 <mg_vxprintf+0x324>
 80211b2:	197b      	adds	r3, r7, r5
 80211b4:	42a3      	cmp	r3, r4
 80211b6:	d3ed      	bcc.n	8021194 <mg_vxprintf+0x300>
        n += scpy(out, param, tmp, k);
 80211b8:	462b      	mov	r3, r5
 80211ba:	aa08      	add	r2, sp, #32
 80211bc:	4651      	mov	r1, sl
 80211be:	4648      	mov	r0, r9
 80211c0:	f7fd f8de 	bl	801e380 <scpy>
 80211c4:	eb08 0700 	add.w	r7, r8, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80211c8:	f04f 0800 	mov.w	r8, #0
 80211cc:	9602      	str	r6, [sp, #8]
 80211ce:	9e04      	ldr	r6, [sp, #16]
 80211d0:	e009      	b.n	80211e6 <mg_vxprintf+0x352>
          n += scpy(out, param, &pad, 1);
 80211d2:	2301      	movs	r3, #1
 80211d4:	f10d 021f 	add.w	r2, sp, #31
 80211d8:	4651      	mov	r1, sl
 80211da:	4648      	mov	r0, r9
 80211dc:	f7fd f8d0 	bl	801e380 <scpy>
 80211e0:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80211e2:	f108 0801 	add.w	r8, r8, #1
 80211e6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80211ea:	2b20      	cmp	r3, #32
 80211ec:	f040 808d 	bne.w	802130a <mg_vxprintf+0x476>
 80211f0:	2e00      	cmp	r6, #0
 80211f2:	f000 808c 	beq.w	802130e <mg_vxprintf+0x47a>
 80211f6:	42a5      	cmp	r5, r4
 80211f8:	f080 808b 	bcs.w	8021312 <mg_vxprintf+0x47e>
 80211fc:	eb08 0305 	add.w	r3, r8, r5
 8021200:	42a3      	cmp	r3, r4
 8021202:	d3e6      	bcc.n	80211d2 <mg_vxprintf+0x33e>
 8021204:	9e02      	ldr	r6, [sp, #8]
 8021206:	e00b      	b.n	8021220 <mg_vxprintf+0x38c>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8021208:	9903      	ldr	r1, [sp, #12]
 802120a:	680b      	ldr	r3, [r1, #0]
 802120c:	1d1a      	adds	r2, r3, #4
 802120e:	600a      	str	r2, [r1, #0]
 8021210:	681c      	ldr	r4, [r3, #0]
        n += f(out, param, ap);
 8021212:	9a03      	ldr	r2, [sp, #12]
 8021214:	4651      	mov	r1, sl
 8021216:	4648      	mov	r0, r9
 8021218:	47a0      	blx	r4
 802121a:	4407      	add	r7, r0
        if (c == 'm') n += 2, out('"', param);
 802121c:	2d6d      	cmp	r5, #109	@ 0x6d
 802121e:	d015      	beq.n	802124c <mg_vxprintf+0x3b8>
      i++;
 8021220:	1c74      	adds	r4, r6, #1
  while (fmt[i] != '\0') {
 8021222:	f81b 0004 	ldrb.w	r0, [fp, r4]
 8021226:	2800      	cmp	r0, #0
 8021228:	d079      	beq.n	802131e <mg_vxprintf+0x48a>
    if (fmt[i] == '%') {
 802122a:	2825      	cmp	r0, #37	@ 0x25
 802122c:	f43f ae3c 	beq.w	8020ea8 <mg_vxprintf+0x14>
      out(fmt[i], param), n++, i++;
 8021230:	4651      	mov	r1, sl
 8021232:	47c8      	blx	r9
 8021234:	3701      	adds	r7, #1
 8021236:	3401      	adds	r4, #1
 8021238:	e7f3      	b.n	8021222 <mg_vxprintf+0x38e>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 802123a:	9903      	ldr	r1, [sp, #12]
 802123c:	680b      	ldr	r3, [r1, #0]
 802123e:	1d1a      	adds	r2, r3, #4
 8021240:	600a      	str	r2, [r1, #0]
 8021242:	681c      	ldr	r4, [r3, #0]
        if (c == 'm') out('"', param);
 8021244:	4651      	mov	r1, sl
 8021246:	2022      	movs	r0, #34	@ 0x22
 8021248:	47c8      	blx	r9
 802124a:	e7e2      	b.n	8021212 <mg_vxprintf+0x37e>
        if (c == 'm') n += 2, out('"', param);
 802124c:	3702      	adds	r7, #2
 802124e:	4651      	mov	r1, sl
 8021250:	2022      	movs	r0, #34	@ 0x22
 8021252:	47c8      	blx	r9
 8021254:	e7e4      	b.n	8021220 <mg_vxprintf+0x38c>
        int ch = va_arg(*ap, int);
 8021256:	9903      	ldr	r1, [sp, #12]
 8021258:	680b      	ldr	r3, [r1, #0]
 802125a:	1d1a      	adds	r2, r3, #4
 802125c:	600a      	str	r2, [r1, #0]
        out((char) ch, param);
 802125e:	4651      	mov	r1, sl
 8021260:	7818      	ldrb	r0, [r3, #0]
 8021262:	47c8      	blx	r9
        n++;
 8021264:	3701      	adds	r7, #1
 8021266:	e7db      	b.n	8021220 <mg_vxprintf+0x38c>
        char *p = va_arg(*ap, char *);
 8021268:	9903      	ldr	r1, [sp, #12]
 802126a:	680b      	ldr	r3, [r1, #0]
 802126c:	1d1a      	adds	r2, r3, #4
 802126e:	600a      	str	r2, [r1, #0]
 8021270:	681b      	ldr	r3, [r3, #0]
 8021272:	9302      	str	r3, [sp, #8]
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8021274:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8021278:	d003      	beq.n	8021282 <mg_vxprintf+0x3ee>
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 802127a:	2500      	movs	r5, #0
 802127c:	9605      	str	r6, [sp, #20]
 802127e:	9e04      	ldr	r6, [sp, #16]
 8021280:	e011      	b.n	80212a6 <mg_vxprintf+0x412>
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8021282:	4618      	mov	r0, r3
 8021284:	b11b      	cbz	r3, 802128e <mg_vxprintf+0x3fa>
 8021286:	f7ef f80b 	bl	80102a0 <strlen>
 802128a:	4680      	mov	r8, r0
 802128c:	e7f5      	b.n	802127a <mg_vxprintf+0x3e6>
 802128e:	f04f 0800 	mov.w	r8, #0
 8021292:	e7f2      	b.n	802127a <mg_vxprintf+0x3e6>
          n += scpy(out, param, &pad, 1);
 8021294:	2301      	movs	r3, #1
 8021296:	f10d 021f 	add.w	r2, sp, #31
 802129a:	4651      	mov	r1, sl
 802129c:	4648      	mov	r0, r9
 802129e:	f7fd f86f 	bl	801e380 <scpy>
 80212a2:	4407      	add	r7, r0
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80212a4:	3501      	adds	r5, #1
 80212a6:	b92e      	cbnz	r6, 80212b4 <mg_vxprintf+0x420>
 80212a8:	4544      	cmp	r4, r8
 80212aa:	d903      	bls.n	80212b4 <mg_vxprintf+0x420>
 80212ac:	eb05 0308 	add.w	r3, r5, r8
 80212b0:	42a3      	cmp	r3, r4
 80212b2:	d3ef      	bcc.n	8021294 <mg_vxprintf+0x400>
        n += scpy(out, param, p, pr);
 80212b4:	9e05      	ldr	r6, [sp, #20]
 80212b6:	4643      	mov	r3, r8
 80212b8:	9a02      	ldr	r2, [sp, #8]
 80212ba:	4651      	mov	r1, sl
 80212bc:	4648      	mov	r0, r9
 80212be:	f7fd f85f 	bl	801e380 <scpy>
 80212c2:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 80212c4:	2500      	movs	r5, #0
 80212c6:	9602      	str	r6, [sp, #8]
 80212c8:	9e04      	ldr	r6, [sp, #16]
 80212ca:	e008      	b.n	80212de <mg_vxprintf+0x44a>
          n += scpy(out, param, &pad, 1);
 80212cc:	2301      	movs	r3, #1
 80212ce:	f10d 021f 	add.w	r2, sp, #31
 80212d2:	4651      	mov	r1, sl
 80212d4:	4648      	mov	r0, r9
 80212d6:	f7fd f853 	bl	801e380 <scpy>
 80212da:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 80212dc:	3501      	adds	r5, #1
 80212de:	b1d6      	cbz	r6, 8021316 <mg_vxprintf+0x482>
 80212e0:	4544      	cmp	r4, r8
 80212e2:	d91a      	bls.n	802131a <mg_vxprintf+0x486>
 80212e4:	eb05 0308 	add.w	r3, r5, r8
 80212e8:	42a3      	cmp	r3, r4
 80212ea:	d3ef      	bcc.n	80212cc <mg_vxprintf+0x438>
 80212ec:	9e02      	ldr	r6, [sp, #8]
 80212ee:	e797      	b.n	8021220 <mg_vxprintf+0x38c>
        out('%', param);
 80212f0:	4651      	mov	r1, sl
 80212f2:	2025      	movs	r0, #37	@ 0x25
 80212f4:	47c8      	blx	r9
        n++;
 80212f6:	3701      	adds	r7, #1
 80212f8:	e792      	b.n	8021220 <mg_vxprintf+0x38c>
        out('%', param);
 80212fa:	4651      	mov	r1, sl
 80212fc:	2025      	movs	r0, #37	@ 0x25
 80212fe:	47c8      	blx	r9
        out(c, param);
 8021300:	4651      	mov	r1, sl
 8021302:	4628      	mov	r0, r5
 8021304:	47c8      	blx	r9
        n += 2;
 8021306:	3702      	adds	r7, #2
 8021308:	e78a      	b.n	8021220 <mg_vxprintf+0x38c>
 802130a:	9e02      	ldr	r6, [sp, #8]
 802130c:	e788      	b.n	8021220 <mg_vxprintf+0x38c>
 802130e:	9e02      	ldr	r6, [sp, #8]
 8021310:	e786      	b.n	8021220 <mg_vxprintf+0x38c>
 8021312:	9e02      	ldr	r6, [sp, #8]
 8021314:	e784      	b.n	8021220 <mg_vxprintf+0x38c>
 8021316:	9e02      	ldr	r6, [sp, #8]
 8021318:	e782      	b.n	8021220 <mg_vxprintf+0x38c>
 802131a:	9e02      	ldr	r6, [sp, #8]
 802131c:	e780      	b.n	8021220 <mg_vxprintf+0x38c>
}
 802131e:	4638      	mov	r0, r7
 8021320:	b013      	add	sp, #76	@ 0x4c
 8021322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021326:	bf00      	nop
 8021328:	0803687c 	.word	0x0803687c

0802132c <mg_xprintf>:
size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 802132c:	b40c      	push	{r2, r3}
 802132e:	b500      	push	{lr}
 8021330:	b083      	sub	sp, #12
 8021332:	ab04      	add	r3, sp, #16
 8021334:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8021338:	9301      	str	r3, [sp, #4]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 802133a:	ab01      	add	r3, sp, #4
 802133c:	f7ff fdaa 	bl	8020e94 <mg_vxprintf>
}
 8021340:	b003      	add	sp, #12
 8021342:	f85d eb04 	ldr.w	lr, [sp], #4
 8021346:	b002      	add	sp, #8
 8021348:	4770      	bx	lr
	...

0802134c <print_ip4>:
static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 802134c:	b530      	push	{r4, r5, lr}
 802134e:	b085      	sub	sp, #20
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8021350:	7853      	ldrb	r3, [r2, #1]
 8021352:	7894      	ldrb	r4, [r2, #2]
 8021354:	78d5      	ldrb	r5, [r2, #3]
 8021356:	9502      	str	r5, [sp, #8]
 8021358:	9401      	str	r4, [sp, #4]
 802135a:	9300      	str	r3, [sp, #0]
 802135c:	7813      	ldrb	r3, [r2, #0]
 802135e:	4a02      	ldr	r2, [pc, #8]	@ (8021368 <print_ip4+0x1c>)
 8021360:	f7ff ffe4 	bl	802132c <mg_xprintf>
}
 8021364:	b005      	add	sp, #20
 8021366:	bd30      	pop	{r4, r5, pc}
 8021368:	08036880 	.word	0x08036880

0802136c <mg_print_ip4>:
size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 802136c:	b510      	push	{r4, lr}
  uint8_t *p = va_arg(*ap, uint8_t *);
 802136e:	6813      	ldr	r3, [r2, #0]
 8021370:	1d1c      	adds	r4, r3, #4
 8021372:	6014      	str	r4, [r2, #0]
  return print_ip4(out, arg, p);
 8021374:	681a      	ldr	r2, [r3, #0]
 8021376:	f7ff ffe9 	bl	802134c <print_ip4>
}
 802137a:	bd10      	pop	{r4, pc}

0802137c <mg_print_mac>:
size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 802137c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802137e:	b087      	sub	sp, #28
  uint8_t *p = va_arg(*ap, uint8_t *);
 8021380:	6813      	ldr	r3, [r2, #0]
 8021382:	1d1c      	adds	r4, r3, #4
 8021384:	6014      	str	r4, [r2, #0]
 8021386:	681a      	ldr	r2, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8021388:	7813      	ldrb	r3, [r2, #0]
 802138a:	7854      	ldrb	r4, [r2, #1]
 802138c:	7895      	ldrb	r5, [r2, #2]
                    p[3], p[4], p[5]);
 802138e:	78d6      	ldrb	r6, [r2, #3]
 8021390:	7917      	ldrb	r7, [r2, #4]
 8021392:	7952      	ldrb	r2, [r2, #5]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8021394:	9204      	str	r2, [sp, #16]
 8021396:	9703      	str	r7, [sp, #12]
 8021398:	9602      	str	r6, [sp, #8]
 802139a:	9501      	str	r5, [sp, #4]
 802139c:	9400      	str	r4, [sp, #0]
 802139e:	4a02      	ldr	r2, [pc, #8]	@ (80213a8 <mg_print_mac+0x2c>)
 80213a0:	f7ff ffc4 	bl	802132c <mg_xprintf>
}
 80213a4:	b007      	add	sp, #28
 80213a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80213a8:	0803688c 	.word	0x0803688c

080213ac <mg_log>:
void mg_log(const char *fmt, ...) {
 80213ac:	b40f      	push	{r0, r1, r2, r3}
 80213ae:	b500      	push	{lr}
 80213b0:	b083      	sub	sp, #12
 80213b2:	ab04      	add	r3, sp, #16
 80213b4:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 80213b8:	9301      	str	r3, [sp, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 80213ba:	ab01      	add	r3, sp, #4
 80213bc:	4907      	ldr	r1, [pc, #28]	@ (80213dc <mg_log+0x30>)
 80213be:	6809      	ldr	r1, [r1, #0]
 80213c0:	4807      	ldr	r0, [pc, #28]	@ (80213e0 <mg_log+0x34>)
 80213c2:	6800      	ldr	r0, [r0, #0]
 80213c4:	f7ff fd66 	bl	8020e94 <mg_vxprintf>
  logs("\r\n", 2);
 80213c8:	2102      	movs	r1, #2
 80213ca:	4806      	ldr	r0, [pc, #24]	@ (80213e4 <mg_log+0x38>)
 80213cc:	f7fd fdb2 	bl	801ef34 <logs>
}
 80213d0:	b003      	add	sp, #12
 80213d2:	f85d eb04 	ldr.w	lr, [sp], #4
 80213d6:	b004      	add	sp, #16
 80213d8:	4770      	bx	lr
 80213da:	bf00      	nop
 80213dc:	20018020 	.word	0x20018020
 80213e0:	200000a4 	.word	0x200000a4
 80213e4:	0803727c 	.word	0x0803727c

080213e8 <mg_vprintf>:
size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 80213e8:	b538      	push	{r3, r4, r5, lr}
 80213ea:	4604      	mov	r4, r0
 80213ec:	4613      	mov	r3, r2
  size_t old = c->send.len;
 80213ee:	6d05      	ldr	r5, [r0, #80]	@ 0x50
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 80213f0:	460a      	mov	r2, r1
 80213f2:	f100 0148 	add.w	r1, r0, #72	@ 0x48
 80213f6:	4803      	ldr	r0, [pc, #12]	@ (8021404 <mg_vprintf+0x1c>)
 80213f8:	f7ff fd4c 	bl	8020e94 <mg_vxprintf>
  return c->send.len - old;
 80213fc:	6d20      	ldr	r0, [r4, #80]	@ 0x50
}
 80213fe:	1b40      	subs	r0, r0, r5
 8021400:	bd38      	pop	{r3, r4, r5, pc}
 8021402:	bf00      	nop
 8021404:	08024157 	.word	0x08024157

08021408 <mg_printf>:
size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8021408:	b40e      	push	{r1, r2, r3}
 802140a:	b500      	push	{lr}
 802140c:	b082      	sub	sp, #8
 802140e:	ab03      	add	r3, sp, #12
 8021410:	f853 1b04 	ldr.w	r1, [r3], #4
  va_start(ap, fmt);
 8021414:	9301      	str	r3, [sp, #4]
  len = mg_vprintf(c, fmt, &ap);
 8021416:	aa01      	add	r2, sp, #4
 8021418:	f7ff ffe6 	bl	80213e8 <mg_vprintf>
}
 802141c:	b002      	add	sp, #8
 802141e:	f85d eb04 	ldr.w	lr, [sp], #4
 8021422:	b003      	add	sp, #12
 8021424:	4770      	bx	lr
	...

08021428 <mg_vsnprintf>:
size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8021428:	b530      	push	{r4, r5, lr}
 802142a:	b085      	sub	sp, #20
 802142c:	4605      	mov	r5, r0
 802142e:	460c      	mov	r4, r1
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8021430:	9000      	str	r0, [sp, #0]
 8021432:	9101      	str	r1, [sp, #4]
 8021434:	2100      	movs	r1, #0
 8021436:	9102      	str	r1, [sp, #8]
 8021438:	9103      	str	r1, [sp, #12]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 802143a:	4669      	mov	r1, sp
 802143c:	4804      	ldr	r0, [pc, #16]	@ (8021450 <mg_vsnprintf+0x28>)
 802143e:	f7ff fd29 	bl	8020e94 <mg_vxprintf>
  if (n < len) buf[n] = '\0';
 8021442:	4284      	cmp	r4, r0
 8021444:	d901      	bls.n	802144a <mg_vsnprintf+0x22>
 8021446:	2300      	movs	r3, #0
 8021448:	542b      	strb	r3, [r5, r0]
}
 802144a:	b005      	add	sp, #20
 802144c:	bd30      	pop	{r4, r5, pc}
 802144e:	bf00      	nop
 8021450:	08024161 	.word	0x08024161

08021454 <mg_http_reply>:
                   const char *fmt, ...) {
 8021454:	b408      	push	{r3}
 8021456:	b570      	push	{r4, r5, r6, lr}
 8021458:	b085      	sub	sp, #20
 802145a:	4604      	mov	r4, r0
 802145c:	460e      	mov	r6, r1
 802145e:	4615      	mov	r5, r2
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8021460:	4608      	mov	r0, r1
 8021462:	f7fd f8d9 	bl	801e618 <mg_http_status_code_str>
 8021466:	4603      	mov	r3, r0
 8021468:	b1ed      	cbz	r5, 80214a6 <mg_http_reply+0x52>
 802146a:	9500      	str	r5, [sp, #0]
 802146c:	4632      	mov	r2, r6
 802146e:	4916      	ldr	r1, [pc, #88]	@ (80214c8 <mg_http_reply+0x74>)
 8021470:	4620      	mov	r0, r4
 8021472:	f7ff ffc9 	bl	8021408 <mg_printf>
  len = c->send.len;
 8021476:	6d25      	ldr	r5, [r4, #80]	@ 0x50
  va_start(ap, fmt);
 8021478:	ab0a      	add	r3, sp, #40	@ 0x28
 802147a:	9303      	str	r3, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 802147c:	ab03      	add	r3, sp, #12
 802147e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021480:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 8021484:	4811      	ldr	r0, [pc, #68]	@ (80214cc <mg_http_reply+0x78>)
 8021486:	f7ff fd05 	bl	8020e94 <mg_vxprintf>
  if (c->send.len > 16) {
 802148a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802148c:	2b10      	cmp	r3, #16
 802148e:	d80c      	bhi.n	80214aa <mg_http_reply+0x56>
  c->is_resp = 0;
 8021490:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8021494:	f36f 13c7 	bfc	r3, #7, #1
 8021498:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 802149c:	b005      	add	sp, #20
 802149e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80214a2:	b001      	add	sp, #4
 80214a4:	4770      	bx	lr
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 80214a6:	4d0a      	ldr	r5, [pc, #40]	@ (80214d0 <mg_http_reply+0x7c>)
 80214a8:	e7df      	b.n	802146a <mg_http_reply+0x16>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 80214aa:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
 80214ac:	f1a5 000f 	sub.w	r0, r5, #15
 80214b0:	1b5b      	subs	r3, r3, r5
 80214b2:	4a08      	ldr	r2, [pc, #32]	@ (80214d4 <mg_http_reply+0x80>)
 80214b4:	210b      	movs	r1, #11
 80214b6:	4430      	add	r0, r6
 80214b8:	f7ff face 	bl	8020a58 <mg_snprintf>
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 80214bc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80214be:	4405      	add	r5, r0
 80214c0:	3d0f      	subs	r5, #15
 80214c2:	2220      	movs	r2, #32
 80214c4:	555a      	strb	r2, [r3, r5]
 80214c6:	e7e3      	b.n	8021490 <mg_http_reply+0x3c>
 80214c8:	080368ac 	.word	0x080368ac
 80214cc:	08024157 	.word	0x08024157
 80214d0:	080337f8 	.word	0x080337f8
 80214d4:	080368e0 	.word	0x080368e0

080214d8 <mg_http_etag>:
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 80214d8:	b510      	push	{r4, lr}
 80214da:	b084      	sub	sp, #16
 80214dc:	4604      	mov	r4, r0
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 80214de:	9202      	str	r2, [sp, #8]
 80214e0:	2300      	movs	r3, #0
 80214e2:	9303      	str	r3, [sp, #12]
 80214e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80214e8:	e9cd 2300 	strd	r2, r3, [sp]
 80214ec:	4a02      	ldr	r2, [pc, #8]	@ (80214f8 <mg_http_etag+0x20>)
 80214ee:	f7ff fab3 	bl	8020a58 <mg_snprintf>
}
 80214f2:	4620      	mov	r0, r4
 80214f4:	b004      	add	sp, #16
 80214f6:	bd10      	pop	{r4, pc}
 80214f8:	080368e8 	.word	0x080368e8

080214fc <mg_url_encode>:
size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 80214fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021500:	b083      	sub	sp, #12
 8021502:	4607      	mov	r7, r0
 8021504:	4689      	mov	r9, r1
 8021506:	4692      	mov	sl, r2
 8021508:	4698      	mov	r8, r3
  size_t i, n = 0;
 802150a:	2500      	movs	r5, #0
  for (i = 0; i < sl; i++) {
 802150c:	462c      	mov	r4, r5
 802150e:	e00c      	b.n	802152a <mg_url_encode+0x2e>
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 8021510:	f8cd b004 	str.w	fp, [sp, #4]
 8021514:	2301      	movs	r3, #1
 8021516:	9300      	str	r3, [sp, #0]
 8021518:	4b16      	ldr	r3, [pc, #88]	@ (8021574 <mg_url_encode+0x78>)
 802151a:	4a17      	ldr	r2, [pc, #92]	@ (8021578 <mg_url_encode+0x7c>)
 802151c:	2104      	movs	r1, #4
 802151e:	eb0a 0005 	add.w	r0, sl, r5
 8021522:	f7ff fa99 	bl	8020a58 <mg_snprintf>
      n += 3;
 8021526:	3503      	adds	r5, #3
  for (i = 0; i < sl; i++) {
 8021528:	3401      	adds	r4, #1
 802152a:	454c      	cmp	r4, r9
 802152c:	d20e      	bcs.n	802154c <mg_url_encode+0x50>
    int c = *(unsigned char *) &s[i];
 802152e:	eb07 0b04 	add.w	fp, r7, r4
 8021532:	5d3e      	ldrb	r6, [r7, r4]
    if (n + 4 >= len) return 0;
 8021534:	1d2b      	adds	r3, r5, #4
 8021536:	4543      	cmp	r3, r8
 8021538:	d216      	bcs.n	8021568 <mg_url_encode+0x6c>
    if (mg_is_url_safe(c)) {
 802153a:	4630      	mov	r0, r6
 802153c:	f7fd fb68 	bl	801ec10 <mg_is_url_safe>
 8021540:	2800      	cmp	r0, #0
 8021542:	d0e5      	beq.n	8021510 <mg_url_encode+0x14>
      buf[n++] = s[i];
 8021544:	f80a 6005 	strb.w	r6, [sl, r5]
 8021548:	3501      	adds	r5, #1
 802154a:	e7ed      	b.n	8021528 <mg_url_encode+0x2c>
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 802154c:	f1b8 0f00 	cmp.w	r8, #0
 8021550:	d00b      	beq.n	802156a <mg_url_encode+0x6e>
 8021552:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8021556:	45a8      	cmp	r8, r5
 8021558:	d902      	bls.n	8021560 <mg_url_encode+0x64>
 802155a:	2300      	movs	r3, #0
 802155c:	f80a 3005 	strb.w	r3, [sl, r5]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 8021560:	2300      	movs	r3, #0
 8021562:	f80a 3008 	strb.w	r3, [sl, r8]
 8021566:	e000      	b.n	802156a <mg_url_encode+0x6e>
    if (n + 4 >= len) return 0;
 8021568:	2500      	movs	r5, #0
}
 802156a:	4628      	mov	r0, r5
 802156c:	b003      	add	sp, #12
 802156e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021572:	bf00      	nop
 8021574:	0801f8d1 	.word	0x0801f8d1
 8021578:	080368f4 	.word	0x080368f4

0802157c <mg_vmprintf>:
char *mg_vmprintf(const char *fmt, va_list *ap) {
 802157c:	b510      	push	{r4, lr}
 802157e:	b084      	sub	sp, #16
 8021580:	4602      	mov	r2, r0
 8021582:	460b      	mov	r3, r1
  struct mg_iobuf io = {0, 0, 0, 256};
 8021584:	2400      	movs	r4, #0
 8021586:	9400      	str	r4, [sp, #0]
 8021588:	9401      	str	r4, [sp, #4]
 802158a:	9402      	str	r4, [sp, #8]
 802158c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8021590:	9103      	str	r1, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 8021592:	4669      	mov	r1, sp
 8021594:	4802      	ldr	r0, [pc, #8]	@ (80215a0 <mg_vmprintf+0x24>)
 8021596:	f7ff fc7d 	bl	8020e94 <mg_vxprintf>
}
 802159a:	9800      	ldr	r0, [sp, #0]
 802159c:	b004      	add	sp, #16
 802159e:	bd10      	pop	{r4, pc}
 80215a0:	08024157 	.word	0x08024157

080215a4 <mg_mprintf>:
char *mg_mprintf(const char *fmt, ...) {
 80215a4:	b40f      	push	{r0, r1, r2, r3}
 80215a6:	b500      	push	{lr}
 80215a8:	b083      	sub	sp, #12
 80215aa:	ab04      	add	r3, sp, #16
 80215ac:	f853 0b04 	ldr.w	r0, [r3], #4
  va_start(ap, fmt);
 80215b0:	9301      	str	r3, [sp, #4]
  s = mg_vmprintf(fmt, &ap);
 80215b2:	a901      	add	r1, sp, #4
 80215b4:	f7ff ffe2 	bl	802157c <mg_vmprintf>
}
 80215b8:	b003      	add	sp, #12
 80215ba:	f85d eb04 	ldr.w	lr, [sp], #4
 80215be:	b004      	add	sp, #16
 80215c0:	4770      	bx	lr

080215c2 <mg_queue_next>:
size_t mg_queue_next(struct mg_queue *q, char **buf) {
 80215c2:	b538      	push	{r3, r4, r5, lr}
 80215c4:	4604      	mov	r4, r0
 80215c6:	460d      	mov	r5, r1
  if (q->tail != q->head) {
 80215c8:	6882      	ldr	r2, [r0, #8]
 80215ca:	68c3      	ldr	r3, [r0, #12]
 80215cc:	429a      	cmp	r2, r3
 80215ce:	d107      	bne.n	80215e0 <mg_queue_next+0x1e>
  size_t len = 0;
 80215d0:	2000      	movs	r0, #0
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 80215d2:	b125      	cbz	r5, 80215de <mg_queue_next+0x1c>
 80215d4:	6823      	ldr	r3, [r4, #0]
 80215d6:	68a2      	ldr	r2, [r4, #8]
 80215d8:	3204      	adds	r2, #4
 80215da:	4413      	add	r3, r2
 80215dc:	602b      	str	r3, [r5, #0]
}
 80215de:	bd38      	pop	{r3, r4, r5, pc}
    len = mg_queue_read_len(q);
 80215e0:	f7fe fc35 	bl	801fe4e <mg_queue_read_len>
    if (len == 0) {  // Zero (head wrapped) ?
 80215e4:	2800      	cmp	r0, #0
 80215e6:	d1f4      	bne.n	80215d2 <mg_queue_next+0x10>
      q->tail = 0;   // Reset tail to the start
 80215e8:	60a0      	str	r0, [r4, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 80215ea:	68e2      	ldr	r2, [r4, #12]
 80215ec:	68a3      	ldr	r3, [r4, #8]
 80215ee:	429a      	cmp	r2, r3
 80215f0:	d9ef      	bls.n	80215d2 <mg_queue_next+0x10>
 80215f2:	4620      	mov	r0, r4
 80215f4:	f7fe fc2b 	bl	801fe4e <mg_queue_read_len>
 80215f8:	e7eb      	b.n	80215d2 <mg_queue_next+0x10>

080215fa <mg_queue_del>:
  q->tail += len + sizeof(uint32_t);
 80215fa:	6883      	ldr	r3, [r0, #8]
 80215fc:	440b      	add	r3, r1
 80215fe:	3304      	adds	r3, #4
 8021600:	6083      	str	r3, [r0, #8]
}
 8021602:	4770      	bx	lr

08021604 <mg_http_serve_ssi>:
                       const char *fullpath) {
 8021604:	b508      	push	{r3, lr}
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8021606:	4b03      	ldr	r3, [pc, #12]	@ (8021614 <mg_http_serve_ssi+0x10>)
 8021608:	2200      	movs	r2, #0
 802160a:	f240 11f5 	movw	r1, #501	@ 0x1f5
 802160e:	f7ff ff21 	bl	8021454 <mg_http_reply>
}
 8021612:	bd08      	pop	{r3, pc}
 8021614:	080368fc 	.word	0x080368fc

08021618 <mg_str_s>:
struct mg_str mg_str_s(const char *s) {
 8021618:	b510      	push	{r4, lr}
 802161a:	4604      	mov	r4, r0
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 802161c:	6001      	str	r1, [r0, #0]
 802161e:	b129      	cbz	r1, 802162c <mg_str_s+0x14>
 8021620:	4608      	mov	r0, r1
 8021622:	f7ee fe3d 	bl	80102a0 <strlen>
 8021626:	6060      	str	r0, [r4, #4]
}
 8021628:	4620      	mov	r0, r4
 802162a:	bd10      	pop	{r4, pc}
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 802162c:	2000      	movs	r0, #0
 802162e:	e7fa      	b.n	8021626 <mg_str_s+0xe>

08021630 <mg_str_n>:
  struct mg_str str = {(char *) s, n};
 8021630:	6001      	str	r1, [r0, #0]
 8021632:	6042      	str	r2, [r0, #4]
}
 8021634:	4770      	bx	lr

08021636 <mg_v4mapped>:
static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 8021636:	b530      	push	{r4, r5, lr}
 8021638:	b085      	sub	sp, #20
 802163a:	466b      	mov	r3, sp
 802163c:	e883 0003 	stmia.w	r3, {r0, r1}
  if (str.len < 14) return false;
 8021640:	290d      	cmp	r1, #13
 8021642:	d930      	bls.n	80216a6 <mg_v4mapped+0x70>
 8021644:	4614      	mov	r4, r2
 8021646:	460b      	mov	r3, r1
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 8021648:	4601      	mov	r1, r0
 802164a:	7802      	ldrb	r2, [r0, #0]
 802164c:	2a3a      	cmp	r2, #58	@ 0x3a
 802164e:	d12d      	bne.n	80216ac <mg_v4mapped+0x76>
 8021650:	7842      	ldrb	r2, [r0, #1]
 8021652:	2a3a      	cmp	r2, #58	@ 0x3a
 8021654:	d12c      	bne.n	80216b0 <mg_v4mapped+0x7a>
 8021656:	7982      	ldrb	r2, [r0, #6]
 8021658:	2a3a      	cmp	r2, #58	@ 0x3a
 802165a:	d12b      	bne.n	80216b4 <mg_v4mapped+0x7e>
  for (i = 2; i < 6; i++) {
 802165c:	2202      	movs	r2, #2
 802165e:	e000      	b.n	8021662 <mg_v4mapped+0x2c>
 8021660:	3201      	adds	r2, #1
 8021662:	2a05      	cmp	r2, #5
 8021664:	dc06      	bgt.n	8021674 <mg_v4mapped+0x3e>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 8021666:	5c88      	ldrb	r0, [r1, r2]
 8021668:	2866      	cmp	r0, #102	@ 0x66
 802166a:	d0f9      	beq.n	8021660 <mg_v4mapped+0x2a>
 802166c:	2846      	cmp	r0, #70	@ 0x46
 802166e:	d0f7      	beq.n	8021660 <mg_v4mapped+0x2a>
 8021670:	2000      	movs	r0, #0
 8021672:	e019      	b.n	80216a8 <mg_v4mapped+0x72>
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 8021674:	ad02      	add	r5, sp, #8
 8021676:	1fda      	subs	r2, r3, #7
 8021678:	3107      	adds	r1, #7
 802167a:	4628      	mov	r0, r5
 802167c:	f7ff ffd8 	bl	8021630 <mg_str_n>
 8021680:	4622      	mov	r2, r4
 8021682:	e895 0003 	ldmia.w	r5, {r0, r1}
 8021686:	f7fe f899 	bl	801f7bc <mg_aton4>
 802168a:	b168      	cbz	r0, 80216a8 <mg_v4mapped+0x72>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 802168c:	6822      	ldr	r2, [r4, #0]
  memset(addr->ip, 0, sizeof(addr->ip));
 802168e:	2300      	movs	r3, #0
 8021690:	6023      	str	r3, [r4, #0]
 8021692:	6063      	str	r3, [r4, #4]
 8021694:	60a3      	str	r3, [r4, #8]
 8021696:	60e3      	str	r3, [r4, #12]
  addr->ip[10] = addr->ip[11] = 255;
 8021698:	23ff      	movs	r3, #255	@ 0xff
 802169a:	72e3      	strb	r3, [r4, #11]
 802169c:	72a3      	strb	r3, [r4, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 802169e:	60e2      	str	r2, [r4, #12]
  addr->is_ip6 = true;
 80216a0:	2301      	movs	r3, #1
 80216a2:	74e3      	strb	r3, [r4, #19]
  return true;
 80216a4:	e000      	b.n	80216a8 <mg_v4mapped+0x72>
  if (str.len < 14) return false;
 80216a6:	2000      	movs	r0, #0
}
 80216a8:	b005      	add	sp, #20
 80216aa:	bd30      	pop	{r4, r5, pc}
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 80216ac:	2000      	movs	r0, #0
 80216ae:	e7fb      	b.n	80216a8 <mg_v4mapped+0x72>
 80216b0:	2000      	movs	r0, #0
 80216b2:	e7f9      	b.n	80216a8 <mg_v4mapped+0x72>
 80216b4:	2000      	movs	r0, #0
 80216b6:	e7f7      	b.n	80216a8 <mg_v4mapped+0x72>

080216b8 <mkpay>:
static void mkpay(struct pkt *pkt, void *p) {
 80216b8:	b530      	push	{r4, r5, lr}
 80216ba:	b083      	sub	sp, #12
 80216bc:	4604      	mov	r4, r0
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 80216be:	6803      	ldr	r3, [r0, #0]
 80216c0:	6842      	ldr	r2, [r0, #4]
 80216c2:	441a      	add	r2, r3
 80216c4:	466d      	mov	r5, sp
 80216c6:	1a52      	subs	r2, r2, r1
 80216c8:	4628      	mov	r0, r5
 80216ca:	f7ff ffb1 	bl	8021630 <mg_str_n>
 80216ce:	3408      	adds	r4, #8
 80216d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80216d4:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80216d8:	b003      	add	sp, #12
 80216da:	bd30      	pop	{r4, r5, pc}

080216dc <mg_strcmp>:
int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 80216dc:	b084      	sub	sp, #16
 80216de:	f10d 0c10 	add.w	ip, sp, #16
 80216e2:	e90c 0003 	stmdb	ip, {r0, r1}
 80216e6:	4669      	mov	r1, sp
 80216e8:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 80216ec:	2300      	movs	r3, #0
  while (i < str1.len && i < str2.len) {
 80216ee:	9a03      	ldr	r2, [sp, #12]
 80216f0:	429a      	cmp	r2, r3
 80216f2:	d90b      	bls.n	802170c <mg_strcmp+0x30>
 80216f4:	9901      	ldr	r1, [sp, #4]
 80216f6:	4299      	cmp	r1, r3
 80216f8:	d908      	bls.n	802170c <mg_strcmp+0x30>
    int c1 = str1.buf[i];
 80216fa:	9a02      	ldr	r2, [sp, #8]
 80216fc:	5cd1      	ldrb	r1, [r2, r3]
    int c2 = str2.buf[i];
 80216fe:	9a00      	ldr	r2, [sp, #0]
 8021700:	5cd2      	ldrb	r2, [r2, r3]
    if (c1 < c2) return -1;
 8021702:	4291      	cmp	r1, r2
 8021704:	db09      	blt.n	802171a <mg_strcmp+0x3e>
    if (c1 > c2) return 1;
 8021706:	dc0c      	bgt.n	8021722 <mg_strcmp+0x46>
    i++;
 8021708:	3301      	adds	r3, #1
 802170a:	e7f0      	b.n	80216ee <mg_strcmp+0x12>
  if (i < str1.len) return 1;
 802170c:	429a      	cmp	r2, r3
 802170e:	d80a      	bhi.n	8021726 <mg_strcmp+0x4a>
  if (i < str2.len) return -1;
 8021710:	9a01      	ldr	r2, [sp, #4]
 8021712:	429a      	cmp	r2, r3
 8021714:	d809      	bhi.n	802172a <mg_strcmp+0x4e>
  return 0;
 8021716:	2000      	movs	r0, #0
 8021718:	e001      	b.n	802171e <mg_strcmp+0x42>
    if (c1 < c2) return -1;
 802171a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 802171e:	b004      	add	sp, #16
 8021720:	4770      	bx	lr
    if (c1 > c2) return 1;
 8021722:	2001      	movs	r0, #1
 8021724:	e7fb      	b.n	802171e <mg_strcmp+0x42>
  if (i < str1.len) return 1;
 8021726:	2001      	movs	r0, #1
 8021728:	e7f9      	b.n	802171e <mg_strcmp+0x42>
  if (i < str2.len) return -1;
 802172a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802172e:	e7f6      	b.n	802171e <mg_strcmp+0x42>

08021730 <mg_strcasecmp>:
int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8021730:	b530      	push	{r4, r5, lr}
 8021732:	b085      	sub	sp, #20
 8021734:	ac04      	add	r4, sp, #16
 8021736:	e904 0003 	stmdb	r4, {r0, r1}
 802173a:	4669      	mov	r1, sp
 802173c:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8021740:	2400      	movs	r4, #0
  while (i < str1.len && i < str2.len) {
 8021742:	9b03      	ldr	r3, [sp, #12]
 8021744:	42a3      	cmp	r3, r4
 8021746:	d910      	bls.n	802176a <mg_strcasecmp+0x3a>
 8021748:	9a01      	ldr	r2, [sp, #4]
 802174a:	42a2      	cmp	r2, r4
 802174c:	d90d      	bls.n	802176a <mg_strcasecmp+0x3a>
    int c1 = mg_tolc(str1.buf[i]);
 802174e:	9b02      	ldr	r3, [sp, #8]
 8021750:	5d18      	ldrb	r0, [r3, r4]
 8021752:	f7fe f8e5 	bl	801f920 <mg_tolc>
 8021756:	4605      	mov	r5, r0
    int c2 = mg_tolc(str2.buf[i]);
 8021758:	9b00      	ldr	r3, [sp, #0]
 802175a:	5d18      	ldrb	r0, [r3, r4]
 802175c:	f7fe f8e0 	bl	801f920 <mg_tolc>
    if (c1 < c2) return -1;
 8021760:	4285      	cmp	r5, r0
 8021762:	db09      	blt.n	8021778 <mg_strcasecmp+0x48>
    if (c1 > c2) return 1;
 8021764:	dc0c      	bgt.n	8021780 <mg_strcasecmp+0x50>
    i++;
 8021766:	3401      	adds	r4, #1
 8021768:	e7eb      	b.n	8021742 <mg_strcasecmp+0x12>
  if (i < str1.len) return 1;
 802176a:	42a3      	cmp	r3, r4
 802176c:	d80a      	bhi.n	8021784 <mg_strcasecmp+0x54>
  if (i < str2.len) return -1;
 802176e:	9b01      	ldr	r3, [sp, #4]
 8021770:	42a3      	cmp	r3, r4
 8021772:	d809      	bhi.n	8021788 <mg_strcasecmp+0x58>
  return 0;
 8021774:	2000      	movs	r0, #0
 8021776:	e001      	b.n	802177c <mg_strcasecmp+0x4c>
    if (c1 < c2) return -1;
 8021778:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 802177c:	b005      	add	sp, #20
 802177e:	bd30      	pop	{r4, r5, pc}
    if (c1 > c2) return 1;
 8021780:	2001      	movs	r0, #1
 8021782:	e7fb      	b.n	802177c <mg_strcasecmp+0x4c>
  if (i < str1.len) return 1;
 8021784:	2001      	movs	r0, #1
 8021786:	e7f9      	b.n	802177c <mg_strcasecmp+0x4c>
  if (i < str2.len) return -1;
 8021788:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802178c:	e7f6      	b.n	802177c <mg_strcasecmp+0x4c>
	...

08021790 <mg_http_parse>:
int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8021790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021794:	b086      	sub	sp, #24
 8021796:	4604      	mov	r4, r0
 8021798:	4616      	mov	r6, r2
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 802179a:	f7fe fc5b 	bl	8020054 <mg_http_get_request_len>
 802179e:	4607      	mov	r7, r0
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 80217a0:	b1d4      	cbz	r4, 80217d8 <mg_http_parse+0x48>
 80217a2:	1825      	adds	r5, r4, r0
  memset(hm, 0, sizeof(*hm));
 80217a4:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80217a8:	2100      	movs	r1, #0
 80217aa:	4630      	mov	r0, r6
 80217ac:	f008 f968 	bl	8029a80 <memset>
  if (req_len <= 0) return req_len;
 80217b0:	2f00      	cmp	r7, #0
 80217b2:	f340 808d 	ble.w	80218d0 <mg_http_parse+0x140>
  hm->message.buf = hm->head.buf = (char *) s;
 80217b6:	f8c6 4208 	str.w	r4, [r6, #520]	@ 0x208
 80217ba:	f8c6 4210 	str.w	r4, [r6, #528]	@ 0x210
  hm->body.buf = (char *) end;
 80217be:	f8c6 5200 	str.w	r5, [r6, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 80217c2:	46b8      	mov	r8, r7
 80217c4:	f8c6 720c 	str.w	r7, [r6, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 80217c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80217cc:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
 80217d0:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  hm->method.buf = (char *) s;
 80217d4:	6034      	str	r4, [r6, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 80217d6:	e005      	b.n	80217e4 <mg_http_parse+0x54>
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 80217d8:	4625      	mov	r5, r4
 80217da:	e7e3      	b.n	80217a4 <mg_http_parse+0x14>
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 80217dc:	4414      	add	r4, r2
 80217de:	6873      	ldr	r3, [r6, #4]
 80217e0:	4413      	add	r3, r2
 80217e2:	6073      	str	r3, [r6, #4]
 80217e4:	42ac      	cmp	r4, r5
 80217e6:	d208      	bcs.n	80217fa <mg_http_parse+0x6a>
 80217e8:	4629      	mov	r1, r5
 80217ea:	4620      	mov	r0, r4
 80217ec:	f7fc fe3c 	bl	801e468 <clen>
 80217f0:	4602      	mov	r2, r0
 80217f2:	2800      	cmp	r0, #0
 80217f4:	d1f2      	bne.n	80217dc <mg_http_parse+0x4c>
 80217f6:	e000      	b.n	80217fa <mg_http_parse+0x6a>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80217f8:	3401      	adds	r4, #1
 80217fa:	42ac      	cmp	r4, r5
 80217fc:	d202      	bcs.n	8021804 <mg_http_parse+0x74>
 80217fe:	7823      	ldrb	r3, [r4, #0]
 8021800:	2b20      	cmp	r3, #32
 8021802:	d0f9      	beq.n	80217f8 <mg_http_parse+0x68>
  hm->uri.buf = (char *) s;
 8021804:	60b4      	str	r4, [r6, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 8021806:	e003      	b.n	8021810 <mg_http_parse+0x80>
 8021808:	4414      	add	r4, r2
 802180a:	68f3      	ldr	r3, [r6, #12]
 802180c:	4413      	add	r3, r2
 802180e:	60f3      	str	r3, [r6, #12]
 8021810:	42ac      	cmp	r4, r5
 8021812:	d208      	bcs.n	8021826 <mg_http_parse+0x96>
 8021814:	4629      	mov	r1, r5
 8021816:	4620      	mov	r0, r4
 8021818:	f7fc fe26 	bl	801e468 <clen>
 802181c:	4602      	mov	r2, r0
 802181e:	2800      	cmp	r0, #0
 8021820:	d1f2      	bne.n	8021808 <mg_http_parse+0x78>
 8021822:	e000      	b.n	8021826 <mg_http_parse+0x96>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8021824:	3401      	adds	r4, #1
 8021826:	42ac      	cmp	r4, r5
 8021828:	d202      	bcs.n	8021830 <mg_http_parse+0xa0>
 802182a:	7823      	ldrb	r3, [r4, #0]
 802182c:	2b20      	cmp	r3, #32
 802182e:	d0f9      	beq.n	8021824 <mg_http_parse+0x94>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8021830:	f106 0218 	add.w	r2, r6, #24
 8021834:	4629      	mov	r1, r5
 8021836:	4620      	mov	r0, r4
 8021838:	f7fc fe5d 	bl	801e4f6 <skiptorn>
 802183c:	4682      	mov	sl, r0
 802183e:	2800      	cmp	r0, #0
 8021840:	f000 8082 	beq.w	8021948 <mg_http_parse+0x1b8>
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8021844:	f8d6 9008 	ldr.w	r9, [r6, #8]
 8021848:	68f4      	ldr	r4, [r6, #12]
 802184a:	4622      	mov	r2, r4
 802184c:	213f      	movs	r1, #63	@ 0x3f
 802184e:	4648      	mov	r0, r9
 8021850:	f7ee fcd6 	bl	8010200 <memchr>
 8021854:	b138      	cbz	r0, 8021866 <mg_http_parse+0xd6>
    hm->query.buf = (char *) qs + 1;
 8021856:	1c42      	adds	r2, r0, #1
 8021858:	6132      	str	r2, [r6, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 802185a:	444c      	add	r4, r9
 802185c:	1aa4      	subs	r4, r4, r2
 802185e:	6174      	str	r4, [r6, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8021860:	eba0 0309 	sub.w	r3, r0, r9
 8021864:	60f3      	str	r3, [r6, #12]
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8021866:	6873      	ldr	r3, [r6, #4]
 8021868:	2b00      	cmp	r3, #0
 802186a:	d06f      	beq.n	802194c <mg_http_parse+0x1bc>
 802186c:	68f3      	ldr	r3, [r6, #12]
 802186e:	2b00      	cmp	r3, #0
 8021870:	d06f      	beq.n	8021952 <mg_http_parse+0x1c2>
  if (!mg_http_parse_headers(s, end, hm->headers,
 8021872:	231e      	movs	r3, #30
 8021874:	f106 0220 	add.w	r2, r6, #32
 8021878:	4629      	mov	r1, r5
 802187a:	4650      	mov	r0, sl
 802187c:	f7fc fe63 	bl	801e546 <mg_http_parse_headers>
 8021880:	2800      	cmp	r0, #0
 8021882:	d069      	beq.n	8021958 <mg_http_parse+0x1c8>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8021884:	4939      	ldr	r1, [pc, #228]	@ (802196c <mg_http_parse+0x1dc>)
 8021886:	4630      	mov	r0, r6
 8021888:	f7fe fc10 	bl	80200ac <mg_http_get_header>
 802188c:	b160      	cbz	r0, 80218a8 <mg_http_parse+0x118>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 802188e:	f506 7201 	add.w	r2, r6, #516	@ 0x204
 8021892:	e9d0 0100 	ldrd	r0, r1, [r0]
 8021896:	f7fe fb8b 	bl	801ffb0 <mg_to_size_t>
 802189a:	2800      	cmp	r0, #0
 802189c:	d05f      	beq.n	802195e <mg_http_parse+0x1ce>
    hm->message.len = (size_t) req_len + hm->body.len;
 802189e:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 80218a2:	4443      	add	r3, r8
 80218a4:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 80218a8:	2205      	movs	r2, #5
 80218aa:	4931      	ldr	r1, [pc, #196]	@ (8021970 <mg_http_parse+0x1e0>)
 80218ac:	6830      	ldr	r0, [r6, #0]
 80218ae:	f7fc fd8d 	bl	801e3cc <mg_ncasecmp>
 80218b2:	4604      	mov	r4, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 80218b4:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 80218b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80218bc:	d00c      	beq.n	80218d8 <mg_http_parse+0x148>
  if (hm->body.len == (size_t) ~0 && is_response &&
 80218be:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 80218c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80218c6:	d029      	beq.n	802191c <mg_http_parse+0x18c>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 80218c8:	f8d6 3214 	ldr.w	r3, [r6, #532]	@ 0x214
 80218cc:	4598      	cmp	r8, r3
 80218ce:	d849      	bhi.n	8021964 <mg_http_parse+0x1d4>
}
 80218d0:	4638      	mov	r0, r7
 80218d2:	b006      	add	sp, #24
 80218d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (hm->body.len == (size_t) ~0 && !is_response &&
 80218d8:	2800      	cmp	r0, #0
 80218da:	d0f0      	beq.n	80218be <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 80218dc:	466d      	mov	r5, sp
 80218de:	4925      	ldr	r1, [pc, #148]	@ (8021974 <mg_http_parse+0x1e4>)
 80218e0:	4628      	mov	r0, r5
 80218e2:	f7ff fe99 	bl	8021618 <mg_str_s>
 80218e6:	e895 000c 	ldmia.w	r5, {r2, r3}
 80218ea:	e896 0003 	ldmia.w	r6, {r0, r1}
 80218ee:	f7ff ff1f 	bl	8021730 <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && !is_response &&
 80218f2:	2800      	cmp	r0, #0
 80218f4:	d0e3      	beq.n	80218be <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 80218f6:	ad02      	add	r5, sp, #8
 80218f8:	491f      	ldr	r1, [pc, #124]	@ (8021978 <mg_http_parse+0x1e8>)
 80218fa:	4628      	mov	r0, r5
 80218fc:	f7ff fe8c 	bl	8021618 <mg_str_s>
 8021900:	e895 000c 	ldmia.w	r5, {r2, r3}
 8021904:	e896 0003 	ldmia.w	r6, {r0, r1}
 8021908:	f7ff ff12 	bl	8021730 <mg_strcasecmp>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 802190c:	2800      	cmp	r0, #0
 802190e:	d0d6      	beq.n	80218be <mg_http_parse+0x12e>
    hm->body.len = 0;
 8021910:	2300      	movs	r3, #0
 8021912:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8021916:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 802191a:	e7d0      	b.n	80218be <mg_http_parse+0x12e>
  if (hm->body.len == (size_t) ~0 && is_response &&
 802191c:	2c00      	cmp	r4, #0
 802191e:	d1d3      	bne.n	80218c8 <mg_http_parse+0x138>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8021920:	ac04      	add	r4, sp, #16
 8021922:	4916      	ldr	r1, [pc, #88]	@ (802197c <mg_http_parse+0x1ec>)
 8021924:	4620      	mov	r0, r4
 8021926:	f7ff fe77 	bl	8021618 <mg_str_s>
 802192a:	e894 000c 	ldmia.w	r4, {r2, r3}
 802192e:	f106 0108 	add.w	r1, r6, #8
 8021932:	c903      	ldmia	r1, {r0, r1}
 8021934:	f7ff fefc 	bl	8021730 <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8021938:	2800      	cmp	r0, #0
 802193a:	d1c5      	bne.n	80218c8 <mg_http_parse+0x138>
    hm->body.len = 0;
 802193c:	2300      	movs	r3, #0
 802193e:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8021942:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 8021946:	e7bf      	b.n	80218c8 <mg_http_parse+0x138>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8021948:	2700      	movs	r7, #0
 802194a:	e7c1      	b.n	80218d0 <mg_http_parse+0x140>
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 802194c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8021950:	e7be      	b.n	80218d0 <mg_http_parse+0x140>
 8021952:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8021956:	e7bb      	b.n	80218d0 <mg_http_parse+0x140>
    return -1;  // error when parsing
 8021958:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802195c:	e7b8      	b.n	80218d0 <mg_http_parse+0x140>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 802195e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8021962:	e7b5      	b.n	80218d0 <mg_http_parse+0x140>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8021964:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8021968:	e7b2      	b.n	80218d0 <mg_http_parse+0x140>
 802196a:	bf00      	nop
 802196c:	0803690c 	.word	0x0803690c
 8021970:	0803691c 	.word	0x0803691c
 8021974:	08036924 	.word	0x08036924
 8021978:	08033504 	.word	0x08033504
 802197c:	08036928 	.word	0x08036928

08021980 <mg_match>:
bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8021980:	b530      	push	{r4, r5, lr}
 8021982:	b085      	sub	sp, #20
 8021984:	ac04      	add	r4, sp, #16
 8021986:	e904 0003 	stmdb	r4, {r0, r1}
 802198a:	4669      	mov	r1, sp
 802198c:	e881 000c 	stmia.w	r1, {r2, r3}
 8021990:	9808      	ldr	r0, [sp, #32]
  if (caps) caps->buf = NULL, caps->len = 0;
 8021992:	b110      	cbz	r0, 802199a <mg_match+0x1a>
 8021994:	2300      	movs	r3, #0
 8021996:	6003      	str	r3, [r0, #0]
 8021998:	6043      	str	r3, [r0, #4]
      ni = i++, nj = j + 1;
 802199a:	2400      	movs	r4, #0
 802199c:	46a4      	mov	ip, r4
 802199e:	4621      	mov	r1, r4
 80219a0:	4623      	mov	r3, r4
 80219a2:	e028      	b.n	80219f6 <mg_match+0x76>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 80219a4:	9a02      	ldr	r2, [sp, #8]
 80219a6:	440a      	add	r2, r1
 80219a8:	6002      	str	r2, [r0, #0]
 80219aa:	2201      	movs	r2, #1
 80219ac:	6042      	str	r2, [r0, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 80219ae:	2200      	movs	r2, #0
 80219b0:	6082      	str	r2, [r0, #8]
 80219b2:	60c2      	str	r2, [r0, #12]
 80219b4:	3008      	adds	r0, #8
      i++, j++;
 80219b6:	3301      	adds	r3, #1
 80219b8:	3101      	adds	r1, #1
 80219ba:	e01c      	b.n	80219f6 <mg_match+0x76>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 80219bc:	429a      	cmp	r2, r3
 80219be:	d905      	bls.n	80219cc <mg_match+0x4c>
 80219c0:	9a00      	ldr	r2, [sp, #0]
 80219c2:	5cd2      	ldrb	r2, [r2, r3]
 80219c4:	2a2a      	cmp	r2, #42	@ 0x2a
 80219c6:	d045      	beq.n	8021a54 <mg_match+0xd4>
 80219c8:	2a23      	cmp	r2, #35	@ 0x23
 80219ca:	d043      	beq.n	8021a54 <mg_match+0xd4>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 80219cc:	2c00      	cmp	r4, #0
 80219ce:	d065      	beq.n	8021a9c <mg_match+0x11c>
 80219d0:	9b03      	ldr	r3, [sp, #12]
 80219d2:	42a3      	cmp	r3, r4
 80219d4:	d365      	bcc.n	8021aa2 <mg_match+0x122>
 80219d6:	9b00      	ldr	r3, [sp, #0]
 80219d8:	f813 300c 	ldrb.w	r3, [r3, ip]
 80219dc:	2b23      	cmp	r3, #35	@ 0x23
 80219de:	d003      	beq.n	80219e8 <mg_match+0x68>
 80219e0:	9b02      	ldr	r3, [sp, #8]
 80219e2:	5c5b      	ldrb	r3, [r3, r1]
 80219e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80219e6:	d05e      	beq.n	8021aa6 <mg_match+0x126>
      if (caps && caps->buf == NULL && caps->len == 0) {
 80219e8:	2800      	cmp	r0, #0
 80219ea:	d046      	beq.n	8021a7a <mg_match+0xfa>
 80219ec:	6803      	ldr	r3, [r0, #0]
 80219ee:	2b00      	cmp	r3, #0
 80219f0:	d03c      	beq.n	8021a6c <mg_match+0xec>
      i = ni, j = nj;
 80219f2:	4621      	mov	r1, r4
 80219f4:	4663      	mov	r3, ip
  while (i < p.len || j < s.len) {
 80219f6:	9a01      	ldr	r2, [sp, #4]
 80219f8:	429a      	cmp	r2, r3
 80219fa:	d802      	bhi.n	8021a02 <mg_match+0x82>
 80219fc:	9d03      	ldr	r5, [sp, #12]
 80219fe:	428d      	cmp	r5, r1
 8021a00:	d941      	bls.n	8021a86 <mg_match+0x106>
    if (i < p.len && j < s.len &&
 8021a02:	429a      	cmp	r2, r3
 8021a04:	d9da      	bls.n	80219bc <mg_match+0x3c>
 8021a06:	9d03      	ldr	r5, [sp, #12]
 8021a08:	428d      	cmp	r5, r1
 8021a0a:	d9d7      	bls.n	80219bc <mg_match+0x3c>
        (p.buf[i] == '?' ||
 8021a0c:	9d00      	ldr	r5, [sp, #0]
 8021a0e:	f815 e003 	ldrb.w	lr, [r5, r3]
    if (i < p.len && j < s.len &&
 8021a12:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 8021a16:	d009      	beq.n	8021a2c <mg_match+0xac>
        (p.buf[i] == '?' ||
 8021a18:	f1be 0f2a 	cmp.w	lr, #42	@ 0x2a
 8021a1c:	d0ce      	beq.n	80219bc <mg_match+0x3c>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8021a1e:	f1be 0f23 	cmp.w	lr, #35	@ 0x23
 8021a22:	d0cb      	beq.n	80219bc <mg_match+0x3c>
 8021a24:	9d02      	ldr	r5, [sp, #8]
 8021a26:	5c6d      	ldrb	r5, [r5, r1]
 8021a28:	45ae      	cmp	lr, r5
 8021a2a:	d1c7      	bne.n	80219bc <mg_match+0x3c>
      if (caps == NULL) {
 8021a2c:	2800      	cmp	r0, #0
 8021a2e:	d0c2      	beq.n	80219b6 <mg_match+0x36>
      } else if (p.buf[i] == '?') {
 8021a30:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 8021a34:	d0b6      	beq.n	80219a4 <mg_match+0x24>
      } else if (caps->buf != NULL && caps->len == 0) {
 8021a36:	6802      	ldr	r2, [r0, #0]
 8021a38:	2a00      	cmp	r2, #0
 8021a3a:	d0bc      	beq.n	80219b6 <mg_match+0x36>
 8021a3c:	6845      	ldr	r5, [r0, #4]
 8021a3e:	2d00      	cmp	r5, #0
 8021a40:	d1b9      	bne.n	80219b6 <mg_match+0x36>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8021a42:	9d02      	ldr	r5, [sp, #8]
 8021a44:	440d      	add	r5, r1
 8021a46:	1aad      	subs	r5, r5, r2
 8021a48:	6045      	str	r5, [r0, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8021a4a:	2200      	movs	r2, #0
 8021a4c:	60c2      	str	r2, [r0, #12]
 8021a4e:	6082      	str	r2, [r0, #8]
 8021a50:	3008      	adds	r0, #8
 8021a52:	e7b0      	b.n	80219b6 <mg_match+0x36>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8021a54:	b108      	cbz	r0, 8021a5a <mg_match+0xda>
 8021a56:	6802      	ldr	r2, [r0, #0]
 8021a58:	b11a      	cbz	r2, 8021a62 <mg_match+0xe2>
      ni = i++, nj = j + 1;
 8021a5a:	1c4c      	adds	r4, r1, #1
 8021a5c:	469c      	mov	ip, r3
 8021a5e:	3301      	adds	r3, #1
 8021a60:	e7c9      	b.n	80219f6 <mg_match+0x76>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8021a62:	6042      	str	r2, [r0, #4]
 8021a64:	9a02      	ldr	r2, [sp, #8]
 8021a66:	440a      	add	r2, r1
 8021a68:	6002      	str	r2, [r0, #0]
 8021a6a:	e7f6      	b.n	8021a5a <mg_match+0xda>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8021a6c:	6843      	ldr	r3, [r0, #4]
 8021a6e:	b93b      	cbnz	r3, 8021a80 <mg_match+0x100>
        caps--, caps->len = 0;  // Restart previous cap
 8021a70:	3808      	subs	r0, #8
 8021a72:	6043      	str	r3, [r0, #4]
      i = ni, j = nj;
 8021a74:	4621      	mov	r1, r4
 8021a76:	4663      	mov	r3, ip
 8021a78:	e7bd      	b.n	80219f6 <mg_match+0x76>
 8021a7a:	4621      	mov	r1, r4
 8021a7c:	4663      	mov	r3, ip
 8021a7e:	e7ba      	b.n	80219f6 <mg_match+0x76>
 8021a80:	4621      	mov	r1, r4
 8021a82:	4663      	mov	r3, ip
 8021a84:	e7b7      	b.n	80219f6 <mg_match+0x76>
  if (caps && caps->buf && caps->len == 0) {
 8021a86:	b180      	cbz	r0, 8021aaa <mg_match+0x12a>
 8021a88:	6803      	ldr	r3, [r0, #0]
 8021a8a:	b183      	cbz	r3, 8021aae <mg_match+0x12e>
 8021a8c:	6842      	ldr	r2, [r0, #4]
 8021a8e:	b982      	cbnz	r2, 8021ab2 <mg_match+0x132>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8021a90:	9a02      	ldr	r2, [sp, #8]
 8021a92:	440a      	add	r2, r1
 8021a94:	1ad3      	subs	r3, r2, r3
 8021a96:	6043      	str	r3, [r0, #4]
  return true;
 8021a98:	2001      	movs	r0, #1
 8021a9a:	e000      	b.n	8021a9e <mg_match+0x11e>
      return false;
 8021a9c:	2000      	movs	r0, #0
}
 8021a9e:	b005      	add	sp, #20
 8021aa0:	bd30      	pop	{r4, r5, pc}
      return false;
 8021aa2:	2000      	movs	r0, #0
 8021aa4:	e7fb      	b.n	8021a9e <mg_match+0x11e>
 8021aa6:	2000      	movs	r0, #0
 8021aa8:	e7f9      	b.n	8021a9e <mg_match+0x11e>
  return true;
 8021aaa:	2001      	movs	r0, #1
 8021aac:	e7f7      	b.n	8021a9e <mg_match+0x11e>
 8021aae:	2001      	movs	r0, #1
 8021ab0:	e7f5      	b.n	8021a9e <mg_match+0x11e>
 8021ab2:	2001      	movs	r0, #1
 8021ab4:	e7f3      	b.n	8021a9e <mg_match+0x11e>

08021ab6 <mg_span>:
bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8021ab6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021aba:	b085      	sub	sp, #20
 8021abc:	ac04      	add	r4, sp, #16
 8021abe:	e904 0003 	stmdb	r4, {r0, r1}
 8021ac2:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
  if (s.len == 0 || s.buf == NULL) {
 8021ac6:	b379      	cbz	r1, 8021b28 <mg_span+0x72>
 8021ac8:	4690      	mov	r8, r2
 8021aca:	461f      	mov	r7, r3
 8021acc:	460d      	mov	r5, r1
 8021ace:	9e02      	ldr	r6, [sp, #8]
 8021ad0:	b366      	cbz	r6, 8021b2c <mg_span+0x76>
    size_t len = 0;
 8021ad2:	2400      	movs	r4, #0
 8021ad4:	e000      	b.n	8021ad8 <mg_span+0x22>
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 8021ad6:	3401      	adds	r4, #1
 8021ad8:	42a5      	cmp	r5, r4
 8021ada:	d902      	bls.n	8021ae2 <mg_span+0x2c>
 8021adc:	5d31      	ldrb	r1, [r6, r4]
 8021ade:	4281      	cmp	r1, r0
 8021ae0:	d1f9      	bne.n	8021ad6 <mg_span+0x20>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 8021ae2:	f1b8 0f00 	cmp.w	r8, #0
 8021ae6:	d009      	beq.n	8021afc <mg_span+0x46>
 8021ae8:	46e9      	mov	r9, sp
 8021aea:	4622      	mov	r2, r4
 8021aec:	4631      	mov	r1, r6
 8021aee:	4648      	mov	r0, r9
 8021af0:	f7ff fd9e 	bl	8021630 <mg_str_n>
 8021af4:	e899 0003 	ldmia.w	r9, {r0, r1}
 8021af8:	e888 0003 	stmia.w	r8, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 8021afc:	b187      	cbz	r7, 8021b20 <mg_span+0x6a>
 8021afe:	46e8      	mov	r8, sp
 8021b00:	1b2a      	subs	r2, r5, r4
 8021b02:	1931      	adds	r1, r6, r4
 8021b04:	4640      	mov	r0, r8
 8021b06:	f7ff fd93 	bl	8021630 <mg_str_n>
 8021b0a:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021b0e:	e887 0003 	stmia.w	r7, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8021b12:	42a5      	cmp	r5, r4
 8021b14:	d904      	bls.n	8021b20 <mg_span+0x6a>
 8021b16:	4603      	mov	r3, r0
 8021b18:	3301      	adds	r3, #1
 8021b1a:	603b      	str	r3, [r7, #0]
 8021b1c:	1e4b      	subs	r3, r1, #1
 8021b1e:	607b      	str	r3, [r7, #4]
    return true;
 8021b20:	2001      	movs	r0, #1
}
 8021b22:	b005      	add	sp, #20
 8021b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;  // Empty string, nothing to span - fail
 8021b28:	2000      	movs	r0, #0
 8021b2a:	e7fa      	b.n	8021b22 <mg_span+0x6c>
 8021b2c:	2000      	movs	r0, #0
 8021b2e:	e7f8      	b.n	8021b22 <mg_span+0x6c>

08021b30 <mg_http_var>:
struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8021b30:	b082      	sub	sp, #8
 8021b32:	b510      	push	{r4, lr}
 8021b34:	b08a      	sub	sp, #40	@ 0x28
 8021b36:	4604      	mov	r4, r0
 8021b38:	f10d 0c08 	add.w	ip, sp, #8
 8021b3c:	e88c 0006 	stmia.w	ip, {r1, r2}
 8021b40:	930d      	str	r3, [sp, #52]	@ 0x34
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 8021b42:	2200      	movs	r2, #0
 8021b44:	4611      	mov	r1, r2
 8021b46:	f7ff fd73 	bl	8021630 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8021b4a:	ab02      	add	r3, sp, #8
 8021b4c:	2226      	movs	r2, #38	@ 0x26
 8021b4e:	9200      	str	r2, [sp, #0]
 8021b50:	aa08      	add	r2, sp, #32
 8021b52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021b56:	f7ff ffae 	bl	8021ab6 <mg_span>
 8021b5a:	b1c8      	cbz	r0, 8021b90 <mg_http_var+0x60>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8021b5c:	233d      	movs	r3, #61	@ 0x3d
 8021b5e:	9300      	str	r3, [sp, #0]
 8021b60:	ab04      	add	r3, sp, #16
 8021b62:	aa06      	add	r2, sp, #24
 8021b64:	a90a      	add	r1, sp, #40	@ 0x28
 8021b66:	e911 0003 	ldmdb	r1, {r0, r1}
 8021b6a:	f7ff ffa4 	bl	8021ab6 <mg_span>
 8021b6e:	2800      	cmp	r0, #0
 8021b70:	d0eb      	beq.n	8021b4a <mg_http_var+0x1a>
 8021b72:	9a07      	ldr	r2, [sp, #28]
 8021b74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021b76:	4293      	cmp	r3, r2
 8021b78:	d1e7      	bne.n	8021b4a <mg_http_var+0x1a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 8021b7a:	9906      	ldr	r1, [sp, #24]
 8021b7c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021b7e:	f7fc fc25 	bl	801e3cc <mg_ncasecmp>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8021b82:	2800      	cmp	r0, #0
 8021b84:	d1e1      	bne.n	8021b4a <mg_http_var+0x1a>
      result = v;
 8021b86:	ab04      	add	r3, sp, #16
 8021b88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021b8c:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8021b90:	4620      	mov	r0, r4
 8021b92:	b00a      	add	sp, #40	@ 0x28
 8021b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021b98:	b002      	add	sp, #8
 8021b9a:	4770      	bx	lr

08021b9c <guess_content_type>:
static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8021b9c:	b530      	push	{r4, r5, lr}
 8021b9e:	b08d      	sub	sp, #52	@ 0x34
 8021ba0:	4604      	mov	r4, r0
 8021ba2:	a802      	add	r0, sp, #8
 8021ba4:	e880 0006 	stmia.w	r0, {r1, r2}
  struct mg_str entry, k, v, s = mg_str(extra);
 8021ba8:	4619      	mov	r1, r3
 8021baa:	a804      	add	r0, sp, #16
 8021bac:	f7ff fd34 	bl	8021618 <mg_str_s>
  size_t i = 0;
 8021bb0:	2300      	movs	r3, #0
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8021bb2:	e000      	b.n	8021bb6 <guess_content_type+0x1a>
 8021bb4:	3301      	adds	r3, #1
 8021bb6:	9803      	ldr	r0, [sp, #12]
 8021bb8:	4298      	cmp	r0, r3
 8021bba:	d906      	bls.n	8021bca <guess_content_type+0x2e>
 8021bbc:	1ac1      	subs	r1, r0, r3
 8021bbe:	9a02      	ldr	r2, [sp, #8]
 8021bc0:	440a      	add	r2, r1
 8021bc2:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8021bc6:	2a2e      	cmp	r2, #46	@ 0x2e
 8021bc8:	d1f4      	bne.n	8021bb4 <guess_content_type+0x18>
  path.buf += path.len - i;
 8021bca:	1ac0      	subs	r0, r0, r3
 8021bcc:	9a02      	ldr	r2, [sp, #8]
 8021bce:	4402      	add	r2, r0
 8021bd0:	9202      	str	r2, [sp, #8]
  path.len = i;
 8021bd2:	9303      	str	r3, [sp, #12]
  while (mg_span(s, &entry, &s, ',')) {
 8021bd4:	ab04      	add	r3, sp, #16
 8021bd6:	222c      	movs	r2, #44	@ 0x2c
 8021bd8:	9200      	str	r2, [sp, #0]
 8021bda:	aa0a      	add	r2, sp, #40	@ 0x28
 8021bdc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021be0:	f7ff ff69 	bl	8021ab6 <mg_span>
 8021be4:	b1c0      	cbz	r0, 8021c18 <guess_content_type+0x7c>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 8021be6:	233d      	movs	r3, #61	@ 0x3d
 8021be8:	9300      	str	r3, [sp, #0]
 8021bea:	ab06      	add	r3, sp, #24
 8021bec:	aa08      	add	r2, sp, #32
 8021bee:	a90c      	add	r1, sp, #48	@ 0x30
 8021bf0:	e911 0003 	ldmdb	r1, {r0, r1}
 8021bf4:	f7ff ff5f 	bl	8021ab6 <mg_span>
 8021bf8:	2800      	cmp	r0, #0
 8021bfa:	d0eb      	beq.n	8021bd4 <guess_content_type+0x38>
 8021bfc:	ab08      	add	r3, sp, #32
 8021bfe:	cb0c      	ldmia	r3, {r2, r3}
 8021c00:	a902      	add	r1, sp, #8
 8021c02:	c903      	ldmia	r1, {r0, r1}
 8021c04:	f7ff fd6a 	bl	80216dc <mg_strcmp>
 8021c08:	2800      	cmp	r0, #0
 8021c0a:	d1e3      	bne.n	8021bd4 <guess_content_type+0x38>
 8021c0c:	ab06      	add	r3, sp, #24
 8021c0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021c12:	e884 0003 	stmia.w	r4, {r0, r1}
 8021c16:	e01c      	b.n	8021c52 <guess_content_type+0xb6>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8021c18:	2500      	movs	r5, #0
 8021c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8021c58 <guess_content_type+0xbc>)
 8021c1c:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
 8021c20:	b19b      	cbz	r3, 8021c4a <guess_content_type+0xae>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8021c22:	4b0d      	ldr	r3, [pc, #52]	@ (8021c58 <guess_content_type+0xbc>)
 8021c24:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8021c28:	cb0c      	ldmia	r3, {r2, r3}
 8021c2a:	a902      	add	r1, sp, #8
 8021c2c:	c903      	ldmia	r1, {r0, r1}
 8021c2e:	f7ff fd55 	bl	80216dc <mg_strcmp>
 8021c32:	b108      	cbz	r0, 8021c38 <guess_content_type+0x9c>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8021c34:	3502      	adds	r5, #2
 8021c36:	e7f0      	b.n	8021c1a <guess_content_type+0x7e>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8021c38:	3501      	adds	r5, #1
 8021c3a:	4b07      	ldr	r3, [pc, #28]	@ (8021c58 <guess_content_type+0xbc>)
 8021c3c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8021c40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021c44:	e884 0003 	stmia.w	r4, {r0, r1}
 8021c48:	e003      	b.n	8021c52 <guess_content_type+0xb6>
  return mg_str("text/plain; charset=utf-8");
 8021c4a:	4904      	ldr	r1, [pc, #16]	@ (8021c5c <guess_content_type+0xc0>)
 8021c4c:	4620      	mov	r0, r4
 8021c4e:	f7ff fce3 	bl	8021618 <mg_str_s>
}
 8021c52:	4620      	mov	r0, r4
 8021c54:	b00d      	add	sp, #52	@ 0x34
 8021c56:	bd30      	pop	{r4, r5, pc}
 8021c58:	08037df0 	.word	0x08037df0
 8021c5c:	0803692c 	.word	0x0803692c

08021c60 <getrange>:
static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8021c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021c62:	b087      	sub	sp, #28
 8021c64:	4604      	mov	r4, r0
 8021c66:	460e      	mov	r6, r1
 8021c68:	4617      	mov	r7, r2
  for (i = 0; i + 6 < s->len; i++) {
 8021c6a:	2500      	movs	r5, #0
 8021c6c:	1da8      	adds	r0, r5, #6
 8021c6e:	6863      	ldr	r3, [r4, #4]
 8021c70:	4298      	cmp	r0, r3
 8021c72:	d23c      	bcs.n	8021cee <getrange+0x8e>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 8021c74:	6821      	ldr	r1, [r4, #0]
 8021c76:	1b5b      	subs	r3, r3, r5
 8021c78:	1f9a      	subs	r2, r3, #6
 8021c7a:	4401      	add	r1, r0
 8021c7c:	a804      	add	r0, sp, #16
 8021c7e:	f7ff fcd7 	bl	8021630 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8021c82:	6820      	ldr	r0, [r4, #0]
 8021c84:	2206      	movs	r2, #6
 8021c86:	491b      	ldr	r1, [pc, #108]	@ (8021cf4 <getrange+0x94>)
 8021c88:	4428      	add	r0, r5
 8021c8a:	f007 fe65 	bl	8029958 <memcmp>
 8021c8e:	b108      	cbz	r0, 8021c94 <getrange+0x34>
  for (i = 0; i + 6 < s->len; i++) {
 8021c90:	3501      	adds	r5, #1
 8021c92:	e7eb      	b.n	8021c6c <getrange+0xc>
    if (mg_span(v, &k, &v, '-')) {
 8021c94:	ab04      	add	r3, sp, #16
 8021c96:	222d      	movs	r2, #45	@ 0x2d
 8021c98:	9200      	str	r2, [sp, #0]
 8021c9a:	aa02      	add	r2, sp, #8
 8021c9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021ca0:	f7ff ff09 	bl	8021ab6 <mg_span>
 8021ca4:	b1c0      	cbz	r0, 8021cd8 <getrange+0x78>
      if (mg_to_size_t(k, a)) numparsed++;
 8021ca6:	4632      	mov	r2, r6
 8021ca8:	ab02      	add	r3, sp, #8
 8021caa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021cae:	f7fe f97f 	bl	801ffb0 <mg_to_size_t>
 8021cb2:	b928      	cbnz	r0, 8021cc0 <getrange+0x60>
  size_t i, numparsed = 0;
 8021cb4:	2400      	movs	r4, #0
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8021cb6:	9b05      	ldr	r3, [sp, #20]
 8021cb8:	b923      	cbnz	r3, 8021cc4 <getrange+0x64>
}
 8021cba:	4620      	mov	r0, r4
 8021cbc:	b007      	add	sp, #28
 8021cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (mg_to_size_t(k, a)) numparsed++;
 8021cc0:	2401      	movs	r4, #1
 8021cc2:	e7f8      	b.n	8021cb6 <getrange+0x56>
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8021cc4:	463a      	mov	r2, r7
 8021cc6:	ab06      	add	r3, sp, #24
 8021cc8:	e913 0003 	ldmdb	r3, {r0, r1}
 8021ccc:	f7fe f970 	bl	801ffb0 <mg_to_size_t>
 8021cd0:	2800      	cmp	r0, #0
 8021cd2:	d0f2      	beq.n	8021cba <getrange+0x5a>
 8021cd4:	3401      	adds	r4, #1
 8021cd6:	e7f0      	b.n	8021cba <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 8021cd8:	4632      	mov	r2, r6
 8021cda:	ab06      	add	r3, sp, #24
 8021cdc:	e913 0003 	ldmdb	r3, {r0, r1}
 8021ce0:	f7fe f966 	bl	801ffb0 <mg_to_size_t>
 8021ce4:	b908      	cbnz	r0, 8021cea <getrange+0x8a>
  size_t i, numparsed = 0;
 8021ce6:	2400      	movs	r4, #0
 8021ce8:	e7e7      	b.n	8021cba <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 8021cea:	2401      	movs	r4, #1
    break;
 8021cec:	e7e5      	b.n	8021cba <getrange+0x5a>
  size_t i, numparsed = 0;
 8021cee:	2400      	movs	r4, #0
 8021cf0:	e7e3      	b.n	8021cba <getrange+0x5a>
 8021cf2:	bf00      	nop
 8021cf4:	08036948 	.word	0x08036948

08021cf8 <mg_http_serve_file>:
                        const struct mg_http_serve_opts *opts) {
 8021cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cfc:	b0e7      	sub	sp, #412	@ 0x19c
 8021cfe:	4607      	mov	r7, r0
 8021d00:	4688      	mov	r8, r1
 8021d02:	4614      	mov	r4, r2
 8021d04:	461d      	mov	r5, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8021d06:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8021d0a:	f1b9 0f00 	cmp.w	r9, #0
 8021d0e:	d036      	beq.n	8021d7e <mg_http_serve_file+0x86>
  size_t size = 0;
 8021d10:	2300      	movs	r3, #0
 8021d12:	932d      	str	r3, [sp, #180]	@ 0xb4
  time_t mtime = 0;
 8021d14:	2200      	movs	r2, #0
 8021d16:	2300      	movs	r3, #0
 8021d18:	e9cd 232a 	strd	r2, r3, [sp, #168]	@ 0xa8
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8021d1c:	ae5e      	add	r6, sp, #376	@ 0x178
 8021d1e:	4621      	mov	r1, r4
 8021d20:	4630      	mov	r0, r6
 8021d22:	f7ff fc79 	bl	8021618 <mg_str_s>
 8021d26:	68eb      	ldr	r3, [r5, #12]
 8021d28:	e896 0006 	ldmia.w	r6, {r1, r2}
 8021d2c:	a828      	add	r0, sp, #160	@ 0xa0
 8021d2e:	f7ff ff35 	bl	8021b9c <guess_content_type>
  if (path != NULL) {
 8021d32:	2c00      	cmp	r4, #0
 8021d34:	d053      	beq.n	8021dde <mg_http_serve_file+0xe6>
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8021d36:	4995      	ldr	r1, [pc, #596]	@ (8021f8c <mg_http_serve_file+0x294>)
 8021d38:	4640      	mov	r0, r8
 8021d3a:	f7fe f9b7 	bl	80200ac <mg_http_get_header>
    if (ae != NULL) {
 8021d3e:	4606      	mov	r6, r0
 8021d40:	2800      	cmp	r0, #0
 8021d42:	d042      	beq.n	8021dca <mg_http_serve_file+0xd2>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 8021d44:	6802      	ldr	r2, [r0, #0]
 8021d46:	6841      	ldr	r1, [r0, #4]
 8021d48:	4891      	ldr	r0, [pc, #580]	@ (8021f90 <mg_http_serve_file+0x298>)
 8021d4a:	f7ff fc2b 	bl	80215a4 <mg_mprintf>
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 8021d4e:	4683      	mov	fp, r0
 8021d50:	b1d8      	cbz	r0, 8021d8a <mg_http_serve_file+0x92>
 8021d52:	4990      	ldr	r1, [pc, #576]	@ (8021f94 <mg_http_serve_file+0x29c>)
 8021d54:	f007 ff14 	bl	8029b80 <strstr>
 8021d58:	4606      	mov	r6, r0
 8021d5a:	b1d0      	cbz	r0, 8021d92 <mg_http_serve_file+0x9a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8021d5c:	4623      	mov	r3, r4
 8021d5e:	4a8e      	ldr	r2, [pc, #568]	@ (8021f98 <mg_http_serve_file+0x2a0>)
 8021d60:	2180      	movs	r1, #128	@ 0x80
 8021d62:	a82e      	add	r0, sp, #184	@ 0xb8
 8021d64:	f7fe fe78 	bl	8020a58 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 8021d68:	2201      	movs	r2, #1
 8021d6a:	a92e      	add	r1, sp, #184	@ 0xb8
 8021d6c:	4648      	mov	r0, r9
 8021d6e:	f7fe f8e4 	bl	801ff3a <mg_fs_open>
        if (fd != NULL) gzip = true, path = tmp;
 8021d72:	4606      	mov	r6, r0
 8021d74:	b130      	cbz	r0, 8021d84 <mg_http_serve_file+0x8c>
 8021d76:	f04f 0a01 	mov.w	sl, #1
 8021d7a:	ac2e      	add	r4, sp, #184	@ 0xb8
 8021d7c:	e00b      	b.n	8021d96 <mg_http_serve_file+0x9e>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8021d7e:	f8df 9240 	ldr.w	r9, [pc, #576]	@ 8021fc0 <mg_http_serve_file+0x2c8>
 8021d82:	e7c5      	b.n	8021d10 <mg_http_serve_file+0x18>
  bool gzip = false;
 8021d84:	f04f 0a00 	mov.w	sl, #0
 8021d88:	e005      	b.n	8021d96 <mg_http_serve_file+0x9e>
  struct mg_fd *fd = NULL;
 8021d8a:	4606      	mov	r6, r0
  bool gzip = false;
 8021d8c:	f04f 0a00 	mov.w	sl, #0
 8021d90:	e001      	b.n	8021d96 <mg_http_serve_file+0x9e>
 8021d92:	f04f 0a00 	mov.w	sl, #0
      free(ae_);
 8021d96:	4658      	mov	r0, fp
 8021d98:	f7f7 f9f0 	bl	801917c <vPortFree>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8021d9c:	b1c6      	cbz	r6, 8021dd0 <mg_http_serve_file+0xd8>
  if (fd == NULL && opts->page404 != NULL) {
 8021d9e:	b316      	cbz	r6, 8021de6 <mg_http_serve_file+0xee>
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8021da0:	f8d9 3000 	ldr.w	r3, [r9]
 8021da4:	aa2a      	add	r2, sp, #168	@ 0xa8
 8021da6:	a92d      	add	r1, sp, #180	@ 0xb4
 8021da8:	4620      	mov	r0, r4
 8021daa:	4798      	blx	r3
 8021dac:	2800      	cmp	r0, #0
 8021dae:	d137      	bne.n	8021e20 <mg_http_serve_file+0x128>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8021db0:	4b7a      	ldr	r3, [pc, #488]	@ (8021f9c <mg_http_serve_file+0x2a4>)
 8021db2:	68aa      	ldr	r2, [r5, #8]
 8021db4:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8021db8:	4638      	mov	r0, r7
 8021dba:	f7ff fb4b 	bl	8021454 <mg_http_reply>
    mg_fs_close(fd);
 8021dbe:	4630      	mov	r0, r6
 8021dc0:	f7fe f8d4 	bl	801ff6c <mg_fs_close>
}
 8021dc4:	b067      	add	sp, #412	@ 0x19c
 8021dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool gzip = false;
 8021dca:	f04f 0a00 	mov.w	sl, #0
 8021dce:	e7e5      	b.n	8021d9c <mg_http_serve_file+0xa4>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8021dd0:	2201      	movs	r2, #1
 8021dd2:	4621      	mov	r1, r4
 8021dd4:	4648      	mov	r0, r9
 8021dd6:	f7fe f8b0 	bl	801ff3a <mg_fs_open>
 8021dda:	4606      	mov	r6, r0
 8021ddc:	e7df      	b.n	8021d9e <mg_http_serve_file+0xa6>
  struct mg_fd *fd = NULL;
 8021dde:	4626      	mov	r6, r4
  bool gzip = false;
 8021de0:	f04f 0a00 	mov.w	sl, #0
 8021de4:	e7db      	b.n	8021d9e <mg_http_serve_file+0xa6>
  if (fd == NULL && opts->page404 != NULL) {
 8021de6:	6929      	ldr	r1, [r5, #16]
 8021de8:	b1b9      	cbz	r1, 8021e1a <mg_http_serve_file+0x122>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8021dea:	2201      	movs	r2, #1
 8021dec:	4648      	mov	r0, r9
 8021dee:	f7fe f8a4 	bl	801ff3a <mg_fs_open>
 8021df2:	4606      	mov	r6, r0
    path = opts->page404;
 8021df4:	692c      	ldr	r4, [r5, #16]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8021df6:	f50d 7bc0 	add.w	fp, sp, #384	@ 0x180
 8021dfa:	4621      	mov	r1, r4
 8021dfc:	4658      	mov	r0, fp
 8021dfe:	f7ff fc0b 	bl	8021618 <mg_str_s>
 8021e02:	68eb      	ldr	r3, [r5, #12]
 8021e04:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8021e08:	a80a      	add	r0, sp, #40	@ 0x28
 8021e0a:	f7ff fec7 	bl	8021b9c <guess_content_type>
 8021e0e:	ab28      	add	r3, sp, #160	@ 0xa0
 8021e10:	aa0a      	add	r2, sp, #40	@ 0x28
 8021e12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021e16:	e883 0003 	stmia.w	r3, {r0, r1}
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8021e1a:	2e00      	cmp	r6, #0
 8021e1c:	d1c0      	bne.n	8021da0 <mg_http_serve_file+0xa8>
 8021e1e:	e7c7      	b.n	8021db0 <mg_http_serve_file+0xb8>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8021e20:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8021e24:	e9cd 2300 	strd	r2, r3, [sp]
 8021e28:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8021e2a:	2140      	movs	r1, #64	@ 0x40
 8021e2c:	a84e      	add	r0, sp, #312	@ 0x138
 8021e2e:	f7ff fb53 	bl	80214d8 <mg_http_etag>
 8021e32:	b190      	cbz	r0, 8021e5a <mg_http_serve_file+0x162>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8021e34:	495a      	ldr	r1, [pc, #360]	@ (8021fa0 <mg_http_serve_file+0x2a8>)
 8021e36:	4640      	mov	r0, r8
 8021e38:	f7fe f938 	bl	80200ac <mg_http_get_header>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8021e3c:	4604      	mov	r4, r0
 8021e3e:	b160      	cbz	r0, 8021e5a <mg_http_serve_file+0x162>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8021e40:	f50d 7bc4 	add.w	fp, sp, #392	@ 0x188
 8021e44:	a94e      	add	r1, sp, #312	@ 0x138
 8021e46:	4658      	mov	r0, fp
 8021e48:	f7ff fbe6 	bl	8021618 <mg_str_s>
 8021e4c:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8021e50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8021e54:	f7ff fc6c 	bl	8021730 <mg_strcasecmp>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8021e58:	b340      	cbz	r0, 8021eac <mg_http_serve_file+0x1b4>
    size_t r1 = 0, r2 = 0, cl = size;
 8021e5a:	f04f 0b00 	mov.w	fp, #0
 8021e5e:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 8021e62:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8021e66:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8021e68:	494e      	ldr	r1, [pc, #312]	@ (8021fa4 <mg_http_serve_file+0x2ac>)
 8021e6a:	4640      	mov	r0, r8
 8021e6c:	f7fe f91e 	bl	80200ac <mg_http_get_header>
    range[0] = '\0';
 8021e70:	f88d b03c 	strb.w	fp, [sp, #60]	@ 0x3c
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8021e74:	2800      	cmp	r0, #0
 8021e76:	d040      	beq.n	8021efa <mg_http_serve_file+0x202>
 8021e78:	aa0e      	add	r2, sp, #56	@ 0x38
 8021e7a:	a90d      	add	r1, sp, #52	@ 0x34
 8021e7c:	f7ff fef0 	bl	8021c60 <getrange>
 8021e80:	2800      	cmp	r0, #0
 8021e82:	dd70      	ble.n	8021f66 <mg_http_serve_file+0x26e>
      if (n == 1) r2 = cl - 1;
 8021e84:	2801      	cmp	r0, #1
 8021e86:	d01c      	beq.n	8021ec2 <mg_http_serve_file+0x1ca>
      if (r1 > r2 || r2 >= cl) {
 8021e88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021e8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021e8c:	429a      	cmp	r2, r3
 8021e8e:	d801      	bhi.n	8021e94 <mg_http_serve_file+0x19c>
 8021e90:	42a3      	cmp	r3, r4
 8021e92:	d319      	bcc.n	8021ec8 <mg_http_serve_file+0x1d0>
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8021e94:	2400      	movs	r4, #0
 8021e96:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8021e98:	9300      	str	r3, [sp, #0]
 8021e9a:	9401      	str	r4, [sp, #4]
 8021e9c:	4a42      	ldr	r2, [pc, #264]	@ (8021fa8 <mg_http_serve_file+0x2b0>)
 8021e9e:	2164      	movs	r1, #100	@ 0x64
 8021ea0:	a80f      	add	r0, sp, #60	@ 0x3c
 8021ea2:	f7fe fdd9 	bl	8020a58 <mg_snprintf>
        status = 416;
 8021ea6:	f44f 79d0 	mov.w	r9, #416	@ 0x1a0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8021eaa:	e028      	b.n	8021efe <mg_http_serve_file+0x206>
    mg_fs_close(fd);
 8021eac:	4630      	mov	r0, r6
 8021eae:	f7fe f85d 	bl	801ff6c <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8021eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8021fac <mg_http_serve_file+0x2b4>)
 8021eb4:	68aa      	ldr	r2, [r5, #8]
 8021eb6:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8021eba:	4638      	mov	r0, r7
 8021ebc:	f7ff faca 	bl	8021454 <mg_http_reply>
 8021ec0:	e780      	b.n	8021dc4 <mg_http_serve_file+0xcc>
      if (n == 1) r2 = cl - 1;
 8021ec2:	1e63      	subs	r3, r4, #1
 8021ec4:	930e      	str	r3, [sp, #56]	@ 0x38
 8021ec6:	e7df      	b.n	8021e88 <mg_http_serve_file+0x190>
        cl = r2 - r1 + 1;
 8021ec8:	1a9b      	subs	r3, r3, r2
 8021eca:	1c5c      	adds	r4, r3, #1
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8021ecc:	1911      	adds	r1, r2, r4
 8021ece:	3901      	subs	r1, #1
        mg_snprintf(range, sizeof(range),
 8021ed0:	2300      	movs	r3, #0
 8021ed2:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8021ed4:	9004      	str	r0, [sp, #16]
 8021ed6:	9305      	str	r3, [sp, #20]
 8021ed8:	9102      	str	r1, [sp, #8]
 8021eda:	9303      	str	r3, [sp, #12]
 8021edc:	9200      	str	r2, [sp, #0]
 8021ede:	9301      	str	r3, [sp, #4]
 8021ee0:	4a33      	ldr	r2, [pc, #204]	@ (8021fb0 <mg_http_serve_file+0x2b8>)
 8021ee2:	2164      	movs	r1, #100	@ 0x64
 8021ee4:	a80f      	add	r0, sp, #60	@ 0x3c
 8021ee6:	f7fe fdb7 	bl	8020a58 <mg_snprintf>
        fs->sk(fd->fd, r1);
 8021eea:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8021eee:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8021ef0:	6830      	ldr	r0, [r6, #0]
 8021ef2:	4798      	blx	r3
        status = 206;
 8021ef4:	f04f 09ce 	mov.w	r9, #206	@ 0xce
 8021ef8:	e001      	b.n	8021efe <mg_http_serve_file+0x206>
    int n, status = 200;
 8021efa:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
    mg_printf(c,
 8021efe:	4648      	mov	r0, r9
 8021f00:	f7fc fb8a 	bl	801e618 <mg_http_status_code_str>
 8021f04:	4603      	mov	r3, r0
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 8021f06:	9929      	ldr	r1, [sp, #164]	@ 0xa4
    mg_printf(c,
 8021f08:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8021f0a:	46a4      	mov	ip, r4
 8021f0c:	f1ba 0f00 	cmp.w	sl, #0
 8021f10:	d02c      	beq.n	8021f6c <mg_http_serve_file+0x274>
 8021f12:	f8df e0b0 	ldr.w	lr, [pc, #176]	@ 8021fc4 <mg_http_serve_file+0x2cc>
              range, opts->extra_headers ? opts->extra_headers : "");
 8021f16:	68aa      	ldr	r2, [r5, #8]
    mg_printf(c,
 8021f18:	b35a      	cbz	r2, 8021f72 <mg_http_serve_file+0x27a>
 8021f1a:	9208      	str	r2, [sp, #32]
 8021f1c:	aa0f      	add	r2, sp, #60	@ 0x3c
 8021f1e:	9207      	str	r2, [sp, #28]
 8021f20:	f8cd e018 	str.w	lr, [sp, #24]
 8021f24:	f8cd c010 	str.w	ip, [sp, #16]
 8021f28:	2200      	movs	r2, #0
 8021f2a:	9205      	str	r2, [sp, #20]
 8021f2c:	aa4e      	add	r2, sp, #312	@ 0x138
 8021f2e:	9202      	str	r2, [sp, #8]
 8021f30:	9001      	str	r0, [sp, #4]
 8021f32:	9100      	str	r1, [sp, #0]
 8021f34:	464a      	mov	r2, r9
 8021f36:	491f      	ldr	r1, [pc, #124]	@ (8021fb4 <mg_http_serve_file+0x2bc>)
 8021f38:	4638      	mov	r0, r7
 8021f3a:	f7ff fa65 	bl	8021408 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 8021f3e:	ad64      	add	r5, sp, #400	@ 0x190
 8021f40:	491d      	ldr	r1, [pc, #116]	@ (8021fb8 <mg_http_serve_file+0x2c0>)
 8021f42:	4628      	mov	r0, r5
 8021f44:	f7ff fb68 	bl	8021618 <mg_str_s>
 8021f48:	e895 000c 	ldmia.w	r5, {r2, r3}
 8021f4c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021f50:	f7ff fbee 	bl	8021730 <mg_strcasecmp>
 8021f54:	b178      	cbz	r0, 8021f76 <mg_http_serve_file+0x27e>
      c->pfn = static_cb;
 8021f56:	4b19      	ldr	r3, [pc, #100]	@ (8021fbc <mg_http_serve_file+0x2c4>)
 8021f58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      c->pfn_data = fd;
 8021f5c:	f8c7 6084 	str.w	r6, [r7, #132]	@ 0x84
      *clp = cl;
 8021f60:	f8c7 40a4 	str.w	r4, [r7, #164]	@ 0xa4
}
 8021f64:	e72e      	b.n	8021dc4 <mg_http_serve_file+0xcc>
    int n, status = 200;
 8021f66:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
 8021f6a:	e7c8      	b.n	8021efe <mg_http_serve_file+0x206>
    mg_printf(c,
 8021f6c:	f8df e03c 	ldr.w	lr, [pc, #60]	@ 8021fac <mg_http_serve_file+0x2b4>
 8021f70:	e7d1      	b.n	8021f16 <mg_http_serve_file+0x21e>
 8021f72:	4a0e      	ldr	r2, [pc, #56]	@ (8021fac <mg_http_serve_file+0x2b4>)
 8021f74:	e7d1      	b.n	8021f1a <mg_http_serve_file+0x222>
      c->is_resp = 0;
 8021f76:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8021f7a:	f36f 13c7 	bfc	r3, #7, #1
 8021f7e:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_fs_close(fd);
 8021f82:	4630      	mov	r0, r6
 8021f84:	f7fd fff2 	bl	801ff6c <mg_fs_close>
 8021f88:	e71c      	b.n	8021dc4 <mg_http_serve_file+0xcc>
 8021f8a:	bf00      	nop
 8021f8c:	0803696c 	.word	0x0803696c
 8021f90:	08036874 	.word	0x08036874
 8021f94:	08037d04 	.word	0x08037d04
 8021f98:	0803697c 	.word	0x0803697c
 8021f9c:	08036984 	.word	0x08036984
 8021fa0:	08036990 	.word	0x08036990
 8021fa4:	080369a0 	.word	0x080369a0
 8021fa8:	080369a8 	.word	0x080369a8
 8021fac:	080337f8 	.word	0x080337f8
 8021fb0:	080369c8 	.word	0x080369c8
 8021fb4:	080369f0 	.word	0x080369f0
 8021fb8:	08036a40 	.word	0x08036a40
 8021fbc:	08023fad 	.word	0x08023fad
 8021fc0:	200000ac 	.word	0x200000ac
 8021fc4:	08036950 	.word	0x08036950

08021fc8 <mg_str_to_num>:
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8021fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fcc:	b083      	sub	sp, #12
 8021fce:	ac02      	add	r4, sp, #8
 8021fd0:	e904 0003 	stmdb	r4, {r0, r1}
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8021fd4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8021fd6:	3901      	subs	r1, #1
 8021fd8:	2907      	cmp	r1, #7
 8021fda:	f200 8128 	bhi.w	802222e <mg_str_to_num+0x266>
 8021fde:	e8df f011 	tbh	[pc, r1, lsl #1]
 8021fe2:	0008      	.short	0x0008
 8021fe4:	01260020 	.word	0x01260020
 8021fe8:	0126000c 	.word	0x0126000c
 8021fec:	01260126 	.word	0x01260126
 8021ff0:	001c      	.short	0x001c
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8021ff2:	20ff      	movs	r0, #255	@ 0xff
 8021ff4:	f04f 0e00 	mov.w	lr, #0
 8021ff8:	e003      	b.n	8022002 <mg_str_to_num+0x3a>
 8021ffa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021ffe:	f04f 0e00 	mov.w	lr, #0
  if (base == 0 && str.len >= 2) {
 8022002:	b9e2      	cbnz	r2, 802203e <mg_str_to_num+0x76>
 8022004:	9901      	ldr	r1, [sp, #4]
 8022006:	2901      	cmp	r1, #1
 8022008:	d926      	bls.n	8022058 <mg_str_to_num+0x90>
    if (str.buf[i] == '0') {
 802200a:	9a00      	ldr	r2, [sp, #0]
 802200c:	7811      	ldrb	r1, [r2, #0]
 802200e:	2930      	cmp	r1, #48	@ 0x30
 8022010:	d00c      	beq.n	802202c <mg_str_to_num+0x64>
  size_t i = 0, ndigits = 0;
 8022012:	f04f 0c00 	mov.w	ip, #0
      base = 10;
 8022016:	220a      	movs	r2, #10
 8022018:	e013      	b.n	8022042 <mg_str_to_num+0x7a>
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 802201a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802201e:	4686      	mov	lr, r0
 8022020:	e7ef      	b.n	8022002 <mg_str_to_num+0x3a>
 8022022:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8022026:	f04f 0e00 	mov.w	lr, #0
 802202a:	e7ea      	b.n	8022002 <mg_str_to_num+0x3a>
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 802202c:	7852      	ldrb	r2, [r2, #1]
 802202e:	2a62      	cmp	r2, #98	@ 0x62
 8022030:	d015      	beq.n	802205e <mg_str_to_num+0x96>
 8022032:	2a78      	cmp	r2, #120	@ 0x78
 8022034:	d017      	beq.n	8022066 <mg_str_to_num+0x9e>
      i++;
 8022036:	f04f 0c01 	mov.w	ip, #1
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 802203a:	220a      	movs	r2, #10
 802203c:	e001      	b.n	8022042 <mg_str_to_num+0x7a>
  size_t i = 0, ndigits = 0;
 802203e:	f04f 0c00 	mov.w	ip, #0
  switch (base) {
 8022042:	2a0a      	cmp	r2, #10
 8022044:	d044      	beq.n	80220d0 <mg_str_to_num+0x108>
 8022046:	2a10      	cmp	r2, #16
 8022048:	f000 80d4 	beq.w	80221f4 <mg_str_to_num+0x22c>
 802204c:	2a02      	cmp	r2, #2
 802204e:	d00e      	beq.n	802206e <mg_str_to_num+0xa6>
 8022050:	2000      	movs	r0, #0
}
 8022052:	b003      	add	sp, #12
 8022054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t i = 0, ndigits = 0;
 8022058:	f04f 0c00 	mov.w	ip, #0
 802205c:	e7f1      	b.n	8022042 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 802205e:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8022062:	4662      	mov	r2, ip
 8022064:	e7ed      	b.n	8022042 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 8022066:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 802206a:	2210      	movs	r2, #16
 802206c:	e7e9      	b.n	8022042 <mg_str_to_num+0x7a>
  switch (base) {
 802206e:	2200      	movs	r2, #0
 8022070:	4611      	mov	r1, r2
 8022072:	4614      	mov	r4, r2
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 8022074:	9d01      	ldr	r5, [sp, #4]
 8022076:	4565      	cmp	r5, ip
 8022078:	f240 80c0 	bls.w	80221fc <mg_str_to_num+0x234>
 802207c:	9d00      	ldr	r5, [sp, #0]
 802207e:	f815 600c 	ldrb.w	r6, [r5, ip]
 8022082:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 8022086:	b2ff      	uxtb	r7, r7
 8022088:	2f01      	cmp	r7, #1
 802208a:	f200 80b7 	bhi.w	80221fc <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 802208e:	3e30      	subs	r6, #48	@ 0x30
 8022090:	ea4f 78e6 	mov.w	r8, r6, asr #31
        if (result > max / 2) return false;  // Overflow
 8022094:	ea4f 0950 	mov.w	r9, r0, lsr #1
 8022098:	ea49 79ce 	orr.w	r9, r9, lr, lsl #31
 802209c:	ea4f 075e 	mov.w	r7, lr, lsr #1
 80220a0:	4591      	cmp	r9, r2
 80220a2:	418f      	sbcs	r7, r1
 80220a4:	f0c0 80c5 	bcc.w	8022232 <mg_str_to_num+0x26a>
        result *= 2;
 80220a8:	1892      	adds	r2, r2, r2
 80220aa:	4149      	adcs	r1, r1
        if (result > max - digit) return false;  // Overflow
 80220ac:	ebb0 0a06 	subs.w	sl, r0, r6
 80220b0:	eb6e 0708 	sbc.w	r7, lr, r8
 80220b4:	4592      	cmp	sl, r2
 80220b6:	418f      	sbcs	r7, r1
 80220b8:	f0c0 80bd 	bcc.w	8022236 <mg_str_to_num+0x26e>
        result += digit;
 80220bc:	18b2      	adds	r2, r6, r2
 80220be:	eb48 0101 	adc.w	r1, r8, r1
        i++, ndigits++;
 80220c2:	f10c 0c01 	add.w	ip, ip, #1
 80220c6:	3401      	adds	r4, #1
 80220c8:	e7d4      	b.n	8022074 <mg_str_to_num+0xac>
        if (result > max / 10) return false;  // Overflow
 80220ca:	f04f 0901 	mov.w	r9, #1
 80220ce:	e017      	b.n	8022100 <mg_str_to_num+0x138>
  switch (base) {
 80220d0:	2200      	movs	r2, #0
 80220d2:	4611      	mov	r1, r2
 80220d4:	4614      	mov	r4, r2
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 80220d6:	9d01      	ldr	r5, [sp, #4]
 80220d8:	4565      	cmp	r5, ip
 80220da:	f240 808f 	bls.w	80221fc <mg_str_to_num+0x234>
 80220de:	9d00      	ldr	r5, [sp, #0]
 80220e0:	f815 700c 	ldrb.w	r7, [r5, ip]
 80220e4:	2f2f      	cmp	r7, #47	@ 0x2f
 80220e6:	f240 8089 	bls.w	80221fc <mg_str_to_num+0x234>
 80220ea:	2f39      	cmp	r7, #57	@ 0x39
 80220ec:	f200 8086 	bhi.w	80221fc <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 80220f0:	3f30      	subs	r7, #48	@ 0x30
 80220f2:	ea4f 78e7 	mov.w	r8, r7, asr #31
        if (result > max / 10) return false;  // Overflow
 80220f6:	f04f 0900 	mov.w	r9, #0
 80220fa:	eb10 060e 	adds.w	r6, r0, lr
 80220fe:	d2e4      	bcs.n	80220ca <mg_str_to_num+0x102>
 8022100:	444e      	add	r6, r9
 8022102:	4d54      	ldr	r5, [pc, #336]	@ (8022254 <mg_str_to_num+0x28c>)
 8022104:	fba5 9b06 	umull	r9, fp, r5, r6
 8022108:	f02b 0903 	bic.w	r9, fp, #3
 802210c:	eb09 099b 	add.w	r9, r9, fp, lsr #2
 8022110:	eba6 0609 	sub.w	r6, r6, r9
 8022114:	1b86      	subs	r6, r0, r6
 8022116:	f16e 0b00 	sbc.w	fp, lr, #0
 802211a:	f04f 39cc 	mov.w	r9, #3435973836	@ 0xcccccccc
 802211e:	fb09 f906 	mul.w	r9, r9, r6
 8022122:	fb05 990b 	mla	r9, r5, fp, r9
 8022126:	fba6 6a05 	umull	r6, sl, r6, r5
 802212a:	44d1      	add	r9, sl
 802212c:	0876      	lsrs	r6, r6, #1
 802212e:	ea46 76c9 	orr.w	r6, r6, r9, lsl #31
 8022132:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8022136:	4296      	cmp	r6, r2
 8022138:	eb79 0901 	sbcs.w	r9, r9, r1
 802213c:	d37d      	bcc.n	802223a <mg_str_to_num+0x272>
        result *= 10;
 802213e:	ea4f 0981 	mov.w	r9, r1, lsl #2
 8022142:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
 8022146:	0096      	lsls	r6, r2, #2
 8022148:	18b2      	adds	r2, r6, r2
 802214a:	eb41 0909 	adc.w	r9, r1, r9
 802214e:	1892      	adds	r2, r2, r2
 8022150:	eb49 0909 	adc.w	r9, r9, r9
        if (result > max - digit) return false;  // Overflow
 8022154:	ebb0 0a07 	subs.w	sl, r0, r7
 8022158:	eb6e 0108 	sbc.w	r1, lr, r8
 802215c:	4592      	cmp	sl, r2
 802215e:	eb71 0109 	sbcs.w	r1, r1, r9
 8022162:	d36c      	bcc.n	802223e <mg_str_to_num+0x276>
        result += digit;
 8022164:	18ba      	adds	r2, r7, r2
 8022166:	eb48 0109 	adc.w	r1, r8, r9
        i++, ndigits++;
 802216a:	f10c 0c01 	add.w	ip, ip, #1
 802216e:	3401      	adds	r4, #1
 8022170:	e7b1      	b.n	80220d6 <mg_str_to_num+0x10e>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8022172:	f1a6 0741 	sub.w	r7, r6, #65	@ 0x41
 8022176:	b2ff      	uxtb	r7, r7
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8022178:	2f05      	cmp	r7, #5
 802217a:	d832      	bhi.n	80221e2 <mg_str_to_num+0x21a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 802217c:	3e37      	subs	r6, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 802217e:	46b0      	mov	r8, r6
 8022180:	17f6      	asrs	r6, r6, #31
        if (digit == (uint64_t) ~0) break;
 8022182:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8022186:	bf08      	it	eq
 8022188:	f1b8 3fff 	cmpeq.w	r8, #4294967295	@ 0xffffffff
 802218c:	d036      	beq.n	80221fc <mg_str_to_num+0x234>
        if (result > max / 16) return false;  // Overflow
 802218e:	ea4f 1910 	mov.w	r9, r0, lsr #4
 8022192:	ea49 790e 	orr.w	r9, r9, lr, lsl #28
 8022196:	ea4f 171e 	mov.w	r7, lr, lsr #4
 802219a:	4591      	cmp	r9, r2
 802219c:	418f      	sbcs	r7, r1
 802219e:	d350      	bcc.n	8022242 <mg_str_to_num+0x27a>
        result *= 16;
 80221a0:	0109      	lsls	r1, r1, #4
 80221a2:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80221a6:	0112      	lsls	r2, r2, #4
        if (result > max - digit) return false;  // Overflow
 80221a8:	ebb0 0908 	subs.w	r9, r0, r8
 80221ac:	eb6e 0706 	sbc.w	r7, lr, r6
 80221b0:	4591      	cmp	r9, r2
 80221b2:	418f      	sbcs	r7, r1
 80221b4:	d347      	bcc.n	8022246 <mg_str_to_num+0x27e>
        result += digit;
 80221b6:	eb18 0202 	adds.w	r2, r8, r2
 80221ba:	eb46 0101 	adc.w	r1, r6, r1
        i++, ndigits++;
 80221be:	f10c 0c01 	add.w	ip, ip, #1
 80221c2:	3401      	adds	r4, #1
      while (i < str.len) {
 80221c4:	9d01      	ldr	r5, [sp, #4]
 80221c6:	4565      	cmp	r5, ip
 80221c8:	d918      	bls.n	80221fc <mg_str_to_num+0x234>
        char c = str.buf[i];
 80221ca:	9d00      	ldr	r5, [sp, #0]
 80221cc:	f815 600c 	ldrb.w	r6, [r5, ip]
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 80221d0:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 80221d4:	b2ff      	uxtb	r7, r7
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80221d6:	2f09      	cmp	r7, #9
 80221d8:	d8cb      	bhi.n	8022172 <mg_str_to_num+0x1aa>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 80221da:	3e30      	subs	r6, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80221dc:	46b0      	mov	r8, r6
 80221de:	17f6      	asrs	r6, r6, #31
 80221e0:	e7cf      	b.n	8022182 <mg_str_to_num+0x1ba>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80221e2:	f1a6 0761 	sub.w	r7, r6, #97	@ 0x61
 80221e6:	b2ff      	uxtb	r7, r7
                                                  : (uint64_t) ~0;
 80221e8:	2f05      	cmp	r7, #5
 80221ea:	d807      	bhi.n	80221fc <mg_str_to_num+0x234>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80221ec:	3e57      	subs	r6, #87	@ 0x57
                                                  : (uint64_t) ~0;
 80221ee:	46b0      	mov	r8, r6
 80221f0:	17f6      	asrs	r6, r6, #31
 80221f2:	e7c6      	b.n	8022182 <mg_str_to_num+0x1ba>
  switch (base) {
 80221f4:	2200      	movs	r2, #0
 80221f6:	4611      	mov	r1, r2
 80221f8:	4614      	mov	r4, r2
 80221fa:	e7e3      	b.n	80221c4 <mg_str_to_num+0x1fc>
  if (ndigits == 0) return false;
 80221fc:	b32c      	cbz	r4, 802224a <mg_str_to_num+0x282>
  if (i != str.len) return false;
 80221fe:	9801      	ldr	r0, [sp, #4]
 8022200:	4560      	cmp	r0, ip
 8022202:	d124      	bne.n	802224e <mg_str_to_num+0x286>
  if (val_len == 1) {
 8022204:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8022206:	2801      	cmp	r0, #1
 8022208:	d009      	beq.n	802221e <mg_str_to_num+0x256>
  } else if (val_len == 2) {
 802220a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802220c:	2802      	cmp	r0, #2
 802220e:	d008      	beq.n	8022222 <mg_str_to_num+0x25a>
  } else if (val_len == 4) {
 8022210:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8022212:	2804      	cmp	r0, #4
 8022214:	d008      	beq.n	8022228 <mg_str_to_num+0x260>
    *((uint64_t *) val) = (uint64_t) result;
 8022216:	601a      	str	r2, [r3, #0]
 8022218:	6059      	str	r1, [r3, #4]
  return true;
 802221a:	2001      	movs	r0, #1
 802221c:	e719      	b.n	8022052 <mg_str_to_num+0x8a>
    *((uint8_t *) val) = (uint8_t) result;
 802221e:	701a      	strb	r2, [r3, #0]
 8022220:	e717      	b.n	8022052 <mg_str_to_num+0x8a>
    *((uint16_t *) val) = (uint16_t) result;
 8022222:	801a      	strh	r2, [r3, #0]
  return true;
 8022224:	2001      	movs	r0, #1
 8022226:	e714      	b.n	8022052 <mg_str_to_num+0x8a>
    *((uint32_t *) val) = (uint32_t) result;
 8022228:	601a      	str	r2, [r3, #0]
  return true;
 802222a:	2001      	movs	r0, #1
 802222c:	e711      	b.n	8022052 <mg_str_to_num+0x8a>
  switch (base) {
 802222e:	2000      	movs	r0, #0
 8022230:	e70f      	b.n	8022052 <mg_str_to_num+0x8a>
        if (result > max / 2) return false;  // Overflow
 8022232:	2000      	movs	r0, #0
 8022234:	e70d      	b.n	8022052 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8022236:	2000      	movs	r0, #0
 8022238:	e70b      	b.n	8022052 <mg_str_to_num+0x8a>
        if (result > max / 10) return false;  // Overflow
 802223a:	2000      	movs	r0, #0
 802223c:	e709      	b.n	8022052 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 802223e:	2000      	movs	r0, #0
 8022240:	e707      	b.n	8022052 <mg_str_to_num+0x8a>
        if (result > max / 16) return false;  // Overflow
 8022242:	2000      	movs	r0, #0
 8022244:	e705      	b.n	8022052 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8022246:	2000      	movs	r0, #0
 8022248:	e703      	b.n	8022052 <mg_str_to_num+0x8a>
  if (ndigits == 0) return false;
 802224a:	2000      	movs	r0, #0
 802224c:	e701      	b.n	8022052 <mg_str_to_num+0x8a>
  if (i != str.len) return false;
 802224e:	2000      	movs	r0, #0
 8022250:	e6ff      	b.n	8022052 <mg_str_to_num+0x8a>
 8022252:	bf00      	nop
 8022254:	cccccccd 	.word	0xcccccccd

08022258 <mg_url_decode>:
                  int is_form_url_encoded) {
 8022258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802225c:	b087      	sub	sp, #28
 802225e:	4606      	mov	r6, r0
 8022260:	460f      	mov	r7, r1
 8022262:	4693      	mov	fp, r2
 8022264:	4699      	mov	r9, r3
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8022266:	2400      	movs	r4, #0
 8022268:	4623      	mov	r3, r4
 802226a:	e027      	b.n	80222bc <mg_url_decode+0x64>
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 802226c:	f103 0802 	add.w	r8, r3, #2
 8022270:	45b8      	cmp	r8, r7
 8022272:	d241      	bcs.n	80222f8 <mg_url_decode+0xa0>
 8022274:	3301      	adds	r3, #1
 8022276:	18f2      	adds	r2, r6, r3
 8022278:	9203      	str	r2, [sp, #12]
 802227a:	5cf0      	ldrb	r0, [r6, r3]
 802227c:	f7fc f8c8 	bl	801e410 <isx>
 8022280:	2800      	cmp	r0, #0
 8022282:	d03c      	beq.n	80222fe <mg_url_decode+0xa6>
 8022284:	f816 0008 	ldrb.w	r0, [r6, r8]
 8022288:	f7fc f8c2 	bl	801e410 <isx>
 802228c:	2800      	cmp	r0, #0
 802228e:	d039      	beq.n	8022304 <mg_url_decode+0xac>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 8022290:	f10d 0a10 	add.w	sl, sp, #16
 8022294:	2202      	movs	r2, #2
 8022296:	9903      	ldr	r1, [sp, #12]
 8022298:	4650      	mov	r0, sl
 802229a:	f7ff f9c9 	bl	8021630 <mg_str_n>
 802229e:	2301      	movs	r3, #1
 80222a0:	9300      	str	r3, [sp, #0]
 80222a2:	eb0b 0304 	add.w	r3, fp, r4
 80222a6:	2210      	movs	r2, #16
 80222a8:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80222ac:	f7ff fe8c 	bl	8021fc8 <mg_str_to_num>
        i += 2;
 80222b0:	4643      	mov	r3, r8
 80222b2:	e001      	b.n	80222b8 <mg_url_decode+0x60>
      dst[j] = src[i];
 80222b4:	f80b 2004 	strb.w	r2, [fp, r4]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 80222b8:	3301      	adds	r3, #1
 80222ba:	462c      	mov	r4, r5
 80222bc:	42bb      	cmp	r3, r7
 80222be:	d20e      	bcs.n	80222de <mg_url_decode+0x86>
 80222c0:	1c65      	adds	r5, r4, #1
 80222c2:	454d      	cmp	r5, r9
 80222c4:	d20b      	bcs.n	80222de <mg_url_decode+0x86>
    if (src[i] == '%') {
 80222c6:	5cf2      	ldrb	r2, [r6, r3]
 80222c8:	2a25      	cmp	r2, #37	@ 0x25
 80222ca:	d0cf      	beq.n	802226c <mg_url_decode+0x14>
    } else if (is_form_url_encoded && src[i] == '+') {
 80222cc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80222ce:	2900      	cmp	r1, #0
 80222d0:	d0f0      	beq.n	80222b4 <mg_url_decode+0x5c>
 80222d2:	2a2b      	cmp	r2, #43	@ 0x2b
 80222d4:	d1ee      	bne.n	80222b4 <mg_url_decode+0x5c>
      dst[j] = ' ';
 80222d6:	2220      	movs	r2, #32
 80222d8:	f80b 2004 	strb.w	r2, [fp, r4]
 80222dc:	e7ec      	b.n	80222b8 <mg_url_decode+0x60>
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 80222de:	454c      	cmp	r4, r9
 80222e0:	d202      	bcs.n	80222e8 <mg_url_decode+0x90>
 80222e2:	2200      	movs	r2, #0
 80222e4:	f80b 2004 	strb.w	r2, [fp, r4]
  return i >= src_len && j < dst_len ? (int) j : -1;
 80222e8:	42bb      	cmp	r3, r7
 80222ea:	d30e      	bcc.n	802230a <mg_url_decode+0xb2>
 80222ec:	454c      	cmp	r4, r9
 80222ee:	d20f      	bcs.n	8022310 <mg_url_decode+0xb8>
 80222f0:	4620      	mov	r0, r4
}
 80222f2:	b007      	add	sp, #28
 80222f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
 80222f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80222fc:	e7f9      	b.n	80222f2 <mg_url_decode+0x9a>
 80222fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022302:	e7f6      	b.n	80222f2 <mg_url_decode+0x9a>
 8022304:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022308:	e7f3      	b.n	80222f2 <mg_url_decode+0x9a>
  return i >= src_len && j < dst_len ? (int) j : -1;
 802230a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802230e:	e7f0      	b.n	80222f2 <mg_url_decode+0x9a>
 8022310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022314:	e7ed      	b.n	80222f2 <mg_url_decode+0x9a>

08022316 <mg_http_get_var>:
  if (dst != NULL && dst_len > 0) {
 8022316:	b352      	cbz	r2, 802236e <mg_http_get_var+0x58>
                    size_t dst_len) {
 8022318:	b570      	push	{r4, r5, r6, lr}
 802231a:	b086      	sub	sp, #24
 802231c:	4604      	mov	r4, r0
 802231e:	461d      	mov	r5, r3
 8022320:	4616      	mov	r6, r2
  if (dst != NULL && dst_len > 0) {
 8022322:	b10b      	cbz	r3, 8022328 <mg_http_get_var+0x12>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8022324:	2300      	movs	r3, #0
 8022326:	7013      	strb	r3, [r2, #0]
  if (dst == NULL || dst_len == 0) {
 8022328:	b325      	cbz	r5, 8022374 <mg_http_get_var+0x5e>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 802232a:	6823      	ldr	r3, [r4, #0]
 802232c:	b32b      	cbz	r3, 802237a <mg_http_get_var+0x64>
 802232e:	b339      	cbz	r1, 8022380 <mg_http_get_var+0x6a>
 8022330:	6863      	ldr	r3, [r4, #4]
 8022332:	b343      	cbz	r3, 8022386 <mg_http_get_var+0x70>
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8022334:	a804      	add	r0, sp, #16
 8022336:	f7ff f96f 	bl	8021618 <mg_str_s>
 802233a:	9b05      	ldr	r3, [sp, #20]
 802233c:	9300      	str	r3, [sp, #0]
 802233e:	9b04      	ldr	r3, [sp, #16]
 8022340:	e894 0006 	ldmia.w	r4, {r1, r2}
 8022344:	a802      	add	r0, sp, #8
 8022346:	f7ff fbf3 	bl	8021b30 <mg_http_var>
    if (v.buf == NULL) {
 802234a:	9802      	ldr	r0, [sp, #8]
 802234c:	b158      	cbz	r0, 8022366 <mg_http_get_var+0x50>
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 802234e:	2301      	movs	r3, #1
 8022350:	9300      	str	r3, [sp, #0]
 8022352:	462b      	mov	r3, r5
 8022354:	4632      	mov	r2, r6
 8022356:	9903      	ldr	r1, [sp, #12]
 8022358:	f7ff ff7e 	bl	8022258 <mg_url_decode>
      if (len < 0) len = -3;  // Failed to decode
 802235c:	2800      	cmp	r0, #0
 802235e:	da04      	bge.n	802236a <mg_http_get_var+0x54>
 8022360:	f06f 0002 	mvn.w	r0, #2
 8022364:	e001      	b.n	802236a <mg_http_get_var+0x54>
      len = -4;  // Name does not exist
 8022366:	f06f 0003 	mvn.w	r0, #3
}
 802236a:	b006      	add	sp, #24
 802236c:	bd70      	pop	{r4, r5, r6, pc}
    len = -2;  // Bad destination
 802236e:	f06f 0001 	mvn.w	r0, #1
}
 8022372:	4770      	bx	lr
    len = -2;  // Bad destination
 8022374:	f06f 0001 	mvn.w	r0, #1
 8022378:	e7f7      	b.n	802236a <mg_http_get_var+0x54>
    len = -1;  // Bad source
 802237a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802237e:	e7f4      	b.n	802236a <mg_http_get_var+0x54>
 8022380:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022384:	e7f1      	b.n	802236a <mg_http_get_var+0x54>
 8022386:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  return len;
 802238a:	e7ee      	b.n	802236a <mg_http_get_var+0x54>

0802238c <listdir>:
                    const struct mg_http_serve_opts *opts, char *dir) {
 802238c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022390:	b0ae      	sub	sp, #184	@ 0xb8
 8022392:	4604      	mov	r4, r0
 8022394:	460d      	mov	r5, r1
 8022396:	4616      	mov	r6, r2
 8022398:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 802239a:	f8d2 8014 	ldr.w	r8, [r2, #20]
 802239e:	f1b8 0f00 	cmp.w	r8, #0
 80223a2:	d04f      	beq.n	8022444 <listdir+0xb8>
  struct printdirentrydata d = {c, hm, opts, dir};
 80223a4:	942a      	str	r4, [sp, #168]	@ 0xa8
 80223a6:	952b      	str	r5, [sp, #172]	@ 0xac
 80223a8:	962c      	str	r6, [sp, #176]	@ 0xb0
 80223aa:	972d      	str	r7, [sp, #180]	@ 0xb4
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 80223ac:	2300      	movs	r3, #0
 80223ae:	9300      	str	r3, [sp, #0]
 80223b0:	2380      	movs	r3, #128	@ 0x80
 80223b2:	aa07      	add	r2, sp, #28
 80223b4:	68e9      	ldr	r1, [r5, #12]
 80223b6:	68a8      	ldr	r0, [r5, #8]
 80223b8:	f7ff ff4e 	bl	8022258 <mg_url_decode>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 80223bc:	1e02      	subs	r2, r0, #0
 80223be:	dd44      	ble.n	802244a <listdir+0xbe>
 80223c0:	a907      	add	r1, sp, #28
 80223c2:	a805      	add	r0, sp, #20
 80223c4:	f7ff f934 	bl	8021630 <mg_str_n>
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 80223c8:	68b2      	ldr	r2, [r6, #8]
  mg_printf(c,
 80223ca:	2a00      	cmp	r2, #0
 80223cc:	d044      	beq.n	8022458 <listdir+0xcc>
 80223ce:	4923      	ldr	r1, [pc, #140]	@ (802245c <listdir+0xd0>)
 80223d0:	4620      	mov	r0, r4
 80223d2:	f7ff f819 	bl	8021408 <mg_printf>
  off = c->send.len;  // Start of body
 80223d6:	6d25      	ldr	r5, [r4, #80]	@ 0x50
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 80223d8:	9a06      	ldr	r2, [sp, #24]
  mg_printf(c,
 80223da:	9b05      	ldr	r3, [sp, #20]
 80223dc:	9303      	str	r3, [sp, #12]
 80223de:	9202      	str	r2, [sp, #8]
 80223e0:	491f      	ldr	r1, [pc, #124]	@ (8022460 <listdir+0xd4>)
 80223e2:	9101      	str	r1, [sp, #4]
 80223e4:	491f      	ldr	r1, [pc, #124]	@ (8022464 <listdir+0xd8>)
 80223e6:	9100      	str	r1, [sp, #0]
 80223e8:	491f      	ldr	r1, [pc, #124]	@ (8022468 <listdir+0xdc>)
 80223ea:	4620      	mov	r0, r4
 80223ec:	f7ff f80c 	bl	8021408 <mg_printf>
  mg_printf(c, "%s",
 80223f0:	4a1e      	ldr	r2, [pc, #120]	@ (802246c <listdir+0xe0>)
 80223f2:	491f      	ldr	r1, [pc, #124]	@ (8022470 <listdir+0xe4>)
 80223f4:	4620      	mov	r0, r4
 80223f6:	f7ff f807 	bl	8021408 <mg_printf>
  fs->ls(dir, printdirentry, &d);
 80223fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80223fe:	aa2a      	add	r2, sp, #168	@ 0xa8
 8022400:	491c      	ldr	r1, [pc, #112]	@ (8022474 <listdir+0xe8>)
 8022402:	4638      	mov	r0, r7
 8022404:	4798      	blx	r3
  mg_printf(c,
 8022406:	4a1c      	ldr	r2, [pc, #112]	@ (8022478 <listdir+0xec>)
 8022408:	491c      	ldr	r1, [pc, #112]	@ (802247c <listdir+0xf0>)
 802240a:	4620      	mov	r0, r4
 802240c:	f7fe fffc 	bl	8021408 <mg_printf>
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 8022410:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8022412:	1b5b      	subs	r3, r3, r5
 8022414:	4a1a      	ldr	r2, [pc, #104]	@ (8022480 <listdir+0xf4>)
 8022416:	210a      	movs	r1, #10
 8022418:	a827      	add	r0, sp, #156	@ 0x9c
 802241a:	f7fe fb1d 	bl	8020a58 <mg_snprintf>
 802241e:	4602      	mov	r2, r0
  if (n > sizeof(tmp)) n = 0;
 8022420:	280a      	cmp	r0, #10
 8022422:	d900      	bls.n	8022426 <listdir+0x9a>
 8022424:	2200      	movs	r2, #0
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 8022426:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8022428:	3d0c      	subs	r5, #12
 802242a:	a927      	add	r1, sp, #156	@ 0x9c
 802242c:	4428      	add	r0, r5
 802242e:	f008 fd63 	bl	802aef8 <memcpy>
  c->is_resp = 0;                          // Mark response end
 8022432:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8022436:	f36f 13c7 	bfc	r3, #7, #1
 802243a:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 802243e:	b02e      	add	sp, #184	@ 0xb8
 8022440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8022444:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8022488 <listdir+0xfc>
 8022448:	e7ac      	b.n	80223a4 <listdir+0x18>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 802244a:	ab05      	add	r3, sp, #20
 802244c:	3508      	adds	r5, #8
 802244e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8022452:	e883 0003 	stmia.w	r3, {r0, r1}
 8022456:	e7b7      	b.n	80223c8 <listdir+0x3c>
  mg_printf(c,
 8022458:	4a0a      	ldr	r2, [pc, #40]	@ (8022484 <listdir+0xf8>)
 802245a:	e7b8      	b.n	80223ce <listdir+0x42>
 802245c:	08036a48 	.word	0x08036a48
 8022460:	08036c28 	.word	0x08036c28
 8022464:	08036dec 	.word	0x08036dec
 8022468:	08036aa0 	.word	0x08036aa0
 802246c:	08036fb4 	.word	0x08036fb4
 8022470:	08037418 	.word	0x08037418
 8022474:	08023bbd 	.word	0x08023bbd
 8022478:	08034984 	.word	0x08034984
 802247c:	08037004 	.word	0x08037004
 8022480:	080376c8 	.word	0x080376c8
 8022484:	080337f8 	.word	0x080337f8
 8022488:	200000ac 	.word	0x200000ac

0802248c <skip_chunk>:
static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 802248c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022490:	b087      	sub	sp, #28
 8022492:	461f      	mov	r7, r3
  int i = 0, n = 0;
 8022494:	2300      	movs	r3, #0
 8022496:	9303      	str	r3, [sp, #12]
  if (len < 3) return 0;
 8022498:	2902      	cmp	r1, #2
 802249a:	dd42      	ble.n	8022522 <skip_chunk+0x96>
 802249c:	4606      	mov	r6, r0
 802249e:	460d      	mov	r5, r1
 80224a0:	4690      	mov	r8, r2
  int i = 0, n = 0;
 80224a2:	461c      	mov	r4, r3
  while (i < len && is_hex_digit(buf[i])) i++;
 80224a4:	42ac      	cmp	r4, r5
 80224a6:	da05      	bge.n	80224b4 <skip_chunk+0x28>
 80224a8:	5d30      	ldrb	r0, [r6, r4]
 80224aa:	f7fc fbdc 	bl	801ec66 <is_hex_digit>
 80224ae:	b108      	cbz	r0, 80224b4 <skip_chunk+0x28>
 80224b0:	3401      	adds	r4, #1
 80224b2:	e7f7      	b.n	80224a4 <skip_chunk+0x18>
  if (i == 0) return -1;                     // Error, no length specified
 80224b4:	2c00      	cmp	r4, #0
 80224b6:	d036      	beq.n	8022526 <skip_chunk+0x9a>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 80224b8:	2c08      	cmp	r4, #8
 80224ba:	dc37      	bgt.n	802252c <skip_chunk+0xa0>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 80224bc:	42ac      	cmp	r4, r5
 80224be:	da38      	bge.n	8022532 <skip_chunk+0xa6>
 80224c0:	4622      	mov	r2, r4
 80224c2:	5d33      	ldrb	r3, [r6, r4]
 80224c4:	2b0d      	cmp	r3, #13
 80224c6:	d137      	bne.n	8022538 <skip_chunk+0xac>
 80224c8:	1933      	adds	r3, r6, r4
 80224ca:	785b      	ldrb	r3, [r3, #1]
 80224cc:	2b0a      	cmp	r3, #10
 80224ce:	d136      	bne.n	802253e <skip_chunk+0xb2>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 80224d0:	f10d 0910 	add.w	r9, sp, #16
 80224d4:	4631      	mov	r1, r6
 80224d6:	4648      	mov	r0, r9
 80224d8:	f7ff f8aa 	bl	8021630 <mg_str_n>
 80224dc:	2304      	movs	r3, #4
 80224de:	9300      	str	r3, [sp, #0]
 80224e0:	ab03      	add	r3, sp, #12
 80224e2:	2210      	movs	r2, #16
 80224e4:	e899 0003 	ldmia.w	r9, {r0, r1}
 80224e8:	f7ff fd6e 	bl	8021fc8 <mg_str_to_num>
 80224ec:	b350      	cbz	r0, 8022544 <skip_chunk+0xb8>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 80224ee:	9b03      	ldr	r3, [sp, #12]
 80224f0:	2b00      	cmp	r3, #0
 80224f2:	db2a      	blt.n	802254a <skip_chunk+0xbe>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 80224f4:	1b2d      	subs	r5, r5, r4
 80224f6:	3d03      	subs	r5, #3
 80224f8:	42ab      	cmp	r3, r5
 80224fa:	da29      	bge.n	8022550 <skip_chunk+0xc4>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 80224fc:	4423      	add	r3, r4
 80224fe:	18f2      	adds	r2, r6, r3
 8022500:	7892      	ldrb	r2, [r2, #2]
 8022502:	2a0d      	cmp	r2, #13
 8022504:	d126      	bne.n	8022554 <skip_chunk+0xc8>
 8022506:	441e      	add	r6, r3
 8022508:	78f3      	ldrb	r3, [r6, #3]
 802250a:	2b0a      	cmp	r3, #10
 802250c:	d125      	bne.n	802255a <skip_chunk+0xce>
  *pl = i + 2, *dl = n;
 802250e:	3402      	adds	r4, #2
 8022510:	f8c8 4000 	str.w	r4, [r8]
 8022514:	9b03      	ldr	r3, [sp, #12]
 8022516:	603b      	str	r3, [r7, #0]
  return i + 2 + n + 2;
 8022518:	441c      	add	r4, r3
 802251a:	1ca0      	adds	r0, r4, #2
}
 802251c:	b007      	add	sp, #28
 802251e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (len < 3) return 0;
 8022522:	2000      	movs	r0, #0
 8022524:	e7fa      	b.n	802251c <skip_chunk+0x90>
  if (i == 0) return -1;                     // Error, no length specified
 8022526:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802252a:	e7f7      	b.n	802251c <skip_chunk+0x90>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 802252c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022530:	e7f4      	b.n	802251c <skip_chunk+0x90>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8022532:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022536:	e7f1      	b.n	802251c <skip_chunk+0x90>
 8022538:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802253c:	e7ee      	b.n	802251c <skip_chunk+0x90>
 802253e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022542:	e7eb      	b.n	802251c <skip_chunk+0x90>
    return -1;                    // Decode chunk length, overflow
 8022544:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022548:	e7e8      	b.n	802251c <skip_chunk+0x90>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 802254a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802254e:	e7e5      	b.n	802251c <skip_chunk+0x90>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8022550:	2000      	movs	r0, #0
 8022552:	e7e3      	b.n	802251c <skip_chunk+0x90>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8022554:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022558:	e7e0      	b.n	802251c <skip_chunk+0x90>
 802255a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802255e:	e7dd      	b.n	802251c <skip_chunk+0x90>

08022560 <mg_json_unescape>:
bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 8022560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022564:	b086      	sub	sp, #24
 8022566:	ac02      	add	r4, sp, #8
 8022568:	e884 0003 	stmia.w	r4, {r0, r1}
 802256c:	4617      	mov	r7, r2
 802256e:	461e      	mov	r6, r3
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8022570:	2400      	movs	r4, #0
 8022572:	4621      	mov	r1, r4
 8022574:	e01c      	b.n	80225b0 <mg_json_unescape+0x50>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 8022576:	f101 0805 	add.w	r8, r1, #5
 802257a:	45a8      	cmp	r8, r5
 802257c:	d221      	bcs.n	80225c2 <mg_json_unescape+0x62>
 802257e:	185a      	adds	r2, r3, r1
 8022580:	7852      	ldrb	r2, [r2, #1]
 8022582:	2a75      	cmp	r2, #117	@ 0x75
 8022584:	d11d      	bne.n	80225c2 <mg_json_unescape+0x62>
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 8022586:	3102      	adds	r1, #2
 8022588:	ad04      	add	r5, sp, #16
 802258a:	2204      	movs	r2, #4
 802258c:	4419      	add	r1, r3
 802258e:	4628      	mov	r0, r5
 8022590:	f7ff f84e 	bl	8021630 <mg_str_n>
 8022594:	2301      	movs	r3, #1
 8022596:	9300      	str	r3, [sp, #0]
 8022598:	193b      	adds	r3, r7, r4
 802259a:	2210      	movs	r2, #16
 802259c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80225a0:	f7ff fd12 	bl	8021fc8 <mg_str_to_num>
 80225a4:	b308      	cbz	r0, 80225ea <mg_json_unescape+0x8a>
      i += 5;
 80225a6:	4641      	mov	r1, r8
 80225a8:	e000      	b.n	80225ac <mg_json_unescape+0x4c>
      to[j] = s.buf[i];
 80225aa:	5538      	strb	r0, [r7, r4]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 80225ac:	3101      	adds	r1, #1
 80225ae:	3401      	adds	r4, #1
 80225b0:	9d03      	ldr	r5, [sp, #12]
 80225b2:	428d      	cmp	r5, r1
 80225b4:	d914      	bls.n	80225e0 <mg_json_unescape+0x80>
 80225b6:	42b4      	cmp	r4, r6
 80225b8:	d212      	bcs.n	80225e0 <mg_json_unescape+0x80>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 80225ba:	9b02      	ldr	r3, [sp, #8]
 80225bc:	5c58      	ldrb	r0, [r3, r1]
 80225be:	285c      	cmp	r0, #92	@ 0x5c
 80225c0:	d0d9      	beq.n	8022576 <mg_json_unescape+0x16>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 80225c2:	285c      	cmp	r0, #92	@ 0x5c
 80225c4:	d1f1      	bne.n	80225aa <mg_json_unescape+0x4a>
 80225c6:	f101 0801 	add.w	r8, r1, #1
 80225ca:	45a8      	cmp	r8, r5
 80225cc:	d2ed      	bcs.n	80225aa <mg_json_unescape+0x4a>
      char c = json_esc(s.buf[i + 1], 0);
 80225ce:	2100      	movs	r1, #0
 80225d0:	f813 0008 	ldrb.w	r0, [r3, r8]
 80225d4:	f7fc fb6c 	bl	801ecb0 <json_esc>
      if (c == 0) return false;
 80225d8:	b150      	cbz	r0, 80225f0 <mg_json_unescape+0x90>
      to[j] = c;
 80225da:	5538      	strb	r0, [r7, r4]
      i++;
 80225dc:	4641      	mov	r1, r8
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 80225de:	e7e5      	b.n	80225ac <mg_json_unescape+0x4c>
  if (j >= n) return false;
 80225e0:	42b4      	cmp	r4, r6
 80225e2:	d207      	bcs.n	80225f4 <mg_json_unescape+0x94>
  if (n > 0) to[j] = '\0';
 80225e4:	2300      	movs	r3, #0
 80225e6:	553b      	strb	r3, [r7, r4]
  return true;
 80225e8:	2001      	movs	r0, #1
}
 80225ea:	b006      	add	sp, #24
 80225ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (c == 0) return false;
 80225f0:	2000      	movs	r0, #0
 80225f2:	e7fa      	b.n	80225ea <mg_json_unescape+0x8a>
  if (j >= n) return false;
 80225f4:	2000      	movs	r0, #0
 80225f6:	e7f8      	b.n	80225ea <mg_json_unescape+0x8a>

080225f8 <mg_json_get_str>:
char *mg_json_get_str(struct mg_str json, const char *path) {
 80225f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80225fa:	b087      	sub	sp, #28
 80225fc:	46ec      	mov	ip, sp
 80225fe:	e88c 0003 	stmia.w	ip, {r0, r1}
  int len = 0, off = mg_json_get(json, path, &len);
 8022602:	2300      	movs	r3, #0
 8022604:	9303      	str	r3, [sp, #12]
 8022606:	ab03      	add	r3, sp, #12
 8022608:	e89c 0003 	ldmia.w	ip, {r0, r1}
 802260c:	f7fd fd7e 	bl	802010c <mg_json_get>
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 8022610:	1e04      	subs	r4, r0, #0
 8022612:	db25      	blt.n	8022660 <mg_json_get_str+0x68>
 8022614:	9903      	ldr	r1, [sp, #12]
 8022616:	2901      	cmp	r1, #1
 8022618:	dd24      	ble.n	8022664 <mg_json_get_str+0x6c>
 802261a:	9e00      	ldr	r6, [sp, #0]
 802261c:	5d33      	ldrb	r3, [r6, r4]
 802261e:	2b22      	cmp	r3, #34	@ 0x22
 8022620:	d003      	beq.n	802262a <mg_json_get_str+0x32>
  char *result = NULL;
 8022622:	2500      	movs	r5, #0
}
 8022624:	4628      	mov	r0, r5
 8022626:	b007      	add	sp, #28
 8022628:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 802262a:	2001      	movs	r0, #1
 802262c:	f7fd fbc7 	bl	801fdbe <mg_calloc>
 8022630:	4605      	mov	r5, r0
 8022632:	2800      	cmp	r0, #0
 8022634:	d0f6      	beq.n	8022624 <mg_json_get_str+0x2c>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 8022636:	1c61      	adds	r1, r4, #1
 8022638:	9f03      	ldr	r7, [sp, #12]
 802263a:	ac04      	add	r4, sp, #16
 802263c:	1eba      	subs	r2, r7, #2
 802263e:	4431      	add	r1, r6
 8022640:	4620      	mov	r0, r4
 8022642:	f7fe fff5 	bl	8021630 <mg_str_n>
 8022646:	463b      	mov	r3, r7
 8022648:	462a      	mov	r2, r5
 802264a:	e894 0003 	ldmia.w	r4, {r0, r1}
 802264e:	f7ff ff87 	bl	8022560 <mg_json_unescape>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8022652:	2800      	cmp	r0, #0
 8022654:	d1e6      	bne.n	8022624 <mg_json_get_str+0x2c>
      free(result);
 8022656:	4628      	mov	r0, r5
 8022658:	f7f6 fd90 	bl	801917c <vPortFree>
      result = NULL;
 802265c:	2500      	movs	r5, #0
 802265e:	e7e1      	b.n	8022624 <mg_json_get_str+0x2c>
  char *result = NULL;
 8022660:	2500      	movs	r5, #0
 8022662:	e7df      	b.n	8022624 <mg_json_get_str+0x2c>
 8022664:	2500      	movs	r5, #0
 8022666:	e7dd      	b.n	8022624 <mg_json_get_str+0x2c>

08022668 <mg_aton6>:
static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 8022668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802266c:	b08a      	sub	sp, #40	@ 0x28
 802266e:	ab02      	add	r3, sp, #8
 8022670:	e883 0003 	stmia.w	r3, {r0, r1}
 8022674:	4617      	mov	r7, r2
  addr->scope_id = 0;
 8022676:	2300      	movs	r3, #0
 8022678:	7493      	strb	r3, [r2, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 802267a:	2902      	cmp	r1, #2
 802267c:	d904      	bls.n	8022688 <mg_aton6+0x20>
 802267e:	460b      	mov	r3, r1
 8022680:	4602      	mov	r2, r0
 8022682:	7801      	ldrb	r1, [r0, #0]
 8022684:	295b      	cmp	r1, #91	@ 0x5b
 8022686:	d00f      	beq.n	80226a8 <mg_aton6+0x40>
  if (mg_v4mapped(str, addr)) return true;
 8022688:	463a      	mov	r2, r7
 802268a:	ab02      	add	r3, sp, #8
 802268c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8022690:	f7fe ffd1 	bl	8021636 <mg_v4mapped>
 8022694:	4680      	mov	r8, r0
 8022696:	2800      	cmp	r0, #0
 8022698:	f040 8087 	bne.w	80227aa <mg_aton6+0x142>
  size_t i, j = 0, n = 0, dc = 42;
 802269c:	f04f 092a 	mov.w	r9, #42	@ 0x2a
 80226a0:	2600      	movs	r6, #0
 80226a2:	4635      	mov	r5, r6
  for (i = 0; i < str.len; i++) {
 80226a4:	4634      	mov	r4, r6
 80226a6:	e020      	b.n	80226ea <mg_aton6+0x82>
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 80226a8:	3201      	adds	r2, #1
 80226aa:	9202      	str	r2, [sp, #8]
 80226ac:	3b02      	subs	r3, #2
 80226ae:	9303      	str	r3, [sp, #12]
 80226b0:	e7ea      	b.n	8022688 <mg_aton6+0x20>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 80226b2:	2300      	movs	r3, #0
 80226b4:	9305      	str	r3, [sp, #20]
      if (i > j + 3) return false;
 80226b6:	1ceb      	adds	r3, r5, #3
 80226b8:	42a3      	cmp	r3, r4
 80226ba:	d376      	bcc.n	80227aa <mg_aton6+0x142>
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 80226bc:	1b62      	subs	r2, r4, r5
 80226be:	f10d 0a18 	add.w	sl, sp, #24
 80226c2:	3201      	adds	r2, #1
 80226c4:	4429      	add	r1, r5
 80226c6:	4650      	mov	r0, sl
 80226c8:	f7fe ffb2 	bl	8021630 <mg_str_n>
 80226cc:	2304      	movs	r3, #4
 80226ce:	9300      	str	r3, [sp, #0]
 80226d0:	ab05      	add	r3, sp, #20
 80226d2:	2210      	movs	r2, #16
 80226d4:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80226d8:	f7ff fc76 	bl	8021fc8 <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 80226dc:	9b05      	ldr	r3, [sp, #20]
 80226de:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80226e2:	55ba      	strb	r2, [r7, r6]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 80226e4:	1c72      	adds	r2, r6, #1
 80226e6:	54bb      	strb	r3, [r7, r2]
  for (i = 0; i < str.len; i++) {
 80226e8:	3401      	adds	r4, #1
 80226ea:	9803      	ldr	r0, [sp, #12]
 80226ec:	42a0      	cmp	r0, r4
 80226ee:	d941      	bls.n	8022774 <mg_aton6+0x10c>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 80226f0:	9902      	ldr	r1, [sp, #8]
 80226f2:	5d0a      	ldrb	r2, [r1, r4]
 80226f4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80226f8:	b2db      	uxtb	r3, r3
 80226fa:	2b09      	cmp	r3, #9
 80226fc:	d9d9      	bls.n	80226b2 <mg_aton6+0x4a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 80226fe:	f1a2 0361 	sub.w	r3, r2, #97	@ 0x61
 8022702:	b2db      	uxtb	r3, r3
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8022704:	2b05      	cmp	r3, #5
 8022706:	d9d4      	bls.n	80226b2 <mg_aton6+0x4a>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 8022708:	f1a2 0341 	sub.w	r3, r2, #65	@ 0x41
 802270c:	b2db      	uxtb	r3, r3
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 802270e:	2b05      	cmp	r3, #5
 8022710:	d9cf      	bls.n	80226b2 <mg_aton6+0x4a>
    } else if (str.buf[i] == ':') {
 8022712:	2a3a      	cmp	r2, #58	@ 0x3a
 8022714:	d119      	bne.n	802274a <mg_aton6+0xe2>
      j = i + 1;
 8022716:	1c65      	adds	r5, r4, #1
      if (i > 0 && str.buf[i - 1] == ':') {
 8022718:	b12c      	cbz	r4, 8022726 <mg_aton6+0xbe>
 802271a:	190b      	adds	r3, r1, r4
 802271c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022720:	2b3a      	cmp	r3, #58	@ 0x3a
 8022722:	d007      	beq.n	8022734 <mg_aton6+0xcc>
        n += 2;
 8022724:	3602      	adds	r6, #2
      if (n > 14) return false;
 8022726:	2e0e      	cmp	r6, #14
 8022728:	d83f      	bhi.n	80227aa <mg_aton6+0x142>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 802272a:	1c73      	adds	r3, r6, #1
 802272c:	2200      	movs	r2, #0
 802272e:	54fa      	strb	r2, [r7, r3]
 8022730:	55ba      	strb	r2, [r7, r6]
 8022732:	e7d9      	b.n	80226e8 <mg_aton6+0x80>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 8022734:	2c01      	cmp	r4, #1
 8022736:	d906      	bls.n	8022746 <mg_aton6+0xde>
 8022738:	4421      	add	r1, r4
 802273a:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 802273e:	2b3a      	cmp	r3, #58	@ 0x3a
 8022740:	d033      	beq.n	80227aa <mg_aton6+0x142>
        dc = n;  // Double colon
 8022742:	46b1      	mov	r9, r6
 8022744:	e7ef      	b.n	8022726 <mg_aton6+0xbe>
 8022746:	46b1      	mov	r9, r6
 8022748:	e7ed      	b.n	8022726 <mg_aton6+0xbe>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 802274a:	2a25      	cmp	r2, #37	@ 0x25
 802274c:	d12d      	bne.n	80227aa <mg_aton6+0x142>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 802274e:	1c63      	adds	r3, r4, #1
 8022750:	1b02      	subs	r2, r0, r4
 8022752:	ac08      	add	r4, sp, #32
 8022754:	3a01      	subs	r2, #1
 8022756:	4419      	add	r1, r3
 8022758:	4620      	mov	r0, r4
 802275a:	f7fe ff69 	bl	8021630 <mg_str_n>
 802275e:	2301      	movs	r3, #1
 8022760:	9300      	str	r3, [sp, #0]
 8022762:	f107 0312 	add.w	r3, r7, #18
 8022766:	220a      	movs	r2, #10
 8022768:	e894 0003 	ldmia.w	r4, {r0, r1}
 802276c:	f7ff fc2c 	bl	8021fc8 <mg_str_to_num>
 8022770:	4680      	mov	r8, r0
 8022772:	e01a      	b.n	80227aa <mg_aton6+0x142>
  if (n < 14 && dc == 42) return false;
 8022774:	2e0d      	cmp	r6, #13
 8022776:	d814      	bhi.n	80227a2 <mg_aton6+0x13a>
 8022778:	f1b9 0f2a 	cmp.w	r9, #42	@ 0x2a
 802277c:	d015      	beq.n	80227aa <mg_aton6+0x142>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 802277e:	eba9 0006 	sub.w	r0, r9, r6
 8022782:	300e      	adds	r0, #14
 8022784:	eb07 0409 	add.w	r4, r7, r9
 8022788:	eba6 0209 	sub.w	r2, r6, r9
 802278c:	3202      	adds	r2, #2
 802278e:	4621      	mov	r1, r4
 8022790:	4438      	add	r0, r7
 8022792:	f007 f95b 	bl	8029a4c <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 8022796:	f1c6 020e 	rsb	r2, r6, #14
 802279a:	2100      	movs	r1, #0
 802279c:	4620      	mov	r0, r4
 802279e:	f007 f96f 	bl	8029a80 <memset>
  addr->is_ip6 = true;
 80227a2:	f04f 0801 	mov.w	r8, #1
 80227a6:	f887 8013 	strb.w	r8, [r7, #19]
}
 80227aa:	4640      	mov	r0, r8
 80227ac:	b00a      	add	sp, #40	@ 0x28
 80227ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080227b2 <mg_timer_init>:
                   unsigned flags, void (*fn)(void *), void *arg) {
 80227b2:	b410      	push	{r4}
  t->id = 0, t->period_ms = ms, t->expire = 0;
 80227b4:	2400      	movs	r4, #0
 80227b6:	600c      	str	r4, [r1, #0]
 80227b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80227bc:	2200      	movs	r2, #0
 80227be:	2300      	movs	r3, #0
 80227c0:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 80227c4:	9b01      	ldr	r3, [sp, #4]
 80227c6:	618b      	str	r3, [r1, #24]
 80227c8:	9b02      	ldr	r3, [sp, #8]
 80227ca:	61cb      	str	r3, [r1, #28]
 80227cc:	9b03      	ldr	r3, [sp, #12]
 80227ce:	620b      	str	r3, [r1, #32]
 80227d0:	6803      	ldr	r3, [r0, #0]
 80227d2:	624b      	str	r3, [r1, #36]	@ 0x24
  *head = t;
 80227d4:	6001      	str	r1, [r0, #0]
}
 80227d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80227da:	4770      	bx	lr

080227dc <mg_timer_add>:
                              unsigned flags, void (*fn)(void *), void *arg) {
 80227dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80227de:	b085      	sub	sp, #20
 80227e0:	4604      	mov	r4, r0
 80227e2:	4616      	mov	r6, r2
 80227e4:	461d      	mov	r5, r3
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 80227e6:	2128      	movs	r1, #40	@ 0x28
 80227e8:	2001      	movs	r0, #1
 80227ea:	f7fd fae8 	bl	801fdbe <mg_calloc>
  if (t != NULL) {
 80227ee:	4607      	mov	r7, r0
 80227f0:	b180      	cbz	r0, 8022814 <mg_timer_add+0x38>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 80227f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80227f4:	9302      	str	r3, [sp, #8]
 80227f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80227f8:	9301      	str	r3, [sp, #4]
 80227fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80227fc:	9300      	str	r3, [sp, #0]
 80227fe:	4632      	mov	r2, r6
 8022800:	462b      	mov	r3, r5
 8022802:	4601      	mov	r1, r0
 8022804:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8022808:	f7ff ffd3 	bl	80227b2 <mg_timer_init>
    t->id = mgr->timerid++;
 802280c:	6a23      	ldr	r3, [r4, #32]
 802280e:	1c5a      	adds	r2, r3, #1
 8022810:	6222      	str	r2, [r4, #32]
 8022812:	603b      	str	r3, [r7, #0]
}
 8022814:	4638      	mov	r0, r7
 8022816:	b005      	add	sp, #20
 8022818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802281a:	0000      	movs	r0, r0
 802281c:	0000      	movs	r0, r0
	...

08022820 <mg_timer_expired>:
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8022820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022824:	4698      	mov	r8, r3
 8022826:	9906      	ldr	r1, [sp, #24]
 8022828:	9c07      	ldr	r4, [sp, #28]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 802282a:	188e      	adds	r6, r1, r2
 802282c:	eb43 0504 	adc.w	r5, r3, r4
 8022830:	6847      	ldr	r7, [r0, #4]
 8022832:	6803      	ldr	r3, [r0, #0]
 8022834:	429e      	cmp	r6, r3
 8022836:	eb75 0707 	sbcs.w	r7, r5, r7
 802283a:	d203      	bcs.n	8022844 <mg_timer_expired+0x24>
 802283c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8022880 <mg_timer_expired+0x60>
 8022840:	ed80 7b00 	vstr	d7, [r0]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8022844:	6847      	ldr	r7, [r0, #4]
 8022846:	6803      	ldr	r3, [r0, #0]
 8022848:	431f      	orrs	r7, r3
 802284a:	d101      	bne.n	8022850 <mg_timer_expired+0x30>
 802284c:	6006      	str	r6, [r0, #0]
 802284e:	6045      	str	r5, [r0, #4]
  if (*t > now) return false;                    // Not expired yet, return
 8022850:	6807      	ldr	r7, [r0, #0]
 8022852:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8022856:	42b9      	cmp	r1, r7
 8022858:	eb74 0e0c 	sbcs.w	lr, r4, ip
 802285c:	d30e      	bcc.n	802287c <mg_timer_expired+0x5c>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 802285e:	1bc9      	subs	r1, r1, r7
 8022860:	eb64 040c 	sbc.w	r4, r4, ip
 8022864:	428a      	cmp	r2, r1
 8022866:	eb78 0404 	sbcs.w	r4, r8, r4
 802286a:	d302      	bcc.n	8022872 <mg_timer_expired+0x52>
 802286c:	18be      	adds	r6, r7, r2
 802286e:	eb4c 0508 	adc.w	r5, ip, r8
 8022872:	6006      	str	r6, [r0, #0]
 8022874:	6045      	str	r5, [r0, #4]
  return true;                                   // Expired, return true
 8022876:	2001      	movs	r0, #1
}
 8022878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (*t > now) return false;                    // Not expired yet, return
 802287c:	2000      	movs	r0, #0
 802287e:	e7fb      	b.n	8022878 <mg_timer_expired+0x58>
	...

08022888 <mg_timer_poll>:
void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8022888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802288c:	b082      	sub	sp, #8
 802288e:	4617      	mov	r7, r2
 8022890:	461e      	mov	r6, r3
  for (t = *head; t != NULL; t = tmp) {
 8022892:	6804      	ldr	r4, [r0, #0]
 8022894:	e019      	b.n	80228ca <mg_timer_poll+0x42>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8022896:	2500      	movs	r5, #0
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8022898:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 802289c:	9700      	str	r7, [sp, #0]
 802289e:	9601      	str	r6, [sp, #4]
 80228a0:	f104 0010 	add.w	r0, r4, #16
 80228a4:	f7ff ffbc 	bl	8022820 <mg_timer_expired>
    tmp = t->next;
 80228a8:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
    if (!once && !expired) continue;
 80228ac:	b905      	cbnz	r5, 80228b0 <mg_timer_poll+0x28>
 80228ae:	b158      	cbz	r0, 80228c8 <mg_timer_poll+0x40>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 80228b0:	69a3      	ldr	r3, [r4, #24]
 80228b2:	f003 0305 	and.w	r3, r3, #5
 80228b6:	2b04      	cmp	r3, #4
 80228b8:	d002      	beq.n	80228c0 <mg_timer_poll+0x38>
      t->fn(t->arg);
 80228ba:	69e3      	ldr	r3, [r4, #28]
 80228bc:	6a20      	ldr	r0, [r4, #32]
 80228be:	4798      	blx	r3
    t->flags |= MG_TIMER_CALLED;
 80228c0:	69a1      	ldr	r1, [r4, #24]
 80228c2:	f041 0104 	orr.w	r1, r1, #4
 80228c6:	61a1      	str	r1, [r4, #24]
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80228c8:	4644      	mov	r4, r8
  for (t = *head; t != NULL; t = tmp) {
 80228ca:	b164      	cbz	r4, 80228e6 <mg_timer_poll+0x5e>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80228cc:	6923      	ldr	r3, [r4, #16]
 80228ce:	6962      	ldr	r2, [r4, #20]
 80228d0:	4313      	orrs	r3, r2
 80228d2:	d1e0      	bne.n	8022896 <mg_timer_poll+0xe>
 80228d4:	69a3      	ldr	r3, [r4, #24]
 80228d6:	f003 0306 	and.w	r3, r3, #6
 80228da:	2b02      	cmp	r3, #2
 80228dc:	d001      	beq.n	80228e2 <mg_timer_poll+0x5a>
 80228de:	2500      	movs	r5, #0
 80228e0:	e7da      	b.n	8022898 <mg_timer_poll+0x10>
 80228e2:	2501      	movs	r5, #1
 80228e4:	e7d8      	b.n	8022898 <mg_timer_poll+0x10>
}
 80228e6:	b002      	add	sp, #8
 80228e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080228ec <mg_tls_recv>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 80228ec:	b118      	cbz	r0, 80228f6 <mg_tls_recv+0xa>
 80228ee:	b121      	cbz	r1, 80228fa <mg_tls_recv+0xe>
 80228f0:	b92a      	cbnz	r2, 80228fe <mg_tls_recv+0x12>
 80228f2:	2000      	movs	r0, #0
 80228f4:	4770      	bx	lr
 80228f6:	2000      	movs	r0, #0
 80228f8:	4770      	bx	lr
 80228fa:	2000      	movs	r0, #0
 80228fc:	4770      	bx	lr
 80228fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8022902:	4770      	bx	lr

08022904 <mg_tls_send>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8022904:	b118      	cbz	r0, 802290e <mg_tls_send+0xa>
 8022906:	b121      	cbz	r1, 8022912 <mg_tls_send+0xe>
 8022908:	b92a      	cbnz	r2, 8022916 <mg_tls_send+0x12>
 802290a:	2000      	movs	r0, #0
 802290c:	4770      	bx	lr
 802290e:	2000      	movs	r0, #0
 8022910:	4770      	bx	lr
 8022912:	2000      	movs	r0, #0
 8022914:	4770      	bx	lr
 8022916:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 802291a:	4770      	bx	lr

0802291c <mg_tls_pending>:
}
 802291c:	2000      	movs	r0, #0
 802291e:	4770      	bx	lr

08022920 <mg_url_is_ssl>:
int mg_url_is_ssl(const char *url) {
 8022920:	b510      	push	{r4, lr}
 8022922:	4604      	mov	r4, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8022924:	2204      	movs	r2, #4
 8022926:	4918      	ldr	r1, [pc, #96]	@ (8022988 <mg_url_is_ssl+0x68>)
 8022928:	f007 f8df 	bl	8029aea <strncmp>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 802292c:	b1f8      	cbz	r0, 802296e <mg_url_is_ssl+0x4e>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 802292e:	2206      	movs	r2, #6
 8022930:	4916      	ldr	r1, [pc, #88]	@ (802298c <mg_url_is_ssl+0x6c>)
 8022932:	4620      	mov	r0, r4
 8022934:	f007 f8d9 	bl	8029aea <strncmp>
 8022938:	b1d8      	cbz	r0, 8022972 <mg_url_is_ssl+0x52>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 802293a:	2206      	movs	r2, #6
 802293c:	4914      	ldr	r1, [pc, #80]	@ (8022990 <mg_url_is_ssl+0x70>)
 802293e:	4620      	mov	r0, r4
 8022940:	f007 f8d3 	bl	8029aea <strncmp>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8022944:	b1b8      	cbz	r0, 8022976 <mg_url_is_ssl+0x56>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8022946:	2204      	movs	r2, #4
 8022948:	4912      	ldr	r1, [pc, #72]	@ (8022994 <mg_url_is_ssl+0x74>)
 802294a:	4620      	mov	r0, r4
 802294c:	f007 f8cd 	bl	8029aea <strncmp>
 8022950:	b198      	cbz	r0, 802297a <mg_url_is_ssl+0x5a>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8022952:	2204      	movs	r2, #4
 8022954:	4910      	ldr	r1, [pc, #64]	@ (8022998 <mg_url_is_ssl+0x78>)
 8022956:	4620      	mov	r0, r4
 8022958:	f007 f8c7 	bl	8029aea <strncmp>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 802295c:	b178      	cbz	r0, 802297e <mg_url_is_ssl+0x5e>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 802295e:	2205      	movs	r2, #5
 8022960:	490e      	ldr	r1, [pc, #56]	@ (802299c <mg_url_is_ssl+0x7c>)
 8022962:	4620      	mov	r0, r4
 8022964:	f007 f8c1 	bl	8029aea <strncmp>
 8022968:	b958      	cbnz	r0, 8022982 <mg_url_is_ssl+0x62>
 802296a:	2001      	movs	r0, #1
 802296c:	e000      	b.n	8022970 <mg_url_is_ssl+0x50>
 802296e:	2001      	movs	r0, #1
}
 8022970:	bd10      	pop	{r4, pc}
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8022972:	2001      	movs	r0, #1
 8022974:	e7fc      	b.n	8022970 <mg_url_is_ssl+0x50>
 8022976:	2001      	movs	r0, #1
 8022978:	e7fa      	b.n	8022970 <mg_url_is_ssl+0x50>
 802297a:	2001      	movs	r0, #1
 802297c:	e7f8      	b.n	8022970 <mg_url_is_ssl+0x50>
 802297e:	2001      	movs	r0, #1
 8022980:	e7f6      	b.n	8022970 <mg_url_is_ssl+0x50>
 8022982:	2000      	movs	r0, #0
 8022984:	e7f4      	b.n	8022970 <mg_url_is_ssl+0x50>
 8022986:	bf00      	nop
 8022988:	08037078 	.word	0x08037078
 802298c:	08037080 	.word	0x08037080
 8022990:	08037088 	.word	0x08037088
 8022994:	08037090 	.word	0x08037090
 8022998:	08037098 	.word	0x08037098
 802299c:	080370a0 	.word	0x080370a0

080229a0 <mg_url_host>:
struct mg_str mg_url_host(const char *url) {
 80229a0:	b530      	push	{r4, r5, lr}
 80229a2:	b089      	sub	sp, #36	@ 0x24
 80229a4:	4604      	mov	r4, r0
 80229a6:	460d      	mov	r5, r1
  struct url u = urlparse(url);
 80229a8:	a801      	add	r0, sp, #4
 80229aa:	f7fd f93a 	bl	801fc22 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 80229ae:	9a05      	ldr	r2, [sp, #20]
             : u.uri ? u.uri - u.host
 80229b0:	b152      	cbz	r2, 80229c8 <mg_url_host+0x28>
  size_t n = u.port  ? u.port - u.host - 1
 80229b2:	9b04      	ldr	r3, [sp, #16]
 80229b4:	1ad2      	subs	r2, r2, r3
             : u.uri ? u.uri - u.host
 80229b6:	3a01      	subs	r2, #1
  struct mg_str s = mg_str_n(url + u.host, n);
 80229b8:	9904      	ldr	r1, [sp, #16]
 80229ba:	4429      	add	r1, r5
 80229bc:	4620      	mov	r0, r4
 80229be:	f7fe fe37 	bl	8021630 <mg_str_n>
}
 80229c2:	4620      	mov	r0, r4
 80229c4:	b009      	add	sp, #36	@ 0x24
 80229c6:	bd30      	pop	{r4, r5, pc}
             : u.uri ? u.uri - u.host
 80229c8:	9a06      	ldr	r2, [sp, #24]
                     : u.end - u.host;
 80229ca:	b112      	cbz	r2, 80229d2 <mg_url_host+0x32>
             : u.uri ? u.uri - u.host
 80229cc:	9b04      	ldr	r3, [sp, #16]
                     : u.end - u.host;
 80229ce:	1ad2      	subs	r2, r2, r3
 80229d0:	e7f2      	b.n	80229b8 <mg_url_host+0x18>
 80229d2:	9a07      	ldr	r2, [sp, #28]
 80229d4:	9b04      	ldr	r3, [sp, #16]
 80229d6:	1ad2      	subs	r2, r2, r3
 80229d8:	e7ee      	b.n	80229b8 <mg_url_host+0x18>
	...

080229dc <mg_url_port>:
unsigned short mg_url_port(const char *url) {
 80229dc:	b530      	push	{r4, r5, lr}
 80229de:	b089      	sub	sp, #36	@ 0x24
 80229e0:	4604      	mov	r4, r0
  struct url u = urlparse(url);
 80229e2:	4601      	mov	r1, r0
 80229e4:	a801      	add	r0, sp, #4
 80229e6:	f7fd f91c 	bl	801fc22 <urlparse>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 80229ea:	2205      	movs	r2, #5
 80229ec:	491d      	ldr	r1, [pc, #116]	@ (8022a64 <mg_url_port+0x88>)
 80229ee:	4620      	mov	r0, r4
 80229f0:	f007 f87b 	bl	8029aea <strncmp>
 80229f4:	b138      	cbz	r0, 8022a06 <mg_url_port+0x2a>
 80229f6:	2203      	movs	r2, #3
 80229f8:	491b      	ldr	r1, [pc, #108]	@ (8022a68 <mg_url_port+0x8c>)
 80229fa:	4620      	mov	r0, r4
 80229fc:	f007 f875 	bl	8029aea <strncmp>
 8022a00:	b188      	cbz	r0, 8022a26 <mg_url_port+0x4a>
  unsigned short port = 0;
 8022a02:	2500      	movs	r5, #0
 8022a04:	e000      	b.n	8022a08 <mg_url_port+0x2c>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8022a06:	2550      	movs	r5, #80	@ 0x50
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8022a08:	2204      	movs	r2, #4
 8022a0a:	4918      	ldr	r1, [pc, #96]	@ (8022a6c <mg_url_port+0x90>)
 8022a0c:	4620      	mov	r0, r4
 8022a0e:	f007 f86c 	bl	8029aea <strncmp>
 8022a12:	b150      	cbz	r0, 8022a2a <mg_url_port+0x4e>
 8022a14:	2206      	movs	r2, #6
 8022a16:	4916      	ldr	r1, [pc, #88]	@ (8022a70 <mg_url_port+0x94>)
 8022a18:	4620      	mov	r0, r4
 8022a1a:	f007 f866 	bl	8029aea <strncmp>
 8022a1e:	b930      	cbnz	r0, 8022a2e <mg_url_port+0x52>
    port = 443;
 8022a20:	f240 15bb 	movw	r5, #443	@ 0x1bb
 8022a24:	e003      	b.n	8022a2e <mg_url_port+0x52>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8022a26:	2550      	movs	r5, #80	@ 0x50
 8022a28:	e7ee      	b.n	8022a08 <mg_url_port+0x2c>
    port = 443;
 8022a2a:	f240 15bb 	movw	r5, #443	@ 0x1bb
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8022a2e:	2205      	movs	r2, #5
 8022a30:	4910      	ldr	r1, [pc, #64]	@ (8022a74 <mg_url_port+0x98>)
 8022a32:	4620      	mov	r0, r4
 8022a34:	f007 f859 	bl	8029aea <strncmp>
 8022a38:	b908      	cbnz	r0, 8022a3e <mg_url_port+0x62>
 8022a3a:	f240 755b 	movw	r5, #1883	@ 0x75b
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8022a3e:	2206      	movs	r2, #6
 8022a40:	490d      	ldr	r1, [pc, #52]	@ (8022a78 <mg_url_port+0x9c>)
 8022a42:	4620      	mov	r0, r4
 8022a44:	f007 f851 	bl	8029aea <strncmp>
 8022a48:	b908      	cbnz	r0, 8022a4e <mg_url_port+0x72>
 8022a4a:	f242 25b3 	movw	r5, #8883	@ 0x22b3
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8022a4e:	9805      	ldr	r0, [sp, #20]
 8022a50:	b910      	cbnz	r0, 8022a58 <mg_url_port+0x7c>
}
 8022a52:	4628      	mov	r0, r5
 8022a54:	b009      	add	sp, #36	@ 0x24
 8022a56:	bd30      	pop	{r4, r5, pc}
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8022a58:	4420      	add	r0, r4
 8022a5a:	f004 fadd 	bl	8027018 <atoi>
 8022a5e:	b285      	uxth	r5, r0
 8022a60:	e7f7      	b.n	8022a52 <mg_url_port+0x76>
 8022a62:	bf00      	nop
 8022a64:	080370a8 	.word	0x080370a8
 8022a68:	080370b0 	.word	0x080370b0
 8022a6c:	08037078 	.word	0x08037078
 8022a70:	08037080 	.word	0x08037080
 8022a74:	080370b4 	.word	0x080370b4
 8022a78:	08037088 	.word	0x08037088

08022a7c <mg_bzero>:
  if (buf != NULL) {
 8022a7c:	4603      	mov	r3, r0
 8022a7e:	b920      	cbnz	r0, 8022a8a <mg_bzero+0xe>
 8022a80:	4770      	bx	lr
    while (len--) *buf++ = 0;
 8022a82:	2100      	movs	r1, #0
 8022a84:	f803 1b01 	strb.w	r1, [r3], #1
 8022a88:	4611      	mov	r1, r2
 8022a8a:	1e4a      	subs	r2, r1, #1
 8022a8c:	2900      	cmp	r1, #0
 8022a8e:	d1f8      	bne.n	8022a82 <mg_bzero+0x6>
}
 8022a90:	4770      	bx	lr

08022a92 <mg_iobuf_del>:
size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 8022a92:	b538      	push	{r3, r4, r5, lr}
 8022a94:	4605      	mov	r5, r0
 8022a96:	4608      	mov	r0, r1
 8022a98:	4614      	mov	r4, r2
  if (ofs > io->len) ofs = io->len;
 8022a9a:	68aa      	ldr	r2, [r5, #8]
 8022a9c:	428a      	cmp	r2, r1
 8022a9e:	d200      	bcs.n	8022aa2 <mg_iobuf_del+0x10>
 8022aa0:	4610      	mov	r0, r2
  if (ofs + len > io->len) len = io->len - ofs;
 8022aa2:	1903      	adds	r3, r0, r4
 8022aa4:	429a      	cmp	r2, r3
 8022aa6:	d200      	bcs.n	8022aaa <mg_iobuf_del+0x18>
 8022aa8:	1a14      	subs	r4, r2, r0
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 8022aaa:	682b      	ldr	r3, [r5, #0]
 8022aac:	b133      	cbz	r3, 8022abc <mg_iobuf_del+0x2a>
 8022aae:	1901      	adds	r1, r0, r4
 8022ab0:	1a12      	subs	r2, r2, r0
 8022ab2:	1b12      	subs	r2, r2, r4
 8022ab4:	4419      	add	r1, r3
 8022ab6:	4418      	add	r0, r3
 8022ab8:	f006 ffc8 	bl	8029a4c <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 8022abc:	682b      	ldr	r3, [r5, #0]
 8022abe:	b12b      	cbz	r3, 8022acc <mg_iobuf_del+0x3a>
 8022ac0:	68a8      	ldr	r0, [r5, #8]
 8022ac2:	1b00      	subs	r0, r0, r4
 8022ac4:	4621      	mov	r1, r4
 8022ac6:	4418      	add	r0, r3
 8022ac8:	f7ff ffd8 	bl	8022a7c <mg_bzero>
  io->len -= len;
 8022acc:	68ab      	ldr	r3, [r5, #8]
 8022ace:	1b1b      	subs	r3, r3, r4
 8022ad0:	60ab      	str	r3, [r5, #8]
}
 8022ad2:	4620      	mov	r0, r4
 8022ad4:	bd38      	pop	{r3, r4, r5, pc}

08022ad6 <mg_random>:
void mg_random(void *buf, size_t len) {
 8022ad6:	b538      	push	{r3, r4, r5, lr}
 8022ad8:	4604      	mov	r4, r0
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 8022ada:	e006      	b.n	8022aea <mg_random+0x14>
 8022adc:	f006 fa8a 	bl	8028ff4 <rand>
 8022ae0:	4623      	mov	r3, r4
 8022ae2:	f803 0b01 	strb.w	r0, [r3], #1
 8022ae6:	461c      	mov	r4, r3
 8022ae8:	4629      	mov	r1, r5
 8022aea:	1e4d      	subs	r5, r1, #1
 8022aec:	2900      	cmp	r1, #0
 8022aee:	d1f5      	bne.n	8022adc <mg_random+0x6>
}
 8022af0:	bd38      	pop	{r3, r4, r5, pc}
	...

08022af4 <mg_random_str>:
char *mg_random_str(char *buf, size_t len) {
 8022af4:	b570      	push	{r4, r5, r6, lr}
 8022af6:	4604      	mov	r4, r0
 8022af8:	460d      	mov	r5, r1
  mg_random(buf, len);
 8022afa:	f7ff ffec 	bl	8022ad6 <mg_random>
  for (i = 0; i < len; i++) {
 8022afe:	2100      	movs	r1, #0
 8022b00:	e00a      	b.n	8022b18 <mg_random_str+0x24>
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8022b02:	2b33      	cmp	r3, #51	@ 0x33
 8022b04:	d802      	bhi.n	8022b0c <mg_random_str+0x18>
 8022b06:	3327      	adds	r3, #39	@ 0x27
 8022b08:	b2db      	uxtb	r3, r3
 8022b0a:	e003      	b.n	8022b14 <mg_random_str+0x20>
 8022b0c:	3b04      	subs	r3, #4
 8022b0e:	b2db      	uxtb	r3, r3
 8022b10:	e000      	b.n	8022b14 <mg_random_str+0x20>
 8022b12:	2300      	movs	r3, #0
 8022b14:	7003      	strb	r3, [r0, #0]
  for (i = 0; i < len; i++) {
 8022b16:	3101      	adds	r1, #1
 8022b18:	42a9      	cmp	r1, r5
 8022b1a:	d213      	bcs.n	8022b44 <mg_random_str+0x50>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 8022b1c:	1860      	adds	r0, r4, r1
 8022b1e:	5c63      	ldrb	r3, [r4, r1]
 8022b20:	085a      	lsrs	r2, r3, #1
 8022b22:	4e09      	ldr	r6, [pc, #36]	@ (8022b48 <mg_random_str+0x54>)
 8022b24:	fba6 6202 	umull	r6, r2, r6, r2
 8022b28:	0912      	lsrs	r2, r2, #4
 8022b2a:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 8022b2e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8022b32:	b2db      	uxtb	r3, r3
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8022b34:	1e6a      	subs	r2, r5, #1
 8022b36:	428a      	cmp	r2, r1
 8022b38:	d0eb      	beq.n	8022b12 <mg_random_str+0x1e>
 8022b3a:	2b19      	cmp	r3, #25
 8022b3c:	d8e1      	bhi.n	8022b02 <mg_random_str+0xe>
 8022b3e:	3361      	adds	r3, #97	@ 0x61
 8022b40:	b2db      	uxtb	r3, r3
 8022b42:	e7e7      	b.n	8022b14 <mg_random_str+0x20>
}
 8022b44:	4620      	mov	r0, r4
 8022b46:	bd70      	pop	{r4, r5, r6, pc}
 8022b48:	84210843 	.word	0x84210843

08022b4c <mg_ntohl>:
uint32_t mg_ntohl(uint32_t net) {
 8022b4c:	b082      	sub	sp, #8
  uint8_t data[4] = {0, 0, 0, 0};
 8022b4e:	2300      	movs	r3, #0
 8022b50:	9301      	str	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 8022b52:	9001      	str	r0, [sp, #4]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8022b54:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8022b58:	021b      	lsls	r3, r3, #8
 8022b5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8022b5e:	f3c0 2207 	ubfx	r2, r0, #8, #8
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8022b62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
}
 8022b66:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8022b6a:	b002      	add	sp, #8
 8022b6c:	4770      	bx	lr
	...

08022b70 <mg_atonl>:
static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 8022b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022b72:	b085      	sub	sp, #20
 8022b74:	466c      	mov	r4, sp
 8022b76:	e884 0003 	stmia.w	r4, {r0, r1}
 8022b7a:	4615      	mov	r5, r2
  uint32_t localhost = mg_htonl(0x7f000001);
 8022b7c:	480b      	ldr	r0, [pc, #44]	@ (8022bac <mg_atonl+0x3c>)
 8022b7e:	f7ff ffe5 	bl	8022b4c <mg_ntohl>
 8022b82:	4607      	mov	r7, r0
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8022b84:	ae02      	add	r6, sp, #8
 8022b86:	490a      	ldr	r1, [pc, #40]	@ (8022bb0 <mg_atonl+0x40>)
 8022b88:	4630      	mov	r0, r6
 8022b8a:	f7fe fd45 	bl	8021618 <mg_str_s>
 8022b8e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8022b92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8022b96:	f7fe fdcb 	bl	8021730 <mg_strcasecmp>
 8022b9a:	b928      	cbnz	r0, 8022ba8 <mg_atonl+0x38>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 8022b9c:	602f      	str	r7, [r5, #0]
  addr->is_ip6 = false;
 8022b9e:	2300      	movs	r3, #0
 8022ba0:	74eb      	strb	r3, [r5, #19]
  return true;
 8022ba2:	2001      	movs	r0, #1
}
 8022ba4:	b005      	add	sp, #20
 8022ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8022ba8:	2000      	movs	r0, #0
 8022baa:	e7fb      	b.n	8022ba4 <mg_atonl+0x34>
 8022bac:	7f000001 	.word	0x7f000001
 8022bb0:	080370bc 	.word	0x080370bc

08022bb4 <mg_aton>:
bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 8022bb4:	b510      	push	{r4, lr}
 8022bb6:	b082      	sub	sp, #8
 8022bb8:	466b      	mov	r3, sp
 8022bba:	e883 0003 	stmia.w	r3, {r0, r1}
 8022bbe:	4614      	mov	r4, r2
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8022bc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8022bc4:	f7fd f81e 	bl	801fc04 <mg_atone>
 8022bc8:	b110      	cbz	r0, 8022bd0 <mg_aton+0x1c>
 8022bca:	2001      	movs	r0, #1
}
 8022bcc:	b002      	add	sp, #8
 8022bce:	bd10      	pop	{r4, pc}
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8022bd0:	4622      	mov	r2, r4
 8022bd2:	ab02      	add	r3, sp, #8
 8022bd4:	e913 0003 	ldmdb	r3, {r0, r1}
 8022bd8:	f7ff ffca 	bl	8022b70 <mg_atonl>
 8022bdc:	b108      	cbz	r0, 8022be2 <mg_aton+0x2e>
 8022bde:	2001      	movs	r0, #1
 8022be0:	e7f4      	b.n	8022bcc <mg_aton+0x18>
 8022be2:	4622      	mov	r2, r4
 8022be4:	ab02      	add	r3, sp, #8
 8022be6:	e913 0003 	ldmdb	r3, {r0, r1}
 8022bea:	f7fc fde7 	bl	801f7bc <mg_aton4>
 8022bee:	b108      	cbz	r0, 8022bf4 <mg_aton+0x40>
 8022bf0:	2001      	movs	r0, #1
 8022bf2:	e7eb      	b.n	8022bcc <mg_aton+0x18>
         mg_aton6(str, addr);
 8022bf4:	4622      	mov	r2, r4
 8022bf6:	ab02      	add	r3, sp, #8
 8022bf8:	e913 0003 	ldmdb	r3, {r0, r1}
 8022bfc:	f7ff fd34 	bl	8022668 <mg_aton6>
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8022c00:	2800      	cmp	r0, #0
 8022c02:	d0e3      	beq.n	8022bcc <mg_aton+0x18>
 8022c04:	2001      	movs	r0, #1
 8022c06:	e7e1      	b.n	8022bcc <mg_aton+0x18>

08022c08 <gettimestamp>:
static int64_t gettimestamp(const uint32_t *data) {
 8022c08:	b570      	push	{r4, r5, r6, lr}
 8022c0a:	4604      	mov	r4, r0
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 8022c0c:	6800      	ldr	r0, [r0, #0]
 8022c0e:	f7ff ff9d 	bl	8022b4c <mg_ntohl>
 8022c12:	4606      	mov	r6, r0
 8022c14:	6860      	ldr	r0, [r4, #4]
 8022c16:	f7ff ff99 	bl	8022b4c <mg_ntohl>
  if (sec) sec -= SNTP_TIME_OFFSET;
 8022c1a:	b12e      	cbz	r6, 8022c28 <gettimestamp+0x20>
 8022c1c:	f106 46f8 	add.w	r6, r6, #2080374784	@ 0x7c000000
 8022c20:	f506 06ab 	add.w	r6, r6, #5603328	@ 0x558000
 8022c24:	f506 76c0 	add.w	r6, r6, #384	@ 0x180
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 8022c28:	0ef5      	lsrs	r5, r6, #27
 8022c2a:	0174      	lsls	r4, r6, #5
 8022c2c:	1ba4      	subs	r4, r4, r6
 8022c2e:	f165 0500 	sbc.w	r5, r5, #0
 8022c32:	00ad      	lsls	r5, r5, #2
 8022c34:	ea45 7594 	orr.w	r5, r5, r4, lsr #30
 8022c38:	00a4      	lsls	r4, r4, #2
 8022c3a:	19a4      	adds	r4, r4, r6
 8022c3c:	f145 0500 	adc.w	r5, r5, #0
 8022c40:	00ed      	lsls	r5, r5, #3
 8022c42:	ea45 7554 	orr.w	r5, r5, r4, lsr #29
 8022c46:	00e4      	lsls	r4, r4, #3
 8022c48:	f7ed fc74 	bl	8010534 <__aeabi_ui2d>
 8022c4c:	a309      	add	r3, pc, #36	@ (adr r3, 8022c74 <gettimestamp+0x6c>)
 8022c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c52:	f7ed fe13 	bl	801087c <__aeabi_ddiv>
 8022c56:	2200      	movs	r2, #0
 8022c58:	4b05      	ldr	r3, [pc, #20]	@ (8022c70 <gettimestamp+0x68>)
 8022c5a:	f7ed fce5 	bl	8010628 <__aeabi_dmul>
 8022c5e:	f7ee f8a7 	bl	8010db0 <__aeabi_d2lz>
 8022c62:	1820      	adds	r0, r4, r0
}
 8022c64:	eb45 0101 	adc.w	r1, r5, r1
 8022c68:	bd70      	pop	{r4, r5, r6, pc}
 8022c6a:	bf00      	nop
 8022c6c:	f3af 8000 	nop.w
 8022c70:	408f4000 	.word	0x408f4000
 8022c74:	ffe00000 	.word	0xffe00000
 8022c78:	41efffff 	.word	0x41efffff

08022c7c <mg_ntohs>:
uint16_t mg_ntohs(uint16_t net) {
 8022c7c:	b082      	sub	sp, #8
  uint8_t data[2] = {0, 0};
 8022c7e:	2300      	movs	r3, #0
 8022c80:	f8ad 3004 	strh.w	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 8022c84:	f8ad 0004 	strh.w	r0, [sp, #4]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8022c88:	b2c3      	uxtb	r3, r0
 8022c8a:	021b      	lsls	r3, r3, #8
}
 8022c8c:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
 8022c90:	b002      	add	sp, #8
 8022c92:	4770      	bx	lr

08022c94 <csumfin>:
static uint16_t csumfin(uint32_t sum) {
 8022c94:	b508      	push	{r3, lr}
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8022c96:	e001      	b.n	8022c9c <csumfin+0x8>
 8022c98:	fa13 f080 	uxtah	r0, r3, r0
 8022c9c:	0c03      	lsrs	r3, r0, #16
 8022c9e:	d1fb      	bne.n	8022c98 <csumfin+0x4>
  return mg_htons(~sum & 0xffff);
 8022ca0:	43c0      	mvns	r0, r0
 8022ca2:	b280      	uxth	r0, r0
 8022ca4:	f7ff ffea 	bl	8022c7c <mg_ntohs>
}
 8022ca8:	bd08      	pop	{r3, pc}

08022caa <ipcsum>:
static uint16_t ipcsum(const void *buf, size_t len) {
 8022caa:	b508      	push	{r3, lr}
 8022cac:	460a      	mov	r2, r1
  uint32_t sum = csumup(0, buf, len);
 8022cae:	4601      	mov	r1, r0
 8022cb0:	2000      	movs	r0, #0
 8022cb2:	f7fc fddb 	bl	801f86c <csumup>
  return csumfin(sum);
 8022cb6:	f7ff ffed 	bl	8022c94 <csumfin>
}
 8022cba:	bd08      	pop	{r3, pc}

08022cbc <tx_ip>:
                        size_t plen) {
 8022cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022cbe:	4617      	mov	r7, r2
 8022cc0:	461e      	mov	r6, r3
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8022cc2:	6944      	ldr	r4, [r0, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 8022cc4:	4625      	mov	r5, r4
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 8022cc6:	680b      	ldr	r3, [r1, #0]
 8022cc8:	f845 3b0e 	str.w	r3, [r5], #14
 8022ccc:	888b      	ldrh	r3, [r1, #4]
 8022cce:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 8022cd0:	6803      	ldr	r3, [r0, #0]
 8022cd2:	f8c4 3006 	str.w	r3, [r4, #6]
 8022cd6:	8883      	ldrh	r3, [r0, #4]
 8022cd8:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x800);
 8022cda:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8022cde:	f7ff ffcd 	bl	8022c7c <mg_ntohs>
 8022ce2:	81a0      	strh	r0, [r4, #12]
  memset(ip, 0, sizeof(*ip));
 8022ce4:	2100      	movs	r1, #0
 8022ce6:	f8c4 100e 	str.w	r1, [r4, #14]
 8022cea:	6069      	str	r1, [r5, #4]
 8022cec:	60a9      	str	r1, [r5, #8]
 8022cee:	60e9      	str	r1, [r5, #12]
 8022cf0:	6129      	str	r1, [r5, #16]
  ip->ver = 0x45;   // Version 4, header length 5 words
 8022cf2:	2345      	movs	r3, #69	@ 0x45
 8022cf4:	73a3      	strb	r3, [r4, #14]
  ip->frag = 0x40;  // Don't fragment
 8022cf6:	2340      	movs	r3, #64	@ 0x40
 8022cf8:	7523      	strb	r3, [r4, #20]
 8022cfa:	7561      	strb	r1, [r4, #21]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 8022cfc:	9807      	ldr	r0, [sp, #28]
 8022cfe:	3014      	adds	r0, #20
 8022d00:	b280      	uxth	r0, r0
 8022d02:	f7ff ffbb 	bl	8022c7c <mg_ntohs>
 8022d06:	8220      	strh	r0, [r4, #16]
  ip->ttl = 64;
 8022d08:	2340      	movs	r3, #64	@ 0x40
 8022d0a:	75a3      	strb	r3, [r4, #22]
  ip->proto = proto;
 8022d0c:	75e7      	strb	r7, [r4, #23]
  ip->src = ip_src;
 8022d0e:	f8c4 601a 	str.w	r6, [r4, #26]
  ip->dst = ip_dst;
 8022d12:	9b06      	ldr	r3, [sp, #24]
 8022d14:	f8c4 301e 	str.w	r3, [r4, #30]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8022d18:	2114      	movs	r1, #20
 8022d1a:	4628      	mov	r0, r5
 8022d1c:	f7ff ffc5 	bl	8022caa <ipcsum>
 8022d20:	8320      	strh	r0, [r4, #24]
}
 8022d22:	4628      	mov	r0, r5
 8022d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08022d26 <rx_icmp>:
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8022d26:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8022d28:	781b      	ldrb	r3, [r3, #0]
 8022d2a:	2b08      	cmp	r3, #8
 8022d2c:	d000      	beq.n	8022d30 <rx_icmp+0xa>
 8022d2e:	4770      	bx	lr
static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8022d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022d34:	b083      	sub	sp, #12
 8022d36:	4605      	mov	r5, r0
 8022d38:	460c      	mov	r4, r1
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8022d3a:	69ca      	ldr	r2, [r1, #28]
 8022d3c:	b11a      	cbz	r2, 8022d46 <rx_icmp+0x20>
 8022d3e:	6911      	ldr	r1, [r2, #16]
 8022d40:	6883      	ldr	r3, [r0, #8]
 8022d42:	4299      	cmp	r1, r3
 8022d44:	d002      	beq.n	8022d4c <rx_icmp+0x26>
}
 8022d46:	b003      	add	sp, #12
 8022d48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8022d4c:	6986      	ldr	r6, [r0, #24]
 8022d4e:	3e26      	subs	r6, #38	@ 0x26
 8022d50:	68e1      	ldr	r1, [r4, #12]
    if (plen > space) plen = space;
 8022d52:	428e      	cmp	r6, r1
 8022d54:	d300      	bcc.n	8022d58 <rx_icmp+0x32>
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8022d56:	460e      	mov	r6, r1
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 8022d58:	6921      	ldr	r1, [r4, #16]
 8022d5a:	f106 0804 	add.w	r8, r6, #4
 8022d5e:	f8cd 8004 	str.w	r8, [sp, #4]
 8022d62:	68d2      	ldr	r2, [r2, #12]
 8022d64:	9200      	str	r2, [sp, #0]
 8022d66:	2201      	movs	r2, #1
 8022d68:	3106      	adds	r1, #6
 8022d6a:	4628      	mov	r0, r5
 8022d6c:	f7ff ffa6 	bl	8022cbc <tx_ip>
 8022d70:	4607      	mov	r7, r0
    struct icmp *icmp = (struct icmp *) (ip + 1);
 8022d72:	f100 0914 	add.w	r9, r0, #20
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 8022d76:	2300      	movs	r3, #0
 8022d78:	6143      	str	r3, [r0, #20]
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 8022d7a:	4632      	mov	r2, r6
 8022d7c:	68a1      	ldr	r1, [r4, #8]
 8022d7e:	3018      	adds	r0, #24
 8022d80:	f008 f8ba 	bl	802aef8 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 8022d84:	4641      	mov	r1, r8
 8022d86:	4648      	mov	r0, r9
 8022d88:	f7ff ff8f 	bl	8022caa <ipcsum>
 8022d8c:	82f8      	strh	r0, [r7, #22]
    ether_output(ifp, hlen + plen);
 8022d8e:	f106 0126 	add.w	r1, r6, #38	@ 0x26
 8022d92:	4628      	mov	r0, r5
 8022d94:	f7fc fd7b 	bl	801f88e <ether_output>
}
 8022d98:	e7d5      	b.n	8022d46 <rx_icmp+0x20>

08022d9a <rx_ip6>:
static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8022d9a:	b538      	push	{r3, r4, r5, lr}
 8022d9c:	4605      	mov	r5, r0
 8022d9e:	460c      	mov	r4, r1
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 8022da0:	6a09      	ldr	r1, [r1, #32]
 8022da2:	798b      	ldrb	r3, [r1, #6]
 8022da4:	2b01      	cmp	r3, #1
 8022da6:	d00e      	beq.n	8022dc6 <rx_ip6+0x2c>
 8022da8:	2b3a      	cmp	r3, #58	@ 0x3a
 8022daa:	d00c      	beq.n	8022dc6 <rx_ip6+0x2c>
  } else if (pkt->ip6->proto == 17) {
 8022dac:	2b11      	cmp	r3, #17
 8022dae:	d110      	bne.n	8022dd2 <rx_ip6+0x38>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 8022db0:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8022db4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8022db6:	68e3      	ldr	r3, [r4, #12]
 8022db8:	2b07      	cmp	r3, #7
 8022dba:	d90a      	bls.n	8022dd2 <rx_ip6+0x38>
    mkpay(pkt, pkt->udp + 1);
 8022dbc:	3130      	adds	r1, #48	@ 0x30
 8022dbe:	4620      	mov	r0, r4
 8022dc0:	f7fe fc7a 	bl	80216b8 <mkpay>
 8022dc4:	e005      	b.n	8022dd2 <rx_ip6+0x38>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 8022dc6:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8022dca:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8022dcc:	68e3      	ldr	r3, [r4, #12]
 8022dce:	2b03      	cmp	r3, #3
 8022dd0:	d800      	bhi.n	8022dd4 <rx_ip6+0x3a>
}
 8022dd2:	bd38      	pop	{r3, r4, r5, pc}
    mkpay(pkt, pkt->icmp + 1);
 8022dd4:	312c      	adds	r1, #44	@ 0x2c
 8022dd6:	4620      	mov	r0, r4
 8022dd8:	f7fe fc6e 	bl	80216b8 <mkpay>
    rx_icmp(ifp, pkt);
 8022ddc:	4621      	mov	r1, r4
 8022dde:	4628      	mov	r0, r5
 8022de0:	f7ff ffa1 	bl	8022d26 <rx_icmp>
 8022de4:	e7f5      	b.n	8022dd2 <rx_ip6+0x38>

08022de6 <tx_udp>:
                   const void *buf, size_t len) {
 8022de6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022dea:	b083      	sub	sp, #12
 8022dec:	4606      	mov	r6, r0
 8022dee:	4698      	mov	r8, r3
 8022df0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8022df2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 8022df4:	f105 0308 	add.w	r3, r5, #8
 8022df8:	9301      	str	r3, [sp, #4]
 8022dfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022dfc:	9300      	str	r3, [sp, #0]
 8022dfe:	4613      	mov	r3, r2
 8022e00:	2211      	movs	r2, #17
 8022e02:	f7ff ff5b 	bl	8022cbc <tx_ip>
 8022e06:	4604      	mov	r4, r0
  struct udp *udp = (struct udp *) (ip + 1);
 8022e08:	f100 0914 	add.w	r9, r0, #20
  udp->sport = sport;
 8022e0c:	f8a0 8014 	strh.w	r8, [r0, #20]
  udp->dport = dport;
 8022e10:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8022e14:	82c3      	strh	r3, [r0, #22]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8022e16:	f105 0008 	add.w	r0, r5, #8
 8022e1a:	b280      	uxth	r0, r0
 8022e1c:	f7ff ff2e 	bl	8022c7c <mg_ntohs>
 8022e20:	8320      	strh	r0, [r4, #24]
  udp->csum = 0;
 8022e22:	2000      	movs	r0, #0
 8022e24:	76a0      	strb	r0, [r4, #26]
 8022e26:	76e0      	strb	r0, [r4, #27]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8022e28:	2208      	movs	r2, #8
 8022e2a:	4649      	mov	r1, r9
 8022e2c:	f7fc fd1e 	bl	801f86c <csumup>
  cs = csumup(cs, buf, len);
 8022e30:	462a      	mov	r2, r5
 8022e32:	4639      	mov	r1, r7
 8022e34:	f7fc fd1a 	bl	801f86c <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8022e38:	2204      	movs	r2, #4
 8022e3a:	f104 010c 	add.w	r1, r4, #12
 8022e3e:	f7fc fd15 	bl	801f86c <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8022e42:	2204      	movs	r2, #4
 8022e44:	f104 0110 	add.w	r1, r4, #16
 8022e48:	f7fc fd10 	bl	801f86c <csumup>
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 8022e4c:	7a63      	ldrb	r3, [r4, #9]
 8022e4e:	442b      	add	r3, r5
 8022e50:	4418      	add	r0, r3
  udp->csum = csumfin(cs);
 8022e52:	3008      	adds	r0, #8
 8022e54:	f7ff ff1e 	bl	8022c94 <csumfin>
 8022e58:	8360      	strh	r0, [r4, #26]
  memmove(udp + 1, buf, len);
 8022e5a:	462a      	mov	r2, r5
 8022e5c:	4639      	mov	r1, r7
 8022e5e:	f104 001c 	add.w	r0, r4, #28
 8022e62:	f006 fdf3 	bl	8029a4c <memmove>
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 8022e66:	f105 012a 	add.w	r1, r5, #42	@ 0x2a
 8022e6a:	4630      	mov	r0, r6
 8022e6c:	f7fc fd0f 	bl	801f88e <ether_output>
}
 8022e70:	b003      	add	sp, #12
 8022e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08022e76 <arp_ask>:
static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 8022e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022e78:	4605      	mov	r5, r0
 8022e7a:	460f      	mov	r7, r1
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8022e7c:	6944      	ldr	r4, [r0, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 8022e7e:	4626      	mov	r6, r4
  memset(eth->dst, 255, sizeof(eth->dst));
 8022e80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022e84:	f846 3b0e 	str.w	r3, [r6], #14
 8022e88:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8022e8a:	6803      	ldr	r3, [r0, #0]
 8022e8c:	f8c4 3006 	str.w	r3, [r4, #6]
 8022e90:	8883      	ldrh	r3, [r0, #4]
 8022e92:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x806);
 8022e94:	f640 0006 	movw	r0, #2054	@ 0x806
 8022e98:	f7ff fef0 	bl	8022c7c <mg_ntohs>
 8022e9c:	81a0      	strh	r0, [r4, #12]
  memset(arp, 0, sizeof(*arp));
 8022e9e:	2300      	movs	r3, #0
 8022ea0:	f8c4 300e 	str.w	r3, [r4, #14]
 8022ea4:	6073      	str	r3, [r6, #4]
 8022ea6:	60b3      	str	r3, [r6, #8]
 8022ea8:	60f3      	str	r3, [r6, #12]
 8022eaa:	6133      	str	r3, [r6, #16]
 8022eac:	6173      	str	r3, [r6, #20]
 8022eae:	61b3      	str	r3, [r6, #24]
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8022eb0:	2001      	movs	r0, #1
 8022eb2:	f7ff fee3 	bl	8022c7c <mg_ntohs>
 8022eb6:	4606      	mov	r6, r0
 8022eb8:	81e0      	strh	r0, [r4, #14]
 8022eba:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8022ebe:	f7ff fedd 	bl	8022c7c <mg_ntohs>
 8022ec2:	8220      	strh	r0, [r4, #16]
 8022ec4:	2306      	movs	r3, #6
 8022ec6:	74a3      	strb	r3, [r4, #18]
  arp->plen = 4;
 8022ec8:	2304      	movs	r3, #4
 8022eca:	74e3      	strb	r3, [r4, #19]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 8022ecc:	82a6      	strh	r6, [r4, #20]
 8022ece:	f8c4 7026 	str.w	r7, [r4, #38]	@ 0x26
 8022ed2:	68ab      	ldr	r3, [r5, #8]
 8022ed4:	61e3      	str	r3, [r4, #28]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8022ed6:	682b      	ldr	r3, [r5, #0]
 8022ed8:	f8c4 3016 	str.w	r3, [r4, #22]
 8022edc:	88ab      	ldrh	r3, [r5, #4]
 8022ede:	8363      	strh	r3, [r4, #26]
  ether_output(ifp, PDIFF(eth, arp + 1));
 8022ee0:	212a      	movs	r1, #42	@ 0x2a
 8022ee2:	4628      	mov	r0, r5
 8022ee4:	f7fc fcd3 	bl	801f88e <ether_output>
}
 8022ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08022eea <mg_open_listener>:
bool mg_open_listener(struct mg_connection *c, const char *url) {
 8022eea:	b510      	push	{r4, lr}
 8022eec:	4604      	mov	r4, r0
  c->loc.port = mg_htons(mg_url_port(url));
 8022eee:	4608      	mov	r0, r1
 8022ef0:	f7ff fd74 	bl	80229dc <mg_url_port>
 8022ef4:	f7ff fec2 	bl	8022c7c <mg_ntohs>
 8022ef8:	8320      	strh	r0, [r4, #24]
}
 8022efa:	2001      	movs	r0, #1
 8022efc:	bd10      	pop	{r4, pc}
	...

08022f00 <tx_dhcp>:
                    bool ciaddr) {
 8022f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022f04:	b0c8      	sub	sp, #288	@ 0x120
 8022f06:	4604      	mov	r4, r0
 8022f08:	460e      	mov	r6, r1
 8022f0a:	4615      	mov	r5, r2
 8022f0c:	4698      	mov	r8, r3
 8022f0e:	f89d 7140 	ldrb.w	r7, [sp, #320]	@ 0x140
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8022f12:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8022f16:	4917      	ldr	r1, [pc, #92]	@ (8022f74 <tx_dhcp+0x74>)
 8022f18:	a804      	add	r0, sp, #16
 8022f1a:	f007 ffed 	bl	802aef8 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8022f1e:	4816      	ldr	r0, [pc, #88]	@ (8022f78 <tx_dhcp+0x78>)
 8022f20:	f7ff fe14 	bl	8022b4c <mg_ntohl>
 8022f24:	903f      	str	r0, [sp, #252]	@ 0xfc
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 8022f26:	6820      	ldr	r0, [r4, #0]
 8022f28:	900b      	str	r0, [sp, #44]	@ 0x2c
 8022f2a:	88a3      	ldrh	r3, [r4, #4]
 8022f2c:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 8022f30:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8022f34:	9305      	str	r3, [sp, #20]
  memcpy(&dhcp.options, opts, optslen);
 8022f36:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 8022f38:	994e      	ldr	r1, [sp, #312]	@ 0x138
 8022f3a:	a840      	add	r0, sp, #256	@ 0x100
 8022f3c:	f007 ffdc 	bl	802aef8 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 8022f40:	b107      	cbz	r7, 8022f44 <tx_dhcp+0x44>
 8022f42:	9507      	str	r5, [sp, #28]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 8022f44:	2044      	movs	r0, #68	@ 0x44
 8022f46:	f7ff fe99 	bl	8022c7c <mg_ntohs>
 8022f4a:	4607      	mov	r7, r0
 8022f4c:	2043      	movs	r0, #67	@ 0x43
 8022f4e:	f7ff fe95 	bl	8022c7c <mg_ntohs>
 8022f52:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8022f56:	9303      	str	r3, [sp, #12]
 8022f58:	ab04      	add	r3, sp, #16
 8022f5a:	9302      	str	r3, [sp, #8]
 8022f5c:	9001      	str	r0, [sp, #4]
 8022f5e:	f8cd 8000 	str.w	r8, [sp]
 8022f62:	463b      	mov	r3, r7
 8022f64:	462a      	mov	r2, r5
 8022f66:	4631      	mov	r1, r6
 8022f68:	4620      	mov	r0, r4
 8022f6a:	f7ff ff3c 	bl	8022de6 <tx_udp>
}
 8022f6e:	b048      	add	sp, #288	@ 0x120
 8022f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022f74:	08032dcc 	.word	0x08032dcc
 8022f78:	63825363 	.word	0x63825363

08022f7c <rx_dhcp_server>:
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8022f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022f80:	b0d0      	sub	sp, #320	@ 0x140
 8022f82:	460d      	mov	r5, r1
  uint8_t op = 0, *p = pkt->dhcp->options,
 8022f84:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8022f86:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 8022f8a:	6809      	ldr	r1, [r1, #0]
 8022f8c:	686a      	ldr	r2, [r5, #4]
 8022f8e:	eb01 0802 	add.w	r8, r1, r2
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8022f92:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8022f96:	4543      	cmp	r3, r8
 8022f98:	d827      	bhi.n	8022fea <rx_dhcp_server+0x6e>
 8022f9a:	4606      	mov	r6, r0
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8022f9c:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8022fa0:	495e      	ldr	r1, [pc, #376]	@ (802311c <rx_dhcp_server+0x1a0>)
 8022fa2:	a80c      	add	r0, sp, #48	@ 0x30
 8022fa4:	f007 ffa8 	bl	802aef8 <memcpy>
  res.yiaddr = ifp->ip;
 8022fa8:	68b3      	ldr	r3, [r6, #8]
 8022faa:	9310      	str	r3, [sp, #64]	@ 0x40
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 8022fac:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8022fb0:	3301      	adds	r3, #1
 8022fb2:	f88d 3043 	strb.w	r3, [sp, #67]	@ 0x43
  uint8_t op = 0, *p = pkt->dhcp->options,
 8022fb6:	2700      	movs	r7, #0
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8022fb8:	e002      	b.n	8022fc0 <rx_dhcp_server+0x44>
    p += p[1] + 2;
 8022fba:	7863      	ldrb	r3, [r4, #1]
 8022fbc:	3302      	adds	r3, #2
 8022fbe:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8022fc0:	1c63      	adds	r3, r4, #1
 8022fc2:	4543      	cmp	r3, r8
 8022fc4:	d20c      	bcs.n	8022fe0 <rx_dhcp_server+0x64>
 8022fc6:	7823      	ldrb	r3, [r4, #0]
 8022fc8:	2bff      	cmp	r3, #255	@ 0xff
 8022fca:	d009      	beq.n	8022fe0 <rx_dhcp_server+0x64>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 8022fcc:	2b35      	cmp	r3, #53	@ 0x35
 8022fce:	d1f4      	bne.n	8022fba <rx_dhcp_server+0x3e>
 8022fd0:	7863      	ldrb	r3, [r4, #1]
 8022fd2:	2b01      	cmp	r3, #1
 8022fd4:	d1f1      	bne.n	8022fba <rx_dhcp_server+0x3e>
 8022fd6:	1ca3      	adds	r3, r4, #2
 8022fd8:	4543      	cmp	r3, r8
 8022fda:	d2ee      	bcs.n	8022fba <rx_dhcp_server+0x3e>
      op = p[2];
 8022fdc:	78a7      	ldrb	r7, [r4, #2]
 8022fde:	e7ec      	b.n	8022fba <rx_dhcp_server+0x3e>
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 8022fe0:	2f01      	cmp	r7, #1
 8022fe2:	f000 808a 	beq.w	80230fa <rx_dhcp_server+0x17e>
 8022fe6:	2f03      	cmp	r7, #3
 8022fe8:	d002      	beq.n	8022ff0 <rx_dhcp_server+0x74>
}
 8022fea:	b050      	add	sp, #320	@ 0x140
 8022fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8022ff0:	2205      	movs	r2, #5
    uint8_t opts[] = {
 8022ff2:	2335      	movs	r3, #53	@ 0x35
 8022ff4:	f88d 3014 	strb.w	r3, [sp, #20]
 8022ff8:	2301      	movs	r3, #1
 8022ffa:	f88d 3015 	strb.w	r3, [sp, #21]
 8022ffe:	f88d 2016 	strb.w	r2, [sp, #22]
 8023002:	f88d 3017 	strb.w	r3, [sp, #23]
 8023006:	2204      	movs	r2, #4
 8023008:	f88d 2018 	strb.w	r2, [sp, #24]
 802300c:	2300      	movs	r3, #0
 802300e:	f88d 3019 	strb.w	r3, [sp, #25]
 8023012:	f88d 301a 	strb.w	r3, [sp, #26]
 8023016:	f88d 301b 	strb.w	r3, [sp, #27]
 802301a:	f88d 301c 	strb.w	r3, [sp, #28]
 802301e:	2136      	movs	r1, #54	@ 0x36
 8023020:	f88d 101d 	strb.w	r1, [sp, #29]
 8023024:	f88d 201e 	strb.w	r2, [sp, #30]
 8023028:	f88d 301f 	strb.w	r3, [sp, #31]
 802302c:	f88d 3020 	strb.w	r3, [sp, #32]
 8023030:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8023034:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 8023038:	230c      	movs	r3, #12
 802303a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 802303e:	2303      	movs	r3, #3
 8023040:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8023044:	236d      	movs	r3, #109	@ 0x6d
 8023046:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
 802304a:	2369      	movs	r3, #105	@ 0x69
 802304c:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
 8023050:	2370      	movs	r3, #112	@ 0x70
 8023052:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8023056:	2333      	movs	r3, #51	@ 0x33
 8023058:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 802305c:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
 8023060:	23ff      	movs	r3, #255	@ 0xff
 8023062:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023066:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 802306a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 802306e:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
 8023072:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 8023076:	f8d5 e030 	ldr.w	lr, [r5, #48]	@ 0x30
 802307a:	f8de 001c 	ldr.w	r0, [lr, #28]
 802307e:	9013      	str	r0, [sp, #76]	@ 0x4c
 8023080:	f8be 3020 	ldrh.w	r3, [lr, #32]
 8023084:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 8023088:	68f3      	ldr	r3, [r6, #12]
 802308a:	f8cd 3019 	str.w	r3, [sp, #25]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 802308e:	68b3      	ldr	r3, [r6, #8]
 8023090:	f8cd 301f 	str.w	r3, [sp, #31]
    memcpy(&res.options, opts, sizeof(opts));
 8023094:	f50d 7c90 	add.w	ip, sp, #288	@ 0x120
 8023098:	ac05      	add	r4, sp, #20
 802309a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802309c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80230a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80230a4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80230a8:	f82c 2b02 	strh.w	r2, [ip], #2
 80230ac:	0c12      	lsrs	r2, r2, #16
 80230ae:	f88c 2000 	strb.w	r2, [ip]
    res.magic = pkt->dhcp->magic;
 80230b2:	f8de 30ec 	ldr.w	r3, [lr, #236]	@ 0xec
 80230b6:	9347      	str	r3, [sp, #284]	@ 0x11c
    res.xid = pkt->dhcp->xid;
 80230b8:	f8de 3004 	ldr.w	r3, [lr, #4]
 80230bc:	930d      	str	r3, [sp, #52]	@ 0x34
    if (ifp->enable_get_gateway) {
 80230be:	7fb3      	ldrb	r3, [r6, #30]
 80230c0:	b9eb      	cbnz	r3, 80230fe <rx_dhcp_server+0x182>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 80230c2:	692c      	ldr	r4, [r5, #16]
 80230c4:	3406      	adds	r4, #6
 80230c6:	f8d6 8008 	ldr.w	r8, [r6, #8]
 80230ca:	2043      	movs	r0, #67	@ 0x43
 80230cc:	f7ff fdd6 	bl	8022c7c <mg_ntohs>
 80230d0:	4605      	mov	r5, r0
 80230d2:	2f01      	cmp	r7, #1
 80230d4:	d01e      	beq.n	8023114 <rx_dhcp_server+0x198>
 80230d6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80230d8:	2044      	movs	r0, #68	@ 0x44
 80230da:	f7ff fdcf 	bl	8022c7c <mg_ntohs>
 80230de:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80230e2:	9303      	str	r3, [sp, #12]
 80230e4:	ab0c      	add	r3, sp, #48	@ 0x30
 80230e6:	9302      	str	r3, [sp, #8]
 80230e8:	9001      	str	r0, [sp, #4]
 80230ea:	9700      	str	r7, [sp, #0]
 80230ec:	462b      	mov	r3, r5
 80230ee:	4642      	mov	r2, r8
 80230f0:	4621      	mov	r1, r4
 80230f2:	4630      	mov	r0, r6
 80230f4:	f7ff fe77 	bl	8022de6 <tx_udp>
 80230f8:	e777      	b.n	8022fea <rx_dhcp_server+0x6e>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 80230fa:	2202      	movs	r2, #2
 80230fc:	e779      	b.n	8022ff2 <rx_dhcp_server+0x76>
      ifp->gw = res.yiaddr;
 80230fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023100:	6133      	str	r3, [r6, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8023102:	692b      	ldr	r3, [r5, #16]
 8023104:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8023108:	f8c6 2046 	str.w	r2, [r6, #70]	@ 0x46
 802310c:	895b      	ldrh	r3, [r3, #10]
 802310e:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 8023112:	e7d6      	b.n	80230c2 <rx_dhcp_server+0x146>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8023114:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8023118:	e7de      	b.n	80230d8 <rx_dhcp_server+0x15c>
 802311a:	bf00      	nop
 802311c:	08032edc 	.word	0x08032edc

08023120 <print_ip6>:
static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8023120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023124:	b08b      	sub	sp, #44	@ 0x2c
 8023126:	4605      	mov	r5, r0
 8023128:	9108      	str	r1, [sp, #32]
 802312a:	4614      	mov	r4, r2
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 802312c:	8810      	ldrh	r0, [r2, #0]
 802312e:	f7ff fda5 	bl	8022c7c <mg_ntohs>
 8023132:	9009      	str	r0, [sp, #36]	@ 0x24
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8023134:	8860      	ldrh	r0, [r4, #2]
 8023136:	f7ff fda1 	bl	8022c7c <mg_ntohs>
 802313a:	4606      	mov	r6, r0
 802313c:	88a0      	ldrh	r0, [r4, #4]
 802313e:	f7ff fd9d 	bl	8022c7c <mg_ntohs>
 8023142:	4607      	mov	r7, r0
 8023144:	88e0      	ldrh	r0, [r4, #6]
 8023146:	f7ff fd99 	bl	8022c7c <mg_ntohs>
 802314a:	4680      	mov	r8, r0
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 802314c:	8920      	ldrh	r0, [r4, #8]
 802314e:	f7ff fd95 	bl	8022c7c <mg_ntohs>
 8023152:	4681      	mov	r9, r0
 8023154:	8960      	ldrh	r0, [r4, #10]
 8023156:	f7ff fd91 	bl	8022c7c <mg_ntohs>
 802315a:	4682      	mov	sl, r0
 802315c:	89a0      	ldrh	r0, [r4, #12]
 802315e:	f7ff fd8d 	bl	8022c7c <mg_ntohs>
 8023162:	4683      	mov	fp, r0
                    mg_ntohs(p[7]));
 8023164:	89e0      	ldrh	r0, [r4, #14]
 8023166:	f7ff fd89 	bl	8022c7c <mg_ntohs>
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 802316a:	9006      	str	r0, [sp, #24]
 802316c:	f8cd b014 	str.w	fp, [sp, #20]
 8023170:	f8cd a010 	str.w	sl, [sp, #16]
 8023174:	f8cd 900c 	str.w	r9, [sp, #12]
 8023178:	f8cd 8008 	str.w	r8, [sp, #8]
 802317c:	9701      	str	r7, [sp, #4]
 802317e:	9600      	str	r6, [sp, #0]
 8023180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023182:	4a04      	ldr	r2, [pc, #16]	@ (8023194 <print_ip6+0x74>)
 8023184:	9908      	ldr	r1, [sp, #32]
 8023186:	4628      	mov	r0, r5
 8023188:	f7fe f8d0 	bl	802132c <mg_xprintf>
}
 802318c:	b00b      	add	sp, #44	@ 0x2c
 802318e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023192:	bf00      	nop
 8023194:	080370c8 	.word	0x080370c8

08023198 <mg_print_ip>:
size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8023198:	b510      	push	{r4, lr}
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 802319a:	6813      	ldr	r3, [r2, #0]
 802319c:	1d1c      	adds	r4, r3, #4
 802319e:	6014      	str	r4, [r2, #0]
 80231a0:	681a      	ldr	r2, [r3, #0]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 80231a2:	7cd3      	ldrb	r3, [r2, #19]
 80231a4:	b913      	cbnz	r3, 80231ac <mg_print_ip+0x14>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 80231a6:	f7fe f8d1 	bl	802134c <print_ip4>
}
 80231aa:	bd10      	pop	{r4, pc}
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 80231ac:	f7ff ffb8 	bl	8023120 <print_ip6>
 80231b0:	e7fb      	b.n	80231aa <mg_print_ip+0x12>
	...

080231b4 <mg_print_ip_port>:
size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 80231b4:	b570      	push	{r4, r5, r6, lr}
 80231b6:	b082      	sub	sp, #8
 80231b8:	4604      	mov	r4, r0
 80231ba:	460d      	mov	r5, r1
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 80231bc:	6813      	ldr	r3, [r2, #0]
 80231be:	1d19      	adds	r1, r3, #4
 80231c0:	6011      	str	r1, [r2, #0]
 80231c2:	681e      	ldr	r6, [r3, #0]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 80231c4:	8a30      	ldrh	r0, [r6, #16]
 80231c6:	f7ff fd59 	bl	8022c7c <mg_ntohs>
 80231ca:	9001      	str	r0, [sp, #4]
 80231cc:	9600      	str	r6, [sp, #0]
 80231ce:	4b04      	ldr	r3, [pc, #16]	@ (80231e0 <mg_print_ip_port+0x2c>)
 80231d0:	4a04      	ldr	r2, [pc, #16]	@ (80231e4 <mg_print_ip_port+0x30>)
 80231d2:	4629      	mov	r1, r5
 80231d4:	4620      	mov	r0, r4
 80231d6:	f7fe f8a9 	bl	802132c <mg_xprintf>
}
 80231da:	b002      	add	sp, #8
 80231dc:	bd70      	pop	{r4, r5, r6, pc}
 80231de:	bf00      	nop
 80231e0:	08023199 	.word	0x08023199
 80231e4:	080370e4 	.word	0x080370e4

080231e8 <mg_crc32>:
  crc = ~crc;
 80231e8:	43c0      	mvns	r0, r0
  while (len--) {
 80231ea:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 80231ee:	b1e2      	cbz	r2, 802322a <mg_crc32+0x42>
uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 80231f0:	b410      	push	{r4}
    uint8_t b = *(uint8_t *) buf++;
 80231f2:	f811 3b01 	ldrb.w	r3, [r1], #1
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 80231f6:	ea83 0200 	eor.w	r2, r3, r0
 80231fa:	f002 020f 	and.w	r2, r2, #15
 80231fe:	4c0c      	ldr	r4, [pc, #48]	@ (8023230 <mg_crc32+0x48>)
 8023200:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8023204:	ea82 1010 	eor.w	r0, r2, r0, lsr #4
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8023208:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 802320c:	f003 030f 	and.w	r3, r3, #15
 8023210:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8023214:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
  while (len--) {
 8023218:	4662      	mov	r2, ip
 802321a:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 802321e:	2a00      	cmp	r2, #0
 8023220:	d1e7      	bne.n	80231f2 <mg_crc32+0xa>
}
 8023222:	43c0      	mvns	r0, r0
 8023224:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023228:	4770      	bx	lr
 802322a:	43c0      	mvns	r0, r0
 802322c:	4770      	bx	lr
 802322e:	bf00      	nop
 8023230:	08037978 	.word	0x08037978

08023234 <mg_path_is_sane>:
bool mg_path_is_sane(const struct mg_str path) {
 8023234:	b082      	sub	sp, #8
 8023236:	ab02      	add	r3, sp, #8
 8023238:	e903 0003 	stmdb	r3, {r0, r1}
  const char *s = path.buf;
 802323c:	4602      	mov	r2, r0
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 802323e:	7803      	ldrb	r3, [r0, #0]
 8023240:	2b2e      	cmp	r3, #46	@ 0x2e
 8023242:	d106      	bne.n	8023252 <mg_path_is_sane+0x1e>
 8023244:	7843      	ldrb	r3, [r0, #1]
 8023246:	2b2e      	cmp	r3, #46	@ 0x2e
 8023248:	d103      	bne.n	8023252 <mg_path_is_sane+0x1e>
 802324a:	2000      	movs	r0, #0
 802324c:	e015      	b.n	802327a <mg_path_is_sane+0x46>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 802324e:	3201      	adds	r2, #1
 8023250:	3901      	subs	r1, #1
 8023252:	7813      	ldrb	r3, [r2, #0]
 8023254:	b183      	cbz	r3, 8023278 <mg_path_is_sane+0x44>
 8023256:	b169      	cbz	r1, 8023274 <mg_path_is_sane+0x40>
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 8023258:	2b2f      	cmp	r3, #47	@ 0x2f
 802325a:	d001      	beq.n	8023260 <mg_path_is_sane+0x2c>
 802325c:	2b5c      	cmp	r3, #92	@ 0x5c
 802325e:	d1f6      	bne.n	802324e <mg_path_is_sane+0x1a>
 8023260:	2901      	cmp	r1, #1
 8023262:	d9f4      	bls.n	802324e <mg_path_is_sane+0x1a>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8023264:	7853      	ldrb	r3, [r2, #1]
 8023266:	2b2e      	cmp	r3, #46	@ 0x2e
 8023268:	d1f1      	bne.n	802324e <mg_path_is_sane+0x1a>
 802326a:	7893      	ldrb	r3, [r2, #2]
 802326c:	2b2e      	cmp	r3, #46	@ 0x2e
 802326e:	d1ee      	bne.n	802324e <mg_path_is_sane+0x1a>
 8023270:	2000      	movs	r0, #0
 8023272:	e002      	b.n	802327a <mg_path_is_sane+0x46>
  return true;
 8023274:	2001      	movs	r0, #1
 8023276:	e000      	b.n	802327a <mg_path_is_sane+0x46>
 8023278:	2001      	movs	r0, #1
}
 802327a:	b002      	add	sp, #8
 802327c:	4770      	bx	lr

0802327e <mg_millis>:
uint64_t mg_millis(void) {
 802327e:	b508      	push	{r3, lr}
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 8023280:	f7f4 ff52 	bl	8018128 <xTaskGetTickCount>
}
 8023284:	2100      	movs	r1, #0
 8023286:	bd08      	pop	{r3, pc}

08023288 <mg_log_prefix>:
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 8023288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802328c:	b092      	sub	sp, #72	@ 0x48
 802328e:	4605      	mov	r5, r0
 8023290:	460c      	mov	r4, r1
 8023292:	4616      	mov	r6, r2
 8023294:	461f      	mov	r7, r3
  const char *p = strrchr(file, '/');
 8023296:	212f      	movs	r1, #47	@ 0x2f
 8023298:	4620      	mov	r0, r4
 802329a:	f006 fc4b 	bl	8029b34 <strrchr>
  if (p == NULL) p = strrchr(file, '\\');
 802329e:	4680      	mov	r8, r0
 80232a0:	b1a8      	cbz	r0, 80232ce <mg_log_prefix+0x46>
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 80232a2:	f7ff ffec 	bl	802327e <mg_millis>
 80232a6:	f1b8 0f00 	cmp.w	r8, #0
 80232aa:	d001      	beq.n	80232b0 <mg_log_prefix+0x28>
 80232ac:	f108 0401 	add.w	r4, r8, #1
 80232b0:	9705      	str	r7, [sp, #20]
 80232b2:	9604      	str	r6, [sp, #16]
 80232b4:	9403      	str	r4, [sp, #12]
 80232b6:	9502      	str	r5, [sp, #8]
 80232b8:	9000      	str	r0, [sp, #0]
 80232ba:	9101      	str	r1, [sp, #4]
 80232bc:	4a0f      	ldr	r2, [pc, #60]	@ (80232fc <mg_log_prefix+0x74>)
 80232be:	2129      	movs	r1, #41	@ 0x29
 80232c0:	a807      	add	r0, sp, #28
 80232c2:	f7fd fbc9 	bl	8020a58 <mg_snprintf>
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 80232c6:	2827      	cmp	r0, #39	@ 0x27
 80232c8:	d90e      	bls.n	80232e8 <mg_log_prefix+0x60>
 80232ca:	2027      	movs	r0, #39	@ 0x27
 80232cc:	e00c      	b.n	80232e8 <mg_log_prefix+0x60>
  if (p == NULL) p = strrchr(file, '\\');
 80232ce:	215c      	movs	r1, #92	@ 0x5c
 80232d0:	4620      	mov	r0, r4
 80232d2:	f006 fc2f 	bl	8029b34 <strrchr>
 80232d6:	4680      	mov	r8, r0
 80232d8:	e7e3      	b.n	80232a2 <mg_log_prefix+0x1a>
  while (n < sizeof(buf)) buf[n++] = ' ';
 80232da:	f100 0348 	add.w	r3, r0, #72	@ 0x48
 80232de:	446b      	add	r3, sp
 80232e0:	2220      	movs	r2, #32
 80232e2:	f803 2c2c 	strb.w	r2, [r3, #-44]
 80232e6:	3001      	adds	r0, #1
 80232e8:	2828      	cmp	r0, #40	@ 0x28
 80232ea:	d9f6      	bls.n	80232da <mg_log_prefix+0x52>
  logs(buf, n - 1);
 80232ec:	1e41      	subs	r1, r0, #1
 80232ee:	a807      	add	r0, sp, #28
 80232f0:	f7fb fe20 	bl	801ef34 <logs>
}
 80232f4:	b012      	add	sp, #72	@ 0x48
 80232f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80232fa:	bf00      	nop
 80232fc:	080370ec 	.word	0x080370ec

08023300 <mg_dns_parse>:
bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8023300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023304:	b084      	sub	sp, #16
 8023306:	4605      	mov	r5, r0
 8023308:	460e      	mov	r6, r1
 802330a:	4690      	mov	r8, r2
  memset(dm, 0, sizeof(*dm));
 802330c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8023310:	2100      	movs	r1, #0
 8023312:	4640      	mov	r0, r8
 8023314:	f006 fbb4 	bl	8029a80 <memset>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8023318:	2e0b      	cmp	r6, #11
 802331a:	f240 808b 	bls.w	8023434 <mg_dns_parse+0x134>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 802331e:	88a8      	ldrh	r0, [r5, #4]
 8023320:	f7ff fcac 	bl	8022c7c <mg_ntohs>
 8023324:	2801      	cmp	r0, #1
 8023326:	f200 8089 	bhi.w	802343c <mg_dns_parse+0x13c>
  num_answers = mg_ntohs(h->num_answers);
 802332a:	88e8      	ldrh	r0, [r5, #6]
 802332c:	f7ff fca6 	bl	8022c7c <mg_ntohs>
 8023330:	4604      	mov	r4, r0
 8023332:	4681      	mov	r9, r0
  if (num_answers > 10) {
 8023334:	280a      	cmp	r0, #10
 8023336:	d905      	bls.n	8023344 <mg_dns_parse+0x44>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8023338:	4b43      	ldr	r3, [pc, #268]	@ (8023448 <mg_dns_parse+0x148>)
 802333a:	681b      	ldr	r3, [r3, #0]
 802333c:	2b02      	cmp	r3, #2
 802333e:	dc1a      	bgt.n	8023376 <mg_dns_parse+0x76>
    num_answers = 10;  // Sanity cap
 8023340:	f04f 090a 	mov.w	r9, #10
  dm->txnid = mg_ntohs(h->txnid);
 8023344:	8828      	ldrh	r0, [r5, #0]
 8023346:	f7ff fc99 	bl	8022c7c <mg_ntohs>
 802334a:	f8a8 0000 	strh.w	r0, [r8]
  size_t i, n, num_answers, ofs = sizeof(*h);
 802334e:	240c      	movs	r4, #12
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8023350:	2700      	movs	r7, #0
 8023352:	88a8      	ldrh	r0, [r5, #4]
 8023354:	f7ff fc92 	bl	8022c7c <mg_ntohs>
 8023358:	42b8      	cmp	r0, r7
 802335a:	d91a      	bls.n	8023392 <mg_dns_parse+0x92>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 802335c:	ab02      	add	r3, sp, #8
 802335e:	9300      	str	r3, [sp, #0]
 8023360:	2301      	movs	r3, #1
 8023362:	4622      	mov	r2, r4
 8023364:	4631      	mov	r1, r6
 8023366:	4628      	mov	r0, r5
 8023368:	f7fc fd89 	bl	801fe7e <mg_dns_parse_rr>
 802336c:	2800      	cmp	r0, #0
 802336e:	d067      	beq.n	8023440 <mg_dns_parse+0x140>
    ofs += n;
 8023370:	4404      	add	r4, r0
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8023372:	3701      	adds	r7, #1
 8023374:	e7ed      	b.n	8023352 <mg_dns_parse+0x52>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8023376:	4b35      	ldr	r3, [pc, #212]	@ (802344c <mg_dns_parse+0x14c>)
 8023378:	f240 4293 	movw	r2, #1171	@ 0x493
 802337c:	4934      	ldr	r1, [pc, #208]	@ (8023450 <mg_dns_parse+0x150>)
 802337e:	2003      	movs	r0, #3
 8023380:	f7ff ff82 	bl	8023288 <mg_log_prefix>
 8023384:	4621      	mov	r1, r4
 8023386:	4833      	ldr	r0, [pc, #204]	@ (8023454 <mg_dns_parse+0x154>)
 8023388:	f7fe f810 	bl	80213ac <mg_log>
    num_answers = 10;  // Sanity cap
 802338c:	f04f 090a 	mov.w	r9, #10
 8023390:	e7d8      	b.n	8023344 <mg_dns_parse+0x44>
  for (i = 0; i < num_answers; i++) {
 8023392:	2700      	movs	r7, #0
 8023394:	e013      	b.n	80233be <mg_dns_parse+0xbe>
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8023396:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802339a:	2a01      	cmp	r2, #1
 802339c:	d12a      	bne.n	80233f4 <mg_dns_parse+0xf4>
 802339e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80233a2:	2a01      	cmp	r2, #1
 80233a4:	d126      	bne.n	80233f4 <mg_dns_parse+0xf4>
      dm->addr.is_ip6 = false;
 80233a6:	2300      	movs	r3, #0
 80233a8:	f888 3017 	strb.w	r3, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 80233ac:	3c04      	subs	r4, #4
 80233ae:	592b      	ldr	r3, [r5, r4]
 80233b0:	f8c8 3004 	str.w	r3, [r8, #4]
      dm->resolved = true;
 80233b4:	2001      	movs	r0, #1
 80233b6:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 80233ba:	e03c      	b.n	8023436 <mg_dns_parse+0x136>
  for (i = 0; i < num_answers; i++) {
 80233bc:	3701      	adds	r7, #1
 80233be:	454f      	cmp	r7, r9
 80233c0:	d236      	bcs.n	8023430 <mg_dns_parse+0x130>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 80233c2:	ab02      	add	r3, sp, #8
 80233c4:	9300      	str	r3, [sp, #0]
 80233c6:	2300      	movs	r3, #0
 80233c8:	4622      	mov	r2, r4
 80233ca:	4631      	mov	r1, r6
 80233cc:	4628      	mov	r0, r5
 80233ce:	f7fc fd56 	bl	801fe7e <mg_dns_parse_rr>
 80233d2:	4682      	mov	sl, r0
 80233d4:	b3b0      	cbz	r0, 8023444 <mg_dns_parse+0x144>
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 80233d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80233da:	9300      	str	r3, [sp, #0]
 80233dc:	f108 0318 	add.w	r3, r8, #24
 80233e0:	4622      	mov	r2, r4
 80233e2:	4631      	mov	r1, r6
 80233e4:	4628      	mov	r0, r5
 80233e6:	f7fc fcdf 	bl	801fda8 <mg_dns_parse_name>
    ofs += n;
 80233ea:	4454      	add	r4, sl
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 80233ec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80233f0:	2b04      	cmp	r3, #4
 80233f2:	d0d0      	beq.n	8023396 <mg_dns_parse+0x96>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 80233f4:	2b10      	cmp	r3, #16
 80233f6:	d1e1      	bne.n	80233bc <mg_dns_parse+0xbc>
 80233f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80233fc:	2b1c      	cmp	r3, #28
 80233fe:	d1dd      	bne.n	80233bc <mg_dns_parse+0xbc>
 8023400:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8023404:	2b01      	cmp	r3, #1
 8023406:	d1d9      	bne.n	80233bc <mg_dns_parse+0xbc>
      dm->addr.is_ip6 = true;
 8023408:	2001      	movs	r0, #1
 802340a:	f888 0017 	strb.w	r0, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 802340e:	3c10      	subs	r4, #16
 8023410:	192b      	adds	r3, r5, r4
 8023412:	592c      	ldr	r4, [r5, r4]
 8023414:	6859      	ldr	r1, [r3, #4]
 8023416:	689a      	ldr	r2, [r3, #8]
 8023418:	68db      	ldr	r3, [r3, #12]
 802341a:	f8c8 4004 	str.w	r4, [r8, #4]
 802341e:	f8c8 1008 	str.w	r1, [r8, #8]
 8023422:	f8c8 200c 	str.w	r2, [r8, #12]
 8023426:	f8c8 3010 	str.w	r3, [r8, #16]
      dm->resolved = true;
 802342a:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 802342e:	e002      	b.n	8023436 <mg_dns_parse+0x136>
  return true;
 8023430:	2001      	movs	r0, #1
 8023432:	e000      	b.n	8023436 <mg_dns_parse+0x136>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8023434:	2000      	movs	r0, #0
}
 8023436:	b004      	add	sp, #16
 8023438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 802343c:	2000      	movs	r0, #0
 802343e:	e7fa      	b.n	8023436 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8023440:	2000      	movs	r0, #0
 8023442:	e7f8      	b.n	8023436 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8023444:	2000      	movs	r0, #0
 8023446:	e7f6      	b.n	8023436 <mg_dns_parse+0x136>
 8023448:	200000a8 	.word	0x200000a8
 802344c:	08037b78 	.word	0x08037b78
 8023450:	08037100 	.word	0x08037100
 8023454:	08037130 	.word	0x08037130

08023458 <mg_error>:
void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8023458:	b40e      	push	{r1, r2, r3}
 802345a:	b510      	push	{r4, lr}
 802345c:	b093      	sub	sp, #76	@ 0x4c
 802345e:	4604      	mov	r4, r0
 8023460:	ab15      	add	r3, sp, #84	@ 0x54
 8023462:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8023466:	9301      	str	r3, [sp, #4]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8023468:	ab01      	add	r3, sp, #4
 802346a:	2140      	movs	r1, #64	@ 0x40
 802346c:	a802      	add	r0, sp, #8
 802346e:	f7fd ffdb 	bl	8021428 <mg_vsnprintf>
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8023472:	4b11      	ldr	r3, [pc, #68]	@ (80234b8 <mg_error+0x60>)
 8023474:	681b      	ldr	r3, [r3, #0]
 8023476:	2b00      	cmp	r3, #0
 8023478:	dc0f      	bgt.n	802349a <mg_error+0x42>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 802347a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802347e:	f043 0320 	orr.w	r3, r3, #32
 8023482:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8023486:	aa02      	add	r2, sp, #8
 8023488:	2100      	movs	r1, #0
 802348a:	4620      	mov	r0, r4
 802348c:	f7fc fd46 	bl	801ff1c <mg_call>
}
 8023490:	b013      	add	sp, #76	@ 0x4c
 8023492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023496:	b003      	add	sp, #12
 8023498:	4770      	bx	lr
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 802349a:	4b08      	ldr	r3, [pc, #32]	@ (80234bc <mg_error+0x64>)
 802349c:	f240 5253 	movw	r2, #1363	@ 0x553
 80234a0:	4907      	ldr	r1, [pc, #28]	@ (80234c0 <mg_error+0x68>)
 80234a2:	2001      	movs	r0, #1
 80234a4:	f7ff fef0 	bl	8023288 <mg_log_prefix>
 80234a8:	ab02      	add	r3, sp, #8
 80234aa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80234ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80234ae:	4805      	ldr	r0, [pc, #20]	@ (80234c4 <mg_error+0x6c>)
 80234b0:	f7fd ff7c 	bl	80213ac <mg_log>
 80234b4:	e7e1      	b.n	802347a <mg_error+0x22>
 80234b6:	bf00      	nop
 80234b8:	200000a8 	.word	0x200000a8
 80234bc:	08037b54 	.word	0x08037b54
 80234c0:	08037100 	.word	0x08037100
 80234c4:	0803715c 	.word	0x0803715c

080234c8 <handle_tls_recv>:
static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 80234c8:	b570      	push	{r4, r5, r6, lr}
 80234ca:	b082      	sub	sp, #8
 80234cc:	4606      	mov	r6, r0
 80234ce:	460c      	mov	r4, r1
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 80234d0:	6809      	ldr	r1, [r1, #0]
 80234d2:	68a5      	ldr	r5, [r4, #8]
 80234d4:	6862      	ldr	r2, [r4, #4]
 80234d6:	1b52      	subs	r2, r2, r5
 80234d8:	4429      	add	r1, r5
 80234da:	f7ff fa07 	bl	80228ec <mg_tls_recv>
 80234de:	9001      	str	r0, [sp, #4]
  if (n == MG_IO_ERR) {
 80234e0:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 80234e4:	d003      	beq.n	80234ee <handle_tls_recv+0x26>
  } else if (n > 0) {
 80234e6:	2800      	cmp	r0, #0
 80234e8:	dc06      	bgt.n	80234f8 <handle_tls_recv+0x30>
}
 80234ea:	b002      	add	sp, #8
 80234ec:	bd70      	pop	{r4, r5, r6, pc}
    mg_error(c, "TLS recv error");
 80234ee:	4906      	ldr	r1, [pc, #24]	@ (8023508 <handle_tls_recv+0x40>)
 80234f0:	4630      	mov	r0, r6
 80234f2:	f7ff ffb1 	bl	8023458 <mg_error>
 80234f6:	e7f8      	b.n	80234ea <handle_tls_recv+0x22>
    io->len += (size_t) n;
 80234f8:	4405      	add	r5, r0
 80234fa:	60a5      	str	r5, [r4, #8]
    mg_call(c, MG_EV_READ, &n);
 80234fc:	aa01      	add	r2, sp, #4
 80234fe:	2107      	movs	r1, #7
 8023500:	4630      	mov	r0, r6
 8023502:	f7fc fd0b 	bl	801ff1c <mg_call>
}
 8023506:	e7f0      	b.n	80234ea <handle_tls_recv+0x22>
 8023508:	08037168 	.word	0x08037168

0802350c <http_cb>:
static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 802350c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023510:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8023514:	4607      	mov	r7, r0
 8023516:	468a      	mov	sl, r1
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 8023518:	2907      	cmp	r1, #7
 802351a:	f000 80e3 	beq.w	80236e4 <http_cb+0x1d8>
 802351e:	2909      	cmp	r1, #9
 8023520:	f000 814a 	beq.w	80237b8 <http_cb+0x2ac>
 8023524:	2902      	cmp	r1, #2
 8023526:	f040 80d9 	bne.w	80236dc <http_cb+0x1d0>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 802352a:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 802352e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8023532:	f023 030b 	bic.w	r3, r3, #11
 8023536:	04db      	lsls	r3, r3, #19
 8023538:	0cdb      	lsrs	r3, r3, #19
 802353a:	2b04      	cmp	r3, #4
 802353c:	f040 80ce 	bne.w	80236dc <http_cb+0x1d0>
       c->recv.len > 0)) {  // see #2796
 8023540:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8023542:	2b00      	cmp	r3, #0
 8023544:	f000 80ca 	beq.w	80236dc <http_cb+0x1d0>
 8023548:	f04f 0900 	mov.w	r9, #0
 802354c:	e0cc      	b.n	80236e8 <http_cb+0x1dc>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 802354e:	4b9f      	ldr	r3, [pc, #636]	@ (80237cc <http_cb+0x2c0>)
 8023550:	681b      	ldr	r3, [r3, #0]
 8023552:	2b00      	cmp	r3, #0
 8023554:	dc11      	bgt.n	802357a <http_cb+0x6e>
        c->is_draining = 1;
 8023556:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 802355a:	f043 0310 	orr.w	r3, r3, #16
 802355e:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 8023562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8023564:	eba3 0109 	sub.w	r1, r3, r9
 8023568:	2910      	cmp	r1, #16
 802356a:	bf28      	it	cs
 802356c:	2110      	movcs	r1, #16
 802356e:	4620      	mov	r0, r4
 8023570:	f7fd f87e 	bl	8020670 <mg_hexdump>
        c->recv.len = 0;
 8023574:	2300      	movs	r3, #0
 8023576:	643b      	str	r3, [r7, #64]	@ 0x40
        return;
 8023578:	e0b0      	b.n	80236dc <http_cb+0x1d0>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 802357a:	4b95      	ldr	r3, [pc, #596]	@ (80237d0 <http_cb+0x2c4>)
 802357c:	f640 42a3 	movw	r2, #3235	@ 0xca3
 8023580:	4994      	ldr	r1, [pc, #592]	@ (80237d4 <http_cb+0x2c8>)
 8023582:	2001      	movs	r0, #1
 8023584:	f7ff fe80 	bl	8023288 <mg_log_prefix>
 8023588:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802358a:	4893      	ldr	r0, [pc, #588]	@ (80237d8 <http_cb+0x2cc>)
 802358c:	f7fd ff0e 	bl	80213ac <mg_log>
 8023590:	e7e1      	b.n	8023556 <http_cb+0x4a>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 8023592:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8023594:	eba3 0309 	sub.w	r3, r3, r9
 8023598:	9387      	str	r3, [sp, #540]	@ 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 802359a:	9a82      	ldr	r2, [sp, #520]	@ 0x208
 802359c:	9986      	ldr	r1, [sp, #536]	@ 0x218
 802359e:	1a52      	subs	r2, r2, r1
 80235a0:	1a9b      	subs	r3, r3, r2
 80235a2:	9383      	str	r3, [sp, #524]	@ 0x20c
 80235a4:	e0bf      	b.n	8023726 <http_cb+0x21a>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 80235a6:	ad88      	add	r5, sp, #544	@ 0x220
 80235a8:	498c      	ldr	r1, [pc, #560]	@ (80237dc <http_cb+0x2d0>)
 80235aa:	4628      	mov	r0, r5
 80235ac:	f7fe f834 	bl	8021618 <mg_str_s>
 80235b0:	e895 000c 	ldmia.w	r5, {r2, r3}
 80235b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80235b8:	f7fe f8ba 	bl	8021730 <mg_strcasecmp>
 80235bc:	4604      	mov	r4, r0
 80235be:	b950      	cbnz	r0, 80235d6 <http_cb+0xca>
        char *s = (char *) c->recv.buf + ofs + n;
 80235c0:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 80235c2:	eb08 0309 	add.w	r3, r8, r9
 80235c6:	441d      	add	r5, r3
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 80235c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80235ca:	eba3 0309 	sub.w	r3, r3, r9
 80235ce:	eba3 0b08 	sub.w	fp, r3, r8
 80235d2:	4606      	mov	r6, r0
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 80235d4:	e04a      	b.n	802366c <http_cb+0x160>
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 80235d6:	4982      	ldr	r1, [pc, #520]	@ (80237e0 <http_cb+0x2d4>)
 80235d8:	4638      	mov	r0, r7
 80235da:	f7ff ff3d 	bl	8023458 <mg_error>
          return;
 80235de:	e07d      	b.n	80236dc <http_cb+0x1d0>
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 80235e0:	2205      	movs	r2, #5
 80235e2:	4980      	ldr	r1, [pc, #512]	@ (80237e4 <http_cb+0x2d8>)
 80235e4:	9802      	ldr	r0, [sp, #8]
 80235e6:	f7fa fef1 	bl	801e3cc <mg_ncasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 80235ea:	2800      	cmp	r0, #0
 80235ec:	d032      	beq.n	8023654 <http_cb+0x148>
 80235ee:	ac8a      	add	r4, sp, #552	@ 0x228
 80235f0:	497d      	ldr	r1, [pc, #500]	@ (80237e8 <http_cb+0x2dc>)
 80235f2:	4620      	mov	r0, r4
 80235f4:	f7fe f810 	bl	8021618 <mg_str_s>
 80235f8:	a902      	add	r1, sp, #8
 80235fa:	e894 000c 	ldmia.w	r4, {r2, r3}
 80235fe:	c903      	ldmia	r1, {r0, r1}
 8023600:	f7fe f896 	bl	8021730 <mg_strcasecmp>
 8023604:	b9c0      	cbnz	r0, 8023638 <http_cb+0x12c>
          ofs += (size_t) n;  // this request has been processed
 8023606:	44c1      	add	r9, r8
          mg_http_reply(c, 411, "", "");
 8023608:	4a78      	ldr	r2, [pc, #480]	@ (80237ec <http_cb+0x2e0>)
 802360a:	4613      	mov	r3, r2
 802360c:	f240 119b 	movw	r1, #411	@ 0x19b
 8023610:	4638      	mov	r0, r7
 8023612:	f7fd ff1f 	bl	8021454 <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 8023616:	4b6d      	ldr	r3, [pc, #436]	@ (80237cc <http_cb+0x2c0>)
 8023618:	681b      	ldr	r3, [r3, #0]
 802361a:	2b00      	cmp	r3, #0
 802361c:	f340 8092 	ble.w	8023744 <http_cb+0x238>
 8023620:	4b6b      	ldr	r3, [pc, #428]	@ (80237d0 <http_cb+0x2c4>)
 8023622:	f640 42ca 	movw	r2, #3274	@ 0xcca
 8023626:	496b      	ldr	r1, [pc, #428]	@ (80237d4 <http_cb+0x2c8>)
 8023628:	2001      	movs	r0, #1
 802362a:	f7ff fe2d 	bl	8023288 <mg_log_prefix>
 802362e:	4970      	ldr	r1, [pc, #448]	@ (80237f0 <http_cb+0x2e4>)
 8023630:	4870      	ldr	r0, [pc, #448]	@ (80237f4 <http_cb+0x2e8>)
 8023632:	f7fd febb 	bl	80213ac <mg_log>
      if (is_chunked) {
 8023636:	e085      	b.n	8023744 <http_cb+0x238>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8023638:	ac8c      	add	r4, sp, #560	@ 0x230
 802363a:	496f      	ldr	r1, [pc, #444]	@ (80237f8 <http_cb+0x2ec>)
 802363c:	4620      	mov	r0, r4
 802363e:	f7fd ffeb 	bl	8021618 <mg_str_s>
 8023642:	a902      	add	r1, sp, #8
 8023644:	e894 000c 	ldmia.w	r4, {r2, r3}
 8023648:	c903      	ldmia	r1, {r0, r1}
 802364a:	f7fe f871 	bl	8021730 <mg_strcasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 802364e:	2800      	cmp	r0, #0
 8023650:	d178      	bne.n	8023744 <http_cb+0x238>
 8023652:	e7d8      	b.n	8023606 <http_cb+0xfa>
          int status = mg_http_status(&hm);
 8023654:	a802      	add	r0, sp, #8
 8023656:	f7fc fd53 	bl	8020100 <mg_http_status>
          require_content_len = status >= 200 && status != 204 && status != 304;
 802365a:	28c7      	cmp	r0, #199	@ 0xc7
 802365c:	dd72      	ble.n	8023744 <http_cb+0x238>
 802365e:	28cc      	cmp	r0, #204	@ 0xcc
 8023660:	d070      	beq.n	8023744 <http_cb+0x238>
 8023662:	f5b0 7f98 	cmp.w	r0, #304	@ 0x130
 8023666:	d1cf      	bne.n	8023608 <http_cb+0xfc>
 8023668:	e06c      	b.n	8023744 <http_cb+0x238>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 802366a:	4406      	add	r6, r0
 802366c:	ab01      	add	r3, sp, #4
 802366e:	466a      	mov	r2, sp
 8023670:	ebab 0106 	sub.w	r1, fp, r6
 8023674:	19a8      	adds	r0, r5, r6
 8023676:	f7fe ff09 	bl	802248c <skip_chunk>
 802367a:	2800      	cmp	r0, #0
 802367c:	dd02      	ble.n	8023684 <http_cb+0x178>
 802367e:	9b01      	ldr	r3, [sp, #4]
 8023680:	2b00      	cmp	r3, #0
 8023682:	d1f2      	bne.n	802366a <http_cb+0x15e>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8023684:	b338      	cbz	r0, 80236d6 <http_cb+0x1ca>
        if (cl < 0) {
 8023686:	2800      	cmp	r0, #0
 8023688:	db21      	blt.n	80236ce <http_cb+0x1c2>
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 802368a:	2300      	movs	r3, #0
 802368c:	9383      	str	r3, [sp, #524]	@ 0x20c
 802368e:	f8cd 821c 	str.w	r8, [sp, #540]	@ 0x21c
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8023692:	ab01      	add	r3, sp, #4
 8023694:	466a      	mov	r2, sp
 8023696:	ebab 0104 	sub.w	r1, fp, r4
 802369a:	1928      	adds	r0, r5, r4
 802369c:	f7fe fef6 	bl	802248c <skip_chunk>
 80236a0:	1e06      	subs	r6, r0, #0
 80236a2:	dd11      	ble.n	80236c8 <http_cb+0x1bc>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 80236a4:	9883      	ldr	r0, [sp, #524]	@ 0x20c
 80236a6:	9900      	ldr	r1, [sp, #0]
 80236a8:	4421      	add	r1, r4
 80236aa:	9a01      	ldr	r2, [sp, #4]
 80236ac:	4429      	add	r1, r5
 80236ae:	4428      	add	r0, r5
 80236b0:	f006 f9cc 	bl	8029a4c <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 80236b4:	4434      	add	r4, r6
 80236b6:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 80236b8:	9b01      	ldr	r3, [sp, #4]
 80236ba:	441a      	add	r2, r3
 80236bc:	9283      	str	r2, [sp, #524]	@ 0x20c
 80236be:	9a87      	ldr	r2, [sp, #540]	@ 0x21c
 80236c0:	441a      	add	r2, r3
 80236c2:	9287      	str	r2, [sp, #540]	@ 0x21c
          if (dl == 0) break;
 80236c4:	2b00      	cmp	r3, #0
 80236c6:	d1e4      	bne.n	8023692 <http_cb+0x186>
        ofs += (size_t) (n + o);
 80236c8:	4444      	add	r4, r8
 80236ca:	44a1      	add	r9, r4
 80236cc:	e044      	b.n	8023758 <http_cb+0x24c>
          mg_error(c, "Invalid chunk");
 80236ce:	494b      	ldr	r1, [pc, #300]	@ (80237fc <http_cb+0x2f0>)
 80236d0:	4638      	mov	r0, r7
 80236d2:	f7ff fec1 	bl	8023458 <mg_error>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 80236d6:	f1b9 0f00 	cmp.w	r9, #0
 80236da:	d170      	bne.n	80237be <http_cb+0x2b2>
}
 80236dc:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 80236e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236e4:	f04f 0900 	mov.w	r9, #0
    while (c->is_resp == 0 && ofs < c->recv.len) {
 80236e8:	f997 30ad 	ldrsb.w	r3, [r7, #173]	@ 0xad
 80236ec:	2b00      	cmp	r3, #0
 80236ee:	dbf2      	blt.n	80236d6 <http_cb+0x1ca>
 80236f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80236f2:	4549      	cmp	r1, r9
 80236f4:	d9ef      	bls.n	80236d6 <http_cb+0x1ca>
      const char *buf = (char *) c->recv.buf + ofs;
 80236f6:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80236f8:	444c      	add	r4, r9
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 80236fa:	aa02      	add	r2, sp, #8
 80236fc:	eba1 0109 	sub.w	r1, r1, r9
 8023700:	4620      	mov	r0, r4
 8023702:	f7fe f845 	bl	8021790 <mg_http_parse>
      if (n < 0) {
 8023706:	f1b0 0800 	subs.w	r8, r0, #0
 802370a:	f6ff af20 	blt.w	802354e <http_cb+0x42>
      if (n == 0) break;                 // Request is not buffered yet
 802370e:	f1b8 0f00 	cmp.w	r8, #0
 8023712:	d0e0      	beq.n	80236d6 <http_cb+0x1ca>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 8023714:	aa02      	add	r2, sp, #8
 8023716:	210a      	movs	r1, #10
 8023718:	4638      	mov	r0, r7
 802371a:	f7fc fbff 	bl	801ff1c <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 802371e:	f1ba 0f09 	cmp.w	sl, #9
 8023722:	f43f af36 	beq.w	8023592 <http_cb+0x86>
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8023726:	4936      	ldr	r1, [pc, #216]	@ (8023800 <http_cb+0x2f4>)
 8023728:	a802      	add	r0, sp, #8
 802372a:	f7fc fcbf 	bl	80200ac <mg_http_get_header>
 802372e:	4604      	mov	r4, r0
 8023730:	2800      	cmp	r0, #0
 8023732:	f47f af38 	bne.w	80235a6 <http_cb+0x9a>
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 8023736:	4933      	ldr	r1, [pc, #204]	@ (8023804 <http_cb+0x2f8>)
 8023738:	a802      	add	r0, sp, #8
 802373a:	f7fc fcb7 	bl	80200ac <mg_http_get_header>
 802373e:	2800      	cmp	r0, #0
 8023740:	f43f af4e 	beq.w	80235e0 <http_cb+0xd4>
        size_t len = c->recv.len - ofs - (size_t) n;
 8023744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8023746:	eba3 0309 	sub.w	r3, r3, r9
 802374a:	eba3 0308 	sub.w	r3, r3, r8
        if (hm.body.len > len) break;  // Buffer more data
 802374e:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 8023750:	429a      	cmp	r2, r3
 8023752:	d8c0      	bhi.n	80236d6 <http_cb+0x1ca>
        ofs += (size_t) n + hm.body.len;
 8023754:	4490      	add	r8, r2
 8023756:	44c1      	add	r9, r8
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8023758:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 802375c:	f013 0f04 	tst.w	r3, #4
 8023760:	d005      	beq.n	802376e <http_cb+0x262>
 8023762:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8023766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802376a:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 802376e:	aa02      	add	r2, sp, #8
 8023770:	210b      	movs	r1, #11
 8023772:	4638      	mov	r0, r7
 8023774:	f7fc fbd2 	bl	801ff1c <mg_call>
      if (c->is_accepted) {
 8023778:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 802377c:	f013 0f04 	tst.w	r3, #4
 8023780:	d0b2      	beq.n	80236e8 <http_cb+0x1dc>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 8023782:	4921      	ldr	r1, [pc, #132]	@ (8023808 <http_cb+0x2fc>)
 8023784:	a802      	add	r0, sp, #8
 8023786:	f7fc fc91 	bl	80200ac <mg_http_get_header>
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 802378a:	4605      	mov	r5, r0
 802378c:	2800      	cmp	r0, #0
 802378e:	d0ab      	beq.n	80236e8 <http_cb+0x1dc>
 8023790:	ac8e      	add	r4, sp, #568	@ 0x238
 8023792:	491e      	ldr	r1, [pc, #120]	@ (802380c <http_cb+0x300>)
 8023794:	4620      	mov	r0, r4
 8023796:	f7fd ff3f 	bl	8021618 <mg_str_s>
 802379a:	e894 000c 	ldmia.w	r4, {r2, r3}
 802379e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80237a2:	f7fd ffc5 	bl	8021730 <mg_strcasecmp>
 80237a6:	2800      	cmp	r0, #0
 80237a8:	d19e      	bne.n	80236e8 <http_cb+0x1dc>
          c->is_draining = 1;  // honor "Connection: close"
 80237aa:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80237ae:	f043 0310 	orr.w	r3, r3, #16
 80237b2:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
          break;
 80237b6:	e78e      	b.n	80236d6 <http_cb+0x1ca>
 80237b8:	f04f 0900 	mov.w	r9, #0
 80237bc:	e794      	b.n	80236e8 <http_cb+0x1dc>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 80237be:	464a      	mov	r2, r9
 80237c0:	2100      	movs	r1, #0
 80237c2:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80237c6:	f7ff f964 	bl	8022a92 <mg_iobuf_del>
 80237ca:	e787      	b.n	80236dc <http_cb+0x1d0>
 80237cc:	200000a8 	.word	0x200000a8
 80237d0:	08037b4c 	.word	0x08037b4c
 80237d4:	08037100 	.word	0x08037100
 80237d8:	08037178 	.word	0x08037178
 80237dc:	08037190 	.word	0x08037190
 80237e0:	08037198 	.word	0x08037198
 80237e4:	0803691c 	.word	0x0803691c
 80237e8:	08033504 	.word	0x08033504
 80237ec:	080337f8 	.word	0x080337f8
 80237f0:	080371c4 	.word	0x080371c4
 80237f4:	08037418 	.word	0x08037418
 80237f8:	08036924 	.word	0x08036924
 80237fc:	080371e8 	.word	0x080371e8
 8023800:	080371a0 	.word	0x080371a0
 8023804:	080371b4 	.word	0x080371b4
 8023808:	080371f8 	.word	0x080371f8
 802380c:	08037204 	.word	0x08037204

08023810 <uri_to_path2>:
                        char *path, size_t path_size) {
 8023810:	b082      	sub	sp, #8
 8023812:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023816:	b086      	sub	sp, #24
 8023818:	4681      	mov	r9, r0
 802381a:	460e      	mov	r6, r1
 802381c:	4690      	mov	r8, r2
 802381e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023820:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8023822:	9f14      	ldr	r7, [sp, #80]	@ 0x50
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8023824:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023826:	9300      	str	r3, [sp, #0]
 8023828:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802382a:	4a6f      	ldr	r2, [pc, #444]	@ (80239e8 <uri_to_path2+0x1d8>)
 802382c:	4639      	mov	r1, r7
 802382e:	4628      	mov	r0, r5
 8023830:	f7fd f912 	bl	8020a58 <mg_snprintf>
  if (n + 2 >= path_size) {
 8023834:	1c83      	adds	r3, r0, #2
 8023836:	42bb      	cmp	r3, r7
 8023838:	d227      	bcs.n	802388a <uri_to_path2+0x7a>
  path[path_size - 1] = '\0';
 802383a:	f107 3aff 	add.w	sl, r7, #4294967295	@ 0xffffffff
 802383e:	2300      	movs	r3, #0
 8023840:	f805 300a 	strb.w	r3, [r5, sl]
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8023844:	b150      	cbz	r0, 802385c <uri_to_path2+0x4c>
 8023846:	182b      	adds	r3, r5, r0
 8023848:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802384c:	2b2f      	cmp	r3, #47	@ 0x2f
 802384e:	d005      	beq.n	802385c <uri_to_path2+0x4c>
 8023850:	1c43      	adds	r3, r0, #1
 8023852:	222f      	movs	r2, #47	@ 0x2f
 8023854:	542a      	strb	r2, [r5, r0]
 8023856:	2200      	movs	r2, #0
 8023858:	54ea      	strb	r2, [r5, r3]
 802385a:	4618      	mov	r0, r3
  if (url.len < hm->uri.len) {
 802385c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802385e:	68f1      	ldr	r1, [r6, #12]
 8023860:	428c      	cmp	r4, r1
 8023862:	d31c      	bcc.n	802389e <uri_to_path2+0x8e>
  path[path_size - 1] = '\0';  // Double-check
 8023864:	2300      	movs	r3, #0
 8023866:	f805 300a 	strb.w	r3, [r5, sl]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 802386a:	ac02      	add	r4, sp, #8
 802386c:	463a      	mov	r2, r7
 802386e:	4629      	mov	r1, r5
 8023870:	4620      	mov	r0, r4
 8023872:	f7fd fedd 	bl	8021630 <mg_str_n>
 8023876:	e894 0003 	ldmia.w	r4, {r0, r1}
 802387a:	f7ff fcdb 	bl	8023234 <mg_path_is_sane>
 802387e:	b1c0      	cbz	r0, 80238b2 <uri_to_path2+0xa2>
  n = strlen(path);
 8023880:	4628      	mov	r0, r5
 8023882:	f7ec fd0d 	bl	80102a0 <strlen>
 8023886:	4604      	mov	r4, r0
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8023888:	e020      	b.n	80238cc <uri_to_path2+0xbc>
    mg_http_reply(c, 400, "", "Exceeded path size");
 802388a:	4b58      	ldr	r3, [pc, #352]	@ (80239ec <uri_to_path2+0x1dc>)
 802388c:	4a58      	ldr	r2, [pc, #352]	@ (80239f0 <uri_to_path2+0x1e0>)
 802388e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8023892:	4648      	mov	r0, r9
 8023894:	f7fd fdde 	bl	8021454 <mg_http_reply>
    return -1;
 8023898:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802389c:	e046      	b.n	802392c <uri_to_path2+0x11c>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 802389e:	2300      	movs	r3, #0
 80238a0:	9300      	str	r3, [sp, #0]
 80238a2:	1a3b      	subs	r3, r7, r0
 80238a4:	182a      	adds	r2, r5, r0
 80238a6:	1b09      	subs	r1, r1, r4
 80238a8:	68b0      	ldr	r0, [r6, #8]
 80238aa:	4420      	add	r0, r4
 80238ac:	f7fe fcd4 	bl	8022258 <mg_url_decode>
 80238b0:	e7d8      	b.n	8023864 <uri_to_path2+0x54>
    mg_http_reply(c, 400, "", "Invalid path");
 80238b2:	4b50      	ldr	r3, [pc, #320]	@ (80239f4 <uri_to_path2+0x1e4>)
 80238b4:	4a4e      	ldr	r2, [pc, #312]	@ (80239f0 <uri_to_path2+0x1e0>)
 80238b6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80238ba:	4648      	mov	r0, r9
 80238bc:	f7fd fdca 	bl	8021454 <mg_http_reply>
    return -1;
 80238c0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80238c4:	e032      	b.n	802392c <uri_to_path2+0x11c>
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 80238c6:	2200      	movs	r2, #0
 80238c8:	54ea      	strb	r2, [r5, r3]
 80238ca:	461c      	mov	r4, r3
 80238cc:	2c01      	cmp	r4, #1
 80238ce:	d905      	bls.n	80238dc <uri_to_path2+0xcc>
 80238d0:	1e63      	subs	r3, r4, #1
 80238d2:	f815 c003 	ldrb.w	ip, [r5, r3]
 80238d6:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 80238da:	d0f4      	beq.n	80238c6 <uri_to_path2+0xb6>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 80238dc:	f10d 0a10 	add.w	sl, sp, #16
 80238e0:	4945      	ldr	r1, [pc, #276]	@ (80239f8 <uri_to_path2+0x1e8>)
 80238e2:	4650      	mov	r0, sl
 80238e4:	f7fd fe98 	bl	8021618 <mg_str_s>
 80238e8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80238ec:	f106 0108 	add.w	r1, r6, #8
 80238f0:	c903      	ldmia	r1, {r0, r1}
 80238f2:	f7fd fef3 	bl	80216dc <mg_strcmp>
                                               : fs->st(path, NULL, NULL);
 80238f6:	b1f8      	cbz	r0, 8023938 <uri_to_path2+0x128>
 80238f8:	f8d8 3000 	ldr.w	r3, [r8]
 80238fc:	2200      	movs	r2, #0
 80238fe:	4611      	mov	r1, r2
 8023900:	4628      	mov	r0, r5
 8023902:	4798      	blx	r3
 8023904:	4682      	mov	sl, r0
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8023906:	4b3d      	ldr	r3, [pc, #244]	@ (80239fc <uri_to_path2+0x1ec>)
 8023908:	681b      	ldr	r3, [r3, #0]
 802390a:	2b03      	cmp	r3, #3
 802390c:	dc17      	bgt.n	802393e <uri_to_path2+0x12e>
  if (flags == 0) {
 802390e:	f1ba 0f00 	cmp.w	sl, #0
 8023912:	d00b      	beq.n	802392c <uri_to_path2+0x11c>
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8023914:	f01a 0104 	ands.w	r1, sl, #4
 8023918:	d007      	beq.n	802392a <uri_to_path2+0x11a>
 802391a:	68f2      	ldr	r2, [r6, #12]
 802391c:	b12a      	cbz	r2, 802392a <uri_to_path2+0x11a>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 802391e:	68b3      	ldr	r3, [r6, #8]
 8023920:	1898      	adds	r0, r3, r2
 8023922:	f810 0c01 	ldrb.w	r0, [r0, #-1]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8023926:	282f      	cmp	r0, #47	@ 0x2f
 8023928:	d11b      	bne.n	8023962 <uri_to_path2+0x152>
  } else if (flags & MG_FS_DIR) {
 802392a:	bb39      	cbnz	r1, 802397c <uri_to_path2+0x16c>
}
 802392c:	4650      	mov	r0, sl
 802392e:	b006      	add	sp, #24
 8023930:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023934:	b002      	add	sp, #8
 8023936:	4770      	bx	lr
                                               : fs->st(path, NULL, NULL);
 8023938:	f04f 0a04 	mov.w	sl, #4
 802393c:	e7e3      	b.n	8023906 <uri_to_path2+0xf6>
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 802393e:	4b30      	ldr	r3, [pc, #192]	@ (8023a00 <uri_to_path2+0x1f0>)
 8023940:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 8023944:	492f      	ldr	r1, [pc, #188]	@ (8023a04 <uri_to_path2+0x1f4>)
 8023946:	2004      	movs	r0, #4
 8023948:	f7ff fc9e 	bl	8023288 <mg_log_prefix>
 802394c:	f8cd a004 	str.w	sl, [sp, #4]
 8023950:	9500      	str	r5, [sp, #0]
 8023952:	68b3      	ldr	r3, [r6, #8]
 8023954:	68f2      	ldr	r2, [r6, #12]
 8023956:	f8d9 1034 	ldr.w	r1, [r9, #52]	@ 0x34
 802395a:	482b      	ldr	r0, [pc, #172]	@ (8023a08 <uri_to_path2+0x1f8>)
 802395c:	f7fd fd26 	bl	80213ac <mg_log>
 8023960:	e7d5      	b.n	802390e <uri_to_path2+0xfe>
    mg_printf(c,
 8023962:	492a      	ldr	r1, [pc, #168]	@ (8023a0c <uri_to_path2+0x1fc>)
 8023964:	4648      	mov	r0, r9
 8023966:	f7fd fd4f 	bl	8021408 <mg_printf>
    c->is_resp = 0;
 802396a:	f899 30ad 	ldrb.w	r3, [r9, #173]	@ 0xad
 802396e:	f36f 13c7 	bfc	r3, #7, #1
 8023972:	f889 30ad 	strb.w	r3, [r9, #173]	@ 0xad
    flags = -1;
 8023976:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802397a:	e7d7      	b.n	802392c <uri_to_path2+0x11c>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 802397c:	192e      	adds	r6, r5, r4
 802397e:	1b3f      	subs	r7, r7, r4
 8023980:	4a23      	ldr	r2, [pc, #140]	@ (8023a10 <uri_to_path2+0x200>)
 8023982:	4639      	mov	r1, r7
 8023984:	4630      	mov	r0, r6
 8023986:	f7fd f867 	bl	8020a58 <mg_snprintf>
 802398a:	b130      	cbz	r0, 802399a <uri_to_path2+0x18a>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 802398c:	f8d8 3000 	ldr.w	r3, [r8]
 8023990:	2200      	movs	r2, #0
 8023992:	4611      	mov	r1, r2
 8023994:	4628      	mov	r0, r5
 8023996:	4798      	blx	r3
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8023998:	bb08      	cbnz	r0, 80239de <uri_to_path2+0x1ce>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 802399a:	4a1e      	ldr	r2, [pc, #120]	@ (8023a14 <uri_to_path2+0x204>)
 802399c:	4639      	mov	r1, r7
 802399e:	4630      	mov	r0, r6
 80239a0:	f7fd f85a 	bl	8020a58 <mg_snprintf>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80239a4:	b130      	cbz	r0, 80239b4 <uri_to_path2+0x1a4>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 80239a6:	f8d8 3000 	ldr.w	r3, [r8]
 80239aa:	2200      	movs	r2, #0
 80239ac:	4611      	mov	r1, r2
 80239ae:	4628      	mov	r0, r5
 80239b0:	4798      	blx	r3
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 80239b2:	b9b0      	cbnz	r0, 80239e2 <uri_to_path2+0x1d2>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 80239b4:	4a18      	ldr	r2, [pc, #96]	@ (8023a18 <uri_to_path2+0x208>)
 80239b6:	4639      	mov	r1, r7
 80239b8:	4630      	mov	r0, r6
 80239ba:	f7fd f84d 	bl	8020a58 <mg_snprintf>
 80239be:	b158      	cbz	r0, 80239d8 <uri_to_path2+0x1c8>
                (tmp = fs->st(path, NULL, NULL)) !=
 80239c0:	f8d8 3000 	ldr.w	r3, [r8]
 80239c4:	2200      	movs	r2, #0
 80239c6:	4611      	mov	r1, r2
 80239c8:	4628      	mov	r0, r5
 80239ca:	4798      	blx	r3
                    0 &&
 80239cc:	b120      	cbz	r0, 80239d8 <uri_to_path2+0x1c8>
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 80239ce:	340b      	adds	r4, #11
 80239d0:	2200      	movs	r2, #0
 80239d2:	552a      	strb	r2, [r5, r4]
      flags = tmp;
 80239d4:	4682      	mov	sl, r0
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 80239d6:	e7a9      	b.n	802392c <uri_to_path2+0x11c>
      path[n] = '\0';  // Remove appended index file name
 80239d8:	2300      	movs	r3, #0
 80239da:	7033      	strb	r3, [r6, #0]
 80239dc:	e7a6      	b.n	802392c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80239de:	4682      	mov	sl, r0
 80239e0:	e7a4      	b.n	802392c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 80239e2:	4682      	mov	sl, r0
 80239e4:	e7a2      	b.n	802392c <uri_to_path2+0x11c>
 80239e6:	bf00      	nop
 80239e8:	08036874 	.word	0x08036874
 80239ec:	0803720c 	.word	0x0803720c
 80239f0:	080337f8 	.word	0x080337f8
 80239f4:	08037220 	.word	0x08037220
 80239f8:	08036920 	.word	0x08036920
 80239fc:	200000a8 	.word	0x200000a8
 8023a00:	08037b3c 	.word	0x08037b3c
 8023a04:	08037100 	.word	0x08037100
 8023a08:	08037230 	.word	0x08037230
 8023a0c:	08037244 	.word	0x08037244
 8023a10:	08037280 	.word	0x08037280
 8023a14:	0803728c 	.word	0x0803728c
 8023a18:	0803729c 	.word	0x0803729c

08023a1c <uri_to_path>:
                       size_t path_size) {
 8023a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023a20:	b096      	sub	sp, #88	@ 0x58
 8023a22:	4606      	mov	r6, r0
 8023a24:	460d      	mov	r5, r1
 8023a26:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8023a28:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8023a2c:	f1b8 0f00 	cmp.w	r8, #0
 8023a30:	d069      	beq.n	8023b06 <uri_to_path+0xea>
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 8023a32:	6811      	ldr	r1, [r2, #0]
 8023a34:	a80c      	add	r0, sp, #48	@ 0x30
 8023a36:	f7fd fdef 	bl	8021618 <mg_str_s>
 8023a3a:	2300      	movs	r3, #0
 8023a3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8023a3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023a40:	ab08      	add	r3, sp, #32
 8023a42:	aa0a      	add	r2, sp, #40	@ 0x28
 8023a44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023a48:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 8023a4c:	ab0c      	add	r3, sp, #48	@ 0x30
 8023a4e:	222c      	movs	r2, #44	@ 0x2c
 8023a50:	9200      	str	r2, [sp, #0]
 8023a52:	aa0e      	add	r2, sp, #56	@ 0x38
 8023a54:	e893 0003 	ldmia.w	r3, {r0, r1}
 8023a58:	f7fe f82d 	bl	8021ab6 <mg_span>
 8023a5c:	2800      	cmp	r0, #0
 8023a5e:	d055      	beq.n	8023b0c <uri_to_path+0xf0>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 8023a60:	233d      	movs	r3, #61	@ 0x3d
 8023a62:	9300      	str	r3, [sp, #0]
 8023a64:	ab10      	add	r3, sp, #64	@ 0x40
 8023a66:	aa12      	add	r2, sp, #72	@ 0x48
 8023a68:	ac0e      	add	r4, sp, #56	@ 0x38
 8023a6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8023a6e:	f7fe f822 	bl	8021ab6 <mg_span>
 8023a72:	b978      	cbnz	r0, 8023a94 <uri_to_path+0x78>
 8023a74:	ab12      	add	r3, sp, #72	@ 0x48
 8023a76:	e9d4 0100 	ldrd	r0, r1, [r4]
 8023a7a:	e883 0003 	stmia.w	r3, {r0, r1}
 8023a7e:	ac06      	add	r4, sp, #24
 8023a80:	2200      	movs	r2, #0
 8023a82:	4611      	mov	r1, r2
 8023a84:	4620      	mov	r0, r4
 8023a86:	f7fd fdd3 	bl	8021630 <mg_str_n>
 8023a8a:	ab10      	add	r3, sp, #64	@ 0x40
 8023a8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8023a90:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 8023a94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023a96:	b9c3      	cbnz	r3, 8023aca <uri_to_path+0xae>
 8023a98:	f10d 0940 	add.w	r9, sp, #64	@ 0x40
 8023a9c:	ac12      	add	r4, sp, #72	@ 0x48
 8023a9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8023aa2:	e889 0003 	stmia.w	r9, {r0, r1}
 8023aa6:	f10d 0a18 	add.w	sl, sp, #24
 8023aaa:	4922      	ldr	r1, [pc, #136]	@ (8023b34 <uri_to_path+0x118>)
 8023aac:	4650      	mov	r0, sl
 8023aae:	f7fd fdb3 	bl	8021618 <mg_str_s>
 8023ab2:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8023ab6:	e884 0003 	stmia.w	r4, {r0, r1}
 8023aba:	ab0a      	add	r3, sp, #40	@ 0x28
 8023abc:	e883 0003 	stmia.w	r3, {r0, r1}
 8023ac0:	ab08      	add	r3, sp, #32
 8023ac2:	e899 0003 	ldmia.w	r9, {r0, r1}
 8023ac6:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8023aca:	68eb      	ldr	r3, [r5, #12]
 8023acc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023ace:	4293      	cmp	r3, r2
 8023ad0:	d3bc      	bcc.n	8023a4c <uri_to_path+0x30>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8023ad2:	ac14      	add	r4, sp, #80	@ 0x50
 8023ad4:	68a9      	ldr	r1, [r5, #8]
 8023ad6:	4620      	mov	r0, r4
 8023ad8:	f7fd fdaa 	bl	8021630 <mg_str_n>
 8023adc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8023ae0:	a912      	add	r1, sp, #72	@ 0x48
 8023ae2:	c903      	ldmia	r1, {r0, r1}
 8023ae4:	f7fd fdfa 	bl	80216dc <mg_strcmp>
 8023ae8:	2800      	cmp	r0, #0
 8023aea:	d1af      	bne.n	8023a4c <uri_to_path+0x30>
    u = k, p = v;
 8023aec:	ab0a      	add	r3, sp, #40	@ 0x28
 8023aee:	aa12      	add	r2, sp, #72	@ 0x48
 8023af0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023af4:	e883 0003 	stmia.w	r3, {r0, r1}
 8023af8:	ab08      	add	r3, sp, #32
 8023afa:	aa10      	add	r2, sp, #64	@ 0x40
 8023afc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023b00:	e883 0003 	stmia.w	r3, {r0, r1}
 8023b04:	e7a2      	b.n	8023a4c <uri_to_path+0x30>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8023b06:	f8df 8030 	ldr.w	r8, [pc, #48]	@ 8023b38 <uri_to_path+0x11c>
 8023b0a:	e792      	b.n	8023a32 <uri_to_path+0x16>
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 8023b0c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023b0e:	9304      	str	r3, [sp, #16]
 8023b10:	9703      	str	r7, [sp, #12]
 8023b12:	ab01      	add	r3, sp, #4
 8023b14:	aa08      	add	r2, sp, #32
 8023b16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023b1a:	e883 0003 	stmia.w	r3, {r0, r1}
 8023b1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023b20:	9300      	str	r3, [sp, #0]
 8023b22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023b24:	4642      	mov	r2, r8
 8023b26:	4629      	mov	r1, r5
 8023b28:	4630      	mov	r0, r6
 8023b2a:	f7ff fe71 	bl	8023810 <uri_to_path2>
}
 8023b2e:	b016      	add	sp, #88	@ 0x58
 8023b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b34:	08036920 	.word	0x08036920
 8023b38:	200000ac 	.word	0x200000ac

08023b3c <mg_http_serve_dir>:
                       const struct mg_http_serve_opts *opts) {
 8023b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023b40:	b0a7      	sub	sp, #156	@ 0x9c
 8023b42:	4607      	mov	r7, r0
 8023b44:	460e      	mov	r6, r1
 8023b46:	4615      	mov	r5, r2
  const char *sp = opts->ssi_pattern;
 8023b48:	f8d2 8004 	ldr.w	r8, [r2, #4]
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 8023b4c:	2380      	movs	r3, #128	@ 0x80
 8023b4e:	9300      	str	r3, [sp, #0]
 8023b50:	ab02      	add	r3, sp, #8
 8023b52:	f7ff ff63 	bl	8023a1c <uri_to_path>
  if (flags < 0) {
 8023b56:	2800      	cmp	r0, #0
 8023b58:	db20      	blt.n	8023b9c <mg_http_serve_dir+0x60>
  } else if (flags & MG_FS_DIR) {
 8023b5a:	f010 0f04 	tst.w	r0, #4
 8023b5e:	d120      	bne.n	8023ba2 <mg_http_serve_dir+0x66>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 8023b60:	b1b0      	cbz	r0, 8023b90 <mg_http_serve_dir+0x54>
 8023b62:	f1b8 0f00 	cmp.w	r8, #0
 8023b66:	d013      	beq.n	8023b90 <mg_http_serve_dir+0x54>
 8023b68:	ac22      	add	r4, sp, #136	@ 0x88
 8023b6a:	a902      	add	r1, sp, #8
 8023b6c:	4620      	mov	r0, r4
 8023b6e:	f7fd fd53 	bl	8021618 <mg_str_s>
 8023b72:	f10d 0990 	add.w	r9, sp, #144	@ 0x90
 8023b76:	4641      	mov	r1, r8
 8023b78:	4648      	mov	r0, r9
 8023b7a:	f7fd fd4d 	bl	8021618 <mg_str_s>
 8023b7e:	2300      	movs	r3, #0
 8023b80:	9300      	str	r3, [sp, #0]
 8023b82:	e899 000c 	ldmia.w	r9, {r2, r3}
 8023b86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8023b8a:	f7fd fef9 	bl	8021980 <mg_match>
 8023b8e:	b978      	cbnz	r0, 8023bb0 <mg_http_serve_dir+0x74>
    mg_http_serve_file(c, hm, path, opts);
 8023b90:	462b      	mov	r3, r5
 8023b92:	aa02      	add	r2, sp, #8
 8023b94:	4631      	mov	r1, r6
 8023b96:	4638      	mov	r0, r7
 8023b98:	f7fe f8ae 	bl	8021cf8 <mg_http_serve_file>
}
 8023b9c:	b027      	add	sp, #156	@ 0x9c
 8023b9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    listdir(c, hm, opts, path);
 8023ba2:	ab02      	add	r3, sp, #8
 8023ba4:	462a      	mov	r2, r5
 8023ba6:	4631      	mov	r1, r6
 8023ba8:	4638      	mov	r0, r7
 8023baa:	f7fe fbef 	bl	802238c <listdir>
 8023bae:	e7f5      	b.n	8023b9c <mg_http_serve_dir+0x60>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8023bb0:	aa02      	add	r2, sp, #8
 8023bb2:	6829      	ldr	r1, [r5, #0]
 8023bb4:	4638      	mov	r0, r7
 8023bb6:	f7fd fd25 	bl	8021604 <mg_http_serve_ssi>
 8023bba:	e7ef      	b.n	8023b9c <mg_http_serve_dir+0x60>

08023bbc <printdirentry>:
static void printdirentry(const char *name, void *userdata) {
 8023bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023bbe:	b0c3      	sub	sp, #268	@ 0x10c
 8023bc0:	4605      	mov	r5, r0
 8023bc2:	460c      	mov	r4, r1
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8023bc4:	688b      	ldr	r3, [r1, #8]
 8023bc6:	695e      	ldr	r6, [r3, #20]
 8023bc8:	b1b6      	cbz	r6, 8023bf8 <printdirentry+0x3c>
  size_t size = 0;
 8023bca:	2300      	movs	r3, #0
 8023bcc:	9341      	str	r3, [sp, #260]	@ 0x104
  time_t t = 0;
 8023bce:	2200      	movs	r2, #0
 8023bd0:	2300      	movs	r3, #0
 8023bd2:	e9cd 233e 	strd	r2, r3, [sp, #248]	@ 0xf8
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 8023bd6:	9501      	str	r5, [sp, #4]
 8023bd8:	232f      	movs	r3, #47	@ 0x2f
 8023bda:	9300      	str	r3, [sp, #0]
 8023bdc:	68e3      	ldr	r3, [r4, #12]
 8023bde:	4a3c      	ldr	r2, [pc, #240]	@ (8023cd0 <printdirentry+0x114>)
 8023be0:	2180      	movs	r1, #128	@ 0x80
 8023be2:	a81e      	add	r0, sp, #120	@ 0x78
 8023be4:	f7fc ff38 	bl	8020a58 <mg_snprintf>
 8023be8:	2880      	cmp	r0, #128	@ 0x80
 8023bea:	d913      	bls.n	8023c14 <printdirentry+0x58>
    MG_ERROR(("%s truncated", name));
 8023bec:	4b39      	ldr	r3, [pc, #228]	@ (8023cd4 <printdirentry+0x118>)
 8023bee:	681b      	ldr	r3, [r3, #0]
 8023bf0:	2b00      	cmp	r3, #0
 8023bf2:	dc03      	bgt.n	8023bfc <printdirentry+0x40>
}
 8023bf4:	b043      	add	sp, #268	@ 0x10c
 8023bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8023bf8:	4e37      	ldr	r6, [pc, #220]	@ (8023cd8 <printdirentry+0x11c>)
 8023bfa:	e7e6      	b.n	8023bca <printdirentry+0xe>
    MG_ERROR(("%s truncated", name));
 8023bfc:	4b37      	ldr	r3, [pc, #220]	@ (8023cdc <printdirentry+0x120>)
 8023bfe:	f640 3248 	movw	r2, #2888	@ 0xb48
 8023c02:	4937      	ldr	r1, [pc, #220]	@ (8023ce0 <printdirentry+0x124>)
 8023c04:	2001      	movs	r0, #1
 8023c06:	f7ff fb3f 	bl	8023288 <mg_log_prefix>
 8023c0a:	4629      	mov	r1, r5
 8023c0c:	4835      	ldr	r0, [pc, #212]	@ (8023ce4 <printdirentry+0x128>)
 8023c0e:	f7fd fbcd 	bl	80213ac <mg_log>
 8023c12:	e7ef      	b.n	8023bf4 <printdirentry+0x38>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 8023c14:	6833      	ldr	r3, [r6, #0]
 8023c16:	aa3e      	add	r2, sp, #248	@ 0xf8
 8023c18:	a941      	add	r1, sp, #260	@ 0x104
 8023c1a:	a81e      	add	r0, sp, #120	@ 0x78
 8023c1c:	4798      	blx	r3
 8023c1e:	b9a8      	cbnz	r0, 8023c4c <printdirentry+0x90>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 8023c20:	4b2c      	ldr	r3, [pc, #176]	@ (8023cd4 <printdirentry+0x118>)
 8023c22:	681b      	ldr	r3, [r3, #0]
 8023c24:	2b00      	cmp	r3, #0
 8023c26:	dde5      	ble.n	8023bf4 <printdirentry+0x38>
 8023c28:	4b2c      	ldr	r3, [pc, #176]	@ (8023cdc <printdirentry+0x120>)
 8023c2a:	f640 324a 	movw	r2, #2890	@ 0xb4a
 8023c2e:	492c      	ldr	r1, [pc, #176]	@ (8023ce0 <printdirentry+0x124>)
 8023c30:	2001      	movs	r0, #1
 8023c32:	f7ff fb29 	bl	8023288 <mg_log_prefix>
 8023c36:	6823      	ldr	r3, [r4, #0]
 8023c38:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8023c3a:	f007 f925 	bl	802ae88 <__errno>
 8023c3e:	6803      	ldr	r3, [r0, #0]
 8023c40:	aa1e      	add	r2, sp, #120	@ 0x78
 8023c42:	4621      	mov	r1, r4
 8023c44:	4828      	ldr	r0, [pc, #160]	@ (8023ce8 <printdirentry+0x12c>)
 8023c46:	f7fd fbb1 	bl	80213ac <mg_log>
 8023c4a:	e7d3      	b.n	8023bf4 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8023c4c:	f010 0604 	ands.w	r6, r0, #4
 8023c50:	d02d      	beq.n	8023cae <printdirentry+0xf2>
 8023c52:	4f26      	ldr	r7, [pc, #152]	@ (8023cec <printdirentry+0x130>)
    if (flags & MG_FS_DIR) {
 8023c54:	2e00      	cmp	r6, #0
 8023c56:	d02c      	beq.n	8023cb2 <printdirentry+0xf6>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 8023c58:	4b25      	ldr	r3, [pc, #148]	@ (8023cf0 <printdirentry+0x134>)
 8023c5a:	4a26      	ldr	r2, [pc, #152]	@ (8023cf4 <printdirentry+0x138>)
 8023c5c:	2128      	movs	r1, #40	@ 0x28
 8023c5e:	a814      	add	r0, sp, #80	@ 0x50
 8023c60:	f7fc fefa 	bl	8020a58 <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 8023c64:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8023c66:	4a24      	ldr	r2, [pc, #144]	@ (8023cf8 <printdirentry+0x13c>)
 8023c68:	2128      	movs	r1, #40	@ 0x28
 8023c6a:	eb0d 0001 	add.w	r0, sp, r1
 8023c6e:	f7fc fef3 	bl	8020a58 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 8023c72:	4628      	mov	r0, r5
 8023c74:	f7ec fb14 	bl	80102a0 <strlen>
 8023c78:	4601      	mov	r1, r0
 8023c7a:	2380      	movs	r3, #128	@ 0x80
 8023c7c:	aa1e      	add	r2, sp, #120	@ 0x78
 8023c7e:	4628      	mov	r0, r5
 8023c80:	f7fd fc3c 	bl	80214fc <mg_url_encode>
 8023c84:	4602      	mov	r2, r0
    mg_printf(d->c,
 8023c86:	6820      	ldr	r0, [r4, #0]
 8023c88:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 8023c8a:	b9e6      	cbnz	r6, 8023cc6 <printdirentry+0x10a>
 8023c8c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8023c8e:	2400      	movs	r4, #0
 8023c90:	ae14      	add	r6, sp, #80	@ 0x50
 8023c92:	9608      	str	r6, [sp, #32]
 8023c94:	9306      	str	r3, [sp, #24]
 8023c96:	9407      	str	r4, [sp, #28]
 8023c98:	ab0a      	add	r3, sp, #40	@ 0x28
 8023c9a:	9304      	str	r3, [sp, #16]
 8023c9c:	9103      	str	r1, [sp, #12]
 8023c9e:	9702      	str	r7, [sp, #8]
 8023ca0:	9501      	str	r5, [sp, #4]
 8023ca2:	9700      	str	r7, [sp, #0]
 8023ca4:	ab1e      	add	r3, sp, #120	@ 0x78
 8023ca6:	4915      	ldr	r1, [pc, #84]	@ (8023cfc <printdirentry+0x140>)
 8023ca8:	f7fd fbae 	bl	8021408 <mg_printf>
}
 8023cac:	e7a2      	b.n	8023bf4 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8023cae:	4f14      	ldr	r7, [pc, #80]	@ (8023d00 <printdirentry+0x144>)
 8023cb0:	e7d0      	b.n	8023c54 <printdirentry+0x98>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 8023cb2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8023cb4:	9300      	str	r3, [sp, #0]
 8023cb6:	2300      	movs	r3, #0
 8023cb8:	9301      	str	r3, [sp, #4]
 8023cba:	4a12      	ldr	r2, [pc, #72]	@ (8023d04 <printdirentry+0x148>)
 8023cbc:	2128      	movs	r1, #40	@ 0x28
 8023cbe:	a814      	add	r0, sp, #80	@ 0x50
 8023cc0:	f7fc feca 	bl	8020a58 <mg_snprintf>
 8023cc4:	e7ce      	b.n	8023c64 <printdirentry+0xa8>
    mg_printf(d->c,
 8023cc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023cca:	461c      	mov	r4, r3
 8023ccc:	e7e0      	b.n	8023c90 <printdirentry+0xd4>
 8023cce:	bf00      	nop
 8023cd0:	080372ac 	.word	0x080372ac
 8023cd4:	200000a8 	.word	0x200000a8
 8023cd8:	200000ac 	.word	0x200000ac
 8023cdc:	08037b2c 	.word	0x08037b2c
 8023ce0:	08037100 	.word	0x08037100
 8023ce4:	080372b4 	.word	0x080372b4
 8023ce8:	080372c4 	.word	0x080372c4
 8023cec:	08036920 	.word	0x08036920
 8023cf0:	080372d8 	.word	0x080372d8
 8023cf4:	08037418 	.word	0x08037418
 8023cf8:	080376c8 	.word	0x080376c8
 8023cfc:	080372e8 	.word	0x080372e8
 8023d00:	080337f8 	.word	0x080337f8
 8023d04:	080372e0 	.word	0x080372e0

08023d08 <mg_http_upload>:
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 8023d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023d0c:	b0ca      	sub	sp, #296	@ 0x128
 8023d0e:	4607      	mov	r7, r0
 8023d10:	460d      	mov	r5, r1
 8023d12:	4616      	mov	r6, r2
 8023d14:	4698      	mov	r8, r3
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 8023d16:	2330      	movs	r3, #48	@ 0x30
 8023d18:	9343      	str	r3, [sp, #268]	@ 0x10c
 8023d1a:	2400      	movs	r4, #0
 8023d1c:	9444      	str	r4, [sp, #272]	@ 0x110
 8023d1e:	9445      	str	r4, [sp, #276]	@ 0x114
 8023d20:	9446      	str	r4, [sp, #280]	@ 0x118
 8023d22:	9447      	str	r4, [sp, #284]	@ 0x11c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 8023d24:	f101 0a10 	add.w	sl, r1, #16
 8023d28:	2314      	movs	r3, #20
 8023d2a:	aa43      	add	r2, sp, #268	@ 0x10c
 8023d2c:	4964      	ldr	r1, [pc, #400]	@ (8023ec0 <mg_http_upload+0x1b8>)
 8023d2e:	4650      	mov	r0, sl
 8023d30:	f7fe faf1 	bl	8022316 <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8023d34:	f10d 098c 	add.w	r9, sp, #140	@ 0x8c
 8023d38:	2380      	movs	r3, #128	@ 0x80
 8023d3a:	464a      	mov	r2, r9
 8023d3c:	4961      	ldr	r1, [pc, #388]	@ (8023ec4 <mg_http_upload+0x1bc>)
 8023d3e:	4650      	mov	r0, sl
 8023d40:	f7fe fae9 	bl	8022316 <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 8023d44:	4622      	mov	r2, r4
 8023d46:	4621      	mov	r1, r4
 8023d48:	a843      	add	r0, sp, #268	@ 0x10c
 8023d4a:	f005 fa1f 	bl	802918c <strtol>
 8023d4e:	4604      	mov	r4, r0
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 8023d50:	f8cd 9004 	str.w	r9, [sp, #4]
 8023d54:	232f      	movs	r3, #47	@ 0x2f
 8023d56:	9300      	str	r3, [sp, #0]
 8023d58:	4643      	mov	r3, r8
 8023d5a:	4a5b      	ldr	r2, [pc, #364]	@ (8023ec8 <mg_http_upload+0x1c0>)
 8023d5c:	2180      	movs	r1, #128	@ 0x80
 8023d5e:	a803      	add	r0, sp, #12
 8023d60:	f7fc fe7a 	bl	8020a58 <mg_snprintf>
  if (hm->body.len == 0) {
 8023d64:	f8d5 8204 	ldr.w	r8, [r5, #516]	@ 0x204
 8023d68:	f1b8 0f00 	cmp.w	r8, #0
 8023d6c:	d047      	beq.n	8023dfe <mg_http_upload+0xf6>
  } else if (file[0] == '\0') {
 8023d6e:	f89d 308c 	ldrb.w	r3, [sp, #140]	@ 0x8c
 8023d72:	2b00      	cmp	r3, #0
 8023d74:	d04c      	beq.n	8023e10 <mg_http_upload+0x108>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 8023d76:	f50d 7990 	add.w	r9, sp, #288	@ 0x120
 8023d7a:	a923      	add	r1, sp, #140	@ 0x8c
 8023d7c:	4648      	mov	r0, r9
 8023d7e:	f7fd fc4b 	bl	8021618 <mg_str_s>
 8023d82:	e899 0003 	ldmia.w	r9, {r0, r1}
 8023d86:	f7ff fa55 	bl	8023234 <mg_path_is_sane>
 8023d8a:	2800      	cmp	r0, #0
 8023d8c:	d04a      	beq.n	8023e24 <mg_http_upload+0x11c>
  } else if (offset < 0) {
 8023d8e:	2c00      	cmp	r4, #0
 8023d90:	db54      	blt.n	8023e3c <mg_http_upload+0x134>
  } else if ((size_t) offset + hm->body.len > max_size) {
 8023d92:	44a0      	add	r8, r4
 8023d94:	9b52      	ldr	r3, [sp, #328]	@ 0x148
 8023d96:	4598      	cmp	r8, r3
 8023d98:	d85a      	bhi.n	8023e50 <mg_http_upload+0x148>
    size_t current_size = 0;
 8023d9a:	2300      	movs	r3, #0
 8023d9c:	9302      	str	r3, [sp, #8]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8023d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8023ecc <mg_http_upload+0x1c4>)
 8023da0:	681b      	ldr	r3, [r3, #0]
 8023da2:	2b02      	cmp	r3, #2
 8023da4:	dc61      	bgt.n	8023e6a <mg_http_upload+0x162>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 8023da6:	b914      	cbnz	r4, 8023dae <mg_http_upload+0xa6>
 8023da8:	6a33      	ldr	r3, [r6, #32]
 8023daa:	a803      	add	r0, sp, #12
 8023dac:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 8023dae:	6833      	ldr	r3, [r6, #0]
 8023db0:	2200      	movs	r2, #0
 8023db2:	a902      	add	r1, sp, #8
 8023db4:	a803      	add	r0, sp, #12
 8023db6:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 8023db8:	2c00      	cmp	r4, #0
 8023dba:	dd02      	ble.n	8023dc2 <mg_http_upload+0xba>
 8023dbc:	9b02      	ldr	r3, [sp, #8]
 8023dbe:	429c      	cmp	r4, r3
 8023dc0:	d162      	bne.n	8023e88 <mg_http_upload+0x180>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 8023dc2:	2202      	movs	r2, #2
 8023dc4:	a903      	add	r1, sp, #12
 8023dc6:	4630      	mov	r0, r6
 8023dc8:	f7fc f8b7 	bl	801ff3a <mg_fs_open>
 8023dcc:	4680      	mov	r8, r0
 8023dce:	2800      	cmp	r0, #0
 8023dd0:	d066      	beq.n	8023ea0 <mg_http_upload+0x198>
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 8023dd2:	6973      	ldr	r3, [r6, #20]
 8023dd4:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8023dd8:	f8d5 1200 	ldr.w	r1, [r5, #512]	@ 0x200
 8023ddc:	6800      	ldr	r0, [r0, #0]
 8023dde:	4798      	blx	r3
 8023de0:	4404      	add	r4, r0
      mg_fs_close(fd);
 8023de2:	4640      	mov	r0, r8
 8023de4:	f7fc f8c2 	bl	801ff6c <mg_fs_close>
      mg_http_reply(c, 200, headers_tmp, "%ld", res);  //TODO DELETE HEADERS!!!!!
 8023de8:	9400      	str	r4, [sp, #0]
 8023dea:	4b39      	ldr	r3, [pc, #228]	@ (8023ed0 <mg_http_upload+0x1c8>)
 8023dec:	4a39      	ldr	r2, [pc, #228]	@ (8023ed4 <mg_http_upload+0x1cc>)
 8023dee:	21c8      	movs	r1, #200	@ 0xc8
 8023df0:	4638      	mov	r0, r7
 8023df2:	f7fd fb2f 	bl	8021454 <mg_http_reply>
}
 8023df6:	4620      	mov	r0, r4
 8023df8:	b04a      	add	sp, #296	@ 0x128
 8023dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    mg_http_reply(c, 200, headers_tmp, "%ld", res);  // Nothing to write  //TODO DELETE HEADERS!!!!!
 8023dfe:	2400      	movs	r4, #0
 8023e00:	9400      	str	r4, [sp, #0]
 8023e02:	4b33      	ldr	r3, [pc, #204]	@ (8023ed0 <mg_http_upload+0x1c8>)
 8023e04:	4a33      	ldr	r2, [pc, #204]	@ (8023ed4 <mg_http_upload+0x1cc>)
 8023e06:	21c8      	movs	r1, #200	@ 0xc8
 8023e08:	4638      	mov	r0, r7
 8023e0a:	f7fd fb23 	bl	8021454 <mg_http_reply>
 8023e0e:	e7f2      	b.n	8023df6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "file required");
 8023e10:	4b31      	ldr	r3, [pc, #196]	@ (8023ed8 <mg_http_upload+0x1d0>)
 8023e12:	4a32      	ldr	r2, [pc, #200]	@ (8023edc <mg_http_upload+0x1d4>)
 8023e14:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8023e18:	4638      	mov	r0, r7
 8023e1a:	f7fd fb1b 	bl	8021454 <mg_http_reply>
    res = -1;
 8023e1e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8023e22:	e7e8      	b.n	8023df6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 8023e24:	ab23      	add	r3, sp, #140	@ 0x8c
 8023e26:	9300      	str	r3, [sp, #0]
 8023e28:	4b2d      	ldr	r3, [pc, #180]	@ (8023ee0 <mg_http_upload+0x1d8>)
 8023e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8023edc <mg_http_upload+0x1d4>)
 8023e2c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8023e30:	4638      	mov	r0, r7
 8023e32:	f7fd fb0f 	bl	8021454 <mg_http_reply>
    res = -2;
 8023e36:	f06f 0401 	mvn.w	r4, #1
 8023e3a:	e7dc      	b.n	8023df6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "offset required");
 8023e3c:	4b29      	ldr	r3, [pc, #164]	@ (8023ee4 <mg_http_upload+0x1dc>)
 8023e3e:	4a27      	ldr	r2, [pc, #156]	@ (8023edc <mg_http_upload+0x1d4>)
 8023e40:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8023e44:	4638      	mov	r0, r7
 8023e46:	f7fd fb05 	bl	8021454 <mg_http_reply>
    res = -3;
 8023e4a:	f06f 0402 	mvn.w	r4, #2
 8023e4e:	e7d2      	b.n	8023df6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 8023e50:	9301      	str	r3, [sp, #4]
 8023e52:	ab03      	add	r3, sp, #12
 8023e54:	9300      	str	r3, [sp, #0]
 8023e56:	4b24      	ldr	r3, [pc, #144]	@ (8023ee8 <mg_http_upload+0x1e0>)
 8023e58:	4a20      	ldr	r2, [pc, #128]	@ (8023edc <mg_http_upload+0x1d4>)
 8023e5a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8023e5e:	4638      	mov	r0, r7
 8023e60:	f7fd faf8 	bl	8021454 <mg_http_reply>
    res = -4;
 8023e64:	f06f 0403 	mvn.w	r4, #3
 8023e68:	e7c5      	b.n	8023df6 <mg_http_upload+0xee>
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8023e6a:	4b20      	ldr	r3, [pc, #128]	@ (8023eec <mg_http_upload+0x1e4>)
 8023e6c:	f640 426a 	movw	r2, #3178	@ 0xc6a
 8023e70:	491f      	ldr	r1, [pc, #124]	@ (8023ef0 <mg_http_upload+0x1e8>)
 8023e72:	2003      	movs	r0, #3
 8023e74:	f7ff fa08 	bl	8023288 <mg_log_prefix>
 8023e78:	4623      	mov	r3, r4
 8023e7a:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8023e7e:	a903      	add	r1, sp, #12
 8023e80:	481c      	ldr	r0, [pc, #112]	@ (8023ef4 <mg_http_upload+0x1ec>)
 8023e82:	f7fd fa93 	bl	80213ac <mg_log>
 8023e86:	e78e      	b.n	8023da6 <mg_http_upload+0x9e>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 8023e88:	ab03      	add	r3, sp, #12
 8023e8a:	9300      	str	r3, [sp, #0]
 8023e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8023ef8 <mg_http_upload+0x1f0>)
 8023e8e:	4a13      	ldr	r2, [pc, #76]	@ (8023edc <mg_http_upload+0x1d4>)
 8023e90:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8023e94:	4638      	mov	r0, r7
 8023e96:	f7fd fadd 	bl	8021454 <mg_http_reply>
      res = -5;
 8023e9a:	f06f 0404 	mvn.w	r4, #4
 8023e9e:	e7aa      	b.n	8023df6 <mg_http_upload+0xee>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 8023ea0:	f006 fff2 	bl	802ae88 <__errno>
 8023ea4:	6803      	ldr	r3, [r0, #0]
 8023ea6:	9301      	str	r3, [sp, #4]
 8023ea8:	ab03      	add	r3, sp, #12
 8023eaa:	9300      	str	r3, [sp, #0]
 8023eac:	4b13      	ldr	r3, [pc, #76]	@ (8023efc <mg_http_upload+0x1f4>)
 8023eae:	4a0b      	ldr	r2, [pc, #44]	@ (8023edc <mg_http_upload+0x1d4>)
 8023eb0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8023eb4:	4638      	mov	r0, r7
 8023eb6:	f7fd facd 	bl	8021454 <mg_http_reply>
      res = -6;
 8023eba:	f06f 0405 	mvn.w	r4, #5
 8023ebe:	e79a      	b.n	8023df6 <mg_http_upload+0xee>
 8023ec0:	08037340 	.word	0x08037340
 8023ec4:	08037368 	.word	0x08037368
 8023ec8:	080372ac 	.word	0x080372ac
 8023ecc:	200000a8 	.word	0x200000a8
 8023ed0:	08037348 	.word	0x08037348
 8023ed4:	08033548 	.word	0x08033548
 8023ed8:	0803734c 	.word	0x0803734c
 8023edc:	080337f8 	.word	0x080337f8
 8023ee0:	0803735c 	.word	0x0803735c
 8023ee4:	08037370 	.word	0x08037370
 8023ee8:	08037380 	.word	0x08037380
 8023eec:	08037b1c 	.word	0x08037b1c
 8023ef0:	08037100 	.word	0x08037100
 8023ef4:	0803739c 	.word	0x0803739c
 8023ef8:	080373b4 	.word	0x080373b4
 8023efc:	080373c8 	.word	0x080373c8

08023f00 <mg_iobuf_resize>:
int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8023f00:	b570      	push	{r4, r5, r6, lr}
 8023f02:	b082      	sub	sp, #8
 8023f04:	4604      	mov	r4, r0
 8023f06:	4608      	mov	r0, r1
  new_size = roundup(new_size, io->align);
 8023f08:	68e1      	ldr	r1, [r4, #12]
 8023f0a:	f7fa febf 	bl	801ec8c <roundup>
  if (new_size == 0) {
 8023f0e:	b130      	cbz	r0, 8023f1e <mg_iobuf_resize+0x1e>
 8023f10:	4605      	mov	r5, r0
  } else if (new_size != io->size) {
 8023f12:	6863      	ldr	r3, [r4, #4]
 8023f14:	4283      	cmp	r3, r0
 8023f16:	d10f      	bne.n	8023f38 <mg_iobuf_resize+0x38>
  int ok = 1;
 8023f18:	2001      	movs	r0, #1
}
 8023f1a:	b002      	add	sp, #8
 8023f1c:	bd70      	pop	{r4, r5, r6, pc}
    mg_bzero(io->buf, io->size);
 8023f1e:	6861      	ldr	r1, [r4, #4]
 8023f20:	6820      	ldr	r0, [r4, #0]
 8023f22:	f7fe fdab 	bl	8022a7c <mg_bzero>
    free(io->buf);
 8023f26:	6820      	ldr	r0, [r4, #0]
 8023f28:	f7f5 f928 	bl	801917c <vPortFree>
    io->buf = NULL;
 8023f2c:	2300      	movs	r3, #0
 8023f2e:	6023      	str	r3, [r4, #0]
    io->len = io->size = 0;
 8023f30:	6063      	str	r3, [r4, #4]
 8023f32:	60a3      	str	r3, [r4, #8]
  int ok = 1;
 8023f34:	2001      	movs	r0, #1
 8023f36:	e7f0      	b.n	8023f1a <mg_iobuf_resize+0x1a>
    void *p = calloc(1, new_size);
 8023f38:	4601      	mov	r1, r0
 8023f3a:	2001      	movs	r0, #1
 8023f3c:	f7fb ff3f 	bl	801fdbe <mg_calloc>
    if (p != NULL) {
 8023f40:	4606      	mov	r6, r0
 8023f42:	b198      	cbz	r0, 8023f6c <mg_iobuf_resize+0x6c>
      size_t len = new_size < io->len ? new_size : io->len;
 8023f44:	68a2      	ldr	r2, [r4, #8]
 8023f46:	42aa      	cmp	r2, r5
 8023f48:	bf28      	it	cs
 8023f4a:	462a      	movcs	r2, r5
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 8023f4c:	b11a      	cbz	r2, 8023f56 <mg_iobuf_resize+0x56>
 8023f4e:	6821      	ldr	r1, [r4, #0]
 8023f50:	b109      	cbz	r1, 8023f56 <mg_iobuf_resize+0x56>
 8023f52:	f005 fd7b 	bl	8029a4c <memmove>
      mg_bzero(io->buf, io->size);
 8023f56:	6861      	ldr	r1, [r4, #4]
 8023f58:	6820      	ldr	r0, [r4, #0]
 8023f5a:	f7fe fd8f 	bl	8022a7c <mg_bzero>
      free(io->buf);
 8023f5e:	6820      	ldr	r0, [r4, #0]
 8023f60:	f7f5 f90c 	bl	801917c <vPortFree>
      io->buf = (unsigned char *) p;
 8023f64:	6026      	str	r6, [r4, #0]
      io->size = new_size;
 8023f66:	6065      	str	r5, [r4, #4]
  int ok = 1;
 8023f68:	2001      	movs	r0, #1
 8023f6a:	e7d6      	b.n	8023f1a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8023f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8023f9c <mg_iobuf_resize+0x9c>)
 8023f6e:	681b      	ldr	r3, [r3, #0]
 8023f70:	2b00      	cmp	r3, #0
 8023f72:	dc01      	bgt.n	8023f78 <mg_iobuf_resize+0x78>
      ok = 0;
 8023f74:	2000      	movs	r0, #0
  return ok;
 8023f76:	e7d0      	b.n	8023f1a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8023f78:	4b09      	ldr	r3, [pc, #36]	@ (8023fa0 <mg_iobuf_resize+0xa0>)
 8023f7a:	f640 5244 	movw	r2, #3396	@ 0xd44
 8023f7e:	4909      	ldr	r1, [pc, #36]	@ (8023fa4 <mg_iobuf_resize+0xa4>)
 8023f80:	2001      	movs	r0, #1
 8023f82:	f7ff f981 	bl	8023288 <mg_log_prefix>
 8023f86:	2600      	movs	r6, #0
 8023f88:	9500      	str	r5, [sp, #0]
 8023f8a:	9601      	str	r6, [sp, #4]
 8023f8c:	6862      	ldr	r2, [r4, #4]
 8023f8e:	4633      	mov	r3, r6
 8023f90:	4805      	ldr	r0, [pc, #20]	@ (8023fa8 <mg_iobuf_resize+0xa8>)
 8023f92:	f7fd fa0b 	bl	80213ac <mg_log>
      ok = 0;
 8023f96:	4630      	mov	r0, r6
 8023f98:	e7bf      	b.n	8023f1a <mg_iobuf_resize+0x1a>
 8023f9a:	bf00      	nop
 8023f9c:	200000a8 	.word	0x200000a8
 8023fa0:	08037b0c 	.word	0x08037b0c
 8023fa4:	08037100 	.word	0x08037100
 8023fa8:	080373d8 	.word	0x080373d8

08023fac <static_cb>:
static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 8023fac:	b538      	push	{r3, r4, r5, lr}
 8023fae:	4604      	mov	r4, r0
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8023fb0:	2908      	cmp	r1, #8
 8023fb2:	d004      	beq.n	8023fbe <static_cb+0x12>
 8023fb4:	2902      	cmp	r1, #2
 8023fb6:	d002      	beq.n	8023fbe <static_cb+0x12>
  } else if (ev == MG_EV_CLOSE) {
 8023fb8:	2909      	cmp	r1, #9
 8023fba:	d02b      	beq.n	8024014 <static_cb+0x68>
}
 8023fbc:	bd38      	pop	{r3, r4, r5, pc}
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 8023fbe:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8023fc2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8023fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023fc8:	d31d      	bcc.n	8024006 <static_cb+0x5a>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8023fca:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8023fcc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8023fce:	4299      	cmp	r1, r3
 8023fd0:	d2f4      	bcs.n	8023fbc <static_cb+0x10>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8023fd2:	1a5b      	subs	r3, r3, r1
 8023fd4:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 8023fd8:	429a      	cmp	r2, r3
 8023fda:	d300      	bcc.n	8023fde <static_cb+0x32>
 8023fdc:	461a      	mov	r2, r3
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8023fde:	686b      	ldr	r3, [r5, #4]
 8023fe0:	691b      	ldr	r3, [r3, #16]
 8023fe2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8023fe4:	4401      	add	r1, r0
 8023fe6:	6828      	ldr	r0, [r5, #0]
 8023fe8:	4798      	blx	r3
    c->send.len += n;
 8023fea:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8023fec:	4403      	add	r3, r0
 8023fee:	6523      	str	r3, [r4, #80]	@ 0x50
    *cl -= n;
 8023ff0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8023ff4:	1a1b      	subs	r3, r3, r0
 8023ff6:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    if (n == 0) restore_http_cb(c);
 8023ffa:	2800      	cmp	r0, #0
 8023ffc:	d1de      	bne.n	8023fbc <static_cb+0x10>
 8023ffe:	4620      	mov	r0, r4
 8024000:	f7fb ffc0 	bl	801ff84 <restore_http_cb>
 8024004:	e7da      	b.n	8023fbc <static_cb+0x10>
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8024006:	f44f 7100 	mov.w	r1, #512	@ 0x200
 802400a:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 802400e:	f7ff ff77 	bl	8023f00 <mg_iobuf_resize>
 8024012:	e7da      	b.n	8023fca <static_cb+0x1e>
    restore_http_cb(c);
 8024014:	f7fb ffb6 	bl	801ff84 <restore_http_cb>
  (void) ev_data;
 8024018:	e7d0      	b.n	8023fbc <static_cb+0x10>

0802401a <mg_iobuf_add>:
                    size_t len) {
 802401a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802401e:	4604      	mov	r4, r0
 8024020:	460f      	mov	r7, r1
 8024022:	4690      	mov	r8, r2
 8024024:	461d      	mov	r5, r3
  size_t new_size = roundup(io->len + len, io->align);
 8024026:	6880      	ldr	r0, [r0, #8]
 8024028:	68e1      	ldr	r1, [r4, #12]
 802402a:	4418      	add	r0, r3
 802402c:	f7fa fe2e 	bl	801ec8c <roundup>
 8024030:	4606      	mov	r6, r0
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 8024032:	4601      	mov	r1, r0
 8024034:	4620      	mov	r0, r4
 8024036:	f7ff ff63 	bl	8023f00 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 802403a:	6863      	ldr	r3, [r4, #4]
 802403c:	42b3      	cmp	r3, r6
 802403e:	d000      	beq.n	8024042 <mg_iobuf_add+0x28>
 8024040:	2500      	movs	r5, #0
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8024042:	68a2      	ldr	r2, [r4, #8]
 8024044:	42ba      	cmp	r2, r7
 8024046:	d812      	bhi.n	802406e <mg_iobuf_add+0x54>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 8024048:	f1b8 0f00 	cmp.w	r8, #0
 802404c:	d005      	beq.n	802405a <mg_iobuf_add+0x40>
 802404e:	6820      	ldr	r0, [r4, #0]
 8024050:	462a      	mov	r2, r5
 8024052:	4641      	mov	r1, r8
 8024054:	4438      	add	r0, r7
 8024056:	f005 fcf9 	bl	8029a4c <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 802405a:	68a3      	ldr	r3, [r4, #8]
 802405c:	42bb      	cmp	r3, r7
 802405e:	d200      	bcs.n	8024062 <mg_iobuf_add+0x48>
 8024060:	60a7      	str	r7, [r4, #8]
  io->len += len;
 8024062:	68a3      	ldr	r3, [r4, #8]
 8024064:	442b      	add	r3, r5
 8024066:	60a3      	str	r3, [r4, #8]
}
 8024068:	4628      	mov	r0, r5
 802406a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 802406e:	6823      	ldr	r3, [r4, #0]
 8024070:	19e8      	adds	r0, r5, r7
 8024072:	1bd2      	subs	r2, r2, r7
 8024074:	19d9      	adds	r1, r3, r7
 8024076:	4418      	add	r0, r3
 8024078:	f005 fce8 	bl	8029a4c <memmove>
 802407c:	e7e4      	b.n	8024048 <mg_iobuf_add+0x2e>

0802407e <mg_iobuf_free>:
void mg_iobuf_free(struct mg_iobuf *io) {
 802407e:	b508      	push	{r3, lr}
  mg_iobuf_resize(io, 0);
 8024080:	2100      	movs	r1, #0
 8024082:	f7ff ff3d 	bl	8023f00 <mg_iobuf_resize>
}
 8024086:	bd08      	pop	{r3, pc}

08024088 <rx_udp>:
static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8024088:	b538      	push	{r3, r4, r5, lr}
 802408a:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 802408c:	2201      	movs	r2, #1
 802408e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8024090:	f7fb fea3 	bl	801fdda <getpeer>
  if (c == NULL) {
 8024094:	b368      	cbz	r0, 80240f2 <rx_udp+0x6a>
 8024096:	4605      	mov	r5, r0
    c->rem.port = pkt->udp->sport;
 8024098:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 802409a:	881b      	ldrh	r3, [r3, #0]
 802409c:	8583      	strh	r3, [r0, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 802409e:	69e3      	ldr	r3, [r4, #28]
 80240a0:	68db      	ldr	r3, [r3, #12]
 80240a2:	61c3      	str	r3, [r0, #28]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 80240a4:	6923      	ldr	r3, [r4, #16]
 80240a6:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80240aa:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
 80240ae:	895b      	ldrh	r3, [r3, #10]
 80240b0:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 80240b4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80240b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80240ba:	d21b      	bcs.n	80240f4 <rx_udp+0x6c>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 80240bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80240be:	1ad2      	subs	r2, r2, r3
 80240c0:	68e1      	ldr	r1, [r4, #12]
 80240c2:	428a      	cmp	r2, r1
 80240c4:	d204      	bcs.n	80240d0 <rx_udp+0x48>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 80240c6:	4419      	add	r1, r3
 80240c8:	3038      	adds	r0, #56	@ 0x38
 80240ca:	f7ff ff19 	bl	8023f00 <mg_iobuf_resize>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 80240ce:	b1a8      	cbz	r0, 80240fc <rx_udp+0x74>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 80240d0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80240d2:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80240d4:	68e2      	ldr	r2, [r4, #12]
 80240d6:	68a1      	ldr	r1, [r4, #8]
 80240d8:	4418      	add	r0, r3
 80240da:	f006 ff0d 	bl	802aef8 <memcpy>
      c->recv.len += pkt->pay.len;
 80240de:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80240e0:	4622      	mov	r2, r4
 80240e2:	f852 1f0c 	ldr.w	r1, [r2, #12]!
 80240e6:	440b      	add	r3, r1
 80240e8:	642b      	str	r3, [r5, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 80240ea:	2107      	movs	r1, #7
 80240ec:	4628      	mov	r0, r5
 80240ee:	f7fb ff15 	bl	801ff1c <mg_call>
}
 80240f2:	bd38      	pop	{r3, r4, r5, pc}
      mg_error(c, "max_recv_buf_size reached");
 80240f4:	4904      	ldr	r1, [pc, #16]	@ (8024108 <rx_udp+0x80>)
 80240f6:	f7ff f9af 	bl	8023458 <mg_error>
 80240fa:	e7fa      	b.n	80240f2 <rx_udp+0x6a>
      mg_error(c, "oom");
 80240fc:	4903      	ldr	r1, [pc, #12]	@ (802410c <rx_udp+0x84>)
 80240fe:	4628      	mov	r0, r5
 8024100:	f7ff f9aa 	bl	8023458 <mg_error>
 8024104:	e7f5      	b.n	80240f2 <rx_udp+0x6a>
 8024106:	bf00      	nop
 8024108:	080373e4 	.word	0x080373e4
 802410c:	08037400 	.word	0x08037400

08024110 <mg_pfn_iobuf_private>:
static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8024110:	b538      	push	{r3, r4, r5, lr}
 8024112:	4605      	mov	r5, r0
 8024114:	460c      	mov	r4, r1
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8024116:	b122      	cbz	r2, 8024122 <mg_pfn_iobuf_private+0x12>
 8024118:	6889      	ldr	r1, [r1, #8]
 802411a:	3102      	adds	r1, #2
 802411c:	6863      	ldr	r3, [r4, #4]
 802411e:	4299      	cmp	r1, r3
 8024120:	d80d      	bhi.n	802413e <mg_pfn_iobuf_private+0x2e>
  if (io->len + 2 <= io->size) {
 8024122:	68a3      	ldr	r3, [r4, #8]
 8024124:	1c99      	adds	r1, r3, #2
 8024126:	6862      	ldr	r2, [r4, #4]
 8024128:	4291      	cmp	r1, r2
 802412a:	d80c      	bhi.n	8024146 <mg_pfn_iobuf_private+0x36>
    io->buf[io->len++] = (uint8_t) ch;
 802412c:	6822      	ldr	r2, [r4, #0]
 802412e:	1c59      	adds	r1, r3, #1
 8024130:	60a1      	str	r1, [r4, #8]
 8024132:	54d5      	strb	r5, [r2, r3]
    io->buf[io->len] = 0;
 8024134:	6822      	ldr	r2, [r4, #0]
 8024136:	68a3      	ldr	r3, [r4, #8]
 8024138:	2100      	movs	r1, #0
 802413a:	54d1      	strb	r1, [r2, r3]
}
 802413c:	bd38      	pop	{r3, r4, r5, pc}
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 802413e:	4620      	mov	r0, r4
 8024140:	f7ff fede 	bl	8023f00 <mg_iobuf_resize>
 8024144:	e7ed      	b.n	8024122 <mg_pfn_iobuf_private+0x12>
  } else if (io->len < io->size) {
 8024146:	4293      	cmp	r3, r2
 8024148:	d2f8      	bcs.n	802413c <mg_pfn_iobuf_private+0x2c>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 802414a:	6822      	ldr	r2, [r4, #0]
 802414c:	1c59      	adds	r1, r3, #1
 802414e:	60a1      	str	r1, [r4, #8]
 8024150:	2100      	movs	r1, #0
 8024152:	54d1      	strb	r1, [r2, r3]
}
 8024154:	e7f2      	b.n	802413c <mg_pfn_iobuf_private+0x2c>

08024156 <mg_pfn_iobuf>:
void mg_pfn_iobuf(char ch, void *param) {
 8024156:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, true);
 8024158:	2201      	movs	r2, #1
 802415a:	f7ff ffd9 	bl	8024110 <mg_pfn_iobuf_private>
}
 802415e:	bd08      	pop	{r3, pc}

08024160 <mg_putchar_iobuf_static>:
static void mg_putchar_iobuf_static(char ch, void *param) {
 8024160:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, false);
 8024162:	2200      	movs	r2, #0
 8024164:	f7ff ffd4 	bl	8024110 <mg_pfn_iobuf_private>
}
 8024168:	bd08      	pop	{r3, pc}
	...

0802416c <mg_close_conn>:
void mg_close_conn(struct mg_connection *c) {
 802416c:	b510      	push	{r4, lr}
 802416e:	4604      	mov	r4, r0
  mg_resolve_cancel(c);  // Close any pending DNS query
 8024170:	f7fb fe73 	bl	801fe5a <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 8024174:	6862      	ldr	r2, [r4, #4]
 8024176:	e000      	b.n	802417a <mg_close_conn+0xe>
 8024178:	461a      	mov	r2, r3
 802417a:	6813      	ldr	r3, [r2, #0]
 802417c:	42a3      	cmp	r3, r4
 802417e:	d1fb      	bne.n	8024178 <mg_close_conn+0xc>
 8024180:	6823      	ldr	r3, [r4, #0]
 8024182:	6013      	str	r3, [r2, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 8024184:	6863      	ldr	r3, [r4, #4]
 8024186:	689a      	ldr	r2, [r3, #8]
 8024188:	42a2      	cmp	r2, r4
 802418a:	d020      	beq.n	80241ce <mg_close_conn+0x62>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 802418c:	6863      	ldr	r3, [r4, #4]
 802418e:	691a      	ldr	r2, [r3, #16]
 8024190:	42a2      	cmp	r2, r4
 8024192:	d01f      	beq.n	80241d4 <mg_close_conn+0x68>
  mg_call(c, MG_EV_CLOSE, NULL);
 8024194:	2200      	movs	r2, #0
 8024196:	2109      	movs	r1, #9
 8024198:	4620      	mov	r0, r4
 802419a:	f7fb febf 	bl	801ff1c <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 802419e:	4b15      	ldr	r3, [pc, #84]	@ (80241f4 <mg_close_conn+0x88>)
 80241a0:	681b      	ldr	r3, [r3, #0]
 80241a2:	2b02      	cmp	r3, #2
 80241a4:	dc19      	bgt.n	80241da <mg_close_conn+0x6e>
  mg_iobuf_free(&c->recv);
 80241a6:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80241aa:	f7ff ff68 	bl	802407e <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 80241ae:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 80241b2:	f7ff ff64 	bl	802407e <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 80241b6:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80241ba:	f7ff ff60 	bl	802407e <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 80241be:	21b0      	movs	r1, #176	@ 0xb0
 80241c0:	4620      	mov	r0, r4
 80241c2:	f7fe fc5b 	bl	8022a7c <mg_bzero>
  free(c);
 80241c6:	4620      	mov	r0, r4
 80241c8:	f7f4 ffd8 	bl	801917c <vPortFree>
}
 80241cc:	bd10      	pop	{r4, pc}
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 80241ce:	2200      	movs	r2, #0
 80241d0:	609a      	str	r2, [r3, #8]
 80241d2:	e7db      	b.n	802418c <mg_close_conn+0x20>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 80241d4:	2200      	movs	r2, #0
 80241d6:	611a      	str	r2, [r3, #16]
 80241d8:	e7dc      	b.n	8024194 <mg_close_conn+0x28>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 80241da:	4b07      	ldr	r3, [pc, #28]	@ (80241f8 <mg_close_conn+0x8c>)
 80241dc:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 80241e0:	4906      	ldr	r1, [pc, #24]	@ (80241fc <mg_close_conn+0x90>)
 80241e2:	2003      	movs	r0, #3
 80241e4:	f7ff f850 	bl	8023288 <mg_log_prefix>
 80241e8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80241ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80241ec:	4804      	ldr	r0, [pc, #16]	@ (8024200 <mg_close_conn+0x94>)
 80241ee:	f7fd f8dd 	bl	80213ac <mg_log>
 80241f2:	e7d8      	b.n	80241a6 <mg_close_conn+0x3a>
 80241f4:	200000a8 	.word	0x200000a8
 80241f8:	08037ae8 	.word	0x08037ae8
 80241fc:	08037100 	.word	0x08037100
 8024200:	08037404 	.word	0x08037404

08024204 <close_conn>:
static void close_conn(struct mg_connection *c) {
 8024204:	b510      	push	{r4, lr}
 8024206:	4604      	mov	r4, r0
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8024208:	30d0      	adds	r0, #208	@ 0xd0
 802420a:	f7ff ff38 	bl	802407e <mg_iobuf_free>
  mg_close_conn(c);
 802420e:	4620      	mov	r0, r4
 8024210:	f7ff ffac 	bl	802416c <mg_close_conn>
}
 8024214:	bd10      	pop	{r4, pc}
	...

08024218 <mg_listen>:
                                mg_event_handler_t fn, void *fn_data) {
 8024218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802421c:	4606      	mov	r6, r0
 802421e:	460d      	mov	r5, r1
 8024220:	4690      	mov	r8, r2
 8024222:	461f      	mov	r7, r3
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 8024224:	f7fc fbec 	bl	8020a00 <mg_alloc_conn>
 8024228:	4604      	mov	r4, r0
 802422a:	2800      	cmp	r0, #0
 802422c:	d03f      	beq.n	80242ae <mg_listen+0x96>
  } else if (!mg_open_listener(c, url)) {
 802422e:	4629      	mov	r1, r5
 8024230:	f7fe fe5b 	bl	8022eea <mg_open_listener>
 8024234:	2800      	cmp	r0, #0
 8024236:	d04d      	beq.n	80242d4 <mg_listen+0xbc>
    c->is_listening = 1;
 8024238:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802423c:	f043 0301 	orr.w	r3, r3, #1
 8024240:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 8024244:	2204      	movs	r2, #4
 8024246:	492f      	ldr	r1, [pc, #188]	@ (8024304 <mg_listen+0xec>)
 8024248:	4628      	mov	r0, r5
 802424a:	f005 fc4e 	bl	8029aea <strncmp>
 802424e:	fab0 f080 	clz	r0, r0
 8024252:	0940      	lsrs	r0, r0, #5
 8024254:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8024258:	f360 0300 	bfi	r3, r0, #0, #1
 802425c:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8024260:	6833      	ldr	r3, [r6, #0]
 8024262:	6023      	str	r3, [r4, #0]
 8024264:	6034      	str	r4, [r6, #0]
    c->fn = fn;
 8024266:	f8c4 8078 	str.w	r8, [r4, #120]	@ 0x78
    c->fn_data = fn_data;
 802426a:	67e7      	str	r7, [r4, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 802426c:	2200      	movs	r2, #0
 802426e:	2101      	movs	r1, #1
 8024270:	4620      	mov	r0, r4
 8024272:	f7fb fe53 	bl	801ff1c <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 8024276:	4628      	mov	r0, r5
 8024278:	f7fe fb52 	bl	8022920 <mg_url_is_ssl>
 802427c:	b128      	cbz	r0, 802428a <mg_listen+0x72>
 802427e:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8024282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024286:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 802428a:	4b1f      	ldr	r3, [pc, #124]	@ (8024308 <mg_listen+0xf0>)
 802428c:	681b      	ldr	r3, [r3, #0]
 802428e:	2b02      	cmp	r3, #2
 8024290:	dd11      	ble.n	80242b6 <mg_listen+0x9e>
 8024292:	4b1e      	ldr	r3, [pc, #120]	@ (802430c <mg_listen+0xf4>)
 8024294:	f241 22e1 	movw	r2, #4833	@ 0x12e1
 8024298:	491d      	ldr	r1, [pc, #116]	@ (8024310 <mg_listen+0xf8>)
 802429a:	2003      	movs	r0, #3
 802429c:	f7fe fff4 	bl	8023288 <mg_log_prefix>
 80242a0:	462b      	mov	r3, r5
 80242a2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80242a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80242a6:	481b      	ldr	r0, [pc, #108]	@ (8024314 <mg_listen+0xfc>)
 80242a8:	f7fd f880 	bl	80213ac <mg_log>
  return c;
 80242ac:	e003      	b.n	80242b6 <mg_listen+0x9e>
    MG_ERROR(("OOM %s", url));
 80242ae:	4b16      	ldr	r3, [pc, #88]	@ (8024308 <mg_listen+0xf0>)
 80242b0:	681b      	ldr	r3, [r3, #0]
 80242b2:	2b00      	cmp	r3, #0
 80242b4:	dc02      	bgt.n	80242bc <mg_listen+0xa4>
}
 80242b6:	4620      	mov	r0, r4
 80242b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("OOM %s", url));
 80242bc:	4b13      	ldr	r3, [pc, #76]	@ (802430c <mg_listen+0xf4>)
 80242be:	f241 22d3 	movw	r2, #4819	@ 0x12d3
 80242c2:	4913      	ldr	r1, [pc, #76]	@ (8024310 <mg_listen+0xf8>)
 80242c4:	2001      	movs	r0, #1
 80242c6:	f7fe ffdf 	bl	8023288 <mg_log_prefix>
 80242ca:	4629      	mov	r1, r5
 80242cc:	4812      	ldr	r0, [pc, #72]	@ (8024318 <mg_listen+0x100>)
 80242ce:	f7fd f86d 	bl	80213ac <mg_log>
 80242d2:	e7f0      	b.n	80242b6 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 80242d4:	4b0c      	ldr	r3, [pc, #48]	@ (8024308 <mg_listen+0xf0>)
 80242d6:	681b      	ldr	r3, [r3, #0]
 80242d8:	2b00      	cmp	r3, #0
 80242da:	dc04      	bgt.n	80242e6 <mg_listen+0xce>
    free(c);
 80242dc:	4620      	mov	r0, r4
 80242de:	f7f4 ff4d 	bl	801917c <vPortFree>
    c = NULL;
 80242e2:	2400      	movs	r4, #0
 80242e4:	e7e7      	b.n	80242b6 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 80242e6:	4b09      	ldr	r3, [pc, #36]	@ (802430c <mg_listen+0xf4>)
 80242e8:	f241 22d5 	movw	r2, #4821	@ 0x12d5
 80242ec:	4908      	ldr	r1, [pc, #32]	@ (8024310 <mg_listen+0xf8>)
 80242ee:	2001      	movs	r0, #1
 80242f0:	f7fe ffca 	bl	8023288 <mg_log_prefix>
 80242f4:	f006 fdc8 	bl	802ae88 <__errno>
 80242f8:	6802      	ldr	r2, [r0, #0]
 80242fa:	4629      	mov	r1, r5
 80242fc:	4807      	ldr	r0, [pc, #28]	@ (802431c <mg_listen+0x104>)
 80242fe:	f7fd f855 	bl	80213ac <mg_log>
 8024302:	e7eb      	b.n	80242dc <mg_listen+0xc4>
 8024304:	08037434 	.word	0x08037434
 8024308:	200000a8 	.word	0x200000a8
 802430c:	08037ad0 	.word	0x08037ad0
 8024310:	08037100 	.word	0x08037100
 8024314:	0803715c 	.word	0x0803715c
 8024318:	08037414 	.word	0x08037414
 802431c:	0803741c 	.word	0x0803741c

08024320 <mg_http_listen>:
                                     mg_event_handler_t fn, void *fn_data) {
 8024320:	b508      	push	{r3, lr}
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8024322:	f7ff ff79 	bl	8024218 <mg_listen>
  if (c != NULL) c->pfn = http_cb;
 8024326:	b110      	cbz	r0, 802432e <mg_http_listen+0xe>
 8024328:	4b01      	ldr	r3, [pc, #4]	@ (8024330 <mg_http_listen+0x10>)
 802432a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 802432e:	bd08      	pop	{r3, pc}
 8024330:	0802350d 	.word	0x0802350d

08024334 <trim_len>:
static size_t trim_len(struct mg_connection *c, size_t len) {
 8024334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024338:	4605      	mov	r5, r0
 802433a:	460c      	mov	r4, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802433c:	6843      	ldr	r3, [r0, #4]
 802433e:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8024340:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8024344:	f013 0301 	ands.w	r3, r3, #1
 8024348:	d02c      	beq.n	80243a4 <trim_len+0x70>
 802434a:	2608      	movs	r6, #8
  size_t max_headers_len =
 802434c:	f106 0826 	add.w	r8, r6, #38	@ 0x26
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 8024350:	bb53      	cbnz	r3, 80243a8 <trim_len+0x74>
 8024352:	3618      	adds	r6, #24
  if (len + max_headers_len > ifp->tx.len) {
 8024354:	eb08 0304 	add.w	r3, r8, r4
 8024358:	69ba      	ldr	r2, [r7, #24]
 802435a:	4293      	cmp	r3, r2
 802435c:	d901      	bls.n	8024362 <trim_len+0x2e>
    len = ifp->tx.len - max_headers_len;
 802435e:	eba2 0408 	sub.w	r4, r2, r8
  if (ifp->mtu < min_mtu) {
 8024362:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8024366:	42b3      	cmp	r3, r6
 8024368:	d205      	bcs.n	8024376 <trim_len+0x42>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 802436a:	4b1c      	ldr	r3, [pc, #112]	@ (80243dc <trim_len+0xa8>)
 802436c:	681b      	ldr	r3, [r3, #0]
 802436e:	2b00      	cmp	r3, #0
 8024370:	dc1c      	bgt.n	80243ac <trim_len+0x78>
    ifp->mtu = (uint16_t) min_mtu;
 8024372:	f8a7 6044 	strh.w	r6, [r7, #68]	@ 0x44
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 8024376:	eb04 0308 	add.w	r3, r4, r8
 802437a:	3b0e      	subs	r3, #14
 802437c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8024380:	4293      	cmp	r3, r2
 8024382:	d90c      	bls.n	802439e <trim_len+0x6a>
    len = ifp->mtu - max_headers_len + eth_h_len;
 8024384:	eba2 0208 	sub.w	r2, r2, r8
 8024388:	f102 040e 	add.w	r4, r2, #14
    if (c->is_udp) {
 802438c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8024390:	f013 0f01 	tst.w	r3, #1
 8024394:	d003      	beq.n	802439e <trim_len+0x6a>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8024396:	4b11      	ldr	r3, [pc, #68]	@ (80243dc <trim_len+0xa8>)
 8024398:	681b      	ldr	r3, [r3, #0]
 802439a:	2b00      	cmp	r3, #0
 802439c:	dc12      	bgt.n	80243c4 <trim_len+0x90>
}
 802439e:	4620      	mov	r0, r4
 80243a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 80243a4:	263c      	movs	r6, #60	@ 0x3c
 80243a6:	e7d1      	b.n	802434c <trim_len+0x18>
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 80243a8:	2644      	movs	r6, #68	@ 0x44
 80243aa:	e7d3      	b.n	8024354 <trim_len+0x20>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 80243ac:	4b0c      	ldr	r3, [pc, #48]	@ (80243e0 <trim_len+0xac>)
 80243ae:	f241 528c 	movw	r2, #5516	@ 0x158c
 80243b2:	490c      	ldr	r1, [pc, #48]	@ (80243e4 <trim_len+0xb0>)
 80243b4:	2001      	movs	r0, #1
 80243b6:	f7fe ff67 	bl	8023288 <mg_log_prefix>
 80243ba:	4631      	mov	r1, r6
 80243bc:	480a      	ldr	r0, [pc, #40]	@ (80243e8 <trim_len+0xb4>)
 80243be:	f7fc fff5 	bl	80213ac <mg_log>
 80243c2:	e7d6      	b.n	8024372 <trim_len+0x3e>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 80243c4:	4b06      	ldr	r3, [pc, #24]	@ (80243e0 <trim_len+0xac>)
 80243c6:	f241 5293 	movw	r2, #5523	@ 0x1593
 80243ca:	4906      	ldr	r1, [pc, #24]	@ (80243e4 <trim_len+0xb0>)
 80243cc:	2001      	movs	r0, #1
 80243ce:	f7fe ff5b 	bl	8023288 <mg_log_prefix>
 80243d2:	4806      	ldr	r0, [pc, #24]	@ (80243ec <trim_len+0xb8>)
 80243d4:	f7fc ffea 	bl	80213ac <mg_log>
 80243d8:	e7e1      	b.n	802439e <trim_len+0x6a>
 80243da:	bf00      	nop
 80243dc:	200000a8 	.word	0x200000a8
 80243e0:	08037ac4 	.word	0x08037ac4
 80243e4:	08037100 	.word	0x08037100
 80243e8:	0803743c 	.word	0x0803743c
 80243ec:	08037468 	.word	0x08037468

080243f0 <mg_send>:
bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 80243f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80243f2:	b085      	sub	sp, #20
 80243f4:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80243f6:	6843      	ldr	r3, [r0, #4]
 80243f8:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80243fa:	69c7      	ldr	r7, [r0, #28]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 80243fc:	68ab      	ldr	r3, [r5, #8]
 80243fe:	b123      	cbz	r3, 802440a <mg_send+0x1a>
 8024400:	460e      	mov	r6, r1
 8024402:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8024406:	2b03      	cmp	r3, #3
 8024408:	d006      	beq.n	8024418 <mg_send+0x28>
    mg_error(c, "net down");
 802440a:	4913      	ldr	r1, [pc, #76]	@ (8024458 <mg_send+0x68>)
 802440c:	4620      	mov	r0, r4
 802440e:	f7ff f823 	bl	8023458 <mg_error>
  bool res = false;
 8024412:	2000      	movs	r0, #0
}
 8024414:	b005      	add	sp, #20
 8024416:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (c->is_udp) {
 8024418:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 802441c:	f013 0f01 	tst.w	r3, #1
 8024420:	d010      	beq.n	8024444 <mg_send+0x54>
    len = trim_len(c, len);  // Trimming length if necessary
 8024422:	4611      	mov	r1, r2
 8024424:	f7ff ff86 	bl	8024334 <trim_len>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8024428:	68aa      	ldr	r2, [r5, #8]
 802442a:	9003      	str	r0, [sp, #12]
 802442c:	9602      	str	r6, [sp, #8]
 802442e:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8024430:	9301      	str	r3, [sp, #4]
 8024432:	9700      	str	r7, [sp, #0]
 8024434:	8b23      	ldrh	r3, [r4, #24]
 8024436:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 802443a:	4628      	mov	r0, r5
 802443c:	f7fe fcd3 	bl	8022de6 <tx_udp>
    res = true;
 8024440:	2001      	movs	r0, #1
 8024442:	e7e7      	b.n	8024414 <mg_send+0x24>
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 8024444:	4613      	mov	r3, r2
 8024446:	460a      	mov	r2, r1
 8024448:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 802444a:	3048      	adds	r0, #72	@ 0x48
 802444c:	f7ff fde5 	bl	802401a <mg_iobuf_add>
 8024450:	3800      	subs	r0, #0
 8024452:	bf18      	it	ne
 8024454:	2001      	movne	r0, #1
 8024456:	e7dd      	b.n	8024414 <mg_send+0x24>
 8024458:	08037494 	.word	0x08037494

0802445c <mg_dns_send>:
                        uint16_t txnid, bool ipv6) {
 802445c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802445e:	b0c5      	sub	sp, #276	@ 0x114
 8024460:	4606      	mov	r6, r0
 8024462:	460d      	mov	r5, r1
 8024464:	4614      	mov	r4, r2
 8024466:	461f      	mov	r7, r3
  memset(&pkt, 0, sizeof(pkt));
 8024468:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 802446c:	2100      	movs	r1, #0
 802446e:	a801      	add	r0, sp, #4
 8024470:	f005 fb06 	bl	8029a80 <memset>
  pkt.header.txnid = mg_htons(txnid);
 8024474:	4620      	mov	r0, r4
 8024476:	f7fe fc01 	bl	8022c7c <mg_ntohs>
 802447a:	f8ad 0004 	strh.w	r0, [sp, #4]
  pkt.header.flags = mg_htons(0x100);
 802447e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8024482:	f7fe fbfb 	bl	8022c7c <mg_ntohs>
 8024486:	f8ad 0006 	strh.w	r0, [sp, #6]
  pkt.header.num_questions = mg_htons(1);
 802448a:	2001      	movs	r0, #1
 802448c:	f7fe fbf6 	bl	8022c7c <mg_ntohs>
 8024490:	f8ad 0008 	strh.w	r0, [sp, #8]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8024494:	f04f 0c00 	mov.w	ip, #0
 8024498:	4664      	mov	r4, ip
 802449a:	e015      	b.n	80244c8 <mg_dns_send+0x6c>
      pkt.data[n] = (uint8_t) (i - n);
 802449c:	eba4 020c 	sub.w	r2, r4, ip
 80244a0:	ab01      	add	r3, sp, #4
 80244a2:	4463      	add	r3, ip
 80244a4:	731a      	strb	r2, [r3, #12]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 80244a6:	f10c 0309 	add.w	r3, ip, #9
 80244aa:	aa01      	add	r2, sp, #4
 80244ac:	18d0      	adds	r0, r2, r3
 80244ae:	6829      	ldr	r1, [r5, #0]
 80244b0:	eba4 020c 	sub.w	r2, r4, ip
 80244b4:	4461      	add	r1, ip
 80244b6:	3004      	adds	r0, #4
 80244b8:	f006 fd1e 	bl	802aef8 <memcpy>
      n = i + 1;
 80244bc:	f104 0c01 	add.w	ip, r4, #1
    if (i >= name->len) break;
 80244c0:	686a      	ldr	r2, [r5, #4]
 80244c2:	42a2      	cmp	r2, r4
 80244c4:	d90a      	bls.n	80244dc <mg_dns_send+0x80>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80244c6:	3401      	adds	r4, #1
 80244c8:	2cfa      	cmp	r4, #250	@ 0xfa
 80244ca:	d807      	bhi.n	80244dc <mg_dns_send+0x80>
    if (name->buf[i] == '.' || i >= name->len) {
 80244cc:	682b      	ldr	r3, [r5, #0]
 80244ce:	5d1a      	ldrb	r2, [r3, r4]
 80244d0:	2a2e      	cmp	r2, #46	@ 0x2e
 80244d2:	d0e3      	beq.n	802449c <mg_dns_send+0x40>
 80244d4:	686b      	ldr	r3, [r5, #4]
 80244d6:	42a3      	cmp	r3, r4
 80244d8:	d8f2      	bhi.n	80244c0 <mg_dns_send+0x64>
 80244da:	e7df      	b.n	802449c <mg_dns_send+0x40>
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 80244dc:	f10c 0308 	add.w	r3, ip, #8
 80244e0:	aa01      	add	r2, sp, #4
 80244e2:	4413      	add	r3, r2
 80244e4:	4a0a      	ldr	r2, [pc, #40]	@ (8024510 <mg_dns_send+0xb4>)
 80244e6:	f8d2 0220 	ldr.w	r0, [r2, #544]	@ 0x220
 80244ea:	6058      	str	r0, [r3, #4]
 80244ec:	f892 2224 	ldrb.w	r2, [r2, #548]	@ 0x224
 80244f0:	721a      	strb	r2, [r3, #8]
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 80244f2:	b12f      	cbz	r7, 8024500 <mg_dns_send+0xa4>
 80244f4:	f10c 0302 	add.w	r3, ip, #2
 80244f8:	aa01      	add	r2, sp, #4
 80244fa:	4413      	add	r3, r2
 80244fc:	221c      	movs	r2, #28
 80244fe:	731a      	strb	r2, [r3, #12]
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8024500:	f10c 0211 	add.w	r2, ip, #17
 8024504:	a901      	add	r1, sp, #4
 8024506:	4630      	mov	r0, r6
 8024508:	f7ff ff72 	bl	80243f0 <mg_send>
}
 802450c:	b045      	add	sp, #276	@ 0x114
 802450e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024510:	08032dcc 	.word	0x08032dcc

08024514 <mg_mqtt_send_header>:
                         uint32_t len) {
 8024514:	b500      	push	{lr}
 8024516:	b083      	sub	sp, #12
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 8024518:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 802451c:	f88d 2000 	strb.w	r2, [sp]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 8024520:	f10d 0201 	add.w	r2, sp, #1
    *vlen = len % 0x80;
 8024524:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8024528:	7011      	strb	r1, [r2, #0]
    if (len > 0) *vlen |= 0x80;
 802452a:	2b7f      	cmp	r3, #127	@ 0x7f
 802452c:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8024530:	d90e      	bls.n	8024550 <mg_mqtt_send_header+0x3c>
 8024532:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 8024536:	f802 1b01 	strb.w	r1, [r2], #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 802453a:	f10d 0105 	add.w	r1, sp, #5
 802453e:	428a      	cmp	r2, r1
 8024540:	d3f0      	bcc.n	8024524 <mg_mqtt_send_header+0x10>
  mg_send(c, buf, (size_t) (vlen - buf));
 8024542:	4669      	mov	r1, sp
 8024544:	1a52      	subs	r2, r2, r1
 8024546:	f7ff ff53 	bl	80243f0 <mg_send>
}
 802454a:	b003      	add	sp, #12
 802454c:	f85d fb04 	ldr.w	pc, [sp], #4
    vlen++;
 8024550:	3201      	adds	r2, #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 8024552:	e7f6      	b.n	8024542 <mg_mqtt_send_header+0x2e>

08024554 <mg_send_u32>:
static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 8024554:	b500      	push	{lr}
 8024556:	b083      	sub	sp, #12
 8024558:	9101      	str	r1, [sp, #4]
  mg_send(c, &value, sizeof(value));
 802455a:	2204      	movs	r2, #4
 802455c:	eb0d 0102 	add.w	r1, sp, r2
 8024560:	f7ff ff46 	bl	80243f0 <mg_send>
}
 8024564:	b003      	add	sp, #12
 8024566:	f85d fb04 	ldr.w	pc, [sp], #4

0802456a <mg_send_u16>:
static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 802456a:	b500      	push	{lr}
 802456c:	b083      	sub	sp, #12
 802456e:	f8ad 1006 	strh.w	r1, [sp, #6]
  mg_send(c, &value, sizeof(value));
 8024572:	2202      	movs	r2, #2
 8024574:	f10d 0106 	add.w	r1, sp, #6
 8024578:	f7ff ff3a 	bl	80243f0 <mg_send>
}
 802457c:	b003      	add	sp, #12
 802457e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08024584 <mg_send_mqtt_properties>:
                                    struct mg_mqtt_prop *props, size_t nprops) {
 8024584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024588:	b083      	sub	sp, #12
 802458a:	4606      	mov	r6, r0
 802458c:	460f      	mov	r7, r1
 802458e:	4691      	mov	r9, r2
  size_t total_size = get_properties_length(props, nprops);
 8024590:	4611      	mov	r1, r2
 8024592:	4638      	mov	r0, r7
 8024594:	f7fb f8c6 	bl	801f724 <get_properties_length>
 8024598:	4601      	mov	r1, r0
  uint8_t buf_v[4] = {0, 0, 0, 0};
 802459a:	2500      	movs	r5, #0
 802459c:	9501      	str	r5, [sp, #4]
  uint8_t buf[4] = {0, 0, 0, 0};
 802459e:	9500      	str	r5, [sp, #0]
  size_t i, len = encode_varint(buf, total_size);
 80245a0:	4668      	mov	r0, sp
 80245a2:	f7fb f870 	bl	801f686 <encode_varint>
 80245a6:	4602      	mov	r2, r0
  mg_send(c, buf, (size_t) len);
 80245a8:	4669      	mov	r1, sp
 80245aa:	4630      	mov	r0, r6
 80245ac:	f7ff ff20 	bl	80243f0 <mg_send>
  for (i = 0; i < nprops; i++) {
 80245b0:	e018      	b.n	80245e4 <mg_send_mqtt_properties+0x60>
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 80245b2:	89a0      	ldrh	r0, [r4, #12]
 80245b4:	f7fe fb62 	bl	8022c7c <mg_ntohs>
 80245b8:	4601      	mov	r1, r0
 80245ba:	4630      	mov	r0, r6
 80245bc:	f7ff ffd5 	bl	802456a <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 80245c0:	68e2      	ldr	r2, [r4, #12]
 80245c2:	68a1      	ldr	r1, [r4, #8]
 80245c4:	4630      	mov	r0, r6
 80245c6:	f7ff ff13 	bl	80243f0 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80245ca:	8aa0      	ldrh	r0, [r4, #20]
 80245cc:	f7fe fb56 	bl	8022c7c <mg_ntohs>
 80245d0:	4601      	mov	r1, r0
 80245d2:	4630      	mov	r0, r6
 80245d4:	f7ff ffc9 	bl	802456a <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 80245d8:	6962      	ldr	r2, [r4, #20]
 80245da:	6921      	ldr	r1, [r4, #16]
 80245dc:	4630      	mov	r0, r6
 80245de:	f7ff ff07 	bl	80243f0 <mg_send>
  for (i = 0; i < nprops; i++) {
 80245e2:	3501      	adds	r5, #1
 80245e4:	454d      	cmp	r5, r9
 80245e6:	d25b      	bcs.n	80246a0 <mg_send_mqtt_properties+0x11c>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 80245e8:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80245ec:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80245f0:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 80245f4:	2201      	movs	r2, #1
 80245f6:	4621      	mov	r1, r4
 80245f8:	4630      	mov	r0, r6
 80245fa:	f7ff fef9 	bl	80243f0 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 80245fe:	f817 0008 	ldrb.w	r0, [r7, r8]
 8024602:	f7fb f87b 	bl	801f6fc <mqtt_prop_type_by_id>
 8024606:	2806      	cmp	r0, #6
 8024608:	d8eb      	bhi.n	80245e2 <mg_send_mqtt_properties+0x5e>
 802460a:	a301      	add	r3, pc, #4	@ (adr r3, 8024610 <mg_send_mqtt_properties+0x8c>)
 802460c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8024610:	0802462d 	.word	0x0802462d
 8024614:	08024659 	.word	0x08024659
 8024618:	080245b3 	.word	0x080245b3
 802461c:	08024673 	.word	0x08024673
 8024620:	0802468d 	.word	0x0802468d
 8024624:	08024649 	.word	0x08024649
 8024628:	08024639 	.word	0x08024639
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 802462c:	2201      	movs	r2, #1
 802462e:	1d21      	adds	r1, r4, #4
 8024630:	4630      	mov	r0, r6
 8024632:	f7ff fedd 	bl	80243f0 <mg_send>
        break;
 8024636:	e7d4      	b.n	80245e2 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 8024638:	88a0      	ldrh	r0, [r4, #4]
 802463a:	f7fe fb1f 	bl	8022c7c <mg_ntohs>
 802463e:	4601      	mov	r1, r0
 8024640:	4630      	mov	r0, r6
 8024642:	f7ff ff92 	bl	802456a <mg_send_u16>
        break;
 8024646:	e7cc      	b.n	80245e2 <mg_send_mqtt_properties+0x5e>
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 8024648:	6860      	ldr	r0, [r4, #4]
 802464a:	f7fe fa7f 	bl	8022b4c <mg_ntohl>
 802464e:	4601      	mov	r1, r0
 8024650:	4630      	mov	r0, r6
 8024652:	f7ff ff7f 	bl	8024554 <mg_send_u32>
        break;
 8024656:	e7c4      	b.n	80245e2 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8024658:	8aa0      	ldrh	r0, [r4, #20]
 802465a:	f7fe fb0f 	bl	8022c7c <mg_ntohs>
 802465e:	4601      	mov	r1, r0
 8024660:	4630      	mov	r0, r6
 8024662:	f7ff ff82 	bl	802456a <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8024666:	6962      	ldr	r2, [r4, #20]
 8024668:	6921      	ldr	r1, [r4, #16]
 802466a:	4630      	mov	r0, r6
 802466c:	f7ff fec0 	bl	80243f0 <mg_send>
        break;
 8024670:	e7b7      	b.n	80245e2 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8024672:	8aa0      	ldrh	r0, [r4, #20]
 8024674:	f7fe fb02 	bl	8022c7c <mg_ntohs>
 8024678:	4601      	mov	r1, r0
 802467a:	4630      	mov	r0, r6
 802467c:	f7ff ff75 	bl	802456a <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8024680:	6962      	ldr	r2, [r4, #20]
 8024682:	6921      	ldr	r1, [r4, #16]
 8024684:	4630      	mov	r0, r6
 8024686:	f7ff feb3 	bl	80243f0 <mg_send>
        break;
 802468a:	e7aa      	b.n	80245e2 <mg_send_mqtt_properties+0x5e>
        len = encode_varint(buf_v, props[i].iv);
 802468c:	6861      	ldr	r1, [r4, #4]
 802468e:	a801      	add	r0, sp, #4
 8024690:	f7fa fff9 	bl	801f686 <encode_varint>
 8024694:	4602      	mov	r2, r0
        mg_send(c, buf_v, (size_t) len);
 8024696:	a901      	add	r1, sp, #4
 8024698:	4630      	mov	r0, r6
 802469a:	f7ff fea9 	bl	80243f0 <mg_send>
        break;
 802469e:	e7a0      	b.n	80245e2 <mg_send_mqtt_properties+0x5e>
}
 80246a0:	b003      	add	sp, #12
 80246a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80246a6:	bf00      	nop

080246a8 <mg_mqtt_login>:
void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 80246a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80246aa:	b08b      	sub	sp, #44	@ 0x2c
 80246ac:	4605      	mov	r5, r0
 80246ae:	460c      	mov	r4, r1
  struct mg_str cid = opts->client_id;
 80246b0:	ab02      	add	r3, sp, #8
 80246b2:	f101 0210 	add.w	r2, r1, #16
 80246b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80246ba:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 80246be:	2300      	movs	r3, #0
 80246c0:	f88d 3000 	strb.w	r3, [sp]
 80246c4:	2204      	movs	r2, #4
 80246c6:	f88d 2001 	strb.w	r2, [sp, #1]
 80246ca:	224d      	movs	r2, #77	@ 0x4d
 80246cc:	f88d 2002 	strb.w	r2, [sp, #2]
 80246d0:	2251      	movs	r2, #81	@ 0x51
 80246d2:	f88d 2003 	strb.w	r2, [sp, #3]
 80246d6:	2254      	movs	r2, #84	@ 0x54
 80246d8:	f88d 2004 	strb.w	r2, [sp, #4]
 80246dc:	f88d 2005 	strb.w	r2, [sp, #5]
 80246e0:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 80246e4:	f88d 2006 	strb.w	r2, [sp, #6]
 80246e8:	f88d 3007 	strb.w	r3, [sp, #7]
  if (cid.len == 0) {
 80246ec:	2900      	cmp	r1, #0
 80246ee:	f000 809f 	beq.w	8024830 <mg_mqtt_login+0x188>
  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 80246f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80246f6:	b913      	cbnz	r3, 80246fe <mg_mqtt_login+0x56>
 80246f8:	2304      	movs	r3, #4
 80246fa:	f88d 3006 	strb.w	r3, [sp, #6]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 80246fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8024702:	2b05      	cmp	r3, #5
 8024704:	bf14      	ite	ne
 8024706:	2300      	movne	r3, #0
 8024708:	2301      	moveq	r3, #1
 802470a:	f895 20ad 	ldrb.w	r2, [r5, #173]	@ 0xad
 802470e:	f363 0282 	bfi	r2, r3, #2, #1
 8024712:	f885 20ad 	strb.w	r2, [r5, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 8024716:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 802471a:	00d2      	lsls	r2, r2, #3
 802471c:	f002 0218 	and.w	r2, r2, #24
 8024720:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->user.len > 0) {
 8024724:	6863      	ldr	r3, [r4, #4]
 8024726:	2b00      	cmp	r3, #0
 8024728:	f000 808e 	beq.w	8024848 <mg_mqtt_login+0x1a0>
    total_len += 2 + (uint32_t) opts->user.len;
 802472c:	330e      	adds	r3, #14
    hdr[7] |= MQTT_HAS_USER_NAME;
 802472e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8024732:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->pass.len > 0) {
 8024736:	68e2      	ldr	r2, [r4, #12]
 8024738:	b13a      	cbz	r2, 802474a <mg_mqtt_login+0xa2>
    total_len += 2 + (uint32_t) opts->pass.len;
 802473a:	441a      	add	r2, r3
 802473c:	1c93      	adds	r3, r2, #2
    hdr[7] |= MQTT_HAS_PASSWORD;
 802473e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8024742:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8024746:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 802474a:	69e2      	ldr	r2, [r4, #28]
 802474c:	b14a      	cbz	r2, 8024762 <mg_mqtt_login+0xba>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 802474e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8024750:	440a      	add	r2, r1
 8024752:	441a      	add	r2, r3
 8024754:	1d13      	adds	r3, r2, #4
    hdr[7] |= MQTT_HAS_WILL;
 8024756:	f89d 2007 	ldrb.w	r2, [sp, #7]
 802475a:	f042 0204 	orr.w	r2, r2, #4
 802475e:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 8024762:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
 8024766:	b90a      	cbnz	r2, 802476c <mg_mqtt_login+0xc4>
 8024768:	9a03      	ldr	r2, [sp, #12]
 802476a:	b92a      	cbnz	r2, 8024778 <mg_mqtt_login+0xd0>
 802476c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8024770:	f042 0202 	orr.w	r2, r2, #2
 8024774:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 8024778:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 802477c:	b12a      	cbz	r2, 802478a <mg_mqtt_login+0xe2>
 802477e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8024782:	f042 0220 	orr.w	r2, r2, #32
 8024786:	f88d 2007 	strb.w	r2, [sp, #7]
  total_len += (uint32_t) cid.len;
 802478a:	9f03      	ldr	r7, [sp, #12]
 802478c:	18fe      	adds	r6, r7, r3
  if (c->is_mqtt5) {
 802478e:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8024792:	f013 0f04 	tst.w	r3, #4
 8024796:	d159      	bne.n	802484c <mg_mqtt_login+0x1a4>
  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 8024798:	4633      	mov	r3, r6
 802479a:	2200      	movs	r2, #0
 802479c:	2101      	movs	r1, #1
 802479e:	4628      	mov	r0, r5
 80247a0:	f7ff feb8 	bl	8024514 <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 80247a4:	2208      	movs	r2, #8
 80247a6:	4669      	mov	r1, sp
 80247a8:	4628      	mov	r0, r5
 80247aa:	f7ff fe21 	bl	80243f0 <mg_send>
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 80247ae:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 80247b0:	f7fe fa64 	bl	8022c7c <mg_ntohs>
 80247b4:	4601      	mov	r1, r0
 80247b6:	4628      	mov	r0, r5
 80247b8:	f7ff fed7 	bl	802456a <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80247bc:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80247c0:	f013 0f04 	tst.w	r3, #4
 80247c4:	d152      	bne.n	802486c <mg_mqtt_login+0x1c4>
  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 80247c6:	b2b8      	uxth	r0, r7
 80247c8:	f7fe fa58 	bl	8022c7c <mg_ntohs>
 80247cc:	4601      	mov	r1, r0
 80247ce:	4628      	mov	r0, r5
 80247d0:	f7ff fecb 	bl	802456a <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 80247d4:	463a      	mov	r2, r7
 80247d6:	9902      	ldr	r1, [sp, #8]
 80247d8:	4628      	mov	r0, r5
 80247da:	f7ff fe09 	bl	80243f0 <mg_send>
  if (hdr[7] & MQTT_HAS_WILL) {
 80247de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80247e2:	f013 0f04 	tst.w	r3, #4
 80247e6:	d01c      	beq.n	8024822 <mg_mqtt_login+0x17a>
    if (c->is_mqtt5)
 80247e8:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80247ec:	f013 0f04 	tst.w	r3, #4
 80247f0:	d142      	bne.n	8024878 <mg_mqtt_login+0x1d0>
    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 80247f2:	8ba0      	ldrh	r0, [r4, #28]
 80247f4:	f7fe fa42 	bl	8022c7c <mg_ntohs>
 80247f8:	4601      	mov	r1, r0
 80247fa:	4628      	mov	r0, r5
 80247fc:	f7ff feb5 	bl	802456a <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 8024800:	69e2      	ldr	r2, [r4, #28]
 8024802:	69a1      	ldr	r1, [r4, #24]
 8024804:	4628      	mov	r0, r5
 8024806:	f7ff fdf3 	bl	80243f0 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 802480a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 802480c:	f7fe fa36 	bl	8022c7c <mg_ntohs>
 8024810:	4601      	mov	r1, r0
 8024812:	4628      	mov	r0, r5
 8024814:	f7ff fea9 	bl	802456a <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 8024818:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 802481a:	6a21      	ldr	r1, [r4, #32]
 802481c:	4628      	mov	r0, r5
 802481e:	f7ff fde7 	bl	80243f0 <mg_send>
  if (opts->user.len > 0) {
 8024822:	6860      	ldr	r0, [r4, #4]
 8024824:	bb70      	cbnz	r0, 8024884 <mg_mqtt_login+0x1dc>
  if (opts->pass.len > 0) {
 8024826:	68e0      	ldr	r0, [r4, #12]
 8024828:	2800      	cmp	r0, #0
 802482a:	d138      	bne.n	802489e <mg_mqtt_login+0x1f6>
}
 802482c:	b00b      	add	sp, #44	@ 0x2c
 802482e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mg_random_str(client_id, sizeof(client_id) - 1);
 8024830:	2114      	movs	r1, #20
 8024832:	a804      	add	r0, sp, #16
 8024834:	f7fe f95e 	bl	8022af4 <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 8024838:	2300      	movs	r3, #0
 802483a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    cid = mg_str(client_id);
 802483e:	a904      	add	r1, sp, #16
 8024840:	a802      	add	r0, sp, #8
 8024842:	f7fc fee9 	bl	8021618 <mg_str_s>
 8024846:	e754      	b.n	80246f2 <mg_mqtt_login+0x4a>
  size_t total_len = 7 + 1 + 2 + 2;
 8024848:	230c      	movs	r3, #12
 802484a:	e774      	b.n	8024736 <mg_mqtt_login+0x8e>
    total_len += get_props_size(opts->props, opts->num_props);
 802484c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802484e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8024850:	f7fa ffac 	bl	801f7ac <get_props_size>
 8024854:	4406      	add	r6, r0
    if (hdr[7] & MQTT_HAS_WILL)
 8024856:	f89d 3007 	ldrb.w	r3, [sp, #7]
 802485a:	f013 0f04 	tst.w	r3, #4
 802485e:	d09b      	beq.n	8024798 <mg_mqtt_login+0xf0>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 8024860:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8024862:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8024864:	f7fa ffa2 	bl	801f7ac <get_props_size>
 8024868:	4406      	add	r6, r0
 802486a:	e795      	b.n	8024798 <mg_mqtt_login+0xf0>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802486c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 802486e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8024870:	4628      	mov	r0, r5
 8024872:	f7ff fe87 	bl	8024584 <mg_send_mqtt_properties>
 8024876:	e7a6      	b.n	80247c6 <mg_mqtt_login+0x11e>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 8024878:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 802487a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802487c:	4628      	mov	r0, r5
 802487e:	f7ff fe81 	bl	8024584 <mg_send_mqtt_properties>
 8024882:	e7b6      	b.n	80247f2 <mg_mqtt_login+0x14a>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 8024884:	b280      	uxth	r0, r0
 8024886:	f7fe f9f9 	bl	8022c7c <mg_ntohs>
 802488a:	4601      	mov	r1, r0
 802488c:	4628      	mov	r0, r5
 802488e:	f7ff fe6c 	bl	802456a <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 8024892:	6862      	ldr	r2, [r4, #4]
 8024894:	6821      	ldr	r1, [r4, #0]
 8024896:	4628      	mov	r0, r5
 8024898:	f7ff fdaa 	bl	80243f0 <mg_send>
 802489c:	e7c3      	b.n	8024826 <mg_mqtt_login+0x17e>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 802489e:	b280      	uxth	r0, r0
 80248a0:	f7fe f9ec 	bl	8022c7c <mg_ntohs>
 80248a4:	4601      	mov	r1, r0
 80248a6:	4628      	mov	r0, r5
 80248a8:	f7ff fe5f 	bl	802456a <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 80248ac:	68e2      	ldr	r2, [r4, #12]
 80248ae:	68a1      	ldr	r1, [r4, #8]
 80248b0:	4628      	mov	r0, r5
 80248b2:	f7ff fd9d 	bl	80243f0 <mg_send>
}
 80248b6:	e7b9      	b.n	802482c <mg_mqtt_login+0x184>

080248b8 <mg_mqtt_sub>:
void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 80248b8:	b530      	push	{r4, r5, lr}
 80248ba:	b083      	sub	sp, #12
 80248bc:	4604      	mov	r4, r0
 80248be:	460d      	mov	r5, r1
  uint8_t qos_ = opts->qos & 3;
 80248c0:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80248c4:	f003 0303 	and.w	r3, r3, #3
 80248c8:	f88d 3007 	strb.w	r3, [sp, #7]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 80248cc:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 80248d0:	f013 0f04 	tst.w	r3, #4
 80248d4:	d133      	bne.n	802493e <mg_mqtt_sub+0x86>
 80248d6:	2000      	movs	r0, #0
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 80248d8:	69eb      	ldr	r3, [r5, #28]
 80248da:	4403      	add	r3, r0
  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 80248dc:	3305      	adds	r3, #5
 80248de:	2202      	movs	r2, #2
 80248e0:	2108      	movs	r1, #8
 80248e2:	4620      	mov	r0, r4
 80248e4:	f7ff fe16 	bl	8024514 <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 80248e8:	6862      	ldr	r2, [r4, #4]
 80248ea:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80248ec:	3301      	adds	r3, #1
 80248ee:	b29b      	uxth	r3, r3
 80248f0:	8593      	strh	r3, [r2, #44]	@ 0x2c
 80248f2:	b91b      	cbnz	r3, 80248fc <mg_mqtt_sub+0x44>
 80248f4:	6862      	ldr	r2, [r4, #4]
 80248f6:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80248f8:	3301      	adds	r3, #1
 80248fa:	8593      	strh	r3, [r2, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 80248fc:	6863      	ldr	r3, [r4, #4]
 80248fe:	8d98      	ldrh	r0, [r3, #44]	@ 0x2c
 8024900:	f7fe f9bc 	bl	8022c7c <mg_ntohs>
 8024904:	4601      	mov	r1, r0
 8024906:	4620      	mov	r0, r4
 8024908:	f7ff fe2f 	bl	802456a <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802490c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8024910:	f013 0f04 	tst.w	r3, #4
 8024914:	d118      	bne.n	8024948 <mg_mqtt_sub+0x90>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8024916:	8ba8      	ldrh	r0, [r5, #28]
 8024918:	f7fe f9b0 	bl	8022c7c <mg_ntohs>
 802491c:	4601      	mov	r1, r0
 802491e:	4620      	mov	r0, r4
 8024920:	f7ff fe23 	bl	802456a <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8024924:	69ea      	ldr	r2, [r5, #28]
 8024926:	69a9      	ldr	r1, [r5, #24]
 8024928:	4620      	mov	r0, r4
 802492a:	f7ff fd61 	bl	80243f0 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 802492e:	2201      	movs	r2, #1
 8024930:	f10d 0107 	add.w	r1, sp, #7
 8024934:	4620      	mov	r0, r4
 8024936:	f7ff fd5b 	bl	80243f0 <mg_send>
}
 802493a:	b003      	add	sp, #12
 802493c:	bd30      	pop	{r4, r5, pc}
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 802493e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8024940:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8024942:	f7fa ff33 	bl	801f7ac <get_props_size>
 8024946:	e7c7      	b.n	80248d8 <mg_mqtt_sub+0x20>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8024948:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 802494a:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 802494c:	4620      	mov	r0, r4
 802494e:	f7ff fe19 	bl	8024584 <mg_send_mqtt_properties>
 8024952:	e7e0      	b.n	8024916 <mg_mqtt_sub+0x5e>

08024954 <mg_mqtt_pub>:
uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8024954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024958:	b083      	sub	sp, #12
 802495a:	4605      	mov	r5, r0
 802495c:	460c      	mov	r4, r1
  uint16_t id = opts->retransmit_id;
 802495e:	f8b1 802c 	ldrh.w	r8, [r1, #44]	@ 0x2c
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8024962:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8024966:	005b      	lsls	r3, r3, #1
 8024968:	f003 0306 	and.w	r3, r3, #6
 802496c:	f891 202e 	ldrb.w	r2, [r1, #46]	@ 0x2e
 8024970:	2a00      	cmp	r2, #0
 8024972:	d057      	beq.n	8024a24 <mg_mqtt_pub+0xd0>
 8024974:	2201      	movs	r2, #1
 8024976:	ea43 0a02 	orr.w	sl, r3, r2
 802497a:	4656      	mov	r6, sl
  size_t len = 2 + opts->topic.len + opts->message.len;
 802497c:	69e7      	ldr	r7, [r4, #28]
 802497e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8024980:	441f      	add	r7, r3
 8024982:	f107 0902 	add.w	r9, r7, #2
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8024986:	4b3a      	ldr	r3, [pc, #232]	@ (8024a70 <mg_mqtt_pub+0x11c>)
 8024988:	681b      	ldr	r3, [r3, #0]
 802498a:	2b02      	cmp	r3, #2
 802498c:	dc4c      	bgt.n	8024a28 <mg_mqtt_pub+0xd4>
  if (opts->qos > 0) len += 2;
 802498e:	f894 b028 	ldrb.w	fp, [r4, #40]	@ 0x28
 8024992:	f1bb 0f00 	cmp.w	fp, #0
 8024996:	d001      	beq.n	802499c <mg_mqtt_pub+0x48>
 8024998:	f107 0904 	add.w	r9, r7, #4
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 802499c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80249a0:	f013 0f04 	tst.w	r3, #4
 80249a4:	d152      	bne.n	8024a4c <mg_mqtt_pub+0xf8>
  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 80249a6:	f1bb 0f00 	cmp.w	fp, #0
 80249aa:	d004      	beq.n	80249b6 <mg_mqtt_pub+0x62>
 80249ac:	f1b8 0f00 	cmp.w	r8, #0
 80249b0:	d001      	beq.n	80249b6 <mg_mqtt_pub+0x62>
 80249b2:	f04a 0608 	orr.w	r6, sl, #8
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 80249b6:	464b      	mov	r3, r9
 80249b8:	4632      	mov	r2, r6
 80249ba:	2103      	movs	r1, #3
 80249bc:	4628      	mov	r0, r5
 80249be:	f7ff fda9 	bl	8024514 <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 80249c2:	8ba0      	ldrh	r0, [r4, #28]
 80249c4:	f7fe f95a 	bl	8022c7c <mg_ntohs>
 80249c8:	4601      	mov	r1, r0
 80249ca:	4628      	mov	r0, r5
 80249cc:	f7ff fdcd 	bl	802456a <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 80249d0:	69e2      	ldr	r2, [r4, #28]
 80249d2:	69a1      	ldr	r1, [r4, #24]
 80249d4:	4628      	mov	r0, r5
 80249d6:	f7ff fd0b 	bl	80243f0 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 80249da:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80249de:	b1b3      	cbz	r3, 8024a0e <mg_mqtt_pub+0xba>
    if (id == 0) {  // generate new one if not resending
 80249e0:	f1b8 0f00 	cmp.w	r8, #0
 80249e4:	d10c      	bne.n	8024a00 <mg_mqtt_pub+0xac>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 80249e6:	686a      	ldr	r2, [r5, #4]
 80249e8:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80249ea:	3301      	adds	r3, #1
 80249ec:	b29b      	uxth	r3, r3
 80249ee:	8593      	strh	r3, [r2, #44]	@ 0x2c
 80249f0:	b91b      	cbnz	r3, 80249fa <mg_mqtt_pub+0xa6>
 80249f2:	686a      	ldr	r2, [r5, #4]
 80249f4:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80249f6:	3301      	adds	r3, #1
 80249f8:	8593      	strh	r3, [r2, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 80249fa:	686b      	ldr	r3, [r5, #4]
 80249fc:	f8b3 802c 	ldrh.w	r8, [r3, #44]	@ 0x2c
    mg_send_u16(c, mg_htons(id));
 8024a00:	4640      	mov	r0, r8
 8024a02:	f7fe f93b 	bl	8022c7c <mg_ntohs>
 8024a06:	4601      	mov	r1, r0
 8024a08:	4628      	mov	r0, r5
 8024a0a:	f7ff fdae 	bl	802456a <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8024a0e:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8024a12:	f013 0f04 	tst.w	r3, #4
 8024a16:	d11f      	bne.n	8024a58 <mg_mqtt_pub+0x104>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8024a18:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8024a1a:	bb1a      	cbnz	r2, 8024a64 <mg_mqtt_pub+0x110>
}
 8024a1c:	4640      	mov	r0, r8
 8024a1e:	b003      	add	sp, #12
 8024a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8024a24:	2200      	movs	r2, #0
 8024a26:	e7a6      	b.n	8024976 <mg_mqtt_pub+0x22>
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8024a28:	4b12      	ldr	r3, [pc, #72]	@ (8024a74 <mg_mqtt_pub+0x120>)
 8024a2a:	f241 123c 	movw	r2, #4412	@ 0x113c
 8024a2e:	4912      	ldr	r1, [pc, #72]	@ (8024a78 <mg_mqtt_pub+0x124>)
 8024a30:	2003      	movs	r0, #3
 8024a32:	f7fe fc29 	bl	8023288 <mg_log_prefix>
 8024a36:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8024a38:	6a22      	ldr	r2, [r4, #32]
 8024a3a:	9201      	str	r2, [sp, #4]
 8024a3c:	9300      	str	r3, [sp, #0]
 8024a3e:	69a3      	ldr	r3, [r4, #24]
 8024a40:	69e2      	ldr	r2, [r4, #28]
 8024a42:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8024a44:	480d      	ldr	r0, [pc, #52]	@ (8024a7c <mg_mqtt_pub+0x128>)
 8024a46:	f7fc fcb1 	bl	80213ac <mg_log>
 8024a4a:	e7a0      	b.n	802498e <mg_mqtt_pub+0x3a>
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 8024a4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024a4e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8024a50:	f7fa feac 	bl	801f7ac <get_props_size>
 8024a54:	4481      	add	r9, r0
 8024a56:	e7a6      	b.n	80249a6 <mg_mqtt_pub+0x52>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8024a58:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8024a5a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8024a5c:	4628      	mov	r0, r5
 8024a5e:	f7ff fd91 	bl	8024584 <mg_send_mqtt_properties>
 8024a62:	e7d9      	b.n	8024a18 <mg_mqtt_pub+0xc4>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8024a64:	6a21      	ldr	r1, [r4, #32]
 8024a66:	4628      	mov	r0, r5
 8024a68:	f7ff fcc2 	bl	80243f0 <mg_send>
 8024a6c:	e7d6      	b.n	8024a1c <mg_mqtt_pub+0xc8>
 8024a6e:	bf00      	nop
 8024a70:	200000a8 	.word	0x200000a8
 8024a74:	08037b00 	.word	0x08037b00
 8024a78:	08037100 	.word	0x08037100
 8024a7c:	080374a0 	.word	0x080374a0

08024a80 <mqtt_cb>:
static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 8024a80:	b530      	push	{r4, r5, lr}
 8024a82:	b08f      	sub	sp, #60	@ 0x3c
 8024a84:	4604      	mov	r4, r0
  if (ev == MG_EV_READ) {
 8024a86:	2907      	cmp	r1, #7
 8024a88:	f000 808f 	beq.w	8024baa <mqtt_cb+0x12a>
}
 8024a8c:	b00f      	add	sp, #60	@ 0x3c
 8024a8e:	bd30      	pop	{r4, r5, pc}
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8024a90:	2204      	movs	r2, #4
 8024a92:	e091      	b.n	8024bb8 <mqtt_cb+0x138>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8024a94:	4b73      	ldr	r3, [pc, #460]	@ (8024c64 <mqtt_cb+0x1e4>)
 8024a96:	681b      	ldr	r3, [r3, #0]
 8024a98:	2b00      	cmp	r3, #0
 8024a9a:	dc06      	bgt.n	8024aaa <mqtt_cb+0x2a>
        c->is_closing = 1;
 8024a9c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8024aa0:	f043 0320 	orr.w	r3, r3, #32
 8024aa4:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        break;
 8024aa8:	e7f0      	b.n	8024a8c <mqtt_cb+0xc>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8024aaa:	4b6f      	ldr	r3, [pc, #444]	@ (8024c68 <mqtt_cb+0x1e8>)
 8024aac:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 8024ab0:	496e      	ldr	r1, [pc, #440]	@ (8024c6c <mqtt_cb+0x1ec>)
 8024ab2:	2001      	movs	r0, #1
 8024ab4:	f7fe fbe8 	bl	8023288 <mg_log_prefix>
 8024ab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024aba:	486d      	ldr	r0, [pc, #436]	@ (8024c70 <mqtt_cb+0x1f0>)
 8024abc:	f7fc fc76 	bl	80213ac <mg_log>
 8024ac0:	e7ec      	b.n	8024a9c <mqtt_cb+0x1c>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8024ac2:	4b69      	ldr	r3, [pc, #420]	@ (8024c68 <mqtt_cb+0x1e8>)
 8024ac4:	f241 12b5 	movw	r2, #4533	@ 0x11b5
 8024ac8:	4968      	ldr	r1, [pc, #416]	@ (8024c6c <mqtt_cb+0x1ec>)
 8024aca:	2004      	movs	r0, #4
 8024acc:	f7fe fbdc 	bl	8023288 <mg_log_prefix>
 8024ad0:	9b06      	ldr	r3, [sp, #24]
 8024ad2:	9301      	str	r3, [sp, #4]
 8024ad4:	9b07      	ldr	r3, [sp, #28]
 8024ad6:	9300      	str	r3, [sp, #0]
 8024ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024ada:	f89d 202a 	ldrb.w	r2, [sp, #42]	@ 0x2a
 8024ade:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024ae0:	4864      	ldr	r0, [pc, #400]	@ (8024c74 <mqtt_cb+0x1f4>)
 8024ae2:	f7fc fc63 	bl	80213ac <mg_log>
 8024ae6:	e077      	b.n	8024bd8 <mqtt_cb+0x158>
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 8024ae8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8024aea:	2111      	movs	r1, #17
 8024aec:	4620      	mov	r0, r4
 8024aee:	f7fb fa15 	bl	801ff1c <mg_call>
            if (mm.ack == 0) {
 8024af2:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8024af6:	b97b      	cbnz	r3, 8024b18 <mqtt_cb+0x98>
              MG_DEBUG(("%lu Connected", c->id));
 8024af8:	4b5a      	ldr	r3, [pc, #360]	@ (8024c64 <mqtt_cb+0x1e4>)
 8024afa:	681b      	ldr	r3, [r3, #0]
 8024afc:	2b02      	cmp	r3, #2
 8024afe:	dd49      	ble.n	8024b94 <mqtt_cb+0x114>
 8024b00:	4b59      	ldr	r3, [pc, #356]	@ (8024c68 <mqtt_cb+0x1e8>)
 8024b02:	f241 12bb 	movw	r2, #4539	@ 0x11bb
 8024b06:	4959      	ldr	r1, [pc, #356]	@ (8024c6c <mqtt_cb+0x1ec>)
 8024b08:	2003      	movs	r0, #3
 8024b0a:	f7fe fbbd 	bl	8023288 <mg_log_prefix>
 8024b0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024b10:	4859      	ldr	r0, [pc, #356]	@ (8024c78 <mqtt_cb+0x1f8>)
 8024b12:	f7fc fc4b 	bl	80213ac <mg_log>
 8024b16:	e03d      	b.n	8024b94 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8024b18:	4b52      	ldr	r3, [pc, #328]	@ (8024c64 <mqtt_cb+0x1e4>)
 8024b1a:	681b      	ldr	r3, [r3, #0]
 8024b1c:	2b00      	cmp	r3, #0
 8024b1e:	dc06      	bgt.n	8024b2e <mqtt_cb+0xae>
              c->is_closing = 1;
 8024b20:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8024b24:	f043 0320 	orr.w	r3, r3, #32
 8024b28:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8024b2c:	e032      	b.n	8024b94 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8024b2e:	4b4e      	ldr	r3, [pc, #312]	@ (8024c68 <mqtt_cb+0x1e8>)
 8024b30:	f241 12bd 	movw	r2, #4541	@ 0x11bd
 8024b34:	494d      	ldr	r1, [pc, #308]	@ (8024c6c <mqtt_cb+0x1ec>)
 8024b36:	2001      	movs	r0, #1
 8024b38:	f7fe fba6 	bl	8023288 <mg_log_prefix>
 8024b3c:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 8024b40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024b42:	484e      	ldr	r0, [pc, #312]	@ (8024c7c <mqtt_cb+0x1fc>)
 8024b44:	f7fc fc32 	bl	80213ac <mg_log>
 8024b48:	e7ea      	b.n	8024b20 <mqtt_cb+0xa0>
            if (mm.qos > 0) {
 8024b4a:	f89d 502b 	ldrb.w	r5, [sp, #43]	@ 0x2b
 8024b4e:	b1e5      	cbz	r5, 8024b8a <mqtt_cb+0x10a>
              uint16_t id = mg_ntohs(mm.id);
 8024b50:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8024b54:	f7fe f892 	bl	8022c7c <mg_ntohs>
 8024b58:	f8ad 000c 	strh.w	r0, [sp, #12]
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 8024b5c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8024b60:	f013 0f04 	tst.w	r3, #4
 8024b64:	d14a      	bne.n	8024bfc <mqtt_cb+0x17c>
              uint32_t remaining_len = sizeof(id);
 8024b66:	2302      	movs	r3, #2
              mg_mqtt_send_header(
 8024b68:	2d02      	cmp	r5, #2
 8024b6a:	d049      	beq.n	8024c00 <mqtt_cb+0x180>
 8024b6c:	2104      	movs	r1, #4
 8024b6e:	2200      	movs	r2, #0
 8024b70:	4620      	mov	r0, r4
 8024b72:	f7ff fccf 	bl	8024514 <mg_mqtt_send_header>
              mg_send(c, &id, sizeof(id));
 8024b76:	2202      	movs	r2, #2
 8024b78:	a903      	add	r1, sp, #12
 8024b7a:	4620      	mov	r0, r4
 8024b7c:	f7ff fc38 	bl	80243f0 <mg_send>
              if (c->is_mqtt5) {
 8024b80:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8024b84:	f013 0f04 	tst.w	r3, #4
 8024b88:	d13c      	bne.n	8024c04 <mqtt_cb+0x184>
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 8024b8a:	aa04      	add	r2, sp, #16
 8024b8c:	2110      	movs	r1, #16
 8024b8e:	4620      	mov	r0, r4
 8024b90:	f7fb f9c4 	bl	801ff1c <mg_call>
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 8024b94:	aa04      	add	r2, sp, #16
 8024b96:	210f      	movs	r1, #15
 8024b98:	4620      	mov	r0, r4
 8024b9a:	f7fb f9bf 	bl	801ff1c <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 8024b9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024ba0:	2100      	movs	r1, #0
 8024ba2:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8024ba6:	f7fd ff74 	bl	8022a92 <mg_iobuf_del>
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8024baa:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8024bae:	f013 0f04 	tst.w	r3, #4
 8024bb2:	f43f af6d 	beq.w	8024a90 <mqtt_cb+0x10>
 8024bb6:	2205      	movs	r2, #5
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 8024bb8:	ab04      	add	r3, sp, #16
 8024bba:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8024bbc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8024bbe:	f7fb fe70 	bl	80208a2 <mg_mqtt_parse>
      if (rc == MQTT_MALFORMED) {
 8024bc2:	2802      	cmp	r0, #2
 8024bc4:	f43f af66 	beq.w	8024a94 <mqtt_cb+0x14>
      } else if (rc == MQTT_OK) {
 8024bc8:	2800      	cmp	r0, #0
 8024bca:	f47f af5f 	bne.w	8024a8c <mqtt_cb+0xc>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8024bce:	4b25      	ldr	r3, [pc, #148]	@ (8024c64 <mqtt_cb+0x1e4>)
 8024bd0:	681b      	ldr	r3, [r3, #0]
 8024bd2:	2b03      	cmp	r3, #3
 8024bd4:	f73f af75 	bgt.w	8024ac2 <mqtt_cb+0x42>
        switch (mm.cmd) {
 8024bd8:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 8024bdc:	3b02      	subs	r3, #2
 8024bde:	2b04      	cmp	r3, #4
 8024be0:	d8d8      	bhi.n	8024b94 <mqtt_cb+0x114>
 8024be2:	a201      	add	r2, pc, #4	@ (adr r2, 8024be8 <mqtt_cb+0x168>)
 8024be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024be8:	08024ae9 	.word	0x08024ae9
 8024bec:	08024b4b 	.word	0x08024b4b
 8024bf0:	08024b95 	.word	0x08024b95
 8024bf4:	08024c19 	.word	0x08024c19
 8024bf8:	08024c3f 	.word	0x08024c3f
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 8024bfc:	2304      	movs	r3, #4
 8024bfe:	e7b3      	b.n	8024b68 <mqtt_cb+0xe8>
              mg_mqtt_send_header(
 8024c00:	2105      	movs	r1, #5
 8024c02:	e7b4      	b.n	8024b6e <mqtt_cb+0xee>
                uint16_t zero = 0;
 8024c04:	2300      	movs	r3, #0
 8024c06:	f8ad 300e 	strh.w	r3, [sp, #14]
                mg_send(c, &zero, sizeof(zero));
 8024c0a:	2202      	movs	r2, #2
 8024c0c:	f10d 010e 	add.w	r1, sp, #14
 8024c10:	4620      	mov	r0, r4
 8024c12:	f7ff fbed 	bl	80243f0 <mg_send>
 8024c16:	e7b8      	b.n	8024b8a <mqtt_cb+0x10a>
            uint16_t id = mg_ntohs(mm.id);
 8024c18:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8024c1c:	f7fe f82e 	bl	8022c7c <mg_ntohs>
 8024c20:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 8024c24:	2302      	movs	r3, #2
 8024c26:	461a      	mov	r2, r3
 8024c28:	2106      	movs	r1, #6
 8024c2a:	4620      	mov	r0, r4
 8024c2c:	f7ff fc72 	bl	8024514 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 8024c30:	2202      	movs	r2, #2
 8024c32:	f10d 010e 	add.w	r1, sp, #14
 8024c36:	4620      	mov	r0, r4
 8024c38:	f7ff fbda 	bl	80243f0 <mg_send>
            break;
 8024c3c:	e7aa      	b.n	8024b94 <mqtt_cb+0x114>
            uint16_t id = mg_ntohs(mm.id);
 8024c3e:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8024c42:	f7fe f81b 	bl	8022c7c <mg_ntohs>
 8024c46:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 8024c4a:	2302      	movs	r3, #2
 8024c4c:	2200      	movs	r2, #0
 8024c4e:	2107      	movs	r1, #7
 8024c50:	4620      	mov	r0, r4
 8024c52:	f7ff fc5f 	bl	8024514 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 8024c56:	2202      	movs	r2, #2
 8024c58:	f10d 010e 	add.w	r1, sp, #14
 8024c5c:	4620      	mov	r0, r4
 8024c5e:	f7ff fbc7 	bl	80243f0 <mg_send>
            break;
 8024c62:	e797      	b.n	8024b94 <mqtt_cb+0x114>
 8024c64:	200000a8 	.word	0x200000a8
 8024c68:	08037af8 	.word	0x08037af8
 8024c6c:	08037100 	.word	0x08037100
 8024c70:	080374b8 	.word	0x080374b8
 8024c74:	080374d4 	.word	0x080374d4
 8024c78:	080374f4 	.word	0x080374f4
 8024c7c:	08037504 	.word	0x08037504

08024c80 <tx_tcp>:
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 8024c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024c84:	b088      	sub	sp, #32
 8024c86:	4605      	mov	r5, r0
 8024c88:	469a      	mov	sl, r3
 8024c8a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 8024c8c:	f107 0614 	add.w	r6, r7, #20
 8024c90:	9601      	str	r6, [sp, #4]
 8024c92:	9200      	str	r2, [sp, #0]
 8024c94:	6883      	ldr	r3, [r0, #8]
 8024c96:	2206      	movs	r2, #6
 8024c98:	f7fe f810 	bl	8022cbc <tx_ip>
 8024c9c:	4604      	mov	r4, r0
  struct tcp *tcp = (struct tcp *) (ip + 1);
 8024c9e:	f100 0914 	add.w	r9, r0, #20
  memset(tcp, 0, sizeof(*tcp));
 8024ca2:	2200      	movs	r2, #0
 8024ca4:	6142      	str	r2, [r0, #20]
 8024ca6:	6182      	str	r2, [r0, #24]
 8024ca8:	61c2      	str	r2, [r0, #28]
 8024caa:	6202      	str	r2, [r0, #32]
 8024cac:	6242      	str	r2, [r0, #36]	@ 0x24
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8024cae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024cb0:	b10b      	cbz	r3, 8024cb6 <tx_tcp+0x36>
 8024cb2:	2f00      	cmp	r7, #0
 8024cb4:	d147      	bne.n	8024d46 <tx_tcp+0xc6>
  tcp->sport = sport;
 8024cb6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8024cba:	82a3      	strh	r3, [r4, #20]
  tcp->dport = dport;
 8024cbc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8024cc0:	82e3      	strh	r3, [r4, #22]
  tcp->seq = seq;
 8024cc2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024cc4:	61a3      	str	r3, [r4, #24]
  tcp->ack = ack;
 8024cc6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024cc8:	61e3      	str	r3, [r4, #28]
  tcp->flags = flags;
 8024cca:	f884 a021 	strb.w	sl, [r4, #33]	@ 0x21
  tcp->win = mg_htons(MIP_TCP_WIN);
 8024cce:	f241 7070 	movw	r0, #6000	@ 0x1770
 8024cd2:	f7fd ffd3 	bl	8022c7c <mg_ntohs>
 8024cd6:	8460      	strh	r0, [r4, #34]	@ 0x22
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 8024cd8:	2350      	movs	r3, #80	@ 0x50
 8024cda:	f884 3020 	strb.w	r3, [r4, #32]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 8024cde:	b2bb      	uxth	r3, r7
 8024ce0:	3314      	adds	r3, #20
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 8024ce2:	2000      	movs	r0, #0
 8024ce4:	f88d 001c 	strb.w	r0, [sp, #28]
 8024ce8:	7a62      	ldrb	r2, [r4, #9]
 8024cea:	f88d 201d 	strb.w	r2, [sp, #29]
 8024cee:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8024cf2:	f88d 201e 	strb.w	r2, [sp, #30]
 8024cf6:	f88d 301f 	strb.w	r3, [sp, #31]
  cs = csumup(cs, tcp, n);
 8024cfa:	b2b2      	uxth	r2, r6
 8024cfc:	4649      	mov	r1, r9
 8024cfe:	f7fa fdb5 	bl	801f86c <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8024d02:	f104 060c 	add.w	r6, r4, #12
 8024d06:	2204      	movs	r2, #4
 8024d08:	4631      	mov	r1, r6
 8024d0a:	f7fa fdaf 	bl	801f86c <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8024d0e:	f104 0810 	add.w	r8, r4, #16
 8024d12:	2204      	movs	r2, #4
 8024d14:	4641      	mov	r1, r8
 8024d16:	f7fa fda9 	bl	801f86c <csumup>
  cs = csumup(cs, pseudo, sizeof(pseudo));
 8024d1a:	2204      	movs	r2, #4
 8024d1c:	a907      	add	r1, sp, #28
 8024d1e:	f7fa fda5 	bl	801f86c <csumup>
  tcp->csum = csumfin(cs);
 8024d22:	f7fd ffb7 	bl	8022c94 <csumfin>
 8024d26:	84a0      	strh	r0, [r4, #36]	@ 0x24
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8024d28:	4b18      	ldr	r3, [pc, #96]	@ (8024d8c <tx_tcp+0x10c>)
 8024d2a:	681b      	ldr	r3, [r3, #0]
 8024d2c:	2b03      	cmp	r3, #3
 8024d2e:	dc10      	bgt.n	8024d52 <tx_tcp+0xd2>
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 8024d30:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8024d34:	696b      	ldr	r3, [r5, #20]
 8024d36:	1ac9      	subs	r1, r1, r3
 8024d38:	4439      	add	r1, r7
 8024d3a:	4628      	mov	r0, r5
 8024d3c:	f7fa fda7 	bl	801f88e <ether_output>
}
 8024d40:	b008      	add	sp, #32
 8024d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8024d46:	463a      	mov	r2, r7
 8024d48:	4619      	mov	r1, r3
 8024d4a:	3028      	adds	r0, #40	@ 0x28
 8024d4c:	f004 fe7e 	bl	8029a4c <memmove>
 8024d50:	e7b1      	b.n	8024cb6 <tx_tcp+0x36>
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8024d52:	4b0f      	ldr	r3, [pc, #60]	@ (8024d90 <tx_tcp+0x110>)
 8024d54:	f241 5254 	movw	r2, #5460	@ 0x1554
 8024d58:	490e      	ldr	r1, [pc, #56]	@ (8024d94 <tx_tcp+0x114>)
 8024d5a:	2004      	movs	r0, #4
 8024d5c:	f7fe fa94 	bl	8023288 <mg_log_prefix>
 8024d60:	8aa0      	ldrh	r0, [r4, #20]
 8024d62:	f7fd ff8b 	bl	8022c7c <mg_ntohs>
 8024d66:	4681      	mov	r9, r0
 8024d68:	8ae0      	ldrh	r0, [r4, #22]
 8024d6a:	f7fd ff87 	bl	8022c7c <mg_ntohs>
 8024d6e:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8024d72:	4909      	ldr	r1, [pc, #36]	@ (8024d98 <tx_tcp+0x118>)
 8024d74:	9704      	str	r7, [sp, #16]
 8024d76:	9303      	str	r3, [sp, #12]
 8024d78:	9002      	str	r0, [sp, #8]
 8024d7a:	f8cd 8004 	str.w	r8, [sp, #4]
 8024d7e:	9100      	str	r1, [sp, #0]
 8024d80:	464b      	mov	r3, r9
 8024d82:	4632      	mov	r2, r6
 8024d84:	4805      	ldr	r0, [pc, #20]	@ (8024d9c <tx_tcp+0x11c>)
 8024d86:	f7fc fb11 	bl	80213ac <mg_log>
 8024d8a:	e7d1      	b.n	8024d30 <tx_tcp+0xb0>
 8024d8c:	200000a8 	.word	0x200000a8
 8024d90:	08037abc 	.word	0x08037abc
 8024d94:	08037100 	.word	0x08037100
 8024d98:	0802136d 	.word	0x0802136d
 8024d9c:	08037524 	.word	0x08037524

08024da0 <send_syn>:
static void send_syn(struct mg_connection *c) {
 8024da0:	b530      	push	{r4, r5, lr}
 8024da2:	b087      	sub	sp, #28
 8024da4:	4604      	mov	r4, r0
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 8024da6:	8b05      	ldrh	r5, [r0, #24]
 8024da8:	4628      	mov	r0, r5
 8024daa:	f7fd ff67 	bl	8022c7c <mg_ntohs>
 8024dae:	f7fd fecd 	bl	8022b4c <mg_ntohl>
 8024db2:	4602      	mov	r2, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8024db4:	6863      	ldr	r3, [r4, #4]
 8024db6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 8024db8:	2300      	movs	r3, #0
 8024dba:	9305      	str	r3, [sp, #20]
 8024dbc:	9304      	str	r3, [sp, #16]
 8024dbe:	9303      	str	r3, [sp, #12]
 8024dc0:	9202      	str	r2, [sp, #8]
 8024dc2:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8024dc4:	9301      	str	r3, [sp, #4]
 8024dc6:	9500      	str	r5, [sp, #0]
 8024dc8:	2302      	movs	r3, #2
 8024dca:	69e2      	ldr	r2, [r4, #28]
 8024dcc:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8024dd0:	f7ff ff56 	bl	8024c80 <tx_tcp>
}
 8024dd4:	b007      	add	sp, #28
 8024dd6:	bd30      	pop	{r4, r5, pc}

08024dd8 <tx_tcp_pkt>:
                         size_t len) {
 8024dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ddc:	b087      	sub	sp, #28
 8024dde:	4605      	mov	r5, r0
 8024de0:	4617      	mov	r7, r2
 8024de2:	4698      	mov	r8, r3
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8024de4:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8024de6:	7b5c      	ldrb	r4, [r3, #13]
 8024de8:	f014 0403 	ands.w	r4, r4, #3
 8024dec:	bf18      	it	ne
 8024dee:	2401      	movne	r4, #1
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8024df0:	690e      	ldr	r6, [r1, #16]
 8024df2:	3606      	adds	r6, #6
 8024df4:	69ca      	ldr	r2, [r1, #28]
 8024df6:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8024dfa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8024dfe:	f8b3 b000 	ldrh.w	fp, [r3]
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8024e02:	6858      	ldr	r0, [r3, #4]
 8024e04:	f7fd fea2 	bl	8022b4c <mg_ntohl>
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8024e08:	4420      	add	r0, r4
 8024e0a:	f7fd fe9f 	bl	8022b4c <mg_ntohl>
 8024e0e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024e10:	9305      	str	r3, [sp, #20]
 8024e12:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024e14:	9304      	str	r3, [sp, #16]
 8024e16:	9003      	str	r0, [sp, #12]
 8024e18:	f8cd 8008 	str.w	r8, [sp, #8]
 8024e1c:	f8cd b004 	str.w	fp, [sp, #4]
 8024e20:	f8cd a000 	str.w	sl, [sp]
 8024e24:	463b      	mov	r3, r7
 8024e26:	464a      	mov	r2, r9
 8024e28:	4631      	mov	r1, r6
 8024e2a:	4628      	mov	r0, r5
 8024e2c:	f7ff ff28 	bl	8024c80 <tx_tcp>
}
 8024e30:	b007      	add	sp, #28
 8024e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024e38 <settmout>:
static void settmout(struct mg_connection *c, uint8_t type) {
 8024e38:	b530      	push	{r4, r5, lr}
 8024e3a:	b083      	sub	sp, #12
 8024e3c:	4604      	mov	r4, r0
 8024e3e:	460d      	mov	r5, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8024e40:	6843      	ldr	r3, [r0, #4]
 8024e42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 8024e44:	2901      	cmp	r1, #1
 8024e46:	d01a      	beq.n	8024e7e <settmout+0x46>
 8024e48:	2903      	cmp	r1, #3
 8024e4a:	d01a      	beq.n	8024e82 <settmout+0x4a>
 8024e4c:	2904      	cmp	r1, #4
 8024e4e:	d01b      	beq.n	8024e88 <settmout+0x50>
 8024e50:	2902      	cmp	r1, #2
 8024e52:	d012      	beq.n	8024e7a <settmout+0x42>
 8024e54:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
  s->timer = ifp->now + n;
 8024e58:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8024e5a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8024e5c:	185b      	adds	r3, r3, r1
 8024e5e:	f142 0200 	adc.w	r2, r2, #0
 8024e62:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8024e66:	f8c4 20bc 	str.w	r2, [r4, #188]	@ 0xbc
  s->ttype = type;
 8024e6a:	f884 50ce 	strb.w	r5, [r4, #206]	@ 0xce
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8024e6e:	4b10      	ldr	r3, [pc, #64]	@ (8024eb0 <settmout+0x78>)
 8024e70:	681b      	ldr	r3, [r3, #0]
 8024e72:	2b03      	cmp	r3, #3
 8024e74:	dc0b      	bgt.n	8024e8e <settmout+0x56>
}
 8024e76:	b003      	add	sp, #12
 8024e78:	bd30      	pop	{r4, r5, pc}
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 8024e7a:	2364      	movs	r3, #100	@ 0x64
 8024e7c:	e7ec      	b.n	8024e58 <settmout+0x20>
 8024e7e:	2396      	movs	r3, #150	@ 0x96
 8024e80:	e7ea      	b.n	8024e58 <settmout+0x20>
 8024e82:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8024e86:	e7e7      	b.n	8024e58 <settmout+0x20>
 8024e88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8024e8c:	e7e4      	b.n	8024e58 <settmout+0x20>
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8024e8e:	4b09      	ldr	r3, [pc, #36]	@ (8024eb4 <settmout+0x7c>)
 8024e90:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 8024e94:	4908      	ldr	r1, [pc, #32]	@ (8024eb8 <settmout+0x80>)
 8024e96:	2004      	movs	r0, #4
 8024e98:	f7fe f9f6 	bl	8023288 <mg_log_prefix>
 8024e9c:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	@ 0xb8
 8024ea0:	e9cd 2300 	strd	r2, r3, [sp]
 8024ea4:	462a      	mov	r2, r5
 8024ea6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024ea8:	4804      	ldr	r0, [pc, #16]	@ (8024ebc <settmout+0x84>)
 8024eaa:	f7fc fa7f 	bl	80213ac <mg_log>
}
 8024eae:	e7e2      	b.n	8024e76 <settmout+0x3e>
 8024eb0:	200000a8 	.word	0x200000a8
 8024eb4:	08037ab0 	.word	0x08037ab0
 8024eb8:	08037100 	.word	0x08037100
 8024ebc:	08037548 	.word	0x08037548

08024ec0 <mg_io_send>:
long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 8024ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ec4:	b089      	sub	sp, #36	@ 0x24
 8024ec6:	4604      	mov	r4, r0
 8024ec8:	460e      	mov	r6, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8024eca:	6843      	ldr	r3, [r0, #4]
 8024ecc:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 8024ece:	f8d0 801c 	ldr.w	r8, [r0, #28]
  len = trim_len(c, len);
 8024ed2:	4611      	mov	r1, r2
 8024ed4:	f7ff fa2e 	bl	8024334 <trim_len>
 8024ed8:	4605      	mov	r5, r0
  if (c->is_udp) {
 8024eda:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8024ede:	f013 0f01 	tst.w	r3, #1
 8024ee2:	d010      	beq.n	8024f06 <mg_io_send+0x46>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 8024ee4:	68ba      	ldr	r2, [r7, #8]
 8024ee6:	9003      	str	r0, [sp, #12]
 8024ee8:	9602      	str	r6, [sp, #8]
 8024eea:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8024eec:	9301      	str	r3, [sp, #4]
 8024eee:	f8cd 8000 	str.w	r8, [sp]
 8024ef2:	8b23      	ldrh	r3, [r4, #24]
 8024ef4:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8024ef8:	4638      	mov	r0, r7
 8024efa:	f7fd ff74 	bl	8022de6 <tx_udp>
  return (long) len;
 8024efe:	4628      	mov	r0, r5
}
 8024f00:	b009      	add	sp, #36	@ 0x24
 8024f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 8024f06:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8024f0a:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8024f0e:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8024f12:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8024f16:	f7fd fe19 	bl	8022b4c <mg_ntohl>
 8024f1a:	9007      	str	r0, [sp, #28]
 8024f1c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8024f20:	f7fd fe14 	bl	8022b4c <mg_ntohl>
 8024f24:	9505      	str	r5, [sp, #20]
 8024f26:	9604      	str	r6, [sp, #16]
 8024f28:	9003      	str	r0, [sp, #12]
 8024f2a:	9b07      	ldr	r3, [sp, #28]
 8024f2c:	9302      	str	r3, [sp, #8]
 8024f2e:	f8cd b004 	str.w	fp, [sp, #4]
 8024f32:	f8cd a000 	str.w	sl, [sp]
 8024f36:	2318      	movs	r3, #24
 8024f38:	4642      	mov	r2, r8
 8024f3a:	4649      	mov	r1, r9
 8024f3c:	4638      	mov	r0, r7
 8024f3e:	f7ff fe9f 	bl	8024c80 <tx_tcp>
    if (sent == 0) {
 8024f42:	b180      	cbz	r0, 8024f66 <mg_io_send+0xa6>
    } else if (sent == (size_t) -1) {
 8024f44:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8024f48:	d010      	beq.n	8024f6c <mg_io_send+0xac>
      s->seq += (uint32_t) len;
 8024f4a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8024f4e:	442b      	add	r3, r5
 8024f50:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 8024f54:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8024f58:	2b01      	cmp	r3, #1
 8024f5a:	d1d0      	bne.n	8024efe <mg_io_send+0x3e>
 8024f5c:	2100      	movs	r1, #0
 8024f5e:	4620      	mov	r0, r4
 8024f60:	f7ff ff6a 	bl	8024e38 <settmout>
 8024f64:	e7cb      	b.n	8024efe <mg_io_send+0x3e>
      return MG_IO_WAIT;
 8024f66:	f06f 0001 	mvn.w	r0, #1
 8024f6a:	e7c9      	b.n	8024f00 <mg_io_send+0x40>
      return MG_IO_ERR;
 8024f6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024f70:	e7c6      	b.n	8024f00 <mg_io_send+0x40>
	...

08024f74 <write_conn>:
static void write_conn(struct mg_connection *c) {
 8024f74:	b510      	push	{r4, lr}
 8024f76:	b082      	sub	sp, #8
 8024f78:	4604      	mov	r4, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8024f7a:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
                       : mg_io_send(c, c->send.buf, c->send.len);
 8024f7e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8024f82:	d00b      	beq.n	8024f9c <write_conn+0x28>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8024f84:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8024f86:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8024f88:	f7fd fcbc 	bl	8022904 <mg_tls_send>
 8024f8c:	9001      	str	r0, [sp, #4]
  if (len == MG_IO_ERR) {
 8024f8e:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8024f92:	d008      	beq.n	8024fa6 <write_conn+0x32>
  } else if (len > 0) {
 8024f94:	2800      	cmp	r0, #0
 8024f96:	dc0b      	bgt.n	8024fb0 <write_conn+0x3c>
}
 8024f98:	b002      	add	sp, #8
 8024f9a:	bd10      	pop	{r4, pc}
                       : mg_io_send(c, c->send.buf, c->send.len);
 8024f9c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8024f9e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8024fa0:	f7ff ff8e 	bl	8024ec0 <mg_io_send>
 8024fa4:	e7f2      	b.n	8024f8c <write_conn+0x18>
    mg_error(c, "tx err");
 8024fa6:	4908      	ldr	r1, [pc, #32]	@ (8024fc8 <write_conn+0x54>)
 8024fa8:	4620      	mov	r0, r4
 8024faa:	f7fe fa55 	bl	8023458 <mg_error>
 8024fae:	e7f3      	b.n	8024f98 <write_conn+0x24>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 8024fb0:	4602      	mov	r2, r0
 8024fb2:	2100      	movs	r1, #0
 8024fb4:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8024fb8:	f7fd fd6b 	bl	8022a92 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 8024fbc:	aa01      	add	r2, sp, #4
 8024fbe:	2108      	movs	r1, #8
 8024fc0:	4620      	mov	r0, r4
 8024fc2:	f7fa ffab 	bl	801ff1c <mg_call>
}
 8024fc6:	e7e7      	b.n	8024f98 <write_conn+0x24>
 8024fc8:	08037558 	.word	0x08037558

08024fcc <init_closure>:
  if (c->is_udp == false && c->is_listening == false &&
 8024fcc:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 8024fd0:	f240 1221 	movw	r2, #289	@ 0x121
 8024fd4:	421a      	tst	r2, r3
 8024fd6:	d000      	beq.n	8024fda <init_closure+0xe>
 8024fd8:	4770      	bx	lr
static void init_closure(struct mg_connection *c) {
 8024fda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024fde:	b086      	sub	sp, #24
 8024fe0:	4604      	mov	r4, r0
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 8024fe2:	6843      	ldr	r3, [r0, #4]
    struct mg_tcpip_if *ifp =
 8024fe4:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8024fe6:	f8d0 801c 	ldr.w	r8, [r0, #28]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 8024fea:	f100 07c8 	add.w	r7, r0, #200	@ 0xc8
 8024fee:	f8b0 9018 	ldrh.w	r9, [r0, #24]
 8024ff2:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	@ 0x2c
 8024ff6:	f8d0 00b0 	ldr.w	r0, [r0, #176]	@ 0xb0
 8024ffa:	f7fd fda7 	bl	8022b4c <mg_ntohl>
 8024ffe:	4605      	mov	r5, r0
 8025000:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8025004:	f7fd fda2 	bl	8022b4c <mg_ntohl>
 8025008:	2300      	movs	r3, #0
 802500a:	9305      	str	r3, [sp, #20]
 802500c:	9304      	str	r3, [sp, #16]
 802500e:	9003      	str	r0, [sp, #12]
 8025010:	9502      	str	r5, [sp, #8]
 8025012:	f8cd a004 	str.w	sl, [sp, #4]
 8025016:	f8cd 9000 	str.w	r9, [sp]
 802501a:	2311      	movs	r3, #17
 802501c:	4642      	mov	r2, r8
 802501e:	4639      	mov	r1, r7
 8025020:	4630      	mov	r0, r6
 8025022:	f7ff fe2d 	bl	8024c80 <tx_tcp>
    settmout(c, MIP_TTYPE_FIN);
 8025026:	2104      	movs	r1, #4
 8025028:	4620      	mov	r0, r4
 802502a:	f7ff ff05 	bl	8024e38 <settmout>
}
 802502e:	b006      	add	sp, #24
 8025030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08025034 <mg_connect_resolved>:
void mg_connect_resolved(struct mg_connection *c) {
 8025034:	b530      	push	{r4, r5, lr}
 8025036:	b085      	sub	sp, #20
 8025038:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802503a:	6843      	ldr	r3, [r0, #4]
 802503c:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 802503e:	69c3      	ldr	r3, [r0, #28]
 8025040:	9303      	str	r3, [sp, #12]
  c->is_resolving = 0;
 8025042:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8025046:	f36f 03c3 	bfc	r3, #3, #1
 802504a:	f880 30ac 	strb.w	r3, [r0, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 802504e:	f9b5 3068 	ldrsh.w	r3, [r5, #104]	@ 0x68
 8025052:	2b00      	cmp	r3, #0
 8025054:	db03      	blt.n	802505e <mg_connect_resolved+0x2a>
 8025056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 802505a:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 802505e:	68ab      	ldr	r3, [r5, #8]
 8025060:	60a3      	str	r3, [r4, #8]
  c->loc.port = mg_htons(ifp->eport++);
 8025062:	f8b5 0068 	ldrh.w	r0, [r5, #104]	@ 0x68
 8025066:	1c43      	adds	r3, r0, #1
 8025068:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
 802506c:	f7fd fe06 	bl	8022c7c <mg_ntohs>
 8025070:	8320      	strh	r0, [r4, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8025072:	4b51      	ldr	r3, [pc, #324]	@ (80251b8 <mg_connect_resolved+0x184>)
 8025074:	681b      	ldr	r3, [r3, #0]
 8025076:	2b02      	cmp	r3, #2
 8025078:	dc36      	bgt.n	80250e8 <mg_connect_resolved+0xb4>
  mg_call(c, MG_EV_RESOLVE, NULL);
 802507a:	2200      	movs	r2, #0
 802507c:	2103      	movs	r1, #3
 802507e:	4620      	mov	r0, r4
 8025080:	f7fa ff4c 	bl	801ff1c <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8025084:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8025088:	f013 0301 	ands.w	r3, r3, #1
 802508c:	d009      	beq.n	80250a2 <mg_connect_resolved+0x6e>
 802508e:	9903      	ldr	r1, [sp, #12]
 8025090:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
 8025094:	d03b      	beq.n	802510e <mg_connect_resolved+0xda>
 8025096:	68aa      	ldr	r2, [r5, #8]
 8025098:	68e8      	ldr	r0, [r5, #12]
 802509a:	ea62 0200 	orn	r2, r2, r0
 802509e:	4291      	cmp	r1, r2
 80250a0:	d035      	beq.n	802510e <mg_connect_resolved+0xda>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 80250a2:	68aa      	ldr	r2, [r5, #8]
 80250a4:	2a00      	cmp	r2, #0
 80250a6:	d046      	beq.n	8025136 <mg_connect_resolved+0x102>
 80250a8:	9903      	ldr	r1, [sp, #12]
 80250aa:	68e8      	ldr	r0, [r5, #12]
 80250ac:	404a      	eors	r2, r1
 80250ae:	4202      	tst	r2, r0
 80250b0:	d141      	bne.n	8025136 <mg_connect_resolved+0x102>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 80250b2:	692a      	ldr	r2, [r5, #16]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 80250b4:	4291      	cmp	r1, r2
 80250b6:	d03e      	beq.n	8025136 <mg_connect_resolved+0x102>
    MG_DEBUG(("%lu ARP lookup...", c->id));
 80250b8:	4b3f      	ldr	r3, [pc, #252]	@ (80251b8 <mg_connect_resolved+0x184>)
 80250ba:	681b      	ldr	r3, [r3, #0]
 80250bc:	2b02      	cmp	r3, #2
 80250be:	dc2e      	bgt.n	802511e <mg_connect_resolved+0xea>
    arp_ask(ifp, rem_ip);
 80250c0:	9903      	ldr	r1, [sp, #12]
 80250c2:	4628      	mov	r0, r5
 80250c4:	f7fd fed7 	bl	8022e76 <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 80250c8:	2102      	movs	r1, #2
 80250ca:	4620      	mov	r0, r4
 80250cc:	f7ff feb4 	bl	8024e38 <settmout>
    c->is_arplooking = 1;
 80250d0:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80250d4:	f043 0310 	orr.w	r3, r3, #16
 80250d8:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_connecting = 1;
 80250dc:	b2db      	uxtb	r3, r3
 80250de:	f043 0320 	orr.w	r3, r3, #32
 80250e2:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
 80250e6:	e018      	b.n	802511a <mg_connect_resolved+0xe6>
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 80250e8:	4b34      	ldr	r3, [pc, #208]	@ (80251bc <mg_connect_resolved+0x188>)
 80250ea:	f241 724f 	movw	r2, #5967	@ 0x174f
 80250ee:	4934      	ldr	r1, [pc, #208]	@ (80251c0 <mg_connect_resolved+0x18c>)
 80250f0:	2003      	movs	r0, #3
 80250f2:	f7fe f8c9 	bl	8023288 <mg_log_prefix>
 80250f6:	4a33      	ldr	r2, [pc, #204]	@ (80251c4 <mg_connect_resolved+0x190>)
 80250f8:	f104 031c 	add.w	r3, r4, #28
 80250fc:	9301      	str	r3, [sp, #4]
 80250fe:	9200      	str	r2, [sp, #0]
 8025100:	f104 0308 	add.w	r3, r4, #8
 8025104:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025106:	4830      	ldr	r0, [pc, #192]	@ (80251c8 <mg_connect_resolved+0x194>)
 8025108:	f7fc f950 	bl	80213ac <mg_log>
 802510c:	e7b5      	b.n	802507a <mg_connect_resolved+0x46>
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 802510e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025112:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8025116:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
}
 802511a:	b005      	add	sp, #20
 802511c:	bd30      	pop	{r4, r5, pc}
    MG_DEBUG(("%lu ARP lookup...", c->id));
 802511e:	4b27      	ldr	r3, [pc, #156]	@ (80251bc <mg_connect_resolved+0x188>)
 8025120:	f241 7258 	movw	r2, #5976	@ 0x1758
 8025124:	4926      	ldr	r1, [pc, #152]	@ (80251c0 <mg_connect_resolved+0x18c>)
 8025126:	2003      	movs	r0, #3
 8025128:	f7fe f8ae 	bl	8023288 <mg_log_prefix>
 802512c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802512e:	4827      	ldr	r0, [pc, #156]	@ (80251cc <mg_connect_resolved+0x198>)
 8025130:	f7fc f93c 	bl	80213ac <mg_log>
 8025134:	e7c4      	b.n	80250c0 <mg_connect_resolved+0x8c>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 8025136:	f89d 200c 	ldrb.w	r2, [sp, #12]
 802513a:	f002 02e0 	and.w	r2, r2, #224	@ 0xe0
 802513e:	2ae0      	cmp	r2, #224	@ 0xe0
 8025140:	d00e      	beq.n	8025160 <mg_connect_resolved+0x12c>
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 8025142:	f8d5 2046 	ldr.w	r2, [r5, #70]	@ 0x46
 8025146:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 802514a:	f8b5 204a 	ldrh.w	r2, [r5, #74]	@ 0x4a
 802514e:	f8a4 20cc 	strh.w	r2, [r4, #204]	@ 0xcc
    if (c->is_udp) {
 8025152:	b31b      	cbz	r3, 802519c <mg_connect_resolved+0x168>
      mg_call(c, MG_EV_CONNECT, NULL);
 8025154:	2200      	movs	r2, #0
 8025156:	2104      	movs	r1, #4
 8025158:	4620      	mov	r0, r4
 802515a:	f7fa fedf 	bl	801ff1c <mg_call>
 802515e:	e7dc      	b.n	802511a <mg_connect_resolved+0xe6>
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 8025160:	4b1b      	ldr	r3, [pc, #108]	@ (80251d0 <mg_connect_resolved+0x19c>)
 8025162:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8025166:	f8ad 3008 	strh.w	r3, [sp, #8]
 802516a:	0c1b      	lsrs	r3, r3, #16
 802516c:	f88d 300a 	strb.w	r3, [sp, #10]
    memcpy(s->mac, mcastp, 3);
 8025170:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8025174:	b2db      	uxtb	r3, r3
 8025176:	f8a4 20c8 	strh.w	r2, [r4, #200]	@ 0xc8
 802517a:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 802517e:	f8bd 200d 	ldrh.w	r2, [sp, #13]
 8025182:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8025186:	f8a4 20cb 	strh.w	r2, [r4, #203]	@ 0xcb
 802518a:	f884 30cd 	strb.w	r3, [r4, #205]	@ 0xcd
    s->mac[3] &= 0x7F;
 802518e:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 8025192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8025196:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
 802519a:	e7be      	b.n	802511a <mg_connect_resolved+0xe6>
      send_syn(c);
 802519c:	4620      	mov	r0, r4
 802519e:	f7ff fdff 	bl	8024da0 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 80251a2:	2103      	movs	r1, #3
 80251a4:	4620      	mov	r0, r4
 80251a6:	f7ff fe47 	bl	8024e38 <settmout>
      c->is_connecting = 1;
 80251aa:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80251ae:	f043 0320 	orr.w	r3, r3, #32
 80251b2:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
}
 80251b6:	e7b0      	b.n	802511a <mg_connect_resolved+0xe6>
 80251b8:	200000a8 	.word	0x200000a8
 80251bc:	08037a8c 	.word	0x08037a8c
 80251c0:	08037100 	.word	0x08037100
 80251c4:	080231b5 	.word	0x080231b5
 80251c8:	08037560 	.word	0x08037560
 80251cc:	08037570 	.word	0x08037570
 80251d0:	08032dcc 	.word	0x08032dcc

080251d4 <dns_cb>:
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 80251d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80251d6:	b0c9      	sub	sp, #292	@ 0x124
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 80251d8:	6847      	ldr	r7, [r0, #4]
  if (ev == MG_EV_POLL) {
 80251da:	2902      	cmp	r1, #2
 80251dc:	d009      	beq.n	80251f2 <dns_cb+0x1e>
 80251de:	4604      	mov	r4, r0
 80251e0:	f107 0630 	add.w	r6, r7, #48	@ 0x30
  } else if (ev == MG_EV_READ) {
 80251e4:	2907      	cmp	r1, #7
 80251e6:	d016      	beq.n	8025216 <dns_cb+0x42>
  } else if (ev == MG_EV_CLOSE) {
 80251e8:	2909      	cmp	r1, #9
 80251ea:	f000 809a 	beq.w	8025322 <dns_cb+0x14e>
}
 80251ee:	b049      	add	sp, #292	@ 0x124
 80251f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint64_t now = *(uint64_t *) ev_data;
 80251f2:	6816      	ldr	r6, [r2, #0]
 80251f4:	6855      	ldr	r5, [r2, #4]
    for (d = *head; d != NULL; d = tmp) {
 80251f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80251f8:	e000      	b.n	80251fc <dns_cb+0x28>
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 80251fa:	4623      	mov	r3, r4
    for (d = *head; d != NULL; d = tmp) {
 80251fc:	2b00      	cmp	r3, #0
 80251fe:	d0f6      	beq.n	80251ee <dns_cb+0x1a>
      tmp = d->next;
 8025200:	681c      	ldr	r4, [r3, #0]
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8025202:	6899      	ldr	r1, [r3, #8]
 8025204:	68da      	ldr	r2, [r3, #12]
 8025206:	42b1      	cmp	r1, r6
 8025208:	41aa      	sbcs	r2, r5
 802520a:	d2f6      	bcs.n	80251fa <dns_cb+0x26>
 802520c:	494c      	ldr	r1, [pc, #304]	@ (8025340 <dns_cb+0x16c>)
 802520e:	6858      	ldr	r0, [r3, #4]
 8025210:	f7fe f922 	bl	8023458 <mg_error>
 8025214:	e7f1      	b.n	80251fa <dns_cb+0x26>
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8025216:	aa02      	add	r2, sp, #8
 8025218:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802521a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 802521c:	f7fe f870 	bl	8023300 <mg_dns_parse>
 8025220:	b9c8      	cbnz	r0, 8025256 <dns_cb+0x82>
      MG_ERROR(("Unexpected DNS response:"));
 8025222:	4b48      	ldr	r3, [pc, #288]	@ (8025344 <dns_cb+0x170>)
 8025224:	681b      	ldr	r3, [r3, #0]
 8025226:	2b00      	cmp	r3, #0
 8025228:	dc0a      	bgt.n	8025240 <dns_cb+0x6c>
      mg_hexdump(c->recv.buf, c->recv.len);
 802522a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802522c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 802522e:	f7fb fa1f 	bl	8020670 <mg_hexdump>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8025232:	4b44      	ldr	r3, [pc, #272]	@ (8025344 <dns_cb+0x170>)
 8025234:	681b      	ldr	r3, [r3, #0]
 8025236:	2b00      	cmp	r3, #0
 8025238:	dc68      	bgt.n	802530c <dns_cb+0x138>
    c->recv.len = 0;
 802523a:	2300      	movs	r3, #0
 802523c:	6423      	str	r3, [r4, #64]	@ 0x40
 802523e:	e7d6      	b.n	80251ee <dns_cb+0x1a>
      MG_ERROR(("Unexpected DNS response:"));
 8025240:	4b41      	ldr	r3, [pc, #260]	@ (8025348 <dns_cb+0x174>)
 8025242:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 8025246:	4941      	ldr	r1, [pc, #260]	@ (802534c <dns_cb+0x178>)
 8025248:	2001      	movs	r0, #1
 802524a:	f7fe f81d 	bl	8023288 <mg_log_prefix>
 802524e:	4840      	ldr	r0, [pc, #256]	@ (8025350 <dns_cb+0x17c>)
 8025250:	f7fc f8ac 	bl	80213ac <mg_log>
 8025254:	e7e9      	b.n	802522a <dns_cb+0x56>
      for (d = *head; d != NULL; d = tmp) {
 8025256:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
    int resolved = 0;
 8025258:	2100      	movs	r1, #0
      for (d = *head; d != NULL; d = tmp) {
 802525a:	e008      	b.n	802526e <dns_cb+0x9a>
            mg_connect_resolved(d->c);
 802525c:	6868      	ldr	r0, [r5, #4]
 802525e:	f7ff fee9 	bl	8025034 <mg_connect_resolved>
        mg_dns_free(head, d);
 8025262:	4629      	mov	r1, r5
 8025264:	4630      	mov	r0, r6
 8025266:	f7fa fcc0 	bl	801fbea <mg_dns_free>
        resolved = 1;
 802526a:	2101      	movs	r1, #1
 802526c:	463d      	mov	r5, r7
      for (d = *head; d != NULL; d = tmp) {
 802526e:	2d00      	cmp	r5, #0
 8025270:	d049      	beq.n	8025306 <dns_cb+0x132>
        tmp = d->next;
 8025272:	682f      	ldr	r7, [r5, #0]
        if (dm.txnid != d->txnid) continue;
 8025274:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8025278:	8a2b      	ldrh	r3, [r5, #16]
 802527a:	429a      	cmp	r2, r3
 802527c:	d1f6      	bne.n	802526c <dns_cb+0x98>
        if (d->c->is_resolving) {
 802527e:	6868      	ldr	r0, [r5, #4]
 8025280:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8025284:	f013 0f08 	tst.w	r3, #8
 8025288:	d02c      	beq.n	80252e4 <dns_cb+0x110>
          if (dm.resolved) {
 802528a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 802528e:	b323      	cbz	r3, 80252da <dns_cb+0x106>
            dm.addr.port = d->c->rem.port;  // Save port
 8025290:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8025292:	f8ad 301c 	strh.w	r3, [sp, #28]
            d->c->rem = dm.addr;            // Copy resolved address
 8025296:	686b      	ldr	r3, [r5, #4]
 8025298:	f103 0c1c 	add.w	ip, r3, #28
 802529c:	f10d 0e0c 	add.w	lr, sp, #12
 80252a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80252a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80252a8:	f8de 3000 	ldr.w	r3, [lr]
 80252ac:	f8cc 3000 	str.w	r3, [ip]
            MG_DEBUG(
 80252b0:	4b24      	ldr	r3, [pc, #144]	@ (8025344 <dns_cb+0x170>)
 80252b2:	681b      	ldr	r3, [r3, #0]
 80252b4:	2b02      	cmp	r3, #2
 80252b6:	ddd1      	ble.n	802525c <dns_cb+0x88>
 80252b8:	4b23      	ldr	r3, [pc, #140]	@ (8025348 <dns_cb+0x174>)
 80252ba:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 80252be:	4923      	ldr	r1, [pc, #140]	@ (802534c <dns_cb+0x178>)
 80252c0:	2003      	movs	r0, #3
 80252c2:	f7fd ffe1 	bl	8023288 <mg_log_prefix>
 80252c6:	686b      	ldr	r3, [r5, #4]
 80252c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80252ca:	331c      	adds	r3, #28
 80252cc:	9300      	str	r3, [sp, #0]
 80252ce:	4b21      	ldr	r3, [pc, #132]	@ (8025354 <dns_cb+0x180>)
 80252d0:	aa08      	add	r2, sp, #32
 80252d2:	4821      	ldr	r0, [pc, #132]	@ (8025358 <dns_cb+0x184>)
 80252d4:	f7fc f86a 	bl	80213ac <mg_log>
 80252d8:	e7c0      	b.n	802525c <dns_cb+0x88>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 80252da:	aa08      	add	r2, sp, #32
 80252dc:	491f      	ldr	r1, [pc, #124]	@ (802535c <dns_cb+0x188>)
 80252de:	f7fe f8bb 	bl	8023458 <mg_error>
 80252e2:	e7be      	b.n	8025262 <dns_cb+0x8e>
          MG_ERROR(("%lu already resolved", d->c->id));
 80252e4:	4b17      	ldr	r3, [pc, #92]	@ (8025344 <dns_cb+0x170>)
 80252e6:	681b      	ldr	r3, [r3, #0]
 80252e8:	2b00      	cmp	r3, #0
 80252ea:	ddba      	ble.n	8025262 <dns_cb+0x8e>
 80252ec:	4b16      	ldr	r3, [pc, #88]	@ (8025348 <dns_cb+0x174>)
 80252ee:	f240 42da 	movw	r2, #1242	@ 0x4da
 80252f2:	4916      	ldr	r1, [pc, #88]	@ (802534c <dns_cb+0x178>)
 80252f4:	2001      	movs	r0, #1
 80252f6:	f7fd ffc7 	bl	8023288 <mg_log_prefix>
 80252fa:	686b      	ldr	r3, [r5, #4]
 80252fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80252fe:	4818      	ldr	r0, [pc, #96]	@ (8025360 <dns_cb+0x18c>)
 8025300:	f7fc f854 	bl	80213ac <mg_log>
 8025304:	e7ad      	b.n	8025262 <dns_cb+0x8e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8025306:	2900      	cmp	r1, #0
 8025308:	d197      	bne.n	802523a <dns_cb+0x66>
 802530a:	e792      	b.n	8025232 <dns_cb+0x5e>
 802530c:	4b0e      	ldr	r3, [pc, #56]	@ (8025348 <dns_cb+0x174>)
 802530e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8025312:	490e      	ldr	r1, [pc, #56]	@ (802534c <dns_cb+0x178>)
 8025314:	2001      	movs	r0, #1
 8025316:	f7fd ffb7 	bl	8023288 <mg_log_prefix>
 802531a:	4812      	ldr	r0, [pc, #72]	@ (8025364 <dns_cb+0x190>)
 802531c:	f7fc f846 	bl	80213ac <mg_log>
 8025320:	e78b      	b.n	802523a <dns_cb+0x66>
    for (d = *head; d != NULL; d = tmp) {
 8025322:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8025324:	2c00      	cmp	r4, #0
 8025326:	f43f af62 	beq.w	80251ee <dns_cb+0x1a>
      tmp = d->next;
 802532a:	6825      	ldr	r5, [r4, #0]
      mg_error(d->c, "DNS error");
 802532c:	490e      	ldr	r1, [pc, #56]	@ (8025368 <dns_cb+0x194>)
 802532e:	6860      	ldr	r0, [r4, #4]
 8025330:	f7fe f892 	bl	8023458 <mg_error>
      mg_dns_free(head, d);
 8025334:	4621      	mov	r1, r4
 8025336:	4630      	mov	r0, r6
 8025338:	f7fa fc57 	bl	801fbea <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 802533c:	462c      	mov	r4, r5
 802533e:	e7f1      	b.n	8025324 <dns_cb+0x150>
 8025340:	08037584 	.word	0x08037584
 8025344:	200000a8 	.word	0x200000a8
 8025348:	08037b60 	.word	0x08037b60
 802534c:	08037100 	.word	0x08037100
 8025350:	08037590 	.word	0x08037590
 8025354:	08023199 	.word	0x08023199
 8025358:	080375ac 	.word	0x080375ac
 802535c:	080375bc 	.word	0x080375bc
 8025360:	080375d4 	.word	0x080375d4
 8025364:	080375ec 	.word	0x080375ec
 8025368:	080375fc 	.word	0x080375fc

0802536c <tx_dhcp_discover>:
static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 802536c:	b510      	push	{r4, lr}
 802536e:	b086      	sub	sp, #24
 8025370:	4604      	mov	r4, r0
  uint8_t opts[] = {
 8025372:	4a12      	ldr	r2, [pc, #72]	@ (80253bc <tx_dhcp_discover+0x50>)
 8025374:	ab04      	add	r3, sp, #16
 8025376:	e892 0003 	ldmia.w	r2, {r0, r1}
 802537a:	e883 0003 	stmia.w	r3, {r0, r1}
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 802537e:	2200      	movs	r2, #0
 8025380:	9202      	str	r2, [sp, #8]
 8025382:	2108      	movs	r1, #8
 8025384:	9101      	str	r1, [sp, #4]
 8025386:	9300      	str	r3, [sp, #0]
 8025388:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802538c:	490c      	ldr	r1, [pc, #48]	@ (80253c0 <tx_dhcp_discover+0x54>)
 802538e:	4620      	mov	r0, r4
 8025390:	f7fd fdb6 	bl	8022f00 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8025394:	4b0b      	ldr	r3, [pc, #44]	@ (80253c4 <tx_dhcp_discover+0x58>)
 8025396:	681b      	ldr	r3, [r3, #0]
 8025398:	2b02      	cmp	r3, #2
 802539a:	dc01      	bgt.n	80253a0 <tx_dhcp_discover+0x34>
}
 802539c:	b006      	add	sp, #24
 802539e:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 80253a0:	4b09      	ldr	r3, [pc, #36]	@ (80253c8 <tx_dhcp_discover+0x5c>)
 80253a2:	f241 4270 	movw	r2, #5232	@ 0x1470
 80253a6:	4909      	ldr	r1, [pc, #36]	@ (80253cc <tx_dhcp_discover+0x60>)
 80253a8:	2003      	movs	r0, #3
 80253aa:	f7fd ff6d 	bl	8023288 <mg_log_prefix>
 80253ae:	4622      	mov	r2, r4
 80253b0:	4907      	ldr	r1, [pc, #28]	@ (80253d0 <tx_dhcp_discover+0x64>)
 80253b2:	4808      	ldr	r0, [pc, #32]	@ (80253d4 <tx_dhcp_discover+0x68>)
 80253b4:	f7fb fffa 	bl	80213ac <mg_log>
}
 80253b8:	e7f0      	b.n	802539c <tx_dhcp_discover+0x30>
 80253ba:	bf00      	nop
 80253bc:	08037628 	.word	0x08037628
 80253c0:	08037b88 	.word	0x08037b88
 80253c4:	200000a8 	.word	0x200000a8
 80253c8:	08037a5c 	.word	0x08037a5c
 80253cc:	08037100 	.word	0x08037100
 80253d0:	0802137d 	.word	0x0802137d
 80253d4:	08037608 	.word	0x08037608

080253d8 <tx_dhcp_request_re>:
                               uint32_t ip_src, uint32_t ip_dst) {
 80253d8:	b510      	push	{r4, lr}
 80253da:	b086      	sub	sp, #24
  uint8_t opts[] = {
 80253dc:	4c0d      	ldr	r4, [pc, #52]	@ (8025414 <tx_dhcp_request_re+0x3c>)
 80253de:	9405      	str	r4, [sp, #20]
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 80253e0:	2401      	movs	r4, #1
 80253e2:	9402      	str	r4, [sp, #8]
 80253e4:	2404      	movs	r4, #4
 80253e6:	9401      	str	r4, [sp, #4]
 80253e8:	ac05      	add	r4, sp, #20
 80253ea:	9400      	str	r4, [sp, #0]
 80253ec:	f7fd fd88 	bl	8022f00 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 80253f0:	4b09      	ldr	r3, [pc, #36]	@ (8025418 <tx_dhcp_request_re+0x40>)
 80253f2:	681b      	ldr	r3, [r3, #0]
 80253f4:	2b02      	cmp	r3, #2
 80253f6:	dc01      	bgt.n	80253fc <tx_dhcp_request_re+0x24>
}
 80253f8:	b006      	add	sp, #24
 80253fa:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP req sent"));
 80253fc:	4b07      	ldr	r3, [pc, #28]	@ (802541c <tx_dhcp_request_re+0x44>)
 80253fe:	f241 4266 	movw	r2, #5222	@ 0x1466
 8025402:	4907      	ldr	r1, [pc, #28]	@ (8025420 <tx_dhcp_request_re+0x48>)
 8025404:	2003      	movs	r0, #3
 8025406:	f7fd ff3f 	bl	8023288 <mg_log_prefix>
 802540a:	4806      	ldr	r0, [pc, #24]	@ (8025424 <tx_dhcp_request_re+0x4c>)
 802540c:	f7fb ffce 	bl	80213ac <mg_log>
}
 8025410:	e7f2      	b.n	80253f8 <tx_dhcp_request_re+0x20>
 8025412:	bf00      	nop
 8025414:	ff030135 	.word	0xff030135
 8025418:	200000a8 	.word	0x200000a8
 802541c:	08037a38 	.word	0x08037a38
 8025420:	08037100 	.word	0x08037100
 8025424:	08037634 	.word	0x08037634

08025428 <rx_arp>:
static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8025428:	b5f0      	push	{r4, r5, r6, r7, lr}
 802542a:	b083      	sub	sp, #12
 802542c:	4604      	mov	r4, r0
 802542e:	460d      	mov	r5, r1
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8025430:	698e      	ldr	r6, [r1, #24]
 8025432:	88f7      	ldrh	r7, [r6, #6]
 8025434:	2001      	movs	r0, #1
 8025436:	f7fd fc21 	bl	8022c7c <mg_ntohs>
 802543a:	4287      	cmp	r7, r0
 802543c:	d006      	beq.n	802544c <rx_arp+0x24>
  } else if (pkt->arp->op == mg_htons(2)) {
 802543e:	2002      	movs	r0, #2
 8025440:	f7fd fc1c 	bl	8022c7c <mg_ntohs>
 8025444:	4287      	cmp	r7, r0
 8025446:	d05a      	beq.n	80254fe <rx_arp+0xd6>
}
 8025448:	b003      	add	sp, #12
 802544a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 802544c:	69b2      	ldr	r2, [r6, #24]
 802544e:	68a3      	ldr	r3, [r4, #8]
 8025450:	429a      	cmp	r2, r3
 8025452:	d1f4      	bne.n	802543e <rx_arp+0x16>
    struct eth *eth = (struct eth *) ifp->tx.buf;
 8025454:	6966      	ldr	r6, [r4, #20]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 8025456:	692b      	ldr	r3, [r5, #16]
 8025458:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802545c:	6032      	str	r2, [r6, #0]
 802545e:	895b      	ldrh	r3, [r3, #10]
 8025460:	80b3      	strh	r3, [r6, #4]
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8025462:	6823      	ldr	r3, [r4, #0]
 8025464:	f8c6 3006 	str.w	r3, [r6, #6]
 8025468:	88a3      	ldrh	r3, [r4, #4]
 802546a:	8173      	strh	r3, [r6, #10]
    eth->type = mg_htons(0x806);
 802546c:	f640 0006 	movw	r0, #2054	@ 0x806
 8025470:	f7fd fc04 	bl	8022c7c <mg_ntohs>
 8025474:	81b0      	strh	r0, [r6, #12]
    *arp = *pkt->arp;
 8025476:	69ab      	ldr	r3, [r5, #24]
 8025478:	6818      	ldr	r0, [r3, #0]
 802547a:	6859      	ldr	r1, [r3, #4]
 802547c:	689a      	ldr	r2, [r3, #8]
 802547e:	68df      	ldr	r7, [r3, #12]
 8025480:	f8c6 000e 	str.w	r0, [r6, #14]
 8025484:	f8c6 1012 	str.w	r1, [r6, #18]
 8025488:	f8c6 2016 	str.w	r2, [r6, #22]
 802548c:	f8c6 701a 	str.w	r7, [r6, #26]
 8025490:	6918      	ldr	r0, [r3, #16]
 8025492:	6959      	ldr	r1, [r3, #20]
 8025494:	699a      	ldr	r2, [r3, #24]
 8025496:	f8c6 001e 	str.w	r0, [r6, #30]
 802549a:	f8c6 1022 	str.w	r1, [r6, #34]	@ 0x22
 802549e:	f8c6 2026 	str.w	r2, [r6, #38]	@ 0x26
    arp->op = mg_htons(2);
 80254a2:	2002      	movs	r0, #2
 80254a4:	f7fd fbea 	bl	8022c7c <mg_ntohs>
 80254a8:	82b0      	strh	r0, [r6, #20]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 80254aa:	69ab      	ldr	r3, [r5, #24]
 80254ac:	689a      	ldr	r2, [r3, #8]
 80254ae:	6232      	str	r2, [r6, #32]
 80254b0:	899b      	ldrh	r3, [r3, #12]
 80254b2:	84b3      	strh	r3, [r6, #36]	@ 0x24
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 80254b4:	6823      	ldr	r3, [r4, #0]
 80254b6:	f8c6 3016 	str.w	r3, [r6, #22]
 80254ba:	88a3      	ldrh	r3, [r4, #4]
 80254bc:	8373      	strh	r3, [r6, #26]
    arp->tpa = pkt->arp->spa;
 80254be:	69ab      	ldr	r3, [r5, #24]
 80254c0:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80254c4:	f8c6 3026 	str.w	r3, [r6, #38]	@ 0x26
    arp->spa = ifp->ip;
 80254c8:	68a3      	ldr	r3, [r4, #8]
 80254ca:	61f3      	str	r3, [r6, #28]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 80254cc:	4b32      	ldr	r3, [pc, #200]	@ (8025598 <rx_arp+0x170>)
 80254ce:	681b      	ldr	r3, [r3, #0]
 80254d0:	2b02      	cmp	r3, #2
 80254d2:	dc04      	bgt.n	80254de <rx_arp+0xb6>
    ether_output(ifp, PDIFF(eth, arp + 1));
 80254d4:	212a      	movs	r1, #42	@ 0x2a
 80254d6:	4620      	mov	r0, r4
 80254d8:	f7fa f9d9 	bl	801f88e <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 80254dc:	e7b4      	b.n	8025448 <rx_arp+0x20>
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 80254de:	4b2f      	ldr	r3, [pc, #188]	@ (802559c <rx_arp+0x174>)
 80254e0:	f241 4292 	movw	r2, #5266	@ 0x1492
 80254e4:	492e      	ldr	r1, [pc, #184]	@ (80255a0 <rx_arp+0x178>)
 80254e6:	2003      	movs	r0, #3
 80254e8:	f7fd fece 	bl	8023288 <mg_log_prefix>
 80254ec:	9400      	str	r4, [sp, #0]
 80254ee:	4b2d      	ldr	r3, [pc, #180]	@ (80255a4 <rx_arp+0x17c>)
 80254f0:	f106 0226 	add.w	r2, r6, #38	@ 0x26
 80254f4:	492c      	ldr	r1, [pc, #176]	@ (80255a8 <rx_arp+0x180>)
 80254f6:	482d      	ldr	r0, [pc, #180]	@ (80255ac <rx_arp+0x184>)
 80254f8:	f7fb ff58 	bl	80213ac <mg_log>
 80254fc:	e7ea      	b.n	80254d4 <rx_arp+0xac>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 80254fe:	2206      	movs	r2, #6
 8025500:	4621      	mov	r1, r4
 8025502:	f106 0012 	add.w	r0, r6, #18
 8025506:	f004 fa27 	bl	8029958 <memcmp>
 802550a:	2800      	cmp	r0, #0
 802550c:	d19c      	bne.n	8025448 <rx_arp+0x20>
    if (pkt->arp->spa == ifp->gw) {
 802550e:	f8d6 200e 	ldr.w	r2, [r6, #14]
 8025512:	6923      	ldr	r3, [r4, #16]
 8025514:	429a      	cmp	r2, r3
 8025516:	d026      	beq.n	8025566 <rx_arp+0x13e>
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8025518:	2200      	movs	r2, #0
 802551a:	4629      	mov	r1, r5
 802551c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 802551e:	f7fa fc5c 	bl	801fdda <getpeer>
      if (c != NULL && c->is_arplooking) {
 8025522:	4604      	mov	r4, r0
 8025524:	2800      	cmp	r0, #0
 8025526:	d08f      	beq.n	8025448 <rx_arp+0x20>
 8025528:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 802552c:	f013 0f10 	tst.w	r3, #16
 8025530:	d08a      	beq.n	8025448 <rx_arp+0x20>
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 8025532:	f100 05c8 	add.w	r5, r0, #200	@ 0xc8
 8025536:	68b3      	ldr	r3, [r6, #8]
 8025538:	f8c0 30c8 	str.w	r3, [r0, #200]	@ 0xc8
 802553c:	89b3      	ldrh	r3, [r6, #12]
 802553e:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8025542:	4b15      	ldr	r3, [pc, #84]	@ (8025598 <rx_arp+0x170>)
 8025544:	681b      	ldr	r3, [r3, #0]
 8025546:	2b02      	cmp	r3, #2
 8025548:	dc14      	bgt.n	8025574 <rx_arp+0x14c>
        c->is_arplooking = 0;
 802554a:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802554e:	f36f 1304 	bfc	r3, #4, #1
 8025552:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
        send_syn(c);
 8025556:	4620      	mov	r0, r4
 8025558:	f7ff fc22 	bl	8024da0 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 802555c:	2103      	movs	r1, #3
 802555e:	4620      	mov	r0, r4
 8025560:	f7ff fc6a 	bl	8024e38 <settmout>
 8025564:	e770      	b.n	8025448 <rx_arp+0x20>
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 8025566:	68b3      	ldr	r3, [r6, #8]
 8025568:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 802556c:	89b3      	ldrh	r3, [r6, #12]
 802556e:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8025572:	e769      	b.n	8025448 <rx_arp+0x20>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8025574:	4b09      	ldr	r3, [pc, #36]	@ (802559c <rx_arp+0x174>)
 8025576:	f241 429f 	movw	r2, #5279	@ 0x149f
 802557a:	4909      	ldr	r1, [pc, #36]	@ (80255a0 <rx_arp+0x178>)
 802557c:	2003      	movs	r0, #3
 802557e:	f7fd fe83 	bl	8023288 <mg_log_prefix>
 8025582:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025584:	9501      	str	r5, [sp, #4]
 8025586:	4b07      	ldr	r3, [pc, #28]	@ (80255a4 <rx_arp+0x17c>)
 8025588:	9300      	str	r3, [sp, #0]
 802558a:	f104 031c 	add.w	r3, r4, #28
 802558e:	4a06      	ldr	r2, [pc, #24]	@ (80255a8 <rx_arp+0x180>)
 8025590:	4807      	ldr	r0, [pc, #28]	@ (80255b0 <rx_arp+0x188>)
 8025592:	f7fb ff0b 	bl	80213ac <mg_log>
 8025596:	e7d8      	b.n	802554a <rx_arp+0x122>
 8025598:	200000a8 	.word	0x200000a8
 802559c:	08037a24 	.word	0x08037a24
 80255a0:	08037100 	.word	0x08037100
 80255a4:	0802137d 	.word	0x0802137d
 80255a8:	0802136d 	.word	0x0802136d
 80255ac:	08037644 	.word	0x08037644
 80255b0:	0803765c 	.word	0x0803765c

080255b4 <tx_dhcp_request_sel>:
                                uint32_t ip_srv) {
 80255b4:	b570      	push	{r4, r5, r6, lr}
 80255b6:	b08c      	sub	sp, #48	@ 0x30
 80255b8:	4686      	mov	lr, r0
 80255ba:	460d      	mov	r5, r1
 80255bc:	4616      	mov	r6, r2
  uint8_t opts[] = {
 80255be:	f10d 0c14 	add.w	ip, sp, #20
 80255c2:	4c22      	ldr	r4, [pc, #136]	@ (802564c <tx_dhcp_request_sel+0x98>)
 80255c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80255c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80255ca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80255ce:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80255d2:	f82c 2b02 	strh.w	r2, [ip], #2
 80255d6:	0c12      	lsrs	r2, r2, #16
 80255d8:	f88c 2000 	strb.w	r2, [ip]
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 80255dc:	f8cd 601e 	str.w	r6, [sp, #30]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 80255e0:	9509      	str	r5, [sp, #36]	@ 0x24
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 80255e2:	f89e 301f 	ldrb.w	r3, [lr, #31]
 80255e6:	b323      	cbz	r3, 8025632 <tx_dhcp_request_sel+0x7e>
 80255e8:	2306      	movs	r3, #6
 80255ea:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80255ee:	2301      	movs	r3, #1
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 80255f0:	f89e 2020 	ldrb.w	r2, [lr, #32]
 80255f4:	b132      	cbz	r2, 8025604 <tx_dhcp_request_sel+0x50>
 80255f6:	1c5a      	adds	r2, r3, #1
 80255f8:	3348      	adds	r3, #72	@ 0x48
 80255fa:	446b      	add	r3, sp
 80255fc:	212a      	movs	r1, #42	@ 0x2a
 80255fe:	f803 1c1c 	strb.w	r1, [r3, #-28]
 8025602:	b2d3      	uxtb	r3, r2
  opts[21] += addopts;
 8025604:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8025608:	441a      	add	r2, r3
 802560a:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 802560e:	2200      	movs	r2, #0
 8025610:	9202      	str	r2, [sp, #8]
 8025612:	3319      	adds	r3, #25
 8025614:	9301      	str	r3, [sp, #4]
 8025616:	ab05      	add	r3, sp, #20
 8025618:	9300      	str	r3, [sp, #0]
 802561a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802561e:	490c      	ldr	r1, [pc, #48]	@ (8025650 <tx_dhcp_request_sel+0x9c>)
 8025620:	4670      	mov	r0, lr
 8025622:	f7fd fc6d 	bl	8022f00 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8025626:	4b0b      	ldr	r3, [pc, #44]	@ (8025654 <tx_dhcp_request_sel+0xa0>)
 8025628:	681b      	ldr	r3, [r3, #0]
 802562a:	2b02      	cmp	r3, #2
 802562c:	dc03      	bgt.n	8025636 <tx_dhcp_request_sel+0x82>
}
 802562e:	b00c      	add	sp, #48	@ 0x30
 8025630:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t addopts = 0;
 8025632:	2300      	movs	r3, #0
 8025634:	e7dc      	b.n	80255f0 <tx_dhcp_request_sel+0x3c>
  MG_DEBUG(("DHCP req sent"));
 8025636:	4b08      	ldr	r3, [pc, #32]	@ (8025658 <tx_dhcp_request_sel+0xa4>)
 8025638:	f241 425b 	movw	r2, #5211	@ 0x145b
 802563c:	4907      	ldr	r1, [pc, #28]	@ (802565c <tx_dhcp_request_sel+0xa8>)
 802563e:	2003      	movs	r0, #3
 8025640:	f7fd fe22 	bl	8023288 <mg_log_prefix>
 8025644:	4806      	ldr	r0, [pc, #24]	@ (8025660 <tx_dhcp_request_sel+0xac>)
 8025646:	f7fb feb1 	bl	80213ac <mg_log>
}
 802564a:	e7f0      	b.n	802562e <tx_dhcp_request_sel+0x7a>
 802564c:	08032ff8 	.word	0x08032ff8
 8025650:	08037b88 	.word	0x08037b88
 8025654:	200000a8 	.word	0x200000a8
 8025658:	080379f8 	.word	0x080379f8
 802565c:	08037100 	.word	0x08037100
 8025660:	08037634 	.word	0x08037634

08025664 <read_conn>:
static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 8025664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025668:	b089      	sub	sp, #36	@ 0x24
 802566a:	4604      	mov	r4, r0
 802566c:	460d      	mov	r5, r1
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 802566e:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8025672:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8025676:	d049      	beq.n	802570c <read_conn+0xa8>
 8025678:	f100 0968 	add.w	r9, r0, #104	@ 0x68
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 802567c:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 802567e:	6878      	ldr	r0, [r7, #4]
 8025680:	f7fd fa64 	bl	8022b4c <mg_ntohl>
 8025684:	4680      	mov	r8, r0
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8025686:	69e6      	ldr	r6, [r4, #28]
  if (pkt->tcp->flags & TH_FIN) {
 8025688:	7b7b      	ldrb	r3, [r7, #13]
 802568a:	f013 0f01 	tst.w	r3, #1
 802568e:	d053      	beq.n	8025738 <read_conn+0xd4>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 8025690:	68eb      	ldr	r3, [r5, #12]
 8025692:	4403      	add	r3, r0
 8025694:	3301      	adds	r3, #1
 8025696:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 802569a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802569e:	f013 0f10 	tst.w	r3, #16
 80256a2:	d003      	beq.n	80256ac <read_conn+0x48>
 80256a4:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80256a8:	2b04      	cmp	r3, #4
 80256aa:	d032      	beq.n	8025712 <read_conn+0xae>
      c->is_draining = 1;
 80256ac:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80256b0:	f043 0310 	orr.w	r3, r3, #16
 80256b4:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 80256b8:	2104      	movs	r1, #4
 80256ba:	4620      	mov	r0, r4
 80256bc:	f7ff fbbc 	bl	8024e38 <settmout>
      flags |= TH_FIN;
 80256c0:	f04f 0b11 	mov.w	fp, #17
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 80256c4:	6863      	ldr	r3, [r4, #4]
 80256c6:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 80256c8:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 80256cc:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 80256d0:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 80256d4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80256d8:	f7fd fa38 	bl	8022b4c <mg_ntohl>
 80256dc:	4605      	mov	r5, r0
 80256de:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80256e2:	f7fd fa33 	bl	8022b4c <mg_ntohl>
 80256e6:	2300      	movs	r3, #0
 80256e8:	9305      	str	r3, [sp, #20]
 80256ea:	4b9b      	ldr	r3, [pc, #620]	@ (8025958 <read_conn+0x2f4>)
 80256ec:	9304      	str	r3, [sp, #16]
 80256ee:	9003      	str	r0, [sp, #12]
 80256f0:	9502      	str	r5, [sp, #8]
 80256f2:	f8cd a004 	str.w	sl, [sp, #4]
 80256f6:	f8cd 9000 	str.w	r9, [sp]
 80256fa:	465b      	mov	r3, fp
 80256fc:	4632      	mov	r2, r6
 80256fe:	4641      	mov	r1, r8
 8025700:	4638      	mov	r0, r7
 8025702:	f7ff fabd 	bl	8024c80 <tx_tcp>
}
 8025706:	b009      	add	sp, #36	@ 0x24
 8025708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 802570c:	f100 0938 	add.w	r9, r0, #56	@ 0x38
 8025710:	e7b4      	b.n	802567c <read_conn+0x18>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 8025712:	f8d4 70b0 	ldr.w	r7, [r4, #176]	@ 0xb0
 8025716:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8025718:	6898      	ldr	r0, [r3, #8]
 802571a:	f7fd fa17 	bl	8022b4c <mg_ntohl>
 802571e:	4287      	cmp	r7, r0
 8025720:	d004      	beq.n	802572c <read_conn+0xc8>
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 8025722:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8025726:	f04f 0b10 	mov.w	fp, #16
 802572a:	e7cb      	b.n	80256c4 <read_conn+0x60>
        s->seq++;                               // Yes. Increment our SEQ
 802572c:	3701      	adds	r7, #1
 802572e:	f8c4 70b0 	str.w	r7, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8025732:	f04f 0b10 	mov.w	fp, #16
 8025736:	e7c5      	b.n	80256c4 <read_conn+0x60>
  } else if (pkt->pay.len == 0) {
 8025738:	68eb      	ldr	r3, [r5, #12]
 802573a:	2b00      	cmp	r3, #0
 802573c:	d0e3      	beq.n	8025706 <read_conn+0xa2>
  } else if (seq != s->ack) {
 802573e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8025742:	4282      	cmp	r2, r0
 8025744:	d046      	beq.n	80257d4 <read_conn+0x170>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8025746:	181d      	adds	r5, r3, r0
    if (s->ack == ack) {
 8025748:	42aa      	cmp	r2, r5
 802574a:	d025      	beq.n	8025798 <read_conn+0x134>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 802574c:	4b83      	ldr	r3, [pc, #524]	@ (802595c <read_conn+0x2f8>)
 802574e:	681b      	ldr	r3, [r3, #0]
 8025750:	2b03      	cmp	r3, #3
 8025752:	dc30      	bgt.n	80257b6 <read_conn+0x152>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8025754:	6863      	ldr	r3, [r4, #4]
 8025756:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8025758:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 802575c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8025760:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8025764:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8025768:	f7fd f9f0 	bl	8022b4c <mg_ntohl>
 802576c:	4605      	mov	r5, r0
 802576e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8025772:	f7fd f9eb 	bl	8022b4c <mg_ntohl>
 8025776:	2300      	movs	r3, #0
 8025778:	9305      	str	r3, [sp, #20]
 802577a:	4b77      	ldr	r3, [pc, #476]	@ (8025958 <read_conn+0x2f4>)
 802577c:	9304      	str	r3, [sp, #16]
 802577e:	9003      	str	r0, [sp, #12]
 8025780:	9502      	str	r5, [sp, #8]
 8025782:	f8cd a004 	str.w	sl, [sp, #4]
 8025786:	f8cd 9000 	str.w	r9, [sp]
 802578a:	2310      	movs	r3, #16
 802578c:	4632      	mov	r2, r6
 802578e:	4641      	mov	r1, r8
 8025790:	4638      	mov	r0, r7
 8025792:	f7ff fa75 	bl	8024c80 <tx_tcp>
 8025796:	e7b6      	b.n	8025706 <read_conn+0xa2>
      MG_VERBOSE(("ignoring duplicate pkt"));
 8025798:	4b70      	ldr	r3, [pc, #448]	@ (802595c <read_conn+0x2f8>)
 802579a:	681b      	ldr	r3, [r3, #0]
 802579c:	2b03      	cmp	r3, #3
 802579e:	ddb2      	ble.n	8025706 <read_conn+0xa2>
 80257a0:	4b6f      	ldr	r3, [pc, #444]	@ (8025960 <read_conn+0x2fc>)
 80257a2:	f241 52da 	movw	r2, #5594	@ 0x15da
 80257a6:	496f      	ldr	r1, [pc, #444]	@ (8025964 <read_conn+0x300>)
 80257a8:	2004      	movs	r0, #4
 80257aa:	f7fd fd6d 	bl	8023288 <mg_log_prefix>
 80257ae:	486e      	ldr	r0, [pc, #440]	@ (8025968 <read_conn+0x304>)
 80257b0:	f7fb fdfc 	bl	80213ac <mg_log>
 80257b4:	e7a7      	b.n	8025706 <read_conn+0xa2>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 80257b6:	4b6a      	ldr	r3, [pc, #424]	@ (8025960 <read_conn+0x2fc>)
 80257b8:	f241 52dc 	movw	r2, #5596	@ 0x15dc
 80257bc:	4969      	ldr	r1, [pc, #420]	@ (8025964 <read_conn+0x300>)
 80257be:	2004      	movs	r0, #4
 80257c0:	f7fd fd62 	bl	8023288 <mg_log_prefix>
 80257c4:	462b      	mov	r3, r5
 80257c6:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 80257ca:	4641      	mov	r1, r8
 80257cc:	4867      	ldr	r0, [pc, #412]	@ (802596c <read_conn+0x308>)
 80257ce:	f7fb fded 	bl	80213ac <mg_log>
 80257d2:	e7bf      	b.n	8025754 <read_conn+0xf0>
  } else if (io->size - io->len < pkt->pay.len &&
 80257d4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80257d8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80257dc:	1a52      	subs	r2, r2, r1
 80257de:	4293      	cmp	r3, r2
 80257e0:	d905      	bls.n	80257ee <read_conn+0x18a>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 80257e2:	4419      	add	r1, r3
 80257e4:	4648      	mov	r0, r9
 80257e6:	f7fe fb8b 	bl	8023f00 <mg_iobuf_resize>
  } else if (io->size - io->len < pkt->pay.len &&
 80257ea:	2800      	cmp	r0, #0
 80257ec:	d05c      	beq.n	80258a8 <read_conn+0x244>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 80257ee:	f8d9 0000 	ldr.w	r0, [r9]
 80257f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80257f6:	68ea      	ldr	r2, [r5, #12]
 80257f8:	68a9      	ldr	r1, [r5, #8]
 80257fa:	4418      	add	r0, r3
 80257fc:	f005 fb7c 	bl	802aef8 <memcpy>
    io->len += pkt->pay.len;
 8025800:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8025804:	68ea      	ldr	r2, [r5, #12]
 8025806:	4413      	add	r3, r2
 8025808:	f8c9 3008 	str.w	r3, [r9, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 802580c:	4b53      	ldr	r3, [pc, #332]	@ (802595c <read_conn+0x2f8>)
 802580e:	681b      	ldr	r3, [r3, #0]
 8025810:	2b03      	cmp	r3, #3
 8025812:	dc4e      	bgt.n	80258b2 <read_conn+0x24e>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8025814:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8025816:	6858      	ldr	r0, [r3, #4]
 8025818:	f7fd f998 	bl	8022b4c <mg_ntohl>
 802581c:	68eb      	ldr	r3, [r5, #12]
 802581e:	4418      	add	r0, r3
 8025820:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    s->unacked += pkt->pay.len;
 8025824:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8025828:	68ea      	ldr	r2, [r5, #12]
 802582a:	4413      	add	r3, r2
 802582c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 8025830:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8025834:	4293      	cmp	r3, r2
 8025836:	d95e      	bls.n	80258f6 <read_conn+0x292>
 8025838:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 802583c:	4298      	cmp	r0, r3
 802583e:	d05a      	beq.n	80258f6 <read_conn+0x292>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 8025840:	4b46      	ldr	r3, [pc, #280]	@ (802595c <read_conn+0x2f8>)
 8025842:	681b      	ldr	r3, [r3, #0]
 8025844:	2b03      	cmp	r3, #3
 8025846:	dc48      	bgt.n	80258da <read_conn+0x276>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8025848:	6863      	ldr	r3, [r4, #4]
 802584a:	f8d3 903c 	ldr.w	r9, [r3, #60]	@ 0x3c
 802584e:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 8025852:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8025856:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 802585a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 802585e:	f7fd f975 	bl	8022b4c <mg_ntohl>
 8025862:	9007      	str	r0, [sp, #28]
 8025864:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8025868:	f7fd f970 	bl	8022b4c <mg_ntohl>
 802586c:	2700      	movs	r7, #0
 802586e:	9705      	str	r7, [sp, #20]
 8025870:	9704      	str	r7, [sp, #16]
 8025872:	9003      	str	r0, [sp, #12]
 8025874:	9b07      	ldr	r3, [sp, #28]
 8025876:	9302      	str	r3, [sp, #8]
 8025878:	f8cd b004 	str.w	fp, [sp, #4]
 802587c:	f8cd a000 	str.w	sl, [sp]
 8025880:	2310      	movs	r3, #16
 8025882:	4632      	mov	r2, r6
 8025884:	4641      	mov	r1, r8
 8025886:	4648      	mov	r0, r9
 8025888:	f7ff f9fa 	bl	8024c80 <tx_tcp>
      s->unacked = 0;
 802588c:	f8c4 70c4 	str.w	r7, [r4, #196]	@ 0xc4
      s->acked = s->ack;
 8025890:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8025894:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 8025898:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 802589c:	b37b      	cbz	r3, 80258fe <read_conn+0x29a>
 802589e:	4639      	mov	r1, r7
 80258a0:	4620      	mov	r0, r4
 80258a2:	f7ff fac9 	bl	8024e38 <settmout>
 80258a6:	e02a      	b.n	80258fe <read_conn+0x29a>
    mg_error(c, "oom");
 80258a8:	4931      	ldr	r1, [pc, #196]	@ (8025970 <read_conn+0x30c>)
 80258aa:	4620      	mov	r0, r4
 80258ac:	f7fd fdd4 	bl	8023458 <mg_error>
 80258b0:	e729      	b.n	8025706 <read_conn+0xa2>
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 80258b2:	4b2b      	ldr	r3, [pc, #172]	@ (8025960 <read_conn+0x2fc>)
 80258b4:	f241 52ed 	movw	r2, #5613	@ 0x15ed
 80258b8:	492a      	ldr	r1, [pc, #168]	@ (8025964 <read_conn+0x300>)
 80258ba:	2004      	movs	r0, #4
 80258bc:	f7fd fce4 	bl	8023288 <mg_log_prefix>
 80258c0:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 80258c2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80258c4:	6858      	ldr	r0, [r3, #4]
 80258c6:	f7fd f941 	bl	8022b4c <mg_ntohl>
 80258ca:	4602      	mov	r2, r0
 80258cc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80258d0:	4639      	mov	r1, r7
 80258d2:	4828      	ldr	r0, [pc, #160]	@ (8025974 <read_conn+0x310>)
 80258d4:	f7fb fd6a 	bl	80213ac <mg_log>
 80258d8:	e79c      	b.n	8025814 <read_conn+0x1b0>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 80258da:	4b21      	ldr	r3, [pc, #132]	@ (8025960 <read_conn+0x2fc>)
 80258dc:	f241 52f4 	movw	r2, #5620	@ 0x15f4
 80258e0:	4920      	ldr	r1, [pc, #128]	@ (8025964 <read_conn+0x300>)
 80258e2:	2004      	movs	r0, #4
 80258e4:	f7fd fcd0 	bl	8023288 <mg_log_prefix>
 80258e8:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
 80258ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80258ee:	4822      	ldr	r0, [pc, #136]	@ (8025978 <read_conn+0x314>)
 80258f0:	f7fb fd5c 	bl	80213ac <mg_log>
 80258f4:	e7a8      	b.n	8025848 <read_conn+0x1e4>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 80258f6:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80258fa:	2b01      	cmp	r3, #1
 80258fc:	d11b      	bne.n	8025936 <read_conn+0x2d2>
    if (c->is_tls && c->is_tls_hs) {
 80258fe:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8025902:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8025906:	2ac0      	cmp	r2, #192	@ 0xc0
 8025908:	f43f aefd 	beq.w	8025706 <read_conn+0xa2>
    } else if (c->is_tls) {
 802590c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8025910:	d01b      	beq.n	802594a <read_conn+0x2e6>
      io = &c->recv;
 8025912:	f104 0638 	add.w	r6, r4, #56	@ 0x38
      if (io->size - io->len < pkt->pay.len &&
 8025916:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8025918:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802591a:	1a5b      	subs	r3, r3, r1
 802591c:	68ea      	ldr	r2, [r5, #12]
 802591e:	4293      	cmp	r3, r2
 8025920:	d204      	bcs.n	802592c <read_conn+0x2c8>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8025922:	4411      	add	r1, r2
 8025924:	4630      	mov	r0, r6
 8025926:	f7fe faeb 	bl	8023f00 <mg_iobuf_resize>
      if (io->size - io->len < pkt->pay.len &&
 802592a:	b148      	cbz	r0, 8025940 <read_conn+0x2dc>
        handle_tls_recv(c, io);
 802592c:	4631      	mov	r1, r6
 802592e:	4620      	mov	r0, r4
 8025930:	f7fd fdca 	bl	80234c8 <handle_tls_recv>
 8025934:	e6e7      	b.n	8025706 <read_conn+0xa2>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8025936:	2101      	movs	r1, #1
 8025938:	4620      	mov	r0, r4
 802593a:	f7ff fa7d 	bl	8024e38 <settmout>
 802593e:	e7de      	b.n	80258fe <read_conn+0x29a>
        mg_error(c, "oom");
 8025940:	490b      	ldr	r1, [pc, #44]	@ (8025970 <read_conn+0x30c>)
 8025942:	4620      	mov	r0, r4
 8025944:	f7fd fd88 	bl	8023458 <mg_error>
 8025948:	e6dd      	b.n	8025706 <read_conn+0xa2>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 802594a:	f105 020c 	add.w	r2, r5, #12
 802594e:	2107      	movs	r1, #7
 8025950:	4620      	mov	r0, r4
 8025952:	f7fa fae3 	bl	801ff1c <mg_call>
}
 8025956:	e6d6      	b.n	8025706 <read_conn+0xa2>
 8025958:	080337f8 	.word	0x080337f8
 802595c:	200000a8 	.word	0x200000a8
 8025960:	080379ec 	.word	0x080379ec
 8025964:	08037100 	.word	0x08037100
 8025968:	08037678 	.word	0x08037678
 802596c:	08037690 	.word	0x08037690
 8025970:	08037400 	.word	0x08037400
 8025974:	080376a8 	.word	0x080376a8
 8025978:	080376bc 	.word	0x080376bc

0802597c <accept_conn>:
                                         struct pkt *pkt) {
 802597c:	b570      	push	{r4, r5, r6, lr}
 802597e:	4605      	mov	r5, r0
 8025980:	460e      	mov	r6, r1
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 8025982:	6840      	ldr	r0, [r0, #4]
 8025984:	f7fb f83c 	bl	8020a00 <mg_alloc_conn>
  if (c == NULL) {
 8025988:	4604      	mov	r4, r0
 802598a:	2800      	cmp	r0, #0
 802598c:	d058      	beq.n	8025a40 <accept_conn+0xc4>
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 802598e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8025990:	6898      	ldr	r0, [r3, #8]
 8025992:	f7fd f8db 	bl	8022b4c <mg_ntohl>
 8025996:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
 802599a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 802599c:	6858      	ldr	r0, [r3, #4]
 802599e:	f7fd f8d5 	bl	8022b4c <mg_ntohl>
 80259a2:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 80259a6:	6933      	ldr	r3, [r6, #16]
 80259a8:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80259ac:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 80259b0:	895b      	ldrh	r3, [r3, #10]
 80259b2:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
  settmout(c, MIP_TTYPE_KEEPALIVE);
 80259b6:	2100      	movs	r1, #0
 80259b8:	4620      	mov	r0, r4
 80259ba:	f7ff fa3d 	bl	8024e38 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 80259be:	69f3      	ldr	r3, [r6, #28]
 80259c0:	68db      	ldr	r3, [r3, #12]
 80259c2:	61e3      	str	r3, [r4, #28]
  c->rem.port = pkt->tcp->sport;
 80259c4:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80259c6:	881b      	ldrh	r3, [r3, #0]
 80259c8:	85a3      	strh	r3, [r4, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 80259ca:	4b2c      	ldr	r3, [pc, #176]	@ (8025a7c <accept_conn+0x100>)
 80259cc:	681b      	ldr	r3, [r3, #0]
 80259ce:	2b02      	cmp	r3, #2
 80259d0:	dc45      	bgt.n	8025a5e <accept_conn+0xe2>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 80259d2:	686b      	ldr	r3, [r5, #4]
 80259d4:	681b      	ldr	r3, [r3, #0]
 80259d6:	6023      	str	r3, [r4, #0]
 80259d8:	686b      	ldr	r3, [r5, #4]
 80259da:	601c      	str	r4, [r3, #0]
  c->is_accepted = 1;
 80259dc:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80259e0:	f043 0304 	orr.w	r3, r3, #4
 80259e4:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 80259e8:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80259ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80259f0:	f894 20ad 	ldrb.w	r2, [r4, #173]	@ 0xad
 80259f4:	f363 02c3 	bfi	r2, r3, #3, #1
 80259f8:	f884 20ad 	strb.w	r2, [r4, #173]	@ 0xad
  c->pfn = lsn->pfn;
 80259fc:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 8025a00:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->loc = lsn->loc;
 8025a04:	f104 0608 	add.w	r6, r4, #8
 8025a08:	f105 0c08 	add.w	ip, r5, #8
 8025a0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8025a10:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8025a12:	f8dc 3000 	ldr.w	r3, [ip]
 8025a16:	6033      	str	r3, [r6, #0]
  c->pfn_data = lsn->pfn_data;
 8025a18:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 8025a1c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  c->fn = lsn->fn;
 8025a20:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8025a22:	67a3      	str	r3, [r4, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 8025a24:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8025a26:	67e3      	str	r3, [r4, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 8025a28:	2200      	movs	r2, #0
 8025a2a:	2101      	movs	r1, #1
 8025a2c:	4620      	mov	r0, r4
 8025a2e:	f7fa fa75 	bl	801ff1c <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 8025a32:	2200      	movs	r2, #0
 8025a34:	2105      	movs	r1, #5
 8025a36:	4620      	mov	r0, r4
 8025a38:	f7fa fa70 	bl	801ff1c <mg_call>
}
 8025a3c:	4620      	mov	r0, r4
 8025a3e:	bd70      	pop	{r4, r5, r6, pc}
    MG_ERROR(("OOM"));
 8025a40:	4b0e      	ldr	r3, [pc, #56]	@ (8025a7c <accept_conn+0x100>)
 8025a42:	681b      	ldr	r3, [r3, #0]
 8025a44:	2b00      	cmp	r3, #0
 8025a46:	ddf9      	ble.n	8025a3c <accept_conn+0xc0>
 8025a48:	4b0d      	ldr	r3, [pc, #52]	@ (8025a80 <accept_conn+0x104>)
 8025a4a:	f241 5268 	movw	r2, #5480	@ 0x1568
 8025a4e:	490d      	ldr	r1, [pc, #52]	@ (8025a84 <accept_conn+0x108>)
 8025a50:	2001      	movs	r0, #1
 8025a52:	f7fd fc19 	bl	8023288 <mg_log_prefix>
 8025a56:	480c      	ldr	r0, [pc, #48]	@ (8025a88 <accept_conn+0x10c>)
 8025a58:	f7fb fca8 	bl	80213ac <mg_log>
    return NULL;
 8025a5c:	e7ee      	b.n	8025a3c <accept_conn+0xc0>
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 8025a5e:	4b08      	ldr	r3, [pc, #32]	@ (8025a80 <accept_conn+0x104>)
 8025a60:	f241 5271 	movw	r2, #5489	@ 0x1571
 8025a64:	4907      	ldr	r1, [pc, #28]	@ (8025a84 <accept_conn+0x108>)
 8025a66:	2003      	movs	r0, #3
 8025a68:	f7fd fc0e 	bl	8023288 <mg_log_prefix>
 8025a6c:	f104 031c 	add.w	r3, r4, #28
 8025a70:	4a06      	ldr	r2, [pc, #24]	@ (8025a8c <accept_conn+0x110>)
 8025a72:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025a74:	4806      	ldr	r0, [pc, #24]	@ (8025a90 <accept_conn+0x114>)
 8025a76:	f7fb fc99 	bl	80213ac <mg_log>
 8025a7a:	e7aa      	b.n	80259d2 <accept_conn+0x56>
 8025a7c:	200000a8 	.word	0x200000a8
 8025a80:	080379e0 	.word	0x080379e0
 8025a84:	08037100 	.word	0x08037100
 8025a88:	08037728 	.word	0x08037728
 8025a8c:	080231b5 	.word	0x080231b5
 8025a90:	080376cc 	.word	0x080376cc

08025a94 <rx_tcp>:
static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8025a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025a98:	b083      	sub	sp, #12
 8025a9a:	4606      	mov	r6, r0
 8025a9c:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8025a9e:	6b07      	ldr	r7, [r0, #48]	@ 0x30
 8025aa0:	2200      	movs	r2, #0
 8025aa2:	4638      	mov	r0, r7
 8025aa4:	f7fa f999 	bl	801fdda <getpeer>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8025aa8:	4605      	mov	r5, r0
 8025aaa:	b380      	cbz	r0, 8025b0e <rx_tcp+0x7a>
 8025aac:	f100 08b0 	add.w	r8, r0, #176	@ 0xb0
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 8025ab0:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8025ab4:	f013 0f20 	tst.w	r3, #32
 8025ab8:	d02b      	beq.n	8025b12 <rx_tcp+0x7e>
 8025aba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8025abc:	7b5a      	ldrb	r2, [r3, #13]
 8025abe:	2a12      	cmp	r2, #18
 8025ac0:	d126      	bne.n	8025b10 <rx_tcp+0x7c>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 8025ac2:	6898      	ldr	r0, [r3, #8]
 8025ac4:	f7fd f842 	bl	8022b4c <mg_ntohl>
 8025ac8:	f8c5 00b0 	str.w	r0, [r5, #176]	@ 0xb0
 8025acc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8025ace:	6858      	ldr	r0, [r3, #4]
 8025ad0:	f7fd f83c 	bl	8022b4c <mg_ntohl>
 8025ad4:	3001      	adds	r0, #1
 8025ad6:	f8c8 0004 	str.w	r0, [r8, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 8025ada:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8025adc:	689b      	ldr	r3, [r3, #8]
 8025ade:	2700      	movs	r7, #0
 8025ae0:	9701      	str	r7, [sp, #4]
 8025ae2:	9700      	str	r7, [sp, #0]
 8025ae4:	2210      	movs	r2, #16
 8025ae6:	4621      	mov	r1, r4
 8025ae8:	4630      	mov	r0, r6
 8025aea:	f7ff f975 	bl	8024dd8 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 8025aee:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 8025af2:	f367 1345 	bfi	r3, r7, #5, #1
 8025af6:	f885 30ac 	strb.w	r3, [r5, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 8025afa:	4639      	mov	r1, r7
 8025afc:	4628      	mov	r0, r5
 8025afe:	f7ff f99b 	bl	8024e38 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 8025b02:	463a      	mov	r2, r7
 8025b04:	2104      	movs	r1, #4
 8025b06:	4628      	mov	r0, r5
 8025b08:	f7fa fa08 	bl	801ff1c <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 8025b0c:	e01b      	b.n	8025b46 <rx_tcp+0xb2>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8025b0e:	4680      	mov	r8, r0
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 8025b10:	b385      	cbz	r5, 8025b74 <rx_tcp+0xe0>
 8025b12:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 8025b16:	f013 0f20 	tst.w	r3, #32
 8025b1a:	d004      	beq.n	8025b26 <rx_tcp+0x92>
 8025b1c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8025b1e:	7b5a      	ldrb	r2, [r3, #13]
 8025b20:	2a10      	cmp	r2, #16
 8025b22:	d113      	bne.n	8025b4c <rx_tcp+0xb8>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 8025b24:	b335      	cbz	r5, 8025b74 <rx_tcp+0xe0>
 8025b26:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8025b28:	7b5b      	ldrb	r3, [r3, #13]
 8025b2a:	f013 0f04 	tst.w	r3, #4
 8025b2e:	d117      	bne.n	8025b60 <rx_tcp+0xcc>
  } else if (c != NULL) {
 8025b30:	b305      	cbz	r5, 8025b74 <rx_tcp+0xe0>
    s->tmiss = 0;                         // Reset missed keep-alive counter
 8025b32:	2300      	movs	r3, #0
 8025b34:	f888 301f 	strb.w	r3, [r8, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 8025b38:	f898 301e 	ldrb.w	r3, [r8, #30]
 8025b3c:	b1ab      	cbz	r3, 8025b6a <rx_tcp+0xd6>
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 8025b3e:	4621      	mov	r1, r4
 8025b40:	4628      	mov	r0, r5
 8025b42:	f7ff fd8f 	bl	8025664 <read_conn>
}
 8025b46:	b003      	add	sp, #12
 8025b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8025b4c:	689b      	ldr	r3, [r3, #8]
 8025b4e:	2200      	movs	r2, #0
 8025b50:	9201      	str	r2, [sp, #4]
 8025b52:	9200      	str	r2, [sp, #0]
 8025b54:	2214      	movs	r2, #20
 8025b56:	4621      	mov	r1, r4
 8025b58:	4630      	mov	r0, r6
 8025b5a:	f7ff f93d 	bl	8024dd8 <tx_tcp_pkt>
 8025b5e:	e7f2      	b.n	8025b46 <rx_tcp+0xb2>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8025b60:	4934      	ldr	r1, [pc, #208]	@ (8025c34 <rx_tcp+0x1a0>)
 8025b62:	4628      	mov	r0, r5
 8025b64:	f7fd fc78 	bl	8023458 <mg_error>
 8025b68:	e7ed      	b.n	8025b46 <rx_tcp+0xb2>
      settmout(c,
 8025b6a:	2100      	movs	r1, #0
 8025b6c:	4628      	mov	r0, r5
 8025b6e:	f7ff f963 	bl	8024e38 <settmout>
 8025b72:	e7e4      	b.n	8025b3e <rx_tcp+0xaa>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 8025b74:	2201      	movs	r2, #1
 8025b76:	4621      	mov	r1, r4
 8025b78:	4638      	mov	r0, r7
 8025b7a:	f7fa f92e 	bl	801fdda <getpeer>
 8025b7e:	4607      	mov	r7, r0
 8025b80:	b168      	cbz	r0, 8025b9e <rx_tcp+0x10a>
  } else if (pkt->tcp->flags & TH_RST) {
 8025b82:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8025b84:	7b6b      	ldrb	r3, [r5, #13]
 8025b86:	f013 0f04 	tst.w	r3, #4
 8025b8a:	d013      	beq.n	8025bb4 <rx_tcp+0x120>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8025b8c:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8025b90:	f013 0f04 	tst.w	r3, #4
 8025b94:	d0d7      	beq.n	8025b46 <rx_tcp+0xb2>
 8025b96:	4927      	ldr	r1, [pc, #156]	@ (8025c34 <rx_tcp+0x1a0>)
 8025b98:	f7fd fc5e 	bl	8023458 <mg_error>
 8025b9c:	e7d3      	b.n	8025b46 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8025b9e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8025ba0:	689b      	ldr	r3, [r3, #8]
 8025ba2:	2200      	movs	r2, #0
 8025ba4:	9201      	str	r2, [sp, #4]
 8025ba6:	9200      	str	r2, [sp, #0]
 8025ba8:	2214      	movs	r2, #20
 8025baa:	4621      	mov	r1, r4
 8025bac:	4630      	mov	r0, r6
 8025bae:	f7ff f913 	bl	8024dd8 <tx_tcp_pkt>
 8025bb2:	e7c8      	b.n	8025b46 <rx_tcp+0xb2>
  } else if (pkt->tcp->flags & TH_SYN) {
 8025bb4:	f013 0f02 	tst.w	r3, #2
 8025bb8:	d11d      	bne.n	8025bf6 <rx_tcp+0x162>
  } else if (pkt->tcp->flags & TH_FIN) {
 8025bba:	f013 0f01 	tst.w	r3, #1
 8025bbe:	d129      	bne.n	8025c14 <rx_tcp+0x180>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 8025bc0:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8025bc4:	4648      	mov	r0, r9
 8025bc6:	f7fc ffc1 	bl	8022b4c <mg_ntohl>
 8025bca:	4680      	mov	r8, r0
 8025bcc:	8828      	ldrh	r0, [r5, #0]
 8025bce:	f7fd f855 	bl	8022c7c <mg_ntohs>
 8025bd2:	1c43      	adds	r3, r0, #1
 8025bd4:	4598      	cmp	r8, r3
 8025bd6:	d027      	beq.n	8025c28 <rx_tcp+0x194>
  } else if (!c->is_accepted) {  // no peer
 8025bd8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8025bdc:	f013 0f04 	tst.w	r3, #4
 8025be0:	d1b1      	bne.n	8025b46 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8025be2:	2300      	movs	r3, #0
 8025be4:	9301      	str	r3, [sp, #4]
 8025be6:	9300      	str	r3, [sp, #0]
 8025be8:	464b      	mov	r3, r9
 8025bea:	2214      	movs	r2, #20
 8025bec:	4621      	mov	r1, r4
 8025bee:	4630      	mov	r0, r6
 8025bf0:	f7ff f8f2 	bl	8024dd8 <tx_tcp_pkt>
}
 8025bf4:	e7a7      	b.n	8025b46 <rx_tcp+0xb2>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 8025bf6:	8828      	ldrh	r0, [r5, #0]
 8025bf8:	f7fd f840 	bl	8022c7c <mg_ntohs>
 8025bfc:	f7fc ffa6 	bl	8022b4c <mg_ntohl>
 8025c00:	4603      	mov	r3, r0
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 8025c02:	2200      	movs	r2, #0
 8025c04:	9201      	str	r2, [sp, #4]
 8025c06:	9200      	str	r2, [sp, #0]
 8025c08:	2212      	movs	r2, #18
 8025c0a:	4621      	mov	r1, r4
 8025c0c:	4630      	mov	r0, r6
 8025c0e:	f7ff f8e3 	bl	8024dd8 <tx_tcp_pkt>
 8025c12:	e798      	b.n	8025b46 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 8025c14:	68ab      	ldr	r3, [r5, #8]
 8025c16:	2200      	movs	r2, #0
 8025c18:	9201      	str	r2, [sp, #4]
 8025c1a:	9200      	str	r2, [sp, #0]
 8025c1c:	2211      	movs	r2, #17
 8025c1e:	4621      	mov	r1, r4
 8025c20:	4630      	mov	r0, r6
 8025c22:	f7ff f8d9 	bl	8024dd8 <tx_tcp_pkt>
 8025c26:	e78e      	b.n	8025b46 <rx_tcp+0xb2>
    accept_conn(c, pkt);
 8025c28:	4621      	mov	r1, r4
 8025c2a:	4638      	mov	r0, r7
 8025c2c:	f7ff fea6 	bl	802597c <accept_conn>
 8025c30:	e789      	b.n	8025b46 <rx_tcp+0xb2>
 8025c32:	bf00      	nop
 8025c34:	080376dc 	.word	0x080376dc

08025c38 <mg_sendnsreq>:
                         struct mg_dns *dnsc, bool ipv6) {
 8025c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025c3c:	b082      	sub	sp, #8
 8025c3e:	4604      	mov	r4, r0
 8025c40:	4688      	mov	r8, r1
 8025c42:	4617      	mov	r7, r2
 8025c44:	461d      	mov	r5, r3
  if (dnsc->url == NULL) {
 8025c46:	6819      	ldr	r1, [r3, #0]
 8025c48:	2900      	cmp	r1, #0
 8025c4a:	d037      	beq.n	8025cbc <mg_sendnsreq+0x84>
  } else if (dnsc->c == NULL) {
 8025c4c:	685b      	ldr	r3, [r3, #4]
 8025c4e:	2b00      	cmp	r3, #0
 8025c50:	d038      	beq.n	8025cc4 <mg_sendnsreq+0x8c>
  if (dnsc->c == NULL) {
 8025c52:	686b      	ldr	r3, [r5, #4]
 8025c54:	2b00      	cmp	r3, #0
 8025c56:	d040      	beq.n	8025cda <mg_sendnsreq+0xa2>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8025c58:	2118      	movs	r1, #24
 8025c5a:	2001      	movs	r0, #1
 8025c5c:	f7fa f8af 	bl	801fdbe <mg_calloc>
 8025c60:	4606      	mov	r6, r0
 8025c62:	2800      	cmp	r0, #0
 8025c64:	d03e      	beq.n	8025ce4 <mg_sendnsreq+0xac>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8025c66:	6863      	ldr	r3, [r4, #4]
 8025c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8025c6a:	2b00      	cmp	r3, #0
 8025c6c:	d03f      	beq.n	8025cee <mg_sendnsreq+0xb6>
 8025c6e:	8a1b      	ldrh	r3, [r3, #16]
 8025c70:	3301      	adds	r3, #1
 8025c72:	b29b      	uxth	r3, r3
 8025c74:	8233      	strh	r3, [r6, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8025c76:	6863      	ldr	r3, [r4, #4]
 8025c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8025c7a:	6033      	str	r3, [r6, #0]
    c->mgr->active_dns_requests = d;
 8025c7c:	6863      	ldr	r3, [r4, #4]
 8025c7e:	631e      	str	r6, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8025c80:	f7fd fafd 	bl	802327e <mg_millis>
 8025c84:	19c0      	adds	r0, r0, r7
 8025c86:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
 8025c8a:	60b0      	str	r0, [r6, #8]
 8025c8c:	60f1      	str	r1, [r6, #12]
    d->c = c;
 8025c8e:	6074      	str	r4, [r6, #4]
    c->is_resolving = 1;
 8025c90:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8025c94:	f043 0308 	orr.w	r3, r3, #8
 8025c98:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8025c9c:	4b21      	ldr	r3, [pc, #132]	@ (8025d24 <mg_sendnsreq+0xec>)
 8025c9e:	681b      	ldr	r3, [r3, #0]
 8025ca0:	2b03      	cmp	r3, #3
 8025ca2:	dc26      	bgt.n	8025cf2 <mg_sendnsreq+0xba>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8025ca4:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8025ca8:	8a32      	ldrh	r2, [r6, #16]
 8025caa:	4641      	mov	r1, r8
 8025cac:	6868      	ldr	r0, [r5, #4]
 8025cae:	f7fe fbd5 	bl	802445c <mg_dns_send>
 8025cb2:	2800      	cmp	r0, #0
 8025cb4:	d031      	beq.n	8025d1a <mg_sendnsreq+0xe2>
}
 8025cb6:	b002      	add	sp, #8
 8025cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8025cbc:	491a      	ldr	r1, [pc, #104]	@ (8025d28 <mg_sendnsreq+0xf0>)
 8025cbe:	f7fd fbcb 	bl	8023458 <mg_error>
 8025cc2:	e7c6      	b.n	8025c52 <mg_sendnsreq+0x1a>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 8025cc4:	461a      	mov	r2, r3
 8025cc6:	6840      	ldr	r0, [r0, #4]
 8025cc8:	f000 f866 	bl	8025d98 <mg_connect>
 8025ccc:	6068      	str	r0, [r5, #4]
    if (dnsc->c != NULL) {
 8025cce:	2800      	cmp	r0, #0
 8025cd0:	d0bf      	beq.n	8025c52 <mg_sendnsreq+0x1a>
      dnsc->c->pfn = dns_cb;
 8025cd2:	4b16      	ldr	r3, [pc, #88]	@ (8025d2c <mg_sendnsreq+0xf4>)
 8025cd4:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 8025cd8:	e7bb      	b.n	8025c52 <mg_sendnsreq+0x1a>
    mg_error(c, "resolver");
 8025cda:	4915      	ldr	r1, [pc, #84]	@ (8025d30 <mg_sendnsreq+0xf8>)
 8025cdc:	4620      	mov	r0, r4
 8025cde:	f7fd fbbb 	bl	8023458 <mg_error>
 8025ce2:	e7e8      	b.n	8025cb6 <mg_sendnsreq+0x7e>
    mg_error(c, "resolve OOM");
 8025ce4:	4913      	ldr	r1, [pc, #76]	@ (8025d34 <mg_sendnsreq+0xfc>)
 8025ce6:	4620      	mov	r0, r4
 8025ce8:	f7fd fbb6 	bl	8023458 <mg_error>
 8025cec:	e7e3      	b.n	8025cb6 <mg_sendnsreq+0x7e>
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8025cee:	2301      	movs	r3, #1
 8025cf0:	e7c0      	b.n	8025c74 <mg_sendnsreq+0x3c>
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8025cf2:	4b11      	ldr	r3, [pc, #68]	@ (8025d38 <mg_sendnsreq+0x100>)
 8025cf4:	f240 521e 	movw	r2, #1310	@ 0x51e
 8025cf8:	4910      	ldr	r1, [pc, #64]	@ (8025d3c <mg_sendnsreq+0x104>)
 8025cfa:	2004      	movs	r0, #4
 8025cfc:	f7fd fac4 	bl	8023288 <mg_log_prefix>
 8025d00:	8a33      	ldrh	r3, [r6, #16]
 8025d02:	9301      	str	r3, [sp, #4]
 8025d04:	682b      	ldr	r3, [r5, #0]
 8025d06:	9300      	str	r3, [sp, #0]
 8025d08:	f8d8 3000 	ldr.w	r3, [r8]
 8025d0c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8025d10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025d12:	480b      	ldr	r0, [pc, #44]	@ (8025d40 <mg_sendnsreq+0x108>)
 8025d14:	f7fb fb4a 	bl	80213ac <mg_log>
 8025d18:	e7c4      	b.n	8025ca4 <mg_sendnsreq+0x6c>
      mg_error(dnsc->c, "DNS send");
 8025d1a:	490a      	ldr	r1, [pc, #40]	@ (8025d44 <mg_sendnsreq+0x10c>)
 8025d1c:	6868      	ldr	r0, [r5, #4]
 8025d1e:	f7fd fb9b 	bl	8023458 <mg_error>
}
 8025d22:	e7c8      	b.n	8025cb6 <mg_sendnsreq+0x7e>
 8025d24:	200000a8 	.word	0x200000a8
 8025d28:	080376e8 	.word	0x080376e8
 8025d2c:	080251d5 	.word	0x080251d5
 8025d30:	08037714 	.word	0x08037714
 8025d34:	08037720 	.word	0x08037720
 8025d38:	08037b68 	.word	0x08037b68
 8025d3c:	08037100 	.word	0x08037100
 8025d40:	0803772c 	.word	0x0803772c
 8025d44:	08037750 	.word	0x08037750

08025d48 <mg_resolve>:
void mg_resolve(struct mg_connection *c, const char *url) {
 8025d48:	b570      	push	{r4, r5, r6, lr}
 8025d4a:	b084      	sub	sp, #16
 8025d4c:	4604      	mov	r4, r0
 8025d4e:	460e      	mov	r6, r1
  struct mg_str host = mg_url_host(url);
 8025d50:	ad02      	add	r5, sp, #8
 8025d52:	4628      	mov	r0, r5
 8025d54:	f7fc fe24 	bl	80229a0 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8025d58:	4630      	mov	r0, r6
 8025d5a:	f7fc fe3f 	bl	80229dc <mg_url_port>
 8025d5e:	f7fc ff8d 	bl	8022c7c <mg_ntohs>
 8025d62:	85a0      	strh	r0, [r4, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8025d64:	f104 021c 	add.w	r2, r4, #28
 8025d68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025d6c:	f7fc ff22 	bl	8022bb4 <mg_aton>
 8025d70:	b960      	cbnz	r0, 8025d8c <mg_resolve+0x44>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8025d72:	6862      	ldr	r2, [r4, #4]
 8025d74:	7e11      	ldrb	r1, [r2, #24]
 8025d76:	b169      	cbz	r1, 8025d94 <mg_resolve+0x4c>
 8025d78:	f102 030c 	add.w	r3, r2, #12
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 8025d7c:	6952      	ldr	r2, [r2, #20]
 8025d7e:	9100      	str	r1, [sp, #0]
 8025d80:	a902      	add	r1, sp, #8
 8025d82:	4620      	mov	r0, r4
 8025d84:	f7ff ff58 	bl	8025c38 <mg_sendnsreq>
}
 8025d88:	b004      	add	sp, #16
 8025d8a:	bd70      	pop	{r4, r5, r6, pc}
    mg_connect_resolved(c);
 8025d8c:	4620      	mov	r0, r4
 8025d8e:	f7ff f951 	bl	8025034 <mg_connect_resolved>
 8025d92:	e7f9      	b.n	8025d88 <mg_resolve+0x40>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8025d94:	1d13      	adds	r3, r2, #4
 8025d96:	e7f1      	b.n	8025d7c <mg_resolve+0x34>

08025d98 <mg_connect>:
                                 mg_event_handler_t fn, void *fn_data) {
 8025d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (url == NULL || url[0] == '\0') {
 8025d9c:	b129      	cbz	r1, 8025daa <mg_connect+0x12>
 8025d9e:	4680      	mov	r8, r0
 8025da0:	4617      	mov	r7, r2
 8025da2:	461e      	mov	r6, r3
 8025da4:	460d      	mov	r5, r1
 8025da6:	780b      	ldrb	r3, [r1, #0]
 8025da8:	b99b      	cbnz	r3, 8025dd2 <mg_connect+0x3a>
    MG_ERROR(("null url"));
 8025daa:	4b30      	ldr	r3, [pc, #192]	@ (8025e6c <mg_connect+0xd4>)
 8025dac:	681b      	ldr	r3, [r3, #0]
 8025dae:	2b00      	cmp	r3, #0
 8025db0:	dc03      	bgt.n	8025dba <mg_connect+0x22>
  struct mg_connection *c = NULL;
 8025db2:	2400      	movs	r4, #0
}
 8025db4:	4620      	mov	r0, r4
 8025db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("null url"));
 8025dba:	4b2d      	ldr	r3, [pc, #180]	@ (8025e70 <mg_connect+0xd8>)
 8025dbc:	f241 22be 	movw	r2, #4798	@ 0x12be
 8025dc0:	492c      	ldr	r1, [pc, #176]	@ (8025e74 <mg_connect+0xdc>)
 8025dc2:	2001      	movs	r0, #1
 8025dc4:	f7fd fa60 	bl	8023288 <mg_log_prefix>
 8025dc8:	482b      	ldr	r0, [pc, #172]	@ (8025e78 <mg_connect+0xe0>)
 8025dca:	f7fb faef 	bl	80213ac <mg_log>
  struct mg_connection *c = NULL;
 8025dce:	2400      	movs	r4, #0
 8025dd0:	e7f0      	b.n	8025db4 <mg_connect+0x1c>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 8025dd2:	f7fa fe15 	bl	8020a00 <mg_alloc_conn>
 8025dd6:	4604      	mov	r4, r0
 8025dd8:	b358      	cbz	r0, 8025e32 <mg_connect+0x9a>
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8025dda:	f8d8 3000 	ldr.w	r3, [r8]
 8025dde:	6003      	str	r3, [r0, #0]
 8025de0:	f8c8 0000 	str.w	r0, [r8]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 8025de4:	2204      	movs	r2, #4
 8025de6:	4925      	ldr	r1, [pc, #148]	@ (8025e7c <mg_connect+0xe4>)
 8025de8:	4628      	mov	r0, r5
 8025dea:	f003 fe7e 	bl	8029aea <strncmp>
 8025dee:	fab0 f080 	clz	r0, r0
 8025df2:	0940      	lsrs	r0, r0, #5
 8025df4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8025df8:	f360 0300 	bfi	r3, r0, #0, #1
 8025dfc:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 8025e00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025e04:	6323      	str	r3, [r4, #48]	@ 0x30
    c->fn = fn;
 8025e06:	67a7      	str	r7, [r4, #120]	@ 0x78
    c->is_client = true;
 8025e08:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8025e0c:	f043 0302 	orr.w	r3, r3, #2
 8025e10:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->fn_data = fn_data;
 8025e14:	67e6      	str	r6, [r4, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8025e16:	4b15      	ldr	r3, [pc, #84]	@ (8025e6c <mg_connect+0xd4>)
 8025e18:	681b      	ldr	r3, [r3, #0]
 8025e1a:	2b02      	cmp	r3, #2
 8025e1c:	dc18      	bgt.n	8025e50 <mg_connect+0xb8>
    mg_call(c, MG_EV_OPEN, (void *) url);
 8025e1e:	462a      	mov	r2, r5
 8025e20:	2101      	movs	r1, #1
 8025e22:	4620      	mov	r0, r4
 8025e24:	f7fa f87a 	bl	801ff1c <mg_call>
    mg_resolve(c, url);
 8025e28:	4629      	mov	r1, r5
 8025e2a:	4620      	mov	r0, r4
 8025e2c:	f7ff ff8c 	bl	8025d48 <mg_resolve>
 8025e30:	e7c0      	b.n	8025db4 <mg_connect+0x1c>
    MG_ERROR(("OOM"));
 8025e32:	4b0e      	ldr	r3, [pc, #56]	@ (8025e6c <mg_connect+0xd4>)
 8025e34:	681b      	ldr	r3, [r3, #0]
 8025e36:	2b00      	cmp	r3, #0
 8025e38:	ddbc      	ble.n	8025db4 <mg_connect+0x1c>
 8025e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8025e70 <mg_connect+0xd8>)
 8025e3c:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8025e40:	490c      	ldr	r1, [pc, #48]	@ (8025e74 <mg_connect+0xdc>)
 8025e42:	2001      	movs	r0, #1
 8025e44:	f7fd fa20 	bl	8023288 <mg_log_prefix>
 8025e48:	480d      	ldr	r0, [pc, #52]	@ (8025e80 <mg_connect+0xe8>)
 8025e4a:	f7fb faaf 	bl	80213ac <mg_log>
 8025e4e:	e7b1      	b.n	8025db4 <mg_connect+0x1c>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8025e50:	4b07      	ldr	r3, [pc, #28]	@ (8025e70 <mg_connect+0xd8>)
 8025e52:	f241 22c8 	movw	r2, #4808	@ 0x12c8
 8025e56:	4907      	ldr	r1, [pc, #28]	@ (8025e74 <mg_connect+0xdc>)
 8025e58:	2003      	movs	r0, #3
 8025e5a:	f7fd fa15 	bl	8023288 <mg_log_prefix>
 8025e5e:	462b      	mov	r3, r5
 8025e60:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8025e62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025e64:	4807      	ldr	r0, [pc, #28]	@ (8025e84 <mg_connect+0xec>)
 8025e66:	f7fb faa1 	bl	80213ac <mg_log>
 8025e6a:	e7d8      	b.n	8025e1e <mg_connect+0x86>
 8025e6c:	200000a8 	.word	0x200000a8
 8025e70:	08037adc 	.word	0x08037adc
 8025e74:	08037100 	.word	0x08037100
 8025e78:	0803775c 	.word	0x0803775c
 8025e7c:	08037434 	.word	0x08037434
 8025e80:	08037728 	.word	0x08037728
 8025e84:	0803715c 	.word	0x0803715c

08025e88 <mg_mqtt_connect>:
                                      mg_event_handler_t fn, void *fn_data) {
 8025e88:	b530      	push	{r4, r5, lr}
 8025e8a:	b091      	sub	sp, #68	@ 0x44
 8025e8c:	4614      	mov	r4, r2
 8025e8e:	461a      	mov	r2, r3
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 8025e90:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025e92:	f7ff ff81 	bl	8025d98 <mg_connect>
  if (c != NULL) {
 8025e96:	4605      	mov	r5, r0
 8025e98:	b160      	cbz	r0, 8025eb4 <mg_mqtt_connect+0x2c>
    memset(&empty, 0, sizeof(empty));
 8025e9a:	2240      	movs	r2, #64	@ 0x40
 8025e9c:	2100      	movs	r1, #0
 8025e9e:	4668      	mov	r0, sp
 8025ea0:	f003 fdee 	bl	8029a80 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8025ea4:	b14c      	cbz	r4, 8025eba <mg_mqtt_connect+0x32>
 8025ea6:	4621      	mov	r1, r4
 8025ea8:	4628      	mov	r0, r5
 8025eaa:	f7fe fbfd 	bl	80246a8 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 8025eae:	4b04      	ldr	r3, [pc, #16]	@ (8025ec0 <mg_mqtt_connect+0x38>)
 8025eb0:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
}
 8025eb4:	4628      	mov	r0, r5
 8025eb6:	b011      	add	sp, #68	@ 0x44
 8025eb8:	bd30      	pop	{r4, r5, pc}
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8025eba:	466c      	mov	r4, sp
 8025ebc:	e7f3      	b.n	8025ea6 <mg_mqtt_connect+0x1e>
 8025ebe:	bf00      	nop
 8025ec0:	08024a81 	.word	0x08024a81

08025ec4 <mg_tcpip_init>:
void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 8025ec4:	b538      	push	{r3, r4, r5, lr}
 8025ec6:	4605      	mov	r5, r0
 8025ec8:	460c      	mov	r4, r1
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 8025eca:	680b      	ldr	r3, [r1, #0]
 8025ecc:	b90b      	cbnz	r3, 8025ed2 <mg_tcpip_init+0xe>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 8025ece:	888b      	ldrh	r3, [r1, #4]
 8025ed0:	b1a3      	cbz	r3, 8025efc <mg_tcpip_init+0x38>
  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 8025ed2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8025ed4:	681b      	ldr	r3, [r3, #0]
 8025ed6:	b34b      	cbz	r3, 8025f2c <mg_tcpip_init+0x68>
 8025ed8:	4620      	mov	r0, r4
 8025eda:	4798      	blx	r3
 8025edc:	bb30      	cbnz	r0, 8025f2c <mg_tcpip_init+0x68>
    MG_ERROR(("driver init failed"));
 8025ede:	4b3b      	ldr	r3, [pc, #236]	@ (8025fcc <mg_tcpip_init+0x108>)
 8025ee0:	681b      	ldr	r3, [r3, #0]
 8025ee2:	2b00      	cmp	r3, #0
 8025ee4:	dd5f      	ble.n	8025fa6 <mg_tcpip_init+0xe2>
 8025ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8025fd0 <mg_tcpip_init+0x10c>)
 8025ee8:	f241 7223 	movw	r2, #5923	@ 0x1723
 8025eec:	4939      	ldr	r1, [pc, #228]	@ (8025fd4 <mg_tcpip_init+0x110>)
 8025eee:	2001      	movs	r0, #1
 8025ef0:	f7fd f9ca 	bl	8023288 <mg_log_prefix>
 8025ef4:	4838      	ldr	r0, [pc, #224]	@ (8025fd8 <mg_tcpip_init+0x114>)
 8025ef6:	f7fb fa59 	bl	80213ac <mg_log>
 8025efa:	e054      	b.n	8025fa6 <mg_tcpip_init+0xe2>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 8025efc:	4608      	mov	r0, r1
 8025efe:	2302      	movs	r3, #2
 8025f00:	f800 3b01 	strb.w	r3, [r0], #1
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 8025f04:	2105      	movs	r1, #5
 8025f06:	f7fc fde6 	bl	8022ad6 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 8025f0a:	4b30      	ldr	r3, [pc, #192]	@ (8025fcc <mg_tcpip_init+0x108>)
 8025f0c:	681b      	ldr	r3, [r3, #0]
 8025f0e:	2b01      	cmp	r3, #1
 8025f10:	dddf      	ble.n	8025ed2 <mg_tcpip_init+0xe>
 8025f12:	4b2f      	ldr	r3, [pc, #188]	@ (8025fd0 <mg_tcpip_init+0x10c>)
 8025f14:	f241 721f 	movw	r2, #5919	@ 0x171f
 8025f18:	492e      	ldr	r1, [pc, #184]	@ (8025fd4 <mg_tcpip_init+0x110>)
 8025f1a:	2002      	movs	r0, #2
 8025f1c:	f7fd f9b4 	bl	8023288 <mg_log_prefix>
 8025f20:	4622      	mov	r2, r4
 8025f22:	492e      	ldr	r1, [pc, #184]	@ (8025fdc <mg_tcpip_init+0x118>)
 8025f24:	482e      	ldr	r0, [pc, #184]	@ (8025fe0 <mg_tcpip_init+0x11c>)
 8025f26:	f7fb fa41 	bl	80213ac <mg_log>
 8025f2a:	e7d2      	b.n	8025ed2 <mg_tcpip_init+0xe>
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 8025f2c:	f240 6104 	movw	r1, #1540	@ 0x604
 8025f30:	2001      	movs	r0, #1
 8025f32:	f7f9 ff44 	bl	801fdbe <mg_calloc>
 8025f36:	6160      	str	r0, [r4, #20]
 8025f38:	f240 6304 	movw	r3, #1540	@ 0x604
 8025f3c:	61a3      	str	r3, [r4, #24]
    if (ifp->recv_queue.size == 0)
 8025f3e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8025f40:	b92b      	cbnz	r3, 8025f4e <mg_tcpip_init+0x8a>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8025f42:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8025f44:	689b      	ldr	r3, [r3, #8]
 8025f46:	b37b      	cbz	r3, 8025fa8 <mg_tcpip_init+0xe4>
 8025f48:	f240 6304 	movw	r3, #1540	@ 0x604
 8025f4c:	63a3      	str	r3, [r4, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 8025f4e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8025f50:	2001      	movs	r0, #1
 8025f52:	f7f9 ff34 	bl	801fdbe <mg_calloc>
 8025f56:	6360      	str	r0, [r4, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 8025f58:	f7fd f991 	bl	802327e <mg_millis>
 8025f5c:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
    mgr->priv = ifp;
 8025f60:	63ec      	str	r4, [r5, #60]	@ 0x3c
    ifp->mgr = mgr;
 8025f62:	6325      	str	r5, [r4, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 8025f64:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8025f68:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 8025f6c:	2330      	movs	r3, #48	@ 0x30
 8025f6e:	642b      	str	r3, [r5, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 8025f70:	68a3      	ldr	r3, [r4, #8]
 8025f72:	b90b      	cbnz	r3, 8025f78 <mg_tcpip_init+0xb4>
 8025f74:	2301      	movs	r3, #1
 8025f76:	7723      	strb	r3, [r4, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 8025f78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025f7c:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 8025f80:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 8025f84:	2102      	movs	r1, #2
 8025f86:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8025f8a:	f7fc fda4 	bl	8022ad6 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 8025f8e:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 8025f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8025f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8025f9a:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 8025f9e:	6963      	ldr	r3, [r4, #20]
 8025fa0:	b12b      	cbz	r3, 8025fae <mg_tcpip_init+0xea>
 8025fa2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8025fa4:	b11b      	cbz	r3, 8025fae <mg_tcpip_init+0xea>
}
 8025fa6:	bd38      	pop	{r3, r4, r5, pc}
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8025fa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8025fac:	e7ce      	b.n	8025f4c <mg_tcpip_init+0x88>
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 8025fae:	4b07      	ldr	r3, [pc, #28]	@ (8025fcc <mg_tcpip_init+0x108>)
 8025fb0:	681b      	ldr	r3, [r3, #0]
 8025fb2:	2b00      	cmp	r3, #0
 8025fb4:	ddf7      	ble.n	8025fa6 <mg_tcpip_init+0xe2>
 8025fb6:	4b06      	ldr	r3, [pc, #24]	@ (8025fd0 <mg_tcpip_init+0x10c>)
 8025fb8:	f241 7234 	movw	r2, #5940	@ 0x1734
 8025fbc:	4905      	ldr	r1, [pc, #20]	@ (8025fd4 <mg_tcpip_init+0x110>)
 8025fbe:	2001      	movs	r0, #1
 8025fc0:	f7fd f962 	bl	8023288 <mg_log_prefix>
 8025fc4:	4807      	ldr	r0, [pc, #28]	@ (8025fe4 <mg_tcpip_init+0x120>)
 8025fc6:	f7fb f9f1 	bl	80213ac <mg_log>
}
 8025fca:	e7ec      	b.n	8025fa6 <mg_tcpip_init+0xe2>
 8025fcc:	200000a8 	.word	0x200000a8
 8025fd0:	08037aa0 	.word	0x08037aa0
 8025fd4:	08037100 	.word	0x08037100
 8025fd8:	0803778c 	.word	0x0803778c
 8025fdc:	0802137d 	.word	0x0802137d
 8025fe0:	08037768 	.word	0x08037768
 8025fe4:	08037728 	.word	0x08037728

08025fe8 <onstatechange>:
static void onstatechange(struct mg_tcpip_if *ifp) {
 8025fe8:	b510      	push	{r4, lr}
 8025fea:	4604      	mov	r4, r0
  if (ifp->state == MG_TCPIP_STATE_READY) {
 8025fec:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
 8025ff0:	2b03      	cmp	r3, #3
 8025ff2:	d011      	beq.n	8026018 <onstatechange+0x30>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 8025ff4:	2b01      	cmp	r3, #1
 8025ff6:	d04f      	beq.n	8026098 <onstatechange+0xb0>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 8025ff8:	b9f3      	cbnz	r3, 8026038 <onstatechange+0x50>
    MG_ERROR(("Link down"));
 8025ffa:	4b31      	ldr	r3, [pc, #196]	@ (80260c0 <onstatechange+0xd8>)
 8025ffc:	681b      	ldr	r3, [r3, #0]
 8025ffe:	2b00      	cmp	r3, #0
 8026000:	dd1a      	ble.n	8026038 <onstatechange+0x50>
 8026002:	4b30      	ldr	r3, [pc, #192]	@ (80260c4 <onstatechange+0xdc>)
 8026004:	f241 4209 	movw	r2, #5129	@ 0x1409
 8026008:	492f      	ldr	r1, [pc, #188]	@ (80260c8 <onstatechange+0xe0>)
 802600a:	2001      	movs	r0, #1
 802600c:	f7fd f93c 	bl	8023288 <mg_log_prefix>
 8026010:	482e      	ldr	r0, [pc, #184]	@ (80260cc <onstatechange+0xe4>)
 8026012:	f7fb f9cb 	bl	80213ac <mg_log>
 8026016:	e00f      	b.n	8026038 <onstatechange+0x50>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8026018:	4b29      	ldr	r3, [pc, #164]	@ (80260c0 <onstatechange+0xd8>)
 802601a:	681b      	ldr	r3, [r3, #0]
 802601c:	2b01      	cmp	r3, #1
 802601e:	dc12      	bgt.n	8026046 <onstatechange+0x5e>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8026020:	4b27      	ldr	r3, [pc, #156]	@ (80260c0 <onstatechange+0xd8>)
 8026022:	681b      	ldr	r3, [r3, #0]
 8026024:	2b01      	cmp	r3, #1
 8026026:	dc1c      	bgt.n	8026062 <onstatechange+0x7a>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8026028:	4b25      	ldr	r3, [pc, #148]	@ (80260c0 <onstatechange+0xd8>)
 802602a:	681b      	ldr	r3, [r3, #0]
 802602c:	2b01      	cmp	r3, #1
 802602e:	dc26      	bgt.n	802607e <onstatechange+0x96>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 8026030:	6921      	ldr	r1, [r4, #16]
 8026032:	4620      	mov	r0, r4
 8026034:	f7fc ff1f 	bl	8022e76 <arp_ask>
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 8026038:	f104 027c 	add.w	r2, r4, #124	@ 0x7c
 802603c:	2100      	movs	r1, #0
 802603e:	4620      	mov	r0, r4
 8026040:	f7f9 fc0f 	bl	801f862 <mg_tcpip_call>
}
 8026044:	bd10      	pop	{r4, pc}
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8026046:	4b1f      	ldr	r3, [pc, #124]	@ (80260c4 <onstatechange+0xdc>)
 8026048:	f241 4201 	movw	r2, #5121	@ 0x1401
 802604c:	491e      	ldr	r1, [pc, #120]	@ (80260c8 <onstatechange+0xe0>)
 802604e:	2002      	movs	r0, #2
 8026050:	f7fd f91a 	bl	8023288 <mg_log_prefix>
 8026054:	f104 0208 	add.w	r2, r4, #8
 8026058:	491d      	ldr	r1, [pc, #116]	@ (80260d0 <onstatechange+0xe8>)
 802605a:	481e      	ldr	r0, [pc, #120]	@ (80260d4 <onstatechange+0xec>)
 802605c:	f7fb f9a6 	bl	80213ac <mg_log>
 8026060:	e7de      	b.n	8026020 <onstatechange+0x38>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8026062:	4b18      	ldr	r3, [pc, #96]	@ (80260c4 <onstatechange+0xdc>)
 8026064:	f241 4202 	movw	r2, #5122	@ 0x1402
 8026068:	4917      	ldr	r1, [pc, #92]	@ (80260c8 <onstatechange+0xe0>)
 802606a:	2002      	movs	r0, #2
 802606c:	f7fd f90c 	bl	8023288 <mg_log_prefix>
 8026070:	f104 0210 	add.w	r2, r4, #16
 8026074:	4916      	ldr	r1, [pc, #88]	@ (80260d0 <onstatechange+0xe8>)
 8026076:	4818      	ldr	r0, [pc, #96]	@ (80260d8 <onstatechange+0xf0>)
 8026078:	f7fb f998 	bl	80213ac <mg_log>
 802607c:	e7d4      	b.n	8026028 <onstatechange+0x40>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 802607e:	4b11      	ldr	r3, [pc, #68]	@ (80260c4 <onstatechange+0xdc>)
 8026080:	f241 4203 	movw	r2, #5123	@ 0x1403
 8026084:	4910      	ldr	r1, [pc, #64]	@ (80260c8 <onstatechange+0xe0>)
 8026086:	2002      	movs	r0, #2
 8026088:	f7fd f8fe 	bl	8023288 <mg_log_prefix>
 802608c:	4622      	mov	r2, r4
 802608e:	4913      	ldr	r1, [pc, #76]	@ (80260dc <onstatechange+0xf4>)
 8026090:	4813      	ldr	r0, [pc, #76]	@ (80260e0 <onstatechange+0xf8>)
 8026092:	f7fb f98b 	bl	80213ac <mg_log>
 8026096:	e7cb      	b.n	8026030 <onstatechange+0x48>
    MG_ERROR(("Link up"));
 8026098:	4b09      	ldr	r3, [pc, #36]	@ (80260c0 <onstatechange+0xd8>)
 802609a:	681b      	ldr	r3, [r3, #0]
 802609c:	2b00      	cmp	r3, #0
 802609e:	dc04      	bgt.n	80260aa <onstatechange+0xc2>
    srand((unsigned int) mg_millis());
 80260a0:	f7fd f8ed 	bl	802327e <mg_millis>
 80260a4:	f002 ff9c 	bl	8028fe0 <srand>
 80260a8:	e7c6      	b.n	8026038 <onstatechange+0x50>
    MG_ERROR(("Link up"));
 80260aa:	4b06      	ldr	r3, [pc, #24]	@ (80260c4 <onstatechange+0xdc>)
 80260ac:	f241 4206 	movw	r2, #5126	@ 0x1406
 80260b0:	4905      	ldr	r1, [pc, #20]	@ (80260c8 <onstatechange+0xe0>)
 80260b2:	2001      	movs	r0, #1
 80260b4:	f7fd f8e8 	bl	8023288 <mg_log_prefix>
 80260b8:	480a      	ldr	r0, [pc, #40]	@ (80260e4 <onstatechange+0xfc>)
 80260ba:	f7fb f977 	bl	80213ac <mg_log>
 80260be:	e7ef      	b.n	80260a0 <onstatechange+0xb8>
 80260c0:	200000a8 	.word	0x200000a8
 80260c4:	08037a4c 	.word	0x08037a4c
 80260c8:	08037100 	.word	0x08037100
 80260cc:	080377d8 	.word	0x080377d8
 80260d0:	0802136d 	.word	0x0802136d
 80260d4:	080377a0 	.word	0x080377a0
 80260d8:	080377b0 	.word	0x080377b0
 80260dc:	0802137d 	.word	0x0802137d
 80260e0:	080377c0 	.word	0x080377c0
 80260e4:	080377d0 	.word	0x080377d0

080260e8 <rx_dhcp_client>:
static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80260e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80260ec:	b087      	sub	sp, #28
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 80260ee:	2300      	movs	r3, #0
 80260f0:	9305      	str	r3, [sp, #20]
 80260f2:	9304      	str	r3, [sp, #16]
  uint8_t msgtype = 0, state = ifp->state;
 80260f4:	f890 a07c 	ldrb.w	sl, [r0, #124]	@ 0x7c
  uint8_t *p = pkt->dhcp->options,
 80260f8:	f8d1 8030 	ldr.w	r8, [r1, #48]	@ 0x30
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 80260fc:	680e      	ldr	r6, [r1, #0]
 80260fe:	684b      	ldr	r3, [r1, #4]
 8026100:	441e      	add	r6, r3
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8026102:	f508 7388 	add.w	r3, r8, #272	@ 0x110
 8026106:	42b3      	cmp	r3, r6
 8026108:	d87b      	bhi.n	8026202 <rx_dhcp_client+0x11a>
 802610a:	4605      	mov	r5, r0
 802610c:	460f      	mov	r7, r1
 802610e:	f108 04f0 	add.w	r4, r8, #240	@ 0xf0
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8026112:	2204      	movs	r2, #4
 8026114:	1c81      	adds	r1, r0, #2
 8026116:	eb08 0002 	add.w	r0, r8, r2
 802611a:	f003 fc1d 	bl	8029958 <memcmp>
 802611e:	2800      	cmp	r0, #0
 8026120:	d16f      	bne.n	8026202 <rx_dhcp_client+0x11a>
  uint8_t msgtype = 0, state = ifp->state;
 8026122:	f04f 0900 	mov.w	r9, #0
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 8026126:	4648      	mov	r0, r9
 8026128:	f8cd 9004 	str.w	r9, [sp, #4]
 802612c:	f8cd 9000 	str.w	r9, [sp]
 8026130:	46cb      	mov	fp, r9
 8026132:	e026      	b.n	8026182 <rx_dhcp_client+0x9a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 8026134:	7862      	ldrb	r2, [r4, #1]
 8026136:	2a04      	cmp	r2, #4
 8026138:	d12b      	bne.n	8026192 <rx_dhcp_client+0xaa>
 802613a:	1da2      	adds	r2, r4, #6
 802613c:	42b2      	cmp	r2, r6
 802613e:	d228      	bcs.n	8026192 <rx_dhcp_client+0xaa>
      memcpy(&mask, p + 2, sizeof(mask));
 8026140:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8026144:	9301      	str	r3, [sp, #4]
 8026146:	e019      	b.n	802617c <rx_dhcp_client+0x94>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8026148:	7862      	ldrb	r2, [r4, #1]
 802614a:	2a04      	cmp	r2, #4
 802614c:	d123      	bne.n	8026196 <rx_dhcp_client+0xae>
 802614e:	1da2      	adds	r2, r4, #6
 8026150:	42b2      	cmp	r2, r6
 8026152:	d220      	bcs.n	8026196 <rx_dhcp_client+0xae>
      ip = pkt->dhcp->yiaddr;
 8026154:	f8d8 b010 	ldr.w	fp, [r8, #16]
      memcpy(&gw, p + 2, sizeof(gw));
 8026158:	f8d4 3002 	ldr.w	r3, [r4, #2]
 802615c:	9300      	str	r3, [sp, #0]
      ip = pkt->dhcp->yiaddr;
 802615e:	e00d      	b.n	802617c <rx_dhcp_client+0x94>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8026160:	7862      	ldrb	r2, [r4, #1]
 8026162:	2a04      	cmp	r2, #4
 8026164:	d11b      	bne.n	802619e <rx_dhcp_client+0xb6>
               p + 6 < end) {  // DNS
 8026166:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8026168:	42b2      	cmp	r2, r6
 802616a:	d218      	bcs.n	802619e <rx_dhcp_client+0xb6>
      memcpy(&dns, p + 2, sizeof(dns));
 802616c:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8026170:	9305      	str	r3, [sp, #20]
 8026172:	e003      	b.n	802617c <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 8026174:	2b33      	cmp	r3, #51	@ 0x33
 8026176:	d022      	beq.n	80261be <rx_dhcp_client+0xd6>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 8026178:	2b35      	cmp	r3, #53	@ 0x35
 802617a:	d02b      	beq.n	80261d4 <rx_dhcp_client+0xec>
    p += p[1] + 2;
 802617c:	7863      	ldrb	r3, [r4, #1]
 802617e:	3302      	adds	r3, #2
 8026180:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 8026182:	1c63      	adds	r3, r4, #1
 8026184:	42b3      	cmp	r3, r6
 8026186:	d22e      	bcs.n	80261e6 <rx_dhcp_client+0xfe>
 8026188:	7823      	ldrb	r3, [r4, #0]
 802618a:	2bff      	cmp	r3, #255	@ 0xff
 802618c:	d02b      	beq.n	80261e6 <rx_dhcp_client+0xfe>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 802618e:	2b01      	cmp	r3, #1
 8026190:	d0d0      	beq.n	8026134 <rx_dhcp_client+0x4c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8026192:	2b03      	cmp	r3, #3
 8026194:	d0d8      	beq.n	8026148 <rx_dhcp_client+0x60>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8026196:	7fea      	ldrb	r2, [r5, #31]
 8026198:	b10a      	cbz	r2, 802619e <rx_dhcp_client+0xb6>
 802619a:	2b06      	cmp	r3, #6
 802619c:	d0e0      	beq.n	8026160 <rx_dhcp_client+0x78>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 802619e:	f895 2020 	ldrb.w	r2, [r5, #32]
 80261a2:	2a00      	cmp	r2, #0
 80261a4:	d0e6      	beq.n	8026174 <rx_dhcp_client+0x8c>
 80261a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80261a8:	d1e4      	bne.n	8026174 <rx_dhcp_client+0x8c>
 80261aa:	7862      	ldrb	r2, [r4, #1]
 80261ac:	2a04      	cmp	r2, #4
 80261ae:	d1e1      	bne.n	8026174 <rx_dhcp_client+0x8c>
               p + 6 < end) {  // SNTP
 80261b0:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 80261b2:	42b2      	cmp	r2, r6
 80261b4:	d2de      	bcs.n	8026174 <rx_dhcp_client+0x8c>
      memcpy(&sntp, p + 2, sizeof(sntp));
 80261b6:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80261ba:	9304      	str	r3, [sp, #16]
 80261bc:	e7de      	b.n	802617c <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 80261be:	7862      	ldrb	r2, [r4, #1]
 80261c0:	2a04      	cmp	r2, #4
 80261c2:	d1d9      	bne.n	8026178 <rx_dhcp_client+0x90>
 80261c4:	1da2      	adds	r2, r4, #6
 80261c6:	42b2      	cmp	r2, r6
 80261c8:	d2d6      	bcs.n	8026178 <rx_dhcp_client+0x90>
      lease = mg_ntohl(lease);
 80261ca:	f8d4 0002 	ldr.w	r0, [r4, #2]
 80261ce:	f7fc fcbd 	bl	8022b4c <mg_ntohl>
 80261d2:	e7d3      	b.n	802617c <rx_dhcp_client+0x94>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 80261d4:	7863      	ldrb	r3, [r4, #1]
 80261d6:	2b01      	cmp	r3, #1
 80261d8:	d1d0      	bne.n	802617c <rx_dhcp_client+0x94>
 80261da:	1da3      	adds	r3, r4, #6
 80261dc:	42b3      	cmp	r3, r6
 80261de:	d2cd      	bcs.n	802617c <rx_dhcp_client+0x94>
      msgtype = p[2];
 80261e0:	f894 9002 	ldrb.w	r9, [r4, #2]
 80261e4:	e7ca      	b.n	802617c <rx_dhcp_client+0x94>
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 80261e6:	f1b9 0f06 	cmp.w	r9, #6
 80261ea:	d00d      	beq.n	8026208 <rx_dhcp_client+0x120>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 80261ec:	f1b9 0f02 	cmp.w	r9, #2
 80261f0:	d013      	beq.n	802621a <rx_dhcp_client+0x132>
  } else if (msgtype == 5) {          // DHCPACK
 80261f2:	f1b9 0f05 	cmp.w	r9, #5
 80261f6:	d028      	beq.n	802624a <rx_dhcp_client+0x162>
  if (ifp->state != state) onstatechange(ifp);
 80261f8:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 80261fc:	4553      	cmp	r3, sl
 80261fe:	f040 80b4 	bne.w	802636a <rx_dhcp_client+0x282>
}
 8026202:	b007      	add	sp, #28
 8026204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8026208:	68ab      	ldr	r3, [r5, #8]
 802620a:	455b      	cmp	r3, fp
 802620c:	d1ee      	bne.n	80261ec <rx_dhcp_client+0x104>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 802620e:	2301      	movs	r3, #1
 8026210:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8026214:	2300      	movs	r3, #0
 8026216:	60ab      	str	r3, [r5, #8]
 8026218:	e7ee      	b.n	80261f8 <rx_dhcp_client+0x110>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802621a:	f1ba 0f01 	cmp.w	sl, #1
 802621e:	d1e8      	bne.n	80261f2 <rx_dhcp_client+0x10a>
 8026220:	f1bb 0f00 	cmp.w	fp, #0
 8026224:	d0e5      	beq.n	80261f2 <rx_dhcp_client+0x10a>
 8026226:	9b00      	ldr	r3, [sp, #0]
 8026228:	2b00      	cmp	r3, #0
 802622a:	d0e2      	beq.n	80261f2 <rx_dhcp_client+0x10a>
 802622c:	2800      	cmp	r0, #0
 802622e:	d0e0      	beq.n	80261f2 <rx_dhcp_client+0x10a>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8026230:	f8d8 2014 	ldr.w	r2, [r8, #20]
    tx_dhcp_request_sel(ifp, ip,
 8026234:	b90a      	cbnz	r2, 802623a <rx_dhcp_client+0x152>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8026236:	69fb      	ldr	r3, [r7, #28]
    tx_dhcp_request_sel(ifp, ip,
 8026238:	68da      	ldr	r2, [r3, #12]
 802623a:	4659      	mov	r1, fp
 802623c:	4628      	mov	r0, r5
 802623e:	f7ff f9b9 	bl	80255b4 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 8026242:	2302      	movs	r3, #2
 8026244:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8026248:	e7d6      	b.n	80261f8 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 802624a:	f1ba 0f02 	cmp.w	sl, #2
 802624e:	d02a      	beq.n	80262a6 <rx_dhcp_client+0x1be>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 8026250:	f1ba 0f03 	cmp.w	sl, #3
 8026254:	d1d0      	bne.n	80261f8 <rx_dhcp_client+0x110>
 8026256:	68ab      	ldr	r3, [r5, #8]
 8026258:	455b      	cmp	r3, fp
 802625a:	d1cd      	bne.n	80261f8 <rx_dhcp_client+0x110>
      ifp->lease_expire = ifp->now + lease * 1000;
 802625c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802625e:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8026260:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8026264:	4604      	mov	r4, r0
 8026266:	fb00 f202 	mul.w	r2, r0, r2
 802626a:	189b      	adds	r3, r3, r2
 802626c:	f141 0100 	adc.w	r1, r1, #0
 8026270:	662b      	str	r3, [r5, #96]	@ 0x60
 8026272:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8026274:	4b3f      	ldr	r3, [pc, #252]	@ (8026374 <rx_dhcp_client+0x28c>)
 8026276:	681b      	ldr	r3, [r3, #0]
 8026278:	2b01      	cmp	r3, #1
 802627a:	ddbd      	ble.n	80261f8 <rx_dhcp_client+0x110>
 802627c:	4b3e      	ldr	r3, [pc, #248]	@ (8026378 <rx_dhcp_client+0x290>)
 802627e:	f241 42ef 	movw	r2, #5359	@ 0x14ef
 8026282:	493e      	ldr	r1, [pc, #248]	@ (802637c <rx_dhcp_client+0x294>)
 8026284:	2002      	movs	r0, #2
 8026286:	f7fc ffff 	bl	8023288 <mg_log_prefix>
 802628a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802628e:	2300      	movs	r3, #0
 8026290:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 8026294:	f7ea fd60 	bl	8010d58 <__aeabi_uldivmod>
 8026298:	4602      	mov	r2, r0
 802629a:	460b      	mov	r3, r1
 802629c:	4621      	mov	r1, r4
 802629e:	4838      	ldr	r0, [pc, #224]	@ (8026380 <rx_dhcp_client+0x298>)
 80262a0:	f7fb f884 	bl	80213ac <mg_log>
 80262a4:	e7a8      	b.n	80261f8 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80262a6:	f1bb 0f00 	cmp.w	fp, #0
 80262aa:	d0d1      	beq.n	8026250 <rx_dhcp_client+0x168>
 80262ac:	9b00      	ldr	r3, [sp, #0]
 80262ae:	2b00      	cmp	r3, #0
 80262b0:	d0ce      	beq.n	8026250 <rx_dhcp_client+0x168>
 80262b2:	4604      	mov	r4, r0
 80262b4:	2800      	cmp	r0, #0
 80262b6:	d0cb      	beq.n	8026250 <rx_dhcp_client+0x168>
      ifp->lease_expire = ifp->now + lease * 1000;
 80262b8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80262ba:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 80262bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80262c0:	fb00 f202 	mul.w	r2, r0, r2
 80262c4:	189b      	adds	r3, r3, r2
 80262c6:	f141 0100 	adc.w	r1, r1, #0
 80262ca:	662b      	str	r3, [r5, #96]	@ 0x60
 80262cc:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80262ce:	4b29      	ldr	r3, [pc, #164]	@ (8026374 <rx_dhcp_client+0x28c>)
 80262d0:	681b      	ldr	r3, [r3, #0]
 80262d2:	2b01      	cmp	r3, #1
 80262d4:	dc2e      	bgt.n	8026334 <rx_dhcp_client+0x24c>
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 80262d6:	693b      	ldr	r3, [r7, #16]
 80262d8:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80262dc:	f8c5 2046 	str.w	r2, [r5, #70]	@ 0x46
 80262e0:	895b      	ldrh	r3, [r3, #10]
 80262e2:	f8a5 304a 	strh.w	r3, [r5, #74]	@ 0x4a
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 80262e6:	f8c5 b008 	str.w	fp, [r5, #8]
 80262ea:	9b00      	ldr	r3, [sp, #0]
 80262ec:	612b      	str	r3, [r5, #16]
 80262ee:	9b01      	ldr	r3, [sp, #4]
 80262f0:	60eb      	str	r3, [r5, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 80262f2:	2303      	movs	r3, #3
 80262f4:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      mg_random(&rand, sizeof(rand));
 80262f8:	2108      	movs	r1, #8
 80262fa:	eb0d 0001 	add.w	r0, sp, r1
 80262fe:	f7fc fbea 	bl	8022ad6 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 8026302:	9c02      	ldr	r4, [sp, #8]
 8026304:	f7fc ffbb 	bl	802327e <mg_millis>
 8026308:	4420      	add	r0, r4
 802630a:	f002 fe69 	bl	8028fe0 <srand>
      if (ifp->enable_req_dns && dns != 0)
 802630e:	7feb      	ldrb	r3, [r5, #31]
 8026310:	b10b      	cbz	r3, 8026316 <rx_dhcp_client+0x22e>
 8026312:	9b05      	ldr	r3, [sp, #20]
 8026314:	bb1b      	cbnz	r3, 802635e <rx_dhcp_client+0x276>
      if (ifp->enable_req_sntp && sntp != 0)
 8026316:	f895 3020 	ldrb.w	r3, [r5, #32]
 802631a:	2b00      	cmp	r3, #0
 802631c:	f43f af6c 	beq.w	80261f8 <rx_dhcp_client+0x110>
 8026320:	9b04      	ldr	r3, [sp, #16]
 8026322:	2b00      	cmp	r3, #0
 8026324:	f43f af68 	beq.w	80261f8 <rx_dhcp_client+0x110>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 8026328:	aa04      	add	r2, sp, #16
 802632a:	2102      	movs	r1, #2
 802632c:	4628      	mov	r0, r5
 802632e:	f7f9 fa98 	bl	801f862 <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8026332:	e761      	b.n	80261f8 <rx_dhcp_client+0x110>
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8026334:	4b10      	ldr	r3, [pc, #64]	@ (8026378 <rx_dhcp_client+0x290>)
 8026336:	f241 42e1 	movw	r2, #5345	@ 0x14e1
 802633a:	4910      	ldr	r1, [pc, #64]	@ (802637c <rx_dhcp_client+0x294>)
 802633c:	2002      	movs	r0, #2
 802633e:	f7fc ffa3 	bl	8023288 <mg_log_prefix>
 8026342:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8026346:	2300      	movs	r3, #0
 8026348:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 802634c:	f7ea fd04 	bl	8010d58 <__aeabi_uldivmod>
 8026350:	4602      	mov	r2, r0
 8026352:	460b      	mov	r3, r1
 8026354:	4621      	mov	r1, r4
 8026356:	480a      	ldr	r0, [pc, #40]	@ (8026380 <rx_dhcp_client+0x298>)
 8026358:	f7fb f828 	bl	80213ac <mg_log>
 802635c:	e7bb      	b.n	80262d6 <rx_dhcp_client+0x1ee>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 802635e:	aa05      	add	r2, sp, #20
 8026360:	2101      	movs	r1, #1
 8026362:	4628      	mov	r0, r5
 8026364:	f7f9 fa7d 	bl	801f862 <mg_tcpip_call>
 8026368:	e7d5      	b.n	8026316 <rx_dhcp_client+0x22e>
  if (ifp->state != state) onstatechange(ifp);
 802636a:	4628      	mov	r0, r5
 802636c:	f7ff fe3c 	bl	8025fe8 <onstatechange>
 8026370:	e747      	b.n	8026202 <rx_dhcp_client+0x11a>
 8026372:	bf00      	nop
 8026374:	200000a8 	.word	0x200000a8
 8026378:	08037a0c 	.word	0x08037a0c
 802637c:	08037100 	.word	0x08037100
 8026380:	080377e4 	.word	0x080377e4

08026384 <rx_ip>:
static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8026384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026388:	b084      	sub	sp, #16
 802638a:	4605      	mov	r5, r0
 802638c:	460c      	mov	r4, r1
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 802638e:	69c9      	ldr	r1, [r1, #28]
 8026390:	88cb      	ldrh	r3, [r1, #6]
 8026392:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8026396:	b29b      	uxth	r3, r3
 8026398:	b1c3      	cbz	r3, 80263cc <rx_ip+0x48>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 802639a:	7a4b      	ldrb	r3, [r1, #9]
 802639c:	2b11      	cmp	r3, #17
 802639e:	d00e      	beq.n	80263be <rx_ip+0x3a>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 80263a0:	7a4b      	ldrb	r3, [r1, #9]
 80263a2:	2b06      	cmp	r3, #6
 80263a4:	d00f      	beq.n	80263c6 <rx_ip+0x42>
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 80263a6:	2200      	movs	r2, #0
 80263a8:	4621      	mov	r1, r4
 80263aa:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80263ac:	f7f9 fd15 	bl	801fdda <getpeer>
    if (c) mg_error(c, "Received fragmented packet");
 80263b0:	b110      	cbz	r0, 80263b8 <rx_ip+0x34>
 80263b2:	4963      	ldr	r1, [pc, #396]	@ (8026540 <rx_ip+0x1bc>)
 80263b4:	f7fd f850 	bl	8023458 <mg_error>
}
 80263b8:	b004      	add	sp, #16
 80263ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 80263be:	f101 0314 	add.w	r3, r1, #20
 80263c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80263c4:	e7ec      	b.n	80263a0 <rx_ip+0x1c>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 80263c6:	3114      	adds	r1, #20
 80263c8:	62a1      	str	r1, [r4, #40]	@ 0x28
 80263ca:	e7ec      	b.n	80263a6 <rx_ip+0x22>
  } else if (pkt->ip->proto == 1) {
 80263cc:	7a4b      	ldrb	r3, [r1, #9]
 80263ce:	2b01      	cmp	r3, #1
 80263d0:	d024      	beq.n	802641c <rx_ip+0x98>
  } else if (pkt->ip->proto == 17) {
 80263d2:	2b11      	cmp	r3, #17
 80263d4:	d031      	beq.n	802643a <rx_ip+0xb6>
  } else if (pkt->ip->proto == 6) {
 80263d6:	2b06      	cmp	r3, #6
 80263d8:	d1ee      	bne.n	80263b8 <rx_ip+0x34>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 80263da:	f101 0314 	add.w	r3, r1, #20
 80263de:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 80263e0:	68e3      	ldr	r3, [r4, #12]
 80263e2:	2b13      	cmp	r3, #19
 80263e4:	d9e8      	bls.n	80263b8 <rx_ip+0x34>
    mkpay(pkt, pkt->tcp + 1);
 80263e6:	3128      	adds	r1, #40	@ 0x28
 80263e8:	4620      	mov	r0, r4
 80263ea:	f7fb f965 	bl	80216b8 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 80263ee:	69e3      	ldr	r3, [r4, #28]
 80263f0:	8858      	ldrh	r0, [r3, #2]
 80263f2:	f7fc fc43 	bl	8022c7c <mg_ntohs>
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 80263f6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80263f8:	7b1b      	ldrb	r3, [r3, #12]
 80263fa:	091b      	lsrs	r3, r3, #4
 80263fc:	3305      	adds	r3, #5
 80263fe:	009a      	lsls	r2, r3, #2
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 8026400:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8026404:	d301      	bcc.n	802640a <rx_ip+0x86>
 8026406:	1a80      	subs	r0, r0, r2
 8026408:	60e0      	str	r0, [r4, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802640a:	4b4e      	ldr	r3, [pc, #312]	@ (8026544 <rx_ip+0x1c0>)
 802640c:	681b      	ldr	r3, [r3, #0]
 802640e:	2b03      	cmp	r3, #3
 8026410:	dc74      	bgt.n	80264fc <rx_ip+0x178>
    rx_tcp(ifp, pkt);
 8026412:	4621      	mov	r1, r4
 8026414:	4628      	mov	r0, r5
 8026416:	f7ff fb3d 	bl	8025a94 <rx_tcp>
 802641a:	e7cd      	b.n	80263b8 <rx_ip+0x34>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 802641c:	f101 0314 	add.w	r3, r1, #20
 8026420:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8026422:	68e3      	ldr	r3, [r4, #12]
 8026424:	2b03      	cmp	r3, #3
 8026426:	d9c7      	bls.n	80263b8 <rx_ip+0x34>
    mkpay(pkt, pkt->icmp + 1);
 8026428:	3118      	adds	r1, #24
 802642a:	4620      	mov	r0, r4
 802642c:	f7fb f944 	bl	80216b8 <mkpay>
    rx_icmp(ifp, pkt);
 8026430:	4621      	mov	r1, r4
 8026432:	4628      	mov	r0, r5
 8026434:	f7fc fc77 	bl	8022d26 <rx_icmp>
 8026438:	e7be      	b.n	80263b8 <rx_ip+0x34>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 802643a:	f101 0314 	add.w	r3, r1, #20
 802643e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8026440:	68e3      	ldr	r3, [r4, #12]
 8026442:	2b07      	cmp	r3, #7
 8026444:	d9b8      	bls.n	80263b8 <rx_ip+0x34>
    mkpay(pkt, pkt->udp + 1);
 8026446:	311c      	adds	r1, #28
 8026448:	4620      	mov	r0, r4
 802644a:	f7fb f935 	bl	80216b8 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802644e:	4b3d      	ldr	r3, [pc, #244]	@ (8026544 <rx_ip+0x1c0>)
 8026450:	681b      	ldr	r3, [r3, #0]
 8026452:	2b03      	cmp	r3, #3
 8026454:	dc16      	bgt.n	8026484 <rx_ip+0x100>
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 8026456:	7f2b      	ldrb	r3, [r5, #28]
 8026458:	b133      	cbz	r3, 8026468 <rx_ip+0xe4>
 802645a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802645c:	8877      	ldrh	r7, [r6, #2]
 802645e:	2044      	movs	r0, #68	@ 0x44
 8026460:	f7fc fc0c 	bl	8022c7c <mg_ntohs>
 8026464:	4287      	cmp	r7, r0
 8026466:	d02f      	beq.n	80264c8 <rx_ip+0x144>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 8026468:	7f6b      	ldrb	r3, [r5, #29]
 802646a:	b133      	cbz	r3, 802647a <rx_ip+0xf6>
 802646c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802646e:	8877      	ldrh	r7, [r6, #2]
 8026470:	2043      	movs	r0, #67	@ 0x43
 8026472:	f7fc fc03 	bl	8022c7c <mg_ntohs>
 8026476:	4287      	cmp	r7, r0
 8026478:	d033      	beq.n	80264e2 <rx_ip+0x15e>
      rx_udp(ifp, pkt);
 802647a:	4621      	mov	r1, r4
 802647c:	4628      	mov	r0, r5
 802647e:	f7fd fe03 	bl	8024088 <rx_udp>
 8026482:	e799      	b.n	80263b8 <rx_ip+0x34>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8026484:	4b30      	ldr	r3, [pc, #192]	@ (8026548 <rx_ip+0x1c4>)
 8026486:	f241 6255 	movw	r2, #5717	@ 0x1655
 802648a:	4930      	ldr	r1, [pc, #192]	@ (802654c <rx_ip+0x1c8>)
 802648c:	2004      	movs	r0, #4
 802648e:	f7fc fefb 	bl	8023288 <mg_log_prefix>
 8026492:	69e7      	ldr	r7, [r4, #28]
 8026494:	f8d4 802c 	ldr.w	r8, [r4, #44]	@ 0x2c
 8026498:	f8b8 0000 	ldrh.w	r0, [r8]
 802649c:	f7fc fbee 	bl	8022c7c <mg_ntohs>
 80264a0:	4606      	mov	r6, r0
 80264a2:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 80264a6:	f7fc fbe9 	bl	8022c7c <mg_ntohs>
 80264aa:	68e3      	ldr	r3, [r4, #12]
 80264ac:	4928      	ldr	r1, [pc, #160]	@ (8026550 <rx_ip+0x1cc>)
 80264ae:	9303      	str	r3, [sp, #12]
 80264b0:	9002      	str	r0, [sp, #8]
 80264b2:	f107 0310 	add.w	r3, r7, #16
 80264b6:	9301      	str	r3, [sp, #4]
 80264b8:	9100      	str	r1, [sp, #0]
 80264ba:	4633      	mov	r3, r6
 80264bc:	f107 020c 	add.w	r2, r7, #12
 80264c0:	4824      	ldr	r0, [pc, #144]	@ (8026554 <rx_ip+0x1d0>)
 80264c2:	f7fa ff73 	bl	80213ac <mg_log>
 80264c6:	e7c6      	b.n	8026456 <rx_ip+0xd2>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 80264c8:	f106 0308 	add.w	r3, r6, #8
 80264cc:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 80264ce:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 80264d2:	4620      	mov	r0, r4
 80264d4:	f7fb f8f0 	bl	80216b8 <mkpay>
      rx_dhcp_client(ifp, pkt);
 80264d8:	4621      	mov	r1, r4
 80264da:	4628      	mov	r0, r5
 80264dc:	f7ff fe04 	bl	80260e8 <rx_dhcp_client>
 80264e0:	e76a      	b.n	80263b8 <rx_ip+0x34>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 80264e2:	f106 0308 	add.w	r3, r6, #8
 80264e6:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 80264e8:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 80264ec:	4620      	mov	r0, r4
 80264ee:	f7fb f8e3 	bl	80216b8 <mkpay>
      rx_dhcp_server(ifp, pkt);
 80264f2:	4621      	mov	r1, r4
 80264f4:	4628      	mov	r0, r5
 80264f6:	f7fc fd41 	bl	8022f7c <rx_dhcp_server>
 80264fa:	e75d      	b.n	80263b8 <rx_ip+0x34>
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 80264fc:	4b12      	ldr	r3, [pc, #72]	@ (8026548 <rx_ip+0x1c4>)
 80264fe:	f241 626a 	movw	r2, #5738	@ 0x166a
 8026502:	4912      	ldr	r1, [pc, #72]	@ (802654c <rx_ip+0x1c8>)
 8026504:	2004      	movs	r0, #4
 8026506:	f7fc febf 	bl	8023288 <mg_log_prefix>
 802650a:	69e7      	ldr	r7, [r4, #28]
 802650c:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 8026510:	f8b8 0000 	ldrh.w	r0, [r8]
 8026514:	f7fc fbb2 	bl	8022c7c <mg_ntohs>
 8026518:	4606      	mov	r6, r0
 802651a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 802651e:	f7fc fbad 	bl	8022c7c <mg_ntohs>
 8026522:	68e3      	ldr	r3, [r4, #12]
 8026524:	490a      	ldr	r1, [pc, #40]	@ (8026550 <rx_ip+0x1cc>)
 8026526:	9303      	str	r3, [sp, #12]
 8026528:	9002      	str	r0, [sp, #8]
 802652a:	f107 0310 	add.w	r3, r7, #16
 802652e:	9301      	str	r3, [sp, #4]
 8026530:	9100      	str	r1, [sp, #0]
 8026532:	4633      	mov	r3, r6
 8026534:	f107 020c 	add.w	r2, r7, #12
 8026538:	4807      	ldr	r0, [pc, #28]	@ (8026558 <rx_ip+0x1d4>)
 802653a:	f7fa ff37 	bl	80213ac <mg_log>
 802653e:	e768      	b.n	8026412 <rx_ip+0x8e>
 8026540:	080377fc 	.word	0x080377fc
 8026544:	200000a8 	.word	0x200000a8
 8026548:	08037a1c 	.word	0x08037a1c
 802654c:	08037100 	.word	0x08037100
 8026550:	0802136d 	.word	0x0802136d
 8026554:	08037818 	.word	0x08037818
 8026558:	08037834 	.word	0x08037834

0802655c <mg_tcpip_rx>:
static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 802655c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026560:	b08e      	sub	sp, #56	@ 0x38
 8026562:	4606      	mov	r6, r0
 8026564:	460c      	mov	r4, r1
 8026566:	4615      	mov	r5, r2
  memset(&pkt, 0, sizeof(pkt));
 8026568:	2234      	movs	r2, #52	@ 0x34
 802656a:	2100      	movs	r1, #0
 802656c:	a801      	add	r0, sp, #4
 802656e:	f003 fa87 	bl	8029a80 <memset>
  pkt.raw.buf = (char *) buf;
 8026572:	9401      	str	r4, [sp, #4]
  pkt.raw.len = len;
 8026574:	9502      	str	r5, [sp, #8]
  pkt.eth = (struct eth *) buf;
 8026576:	9405      	str	r4, [sp, #20]
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8026578:	2d0d      	cmp	r5, #13
 802657a:	d93f      	bls.n	80265fc <mg_tcpip_rx+0xa0>
  if (ifp->enable_mac_check &&
 802657c:	f896 3022 	ldrb.w	r3, [r6, #34]	@ 0x22
 8026580:	b15b      	cbz	r3, 802659a <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8026582:	2206      	movs	r2, #6
 8026584:	4631      	mov	r1, r6
 8026586:	4620      	mov	r0, r4
 8026588:	f003 f9e6 	bl	8029958 <memcmp>
  if (ifp->enable_mac_check &&
 802658c:	b128      	cbz	r0, 802659a <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 802658e:	2206      	movs	r2, #6
 8026590:	4945      	ldr	r1, [pc, #276]	@ (80266a8 <mg_tcpip_rx+0x14c>)
 8026592:	4620      	mov	r0, r4
 8026594:	f003 f9e0 	bl	8029958 <memcmp>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8026598:	bb80      	cbnz	r0, 80265fc <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 802659a:	f896 3021 	ldrb.w	r3, [r6, #33]	@ 0x21
 802659e:	b18b      	cbz	r3, 80265c4 <mg_tcpip_rx+0x68>
 80265a0:	2d04      	cmp	r5, #4
 80265a2:	d92e      	bls.n	8026602 <mg_tcpip_rx+0xa6>
    len -= 4;  // TODO(scaprile): check on bigendian
 80265a4:	f1a5 0804 	sub.w	r8, r5, #4
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 80265a8:	4642      	mov	r2, r8
 80265aa:	4621      	mov	r1, r4
 80265ac:	2000      	movs	r0, #0
 80265ae:	f7fc fe1b 	bl	80231e8 <mg_crc32>
 80265b2:	9000      	str	r0, [sp, #0]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 80265b4:	2204      	movs	r2, #4
 80265b6:	4669      	mov	r1, sp
 80265b8:	eb04 0008 	add.w	r0, r4, r8
 80265bc:	f003 f9cc 	bl	8029958 <memcmp>
 80265c0:	b108      	cbz	r0, 80265c6 <mg_tcpip_rx+0x6a>
 80265c2:	e01b      	b.n	80265fc <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 80265c4:	46a8      	mov	r8, r5
  if (pkt.eth->type == mg_htons(0x806)) {
 80265c6:	89a7      	ldrh	r7, [r4, #12]
 80265c8:	f640 0006 	movw	r0, #2054	@ 0x806
 80265cc:	f7fc fb56 	bl	8022c7c <mg_ntohs>
 80265d0:	4287      	cmp	r7, r0
 80265d2:	d018      	beq.n	8026606 <mg_tcpip_rx+0xaa>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 80265d4:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 80265d8:	f7fc fb50 	bl	8022c7c <mg_ntohs>
 80265dc:	4287      	cmp	r7, r0
 80265de:	d01b      	beq.n	8026618 <mg_tcpip_rx+0xbc>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 80265e0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80265e4:	f7fc fb4a 	bl	8022c7c <mg_ntohs>
 80265e8:	4287      	cmp	r7, r0
 80265ea:	d028      	beq.n	802663e <mg_tcpip_rx+0xe2>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 80265ec:	4b2f      	ldr	r3, [pc, #188]	@ (80266ac <mg_tcpip_rx+0x150>)
 80265ee:	681b      	ldr	r3, [r3, #0]
 80265f0:	2b02      	cmp	r3, #2
 80265f2:	dc41      	bgt.n	8026678 <mg_tcpip_rx+0x11c>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 80265f4:	4b2d      	ldr	r3, [pc, #180]	@ (80266ac <mg_tcpip_rx+0x150>)
 80265f6:	681b      	ldr	r3, [r3, #0]
 80265f8:	2b03      	cmp	r3, #3
 80265fa:	dc4d      	bgt.n	8026698 <mg_tcpip_rx+0x13c>
}
 80265fc:	b00e      	add	sp, #56	@ 0x38
 80265fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ifp->enable_crc32_check && len > 4) {
 8026602:	46a8      	mov	r8, r5
 8026604:	e7df      	b.n	80265c6 <mg_tcpip_rx+0x6a>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 8026606:	340e      	adds	r4, #14
 8026608:	9407      	str	r4, [sp, #28]
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 802660a:	2d29      	cmp	r5, #41	@ 0x29
 802660c:	d9f6      	bls.n	80265fc <mg_tcpip_rx+0xa0>
    rx_arp(ifp, &pkt);
 802660e:	a901      	add	r1, sp, #4
 8026610:	4630      	mov	r0, r6
 8026612:	f7fe ff09 	bl	8025428 <rx_arp>
 8026616:	e7f1      	b.n	80265fc <mg_tcpip_rx+0xa0>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 8026618:	f104 030e 	add.w	r3, r4, #14
 802661c:	9309      	str	r3, [sp, #36]	@ 0x24
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 802661e:	2d35      	cmp	r5, #53	@ 0x35
 8026620:	d9ec      	bls.n	80265fc <mg_tcpip_rx+0xa0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8026622:	7ba3      	ldrb	r3, [r4, #14]
 8026624:	091b      	lsrs	r3, r3, #4
 8026626:	2b06      	cmp	r3, #6
 8026628:	d1e8      	bne.n	80265fc <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip6 + 1);
 802662a:	f104 0136 	add.w	r1, r4, #54	@ 0x36
 802662e:	a801      	add	r0, sp, #4
 8026630:	f7fb f842 	bl	80216b8 <mkpay>
    rx_ip6(ifp, &pkt);
 8026634:	a901      	add	r1, sp, #4
 8026636:	4630      	mov	r0, r6
 8026638:	f7fc fbaf 	bl	8022d9a <rx_ip6>
 802663c:	e7de      	b.n	80265fc <mg_tcpip_rx+0xa0>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 802663e:	f104 030e 	add.w	r3, r4, #14
 8026642:	9308      	str	r3, [sp, #32]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8026644:	2d21      	cmp	r5, #33	@ 0x21
 8026646:	d9d9      	bls.n	80265fc <mg_tcpip_rx+0xa0>
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 8026648:	8a20      	ldrh	r0, [r4, #16]
 802664a:	f7fc fb17 	bl	8022c7c <mg_ntohs>
 802664e:	300e      	adds	r0, #14
 8026650:	42a8      	cmp	r0, r5
 8026652:	d200      	bcs.n	8026656 <mg_tcpip_rx+0xfa>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 8026654:	9002      	str	r0, [sp, #8]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8026656:	9b02      	ldr	r3, [sp, #8]
 8026658:	2b21      	cmp	r3, #33	@ 0x21
 802665a:	d9cf      	bls.n	80265fc <mg_tcpip_rx+0xa0>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 802665c:	7ba3      	ldrb	r3, [r4, #14]
 802665e:	091b      	lsrs	r3, r3, #4
 8026660:	2b04      	cmp	r3, #4
 8026662:	d1cb      	bne.n	80265fc <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip + 1);
 8026664:	f104 0122 	add.w	r1, r4, #34	@ 0x22
 8026668:	a801      	add	r0, sp, #4
 802666a:	f7fb f825 	bl	80216b8 <mkpay>
    rx_ip(ifp, &pkt);
 802666e:	a901      	add	r1, sp, #4
 8026670:	4630      	mov	r0, r6
 8026672:	f7ff fe87 	bl	8026384 <rx_ip>
 8026676:	e7c1      	b.n	80265fc <mg_tcpip_rx+0xa0>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8026678:	4b0d      	ldr	r3, [pc, #52]	@ (80266b0 <mg_tcpip_rx+0x154>)
 802667a:	f241 62a8 	movw	r2, #5800	@ 0x16a8
 802667e:	490d      	ldr	r1, [pc, #52]	@ (80266b4 <mg_tcpip_rx+0x158>)
 8026680:	2003      	movs	r0, #3
 8026682:	f7fc fe01 	bl	8023288 <mg_log_prefix>
 8026686:	9b05      	ldr	r3, [sp, #20]
 8026688:	8998      	ldrh	r0, [r3, #12]
 802668a:	f7fc faf7 	bl	8022c7c <mg_ntohs>
 802668e:	4601      	mov	r1, r0
 8026690:	4809      	ldr	r0, [pc, #36]	@ (80266b8 <mg_tcpip_rx+0x15c>)
 8026692:	f7fa fe8b 	bl	80213ac <mg_log>
 8026696:	e7ad      	b.n	80265f4 <mg_tcpip_rx+0x98>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8026698:	4641      	mov	r1, r8
 802669a:	2920      	cmp	r1, #32
 802669c:	bf28      	it	cs
 802669e:	2120      	movcs	r1, #32
 80266a0:	4620      	mov	r0, r4
 80266a2:	f7f9 ffe5 	bl	8020670 <mg_hexdump>
 80266a6:	e7a9      	b.n	80265fc <mg_tcpip_rx+0xa0>
 80266a8:	08037b88 	.word	0x08037b88
 80266ac:	200000a8 	.word	0x200000a8
 80266b0:	08037a2c 	.word	0x08037a2c
 80266b4:	08037100 	.word	0x08037100
 80266b8:	08037850 	.word	0x08037850

080266bc <mg_tcpip_poll>:
static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 80266bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266c0:	b08b      	sub	sp, #44	@ 0x2c
 80266c2:	4605      	mov	r5, r0
 80266c4:	4616      	mov	r6, r2
 80266c6:	461f      	mov	r7, r3
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 80266c8:	9200      	str	r2, [sp, #0]
 80266ca:	9301      	str	r3, [sp, #4]
 80266cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80266d0:	2300      	movs	r3, #0
 80266d2:	3058      	adds	r0, #88	@ 0x58
 80266d4:	f7fc f8a4 	bl	8022820 <mg_timer_expired>
  ifp->now = now;
 80266d8:	652e      	str	r6, [r5, #80]	@ 0x50
 80266da:	656f      	str	r7, [r5, #84]	@ 0x54
  if (expired_1000ms && ifp->driver->up) {
 80266dc:	4604      	mov	r4, r0
 80266de:	b318      	cbz	r0, 8026728 <mg_tcpip_poll+0x6c>
 80266e0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80266e2:	68db      	ldr	r3, [r3, #12]
 80266e4:	b303      	cbz	r3, 8026728 <mg_tcpip_poll+0x6c>
    bool up = ifp->driver->up(ifp);
 80266e6:	4628      	mov	r0, r5
 80266e8:	4798      	blx	r3
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 80266ea:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 80266ee:	3b00      	subs	r3, #0
 80266f0:	bf18      	it	ne
 80266f2:	2301      	movne	r3, #1
    if (up != current) {
 80266f4:	4298      	cmp	r0, r3
 80266f6:	d010      	beq.n	802671a <mg_tcpip_poll+0x5e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 80266f8:	b120      	cbz	r0, 8026704 <mg_tcpip_poll+0x48>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 80266fa:	7f2b      	ldrb	r3, [r5, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 80266fc:	2b00      	cmp	r3, #0
 80266fe:	d06e      	beq.n	80267de <mg_tcpip_poll+0x122>
 8026700:	2301      	movs	r3, #1
 8026702:	e000      	b.n	8026706 <mg_tcpip_poll+0x4a>
 8026704:	2300      	movs	r3, #0
 8026706:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 802670a:	b918      	cbnz	r0, 8026714 <mg_tcpip_poll+0x58>
 802670c:	7f2b      	ldrb	r3, [r5, #28]
 802670e:	b10b      	cbz	r3, 8026714 <mg_tcpip_poll+0x58>
 8026710:	2300      	movs	r3, #0
 8026712:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8026714:	4628      	mov	r0, r5
 8026716:	f7ff fc67 	bl	8025fe8 <onstatechange>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 802671a:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802671e:	b91b      	cbnz	r3, 8026728 <mg_tcpip_poll+0x6c>
 8026720:	4ba8      	ldr	r3, [pc, #672]	@ (80269c4 <mg_tcpip_poll+0x308>)
 8026722:	681b      	ldr	r3, [r3, #0]
 8026724:	2b00      	cmp	r3, #0
 8026726:	dc5c      	bgt.n	80267e2 <mg_tcpip_poll+0x126>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8026728:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802672c:	2b00      	cmp	r3, #0
 802672e:	f000 8146 	beq.w	80269be <mg_tcpip_poll+0x302>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 8026732:	2b01      	cmp	r3, #1
 8026734:	d060      	beq.n	80267f8 <mg_tcpip_poll+0x13c>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8026736:	2c00      	cmp	r4, #0
 8026738:	d05f      	beq.n	80267fa <mg_tcpip_poll+0x13e>
 802673a:	2b03      	cmp	r3, #3
 802673c:	d15d      	bne.n	80267fa <mg_tcpip_poll+0x13e>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 802673e:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8026740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8026742:	ea52 0103 	orrs.w	r1, r2, r3
 8026746:	d058      	beq.n	80267fa <mg_tcpip_poll+0x13e>
    if (ifp->now >= ifp->lease_expire) {
 8026748:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 802674a:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 802674c:	4290      	cmp	r0, r2
 802674e:	eb71 0403 	sbcs.w	r4, r1, r3
 8026752:	d262      	bcs.n	802681a <mg_tcpip_poll+0x15e>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 8026754:	4c9c      	ldr	r4, [pc, #624]	@ (80269c8 <mg_tcpip_poll+0x30c>)
 8026756:	1904      	adds	r4, r0, r4
 8026758:	f141 0c00 	adc.w	ip, r1, #0
 802675c:	42a2      	cmp	r2, r4
 802675e:	eb73 030c 	sbcs.w	r3, r3, ip
 8026762:	d24a      	bcs.n	80267fa <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 8026764:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8026768:	2300      	movs	r3, #0
 802676a:	f7ea faf5 	bl	8010d58 <__aeabi_uldivmod>
 802676e:	4602      	mov	r2, r0
 8026770:	2000      	movs	r0, #0
 8026772:	1853      	adds	r3, r2, r1
 8026774:	d25a      	bcs.n	802682c <mg_tcpip_poll+0x170>
 8026776:	4403      	add	r3, r0
 8026778:	4894      	ldr	r0, [pc, #592]	@ (80269cc <mg_tcpip_poll+0x310>)
 802677a:	fba0 4003 	umull	r4, r0, r0, r3
 802677e:	08c0      	lsrs	r0, r0, #3
 8026780:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8026784:	1a1b      	subs	r3, r3, r0
 8026786:	1ad3      	subs	r3, r2, r3
 8026788:	f161 0c00 	sbc.w	ip, r1, #0
 802678c:	4c90      	ldr	r4, [pc, #576]	@ (80269d0 <mg_tcpip_poll+0x314>)
 802678e:	f04f 30ee 	mov.w	r0, #4008636142	@ 0xeeeeeeee
 8026792:	fb03 f000 	mul.w	r0, r3, r0
 8026796:	fb04 000c 	mla	r0, r4, ip, r0
 802679a:	fba3 3404 	umull	r3, r4, r3, r4
 802679e:	4420      	add	r0, r4
 80267a0:	089b      	lsrs	r3, r3, #2
 80267a2:	ea43 7380 	orr.w	r3, r3, r0, lsl #30
 80267a6:	0880      	lsrs	r0, r0, #2
 80267a8:	0104      	lsls	r4, r0, #4
 80267aa:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 80267ae:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 80267b2:	ebbc 0c03 	subs.w	ip, ip, r3
 80267b6:	eb64 0300 	sbc.w	r3, r4, r0
 80267ba:	009b      	lsls	r3, r3, #2
 80267bc:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80267c0:	ea4f 008c 	mov.w	r0, ip, lsl #2
 80267c4:	1a12      	subs	r2, r2, r0
 80267c6:	eb61 0103 	sbc.w	r1, r1, r3
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 80267ca:	430a      	orrs	r2, r1
 80267cc:	d115      	bne.n	80267fa <mg_tcpip_poll+0x13e>
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 80267ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80267d2:	68aa      	ldr	r2, [r5, #8]
 80267d4:	497f      	ldr	r1, [pc, #508]	@ (80269d4 <mg_tcpip_poll+0x318>)
 80267d6:	4628      	mov	r0, r5
 80267d8:	f7fe fdfe 	bl	80253d8 <tx_dhcp_request_re>
 80267dc:	e00d      	b.n	80267fa <mg_tcpip_poll+0x13e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 80267de:	2303      	movs	r3, #3
 80267e0:	e791      	b.n	8026706 <mg_tcpip_poll+0x4a>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 80267e2:	4b7d      	ldr	r3, [pc, #500]	@ (80269d8 <mg_tcpip_poll+0x31c>)
 80267e4:	f241 62c5 	movw	r2, #5829	@ 0x16c5
 80267e8:	497c      	ldr	r1, [pc, #496]	@ (80269dc <mg_tcpip_poll+0x320>)
 80267ea:	2001      	movs	r0, #1
 80267ec:	f7fc fd4c 	bl	8023288 <mg_log_prefix>
 80267f0:	487b      	ldr	r0, [pc, #492]	@ (80269e0 <mg_tcpip_poll+0x324>)
 80267f2:	f7fa fddb 	bl	80213ac <mg_log>
 80267f6:	e797      	b.n	8026728 <mg_tcpip_poll+0x6c>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 80267f8:	b95c      	cbnz	r4, 8026812 <mg_tcpip_poll+0x156>
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 80267fa:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80267fc:	689b      	ldr	r3, [r3, #8]
 80267fe:	b1fb      	cbz	r3, 8026840 <mg_tcpip_poll+0x184>
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 8026800:	462a      	mov	r2, r5
 8026802:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8026804:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8026806:	4798      	blx	r3
    if (len > 0) {
 8026808:	4602      	mov	r2, r0
 802680a:	b988      	cbnz	r0, 8026830 <mg_tcpip_poll+0x174>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 802680c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802680e:	681c      	ldr	r4, [r3, #0]
 8026810:	e0a3      	b.n	802695a <mg_tcpip_poll+0x29e>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 8026812:	4628      	mov	r0, r5
 8026814:	f7fe fdaa 	bl	802536c <tx_dhcp_discover>
 8026818:	e7ef      	b.n	80267fa <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 802681a:	2301      	movs	r3, #1
 802681c:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8026820:	2300      	movs	r3, #0
 8026822:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8026824:	4628      	mov	r0, r5
 8026826:	f7ff fbdf 	bl	8025fe8 <onstatechange>
 802682a:	e7e6      	b.n	80267fa <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 802682c:	2001      	movs	r0, #1
 802682e:	e7a2      	b.n	8026776 <mg_tcpip_poll+0xba>
      ifp->nrecv++;
 8026830:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8026832:	3301      	adds	r3, #1
 8026834:	672b      	str	r3, [r5, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 8026836:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8026838:	4628      	mov	r0, r5
 802683a:	f7ff fe8f 	bl	802655c <mg_tcpip_rx>
 802683e:	e7e5      	b.n	802680c <mg_tcpip_poll+0x150>
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 8026840:	f105 0434 	add.w	r4, r5, #52	@ 0x34
 8026844:	a909      	add	r1, sp, #36	@ 0x24
 8026846:	4620      	mov	r0, r4
 8026848:	f7fa febb 	bl	80215c2 <mg_queue_next>
    if (len > 0) {
 802684c:	4680      	mov	r8, r0
 802684e:	2800      	cmp	r0, #0
 8026850:	d0dc      	beq.n	802680c <mg_tcpip_poll+0x150>
      mg_tcpip_rx(ifp, buf, len);
 8026852:	4602      	mov	r2, r0
 8026854:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026856:	4628      	mov	r0, r5
 8026858:	f7ff fe80 	bl	802655c <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 802685c:	4641      	mov	r1, r8
 802685e:	4620      	mov	r0, r4
 8026860:	f7fa fecb 	bl	80215fa <mg_queue_del>
 8026864:	e7d2      	b.n	802680c <mg_tcpip_poll+0x150>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 8026866:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 802686a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 802686e:	4291      	cmp	r1, r2
 8026870:	f000 8088 	beq.w	8026984 <mg_tcpip_poll+0x2c8>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8026874:	4b53      	ldr	r3, [pc, #332]	@ (80269c4 <mg_tcpip_poll+0x308>)
 8026876:	681b      	ldr	r3, [r3, #0]
 8026878:	2b03      	cmp	r3, #3
 802687a:	dc23      	bgt.n	80268c4 <mg_tcpip_poll+0x208>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 802687c:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8026880:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8026884:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8026888:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 802688c:	f7fc f95e 	bl	8022b4c <mg_ntohl>
 8026890:	9007      	str	r0, [sp, #28]
 8026892:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8026896:	f7fc f959 	bl	8022b4c <mg_ntohl>
 802689a:	2300      	movs	r3, #0
 802689c:	9305      	str	r3, [sp, #20]
 802689e:	9304      	str	r3, [sp, #16]
 80268a0:	9003      	str	r0, [sp, #12]
 80268a2:	9b07      	ldr	r3, [sp, #28]
 80268a4:	9302      	str	r3, [sp, #8]
 80268a6:	f8cd b004 	str.w	fp, [sp, #4]
 80268aa:	f8cd a000 	str.w	sl, [sp]
 80268ae:	2310      	movs	r3, #16
 80268b0:	4642      	mov	r2, r8
 80268b2:	4649      	mov	r1, r9
 80268b4:	4628      	mov	r0, r5
 80268b6:	f7fe f9e3 	bl	8024c80 <tx_tcp>
        s->acked = s->ack;
 80268ba:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80268be:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 80268c2:	e045      	b.n	8026950 <mg_tcpip_poll+0x294>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 80268c4:	4b44      	ldr	r3, [pc, #272]	@ (80269d8 <mg_tcpip_poll+0x31c>)
 80268c6:	f241 62f1 	movw	r2, #5873	@ 0x16f1
 80268ca:	4944      	ldr	r1, [pc, #272]	@ (80269dc <mg_tcpip_poll+0x320>)
 80268cc:	2004      	movs	r0, #4
 80268ce:	f7fc fcdb 	bl	8023288 <mg_log_prefix>
 80268d2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80268d6:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 80268da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80268dc:	4841      	ldr	r0, [pc, #260]	@ (80269e4 <mg_tcpip_poll+0x328>)
 80268de:	f7fa fd65 	bl	80213ac <mg_log>
 80268e2:	e7cb      	b.n	802687c <mg_tcpip_poll+0x1c0>
        mg_error(c, "ARP timeout");
 80268e4:	4940      	ldr	r1, [pc, #256]	@ (80269e8 <mg_tcpip_poll+0x32c>)
 80268e6:	4620      	mov	r0, r4
 80268e8:	f7fc fdb6 	bl	8023458 <mg_error>
 80268ec:	e030      	b.n	8026950 <mg_tcpip_poll+0x294>
        mg_error(c, "Connection timeout");
 80268ee:	493f      	ldr	r1, [pc, #252]	@ (80269ec <mg_tcpip_poll+0x330>)
 80268f0:	4620      	mov	r0, r4
 80268f2:	f7fc fdb1 	bl	8023458 <mg_error>
 80268f6:	e02b      	b.n	8026950 <mg_tcpip_poll+0x294>
        c->is_closing = 1;
 80268f8:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80268fc:	f043 0320 	orr.w	r3, r3, #32
 8026900:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        continue;
 8026904:	e028      	b.n	8026958 <mg_tcpip_poll+0x29c>
          mg_error(c, "keepalive");
 8026906:	493a      	ldr	r1, [pc, #232]	@ (80269f0 <mg_tcpip_poll+0x334>)
 8026908:	4620      	mov	r0, r4
 802690a:	f7fc fda5 	bl	8023458 <mg_error>
 802690e:	e01f      	b.n	8026950 <mg_tcpip_poll+0x294>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8026910:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8026914:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8026918:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 802691c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8026920:	3801      	subs	r0, #1
 8026922:	f7fc f913 	bl	8022b4c <mg_ntohl>
 8026926:	9007      	str	r0, [sp, #28]
 8026928:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 802692c:	f7fc f90e 	bl	8022b4c <mg_ntohl>
 8026930:	2300      	movs	r3, #0
 8026932:	9305      	str	r3, [sp, #20]
 8026934:	9304      	str	r3, [sp, #16]
 8026936:	9003      	str	r0, [sp, #12]
 8026938:	9b07      	ldr	r3, [sp, #28]
 802693a:	9302      	str	r3, [sp, #8]
 802693c:	f8cd b004 	str.w	fp, [sp, #4]
 8026940:	f8cd a000 	str.w	sl, [sp]
 8026944:	2310      	movs	r3, #16
 8026946:	4642      	mov	r2, r8
 8026948:	4649      	mov	r1, r9
 802694a:	4628      	mov	r0, r5
 802694c:	f7fe f998 	bl	8024c80 <tx_tcp>
      settmout(c, MIP_TTYPE_KEEPALIVE);
 8026950:	2100      	movs	r1, #0
 8026952:	4620      	mov	r0, r4
 8026954:	f7fe fa70 	bl	8024e38 <settmout>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8026958:	6824      	ldr	r4, [r4, #0]
 802695a:	b384      	cbz	r4, 80269be <mg_tcpip_poll+0x302>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 802695c:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	@ 0xac
 8026960:	f240 1209 	movw	r2, #265	@ 0x109
 8026964:	421a      	tst	r2, r3
 8026966:	d1f7      	bne.n	8026958 <mg_tcpip_poll+0x29c>
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8026968:	f8d4 801c 	ldr.w	r8, [r4, #28]
    if (now > s->timer) {
 802696c:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 8026970:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 8026974:	42b2      	cmp	r2, r6
 8026976:	41bb      	sbcs	r3, r7
 8026978:	d2ee      	bcs.n	8026958 <mg_tcpip_poll+0x29c>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 802697a:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 802697e:	2b01      	cmp	r3, #1
 8026980:	f43f af71 	beq.w	8026866 <mg_tcpip_poll+0x1aa>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 8026984:	2b02      	cmp	r3, #2
 8026986:	d0ad      	beq.n	80268e4 <mg_tcpip_poll+0x228>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 8026988:	2b03      	cmp	r3, #3
 802698a:	d0b0      	beq.n	80268ee <mg_tcpip_poll+0x232>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 802698c:	2b04      	cmp	r3, #4
 802698e:	d0b3      	beq.n	80268f8 <mg_tcpip_poll+0x23c>
        if (s->tmiss++ > 2) {
 8026990:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 8026994:	1c5a      	adds	r2, r3, #1
 8026996:	f884 20cf 	strb.w	r2, [r4, #207]	@ 0xcf
 802699a:	2b02      	cmp	r3, #2
 802699c:	d8b3      	bhi.n	8026906 <mg_tcpip_poll+0x24a>
          MG_VERBOSE(("%lu keepalive", c->id));
 802699e:	4b09      	ldr	r3, [pc, #36]	@ (80269c4 <mg_tcpip_poll+0x308>)
 80269a0:	681b      	ldr	r3, [r3, #0]
 80269a2:	2b03      	cmp	r3, #3
 80269a4:	ddb4      	ble.n	8026910 <mg_tcpip_poll+0x254>
 80269a6:	4b0c      	ldr	r3, [pc, #48]	@ (80269d8 <mg_tcpip_poll+0x31c>)
 80269a8:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80269ac:	490b      	ldr	r1, [pc, #44]	@ (80269dc <mg_tcpip_poll+0x320>)
 80269ae:	2004      	movs	r0, #4
 80269b0:	f7fc fc6a 	bl	8023288 <mg_log_prefix>
 80269b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80269b6:	480f      	ldr	r0, [pc, #60]	@ (80269f4 <mg_tcpip_poll+0x338>)
 80269b8:	f7fa fcf8 	bl	80213ac <mg_log>
 80269bc:	e7a8      	b.n	8026910 <mg_tcpip_poll+0x254>
}
 80269be:	b00b      	add	sp, #44	@ 0x2c
 80269c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80269c4:	200000a8 	.word	0x200000a8
 80269c8:	001b7740 	.word	0x001b7740
 80269cc:	88888889 	.word	0x88888889
 80269d0:	eeeeeeef 	.word	0xeeeeeeef
 80269d4:	08037b88 	.word	0x08037b88
 80269d8:	08037a70 	.word	0x08037a70
 80269dc:	08037100 	.word	0x08037100
 80269e0:	08037864 	.word	0x08037864
 80269e4:	08037874 	.word	0x08037874
 80269e8:	08037884 	.word	0x08037884
 80269ec:	08037890 	.word	0x08037890
 80269f0:	080378a8 	.word	0x080378a8
 80269f4:	080378a4 	.word	0x080378a4

080269f8 <mg_mgr_poll>:
void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 80269f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80269fa:	b087      	sub	sp, #28
 80269fc:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 80269fe:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
  uint64_t now = mg_millis();
 8026a00:	f7fc fc3d 	bl	802327e <mg_millis>
 8026a04:	4602      	mov	r2, r0
 8026a06:	460b      	mov	r3, r1
 8026a08:	9004      	str	r0, [sp, #16]
 8026a0a:	9105      	str	r1, [sp, #20]
  mg_timer_poll(&mgr->timers, now);
 8026a0c:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8026a10:	f7fb ff3a 	bl	8022888 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 8026a14:	2d00      	cmp	r5, #0
 8026a16:	d078      	beq.n	8026b0a <mg_mgr_poll+0x112>
 8026a18:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8026a1a:	2b00      	cmp	r3, #0
 8026a1c:	d075      	beq.n	8026b0a <mg_mgr_poll+0x112>
  mg_tcpip_poll(ifp, now);
 8026a1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026a22:	4628      	mov	r0, r5
 8026a24:	f7ff fe4a 	bl	80266bc <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8026a28:	6824      	ldr	r4, [r4, #0]
 8026a2a:	e040      	b.n	8026aae <mg_mgr_poll+0xb6>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8026a2c:	4b38      	ldr	r3, [pc, #224]	@ (8026b10 <mg_mgr_poll+0x118>)
 8026a2e:	f241 72a4 	movw	r2, #6052	@ 0x17a4
 8026a32:	4938      	ldr	r1, [pc, #224]	@ (8026b14 <mg_mgr_poll+0x11c>)
 8026a34:	2004      	movs	r0, #4
 8026a36:	f7fc fc27 	bl	8023288 <mg_log_prefix>
 8026a3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026a3c:	f894 00ac 	ldrb.w	r0, [r4, #172]	@ 0xac
 8026a40:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8026a44:	d019      	beq.n	8026a7a <mg_mgr_poll+0x82>
 8026a46:	2254      	movs	r2, #84	@ 0x54
 8026a48:	f010 0f20 	tst.w	r0, #32
 8026a4c:	d017      	beq.n	8026a7e <mg_mgr_poll+0x86>
 8026a4e:	2343      	movs	r3, #67	@ 0x43
 8026a50:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8026a54:	d115      	bne.n	8026a82 <mg_mgr_poll+0x8a>
 8026a56:	2668      	movs	r6, #104	@ 0x68
 8026a58:	f010 0f08 	tst.w	r0, #8
 8026a5c:	d013      	beq.n	8026a86 <mg_mgr_poll+0x8e>
 8026a5e:	2752      	movs	r7, #82	@ 0x52
 8026a60:	f894 00ad 	ldrb.w	r0, [r4, #173]	@ 0xad
 8026a64:	f010 0f20 	tst.w	r0, #32
 8026a68:	d00f      	beq.n	8026a8a <mg_mgr_poll+0x92>
 8026a6a:	2043      	movs	r0, #67	@ 0x43
 8026a6c:	9002      	str	r0, [sp, #8]
 8026a6e:	9701      	str	r7, [sp, #4]
 8026a70:	9600      	str	r6, [sp, #0]
 8026a72:	4829      	ldr	r0, [pc, #164]	@ (8026b18 <mg_mgr_poll+0x120>)
 8026a74:	f7fa fc9a 	bl	80213ac <mg_log>
 8026a78:	e024      	b.n	8026ac4 <mg_mgr_poll+0xcc>
 8026a7a:	2274      	movs	r2, #116	@ 0x74
 8026a7c:	e7e4      	b.n	8026a48 <mg_mgr_poll+0x50>
 8026a7e:	2363      	movs	r3, #99	@ 0x63
 8026a80:	e7e6      	b.n	8026a50 <mg_mgr_poll+0x58>
 8026a82:	2648      	movs	r6, #72	@ 0x48
 8026a84:	e7e8      	b.n	8026a58 <mg_mgr_poll+0x60>
 8026a86:	2772      	movs	r7, #114	@ 0x72
 8026a88:	e7ea      	b.n	8026a60 <mg_mgr_poll+0x68>
 8026a8a:	2063      	movs	r0, #99	@ 0x63
 8026a8c:	e7ee      	b.n	8026a6c <mg_mgr_poll+0x74>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 8026a8e:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 8026a92:	4620      	mov	r0, r4
 8026a94:	f7fc fd18 	bl	80234c8 <handle_tls_recv>
 8026a98:	e01e      	b.n	8026ad8 <mg_mgr_poll+0xe0>
    if (can_write(c)) write_conn(c);
 8026a9a:	4620      	mov	r0, r4
 8026a9c:	f7fe fa6a 	bl	8024f74 <write_conn>
 8026aa0:	e01f      	b.n	8026ae2 <mg_mgr_poll+0xea>
    if (c->is_closing) close_conn(c);
 8026aa2:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8026aa6:	f013 0f20 	tst.w	r3, #32
 8026aaa:	d12a      	bne.n	8026b02 <mg_mgr_poll+0x10a>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8026aac:	462c      	mov	r4, r5
  for (c = mgr->conns; c != NULL; c = tmp) {
 8026aae:	b364      	cbz	r4, 8026b0a <mg_mgr_poll+0x112>
    tmp = c->next;
 8026ab0:	6825      	ldr	r5, [r4, #0]
    mg_call(c, MG_EV_POLL, &now);
 8026ab2:	aa04      	add	r2, sp, #16
 8026ab4:	2102      	movs	r1, #2
 8026ab6:	4620      	mov	r0, r4
 8026ab8:	f7f9 fa30 	bl	801ff1c <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8026abc:	4b17      	ldr	r3, [pc, #92]	@ (8026b1c <mg_mgr_poll+0x124>)
 8026abe:	681b      	ldr	r3, [r3, #0]
 8026ac0:	2b03      	cmp	r3, #3
 8026ac2:	dcb3      	bgt.n	8026a2c <mg_mgr_poll+0x34>
    if (c->is_tls && mg_tls_pending(c) > 0)
 8026ac4:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8026ac8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8026acc:	d004      	beq.n	8026ad8 <mg_mgr_poll+0xe0>
 8026ace:	4620      	mov	r0, r4
 8026ad0:	f7fb ff24 	bl	802291c <mg_tls_pending>
 8026ad4:	2800      	cmp	r0, #0
 8026ad6:	d1da      	bne.n	8026a8e <mg_mgr_poll+0x96>
    if (can_write(c)) write_conn(c);
 8026ad8:	4620      	mov	r0, r4
 8026ada:	f7f8 fee7 	bl	801f8ac <can_write>
 8026ade:	2800      	cmp	r0, #0
 8026ae0:	d1db      	bne.n	8026a9a <mg_mgr_poll+0xa2>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 8026ae2:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8026ae6:	f013 0f10 	tst.w	r3, #16
 8026aea:	d0da      	beq.n	8026aa2 <mg_mgr_poll+0xaa>
 8026aec:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8026aee:	2b00      	cmp	r3, #0
 8026af0:	d1d7      	bne.n	8026aa2 <mg_mgr_poll+0xaa>
 8026af2:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8026af6:	2b04      	cmp	r3, #4
 8026af8:	d0d3      	beq.n	8026aa2 <mg_mgr_poll+0xaa>
      init_closure(c);
 8026afa:	4620      	mov	r0, r4
 8026afc:	f7fe fa66 	bl	8024fcc <init_closure>
 8026b00:	e7cf      	b.n	8026aa2 <mg_mgr_poll+0xaa>
    if (c->is_closing) close_conn(c);
 8026b02:	4620      	mov	r0, r4
 8026b04:	f7fd fb7e 	bl	8024204 <close_conn>
 8026b08:	e7d0      	b.n	8026aac <mg_mgr_poll+0xb4>
}
 8026b0a:	b007      	add	sp, #28
 8026b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026b0e:	bf00      	nop
 8026b10:	08037a80 	.word	0x08037a80
 8026b14:	08037100 	.word	0x08037100
 8026b18:	080378b4 	.word	0x080378b4
 8026b1c:	200000a8 	.word	0x200000a8

08026b20 <mg_now>:
uint64_t mg_now(void) {
 8026b20:	b508      	push	{r3, lr}
  return mg_millis() + s_boot_timestamp;
 8026b22:	f7fc fbac 	bl	802327e <mg_millis>
 8026b26:	4a03      	ldr	r2, [pc, #12]	@ (8026b34 <mg_now+0x14>)
 8026b28:	6813      	ldr	r3, [r2, #0]
 8026b2a:	6852      	ldr	r2, [r2, #4]
 8026b2c:	18c0      	adds	r0, r0, r3
}
 8026b2e:	eb42 0101 	adc.w	r1, r2, r1
 8026b32:	bd08      	pop	{r3, pc}
 8026b34:	20018018 	.word	0x20018018

08026b38 <mg_sntp_parse>:
int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 8026b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026b3c:	4604      	mov	r4, r0
  int mode = len > 0 ? buf[0] & 7 : 0;
 8026b3e:	460a      	mov	r2, r1
 8026b40:	b129      	cbz	r1, 8026b4e <mg_sntp_parse+0x16>
 8026b42:	7801      	ldrb	r1, [r0, #0]
 8026b44:	f001 0307 	and.w	r3, r1, #7
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8026b48:	f3c1 05c2 	ubfx	r5, r1, #3, #3
 8026b4c:	e001      	b.n	8026b52 <mg_sntp_parse+0x1a>
  int mode = len > 0 ? buf[0] & 7 : 0;
 8026b4e:	2300      	movs	r3, #0
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8026b50:	461d      	mov	r5, r3
  if (len < 48) {
 8026b52:	2a2f      	cmp	r2, #47	@ 0x2f
 8026b54:	d817      	bhi.n	8026b86 <mg_sntp_parse+0x4e>
    MG_ERROR(("%s", "corrupt packet"));
 8026b56:	4b4b      	ldr	r3, [pc, #300]	@ (8026c84 <mg_sntp_parse+0x14c>)
 8026b58:	681b      	ldr	r3, [r3, #0]
 8026b5a:	2b00      	cmp	r3, #0
 8026b5c:	dc04      	bgt.n	8026b68 <mg_sntp_parse+0x30>
  int64_t epoch_milliseconds = -1;
 8026b5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026b62:	4601      	mov	r1, r0
}
 8026b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    MG_ERROR(("%s", "corrupt packet"));
 8026b68:	4b47      	ldr	r3, [pc, #284]	@ (8026c88 <mg_sntp_parse+0x150>)
 8026b6a:	f641 420e 	movw	r2, #7182	@ 0x1c0e
 8026b6e:	4947      	ldr	r1, [pc, #284]	@ (8026c8c <mg_sntp_parse+0x154>)
 8026b70:	2001      	movs	r0, #1
 8026b72:	f7fc fb89 	bl	8023288 <mg_log_prefix>
 8026b76:	4946      	ldr	r1, [pc, #280]	@ (8026c90 <mg_sntp_parse+0x158>)
 8026b78:	4846      	ldr	r0, [pc, #280]	@ (8026c94 <mg_sntp_parse+0x15c>)
 8026b7a:	f7fa fc17 	bl	80213ac <mg_log>
  int64_t epoch_milliseconds = -1;
 8026b7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026b82:	4601      	mov	r1, r0
 8026b84:	e7ee      	b.n	8026b64 <mg_sntp_parse+0x2c>
  } else if (mode != 4 && mode != 5) {
 8026b86:	3b04      	subs	r3, #4
 8026b88:	2b01      	cmp	r3, #1
 8026b8a:	d916      	bls.n	8026bba <mg_sntp_parse+0x82>
    MG_ERROR(("%s", "not a server reply"));
 8026b8c:	4b3d      	ldr	r3, [pc, #244]	@ (8026c84 <mg_sntp_parse+0x14c>)
 8026b8e:	681b      	ldr	r3, [r3, #0]
 8026b90:	2b00      	cmp	r3, #0
 8026b92:	dc03      	bgt.n	8026b9c <mg_sntp_parse+0x64>
  int64_t epoch_milliseconds = -1;
 8026b94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026b98:	4601      	mov	r1, r0
 8026b9a:	e7e3      	b.n	8026b64 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "not a server reply"));
 8026b9c:	4b3a      	ldr	r3, [pc, #232]	@ (8026c88 <mg_sntp_parse+0x150>)
 8026b9e:	f641 4210 	movw	r2, #7184	@ 0x1c10
 8026ba2:	493a      	ldr	r1, [pc, #232]	@ (8026c8c <mg_sntp_parse+0x154>)
 8026ba4:	2001      	movs	r0, #1
 8026ba6:	f7fc fb6f 	bl	8023288 <mg_log_prefix>
 8026baa:	493b      	ldr	r1, [pc, #236]	@ (8026c98 <mg_sntp_parse+0x160>)
 8026bac:	4839      	ldr	r0, [pc, #228]	@ (8026c94 <mg_sntp_parse+0x15c>)
 8026bae:	f7fa fbfd 	bl	80213ac <mg_log>
  int64_t epoch_milliseconds = -1;
 8026bb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026bb6:	4601      	mov	r1, r0
 8026bb8:	e7d4      	b.n	8026b64 <mg_sntp_parse+0x2c>
  } else if (buf[1] == 0) {
 8026bba:	7863      	ldrb	r3, [r4, #1]
 8026bbc:	b9b3      	cbnz	r3, 8026bec <mg_sntp_parse+0xb4>
    MG_ERROR(("%s", "server sent a kiss of death"));
 8026bbe:	4b31      	ldr	r3, [pc, #196]	@ (8026c84 <mg_sntp_parse+0x14c>)
 8026bc0:	681b      	ldr	r3, [r3, #0]
 8026bc2:	2b00      	cmp	r3, #0
 8026bc4:	dc03      	bgt.n	8026bce <mg_sntp_parse+0x96>
  int64_t epoch_milliseconds = -1;
 8026bc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026bca:	4601      	mov	r1, r0
 8026bcc:	e7ca      	b.n	8026b64 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "server sent a kiss of death"));
 8026bce:	4b2e      	ldr	r3, [pc, #184]	@ (8026c88 <mg_sntp_parse+0x150>)
 8026bd0:	f641 4212 	movw	r2, #7186	@ 0x1c12
 8026bd4:	492d      	ldr	r1, [pc, #180]	@ (8026c8c <mg_sntp_parse+0x154>)
 8026bd6:	2001      	movs	r0, #1
 8026bd8:	f7fc fb56 	bl	8023288 <mg_log_prefix>
 8026bdc:	492f      	ldr	r1, [pc, #188]	@ (8026c9c <mg_sntp_parse+0x164>)
 8026bde:	482d      	ldr	r0, [pc, #180]	@ (8026c94 <mg_sntp_parse+0x15c>)
 8026be0:	f7fa fbe4 	bl	80213ac <mg_log>
  int64_t epoch_milliseconds = -1;
 8026be4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026be8:	4601      	mov	r1, r0
 8026bea:	e7bb      	b.n	8026b64 <mg_sntp_parse+0x2c>
  } else if (version == 4 || version == 3) {
 8026bec:	1eeb      	subs	r3, r5, #3
 8026bee:	2b01      	cmp	r3, #1
 8026bf0:	d907      	bls.n	8026c02 <mg_sntp_parse+0xca>
    MG_ERROR(("unexpected version: %d", version));
 8026bf2:	4b24      	ldr	r3, [pc, #144]	@ (8026c84 <mg_sntp_parse+0x14c>)
 8026bf4:	681b      	ldr	r3, [r3, #0]
 8026bf6:	2b00      	cmp	r3, #0
 8026bf8:	dc35      	bgt.n	8026c66 <mg_sntp_parse+0x12e>
  int64_t epoch_milliseconds = -1;
 8026bfa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026bfe:	4601      	mov	r1, r0
  return epoch_milliseconds;
 8026c00:	e7b0      	b.n	8026b64 <mg_sntp_parse+0x2c>
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 8026c02:	f104 0018 	add.w	r0, r4, #24
 8026c06:	f7fb ffff 	bl	8022c08 <gettimestamp>
 8026c0a:	4606      	mov	r6, r0
 8026c0c:	468a      	mov	sl, r1
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 8026c0e:	f104 0020 	add.w	r0, r4, #32
 8026c12:	f7fb fff9 	bl	8022c08 <gettimestamp>
 8026c16:	4680      	mov	r8, r0
 8026c18:	4689      	mov	r9, r1
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 8026c1a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8026c1e:	f7fb fff3 	bl	8022c08 <gettimestamp>
 8026c22:	4607      	mov	r7, r0
 8026c24:	460c      	mov	r4, r1
    int64_t now = (int64_t) mg_millis();
 8026c26:	f7fc fb2a 	bl	802327e <mg_millis>
 8026c2a:	4605      	mov	r5, r0
 8026c2c:	468c      	mov	ip, r1
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 8026c2e:	1b86      	subs	r6, r0, r6
 8026c30:	eb61 020a 	sbc.w	r2, r1, sl
 8026c34:	ebb7 0808 	subs.w	r8, r7, r8
 8026c38:	eb64 0909 	sbc.w	r9, r4, r9
 8026c3c:	ebb6 0608 	subs.w	r6, r6, r8
 8026c40:	eb62 0209 	sbc.w	r2, r2, r9
    epoch_milliseconds = transmit_time + latency / 2;
 8026c44:	0fd3      	lsrs	r3, r2, #31
 8026c46:	199b      	adds	r3, r3, r6
 8026c48:	f142 0200 	adc.w	r2, r2, #0
 8026c4c:	085b      	lsrs	r3, r3, #1
 8026c4e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8026c52:	19d8      	adds	r0, r3, r7
 8026c54:	eb44 0162 	adc.w	r1, r4, r2, asr #1
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 8026c58:	1b45      	subs	r5, r0, r5
 8026c5a:	eb61 030c 	sbc.w	r3, r1, ip
 8026c5e:	4a10      	ldr	r2, [pc, #64]	@ (8026ca0 <mg_sntp_parse+0x168>)
 8026c60:	6015      	str	r5, [r2, #0]
 8026c62:	6053      	str	r3, [r2, #4]
 8026c64:	e77e      	b.n	8026b64 <mg_sntp_parse+0x2c>
    MG_ERROR(("unexpected version: %d", version));
 8026c66:	4b08      	ldr	r3, [pc, #32]	@ (8026c88 <mg_sntp_parse+0x150>)
 8026c68:	f641 421d 	movw	r2, #7197	@ 0x1c1d
 8026c6c:	4907      	ldr	r1, [pc, #28]	@ (8026c8c <mg_sntp_parse+0x154>)
 8026c6e:	2001      	movs	r0, #1
 8026c70:	f7fc fb0a 	bl	8023288 <mg_log_prefix>
 8026c74:	4629      	mov	r1, r5
 8026c76:	480b      	ldr	r0, [pc, #44]	@ (8026ca4 <mg_sntp_parse+0x16c>)
 8026c78:	f7fa fb98 	bl	80213ac <mg_log>
  int64_t epoch_milliseconds = -1;
 8026c7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026c80:	4601      	mov	r1, r0
 8026c82:	e76f      	b.n	8026b64 <mg_sntp_parse+0x2c>
 8026c84:	200000a8 	.word	0x200000a8
 8026c88:	080379d0 	.word	0x080379d0
 8026c8c:	08037100 	.word	0x08037100
 8026c90:	080378c8 	.word	0x080378c8
 8026c94:	08037418 	.word	0x08037418
 8026c98:	080378d8 	.word	0x080378d8
 8026c9c:	080378ec 	.word	0x080378ec
 8026ca0:	20018018 	.word	0x20018018
 8026ca4:	08037908 	.word	0x08037908

08026ca8 <mg_sntp_request>:
void mg_sntp_request(struct mg_connection *c) {
 8026ca8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8026cac:	b08c      	sub	sp, #48	@ 0x30
 8026cae:	4604      	mov	r4, r0
  if (c->is_resolving) {
 8026cb0:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8026cb4:	f013 0f08 	tst.w	r3, #8
 8026cb8:	d012      	beq.n	8026ce0 <mg_sntp_request+0x38>
    MG_ERROR(("%lu wait until resolved", c->id));
 8026cba:	4b2b      	ldr	r3, [pc, #172]	@ (8026d68 <mg_sntp_request+0xc0>)
 8026cbc:	681b      	ldr	r3, [r3, #0]
 8026cbe:	2b00      	cmp	r3, #0
 8026cc0:	dc02      	bgt.n	8026cc8 <mg_sntp_request+0x20>
}
 8026cc2:	b00c      	add	sp, #48	@ 0x30
 8026cc4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    MG_ERROR(("%lu wait until resolved", c->id));
 8026cc8:	4b28      	ldr	r3, [pc, #160]	@ (8026d6c <mg_sntp_request+0xc4>)
 8026cca:	f641 423a 	movw	r2, #7226	@ 0x1c3a
 8026cce:	4928      	ldr	r1, [pc, #160]	@ (8026d70 <mg_sntp_request+0xc8>)
 8026cd0:	2001      	movs	r0, #1
 8026cd2:	f7fc fad9 	bl	8023288 <mg_log_prefix>
 8026cd6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026cd8:	4826      	ldr	r0, [pc, #152]	@ (8026d74 <mg_sntp_request+0xcc>)
 8026cda:	f7fa fb67 	bl	80213ac <mg_log>
 8026cde:	e7f0      	b.n	8026cc2 <mg_sntp_request+0x1a>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 8026ce0:	f7fc facd 	bl	802327e <mg_millis>
 8026ce4:	4606      	mov	r6, r0
 8026ce6:	460d      	mov	r5, r1
    uint8_t buf[48] = {0};
 8026ce8:	2100      	movs	r1, #0
 8026cea:	9100      	str	r1, [sp, #0]
 8026cec:	222c      	movs	r2, #44	@ 0x2c
 8026cee:	a801      	add	r0, sp, #4
 8026cf0:	f002 fec6 	bl	8029a80 <memset>
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 8026cf4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8026cf8:	2300      	movs	r3, #0
 8026cfa:	4630      	mov	r0, r6
 8026cfc:	4629      	mov	r1, r5
 8026cfe:	f7e9 ffdb 	bl	8010cb8 <__aeabi_ldivmod>
 8026d02:	4610      	mov	r0, r2
 8026d04:	4619      	mov	r1, r3
 8026d06:	f7e9 fc61 	bl	80105cc <__aeabi_l2d>
 8026d0a:	2200      	movs	r2, #0
 8026d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8026d78 <mg_sntp_request+0xd0>)
 8026d0e:	f7e9 fdb5 	bl	801087c <__aeabi_ddiv>
 8026d12:	a313      	add	r3, pc, #76	@ (adr r3, 8026d60 <mg_sntp_request+0xb8>)
 8026d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026d18:	f7e9 fc86 	bl	8010628 <__aeabi_dmul>
 8026d1c:	4680      	mov	r8, r0
 8026d1e:	4689      	mov	r9, r1
    buf[0] = (0 << 6) | (4 << 3) | 3;
 8026d20:	2323      	movs	r3, #35	@ 0x23
 8026d22:	f88d 3000 	strb.w	r3, [sp]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 8026d26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8026d2a:	2300      	movs	r3, #0
 8026d2c:	4630      	mov	r0, r6
 8026d2e:	4629      	mov	r1, r5
 8026d30:	f7e9 ffc2 	bl	8010cb8 <__aeabi_ldivmod>
 8026d34:	f100 4003 	add.w	r0, r0, #2197815296	@ 0x83000000
 8026d38:	f500 002a 	add.w	r0, r0, #11141120	@ 0xaa0000
 8026d3c:	f500 40fd 	add.w	r0, r0, #32384	@ 0x7e80
 8026d40:	f7fb ff04 	bl	8022b4c <mg_ntohl>
 8026d44:	900a      	str	r0, [sp, #40]	@ 0x28
    t[1] = mg_htonl((uint32_t) frac);
 8026d46:	4640      	mov	r0, r8
 8026d48:	4649      	mov	r1, r9
 8026d4a:	f7e9 ff45 	bl	8010bd8 <__aeabi_d2uiz>
 8026d4e:	f7fb fefd 	bl	8022b4c <mg_ntohl>
 8026d52:	900b      	str	r0, [sp, #44]	@ 0x2c
    mg_send(c, buf, sizeof(buf));
 8026d54:	2230      	movs	r2, #48	@ 0x30
 8026d56:	4669      	mov	r1, sp
 8026d58:	4620      	mov	r0, r4
 8026d5a:	f7fd fb49 	bl	80243f0 <mg_send>
}
 8026d5e:	e7b0      	b.n	8026cc2 <mg_sntp_request+0x1a>
 8026d60:	ffe00000 	.word	0xffe00000
 8026d64:	41efffff 	.word	0x41efffff
 8026d68:	200000a8 	.word	0x200000a8
 8026d6c:	080379c0 	.word	0x080379c0
 8026d70:	08037100 	.word	0x08037100
 8026d74:	08037920 	.word	0x08037920
 8026d78:	408f4000 	.word	0x408f4000

08026d7c <sntp_cb>:
static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 8026d7c:	b570      	push	{r4, r5, r6, lr}
 8026d7e:	b082      	sub	sp, #8
 8026d80:	4604      	mov	r4, r0
  if (ev == MG_EV_OPEN) {
 8026d82:	3901      	subs	r1, #1
 8026d84:	2906      	cmp	r1, #6
 8026d86:	d810      	bhi.n	8026daa <sntp_cb+0x2e>
 8026d88:	e8df f001 	tbb	[pc, r1]
 8026d8c:	110f4604 	.word	0x110f4604
 8026d90:	0f0f      	.short	0x0f0f
 8026d92:	14          	.byte	0x14
 8026d93:	00          	.byte	0x00
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 8026d94:	f7fc fa73 	bl	802327e <mg_millis>
 8026d98:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8026d9c:	18c0      	adds	r0, r0, r3
 8026d9e:	f141 0100 	adc.w	r1, r1, #0
 8026da2:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8026da6:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
}
 8026daa:	b002      	add	sp, #8
 8026dac:	bd70      	pop	{r4, r5, r6, pc}
    mg_sntp_request(c);
 8026dae:	f7ff ff7b 	bl	8026ca8 <mg_sntp_request>
 8026db2:	e7fa      	b.n	8026daa <sntp_cb+0x2e>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 8026db4:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8026db6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8026db8:	f7ff febe 	bl	8026b38 <mg_sntp_parse>
 8026dbc:	4605      	mov	r5, r0
 8026dbe:	460e      	mov	r6, r1
 8026dc0:	9000      	str	r0, [sp, #0]
 8026dc2:	9101      	str	r1, [sp, #4]
    if (milliseconds > 0) {
 8026dc4:	2801      	cmp	r0, #1
 8026dc6:	f171 0300 	sbcs.w	r3, r1, #0
 8026dca:	da06      	bge.n	8026dda <sntp_cb+0x5e>
    c->is_closing = 1;
 8026dcc:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8026dd0:	f043 0320 	orr.w	r3, r3, #32
 8026dd4:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8026dd8:	e7e7      	b.n	8026daa <sntp_cb+0x2e>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 8026dda:	f7fc fa50 	bl	802327e <mg_millis>
 8026dde:	1a2d      	subs	r5, r5, r0
 8026de0:	eb66 0601 	sbc.w	r6, r6, r1
 8026de4:	4b14      	ldr	r3, [pc, #80]	@ (8026e38 <sntp_cb+0xbc>)
 8026de6:	601d      	str	r5, [r3, #0]
 8026de8:	605e      	str	r6, [r3, #4]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 8026dea:	466a      	mov	r2, sp
 8026dec:	2112      	movs	r1, #18
 8026dee:	4620      	mov	r0, r4
 8026df0:	f7f9 f894 	bl	801ff1c <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 8026df4:	4b11      	ldr	r3, [pc, #68]	@ (8026e3c <sntp_cb+0xc0>)
 8026df6:	681b      	ldr	r3, [r3, #0]
 8026df8:	2b02      	cmp	r3, #2
 8026dfa:	dde7      	ble.n	8026dcc <sntp_cb+0x50>
 8026dfc:	4b10      	ldr	r3, [pc, #64]	@ (8026e40 <sntp_cb+0xc4>)
 8026dfe:	f641 422d 	movw	r2, #7213	@ 0x1c2d
 8026e02:	4910      	ldr	r1, [pc, #64]	@ (8026e44 <sntp_cb+0xc8>)
 8026e04:	2003      	movs	r0, #3
 8026e06:	f7fc fa3f 	bl	8023288 <mg_log_prefix>
 8026e0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026e0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026e10:	480d      	ldr	r0, [pc, #52]	@ (8026e48 <sntp_cb+0xcc>)
 8026e12:	f7fa facb 	bl	80213ac <mg_log>
 8026e16:	e7d9      	b.n	8026dcc <sntp_cb+0x50>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 8026e18:	f7fc fa31 	bl	802327e <mg_millis>
 8026e1c:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 8026e20:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8026e24:	4282      	cmp	r2, r0
 8026e26:	418b      	sbcs	r3, r1
 8026e28:	d2bf      	bcs.n	8026daa <sntp_cb+0x2e>
 8026e2a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8026e2e:	f043 0320 	orr.w	r3, r3, #32
 8026e32:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8026e36:	e7b8      	b.n	8026daa <sntp_cb+0x2e>
 8026e38:	20018018 	.word	0x20018018
 8026e3c:	200000a8 	.word	0x200000a8
 8026e40:	080379b8 	.word	0x080379b8
 8026e44:	08037100 	.word	0x08037100
 8026e48:	08037938 	.word	0x08037938

08026e4c <mg_sntp_connect>:
                                      mg_event_handler_t fn, void *fnd) {
 8026e4c:	b538      	push	{r3, r4, r5, lr}
  if (url == NULL) url = "udp://time.google.com:123";
 8026e4e:	460d      	mov	r5, r1
 8026e50:	b169      	cbz	r1, 8026e6e <mg_sntp_connect+0x22>
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 8026e52:	4629      	mov	r1, r5
 8026e54:	f7fe ffa0 	bl	8025d98 <mg_connect>
 8026e58:	4604      	mov	r4, r0
 8026e5a:	b130      	cbz	r0, 8026e6a <mg_sntp_connect+0x1e>
    c->pfn = sntp_cb;
 8026e5c:	4b05      	ldr	r3, [pc, #20]	@ (8026e74 <mg_sntp_connect+0x28>)
 8026e5e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 8026e62:	462a      	mov	r2, r5
 8026e64:	2101      	movs	r1, #1
 8026e66:	f7ff ff89 	bl	8026d7c <sntp_cb>
}
 8026e6a:	4620      	mov	r0, r4
 8026e6c:	bd38      	pop	{r3, r4, r5, pc}
  if (url == NULL) url = "udp://time.google.com:123";
 8026e6e:	4d02      	ldr	r5, [pc, #8]	@ (8026e78 <mg_sntp_connect+0x2c>)
 8026e70:	e7ef      	b.n	8026e52 <mg_sntp_connect+0x6>
 8026e72:	bf00      	nop
 8026e74:	08026d7d 	.word	0x08026d7d
 8026e78:	0803795c 	.word	0x0803795c

08026e7c <has_mqtt_prefix>:
#include <ctype.h>

#define PREFIX "mqtt://"
#define MAX_PORT 65535

int has_mqtt_prefix(const char *url) {
 8026e7c:	b508      	push	{r3, lr}
    return strncmp(url, PREFIX, strlen(PREFIX)) == 0;
 8026e7e:	2207      	movs	r2, #7
 8026e80:	4903      	ldr	r1, [pc, #12]	@ (8026e90 <has_mqtt_prefix+0x14>)
 8026e82:	f002 fe32 	bl	8029aea <strncmp>
}
 8026e86:	fab0 f080 	clz	r0, r0
 8026e8a:	0940      	lsrs	r0, r0, #5
 8026e8c:	bd08      	pop	{r3, pc}
 8026e8e:	bf00      	nop
 8026e90:	08037fd8 	.word	0x08037fd8

08026e94 <is_valid_ip_or_domain>:

int is_valid_ip_or_domain(const char *host) {
 8026e94:	b570      	push	{r4, r5, r6, lr}
 8026e96:	4604      	mov	r4, r0
    int dot_count = 0;
    int is_ip_format = 1;

    // Проверка, является ли это IP-адресом
    for (int i = 0; host[i] != '\0'; i++) {
 8026e98:	2200      	movs	r2, #0
    int dot_count = 0;
 8026e9a:	4610      	mov	r0, r2
    for (int i = 0; host[i] != '\0'; i++) {
 8026e9c:	e001      	b.n	8026ea2 <is_valid_ip_or_domain+0xe>
        if (host[i] == '.') {
            dot_count++;
 8026e9e:	3001      	adds	r0, #1
    for (int i = 0; host[i] != '\0'; i++) {
 8026ea0:	3201      	adds	r2, #1
 8026ea2:	5ca3      	ldrb	r3, [r4, r2]
 8026ea4:	b143      	cbz	r3, 8026eb8 <is_valid_ip_or_domain+0x24>
        if (host[i] == '.') {
 8026ea6:	2b2e      	cmp	r3, #46	@ 0x2e
 8026ea8:	d0f9      	beq.n	8026e9e <is_valid_ip_or_domain+0xa>
        } else if (!isdigit(host[i])) {
 8026eaa:	491d      	ldr	r1, [pc, #116]	@ (8026f20 <is_valid_ip_or_domain+0x8c>)
 8026eac:	5ccb      	ldrb	r3, [r1, r3]
 8026eae:	f013 0f04 	tst.w	r3, #4
 8026eb2:	d1f5      	bne.n	8026ea0 <is_valid_ip_or_domain+0xc>
            is_ip_format = 0;
 8026eb4:	2500      	movs	r5, #0
 8026eb6:	e000      	b.n	8026eba <is_valid_ip_or_domain+0x26>
    int is_ip_format = 1;
 8026eb8:	2501      	movs	r5, #1
            break;
        }
    }

    // Если это может быть IP-адрес
    if (is_ip_format && dot_count == 3) {
 8026eba:	b335      	cbz	r5, 8026f0a <is_valid_ip_or_domain+0x76>
 8026ebc:	2803      	cmp	r0, #3
 8026ebe:	d013      	beq.n	8026ee8 <is_valid_ip_or_domain+0x54>
 8026ec0:	2200      	movs	r2, #0
 8026ec2:	4615      	mov	r5, r2
 8026ec4:	e014      	b.n	8026ef0 <is_valid_ip_or_domain+0x5c>
        int octet;
        const char *ptr = host;

        for (int i = 0; i < 4; i++) {
 8026ec6:	3601      	adds	r6, #1
 8026ec8:	2e03      	cmp	r6, #3
 8026eca:	dc24      	bgt.n	8026f16 <is_valid_ip_or_domain+0x82>
            octet = atoi(ptr);
 8026ecc:	4620      	mov	r0, r4
 8026ece:	f000 f8a3 	bl	8027018 <atoi>
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 8026ed2:	28ff      	cmp	r0, #255	@ 0xff
 8026ed4:	d821      	bhi.n	8026f1a <is_valid_ip_or_domain+0x86>

            // Переход к следующему октету
            ptr = strchr(ptr, '.');
 8026ed6:	212e      	movs	r1, #46	@ 0x2e
 8026ed8:	4620      	mov	r0, r4
 8026eda:	f002 fde8 	bl	8029aae <strchr>
            if (ptr != NULL) ptr++;
 8026ede:	4604      	mov	r4, r0
 8026ee0:	2800      	cmp	r0, #0
 8026ee2:	d0f0      	beq.n	8026ec6 <is_valid_ip_or_domain+0x32>
 8026ee4:	3401      	adds	r4, #1
 8026ee6:	e7ee      	b.n	8026ec6 <is_valid_ip_or_domain+0x32>
        for (int i = 0; i < 4; i++) {
 8026ee8:	2600      	movs	r6, #0
 8026eea:	e7ed      	b.n	8026ec8 <is_valid_ip_or_domain+0x34>

    // Проверка на корректность доменного имени (буквы, цифры, точки и дефисы)
    dot_count = 0;
    for (int i = 0; host[i] != '\0'; i++) {
        if (host[i] == '.') {
            dot_count++;
 8026eec:	3501      	adds	r5, #1
    for (int i = 0; host[i] != '\0'; i++) {
 8026eee:	3201      	adds	r2, #1
 8026ef0:	5ca3      	ldrb	r3, [r4, r2]
 8026ef2:	b163      	cbz	r3, 8026f0e <is_valid_ip_or_domain+0x7a>
        if (host[i] == '.') {
 8026ef4:	2b2e      	cmp	r3, #46	@ 0x2e
 8026ef6:	d0f9      	beq.n	8026eec <is_valid_ip_or_domain+0x58>
        } else if (!isalnum(host[i]) && host[i] != '-') {
 8026ef8:	4909      	ldr	r1, [pc, #36]	@ (8026f20 <is_valid_ip_or_domain+0x8c>)
 8026efa:	5cc9      	ldrb	r1, [r1, r3]
 8026efc:	f011 0f07 	tst.w	r1, #7
 8026f00:	d1f5      	bne.n	8026eee <is_valid_ip_or_domain+0x5a>
 8026f02:	2b2d      	cmp	r3, #45	@ 0x2d
 8026f04:	d0f3      	beq.n	8026eee <is_valid_ip_or_domain+0x5a>
            return 0;  // Некорректный символ для доменного имени
 8026f06:	2500      	movs	r5, #0
 8026f08:	e005      	b.n	8026f16 <is_valid_ip_or_domain+0x82>
 8026f0a:	462a      	mov	r2, r5
 8026f0c:	e7f0      	b.n	8026ef0 <is_valid_ip_or_domain+0x5c>
        }
    }
    return dot_count > 0; // Доменное имя должно содержать хотя бы одну точку
 8026f0e:	2d00      	cmp	r5, #0
 8026f10:	bfd4      	ite	le
 8026f12:	2500      	movle	r5, #0
 8026f14:	2501      	movgt	r5, #1
}
 8026f16:	4628      	mov	r0, r5
 8026f18:	bd70      	pop	{r4, r5, r6, pc}
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 8026f1a:	2500      	movs	r5, #0
 8026f1c:	e7fb      	b.n	8026f16 <is_valid_ip_or_domain+0x82>
 8026f1e:	bf00      	nop
 8026f20:	08038479 	.word	0x08038479

08026f24 <is_valid_port>:

int is_valid_port(const char *port_str) {
 8026f24:	b510      	push	{r4, lr}
 8026f26:	4604      	mov	r4, r0
    int port = atoi(port_str);
 8026f28:	f000 f876 	bl	8027018 <atoi>
    if (port < 1 || port > MAX_PORT) {
 8026f2c:	3801      	subs	r0, #1
 8026f2e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8026f32:	4298      	cmp	r0, r3
 8026f34:	d80a      	bhi.n	8026f4c <is_valid_port+0x28>
        return 0; // Порт вне диапазона
    }
    // Проверить, что порт состоит только из цифр
    while (*port_str) {
 8026f36:	7823      	ldrb	r3, [r4, #0]
 8026f38:	b133      	cbz	r3, 8026f48 <is_valid_port+0x24>
        if (!isdigit(*port_str)) {
 8026f3a:	4a06      	ldr	r2, [pc, #24]	@ (8026f54 <is_valid_port+0x30>)
 8026f3c:	5cd3      	ldrb	r3, [r2, r3]
 8026f3e:	f013 0f04 	tst.w	r3, #4
 8026f42:	d005      	beq.n	8026f50 <is_valid_port+0x2c>
            return 0;
        }
        port_str++;
 8026f44:	3401      	adds	r4, #1
 8026f46:	e7f6      	b.n	8026f36 <is_valid_port+0x12>
    }
    return 1;
 8026f48:	2001      	movs	r0, #1
 8026f4a:	e000      	b.n	8026f4e <is_valid_port+0x2a>
        return 0; // Порт вне диапазона
 8026f4c:	2000      	movs	r0, #0
}
 8026f4e:	bd10      	pop	{r4, pc}
            return 0;
 8026f50:	2000      	movs	r0, #0
 8026f52:	e7fc      	b.n	8026f4e <is_valid_port+0x2a>
 8026f54:	08038479 	.word	0x08038479

08026f58 <is_valid_mqtt_url>:

int is_valid_mqtt_url(const char *url) {
 8026f58:	b570      	push	{r4, r5, r6, lr}
 8026f5a:	b0c0      	sub	sp, #256	@ 0x100
 8026f5c:	4604      	mov	r4, r0
    if (!has_mqtt_prefix(url)) {
 8026f5e:	f7ff ff8d 	bl	8026e7c <has_mqtt_prefix>
 8026f62:	b1d0      	cbz	r0, 8026f9a <is_valid_mqtt_url+0x42>
        printf("Error: URL does not start with 'mqtt://'\n");
        return -1;
    }

    // Найти первый символ после "mqtt://"
    const char *host_start = url + strlen(PREFIX);
 8026f64:	3407      	adds	r4, #7
    const char *colon = strchr(host_start, ':');
 8026f66:	213a      	movs	r1, #58	@ 0x3a
 8026f68:	4620      	mov	r0, r4
 8026f6a:	f002 fda0 	bl	8029aae <strchr>
    if (!colon) {
 8026f6e:	4606      	mov	r6, r0
 8026f70:	b1c8      	cbz	r0, 8026fa6 <is_valid_mqtt_url+0x4e>
        return -2;
    }

    // Извлечь доменное имя или IP-адрес
    char host[256];
    strncpy(host, host_start, colon - host_start);
 8026f72:	1b05      	subs	r5, r0, r4
 8026f74:	462a      	mov	r2, r5
 8026f76:	4621      	mov	r1, r4
 8026f78:	4668      	mov	r0, sp
 8026f7a:	f002 fdc8 	bl	8029b0e <strncpy>
    host[colon - host_start] = '\0';
 8026f7e:	2300      	movs	r3, #0
 8026f80:	f80d 3005 	strb.w	r3, [sp, r5]

    if (!is_valid_ip_or_domain(host)) {
 8026f84:	4668      	mov	r0, sp
 8026f86:	f7ff ff85 	bl	8026e94 <is_valid_ip_or_domain>
 8026f8a:	b190      	cbz	r0, 8026fb2 <is_valid_mqtt_url+0x5a>
        return -3;
    }

    // Проверить порт
    const char *port_str = colon + 1;
    if (!is_valid_port(port_str)) {
 8026f8c:	1c70      	adds	r0, r6, #1
 8026f8e:	f7ff ffc9 	bl	8026f24 <is_valid_port>
 8026f92:	b1a0      	cbz	r0, 8026fbe <is_valid_mqtt_url+0x66>
        printf("Error: Invalid port number\n");
        return -4;
    }

    return 0; // URL прошел все проверки
 8026f94:	2000      	movs	r0, #0
}
 8026f96:	b040      	add	sp, #256	@ 0x100
 8026f98:	bd70      	pop	{r4, r5, r6, pc}
        printf("Error: URL does not start with 'mqtt://'\n");
 8026f9a:	480c      	ldr	r0, [pc, #48]	@ (8026fcc <is_valid_mqtt_url+0x74>)
 8026f9c:	f002 f818 	bl	8028fd0 <puts>
        return -1;
 8026fa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026fa4:	e7f7      	b.n	8026f96 <is_valid_mqtt_url+0x3e>
        printf("Error: URL does not contain a port separator ':'\n");
 8026fa6:	480a      	ldr	r0, [pc, #40]	@ (8026fd0 <is_valid_mqtt_url+0x78>)
 8026fa8:	f002 f812 	bl	8028fd0 <puts>
        return -2;
 8026fac:	f06f 0001 	mvn.w	r0, #1
 8026fb0:	e7f1      	b.n	8026f96 <is_valid_mqtt_url+0x3e>
        printf("Error: Invalid domain or IP address\n");
 8026fb2:	4808      	ldr	r0, [pc, #32]	@ (8026fd4 <is_valid_mqtt_url+0x7c>)
 8026fb4:	f002 f80c 	bl	8028fd0 <puts>
        return -3;
 8026fb8:	f06f 0002 	mvn.w	r0, #2
 8026fbc:	e7eb      	b.n	8026f96 <is_valid_mqtt_url+0x3e>
        printf("Error: Invalid port number\n");
 8026fbe:	4806      	ldr	r0, [pc, #24]	@ (8026fd8 <is_valid_mqtt_url+0x80>)
 8026fc0:	f002 f806 	bl	8028fd0 <puts>
        return -4;
 8026fc4:	f06f 0003 	mvn.w	r0, #3
 8026fc8:	e7e5      	b.n	8026f96 <is_valid_mqtt_url+0x3e>
 8026fca:	bf00      	nop
 8026fcc:	08037fe0 	.word	0x08037fe0
 8026fd0:	0803800c 	.word	0x0803800c
 8026fd4:	08038040 	.word	0x08038040
 8026fd8:	08038064 	.word	0x08038064

08026fdc <__assert_func>:
 8026fdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8026fde:	4614      	mov	r4, r2
 8026fe0:	461a      	mov	r2, r3
 8026fe2:	4b09      	ldr	r3, [pc, #36]	@ (8027008 <__assert_func+0x2c>)
 8026fe4:	681b      	ldr	r3, [r3, #0]
 8026fe6:	4605      	mov	r5, r0
 8026fe8:	68d8      	ldr	r0, [r3, #12]
 8026fea:	b954      	cbnz	r4, 8027002 <__assert_func+0x26>
 8026fec:	4b07      	ldr	r3, [pc, #28]	@ (802700c <__assert_func+0x30>)
 8026fee:	461c      	mov	r4, r3
 8026ff0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026ff4:	9100      	str	r1, [sp, #0]
 8026ff6:	462b      	mov	r3, r5
 8026ff8:	4905      	ldr	r1, [pc, #20]	@ (8027010 <__assert_func+0x34>)
 8026ffa:	f000 f811 	bl	8027020 <fiprintf>
 8026ffe:	f003 ffdf 	bl	802afc0 <abort>
 8027002:	4b04      	ldr	r3, [pc, #16]	@ (8027014 <__assert_func+0x38>)
 8027004:	e7f4      	b.n	8026ff0 <__assert_func+0x14>
 8027006:	bf00      	nop
 8027008:	20000254 	.word	0x20000254
 802700c:	080380ba 	.word	0x080380ba
 8027010:	0803808c 	.word	0x0803808c
 8027014:	0803807f 	.word	0x0803807f

08027018 <atoi>:
 8027018:	220a      	movs	r2, #10
 802701a:	2100      	movs	r1, #0
 802701c:	f002 b8b6 	b.w	802918c <strtol>

08027020 <fiprintf>:
 8027020:	b40e      	push	{r1, r2, r3}
 8027022:	b503      	push	{r0, r1, lr}
 8027024:	4601      	mov	r1, r0
 8027026:	ab03      	add	r3, sp, #12
 8027028:	4805      	ldr	r0, [pc, #20]	@ (8027040 <fiprintf+0x20>)
 802702a:	f853 2b04 	ldr.w	r2, [r3], #4
 802702e:	6800      	ldr	r0, [r0, #0]
 8027030:	9301      	str	r3, [sp, #4]
 8027032:	f001 fab7 	bl	80285a4 <_vfiprintf_r>
 8027036:	b002      	add	sp, #8
 8027038:	f85d eb04 	ldr.w	lr, [sp], #4
 802703c:	b003      	add	sp, #12
 802703e:	4770      	bx	lr
 8027040:	20000254 	.word	0x20000254

08027044 <printf>:
 8027044:	b40f      	push	{r0, r1, r2, r3}
 8027046:	b507      	push	{r0, r1, r2, lr}
 8027048:	4906      	ldr	r1, [pc, #24]	@ (8027064 <printf+0x20>)
 802704a:	ab04      	add	r3, sp, #16
 802704c:	6808      	ldr	r0, [r1, #0]
 802704e:	f853 2b04 	ldr.w	r2, [r3], #4
 8027052:	6881      	ldr	r1, [r0, #8]
 8027054:	9301      	str	r3, [sp, #4]
 8027056:	f000 f807 	bl	8027068 <_vfprintf_r>
 802705a:	b003      	add	sp, #12
 802705c:	f85d eb04 	ldr.w	lr, [sp], #4
 8027060:	b004      	add	sp, #16
 8027062:	4770      	bx	lr
 8027064:	20000254 	.word	0x20000254

08027068 <_vfprintf_r>:
 8027068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802706c:	b0d3      	sub	sp, #332	@ 0x14c
 802706e:	468b      	mov	fp, r1
 8027070:	4690      	mov	r8, r2
 8027072:	461c      	mov	r4, r3
 8027074:	461e      	mov	r6, r3
 8027076:	9003      	str	r0, [sp, #12]
 8027078:	f003 fe90 	bl	802ad9c <_localeconv_r>
 802707c:	6803      	ldr	r3, [r0, #0]
 802707e:	9316      	str	r3, [sp, #88]	@ 0x58
 8027080:	4618      	mov	r0, r3
 8027082:	f7e9 f90d 	bl	80102a0 <strlen>
 8027086:	9b03      	ldr	r3, [sp, #12]
 8027088:	900d      	str	r0, [sp, #52]	@ 0x34
 802708a:	b123      	cbz	r3, 8027096 <_vfprintf_r+0x2e>
 802708c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802708e:	b913      	cbnz	r3, 8027096 <_vfprintf_r+0x2e>
 8027090:	9803      	ldr	r0, [sp, #12]
 8027092:	f002 fa4f 	bl	8029534 <__sinit>
 8027096:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802709a:	07da      	lsls	r2, r3, #31
 802709c:	d407      	bmi.n	80270ae <_vfprintf_r+0x46>
 802709e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80270a2:	059b      	lsls	r3, r3, #22
 80270a4:	d403      	bmi.n	80270ae <_vfprintf_r+0x46>
 80270a6:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80270aa:	f003 ff22 	bl	802aef2 <__retarget_lock_acquire_recursive>
 80270ae:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 80270b2:	049f      	lsls	r7, r3, #18
 80270b4:	d409      	bmi.n	80270ca <_vfprintf_r+0x62>
 80270b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80270ba:	f8ab 300c 	strh.w	r3, [fp, #12]
 80270be:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80270c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80270c6:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 80270ca:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80270ce:	071d      	lsls	r5, r3, #28
 80270d0:	d502      	bpl.n	80270d8 <_vfprintf_r+0x70>
 80270d2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80270d6:	b9c3      	cbnz	r3, 802710a <_vfprintf_r+0xa2>
 80270d8:	9803      	ldr	r0, [sp, #12]
 80270da:	4659      	mov	r1, fp
 80270dc:	f002 fbe6 	bl	80298ac <__swsetup_r>
 80270e0:	b198      	cbz	r0, 802710a <_vfprintf_r+0xa2>
 80270e2:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80270e6:	07d8      	lsls	r0, r3, #31
 80270e8:	d506      	bpl.n	80270f8 <_vfprintf_r+0x90>
 80270ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80270ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80270f0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80270f2:	b053      	add	sp, #332	@ 0x14c
 80270f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80270f8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80270fc:	0599      	lsls	r1, r3, #22
 80270fe:	d4f4      	bmi.n	80270ea <_vfprintf_r+0x82>
 8027100:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8027104:	f003 fef7 	bl	802aef6 <__retarget_lock_release_recursive>
 8027108:	e7ef      	b.n	80270ea <_vfprintf_r+0x82>
 802710a:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 802710e:	f003 021a 	and.w	r2, r3, #26
 8027112:	2a0a      	cmp	r2, #10
 8027114:	d116      	bne.n	8027144 <_vfprintf_r+0xdc>
 8027116:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 802711a:	2a00      	cmp	r2, #0
 802711c:	db12      	blt.n	8027144 <_vfprintf_r+0xdc>
 802711e:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 8027122:	07d2      	lsls	r2, r2, #31
 8027124:	d405      	bmi.n	8027132 <_vfprintf_r+0xca>
 8027126:	059b      	lsls	r3, r3, #22
 8027128:	d403      	bmi.n	8027132 <_vfprintf_r+0xca>
 802712a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802712e:	f003 fee2 	bl	802aef6 <__retarget_lock_release_recursive>
 8027132:	9803      	ldr	r0, [sp, #12]
 8027134:	4623      	mov	r3, r4
 8027136:	4642      	mov	r2, r8
 8027138:	4659      	mov	r1, fp
 802713a:	b053      	add	sp, #332	@ 0x14c
 802713c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027140:	f001 b9be 	b.w	80284c0 <__sbprintf>
 8027144:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 8027390 <_vfprintf_r+0x328>
 8027148:	2300      	movs	r3, #0
 802714a:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 802714e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8027152:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8027156:	ac29      	add	r4, sp, #164	@ 0xa4
 8027158:	9426      	str	r4, [sp, #152]	@ 0x98
 802715a:	9304      	str	r3, [sp, #16]
 802715c:	9309      	str	r3, [sp, #36]	@ 0x24
 802715e:	9312      	str	r3, [sp, #72]	@ 0x48
 8027160:	9317      	str	r3, [sp, #92]	@ 0x5c
 8027162:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027164:	4643      	mov	r3, r8
 8027166:	461d      	mov	r5, r3
 8027168:	f813 2b01 	ldrb.w	r2, [r3], #1
 802716c:	b10a      	cbz	r2, 8027172 <_vfprintf_r+0x10a>
 802716e:	2a25      	cmp	r2, #37	@ 0x25
 8027170:	d1f9      	bne.n	8027166 <_vfprintf_r+0xfe>
 8027172:	ebb5 0708 	subs.w	r7, r5, r8
 8027176:	d00d      	beq.n	8027194 <_vfprintf_r+0x12c>
 8027178:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802717a:	443b      	add	r3, r7
 802717c:	9328      	str	r3, [sp, #160]	@ 0xa0
 802717e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027180:	3301      	adds	r3, #1
 8027182:	2b07      	cmp	r3, #7
 8027184:	e9c4 8700 	strd	r8, r7, [r4]
 8027188:	9327      	str	r3, [sp, #156]	@ 0x9c
 802718a:	dc75      	bgt.n	8027278 <_vfprintf_r+0x210>
 802718c:	3408      	adds	r4, #8
 802718e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027190:	443b      	add	r3, r7
 8027192:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027194:	782b      	ldrb	r3, [r5, #0]
 8027196:	2b00      	cmp	r3, #0
 8027198:	f001 814f 	beq.w	802843a <_vfprintf_r+0x13d2>
 802719c:	2200      	movs	r2, #0
 802719e:	1c6b      	adds	r3, r5, #1
 80271a0:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 80271a4:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 80271a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80271aa:	4615      	mov	r5, r2
 80271ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80271b0:	9206      	str	r2, [sp, #24]
 80271b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80271b4:	9b06      	ldr	r3, [sp, #24]
 80271b6:	3b20      	subs	r3, #32
 80271b8:	2b5a      	cmp	r3, #90	@ 0x5a
 80271ba:	f200 85aa 	bhi.w	8027d12 <_vfprintf_r+0xcaa>
 80271be:	e8df f013 	tbh	[pc, r3, lsl #1]
 80271c2:	009d      	.short	0x009d
 80271c4:	05a805a8 	.word	0x05a805a8
 80271c8:	05a800a5 	.word	0x05a800a5
 80271cc:	05a805a8 	.word	0x05a805a8
 80271d0:	05a80085 	.word	0x05a80085
 80271d4:	00a805a8 	.word	0x00a805a8
 80271d8:	05a800b2 	.word	0x05a800b2
 80271dc:	00b400af 	.word	0x00b400af
 80271e0:	00ce05a8 	.word	0x00ce05a8
 80271e4:	00d100d1 	.word	0x00d100d1
 80271e8:	00d100d1 	.word	0x00d100d1
 80271ec:	00d100d1 	.word	0x00d100d1
 80271f0:	00d100d1 	.word	0x00d100d1
 80271f4:	05a800d1 	.word	0x05a800d1
 80271f8:	05a805a8 	.word	0x05a805a8
 80271fc:	05a805a8 	.word	0x05a805a8
 8027200:	05a805a8 	.word	0x05a805a8
 8027204:	05a80146 	.word	0x05a80146
 8027208:	011a0107 	.word	0x011a0107
 802720c:	01460146 	.word	0x01460146
 8027210:	05a80146 	.word	0x05a80146
 8027214:	05a805a8 	.word	0x05a805a8
 8027218:	00e205a8 	.word	0x00e205a8
 802721c:	05a805a8 	.word	0x05a805a8
 8027220:	05a804a3 	.word	0x05a804a3
 8027224:	05a805a8 	.word	0x05a805a8
 8027228:	05a804ed 	.word	0x05a804ed
 802722c:	05a8050e 	.word	0x05a8050e
 8027230:	053005a8 	.word	0x053005a8
 8027234:	05a805a8 	.word	0x05a805a8
 8027238:	05a805a8 	.word	0x05a805a8
 802723c:	05a805a8 	.word	0x05a805a8
 8027240:	05a805a8 	.word	0x05a805a8
 8027244:	05a80146 	.word	0x05a80146
 8027248:	011c0107 	.word	0x011c0107
 802724c:	01460146 	.word	0x01460146
 8027250:	00ed0146 	.word	0x00ed0146
 8027254:	0101011c 	.word	0x0101011c
 8027258:	00fa05a8 	.word	0x00fa05a8
 802725c:	048705a8 	.word	0x048705a8
 8027260:	04dc04a5 	.word	0x04dc04a5
 8027264:	05a80101 	.word	0x05a80101
 8027268:	009b04ed 	.word	0x009b04ed
 802726c:	05a80510 	.word	0x05a80510
 8027270:	006505a8 	.word	0x006505a8
 8027274:	009b05a8 	.word	0x009b05a8
 8027278:	9803      	ldr	r0, [sp, #12]
 802727a:	aa26      	add	r2, sp, #152	@ 0x98
 802727c:	4659      	mov	r1, fp
 802727e:	f001 f95f 	bl	8028540 <__sprint_r>
 8027282:	2800      	cmp	r0, #0
 8027284:	f040 814d 	bne.w	8027522 <_vfprintf_r+0x4ba>
 8027288:	ac29      	add	r4, sp, #164	@ 0xa4
 802728a:	e780      	b.n	802718e <_vfprintf_r+0x126>
 802728c:	4b42      	ldr	r3, [pc, #264]	@ (8027398 <_vfprintf_r+0x330>)
 802728e:	9319      	str	r3, [sp, #100]	@ 0x64
 8027290:	f015 0320 	ands.w	r3, r5, #32
 8027294:	f000 84c8 	beq.w	8027c28 <_vfprintf_r+0xbc0>
 8027298:	3607      	adds	r6, #7
 802729a:	f026 0307 	bic.w	r3, r6, #7
 802729e:	461a      	mov	r2, r3
 80272a0:	685f      	ldr	r7, [r3, #4]
 80272a2:	f852 6b08 	ldr.w	r6, [r2], #8
 80272a6:	9207      	str	r2, [sp, #28]
 80272a8:	07eb      	lsls	r3, r5, #31
 80272aa:	d50a      	bpl.n	80272c2 <_vfprintf_r+0x25a>
 80272ac:	ea56 0307 	orrs.w	r3, r6, r7
 80272b0:	d007      	beq.n	80272c2 <_vfprintf_r+0x25a>
 80272b2:	2330      	movs	r3, #48	@ 0x30
 80272b4:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 80272b8:	9b06      	ldr	r3, [sp, #24]
 80272ba:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80272be:	f045 0502 	orr.w	r5, r5, #2
 80272c2:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80272c6:	2302      	movs	r3, #2
 80272c8:	f000 bc2e 	b.w	8027b28 <_vfprintf_r+0xac0>
 80272cc:	9803      	ldr	r0, [sp, #12]
 80272ce:	f003 fd65 	bl	802ad9c <_localeconv_r>
 80272d2:	6843      	ldr	r3, [r0, #4]
 80272d4:	9317      	str	r3, [sp, #92]	@ 0x5c
 80272d6:	4618      	mov	r0, r3
 80272d8:	f7e8 ffe2 	bl	80102a0 <strlen>
 80272dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80272de:	9803      	ldr	r0, [sp, #12]
 80272e0:	f003 fd5c 	bl	802ad9c <_localeconv_r>
 80272e4:	6883      	ldr	r3, [r0, #8]
 80272e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80272e8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80272ea:	b12b      	cbz	r3, 80272f8 <_vfprintf_r+0x290>
 80272ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80272ee:	b11b      	cbz	r3, 80272f8 <_vfprintf_r+0x290>
 80272f0:	781b      	ldrb	r3, [r3, #0]
 80272f2:	b10b      	cbz	r3, 80272f8 <_vfprintf_r+0x290>
 80272f4:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 80272f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80272fa:	e757      	b.n	80271ac <_vfprintf_r+0x144>
 80272fc:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8027300:	2b00      	cmp	r3, #0
 8027302:	d1f9      	bne.n	80272f8 <_vfprintf_r+0x290>
 8027304:	2320      	movs	r3, #32
 8027306:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802730a:	e7f5      	b.n	80272f8 <_vfprintf_r+0x290>
 802730c:	f045 0501 	orr.w	r5, r5, #1
 8027310:	e7f2      	b.n	80272f8 <_vfprintf_r+0x290>
 8027312:	f856 3b04 	ldr.w	r3, [r6], #4
 8027316:	930e      	str	r3, [sp, #56]	@ 0x38
 8027318:	2b00      	cmp	r3, #0
 802731a:	daed      	bge.n	80272f8 <_vfprintf_r+0x290>
 802731c:	425b      	negs	r3, r3
 802731e:	930e      	str	r3, [sp, #56]	@ 0x38
 8027320:	f045 0504 	orr.w	r5, r5, #4
 8027324:	e7e8      	b.n	80272f8 <_vfprintf_r+0x290>
 8027326:	232b      	movs	r3, #43	@ 0x2b
 8027328:	e7ed      	b.n	8027306 <_vfprintf_r+0x29e>
 802732a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802732c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027330:	9206      	str	r2, [sp, #24]
 8027332:	2a2a      	cmp	r2, #42	@ 0x2a
 8027334:	d10f      	bne.n	8027356 <_vfprintf_r+0x2ee>
 8027336:	f856 2b04 	ldr.w	r2, [r6], #4
 802733a:	930c      	str	r3, [sp, #48]	@ 0x30
 802733c:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 8027340:	e7da      	b.n	80272f8 <_vfprintf_r+0x290>
 8027342:	fb01 2909 	mla	r9, r1, r9, r2
 8027346:	f813 2b01 	ldrb.w	r2, [r3], #1
 802734a:	9206      	str	r2, [sp, #24]
 802734c:	9a06      	ldr	r2, [sp, #24]
 802734e:	3a30      	subs	r2, #48	@ 0x30
 8027350:	2a09      	cmp	r2, #9
 8027352:	d9f6      	bls.n	8027342 <_vfprintf_r+0x2da>
 8027354:	e72d      	b.n	80271b2 <_vfprintf_r+0x14a>
 8027356:	f04f 0900 	mov.w	r9, #0
 802735a:	210a      	movs	r1, #10
 802735c:	e7f6      	b.n	802734c <_vfprintf_r+0x2e4>
 802735e:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8027362:	e7c9      	b.n	80272f8 <_vfprintf_r+0x290>
 8027364:	2200      	movs	r2, #0
 8027366:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027368:	920e      	str	r2, [sp, #56]	@ 0x38
 802736a:	210a      	movs	r1, #10
 802736c:	9a06      	ldr	r2, [sp, #24]
 802736e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8027370:	3a30      	subs	r2, #48	@ 0x30
 8027372:	fb01 2200 	mla	r2, r1, r0, r2
 8027376:	920e      	str	r2, [sp, #56]	@ 0x38
 8027378:	f813 2b01 	ldrb.w	r2, [r3], #1
 802737c:	9206      	str	r2, [sp, #24]
 802737e:	3a30      	subs	r2, #48	@ 0x30
 8027380:	2a09      	cmp	r2, #9
 8027382:	d9f3      	bls.n	802736c <_vfprintf_r+0x304>
 8027384:	e715      	b.n	80271b2 <_vfprintf_r+0x14a>
 8027386:	f045 0508 	orr.w	r5, r5, #8
 802738a:	e7b5      	b.n	80272f8 <_vfprintf_r+0x290>
 802738c:	f3af 8000 	nop.w
	...
 8027398:	080380cb 	.word	0x080380cb
 802739c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802739e:	781b      	ldrb	r3, [r3, #0]
 80273a0:	2b68      	cmp	r3, #104	@ 0x68
 80273a2:	bf01      	itttt	eq
 80273a4:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 80273a6:	3301      	addeq	r3, #1
 80273a8:	930c      	streq	r3, [sp, #48]	@ 0x30
 80273aa:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 80273ae:	bf18      	it	ne
 80273b0:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 80273b4:	e7a0      	b.n	80272f8 <_vfprintf_r+0x290>
 80273b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80273b8:	781b      	ldrb	r3, [r3, #0]
 80273ba:	2b6c      	cmp	r3, #108	@ 0x6c
 80273bc:	d105      	bne.n	80273ca <_vfprintf_r+0x362>
 80273be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80273c0:	3301      	adds	r3, #1
 80273c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80273c4:	f045 0520 	orr.w	r5, r5, #32
 80273c8:	e796      	b.n	80272f8 <_vfprintf_r+0x290>
 80273ca:	f045 0510 	orr.w	r5, r5, #16
 80273ce:	e793      	b.n	80272f8 <_vfprintf_r+0x290>
 80273d0:	4632      	mov	r2, r6
 80273d2:	f852 3b04 	ldr.w	r3, [r2], #4
 80273d6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 80273da:	2300      	movs	r3, #0
 80273dc:	9207      	str	r2, [sp, #28]
 80273de:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80273e2:	469a      	mov	sl, r3
 80273e4:	f04f 0901 	mov.w	r9, #1
 80273e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80273ea:	461f      	mov	r7, r3
 80273ec:	9308      	str	r3, [sp, #32]
 80273ee:	461e      	mov	r6, r3
 80273f0:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 80273f4:	e1da      	b.n	80277ac <_vfprintf_r+0x744>
 80273f6:	f045 0510 	orr.w	r5, r5, #16
 80273fa:	06af      	lsls	r7, r5, #26
 80273fc:	d512      	bpl.n	8027424 <_vfprintf_r+0x3bc>
 80273fe:	3607      	adds	r6, #7
 8027400:	f026 0307 	bic.w	r3, r6, #7
 8027404:	461a      	mov	r2, r3
 8027406:	685f      	ldr	r7, [r3, #4]
 8027408:	f852 6b08 	ldr.w	r6, [r2], #8
 802740c:	9207      	str	r2, [sp, #28]
 802740e:	2f00      	cmp	r7, #0
 8027410:	da06      	bge.n	8027420 <_vfprintf_r+0x3b8>
 8027412:	4276      	negs	r6, r6
 8027414:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8027418:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 802741c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8027420:	2301      	movs	r3, #1
 8027422:	e384      	b.n	8027b2e <_vfprintf_r+0xac6>
 8027424:	4633      	mov	r3, r6
 8027426:	06ee      	lsls	r6, r5, #27
 8027428:	f853 7b04 	ldr.w	r7, [r3], #4
 802742c:	9307      	str	r3, [sp, #28]
 802742e:	d502      	bpl.n	8027436 <_vfprintf_r+0x3ce>
 8027430:	463e      	mov	r6, r7
 8027432:	17ff      	asrs	r7, r7, #31
 8027434:	e7eb      	b.n	802740e <_vfprintf_r+0x3a6>
 8027436:	0668      	lsls	r0, r5, #25
 8027438:	d503      	bpl.n	8027442 <_vfprintf_r+0x3da>
 802743a:	b23e      	sxth	r6, r7
 802743c:	f347 37c0 	sbfx	r7, r7, #15, #1
 8027440:	e7e5      	b.n	802740e <_vfprintf_r+0x3a6>
 8027442:	05a9      	lsls	r1, r5, #22
 8027444:	d5f4      	bpl.n	8027430 <_vfprintf_r+0x3c8>
 8027446:	b27e      	sxtb	r6, r7
 8027448:	f347 17c0 	sbfx	r7, r7, #7, #1
 802744c:	e7df      	b.n	802740e <_vfprintf_r+0x3a6>
 802744e:	3607      	adds	r6, #7
 8027450:	f026 0307 	bic.w	r3, r6, #7
 8027454:	ecb3 7b02 	vldmia	r3!, {d7}
 8027458:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802745c:	9307      	str	r3, [sp, #28]
 802745e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027460:	931a      	str	r3, [sp, #104]	@ 0x68
 8027462:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027464:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8027468:	931b      	str	r3, [sp, #108]	@ 0x6c
 802746a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802746e:	4b85      	ldr	r3, [pc, #532]	@ (8027684 <_vfprintf_r+0x61c>)
 8027470:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8027474:	f7e9 fb72 	bl	8010b5c <__aeabi_dcmpun>
 8027478:	bb10      	cbnz	r0, 80274c0 <_vfprintf_r+0x458>
 802747a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802747e:	4b81      	ldr	r3, [pc, #516]	@ (8027684 <_vfprintf_r+0x61c>)
 8027480:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8027484:	f7e9 fb4c 	bl	8010b20 <__aeabi_dcmple>
 8027488:	b9d0      	cbnz	r0, 80274c0 <_vfprintf_r+0x458>
 802748a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802748e:	2200      	movs	r2, #0
 8027490:	2300      	movs	r3, #0
 8027492:	f7e9 fb3b 	bl	8010b0c <__aeabi_dcmplt>
 8027496:	b110      	cbz	r0, 802749e <_vfprintf_r+0x436>
 8027498:	232d      	movs	r3, #45	@ 0x2d
 802749a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802749e:	4a7a      	ldr	r2, [pc, #488]	@ (8027688 <_vfprintf_r+0x620>)
 80274a0:	4b7a      	ldr	r3, [pc, #488]	@ (802768c <_vfprintf_r+0x624>)
 80274a2:	9906      	ldr	r1, [sp, #24]
 80274a4:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 80274a8:	2947      	cmp	r1, #71	@ 0x47
 80274aa:	bfd4      	ite	le
 80274ac:	4690      	movle	r8, r2
 80274ae:	4698      	movgt	r8, r3
 80274b0:	f04f 0a00 	mov.w	sl, #0
 80274b4:	f04f 0903 	mov.w	r9, #3
 80274b8:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 80274bc:	f000 bff8 	b.w	80284b0 <_vfprintf_r+0x1448>
 80274c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80274c4:	4610      	mov	r0, r2
 80274c6:	4619      	mov	r1, r3
 80274c8:	f7e9 fb48 	bl	8010b5c <__aeabi_dcmpun>
 80274cc:	4682      	mov	sl, r0
 80274ce:	b140      	cbz	r0, 80274e2 <_vfprintf_r+0x47a>
 80274d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80274d2:	4a6f      	ldr	r2, [pc, #444]	@ (8027690 <_vfprintf_r+0x628>)
 80274d4:	2b00      	cmp	r3, #0
 80274d6:	bfbc      	itt	lt
 80274d8:	232d      	movlt	r3, #45	@ 0x2d
 80274da:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 80274de:	4b6d      	ldr	r3, [pc, #436]	@ (8027694 <_vfprintf_r+0x62c>)
 80274e0:	e7df      	b.n	80274a2 <_vfprintf_r+0x43a>
 80274e2:	9b06      	ldr	r3, [sp, #24]
 80274e4:	2b61      	cmp	r3, #97	@ 0x61
 80274e6:	d02e      	beq.n	8027546 <_vfprintf_r+0x4de>
 80274e8:	2b41      	cmp	r3, #65	@ 0x41
 80274ea:	d12e      	bne.n	802754a <_vfprintf_r+0x4e2>
 80274ec:	2358      	movs	r3, #88	@ 0x58
 80274ee:	2230      	movs	r2, #48	@ 0x30
 80274f0:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 80274f4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 80274f8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80274fc:	f045 0502 	orr.w	r5, r5, #2
 8027500:	f340 80ae 	ble.w	8027660 <_vfprintf_r+0x5f8>
 8027504:	9803      	ldr	r0, [sp, #12]
 8027506:	f109 0101 	add.w	r1, r9, #1
 802750a:	f004 fd0f 	bl	802bf2c <_malloc_r>
 802750e:	4680      	mov	r8, r0
 8027510:	2800      	cmp	r0, #0
 8027512:	f040 80aa 	bne.w	802766a <_vfprintf_r+0x602>
 8027516:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802751a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802751e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8027522:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8027526:	07d9      	lsls	r1, r3, #31
 8027528:	d407      	bmi.n	802753a <_vfprintf_r+0x4d2>
 802752a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802752e:	059a      	lsls	r2, r3, #22
 8027530:	d403      	bmi.n	802753a <_vfprintf_r+0x4d2>
 8027532:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8027536:	f003 fcde 	bl	802aef6 <__retarget_lock_release_recursive>
 802753a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802753e:	065b      	lsls	r3, r3, #25
 8027540:	f57f add6 	bpl.w	80270f0 <_vfprintf_r+0x88>
 8027544:	e5d1      	b.n	80270ea <_vfprintf_r+0x82>
 8027546:	2378      	movs	r3, #120	@ 0x78
 8027548:	e7d1      	b.n	80274ee <_vfprintf_r+0x486>
 802754a:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802754e:	f000 808e 	beq.w	802766e <_vfprintf_r+0x606>
 8027552:	9b06      	ldr	r3, [sp, #24]
 8027554:	f023 0320 	bic.w	r3, r3, #32
 8027558:	2b47      	cmp	r3, #71	@ 0x47
 802755a:	d105      	bne.n	8027568 <_vfprintf_r+0x500>
 802755c:	f1b9 0f00 	cmp.w	r9, #0
 8027560:	d102      	bne.n	8027568 <_vfprintf_r+0x500>
 8027562:	46ca      	mov	sl, r9
 8027564:	f04f 0901 	mov.w	r9, #1
 8027568:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802756c:	9311      	str	r3, [sp, #68]	@ 0x44
 802756e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027570:	2b00      	cmp	r3, #0
 8027572:	da7f      	bge.n	8027674 <_vfprintf_r+0x60c>
 8027574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027576:	9314      	str	r3, [sp, #80]	@ 0x50
 8027578:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802757a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802757e:	9315      	str	r3, [sp, #84]	@ 0x54
 8027580:	232d      	movs	r3, #45	@ 0x2d
 8027582:	931c      	str	r3, [sp, #112]	@ 0x70
 8027584:	9b06      	ldr	r3, [sp, #24]
 8027586:	f023 0320 	bic.w	r3, r3, #32
 802758a:	2b41      	cmp	r3, #65	@ 0x41
 802758c:	9308      	str	r3, [sp, #32]
 802758e:	f040 81e7 	bne.w	8027960 <_vfprintf_r+0x8f8>
 8027592:	a820      	add	r0, sp, #128	@ 0x80
 8027594:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8027598:	f003 fcd2 	bl	802af40 <frexp>
 802759c:	2200      	movs	r2, #0
 802759e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80275a2:	ec51 0b10 	vmov	r0, r1, d0
 80275a6:	f7e9 f83f 	bl	8010628 <__aeabi_dmul>
 80275aa:	4602      	mov	r2, r0
 80275ac:	460b      	mov	r3, r1
 80275ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80275b2:	2200      	movs	r2, #0
 80275b4:	2300      	movs	r3, #0
 80275b6:	f7e9 fa9f 	bl	8010af8 <__aeabi_dcmpeq>
 80275ba:	b108      	cbz	r0, 80275c0 <_vfprintf_r+0x558>
 80275bc:	2301      	movs	r3, #1
 80275be:	9320      	str	r3, [sp, #128]	@ 0x80
 80275c0:	4a35      	ldr	r2, [pc, #212]	@ (8027698 <_vfprintf_r+0x630>)
 80275c2:	4b36      	ldr	r3, [pc, #216]	@ (802769c <_vfprintf_r+0x634>)
 80275c4:	9906      	ldr	r1, [sp, #24]
 80275c6:	2961      	cmp	r1, #97	@ 0x61
 80275c8:	bf18      	it	ne
 80275ca:	461a      	movne	r2, r3
 80275cc:	9210      	str	r2, [sp, #64]	@ 0x40
 80275ce:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 80275d2:	4646      	mov	r6, r8
 80275d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80275d8:	4b31      	ldr	r3, [pc, #196]	@ (80276a0 <_vfprintf_r+0x638>)
 80275da:	2200      	movs	r2, #0
 80275dc:	f7e9 f824 	bl	8010628 <__aeabi_dmul>
 80275e0:	4602      	mov	r2, r0
 80275e2:	460b      	mov	r3, r1
 80275e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80275e8:	f7e9 face 	bl	8010b88 <__aeabi_d2iz>
 80275ec:	9013      	str	r0, [sp, #76]	@ 0x4c
 80275ee:	f7e8 ffb1 	bl	8010554 <__aeabi_i2d>
 80275f2:	4602      	mov	r2, r0
 80275f4:	460b      	mov	r3, r1
 80275f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80275fa:	f7e8 fe5d 	bl	80102b8 <__aeabi_dsub>
 80275fe:	4602      	mov	r2, r0
 8027600:	460b      	mov	r3, r1
 8027602:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8027606:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8027608:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802760a:	5c9b      	ldrb	r3, [r3, r2]
 802760c:	f806 3b01 	strb.w	r3, [r6], #1
 8027610:	1c7a      	adds	r2, r7, #1
 8027612:	d006      	beq.n	8027622 <_vfprintf_r+0x5ba>
 8027614:	1e7b      	subs	r3, r7, #1
 8027616:	931d      	str	r3, [sp, #116]	@ 0x74
 8027618:	2200      	movs	r2, #0
 802761a:	2300      	movs	r3, #0
 802761c:	f7e9 fa6c 	bl	8010af8 <__aeabi_dcmpeq>
 8027620:	b370      	cbz	r0, 8027680 <_vfprintf_r+0x618>
 8027622:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8027626:	4b1f      	ldr	r3, [pc, #124]	@ (80276a4 <_vfprintf_r+0x63c>)
 8027628:	2200      	movs	r2, #0
 802762a:	f7e9 fa8d 	bl	8010b48 <__aeabi_dcmpgt>
 802762e:	2800      	cmp	r0, #0
 8027630:	d13a      	bne.n	80276a8 <_vfprintf_r+0x640>
 8027632:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8027636:	4b1b      	ldr	r3, [pc, #108]	@ (80276a4 <_vfprintf_r+0x63c>)
 8027638:	2200      	movs	r2, #0
 802763a:	f7e9 fa5d 	bl	8010af8 <__aeabi_dcmpeq>
 802763e:	b110      	cbz	r0, 8027646 <_vfprintf_r+0x5de>
 8027640:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027642:	07db      	lsls	r3, r3, #31
 8027644:	d430      	bmi.n	80276a8 <_vfprintf_r+0x640>
 8027646:	4633      	mov	r3, r6
 8027648:	19f1      	adds	r1, r6, r7
 802764a:	2030      	movs	r0, #48	@ 0x30
 802764c:	1aca      	subs	r2, r1, r3
 802764e:	2a00      	cmp	r2, #0
 8027650:	f280 8183 	bge.w	802795a <_vfprintf_r+0x8f2>
 8027654:	1c7b      	adds	r3, r7, #1
 8027656:	3701      	adds	r7, #1
 8027658:	bfb8      	it	lt
 802765a:	2300      	movlt	r3, #0
 802765c:	441e      	add	r6, r3
 802765e:	e037      	b.n	80276d0 <_vfprintf_r+0x668>
 8027660:	f04f 0a00 	mov.w	sl, #0
 8027664:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8027668:	e77e      	b.n	8027568 <_vfprintf_r+0x500>
 802766a:	4682      	mov	sl, r0
 802766c:	e77c      	b.n	8027568 <_vfprintf_r+0x500>
 802766e:	f04f 0906 	mov.w	r9, #6
 8027672:	e779      	b.n	8027568 <_vfprintf_r+0x500>
 8027674:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8027678:	2300      	movs	r3, #0
 802767a:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 802767e:	e780      	b.n	8027582 <_vfprintf_r+0x51a>
 8027680:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8027682:	e7a7      	b.n	80275d4 <_vfprintf_r+0x56c>
 8027684:	7fefffff 	.word	0x7fefffff
 8027688:	080380bb 	.word	0x080380bb
 802768c:	080380bf 	.word	0x080380bf
 8027690:	080380c3 	.word	0x080380c3
 8027694:	080380c7 	.word	0x080380c7
 8027698:	080380cb 	.word	0x080380cb
 802769c:	080380dc 	.word	0x080380dc
 80276a0:	40300000 	.word	0x40300000
 80276a4:	3fe00000 	.word	0x3fe00000
 80276a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80276aa:	9624      	str	r6, [sp, #144]	@ 0x90
 80276ac:	7bd9      	ldrb	r1, [r3, #15]
 80276ae:	2030      	movs	r0, #48	@ 0x30
 80276b0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80276b2:	1e53      	subs	r3, r2, #1
 80276b4:	9324      	str	r3, [sp, #144]	@ 0x90
 80276b6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80276ba:	428b      	cmp	r3, r1
 80276bc:	f000 814a 	beq.w	8027954 <_vfprintf_r+0x8ec>
 80276c0:	2b39      	cmp	r3, #57	@ 0x39
 80276c2:	bf0b      	itete	eq
 80276c4:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 80276c6:	3301      	addne	r3, #1
 80276c8:	7a9b      	ldrbeq	r3, [r3, #10]
 80276ca:	b2db      	uxtbne	r3, r3
 80276cc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80276d0:	eba6 0308 	sub.w	r3, r6, r8
 80276d4:	9304      	str	r3, [sp, #16]
 80276d6:	9b08      	ldr	r3, [sp, #32]
 80276d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80276da:	2b47      	cmp	r3, #71	@ 0x47
 80276dc:	f040 8189 	bne.w	80279f2 <_vfprintf_r+0x98a>
 80276e0:	1cf1      	adds	r1, r6, #3
 80276e2:	db02      	blt.n	80276ea <_vfprintf_r+0x682>
 80276e4:	45b1      	cmp	r9, r6
 80276e6:	f280 81a7 	bge.w	8027a38 <_vfprintf_r+0x9d0>
 80276ea:	9b06      	ldr	r3, [sp, #24]
 80276ec:	3b02      	subs	r3, #2
 80276ee:	9306      	str	r3, [sp, #24]
 80276f0:	9906      	ldr	r1, [sp, #24]
 80276f2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80276f6:	f021 0120 	bic.w	r1, r1, #32
 80276fa:	2941      	cmp	r1, #65	@ 0x41
 80276fc:	bf08      	it	eq
 80276fe:	320f      	addeq	r2, #15
 8027700:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 8027704:	bf06      	itte	eq
 8027706:	b2d2      	uxtbeq	r2, r2
 8027708:	2101      	moveq	r1, #1
 802770a:	2100      	movne	r1, #0
 802770c:	2b00      	cmp	r3, #0
 802770e:	9320      	str	r3, [sp, #128]	@ 0x80
 8027710:	bfb8      	it	lt
 8027712:	f1c6 0301 	rsblt	r3, r6, #1
 8027716:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 802771a:	bfb4      	ite	lt
 802771c:	222d      	movlt	r2, #45	@ 0x2d
 802771e:	222b      	movge	r2, #43	@ 0x2b
 8027720:	2b09      	cmp	r3, #9
 8027722:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8027726:	f340 817a 	ble.w	8027a1e <_vfprintf_r+0x9b6>
 802772a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802772e:	270a      	movs	r7, #10
 8027730:	4602      	mov	r2, r0
 8027732:	fbb3 f6f7 	udiv	r6, r3, r7
 8027736:	fb07 3116 	mls	r1, r7, r6, r3
 802773a:	3130      	adds	r1, #48	@ 0x30
 802773c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8027740:	4619      	mov	r1, r3
 8027742:	2963      	cmp	r1, #99	@ 0x63
 8027744:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8027748:	4633      	mov	r3, r6
 802774a:	dcf1      	bgt.n	8027730 <_vfprintf_r+0x6c8>
 802774c:	3330      	adds	r3, #48	@ 0x30
 802774e:	1e91      	subs	r1, r2, #2
 8027750:	f800 3c01 	strb.w	r3, [r0, #-1]
 8027754:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8027758:	460b      	mov	r3, r1
 802775a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802775e:	4283      	cmp	r3, r0
 8027760:	f0c0 8158 	bcc.w	8027a14 <_vfprintf_r+0x9ac>
 8027764:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8027768:	1a9b      	subs	r3, r3, r2
 802776a:	4281      	cmp	r1, r0
 802776c:	bf88      	it	hi
 802776e:	2300      	movhi	r3, #0
 8027770:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8027774:	441a      	add	r2, r3
 8027776:	ab22      	add	r3, sp, #136	@ 0x88
 8027778:	1ad3      	subs	r3, r2, r3
 802777a:	9a04      	ldr	r2, [sp, #16]
 802777c:	9318      	str	r3, [sp, #96]	@ 0x60
 802777e:	2a01      	cmp	r2, #1
 8027780:	eb03 0902 	add.w	r9, r3, r2
 8027784:	dc01      	bgt.n	802778a <_vfprintf_r+0x722>
 8027786:	07ea      	lsls	r2, r5, #31
 8027788:	d501      	bpl.n	802778e <_vfprintf_r+0x726>
 802778a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802778c:	4499      	add	r9, r3
 802778e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8027792:	2700      	movs	r7, #0
 8027794:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8027798:	9311      	str	r3, [sp, #68]	@ 0x44
 802779a:	9708      	str	r7, [sp, #32]
 802779c:	463e      	mov	r6, r7
 802779e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80277a0:	2b00      	cmp	r3, #0
 80277a2:	f040 8191 	bne.w	8027ac8 <_vfprintf_r+0xa60>
 80277a6:	2300      	movs	r3, #0
 80277a8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80277aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80277ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80277ae:	454b      	cmp	r3, r9
 80277b0:	bfb8      	it	lt
 80277b2:	464b      	movlt	r3, r9
 80277b4:	9311      	str	r3, [sp, #68]	@ 0x44
 80277b6:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 80277ba:	b113      	cbz	r3, 80277c2 <_vfprintf_r+0x75a>
 80277bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80277be:	3301      	adds	r3, #1
 80277c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80277c2:	f015 0302 	ands.w	r3, r5, #2
 80277c6:	931c      	str	r3, [sp, #112]	@ 0x70
 80277c8:	bf1e      	ittt	ne
 80277ca:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 80277cc:	3302      	addne	r3, #2
 80277ce:	9311      	strne	r3, [sp, #68]	@ 0x44
 80277d0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 80277d4:	931d      	str	r3, [sp, #116]	@ 0x74
 80277d6:	d122      	bne.n	802781e <_vfprintf_r+0x7b6>
 80277d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80277da:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80277dc:	1a9b      	subs	r3, r3, r2
 80277de:	2b00      	cmp	r3, #0
 80277e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80277e2:	dd1c      	ble.n	802781e <_vfprintf_r+0x7b6>
 80277e4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80277e6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80277ea:	2810      	cmp	r0, #16
 80277ec:	489f      	ldr	r0, [pc, #636]	@ (8027a6c <_vfprintf_r+0xa04>)
 80277ee:	6020      	str	r0, [r4, #0]
 80277f0:	f102 0201 	add.w	r2, r2, #1
 80277f4:	f104 0108 	add.w	r1, r4, #8
 80277f8:	f300 8297 	bgt.w	8027d2a <_vfprintf_r+0xcc2>
 80277fc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80277fe:	6060      	str	r0, [r4, #4]
 8027800:	4403      	add	r3, r0
 8027802:	2a07      	cmp	r2, #7
 8027804:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8027808:	f340 82a4 	ble.w	8027d54 <_vfprintf_r+0xcec>
 802780c:	9803      	ldr	r0, [sp, #12]
 802780e:	aa26      	add	r2, sp, #152	@ 0x98
 8027810:	4659      	mov	r1, fp
 8027812:	f000 fe95 	bl	8028540 <__sprint_r>
 8027816:	2800      	cmp	r0, #0
 8027818:	f040 85ed 	bne.w	80283f6 <_vfprintf_r+0x138e>
 802781c:	ac29      	add	r4, sp, #164	@ 0xa4
 802781e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8027822:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027824:	b16a      	cbz	r2, 8027842 <_vfprintf_r+0x7da>
 8027826:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 802782a:	6022      	str	r2, [r4, #0]
 802782c:	2201      	movs	r2, #1
 802782e:	4413      	add	r3, r2
 8027830:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027832:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027834:	6062      	str	r2, [r4, #4]
 8027836:	4413      	add	r3, r2
 8027838:	2b07      	cmp	r3, #7
 802783a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802783c:	f300 828c 	bgt.w	8027d58 <_vfprintf_r+0xcf0>
 8027840:	3408      	adds	r4, #8
 8027842:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8027844:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027846:	b162      	cbz	r2, 8027862 <_vfprintf_r+0x7fa>
 8027848:	aa1f      	add	r2, sp, #124	@ 0x7c
 802784a:	6022      	str	r2, [r4, #0]
 802784c:	2202      	movs	r2, #2
 802784e:	4413      	add	r3, r2
 8027850:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027852:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027854:	6062      	str	r2, [r4, #4]
 8027856:	3301      	adds	r3, #1
 8027858:	2b07      	cmp	r3, #7
 802785a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802785c:	f300 8286 	bgt.w	8027d6c <_vfprintf_r+0xd04>
 8027860:	3408      	adds	r4, #8
 8027862:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027864:	2b80      	cmp	r3, #128	@ 0x80
 8027866:	d122      	bne.n	80278ae <_vfprintf_r+0x846>
 8027868:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802786a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802786c:	1a9b      	subs	r3, r3, r2
 802786e:	2b00      	cmp	r3, #0
 8027870:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027872:	dd1c      	ble.n	80278ae <_vfprintf_r+0x846>
 8027874:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8027876:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802787a:	2810      	cmp	r0, #16
 802787c:	487c      	ldr	r0, [pc, #496]	@ (8027a70 <_vfprintf_r+0xa08>)
 802787e:	6020      	str	r0, [r4, #0]
 8027880:	f102 0201 	add.w	r2, r2, #1
 8027884:	f104 0108 	add.w	r1, r4, #8
 8027888:	f300 827a 	bgt.w	8027d80 <_vfprintf_r+0xd18>
 802788c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802788e:	6060      	str	r0, [r4, #4]
 8027890:	4403      	add	r3, r0
 8027892:	2a07      	cmp	r2, #7
 8027894:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8027898:	f340 8287 	ble.w	8027daa <_vfprintf_r+0xd42>
 802789c:	9803      	ldr	r0, [sp, #12]
 802789e:	aa26      	add	r2, sp, #152	@ 0x98
 80278a0:	4659      	mov	r1, fp
 80278a2:	f000 fe4d 	bl	8028540 <__sprint_r>
 80278a6:	2800      	cmp	r0, #0
 80278a8:	f040 85a5 	bne.w	80283f6 <_vfprintf_r+0x138e>
 80278ac:	ac29      	add	r4, sp, #164	@ 0xa4
 80278ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80278b0:	eba3 0309 	sub.w	r3, r3, r9
 80278b4:	2b00      	cmp	r3, #0
 80278b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80278b8:	dd1c      	ble.n	80278f4 <_vfprintf_r+0x88c>
 80278ba:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80278bc:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80278c0:	2810      	cmp	r0, #16
 80278c2:	486b      	ldr	r0, [pc, #428]	@ (8027a70 <_vfprintf_r+0xa08>)
 80278c4:	6020      	str	r0, [r4, #0]
 80278c6:	f102 0201 	add.w	r2, r2, #1
 80278ca:	f104 0108 	add.w	r1, r4, #8
 80278ce:	f300 826e 	bgt.w	8027dae <_vfprintf_r+0xd46>
 80278d2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80278d4:	6060      	str	r0, [r4, #4]
 80278d6:	4403      	add	r3, r0
 80278d8:	2a07      	cmp	r2, #7
 80278da:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80278de:	f340 827b 	ble.w	8027dd8 <_vfprintf_r+0xd70>
 80278e2:	9803      	ldr	r0, [sp, #12]
 80278e4:	aa26      	add	r2, sp, #152	@ 0x98
 80278e6:	4659      	mov	r1, fp
 80278e8:	f000 fe2a 	bl	8028540 <__sprint_r>
 80278ec:	2800      	cmp	r0, #0
 80278ee:	f040 8582 	bne.w	80283f6 <_vfprintf_r+0x138e>
 80278f2:	ac29      	add	r4, sp, #164	@ 0xa4
 80278f4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80278f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80278f8:	05e8      	lsls	r0, r5, #23
 80278fa:	f100 8273 	bmi.w	8027de4 <_vfprintf_r+0xd7c>
 80278fe:	444b      	add	r3, r9
 8027900:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027902:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027904:	3301      	adds	r3, #1
 8027906:	2b07      	cmp	r3, #7
 8027908:	e9c4 8900 	strd	r8, r9, [r4]
 802790c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802790e:	f300 82af 	bgt.w	8027e70 <_vfprintf_r+0xe08>
 8027912:	3408      	adds	r4, #8
 8027914:	0768      	lsls	r0, r5, #29
 8027916:	f100 8550 	bmi.w	80283ba <_vfprintf_r+0x1352>
 802791a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802791e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8027920:	428a      	cmp	r2, r1
 8027922:	bfac      	ite	ge
 8027924:	189b      	addge	r3, r3, r2
 8027926:	185b      	addlt	r3, r3, r1
 8027928:	930f      	str	r3, [sp, #60]	@ 0x3c
 802792a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802792c:	b13b      	cbz	r3, 802793e <_vfprintf_r+0x8d6>
 802792e:	9803      	ldr	r0, [sp, #12]
 8027930:	aa26      	add	r2, sp, #152	@ 0x98
 8027932:	4659      	mov	r1, fp
 8027934:	f000 fe04 	bl	8028540 <__sprint_r>
 8027938:	2800      	cmp	r0, #0
 802793a:	f040 855c 	bne.w	80283f6 <_vfprintf_r+0x138e>
 802793e:	2300      	movs	r3, #0
 8027940:	9327      	str	r3, [sp, #156]	@ 0x9c
 8027942:	f1ba 0f00 	cmp.w	sl, #0
 8027946:	f040 8572 	bne.w	802842e <_vfprintf_r+0x13c6>
 802794a:	9e07      	ldr	r6, [sp, #28]
 802794c:	ac29      	add	r4, sp, #164	@ 0xa4
 802794e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8027952:	e407      	b.n	8027164 <_vfprintf_r+0xfc>
 8027954:	f802 0c01 	strb.w	r0, [r2, #-1]
 8027958:	e6aa      	b.n	80276b0 <_vfprintf_r+0x648>
 802795a:	f803 0b01 	strb.w	r0, [r3], #1
 802795e:	e675      	b.n	802764c <_vfprintf_r+0x5e4>
 8027960:	9b08      	ldr	r3, [sp, #32]
 8027962:	2b46      	cmp	r3, #70	@ 0x46
 8027964:	d005      	beq.n	8027972 <_vfprintf_r+0x90a>
 8027966:	2b45      	cmp	r3, #69	@ 0x45
 8027968:	d11a      	bne.n	80279a0 <_vfprintf_r+0x938>
 802796a:	f109 0601 	add.w	r6, r9, #1
 802796e:	2102      	movs	r1, #2
 8027970:	e001      	b.n	8027976 <_vfprintf_r+0x90e>
 8027972:	464e      	mov	r6, r9
 8027974:	2103      	movs	r1, #3
 8027976:	ab24      	add	r3, sp, #144	@ 0x90
 8027978:	9301      	str	r3, [sp, #4]
 802797a:	ab21      	add	r3, sp, #132	@ 0x84
 802797c:	9300      	str	r3, [sp, #0]
 802797e:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8027982:	ab20      	add	r3, sp, #128	@ 0x80
 8027984:	9803      	ldr	r0, [sp, #12]
 8027986:	4632      	mov	r2, r6
 8027988:	f003 fbb6 	bl	802b0f8 <_dtoa_r>
 802798c:	9b08      	ldr	r3, [sp, #32]
 802798e:	2b47      	cmp	r3, #71	@ 0x47
 8027990:	4680      	mov	r8, r0
 8027992:	d119      	bne.n	80279c8 <_vfprintf_r+0x960>
 8027994:	07e8      	lsls	r0, r5, #31
 8027996:	d405      	bmi.n	80279a4 <_vfprintf_r+0x93c>
 8027998:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802799a:	eba3 0308 	sub.w	r3, r3, r8
 802799e:	e699      	b.n	80276d4 <_vfprintf_r+0x66c>
 80279a0:	464e      	mov	r6, r9
 80279a2:	e7e4      	b.n	802796e <_vfprintf_r+0x906>
 80279a4:	eb08 0706 	add.w	r7, r8, r6
 80279a8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 80279ac:	2200      	movs	r2, #0
 80279ae:	2300      	movs	r3, #0
 80279b0:	f7e9 f8a2 	bl	8010af8 <__aeabi_dcmpeq>
 80279b4:	b100      	cbz	r0, 80279b8 <_vfprintf_r+0x950>
 80279b6:	9724      	str	r7, [sp, #144]	@ 0x90
 80279b8:	2230      	movs	r2, #48	@ 0x30
 80279ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80279bc:	429f      	cmp	r7, r3
 80279be:	d9eb      	bls.n	8027998 <_vfprintf_r+0x930>
 80279c0:	1c59      	adds	r1, r3, #1
 80279c2:	9124      	str	r1, [sp, #144]	@ 0x90
 80279c4:	701a      	strb	r2, [r3, #0]
 80279c6:	e7f8      	b.n	80279ba <_vfprintf_r+0x952>
 80279c8:	9b08      	ldr	r3, [sp, #32]
 80279ca:	2b46      	cmp	r3, #70	@ 0x46
 80279cc:	eb00 0706 	add.w	r7, r0, r6
 80279d0:	d1ea      	bne.n	80279a8 <_vfprintf_r+0x940>
 80279d2:	7803      	ldrb	r3, [r0, #0]
 80279d4:	2b30      	cmp	r3, #48	@ 0x30
 80279d6:	d109      	bne.n	80279ec <_vfprintf_r+0x984>
 80279d8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 80279dc:	2200      	movs	r2, #0
 80279de:	2300      	movs	r3, #0
 80279e0:	f7e9 f88a 	bl	8010af8 <__aeabi_dcmpeq>
 80279e4:	b910      	cbnz	r0, 80279ec <_vfprintf_r+0x984>
 80279e6:	f1c6 0601 	rsb	r6, r6, #1
 80279ea:	9620      	str	r6, [sp, #128]	@ 0x80
 80279ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80279ee:	441f      	add	r7, r3
 80279f0:	e7da      	b.n	80279a8 <_vfprintf_r+0x940>
 80279f2:	9b08      	ldr	r3, [sp, #32]
 80279f4:	2b46      	cmp	r3, #70	@ 0x46
 80279f6:	f47f ae7b 	bne.w	80276f0 <_vfprintf_r+0x688>
 80279fa:	f005 0301 	and.w	r3, r5, #1
 80279fe:	2e00      	cmp	r6, #0
 8027a00:	ea43 0309 	orr.w	r3, r3, r9
 8027a04:	dd25      	ble.n	8027a52 <_vfprintf_r+0x9ea>
 8027a06:	b37b      	cbz	r3, 8027a68 <_vfprintf_r+0xa00>
 8027a08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027a0a:	18f3      	adds	r3, r6, r3
 8027a0c:	4499      	add	r9, r3
 8027a0e:	2366      	movs	r3, #102	@ 0x66
 8027a10:	9306      	str	r3, [sp, #24]
 8027a12:	e033      	b.n	8027a7c <_vfprintf_r+0xa14>
 8027a14:	f813 7b01 	ldrb.w	r7, [r3], #1
 8027a18:	f806 7f01 	strb.w	r7, [r6, #1]!
 8027a1c:	e69f      	b.n	802775e <_vfprintf_r+0x6f6>
 8027a1e:	b941      	cbnz	r1, 8027a32 <_vfprintf_r+0x9ca>
 8027a20:	2230      	movs	r2, #48	@ 0x30
 8027a22:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8027a26:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8027a2a:	3330      	adds	r3, #48	@ 0x30
 8027a2c:	f802 3b01 	strb.w	r3, [r2], #1
 8027a30:	e6a1      	b.n	8027776 <_vfprintf_r+0x70e>
 8027a32:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8027a36:	e7f8      	b.n	8027a2a <_vfprintf_r+0x9c2>
 8027a38:	9b04      	ldr	r3, [sp, #16]
 8027a3a:	42b3      	cmp	r3, r6
 8027a3c:	dd0d      	ble.n	8027a5a <_vfprintf_r+0x9f2>
 8027a3e:	9b04      	ldr	r3, [sp, #16]
 8027a40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027a42:	2e00      	cmp	r6, #0
 8027a44:	eb03 0902 	add.w	r9, r3, r2
 8027a48:	dc0c      	bgt.n	8027a64 <_vfprintf_r+0x9fc>
 8027a4a:	f1c6 0301 	rsb	r3, r6, #1
 8027a4e:	4499      	add	r9, r3
 8027a50:	e008      	b.n	8027a64 <_vfprintf_r+0x9fc>
 8027a52:	b17b      	cbz	r3, 8027a74 <_vfprintf_r+0xa0c>
 8027a54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027a56:	3301      	adds	r3, #1
 8027a58:	e7d8      	b.n	8027a0c <_vfprintf_r+0x9a4>
 8027a5a:	07eb      	lsls	r3, r5, #31
 8027a5c:	d521      	bpl.n	8027aa2 <_vfprintf_r+0xa3a>
 8027a5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027a60:	eb06 0903 	add.w	r9, r6, r3
 8027a64:	2367      	movs	r3, #103	@ 0x67
 8027a66:	e7d3      	b.n	8027a10 <_vfprintf_r+0x9a8>
 8027a68:	46b1      	mov	r9, r6
 8027a6a:	e7d0      	b.n	8027a0e <_vfprintf_r+0x9a6>
 8027a6c:	080380ff 	.word	0x080380ff
 8027a70:	080380ef 	.word	0x080380ef
 8027a74:	2366      	movs	r3, #102	@ 0x66
 8027a76:	9306      	str	r3, [sp, #24]
 8027a78:	f04f 0901 	mov.w	r9, #1
 8027a7c:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8027a80:	9308      	str	r3, [sp, #32]
 8027a82:	d01f      	beq.n	8027ac4 <_vfprintf_r+0xa5c>
 8027a84:	2700      	movs	r7, #0
 8027a86:	2e00      	cmp	r6, #0
 8027a88:	9708      	str	r7, [sp, #32]
 8027a8a:	f77f ae88 	ble.w	802779e <_vfprintf_r+0x736>
 8027a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027a90:	781b      	ldrb	r3, [r3, #0]
 8027a92:	2bff      	cmp	r3, #255	@ 0xff
 8027a94:	d107      	bne.n	8027aa6 <_vfprintf_r+0xa3e>
 8027a96:	9b08      	ldr	r3, [sp, #32]
 8027a98:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8027a9a:	443b      	add	r3, r7
 8027a9c:	fb02 9903 	mla	r9, r2, r3, r9
 8027aa0:	e67d      	b.n	802779e <_vfprintf_r+0x736>
 8027aa2:	46b1      	mov	r9, r6
 8027aa4:	e7de      	b.n	8027a64 <_vfprintf_r+0x9fc>
 8027aa6:	42b3      	cmp	r3, r6
 8027aa8:	daf5      	bge.n	8027a96 <_vfprintf_r+0xa2e>
 8027aaa:	1af6      	subs	r6, r6, r3
 8027aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027aae:	785b      	ldrb	r3, [r3, #1]
 8027ab0:	b133      	cbz	r3, 8027ac0 <_vfprintf_r+0xa58>
 8027ab2:	9b08      	ldr	r3, [sp, #32]
 8027ab4:	3301      	adds	r3, #1
 8027ab6:	9308      	str	r3, [sp, #32]
 8027ab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027aba:	3301      	adds	r3, #1
 8027abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8027abe:	e7e6      	b.n	8027a8e <_vfprintf_r+0xa26>
 8027ac0:	3701      	adds	r7, #1
 8027ac2:	e7e4      	b.n	8027a8e <_vfprintf_r+0xa26>
 8027ac4:	9f08      	ldr	r7, [sp, #32]
 8027ac6:	e66a      	b.n	802779e <_vfprintf_r+0x736>
 8027ac8:	232d      	movs	r3, #45	@ 0x2d
 8027aca:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8027ace:	e66a      	b.n	80277a6 <_vfprintf_r+0x73e>
 8027ad0:	06af      	lsls	r7, r5, #26
 8027ad2:	d507      	bpl.n	8027ae4 <_vfprintf_r+0xa7c>
 8027ad4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027ad6:	6833      	ldr	r3, [r6, #0]
 8027ad8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8027ada:	17d2      	asrs	r2, r2, #31
 8027adc:	e9c3 1200 	strd	r1, r2, [r3]
 8027ae0:	3604      	adds	r6, #4
 8027ae2:	e734      	b.n	802794e <_vfprintf_r+0x8e6>
 8027ae4:	06e8      	lsls	r0, r5, #27
 8027ae6:	d503      	bpl.n	8027af0 <_vfprintf_r+0xa88>
 8027ae8:	6833      	ldr	r3, [r6, #0]
 8027aea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027aec:	601a      	str	r2, [r3, #0]
 8027aee:	e7f7      	b.n	8027ae0 <_vfprintf_r+0xa78>
 8027af0:	0669      	lsls	r1, r5, #25
 8027af2:	d503      	bpl.n	8027afc <_vfprintf_r+0xa94>
 8027af4:	6833      	ldr	r3, [r6, #0]
 8027af6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027af8:	801a      	strh	r2, [r3, #0]
 8027afa:	e7f1      	b.n	8027ae0 <_vfprintf_r+0xa78>
 8027afc:	05aa      	lsls	r2, r5, #22
 8027afe:	d5f3      	bpl.n	8027ae8 <_vfprintf_r+0xa80>
 8027b00:	6833      	ldr	r3, [r6, #0]
 8027b02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027b04:	701a      	strb	r2, [r3, #0]
 8027b06:	e7eb      	b.n	8027ae0 <_vfprintf_r+0xa78>
 8027b08:	f045 0510 	orr.w	r5, r5, #16
 8027b0c:	f015 0320 	ands.w	r3, r5, #32
 8027b10:	d020      	beq.n	8027b54 <_vfprintf_r+0xaec>
 8027b12:	3607      	adds	r6, #7
 8027b14:	f026 0307 	bic.w	r3, r6, #7
 8027b18:	461a      	mov	r2, r3
 8027b1a:	685f      	ldr	r7, [r3, #4]
 8027b1c:	f852 6b08 	ldr.w	r6, [r2], #8
 8027b20:	9207      	str	r2, [sp, #28]
 8027b22:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8027b26:	2300      	movs	r3, #0
 8027b28:	2200      	movs	r2, #0
 8027b2a:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8027b2e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8027b32:	f000 8491 	beq.w	8028458 <_vfprintf_r+0x13f0>
 8027b36:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8027b3a:	9208      	str	r2, [sp, #32]
 8027b3c:	ea56 0207 	orrs.w	r2, r6, r7
 8027b40:	f040 848f 	bne.w	8028462 <_vfprintf_r+0x13fa>
 8027b44:	f1b9 0f00 	cmp.w	r9, #0
 8027b48:	f000 80db 	beq.w	8027d02 <_vfprintf_r+0xc9a>
 8027b4c:	2b01      	cmp	r3, #1
 8027b4e:	f040 848b 	bne.w	8028468 <_vfprintf_r+0x1400>
 8027b52:	e083      	b.n	8027c5c <_vfprintf_r+0xbf4>
 8027b54:	4632      	mov	r2, r6
 8027b56:	f015 0710 	ands.w	r7, r5, #16
 8027b5a:	f852 6b04 	ldr.w	r6, [r2], #4
 8027b5e:	9207      	str	r2, [sp, #28]
 8027b60:	d001      	beq.n	8027b66 <_vfprintf_r+0xafe>
 8027b62:	461f      	mov	r7, r3
 8027b64:	e7dd      	b.n	8027b22 <_vfprintf_r+0xaba>
 8027b66:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8027b6a:	d001      	beq.n	8027b70 <_vfprintf_r+0xb08>
 8027b6c:	b2b6      	uxth	r6, r6
 8027b6e:	e7d8      	b.n	8027b22 <_vfprintf_r+0xaba>
 8027b70:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8027b74:	d0d5      	beq.n	8027b22 <_vfprintf_r+0xaba>
 8027b76:	b2f6      	uxtb	r6, r6
 8027b78:	e7f3      	b.n	8027b62 <_vfprintf_r+0xafa>
 8027b7a:	4633      	mov	r3, r6
 8027b7c:	2278      	movs	r2, #120	@ 0x78
 8027b7e:	f853 6b04 	ldr.w	r6, [r3], #4
 8027b82:	9307      	str	r3, [sp, #28]
 8027b84:	f647 0330 	movw	r3, #30768	@ 0x7830
 8027b88:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8027b8c:	4b93      	ldr	r3, [pc, #588]	@ (8027ddc <_vfprintf_r+0xd74>)
 8027b8e:	9319      	str	r3, [sp, #100]	@ 0x64
 8027b90:	2700      	movs	r7, #0
 8027b92:	f045 0502 	orr.w	r5, r5, #2
 8027b96:	2302      	movs	r3, #2
 8027b98:	9206      	str	r2, [sp, #24]
 8027b9a:	e7c5      	b.n	8027b28 <_vfprintf_r+0xac0>
 8027b9c:	4633      	mov	r3, r6
 8027b9e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8027ba2:	f853 8b04 	ldr.w	r8, [r3], #4
 8027ba6:	9307      	str	r3, [sp, #28]
 8027ba8:	f04f 0600 	mov.w	r6, #0
 8027bac:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8027bb0:	d00f      	beq.n	8027bd2 <_vfprintf_r+0xb6a>
 8027bb2:	464a      	mov	r2, r9
 8027bb4:	4631      	mov	r1, r6
 8027bb6:	4640      	mov	r0, r8
 8027bb8:	f7e8 fb22 	bl	8010200 <memchr>
 8027bbc:	4682      	mov	sl, r0
 8027bbe:	2800      	cmp	r0, #0
 8027bc0:	f43f ac7a 	beq.w	80274b8 <_vfprintf_r+0x450>
 8027bc4:	eba0 0908 	sub.w	r9, r0, r8
 8027bc8:	46b2      	mov	sl, r6
 8027bca:	9610      	str	r6, [sp, #64]	@ 0x40
 8027bcc:	4637      	mov	r7, r6
 8027bce:	9608      	str	r6, [sp, #32]
 8027bd0:	e5ec      	b.n	80277ac <_vfprintf_r+0x744>
 8027bd2:	4640      	mov	r0, r8
 8027bd4:	f7e8 fb64 	bl	80102a0 <strlen>
 8027bd8:	46b2      	mov	sl, r6
 8027bda:	4681      	mov	r9, r0
 8027bdc:	e46c      	b.n	80274b8 <_vfprintf_r+0x450>
 8027bde:	f045 0510 	orr.w	r5, r5, #16
 8027be2:	f015 0320 	ands.w	r3, r5, #32
 8027be6:	d009      	beq.n	8027bfc <_vfprintf_r+0xb94>
 8027be8:	3607      	adds	r6, #7
 8027bea:	f026 0307 	bic.w	r3, r6, #7
 8027bee:	461a      	mov	r2, r3
 8027bf0:	685f      	ldr	r7, [r3, #4]
 8027bf2:	f852 6b08 	ldr.w	r6, [r2], #8
 8027bf6:	9207      	str	r2, [sp, #28]
 8027bf8:	2301      	movs	r3, #1
 8027bfa:	e795      	b.n	8027b28 <_vfprintf_r+0xac0>
 8027bfc:	4632      	mov	r2, r6
 8027bfe:	f015 0710 	ands.w	r7, r5, #16
 8027c02:	f852 6b04 	ldr.w	r6, [r2], #4
 8027c06:	9207      	str	r2, [sp, #28]
 8027c08:	d001      	beq.n	8027c0e <_vfprintf_r+0xba6>
 8027c0a:	461f      	mov	r7, r3
 8027c0c:	e7f4      	b.n	8027bf8 <_vfprintf_r+0xb90>
 8027c0e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8027c12:	d001      	beq.n	8027c18 <_vfprintf_r+0xbb0>
 8027c14:	b2b6      	uxth	r6, r6
 8027c16:	e7ef      	b.n	8027bf8 <_vfprintf_r+0xb90>
 8027c18:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8027c1c:	d0ec      	beq.n	8027bf8 <_vfprintf_r+0xb90>
 8027c1e:	b2f6      	uxtb	r6, r6
 8027c20:	e7f3      	b.n	8027c0a <_vfprintf_r+0xba2>
 8027c22:	4b6f      	ldr	r3, [pc, #444]	@ (8027de0 <_vfprintf_r+0xd78>)
 8027c24:	f7ff bb33 	b.w	802728e <_vfprintf_r+0x226>
 8027c28:	4632      	mov	r2, r6
 8027c2a:	f015 0710 	ands.w	r7, r5, #16
 8027c2e:	f852 6b04 	ldr.w	r6, [r2], #4
 8027c32:	9207      	str	r2, [sp, #28]
 8027c34:	d002      	beq.n	8027c3c <_vfprintf_r+0xbd4>
 8027c36:	461f      	mov	r7, r3
 8027c38:	f7ff bb36 	b.w	80272a8 <_vfprintf_r+0x240>
 8027c3c:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8027c40:	d002      	beq.n	8027c48 <_vfprintf_r+0xbe0>
 8027c42:	b2b6      	uxth	r6, r6
 8027c44:	f7ff bb30 	b.w	80272a8 <_vfprintf_r+0x240>
 8027c48:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8027c4c:	f43f ab2c 	beq.w	80272a8 <_vfprintf_r+0x240>
 8027c50:	b2f6      	uxtb	r6, r6
 8027c52:	e7f0      	b.n	8027c36 <_vfprintf_r+0xbce>
 8027c54:	2e0a      	cmp	r6, #10
 8027c56:	f177 0300 	sbcs.w	r3, r7, #0
 8027c5a:	d207      	bcs.n	8027c6c <_vfprintf_r+0xc04>
 8027c5c:	3630      	adds	r6, #48	@ 0x30
 8027c5e:	b2f6      	uxtb	r6, r6
 8027c60:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8027c64:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 8027c68:	f000 bc1a 	b.w	80284a0 <_vfprintf_r+0x1438>
 8027c6c:	2300      	movs	r3, #0
 8027c6e:	9304      	str	r3, [sp, #16]
 8027c70:	9b08      	ldr	r3, [sp, #32]
 8027c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8027c76:	ad52      	add	r5, sp, #328	@ 0x148
 8027c78:	9310      	str	r3, [sp, #64]	@ 0x40
 8027c7a:	220a      	movs	r2, #10
 8027c7c:	2300      	movs	r3, #0
 8027c7e:	4630      	mov	r0, r6
 8027c80:	4639      	mov	r1, r7
 8027c82:	f7e9 f869 	bl	8010d58 <__aeabi_uldivmod>
 8027c86:	9b04      	ldr	r3, [sp, #16]
 8027c88:	9011      	str	r0, [sp, #68]	@ 0x44
 8027c8a:	3301      	adds	r3, #1
 8027c8c:	9304      	str	r3, [sp, #16]
 8027c8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027c90:	3230      	adds	r2, #48	@ 0x30
 8027c92:	468a      	mov	sl, r1
 8027c94:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 8027c98:	f805 2c01 	strb.w	r2, [r5, #-1]
 8027c9c:	b1d3      	cbz	r3, 8027cd4 <_vfprintf_r+0xc6c>
 8027c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027ca0:	9a04      	ldr	r2, [sp, #16]
 8027ca2:	781b      	ldrb	r3, [r3, #0]
 8027ca4:	429a      	cmp	r2, r3
 8027ca6:	d115      	bne.n	8027cd4 <_vfprintf_r+0xc6c>
 8027ca8:	2aff      	cmp	r2, #255	@ 0xff
 8027caa:	d013      	beq.n	8027cd4 <_vfprintf_r+0xc6c>
 8027cac:	2e0a      	cmp	r6, #10
 8027cae:	f177 0300 	sbcs.w	r3, r7, #0
 8027cb2:	d30f      	bcc.n	8027cd4 <_vfprintf_r+0xc6c>
 8027cb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8027cb6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8027cb8:	eba8 0803 	sub.w	r8, r8, r3
 8027cbc:	461a      	mov	r2, r3
 8027cbe:	4640      	mov	r0, r8
 8027cc0:	f001 ff25 	bl	8029b0e <strncpy>
 8027cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027cc6:	785b      	ldrb	r3, [r3, #1]
 8027cc8:	b11b      	cbz	r3, 8027cd2 <_vfprintf_r+0xc6a>
 8027cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027ccc:	3301      	adds	r3, #1
 8027cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8027cd0:	2300      	movs	r3, #0
 8027cd2:	9304      	str	r3, [sp, #16]
 8027cd4:	2e0a      	cmp	r6, #10
 8027cd6:	f177 0700 	sbcs.w	r7, r7, #0
 8027cda:	f0c0 83e1 	bcc.w	80284a0 <_vfprintf_r+0x1438>
 8027cde:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8027ce0:	4657      	mov	r7, sl
 8027ce2:	4645      	mov	r5, r8
 8027ce4:	e7c9      	b.n	8027c7a <_vfprintf_r+0xc12>
 8027ce6:	f006 030f 	and.w	r3, r6, #15
 8027cea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8027cec:	0936      	lsrs	r6, r6, #4
 8027cee:	5cd3      	ldrb	r3, [r2, r3]
 8027cf0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8027cf4:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8027cf8:	093f      	lsrs	r7, r7, #4
 8027cfa:	ea56 0307 	orrs.w	r3, r6, r7
 8027cfe:	d1f2      	bne.n	8027ce6 <_vfprintf_r+0xc7e>
 8027d00:	e3ce      	b.n	80284a0 <_vfprintf_r+0x1438>
 8027d02:	b91b      	cbnz	r3, 8027d0c <_vfprintf_r+0xca4>
 8027d04:	07ed      	lsls	r5, r5, #31
 8027d06:	d501      	bpl.n	8027d0c <_vfprintf_r+0xca4>
 8027d08:	2630      	movs	r6, #48	@ 0x30
 8027d0a:	e7a9      	b.n	8027c60 <_vfprintf_r+0xbf8>
 8027d0c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8027d10:	e3c6      	b.n	80284a0 <_vfprintf_r+0x1438>
 8027d12:	9b06      	ldr	r3, [sp, #24]
 8027d14:	2b00      	cmp	r3, #0
 8027d16:	f000 8390 	beq.w	802843a <_vfprintf_r+0x13d2>
 8027d1a:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8027d1e:	2300      	movs	r3, #0
 8027d20:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8027d24:	9607      	str	r6, [sp, #28]
 8027d26:	f7ff bb5c 	b.w	80273e2 <_vfprintf_r+0x37a>
 8027d2a:	2010      	movs	r0, #16
 8027d2c:	4403      	add	r3, r0
 8027d2e:	2a07      	cmp	r2, #7
 8027d30:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8027d34:	6060      	str	r0, [r4, #4]
 8027d36:	dd08      	ble.n	8027d4a <_vfprintf_r+0xce2>
 8027d38:	9803      	ldr	r0, [sp, #12]
 8027d3a:	aa26      	add	r2, sp, #152	@ 0x98
 8027d3c:	4659      	mov	r1, fp
 8027d3e:	f000 fbff 	bl	8028540 <__sprint_r>
 8027d42:	2800      	cmp	r0, #0
 8027d44:	f040 8357 	bne.w	80283f6 <_vfprintf_r+0x138e>
 8027d48:	a929      	add	r1, sp, #164	@ 0xa4
 8027d4a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027d4c:	3b10      	subs	r3, #16
 8027d4e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027d50:	460c      	mov	r4, r1
 8027d52:	e547      	b.n	80277e4 <_vfprintf_r+0x77c>
 8027d54:	460c      	mov	r4, r1
 8027d56:	e562      	b.n	802781e <_vfprintf_r+0x7b6>
 8027d58:	9803      	ldr	r0, [sp, #12]
 8027d5a:	aa26      	add	r2, sp, #152	@ 0x98
 8027d5c:	4659      	mov	r1, fp
 8027d5e:	f000 fbef 	bl	8028540 <__sprint_r>
 8027d62:	2800      	cmp	r0, #0
 8027d64:	f040 8347 	bne.w	80283f6 <_vfprintf_r+0x138e>
 8027d68:	ac29      	add	r4, sp, #164	@ 0xa4
 8027d6a:	e56a      	b.n	8027842 <_vfprintf_r+0x7da>
 8027d6c:	9803      	ldr	r0, [sp, #12]
 8027d6e:	aa26      	add	r2, sp, #152	@ 0x98
 8027d70:	4659      	mov	r1, fp
 8027d72:	f000 fbe5 	bl	8028540 <__sprint_r>
 8027d76:	2800      	cmp	r0, #0
 8027d78:	f040 833d 	bne.w	80283f6 <_vfprintf_r+0x138e>
 8027d7c:	ac29      	add	r4, sp, #164	@ 0xa4
 8027d7e:	e570      	b.n	8027862 <_vfprintf_r+0x7fa>
 8027d80:	2010      	movs	r0, #16
 8027d82:	4403      	add	r3, r0
 8027d84:	2a07      	cmp	r2, #7
 8027d86:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8027d8a:	6060      	str	r0, [r4, #4]
 8027d8c:	dd08      	ble.n	8027da0 <_vfprintf_r+0xd38>
 8027d8e:	9803      	ldr	r0, [sp, #12]
 8027d90:	aa26      	add	r2, sp, #152	@ 0x98
 8027d92:	4659      	mov	r1, fp
 8027d94:	f000 fbd4 	bl	8028540 <__sprint_r>
 8027d98:	2800      	cmp	r0, #0
 8027d9a:	f040 832c 	bne.w	80283f6 <_vfprintf_r+0x138e>
 8027d9e:	a929      	add	r1, sp, #164	@ 0xa4
 8027da0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027da2:	3b10      	subs	r3, #16
 8027da4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027da6:	460c      	mov	r4, r1
 8027da8:	e564      	b.n	8027874 <_vfprintf_r+0x80c>
 8027daa:	460c      	mov	r4, r1
 8027dac:	e57f      	b.n	80278ae <_vfprintf_r+0x846>
 8027dae:	2010      	movs	r0, #16
 8027db0:	4403      	add	r3, r0
 8027db2:	2a07      	cmp	r2, #7
 8027db4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8027db8:	6060      	str	r0, [r4, #4]
 8027dba:	dd08      	ble.n	8027dce <_vfprintf_r+0xd66>
 8027dbc:	9803      	ldr	r0, [sp, #12]
 8027dbe:	aa26      	add	r2, sp, #152	@ 0x98
 8027dc0:	4659      	mov	r1, fp
 8027dc2:	f000 fbbd 	bl	8028540 <__sprint_r>
 8027dc6:	2800      	cmp	r0, #0
 8027dc8:	f040 8315 	bne.w	80283f6 <_vfprintf_r+0x138e>
 8027dcc:	a929      	add	r1, sp, #164	@ 0xa4
 8027dce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027dd0:	3b10      	subs	r3, #16
 8027dd2:	9310      	str	r3, [sp, #64]	@ 0x40
 8027dd4:	460c      	mov	r4, r1
 8027dd6:	e570      	b.n	80278ba <_vfprintf_r+0x852>
 8027dd8:	460c      	mov	r4, r1
 8027dda:	e58b      	b.n	80278f4 <_vfprintf_r+0x88c>
 8027ddc:	080380cb 	.word	0x080380cb
 8027de0:	080380dc 	.word	0x080380dc
 8027de4:	9b06      	ldr	r3, [sp, #24]
 8027de6:	2b65      	cmp	r3, #101	@ 0x65
 8027de8:	f340 8245 	ble.w	8028276 <_vfprintf_r+0x120e>
 8027dec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8027df0:	2200      	movs	r2, #0
 8027df2:	2300      	movs	r3, #0
 8027df4:	f7e8 fe80 	bl	8010af8 <__aeabi_dcmpeq>
 8027df8:	2800      	cmp	r0, #0
 8027dfa:	d06a      	beq.n	8027ed2 <_vfprintf_r+0xe6a>
 8027dfc:	4b73      	ldr	r3, [pc, #460]	@ (8027fcc <_vfprintf_r+0xf64>)
 8027dfe:	6023      	str	r3, [r4, #0]
 8027e00:	2301      	movs	r3, #1
 8027e02:	6063      	str	r3, [r4, #4]
 8027e04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027e06:	3301      	adds	r3, #1
 8027e08:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027e0a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027e0c:	3301      	adds	r3, #1
 8027e0e:	2b07      	cmp	r3, #7
 8027e10:	9327      	str	r3, [sp, #156]	@ 0x9c
 8027e12:	dc37      	bgt.n	8027e84 <_vfprintf_r+0xe1c>
 8027e14:	3408      	adds	r4, #8
 8027e16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027e18:	9a04      	ldr	r2, [sp, #16]
 8027e1a:	4293      	cmp	r3, r2
 8027e1c:	db02      	blt.n	8027e24 <_vfprintf_r+0xdbc>
 8027e1e:	07e9      	lsls	r1, r5, #31
 8027e20:	f57f ad78 	bpl.w	8027914 <_vfprintf_r+0x8ac>
 8027e24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027e26:	6023      	str	r3, [r4, #0]
 8027e28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027e2a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027e2c:	6063      	str	r3, [r4, #4]
 8027e2e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027e30:	4413      	add	r3, r2
 8027e32:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027e34:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027e36:	3301      	adds	r3, #1
 8027e38:	2b07      	cmp	r3, #7
 8027e3a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8027e3c:	dc2c      	bgt.n	8027e98 <_vfprintf_r+0xe30>
 8027e3e:	3408      	adds	r4, #8
 8027e40:	9b04      	ldr	r3, [sp, #16]
 8027e42:	1e5e      	subs	r6, r3, #1
 8027e44:	2e00      	cmp	r6, #0
 8027e46:	f77f ad65 	ble.w	8027914 <_vfprintf_r+0x8ac>
 8027e4a:	4f61      	ldr	r7, [pc, #388]	@ (8027fd0 <_vfprintf_r+0xf68>)
 8027e4c:	f04f 0810 	mov.w	r8, #16
 8027e50:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8027e54:	2e10      	cmp	r6, #16
 8027e56:	f103 0301 	add.w	r3, r3, #1
 8027e5a:	f104 0108 	add.w	r1, r4, #8
 8027e5e:	6027      	str	r7, [r4, #0]
 8027e60:	dc24      	bgt.n	8027eac <_vfprintf_r+0xe44>
 8027e62:	6066      	str	r6, [r4, #4]
 8027e64:	2b07      	cmp	r3, #7
 8027e66:	4416      	add	r6, r2
 8027e68:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8027e6c:	f340 82a2 	ble.w	80283b4 <_vfprintf_r+0x134c>
 8027e70:	9803      	ldr	r0, [sp, #12]
 8027e72:	aa26      	add	r2, sp, #152	@ 0x98
 8027e74:	4659      	mov	r1, fp
 8027e76:	f000 fb63 	bl	8028540 <__sprint_r>
 8027e7a:	2800      	cmp	r0, #0
 8027e7c:	f040 82bb 	bne.w	80283f6 <_vfprintf_r+0x138e>
 8027e80:	ac29      	add	r4, sp, #164	@ 0xa4
 8027e82:	e547      	b.n	8027914 <_vfprintf_r+0x8ac>
 8027e84:	9803      	ldr	r0, [sp, #12]
 8027e86:	aa26      	add	r2, sp, #152	@ 0x98
 8027e88:	4659      	mov	r1, fp
 8027e8a:	f000 fb59 	bl	8028540 <__sprint_r>
 8027e8e:	2800      	cmp	r0, #0
 8027e90:	f040 82b1 	bne.w	80283f6 <_vfprintf_r+0x138e>
 8027e94:	ac29      	add	r4, sp, #164	@ 0xa4
 8027e96:	e7be      	b.n	8027e16 <_vfprintf_r+0xdae>
 8027e98:	9803      	ldr	r0, [sp, #12]
 8027e9a:	aa26      	add	r2, sp, #152	@ 0x98
 8027e9c:	4659      	mov	r1, fp
 8027e9e:	f000 fb4f 	bl	8028540 <__sprint_r>
 8027ea2:	2800      	cmp	r0, #0
 8027ea4:	f040 82a7 	bne.w	80283f6 <_vfprintf_r+0x138e>
 8027ea8:	ac29      	add	r4, sp, #164	@ 0xa4
 8027eaa:	e7c9      	b.n	8027e40 <_vfprintf_r+0xdd8>
 8027eac:	3210      	adds	r2, #16
 8027eae:	2b07      	cmp	r3, #7
 8027eb0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8027eb4:	f8c4 8004 	str.w	r8, [r4, #4]
 8027eb8:	dd08      	ble.n	8027ecc <_vfprintf_r+0xe64>
 8027eba:	9803      	ldr	r0, [sp, #12]
 8027ebc:	aa26      	add	r2, sp, #152	@ 0x98
 8027ebe:	4659      	mov	r1, fp
 8027ec0:	f000 fb3e 	bl	8028540 <__sprint_r>
 8027ec4:	2800      	cmp	r0, #0
 8027ec6:	f040 8296 	bne.w	80283f6 <_vfprintf_r+0x138e>
 8027eca:	a929      	add	r1, sp, #164	@ 0xa4
 8027ecc:	3e10      	subs	r6, #16
 8027ece:	460c      	mov	r4, r1
 8027ed0:	e7be      	b.n	8027e50 <_vfprintf_r+0xde8>
 8027ed2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027ed4:	2b00      	cmp	r3, #0
 8027ed6:	dc7d      	bgt.n	8027fd4 <_vfprintf_r+0xf6c>
 8027ed8:	4b3c      	ldr	r3, [pc, #240]	@ (8027fcc <_vfprintf_r+0xf64>)
 8027eda:	6023      	str	r3, [r4, #0]
 8027edc:	2301      	movs	r3, #1
 8027ede:	6063      	str	r3, [r4, #4]
 8027ee0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027ee2:	3301      	adds	r3, #1
 8027ee4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027ee6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027ee8:	3301      	adds	r3, #1
 8027eea:	2b07      	cmp	r3, #7
 8027eec:	9327      	str	r3, [sp, #156]	@ 0x9c
 8027eee:	dc46      	bgt.n	8027f7e <_vfprintf_r+0xf16>
 8027ef0:	3408      	adds	r4, #8
 8027ef2:	9904      	ldr	r1, [sp, #16]
 8027ef4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027ef6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8027ef8:	430b      	orrs	r3, r1
 8027efa:	f005 0101 	and.w	r1, r5, #1
 8027efe:	430b      	orrs	r3, r1
 8027f00:	f43f ad08 	beq.w	8027914 <_vfprintf_r+0x8ac>
 8027f04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027f06:	6023      	str	r3, [r4, #0]
 8027f08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027f0a:	6063      	str	r3, [r4, #4]
 8027f0c:	441a      	add	r2, r3
 8027f0e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027f10:	9228      	str	r2, [sp, #160]	@ 0xa0
 8027f12:	3301      	adds	r3, #1
 8027f14:	2b07      	cmp	r3, #7
 8027f16:	9327      	str	r3, [sp, #156]	@ 0x9c
 8027f18:	dc3b      	bgt.n	8027f92 <_vfprintf_r+0xf2a>
 8027f1a:	f104 0308 	add.w	r3, r4, #8
 8027f1e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8027f20:	2e00      	cmp	r6, #0
 8027f22:	da1b      	bge.n	8027f5c <_vfprintf_r+0xef4>
 8027f24:	4f2a      	ldr	r7, [pc, #168]	@ (8027fd0 <_vfprintf_r+0xf68>)
 8027f26:	4276      	negs	r6, r6
 8027f28:	461a      	mov	r2, r3
 8027f2a:	2410      	movs	r4, #16
 8027f2c:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8027f30:	2e10      	cmp	r6, #16
 8027f32:	f101 0101 	add.w	r1, r1, #1
 8027f36:	f103 0308 	add.w	r3, r3, #8
 8027f3a:	6017      	str	r7, [r2, #0]
 8027f3c:	dc33      	bgt.n	8027fa6 <_vfprintf_r+0xf3e>
 8027f3e:	6056      	str	r6, [r2, #4]
 8027f40:	2907      	cmp	r1, #7
 8027f42:	4406      	add	r6, r0
 8027f44:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8027f48:	dd08      	ble.n	8027f5c <_vfprintf_r+0xef4>
 8027f4a:	9803      	ldr	r0, [sp, #12]
 8027f4c:	aa26      	add	r2, sp, #152	@ 0x98
 8027f4e:	4659      	mov	r1, fp
 8027f50:	f000 faf6 	bl	8028540 <__sprint_r>
 8027f54:	2800      	cmp	r0, #0
 8027f56:	f040 824e 	bne.w	80283f6 <_vfprintf_r+0x138e>
 8027f5a:	ab29      	add	r3, sp, #164	@ 0xa4
 8027f5c:	9a04      	ldr	r2, [sp, #16]
 8027f5e:	9904      	ldr	r1, [sp, #16]
 8027f60:	605a      	str	r2, [r3, #4]
 8027f62:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8027f64:	f8c3 8000 	str.w	r8, [r3]
 8027f68:	440a      	add	r2, r1
 8027f6a:	9228      	str	r2, [sp, #160]	@ 0xa0
 8027f6c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8027f6e:	3201      	adds	r2, #1
 8027f70:	2a07      	cmp	r2, #7
 8027f72:	9227      	str	r2, [sp, #156]	@ 0x9c
 8027f74:	f73f af7c 	bgt.w	8027e70 <_vfprintf_r+0xe08>
 8027f78:	f103 0408 	add.w	r4, r3, #8
 8027f7c:	e4ca      	b.n	8027914 <_vfprintf_r+0x8ac>
 8027f7e:	9803      	ldr	r0, [sp, #12]
 8027f80:	aa26      	add	r2, sp, #152	@ 0x98
 8027f82:	4659      	mov	r1, fp
 8027f84:	f000 fadc 	bl	8028540 <__sprint_r>
 8027f88:	2800      	cmp	r0, #0
 8027f8a:	f040 8234 	bne.w	80283f6 <_vfprintf_r+0x138e>
 8027f8e:	ac29      	add	r4, sp, #164	@ 0xa4
 8027f90:	e7af      	b.n	8027ef2 <_vfprintf_r+0xe8a>
 8027f92:	9803      	ldr	r0, [sp, #12]
 8027f94:	aa26      	add	r2, sp, #152	@ 0x98
 8027f96:	4659      	mov	r1, fp
 8027f98:	f000 fad2 	bl	8028540 <__sprint_r>
 8027f9c:	2800      	cmp	r0, #0
 8027f9e:	f040 822a 	bne.w	80283f6 <_vfprintf_r+0x138e>
 8027fa2:	ab29      	add	r3, sp, #164	@ 0xa4
 8027fa4:	e7bb      	b.n	8027f1e <_vfprintf_r+0xeb6>
 8027fa6:	3010      	adds	r0, #16
 8027fa8:	2907      	cmp	r1, #7
 8027faa:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8027fae:	6054      	str	r4, [r2, #4]
 8027fb0:	dd08      	ble.n	8027fc4 <_vfprintf_r+0xf5c>
 8027fb2:	9803      	ldr	r0, [sp, #12]
 8027fb4:	aa26      	add	r2, sp, #152	@ 0x98
 8027fb6:	4659      	mov	r1, fp
 8027fb8:	f000 fac2 	bl	8028540 <__sprint_r>
 8027fbc:	2800      	cmp	r0, #0
 8027fbe:	f040 821a 	bne.w	80283f6 <_vfprintf_r+0x138e>
 8027fc2:	ab29      	add	r3, sp, #164	@ 0xa4
 8027fc4:	3e10      	subs	r6, #16
 8027fc6:	461a      	mov	r2, r3
 8027fc8:	e7b0      	b.n	8027f2c <_vfprintf_r+0xec4>
 8027fca:	bf00      	nop
 8027fcc:	080380ed 	.word	0x080380ed
 8027fd0:	080380ef 	.word	0x080380ef
 8027fd4:	9b04      	ldr	r3, [sp, #16]
 8027fd6:	4443      	add	r3, r8
 8027fd8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027fda:	9b04      	ldr	r3, [sp, #16]
 8027fdc:	42b3      	cmp	r3, r6
 8027fde:	bfa8      	it	ge
 8027fe0:	4633      	movge	r3, r6
 8027fe2:	2b00      	cmp	r3, #0
 8027fe4:	4699      	mov	r9, r3
 8027fe6:	dd0b      	ble.n	8028000 <_vfprintf_r+0xf98>
 8027fe8:	e9c4 8300 	strd	r8, r3, [r4]
 8027fec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027fee:	444b      	add	r3, r9
 8027ff0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027ff2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027ff4:	3301      	adds	r3, #1
 8027ff6:	2b07      	cmp	r3, #7
 8027ff8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8027ffa:	f300 8089 	bgt.w	8028110 <_vfprintf_r+0x10a8>
 8027ffe:	3408      	adds	r4, #8
 8028000:	f1b9 0f00 	cmp.w	r9, #0
 8028004:	bfac      	ite	ge
 8028006:	eba6 0309 	subge.w	r3, r6, r9
 802800a:	4633      	movlt	r3, r6
 802800c:	2b00      	cmp	r3, #0
 802800e:	9306      	str	r3, [sp, #24]
 8028010:	dd1c      	ble.n	802804c <_vfprintf_r+0xfe4>
 8028012:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 8028378 <_vfprintf_r+0x1310>
 8028016:	9806      	ldr	r0, [sp, #24]
 8028018:	f8c4 9000 	str.w	r9, [r4]
 802801c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8028020:	2810      	cmp	r0, #16
 8028022:	f102 0201 	add.w	r2, r2, #1
 8028026:	f104 0108 	add.w	r1, r4, #8
 802802a:	dc7b      	bgt.n	8028124 <_vfprintf_r+0x10bc>
 802802c:	4403      	add	r3, r0
 802802e:	2a07      	cmp	r2, #7
 8028030:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8028034:	6060      	str	r0, [r4, #4]
 8028036:	f340 808a 	ble.w	802814e <_vfprintf_r+0x10e6>
 802803a:	9803      	ldr	r0, [sp, #12]
 802803c:	aa26      	add	r2, sp, #152	@ 0x98
 802803e:	4659      	mov	r1, fp
 8028040:	f000 fa7e 	bl	8028540 <__sprint_r>
 8028044:	2800      	cmp	r0, #0
 8028046:	f040 81d6 	bne.w	80283f6 <_vfprintf_r+0x138e>
 802804a:	ac29      	add	r4, sp, #164	@ 0xa4
 802804c:	056a      	lsls	r2, r5, #21
 802804e:	44b0      	add	r8, r6
 8028050:	d508      	bpl.n	8028064 <_vfprintf_r+0xffc>
 8028052:	9b08      	ldr	r3, [sp, #32]
 8028054:	2b00      	cmp	r3, #0
 8028056:	d17c      	bne.n	8028152 <_vfprintf_r+0x10ea>
 8028058:	2f00      	cmp	r7, #0
 802805a:	d17c      	bne.n	8028156 <_vfprintf_r+0x10ee>
 802805c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802805e:	4598      	cmp	r8, r3
 8028060:	bf28      	it	cs
 8028062:	4698      	movcs	r8, r3
 8028064:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028066:	9a04      	ldr	r2, [sp, #16]
 8028068:	4293      	cmp	r3, r2
 802806a:	db01      	blt.n	8028070 <_vfprintf_r+0x1008>
 802806c:	07eb      	lsls	r3, r5, #31
 802806e:	d50e      	bpl.n	802808e <_vfprintf_r+0x1026>
 8028070:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8028072:	6023      	str	r3, [r4, #0]
 8028074:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028076:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8028078:	6063      	str	r3, [r4, #4]
 802807a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802807c:	4413      	add	r3, r2
 802807e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8028080:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8028082:	3301      	adds	r3, #1
 8028084:	2b07      	cmp	r3, #7
 8028086:	9327      	str	r3, [sp, #156]	@ 0x9c
 8028088:	f300 80e1 	bgt.w	802824e <_vfprintf_r+0x11e6>
 802808c:	3408      	adds	r4, #8
 802808e:	9b04      	ldr	r3, [sp, #16]
 8028090:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8028092:	1bdf      	subs	r7, r3, r7
 8028094:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8028096:	eba3 0308 	sub.w	r3, r3, r8
 802809a:	429f      	cmp	r7, r3
 802809c:	bfa8      	it	ge
 802809e:	461f      	movge	r7, r3
 80280a0:	2f00      	cmp	r7, #0
 80280a2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80280a4:	dd0a      	ble.n	80280bc <_vfprintf_r+0x1054>
 80280a6:	443b      	add	r3, r7
 80280a8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80280aa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80280ac:	3301      	adds	r3, #1
 80280ae:	2b07      	cmp	r3, #7
 80280b0:	e9c4 8700 	strd	r8, r7, [r4]
 80280b4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80280b6:	f300 80d4 	bgt.w	8028262 <_vfprintf_r+0x11fa>
 80280ba:	3408      	adds	r4, #8
 80280bc:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80280be:	9b04      	ldr	r3, [sp, #16]
 80280c0:	2f00      	cmp	r7, #0
 80280c2:	eba3 0606 	sub.w	r6, r3, r6
 80280c6:	bfa8      	it	ge
 80280c8:	1bf6      	subge	r6, r6, r7
 80280ca:	2e00      	cmp	r6, #0
 80280cc:	f77f ac22 	ble.w	8027914 <_vfprintf_r+0x8ac>
 80280d0:	4fa9      	ldr	r7, [pc, #676]	@ (8028378 <_vfprintf_r+0x1310>)
 80280d2:	f04f 0810 	mov.w	r8, #16
 80280d6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80280da:	2e10      	cmp	r6, #16
 80280dc:	f103 0301 	add.w	r3, r3, #1
 80280e0:	f104 0108 	add.w	r1, r4, #8
 80280e4:	6027      	str	r7, [r4, #0]
 80280e6:	f77f aebc 	ble.w	8027e62 <_vfprintf_r+0xdfa>
 80280ea:	3210      	adds	r2, #16
 80280ec:	2b07      	cmp	r3, #7
 80280ee:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80280f2:	f8c4 8004 	str.w	r8, [r4, #4]
 80280f6:	dd08      	ble.n	802810a <_vfprintf_r+0x10a2>
 80280f8:	9803      	ldr	r0, [sp, #12]
 80280fa:	aa26      	add	r2, sp, #152	@ 0x98
 80280fc:	4659      	mov	r1, fp
 80280fe:	f000 fa1f 	bl	8028540 <__sprint_r>
 8028102:	2800      	cmp	r0, #0
 8028104:	f040 8177 	bne.w	80283f6 <_vfprintf_r+0x138e>
 8028108:	a929      	add	r1, sp, #164	@ 0xa4
 802810a:	3e10      	subs	r6, #16
 802810c:	460c      	mov	r4, r1
 802810e:	e7e2      	b.n	80280d6 <_vfprintf_r+0x106e>
 8028110:	9803      	ldr	r0, [sp, #12]
 8028112:	aa26      	add	r2, sp, #152	@ 0x98
 8028114:	4659      	mov	r1, fp
 8028116:	f000 fa13 	bl	8028540 <__sprint_r>
 802811a:	2800      	cmp	r0, #0
 802811c:	f040 816b 	bne.w	80283f6 <_vfprintf_r+0x138e>
 8028120:	ac29      	add	r4, sp, #164	@ 0xa4
 8028122:	e76d      	b.n	8028000 <_vfprintf_r+0xf98>
 8028124:	2010      	movs	r0, #16
 8028126:	4403      	add	r3, r0
 8028128:	2a07      	cmp	r2, #7
 802812a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802812e:	6060      	str	r0, [r4, #4]
 8028130:	dd08      	ble.n	8028144 <_vfprintf_r+0x10dc>
 8028132:	9803      	ldr	r0, [sp, #12]
 8028134:	aa26      	add	r2, sp, #152	@ 0x98
 8028136:	4659      	mov	r1, fp
 8028138:	f000 fa02 	bl	8028540 <__sprint_r>
 802813c:	2800      	cmp	r0, #0
 802813e:	f040 815a 	bne.w	80283f6 <_vfprintf_r+0x138e>
 8028142:	a929      	add	r1, sp, #164	@ 0xa4
 8028144:	9b06      	ldr	r3, [sp, #24]
 8028146:	3b10      	subs	r3, #16
 8028148:	9306      	str	r3, [sp, #24]
 802814a:	460c      	mov	r4, r1
 802814c:	e763      	b.n	8028016 <_vfprintf_r+0xfae>
 802814e:	460c      	mov	r4, r1
 8028150:	e77c      	b.n	802804c <_vfprintf_r+0xfe4>
 8028152:	2f00      	cmp	r7, #0
 8028154:	d04b      	beq.n	80281ee <_vfprintf_r+0x1186>
 8028156:	3f01      	subs	r7, #1
 8028158:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802815a:	6023      	str	r3, [r4, #0]
 802815c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802815e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8028160:	6063      	str	r3, [r4, #4]
 8028162:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028164:	4413      	add	r3, r2
 8028166:	9328      	str	r3, [sp, #160]	@ 0xa0
 8028168:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802816a:	3301      	adds	r3, #1
 802816c:	2b07      	cmp	r3, #7
 802816e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8028170:	dc44      	bgt.n	80281fc <_vfprintf_r+0x1194>
 8028172:	3408      	adds	r4, #8
 8028174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028176:	f893 9000 	ldrb.w	r9, [r3]
 802817a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802817c:	eba3 0308 	sub.w	r3, r3, r8
 8028180:	4599      	cmp	r9, r3
 8028182:	bfa8      	it	ge
 8028184:	4699      	movge	r9, r3
 8028186:	f1b9 0f00 	cmp.w	r9, #0
 802818a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802818c:	dd09      	ble.n	80281a2 <_vfprintf_r+0x113a>
 802818e:	444b      	add	r3, r9
 8028190:	9328      	str	r3, [sp, #160]	@ 0xa0
 8028192:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8028194:	3301      	adds	r3, #1
 8028196:	2b07      	cmp	r3, #7
 8028198:	e9c4 8900 	strd	r8, r9, [r4]
 802819c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802819e:	dc37      	bgt.n	8028210 <_vfprintf_r+0x11a8>
 80281a0:	3408      	adds	r4, #8
 80281a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80281a4:	781e      	ldrb	r6, [r3, #0]
 80281a6:	f1b9 0f00 	cmp.w	r9, #0
 80281aa:	bfa8      	it	ge
 80281ac:	eba6 0609 	subge.w	r6, r6, r9
 80281b0:	2e00      	cmp	r6, #0
 80281b2:	dd18      	ble.n	80281e6 <_vfprintf_r+0x117e>
 80281b4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80281b8:	486f      	ldr	r0, [pc, #444]	@ (8028378 <_vfprintf_r+0x1310>)
 80281ba:	6020      	str	r0, [r4, #0]
 80281bc:	2e10      	cmp	r6, #16
 80281be:	f103 0301 	add.w	r3, r3, #1
 80281c2:	f104 0108 	add.w	r1, r4, #8
 80281c6:	dc2d      	bgt.n	8028224 <_vfprintf_r+0x11bc>
 80281c8:	6066      	str	r6, [r4, #4]
 80281ca:	2b07      	cmp	r3, #7
 80281cc:	4416      	add	r6, r2
 80281ce:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80281d2:	dd3a      	ble.n	802824a <_vfprintf_r+0x11e2>
 80281d4:	9803      	ldr	r0, [sp, #12]
 80281d6:	aa26      	add	r2, sp, #152	@ 0x98
 80281d8:	4659      	mov	r1, fp
 80281da:	f000 f9b1 	bl	8028540 <__sprint_r>
 80281de:	2800      	cmp	r0, #0
 80281e0:	f040 8109 	bne.w	80283f6 <_vfprintf_r+0x138e>
 80281e4:	ac29      	add	r4, sp, #164	@ 0xa4
 80281e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80281e8:	781b      	ldrb	r3, [r3, #0]
 80281ea:	4498      	add	r8, r3
 80281ec:	e731      	b.n	8028052 <_vfprintf_r+0xfea>
 80281ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80281f0:	3b01      	subs	r3, #1
 80281f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80281f4:	9b08      	ldr	r3, [sp, #32]
 80281f6:	3b01      	subs	r3, #1
 80281f8:	9308      	str	r3, [sp, #32]
 80281fa:	e7ad      	b.n	8028158 <_vfprintf_r+0x10f0>
 80281fc:	9803      	ldr	r0, [sp, #12]
 80281fe:	aa26      	add	r2, sp, #152	@ 0x98
 8028200:	4659      	mov	r1, fp
 8028202:	f000 f99d 	bl	8028540 <__sprint_r>
 8028206:	2800      	cmp	r0, #0
 8028208:	f040 80f5 	bne.w	80283f6 <_vfprintf_r+0x138e>
 802820c:	ac29      	add	r4, sp, #164	@ 0xa4
 802820e:	e7b1      	b.n	8028174 <_vfprintf_r+0x110c>
 8028210:	9803      	ldr	r0, [sp, #12]
 8028212:	aa26      	add	r2, sp, #152	@ 0x98
 8028214:	4659      	mov	r1, fp
 8028216:	f000 f993 	bl	8028540 <__sprint_r>
 802821a:	2800      	cmp	r0, #0
 802821c:	f040 80eb 	bne.w	80283f6 <_vfprintf_r+0x138e>
 8028220:	ac29      	add	r4, sp, #164	@ 0xa4
 8028222:	e7be      	b.n	80281a2 <_vfprintf_r+0x113a>
 8028224:	2010      	movs	r0, #16
 8028226:	4402      	add	r2, r0
 8028228:	2b07      	cmp	r3, #7
 802822a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802822e:	6060      	str	r0, [r4, #4]
 8028230:	dd08      	ble.n	8028244 <_vfprintf_r+0x11dc>
 8028232:	9803      	ldr	r0, [sp, #12]
 8028234:	aa26      	add	r2, sp, #152	@ 0x98
 8028236:	4659      	mov	r1, fp
 8028238:	f000 f982 	bl	8028540 <__sprint_r>
 802823c:	2800      	cmp	r0, #0
 802823e:	f040 80da 	bne.w	80283f6 <_vfprintf_r+0x138e>
 8028242:	a929      	add	r1, sp, #164	@ 0xa4
 8028244:	3e10      	subs	r6, #16
 8028246:	460c      	mov	r4, r1
 8028248:	e7b4      	b.n	80281b4 <_vfprintf_r+0x114c>
 802824a:	460c      	mov	r4, r1
 802824c:	e7cb      	b.n	80281e6 <_vfprintf_r+0x117e>
 802824e:	9803      	ldr	r0, [sp, #12]
 8028250:	aa26      	add	r2, sp, #152	@ 0x98
 8028252:	4659      	mov	r1, fp
 8028254:	f000 f974 	bl	8028540 <__sprint_r>
 8028258:	2800      	cmp	r0, #0
 802825a:	f040 80cc 	bne.w	80283f6 <_vfprintf_r+0x138e>
 802825e:	ac29      	add	r4, sp, #164	@ 0xa4
 8028260:	e715      	b.n	802808e <_vfprintf_r+0x1026>
 8028262:	9803      	ldr	r0, [sp, #12]
 8028264:	aa26      	add	r2, sp, #152	@ 0x98
 8028266:	4659      	mov	r1, fp
 8028268:	f000 f96a 	bl	8028540 <__sprint_r>
 802826c:	2800      	cmp	r0, #0
 802826e:	f040 80c2 	bne.w	80283f6 <_vfprintf_r+0x138e>
 8028272:	ac29      	add	r4, sp, #164	@ 0xa4
 8028274:	e722      	b.n	80280bc <_vfprintf_r+0x1054>
 8028276:	9904      	ldr	r1, [sp, #16]
 8028278:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802827a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802827c:	2901      	cmp	r1, #1
 802827e:	f103 0301 	add.w	r3, r3, #1
 8028282:	f102 0201 	add.w	r2, r2, #1
 8028286:	f104 0608 	add.w	r6, r4, #8
 802828a:	dc02      	bgt.n	8028292 <_vfprintf_r+0x122a>
 802828c:	07ef      	lsls	r7, r5, #31
 802828e:	f140 8086 	bpl.w	802839e <_vfprintf_r+0x1336>
 8028292:	2101      	movs	r1, #1
 8028294:	2a07      	cmp	r2, #7
 8028296:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802829a:	f8c4 8000 	str.w	r8, [r4]
 802829e:	6061      	str	r1, [r4, #4]
 80282a0:	dd08      	ble.n	80282b4 <_vfprintf_r+0x124c>
 80282a2:	9803      	ldr	r0, [sp, #12]
 80282a4:	aa26      	add	r2, sp, #152	@ 0x98
 80282a6:	4659      	mov	r1, fp
 80282a8:	f000 f94a 	bl	8028540 <__sprint_r>
 80282ac:	2800      	cmp	r0, #0
 80282ae:	f040 80a2 	bne.w	80283f6 <_vfprintf_r+0x138e>
 80282b2:	ae29      	add	r6, sp, #164	@ 0xa4
 80282b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80282b6:	6033      	str	r3, [r6, #0]
 80282b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80282ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80282bc:	6073      	str	r3, [r6, #4]
 80282be:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80282c0:	4413      	add	r3, r2
 80282c2:	9328      	str	r3, [sp, #160]	@ 0xa0
 80282c4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80282c6:	3301      	adds	r3, #1
 80282c8:	2b07      	cmp	r3, #7
 80282ca:	9327      	str	r3, [sp, #156]	@ 0x9c
 80282cc:	dc33      	bgt.n	8028336 <_vfprintf_r+0x12ce>
 80282ce:	3608      	adds	r6, #8
 80282d0:	9b04      	ldr	r3, [sp, #16]
 80282d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80282d6:	1e5c      	subs	r4, r3, #1
 80282d8:	2200      	movs	r2, #0
 80282da:	2300      	movs	r3, #0
 80282dc:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 80282e0:	f7e8 fc0a 	bl	8010af8 <__aeabi_dcmpeq>
 80282e4:	2800      	cmp	r0, #0
 80282e6:	d12f      	bne.n	8028348 <_vfprintf_r+0x12e0>
 80282e8:	f108 0201 	add.w	r2, r8, #1
 80282ec:	e9c6 2400 	strd	r2, r4, [r6]
 80282f0:	9a04      	ldr	r2, [sp, #16]
 80282f2:	f109 0301 	add.w	r3, r9, #1
 80282f6:	3f01      	subs	r7, #1
 80282f8:	4417      	add	r7, r2
 80282fa:	2b07      	cmp	r3, #7
 80282fc:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8028300:	dd56      	ble.n	80283b0 <_vfprintf_r+0x1348>
 8028302:	9803      	ldr	r0, [sp, #12]
 8028304:	aa26      	add	r2, sp, #152	@ 0x98
 8028306:	4659      	mov	r1, fp
 8028308:	f000 f91a 	bl	8028540 <__sprint_r>
 802830c:	2800      	cmp	r0, #0
 802830e:	d172      	bne.n	80283f6 <_vfprintf_r+0x138e>
 8028310:	ae29      	add	r6, sp, #164	@ 0xa4
 8028312:	ab22      	add	r3, sp, #136	@ 0x88
 8028314:	6033      	str	r3, [r6, #0]
 8028316:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028318:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802831a:	6073      	str	r3, [r6, #4]
 802831c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802831e:	4413      	add	r3, r2
 8028320:	9328      	str	r3, [sp, #160]	@ 0xa0
 8028322:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8028324:	3301      	adds	r3, #1
 8028326:	2b07      	cmp	r3, #7
 8028328:	9327      	str	r3, [sp, #156]	@ 0x9c
 802832a:	f73f ada1 	bgt.w	8027e70 <_vfprintf_r+0xe08>
 802832e:	f106 0408 	add.w	r4, r6, #8
 8028332:	f7ff baef 	b.w	8027914 <_vfprintf_r+0x8ac>
 8028336:	9803      	ldr	r0, [sp, #12]
 8028338:	aa26      	add	r2, sp, #152	@ 0x98
 802833a:	4659      	mov	r1, fp
 802833c:	f000 f900 	bl	8028540 <__sprint_r>
 8028340:	2800      	cmp	r0, #0
 8028342:	d158      	bne.n	80283f6 <_vfprintf_r+0x138e>
 8028344:	ae29      	add	r6, sp, #164	@ 0xa4
 8028346:	e7c3      	b.n	80282d0 <_vfprintf_r+0x1268>
 8028348:	9b04      	ldr	r3, [sp, #16]
 802834a:	2b01      	cmp	r3, #1
 802834c:	dde1      	ble.n	8028312 <_vfprintf_r+0x12aa>
 802834e:	4f0a      	ldr	r7, [pc, #40]	@ (8028378 <_vfprintf_r+0x1310>)
 8028350:	f04f 0810 	mov.w	r8, #16
 8028354:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8028358:	2c10      	cmp	r4, #16
 802835a:	f103 0301 	add.w	r3, r3, #1
 802835e:	f106 0108 	add.w	r1, r6, #8
 8028362:	6037      	str	r7, [r6, #0]
 8028364:	dc0a      	bgt.n	802837c <_vfprintf_r+0x1314>
 8028366:	6074      	str	r4, [r6, #4]
 8028368:	2b07      	cmp	r3, #7
 802836a:	4414      	add	r4, r2
 802836c:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 8028370:	dcc7      	bgt.n	8028302 <_vfprintf_r+0x129a>
 8028372:	460e      	mov	r6, r1
 8028374:	e7cd      	b.n	8028312 <_vfprintf_r+0x12aa>
 8028376:	bf00      	nop
 8028378:	080380ef 	.word	0x080380ef
 802837c:	3210      	adds	r2, #16
 802837e:	2b07      	cmp	r3, #7
 8028380:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8028384:	f8c6 8004 	str.w	r8, [r6, #4]
 8028388:	dd06      	ble.n	8028398 <_vfprintf_r+0x1330>
 802838a:	9803      	ldr	r0, [sp, #12]
 802838c:	aa26      	add	r2, sp, #152	@ 0x98
 802838e:	4659      	mov	r1, fp
 8028390:	f000 f8d6 	bl	8028540 <__sprint_r>
 8028394:	bb78      	cbnz	r0, 80283f6 <_vfprintf_r+0x138e>
 8028396:	a929      	add	r1, sp, #164	@ 0xa4
 8028398:	3c10      	subs	r4, #16
 802839a:	460e      	mov	r6, r1
 802839c:	e7da      	b.n	8028354 <_vfprintf_r+0x12ec>
 802839e:	2101      	movs	r1, #1
 80283a0:	2a07      	cmp	r2, #7
 80283a2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80283a6:	f8c4 8000 	str.w	r8, [r4]
 80283aa:	6061      	str	r1, [r4, #4]
 80283ac:	ddb1      	ble.n	8028312 <_vfprintf_r+0x12aa>
 80283ae:	e7a8      	b.n	8028302 <_vfprintf_r+0x129a>
 80283b0:	3608      	adds	r6, #8
 80283b2:	e7ae      	b.n	8028312 <_vfprintf_r+0x12aa>
 80283b4:	460c      	mov	r4, r1
 80283b6:	f7ff baad 	b.w	8027914 <_vfprintf_r+0x8ac>
 80283ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80283bc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80283be:	1a9d      	subs	r5, r3, r2
 80283c0:	2d00      	cmp	r5, #0
 80283c2:	f77f aaaa 	ble.w	802791a <_vfprintf_r+0x8b2>
 80283c6:	4e3d      	ldr	r6, [pc, #244]	@ (80284bc <_vfprintf_r+0x1454>)
 80283c8:	2710      	movs	r7, #16
 80283ca:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80283ce:	2d10      	cmp	r5, #16
 80283d0:	f103 0301 	add.w	r3, r3, #1
 80283d4:	6026      	str	r6, [r4, #0]
 80283d6:	dc18      	bgt.n	802840a <_vfprintf_r+0x13a2>
 80283d8:	6065      	str	r5, [r4, #4]
 80283da:	2b07      	cmp	r3, #7
 80283dc:	4415      	add	r5, r2
 80283de:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 80283e2:	f77f aa9a 	ble.w	802791a <_vfprintf_r+0x8b2>
 80283e6:	9803      	ldr	r0, [sp, #12]
 80283e8:	aa26      	add	r2, sp, #152	@ 0x98
 80283ea:	4659      	mov	r1, fp
 80283ec:	f000 f8a8 	bl	8028540 <__sprint_r>
 80283f0:	2800      	cmp	r0, #0
 80283f2:	f43f aa92 	beq.w	802791a <_vfprintf_r+0x8b2>
 80283f6:	f1ba 0f00 	cmp.w	sl, #0
 80283fa:	f43f a892 	beq.w	8027522 <_vfprintf_r+0x4ba>
 80283fe:	9803      	ldr	r0, [sp, #12]
 8028400:	4651      	mov	r1, sl
 8028402:	f003 fc7b 	bl	802bcfc <_free_r>
 8028406:	f7ff b88c 	b.w	8027522 <_vfprintf_r+0x4ba>
 802840a:	3210      	adds	r2, #16
 802840c:	2b07      	cmp	r3, #7
 802840e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8028412:	6067      	str	r7, [r4, #4]
 8028414:	dc02      	bgt.n	802841c <_vfprintf_r+0x13b4>
 8028416:	3408      	adds	r4, #8
 8028418:	3d10      	subs	r5, #16
 802841a:	e7d6      	b.n	80283ca <_vfprintf_r+0x1362>
 802841c:	9803      	ldr	r0, [sp, #12]
 802841e:	aa26      	add	r2, sp, #152	@ 0x98
 8028420:	4659      	mov	r1, fp
 8028422:	f000 f88d 	bl	8028540 <__sprint_r>
 8028426:	2800      	cmp	r0, #0
 8028428:	d1e5      	bne.n	80283f6 <_vfprintf_r+0x138e>
 802842a:	ac29      	add	r4, sp, #164	@ 0xa4
 802842c:	e7f4      	b.n	8028418 <_vfprintf_r+0x13b0>
 802842e:	9803      	ldr	r0, [sp, #12]
 8028430:	4651      	mov	r1, sl
 8028432:	f003 fc63 	bl	802bcfc <_free_r>
 8028436:	f7ff ba88 	b.w	802794a <_vfprintf_r+0x8e2>
 802843a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802843c:	b91b      	cbnz	r3, 8028446 <_vfprintf_r+0x13de>
 802843e:	2300      	movs	r3, #0
 8028440:	9327      	str	r3, [sp, #156]	@ 0x9c
 8028442:	f7ff b86e 	b.w	8027522 <_vfprintf_r+0x4ba>
 8028446:	9803      	ldr	r0, [sp, #12]
 8028448:	aa26      	add	r2, sp, #152	@ 0x98
 802844a:	4659      	mov	r1, fp
 802844c:	f000 f878 	bl	8028540 <__sprint_r>
 8028450:	2800      	cmp	r0, #0
 8028452:	d0f4      	beq.n	802843e <_vfprintf_r+0x13d6>
 8028454:	f7ff b865 	b.w	8027522 <_vfprintf_r+0x4ba>
 8028458:	ea56 0207 	orrs.w	r2, r6, r7
 802845c:	9508      	str	r5, [sp, #32]
 802845e:	f43f ab75 	beq.w	8027b4c <_vfprintf_r+0xae4>
 8028462:	2b01      	cmp	r3, #1
 8028464:	f43f abf6 	beq.w	8027c54 <_vfprintf_r+0xbec>
 8028468:	2b02      	cmp	r3, #2
 802846a:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802846e:	f43f ac3a 	beq.w	8027ce6 <_vfprintf_r+0xc7e>
 8028472:	f006 0307 	and.w	r3, r6, #7
 8028476:	08f6      	lsrs	r6, r6, #3
 8028478:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802847c:	08ff      	lsrs	r7, r7, #3
 802847e:	3330      	adds	r3, #48	@ 0x30
 8028480:	ea56 0107 	orrs.w	r1, r6, r7
 8028484:	4642      	mov	r2, r8
 8028486:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802848a:	d1f2      	bne.n	8028472 <_vfprintf_r+0x140a>
 802848c:	9908      	ldr	r1, [sp, #32]
 802848e:	07ce      	lsls	r6, r1, #31
 8028490:	d506      	bpl.n	80284a0 <_vfprintf_r+0x1438>
 8028492:	2b30      	cmp	r3, #48	@ 0x30
 8028494:	d004      	beq.n	80284a0 <_vfprintf_r+0x1438>
 8028496:	2330      	movs	r3, #48	@ 0x30
 8028498:	f808 3c01 	strb.w	r3, [r8, #-1]
 802849c:	f1a2 0802 	sub.w	r8, r2, #2
 80284a0:	ab52      	add	r3, sp, #328	@ 0x148
 80284a2:	9d08      	ldr	r5, [sp, #32]
 80284a4:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 80284a8:	f04f 0a00 	mov.w	sl, #0
 80284ac:	eba3 0908 	sub.w	r9, r3, r8
 80284b0:	4657      	mov	r7, sl
 80284b2:	f8cd a020 	str.w	sl, [sp, #32]
 80284b6:	4656      	mov	r6, sl
 80284b8:	f7ff b978 	b.w	80277ac <_vfprintf_r+0x744>
 80284bc:	080380ff 	.word	0x080380ff

080284c0 <__sbprintf>:
 80284c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80284c2:	461f      	mov	r7, r3
 80284c4:	898b      	ldrh	r3, [r1, #12]
 80284c6:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 80284ca:	f023 0302 	bic.w	r3, r3, #2
 80284ce:	f8ad 300c 	strh.w	r3, [sp, #12]
 80284d2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80284d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80284d6:	89cb      	ldrh	r3, [r1, #14]
 80284d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80284dc:	69cb      	ldr	r3, [r1, #28]
 80284de:	9307      	str	r3, [sp, #28]
 80284e0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80284e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80284e4:	ab1a      	add	r3, sp, #104	@ 0x68
 80284e6:	9300      	str	r3, [sp, #0]
 80284e8:	9304      	str	r3, [sp, #16]
 80284ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80284ee:	4615      	mov	r5, r2
 80284f0:	4606      	mov	r6, r0
 80284f2:	9302      	str	r3, [sp, #8]
 80284f4:	9305      	str	r3, [sp, #20]
 80284f6:	a816      	add	r0, sp, #88	@ 0x58
 80284f8:	2300      	movs	r3, #0
 80284fa:	460c      	mov	r4, r1
 80284fc:	9306      	str	r3, [sp, #24]
 80284fe:	f002 fcf5 	bl	802aeec <__retarget_lock_init_recursive>
 8028502:	462a      	mov	r2, r5
 8028504:	463b      	mov	r3, r7
 8028506:	4669      	mov	r1, sp
 8028508:	4630      	mov	r0, r6
 802850a:	f7fe fdad 	bl	8027068 <_vfprintf_r>
 802850e:	1e05      	subs	r5, r0, #0
 8028510:	db07      	blt.n	8028522 <__sbprintf+0x62>
 8028512:	4669      	mov	r1, sp
 8028514:	4630      	mov	r0, r6
 8028516:	f000 fecb 	bl	80292b0 <_fflush_r>
 802851a:	2800      	cmp	r0, #0
 802851c:	bf18      	it	ne
 802851e:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8028522:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8028526:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8028528:	065b      	lsls	r3, r3, #25
 802852a:	bf42      	ittt	mi
 802852c:	89a3      	ldrhmi	r3, [r4, #12]
 802852e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8028532:	81a3      	strhmi	r3, [r4, #12]
 8028534:	f002 fcdb 	bl	802aeee <__retarget_lock_close_recursive>
 8028538:	4628      	mov	r0, r5
 802853a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802853e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08028540 <__sprint_r>:
 8028540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028544:	6893      	ldr	r3, [r2, #8]
 8028546:	4680      	mov	r8, r0
 8028548:	460e      	mov	r6, r1
 802854a:	4614      	mov	r4, r2
 802854c:	b343      	cbz	r3, 80285a0 <__sprint_r+0x60>
 802854e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8028550:	049d      	lsls	r5, r3, #18
 8028552:	d522      	bpl.n	802859a <__sprint_r+0x5a>
 8028554:	6815      	ldr	r5, [r2, #0]
 8028556:	68a0      	ldr	r0, [r4, #8]
 8028558:	3508      	adds	r5, #8
 802855a:	b928      	cbnz	r0, 8028568 <__sprint_r+0x28>
 802855c:	2300      	movs	r3, #0
 802855e:	60a3      	str	r3, [r4, #8]
 8028560:	2300      	movs	r3, #0
 8028562:	6063      	str	r3, [r4, #4]
 8028564:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028568:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 802856c:	f04f 0900 	mov.w	r9, #0
 8028570:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 8028574:	45ca      	cmp	sl, r9
 8028576:	dc05      	bgt.n	8028584 <__sprint_r+0x44>
 8028578:	68a3      	ldr	r3, [r4, #8]
 802857a:	f027 0703 	bic.w	r7, r7, #3
 802857e:	1bdb      	subs	r3, r3, r7
 8028580:	60a3      	str	r3, [r4, #8]
 8028582:	e7e8      	b.n	8028556 <__sprint_r+0x16>
 8028584:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8028588:	4632      	mov	r2, r6
 802858a:	4640      	mov	r0, r8
 802858c:	f001 fa35 	bl	80299fa <_fputwc_r>
 8028590:	1c43      	adds	r3, r0, #1
 8028592:	d0e3      	beq.n	802855c <__sprint_r+0x1c>
 8028594:	f109 0901 	add.w	r9, r9, #1
 8028598:	e7ec      	b.n	8028574 <__sprint_r+0x34>
 802859a:	f001 f81d 	bl	80295d8 <__sfvwrite_r>
 802859e:	e7dd      	b.n	802855c <__sprint_r+0x1c>
 80285a0:	4618      	mov	r0, r3
 80285a2:	e7dd      	b.n	8028560 <__sprint_r+0x20>

080285a4 <_vfiprintf_r>:
 80285a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80285a8:	b0bb      	sub	sp, #236	@ 0xec
 80285aa:	460f      	mov	r7, r1
 80285ac:	4693      	mov	fp, r2
 80285ae:	461c      	mov	r4, r3
 80285b0:	461d      	mov	r5, r3
 80285b2:	9000      	str	r0, [sp, #0]
 80285b4:	b118      	cbz	r0, 80285be <_vfiprintf_r+0x1a>
 80285b6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80285b8:	b90b      	cbnz	r3, 80285be <_vfiprintf_r+0x1a>
 80285ba:	f000 ffbb 	bl	8029534 <__sinit>
 80285be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80285c0:	07db      	lsls	r3, r3, #31
 80285c2:	d405      	bmi.n	80285d0 <_vfiprintf_r+0x2c>
 80285c4:	89bb      	ldrh	r3, [r7, #12]
 80285c6:	059e      	lsls	r6, r3, #22
 80285c8:	d402      	bmi.n	80285d0 <_vfiprintf_r+0x2c>
 80285ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80285cc:	f002 fc91 	bl	802aef2 <__retarget_lock_acquire_recursive>
 80285d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80285d4:	0498      	lsls	r0, r3, #18
 80285d6:	d406      	bmi.n	80285e6 <_vfiprintf_r+0x42>
 80285d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80285dc:	81bb      	strh	r3, [r7, #12]
 80285de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80285e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80285e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80285e6:	89bb      	ldrh	r3, [r7, #12]
 80285e8:	0719      	lsls	r1, r3, #28
 80285ea:	d501      	bpl.n	80285f0 <_vfiprintf_r+0x4c>
 80285ec:	693b      	ldr	r3, [r7, #16]
 80285ee:	b9ab      	cbnz	r3, 802861c <_vfiprintf_r+0x78>
 80285f0:	9800      	ldr	r0, [sp, #0]
 80285f2:	4639      	mov	r1, r7
 80285f4:	f001 f95a 	bl	80298ac <__swsetup_r>
 80285f8:	b180      	cbz	r0, 802861c <_vfiprintf_r+0x78>
 80285fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80285fc:	07da      	lsls	r2, r3, #31
 80285fe:	d506      	bpl.n	802860e <_vfiprintf_r+0x6a>
 8028600:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028604:	9303      	str	r3, [sp, #12]
 8028606:	9803      	ldr	r0, [sp, #12]
 8028608:	b03b      	add	sp, #236	@ 0xec
 802860a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802860e:	89bb      	ldrh	r3, [r7, #12]
 8028610:	059b      	lsls	r3, r3, #22
 8028612:	d4f5      	bmi.n	8028600 <_vfiprintf_r+0x5c>
 8028614:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028616:	f002 fc6e 	bl	802aef6 <__retarget_lock_release_recursive>
 802861a:	e7f1      	b.n	8028600 <_vfiprintf_r+0x5c>
 802861c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8028620:	f003 021a 	and.w	r2, r3, #26
 8028624:	2a0a      	cmp	r2, #10
 8028626:	d114      	bne.n	8028652 <_vfiprintf_r+0xae>
 8028628:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802862c:	2a00      	cmp	r2, #0
 802862e:	db10      	blt.n	8028652 <_vfiprintf_r+0xae>
 8028630:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8028632:	07d6      	lsls	r6, r2, #31
 8028634:	d404      	bmi.n	8028640 <_vfiprintf_r+0x9c>
 8028636:	059d      	lsls	r5, r3, #22
 8028638:	d402      	bmi.n	8028640 <_vfiprintf_r+0x9c>
 802863a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802863c:	f002 fc5b 	bl	802aef6 <__retarget_lock_release_recursive>
 8028640:	9800      	ldr	r0, [sp, #0]
 8028642:	4623      	mov	r3, r4
 8028644:	465a      	mov	r2, fp
 8028646:	4639      	mov	r1, r7
 8028648:	b03b      	add	sp, #236	@ 0xec
 802864a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802864e:	f000 bc31 	b.w	8028eb4 <__sbprintf>
 8028652:	2300      	movs	r3, #0
 8028654:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8028658:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802865c:	ae11      	add	r6, sp, #68	@ 0x44
 802865e:	960e      	str	r6, [sp, #56]	@ 0x38
 8028660:	9307      	str	r3, [sp, #28]
 8028662:	9309      	str	r3, [sp, #36]	@ 0x24
 8028664:	9303      	str	r3, [sp, #12]
 8028666:	465b      	mov	r3, fp
 8028668:	461c      	mov	r4, r3
 802866a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802866e:	b10a      	cbz	r2, 8028674 <_vfiprintf_r+0xd0>
 8028670:	2a25      	cmp	r2, #37	@ 0x25
 8028672:	d1f9      	bne.n	8028668 <_vfiprintf_r+0xc4>
 8028674:	ebb4 080b 	subs.w	r8, r4, fp
 8028678:	d00d      	beq.n	8028696 <_vfiprintf_r+0xf2>
 802867a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802867c:	4443      	add	r3, r8
 802867e:	9310      	str	r3, [sp, #64]	@ 0x40
 8028680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028682:	3301      	adds	r3, #1
 8028684:	2b07      	cmp	r3, #7
 8028686:	e9c6 b800 	strd	fp, r8, [r6]
 802868a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802868c:	dc75      	bgt.n	802877a <_vfiprintf_r+0x1d6>
 802868e:	3608      	adds	r6, #8
 8028690:	9b03      	ldr	r3, [sp, #12]
 8028692:	4443      	add	r3, r8
 8028694:	9303      	str	r3, [sp, #12]
 8028696:	7823      	ldrb	r3, [r4, #0]
 8028698:	2b00      	cmp	r3, #0
 802869a:	f000 83cd 	beq.w	8028e38 <_vfiprintf_r+0x894>
 802869e:	2300      	movs	r3, #0
 80286a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80286a4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80286a8:	3401      	adds	r4, #1
 80286aa:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80286ae:	469a      	mov	sl, r3
 80286b0:	46a3      	mov	fp, r4
 80286b2:	f81b 3b01 	ldrb.w	r3, [fp], #1
 80286b6:	f1a3 0220 	sub.w	r2, r3, #32
 80286ba:	2a5a      	cmp	r2, #90	@ 0x5a
 80286bc:	f200 8316 	bhi.w	8028cec <_vfiprintf_r+0x748>
 80286c0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80286c4:	0314009a 	.word	0x0314009a
 80286c8:	00a20314 	.word	0x00a20314
 80286cc:	03140314 	.word	0x03140314
 80286d0:	00820314 	.word	0x00820314
 80286d4:	03140314 	.word	0x03140314
 80286d8:	00af00a5 	.word	0x00af00a5
 80286dc:	00ac0314 	.word	0x00ac0314
 80286e0:	031400b1 	.word	0x031400b1
 80286e4:	00d000cd 	.word	0x00d000cd
 80286e8:	00d000d0 	.word	0x00d000d0
 80286ec:	00d000d0 	.word	0x00d000d0
 80286f0:	00d000d0 	.word	0x00d000d0
 80286f4:	00d000d0 	.word	0x00d000d0
 80286f8:	03140314 	.word	0x03140314
 80286fc:	03140314 	.word	0x03140314
 8028700:	03140314 	.word	0x03140314
 8028704:	03140314 	.word	0x03140314
 8028708:	00f70314 	.word	0x00f70314
 802870c:	03140104 	.word	0x03140104
 8028710:	03140314 	.word	0x03140314
 8028714:	03140314 	.word	0x03140314
 8028718:	03140314 	.word	0x03140314
 802871c:	03140314 	.word	0x03140314
 8028720:	01520314 	.word	0x01520314
 8028724:	03140314 	.word	0x03140314
 8028728:	019a0314 	.word	0x019a0314
 802872c:	027a0314 	.word	0x027a0314
 8028730:	03140314 	.word	0x03140314
 8028734:	0314029a 	.word	0x0314029a
 8028738:	03140314 	.word	0x03140314
 802873c:	03140314 	.word	0x03140314
 8028740:	03140314 	.word	0x03140314
 8028744:	03140314 	.word	0x03140314
 8028748:	00f70314 	.word	0x00f70314
 802874c:	03140106 	.word	0x03140106
 8028750:	03140314 	.word	0x03140314
 8028754:	010600e0 	.word	0x010600e0
 8028758:	031400f1 	.word	0x031400f1
 802875c:	031400eb 	.word	0x031400eb
 8028760:	01540132 	.word	0x01540132
 8028764:	00f10189 	.word	0x00f10189
 8028768:	019a0314 	.word	0x019a0314
 802876c:	027c0098 	.word	0x027c0098
 8028770:	03140314 	.word	0x03140314
 8028774:	03140065 	.word	0x03140065
 8028778:	0098      	.short	0x0098
 802877a:	9800      	ldr	r0, [sp, #0]
 802877c:	aa0e      	add	r2, sp, #56	@ 0x38
 802877e:	4639      	mov	r1, r7
 8028780:	f7ff fede 	bl	8028540 <__sprint_r>
 8028784:	2800      	cmp	r0, #0
 8028786:	f040 8336 	bne.w	8028df6 <_vfiprintf_r+0x852>
 802878a:	ae11      	add	r6, sp, #68	@ 0x44
 802878c:	e780      	b.n	8028690 <_vfiprintf_r+0xec>
 802878e:	4a99      	ldr	r2, [pc, #612]	@ (80289f4 <_vfiprintf_r+0x450>)
 8028790:	9205      	str	r2, [sp, #20]
 8028792:	f01a 0220 	ands.w	r2, sl, #32
 8028796:	f000 8231 	beq.w	8028bfc <_vfiprintf_r+0x658>
 802879a:	3507      	adds	r5, #7
 802879c:	f025 0507 	bic.w	r5, r5, #7
 80287a0:	46a8      	mov	r8, r5
 80287a2:	686d      	ldr	r5, [r5, #4]
 80287a4:	f858 4b08 	ldr.w	r4, [r8], #8
 80287a8:	f01a 0f01 	tst.w	sl, #1
 80287ac:	d009      	beq.n	80287c2 <_vfiprintf_r+0x21e>
 80287ae:	ea54 0205 	orrs.w	r2, r4, r5
 80287b2:	bf1f      	itttt	ne
 80287b4:	2230      	movne	r2, #48	@ 0x30
 80287b6:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 80287ba:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 80287be:	f04a 0a02 	orrne.w	sl, sl, #2
 80287c2:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 80287c6:	e112      	b.n	80289ee <_vfiprintf_r+0x44a>
 80287c8:	9800      	ldr	r0, [sp, #0]
 80287ca:	f002 fae7 	bl	802ad9c <_localeconv_r>
 80287ce:	6843      	ldr	r3, [r0, #4]
 80287d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80287d2:	4618      	mov	r0, r3
 80287d4:	f7e7 fd64 	bl	80102a0 <strlen>
 80287d8:	9007      	str	r0, [sp, #28]
 80287da:	9800      	ldr	r0, [sp, #0]
 80287dc:	f002 fade 	bl	802ad9c <_localeconv_r>
 80287e0:	6883      	ldr	r3, [r0, #8]
 80287e2:	9306      	str	r3, [sp, #24]
 80287e4:	9b07      	ldr	r3, [sp, #28]
 80287e6:	b12b      	cbz	r3, 80287f4 <_vfiprintf_r+0x250>
 80287e8:	9b06      	ldr	r3, [sp, #24]
 80287ea:	b11b      	cbz	r3, 80287f4 <_vfiprintf_r+0x250>
 80287ec:	781b      	ldrb	r3, [r3, #0]
 80287ee:	b10b      	cbz	r3, 80287f4 <_vfiprintf_r+0x250>
 80287f0:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 80287f4:	465c      	mov	r4, fp
 80287f6:	e75b      	b.n	80286b0 <_vfiprintf_r+0x10c>
 80287f8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80287fc:	2b00      	cmp	r3, #0
 80287fe:	d1f9      	bne.n	80287f4 <_vfiprintf_r+0x250>
 8028800:	2320      	movs	r3, #32
 8028802:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8028806:	e7f5      	b.n	80287f4 <_vfiprintf_r+0x250>
 8028808:	f04a 0a01 	orr.w	sl, sl, #1
 802880c:	e7f2      	b.n	80287f4 <_vfiprintf_r+0x250>
 802880e:	f855 3b04 	ldr.w	r3, [r5], #4
 8028812:	9302      	str	r3, [sp, #8]
 8028814:	2b00      	cmp	r3, #0
 8028816:	daed      	bge.n	80287f4 <_vfiprintf_r+0x250>
 8028818:	425b      	negs	r3, r3
 802881a:	9302      	str	r3, [sp, #8]
 802881c:	f04a 0a04 	orr.w	sl, sl, #4
 8028820:	e7e8      	b.n	80287f4 <_vfiprintf_r+0x250>
 8028822:	232b      	movs	r3, #43	@ 0x2b
 8028824:	e7ed      	b.n	8028802 <_vfiprintf_r+0x25e>
 8028826:	465a      	mov	r2, fp
 8028828:	f812 3b01 	ldrb.w	r3, [r2], #1
 802882c:	2b2a      	cmp	r3, #42	@ 0x2a
 802882e:	d112      	bne.n	8028856 <_vfiprintf_r+0x2b2>
 8028830:	f855 3b04 	ldr.w	r3, [r5], #4
 8028834:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8028838:	9301      	str	r3, [sp, #4]
 802883a:	4693      	mov	fp, r2
 802883c:	e7da      	b.n	80287f4 <_vfiprintf_r+0x250>
 802883e:	9b01      	ldr	r3, [sp, #4]
 8028840:	fb00 1303 	mla	r3, r0, r3, r1
 8028844:	9301      	str	r3, [sp, #4]
 8028846:	f812 3b01 	ldrb.w	r3, [r2], #1
 802884a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802884e:	2909      	cmp	r1, #9
 8028850:	d9f5      	bls.n	802883e <_vfiprintf_r+0x29a>
 8028852:	4693      	mov	fp, r2
 8028854:	e72f      	b.n	80286b6 <_vfiprintf_r+0x112>
 8028856:	2100      	movs	r1, #0
 8028858:	9101      	str	r1, [sp, #4]
 802885a:	200a      	movs	r0, #10
 802885c:	e7f5      	b.n	802884a <_vfiprintf_r+0x2a6>
 802885e:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 8028862:	e7c7      	b.n	80287f4 <_vfiprintf_r+0x250>
 8028864:	2100      	movs	r1, #0
 8028866:	465a      	mov	r2, fp
 8028868:	9102      	str	r1, [sp, #8]
 802886a:	200a      	movs	r0, #10
 802886c:	9902      	ldr	r1, [sp, #8]
 802886e:	3b30      	subs	r3, #48	@ 0x30
 8028870:	fb00 3301 	mla	r3, r0, r1, r3
 8028874:	9302      	str	r3, [sp, #8]
 8028876:	f812 3b01 	ldrb.w	r3, [r2], #1
 802887a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802887e:	2909      	cmp	r1, #9
 8028880:	d9f4      	bls.n	802886c <_vfiprintf_r+0x2c8>
 8028882:	e7e6      	b.n	8028852 <_vfiprintf_r+0x2ae>
 8028884:	f89b 3000 	ldrb.w	r3, [fp]
 8028888:	2b68      	cmp	r3, #104	@ 0x68
 802888a:	bf06      	itte	eq
 802888c:	f10b 0b01 	addeq.w	fp, fp, #1
 8028890:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8028894:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8028898:	e7ac      	b.n	80287f4 <_vfiprintf_r+0x250>
 802889a:	f89b 3000 	ldrb.w	r3, [fp]
 802889e:	2b6c      	cmp	r3, #108	@ 0x6c
 80288a0:	d104      	bne.n	80288ac <_vfiprintf_r+0x308>
 80288a2:	f10b 0b01 	add.w	fp, fp, #1
 80288a6:	f04a 0a20 	orr.w	sl, sl, #32
 80288aa:	e7a3      	b.n	80287f4 <_vfiprintf_r+0x250>
 80288ac:	f04a 0a10 	orr.w	sl, sl, #16
 80288b0:	e7a0      	b.n	80287f4 <_vfiprintf_r+0x250>
 80288b2:	46a8      	mov	r8, r5
 80288b4:	2400      	movs	r4, #0
 80288b6:	f858 3b04 	ldr.w	r3, [r8], #4
 80288ba:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80288be:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80288c2:	2301      	movs	r3, #1
 80288c4:	9301      	str	r3, [sp, #4]
 80288c6:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 80288ca:	e0ab      	b.n	8028a24 <_vfiprintf_r+0x480>
 80288cc:	f04a 0a10 	orr.w	sl, sl, #16
 80288d0:	f01a 0f20 	tst.w	sl, #32
 80288d4:	d011      	beq.n	80288fa <_vfiprintf_r+0x356>
 80288d6:	3507      	adds	r5, #7
 80288d8:	f025 0507 	bic.w	r5, r5, #7
 80288dc:	46a8      	mov	r8, r5
 80288de:	686d      	ldr	r5, [r5, #4]
 80288e0:	f858 4b08 	ldr.w	r4, [r8], #8
 80288e4:	2d00      	cmp	r5, #0
 80288e6:	da06      	bge.n	80288f6 <_vfiprintf_r+0x352>
 80288e8:	4264      	negs	r4, r4
 80288ea:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 80288ee:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80288f2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80288f6:	2301      	movs	r3, #1
 80288f8:	e048      	b.n	802898c <_vfiprintf_r+0x3e8>
 80288fa:	46a8      	mov	r8, r5
 80288fc:	f01a 0f10 	tst.w	sl, #16
 8028900:	f858 5b04 	ldr.w	r5, [r8], #4
 8028904:	d002      	beq.n	802890c <_vfiprintf_r+0x368>
 8028906:	462c      	mov	r4, r5
 8028908:	17ed      	asrs	r5, r5, #31
 802890a:	e7eb      	b.n	80288e4 <_vfiprintf_r+0x340>
 802890c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8028910:	d003      	beq.n	802891a <_vfiprintf_r+0x376>
 8028912:	b22c      	sxth	r4, r5
 8028914:	f345 35c0 	sbfx	r5, r5, #15, #1
 8028918:	e7e4      	b.n	80288e4 <_vfiprintf_r+0x340>
 802891a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802891e:	d0f2      	beq.n	8028906 <_vfiprintf_r+0x362>
 8028920:	b26c      	sxtb	r4, r5
 8028922:	f345 15c0 	sbfx	r5, r5, #7, #1
 8028926:	e7dd      	b.n	80288e4 <_vfiprintf_r+0x340>
 8028928:	f01a 0f20 	tst.w	sl, #32
 802892c:	d007      	beq.n	802893e <_vfiprintf_r+0x39a>
 802892e:	9a03      	ldr	r2, [sp, #12]
 8028930:	682b      	ldr	r3, [r5, #0]
 8028932:	9903      	ldr	r1, [sp, #12]
 8028934:	17d2      	asrs	r2, r2, #31
 8028936:	e9c3 1200 	strd	r1, r2, [r3]
 802893a:	3504      	adds	r5, #4
 802893c:	e693      	b.n	8028666 <_vfiprintf_r+0xc2>
 802893e:	f01a 0f10 	tst.w	sl, #16
 8028942:	d003      	beq.n	802894c <_vfiprintf_r+0x3a8>
 8028944:	682b      	ldr	r3, [r5, #0]
 8028946:	9a03      	ldr	r2, [sp, #12]
 8028948:	601a      	str	r2, [r3, #0]
 802894a:	e7f6      	b.n	802893a <_vfiprintf_r+0x396>
 802894c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8028950:	d003      	beq.n	802895a <_vfiprintf_r+0x3b6>
 8028952:	682b      	ldr	r3, [r5, #0]
 8028954:	9a03      	ldr	r2, [sp, #12]
 8028956:	801a      	strh	r2, [r3, #0]
 8028958:	e7ef      	b.n	802893a <_vfiprintf_r+0x396>
 802895a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802895e:	d0f1      	beq.n	8028944 <_vfiprintf_r+0x3a0>
 8028960:	682b      	ldr	r3, [r5, #0]
 8028962:	9a03      	ldr	r2, [sp, #12]
 8028964:	701a      	strb	r2, [r3, #0]
 8028966:	e7e8      	b.n	802893a <_vfiprintf_r+0x396>
 8028968:	f04a 0a10 	orr.w	sl, sl, #16
 802896c:	f01a 0320 	ands.w	r3, sl, #32
 8028970:	d01f      	beq.n	80289b2 <_vfiprintf_r+0x40e>
 8028972:	3507      	adds	r5, #7
 8028974:	f025 0507 	bic.w	r5, r5, #7
 8028978:	46a8      	mov	r8, r5
 802897a:	686d      	ldr	r5, [r5, #4]
 802897c:	f858 4b08 	ldr.w	r4, [r8], #8
 8028980:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8028984:	2300      	movs	r3, #0
 8028986:	2200      	movs	r2, #0
 8028988:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802898c:	9a01      	ldr	r2, [sp, #4]
 802898e:	3201      	adds	r2, #1
 8028990:	f000 825f 	beq.w	8028e52 <_vfiprintf_r+0x8ae>
 8028994:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8028998:	9204      	str	r2, [sp, #16]
 802899a:	ea54 0205 	orrs.w	r2, r4, r5
 802899e:	f040 825e 	bne.w	8028e5e <_vfiprintf_r+0x8ba>
 80289a2:	9a01      	ldr	r2, [sp, #4]
 80289a4:	2a00      	cmp	r2, #0
 80289a6:	f000 8198 	beq.w	8028cda <_vfiprintf_r+0x736>
 80289aa:	2b01      	cmp	r3, #1
 80289ac:	f040 825a 	bne.w	8028e64 <_vfiprintf_r+0x8c0>
 80289b0:	e13b      	b.n	8028c2a <_vfiprintf_r+0x686>
 80289b2:	46a8      	mov	r8, r5
 80289b4:	f01a 0510 	ands.w	r5, sl, #16
 80289b8:	f858 4b04 	ldr.w	r4, [r8], #4
 80289bc:	d001      	beq.n	80289c2 <_vfiprintf_r+0x41e>
 80289be:	461d      	mov	r5, r3
 80289c0:	e7de      	b.n	8028980 <_vfiprintf_r+0x3dc>
 80289c2:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 80289c6:	d001      	beq.n	80289cc <_vfiprintf_r+0x428>
 80289c8:	b2a4      	uxth	r4, r4
 80289ca:	e7d9      	b.n	8028980 <_vfiprintf_r+0x3dc>
 80289cc:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80289d0:	d0d6      	beq.n	8028980 <_vfiprintf_r+0x3dc>
 80289d2:	b2e4      	uxtb	r4, r4
 80289d4:	e7f3      	b.n	80289be <_vfiprintf_r+0x41a>
 80289d6:	46a8      	mov	r8, r5
 80289d8:	f647 0330 	movw	r3, #30768	@ 0x7830
 80289dc:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80289e0:	f858 4b04 	ldr.w	r4, [r8], #4
 80289e4:	4b03      	ldr	r3, [pc, #12]	@ (80289f4 <_vfiprintf_r+0x450>)
 80289e6:	9305      	str	r3, [sp, #20]
 80289e8:	2500      	movs	r5, #0
 80289ea:	f04a 0a02 	orr.w	sl, sl, #2
 80289ee:	2302      	movs	r3, #2
 80289f0:	e7c9      	b.n	8028986 <_vfiprintf_r+0x3e2>
 80289f2:	bf00      	nop
 80289f4:	080380cb 	.word	0x080380cb
 80289f8:	9b01      	ldr	r3, [sp, #4]
 80289fa:	46a8      	mov	r8, r5
 80289fc:	1c5c      	adds	r4, r3, #1
 80289fe:	f04f 0500 	mov.w	r5, #0
 8028a02:	f858 9b04 	ldr.w	r9, [r8], #4
 8028a06:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8028a0a:	f000 80d0 	beq.w	8028bae <_vfiprintf_r+0x60a>
 8028a0e:	461a      	mov	r2, r3
 8028a10:	4629      	mov	r1, r5
 8028a12:	4648      	mov	r0, r9
 8028a14:	f7e7 fbf4 	bl	8010200 <memchr>
 8028a18:	4604      	mov	r4, r0
 8028a1a:	b118      	cbz	r0, 8028a24 <_vfiprintf_r+0x480>
 8028a1c:	eba0 0309 	sub.w	r3, r0, r9
 8028a20:	9301      	str	r3, [sp, #4]
 8028a22:	462c      	mov	r4, r5
 8028a24:	9b01      	ldr	r3, [sp, #4]
 8028a26:	42a3      	cmp	r3, r4
 8028a28:	bfb8      	it	lt
 8028a2a:	4623      	movlt	r3, r4
 8028a2c:	9304      	str	r3, [sp, #16]
 8028a2e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8028a32:	b113      	cbz	r3, 8028a3a <_vfiprintf_r+0x496>
 8028a34:	9b04      	ldr	r3, [sp, #16]
 8028a36:	3301      	adds	r3, #1
 8028a38:	9304      	str	r3, [sp, #16]
 8028a3a:	f01a 0302 	ands.w	r3, sl, #2
 8028a3e:	9308      	str	r3, [sp, #32]
 8028a40:	bf1e      	ittt	ne
 8028a42:	9b04      	ldrne	r3, [sp, #16]
 8028a44:	3302      	addne	r3, #2
 8028a46:	9304      	strne	r3, [sp, #16]
 8028a48:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8028a4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8028a4e:	d11f      	bne.n	8028a90 <_vfiprintf_r+0x4ec>
 8028a50:	9b02      	ldr	r3, [sp, #8]
 8028a52:	9a04      	ldr	r2, [sp, #16]
 8028a54:	1a9d      	subs	r5, r3, r2
 8028a56:	2d00      	cmp	r5, #0
 8028a58:	dd1a      	ble.n	8028a90 <_vfiprintf_r+0x4ec>
 8028a5a:	4ba9      	ldr	r3, [pc, #676]	@ (8028d00 <_vfiprintf_r+0x75c>)
 8028a5c:	6033      	str	r3, [r6, #0]
 8028a5e:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8028a62:	2d10      	cmp	r5, #16
 8028a64:	f102 0201 	add.w	r2, r2, #1
 8028a68:	f106 0008 	add.w	r0, r6, #8
 8028a6c:	f300 814e 	bgt.w	8028d0c <_vfiprintf_r+0x768>
 8028a70:	6075      	str	r5, [r6, #4]
 8028a72:	2a07      	cmp	r2, #7
 8028a74:	4465      	add	r5, ip
 8028a76:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8028a7a:	f340 815a 	ble.w	8028d32 <_vfiprintf_r+0x78e>
 8028a7e:	9800      	ldr	r0, [sp, #0]
 8028a80:	aa0e      	add	r2, sp, #56	@ 0x38
 8028a82:	4639      	mov	r1, r7
 8028a84:	f7ff fd5c 	bl	8028540 <__sprint_r>
 8028a88:	2800      	cmp	r0, #0
 8028a8a:	f040 81b4 	bne.w	8028df6 <_vfiprintf_r+0x852>
 8028a8e:	ae11      	add	r6, sp, #68	@ 0x44
 8028a90:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8028a94:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8028a98:	b161      	cbz	r1, 8028ab4 <_vfiprintf_r+0x510>
 8028a9a:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8028a9e:	3301      	adds	r3, #1
 8028aa0:	6031      	str	r1, [r6, #0]
 8028aa2:	2101      	movs	r1, #1
 8028aa4:	440a      	add	r2, r1
 8028aa6:	2b07      	cmp	r3, #7
 8028aa8:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8028aac:	6071      	str	r1, [r6, #4]
 8028aae:	f300 8142 	bgt.w	8028d36 <_vfiprintf_r+0x792>
 8028ab2:	3608      	adds	r6, #8
 8028ab4:	9908      	ldr	r1, [sp, #32]
 8028ab6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8028aba:	b159      	cbz	r1, 8028ad4 <_vfiprintf_r+0x530>
 8028abc:	a90d      	add	r1, sp, #52	@ 0x34
 8028abe:	3301      	adds	r3, #1
 8028ac0:	6031      	str	r1, [r6, #0]
 8028ac2:	2102      	movs	r1, #2
 8028ac4:	440a      	add	r2, r1
 8028ac6:	2b07      	cmp	r3, #7
 8028ac8:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8028acc:	6071      	str	r1, [r6, #4]
 8028ace:	f300 813b 	bgt.w	8028d48 <_vfiprintf_r+0x7a4>
 8028ad2:	3608      	adds	r6, #8
 8028ad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028ad6:	2b80      	cmp	r3, #128	@ 0x80
 8028ad8:	d11f      	bne.n	8028b1a <_vfiprintf_r+0x576>
 8028ada:	9b02      	ldr	r3, [sp, #8]
 8028adc:	9a04      	ldr	r2, [sp, #16]
 8028ade:	1a9d      	subs	r5, r3, r2
 8028ae0:	2d00      	cmp	r5, #0
 8028ae2:	dd1a      	ble.n	8028b1a <_vfiprintf_r+0x576>
 8028ae4:	4b87      	ldr	r3, [pc, #540]	@ (8028d04 <_vfiprintf_r+0x760>)
 8028ae6:	6033      	str	r3, [r6, #0]
 8028ae8:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8028aec:	2d10      	cmp	r5, #16
 8028aee:	f102 0201 	add.w	r2, r2, #1
 8028af2:	f106 0008 	add.w	r0, r6, #8
 8028af6:	f300 8130 	bgt.w	8028d5a <_vfiprintf_r+0x7b6>
 8028afa:	6075      	str	r5, [r6, #4]
 8028afc:	2a07      	cmp	r2, #7
 8028afe:	4465      	add	r5, ip
 8028b00:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8028b04:	f340 813c 	ble.w	8028d80 <_vfiprintf_r+0x7dc>
 8028b08:	9800      	ldr	r0, [sp, #0]
 8028b0a:	aa0e      	add	r2, sp, #56	@ 0x38
 8028b0c:	4639      	mov	r1, r7
 8028b0e:	f7ff fd17 	bl	8028540 <__sprint_r>
 8028b12:	2800      	cmp	r0, #0
 8028b14:	f040 816f 	bne.w	8028df6 <_vfiprintf_r+0x852>
 8028b18:	ae11      	add	r6, sp, #68	@ 0x44
 8028b1a:	9b01      	ldr	r3, [sp, #4]
 8028b1c:	1ae4      	subs	r4, r4, r3
 8028b1e:	2c00      	cmp	r4, #0
 8028b20:	dd1a      	ble.n	8028b58 <_vfiprintf_r+0x5b4>
 8028b22:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8028b26:	4877      	ldr	r0, [pc, #476]	@ (8028d04 <_vfiprintf_r+0x760>)
 8028b28:	6030      	str	r0, [r6, #0]
 8028b2a:	2c10      	cmp	r4, #16
 8028b2c:	f103 0301 	add.w	r3, r3, #1
 8028b30:	f106 0108 	add.w	r1, r6, #8
 8028b34:	f300 8126 	bgt.w	8028d84 <_vfiprintf_r+0x7e0>
 8028b38:	6074      	str	r4, [r6, #4]
 8028b3a:	2b07      	cmp	r3, #7
 8028b3c:	4414      	add	r4, r2
 8028b3e:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8028b42:	f340 8130 	ble.w	8028da6 <_vfiprintf_r+0x802>
 8028b46:	9800      	ldr	r0, [sp, #0]
 8028b48:	aa0e      	add	r2, sp, #56	@ 0x38
 8028b4a:	4639      	mov	r1, r7
 8028b4c:	f7ff fcf8 	bl	8028540 <__sprint_r>
 8028b50:	2800      	cmp	r0, #0
 8028b52:	f040 8150 	bne.w	8028df6 <_vfiprintf_r+0x852>
 8028b56:	ae11      	add	r6, sp, #68	@ 0x44
 8028b58:	9b01      	ldr	r3, [sp, #4]
 8028b5a:	9a01      	ldr	r2, [sp, #4]
 8028b5c:	6073      	str	r3, [r6, #4]
 8028b5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028b60:	f8c6 9000 	str.w	r9, [r6]
 8028b64:	4413      	add	r3, r2
 8028b66:	9310      	str	r3, [sp, #64]	@ 0x40
 8028b68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028b6a:	3301      	adds	r3, #1
 8028b6c:	2b07      	cmp	r3, #7
 8028b6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028b70:	f300 811b 	bgt.w	8028daa <_vfiprintf_r+0x806>
 8028b74:	f106 0308 	add.w	r3, r6, #8
 8028b78:	f01a 0f04 	tst.w	sl, #4
 8028b7c:	f040 811d 	bne.w	8028dba <_vfiprintf_r+0x816>
 8028b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8028b84:	9904      	ldr	r1, [sp, #16]
 8028b86:	428a      	cmp	r2, r1
 8028b88:	bfac      	ite	ge
 8028b8a:	189b      	addge	r3, r3, r2
 8028b8c:	185b      	addlt	r3, r3, r1
 8028b8e:	9303      	str	r3, [sp, #12]
 8028b90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028b92:	b13b      	cbz	r3, 8028ba4 <_vfiprintf_r+0x600>
 8028b94:	9800      	ldr	r0, [sp, #0]
 8028b96:	aa0e      	add	r2, sp, #56	@ 0x38
 8028b98:	4639      	mov	r1, r7
 8028b9a:	f7ff fcd1 	bl	8028540 <__sprint_r>
 8028b9e:	2800      	cmp	r0, #0
 8028ba0:	f040 8129 	bne.w	8028df6 <_vfiprintf_r+0x852>
 8028ba4:	2300      	movs	r3, #0
 8028ba6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028ba8:	4645      	mov	r5, r8
 8028baa:	ae11      	add	r6, sp, #68	@ 0x44
 8028bac:	e55b      	b.n	8028666 <_vfiprintf_r+0xc2>
 8028bae:	4648      	mov	r0, r9
 8028bb0:	f7e7 fb76 	bl	80102a0 <strlen>
 8028bb4:	9001      	str	r0, [sp, #4]
 8028bb6:	e734      	b.n	8028a22 <_vfiprintf_r+0x47e>
 8028bb8:	f04a 0a10 	orr.w	sl, sl, #16
 8028bbc:	f01a 0320 	ands.w	r3, sl, #32
 8028bc0:	d008      	beq.n	8028bd4 <_vfiprintf_r+0x630>
 8028bc2:	3507      	adds	r5, #7
 8028bc4:	f025 0507 	bic.w	r5, r5, #7
 8028bc8:	46a8      	mov	r8, r5
 8028bca:	686d      	ldr	r5, [r5, #4]
 8028bcc:	f858 4b08 	ldr.w	r4, [r8], #8
 8028bd0:	2301      	movs	r3, #1
 8028bd2:	e6d8      	b.n	8028986 <_vfiprintf_r+0x3e2>
 8028bd4:	46a8      	mov	r8, r5
 8028bd6:	f01a 0510 	ands.w	r5, sl, #16
 8028bda:	f858 4b04 	ldr.w	r4, [r8], #4
 8028bde:	d001      	beq.n	8028be4 <_vfiprintf_r+0x640>
 8028be0:	461d      	mov	r5, r3
 8028be2:	e7f5      	b.n	8028bd0 <_vfiprintf_r+0x62c>
 8028be4:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8028be8:	d001      	beq.n	8028bee <_vfiprintf_r+0x64a>
 8028bea:	b2a4      	uxth	r4, r4
 8028bec:	e7f0      	b.n	8028bd0 <_vfiprintf_r+0x62c>
 8028bee:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8028bf2:	d0ed      	beq.n	8028bd0 <_vfiprintf_r+0x62c>
 8028bf4:	b2e4      	uxtb	r4, r4
 8028bf6:	e7f3      	b.n	8028be0 <_vfiprintf_r+0x63c>
 8028bf8:	4a43      	ldr	r2, [pc, #268]	@ (8028d08 <_vfiprintf_r+0x764>)
 8028bfa:	e5c9      	b.n	8028790 <_vfiprintf_r+0x1ec>
 8028bfc:	46a8      	mov	r8, r5
 8028bfe:	f01a 0510 	ands.w	r5, sl, #16
 8028c02:	f858 4b04 	ldr.w	r4, [r8], #4
 8028c06:	d001      	beq.n	8028c0c <_vfiprintf_r+0x668>
 8028c08:	4615      	mov	r5, r2
 8028c0a:	e5cd      	b.n	80287a8 <_vfiprintf_r+0x204>
 8028c0c:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8028c10:	d001      	beq.n	8028c16 <_vfiprintf_r+0x672>
 8028c12:	b2a4      	uxth	r4, r4
 8028c14:	e5c8      	b.n	80287a8 <_vfiprintf_r+0x204>
 8028c16:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8028c1a:	f43f adc5 	beq.w	80287a8 <_vfiprintf_r+0x204>
 8028c1e:	b2e4      	uxtb	r4, r4
 8028c20:	e7f2      	b.n	8028c08 <_vfiprintf_r+0x664>
 8028c22:	2c0a      	cmp	r4, #10
 8028c24:	f175 0300 	sbcs.w	r3, r5, #0
 8028c28:	d206      	bcs.n	8028c38 <_vfiprintf_r+0x694>
 8028c2a:	3430      	adds	r4, #48	@ 0x30
 8028c2c:	b2e4      	uxtb	r4, r4
 8028c2e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8028c32:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 8028c36:	e131      	b.n	8028e9c <_vfiprintf_r+0x8f8>
 8028c38:	ab3a      	add	r3, sp, #232	@ 0xe8
 8028c3a:	9308      	str	r3, [sp, #32]
 8028c3c:	9b04      	ldr	r3, [sp, #16]
 8028c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8028c42:	f04f 0a00 	mov.w	sl, #0
 8028c46:	930a      	str	r3, [sp, #40]	@ 0x28
 8028c48:	220a      	movs	r2, #10
 8028c4a:	2300      	movs	r3, #0
 8028c4c:	4620      	mov	r0, r4
 8028c4e:	4629      	mov	r1, r5
 8028c50:	f7e8 f882 	bl	8010d58 <__aeabi_uldivmod>
 8028c54:	460b      	mov	r3, r1
 8028c56:	9908      	ldr	r1, [sp, #32]
 8028c58:	900b      	str	r0, [sp, #44]	@ 0x2c
 8028c5a:	3230      	adds	r2, #48	@ 0x30
 8028c5c:	f801 2c01 	strb.w	r2, [r1, #-1]
 8028c60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028c62:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 8028c66:	f10a 0a01 	add.w	sl, sl, #1
 8028c6a:	b1e2      	cbz	r2, 8028ca6 <_vfiprintf_r+0x702>
 8028c6c:	9a06      	ldr	r2, [sp, #24]
 8028c6e:	7812      	ldrb	r2, [r2, #0]
 8028c70:	4552      	cmp	r2, sl
 8028c72:	d118      	bne.n	8028ca6 <_vfiprintf_r+0x702>
 8028c74:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8028c78:	d015      	beq.n	8028ca6 <_vfiprintf_r+0x702>
 8028c7a:	2c0a      	cmp	r4, #10
 8028c7c:	f175 0200 	sbcs.w	r2, r5, #0
 8028c80:	d311      	bcc.n	8028ca6 <_vfiprintf_r+0x702>
 8028c82:	9308      	str	r3, [sp, #32]
 8028c84:	9b07      	ldr	r3, [sp, #28]
 8028c86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028c88:	eba9 0903 	sub.w	r9, r9, r3
 8028c8c:	461a      	mov	r2, r3
 8028c8e:	4648      	mov	r0, r9
 8028c90:	f000 ff3d 	bl	8029b0e <strncpy>
 8028c94:	9b06      	ldr	r3, [sp, #24]
 8028c96:	785a      	ldrb	r2, [r3, #1]
 8028c98:	9b08      	ldr	r3, [sp, #32]
 8028c9a:	b172      	cbz	r2, 8028cba <_vfiprintf_r+0x716>
 8028c9c:	9a06      	ldr	r2, [sp, #24]
 8028c9e:	3201      	adds	r2, #1
 8028ca0:	9206      	str	r2, [sp, #24]
 8028ca2:	f04f 0a00 	mov.w	sl, #0
 8028ca6:	2c0a      	cmp	r4, #10
 8028ca8:	f175 0500 	sbcs.w	r5, r5, #0
 8028cac:	f0c0 80f6 	bcc.w	8028e9c <_vfiprintf_r+0x8f8>
 8028cb0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8028cb2:	f8cd 9020 	str.w	r9, [sp, #32]
 8028cb6:	461d      	mov	r5, r3
 8028cb8:	e7c6      	b.n	8028c48 <_vfiprintf_r+0x6a4>
 8028cba:	4692      	mov	sl, r2
 8028cbc:	e7f3      	b.n	8028ca6 <_vfiprintf_r+0x702>
 8028cbe:	f004 030f 	and.w	r3, r4, #15
 8028cc2:	9a05      	ldr	r2, [sp, #20]
 8028cc4:	0924      	lsrs	r4, r4, #4
 8028cc6:	5cd3      	ldrb	r3, [r2, r3]
 8028cc8:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8028ccc:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8028cd0:	092d      	lsrs	r5, r5, #4
 8028cd2:	ea54 0305 	orrs.w	r3, r4, r5
 8028cd6:	d1f2      	bne.n	8028cbe <_vfiprintf_r+0x71a>
 8028cd8:	e0e0      	b.n	8028e9c <_vfiprintf_r+0x8f8>
 8028cda:	b923      	cbnz	r3, 8028ce6 <_vfiprintf_r+0x742>
 8028cdc:	f01a 0f01 	tst.w	sl, #1
 8028ce0:	d001      	beq.n	8028ce6 <_vfiprintf_r+0x742>
 8028ce2:	2430      	movs	r4, #48	@ 0x30
 8028ce4:	e7a3      	b.n	8028c2e <_vfiprintf_r+0x68a>
 8028ce6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8028cea:	e0d7      	b.n	8028e9c <_vfiprintf_r+0x8f8>
 8028cec:	2b00      	cmp	r3, #0
 8028cee:	f000 80a3 	beq.w	8028e38 <_vfiprintf_r+0x894>
 8028cf2:	2400      	movs	r4, #0
 8028cf4:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8028cf8:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8028cfc:	46a8      	mov	r8, r5
 8028cfe:	e5e0      	b.n	80288c2 <_vfiprintf_r+0x31e>
 8028d00:	0803811f 	.word	0x0803811f
 8028d04:	0803810f 	.word	0x0803810f
 8028d08:	080380dc 	.word	0x080380dc
 8028d0c:	2110      	movs	r1, #16
 8028d0e:	6071      	str	r1, [r6, #4]
 8028d10:	2a07      	cmp	r2, #7
 8028d12:	4461      	add	r1, ip
 8028d14:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8028d18:	dd08      	ble.n	8028d2c <_vfiprintf_r+0x788>
 8028d1a:	9800      	ldr	r0, [sp, #0]
 8028d1c:	aa0e      	add	r2, sp, #56	@ 0x38
 8028d1e:	4639      	mov	r1, r7
 8028d20:	f7ff fc0e 	bl	8028540 <__sprint_r>
 8028d24:	2800      	cmp	r0, #0
 8028d26:	d166      	bne.n	8028df6 <_vfiprintf_r+0x852>
 8028d28:	4b60      	ldr	r3, [pc, #384]	@ (8028eac <_vfiprintf_r+0x908>)
 8028d2a:	a811      	add	r0, sp, #68	@ 0x44
 8028d2c:	3d10      	subs	r5, #16
 8028d2e:	4606      	mov	r6, r0
 8028d30:	e694      	b.n	8028a5c <_vfiprintf_r+0x4b8>
 8028d32:	4606      	mov	r6, r0
 8028d34:	e6ac      	b.n	8028a90 <_vfiprintf_r+0x4ec>
 8028d36:	9800      	ldr	r0, [sp, #0]
 8028d38:	aa0e      	add	r2, sp, #56	@ 0x38
 8028d3a:	4639      	mov	r1, r7
 8028d3c:	f7ff fc00 	bl	8028540 <__sprint_r>
 8028d40:	2800      	cmp	r0, #0
 8028d42:	d158      	bne.n	8028df6 <_vfiprintf_r+0x852>
 8028d44:	ae11      	add	r6, sp, #68	@ 0x44
 8028d46:	e6b5      	b.n	8028ab4 <_vfiprintf_r+0x510>
 8028d48:	9800      	ldr	r0, [sp, #0]
 8028d4a:	aa0e      	add	r2, sp, #56	@ 0x38
 8028d4c:	4639      	mov	r1, r7
 8028d4e:	f7ff fbf7 	bl	8028540 <__sprint_r>
 8028d52:	2800      	cmp	r0, #0
 8028d54:	d14f      	bne.n	8028df6 <_vfiprintf_r+0x852>
 8028d56:	ae11      	add	r6, sp, #68	@ 0x44
 8028d58:	e6bc      	b.n	8028ad4 <_vfiprintf_r+0x530>
 8028d5a:	2110      	movs	r1, #16
 8028d5c:	6071      	str	r1, [r6, #4]
 8028d5e:	2a07      	cmp	r2, #7
 8028d60:	4461      	add	r1, ip
 8028d62:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8028d66:	dd08      	ble.n	8028d7a <_vfiprintf_r+0x7d6>
 8028d68:	9800      	ldr	r0, [sp, #0]
 8028d6a:	aa0e      	add	r2, sp, #56	@ 0x38
 8028d6c:	4639      	mov	r1, r7
 8028d6e:	f7ff fbe7 	bl	8028540 <__sprint_r>
 8028d72:	2800      	cmp	r0, #0
 8028d74:	d13f      	bne.n	8028df6 <_vfiprintf_r+0x852>
 8028d76:	4b4e      	ldr	r3, [pc, #312]	@ (8028eb0 <_vfiprintf_r+0x90c>)
 8028d78:	a811      	add	r0, sp, #68	@ 0x44
 8028d7a:	3d10      	subs	r5, #16
 8028d7c:	4606      	mov	r6, r0
 8028d7e:	e6b2      	b.n	8028ae6 <_vfiprintf_r+0x542>
 8028d80:	4606      	mov	r6, r0
 8028d82:	e6ca      	b.n	8028b1a <_vfiprintf_r+0x576>
 8028d84:	2010      	movs	r0, #16
 8028d86:	4402      	add	r2, r0
 8028d88:	2b07      	cmp	r3, #7
 8028d8a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8028d8e:	6070      	str	r0, [r6, #4]
 8028d90:	dd06      	ble.n	8028da0 <_vfiprintf_r+0x7fc>
 8028d92:	9800      	ldr	r0, [sp, #0]
 8028d94:	aa0e      	add	r2, sp, #56	@ 0x38
 8028d96:	4639      	mov	r1, r7
 8028d98:	f7ff fbd2 	bl	8028540 <__sprint_r>
 8028d9c:	bb58      	cbnz	r0, 8028df6 <_vfiprintf_r+0x852>
 8028d9e:	a911      	add	r1, sp, #68	@ 0x44
 8028da0:	3c10      	subs	r4, #16
 8028da2:	460e      	mov	r6, r1
 8028da4:	e6bd      	b.n	8028b22 <_vfiprintf_r+0x57e>
 8028da6:	460e      	mov	r6, r1
 8028da8:	e6d6      	b.n	8028b58 <_vfiprintf_r+0x5b4>
 8028daa:	9800      	ldr	r0, [sp, #0]
 8028dac:	aa0e      	add	r2, sp, #56	@ 0x38
 8028dae:	4639      	mov	r1, r7
 8028db0:	f7ff fbc6 	bl	8028540 <__sprint_r>
 8028db4:	b9f8      	cbnz	r0, 8028df6 <_vfiprintf_r+0x852>
 8028db6:	ab11      	add	r3, sp, #68	@ 0x44
 8028db8:	e6de      	b.n	8028b78 <_vfiprintf_r+0x5d4>
 8028dba:	9a02      	ldr	r2, [sp, #8]
 8028dbc:	9904      	ldr	r1, [sp, #16]
 8028dbe:	1a54      	subs	r4, r2, r1
 8028dc0:	2c00      	cmp	r4, #0
 8028dc2:	f77f aedd 	ble.w	8028b80 <_vfiprintf_r+0x5dc>
 8028dc6:	4d39      	ldr	r5, [pc, #228]	@ (8028eac <_vfiprintf_r+0x908>)
 8028dc8:	2610      	movs	r6, #16
 8028dca:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8028dce:	2c10      	cmp	r4, #16
 8028dd0:	f102 0201 	add.w	r2, r2, #1
 8028dd4:	601d      	str	r5, [r3, #0]
 8028dd6:	dc1d      	bgt.n	8028e14 <_vfiprintf_r+0x870>
 8028dd8:	605c      	str	r4, [r3, #4]
 8028dda:	2a07      	cmp	r2, #7
 8028ddc:	440c      	add	r4, r1
 8028dde:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8028de2:	f77f aecd 	ble.w	8028b80 <_vfiprintf_r+0x5dc>
 8028de6:	9800      	ldr	r0, [sp, #0]
 8028de8:	aa0e      	add	r2, sp, #56	@ 0x38
 8028dea:	4639      	mov	r1, r7
 8028dec:	f7ff fba8 	bl	8028540 <__sprint_r>
 8028df0:	2800      	cmp	r0, #0
 8028df2:	f43f aec5 	beq.w	8028b80 <_vfiprintf_r+0x5dc>
 8028df6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028df8:	07d9      	lsls	r1, r3, #31
 8028dfa:	d405      	bmi.n	8028e08 <_vfiprintf_r+0x864>
 8028dfc:	89bb      	ldrh	r3, [r7, #12]
 8028dfe:	059a      	lsls	r2, r3, #22
 8028e00:	d402      	bmi.n	8028e08 <_vfiprintf_r+0x864>
 8028e02:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028e04:	f002 f877 	bl	802aef6 <__retarget_lock_release_recursive>
 8028e08:	89bb      	ldrh	r3, [r7, #12]
 8028e0a:	065b      	lsls	r3, r3, #25
 8028e0c:	f57f abfb 	bpl.w	8028606 <_vfiprintf_r+0x62>
 8028e10:	f7ff bbf6 	b.w	8028600 <_vfiprintf_r+0x5c>
 8028e14:	3110      	adds	r1, #16
 8028e16:	2a07      	cmp	r2, #7
 8028e18:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8028e1c:	605e      	str	r6, [r3, #4]
 8028e1e:	dc02      	bgt.n	8028e26 <_vfiprintf_r+0x882>
 8028e20:	3308      	adds	r3, #8
 8028e22:	3c10      	subs	r4, #16
 8028e24:	e7d1      	b.n	8028dca <_vfiprintf_r+0x826>
 8028e26:	9800      	ldr	r0, [sp, #0]
 8028e28:	aa0e      	add	r2, sp, #56	@ 0x38
 8028e2a:	4639      	mov	r1, r7
 8028e2c:	f7ff fb88 	bl	8028540 <__sprint_r>
 8028e30:	2800      	cmp	r0, #0
 8028e32:	d1e0      	bne.n	8028df6 <_vfiprintf_r+0x852>
 8028e34:	ab11      	add	r3, sp, #68	@ 0x44
 8028e36:	e7f4      	b.n	8028e22 <_vfiprintf_r+0x87e>
 8028e38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028e3a:	b913      	cbnz	r3, 8028e42 <_vfiprintf_r+0x89e>
 8028e3c:	2300      	movs	r3, #0
 8028e3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028e40:	e7d9      	b.n	8028df6 <_vfiprintf_r+0x852>
 8028e42:	9800      	ldr	r0, [sp, #0]
 8028e44:	aa0e      	add	r2, sp, #56	@ 0x38
 8028e46:	4639      	mov	r1, r7
 8028e48:	f7ff fb7a 	bl	8028540 <__sprint_r>
 8028e4c:	2800      	cmp	r0, #0
 8028e4e:	d0f5      	beq.n	8028e3c <_vfiprintf_r+0x898>
 8028e50:	e7d1      	b.n	8028df6 <_vfiprintf_r+0x852>
 8028e52:	ea54 0205 	orrs.w	r2, r4, r5
 8028e56:	f8cd a010 	str.w	sl, [sp, #16]
 8028e5a:	f43f ada6 	beq.w	80289aa <_vfiprintf_r+0x406>
 8028e5e:	2b01      	cmp	r3, #1
 8028e60:	f43f aedf 	beq.w	8028c22 <_vfiprintf_r+0x67e>
 8028e64:	2b02      	cmp	r3, #2
 8028e66:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8028e6a:	f43f af28 	beq.w	8028cbe <_vfiprintf_r+0x71a>
 8028e6e:	f004 0307 	and.w	r3, r4, #7
 8028e72:	08e4      	lsrs	r4, r4, #3
 8028e74:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8028e78:	08ed      	lsrs	r5, r5, #3
 8028e7a:	3330      	adds	r3, #48	@ 0x30
 8028e7c:	ea54 0105 	orrs.w	r1, r4, r5
 8028e80:	464a      	mov	r2, r9
 8028e82:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8028e86:	d1f2      	bne.n	8028e6e <_vfiprintf_r+0x8ca>
 8028e88:	9904      	ldr	r1, [sp, #16]
 8028e8a:	07c8      	lsls	r0, r1, #31
 8028e8c:	d506      	bpl.n	8028e9c <_vfiprintf_r+0x8f8>
 8028e8e:	2b30      	cmp	r3, #48	@ 0x30
 8028e90:	d004      	beq.n	8028e9c <_vfiprintf_r+0x8f8>
 8028e92:	2330      	movs	r3, #48	@ 0x30
 8028e94:	f809 3c01 	strb.w	r3, [r9, #-1]
 8028e98:	f1a2 0902 	sub.w	r9, r2, #2
 8028e9c:	ab3a      	add	r3, sp, #232	@ 0xe8
 8028e9e:	eba3 0309 	sub.w	r3, r3, r9
 8028ea2:	9c01      	ldr	r4, [sp, #4]
 8028ea4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8028ea8:	9301      	str	r3, [sp, #4]
 8028eaa:	e5bb      	b.n	8028a24 <_vfiprintf_r+0x480>
 8028eac:	0803811f 	.word	0x0803811f
 8028eb0:	0803810f 	.word	0x0803810f

08028eb4 <__sbprintf>:
 8028eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028eb6:	461f      	mov	r7, r3
 8028eb8:	898b      	ldrh	r3, [r1, #12]
 8028eba:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8028ebe:	f023 0302 	bic.w	r3, r3, #2
 8028ec2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8028ec6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8028ec8:	9319      	str	r3, [sp, #100]	@ 0x64
 8028eca:	89cb      	ldrh	r3, [r1, #14]
 8028ecc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028ed0:	69cb      	ldr	r3, [r1, #28]
 8028ed2:	9307      	str	r3, [sp, #28]
 8028ed4:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8028ed6:	9309      	str	r3, [sp, #36]	@ 0x24
 8028ed8:	ab1a      	add	r3, sp, #104	@ 0x68
 8028eda:	9300      	str	r3, [sp, #0]
 8028edc:	9304      	str	r3, [sp, #16]
 8028ede:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8028ee2:	4615      	mov	r5, r2
 8028ee4:	4606      	mov	r6, r0
 8028ee6:	9302      	str	r3, [sp, #8]
 8028ee8:	9305      	str	r3, [sp, #20]
 8028eea:	a816      	add	r0, sp, #88	@ 0x58
 8028eec:	2300      	movs	r3, #0
 8028eee:	460c      	mov	r4, r1
 8028ef0:	9306      	str	r3, [sp, #24]
 8028ef2:	f001 fffb 	bl	802aeec <__retarget_lock_init_recursive>
 8028ef6:	462a      	mov	r2, r5
 8028ef8:	463b      	mov	r3, r7
 8028efa:	4669      	mov	r1, sp
 8028efc:	4630      	mov	r0, r6
 8028efe:	f7ff fb51 	bl	80285a4 <_vfiprintf_r>
 8028f02:	1e05      	subs	r5, r0, #0
 8028f04:	db07      	blt.n	8028f16 <__sbprintf+0x62>
 8028f06:	4669      	mov	r1, sp
 8028f08:	4630      	mov	r0, r6
 8028f0a:	f000 f9d1 	bl	80292b0 <_fflush_r>
 8028f0e:	2800      	cmp	r0, #0
 8028f10:	bf18      	it	ne
 8028f12:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8028f16:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8028f1a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8028f1c:	065b      	lsls	r3, r3, #25
 8028f1e:	bf42      	ittt	mi
 8028f20:	89a3      	ldrhmi	r3, [r4, #12]
 8028f22:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8028f26:	81a3      	strhmi	r3, [r4, #12]
 8028f28:	f001 ffe1 	bl	802aeee <__retarget_lock_close_recursive>
 8028f2c:	4628      	mov	r0, r5
 8028f2e:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8028f32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08028f34 <putchar>:
 8028f34:	4b02      	ldr	r3, [pc, #8]	@ (8028f40 <putchar+0xc>)
 8028f36:	4601      	mov	r1, r0
 8028f38:	6818      	ldr	r0, [r3, #0]
 8028f3a:	6882      	ldr	r2, [r0, #8]
 8028f3c:	f007 bacc 	b.w	80304d8 <_putc_r>
 8028f40:	20000254 	.word	0x20000254

08028f44 <_puts_r>:
 8028f44:	b530      	push	{r4, r5, lr}
 8028f46:	4605      	mov	r5, r0
 8028f48:	b089      	sub	sp, #36	@ 0x24
 8028f4a:	4608      	mov	r0, r1
 8028f4c:	460c      	mov	r4, r1
 8028f4e:	f7e7 f9a7 	bl	80102a0 <strlen>
 8028f52:	4b1e      	ldr	r3, [pc, #120]	@ (8028fcc <_puts_r+0x88>)
 8028f54:	9306      	str	r3, [sp, #24]
 8028f56:	2301      	movs	r3, #1
 8028f58:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8028f5c:	9307      	str	r3, [sp, #28]
 8028f5e:	4418      	add	r0, r3
 8028f60:	ab04      	add	r3, sp, #16
 8028f62:	9301      	str	r3, [sp, #4]
 8028f64:	2302      	movs	r3, #2
 8028f66:	9302      	str	r3, [sp, #8]
 8028f68:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8028f6a:	68ac      	ldr	r4, [r5, #8]
 8028f6c:	9003      	str	r0, [sp, #12]
 8028f6e:	b913      	cbnz	r3, 8028f76 <_puts_r+0x32>
 8028f70:	4628      	mov	r0, r5
 8028f72:	f000 fadf 	bl	8029534 <__sinit>
 8028f76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028f78:	07db      	lsls	r3, r3, #31
 8028f7a:	d405      	bmi.n	8028f88 <_puts_r+0x44>
 8028f7c:	89a3      	ldrh	r3, [r4, #12]
 8028f7e:	0598      	lsls	r0, r3, #22
 8028f80:	d402      	bmi.n	8028f88 <_puts_r+0x44>
 8028f82:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028f84:	f001 ffb5 	bl	802aef2 <__retarget_lock_acquire_recursive>
 8028f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028f8c:	0499      	lsls	r1, r3, #18
 8028f8e:	d406      	bmi.n	8028f9e <_puts_r+0x5a>
 8028f90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8028f94:	81a3      	strh	r3, [r4, #12]
 8028f96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028f98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8028f9c:	6663      	str	r3, [r4, #100]	@ 0x64
 8028f9e:	4628      	mov	r0, r5
 8028fa0:	aa01      	add	r2, sp, #4
 8028fa2:	4621      	mov	r1, r4
 8028fa4:	f000 fb18 	bl	80295d8 <__sfvwrite_r>
 8028fa8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028faa:	2800      	cmp	r0, #0
 8028fac:	bf0c      	ite	eq
 8028fae:	250a      	moveq	r5, #10
 8028fb0:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8028fb4:	07da      	lsls	r2, r3, #31
 8028fb6:	d405      	bmi.n	8028fc4 <_puts_r+0x80>
 8028fb8:	89a3      	ldrh	r3, [r4, #12]
 8028fba:	059b      	lsls	r3, r3, #22
 8028fbc:	d402      	bmi.n	8028fc4 <_puts_r+0x80>
 8028fbe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028fc0:	f001 ff99 	bl	802aef6 <__retarget_lock_release_recursive>
 8028fc4:	4628      	mov	r0, r5
 8028fc6:	b009      	add	sp, #36	@ 0x24
 8028fc8:	bd30      	pop	{r4, r5, pc}
 8028fca:	bf00      	nop
 8028fcc:	080380b9 	.word	0x080380b9

08028fd0 <puts>:
 8028fd0:	4b02      	ldr	r3, [pc, #8]	@ (8028fdc <puts+0xc>)
 8028fd2:	4601      	mov	r1, r0
 8028fd4:	6818      	ldr	r0, [r3, #0]
 8028fd6:	f7ff bfb5 	b.w	8028f44 <_puts_r>
 8028fda:	bf00      	nop
 8028fdc:	20000254 	.word	0x20000254

08028fe0 <srand>:
 8028fe0:	4b03      	ldr	r3, [pc, #12]	@ (8028ff0 <srand+0x10>)
 8028fe2:	681b      	ldr	r3, [r3, #0]
 8028fe4:	2200      	movs	r2, #0
 8028fe6:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
 8028fea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8028fee:	4770      	bx	lr
 8028ff0:	20000254 	.word	0x20000254

08028ff4 <rand>:
 8028ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8029020 <rand+0x2c>)
 8028ff6:	480b      	ldr	r0, [pc, #44]	@ (8029024 <rand+0x30>)
 8028ff8:	6819      	ldr	r1, [r3, #0]
 8028ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8029028 <rand+0x34>)
 8028ffc:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 8029000:	b510      	push	{r4, lr}
 8029002:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 8029006:	4358      	muls	r0, r3
 8029008:	fb02 0004 	mla	r0, r2, r4, r0
 802900c:	fba3 3202 	umull	r3, r2, r3, r2
 8029010:	3301      	adds	r3, #1
 8029012:	eb40 0002 	adc.w	r0, r0, r2
 8029016:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 802901a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802901e:	bd10      	pop	{r4, pc}
 8029020:	20000254 	.word	0x20000254
 8029024:	5851f42d 	.word	0x5851f42d
 8029028:	4c957f2d 	.word	0x4c957f2d

0802902c <snprintf>:
 802902c:	b40c      	push	{r2, r3}
 802902e:	b530      	push	{r4, r5, lr}
 8029030:	4b17      	ldr	r3, [pc, #92]	@ (8029090 <snprintf+0x64>)
 8029032:	1e0c      	subs	r4, r1, #0
 8029034:	681d      	ldr	r5, [r3, #0]
 8029036:	b09d      	sub	sp, #116	@ 0x74
 8029038:	da08      	bge.n	802904c <snprintf+0x20>
 802903a:	238b      	movs	r3, #139	@ 0x8b
 802903c:	602b      	str	r3, [r5, #0]
 802903e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029042:	b01d      	add	sp, #116	@ 0x74
 8029044:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029048:	b002      	add	sp, #8
 802904a:	4770      	bx	lr
 802904c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8029050:	f8ad 3014 	strh.w	r3, [sp, #20]
 8029054:	bf14      	ite	ne
 8029056:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802905a:	4623      	moveq	r3, r4
 802905c:	9304      	str	r3, [sp, #16]
 802905e:	9307      	str	r3, [sp, #28]
 8029060:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8029064:	9002      	str	r0, [sp, #8]
 8029066:	9006      	str	r0, [sp, #24]
 8029068:	f8ad 3016 	strh.w	r3, [sp, #22]
 802906c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802906e:	ab21      	add	r3, sp, #132	@ 0x84
 8029070:	a902      	add	r1, sp, #8
 8029072:	4628      	mov	r0, r5
 8029074:	9301      	str	r3, [sp, #4]
 8029076:	f004 fe7b 	bl	802dd70 <_svfprintf_r>
 802907a:	1c43      	adds	r3, r0, #1
 802907c:	bfbc      	itt	lt
 802907e:	238b      	movlt	r3, #139	@ 0x8b
 8029080:	602b      	strlt	r3, [r5, #0]
 8029082:	2c00      	cmp	r4, #0
 8029084:	d0dd      	beq.n	8029042 <snprintf+0x16>
 8029086:	9b02      	ldr	r3, [sp, #8]
 8029088:	2200      	movs	r2, #0
 802908a:	701a      	strb	r2, [r3, #0]
 802908c:	e7d9      	b.n	8029042 <snprintf+0x16>
 802908e:	bf00      	nop
 8029090:	20000254 	.word	0x20000254

08029094 <_strtol_l.constprop.0>:
 8029094:	2b24      	cmp	r3, #36	@ 0x24
 8029096:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802909a:	4686      	mov	lr, r0
 802909c:	4690      	mov	r8, r2
 802909e:	d801      	bhi.n	80290a4 <_strtol_l.constprop.0+0x10>
 80290a0:	2b01      	cmp	r3, #1
 80290a2:	d106      	bne.n	80290b2 <_strtol_l.constprop.0+0x1e>
 80290a4:	f001 fef0 	bl	802ae88 <__errno>
 80290a8:	2316      	movs	r3, #22
 80290aa:	6003      	str	r3, [r0, #0]
 80290ac:	2000      	movs	r0, #0
 80290ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80290b2:	4834      	ldr	r0, [pc, #208]	@ (8029184 <_strtol_l.constprop.0+0xf0>)
 80290b4:	460d      	mov	r5, r1
 80290b6:	462a      	mov	r2, r5
 80290b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80290bc:	5d06      	ldrb	r6, [r0, r4]
 80290be:	f016 0608 	ands.w	r6, r6, #8
 80290c2:	d1f8      	bne.n	80290b6 <_strtol_l.constprop.0+0x22>
 80290c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80290c6:	d12d      	bne.n	8029124 <_strtol_l.constprop.0+0x90>
 80290c8:	782c      	ldrb	r4, [r5, #0]
 80290ca:	2601      	movs	r6, #1
 80290cc:	1c95      	adds	r5, r2, #2
 80290ce:	f033 0210 	bics.w	r2, r3, #16
 80290d2:	d109      	bne.n	80290e8 <_strtol_l.constprop.0+0x54>
 80290d4:	2c30      	cmp	r4, #48	@ 0x30
 80290d6:	d12a      	bne.n	802912e <_strtol_l.constprop.0+0x9a>
 80290d8:	782a      	ldrb	r2, [r5, #0]
 80290da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80290de:	2a58      	cmp	r2, #88	@ 0x58
 80290e0:	d125      	bne.n	802912e <_strtol_l.constprop.0+0x9a>
 80290e2:	786c      	ldrb	r4, [r5, #1]
 80290e4:	2310      	movs	r3, #16
 80290e6:	3502      	adds	r5, #2
 80290e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80290ec:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80290f0:	2200      	movs	r2, #0
 80290f2:	fbbc f9f3 	udiv	r9, ip, r3
 80290f6:	4610      	mov	r0, r2
 80290f8:	fb03 ca19 	mls	sl, r3, r9, ip
 80290fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8029100:	2f09      	cmp	r7, #9
 8029102:	d81b      	bhi.n	802913c <_strtol_l.constprop.0+0xa8>
 8029104:	463c      	mov	r4, r7
 8029106:	42a3      	cmp	r3, r4
 8029108:	dd27      	ble.n	802915a <_strtol_l.constprop.0+0xc6>
 802910a:	1c57      	adds	r7, r2, #1
 802910c:	d007      	beq.n	802911e <_strtol_l.constprop.0+0x8a>
 802910e:	4581      	cmp	r9, r0
 8029110:	d320      	bcc.n	8029154 <_strtol_l.constprop.0+0xc0>
 8029112:	d101      	bne.n	8029118 <_strtol_l.constprop.0+0x84>
 8029114:	45a2      	cmp	sl, r4
 8029116:	db1d      	blt.n	8029154 <_strtol_l.constprop.0+0xc0>
 8029118:	fb00 4003 	mla	r0, r0, r3, r4
 802911c:	2201      	movs	r2, #1
 802911e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8029122:	e7eb      	b.n	80290fc <_strtol_l.constprop.0+0x68>
 8029124:	2c2b      	cmp	r4, #43	@ 0x2b
 8029126:	bf04      	itt	eq
 8029128:	782c      	ldrbeq	r4, [r5, #0]
 802912a:	1c95      	addeq	r5, r2, #2
 802912c:	e7cf      	b.n	80290ce <_strtol_l.constprop.0+0x3a>
 802912e:	2b00      	cmp	r3, #0
 8029130:	d1da      	bne.n	80290e8 <_strtol_l.constprop.0+0x54>
 8029132:	2c30      	cmp	r4, #48	@ 0x30
 8029134:	bf0c      	ite	eq
 8029136:	2308      	moveq	r3, #8
 8029138:	230a      	movne	r3, #10
 802913a:	e7d5      	b.n	80290e8 <_strtol_l.constprop.0+0x54>
 802913c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8029140:	2f19      	cmp	r7, #25
 8029142:	d801      	bhi.n	8029148 <_strtol_l.constprop.0+0xb4>
 8029144:	3c37      	subs	r4, #55	@ 0x37
 8029146:	e7de      	b.n	8029106 <_strtol_l.constprop.0+0x72>
 8029148:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802914c:	2f19      	cmp	r7, #25
 802914e:	d804      	bhi.n	802915a <_strtol_l.constprop.0+0xc6>
 8029150:	3c57      	subs	r4, #87	@ 0x57
 8029152:	e7d8      	b.n	8029106 <_strtol_l.constprop.0+0x72>
 8029154:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8029158:	e7e1      	b.n	802911e <_strtol_l.constprop.0+0x8a>
 802915a:	1c53      	adds	r3, r2, #1
 802915c:	d108      	bne.n	8029170 <_strtol_l.constprop.0+0xdc>
 802915e:	2322      	movs	r3, #34	@ 0x22
 8029160:	f8ce 3000 	str.w	r3, [lr]
 8029164:	4660      	mov	r0, ip
 8029166:	f1b8 0f00 	cmp.w	r8, #0
 802916a:	d0a0      	beq.n	80290ae <_strtol_l.constprop.0+0x1a>
 802916c:	1e69      	subs	r1, r5, #1
 802916e:	e006      	b.n	802917e <_strtol_l.constprop.0+0xea>
 8029170:	b106      	cbz	r6, 8029174 <_strtol_l.constprop.0+0xe0>
 8029172:	4240      	negs	r0, r0
 8029174:	f1b8 0f00 	cmp.w	r8, #0
 8029178:	d099      	beq.n	80290ae <_strtol_l.constprop.0+0x1a>
 802917a:	2a00      	cmp	r2, #0
 802917c:	d1f6      	bne.n	802916c <_strtol_l.constprop.0+0xd8>
 802917e:	f8c8 1000 	str.w	r1, [r8]
 8029182:	e794      	b.n	80290ae <_strtol_l.constprop.0+0x1a>
 8029184:	08038479 	.word	0x08038479

08029188 <_strtol_r>:
 8029188:	f7ff bf84 	b.w	8029094 <_strtol_l.constprop.0>

0802918c <strtol>:
 802918c:	4613      	mov	r3, r2
 802918e:	460a      	mov	r2, r1
 8029190:	4601      	mov	r1, r0
 8029192:	4802      	ldr	r0, [pc, #8]	@ (802919c <strtol+0x10>)
 8029194:	6800      	ldr	r0, [r0, #0]
 8029196:	f7ff bf7d 	b.w	8029094 <_strtol_l.constprop.0>
 802919a:	bf00      	nop
 802919c:	20000254 	.word	0x20000254

080291a0 <__sflush_r>:
 80291a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80291a4:	4605      	mov	r5, r0
 80291a6:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80291aa:	0706      	lsls	r6, r0, #28
 80291ac:	460c      	mov	r4, r1
 80291ae:	d457      	bmi.n	8029260 <__sflush_r+0xc0>
 80291b0:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 80291b4:	818b      	strh	r3, [r1, #12]
 80291b6:	684b      	ldr	r3, [r1, #4]
 80291b8:	2b00      	cmp	r3, #0
 80291ba:	dc02      	bgt.n	80291c2 <__sflush_r+0x22>
 80291bc:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 80291be:	2b00      	cmp	r3, #0
 80291c0:	dd4c      	ble.n	802925c <__sflush_r+0xbc>
 80291c2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80291c4:	2e00      	cmp	r6, #0
 80291c6:	d049      	beq.n	802925c <__sflush_r+0xbc>
 80291c8:	2300      	movs	r3, #0
 80291ca:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 80291ce:	682f      	ldr	r7, [r5, #0]
 80291d0:	69e1      	ldr	r1, [r4, #28]
 80291d2:	602b      	str	r3, [r5, #0]
 80291d4:	d034      	beq.n	8029240 <__sflush_r+0xa0>
 80291d6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80291d8:	89a3      	ldrh	r3, [r4, #12]
 80291da:	0759      	lsls	r1, r3, #29
 80291dc:	d505      	bpl.n	80291ea <__sflush_r+0x4a>
 80291de:	6863      	ldr	r3, [r4, #4]
 80291e0:	1ad2      	subs	r2, r2, r3
 80291e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80291e4:	b10b      	cbz	r3, 80291ea <__sflush_r+0x4a>
 80291e6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80291e8:	1ad2      	subs	r2, r2, r3
 80291ea:	2300      	movs	r3, #0
 80291ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80291ee:	69e1      	ldr	r1, [r4, #28]
 80291f0:	4628      	mov	r0, r5
 80291f2:	47b0      	blx	r6
 80291f4:	1c43      	adds	r3, r0, #1
 80291f6:	d106      	bne.n	8029206 <__sflush_r+0x66>
 80291f8:	682a      	ldr	r2, [r5, #0]
 80291fa:	2a1d      	cmp	r2, #29
 80291fc:	d848      	bhi.n	8029290 <__sflush_r+0xf0>
 80291fe:	4b2b      	ldr	r3, [pc, #172]	@ (80292ac <__sflush_r+0x10c>)
 8029200:	4113      	asrs	r3, r2
 8029202:	07de      	lsls	r6, r3, #31
 8029204:	d444      	bmi.n	8029290 <__sflush_r+0xf0>
 8029206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802920a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 802920e:	81a2      	strh	r2, [r4, #12]
 8029210:	2200      	movs	r2, #0
 8029212:	6062      	str	r2, [r4, #4]
 8029214:	04d9      	lsls	r1, r3, #19
 8029216:	6922      	ldr	r2, [r4, #16]
 8029218:	6022      	str	r2, [r4, #0]
 802921a:	d504      	bpl.n	8029226 <__sflush_r+0x86>
 802921c:	1c42      	adds	r2, r0, #1
 802921e:	d101      	bne.n	8029224 <__sflush_r+0x84>
 8029220:	682b      	ldr	r3, [r5, #0]
 8029222:	b903      	cbnz	r3, 8029226 <__sflush_r+0x86>
 8029224:	6520      	str	r0, [r4, #80]	@ 0x50
 8029226:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8029228:	602f      	str	r7, [r5, #0]
 802922a:	b1b9      	cbz	r1, 802925c <__sflush_r+0xbc>
 802922c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8029230:	4299      	cmp	r1, r3
 8029232:	d002      	beq.n	802923a <__sflush_r+0x9a>
 8029234:	4628      	mov	r0, r5
 8029236:	f002 fd61 	bl	802bcfc <_free_r>
 802923a:	2300      	movs	r3, #0
 802923c:	6323      	str	r3, [r4, #48]	@ 0x30
 802923e:	e00d      	b.n	802925c <__sflush_r+0xbc>
 8029240:	2301      	movs	r3, #1
 8029242:	4628      	mov	r0, r5
 8029244:	47b0      	blx	r6
 8029246:	4602      	mov	r2, r0
 8029248:	1c50      	adds	r0, r2, #1
 802924a:	d1c5      	bne.n	80291d8 <__sflush_r+0x38>
 802924c:	682b      	ldr	r3, [r5, #0]
 802924e:	2b00      	cmp	r3, #0
 8029250:	d0c2      	beq.n	80291d8 <__sflush_r+0x38>
 8029252:	2b1d      	cmp	r3, #29
 8029254:	d001      	beq.n	802925a <__sflush_r+0xba>
 8029256:	2b16      	cmp	r3, #22
 8029258:	d11a      	bne.n	8029290 <__sflush_r+0xf0>
 802925a:	602f      	str	r7, [r5, #0]
 802925c:	2000      	movs	r0, #0
 802925e:	e01e      	b.n	802929e <__sflush_r+0xfe>
 8029260:	690f      	ldr	r7, [r1, #16]
 8029262:	2f00      	cmp	r7, #0
 8029264:	d0fa      	beq.n	802925c <__sflush_r+0xbc>
 8029266:	0783      	lsls	r3, r0, #30
 8029268:	680e      	ldr	r6, [r1, #0]
 802926a:	bf08      	it	eq
 802926c:	694b      	ldreq	r3, [r1, #20]
 802926e:	600f      	str	r7, [r1, #0]
 8029270:	bf18      	it	ne
 8029272:	2300      	movne	r3, #0
 8029274:	eba6 0807 	sub.w	r8, r6, r7
 8029278:	608b      	str	r3, [r1, #8]
 802927a:	f1b8 0f00 	cmp.w	r8, #0
 802927e:	dded      	ble.n	802925c <__sflush_r+0xbc>
 8029280:	69e1      	ldr	r1, [r4, #28]
 8029282:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8029284:	4643      	mov	r3, r8
 8029286:	463a      	mov	r2, r7
 8029288:	4628      	mov	r0, r5
 802928a:	47b0      	blx	r6
 802928c:	2800      	cmp	r0, #0
 802928e:	dc08      	bgt.n	80292a2 <__sflush_r+0x102>
 8029290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029298:	81a3      	strh	r3, [r4, #12]
 802929a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802929e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80292a2:	4407      	add	r7, r0
 80292a4:	eba8 0800 	sub.w	r8, r8, r0
 80292a8:	e7e7      	b.n	802927a <__sflush_r+0xda>
 80292aa:	bf00      	nop
 80292ac:	dfbffffe 	.word	0xdfbffffe

080292b0 <_fflush_r>:
 80292b0:	b538      	push	{r3, r4, r5, lr}
 80292b2:	460c      	mov	r4, r1
 80292b4:	4605      	mov	r5, r0
 80292b6:	b118      	cbz	r0, 80292c0 <_fflush_r+0x10>
 80292b8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80292ba:	b90b      	cbnz	r3, 80292c0 <_fflush_r+0x10>
 80292bc:	f000 f93a 	bl	8029534 <__sinit>
 80292c0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80292c4:	b1b8      	cbz	r0, 80292f6 <_fflush_r+0x46>
 80292c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80292c8:	07db      	lsls	r3, r3, #31
 80292ca:	d404      	bmi.n	80292d6 <_fflush_r+0x26>
 80292cc:	0581      	lsls	r1, r0, #22
 80292ce:	d402      	bmi.n	80292d6 <_fflush_r+0x26>
 80292d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80292d2:	f001 fe0e 	bl	802aef2 <__retarget_lock_acquire_recursive>
 80292d6:	4628      	mov	r0, r5
 80292d8:	4621      	mov	r1, r4
 80292da:	f7ff ff61 	bl	80291a0 <__sflush_r>
 80292de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80292e0:	07da      	lsls	r2, r3, #31
 80292e2:	4605      	mov	r5, r0
 80292e4:	d405      	bmi.n	80292f2 <_fflush_r+0x42>
 80292e6:	89a3      	ldrh	r3, [r4, #12]
 80292e8:	059b      	lsls	r3, r3, #22
 80292ea:	d402      	bmi.n	80292f2 <_fflush_r+0x42>
 80292ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80292ee:	f001 fe02 	bl	802aef6 <__retarget_lock_release_recursive>
 80292f2:	4628      	mov	r0, r5
 80292f4:	bd38      	pop	{r3, r4, r5, pc}
 80292f6:	4605      	mov	r5, r0
 80292f8:	e7fb      	b.n	80292f2 <_fflush_r+0x42>
	...

080292fc <sprintf>:
 80292fc:	b40e      	push	{r1, r2, r3}
 80292fe:	b500      	push	{lr}
 8029300:	b09c      	sub	sp, #112	@ 0x70
 8029302:	ab1d      	add	r3, sp, #116	@ 0x74
 8029304:	9002      	str	r0, [sp, #8]
 8029306:	9006      	str	r0, [sp, #24]
 8029308:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802930c:	4809      	ldr	r0, [pc, #36]	@ (8029334 <sprintf+0x38>)
 802930e:	9107      	str	r1, [sp, #28]
 8029310:	9104      	str	r1, [sp, #16]
 8029312:	4909      	ldr	r1, [pc, #36]	@ (8029338 <sprintf+0x3c>)
 8029314:	f853 2b04 	ldr.w	r2, [r3], #4
 8029318:	9105      	str	r1, [sp, #20]
 802931a:	6800      	ldr	r0, [r0, #0]
 802931c:	9301      	str	r3, [sp, #4]
 802931e:	a902      	add	r1, sp, #8
 8029320:	f004 fd26 	bl	802dd70 <_svfprintf_r>
 8029324:	9b02      	ldr	r3, [sp, #8]
 8029326:	2200      	movs	r2, #0
 8029328:	701a      	strb	r2, [r3, #0]
 802932a:	b01c      	add	sp, #112	@ 0x70
 802932c:	f85d eb04 	ldr.w	lr, [sp], #4
 8029330:	b003      	add	sp, #12
 8029332:	4770      	bx	lr
 8029334:	20000254 	.word	0x20000254
 8029338:	ffff0208 	.word	0xffff0208

0802933c <sscanf>:
 802933c:	b40e      	push	{r1, r2, r3}
 802933e:	b530      	push	{r4, r5, lr}
 8029340:	b09c      	sub	sp, #112	@ 0x70
 8029342:	ac1f      	add	r4, sp, #124	@ 0x7c
 8029344:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8029348:	f854 5b04 	ldr.w	r5, [r4], #4
 802934c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8029350:	9002      	str	r0, [sp, #8]
 8029352:	9006      	str	r0, [sp, #24]
 8029354:	f7e6 ffa4 	bl	80102a0 <strlen>
 8029358:	4b0b      	ldr	r3, [pc, #44]	@ (8029388 <sscanf+0x4c>)
 802935a:	9003      	str	r0, [sp, #12]
 802935c:	9007      	str	r0, [sp, #28]
 802935e:	930a      	str	r3, [sp, #40]	@ 0x28
 8029360:	480a      	ldr	r0, [pc, #40]	@ (802938c <sscanf+0x50>)
 8029362:	9401      	str	r4, [sp, #4]
 8029364:	2300      	movs	r3, #0
 8029366:	930e      	str	r3, [sp, #56]	@ 0x38
 8029368:	9313      	str	r3, [sp, #76]	@ 0x4c
 802936a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802936e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8029372:	462a      	mov	r2, r5
 8029374:	4623      	mov	r3, r4
 8029376:	a902      	add	r1, sp, #8
 8029378:	6800      	ldr	r0, [r0, #0]
 802937a:	f005 ff3b 	bl	802f1f4 <__ssvfscanf_r>
 802937e:	b01c      	add	sp, #112	@ 0x70
 8029380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029384:	b003      	add	sp, #12
 8029386:	4770      	bx	lr
 8029388:	080293b3 	.word	0x080293b3
 802938c:	20000254 	.word	0x20000254

08029390 <__sread>:
 8029390:	b510      	push	{r4, lr}
 8029392:	460c      	mov	r4, r1
 8029394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029398:	f001 fd52 	bl	802ae40 <_read_r>
 802939c:	2800      	cmp	r0, #0
 802939e:	bfab      	itete	ge
 80293a0:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 80293a2:	89a3      	ldrhlt	r3, [r4, #12]
 80293a4:	181b      	addge	r3, r3, r0
 80293a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80293aa:	bfac      	ite	ge
 80293ac:	6523      	strge	r3, [r4, #80]	@ 0x50
 80293ae:	81a3      	strhlt	r3, [r4, #12]
 80293b0:	bd10      	pop	{r4, pc}

080293b2 <__seofread>:
 80293b2:	2000      	movs	r0, #0
 80293b4:	4770      	bx	lr

080293b6 <__swrite>:
 80293b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80293ba:	461f      	mov	r7, r3
 80293bc:	898b      	ldrh	r3, [r1, #12]
 80293be:	05db      	lsls	r3, r3, #23
 80293c0:	4605      	mov	r5, r0
 80293c2:	460c      	mov	r4, r1
 80293c4:	4616      	mov	r6, r2
 80293c6:	d505      	bpl.n	80293d4 <__swrite+0x1e>
 80293c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80293cc:	2302      	movs	r3, #2
 80293ce:	2200      	movs	r2, #0
 80293d0:	f001 fd24 	bl	802ae1c <_lseek_r>
 80293d4:	89a3      	ldrh	r3, [r4, #12]
 80293d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80293da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80293de:	81a3      	strh	r3, [r4, #12]
 80293e0:	4632      	mov	r2, r6
 80293e2:	463b      	mov	r3, r7
 80293e4:	4628      	mov	r0, r5
 80293e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80293ea:	f001 bd3b 	b.w	802ae64 <_write_r>

080293ee <__sseek>:
 80293ee:	b510      	push	{r4, lr}
 80293f0:	460c      	mov	r4, r1
 80293f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80293f6:	f001 fd11 	bl	802ae1c <_lseek_r>
 80293fa:	1c43      	adds	r3, r0, #1
 80293fc:	89a3      	ldrh	r3, [r4, #12]
 80293fe:	bf15      	itete	ne
 8029400:	6520      	strne	r0, [r4, #80]	@ 0x50
 8029402:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8029406:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802940a:	81a3      	strheq	r3, [r4, #12]
 802940c:	bf18      	it	ne
 802940e:	81a3      	strhne	r3, [r4, #12]
 8029410:	bd10      	pop	{r4, pc}

08029412 <__sclose>:
 8029412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029416:	f001 bcc5 	b.w	802ada4 <_close_r>
	...

0802941c <std>:
 802941c:	2300      	movs	r3, #0
 802941e:	b510      	push	{r4, lr}
 8029420:	4604      	mov	r4, r0
 8029422:	e9c0 3300 	strd	r3, r3, [r0]
 8029426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802942a:	6083      	str	r3, [r0, #8]
 802942c:	8181      	strh	r1, [r0, #12]
 802942e:	6643      	str	r3, [r0, #100]	@ 0x64
 8029430:	81c2      	strh	r2, [r0, #14]
 8029432:	6183      	str	r3, [r0, #24]
 8029434:	4619      	mov	r1, r3
 8029436:	2208      	movs	r2, #8
 8029438:	305c      	adds	r0, #92	@ 0x5c
 802943a:	f000 fb21 	bl	8029a80 <memset>
 802943e:	4b0d      	ldr	r3, [pc, #52]	@ (8029474 <std+0x58>)
 8029440:	6223      	str	r3, [r4, #32]
 8029442:	4b0d      	ldr	r3, [pc, #52]	@ (8029478 <std+0x5c>)
 8029444:	6263      	str	r3, [r4, #36]	@ 0x24
 8029446:	4b0d      	ldr	r3, [pc, #52]	@ (802947c <std+0x60>)
 8029448:	62a3      	str	r3, [r4, #40]	@ 0x28
 802944a:	4b0d      	ldr	r3, [pc, #52]	@ (8029480 <std+0x64>)
 802944c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802944e:	4b0d      	ldr	r3, [pc, #52]	@ (8029484 <std+0x68>)
 8029450:	61e4      	str	r4, [r4, #28]
 8029452:	429c      	cmp	r4, r3
 8029454:	d006      	beq.n	8029464 <std+0x48>
 8029456:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802945a:	4294      	cmp	r4, r2
 802945c:	d002      	beq.n	8029464 <std+0x48>
 802945e:	33d0      	adds	r3, #208	@ 0xd0
 8029460:	429c      	cmp	r4, r3
 8029462:	d105      	bne.n	8029470 <std+0x54>
 8029464:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8029468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802946c:	f001 bd3e 	b.w	802aeec <__retarget_lock_init_recursive>
 8029470:	bd10      	pop	{r4, pc}
 8029472:	bf00      	nop
 8029474:	08029391 	.word	0x08029391
 8029478:	080293b7 	.word	0x080293b7
 802947c:	080293ef 	.word	0x080293ef
 8029480:	08029413 	.word	0x08029413
 8029484:	20018024 	.word	0x20018024

08029488 <stdio_exit_handler>:
 8029488:	4a02      	ldr	r2, [pc, #8]	@ (8029494 <stdio_exit_handler+0xc>)
 802948a:	4903      	ldr	r1, [pc, #12]	@ (8029498 <stdio_exit_handler+0x10>)
 802948c:	4803      	ldr	r0, [pc, #12]	@ (802949c <stdio_exit_handler+0x14>)
 802948e:	f000 b9ef 	b.w	8029870 <_fwalk_sglue>
 8029492:	bf00      	nop
 8029494:	200000d4 	.word	0x200000d4
 8029498:	08030e31 	.word	0x08030e31
 802949c:	20000258 	.word	0x20000258

080294a0 <cleanup_stdio>:
 80294a0:	6841      	ldr	r1, [r0, #4]
 80294a2:	4b0c      	ldr	r3, [pc, #48]	@ (80294d4 <cleanup_stdio+0x34>)
 80294a4:	4299      	cmp	r1, r3
 80294a6:	b510      	push	{r4, lr}
 80294a8:	4604      	mov	r4, r0
 80294aa:	d001      	beq.n	80294b0 <cleanup_stdio+0x10>
 80294ac:	f007 fcc0 	bl	8030e30 <_fclose_r>
 80294b0:	68a1      	ldr	r1, [r4, #8]
 80294b2:	4b09      	ldr	r3, [pc, #36]	@ (80294d8 <cleanup_stdio+0x38>)
 80294b4:	4299      	cmp	r1, r3
 80294b6:	d002      	beq.n	80294be <cleanup_stdio+0x1e>
 80294b8:	4620      	mov	r0, r4
 80294ba:	f007 fcb9 	bl	8030e30 <_fclose_r>
 80294be:	68e1      	ldr	r1, [r4, #12]
 80294c0:	4b06      	ldr	r3, [pc, #24]	@ (80294dc <cleanup_stdio+0x3c>)
 80294c2:	4299      	cmp	r1, r3
 80294c4:	d004      	beq.n	80294d0 <cleanup_stdio+0x30>
 80294c6:	4620      	mov	r0, r4
 80294c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80294cc:	f007 bcb0 	b.w	8030e30 <_fclose_r>
 80294d0:	bd10      	pop	{r4, pc}
 80294d2:	bf00      	nop
 80294d4:	20018024 	.word	0x20018024
 80294d8:	2001808c 	.word	0x2001808c
 80294dc:	200180f4 	.word	0x200180f4

080294e0 <global_stdio_init.part.0>:
 80294e0:	b510      	push	{r4, lr}
 80294e2:	4b0b      	ldr	r3, [pc, #44]	@ (8029510 <global_stdio_init.part.0+0x30>)
 80294e4:	4c0b      	ldr	r4, [pc, #44]	@ (8029514 <global_stdio_init.part.0+0x34>)
 80294e6:	4a0c      	ldr	r2, [pc, #48]	@ (8029518 <global_stdio_init.part.0+0x38>)
 80294e8:	601a      	str	r2, [r3, #0]
 80294ea:	4620      	mov	r0, r4
 80294ec:	2200      	movs	r2, #0
 80294ee:	2104      	movs	r1, #4
 80294f0:	f7ff ff94 	bl	802941c <std>
 80294f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80294f8:	2201      	movs	r2, #1
 80294fa:	2109      	movs	r1, #9
 80294fc:	f7ff ff8e 	bl	802941c <std>
 8029500:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8029504:	2202      	movs	r2, #2
 8029506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802950a:	2112      	movs	r1, #18
 802950c:	f7ff bf86 	b.w	802941c <std>
 8029510:	2001815c 	.word	0x2001815c
 8029514:	20018024 	.word	0x20018024
 8029518:	08029489 	.word	0x08029489

0802951c <__sfp_lock_acquire>:
 802951c:	4801      	ldr	r0, [pc, #4]	@ (8029524 <__sfp_lock_acquire+0x8>)
 802951e:	f001 bce8 	b.w	802aef2 <__retarget_lock_acquire_recursive>
 8029522:	bf00      	nop
 8029524:	2001818c 	.word	0x2001818c

08029528 <__sfp_lock_release>:
 8029528:	4801      	ldr	r0, [pc, #4]	@ (8029530 <__sfp_lock_release+0x8>)
 802952a:	f001 bce4 	b.w	802aef6 <__retarget_lock_release_recursive>
 802952e:	bf00      	nop
 8029530:	2001818c 	.word	0x2001818c

08029534 <__sinit>:
 8029534:	b510      	push	{r4, lr}
 8029536:	4604      	mov	r4, r0
 8029538:	f7ff fff0 	bl	802951c <__sfp_lock_acquire>
 802953c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802953e:	b11b      	cbz	r3, 8029548 <__sinit+0x14>
 8029540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029544:	f7ff bff0 	b.w	8029528 <__sfp_lock_release>
 8029548:	4b04      	ldr	r3, [pc, #16]	@ (802955c <__sinit+0x28>)
 802954a:	6363      	str	r3, [r4, #52]	@ 0x34
 802954c:	4b04      	ldr	r3, [pc, #16]	@ (8029560 <__sinit+0x2c>)
 802954e:	681b      	ldr	r3, [r3, #0]
 8029550:	2b00      	cmp	r3, #0
 8029552:	d1f5      	bne.n	8029540 <__sinit+0xc>
 8029554:	f7ff ffc4 	bl	80294e0 <global_stdio_init.part.0>
 8029558:	e7f2      	b.n	8029540 <__sinit+0xc>
 802955a:	bf00      	nop
 802955c:	080294a1 	.word	0x080294a1
 8029560:	2001815c 	.word	0x2001815c

08029564 <_vsnprintf_r>:
 8029564:	b530      	push	{r4, r5, lr}
 8029566:	4614      	mov	r4, r2
 8029568:	2c00      	cmp	r4, #0
 802956a:	b09b      	sub	sp, #108	@ 0x6c
 802956c:	4605      	mov	r5, r0
 802956e:	461a      	mov	r2, r3
 8029570:	da05      	bge.n	802957e <_vsnprintf_r+0x1a>
 8029572:	238b      	movs	r3, #139	@ 0x8b
 8029574:	6003      	str	r3, [r0, #0]
 8029576:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802957a:	b01b      	add	sp, #108	@ 0x6c
 802957c:	bd30      	pop	{r4, r5, pc}
 802957e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8029582:	f8ad 300c 	strh.w	r3, [sp, #12]
 8029586:	bf14      	ite	ne
 8029588:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802958c:	4623      	moveq	r3, r4
 802958e:	9302      	str	r3, [sp, #8]
 8029590:	9305      	str	r3, [sp, #20]
 8029592:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8029596:	9100      	str	r1, [sp, #0]
 8029598:	9104      	str	r1, [sp, #16]
 802959a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802959e:	4669      	mov	r1, sp
 80295a0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80295a2:	f004 fbe5 	bl	802dd70 <_svfprintf_r>
 80295a6:	1c43      	adds	r3, r0, #1
 80295a8:	bfbc      	itt	lt
 80295aa:	238b      	movlt	r3, #139	@ 0x8b
 80295ac:	602b      	strlt	r3, [r5, #0]
 80295ae:	2c00      	cmp	r4, #0
 80295b0:	d0e3      	beq.n	802957a <_vsnprintf_r+0x16>
 80295b2:	9b00      	ldr	r3, [sp, #0]
 80295b4:	2200      	movs	r2, #0
 80295b6:	701a      	strb	r2, [r3, #0]
 80295b8:	e7df      	b.n	802957a <_vsnprintf_r+0x16>
	...

080295bc <vsnprintf>:
 80295bc:	b507      	push	{r0, r1, r2, lr}
 80295be:	9300      	str	r3, [sp, #0]
 80295c0:	4613      	mov	r3, r2
 80295c2:	460a      	mov	r2, r1
 80295c4:	4601      	mov	r1, r0
 80295c6:	4803      	ldr	r0, [pc, #12]	@ (80295d4 <vsnprintf+0x18>)
 80295c8:	6800      	ldr	r0, [r0, #0]
 80295ca:	f7ff ffcb 	bl	8029564 <_vsnprintf_r>
 80295ce:	b003      	add	sp, #12
 80295d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80295d4:	20000254 	.word	0x20000254

080295d8 <__sfvwrite_r>:
 80295d8:	6893      	ldr	r3, [r2, #8]
 80295da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80295de:	4606      	mov	r6, r0
 80295e0:	460c      	mov	r4, r1
 80295e2:	4691      	mov	r9, r2
 80295e4:	b91b      	cbnz	r3, 80295ee <__sfvwrite_r+0x16>
 80295e6:	2000      	movs	r0, #0
 80295e8:	b003      	add	sp, #12
 80295ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80295ee:	898b      	ldrh	r3, [r1, #12]
 80295f0:	0718      	lsls	r0, r3, #28
 80295f2:	d550      	bpl.n	8029696 <__sfvwrite_r+0xbe>
 80295f4:	690b      	ldr	r3, [r1, #16]
 80295f6:	2b00      	cmp	r3, #0
 80295f8:	d04d      	beq.n	8029696 <__sfvwrite_r+0xbe>
 80295fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80295fe:	f8d9 8000 	ldr.w	r8, [r9]
 8029602:	f013 0702 	ands.w	r7, r3, #2
 8029606:	d16b      	bne.n	80296e0 <__sfvwrite_r+0x108>
 8029608:	f013 0301 	ands.w	r3, r3, #1
 802960c:	f000 809c 	beq.w	8029748 <__sfvwrite_r+0x170>
 8029610:	4638      	mov	r0, r7
 8029612:	46ba      	mov	sl, r7
 8029614:	46bb      	mov	fp, r7
 8029616:	f1bb 0f00 	cmp.w	fp, #0
 802961a:	f000 8103 	beq.w	8029824 <__sfvwrite_r+0x24c>
 802961e:	b950      	cbnz	r0, 8029636 <__sfvwrite_r+0x5e>
 8029620:	465a      	mov	r2, fp
 8029622:	210a      	movs	r1, #10
 8029624:	4650      	mov	r0, sl
 8029626:	f7e6 fdeb 	bl	8010200 <memchr>
 802962a:	2800      	cmp	r0, #0
 802962c:	f000 8100 	beq.w	8029830 <__sfvwrite_r+0x258>
 8029630:	3001      	adds	r0, #1
 8029632:	eba0 070a 	sub.w	r7, r0, sl
 8029636:	6820      	ldr	r0, [r4, #0]
 8029638:	6921      	ldr	r1, [r4, #16]
 802963a:	68a5      	ldr	r5, [r4, #8]
 802963c:	6963      	ldr	r3, [r4, #20]
 802963e:	455f      	cmp	r7, fp
 8029640:	463a      	mov	r2, r7
 8029642:	bf28      	it	cs
 8029644:	465a      	movcs	r2, fp
 8029646:	4288      	cmp	r0, r1
 8029648:	f240 80f5 	bls.w	8029836 <__sfvwrite_r+0x25e>
 802964c:	441d      	add	r5, r3
 802964e:	42aa      	cmp	r2, r5
 8029650:	f340 80f1 	ble.w	8029836 <__sfvwrite_r+0x25e>
 8029654:	4651      	mov	r1, sl
 8029656:	462a      	mov	r2, r5
 8029658:	f000 f9f8 	bl	8029a4c <memmove>
 802965c:	6823      	ldr	r3, [r4, #0]
 802965e:	442b      	add	r3, r5
 8029660:	6023      	str	r3, [r4, #0]
 8029662:	4621      	mov	r1, r4
 8029664:	4630      	mov	r0, r6
 8029666:	f7ff fe23 	bl	80292b0 <_fflush_r>
 802966a:	2800      	cmp	r0, #0
 802966c:	d167      	bne.n	802973e <__sfvwrite_r+0x166>
 802966e:	1b7f      	subs	r7, r7, r5
 8029670:	f040 80f9 	bne.w	8029866 <__sfvwrite_r+0x28e>
 8029674:	4621      	mov	r1, r4
 8029676:	4630      	mov	r0, r6
 8029678:	f7ff fe1a 	bl	80292b0 <_fflush_r>
 802967c:	2800      	cmp	r0, #0
 802967e:	d15e      	bne.n	802973e <__sfvwrite_r+0x166>
 8029680:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8029684:	1b5b      	subs	r3, r3, r5
 8029686:	44aa      	add	sl, r5
 8029688:	ebab 0b05 	sub.w	fp, fp, r5
 802968c:	f8c9 3008 	str.w	r3, [r9, #8]
 8029690:	2b00      	cmp	r3, #0
 8029692:	d1c0      	bne.n	8029616 <__sfvwrite_r+0x3e>
 8029694:	e7a7      	b.n	80295e6 <__sfvwrite_r+0xe>
 8029696:	4621      	mov	r1, r4
 8029698:	4630      	mov	r0, r6
 802969a:	f000 f907 	bl	80298ac <__swsetup_r>
 802969e:	2800      	cmp	r0, #0
 80296a0:	d0ab      	beq.n	80295fa <__sfvwrite_r+0x22>
 80296a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80296a6:	e79f      	b.n	80295e8 <__sfvwrite_r+0x10>
 80296a8:	e9d8 a500 	ldrd	sl, r5, [r8]
 80296ac:	f108 0808 	add.w	r8, r8, #8
 80296b0:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 80296b4:	69e1      	ldr	r1, [r4, #28]
 80296b6:	2d00      	cmp	r5, #0
 80296b8:	d0f6      	beq.n	80296a8 <__sfvwrite_r+0xd0>
 80296ba:	42bd      	cmp	r5, r7
 80296bc:	462b      	mov	r3, r5
 80296be:	4652      	mov	r2, sl
 80296c0:	bf28      	it	cs
 80296c2:	463b      	movcs	r3, r7
 80296c4:	4630      	mov	r0, r6
 80296c6:	47d8      	blx	fp
 80296c8:	2800      	cmp	r0, #0
 80296ca:	dd38      	ble.n	802973e <__sfvwrite_r+0x166>
 80296cc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80296d0:	1a1b      	subs	r3, r3, r0
 80296d2:	4482      	add	sl, r0
 80296d4:	1a2d      	subs	r5, r5, r0
 80296d6:	f8c9 3008 	str.w	r3, [r9, #8]
 80296da:	2b00      	cmp	r3, #0
 80296dc:	d1e8      	bne.n	80296b0 <__sfvwrite_r+0xd8>
 80296de:	e782      	b.n	80295e6 <__sfvwrite_r+0xe>
 80296e0:	f04f 0a00 	mov.w	sl, #0
 80296e4:	4f61      	ldr	r7, [pc, #388]	@ (802986c <__sfvwrite_r+0x294>)
 80296e6:	4655      	mov	r5, sl
 80296e8:	e7e2      	b.n	80296b0 <__sfvwrite_r+0xd8>
 80296ea:	e9d8 7a00 	ldrd	r7, sl, [r8]
 80296ee:	f108 0808 	add.w	r8, r8, #8
 80296f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80296f6:	6820      	ldr	r0, [r4, #0]
 80296f8:	68a2      	ldr	r2, [r4, #8]
 80296fa:	f1ba 0f00 	cmp.w	sl, #0
 80296fe:	d0f4      	beq.n	80296ea <__sfvwrite_r+0x112>
 8029700:	0599      	lsls	r1, r3, #22
 8029702:	d563      	bpl.n	80297cc <__sfvwrite_r+0x1f4>
 8029704:	4552      	cmp	r2, sl
 8029706:	d836      	bhi.n	8029776 <__sfvwrite_r+0x19e>
 8029708:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 802970c:	d033      	beq.n	8029776 <__sfvwrite_r+0x19e>
 802970e:	6921      	ldr	r1, [r4, #16]
 8029710:	6965      	ldr	r5, [r4, #20]
 8029712:	eba0 0b01 	sub.w	fp, r0, r1
 8029716:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802971a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802971e:	f10b 0201 	add.w	r2, fp, #1
 8029722:	106d      	asrs	r5, r5, #1
 8029724:	4452      	add	r2, sl
 8029726:	4295      	cmp	r5, r2
 8029728:	bf38      	it	cc
 802972a:	4615      	movcc	r5, r2
 802972c:	055b      	lsls	r3, r3, #21
 802972e:	d53d      	bpl.n	80297ac <__sfvwrite_r+0x1d4>
 8029730:	4629      	mov	r1, r5
 8029732:	4630      	mov	r0, r6
 8029734:	f002 fbfa 	bl	802bf2c <_malloc_r>
 8029738:	b948      	cbnz	r0, 802974e <__sfvwrite_r+0x176>
 802973a:	230c      	movs	r3, #12
 802973c:	6033      	str	r3, [r6, #0]
 802973e:	89a3      	ldrh	r3, [r4, #12]
 8029740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029744:	81a3      	strh	r3, [r4, #12]
 8029746:	e7ac      	b.n	80296a2 <__sfvwrite_r+0xca>
 8029748:	461f      	mov	r7, r3
 802974a:	469a      	mov	sl, r3
 802974c:	e7d1      	b.n	80296f2 <__sfvwrite_r+0x11a>
 802974e:	465a      	mov	r2, fp
 8029750:	6921      	ldr	r1, [r4, #16]
 8029752:	9001      	str	r0, [sp, #4]
 8029754:	f001 fbd0 	bl	802aef8 <memcpy>
 8029758:	89a2      	ldrh	r2, [r4, #12]
 802975a:	9b01      	ldr	r3, [sp, #4]
 802975c:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8029760:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8029764:	81a2      	strh	r2, [r4, #12]
 8029766:	6123      	str	r3, [r4, #16]
 8029768:	6165      	str	r5, [r4, #20]
 802976a:	445b      	add	r3, fp
 802976c:	eba5 050b 	sub.w	r5, r5, fp
 8029770:	6023      	str	r3, [r4, #0]
 8029772:	4652      	mov	r2, sl
 8029774:	60a5      	str	r5, [r4, #8]
 8029776:	4552      	cmp	r2, sl
 8029778:	bf28      	it	cs
 802977a:	4652      	movcs	r2, sl
 802977c:	6820      	ldr	r0, [r4, #0]
 802977e:	9201      	str	r2, [sp, #4]
 8029780:	4639      	mov	r1, r7
 8029782:	f000 f963 	bl	8029a4c <memmove>
 8029786:	68a3      	ldr	r3, [r4, #8]
 8029788:	9a01      	ldr	r2, [sp, #4]
 802978a:	1a9b      	subs	r3, r3, r2
 802978c:	60a3      	str	r3, [r4, #8]
 802978e:	6823      	ldr	r3, [r4, #0]
 8029790:	4413      	add	r3, r2
 8029792:	4655      	mov	r5, sl
 8029794:	6023      	str	r3, [r4, #0]
 8029796:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802979a:	1b5b      	subs	r3, r3, r5
 802979c:	442f      	add	r7, r5
 802979e:	ebaa 0a05 	sub.w	sl, sl, r5
 80297a2:	f8c9 3008 	str.w	r3, [r9, #8]
 80297a6:	2b00      	cmp	r3, #0
 80297a8:	d1a3      	bne.n	80296f2 <__sfvwrite_r+0x11a>
 80297aa:	e71c      	b.n	80295e6 <__sfvwrite_r+0xe>
 80297ac:	462a      	mov	r2, r5
 80297ae:	4630      	mov	r0, r6
 80297b0:	f007 fbcc 	bl	8030f4c <_realloc_r>
 80297b4:	4603      	mov	r3, r0
 80297b6:	2800      	cmp	r0, #0
 80297b8:	d1d5      	bne.n	8029766 <__sfvwrite_r+0x18e>
 80297ba:	6921      	ldr	r1, [r4, #16]
 80297bc:	4630      	mov	r0, r6
 80297be:	f002 fa9d 	bl	802bcfc <_free_r>
 80297c2:	89a3      	ldrh	r3, [r4, #12]
 80297c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80297c8:	81a3      	strh	r3, [r4, #12]
 80297ca:	e7b6      	b.n	802973a <__sfvwrite_r+0x162>
 80297cc:	6923      	ldr	r3, [r4, #16]
 80297ce:	4283      	cmp	r3, r0
 80297d0:	d302      	bcc.n	80297d8 <__sfvwrite_r+0x200>
 80297d2:	6961      	ldr	r1, [r4, #20]
 80297d4:	4551      	cmp	r1, sl
 80297d6:	d915      	bls.n	8029804 <__sfvwrite_r+0x22c>
 80297d8:	4552      	cmp	r2, sl
 80297da:	bf28      	it	cs
 80297dc:	4652      	movcs	r2, sl
 80297de:	4639      	mov	r1, r7
 80297e0:	4615      	mov	r5, r2
 80297e2:	f000 f933 	bl	8029a4c <memmove>
 80297e6:	68a3      	ldr	r3, [r4, #8]
 80297e8:	6822      	ldr	r2, [r4, #0]
 80297ea:	1b5b      	subs	r3, r3, r5
 80297ec:	442a      	add	r2, r5
 80297ee:	60a3      	str	r3, [r4, #8]
 80297f0:	6022      	str	r2, [r4, #0]
 80297f2:	2b00      	cmp	r3, #0
 80297f4:	d1cf      	bne.n	8029796 <__sfvwrite_r+0x1be>
 80297f6:	4621      	mov	r1, r4
 80297f8:	4630      	mov	r0, r6
 80297fa:	f7ff fd59 	bl	80292b0 <_fflush_r>
 80297fe:	2800      	cmp	r0, #0
 8029800:	d0c9      	beq.n	8029796 <__sfvwrite_r+0x1be>
 8029802:	e79c      	b.n	802973e <__sfvwrite_r+0x166>
 8029804:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8029808:	4553      	cmp	r3, sl
 802980a:	bf28      	it	cs
 802980c:	4653      	movcs	r3, sl
 802980e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8029810:	fb93 f3f1 	sdiv	r3, r3, r1
 8029814:	463a      	mov	r2, r7
 8029816:	434b      	muls	r3, r1
 8029818:	4630      	mov	r0, r6
 802981a:	69e1      	ldr	r1, [r4, #28]
 802981c:	47a8      	blx	r5
 802981e:	1e05      	subs	r5, r0, #0
 8029820:	dcb9      	bgt.n	8029796 <__sfvwrite_r+0x1be>
 8029822:	e78c      	b.n	802973e <__sfvwrite_r+0x166>
 8029824:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8029828:	2000      	movs	r0, #0
 802982a:	f108 0808 	add.w	r8, r8, #8
 802982e:	e6f2      	b.n	8029616 <__sfvwrite_r+0x3e>
 8029830:	f10b 0701 	add.w	r7, fp, #1
 8029834:	e6ff      	b.n	8029636 <__sfvwrite_r+0x5e>
 8029836:	4293      	cmp	r3, r2
 8029838:	dc08      	bgt.n	802984c <__sfvwrite_r+0x274>
 802983a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802983c:	69e1      	ldr	r1, [r4, #28]
 802983e:	4652      	mov	r2, sl
 8029840:	4630      	mov	r0, r6
 8029842:	47a8      	blx	r5
 8029844:	1e05      	subs	r5, r0, #0
 8029846:	f73f af12 	bgt.w	802966e <__sfvwrite_r+0x96>
 802984a:	e778      	b.n	802973e <__sfvwrite_r+0x166>
 802984c:	4651      	mov	r1, sl
 802984e:	9201      	str	r2, [sp, #4]
 8029850:	f000 f8fc 	bl	8029a4c <memmove>
 8029854:	9a01      	ldr	r2, [sp, #4]
 8029856:	68a3      	ldr	r3, [r4, #8]
 8029858:	1a9b      	subs	r3, r3, r2
 802985a:	60a3      	str	r3, [r4, #8]
 802985c:	6823      	ldr	r3, [r4, #0]
 802985e:	4413      	add	r3, r2
 8029860:	6023      	str	r3, [r4, #0]
 8029862:	4615      	mov	r5, r2
 8029864:	e703      	b.n	802966e <__sfvwrite_r+0x96>
 8029866:	2001      	movs	r0, #1
 8029868:	e70a      	b.n	8029680 <__sfvwrite_r+0xa8>
 802986a:	bf00      	nop
 802986c:	7ffffc00 	.word	0x7ffffc00

08029870 <_fwalk_sglue>:
 8029870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029874:	4607      	mov	r7, r0
 8029876:	4688      	mov	r8, r1
 8029878:	4614      	mov	r4, r2
 802987a:	2600      	movs	r6, #0
 802987c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8029880:	f1b9 0901 	subs.w	r9, r9, #1
 8029884:	d505      	bpl.n	8029892 <_fwalk_sglue+0x22>
 8029886:	6824      	ldr	r4, [r4, #0]
 8029888:	2c00      	cmp	r4, #0
 802988a:	d1f7      	bne.n	802987c <_fwalk_sglue+0xc>
 802988c:	4630      	mov	r0, r6
 802988e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029892:	89ab      	ldrh	r3, [r5, #12]
 8029894:	2b01      	cmp	r3, #1
 8029896:	d907      	bls.n	80298a8 <_fwalk_sglue+0x38>
 8029898:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802989c:	3301      	adds	r3, #1
 802989e:	d003      	beq.n	80298a8 <_fwalk_sglue+0x38>
 80298a0:	4629      	mov	r1, r5
 80298a2:	4638      	mov	r0, r7
 80298a4:	47c0      	blx	r8
 80298a6:	4306      	orrs	r6, r0
 80298a8:	3568      	adds	r5, #104	@ 0x68
 80298aa:	e7e9      	b.n	8029880 <_fwalk_sglue+0x10>

080298ac <__swsetup_r>:
 80298ac:	b538      	push	{r3, r4, r5, lr}
 80298ae:	4b29      	ldr	r3, [pc, #164]	@ (8029954 <__swsetup_r+0xa8>)
 80298b0:	4605      	mov	r5, r0
 80298b2:	6818      	ldr	r0, [r3, #0]
 80298b4:	460c      	mov	r4, r1
 80298b6:	b118      	cbz	r0, 80298c0 <__swsetup_r+0x14>
 80298b8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80298ba:	b90b      	cbnz	r3, 80298c0 <__swsetup_r+0x14>
 80298bc:	f7ff fe3a 	bl	8029534 <__sinit>
 80298c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80298c4:	0719      	lsls	r1, r3, #28
 80298c6:	d422      	bmi.n	802990e <__swsetup_r+0x62>
 80298c8:	06da      	lsls	r2, r3, #27
 80298ca:	d407      	bmi.n	80298dc <__swsetup_r+0x30>
 80298cc:	2209      	movs	r2, #9
 80298ce:	602a      	str	r2, [r5, #0]
 80298d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80298d4:	81a3      	strh	r3, [r4, #12]
 80298d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80298da:	e033      	b.n	8029944 <__swsetup_r+0x98>
 80298dc:	0758      	lsls	r0, r3, #29
 80298de:	d512      	bpl.n	8029906 <__swsetup_r+0x5a>
 80298e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80298e2:	b141      	cbz	r1, 80298f6 <__swsetup_r+0x4a>
 80298e4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80298e8:	4299      	cmp	r1, r3
 80298ea:	d002      	beq.n	80298f2 <__swsetup_r+0x46>
 80298ec:	4628      	mov	r0, r5
 80298ee:	f002 fa05 	bl	802bcfc <_free_r>
 80298f2:	2300      	movs	r3, #0
 80298f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80298f6:	89a3      	ldrh	r3, [r4, #12]
 80298f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80298fc:	81a3      	strh	r3, [r4, #12]
 80298fe:	2300      	movs	r3, #0
 8029900:	6063      	str	r3, [r4, #4]
 8029902:	6923      	ldr	r3, [r4, #16]
 8029904:	6023      	str	r3, [r4, #0]
 8029906:	89a3      	ldrh	r3, [r4, #12]
 8029908:	f043 0308 	orr.w	r3, r3, #8
 802990c:	81a3      	strh	r3, [r4, #12]
 802990e:	6923      	ldr	r3, [r4, #16]
 8029910:	b94b      	cbnz	r3, 8029926 <__swsetup_r+0x7a>
 8029912:	89a3      	ldrh	r3, [r4, #12]
 8029914:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8029918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802991c:	d003      	beq.n	8029926 <__swsetup_r+0x7a>
 802991e:	4621      	mov	r1, r4
 8029920:	4628      	mov	r0, r5
 8029922:	f005 fc2b 	bl	802f17c <__smakebuf_r>
 8029926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802992a:	f013 0201 	ands.w	r2, r3, #1
 802992e:	d00a      	beq.n	8029946 <__swsetup_r+0x9a>
 8029930:	2200      	movs	r2, #0
 8029932:	60a2      	str	r2, [r4, #8]
 8029934:	6962      	ldr	r2, [r4, #20]
 8029936:	4252      	negs	r2, r2
 8029938:	61a2      	str	r2, [r4, #24]
 802993a:	6922      	ldr	r2, [r4, #16]
 802993c:	b942      	cbnz	r2, 8029950 <__swsetup_r+0xa4>
 802993e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8029942:	d1c5      	bne.n	80298d0 <__swsetup_r+0x24>
 8029944:	bd38      	pop	{r3, r4, r5, pc}
 8029946:	0799      	lsls	r1, r3, #30
 8029948:	bf58      	it	pl
 802994a:	6962      	ldrpl	r2, [r4, #20]
 802994c:	60a2      	str	r2, [r4, #8]
 802994e:	e7f4      	b.n	802993a <__swsetup_r+0x8e>
 8029950:	2000      	movs	r0, #0
 8029952:	e7f7      	b.n	8029944 <__swsetup_r+0x98>
 8029954:	20000254 	.word	0x20000254

08029958 <memcmp>:
 8029958:	b510      	push	{r4, lr}
 802995a:	3901      	subs	r1, #1
 802995c:	4402      	add	r2, r0
 802995e:	4290      	cmp	r0, r2
 8029960:	d101      	bne.n	8029966 <memcmp+0xe>
 8029962:	2000      	movs	r0, #0
 8029964:	e005      	b.n	8029972 <memcmp+0x1a>
 8029966:	7803      	ldrb	r3, [r0, #0]
 8029968:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802996c:	42a3      	cmp	r3, r4
 802996e:	d001      	beq.n	8029974 <memcmp+0x1c>
 8029970:	1b18      	subs	r0, r3, r4
 8029972:	bd10      	pop	{r4, pc}
 8029974:	3001      	adds	r0, #1
 8029976:	e7f2      	b.n	802995e <memcmp+0x6>

08029978 <__fputwc>:
 8029978:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802997c:	4680      	mov	r8, r0
 802997e:	460f      	mov	r7, r1
 8029980:	4614      	mov	r4, r2
 8029982:	f001 fa05 	bl	802ad90 <__locale_mb_cur_max>
 8029986:	2801      	cmp	r0, #1
 8029988:	4605      	mov	r5, r0
 802998a:	d11b      	bne.n	80299c4 <__fputwc+0x4c>
 802998c:	1e7b      	subs	r3, r7, #1
 802998e:	2bfe      	cmp	r3, #254	@ 0xfe
 8029990:	d818      	bhi.n	80299c4 <__fputwc+0x4c>
 8029992:	f88d 7004 	strb.w	r7, [sp, #4]
 8029996:	2600      	movs	r6, #0
 8029998:	f10d 0904 	add.w	r9, sp, #4
 802999c:	42ae      	cmp	r6, r5
 802999e:	d021      	beq.n	80299e4 <__fputwc+0x6c>
 80299a0:	68a3      	ldr	r3, [r4, #8]
 80299a2:	f816 1009 	ldrb.w	r1, [r6, r9]
 80299a6:	3b01      	subs	r3, #1
 80299a8:	2b00      	cmp	r3, #0
 80299aa:	60a3      	str	r3, [r4, #8]
 80299ac:	da04      	bge.n	80299b8 <__fputwc+0x40>
 80299ae:	69a2      	ldr	r2, [r4, #24]
 80299b0:	4293      	cmp	r3, r2
 80299b2:	db1b      	blt.n	80299ec <__fputwc+0x74>
 80299b4:	290a      	cmp	r1, #10
 80299b6:	d019      	beq.n	80299ec <__fputwc+0x74>
 80299b8:	6823      	ldr	r3, [r4, #0]
 80299ba:	1c5a      	adds	r2, r3, #1
 80299bc:	6022      	str	r2, [r4, #0]
 80299be:	7019      	strb	r1, [r3, #0]
 80299c0:	3601      	adds	r6, #1
 80299c2:	e7eb      	b.n	802999c <__fputwc+0x24>
 80299c4:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 80299c8:	463a      	mov	r2, r7
 80299ca:	a901      	add	r1, sp, #4
 80299cc:	4640      	mov	r0, r8
 80299ce:	f001 faa1 	bl	802af14 <_wcrtomb_r>
 80299d2:	1c43      	adds	r3, r0, #1
 80299d4:	4605      	mov	r5, r0
 80299d6:	d1de      	bne.n	8029996 <__fputwc+0x1e>
 80299d8:	89a3      	ldrh	r3, [r4, #12]
 80299da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80299de:	81a3      	strh	r3, [r4, #12]
 80299e0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80299e4:	4638      	mov	r0, r7
 80299e6:	b003      	add	sp, #12
 80299e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80299ec:	4622      	mov	r2, r4
 80299ee:	4640      	mov	r0, r8
 80299f0:	f008 fb1d 	bl	803202e <__swbuf_r>
 80299f4:	3001      	adds	r0, #1
 80299f6:	d1e3      	bne.n	80299c0 <__fputwc+0x48>
 80299f8:	e7f2      	b.n	80299e0 <__fputwc+0x68>

080299fa <_fputwc_r>:
 80299fa:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 80299fc:	07db      	lsls	r3, r3, #31
 80299fe:	b570      	push	{r4, r5, r6, lr}
 8029a00:	4605      	mov	r5, r0
 8029a02:	460e      	mov	r6, r1
 8029a04:	4614      	mov	r4, r2
 8029a06:	d405      	bmi.n	8029a14 <_fputwc_r+0x1a>
 8029a08:	8993      	ldrh	r3, [r2, #12]
 8029a0a:	0598      	lsls	r0, r3, #22
 8029a0c:	d402      	bmi.n	8029a14 <_fputwc_r+0x1a>
 8029a0e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8029a10:	f001 fa6f 	bl	802aef2 <__retarget_lock_acquire_recursive>
 8029a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029a18:	0499      	lsls	r1, r3, #18
 8029a1a:	d406      	bmi.n	8029a2a <_fputwc_r+0x30>
 8029a1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8029a20:	81a3      	strh	r3, [r4, #12]
 8029a22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8029a24:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8029a28:	6663      	str	r3, [r4, #100]	@ 0x64
 8029a2a:	4622      	mov	r2, r4
 8029a2c:	4628      	mov	r0, r5
 8029a2e:	4631      	mov	r1, r6
 8029a30:	f7ff ffa2 	bl	8029978 <__fputwc>
 8029a34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8029a36:	07da      	lsls	r2, r3, #31
 8029a38:	4605      	mov	r5, r0
 8029a3a:	d405      	bmi.n	8029a48 <_fputwc_r+0x4e>
 8029a3c:	89a3      	ldrh	r3, [r4, #12]
 8029a3e:	059b      	lsls	r3, r3, #22
 8029a40:	d402      	bmi.n	8029a48 <_fputwc_r+0x4e>
 8029a42:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029a44:	f001 fa57 	bl	802aef6 <__retarget_lock_release_recursive>
 8029a48:	4628      	mov	r0, r5
 8029a4a:	bd70      	pop	{r4, r5, r6, pc}

08029a4c <memmove>:
 8029a4c:	4288      	cmp	r0, r1
 8029a4e:	b510      	push	{r4, lr}
 8029a50:	eb01 0402 	add.w	r4, r1, r2
 8029a54:	d902      	bls.n	8029a5c <memmove+0x10>
 8029a56:	4284      	cmp	r4, r0
 8029a58:	4623      	mov	r3, r4
 8029a5a:	d807      	bhi.n	8029a6c <memmove+0x20>
 8029a5c:	1e43      	subs	r3, r0, #1
 8029a5e:	42a1      	cmp	r1, r4
 8029a60:	d008      	beq.n	8029a74 <memmove+0x28>
 8029a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8029a66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8029a6a:	e7f8      	b.n	8029a5e <memmove+0x12>
 8029a6c:	4402      	add	r2, r0
 8029a6e:	4601      	mov	r1, r0
 8029a70:	428a      	cmp	r2, r1
 8029a72:	d100      	bne.n	8029a76 <memmove+0x2a>
 8029a74:	bd10      	pop	{r4, pc}
 8029a76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8029a7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8029a7e:	e7f7      	b.n	8029a70 <memmove+0x24>

08029a80 <memset>:
 8029a80:	4402      	add	r2, r0
 8029a82:	4603      	mov	r3, r0
 8029a84:	4293      	cmp	r3, r2
 8029a86:	d100      	bne.n	8029a8a <memset+0xa>
 8029a88:	4770      	bx	lr
 8029a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8029a8e:	e7f9      	b.n	8029a84 <memset+0x4>

08029a90 <strcat>:
 8029a90:	b510      	push	{r4, lr}
 8029a92:	4602      	mov	r2, r0
 8029a94:	7814      	ldrb	r4, [r2, #0]
 8029a96:	4613      	mov	r3, r2
 8029a98:	3201      	adds	r2, #1
 8029a9a:	2c00      	cmp	r4, #0
 8029a9c:	d1fa      	bne.n	8029a94 <strcat+0x4>
 8029a9e:	3b01      	subs	r3, #1
 8029aa0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8029aa4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8029aa8:	2a00      	cmp	r2, #0
 8029aaa:	d1f9      	bne.n	8029aa0 <strcat+0x10>
 8029aac:	bd10      	pop	{r4, pc}

08029aae <strchr>:
 8029aae:	b2c9      	uxtb	r1, r1
 8029ab0:	4603      	mov	r3, r0
 8029ab2:	4618      	mov	r0, r3
 8029ab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029ab8:	b112      	cbz	r2, 8029ac0 <strchr+0x12>
 8029aba:	428a      	cmp	r2, r1
 8029abc:	d1f9      	bne.n	8029ab2 <strchr+0x4>
 8029abe:	4770      	bx	lr
 8029ac0:	2900      	cmp	r1, #0
 8029ac2:	bf18      	it	ne
 8029ac4:	2000      	movne	r0, #0
 8029ac6:	4770      	bx	lr

08029ac8 <strcspn>:
 8029ac8:	b570      	push	{r4, r5, r6, lr}
 8029aca:	4603      	mov	r3, r0
 8029acc:	461e      	mov	r6, r3
 8029ace:	f813 4b01 	ldrb.w	r4, [r3], #1
 8029ad2:	b144      	cbz	r4, 8029ae6 <strcspn+0x1e>
 8029ad4:	1e4a      	subs	r2, r1, #1
 8029ad6:	e001      	b.n	8029adc <strcspn+0x14>
 8029ad8:	42a5      	cmp	r5, r4
 8029ada:	d004      	beq.n	8029ae6 <strcspn+0x1e>
 8029adc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8029ae0:	2d00      	cmp	r5, #0
 8029ae2:	d1f9      	bne.n	8029ad8 <strcspn+0x10>
 8029ae4:	e7f2      	b.n	8029acc <strcspn+0x4>
 8029ae6:	1a30      	subs	r0, r6, r0
 8029ae8:	bd70      	pop	{r4, r5, r6, pc}

08029aea <strncmp>:
 8029aea:	b510      	push	{r4, lr}
 8029aec:	b16a      	cbz	r2, 8029b0a <strncmp+0x20>
 8029aee:	3901      	subs	r1, #1
 8029af0:	1884      	adds	r4, r0, r2
 8029af2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029af6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8029afa:	429a      	cmp	r2, r3
 8029afc:	d103      	bne.n	8029b06 <strncmp+0x1c>
 8029afe:	42a0      	cmp	r0, r4
 8029b00:	d001      	beq.n	8029b06 <strncmp+0x1c>
 8029b02:	2a00      	cmp	r2, #0
 8029b04:	d1f5      	bne.n	8029af2 <strncmp+0x8>
 8029b06:	1ad0      	subs	r0, r2, r3
 8029b08:	bd10      	pop	{r4, pc}
 8029b0a:	4610      	mov	r0, r2
 8029b0c:	e7fc      	b.n	8029b08 <strncmp+0x1e>

08029b0e <strncpy>:
 8029b0e:	b510      	push	{r4, lr}
 8029b10:	3901      	subs	r1, #1
 8029b12:	4603      	mov	r3, r0
 8029b14:	b132      	cbz	r2, 8029b24 <strncpy+0x16>
 8029b16:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8029b1a:	f803 4b01 	strb.w	r4, [r3], #1
 8029b1e:	3a01      	subs	r2, #1
 8029b20:	2c00      	cmp	r4, #0
 8029b22:	d1f7      	bne.n	8029b14 <strncpy+0x6>
 8029b24:	441a      	add	r2, r3
 8029b26:	2100      	movs	r1, #0
 8029b28:	4293      	cmp	r3, r2
 8029b2a:	d100      	bne.n	8029b2e <strncpy+0x20>
 8029b2c:	bd10      	pop	{r4, pc}
 8029b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8029b32:	e7f9      	b.n	8029b28 <strncpy+0x1a>

08029b34 <strrchr>:
 8029b34:	b538      	push	{r3, r4, r5, lr}
 8029b36:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8029b3a:	4603      	mov	r3, r0
 8029b3c:	d10e      	bne.n	8029b5c <strrchr+0x28>
 8029b3e:	4621      	mov	r1, r4
 8029b40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029b44:	f7ff bfb3 	b.w	8029aae <strchr>
 8029b48:	1c43      	adds	r3, r0, #1
 8029b4a:	4605      	mov	r5, r0
 8029b4c:	4621      	mov	r1, r4
 8029b4e:	4618      	mov	r0, r3
 8029b50:	f7ff ffad 	bl	8029aae <strchr>
 8029b54:	2800      	cmp	r0, #0
 8029b56:	d1f7      	bne.n	8029b48 <strrchr+0x14>
 8029b58:	4628      	mov	r0, r5
 8029b5a:	bd38      	pop	{r3, r4, r5, pc}
 8029b5c:	2500      	movs	r5, #0
 8029b5e:	e7f5      	b.n	8029b4c <strrchr+0x18>

08029b60 <strspn>:
 8029b60:	b570      	push	{r4, r5, r6, lr}
 8029b62:	4603      	mov	r3, r0
 8029b64:	461e      	mov	r6, r3
 8029b66:	f813 4b01 	ldrb.w	r4, [r3], #1
 8029b6a:	b13c      	cbz	r4, 8029b7c <strspn+0x1c>
 8029b6c:	1e4a      	subs	r2, r1, #1
 8029b6e:	e001      	b.n	8029b74 <strspn+0x14>
 8029b70:	42a5      	cmp	r5, r4
 8029b72:	d0f7      	beq.n	8029b64 <strspn+0x4>
 8029b74:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8029b78:	2d00      	cmp	r5, #0
 8029b7a:	d1f9      	bne.n	8029b70 <strspn+0x10>
 8029b7c:	1a30      	subs	r0, r6, r0
 8029b7e:	bd70      	pop	{r4, r5, r6, pc}

08029b80 <strstr>:
 8029b80:	780a      	ldrb	r2, [r1, #0]
 8029b82:	b570      	push	{r4, r5, r6, lr}
 8029b84:	b96a      	cbnz	r2, 8029ba2 <strstr+0x22>
 8029b86:	bd70      	pop	{r4, r5, r6, pc}
 8029b88:	429a      	cmp	r2, r3
 8029b8a:	d109      	bne.n	8029ba0 <strstr+0x20>
 8029b8c:	460c      	mov	r4, r1
 8029b8e:	4605      	mov	r5, r0
 8029b90:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8029b94:	2b00      	cmp	r3, #0
 8029b96:	d0f6      	beq.n	8029b86 <strstr+0x6>
 8029b98:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8029b9c:	429e      	cmp	r6, r3
 8029b9e:	d0f7      	beq.n	8029b90 <strstr+0x10>
 8029ba0:	3001      	adds	r0, #1
 8029ba2:	7803      	ldrb	r3, [r0, #0]
 8029ba4:	2b00      	cmp	r3, #0
 8029ba6:	d1ef      	bne.n	8029b88 <strstr+0x8>
 8029ba8:	4618      	mov	r0, r3
 8029baa:	e7ec      	b.n	8029b86 <strstr+0x6>

08029bac <localtime_r>:
 8029bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029bb0:	460c      	mov	r4, r1
 8029bb2:	4680      	mov	r8, r0
 8029bb4:	f008 fab6 	bl	8032124 <__gettzinfo>
 8029bb8:	4621      	mov	r1, r4
 8029bba:	4605      	mov	r5, r0
 8029bbc:	4640      	mov	r0, r8
 8029bbe:	f008 fab5 	bl	803212c <gmtime_r>
 8029bc2:	6943      	ldr	r3, [r0, #20]
 8029bc4:	0799      	lsls	r1, r3, #30
 8029bc6:	4604      	mov	r4, r0
 8029bc8:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 8029bcc:	d106      	bne.n	8029bdc <localtime_r+0x30>
 8029bce:	2264      	movs	r2, #100	@ 0x64
 8029bd0:	fb97 f3f2 	sdiv	r3, r7, r2
 8029bd4:	fb02 7313 	mls	r3, r2, r3, r7
 8029bd8:	2b00      	cmp	r3, #0
 8029bda:	d170      	bne.n	8029cbe <localtime_r+0x112>
 8029bdc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8029be0:	fb97 f3f2 	sdiv	r3, r7, r2
 8029be4:	fb02 7313 	mls	r3, r2, r3, r7
 8029be8:	fab3 f383 	clz	r3, r3
 8029bec:	095b      	lsrs	r3, r3, #5
 8029bee:	4e64      	ldr	r6, [pc, #400]	@ (8029d80 <localtime_r+0x1d4>)
 8029bf0:	2230      	movs	r2, #48	@ 0x30
 8029bf2:	fb02 6603 	mla	r6, r2, r3, r6
 8029bf6:	f000 fe97 	bl	802a928 <__tz_lock>
 8029bfa:	f000 fea1 	bl	802a940 <_tzset_unlocked>
 8029bfe:	4b61      	ldr	r3, [pc, #388]	@ (8029d84 <localtime_r+0x1d8>)
 8029c00:	681b      	ldr	r3, [r3, #0]
 8029c02:	2b00      	cmp	r3, #0
 8029c04:	d06a      	beq.n	8029cdc <localtime_r+0x130>
 8029c06:	686b      	ldr	r3, [r5, #4]
 8029c08:	42bb      	cmp	r3, r7
 8029c0a:	d15a      	bne.n	8029cc2 <localtime_r+0x116>
 8029c0c:	682f      	ldr	r7, [r5, #0]
 8029c0e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8029c12:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8029c16:	2f00      	cmp	r7, #0
 8029c18:	d15b      	bne.n	8029cd2 <localtime_r+0x126>
 8029c1a:	4282      	cmp	r2, r0
 8029c1c:	eb73 0101 	sbcs.w	r1, r3, r1
 8029c20:	db5e      	blt.n	8029ce0 <localtime_r+0x134>
 8029c22:	2301      	movs	r3, #1
 8029c24:	6223      	str	r3, [r4, #32]
 8029c26:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8029c28:	6861      	ldr	r1, [r4, #4]
 8029c2a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8029c2e:	fb93 f0f2 	sdiv	r0, r3, r2
 8029c32:	fb02 3310 	mls	r3, r2, r0, r3
 8029c36:	223c      	movs	r2, #60	@ 0x3c
 8029c38:	fb93 f5f2 	sdiv	r5, r3, r2
 8029c3c:	fb02 3215 	mls	r2, r2, r5, r3
 8029c40:	6823      	ldr	r3, [r4, #0]
 8029c42:	1a9b      	subs	r3, r3, r2
 8029c44:	68a2      	ldr	r2, [r4, #8]
 8029c46:	6023      	str	r3, [r4, #0]
 8029c48:	1b49      	subs	r1, r1, r5
 8029c4a:	1a12      	subs	r2, r2, r0
 8029c4c:	2b3b      	cmp	r3, #59	@ 0x3b
 8029c4e:	6061      	str	r1, [r4, #4]
 8029c50:	60a2      	str	r2, [r4, #8]
 8029c52:	dd51      	ble.n	8029cf8 <localtime_r+0x14c>
 8029c54:	3101      	adds	r1, #1
 8029c56:	6061      	str	r1, [r4, #4]
 8029c58:	3b3c      	subs	r3, #60	@ 0x3c
 8029c5a:	6023      	str	r3, [r4, #0]
 8029c5c:	6863      	ldr	r3, [r4, #4]
 8029c5e:	2b3b      	cmp	r3, #59	@ 0x3b
 8029c60:	dd50      	ble.n	8029d04 <localtime_r+0x158>
 8029c62:	3201      	adds	r2, #1
 8029c64:	60a2      	str	r2, [r4, #8]
 8029c66:	3b3c      	subs	r3, #60	@ 0x3c
 8029c68:	6063      	str	r3, [r4, #4]
 8029c6a:	68a3      	ldr	r3, [r4, #8]
 8029c6c:	2b17      	cmp	r3, #23
 8029c6e:	dd4f      	ble.n	8029d10 <localtime_r+0x164>
 8029c70:	69e2      	ldr	r2, [r4, #28]
 8029c72:	3201      	adds	r2, #1
 8029c74:	61e2      	str	r2, [r4, #28]
 8029c76:	69a2      	ldr	r2, [r4, #24]
 8029c78:	3201      	adds	r2, #1
 8029c7a:	2a07      	cmp	r2, #7
 8029c7c:	bfa8      	it	ge
 8029c7e:	2200      	movge	r2, #0
 8029c80:	61a2      	str	r2, [r4, #24]
 8029c82:	68e2      	ldr	r2, [r4, #12]
 8029c84:	3b18      	subs	r3, #24
 8029c86:	3201      	adds	r2, #1
 8029c88:	60a3      	str	r3, [r4, #8]
 8029c8a:	6923      	ldr	r3, [r4, #16]
 8029c8c:	60e2      	str	r2, [r4, #12]
 8029c8e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8029c92:	428a      	cmp	r2, r1
 8029c94:	dd0e      	ble.n	8029cb4 <localtime_r+0x108>
 8029c96:	2b0b      	cmp	r3, #11
 8029c98:	eba2 0201 	sub.w	r2, r2, r1
 8029c9c:	60e2      	str	r2, [r4, #12]
 8029c9e:	f103 0201 	add.w	r2, r3, #1
 8029ca2:	bf09      	itett	eq
 8029ca4:	6963      	ldreq	r3, [r4, #20]
 8029ca6:	6122      	strne	r2, [r4, #16]
 8029ca8:	2200      	moveq	r2, #0
 8029caa:	3301      	addeq	r3, #1
 8029cac:	bf02      	ittt	eq
 8029cae:	6122      	streq	r2, [r4, #16]
 8029cb0:	6163      	streq	r3, [r4, #20]
 8029cb2:	61e2      	streq	r2, [r4, #28]
 8029cb4:	f000 fe3e 	bl	802a934 <__tz_unlock>
 8029cb8:	4620      	mov	r0, r4
 8029cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029cbe:	2301      	movs	r3, #1
 8029cc0:	e795      	b.n	8029bee <localtime_r+0x42>
 8029cc2:	4638      	mov	r0, r7
 8029cc4:	f000 fd86 	bl	802a7d4 <__tzcalc_limits>
 8029cc8:	2800      	cmp	r0, #0
 8029cca:	d19f      	bne.n	8029c0c <localtime_r+0x60>
 8029ccc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029cd0:	e004      	b.n	8029cdc <localtime_r+0x130>
 8029cd2:	4282      	cmp	r2, r0
 8029cd4:	eb73 0101 	sbcs.w	r1, r3, r1
 8029cd8:	da02      	bge.n	8029ce0 <localtime_r+0x134>
 8029cda:	2300      	movs	r3, #0
 8029cdc:	6223      	str	r3, [r4, #32]
 8029cde:	e009      	b.n	8029cf4 <localtime_r+0x148>
 8029ce0:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 8029ce4:	4282      	cmp	r2, r0
 8029ce6:	418b      	sbcs	r3, r1
 8029ce8:	bfb4      	ite	lt
 8029cea:	2301      	movlt	r3, #1
 8029cec:	2300      	movge	r3, #0
 8029cee:	6223      	str	r3, [r4, #32]
 8029cf0:	2b00      	cmp	r3, #0
 8029cf2:	d198      	bne.n	8029c26 <localtime_r+0x7a>
 8029cf4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8029cf6:	e797      	b.n	8029c28 <localtime_r+0x7c>
 8029cf8:	2b00      	cmp	r3, #0
 8029cfa:	daaf      	bge.n	8029c5c <localtime_r+0xb0>
 8029cfc:	3901      	subs	r1, #1
 8029cfe:	6061      	str	r1, [r4, #4]
 8029d00:	333c      	adds	r3, #60	@ 0x3c
 8029d02:	e7aa      	b.n	8029c5a <localtime_r+0xae>
 8029d04:	2b00      	cmp	r3, #0
 8029d06:	dab0      	bge.n	8029c6a <localtime_r+0xbe>
 8029d08:	3a01      	subs	r2, #1
 8029d0a:	60a2      	str	r2, [r4, #8]
 8029d0c:	333c      	adds	r3, #60	@ 0x3c
 8029d0e:	e7ab      	b.n	8029c68 <localtime_r+0xbc>
 8029d10:	2b00      	cmp	r3, #0
 8029d12:	dacf      	bge.n	8029cb4 <localtime_r+0x108>
 8029d14:	69e2      	ldr	r2, [r4, #28]
 8029d16:	3a01      	subs	r2, #1
 8029d18:	61e2      	str	r2, [r4, #28]
 8029d1a:	69a2      	ldr	r2, [r4, #24]
 8029d1c:	3a01      	subs	r2, #1
 8029d1e:	bf48      	it	mi
 8029d20:	2206      	movmi	r2, #6
 8029d22:	61a2      	str	r2, [r4, #24]
 8029d24:	68e2      	ldr	r2, [r4, #12]
 8029d26:	3318      	adds	r3, #24
 8029d28:	3a01      	subs	r2, #1
 8029d2a:	60e2      	str	r2, [r4, #12]
 8029d2c:	60a3      	str	r3, [r4, #8]
 8029d2e:	2a00      	cmp	r2, #0
 8029d30:	d1c0      	bne.n	8029cb4 <localtime_r+0x108>
 8029d32:	6923      	ldr	r3, [r4, #16]
 8029d34:	3b01      	subs	r3, #1
 8029d36:	d405      	bmi.n	8029d44 <localtime_r+0x198>
 8029d38:	6123      	str	r3, [r4, #16]
 8029d3a:	6923      	ldr	r3, [r4, #16]
 8029d3c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8029d40:	60e3      	str	r3, [r4, #12]
 8029d42:	e7b7      	b.n	8029cb4 <localtime_r+0x108>
 8029d44:	230b      	movs	r3, #11
 8029d46:	6123      	str	r3, [r4, #16]
 8029d48:	6963      	ldr	r3, [r4, #20]
 8029d4a:	1e5a      	subs	r2, r3, #1
 8029d4c:	6162      	str	r2, [r4, #20]
 8029d4e:	0792      	lsls	r2, r2, #30
 8029d50:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8029d54:	d105      	bne.n	8029d62 <localtime_r+0x1b6>
 8029d56:	2164      	movs	r1, #100	@ 0x64
 8029d58:	fb93 f2f1 	sdiv	r2, r3, r1
 8029d5c:	fb01 3212 	mls	r2, r1, r2, r3
 8029d60:	b962      	cbnz	r2, 8029d7c <localtime_r+0x1d0>
 8029d62:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8029d66:	fb93 f1f2 	sdiv	r1, r3, r2
 8029d6a:	fb02 3311 	mls	r3, r2, r1, r3
 8029d6e:	fab3 f383 	clz	r3, r3
 8029d72:	095b      	lsrs	r3, r3, #5
 8029d74:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8029d78:	61e3      	str	r3, [r4, #28]
 8029d7a:	e7de      	b.n	8029d3a <localtime_r+0x18e>
 8029d7c:	2301      	movs	r3, #1
 8029d7e:	e7f9      	b.n	8029d74 <localtime_r+0x1c8>
 8029d80:	08038130 	.word	0x08038130
 8029d84:	20018180 	.word	0x20018180

08029d88 <iso_year_adjust>:
 8029d88:	6942      	ldr	r2, [r0, #20]
 8029d8a:	2a00      	cmp	r2, #0
 8029d8c:	f240 736c 	movw	r3, #1900	@ 0x76c
 8029d90:	bfa8      	it	ge
 8029d92:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 8029d96:	4413      	add	r3, r2
 8029d98:	0792      	lsls	r2, r2, #30
 8029d9a:	d105      	bne.n	8029da8 <iso_year_adjust+0x20>
 8029d9c:	2164      	movs	r1, #100	@ 0x64
 8029d9e:	fb93 f2f1 	sdiv	r2, r3, r1
 8029da2:	fb01 3212 	mls	r2, r1, r2, r3
 8029da6:	b9ca      	cbnz	r2, 8029ddc <iso_year_adjust+0x54>
 8029da8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8029dac:	fb93 f1f2 	sdiv	r1, r3, r2
 8029db0:	fb02 3311 	mls	r3, r2, r1, r3
 8029db4:	fab3 f383 	clz	r3, r3
 8029db8:	095b      	lsrs	r3, r3, #5
 8029dba:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8029dbe:	0040      	lsls	r0, r0, #1
 8029dc0:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8029dc4:	4418      	add	r0, r3
 8029dc6:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 8029dca:	4298      	cmp	r0, r3
 8029dcc:	d027      	beq.n	8029e1e <iso_year_adjust+0x96>
 8029dce:	dc11      	bgt.n	8029df4 <iso_year_adjust+0x6c>
 8029dd0:	2801      	cmp	r0, #1
 8029dd2:	dc0a      	bgt.n	8029dea <iso_year_adjust+0x62>
 8029dd4:	43c0      	mvns	r0, r0
 8029dd6:	0fc0      	lsrs	r0, r0, #31
 8029dd8:	4240      	negs	r0, r0
 8029dda:	4770      	bx	lr
 8029ddc:	2301      	movs	r3, #1
 8029dde:	e7ec      	b.n	8029dba <iso_year_adjust+0x32>
 8029de0:	4b10      	ldr	r3, [pc, #64]	@ (8029e24 <iso_year_adjust+0x9c>)
 8029de2:	40c3      	lsrs	r3, r0
 8029de4:	f343 0000 	sbfx	r0, r3, #0, #1
 8029de8:	4770      	bx	lr
 8029dea:	380a      	subs	r0, #10
 8029dec:	2817      	cmp	r0, #23
 8029dee:	d9f7      	bls.n	8029de0 <iso_year_adjust+0x58>
 8029df0:	2000      	movs	r0, #0
 8029df2:	4770      	bx	lr
 8029df4:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 8029df8:	4298      	cmp	r0, r3
 8029dfa:	dc06      	bgt.n	8029e0a <iso_year_adjust+0x82>
 8029dfc:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 8029e00:	4298      	cmp	r0, r3
 8029e02:	bfd4      	ite	le
 8029e04:	2000      	movle	r0, #0
 8029e06:	2001      	movgt	r0, #1
 8029e08:	4770      	bx	lr
 8029e0a:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 8029e0e:	3802      	subs	r0, #2
 8029e10:	2815      	cmp	r0, #21
 8029e12:	d8ed      	bhi.n	8029df0 <iso_year_adjust+0x68>
 8029e14:	4b04      	ldr	r3, [pc, #16]	@ (8029e28 <iso_year_adjust+0xa0>)
 8029e16:	40c3      	lsrs	r3, r0
 8029e18:	f003 0001 	and.w	r0, r3, #1
 8029e1c:	4770      	bx	lr
 8029e1e:	2001      	movs	r0, #1
 8029e20:	4770      	bx	lr
 8029e22:	bf00      	nop
 8029e24:	00cc00cf 	.word	0x00cc00cf
 8029e28:	002a001f 	.word	0x002a001f

08029e2c <__strftime.isra.0>:
 8029e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029e30:	b08f      	sub	sp, #60	@ 0x3c
 8029e32:	461e      	mov	r6, r3
 8029e34:	2300      	movs	r3, #0
 8029e36:	4607      	mov	r7, r0
 8029e38:	460d      	mov	r5, r1
 8029e3a:	9302      	str	r3, [sp, #8]
 8029e3c:	461c      	mov	r4, r3
 8029e3e:	7813      	ldrb	r3, [r2, #0]
 8029e40:	2b00      	cmp	r3, #0
 8029e42:	f000 84ae 	beq.w	802a7a2 <__strftime.isra.0+0x976>
 8029e46:	2b25      	cmp	r3, #37	@ 0x25
 8029e48:	d11f      	bne.n	8029e8a <__strftime.isra.0+0x5e>
 8029e4a:	f892 9001 	ldrb.w	r9, [r2, #1]
 8029e4e:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 8029e52:	d024      	beq.n	8029e9e <__strftime.isra.0+0x72>
 8029e54:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 8029e58:	d021      	beq.n	8029e9e <__strftime.isra.0+0x72>
 8029e5a:	f102 0801 	add.w	r8, r2, #1
 8029e5e:	f04f 0900 	mov.w	r9, #0
 8029e62:	f898 2000 	ldrb.w	r2, [r8]
 8029e66:	3a31      	subs	r2, #49	@ 0x31
 8029e68:	2a08      	cmp	r2, #8
 8029e6a:	d81b      	bhi.n	8029ea4 <__strftime.isra.0+0x78>
 8029e6c:	220a      	movs	r2, #10
 8029e6e:	4640      	mov	r0, r8
 8029e70:	a906      	add	r1, sp, #24
 8029e72:	f008 f88b 	bl	8031f8c <strtoul>
 8029e76:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8029e7a:	4602      	mov	r2, r0
 8029e7c:	f898 1000 	ldrb.w	r1, [r8]
 8029e80:	2945      	cmp	r1, #69	@ 0x45
 8029e82:	d111      	bne.n	8029ea8 <__strftime.isra.0+0x7c>
 8029e84:	f108 0801 	add.w	r8, r8, #1
 8029e88:	e010      	b.n	8029eac <__strftime.isra.0+0x80>
 8029e8a:	1e69      	subs	r1, r5, #1
 8029e8c:	42a1      	cmp	r1, r4
 8029e8e:	f240 815d 	bls.w	802a14c <__strftime.isra.0+0x320>
 8029e92:	553b      	strb	r3, [r7, r4]
 8029e94:	3201      	adds	r2, #1
 8029e96:	f104 0a01 	add.w	sl, r4, #1
 8029e9a:	4654      	mov	r4, sl
 8029e9c:	e7cf      	b.n	8029e3e <__strftime.isra.0+0x12>
 8029e9e:	f102 0802 	add.w	r8, r2, #2
 8029ea2:	e7de      	b.n	8029e62 <__strftime.isra.0+0x36>
 8029ea4:	2200      	movs	r2, #0
 8029ea6:	e7e9      	b.n	8029e7c <__strftime.isra.0+0x50>
 8029ea8:	294f      	cmp	r1, #79	@ 0x4f
 8029eaa:	d0eb      	beq.n	8029e84 <__strftime.isra.0+0x58>
 8029eac:	f898 0000 	ldrb.w	r0, [r8]
 8029eb0:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 8029eb4:	2955      	cmp	r1, #85	@ 0x55
 8029eb6:	f200 8149 	bhi.w	802a14c <__strftime.isra.0+0x320>
 8029eba:	e8df f011 	tbh	[pc, r1, lsl #1]
 8029ebe:	046a      	.short	0x046a
 8029ec0:	01470147 	.word	0x01470147
 8029ec4:	01470147 	.word	0x01470147
 8029ec8:	01470147 	.word	0x01470147
 8029ecc:	01470147 	.word	0x01470147
 8029ed0:	01470147 	.word	0x01470147
 8029ed4:	01470147 	.word	0x01470147
 8029ed8:	01470147 	.word	0x01470147
 8029edc:	01470147 	.word	0x01470147
 8029ee0:	01470147 	.word	0x01470147
 8029ee4:	01470147 	.word	0x01470147
 8029ee8:	01470147 	.word	0x01470147
 8029eec:	01470147 	.word	0x01470147
 8029ef0:	01470147 	.word	0x01470147
 8029ef4:	00750147 	.word	0x00750147
 8029ef8:	00dc00a3 	.word	0x00dc00a3
 8029efc:	01470128 	.word	0x01470128
 8029f00:	01cb0159 	.word	0x01cb0159
 8029f04:	02590252 	.word	0x02590252
 8029f08:	01470147 	.word	0x01470147
 8029f0c:	02710147 	.word	0x02710147
 8029f10:	01470147 	.word	0x01470147
 8029f14:	0147027c 	.word	0x0147027c
 8029f18:	033402ac 	.word	0x033402ac
 8029f1c:	036a033e 	.word	0x036a033e
 8029f20:	03d80372 	.word	0x03d80372
 8029f24:	03ee00d8 	.word	0x03ee00d8
 8029f28:	01470440 	.word	0x01470440
 8029f2c:	01470147 	.word	0x01470147
 8029f30:	01470147 	.word	0x01470147
 8029f34:	00560147 	.word	0x00560147
 8029f38:	00ba008d 	.word	0x00ba008d
 8029f3c:	011d011d 	.word	0x011d011d
 8029f40:	017e0147 	.word	0x017e0147
 8029f44:	0147008d 	.word	0x0147008d
 8029f48:	0252026a 	.word	0x0252026a
 8029f4c:	026e0259 	.word	0x026e0259
 8029f50:	01470273 	.word	0x01470273
 8029f54:	02a5027c 	.word	0x02a5027c
 8029f58:	02b500d0 	.word	0x02b500d0
 8029f5c:	035d0336 	.word	0x035d0336
 8029f60:	03cf03a4 	.word	0x03cf03a4
 8029f64:	03e000d4 	.word	0x03e000d4
 8029f68:	0403      	.short	0x0403
 8029f6a:	69b3      	ldr	r3, [r6, #24]
 8029f6c:	4aad      	ldr	r2, [pc, #692]	@ (802a224 <__strftime.isra.0+0x3f8>)
 8029f6e:	3318      	adds	r3, #24
 8029f70:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8029f74:	4658      	mov	r0, fp
 8029f76:	f7e6 f993 	bl	80102a0 <strlen>
 8029f7a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8029f7e:	eb04 0a00 	add.w	sl, r4, r0
 8029f82:	1e6b      	subs	r3, r5, #1
 8029f84:	45a2      	cmp	sl, r4
 8029f86:	d107      	bne.n	8029f98 <__strftime.isra.0+0x16c>
 8029f88:	f898 3000 	ldrb.w	r3, [r8]
 8029f8c:	2b00      	cmp	r3, #0
 8029f8e:	f000 8409 	beq.w	802a7a4 <__strftime.isra.0+0x978>
 8029f92:	f108 0201 	add.w	r2, r8, #1
 8029f96:	e780      	b.n	8029e9a <__strftime.isra.0+0x6e>
 8029f98:	42a3      	cmp	r3, r4
 8029f9a:	f240 80d7 	bls.w	802a14c <__strftime.isra.0+0x320>
 8029f9e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 8029fa2:	553a      	strb	r2, [r7, r4]
 8029fa4:	3401      	adds	r4, #1
 8029fa6:	e7ed      	b.n	8029f84 <__strftime.isra.0+0x158>
 8029fa8:	69b2      	ldr	r2, [r6, #24]
 8029faa:	4b9e      	ldr	r3, [pc, #632]	@ (802a224 <__strftime.isra.0+0x3f8>)
 8029fac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8029fb0:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 8029fb4:	4658      	mov	r0, fp
 8029fb6:	f7e6 f973 	bl	80102a0 <strlen>
 8029fba:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8029fbe:	eb04 0a00 	add.w	sl, r4, r0
 8029fc2:	1e6b      	subs	r3, r5, #1
 8029fc4:	4554      	cmp	r4, sl
 8029fc6:	d0df      	beq.n	8029f88 <__strftime.isra.0+0x15c>
 8029fc8:	42a3      	cmp	r3, r4
 8029fca:	f240 80bf 	bls.w	802a14c <__strftime.isra.0+0x320>
 8029fce:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 8029fd2:	553a      	strb	r2, [r7, r4]
 8029fd4:	3401      	adds	r4, #1
 8029fd6:	e7f5      	b.n	8029fc4 <__strftime.isra.0+0x198>
 8029fd8:	4b92      	ldr	r3, [pc, #584]	@ (802a224 <__strftime.isra.0+0x3f8>)
 8029fda:	6932      	ldr	r2, [r6, #16]
 8029fdc:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8029fe0:	4658      	mov	r0, fp
 8029fe2:	f7e6 f95d 	bl	80102a0 <strlen>
 8029fe6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8029fea:	eb04 0a00 	add.w	sl, r4, r0
 8029fee:	1e6b      	subs	r3, r5, #1
 8029ff0:	45a2      	cmp	sl, r4
 8029ff2:	d0c9      	beq.n	8029f88 <__strftime.isra.0+0x15c>
 8029ff4:	42a3      	cmp	r3, r4
 8029ff6:	f240 80a9 	bls.w	802a14c <__strftime.isra.0+0x320>
 8029ffa:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 8029ffe:	553a      	strb	r2, [r7, r4]
 802a000:	3401      	adds	r4, #1
 802a002:	e7f5      	b.n	8029ff0 <__strftime.isra.0+0x1c4>
 802a004:	6933      	ldr	r3, [r6, #16]
 802a006:	4a87      	ldr	r2, [pc, #540]	@ (802a224 <__strftime.isra.0+0x3f8>)
 802a008:	330c      	adds	r3, #12
 802a00a:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802a00e:	4658      	mov	r0, fp
 802a010:	f7e6 f946 	bl	80102a0 <strlen>
 802a014:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802a018:	eb04 0a00 	add.w	sl, r4, r0
 802a01c:	1e6b      	subs	r3, r5, #1
 802a01e:	45a2      	cmp	sl, r4
 802a020:	d0b2      	beq.n	8029f88 <__strftime.isra.0+0x15c>
 802a022:	42a3      	cmp	r3, r4
 802a024:	f240 8092 	bls.w	802a14c <__strftime.isra.0+0x320>
 802a028:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802a02c:	553a      	strb	r2, [r7, r4]
 802a02e:	3401      	adds	r4, #1
 802a030:	e7f5      	b.n	802a01e <__strftime.isra.0+0x1f2>
 802a032:	4b7c      	ldr	r3, [pc, #496]	@ (802a224 <__strftime.isra.0+0x3f8>)
 802a034:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 802a038:	4650      	mov	r0, sl
 802a03a:	f7e6 f931 	bl	80102a0 <strlen>
 802a03e:	f89a 3000 	ldrb.w	r3, [sl]
 802a042:	2b00      	cmp	r3, #0
 802a044:	f000 8341 	beq.w	802a6ca <__strftime.isra.0+0x89e>
 802a048:	4633      	mov	r3, r6
 802a04a:	4652      	mov	r2, sl
 802a04c:	1b29      	subs	r1, r5, r4
 802a04e:	1938      	adds	r0, r7, r4
 802a050:	f7ff feec 	bl	8029e2c <__strftime.isra.0>
 802a054:	2800      	cmp	r0, #0
 802a056:	dd79      	ble.n	802a14c <__strftime.isra.0+0x320>
 802a058:	eb04 0a00 	add.w	sl, r4, r0
 802a05c:	e794      	b.n	8029f88 <__strftime.isra.0+0x15c>
 802a05e:	4b71      	ldr	r3, [pc, #452]	@ (802a224 <__strftime.isra.0+0x3f8>)
 802a060:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 802a064:	e7e8      	b.n	802a038 <__strftime.isra.0+0x20c>
 802a066:	4b6f      	ldr	r3, [pc, #444]	@ (802a224 <__strftime.isra.0+0x3f8>)
 802a068:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 802a06c:	e7e4      	b.n	802a038 <__strftime.isra.0+0x20c>
 802a06e:	4b6d      	ldr	r3, [pc, #436]	@ (802a224 <__strftime.isra.0+0x3f8>)
 802a070:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 802a074:	e7e0      	b.n	802a038 <__strftime.isra.0+0x20c>
 802a076:	f8d6 a014 	ldr.w	sl, [r6, #20]
 802a07a:	496b      	ldr	r1, [pc, #428]	@ (802a228 <__strftime.isra.0+0x3fc>)
 802a07c:	458a      	cmp	sl, r1
 802a07e:	bfac      	ite	ge
 802a080:	f04f 0b00 	movge.w	fp, #0
 802a084:	f04f 0b01 	movlt.w	fp, #1
 802a088:	f1ba 0f00 	cmp.w	sl, #0
 802a08c:	db12      	blt.n	802a0b4 <__strftime.isra.0+0x288>
 802a08e:	2064      	movs	r0, #100	@ 0x64
 802a090:	fb9a f0f0 	sdiv	r0, sl, r0
 802a094:	3013      	adds	r0, #19
 802a096:	f1b9 0f00 	cmp.w	r9, #0
 802a09a:	d015      	beq.n	802a0c8 <__strftime.isra.0+0x29c>
 802a09c:	2863      	cmp	r0, #99	@ 0x63
 802a09e:	dd28      	ble.n	802a0f2 <__strftime.isra.0+0x2c6>
 802a0a0:	4b62      	ldr	r3, [pc, #392]	@ (802a22c <__strftime.isra.0+0x400>)
 802a0a2:	4963      	ldr	r1, [pc, #396]	@ (802a230 <__strftime.isra.0+0x404>)
 802a0a4:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802a0a8:	bf0c      	ite	eq
 802a0aa:	469c      	moveq	ip, r3
 802a0ac:	468c      	movne	ip, r1
 802a0ae:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 802a24c <__strftime.isra.0+0x420>
 802a0b2:	e00d      	b.n	802a0d0 <__strftime.isra.0+0x2a4>
 802a0b4:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 802a0b8:	9203      	str	r2, [sp, #12]
 802a0ba:	f000 ff88 	bl	802afce <abs>
 802a0be:	2164      	movs	r1, #100	@ 0x64
 802a0c0:	9a03      	ldr	r2, [sp, #12]
 802a0c2:	fb90 f0f1 	sdiv	r0, r0, r1
 802a0c6:	e7e6      	b.n	802a096 <__strftime.isra.0+0x26a>
 802a0c8:	f8df c164 	ldr.w	ip, [pc, #356]	@ 802a230 <__strftime.isra.0+0x404>
 802a0cc:	f8df e180 	ldr.w	lr, [pc, #384]	@ 802a250 <__strftime.isra.0+0x424>
 802a0d0:	4b58      	ldr	r3, [pc, #352]	@ (802a234 <__strftime.isra.0+0x408>)
 802a0d2:	9001      	str	r0, [sp, #4]
 802a0d4:	2a02      	cmp	r2, #2
 802a0d6:	bf2c      	ite	cs
 802a0d8:	ebcb 0102 	rsbcs	r1, fp, r2
 802a0dc:	f1cb 0102 	rsbcc	r1, fp, #2
 802a0e0:	4a51      	ldr	r2, [pc, #324]	@ (802a228 <__strftime.isra.0+0x3fc>)
 802a0e2:	9100      	str	r1, [sp, #0]
 802a0e4:	4592      	cmp	sl, r2
 802a0e6:	bfa8      	it	ge
 802a0e8:	4663      	movge	r3, ip
 802a0ea:	4672      	mov	r2, lr
 802a0ec:	1b29      	subs	r1, r5, r4
 802a0ee:	1938      	adds	r0, r7, r4
 802a0f0:	e023      	b.n	802a13a <__strftime.isra.0+0x30e>
 802a0f2:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 802a230 <__strftime.isra.0+0x404>
 802a0f6:	e7da      	b.n	802a0ae <__strftime.isra.0+0x282>
 802a0f8:	494f      	ldr	r1, [pc, #316]	@ (802a238 <__strftime.isra.0+0x40c>)
 802a0fa:	4a50      	ldr	r2, [pc, #320]	@ (802a23c <__strftime.isra.0+0x410>)
 802a0fc:	68f3      	ldr	r3, [r6, #12]
 802a0fe:	2864      	cmp	r0, #100	@ 0x64
 802a100:	bf18      	it	ne
 802a102:	460a      	movne	r2, r1
 802a104:	1b29      	subs	r1, r5, r4
 802a106:	1938      	adds	r0, r7, r4
 802a108:	f002 f986 	bl	802c418 <sniprintf>
 802a10c:	e017      	b.n	802a13e <__strftime.isra.0+0x312>
 802a10e:	6970      	ldr	r0, [r6, #20]
 802a110:	6933      	ldr	r3, [r6, #16]
 802a112:	2800      	cmp	r0, #0
 802a114:	f103 0a01 	add.w	sl, r3, #1
 802a118:	eb07 0b04 	add.w	fp, r7, r4
 802a11c:	68f3      	ldr	r3, [r6, #12]
 802a11e:	eba5 0904 	sub.w	r9, r5, r4
 802a122:	db19      	blt.n	802a158 <__strftime.isra.0+0x32c>
 802a124:	2264      	movs	r2, #100	@ 0x64
 802a126:	fb90 fcf2 	sdiv	ip, r0, r2
 802a12a:	fb02 001c 	mls	r0, r2, ip, r0
 802a12e:	4a44      	ldr	r2, [pc, #272]	@ (802a240 <__strftime.isra.0+0x414>)
 802a130:	e9cd 3000 	strd	r3, r0, [sp]
 802a134:	4649      	mov	r1, r9
 802a136:	4653      	mov	r3, sl
 802a138:	4658      	mov	r0, fp
 802a13a:	f002 f96d 	bl	802c418 <sniprintf>
 802a13e:	2800      	cmp	r0, #0
 802a140:	db04      	blt.n	802a14c <__strftime.isra.0+0x320>
 802a142:	eb00 0a04 	add.w	sl, r0, r4
 802a146:	4555      	cmp	r5, sl
 802a148:	f63f af1e 	bhi.w	8029f88 <__strftime.isra.0+0x15c>
 802a14c:	f04f 0a00 	mov.w	sl, #0
 802a150:	4650      	mov	r0, sl
 802a152:	b00f      	add	sp, #60	@ 0x3c
 802a154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a158:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802a15c:	9303      	str	r3, [sp, #12]
 802a15e:	f000 ff36 	bl	802afce <abs>
 802a162:	2264      	movs	r2, #100	@ 0x64
 802a164:	9b03      	ldr	r3, [sp, #12]
 802a166:	fb90 fcf2 	sdiv	ip, r0, r2
 802a16a:	fb0c 0012 	mls	r0, ip, r2, r0
 802a16e:	e7de      	b.n	802a12e <__strftime.isra.0+0x302>
 802a170:	2125      	movs	r1, #37	@ 0x25
 802a172:	f88d 1018 	strb.w	r1, [sp, #24]
 802a176:	f1b9 0f00 	cmp.w	r9, #0
 802a17a:	d00b      	beq.n	802a194 <__strftime.isra.0+0x368>
 802a17c:	2a05      	cmp	r2, #5
 802a17e:	f88d 9019 	strb.w	r9, [sp, #25]
 802a182:	d817      	bhi.n	802a1b4 <__strftime.isra.0+0x388>
 802a184:	f10d 001a 	add.w	r0, sp, #26
 802a188:	492e      	ldr	r1, [pc, #184]	@ (802a244 <__strftime.isra.0+0x418>)
 802a18a:	f000 fe83 	bl	802ae94 <strcpy>
 802a18e:	4633      	mov	r3, r6
 802a190:	aa06      	add	r2, sp, #24
 802a192:	e75b      	b.n	802a04c <__strftime.isra.0+0x220>
 802a194:	232b      	movs	r3, #43	@ 0x2b
 802a196:	f88d 3019 	strb.w	r3, [sp, #25]
 802a19a:	2304      	movs	r3, #4
 802a19c:	4a2a      	ldr	r2, [pc, #168]	@ (802a248 <__strftime.isra.0+0x41c>)
 802a19e:	211e      	movs	r1, #30
 802a1a0:	f10d 001a 	add.w	r0, sp, #26
 802a1a4:	f002 f938 	bl	802c418 <sniprintf>
 802a1a8:	2800      	cmp	r0, #0
 802a1aa:	ddeb      	ble.n	802a184 <__strftime.isra.0+0x358>
 802a1ac:	f10d 031a 	add.w	r3, sp, #26
 802a1b0:	4418      	add	r0, r3
 802a1b2:	e7e9      	b.n	802a188 <__strftime.isra.0+0x35c>
 802a1b4:	1f93      	subs	r3, r2, #6
 802a1b6:	d0e5      	beq.n	802a184 <__strftime.isra.0+0x358>
 802a1b8:	e7f0      	b.n	802a19c <__strftime.isra.0+0x370>
 802a1ba:	4630      	mov	r0, r6
 802a1bc:	f7ff fde4 	bl	8029d88 <iso_year_adjust>
 802a1c0:	4682      	mov	sl, r0
 802a1c2:	6970      	ldr	r0, [r6, #20]
 802a1c4:	2800      	cmp	r0, #0
 802a1c6:	db11      	blt.n	802a1ec <__strftime.isra.0+0x3c0>
 802a1c8:	2364      	movs	r3, #100	@ 0x64
 802a1ca:	fb90 f2f3 	sdiv	r2, r0, r3
 802a1ce:	fb03 0012 	mls	r0, r3, r2, r0
 802a1d2:	2364      	movs	r3, #100	@ 0x64
 802a1d4:	4482      	add	sl, r0
 802a1d6:	fb9a f2f3 	sdiv	r2, sl, r3
 802a1da:	fb03 aa12 	mls	sl, r3, r2, sl
 802a1de:	449a      	add	sl, r3
 802a1e0:	fbba f2f3 	udiv	r2, sl, r3
 802a1e4:	fb03 a312 	mls	r3, r3, r2, sl
 802a1e8:	4a14      	ldr	r2, [pc, #80]	@ (802a23c <__strftime.isra.0+0x410>)
 802a1ea:	e78b      	b.n	802a104 <__strftime.isra.0+0x2d8>
 802a1ec:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802a1f0:	f000 feed 	bl	802afce <abs>
 802a1f4:	2364      	movs	r3, #100	@ 0x64
 802a1f6:	f1ba 0f00 	cmp.w	sl, #0
 802a1fa:	fb90 f2f3 	sdiv	r2, r0, r3
 802a1fe:	fb02 0013 	mls	r0, r2, r3, r0
 802a202:	da07      	bge.n	802a214 <__strftime.isra.0+0x3e8>
 802a204:	6972      	ldr	r2, [r6, #20]
 802a206:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 802a20a:	429a      	cmp	r2, r3
 802a20c:	bfb8      	it	lt
 802a20e:	f04f 0a01 	movlt.w	sl, #1
 802a212:	e7de      	b.n	802a1d2 <__strftime.isra.0+0x3a6>
 802a214:	d0dd      	beq.n	802a1d2 <__strftime.isra.0+0x3a6>
 802a216:	6972      	ldr	r2, [r6, #20]
 802a218:	4b03      	ldr	r3, [pc, #12]	@ (802a228 <__strftime.isra.0+0x3fc>)
 802a21a:	429a      	cmp	r2, r3
 802a21c:	bfb8      	it	lt
 802a21e:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802a222:	e7d6      	b.n	802a1d2 <__strftime.isra.0+0x3a6>
 802a224:	0803837c 	.word	0x0803837c
 802a228:	fffff894 	.word	0xfffff894
 802a22c:	0803819f 	.word	0x0803819f
 802a230:	080380ba 	.word	0x080380ba
 802a234:	080381a1 	.word	0x080381a1
 802a238:	080381a3 	.word	0x080381a3
 802a23c:	080381b1 	.word	0x080381b1
 802a240:	080381a7 	.word	0x080381a7
 802a244:	080381ba 	.word	0x080381ba
 802a248:	080381b6 	.word	0x080381b6
 802a24c:	08038197 	.word	0x08038197
 802a250:	08038190 	.word	0x08038190
 802a254:	6971      	ldr	r1, [r6, #20]
 802a256:	48bc      	ldr	r0, [pc, #752]	@ (802a548 <__strftime.isra.0+0x71c>)
 802a258:	9205      	str	r2, [sp, #20]
 802a25a:	4281      	cmp	r1, r0
 802a25c:	bfac      	ite	ge
 802a25e:	2300      	movge	r3, #0
 802a260:	2301      	movlt	r3, #1
 802a262:	4630      	mov	r0, r6
 802a264:	e9cd 3103 	strd	r3, r1, [sp, #12]
 802a268:	f7ff fd8e 	bl	8029d88 <iso_year_adjust>
 802a26c:	9904      	ldr	r1, [sp, #16]
 802a26e:	9a05      	ldr	r2, [sp, #20]
 802a270:	2900      	cmp	r1, #0
 802a272:	4682      	mov	sl, r0
 802a274:	db3a      	blt.n	802a2ec <__strftime.isra.0+0x4c0>
 802a276:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802a27a:	fb91 fbfb 	sdiv	fp, r1, fp
 802a27e:	f10b 0b13 	add.w	fp, fp, #19
 802a282:	6970      	ldr	r0, [r6, #20]
 802a284:	2800      	cmp	r0, #0
 802a286:	db3e      	blt.n	802a306 <__strftime.isra.0+0x4da>
 802a288:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802a28c:	f1ba 0f00 	cmp.w	sl, #0
 802a290:	fb90 fefc 	sdiv	lr, r0, ip
 802a294:	fb0c 001e 	mls	r0, ip, lr, r0
 802a298:	da4f      	bge.n	802a33a <__strftime.isra.0+0x50e>
 802a29a:	4482      	add	sl, r0
 802a29c:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 802a2a0:	d157      	bne.n	802a352 <__strftime.isra.0+0x526>
 802a2a2:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802a2a6:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 802a2aa:	9b03      	ldr	r3, [sp, #12]
 802a2ac:	2164      	movs	r1, #100	@ 0x64
 802a2ae:	fb01 aa0b 	mla	sl, r1, fp, sl
 802a2b2:	2b00      	cmp	r3, #0
 802a2b4:	f040 81f7 	bne.w	802a6a6 <__strftime.isra.0+0x87a>
 802a2b8:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802a2bc:	d104      	bne.n	802a2c8 <__strftime.isra.0+0x49c>
 802a2be:	f242 710f 	movw	r1, #9999	@ 0x270f
 802a2c2:	458a      	cmp	sl, r1
 802a2c4:	f200 8275 	bhi.w	802a7b2 <__strftime.isra.0+0x986>
 802a2c8:	a906      	add	r1, sp, #24
 802a2ca:	2025      	movs	r0, #37	@ 0x25
 802a2cc:	7008      	strb	r0, [r1, #0]
 802a2ce:	f1b9 0f00 	cmp.w	r9, #0
 802a2d2:	f040 81f3 	bne.w	802a6bc <__strftime.isra.0+0x890>
 802a2d6:	1c48      	adds	r0, r1, #1
 802a2d8:	499c      	ldr	r1, [pc, #624]	@ (802a54c <__strftime.isra.0+0x720>)
 802a2da:	9203      	str	r2, [sp, #12]
 802a2dc:	f000 fdda 	bl	802ae94 <strcpy>
 802a2e0:	9a03      	ldr	r2, [sp, #12]
 802a2e2:	f8cd a000 	str.w	sl, [sp]
 802a2e6:	4613      	mov	r3, r2
 802a2e8:	aa06      	add	r2, sp, #24
 802a2ea:	e098      	b.n	802a41e <__strftime.isra.0+0x5f2>
 802a2ec:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 802a2f0:	9205      	str	r2, [sp, #20]
 802a2f2:	9104      	str	r1, [sp, #16]
 802a2f4:	f000 fe6b 	bl	802afce <abs>
 802a2f8:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802a2fc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 802a300:	fb90 fbfc 	sdiv	fp, r0, ip
 802a304:	e7bd      	b.n	802a282 <__strftime.isra.0+0x456>
 802a306:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802a30a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 802a30e:	f000 fe5e 	bl	802afce <abs>
 802a312:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802a316:	f1ba 0f00 	cmp.w	sl, #0
 802a31a:	fb90 fefc 	sdiv	lr, r0, ip
 802a31e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 802a322:	fb0e 001c 	mls	r0, lr, ip, r0
 802a326:	da08      	bge.n	802a33a <__strftime.isra.0+0x50e>
 802a328:	6971      	ldr	r1, [r6, #20]
 802a32a:	4b89      	ldr	r3, [pc, #548]	@ (802a550 <__strftime.isra.0+0x724>)
 802a32c:	4299      	cmp	r1, r3
 802a32e:	dab4      	bge.n	802a29a <__strftime.isra.0+0x46e>
 802a330:	f04f 0a01 	mov.w	sl, #1
 802a334:	f8cd a00c 	str.w	sl, [sp, #12]
 802a338:	e7af      	b.n	802a29a <__strftime.isra.0+0x46e>
 802a33a:	f1ba 0f00 	cmp.w	sl, #0
 802a33e:	d0ac      	beq.n	802a29a <__strftime.isra.0+0x46e>
 802a340:	4b81      	ldr	r3, [pc, #516]	@ (802a548 <__strftime.isra.0+0x71c>)
 802a342:	4299      	cmp	r1, r3
 802a344:	9b03      	ldr	r3, [sp, #12]
 802a346:	bfbc      	itt	lt
 802a348:	2301      	movlt	r3, #1
 802a34a:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802a34e:	9303      	str	r3, [sp, #12]
 802a350:	e7a3      	b.n	802a29a <__strftime.isra.0+0x46e>
 802a352:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 802a356:	bf04      	itt	eq
 802a358:	f10b 0b01 	addeq.w	fp, fp, #1
 802a35c:	f04f 0a00 	moveq.w	sl, #0
 802a360:	e7a3      	b.n	802a2aa <__strftime.isra.0+0x47e>
 802a362:	497c      	ldr	r1, [pc, #496]	@ (802a554 <__strftime.isra.0+0x728>)
 802a364:	4a7c      	ldr	r2, [pc, #496]	@ (802a558 <__strftime.isra.0+0x72c>)
 802a366:	68b3      	ldr	r3, [r6, #8]
 802a368:	286b      	cmp	r0, #107	@ 0x6b
 802a36a:	bf18      	it	ne
 802a36c:	460a      	movne	r2, r1
 802a36e:	e6c9      	b.n	802a104 <__strftime.isra.0+0x2d8>
 802a370:	68b3      	ldr	r3, [r6, #8]
 802a372:	b163      	cbz	r3, 802a38e <__strftime.isra.0+0x562>
 802a374:	2b0c      	cmp	r3, #12
 802a376:	d004      	beq.n	802a382 <__strftime.isra.0+0x556>
 802a378:	210c      	movs	r1, #12
 802a37a:	fb93 f2f1 	sdiv	r2, r3, r1
 802a37e:	fb01 3312 	mls	r3, r1, r2, r3
 802a382:	4975      	ldr	r1, [pc, #468]	@ (802a558 <__strftime.isra.0+0x72c>)
 802a384:	4a73      	ldr	r2, [pc, #460]	@ (802a554 <__strftime.isra.0+0x728>)
 802a386:	2849      	cmp	r0, #73	@ 0x49
 802a388:	bf18      	it	ne
 802a38a:	460a      	movne	r2, r1
 802a38c:	e6ba      	b.n	802a104 <__strftime.isra.0+0x2d8>
 802a38e:	230c      	movs	r3, #12
 802a390:	e7f7      	b.n	802a382 <__strftime.isra.0+0x556>
 802a392:	69f3      	ldr	r3, [r6, #28]
 802a394:	4a71      	ldr	r2, [pc, #452]	@ (802a55c <__strftime.isra.0+0x730>)
 802a396:	3301      	adds	r3, #1
 802a398:	e6b4      	b.n	802a104 <__strftime.isra.0+0x2d8>
 802a39a:	6933      	ldr	r3, [r6, #16]
 802a39c:	3301      	adds	r3, #1
 802a39e:	e723      	b.n	802a1e8 <__strftime.isra.0+0x3bc>
 802a3a0:	6873      	ldr	r3, [r6, #4]
 802a3a2:	e721      	b.n	802a1e8 <__strftime.isra.0+0x3bc>
 802a3a4:	1e6b      	subs	r3, r5, #1
 802a3a6:	429c      	cmp	r4, r3
 802a3a8:	f4bf aed0 	bcs.w	802a14c <__strftime.isra.0+0x320>
 802a3ac:	f104 0a01 	add.w	sl, r4, #1
 802a3b0:	230a      	movs	r3, #10
 802a3b2:	553b      	strb	r3, [r7, r4]
 802a3b4:	e5e8      	b.n	8029f88 <__strftime.isra.0+0x15c>
 802a3b6:	68b3      	ldr	r3, [r6, #8]
 802a3b8:	2b0b      	cmp	r3, #11
 802a3ba:	4b69      	ldr	r3, [pc, #420]	@ (802a560 <__strftime.isra.0+0x734>)
 802a3bc:	bfd4      	ite	le
 802a3be:	2200      	movle	r2, #0
 802a3c0:	2201      	movgt	r2, #1
 802a3c2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802a3c6:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 802a3ca:	4658      	mov	r0, fp
 802a3cc:	f7e5 ff68 	bl	80102a0 <strlen>
 802a3d0:	eb04 0a00 	add.w	sl, r4, r0
 802a3d4:	4863      	ldr	r0, [pc, #396]	@ (802a564 <__strftime.isra.0+0x738>)
 802a3d6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802a3da:	1e69      	subs	r1, r5, #1
 802a3dc:	45a2      	cmp	sl, r4
 802a3de:	f43f add3 	beq.w	8029f88 <__strftime.isra.0+0x15c>
 802a3e2:	42a1      	cmp	r1, r4
 802a3e4:	f67f aeb2 	bls.w	802a14c <__strftime.isra.0+0x320>
 802a3e8:	f898 2000 	ldrb.w	r2, [r8]
 802a3ec:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 802a3f0:	2a50      	cmp	r2, #80	@ 0x50
 802a3f2:	d106      	bne.n	802a402 <__strftime.isra.0+0x5d6>
 802a3f4:	5cc2      	ldrb	r2, [r0, r3]
 802a3f6:	f002 0203 	and.w	r2, r2, #3
 802a3fa:	2a01      	cmp	r2, #1
 802a3fc:	bf08      	it	eq
 802a3fe:	3320      	addeq	r3, #32
 802a400:	b2db      	uxtb	r3, r3
 802a402:	553b      	strb	r3, [r7, r4]
 802a404:	3401      	adds	r4, #1
 802a406:	e7e9      	b.n	802a3dc <__strftime.isra.0+0x5b0>
 802a408:	2203      	movs	r2, #3
 802a40a:	6933      	ldr	r3, [r6, #16]
 802a40c:	fb93 f3f2 	sdiv	r3, r3, r2
 802a410:	4a55      	ldr	r2, [pc, #340]	@ (802a568 <__strftime.isra.0+0x73c>)
 802a412:	3301      	adds	r3, #1
 802a414:	e676      	b.n	802a104 <__strftime.isra.0+0x2d8>
 802a416:	6873      	ldr	r3, [r6, #4]
 802a418:	9300      	str	r3, [sp, #0]
 802a41a:	68b3      	ldr	r3, [r6, #8]
 802a41c:	4a53      	ldr	r2, [pc, #332]	@ (802a56c <__strftime.isra.0+0x740>)
 802a41e:	1b29      	subs	r1, r5, r4
 802a420:	1938      	adds	r0, r7, r4
 802a422:	f001 fff9 	bl	802c418 <sniprintf>
 802a426:	e68a      	b.n	802a13e <__strftime.isra.0+0x312>
 802a428:	6a33      	ldr	r3, [r6, #32]
 802a42a:	2b00      	cmp	r3, #0
 802a42c:	db78      	blt.n	802a520 <__strftime.isra.0+0x6f4>
 802a42e:	f000 fa7b 	bl	802a928 <__tz_lock>
 802a432:	9b02      	ldr	r3, [sp, #8]
 802a434:	b90b      	cbnz	r3, 802a43a <__strftime.isra.0+0x60e>
 802a436:	f000 fa83 	bl	802a940 <_tzset_unlocked>
 802a43a:	f007 fe73 	bl	8032124 <__gettzinfo>
 802a43e:	6a33      	ldr	r3, [r6, #32]
 802a440:	2b00      	cmp	r3, #0
 802a442:	bfd4      	ite	le
 802a444:	2200      	movle	r2, #0
 802a446:	2201      	movgt	r2, #1
 802a448:	2328      	movs	r3, #40	@ 0x28
 802a44a:	fb02 3303 	mla	r3, r2, r3, r3
 802a44e:	58c3      	ldr	r3, [r0, r3]
 802a450:	f1c3 0a00 	rsb	sl, r3, #0
 802a454:	f000 fa6e 	bl	802a934 <__tz_unlock>
 802a458:	2301      	movs	r3, #1
 802a45a:	9302      	str	r3, [sp, #8]
 802a45c:	6972      	ldr	r2, [r6, #20]
 802a45e:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 802a462:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 802a466:	f16c 0c00 	sbc.w	ip, ip, #0
 802a46a:	f1bc 0f00 	cmp.w	ip, #0
 802a46e:	eba5 0104 	sub.w	r1, r5, r4
 802a472:	eb07 0004 	add.w	r0, r7, r4
 802a476:	da02      	bge.n	802a47e <__strftime.isra.0+0x652>
 802a478:	3303      	adds	r3, #3
 802a47a:	f14c 0c00 	adc.w	ip, ip, #0
 802a47e:	089b      	lsrs	r3, r3, #2
 802a480:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 802a484:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 802a488:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802a48c:	ea4f 0cac 	mov.w	ip, ip, asr #2
 802a490:	fb9e fefb 	sdiv	lr, lr, fp
 802a494:	ebb3 030e 	subs.w	r3, r3, lr
 802a498:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 802a49c:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 802a4a0:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 802a4a4:	fb9e fefb 	sdiv	lr, lr, fp
 802a4a8:	eb13 030e 	adds.w	r3, r3, lr
 802a4ac:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 802a4b0:	3a46      	subs	r2, #70	@ 0x46
 802a4b2:	f240 1e6d 	movw	lr, #365	@ 0x16d
 802a4b6:	fb0e f202 	mul.w	r2, lr, r2
 802a4ba:	189b      	adds	r3, r3, r2
 802a4bc:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802a4c0:	69f2      	ldr	r2, [r6, #28]
 802a4c2:	f8d6 b004 	ldr.w	fp, [r6, #4]
 802a4c6:	189b      	adds	r3, r3, r2
 802a4c8:	f04f 0e18 	mov.w	lr, #24
 802a4cc:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802a4d0:	fba3 230e 	umull	r2, r3, r3, lr
 802a4d4:	fb0e 330c 	mla	r3, lr, ip, r3
 802a4d8:	f8d6 c008 	ldr.w	ip, [r6, #8]
 802a4dc:	eb12 020c 	adds.w	r2, r2, ip
 802a4e0:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802a4e4:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 802a4e8:	fba2 2e0c 	umull	r2, lr, r2, ip
 802a4ec:	fb0c ee03 	mla	lr, ip, r3, lr
 802a4f0:	eb12 030b 	adds.w	r3, r2, fp
 802a4f4:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 802a4f8:	fba3 e30c 	umull	lr, r3, r3, ip
 802a4fc:	fb0c 3302 	mla	r3, ip, r2, r3
 802a500:	f8d6 c000 	ldr.w	ip, [r6]
 802a504:	eb1e 020c 	adds.w	r2, lr, ip
 802a508:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802a50c:	ebb2 020a 	subs.w	r2, r2, sl
 802a510:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 802a514:	e9cd 2300 	strd	r2, r3, [sp]
 802a518:	4a15      	ldr	r2, [pc, #84]	@ (802a570 <__strftime.isra.0+0x744>)
 802a51a:	f001 ff7d 	bl	802c418 <sniprintf>
 802a51e:	e60e      	b.n	802a13e <__strftime.isra.0+0x312>
 802a520:	f04f 0a00 	mov.w	sl, #0
 802a524:	e79a      	b.n	802a45c <__strftime.isra.0+0x630>
 802a526:	6833      	ldr	r3, [r6, #0]
 802a528:	e65e      	b.n	802a1e8 <__strftime.isra.0+0x3bc>
 802a52a:	1e6b      	subs	r3, r5, #1
 802a52c:	429c      	cmp	r4, r3
 802a52e:	f4bf ae0d 	bcs.w	802a14c <__strftime.isra.0+0x320>
 802a532:	f104 0a01 	add.w	sl, r4, #1
 802a536:	2309      	movs	r3, #9
 802a538:	e73b      	b.n	802a3b2 <__strftime.isra.0+0x586>
 802a53a:	6833      	ldr	r3, [r6, #0]
 802a53c:	9301      	str	r3, [sp, #4]
 802a53e:	6873      	ldr	r3, [r6, #4]
 802a540:	9300      	str	r3, [sp, #0]
 802a542:	68b3      	ldr	r3, [r6, #8]
 802a544:	4a0b      	ldr	r2, [pc, #44]	@ (802a574 <__strftime.isra.0+0x748>)
 802a546:	e5d1      	b.n	802a0ec <__strftime.isra.0+0x2c0>
 802a548:	fffff894 	.word	0xfffff894
 802a54c:	080381c2 	.word	0x080381c2
 802a550:	fffff895 	.word	0xfffff895
 802a554:	080381b1 	.word	0x080381b1
 802a558:	080381a3 	.word	0x080381a3
 802a55c:	080381c6 	.word	0x080381c6
 802a560:	0803837c 	.word	0x0803837c
 802a564:	08038479 	.word	0x08038479
 802a568:	080381cb 	.word	0x080381cb
 802a56c:	080381da 	.word	0x080381da
 802a570:	080381d0 	.word	0x080381d0
 802a574:	080381d5 	.word	0x080381d5
 802a578:	1e6b      	subs	r3, r5, #1
 802a57a:	429c      	cmp	r4, r3
 802a57c:	f4bf ade6 	bcs.w	802a14c <__strftime.isra.0+0x320>
 802a580:	69b3      	ldr	r3, [r6, #24]
 802a582:	b91b      	cbnz	r3, 802a58c <__strftime.isra.0+0x760>
 802a584:	2337      	movs	r3, #55	@ 0x37
 802a586:	f104 0a01 	add.w	sl, r4, #1
 802a58a:	e712      	b.n	802a3b2 <__strftime.isra.0+0x586>
 802a58c:	3330      	adds	r3, #48	@ 0x30
 802a58e:	b2db      	uxtb	r3, r3
 802a590:	e7f9      	b.n	802a586 <__strftime.isra.0+0x75a>
 802a592:	69f3      	ldr	r3, [r6, #28]
 802a594:	69b2      	ldr	r2, [r6, #24]
 802a596:	3307      	adds	r3, #7
 802a598:	1a9b      	subs	r3, r3, r2
 802a59a:	2207      	movs	r2, #7
 802a59c:	fb93 f3f2 	sdiv	r3, r3, r2
 802a5a0:	e622      	b.n	802a1e8 <__strftime.isra.0+0x3bc>
 802a5a2:	4630      	mov	r0, r6
 802a5a4:	f7ff fbf0 	bl	8029d88 <iso_year_adjust>
 802a5a8:	69b2      	ldr	r2, [r6, #24]
 802a5aa:	b132      	cbz	r2, 802a5ba <__strftime.isra.0+0x78e>
 802a5ac:	3a01      	subs	r2, #1
 802a5ae:	2800      	cmp	r0, #0
 802a5b0:	69f3      	ldr	r3, [r6, #28]
 802a5b2:	dc26      	bgt.n	802a602 <__strftime.isra.0+0x7d6>
 802a5b4:	d103      	bne.n	802a5be <__strftime.isra.0+0x792>
 802a5b6:	330a      	adds	r3, #10
 802a5b8:	e7ee      	b.n	802a598 <__strftime.isra.0+0x76c>
 802a5ba:	2206      	movs	r2, #6
 802a5bc:	e7f7      	b.n	802a5ae <__strftime.isra.0+0x782>
 802a5be:	1ad2      	subs	r2, r2, r3
 802a5c0:	6973      	ldr	r3, [r6, #20]
 802a5c2:	2b00      	cmp	r3, #0
 802a5c4:	f240 716b 	movw	r1, #1899	@ 0x76b
 802a5c8:	bfa8      	it	ge
 802a5ca:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 802a5ce:	440b      	add	r3, r1
 802a5d0:	0799      	lsls	r1, r3, #30
 802a5d2:	d105      	bne.n	802a5e0 <__strftime.isra.0+0x7b4>
 802a5d4:	2064      	movs	r0, #100	@ 0x64
 802a5d6:	fb93 f1f0 	sdiv	r1, r3, r0
 802a5da:	fb00 3111 	mls	r1, r0, r1, r3
 802a5de:	b971      	cbnz	r1, 802a5fe <__strftime.isra.0+0x7d2>
 802a5e0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802a5e4:	fb93 f0f1 	sdiv	r0, r3, r1
 802a5e8:	fb01 3310 	mls	r3, r1, r0, r3
 802a5ec:	fab3 f383 	clz	r3, r3
 802a5f0:	095b      	lsrs	r3, r3, #5
 802a5f2:	1ad2      	subs	r2, r2, r3
 802a5f4:	2a04      	cmp	r2, #4
 802a5f6:	bfcc      	ite	gt
 802a5f8:	2334      	movgt	r3, #52	@ 0x34
 802a5fa:	2335      	movle	r3, #53	@ 0x35
 802a5fc:	e5f4      	b.n	802a1e8 <__strftime.isra.0+0x3bc>
 802a5fe:	2301      	movs	r3, #1
 802a600:	e7f7      	b.n	802a5f2 <__strftime.isra.0+0x7c6>
 802a602:	2301      	movs	r3, #1
 802a604:	e5f0      	b.n	802a1e8 <__strftime.isra.0+0x3bc>
 802a606:	496c      	ldr	r1, [pc, #432]	@ (802a7b8 <__strftime.isra.0+0x98c>)
 802a608:	9203      	str	r2, [sp, #12]
 802a60a:	a806      	add	r0, sp, #24
 802a60c:	f000 fc42 	bl	802ae94 <strcpy>
 802a610:	a806      	add	r0, sp, #24
 802a612:	f7e5 fe45 	bl	80102a0 <strlen>
 802a616:	ab06      	add	r3, sp, #24
 802a618:	eb03 0a00 	add.w	sl, r3, r0
 802a61c:	f10a 0a01 	add.w	sl, sl, #1
 802a620:	46d3      	mov	fp, sl
 802a622:	f1b9 0f00 	cmp.w	r9, #0
 802a626:	d009      	beq.n	802a63c <__strftime.isra.0+0x810>
 802a628:	9a03      	ldr	r2, [sp, #12]
 802a62a:	f803 9000 	strb.w	r9, [r3, r0]
 802a62e:	2a05      	cmp	r2, #5
 802a630:	d901      	bls.n	802a636 <__strftime.isra.0+0x80a>
 802a632:	1f93      	subs	r3, r2, #6
 802a634:	d106      	bne.n	802a644 <__strftime.isra.0+0x818>
 802a636:	4961      	ldr	r1, [pc, #388]	@ (802a7bc <__strftime.isra.0+0x990>)
 802a638:	4658      	mov	r0, fp
 802a63a:	e5a6      	b.n	802a18a <__strftime.isra.0+0x35e>
 802a63c:	aa06      	add	r2, sp, #24
 802a63e:	232b      	movs	r3, #43	@ 0x2b
 802a640:	5413      	strb	r3, [r2, r0]
 802a642:	2304      	movs	r3, #4
 802a644:	a90e      	add	r1, sp, #56	@ 0x38
 802a646:	4a5e      	ldr	r2, [pc, #376]	@ (802a7c0 <__strftime.isra.0+0x994>)
 802a648:	eba1 010a 	sub.w	r1, r1, sl
 802a64c:	4650      	mov	r0, sl
 802a64e:	f001 fee3 	bl	802c418 <sniprintf>
 802a652:	2800      	cmp	r0, #0
 802a654:	bfc8      	it	gt
 802a656:	eb0a 0b00 	addgt.w	fp, sl, r0
 802a65a:	e7ec      	b.n	802a636 <__strftime.isra.0+0x80a>
 802a65c:	1e6b      	subs	r3, r5, #1
 802a65e:	429c      	cmp	r4, r3
 802a660:	f4bf ad74 	bcs.w	802a14c <__strftime.isra.0+0x320>
 802a664:	69b3      	ldr	r3, [r6, #24]
 802a666:	f104 0a01 	add.w	sl, r4, #1
 802a66a:	3330      	adds	r3, #48	@ 0x30
 802a66c:	e6a1      	b.n	802a3b2 <__strftime.isra.0+0x586>
 802a66e:	69b2      	ldr	r2, [r6, #24]
 802a670:	b11a      	cbz	r2, 802a67a <__strftime.isra.0+0x84e>
 802a672:	3a01      	subs	r2, #1
 802a674:	69f3      	ldr	r3, [r6, #28]
 802a676:	3307      	adds	r3, #7
 802a678:	e78e      	b.n	802a598 <__strftime.isra.0+0x76c>
 802a67a:	2206      	movs	r2, #6
 802a67c:	e7fa      	b.n	802a674 <__strftime.isra.0+0x848>
 802a67e:	6970      	ldr	r0, [r6, #20]
 802a680:	2800      	cmp	r0, #0
 802a682:	db05      	blt.n	802a690 <__strftime.isra.0+0x864>
 802a684:	2364      	movs	r3, #100	@ 0x64
 802a686:	fb90 f2f3 	sdiv	r2, r0, r3
 802a68a:	fb02 0313 	mls	r3, r2, r3, r0
 802a68e:	e5ab      	b.n	802a1e8 <__strftime.isra.0+0x3bc>
 802a690:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802a694:	f000 fc9b 	bl	802afce <abs>
 802a698:	e7f4      	b.n	802a684 <__strftime.isra.0+0x858>
 802a69a:	6971      	ldr	r1, [r6, #20]
 802a69c:	4849      	ldr	r0, [pc, #292]	@ (802a7c4 <__strftime.isra.0+0x998>)
 802a69e:	4281      	cmp	r1, r0
 802a6a0:	da09      	bge.n	802a6b6 <__strftime.isra.0+0x88a>
 802a6a2:	eba0 0a01 	sub.w	sl, r0, r1
 802a6a6:	212d      	movs	r1, #45	@ 0x2d
 802a6a8:	f88d 1018 	strb.w	r1, [sp, #24]
 802a6ac:	b102      	cbz	r2, 802a6b0 <__strftime.isra.0+0x884>
 802a6ae:	3a01      	subs	r2, #1
 802a6b0:	f10d 0119 	add.w	r1, sp, #25
 802a6b4:	e609      	b.n	802a2ca <__strftime.isra.0+0x49e>
 802a6b6:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 802a6ba:	e5fd      	b.n	802a2b8 <__strftime.isra.0+0x48c>
 802a6bc:	2330      	movs	r3, #48	@ 0x30
 802a6be:	1c88      	adds	r0, r1, #2
 802a6c0:	704b      	strb	r3, [r1, #1]
 802a6c2:	e609      	b.n	802a2d8 <__strftime.isra.0+0x4ac>
 802a6c4:	6a33      	ldr	r3, [r6, #32]
 802a6c6:	2b00      	cmp	r3, #0
 802a6c8:	da01      	bge.n	802a6ce <__strftime.isra.0+0x8a2>
 802a6ca:	46a2      	mov	sl, r4
 802a6cc:	e45c      	b.n	8029f88 <__strftime.isra.0+0x15c>
 802a6ce:	f000 f92b 	bl	802a928 <__tz_lock>
 802a6d2:	9b02      	ldr	r3, [sp, #8]
 802a6d4:	b90b      	cbnz	r3, 802a6da <__strftime.isra.0+0x8ae>
 802a6d6:	f000 f933 	bl	802a940 <_tzset_unlocked>
 802a6da:	f007 fd23 	bl	8032124 <__gettzinfo>
 802a6de:	6a33      	ldr	r3, [r6, #32]
 802a6e0:	2b00      	cmp	r3, #0
 802a6e2:	bfd4      	ite	le
 802a6e4:	2200      	movle	r2, #0
 802a6e6:	2201      	movgt	r2, #1
 802a6e8:	2328      	movs	r3, #40	@ 0x28
 802a6ea:	fb02 3303 	mla	r3, r2, r3, r3
 802a6ee:	eb07 0a04 	add.w	sl, r7, r4
 802a6f2:	58c3      	ldr	r3, [r0, r3]
 802a6f4:	f1c3 0900 	rsb	r9, r3, #0
 802a6f8:	f000 f91c 	bl	802a934 <__tz_unlock>
 802a6fc:	233c      	movs	r3, #60	@ 0x3c
 802a6fe:	fb99 f0f3 	sdiv	r0, r9, r3
 802a702:	f001 fbfe 	bl	802bf02 <labs>
 802a706:	233c      	movs	r3, #60	@ 0x3c
 802a708:	eba5 0b04 	sub.w	fp, r5, r4
 802a70c:	fb90 f2f3 	sdiv	r2, r0, r3
 802a710:	fb02 0013 	mls	r0, r2, r3, r0
 802a714:	9000      	str	r0, [sp, #0]
 802a716:	4a2c      	ldr	r2, [pc, #176]	@ (802a7c8 <__strftime.isra.0+0x99c>)
 802a718:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 802a71c:	4659      	mov	r1, fp
 802a71e:	4650      	mov	r0, sl
 802a720:	fb99 f3f3 	sdiv	r3, r9, r3
 802a724:	f001 fe78 	bl	802c418 <sniprintf>
 802a728:	2800      	cmp	r0, #0
 802a72a:	f6ff ad0f 	blt.w	802a14c <__strftime.isra.0+0x320>
 802a72e:	eb00 0a04 	add.w	sl, r0, r4
 802a732:	4555      	cmp	r5, sl
 802a734:	f67f ad0a 	bls.w	802a14c <__strftime.isra.0+0x320>
 802a738:	2301      	movs	r3, #1
 802a73a:	9302      	str	r3, [sp, #8]
 802a73c:	e424      	b.n	8029f88 <__strftime.isra.0+0x15c>
 802a73e:	6a33      	ldr	r3, [r6, #32]
 802a740:	2b00      	cmp	r3, #0
 802a742:	dbc2      	blt.n	802a6ca <__strftime.isra.0+0x89e>
 802a744:	f000 f8f0 	bl	802a928 <__tz_lock>
 802a748:	9b02      	ldr	r3, [sp, #8]
 802a74a:	b90b      	cbnz	r3, 802a750 <__strftime.isra.0+0x924>
 802a74c:	f000 f8f8 	bl	802a940 <_tzset_unlocked>
 802a750:	6a33      	ldr	r3, [r6, #32]
 802a752:	4a1e      	ldr	r2, [pc, #120]	@ (802a7cc <__strftime.isra.0+0x9a0>)
 802a754:	2b00      	cmp	r3, #0
 802a756:	bfd4      	ite	le
 802a758:	2300      	movle	r3, #0
 802a75a:	2301      	movgt	r3, #1
 802a75c:	46a2      	mov	sl, r4
 802a75e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802a762:	4648      	mov	r0, r9
 802a764:	f7e5 fd9c 	bl	80102a0 <strlen>
 802a768:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802a76c:	4420      	add	r0, r4
 802a76e:	1e6b      	subs	r3, r5, #1
 802a770:	4550      	cmp	r0, sl
 802a772:	d102      	bne.n	802a77a <__strftime.isra.0+0x94e>
 802a774:	f000 f8de 	bl	802a934 <__tz_unlock>
 802a778:	e7de      	b.n	802a738 <__strftime.isra.0+0x90c>
 802a77a:	4553      	cmp	r3, sl
 802a77c:	d906      	bls.n	802a78c <__strftime.isra.0+0x960>
 802a77e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802a782:	f807 200a 	strb.w	r2, [r7, sl]
 802a786:	f10a 0a01 	add.w	sl, sl, #1
 802a78a:	e7f1      	b.n	802a770 <__strftime.isra.0+0x944>
 802a78c:	f000 f8d2 	bl	802a934 <__tz_unlock>
 802a790:	e4dc      	b.n	802a14c <__strftime.isra.0+0x320>
 802a792:	1e6b      	subs	r3, r5, #1
 802a794:	429c      	cmp	r4, r3
 802a796:	f4bf acd9 	bcs.w	802a14c <__strftime.isra.0+0x320>
 802a79a:	f104 0a01 	add.w	sl, r4, #1
 802a79e:	2325      	movs	r3, #37	@ 0x25
 802a7a0:	e607      	b.n	802a3b2 <__strftime.isra.0+0x586>
 802a7a2:	46a2      	mov	sl, r4
 802a7a4:	2d00      	cmp	r5, #0
 802a7a6:	f43f acd3 	beq.w	802a150 <__strftime.isra.0+0x324>
 802a7aa:	2300      	movs	r3, #0
 802a7ac:	f807 300a 	strb.w	r3, [r7, sl]
 802a7b0:	e4ce      	b.n	802a150 <__strftime.isra.0+0x324>
 802a7b2:	4649      	mov	r1, r9
 802a7b4:	e778      	b.n	802a6a8 <__strftime.isra.0+0x87c>
 802a7b6:	bf00      	nop
 802a7b8:	080381e4 	.word	0x080381e4
 802a7bc:	0803834c 	.word	0x0803834c
 802a7c0:	080381b6 	.word	0x080381b6
 802a7c4:	fffff894 	.word	0xfffff894
 802a7c8:	080381ec 	.word	0x080381ec
 802a7cc:	200000e0 	.word	0x200000e0

0802a7d0 <strftime>:
 802a7d0:	f7ff bb2c 	b.w	8029e2c <__strftime.isra.0>

0802a7d4 <__tzcalc_limits>:
 802a7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a7d8:	4604      	mov	r4, r0
 802a7da:	f007 fca3 	bl	8032124 <__gettzinfo>
 802a7de:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 802a7e2:	429c      	cmp	r4, r3
 802a7e4:	f340 8099 	ble.w	802a91a <__tzcalc_limits+0x146>
 802a7e8:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 802a7ec:	19e5      	adds	r5, r4, r7
 802a7ee:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 802a7f2:	f240 126d 	movw	r2, #365	@ 0x16d
 802a7f6:	10ad      	asrs	r5, r5, #2
 802a7f8:	fb02 5503 	mla	r5, r2, r3, r5
 802a7fc:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 802a800:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 802a804:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 802a808:	4f45      	ldr	r7, [pc, #276]	@ (802a920 <__tzcalc_limits+0x14c>)
 802a80a:	fb93 f3f2 	sdiv	r3, r3, r2
 802a80e:	441d      	add	r5, r3
 802a810:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802a814:	eb04 030c 	add.w	r3, r4, ip
 802a818:	6044      	str	r4, [r0, #4]
 802a81a:	fbb3 f3f2 	udiv	r3, r3, r2
 802a81e:	4601      	mov	r1, r0
 802a820:	441d      	add	r5, r3
 802a822:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 802a826:	7a0b      	ldrb	r3, [r1, #8]
 802a828:	694a      	ldr	r2, [r1, #20]
 802a82a:	2b4a      	cmp	r3, #74	@ 0x4a
 802a82c:	d133      	bne.n	802a896 <__tzcalc_limits+0xc2>
 802a82e:	07a6      	lsls	r6, r4, #30
 802a830:	eb05 0302 	add.w	r3, r5, r2
 802a834:	d106      	bne.n	802a844 <__tzcalc_limits+0x70>
 802a836:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 802a83a:	fb94 f6fe 	sdiv	r6, r4, lr
 802a83e:	fb0e 4616 	mls	r6, lr, r6, r4
 802a842:	b936      	cbnz	r6, 802a852 <__tzcalc_limits+0x7e>
 802a844:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 802a848:	fb94 f6fe 	sdiv	r6, r4, lr
 802a84c:	fb0e 4616 	mls	r6, lr, r6, r4
 802a850:	b9fe      	cbnz	r6, 802a892 <__tzcalc_limits+0xbe>
 802a852:	2a3b      	cmp	r2, #59	@ 0x3b
 802a854:	bfd4      	ite	le
 802a856:	2200      	movle	r2, #0
 802a858:	2201      	movgt	r2, #1
 802a85a:	4413      	add	r3, r2
 802a85c:	3b01      	subs	r3, #1
 802a85e:	698a      	ldr	r2, [r1, #24]
 802a860:	17d6      	asrs	r6, r2, #31
 802a862:	fbc3 2607 	smlal	r2, r6, r3, r7
 802a866:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 802a868:	18d2      	adds	r2, r2, r3
 802a86a:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 802a86e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 802a872:	3128      	adds	r1, #40	@ 0x28
 802a874:	458c      	cmp	ip, r1
 802a876:	d1d6      	bne.n	802a826 <__tzcalc_limits+0x52>
 802a878:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 802a87c:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 802a880:	428c      	cmp	r4, r1
 802a882:	4193      	sbcs	r3, r2
 802a884:	bfb4      	ite	lt
 802a886:	2301      	movlt	r3, #1
 802a888:	2300      	movge	r3, #0
 802a88a:	6003      	str	r3, [r0, #0]
 802a88c:	2001      	movs	r0, #1
 802a88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a892:	2200      	movs	r2, #0
 802a894:	e7e1      	b.n	802a85a <__tzcalc_limits+0x86>
 802a896:	2b44      	cmp	r3, #68	@ 0x44
 802a898:	d101      	bne.n	802a89e <__tzcalc_limits+0xca>
 802a89a:	18ab      	adds	r3, r5, r2
 802a89c:	e7df      	b.n	802a85e <__tzcalc_limits+0x8a>
 802a89e:	07a3      	lsls	r3, r4, #30
 802a8a0:	d105      	bne.n	802a8ae <__tzcalc_limits+0xda>
 802a8a2:	2664      	movs	r6, #100	@ 0x64
 802a8a4:	fb94 f3f6 	sdiv	r3, r4, r6
 802a8a8:	fb06 4313 	mls	r3, r6, r3, r4
 802a8ac:	bb7b      	cbnz	r3, 802a90e <__tzcalc_limits+0x13a>
 802a8ae:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 802a8b2:	fb94 f6f3 	sdiv	r6, r4, r3
 802a8b6:	fb03 4616 	mls	r6, r3, r6, r4
 802a8ba:	fab6 f686 	clz	r6, r6
 802a8be:	0976      	lsrs	r6, r6, #5
 802a8c0:	f8df e060 	ldr.w	lr, [pc, #96]	@ 802a924 <__tzcalc_limits+0x150>
 802a8c4:	f8d1 900c 	ldr.w	r9, [r1, #12]
 802a8c8:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 802a8cc:	462b      	mov	r3, r5
 802a8ce:	f04f 0800 	mov.w	r8, #0
 802a8d2:	fb0a e606 	mla	r6, sl, r6, lr
 802a8d6:	f108 0801 	add.w	r8, r8, #1
 802a8da:	45c1      	cmp	r9, r8
 802a8dc:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 802a8e0:	dc17      	bgt.n	802a912 <__tzcalc_limits+0x13e>
 802a8e2:	f103 0804 	add.w	r8, r3, #4
 802a8e6:	2607      	movs	r6, #7
 802a8e8:	fb98 f6f6 	sdiv	r6, r8, r6
 802a8ec:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802a8f0:	eba8 0606 	sub.w	r6, r8, r6
 802a8f4:	1b92      	subs	r2, r2, r6
 802a8f6:	690e      	ldr	r6, [r1, #16]
 802a8f8:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 802a8fc:	bf48      	it	mi
 802a8fe:	3207      	addmi	r2, #7
 802a900:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802a904:	4432      	add	r2, r6
 802a906:	4572      	cmp	r2, lr
 802a908:	da05      	bge.n	802a916 <__tzcalc_limits+0x142>
 802a90a:	4413      	add	r3, r2
 802a90c:	e7a7      	b.n	802a85e <__tzcalc_limits+0x8a>
 802a90e:	2601      	movs	r6, #1
 802a910:	e7d6      	b.n	802a8c0 <__tzcalc_limits+0xec>
 802a912:	4473      	add	r3, lr
 802a914:	e7df      	b.n	802a8d6 <__tzcalc_limits+0x102>
 802a916:	3a07      	subs	r2, #7
 802a918:	e7f5      	b.n	802a906 <__tzcalc_limits+0x132>
 802a91a:	2000      	movs	r0, #0
 802a91c:	e7b7      	b.n	802a88e <__tzcalc_limits+0xba>
 802a91e:	bf00      	nop
 802a920:	00015180 	.word	0x00015180
 802a924:	0803812c 	.word	0x0803812c

0802a928 <__tz_lock>:
 802a928:	4801      	ldr	r0, [pc, #4]	@ (802a930 <__tz_lock+0x8>)
 802a92a:	f000 bae1 	b.w	802aef0 <__retarget_lock_acquire>
 802a92e:	bf00      	nop
 802a930:	20018188 	.word	0x20018188

0802a934 <__tz_unlock>:
 802a934:	4801      	ldr	r0, [pc, #4]	@ (802a93c <__tz_unlock+0x8>)
 802a936:	f000 badd 	b.w	802aef4 <__retarget_lock_release>
 802a93a:	bf00      	nop
 802a93c:	20018188 	.word	0x20018188

0802a940 <_tzset_unlocked>:
 802a940:	4b01      	ldr	r3, [pc, #4]	@ (802a948 <_tzset_unlocked+0x8>)
 802a942:	6818      	ldr	r0, [r3, #0]
 802a944:	f000 b802 	b.w	802a94c <_tzset_unlocked_r>
 802a948:	20000254 	.word	0x20000254

0802a94c <_tzset_unlocked_r>:
 802a94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a950:	b08d      	sub	sp, #52	@ 0x34
 802a952:	4607      	mov	r7, r0
 802a954:	f007 fbe6 	bl	8032124 <__gettzinfo>
 802a958:	49bc      	ldr	r1, [pc, #752]	@ (802ac4c <_tzset_unlocked_r+0x300>)
 802a95a:	4dbd      	ldr	r5, [pc, #756]	@ (802ac50 <_tzset_unlocked_r+0x304>)
 802a95c:	4604      	mov	r4, r0
 802a95e:	4638      	mov	r0, r7
 802a960:	f001 fac8 	bl	802bef4 <_getenv_r>
 802a964:	4606      	mov	r6, r0
 802a966:	bb10      	cbnz	r0, 802a9ae <_tzset_unlocked_r+0x62>
 802a968:	4bba      	ldr	r3, [pc, #744]	@ (802ac54 <_tzset_unlocked_r+0x308>)
 802a96a:	4abb      	ldr	r2, [pc, #748]	@ (802ac58 <_tzset_unlocked_r+0x30c>)
 802a96c:	6018      	str	r0, [r3, #0]
 802a96e:	4bbb      	ldr	r3, [pc, #748]	@ (802ac5c <_tzset_unlocked_r+0x310>)
 802a970:	62a0      	str	r0, [r4, #40]	@ 0x28
 802a972:	6018      	str	r0, [r3, #0]
 802a974:	4bba      	ldr	r3, [pc, #744]	@ (802ac60 <_tzset_unlocked_r+0x314>)
 802a976:	6520      	str	r0, [r4, #80]	@ 0x50
 802a978:	e9c3 2200 	strd	r2, r2, [r3]
 802a97c:	214a      	movs	r1, #74	@ 0x4a
 802a97e:	2200      	movs	r2, #0
 802a980:	2300      	movs	r3, #0
 802a982:	e9c4 0003 	strd	r0, r0, [r4, #12]
 802a986:	e9c4 0005 	strd	r0, r0, [r4, #20]
 802a98a:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 802a98e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 802a992:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802a996:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802a99a:	6828      	ldr	r0, [r5, #0]
 802a99c:	7221      	strb	r1, [r4, #8]
 802a99e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802a9a2:	f001 fabb 	bl	802bf1c <free>
 802a9a6:	602e      	str	r6, [r5, #0]
 802a9a8:	b00d      	add	sp, #52	@ 0x34
 802a9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a9ae:	6829      	ldr	r1, [r5, #0]
 802a9b0:	2900      	cmp	r1, #0
 802a9b2:	f040 808e 	bne.w	802aad2 <_tzset_unlocked_r+0x186>
 802a9b6:	6828      	ldr	r0, [r5, #0]
 802a9b8:	f001 fab0 	bl	802bf1c <free>
 802a9bc:	4630      	mov	r0, r6
 802a9be:	f7e5 fc6f 	bl	80102a0 <strlen>
 802a9c2:	1c41      	adds	r1, r0, #1
 802a9c4:	4638      	mov	r0, r7
 802a9c6:	f001 fab1 	bl	802bf2c <_malloc_r>
 802a9ca:	6028      	str	r0, [r5, #0]
 802a9cc:	2800      	cmp	r0, #0
 802a9ce:	f040 8086 	bne.w	802aade <_tzset_unlocked_r+0x192>
 802a9d2:	4aa2      	ldr	r2, [pc, #648]	@ (802ac5c <_tzset_unlocked_r+0x310>)
 802a9d4:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 802ac60 <_tzset_unlocked_r+0x314>
 802a9d8:	f8df a278 	ldr.w	sl, [pc, #632]	@ 802ac54 <_tzset_unlocked_r+0x308>
 802a9dc:	2300      	movs	r3, #0
 802a9de:	6013      	str	r3, [r2, #0]
 802a9e0:	4aa0      	ldr	r2, [pc, #640]	@ (802ac64 <_tzset_unlocked_r+0x318>)
 802a9e2:	f8ca 3000 	str.w	r3, [sl]
 802a9e6:	2000      	movs	r0, #0
 802a9e8:	2100      	movs	r1, #0
 802a9ea:	e9c8 2200 	strd	r2, r2, [r8]
 802a9ee:	e9c4 3303 	strd	r3, r3, [r4, #12]
 802a9f2:	e9c4 3305 	strd	r3, r3, [r4, #20]
 802a9f6:	e9c4 0108 	strd	r0, r1, [r4, #32]
 802a9fa:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 802a9fe:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 802aa02:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 802aa06:	224a      	movs	r2, #74	@ 0x4a
 802aa08:	7222      	strb	r2, [r4, #8]
 802aa0a:	62a3      	str	r3, [r4, #40]	@ 0x28
 802aa0c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 802aa10:	6523      	str	r3, [r4, #80]	@ 0x50
 802aa12:	7833      	ldrb	r3, [r6, #0]
 802aa14:	2b3a      	cmp	r3, #58	@ 0x3a
 802aa16:	bf08      	it	eq
 802aa18:	3601      	addeq	r6, #1
 802aa1a:	7833      	ldrb	r3, [r6, #0]
 802aa1c:	2b3c      	cmp	r3, #60	@ 0x3c
 802aa1e:	d162      	bne.n	802aae6 <_tzset_unlocked_r+0x19a>
 802aa20:	1c75      	adds	r5, r6, #1
 802aa22:	4a91      	ldr	r2, [pc, #580]	@ (802ac68 <_tzset_unlocked_r+0x31c>)
 802aa24:	4991      	ldr	r1, [pc, #580]	@ (802ac6c <_tzset_unlocked_r+0x320>)
 802aa26:	ab0a      	add	r3, sp, #40	@ 0x28
 802aa28:	4628      	mov	r0, r5
 802aa2a:	f001 fccb 	bl	802c3c4 <siscanf>
 802aa2e:	2800      	cmp	r0, #0
 802aa30:	ddba      	ble.n	802a9a8 <_tzset_unlocked_r+0x5c>
 802aa32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802aa34:	1eda      	subs	r2, r3, #3
 802aa36:	2a07      	cmp	r2, #7
 802aa38:	d8b6      	bhi.n	802a9a8 <_tzset_unlocked_r+0x5c>
 802aa3a:	5ceb      	ldrb	r3, [r5, r3]
 802aa3c:	2b3e      	cmp	r3, #62	@ 0x3e
 802aa3e:	d1b3      	bne.n	802a9a8 <_tzset_unlocked_r+0x5c>
 802aa40:	3602      	adds	r6, #2
 802aa42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802aa44:	18f5      	adds	r5, r6, r3
 802aa46:	5cf3      	ldrb	r3, [r6, r3]
 802aa48:	2b2d      	cmp	r3, #45	@ 0x2d
 802aa4a:	d15a      	bne.n	802ab02 <_tzset_unlocked_r+0x1b6>
 802aa4c:	3501      	adds	r5, #1
 802aa4e:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802aa52:	2300      	movs	r3, #0
 802aa54:	f8ad 301e 	strh.w	r3, [sp, #30]
 802aa58:	f8ad 3020 	strh.w	r3, [sp, #32]
 802aa5c:	af08      	add	r7, sp, #32
 802aa5e:	ab0a      	add	r3, sp, #40	@ 0x28
 802aa60:	e9cd 3701 	strd	r3, r7, [sp, #4]
 802aa64:	9303      	str	r3, [sp, #12]
 802aa66:	f10d 031e 	add.w	r3, sp, #30
 802aa6a:	9300      	str	r3, [sp, #0]
 802aa6c:	4980      	ldr	r1, [pc, #512]	@ (802ac70 <_tzset_unlocked_r+0x324>)
 802aa6e:	ab0a      	add	r3, sp, #40	@ 0x28
 802aa70:	aa07      	add	r2, sp, #28
 802aa72:	4628      	mov	r0, r5
 802aa74:	f001 fca6 	bl	802c3c4 <siscanf>
 802aa78:	2800      	cmp	r0, #0
 802aa7a:	dd95      	ble.n	802a9a8 <_tzset_unlocked_r+0x5c>
 802aa7c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802aa80:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 802aa84:	223c      	movs	r2, #60	@ 0x3c
 802aa86:	fb02 6603 	mla	r6, r2, r3, r6
 802aa8a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802aa8e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802aa92:	fb02 6603 	mla	r6, r2, r3, r6
 802aa96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802aa98:	fb09 f606 	mul.w	r6, r9, r6
 802aa9c:	eb05 0903 	add.w	r9, r5, r3
 802aaa0:	5ceb      	ldrb	r3, [r5, r3]
 802aaa2:	2b3c      	cmp	r3, #60	@ 0x3c
 802aaa4:	f040 80ee 	bne.w	802ac84 <_tzset_unlocked_r+0x338>
 802aaa8:	f109 0501 	add.w	r5, r9, #1
 802aaac:	4a71      	ldr	r2, [pc, #452]	@ (802ac74 <_tzset_unlocked_r+0x328>)
 802aaae:	496f      	ldr	r1, [pc, #444]	@ (802ac6c <_tzset_unlocked_r+0x320>)
 802aab0:	ab0a      	add	r3, sp, #40	@ 0x28
 802aab2:	4628      	mov	r0, r5
 802aab4:	f001 fc86 	bl	802c3c4 <siscanf>
 802aab8:	2800      	cmp	r0, #0
 802aaba:	dc28      	bgt.n	802ab0e <_tzset_unlocked_r+0x1c2>
 802aabc:	f899 3001 	ldrb.w	r3, [r9, #1]
 802aac0:	2b3e      	cmp	r3, #62	@ 0x3e
 802aac2:	d124      	bne.n	802ab0e <_tzset_unlocked_r+0x1c2>
 802aac4:	4b68      	ldr	r3, [pc, #416]	@ (802ac68 <_tzset_unlocked_r+0x31c>)
 802aac6:	62a6      	str	r6, [r4, #40]	@ 0x28
 802aac8:	e9c8 3300 	strd	r3, r3, [r8]
 802aacc:	f8ca 6000 	str.w	r6, [sl]
 802aad0:	e76a      	b.n	802a9a8 <_tzset_unlocked_r+0x5c>
 802aad2:	f7e5 fb85 	bl	80101e0 <strcmp>
 802aad6:	2800      	cmp	r0, #0
 802aad8:	f47f af6d 	bne.w	802a9b6 <_tzset_unlocked_r+0x6a>
 802aadc:	e764      	b.n	802a9a8 <_tzset_unlocked_r+0x5c>
 802aade:	4631      	mov	r1, r6
 802aae0:	f000 f9d8 	bl	802ae94 <strcpy>
 802aae4:	e775      	b.n	802a9d2 <_tzset_unlocked_r+0x86>
 802aae6:	4a60      	ldr	r2, [pc, #384]	@ (802ac68 <_tzset_unlocked_r+0x31c>)
 802aae8:	4963      	ldr	r1, [pc, #396]	@ (802ac78 <_tzset_unlocked_r+0x32c>)
 802aaea:	ab0a      	add	r3, sp, #40	@ 0x28
 802aaec:	4630      	mov	r0, r6
 802aaee:	f001 fc69 	bl	802c3c4 <siscanf>
 802aaf2:	2800      	cmp	r0, #0
 802aaf4:	f77f af58 	ble.w	802a9a8 <_tzset_unlocked_r+0x5c>
 802aaf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802aafa:	3b03      	subs	r3, #3
 802aafc:	2b07      	cmp	r3, #7
 802aafe:	d9a0      	bls.n	802aa42 <_tzset_unlocked_r+0xf6>
 802ab00:	e752      	b.n	802a9a8 <_tzset_unlocked_r+0x5c>
 802ab02:	2b2b      	cmp	r3, #43	@ 0x2b
 802ab04:	bf08      	it	eq
 802ab06:	3501      	addeq	r5, #1
 802ab08:	f04f 0901 	mov.w	r9, #1
 802ab0c:	e7a1      	b.n	802aa52 <_tzset_unlocked_r+0x106>
 802ab0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ab10:	1eda      	subs	r2, r3, #3
 802ab12:	2a07      	cmp	r2, #7
 802ab14:	f63f af48 	bhi.w	802a9a8 <_tzset_unlocked_r+0x5c>
 802ab18:	5ceb      	ldrb	r3, [r5, r3]
 802ab1a:	2b3e      	cmp	r3, #62	@ 0x3e
 802ab1c:	f47f af44 	bne.w	802a9a8 <_tzset_unlocked_r+0x5c>
 802ab20:	f109 0902 	add.w	r9, r9, #2
 802ab24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ab26:	eb09 0503 	add.w	r5, r9, r3
 802ab2a:	f819 3003 	ldrb.w	r3, [r9, r3]
 802ab2e:	2b2d      	cmp	r3, #45	@ 0x2d
 802ab30:	f040 80b7 	bne.w	802aca2 <_tzset_unlocked_r+0x356>
 802ab34:	3501      	adds	r5, #1
 802ab36:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802ab3a:	2300      	movs	r3, #0
 802ab3c:	f8ad 301c 	strh.w	r3, [sp, #28]
 802ab40:	f8ad 301e 	strh.w	r3, [sp, #30]
 802ab44:	f8ad 3020 	strh.w	r3, [sp, #32]
 802ab48:	930a      	str	r3, [sp, #40]	@ 0x28
 802ab4a:	ab0a      	add	r3, sp, #40	@ 0x28
 802ab4c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 802ab50:	9301      	str	r3, [sp, #4]
 802ab52:	f10d 031e 	add.w	r3, sp, #30
 802ab56:	9300      	str	r3, [sp, #0]
 802ab58:	4945      	ldr	r1, [pc, #276]	@ (802ac70 <_tzset_unlocked_r+0x324>)
 802ab5a:	ab0a      	add	r3, sp, #40	@ 0x28
 802ab5c:	aa07      	add	r2, sp, #28
 802ab5e:	4628      	mov	r0, r5
 802ab60:	f001 fc30 	bl	802c3c4 <siscanf>
 802ab64:	2800      	cmp	r0, #0
 802ab66:	f300 80a2 	bgt.w	802acae <_tzset_unlocked_r+0x362>
 802ab6a:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 802ab6e:	9304      	str	r3, [sp, #16]
 802ab70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ab72:	4627      	mov	r7, r4
 802ab74:	441d      	add	r5, r3
 802ab76:	f04f 0b00 	mov.w	fp, #0
 802ab7a:	782b      	ldrb	r3, [r5, #0]
 802ab7c:	2b2c      	cmp	r3, #44	@ 0x2c
 802ab7e:	bf08      	it	eq
 802ab80:	3501      	addeq	r5, #1
 802ab82:	f895 9000 	ldrb.w	r9, [r5]
 802ab86:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 802ab8a:	f040 80a3 	bne.w	802acd4 <_tzset_unlocked_r+0x388>
 802ab8e:	ab0a      	add	r3, sp, #40	@ 0x28
 802ab90:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 802ab94:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802ab98:	aa09      	add	r2, sp, #36	@ 0x24
 802ab9a:	9200      	str	r2, [sp, #0]
 802ab9c:	4937      	ldr	r1, [pc, #220]	@ (802ac7c <_tzset_unlocked_r+0x330>)
 802ab9e:	9303      	str	r3, [sp, #12]
 802aba0:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 802aba4:	4628      	mov	r0, r5
 802aba6:	f001 fc0d 	bl	802c3c4 <siscanf>
 802abaa:	2803      	cmp	r0, #3
 802abac:	f47f aefc 	bne.w	802a9a8 <_tzset_unlocked_r+0x5c>
 802abb0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 802abb4:	1e4b      	subs	r3, r1, #1
 802abb6:	2b0b      	cmp	r3, #11
 802abb8:	f63f aef6 	bhi.w	802a9a8 <_tzset_unlocked_r+0x5c>
 802abbc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 802abc0:	1e53      	subs	r3, r2, #1
 802abc2:	2b04      	cmp	r3, #4
 802abc4:	f63f aef0 	bhi.w	802a9a8 <_tzset_unlocked_r+0x5c>
 802abc8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 802abcc:	2b06      	cmp	r3, #6
 802abce:	f63f aeeb 	bhi.w	802a9a8 <_tzset_unlocked_r+0x5c>
 802abd2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802abd6:	f887 9008 	strb.w	r9, [r7, #8]
 802abda:	617b      	str	r3, [r7, #20]
 802abdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802abde:	eb05 0903 	add.w	r9, r5, r3
 802abe2:	2500      	movs	r5, #0
 802abe4:	f04f 0302 	mov.w	r3, #2
 802abe8:	f8ad 301c 	strh.w	r3, [sp, #28]
 802abec:	f8ad 501e 	strh.w	r5, [sp, #30]
 802abf0:	f8ad 5020 	strh.w	r5, [sp, #32]
 802abf4:	950a      	str	r5, [sp, #40]	@ 0x28
 802abf6:	f899 3000 	ldrb.w	r3, [r9]
 802abfa:	2b2f      	cmp	r3, #47	@ 0x2f
 802abfc:	f040 8096 	bne.w	802ad2c <_tzset_unlocked_r+0x3e0>
 802ac00:	ab0a      	add	r3, sp, #40	@ 0x28
 802ac02:	aa08      	add	r2, sp, #32
 802ac04:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802ac08:	f10d 021e 	add.w	r2, sp, #30
 802ac0c:	9200      	str	r2, [sp, #0]
 802ac0e:	491c      	ldr	r1, [pc, #112]	@ (802ac80 <_tzset_unlocked_r+0x334>)
 802ac10:	9303      	str	r3, [sp, #12]
 802ac12:	aa07      	add	r2, sp, #28
 802ac14:	4648      	mov	r0, r9
 802ac16:	f001 fbd5 	bl	802c3c4 <siscanf>
 802ac1a:	42a8      	cmp	r0, r5
 802ac1c:	f300 8086 	bgt.w	802ad2c <_tzset_unlocked_r+0x3e0>
 802ac20:	214a      	movs	r1, #74	@ 0x4a
 802ac22:	2200      	movs	r2, #0
 802ac24:	2300      	movs	r3, #0
 802ac26:	e9c4 5503 	strd	r5, r5, [r4, #12]
 802ac2a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802ac2e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802ac32:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 802ac36:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 802ac3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802ac3e:	7221      	strb	r1, [r4, #8]
 802ac40:	62a5      	str	r5, [r4, #40]	@ 0x28
 802ac42:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802ac46:	6525      	str	r5, [r4, #80]	@ 0x50
 802ac48:	e6ae      	b.n	802a9a8 <_tzset_unlocked_r+0x5c>
 802ac4a:	bf00      	nop
 802ac4c:	080381f8 	.word	0x080381f8
 802ac50:	20018160 	.word	0x20018160
 802ac54:	2001817c 	.word	0x2001817c
 802ac58:	080381fb 	.word	0x080381fb
 802ac5c:	20018180 	.word	0x20018180
 802ac60:	200000e0 	.word	0x200000e0
 802ac64:	080380ba 	.word	0x080380ba
 802ac68:	20018170 	.word	0x20018170
 802ac6c:	080381ff 	.word	0x080381ff
 802ac70:	08038234 	.word	0x08038234
 802ac74:	20018164 	.word	0x20018164
 802ac78:	08038212 	.word	0x08038212
 802ac7c:	08038220 	.word	0x08038220
 802ac80:	08038233 	.word	0x08038233
 802ac84:	4a3e      	ldr	r2, [pc, #248]	@ (802ad80 <_tzset_unlocked_r+0x434>)
 802ac86:	493f      	ldr	r1, [pc, #252]	@ (802ad84 <_tzset_unlocked_r+0x438>)
 802ac88:	ab0a      	add	r3, sp, #40	@ 0x28
 802ac8a:	4648      	mov	r0, r9
 802ac8c:	f001 fb9a 	bl	802c3c4 <siscanf>
 802ac90:	2800      	cmp	r0, #0
 802ac92:	f77f af17 	ble.w	802aac4 <_tzset_unlocked_r+0x178>
 802ac96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ac98:	3b03      	subs	r3, #3
 802ac9a:	2b07      	cmp	r3, #7
 802ac9c:	f67f af42 	bls.w	802ab24 <_tzset_unlocked_r+0x1d8>
 802aca0:	e682      	b.n	802a9a8 <_tzset_unlocked_r+0x5c>
 802aca2:	2b2b      	cmp	r3, #43	@ 0x2b
 802aca4:	bf08      	it	eq
 802aca6:	3501      	addeq	r5, #1
 802aca8:	f04f 0901 	mov.w	r9, #1
 802acac:	e745      	b.n	802ab3a <_tzset_unlocked_r+0x1ee>
 802acae:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802acb2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802acb6:	213c      	movs	r1, #60	@ 0x3c
 802acb8:	fb01 3302 	mla	r3, r1, r2, r3
 802acbc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802acc0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802acc4:	fb01 3302 	mla	r3, r1, r2, r3
 802acc8:	fb09 f303 	mul.w	r3, r9, r3
 802accc:	e74f      	b.n	802ab6e <_tzset_unlocked_r+0x222>
 802acce:	f04f 0b01 	mov.w	fp, #1
 802acd2:	e752      	b.n	802ab7a <_tzset_unlocked_r+0x22e>
 802acd4:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 802acd8:	bf06      	itte	eq
 802acda:	3501      	addeq	r5, #1
 802acdc:	464b      	moveq	r3, r9
 802acde:	2344      	movne	r3, #68	@ 0x44
 802ace0:	220a      	movs	r2, #10
 802ace2:	a90b      	add	r1, sp, #44	@ 0x2c
 802ace4:	4628      	mov	r0, r5
 802ace6:	9305      	str	r3, [sp, #20]
 802ace8:	f007 f950 	bl	8031f8c <strtoul>
 802acec:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 802acf0:	9b05      	ldr	r3, [sp, #20]
 802acf2:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 802acf6:	45a9      	cmp	r9, r5
 802acf8:	d114      	bne.n	802ad24 <_tzset_unlocked_r+0x3d8>
 802acfa:	234d      	movs	r3, #77	@ 0x4d
 802acfc:	f1bb 0f00 	cmp.w	fp, #0
 802ad00:	d107      	bne.n	802ad12 <_tzset_unlocked_r+0x3c6>
 802ad02:	7223      	strb	r3, [r4, #8]
 802ad04:	2103      	movs	r1, #3
 802ad06:	2302      	movs	r3, #2
 802ad08:	e9c4 1303 	strd	r1, r3, [r4, #12]
 802ad0c:	f8c4 b014 	str.w	fp, [r4, #20]
 802ad10:	e767      	b.n	802abe2 <_tzset_unlocked_r+0x296>
 802ad12:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 802ad16:	220b      	movs	r2, #11
 802ad18:	2301      	movs	r3, #1
 802ad1a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 802ad1e:	2300      	movs	r3, #0
 802ad20:	63e3      	str	r3, [r4, #60]	@ 0x3c
 802ad22:	e75e      	b.n	802abe2 <_tzset_unlocked_r+0x296>
 802ad24:	b280      	uxth	r0, r0
 802ad26:	723b      	strb	r3, [r7, #8]
 802ad28:	6178      	str	r0, [r7, #20]
 802ad2a:	e75a      	b.n	802abe2 <_tzset_unlocked_r+0x296>
 802ad2c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802ad30:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802ad34:	213c      	movs	r1, #60	@ 0x3c
 802ad36:	fb01 3302 	mla	r3, r1, r2, r3
 802ad3a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802ad3e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802ad42:	fb01 3302 	mla	r3, r1, r2, r3
 802ad46:	61bb      	str	r3, [r7, #24]
 802ad48:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802ad4a:	3728      	adds	r7, #40	@ 0x28
 802ad4c:	444d      	add	r5, r9
 802ad4e:	f1bb 0f00 	cmp.w	fp, #0
 802ad52:	d0bc      	beq.n	802acce <_tzset_unlocked_r+0x382>
 802ad54:	9b04      	ldr	r3, [sp, #16]
 802ad56:	6523      	str	r3, [r4, #80]	@ 0x50
 802ad58:	4b0b      	ldr	r3, [pc, #44]	@ (802ad88 <_tzset_unlocked_r+0x43c>)
 802ad5a:	f8c8 3000 	str.w	r3, [r8]
 802ad5e:	6860      	ldr	r0, [r4, #4]
 802ad60:	4b07      	ldr	r3, [pc, #28]	@ (802ad80 <_tzset_unlocked_r+0x434>)
 802ad62:	62a6      	str	r6, [r4, #40]	@ 0x28
 802ad64:	f8c8 3004 	str.w	r3, [r8, #4]
 802ad68:	f7ff fd34 	bl	802a7d4 <__tzcalc_limits>
 802ad6c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 802ad6e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802ad70:	f8ca 2000 	str.w	r2, [sl]
 802ad74:	1a9b      	subs	r3, r3, r2
 802ad76:	4a05      	ldr	r2, [pc, #20]	@ (802ad8c <_tzset_unlocked_r+0x440>)
 802ad78:	bf18      	it	ne
 802ad7a:	2301      	movne	r3, #1
 802ad7c:	6013      	str	r3, [r2, #0]
 802ad7e:	e613      	b.n	802a9a8 <_tzset_unlocked_r+0x5c>
 802ad80:	20018164 	.word	0x20018164
 802ad84:	08038212 	.word	0x08038212
 802ad88:	20018170 	.word	0x20018170
 802ad8c:	20018180 	.word	0x20018180

0802ad90 <__locale_mb_cur_max>:
 802ad90:	4b01      	ldr	r3, [pc, #4]	@ (802ad98 <__locale_mb_cur_max+0x8>)
 802ad92:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 802ad96:	4770      	bx	lr
 802ad98:	200000e8 	.word	0x200000e8

0802ad9c <_localeconv_r>:
 802ad9c:	4800      	ldr	r0, [pc, #0]	@ (802ada0 <_localeconv_r+0x4>)
 802ad9e:	4770      	bx	lr
 802ada0:	200001d8 	.word	0x200001d8

0802ada4 <_close_r>:
 802ada4:	b538      	push	{r3, r4, r5, lr}
 802ada6:	4d06      	ldr	r5, [pc, #24]	@ (802adc0 <_close_r+0x1c>)
 802ada8:	2300      	movs	r3, #0
 802adaa:	4604      	mov	r4, r0
 802adac:	4608      	mov	r0, r1
 802adae:	602b      	str	r3, [r5, #0]
 802adb0:	f7e7 f9d8 	bl	8012164 <_close>
 802adb4:	1c43      	adds	r3, r0, #1
 802adb6:	d102      	bne.n	802adbe <_close_r+0x1a>
 802adb8:	682b      	ldr	r3, [r5, #0]
 802adba:	b103      	cbz	r3, 802adbe <_close_r+0x1a>
 802adbc:	6023      	str	r3, [r4, #0]
 802adbe:	bd38      	pop	{r3, r4, r5, pc}
 802adc0:	20018184 	.word	0x20018184

0802adc4 <_reclaim_reent>:
 802adc4:	4b14      	ldr	r3, [pc, #80]	@ (802ae18 <_reclaim_reent+0x54>)
 802adc6:	681b      	ldr	r3, [r3, #0]
 802adc8:	4283      	cmp	r3, r0
 802adca:	b570      	push	{r4, r5, r6, lr}
 802adcc:	4604      	mov	r4, r0
 802adce:	d022      	beq.n	802ae16 <_reclaim_reent+0x52>
 802add0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802add2:	b153      	cbz	r3, 802adea <_reclaim_reent+0x26>
 802add4:	2500      	movs	r5, #0
 802add6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 802add8:	5959      	ldr	r1, [r3, r5]
 802adda:	b9b1      	cbnz	r1, 802ae0a <_reclaim_reent+0x46>
 802addc:	3504      	adds	r5, #4
 802adde:	2d80      	cmp	r5, #128	@ 0x80
 802ade0:	d1f9      	bne.n	802add6 <_reclaim_reent+0x12>
 802ade2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802ade4:	4620      	mov	r0, r4
 802ade6:	f000 ff89 	bl	802bcfc <_free_r>
 802adea:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802adec:	b111      	cbz	r1, 802adf4 <_reclaim_reent+0x30>
 802adee:	4620      	mov	r0, r4
 802adf0:	f000 ff84 	bl	802bcfc <_free_r>
 802adf4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 802adf6:	b111      	cbz	r1, 802adfe <_reclaim_reent+0x3a>
 802adf8:	4620      	mov	r0, r4
 802adfa:	f000 ff7f 	bl	802bcfc <_free_r>
 802adfe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802ae00:	b14b      	cbz	r3, 802ae16 <_reclaim_reent+0x52>
 802ae02:	4620      	mov	r0, r4
 802ae04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802ae08:	4718      	bx	r3
 802ae0a:	680e      	ldr	r6, [r1, #0]
 802ae0c:	4620      	mov	r0, r4
 802ae0e:	f000 ff75 	bl	802bcfc <_free_r>
 802ae12:	4631      	mov	r1, r6
 802ae14:	e7e1      	b.n	802adda <_reclaim_reent+0x16>
 802ae16:	bd70      	pop	{r4, r5, r6, pc}
 802ae18:	20000254 	.word	0x20000254

0802ae1c <_lseek_r>:
 802ae1c:	b538      	push	{r3, r4, r5, lr}
 802ae1e:	4d07      	ldr	r5, [pc, #28]	@ (802ae3c <_lseek_r+0x20>)
 802ae20:	4604      	mov	r4, r0
 802ae22:	4608      	mov	r0, r1
 802ae24:	4611      	mov	r1, r2
 802ae26:	2200      	movs	r2, #0
 802ae28:	602a      	str	r2, [r5, #0]
 802ae2a:	461a      	mov	r2, r3
 802ae2c:	f7e7 f9a4 	bl	8012178 <_lseek>
 802ae30:	1c43      	adds	r3, r0, #1
 802ae32:	d102      	bne.n	802ae3a <_lseek_r+0x1e>
 802ae34:	682b      	ldr	r3, [r5, #0]
 802ae36:	b103      	cbz	r3, 802ae3a <_lseek_r+0x1e>
 802ae38:	6023      	str	r3, [r4, #0]
 802ae3a:	bd38      	pop	{r3, r4, r5, pc}
 802ae3c:	20018184 	.word	0x20018184

0802ae40 <_read_r>:
 802ae40:	b538      	push	{r3, r4, r5, lr}
 802ae42:	4d07      	ldr	r5, [pc, #28]	@ (802ae60 <_read_r+0x20>)
 802ae44:	4604      	mov	r4, r0
 802ae46:	4608      	mov	r0, r1
 802ae48:	4611      	mov	r1, r2
 802ae4a:	2200      	movs	r2, #0
 802ae4c:	602a      	str	r2, [r5, #0]
 802ae4e:	461a      	mov	r2, r3
 802ae50:	f7e7 f96a 	bl	8012128 <_read>
 802ae54:	1c43      	adds	r3, r0, #1
 802ae56:	d102      	bne.n	802ae5e <_read_r+0x1e>
 802ae58:	682b      	ldr	r3, [r5, #0]
 802ae5a:	b103      	cbz	r3, 802ae5e <_read_r+0x1e>
 802ae5c:	6023      	str	r3, [r4, #0]
 802ae5e:	bd38      	pop	{r3, r4, r5, pc}
 802ae60:	20018184 	.word	0x20018184

0802ae64 <_write_r>:
 802ae64:	b538      	push	{r3, r4, r5, lr}
 802ae66:	4d07      	ldr	r5, [pc, #28]	@ (802ae84 <_write_r+0x20>)
 802ae68:	4604      	mov	r4, r0
 802ae6a:	4608      	mov	r0, r1
 802ae6c:	4611      	mov	r1, r2
 802ae6e:	2200      	movs	r2, #0
 802ae70:	602a      	str	r2, [r5, #0]
 802ae72:	461a      	mov	r2, r3
 802ae74:	f7e7 f968 	bl	8012148 <_write>
 802ae78:	1c43      	adds	r3, r0, #1
 802ae7a:	d102      	bne.n	802ae82 <_write_r+0x1e>
 802ae7c:	682b      	ldr	r3, [r5, #0]
 802ae7e:	b103      	cbz	r3, 802ae82 <_write_r+0x1e>
 802ae80:	6023      	str	r3, [r4, #0]
 802ae82:	bd38      	pop	{r3, r4, r5, pc}
 802ae84:	20018184 	.word	0x20018184

0802ae88 <__errno>:
 802ae88:	4b01      	ldr	r3, [pc, #4]	@ (802ae90 <__errno+0x8>)
 802ae8a:	6818      	ldr	r0, [r3, #0]
 802ae8c:	4770      	bx	lr
 802ae8e:	bf00      	nop
 802ae90:	20000254 	.word	0x20000254

0802ae94 <strcpy>:
 802ae94:	4603      	mov	r3, r0
 802ae96:	f811 2b01 	ldrb.w	r2, [r1], #1
 802ae9a:	f803 2b01 	strb.w	r2, [r3], #1
 802ae9e:	2a00      	cmp	r2, #0
 802aea0:	d1f9      	bne.n	802ae96 <strcpy+0x2>
 802aea2:	4770      	bx	lr

0802aea4 <__libc_init_array>:
 802aea4:	b570      	push	{r4, r5, r6, lr}
 802aea6:	4d0d      	ldr	r5, [pc, #52]	@ (802aedc <__libc_init_array+0x38>)
 802aea8:	4c0d      	ldr	r4, [pc, #52]	@ (802aee0 <__libc_init_array+0x3c>)
 802aeaa:	1b64      	subs	r4, r4, r5
 802aeac:	10a4      	asrs	r4, r4, #2
 802aeae:	2600      	movs	r6, #0
 802aeb0:	42a6      	cmp	r6, r4
 802aeb2:	d109      	bne.n	802aec8 <__libc_init_array+0x24>
 802aeb4:	4d0b      	ldr	r5, [pc, #44]	@ (802aee4 <__libc_init_array+0x40>)
 802aeb6:	4c0c      	ldr	r4, [pc, #48]	@ (802aee8 <__libc_init_array+0x44>)
 802aeb8:	f007 ff60 	bl	8032d7c <_init>
 802aebc:	1b64      	subs	r4, r4, r5
 802aebe:	10a4      	asrs	r4, r4, #2
 802aec0:	2600      	movs	r6, #0
 802aec2:	42a6      	cmp	r6, r4
 802aec4:	d105      	bne.n	802aed2 <__libc_init_array+0x2e>
 802aec6:	bd70      	pop	{r4, r5, r6, pc}
 802aec8:	f855 3b04 	ldr.w	r3, [r5], #4
 802aecc:	4798      	blx	r3
 802aece:	3601      	adds	r6, #1
 802aed0:	e7ee      	b.n	802aeb0 <__libc_init_array+0xc>
 802aed2:	f855 3b04 	ldr.w	r3, [r5], #4
 802aed6:	4798      	blx	r3
 802aed8:	3601      	adds	r6, #1
 802aeda:	e7f2      	b.n	802aec2 <__libc_init_array+0x1e>
 802aedc:	08038888 	.word	0x08038888
 802aee0:	08038888 	.word	0x08038888
 802aee4:	08038888 	.word	0x08038888
 802aee8:	08038890 	.word	0x08038890

0802aeec <__retarget_lock_init_recursive>:
 802aeec:	4770      	bx	lr

0802aeee <__retarget_lock_close_recursive>:
 802aeee:	4770      	bx	lr

0802aef0 <__retarget_lock_acquire>:
 802aef0:	4770      	bx	lr

0802aef2 <__retarget_lock_acquire_recursive>:
 802aef2:	4770      	bx	lr

0802aef4 <__retarget_lock_release>:
 802aef4:	4770      	bx	lr

0802aef6 <__retarget_lock_release_recursive>:
 802aef6:	4770      	bx	lr

0802aef8 <memcpy>:
 802aef8:	440a      	add	r2, r1
 802aefa:	4291      	cmp	r1, r2
 802aefc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802af00:	d100      	bne.n	802af04 <memcpy+0xc>
 802af02:	4770      	bx	lr
 802af04:	b510      	push	{r4, lr}
 802af06:	f811 4b01 	ldrb.w	r4, [r1], #1
 802af0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802af0e:	4291      	cmp	r1, r2
 802af10:	d1f9      	bne.n	802af06 <memcpy+0xe>
 802af12:	bd10      	pop	{r4, pc}

0802af14 <_wcrtomb_r>:
 802af14:	b5f0      	push	{r4, r5, r6, r7, lr}
 802af16:	4c09      	ldr	r4, [pc, #36]	@ (802af3c <_wcrtomb_r+0x28>)
 802af18:	b085      	sub	sp, #20
 802af1a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 802af1e:	4605      	mov	r5, r0
 802af20:	461e      	mov	r6, r3
 802af22:	b909      	cbnz	r1, 802af28 <_wcrtomb_r+0x14>
 802af24:	460a      	mov	r2, r1
 802af26:	a901      	add	r1, sp, #4
 802af28:	47b8      	blx	r7
 802af2a:	1c43      	adds	r3, r0, #1
 802af2c:	bf01      	itttt	eq
 802af2e:	2300      	moveq	r3, #0
 802af30:	6033      	streq	r3, [r6, #0]
 802af32:	238a      	moveq	r3, #138	@ 0x8a
 802af34:	602b      	streq	r3, [r5, #0]
 802af36:	b005      	add	sp, #20
 802af38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802af3a:	bf00      	nop
 802af3c:	200000e8 	.word	0x200000e8

0802af40 <frexp>:
 802af40:	b570      	push	{r4, r5, r6, lr}
 802af42:	2100      	movs	r1, #0
 802af44:	ec55 4b10 	vmov	r4, r5, d0
 802af48:	6001      	str	r1, [r0, #0]
 802af4a:	4915      	ldr	r1, [pc, #84]	@ (802afa0 <frexp+0x60>)
 802af4c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 802af50:	428a      	cmp	r2, r1
 802af52:	4606      	mov	r6, r0
 802af54:	462b      	mov	r3, r5
 802af56:	d820      	bhi.n	802af9a <frexp+0x5a>
 802af58:	4621      	mov	r1, r4
 802af5a:	4311      	orrs	r1, r2
 802af5c:	d01d      	beq.n	802af9a <frexp+0x5a>
 802af5e:	4911      	ldr	r1, [pc, #68]	@ (802afa4 <frexp+0x64>)
 802af60:	4029      	ands	r1, r5
 802af62:	b961      	cbnz	r1, 802af7e <frexp+0x3e>
 802af64:	4b10      	ldr	r3, [pc, #64]	@ (802afa8 <frexp+0x68>)
 802af66:	2200      	movs	r2, #0
 802af68:	4620      	mov	r0, r4
 802af6a:	4629      	mov	r1, r5
 802af6c:	f7e5 fb5c 	bl	8010628 <__aeabi_dmul>
 802af70:	460b      	mov	r3, r1
 802af72:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 802af76:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 802af7a:	4604      	mov	r4, r0
 802af7c:	6031      	str	r1, [r6, #0]
 802af7e:	6831      	ldr	r1, [r6, #0]
 802af80:	1512      	asrs	r2, r2, #20
 802af82:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802af86:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 802af8a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 802af8e:	4411      	add	r1, r2
 802af90:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 802af94:	6031      	str	r1, [r6, #0]
 802af96:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 802af9a:	ec45 4b10 	vmov	d0, r4, r5
 802af9e:	bd70      	pop	{r4, r5, r6, pc}
 802afa0:	7fefffff 	.word	0x7fefffff
 802afa4:	7ff00000 	.word	0x7ff00000
 802afa8:	43500000 	.word	0x43500000

0802afac <register_fini>:
 802afac:	4b02      	ldr	r3, [pc, #8]	@ (802afb8 <register_fini+0xc>)
 802afae:	b113      	cbz	r3, 802afb6 <register_fini+0xa>
 802afb0:	4802      	ldr	r0, [pc, #8]	@ (802afbc <register_fini+0x10>)
 802afb2:	f000 b810 	b.w	802afd6 <atexit>
 802afb6:	4770      	bx	lr
 802afb8:	00000000 	.word	0x00000000
 802afbc:	0803243d 	.word	0x0803243d

0802afc0 <abort>:
 802afc0:	b508      	push	{r3, lr}
 802afc2:	2006      	movs	r0, #6
 802afc4:	f007 f8a6 	bl	8032114 <raise>
 802afc8:	2001      	movs	r0, #1
 802afca:	f7e7 f8a7 	bl	801211c <_exit>

0802afce <abs>:
 802afce:	2800      	cmp	r0, #0
 802afd0:	bfb8      	it	lt
 802afd2:	4240      	neglt	r0, r0
 802afd4:	4770      	bx	lr

0802afd6 <atexit>:
 802afd6:	2300      	movs	r3, #0
 802afd8:	4601      	mov	r1, r0
 802afda:	461a      	mov	r2, r3
 802afdc:	4618      	mov	r0, r3
 802afde:	f007 bb01 	b.w	80325e4 <__register_exitproc>

0802afe2 <quorem>:
 802afe2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802afe6:	6903      	ldr	r3, [r0, #16]
 802afe8:	690c      	ldr	r4, [r1, #16]
 802afea:	42a3      	cmp	r3, r4
 802afec:	4607      	mov	r7, r0
 802afee:	db7e      	blt.n	802b0ee <quorem+0x10c>
 802aff0:	3c01      	subs	r4, #1
 802aff2:	f101 0814 	add.w	r8, r1, #20
 802aff6:	00a3      	lsls	r3, r4, #2
 802aff8:	f100 0514 	add.w	r5, r0, #20
 802affc:	9300      	str	r3, [sp, #0]
 802affe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802b002:	9301      	str	r3, [sp, #4]
 802b004:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802b008:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802b00c:	3301      	adds	r3, #1
 802b00e:	429a      	cmp	r2, r3
 802b010:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802b014:	fbb2 f6f3 	udiv	r6, r2, r3
 802b018:	d32e      	bcc.n	802b078 <quorem+0x96>
 802b01a:	f04f 0a00 	mov.w	sl, #0
 802b01e:	46c4      	mov	ip, r8
 802b020:	46ae      	mov	lr, r5
 802b022:	46d3      	mov	fp, sl
 802b024:	f85c 3b04 	ldr.w	r3, [ip], #4
 802b028:	b298      	uxth	r0, r3
 802b02a:	fb06 a000 	mla	r0, r6, r0, sl
 802b02e:	0c02      	lsrs	r2, r0, #16
 802b030:	0c1b      	lsrs	r3, r3, #16
 802b032:	fb06 2303 	mla	r3, r6, r3, r2
 802b036:	f8de 2000 	ldr.w	r2, [lr]
 802b03a:	b280      	uxth	r0, r0
 802b03c:	b292      	uxth	r2, r2
 802b03e:	1a12      	subs	r2, r2, r0
 802b040:	445a      	add	r2, fp
 802b042:	f8de 0000 	ldr.w	r0, [lr]
 802b046:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802b04a:	b29b      	uxth	r3, r3
 802b04c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802b050:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802b054:	b292      	uxth	r2, r2
 802b056:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802b05a:	45e1      	cmp	r9, ip
 802b05c:	f84e 2b04 	str.w	r2, [lr], #4
 802b060:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802b064:	d2de      	bcs.n	802b024 <quorem+0x42>
 802b066:	9b00      	ldr	r3, [sp, #0]
 802b068:	58eb      	ldr	r3, [r5, r3]
 802b06a:	b92b      	cbnz	r3, 802b078 <quorem+0x96>
 802b06c:	9b01      	ldr	r3, [sp, #4]
 802b06e:	3b04      	subs	r3, #4
 802b070:	429d      	cmp	r5, r3
 802b072:	461a      	mov	r2, r3
 802b074:	d32f      	bcc.n	802b0d6 <quorem+0xf4>
 802b076:	613c      	str	r4, [r7, #16]
 802b078:	4638      	mov	r0, r7
 802b07a:	f005 fce3 	bl	8030a44 <__mcmp>
 802b07e:	2800      	cmp	r0, #0
 802b080:	db25      	blt.n	802b0ce <quorem+0xec>
 802b082:	4629      	mov	r1, r5
 802b084:	2000      	movs	r0, #0
 802b086:	f858 2b04 	ldr.w	r2, [r8], #4
 802b08a:	f8d1 c000 	ldr.w	ip, [r1]
 802b08e:	fa1f fe82 	uxth.w	lr, r2
 802b092:	fa1f f38c 	uxth.w	r3, ip
 802b096:	eba3 030e 	sub.w	r3, r3, lr
 802b09a:	4403      	add	r3, r0
 802b09c:	0c12      	lsrs	r2, r2, #16
 802b09e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802b0a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802b0a6:	b29b      	uxth	r3, r3
 802b0a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802b0ac:	45c1      	cmp	r9, r8
 802b0ae:	f841 3b04 	str.w	r3, [r1], #4
 802b0b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 802b0b6:	d2e6      	bcs.n	802b086 <quorem+0xa4>
 802b0b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802b0bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802b0c0:	b922      	cbnz	r2, 802b0cc <quorem+0xea>
 802b0c2:	3b04      	subs	r3, #4
 802b0c4:	429d      	cmp	r5, r3
 802b0c6:	461a      	mov	r2, r3
 802b0c8:	d30b      	bcc.n	802b0e2 <quorem+0x100>
 802b0ca:	613c      	str	r4, [r7, #16]
 802b0cc:	3601      	adds	r6, #1
 802b0ce:	4630      	mov	r0, r6
 802b0d0:	b003      	add	sp, #12
 802b0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b0d6:	6812      	ldr	r2, [r2, #0]
 802b0d8:	3b04      	subs	r3, #4
 802b0da:	2a00      	cmp	r2, #0
 802b0dc:	d1cb      	bne.n	802b076 <quorem+0x94>
 802b0de:	3c01      	subs	r4, #1
 802b0e0:	e7c6      	b.n	802b070 <quorem+0x8e>
 802b0e2:	6812      	ldr	r2, [r2, #0]
 802b0e4:	3b04      	subs	r3, #4
 802b0e6:	2a00      	cmp	r2, #0
 802b0e8:	d1ef      	bne.n	802b0ca <quorem+0xe8>
 802b0ea:	3c01      	subs	r4, #1
 802b0ec:	e7ea      	b.n	802b0c4 <quorem+0xe2>
 802b0ee:	2000      	movs	r0, #0
 802b0f0:	e7ee      	b.n	802b0d0 <quorem+0xee>
 802b0f2:	0000      	movs	r0, r0
 802b0f4:	0000      	movs	r0, r0
	...

0802b0f8 <_dtoa_r>:
 802b0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b0fc:	b099      	sub	sp, #100	@ 0x64
 802b0fe:	ed8d 0b02 	vstr	d0, [sp, #8]
 802b102:	9109      	str	r1, [sp, #36]	@ 0x24
 802b104:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 802b106:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802b108:	920e      	str	r2, [sp, #56]	@ 0x38
 802b10a:	ec55 4b10 	vmov	r4, r5, d0
 802b10e:	4683      	mov	fp, r0
 802b110:	9313      	str	r3, [sp, #76]	@ 0x4c
 802b112:	b149      	cbz	r1, 802b128 <_dtoa_r+0x30>
 802b114:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802b116:	604a      	str	r2, [r1, #4]
 802b118:	2301      	movs	r3, #1
 802b11a:	4093      	lsls	r3, r2
 802b11c:	608b      	str	r3, [r1, #8]
 802b11e:	f005 fa40 	bl	80305a2 <_Bfree>
 802b122:	2300      	movs	r3, #0
 802b124:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 802b128:	1e2b      	subs	r3, r5, #0
 802b12a:	bfb9      	ittee	lt
 802b12c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802b130:	9303      	strlt	r3, [sp, #12]
 802b132:	2300      	movge	r3, #0
 802b134:	6033      	strge	r3, [r6, #0]
 802b136:	9f03      	ldr	r7, [sp, #12]
 802b138:	4b97      	ldr	r3, [pc, #604]	@ (802b398 <_dtoa_r+0x2a0>)
 802b13a:	bfbc      	itt	lt
 802b13c:	2201      	movlt	r2, #1
 802b13e:	6032      	strlt	r2, [r6, #0]
 802b140:	43bb      	bics	r3, r7
 802b142:	d114      	bne.n	802b16e <_dtoa_r+0x76>
 802b144:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802b146:	f242 730f 	movw	r3, #9999	@ 0x270f
 802b14a:	6013      	str	r3, [r2, #0]
 802b14c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802b150:	4323      	orrs	r3, r4
 802b152:	f000 854c 	beq.w	802bbee <_dtoa_r+0xaf6>
 802b156:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802b158:	f8df a254 	ldr.w	sl, [pc, #596]	@ 802b3b0 <_dtoa_r+0x2b8>
 802b15c:	b11b      	cbz	r3, 802b166 <_dtoa_r+0x6e>
 802b15e:	f10a 0303 	add.w	r3, sl, #3
 802b162:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802b164:	6013      	str	r3, [r2, #0]
 802b166:	4650      	mov	r0, sl
 802b168:	b019      	add	sp, #100	@ 0x64
 802b16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b16e:	ed9d 7b02 	vldr	d7, [sp, #8]
 802b172:	2200      	movs	r2, #0
 802b174:	ec51 0b17 	vmov	r0, r1, d7
 802b178:	2300      	movs	r3, #0
 802b17a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 802b17e:	f7e5 fcbb 	bl	8010af8 <__aeabi_dcmpeq>
 802b182:	4680      	mov	r8, r0
 802b184:	b150      	cbz	r0, 802b19c <_dtoa_r+0xa4>
 802b186:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802b188:	2301      	movs	r3, #1
 802b18a:	6013      	str	r3, [r2, #0]
 802b18c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802b18e:	b113      	cbz	r3, 802b196 <_dtoa_r+0x9e>
 802b190:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802b192:	4b82      	ldr	r3, [pc, #520]	@ (802b39c <_dtoa_r+0x2a4>)
 802b194:	6013      	str	r3, [r2, #0]
 802b196:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 802b3b4 <_dtoa_r+0x2bc>
 802b19a:	e7e4      	b.n	802b166 <_dtoa_r+0x6e>
 802b19c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802b1a0:	aa16      	add	r2, sp, #88	@ 0x58
 802b1a2:	a917      	add	r1, sp, #92	@ 0x5c
 802b1a4:	4658      	mov	r0, fp
 802b1a6:	f005 fd6d 	bl	8030c84 <__d2b>
 802b1aa:	f3c7 560a 	ubfx	r6, r7, #20, #11
 802b1ae:	4681      	mov	r9, r0
 802b1b0:	2e00      	cmp	r6, #0
 802b1b2:	d077      	beq.n	802b2a4 <_dtoa_r+0x1ac>
 802b1b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b1b6:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 802b1ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802b1be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802b1c2:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 802b1c6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802b1ca:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 802b1ce:	4619      	mov	r1, r3
 802b1d0:	2200      	movs	r2, #0
 802b1d2:	4b73      	ldr	r3, [pc, #460]	@ (802b3a0 <_dtoa_r+0x2a8>)
 802b1d4:	f7e5 f870 	bl	80102b8 <__aeabi_dsub>
 802b1d8:	a369      	add	r3, pc, #420	@ (adr r3, 802b380 <_dtoa_r+0x288>)
 802b1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b1de:	f7e5 fa23 	bl	8010628 <__aeabi_dmul>
 802b1e2:	a369      	add	r3, pc, #420	@ (adr r3, 802b388 <_dtoa_r+0x290>)
 802b1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b1e8:	f7e5 f868 	bl	80102bc <__adddf3>
 802b1ec:	4604      	mov	r4, r0
 802b1ee:	4630      	mov	r0, r6
 802b1f0:	460d      	mov	r5, r1
 802b1f2:	f7e5 f9af 	bl	8010554 <__aeabi_i2d>
 802b1f6:	a366      	add	r3, pc, #408	@ (adr r3, 802b390 <_dtoa_r+0x298>)
 802b1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b1fc:	f7e5 fa14 	bl	8010628 <__aeabi_dmul>
 802b200:	4602      	mov	r2, r0
 802b202:	460b      	mov	r3, r1
 802b204:	4620      	mov	r0, r4
 802b206:	4629      	mov	r1, r5
 802b208:	f7e5 f858 	bl	80102bc <__adddf3>
 802b20c:	4604      	mov	r4, r0
 802b20e:	460d      	mov	r5, r1
 802b210:	f7e5 fcba 	bl	8010b88 <__aeabi_d2iz>
 802b214:	2200      	movs	r2, #0
 802b216:	4607      	mov	r7, r0
 802b218:	2300      	movs	r3, #0
 802b21a:	4620      	mov	r0, r4
 802b21c:	4629      	mov	r1, r5
 802b21e:	f7e5 fc75 	bl	8010b0c <__aeabi_dcmplt>
 802b222:	b140      	cbz	r0, 802b236 <_dtoa_r+0x13e>
 802b224:	4638      	mov	r0, r7
 802b226:	f7e5 f995 	bl	8010554 <__aeabi_i2d>
 802b22a:	4622      	mov	r2, r4
 802b22c:	462b      	mov	r3, r5
 802b22e:	f7e5 fc63 	bl	8010af8 <__aeabi_dcmpeq>
 802b232:	b900      	cbnz	r0, 802b236 <_dtoa_r+0x13e>
 802b234:	3f01      	subs	r7, #1
 802b236:	2f16      	cmp	r7, #22
 802b238:	d851      	bhi.n	802b2de <_dtoa_r+0x1e6>
 802b23a:	4b5a      	ldr	r3, [pc, #360]	@ (802b3a4 <_dtoa_r+0x2ac>)
 802b23c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802b240:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b244:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802b248:	f7e5 fc60 	bl	8010b0c <__aeabi_dcmplt>
 802b24c:	2800      	cmp	r0, #0
 802b24e:	d048      	beq.n	802b2e2 <_dtoa_r+0x1ea>
 802b250:	3f01      	subs	r7, #1
 802b252:	2300      	movs	r3, #0
 802b254:	9312      	str	r3, [sp, #72]	@ 0x48
 802b256:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b258:	1b9b      	subs	r3, r3, r6
 802b25a:	1e5a      	subs	r2, r3, #1
 802b25c:	bf44      	itt	mi
 802b25e:	f1c3 0801 	rsbmi	r8, r3, #1
 802b262:	2300      	movmi	r3, #0
 802b264:	9208      	str	r2, [sp, #32]
 802b266:	bf54      	ite	pl
 802b268:	f04f 0800 	movpl.w	r8, #0
 802b26c:	9308      	strmi	r3, [sp, #32]
 802b26e:	2f00      	cmp	r7, #0
 802b270:	db39      	blt.n	802b2e6 <_dtoa_r+0x1ee>
 802b272:	9b08      	ldr	r3, [sp, #32]
 802b274:	970f      	str	r7, [sp, #60]	@ 0x3c
 802b276:	443b      	add	r3, r7
 802b278:	9308      	str	r3, [sp, #32]
 802b27a:	2300      	movs	r3, #0
 802b27c:	930a      	str	r3, [sp, #40]	@ 0x28
 802b27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b280:	2b09      	cmp	r3, #9
 802b282:	d865      	bhi.n	802b350 <_dtoa_r+0x258>
 802b284:	2b05      	cmp	r3, #5
 802b286:	bfc4      	itt	gt
 802b288:	3b04      	subgt	r3, #4
 802b28a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802b28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b28e:	f1a3 0302 	sub.w	r3, r3, #2
 802b292:	bfcc      	ite	gt
 802b294:	2400      	movgt	r4, #0
 802b296:	2401      	movle	r4, #1
 802b298:	2b03      	cmp	r3, #3
 802b29a:	d864      	bhi.n	802b366 <_dtoa_r+0x26e>
 802b29c:	e8df f003 	tbb	[pc, r3]
 802b2a0:	5635372a 	.word	0x5635372a
 802b2a4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 802b2a8:	441e      	add	r6, r3
 802b2aa:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 802b2ae:	2b20      	cmp	r3, #32
 802b2b0:	bfc1      	itttt	gt
 802b2b2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 802b2b6:	409f      	lslgt	r7, r3
 802b2b8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802b2bc:	fa24 f303 	lsrgt.w	r3, r4, r3
 802b2c0:	bfd6      	itet	le
 802b2c2:	f1c3 0320 	rsble	r3, r3, #32
 802b2c6:	ea47 0003 	orrgt.w	r0, r7, r3
 802b2ca:	fa04 f003 	lslle.w	r0, r4, r3
 802b2ce:	f7e5 f931 	bl	8010534 <__aeabi_ui2d>
 802b2d2:	2201      	movs	r2, #1
 802b2d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802b2d8:	3e01      	subs	r6, #1
 802b2da:	9214      	str	r2, [sp, #80]	@ 0x50
 802b2dc:	e777      	b.n	802b1ce <_dtoa_r+0xd6>
 802b2de:	2301      	movs	r3, #1
 802b2e0:	e7b8      	b.n	802b254 <_dtoa_r+0x15c>
 802b2e2:	9012      	str	r0, [sp, #72]	@ 0x48
 802b2e4:	e7b7      	b.n	802b256 <_dtoa_r+0x15e>
 802b2e6:	427b      	negs	r3, r7
 802b2e8:	930a      	str	r3, [sp, #40]	@ 0x28
 802b2ea:	2300      	movs	r3, #0
 802b2ec:	eba8 0807 	sub.w	r8, r8, r7
 802b2f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b2f2:	e7c4      	b.n	802b27e <_dtoa_r+0x186>
 802b2f4:	2300      	movs	r3, #0
 802b2f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 802b2f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b2fa:	2b00      	cmp	r3, #0
 802b2fc:	dc36      	bgt.n	802b36c <_dtoa_r+0x274>
 802b2fe:	2301      	movs	r3, #1
 802b300:	9300      	str	r3, [sp, #0]
 802b302:	9307      	str	r3, [sp, #28]
 802b304:	461a      	mov	r2, r3
 802b306:	920e      	str	r2, [sp, #56]	@ 0x38
 802b308:	e00b      	b.n	802b322 <_dtoa_r+0x22a>
 802b30a:	2301      	movs	r3, #1
 802b30c:	e7f3      	b.n	802b2f6 <_dtoa_r+0x1fe>
 802b30e:	2300      	movs	r3, #0
 802b310:	930b      	str	r3, [sp, #44]	@ 0x2c
 802b312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b314:	18fb      	adds	r3, r7, r3
 802b316:	9300      	str	r3, [sp, #0]
 802b318:	3301      	adds	r3, #1
 802b31a:	2b01      	cmp	r3, #1
 802b31c:	9307      	str	r3, [sp, #28]
 802b31e:	bfb8      	it	lt
 802b320:	2301      	movlt	r3, #1
 802b322:	2100      	movs	r1, #0
 802b324:	2204      	movs	r2, #4
 802b326:	f102 0014 	add.w	r0, r2, #20
 802b32a:	4298      	cmp	r0, r3
 802b32c:	d922      	bls.n	802b374 <_dtoa_r+0x27c>
 802b32e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 802b332:	4658      	mov	r0, fp
 802b334:	f005 f910 	bl	8030558 <_Balloc>
 802b338:	4682      	mov	sl, r0
 802b33a:	2800      	cmp	r0, #0
 802b33c:	d13c      	bne.n	802b3b8 <_dtoa_r+0x2c0>
 802b33e:	4b1a      	ldr	r3, [pc, #104]	@ (802b3a8 <_dtoa_r+0x2b0>)
 802b340:	4602      	mov	r2, r0
 802b342:	f240 11af 	movw	r1, #431	@ 0x1af
 802b346:	4819      	ldr	r0, [pc, #100]	@ (802b3ac <_dtoa_r+0x2b4>)
 802b348:	f7fb fe48 	bl	8026fdc <__assert_func>
 802b34c:	2301      	movs	r3, #1
 802b34e:	e7df      	b.n	802b310 <_dtoa_r+0x218>
 802b350:	2401      	movs	r4, #1
 802b352:	2300      	movs	r3, #0
 802b354:	9309      	str	r3, [sp, #36]	@ 0x24
 802b356:	940b      	str	r4, [sp, #44]	@ 0x2c
 802b358:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802b35c:	9300      	str	r3, [sp, #0]
 802b35e:	9307      	str	r3, [sp, #28]
 802b360:	2200      	movs	r2, #0
 802b362:	2312      	movs	r3, #18
 802b364:	e7cf      	b.n	802b306 <_dtoa_r+0x20e>
 802b366:	2301      	movs	r3, #1
 802b368:	930b      	str	r3, [sp, #44]	@ 0x2c
 802b36a:	e7f5      	b.n	802b358 <_dtoa_r+0x260>
 802b36c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b36e:	9300      	str	r3, [sp, #0]
 802b370:	9307      	str	r3, [sp, #28]
 802b372:	e7d6      	b.n	802b322 <_dtoa_r+0x22a>
 802b374:	3101      	adds	r1, #1
 802b376:	0052      	lsls	r2, r2, #1
 802b378:	e7d5      	b.n	802b326 <_dtoa_r+0x22e>
 802b37a:	bf00      	nop
 802b37c:	f3af 8000 	nop.w
 802b380:	636f4361 	.word	0x636f4361
 802b384:	3fd287a7 	.word	0x3fd287a7
 802b388:	8b60c8b3 	.word	0x8b60c8b3
 802b38c:	3fc68a28 	.word	0x3fc68a28
 802b390:	509f79fb 	.word	0x509f79fb
 802b394:	3fd34413 	.word	0x3fd34413
 802b398:	7ff00000 	.word	0x7ff00000
 802b39c:	080380ee 	.word	0x080380ee
 802b3a0:	3ff80000 	.word	0x3ff80000
 802b3a4:	08038708 	.word	0x08038708
 802b3a8:	08038586 	.word	0x08038586
 802b3ac:	08038597 	.word	0x08038597
 802b3b0:	08038582 	.word	0x08038582
 802b3b4:	080380ed 	.word	0x080380ed
 802b3b8:	9b07      	ldr	r3, [sp, #28]
 802b3ba:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 802b3be:	2b0e      	cmp	r3, #14
 802b3c0:	f200 80a4 	bhi.w	802b50c <_dtoa_r+0x414>
 802b3c4:	2c00      	cmp	r4, #0
 802b3c6:	f000 80a1 	beq.w	802b50c <_dtoa_r+0x414>
 802b3ca:	2f00      	cmp	r7, #0
 802b3cc:	dd33      	ble.n	802b436 <_dtoa_r+0x33e>
 802b3ce:	4bae      	ldr	r3, [pc, #696]	@ (802b688 <_dtoa_r+0x590>)
 802b3d0:	f007 020f 	and.w	r2, r7, #15
 802b3d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802b3d8:	ed93 7b00 	vldr	d7, [r3]
 802b3dc:	05f8      	lsls	r0, r7, #23
 802b3de:	ed8d 7b04 	vstr	d7, [sp, #16]
 802b3e2:	ea4f 1427 	mov.w	r4, r7, asr #4
 802b3e6:	d516      	bpl.n	802b416 <_dtoa_r+0x31e>
 802b3e8:	4ba8      	ldr	r3, [pc, #672]	@ (802b68c <_dtoa_r+0x594>)
 802b3ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802b3ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802b3f2:	f7e5 fa43 	bl	801087c <__aeabi_ddiv>
 802b3f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802b3fa:	f004 040f 	and.w	r4, r4, #15
 802b3fe:	2603      	movs	r6, #3
 802b400:	4da2      	ldr	r5, [pc, #648]	@ (802b68c <_dtoa_r+0x594>)
 802b402:	b954      	cbnz	r4, 802b41a <_dtoa_r+0x322>
 802b404:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802b408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b40c:	f7e5 fa36 	bl	801087c <__aeabi_ddiv>
 802b410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802b414:	e028      	b.n	802b468 <_dtoa_r+0x370>
 802b416:	2602      	movs	r6, #2
 802b418:	e7f2      	b.n	802b400 <_dtoa_r+0x308>
 802b41a:	07e1      	lsls	r1, r4, #31
 802b41c:	d508      	bpl.n	802b430 <_dtoa_r+0x338>
 802b41e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802b422:	e9d5 2300 	ldrd	r2, r3, [r5]
 802b426:	f7e5 f8ff 	bl	8010628 <__aeabi_dmul>
 802b42a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802b42e:	3601      	adds	r6, #1
 802b430:	1064      	asrs	r4, r4, #1
 802b432:	3508      	adds	r5, #8
 802b434:	e7e5      	b.n	802b402 <_dtoa_r+0x30a>
 802b436:	f000 80d2 	beq.w	802b5de <_dtoa_r+0x4e6>
 802b43a:	427c      	negs	r4, r7
 802b43c:	4b92      	ldr	r3, [pc, #584]	@ (802b688 <_dtoa_r+0x590>)
 802b43e:	4d93      	ldr	r5, [pc, #588]	@ (802b68c <_dtoa_r+0x594>)
 802b440:	f004 020f 	and.w	r2, r4, #15
 802b444:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802b448:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b44c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802b450:	f7e5 f8ea 	bl	8010628 <__aeabi_dmul>
 802b454:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802b458:	1124      	asrs	r4, r4, #4
 802b45a:	2300      	movs	r3, #0
 802b45c:	2602      	movs	r6, #2
 802b45e:	2c00      	cmp	r4, #0
 802b460:	f040 80b2 	bne.w	802b5c8 <_dtoa_r+0x4d0>
 802b464:	2b00      	cmp	r3, #0
 802b466:	d1d3      	bne.n	802b410 <_dtoa_r+0x318>
 802b468:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802b46a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802b46e:	2b00      	cmp	r3, #0
 802b470:	f000 80b7 	beq.w	802b5e2 <_dtoa_r+0x4ea>
 802b474:	4b86      	ldr	r3, [pc, #536]	@ (802b690 <_dtoa_r+0x598>)
 802b476:	2200      	movs	r2, #0
 802b478:	4620      	mov	r0, r4
 802b47a:	4629      	mov	r1, r5
 802b47c:	f7e5 fb46 	bl	8010b0c <__aeabi_dcmplt>
 802b480:	2800      	cmp	r0, #0
 802b482:	f000 80ae 	beq.w	802b5e2 <_dtoa_r+0x4ea>
 802b486:	9b07      	ldr	r3, [sp, #28]
 802b488:	2b00      	cmp	r3, #0
 802b48a:	f000 80aa 	beq.w	802b5e2 <_dtoa_r+0x4ea>
 802b48e:	9b00      	ldr	r3, [sp, #0]
 802b490:	2b00      	cmp	r3, #0
 802b492:	dd37      	ble.n	802b504 <_dtoa_r+0x40c>
 802b494:	1e7b      	subs	r3, r7, #1
 802b496:	9304      	str	r3, [sp, #16]
 802b498:	4620      	mov	r0, r4
 802b49a:	4b7e      	ldr	r3, [pc, #504]	@ (802b694 <_dtoa_r+0x59c>)
 802b49c:	2200      	movs	r2, #0
 802b49e:	4629      	mov	r1, r5
 802b4a0:	f7e5 f8c2 	bl	8010628 <__aeabi_dmul>
 802b4a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802b4a8:	9c00      	ldr	r4, [sp, #0]
 802b4aa:	3601      	adds	r6, #1
 802b4ac:	4630      	mov	r0, r6
 802b4ae:	f7e5 f851 	bl	8010554 <__aeabi_i2d>
 802b4b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b4b6:	f7e5 f8b7 	bl	8010628 <__aeabi_dmul>
 802b4ba:	4b77      	ldr	r3, [pc, #476]	@ (802b698 <_dtoa_r+0x5a0>)
 802b4bc:	2200      	movs	r2, #0
 802b4be:	f7e4 fefd 	bl	80102bc <__adddf3>
 802b4c2:	4605      	mov	r5, r0
 802b4c4:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 802b4c8:	2c00      	cmp	r4, #0
 802b4ca:	f040 808d 	bne.w	802b5e8 <_dtoa_r+0x4f0>
 802b4ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b4d2:	4b72      	ldr	r3, [pc, #456]	@ (802b69c <_dtoa_r+0x5a4>)
 802b4d4:	2200      	movs	r2, #0
 802b4d6:	f7e4 feef 	bl	80102b8 <__aeabi_dsub>
 802b4da:	4602      	mov	r2, r0
 802b4dc:	460b      	mov	r3, r1
 802b4de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802b4e2:	462a      	mov	r2, r5
 802b4e4:	4633      	mov	r3, r6
 802b4e6:	f7e5 fb2f 	bl	8010b48 <__aeabi_dcmpgt>
 802b4ea:	2800      	cmp	r0, #0
 802b4ec:	f040 828c 	bne.w	802ba08 <_dtoa_r+0x910>
 802b4f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b4f4:	462a      	mov	r2, r5
 802b4f6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 802b4fa:	f7e5 fb07 	bl	8010b0c <__aeabi_dcmplt>
 802b4fe:	2800      	cmp	r0, #0
 802b500:	f040 8129 	bne.w	802b756 <_dtoa_r+0x65e>
 802b504:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 802b508:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802b50c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802b50e:	2b00      	cmp	r3, #0
 802b510:	f2c0 815b 	blt.w	802b7ca <_dtoa_r+0x6d2>
 802b514:	2f0e      	cmp	r7, #14
 802b516:	f300 8158 	bgt.w	802b7ca <_dtoa_r+0x6d2>
 802b51a:	4b5b      	ldr	r3, [pc, #364]	@ (802b688 <_dtoa_r+0x590>)
 802b51c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802b520:	ed93 7b00 	vldr	d7, [r3]
 802b524:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b526:	2b00      	cmp	r3, #0
 802b528:	ed8d 7b00 	vstr	d7, [sp]
 802b52c:	da03      	bge.n	802b536 <_dtoa_r+0x43e>
 802b52e:	9b07      	ldr	r3, [sp, #28]
 802b530:	2b00      	cmp	r3, #0
 802b532:	f340 8102 	ble.w	802b73a <_dtoa_r+0x642>
 802b536:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802b53a:	4656      	mov	r6, sl
 802b53c:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b540:	4620      	mov	r0, r4
 802b542:	4629      	mov	r1, r5
 802b544:	f7e5 f99a 	bl	801087c <__aeabi_ddiv>
 802b548:	f7e5 fb1e 	bl	8010b88 <__aeabi_d2iz>
 802b54c:	4680      	mov	r8, r0
 802b54e:	f7e5 f801 	bl	8010554 <__aeabi_i2d>
 802b552:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b556:	f7e5 f867 	bl	8010628 <__aeabi_dmul>
 802b55a:	4602      	mov	r2, r0
 802b55c:	460b      	mov	r3, r1
 802b55e:	4620      	mov	r0, r4
 802b560:	4629      	mov	r1, r5
 802b562:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 802b566:	f7e4 fea7 	bl	80102b8 <__aeabi_dsub>
 802b56a:	f806 4b01 	strb.w	r4, [r6], #1
 802b56e:	9d07      	ldr	r5, [sp, #28]
 802b570:	eba6 040a 	sub.w	r4, r6, sl
 802b574:	42a5      	cmp	r5, r4
 802b576:	4602      	mov	r2, r0
 802b578:	460b      	mov	r3, r1
 802b57a:	f040 8118 	bne.w	802b7ae <_dtoa_r+0x6b6>
 802b57e:	f7e4 fe9d 	bl	80102bc <__adddf3>
 802b582:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b586:	4604      	mov	r4, r0
 802b588:	460d      	mov	r5, r1
 802b58a:	f7e5 fadd 	bl	8010b48 <__aeabi_dcmpgt>
 802b58e:	2800      	cmp	r0, #0
 802b590:	f040 80fa 	bne.w	802b788 <_dtoa_r+0x690>
 802b594:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b598:	4620      	mov	r0, r4
 802b59a:	4629      	mov	r1, r5
 802b59c:	f7e5 faac 	bl	8010af8 <__aeabi_dcmpeq>
 802b5a0:	b118      	cbz	r0, 802b5aa <_dtoa_r+0x4b2>
 802b5a2:	f018 0f01 	tst.w	r8, #1
 802b5a6:	f040 80ef 	bne.w	802b788 <_dtoa_r+0x690>
 802b5aa:	4649      	mov	r1, r9
 802b5ac:	4658      	mov	r0, fp
 802b5ae:	f004 fff8 	bl	80305a2 <_Bfree>
 802b5b2:	2300      	movs	r3, #0
 802b5b4:	7033      	strb	r3, [r6, #0]
 802b5b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802b5b8:	3701      	adds	r7, #1
 802b5ba:	601f      	str	r7, [r3, #0]
 802b5bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802b5be:	2b00      	cmp	r3, #0
 802b5c0:	f43f add1 	beq.w	802b166 <_dtoa_r+0x6e>
 802b5c4:	601e      	str	r6, [r3, #0]
 802b5c6:	e5ce      	b.n	802b166 <_dtoa_r+0x6e>
 802b5c8:	07e2      	lsls	r2, r4, #31
 802b5ca:	d505      	bpl.n	802b5d8 <_dtoa_r+0x4e0>
 802b5cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 802b5d0:	f7e5 f82a 	bl	8010628 <__aeabi_dmul>
 802b5d4:	3601      	adds	r6, #1
 802b5d6:	2301      	movs	r3, #1
 802b5d8:	1064      	asrs	r4, r4, #1
 802b5da:	3508      	adds	r5, #8
 802b5dc:	e73f      	b.n	802b45e <_dtoa_r+0x366>
 802b5de:	2602      	movs	r6, #2
 802b5e0:	e742      	b.n	802b468 <_dtoa_r+0x370>
 802b5e2:	9c07      	ldr	r4, [sp, #28]
 802b5e4:	9704      	str	r7, [sp, #16]
 802b5e6:	e761      	b.n	802b4ac <_dtoa_r+0x3b4>
 802b5e8:	4b27      	ldr	r3, [pc, #156]	@ (802b688 <_dtoa_r+0x590>)
 802b5ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802b5ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802b5f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802b5f4:	4454      	add	r4, sl
 802b5f6:	2900      	cmp	r1, #0
 802b5f8:	d054      	beq.n	802b6a4 <_dtoa_r+0x5ac>
 802b5fa:	4929      	ldr	r1, [pc, #164]	@ (802b6a0 <_dtoa_r+0x5a8>)
 802b5fc:	2000      	movs	r0, #0
 802b5fe:	f7e5 f93d 	bl	801087c <__aeabi_ddiv>
 802b602:	4633      	mov	r3, r6
 802b604:	462a      	mov	r2, r5
 802b606:	f7e4 fe57 	bl	80102b8 <__aeabi_dsub>
 802b60a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802b60e:	4656      	mov	r6, sl
 802b610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b614:	f7e5 fab8 	bl	8010b88 <__aeabi_d2iz>
 802b618:	4605      	mov	r5, r0
 802b61a:	f7e4 ff9b 	bl	8010554 <__aeabi_i2d>
 802b61e:	4602      	mov	r2, r0
 802b620:	460b      	mov	r3, r1
 802b622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b626:	f7e4 fe47 	bl	80102b8 <__aeabi_dsub>
 802b62a:	3530      	adds	r5, #48	@ 0x30
 802b62c:	4602      	mov	r2, r0
 802b62e:	460b      	mov	r3, r1
 802b630:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802b634:	f806 5b01 	strb.w	r5, [r6], #1
 802b638:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802b63c:	f7e5 fa66 	bl	8010b0c <__aeabi_dcmplt>
 802b640:	2800      	cmp	r0, #0
 802b642:	d172      	bne.n	802b72a <_dtoa_r+0x632>
 802b644:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b648:	4911      	ldr	r1, [pc, #68]	@ (802b690 <_dtoa_r+0x598>)
 802b64a:	2000      	movs	r0, #0
 802b64c:	f7e4 fe34 	bl	80102b8 <__aeabi_dsub>
 802b650:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802b654:	f7e5 fa5a 	bl	8010b0c <__aeabi_dcmplt>
 802b658:	2800      	cmp	r0, #0
 802b65a:	f040 8096 	bne.w	802b78a <_dtoa_r+0x692>
 802b65e:	42a6      	cmp	r6, r4
 802b660:	f43f af50 	beq.w	802b504 <_dtoa_r+0x40c>
 802b664:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802b668:	4b0a      	ldr	r3, [pc, #40]	@ (802b694 <_dtoa_r+0x59c>)
 802b66a:	2200      	movs	r2, #0
 802b66c:	f7e4 ffdc 	bl	8010628 <__aeabi_dmul>
 802b670:	4b08      	ldr	r3, [pc, #32]	@ (802b694 <_dtoa_r+0x59c>)
 802b672:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802b676:	2200      	movs	r2, #0
 802b678:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b67c:	f7e4 ffd4 	bl	8010628 <__aeabi_dmul>
 802b680:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802b684:	e7c4      	b.n	802b610 <_dtoa_r+0x518>
 802b686:	bf00      	nop
 802b688:	08038708 	.word	0x08038708
 802b68c:	080386e0 	.word	0x080386e0
 802b690:	3ff00000 	.word	0x3ff00000
 802b694:	40240000 	.word	0x40240000
 802b698:	401c0000 	.word	0x401c0000
 802b69c:	40140000 	.word	0x40140000
 802b6a0:	3fe00000 	.word	0x3fe00000
 802b6a4:	4631      	mov	r1, r6
 802b6a6:	4628      	mov	r0, r5
 802b6a8:	f7e4 ffbe 	bl	8010628 <__aeabi_dmul>
 802b6ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802b6b0:	9415      	str	r4, [sp, #84]	@ 0x54
 802b6b2:	4656      	mov	r6, sl
 802b6b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b6b8:	f7e5 fa66 	bl	8010b88 <__aeabi_d2iz>
 802b6bc:	4605      	mov	r5, r0
 802b6be:	f7e4 ff49 	bl	8010554 <__aeabi_i2d>
 802b6c2:	4602      	mov	r2, r0
 802b6c4:	460b      	mov	r3, r1
 802b6c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b6ca:	f7e4 fdf5 	bl	80102b8 <__aeabi_dsub>
 802b6ce:	3530      	adds	r5, #48	@ 0x30
 802b6d0:	f806 5b01 	strb.w	r5, [r6], #1
 802b6d4:	4602      	mov	r2, r0
 802b6d6:	460b      	mov	r3, r1
 802b6d8:	42a6      	cmp	r6, r4
 802b6da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802b6de:	f04f 0200 	mov.w	r2, #0
 802b6e2:	d124      	bne.n	802b72e <_dtoa_r+0x636>
 802b6e4:	4bac      	ldr	r3, [pc, #688]	@ (802b998 <_dtoa_r+0x8a0>)
 802b6e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802b6ea:	f7e4 fde7 	bl	80102bc <__adddf3>
 802b6ee:	4602      	mov	r2, r0
 802b6f0:	460b      	mov	r3, r1
 802b6f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b6f6:	f7e5 fa27 	bl	8010b48 <__aeabi_dcmpgt>
 802b6fa:	2800      	cmp	r0, #0
 802b6fc:	d145      	bne.n	802b78a <_dtoa_r+0x692>
 802b6fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802b702:	49a5      	ldr	r1, [pc, #660]	@ (802b998 <_dtoa_r+0x8a0>)
 802b704:	2000      	movs	r0, #0
 802b706:	f7e4 fdd7 	bl	80102b8 <__aeabi_dsub>
 802b70a:	4602      	mov	r2, r0
 802b70c:	460b      	mov	r3, r1
 802b70e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b712:	f7e5 f9fb 	bl	8010b0c <__aeabi_dcmplt>
 802b716:	2800      	cmp	r0, #0
 802b718:	f43f aef4 	beq.w	802b504 <_dtoa_r+0x40c>
 802b71c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 802b71e:	1e73      	subs	r3, r6, #1
 802b720:	9315      	str	r3, [sp, #84]	@ 0x54
 802b722:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802b726:	2b30      	cmp	r3, #48	@ 0x30
 802b728:	d0f8      	beq.n	802b71c <_dtoa_r+0x624>
 802b72a:	9f04      	ldr	r7, [sp, #16]
 802b72c:	e73d      	b.n	802b5aa <_dtoa_r+0x4b2>
 802b72e:	4b9b      	ldr	r3, [pc, #620]	@ (802b99c <_dtoa_r+0x8a4>)
 802b730:	f7e4 ff7a 	bl	8010628 <__aeabi_dmul>
 802b734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802b738:	e7bc      	b.n	802b6b4 <_dtoa_r+0x5bc>
 802b73a:	d10c      	bne.n	802b756 <_dtoa_r+0x65e>
 802b73c:	4b98      	ldr	r3, [pc, #608]	@ (802b9a0 <_dtoa_r+0x8a8>)
 802b73e:	2200      	movs	r2, #0
 802b740:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b744:	f7e4 ff70 	bl	8010628 <__aeabi_dmul>
 802b748:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b74c:	f7e5 f9f2 	bl	8010b34 <__aeabi_dcmpge>
 802b750:	2800      	cmp	r0, #0
 802b752:	f000 8157 	beq.w	802ba04 <_dtoa_r+0x90c>
 802b756:	2400      	movs	r4, #0
 802b758:	4625      	mov	r5, r4
 802b75a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b75c:	43db      	mvns	r3, r3
 802b75e:	9304      	str	r3, [sp, #16]
 802b760:	4656      	mov	r6, sl
 802b762:	2700      	movs	r7, #0
 802b764:	4621      	mov	r1, r4
 802b766:	4658      	mov	r0, fp
 802b768:	f004 ff1b 	bl	80305a2 <_Bfree>
 802b76c:	2d00      	cmp	r5, #0
 802b76e:	d0dc      	beq.n	802b72a <_dtoa_r+0x632>
 802b770:	b12f      	cbz	r7, 802b77e <_dtoa_r+0x686>
 802b772:	42af      	cmp	r7, r5
 802b774:	d003      	beq.n	802b77e <_dtoa_r+0x686>
 802b776:	4639      	mov	r1, r7
 802b778:	4658      	mov	r0, fp
 802b77a:	f004 ff12 	bl	80305a2 <_Bfree>
 802b77e:	4629      	mov	r1, r5
 802b780:	4658      	mov	r0, fp
 802b782:	f004 ff0e 	bl	80305a2 <_Bfree>
 802b786:	e7d0      	b.n	802b72a <_dtoa_r+0x632>
 802b788:	9704      	str	r7, [sp, #16]
 802b78a:	4633      	mov	r3, r6
 802b78c:	461e      	mov	r6, r3
 802b78e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802b792:	2a39      	cmp	r2, #57	@ 0x39
 802b794:	d107      	bne.n	802b7a6 <_dtoa_r+0x6ae>
 802b796:	459a      	cmp	sl, r3
 802b798:	d1f8      	bne.n	802b78c <_dtoa_r+0x694>
 802b79a:	9a04      	ldr	r2, [sp, #16]
 802b79c:	3201      	adds	r2, #1
 802b79e:	9204      	str	r2, [sp, #16]
 802b7a0:	2230      	movs	r2, #48	@ 0x30
 802b7a2:	f88a 2000 	strb.w	r2, [sl]
 802b7a6:	781a      	ldrb	r2, [r3, #0]
 802b7a8:	3201      	adds	r2, #1
 802b7aa:	701a      	strb	r2, [r3, #0]
 802b7ac:	e7bd      	b.n	802b72a <_dtoa_r+0x632>
 802b7ae:	4b7b      	ldr	r3, [pc, #492]	@ (802b99c <_dtoa_r+0x8a4>)
 802b7b0:	2200      	movs	r2, #0
 802b7b2:	f7e4 ff39 	bl	8010628 <__aeabi_dmul>
 802b7b6:	2200      	movs	r2, #0
 802b7b8:	2300      	movs	r3, #0
 802b7ba:	4604      	mov	r4, r0
 802b7bc:	460d      	mov	r5, r1
 802b7be:	f7e5 f99b 	bl	8010af8 <__aeabi_dcmpeq>
 802b7c2:	2800      	cmp	r0, #0
 802b7c4:	f43f aeba 	beq.w	802b53c <_dtoa_r+0x444>
 802b7c8:	e6ef      	b.n	802b5aa <_dtoa_r+0x4b2>
 802b7ca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802b7cc:	2a00      	cmp	r2, #0
 802b7ce:	f000 80db 	beq.w	802b988 <_dtoa_r+0x890>
 802b7d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802b7d4:	2a01      	cmp	r2, #1
 802b7d6:	f300 80bf 	bgt.w	802b958 <_dtoa_r+0x860>
 802b7da:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802b7dc:	2a00      	cmp	r2, #0
 802b7de:	f000 80b7 	beq.w	802b950 <_dtoa_r+0x858>
 802b7e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802b7e6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802b7e8:	4646      	mov	r6, r8
 802b7ea:	9a08      	ldr	r2, [sp, #32]
 802b7ec:	2101      	movs	r1, #1
 802b7ee:	441a      	add	r2, r3
 802b7f0:	4658      	mov	r0, fp
 802b7f2:	4498      	add	r8, r3
 802b7f4:	9208      	str	r2, [sp, #32]
 802b7f6:	f004 ffb9 	bl	803076c <__i2b>
 802b7fa:	4605      	mov	r5, r0
 802b7fc:	b15e      	cbz	r6, 802b816 <_dtoa_r+0x71e>
 802b7fe:	9b08      	ldr	r3, [sp, #32]
 802b800:	2b00      	cmp	r3, #0
 802b802:	dd08      	ble.n	802b816 <_dtoa_r+0x71e>
 802b804:	42b3      	cmp	r3, r6
 802b806:	9a08      	ldr	r2, [sp, #32]
 802b808:	bfa8      	it	ge
 802b80a:	4633      	movge	r3, r6
 802b80c:	eba8 0803 	sub.w	r8, r8, r3
 802b810:	1af6      	subs	r6, r6, r3
 802b812:	1ad3      	subs	r3, r2, r3
 802b814:	9308      	str	r3, [sp, #32]
 802b816:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b818:	b1f3      	cbz	r3, 802b858 <_dtoa_r+0x760>
 802b81a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802b81c:	2b00      	cmp	r3, #0
 802b81e:	f000 80b7 	beq.w	802b990 <_dtoa_r+0x898>
 802b822:	b18c      	cbz	r4, 802b848 <_dtoa_r+0x750>
 802b824:	4629      	mov	r1, r5
 802b826:	4622      	mov	r2, r4
 802b828:	4658      	mov	r0, fp
 802b82a:	f005 f85f 	bl	80308ec <__pow5mult>
 802b82e:	464a      	mov	r2, r9
 802b830:	4601      	mov	r1, r0
 802b832:	4605      	mov	r5, r0
 802b834:	4658      	mov	r0, fp
 802b836:	f004 ffaf 	bl	8030798 <__multiply>
 802b83a:	4649      	mov	r1, r9
 802b83c:	9004      	str	r0, [sp, #16]
 802b83e:	4658      	mov	r0, fp
 802b840:	f004 feaf 	bl	80305a2 <_Bfree>
 802b844:	9b04      	ldr	r3, [sp, #16]
 802b846:	4699      	mov	r9, r3
 802b848:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b84a:	1b1a      	subs	r2, r3, r4
 802b84c:	d004      	beq.n	802b858 <_dtoa_r+0x760>
 802b84e:	4649      	mov	r1, r9
 802b850:	4658      	mov	r0, fp
 802b852:	f005 f84b 	bl	80308ec <__pow5mult>
 802b856:	4681      	mov	r9, r0
 802b858:	2101      	movs	r1, #1
 802b85a:	4658      	mov	r0, fp
 802b85c:	f004 ff86 	bl	803076c <__i2b>
 802b860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b862:	4604      	mov	r4, r0
 802b864:	2b00      	cmp	r3, #0
 802b866:	f000 81cc 	beq.w	802bc02 <_dtoa_r+0xb0a>
 802b86a:	461a      	mov	r2, r3
 802b86c:	4601      	mov	r1, r0
 802b86e:	4658      	mov	r0, fp
 802b870:	f005 f83c 	bl	80308ec <__pow5mult>
 802b874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b876:	2b01      	cmp	r3, #1
 802b878:	4604      	mov	r4, r0
 802b87a:	f300 8095 	bgt.w	802b9a8 <_dtoa_r+0x8b0>
 802b87e:	9b02      	ldr	r3, [sp, #8]
 802b880:	2b00      	cmp	r3, #0
 802b882:	f040 8087 	bne.w	802b994 <_dtoa_r+0x89c>
 802b886:	9b03      	ldr	r3, [sp, #12]
 802b888:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802b88c:	2b00      	cmp	r3, #0
 802b88e:	f040 8089 	bne.w	802b9a4 <_dtoa_r+0x8ac>
 802b892:	9b03      	ldr	r3, [sp, #12]
 802b894:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802b898:	0d1b      	lsrs	r3, r3, #20
 802b89a:	051b      	lsls	r3, r3, #20
 802b89c:	b12b      	cbz	r3, 802b8aa <_dtoa_r+0x7b2>
 802b89e:	9b08      	ldr	r3, [sp, #32]
 802b8a0:	3301      	adds	r3, #1
 802b8a2:	9308      	str	r3, [sp, #32]
 802b8a4:	f108 0801 	add.w	r8, r8, #1
 802b8a8:	2301      	movs	r3, #1
 802b8aa:	930a      	str	r3, [sp, #40]	@ 0x28
 802b8ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b8ae:	2b00      	cmp	r3, #0
 802b8b0:	f000 81ad 	beq.w	802bc0e <_dtoa_r+0xb16>
 802b8b4:	6923      	ldr	r3, [r4, #16]
 802b8b6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802b8ba:	6918      	ldr	r0, [r3, #16]
 802b8bc:	f004 ff0a 	bl	80306d4 <__hi0bits>
 802b8c0:	f1c0 0020 	rsb	r0, r0, #32
 802b8c4:	9b08      	ldr	r3, [sp, #32]
 802b8c6:	4418      	add	r0, r3
 802b8c8:	f010 001f 	ands.w	r0, r0, #31
 802b8cc:	d077      	beq.n	802b9be <_dtoa_r+0x8c6>
 802b8ce:	f1c0 0320 	rsb	r3, r0, #32
 802b8d2:	2b04      	cmp	r3, #4
 802b8d4:	dd6b      	ble.n	802b9ae <_dtoa_r+0x8b6>
 802b8d6:	9b08      	ldr	r3, [sp, #32]
 802b8d8:	f1c0 001c 	rsb	r0, r0, #28
 802b8dc:	4403      	add	r3, r0
 802b8de:	4480      	add	r8, r0
 802b8e0:	4406      	add	r6, r0
 802b8e2:	9308      	str	r3, [sp, #32]
 802b8e4:	f1b8 0f00 	cmp.w	r8, #0
 802b8e8:	dd05      	ble.n	802b8f6 <_dtoa_r+0x7fe>
 802b8ea:	4649      	mov	r1, r9
 802b8ec:	4642      	mov	r2, r8
 802b8ee:	4658      	mov	r0, fp
 802b8f0:	f005 f83c 	bl	803096c <__lshift>
 802b8f4:	4681      	mov	r9, r0
 802b8f6:	9b08      	ldr	r3, [sp, #32]
 802b8f8:	2b00      	cmp	r3, #0
 802b8fa:	dd05      	ble.n	802b908 <_dtoa_r+0x810>
 802b8fc:	4621      	mov	r1, r4
 802b8fe:	461a      	mov	r2, r3
 802b900:	4658      	mov	r0, fp
 802b902:	f005 f833 	bl	803096c <__lshift>
 802b906:	4604      	mov	r4, r0
 802b908:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802b90a:	2b00      	cmp	r3, #0
 802b90c:	d059      	beq.n	802b9c2 <_dtoa_r+0x8ca>
 802b90e:	4621      	mov	r1, r4
 802b910:	4648      	mov	r0, r9
 802b912:	f005 f897 	bl	8030a44 <__mcmp>
 802b916:	2800      	cmp	r0, #0
 802b918:	da53      	bge.n	802b9c2 <_dtoa_r+0x8ca>
 802b91a:	1e7b      	subs	r3, r7, #1
 802b91c:	9304      	str	r3, [sp, #16]
 802b91e:	4649      	mov	r1, r9
 802b920:	2300      	movs	r3, #0
 802b922:	220a      	movs	r2, #10
 802b924:	4658      	mov	r0, fp
 802b926:	f004 fe45 	bl	80305b4 <__multadd>
 802b92a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802b92c:	4681      	mov	r9, r0
 802b92e:	2b00      	cmp	r3, #0
 802b930:	f000 816f 	beq.w	802bc12 <_dtoa_r+0xb1a>
 802b934:	2300      	movs	r3, #0
 802b936:	4629      	mov	r1, r5
 802b938:	220a      	movs	r2, #10
 802b93a:	4658      	mov	r0, fp
 802b93c:	f004 fe3a 	bl	80305b4 <__multadd>
 802b940:	9b00      	ldr	r3, [sp, #0]
 802b942:	2b00      	cmp	r3, #0
 802b944:	4605      	mov	r5, r0
 802b946:	dc67      	bgt.n	802ba18 <_dtoa_r+0x920>
 802b948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b94a:	2b02      	cmp	r3, #2
 802b94c:	dc41      	bgt.n	802b9d2 <_dtoa_r+0x8da>
 802b94e:	e063      	b.n	802ba18 <_dtoa_r+0x920>
 802b950:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b952:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802b956:	e746      	b.n	802b7e6 <_dtoa_r+0x6ee>
 802b958:	9b07      	ldr	r3, [sp, #28]
 802b95a:	1e5c      	subs	r4, r3, #1
 802b95c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b95e:	42a3      	cmp	r3, r4
 802b960:	bfbf      	itttt	lt
 802b962:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802b964:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802b966:	940a      	strlt	r4, [sp, #40]	@ 0x28
 802b968:	1ae3      	sublt	r3, r4, r3
 802b96a:	bfb4      	ite	lt
 802b96c:	18d2      	addlt	r2, r2, r3
 802b96e:	1b1c      	subge	r4, r3, r4
 802b970:	9b07      	ldr	r3, [sp, #28]
 802b972:	bfbc      	itt	lt
 802b974:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 802b976:	2400      	movlt	r4, #0
 802b978:	2b00      	cmp	r3, #0
 802b97a:	bfb5      	itete	lt
 802b97c:	eba8 0603 	sublt.w	r6, r8, r3
 802b980:	9b07      	ldrge	r3, [sp, #28]
 802b982:	2300      	movlt	r3, #0
 802b984:	4646      	movge	r6, r8
 802b986:	e730      	b.n	802b7ea <_dtoa_r+0x6f2>
 802b988:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802b98a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802b98c:	4646      	mov	r6, r8
 802b98e:	e735      	b.n	802b7fc <_dtoa_r+0x704>
 802b990:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802b992:	e75c      	b.n	802b84e <_dtoa_r+0x756>
 802b994:	2300      	movs	r3, #0
 802b996:	e788      	b.n	802b8aa <_dtoa_r+0x7b2>
 802b998:	3fe00000 	.word	0x3fe00000
 802b99c:	40240000 	.word	0x40240000
 802b9a0:	40140000 	.word	0x40140000
 802b9a4:	9b02      	ldr	r3, [sp, #8]
 802b9a6:	e780      	b.n	802b8aa <_dtoa_r+0x7b2>
 802b9a8:	2300      	movs	r3, #0
 802b9aa:	930a      	str	r3, [sp, #40]	@ 0x28
 802b9ac:	e782      	b.n	802b8b4 <_dtoa_r+0x7bc>
 802b9ae:	d099      	beq.n	802b8e4 <_dtoa_r+0x7ec>
 802b9b0:	9a08      	ldr	r2, [sp, #32]
 802b9b2:	331c      	adds	r3, #28
 802b9b4:	441a      	add	r2, r3
 802b9b6:	4498      	add	r8, r3
 802b9b8:	441e      	add	r6, r3
 802b9ba:	9208      	str	r2, [sp, #32]
 802b9bc:	e792      	b.n	802b8e4 <_dtoa_r+0x7ec>
 802b9be:	4603      	mov	r3, r0
 802b9c0:	e7f6      	b.n	802b9b0 <_dtoa_r+0x8b8>
 802b9c2:	9b07      	ldr	r3, [sp, #28]
 802b9c4:	9704      	str	r7, [sp, #16]
 802b9c6:	2b00      	cmp	r3, #0
 802b9c8:	dc20      	bgt.n	802ba0c <_dtoa_r+0x914>
 802b9ca:	9300      	str	r3, [sp, #0]
 802b9cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b9ce:	2b02      	cmp	r3, #2
 802b9d0:	dd1e      	ble.n	802ba10 <_dtoa_r+0x918>
 802b9d2:	9b00      	ldr	r3, [sp, #0]
 802b9d4:	2b00      	cmp	r3, #0
 802b9d6:	f47f aec0 	bne.w	802b75a <_dtoa_r+0x662>
 802b9da:	4621      	mov	r1, r4
 802b9dc:	2205      	movs	r2, #5
 802b9de:	4658      	mov	r0, fp
 802b9e0:	f004 fde8 	bl	80305b4 <__multadd>
 802b9e4:	4601      	mov	r1, r0
 802b9e6:	4604      	mov	r4, r0
 802b9e8:	4648      	mov	r0, r9
 802b9ea:	f005 f82b 	bl	8030a44 <__mcmp>
 802b9ee:	2800      	cmp	r0, #0
 802b9f0:	f77f aeb3 	ble.w	802b75a <_dtoa_r+0x662>
 802b9f4:	4656      	mov	r6, sl
 802b9f6:	2331      	movs	r3, #49	@ 0x31
 802b9f8:	f806 3b01 	strb.w	r3, [r6], #1
 802b9fc:	9b04      	ldr	r3, [sp, #16]
 802b9fe:	3301      	adds	r3, #1
 802ba00:	9304      	str	r3, [sp, #16]
 802ba02:	e6ae      	b.n	802b762 <_dtoa_r+0x66a>
 802ba04:	9c07      	ldr	r4, [sp, #28]
 802ba06:	9704      	str	r7, [sp, #16]
 802ba08:	4625      	mov	r5, r4
 802ba0a:	e7f3      	b.n	802b9f4 <_dtoa_r+0x8fc>
 802ba0c:	9b07      	ldr	r3, [sp, #28]
 802ba0e:	9300      	str	r3, [sp, #0]
 802ba10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802ba12:	2b00      	cmp	r3, #0
 802ba14:	f000 8101 	beq.w	802bc1a <_dtoa_r+0xb22>
 802ba18:	2e00      	cmp	r6, #0
 802ba1a:	dd05      	ble.n	802ba28 <_dtoa_r+0x930>
 802ba1c:	4629      	mov	r1, r5
 802ba1e:	4632      	mov	r2, r6
 802ba20:	4658      	mov	r0, fp
 802ba22:	f004 ffa3 	bl	803096c <__lshift>
 802ba26:	4605      	mov	r5, r0
 802ba28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ba2a:	2b00      	cmp	r3, #0
 802ba2c:	d059      	beq.n	802bae2 <_dtoa_r+0x9ea>
 802ba2e:	6869      	ldr	r1, [r5, #4]
 802ba30:	4658      	mov	r0, fp
 802ba32:	f004 fd91 	bl	8030558 <_Balloc>
 802ba36:	4606      	mov	r6, r0
 802ba38:	b920      	cbnz	r0, 802ba44 <_dtoa_r+0x94c>
 802ba3a:	4b83      	ldr	r3, [pc, #524]	@ (802bc48 <_dtoa_r+0xb50>)
 802ba3c:	4602      	mov	r2, r0
 802ba3e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802ba42:	e480      	b.n	802b346 <_dtoa_r+0x24e>
 802ba44:	692a      	ldr	r2, [r5, #16]
 802ba46:	3202      	adds	r2, #2
 802ba48:	0092      	lsls	r2, r2, #2
 802ba4a:	f105 010c 	add.w	r1, r5, #12
 802ba4e:	300c      	adds	r0, #12
 802ba50:	f7ff fa52 	bl	802aef8 <memcpy>
 802ba54:	2201      	movs	r2, #1
 802ba56:	4631      	mov	r1, r6
 802ba58:	4658      	mov	r0, fp
 802ba5a:	f004 ff87 	bl	803096c <__lshift>
 802ba5e:	f10a 0301 	add.w	r3, sl, #1
 802ba62:	9307      	str	r3, [sp, #28]
 802ba64:	9b00      	ldr	r3, [sp, #0]
 802ba66:	4453      	add	r3, sl
 802ba68:	930b      	str	r3, [sp, #44]	@ 0x2c
 802ba6a:	9b02      	ldr	r3, [sp, #8]
 802ba6c:	f003 0301 	and.w	r3, r3, #1
 802ba70:	462f      	mov	r7, r5
 802ba72:	930a      	str	r3, [sp, #40]	@ 0x28
 802ba74:	4605      	mov	r5, r0
 802ba76:	9b07      	ldr	r3, [sp, #28]
 802ba78:	4621      	mov	r1, r4
 802ba7a:	3b01      	subs	r3, #1
 802ba7c:	4648      	mov	r0, r9
 802ba7e:	9300      	str	r3, [sp, #0]
 802ba80:	f7ff faaf 	bl	802afe2 <quorem>
 802ba84:	4639      	mov	r1, r7
 802ba86:	9002      	str	r0, [sp, #8]
 802ba88:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802ba8c:	4648      	mov	r0, r9
 802ba8e:	f004 ffd9 	bl	8030a44 <__mcmp>
 802ba92:	462a      	mov	r2, r5
 802ba94:	9008      	str	r0, [sp, #32]
 802ba96:	4621      	mov	r1, r4
 802ba98:	4658      	mov	r0, fp
 802ba9a:	f004 ffef 	bl	8030a7c <__mdiff>
 802ba9e:	68c2      	ldr	r2, [r0, #12]
 802baa0:	4606      	mov	r6, r0
 802baa2:	bb02      	cbnz	r2, 802bae6 <_dtoa_r+0x9ee>
 802baa4:	4601      	mov	r1, r0
 802baa6:	4648      	mov	r0, r9
 802baa8:	f004 ffcc 	bl	8030a44 <__mcmp>
 802baac:	4602      	mov	r2, r0
 802baae:	4631      	mov	r1, r6
 802bab0:	4658      	mov	r0, fp
 802bab2:	920e      	str	r2, [sp, #56]	@ 0x38
 802bab4:	f004 fd75 	bl	80305a2 <_Bfree>
 802bab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802baba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802babc:	9e07      	ldr	r6, [sp, #28]
 802babe:	ea43 0102 	orr.w	r1, r3, r2
 802bac2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802bac4:	4319      	orrs	r1, r3
 802bac6:	d110      	bne.n	802baea <_dtoa_r+0x9f2>
 802bac8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802bacc:	d029      	beq.n	802bb22 <_dtoa_r+0xa2a>
 802bace:	9b08      	ldr	r3, [sp, #32]
 802bad0:	2b00      	cmp	r3, #0
 802bad2:	dd02      	ble.n	802bada <_dtoa_r+0x9e2>
 802bad4:	9b02      	ldr	r3, [sp, #8]
 802bad6:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 802bada:	9b00      	ldr	r3, [sp, #0]
 802badc:	f883 8000 	strb.w	r8, [r3]
 802bae0:	e640      	b.n	802b764 <_dtoa_r+0x66c>
 802bae2:	4628      	mov	r0, r5
 802bae4:	e7bb      	b.n	802ba5e <_dtoa_r+0x966>
 802bae6:	2201      	movs	r2, #1
 802bae8:	e7e1      	b.n	802baae <_dtoa_r+0x9b6>
 802baea:	9b08      	ldr	r3, [sp, #32]
 802baec:	2b00      	cmp	r3, #0
 802baee:	db04      	blt.n	802bafa <_dtoa_r+0xa02>
 802baf0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802baf2:	430b      	orrs	r3, r1
 802baf4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802baf6:	430b      	orrs	r3, r1
 802baf8:	d120      	bne.n	802bb3c <_dtoa_r+0xa44>
 802bafa:	2a00      	cmp	r2, #0
 802bafc:	dded      	ble.n	802bada <_dtoa_r+0x9e2>
 802bafe:	4649      	mov	r1, r9
 802bb00:	2201      	movs	r2, #1
 802bb02:	4658      	mov	r0, fp
 802bb04:	f004 ff32 	bl	803096c <__lshift>
 802bb08:	4621      	mov	r1, r4
 802bb0a:	4681      	mov	r9, r0
 802bb0c:	f004 ff9a 	bl	8030a44 <__mcmp>
 802bb10:	2800      	cmp	r0, #0
 802bb12:	dc03      	bgt.n	802bb1c <_dtoa_r+0xa24>
 802bb14:	d1e1      	bne.n	802bada <_dtoa_r+0x9e2>
 802bb16:	f018 0f01 	tst.w	r8, #1
 802bb1a:	d0de      	beq.n	802bada <_dtoa_r+0x9e2>
 802bb1c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802bb20:	d1d8      	bne.n	802bad4 <_dtoa_r+0x9dc>
 802bb22:	9a00      	ldr	r2, [sp, #0]
 802bb24:	2339      	movs	r3, #57	@ 0x39
 802bb26:	7013      	strb	r3, [r2, #0]
 802bb28:	4633      	mov	r3, r6
 802bb2a:	461e      	mov	r6, r3
 802bb2c:	3b01      	subs	r3, #1
 802bb2e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802bb32:	2a39      	cmp	r2, #57	@ 0x39
 802bb34:	d052      	beq.n	802bbdc <_dtoa_r+0xae4>
 802bb36:	3201      	adds	r2, #1
 802bb38:	701a      	strb	r2, [r3, #0]
 802bb3a:	e613      	b.n	802b764 <_dtoa_r+0x66c>
 802bb3c:	2a00      	cmp	r2, #0
 802bb3e:	dd07      	ble.n	802bb50 <_dtoa_r+0xa58>
 802bb40:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802bb44:	d0ed      	beq.n	802bb22 <_dtoa_r+0xa2a>
 802bb46:	9a00      	ldr	r2, [sp, #0]
 802bb48:	f108 0301 	add.w	r3, r8, #1
 802bb4c:	7013      	strb	r3, [r2, #0]
 802bb4e:	e609      	b.n	802b764 <_dtoa_r+0x66c>
 802bb50:	9b07      	ldr	r3, [sp, #28]
 802bb52:	9a07      	ldr	r2, [sp, #28]
 802bb54:	f803 8c01 	strb.w	r8, [r3, #-1]
 802bb58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802bb5a:	4293      	cmp	r3, r2
 802bb5c:	d028      	beq.n	802bbb0 <_dtoa_r+0xab8>
 802bb5e:	4649      	mov	r1, r9
 802bb60:	2300      	movs	r3, #0
 802bb62:	220a      	movs	r2, #10
 802bb64:	4658      	mov	r0, fp
 802bb66:	f004 fd25 	bl	80305b4 <__multadd>
 802bb6a:	42af      	cmp	r7, r5
 802bb6c:	4681      	mov	r9, r0
 802bb6e:	f04f 0300 	mov.w	r3, #0
 802bb72:	f04f 020a 	mov.w	r2, #10
 802bb76:	4639      	mov	r1, r7
 802bb78:	4658      	mov	r0, fp
 802bb7a:	d107      	bne.n	802bb8c <_dtoa_r+0xa94>
 802bb7c:	f004 fd1a 	bl	80305b4 <__multadd>
 802bb80:	4607      	mov	r7, r0
 802bb82:	4605      	mov	r5, r0
 802bb84:	9b07      	ldr	r3, [sp, #28]
 802bb86:	3301      	adds	r3, #1
 802bb88:	9307      	str	r3, [sp, #28]
 802bb8a:	e774      	b.n	802ba76 <_dtoa_r+0x97e>
 802bb8c:	f004 fd12 	bl	80305b4 <__multadd>
 802bb90:	4629      	mov	r1, r5
 802bb92:	4607      	mov	r7, r0
 802bb94:	2300      	movs	r3, #0
 802bb96:	220a      	movs	r2, #10
 802bb98:	4658      	mov	r0, fp
 802bb9a:	f004 fd0b 	bl	80305b4 <__multadd>
 802bb9e:	4605      	mov	r5, r0
 802bba0:	e7f0      	b.n	802bb84 <_dtoa_r+0xa8c>
 802bba2:	9b00      	ldr	r3, [sp, #0]
 802bba4:	2b00      	cmp	r3, #0
 802bba6:	bfcc      	ite	gt
 802bba8:	461e      	movgt	r6, r3
 802bbaa:	2601      	movle	r6, #1
 802bbac:	4456      	add	r6, sl
 802bbae:	2700      	movs	r7, #0
 802bbb0:	4649      	mov	r1, r9
 802bbb2:	2201      	movs	r2, #1
 802bbb4:	4658      	mov	r0, fp
 802bbb6:	f004 fed9 	bl	803096c <__lshift>
 802bbba:	4621      	mov	r1, r4
 802bbbc:	4681      	mov	r9, r0
 802bbbe:	f004 ff41 	bl	8030a44 <__mcmp>
 802bbc2:	2800      	cmp	r0, #0
 802bbc4:	dcb0      	bgt.n	802bb28 <_dtoa_r+0xa30>
 802bbc6:	d102      	bne.n	802bbce <_dtoa_r+0xad6>
 802bbc8:	f018 0f01 	tst.w	r8, #1
 802bbcc:	d1ac      	bne.n	802bb28 <_dtoa_r+0xa30>
 802bbce:	4633      	mov	r3, r6
 802bbd0:	461e      	mov	r6, r3
 802bbd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802bbd6:	2a30      	cmp	r2, #48	@ 0x30
 802bbd8:	d0fa      	beq.n	802bbd0 <_dtoa_r+0xad8>
 802bbda:	e5c3      	b.n	802b764 <_dtoa_r+0x66c>
 802bbdc:	459a      	cmp	sl, r3
 802bbde:	d1a4      	bne.n	802bb2a <_dtoa_r+0xa32>
 802bbe0:	9b04      	ldr	r3, [sp, #16]
 802bbe2:	3301      	adds	r3, #1
 802bbe4:	9304      	str	r3, [sp, #16]
 802bbe6:	2331      	movs	r3, #49	@ 0x31
 802bbe8:	f88a 3000 	strb.w	r3, [sl]
 802bbec:	e5ba      	b.n	802b764 <_dtoa_r+0x66c>
 802bbee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802bbf0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 802bc4c <_dtoa_r+0xb54>
 802bbf4:	2b00      	cmp	r3, #0
 802bbf6:	f43f aab6 	beq.w	802b166 <_dtoa_r+0x6e>
 802bbfa:	f10a 0308 	add.w	r3, sl, #8
 802bbfe:	f7ff bab0 	b.w	802b162 <_dtoa_r+0x6a>
 802bc02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bc04:	2b01      	cmp	r3, #1
 802bc06:	f77f ae3a 	ble.w	802b87e <_dtoa_r+0x786>
 802bc0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802bc0c:	930a      	str	r3, [sp, #40]	@ 0x28
 802bc0e:	2001      	movs	r0, #1
 802bc10:	e658      	b.n	802b8c4 <_dtoa_r+0x7cc>
 802bc12:	9b00      	ldr	r3, [sp, #0]
 802bc14:	2b00      	cmp	r3, #0
 802bc16:	f77f aed9 	ble.w	802b9cc <_dtoa_r+0x8d4>
 802bc1a:	4656      	mov	r6, sl
 802bc1c:	4621      	mov	r1, r4
 802bc1e:	4648      	mov	r0, r9
 802bc20:	f7ff f9df 	bl	802afe2 <quorem>
 802bc24:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802bc28:	f806 8b01 	strb.w	r8, [r6], #1
 802bc2c:	9b00      	ldr	r3, [sp, #0]
 802bc2e:	eba6 020a 	sub.w	r2, r6, sl
 802bc32:	4293      	cmp	r3, r2
 802bc34:	ddb5      	ble.n	802bba2 <_dtoa_r+0xaaa>
 802bc36:	4649      	mov	r1, r9
 802bc38:	2300      	movs	r3, #0
 802bc3a:	220a      	movs	r2, #10
 802bc3c:	4658      	mov	r0, fp
 802bc3e:	f004 fcb9 	bl	80305b4 <__multadd>
 802bc42:	4681      	mov	r9, r0
 802bc44:	e7ea      	b.n	802bc1c <_dtoa_r+0xb24>
 802bc46:	bf00      	nop
 802bc48:	08038586 	.word	0x08038586
 802bc4c:	08038579 	.word	0x08038579

0802bc50 <_malloc_trim_r>:
 802bc50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bc54:	4606      	mov	r6, r0
 802bc56:	2008      	movs	r0, #8
 802bc58:	4689      	mov	r9, r1
 802bc5a:	f006 fb53 	bl	8032304 <sysconf>
 802bc5e:	4f24      	ldr	r7, [pc, #144]	@ (802bcf0 <_malloc_trim_r+0xa0>)
 802bc60:	4680      	mov	r8, r0
 802bc62:	4630      	mov	r0, r6
 802bc64:	f004 fc6c 	bl	8030540 <__malloc_lock>
 802bc68:	68bb      	ldr	r3, [r7, #8]
 802bc6a:	685d      	ldr	r5, [r3, #4]
 802bc6c:	f025 0503 	bic.w	r5, r5, #3
 802bc70:	f1a5 0411 	sub.w	r4, r5, #17
 802bc74:	eba4 0409 	sub.w	r4, r4, r9
 802bc78:	4444      	add	r4, r8
 802bc7a:	fbb4 f4f8 	udiv	r4, r4, r8
 802bc7e:	3c01      	subs	r4, #1
 802bc80:	fb08 f404 	mul.w	r4, r8, r4
 802bc84:	45a0      	cmp	r8, r4
 802bc86:	dd05      	ble.n	802bc94 <_malloc_trim_r+0x44>
 802bc88:	4630      	mov	r0, r6
 802bc8a:	f004 fc5f 	bl	803054c <__malloc_unlock>
 802bc8e:	2000      	movs	r0, #0
 802bc90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bc94:	2100      	movs	r1, #0
 802bc96:	4630      	mov	r0, r6
 802bc98:	f006 fb24 	bl	80322e4 <_sbrk_r>
 802bc9c:	68bb      	ldr	r3, [r7, #8]
 802bc9e:	442b      	add	r3, r5
 802bca0:	4298      	cmp	r0, r3
 802bca2:	d1f1      	bne.n	802bc88 <_malloc_trim_r+0x38>
 802bca4:	4261      	negs	r1, r4
 802bca6:	4630      	mov	r0, r6
 802bca8:	f006 fb1c 	bl	80322e4 <_sbrk_r>
 802bcac:	3001      	adds	r0, #1
 802bcae:	d110      	bne.n	802bcd2 <_malloc_trim_r+0x82>
 802bcb0:	2100      	movs	r1, #0
 802bcb2:	4630      	mov	r0, r6
 802bcb4:	f006 fb16 	bl	80322e4 <_sbrk_r>
 802bcb8:	68ba      	ldr	r2, [r7, #8]
 802bcba:	1a83      	subs	r3, r0, r2
 802bcbc:	2b0f      	cmp	r3, #15
 802bcbe:	dde3      	ble.n	802bc88 <_malloc_trim_r+0x38>
 802bcc0:	490c      	ldr	r1, [pc, #48]	@ (802bcf4 <_malloc_trim_r+0xa4>)
 802bcc2:	6809      	ldr	r1, [r1, #0]
 802bcc4:	1a40      	subs	r0, r0, r1
 802bcc6:	490c      	ldr	r1, [pc, #48]	@ (802bcf8 <_malloc_trim_r+0xa8>)
 802bcc8:	f043 0301 	orr.w	r3, r3, #1
 802bccc:	6008      	str	r0, [r1, #0]
 802bcce:	6053      	str	r3, [r2, #4]
 802bcd0:	e7da      	b.n	802bc88 <_malloc_trim_r+0x38>
 802bcd2:	68bb      	ldr	r3, [r7, #8]
 802bcd4:	4a08      	ldr	r2, [pc, #32]	@ (802bcf8 <_malloc_trim_r+0xa8>)
 802bcd6:	1b2d      	subs	r5, r5, r4
 802bcd8:	f045 0501 	orr.w	r5, r5, #1
 802bcdc:	605d      	str	r5, [r3, #4]
 802bcde:	6813      	ldr	r3, [r2, #0]
 802bce0:	4630      	mov	r0, r6
 802bce2:	1b1b      	subs	r3, r3, r4
 802bce4:	6013      	str	r3, [r2, #0]
 802bce6:	f004 fc31 	bl	803054c <__malloc_unlock>
 802bcea:	2001      	movs	r0, #1
 802bcec:	e7d0      	b.n	802bc90 <_malloc_trim_r+0x40>
 802bcee:	bf00      	nop
 802bcf0:	20000384 	.word	0x20000384
 802bcf4:	2000037c 	.word	0x2000037c
 802bcf8:	20018194 	.word	0x20018194

0802bcfc <_free_r>:
 802bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bcfe:	4604      	mov	r4, r0
 802bd00:	460f      	mov	r7, r1
 802bd02:	2900      	cmp	r1, #0
 802bd04:	f000 80b1 	beq.w	802be6a <_free_r+0x16e>
 802bd08:	f004 fc1a 	bl	8030540 <__malloc_lock>
 802bd0c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 802bd10:	4d56      	ldr	r5, [pc, #344]	@ (802be6c <_free_r+0x170>)
 802bd12:	f022 0001 	bic.w	r0, r2, #1
 802bd16:	f1a7 0308 	sub.w	r3, r7, #8
 802bd1a:	eb03 0c00 	add.w	ip, r3, r0
 802bd1e:	68a9      	ldr	r1, [r5, #8]
 802bd20:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802bd24:	4561      	cmp	r1, ip
 802bd26:	f026 0603 	bic.w	r6, r6, #3
 802bd2a:	f002 0201 	and.w	r2, r2, #1
 802bd2e:	d11b      	bne.n	802bd68 <_free_r+0x6c>
 802bd30:	4406      	add	r6, r0
 802bd32:	b93a      	cbnz	r2, 802bd44 <_free_r+0x48>
 802bd34:	f857 2c08 	ldr.w	r2, [r7, #-8]
 802bd38:	1a9b      	subs	r3, r3, r2
 802bd3a:	4416      	add	r6, r2
 802bd3c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 802bd40:	60ca      	str	r2, [r1, #12]
 802bd42:	6091      	str	r1, [r2, #8]
 802bd44:	f046 0201 	orr.w	r2, r6, #1
 802bd48:	605a      	str	r2, [r3, #4]
 802bd4a:	60ab      	str	r3, [r5, #8]
 802bd4c:	4b48      	ldr	r3, [pc, #288]	@ (802be70 <_free_r+0x174>)
 802bd4e:	681b      	ldr	r3, [r3, #0]
 802bd50:	42b3      	cmp	r3, r6
 802bd52:	d804      	bhi.n	802bd5e <_free_r+0x62>
 802bd54:	4b47      	ldr	r3, [pc, #284]	@ (802be74 <_free_r+0x178>)
 802bd56:	4620      	mov	r0, r4
 802bd58:	6819      	ldr	r1, [r3, #0]
 802bd5a:	f7ff ff79 	bl	802bc50 <_malloc_trim_r>
 802bd5e:	4620      	mov	r0, r4
 802bd60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802bd64:	f004 bbf2 	b.w	803054c <__malloc_unlock>
 802bd68:	f8cc 6004 	str.w	r6, [ip, #4]
 802bd6c:	2a00      	cmp	r2, #0
 802bd6e:	d138      	bne.n	802bde2 <_free_r+0xe6>
 802bd70:	f857 1c08 	ldr.w	r1, [r7, #-8]
 802bd74:	1a5b      	subs	r3, r3, r1
 802bd76:	4408      	add	r0, r1
 802bd78:	6899      	ldr	r1, [r3, #8]
 802bd7a:	f105 0708 	add.w	r7, r5, #8
 802bd7e:	42b9      	cmp	r1, r7
 802bd80:	d031      	beq.n	802bde6 <_free_r+0xea>
 802bd82:	68df      	ldr	r7, [r3, #12]
 802bd84:	60cf      	str	r7, [r1, #12]
 802bd86:	60b9      	str	r1, [r7, #8]
 802bd88:	eb0c 0106 	add.w	r1, ip, r6
 802bd8c:	6849      	ldr	r1, [r1, #4]
 802bd8e:	07c9      	lsls	r1, r1, #31
 802bd90:	d40b      	bmi.n	802bdaa <_free_r+0xae>
 802bd92:	f8dc 1008 	ldr.w	r1, [ip, #8]
 802bd96:	4430      	add	r0, r6
 802bd98:	bb3a      	cbnz	r2, 802bdea <_free_r+0xee>
 802bd9a:	4e37      	ldr	r6, [pc, #220]	@ (802be78 <_free_r+0x17c>)
 802bd9c:	42b1      	cmp	r1, r6
 802bd9e:	d124      	bne.n	802bdea <_free_r+0xee>
 802bda0:	e9c5 3304 	strd	r3, r3, [r5, #16]
 802bda4:	e9c3 1102 	strd	r1, r1, [r3, #8]
 802bda8:	2201      	movs	r2, #1
 802bdaa:	f040 0101 	orr.w	r1, r0, #1
 802bdae:	6059      	str	r1, [r3, #4]
 802bdb0:	5018      	str	r0, [r3, r0]
 802bdb2:	2a00      	cmp	r2, #0
 802bdb4:	d1d3      	bne.n	802bd5e <_free_r+0x62>
 802bdb6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 802bdba:	d21b      	bcs.n	802bdf4 <_free_r+0xf8>
 802bdbc:	08c2      	lsrs	r2, r0, #3
 802bdbe:	2101      	movs	r1, #1
 802bdc0:	0940      	lsrs	r0, r0, #5
 802bdc2:	4081      	lsls	r1, r0
 802bdc4:	6868      	ldr	r0, [r5, #4]
 802bdc6:	3201      	adds	r2, #1
 802bdc8:	4301      	orrs	r1, r0
 802bdca:	6069      	str	r1, [r5, #4]
 802bdcc:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 802bdd0:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 802bdd4:	3908      	subs	r1, #8
 802bdd6:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802bdda:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 802bdde:	60c3      	str	r3, [r0, #12]
 802bde0:	e7bd      	b.n	802bd5e <_free_r+0x62>
 802bde2:	2200      	movs	r2, #0
 802bde4:	e7d0      	b.n	802bd88 <_free_r+0x8c>
 802bde6:	2201      	movs	r2, #1
 802bde8:	e7ce      	b.n	802bd88 <_free_r+0x8c>
 802bdea:	f8dc 600c 	ldr.w	r6, [ip, #12]
 802bdee:	60ce      	str	r6, [r1, #12]
 802bdf0:	60b1      	str	r1, [r6, #8]
 802bdf2:	e7da      	b.n	802bdaa <_free_r+0xae>
 802bdf4:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 802bdf8:	ea4f 2250 	mov.w	r2, r0, lsr #9
 802bdfc:	d214      	bcs.n	802be28 <_free_r+0x12c>
 802bdfe:	0982      	lsrs	r2, r0, #6
 802be00:	3238      	adds	r2, #56	@ 0x38
 802be02:	1c51      	adds	r1, r2, #1
 802be04:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 802be08:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 802be0c:	428e      	cmp	r6, r1
 802be0e:	d125      	bne.n	802be5c <_free_r+0x160>
 802be10:	2001      	movs	r0, #1
 802be12:	1092      	asrs	r2, r2, #2
 802be14:	fa00 f202 	lsl.w	r2, r0, r2
 802be18:	6868      	ldr	r0, [r5, #4]
 802be1a:	4302      	orrs	r2, r0
 802be1c:	606a      	str	r2, [r5, #4]
 802be1e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 802be22:	60b3      	str	r3, [r6, #8]
 802be24:	60cb      	str	r3, [r1, #12]
 802be26:	e79a      	b.n	802bd5e <_free_r+0x62>
 802be28:	2a14      	cmp	r2, #20
 802be2a:	d801      	bhi.n	802be30 <_free_r+0x134>
 802be2c:	325b      	adds	r2, #91	@ 0x5b
 802be2e:	e7e8      	b.n	802be02 <_free_r+0x106>
 802be30:	2a54      	cmp	r2, #84	@ 0x54
 802be32:	d802      	bhi.n	802be3a <_free_r+0x13e>
 802be34:	0b02      	lsrs	r2, r0, #12
 802be36:	326e      	adds	r2, #110	@ 0x6e
 802be38:	e7e3      	b.n	802be02 <_free_r+0x106>
 802be3a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802be3e:	d802      	bhi.n	802be46 <_free_r+0x14a>
 802be40:	0bc2      	lsrs	r2, r0, #15
 802be42:	3277      	adds	r2, #119	@ 0x77
 802be44:	e7dd      	b.n	802be02 <_free_r+0x106>
 802be46:	f240 5154 	movw	r1, #1364	@ 0x554
 802be4a:	428a      	cmp	r2, r1
 802be4c:	bf9a      	itte	ls
 802be4e:	0c82      	lsrls	r2, r0, #18
 802be50:	327c      	addls	r2, #124	@ 0x7c
 802be52:	227e      	movhi	r2, #126	@ 0x7e
 802be54:	e7d5      	b.n	802be02 <_free_r+0x106>
 802be56:	6889      	ldr	r1, [r1, #8]
 802be58:	428e      	cmp	r6, r1
 802be5a:	d004      	beq.n	802be66 <_free_r+0x16a>
 802be5c:	684a      	ldr	r2, [r1, #4]
 802be5e:	f022 0203 	bic.w	r2, r2, #3
 802be62:	4282      	cmp	r2, r0
 802be64:	d8f7      	bhi.n	802be56 <_free_r+0x15a>
 802be66:	68ce      	ldr	r6, [r1, #12]
 802be68:	e7d9      	b.n	802be1e <_free_r+0x122>
 802be6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802be6c:	20000384 	.word	0x20000384
 802be70:	20000380 	.word	0x20000380
 802be74:	200181c4 	.word	0x200181c4
 802be78:	2000038c 	.word	0x2000038c

0802be7c <_findenv_r>:
 802be7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802be80:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 802bef0 <_findenv_r+0x74>
 802be84:	4606      	mov	r6, r0
 802be86:	4689      	mov	r9, r1
 802be88:	4617      	mov	r7, r2
 802be8a:	f006 fc31 	bl	80326f0 <__env_lock>
 802be8e:	f8da 4000 	ldr.w	r4, [sl]
 802be92:	b134      	cbz	r4, 802bea2 <_findenv_r+0x26>
 802be94:	464b      	mov	r3, r9
 802be96:	4698      	mov	r8, r3
 802be98:	f813 2b01 	ldrb.w	r2, [r3], #1
 802be9c:	b13a      	cbz	r2, 802beae <_findenv_r+0x32>
 802be9e:	2a3d      	cmp	r2, #61	@ 0x3d
 802bea0:	d1f9      	bne.n	802be96 <_findenv_r+0x1a>
 802bea2:	4630      	mov	r0, r6
 802bea4:	f006 fc2a 	bl	80326fc <__env_unlock>
 802bea8:	2000      	movs	r0, #0
 802beaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802beae:	eba8 0809 	sub.w	r8, r8, r9
 802beb2:	46a3      	mov	fp, r4
 802beb4:	f854 0b04 	ldr.w	r0, [r4], #4
 802beb8:	2800      	cmp	r0, #0
 802beba:	d0f2      	beq.n	802bea2 <_findenv_r+0x26>
 802bebc:	4642      	mov	r2, r8
 802bebe:	4649      	mov	r1, r9
 802bec0:	f7fd fe13 	bl	8029aea <strncmp>
 802bec4:	2800      	cmp	r0, #0
 802bec6:	d1f4      	bne.n	802beb2 <_findenv_r+0x36>
 802bec8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802becc:	eb03 0508 	add.w	r5, r3, r8
 802bed0:	f813 3008 	ldrb.w	r3, [r3, r8]
 802bed4:	2b3d      	cmp	r3, #61	@ 0x3d
 802bed6:	d1ec      	bne.n	802beb2 <_findenv_r+0x36>
 802bed8:	f8da 3000 	ldr.w	r3, [sl]
 802bedc:	ebab 0303 	sub.w	r3, fp, r3
 802bee0:	109b      	asrs	r3, r3, #2
 802bee2:	4630      	mov	r0, r6
 802bee4:	603b      	str	r3, [r7, #0]
 802bee6:	f006 fc09 	bl	80326fc <__env_unlock>
 802beea:	1c68      	adds	r0, r5, #1
 802beec:	e7dd      	b.n	802beaa <_findenv_r+0x2e>
 802beee:	bf00      	nop
 802bef0:	20000014 	.word	0x20000014

0802bef4 <_getenv_r>:
 802bef4:	b507      	push	{r0, r1, r2, lr}
 802bef6:	aa01      	add	r2, sp, #4
 802bef8:	f7ff ffc0 	bl	802be7c <_findenv_r>
 802befc:	b003      	add	sp, #12
 802befe:	f85d fb04 	ldr.w	pc, [sp], #4

0802bf02 <labs>:
 802bf02:	2800      	cmp	r0, #0
 802bf04:	bfb8      	it	lt
 802bf06:	4240      	neglt	r0, r0
 802bf08:	4770      	bx	lr
	...

0802bf0c <malloc>:
 802bf0c:	4b02      	ldr	r3, [pc, #8]	@ (802bf18 <malloc+0xc>)
 802bf0e:	4601      	mov	r1, r0
 802bf10:	6818      	ldr	r0, [r3, #0]
 802bf12:	f000 b80b 	b.w	802bf2c <_malloc_r>
 802bf16:	bf00      	nop
 802bf18:	20000254 	.word	0x20000254

0802bf1c <free>:
 802bf1c:	4b02      	ldr	r3, [pc, #8]	@ (802bf28 <free+0xc>)
 802bf1e:	4601      	mov	r1, r0
 802bf20:	6818      	ldr	r0, [r3, #0]
 802bf22:	f7ff beeb 	b.w	802bcfc <_free_r>
 802bf26:	bf00      	nop
 802bf28:	20000254 	.word	0x20000254

0802bf2c <_malloc_r>:
 802bf2c:	f101 030b 	add.w	r3, r1, #11
 802bf30:	2b16      	cmp	r3, #22
 802bf32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bf36:	4605      	mov	r5, r0
 802bf38:	d906      	bls.n	802bf48 <_malloc_r+0x1c>
 802bf3a:	f033 0707 	bics.w	r7, r3, #7
 802bf3e:	d504      	bpl.n	802bf4a <_malloc_r+0x1e>
 802bf40:	230c      	movs	r3, #12
 802bf42:	602b      	str	r3, [r5, #0]
 802bf44:	2400      	movs	r4, #0
 802bf46:	e1a3      	b.n	802c290 <_malloc_r+0x364>
 802bf48:	2710      	movs	r7, #16
 802bf4a:	42b9      	cmp	r1, r7
 802bf4c:	d8f8      	bhi.n	802bf40 <_malloc_r+0x14>
 802bf4e:	4628      	mov	r0, r5
 802bf50:	f004 faf6 	bl	8030540 <__malloc_lock>
 802bf54:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 802bf58:	4eaf      	ldr	r6, [pc, #700]	@ (802c218 <_malloc_r+0x2ec>)
 802bf5a:	d237      	bcs.n	802bfcc <_malloc_r+0xa0>
 802bf5c:	f107 0208 	add.w	r2, r7, #8
 802bf60:	4432      	add	r2, r6
 802bf62:	f1a2 0108 	sub.w	r1, r2, #8
 802bf66:	6854      	ldr	r4, [r2, #4]
 802bf68:	428c      	cmp	r4, r1
 802bf6a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 802bf6e:	d102      	bne.n	802bf76 <_malloc_r+0x4a>
 802bf70:	68d4      	ldr	r4, [r2, #12]
 802bf72:	42a2      	cmp	r2, r4
 802bf74:	d010      	beq.n	802bf98 <_malloc_r+0x6c>
 802bf76:	6863      	ldr	r3, [r4, #4]
 802bf78:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 802bf7c:	f023 0303 	bic.w	r3, r3, #3
 802bf80:	60ca      	str	r2, [r1, #12]
 802bf82:	4423      	add	r3, r4
 802bf84:	6091      	str	r1, [r2, #8]
 802bf86:	685a      	ldr	r2, [r3, #4]
 802bf88:	f042 0201 	orr.w	r2, r2, #1
 802bf8c:	605a      	str	r2, [r3, #4]
 802bf8e:	4628      	mov	r0, r5
 802bf90:	f004 fadc 	bl	803054c <__malloc_unlock>
 802bf94:	3408      	adds	r4, #8
 802bf96:	e17b      	b.n	802c290 <_malloc_r+0x364>
 802bf98:	3302      	adds	r3, #2
 802bf9a:	6934      	ldr	r4, [r6, #16]
 802bf9c:	499f      	ldr	r1, [pc, #636]	@ (802c21c <_malloc_r+0x2f0>)
 802bf9e:	428c      	cmp	r4, r1
 802bfa0:	d077      	beq.n	802c092 <_malloc_r+0x166>
 802bfa2:	6862      	ldr	r2, [r4, #4]
 802bfa4:	f022 0c03 	bic.w	ip, r2, #3
 802bfa8:	ebac 0007 	sub.w	r0, ip, r7
 802bfac:	280f      	cmp	r0, #15
 802bfae:	dd48      	ble.n	802c042 <_malloc_r+0x116>
 802bfb0:	19e2      	adds	r2, r4, r7
 802bfb2:	f040 0301 	orr.w	r3, r0, #1
 802bfb6:	f047 0701 	orr.w	r7, r7, #1
 802bfba:	6067      	str	r7, [r4, #4]
 802bfbc:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802bfc0:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802bfc4:	6053      	str	r3, [r2, #4]
 802bfc6:	f844 000c 	str.w	r0, [r4, ip]
 802bfca:	e7e0      	b.n	802bf8e <_malloc_r+0x62>
 802bfcc:	0a7b      	lsrs	r3, r7, #9
 802bfce:	d02a      	beq.n	802c026 <_malloc_r+0xfa>
 802bfd0:	2b04      	cmp	r3, #4
 802bfd2:	d812      	bhi.n	802bffa <_malloc_r+0xce>
 802bfd4:	09bb      	lsrs	r3, r7, #6
 802bfd6:	3338      	adds	r3, #56	@ 0x38
 802bfd8:	1c5a      	adds	r2, r3, #1
 802bfda:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 802bfde:	f1a2 0c08 	sub.w	ip, r2, #8
 802bfe2:	6854      	ldr	r4, [r2, #4]
 802bfe4:	4564      	cmp	r4, ip
 802bfe6:	d006      	beq.n	802bff6 <_malloc_r+0xca>
 802bfe8:	6862      	ldr	r2, [r4, #4]
 802bfea:	f022 0203 	bic.w	r2, r2, #3
 802bfee:	1bd0      	subs	r0, r2, r7
 802bff0:	280f      	cmp	r0, #15
 802bff2:	dd1c      	ble.n	802c02e <_malloc_r+0x102>
 802bff4:	3b01      	subs	r3, #1
 802bff6:	3301      	adds	r3, #1
 802bff8:	e7cf      	b.n	802bf9a <_malloc_r+0x6e>
 802bffa:	2b14      	cmp	r3, #20
 802bffc:	d801      	bhi.n	802c002 <_malloc_r+0xd6>
 802bffe:	335b      	adds	r3, #91	@ 0x5b
 802c000:	e7ea      	b.n	802bfd8 <_malloc_r+0xac>
 802c002:	2b54      	cmp	r3, #84	@ 0x54
 802c004:	d802      	bhi.n	802c00c <_malloc_r+0xe0>
 802c006:	0b3b      	lsrs	r3, r7, #12
 802c008:	336e      	adds	r3, #110	@ 0x6e
 802c00a:	e7e5      	b.n	802bfd8 <_malloc_r+0xac>
 802c00c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 802c010:	d802      	bhi.n	802c018 <_malloc_r+0xec>
 802c012:	0bfb      	lsrs	r3, r7, #15
 802c014:	3377      	adds	r3, #119	@ 0x77
 802c016:	e7df      	b.n	802bfd8 <_malloc_r+0xac>
 802c018:	f240 5254 	movw	r2, #1364	@ 0x554
 802c01c:	4293      	cmp	r3, r2
 802c01e:	d804      	bhi.n	802c02a <_malloc_r+0xfe>
 802c020:	0cbb      	lsrs	r3, r7, #18
 802c022:	337c      	adds	r3, #124	@ 0x7c
 802c024:	e7d8      	b.n	802bfd8 <_malloc_r+0xac>
 802c026:	233f      	movs	r3, #63	@ 0x3f
 802c028:	e7d6      	b.n	802bfd8 <_malloc_r+0xac>
 802c02a:	237e      	movs	r3, #126	@ 0x7e
 802c02c:	e7d4      	b.n	802bfd8 <_malloc_r+0xac>
 802c02e:	2800      	cmp	r0, #0
 802c030:	68e1      	ldr	r1, [r4, #12]
 802c032:	db04      	blt.n	802c03e <_malloc_r+0x112>
 802c034:	68a3      	ldr	r3, [r4, #8]
 802c036:	60d9      	str	r1, [r3, #12]
 802c038:	608b      	str	r3, [r1, #8]
 802c03a:	18a3      	adds	r3, r4, r2
 802c03c:	e7a3      	b.n	802bf86 <_malloc_r+0x5a>
 802c03e:	460c      	mov	r4, r1
 802c040:	e7d0      	b.n	802bfe4 <_malloc_r+0xb8>
 802c042:	2800      	cmp	r0, #0
 802c044:	e9c6 1104 	strd	r1, r1, [r6, #16]
 802c048:	db07      	blt.n	802c05a <_malloc_r+0x12e>
 802c04a:	44a4      	add	ip, r4
 802c04c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802c050:	f043 0301 	orr.w	r3, r3, #1
 802c054:	f8cc 3004 	str.w	r3, [ip, #4]
 802c058:	e799      	b.n	802bf8e <_malloc_r+0x62>
 802c05a:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 802c05e:	6870      	ldr	r0, [r6, #4]
 802c060:	f080 8095 	bcs.w	802c18e <_malloc_r+0x262>
 802c064:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 802c068:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 802c06c:	f04f 0c01 	mov.w	ip, #1
 802c070:	3201      	adds	r2, #1
 802c072:	fa0c fc0e 	lsl.w	ip, ip, lr
 802c076:	ea4c 0000 	orr.w	r0, ip, r0
 802c07a:	6070      	str	r0, [r6, #4]
 802c07c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 802c080:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 802c084:	3808      	subs	r0, #8
 802c086:	e9c4 c002 	strd	ip, r0, [r4, #8]
 802c08a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 802c08e:	f8cc 400c 	str.w	r4, [ip, #12]
 802c092:	1098      	asrs	r0, r3, #2
 802c094:	2201      	movs	r2, #1
 802c096:	4082      	lsls	r2, r0
 802c098:	6870      	ldr	r0, [r6, #4]
 802c09a:	4290      	cmp	r0, r2
 802c09c:	d326      	bcc.n	802c0ec <_malloc_r+0x1c0>
 802c09e:	4210      	tst	r0, r2
 802c0a0:	d106      	bne.n	802c0b0 <_malloc_r+0x184>
 802c0a2:	f023 0303 	bic.w	r3, r3, #3
 802c0a6:	0052      	lsls	r2, r2, #1
 802c0a8:	4210      	tst	r0, r2
 802c0aa:	f103 0304 	add.w	r3, r3, #4
 802c0ae:	d0fa      	beq.n	802c0a6 <_malloc_r+0x17a>
 802c0b0:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 802c0b4:	46c1      	mov	r9, r8
 802c0b6:	469e      	mov	lr, r3
 802c0b8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 802c0bc:	454c      	cmp	r4, r9
 802c0be:	f040 80b9 	bne.w	802c234 <_malloc_r+0x308>
 802c0c2:	f10e 0e01 	add.w	lr, lr, #1
 802c0c6:	f01e 0f03 	tst.w	lr, #3
 802c0ca:	f109 0908 	add.w	r9, r9, #8
 802c0ce:	d1f3      	bne.n	802c0b8 <_malloc_r+0x18c>
 802c0d0:	0798      	lsls	r0, r3, #30
 802c0d2:	f040 80e3 	bne.w	802c29c <_malloc_r+0x370>
 802c0d6:	6873      	ldr	r3, [r6, #4]
 802c0d8:	ea23 0302 	bic.w	r3, r3, r2
 802c0dc:	6073      	str	r3, [r6, #4]
 802c0de:	6870      	ldr	r0, [r6, #4]
 802c0e0:	0052      	lsls	r2, r2, #1
 802c0e2:	4290      	cmp	r0, r2
 802c0e4:	d302      	bcc.n	802c0ec <_malloc_r+0x1c0>
 802c0e6:	2a00      	cmp	r2, #0
 802c0e8:	f040 80e5 	bne.w	802c2b6 <_malloc_r+0x38a>
 802c0ec:	f8d6 a008 	ldr.w	sl, [r6, #8]
 802c0f0:	f8da 3004 	ldr.w	r3, [sl, #4]
 802c0f4:	f023 0903 	bic.w	r9, r3, #3
 802c0f8:	45b9      	cmp	r9, r7
 802c0fa:	d304      	bcc.n	802c106 <_malloc_r+0x1da>
 802c0fc:	eba9 0207 	sub.w	r2, r9, r7
 802c100:	2a0f      	cmp	r2, #15
 802c102:	f300 8141 	bgt.w	802c388 <_malloc_r+0x45c>
 802c106:	4b46      	ldr	r3, [pc, #280]	@ (802c220 <_malloc_r+0x2f4>)
 802c108:	6819      	ldr	r1, [r3, #0]
 802c10a:	3110      	adds	r1, #16
 802c10c:	4439      	add	r1, r7
 802c10e:	2008      	movs	r0, #8
 802c110:	9101      	str	r1, [sp, #4]
 802c112:	f006 f8f7 	bl	8032304 <sysconf>
 802c116:	4a43      	ldr	r2, [pc, #268]	@ (802c224 <_malloc_r+0x2f8>)
 802c118:	9901      	ldr	r1, [sp, #4]
 802c11a:	6813      	ldr	r3, [r2, #0]
 802c11c:	3301      	adds	r3, #1
 802c11e:	bf1f      	itttt	ne
 802c120:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 802c124:	1809      	addne	r1, r1, r0
 802c126:	4243      	negne	r3, r0
 802c128:	4019      	andne	r1, r3
 802c12a:	4680      	mov	r8, r0
 802c12c:	4628      	mov	r0, r5
 802c12e:	9101      	str	r1, [sp, #4]
 802c130:	f006 f8d8 	bl	80322e4 <_sbrk_r>
 802c134:	1c42      	adds	r2, r0, #1
 802c136:	eb0a 0b09 	add.w	fp, sl, r9
 802c13a:	4604      	mov	r4, r0
 802c13c:	f000 80f7 	beq.w	802c32e <_malloc_r+0x402>
 802c140:	4583      	cmp	fp, r0
 802c142:	9901      	ldr	r1, [sp, #4]
 802c144:	4a37      	ldr	r2, [pc, #220]	@ (802c224 <_malloc_r+0x2f8>)
 802c146:	d902      	bls.n	802c14e <_malloc_r+0x222>
 802c148:	45b2      	cmp	sl, r6
 802c14a:	f040 80f0 	bne.w	802c32e <_malloc_r+0x402>
 802c14e:	4b36      	ldr	r3, [pc, #216]	@ (802c228 <_malloc_r+0x2fc>)
 802c150:	6818      	ldr	r0, [r3, #0]
 802c152:	45a3      	cmp	fp, r4
 802c154:	eb00 0e01 	add.w	lr, r0, r1
 802c158:	f8c3 e000 	str.w	lr, [r3]
 802c15c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 802c160:	f040 80ab 	bne.w	802c2ba <_malloc_r+0x38e>
 802c164:	ea1b 0f0c 	tst.w	fp, ip
 802c168:	f040 80a7 	bne.w	802c2ba <_malloc_r+0x38e>
 802c16c:	68b2      	ldr	r2, [r6, #8]
 802c16e:	4449      	add	r1, r9
 802c170:	f041 0101 	orr.w	r1, r1, #1
 802c174:	6051      	str	r1, [r2, #4]
 802c176:	4a2d      	ldr	r2, [pc, #180]	@ (802c22c <_malloc_r+0x300>)
 802c178:	681b      	ldr	r3, [r3, #0]
 802c17a:	6811      	ldr	r1, [r2, #0]
 802c17c:	428b      	cmp	r3, r1
 802c17e:	bf88      	it	hi
 802c180:	6013      	strhi	r3, [r2, #0]
 802c182:	4a2b      	ldr	r2, [pc, #172]	@ (802c230 <_malloc_r+0x304>)
 802c184:	6811      	ldr	r1, [r2, #0]
 802c186:	428b      	cmp	r3, r1
 802c188:	bf88      	it	hi
 802c18a:	6013      	strhi	r3, [r2, #0]
 802c18c:	e0cf      	b.n	802c32e <_malloc_r+0x402>
 802c18e:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 802c192:	ea4f 225c 	mov.w	r2, ip, lsr #9
 802c196:	d218      	bcs.n	802c1ca <_malloc_r+0x29e>
 802c198:	ea4f 129c 	mov.w	r2, ip, lsr #6
 802c19c:	3238      	adds	r2, #56	@ 0x38
 802c19e:	f102 0e01 	add.w	lr, r2, #1
 802c1a2:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 802c1a6:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 802c1aa:	45f0      	cmp	r8, lr
 802c1ac:	d12b      	bne.n	802c206 <_malloc_r+0x2da>
 802c1ae:	1092      	asrs	r2, r2, #2
 802c1b0:	f04f 0c01 	mov.w	ip, #1
 802c1b4:	fa0c f202 	lsl.w	r2, ip, r2
 802c1b8:	4302      	orrs	r2, r0
 802c1ba:	6072      	str	r2, [r6, #4]
 802c1bc:	e9c4 e802 	strd	lr, r8, [r4, #8]
 802c1c0:	f8c8 4008 	str.w	r4, [r8, #8]
 802c1c4:	f8ce 400c 	str.w	r4, [lr, #12]
 802c1c8:	e763      	b.n	802c092 <_malloc_r+0x166>
 802c1ca:	2a14      	cmp	r2, #20
 802c1cc:	d801      	bhi.n	802c1d2 <_malloc_r+0x2a6>
 802c1ce:	325b      	adds	r2, #91	@ 0x5b
 802c1d0:	e7e5      	b.n	802c19e <_malloc_r+0x272>
 802c1d2:	2a54      	cmp	r2, #84	@ 0x54
 802c1d4:	d803      	bhi.n	802c1de <_malloc_r+0x2b2>
 802c1d6:	ea4f 321c 	mov.w	r2, ip, lsr #12
 802c1da:	326e      	adds	r2, #110	@ 0x6e
 802c1dc:	e7df      	b.n	802c19e <_malloc_r+0x272>
 802c1de:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802c1e2:	d803      	bhi.n	802c1ec <_malloc_r+0x2c0>
 802c1e4:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 802c1e8:	3277      	adds	r2, #119	@ 0x77
 802c1ea:	e7d8      	b.n	802c19e <_malloc_r+0x272>
 802c1ec:	f240 5e54 	movw	lr, #1364	@ 0x554
 802c1f0:	4572      	cmp	r2, lr
 802c1f2:	bf9a      	itte	ls
 802c1f4:	ea4f 429c 	movls.w	r2, ip, lsr #18
 802c1f8:	327c      	addls	r2, #124	@ 0x7c
 802c1fa:	227e      	movhi	r2, #126	@ 0x7e
 802c1fc:	e7cf      	b.n	802c19e <_malloc_r+0x272>
 802c1fe:	f8de e008 	ldr.w	lr, [lr, #8]
 802c202:	45f0      	cmp	r8, lr
 802c204:	d005      	beq.n	802c212 <_malloc_r+0x2e6>
 802c206:	f8de 2004 	ldr.w	r2, [lr, #4]
 802c20a:	f022 0203 	bic.w	r2, r2, #3
 802c20e:	4562      	cmp	r2, ip
 802c210:	d8f5      	bhi.n	802c1fe <_malloc_r+0x2d2>
 802c212:	f8de 800c 	ldr.w	r8, [lr, #12]
 802c216:	e7d1      	b.n	802c1bc <_malloc_r+0x290>
 802c218:	20000384 	.word	0x20000384
 802c21c:	2000038c 	.word	0x2000038c
 802c220:	200181c4 	.word	0x200181c4
 802c224:	2000037c 	.word	0x2000037c
 802c228:	20018194 	.word	0x20018194
 802c22c:	200181c0 	.word	0x200181c0
 802c230:	200181bc 	.word	0x200181bc
 802c234:	6860      	ldr	r0, [r4, #4]
 802c236:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802c23a:	f020 0003 	bic.w	r0, r0, #3
 802c23e:	eba0 0a07 	sub.w	sl, r0, r7
 802c242:	f1ba 0f0f 	cmp.w	sl, #15
 802c246:	dd12      	ble.n	802c26e <_malloc_r+0x342>
 802c248:	68a3      	ldr	r3, [r4, #8]
 802c24a:	19e2      	adds	r2, r4, r7
 802c24c:	f047 0701 	orr.w	r7, r7, #1
 802c250:	6067      	str	r7, [r4, #4]
 802c252:	f8c3 c00c 	str.w	ip, [r3, #12]
 802c256:	f8cc 3008 	str.w	r3, [ip, #8]
 802c25a:	f04a 0301 	orr.w	r3, sl, #1
 802c25e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802c262:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802c266:	6053      	str	r3, [r2, #4]
 802c268:	f844 a000 	str.w	sl, [r4, r0]
 802c26c:	e68f      	b.n	802bf8e <_malloc_r+0x62>
 802c26e:	f1ba 0f00 	cmp.w	sl, #0
 802c272:	db11      	blt.n	802c298 <_malloc_r+0x36c>
 802c274:	4420      	add	r0, r4
 802c276:	6843      	ldr	r3, [r0, #4]
 802c278:	f043 0301 	orr.w	r3, r3, #1
 802c27c:	6043      	str	r3, [r0, #4]
 802c27e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 802c282:	4628      	mov	r0, r5
 802c284:	f8c3 c00c 	str.w	ip, [r3, #12]
 802c288:	f8cc 3008 	str.w	r3, [ip, #8]
 802c28c:	f004 f95e 	bl	803054c <__malloc_unlock>
 802c290:	4620      	mov	r0, r4
 802c292:	b003      	add	sp, #12
 802c294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c298:	4664      	mov	r4, ip
 802c29a:	e70f      	b.n	802c0bc <_malloc_r+0x190>
 802c29c:	f858 0908 	ldr.w	r0, [r8], #-8
 802c2a0:	4540      	cmp	r0, r8
 802c2a2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 802c2a6:	f43f af13 	beq.w	802c0d0 <_malloc_r+0x1a4>
 802c2aa:	e718      	b.n	802c0de <_malloc_r+0x1b2>
 802c2ac:	3304      	adds	r3, #4
 802c2ae:	0052      	lsls	r2, r2, #1
 802c2b0:	4210      	tst	r0, r2
 802c2b2:	d0fb      	beq.n	802c2ac <_malloc_r+0x380>
 802c2b4:	e6fc      	b.n	802c0b0 <_malloc_r+0x184>
 802c2b6:	4673      	mov	r3, lr
 802c2b8:	e7fa      	b.n	802c2b0 <_malloc_r+0x384>
 802c2ba:	6810      	ldr	r0, [r2, #0]
 802c2bc:	3001      	adds	r0, #1
 802c2be:	bf1b      	ittet	ne
 802c2c0:	eba4 0b0b 	subne.w	fp, r4, fp
 802c2c4:	eb0b 020e 	addne.w	r2, fp, lr
 802c2c8:	6014      	streq	r4, [r2, #0]
 802c2ca:	601a      	strne	r2, [r3, #0]
 802c2cc:	f014 0b07 	ands.w	fp, r4, #7
 802c2d0:	bf1a      	itte	ne
 802c2d2:	f1cb 0008 	rsbne	r0, fp, #8
 802c2d6:	1824      	addne	r4, r4, r0
 802c2d8:	4658      	moveq	r0, fp
 802c2da:	1862      	adds	r2, r4, r1
 802c2dc:	ea02 010c 	and.w	r1, r2, ip
 802c2e0:	4480      	add	r8, r0
 802c2e2:	eba8 0801 	sub.w	r8, r8, r1
 802c2e6:	ea08 080c 	and.w	r8, r8, ip
 802c2ea:	4641      	mov	r1, r8
 802c2ec:	4628      	mov	r0, r5
 802c2ee:	9201      	str	r2, [sp, #4]
 802c2f0:	f005 fff8 	bl	80322e4 <_sbrk_r>
 802c2f4:	1c43      	adds	r3, r0, #1
 802c2f6:	9a01      	ldr	r2, [sp, #4]
 802c2f8:	4b28      	ldr	r3, [pc, #160]	@ (802c39c <_malloc_r+0x470>)
 802c2fa:	d107      	bne.n	802c30c <_malloc_r+0x3e0>
 802c2fc:	f1bb 0f00 	cmp.w	fp, #0
 802c300:	d023      	beq.n	802c34a <_malloc_r+0x41e>
 802c302:	f1ab 0008 	sub.w	r0, fp, #8
 802c306:	4410      	add	r0, r2
 802c308:	f04f 0800 	mov.w	r8, #0
 802c30c:	681a      	ldr	r2, [r3, #0]
 802c30e:	60b4      	str	r4, [r6, #8]
 802c310:	1b00      	subs	r0, r0, r4
 802c312:	4440      	add	r0, r8
 802c314:	4442      	add	r2, r8
 802c316:	f040 0001 	orr.w	r0, r0, #1
 802c31a:	45b2      	cmp	sl, r6
 802c31c:	601a      	str	r2, [r3, #0]
 802c31e:	6060      	str	r0, [r4, #4]
 802c320:	f43f af29 	beq.w	802c176 <_malloc_r+0x24a>
 802c324:	f1b9 0f0f 	cmp.w	r9, #15
 802c328:	d812      	bhi.n	802c350 <_malloc_r+0x424>
 802c32a:	2301      	movs	r3, #1
 802c32c:	6063      	str	r3, [r4, #4]
 802c32e:	68b3      	ldr	r3, [r6, #8]
 802c330:	685b      	ldr	r3, [r3, #4]
 802c332:	f023 0303 	bic.w	r3, r3, #3
 802c336:	42bb      	cmp	r3, r7
 802c338:	eba3 0207 	sub.w	r2, r3, r7
 802c33c:	d301      	bcc.n	802c342 <_malloc_r+0x416>
 802c33e:	2a0f      	cmp	r2, #15
 802c340:	dc22      	bgt.n	802c388 <_malloc_r+0x45c>
 802c342:	4628      	mov	r0, r5
 802c344:	f004 f902 	bl	803054c <__malloc_unlock>
 802c348:	e5fc      	b.n	802bf44 <_malloc_r+0x18>
 802c34a:	4610      	mov	r0, r2
 802c34c:	46d8      	mov	r8, fp
 802c34e:	e7dd      	b.n	802c30c <_malloc_r+0x3e0>
 802c350:	f8da 2004 	ldr.w	r2, [sl, #4]
 802c354:	f1a9 090c 	sub.w	r9, r9, #12
 802c358:	f029 0907 	bic.w	r9, r9, #7
 802c35c:	f002 0201 	and.w	r2, r2, #1
 802c360:	ea42 0209 	orr.w	r2, r2, r9
 802c364:	f8ca 2004 	str.w	r2, [sl, #4]
 802c368:	2105      	movs	r1, #5
 802c36a:	eb0a 0209 	add.w	r2, sl, r9
 802c36e:	f1b9 0f0f 	cmp.w	r9, #15
 802c372:	e9c2 1101 	strd	r1, r1, [r2, #4]
 802c376:	f67f aefe 	bls.w	802c176 <_malloc_r+0x24a>
 802c37a:	f10a 0108 	add.w	r1, sl, #8
 802c37e:	4628      	mov	r0, r5
 802c380:	f7ff fcbc 	bl	802bcfc <_free_r>
 802c384:	4b05      	ldr	r3, [pc, #20]	@ (802c39c <_malloc_r+0x470>)
 802c386:	e6f6      	b.n	802c176 <_malloc_r+0x24a>
 802c388:	68b4      	ldr	r4, [r6, #8]
 802c38a:	f047 0301 	orr.w	r3, r7, #1
 802c38e:	4427      	add	r7, r4
 802c390:	f042 0201 	orr.w	r2, r2, #1
 802c394:	6063      	str	r3, [r4, #4]
 802c396:	60b7      	str	r7, [r6, #8]
 802c398:	607a      	str	r2, [r7, #4]
 802c39a:	e5f8      	b.n	802bf8e <_malloc_r+0x62>
 802c39c:	20018194 	.word	0x20018194

0802c3a0 <__ascii_mbtowc>:
 802c3a0:	b082      	sub	sp, #8
 802c3a2:	b901      	cbnz	r1, 802c3a6 <__ascii_mbtowc+0x6>
 802c3a4:	a901      	add	r1, sp, #4
 802c3a6:	b142      	cbz	r2, 802c3ba <__ascii_mbtowc+0x1a>
 802c3a8:	b14b      	cbz	r3, 802c3be <__ascii_mbtowc+0x1e>
 802c3aa:	7813      	ldrb	r3, [r2, #0]
 802c3ac:	600b      	str	r3, [r1, #0]
 802c3ae:	7812      	ldrb	r2, [r2, #0]
 802c3b0:	1e10      	subs	r0, r2, #0
 802c3b2:	bf18      	it	ne
 802c3b4:	2001      	movne	r0, #1
 802c3b6:	b002      	add	sp, #8
 802c3b8:	4770      	bx	lr
 802c3ba:	4610      	mov	r0, r2
 802c3bc:	e7fb      	b.n	802c3b6 <__ascii_mbtowc+0x16>
 802c3be:	f06f 0001 	mvn.w	r0, #1
 802c3c2:	e7f8      	b.n	802c3b6 <__ascii_mbtowc+0x16>

0802c3c4 <siscanf>:
 802c3c4:	b40e      	push	{r1, r2, r3}
 802c3c6:	b530      	push	{r4, r5, lr}
 802c3c8:	b09c      	sub	sp, #112	@ 0x70
 802c3ca:	ac1f      	add	r4, sp, #124	@ 0x7c
 802c3cc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802c3d0:	f854 5b04 	ldr.w	r5, [r4], #4
 802c3d4:	f8ad 2014 	strh.w	r2, [sp, #20]
 802c3d8:	9002      	str	r0, [sp, #8]
 802c3da:	9006      	str	r0, [sp, #24]
 802c3dc:	f7e3 ff60 	bl	80102a0 <strlen>
 802c3e0:	4b0b      	ldr	r3, [pc, #44]	@ (802c410 <siscanf+0x4c>)
 802c3e2:	9003      	str	r0, [sp, #12]
 802c3e4:	9007      	str	r0, [sp, #28]
 802c3e6:	930a      	str	r3, [sp, #40]	@ 0x28
 802c3e8:	480a      	ldr	r0, [pc, #40]	@ (802c414 <siscanf+0x50>)
 802c3ea:	9401      	str	r4, [sp, #4]
 802c3ec:	2300      	movs	r3, #0
 802c3ee:	930e      	str	r3, [sp, #56]	@ 0x38
 802c3f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802c3f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c3f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 802c3fa:	462a      	mov	r2, r5
 802c3fc:	4623      	mov	r3, r4
 802c3fe:	a902      	add	r1, sp, #8
 802c400:	6800      	ldr	r0, [r0, #0]
 802c402:	f000 fd99 	bl	802cf38 <__ssvfiscanf_r>
 802c406:	b01c      	add	sp, #112	@ 0x70
 802c408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802c40c:	b003      	add	sp, #12
 802c40e:	4770      	bx	lr
 802c410:	080293b3 	.word	0x080293b3
 802c414:	20000254 	.word	0x20000254

0802c418 <sniprintf>:
 802c418:	b40c      	push	{r2, r3}
 802c41a:	b530      	push	{r4, r5, lr}
 802c41c:	4b17      	ldr	r3, [pc, #92]	@ (802c47c <sniprintf+0x64>)
 802c41e:	1e0c      	subs	r4, r1, #0
 802c420:	681d      	ldr	r5, [r3, #0]
 802c422:	b09d      	sub	sp, #116	@ 0x74
 802c424:	da08      	bge.n	802c438 <sniprintf+0x20>
 802c426:	238b      	movs	r3, #139	@ 0x8b
 802c428:	602b      	str	r3, [r5, #0]
 802c42a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c42e:	b01d      	add	sp, #116	@ 0x74
 802c430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802c434:	b002      	add	sp, #8
 802c436:	4770      	bx	lr
 802c438:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802c43c:	f8ad 3014 	strh.w	r3, [sp, #20]
 802c440:	bf14      	ite	ne
 802c442:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802c446:	4623      	moveq	r3, r4
 802c448:	9304      	str	r3, [sp, #16]
 802c44a:	9307      	str	r3, [sp, #28]
 802c44c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c450:	9002      	str	r0, [sp, #8]
 802c452:	9006      	str	r0, [sp, #24]
 802c454:	f8ad 3016 	strh.w	r3, [sp, #22]
 802c458:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802c45a:	ab21      	add	r3, sp, #132	@ 0x84
 802c45c:	a902      	add	r1, sp, #8
 802c45e:	4628      	mov	r0, r5
 802c460:	9301      	str	r3, [sp, #4]
 802c462:	f000 f88b 	bl	802c57c <_svfiprintf_r>
 802c466:	1c43      	adds	r3, r0, #1
 802c468:	bfbc      	itt	lt
 802c46a:	238b      	movlt	r3, #139	@ 0x8b
 802c46c:	602b      	strlt	r3, [r5, #0]
 802c46e:	2c00      	cmp	r4, #0
 802c470:	d0dd      	beq.n	802c42e <sniprintf+0x16>
 802c472:	9b02      	ldr	r3, [sp, #8]
 802c474:	2200      	movs	r2, #0
 802c476:	701a      	strb	r2, [r3, #0]
 802c478:	e7d9      	b.n	802c42e <sniprintf+0x16>
 802c47a:	bf00      	nop
 802c47c:	20000254 	.word	0x20000254

0802c480 <__ssprint_r>:
 802c480:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c484:	6893      	ldr	r3, [r2, #8]
 802c486:	f8d2 b000 	ldr.w	fp, [r2]
 802c48a:	9001      	str	r0, [sp, #4]
 802c48c:	460c      	mov	r4, r1
 802c48e:	4617      	mov	r7, r2
 802c490:	2b00      	cmp	r3, #0
 802c492:	d157      	bne.n	802c544 <__ssprint_r+0xc4>
 802c494:	2000      	movs	r0, #0
 802c496:	2300      	movs	r3, #0
 802c498:	607b      	str	r3, [r7, #4]
 802c49a:	b003      	add	sp, #12
 802c49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c4a0:	e9db a800 	ldrd	sl, r8, [fp]
 802c4a4:	f10b 0b08 	add.w	fp, fp, #8
 802c4a8:	68a6      	ldr	r6, [r4, #8]
 802c4aa:	6820      	ldr	r0, [r4, #0]
 802c4ac:	f1b8 0f00 	cmp.w	r8, #0
 802c4b0:	d0f6      	beq.n	802c4a0 <__ssprint_r+0x20>
 802c4b2:	45b0      	cmp	r8, r6
 802c4b4:	d32e      	bcc.n	802c514 <__ssprint_r+0x94>
 802c4b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c4ba:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802c4be:	d029      	beq.n	802c514 <__ssprint_r+0x94>
 802c4c0:	6921      	ldr	r1, [r4, #16]
 802c4c2:	6965      	ldr	r5, [r4, #20]
 802c4c4:	eba0 0901 	sub.w	r9, r0, r1
 802c4c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802c4cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802c4d0:	f109 0001 	add.w	r0, r9, #1
 802c4d4:	106d      	asrs	r5, r5, #1
 802c4d6:	4440      	add	r0, r8
 802c4d8:	4285      	cmp	r5, r0
 802c4da:	bf38      	it	cc
 802c4dc:	4605      	movcc	r5, r0
 802c4de:	0553      	lsls	r3, r2, #21
 802c4e0:	d534      	bpl.n	802c54c <__ssprint_r+0xcc>
 802c4e2:	9801      	ldr	r0, [sp, #4]
 802c4e4:	4629      	mov	r1, r5
 802c4e6:	f7ff fd21 	bl	802bf2c <_malloc_r>
 802c4ea:	4606      	mov	r6, r0
 802c4ec:	2800      	cmp	r0, #0
 802c4ee:	d038      	beq.n	802c562 <__ssprint_r+0xe2>
 802c4f0:	464a      	mov	r2, r9
 802c4f2:	6921      	ldr	r1, [r4, #16]
 802c4f4:	f7fe fd00 	bl	802aef8 <memcpy>
 802c4f8:	89a2      	ldrh	r2, [r4, #12]
 802c4fa:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802c4fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802c502:	81a2      	strh	r2, [r4, #12]
 802c504:	6126      	str	r6, [r4, #16]
 802c506:	6165      	str	r5, [r4, #20]
 802c508:	444e      	add	r6, r9
 802c50a:	eba5 0509 	sub.w	r5, r5, r9
 802c50e:	6026      	str	r6, [r4, #0]
 802c510:	60a5      	str	r5, [r4, #8]
 802c512:	4646      	mov	r6, r8
 802c514:	4546      	cmp	r6, r8
 802c516:	bf28      	it	cs
 802c518:	4646      	movcs	r6, r8
 802c51a:	4632      	mov	r2, r6
 802c51c:	4651      	mov	r1, sl
 802c51e:	6820      	ldr	r0, [r4, #0]
 802c520:	f7fd fa94 	bl	8029a4c <memmove>
 802c524:	68a2      	ldr	r2, [r4, #8]
 802c526:	1b92      	subs	r2, r2, r6
 802c528:	60a2      	str	r2, [r4, #8]
 802c52a:	6822      	ldr	r2, [r4, #0]
 802c52c:	4432      	add	r2, r6
 802c52e:	6022      	str	r2, [r4, #0]
 802c530:	68ba      	ldr	r2, [r7, #8]
 802c532:	eba2 0308 	sub.w	r3, r2, r8
 802c536:	44c2      	add	sl, r8
 802c538:	60bb      	str	r3, [r7, #8]
 802c53a:	2b00      	cmp	r3, #0
 802c53c:	d0aa      	beq.n	802c494 <__ssprint_r+0x14>
 802c53e:	f04f 0800 	mov.w	r8, #0
 802c542:	e7b1      	b.n	802c4a8 <__ssprint_r+0x28>
 802c544:	f04f 0a00 	mov.w	sl, #0
 802c548:	46d0      	mov	r8, sl
 802c54a:	e7ad      	b.n	802c4a8 <__ssprint_r+0x28>
 802c54c:	9801      	ldr	r0, [sp, #4]
 802c54e:	462a      	mov	r2, r5
 802c550:	f004 fcfc 	bl	8030f4c <_realloc_r>
 802c554:	4606      	mov	r6, r0
 802c556:	2800      	cmp	r0, #0
 802c558:	d1d4      	bne.n	802c504 <__ssprint_r+0x84>
 802c55a:	6921      	ldr	r1, [r4, #16]
 802c55c:	9801      	ldr	r0, [sp, #4]
 802c55e:	f7ff fbcd 	bl	802bcfc <_free_r>
 802c562:	9a01      	ldr	r2, [sp, #4]
 802c564:	230c      	movs	r3, #12
 802c566:	6013      	str	r3, [r2, #0]
 802c568:	89a3      	ldrh	r3, [r4, #12]
 802c56a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c56e:	81a3      	strh	r3, [r4, #12]
 802c570:	2300      	movs	r3, #0
 802c572:	60bb      	str	r3, [r7, #8]
 802c574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c578:	e78d      	b.n	802c496 <__ssprint_r+0x16>
	...

0802c57c <_svfiprintf_r>:
 802c57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c580:	461d      	mov	r5, r3
 802c582:	898b      	ldrh	r3, [r1, #12]
 802c584:	b0bb      	sub	sp, #236	@ 0xec
 802c586:	468b      	mov	fp, r1
 802c588:	0619      	lsls	r1, r3, #24
 802c58a:	9001      	str	r0, [sp, #4]
 802c58c:	9202      	str	r2, [sp, #8]
 802c58e:	d514      	bpl.n	802c5ba <_svfiprintf_r+0x3e>
 802c590:	f8db 3010 	ldr.w	r3, [fp, #16]
 802c594:	b98b      	cbnz	r3, 802c5ba <_svfiprintf_r+0x3e>
 802c596:	2140      	movs	r1, #64	@ 0x40
 802c598:	f7ff fcc8 	bl	802bf2c <_malloc_r>
 802c59c:	f8cb 0000 	str.w	r0, [fp]
 802c5a0:	f8cb 0010 	str.w	r0, [fp, #16]
 802c5a4:	b930      	cbnz	r0, 802c5b4 <_svfiprintf_r+0x38>
 802c5a6:	9a01      	ldr	r2, [sp, #4]
 802c5a8:	230c      	movs	r3, #12
 802c5aa:	6013      	str	r3, [r2, #0]
 802c5ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802c5b0:	9304      	str	r3, [sp, #16]
 802c5b2:	e3df      	b.n	802cd74 <_svfiprintf_r+0x7f8>
 802c5b4:	2340      	movs	r3, #64	@ 0x40
 802c5b6:	f8cb 3014 	str.w	r3, [fp, #20]
 802c5ba:	2300      	movs	r3, #0
 802c5bc:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802c5c0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802c5c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 802c5c8:	ae11      	add	r6, sp, #68	@ 0x44
 802c5ca:	960e      	str	r6, [sp, #56]	@ 0x38
 802c5cc:	9304      	str	r3, [sp, #16]
 802c5ce:	9b02      	ldr	r3, [sp, #8]
 802c5d0:	461c      	mov	r4, r3
 802c5d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c5d6:	b10a      	cbz	r2, 802c5dc <_svfiprintf_r+0x60>
 802c5d8:	2a25      	cmp	r2, #37	@ 0x25
 802c5da:	d1f9      	bne.n	802c5d0 <_svfiprintf_r+0x54>
 802c5dc:	9a02      	ldr	r2, [sp, #8]
 802c5de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802c5e0:	1aa7      	subs	r7, r4, r2
 802c5e2:	d00c      	beq.n	802c5fe <_svfiprintf_r+0x82>
 802c5e4:	443b      	add	r3, r7
 802c5e6:	9310      	str	r3, [sp, #64]	@ 0x40
 802c5e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802c5ea:	3301      	adds	r3, #1
 802c5ec:	2b07      	cmp	r3, #7
 802c5ee:	e9c6 2700 	strd	r2, r7, [r6]
 802c5f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 802c5f4:	dc76      	bgt.n	802c6e4 <_svfiprintf_r+0x168>
 802c5f6:	3608      	adds	r6, #8
 802c5f8:	9b04      	ldr	r3, [sp, #16]
 802c5fa:	443b      	add	r3, r7
 802c5fc:	9304      	str	r3, [sp, #16]
 802c5fe:	7823      	ldrb	r3, [r4, #0]
 802c600:	2b00      	cmp	r3, #0
 802c602:	f000 83ce 	beq.w	802cda2 <_svfiprintf_r+0x826>
 802c606:	2300      	movs	r3, #0
 802c608:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802c60c:	3401      	adds	r4, #1
 802c60e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802c612:	9200      	str	r2, [sp, #0]
 802c614:	9303      	str	r3, [sp, #12]
 802c616:	4699      	mov	r9, r3
 802c618:	4622      	mov	r2, r4
 802c61a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802c61e:	9202      	str	r2, [sp, #8]
 802c620:	f1a3 0220 	sub.w	r2, r3, #32
 802c624:	2a5a      	cmp	r2, #90	@ 0x5a
 802c626:	f200 8318 	bhi.w	802cc5a <_svfiprintf_r+0x6de>
 802c62a:	e8df f012 	tbh	[pc, r2, lsl #1]
 802c62e:	009a      	.short	0x009a
 802c630:	03160316 	.word	0x03160316
 802c634:	031600a2 	.word	0x031600a2
 802c638:	03160316 	.word	0x03160316
 802c63c:	03160082 	.word	0x03160082
 802c640:	00a50316 	.word	0x00a50316
 802c644:	031600af 	.word	0x031600af
 802c648:	00b100ac 	.word	0x00b100ac
 802c64c:	00cc0316 	.word	0x00cc0316
 802c650:	00cf00cf 	.word	0x00cf00cf
 802c654:	00cf00cf 	.word	0x00cf00cf
 802c658:	00cf00cf 	.word	0x00cf00cf
 802c65c:	00cf00cf 	.word	0x00cf00cf
 802c660:	031600cf 	.word	0x031600cf
 802c664:	03160316 	.word	0x03160316
 802c668:	03160316 	.word	0x03160316
 802c66c:	03160316 	.word	0x03160316
 802c670:	03160316 	.word	0x03160316
 802c674:	010600f9 	.word	0x010600f9
 802c678:	03160316 	.word	0x03160316
 802c67c:	03160316 	.word	0x03160316
 802c680:	03160316 	.word	0x03160316
 802c684:	03160316 	.word	0x03160316
 802c688:	03160316 	.word	0x03160316
 802c68c:	03160154 	.word	0x03160154
 802c690:	03160316 	.word	0x03160316
 802c694:	0316019b 	.word	0x0316019b
 802c698:	0316027d 	.word	0x0316027d
 802c69c:	029d0316 	.word	0x029d0316
 802c6a0:	03160316 	.word	0x03160316
 802c6a4:	03160316 	.word	0x03160316
 802c6a8:	03160316 	.word	0x03160316
 802c6ac:	03160316 	.word	0x03160316
 802c6b0:	03160316 	.word	0x03160316
 802c6b4:	010800f9 	.word	0x010800f9
 802c6b8:	03160316 	.word	0x03160316
 802c6bc:	00df0316 	.word	0x00df0316
 802c6c0:	00f30108 	.word	0x00f30108
 802c6c4:	00ec0316 	.word	0x00ec0316
 802c6c8:	01340316 	.word	0x01340316
 802c6cc:	018a0156 	.word	0x018a0156
 802c6d0:	031600f3 	.word	0x031600f3
 802c6d4:	0098019b 	.word	0x0098019b
 802c6d8:	0316027f 	.word	0x0316027f
 802c6dc:	00650316 	.word	0x00650316
 802c6e0:	00980316 	.word	0x00980316
 802c6e4:	9801      	ldr	r0, [sp, #4]
 802c6e6:	aa0e      	add	r2, sp, #56	@ 0x38
 802c6e8:	4659      	mov	r1, fp
 802c6ea:	f7ff fec9 	bl	802c480 <__ssprint_r>
 802c6ee:	2800      	cmp	r0, #0
 802c6f0:	f040 833b 	bne.w	802cd6a <_svfiprintf_r+0x7ee>
 802c6f4:	ae11      	add	r6, sp, #68	@ 0x44
 802c6f6:	e77f      	b.n	802c5f8 <_svfiprintf_r+0x7c>
 802c6f8:	4a99      	ldr	r2, [pc, #612]	@ (802c960 <_svfiprintf_r+0x3e4>)
 802c6fa:	9205      	str	r2, [sp, #20]
 802c6fc:	f019 0220 	ands.w	r2, r9, #32
 802c700:	f000 8234 	beq.w	802cb6c <_svfiprintf_r+0x5f0>
 802c704:	3507      	adds	r5, #7
 802c706:	f025 0507 	bic.w	r5, r5, #7
 802c70a:	462f      	mov	r7, r5
 802c70c:	686d      	ldr	r5, [r5, #4]
 802c70e:	f857 4b08 	ldr.w	r4, [r7], #8
 802c712:	f019 0f01 	tst.w	r9, #1
 802c716:	d009      	beq.n	802c72c <_svfiprintf_r+0x1b0>
 802c718:	ea54 0205 	orrs.w	r2, r4, r5
 802c71c:	bf1f      	itttt	ne
 802c71e:	2230      	movne	r2, #48	@ 0x30
 802c720:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802c724:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802c728:	f049 0902 	orrne.w	r9, r9, #2
 802c72c:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802c730:	e113      	b.n	802c95a <_svfiprintf_r+0x3de>
 802c732:	9801      	ldr	r0, [sp, #4]
 802c734:	f7fe fb32 	bl	802ad9c <_localeconv_r>
 802c738:	6843      	ldr	r3, [r0, #4]
 802c73a:	9308      	str	r3, [sp, #32]
 802c73c:	4618      	mov	r0, r3
 802c73e:	f7e3 fdaf 	bl	80102a0 <strlen>
 802c742:	9007      	str	r0, [sp, #28]
 802c744:	9801      	ldr	r0, [sp, #4]
 802c746:	f7fe fb29 	bl	802ad9c <_localeconv_r>
 802c74a:	6883      	ldr	r3, [r0, #8]
 802c74c:	9306      	str	r3, [sp, #24]
 802c74e:	9b07      	ldr	r3, [sp, #28]
 802c750:	b12b      	cbz	r3, 802c75e <_svfiprintf_r+0x1e2>
 802c752:	9b06      	ldr	r3, [sp, #24]
 802c754:	b11b      	cbz	r3, 802c75e <_svfiprintf_r+0x1e2>
 802c756:	781b      	ldrb	r3, [r3, #0]
 802c758:	b10b      	cbz	r3, 802c75e <_svfiprintf_r+0x1e2>
 802c75a:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 802c75e:	9c02      	ldr	r4, [sp, #8]
 802c760:	e75a      	b.n	802c618 <_svfiprintf_r+0x9c>
 802c762:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802c766:	2b00      	cmp	r3, #0
 802c768:	d1f9      	bne.n	802c75e <_svfiprintf_r+0x1e2>
 802c76a:	2320      	movs	r3, #32
 802c76c:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802c770:	e7f5      	b.n	802c75e <_svfiprintf_r+0x1e2>
 802c772:	f049 0901 	orr.w	r9, r9, #1
 802c776:	e7f2      	b.n	802c75e <_svfiprintf_r+0x1e2>
 802c778:	f855 3b04 	ldr.w	r3, [r5], #4
 802c77c:	9303      	str	r3, [sp, #12]
 802c77e:	2b00      	cmp	r3, #0
 802c780:	daed      	bge.n	802c75e <_svfiprintf_r+0x1e2>
 802c782:	425b      	negs	r3, r3
 802c784:	9303      	str	r3, [sp, #12]
 802c786:	f049 0904 	orr.w	r9, r9, #4
 802c78a:	e7e8      	b.n	802c75e <_svfiprintf_r+0x1e2>
 802c78c:	232b      	movs	r3, #43	@ 0x2b
 802c78e:	e7ed      	b.n	802c76c <_svfiprintf_r+0x1f0>
 802c790:	9a02      	ldr	r2, [sp, #8]
 802c792:	f812 3b01 	ldrb.w	r3, [r2], #1
 802c796:	2b2a      	cmp	r3, #42	@ 0x2a
 802c798:	d111      	bne.n	802c7be <_svfiprintf_r+0x242>
 802c79a:	f855 3b04 	ldr.w	r3, [r5], #4
 802c79e:	9202      	str	r2, [sp, #8]
 802c7a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802c7a4:	9300      	str	r3, [sp, #0]
 802c7a6:	e7da      	b.n	802c75e <_svfiprintf_r+0x1e2>
 802c7a8:	9b00      	ldr	r3, [sp, #0]
 802c7aa:	fb00 1303 	mla	r3, r0, r3, r1
 802c7ae:	9300      	str	r3, [sp, #0]
 802c7b0:	f812 3b01 	ldrb.w	r3, [r2], #1
 802c7b4:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802c7b8:	2909      	cmp	r1, #9
 802c7ba:	d9f5      	bls.n	802c7a8 <_svfiprintf_r+0x22c>
 802c7bc:	e72f      	b.n	802c61e <_svfiprintf_r+0xa2>
 802c7be:	2100      	movs	r1, #0
 802c7c0:	9100      	str	r1, [sp, #0]
 802c7c2:	200a      	movs	r0, #10
 802c7c4:	e7f6      	b.n	802c7b4 <_svfiprintf_r+0x238>
 802c7c6:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 802c7ca:	e7c8      	b.n	802c75e <_svfiprintf_r+0x1e2>
 802c7cc:	2100      	movs	r1, #0
 802c7ce:	9a02      	ldr	r2, [sp, #8]
 802c7d0:	9103      	str	r1, [sp, #12]
 802c7d2:	200a      	movs	r0, #10
 802c7d4:	9903      	ldr	r1, [sp, #12]
 802c7d6:	3b30      	subs	r3, #48	@ 0x30
 802c7d8:	fb00 3301 	mla	r3, r0, r1, r3
 802c7dc:	9303      	str	r3, [sp, #12]
 802c7de:	f812 3b01 	ldrb.w	r3, [r2], #1
 802c7e2:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802c7e6:	2909      	cmp	r1, #9
 802c7e8:	d9f4      	bls.n	802c7d4 <_svfiprintf_r+0x258>
 802c7ea:	e718      	b.n	802c61e <_svfiprintf_r+0xa2>
 802c7ec:	9b02      	ldr	r3, [sp, #8]
 802c7ee:	781b      	ldrb	r3, [r3, #0]
 802c7f0:	2b68      	cmp	r3, #104	@ 0x68
 802c7f2:	bf01      	itttt	eq
 802c7f4:	9b02      	ldreq	r3, [sp, #8]
 802c7f6:	3301      	addeq	r3, #1
 802c7f8:	9302      	streq	r3, [sp, #8]
 802c7fa:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 802c7fe:	bf18      	it	ne
 802c800:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 802c804:	e7ab      	b.n	802c75e <_svfiprintf_r+0x1e2>
 802c806:	9b02      	ldr	r3, [sp, #8]
 802c808:	781b      	ldrb	r3, [r3, #0]
 802c80a:	2b6c      	cmp	r3, #108	@ 0x6c
 802c80c:	d105      	bne.n	802c81a <_svfiprintf_r+0x29e>
 802c80e:	9b02      	ldr	r3, [sp, #8]
 802c810:	3301      	adds	r3, #1
 802c812:	9302      	str	r3, [sp, #8]
 802c814:	f049 0920 	orr.w	r9, r9, #32
 802c818:	e7a1      	b.n	802c75e <_svfiprintf_r+0x1e2>
 802c81a:	f049 0910 	orr.w	r9, r9, #16
 802c81e:	e79e      	b.n	802c75e <_svfiprintf_r+0x1e2>
 802c820:	462f      	mov	r7, r5
 802c822:	2400      	movs	r4, #0
 802c824:	f857 3b04 	ldr.w	r3, [r7], #4
 802c828:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802c82c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802c830:	2301      	movs	r3, #1
 802c832:	9300      	str	r3, [sp, #0]
 802c834:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 802c838:	e0aa      	b.n	802c990 <_svfiprintf_r+0x414>
 802c83a:	f049 0910 	orr.w	r9, r9, #16
 802c83e:	f019 0f20 	tst.w	r9, #32
 802c842:	d011      	beq.n	802c868 <_svfiprintf_r+0x2ec>
 802c844:	3507      	adds	r5, #7
 802c846:	f025 0507 	bic.w	r5, r5, #7
 802c84a:	462f      	mov	r7, r5
 802c84c:	686d      	ldr	r5, [r5, #4]
 802c84e:	f857 4b08 	ldr.w	r4, [r7], #8
 802c852:	2d00      	cmp	r5, #0
 802c854:	da06      	bge.n	802c864 <_svfiprintf_r+0x2e8>
 802c856:	4264      	negs	r4, r4
 802c858:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802c85c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802c860:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802c864:	2301      	movs	r3, #1
 802c866:	e048      	b.n	802c8fa <_svfiprintf_r+0x37e>
 802c868:	462f      	mov	r7, r5
 802c86a:	f019 0f10 	tst.w	r9, #16
 802c86e:	f857 5b04 	ldr.w	r5, [r7], #4
 802c872:	d002      	beq.n	802c87a <_svfiprintf_r+0x2fe>
 802c874:	462c      	mov	r4, r5
 802c876:	17ed      	asrs	r5, r5, #31
 802c878:	e7eb      	b.n	802c852 <_svfiprintf_r+0x2d6>
 802c87a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802c87e:	d003      	beq.n	802c888 <_svfiprintf_r+0x30c>
 802c880:	b22c      	sxth	r4, r5
 802c882:	f345 35c0 	sbfx	r5, r5, #15, #1
 802c886:	e7e4      	b.n	802c852 <_svfiprintf_r+0x2d6>
 802c888:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802c88c:	d0f2      	beq.n	802c874 <_svfiprintf_r+0x2f8>
 802c88e:	b26c      	sxtb	r4, r5
 802c890:	f345 15c0 	sbfx	r5, r5, #7, #1
 802c894:	e7dd      	b.n	802c852 <_svfiprintf_r+0x2d6>
 802c896:	f019 0f20 	tst.w	r9, #32
 802c89a:	d007      	beq.n	802c8ac <_svfiprintf_r+0x330>
 802c89c:	9a04      	ldr	r2, [sp, #16]
 802c89e:	682b      	ldr	r3, [r5, #0]
 802c8a0:	9904      	ldr	r1, [sp, #16]
 802c8a2:	17d2      	asrs	r2, r2, #31
 802c8a4:	e9c3 1200 	strd	r1, r2, [r3]
 802c8a8:	3504      	adds	r5, #4
 802c8aa:	e690      	b.n	802c5ce <_svfiprintf_r+0x52>
 802c8ac:	f019 0f10 	tst.w	r9, #16
 802c8b0:	d003      	beq.n	802c8ba <_svfiprintf_r+0x33e>
 802c8b2:	682b      	ldr	r3, [r5, #0]
 802c8b4:	9a04      	ldr	r2, [sp, #16]
 802c8b6:	601a      	str	r2, [r3, #0]
 802c8b8:	e7f6      	b.n	802c8a8 <_svfiprintf_r+0x32c>
 802c8ba:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802c8be:	d003      	beq.n	802c8c8 <_svfiprintf_r+0x34c>
 802c8c0:	682b      	ldr	r3, [r5, #0]
 802c8c2:	9a04      	ldr	r2, [sp, #16]
 802c8c4:	801a      	strh	r2, [r3, #0]
 802c8c6:	e7ef      	b.n	802c8a8 <_svfiprintf_r+0x32c>
 802c8c8:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802c8cc:	d0f1      	beq.n	802c8b2 <_svfiprintf_r+0x336>
 802c8ce:	682b      	ldr	r3, [r5, #0]
 802c8d0:	9a04      	ldr	r2, [sp, #16]
 802c8d2:	701a      	strb	r2, [r3, #0]
 802c8d4:	e7e8      	b.n	802c8a8 <_svfiprintf_r+0x32c>
 802c8d6:	f049 0910 	orr.w	r9, r9, #16
 802c8da:	f019 0320 	ands.w	r3, r9, #32
 802c8de:	d01e      	beq.n	802c91e <_svfiprintf_r+0x3a2>
 802c8e0:	3507      	adds	r5, #7
 802c8e2:	f025 0507 	bic.w	r5, r5, #7
 802c8e6:	462f      	mov	r7, r5
 802c8e8:	686d      	ldr	r5, [r5, #4]
 802c8ea:	f857 4b08 	ldr.w	r4, [r7], #8
 802c8ee:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802c8f2:	2300      	movs	r3, #0
 802c8f4:	2200      	movs	r2, #0
 802c8f6:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802c8fa:	9a00      	ldr	r2, [sp, #0]
 802c8fc:	3201      	adds	r2, #1
 802c8fe:	f000 8259 	beq.w	802cdb4 <_svfiprintf_r+0x838>
 802c902:	ea54 0205 	orrs.w	r2, r4, r5
 802c906:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 802c90a:	f040 8258 	bne.w	802cdbe <_svfiprintf_r+0x842>
 802c90e:	9a00      	ldr	r2, [sp, #0]
 802c910:	2a00      	cmp	r2, #0
 802c912:	f000 8199 	beq.w	802cc48 <_svfiprintf_r+0x6cc>
 802c916:	2b01      	cmp	r3, #1
 802c918:	f040 8254 	bne.w	802cdc4 <_svfiprintf_r+0x848>
 802c91c:	e13d      	b.n	802cb9a <_svfiprintf_r+0x61e>
 802c91e:	462f      	mov	r7, r5
 802c920:	f019 0510 	ands.w	r5, r9, #16
 802c924:	f857 4b04 	ldr.w	r4, [r7], #4
 802c928:	d001      	beq.n	802c92e <_svfiprintf_r+0x3b2>
 802c92a:	461d      	mov	r5, r3
 802c92c:	e7df      	b.n	802c8ee <_svfiprintf_r+0x372>
 802c92e:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802c932:	d001      	beq.n	802c938 <_svfiprintf_r+0x3bc>
 802c934:	b2a4      	uxth	r4, r4
 802c936:	e7da      	b.n	802c8ee <_svfiprintf_r+0x372>
 802c938:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802c93c:	d0d7      	beq.n	802c8ee <_svfiprintf_r+0x372>
 802c93e:	b2e4      	uxtb	r4, r4
 802c940:	e7f3      	b.n	802c92a <_svfiprintf_r+0x3ae>
 802c942:	462f      	mov	r7, r5
 802c944:	f647 0330 	movw	r3, #30768	@ 0x7830
 802c948:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802c94c:	f857 4b04 	ldr.w	r4, [r7], #4
 802c950:	4b03      	ldr	r3, [pc, #12]	@ (802c960 <_svfiprintf_r+0x3e4>)
 802c952:	9305      	str	r3, [sp, #20]
 802c954:	2500      	movs	r5, #0
 802c956:	f049 0902 	orr.w	r9, r9, #2
 802c95a:	2302      	movs	r3, #2
 802c95c:	e7ca      	b.n	802c8f4 <_svfiprintf_r+0x378>
 802c95e:	bf00      	nop
 802c960:	080380cb 	.word	0x080380cb
 802c964:	9b00      	ldr	r3, [sp, #0]
 802c966:	462f      	mov	r7, r5
 802c968:	1c5a      	adds	r2, r3, #1
 802c96a:	f04f 0500 	mov.w	r5, #0
 802c96e:	f857 8b04 	ldr.w	r8, [r7], #4
 802c972:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802c976:	f000 80d2 	beq.w	802cb1e <_svfiprintf_r+0x5a2>
 802c97a:	461a      	mov	r2, r3
 802c97c:	4629      	mov	r1, r5
 802c97e:	4640      	mov	r0, r8
 802c980:	f7e3 fc3e 	bl	8010200 <memchr>
 802c984:	4604      	mov	r4, r0
 802c986:	b118      	cbz	r0, 802c990 <_svfiprintf_r+0x414>
 802c988:	eba0 0308 	sub.w	r3, r0, r8
 802c98c:	9300      	str	r3, [sp, #0]
 802c98e:	462c      	mov	r4, r5
 802c990:	9d00      	ldr	r5, [sp, #0]
 802c992:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802c996:	42a5      	cmp	r5, r4
 802c998:	bfb8      	it	lt
 802c99a:	4625      	movlt	r5, r4
 802c99c:	b103      	cbz	r3, 802c9a0 <_svfiprintf_r+0x424>
 802c99e:	3501      	adds	r5, #1
 802c9a0:	f019 0302 	ands.w	r3, r9, #2
 802c9a4:	9309      	str	r3, [sp, #36]	@ 0x24
 802c9a6:	bf18      	it	ne
 802c9a8:	3502      	addne	r5, #2
 802c9aa:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 802c9ae:	930a      	str	r3, [sp, #40]	@ 0x28
 802c9b0:	d123      	bne.n	802c9fa <_svfiprintf_r+0x47e>
 802c9b2:	9b03      	ldr	r3, [sp, #12]
 802c9b4:	eba3 0a05 	sub.w	sl, r3, r5
 802c9b8:	f1ba 0f00 	cmp.w	sl, #0
 802c9bc:	dd1d      	ble.n	802c9fa <_svfiprintf_r+0x47e>
 802c9be:	4bac      	ldr	r3, [pc, #688]	@ (802cc70 <_svfiprintf_r+0x6f4>)
 802c9c0:	6033      	str	r3, [r6, #0]
 802c9c2:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802c9c6:	f1ba 0f10 	cmp.w	sl, #16
 802c9ca:	f102 0201 	add.w	r2, r2, #1
 802c9ce:	f106 0008 	add.w	r0, r6, #8
 802c9d2:	f300 8153 	bgt.w	802cc7c <_svfiprintf_r+0x700>
 802c9d6:	eb0c 010a 	add.w	r1, ip, sl
 802c9da:	2a07      	cmp	r2, #7
 802c9dc:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802c9e0:	f8c6 a004 	str.w	sl, [r6, #4]
 802c9e4:	f340 815e 	ble.w	802cca4 <_svfiprintf_r+0x728>
 802c9e8:	9801      	ldr	r0, [sp, #4]
 802c9ea:	aa0e      	add	r2, sp, #56	@ 0x38
 802c9ec:	4659      	mov	r1, fp
 802c9ee:	f7ff fd47 	bl	802c480 <__ssprint_r>
 802c9f2:	2800      	cmp	r0, #0
 802c9f4:	f040 81b9 	bne.w	802cd6a <_svfiprintf_r+0x7ee>
 802c9f8:	ae11      	add	r6, sp, #68	@ 0x44
 802c9fa:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802c9fe:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802ca02:	b161      	cbz	r1, 802ca1e <_svfiprintf_r+0x4a2>
 802ca04:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802ca08:	3301      	adds	r3, #1
 802ca0a:	6031      	str	r1, [r6, #0]
 802ca0c:	2101      	movs	r1, #1
 802ca0e:	440a      	add	r2, r1
 802ca10:	2b07      	cmp	r3, #7
 802ca12:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802ca16:	6071      	str	r1, [r6, #4]
 802ca18:	f300 8146 	bgt.w	802cca8 <_svfiprintf_r+0x72c>
 802ca1c:	3608      	adds	r6, #8
 802ca1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802ca20:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802ca24:	b159      	cbz	r1, 802ca3e <_svfiprintf_r+0x4c2>
 802ca26:	a90d      	add	r1, sp, #52	@ 0x34
 802ca28:	3301      	adds	r3, #1
 802ca2a:	6031      	str	r1, [r6, #0]
 802ca2c:	2102      	movs	r1, #2
 802ca2e:	440a      	add	r2, r1
 802ca30:	2b07      	cmp	r3, #7
 802ca32:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802ca36:	6071      	str	r1, [r6, #4]
 802ca38:	f300 813f 	bgt.w	802ccba <_svfiprintf_r+0x73e>
 802ca3c:	3608      	adds	r6, #8
 802ca3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ca40:	2b80      	cmp	r3, #128	@ 0x80
 802ca42:	d123      	bne.n	802ca8c <_svfiprintf_r+0x510>
 802ca44:	9b03      	ldr	r3, [sp, #12]
 802ca46:	eba3 0a05 	sub.w	sl, r3, r5
 802ca4a:	f1ba 0f00 	cmp.w	sl, #0
 802ca4e:	dd1d      	ble.n	802ca8c <_svfiprintf_r+0x510>
 802ca50:	4b88      	ldr	r3, [pc, #544]	@ (802cc74 <_svfiprintf_r+0x6f8>)
 802ca52:	6033      	str	r3, [r6, #0]
 802ca54:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802ca58:	f1ba 0f10 	cmp.w	sl, #16
 802ca5c:	f102 0201 	add.w	r2, r2, #1
 802ca60:	f106 0008 	add.w	r0, r6, #8
 802ca64:	f300 8132 	bgt.w	802cccc <_svfiprintf_r+0x750>
 802ca68:	eb0c 010a 	add.w	r1, ip, sl
 802ca6c:	2a07      	cmp	r2, #7
 802ca6e:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802ca72:	f8c6 a004 	str.w	sl, [r6, #4]
 802ca76:	f340 813d 	ble.w	802ccf4 <_svfiprintf_r+0x778>
 802ca7a:	9801      	ldr	r0, [sp, #4]
 802ca7c:	aa0e      	add	r2, sp, #56	@ 0x38
 802ca7e:	4659      	mov	r1, fp
 802ca80:	f7ff fcfe 	bl	802c480 <__ssprint_r>
 802ca84:	2800      	cmp	r0, #0
 802ca86:	f040 8170 	bne.w	802cd6a <_svfiprintf_r+0x7ee>
 802ca8a:	ae11      	add	r6, sp, #68	@ 0x44
 802ca8c:	9b00      	ldr	r3, [sp, #0]
 802ca8e:	1ae4      	subs	r4, r4, r3
 802ca90:	2c00      	cmp	r4, #0
 802ca92:	dd1a      	ble.n	802caca <_svfiprintf_r+0x54e>
 802ca94:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802ca98:	4876      	ldr	r0, [pc, #472]	@ (802cc74 <_svfiprintf_r+0x6f8>)
 802ca9a:	6030      	str	r0, [r6, #0]
 802ca9c:	2c10      	cmp	r4, #16
 802ca9e:	f103 0301 	add.w	r3, r3, #1
 802caa2:	f106 0108 	add.w	r1, r6, #8
 802caa6:	f300 8127 	bgt.w	802ccf8 <_svfiprintf_r+0x77c>
 802caaa:	6074      	str	r4, [r6, #4]
 802caac:	2b07      	cmp	r3, #7
 802caae:	4414      	add	r4, r2
 802cab0:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802cab4:	f340 8131 	ble.w	802cd1a <_svfiprintf_r+0x79e>
 802cab8:	9801      	ldr	r0, [sp, #4]
 802caba:	aa0e      	add	r2, sp, #56	@ 0x38
 802cabc:	4659      	mov	r1, fp
 802cabe:	f7ff fcdf 	bl	802c480 <__ssprint_r>
 802cac2:	2800      	cmp	r0, #0
 802cac4:	f040 8151 	bne.w	802cd6a <_svfiprintf_r+0x7ee>
 802cac8:	ae11      	add	r6, sp, #68	@ 0x44
 802caca:	9b00      	ldr	r3, [sp, #0]
 802cacc:	9a00      	ldr	r2, [sp, #0]
 802cace:	6073      	str	r3, [r6, #4]
 802cad0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802cad2:	f8c6 8000 	str.w	r8, [r6]
 802cad6:	4413      	add	r3, r2
 802cad8:	9310      	str	r3, [sp, #64]	@ 0x40
 802cada:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802cadc:	3301      	adds	r3, #1
 802cade:	2b07      	cmp	r3, #7
 802cae0:	930f      	str	r3, [sp, #60]	@ 0x3c
 802cae2:	f300 811c 	bgt.w	802cd1e <_svfiprintf_r+0x7a2>
 802cae6:	f106 0308 	add.w	r3, r6, #8
 802caea:	f019 0f04 	tst.w	r9, #4
 802caee:	f040 811e 	bne.w	802cd2e <_svfiprintf_r+0x7b2>
 802caf2:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 802caf6:	42aa      	cmp	r2, r5
 802caf8:	bfac      	ite	ge
 802cafa:	189b      	addge	r3, r3, r2
 802cafc:	195b      	addlt	r3, r3, r5
 802cafe:	9304      	str	r3, [sp, #16]
 802cb00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802cb02:	b13b      	cbz	r3, 802cb14 <_svfiprintf_r+0x598>
 802cb04:	9801      	ldr	r0, [sp, #4]
 802cb06:	aa0e      	add	r2, sp, #56	@ 0x38
 802cb08:	4659      	mov	r1, fp
 802cb0a:	f7ff fcb9 	bl	802c480 <__ssprint_r>
 802cb0e:	2800      	cmp	r0, #0
 802cb10:	f040 812b 	bne.w	802cd6a <_svfiprintf_r+0x7ee>
 802cb14:	2300      	movs	r3, #0
 802cb16:	930f      	str	r3, [sp, #60]	@ 0x3c
 802cb18:	463d      	mov	r5, r7
 802cb1a:	ae11      	add	r6, sp, #68	@ 0x44
 802cb1c:	e557      	b.n	802c5ce <_svfiprintf_r+0x52>
 802cb1e:	4640      	mov	r0, r8
 802cb20:	f7e3 fbbe 	bl	80102a0 <strlen>
 802cb24:	9000      	str	r0, [sp, #0]
 802cb26:	e732      	b.n	802c98e <_svfiprintf_r+0x412>
 802cb28:	f049 0910 	orr.w	r9, r9, #16
 802cb2c:	f019 0320 	ands.w	r3, r9, #32
 802cb30:	d008      	beq.n	802cb44 <_svfiprintf_r+0x5c8>
 802cb32:	3507      	adds	r5, #7
 802cb34:	f025 0507 	bic.w	r5, r5, #7
 802cb38:	462f      	mov	r7, r5
 802cb3a:	686d      	ldr	r5, [r5, #4]
 802cb3c:	f857 4b08 	ldr.w	r4, [r7], #8
 802cb40:	2301      	movs	r3, #1
 802cb42:	e6d7      	b.n	802c8f4 <_svfiprintf_r+0x378>
 802cb44:	462f      	mov	r7, r5
 802cb46:	f019 0510 	ands.w	r5, r9, #16
 802cb4a:	f857 4b04 	ldr.w	r4, [r7], #4
 802cb4e:	d001      	beq.n	802cb54 <_svfiprintf_r+0x5d8>
 802cb50:	461d      	mov	r5, r3
 802cb52:	e7f5      	b.n	802cb40 <_svfiprintf_r+0x5c4>
 802cb54:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802cb58:	d001      	beq.n	802cb5e <_svfiprintf_r+0x5e2>
 802cb5a:	b2a4      	uxth	r4, r4
 802cb5c:	e7f0      	b.n	802cb40 <_svfiprintf_r+0x5c4>
 802cb5e:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802cb62:	d0ed      	beq.n	802cb40 <_svfiprintf_r+0x5c4>
 802cb64:	b2e4      	uxtb	r4, r4
 802cb66:	e7f3      	b.n	802cb50 <_svfiprintf_r+0x5d4>
 802cb68:	4a43      	ldr	r2, [pc, #268]	@ (802cc78 <_svfiprintf_r+0x6fc>)
 802cb6a:	e5c6      	b.n	802c6fa <_svfiprintf_r+0x17e>
 802cb6c:	462f      	mov	r7, r5
 802cb6e:	f019 0510 	ands.w	r5, r9, #16
 802cb72:	f857 4b04 	ldr.w	r4, [r7], #4
 802cb76:	d001      	beq.n	802cb7c <_svfiprintf_r+0x600>
 802cb78:	4615      	mov	r5, r2
 802cb7a:	e5ca      	b.n	802c712 <_svfiprintf_r+0x196>
 802cb7c:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 802cb80:	d001      	beq.n	802cb86 <_svfiprintf_r+0x60a>
 802cb82:	b2a4      	uxth	r4, r4
 802cb84:	e5c5      	b.n	802c712 <_svfiprintf_r+0x196>
 802cb86:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802cb8a:	f43f adc2 	beq.w	802c712 <_svfiprintf_r+0x196>
 802cb8e:	b2e4      	uxtb	r4, r4
 802cb90:	e7f2      	b.n	802cb78 <_svfiprintf_r+0x5fc>
 802cb92:	2c0a      	cmp	r4, #10
 802cb94:	f175 0300 	sbcs.w	r3, r5, #0
 802cb98:	d206      	bcs.n	802cba8 <_svfiprintf_r+0x62c>
 802cb9a:	3430      	adds	r4, #48	@ 0x30
 802cb9c:	b2e4      	uxtb	r4, r4
 802cb9e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802cba2:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 802cba6:	e129      	b.n	802cdfc <_svfiprintf_r+0x880>
 802cba8:	ab3a      	add	r3, sp, #232	@ 0xe8
 802cbaa:	9309      	str	r3, [sp, #36]	@ 0x24
 802cbac:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 802cbb0:	f04f 0900 	mov.w	r9, #0
 802cbb4:	930a      	str	r3, [sp, #40]	@ 0x28
 802cbb6:	220a      	movs	r2, #10
 802cbb8:	2300      	movs	r3, #0
 802cbba:	4620      	mov	r0, r4
 802cbbc:	4629      	mov	r1, r5
 802cbbe:	f7e4 f8cb 	bl	8010d58 <__aeabi_uldivmod>
 802cbc2:	460b      	mov	r3, r1
 802cbc4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802cbc6:	900b      	str	r0, [sp, #44]	@ 0x2c
 802cbc8:	3230      	adds	r2, #48	@ 0x30
 802cbca:	f801 2c01 	strb.w	r2, [r1, #-1]
 802cbce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802cbd0:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 802cbd4:	f109 0901 	add.w	r9, r9, #1
 802cbd8:	b1e2      	cbz	r2, 802cc14 <_svfiprintf_r+0x698>
 802cbda:	9a06      	ldr	r2, [sp, #24]
 802cbdc:	7812      	ldrb	r2, [r2, #0]
 802cbde:	454a      	cmp	r2, r9
 802cbe0:	d118      	bne.n	802cc14 <_svfiprintf_r+0x698>
 802cbe2:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802cbe6:	d015      	beq.n	802cc14 <_svfiprintf_r+0x698>
 802cbe8:	2c0a      	cmp	r4, #10
 802cbea:	f175 0200 	sbcs.w	r2, r5, #0
 802cbee:	d311      	bcc.n	802cc14 <_svfiprintf_r+0x698>
 802cbf0:	9309      	str	r3, [sp, #36]	@ 0x24
 802cbf2:	9b07      	ldr	r3, [sp, #28]
 802cbf4:	9908      	ldr	r1, [sp, #32]
 802cbf6:	eba8 0803 	sub.w	r8, r8, r3
 802cbfa:	461a      	mov	r2, r3
 802cbfc:	4640      	mov	r0, r8
 802cbfe:	f7fc ff86 	bl	8029b0e <strncpy>
 802cc02:	9b06      	ldr	r3, [sp, #24]
 802cc04:	785a      	ldrb	r2, [r3, #1]
 802cc06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802cc08:	b172      	cbz	r2, 802cc28 <_svfiprintf_r+0x6ac>
 802cc0a:	9a06      	ldr	r2, [sp, #24]
 802cc0c:	3201      	adds	r2, #1
 802cc0e:	9206      	str	r2, [sp, #24]
 802cc10:	f04f 0900 	mov.w	r9, #0
 802cc14:	2c0a      	cmp	r4, #10
 802cc16:	f175 0500 	sbcs.w	r5, r5, #0
 802cc1a:	f0c0 80ef 	bcc.w	802cdfc <_svfiprintf_r+0x880>
 802cc1e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802cc20:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802cc24:	461d      	mov	r5, r3
 802cc26:	e7c6      	b.n	802cbb6 <_svfiprintf_r+0x63a>
 802cc28:	4691      	mov	r9, r2
 802cc2a:	e7f3      	b.n	802cc14 <_svfiprintf_r+0x698>
 802cc2c:	f004 030f 	and.w	r3, r4, #15
 802cc30:	9a05      	ldr	r2, [sp, #20]
 802cc32:	0924      	lsrs	r4, r4, #4
 802cc34:	5cd3      	ldrb	r3, [r2, r3]
 802cc36:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802cc3a:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802cc3e:	092d      	lsrs	r5, r5, #4
 802cc40:	ea54 0305 	orrs.w	r3, r4, r5
 802cc44:	d1f2      	bne.n	802cc2c <_svfiprintf_r+0x6b0>
 802cc46:	e0d9      	b.n	802cdfc <_svfiprintf_r+0x880>
 802cc48:	b923      	cbnz	r3, 802cc54 <_svfiprintf_r+0x6d8>
 802cc4a:	f019 0f01 	tst.w	r9, #1
 802cc4e:	d001      	beq.n	802cc54 <_svfiprintf_r+0x6d8>
 802cc50:	2430      	movs	r4, #48	@ 0x30
 802cc52:	e7a4      	b.n	802cb9e <_svfiprintf_r+0x622>
 802cc54:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802cc58:	e0d0      	b.n	802cdfc <_svfiprintf_r+0x880>
 802cc5a:	2b00      	cmp	r3, #0
 802cc5c:	f000 80a1 	beq.w	802cda2 <_svfiprintf_r+0x826>
 802cc60:	2400      	movs	r4, #0
 802cc62:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802cc66:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802cc6a:	462f      	mov	r7, r5
 802cc6c:	e5e0      	b.n	802c830 <_svfiprintf_r+0x2b4>
 802cc6e:	bf00      	nop
 802cc70:	080385ff 	.word	0x080385ff
 802cc74:	080385ef 	.word	0x080385ef
 802cc78:	080380dc 	.word	0x080380dc
 802cc7c:	2110      	movs	r1, #16
 802cc7e:	6071      	str	r1, [r6, #4]
 802cc80:	2a07      	cmp	r2, #7
 802cc82:	4461      	add	r1, ip
 802cc84:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802cc88:	dd08      	ble.n	802cc9c <_svfiprintf_r+0x720>
 802cc8a:	9801      	ldr	r0, [sp, #4]
 802cc8c:	aa0e      	add	r2, sp, #56	@ 0x38
 802cc8e:	4659      	mov	r1, fp
 802cc90:	f7ff fbf6 	bl	802c480 <__ssprint_r>
 802cc94:	2800      	cmp	r0, #0
 802cc96:	d168      	bne.n	802cd6a <_svfiprintf_r+0x7ee>
 802cc98:	4b5c      	ldr	r3, [pc, #368]	@ (802ce0c <_svfiprintf_r+0x890>)
 802cc9a:	a811      	add	r0, sp, #68	@ 0x44
 802cc9c:	f1aa 0a10 	sub.w	sl, sl, #16
 802cca0:	4606      	mov	r6, r0
 802cca2:	e68d      	b.n	802c9c0 <_svfiprintf_r+0x444>
 802cca4:	4606      	mov	r6, r0
 802cca6:	e6a8      	b.n	802c9fa <_svfiprintf_r+0x47e>
 802cca8:	9801      	ldr	r0, [sp, #4]
 802ccaa:	aa0e      	add	r2, sp, #56	@ 0x38
 802ccac:	4659      	mov	r1, fp
 802ccae:	f7ff fbe7 	bl	802c480 <__ssprint_r>
 802ccb2:	2800      	cmp	r0, #0
 802ccb4:	d159      	bne.n	802cd6a <_svfiprintf_r+0x7ee>
 802ccb6:	ae11      	add	r6, sp, #68	@ 0x44
 802ccb8:	e6b1      	b.n	802ca1e <_svfiprintf_r+0x4a2>
 802ccba:	9801      	ldr	r0, [sp, #4]
 802ccbc:	aa0e      	add	r2, sp, #56	@ 0x38
 802ccbe:	4659      	mov	r1, fp
 802ccc0:	f7ff fbde 	bl	802c480 <__ssprint_r>
 802ccc4:	2800      	cmp	r0, #0
 802ccc6:	d150      	bne.n	802cd6a <_svfiprintf_r+0x7ee>
 802ccc8:	ae11      	add	r6, sp, #68	@ 0x44
 802ccca:	e6b8      	b.n	802ca3e <_svfiprintf_r+0x4c2>
 802cccc:	2110      	movs	r1, #16
 802ccce:	6071      	str	r1, [r6, #4]
 802ccd0:	2a07      	cmp	r2, #7
 802ccd2:	4461      	add	r1, ip
 802ccd4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802ccd8:	dd08      	ble.n	802ccec <_svfiprintf_r+0x770>
 802ccda:	9801      	ldr	r0, [sp, #4]
 802ccdc:	aa0e      	add	r2, sp, #56	@ 0x38
 802ccde:	4659      	mov	r1, fp
 802cce0:	f7ff fbce 	bl	802c480 <__ssprint_r>
 802cce4:	2800      	cmp	r0, #0
 802cce6:	d140      	bne.n	802cd6a <_svfiprintf_r+0x7ee>
 802cce8:	4b49      	ldr	r3, [pc, #292]	@ (802ce10 <_svfiprintf_r+0x894>)
 802ccea:	a811      	add	r0, sp, #68	@ 0x44
 802ccec:	f1aa 0a10 	sub.w	sl, sl, #16
 802ccf0:	4606      	mov	r6, r0
 802ccf2:	e6ae      	b.n	802ca52 <_svfiprintf_r+0x4d6>
 802ccf4:	4606      	mov	r6, r0
 802ccf6:	e6c9      	b.n	802ca8c <_svfiprintf_r+0x510>
 802ccf8:	2010      	movs	r0, #16
 802ccfa:	4402      	add	r2, r0
 802ccfc:	2b07      	cmp	r3, #7
 802ccfe:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802cd02:	6070      	str	r0, [r6, #4]
 802cd04:	dd06      	ble.n	802cd14 <_svfiprintf_r+0x798>
 802cd06:	9801      	ldr	r0, [sp, #4]
 802cd08:	aa0e      	add	r2, sp, #56	@ 0x38
 802cd0a:	4659      	mov	r1, fp
 802cd0c:	f7ff fbb8 	bl	802c480 <__ssprint_r>
 802cd10:	bb58      	cbnz	r0, 802cd6a <_svfiprintf_r+0x7ee>
 802cd12:	a911      	add	r1, sp, #68	@ 0x44
 802cd14:	3c10      	subs	r4, #16
 802cd16:	460e      	mov	r6, r1
 802cd18:	e6bc      	b.n	802ca94 <_svfiprintf_r+0x518>
 802cd1a:	460e      	mov	r6, r1
 802cd1c:	e6d5      	b.n	802caca <_svfiprintf_r+0x54e>
 802cd1e:	9801      	ldr	r0, [sp, #4]
 802cd20:	aa0e      	add	r2, sp, #56	@ 0x38
 802cd22:	4659      	mov	r1, fp
 802cd24:	f7ff fbac 	bl	802c480 <__ssprint_r>
 802cd28:	b9f8      	cbnz	r0, 802cd6a <_svfiprintf_r+0x7ee>
 802cd2a:	ab11      	add	r3, sp, #68	@ 0x44
 802cd2c:	e6dd      	b.n	802caea <_svfiprintf_r+0x56e>
 802cd2e:	9a03      	ldr	r2, [sp, #12]
 802cd30:	1b54      	subs	r4, r2, r5
 802cd32:	2c00      	cmp	r4, #0
 802cd34:	f77f aedd 	ble.w	802caf2 <_svfiprintf_r+0x576>
 802cd38:	4e34      	ldr	r6, [pc, #208]	@ (802ce0c <_svfiprintf_r+0x890>)
 802cd3a:	f04f 0810 	mov.w	r8, #16
 802cd3e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802cd42:	2c10      	cmp	r4, #16
 802cd44:	f102 0201 	add.w	r2, r2, #1
 802cd48:	601e      	str	r6, [r3, #0]
 802cd4a:	dc17      	bgt.n	802cd7c <_svfiprintf_r+0x800>
 802cd4c:	605c      	str	r4, [r3, #4]
 802cd4e:	2a07      	cmp	r2, #7
 802cd50:	440c      	add	r4, r1
 802cd52:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802cd56:	f77f aecc 	ble.w	802caf2 <_svfiprintf_r+0x576>
 802cd5a:	9801      	ldr	r0, [sp, #4]
 802cd5c:	aa0e      	add	r2, sp, #56	@ 0x38
 802cd5e:	4659      	mov	r1, fp
 802cd60:	f7ff fb8e 	bl	802c480 <__ssprint_r>
 802cd64:	2800      	cmp	r0, #0
 802cd66:	f43f aec4 	beq.w	802caf2 <_svfiprintf_r+0x576>
 802cd6a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802cd6e:	065b      	lsls	r3, r3, #25
 802cd70:	f53f ac1c 	bmi.w	802c5ac <_svfiprintf_r+0x30>
 802cd74:	9804      	ldr	r0, [sp, #16]
 802cd76:	b03b      	add	sp, #236	@ 0xec
 802cd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cd7c:	3110      	adds	r1, #16
 802cd7e:	2a07      	cmp	r2, #7
 802cd80:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802cd84:	f8c3 8004 	str.w	r8, [r3, #4]
 802cd88:	dc02      	bgt.n	802cd90 <_svfiprintf_r+0x814>
 802cd8a:	3308      	adds	r3, #8
 802cd8c:	3c10      	subs	r4, #16
 802cd8e:	e7d6      	b.n	802cd3e <_svfiprintf_r+0x7c2>
 802cd90:	9801      	ldr	r0, [sp, #4]
 802cd92:	aa0e      	add	r2, sp, #56	@ 0x38
 802cd94:	4659      	mov	r1, fp
 802cd96:	f7ff fb73 	bl	802c480 <__ssprint_r>
 802cd9a:	2800      	cmp	r0, #0
 802cd9c:	d1e5      	bne.n	802cd6a <_svfiprintf_r+0x7ee>
 802cd9e:	ab11      	add	r3, sp, #68	@ 0x44
 802cda0:	e7f4      	b.n	802cd8c <_svfiprintf_r+0x810>
 802cda2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802cda4:	2b00      	cmp	r3, #0
 802cda6:	d0e0      	beq.n	802cd6a <_svfiprintf_r+0x7ee>
 802cda8:	9801      	ldr	r0, [sp, #4]
 802cdaa:	aa0e      	add	r2, sp, #56	@ 0x38
 802cdac:	4659      	mov	r1, fp
 802cdae:	f7ff fb67 	bl	802c480 <__ssprint_r>
 802cdb2:	e7da      	b.n	802cd6a <_svfiprintf_r+0x7ee>
 802cdb4:	ea54 0205 	orrs.w	r2, r4, r5
 802cdb8:	46ca      	mov	sl, r9
 802cdba:	f43f adac 	beq.w	802c916 <_svfiprintf_r+0x39a>
 802cdbe:	2b01      	cmp	r3, #1
 802cdc0:	f43f aee7 	beq.w	802cb92 <_svfiprintf_r+0x616>
 802cdc4:	2b02      	cmp	r3, #2
 802cdc6:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802cdca:	f43f af2f 	beq.w	802cc2c <_svfiprintf_r+0x6b0>
 802cdce:	f004 0307 	and.w	r3, r4, #7
 802cdd2:	08e4      	lsrs	r4, r4, #3
 802cdd4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802cdd8:	08ed      	lsrs	r5, r5, #3
 802cdda:	3330      	adds	r3, #48	@ 0x30
 802cddc:	ea54 0105 	orrs.w	r1, r4, r5
 802cde0:	4642      	mov	r2, r8
 802cde2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802cde6:	d1f2      	bne.n	802cdce <_svfiprintf_r+0x852>
 802cde8:	f01a 0f01 	tst.w	sl, #1
 802cdec:	d006      	beq.n	802cdfc <_svfiprintf_r+0x880>
 802cdee:	2b30      	cmp	r3, #48	@ 0x30
 802cdf0:	d004      	beq.n	802cdfc <_svfiprintf_r+0x880>
 802cdf2:	2330      	movs	r3, #48	@ 0x30
 802cdf4:	f808 3c01 	strb.w	r3, [r8, #-1]
 802cdf8:	f1a2 0802 	sub.w	r8, r2, #2
 802cdfc:	ab3a      	add	r3, sp, #232	@ 0xe8
 802cdfe:	eba3 0308 	sub.w	r3, r3, r8
 802ce02:	9c00      	ldr	r4, [sp, #0]
 802ce04:	9300      	str	r3, [sp, #0]
 802ce06:	46d1      	mov	r9, sl
 802ce08:	e5c2      	b.n	802c990 <_svfiprintf_r+0x414>
 802ce0a:	bf00      	nop
 802ce0c:	080385ff 	.word	0x080385ff
 802ce10:	080385ef 	.word	0x080385ef

0802ce14 <_sungetc_r>:
 802ce14:	b538      	push	{r3, r4, r5, lr}
 802ce16:	1c4b      	adds	r3, r1, #1
 802ce18:	4614      	mov	r4, r2
 802ce1a:	d103      	bne.n	802ce24 <_sungetc_r+0x10>
 802ce1c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 802ce20:	4628      	mov	r0, r5
 802ce22:	bd38      	pop	{r3, r4, r5, pc}
 802ce24:	8993      	ldrh	r3, [r2, #12]
 802ce26:	f023 0320 	bic.w	r3, r3, #32
 802ce2a:	8193      	strh	r3, [r2, #12]
 802ce2c:	6853      	ldr	r3, [r2, #4]
 802ce2e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 802ce30:	b2cd      	uxtb	r5, r1
 802ce32:	b18a      	cbz	r2, 802ce58 <_sungetc_r+0x44>
 802ce34:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 802ce36:	429a      	cmp	r2, r3
 802ce38:	dd08      	ble.n	802ce4c <_sungetc_r+0x38>
 802ce3a:	6823      	ldr	r3, [r4, #0]
 802ce3c:	1e5a      	subs	r2, r3, #1
 802ce3e:	6022      	str	r2, [r4, #0]
 802ce40:	f803 5c01 	strb.w	r5, [r3, #-1]
 802ce44:	6863      	ldr	r3, [r4, #4]
 802ce46:	3301      	adds	r3, #1
 802ce48:	6063      	str	r3, [r4, #4]
 802ce4a:	e7e9      	b.n	802ce20 <_sungetc_r+0xc>
 802ce4c:	4621      	mov	r1, r4
 802ce4e:	f005 f8a7 	bl	8031fa0 <__submore>
 802ce52:	2800      	cmp	r0, #0
 802ce54:	d0f1      	beq.n	802ce3a <_sungetc_r+0x26>
 802ce56:	e7e1      	b.n	802ce1c <_sungetc_r+0x8>
 802ce58:	6921      	ldr	r1, [r4, #16]
 802ce5a:	6822      	ldr	r2, [r4, #0]
 802ce5c:	b141      	cbz	r1, 802ce70 <_sungetc_r+0x5c>
 802ce5e:	4291      	cmp	r1, r2
 802ce60:	d206      	bcs.n	802ce70 <_sungetc_r+0x5c>
 802ce62:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 802ce66:	42a9      	cmp	r1, r5
 802ce68:	d102      	bne.n	802ce70 <_sungetc_r+0x5c>
 802ce6a:	3a01      	subs	r2, #1
 802ce6c:	6022      	str	r2, [r4, #0]
 802ce6e:	e7ea      	b.n	802ce46 <_sungetc_r+0x32>
 802ce70:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 802ce74:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802ce78:	6323      	str	r3, [r4, #48]	@ 0x30
 802ce7a:	2303      	movs	r3, #3
 802ce7c:	6363      	str	r3, [r4, #52]	@ 0x34
 802ce7e:	4623      	mov	r3, r4
 802ce80:	f803 5f42 	strb.w	r5, [r3, #66]!
 802ce84:	6023      	str	r3, [r4, #0]
 802ce86:	2301      	movs	r3, #1
 802ce88:	e7de      	b.n	802ce48 <_sungetc_r+0x34>

0802ce8a <__ssrefill_r>:
 802ce8a:	b510      	push	{r4, lr}
 802ce8c:	460c      	mov	r4, r1
 802ce8e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 802ce90:	b169      	cbz	r1, 802ceae <__ssrefill_r+0x24>
 802ce92:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802ce96:	4299      	cmp	r1, r3
 802ce98:	d001      	beq.n	802ce9e <__ssrefill_r+0x14>
 802ce9a:	f7fe ff2f 	bl	802bcfc <_free_r>
 802ce9e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802cea0:	6063      	str	r3, [r4, #4]
 802cea2:	2000      	movs	r0, #0
 802cea4:	6320      	str	r0, [r4, #48]	@ 0x30
 802cea6:	b113      	cbz	r3, 802ceae <__ssrefill_r+0x24>
 802cea8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 802ceaa:	6023      	str	r3, [r4, #0]
 802ceac:	bd10      	pop	{r4, pc}
 802ceae:	6923      	ldr	r3, [r4, #16]
 802ceb0:	6023      	str	r3, [r4, #0]
 802ceb2:	2300      	movs	r3, #0
 802ceb4:	6063      	str	r3, [r4, #4]
 802ceb6:	89a3      	ldrh	r3, [r4, #12]
 802ceb8:	f043 0320 	orr.w	r3, r3, #32
 802cebc:	81a3      	strh	r3, [r4, #12]
 802cebe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802cec2:	e7f3      	b.n	802ceac <__ssrefill_r+0x22>

0802cec4 <_sfread_r>:
 802cec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cec8:	461f      	mov	r7, r3
 802ceca:	4613      	mov	r3, r2
 802cecc:	437b      	muls	r3, r7
 802cece:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802ced0:	9000      	str	r0, [sp, #0]
 802ced2:	4688      	mov	r8, r1
 802ced4:	4691      	mov	r9, r2
 802ced6:	d028      	beq.n	802cf2a <_sfread_r+0x66>
 802ced8:	461e      	mov	r6, r3
 802ceda:	f04f 0b00 	mov.w	fp, #0
 802cede:	e9d4 1500 	ldrd	r1, r5, [r4]
 802cee2:	42b5      	cmp	r5, r6
 802cee4:	d30b      	bcc.n	802cefe <_sfread_r+0x3a>
 802cee6:	4632      	mov	r2, r6
 802cee8:	4640      	mov	r0, r8
 802ceea:	f7fe f805 	bl	802aef8 <memcpy>
 802ceee:	6862      	ldr	r2, [r4, #4]
 802cef0:	6821      	ldr	r1, [r4, #0]
 802cef2:	1b92      	subs	r2, r2, r6
 802cef4:	4431      	add	r1, r6
 802cef6:	6062      	str	r2, [r4, #4]
 802cef8:	6021      	str	r1, [r4, #0]
 802cefa:	463b      	mov	r3, r7
 802cefc:	e015      	b.n	802cf2a <_sfread_r+0x66>
 802cefe:	462a      	mov	r2, r5
 802cf00:	4640      	mov	r0, r8
 802cf02:	9301      	str	r3, [sp, #4]
 802cf04:	f7fd fff8 	bl	802aef8 <memcpy>
 802cf08:	6822      	ldr	r2, [r4, #0]
 802cf0a:	9800      	ldr	r0, [sp, #0]
 802cf0c:	442a      	add	r2, r5
 802cf0e:	e9c4 2b00 	strd	r2, fp, [r4]
 802cf12:	4621      	mov	r1, r4
 802cf14:	f7ff ffb9 	bl	802ce8a <__ssrefill_r>
 802cf18:	44a8      	add	r8, r5
 802cf1a:	9b01      	ldr	r3, [sp, #4]
 802cf1c:	eba6 0a05 	sub.w	sl, r6, r5
 802cf20:	b138      	cbz	r0, 802cf32 <_sfread_r+0x6e>
 802cf22:	441d      	add	r5, r3
 802cf24:	1bad      	subs	r5, r5, r6
 802cf26:	fbb5 f3f9 	udiv	r3, r5, r9
 802cf2a:	4618      	mov	r0, r3
 802cf2c:	b003      	add	sp, #12
 802cf2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cf32:	4656      	mov	r6, sl
 802cf34:	e7d3      	b.n	802cede <_sfread_r+0x1a>
	...

0802cf38 <__ssvfiscanf_r>:
 802cf38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cf3c:	b0df      	sub	sp, #380	@ 0x17c
 802cf3e:	af02      	add	r7, sp, #8
 802cf40:	460c      	mov	r4, r1
 802cf42:	623b      	str	r3, [r7, #32]
 802cf44:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 802cf48:	6278      	str	r0, [r7, #36]	@ 0x24
 802cf4a:	049d      	lsls	r5, r3, #18
 802cf4c:	60ba      	str	r2, [r7, #8]
 802cf4e:	d406      	bmi.n	802cf5e <__ssvfiscanf_r+0x26>
 802cf50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802cf54:	818b      	strh	r3, [r1, #12]
 802cf56:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802cf58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802cf5c:	664b      	str	r3, [r1, #100]	@ 0x64
 802cf5e:	2300      	movs	r3, #0
 802cf60:	e9c7 3305 	strd	r3, r3, [r7, #20]
 802cf64:	60fb      	str	r3, [r7, #12]
 802cf66:	469b      	mov	fp, r3
 802cf68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802cf6a:	61fb      	str	r3, [r7, #28]
 802cf6c:	e005      	b.n	802cf7a <__ssvfiscanf_r+0x42>
 802cf6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802cf70:	4621      	mov	r1, r4
 802cf72:	f7ff ff8a 	bl	802ce8a <__ssrefill_r>
 802cf76:	b168      	cbz	r0, 802cf94 <__ssvfiscanf_r+0x5c>
 802cf78:	60bd      	str	r5, [r7, #8]
 802cf7a:	68bd      	ldr	r5, [r7, #8]
 802cf7c:	f815 3b01 	ldrb.w	r3, [r5], #1
 802cf80:	637b      	str	r3, [r7, #52]	@ 0x34
 802cf82:	b333      	cbz	r3, 802cfd2 <__ssvfiscanf_r+0x9a>
 802cf84:	4a75      	ldr	r2, [pc, #468]	@ (802d15c <__ssvfiscanf_r+0x224>)
 802cf86:	5cd6      	ldrb	r6, [r2, r3]
 802cf88:	f016 0608 	ands.w	r6, r6, #8
 802cf8c:	d011      	beq.n	802cfb2 <__ssvfiscanf_r+0x7a>
 802cf8e:	6863      	ldr	r3, [r4, #4]
 802cf90:	2b00      	cmp	r3, #0
 802cf92:	ddec      	ble.n	802cf6e <__ssvfiscanf_r+0x36>
 802cf94:	6823      	ldr	r3, [r4, #0]
 802cf96:	4971      	ldr	r1, [pc, #452]	@ (802d15c <__ssvfiscanf_r+0x224>)
 802cf98:	781a      	ldrb	r2, [r3, #0]
 802cf9a:	5c8a      	ldrb	r2, [r1, r2]
 802cf9c:	0710      	lsls	r0, r2, #28
 802cf9e:	d5eb      	bpl.n	802cf78 <__ssvfiscanf_r+0x40>
 802cfa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802cfa2:	3201      	adds	r2, #1
 802cfa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802cfa6:	6862      	ldr	r2, [r4, #4]
 802cfa8:	3301      	adds	r3, #1
 802cfaa:	3a01      	subs	r2, #1
 802cfac:	6062      	str	r2, [r4, #4]
 802cfae:	6023      	str	r3, [r4, #0]
 802cfb0:	e7ed      	b.n	802cf8e <__ssvfiscanf_r+0x56>
 802cfb2:	2b25      	cmp	r3, #37	@ 0x25
 802cfb4:	d15f      	bne.n	802d076 <__ssvfiscanf_r+0x13e>
 802cfb6:	62be      	str	r6, [r7, #40]	@ 0x28
 802cfb8:	462a      	mov	r2, r5
 802cfba:	f812 3b01 	ldrb.w	r3, [r2], #1
 802cfbe:	60ba      	str	r2, [r7, #8]
 802cfc0:	2b7a      	cmp	r3, #122	@ 0x7a
 802cfc2:	d806      	bhi.n	802cfd2 <__ssvfiscanf_r+0x9a>
 802cfc4:	2b42      	cmp	r3, #66	@ 0x42
 802cfc6:	d809      	bhi.n	802cfdc <__ssvfiscanf_r+0xa4>
 802cfc8:	2b2a      	cmp	r3, #42	@ 0x2a
 802cfca:	d079      	beq.n	802d0c0 <__ssvfiscanf_r+0x188>
 802cfcc:	d844      	bhi.n	802d058 <__ssvfiscanf_r+0x120>
 802cfce:	2b25      	cmp	r3, #37	@ 0x25
 802cfd0:	d050      	beq.n	802d074 <__ssvfiscanf_r+0x13c>
 802cfd2:	f1bb 0f00 	cmp.w	fp, #0
 802cfd6:	f000 810e 	beq.w	802d1f6 <__ssvfiscanf_r+0x2be>
 802cfda:	e107      	b.n	802d1ec <__ssvfiscanf_r+0x2b4>
 802cfdc:	3b43      	subs	r3, #67	@ 0x43
 802cfde:	2b37      	cmp	r3, #55	@ 0x37
 802cfe0:	f200 80fd 	bhi.w	802d1de <__ssvfiscanf_r+0x2a6>
 802cfe4:	e8df f013 	tbh	[pc, r3, lsl #1]
 802cfe8:	00a40117 	.word	0x00a40117
 802cfec:	00fb00fb 	.word	0x00fb00fb
 802cff0:	00fb00fb 	.word	0x00fb00fb
 802cff4:	00fb00fb 	.word	0x00fb00fb
 802cff8:	008e00fb 	.word	0x008e00fb
 802cffc:	00fb00fb 	.word	0x00fb00fb
 802d000:	00fb00a8 	.word	0x00fb00a8
 802d004:	00fb00fb 	.word	0x00fb00fb
 802d008:	00fb00c0 	.word	0x00fb00c0
 802d00c:	00fb00fb 	.word	0x00fb00fb
 802d010:	00b400fb 	.word	0x00b400fb
 802d014:	00fb00fb 	.word	0x00fb00fb
 802d018:	00fb010d 	.word	0x00fb010d
 802d01c:	00fb00fb 	.word	0x00fb00fb
 802d020:	00fb00fb 	.word	0x00fb00fb
 802d024:	00fb00fb 	.word	0x00fb00fb
 802d028:	00a60119 	.word	0x00a60119
 802d02c:	00fb00fb 	.word	0x00fb00fb
 802d030:	008100fb 	.word	0x008100fb
 802d034:	008e013e 	.word	0x008e013e
 802d038:	007300fb 	.word	0x007300fb
 802d03c:	01200095 	.word	0x01200095
 802d040:	011d00aa 	.word	0x011d00aa
 802d044:	00fb00fb 	.word	0x00fb00fb
 802d048:	009200c2 	.word	0x009200c2
 802d04c:	00fb00b0 	.word	0x00fb00b0
 802d050:	00b400fb 	.word	0x00b400fb
 802d054:	009200fb 	.word	0x009200fb
 802d058:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 802d05c:	2a09      	cmp	r2, #9
 802d05e:	d8b8      	bhi.n	802cfd2 <__ssvfiscanf_r+0x9a>
 802d060:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 802d064:	d1b5      	bne.n	802cfd2 <__ssvfiscanf_r+0x9a>
 802d066:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802d068:	220a      	movs	r2, #10
 802d06a:	fb02 3301 	mla	r3, r2, r1, r3
 802d06e:	3b30      	subs	r3, #48	@ 0x30
 802d070:	62bb      	str	r3, [r7, #40]	@ 0x28
 802d072:	e02a      	b.n	802d0ca <__ssvfiscanf_r+0x192>
 802d074:	68bd      	ldr	r5, [r7, #8]
 802d076:	6863      	ldr	r3, [r4, #4]
 802d078:	2b00      	cmp	r3, #0
 802d07a:	dd0e      	ble.n	802d09a <__ssvfiscanf_r+0x162>
 802d07c:	6823      	ldr	r3, [r4, #0]
 802d07e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802d082:	7819      	ldrb	r1, [r3, #0]
 802d084:	4291      	cmp	r1, r2
 802d086:	d1a4      	bne.n	802cfd2 <__ssvfiscanf_r+0x9a>
 802d088:	3301      	adds	r3, #1
 802d08a:	6862      	ldr	r2, [r4, #4]
 802d08c:	6023      	str	r3, [r4, #0]
 802d08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d090:	3a01      	subs	r2, #1
 802d092:	3301      	adds	r3, #1
 802d094:	6062      	str	r2, [r4, #4]
 802d096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802d098:	e76e      	b.n	802cf78 <__ssvfiscanf_r+0x40>
 802d09a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d09c:	4621      	mov	r1, r4
 802d09e:	f7ff fef4 	bl	802ce8a <__ssrefill_r>
 802d0a2:	2800      	cmp	r0, #0
 802d0a4:	d0ea      	beq.n	802d07c <__ssvfiscanf_r+0x144>
 802d0a6:	69fb      	ldr	r3, [r7, #28]
 802d0a8:	b113      	cbz	r3, 802d0b0 <__ssvfiscanf_r+0x178>
 802d0aa:	89a3      	ldrh	r3, [r4, #12]
 802d0ac:	065b      	lsls	r3, r3, #25
 802d0ae:	d590      	bpl.n	802cfd2 <__ssvfiscanf_r+0x9a>
 802d0b0:	f1bb 0f00 	cmp.w	fp, #0
 802d0b4:	f040 8654 	bne.w	802dd60 <__ssvfiscanf_r+0xe28>
 802d0b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802d0bc:	61fb      	str	r3, [r7, #28]
 802d0be:	e09a      	b.n	802d1f6 <__ssvfiscanf_r+0x2be>
 802d0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d0c2:	4333      	orrs	r3, r6
 802d0c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 802d0c6:	d184      	bne.n	802cfd2 <__ssvfiscanf_r+0x9a>
 802d0c8:	2610      	movs	r6, #16
 802d0ca:	68bd      	ldr	r5, [r7, #8]
 802d0cc:	e774      	b.n	802cfb8 <__ssvfiscanf_r+0x80>
 802d0ce:	0731      	lsls	r1, r6, #28
 802d0d0:	f47f af7f 	bne.w	802cfd2 <__ssvfiscanf_r+0x9a>
 802d0d4:	786b      	ldrb	r3, [r5, #1]
 802d0d6:	2b6c      	cmp	r3, #108	@ 0x6c
 802d0d8:	d104      	bne.n	802d0e4 <__ssvfiscanf_r+0x1ac>
 802d0da:	1cab      	adds	r3, r5, #2
 802d0dc:	60bb      	str	r3, [r7, #8]
 802d0de:	f046 0602 	orr.w	r6, r6, #2
 802d0e2:	e7f2      	b.n	802d0ca <__ssvfiscanf_r+0x192>
 802d0e4:	f046 0601 	orr.w	r6, r6, #1
 802d0e8:	e7ef      	b.n	802d0ca <__ssvfiscanf_r+0x192>
 802d0ea:	0732      	lsls	r2, r6, #28
 802d0ec:	f47f af71 	bne.w	802cfd2 <__ssvfiscanf_r+0x9a>
 802d0f0:	786b      	ldrb	r3, [r5, #1]
 802d0f2:	2b68      	cmp	r3, #104	@ 0x68
 802d0f4:	bf03      	ittte	eq
 802d0f6:	1cab      	addeq	r3, r5, #2
 802d0f8:	60bb      	streq	r3, [r7, #8]
 802d0fa:	f046 0608 	orreq.w	r6, r6, #8
 802d0fe:	f046 0604 	orrne.w	r6, r6, #4
 802d102:	e7e2      	b.n	802d0ca <__ssvfiscanf_r+0x192>
 802d104:	0733      	lsls	r3, r6, #28
 802d106:	f47f af64 	bne.w	802cfd2 <__ssvfiscanf_r+0x9a>
 802d10a:	e7e8      	b.n	802d0de <__ssvfiscanf_r+0x1a6>
 802d10c:	0735      	lsls	r5, r6, #28
 802d10e:	d0dc      	beq.n	802d0ca <__ssvfiscanf_r+0x192>
 802d110:	e75f      	b.n	802cfd2 <__ssvfiscanf_r+0x9a>
 802d112:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 802d116:	f47f af5c 	bne.w	802cfd2 <__ssvfiscanf_r+0x9a>
 802d11a:	f1bb 0f00 	cmp.w	fp, #0
 802d11e:	d104      	bne.n	802d12a <__ssvfiscanf_r+0x1f2>
 802d120:	b082      	sub	sp, #8
 802d122:	f10d 0b08 	add.w	fp, sp, #8
 802d126:	e9cb 3300 	strd	r3, r3, [fp]
 802d12a:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 802d12e:	e7cc      	b.n	802d0ca <__ssvfiscanf_r+0x192>
 802d130:	f046 0601 	orr.w	r6, r6, #1
 802d134:	4b0a      	ldr	r3, [pc, #40]	@ (802d160 <__ssvfiscanf_r+0x228>)
 802d136:	e008      	b.n	802d14a <__ssvfiscanf_r+0x212>
 802d138:	f046 0601 	orr.w	r6, r6, #1
 802d13c:	4b09      	ldr	r3, [pc, #36]	@ (802d164 <__ssvfiscanf_r+0x22c>)
 802d13e:	60fb      	str	r3, [r7, #12]
 802d140:	2308      	movs	r3, #8
 802d142:	617b      	str	r3, [r7, #20]
 802d144:	2503      	movs	r5, #3
 802d146:	e012      	b.n	802d16e <__ssvfiscanf_r+0x236>
 802d148:	4b06      	ldr	r3, [pc, #24]	@ (802d164 <__ssvfiscanf_r+0x22c>)
 802d14a:	60fb      	str	r3, [r7, #12]
 802d14c:	230a      	movs	r3, #10
 802d14e:	e7f8      	b.n	802d142 <__ssvfiscanf_r+0x20a>
 802d150:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 802d154:	4b03      	ldr	r3, [pc, #12]	@ (802d164 <__ssvfiscanf_r+0x22c>)
 802d156:	60fb      	str	r3, [r7, #12]
 802d158:	2310      	movs	r3, #16
 802d15a:	e7f2      	b.n	802d142 <__ssvfiscanf_r+0x20a>
 802d15c:	08038479 	.word	0x08038479
 802d160:	08029189 	.word	0x08029189
 802d164:	08031f89 	.word	0x08031f89
 802d168:	f046 0601 	orr.w	r6, r6, #1
 802d16c:	2502      	movs	r5, #2
 802d16e:	6863      	ldr	r3, [r4, #4]
 802d170:	2b00      	cmp	r3, #0
 802d172:	dd7b      	ble.n	802d26c <__ssvfiscanf_r+0x334>
 802d174:	0671      	lsls	r1, r6, #25
 802d176:	d407      	bmi.n	802d188 <__ssvfiscanf_r+0x250>
 802d178:	f8df 8388 	ldr.w	r8, [pc, #904]	@ 802d504 <__ssvfiscanf_r+0x5cc>
 802d17c:	6823      	ldr	r3, [r4, #0]
 802d17e:	781a      	ldrb	r2, [r3, #0]
 802d180:	f818 2002 	ldrb.w	r2, [r8, r2]
 802d184:	0712      	lsls	r2, r2, #28
 802d186:	d479      	bmi.n	802d27c <__ssvfiscanf_r+0x344>
 802d188:	2d02      	cmp	r5, #2
 802d18a:	f000 836f 	beq.w	802d86c <__ssvfiscanf_r+0x934>
 802d18e:	2d03      	cmp	r5, #3
 802d190:	f000 84f6 	beq.w	802db80 <__ssvfiscanf_r+0xc48>
 802d194:	f006 0310 	and.w	r3, r6, #16
 802d198:	2d01      	cmp	r5, #1
 802d19a:	613b      	str	r3, [r7, #16]
 802d19c:	f006 0501 	and.w	r5, r6, #1
 802d1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d1a2:	f000 81b1 	beq.w	802d508 <__ssvfiscanf_r+0x5d0>
 802d1a6:	2b01      	cmp	r3, #1
 802d1a8:	bf38      	it	cc
 802d1aa:	2301      	movcc	r3, #1
 802d1ac:	4698      	mov	r8, r3
 802d1ae:	693b      	ldr	r3, [r7, #16]
 802d1b0:	2d00      	cmp	r5, #0
 802d1b2:	f000 813b 	beq.w	802d42c <__ssvfiscanf_r+0x4f4>
 802d1b6:	2b00      	cmp	r3, #0
 802d1b8:	f040 80d8 	bne.w	802d36c <__ssvfiscanf_r+0x434>
 802d1bc:	6a3b      	ldr	r3, [r7, #32]
 802d1be:	0636      	lsls	r6, r6, #24
 802d1c0:	f853 5b04 	ldr.w	r5, [r3], #4
 802d1c4:	623b      	str	r3, [r7, #32]
 802d1c6:	f140 80d7 	bpl.w	802d378 <__ssvfiscanf_r+0x440>
 802d1ca:	b145      	cbz	r5, 802d1de <__ssvfiscanf_r+0x2a6>
 802d1cc:	2080      	movs	r0, #128	@ 0x80
 802d1ce:	f7fe fe9d 	bl	802bf0c <malloc>
 802d1d2:	4606      	mov	r6, r0
 802d1d4:	2800      	cmp	r0, #0
 802d1d6:	d164      	bne.n	802d2a2 <__ssvfiscanf_r+0x36a>
 802d1d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802d1dc:	61fb      	str	r3, [r7, #28]
 802d1de:	f1bb 0f00 	cmp.w	fp, #0
 802d1e2:	d008      	beq.n	802d1f6 <__ssvfiscanf_r+0x2be>
 802d1e4:	69fb      	ldr	r3, [r7, #28]
 802d1e6:	3301      	adds	r3, #1
 802d1e8:	f000 85ba 	beq.w	802dd60 <__ssvfiscanf_r+0xe28>
 802d1ec:	f8db 0000 	ldr.w	r0, [fp]
 802d1f0:	b108      	cbz	r0, 802d1f6 <__ssvfiscanf_r+0x2be>
 802d1f2:	f7fe fe93 	bl	802bf1c <free>
 802d1f6:	69f8      	ldr	r0, [r7, #28]
 802d1f8:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 802d1fc:	46bd      	mov	sp, r7
 802d1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d202:	68b9      	ldr	r1, [r7, #8]
 802d204:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 802d208:	f003 fe67 	bl	8030eda <__sccl>
 802d20c:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802d210:	60b8      	str	r0, [r7, #8]
 802d212:	2501      	movs	r5, #1
 802d214:	e7ab      	b.n	802d16e <__ssvfiscanf_r+0x236>
 802d216:	f046 0601 	orr.w	r6, r6, #1
 802d21a:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802d21e:	2500      	movs	r5, #0
 802d220:	e7a5      	b.n	802d16e <__ssvfiscanf_r+0x236>
 802d222:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 802d226:	e795      	b.n	802d154 <__ssvfiscanf_r+0x21c>
 802d228:	06f0      	lsls	r0, r6, #27
 802d22a:	f53f aea6 	bmi.w	802cf7a <__ssvfiscanf_r+0x42>
 802d22e:	6a3a      	ldr	r2, [r7, #32]
 802d230:	0731      	lsls	r1, r6, #28
 802d232:	f852 3b04 	ldr.w	r3, [r2], #4
 802d236:	623a      	str	r2, [r7, #32]
 802d238:	d502      	bpl.n	802d240 <__ssvfiscanf_r+0x308>
 802d23a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802d23c:	701a      	strb	r2, [r3, #0]
 802d23e:	e69c      	b.n	802cf7a <__ssvfiscanf_r+0x42>
 802d240:	0772      	lsls	r2, r6, #29
 802d242:	d502      	bpl.n	802d24a <__ssvfiscanf_r+0x312>
 802d244:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802d246:	801a      	strh	r2, [r3, #0]
 802d248:	e697      	b.n	802cf7a <__ssvfiscanf_r+0x42>
 802d24a:	07f5      	lsls	r5, r6, #31
 802d24c:	d502      	bpl.n	802d254 <__ssvfiscanf_r+0x31c>
 802d24e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802d250:	601a      	str	r2, [r3, #0]
 802d252:	e692      	b.n	802cf7a <__ssvfiscanf_r+0x42>
 802d254:	07b0      	lsls	r0, r6, #30
 802d256:	d5fa      	bpl.n	802d24e <__ssvfiscanf_r+0x316>
 802d258:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802d25a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802d25c:	17d2      	asrs	r2, r2, #31
 802d25e:	e9c3 1200 	strd	r1, r2, [r3]
 802d262:	e68a      	b.n	802cf7a <__ssvfiscanf_r+0x42>
 802d264:	4ba6      	ldr	r3, [pc, #664]	@ (802d500 <__ssvfiscanf_r+0x5c8>)
 802d266:	60fb      	str	r3, [r7, #12]
 802d268:	2300      	movs	r3, #0
 802d26a:	e76a      	b.n	802d142 <__ssvfiscanf_r+0x20a>
 802d26c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d26e:	4621      	mov	r1, r4
 802d270:	f7ff fe0b 	bl	802ce8a <__ssrefill_r>
 802d274:	2800      	cmp	r0, #0
 802d276:	f43f af7d 	beq.w	802d174 <__ssvfiscanf_r+0x23c>
 802d27a:	e714      	b.n	802d0a6 <__ssvfiscanf_r+0x16e>
 802d27c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802d27e:	3201      	adds	r2, #1
 802d280:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802d282:	6862      	ldr	r2, [r4, #4]
 802d284:	3a01      	subs	r2, #1
 802d286:	2a00      	cmp	r2, #0
 802d288:	6062      	str	r2, [r4, #4]
 802d28a:	dd02      	ble.n	802d292 <__ssvfiscanf_r+0x35a>
 802d28c:	3301      	adds	r3, #1
 802d28e:	6023      	str	r3, [r4, #0]
 802d290:	e774      	b.n	802d17c <__ssvfiscanf_r+0x244>
 802d292:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d294:	4621      	mov	r1, r4
 802d296:	f7ff fdf8 	bl	802ce8a <__ssrefill_r>
 802d29a:	2800      	cmp	r0, #0
 802d29c:	f43f af6e 	beq.w	802d17c <__ssvfiscanf_r+0x244>
 802d2a0:	e701      	b.n	802d0a6 <__ssvfiscanf_r+0x16e>
 802d2a2:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802d2a6:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802d2aa:	6028      	str	r0, [r5, #0]
 802d2ac:	4599      	cmp	r9, r3
 802d2ae:	d314      	bcc.n	802d2da <__ssvfiscanf_r+0x3a2>
 802d2b0:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802d2b4:	4293      	cmp	r3, r2
 802d2b6:	f200 8553 	bhi.w	802dd60 <__ssvfiscanf_r+0xe28>
 802d2ba:	3308      	adds	r3, #8
 802d2bc:	fa1f fa83 	uxth.w	sl, r3
 802d2c0:	f8db 0000 	ldr.w	r0, [fp]
 802d2c4:	ea4f 018a 	mov.w	r1, sl, lsl #2
 802d2c8:	f003 fdaa 	bl	8030e20 <realloc>
 802d2cc:	2800      	cmp	r0, #0
 802d2ce:	f000 8547 	beq.w	802dd60 <__ssvfiscanf_r+0xe28>
 802d2d2:	f8cb 0000 	str.w	r0, [fp]
 802d2d6:	f8ab a004 	strh.w	sl, [fp, #4]
 802d2da:	f8db 3000 	ldr.w	r3, [fp]
 802d2de:	f109 0201 	add.w	r2, r9, #1
 802d2e2:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802d2e6:	46aa      	mov	sl, r5
 802d2e8:	f8ab 2006 	strh.w	r2, [fp, #6]
 802d2ec:	4635      	mov	r5, r6
 802d2ee:	f04f 0920 	mov.w	r9, #32
 802d2f2:	2200      	movs	r2, #0
 802d2f4:	62ba      	str	r2, [r7, #40]	@ 0x28
 802d2f6:	f7fd fd4b 	bl	802ad90 <__locale_mb_cur_max>
 802d2fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802d2fc:	4290      	cmp	r0, r2
 802d2fe:	f43f aed2 	beq.w	802d0a6 <__ssvfiscanf_r+0x16e>
 802d302:	6821      	ldr	r1, [r4, #0]
 802d304:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 802d308:	f811 0b01 	ldrb.w	r0, [r1], #1
 802d30c:	f80c 0002 	strb.w	r0, [ip, r2]
 802d310:	1c53      	adds	r3, r2, #1
 802d312:	6862      	ldr	r2, [r4, #4]
 802d314:	3a01      	subs	r2, #1
 802d316:	e9c4 1200 	strd	r1, r2, [r4]
 802d31a:	69ba      	ldr	r2, [r7, #24]
 802d31c:	2a03      	cmp	r2, #3
 802d31e:	d102      	bne.n	802d326 <__ssvfiscanf_r+0x3ee>
 802d320:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802d322:	2a04      	cmp	r2, #4
 802d324:	d007      	beq.n	802d336 <__ssvfiscanf_r+0x3fe>
 802d326:	2208      	movs	r2, #8
 802d328:	2100      	movs	r1, #0
 802d32a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802d32e:	62bb      	str	r3, [r7, #40]	@ 0x28
 802d330:	f7fc fba6 	bl	8029a80 <memset>
 802d334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d336:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 802d33a:	9200      	str	r2, [sp, #0]
 802d33c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d33e:	62bb      	str	r3, [r7, #40]	@ 0x28
 802d340:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802d344:	4629      	mov	r1, r5
 802d346:	f005 f925 	bl	8032594 <_mbrtowc_r>
 802d34a:	4603      	mov	r3, r0
 802d34c:	61b8      	str	r0, [r7, #24]
 802d34e:	1c58      	adds	r0, r3, #1
 802d350:	f43f aea9 	beq.w	802d0a6 <__ssvfiscanf_r+0x16e>
 802d354:	461a      	mov	r2, r3
 802d356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d358:	b9b2      	cbnz	r2, 802d388 <__ssvfiscanf_r+0x450>
 802d35a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802d35c:	441a      	add	r2, r3
 802d35e:	4613      	mov	r3, r2
 802d360:	693a      	ldr	r2, [r7, #16]
 802d362:	b172      	cbz	r2, 802d382 <__ssvfiscanf_r+0x44a>
 802d364:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802d366:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802d36a:	e019      	b.n	802d3a0 <__ssvfiscanf_r+0x468>
 802d36c:	f04f 0900 	mov.w	r9, #0
 802d370:	464e      	mov	r6, r9
 802d372:	46ca      	mov	sl, r9
 802d374:	464d      	mov	r5, r9
 802d376:	e7bc      	b.n	802d2f2 <__ssvfiscanf_r+0x3ba>
 802d378:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802d37c:	464e      	mov	r6, r9
 802d37e:	46ca      	mov	sl, r9
 802d380:	e7b7      	b.n	802d2f2 <__ssvfiscanf_r+0x3ba>
 802d382:	693a      	ldr	r2, [r7, #16]
 802d384:	602a      	str	r2, [r5, #0]
 802d386:	e7ed      	b.n	802d364 <__ssvfiscanf_r+0x42c>
 802d388:	69ba      	ldr	r2, [r7, #24]
 802d38a:	3202      	adds	r2, #2
 802d38c:	d024      	beq.n	802d3d8 <__ssvfiscanf_r+0x4a0>
 802d38e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802d390:	441a      	add	r2, r3
 802d392:	69bb      	ldr	r3, [r7, #24]
 802d394:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802d396:	2b03      	cmp	r3, #3
 802d398:	d1e5      	bne.n	802d366 <__ssvfiscanf_r+0x42e>
 802d39a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802d39c:	2b04      	cmp	r3, #4
 802d39e:	d1e2      	bne.n	802d366 <__ssvfiscanf_r+0x42e>
 802d3a0:	693b      	ldr	r3, [r7, #16]
 802d3a2:	b9bb      	cbnz	r3, 802d3d4 <__ssvfiscanf_r+0x49c>
 802d3a4:	f1ba 0f00 	cmp.w	sl, #0
 802d3a8:	d013      	beq.n	802d3d2 <__ssvfiscanf_r+0x49a>
 802d3aa:	1bab      	subs	r3, r5, r6
 802d3ac:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 802d3b0:	d80f      	bhi.n	802d3d2 <__ssvfiscanf_r+0x49a>
 802d3b2:	4630      	mov	r0, r6
 802d3b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802d3b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 802d3ba:	f003 fd31 	bl	8030e20 <realloc>
 802d3be:	4606      	mov	r6, r0
 802d3c0:	2800      	cmp	r0, #0
 802d3c2:	f43f af09 	beq.w	802d1d8 <__ssvfiscanf_r+0x2a0>
 802d3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d3c8:	f8ca 0000 	str.w	r0, [sl]
 802d3cc:	18c5      	adds	r5, r0, r3
 802d3ce:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802d3d2:	3504      	adds	r5, #4
 802d3d4:	2200      	movs	r2, #0
 802d3d6:	e000      	b.n	802d3da <__ssvfiscanf_r+0x4a2>
 802d3d8:	461a      	mov	r2, r3
 802d3da:	6863      	ldr	r3, [r4, #4]
 802d3dc:	2b00      	cmp	r3, #0
 802d3de:	dc13      	bgt.n	802d408 <__ssvfiscanf_r+0x4d0>
 802d3e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d3e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 802d3e4:	4621      	mov	r1, r4
 802d3e6:	f7ff fd50 	bl	802ce8a <__ssrefill_r>
 802d3ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802d3ec:	b160      	cbz	r0, 802d408 <__ssvfiscanf_r+0x4d0>
 802d3ee:	2a00      	cmp	r2, #0
 802d3f0:	f47f ae59 	bne.w	802d0a6 <__ssvfiscanf_r+0x16e>
 802d3f4:	f1ba 0f00 	cmp.w	sl, #0
 802d3f8:	d10b      	bne.n	802d412 <__ssvfiscanf_r+0x4da>
 802d3fa:	693b      	ldr	r3, [r7, #16]
 802d3fc:	2b00      	cmp	r3, #0
 802d3fe:	f47f adbc 	bne.w	802cf7a <__ssvfiscanf_r+0x42>
 802d402:	69fb      	ldr	r3, [r7, #28]
 802d404:	3301      	adds	r3, #1
 802d406:	e5b0      	b.n	802cf6a <__ssvfiscanf_r+0x32>
 802d408:	f1b8 0f00 	cmp.w	r8, #0
 802d40c:	f47f af72 	bne.w	802d2f4 <__ssvfiscanf_r+0x3bc>
 802d410:	e7f0      	b.n	802d3f4 <__ssvfiscanf_r+0x4bc>
 802d412:	1ba9      	subs	r1, r5, r6
 802d414:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 802d418:	d9ef      	bls.n	802d3fa <__ssvfiscanf_r+0x4c2>
 802d41a:	f8da 0000 	ldr.w	r0, [sl]
 802d41e:	f003 fcff 	bl	8030e20 <realloc>
 802d422:	2800      	cmp	r0, #0
 802d424:	d0e9      	beq.n	802d3fa <__ssvfiscanf_r+0x4c2>
 802d426:	f8ca 0000 	str.w	r0, [sl]
 802d42a:	e7e6      	b.n	802d3fa <__ssvfiscanf_r+0x4c2>
 802d42c:	b1db      	cbz	r3, 802d466 <__ssvfiscanf_r+0x52e>
 802d42e:	e9d4 2300 	ldrd	r2, r3, [r4]
 802d432:	4598      	cmp	r8, r3
 802d434:	dd10      	ble.n	802d458 <__ssvfiscanf_r+0x520>
 802d436:	441a      	add	r2, r3
 802d438:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d43a:	6022      	str	r2, [r4, #0]
 802d43c:	4621      	mov	r1, r4
 802d43e:	441d      	add	r5, r3
 802d440:	eba8 0803 	sub.w	r8, r8, r3
 802d444:	f7ff fd21 	bl	802ce8a <__ssrefill_r>
 802d448:	2800      	cmp	r0, #0
 802d44a:	d0f0      	beq.n	802d42e <__ssvfiscanf_r+0x4f6>
 802d44c:	2d00      	cmp	r5, #0
 802d44e:	f43f ae2a 	beq.w	802d0a6 <__ssvfiscanf_r+0x16e>
 802d452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d454:	442b      	add	r3, r5
 802d456:	e201      	b.n	802d85c <__ssvfiscanf_r+0x924>
 802d458:	eba3 0308 	sub.w	r3, r3, r8
 802d45c:	4442      	add	r2, r8
 802d45e:	4445      	add	r5, r8
 802d460:	6063      	str	r3, [r4, #4]
 802d462:	6022      	str	r2, [r4, #0]
 802d464:	e7f5      	b.n	802d452 <__ssvfiscanf_r+0x51a>
 802d466:	6a3b      	ldr	r3, [r7, #32]
 802d468:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802d46c:	f853 5b04 	ldr.w	r5, [r3], #4
 802d470:	623b      	str	r3, [r7, #32]
 802d472:	d02d      	beq.n	802d4d0 <__ssvfiscanf_r+0x598>
 802d474:	2d00      	cmp	r5, #0
 802d476:	f43f adac 	beq.w	802cfd2 <__ssvfiscanf_r+0x9a>
 802d47a:	4640      	mov	r0, r8
 802d47c:	f7fe fd46 	bl	802bf0c <malloc>
 802d480:	4681      	mov	r9, r0
 802d482:	2800      	cmp	r0, #0
 802d484:	f43f ae14 	beq.w	802d0b0 <__ssvfiscanf_r+0x178>
 802d488:	f8bb a006 	ldrh.w	sl, [fp, #6]
 802d48c:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 802d490:	6028      	str	r0, [r5, #0]
 802d492:	45b2      	cmp	sl, r6
 802d494:	d312      	bcc.n	802d4bc <__ssvfiscanf_r+0x584>
 802d496:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802d49a:	429e      	cmp	r6, r3
 802d49c:	f200 8460 	bhi.w	802dd60 <__ssvfiscanf_r+0xe28>
 802d4a0:	3608      	adds	r6, #8
 802d4a2:	b2b6      	uxth	r6, r6
 802d4a4:	f8db 0000 	ldr.w	r0, [fp]
 802d4a8:	00b1      	lsls	r1, r6, #2
 802d4aa:	f003 fcb9 	bl	8030e20 <realloc>
 802d4ae:	2800      	cmp	r0, #0
 802d4b0:	f000 8456 	beq.w	802dd60 <__ssvfiscanf_r+0xe28>
 802d4b4:	f8cb 0000 	str.w	r0, [fp]
 802d4b8:	f8ab 6004 	strh.w	r6, [fp, #4]
 802d4bc:	f8db 3000 	ldr.w	r3, [fp]
 802d4c0:	f10a 0201 	add.w	r2, sl, #1
 802d4c4:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 802d4c8:	462e      	mov	r6, r5
 802d4ca:	f8ab 2006 	strh.w	r2, [fp, #6]
 802d4ce:	464d      	mov	r5, r9
 802d4d0:	9400      	str	r4, [sp, #0]
 802d4d2:	4629      	mov	r1, r5
 802d4d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d4d6:	4643      	mov	r3, r8
 802d4d8:	2201      	movs	r2, #1
 802d4da:	f7ff fcf3 	bl	802cec4 <_sfread_r>
 802d4de:	4605      	mov	r5, r0
 802d4e0:	2800      	cmp	r0, #0
 802d4e2:	f43f ade0 	beq.w	802d0a6 <__ssvfiscanf_r+0x16e>
 802d4e6:	b13e      	cbz	r6, 802d4f8 <__ssvfiscanf_r+0x5c0>
 802d4e8:	4580      	cmp	r8, r0
 802d4ea:	d905      	bls.n	802d4f8 <__ssvfiscanf_r+0x5c0>
 802d4ec:	4601      	mov	r1, r0
 802d4ee:	6830      	ldr	r0, [r6, #0]
 802d4f0:	f003 fc96 	bl	8030e20 <realloc>
 802d4f4:	b100      	cbz	r0, 802d4f8 <__ssvfiscanf_r+0x5c0>
 802d4f6:	6030      	str	r0, [r6, #0]
 802d4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d4fa:	442b      	add	r3, r5
 802d4fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802d4fe:	e780      	b.n	802d402 <__ssvfiscanf_r+0x4ca>
 802d500:	08029189 	.word	0x08029189
 802d504:	08038479 	.word	0x08038479
 802d508:	2b00      	cmp	r3, #0
 802d50a:	bf08      	it	eq
 802d50c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802d510:	62bb      	str	r3, [r7, #40]	@ 0x28
 802d512:	693b      	ldr	r3, [r7, #16]
 802d514:	2d00      	cmp	r5, #0
 802d516:	f000 8100 	beq.w	802d71a <__ssvfiscanf_r+0x7e2>
 802d51a:	2b00      	cmp	r3, #0
 802d51c:	f040 80a5 	bne.w	802d66a <__ssvfiscanf_r+0x732>
 802d520:	6a3b      	ldr	r3, [r7, #32]
 802d522:	0631      	lsls	r1, r6, #24
 802d524:	f853 5b04 	ldr.w	r5, [r3], #4
 802d528:	623b      	str	r3, [r7, #32]
 802d52a:	f140 80a5 	bpl.w	802d678 <__ssvfiscanf_r+0x740>
 802d52e:	2d00      	cmp	r5, #0
 802d530:	f43f ae55 	beq.w	802d1de <__ssvfiscanf_r+0x2a6>
 802d534:	2080      	movs	r0, #128	@ 0x80
 802d536:	f7fe fce9 	bl	802bf0c <malloc>
 802d53a:	4680      	mov	r8, r0
 802d53c:	2800      	cmp	r0, #0
 802d53e:	f43f ae4b 	beq.w	802d1d8 <__ssvfiscanf_r+0x2a0>
 802d542:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 802d546:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802d54a:	6028      	str	r0, [r5, #0]
 802d54c:	429e      	cmp	r6, r3
 802d54e:	d314      	bcc.n	802d57a <__ssvfiscanf_r+0x642>
 802d550:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802d554:	4293      	cmp	r3, r2
 802d556:	f200 8403 	bhi.w	802dd60 <__ssvfiscanf_r+0xe28>
 802d55a:	3308      	adds	r3, #8
 802d55c:	fa1f f983 	uxth.w	r9, r3
 802d560:	f8db 0000 	ldr.w	r0, [fp]
 802d564:	ea4f 0189 	mov.w	r1, r9, lsl #2
 802d568:	f003 fc5a 	bl	8030e20 <realloc>
 802d56c:	2800      	cmp	r0, #0
 802d56e:	f000 83f7 	beq.w	802dd60 <__ssvfiscanf_r+0xe28>
 802d572:	f8cb 0000 	str.w	r0, [fp]
 802d576:	f8ab 9004 	strh.w	r9, [fp, #4]
 802d57a:	f8db 3000 	ldr.w	r3, [fp]
 802d57e:	1c72      	adds	r2, r6, #1
 802d580:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 802d584:	46aa      	mov	sl, r5
 802d586:	f8ab 2006 	strh.w	r2, [fp, #6]
 802d58a:	4645      	mov	r5, r8
 802d58c:	f04f 0920 	mov.w	r9, #32
 802d590:	2600      	movs	r6, #0
 802d592:	f7fd fbfd 	bl	802ad90 <__locale_mb_cur_max>
 802d596:	4286      	cmp	r6, r0
 802d598:	f43f ad85 	beq.w	802d0a6 <__ssvfiscanf_r+0x16e>
 802d59c:	1c73      	adds	r3, r6, #1
 802d59e:	607b      	str	r3, [r7, #4]
 802d5a0:	6823      	ldr	r3, [r4, #0]
 802d5a2:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802d5a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 802d5aa:	558a      	strb	r2, [r1, r6]
 802d5ac:	6862      	ldr	r2, [r4, #4]
 802d5ae:	3a01      	subs	r2, #1
 802d5b0:	e9c4 3200 	strd	r3, r2, [r4]
 802d5b4:	69bb      	ldr	r3, [r7, #24]
 802d5b6:	2b03      	cmp	r3, #3
 802d5b8:	d102      	bne.n	802d5c0 <__ssvfiscanf_r+0x688>
 802d5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802d5bc:	2b04      	cmp	r3, #4
 802d5be:	d005      	beq.n	802d5cc <__ssvfiscanf_r+0x694>
 802d5c0:	2208      	movs	r2, #8
 802d5c2:	2100      	movs	r1, #0
 802d5c4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 802d5c8:	f7fc fa5a 	bl	8029a80 <memset>
 802d5cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 802d5d0:	9300      	str	r3, [sp, #0]
 802d5d2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802d5d6:	687b      	ldr	r3, [r7, #4]
 802d5d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d5da:	4629      	mov	r1, r5
 802d5dc:	f004 ffda 	bl	8032594 <_mbrtowc_r>
 802d5e0:	1c42      	adds	r2, r0, #1
 802d5e2:	61b8      	str	r0, [r7, #24]
 802d5e4:	f43f ad5f 	beq.w	802d0a6 <__ssvfiscanf_r+0x16e>
 802d5e8:	2800      	cmp	r0, #0
 802d5ea:	d14a      	bne.n	802d682 <__ssvfiscanf_r+0x74a>
 802d5ec:	6028      	str	r0, [r5, #0]
 802d5ee:	682e      	ldr	r6, [r5, #0]
 802d5f0:	1c73      	adds	r3, r6, #1
 802d5f2:	d056      	beq.n	802d6a2 <__ssvfiscanf_r+0x76a>
 802d5f4:	2208      	movs	r2, #8
 802d5f6:	2100      	movs	r1, #0
 802d5f8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802d5fc:	f7fc fa40 	bl	8029a80 <memset>
 802d600:	4b99      	ldr	r3, [pc, #612]	@ (802d868 <__ssvfiscanf_r+0x930>)
 802d602:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 802d608:	603b      	str	r3, [r7, #0]
 802d60a:	4632      	mov	r2, r6
 802d60c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802d610:	683e      	ldr	r6, [r7, #0]
 802d612:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 802d616:	47b0      	blx	r6
 802d618:	2801      	cmp	r0, #1
 802d61a:	d144      	bne.n	802d6a6 <__ssvfiscanf_r+0x76e>
 802d61c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 802d620:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 802d624:	5c9b      	ldrb	r3, [r3, r2]
 802d626:	2b00      	cmp	r3, #0
 802d628:	d148      	bne.n	802d6bc <__ssvfiscanf_r+0x784>
 802d62a:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 802d62e:	687b      	ldr	r3, [r7, #4]
 802d630:	2b00      	cmp	r3, #0
 802d632:	d13a      	bne.n	802d6aa <__ssvfiscanf_r+0x772>
 802d634:	693b      	ldr	r3, [r7, #16]
 802d636:	2b00      	cmp	r3, #0
 802d638:	f47f ac9f 	bne.w	802cf7a <__ssvfiscanf_r+0x42>
 802d63c:	602b      	str	r3, [r5, #0]
 802d63e:	f1ba 0f00 	cmp.w	sl, #0
 802d642:	f43f aede 	beq.w	802d402 <__ssvfiscanf_r+0x4ca>
 802d646:	eba5 0108 	sub.w	r1, r5, r8
 802d64a:	108b      	asrs	r3, r1, #2
 802d64c:	3301      	adds	r3, #1
 802d64e:	4599      	cmp	r9, r3
 802d650:	f67f aed7 	bls.w	802d402 <__ssvfiscanf_r+0x4ca>
 802d654:	f8da 0000 	ldr.w	r0, [sl]
 802d658:	3104      	adds	r1, #4
 802d65a:	f003 fbe1 	bl	8030e20 <realloc>
 802d65e:	2800      	cmp	r0, #0
 802d660:	f43f aecf 	beq.w	802d402 <__ssvfiscanf_r+0x4ca>
 802d664:	f8ca 0000 	str.w	r0, [sl]
 802d668:	e6cb      	b.n	802d402 <__ssvfiscanf_r+0x4ca>
 802d66a:	f04f 0900 	mov.w	r9, #0
 802d66e:	46c8      	mov	r8, r9
 802d670:	46ca      	mov	sl, r9
 802d672:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 802d676:	e78b      	b.n	802d590 <__ssvfiscanf_r+0x658>
 802d678:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802d67c:	46c8      	mov	r8, r9
 802d67e:	46ca      	mov	sl, r9
 802d680:	e786      	b.n	802d590 <__ssvfiscanf_r+0x658>
 802d682:	69bb      	ldr	r3, [r7, #24]
 802d684:	3302      	adds	r3, #2
 802d686:	d1b2      	bne.n	802d5ee <__ssvfiscanf_r+0x6b6>
 802d688:	687e      	ldr	r6, [r7, #4]
 802d68a:	6863      	ldr	r3, [r4, #4]
 802d68c:	2b00      	cmp	r3, #0
 802d68e:	dc3f      	bgt.n	802d710 <__ssvfiscanf_r+0x7d8>
 802d690:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d692:	4621      	mov	r1, r4
 802d694:	f7ff fbf9 	bl	802ce8a <__ssrefill_r>
 802d698:	2800      	cmp	r0, #0
 802d69a:	d039      	beq.n	802d710 <__ssvfiscanf_r+0x7d8>
 802d69c:	2e00      	cmp	r6, #0
 802d69e:	d0c9      	beq.n	802d634 <__ssvfiscanf_r+0x6fc>
 802d6a0:	e501      	b.n	802d0a6 <__ssvfiscanf_r+0x16e>
 802d6a2:	4632      	mov	r2, r6
 802d6a4:	e7bc      	b.n	802d620 <__ssvfiscanf_r+0x6e8>
 802d6a6:	2200      	movs	r2, #0
 802d6a8:	e7ba      	b.n	802d620 <__ssvfiscanf_r+0x6e8>
 802d6aa:	687b      	ldr	r3, [r7, #4]
 802d6ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d6ae:	3b01      	subs	r3, #1
 802d6b0:	4622      	mov	r2, r4
 802d6b2:	5cf1      	ldrb	r1, [r6, r3]
 802d6b4:	607b      	str	r3, [r7, #4]
 802d6b6:	f7ff fbad 	bl	802ce14 <_sungetc_r>
 802d6ba:	e7b8      	b.n	802d62e <__ssvfiscanf_r+0x6f6>
 802d6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d6be:	687a      	ldr	r2, [r7, #4]
 802d6c0:	4413      	add	r3, r2
 802d6c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802d6c4:	69bb      	ldr	r3, [r7, #24]
 802d6c6:	2b03      	cmp	r3, #3
 802d6c8:	d102      	bne.n	802d6d0 <__ssvfiscanf_r+0x798>
 802d6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802d6cc:	2b04      	cmp	r3, #4
 802d6ce:	d002      	beq.n	802d6d6 <__ssvfiscanf_r+0x79e>
 802d6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d6d2:	3b01      	subs	r3, #1
 802d6d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 802d6d6:	693b      	ldr	r3, [r7, #16]
 802d6d8:	b9c3      	cbnz	r3, 802d70c <__ssvfiscanf_r+0x7d4>
 802d6da:	3504      	adds	r5, #4
 802d6dc:	f1ba 0f00 	cmp.w	sl, #0
 802d6e0:	d014      	beq.n	802d70c <__ssvfiscanf_r+0x7d4>
 802d6e2:	eba5 0608 	sub.w	r6, r5, r8
 802d6e6:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 802d6ea:	d80d      	bhi.n	802d708 <__ssvfiscanf_r+0x7d0>
 802d6ec:	4640      	mov	r0, r8
 802d6ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802d6f2:	f003 fb95 	bl	8030e20 <realloc>
 802d6f6:	4680      	mov	r8, r0
 802d6f8:	2800      	cmp	r0, #0
 802d6fa:	f43f ad6d 	beq.w	802d1d8 <__ssvfiscanf_r+0x2a0>
 802d6fe:	1985      	adds	r5, r0, r6
 802d700:	f8ca 0000 	str.w	r0, [sl]
 802d704:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802d708:	693e      	ldr	r6, [r7, #16]
 802d70a:	e7be      	b.n	802d68a <__ssvfiscanf_r+0x752>
 802d70c:	2600      	movs	r6, #0
 802d70e:	e7bc      	b.n	802d68a <__ssvfiscanf_r+0x752>
 802d710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d712:	2b00      	cmp	r3, #0
 802d714:	f47f af3d 	bne.w	802d592 <__ssvfiscanf_r+0x65a>
 802d718:	e78c      	b.n	802d634 <__ssvfiscanf_r+0x6fc>
 802d71a:	b1e3      	cbz	r3, 802d756 <__ssvfiscanf_r+0x81e>
 802d71c:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 802d720:	6823      	ldr	r3, [r4, #0]
 802d722:	781a      	ldrb	r2, [r3, #0]
 802d724:	5cb2      	ldrb	r2, [r6, r2]
 802d726:	b91a      	cbnz	r2, 802d730 <__ssvfiscanf_r+0x7f8>
 802d728:	2d00      	cmp	r5, #0
 802d72a:	f47f ae92 	bne.w	802d452 <__ssvfiscanf_r+0x51a>
 802d72e:	e450      	b.n	802cfd2 <__ssvfiscanf_r+0x9a>
 802d730:	3301      	adds	r3, #1
 802d732:	6862      	ldr	r2, [r4, #4]
 802d734:	6023      	str	r3, [r4, #0]
 802d736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d738:	3501      	adds	r5, #1
 802d73a:	3a01      	subs	r2, #1
 802d73c:	42ab      	cmp	r3, r5
 802d73e:	6062      	str	r2, [r4, #4]
 802d740:	f43f ae87 	beq.w	802d452 <__ssvfiscanf_r+0x51a>
 802d744:	2a00      	cmp	r2, #0
 802d746:	dceb      	bgt.n	802d720 <__ssvfiscanf_r+0x7e8>
 802d748:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d74a:	4621      	mov	r1, r4
 802d74c:	f7ff fb9d 	bl	802ce8a <__ssrefill_r>
 802d750:	2800      	cmp	r0, #0
 802d752:	d0e5      	beq.n	802d720 <__ssvfiscanf_r+0x7e8>
 802d754:	e67d      	b.n	802d452 <__ssvfiscanf_r+0x51a>
 802d756:	6a3b      	ldr	r3, [r7, #32]
 802d758:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 802d75c:	f853 5b04 	ldr.w	r5, [r3], #4
 802d760:	623b      	str	r3, [r7, #32]
 802d762:	d07e      	beq.n	802d862 <__ssvfiscanf_r+0x92a>
 802d764:	2d00      	cmp	r5, #0
 802d766:	f43f ac34 	beq.w	802cfd2 <__ssvfiscanf_r+0x9a>
 802d76a:	2020      	movs	r0, #32
 802d76c:	f7fe fbce 	bl	802bf0c <malloc>
 802d770:	4680      	mov	r8, r0
 802d772:	2800      	cmp	r0, #0
 802d774:	f43f ac9c 	beq.w	802d0b0 <__ssvfiscanf_r+0x178>
 802d778:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802d77c:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 802d780:	6028      	str	r0, [r5, #0]
 802d782:	45b1      	cmp	r9, r6
 802d784:	d312      	bcc.n	802d7ac <__ssvfiscanf_r+0x874>
 802d786:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802d78a:	429e      	cmp	r6, r3
 802d78c:	f200 82e8 	bhi.w	802dd60 <__ssvfiscanf_r+0xe28>
 802d790:	3608      	adds	r6, #8
 802d792:	b2b6      	uxth	r6, r6
 802d794:	f8db 0000 	ldr.w	r0, [fp]
 802d798:	00b1      	lsls	r1, r6, #2
 802d79a:	f003 fb41 	bl	8030e20 <realloc>
 802d79e:	2800      	cmp	r0, #0
 802d7a0:	f000 82de 	beq.w	802dd60 <__ssvfiscanf_r+0xe28>
 802d7a4:	f8cb 0000 	str.w	r0, [fp]
 802d7a8:	f8ab 6004 	strh.w	r6, [fp, #4]
 802d7ac:	f8db 3000 	ldr.w	r3, [fp]
 802d7b0:	f109 0201 	add.w	r2, r9, #1
 802d7b4:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802d7b8:	46aa      	mov	sl, r5
 802d7ba:	f8ab 2006 	strh.w	r2, [fp, #6]
 802d7be:	4645      	mov	r5, r8
 802d7c0:	f04f 0920 	mov.w	r9, #32
 802d7c4:	462e      	mov	r6, r5
 802d7c6:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 802d7ca:	6823      	ldr	r3, [r4, #0]
 802d7cc:	781a      	ldrb	r2, [r3, #0]
 802d7ce:	f818 2002 	ldrb.w	r2, [r8, r2]
 802d7d2:	b362      	cbz	r2, 802d82e <__ssvfiscanf_r+0x8f6>
 802d7d4:	6862      	ldr	r2, [r4, #4]
 802d7d6:	3a01      	subs	r2, #1
 802d7d8:	6062      	str	r2, [r4, #4]
 802d7da:	1c5a      	adds	r2, r3, #1
 802d7dc:	6022      	str	r2, [r4, #0]
 802d7de:	781b      	ldrb	r3, [r3, #0]
 802d7e0:	f805 3b01 	strb.w	r3, [r5], #1
 802d7e4:	f1ba 0f00 	cmp.w	sl, #0
 802d7e8:	d011      	beq.n	802d80e <__ssvfiscanf_r+0x8d6>
 802d7ea:	1bab      	subs	r3, r5, r6
 802d7ec:	454b      	cmp	r3, r9
 802d7ee:	d30e      	bcc.n	802d80e <__ssvfiscanf_r+0x8d6>
 802d7f0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802d7f4:	4630      	mov	r0, r6
 802d7f6:	4649      	mov	r1, r9
 802d7f8:	613b      	str	r3, [r7, #16]
 802d7fa:	f003 fb11 	bl	8030e20 <realloc>
 802d7fe:	4606      	mov	r6, r0
 802d800:	2800      	cmp	r0, #0
 802d802:	f43f ac55 	beq.w	802d0b0 <__ssvfiscanf_r+0x178>
 802d806:	693b      	ldr	r3, [r7, #16]
 802d808:	f8ca 0000 	str.w	r0, [sl]
 802d80c:	18c5      	adds	r5, r0, r3
 802d80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d810:	3b01      	subs	r3, #1
 802d812:	62bb      	str	r3, [r7, #40]	@ 0x28
 802d814:	d00b      	beq.n	802d82e <__ssvfiscanf_r+0x8f6>
 802d816:	6863      	ldr	r3, [r4, #4]
 802d818:	2b00      	cmp	r3, #0
 802d81a:	dcd6      	bgt.n	802d7ca <__ssvfiscanf_r+0x892>
 802d81c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d81e:	4621      	mov	r1, r4
 802d820:	f7ff fb33 	bl	802ce8a <__ssrefill_r>
 802d824:	2800      	cmp	r0, #0
 802d826:	d0d0      	beq.n	802d7ca <__ssvfiscanf_r+0x892>
 802d828:	42b5      	cmp	r5, r6
 802d82a:	f43f ac3c 	beq.w	802d0a6 <__ssvfiscanf_r+0x16e>
 802d82e:	1bae      	subs	r6, r5, r6
 802d830:	f43f abcf 	beq.w	802cfd2 <__ssvfiscanf_r+0x9a>
 802d834:	2300      	movs	r3, #0
 802d836:	702b      	strb	r3, [r5, #0]
 802d838:	f1ba 0f00 	cmp.w	sl, #0
 802d83c:	d009      	beq.n	802d852 <__ssvfiscanf_r+0x91a>
 802d83e:	1c71      	adds	r1, r6, #1
 802d840:	4589      	cmp	r9, r1
 802d842:	d906      	bls.n	802d852 <__ssvfiscanf_r+0x91a>
 802d844:	f8da 0000 	ldr.w	r0, [sl]
 802d848:	f003 faea 	bl	8030e20 <realloc>
 802d84c:	b108      	cbz	r0, 802d852 <__ssvfiscanf_r+0x91a>
 802d84e:	f8ca 0000 	str.w	r0, [sl]
 802d852:	69fb      	ldr	r3, [r7, #28]
 802d854:	3301      	adds	r3, #1
 802d856:	61fb      	str	r3, [r7, #28]
 802d858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d85a:	4433      	add	r3, r6
 802d85c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802d85e:	f7ff bb8c 	b.w	802cf7a <__ssvfiscanf_r+0x42>
 802d862:	46ca      	mov	sl, r9
 802d864:	e7ae      	b.n	802d7c4 <__ssvfiscanf_r+0x88c>
 802d866:	bf00      	nop
 802d868:	200000e8 	.word	0x200000e8
 802d86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d86e:	2b00      	cmp	r3, #0
 802d870:	bf08      	it	eq
 802d872:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802d876:	f016 0501 	ands.w	r5, r6, #1
 802d87a:	62bb      	str	r3, [r7, #40]	@ 0x28
 802d87c:	f006 0810 	and.w	r8, r6, #16
 802d880:	f000 80e1 	beq.w	802da46 <__ssvfiscanf_r+0xb0e>
 802d884:	f1b8 0f00 	cmp.w	r8, #0
 802d888:	f040 8089 	bne.w	802d99e <__ssvfiscanf_r+0xa66>
 802d88c:	6a3b      	ldr	r3, [r7, #32]
 802d88e:	0636      	lsls	r6, r6, #24
 802d890:	f853 5b04 	ldr.w	r5, [r3], #4
 802d894:	623b      	str	r3, [r7, #32]
 802d896:	f140 8089 	bpl.w	802d9ac <__ssvfiscanf_r+0xa74>
 802d89a:	2d00      	cmp	r5, #0
 802d89c:	f43f ac9f 	beq.w	802d1de <__ssvfiscanf_r+0x2a6>
 802d8a0:	2080      	movs	r0, #128	@ 0x80
 802d8a2:	f7fe fb33 	bl	802bf0c <malloc>
 802d8a6:	4606      	mov	r6, r0
 802d8a8:	2800      	cmp	r0, #0
 802d8aa:	f43f ac95 	beq.w	802d1d8 <__ssvfiscanf_r+0x2a0>
 802d8ae:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802d8b2:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802d8b6:	6028      	str	r0, [r5, #0]
 802d8b8:	4599      	cmp	r9, r3
 802d8ba:	d314      	bcc.n	802d8e6 <__ssvfiscanf_r+0x9ae>
 802d8bc:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802d8c0:	4293      	cmp	r3, r2
 802d8c2:	f200 824d 	bhi.w	802dd60 <__ssvfiscanf_r+0xe28>
 802d8c6:	3308      	adds	r3, #8
 802d8c8:	fa1f fa83 	uxth.w	sl, r3
 802d8cc:	f8db 0000 	ldr.w	r0, [fp]
 802d8d0:	ea4f 018a 	mov.w	r1, sl, lsl #2
 802d8d4:	f003 faa4 	bl	8030e20 <realloc>
 802d8d8:	2800      	cmp	r0, #0
 802d8da:	f000 8241 	beq.w	802dd60 <__ssvfiscanf_r+0xe28>
 802d8de:	f8cb 0000 	str.w	r0, [fp]
 802d8e2:	f8ab a004 	strh.w	sl, [fp, #4]
 802d8e6:	f8db 3000 	ldr.w	r3, [fp]
 802d8ea:	f109 0201 	add.w	r2, r9, #1
 802d8ee:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802d8f2:	46aa      	mov	sl, r5
 802d8f4:	f8ab 2006 	strh.w	r2, [fp, #6]
 802d8f8:	4635      	mov	r5, r6
 802d8fa:	f04f 0920 	mov.w	r9, #32
 802d8fe:	2300      	movs	r3, #0
 802d900:	6822      	ldr	r2, [r4, #0]
 802d902:	499e      	ldr	r1, [pc, #632]	@ (802db7c <__ssvfiscanf_r+0xc44>)
 802d904:	7812      	ldrb	r2, [r2, #0]
 802d906:	5c8a      	ldrb	r2, [r1, r2]
 802d908:	0711      	lsls	r1, r2, #28
 802d90a:	d43c      	bmi.n	802d986 <__ssvfiscanf_r+0xa4e>
 802d90c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802d90e:	2a00      	cmp	r2, #0
 802d910:	d039      	beq.n	802d986 <__ssvfiscanf_r+0xa4e>
 802d912:	613b      	str	r3, [r7, #16]
 802d914:	f7fd fa3c 	bl	802ad90 <__locale_mb_cur_max>
 802d918:	693b      	ldr	r3, [r7, #16]
 802d91a:	4298      	cmp	r0, r3
 802d91c:	f43f abc3 	beq.w	802d0a6 <__ssvfiscanf_r+0x16e>
 802d920:	1c5a      	adds	r2, r3, #1
 802d922:	613a      	str	r2, [r7, #16]
 802d924:	6822      	ldr	r2, [r4, #0]
 802d926:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802d92a:	f812 0b01 	ldrb.w	r0, [r2], #1
 802d92e:	54c8      	strb	r0, [r1, r3]
 802d930:	6863      	ldr	r3, [r4, #4]
 802d932:	3b01      	subs	r3, #1
 802d934:	e9c4 2300 	strd	r2, r3, [r4]
 802d938:	69bb      	ldr	r3, [r7, #24]
 802d93a:	2b03      	cmp	r3, #3
 802d93c:	d102      	bne.n	802d944 <__ssvfiscanf_r+0xa0c>
 802d93e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802d940:	2b04      	cmp	r3, #4
 802d942:	d005      	beq.n	802d950 <__ssvfiscanf_r+0xa18>
 802d944:	2208      	movs	r2, #8
 802d946:	2100      	movs	r1, #0
 802d948:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802d94c:	f7fc f898 	bl	8029a80 <memset>
 802d950:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802d954:	9300      	str	r3, [sp, #0]
 802d956:	693b      	ldr	r3, [r7, #16]
 802d958:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d95a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802d95e:	4629      	mov	r1, r5
 802d960:	f004 fe18 	bl	8032594 <_mbrtowc_r>
 802d964:	4603      	mov	r3, r0
 802d966:	61b8      	str	r0, [r7, #24]
 802d968:	1c58      	adds	r0, r3, #1
 802d96a:	f43f ab9c 	beq.w	802d0a6 <__ssvfiscanf_r+0x16e>
 802d96e:	bb0b      	cbnz	r3, 802d9b4 <__ssvfiscanf_r+0xa7c>
 802d970:	602b      	str	r3, [r5, #0]
 802d972:	6828      	ldr	r0, [r5, #0]
 802d974:	f004 fe28 	bl	80325c8 <iswspace>
 802d978:	4603      	mov	r3, r0
 802d97a:	2800      	cmp	r0, #0
 802d97c:	d037      	beq.n	802d9ee <__ssvfiscanf_r+0xab6>
 802d97e:	693a      	ldr	r2, [r7, #16]
 802d980:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802d984:	bb4a      	cbnz	r2, 802d9da <__ssvfiscanf_r+0xaa2>
 802d986:	f1b8 0f00 	cmp.w	r8, #0
 802d98a:	f47f aaf6 	bne.w	802cf7a <__ssvfiscanf_r+0x42>
 802d98e:	f8c5 8000 	str.w	r8, [r5]
 802d992:	f1ba 0f00 	cmp.w	sl, #0
 802d996:	f43f ad34 	beq.w	802d402 <__ssvfiscanf_r+0x4ca>
 802d99a:	1ba9      	subs	r1, r5, r6
 802d99c:	e655      	b.n	802d64a <__ssvfiscanf_r+0x712>
 802d99e:	f04f 0900 	mov.w	r9, #0
 802d9a2:	464e      	mov	r6, r9
 802d9a4:	46ca      	mov	sl, r9
 802d9a6:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 802d9aa:	e7a8      	b.n	802d8fe <__ssvfiscanf_r+0x9c6>
 802d9ac:	46c1      	mov	r9, r8
 802d9ae:	4646      	mov	r6, r8
 802d9b0:	46c2      	mov	sl, r8
 802d9b2:	e7a4      	b.n	802d8fe <__ssvfiscanf_r+0x9c6>
 802d9b4:	69bb      	ldr	r3, [r7, #24]
 802d9b6:	3302      	adds	r3, #2
 802d9b8:	d1db      	bne.n	802d972 <__ssvfiscanf_r+0xa3a>
 802d9ba:	693b      	ldr	r3, [r7, #16]
 802d9bc:	6862      	ldr	r2, [r4, #4]
 802d9be:	2a00      	cmp	r2, #0
 802d9c0:	dc9e      	bgt.n	802d900 <__ssvfiscanf_r+0x9c8>
 802d9c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d9c4:	613b      	str	r3, [r7, #16]
 802d9c6:	4621      	mov	r1, r4
 802d9c8:	f7ff fa5f 	bl	802ce8a <__ssrefill_r>
 802d9cc:	693b      	ldr	r3, [r7, #16]
 802d9ce:	2800      	cmp	r0, #0
 802d9d0:	d096      	beq.n	802d900 <__ssvfiscanf_r+0x9c8>
 802d9d2:	2b00      	cmp	r3, #0
 802d9d4:	f47f ab67 	bne.w	802d0a6 <__ssvfiscanf_r+0x16e>
 802d9d8:	e7d5      	b.n	802d986 <__ssvfiscanf_r+0xa4e>
 802d9da:	693a      	ldr	r2, [r7, #16]
 802d9dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d9de:	3a01      	subs	r2, #1
 802d9e0:	613a      	str	r2, [r7, #16]
 802d9e2:	6939      	ldr	r1, [r7, #16]
 802d9e4:	4622      	mov	r2, r4
 802d9e6:	5c59      	ldrb	r1, [r3, r1]
 802d9e8:	f7ff fa14 	bl	802ce14 <_sungetc_r>
 802d9ec:	e7c7      	b.n	802d97e <__ssvfiscanf_r+0xa46>
 802d9ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802d9f0:	6939      	ldr	r1, [r7, #16]
 802d9f2:	440a      	add	r2, r1
 802d9f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802d9f6:	69ba      	ldr	r2, [r7, #24]
 802d9f8:	2a03      	cmp	r2, #3
 802d9fa:	d102      	bne.n	802da02 <__ssvfiscanf_r+0xaca>
 802d9fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802d9fe:	2a04      	cmp	r2, #4
 802da00:	d002      	beq.n	802da08 <__ssvfiscanf_r+0xad0>
 802da02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802da04:	3a01      	subs	r2, #1
 802da06:	62ba      	str	r2, [r7, #40]	@ 0x28
 802da08:	f1b8 0f00 	cmp.w	r8, #0
 802da0c:	d1d6      	bne.n	802d9bc <__ssvfiscanf_r+0xa84>
 802da0e:	3504      	adds	r5, #4
 802da10:	f1ba 0f00 	cmp.w	sl, #0
 802da14:	d015      	beq.n	802da42 <__ssvfiscanf_r+0xb0a>
 802da16:	1bab      	subs	r3, r5, r6
 802da18:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 802da1c:	d80f      	bhi.n	802da3e <__ssvfiscanf_r+0xb06>
 802da1e:	4630      	mov	r0, r6
 802da20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802da24:	613b      	str	r3, [r7, #16]
 802da26:	f003 f9fb 	bl	8030e20 <realloc>
 802da2a:	4606      	mov	r6, r0
 802da2c:	2800      	cmp	r0, #0
 802da2e:	f43f abd3 	beq.w	802d1d8 <__ssvfiscanf_r+0x2a0>
 802da32:	693b      	ldr	r3, [r7, #16]
 802da34:	f8ca 0000 	str.w	r0, [sl]
 802da38:	18c5      	adds	r5, r0, r3
 802da3a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802da3e:	4643      	mov	r3, r8
 802da40:	e7bc      	b.n	802d9bc <__ssvfiscanf_r+0xa84>
 802da42:	4653      	mov	r3, sl
 802da44:	e7ba      	b.n	802d9bc <__ssvfiscanf_r+0xa84>
 802da46:	f1b8 0f00 	cmp.w	r8, #0
 802da4a:	d019      	beq.n	802da80 <__ssvfiscanf_r+0xb48>
 802da4c:	4e4b      	ldr	r6, [pc, #300]	@ (802db7c <__ssvfiscanf_r+0xc44>)
 802da4e:	6823      	ldr	r3, [r4, #0]
 802da50:	781a      	ldrb	r2, [r3, #0]
 802da52:	5cb2      	ldrb	r2, [r6, r2]
 802da54:	0712      	lsls	r2, r2, #28
 802da56:	f53f acfc 	bmi.w	802d452 <__ssvfiscanf_r+0x51a>
 802da5a:	3301      	adds	r3, #1
 802da5c:	6862      	ldr	r2, [r4, #4]
 802da5e:	6023      	str	r3, [r4, #0]
 802da60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802da62:	3501      	adds	r5, #1
 802da64:	3a01      	subs	r2, #1
 802da66:	429d      	cmp	r5, r3
 802da68:	6062      	str	r2, [r4, #4]
 802da6a:	f43f acf2 	beq.w	802d452 <__ssvfiscanf_r+0x51a>
 802da6e:	2a00      	cmp	r2, #0
 802da70:	dced      	bgt.n	802da4e <__ssvfiscanf_r+0xb16>
 802da72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802da74:	4621      	mov	r1, r4
 802da76:	f7ff fa08 	bl	802ce8a <__ssrefill_r>
 802da7a:	2800      	cmp	r0, #0
 802da7c:	d0e7      	beq.n	802da4e <__ssvfiscanf_r+0xb16>
 802da7e:	e4e8      	b.n	802d452 <__ssvfiscanf_r+0x51a>
 802da80:	6a3b      	ldr	r3, [r7, #32]
 802da82:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802da86:	f853 5b04 	ldr.w	r5, [r3], #4
 802da8a:	623b      	str	r3, [r7, #32]
 802da8c:	d074      	beq.n	802db78 <__ssvfiscanf_r+0xc40>
 802da8e:	2d00      	cmp	r5, #0
 802da90:	f43f aa9f 	beq.w	802cfd2 <__ssvfiscanf_r+0x9a>
 802da94:	2020      	movs	r0, #32
 802da96:	f7fe fa39 	bl	802bf0c <malloc>
 802da9a:	4680      	mov	r8, r0
 802da9c:	2800      	cmp	r0, #0
 802da9e:	f43f ab07 	beq.w	802d0b0 <__ssvfiscanf_r+0x178>
 802daa2:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802daa6:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 802daaa:	6028      	str	r0, [r5, #0]
 802daac:	45b1      	cmp	r9, r6
 802daae:	d312      	bcc.n	802dad6 <__ssvfiscanf_r+0xb9e>
 802dab0:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802dab4:	429e      	cmp	r6, r3
 802dab6:	f200 8153 	bhi.w	802dd60 <__ssvfiscanf_r+0xe28>
 802daba:	3608      	adds	r6, #8
 802dabc:	b2b6      	uxth	r6, r6
 802dabe:	f8db 0000 	ldr.w	r0, [fp]
 802dac2:	00b1      	lsls	r1, r6, #2
 802dac4:	f003 f9ac 	bl	8030e20 <realloc>
 802dac8:	2800      	cmp	r0, #0
 802daca:	f000 8149 	beq.w	802dd60 <__ssvfiscanf_r+0xe28>
 802dace:	f8cb 0000 	str.w	r0, [fp]
 802dad2:	f8ab 6004 	strh.w	r6, [fp, #4]
 802dad6:	f8db 3000 	ldr.w	r3, [fp]
 802dada:	f109 0201 	add.w	r2, r9, #1
 802dade:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802dae2:	46aa      	mov	sl, r5
 802dae4:	f8ab 2006 	strh.w	r2, [fp, #6]
 802dae8:	4645      	mov	r5, r8
 802daea:	2620      	movs	r6, #32
 802daec:	46a9      	mov	r9, r5
 802daee:	6823      	ldr	r3, [r4, #0]
 802daf0:	4922      	ldr	r1, [pc, #136]	@ (802db7c <__ssvfiscanf_r+0xc44>)
 802daf2:	781a      	ldrb	r2, [r3, #0]
 802daf4:	5c8a      	ldrb	r2, [r1, r2]
 802daf6:	0710      	lsls	r0, r2, #28
 802daf8:	d428      	bmi.n	802db4c <__ssvfiscanf_r+0xc14>
 802dafa:	6862      	ldr	r2, [r4, #4]
 802dafc:	3a01      	subs	r2, #1
 802dafe:	6062      	str	r2, [r4, #4]
 802db00:	1c5a      	adds	r2, r3, #1
 802db02:	6022      	str	r2, [r4, #0]
 802db04:	781b      	ldrb	r3, [r3, #0]
 802db06:	f805 3b01 	strb.w	r3, [r5], #1
 802db0a:	f1ba 0f00 	cmp.w	sl, #0
 802db0e:	d010      	beq.n	802db32 <__ssvfiscanf_r+0xbfa>
 802db10:	eba5 0809 	sub.w	r8, r5, r9
 802db14:	45b0      	cmp	r8, r6
 802db16:	d30c      	bcc.n	802db32 <__ssvfiscanf_r+0xbfa>
 802db18:	0076      	lsls	r6, r6, #1
 802db1a:	4648      	mov	r0, r9
 802db1c:	4631      	mov	r1, r6
 802db1e:	f003 f97f 	bl	8030e20 <realloc>
 802db22:	4681      	mov	r9, r0
 802db24:	2800      	cmp	r0, #0
 802db26:	f43f aac3 	beq.w	802d0b0 <__ssvfiscanf_r+0x178>
 802db2a:	eb00 0508 	add.w	r5, r0, r8
 802db2e:	f8ca 0000 	str.w	r0, [sl]
 802db32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802db34:	3b01      	subs	r3, #1
 802db36:	62bb      	str	r3, [r7, #40]	@ 0x28
 802db38:	d008      	beq.n	802db4c <__ssvfiscanf_r+0xc14>
 802db3a:	6863      	ldr	r3, [r4, #4]
 802db3c:	2b00      	cmp	r3, #0
 802db3e:	dcd6      	bgt.n	802daee <__ssvfiscanf_r+0xbb6>
 802db40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802db42:	4621      	mov	r1, r4
 802db44:	f7ff f9a1 	bl	802ce8a <__ssrefill_r>
 802db48:	2800      	cmp	r0, #0
 802db4a:	d0d0      	beq.n	802daee <__ssvfiscanf_r+0xbb6>
 802db4c:	2300      	movs	r3, #0
 802db4e:	702b      	strb	r3, [r5, #0]
 802db50:	eba5 0509 	sub.w	r5, r5, r9
 802db54:	f1ba 0f00 	cmp.w	sl, #0
 802db58:	f43f acce 	beq.w	802d4f8 <__ssvfiscanf_r+0x5c0>
 802db5c:	1c69      	adds	r1, r5, #1
 802db5e:	428e      	cmp	r6, r1
 802db60:	f67f acca 	bls.w	802d4f8 <__ssvfiscanf_r+0x5c0>
 802db64:	f8da 0000 	ldr.w	r0, [sl]
 802db68:	f003 f95a 	bl	8030e20 <realloc>
 802db6c:	2800      	cmp	r0, #0
 802db6e:	f43f acc3 	beq.w	802d4f8 <__ssvfiscanf_r+0x5c0>
 802db72:	f8ca 0000 	str.w	r0, [sl]
 802db76:	e4bf      	b.n	802d4f8 <__ssvfiscanf_r+0x5c0>
 802db78:	46b2      	mov	sl, r6
 802db7a:	e7b7      	b.n	802daec <__ssvfiscanf_r+0xbb4>
 802db7c:	08038479 	.word	0x08038479
 802db80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802db82:	3b01      	subs	r3, #1
 802db84:	2b26      	cmp	r3, #38	@ 0x26
 802db86:	bf81      	itttt	hi
 802db88:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 802db8a:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 802db8e:	2327      	movhi	r3, #39	@ 0x27
 802db90:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 802db92:	bf98      	it	ls
 802db94:	f04f 0800 	movls.w	r8, #0
 802db98:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 802db9c:	f04f 0900 	mov.w	r9, #0
 802dba0:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 802dba4:	6822      	ldr	r2, [r4, #0]
 802dba6:	7813      	ldrb	r3, [r2, #0]
 802dba8:	2b39      	cmp	r3, #57	@ 0x39
 802dbaa:	d80f      	bhi.n	802dbcc <__ssvfiscanf_r+0xc94>
 802dbac:	2b2a      	cmp	r3, #42	@ 0x2a
 802dbae:	d91a      	bls.n	802dbe6 <__ssvfiscanf_r+0xcae>
 802dbb0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 802dbb4:	290e      	cmp	r1, #14
 802dbb6:	d816      	bhi.n	802dbe6 <__ssvfiscanf_r+0xcae>
 802dbb8:	e8df f001 	tbb	[pc, r1]
 802dbbc:	15771577 	.word	0x15771577
 802dbc0:	67673e15 	.word	0x67673e15
 802dbc4:	67676767 	.word	0x67676767
 802dbc8:	6f67      	.short	0x6f67
 802dbca:	6f          	.byte	0x6f
 802dbcb:	00          	.byte	0x00
 802dbcc:	2b66      	cmp	r3, #102	@ 0x66
 802dbce:	d831      	bhi.n	802dc34 <__ssvfiscanf_r+0xcfc>
 802dbd0:	2b60      	cmp	r3, #96	@ 0x60
 802dbd2:	d803      	bhi.n	802dbdc <__ssvfiscanf_r+0xca4>
 802dbd4:	2b46      	cmp	r3, #70	@ 0x46
 802dbd6:	d804      	bhi.n	802dbe2 <__ssvfiscanf_r+0xcaa>
 802dbd8:	2b40      	cmp	r3, #64	@ 0x40
 802dbda:	d904      	bls.n	802dbe6 <__ssvfiscanf_r+0xcae>
 802dbdc:	6979      	ldr	r1, [r7, #20]
 802dbde:	290a      	cmp	r1, #10
 802dbe0:	e061      	b.n	802dca6 <__ssvfiscanf_r+0xd6e>
 802dbe2:	2b58      	cmp	r3, #88	@ 0x58
 802dbe4:	d066      	beq.n	802dcb4 <__ssvfiscanf_r+0xd7c>
 802dbe6:	05f1      	lsls	r1, r6, #23
 802dbe8:	d511      	bpl.n	802dc0e <__ssvfiscanf_r+0xcd6>
 802dbea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802dbee:	459a      	cmp	sl, r3
 802dbf0:	d908      	bls.n	802dc04 <__ssvfiscanf_r+0xccc>
 802dbf2:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 802dbf6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802dbf8:	4622      	mov	r2, r4
 802dbfa:	f7ff f90b 	bl	802ce14 <_sungetc_r>
 802dbfe:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
 802dc02:	46c2      	mov	sl, r8
 802dc04:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802dc08:	459a      	cmp	sl, r3
 802dc0a:	f43f a9e2 	beq.w	802cfd2 <__ssvfiscanf_r+0x9a>
 802dc0e:	f016 0210 	ands.w	r2, r6, #16
 802dc12:	d16b      	bne.n	802dcec <__ssvfiscanf_r+0xdb4>
 802dc14:	697b      	ldr	r3, [r7, #20]
 802dc16:	f88a 2000 	strb.w	r2, [sl]
 802dc1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802dc1c:	68fd      	ldr	r5, [r7, #12]
 802dc1e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802dc22:	47a8      	blx	r5
 802dc24:	6a3b      	ldr	r3, [r7, #32]
 802dc26:	06b2      	lsls	r2, r6, #26
 802dc28:	f103 0804 	add.w	r8, r3, #4
 802dc2c:	d555      	bpl.n	802dcda <__ssvfiscanf_r+0xda2>
 802dc2e:	681b      	ldr	r3, [r3, #0]
 802dc30:	6018      	str	r0, [r3, #0]
 802dc32:	e057      	b.n	802dce4 <__ssvfiscanf_r+0xdac>
 802dc34:	2b78      	cmp	r3, #120	@ 0x78
 802dc36:	e7d5      	b.n	802dbe4 <__ssvfiscanf_r+0xcac>
 802dc38:	0531      	lsls	r1, r6, #20
 802dc3a:	d509      	bpl.n	802dc50 <__ssvfiscanf_r+0xd18>
 802dc3c:	6979      	ldr	r1, [r7, #20]
 802dc3e:	b919      	cbnz	r1, 802dc48 <__ssvfiscanf_r+0xd10>
 802dc40:	2108      	movs	r1, #8
 802dc42:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 802dc46:	6179      	str	r1, [r7, #20]
 802dc48:	0575      	lsls	r5, r6, #21
 802dc4a:	d506      	bpl.n	802dc5a <__ssvfiscanf_r+0xd22>
 802dc4c:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 802dc50:	4655      	mov	r5, sl
 802dc52:	f805 3b01 	strb.w	r3, [r5], #1
 802dc56:	46aa      	mov	sl, r5
 802dc58:	e00b      	b.n	802dc72 <__ssvfiscanf_r+0xd3a>
 802dc5a:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 802dc5e:	f1b8 0f00 	cmp.w	r8, #0
 802dc62:	d004      	beq.n	802dc6e <__ssvfiscanf_r+0xd36>
 802dc64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802dc66:	3301      	adds	r3, #1
 802dc68:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802dc6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 802dc6e:	f109 0901 	add.w	r9, r9, #1
 802dc72:	6863      	ldr	r3, [r4, #4]
 802dc74:	3b01      	subs	r3, #1
 802dc76:	2b00      	cmp	r3, #0
 802dc78:	6063      	str	r3, [r4, #4]
 802dc7a:	dd27      	ble.n	802dccc <__ssvfiscanf_r+0xd94>
 802dc7c:	3201      	adds	r2, #1
 802dc7e:	6022      	str	r2, [r4, #0]
 802dc80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802dc82:	3b01      	subs	r3, #1
 802dc84:	62bb      	str	r3, [r7, #40]	@ 0x28
 802dc86:	d18d      	bne.n	802dba4 <__ssvfiscanf_r+0xc6c>
 802dc88:	e7ad      	b.n	802dbe6 <__ssvfiscanf_r+0xcae>
 802dc8a:	6978      	ldr	r0, [r7, #20]
 802dc8c:	4936      	ldr	r1, [pc, #216]	@ (802dd68 <__ssvfiscanf_r+0xe30>)
 802dc8e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 802dc92:	6179      	str	r1, [r7, #20]
 802dc94:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 802dc98:	e7da      	b.n	802dc50 <__ssvfiscanf_r+0xd18>
 802dc9a:	6978      	ldr	r0, [r7, #20]
 802dc9c:	4932      	ldr	r1, [pc, #200]	@ (802dd68 <__ssvfiscanf_r+0xe30>)
 802dc9e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 802dca2:	6179      	str	r1, [r7, #20]
 802dca4:	2908      	cmp	r1, #8
 802dca6:	dcf5      	bgt.n	802dc94 <__ssvfiscanf_r+0xd5c>
 802dca8:	e79d      	b.n	802dbe6 <__ssvfiscanf_r+0xcae>
 802dcaa:	0630      	lsls	r0, r6, #24
 802dcac:	d59b      	bpl.n	802dbe6 <__ssvfiscanf_r+0xcae>
 802dcae:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 802dcb2:	e7cd      	b.n	802dc50 <__ssvfiscanf_r+0xd18>
 802dcb4:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 802dcb8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802dcbc:	d193      	bne.n	802dbe6 <__ssvfiscanf_r+0xcae>
 802dcbe:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 802dcc2:	2110      	movs	r1, #16
 802dcc4:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 802dcc8:	6179      	str	r1, [r7, #20]
 802dcca:	e7c1      	b.n	802dc50 <__ssvfiscanf_r+0xd18>
 802dccc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802dcce:	4621      	mov	r1, r4
 802dcd0:	f7ff f8db 	bl	802ce8a <__ssrefill_r>
 802dcd4:	2800      	cmp	r0, #0
 802dcd6:	d0d3      	beq.n	802dc80 <__ssvfiscanf_r+0xd48>
 802dcd8:	e785      	b.n	802dbe6 <__ssvfiscanf_r+0xcae>
 802dcda:	0733      	lsls	r3, r6, #28
 802dcdc:	d50d      	bpl.n	802dcfa <__ssvfiscanf_r+0xdc2>
 802dcde:	6a3b      	ldr	r3, [r7, #32]
 802dce0:	681b      	ldr	r3, [r3, #0]
 802dce2:	7018      	strb	r0, [r3, #0]
 802dce4:	69fb      	ldr	r3, [r7, #28]
 802dce6:	3301      	adds	r3, #1
 802dce8:	e9c7 3807 	strd	r3, r8, [r7, #28]
 802dcec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802dcf0:	ebaa 0503 	sub.w	r5, sl, r3
 802dcf4:	444d      	add	r5, r9
 802dcf6:	f7ff bbac 	b.w	802d452 <__ssvfiscanf_r+0x51a>
 802dcfa:	0775      	lsls	r5, r6, #29
 802dcfc:	d503      	bpl.n	802dd06 <__ssvfiscanf_r+0xdce>
 802dcfe:	6a3b      	ldr	r3, [r7, #32]
 802dd00:	681b      	ldr	r3, [r3, #0]
 802dd02:	8018      	strh	r0, [r3, #0]
 802dd04:	e7ee      	b.n	802dce4 <__ssvfiscanf_r+0xdac>
 802dd06:	f016 0201 	ands.w	r2, r6, #1
 802dd0a:	d001      	beq.n	802dd10 <__ssvfiscanf_r+0xdd8>
 802dd0c:	6a3b      	ldr	r3, [r7, #32]
 802dd0e:	e78e      	b.n	802dc2e <__ssvfiscanf_r+0xcf6>
 802dd10:	07b1      	lsls	r1, r6, #30
 802dd12:	d5fb      	bpl.n	802dd0c <__ssvfiscanf_r+0xdd4>
 802dd14:	4b15      	ldr	r3, [pc, #84]	@ (802dd6c <__ssvfiscanf_r+0xe34>)
 802dd16:	68f9      	ldr	r1, [r7, #12]
 802dd18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802dd1a:	4299      	cmp	r1, r3
 802dd1c:	697b      	ldr	r3, [r7, #20]
 802dd1e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802dd22:	d106      	bne.n	802dd32 <__ssvfiscanf_r+0xdfa>
 802dd24:	f004 fc34 	bl	8032590 <_strtoull_r>
 802dd28:	6a3b      	ldr	r3, [r7, #32]
 802dd2a:	681b      	ldr	r3, [r3, #0]
 802dd2c:	e9c3 0100 	strd	r0, r1, [r3]
 802dd30:	e7d8      	b.n	802dce4 <__ssvfiscanf_r+0xdac>
 802dd32:	f004 fb81 	bl	8032438 <_strtoll_r>
 802dd36:	e7f7      	b.n	802dd28 <__ssvfiscanf_r+0xdf0>
 802dd38:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802dd3c:	6818      	ldr	r0, [r3, #0]
 802dd3e:	f7fe f8ed 	bl	802bf1c <free>
 802dd42:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802dd46:	3401      	adds	r4, #1
 802dd48:	601e      	str	r6, [r3, #0]
 802dd4a:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 802dd4e:	f8db 5000 	ldr.w	r5, [fp]
 802dd52:	42a3      	cmp	r3, r4
 802dd54:	dcf0      	bgt.n	802dd38 <__ssvfiscanf_r+0xe00>
 802dd56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802dd5a:	61fb      	str	r3, [r7, #28]
 802dd5c:	f7ff ba46 	b.w	802d1ec <__ssvfiscanf_r+0x2b4>
 802dd60:	2400      	movs	r4, #0
 802dd62:	4626      	mov	r6, r4
 802dd64:	e7f1      	b.n	802dd4a <__ssvfiscanf_r+0xe12>
 802dd66:	bf00      	nop
 802dd68:	08038610 	.word	0x08038610
 802dd6c:	08031f89 	.word	0x08031f89

0802dd70 <_svfprintf_r>:
 802dd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dd74:	b0d3      	sub	sp, #332	@ 0x14c
 802dd76:	468b      	mov	fp, r1
 802dd78:	4691      	mov	r9, r2
 802dd7a:	461e      	mov	r6, r3
 802dd7c:	9003      	str	r0, [sp, #12]
 802dd7e:	f7fd f80d 	bl	802ad9c <_localeconv_r>
 802dd82:	6803      	ldr	r3, [r0, #0]
 802dd84:	9316      	str	r3, [sp, #88]	@ 0x58
 802dd86:	4618      	mov	r0, r3
 802dd88:	f7e2 fa8a 	bl	80102a0 <strlen>
 802dd8c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802dd90:	900d      	str	r0, [sp, #52]	@ 0x34
 802dd92:	061b      	lsls	r3, r3, #24
 802dd94:	d515      	bpl.n	802ddc2 <_svfprintf_r+0x52>
 802dd96:	f8db 3010 	ldr.w	r3, [fp, #16]
 802dd9a:	b993      	cbnz	r3, 802ddc2 <_svfprintf_r+0x52>
 802dd9c:	9803      	ldr	r0, [sp, #12]
 802dd9e:	2140      	movs	r1, #64	@ 0x40
 802dda0:	f7fe f8c4 	bl	802bf2c <_malloc_r>
 802dda4:	f8cb 0000 	str.w	r0, [fp]
 802dda8:	f8cb 0010 	str.w	r0, [fp, #16]
 802ddac:	b930      	cbnz	r0, 802ddbc <_svfprintf_r+0x4c>
 802ddae:	9a03      	ldr	r2, [sp, #12]
 802ddb0:	230c      	movs	r3, #12
 802ddb2:	6013      	str	r3, [r2, #0]
 802ddb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802ddb8:	930f      	str	r3, [sp, #60]	@ 0x3c
 802ddba:	e1f7      	b.n	802e1ac <_svfprintf_r+0x43c>
 802ddbc:	2340      	movs	r3, #64	@ 0x40
 802ddbe:	f8cb 3014 	str.w	r3, [fp, #20]
 802ddc2:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 802e010 <_svfprintf_r+0x2a0>
 802ddc6:	2300      	movs	r3, #0
 802ddc8:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 802ddcc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802ddd0:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 802ddd4:	ac29      	add	r4, sp, #164	@ 0xa4
 802ddd6:	9426      	str	r4, [sp, #152]	@ 0x98
 802ddd8:	9304      	str	r3, [sp, #16]
 802ddda:	9309      	str	r3, [sp, #36]	@ 0x24
 802dddc:	9312      	str	r3, [sp, #72]	@ 0x48
 802ddde:	9317      	str	r3, [sp, #92]	@ 0x5c
 802dde0:	930f      	str	r3, [sp, #60]	@ 0x3c
 802dde2:	464b      	mov	r3, r9
 802dde4:	461d      	mov	r5, r3
 802dde6:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ddea:	b10a      	cbz	r2, 802ddf0 <_svfprintf_r+0x80>
 802ddec:	2a25      	cmp	r2, #37	@ 0x25
 802ddee:	d1f9      	bne.n	802dde4 <_svfprintf_r+0x74>
 802ddf0:	ebb5 0709 	subs.w	r7, r5, r9
 802ddf4:	d00d      	beq.n	802de12 <_svfprintf_r+0xa2>
 802ddf6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ddf8:	443b      	add	r3, r7
 802ddfa:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ddfc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ddfe:	3301      	adds	r3, #1
 802de00:	2b07      	cmp	r3, #7
 802de02:	e9c4 9700 	strd	r9, r7, [r4]
 802de06:	9327      	str	r3, [sp, #156]	@ 0x9c
 802de08:	dc75      	bgt.n	802def6 <_svfprintf_r+0x186>
 802de0a:	3408      	adds	r4, #8
 802de0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802de0e:	443b      	add	r3, r7
 802de10:	930f      	str	r3, [sp, #60]	@ 0x3c
 802de12:	782b      	ldrb	r3, [r5, #0]
 802de14:	2b00      	cmp	r3, #0
 802de16:	f001 8148 	beq.w	802f0aa <_svfprintf_r+0x133a>
 802de1a:	2200      	movs	r2, #0
 802de1c:	1c6b      	adds	r3, r5, #1
 802de1e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802de22:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 802de26:	920e      	str	r2, [sp, #56]	@ 0x38
 802de28:	4615      	mov	r5, r2
 802de2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802de2e:	9206      	str	r2, [sp, #24]
 802de30:	930c      	str	r3, [sp, #48]	@ 0x30
 802de32:	9b06      	ldr	r3, [sp, #24]
 802de34:	3b20      	subs	r3, #32
 802de36:	2b5a      	cmp	r3, #90	@ 0x5a
 802de38:	f200 85a4 	bhi.w	802e984 <_svfprintf_r+0xc14>
 802de3c:	e8df f013 	tbh	[pc, r3, lsl #1]
 802de40:	05a2009d 	.word	0x05a2009d
 802de44:	00a505a2 	.word	0x00a505a2
 802de48:	05a205a2 	.word	0x05a205a2
 802de4c:	008505a2 	.word	0x008505a2
 802de50:	05a205a2 	.word	0x05a205a2
 802de54:	00b200a8 	.word	0x00b200a8
 802de58:	00af05a2 	.word	0x00af05a2
 802de5c:	05a200b4 	.word	0x05a200b4
 802de60:	00d100ce 	.word	0x00d100ce
 802de64:	00d100d1 	.word	0x00d100d1
 802de68:	00d100d1 	.word	0x00d100d1
 802de6c:	00d100d1 	.word	0x00d100d1
 802de70:	00d100d1 	.word	0x00d100d1
 802de74:	05a205a2 	.word	0x05a205a2
 802de78:	05a205a2 	.word	0x05a205a2
 802de7c:	05a205a2 	.word	0x05a205a2
 802de80:	014705a2 	.word	0x014705a2
 802de84:	010805a2 	.word	0x010805a2
 802de88:	0147011b 	.word	0x0147011b
 802de8c:	01470147 	.word	0x01470147
 802de90:	05a205a2 	.word	0x05a205a2
 802de94:	05a205a2 	.word	0x05a205a2
 802de98:	05a200e2 	.word	0x05a200e2
 802de9c:	049d05a2 	.word	0x049d05a2
 802dea0:	05a205a2 	.word	0x05a205a2
 802dea4:	04e705a2 	.word	0x04e705a2
 802dea8:	050805a2 	.word	0x050805a2
 802deac:	05a205a2 	.word	0x05a205a2
 802deb0:	05a2052a 	.word	0x05a2052a
 802deb4:	05a205a2 	.word	0x05a205a2
 802deb8:	05a205a2 	.word	0x05a205a2
 802debc:	05a205a2 	.word	0x05a205a2
 802dec0:	014705a2 	.word	0x014705a2
 802dec4:	010805a2 	.word	0x010805a2
 802dec8:	0147011d 	.word	0x0147011d
 802decc:	01470147 	.word	0x01470147
 802ded0:	011d00ee 	.word	0x011d00ee
 802ded4:	05a20102 	.word	0x05a20102
 802ded8:	05a200fb 	.word	0x05a200fb
 802dedc:	049f047e 	.word	0x049f047e
 802dee0:	010204d6 	.word	0x010204d6
 802dee4:	04e705a2 	.word	0x04e705a2
 802dee8:	050a009b 	.word	0x050a009b
 802deec:	05a205a2 	.word	0x05a205a2
 802def0:	05a20065 	.word	0x05a20065
 802def4:	009b      	.short	0x009b
 802def6:	9803      	ldr	r0, [sp, #12]
 802def8:	aa26      	add	r2, sp, #152	@ 0x98
 802defa:	4659      	mov	r1, fp
 802defc:	f7fe fac0 	bl	802c480 <__ssprint_r>
 802df00:	2800      	cmp	r0, #0
 802df02:	f040 814e 	bne.w	802e1a2 <_svfprintf_r+0x432>
 802df06:	ac29      	add	r4, sp, #164	@ 0xa4
 802df08:	e780      	b.n	802de0c <_svfprintf_r+0x9c>
 802df0a:	4b43      	ldr	r3, [pc, #268]	@ (802e018 <_svfprintf_r+0x2a8>)
 802df0c:	9319      	str	r3, [sp, #100]	@ 0x64
 802df0e:	f015 0320 	ands.w	r3, r5, #32
 802df12:	f000 84c2 	beq.w	802e89a <_svfprintf_r+0xb2a>
 802df16:	3607      	adds	r6, #7
 802df18:	f026 0307 	bic.w	r3, r6, #7
 802df1c:	461a      	mov	r2, r3
 802df1e:	685f      	ldr	r7, [r3, #4]
 802df20:	f852 6b08 	ldr.w	r6, [r2], #8
 802df24:	9207      	str	r2, [sp, #28]
 802df26:	07eb      	lsls	r3, r5, #31
 802df28:	d50a      	bpl.n	802df40 <_svfprintf_r+0x1d0>
 802df2a:	ea56 0307 	orrs.w	r3, r6, r7
 802df2e:	d007      	beq.n	802df40 <_svfprintf_r+0x1d0>
 802df30:	2330      	movs	r3, #48	@ 0x30
 802df32:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 802df36:	9b06      	ldr	r3, [sp, #24]
 802df38:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802df3c:	f045 0502 	orr.w	r5, r5, #2
 802df40:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802df44:	2302      	movs	r3, #2
 802df46:	f000 bc28 	b.w	802e79a <_svfprintf_r+0xa2a>
 802df4a:	9803      	ldr	r0, [sp, #12]
 802df4c:	f7fc ff26 	bl	802ad9c <_localeconv_r>
 802df50:	6843      	ldr	r3, [r0, #4]
 802df52:	9317      	str	r3, [sp, #92]	@ 0x5c
 802df54:	4618      	mov	r0, r3
 802df56:	f7e2 f9a3 	bl	80102a0 <strlen>
 802df5a:	9012      	str	r0, [sp, #72]	@ 0x48
 802df5c:	9803      	ldr	r0, [sp, #12]
 802df5e:	f7fc ff1d 	bl	802ad9c <_localeconv_r>
 802df62:	6883      	ldr	r3, [r0, #8]
 802df64:	9309      	str	r3, [sp, #36]	@ 0x24
 802df66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802df68:	b12b      	cbz	r3, 802df76 <_svfprintf_r+0x206>
 802df6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802df6c:	b11b      	cbz	r3, 802df76 <_svfprintf_r+0x206>
 802df6e:	781b      	ldrb	r3, [r3, #0]
 802df70:	b10b      	cbz	r3, 802df76 <_svfprintf_r+0x206>
 802df72:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 802df76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802df78:	e757      	b.n	802de2a <_svfprintf_r+0xba>
 802df7a:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802df7e:	2b00      	cmp	r3, #0
 802df80:	d1f9      	bne.n	802df76 <_svfprintf_r+0x206>
 802df82:	2320      	movs	r3, #32
 802df84:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802df88:	e7f5      	b.n	802df76 <_svfprintf_r+0x206>
 802df8a:	f045 0501 	orr.w	r5, r5, #1
 802df8e:	e7f2      	b.n	802df76 <_svfprintf_r+0x206>
 802df90:	f856 3b04 	ldr.w	r3, [r6], #4
 802df94:	930e      	str	r3, [sp, #56]	@ 0x38
 802df96:	2b00      	cmp	r3, #0
 802df98:	daed      	bge.n	802df76 <_svfprintf_r+0x206>
 802df9a:	425b      	negs	r3, r3
 802df9c:	930e      	str	r3, [sp, #56]	@ 0x38
 802df9e:	f045 0504 	orr.w	r5, r5, #4
 802dfa2:	e7e8      	b.n	802df76 <_svfprintf_r+0x206>
 802dfa4:	232b      	movs	r3, #43	@ 0x2b
 802dfa6:	e7ed      	b.n	802df84 <_svfprintf_r+0x214>
 802dfa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802dfaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 802dfae:	9206      	str	r2, [sp, #24]
 802dfb0:	2a2a      	cmp	r2, #42	@ 0x2a
 802dfb2:	d10f      	bne.n	802dfd4 <_svfprintf_r+0x264>
 802dfb4:	f856 2b04 	ldr.w	r2, [r6], #4
 802dfb8:	930c      	str	r3, [sp, #48]	@ 0x30
 802dfba:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 802dfbe:	e7da      	b.n	802df76 <_svfprintf_r+0x206>
 802dfc0:	fb01 2808 	mla	r8, r1, r8, r2
 802dfc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 802dfc8:	9206      	str	r2, [sp, #24]
 802dfca:	9a06      	ldr	r2, [sp, #24]
 802dfcc:	3a30      	subs	r2, #48	@ 0x30
 802dfce:	2a09      	cmp	r2, #9
 802dfd0:	d9f6      	bls.n	802dfc0 <_svfprintf_r+0x250>
 802dfd2:	e72d      	b.n	802de30 <_svfprintf_r+0xc0>
 802dfd4:	f04f 0800 	mov.w	r8, #0
 802dfd8:	210a      	movs	r1, #10
 802dfda:	e7f6      	b.n	802dfca <_svfprintf_r+0x25a>
 802dfdc:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 802dfe0:	e7c9      	b.n	802df76 <_svfprintf_r+0x206>
 802dfe2:	2200      	movs	r2, #0
 802dfe4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802dfe6:	920e      	str	r2, [sp, #56]	@ 0x38
 802dfe8:	210a      	movs	r1, #10
 802dfea:	9a06      	ldr	r2, [sp, #24]
 802dfec:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802dfee:	3a30      	subs	r2, #48	@ 0x30
 802dff0:	fb01 2200 	mla	r2, r1, r0, r2
 802dff4:	920e      	str	r2, [sp, #56]	@ 0x38
 802dff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 802dffa:	9206      	str	r2, [sp, #24]
 802dffc:	3a30      	subs	r2, #48	@ 0x30
 802dffe:	2a09      	cmp	r2, #9
 802e000:	d9f3      	bls.n	802dfea <_svfprintf_r+0x27a>
 802e002:	e715      	b.n	802de30 <_svfprintf_r+0xc0>
 802e004:	f045 0508 	orr.w	r5, r5, #8
 802e008:	e7b5      	b.n	802df76 <_svfprintf_r+0x206>
 802e00a:	bf00      	nop
 802e00c:	f3af 8000 	nop.w
	...
 802e018:	080380cb 	.word	0x080380cb
 802e01c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802e01e:	781b      	ldrb	r3, [r3, #0]
 802e020:	2b68      	cmp	r3, #104	@ 0x68
 802e022:	bf01      	itttt	eq
 802e024:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 802e026:	3301      	addeq	r3, #1
 802e028:	930c      	streq	r3, [sp, #48]	@ 0x30
 802e02a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 802e02e:	bf18      	it	ne
 802e030:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 802e034:	e79f      	b.n	802df76 <_svfprintf_r+0x206>
 802e036:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802e038:	781b      	ldrb	r3, [r3, #0]
 802e03a:	2b6c      	cmp	r3, #108	@ 0x6c
 802e03c:	d105      	bne.n	802e04a <_svfprintf_r+0x2da>
 802e03e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802e040:	3301      	adds	r3, #1
 802e042:	930c      	str	r3, [sp, #48]	@ 0x30
 802e044:	f045 0520 	orr.w	r5, r5, #32
 802e048:	e795      	b.n	802df76 <_svfprintf_r+0x206>
 802e04a:	f045 0510 	orr.w	r5, r5, #16
 802e04e:	e792      	b.n	802df76 <_svfprintf_r+0x206>
 802e050:	4632      	mov	r2, r6
 802e052:	f852 3b04 	ldr.w	r3, [r2], #4
 802e056:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802e05a:	2300      	movs	r3, #0
 802e05c:	9207      	str	r2, [sp, #28]
 802e05e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802e062:	469a      	mov	sl, r3
 802e064:	f04f 0801 	mov.w	r8, #1
 802e068:	9310      	str	r3, [sp, #64]	@ 0x40
 802e06a:	461f      	mov	r7, r3
 802e06c:	9308      	str	r3, [sp, #32]
 802e06e:	461e      	mov	r6, r3
 802e070:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 802e074:	e1d2      	b.n	802e41c <_svfprintf_r+0x6ac>
 802e076:	f045 0510 	orr.w	r5, r5, #16
 802e07a:	06af      	lsls	r7, r5, #26
 802e07c:	d512      	bpl.n	802e0a4 <_svfprintf_r+0x334>
 802e07e:	3607      	adds	r6, #7
 802e080:	f026 0307 	bic.w	r3, r6, #7
 802e084:	461a      	mov	r2, r3
 802e086:	685f      	ldr	r7, [r3, #4]
 802e088:	f852 6b08 	ldr.w	r6, [r2], #8
 802e08c:	9207      	str	r2, [sp, #28]
 802e08e:	2f00      	cmp	r7, #0
 802e090:	da06      	bge.n	802e0a0 <_svfprintf_r+0x330>
 802e092:	4276      	negs	r6, r6
 802e094:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802e098:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 802e09c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802e0a0:	2301      	movs	r3, #1
 802e0a2:	e37d      	b.n	802e7a0 <_svfprintf_r+0xa30>
 802e0a4:	4633      	mov	r3, r6
 802e0a6:	06ee      	lsls	r6, r5, #27
 802e0a8:	f853 7b04 	ldr.w	r7, [r3], #4
 802e0ac:	9307      	str	r3, [sp, #28]
 802e0ae:	d502      	bpl.n	802e0b6 <_svfprintf_r+0x346>
 802e0b0:	463e      	mov	r6, r7
 802e0b2:	17ff      	asrs	r7, r7, #31
 802e0b4:	e7eb      	b.n	802e08e <_svfprintf_r+0x31e>
 802e0b6:	0668      	lsls	r0, r5, #25
 802e0b8:	d503      	bpl.n	802e0c2 <_svfprintf_r+0x352>
 802e0ba:	b23e      	sxth	r6, r7
 802e0bc:	f347 37c0 	sbfx	r7, r7, #15, #1
 802e0c0:	e7e5      	b.n	802e08e <_svfprintf_r+0x31e>
 802e0c2:	05a9      	lsls	r1, r5, #22
 802e0c4:	d5f4      	bpl.n	802e0b0 <_svfprintf_r+0x340>
 802e0c6:	b27e      	sxtb	r6, r7
 802e0c8:	f347 17c0 	sbfx	r7, r7, #7, #1
 802e0cc:	e7df      	b.n	802e08e <_svfprintf_r+0x31e>
 802e0ce:	3607      	adds	r6, #7
 802e0d0:	f026 0307 	bic.w	r3, r6, #7
 802e0d4:	ecb3 7b02 	vldmia	r3!, {d7}
 802e0d8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802e0dc:	9307      	str	r3, [sp, #28]
 802e0de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e0e0:	931a      	str	r3, [sp, #104]	@ 0x68
 802e0e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e0e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802e0e8:	931b      	str	r3, [sp, #108]	@ 0x6c
 802e0ea:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802e0ee:	4b81      	ldr	r3, [pc, #516]	@ (802e2f4 <_svfprintf_r+0x584>)
 802e0f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802e0f4:	f7e2 fd32 	bl	8010b5c <__aeabi_dcmpun>
 802e0f8:	bb10      	cbnz	r0, 802e140 <_svfprintf_r+0x3d0>
 802e0fa:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802e0fe:	4b7d      	ldr	r3, [pc, #500]	@ (802e2f4 <_svfprintf_r+0x584>)
 802e100:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802e104:	f7e2 fd0c 	bl	8010b20 <__aeabi_dcmple>
 802e108:	b9d0      	cbnz	r0, 802e140 <_svfprintf_r+0x3d0>
 802e10a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802e10e:	2200      	movs	r2, #0
 802e110:	2300      	movs	r3, #0
 802e112:	f7e2 fcfb 	bl	8010b0c <__aeabi_dcmplt>
 802e116:	b110      	cbz	r0, 802e11e <_svfprintf_r+0x3ae>
 802e118:	232d      	movs	r3, #45	@ 0x2d
 802e11a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802e11e:	4a76      	ldr	r2, [pc, #472]	@ (802e2f8 <_svfprintf_r+0x588>)
 802e120:	4b76      	ldr	r3, [pc, #472]	@ (802e2fc <_svfprintf_r+0x58c>)
 802e122:	9906      	ldr	r1, [sp, #24]
 802e124:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 802e128:	2947      	cmp	r1, #71	@ 0x47
 802e12a:	bfd4      	ite	le
 802e12c:	4691      	movle	r9, r2
 802e12e:	4699      	movgt	r9, r3
 802e130:	f04f 0a00 	mov.w	sl, #0
 802e134:	f04f 0803 	mov.w	r8, #3
 802e138:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802e13c:	f000 bfec 	b.w	802f118 <_svfprintf_r+0x13a8>
 802e140:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 802e144:	4610      	mov	r0, r2
 802e146:	4619      	mov	r1, r3
 802e148:	f7e2 fd08 	bl	8010b5c <__aeabi_dcmpun>
 802e14c:	4682      	mov	sl, r0
 802e14e:	b140      	cbz	r0, 802e162 <_svfprintf_r+0x3f2>
 802e150:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e152:	4a6b      	ldr	r2, [pc, #428]	@ (802e300 <_svfprintf_r+0x590>)
 802e154:	2b00      	cmp	r3, #0
 802e156:	bfbc      	itt	lt
 802e158:	232d      	movlt	r3, #45	@ 0x2d
 802e15a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 802e15e:	4b69      	ldr	r3, [pc, #420]	@ (802e304 <_svfprintf_r+0x594>)
 802e160:	e7df      	b.n	802e122 <_svfprintf_r+0x3b2>
 802e162:	9b06      	ldr	r3, [sp, #24]
 802e164:	2b61      	cmp	r3, #97	@ 0x61
 802e166:	d025      	beq.n	802e1b4 <_svfprintf_r+0x444>
 802e168:	2b41      	cmp	r3, #65	@ 0x41
 802e16a:	d125      	bne.n	802e1b8 <_svfprintf_r+0x448>
 802e16c:	2358      	movs	r3, #88	@ 0x58
 802e16e:	2230      	movs	r2, #48	@ 0x30
 802e170:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 802e174:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 802e178:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802e17c:	f045 0502 	orr.w	r5, r5, #2
 802e180:	f340 80a5 	ble.w	802e2ce <_svfprintf_r+0x55e>
 802e184:	9803      	ldr	r0, [sp, #12]
 802e186:	f108 0101 	add.w	r1, r8, #1
 802e18a:	f7fd fecf 	bl	802bf2c <_malloc_r>
 802e18e:	4681      	mov	r9, r0
 802e190:	2800      	cmp	r0, #0
 802e192:	f040 80a1 	bne.w	802e2d8 <_svfprintf_r+0x568>
 802e196:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802e19a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802e19e:	f8ab 300c 	strh.w	r3, [fp, #12]
 802e1a2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802e1a6:	065b      	lsls	r3, r3, #25
 802e1a8:	f53f ae04 	bmi.w	802ddb4 <_svfprintf_r+0x44>
 802e1ac:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802e1ae:	b053      	add	sp, #332	@ 0x14c
 802e1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e1b4:	2378      	movs	r3, #120	@ 0x78
 802e1b6:	e7da      	b.n	802e16e <_svfprintf_r+0x3fe>
 802e1b8:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 802e1bc:	f000 808e 	beq.w	802e2dc <_svfprintf_r+0x56c>
 802e1c0:	9b06      	ldr	r3, [sp, #24]
 802e1c2:	f023 0320 	bic.w	r3, r3, #32
 802e1c6:	2b47      	cmp	r3, #71	@ 0x47
 802e1c8:	d105      	bne.n	802e1d6 <_svfprintf_r+0x466>
 802e1ca:	f1b8 0f00 	cmp.w	r8, #0
 802e1ce:	d102      	bne.n	802e1d6 <_svfprintf_r+0x466>
 802e1d0:	46c2      	mov	sl, r8
 802e1d2:	f04f 0801 	mov.w	r8, #1
 802e1d6:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802e1da:	9311      	str	r3, [sp, #68]	@ 0x44
 802e1dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e1de:	2b00      	cmp	r3, #0
 802e1e0:	da7f      	bge.n	802e2e2 <_svfprintf_r+0x572>
 802e1e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e1e4:	9314      	str	r3, [sp, #80]	@ 0x50
 802e1e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e1e8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802e1ec:	9315      	str	r3, [sp, #84]	@ 0x54
 802e1ee:	232d      	movs	r3, #45	@ 0x2d
 802e1f0:	931c      	str	r3, [sp, #112]	@ 0x70
 802e1f2:	9b06      	ldr	r3, [sp, #24]
 802e1f4:	f023 0320 	bic.w	r3, r3, #32
 802e1f8:	2b41      	cmp	r3, #65	@ 0x41
 802e1fa:	9308      	str	r3, [sp, #32]
 802e1fc:	f040 81e6 	bne.w	802e5cc <_svfprintf_r+0x85c>
 802e200:	a820      	add	r0, sp, #128	@ 0x80
 802e202:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802e206:	f7fc fe9b 	bl	802af40 <frexp>
 802e20a:	2200      	movs	r2, #0
 802e20c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 802e210:	ec51 0b10 	vmov	r0, r1, d0
 802e214:	f7e2 fa08 	bl	8010628 <__aeabi_dmul>
 802e218:	4602      	mov	r2, r0
 802e21a:	460b      	mov	r3, r1
 802e21c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802e220:	2200      	movs	r2, #0
 802e222:	2300      	movs	r3, #0
 802e224:	f7e2 fc68 	bl	8010af8 <__aeabi_dcmpeq>
 802e228:	b108      	cbz	r0, 802e22e <_svfprintf_r+0x4be>
 802e22a:	2301      	movs	r3, #1
 802e22c:	9320      	str	r3, [sp, #128]	@ 0x80
 802e22e:	4a36      	ldr	r2, [pc, #216]	@ (802e308 <_svfprintf_r+0x598>)
 802e230:	4b36      	ldr	r3, [pc, #216]	@ (802e30c <_svfprintf_r+0x59c>)
 802e232:	9906      	ldr	r1, [sp, #24]
 802e234:	2961      	cmp	r1, #97	@ 0x61
 802e236:	bf18      	it	ne
 802e238:	461a      	movne	r2, r3
 802e23a:	9210      	str	r2, [sp, #64]	@ 0x40
 802e23c:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 802e240:	464e      	mov	r6, r9
 802e242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802e246:	4b32      	ldr	r3, [pc, #200]	@ (802e310 <_svfprintf_r+0x5a0>)
 802e248:	2200      	movs	r2, #0
 802e24a:	f7e2 f9ed 	bl	8010628 <__aeabi_dmul>
 802e24e:	4602      	mov	r2, r0
 802e250:	460b      	mov	r3, r1
 802e252:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802e256:	f7e2 fc97 	bl	8010b88 <__aeabi_d2iz>
 802e25a:	9013      	str	r0, [sp, #76]	@ 0x4c
 802e25c:	f7e2 f97a 	bl	8010554 <__aeabi_i2d>
 802e260:	4602      	mov	r2, r0
 802e262:	460b      	mov	r3, r1
 802e264:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802e268:	f7e2 f826 	bl	80102b8 <__aeabi_dsub>
 802e26c:	4602      	mov	r2, r0
 802e26e:	460b      	mov	r3, r1
 802e270:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802e274:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802e276:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802e278:	5c9b      	ldrb	r3, [r3, r2]
 802e27a:	f806 3b01 	strb.w	r3, [r6], #1
 802e27e:	1c7a      	adds	r2, r7, #1
 802e280:	d006      	beq.n	802e290 <_svfprintf_r+0x520>
 802e282:	1e7b      	subs	r3, r7, #1
 802e284:	931d      	str	r3, [sp, #116]	@ 0x74
 802e286:	2200      	movs	r2, #0
 802e288:	2300      	movs	r3, #0
 802e28a:	f7e2 fc35 	bl	8010af8 <__aeabi_dcmpeq>
 802e28e:	b370      	cbz	r0, 802e2ee <_svfprintf_r+0x57e>
 802e290:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802e294:	4b1f      	ldr	r3, [pc, #124]	@ (802e314 <_svfprintf_r+0x5a4>)
 802e296:	2200      	movs	r2, #0
 802e298:	f7e2 fc56 	bl	8010b48 <__aeabi_dcmpgt>
 802e29c:	2800      	cmp	r0, #0
 802e29e:	d13b      	bne.n	802e318 <_svfprintf_r+0x5a8>
 802e2a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802e2a4:	4b1b      	ldr	r3, [pc, #108]	@ (802e314 <_svfprintf_r+0x5a4>)
 802e2a6:	2200      	movs	r2, #0
 802e2a8:	f7e2 fc26 	bl	8010af8 <__aeabi_dcmpeq>
 802e2ac:	b110      	cbz	r0, 802e2b4 <_svfprintf_r+0x544>
 802e2ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802e2b0:	07db      	lsls	r3, r3, #31
 802e2b2:	d431      	bmi.n	802e318 <_svfprintf_r+0x5a8>
 802e2b4:	4633      	mov	r3, r6
 802e2b6:	19f1      	adds	r1, r6, r7
 802e2b8:	2030      	movs	r0, #48	@ 0x30
 802e2ba:	1aca      	subs	r2, r1, r3
 802e2bc:	2a00      	cmp	r2, #0
 802e2be:	f280 8182 	bge.w	802e5c6 <_svfprintf_r+0x856>
 802e2c2:	1c7b      	adds	r3, r7, #1
 802e2c4:	3701      	adds	r7, #1
 802e2c6:	bfb8      	it	lt
 802e2c8:	2300      	movlt	r3, #0
 802e2ca:	441e      	add	r6, r3
 802e2cc:	e038      	b.n	802e340 <_svfprintf_r+0x5d0>
 802e2ce:	f04f 0a00 	mov.w	sl, #0
 802e2d2:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 802e2d6:	e77e      	b.n	802e1d6 <_svfprintf_r+0x466>
 802e2d8:	4682      	mov	sl, r0
 802e2da:	e77c      	b.n	802e1d6 <_svfprintf_r+0x466>
 802e2dc:	f04f 0806 	mov.w	r8, #6
 802e2e0:	e779      	b.n	802e1d6 <_svfprintf_r+0x466>
 802e2e2:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 802e2e6:	2300      	movs	r3, #0
 802e2e8:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 802e2ec:	e780      	b.n	802e1f0 <_svfprintf_r+0x480>
 802e2ee:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 802e2f0:	e7a7      	b.n	802e242 <_svfprintf_r+0x4d2>
 802e2f2:	bf00      	nop
 802e2f4:	7fefffff 	.word	0x7fefffff
 802e2f8:	080380bb 	.word	0x080380bb
 802e2fc:	080380bf 	.word	0x080380bf
 802e300:	080380c3 	.word	0x080380c3
 802e304:	080380c7 	.word	0x080380c7
 802e308:	080380cb 	.word	0x080380cb
 802e30c:	080380dc 	.word	0x080380dc
 802e310:	40300000 	.word	0x40300000
 802e314:	3fe00000 	.word	0x3fe00000
 802e318:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802e31a:	9624      	str	r6, [sp, #144]	@ 0x90
 802e31c:	7bd9      	ldrb	r1, [r3, #15]
 802e31e:	2030      	movs	r0, #48	@ 0x30
 802e320:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802e322:	1e53      	subs	r3, r2, #1
 802e324:	9324      	str	r3, [sp, #144]	@ 0x90
 802e326:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 802e32a:	428b      	cmp	r3, r1
 802e32c:	f000 8148 	beq.w	802e5c0 <_svfprintf_r+0x850>
 802e330:	2b39      	cmp	r3, #57	@ 0x39
 802e332:	bf0b      	itete	eq
 802e334:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 802e336:	3301      	addne	r3, #1
 802e338:	7a9b      	ldrbeq	r3, [r3, #10]
 802e33a:	b2db      	uxtbne	r3, r3
 802e33c:	f802 3c01 	strb.w	r3, [r2, #-1]
 802e340:	eba6 0309 	sub.w	r3, r6, r9
 802e344:	9304      	str	r3, [sp, #16]
 802e346:	9b08      	ldr	r3, [sp, #32]
 802e348:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802e34a:	2b47      	cmp	r3, #71	@ 0x47
 802e34c:	f040 8187 	bne.w	802e65e <_svfprintf_r+0x8ee>
 802e350:	1cf1      	adds	r1, r6, #3
 802e352:	db02      	blt.n	802e35a <_svfprintf_r+0x5ea>
 802e354:	4546      	cmp	r6, r8
 802e356:	f340 81a5 	ble.w	802e6a4 <_svfprintf_r+0x934>
 802e35a:	9b06      	ldr	r3, [sp, #24]
 802e35c:	3b02      	subs	r3, #2
 802e35e:	9306      	str	r3, [sp, #24]
 802e360:	9906      	ldr	r1, [sp, #24]
 802e362:	f89d 2018 	ldrb.w	r2, [sp, #24]
 802e366:	f021 0120 	bic.w	r1, r1, #32
 802e36a:	2941      	cmp	r1, #65	@ 0x41
 802e36c:	bf08      	it	eq
 802e36e:	320f      	addeq	r2, #15
 802e370:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 802e374:	bf06      	itte	eq
 802e376:	b2d2      	uxtbeq	r2, r2
 802e378:	2101      	moveq	r1, #1
 802e37a:	2100      	movne	r1, #0
 802e37c:	2b00      	cmp	r3, #0
 802e37e:	9320      	str	r3, [sp, #128]	@ 0x80
 802e380:	bfb8      	it	lt
 802e382:	f1c6 0301 	rsblt	r3, r6, #1
 802e386:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 802e38a:	bfb4      	ite	lt
 802e38c:	222d      	movlt	r2, #45	@ 0x2d
 802e38e:	222b      	movge	r2, #43	@ 0x2b
 802e390:	2b09      	cmp	r3, #9
 802e392:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 802e396:	f340 8178 	ble.w	802e68a <_svfprintf_r+0x91a>
 802e39a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802e39e:	270a      	movs	r7, #10
 802e3a0:	4602      	mov	r2, r0
 802e3a2:	fbb3 f6f7 	udiv	r6, r3, r7
 802e3a6:	fb07 3116 	mls	r1, r7, r6, r3
 802e3aa:	3130      	adds	r1, #48	@ 0x30
 802e3ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 802e3b0:	4619      	mov	r1, r3
 802e3b2:	2963      	cmp	r1, #99	@ 0x63
 802e3b4:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 802e3b8:	4633      	mov	r3, r6
 802e3ba:	dcf1      	bgt.n	802e3a0 <_svfprintf_r+0x630>
 802e3bc:	3330      	adds	r3, #48	@ 0x30
 802e3be:	1e91      	subs	r1, r2, #2
 802e3c0:	f800 3c01 	strb.w	r3, [r0, #-1]
 802e3c4:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 802e3c8:	460b      	mov	r3, r1
 802e3ca:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802e3ce:	4283      	cmp	r3, r0
 802e3d0:	f0c0 8156 	bcc.w	802e680 <_svfprintf_r+0x910>
 802e3d4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 802e3d8:	1a9b      	subs	r3, r3, r2
 802e3da:	4281      	cmp	r1, r0
 802e3dc:	bf88      	it	hi
 802e3de:	2300      	movhi	r3, #0
 802e3e0:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802e3e4:	441a      	add	r2, r3
 802e3e6:	ab22      	add	r3, sp, #136	@ 0x88
 802e3e8:	1ad3      	subs	r3, r2, r3
 802e3ea:	9a04      	ldr	r2, [sp, #16]
 802e3ec:	9318      	str	r3, [sp, #96]	@ 0x60
 802e3ee:	2a01      	cmp	r2, #1
 802e3f0:	eb03 0802 	add.w	r8, r3, r2
 802e3f4:	dc01      	bgt.n	802e3fa <_svfprintf_r+0x68a>
 802e3f6:	07ea      	lsls	r2, r5, #31
 802e3f8:	d501      	bpl.n	802e3fe <_svfprintf_r+0x68e>
 802e3fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802e3fc:	4498      	add	r8, r3
 802e3fe:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802e402:	2700      	movs	r7, #0
 802e404:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802e408:	9311      	str	r3, [sp, #68]	@ 0x44
 802e40a:	9708      	str	r7, [sp, #32]
 802e40c:	463e      	mov	r6, r7
 802e40e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802e410:	2b00      	cmp	r3, #0
 802e412:	f040 818f 	bne.w	802e734 <_svfprintf_r+0x9c4>
 802e416:	2300      	movs	r3, #0
 802e418:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802e41a:	9310      	str	r3, [sp, #64]	@ 0x40
 802e41c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802e41e:	4543      	cmp	r3, r8
 802e420:	bfb8      	it	lt
 802e422:	4643      	movlt	r3, r8
 802e424:	9311      	str	r3, [sp, #68]	@ 0x44
 802e426:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802e42a:	b113      	cbz	r3, 802e432 <_svfprintf_r+0x6c2>
 802e42c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802e42e:	3301      	adds	r3, #1
 802e430:	9311      	str	r3, [sp, #68]	@ 0x44
 802e432:	f015 0302 	ands.w	r3, r5, #2
 802e436:	931c      	str	r3, [sp, #112]	@ 0x70
 802e438:	bf1e      	ittt	ne
 802e43a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 802e43c:	3302      	addne	r3, #2
 802e43e:	9311      	strne	r3, [sp, #68]	@ 0x44
 802e440:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 802e444:	931d      	str	r3, [sp, #116]	@ 0x74
 802e446:	d122      	bne.n	802e48e <_svfprintf_r+0x71e>
 802e448:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e44a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802e44c:	1a9b      	subs	r3, r3, r2
 802e44e:	2b00      	cmp	r3, #0
 802e450:	9313      	str	r3, [sp, #76]	@ 0x4c
 802e452:	dd1c      	ble.n	802e48e <_svfprintf_r+0x71e>
 802e454:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802e456:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802e45a:	2810      	cmp	r0, #16
 802e45c:	489e      	ldr	r0, [pc, #632]	@ (802e6d8 <_svfprintf_r+0x968>)
 802e45e:	6020      	str	r0, [r4, #0]
 802e460:	f102 0201 	add.w	r2, r2, #1
 802e464:	f104 0108 	add.w	r1, r4, #8
 802e468:	f300 8298 	bgt.w	802e99c <_svfprintf_r+0xc2c>
 802e46c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802e46e:	6060      	str	r0, [r4, #4]
 802e470:	4403      	add	r3, r0
 802e472:	2a07      	cmp	r2, #7
 802e474:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802e478:	f340 82a5 	ble.w	802e9c6 <_svfprintf_r+0xc56>
 802e47c:	9803      	ldr	r0, [sp, #12]
 802e47e:	aa26      	add	r2, sp, #152	@ 0x98
 802e480:	4659      	mov	r1, fp
 802e482:	f7fd fffd 	bl	802c480 <__ssprint_r>
 802e486:	2800      	cmp	r0, #0
 802e488:	f040 85ed 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802e48c:	ac29      	add	r4, sp, #164	@ 0xa4
 802e48e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 802e492:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802e494:	b16a      	cbz	r2, 802e4b2 <_svfprintf_r+0x742>
 802e496:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 802e49a:	6022      	str	r2, [r4, #0]
 802e49c:	2201      	movs	r2, #1
 802e49e:	4413      	add	r3, r2
 802e4a0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802e4a2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802e4a4:	6062      	str	r2, [r4, #4]
 802e4a6:	4413      	add	r3, r2
 802e4a8:	2b07      	cmp	r3, #7
 802e4aa:	9327      	str	r3, [sp, #156]	@ 0x9c
 802e4ac:	f300 828d 	bgt.w	802e9ca <_svfprintf_r+0xc5a>
 802e4b0:	3408      	adds	r4, #8
 802e4b2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802e4b4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802e4b6:	b162      	cbz	r2, 802e4d2 <_svfprintf_r+0x762>
 802e4b8:	aa1f      	add	r2, sp, #124	@ 0x7c
 802e4ba:	6022      	str	r2, [r4, #0]
 802e4bc:	2202      	movs	r2, #2
 802e4be:	4413      	add	r3, r2
 802e4c0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802e4c2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802e4c4:	6062      	str	r2, [r4, #4]
 802e4c6:	3301      	adds	r3, #1
 802e4c8:	2b07      	cmp	r3, #7
 802e4ca:	9327      	str	r3, [sp, #156]	@ 0x9c
 802e4cc:	f300 8287 	bgt.w	802e9de <_svfprintf_r+0xc6e>
 802e4d0:	3408      	adds	r4, #8
 802e4d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802e4d4:	2b80      	cmp	r3, #128	@ 0x80
 802e4d6:	d122      	bne.n	802e51e <_svfprintf_r+0x7ae>
 802e4d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e4da:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802e4dc:	1a9b      	subs	r3, r3, r2
 802e4de:	2b00      	cmp	r3, #0
 802e4e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802e4e2:	dd1c      	ble.n	802e51e <_svfprintf_r+0x7ae>
 802e4e4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802e4e6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802e4ea:	2810      	cmp	r0, #16
 802e4ec:	487b      	ldr	r0, [pc, #492]	@ (802e6dc <_svfprintf_r+0x96c>)
 802e4ee:	6020      	str	r0, [r4, #0]
 802e4f0:	f102 0201 	add.w	r2, r2, #1
 802e4f4:	f104 0108 	add.w	r1, r4, #8
 802e4f8:	f300 827b 	bgt.w	802e9f2 <_svfprintf_r+0xc82>
 802e4fc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802e4fe:	6060      	str	r0, [r4, #4]
 802e500:	4403      	add	r3, r0
 802e502:	2a07      	cmp	r2, #7
 802e504:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802e508:	f340 8288 	ble.w	802ea1c <_svfprintf_r+0xcac>
 802e50c:	9803      	ldr	r0, [sp, #12]
 802e50e:	aa26      	add	r2, sp, #152	@ 0x98
 802e510:	4659      	mov	r1, fp
 802e512:	f7fd ffb5 	bl	802c480 <__ssprint_r>
 802e516:	2800      	cmp	r0, #0
 802e518:	f040 85a5 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802e51c:	ac29      	add	r4, sp, #164	@ 0xa4
 802e51e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802e520:	eba3 0308 	sub.w	r3, r3, r8
 802e524:	2b00      	cmp	r3, #0
 802e526:	9310      	str	r3, [sp, #64]	@ 0x40
 802e528:	dd1c      	ble.n	802e564 <_svfprintf_r+0x7f4>
 802e52a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802e52c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802e530:	2810      	cmp	r0, #16
 802e532:	486a      	ldr	r0, [pc, #424]	@ (802e6dc <_svfprintf_r+0x96c>)
 802e534:	6020      	str	r0, [r4, #0]
 802e536:	f102 0201 	add.w	r2, r2, #1
 802e53a:	f104 0108 	add.w	r1, r4, #8
 802e53e:	f300 826f 	bgt.w	802ea20 <_svfprintf_r+0xcb0>
 802e542:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802e544:	6060      	str	r0, [r4, #4]
 802e546:	4403      	add	r3, r0
 802e548:	2a07      	cmp	r2, #7
 802e54a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802e54e:	f340 827c 	ble.w	802ea4a <_svfprintf_r+0xcda>
 802e552:	9803      	ldr	r0, [sp, #12]
 802e554:	aa26      	add	r2, sp, #152	@ 0x98
 802e556:	4659      	mov	r1, fp
 802e558:	f7fd ff92 	bl	802c480 <__ssprint_r>
 802e55c:	2800      	cmp	r0, #0
 802e55e:	f040 8582 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802e562:	ac29      	add	r4, sp, #164	@ 0xa4
 802e564:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802e566:	9310      	str	r3, [sp, #64]	@ 0x40
 802e568:	05ea      	lsls	r2, r5, #23
 802e56a:	f100 8275 	bmi.w	802ea58 <_svfprintf_r+0xce8>
 802e56e:	4443      	add	r3, r8
 802e570:	9328      	str	r3, [sp, #160]	@ 0xa0
 802e572:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802e574:	3301      	adds	r3, #1
 802e576:	2b07      	cmp	r3, #7
 802e578:	e9c4 9800 	strd	r9, r8, [r4]
 802e57c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802e57e:	f300 82b1 	bgt.w	802eae4 <_svfprintf_r+0xd74>
 802e582:	3408      	adds	r4, #8
 802e584:	076a      	lsls	r2, r5, #29
 802e586:	f100 8550 	bmi.w	802f02a <_svfprintf_r+0x12ba>
 802e58a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802e58e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802e590:	428a      	cmp	r2, r1
 802e592:	bfac      	ite	ge
 802e594:	189b      	addge	r3, r3, r2
 802e596:	185b      	addlt	r3, r3, r1
 802e598:	930f      	str	r3, [sp, #60]	@ 0x3c
 802e59a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802e59c:	b13b      	cbz	r3, 802e5ae <_svfprintf_r+0x83e>
 802e59e:	9803      	ldr	r0, [sp, #12]
 802e5a0:	aa26      	add	r2, sp, #152	@ 0x98
 802e5a2:	4659      	mov	r1, fp
 802e5a4:	f7fd ff6c 	bl	802c480 <__ssprint_r>
 802e5a8:	2800      	cmp	r0, #0
 802e5aa:	f040 855c 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802e5ae:	2300      	movs	r3, #0
 802e5b0:	9327      	str	r3, [sp, #156]	@ 0x9c
 802e5b2:	f1ba 0f00 	cmp.w	sl, #0
 802e5b6:	f040 8572 	bne.w	802f09e <_svfprintf_r+0x132e>
 802e5ba:	9e07      	ldr	r6, [sp, #28]
 802e5bc:	ac29      	add	r4, sp, #164	@ 0xa4
 802e5be:	e0c6      	b.n	802e74e <_svfprintf_r+0x9de>
 802e5c0:	f802 0c01 	strb.w	r0, [r2, #-1]
 802e5c4:	e6ac      	b.n	802e320 <_svfprintf_r+0x5b0>
 802e5c6:	f803 0b01 	strb.w	r0, [r3], #1
 802e5ca:	e676      	b.n	802e2ba <_svfprintf_r+0x54a>
 802e5cc:	9b08      	ldr	r3, [sp, #32]
 802e5ce:	2b46      	cmp	r3, #70	@ 0x46
 802e5d0:	d005      	beq.n	802e5de <_svfprintf_r+0x86e>
 802e5d2:	2b45      	cmp	r3, #69	@ 0x45
 802e5d4:	d11a      	bne.n	802e60c <_svfprintf_r+0x89c>
 802e5d6:	f108 0601 	add.w	r6, r8, #1
 802e5da:	2102      	movs	r1, #2
 802e5dc:	e001      	b.n	802e5e2 <_svfprintf_r+0x872>
 802e5de:	4646      	mov	r6, r8
 802e5e0:	2103      	movs	r1, #3
 802e5e2:	ab24      	add	r3, sp, #144	@ 0x90
 802e5e4:	9301      	str	r3, [sp, #4]
 802e5e6:	ab21      	add	r3, sp, #132	@ 0x84
 802e5e8:	9300      	str	r3, [sp, #0]
 802e5ea:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802e5ee:	ab20      	add	r3, sp, #128	@ 0x80
 802e5f0:	9803      	ldr	r0, [sp, #12]
 802e5f2:	4632      	mov	r2, r6
 802e5f4:	f7fc fd80 	bl	802b0f8 <_dtoa_r>
 802e5f8:	9b08      	ldr	r3, [sp, #32]
 802e5fa:	2b47      	cmp	r3, #71	@ 0x47
 802e5fc:	4681      	mov	r9, r0
 802e5fe:	d119      	bne.n	802e634 <_svfprintf_r+0x8c4>
 802e600:	07e8      	lsls	r0, r5, #31
 802e602:	d405      	bmi.n	802e610 <_svfprintf_r+0x8a0>
 802e604:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802e606:	eba3 0309 	sub.w	r3, r3, r9
 802e60a:	e69b      	b.n	802e344 <_svfprintf_r+0x5d4>
 802e60c:	4646      	mov	r6, r8
 802e60e:	e7e4      	b.n	802e5da <_svfprintf_r+0x86a>
 802e610:	eb09 0706 	add.w	r7, r9, r6
 802e614:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802e618:	2200      	movs	r2, #0
 802e61a:	2300      	movs	r3, #0
 802e61c:	f7e2 fa6c 	bl	8010af8 <__aeabi_dcmpeq>
 802e620:	b100      	cbz	r0, 802e624 <_svfprintf_r+0x8b4>
 802e622:	9724      	str	r7, [sp, #144]	@ 0x90
 802e624:	2230      	movs	r2, #48	@ 0x30
 802e626:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802e628:	429f      	cmp	r7, r3
 802e62a:	d9eb      	bls.n	802e604 <_svfprintf_r+0x894>
 802e62c:	1c59      	adds	r1, r3, #1
 802e62e:	9124      	str	r1, [sp, #144]	@ 0x90
 802e630:	701a      	strb	r2, [r3, #0]
 802e632:	e7f8      	b.n	802e626 <_svfprintf_r+0x8b6>
 802e634:	9b08      	ldr	r3, [sp, #32]
 802e636:	2b46      	cmp	r3, #70	@ 0x46
 802e638:	eb00 0706 	add.w	r7, r0, r6
 802e63c:	d1ea      	bne.n	802e614 <_svfprintf_r+0x8a4>
 802e63e:	7803      	ldrb	r3, [r0, #0]
 802e640:	2b30      	cmp	r3, #48	@ 0x30
 802e642:	d109      	bne.n	802e658 <_svfprintf_r+0x8e8>
 802e644:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802e648:	2200      	movs	r2, #0
 802e64a:	2300      	movs	r3, #0
 802e64c:	f7e2 fa54 	bl	8010af8 <__aeabi_dcmpeq>
 802e650:	b910      	cbnz	r0, 802e658 <_svfprintf_r+0x8e8>
 802e652:	f1c6 0601 	rsb	r6, r6, #1
 802e656:	9620      	str	r6, [sp, #128]	@ 0x80
 802e658:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802e65a:	441f      	add	r7, r3
 802e65c:	e7da      	b.n	802e614 <_svfprintf_r+0x8a4>
 802e65e:	9b08      	ldr	r3, [sp, #32]
 802e660:	2b46      	cmp	r3, #70	@ 0x46
 802e662:	f47f ae7d 	bne.w	802e360 <_svfprintf_r+0x5f0>
 802e666:	f005 0301 	and.w	r3, r5, #1
 802e66a:	2e00      	cmp	r6, #0
 802e66c:	ea43 0308 	orr.w	r3, r3, r8
 802e670:	dd25      	ble.n	802e6be <_svfprintf_r+0x94e>
 802e672:	b37b      	cbz	r3, 802e6d4 <_svfprintf_r+0x964>
 802e674:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802e676:	18f3      	adds	r3, r6, r3
 802e678:	4498      	add	r8, r3
 802e67a:	2366      	movs	r3, #102	@ 0x66
 802e67c:	9306      	str	r3, [sp, #24]
 802e67e:	e033      	b.n	802e6e8 <_svfprintf_r+0x978>
 802e680:	f813 7b01 	ldrb.w	r7, [r3], #1
 802e684:	f806 7f01 	strb.w	r7, [r6, #1]!
 802e688:	e6a1      	b.n	802e3ce <_svfprintf_r+0x65e>
 802e68a:	b941      	cbnz	r1, 802e69e <_svfprintf_r+0x92e>
 802e68c:	2230      	movs	r2, #48	@ 0x30
 802e68e:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 802e692:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 802e696:	3330      	adds	r3, #48	@ 0x30
 802e698:	f802 3b01 	strb.w	r3, [r2], #1
 802e69c:	e6a3      	b.n	802e3e6 <_svfprintf_r+0x676>
 802e69e:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802e6a2:	e7f8      	b.n	802e696 <_svfprintf_r+0x926>
 802e6a4:	9b04      	ldr	r3, [sp, #16]
 802e6a6:	429e      	cmp	r6, r3
 802e6a8:	da0d      	bge.n	802e6c6 <_svfprintf_r+0x956>
 802e6aa:	9b04      	ldr	r3, [sp, #16]
 802e6ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802e6ae:	2e00      	cmp	r6, #0
 802e6b0:	eb03 0802 	add.w	r8, r3, r2
 802e6b4:	dc0c      	bgt.n	802e6d0 <_svfprintf_r+0x960>
 802e6b6:	f1c6 0301 	rsb	r3, r6, #1
 802e6ba:	4498      	add	r8, r3
 802e6bc:	e008      	b.n	802e6d0 <_svfprintf_r+0x960>
 802e6be:	b17b      	cbz	r3, 802e6e0 <_svfprintf_r+0x970>
 802e6c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802e6c2:	3301      	adds	r3, #1
 802e6c4:	e7d8      	b.n	802e678 <_svfprintf_r+0x908>
 802e6c6:	07eb      	lsls	r3, r5, #31
 802e6c8:	d521      	bpl.n	802e70e <_svfprintf_r+0x99e>
 802e6ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802e6cc:	eb06 0803 	add.w	r8, r6, r3
 802e6d0:	2367      	movs	r3, #103	@ 0x67
 802e6d2:	e7d3      	b.n	802e67c <_svfprintf_r+0x90c>
 802e6d4:	46b0      	mov	r8, r6
 802e6d6:	e7d0      	b.n	802e67a <_svfprintf_r+0x90a>
 802e6d8:	08038642 	.word	0x08038642
 802e6dc:	08038632 	.word	0x08038632
 802e6e0:	2366      	movs	r3, #102	@ 0x66
 802e6e2:	9306      	str	r3, [sp, #24]
 802e6e4:	f04f 0801 	mov.w	r8, #1
 802e6e8:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 802e6ec:	9308      	str	r3, [sp, #32]
 802e6ee:	d01f      	beq.n	802e730 <_svfprintf_r+0x9c0>
 802e6f0:	2700      	movs	r7, #0
 802e6f2:	2e00      	cmp	r6, #0
 802e6f4:	9708      	str	r7, [sp, #32]
 802e6f6:	f77f ae8a 	ble.w	802e40e <_svfprintf_r+0x69e>
 802e6fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e6fc:	781b      	ldrb	r3, [r3, #0]
 802e6fe:	2bff      	cmp	r3, #255	@ 0xff
 802e700:	d107      	bne.n	802e712 <_svfprintf_r+0x9a2>
 802e702:	9b08      	ldr	r3, [sp, #32]
 802e704:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802e706:	443b      	add	r3, r7
 802e708:	fb02 8803 	mla	r8, r2, r3, r8
 802e70c:	e67f      	b.n	802e40e <_svfprintf_r+0x69e>
 802e70e:	46b0      	mov	r8, r6
 802e710:	e7de      	b.n	802e6d0 <_svfprintf_r+0x960>
 802e712:	42b3      	cmp	r3, r6
 802e714:	daf5      	bge.n	802e702 <_svfprintf_r+0x992>
 802e716:	1af6      	subs	r6, r6, r3
 802e718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e71a:	785b      	ldrb	r3, [r3, #1]
 802e71c:	b133      	cbz	r3, 802e72c <_svfprintf_r+0x9bc>
 802e71e:	9b08      	ldr	r3, [sp, #32]
 802e720:	3301      	adds	r3, #1
 802e722:	9308      	str	r3, [sp, #32]
 802e724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e726:	3301      	adds	r3, #1
 802e728:	9309      	str	r3, [sp, #36]	@ 0x24
 802e72a:	e7e6      	b.n	802e6fa <_svfprintf_r+0x98a>
 802e72c:	3701      	adds	r7, #1
 802e72e:	e7e4      	b.n	802e6fa <_svfprintf_r+0x98a>
 802e730:	9f08      	ldr	r7, [sp, #32]
 802e732:	e66c      	b.n	802e40e <_svfprintf_r+0x69e>
 802e734:	232d      	movs	r3, #45	@ 0x2d
 802e736:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802e73a:	e66c      	b.n	802e416 <_svfprintf_r+0x6a6>
 802e73c:	06af      	lsls	r7, r5, #26
 802e73e:	d50a      	bpl.n	802e756 <_svfprintf_r+0x9e6>
 802e740:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802e742:	6833      	ldr	r3, [r6, #0]
 802e744:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802e746:	17d2      	asrs	r2, r2, #31
 802e748:	e9c3 1200 	strd	r1, r2, [r3]
 802e74c:	3604      	adds	r6, #4
 802e74e:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 802e752:	f7ff bb46 	b.w	802dde2 <_svfprintf_r+0x72>
 802e756:	06e8      	lsls	r0, r5, #27
 802e758:	d503      	bpl.n	802e762 <_svfprintf_r+0x9f2>
 802e75a:	6833      	ldr	r3, [r6, #0]
 802e75c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802e75e:	601a      	str	r2, [r3, #0]
 802e760:	e7f4      	b.n	802e74c <_svfprintf_r+0x9dc>
 802e762:	0669      	lsls	r1, r5, #25
 802e764:	d503      	bpl.n	802e76e <_svfprintf_r+0x9fe>
 802e766:	6833      	ldr	r3, [r6, #0]
 802e768:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802e76a:	801a      	strh	r2, [r3, #0]
 802e76c:	e7ee      	b.n	802e74c <_svfprintf_r+0x9dc>
 802e76e:	05aa      	lsls	r2, r5, #22
 802e770:	d5f3      	bpl.n	802e75a <_svfprintf_r+0x9ea>
 802e772:	6833      	ldr	r3, [r6, #0]
 802e774:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802e776:	701a      	strb	r2, [r3, #0]
 802e778:	e7e8      	b.n	802e74c <_svfprintf_r+0x9dc>
 802e77a:	f045 0510 	orr.w	r5, r5, #16
 802e77e:	f015 0320 	ands.w	r3, r5, #32
 802e782:	d020      	beq.n	802e7c6 <_svfprintf_r+0xa56>
 802e784:	3607      	adds	r6, #7
 802e786:	f026 0307 	bic.w	r3, r6, #7
 802e78a:	461a      	mov	r2, r3
 802e78c:	685f      	ldr	r7, [r3, #4]
 802e78e:	f852 6b08 	ldr.w	r6, [r2], #8
 802e792:	9207      	str	r2, [sp, #28]
 802e794:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802e798:	2300      	movs	r3, #0
 802e79a:	2200      	movs	r2, #0
 802e79c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802e7a0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 802e7a4:	f000 848c 	beq.w	802f0c0 <_svfprintf_r+0x1350>
 802e7a8:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 802e7ac:	9208      	str	r2, [sp, #32]
 802e7ae:	ea56 0207 	orrs.w	r2, r6, r7
 802e7b2:	f040 848a 	bne.w	802f0ca <_svfprintf_r+0x135a>
 802e7b6:	f1b8 0f00 	cmp.w	r8, #0
 802e7ba:	f000 80db 	beq.w	802e974 <_svfprintf_r+0xc04>
 802e7be:	2b01      	cmp	r3, #1
 802e7c0:	f040 8486 	bne.w	802f0d0 <_svfprintf_r+0x1360>
 802e7c4:	e083      	b.n	802e8ce <_svfprintf_r+0xb5e>
 802e7c6:	4632      	mov	r2, r6
 802e7c8:	f015 0710 	ands.w	r7, r5, #16
 802e7cc:	f852 6b04 	ldr.w	r6, [r2], #4
 802e7d0:	9207      	str	r2, [sp, #28]
 802e7d2:	d001      	beq.n	802e7d8 <_svfprintf_r+0xa68>
 802e7d4:	461f      	mov	r7, r3
 802e7d6:	e7dd      	b.n	802e794 <_svfprintf_r+0xa24>
 802e7d8:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802e7dc:	d001      	beq.n	802e7e2 <_svfprintf_r+0xa72>
 802e7de:	b2b6      	uxth	r6, r6
 802e7e0:	e7d8      	b.n	802e794 <_svfprintf_r+0xa24>
 802e7e2:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802e7e6:	d0d5      	beq.n	802e794 <_svfprintf_r+0xa24>
 802e7e8:	b2f6      	uxtb	r6, r6
 802e7ea:	e7f3      	b.n	802e7d4 <_svfprintf_r+0xa64>
 802e7ec:	4633      	mov	r3, r6
 802e7ee:	2278      	movs	r2, #120	@ 0x78
 802e7f0:	f853 6b04 	ldr.w	r6, [r3], #4
 802e7f4:	9307      	str	r3, [sp, #28]
 802e7f6:	f647 0330 	movw	r3, #30768	@ 0x7830
 802e7fa:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 802e7fe:	4b94      	ldr	r3, [pc, #592]	@ (802ea50 <_svfprintf_r+0xce0>)
 802e800:	9319      	str	r3, [sp, #100]	@ 0x64
 802e802:	2700      	movs	r7, #0
 802e804:	f045 0502 	orr.w	r5, r5, #2
 802e808:	2302      	movs	r3, #2
 802e80a:	9206      	str	r2, [sp, #24]
 802e80c:	e7c5      	b.n	802e79a <_svfprintf_r+0xa2a>
 802e80e:	4633      	mov	r3, r6
 802e810:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 802e814:	f853 9b04 	ldr.w	r9, [r3], #4
 802e818:	9307      	str	r3, [sp, #28]
 802e81a:	f04f 0600 	mov.w	r6, #0
 802e81e:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 802e822:	d00f      	beq.n	802e844 <_svfprintf_r+0xad4>
 802e824:	4642      	mov	r2, r8
 802e826:	4631      	mov	r1, r6
 802e828:	4648      	mov	r0, r9
 802e82a:	f7e1 fce9 	bl	8010200 <memchr>
 802e82e:	4682      	mov	sl, r0
 802e830:	2800      	cmp	r0, #0
 802e832:	f43f ac81 	beq.w	802e138 <_svfprintf_r+0x3c8>
 802e836:	eba0 0809 	sub.w	r8, r0, r9
 802e83a:	46b2      	mov	sl, r6
 802e83c:	9610      	str	r6, [sp, #64]	@ 0x40
 802e83e:	4637      	mov	r7, r6
 802e840:	9608      	str	r6, [sp, #32]
 802e842:	e5eb      	b.n	802e41c <_svfprintf_r+0x6ac>
 802e844:	4648      	mov	r0, r9
 802e846:	f7e1 fd2b 	bl	80102a0 <strlen>
 802e84a:	46b2      	mov	sl, r6
 802e84c:	4680      	mov	r8, r0
 802e84e:	e473      	b.n	802e138 <_svfprintf_r+0x3c8>
 802e850:	f045 0510 	orr.w	r5, r5, #16
 802e854:	f015 0320 	ands.w	r3, r5, #32
 802e858:	d009      	beq.n	802e86e <_svfprintf_r+0xafe>
 802e85a:	3607      	adds	r6, #7
 802e85c:	f026 0307 	bic.w	r3, r6, #7
 802e860:	461a      	mov	r2, r3
 802e862:	685f      	ldr	r7, [r3, #4]
 802e864:	f852 6b08 	ldr.w	r6, [r2], #8
 802e868:	9207      	str	r2, [sp, #28]
 802e86a:	2301      	movs	r3, #1
 802e86c:	e795      	b.n	802e79a <_svfprintf_r+0xa2a>
 802e86e:	4632      	mov	r2, r6
 802e870:	f015 0710 	ands.w	r7, r5, #16
 802e874:	f852 6b04 	ldr.w	r6, [r2], #4
 802e878:	9207      	str	r2, [sp, #28]
 802e87a:	d001      	beq.n	802e880 <_svfprintf_r+0xb10>
 802e87c:	461f      	mov	r7, r3
 802e87e:	e7f4      	b.n	802e86a <_svfprintf_r+0xafa>
 802e880:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802e884:	d001      	beq.n	802e88a <_svfprintf_r+0xb1a>
 802e886:	b2b6      	uxth	r6, r6
 802e888:	e7ef      	b.n	802e86a <_svfprintf_r+0xafa>
 802e88a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802e88e:	d0ec      	beq.n	802e86a <_svfprintf_r+0xafa>
 802e890:	b2f6      	uxtb	r6, r6
 802e892:	e7f3      	b.n	802e87c <_svfprintf_r+0xb0c>
 802e894:	4b6f      	ldr	r3, [pc, #444]	@ (802ea54 <_svfprintf_r+0xce4>)
 802e896:	f7ff bb39 	b.w	802df0c <_svfprintf_r+0x19c>
 802e89a:	4632      	mov	r2, r6
 802e89c:	f015 0710 	ands.w	r7, r5, #16
 802e8a0:	f852 6b04 	ldr.w	r6, [r2], #4
 802e8a4:	9207      	str	r2, [sp, #28]
 802e8a6:	d002      	beq.n	802e8ae <_svfprintf_r+0xb3e>
 802e8a8:	461f      	mov	r7, r3
 802e8aa:	f7ff bb3c 	b.w	802df26 <_svfprintf_r+0x1b6>
 802e8ae:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802e8b2:	d002      	beq.n	802e8ba <_svfprintf_r+0xb4a>
 802e8b4:	b2b6      	uxth	r6, r6
 802e8b6:	f7ff bb36 	b.w	802df26 <_svfprintf_r+0x1b6>
 802e8ba:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802e8be:	f43f ab32 	beq.w	802df26 <_svfprintf_r+0x1b6>
 802e8c2:	b2f6      	uxtb	r6, r6
 802e8c4:	e7f0      	b.n	802e8a8 <_svfprintf_r+0xb38>
 802e8c6:	2e0a      	cmp	r6, #10
 802e8c8:	f177 0300 	sbcs.w	r3, r7, #0
 802e8cc:	d207      	bcs.n	802e8de <_svfprintf_r+0xb6e>
 802e8ce:	3630      	adds	r6, #48	@ 0x30
 802e8d0:	b2f6      	uxtb	r6, r6
 802e8d2:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 802e8d6:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 802e8da:	f000 bc15 	b.w	802f108 <_svfprintf_r+0x1398>
 802e8de:	2300      	movs	r3, #0
 802e8e0:	9304      	str	r3, [sp, #16]
 802e8e2:	9b08      	ldr	r3, [sp, #32]
 802e8e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802e8e8:	ad52      	add	r5, sp, #328	@ 0x148
 802e8ea:	9310      	str	r3, [sp, #64]	@ 0x40
 802e8ec:	220a      	movs	r2, #10
 802e8ee:	2300      	movs	r3, #0
 802e8f0:	4630      	mov	r0, r6
 802e8f2:	4639      	mov	r1, r7
 802e8f4:	f7e2 fa30 	bl	8010d58 <__aeabi_uldivmod>
 802e8f8:	9b04      	ldr	r3, [sp, #16]
 802e8fa:	9011      	str	r0, [sp, #68]	@ 0x44
 802e8fc:	3301      	adds	r3, #1
 802e8fe:	9304      	str	r3, [sp, #16]
 802e900:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802e902:	3230      	adds	r2, #48	@ 0x30
 802e904:	468a      	mov	sl, r1
 802e906:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 802e90a:	f805 2c01 	strb.w	r2, [r5, #-1]
 802e90e:	b1d3      	cbz	r3, 802e946 <_svfprintf_r+0xbd6>
 802e910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e912:	9a04      	ldr	r2, [sp, #16]
 802e914:	781b      	ldrb	r3, [r3, #0]
 802e916:	429a      	cmp	r2, r3
 802e918:	d115      	bne.n	802e946 <_svfprintf_r+0xbd6>
 802e91a:	2aff      	cmp	r2, #255	@ 0xff
 802e91c:	d013      	beq.n	802e946 <_svfprintf_r+0xbd6>
 802e91e:	2e0a      	cmp	r6, #10
 802e920:	f177 0300 	sbcs.w	r3, r7, #0
 802e924:	d30f      	bcc.n	802e946 <_svfprintf_r+0xbd6>
 802e926:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802e928:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802e92a:	eba9 0903 	sub.w	r9, r9, r3
 802e92e:	461a      	mov	r2, r3
 802e930:	4648      	mov	r0, r9
 802e932:	f7fb f8ec 	bl	8029b0e <strncpy>
 802e936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e938:	785b      	ldrb	r3, [r3, #1]
 802e93a:	b11b      	cbz	r3, 802e944 <_svfprintf_r+0xbd4>
 802e93c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e93e:	3301      	adds	r3, #1
 802e940:	9309      	str	r3, [sp, #36]	@ 0x24
 802e942:	2300      	movs	r3, #0
 802e944:	9304      	str	r3, [sp, #16]
 802e946:	2e0a      	cmp	r6, #10
 802e948:	f177 0700 	sbcs.w	r7, r7, #0
 802e94c:	f0c0 83dc 	bcc.w	802f108 <_svfprintf_r+0x1398>
 802e950:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802e952:	4657      	mov	r7, sl
 802e954:	464d      	mov	r5, r9
 802e956:	e7c9      	b.n	802e8ec <_svfprintf_r+0xb7c>
 802e958:	f006 030f 	and.w	r3, r6, #15
 802e95c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802e95e:	0936      	lsrs	r6, r6, #4
 802e960:	5cd3      	ldrb	r3, [r2, r3]
 802e962:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802e966:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 802e96a:	093f      	lsrs	r7, r7, #4
 802e96c:	ea56 0307 	orrs.w	r3, r6, r7
 802e970:	d1f2      	bne.n	802e958 <_svfprintf_r+0xbe8>
 802e972:	e3c9      	b.n	802f108 <_svfprintf_r+0x1398>
 802e974:	b91b      	cbnz	r3, 802e97e <_svfprintf_r+0xc0e>
 802e976:	07e9      	lsls	r1, r5, #31
 802e978:	d501      	bpl.n	802e97e <_svfprintf_r+0xc0e>
 802e97a:	2630      	movs	r6, #48	@ 0x30
 802e97c:	e7a9      	b.n	802e8d2 <_svfprintf_r+0xb62>
 802e97e:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 802e982:	e3c1      	b.n	802f108 <_svfprintf_r+0x1398>
 802e984:	9b06      	ldr	r3, [sp, #24]
 802e986:	2b00      	cmp	r3, #0
 802e988:	f000 838f 	beq.w	802f0aa <_svfprintf_r+0x133a>
 802e98c:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802e990:	2300      	movs	r3, #0
 802e992:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802e996:	9607      	str	r6, [sp, #28]
 802e998:	f7ff bb63 	b.w	802e062 <_svfprintf_r+0x2f2>
 802e99c:	2010      	movs	r0, #16
 802e99e:	4403      	add	r3, r0
 802e9a0:	2a07      	cmp	r2, #7
 802e9a2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802e9a6:	6060      	str	r0, [r4, #4]
 802e9a8:	dd08      	ble.n	802e9bc <_svfprintf_r+0xc4c>
 802e9aa:	9803      	ldr	r0, [sp, #12]
 802e9ac:	aa26      	add	r2, sp, #152	@ 0x98
 802e9ae:	4659      	mov	r1, fp
 802e9b0:	f7fd fd66 	bl	802c480 <__ssprint_r>
 802e9b4:	2800      	cmp	r0, #0
 802e9b6:	f040 8356 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802e9ba:	a929      	add	r1, sp, #164	@ 0xa4
 802e9bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802e9be:	3b10      	subs	r3, #16
 802e9c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802e9c2:	460c      	mov	r4, r1
 802e9c4:	e546      	b.n	802e454 <_svfprintf_r+0x6e4>
 802e9c6:	460c      	mov	r4, r1
 802e9c8:	e561      	b.n	802e48e <_svfprintf_r+0x71e>
 802e9ca:	9803      	ldr	r0, [sp, #12]
 802e9cc:	aa26      	add	r2, sp, #152	@ 0x98
 802e9ce:	4659      	mov	r1, fp
 802e9d0:	f7fd fd56 	bl	802c480 <__ssprint_r>
 802e9d4:	2800      	cmp	r0, #0
 802e9d6:	f040 8346 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802e9da:	ac29      	add	r4, sp, #164	@ 0xa4
 802e9dc:	e569      	b.n	802e4b2 <_svfprintf_r+0x742>
 802e9de:	9803      	ldr	r0, [sp, #12]
 802e9e0:	aa26      	add	r2, sp, #152	@ 0x98
 802e9e2:	4659      	mov	r1, fp
 802e9e4:	f7fd fd4c 	bl	802c480 <__ssprint_r>
 802e9e8:	2800      	cmp	r0, #0
 802e9ea:	f040 833c 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802e9ee:	ac29      	add	r4, sp, #164	@ 0xa4
 802e9f0:	e56f      	b.n	802e4d2 <_svfprintf_r+0x762>
 802e9f2:	2010      	movs	r0, #16
 802e9f4:	4403      	add	r3, r0
 802e9f6:	2a07      	cmp	r2, #7
 802e9f8:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802e9fc:	6060      	str	r0, [r4, #4]
 802e9fe:	dd08      	ble.n	802ea12 <_svfprintf_r+0xca2>
 802ea00:	9803      	ldr	r0, [sp, #12]
 802ea02:	aa26      	add	r2, sp, #152	@ 0x98
 802ea04:	4659      	mov	r1, fp
 802ea06:	f7fd fd3b 	bl	802c480 <__ssprint_r>
 802ea0a:	2800      	cmp	r0, #0
 802ea0c:	f040 832b 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802ea10:	a929      	add	r1, sp, #164	@ 0xa4
 802ea12:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802ea14:	3b10      	subs	r3, #16
 802ea16:	9313      	str	r3, [sp, #76]	@ 0x4c
 802ea18:	460c      	mov	r4, r1
 802ea1a:	e563      	b.n	802e4e4 <_svfprintf_r+0x774>
 802ea1c:	460c      	mov	r4, r1
 802ea1e:	e57e      	b.n	802e51e <_svfprintf_r+0x7ae>
 802ea20:	2010      	movs	r0, #16
 802ea22:	4403      	add	r3, r0
 802ea24:	2a07      	cmp	r2, #7
 802ea26:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ea2a:	6060      	str	r0, [r4, #4]
 802ea2c:	dd08      	ble.n	802ea40 <_svfprintf_r+0xcd0>
 802ea2e:	9803      	ldr	r0, [sp, #12]
 802ea30:	aa26      	add	r2, sp, #152	@ 0x98
 802ea32:	4659      	mov	r1, fp
 802ea34:	f7fd fd24 	bl	802c480 <__ssprint_r>
 802ea38:	2800      	cmp	r0, #0
 802ea3a:	f040 8314 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802ea3e:	a929      	add	r1, sp, #164	@ 0xa4
 802ea40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ea42:	3b10      	subs	r3, #16
 802ea44:	9310      	str	r3, [sp, #64]	@ 0x40
 802ea46:	460c      	mov	r4, r1
 802ea48:	e56f      	b.n	802e52a <_svfprintf_r+0x7ba>
 802ea4a:	460c      	mov	r4, r1
 802ea4c:	e58a      	b.n	802e564 <_svfprintf_r+0x7f4>
 802ea4e:	bf00      	nop
 802ea50:	080380cb 	.word	0x080380cb
 802ea54:	080380dc 	.word	0x080380dc
 802ea58:	9b06      	ldr	r3, [sp, #24]
 802ea5a:	2b65      	cmp	r3, #101	@ 0x65
 802ea5c:	f340 8246 	ble.w	802eeec <_svfprintf_r+0x117c>
 802ea60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802ea64:	2200      	movs	r2, #0
 802ea66:	2300      	movs	r3, #0
 802ea68:	f7e2 f846 	bl	8010af8 <__aeabi_dcmpeq>
 802ea6c:	2800      	cmp	r0, #0
 802ea6e:	d06a      	beq.n	802eb46 <_svfprintf_r+0xdd6>
 802ea70:	4b73      	ldr	r3, [pc, #460]	@ (802ec40 <_svfprintf_r+0xed0>)
 802ea72:	6023      	str	r3, [r4, #0]
 802ea74:	2301      	movs	r3, #1
 802ea76:	6063      	str	r3, [r4, #4]
 802ea78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ea7a:	3301      	adds	r3, #1
 802ea7c:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ea7e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ea80:	3301      	adds	r3, #1
 802ea82:	2b07      	cmp	r3, #7
 802ea84:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ea86:	dc37      	bgt.n	802eaf8 <_svfprintf_r+0xd88>
 802ea88:	3408      	adds	r4, #8
 802ea8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ea8c:	9a04      	ldr	r2, [sp, #16]
 802ea8e:	4293      	cmp	r3, r2
 802ea90:	db02      	blt.n	802ea98 <_svfprintf_r+0xd28>
 802ea92:	07ef      	lsls	r7, r5, #31
 802ea94:	f57f ad76 	bpl.w	802e584 <_svfprintf_r+0x814>
 802ea98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ea9a:	6023      	str	r3, [r4, #0]
 802ea9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ea9e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802eaa0:	6063      	str	r3, [r4, #4]
 802eaa2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802eaa4:	4413      	add	r3, r2
 802eaa6:	9328      	str	r3, [sp, #160]	@ 0xa0
 802eaa8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802eaaa:	3301      	adds	r3, #1
 802eaac:	2b07      	cmp	r3, #7
 802eaae:	9327      	str	r3, [sp, #156]	@ 0x9c
 802eab0:	dc2c      	bgt.n	802eb0c <_svfprintf_r+0xd9c>
 802eab2:	3408      	adds	r4, #8
 802eab4:	9b04      	ldr	r3, [sp, #16]
 802eab6:	1e5e      	subs	r6, r3, #1
 802eab8:	2e00      	cmp	r6, #0
 802eaba:	f77f ad63 	ble.w	802e584 <_svfprintf_r+0x814>
 802eabe:	4f61      	ldr	r7, [pc, #388]	@ (802ec44 <_svfprintf_r+0xed4>)
 802eac0:	f04f 0810 	mov.w	r8, #16
 802eac4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802eac8:	2e10      	cmp	r6, #16
 802eaca:	f103 0301 	add.w	r3, r3, #1
 802eace:	f104 0108 	add.w	r1, r4, #8
 802ead2:	6027      	str	r7, [r4, #0]
 802ead4:	dc24      	bgt.n	802eb20 <_svfprintf_r+0xdb0>
 802ead6:	6066      	str	r6, [r4, #4]
 802ead8:	2b07      	cmp	r3, #7
 802eada:	4416      	add	r6, r2
 802eadc:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802eae0:	f340 82a0 	ble.w	802f024 <_svfprintf_r+0x12b4>
 802eae4:	9803      	ldr	r0, [sp, #12]
 802eae6:	aa26      	add	r2, sp, #152	@ 0x98
 802eae8:	4659      	mov	r1, fp
 802eaea:	f7fd fcc9 	bl	802c480 <__ssprint_r>
 802eaee:	2800      	cmp	r0, #0
 802eaf0:	f040 82b9 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802eaf4:	ac29      	add	r4, sp, #164	@ 0xa4
 802eaf6:	e545      	b.n	802e584 <_svfprintf_r+0x814>
 802eaf8:	9803      	ldr	r0, [sp, #12]
 802eafa:	aa26      	add	r2, sp, #152	@ 0x98
 802eafc:	4659      	mov	r1, fp
 802eafe:	f7fd fcbf 	bl	802c480 <__ssprint_r>
 802eb02:	2800      	cmp	r0, #0
 802eb04:	f040 82af 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802eb08:	ac29      	add	r4, sp, #164	@ 0xa4
 802eb0a:	e7be      	b.n	802ea8a <_svfprintf_r+0xd1a>
 802eb0c:	9803      	ldr	r0, [sp, #12]
 802eb0e:	aa26      	add	r2, sp, #152	@ 0x98
 802eb10:	4659      	mov	r1, fp
 802eb12:	f7fd fcb5 	bl	802c480 <__ssprint_r>
 802eb16:	2800      	cmp	r0, #0
 802eb18:	f040 82a5 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802eb1c:	ac29      	add	r4, sp, #164	@ 0xa4
 802eb1e:	e7c9      	b.n	802eab4 <_svfprintf_r+0xd44>
 802eb20:	3210      	adds	r2, #16
 802eb22:	2b07      	cmp	r3, #7
 802eb24:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802eb28:	f8c4 8004 	str.w	r8, [r4, #4]
 802eb2c:	dd08      	ble.n	802eb40 <_svfprintf_r+0xdd0>
 802eb2e:	9803      	ldr	r0, [sp, #12]
 802eb30:	aa26      	add	r2, sp, #152	@ 0x98
 802eb32:	4659      	mov	r1, fp
 802eb34:	f7fd fca4 	bl	802c480 <__ssprint_r>
 802eb38:	2800      	cmp	r0, #0
 802eb3a:	f040 8294 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802eb3e:	a929      	add	r1, sp, #164	@ 0xa4
 802eb40:	3e10      	subs	r6, #16
 802eb42:	460c      	mov	r4, r1
 802eb44:	e7be      	b.n	802eac4 <_svfprintf_r+0xd54>
 802eb46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802eb48:	2b00      	cmp	r3, #0
 802eb4a:	dc7d      	bgt.n	802ec48 <_svfprintf_r+0xed8>
 802eb4c:	4b3c      	ldr	r3, [pc, #240]	@ (802ec40 <_svfprintf_r+0xed0>)
 802eb4e:	6023      	str	r3, [r4, #0]
 802eb50:	2301      	movs	r3, #1
 802eb52:	6063      	str	r3, [r4, #4]
 802eb54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802eb56:	3301      	adds	r3, #1
 802eb58:	9328      	str	r3, [sp, #160]	@ 0xa0
 802eb5a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802eb5c:	3301      	adds	r3, #1
 802eb5e:	2b07      	cmp	r3, #7
 802eb60:	9327      	str	r3, [sp, #156]	@ 0x9c
 802eb62:	dc46      	bgt.n	802ebf2 <_svfprintf_r+0xe82>
 802eb64:	3408      	adds	r4, #8
 802eb66:	9904      	ldr	r1, [sp, #16]
 802eb68:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802eb6a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802eb6c:	430b      	orrs	r3, r1
 802eb6e:	f005 0101 	and.w	r1, r5, #1
 802eb72:	430b      	orrs	r3, r1
 802eb74:	f43f ad06 	beq.w	802e584 <_svfprintf_r+0x814>
 802eb78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802eb7a:	6023      	str	r3, [r4, #0]
 802eb7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802eb7e:	6063      	str	r3, [r4, #4]
 802eb80:	441a      	add	r2, r3
 802eb82:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802eb84:	9228      	str	r2, [sp, #160]	@ 0xa0
 802eb86:	3301      	adds	r3, #1
 802eb88:	2b07      	cmp	r3, #7
 802eb8a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802eb8c:	dc3b      	bgt.n	802ec06 <_svfprintf_r+0xe96>
 802eb8e:	f104 0308 	add.w	r3, r4, #8
 802eb92:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802eb94:	2e00      	cmp	r6, #0
 802eb96:	da1b      	bge.n	802ebd0 <_svfprintf_r+0xe60>
 802eb98:	4f2a      	ldr	r7, [pc, #168]	@ (802ec44 <_svfprintf_r+0xed4>)
 802eb9a:	4276      	negs	r6, r6
 802eb9c:	461a      	mov	r2, r3
 802eb9e:	2410      	movs	r4, #16
 802eba0:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 802eba4:	2e10      	cmp	r6, #16
 802eba6:	f101 0101 	add.w	r1, r1, #1
 802ebaa:	f103 0308 	add.w	r3, r3, #8
 802ebae:	6017      	str	r7, [r2, #0]
 802ebb0:	dc33      	bgt.n	802ec1a <_svfprintf_r+0xeaa>
 802ebb2:	6056      	str	r6, [r2, #4]
 802ebb4:	2907      	cmp	r1, #7
 802ebb6:	4406      	add	r6, r0
 802ebb8:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 802ebbc:	dd08      	ble.n	802ebd0 <_svfprintf_r+0xe60>
 802ebbe:	9803      	ldr	r0, [sp, #12]
 802ebc0:	aa26      	add	r2, sp, #152	@ 0x98
 802ebc2:	4659      	mov	r1, fp
 802ebc4:	f7fd fc5c 	bl	802c480 <__ssprint_r>
 802ebc8:	2800      	cmp	r0, #0
 802ebca:	f040 824c 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802ebce:	ab29      	add	r3, sp, #164	@ 0xa4
 802ebd0:	9a04      	ldr	r2, [sp, #16]
 802ebd2:	9904      	ldr	r1, [sp, #16]
 802ebd4:	605a      	str	r2, [r3, #4]
 802ebd6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802ebd8:	f8c3 9000 	str.w	r9, [r3]
 802ebdc:	440a      	add	r2, r1
 802ebde:	9228      	str	r2, [sp, #160]	@ 0xa0
 802ebe0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802ebe2:	3201      	adds	r2, #1
 802ebe4:	2a07      	cmp	r2, #7
 802ebe6:	9227      	str	r2, [sp, #156]	@ 0x9c
 802ebe8:	f73f af7c 	bgt.w	802eae4 <_svfprintf_r+0xd74>
 802ebec:	f103 0408 	add.w	r4, r3, #8
 802ebf0:	e4c8      	b.n	802e584 <_svfprintf_r+0x814>
 802ebf2:	9803      	ldr	r0, [sp, #12]
 802ebf4:	aa26      	add	r2, sp, #152	@ 0x98
 802ebf6:	4659      	mov	r1, fp
 802ebf8:	f7fd fc42 	bl	802c480 <__ssprint_r>
 802ebfc:	2800      	cmp	r0, #0
 802ebfe:	f040 8232 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802ec02:	ac29      	add	r4, sp, #164	@ 0xa4
 802ec04:	e7af      	b.n	802eb66 <_svfprintf_r+0xdf6>
 802ec06:	9803      	ldr	r0, [sp, #12]
 802ec08:	aa26      	add	r2, sp, #152	@ 0x98
 802ec0a:	4659      	mov	r1, fp
 802ec0c:	f7fd fc38 	bl	802c480 <__ssprint_r>
 802ec10:	2800      	cmp	r0, #0
 802ec12:	f040 8228 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802ec16:	ab29      	add	r3, sp, #164	@ 0xa4
 802ec18:	e7bb      	b.n	802eb92 <_svfprintf_r+0xe22>
 802ec1a:	3010      	adds	r0, #16
 802ec1c:	2907      	cmp	r1, #7
 802ec1e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 802ec22:	6054      	str	r4, [r2, #4]
 802ec24:	dd08      	ble.n	802ec38 <_svfprintf_r+0xec8>
 802ec26:	9803      	ldr	r0, [sp, #12]
 802ec28:	aa26      	add	r2, sp, #152	@ 0x98
 802ec2a:	4659      	mov	r1, fp
 802ec2c:	f7fd fc28 	bl	802c480 <__ssprint_r>
 802ec30:	2800      	cmp	r0, #0
 802ec32:	f040 8218 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802ec36:	ab29      	add	r3, sp, #164	@ 0xa4
 802ec38:	3e10      	subs	r6, #16
 802ec3a:	461a      	mov	r2, r3
 802ec3c:	e7b0      	b.n	802eba0 <_svfprintf_r+0xe30>
 802ec3e:	bf00      	nop
 802ec40:	080380ed 	.word	0x080380ed
 802ec44:	08038632 	.word	0x08038632
 802ec48:	9b04      	ldr	r3, [sp, #16]
 802ec4a:	444b      	add	r3, r9
 802ec4c:	9306      	str	r3, [sp, #24]
 802ec4e:	9b04      	ldr	r3, [sp, #16]
 802ec50:	42b3      	cmp	r3, r6
 802ec52:	bfa8      	it	ge
 802ec54:	4633      	movge	r3, r6
 802ec56:	2b00      	cmp	r3, #0
 802ec58:	4698      	mov	r8, r3
 802ec5a:	dd0b      	ble.n	802ec74 <_svfprintf_r+0xf04>
 802ec5c:	e9c4 9300 	strd	r9, r3, [r4]
 802ec60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ec62:	4443      	add	r3, r8
 802ec64:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ec66:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ec68:	3301      	adds	r3, #1
 802ec6a:	2b07      	cmp	r3, #7
 802ec6c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ec6e:	f300 8089 	bgt.w	802ed84 <_svfprintf_r+0x1014>
 802ec72:	3408      	adds	r4, #8
 802ec74:	4643      	mov	r3, r8
 802ec76:	2b00      	cmp	r3, #0
 802ec78:	bfac      	ite	ge
 802ec7a:	eba6 0808 	subge.w	r8, r6, r8
 802ec7e:	46b0      	movlt	r8, r6
 802ec80:	f1b8 0f00 	cmp.w	r8, #0
 802ec84:	dd1b      	ble.n	802ecbe <_svfprintf_r+0xf4e>
 802ec86:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802ec8a:	4897      	ldr	r0, [pc, #604]	@ (802eee8 <_svfprintf_r+0x1178>)
 802ec8c:	6020      	str	r0, [r4, #0]
 802ec8e:	f1b8 0f10 	cmp.w	r8, #16
 802ec92:	f102 0201 	add.w	r2, r2, #1
 802ec96:	f104 0108 	add.w	r1, r4, #8
 802ec9a:	dc7d      	bgt.n	802ed98 <_svfprintf_r+0x1028>
 802ec9c:	4443      	add	r3, r8
 802ec9e:	2a07      	cmp	r2, #7
 802eca0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802eca4:	f8c4 8004 	str.w	r8, [r4, #4]
 802eca8:	f340 808a 	ble.w	802edc0 <_svfprintf_r+0x1050>
 802ecac:	9803      	ldr	r0, [sp, #12]
 802ecae:	aa26      	add	r2, sp, #152	@ 0x98
 802ecb0:	4659      	mov	r1, fp
 802ecb2:	f7fd fbe5 	bl	802c480 <__ssprint_r>
 802ecb6:	2800      	cmp	r0, #0
 802ecb8:	f040 81d5 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802ecbc:	ac29      	add	r4, sp, #164	@ 0xa4
 802ecbe:	eb09 0806 	add.w	r8, r9, r6
 802ecc2:	056e      	lsls	r6, r5, #21
 802ecc4:	d508      	bpl.n	802ecd8 <_svfprintf_r+0xf68>
 802ecc6:	9b08      	ldr	r3, [sp, #32]
 802ecc8:	2b00      	cmp	r3, #0
 802ecca:	d17b      	bne.n	802edc4 <_svfprintf_r+0x1054>
 802eccc:	2f00      	cmp	r7, #0
 802ecce:	d17b      	bne.n	802edc8 <_svfprintf_r+0x1058>
 802ecd0:	9b06      	ldr	r3, [sp, #24]
 802ecd2:	4598      	cmp	r8, r3
 802ecd4:	bf28      	it	cs
 802ecd6:	4698      	movcs	r8, r3
 802ecd8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ecda:	9a04      	ldr	r2, [sp, #16]
 802ecdc:	4293      	cmp	r3, r2
 802ecde:	db01      	blt.n	802ece4 <_svfprintf_r+0xf74>
 802ece0:	07e8      	lsls	r0, r5, #31
 802ece2:	d50e      	bpl.n	802ed02 <_svfprintf_r+0xf92>
 802ece4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ece6:	6023      	str	r3, [r4, #0]
 802ece8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ecea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802ecec:	6063      	str	r3, [r4, #4]
 802ecee:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ecf0:	4413      	add	r3, r2
 802ecf2:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ecf4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ecf6:	3301      	adds	r3, #1
 802ecf8:	2b07      	cmp	r3, #7
 802ecfa:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ecfc:	f300 80df 	bgt.w	802eebe <_svfprintf_r+0x114e>
 802ed00:	3408      	adds	r4, #8
 802ed02:	9b04      	ldr	r3, [sp, #16]
 802ed04:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 802ed06:	1bdf      	subs	r7, r3, r7
 802ed08:	9b06      	ldr	r3, [sp, #24]
 802ed0a:	eba3 0308 	sub.w	r3, r3, r8
 802ed0e:	429f      	cmp	r7, r3
 802ed10:	bfa8      	it	ge
 802ed12:	461f      	movge	r7, r3
 802ed14:	2f00      	cmp	r7, #0
 802ed16:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ed18:	dd0a      	ble.n	802ed30 <_svfprintf_r+0xfc0>
 802ed1a:	443b      	add	r3, r7
 802ed1c:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ed1e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ed20:	3301      	adds	r3, #1
 802ed22:	2b07      	cmp	r3, #7
 802ed24:	e9c4 8700 	strd	r8, r7, [r4]
 802ed28:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ed2a:	f300 80d2 	bgt.w	802eed2 <_svfprintf_r+0x1162>
 802ed2e:	3408      	adds	r4, #8
 802ed30:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802ed32:	9b04      	ldr	r3, [sp, #16]
 802ed34:	2f00      	cmp	r7, #0
 802ed36:	eba3 0606 	sub.w	r6, r3, r6
 802ed3a:	bfa8      	it	ge
 802ed3c:	1bf6      	subge	r6, r6, r7
 802ed3e:	2e00      	cmp	r6, #0
 802ed40:	f77f ac20 	ble.w	802e584 <_svfprintf_r+0x814>
 802ed44:	4f68      	ldr	r7, [pc, #416]	@ (802eee8 <_svfprintf_r+0x1178>)
 802ed46:	f04f 0810 	mov.w	r8, #16
 802ed4a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802ed4e:	2e10      	cmp	r6, #16
 802ed50:	f103 0301 	add.w	r3, r3, #1
 802ed54:	f104 0108 	add.w	r1, r4, #8
 802ed58:	6027      	str	r7, [r4, #0]
 802ed5a:	f77f aebc 	ble.w	802ead6 <_svfprintf_r+0xd66>
 802ed5e:	3210      	adds	r2, #16
 802ed60:	2b07      	cmp	r3, #7
 802ed62:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802ed66:	f8c4 8004 	str.w	r8, [r4, #4]
 802ed6a:	dd08      	ble.n	802ed7e <_svfprintf_r+0x100e>
 802ed6c:	9803      	ldr	r0, [sp, #12]
 802ed6e:	aa26      	add	r2, sp, #152	@ 0x98
 802ed70:	4659      	mov	r1, fp
 802ed72:	f7fd fb85 	bl	802c480 <__ssprint_r>
 802ed76:	2800      	cmp	r0, #0
 802ed78:	f040 8175 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802ed7c:	a929      	add	r1, sp, #164	@ 0xa4
 802ed7e:	3e10      	subs	r6, #16
 802ed80:	460c      	mov	r4, r1
 802ed82:	e7e2      	b.n	802ed4a <_svfprintf_r+0xfda>
 802ed84:	9803      	ldr	r0, [sp, #12]
 802ed86:	aa26      	add	r2, sp, #152	@ 0x98
 802ed88:	4659      	mov	r1, fp
 802ed8a:	f7fd fb79 	bl	802c480 <__ssprint_r>
 802ed8e:	2800      	cmp	r0, #0
 802ed90:	f040 8169 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802ed94:	ac29      	add	r4, sp, #164	@ 0xa4
 802ed96:	e76d      	b.n	802ec74 <_svfprintf_r+0xf04>
 802ed98:	2010      	movs	r0, #16
 802ed9a:	4403      	add	r3, r0
 802ed9c:	2a07      	cmp	r2, #7
 802ed9e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802eda2:	6060      	str	r0, [r4, #4]
 802eda4:	dd08      	ble.n	802edb8 <_svfprintf_r+0x1048>
 802eda6:	9803      	ldr	r0, [sp, #12]
 802eda8:	aa26      	add	r2, sp, #152	@ 0x98
 802edaa:	4659      	mov	r1, fp
 802edac:	f7fd fb68 	bl	802c480 <__ssprint_r>
 802edb0:	2800      	cmp	r0, #0
 802edb2:	f040 8158 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802edb6:	a929      	add	r1, sp, #164	@ 0xa4
 802edb8:	f1a8 0810 	sub.w	r8, r8, #16
 802edbc:	460c      	mov	r4, r1
 802edbe:	e762      	b.n	802ec86 <_svfprintf_r+0xf16>
 802edc0:	460c      	mov	r4, r1
 802edc2:	e77c      	b.n	802ecbe <_svfprintf_r+0xf4e>
 802edc4:	2f00      	cmp	r7, #0
 802edc6:	d04a      	beq.n	802ee5e <_svfprintf_r+0x10ee>
 802edc8:	3f01      	subs	r7, #1
 802edca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802edcc:	6023      	str	r3, [r4, #0]
 802edce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802edd0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802edd2:	6063      	str	r3, [r4, #4]
 802edd4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802edd6:	4413      	add	r3, r2
 802edd8:	9328      	str	r3, [sp, #160]	@ 0xa0
 802edda:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802eddc:	3301      	adds	r3, #1
 802edde:	2b07      	cmp	r3, #7
 802ede0:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ede2:	dc43      	bgt.n	802ee6c <_svfprintf_r+0x10fc>
 802ede4:	3408      	adds	r4, #8
 802ede6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ede8:	781a      	ldrb	r2, [r3, #0]
 802edea:	9b06      	ldr	r3, [sp, #24]
 802edec:	eba3 0308 	sub.w	r3, r3, r8
 802edf0:	429a      	cmp	r2, r3
 802edf2:	bfa8      	it	ge
 802edf4:	461a      	movge	r2, r3
 802edf6:	2a00      	cmp	r2, #0
 802edf8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802edfa:	4691      	mov	r9, r2
 802edfc:	dd09      	ble.n	802ee12 <_svfprintf_r+0x10a2>
 802edfe:	4413      	add	r3, r2
 802ee00:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ee02:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ee04:	3301      	adds	r3, #1
 802ee06:	2b07      	cmp	r3, #7
 802ee08:	e9c4 8200 	strd	r8, r2, [r4]
 802ee0c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ee0e:	dc37      	bgt.n	802ee80 <_svfprintf_r+0x1110>
 802ee10:	3408      	adds	r4, #8
 802ee12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ee14:	781e      	ldrb	r6, [r3, #0]
 802ee16:	f1b9 0f00 	cmp.w	r9, #0
 802ee1a:	bfa8      	it	ge
 802ee1c:	eba6 0609 	subge.w	r6, r6, r9
 802ee20:	2e00      	cmp	r6, #0
 802ee22:	dd18      	ble.n	802ee56 <_svfprintf_r+0x10e6>
 802ee24:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802ee28:	482f      	ldr	r0, [pc, #188]	@ (802eee8 <_svfprintf_r+0x1178>)
 802ee2a:	6020      	str	r0, [r4, #0]
 802ee2c:	2e10      	cmp	r6, #16
 802ee2e:	f103 0301 	add.w	r3, r3, #1
 802ee32:	f104 0108 	add.w	r1, r4, #8
 802ee36:	dc2d      	bgt.n	802ee94 <_svfprintf_r+0x1124>
 802ee38:	6066      	str	r6, [r4, #4]
 802ee3a:	2b07      	cmp	r3, #7
 802ee3c:	4416      	add	r6, r2
 802ee3e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802ee42:	dd3a      	ble.n	802eeba <_svfprintf_r+0x114a>
 802ee44:	9803      	ldr	r0, [sp, #12]
 802ee46:	aa26      	add	r2, sp, #152	@ 0x98
 802ee48:	4659      	mov	r1, fp
 802ee4a:	f7fd fb19 	bl	802c480 <__ssprint_r>
 802ee4e:	2800      	cmp	r0, #0
 802ee50:	f040 8109 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802ee54:	ac29      	add	r4, sp, #164	@ 0xa4
 802ee56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ee58:	781b      	ldrb	r3, [r3, #0]
 802ee5a:	4498      	add	r8, r3
 802ee5c:	e733      	b.n	802ecc6 <_svfprintf_r+0xf56>
 802ee5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ee60:	3b01      	subs	r3, #1
 802ee62:	9309      	str	r3, [sp, #36]	@ 0x24
 802ee64:	9b08      	ldr	r3, [sp, #32]
 802ee66:	3b01      	subs	r3, #1
 802ee68:	9308      	str	r3, [sp, #32]
 802ee6a:	e7ae      	b.n	802edca <_svfprintf_r+0x105a>
 802ee6c:	9803      	ldr	r0, [sp, #12]
 802ee6e:	aa26      	add	r2, sp, #152	@ 0x98
 802ee70:	4659      	mov	r1, fp
 802ee72:	f7fd fb05 	bl	802c480 <__ssprint_r>
 802ee76:	2800      	cmp	r0, #0
 802ee78:	f040 80f5 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802ee7c:	ac29      	add	r4, sp, #164	@ 0xa4
 802ee7e:	e7b2      	b.n	802ede6 <_svfprintf_r+0x1076>
 802ee80:	9803      	ldr	r0, [sp, #12]
 802ee82:	aa26      	add	r2, sp, #152	@ 0x98
 802ee84:	4659      	mov	r1, fp
 802ee86:	f7fd fafb 	bl	802c480 <__ssprint_r>
 802ee8a:	2800      	cmp	r0, #0
 802ee8c:	f040 80eb 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802ee90:	ac29      	add	r4, sp, #164	@ 0xa4
 802ee92:	e7be      	b.n	802ee12 <_svfprintf_r+0x10a2>
 802ee94:	2010      	movs	r0, #16
 802ee96:	4402      	add	r2, r0
 802ee98:	2b07      	cmp	r3, #7
 802ee9a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802ee9e:	6060      	str	r0, [r4, #4]
 802eea0:	dd08      	ble.n	802eeb4 <_svfprintf_r+0x1144>
 802eea2:	9803      	ldr	r0, [sp, #12]
 802eea4:	aa26      	add	r2, sp, #152	@ 0x98
 802eea6:	4659      	mov	r1, fp
 802eea8:	f7fd faea 	bl	802c480 <__ssprint_r>
 802eeac:	2800      	cmp	r0, #0
 802eeae:	f040 80da 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802eeb2:	a929      	add	r1, sp, #164	@ 0xa4
 802eeb4:	3e10      	subs	r6, #16
 802eeb6:	460c      	mov	r4, r1
 802eeb8:	e7b4      	b.n	802ee24 <_svfprintf_r+0x10b4>
 802eeba:	460c      	mov	r4, r1
 802eebc:	e7cb      	b.n	802ee56 <_svfprintf_r+0x10e6>
 802eebe:	9803      	ldr	r0, [sp, #12]
 802eec0:	aa26      	add	r2, sp, #152	@ 0x98
 802eec2:	4659      	mov	r1, fp
 802eec4:	f7fd fadc 	bl	802c480 <__ssprint_r>
 802eec8:	2800      	cmp	r0, #0
 802eeca:	f040 80cc 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802eece:	ac29      	add	r4, sp, #164	@ 0xa4
 802eed0:	e717      	b.n	802ed02 <_svfprintf_r+0xf92>
 802eed2:	9803      	ldr	r0, [sp, #12]
 802eed4:	aa26      	add	r2, sp, #152	@ 0x98
 802eed6:	4659      	mov	r1, fp
 802eed8:	f7fd fad2 	bl	802c480 <__ssprint_r>
 802eedc:	2800      	cmp	r0, #0
 802eede:	f040 80c2 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802eee2:	ac29      	add	r4, sp, #164	@ 0xa4
 802eee4:	e724      	b.n	802ed30 <_svfprintf_r+0xfc0>
 802eee6:	bf00      	nop
 802eee8:	08038632 	.word	0x08038632
 802eeec:	9904      	ldr	r1, [sp, #16]
 802eeee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802eef0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802eef2:	2901      	cmp	r1, #1
 802eef4:	f103 0301 	add.w	r3, r3, #1
 802eef8:	f102 0201 	add.w	r2, r2, #1
 802eefc:	f104 0608 	add.w	r6, r4, #8
 802ef00:	dc02      	bgt.n	802ef08 <_svfprintf_r+0x1198>
 802ef02:	07e9      	lsls	r1, r5, #31
 802ef04:	f140 8083 	bpl.w	802f00e <_svfprintf_r+0x129e>
 802ef08:	2101      	movs	r1, #1
 802ef0a:	2a07      	cmp	r2, #7
 802ef0c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ef10:	f8c4 9000 	str.w	r9, [r4]
 802ef14:	6061      	str	r1, [r4, #4]
 802ef16:	dd08      	ble.n	802ef2a <_svfprintf_r+0x11ba>
 802ef18:	9803      	ldr	r0, [sp, #12]
 802ef1a:	aa26      	add	r2, sp, #152	@ 0x98
 802ef1c:	4659      	mov	r1, fp
 802ef1e:	f7fd faaf 	bl	802c480 <__ssprint_r>
 802ef22:	2800      	cmp	r0, #0
 802ef24:	f040 809f 	bne.w	802f066 <_svfprintf_r+0x12f6>
 802ef28:	ae29      	add	r6, sp, #164	@ 0xa4
 802ef2a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ef2c:	6033      	str	r3, [r6, #0]
 802ef2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ef30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802ef32:	6073      	str	r3, [r6, #4]
 802ef34:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ef36:	4413      	add	r3, r2
 802ef38:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ef3a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ef3c:	3301      	adds	r3, #1
 802ef3e:	2b07      	cmp	r3, #7
 802ef40:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ef42:	dc33      	bgt.n	802efac <_svfprintf_r+0x123c>
 802ef44:	3608      	adds	r6, #8
 802ef46:	9b04      	ldr	r3, [sp, #16]
 802ef48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802ef4c:	1e5c      	subs	r4, r3, #1
 802ef4e:	2200      	movs	r2, #0
 802ef50:	2300      	movs	r3, #0
 802ef52:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 802ef56:	f7e1 fdcf 	bl	8010af8 <__aeabi_dcmpeq>
 802ef5a:	2800      	cmp	r0, #0
 802ef5c:	d12f      	bne.n	802efbe <_svfprintf_r+0x124e>
 802ef5e:	f109 0201 	add.w	r2, r9, #1
 802ef62:	e9c6 2400 	strd	r2, r4, [r6]
 802ef66:	9a04      	ldr	r2, [sp, #16]
 802ef68:	f108 0301 	add.w	r3, r8, #1
 802ef6c:	3f01      	subs	r7, #1
 802ef6e:	4417      	add	r7, r2
 802ef70:	2b07      	cmp	r3, #7
 802ef72:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 802ef76:	dd53      	ble.n	802f020 <_svfprintf_r+0x12b0>
 802ef78:	9803      	ldr	r0, [sp, #12]
 802ef7a:	aa26      	add	r2, sp, #152	@ 0x98
 802ef7c:	4659      	mov	r1, fp
 802ef7e:	f7fd fa7f 	bl	802c480 <__ssprint_r>
 802ef82:	2800      	cmp	r0, #0
 802ef84:	d16f      	bne.n	802f066 <_svfprintf_r+0x12f6>
 802ef86:	ae29      	add	r6, sp, #164	@ 0xa4
 802ef88:	ab22      	add	r3, sp, #136	@ 0x88
 802ef8a:	6033      	str	r3, [r6, #0]
 802ef8c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802ef8e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802ef90:	6073      	str	r3, [r6, #4]
 802ef92:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ef94:	4413      	add	r3, r2
 802ef96:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ef98:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ef9a:	3301      	adds	r3, #1
 802ef9c:	2b07      	cmp	r3, #7
 802ef9e:	9327      	str	r3, [sp, #156]	@ 0x9c
 802efa0:	f73f ada0 	bgt.w	802eae4 <_svfprintf_r+0xd74>
 802efa4:	f106 0408 	add.w	r4, r6, #8
 802efa8:	f7ff baec 	b.w	802e584 <_svfprintf_r+0x814>
 802efac:	9803      	ldr	r0, [sp, #12]
 802efae:	aa26      	add	r2, sp, #152	@ 0x98
 802efb0:	4659      	mov	r1, fp
 802efb2:	f7fd fa65 	bl	802c480 <__ssprint_r>
 802efb6:	2800      	cmp	r0, #0
 802efb8:	d155      	bne.n	802f066 <_svfprintf_r+0x12f6>
 802efba:	ae29      	add	r6, sp, #164	@ 0xa4
 802efbc:	e7c3      	b.n	802ef46 <_svfprintf_r+0x11d6>
 802efbe:	9b04      	ldr	r3, [sp, #16]
 802efc0:	2b01      	cmp	r3, #1
 802efc2:	dde1      	ble.n	802ef88 <_svfprintf_r+0x1218>
 802efc4:	4f57      	ldr	r7, [pc, #348]	@ (802f124 <_svfprintf_r+0x13b4>)
 802efc6:	f04f 0810 	mov.w	r8, #16
 802efca:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802efce:	2c10      	cmp	r4, #16
 802efd0:	f103 0301 	add.w	r3, r3, #1
 802efd4:	f106 0108 	add.w	r1, r6, #8
 802efd8:	6037      	str	r7, [r6, #0]
 802efda:	dc07      	bgt.n	802efec <_svfprintf_r+0x127c>
 802efdc:	6074      	str	r4, [r6, #4]
 802efde:	2b07      	cmp	r3, #7
 802efe0:	4414      	add	r4, r2
 802efe2:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 802efe6:	dcc7      	bgt.n	802ef78 <_svfprintf_r+0x1208>
 802efe8:	460e      	mov	r6, r1
 802efea:	e7cd      	b.n	802ef88 <_svfprintf_r+0x1218>
 802efec:	3210      	adds	r2, #16
 802efee:	2b07      	cmp	r3, #7
 802eff0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802eff4:	f8c6 8004 	str.w	r8, [r6, #4]
 802eff8:	dd06      	ble.n	802f008 <_svfprintf_r+0x1298>
 802effa:	9803      	ldr	r0, [sp, #12]
 802effc:	aa26      	add	r2, sp, #152	@ 0x98
 802effe:	4659      	mov	r1, fp
 802f000:	f7fd fa3e 	bl	802c480 <__ssprint_r>
 802f004:	bb78      	cbnz	r0, 802f066 <_svfprintf_r+0x12f6>
 802f006:	a929      	add	r1, sp, #164	@ 0xa4
 802f008:	3c10      	subs	r4, #16
 802f00a:	460e      	mov	r6, r1
 802f00c:	e7dd      	b.n	802efca <_svfprintf_r+0x125a>
 802f00e:	2101      	movs	r1, #1
 802f010:	2a07      	cmp	r2, #7
 802f012:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802f016:	f8c4 9000 	str.w	r9, [r4]
 802f01a:	6061      	str	r1, [r4, #4]
 802f01c:	ddb4      	ble.n	802ef88 <_svfprintf_r+0x1218>
 802f01e:	e7ab      	b.n	802ef78 <_svfprintf_r+0x1208>
 802f020:	3608      	adds	r6, #8
 802f022:	e7b1      	b.n	802ef88 <_svfprintf_r+0x1218>
 802f024:	460c      	mov	r4, r1
 802f026:	f7ff baad 	b.w	802e584 <_svfprintf_r+0x814>
 802f02a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802f02c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802f02e:	1a9d      	subs	r5, r3, r2
 802f030:	2d00      	cmp	r5, #0
 802f032:	f77f aaaa 	ble.w	802e58a <_svfprintf_r+0x81a>
 802f036:	4e3c      	ldr	r6, [pc, #240]	@ (802f128 <_svfprintf_r+0x13b8>)
 802f038:	2710      	movs	r7, #16
 802f03a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802f03e:	2d10      	cmp	r5, #16
 802f040:	f103 0301 	add.w	r3, r3, #1
 802f044:	6026      	str	r6, [r4, #0]
 802f046:	dc18      	bgt.n	802f07a <_svfprintf_r+0x130a>
 802f048:	442a      	add	r2, r5
 802f04a:	2b07      	cmp	r3, #7
 802f04c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802f050:	6065      	str	r5, [r4, #4]
 802f052:	f77f aa9a 	ble.w	802e58a <_svfprintf_r+0x81a>
 802f056:	9803      	ldr	r0, [sp, #12]
 802f058:	aa26      	add	r2, sp, #152	@ 0x98
 802f05a:	4659      	mov	r1, fp
 802f05c:	f7fd fa10 	bl	802c480 <__ssprint_r>
 802f060:	2800      	cmp	r0, #0
 802f062:	f43f aa92 	beq.w	802e58a <_svfprintf_r+0x81a>
 802f066:	f1ba 0f00 	cmp.w	sl, #0
 802f06a:	f43f a89a 	beq.w	802e1a2 <_svfprintf_r+0x432>
 802f06e:	9803      	ldr	r0, [sp, #12]
 802f070:	4651      	mov	r1, sl
 802f072:	f7fc fe43 	bl	802bcfc <_free_r>
 802f076:	f7ff b894 	b.w	802e1a2 <_svfprintf_r+0x432>
 802f07a:	3210      	adds	r2, #16
 802f07c:	2b07      	cmp	r3, #7
 802f07e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802f082:	6067      	str	r7, [r4, #4]
 802f084:	dc02      	bgt.n	802f08c <_svfprintf_r+0x131c>
 802f086:	3408      	adds	r4, #8
 802f088:	3d10      	subs	r5, #16
 802f08a:	e7d6      	b.n	802f03a <_svfprintf_r+0x12ca>
 802f08c:	9803      	ldr	r0, [sp, #12]
 802f08e:	aa26      	add	r2, sp, #152	@ 0x98
 802f090:	4659      	mov	r1, fp
 802f092:	f7fd f9f5 	bl	802c480 <__ssprint_r>
 802f096:	2800      	cmp	r0, #0
 802f098:	d1e5      	bne.n	802f066 <_svfprintf_r+0x12f6>
 802f09a:	ac29      	add	r4, sp, #164	@ 0xa4
 802f09c:	e7f4      	b.n	802f088 <_svfprintf_r+0x1318>
 802f09e:	9803      	ldr	r0, [sp, #12]
 802f0a0:	4651      	mov	r1, sl
 802f0a2:	f7fc fe2b 	bl	802bcfc <_free_r>
 802f0a6:	f7ff ba88 	b.w	802e5ba <_svfprintf_r+0x84a>
 802f0aa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802f0ac:	2b00      	cmp	r3, #0
 802f0ae:	f43f a878 	beq.w	802e1a2 <_svfprintf_r+0x432>
 802f0b2:	9803      	ldr	r0, [sp, #12]
 802f0b4:	aa26      	add	r2, sp, #152	@ 0x98
 802f0b6:	4659      	mov	r1, fp
 802f0b8:	f7fd f9e2 	bl	802c480 <__ssprint_r>
 802f0bc:	f7ff b871 	b.w	802e1a2 <_svfprintf_r+0x432>
 802f0c0:	ea56 0207 	orrs.w	r2, r6, r7
 802f0c4:	9508      	str	r5, [sp, #32]
 802f0c6:	f43f ab7a 	beq.w	802e7be <_svfprintf_r+0xa4e>
 802f0ca:	2b01      	cmp	r3, #1
 802f0cc:	f43f abfb 	beq.w	802e8c6 <_svfprintf_r+0xb56>
 802f0d0:	2b02      	cmp	r3, #2
 802f0d2:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 802f0d6:	f43f ac3f 	beq.w	802e958 <_svfprintf_r+0xbe8>
 802f0da:	f006 0307 	and.w	r3, r6, #7
 802f0de:	08f6      	lsrs	r6, r6, #3
 802f0e0:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802f0e4:	08ff      	lsrs	r7, r7, #3
 802f0e6:	3330      	adds	r3, #48	@ 0x30
 802f0e8:	ea56 0107 	orrs.w	r1, r6, r7
 802f0ec:	464a      	mov	r2, r9
 802f0ee:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802f0f2:	d1f2      	bne.n	802f0da <_svfprintf_r+0x136a>
 802f0f4:	9908      	ldr	r1, [sp, #32]
 802f0f6:	07c8      	lsls	r0, r1, #31
 802f0f8:	d506      	bpl.n	802f108 <_svfprintf_r+0x1398>
 802f0fa:	2b30      	cmp	r3, #48	@ 0x30
 802f0fc:	d004      	beq.n	802f108 <_svfprintf_r+0x1398>
 802f0fe:	2330      	movs	r3, #48	@ 0x30
 802f100:	f809 3c01 	strb.w	r3, [r9, #-1]
 802f104:	f1a2 0902 	sub.w	r9, r2, #2
 802f108:	ab52      	add	r3, sp, #328	@ 0x148
 802f10a:	9d08      	ldr	r5, [sp, #32]
 802f10c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 802f110:	f04f 0a00 	mov.w	sl, #0
 802f114:	eba3 0809 	sub.w	r8, r3, r9
 802f118:	4657      	mov	r7, sl
 802f11a:	f8cd a020 	str.w	sl, [sp, #32]
 802f11e:	4656      	mov	r6, sl
 802f120:	f7ff b97c 	b.w	802e41c <_svfprintf_r+0x6ac>
 802f124:	08038632 	.word	0x08038632
 802f128:	08038642 	.word	0x08038642

0802f12c <__swhatbuf_r>:
 802f12c:	b570      	push	{r4, r5, r6, lr}
 802f12e:	460c      	mov	r4, r1
 802f130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f134:	2900      	cmp	r1, #0
 802f136:	b096      	sub	sp, #88	@ 0x58
 802f138:	4615      	mov	r5, r2
 802f13a:	461e      	mov	r6, r3
 802f13c:	da07      	bge.n	802f14e <__swhatbuf_r+0x22>
 802f13e:	89a1      	ldrh	r1, [r4, #12]
 802f140:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 802f144:	d117      	bne.n	802f176 <__swhatbuf_r+0x4a>
 802f146:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802f14a:	4608      	mov	r0, r1
 802f14c:	e00f      	b.n	802f16e <__swhatbuf_r+0x42>
 802f14e:	466a      	mov	r2, sp
 802f150:	f003 f892 	bl	8032278 <_fstat_r>
 802f154:	2800      	cmp	r0, #0
 802f156:	dbf2      	blt.n	802f13e <__swhatbuf_r+0x12>
 802f158:	9901      	ldr	r1, [sp, #4]
 802f15a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802f15e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802f162:	4259      	negs	r1, r3
 802f164:	4159      	adcs	r1, r3
 802f166:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 802f16a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802f16e:	6031      	str	r1, [r6, #0]
 802f170:	602b      	str	r3, [r5, #0]
 802f172:	b016      	add	sp, #88	@ 0x58
 802f174:	bd70      	pop	{r4, r5, r6, pc}
 802f176:	2100      	movs	r1, #0
 802f178:	2340      	movs	r3, #64	@ 0x40
 802f17a:	e7e6      	b.n	802f14a <__swhatbuf_r+0x1e>

0802f17c <__smakebuf_r>:
 802f17c:	898b      	ldrh	r3, [r1, #12]
 802f17e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802f180:	079d      	lsls	r5, r3, #30
 802f182:	4606      	mov	r6, r0
 802f184:	460c      	mov	r4, r1
 802f186:	d507      	bpl.n	802f198 <__smakebuf_r+0x1c>
 802f188:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 802f18c:	6023      	str	r3, [r4, #0]
 802f18e:	6123      	str	r3, [r4, #16]
 802f190:	2301      	movs	r3, #1
 802f192:	6163      	str	r3, [r4, #20]
 802f194:	b003      	add	sp, #12
 802f196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802f198:	ab01      	add	r3, sp, #4
 802f19a:	466a      	mov	r2, sp
 802f19c:	f7ff ffc6 	bl	802f12c <__swhatbuf_r>
 802f1a0:	9f00      	ldr	r7, [sp, #0]
 802f1a2:	4605      	mov	r5, r0
 802f1a4:	4639      	mov	r1, r7
 802f1a6:	4630      	mov	r0, r6
 802f1a8:	f7fc fec0 	bl	802bf2c <_malloc_r>
 802f1ac:	b948      	cbnz	r0, 802f1c2 <__smakebuf_r+0x46>
 802f1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802f1b2:	059a      	lsls	r2, r3, #22
 802f1b4:	d4ee      	bmi.n	802f194 <__smakebuf_r+0x18>
 802f1b6:	f023 0303 	bic.w	r3, r3, #3
 802f1ba:	f043 0302 	orr.w	r3, r3, #2
 802f1be:	81a3      	strh	r3, [r4, #12]
 802f1c0:	e7e2      	b.n	802f188 <__smakebuf_r+0xc>
 802f1c2:	89a3      	ldrh	r3, [r4, #12]
 802f1c4:	6020      	str	r0, [r4, #0]
 802f1c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802f1ca:	81a3      	strh	r3, [r4, #12]
 802f1cc:	9b01      	ldr	r3, [sp, #4]
 802f1ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802f1d2:	b15b      	cbz	r3, 802f1ec <__smakebuf_r+0x70>
 802f1d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802f1d8:	4630      	mov	r0, r6
 802f1da:	f003 f85f 	bl	803229c <_isatty_r>
 802f1de:	b128      	cbz	r0, 802f1ec <__smakebuf_r+0x70>
 802f1e0:	89a3      	ldrh	r3, [r4, #12]
 802f1e2:	f023 0303 	bic.w	r3, r3, #3
 802f1e6:	f043 0301 	orr.w	r3, r3, #1
 802f1ea:	81a3      	strh	r3, [r4, #12]
 802f1ec:	89a3      	ldrh	r3, [r4, #12]
 802f1ee:	431d      	orrs	r5, r3
 802f1f0:	81a5      	strh	r5, [r4, #12]
 802f1f2:	e7cf      	b.n	802f194 <__smakebuf_r+0x18>

0802f1f4 <__ssvfscanf_r>:
 802f1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f1f8:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 802f1fc:	461d      	mov	r5, r3
 802f1fe:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 802f202:	af02      	add	r7, sp, #8
 802f204:	049e      	lsls	r6, r3, #18
 802f206:	62b8      	str	r0, [r7, #40]	@ 0x28
 802f208:	460c      	mov	r4, r1
 802f20a:	617a      	str	r2, [r7, #20]
 802f20c:	d406      	bmi.n	802f21c <__ssvfscanf_r+0x28>
 802f20e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802f212:	818b      	strh	r3, [r1, #12]
 802f214:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802f216:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802f21a:	664b      	str	r3, [r1, #100]	@ 0x64
 802f21c:	2300      	movs	r3, #0
 802f21e:	e9c7 3307 	strd	r3, r3, [r7, #28]
 802f222:	61bb      	str	r3, [r7, #24]
 802f224:	637b      	str	r3, [r7, #52]	@ 0x34
 802f226:	633b      	str	r3, [r7, #48]	@ 0x30
 802f228:	627b      	str	r3, [r7, #36]	@ 0x24
 802f22a:	f8d7 8014 	ldr.w	r8, [r7, #20]
 802f22e:	f818 3b01 	ldrb.w	r3, [r8], #1
 802f232:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802f234:	2b00      	cmp	r3, #0
 802f236:	f000 80d3 	beq.w	802f3e0 <__ssvfscanf_r+0x1ec>
 802f23a:	4a84      	ldr	r2, [pc, #528]	@ (802f44c <__ssvfscanf_r+0x258>)
 802f23c:	5cd6      	ldrb	r6, [r2, r3]
 802f23e:	f016 0608 	ands.w	r6, r6, #8
 802f242:	d01b      	beq.n	802f27c <__ssvfscanf_r+0x88>
 802f244:	6863      	ldr	r3, [r4, #4]
 802f246:	2b00      	cmp	r3, #0
 802f248:	dd08      	ble.n	802f25c <__ssvfscanf_r+0x68>
 802f24a:	6823      	ldr	r3, [r4, #0]
 802f24c:	497f      	ldr	r1, [pc, #508]	@ (802f44c <__ssvfscanf_r+0x258>)
 802f24e:	781a      	ldrb	r2, [r3, #0]
 802f250:	5c8a      	ldrb	r2, [r1, r2]
 802f252:	0710      	lsls	r0, r2, #28
 802f254:	d409      	bmi.n	802f26a <__ssvfscanf_r+0x76>
 802f256:	f8c7 8014 	str.w	r8, [r7, #20]
 802f25a:	e7e6      	b.n	802f22a <__ssvfscanf_r+0x36>
 802f25c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f25e:	4621      	mov	r1, r4
 802f260:	f7fd fe13 	bl	802ce8a <__ssrefill_r>
 802f264:	2800      	cmp	r0, #0
 802f266:	d0f0      	beq.n	802f24a <__ssvfscanf_r+0x56>
 802f268:	e7f5      	b.n	802f256 <__ssvfscanf_r+0x62>
 802f26a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802f26c:	3201      	adds	r2, #1
 802f26e:	633a      	str	r2, [r7, #48]	@ 0x30
 802f270:	6862      	ldr	r2, [r4, #4]
 802f272:	3301      	adds	r3, #1
 802f274:	3a01      	subs	r2, #1
 802f276:	6062      	str	r2, [r4, #4]
 802f278:	6023      	str	r3, [r4, #0]
 802f27a:	e7e3      	b.n	802f244 <__ssvfscanf_r+0x50>
 802f27c:	2b25      	cmp	r3, #37	@ 0x25
 802f27e:	d163      	bne.n	802f348 <__ssvfscanf_r+0x154>
 802f280:	62fe      	str	r6, [r7, #44]	@ 0x2c
 802f282:	4642      	mov	r2, r8
 802f284:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f288:	617a      	str	r2, [r7, #20]
 802f28a:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 802f28e:	2a55      	cmp	r2, #85	@ 0x55
 802f290:	f200 816e 	bhi.w	802f570 <__ssvfscanf_r+0x37c>
 802f294:	e8df f012 	tbh	[pc, r2, lsl #1]
 802f298:	016c0056 	.word	0x016c0056
 802f29c:	016c016c 	.word	0x016c016c
 802f2a0:	007d016c 	.word	0x007d016c
 802f2a4:	016c016c 	.word	0x016c016c
 802f2a8:	016c016c 	.word	0x016c016c
 802f2ac:	00b9016c 	.word	0x00b9016c
 802f2b0:	00b900b9 	.word	0x00b900b9
 802f2b4:	00b900b9 	.word	0x00b900b9
 802f2b8:	00b900b9 	.word	0x00b900b9
 802f2bc:	00b900b9 	.word	0x00b900b9
 802f2c0:	016c00b9 	.word	0x016c00b9
 802f2c4:	016c016c 	.word	0x016c016c
 802f2c8:	016c016c 	.word	0x016c016c
 802f2cc:	016c016c 	.word	0x016c016c
 802f2d0:	016c00e0 	.word	0x016c00e0
 802f2d4:	00c3010a 	.word	0x00c3010a
 802f2d8:	00e000e0 	.word	0x00e000e0
 802f2dc:	016c00e0 	.word	0x016c00e0
 802f2e0:	016c016c 	.word	0x016c016c
 802f2e4:	00a2016c 	.word	0x00a2016c
 802f2e8:	016c016c 	.word	0x016c016c
 802f2ec:	016c00c7 	.word	0x016c00c7
 802f2f0:	016c016c 	.word	0x016c016c
 802f2f4:	016c00fa 	.word	0x016c00fa
 802f2f8:	016c016c 	.word	0x016c016c
 802f2fc:	00d4016c 	.word	0x00d4016c
 802f300:	016c016c 	.word	0x016c016c
 802f304:	016c00ff 	.word	0x016c00ff
 802f308:	016c016c 	.word	0x016c016c
 802f30c:	016c016c 	.word	0x016c016c
 802f310:	016c00e0 	.word	0x016c00e0
 802f314:	00c5010c 	.word	0x00c5010c
 802f318:	00e000e0 	.word	0x00e000e0
 802f31c:	009400e0 	.word	0x009400e0
 802f320:	00a20130 	.word	0x00a20130
 802f324:	0085016c 	.word	0x0085016c
 802f328:	011400ac 	.word	0x011400ac
 802f32c:	011100c9 	.word	0x011100c9
 802f330:	016c016c 	.word	0x016c016c
 802f334:	00a900fc 	.word	0x00a900fc
 802f338:	016c00d0 	.word	0x016c00d0
 802f33c:	00d4016c 	.word	0x00d4016c
 802f340:	00a9016c 	.word	0x00a9016c
 802f344:	f8d7 8014 	ldr.w	r8, [r7, #20]
 802f348:	6863      	ldr	r3, [r4, #4]
 802f34a:	2b00      	cmp	r3, #0
 802f34c:	dd0e      	ble.n	802f36c <__ssvfscanf_r+0x178>
 802f34e:	6823      	ldr	r3, [r4, #0]
 802f350:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 802f354:	7819      	ldrb	r1, [r3, #0]
 802f356:	4291      	cmp	r1, r2
 802f358:	d142      	bne.n	802f3e0 <__ssvfscanf_r+0x1ec>
 802f35a:	3301      	adds	r3, #1
 802f35c:	6862      	ldr	r2, [r4, #4]
 802f35e:	6023      	str	r3, [r4, #0]
 802f360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802f362:	3a01      	subs	r2, #1
 802f364:	3301      	adds	r3, #1
 802f366:	6062      	str	r2, [r4, #4]
 802f368:	633b      	str	r3, [r7, #48]	@ 0x30
 802f36a:	e774      	b.n	802f256 <__ssvfscanf_r+0x62>
 802f36c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f36e:	4621      	mov	r1, r4
 802f370:	f7fd fd8b 	bl	802ce8a <__ssrefill_r>
 802f374:	2800      	cmp	r0, #0
 802f376:	d0ea      	beq.n	802f34e <__ssvfscanf_r+0x15a>
 802f378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f37a:	b113      	cbz	r3, 802f382 <__ssvfscanf_r+0x18e>
 802f37c:	89a3      	ldrh	r3, [r4, #12]
 802f37e:	065b      	lsls	r3, r3, #25
 802f380:	d52e      	bpl.n	802f3e0 <__ssvfscanf_r+0x1ec>
 802f382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f384:	2b00      	cmp	r3, #0
 802f386:	f041 809d 	bne.w	80304c4 <__ssvfscanf_r+0x12d0>
 802f38a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802f38e:	627b      	str	r3, [r7, #36]	@ 0x24
 802f390:	e0f9      	b.n	802f586 <__ssvfscanf_r+0x392>
 802f392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802f394:	4333      	orrs	r3, r6
 802f396:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f398:	d122      	bne.n	802f3e0 <__ssvfscanf_r+0x1ec>
 802f39a:	2610      	movs	r6, #16
 802f39c:	f8d7 8014 	ldr.w	r8, [r7, #20]
 802f3a0:	e76f      	b.n	802f282 <__ssvfscanf_r+0x8e>
 802f3a2:	0731      	lsls	r1, r6, #28
 802f3a4:	d11c      	bne.n	802f3e0 <__ssvfscanf_r+0x1ec>
 802f3a6:	f898 3001 	ldrb.w	r3, [r8, #1]
 802f3aa:	2b6c      	cmp	r3, #108	@ 0x6c
 802f3ac:	d105      	bne.n	802f3ba <__ssvfscanf_r+0x1c6>
 802f3ae:	f108 0302 	add.w	r3, r8, #2
 802f3b2:	617b      	str	r3, [r7, #20]
 802f3b4:	f046 0602 	orr.w	r6, r6, #2
 802f3b8:	e7f0      	b.n	802f39c <__ssvfscanf_r+0x1a8>
 802f3ba:	f046 0601 	orr.w	r6, r6, #1
 802f3be:	e7ed      	b.n	802f39c <__ssvfscanf_r+0x1a8>
 802f3c0:	0732      	lsls	r2, r6, #28
 802f3c2:	d10d      	bne.n	802f3e0 <__ssvfscanf_r+0x1ec>
 802f3c4:	f898 3001 	ldrb.w	r3, [r8, #1]
 802f3c8:	2b68      	cmp	r3, #104	@ 0x68
 802f3ca:	bf03      	ittte	eq
 802f3cc:	f108 0302 	addeq.w	r3, r8, #2
 802f3d0:	617b      	streq	r3, [r7, #20]
 802f3d2:	f046 0608 	orreq.w	r6, r6, #8
 802f3d6:	f046 0604 	orrne.w	r6, r6, #4
 802f3da:	e7df      	b.n	802f39c <__ssvfscanf_r+0x1a8>
 802f3dc:	0733      	lsls	r3, r6, #28
 802f3de:	d0e9      	beq.n	802f3b4 <__ssvfscanf_r+0x1c0>
 802f3e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f3e2:	2b00      	cmp	r3, #0
 802f3e4:	f000 80cf 	beq.w	802f586 <__ssvfscanf_r+0x392>
 802f3e8:	e0c8      	b.n	802f57c <__ssvfscanf_r+0x388>
 802f3ea:	0730      	lsls	r0, r6, #28
 802f3ec:	d0d6      	beq.n	802f39c <__ssvfscanf_r+0x1a8>
 802f3ee:	e7f7      	b.n	802f3e0 <__ssvfscanf_r+0x1ec>
 802f3f0:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 802f3f4:	d1f4      	bne.n	802f3e0 <__ssvfscanf_r+0x1ec>
 802f3f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802f3f8:	b922      	cbnz	r2, 802f404 <__ssvfscanf_r+0x210>
 802f3fa:	b082      	sub	sp, #8
 802f3fc:	aa02      	add	r2, sp, #8
 802f3fe:	e9c2 3300 	strd	r3, r3, [r2]
 802f402:	637a      	str	r2, [r7, #52]	@ 0x34
 802f404:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 802f408:	e7c8      	b.n	802f39c <__ssvfscanf_r+0x1a8>
 802f40a:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 802f40e:	d1e7      	bne.n	802f3e0 <__ssvfscanf_r+0x1ec>
 802f410:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802f412:	220a      	movs	r2, #10
 802f414:	fb02 3301 	mla	r3, r2, r1, r3
 802f418:	3b30      	subs	r3, #48	@ 0x30
 802f41a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f41c:	e7be      	b.n	802f39c <__ssvfscanf_r+0x1a8>
 802f41e:	f046 0601 	orr.w	r6, r6, #1
 802f422:	4b0b      	ldr	r3, [pc, #44]	@ (802f450 <__ssvfscanf_r+0x25c>)
 802f424:	e009      	b.n	802f43a <__ssvfscanf_r+0x246>
 802f426:	f046 0601 	orr.w	r6, r6, #1
 802f42a:	4b0a      	ldr	r3, [pc, #40]	@ (802f454 <__ssvfscanf_r+0x260>)
 802f42c:	61bb      	str	r3, [r7, #24]
 802f42e:	2308      	movs	r3, #8
 802f430:	61fb      	str	r3, [r7, #28]
 802f432:	f04f 0803 	mov.w	r8, #3
 802f436:	e011      	b.n	802f45c <__ssvfscanf_r+0x268>
 802f438:	4b06      	ldr	r3, [pc, #24]	@ (802f454 <__ssvfscanf_r+0x260>)
 802f43a:	61bb      	str	r3, [r7, #24]
 802f43c:	230a      	movs	r3, #10
 802f43e:	e7f7      	b.n	802f430 <__ssvfscanf_r+0x23c>
 802f440:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 802f444:	4b03      	ldr	r3, [pc, #12]	@ (802f454 <__ssvfscanf_r+0x260>)
 802f446:	61bb      	str	r3, [r7, #24]
 802f448:	2310      	movs	r3, #16
 802f44a:	e7f1      	b.n	802f430 <__ssvfscanf_r+0x23c>
 802f44c:	08038479 	.word	0x08038479
 802f450:	08029189 	.word	0x08029189
 802f454:	08031f89 	.word	0x08031f89
 802f458:	f04f 0804 	mov.w	r8, #4
 802f45c:	6863      	ldr	r3, [r4, #4]
 802f45e:	2b00      	cmp	r3, #0
 802f460:	dd4e      	ble.n	802f500 <__ssvfscanf_r+0x30c>
 802f462:	0673      	lsls	r3, r6, #25
 802f464:	d407      	bmi.n	802f476 <__ssvfscanf_r+0x282>
 802f466:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 802f764 <__ssvfscanf_r+0x570>
 802f46a:	6823      	ldr	r3, [r4, #0]
 802f46c:	781a      	ldrb	r2, [r3, #0]
 802f46e:	f819 2002 	ldrb.w	r2, [r9, r2]
 802f472:	0710      	lsls	r0, r2, #28
 802f474:	d44b      	bmi.n	802f50e <__ssvfscanf_r+0x31a>
 802f476:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802f47a:	f1b8 0f03 	cmp.w	r8, #3
 802f47e:	d858      	bhi.n	802f532 <__ssvfscanf_r+0x33e>
 802f480:	e8df f018 	tbh	[pc, r8, lsl #1]
 802f484:	037801c1 	.word	0x037801c1
 802f488:	05f30514 	.word	0x05f30514
 802f48c:	f046 0601 	orr.w	r6, r6, #1
 802f490:	f04f 0802 	mov.w	r8, #2
 802f494:	e7e2      	b.n	802f45c <__ssvfscanf_r+0x268>
 802f496:	6979      	ldr	r1, [r7, #20]
 802f498:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 802f49c:	f001 fd1d 	bl	8030eda <__sccl>
 802f4a0:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802f4a4:	6178      	str	r0, [r7, #20]
 802f4a6:	f04f 0801 	mov.w	r8, #1
 802f4aa:	e7d7      	b.n	802f45c <__ssvfscanf_r+0x268>
 802f4ac:	f046 0601 	orr.w	r6, r6, #1
 802f4b0:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802f4b4:	f04f 0800 	mov.w	r8, #0
 802f4b8:	e7d0      	b.n	802f45c <__ssvfscanf_r+0x268>
 802f4ba:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 802f4be:	e7c1      	b.n	802f444 <__ssvfscanf_r+0x250>
 802f4c0:	06f1      	lsls	r1, r6, #27
 802f4c2:	f53f aeb2 	bmi.w	802f22a <__ssvfscanf_r+0x36>
 802f4c6:	0732      	lsls	r2, r6, #28
 802f4c8:	f855 3b04 	ldr.w	r3, [r5], #4
 802f4cc:	d502      	bpl.n	802f4d4 <__ssvfscanf_r+0x2e0>
 802f4ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802f4d0:	701a      	strb	r2, [r3, #0]
 802f4d2:	e6aa      	b.n	802f22a <__ssvfscanf_r+0x36>
 802f4d4:	0770      	lsls	r0, r6, #29
 802f4d6:	d502      	bpl.n	802f4de <__ssvfscanf_r+0x2ea>
 802f4d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802f4da:	801a      	strh	r2, [r3, #0]
 802f4dc:	e6a5      	b.n	802f22a <__ssvfscanf_r+0x36>
 802f4de:	07f1      	lsls	r1, r6, #31
 802f4e0:	d502      	bpl.n	802f4e8 <__ssvfscanf_r+0x2f4>
 802f4e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802f4e4:	601a      	str	r2, [r3, #0]
 802f4e6:	e6a0      	b.n	802f22a <__ssvfscanf_r+0x36>
 802f4e8:	07b2      	lsls	r2, r6, #30
 802f4ea:	d5fa      	bpl.n	802f4e2 <__ssvfscanf_r+0x2ee>
 802f4ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802f4ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 802f4f0:	17d2      	asrs	r2, r2, #31
 802f4f2:	e9c3 1200 	strd	r1, r2, [r3]
 802f4f6:	e698      	b.n	802f22a <__ssvfscanf_r+0x36>
 802f4f8:	4b99      	ldr	r3, [pc, #612]	@ (802f760 <__ssvfscanf_r+0x56c>)
 802f4fa:	61bb      	str	r3, [r7, #24]
 802f4fc:	2300      	movs	r3, #0
 802f4fe:	e797      	b.n	802f430 <__ssvfscanf_r+0x23c>
 802f500:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f502:	4621      	mov	r1, r4
 802f504:	f7fd fcc1 	bl	802ce8a <__ssrefill_r>
 802f508:	2800      	cmp	r0, #0
 802f50a:	d0aa      	beq.n	802f462 <__ssvfscanf_r+0x26e>
 802f50c:	e734      	b.n	802f378 <__ssvfscanf_r+0x184>
 802f50e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802f510:	3201      	adds	r2, #1
 802f512:	633a      	str	r2, [r7, #48]	@ 0x30
 802f514:	6862      	ldr	r2, [r4, #4]
 802f516:	3a01      	subs	r2, #1
 802f518:	2a00      	cmp	r2, #0
 802f51a:	6062      	str	r2, [r4, #4]
 802f51c:	dd02      	ble.n	802f524 <__ssvfscanf_r+0x330>
 802f51e:	3301      	adds	r3, #1
 802f520:	6023      	str	r3, [r4, #0]
 802f522:	e7a2      	b.n	802f46a <__ssvfscanf_r+0x276>
 802f524:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f526:	4621      	mov	r1, r4
 802f528:	f7fd fcaf 	bl	802ce8a <__ssrefill_r>
 802f52c:	2800      	cmp	r0, #0
 802f52e:	d09c      	beq.n	802f46a <__ssvfscanf_r+0x276>
 802f530:	e722      	b.n	802f378 <__ssvfscanf_r+0x184>
 802f532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802f534:	2b01      	cmp	r3, #1
 802f536:	bf38      	it	cc
 802f538:	2301      	movcc	r3, #1
 802f53a:	4698      	mov	r8, r3
 802f53c:	f016 0301 	ands.w	r3, r6, #1
 802f540:	f006 0b10 	and.w	fp, r6, #16
 802f544:	f000 80eb 	beq.w	802f71e <__ssvfscanf_r+0x52a>
 802f548:	f1bb 0f00 	cmp.w	fp, #0
 802f54c:	f040 8085 	bne.w	802f65a <__ssvfscanf_r+0x466>
 802f550:	462b      	mov	r3, r5
 802f552:	0631      	lsls	r1, r6, #24
 802f554:	f853 5b04 	ldr.w	r5, [r3], #4
 802f558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f55a:	f140 8085 	bpl.w	802f668 <__ssvfscanf_r+0x474>
 802f55e:	b13d      	cbz	r5, 802f570 <__ssvfscanf_r+0x37c>
 802f560:	2080      	movs	r0, #128	@ 0x80
 802f562:	f7fc fcd3 	bl	802bf0c <malloc>
 802f566:	4606      	mov	r6, r0
 802f568:	b998      	cbnz	r0, 802f592 <__ssvfscanf_r+0x39e>
 802f56a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802f56e:	627b      	str	r3, [r7, #36]	@ 0x24
 802f570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f572:	b143      	cbz	r3, 802f586 <__ssvfscanf_r+0x392>
 802f574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f576:	3301      	adds	r3, #1
 802f578:	f000 87a4 	beq.w	80304c4 <__ssvfscanf_r+0x12d0>
 802f57c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f57e:	6818      	ldr	r0, [r3, #0]
 802f580:	b108      	cbz	r0, 802f586 <__ssvfscanf_r+0x392>
 802f582:	f7fc fccb 	bl	802bf1c <free>
 802f586:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f588:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 802f58c:	46bd      	mov	sp, r7
 802f58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f594:	6028      	str	r0, [r5, #0]
 802f596:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 802f59a:	889b      	ldrh	r3, [r3, #4]
 802f59c:	4599      	cmp	r9, r3
 802f59e:	d314      	bcc.n	802f5ca <__ssvfscanf_r+0x3d6>
 802f5a0:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802f5a4:	4293      	cmp	r3, r2
 802f5a6:	f200 878d 	bhi.w	80304c4 <__ssvfscanf_r+0x12d0>
 802f5aa:	3308      	adds	r3, #8
 802f5ac:	fa1f fa83 	uxth.w	sl, r3
 802f5b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f5b2:	ea4f 018a 	mov.w	r1, sl, lsl #2
 802f5b6:	6818      	ldr	r0, [r3, #0]
 802f5b8:	f001 fc32 	bl	8030e20 <realloc>
 802f5bc:	2800      	cmp	r0, #0
 802f5be:	f000 8781 	beq.w	80304c4 <__ssvfscanf_r+0x12d0>
 802f5c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f5c4:	6018      	str	r0, [r3, #0]
 802f5c6:	f8a3 a004 	strh.w	sl, [r3, #4]
 802f5ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f5cc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802f5ce:	681b      	ldr	r3, [r3, #0]
 802f5d0:	f109 0201 	add.w	r2, r9, #1
 802f5d4:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802f5d8:	46aa      	mov	sl, r5
 802f5da:	80ca      	strh	r2, [r1, #6]
 802f5dc:	4635      	mov	r5, r6
 802f5de:	f04f 0920 	mov.w	r9, #32
 802f5e2:	2200      	movs	r2, #0
 802f5e4:	613a      	str	r2, [r7, #16]
 802f5e6:	f7fb fbd3 	bl	802ad90 <__locale_mb_cur_max>
 802f5ea:	693a      	ldr	r2, [r7, #16]
 802f5ec:	4290      	cmp	r0, r2
 802f5ee:	f43f aec3 	beq.w	802f378 <__ssvfscanf_r+0x184>
 802f5f2:	6821      	ldr	r1, [r4, #0]
 802f5f4:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 802f5f8:	f811 0b01 	ldrb.w	r0, [r1], #1
 802f5fc:	f80c 0002 	strb.w	r0, [ip, r2]
 802f600:	1c53      	adds	r3, r2, #1
 802f602:	6862      	ldr	r2, [r4, #4]
 802f604:	3a01      	subs	r2, #1
 802f606:	e9c4 1200 	strd	r1, r2, [r4]
 802f60a:	6a3a      	ldr	r2, [r7, #32]
 802f60c:	2a03      	cmp	r2, #3
 802f60e:	d102      	bne.n	802f616 <__ssvfscanf_r+0x422>
 802f610:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802f612:	2a04      	cmp	r2, #4
 802f614:	d007      	beq.n	802f626 <__ssvfscanf_r+0x432>
 802f616:	2208      	movs	r2, #8
 802f618:	2100      	movs	r1, #0
 802f61a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 802f61e:	623b      	str	r3, [r7, #32]
 802f620:	f7fa fa2e 	bl	8029a80 <memset>
 802f624:	6a3b      	ldr	r3, [r7, #32]
 802f626:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802f62a:	9200      	str	r2, [sp, #0]
 802f62c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f62e:	613b      	str	r3, [r7, #16]
 802f630:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 802f634:	4629      	mov	r1, r5
 802f636:	f002 ffad 	bl	8032594 <_mbrtowc_r>
 802f63a:	1c42      	adds	r2, r0, #1
 802f63c:	6238      	str	r0, [r7, #32]
 802f63e:	f43f ae9b 	beq.w	802f378 <__ssvfscanf_r+0x184>
 802f642:	693b      	ldr	r3, [r7, #16]
 802f644:	b9b8      	cbnz	r0, 802f676 <__ssvfscanf_r+0x482>
 802f646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802f648:	441a      	add	r2, r3
 802f64a:	4613      	mov	r3, r2
 802f64c:	f1bb 0f00 	cmp.w	fp, #0
 802f650:	d00e      	beq.n	802f670 <__ssvfscanf_r+0x47c>
 802f652:	633b      	str	r3, [r7, #48]	@ 0x30
 802f654:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802f658:	e019      	b.n	802f68e <__ssvfscanf_r+0x49a>
 802f65a:	f04f 0900 	mov.w	r9, #0
 802f65e:	62fd      	str	r5, [r7, #44]	@ 0x2c
 802f660:	464e      	mov	r6, r9
 802f662:	46ca      	mov	sl, r9
 802f664:	464d      	mov	r5, r9
 802f666:	e7bc      	b.n	802f5e2 <__ssvfscanf_r+0x3ee>
 802f668:	46d9      	mov	r9, fp
 802f66a:	465e      	mov	r6, fp
 802f66c:	46da      	mov	sl, fp
 802f66e:	e7b8      	b.n	802f5e2 <__ssvfscanf_r+0x3ee>
 802f670:	f8c5 b000 	str.w	fp, [r5]
 802f674:	e7ed      	b.n	802f652 <__ssvfscanf_r+0x45e>
 802f676:	6a3a      	ldr	r2, [r7, #32]
 802f678:	3202      	adds	r2, #2
 802f67a:	d025      	beq.n	802f6c8 <__ssvfscanf_r+0x4d4>
 802f67c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802f67e:	441a      	add	r2, r3
 802f680:	6a3b      	ldr	r3, [r7, #32]
 802f682:	633a      	str	r2, [r7, #48]	@ 0x30
 802f684:	2b03      	cmp	r3, #3
 802f686:	d1e5      	bne.n	802f654 <__ssvfscanf_r+0x460>
 802f688:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802f68a:	2b04      	cmp	r3, #4
 802f68c:	d1e2      	bne.n	802f654 <__ssvfscanf_r+0x460>
 802f68e:	f1bb 0f00 	cmp.w	fp, #0
 802f692:	d117      	bne.n	802f6c4 <__ssvfscanf_r+0x4d0>
 802f694:	f1ba 0f00 	cmp.w	sl, #0
 802f698:	d013      	beq.n	802f6c2 <__ssvfscanf_r+0x4ce>
 802f69a:	1bab      	subs	r3, r5, r6
 802f69c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 802f6a0:	d80f      	bhi.n	802f6c2 <__ssvfscanf_r+0x4ce>
 802f6a2:	4630      	mov	r0, r6
 802f6a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802f6a8:	613b      	str	r3, [r7, #16]
 802f6aa:	f001 fbb9 	bl	8030e20 <realloc>
 802f6ae:	4606      	mov	r6, r0
 802f6b0:	2800      	cmp	r0, #0
 802f6b2:	f43f af5a 	beq.w	802f56a <__ssvfscanf_r+0x376>
 802f6b6:	693b      	ldr	r3, [r7, #16]
 802f6b8:	f8ca 0000 	str.w	r0, [sl]
 802f6bc:	18c5      	adds	r5, r0, r3
 802f6be:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802f6c2:	3504      	adds	r5, #4
 802f6c4:	2200      	movs	r2, #0
 802f6c6:	e000      	b.n	802f6ca <__ssvfscanf_r+0x4d6>
 802f6c8:	461a      	mov	r2, r3
 802f6ca:	6863      	ldr	r3, [r4, #4]
 802f6cc:	2b00      	cmp	r3, #0
 802f6ce:	dc14      	bgt.n	802f6fa <__ssvfscanf_r+0x506>
 802f6d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f6d2:	613a      	str	r2, [r7, #16]
 802f6d4:	4621      	mov	r1, r4
 802f6d6:	f7fd fbd8 	bl	802ce8a <__ssrefill_r>
 802f6da:	693a      	ldr	r2, [r7, #16]
 802f6dc:	b168      	cbz	r0, 802f6fa <__ssvfscanf_r+0x506>
 802f6de:	2a00      	cmp	r2, #0
 802f6e0:	f47f ae4a 	bne.w	802f378 <__ssvfscanf_r+0x184>
 802f6e4:	f1ba 0f00 	cmp.w	sl, #0
 802f6e8:	d10c      	bne.n	802f704 <__ssvfscanf_r+0x510>
 802f6ea:	f1bb 0f00 	cmp.w	fp, #0
 802f6ee:	d102      	bne.n	802f6f6 <__ssvfscanf_r+0x502>
 802f6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f6f2:	3301      	adds	r3, #1
 802f6f4:	627b      	str	r3, [r7, #36]	@ 0x24
 802f6f6:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 802f6f8:	e597      	b.n	802f22a <__ssvfscanf_r+0x36>
 802f6fa:	f1b8 0f00 	cmp.w	r8, #0
 802f6fe:	f47f af71 	bne.w	802f5e4 <__ssvfscanf_r+0x3f0>
 802f702:	e7ef      	b.n	802f6e4 <__ssvfscanf_r+0x4f0>
 802f704:	1ba9      	subs	r1, r5, r6
 802f706:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 802f70a:	d9ee      	bls.n	802f6ea <__ssvfscanf_r+0x4f6>
 802f70c:	f8da 0000 	ldr.w	r0, [sl]
 802f710:	f001 fb86 	bl	8030e20 <realloc>
 802f714:	2800      	cmp	r0, #0
 802f716:	d0e8      	beq.n	802f6ea <__ssvfscanf_r+0x4f6>
 802f718:	f8ca 0000 	str.w	r0, [sl]
 802f71c:	e7e5      	b.n	802f6ea <__ssvfscanf_r+0x4f6>
 802f71e:	f1bb 0f00 	cmp.w	fp, #0
 802f722:	d021      	beq.n	802f768 <__ssvfscanf_r+0x574>
 802f724:	461e      	mov	r6, r3
 802f726:	e9d4 2300 	ldrd	r2, r3, [r4]
 802f72a:	4598      	cmp	r8, r3
 802f72c:	dd11      	ble.n	802f752 <__ssvfscanf_r+0x55e>
 802f72e:	441a      	add	r2, r3
 802f730:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f732:	6022      	str	r2, [r4, #0]
 802f734:	4621      	mov	r1, r4
 802f736:	441e      	add	r6, r3
 802f738:	eba8 0803 	sub.w	r8, r8, r3
 802f73c:	f7fd fba5 	bl	802ce8a <__ssrefill_r>
 802f740:	2800      	cmp	r0, #0
 802f742:	d0f0      	beq.n	802f726 <__ssvfscanf_r+0x532>
 802f744:	2e00      	cmp	r6, #0
 802f746:	f43f ae17 	beq.w	802f378 <__ssvfscanf_r+0x184>
 802f74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802f74c:	4433      	add	r3, r6
 802f74e:	633b      	str	r3, [r7, #48]	@ 0x30
 802f750:	e56b      	b.n	802f22a <__ssvfscanf_r+0x36>
 802f752:	eba3 0308 	sub.w	r3, r3, r8
 802f756:	4442      	add	r2, r8
 802f758:	4446      	add	r6, r8
 802f75a:	6063      	str	r3, [r4, #4]
 802f75c:	6022      	str	r2, [r4, #0]
 802f75e:	e7f4      	b.n	802f74a <__ssvfscanf_r+0x556>
 802f760:	08029189 	.word	0x08029189
 802f764:	08038479 	.word	0x08038479
 802f768:	46a9      	mov	r9, r5
 802f76a:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802f76e:	f859 5b04 	ldr.w	r5, [r9], #4
 802f772:	d02c      	beq.n	802f7ce <__ssvfscanf_r+0x5da>
 802f774:	2d00      	cmp	r5, #0
 802f776:	f43f ae33 	beq.w	802f3e0 <__ssvfscanf_r+0x1ec>
 802f77a:	4640      	mov	r0, r8
 802f77c:	f7fc fbc6 	bl	802bf0c <malloc>
 802f780:	4682      	mov	sl, r0
 802f782:	2800      	cmp	r0, #0
 802f784:	f43f adfd 	beq.w	802f382 <__ssvfscanf_r+0x18e>
 802f788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f78a:	6028      	str	r0, [r5, #0]
 802f78c:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 802f790:	889e      	ldrh	r6, [r3, #4]
 802f792:	45b3      	cmp	fp, r6
 802f794:	d311      	bcc.n	802f7ba <__ssvfscanf_r+0x5c6>
 802f796:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802f79a:	429e      	cmp	r6, r3
 802f79c:	f200 8692 	bhi.w	80304c4 <__ssvfscanf_r+0x12d0>
 802f7a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f7a2:	3608      	adds	r6, #8
 802f7a4:	b2b6      	uxth	r6, r6
 802f7a6:	6818      	ldr	r0, [r3, #0]
 802f7a8:	00b1      	lsls	r1, r6, #2
 802f7aa:	f001 fb39 	bl	8030e20 <realloc>
 802f7ae:	2800      	cmp	r0, #0
 802f7b0:	f000 8688 	beq.w	80304c4 <__ssvfscanf_r+0x12d0>
 802f7b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f7b6:	6018      	str	r0, [r3, #0]
 802f7b8:	809e      	strh	r6, [r3, #4]
 802f7ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f7bc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802f7be:	681b      	ldr	r3, [r3, #0]
 802f7c0:	f10b 0201 	add.w	r2, fp, #1
 802f7c4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 802f7c8:	462e      	mov	r6, r5
 802f7ca:	80ca      	strh	r2, [r1, #6]
 802f7cc:	4655      	mov	r5, sl
 802f7ce:	9400      	str	r4, [sp, #0]
 802f7d0:	4629      	mov	r1, r5
 802f7d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f7d4:	4643      	mov	r3, r8
 802f7d6:	2201      	movs	r2, #1
 802f7d8:	f7fd fb74 	bl	802cec4 <_sfread_r>
 802f7dc:	4605      	mov	r5, r0
 802f7de:	2800      	cmp	r0, #0
 802f7e0:	f43f adca 	beq.w	802f378 <__ssvfscanf_r+0x184>
 802f7e4:	b13e      	cbz	r6, 802f7f6 <__ssvfscanf_r+0x602>
 802f7e6:	4580      	cmp	r8, r0
 802f7e8:	d905      	bls.n	802f7f6 <__ssvfscanf_r+0x602>
 802f7ea:	4601      	mov	r1, r0
 802f7ec:	6830      	ldr	r0, [r6, #0]
 802f7ee:	f001 fb17 	bl	8030e20 <realloc>
 802f7f2:	b100      	cbz	r0, 802f7f6 <__ssvfscanf_r+0x602>
 802f7f4:	6030      	str	r0, [r6, #0]
 802f7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802f7f8:	442b      	add	r3, r5
 802f7fa:	633b      	str	r3, [r7, #48]	@ 0x30
 802f7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f7fe:	3301      	adds	r3, #1
 802f800:	627b      	str	r3, [r7, #36]	@ 0x24
 802f802:	464d      	mov	r5, r9
 802f804:	e511      	b.n	802f22a <__ssvfscanf_r+0x36>
 802f806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802f808:	2b00      	cmp	r3, #0
 802f80a:	bf08      	it	eq
 802f80c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802f810:	f016 0801 	ands.w	r8, r6, #1
 802f814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f816:	f006 0a10 	and.w	sl, r6, #16
 802f81a:	f000 8101 	beq.w	802fa20 <__ssvfscanf_r+0x82c>
 802f81e:	f1ba 0f00 	cmp.w	sl, #0
 802f822:	f040 80a4 	bne.w	802f96e <__ssvfscanf_r+0x77a>
 802f826:	462b      	mov	r3, r5
 802f828:	f853 5b04 	ldr.w	r5, [r3], #4
 802f82c:	60fb      	str	r3, [r7, #12]
 802f82e:	0633      	lsls	r3, r6, #24
 802f830:	f140 80a5 	bpl.w	802f97e <__ssvfscanf_r+0x78a>
 802f834:	2d00      	cmp	r5, #0
 802f836:	f43f ae9b 	beq.w	802f570 <__ssvfscanf_r+0x37c>
 802f83a:	2080      	movs	r0, #128	@ 0x80
 802f83c:	f7fc fb66 	bl	802bf0c <malloc>
 802f840:	4680      	mov	r8, r0
 802f842:	2800      	cmp	r0, #0
 802f844:	f43f ae91 	beq.w	802f56a <__ssvfscanf_r+0x376>
 802f848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f84a:	6028      	str	r0, [r5, #0]
 802f84c:	88de      	ldrh	r6, [r3, #6]
 802f84e:	889b      	ldrh	r3, [r3, #4]
 802f850:	429e      	cmp	r6, r3
 802f852:	d314      	bcc.n	802f87e <__ssvfscanf_r+0x68a>
 802f854:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802f858:	4293      	cmp	r3, r2
 802f85a:	f200 8633 	bhi.w	80304c4 <__ssvfscanf_r+0x12d0>
 802f85e:	3308      	adds	r3, #8
 802f860:	fa1f f983 	uxth.w	r9, r3
 802f864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f866:	ea4f 0189 	mov.w	r1, r9, lsl #2
 802f86a:	6818      	ldr	r0, [r3, #0]
 802f86c:	f001 fad8 	bl	8030e20 <realloc>
 802f870:	2800      	cmp	r0, #0
 802f872:	f000 8627 	beq.w	80304c4 <__ssvfscanf_r+0x12d0>
 802f876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f878:	6018      	str	r0, [r3, #0]
 802f87a:	f8a3 9004 	strh.w	r9, [r3, #4]
 802f87e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f880:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802f882:	681b      	ldr	r3, [r3, #0]
 802f884:	1c72      	adds	r2, r6, #1
 802f886:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 802f88a:	46ab      	mov	fp, r5
 802f88c:	80ca      	strh	r2, [r1, #6]
 802f88e:	4645      	mov	r5, r8
 802f890:	f04f 0920 	mov.w	r9, #32
 802f894:	2600      	movs	r6, #0
 802f896:	f7fb fa7b 	bl	802ad90 <__locale_mb_cur_max>
 802f89a:	42b0      	cmp	r0, r6
 802f89c:	f43f ad6c 	beq.w	802f378 <__ssvfscanf_r+0x184>
 802f8a0:	1c73      	adds	r3, r6, #1
 802f8a2:	613b      	str	r3, [r7, #16]
 802f8a4:	6823      	ldr	r3, [r4, #0]
 802f8a6:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802f8aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 802f8ae:	558a      	strb	r2, [r1, r6]
 802f8b0:	6862      	ldr	r2, [r4, #4]
 802f8b2:	3a01      	subs	r2, #1
 802f8b4:	e9c4 3200 	strd	r3, r2, [r4]
 802f8b8:	6a3b      	ldr	r3, [r7, #32]
 802f8ba:	2b03      	cmp	r3, #3
 802f8bc:	d102      	bne.n	802f8c4 <__ssvfscanf_r+0x6d0>
 802f8be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802f8c0:	2b04      	cmp	r3, #4
 802f8c2:	d005      	beq.n	802f8d0 <__ssvfscanf_r+0x6dc>
 802f8c4:	2208      	movs	r2, #8
 802f8c6:	2100      	movs	r1, #0
 802f8c8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802f8cc:	f7fa f8d8 	bl	8029a80 <memset>
 802f8d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802f8d4:	9300      	str	r3, [sp, #0]
 802f8d6:	693b      	ldr	r3, [r7, #16]
 802f8d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f8da:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 802f8de:	4629      	mov	r1, r5
 802f8e0:	f002 fe58 	bl	8032594 <_mbrtowc_r>
 802f8e4:	1c46      	adds	r6, r0, #1
 802f8e6:	6238      	str	r0, [r7, #32]
 802f8e8:	f43f ad46 	beq.w	802f378 <__ssvfscanf_r+0x184>
 802f8ec:	2800      	cmp	r0, #0
 802f8ee:	d14a      	bne.n	802f986 <__ssvfscanf_r+0x792>
 802f8f0:	6028      	str	r0, [r5, #0]
 802f8f2:	682e      	ldr	r6, [r5, #0]
 802f8f4:	1c70      	adds	r0, r6, #1
 802f8f6:	d056      	beq.n	802f9a6 <__ssvfscanf_r+0x7b2>
 802f8f8:	2208      	movs	r2, #8
 802f8fa:	2100      	movs	r1, #0
 802f8fc:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 802f900:	f7fa f8be 	bl	8029a80 <memset>
 802f904:	4b9a      	ldr	r3, [pc, #616]	@ (802fb70 <__ssvfscanf_r+0x97c>)
 802f906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 802f90c:	60bb      	str	r3, [r7, #8]
 802f90e:	4632      	mov	r2, r6
 802f910:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802f914:	68be      	ldr	r6, [r7, #8]
 802f916:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 802f91a:	47b0      	blx	r6
 802f91c:	2801      	cmp	r0, #1
 802f91e:	d144      	bne.n	802f9aa <__ssvfscanf_r+0x7b6>
 802f920:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 802f924:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 802f928:	5c9b      	ldrb	r3, [r3, r2]
 802f92a:	2b00      	cmp	r3, #0
 802f92c:	d148      	bne.n	802f9c0 <__ssvfscanf_r+0x7cc>
 802f92e:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 802f932:	693b      	ldr	r3, [r7, #16]
 802f934:	2b00      	cmp	r3, #0
 802f936:	d13a      	bne.n	802f9ae <__ssvfscanf_r+0x7ba>
 802f938:	f1ba 0f00 	cmp.w	sl, #0
 802f93c:	d115      	bne.n	802f96a <__ssvfscanf_r+0x776>
 802f93e:	f8c5 a000 	str.w	sl, [r5]
 802f942:	f1bb 0f00 	cmp.w	fp, #0
 802f946:	d00d      	beq.n	802f964 <__ssvfscanf_r+0x770>
 802f948:	eba5 0108 	sub.w	r1, r5, r8
 802f94c:	108b      	asrs	r3, r1, #2
 802f94e:	3301      	adds	r3, #1
 802f950:	4599      	cmp	r9, r3
 802f952:	d907      	bls.n	802f964 <__ssvfscanf_r+0x770>
 802f954:	f8db 0000 	ldr.w	r0, [fp]
 802f958:	3104      	adds	r1, #4
 802f95a:	f001 fa61 	bl	8030e20 <realloc>
 802f95e:	b108      	cbz	r0, 802f964 <__ssvfscanf_r+0x770>
 802f960:	f8cb 0000 	str.w	r0, [fp]
 802f964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f966:	3301      	adds	r3, #1
 802f968:	627b      	str	r3, [r7, #36]	@ 0x24
 802f96a:	68fd      	ldr	r5, [r7, #12]
 802f96c:	e45d      	b.n	802f22a <__ssvfscanf_r+0x36>
 802f96e:	f04f 0900 	mov.w	r9, #0
 802f972:	60fd      	str	r5, [r7, #12]
 802f974:	46c8      	mov	r8, r9
 802f976:	46cb      	mov	fp, r9
 802f978:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 802f97c:	e78a      	b.n	802f894 <__ssvfscanf_r+0x6a0>
 802f97e:	46d1      	mov	r9, sl
 802f980:	46d0      	mov	r8, sl
 802f982:	46d3      	mov	fp, sl
 802f984:	e786      	b.n	802f894 <__ssvfscanf_r+0x6a0>
 802f986:	6a3b      	ldr	r3, [r7, #32]
 802f988:	3302      	adds	r3, #2
 802f98a:	d1b2      	bne.n	802f8f2 <__ssvfscanf_r+0x6fe>
 802f98c:	693e      	ldr	r6, [r7, #16]
 802f98e:	6863      	ldr	r3, [r4, #4]
 802f990:	2b00      	cmp	r3, #0
 802f992:	dc40      	bgt.n	802fa16 <__ssvfscanf_r+0x822>
 802f994:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f996:	4621      	mov	r1, r4
 802f998:	f7fd fa77 	bl	802ce8a <__ssrefill_r>
 802f99c:	2800      	cmp	r0, #0
 802f99e:	d03a      	beq.n	802fa16 <__ssvfscanf_r+0x822>
 802f9a0:	2e00      	cmp	r6, #0
 802f9a2:	d0c9      	beq.n	802f938 <__ssvfscanf_r+0x744>
 802f9a4:	e4e8      	b.n	802f378 <__ssvfscanf_r+0x184>
 802f9a6:	4632      	mov	r2, r6
 802f9a8:	e7bc      	b.n	802f924 <__ssvfscanf_r+0x730>
 802f9aa:	2200      	movs	r2, #0
 802f9ac:	e7ba      	b.n	802f924 <__ssvfscanf_r+0x730>
 802f9ae:	693b      	ldr	r3, [r7, #16]
 802f9b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f9b2:	3b01      	subs	r3, #1
 802f9b4:	4622      	mov	r2, r4
 802f9b6:	5cf1      	ldrb	r1, [r6, r3]
 802f9b8:	613b      	str	r3, [r7, #16]
 802f9ba:	f7fd fa2b 	bl	802ce14 <_sungetc_r>
 802f9be:	e7b8      	b.n	802f932 <__ssvfscanf_r+0x73e>
 802f9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802f9c2:	693a      	ldr	r2, [r7, #16]
 802f9c4:	4413      	add	r3, r2
 802f9c6:	633b      	str	r3, [r7, #48]	@ 0x30
 802f9c8:	6a3b      	ldr	r3, [r7, #32]
 802f9ca:	2b03      	cmp	r3, #3
 802f9cc:	d102      	bne.n	802f9d4 <__ssvfscanf_r+0x7e0>
 802f9ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802f9d0:	2b04      	cmp	r3, #4
 802f9d2:	d002      	beq.n	802f9da <__ssvfscanf_r+0x7e6>
 802f9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802f9d6:	3b01      	subs	r3, #1
 802f9d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f9da:	f1ba 0f00 	cmp.w	sl, #0
 802f9de:	d118      	bne.n	802fa12 <__ssvfscanf_r+0x81e>
 802f9e0:	3504      	adds	r5, #4
 802f9e2:	f1bb 0f00 	cmp.w	fp, #0
 802f9e6:	d014      	beq.n	802fa12 <__ssvfscanf_r+0x81e>
 802f9e8:	eba5 0608 	sub.w	r6, r5, r8
 802f9ec:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 802f9f0:	d80d      	bhi.n	802fa0e <__ssvfscanf_r+0x81a>
 802f9f2:	4640      	mov	r0, r8
 802f9f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802f9f8:	f001 fa12 	bl	8030e20 <realloc>
 802f9fc:	4680      	mov	r8, r0
 802f9fe:	2800      	cmp	r0, #0
 802fa00:	f43f adb3 	beq.w	802f56a <__ssvfscanf_r+0x376>
 802fa04:	1985      	adds	r5, r0, r6
 802fa06:	f8cb 0000 	str.w	r0, [fp]
 802fa0a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802fa0e:	4656      	mov	r6, sl
 802fa10:	e7bd      	b.n	802f98e <__ssvfscanf_r+0x79a>
 802fa12:	2600      	movs	r6, #0
 802fa14:	e7bb      	b.n	802f98e <__ssvfscanf_r+0x79a>
 802fa16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fa18:	2b00      	cmp	r3, #0
 802fa1a:	f47f af3c 	bne.w	802f896 <__ssvfscanf_r+0x6a2>
 802fa1e:	e78b      	b.n	802f938 <__ssvfscanf_r+0x744>
 802fa20:	f1ba 0f00 	cmp.w	sl, #0
 802fa24:	d01e      	beq.n	802fa64 <__ssvfscanf_r+0x870>
 802fa26:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 802fa2a:	6823      	ldr	r3, [r4, #0]
 802fa2c:	781a      	ldrb	r2, [r3, #0]
 802fa2e:	5cb2      	ldrb	r2, [r6, r2]
 802fa30:	b91a      	cbnz	r2, 802fa3a <__ssvfscanf_r+0x846>
 802fa32:	f1b8 0f00 	cmp.w	r8, #0
 802fa36:	d112      	bne.n	802fa5e <__ssvfscanf_r+0x86a>
 802fa38:	e4d2      	b.n	802f3e0 <__ssvfscanf_r+0x1ec>
 802fa3a:	3301      	adds	r3, #1
 802fa3c:	6862      	ldr	r2, [r4, #4]
 802fa3e:	6023      	str	r3, [r4, #0]
 802fa40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fa42:	f108 0801 	add.w	r8, r8, #1
 802fa46:	3a01      	subs	r2, #1
 802fa48:	4543      	cmp	r3, r8
 802fa4a:	6062      	str	r2, [r4, #4]
 802fa4c:	d007      	beq.n	802fa5e <__ssvfscanf_r+0x86a>
 802fa4e:	2a00      	cmp	r2, #0
 802fa50:	dceb      	bgt.n	802fa2a <__ssvfscanf_r+0x836>
 802fa52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802fa54:	4621      	mov	r1, r4
 802fa56:	f7fd fa18 	bl	802ce8a <__ssrefill_r>
 802fa5a:	2800      	cmp	r0, #0
 802fa5c:	d0e5      	beq.n	802fa2a <__ssvfscanf_r+0x836>
 802fa5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802fa60:	4443      	add	r3, r8
 802fa62:	e674      	b.n	802f74e <__ssvfscanf_r+0x55a>
 802fa64:	46a9      	mov	r9, r5
 802fa66:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802fa6a:	f859 8b04 	ldr.w	r8, [r9], #4
 802fa6e:	d07d      	beq.n	802fb6c <__ssvfscanf_r+0x978>
 802fa70:	f1b8 0f00 	cmp.w	r8, #0
 802fa74:	f43f acb4 	beq.w	802f3e0 <__ssvfscanf_r+0x1ec>
 802fa78:	2020      	movs	r0, #32
 802fa7a:	f7fc fa47 	bl	802bf0c <malloc>
 802fa7e:	4606      	mov	r6, r0
 802fa80:	2800      	cmp	r0, #0
 802fa82:	f43f ac7e 	beq.w	802f382 <__ssvfscanf_r+0x18e>
 802fa86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fa88:	f8c8 0000 	str.w	r0, [r8]
 802fa8c:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 802fa90:	889d      	ldrh	r5, [r3, #4]
 802fa92:	45aa      	cmp	sl, r5
 802fa94:	d311      	bcc.n	802faba <__ssvfscanf_r+0x8c6>
 802fa96:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802fa9a:	429d      	cmp	r5, r3
 802fa9c:	f200 8512 	bhi.w	80304c4 <__ssvfscanf_r+0x12d0>
 802faa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802faa2:	3508      	adds	r5, #8
 802faa4:	b2ad      	uxth	r5, r5
 802faa6:	6818      	ldr	r0, [r3, #0]
 802faa8:	00a9      	lsls	r1, r5, #2
 802faaa:	f001 f9b9 	bl	8030e20 <realloc>
 802faae:	2800      	cmp	r0, #0
 802fab0:	f000 8508 	beq.w	80304c4 <__ssvfscanf_r+0x12d0>
 802fab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fab6:	6018      	str	r0, [r3, #0]
 802fab8:	809d      	strh	r5, [r3, #4]
 802faba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fabc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802fabe:	681b      	ldr	r3, [r3, #0]
 802fac0:	f10a 0201 	add.w	r2, sl, #1
 802fac4:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 802fac8:	80ca      	strh	r2, [r1, #6]
 802faca:	46c2      	mov	sl, r8
 802facc:	46b0      	mov	r8, r6
 802face:	2620      	movs	r6, #32
 802fad0:	4645      	mov	r5, r8
 802fad2:	6823      	ldr	r3, [r4, #0]
 802fad4:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 802fad8:	781a      	ldrb	r2, [r3, #0]
 802fada:	5c8a      	ldrb	r2, [r1, r2]
 802fadc:	b35a      	cbz	r2, 802fb36 <__ssvfscanf_r+0x942>
 802fade:	6862      	ldr	r2, [r4, #4]
 802fae0:	3a01      	subs	r2, #1
 802fae2:	6062      	str	r2, [r4, #4]
 802fae4:	1c5a      	adds	r2, r3, #1
 802fae6:	6022      	str	r2, [r4, #0]
 802fae8:	781b      	ldrb	r3, [r3, #0]
 802faea:	f808 3b01 	strb.w	r3, [r8], #1
 802faee:	f1ba 0f00 	cmp.w	sl, #0
 802faf2:	d010      	beq.n	802fb16 <__ssvfscanf_r+0x922>
 802faf4:	eba8 0b05 	sub.w	fp, r8, r5
 802faf8:	45b3      	cmp	fp, r6
 802fafa:	d30c      	bcc.n	802fb16 <__ssvfscanf_r+0x922>
 802fafc:	0076      	lsls	r6, r6, #1
 802fafe:	4628      	mov	r0, r5
 802fb00:	4631      	mov	r1, r6
 802fb02:	f001 f98d 	bl	8030e20 <realloc>
 802fb06:	4605      	mov	r5, r0
 802fb08:	2800      	cmp	r0, #0
 802fb0a:	f43f ac3a 	beq.w	802f382 <__ssvfscanf_r+0x18e>
 802fb0e:	eb00 080b 	add.w	r8, r0, fp
 802fb12:	f8ca 0000 	str.w	r0, [sl]
 802fb16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fb18:	3b01      	subs	r3, #1
 802fb1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802fb1c:	d00b      	beq.n	802fb36 <__ssvfscanf_r+0x942>
 802fb1e:	6863      	ldr	r3, [r4, #4]
 802fb20:	2b00      	cmp	r3, #0
 802fb22:	dcd6      	bgt.n	802fad2 <__ssvfscanf_r+0x8de>
 802fb24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802fb26:	4621      	mov	r1, r4
 802fb28:	f7fd f9af 	bl	802ce8a <__ssrefill_r>
 802fb2c:	2800      	cmp	r0, #0
 802fb2e:	d0d0      	beq.n	802fad2 <__ssvfscanf_r+0x8de>
 802fb30:	45a8      	cmp	r8, r5
 802fb32:	f43f ac21 	beq.w	802f378 <__ssvfscanf_r+0x184>
 802fb36:	ebb8 0505 	subs.w	r5, r8, r5
 802fb3a:	f43f ac51 	beq.w	802f3e0 <__ssvfscanf_r+0x1ec>
 802fb3e:	2300      	movs	r3, #0
 802fb40:	f888 3000 	strb.w	r3, [r8]
 802fb44:	f1ba 0f00 	cmp.w	sl, #0
 802fb48:	d009      	beq.n	802fb5e <__ssvfscanf_r+0x96a>
 802fb4a:	1c69      	adds	r1, r5, #1
 802fb4c:	428e      	cmp	r6, r1
 802fb4e:	d906      	bls.n	802fb5e <__ssvfscanf_r+0x96a>
 802fb50:	f8da 0000 	ldr.w	r0, [sl]
 802fb54:	f001 f964 	bl	8030e20 <realloc>
 802fb58:	b108      	cbz	r0, 802fb5e <__ssvfscanf_r+0x96a>
 802fb5a:	f8ca 0000 	str.w	r0, [sl]
 802fb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802fb60:	3301      	adds	r3, #1
 802fb62:	627b      	str	r3, [r7, #36]	@ 0x24
 802fb64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802fb66:	442b      	add	r3, r5
 802fb68:	633b      	str	r3, [r7, #48]	@ 0x30
 802fb6a:	e64a      	b.n	802f802 <__ssvfscanf_r+0x60e>
 802fb6c:	46b2      	mov	sl, r6
 802fb6e:	e7af      	b.n	802fad0 <__ssvfscanf_r+0x8dc>
 802fb70:	200000e8 	.word	0x200000e8
 802fb74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fb76:	2b00      	cmp	r3, #0
 802fb78:	bf08      	it	eq
 802fb7a:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802fb7e:	f016 0901 	ands.w	r9, r6, #1
 802fb82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802fb84:	f006 0810 	and.w	r8, r6, #16
 802fb88:	f000 80ef 	beq.w	802fd6a <__ssvfscanf_r+0xb76>
 802fb8c:	f1b8 0f00 	cmp.w	r8, #0
 802fb90:	f040 8098 	bne.w	802fcc4 <__ssvfscanf_r+0xad0>
 802fb94:	462b      	mov	r3, r5
 802fb96:	0631      	lsls	r1, r6, #24
 802fb98:	f853 5b04 	ldr.w	r5, [r3], #4
 802fb9c:	613b      	str	r3, [r7, #16]
 802fb9e:	f140 8099 	bpl.w	802fcd4 <__ssvfscanf_r+0xae0>
 802fba2:	2d00      	cmp	r5, #0
 802fba4:	f43f ace4 	beq.w	802f570 <__ssvfscanf_r+0x37c>
 802fba8:	2080      	movs	r0, #128	@ 0x80
 802fbaa:	f7fc f9af 	bl	802bf0c <malloc>
 802fbae:	4606      	mov	r6, r0
 802fbb0:	2800      	cmp	r0, #0
 802fbb2:	f43f acda 	beq.w	802f56a <__ssvfscanf_r+0x376>
 802fbb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fbb8:	6028      	str	r0, [r5, #0]
 802fbba:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 802fbbe:	889b      	ldrh	r3, [r3, #4]
 802fbc0:	4599      	cmp	r9, r3
 802fbc2:	d314      	bcc.n	802fbee <__ssvfscanf_r+0x9fa>
 802fbc4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802fbc8:	4293      	cmp	r3, r2
 802fbca:	f200 847b 	bhi.w	80304c4 <__ssvfscanf_r+0x12d0>
 802fbce:	3308      	adds	r3, #8
 802fbd0:	fa1f fa83 	uxth.w	sl, r3
 802fbd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fbd6:	ea4f 018a 	mov.w	r1, sl, lsl #2
 802fbda:	6818      	ldr	r0, [r3, #0]
 802fbdc:	f001 f920 	bl	8030e20 <realloc>
 802fbe0:	2800      	cmp	r0, #0
 802fbe2:	f000 846f 	beq.w	80304c4 <__ssvfscanf_r+0x12d0>
 802fbe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fbe8:	6018      	str	r0, [r3, #0]
 802fbea:	f8a3 a004 	strh.w	sl, [r3, #4]
 802fbee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fbf0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802fbf2:	681b      	ldr	r3, [r3, #0]
 802fbf4:	f109 0201 	add.w	r2, r9, #1
 802fbf8:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802fbfc:	46aa      	mov	sl, r5
 802fbfe:	80ca      	strh	r2, [r1, #6]
 802fc00:	4635      	mov	r5, r6
 802fc02:	f04f 0920 	mov.w	r9, #32
 802fc06:	2300      	movs	r3, #0
 802fc08:	6822      	ldr	r2, [r4, #0]
 802fc0a:	49a7      	ldr	r1, [pc, #668]	@ (802fea8 <__ssvfscanf_r+0xcb4>)
 802fc0c:	7812      	ldrb	r2, [r2, #0]
 802fc0e:	5c8a      	ldrb	r2, [r1, r2]
 802fc10:	0710      	lsls	r0, r2, #28
 802fc12:	d43c      	bmi.n	802fc8e <__ssvfscanf_r+0xa9a>
 802fc14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802fc16:	2a00      	cmp	r2, #0
 802fc18:	d039      	beq.n	802fc8e <__ssvfscanf_r+0xa9a>
 802fc1a:	60fb      	str	r3, [r7, #12]
 802fc1c:	f7fb f8b8 	bl	802ad90 <__locale_mb_cur_max>
 802fc20:	68fb      	ldr	r3, [r7, #12]
 802fc22:	4298      	cmp	r0, r3
 802fc24:	f43f aba8 	beq.w	802f378 <__ssvfscanf_r+0x184>
 802fc28:	6822      	ldr	r2, [r4, #0]
 802fc2a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802fc2e:	f812 0b01 	ldrb.w	r0, [r2], #1
 802fc32:	54c8      	strb	r0, [r1, r3]
 802fc34:	f103 0b01 	add.w	fp, r3, #1
 802fc38:	6863      	ldr	r3, [r4, #4]
 802fc3a:	3b01      	subs	r3, #1
 802fc3c:	e9c4 2300 	strd	r2, r3, [r4]
 802fc40:	6a3b      	ldr	r3, [r7, #32]
 802fc42:	2b03      	cmp	r3, #3
 802fc44:	d102      	bne.n	802fc4c <__ssvfscanf_r+0xa58>
 802fc46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802fc48:	2b04      	cmp	r3, #4
 802fc4a:	d005      	beq.n	802fc58 <__ssvfscanf_r+0xa64>
 802fc4c:	2208      	movs	r2, #8
 802fc4e:	2100      	movs	r1, #0
 802fc50:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 802fc54:	f7f9 ff14 	bl	8029a80 <memset>
 802fc58:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802fc5c:	9300      	str	r3, [sp, #0]
 802fc5e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 802fc62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802fc64:	465b      	mov	r3, fp
 802fc66:	4629      	mov	r1, r5
 802fc68:	f002 fc94 	bl	8032594 <_mbrtowc_r>
 802fc6c:	1c42      	adds	r2, r0, #1
 802fc6e:	6238      	str	r0, [r7, #32]
 802fc70:	f43f ab82 	beq.w	802f378 <__ssvfscanf_r+0x184>
 802fc74:	bb90      	cbnz	r0, 802fcdc <__ssvfscanf_r+0xae8>
 802fc76:	6028      	str	r0, [r5, #0]
 802fc78:	6828      	ldr	r0, [r5, #0]
 802fc7a:	f002 fca5 	bl	80325c8 <iswspace>
 802fc7e:	4603      	mov	r3, r0
 802fc80:	2800      	cmp	r0, #0
 802fc82:	d047      	beq.n	802fd14 <__ssvfscanf_r+0xb20>
 802fc84:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 802fc88:	f1bb 0f00 	cmp.w	fp, #0
 802fc8c:	d139      	bne.n	802fd02 <__ssvfscanf_r+0xb0e>
 802fc8e:	f1b8 0f00 	cmp.w	r8, #0
 802fc92:	d114      	bne.n	802fcbe <__ssvfscanf_r+0xaca>
 802fc94:	f8c5 8000 	str.w	r8, [r5]
 802fc98:	f1ba 0f00 	cmp.w	sl, #0
 802fc9c:	d00c      	beq.n	802fcb8 <__ssvfscanf_r+0xac4>
 802fc9e:	1ba9      	subs	r1, r5, r6
 802fca0:	108b      	asrs	r3, r1, #2
 802fca2:	3301      	adds	r3, #1
 802fca4:	4599      	cmp	r9, r3
 802fca6:	d907      	bls.n	802fcb8 <__ssvfscanf_r+0xac4>
 802fca8:	f8da 0000 	ldr.w	r0, [sl]
 802fcac:	3104      	adds	r1, #4
 802fcae:	f001 f8b7 	bl	8030e20 <realloc>
 802fcb2:	b108      	cbz	r0, 802fcb8 <__ssvfscanf_r+0xac4>
 802fcb4:	f8ca 0000 	str.w	r0, [sl]
 802fcb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802fcba:	3301      	adds	r3, #1
 802fcbc:	627b      	str	r3, [r7, #36]	@ 0x24
 802fcbe:	693d      	ldr	r5, [r7, #16]
 802fcc0:	f7ff bab3 	b.w	802f22a <__ssvfscanf_r+0x36>
 802fcc4:	f04f 0900 	mov.w	r9, #0
 802fcc8:	613d      	str	r5, [r7, #16]
 802fcca:	464e      	mov	r6, r9
 802fccc:	46ca      	mov	sl, r9
 802fcce:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 802fcd2:	e798      	b.n	802fc06 <__ssvfscanf_r+0xa12>
 802fcd4:	46c1      	mov	r9, r8
 802fcd6:	4646      	mov	r6, r8
 802fcd8:	46c2      	mov	sl, r8
 802fcda:	e794      	b.n	802fc06 <__ssvfscanf_r+0xa12>
 802fcdc:	6a3b      	ldr	r3, [r7, #32]
 802fcde:	3302      	adds	r3, #2
 802fce0:	d1ca      	bne.n	802fc78 <__ssvfscanf_r+0xa84>
 802fce2:	465b      	mov	r3, fp
 802fce4:	6862      	ldr	r2, [r4, #4]
 802fce6:	2a00      	cmp	r2, #0
 802fce8:	dc8e      	bgt.n	802fc08 <__ssvfscanf_r+0xa14>
 802fcea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802fcec:	60fb      	str	r3, [r7, #12]
 802fcee:	4621      	mov	r1, r4
 802fcf0:	f7fd f8cb 	bl	802ce8a <__ssrefill_r>
 802fcf4:	68fb      	ldr	r3, [r7, #12]
 802fcf6:	2800      	cmp	r0, #0
 802fcf8:	d086      	beq.n	802fc08 <__ssvfscanf_r+0xa14>
 802fcfa:	2b00      	cmp	r3, #0
 802fcfc:	f47f ab3c 	bne.w	802f378 <__ssvfscanf_r+0x184>
 802fd00:	e7c5      	b.n	802fc8e <__ssvfscanf_r+0xa9a>
 802fd02:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802fd06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802fd08:	f813 100b 	ldrb.w	r1, [r3, fp]
 802fd0c:	4622      	mov	r2, r4
 802fd0e:	f7fd f881 	bl	802ce14 <_sungetc_r>
 802fd12:	e7b7      	b.n	802fc84 <__ssvfscanf_r+0xa90>
 802fd14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802fd16:	445a      	add	r2, fp
 802fd18:	633a      	str	r2, [r7, #48]	@ 0x30
 802fd1a:	6a3a      	ldr	r2, [r7, #32]
 802fd1c:	2a03      	cmp	r2, #3
 802fd1e:	d102      	bne.n	802fd26 <__ssvfscanf_r+0xb32>
 802fd20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802fd22:	2a04      	cmp	r2, #4
 802fd24:	d002      	beq.n	802fd2c <__ssvfscanf_r+0xb38>
 802fd26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802fd28:	3a01      	subs	r2, #1
 802fd2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802fd2c:	f1b8 0f00 	cmp.w	r8, #0
 802fd30:	d1d8      	bne.n	802fce4 <__ssvfscanf_r+0xaf0>
 802fd32:	3504      	adds	r5, #4
 802fd34:	f1ba 0f00 	cmp.w	sl, #0
 802fd38:	d015      	beq.n	802fd66 <__ssvfscanf_r+0xb72>
 802fd3a:	eba5 0b06 	sub.w	fp, r5, r6
 802fd3e:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 802fd42:	d80e      	bhi.n	802fd62 <__ssvfscanf_r+0xb6e>
 802fd44:	4630      	mov	r0, r6
 802fd46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802fd4a:	f001 f869 	bl	8030e20 <realloc>
 802fd4e:	4606      	mov	r6, r0
 802fd50:	2800      	cmp	r0, #0
 802fd52:	f43f ac0a 	beq.w	802f56a <__ssvfscanf_r+0x376>
 802fd56:	eb00 050b 	add.w	r5, r0, fp
 802fd5a:	f8ca 0000 	str.w	r0, [sl]
 802fd5e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802fd62:	4643      	mov	r3, r8
 802fd64:	e7be      	b.n	802fce4 <__ssvfscanf_r+0xaf0>
 802fd66:	4653      	mov	r3, sl
 802fd68:	e7bc      	b.n	802fce4 <__ssvfscanf_r+0xaf0>
 802fd6a:	f1b8 0f00 	cmp.w	r8, #0
 802fd6e:	d01a      	beq.n	802fda6 <__ssvfscanf_r+0xbb2>
 802fd70:	4e4d      	ldr	r6, [pc, #308]	@ (802fea8 <__ssvfscanf_r+0xcb4>)
 802fd72:	6823      	ldr	r3, [r4, #0]
 802fd74:	781a      	ldrb	r2, [r3, #0]
 802fd76:	5cb2      	ldrb	r2, [r6, r2]
 802fd78:	0711      	lsls	r1, r2, #28
 802fd7a:	d411      	bmi.n	802fda0 <__ssvfscanf_r+0xbac>
 802fd7c:	3301      	adds	r3, #1
 802fd7e:	6862      	ldr	r2, [r4, #4]
 802fd80:	6023      	str	r3, [r4, #0]
 802fd82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fd84:	f109 0901 	add.w	r9, r9, #1
 802fd88:	3a01      	subs	r2, #1
 802fd8a:	454b      	cmp	r3, r9
 802fd8c:	6062      	str	r2, [r4, #4]
 802fd8e:	d007      	beq.n	802fda0 <__ssvfscanf_r+0xbac>
 802fd90:	2a00      	cmp	r2, #0
 802fd92:	dcee      	bgt.n	802fd72 <__ssvfscanf_r+0xb7e>
 802fd94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802fd96:	4621      	mov	r1, r4
 802fd98:	f7fd f877 	bl	802ce8a <__ssrefill_r>
 802fd9c:	2800      	cmp	r0, #0
 802fd9e:	d0e8      	beq.n	802fd72 <__ssvfscanf_r+0xb7e>
 802fda0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802fda2:	444b      	add	r3, r9
 802fda4:	e4d3      	b.n	802f74e <__ssvfscanf_r+0x55a>
 802fda6:	46a8      	mov	r8, r5
 802fda8:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802fdac:	f858 5b04 	ldr.w	r5, [r8], #4
 802fdb0:	d077      	beq.n	802fea2 <__ssvfscanf_r+0xcae>
 802fdb2:	2d00      	cmp	r5, #0
 802fdb4:	f43f ab14 	beq.w	802f3e0 <__ssvfscanf_r+0x1ec>
 802fdb8:	2020      	movs	r0, #32
 802fdba:	f7fc f8a7 	bl	802bf0c <malloc>
 802fdbe:	4681      	mov	r9, r0
 802fdc0:	2800      	cmp	r0, #0
 802fdc2:	f43f aade 	beq.w	802f382 <__ssvfscanf_r+0x18e>
 802fdc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fdc8:	6028      	str	r0, [r5, #0]
 802fdca:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 802fdce:	889e      	ldrh	r6, [r3, #4]
 802fdd0:	45b2      	cmp	sl, r6
 802fdd2:	d311      	bcc.n	802fdf8 <__ssvfscanf_r+0xc04>
 802fdd4:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802fdd8:	429e      	cmp	r6, r3
 802fdda:	f200 8373 	bhi.w	80304c4 <__ssvfscanf_r+0x12d0>
 802fdde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fde0:	3608      	adds	r6, #8
 802fde2:	b2b6      	uxth	r6, r6
 802fde4:	6818      	ldr	r0, [r3, #0]
 802fde6:	00b1      	lsls	r1, r6, #2
 802fde8:	f001 f81a 	bl	8030e20 <realloc>
 802fdec:	2800      	cmp	r0, #0
 802fdee:	f000 8369 	beq.w	80304c4 <__ssvfscanf_r+0x12d0>
 802fdf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fdf4:	6018      	str	r0, [r3, #0]
 802fdf6:	809e      	strh	r6, [r3, #4]
 802fdf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fdfa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802fdfc:	681b      	ldr	r3, [r3, #0]
 802fdfe:	f10a 0201 	add.w	r2, sl, #1
 802fe02:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 802fe06:	80ca      	strh	r2, [r1, #6]
 802fe08:	46aa      	mov	sl, r5
 802fe0a:	2620      	movs	r6, #32
 802fe0c:	464d      	mov	r5, r9
 802fe0e:	46a9      	mov	r9, r5
 802fe10:	6823      	ldr	r3, [r4, #0]
 802fe12:	4925      	ldr	r1, [pc, #148]	@ (802fea8 <__ssvfscanf_r+0xcb4>)
 802fe14:	781a      	ldrb	r2, [r3, #0]
 802fe16:	5c8a      	ldrb	r2, [r1, r2]
 802fe18:	0712      	lsls	r2, r2, #28
 802fe1a:	d428      	bmi.n	802fe6e <__ssvfscanf_r+0xc7a>
 802fe1c:	6862      	ldr	r2, [r4, #4]
 802fe1e:	3a01      	subs	r2, #1
 802fe20:	6062      	str	r2, [r4, #4]
 802fe22:	1c5a      	adds	r2, r3, #1
 802fe24:	6022      	str	r2, [r4, #0]
 802fe26:	781b      	ldrb	r3, [r3, #0]
 802fe28:	f805 3b01 	strb.w	r3, [r5], #1
 802fe2c:	f1ba 0f00 	cmp.w	sl, #0
 802fe30:	d010      	beq.n	802fe54 <__ssvfscanf_r+0xc60>
 802fe32:	eba5 0b09 	sub.w	fp, r5, r9
 802fe36:	45b3      	cmp	fp, r6
 802fe38:	d30c      	bcc.n	802fe54 <__ssvfscanf_r+0xc60>
 802fe3a:	0076      	lsls	r6, r6, #1
 802fe3c:	4648      	mov	r0, r9
 802fe3e:	4631      	mov	r1, r6
 802fe40:	f000 ffee 	bl	8030e20 <realloc>
 802fe44:	4681      	mov	r9, r0
 802fe46:	2800      	cmp	r0, #0
 802fe48:	f43f aa9b 	beq.w	802f382 <__ssvfscanf_r+0x18e>
 802fe4c:	eb00 050b 	add.w	r5, r0, fp
 802fe50:	f8ca 0000 	str.w	r0, [sl]
 802fe54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fe56:	3b01      	subs	r3, #1
 802fe58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802fe5a:	d008      	beq.n	802fe6e <__ssvfscanf_r+0xc7a>
 802fe5c:	6863      	ldr	r3, [r4, #4]
 802fe5e:	2b00      	cmp	r3, #0
 802fe60:	dcd6      	bgt.n	802fe10 <__ssvfscanf_r+0xc1c>
 802fe62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802fe64:	4621      	mov	r1, r4
 802fe66:	f7fd f810 	bl	802ce8a <__ssrefill_r>
 802fe6a:	2800      	cmp	r0, #0
 802fe6c:	d0d0      	beq.n	802fe10 <__ssvfscanf_r+0xc1c>
 802fe6e:	2300      	movs	r3, #0
 802fe70:	702b      	strb	r3, [r5, #0]
 802fe72:	eba5 0509 	sub.w	r5, r5, r9
 802fe76:	f1ba 0f00 	cmp.w	sl, #0
 802fe7a:	d009      	beq.n	802fe90 <__ssvfscanf_r+0xc9c>
 802fe7c:	1c69      	adds	r1, r5, #1
 802fe7e:	428e      	cmp	r6, r1
 802fe80:	d906      	bls.n	802fe90 <__ssvfscanf_r+0xc9c>
 802fe82:	f8da 0000 	ldr.w	r0, [sl]
 802fe86:	f000 ffcb 	bl	8030e20 <realloc>
 802fe8a:	b108      	cbz	r0, 802fe90 <__ssvfscanf_r+0xc9c>
 802fe8c:	f8ca 0000 	str.w	r0, [sl]
 802fe90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802fe92:	442b      	add	r3, r5
 802fe94:	633b      	str	r3, [r7, #48]	@ 0x30
 802fe96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802fe98:	3301      	adds	r3, #1
 802fe9a:	627b      	str	r3, [r7, #36]	@ 0x24
 802fe9c:	4645      	mov	r5, r8
 802fe9e:	f7ff b9c4 	b.w	802f22a <__ssvfscanf_r+0x36>
 802fea2:	46b2      	mov	sl, r6
 802fea4:	e7b3      	b.n	802fe0e <__ssvfscanf_r+0xc1a>
 802fea6:	bf00      	nop
 802fea8:	08038479 	.word	0x08038479
 802feac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802feae:	3b01      	subs	r3, #1
 802feb0:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 802feb4:	bf81      	itttt	hi
 802feb6:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 802feb8:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 802febc:	eb03 090c 	addhi.w	r9, r3, ip
 802fec0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 802fec4:	bf8c      	ite	hi
 802fec6:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 802fec8:	f04f 0900 	movls.w	r9, #0
 802fecc:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 802fed0:	f04f 0a00 	mov.w	sl, #0
 802fed4:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 802fed8:	6822      	ldr	r2, [r4, #0]
 802feda:	7813      	ldrb	r3, [r2, #0]
 802fedc:	2b39      	cmp	r3, #57	@ 0x39
 802fede:	d80f      	bhi.n	802ff00 <__ssvfscanf_r+0xd0c>
 802fee0:	2b2a      	cmp	r3, #42	@ 0x2a
 802fee2:	d91a      	bls.n	802ff1a <__ssvfscanf_r+0xd26>
 802fee4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 802fee8:	290e      	cmp	r1, #14
 802feea:	d816      	bhi.n	802ff1a <__ssvfscanf_r+0xd26>
 802feec:	e8df f001 	tbb	[pc, r1]
 802fef0:	15781578 	.word	0x15781578
 802fef4:	68683f15 	.word	0x68683f15
 802fef8:	68686868 	.word	0x68686868
 802fefc:	7068      	.short	0x7068
 802fefe:	70          	.byte	0x70
 802feff:	00          	.byte	0x00
 802ff00:	2b66      	cmp	r3, #102	@ 0x66
 802ff02:	d832      	bhi.n	802ff6a <__ssvfscanf_r+0xd76>
 802ff04:	2b60      	cmp	r3, #96	@ 0x60
 802ff06:	d803      	bhi.n	802ff10 <__ssvfscanf_r+0xd1c>
 802ff08:	2b46      	cmp	r3, #70	@ 0x46
 802ff0a:	d804      	bhi.n	802ff16 <__ssvfscanf_r+0xd22>
 802ff0c:	2b40      	cmp	r3, #64	@ 0x40
 802ff0e:	d904      	bls.n	802ff1a <__ssvfscanf_r+0xd26>
 802ff10:	69f9      	ldr	r1, [r7, #28]
 802ff12:	290a      	cmp	r1, #10
 802ff14:	e062      	b.n	802ffdc <__ssvfscanf_r+0xde8>
 802ff16:	2b58      	cmp	r3, #88	@ 0x58
 802ff18:	d068      	beq.n	802ffec <__ssvfscanf_r+0xdf8>
 802ff1a:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 802ff1e:	d011      	beq.n	802ff44 <__ssvfscanf_r+0xd50>
 802ff20:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 802ff24:	4598      	cmp	r8, r3
 802ff26:	d908      	bls.n	802ff3a <__ssvfscanf_r+0xd46>
 802ff28:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 802ff2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802ff2e:	4622      	mov	r2, r4
 802ff30:	f7fc ff70 	bl	802ce14 <_sungetc_r>
 802ff34:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 802ff38:	46c8      	mov	r8, r9
 802ff3a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 802ff3e:	4598      	cmp	r8, r3
 802ff40:	f43f aa4e 	beq.w	802f3e0 <__ssvfscanf_r+0x1ec>
 802ff44:	f01b 0210 	ands.w	r2, fp, #16
 802ff48:	d16c      	bne.n	8030024 <__ssvfscanf_r+0xe30>
 802ff4a:	69fb      	ldr	r3, [r7, #28]
 802ff4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802ff4e:	69be      	ldr	r6, [r7, #24]
 802ff50:	f888 2000 	strb.w	r2, [r8]
 802ff54:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802ff58:	47b0      	blx	r6
 802ff5a:	f01b 0f20 	tst.w	fp, #32
 802ff5e:	f105 0904 	add.w	r9, r5, #4
 802ff62:	d056      	beq.n	8030012 <__ssvfscanf_r+0xe1e>
 802ff64:	682b      	ldr	r3, [r5, #0]
 802ff66:	6018      	str	r0, [r3, #0]
 802ff68:	e058      	b.n	803001c <__ssvfscanf_r+0xe28>
 802ff6a:	2b78      	cmp	r3, #120	@ 0x78
 802ff6c:	e7d4      	b.n	802ff18 <__ssvfscanf_r+0xd24>
 802ff6e:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 802ff72:	d00a      	beq.n	802ff8a <__ssvfscanf_r+0xd96>
 802ff74:	69f9      	ldr	r1, [r7, #28]
 802ff76:	b919      	cbnz	r1, 802ff80 <__ssvfscanf_r+0xd8c>
 802ff78:	2108      	movs	r1, #8
 802ff7a:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 802ff7e:	61f9      	str	r1, [r7, #28]
 802ff80:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 802ff84:	d004      	beq.n	802ff90 <__ssvfscanf_r+0xd9c>
 802ff86:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 802ff8a:	f808 3b01 	strb.w	r3, [r8], #1
 802ff8e:	e00b      	b.n	802ffa8 <__ssvfscanf_r+0xdb4>
 802ff90:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 802ff94:	f1b9 0f00 	cmp.w	r9, #0
 802ff98:	d004      	beq.n	802ffa4 <__ssvfscanf_r+0xdb0>
 802ff9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802ff9c:	3301      	adds	r3, #1
 802ff9e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802ffa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802ffa4:	f10a 0a01 	add.w	sl, sl, #1
 802ffa8:	6863      	ldr	r3, [r4, #4]
 802ffaa:	3b01      	subs	r3, #1
 802ffac:	2b00      	cmp	r3, #0
 802ffae:	6063      	str	r3, [r4, #4]
 802ffb0:	dd28      	ble.n	8030004 <__ssvfscanf_r+0xe10>
 802ffb2:	3201      	adds	r2, #1
 802ffb4:	6022      	str	r2, [r4, #0]
 802ffb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802ffb8:	3b01      	subs	r3, #1
 802ffba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802ffbc:	d18c      	bne.n	802fed8 <__ssvfscanf_r+0xce4>
 802ffbe:	e7ac      	b.n	802ff1a <__ssvfscanf_r+0xd26>
 802ffc0:	69f8      	ldr	r0, [r7, #28]
 802ffc2:	499b      	ldr	r1, [pc, #620]	@ (8030230 <__ssvfscanf_r+0x103c>)
 802ffc4:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 802ffc8:	61f9      	str	r1, [r7, #28]
 802ffca:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 802ffce:	e7dc      	b.n	802ff8a <__ssvfscanf_r+0xd96>
 802ffd0:	69f8      	ldr	r0, [r7, #28]
 802ffd2:	4997      	ldr	r1, [pc, #604]	@ (8030230 <__ssvfscanf_r+0x103c>)
 802ffd4:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 802ffd8:	61f9      	str	r1, [r7, #28]
 802ffda:	2908      	cmp	r1, #8
 802ffdc:	dcf5      	bgt.n	802ffca <__ssvfscanf_r+0xdd6>
 802ffde:	e79c      	b.n	802ff1a <__ssvfscanf_r+0xd26>
 802ffe0:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 802ffe4:	d099      	beq.n	802ff1a <__ssvfscanf_r+0xd26>
 802ffe6:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 802ffea:	e7ce      	b.n	802ff8a <__ssvfscanf_r+0xd96>
 802ffec:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 802fff0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802fff4:	d191      	bne.n	802ff1a <__ssvfscanf_r+0xd26>
 802fff6:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 802fffa:	2110      	movs	r1, #16
 802fffc:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 8030000:	61f9      	str	r1, [r7, #28]
 8030002:	e7c2      	b.n	802ff8a <__ssvfscanf_r+0xd96>
 8030004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8030006:	4621      	mov	r1, r4
 8030008:	f7fc ff3f 	bl	802ce8a <__ssrefill_r>
 803000c:	2800      	cmp	r0, #0
 803000e:	d0d2      	beq.n	802ffb6 <__ssvfscanf_r+0xdc2>
 8030010:	e783      	b.n	802ff1a <__ssvfscanf_r+0xd26>
 8030012:	f01b 0f08 	tst.w	fp, #8
 8030016:	d00b      	beq.n	8030030 <__ssvfscanf_r+0xe3c>
 8030018:	682b      	ldr	r3, [r5, #0]
 803001a:	7018      	strb	r0, [r3, #0]
 803001c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803001e:	3301      	adds	r3, #1
 8030020:	627b      	str	r3, [r7, #36]	@ 0x24
 8030022:	464d      	mov	r5, r9
 8030024:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8030028:	eba8 0803 	sub.w	r8, r8, r3
 803002c:	44d0      	add	r8, sl
 803002e:	e516      	b.n	802fa5e <__ssvfscanf_r+0x86a>
 8030030:	f01b 0f04 	tst.w	fp, #4
 8030034:	d002      	beq.n	803003c <__ssvfscanf_r+0xe48>
 8030036:	682b      	ldr	r3, [r5, #0]
 8030038:	8018      	strh	r0, [r3, #0]
 803003a:	e7ef      	b.n	803001c <__ssvfscanf_r+0xe28>
 803003c:	f01b 0201 	ands.w	r2, fp, #1
 8030040:	d190      	bne.n	802ff64 <__ssvfscanf_r+0xd70>
 8030042:	f01b 0f02 	tst.w	fp, #2
 8030046:	d08d      	beq.n	802ff64 <__ssvfscanf_r+0xd70>
 8030048:	4b7a      	ldr	r3, [pc, #488]	@ (8030234 <__ssvfscanf_r+0x1040>)
 803004a:	69b9      	ldr	r1, [r7, #24]
 803004c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803004e:	4299      	cmp	r1, r3
 8030050:	69fb      	ldr	r3, [r7, #28]
 8030052:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8030056:	d105      	bne.n	8030064 <__ssvfscanf_r+0xe70>
 8030058:	f002 fa9a 	bl	8032590 <_strtoull_r>
 803005c:	682b      	ldr	r3, [r5, #0]
 803005e:	e9c3 0100 	strd	r0, r1, [r3]
 8030062:	e7db      	b.n	803001c <__ssvfscanf_r+0xe28>
 8030064:	f002 f9e8 	bl	8032438 <_strtoll_r>
 8030068:	e7f8      	b.n	803005c <__ssvfscanf_r+0xe68>
 803006a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803006c:	f7fa fe96 	bl	802ad9c <_localeconv_r>
 8030070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030072:	6802      	ldr	r2, [r0, #0]
 8030074:	3b01      	subs	r3, #1
 8030076:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 803007a:	f04f 0800 	mov.w	r8, #0
 803007e:	bf88      	it	hi
 8030080:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8030082:	f8c7 8010 	str.w	r8, [r7, #16]
 8030086:	e9c7 8802 	strd	r8, r8, [r7, #8]
 803008a:	bf81      	itttt	hi
 803008c:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 8030090:	f240 115d 	movwhi	r1, #349	@ 0x15d
 8030094:	181b      	addhi	r3, r3, r0
 8030096:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 8030098:	bf98      	it	ls
 803009a:	2300      	movls	r3, #0
 803009c:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 80300a0:	46c3      	mov	fp, r8
 80300a2:	46c2      	mov	sl, r8
 80300a4:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 80300a8:	6821      	ldr	r1, [r4, #0]
 80300aa:	6079      	str	r1, [r7, #4]
 80300ac:	7808      	ldrb	r0, [r1, #0]
 80300ae:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 80300b2:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 80300b6:	f200 8123 	bhi.w	8030300 <__ssvfscanf_r+0x110c>
 80300ba:	e8df f01c 	tbh	[pc, ip, lsl #1]
 80300be:	0089      	.short	0x0089
 80300c0:	00890121 	.word	0x00890121
 80300c4:	01210121 	.word	0x01210121
 80300c8:	006f004f 	.word	0x006f004f
 80300cc:	006f006f 	.word	0x006f006f
 80300d0:	006f006f 	.word	0x006f006f
 80300d4:	006f006f 	.word	0x006f006f
 80300d8:	006f006f 	.word	0x006f006f
 80300dc:	01210121 	.word	0x01210121
 80300e0:	01210121 	.word	0x01210121
 80300e4:	01210121 	.word	0x01210121
 80300e8:	00af0121 	.word	0x00af0121
 80300ec:	006d006d 	.word	0x006d006d
 80300f0:	011e006d 	.word	0x011e006d
 80300f4:	012100ed 	.word	0x012100ed
 80300f8:	00d60121 	.word	0x00d60121
 80300fc:	01210121 	.word	0x01210121
 8030100:	01210121 	.word	0x01210121
 8030104:	01210090 	.word	0x01210090
 8030108:	01210104 	.word	0x01210104
 803010c:	01210121 	.word	0x01210121
 8030110:	012100f8 	.word	0x012100f8
 8030114:	01210121 	.word	0x01210121
 8030118:	00fe0073 	.word	0x00fe0073
 803011c:	01210121 	.word	0x01210121
 8030120:	01210121 	.word	0x01210121
 8030124:	01210121 	.word	0x01210121
 8030128:	00af0121 	.word	0x00af0121
 803012c:	006d006d 	.word	0x006d006d
 8030130:	011e006d 	.word	0x011e006d
 8030134:	012100ed 	.word	0x012100ed
 8030138:	00d60121 	.word	0x00d60121
 803013c:	01210121 	.word	0x01210121
 8030140:	01210121 	.word	0x01210121
 8030144:	01210090 	.word	0x01210090
 8030148:	01210104 	.word	0x01210104
 803014c:	01210121 	.word	0x01210121
 8030150:	012100f8 	.word	0x012100f8
 8030154:	01210121 	.word	0x01210121
 8030158:	00fe0073 	.word	0x00fe0073
 803015c:	05f1      	lsls	r1, r6, #23
 803015e:	d51d      	bpl.n	803019c <__ssvfscanf_r+0xfa8>
 8030160:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8030164:	f10a 0a01 	add.w	sl, sl, #1
 8030168:	b11b      	cbz	r3, 8030172 <__ssvfscanf_r+0xf7e>
 803016a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 803016c:	3001      	adds	r0, #1
 803016e:	3b01      	subs	r3, #1
 8030170:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8030172:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8030174:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8030176:	3001      	adds	r0, #1
 8030178:	6338      	str	r0, [r7, #48]	@ 0x30
 803017a:	6860      	ldr	r0, [r4, #4]
 803017c:	3801      	subs	r0, #1
 803017e:	3901      	subs	r1, #1
 8030180:	2800      	cmp	r0, #0
 8030182:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8030184:	6060      	str	r0, [r4, #4]
 8030186:	f340 80cc 	ble.w	8030322 <__ssvfscanf_r+0x112e>
 803018a:	6879      	ldr	r1, [r7, #4]
 803018c:	3101      	adds	r1, #1
 803018e:	6021      	str	r1, [r4, #0]
 8030190:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8030192:	2900      	cmp	r1, #0
 8030194:	d188      	bne.n	80300a8 <__ssvfscanf_r+0xeb4>
 8030196:	e052      	b.n	803023e <__ssvfscanf_r+0x104a>
 8030198:	0531      	lsls	r1, r6, #20
 803019a:	d550      	bpl.n	803023e <__ssvfscanf_r+0x104a>
 803019c:	eb1b 0c08 	adds.w	ip, fp, r8
 80301a0:	d041      	beq.n	8030226 <__ssvfscanf_r+0x1032>
 80301a2:	e04c      	b.n	803023e <__ssvfscanf_r+0x104a>
 80301a4:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 80301a8:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 80301ac:	d147      	bne.n	803023e <__ssvfscanf_r+0x104a>
 80301ae:	f1ba 0f01 	cmp.w	sl, #1
 80301b2:	d144      	bne.n	803023e <__ssvfscanf_r+0x104a>
 80301b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80301b6:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 80301ba:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 80301be:	3901      	subs	r1, #1
 80301c0:	f809 cb01 	strb.w	ip, [r9], #1
 80301c4:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 80301c8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80301ca:	f04f 0a00 	mov.w	sl, #0
 80301ce:	e003      	b.n	80301d8 <__ssvfscanf_r+0xfe4>
 80301d0:	0631      	lsls	r1, r6, #24
 80301d2:	d534      	bpl.n	803023e <__ssvfscanf_r+0x104a>
 80301d4:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 80301d8:	f809 0b01 	strb.w	r0, [r9], #1
 80301dc:	e7c9      	b.n	8030172 <__ssvfscanf_r+0xf7e>
 80301de:	f1bb 0f00 	cmp.w	fp, #0
 80301e2:	d10c      	bne.n	80301fe <__ssvfscanf_r+0x100a>
 80301e4:	f1ba 0f00 	cmp.w	sl, #0
 80301e8:	d10d      	bne.n	8030206 <__ssvfscanf_r+0x1012>
 80301ea:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 80301ee:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 80301f2:	d108      	bne.n	8030206 <__ssvfscanf_r+0x1012>
 80301f4:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 80301f8:	f04f 0b01 	mov.w	fp, #1
 80301fc:	e7ec      	b.n	80301d8 <__ssvfscanf_r+0xfe4>
 80301fe:	f1bb 0f02 	cmp.w	fp, #2
 8030202:	f000 8088 	beq.w	8030316 <__ssvfscanf_r+0x1122>
 8030206:	f1b8 0f01 	cmp.w	r8, #1
 803020a:	d002      	beq.n	8030212 <__ssvfscanf_r+0x101e>
 803020c:	f1b8 0f04 	cmp.w	r8, #4
 8030210:	d115      	bne.n	803023e <__ssvfscanf_r+0x104a>
 8030212:	f108 0801 	add.w	r8, r8, #1
 8030216:	fa5f f888 	uxtb.w	r8, r8
 803021a:	e7dd      	b.n	80301d8 <__ssvfscanf_r+0xfe4>
 803021c:	0531      	lsls	r1, r6, #20
 803021e:	d50b      	bpl.n	8030238 <__ssvfscanf_r+0x1044>
 8030220:	eb1b 0c08 	adds.w	ip, fp, r8
 8030224:	d108      	bne.n	8030238 <__ssvfscanf_r+0x1044>
 8030226:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 803022a:	46e0      	mov	r8, ip
 803022c:	46e3      	mov	fp, ip
 803022e:	e7d3      	b.n	80301d8 <__ssvfscanf_r+0xfe4>
 8030230:	08038658 	.word	0x08038658
 8030234:	08031f89 	.word	0x08031f89
 8030238:	f1bb 0f01 	cmp.w	fp, #1
 803023c:	d06e      	beq.n	803031c <__ssvfscanf_r+0x1128>
 803023e:	f1ba 0f00 	cmp.w	sl, #0
 8030242:	d001      	beq.n	8030248 <__ssvfscanf_r+0x1054>
 8030244:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 8030248:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 803024c:	f1bb 0f01 	cmp.w	fp, #1
 8030250:	d873      	bhi.n	803033a <__ssvfscanf_r+0x1146>
 8030252:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 8030256:	45a9      	cmp	r9, r5
 8030258:	f67f a8c2 	bls.w	802f3e0 <__ssvfscanf_r+0x1ec>
 803025c:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8030260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8030262:	4622      	mov	r2, r4
 8030264:	f7fc fdd6 	bl	802ce14 <_sungetc_r>
 8030268:	e7f5      	b.n	8030256 <__ssvfscanf_r+0x1062>
 803026a:	f1b8 0f00 	cmp.w	r8, #0
 803026e:	d10d      	bne.n	803028c <__ssvfscanf_r+0x1098>
 8030270:	f1ba 0f00 	cmp.w	sl, #0
 8030274:	d1e6      	bne.n	8030244 <__ssvfscanf_r+0x1050>
 8030276:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 803027a:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 803027e:	f040 8124 	bne.w	80304ca <__ssvfscanf_r+0x12d6>
 8030282:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8030286:	f04f 0801 	mov.w	r8, #1
 803028a:	e7a5      	b.n	80301d8 <__ssvfscanf_r+0xfe4>
 803028c:	f1b8 0f03 	cmp.w	r8, #3
 8030290:	d0bf      	beq.n	8030212 <__ssvfscanf_r+0x101e>
 8030292:	f1b8 0f05 	cmp.w	r8, #5
 8030296:	e7bb      	b.n	8030210 <__ssvfscanf_r+0x101c>
 8030298:	0531      	lsls	r1, r6, #20
 803029a:	d502      	bpl.n	80302a2 <__ssvfscanf_r+0x10ae>
 803029c:	eb1b 0c08 	adds.w	ip, fp, r8
 80302a0:	d0c1      	beq.n	8030226 <__ssvfscanf_r+0x1032>
 80302a2:	f1b8 0f02 	cmp.w	r8, #2
 80302a6:	d1ca      	bne.n	803023e <__ssvfscanf_r+0x104a>
 80302a8:	f04f 0803 	mov.w	r8, #3
 80302ac:	e794      	b.n	80301d8 <__ssvfscanf_r+0xfe4>
 80302ae:	f1b8 0f06 	cmp.w	r8, #6
 80302b2:	d1c4      	bne.n	803023e <__ssvfscanf_r+0x104a>
 80302b4:	f04f 0807 	mov.w	r8, #7
 80302b8:	e78e      	b.n	80301d8 <__ssvfscanf_r+0xfe4>
 80302ba:	f1b8 0f07 	cmp.w	r8, #7
 80302be:	d1be      	bne.n	803023e <__ssvfscanf_r+0x104a>
 80302c0:	f04f 0808 	mov.w	r8, #8
 80302c4:	e788      	b.n	80301d8 <__ssvfscanf_r+0xfe4>
 80302c6:	0531      	lsls	r1, r6, #20
 80302c8:	d5b9      	bpl.n	803023e <__ssvfscanf_r+0x104a>
 80302ca:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 80302ce:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 80302d2:	d005      	beq.n	80302e0 <__ssvfscanf_r+0x10ec>
 80302d4:	0571      	lsls	r1, r6, #21
 80302d6:	d5b2      	bpl.n	803023e <__ssvfscanf_r+0x104a>
 80302d8:	f1ba 0f00 	cmp.w	sl, #0
 80302dc:	f000 80f5 	beq.w	80304ca <__ssvfscanf_r+0x12d6>
 80302e0:	05b1      	lsls	r1, r6, #22
 80302e2:	bf58      	it	pl
 80302e4:	6939      	ldrpl	r1, [r7, #16]
 80302e6:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 80302ea:	bf5c      	itt	pl
 80302ec:	ebaa 0101 	subpl.w	r1, sl, r1
 80302f0:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 80302f4:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 80302f8:	e767      	b.n	80301ca <__ssvfscanf_r+0xfd6>
 80302fa:	0531      	lsls	r1, r6, #20
 80302fc:	d5e5      	bpl.n	80302ca <__ssvfscanf_r+0x10d6>
 80302fe:	e74d      	b.n	803019c <__ssvfscanf_r+0xfa8>
 8030300:	f892 c000 	ldrb.w	ip, [r2]
 8030304:	4584      	cmp	ip, r0
 8030306:	d19a      	bne.n	803023e <__ssvfscanf_r+0x104a>
 8030308:	05b1      	lsls	r1, r6, #22
 803030a:	d598      	bpl.n	803023e <__ssvfscanf_r+0x104a>
 803030c:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 8030310:	f8c7 a010 	str.w	sl, [r7, #16]
 8030314:	e760      	b.n	80301d8 <__ssvfscanf_r+0xfe4>
 8030316:	f04f 0b03 	mov.w	fp, #3
 803031a:	e75d      	b.n	80301d8 <__ssvfscanf_r+0xfe4>
 803031c:	f04f 0b02 	mov.w	fp, #2
 8030320:	e75a      	b.n	80301d8 <__ssvfscanf_r+0xfe4>
 8030322:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8030324:	4621      	mov	r1, r4
 8030326:	e9c7 2300 	strd	r2, r3, [r7]
 803032a:	f7fc fdae 	bl	802ce8a <__ssrefill_r>
 803032e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8030332:	2800      	cmp	r0, #0
 8030334:	f43f af2c 	beq.w	8030190 <__ssvfscanf_r+0xf9c>
 8030338:	e781      	b.n	803023e <__ssvfscanf_r+0x104a>
 803033a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 803033e:	2b06      	cmp	r3, #6
 8030340:	d827      	bhi.n	8030392 <__ssvfscanf_r+0x119e>
 8030342:	f1b8 0f02 	cmp.w	r8, #2
 8030346:	d834      	bhi.n	80303b2 <__ssvfscanf_r+0x11be>
 8030348:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803034c:	45a9      	cmp	r9, r5
 803034e:	f67f a847 	bls.w	802f3e0 <__ssvfscanf_r+0x1ec>
 8030352:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8030356:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8030358:	4622      	mov	r2, r4
 803035a:	f7fc fd5b 	bl	802ce14 <_sungetc_r>
 803035e:	e7f5      	b.n	803034c <__ssvfscanf_r+0x1158>
 8030360:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8030364:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8030366:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8030368:	4622      	mov	r2, r4
 803036a:	f7fc fd53 	bl	802ce14 <_sungetc_r>
 803036e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030370:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8030374:	fa5f fb8b 	uxtb.w	fp, fp
 8030378:	f1bb 0f02 	cmp.w	fp, #2
 803037c:	d1f0      	bne.n	8030360 <__ssvfscanf_r+0x116c>
 803037e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8030380:	f1a8 0803 	sub.w	r8, r8, #3
 8030384:	fa5f f888 	uxtb.w	r8, r8
 8030388:	eba3 0308 	sub.w	r3, r3, r8
 803038c:	eba9 0908 	sub.w	r9, r9, r8
 8030390:	633b      	str	r3, [r7, #48]	@ 0x30
 8030392:	05f3      	lsls	r3, r6, #23
 8030394:	d52d      	bpl.n	80303f2 <__ssvfscanf_r+0x11fe>
 8030396:	0570      	lsls	r0, r6, #21
 8030398:	d50e      	bpl.n	80303b8 <__ssvfscanf_r+0x11c4>
 803039a:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803039e:	45a9      	cmp	r9, r5
 80303a0:	f67f a81e 	bls.w	802f3e0 <__ssvfscanf_r+0x1ec>
 80303a4:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80303a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80303aa:	4622      	mov	r2, r4
 80303ac:	f7fc fd32 	bl	802ce14 <_sungetc_r>
 80303b0:	e7f5      	b.n	803039e <__ssvfscanf_r+0x11aa>
 80303b2:	46c3      	mov	fp, r8
 80303b4:	464b      	mov	r3, r9
 80303b6:	e7db      	b.n	8030370 <__ssvfscanf_r+0x117c>
 80303b8:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 80303bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80303be:	2965      	cmp	r1, #101	@ 0x65
 80303c0:	f109 38ff 	add.w	r8, r9, #4294967295	@ 0xffffffff
 80303c4:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80303c8:	d00c      	beq.n	80303e4 <__ssvfscanf_r+0x11f0>
 80303ca:	2945      	cmp	r1, #69	@ 0x45
 80303cc:	d00a      	beq.n	80303e4 <__ssvfscanf_r+0x11f0>
 80303ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80303d0:	4622      	mov	r2, r4
 80303d2:	f7fc fd1f 	bl	802ce14 <_sungetc_r>
 80303d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80303d8:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 80303dc:	f1a9 0802 	sub.w	r8, r9, #2
 80303e0:	f1a3 0b02 	sub.w	fp, r3, #2
 80303e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80303e6:	4622      	mov	r2, r4
 80303e8:	f7fc fd14 	bl	802ce14 <_sungetc_r>
 80303ec:	46c1      	mov	r9, r8
 80303ee:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 80303f2:	f016 0210 	ands.w	r2, r6, #16
 80303f6:	f47e af18 	bne.w	802f22a <__ssvfscanf_r+0x36>
 80303fa:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 80303fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8030402:	f889 2000 	strb.w	r2, [r9]
 8030406:	d119      	bne.n	803043c <__ssvfscanf_r+0x1248>
 8030408:	693b      	ldr	r3, [r7, #16]
 803040a:	4553      	cmp	r3, sl
 803040c:	eba3 020a 	sub.w	r2, r3, sl
 8030410:	d121      	bne.n	8030456 <__ssvfscanf_r+0x1262>
 8030412:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8030416:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8030418:	2200      	movs	r2, #0
 803041a:	f001 fd41 	bl	8031ea0 <_strtod_r>
 803041e:	07f1      	lsls	r1, r6, #31
 8030420:	ec59 8b10 	vmov	r8, r9, d0
 8030424:	f105 0a04 	add.w	sl, r5, #4
 8030428:	d520      	bpl.n	803046c <__ssvfscanf_r+0x1278>
 803042a:	682b      	ldr	r3, [r5, #0]
 803042c:	ed83 0b00 	vstr	d0, [r3]
 8030430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030432:	3301      	adds	r3, #1
 8030434:	627b      	str	r3, [r7, #36]	@ 0x24
 8030436:	4655      	mov	r5, sl
 8030438:	f7fe bef7 	b.w	802f22a <__ssvfscanf_r+0x36>
 803043c:	68fb      	ldr	r3, [r7, #12]
 803043e:	2b00      	cmp	r3, #0
 8030440:	d0e7      	beq.n	8030412 <__ssvfscanf_r+0x121e>
 8030442:	68b9      	ldr	r1, [r7, #8]
 8030444:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8030446:	230a      	movs	r3, #10
 8030448:	3101      	adds	r1, #1
 803044a:	f7f8 fe9d 	bl	8029188 <_strtol_r>
 803044e:	68fb      	ldr	r3, [r7, #12]
 8030450:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8030454:	1ac2      	subs	r2, r0, r3
 8030456:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 803045a:	4599      	cmp	r9, r3
 803045c:	bf28      	it	cs
 803045e:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 8030462:	491b      	ldr	r1, [pc, #108]	@ (80304d0 <__ssvfscanf_r+0x12dc>)
 8030464:	4648      	mov	r0, r9
 8030466:	f7f8 ff49 	bl	80292fc <sprintf>
 803046a:	e7d2      	b.n	8030412 <__ssvfscanf_r+0x121e>
 803046c:	07b2      	lsls	r2, r6, #30
 803046e:	682d      	ldr	r5, [r5, #0]
 8030470:	d502      	bpl.n	8030478 <__ssvfscanf_r+0x1284>
 8030472:	ed85 0b00 	vstr	d0, [r5]
 8030476:	e7db      	b.n	8030430 <__ssvfscanf_r+0x123c>
 8030478:	4642      	mov	r2, r8
 803047a:	464b      	mov	r3, r9
 803047c:	4640      	mov	r0, r8
 803047e:	4649      	mov	r1, r9
 8030480:	f7e0 fb6c 	bl	8010b5c <__aeabi_dcmpun>
 8030484:	b128      	cbz	r0, 8030492 <__ssvfscanf_r+0x129e>
 8030486:	4813      	ldr	r0, [pc, #76]	@ (80304d4 <__ssvfscanf_r+0x12e0>)
 8030488:	f002 f8f6 	bl	8032678 <nanf>
 803048c:	ed85 0a00 	vstr	s0, [r5]
 8030490:	e7ce      	b.n	8030430 <__ssvfscanf_r+0x123c>
 8030492:	4640      	mov	r0, r8
 8030494:	4649      	mov	r1, r9
 8030496:	f7e0 fbbf 	bl	8010c18 <__aeabi_d2f>
 803049a:	6028      	str	r0, [r5, #0]
 803049c:	e7c8      	b.n	8030430 <__ssvfscanf_r+0x123c>
 803049e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80304a2:	6818      	ldr	r0, [r3, #0]
 80304a4:	f7fb fd3a 	bl	802bf1c <free>
 80304a8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80304ac:	3401      	adds	r4, #1
 80304ae:	601e      	str	r6, [r3, #0]
 80304b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80304b2:	681d      	ldr	r5, [r3, #0]
 80304b4:	88db      	ldrh	r3, [r3, #6]
 80304b6:	42a3      	cmp	r3, r4
 80304b8:	dcf1      	bgt.n	803049e <__ssvfscanf_r+0x12aa>
 80304ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80304be:	627b      	str	r3, [r7, #36]	@ 0x24
 80304c0:	f7ff b85c 	b.w	802f57c <__ssvfscanf_r+0x388>
 80304c4:	2400      	movs	r4, #0
 80304c6:	4626      	mov	r6, r4
 80304c8:	e7f2      	b.n	80304b0 <__ssvfscanf_r+0x12bc>
 80304ca:	f04f 0a00 	mov.w	sl, #0
 80304ce:	e6bb      	b.n	8030248 <__ssvfscanf_r+0x1054>
 80304d0:	08038652 	.word	0x08038652
 80304d4:	080380ba 	.word	0x080380ba

080304d8 <_putc_r>:
 80304d8:	b570      	push	{r4, r5, r6, lr}
 80304da:	460d      	mov	r5, r1
 80304dc:	4614      	mov	r4, r2
 80304de:	4606      	mov	r6, r0
 80304e0:	b118      	cbz	r0, 80304ea <_putc_r+0x12>
 80304e2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80304e4:	b90b      	cbnz	r3, 80304ea <_putc_r+0x12>
 80304e6:	f7f9 f825 	bl	8029534 <__sinit>
 80304ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80304ec:	07d8      	lsls	r0, r3, #31
 80304ee:	d405      	bmi.n	80304fc <_putc_r+0x24>
 80304f0:	89a3      	ldrh	r3, [r4, #12]
 80304f2:	0599      	lsls	r1, r3, #22
 80304f4:	d402      	bmi.n	80304fc <_putc_r+0x24>
 80304f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80304f8:	f7fa fcfb 	bl	802aef2 <__retarget_lock_acquire_recursive>
 80304fc:	68a3      	ldr	r3, [r4, #8]
 80304fe:	3b01      	subs	r3, #1
 8030500:	2b00      	cmp	r3, #0
 8030502:	60a3      	str	r3, [r4, #8]
 8030504:	da05      	bge.n	8030512 <_putc_r+0x3a>
 8030506:	69a2      	ldr	r2, [r4, #24]
 8030508:	4293      	cmp	r3, r2
 803050a:	db12      	blt.n	8030532 <_putc_r+0x5a>
 803050c:	b2eb      	uxtb	r3, r5
 803050e:	2b0a      	cmp	r3, #10
 8030510:	d00f      	beq.n	8030532 <_putc_r+0x5a>
 8030512:	6823      	ldr	r3, [r4, #0]
 8030514:	1c5a      	adds	r2, r3, #1
 8030516:	6022      	str	r2, [r4, #0]
 8030518:	701d      	strb	r5, [r3, #0]
 803051a:	b2ed      	uxtb	r5, r5
 803051c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803051e:	07da      	lsls	r2, r3, #31
 8030520:	d405      	bmi.n	803052e <_putc_r+0x56>
 8030522:	89a3      	ldrh	r3, [r4, #12]
 8030524:	059b      	lsls	r3, r3, #22
 8030526:	d402      	bmi.n	803052e <_putc_r+0x56>
 8030528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803052a:	f7fa fce4 	bl	802aef6 <__retarget_lock_release_recursive>
 803052e:	4628      	mov	r0, r5
 8030530:	bd70      	pop	{r4, r5, r6, pc}
 8030532:	4629      	mov	r1, r5
 8030534:	4622      	mov	r2, r4
 8030536:	4630      	mov	r0, r6
 8030538:	f001 fd79 	bl	803202e <__swbuf_r>
 803053c:	4605      	mov	r5, r0
 803053e:	e7ed      	b.n	803051c <_putc_r+0x44>

08030540 <__malloc_lock>:
 8030540:	4801      	ldr	r0, [pc, #4]	@ (8030548 <__malloc_lock+0x8>)
 8030542:	f7fa bcd6 	b.w	802aef2 <__retarget_lock_acquire_recursive>
 8030546:	bf00      	nop
 8030548:	2001818a 	.word	0x2001818a

0803054c <__malloc_unlock>:
 803054c:	4801      	ldr	r0, [pc, #4]	@ (8030554 <__malloc_unlock+0x8>)
 803054e:	f7fa bcd2 	b.w	802aef6 <__retarget_lock_release_recursive>
 8030552:	bf00      	nop
 8030554:	2001818a 	.word	0x2001818a

08030558 <_Balloc>:
 8030558:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 803055a:	b570      	push	{r4, r5, r6, lr}
 803055c:	4605      	mov	r5, r0
 803055e:	460c      	mov	r4, r1
 8030560:	b17b      	cbz	r3, 8030582 <_Balloc+0x2a>
 8030562:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8030564:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8030568:	b9a0      	cbnz	r0, 8030594 <_Balloc+0x3c>
 803056a:	2101      	movs	r1, #1
 803056c:	fa01 f604 	lsl.w	r6, r1, r4
 8030570:	1d72      	adds	r2, r6, #5
 8030572:	0092      	lsls	r2, r2, #2
 8030574:	4628      	mov	r0, r5
 8030576:	f002 f885 	bl	8032684 <_calloc_r>
 803057a:	b148      	cbz	r0, 8030590 <_Balloc+0x38>
 803057c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8030580:	e00b      	b.n	803059a <_Balloc+0x42>
 8030582:	2221      	movs	r2, #33	@ 0x21
 8030584:	2104      	movs	r1, #4
 8030586:	f002 f87d 	bl	8032684 <_calloc_r>
 803058a:	6468      	str	r0, [r5, #68]	@ 0x44
 803058c:	2800      	cmp	r0, #0
 803058e:	d1e8      	bne.n	8030562 <_Balloc+0xa>
 8030590:	2000      	movs	r0, #0
 8030592:	bd70      	pop	{r4, r5, r6, pc}
 8030594:	6802      	ldr	r2, [r0, #0]
 8030596:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 803059a:	2300      	movs	r3, #0
 803059c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80305a0:	e7f7      	b.n	8030592 <_Balloc+0x3a>

080305a2 <_Bfree>:
 80305a2:	b131      	cbz	r1, 80305b2 <_Bfree+0x10>
 80305a4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80305a6:	684a      	ldr	r2, [r1, #4]
 80305a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80305ac:	6008      	str	r0, [r1, #0]
 80305ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80305b2:	4770      	bx	lr

080305b4 <__multadd>:
 80305b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80305b8:	690d      	ldr	r5, [r1, #16]
 80305ba:	4607      	mov	r7, r0
 80305bc:	460c      	mov	r4, r1
 80305be:	461e      	mov	r6, r3
 80305c0:	f101 0c14 	add.w	ip, r1, #20
 80305c4:	2000      	movs	r0, #0
 80305c6:	f8dc 3000 	ldr.w	r3, [ip]
 80305ca:	b299      	uxth	r1, r3
 80305cc:	fb02 6101 	mla	r1, r2, r1, r6
 80305d0:	0c1e      	lsrs	r6, r3, #16
 80305d2:	0c0b      	lsrs	r3, r1, #16
 80305d4:	fb02 3306 	mla	r3, r2, r6, r3
 80305d8:	b289      	uxth	r1, r1
 80305da:	3001      	adds	r0, #1
 80305dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80305e0:	4285      	cmp	r5, r0
 80305e2:	f84c 1b04 	str.w	r1, [ip], #4
 80305e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80305ea:	dcec      	bgt.n	80305c6 <__multadd+0x12>
 80305ec:	b30e      	cbz	r6, 8030632 <__multadd+0x7e>
 80305ee:	68a3      	ldr	r3, [r4, #8]
 80305f0:	42ab      	cmp	r3, r5
 80305f2:	dc19      	bgt.n	8030628 <__multadd+0x74>
 80305f4:	6861      	ldr	r1, [r4, #4]
 80305f6:	4638      	mov	r0, r7
 80305f8:	3101      	adds	r1, #1
 80305fa:	f7ff ffad 	bl	8030558 <_Balloc>
 80305fe:	4680      	mov	r8, r0
 8030600:	b928      	cbnz	r0, 803060e <__multadd+0x5a>
 8030602:	4602      	mov	r2, r0
 8030604:	4b0c      	ldr	r3, [pc, #48]	@ (8030638 <__multadd+0x84>)
 8030606:	480d      	ldr	r0, [pc, #52]	@ (803063c <__multadd+0x88>)
 8030608:	21ba      	movs	r1, #186	@ 0xba
 803060a:	f7f6 fce7 	bl	8026fdc <__assert_func>
 803060e:	6922      	ldr	r2, [r4, #16]
 8030610:	3202      	adds	r2, #2
 8030612:	f104 010c 	add.w	r1, r4, #12
 8030616:	0092      	lsls	r2, r2, #2
 8030618:	300c      	adds	r0, #12
 803061a:	f7fa fc6d 	bl	802aef8 <memcpy>
 803061e:	4621      	mov	r1, r4
 8030620:	4638      	mov	r0, r7
 8030622:	f7ff ffbe 	bl	80305a2 <_Bfree>
 8030626:	4644      	mov	r4, r8
 8030628:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 803062c:	3501      	adds	r5, #1
 803062e:	615e      	str	r6, [r3, #20]
 8030630:	6125      	str	r5, [r4, #16]
 8030632:	4620      	mov	r0, r4
 8030634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030638:	08038586 	.word	0x08038586
 803063c:	0803867a 	.word	0x0803867a

08030640 <__s2b>:
 8030640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8030644:	460c      	mov	r4, r1
 8030646:	4615      	mov	r5, r2
 8030648:	461f      	mov	r7, r3
 803064a:	2209      	movs	r2, #9
 803064c:	3308      	adds	r3, #8
 803064e:	4606      	mov	r6, r0
 8030650:	fb93 f3f2 	sdiv	r3, r3, r2
 8030654:	2100      	movs	r1, #0
 8030656:	2201      	movs	r2, #1
 8030658:	429a      	cmp	r2, r3
 803065a:	db09      	blt.n	8030670 <__s2b+0x30>
 803065c:	4630      	mov	r0, r6
 803065e:	f7ff ff7b 	bl	8030558 <_Balloc>
 8030662:	b940      	cbnz	r0, 8030676 <__s2b+0x36>
 8030664:	4602      	mov	r2, r0
 8030666:	4b19      	ldr	r3, [pc, #100]	@ (80306cc <__s2b+0x8c>)
 8030668:	4819      	ldr	r0, [pc, #100]	@ (80306d0 <__s2b+0x90>)
 803066a:	21d3      	movs	r1, #211	@ 0xd3
 803066c:	f7f6 fcb6 	bl	8026fdc <__assert_func>
 8030670:	0052      	lsls	r2, r2, #1
 8030672:	3101      	adds	r1, #1
 8030674:	e7f0      	b.n	8030658 <__s2b+0x18>
 8030676:	9b08      	ldr	r3, [sp, #32]
 8030678:	6143      	str	r3, [r0, #20]
 803067a:	2d09      	cmp	r5, #9
 803067c:	f04f 0301 	mov.w	r3, #1
 8030680:	6103      	str	r3, [r0, #16]
 8030682:	dd16      	ble.n	80306b2 <__s2b+0x72>
 8030684:	f104 0909 	add.w	r9, r4, #9
 8030688:	46c8      	mov	r8, r9
 803068a:	442c      	add	r4, r5
 803068c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8030690:	4601      	mov	r1, r0
 8030692:	3b30      	subs	r3, #48	@ 0x30
 8030694:	220a      	movs	r2, #10
 8030696:	4630      	mov	r0, r6
 8030698:	f7ff ff8c 	bl	80305b4 <__multadd>
 803069c:	45a0      	cmp	r8, r4
 803069e:	d1f5      	bne.n	803068c <__s2b+0x4c>
 80306a0:	f1a5 0408 	sub.w	r4, r5, #8
 80306a4:	444c      	add	r4, r9
 80306a6:	1b2d      	subs	r5, r5, r4
 80306a8:	1963      	adds	r3, r4, r5
 80306aa:	42bb      	cmp	r3, r7
 80306ac:	db04      	blt.n	80306b8 <__s2b+0x78>
 80306ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80306b2:	340a      	adds	r4, #10
 80306b4:	2509      	movs	r5, #9
 80306b6:	e7f6      	b.n	80306a6 <__s2b+0x66>
 80306b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80306bc:	4601      	mov	r1, r0
 80306be:	3b30      	subs	r3, #48	@ 0x30
 80306c0:	220a      	movs	r2, #10
 80306c2:	4630      	mov	r0, r6
 80306c4:	f7ff ff76 	bl	80305b4 <__multadd>
 80306c8:	e7ee      	b.n	80306a8 <__s2b+0x68>
 80306ca:	bf00      	nop
 80306cc:	08038586 	.word	0x08038586
 80306d0:	0803867a 	.word	0x0803867a

080306d4 <__hi0bits>:
 80306d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80306d8:	4603      	mov	r3, r0
 80306da:	bf36      	itet	cc
 80306dc:	0403      	lslcc	r3, r0, #16
 80306de:	2000      	movcs	r0, #0
 80306e0:	2010      	movcc	r0, #16
 80306e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80306e6:	bf3c      	itt	cc
 80306e8:	021b      	lslcc	r3, r3, #8
 80306ea:	3008      	addcc	r0, #8
 80306ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80306f0:	bf3c      	itt	cc
 80306f2:	011b      	lslcc	r3, r3, #4
 80306f4:	3004      	addcc	r0, #4
 80306f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80306fa:	bf3c      	itt	cc
 80306fc:	009b      	lslcc	r3, r3, #2
 80306fe:	3002      	addcc	r0, #2
 8030700:	2b00      	cmp	r3, #0
 8030702:	db05      	blt.n	8030710 <__hi0bits+0x3c>
 8030704:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8030708:	f100 0001 	add.w	r0, r0, #1
 803070c:	bf08      	it	eq
 803070e:	2020      	moveq	r0, #32
 8030710:	4770      	bx	lr

08030712 <__lo0bits>:
 8030712:	6803      	ldr	r3, [r0, #0]
 8030714:	4602      	mov	r2, r0
 8030716:	f013 0007 	ands.w	r0, r3, #7
 803071a:	d00b      	beq.n	8030734 <__lo0bits+0x22>
 803071c:	07d9      	lsls	r1, r3, #31
 803071e:	d421      	bmi.n	8030764 <__lo0bits+0x52>
 8030720:	0798      	lsls	r0, r3, #30
 8030722:	bf49      	itett	mi
 8030724:	085b      	lsrmi	r3, r3, #1
 8030726:	089b      	lsrpl	r3, r3, #2
 8030728:	2001      	movmi	r0, #1
 803072a:	6013      	strmi	r3, [r2, #0]
 803072c:	bf5c      	itt	pl
 803072e:	6013      	strpl	r3, [r2, #0]
 8030730:	2002      	movpl	r0, #2
 8030732:	4770      	bx	lr
 8030734:	b299      	uxth	r1, r3
 8030736:	b909      	cbnz	r1, 803073c <__lo0bits+0x2a>
 8030738:	0c1b      	lsrs	r3, r3, #16
 803073a:	2010      	movs	r0, #16
 803073c:	b2d9      	uxtb	r1, r3
 803073e:	b909      	cbnz	r1, 8030744 <__lo0bits+0x32>
 8030740:	3008      	adds	r0, #8
 8030742:	0a1b      	lsrs	r3, r3, #8
 8030744:	0719      	lsls	r1, r3, #28
 8030746:	bf04      	itt	eq
 8030748:	091b      	lsreq	r3, r3, #4
 803074a:	3004      	addeq	r0, #4
 803074c:	0799      	lsls	r1, r3, #30
 803074e:	bf04      	itt	eq
 8030750:	089b      	lsreq	r3, r3, #2
 8030752:	3002      	addeq	r0, #2
 8030754:	07d9      	lsls	r1, r3, #31
 8030756:	d403      	bmi.n	8030760 <__lo0bits+0x4e>
 8030758:	085b      	lsrs	r3, r3, #1
 803075a:	f100 0001 	add.w	r0, r0, #1
 803075e:	d003      	beq.n	8030768 <__lo0bits+0x56>
 8030760:	6013      	str	r3, [r2, #0]
 8030762:	4770      	bx	lr
 8030764:	2000      	movs	r0, #0
 8030766:	4770      	bx	lr
 8030768:	2020      	movs	r0, #32
 803076a:	4770      	bx	lr

0803076c <__i2b>:
 803076c:	b510      	push	{r4, lr}
 803076e:	460c      	mov	r4, r1
 8030770:	2101      	movs	r1, #1
 8030772:	f7ff fef1 	bl	8030558 <_Balloc>
 8030776:	4602      	mov	r2, r0
 8030778:	b928      	cbnz	r0, 8030786 <__i2b+0x1a>
 803077a:	4b05      	ldr	r3, [pc, #20]	@ (8030790 <__i2b+0x24>)
 803077c:	4805      	ldr	r0, [pc, #20]	@ (8030794 <__i2b+0x28>)
 803077e:	f240 1145 	movw	r1, #325	@ 0x145
 8030782:	f7f6 fc2b 	bl	8026fdc <__assert_func>
 8030786:	2301      	movs	r3, #1
 8030788:	6144      	str	r4, [r0, #20]
 803078a:	6103      	str	r3, [r0, #16]
 803078c:	bd10      	pop	{r4, pc}
 803078e:	bf00      	nop
 8030790:	08038586 	.word	0x08038586
 8030794:	0803867a 	.word	0x0803867a

08030798 <__multiply>:
 8030798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803079c:	4614      	mov	r4, r2
 803079e:	690a      	ldr	r2, [r1, #16]
 80307a0:	6923      	ldr	r3, [r4, #16]
 80307a2:	429a      	cmp	r2, r3
 80307a4:	bfa8      	it	ge
 80307a6:	4623      	movge	r3, r4
 80307a8:	460f      	mov	r7, r1
 80307aa:	bfa4      	itt	ge
 80307ac:	460c      	movge	r4, r1
 80307ae:	461f      	movge	r7, r3
 80307b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80307b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80307b8:	68a3      	ldr	r3, [r4, #8]
 80307ba:	6861      	ldr	r1, [r4, #4]
 80307bc:	eb0a 0609 	add.w	r6, sl, r9
 80307c0:	42b3      	cmp	r3, r6
 80307c2:	b085      	sub	sp, #20
 80307c4:	bfb8      	it	lt
 80307c6:	3101      	addlt	r1, #1
 80307c8:	f7ff fec6 	bl	8030558 <_Balloc>
 80307cc:	b930      	cbnz	r0, 80307dc <__multiply+0x44>
 80307ce:	4602      	mov	r2, r0
 80307d0:	4b44      	ldr	r3, [pc, #272]	@ (80308e4 <__multiply+0x14c>)
 80307d2:	4845      	ldr	r0, [pc, #276]	@ (80308e8 <__multiply+0x150>)
 80307d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80307d8:	f7f6 fc00 	bl	8026fdc <__assert_func>
 80307dc:	f100 0514 	add.w	r5, r0, #20
 80307e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80307e4:	462b      	mov	r3, r5
 80307e6:	2200      	movs	r2, #0
 80307e8:	4543      	cmp	r3, r8
 80307ea:	d321      	bcc.n	8030830 <__multiply+0x98>
 80307ec:	f107 0114 	add.w	r1, r7, #20
 80307f0:	f104 0214 	add.w	r2, r4, #20
 80307f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80307f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80307fc:	9302      	str	r3, [sp, #8]
 80307fe:	1b13      	subs	r3, r2, r4
 8030800:	3b15      	subs	r3, #21
 8030802:	f023 0303 	bic.w	r3, r3, #3
 8030806:	3304      	adds	r3, #4
 8030808:	f104 0715 	add.w	r7, r4, #21
 803080c:	42ba      	cmp	r2, r7
 803080e:	bf38      	it	cc
 8030810:	2304      	movcc	r3, #4
 8030812:	9301      	str	r3, [sp, #4]
 8030814:	9b02      	ldr	r3, [sp, #8]
 8030816:	9103      	str	r1, [sp, #12]
 8030818:	428b      	cmp	r3, r1
 803081a:	d80c      	bhi.n	8030836 <__multiply+0x9e>
 803081c:	2e00      	cmp	r6, #0
 803081e:	dd03      	ble.n	8030828 <__multiply+0x90>
 8030820:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8030824:	2b00      	cmp	r3, #0
 8030826:	d05b      	beq.n	80308e0 <__multiply+0x148>
 8030828:	6106      	str	r6, [r0, #16]
 803082a:	b005      	add	sp, #20
 803082c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030830:	f843 2b04 	str.w	r2, [r3], #4
 8030834:	e7d8      	b.n	80307e8 <__multiply+0x50>
 8030836:	f8b1 a000 	ldrh.w	sl, [r1]
 803083a:	f1ba 0f00 	cmp.w	sl, #0
 803083e:	d024      	beq.n	803088a <__multiply+0xf2>
 8030840:	f104 0e14 	add.w	lr, r4, #20
 8030844:	46a9      	mov	r9, r5
 8030846:	f04f 0c00 	mov.w	ip, #0
 803084a:	f85e 7b04 	ldr.w	r7, [lr], #4
 803084e:	f8d9 3000 	ldr.w	r3, [r9]
 8030852:	fa1f fb87 	uxth.w	fp, r7
 8030856:	b29b      	uxth	r3, r3
 8030858:	fb0a 330b 	mla	r3, sl, fp, r3
 803085c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8030860:	f8d9 7000 	ldr.w	r7, [r9]
 8030864:	4463      	add	r3, ip
 8030866:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 803086a:	fb0a c70b 	mla	r7, sl, fp, ip
 803086e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8030872:	b29b      	uxth	r3, r3
 8030874:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8030878:	4572      	cmp	r2, lr
 803087a:	f849 3b04 	str.w	r3, [r9], #4
 803087e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8030882:	d8e2      	bhi.n	803084a <__multiply+0xb2>
 8030884:	9b01      	ldr	r3, [sp, #4]
 8030886:	f845 c003 	str.w	ip, [r5, r3]
 803088a:	9b03      	ldr	r3, [sp, #12]
 803088c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8030890:	3104      	adds	r1, #4
 8030892:	f1b9 0f00 	cmp.w	r9, #0
 8030896:	d021      	beq.n	80308dc <__multiply+0x144>
 8030898:	682b      	ldr	r3, [r5, #0]
 803089a:	f104 0c14 	add.w	ip, r4, #20
 803089e:	46ae      	mov	lr, r5
 80308a0:	f04f 0a00 	mov.w	sl, #0
 80308a4:	f8bc b000 	ldrh.w	fp, [ip]
 80308a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80308ac:	fb09 770b 	mla	r7, r9, fp, r7
 80308b0:	4457      	add	r7, sl
 80308b2:	b29b      	uxth	r3, r3
 80308b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80308b8:	f84e 3b04 	str.w	r3, [lr], #4
 80308bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80308c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80308c4:	f8be 3000 	ldrh.w	r3, [lr]
 80308c8:	fb09 330a 	mla	r3, r9, sl, r3
 80308cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80308d0:	4562      	cmp	r2, ip
 80308d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80308d6:	d8e5      	bhi.n	80308a4 <__multiply+0x10c>
 80308d8:	9f01      	ldr	r7, [sp, #4]
 80308da:	51eb      	str	r3, [r5, r7]
 80308dc:	3504      	adds	r5, #4
 80308de:	e799      	b.n	8030814 <__multiply+0x7c>
 80308e0:	3e01      	subs	r6, #1
 80308e2:	e79b      	b.n	803081c <__multiply+0x84>
 80308e4:	08038586 	.word	0x08038586
 80308e8:	0803867a 	.word	0x0803867a

080308ec <__pow5mult>:
 80308ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80308f0:	4615      	mov	r5, r2
 80308f2:	f012 0203 	ands.w	r2, r2, #3
 80308f6:	4607      	mov	r7, r0
 80308f8:	460e      	mov	r6, r1
 80308fa:	d007      	beq.n	803090c <__pow5mult+0x20>
 80308fc:	4c1a      	ldr	r4, [pc, #104]	@ (8030968 <__pow5mult+0x7c>)
 80308fe:	3a01      	subs	r2, #1
 8030900:	2300      	movs	r3, #0
 8030902:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8030906:	f7ff fe55 	bl	80305b4 <__multadd>
 803090a:	4606      	mov	r6, r0
 803090c:	10ad      	asrs	r5, r5, #2
 803090e:	d027      	beq.n	8030960 <__pow5mult+0x74>
 8030910:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8030912:	b944      	cbnz	r4, 8030926 <__pow5mult+0x3a>
 8030914:	f240 2171 	movw	r1, #625	@ 0x271
 8030918:	4638      	mov	r0, r7
 803091a:	f7ff ff27 	bl	803076c <__i2b>
 803091e:	2300      	movs	r3, #0
 8030920:	6438      	str	r0, [r7, #64]	@ 0x40
 8030922:	4604      	mov	r4, r0
 8030924:	6003      	str	r3, [r0, #0]
 8030926:	f04f 0900 	mov.w	r9, #0
 803092a:	07eb      	lsls	r3, r5, #31
 803092c:	d50a      	bpl.n	8030944 <__pow5mult+0x58>
 803092e:	4631      	mov	r1, r6
 8030930:	4622      	mov	r2, r4
 8030932:	4638      	mov	r0, r7
 8030934:	f7ff ff30 	bl	8030798 <__multiply>
 8030938:	4631      	mov	r1, r6
 803093a:	4680      	mov	r8, r0
 803093c:	4638      	mov	r0, r7
 803093e:	f7ff fe30 	bl	80305a2 <_Bfree>
 8030942:	4646      	mov	r6, r8
 8030944:	106d      	asrs	r5, r5, #1
 8030946:	d00b      	beq.n	8030960 <__pow5mult+0x74>
 8030948:	6820      	ldr	r0, [r4, #0]
 803094a:	b938      	cbnz	r0, 803095c <__pow5mult+0x70>
 803094c:	4622      	mov	r2, r4
 803094e:	4621      	mov	r1, r4
 8030950:	4638      	mov	r0, r7
 8030952:	f7ff ff21 	bl	8030798 <__multiply>
 8030956:	6020      	str	r0, [r4, #0]
 8030958:	f8c0 9000 	str.w	r9, [r0]
 803095c:	4604      	mov	r4, r0
 803095e:	e7e4      	b.n	803092a <__pow5mult+0x3e>
 8030960:	4630      	mov	r0, r6
 8030962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8030966:	bf00      	nop
 8030968:	080386d4 	.word	0x080386d4

0803096c <__lshift>:
 803096c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8030970:	460c      	mov	r4, r1
 8030972:	6849      	ldr	r1, [r1, #4]
 8030974:	6923      	ldr	r3, [r4, #16]
 8030976:	eb03 1862 	add.w	r8, r3, r2, asr #5
 803097a:	68a3      	ldr	r3, [r4, #8]
 803097c:	4607      	mov	r7, r0
 803097e:	4691      	mov	r9, r2
 8030980:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8030984:	f108 0601 	add.w	r6, r8, #1
 8030988:	42b3      	cmp	r3, r6
 803098a:	db0b      	blt.n	80309a4 <__lshift+0x38>
 803098c:	4638      	mov	r0, r7
 803098e:	f7ff fde3 	bl	8030558 <_Balloc>
 8030992:	4605      	mov	r5, r0
 8030994:	b948      	cbnz	r0, 80309aa <__lshift+0x3e>
 8030996:	4602      	mov	r2, r0
 8030998:	4b28      	ldr	r3, [pc, #160]	@ (8030a3c <__lshift+0xd0>)
 803099a:	4829      	ldr	r0, [pc, #164]	@ (8030a40 <__lshift+0xd4>)
 803099c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80309a0:	f7f6 fb1c 	bl	8026fdc <__assert_func>
 80309a4:	3101      	adds	r1, #1
 80309a6:	005b      	lsls	r3, r3, #1
 80309a8:	e7ee      	b.n	8030988 <__lshift+0x1c>
 80309aa:	2300      	movs	r3, #0
 80309ac:	f100 0114 	add.w	r1, r0, #20
 80309b0:	f100 0210 	add.w	r2, r0, #16
 80309b4:	4618      	mov	r0, r3
 80309b6:	4553      	cmp	r3, sl
 80309b8:	db33      	blt.n	8030a22 <__lshift+0xb6>
 80309ba:	6920      	ldr	r0, [r4, #16]
 80309bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80309c0:	f104 0314 	add.w	r3, r4, #20
 80309c4:	f019 091f 	ands.w	r9, r9, #31
 80309c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80309cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80309d0:	d02b      	beq.n	8030a2a <__lshift+0xbe>
 80309d2:	f1c9 0e20 	rsb	lr, r9, #32
 80309d6:	468a      	mov	sl, r1
 80309d8:	2200      	movs	r2, #0
 80309da:	6818      	ldr	r0, [r3, #0]
 80309dc:	fa00 f009 	lsl.w	r0, r0, r9
 80309e0:	4310      	orrs	r0, r2
 80309e2:	f84a 0b04 	str.w	r0, [sl], #4
 80309e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80309ea:	459c      	cmp	ip, r3
 80309ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80309f0:	d8f3      	bhi.n	80309da <__lshift+0x6e>
 80309f2:	ebac 0304 	sub.w	r3, ip, r4
 80309f6:	3b15      	subs	r3, #21
 80309f8:	f023 0303 	bic.w	r3, r3, #3
 80309fc:	3304      	adds	r3, #4
 80309fe:	f104 0015 	add.w	r0, r4, #21
 8030a02:	4584      	cmp	ip, r0
 8030a04:	bf38      	it	cc
 8030a06:	2304      	movcc	r3, #4
 8030a08:	50ca      	str	r2, [r1, r3]
 8030a0a:	b10a      	cbz	r2, 8030a10 <__lshift+0xa4>
 8030a0c:	f108 0602 	add.w	r6, r8, #2
 8030a10:	3e01      	subs	r6, #1
 8030a12:	4638      	mov	r0, r7
 8030a14:	612e      	str	r6, [r5, #16]
 8030a16:	4621      	mov	r1, r4
 8030a18:	f7ff fdc3 	bl	80305a2 <_Bfree>
 8030a1c:	4628      	mov	r0, r5
 8030a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8030a22:	f842 0f04 	str.w	r0, [r2, #4]!
 8030a26:	3301      	adds	r3, #1
 8030a28:	e7c5      	b.n	80309b6 <__lshift+0x4a>
 8030a2a:	3904      	subs	r1, #4
 8030a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8030a30:	f841 2f04 	str.w	r2, [r1, #4]!
 8030a34:	459c      	cmp	ip, r3
 8030a36:	d8f9      	bhi.n	8030a2c <__lshift+0xc0>
 8030a38:	e7ea      	b.n	8030a10 <__lshift+0xa4>
 8030a3a:	bf00      	nop
 8030a3c:	08038586 	.word	0x08038586
 8030a40:	0803867a 	.word	0x0803867a

08030a44 <__mcmp>:
 8030a44:	690a      	ldr	r2, [r1, #16]
 8030a46:	4603      	mov	r3, r0
 8030a48:	6900      	ldr	r0, [r0, #16]
 8030a4a:	1a80      	subs	r0, r0, r2
 8030a4c:	b530      	push	{r4, r5, lr}
 8030a4e:	d10e      	bne.n	8030a6e <__mcmp+0x2a>
 8030a50:	3314      	adds	r3, #20
 8030a52:	3114      	adds	r1, #20
 8030a54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8030a58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8030a5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8030a60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8030a64:	4295      	cmp	r5, r2
 8030a66:	d003      	beq.n	8030a70 <__mcmp+0x2c>
 8030a68:	d205      	bcs.n	8030a76 <__mcmp+0x32>
 8030a6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8030a6e:	bd30      	pop	{r4, r5, pc}
 8030a70:	42a3      	cmp	r3, r4
 8030a72:	d3f3      	bcc.n	8030a5c <__mcmp+0x18>
 8030a74:	e7fb      	b.n	8030a6e <__mcmp+0x2a>
 8030a76:	2001      	movs	r0, #1
 8030a78:	e7f9      	b.n	8030a6e <__mcmp+0x2a>
	...

08030a7c <__mdiff>:
 8030a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030a80:	4689      	mov	r9, r1
 8030a82:	4606      	mov	r6, r0
 8030a84:	4611      	mov	r1, r2
 8030a86:	4648      	mov	r0, r9
 8030a88:	4614      	mov	r4, r2
 8030a8a:	f7ff ffdb 	bl	8030a44 <__mcmp>
 8030a8e:	1e05      	subs	r5, r0, #0
 8030a90:	d112      	bne.n	8030ab8 <__mdiff+0x3c>
 8030a92:	4629      	mov	r1, r5
 8030a94:	4630      	mov	r0, r6
 8030a96:	f7ff fd5f 	bl	8030558 <_Balloc>
 8030a9a:	4602      	mov	r2, r0
 8030a9c:	b928      	cbnz	r0, 8030aaa <__mdiff+0x2e>
 8030a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8030b9c <__mdiff+0x120>)
 8030aa0:	f240 2137 	movw	r1, #567	@ 0x237
 8030aa4:	483e      	ldr	r0, [pc, #248]	@ (8030ba0 <__mdiff+0x124>)
 8030aa6:	f7f6 fa99 	bl	8026fdc <__assert_func>
 8030aaa:	2301      	movs	r3, #1
 8030aac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8030ab0:	4610      	mov	r0, r2
 8030ab2:	b003      	add	sp, #12
 8030ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030ab8:	bfbc      	itt	lt
 8030aba:	464b      	movlt	r3, r9
 8030abc:	46a1      	movlt	r9, r4
 8030abe:	4630      	mov	r0, r6
 8030ac0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8030ac4:	bfba      	itte	lt
 8030ac6:	461c      	movlt	r4, r3
 8030ac8:	2501      	movlt	r5, #1
 8030aca:	2500      	movge	r5, #0
 8030acc:	f7ff fd44 	bl	8030558 <_Balloc>
 8030ad0:	4602      	mov	r2, r0
 8030ad2:	b918      	cbnz	r0, 8030adc <__mdiff+0x60>
 8030ad4:	4b31      	ldr	r3, [pc, #196]	@ (8030b9c <__mdiff+0x120>)
 8030ad6:	f240 2145 	movw	r1, #581	@ 0x245
 8030ada:	e7e3      	b.n	8030aa4 <__mdiff+0x28>
 8030adc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8030ae0:	6926      	ldr	r6, [r4, #16]
 8030ae2:	60c5      	str	r5, [r0, #12]
 8030ae4:	f109 0310 	add.w	r3, r9, #16
 8030ae8:	f109 0514 	add.w	r5, r9, #20
 8030aec:	f104 0e14 	add.w	lr, r4, #20
 8030af0:	f100 0b14 	add.w	fp, r0, #20
 8030af4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8030af8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8030afc:	9301      	str	r3, [sp, #4]
 8030afe:	46d9      	mov	r9, fp
 8030b00:	f04f 0c00 	mov.w	ip, #0
 8030b04:	9b01      	ldr	r3, [sp, #4]
 8030b06:	f85e 0b04 	ldr.w	r0, [lr], #4
 8030b0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8030b0e:	9301      	str	r3, [sp, #4]
 8030b10:	fa1f f38a 	uxth.w	r3, sl
 8030b14:	4619      	mov	r1, r3
 8030b16:	b283      	uxth	r3, r0
 8030b18:	1acb      	subs	r3, r1, r3
 8030b1a:	0c00      	lsrs	r0, r0, #16
 8030b1c:	4463      	add	r3, ip
 8030b1e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8030b22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8030b26:	b29b      	uxth	r3, r3
 8030b28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8030b2c:	4576      	cmp	r6, lr
 8030b2e:	f849 3b04 	str.w	r3, [r9], #4
 8030b32:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8030b36:	d8e5      	bhi.n	8030b04 <__mdiff+0x88>
 8030b38:	1b33      	subs	r3, r6, r4
 8030b3a:	3b15      	subs	r3, #21
 8030b3c:	f023 0303 	bic.w	r3, r3, #3
 8030b40:	3415      	adds	r4, #21
 8030b42:	3304      	adds	r3, #4
 8030b44:	42a6      	cmp	r6, r4
 8030b46:	bf38      	it	cc
 8030b48:	2304      	movcc	r3, #4
 8030b4a:	441d      	add	r5, r3
 8030b4c:	445b      	add	r3, fp
 8030b4e:	461e      	mov	r6, r3
 8030b50:	462c      	mov	r4, r5
 8030b52:	4544      	cmp	r4, r8
 8030b54:	d30e      	bcc.n	8030b74 <__mdiff+0xf8>
 8030b56:	f108 0103 	add.w	r1, r8, #3
 8030b5a:	1b49      	subs	r1, r1, r5
 8030b5c:	f021 0103 	bic.w	r1, r1, #3
 8030b60:	3d03      	subs	r5, #3
 8030b62:	45a8      	cmp	r8, r5
 8030b64:	bf38      	it	cc
 8030b66:	2100      	movcc	r1, #0
 8030b68:	440b      	add	r3, r1
 8030b6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8030b6e:	b191      	cbz	r1, 8030b96 <__mdiff+0x11a>
 8030b70:	6117      	str	r7, [r2, #16]
 8030b72:	e79d      	b.n	8030ab0 <__mdiff+0x34>
 8030b74:	f854 1b04 	ldr.w	r1, [r4], #4
 8030b78:	46e6      	mov	lr, ip
 8030b7a:	0c08      	lsrs	r0, r1, #16
 8030b7c:	fa1c fc81 	uxtah	ip, ip, r1
 8030b80:	4471      	add	r1, lr
 8030b82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8030b86:	b289      	uxth	r1, r1
 8030b88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8030b8c:	f846 1b04 	str.w	r1, [r6], #4
 8030b90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8030b94:	e7dd      	b.n	8030b52 <__mdiff+0xd6>
 8030b96:	3f01      	subs	r7, #1
 8030b98:	e7e7      	b.n	8030b6a <__mdiff+0xee>
 8030b9a:	bf00      	nop
 8030b9c:	08038586 	.word	0x08038586
 8030ba0:	0803867a 	.word	0x0803867a

08030ba4 <__ulp>:
 8030ba4:	b082      	sub	sp, #8
 8030ba6:	ed8d 0b00 	vstr	d0, [sp]
 8030baa:	9a01      	ldr	r2, [sp, #4]
 8030bac:	4b0f      	ldr	r3, [pc, #60]	@ (8030bec <__ulp+0x48>)
 8030bae:	4013      	ands	r3, r2
 8030bb0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8030bb4:	2b00      	cmp	r3, #0
 8030bb6:	dc08      	bgt.n	8030bca <__ulp+0x26>
 8030bb8:	425b      	negs	r3, r3
 8030bba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8030bbe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8030bc2:	da04      	bge.n	8030bce <__ulp+0x2a>
 8030bc4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8030bc8:	4113      	asrs	r3, r2
 8030bca:	2200      	movs	r2, #0
 8030bcc:	e008      	b.n	8030be0 <__ulp+0x3c>
 8030bce:	f1a2 0314 	sub.w	r3, r2, #20
 8030bd2:	2b1e      	cmp	r3, #30
 8030bd4:	bfda      	itte	le
 8030bd6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8030bda:	40da      	lsrle	r2, r3
 8030bdc:	2201      	movgt	r2, #1
 8030bde:	2300      	movs	r3, #0
 8030be0:	4619      	mov	r1, r3
 8030be2:	4610      	mov	r0, r2
 8030be4:	ec41 0b10 	vmov	d0, r0, r1
 8030be8:	b002      	add	sp, #8
 8030bea:	4770      	bx	lr
 8030bec:	7ff00000 	.word	0x7ff00000

08030bf0 <__b2d>:
 8030bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030bf4:	6906      	ldr	r6, [r0, #16]
 8030bf6:	f100 0814 	add.w	r8, r0, #20
 8030bfa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8030bfe:	1f37      	subs	r7, r6, #4
 8030c00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8030c04:	4610      	mov	r0, r2
 8030c06:	f7ff fd65 	bl	80306d4 <__hi0bits>
 8030c0a:	f1c0 0320 	rsb	r3, r0, #32
 8030c0e:	280a      	cmp	r0, #10
 8030c10:	600b      	str	r3, [r1, #0]
 8030c12:	491b      	ldr	r1, [pc, #108]	@ (8030c80 <__b2d+0x90>)
 8030c14:	dc15      	bgt.n	8030c42 <__b2d+0x52>
 8030c16:	f1c0 0c0b 	rsb	ip, r0, #11
 8030c1a:	fa22 f30c 	lsr.w	r3, r2, ip
 8030c1e:	45b8      	cmp	r8, r7
 8030c20:	ea43 0501 	orr.w	r5, r3, r1
 8030c24:	bf34      	ite	cc
 8030c26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8030c2a:	2300      	movcs	r3, #0
 8030c2c:	3015      	adds	r0, #21
 8030c2e:	fa02 f000 	lsl.w	r0, r2, r0
 8030c32:	fa23 f30c 	lsr.w	r3, r3, ip
 8030c36:	4303      	orrs	r3, r0
 8030c38:	461c      	mov	r4, r3
 8030c3a:	ec45 4b10 	vmov	d0, r4, r5
 8030c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030c42:	45b8      	cmp	r8, r7
 8030c44:	bf3a      	itte	cc
 8030c46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8030c4a:	f1a6 0708 	subcc.w	r7, r6, #8
 8030c4e:	2300      	movcs	r3, #0
 8030c50:	380b      	subs	r0, #11
 8030c52:	d012      	beq.n	8030c7a <__b2d+0x8a>
 8030c54:	f1c0 0120 	rsb	r1, r0, #32
 8030c58:	fa23 f401 	lsr.w	r4, r3, r1
 8030c5c:	4082      	lsls	r2, r0
 8030c5e:	4322      	orrs	r2, r4
 8030c60:	4547      	cmp	r7, r8
 8030c62:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8030c66:	bf8c      	ite	hi
 8030c68:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8030c6c:	2200      	movls	r2, #0
 8030c6e:	4083      	lsls	r3, r0
 8030c70:	40ca      	lsrs	r2, r1
 8030c72:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8030c76:	4313      	orrs	r3, r2
 8030c78:	e7de      	b.n	8030c38 <__b2d+0x48>
 8030c7a:	ea42 0501 	orr.w	r5, r2, r1
 8030c7e:	e7db      	b.n	8030c38 <__b2d+0x48>
 8030c80:	3ff00000 	.word	0x3ff00000

08030c84 <__d2b>:
 8030c84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8030c88:	460f      	mov	r7, r1
 8030c8a:	2101      	movs	r1, #1
 8030c8c:	ec59 8b10 	vmov	r8, r9, d0
 8030c90:	4616      	mov	r6, r2
 8030c92:	f7ff fc61 	bl	8030558 <_Balloc>
 8030c96:	4604      	mov	r4, r0
 8030c98:	b930      	cbnz	r0, 8030ca8 <__d2b+0x24>
 8030c9a:	4602      	mov	r2, r0
 8030c9c:	4b23      	ldr	r3, [pc, #140]	@ (8030d2c <__d2b+0xa8>)
 8030c9e:	4824      	ldr	r0, [pc, #144]	@ (8030d30 <__d2b+0xac>)
 8030ca0:	f240 310f 	movw	r1, #783	@ 0x30f
 8030ca4:	f7f6 f99a 	bl	8026fdc <__assert_func>
 8030ca8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8030cac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8030cb0:	b10d      	cbz	r5, 8030cb6 <__d2b+0x32>
 8030cb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8030cb6:	9301      	str	r3, [sp, #4]
 8030cb8:	f1b8 0300 	subs.w	r3, r8, #0
 8030cbc:	d023      	beq.n	8030d06 <__d2b+0x82>
 8030cbe:	4668      	mov	r0, sp
 8030cc0:	9300      	str	r3, [sp, #0]
 8030cc2:	f7ff fd26 	bl	8030712 <__lo0bits>
 8030cc6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8030cca:	b1d0      	cbz	r0, 8030d02 <__d2b+0x7e>
 8030ccc:	f1c0 0320 	rsb	r3, r0, #32
 8030cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8030cd4:	430b      	orrs	r3, r1
 8030cd6:	40c2      	lsrs	r2, r0
 8030cd8:	6163      	str	r3, [r4, #20]
 8030cda:	9201      	str	r2, [sp, #4]
 8030cdc:	9b01      	ldr	r3, [sp, #4]
 8030cde:	61a3      	str	r3, [r4, #24]
 8030ce0:	2b00      	cmp	r3, #0
 8030ce2:	bf0c      	ite	eq
 8030ce4:	2201      	moveq	r2, #1
 8030ce6:	2202      	movne	r2, #2
 8030ce8:	6122      	str	r2, [r4, #16]
 8030cea:	b1a5      	cbz	r5, 8030d16 <__d2b+0x92>
 8030cec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8030cf0:	4405      	add	r5, r0
 8030cf2:	603d      	str	r5, [r7, #0]
 8030cf4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8030cf8:	6030      	str	r0, [r6, #0]
 8030cfa:	4620      	mov	r0, r4
 8030cfc:	b003      	add	sp, #12
 8030cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8030d02:	6161      	str	r1, [r4, #20]
 8030d04:	e7ea      	b.n	8030cdc <__d2b+0x58>
 8030d06:	a801      	add	r0, sp, #4
 8030d08:	f7ff fd03 	bl	8030712 <__lo0bits>
 8030d0c:	9b01      	ldr	r3, [sp, #4]
 8030d0e:	6163      	str	r3, [r4, #20]
 8030d10:	3020      	adds	r0, #32
 8030d12:	2201      	movs	r2, #1
 8030d14:	e7e8      	b.n	8030ce8 <__d2b+0x64>
 8030d16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8030d1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8030d1e:	6038      	str	r0, [r7, #0]
 8030d20:	6918      	ldr	r0, [r3, #16]
 8030d22:	f7ff fcd7 	bl	80306d4 <__hi0bits>
 8030d26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8030d2a:	e7e5      	b.n	8030cf8 <__d2b+0x74>
 8030d2c:	08038586 	.word	0x08038586
 8030d30:	0803867a 	.word	0x0803867a

08030d34 <__ratio>:
 8030d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030d38:	b085      	sub	sp, #20
 8030d3a:	e9cd 1000 	strd	r1, r0, [sp]
 8030d3e:	a902      	add	r1, sp, #8
 8030d40:	f7ff ff56 	bl	8030bf0 <__b2d>
 8030d44:	9800      	ldr	r0, [sp, #0]
 8030d46:	a903      	add	r1, sp, #12
 8030d48:	ec55 4b10 	vmov	r4, r5, d0
 8030d4c:	f7ff ff50 	bl	8030bf0 <__b2d>
 8030d50:	9b01      	ldr	r3, [sp, #4]
 8030d52:	6919      	ldr	r1, [r3, #16]
 8030d54:	9b00      	ldr	r3, [sp, #0]
 8030d56:	691b      	ldr	r3, [r3, #16]
 8030d58:	1ac9      	subs	r1, r1, r3
 8030d5a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8030d5e:	1a9b      	subs	r3, r3, r2
 8030d60:	ec5b ab10 	vmov	sl, fp, d0
 8030d64:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8030d68:	2b00      	cmp	r3, #0
 8030d6a:	bfce      	itee	gt
 8030d6c:	462a      	movgt	r2, r5
 8030d6e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8030d72:	465a      	movle	r2, fp
 8030d74:	462f      	mov	r7, r5
 8030d76:	46d9      	mov	r9, fp
 8030d78:	bfcc      	ite	gt
 8030d7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8030d7e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8030d82:	464b      	mov	r3, r9
 8030d84:	4652      	mov	r2, sl
 8030d86:	4620      	mov	r0, r4
 8030d88:	4639      	mov	r1, r7
 8030d8a:	f7df fd77 	bl	801087c <__aeabi_ddiv>
 8030d8e:	ec41 0b10 	vmov	d0, r0, r1
 8030d92:	b005      	add	sp, #20
 8030d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08030d98 <__copybits>:
 8030d98:	3901      	subs	r1, #1
 8030d9a:	b570      	push	{r4, r5, r6, lr}
 8030d9c:	1149      	asrs	r1, r1, #5
 8030d9e:	6914      	ldr	r4, [r2, #16]
 8030da0:	3101      	adds	r1, #1
 8030da2:	f102 0314 	add.w	r3, r2, #20
 8030da6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8030daa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8030dae:	1f05      	subs	r5, r0, #4
 8030db0:	42a3      	cmp	r3, r4
 8030db2:	d30c      	bcc.n	8030dce <__copybits+0x36>
 8030db4:	1aa3      	subs	r3, r4, r2
 8030db6:	3b11      	subs	r3, #17
 8030db8:	f023 0303 	bic.w	r3, r3, #3
 8030dbc:	3211      	adds	r2, #17
 8030dbe:	42a2      	cmp	r2, r4
 8030dc0:	bf88      	it	hi
 8030dc2:	2300      	movhi	r3, #0
 8030dc4:	4418      	add	r0, r3
 8030dc6:	2300      	movs	r3, #0
 8030dc8:	4288      	cmp	r0, r1
 8030dca:	d305      	bcc.n	8030dd8 <__copybits+0x40>
 8030dcc:	bd70      	pop	{r4, r5, r6, pc}
 8030dce:	f853 6b04 	ldr.w	r6, [r3], #4
 8030dd2:	f845 6f04 	str.w	r6, [r5, #4]!
 8030dd6:	e7eb      	b.n	8030db0 <__copybits+0x18>
 8030dd8:	f840 3b04 	str.w	r3, [r0], #4
 8030ddc:	e7f4      	b.n	8030dc8 <__copybits+0x30>

08030dde <__any_on>:
 8030dde:	f100 0214 	add.w	r2, r0, #20
 8030de2:	6900      	ldr	r0, [r0, #16]
 8030de4:	114b      	asrs	r3, r1, #5
 8030de6:	4298      	cmp	r0, r3
 8030de8:	b510      	push	{r4, lr}
 8030dea:	db11      	blt.n	8030e10 <__any_on+0x32>
 8030dec:	dd0a      	ble.n	8030e04 <__any_on+0x26>
 8030dee:	f011 011f 	ands.w	r1, r1, #31
 8030df2:	d007      	beq.n	8030e04 <__any_on+0x26>
 8030df4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8030df8:	fa24 f001 	lsr.w	r0, r4, r1
 8030dfc:	fa00 f101 	lsl.w	r1, r0, r1
 8030e00:	428c      	cmp	r4, r1
 8030e02:	d10b      	bne.n	8030e1c <__any_on+0x3e>
 8030e04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8030e08:	4293      	cmp	r3, r2
 8030e0a:	d803      	bhi.n	8030e14 <__any_on+0x36>
 8030e0c:	2000      	movs	r0, #0
 8030e0e:	bd10      	pop	{r4, pc}
 8030e10:	4603      	mov	r3, r0
 8030e12:	e7f7      	b.n	8030e04 <__any_on+0x26>
 8030e14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8030e18:	2900      	cmp	r1, #0
 8030e1a:	d0f5      	beq.n	8030e08 <__any_on+0x2a>
 8030e1c:	2001      	movs	r0, #1
 8030e1e:	e7f6      	b.n	8030e0e <__any_on+0x30>

08030e20 <realloc>:
 8030e20:	4b02      	ldr	r3, [pc, #8]	@ (8030e2c <realloc+0xc>)
 8030e22:	460a      	mov	r2, r1
 8030e24:	4601      	mov	r1, r0
 8030e26:	6818      	ldr	r0, [r3, #0]
 8030e28:	f000 b890 	b.w	8030f4c <_realloc_r>
 8030e2c:	20000254 	.word	0x20000254

08030e30 <_fclose_r>:
 8030e30:	b570      	push	{r4, r5, r6, lr}
 8030e32:	4605      	mov	r5, r0
 8030e34:	460c      	mov	r4, r1
 8030e36:	b1b1      	cbz	r1, 8030e66 <_fclose_r+0x36>
 8030e38:	b118      	cbz	r0, 8030e42 <_fclose_r+0x12>
 8030e3a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8030e3c:	b90b      	cbnz	r3, 8030e42 <_fclose_r+0x12>
 8030e3e:	f7f8 fb79 	bl	8029534 <__sinit>
 8030e42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8030e44:	07de      	lsls	r6, r3, #31
 8030e46:	d405      	bmi.n	8030e54 <_fclose_r+0x24>
 8030e48:	89a3      	ldrh	r3, [r4, #12]
 8030e4a:	0598      	lsls	r0, r3, #22
 8030e4c:	d402      	bmi.n	8030e54 <_fclose_r+0x24>
 8030e4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8030e50:	f7fa f84f 	bl	802aef2 <__retarget_lock_acquire_recursive>
 8030e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030e58:	b943      	cbnz	r3, 8030e6c <_fclose_r+0x3c>
 8030e5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8030e5c:	07d9      	lsls	r1, r3, #31
 8030e5e:	d402      	bmi.n	8030e66 <_fclose_r+0x36>
 8030e60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8030e62:	f7fa f848 	bl	802aef6 <__retarget_lock_release_recursive>
 8030e66:	2600      	movs	r6, #0
 8030e68:	4630      	mov	r0, r6
 8030e6a:	bd70      	pop	{r4, r5, r6, pc}
 8030e6c:	4621      	mov	r1, r4
 8030e6e:	4628      	mov	r0, r5
 8030e70:	f7f8 f996 	bl	80291a0 <__sflush_r>
 8030e74:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8030e76:	4606      	mov	r6, r0
 8030e78:	b133      	cbz	r3, 8030e88 <_fclose_r+0x58>
 8030e7a:	69e1      	ldr	r1, [r4, #28]
 8030e7c:	4628      	mov	r0, r5
 8030e7e:	4798      	blx	r3
 8030e80:	2800      	cmp	r0, #0
 8030e82:	bfb8      	it	lt
 8030e84:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 8030e88:	89a3      	ldrh	r3, [r4, #12]
 8030e8a:	061a      	lsls	r2, r3, #24
 8030e8c:	d503      	bpl.n	8030e96 <_fclose_r+0x66>
 8030e8e:	6921      	ldr	r1, [r4, #16]
 8030e90:	4628      	mov	r0, r5
 8030e92:	f7fa ff33 	bl	802bcfc <_free_r>
 8030e96:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8030e98:	b141      	cbz	r1, 8030eac <_fclose_r+0x7c>
 8030e9a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8030e9e:	4299      	cmp	r1, r3
 8030ea0:	d002      	beq.n	8030ea8 <_fclose_r+0x78>
 8030ea2:	4628      	mov	r0, r5
 8030ea4:	f7fa ff2a 	bl	802bcfc <_free_r>
 8030ea8:	2300      	movs	r3, #0
 8030eaa:	6323      	str	r3, [r4, #48]	@ 0x30
 8030eac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8030eae:	b121      	cbz	r1, 8030eba <_fclose_r+0x8a>
 8030eb0:	4628      	mov	r0, r5
 8030eb2:	f7fa ff23 	bl	802bcfc <_free_r>
 8030eb6:	2300      	movs	r3, #0
 8030eb8:	6463      	str	r3, [r4, #68]	@ 0x44
 8030eba:	f7f8 fb2f 	bl	802951c <__sfp_lock_acquire>
 8030ebe:	2300      	movs	r3, #0
 8030ec0:	81a3      	strh	r3, [r4, #12]
 8030ec2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8030ec4:	07db      	lsls	r3, r3, #31
 8030ec6:	d402      	bmi.n	8030ece <_fclose_r+0x9e>
 8030ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8030eca:	f7fa f814 	bl	802aef6 <__retarget_lock_release_recursive>
 8030ece:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8030ed0:	f7fa f80d 	bl	802aeee <__retarget_lock_close_recursive>
 8030ed4:	f7f8 fb28 	bl	8029528 <__sfp_lock_release>
 8030ed8:	e7c6      	b.n	8030e68 <_fclose_r+0x38>

08030eda <__sccl>:
 8030eda:	b570      	push	{r4, r5, r6, lr}
 8030edc:	780b      	ldrb	r3, [r1, #0]
 8030ede:	4604      	mov	r4, r0
 8030ee0:	2b5e      	cmp	r3, #94	@ 0x5e
 8030ee2:	bf0b      	itete	eq
 8030ee4:	784b      	ldrbeq	r3, [r1, #1]
 8030ee6:	1c4a      	addne	r2, r1, #1
 8030ee8:	1c8a      	addeq	r2, r1, #2
 8030eea:	2100      	movne	r1, #0
 8030eec:	bf08      	it	eq
 8030eee:	2101      	moveq	r1, #1
 8030ef0:	3801      	subs	r0, #1
 8030ef2:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8030ef6:	f800 1f01 	strb.w	r1, [r0, #1]!
 8030efa:	42a8      	cmp	r0, r5
 8030efc:	d1fb      	bne.n	8030ef6 <__sccl+0x1c>
 8030efe:	b90b      	cbnz	r3, 8030f04 <__sccl+0x2a>
 8030f00:	1e50      	subs	r0, r2, #1
 8030f02:	bd70      	pop	{r4, r5, r6, pc}
 8030f04:	f081 0101 	eor.w	r1, r1, #1
 8030f08:	54e1      	strb	r1, [r4, r3]
 8030f0a:	4610      	mov	r0, r2
 8030f0c:	4602      	mov	r2, r0
 8030f0e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8030f12:	2d2d      	cmp	r5, #45	@ 0x2d
 8030f14:	d005      	beq.n	8030f22 <__sccl+0x48>
 8030f16:	2d5d      	cmp	r5, #93	@ 0x5d
 8030f18:	d016      	beq.n	8030f48 <__sccl+0x6e>
 8030f1a:	2d00      	cmp	r5, #0
 8030f1c:	d0f1      	beq.n	8030f02 <__sccl+0x28>
 8030f1e:	462b      	mov	r3, r5
 8030f20:	e7f2      	b.n	8030f08 <__sccl+0x2e>
 8030f22:	7846      	ldrb	r6, [r0, #1]
 8030f24:	2e5d      	cmp	r6, #93	@ 0x5d
 8030f26:	d0fa      	beq.n	8030f1e <__sccl+0x44>
 8030f28:	42b3      	cmp	r3, r6
 8030f2a:	dcf8      	bgt.n	8030f1e <__sccl+0x44>
 8030f2c:	3002      	adds	r0, #2
 8030f2e:	461a      	mov	r2, r3
 8030f30:	3201      	adds	r2, #1
 8030f32:	4296      	cmp	r6, r2
 8030f34:	54a1      	strb	r1, [r4, r2]
 8030f36:	dcfb      	bgt.n	8030f30 <__sccl+0x56>
 8030f38:	1af2      	subs	r2, r6, r3
 8030f3a:	3a01      	subs	r2, #1
 8030f3c:	1c5d      	adds	r5, r3, #1
 8030f3e:	42b3      	cmp	r3, r6
 8030f40:	bfa8      	it	ge
 8030f42:	2200      	movge	r2, #0
 8030f44:	18ab      	adds	r3, r5, r2
 8030f46:	e7e1      	b.n	8030f0c <__sccl+0x32>
 8030f48:	4610      	mov	r0, r2
 8030f4a:	e7da      	b.n	8030f02 <__sccl+0x28>

08030f4c <_realloc_r>:
 8030f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030f50:	4682      	mov	sl, r0
 8030f52:	4693      	mov	fp, r2
 8030f54:	460c      	mov	r4, r1
 8030f56:	b929      	cbnz	r1, 8030f64 <_realloc_r+0x18>
 8030f58:	4611      	mov	r1, r2
 8030f5a:	b003      	add	sp, #12
 8030f5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030f60:	f7fa bfe4 	b.w	802bf2c <_malloc_r>
 8030f64:	f7ff faec 	bl	8030540 <__malloc_lock>
 8030f68:	f10b 080b 	add.w	r8, fp, #11
 8030f6c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8030f70:	f1b8 0f16 	cmp.w	r8, #22
 8030f74:	f1a4 0908 	sub.w	r9, r4, #8
 8030f78:	f025 0603 	bic.w	r6, r5, #3
 8030f7c:	d908      	bls.n	8030f90 <_realloc_r+0x44>
 8030f7e:	f038 0807 	bics.w	r8, r8, #7
 8030f82:	d507      	bpl.n	8030f94 <_realloc_r+0x48>
 8030f84:	230c      	movs	r3, #12
 8030f86:	f8ca 3000 	str.w	r3, [sl]
 8030f8a:	f04f 0b00 	mov.w	fp, #0
 8030f8e:	e032      	b.n	8030ff6 <_realloc_r+0xaa>
 8030f90:	f04f 0810 	mov.w	r8, #16
 8030f94:	45c3      	cmp	fp, r8
 8030f96:	d8f5      	bhi.n	8030f84 <_realloc_r+0x38>
 8030f98:	4546      	cmp	r6, r8
 8030f9a:	f280 8174 	bge.w	8031286 <_realloc_r+0x33a>
 8030f9e:	4b9e      	ldr	r3, [pc, #632]	@ (8031218 <_realloc_r+0x2cc>)
 8030fa0:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8030fa4:	eb09 0106 	add.w	r1, r9, r6
 8030fa8:	458c      	cmp	ip, r1
 8030faa:	6848      	ldr	r0, [r1, #4]
 8030fac:	d005      	beq.n	8030fba <_realloc_r+0x6e>
 8030fae:	f020 0201 	bic.w	r2, r0, #1
 8030fb2:	440a      	add	r2, r1
 8030fb4:	6852      	ldr	r2, [r2, #4]
 8030fb6:	07d7      	lsls	r7, r2, #31
 8030fb8:	d449      	bmi.n	803104e <_realloc_r+0x102>
 8030fba:	f020 0003 	bic.w	r0, r0, #3
 8030fbe:	458c      	cmp	ip, r1
 8030fc0:	eb06 0700 	add.w	r7, r6, r0
 8030fc4:	d11b      	bne.n	8030ffe <_realloc_r+0xb2>
 8030fc6:	f108 0210 	add.w	r2, r8, #16
 8030fca:	42ba      	cmp	r2, r7
 8030fcc:	dc41      	bgt.n	8031052 <_realloc_r+0x106>
 8030fce:	eb09 0208 	add.w	r2, r9, r8
 8030fd2:	eba7 0708 	sub.w	r7, r7, r8
 8030fd6:	f047 0701 	orr.w	r7, r7, #1
 8030fda:	609a      	str	r2, [r3, #8]
 8030fdc:	6057      	str	r7, [r2, #4]
 8030fde:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8030fe2:	f003 0301 	and.w	r3, r3, #1
 8030fe6:	ea43 0308 	orr.w	r3, r3, r8
 8030fea:	f844 3c04 	str.w	r3, [r4, #-4]
 8030fee:	4650      	mov	r0, sl
 8030ff0:	f7ff faac 	bl	803054c <__malloc_unlock>
 8030ff4:	46a3      	mov	fp, r4
 8030ff6:	4658      	mov	r0, fp
 8030ff8:	b003      	add	sp, #12
 8030ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030ffe:	45b8      	cmp	r8, r7
 8031000:	dc27      	bgt.n	8031052 <_realloc_r+0x106>
 8031002:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8031006:	60d3      	str	r3, [r2, #12]
 8031008:	609a      	str	r2, [r3, #8]
 803100a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 803100e:	eba7 0008 	sub.w	r0, r7, r8
 8031012:	280f      	cmp	r0, #15
 8031014:	f003 0301 	and.w	r3, r3, #1
 8031018:	eb09 0207 	add.w	r2, r9, r7
 803101c:	f240 8135 	bls.w	803128a <_realloc_r+0x33e>
 8031020:	eb09 0108 	add.w	r1, r9, r8
 8031024:	ea48 0303 	orr.w	r3, r8, r3
 8031028:	f040 0001 	orr.w	r0, r0, #1
 803102c:	f8c9 3004 	str.w	r3, [r9, #4]
 8031030:	6048      	str	r0, [r1, #4]
 8031032:	6853      	ldr	r3, [r2, #4]
 8031034:	f043 0301 	orr.w	r3, r3, #1
 8031038:	6053      	str	r3, [r2, #4]
 803103a:	3108      	adds	r1, #8
 803103c:	4650      	mov	r0, sl
 803103e:	f7fa fe5d 	bl	802bcfc <_free_r>
 8031042:	4650      	mov	r0, sl
 8031044:	f7ff fa82 	bl	803054c <__malloc_unlock>
 8031048:	f109 0b08 	add.w	fp, r9, #8
 803104c:	e7d3      	b.n	8030ff6 <_realloc_r+0xaa>
 803104e:	2000      	movs	r0, #0
 8031050:	4601      	mov	r1, r0
 8031052:	07ea      	lsls	r2, r5, #31
 8031054:	f100 80c7 	bmi.w	80311e6 <_realloc_r+0x29a>
 8031058:	f854 5c08 	ldr.w	r5, [r4, #-8]
 803105c:	eba9 0505 	sub.w	r5, r9, r5
 8031060:	686a      	ldr	r2, [r5, #4]
 8031062:	f022 0203 	bic.w	r2, r2, #3
 8031066:	4432      	add	r2, r6
 8031068:	9201      	str	r2, [sp, #4]
 803106a:	2900      	cmp	r1, #0
 803106c:	f000 8086 	beq.w	803117c <_realloc_r+0x230>
 8031070:	458c      	cmp	ip, r1
 8031072:	eb00 0702 	add.w	r7, r0, r2
 8031076:	d149      	bne.n	803110c <_realloc_r+0x1c0>
 8031078:	f108 0210 	add.w	r2, r8, #16
 803107c:	42ba      	cmp	r2, r7
 803107e:	dc7d      	bgt.n	803117c <_realloc_r+0x230>
 8031080:	46ab      	mov	fp, r5
 8031082:	68ea      	ldr	r2, [r5, #12]
 8031084:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8031088:	60ca      	str	r2, [r1, #12]
 803108a:	6091      	str	r1, [r2, #8]
 803108c:	1f32      	subs	r2, r6, #4
 803108e:	2a24      	cmp	r2, #36	@ 0x24
 8031090:	d836      	bhi.n	8031100 <_realloc_r+0x1b4>
 8031092:	2a13      	cmp	r2, #19
 8031094:	d932      	bls.n	80310fc <_realloc_r+0x1b0>
 8031096:	6821      	ldr	r1, [r4, #0]
 8031098:	60a9      	str	r1, [r5, #8]
 803109a:	6861      	ldr	r1, [r4, #4]
 803109c:	60e9      	str	r1, [r5, #12]
 803109e:	2a1b      	cmp	r2, #27
 80310a0:	d81a      	bhi.n	80310d8 <_realloc_r+0x18c>
 80310a2:	3408      	adds	r4, #8
 80310a4:	f105 0210 	add.w	r2, r5, #16
 80310a8:	6821      	ldr	r1, [r4, #0]
 80310aa:	6011      	str	r1, [r2, #0]
 80310ac:	6861      	ldr	r1, [r4, #4]
 80310ae:	6051      	str	r1, [r2, #4]
 80310b0:	68a1      	ldr	r1, [r4, #8]
 80310b2:	6091      	str	r1, [r2, #8]
 80310b4:	eb05 0208 	add.w	r2, r5, r8
 80310b8:	eba7 0708 	sub.w	r7, r7, r8
 80310bc:	f047 0701 	orr.w	r7, r7, #1
 80310c0:	609a      	str	r2, [r3, #8]
 80310c2:	6057      	str	r7, [r2, #4]
 80310c4:	686b      	ldr	r3, [r5, #4]
 80310c6:	f003 0301 	and.w	r3, r3, #1
 80310ca:	ea43 0308 	orr.w	r3, r3, r8
 80310ce:	606b      	str	r3, [r5, #4]
 80310d0:	4650      	mov	r0, sl
 80310d2:	f7ff fa3b 	bl	803054c <__malloc_unlock>
 80310d6:	e78e      	b.n	8030ff6 <_realloc_r+0xaa>
 80310d8:	68a1      	ldr	r1, [r4, #8]
 80310da:	6129      	str	r1, [r5, #16]
 80310dc:	68e1      	ldr	r1, [r4, #12]
 80310de:	6169      	str	r1, [r5, #20]
 80310e0:	2a24      	cmp	r2, #36	@ 0x24
 80310e2:	bf01      	itttt	eq
 80310e4:	6922      	ldreq	r2, [r4, #16]
 80310e6:	61aa      	streq	r2, [r5, #24]
 80310e8:	6961      	ldreq	r1, [r4, #20]
 80310ea:	61e9      	streq	r1, [r5, #28]
 80310ec:	bf19      	ittee	ne
 80310ee:	3410      	addne	r4, #16
 80310f0:	f105 0218 	addne.w	r2, r5, #24
 80310f4:	f105 0220 	addeq.w	r2, r5, #32
 80310f8:	3418      	addeq	r4, #24
 80310fa:	e7d5      	b.n	80310a8 <_realloc_r+0x15c>
 80310fc:	465a      	mov	r2, fp
 80310fe:	e7d3      	b.n	80310a8 <_realloc_r+0x15c>
 8031100:	4621      	mov	r1, r4
 8031102:	4658      	mov	r0, fp
 8031104:	f7f8 fca2 	bl	8029a4c <memmove>
 8031108:	4b43      	ldr	r3, [pc, #268]	@ (8031218 <_realloc_r+0x2cc>)
 803110a:	e7d3      	b.n	80310b4 <_realloc_r+0x168>
 803110c:	45b8      	cmp	r8, r7
 803110e:	dc35      	bgt.n	803117c <_realloc_r+0x230>
 8031110:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8031114:	4628      	mov	r0, r5
 8031116:	60d3      	str	r3, [r2, #12]
 8031118:	609a      	str	r2, [r3, #8]
 803111a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803111e:	68eb      	ldr	r3, [r5, #12]
 8031120:	60d3      	str	r3, [r2, #12]
 8031122:	609a      	str	r2, [r3, #8]
 8031124:	1f32      	subs	r2, r6, #4
 8031126:	2a24      	cmp	r2, #36	@ 0x24
 8031128:	d824      	bhi.n	8031174 <_realloc_r+0x228>
 803112a:	2a13      	cmp	r2, #19
 803112c:	d908      	bls.n	8031140 <_realloc_r+0x1f4>
 803112e:	6823      	ldr	r3, [r4, #0]
 8031130:	60ab      	str	r3, [r5, #8]
 8031132:	6863      	ldr	r3, [r4, #4]
 8031134:	60eb      	str	r3, [r5, #12]
 8031136:	2a1b      	cmp	r2, #27
 8031138:	d80a      	bhi.n	8031150 <_realloc_r+0x204>
 803113a:	3408      	adds	r4, #8
 803113c:	f105 0010 	add.w	r0, r5, #16
 8031140:	6823      	ldr	r3, [r4, #0]
 8031142:	6003      	str	r3, [r0, #0]
 8031144:	6863      	ldr	r3, [r4, #4]
 8031146:	6043      	str	r3, [r0, #4]
 8031148:	68a3      	ldr	r3, [r4, #8]
 803114a:	6083      	str	r3, [r0, #8]
 803114c:	46a9      	mov	r9, r5
 803114e:	e75c      	b.n	803100a <_realloc_r+0xbe>
 8031150:	68a3      	ldr	r3, [r4, #8]
 8031152:	612b      	str	r3, [r5, #16]
 8031154:	68e3      	ldr	r3, [r4, #12]
 8031156:	616b      	str	r3, [r5, #20]
 8031158:	2a24      	cmp	r2, #36	@ 0x24
 803115a:	bf01      	itttt	eq
 803115c:	6923      	ldreq	r3, [r4, #16]
 803115e:	61ab      	streq	r3, [r5, #24]
 8031160:	6963      	ldreq	r3, [r4, #20]
 8031162:	61eb      	streq	r3, [r5, #28]
 8031164:	bf19      	ittee	ne
 8031166:	3410      	addne	r4, #16
 8031168:	f105 0018 	addne.w	r0, r5, #24
 803116c:	f105 0020 	addeq.w	r0, r5, #32
 8031170:	3418      	addeq	r4, #24
 8031172:	e7e5      	b.n	8031140 <_realloc_r+0x1f4>
 8031174:	4621      	mov	r1, r4
 8031176:	f7f8 fc69 	bl	8029a4c <memmove>
 803117a:	e7e7      	b.n	803114c <_realloc_r+0x200>
 803117c:	9b01      	ldr	r3, [sp, #4]
 803117e:	4598      	cmp	r8, r3
 8031180:	dc31      	bgt.n	80311e6 <_realloc_r+0x29a>
 8031182:	4628      	mov	r0, r5
 8031184:	68eb      	ldr	r3, [r5, #12]
 8031186:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803118a:	60d3      	str	r3, [r2, #12]
 803118c:	609a      	str	r2, [r3, #8]
 803118e:	1f32      	subs	r2, r6, #4
 8031190:	2a24      	cmp	r2, #36	@ 0x24
 8031192:	d824      	bhi.n	80311de <_realloc_r+0x292>
 8031194:	2a13      	cmp	r2, #19
 8031196:	d908      	bls.n	80311aa <_realloc_r+0x25e>
 8031198:	6823      	ldr	r3, [r4, #0]
 803119a:	60ab      	str	r3, [r5, #8]
 803119c:	6863      	ldr	r3, [r4, #4]
 803119e:	60eb      	str	r3, [r5, #12]
 80311a0:	2a1b      	cmp	r2, #27
 80311a2:	d80a      	bhi.n	80311ba <_realloc_r+0x26e>
 80311a4:	3408      	adds	r4, #8
 80311a6:	f105 0010 	add.w	r0, r5, #16
 80311aa:	6823      	ldr	r3, [r4, #0]
 80311ac:	6003      	str	r3, [r0, #0]
 80311ae:	6863      	ldr	r3, [r4, #4]
 80311b0:	6043      	str	r3, [r0, #4]
 80311b2:	68a3      	ldr	r3, [r4, #8]
 80311b4:	6083      	str	r3, [r0, #8]
 80311b6:	9f01      	ldr	r7, [sp, #4]
 80311b8:	e7c8      	b.n	803114c <_realloc_r+0x200>
 80311ba:	68a3      	ldr	r3, [r4, #8]
 80311bc:	612b      	str	r3, [r5, #16]
 80311be:	68e3      	ldr	r3, [r4, #12]
 80311c0:	616b      	str	r3, [r5, #20]
 80311c2:	2a24      	cmp	r2, #36	@ 0x24
 80311c4:	bf01      	itttt	eq
 80311c6:	6923      	ldreq	r3, [r4, #16]
 80311c8:	61ab      	streq	r3, [r5, #24]
 80311ca:	6963      	ldreq	r3, [r4, #20]
 80311cc:	61eb      	streq	r3, [r5, #28]
 80311ce:	bf19      	ittee	ne
 80311d0:	3410      	addne	r4, #16
 80311d2:	f105 0018 	addne.w	r0, r5, #24
 80311d6:	f105 0020 	addeq.w	r0, r5, #32
 80311da:	3418      	addeq	r4, #24
 80311dc:	e7e5      	b.n	80311aa <_realloc_r+0x25e>
 80311de:	4621      	mov	r1, r4
 80311e0:	f7f8 fc34 	bl	8029a4c <memmove>
 80311e4:	e7e7      	b.n	80311b6 <_realloc_r+0x26a>
 80311e6:	4659      	mov	r1, fp
 80311e8:	4650      	mov	r0, sl
 80311ea:	f7fa fe9f 	bl	802bf2c <_malloc_r>
 80311ee:	4683      	mov	fp, r0
 80311f0:	b918      	cbnz	r0, 80311fa <_realloc_r+0x2ae>
 80311f2:	4650      	mov	r0, sl
 80311f4:	f7ff f9aa 	bl	803054c <__malloc_unlock>
 80311f8:	e6c7      	b.n	8030f8a <_realloc_r+0x3e>
 80311fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80311fe:	f023 0301 	bic.w	r3, r3, #1
 8031202:	444b      	add	r3, r9
 8031204:	f1a0 0208 	sub.w	r2, r0, #8
 8031208:	4293      	cmp	r3, r2
 803120a:	d107      	bne.n	803121c <_realloc_r+0x2d0>
 803120c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8031210:	f027 0703 	bic.w	r7, r7, #3
 8031214:	4437      	add	r7, r6
 8031216:	e6f8      	b.n	803100a <_realloc_r+0xbe>
 8031218:	20000384 	.word	0x20000384
 803121c:	1f32      	subs	r2, r6, #4
 803121e:	2a24      	cmp	r2, #36	@ 0x24
 8031220:	d82d      	bhi.n	803127e <_realloc_r+0x332>
 8031222:	2a13      	cmp	r2, #19
 8031224:	d928      	bls.n	8031278 <_realloc_r+0x32c>
 8031226:	6823      	ldr	r3, [r4, #0]
 8031228:	6003      	str	r3, [r0, #0]
 803122a:	6863      	ldr	r3, [r4, #4]
 803122c:	6043      	str	r3, [r0, #4]
 803122e:	2a1b      	cmp	r2, #27
 8031230:	d80e      	bhi.n	8031250 <_realloc_r+0x304>
 8031232:	f104 0208 	add.w	r2, r4, #8
 8031236:	f100 0308 	add.w	r3, r0, #8
 803123a:	6811      	ldr	r1, [r2, #0]
 803123c:	6019      	str	r1, [r3, #0]
 803123e:	6851      	ldr	r1, [r2, #4]
 8031240:	6059      	str	r1, [r3, #4]
 8031242:	6892      	ldr	r2, [r2, #8]
 8031244:	609a      	str	r2, [r3, #8]
 8031246:	4621      	mov	r1, r4
 8031248:	4650      	mov	r0, sl
 803124a:	f7fa fd57 	bl	802bcfc <_free_r>
 803124e:	e73f      	b.n	80310d0 <_realloc_r+0x184>
 8031250:	68a3      	ldr	r3, [r4, #8]
 8031252:	6083      	str	r3, [r0, #8]
 8031254:	68e3      	ldr	r3, [r4, #12]
 8031256:	60c3      	str	r3, [r0, #12]
 8031258:	2a24      	cmp	r2, #36	@ 0x24
 803125a:	bf01      	itttt	eq
 803125c:	6923      	ldreq	r3, [r4, #16]
 803125e:	6103      	streq	r3, [r0, #16]
 8031260:	6961      	ldreq	r1, [r4, #20]
 8031262:	6141      	streq	r1, [r0, #20]
 8031264:	bf19      	ittee	ne
 8031266:	f104 0210 	addne.w	r2, r4, #16
 803126a:	f100 0310 	addne.w	r3, r0, #16
 803126e:	f104 0218 	addeq.w	r2, r4, #24
 8031272:	f100 0318 	addeq.w	r3, r0, #24
 8031276:	e7e0      	b.n	803123a <_realloc_r+0x2ee>
 8031278:	4603      	mov	r3, r0
 803127a:	4622      	mov	r2, r4
 803127c:	e7dd      	b.n	803123a <_realloc_r+0x2ee>
 803127e:	4621      	mov	r1, r4
 8031280:	f7f8 fbe4 	bl	8029a4c <memmove>
 8031284:	e7df      	b.n	8031246 <_realloc_r+0x2fa>
 8031286:	4637      	mov	r7, r6
 8031288:	e6bf      	b.n	803100a <_realloc_r+0xbe>
 803128a:	431f      	orrs	r7, r3
 803128c:	f8c9 7004 	str.w	r7, [r9, #4]
 8031290:	6853      	ldr	r3, [r2, #4]
 8031292:	f043 0301 	orr.w	r3, r3, #1
 8031296:	6053      	str	r3, [r2, #4]
 8031298:	e6d3      	b.n	8031042 <_realloc_r+0xf6>
 803129a:	bf00      	nop

0803129c <sulp>:
 803129c:	b570      	push	{r4, r5, r6, lr}
 803129e:	4604      	mov	r4, r0
 80312a0:	460d      	mov	r5, r1
 80312a2:	ec45 4b10 	vmov	d0, r4, r5
 80312a6:	4616      	mov	r6, r2
 80312a8:	f7ff fc7c 	bl	8030ba4 <__ulp>
 80312ac:	ec51 0b10 	vmov	r0, r1, d0
 80312b0:	b17e      	cbz	r6, 80312d2 <sulp+0x36>
 80312b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80312b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80312ba:	2b00      	cmp	r3, #0
 80312bc:	dd09      	ble.n	80312d2 <sulp+0x36>
 80312be:	051b      	lsls	r3, r3, #20
 80312c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80312c4:	2400      	movs	r4, #0
 80312c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80312ca:	4622      	mov	r2, r4
 80312cc:	462b      	mov	r3, r5
 80312ce:	f7df f9ab 	bl	8010628 <__aeabi_dmul>
 80312d2:	ec41 0b10 	vmov	d0, r0, r1
 80312d6:	bd70      	pop	{r4, r5, r6, pc}

080312d8 <_strtod_l>:
 80312d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80312dc:	b09f      	sub	sp, #124	@ 0x7c
 80312de:	460c      	mov	r4, r1
 80312e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80312e2:	2200      	movs	r2, #0
 80312e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80312e6:	9005      	str	r0, [sp, #20]
 80312e8:	f04f 0a00 	mov.w	sl, #0
 80312ec:	f04f 0b00 	mov.w	fp, #0
 80312f0:	460a      	mov	r2, r1
 80312f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80312f4:	7811      	ldrb	r1, [r2, #0]
 80312f6:	292b      	cmp	r1, #43	@ 0x2b
 80312f8:	d04a      	beq.n	8031390 <_strtod_l+0xb8>
 80312fa:	d838      	bhi.n	803136e <_strtod_l+0x96>
 80312fc:	290d      	cmp	r1, #13
 80312fe:	d832      	bhi.n	8031366 <_strtod_l+0x8e>
 8031300:	2908      	cmp	r1, #8
 8031302:	d832      	bhi.n	803136a <_strtod_l+0x92>
 8031304:	2900      	cmp	r1, #0
 8031306:	d03b      	beq.n	8031380 <_strtod_l+0xa8>
 8031308:	2200      	movs	r2, #0
 803130a:	920b      	str	r2, [sp, #44]	@ 0x2c
 803130c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 803130e:	782a      	ldrb	r2, [r5, #0]
 8031310:	2a30      	cmp	r2, #48	@ 0x30
 8031312:	f040 80b3 	bne.w	803147c <_strtod_l+0x1a4>
 8031316:	786a      	ldrb	r2, [r5, #1]
 8031318:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 803131c:	2a58      	cmp	r2, #88	@ 0x58
 803131e:	d16e      	bne.n	80313fe <_strtod_l+0x126>
 8031320:	9302      	str	r3, [sp, #8]
 8031322:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8031324:	9301      	str	r3, [sp, #4]
 8031326:	ab1a      	add	r3, sp, #104	@ 0x68
 8031328:	9300      	str	r3, [sp, #0]
 803132a:	4a8e      	ldr	r2, [pc, #568]	@ (8031564 <_strtod_l+0x28c>)
 803132c:	9805      	ldr	r0, [sp, #20]
 803132e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8031330:	a919      	add	r1, sp, #100	@ 0x64
 8031332:	f001 fa51 	bl	80327d8 <__gethex>
 8031336:	f010 060f 	ands.w	r6, r0, #15
 803133a:	4604      	mov	r4, r0
 803133c:	d005      	beq.n	803134a <_strtod_l+0x72>
 803133e:	2e06      	cmp	r6, #6
 8031340:	d128      	bne.n	8031394 <_strtod_l+0xbc>
 8031342:	3501      	adds	r5, #1
 8031344:	2300      	movs	r3, #0
 8031346:	9519      	str	r5, [sp, #100]	@ 0x64
 8031348:	930b      	str	r3, [sp, #44]	@ 0x2c
 803134a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803134c:	2b00      	cmp	r3, #0
 803134e:	f040 858e 	bne.w	8031e6e <_strtod_l+0xb96>
 8031352:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8031354:	b1cb      	cbz	r3, 803138a <_strtod_l+0xb2>
 8031356:	4652      	mov	r2, sl
 8031358:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 803135c:	ec43 2b10 	vmov	d0, r2, r3
 8031360:	b01f      	add	sp, #124	@ 0x7c
 8031362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031366:	2920      	cmp	r1, #32
 8031368:	d1ce      	bne.n	8031308 <_strtod_l+0x30>
 803136a:	3201      	adds	r2, #1
 803136c:	e7c1      	b.n	80312f2 <_strtod_l+0x1a>
 803136e:	292d      	cmp	r1, #45	@ 0x2d
 8031370:	d1ca      	bne.n	8031308 <_strtod_l+0x30>
 8031372:	2101      	movs	r1, #1
 8031374:	910b      	str	r1, [sp, #44]	@ 0x2c
 8031376:	1c51      	adds	r1, r2, #1
 8031378:	9119      	str	r1, [sp, #100]	@ 0x64
 803137a:	7852      	ldrb	r2, [r2, #1]
 803137c:	2a00      	cmp	r2, #0
 803137e:	d1c5      	bne.n	803130c <_strtod_l+0x34>
 8031380:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8031382:	9419      	str	r4, [sp, #100]	@ 0x64
 8031384:	2b00      	cmp	r3, #0
 8031386:	f040 8570 	bne.w	8031e6a <_strtod_l+0xb92>
 803138a:	4652      	mov	r2, sl
 803138c:	465b      	mov	r3, fp
 803138e:	e7e5      	b.n	803135c <_strtod_l+0x84>
 8031390:	2100      	movs	r1, #0
 8031392:	e7ef      	b.n	8031374 <_strtod_l+0x9c>
 8031394:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8031396:	b13a      	cbz	r2, 80313a8 <_strtod_l+0xd0>
 8031398:	2135      	movs	r1, #53	@ 0x35
 803139a:	a81c      	add	r0, sp, #112	@ 0x70
 803139c:	f7ff fcfc 	bl	8030d98 <__copybits>
 80313a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80313a2:	9805      	ldr	r0, [sp, #20]
 80313a4:	f7ff f8fd 	bl	80305a2 <_Bfree>
 80313a8:	3e01      	subs	r6, #1
 80313aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80313ac:	2e04      	cmp	r6, #4
 80313ae:	d806      	bhi.n	80313be <_strtod_l+0xe6>
 80313b0:	e8df f006 	tbb	[pc, r6]
 80313b4:	201d0314 	.word	0x201d0314
 80313b8:	14          	.byte	0x14
 80313b9:	00          	.byte	0x00
 80313ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80313be:	05e1      	lsls	r1, r4, #23
 80313c0:	bf48      	it	mi
 80313c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80313c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80313ca:	0d1b      	lsrs	r3, r3, #20
 80313cc:	051b      	lsls	r3, r3, #20
 80313ce:	2b00      	cmp	r3, #0
 80313d0:	d1bb      	bne.n	803134a <_strtod_l+0x72>
 80313d2:	f7f9 fd59 	bl	802ae88 <__errno>
 80313d6:	2322      	movs	r3, #34	@ 0x22
 80313d8:	6003      	str	r3, [r0, #0]
 80313da:	e7b6      	b.n	803134a <_strtod_l+0x72>
 80313dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80313e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80313e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80313e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80313ec:	e7e7      	b.n	80313be <_strtod_l+0xe6>
 80313ee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 803156c <_strtod_l+0x294>
 80313f2:	e7e4      	b.n	80313be <_strtod_l+0xe6>
 80313f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80313f8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80313fc:	e7df      	b.n	80313be <_strtod_l+0xe6>
 80313fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8031400:	1c5a      	adds	r2, r3, #1
 8031402:	9219      	str	r2, [sp, #100]	@ 0x64
 8031404:	785b      	ldrb	r3, [r3, #1]
 8031406:	2b30      	cmp	r3, #48	@ 0x30
 8031408:	d0f9      	beq.n	80313fe <_strtod_l+0x126>
 803140a:	2b00      	cmp	r3, #0
 803140c:	d09d      	beq.n	803134a <_strtod_l+0x72>
 803140e:	2301      	movs	r3, #1
 8031410:	9309      	str	r3, [sp, #36]	@ 0x24
 8031412:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8031414:	930c      	str	r3, [sp, #48]	@ 0x30
 8031416:	2300      	movs	r3, #0
 8031418:	9308      	str	r3, [sp, #32]
 803141a:	930a      	str	r3, [sp, #40]	@ 0x28
 803141c:	461f      	mov	r7, r3
 803141e:	220a      	movs	r2, #10
 8031420:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8031422:	7805      	ldrb	r5, [r0, #0]
 8031424:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8031428:	b2d9      	uxtb	r1, r3
 803142a:	2909      	cmp	r1, #9
 803142c:	d928      	bls.n	8031480 <_strtod_l+0x1a8>
 803142e:	494e      	ldr	r1, [pc, #312]	@ (8031568 <_strtod_l+0x290>)
 8031430:	2201      	movs	r2, #1
 8031432:	f7f8 fb5a 	bl	8029aea <strncmp>
 8031436:	2800      	cmp	r0, #0
 8031438:	d032      	beq.n	80314a0 <_strtod_l+0x1c8>
 803143a:	2000      	movs	r0, #0
 803143c:	462a      	mov	r2, r5
 803143e:	4681      	mov	r9, r0
 8031440:	463d      	mov	r5, r7
 8031442:	4603      	mov	r3, r0
 8031444:	2a65      	cmp	r2, #101	@ 0x65
 8031446:	d001      	beq.n	803144c <_strtod_l+0x174>
 8031448:	2a45      	cmp	r2, #69	@ 0x45
 803144a:	d114      	bne.n	8031476 <_strtod_l+0x19e>
 803144c:	b91d      	cbnz	r5, 8031456 <_strtod_l+0x17e>
 803144e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8031450:	4302      	orrs	r2, r0
 8031452:	d095      	beq.n	8031380 <_strtod_l+0xa8>
 8031454:	2500      	movs	r5, #0
 8031456:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8031458:	1c62      	adds	r2, r4, #1
 803145a:	9219      	str	r2, [sp, #100]	@ 0x64
 803145c:	7862      	ldrb	r2, [r4, #1]
 803145e:	2a2b      	cmp	r2, #43	@ 0x2b
 8031460:	d077      	beq.n	8031552 <_strtod_l+0x27a>
 8031462:	2a2d      	cmp	r2, #45	@ 0x2d
 8031464:	d07b      	beq.n	803155e <_strtod_l+0x286>
 8031466:	f04f 0c00 	mov.w	ip, #0
 803146a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 803146e:	2909      	cmp	r1, #9
 8031470:	f240 8082 	bls.w	8031578 <_strtod_l+0x2a0>
 8031474:	9419      	str	r4, [sp, #100]	@ 0x64
 8031476:	f04f 0800 	mov.w	r8, #0
 803147a:	e0a2      	b.n	80315c2 <_strtod_l+0x2ea>
 803147c:	2300      	movs	r3, #0
 803147e:	e7c7      	b.n	8031410 <_strtod_l+0x138>
 8031480:	2f08      	cmp	r7, #8
 8031482:	bfd5      	itete	le
 8031484:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8031486:	9908      	ldrgt	r1, [sp, #32]
 8031488:	fb02 3301 	mlale	r3, r2, r1, r3
 803148c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8031490:	f100 0001 	add.w	r0, r0, #1
 8031494:	bfd4      	ite	le
 8031496:	930a      	strle	r3, [sp, #40]	@ 0x28
 8031498:	9308      	strgt	r3, [sp, #32]
 803149a:	3701      	adds	r7, #1
 803149c:	9019      	str	r0, [sp, #100]	@ 0x64
 803149e:	e7bf      	b.n	8031420 <_strtod_l+0x148>
 80314a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80314a2:	1c5a      	adds	r2, r3, #1
 80314a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80314a6:	785a      	ldrb	r2, [r3, #1]
 80314a8:	b37f      	cbz	r7, 803150a <_strtod_l+0x232>
 80314aa:	4681      	mov	r9, r0
 80314ac:	463d      	mov	r5, r7
 80314ae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80314b2:	2b09      	cmp	r3, #9
 80314b4:	d912      	bls.n	80314dc <_strtod_l+0x204>
 80314b6:	2301      	movs	r3, #1
 80314b8:	e7c4      	b.n	8031444 <_strtod_l+0x16c>
 80314ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80314bc:	1c5a      	adds	r2, r3, #1
 80314be:	9219      	str	r2, [sp, #100]	@ 0x64
 80314c0:	785a      	ldrb	r2, [r3, #1]
 80314c2:	3001      	adds	r0, #1
 80314c4:	2a30      	cmp	r2, #48	@ 0x30
 80314c6:	d0f8      	beq.n	80314ba <_strtod_l+0x1e2>
 80314c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80314cc:	2b08      	cmp	r3, #8
 80314ce:	f200 84d3 	bhi.w	8031e78 <_strtod_l+0xba0>
 80314d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80314d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80314d6:	4681      	mov	r9, r0
 80314d8:	2000      	movs	r0, #0
 80314da:	4605      	mov	r5, r0
 80314dc:	3a30      	subs	r2, #48	@ 0x30
 80314de:	f100 0301 	add.w	r3, r0, #1
 80314e2:	d02a      	beq.n	803153a <_strtod_l+0x262>
 80314e4:	4499      	add	r9, r3
 80314e6:	eb00 0c05 	add.w	ip, r0, r5
 80314ea:	462b      	mov	r3, r5
 80314ec:	210a      	movs	r1, #10
 80314ee:	4563      	cmp	r3, ip
 80314f0:	d10d      	bne.n	803150e <_strtod_l+0x236>
 80314f2:	1c69      	adds	r1, r5, #1
 80314f4:	4401      	add	r1, r0
 80314f6:	4428      	add	r0, r5
 80314f8:	2808      	cmp	r0, #8
 80314fa:	dc16      	bgt.n	803152a <_strtod_l+0x252>
 80314fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80314fe:	230a      	movs	r3, #10
 8031500:	fb03 2300 	mla	r3, r3, r0, r2
 8031504:	930a      	str	r3, [sp, #40]	@ 0x28
 8031506:	2300      	movs	r3, #0
 8031508:	e018      	b.n	803153c <_strtod_l+0x264>
 803150a:	4638      	mov	r0, r7
 803150c:	e7da      	b.n	80314c4 <_strtod_l+0x1ec>
 803150e:	2b08      	cmp	r3, #8
 8031510:	f103 0301 	add.w	r3, r3, #1
 8031514:	dc03      	bgt.n	803151e <_strtod_l+0x246>
 8031516:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8031518:	434e      	muls	r6, r1
 803151a:	960a      	str	r6, [sp, #40]	@ 0x28
 803151c:	e7e7      	b.n	80314ee <_strtod_l+0x216>
 803151e:	2b10      	cmp	r3, #16
 8031520:	bfde      	ittt	le
 8031522:	9e08      	ldrle	r6, [sp, #32]
 8031524:	434e      	mulle	r6, r1
 8031526:	9608      	strle	r6, [sp, #32]
 8031528:	e7e1      	b.n	80314ee <_strtod_l+0x216>
 803152a:	280f      	cmp	r0, #15
 803152c:	dceb      	bgt.n	8031506 <_strtod_l+0x22e>
 803152e:	9808      	ldr	r0, [sp, #32]
 8031530:	230a      	movs	r3, #10
 8031532:	fb03 2300 	mla	r3, r3, r0, r2
 8031536:	9308      	str	r3, [sp, #32]
 8031538:	e7e5      	b.n	8031506 <_strtod_l+0x22e>
 803153a:	4629      	mov	r1, r5
 803153c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803153e:	1c50      	adds	r0, r2, #1
 8031540:	9019      	str	r0, [sp, #100]	@ 0x64
 8031542:	7852      	ldrb	r2, [r2, #1]
 8031544:	4618      	mov	r0, r3
 8031546:	460d      	mov	r5, r1
 8031548:	e7b1      	b.n	80314ae <_strtod_l+0x1d6>
 803154a:	f04f 0900 	mov.w	r9, #0
 803154e:	2301      	movs	r3, #1
 8031550:	e77d      	b.n	803144e <_strtod_l+0x176>
 8031552:	f04f 0c00 	mov.w	ip, #0
 8031556:	1ca2      	adds	r2, r4, #2
 8031558:	9219      	str	r2, [sp, #100]	@ 0x64
 803155a:	78a2      	ldrb	r2, [r4, #2]
 803155c:	e785      	b.n	803146a <_strtod_l+0x192>
 803155e:	f04f 0c01 	mov.w	ip, #1
 8031562:	e7f8      	b.n	8031556 <_strtod_l+0x27e>
 8031564:	080387e4 	.word	0x080387e4
 8031568:	0803824e 	.word	0x0803824e
 803156c:	7ff00000 	.word	0x7ff00000
 8031570:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8031572:	1c51      	adds	r1, r2, #1
 8031574:	9119      	str	r1, [sp, #100]	@ 0x64
 8031576:	7852      	ldrb	r2, [r2, #1]
 8031578:	2a30      	cmp	r2, #48	@ 0x30
 803157a:	d0f9      	beq.n	8031570 <_strtod_l+0x298>
 803157c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8031580:	2908      	cmp	r1, #8
 8031582:	f63f af78 	bhi.w	8031476 <_strtod_l+0x19e>
 8031586:	3a30      	subs	r2, #48	@ 0x30
 8031588:	920e      	str	r2, [sp, #56]	@ 0x38
 803158a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803158c:	920f      	str	r2, [sp, #60]	@ 0x3c
 803158e:	f04f 080a 	mov.w	r8, #10
 8031592:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8031594:	1c56      	adds	r6, r2, #1
 8031596:	9619      	str	r6, [sp, #100]	@ 0x64
 8031598:	7852      	ldrb	r2, [r2, #1]
 803159a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 803159e:	f1be 0f09 	cmp.w	lr, #9
 80315a2:	d939      	bls.n	8031618 <_strtod_l+0x340>
 80315a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80315a6:	1a76      	subs	r6, r6, r1
 80315a8:	2e08      	cmp	r6, #8
 80315aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80315ae:	dc03      	bgt.n	80315b8 <_strtod_l+0x2e0>
 80315b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80315b2:	4588      	cmp	r8, r1
 80315b4:	bfa8      	it	ge
 80315b6:	4688      	movge	r8, r1
 80315b8:	f1bc 0f00 	cmp.w	ip, #0
 80315bc:	d001      	beq.n	80315c2 <_strtod_l+0x2ea>
 80315be:	f1c8 0800 	rsb	r8, r8, #0
 80315c2:	2d00      	cmp	r5, #0
 80315c4:	d14e      	bne.n	8031664 <_strtod_l+0x38c>
 80315c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80315c8:	4308      	orrs	r0, r1
 80315ca:	f47f aebe 	bne.w	803134a <_strtod_l+0x72>
 80315ce:	2b00      	cmp	r3, #0
 80315d0:	f47f aed6 	bne.w	8031380 <_strtod_l+0xa8>
 80315d4:	2a69      	cmp	r2, #105	@ 0x69
 80315d6:	d028      	beq.n	803162a <_strtod_l+0x352>
 80315d8:	dc25      	bgt.n	8031626 <_strtod_l+0x34e>
 80315da:	2a49      	cmp	r2, #73	@ 0x49
 80315dc:	d025      	beq.n	803162a <_strtod_l+0x352>
 80315de:	2a4e      	cmp	r2, #78	@ 0x4e
 80315e0:	f47f aece 	bne.w	8031380 <_strtod_l+0xa8>
 80315e4:	499b      	ldr	r1, [pc, #620]	@ (8031854 <_strtod_l+0x57c>)
 80315e6:	a819      	add	r0, sp, #100	@ 0x64
 80315e8:	f001 fb18 	bl	8032c1c <__match>
 80315ec:	2800      	cmp	r0, #0
 80315ee:	f43f aec7 	beq.w	8031380 <_strtod_l+0xa8>
 80315f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80315f4:	781b      	ldrb	r3, [r3, #0]
 80315f6:	2b28      	cmp	r3, #40	@ 0x28
 80315f8:	d12e      	bne.n	8031658 <_strtod_l+0x380>
 80315fa:	4997      	ldr	r1, [pc, #604]	@ (8031858 <_strtod_l+0x580>)
 80315fc:	aa1c      	add	r2, sp, #112	@ 0x70
 80315fe:	a819      	add	r0, sp, #100	@ 0x64
 8031600:	f001 fb20 	bl	8032c44 <__hexnan>
 8031604:	2805      	cmp	r0, #5
 8031606:	d127      	bne.n	8031658 <_strtod_l+0x380>
 8031608:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 803160a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 803160e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8031612:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8031616:	e698      	b.n	803134a <_strtod_l+0x72>
 8031618:	990e      	ldr	r1, [sp, #56]	@ 0x38
 803161a:	fb08 2101 	mla	r1, r8, r1, r2
 803161e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8031622:	920e      	str	r2, [sp, #56]	@ 0x38
 8031624:	e7b5      	b.n	8031592 <_strtod_l+0x2ba>
 8031626:	2a6e      	cmp	r2, #110	@ 0x6e
 8031628:	e7da      	b.n	80315e0 <_strtod_l+0x308>
 803162a:	498c      	ldr	r1, [pc, #560]	@ (803185c <_strtod_l+0x584>)
 803162c:	a819      	add	r0, sp, #100	@ 0x64
 803162e:	f001 faf5 	bl	8032c1c <__match>
 8031632:	2800      	cmp	r0, #0
 8031634:	f43f aea4 	beq.w	8031380 <_strtod_l+0xa8>
 8031638:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803163a:	4989      	ldr	r1, [pc, #548]	@ (8031860 <_strtod_l+0x588>)
 803163c:	3b01      	subs	r3, #1
 803163e:	a819      	add	r0, sp, #100	@ 0x64
 8031640:	9319      	str	r3, [sp, #100]	@ 0x64
 8031642:	f001 faeb 	bl	8032c1c <__match>
 8031646:	b910      	cbnz	r0, 803164e <_strtod_l+0x376>
 8031648:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803164a:	3301      	adds	r3, #1
 803164c:	9319      	str	r3, [sp, #100]	@ 0x64
 803164e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8031870 <_strtod_l+0x598>
 8031652:	f04f 0a00 	mov.w	sl, #0
 8031656:	e678      	b.n	803134a <_strtod_l+0x72>
 8031658:	4882      	ldr	r0, [pc, #520]	@ (8031864 <_strtod_l+0x58c>)
 803165a:	f001 f805 	bl	8032668 <nan>
 803165e:	ec5b ab10 	vmov	sl, fp, d0
 8031662:	e672      	b.n	803134a <_strtod_l+0x72>
 8031664:	eba8 0309 	sub.w	r3, r8, r9
 8031668:	980a      	ldr	r0, [sp, #40]	@ 0x28
 803166a:	9309      	str	r3, [sp, #36]	@ 0x24
 803166c:	2f00      	cmp	r7, #0
 803166e:	bf08      	it	eq
 8031670:	462f      	moveq	r7, r5
 8031672:	2d10      	cmp	r5, #16
 8031674:	462c      	mov	r4, r5
 8031676:	bfa8      	it	ge
 8031678:	2410      	movge	r4, #16
 803167a:	f7de ff5b 	bl	8010534 <__aeabi_ui2d>
 803167e:	2d09      	cmp	r5, #9
 8031680:	4682      	mov	sl, r0
 8031682:	468b      	mov	fp, r1
 8031684:	dc13      	bgt.n	80316ae <_strtod_l+0x3d6>
 8031686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031688:	2b00      	cmp	r3, #0
 803168a:	f43f ae5e 	beq.w	803134a <_strtod_l+0x72>
 803168e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031690:	dd78      	ble.n	8031784 <_strtod_l+0x4ac>
 8031692:	2b16      	cmp	r3, #22
 8031694:	dc5f      	bgt.n	8031756 <_strtod_l+0x47e>
 8031696:	4974      	ldr	r1, [pc, #464]	@ (8031868 <_strtod_l+0x590>)
 8031698:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 803169c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80316a0:	4652      	mov	r2, sl
 80316a2:	465b      	mov	r3, fp
 80316a4:	f7de ffc0 	bl	8010628 <__aeabi_dmul>
 80316a8:	4682      	mov	sl, r0
 80316aa:	468b      	mov	fp, r1
 80316ac:	e64d      	b.n	803134a <_strtod_l+0x72>
 80316ae:	4b6e      	ldr	r3, [pc, #440]	@ (8031868 <_strtod_l+0x590>)
 80316b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80316b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80316b8:	f7de ffb6 	bl	8010628 <__aeabi_dmul>
 80316bc:	4682      	mov	sl, r0
 80316be:	9808      	ldr	r0, [sp, #32]
 80316c0:	468b      	mov	fp, r1
 80316c2:	f7de ff37 	bl	8010534 <__aeabi_ui2d>
 80316c6:	4602      	mov	r2, r0
 80316c8:	460b      	mov	r3, r1
 80316ca:	4650      	mov	r0, sl
 80316cc:	4659      	mov	r1, fp
 80316ce:	f7de fdf5 	bl	80102bc <__adddf3>
 80316d2:	2d0f      	cmp	r5, #15
 80316d4:	4682      	mov	sl, r0
 80316d6:	468b      	mov	fp, r1
 80316d8:	ddd5      	ble.n	8031686 <_strtod_l+0x3ae>
 80316da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80316dc:	1b2c      	subs	r4, r5, r4
 80316de:	441c      	add	r4, r3
 80316e0:	2c00      	cmp	r4, #0
 80316e2:	f340 8096 	ble.w	8031812 <_strtod_l+0x53a>
 80316e6:	f014 030f 	ands.w	r3, r4, #15
 80316ea:	d00a      	beq.n	8031702 <_strtod_l+0x42a>
 80316ec:	495e      	ldr	r1, [pc, #376]	@ (8031868 <_strtod_l+0x590>)
 80316ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80316f2:	4652      	mov	r2, sl
 80316f4:	465b      	mov	r3, fp
 80316f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80316fa:	f7de ff95 	bl	8010628 <__aeabi_dmul>
 80316fe:	4682      	mov	sl, r0
 8031700:	468b      	mov	fp, r1
 8031702:	f034 040f 	bics.w	r4, r4, #15
 8031706:	d073      	beq.n	80317f0 <_strtod_l+0x518>
 8031708:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 803170c:	dd48      	ble.n	80317a0 <_strtod_l+0x4c8>
 803170e:	2400      	movs	r4, #0
 8031710:	46a0      	mov	r8, r4
 8031712:	940a      	str	r4, [sp, #40]	@ 0x28
 8031714:	46a1      	mov	r9, r4
 8031716:	9a05      	ldr	r2, [sp, #20]
 8031718:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8031870 <_strtod_l+0x598>
 803171c:	2322      	movs	r3, #34	@ 0x22
 803171e:	6013      	str	r3, [r2, #0]
 8031720:	f04f 0a00 	mov.w	sl, #0
 8031724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8031726:	2b00      	cmp	r3, #0
 8031728:	f43f ae0f 	beq.w	803134a <_strtod_l+0x72>
 803172c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803172e:	9805      	ldr	r0, [sp, #20]
 8031730:	f7fe ff37 	bl	80305a2 <_Bfree>
 8031734:	9805      	ldr	r0, [sp, #20]
 8031736:	4649      	mov	r1, r9
 8031738:	f7fe ff33 	bl	80305a2 <_Bfree>
 803173c:	9805      	ldr	r0, [sp, #20]
 803173e:	4641      	mov	r1, r8
 8031740:	f7fe ff2f 	bl	80305a2 <_Bfree>
 8031744:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8031746:	9805      	ldr	r0, [sp, #20]
 8031748:	f7fe ff2b 	bl	80305a2 <_Bfree>
 803174c:	9805      	ldr	r0, [sp, #20]
 803174e:	4621      	mov	r1, r4
 8031750:	f7fe ff27 	bl	80305a2 <_Bfree>
 8031754:	e5f9      	b.n	803134a <_strtod_l+0x72>
 8031756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8031758:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 803175c:	4293      	cmp	r3, r2
 803175e:	dbbc      	blt.n	80316da <_strtod_l+0x402>
 8031760:	4c41      	ldr	r4, [pc, #260]	@ (8031868 <_strtod_l+0x590>)
 8031762:	f1c5 050f 	rsb	r5, r5, #15
 8031766:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 803176a:	4652      	mov	r2, sl
 803176c:	465b      	mov	r3, fp
 803176e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8031772:	f7de ff59 	bl	8010628 <__aeabi_dmul>
 8031776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031778:	1b5d      	subs	r5, r3, r5
 803177a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 803177e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8031782:	e78f      	b.n	80316a4 <_strtod_l+0x3cc>
 8031784:	3316      	adds	r3, #22
 8031786:	dba8      	blt.n	80316da <_strtod_l+0x402>
 8031788:	4b37      	ldr	r3, [pc, #220]	@ (8031868 <_strtod_l+0x590>)
 803178a:	eba9 0808 	sub.w	r8, r9, r8
 803178e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8031792:	e9d8 2300 	ldrd	r2, r3, [r8]
 8031796:	4650      	mov	r0, sl
 8031798:	4659      	mov	r1, fp
 803179a:	f7df f86f 	bl	801087c <__aeabi_ddiv>
 803179e:	e783      	b.n	80316a8 <_strtod_l+0x3d0>
 80317a0:	4b32      	ldr	r3, [pc, #200]	@ (803186c <_strtod_l+0x594>)
 80317a2:	9308      	str	r3, [sp, #32]
 80317a4:	2300      	movs	r3, #0
 80317a6:	1124      	asrs	r4, r4, #4
 80317a8:	4650      	mov	r0, sl
 80317aa:	4659      	mov	r1, fp
 80317ac:	461e      	mov	r6, r3
 80317ae:	2c01      	cmp	r4, #1
 80317b0:	dc21      	bgt.n	80317f6 <_strtod_l+0x51e>
 80317b2:	b10b      	cbz	r3, 80317b8 <_strtod_l+0x4e0>
 80317b4:	4682      	mov	sl, r0
 80317b6:	468b      	mov	fp, r1
 80317b8:	492c      	ldr	r1, [pc, #176]	@ (803186c <_strtod_l+0x594>)
 80317ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80317be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80317c2:	4652      	mov	r2, sl
 80317c4:	465b      	mov	r3, fp
 80317c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80317ca:	f7de ff2d 	bl	8010628 <__aeabi_dmul>
 80317ce:	4b28      	ldr	r3, [pc, #160]	@ (8031870 <_strtod_l+0x598>)
 80317d0:	460a      	mov	r2, r1
 80317d2:	400b      	ands	r3, r1
 80317d4:	4927      	ldr	r1, [pc, #156]	@ (8031874 <_strtod_l+0x59c>)
 80317d6:	428b      	cmp	r3, r1
 80317d8:	4682      	mov	sl, r0
 80317da:	d898      	bhi.n	803170e <_strtod_l+0x436>
 80317dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80317e0:	428b      	cmp	r3, r1
 80317e2:	bf86      	itte	hi
 80317e4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8031878 <_strtod_l+0x5a0>
 80317e8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80317ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80317f0:	2300      	movs	r3, #0
 80317f2:	9308      	str	r3, [sp, #32]
 80317f4:	e07a      	b.n	80318ec <_strtod_l+0x614>
 80317f6:	07e2      	lsls	r2, r4, #31
 80317f8:	d505      	bpl.n	8031806 <_strtod_l+0x52e>
 80317fa:	9b08      	ldr	r3, [sp, #32]
 80317fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031800:	f7de ff12 	bl	8010628 <__aeabi_dmul>
 8031804:	2301      	movs	r3, #1
 8031806:	9a08      	ldr	r2, [sp, #32]
 8031808:	3208      	adds	r2, #8
 803180a:	3601      	adds	r6, #1
 803180c:	1064      	asrs	r4, r4, #1
 803180e:	9208      	str	r2, [sp, #32]
 8031810:	e7cd      	b.n	80317ae <_strtod_l+0x4d6>
 8031812:	d0ed      	beq.n	80317f0 <_strtod_l+0x518>
 8031814:	4264      	negs	r4, r4
 8031816:	f014 020f 	ands.w	r2, r4, #15
 803181a:	d00a      	beq.n	8031832 <_strtod_l+0x55a>
 803181c:	4b12      	ldr	r3, [pc, #72]	@ (8031868 <_strtod_l+0x590>)
 803181e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8031822:	4650      	mov	r0, sl
 8031824:	4659      	mov	r1, fp
 8031826:	e9d3 2300 	ldrd	r2, r3, [r3]
 803182a:	f7df f827 	bl	801087c <__aeabi_ddiv>
 803182e:	4682      	mov	sl, r0
 8031830:	468b      	mov	fp, r1
 8031832:	1124      	asrs	r4, r4, #4
 8031834:	d0dc      	beq.n	80317f0 <_strtod_l+0x518>
 8031836:	2c1f      	cmp	r4, #31
 8031838:	dd20      	ble.n	803187c <_strtod_l+0x5a4>
 803183a:	2400      	movs	r4, #0
 803183c:	46a0      	mov	r8, r4
 803183e:	940a      	str	r4, [sp, #40]	@ 0x28
 8031840:	46a1      	mov	r9, r4
 8031842:	9a05      	ldr	r2, [sp, #20]
 8031844:	2322      	movs	r3, #34	@ 0x22
 8031846:	f04f 0a00 	mov.w	sl, #0
 803184a:	f04f 0b00 	mov.w	fp, #0
 803184e:	6013      	str	r3, [r2, #0]
 8031850:	e768      	b.n	8031724 <_strtod_l+0x44c>
 8031852:	bf00      	nop
 8031854:	08038251 	.word	0x08038251
 8031858:	080387d0 	.word	0x080387d0
 803185c:	080380c0 	.word	0x080380c0
 8031860:	0803857c 	.word	0x0803857c
 8031864:	080380ba 	.word	0x080380ba
 8031868:	08038708 	.word	0x08038708
 803186c:	080386e0 	.word	0x080386e0
 8031870:	7ff00000 	.word	0x7ff00000
 8031874:	7ca00000 	.word	0x7ca00000
 8031878:	7fefffff 	.word	0x7fefffff
 803187c:	f014 0310 	ands.w	r3, r4, #16
 8031880:	bf18      	it	ne
 8031882:	236a      	movne	r3, #106	@ 0x6a
 8031884:	4ea9      	ldr	r6, [pc, #676]	@ (8031b2c <_strtod_l+0x854>)
 8031886:	9308      	str	r3, [sp, #32]
 8031888:	4650      	mov	r0, sl
 803188a:	4659      	mov	r1, fp
 803188c:	2300      	movs	r3, #0
 803188e:	07e2      	lsls	r2, r4, #31
 8031890:	d504      	bpl.n	803189c <_strtod_l+0x5c4>
 8031892:	e9d6 2300 	ldrd	r2, r3, [r6]
 8031896:	f7de fec7 	bl	8010628 <__aeabi_dmul>
 803189a:	2301      	movs	r3, #1
 803189c:	1064      	asrs	r4, r4, #1
 803189e:	f106 0608 	add.w	r6, r6, #8
 80318a2:	d1f4      	bne.n	803188e <_strtod_l+0x5b6>
 80318a4:	b10b      	cbz	r3, 80318aa <_strtod_l+0x5d2>
 80318a6:	4682      	mov	sl, r0
 80318a8:	468b      	mov	fp, r1
 80318aa:	9b08      	ldr	r3, [sp, #32]
 80318ac:	b1b3      	cbz	r3, 80318dc <_strtod_l+0x604>
 80318ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80318b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80318b6:	2b00      	cmp	r3, #0
 80318b8:	4659      	mov	r1, fp
 80318ba:	dd0f      	ble.n	80318dc <_strtod_l+0x604>
 80318bc:	2b1f      	cmp	r3, #31
 80318be:	dd55      	ble.n	803196c <_strtod_l+0x694>
 80318c0:	2b34      	cmp	r3, #52	@ 0x34
 80318c2:	bfde      	ittt	le
 80318c4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80318c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80318cc:	4093      	lslle	r3, r2
 80318ce:	f04f 0a00 	mov.w	sl, #0
 80318d2:	bfcc      	ite	gt
 80318d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80318d8:	ea03 0b01 	andle.w	fp, r3, r1
 80318dc:	2200      	movs	r2, #0
 80318de:	2300      	movs	r3, #0
 80318e0:	4650      	mov	r0, sl
 80318e2:	4659      	mov	r1, fp
 80318e4:	f7df f908 	bl	8010af8 <__aeabi_dcmpeq>
 80318e8:	2800      	cmp	r0, #0
 80318ea:	d1a6      	bne.n	803183a <_strtod_l+0x562>
 80318ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80318ee:	9300      	str	r3, [sp, #0]
 80318f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80318f2:	9805      	ldr	r0, [sp, #20]
 80318f4:	462b      	mov	r3, r5
 80318f6:	463a      	mov	r2, r7
 80318f8:	f7fe fea2 	bl	8030640 <__s2b>
 80318fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80318fe:	2800      	cmp	r0, #0
 8031900:	f43f af05 	beq.w	803170e <_strtod_l+0x436>
 8031904:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8031906:	2a00      	cmp	r2, #0
 8031908:	eba9 0308 	sub.w	r3, r9, r8
 803190c:	bfa8      	it	ge
 803190e:	2300      	movge	r3, #0
 8031910:	9312      	str	r3, [sp, #72]	@ 0x48
 8031912:	2400      	movs	r4, #0
 8031914:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8031918:	9316      	str	r3, [sp, #88]	@ 0x58
 803191a:	46a0      	mov	r8, r4
 803191c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803191e:	9805      	ldr	r0, [sp, #20]
 8031920:	6859      	ldr	r1, [r3, #4]
 8031922:	f7fe fe19 	bl	8030558 <_Balloc>
 8031926:	4681      	mov	r9, r0
 8031928:	2800      	cmp	r0, #0
 803192a:	f43f aef4 	beq.w	8031716 <_strtod_l+0x43e>
 803192e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8031930:	691a      	ldr	r2, [r3, #16]
 8031932:	3202      	adds	r2, #2
 8031934:	f103 010c 	add.w	r1, r3, #12
 8031938:	0092      	lsls	r2, r2, #2
 803193a:	300c      	adds	r0, #12
 803193c:	f7f9 fadc 	bl	802aef8 <memcpy>
 8031940:	ec4b ab10 	vmov	d0, sl, fp
 8031944:	9805      	ldr	r0, [sp, #20]
 8031946:	aa1c      	add	r2, sp, #112	@ 0x70
 8031948:	a91b      	add	r1, sp, #108	@ 0x6c
 803194a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 803194e:	f7ff f999 	bl	8030c84 <__d2b>
 8031952:	901a      	str	r0, [sp, #104]	@ 0x68
 8031954:	2800      	cmp	r0, #0
 8031956:	f43f aede 	beq.w	8031716 <_strtod_l+0x43e>
 803195a:	9805      	ldr	r0, [sp, #20]
 803195c:	2101      	movs	r1, #1
 803195e:	f7fe ff05 	bl	803076c <__i2b>
 8031962:	4680      	mov	r8, r0
 8031964:	b948      	cbnz	r0, 803197a <_strtod_l+0x6a2>
 8031966:	f04f 0800 	mov.w	r8, #0
 803196a:	e6d4      	b.n	8031716 <_strtod_l+0x43e>
 803196c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8031970:	fa02 f303 	lsl.w	r3, r2, r3
 8031974:	ea03 0a0a 	and.w	sl, r3, sl
 8031978:	e7b0      	b.n	80318dc <_strtod_l+0x604>
 803197a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 803197c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 803197e:	2d00      	cmp	r5, #0
 8031980:	bfab      	itete	ge
 8031982:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8031984:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8031986:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8031988:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 803198a:	bfac      	ite	ge
 803198c:	18ef      	addge	r7, r5, r3
 803198e:	1b5e      	sublt	r6, r3, r5
 8031990:	9b08      	ldr	r3, [sp, #32]
 8031992:	1aed      	subs	r5, r5, r3
 8031994:	4415      	add	r5, r2
 8031996:	4b66      	ldr	r3, [pc, #408]	@ (8031b30 <_strtod_l+0x858>)
 8031998:	3d01      	subs	r5, #1
 803199a:	429d      	cmp	r5, r3
 803199c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80319a0:	da50      	bge.n	8031a44 <_strtod_l+0x76c>
 80319a2:	1b5b      	subs	r3, r3, r5
 80319a4:	2b1f      	cmp	r3, #31
 80319a6:	eba2 0203 	sub.w	r2, r2, r3
 80319aa:	f04f 0101 	mov.w	r1, #1
 80319ae:	dc3d      	bgt.n	8031a2c <_strtod_l+0x754>
 80319b0:	fa01 f303 	lsl.w	r3, r1, r3
 80319b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80319b6:	2300      	movs	r3, #0
 80319b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80319ba:	18bd      	adds	r5, r7, r2
 80319bc:	9b08      	ldr	r3, [sp, #32]
 80319be:	42af      	cmp	r7, r5
 80319c0:	4416      	add	r6, r2
 80319c2:	441e      	add	r6, r3
 80319c4:	463b      	mov	r3, r7
 80319c6:	bfa8      	it	ge
 80319c8:	462b      	movge	r3, r5
 80319ca:	42b3      	cmp	r3, r6
 80319cc:	bfa8      	it	ge
 80319ce:	4633      	movge	r3, r6
 80319d0:	2b00      	cmp	r3, #0
 80319d2:	bfc2      	ittt	gt
 80319d4:	1aed      	subgt	r5, r5, r3
 80319d6:	1af6      	subgt	r6, r6, r3
 80319d8:	1aff      	subgt	r7, r7, r3
 80319da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80319dc:	2b00      	cmp	r3, #0
 80319de:	dd16      	ble.n	8031a0e <_strtod_l+0x736>
 80319e0:	4641      	mov	r1, r8
 80319e2:	9805      	ldr	r0, [sp, #20]
 80319e4:	461a      	mov	r2, r3
 80319e6:	f7fe ff81 	bl	80308ec <__pow5mult>
 80319ea:	4680      	mov	r8, r0
 80319ec:	2800      	cmp	r0, #0
 80319ee:	d0ba      	beq.n	8031966 <_strtod_l+0x68e>
 80319f0:	4601      	mov	r1, r0
 80319f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80319f4:	9805      	ldr	r0, [sp, #20]
 80319f6:	f7fe fecf 	bl	8030798 <__multiply>
 80319fa:	900e      	str	r0, [sp, #56]	@ 0x38
 80319fc:	2800      	cmp	r0, #0
 80319fe:	f43f ae8a 	beq.w	8031716 <_strtod_l+0x43e>
 8031a02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8031a04:	9805      	ldr	r0, [sp, #20]
 8031a06:	f7fe fdcc 	bl	80305a2 <_Bfree>
 8031a0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031a0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8031a0e:	2d00      	cmp	r5, #0
 8031a10:	dc1d      	bgt.n	8031a4e <_strtod_l+0x776>
 8031a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031a14:	2b00      	cmp	r3, #0
 8031a16:	dd23      	ble.n	8031a60 <_strtod_l+0x788>
 8031a18:	4649      	mov	r1, r9
 8031a1a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8031a1c:	9805      	ldr	r0, [sp, #20]
 8031a1e:	f7fe ff65 	bl	80308ec <__pow5mult>
 8031a22:	4681      	mov	r9, r0
 8031a24:	b9e0      	cbnz	r0, 8031a60 <_strtod_l+0x788>
 8031a26:	f04f 0900 	mov.w	r9, #0
 8031a2a:	e674      	b.n	8031716 <_strtod_l+0x43e>
 8031a2c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8031a30:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8031a34:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8031a38:	35e2      	adds	r5, #226	@ 0xe2
 8031a3a:	fa01 f305 	lsl.w	r3, r1, r5
 8031a3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8031a40:	9113      	str	r1, [sp, #76]	@ 0x4c
 8031a42:	e7ba      	b.n	80319ba <_strtod_l+0x6e2>
 8031a44:	2300      	movs	r3, #0
 8031a46:	9310      	str	r3, [sp, #64]	@ 0x40
 8031a48:	2301      	movs	r3, #1
 8031a4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031a4c:	e7b5      	b.n	80319ba <_strtod_l+0x6e2>
 8031a4e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8031a50:	9805      	ldr	r0, [sp, #20]
 8031a52:	462a      	mov	r2, r5
 8031a54:	f7fe ff8a 	bl	803096c <__lshift>
 8031a58:	901a      	str	r0, [sp, #104]	@ 0x68
 8031a5a:	2800      	cmp	r0, #0
 8031a5c:	d1d9      	bne.n	8031a12 <_strtod_l+0x73a>
 8031a5e:	e65a      	b.n	8031716 <_strtod_l+0x43e>
 8031a60:	2e00      	cmp	r6, #0
 8031a62:	dd07      	ble.n	8031a74 <_strtod_l+0x79c>
 8031a64:	4649      	mov	r1, r9
 8031a66:	9805      	ldr	r0, [sp, #20]
 8031a68:	4632      	mov	r2, r6
 8031a6a:	f7fe ff7f 	bl	803096c <__lshift>
 8031a6e:	4681      	mov	r9, r0
 8031a70:	2800      	cmp	r0, #0
 8031a72:	d0d8      	beq.n	8031a26 <_strtod_l+0x74e>
 8031a74:	2f00      	cmp	r7, #0
 8031a76:	dd08      	ble.n	8031a8a <_strtod_l+0x7b2>
 8031a78:	4641      	mov	r1, r8
 8031a7a:	9805      	ldr	r0, [sp, #20]
 8031a7c:	463a      	mov	r2, r7
 8031a7e:	f7fe ff75 	bl	803096c <__lshift>
 8031a82:	4680      	mov	r8, r0
 8031a84:	2800      	cmp	r0, #0
 8031a86:	f43f ae46 	beq.w	8031716 <_strtod_l+0x43e>
 8031a8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8031a8c:	9805      	ldr	r0, [sp, #20]
 8031a8e:	464a      	mov	r2, r9
 8031a90:	f7fe fff4 	bl	8030a7c <__mdiff>
 8031a94:	4604      	mov	r4, r0
 8031a96:	2800      	cmp	r0, #0
 8031a98:	f43f ae3d 	beq.w	8031716 <_strtod_l+0x43e>
 8031a9c:	68c3      	ldr	r3, [r0, #12]
 8031a9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8031aa0:	2300      	movs	r3, #0
 8031aa2:	60c3      	str	r3, [r0, #12]
 8031aa4:	4641      	mov	r1, r8
 8031aa6:	f7fe ffcd 	bl	8030a44 <__mcmp>
 8031aaa:	2800      	cmp	r0, #0
 8031aac:	da46      	bge.n	8031b3c <_strtod_l+0x864>
 8031aae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8031ab0:	ea53 030a 	orrs.w	r3, r3, sl
 8031ab4:	d16c      	bne.n	8031b90 <_strtod_l+0x8b8>
 8031ab6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8031aba:	2b00      	cmp	r3, #0
 8031abc:	d168      	bne.n	8031b90 <_strtod_l+0x8b8>
 8031abe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8031ac2:	0d1b      	lsrs	r3, r3, #20
 8031ac4:	051b      	lsls	r3, r3, #20
 8031ac6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8031aca:	d961      	bls.n	8031b90 <_strtod_l+0x8b8>
 8031acc:	6963      	ldr	r3, [r4, #20]
 8031ace:	b913      	cbnz	r3, 8031ad6 <_strtod_l+0x7fe>
 8031ad0:	6923      	ldr	r3, [r4, #16]
 8031ad2:	2b01      	cmp	r3, #1
 8031ad4:	dd5c      	ble.n	8031b90 <_strtod_l+0x8b8>
 8031ad6:	4621      	mov	r1, r4
 8031ad8:	2201      	movs	r2, #1
 8031ada:	9805      	ldr	r0, [sp, #20]
 8031adc:	f7fe ff46 	bl	803096c <__lshift>
 8031ae0:	4641      	mov	r1, r8
 8031ae2:	4604      	mov	r4, r0
 8031ae4:	f7fe ffae 	bl	8030a44 <__mcmp>
 8031ae8:	2800      	cmp	r0, #0
 8031aea:	dd51      	ble.n	8031b90 <_strtod_l+0x8b8>
 8031aec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8031af0:	9a08      	ldr	r2, [sp, #32]
 8031af2:	0d1b      	lsrs	r3, r3, #20
 8031af4:	051b      	lsls	r3, r3, #20
 8031af6:	2a00      	cmp	r2, #0
 8031af8:	d06b      	beq.n	8031bd2 <_strtod_l+0x8fa>
 8031afa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8031afe:	d868      	bhi.n	8031bd2 <_strtod_l+0x8fa>
 8031b00:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8031b04:	f67f ae9d 	bls.w	8031842 <_strtod_l+0x56a>
 8031b08:	4b0a      	ldr	r3, [pc, #40]	@ (8031b34 <_strtod_l+0x85c>)
 8031b0a:	4650      	mov	r0, sl
 8031b0c:	4659      	mov	r1, fp
 8031b0e:	2200      	movs	r2, #0
 8031b10:	f7de fd8a 	bl	8010628 <__aeabi_dmul>
 8031b14:	4b08      	ldr	r3, [pc, #32]	@ (8031b38 <_strtod_l+0x860>)
 8031b16:	400b      	ands	r3, r1
 8031b18:	4682      	mov	sl, r0
 8031b1a:	468b      	mov	fp, r1
 8031b1c:	2b00      	cmp	r3, #0
 8031b1e:	f47f ae05 	bne.w	803172c <_strtod_l+0x454>
 8031b22:	9a05      	ldr	r2, [sp, #20]
 8031b24:	2322      	movs	r3, #34	@ 0x22
 8031b26:	6013      	str	r3, [r2, #0]
 8031b28:	e600      	b.n	803172c <_strtod_l+0x454>
 8031b2a:	bf00      	nop
 8031b2c:	080387f8 	.word	0x080387f8
 8031b30:	fffffc02 	.word	0xfffffc02
 8031b34:	39500000 	.word	0x39500000
 8031b38:	7ff00000 	.word	0x7ff00000
 8031b3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8031b40:	d165      	bne.n	8031c0e <_strtod_l+0x936>
 8031b42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8031b44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8031b48:	b35a      	cbz	r2, 8031ba2 <_strtod_l+0x8ca>
 8031b4a:	4a9f      	ldr	r2, [pc, #636]	@ (8031dc8 <_strtod_l+0xaf0>)
 8031b4c:	4293      	cmp	r3, r2
 8031b4e:	d12b      	bne.n	8031ba8 <_strtod_l+0x8d0>
 8031b50:	9b08      	ldr	r3, [sp, #32]
 8031b52:	4651      	mov	r1, sl
 8031b54:	b303      	cbz	r3, 8031b98 <_strtod_l+0x8c0>
 8031b56:	4b9d      	ldr	r3, [pc, #628]	@ (8031dcc <_strtod_l+0xaf4>)
 8031b58:	465a      	mov	r2, fp
 8031b5a:	4013      	ands	r3, r2
 8031b5c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8031b60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8031b64:	d81b      	bhi.n	8031b9e <_strtod_l+0x8c6>
 8031b66:	0d1b      	lsrs	r3, r3, #20
 8031b68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8031b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8031b70:	4299      	cmp	r1, r3
 8031b72:	d119      	bne.n	8031ba8 <_strtod_l+0x8d0>
 8031b74:	4b96      	ldr	r3, [pc, #600]	@ (8031dd0 <_strtod_l+0xaf8>)
 8031b76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8031b78:	429a      	cmp	r2, r3
 8031b7a:	d102      	bne.n	8031b82 <_strtod_l+0x8aa>
 8031b7c:	3101      	adds	r1, #1
 8031b7e:	f43f adca 	beq.w	8031716 <_strtod_l+0x43e>
 8031b82:	4b92      	ldr	r3, [pc, #584]	@ (8031dcc <_strtod_l+0xaf4>)
 8031b84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8031b86:	401a      	ands	r2, r3
 8031b88:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8031b8c:	f04f 0a00 	mov.w	sl, #0
 8031b90:	9b08      	ldr	r3, [sp, #32]
 8031b92:	2b00      	cmp	r3, #0
 8031b94:	d1b8      	bne.n	8031b08 <_strtod_l+0x830>
 8031b96:	e5c9      	b.n	803172c <_strtod_l+0x454>
 8031b98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8031b9c:	e7e8      	b.n	8031b70 <_strtod_l+0x898>
 8031b9e:	4613      	mov	r3, r2
 8031ba0:	e7e6      	b.n	8031b70 <_strtod_l+0x898>
 8031ba2:	ea53 030a 	orrs.w	r3, r3, sl
 8031ba6:	d0a1      	beq.n	8031aec <_strtod_l+0x814>
 8031ba8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031baa:	b1db      	cbz	r3, 8031be4 <_strtod_l+0x90c>
 8031bac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8031bae:	4213      	tst	r3, r2
 8031bb0:	d0ee      	beq.n	8031b90 <_strtod_l+0x8b8>
 8031bb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8031bb4:	9a08      	ldr	r2, [sp, #32]
 8031bb6:	4650      	mov	r0, sl
 8031bb8:	4659      	mov	r1, fp
 8031bba:	b1bb      	cbz	r3, 8031bec <_strtod_l+0x914>
 8031bbc:	f7ff fb6e 	bl	803129c <sulp>
 8031bc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8031bc4:	ec53 2b10 	vmov	r2, r3, d0
 8031bc8:	f7de fb78 	bl	80102bc <__adddf3>
 8031bcc:	4682      	mov	sl, r0
 8031bce:	468b      	mov	fp, r1
 8031bd0:	e7de      	b.n	8031b90 <_strtod_l+0x8b8>
 8031bd2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8031bd6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8031bda:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8031bde:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8031be2:	e7d5      	b.n	8031b90 <_strtod_l+0x8b8>
 8031be4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8031be6:	ea13 0f0a 	tst.w	r3, sl
 8031bea:	e7e1      	b.n	8031bb0 <_strtod_l+0x8d8>
 8031bec:	f7ff fb56 	bl	803129c <sulp>
 8031bf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8031bf4:	ec53 2b10 	vmov	r2, r3, d0
 8031bf8:	f7de fb5e 	bl	80102b8 <__aeabi_dsub>
 8031bfc:	2200      	movs	r2, #0
 8031bfe:	2300      	movs	r3, #0
 8031c00:	4682      	mov	sl, r0
 8031c02:	468b      	mov	fp, r1
 8031c04:	f7de ff78 	bl	8010af8 <__aeabi_dcmpeq>
 8031c08:	2800      	cmp	r0, #0
 8031c0a:	d0c1      	beq.n	8031b90 <_strtod_l+0x8b8>
 8031c0c:	e619      	b.n	8031842 <_strtod_l+0x56a>
 8031c0e:	4641      	mov	r1, r8
 8031c10:	4620      	mov	r0, r4
 8031c12:	f7ff f88f 	bl	8030d34 <__ratio>
 8031c16:	ec57 6b10 	vmov	r6, r7, d0
 8031c1a:	2200      	movs	r2, #0
 8031c1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8031c20:	4630      	mov	r0, r6
 8031c22:	4639      	mov	r1, r7
 8031c24:	f7de ff7c 	bl	8010b20 <__aeabi_dcmple>
 8031c28:	2800      	cmp	r0, #0
 8031c2a:	d06f      	beq.n	8031d0c <_strtod_l+0xa34>
 8031c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8031c2e:	2b00      	cmp	r3, #0
 8031c30:	d17a      	bne.n	8031d28 <_strtod_l+0xa50>
 8031c32:	f1ba 0f00 	cmp.w	sl, #0
 8031c36:	d158      	bne.n	8031cea <_strtod_l+0xa12>
 8031c38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031c3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8031c3e:	2b00      	cmp	r3, #0
 8031c40:	d15a      	bne.n	8031cf8 <_strtod_l+0xa20>
 8031c42:	4b64      	ldr	r3, [pc, #400]	@ (8031dd4 <_strtod_l+0xafc>)
 8031c44:	2200      	movs	r2, #0
 8031c46:	4630      	mov	r0, r6
 8031c48:	4639      	mov	r1, r7
 8031c4a:	f7de ff5f 	bl	8010b0c <__aeabi_dcmplt>
 8031c4e:	2800      	cmp	r0, #0
 8031c50:	d159      	bne.n	8031d06 <_strtod_l+0xa2e>
 8031c52:	4630      	mov	r0, r6
 8031c54:	4639      	mov	r1, r7
 8031c56:	4b60      	ldr	r3, [pc, #384]	@ (8031dd8 <_strtod_l+0xb00>)
 8031c58:	2200      	movs	r2, #0
 8031c5a:	f7de fce5 	bl	8010628 <__aeabi_dmul>
 8031c5e:	4606      	mov	r6, r0
 8031c60:	460f      	mov	r7, r1
 8031c62:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8031c66:	9606      	str	r6, [sp, #24]
 8031c68:	9307      	str	r3, [sp, #28]
 8031c6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8031c6e:	4d57      	ldr	r5, [pc, #348]	@ (8031dcc <_strtod_l+0xaf4>)
 8031c70:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8031c74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031c76:	401d      	ands	r5, r3
 8031c78:	4b58      	ldr	r3, [pc, #352]	@ (8031ddc <_strtod_l+0xb04>)
 8031c7a:	429d      	cmp	r5, r3
 8031c7c:	f040 80b2 	bne.w	8031de4 <_strtod_l+0xb0c>
 8031c80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031c82:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8031c86:	ec4b ab10 	vmov	d0, sl, fp
 8031c8a:	f7fe ff8b 	bl	8030ba4 <__ulp>
 8031c8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8031c92:	ec51 0b10 	vmov	r0, r1, d0
 8031c96:	f7de fcc7 	bl	8010628 <__aeabi_dmul>
 8031c9a:	4652      	mov	r2, sl
 8031c9c:	465b      	mov	r3, fp
 8031c9e:	f7de fb0d 	bl	80102bc <__adddf3>
 8031ca2:	460b      	mov	r3, r1
 8031ca4:	4949      	ldr	r1, [pc, #292]	@ (8031dcc <_strtod_l+0xaf4>)
 8031ca6:	4a4e      	ldr	r2, [pc, #312]	@ (8031de0 <_strtod_l+0xb08>)
 8031ca8:	4019      	ands	r1, r3
 8031caa:	4291      	cmp	r1, r2
 8031cac:	4682      	mov	sl, r0
 8031cae:	d942      	bls.n	8031d36 <_strtod_l+0xa5e>
 8031cb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8031cb2:	4b47      	ldr	r3, [pc, #284]	@ (8031dd0 <_strtod_l+0xaf8>)
 8031cb4:	429a      	cmp	r2, r3
 8031cb6:	d103      	bne.n	8031cc0 <_strtod_l+0x9e8>
 8031cb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8031cba:	3301      	adds	r3, #1
 8031cbc:	f43f ad2b 	beq.w	8031716 <_strtod_l+0x43e>
 8031cc0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8031dd0 <_strtod_l+0xaf8>
 8031cc4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8031cc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8031cca:	9805      	ldr	r0, [sp, #20]
 8031ccc:	f7fe fc69 	bl	80305a2 <_Bfree>
 8031cd0:	9805      	ldr	r0, [sp, #20]
 8031cd2:	4649      	mov	r1, r9
 8031cd4:	f7fe fc65 	bl	80305a2 <_Bfree>
 8031cd8:	9805      	ldr	r0, [sp, #20]
 8031cda:	4641      	mov	r1, r8
 8031cdc:	f7fe fc61 	bl	80305a2 <_Bfree>
 8031ce0:	9805      	ldr	r0, [sp, #20]
 8031ce2:	4621      	mov	r1, r4
 8031ce4:	f7fe fc5d 	bl	80305a2 <_Bfree>
 8031ce8:	e618      	b.n	803191c <_strtod_l+0x644>
 8031cea:	f1ba 0f01 	cmp.w	sl, #1
 8031cee:	d103      	bne.n	8031cf8 <_strtod_l+0xa20>
 8031cf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031cf2:	2b00      	cmp	r3, #0
 8031cf4:	f43f ada5 	beq.w	8031842 <_strtod_l+0x56a>
 8031cf8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8031da8 <_strtod_l+0xad0>
 8031cfc:	4f35      	ldr	r7, [pc, #212]	@ (8031dd4 <_strtod_l+0xafc>)
 8031cfe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8031d02:	2600      	movs	r6, #0
 8031d04:	e7b1      	b.n	8031c6a <_strtod_l+0x992>
 8031d06:	4f34      	ldr	r7, [pc, #208]	@ (8031dd8 <_strtod_l+0xb00>)
 8031d08:	2600      	movs	r6, #0
 8031d0a:	e7aa      	b.n	8031c62 <_strtod_l+0x98a>
 8031d0c:	4b32      	ldr	r3, [pc, #200]	@ (8031dd8 <_strtod_l+0xb00>)
 8031d0e:	4630      	mov	r0, r6
 8031d10:	4639      	mov	r1, r7
 8031d12:	2200      	movs	r2, #0
 8031d14:	f7de fc88 	bl	8010628 <__aeabi_dmul>
 8031d18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8031d1a:	4606      	mov	r6, r0
 8031d1c:	460f      	mov	r7, r1
 8031d1e:	2b00      	cmp	r3, #0
 8031d20:	d09f      	beq.n	8031c62 <_strtod_l+0x98a>
 8031d22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8031d26:	e7a0      	b.n	8031c6a <_strtod_l+0x992>
 8031d28:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8031db0 <_strtod_l+0xad8>
 8031d2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8031d30:	ec57 6b17 	vmov	r6, r7, d7
 8031d34:	e799      	b.n	8031c6a <_strtod_l+0x992>
 8031d36:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8031d3a:	9b08      	ldr	r3, [sp, #32]
 8031d3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8031d40:	2b00      	cmp	r3, #0
 8031d42:	d1c1      	bne.n	8031cc8 <_strtod_l+0x9f0>
 8031d44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8031d48:	0d1b      	lsrs	r3, r3, #20
 8031d4a:	051b      	lsls	r3, r3, #20
 8031d4c:	429d      	cmp	r5, r3
 8031d4e:	d1bb      	bne.n	8031cc8 <_strtod_l+0x9f0>
 8031d50:	4630      	mov	r0, r6
 8031d52:	4639      	mov	r1, r7
 8031d54:	f7df f82c 	bl	8010db0 <__aeabi_d2lz>
 8031d58:	f7de fc38 	bl	80105cc <__aeabi_l2d>
 8031d5c:	4602      	mov	r2, r0
 8031d5e:	460b      	mov	r3, r1
 8031d60:	4630      	mov	r0, r6
 8031d62:	4639      	mov	r1, r7
 8031d64:	f7de faa8 	bl	80102b8 <__aeabi_dsub>
 8031d68:	460b      	mov	r3, r1
 8031d6a:	4602      	mov	r2, r0
 8031d6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8031d70:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8031d74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8031d76:	ea46 060a 	orr.w	r6, r6, sl
 8031d7a:	431e      	orrs	r6, r3
 8031d7c:	d06f      	beq.n	8031e5e <_strtod_l+0xb86>
 8031d7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8031db8 <_strtod_l+0xae0>)
 8031d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031d84:	f7de fec2 	bl	8010b0c <__aeabi_dcmplt>
 8031d88:	2800      	cmp	r0, #0
 8031d8a:	f47f accf 	bne.w	803172c <_strtod_l+0x454>
 8031d8e:	a30c      	add	r3, pc, #48	@ (adr r3, 8031dc0 <_strtod_l+0xae8>)
 8031d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031d94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8031d98:	f7de fed6 	bl	8010b48 <__aeabi_dcmpgt>
 8031d9c:	2800      	cmp	r0, #0
 8031d9e:	d093      	beq.n	8031cc8 <_strtod_l+0x9f0>
 8031da0:	e4c4      	b.n	803172c <_strtod_l+0x454>
 8031da2:	bf00      	nop
 8031da4:	f3af 8000 	nop.w
 8031da8:	00000000 	.word	0x00000000
 8031dac:	bff00000 	.word	0xbff00000
 8031db0:	00000000 	.word	0x00000000
 8031db4:	3ff00000 	.word	0x3ff00000
 8031db8:	94a03595 	.word	0x94a03595
 8031dbc:	3fdfffff 	.word	0x3fdfffff
 8031dc0:	35afe535 	.word	0x35afe535
 8031dc4:	3fe00000 	.word	0x3fe00000
 8031dc8:	000fffff 	.word	0x000fffff
 8031dcc:	7ff00000 	.word	0x7ff00000
 8031dd0:	7fefffff 	.word	0x7fefffff
 8031dd4:	3ff00000 	.word	0x3ff00000
 8031dd8:	3fe00000 	.word	0x3fe00000
 8031ddc:	7fe00000 	.word	0x7fe00000
 8031de0:	7c9fffff 	.word	0x7c9fffff
 8031de4:	9b08      	ldr	r3, [sp, #32]
 8031de6:	b323      	cbz	r3, 8031e32 <_strtod_l+0xb5a>
 8031de8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8031dec:	d821      	bhi.n	8031e32 <_strtod_l+0xb5a>
 8031dee:	a328      	add	r3, pc, #160	@ (adr r3, 8031e90 <_strtod_l+0xbb8>)
 8031df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031df4:	4630      	mov	r0, r6
 8031df6:	4639      	mov	r1, r7
 8031df8:	f7de fe92 	bl	8010b20 <__aeabi_dcmple>
 8031dfc:	b1a0      	cbz	r0, 8031e28 <_strtod_l+0xb50>
 8031dfe:	4639      	mov	r1, r7
 8031e00:	4630      	mov	r0, r6
 8031e02:	f7de fee9 	bl	8010bd8 <__aeabi_d2uiz>
 8031e06:	2801      	cmp	r0, #1
 8031e08:	bf38      	it	cc
 8031e0a:	2001      	movcc	r0, #1
 8031e0c:	f7de fb92 	bl	8010534 <__aeabi_ui2d>
 8031e10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8031e12:	4606      	mov	r6, r0
 8031e14:	460f      	mov	r7, r1
 8031e16:	b9fb      	cbnz	r3, 8031e58 <_strtod_l+0xb80>
 8031e18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8031e1c:	9014      	str	r0, [sp, #80]	@ 0x50
 8031e1e:	9315      	str	r3, [sp, #84]	@ 0x54
 8031e20:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8031e24:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8031e28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8031e2a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8031e2e:	1b5b      	subs	r3, r3, r5
 8031e30:	9311      	str	r3, [sp, #68]	@ 0x44
 8031e32:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8031e36:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8031e3a:	f7fe feb3 	bl	8030ba4 <__ulp>
 8031e3e:	4650      	mov	r0, sl
 8031e40:	ec53 2b10 	vmov	r2, r3, d0
 8031e44:	4659      	mov	r1, fp
 8031e46:	f7de fbef 	bl	8010628 <__aeabi_dmul>
 8031e4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8031e4e:	f7de fa35 	bl	80102bc <__adddf3>
 8031e52:	4682      	mov	sl, r0
 8031e54:	468b      	mov	fp, r1
 8031e56:	e770      	b.n	8031d3a <_strtod_l+0xa62>
 8031e58:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8031e5c:	e7e0      	b.n	8031e20 <_strtod_l+0xb48>
 8031e5e:	a30e      	add	r3, pc, #56	@ (adr r3, 8031e98 <_strtod_l+0xbc0>)
 8031e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031e64:	f7de fe52 	bl	8010b0c <__aeabi_dcmplt>
 8031e68:	e798      	b.n	8031d9c <_strtod_l+0xac4>
 8031e6a:	2300      	movs	r3, #0
 8031e6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8031e6e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8031e70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8031e72:	6013      	str	r3, [r2, #0]
 8031e74:	f7ff ba6d 	b.w	8031352 <_strtod_l+0x7a>
 8031e78:	2a65      	cmp	r2, #101	@ 0x65
 8031e7a:	f43f ab66 	beq.w	803154a <_strtod_l+0x272>
 8031e7e:	2a45      	cmp	r2, #69	@ 0x45
 8031e80:	f43f ab63 	beq.w	803154a <_strtod_l+0x272>
 8031e84:	2301      	movs	r3, #1
 8031e86:	f7ff bb9e 	b.w	80315c6 <_strtod_l+0x2ee>
 8031e8a:	bf00      	nop
 8031e8c:	f3af 8000 	nop.w
 8031e90:	ffc00000 	.word	0xffc00000
 8031e94:	41dfffff 	.word	0x41dfffff
 8031e98:	94a03595 	.word	0x94a03595
 8031e9c:	3fcfffff 	.word	0x3fcfffff

08031ea0 <_strtod_r>:
 8031ea0:	4b01      	ldr	r3, [pc, #4]	@ (8031ea8 <_strtod_r+0x8>)
 8031ea2:	f7ff ba19 	b.w	80312d8 <_strtod_l>
 8031ea6:	bf00      	nop
 8031ea8:	200000e8 	.word	0x200000e8

08031eac <_strtoul_l.constprop.0>:
 8031eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8031eb0:	4e34      	ldr	r6, [pc, #208]	@ (8031f84 <_strtoul_l.constprop.0+0xd8>)
 8031eb2:	4686      	mov	lr, r0
 8031eb4:	460d      	mov	r5, r1
 8031eb6:	4628      	mov	r0, r5
 8031eb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8031ebc:	5d37      	ldrb	r7, [r6, r4]
 8031ebe:	f017 0708 	ands.w	r7, r7, #8
 8031ec2:	d1f8      	bne.n	8031eb6 <_strtoul_l.constprop.0+0xa>
 8031ec4:	2c2d      	cmp	r4, #45	@ 0x2d
 8031ec6:	d12f      	bne.n	8031f28 <_strtoul_l.constprop.0+0x7c>
 8031ec8:	782c      	ldrb	r4, [r5, #0]
 8031eca:	2701      	movs	r7, #1
 8031ecc:	1c85      	adds	r5, r0, #2
 8031ece:	f033 0010 	bics.w	r0, r3, #16
 8031ed2:	d109      	bne.n	8031ee8 <_strtoul_l.constprop.0+0x3c>
 8031ed4:	2c30      	cmp	r4, #48	@ 0x30
 8031ed6:	d12c      	bne.n	8031f32 <_strtoul_l.constprop.0+0x86>
 8031ed8:	7828      	ldrb	r0, [r5, #0]
 8031eda:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8031ede:	2858      	cmp	r0, #88	@ 0x58
 8031ee0:	d127      	bne.n	8031f32 <_strtoul_l.constprop.0+0x86>
 8031ee2:	786c      	ldrb	r4, [r5, #1]
 8031ee4:	2310      	movs	r3, #16
 8031ee6:	3502      	adds	r5, #2
 8031ee8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8031eec:	2600      	movs	r6, #0
 8031eee:	fbb8 f8f3 	udiv	r8, r8, r3
 8031ef2:	fb03 f908 	mul.w	r9, r3, r8
 8031ef6:	ea6f 0909 	mvn.w	r9, r9
 8031efa:	4630      	mov	r0, r6
 8031efc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8031f00:	f1bc 0f09 	cmp.w	ip, #9
 8031f04:	d81c      	bhi.n	8031f40 <_strtoul_l.constprop.0+0x94>
 8031f06:	4664      	mov	r4, ip
 8031f08:	42a3      	cmp	r3, r4
 8031f0a:	dd2a      	ble.n	8031f62 <_strtoul_l.constprop.0+0xb6>
 8031f0c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8031f10:	d007      	beq.n	8031f22 <_strtoul_l.constprop.0+0x76>
 8031f12:	4580      	cmp	r8, r0
 8031f14:	d322      	bcc.n	8031f5c <_strtoul_l.constprop.0+0xb0>
 8031f16:	d101      	bne.n	8031f1c <_strtoul_l.constprop.0+0x70>
 8031f18:	45a1      	cmp	r9, r4
 8031f1a:	db1f      	blt.n	8031f5c <_strtoul_l.constprop.0+0xb0>
 8031f1c:	fb00 4003 	mla	r0, r0, r3, r4
 8031f20:	2601      	movs	r6, #1
 8031f22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8031f26:	e7e9      	b.n	8031efc <_strtoul_l.constprop.0+0x50>
 8031f28:	2c2b      	cmp	r4, #43	@ 0x2b
 8031f2a:	bf04      	itt	eq
 8031f2c:	782c      	ldrbeq	r4, [r5, #0]
 8031f2e:	1c85      	addeq	r5, r0, #2
 8031f30:	e7cd      	b.n	8031ece <_strtoul_l.constprop.0+0x22>
 8031f32:	2b00      	cmp	r3, #0
 8031f34:	d1d8      	bne.n	8031ee8 <_strtoul_l.constprop.0+0x3c>
 8031f36:	2c30      	cmp	r4, #48	@ 0x30
 8031f38:	bf0c      	ite	eq
 8031f3a:	2308      	moveq	r3, #8
 8031f3c:	230a      	movne	r3, #10
 8031f3e:	e7d3      	b.n	8031ee8 <_strtoul_l.constprop.0+0x3c>
 8031f40:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8031f44:	f1bc 0f19 	cmp.w	ip, #25
 8031f48:	d801      	bhi.n	8031f4e <_strtoul_l.constprop.0+0xa2>
 8031f4a:	3c37      	subs	r4, #55	@ 0x37
 8031f4c:	e7dc      	b.n	8031f08 <_strtoul_l.constprop.0+0x5c>
 8031f4e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8031f52:	f1bc 0f19 	cmp.w	ip, #25
 8031f56:	d804      	bhi.n	8031f62 <_strtoul_l.constprop.0+0xb6>
 8031f58:	3c57      	subs	r4, #87	@ 0x57
 8031f5a:	e7d5      	b.n	8031f08 <_strtoul_l.constprop.0+0x5c>
 8031f5c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8031f60:	e7df      	b.n	8031f22 <_strtoul_l.constprop.0+0x76>
 8031f62:	1c73      	adds	r3, r6, #1
 8031f64:	d106      	bne.n	8031f74 <_strtoul_l.constprop.0+0xc8>
 8031f66:	2322      	movs	r3, #34	@ 0x22
 8031f68:	f8ce 3000 	str.w	r3, [lr]
 8031f6c:	4630      	mov	r0, r6
 8031f6e:	b932      	cbnz	r2, 8031f7e <_strtoul_l.constprop.0+0xd2>
 8031f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8031f74:	b107      	cbz	r7, 8031f78 <_strtoul_l.constprop.0+0xcc>
 8031f76:	4240      	negs	r0, r0
 8031f78:	2a00      	cmp	r2, #0
 8031f7a:	d0f9      	beq.n	8031f70 <_strtoul_l.constprop.0+0xc4>
 8031f7c:	b106      	cbz	r6, 8031f80 <_strtoul_l.constprop.0+0xd4>
 8031f7e:	1e69      	subs	r1, r5, #1
 8031f80:	6011      	str	r1, [r2, #0]
 8031f82:	e7f5      	b.n	8031f70 <_strtoul_l.constprop.0+0xc4>
 8031f84:	08038479 	.word	0x08038479

08031f88 <_strtoul_r>:
 8031f88:	f7ff bf90 	b.w	8031eac <_strtoul_l.constprop.0>

08031f8c <strtoul>:
 8031f8c:	4613      	mov	r3, r2
 8031f8e:	460a      	mov	r2, r1
 8031f90:	4601      	mov	r1, r0
 8031f92:	4802      	ldr	r0, [pc, #8]	@ (8031f9c <strtoul+0x10>)
 8031f94:	6800      	ldr	r0, [r0, #0]
 8031f96:	f7ff bf89 	b.w	8031eac <_strtoul_l.constprop.0>
 8031f9a:	bf00      	nop
 8031f9c:	20000254 	.word	0x20000254

08031fa0 <__submore>:
 8031fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8031fa4:	460c      	mov	r4, r1
 8031fa6:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8031fa8:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8031fac:	4299      	cmp	r1, r3
 8031fae:	d11d      	bne.n	8031fec <__submore+0x4c>
 8031fb0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8031fb4:	f7f9 ffba 	bl	802bf2c <_malloc_r>
 8031fb8:	b918      	cbnz	r0, 8031fc2 <__submore+0x22>
 8031fba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8031fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8031fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8031fc6:	6363      	str	r3, [r4, #52]	@ 0x34
 8031fc8:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8031fcc:	6320      	str	r0, [r4, #48]	@ 0x30
 8031fce:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8031fd2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8031fd6:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8031fda:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8031fde:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8031fe2:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8031fe6:	6020      	str	r0, [r4, #0]
 8031fe8:	2000      	movs	r0, #0
 8031fea:	e7e8      	b.n	8031fbe <__submore+0x1e>
 8031fec:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8031fee:	0077      	lsls	r7, r6, #1
 8031ff0:	463a      	mov	r2, r7
 8031ff2:	f7fe ffab 	bl	8030f4c <_realloc_r>
 8031ff6:	4605      	mov	r5, r0
 8031ff8:	2800      	cmp	r0, #0
 8031ffa:	d0de      	beq.n	8031fba <__submore+0x1a>
 8031ffc:	eb00 0806 	add.w	r8, r0, r6
 8032000:	4601      	mov	r1, r0
 8032002:	4632      	mov	r2, r6
 8032004:	4640      	mov	r0, r8
 8032006:	f7f8 ff77 	bl	802aef8 <memcpy>
 803200a:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 803200e:	f8c4 8000 	str.w	r8, [r4]
 8032012:	e7e9      	b.n	8031fe8 <__submore+0x48>

08032014 <__ascii_wctomb>:
 8032014:	4603      	mov	r3, r0
 8032016:	4608      	mov	r0, r1
 8032018:	b141      	cbz	r1, 803202c <__ascii_wctomb+0x18>
 803201a:	2aff      	cmp	r2, #255	@ 0xff
 803201c:	d904      	bls.n	8032028 <__ascii_wctomb+0x14>
 803201e:	228a      	movs	r2, #138	@ 0x8a
 8032020:	601a      	str	r2, [r3, #0]
 8032022:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8032026:	4770      	bx	lr
 8032028:	700a      	strb	r2, [r1, #0]
 803202a:	2001      	movs	r0, #1
 803202c:	4770      	bx	lr

0803202e <__swbuf_r>:
 803202e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8032030:	460e      	mov	r6, r1
 8032032:	4614      	mov	r4, r2
 8032034:	4605      	mov	r5, r0
 8032036:	b118      	cbz	r0, 8032040 <__swbuf_r+0x12>
 8032038:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 803203a:	b90b      	cbnz	r3, 8032040 <__swbuf_r+0x12>
 803203c:	f7f7 fa7a 	bl	8029534 <__sinit>
 8032040:	69a3      	ldr	r3, [r4, #24]
 8032042:	60a3      	str	r3, [r4, #8]
 8032044:	89a3      	ldrh	r3, [r4, #12]
 8032046:	0719      	lsls	r1, r3, #28
 8032048:	d501      	bpl.n	803204e <__swbuf_r+0x20>
 803204a:	6923      	ldr	r3, [r4, #16]
 803204c:	b943      	cbnz	r3, 8032060 <__swbuf_r+0x32>
 803204e:	4621      	mov	r1, r4
 8032050:	4628      	mov	r0, r5
 8032052:	f7f7 fc2b 	bl	80298ac <__swsetup_r>
 8032056:	b118      	cbz	r0, 8032060 <__swbuf_r+0x32>
 8032058:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 803205c:	4638      	mov	r0, r7
 803205e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8032060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8032064:	b2f6      	uxtb	r6, r6
 8032066:	049a      	lsls	r2, r3, #18
 8032068:	4637      	mov	r7, r6
 803206a:	d406      	bmi.n	803207a <__swbuf_r+0x4c>
 803206c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8032070:	81a3      	strh	r3, [r4, #12]
 8032072:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8032074:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8032078:	6663      	str	r3, [r4, #100]	@ 0x64
 803207a:	6823      	ldr	r3, [r4, #0]
 803207c:	6922      	ldr	r2, [r4, #16]
 803207e:	1a98      	subs	r0, r3, r2
 8032080:	6963      	ldr	r3, [r4, #20]
 8032082:	4283      	cmp	r3, r0
 8032084:	dc05      	bgt.n	8032092 <__swbuf_r+0x64>
 8032086:	4621      	mov	r1, r4
 8032088:	4628      	mov	r0, r5
 803208a:	f7f7 f911 	bl	80292b0 <_fflush_r>
 803208e:	2800      	cmp	r0, #0
 8032090:	d1e2      	bne.n	8032058 <__swbuf_r+0x2a>
 8032092:	68a3      	ldr	r3, [r4, #8]
 8032094:	3b01      	subs	r3, #1
 8032096:	60a3      	str	r3, [r4, #8]
 8032098:	6823      	ldr	r3, [r4, #0]
 803209a:	1c5a      	adds	r2, r3, #1
 803209c:	6022      	str	r2, [r4, #0]
 803209e:	701e      	strb	r6, [r3, #0]
 80320a0:	6962      	ldr	r2, [r4, #20]
 80320a2:	1c43      	adds	r3, r0, #1
 80320a4:	429a      	cmp	r2, r3
 80320a6:	d004      	beq.n	80320b2 <__swbuf_r+0x84>
 80320a8:	89a3      	ldrh	r3, [r4, #12]
 80320aa:	07db      	lsls	r3, r3, #31
 80320ac:	d5d6      	bpl.n	803205c <__swbuf_r+0x2e>
 80320ae:	2e0a      	cmp	r6, #10
 80320b0:	d1d4      	bne.n	803205c <__swbuf_r+0x2e>
 80320b2:	4621      	mov	r1, r4
 80320b4:	4628      	mov	r0, r5
 80320b6:	f7f7 f8fb 	bl	80292b0 <_fflush_r>
 80320ba:	2800      	cmp	r0, #0
 80320bc:	d0ce      	beq.n	803205c <__swbuf_r+0x2e>
 80320be:	e7cb      	b.n	8032058 <__swbuf_r+0x2a>

080320c0 <_raise_r>:
 80320c0:	291f      	cmp	r1, #31
 80320c2:	b538      	push	{r3, r4, r5, lr}
 80320c4:	4605      	mov	r5, r0
 80320c6:	460c      	mov	r4, r1
 80320c8:	d904      	bls.n	80320d4 <_raise_r+0x14>
 80320ca:	2316      	movs	r3, #22
 80320cc:	6003      	str	r3, [r0, #0]
 80320ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80320d2:	bd38      	pop	{r3, r4, r5, pc}
 80320d4:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 80320d8:	b112      	cbz	r2, 80320e0 <_raise_r+0x20>
 80320da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80320de:	b94b      	cbnz	r3, 80320f4 <_raise_r+0x34>
 80320e0:	4628      	mov	r0, r5
 80320e2:	f000 f8fd 	bl	80322e0 <_getpid_r>
 80320e6:	4622      	mov	r2, r4
 80320e8:	4601      	mov	r1, r0
 80320ea:	4628      	mov	r0, r5
 80320ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80320f0:	f000 b8e4 	b.w	80322bc <_kill_r>
 80320f4:	2b01      	cmp	r3, #1
 80320f6:	d00a      	beq.n	803210e <_raise_r+0x4e>
 80320f8:	1c59      	adds	r1, r3, #1
 80320fa:	d103      	bne.n	8032104 <_raise_r+0x44>
 80320fc:	2316      	movs	r3, #22
 80320fe:	6003      	str	r3, [r0, #0]
 8032100:	2001      	movs	r0, #1
 8032102:	e7e6      	b.n	80320d2 <_raise_r+0x12>
 8032104:	2100      	movs	r1, #0
 8032106:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 803210a:	4620      	mov	r0, r4
 803210c:	4798      	blx	r3
 803210e:	2000      	movs	r0, #0
 8032110:	e7df      	b.n	80320d2 <_raise_r+0x12>
	...

08032114 <raise>:
 8032114:	4b02      	ldr	r3, [pc, #8]	@ (8032120 <raise+0xc>)
 8032116:	4601      	mov	r1, r0
 8032118:	6818      	ldr	r0, [r3, #0]
 803211a:	f7ff bfd1 	b.w	80320c0 <_raise_r>
 803211e:	bf00      	nop
 8032120:	20000254 	.word	0x20000254

08032124 <__gettzinfo>:
 8032124:	4800      	ldr	r0, [pc, #0]	@ (8032128 <__gettzinfo+0x4>)
 8032126:	4770      	bx	lr
 8032128:	20000790 	.word	0x20000790

0803212c <gmtime_r>:
 803212c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8032130:	4a4d      	ldr	r2, [pc, #308]	@ (8032268 <gmtime_r+0x13c>)
 8032132:	460c      	mov	r4, r1
 8032134:	2300      	movs	r3, #0
 8032136:	e9d0 0100 	ldrd	r0, r1, [r0]
 803213a:	f7de fdbd 	bl	8010cb8 <__aeabi_ldivmod>
 803213e:	2a00      	cmp	r2, #0
 8032140:	bfbc      	itt	lt
 8032142:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 8032146:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 803214a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 803214e:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 8032152:	fbb2 f3f1 	udiv	r3, r2, r1
 8032156:	fb01 2213 	mls	r2, r1, r3, r2
 803215a:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 803215e:	bfac      	ite	ge
 8032160:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 8032164:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 8032168:	60a3      	str	r3, [r4, #8]
 803216a:	fbb2 f3f1 	udiv	r3, r2, r1
 803216e:	fb01 2213 	mls	r2, r1, r3, r2
 8032172:	6063      	str	r3, [r4, #4]
 8032174:	6022      	str	r2, [r4, #0]
 8032176:	1cc3      	adds	r3, r0, #3
 8032178:	2207      	movs	r2, #7
 803217a:	fb93 f2f2 	sdiv	r2, r3, r2
 803217e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8032182:	1a9b      	subs	r3, r3, r2
 8032184:	bf48      	it	mi
 8032186:	3307      	addmi	r3, #7
 8032188:	2800      	cmp	r0, #0
 803218a:	61a3      	str	r3, [r4, #24]
 803218c:	bfb8      	it	lt
 803218e:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 8032192:	4936      	ldr	r1, [pc, #216]	@ (803226c <gmtime_r+0x140>)
 8032194:	bfae      	itee	ge
 8032196:	fb90 f1f1 	sdivge	r1, r0, r1
 803219a:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 803219e:	fb93 f1f1 	sdivlt	r1, r3, r1
 80321a2:	4b33      	ldr	r3, [pc, #204]	@ (8032270 <gmtime_r+0x144>)
 80321a4:	fb03 0001 	mla	r0, r3, r1, r0
 80321a8:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 80321ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80321b0:	4403      	add	r3, r0
 80321b2:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 80321b6:	fbb0 f2fc 	udiv	r2, r0, ip
 80321ba:	1a9b      	subs	r3, r3, r2
 80321bc:	f240 176d 	movw	r7, #365	@ 0x16d
 80321c0:	4a2c      	ldr	r2, [pc, #176]	@ (8032274 <gmtime_r+0x148>)
 80321c2:	fbb0 f2f2 	udiv	r2, r0, r2
 80321c6:	2664      	movs	r6, #100	@ 0x64
 80321c8:	1a9b      	subs	r3, r3, r2
 80321ca:	fbb3 f2f7 	udiv	r2, r3, r7
 80321ce:	fbb3 f3fc 	udiv	r3, r3, ip
 80321d2:	fbb2 f5f6 	udiv	r5, r2, r6
 80321d6:	1aeb      	subs	r3, r5, r3
 80321d8:	4403      	add	r3, r0
 80321da:	fb07 3312 	mls	r3, r7, r2, r3
 80321de:	2099      	movs	r0, #153	@ 0x99
 80321e0:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80321e4:	3702      	adds	r7, #2
 80321e6:	f103 0e01 	add.w	lr, r3, #1
 80321ea:	fbb7 fcf0 	udiv	ip, r7, r0
 80321ee:	fb00 f00c 	mul.w	r0, r0, ip
 80321f2:	3002      	adds	r0, #2
 80321f4:	f04f 0805 	mov.w	r8, #5
 80321f8:	fbb0 f0f8 	udiv	r0, r0, r8
 80321fc:	ebae 0000 	sub.w	r0, lr, r0
 8032200:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8032204:	4577      	cmp	r7, lr
 8032206:	bf8c      	ite	hi
 8032208:	f06f 0709 	mvnhi.w	r7, #9
 803220c:	2702      	movls	r7, #2
 803220e:	4467      	add	r7, ip
 8032210:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8032214:	fb0c 2101 	mla	r1, ip, r1, r2
 8032218:	2f01      	cmp	r7, #1
 803221a:	bf98      	it	ls
 803221c:	3101      	addls	r1, #1
 803221e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8032222:	d30c      	bcc.n	803223e <gmtime_r+0x112>
 8032224:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8032228:	61e3      	str	r3, [r4, #28]
 803222a:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 803222e:	2300      	movs	r3, #0
 8032230:	60e0      	str	r0, [r4, #12]
 8032232:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8032236:	6223      	str	r3, [r4, #32]
 8032238:	4620      	mov	r0, r4
 803223a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803223e:	f012 0f03 	tst.w	r2, #3
 8032242:	d102      	bne.n	803224a <gmtime_r+0x11e>
 8032244:	fb06 2515 	mls	r5, r6, r5, r2
 8032248:	b95d      	cbnz	r5, 8032262 <gmtime_r+0x136>
 803224a:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 803224e:	fbb2 f6f5 	udiv	r6, r2, r5
 8032252:	fb05 2216 	mls	r2, r5, r6, r2
 8032256:	fab2 f282 	clz	r2, r2
 803225a:	0952      	lsrs	r2, r2, #5
 803225c:	333b      	adds	r3, #59	@ 0x3b
 803225e:	4413      	add	r3, r2
 8032260:	e7e2      	b.n	8032228 <gmtime_r+0xfc>
 8032262:	2201      	movs	r2, #1
 8032264:	e7fa      	b.n	803225c <gmtime_r+0x130>
 8032266:	bf00      	nop
 8032268:	00015180 	.word	0x00015180
 803226c:	00023ab1 	.word	0x00023ab1
 8032270:	fffdc54f 	.word	0xfffdc54f
 8032274:	00023ab0 	.word	0x00023ab0

08032278 <_fstat_r>:
 8032278:	b538      	push	{r3, r4, r5, lr}
 803227a:	4d07      	ldr	r5, [pc, #28]	@ (8032298 <_fstat_r+0x20>)
 803227c:	2300      	movs	r3, #0
 803227e:	4604      	mov	r4, r0
 8032280:	4608      	mov	r0, r1
 8032282:	4611      	mov	r1, r2
 8032284:	602b      	str	r3, [r5, #0]
 8032286:	f7df ff70 	bl	801216a <_fstat>
 803228a:	1c43      	adds	r3, r0, #1
 803228c:	d102      	bne.n	8032294 <_fstat_r+0x1c>
 803228e:	682b      	ldr	r3, [r5, #0]
 8032290:	b103      	cbz	r3, 8032294 <_fstat_r+0x1c>
 8032292:	6023      	str	r3, [r4, #0]
 8032294:	bd38      	pop	{r3, r4, r5, pc}
 8032296:	bf00      	nop
 8032298:	20018184 	.word	0x20018184

0803229c <_isatty_r>:
 803229c:	b538      	push	{r3, r4, r5, lr}
 803229e:	4d06      	ldr	r5, [pc, #24]	@ (80322b8 <_isatty_r+0x1c>)
 80322a0:	2300      	movs	r3, #0
 80322a2:	4604      	mov	r4, r0
 80322a4:	4608      	mov	r0, r1
 80322a6:	602b      	str	r3, [r5, #0]
 80322a8:	f7df ff64 	bl	8012174 <_isatty>
 80322ac:	1c43      	adds	r3, r0, #1
 80322ae:	d102      	bne.n	80322b6 <_isatty_r+0x1a>
 80322b0:	682b      	ldr	r3, [r5, #0]
 80322b2:	b103      	cbz	r3, 80322b6 <_isatty_r+0x1a>
 80322b4:	6023      	str	r3, [r4, #0]
 80322b6:	bd38      	pop	{r3, r4, r5, pc}
 80322b8:	20018184 	.word	0x20018184

080322bc <_kill_r>:
 80322bc:	b538      	push	{r3, r4, r5, lr}
 80322be:	4d07      	ldr	r5, [pc, #28]	@ (80322dc <_kill_r+0x20>)
 80322c0:	2300      	movs	r3, #0
 80322c2:	4604      	mov	r4, r0
 80322c4:	4608      	mov	r0, r1
 80322c6:	4611      	mov	r1, r2
 80322c8:	602b      	str	r3, [r5, #0]
 80322ca:	f7df ff1f 	bl	801210c <_kill>
 80322ce:	1c43      	adds	r3, r0, #1
 80322d0:	d102      	bne.n	80322d8 <_kill_r+0x1c>
 80322d2:	682b      	ldr	r3, [r5, #0]
 80322d4:	b103      	cbz	r3, 80322d8 <_kill_r+0x1c>
 80322d6:	6023      	str	r3, [r4, #0]
 80322d8:	bd38      	pop	{r3, r4, r5, pc}
 80322da:	bf00      	nop
 80322dc:	20018184 	.word	0x20018184

080322e0 <_getpid_r>:
 80322e0:	f7df bf12 	b.w	8012108 <_getpid>

080322e4 <_sbrk_r>:
 80322e4:	b538      	push	{r3, r4, r5, lr}
 80322e6:	4d06      	ldr	r5, [pc, #24]	@ (8032300 <_sbrk_r+0x1c>)
 80322e8:	2300      	movs	r3, #0
 80322ea:	4604      	mov	r4, r0
 80322ec:	4608      	mov	r0, r1
 80322ee:	602b      	str	r3, [r5, #0]
 80322f0:	f7df ff44 	bl	801217c <_sbrk>
 80322f4:	1c43      	adds	r3, r0, #1
 80322f6:	d102      	bne.n	80322fe <_sbrk_r+0x1a>
 80322f8:	682b      	ldr	r3, [r5, #0]
 80322fa:	b103      	cbz	r3, 80322fe <_sbrk_r+0x1a>
 80322fc:	6023      	str	r3, [r4, #0]
 80322fe:	bd38      	pop	{r3, r4, r5, pc}
 8032300:	20018184 	.word	0x20018184

08032304 <sysconf>:
 8032304:	2808      	cmp	r0, #8
 8032306:	b508      	push	{r3, lr}
 8032308:	d006      	beq.n	8032318 <sysconf+0x14>
 803230a:	f7f8 fdbd 	bl	802ae88 <__errno>
 803230e:	2316      	movs	r3, #22
 8032310:	6003      	str	r3, [r0, #0]
 8032312:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8032316:	bd08      	pop	{r3, pc}
 8032318:	2080      	movs	r0, #128	@ 0x80
 803231a:	e7fc      	b.n	8032316 <sysconf+0x12>

0803231c <_strtoll_l.constprop.0>:
 803231c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032320:	b085      	sub	sp, #20
 8032322:	4690      	mov	r8, r2
 8032324:	4a43      	ldr	r2, [pc, #268]	@ (8032434 <_strtoll_l.constprop.0+0x118>)
 8032326:	9002      	str	r0, [sp, #8]
 8032328:	4689      	mov	r9, r1
 803232a:	461e      	mov	r6, r3
 803232c:	460d      	mov	r5, r1
 803232e:	462b      	mov	r3, r5
 8032330:	f815 4b01 	ldrb.w	r4, [r5], #1
 8032334:	5d17      	ldrb	r7, [r2, r4]
 8032336:	f017 0708 	ands.w	r7, r7, #8
 803233a:	d1f8      	bne.n	803232e <_strtoll_l.constprop.0+0x12>
 803233c:	2c2d      	cmp	r4, #45	@ 0x2d
 803233e:	d149      	bne.n	80323d4 <_strtoll_l.constprop.0+0xb8>
 8032340:	782c      	ldrb	r4, [r5, #0]
 8032342:	2701      	movs	r7, #1
 8032344:	1c9d      	adds	r5, r3, #2
 8032346:	f036 0310 	bics.w	r3, r6, #16
 803234a:	d109      	bne.n	8032360 <_strtoll_l.constprop.0+0x44>
 803234c:	2c30      	cmp	r4, #48	@ 0x30
 803234e:	d146      	bne.n	80323de <_strtoll_l.constprop.0+0xc2>
 8032350:	782b      	ldrb	r3, [r5, #0]
 8032352:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8032356:	2b58      	cmp	r3, #88	@ 0x58
 8032358:	d141      	bne.n	80323de <_strtoll_l.constprop.0+0xc2>
 803235a:	786c      	ldrb	r4, [r5, #1]
 803235c:	2610      	movs	r6, #16
 803235e:	3502      	adds	r5, #2
 8032360:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 8032364:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 8032368:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 803236c:	17f3      	asrs	r3, r6, #31
 803236e:	4632      	mov	r2, r6
 8032370:	4658      	mov	r0, fp
 8032372:	4651      	mov	r1, sl
 8032374:	9303      	str	r3, [sp, #12]
 8032376:	f7de fcef 	bl	8010d58 <__aeabi_uldivmod>
 803237a:	9201      	str	r2, [sp, #4]
 803237c:	2200      	movs	r2, #0
 803237e:	468e      	mov	lr, r1
 8032380:	4684      	mov	ip, r0
 8032382:	4611      	mov	r1, r2
 8032384:	4610      	mov	r0, r2
 8032386:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 803238a:	2b09      	cmp	r3, #9
 803238c:	d905      	bls.n	803239a <_strtoll_l.constprop.0+0x7e>
 803238e:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 8032392:	2b19      	cmp	r3, #25
 8032394:	d82a      	bhi.n	80323ec <_strtoll_l.constprop.0+0xd0>
 8032396:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 803239a:	429e      	cmp	r6, r3
 803239c:	dd30      	ble.n	8032400 <_strtoll_l.constprop.0+0xe4>
 803239e:	1c54      	adds	r4, r2, #1
 80323a0:	d015      	beq.n	80323ce <_strtoll_l.constprop.0+0xb2>
 80323a2:	4584      	cmp	ip, r0
 80323a4:	eb7e 0201 	sbcs.w	r2, lr, r1
 80323a8:	d327      	bcc.n	80323fa <_strtoll_l.constprop.0+0xde>
 80323aa:	458e      	cmp	lr, r1
 80323ac:	bf08      	it	eq
 80323ae:	4584      	cmpeq	ip, r0
 80323b0:	d102      	bne.n	80323b8 <_strtoll_l.constprop.0+0x9c>
 80323b2:	9a01      	ldr	r2, [sp, #4]
 80323b4:	429a      	cmp	r2, r3
 80323b6:	db20      	blt.n	80323fa <_strtoll_l.constprop.0+0xde>
 80323b8:	9a03      	ldr	r2, [sp, #12]
 80323ba:	4371      	muls	r1, r6
 80323bc:	fb00 1102 	mla	r1, r0, r2, r1
 80323c0:	fba6 0200 	umull	r0, r2, r6, r0
 80323c4:	440a      	add	r2, r1
 80323c6:	1818      	adds	r0, r3, r0
 80323c8:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 80323cc:	2201      	movs	r2, #1
 80323ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80323d2:	e7d8      	b.n	8032386 <_strtoll_l.constprop.0+0x6a>
 80323d4:	2c2b      	cmp	r4, #43	@ 0x2b
 80323d6:	bf04      	itt	eq
 80323d8:	782c      	ldrbeq	r4, [r5, #0]
 80323da:	1c9d      	addeq	r5, r3, #2
 80323dc:	e7b3      	b.n	8032346 <_strtoll_l.constprop.0+0x2a>
 80323de:	2e00      	cmp	r6, #0
 80323e0:	d1be      	bne.n	8032360 <_strtoll_l.constprop.0+0x44>
 80323e2:	2c30      	cmp	r4, #48	@ 0x30
 80323e4:	bf0c      	ite	eq
 80323e6:	2608      	moveq	r6, #8
 80323e8:	260a      	movne	r6, #10
 80323ea:	e7b9      	b.n	8032360 <_strtoll_l.constprop.0+0x44>
 80323ec:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 80323f0:	2b19      	cmp	r3, #25
 80323f2:	d805      	bhi.n	8032400 <_strtoll_l.constprop.0+0xe4>
 80323f4:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 80323f8:	e7cf      	b.n	803239a <_strtoll_l.constprop.0+0x7e>
 80323fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80323fe:	e7e6      	b.n	80323ce <_strtoll_l.constprop.0+0xb2>
 8032400:	1c53      	adds	r3, r2, #1
 8032402:	d10a      	bne.n	803241a <_strtoll_l.constprop.0+0xfe>
 8032404:	9a02      	ldr	r2, [sp, #8]
 8032406:	2322      	movs	r3, #34	@ 0x22
 8032408:	6013      	str	r3, [r2, #0]
 803240a:	4658      	mov	r0, fp
 803240c:	4651      	mov	r1, sl
 803240e:	f1b8 0f00 	cmp.w	r8, #0
 8032412:	d10a      	bne.n	803242a <_strtoll_l.constprop.0+0x10e>
 8032414:	b005      	add	sp, #20
 8032416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803241a:	b117      	cbz	r7, 8032422 <_strtoll_l.constprop.0+0x106>
 803241c:	4240      	negs	r0, r0
 803241e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8032422:	f1b8 0f00 	cmp.w	r8, #0
 8032426:	d0f5      	beq.n	8032414 <_strtoll_l.constprop.0+0xf8>
 8032428:	b10a      	cbz	r2, 803242e <_strtoll_l.constprop.0+0x112>
 803242a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 803242e:	f8c8 9000 	str.w	r9, [r8]
 8032432:	e7ef      	b.n	8032414 <_strtoll_l.constprop.0+0xf8>
 8032434:	08038479 	.word	0x08038479

08032438 <_strtoll_r>:
 8032438:	f7ff bf70 	b.w	803231c <_strtoll_l.constprop.0>

0803243c <__libc_fini_array>:
 803243c:	b538      	push	{r3, r4, r5, lr}
 803243e:	4d07      	ldr	r5, [pc, #28]	@ (803245c <__libc_fini_array+0x20>)
 8032440:	4c07      	ldr	r4, [pc, #28]	@ (8032460 <__libc_fini_array+0x24>)
 8032442:	1b64      	subs	r4, r4, r5
 8032444:	10a4      	asrs	r4, r4, #2
 8032446:	b91c      	cbnz	r4, 8032450 <__libc_fini_array+0x14>
 8032448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803244c:	f000 bc9c 	b.w	8032d88 <_fini>
 8032450:	3c01      	subs	r4, #1
 8032452:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8032456:	4798      	blx	r3
 8032458:	e7f5      	b.n	8032446 <__libc_fini_array+0xa>
 803245a:	bf00      	nop
 803245c:	08038890 	.word	0x08038890
 8032460:	08038894 	.word	0x08038894

08032464 <_strtoull_l.constprop.0>:
 8032464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032468:	4691      	mov	r9, r2
 803246a:	4a48      	ldr	r2, [pc, #288]	@ (803258c <_strtoull_l.constprop.0+0x128>)
 803246c:	9001      	str	r0, [sp, #4]
 803246e:	468a      	mov	sl, r1
 8032470:	461e      	mov	r6, r3
 8032472:	460d      	mov	r5, r1
 8032474:	462b      	mov	r3, r5
 8032476:	f815 4b01 	ldrb.w	r4, [r5], #1
 803247a:	5d17      	ldrb	r7, [r2, r4]
 803247c:	f017 0708 	ands.w	r7, r7, #8
 8032480:	d1f8      	bne.n	8032474 <_strtoull_l.constprop.0+0x10>
 8032482:	2c2d      	cmp	r4, #45	@ 0x2d
 8032484:	d14a      	bne.n	803251c <_strtoull_l.constprop.0+0xb8>
 8032486:	782c      	ldrb	r4, [r5, #0]
 8032488:	2701      	movs	r7, #1
 803248a:	1c9d      	adds	r5, r3, #2
 803248c:	f036 0310 	bics.w	r3, r6, #16
 8032490:	d109      	bne.n	80324a6 <_strtoull_l.constprop.0+0x42>
 8032492:	2c30      	cmp	r4, #48	@ 0x30
 8032494:	d147      	bne.n	8032526 <_strtoull_l.constprop.0+0xc2>
 8032496:	782b      	ldrb	r3, [r5, #0]
 8032498:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 803249c:	2b58      	cmp	r3, #88	@ 0x58
 803249e:	d142      	bne.n	8032526 <_strtoull_l.constprop.0+0xc2>
 80324a0:	786c      	ldrb	r4, [r5, #1]
 80324a2:	2610      	movs	r6, #16
 80324a4:	3502      	adds	r5, #2
 80324a6:	ea4f 7be6 	mov.w	fp, r6, asr #31
 80324aa:	4632      	mov	r2, r6
 80324ac:	465b      	mov	r3, fp
 80324ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80324b2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80324b6:	f7de fc4f 	bl	8010d58 <__aeabi_uldivmod>
 80324ba:	4632      	mov	r2, r6
 80324bc:	9000      	str	r0, [sp, #0]
 80324be:	4688      	mov	r8, r1
 80324c0:	465b      	mov	r3, fp
 80324c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80324c6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80324ca:	f7de fc45 	bl	8010d58 <__aeabi_uldivmod>
 80324ce:	2300      	movs	r3, #0
 80324d0:	4618      	mov	r0, r3
 80324d2:	4619      	mov	r1, r3
 80324d4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80324d8:	f1bc 0f09 	cmp.w	ip, #9
 80324dc:	d82a      	bhi.n	8032534 <_strtoull_l.constprop.0+0xd0>
 80324de:	4664      	mov	r4, ip
 80324e0:	42a6      	cmp	r6, r4
 80324e2:	dd38      	ble.n	8032556 <_strtoull_l.constprop.0+0xf2>
 80324e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80324e8:	d015      	beq.n	8032516 <_strtoull_l.constprop.0+0xb2>
 80324ea:	9b00      	ldr	r3, [sp, #0]
 80324ec:	4283      	cmp	r3, r0
 80324ee:	eb78 0301 	sbcs.w	r3, r8, r1
 80324f2:	d32d      	bcc.n	8032550 <_strtoull_l.constprop.0+0xec>
 80324f4:	9b00      	ldr	r3, [sp, #0]
 80324f6:	4588      	cmp	r8, r1
 80324f8:	bf08      	it	eq
 80324fa:	4283      	cmpeq	r3, r0
 80324fc:	d101      	bne.n	8032502 <_strtoull_l.constprop.0+0x9e>
 80324fe:	42a2      	cmp	r2, r4
 8032500:	db26      	blt.n	8032550 <_strtoull_l.constprop.0+0xec>
 8032502:	4371      	muls	r1, r6
 8032504:	fb00 110b 	mla	r1, r0, fp, r1
 8032508:	fba6 0300 	umull	r0, r3, r6, r0
 803250c:	4419      	add	r1, r3
 803250e:	1820      	adds	r0, r4, r0
 8032510:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8032514:	2301      	movs	r3, #1
 8032516:	f815 4b01 	ldrb.w	r4, [r5], #1
 803251a:	e7db      	b.n	80324d4 <_strtoull_l.constprop.0+0x70>
 803251c:	2c2b      	cmp	r4, #43	@ 0x2b
 803251e:	bf04      	itt	eq
 8032520:	782c      	ldrbeq	r4, [r5, #0]
 8032522:	1c9d      	addeq	r5, r3, #2
 8032524:	e7b2      	b.n	803248c <_strtoull_l.constprop.0+0x28>
 8032526:	2e00      	cmp	r6, #0
 8032528:	d1bd      	bne.n	80324a6 <_strtoull_l.constprop.0+0x42>
 803252a:	2c30      	cmp	r4, #48	@ 0x30
 803252c:	bf0c      	ite	eq
 803252e:	2608      	moveq	r6, #8
 8032530:	260a      	movne	r6, #10
 8032532:	e7b8      	b.n	80324a6 <_strtoull_l.constprop.0+0x42>
 8032534:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8032538:	f1bc 0f19 	cmp.w	ip, #25
 803253c:	d801      	bhi.n	8032542 <_strtoull_l.constprop.0+0xde>
 803253e:	3c37      	subs	r4, #55	@ 0x37
 8032540:	e7ce      	b.n	80324e0 <_strtoull_l.constprop.0+0x7c>
 8032542:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8032546:	f1bc 0f19 	cmp.w	ip, #25
 803254a:	d804      	bhi.n	8032556 <_strtoull_l.constprop.0+0xf2>
 803254c:	3c57      	subs	r4, #87	@ 0x57
 803254e:	e7c7      	b.n	80324e0 <_strtoull_l.constprop.0+0x7c>
 8032550:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8032554:	e7df      	b.n	8032516 <_strtoull_l.constprop.0+0xb2>
 8032556:	1c5a      	adds	r2, r3, #1
 8032558:	d10a      	bne.n	8032570 <_strtoull_l.constprop.0+0x10c>
 803255a:	9901      	ldr	r1, [sp, #4]
 803255c:	2222      	movs	r2, #34	@ 0x22
 803255e:	600a      	str	r2, [r1, #0]
 8032560:	4618      	mov	r0, r3
 8032562:	4619      	mov	r1, r3
 8032564:	f1b9 0f00 	cmp.w	r9, #0
 8032568:	d10a      	bne.n	8032580 <_strtoull_l.constprop.0+0x11c>
 803256a:	b003      	add	sp, #12
 803256c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8032570:	b117      	cbz	r7, 8032578 <_strtoull_l.constprop.0+0x114>
 8032572:	4240      	negs	r0, r0
 8032574:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8032578:	f1b9 0f00 	cmp.w	r9, #0
 803257c:	d0f5      	beq.n	803256a <_strtoull_l.constprop.0+0x106>
 803257e:	b10b      	cbz	r3, 8032584 <_strtoull_l.constprop.0+0x120>
 8032580:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8032584:	f8c9 a000 	str.w	sl, [r9]
 8032588:	e7ef      	b.n	803256a <_strtoull_l.constprop.0+0x106>
 803258a:	bf00      	nop
 803258c:	08038479 	.word	0x08038479

08032590 <_strtoull_r>:
 8032590:	f7ff bf68 	b.w	8032464 <_strtoull_l.constprop.0>

08032594 <_mbrtowc_r>:
 8032594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8032596:	4c0a      	ldr	r4, [pc, #40]	@ (80325c0 <_mbrtowc_r+0x2c>)
 8032598:	9e08      	ldr	r6, [sp, #32]
 803259a:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 803259e:	9600      	str	r6, [sp, #0]
 80325a0:	4605      	mov	r5, r0
 80325a2:	4614      	mov	r4, r2
 80325a4:	b912      	cbnz	r2, 80325ac <_mbrtowc_r+0x18>
 80325a6:	4a07      	ldr	r2, [pc, #28]	@ (80325c4 <_mbrtowc_r+0x30>)
 80325a8:	2301      	movs	r3, #1
 80325aa:	4621      	mov	r1, r4
 80325ac:	47b8      	blx	r7
 80325ae:	1c43      	adds	r3, r0, #1
 80325b0:	bf01      	itttt	eq
 80325b2:	2300      	moveq	r3, #0
 80325b4:	6033      	streq	r3, [r6, #0]
 80325b6:	238a      	moveq	r3, #138	@ 0x8a
 80325b8:	602b      	streq	r3, [r5, #0]
 80325ba:	b003      	add	sp, #12
 80325bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80325be:	bf00      	nop
 80325c0:	200000e8 	.word	0x200000e8
 80325c4:	080380ba 	.word	0x080380ba

080325c8 <iswspace>:
 80325c8:	2100      	movs	r1, #0
 80325ca:	f000 b801 	b.w	80325d0 <iswspace_l>
	...

080325d0 <iswspace_l>:
 80325d0:	28ff      	cmp	r0, #255	@ 0xff
 80325d2:	bf9d      	ittte	ls
 80325d4:	4b02      	ldrls	r3, [pc, #8]	@ (80325e0 <iswspace_l+0x10>)
 80325d6:	5c18      	ldrbls	r0, [r3, r0]
 80325d8:	f000 0008 	andls.w	r0, r0, #8
 80325dc:	2000      	movhi	r0, #0
 80325de:	4770      	bx	lr
 80325e0:	08038479 	.word	0x08038479

080325e4 <__register_exitproc>:
 80325e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80325e8:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8032660 <__register_exitproc+0x7c>
 80325ec:	4606      	mov	r6, r0
 80325ee:	f8da 0000 	ldr.w	r0, [sl]
 80325f2:	4698      	mov	r8, r3
 80325f4:	460f      	mov	r7, r1
 80325f6:	4691      	mov	r9, r2
 80325f8:	f7f8 fc7b 	bl	802aef2 <__retarget_lock_acquire_recursive>
 80325fc:	4b16      	ldr	r3, [pc, #88]	@ (8032658 <__register_exitproc+0x74>)
 80325fe:	681c      	ldr	r4, [r3, #0]
 8032600:	b90c      	cbnz	r4, 8032606 <__register_exitproc+0x22>
 8032602:	4c16      	ldr	r4, [pc, #88]	@ (803265c <__register_exitproc+0x78>)
 8032604:	601c      	str	r4, [r3, #0]
 8032606:	6865      	ldr	r5, [r4, #4]
 8032608:	f8da 0000 	ldr.w	r0, [sl]
 803260c:	2d1f      	cmp	r5, #31
 803260e:	dd05      	ble.n	803261c <__register_exitproc+0x38>
 8032610:	f7f8 fc71 	bl	802aef6 <__retarget_lock_release_recursive>
 8032614:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8032618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803261c:	b19e      	cbz	r6, 8032646 <__register_exitproc+0x62>
 803261e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8032622:	2201      	movs	r2, #1
 8032624:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8032628:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 803262c:	40aa      	lsls	r2, r5
 803262e:	4313      	orrs	r3, r2
 8032630:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8032634:	2e02      	cmp	r6, #2
 8032636:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 803263a:	bf02      	ittt	eq
 803263c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8032640:	4313      	orreq	r3, r2
 8032642:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8032646:	1c6b      	adds	r3, r5, #1
 8032648:	3502      	adds	r5, #2
 803264a:	6063      	str	r3, [r4, #4]
 803264c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8032650:	f7f8 fc51 	bl	802aef6 <__retarget_lock_release_recursive>
 8032654:	2000      	movs	r0, #0
 8032656:	e7df      	b.n	8032618 <__register_exitproc+0x34>
 8032658:	20018190 	.word	0x20018190
 803265c:	200181c8 	.word	0x200181c8
 8032660:	20000378 	.word	0x20000378
 8032664:	00000000 	.word	0x00000000

08032668 <nan>:
 8032668:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8032670 <nan+0x8>
 803266c:	4770      	bx	lr
 803266e:	bf00      	nop
 8032670:	00000000 	.word	0x00000000
 8032674:	7ff80000 	.word	0x7ff80000

08032678 <nanf>:
 8032678:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8032680 <nanf+0x8>
 803267c:	4770      	bx	lr
 803267e:	bf00      	nop
 8032680:	7fc00000 	.word	0x7fc00000

08032684 <_calloc_r>:
 8032684:	b538      	push	{r3, r4, r5, lr}
 8032686:	fba1 1502 	umull	r1, r5, r1, r2
 803268a:	b935      	cbnz	r5, 803269a <_calloc_r+0x16>
 803268c:	f7f9 fc4e 	bl	802bf2c <_malloc_r>
 8032690:	4604      	mov	r4, r0
 8032692:	b938      	cbnz	r0, 80326a4 <_calloc_r+0x20>
 8032694:	2400      	movs	r4, #0
 8032696:	4620      	mov	r0, r4
 8032698:	bd38      	pop	{r3, r4, r5, pc}
 803269a:	f7f8 fbf5 	bl	802ae88 <__errno>
 803269e:	230c      	movs	r3, #12
 80326a0:	6003      	str	r3, [r0, #0]
 80326a2:	e7f7      	b.n	8032694 <_calloc_r+0x10>
 80326a4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80326a8:	f022 0203 	bic.w	r2, r2, #3
 80326ac:	3a04      	subs	r2, #4
 80326ae:	2a24      	cmp	r2, #36	@ 0x24
 80326b0:	d819      	bhi.n	80326e6 <_calloc_r+0x62>
 80326b2:	2a13      	cmp	r2, #19
 80326b4:	d915      	bls.n	80326e2 <_calloc_r+0x5e>
 80326b6:	2a1b      	cmp	r2, #27
 80326b8:	e9c0 5500 	strd	r5, r5, [r0]
 80326bc:	d806      	bhi.n	80326cc <_calloc_r+0x48>
 80326be:	f100 0308 	add.w	r3, r0, #8
 80326c2:	2200      	movs	r2, #0
 80326c4:	e9c3 2200 	strd	r2, r2, [r3]
 80326c8:	609a      	str	r2, [r3, #8]
 80326ca:	e7e4      	b.n	8032696 <_calloc_r+0x12>
 80326cc:	2a24      	cmp	r2, #36	@ 0x24
 80326ce:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80326d2:	bf11      	iteee	ne
 80326d4:	f100 0310 	addne.w	r3, r0, #16
 80326d8:	6105      	streq	r5, [r0, #16]
 80326da:	f100 0318 	addeq.w	r3, r0, #24
 80326de:	6145      	streq	r5, [r0, #20]
 80326e0:	e7ef      	b.n	80326c2 <_calloc_r+0x3e>
 80326e2:	4603      	mov	r3, r0
 80326e4:	e7ed      	b.n	80326c2 <_calloc_r+0x3e>
 80326e6:	4629      	mov	r1, r5
 80326e8:	f7f7 f9ca 	bl	8029a80 <memset>
 80326ec:	e7d3      	b.n	8032696 <_calloc_r+0x12>
	...

080326f0 <__env_lock>:
 80326f0:	4801      	ldr	r0, [pc, #4]	@ (80326f8 <__env_lock+0x8>)
 80326f2:	f7f8 bbfe 	b.w	802aef2 <__retarget_lock_acquire_recursive>
 80326f6:	bf00      	nop
 80326f8:	20018189 	.word	0x20018189

080326fc <__env_unlock>:
 80326fc:	4801      	ldr	r0, [pc, #4]	@ (8032704 <__env_unlock+0x8>)
 80326fe:	f7f8 bbfa 	b.w	802aef6 <__retarget_lock_release_recursive>
 8032702:	bf00      	nop
 8032704:	20018189 	.word	0x20018189

08032708 <rshift>:
 8032708:	6903      	ldr	r3, [r0, #16]
 803270a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 803270e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8032712:	ea4f 1261 	mov.w	r2, r1, asr #5
 8032716:	f100 0414 	add.w	r4, r0, #20
 803271a:	dd45      	ble.n	80327a8 <rshift+0xa0>
 803271c:	f011 011f 	ands.w	r1, r1, #31
 8032720:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8032724:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8032728:	d10c      	bne.n	8032744 <rshift+0x3c>
 803272a:	f100 0710 	add.w	r7, r0, #16
 803272e:	4629      	mov	r1, r5
 8032730:	42b1      	cmp	r1, r6
 8032732:	d334      	bcc.n	803279e <rshift+0x96>
 8032734:	1a9b      	subs	r3, r3, r2
 8032736:	009b      	lsls	r3, r3, #2
 8032738:	1eea      	subs	r2, r5, #3
 803273a:	4296      	cmp	r6, r2
 803273c:	bf38      	it	cc
 803273e:	2300      	movcc	r3, #0
 8032740:	4423      	add	r3, r4
 8032742:	e015      	b.n	8032770 <rshift+0x68>
 8032744:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8032748:	f1c1 0820 	rsb	r8, r1, #32
 803274c:	40cf      	lsrs	r7, r1
 803274e:	f105 0e04 	add.w	lr, r5, #4
 8032752:	46a1      	mov	r9, r4
 8032754:	4576      	cmp	r6, lr
 8032756:	46f4      	mov	ip, lr
 8032758:	d815      	bhi.n	8032786 <rshift+0x7e>
 803275a:	1a9a      	subs	r2, r3, r2
 803275c:	0092      	lsls	r2, r2, #2
 803275e:	3a04      	subs	r2, #4
 8032760:	3501      	adds	r5, #1
 8032762:	42ae      	cmp	r6, r5
 8032764:	bf38      	it	cc
 8032766:	2200      	movcc	r2, #0
 8032768:	18a3      	adds	r3, r4, r2
 803276a:	50a7      	str	r7, [r4, r2]
 803276c:	b107      	cbz	r7, 8032770 <rshift+0x68>
 803276e:	3304      	adds	r3, #4
 8032770:	1b1a      	subs	r2, r3, r4
 8032772:	42a3      	cmp	r3, r4
 8032774:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8032778:	bf08      	it	eq
 803277a:	2300      	moveq	r3, #0
 803277c:	6102      	str	r2, [r0, #16]
 803277e:	bf08      	it	eq
 8032780:	6143      	streq	r3, [r0, #20]
 8032782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8032786:	f8dc c000 	ldr.w	ip, [ip]
 803278a:	fa0c fc08 	lsl.w	ip, ip, r8
 803278e:	ea4c 0707 	orr.w	r7, ip, r7
 8032792:	f849 7b04 	str.w	r7, [r9], #4
 8032796:	f85e 7b04 	ldr.w	r7, [lr], #4
 803279a:	40cf      	lsrs	r7, r1
 803279c:	e7da      	b.n	8032754 <rshift+0x4c>
 803279e:	f851 cb04 	ldr.w	ip, [r1], #4
 80327a2:	f847 cf04 	str.w	ip, [r7, #4]!
 80327a6:	e7c3      	b.n	8032730 <rshift+0x28>
 80327a8:	4623      	mov	r3, r4
 80327aa:	e7e1      	b.n	8032770 <rshift+0x68>

080327ac <__hexdig_fun>:
 80327ac:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80327b0:	2b09      	cmp	r3, #9
 80327b2:	d802      	bhi.n	80327ba <__hexdig_fun+0xe>
 80327b4:	3820      	subs	r0, #32
 80327b6:	b2c0      	uxtb	r0, r0
 80327b8:	4770      	bx	lr
 80327ba:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80327be:	2b05      	cmp	r3, #5
 80327c0:	d801      	bhi.n	80327c6 <__hexdig_fun+0x1a>
 80327c2:	3847      	subs	r0, #71	@ 0x47
 80327c4:	e7f7      	b.n	80327b6 <__hexdig_fun+0xa>
 80327c6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80327ca:	2b05      	cmp	r3, #5
 80327cc:	d801      	bhi.n	80327d2 <__hexdig_fun+0x26>
 80327ce:	3827      	subs	r0, #39	@ 0x27
 80327d0:	e7f1      	b.n	80327b6 <__hexdig_fun+0xa>
 80327d2:	2000      	movs	r0, #0
 80327d4:	4770      	bx	lr
	...

080327d8 <__gethex>:
 80327d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80327dc:	b085      	sub	sp, #20
 80327de:	468a      	mov	sl, r1
 80327e0:	9302      	str	r3, [sp, #8]
 80327e2:	680b      	ldr	r3, [r1, #0]
 80327e4:	9001      	str	r0, [sp, #4]
 80327e6:	4690      	mov	r8, r2
 80327e8:	1c9c      	adds	r4, r3, #2
 80327ea:	46a1      	mov	r9, r4
 80327ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 80327f0:	2830      	cmp	r0, #48	@ 0x30
 80327f2:	d0fa      	beq.n	80327ea <__gethex+0x12>
 80327f4:	eba9 0303 	sub.w	r3, r9, r3
 80327f8:	f1a3 0b02 	sub.w	fp, r3, #2
 80327fc:	f7ff ffd6 	bl	80327ac <__hexdig_fun>
 8032800:	4605      	mov	r5, r0
 8032802:	2800      	cmp	r0, #0
 8032804:	d168      	bne.n	80328d8 <__gethex+0x100>
 8032806:	49a0      	ldr	r1, [pc, #640]	@ (8032a88 <__gethex+0x2b0>)
 8032808:	2201      	movs	r2, #1
 803280a:	4648      	mov	r0, r9
 803280c:	f7f7 f96d 	bl	8029aea <strncmp>
 8032810:	4607      	mov	r7, r0
 8032812:	2800      	cmp	r0, #0
 8032814:	d167      	bne.n	80328e6 <__gethex+0x10e>
 8032816:	f899 0001 	ldrb.w	r0, [r9, #1]
 803281a:	4626      	mov	r6, r4
 803281c:	f7ff ffc6 	bl	80327ac <__hexdig_fun>
 8032820:	2800      	cmp	r0, #0
 8032822:	d062      	beq.n	80328ea <__gethex+0x112>
 8032824:	4623      	mov	r3, r4
 8032826:	7818      	ldrb	r0, [r3, #0]
 8032828:	2830      	cmp	r0, #48	@ 0x30
 803282a:	4699      	mov	r9, r3
 803282c:	f103 0301 	add.w	r3, r3, #1
 8032830:	d0f9      	beq.n	8032826 <__gethex+0x4e>
 8032832:	f7ff ffbb 	bl	80327ac <__hexdig_fun>
 8032836:	fab0 f580 	clz	r5, r0
 803283a:	096d      	lsrs	r5, r5, #5
 803283c:	f04f 0b01 	mov.w	fp, #1
 8032840:	464a      	mov	r2, r9
 8032842:	4616      	mov	r6, r2
 8032844:	3201      	adds	r2, #1
 8032846:	7830      	ldrb	r0, [r6, #0]
 8032848:	f7ff ffb0 	bl	80327ac <__hexdig_fun>
 803284c:	2800      	cmp	r0, #0
 803284e:	d1f8      	bne.n	8032842 <__gethex+0x6a>
 8032850:	498d      	ldr	r1, [pc, #564]	@ (8032a88 <__gethex+0x2b0>)
 8032852:	2201      	movs	r2, #1
 8032854:	4630      	mov	r0, r6
 8032856:	f7f7 f948 	bl	8029aea <strncmp>
 803285a:	2800      	cmp	r0, #0
 803285c:	d13f      	bne.n	80328de <__gethex+0x106>
 803285e:	b944      	cbnz	r4, 8032872 <__gethex+0x9a>
 8032860:	1c74      	adds	r4, r6, #1
 8032862:	4622      	mov	r2, r4
 8032864:	4616      	mov	r6, r2
 8032866:	3201      	adds	r2, #1
 8032868:	7830      	ldrb	r0, [r6, #0]
 803286a:	f7ff ff9f 	bl	80327ac <__hexdig_fun>
 803286e:	2800      	cmp	r0, #0
 8032870:	d1f8      	bne.n	8032864 <__gethex+0x8c>
 8032872:	1ba4      	subs	r4, r4, r6
 8032874:	00a7      	lsls	r7, r4, #2
 8032876:	7833      	ldrb	r3, [r6, #0]
 8032878:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 803287c:	2b50      	cmp	r3, #80	@ 0x50
 803287e:	d13e      	bne.n	80328fe <__gethex+0x126>
 8032880:	7873      	ldrb	r3, [r6, #1]
 8032882:	2b2b      	cmp	r3, #43	@ 0x2b
 8032884:	d033      	beq.n	80328ee <__gethex+0x116>
 8032886:	2b2d      	cmp	r3, #45	@ 0x2d
 8032888:	d034      	beq.n	80328f4 <__gethex+0x11c>
 803288a:	1c71      	adds	r1, r6, #1
 803288c:	2400      	movs	r4, #0
 803288e:	7808      	ldrb	r0, [r1, #0]
 8032890:	f7ff ff8c 	bl	80327ac <__hexdig_fun>
 8032894:	1e43      	subs	r3, r0, #1
 8032896:	b2db      	uxtb	r3, r3
 8032898:	2b18      	cmp	r3, #24
 803289a:	d830      	bhi.n	80328fe <__gethex+0x126>
 803289c:	f1a0 0210 	sub.w	r2, r0, #16
 80328a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80328a4:	f7ff ff82 	bl	80327ac <__hexdig_fun>
 80328a8:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80328ac:	fa5f fc8c 	uxtb.w	ip, ip
 80328b0:	f1bc 0f18 	cmp.w	ip, #24
 80328b4:	f04f 030a 	mov.w	r3, #10
 80328b8:	d91e      	bls.n	80328f8 <__gethex+0x120>
 80328ba:	b104      	cbz	r4, 80328be <__gethex+0xe6>
 80328bc:	4252      	negs	r2, r2
 80328be:	4417      	add	r7, r2
 80328c0:	f8ca 1000 	str.w	r1, [sl]
 80328c4:	b1ed      	cbz	r5, 8032902 <__gethex+0x12a>
 80328c6:	f1bb 0f00 	cmp.w	fp, #0
 80328ca:	bf0c      	ite	eq
 80328cc:	2506      	moveq	r5, #6
 80328ce:	2500      	movne	r5, #0
 80328d0:	4628      	mov	r0, r5
 80328d2:	b005      	add	sp, #20
 80328d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80328d8:	2500      	movs	r5, #0
 80328da:	462c      	mov	r4, r5
 80328dc:	e7b0      	b.n	8032840 <__gethex+0x68>
 80328de:	2c00      	cmp	r4, #0
 80328e0:	d1c7      	bne.n	8032872 <__gethex+0x9a>
 80328e2:	4627      	mov	r7, r4
 80328e4:	e7c7      	b.n	8032876 <__gethex+0x9e>
 80328e6:	464e      	mov	r6, r9
 80328e8:	462f      	mov	r7, r5
 80328ea:	2501      	movs	r5, #1
 80328ec:	e7c3      	b.n	8032876 <__gethex+0x9e>
 80328ee:	2400      	movs	r4, #0
 80328f0:	1cb1      	adds	r1, r6, #2
 80328f2:	e7cc      	b.n	803288e <__gethex+0xb6>
 80328f4:	2401      	movs	r4, #1
 80328f6:	e7fb      	b.n	80328f0 <__gethex+0x118>
 80328f8:	fb03 0002 	mla	r0, r3, r2, r0
 80328fc:	e7ce      	b.n	803289c <__gethex+0xc4>
 80328fe:	4631      	mov	r1, r6
 8032900:	e7de      	b.n	80328c0 <__gethex+0xe8>
 8032902:	eba6 0309 	sub.w	r3, r6, r9
 8032906:	3b01      	subs	r3, #1
 8032908:	4629      	mov	r1, r5
 803290a:	2b07      	cmp	r3, #7
 803290c:	dc0a      	bgt.n	8032924 <__gethex+0x14c>
 803290e:	9801      	ldr	r0, [sp, #4]
 8032910:	f7fd fe22 	bl	8030558 <_Balloc>
 8032914:	4604      	mov	r4, r0
 8032916:	b940      	cbnz	r0, 803292a <__gethex+0x152>
 8032918:	4b5c      	ldr	r3, [pc, #368]	@ (8032a8c <__gethex+0x2b4>)
 803291a:	4602      	mov	r2, r0
 803291c:	21e4      	movs	r1, #228	@ 0xe4
 803291e:	485c      	ldr	r0, [pc, #368]	@ (8032a90 <__gethex+0x2b8>)
 8032920:	f7f4 fb5c 	bl	8026fdc <__assert_func>
 8032924:	3101      	adds	r1, #1
 8032926:	105b      	asrs	r3, r3, #1
 8032928:	e7ef      	b.n	803290a <__gethex+0x132>
 803292a:	f100 0a14 	add.w	sl, r0, #20
 803292e:	2300      	movs	r3, #0
 8032930:	4655      	mov	r5, sl
 8032932:	469b      	mov	fp, r3
 8032934:	45b1      	cmp	r9, r6
 8032936:	d337      	bcc.n	80329a8 <__gethex+0x1d0>
 8032938:	f845 bb04 	str.w	fp, [r5], #4
 803293c:	eba5 050a 	sub.w	r5, r5, sl
 8032940:	10ad      	asrs	r5, r5, #2
 8032942:	6125      	str	r5, [r4, #16]
 8032944:	4658      	mov	r0, fp
 8032946:	f7fd fec5 	bl	80306d4 <__hi0bits>
 803294a:	016d      	lsls	r5, r5, #5
 803294c:	f8d8 6000 	ldr.w	r6, [r8]
 8032950:	1a2d      	subs	r5, r5, r0
 8032952:	42b5      	cmp	r5, r6
 8032954:	dd54      	ble.n	8032a00 <__gethex+0x228>
 8032956:	1bad      	subs	r5, r5, r6
 8032958:	4629      	mov	r1, r5
 803295a:	4620      	mov	r0, r4
 803295c:	f7fe fa3f 	bl	8030dde <__any_on>
 8032960:	4681      	mov	r9, r0
 8032962:	b178      	cbz	r0, 8032984 <__gethex+0x1ac>
 8032964:	1e6b      	subs	r3, r5, #1
 8032966:	1159      	asrs	r1, r3, #5
 8032968:	f003 021f 	and.w	r2, r3, #31
 803296c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8032970:	f04f 0901 	mov.w	r9, #1
 8032974:	fa09 f202 	lsl.w	r2, r9, r2
 8032978:	420a      	tst	r2, r1
 803297a:	d003      	beq.n	8032984 <__gethex+0x1ac>
 803297c:	454b      	cmp	r3, r9
 803297e:	dc36      	bgt.n	80329ee <__gethex+0x216>
 8032980:	f04f 0902 	mov.w	r9, #2
 8032984:	4629      	mov	r1, r5
 8032986:	4620      	mov	r0, r4
 8032988:	f7ff febe 	bl	8032708 <rshift>
 803298c:	442f      	add	r7, r5
 803298e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8032992:	42bb      	cmp	r3, r7
 8032994:	da42      	bge.n	8032a1c <__gethex+0x244>
 8032996:	9801      	ldr	r0, [sp, #4]
 8032998:	4621      	mov	r1, r4
 803299a:	f7fd fe02 	bl	80305a2 <_Bfree>
 803299e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80329a0:	2300      	movs	r3, #0
 80329a2:	6013      	str	r3, [r2, #0]
 80329a4:	25a3      	movs	r5, #163	@ 0xa3
 80329a6:	e793      	b.n	80328d0 <__gethex+0xf8>
 80329a8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80329ac:	2a2e      	cmp	r2, #46	@ 0x2e
 80329ae:	d012      	beq.n	80329d6 <__gethex+0x1fe>
 80329b0:	2b20      	cmp	r3, #32
 80329b2:	d104      	bne.n	80329be <__gethex+0x1e6>
 80329b4:	f845 bb04 	str.w	fp, [r5], #4
 80329b8:	f04f 0b00 	mov.w	fp, #0
 80329bc:	465b      	mov	r3, fp
 80329be:	7830      	ldrb	r0, [r6, #0]
 80329c0:	9303      	str	r3, [sp, #12]
 80329c2:	f7ff fef3 	bl	80327ac <__hexdig_fun>
 80329c6:	9b03      	ldr	r3, [sp, #12]
 80329c8:	f000 000f 	and.w	r0, r0, #15
 80329cc:	4098      	lsls	r0, r3
 80329ce:	ea4b 0b00 	orr.w	fp, fp, r0
 80329d2:	3304      	adds	r3, #4
 80329d4:	e7ae      	b.n	8032934 <__gethex+0x15c>
 80329d6:	45b1      	cmp	r9, r6
 80329d8:	d8ea      	bhi.n	80329b0 <__gethex+0x1d8>
 80329da:	492b      	ldr	r1, [pc, #172]	@ (8032a88 <__gethex+0x2b0>)
 80329dc:	9303      	str	r3, [sp, #12]
 80329de:	2201      	movs	r2, #1
 80329e0:	4630      	mov	r0, r6
 80329e2:	f7f7 f882 	bl	8029aea <strncmp>
 80329e6:	9b03      	ldr	r3, [sp, #12]
 80329e8:	2800      	cmp	r0, #0
 80329ea:	d1e1      	bne.n	80329b0 <__gethex+0x1d8>
 80329ec:	e7a2      	b.n	8032934 <__gethex+0x15c>
 80329ee:	1ea9      	subs	r1, r5, #2
 80329f0:	4620      	mov	r0, r4
 80329f2:	f7fe f9f4 	bl	8030dde <__any_on>
 80329f6:	2800      	cmp	r0, #0
 80329f8:	d0c2      	beq.n	8032980 <__gethex+0x1a8>
 80329fa:	f04f 0903 	mov.w	r9, #3
 80329fe:	e7c1      	b.n	8032984 <__gethex+0x1ac>
 8032a00:	da09      	bge.n	8032a16 <__gethex+0x23e>
 8032a02:	1b75      	subs	r5, r6, r5
 8032a04:	4621      	mov	r1, r4
 8032a06:	9801      	ldr	r0, [sp, #4]
 8032a08:	462a      	mov	r2, r5
 8032a0a:	f7fd ffaf 	bl	803096c <__lshift>
 8032a0e:	1b7f      	subs	r7, r7, r5
 8032a10:	4604      	mov	r4, r0
 8032a12:	f100 0a14 	add.w	sl, r0, #20
 8032a16:	f04f 0900 	mov.w	r9, #0
 8032a1a:	e7b8      	b.n	803298e <__gethex+0x1b6>
 8032a1c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8032a20:	42bd      	cmp	r5, r7
 8032a22:	dd6f      	ble.n	8032b04 <__gethex+0x32c>
 8032a24:	1bed      	subs	r5, r5, r7
 8032a26:	42ae      	cmp	r6, r5
 8032a28:	dc34      	bgt.n	8032a94 <__gethex+0x2bc>
 8032a2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8032a2e:	2b02      	cmp	r3, #2
 8032a30:	d022      	beq.n	8032a78 <__gethex+0x2a0>
 8032a32:	2b03      	cmp	r3, #3
 8032a34:	d024      	beq.n	8032a80 <__gethex+0x2a8>
 8032a36:	2b01      	cmp	r3, #1
 8032a38:	d115      	bne.n	8032a66 <__gethex+0x28e>
 8032a3a:	42ae      	cmp	r6, r5
 8032a3c:	d113      	bne.n	8032a66 <__gethex+0x28e>
 8032a3e:	2e01      	cmp	r6, #1
 8032a40:	d10b      	bne.n	8032a5a <__gethex+0x282>
 8032a42:	9a02      	ldr	r2, [sp, #8]
 8032a44:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8032a48:	6013      	str	r3, [r2, #0]
 8032a4a:	2301      	movs	r3, #1
 8032a4c:	6123      	str	r3, [r4, #16]
 8032a4e:	f8ca 3000 	str.w	r3, [sl]
 8032a52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8032a54:	2562      	movs	r5, #98	@ 0x62
 8032a56:	601c      	str	r4, [r3, #0]
 8032a58:	e73a      	b.n	80328d0 <__gethex+0xf8>
 8032a5a:	1e71      	subs	r1, r6, #1
 8032a5c:	4620      	mov	r0, r4
 8032a5e:	f7fe f9be 	bl	8030dde <__any_on>
 8032a62:	2800      	cmp	r0, #0
 8032a64:	d1ed      	bne.n	8032a42 <__gethex+0x26a>
 8032a66:	9801      	ldr	r0, [sp, #4]
 8032a68:	4621      	mov	r1, r4
 8032a6a:	f7fd fd9a 	bl	80305a2 <_Bfree>
 8032a6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8032a70:	2300      	movs	r3, #0
 8032a72:	6013      	str	r3, [r2, #0]
 8032a74:	2550      	movs	r5, #80	@ 0x50
 8032a76:	e72b      	b.n	80328d0 <__gethex+0xf8>
 8032a78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8032a7a:	2b00      	cmp	r3, #0
 8032a7c:	d1f3      	bne.n	8032a66 <__gethex+0x28e>
 8032a7e:	e7e0      	b.n	8032a42 <__gethex+0x26a>
 8032a80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8032a82:	2b00      	cmp	r3, #0
 8032a84:	d1dd      	bne.n	8032a42 <__gethex+0x26a>
 8032a86:	e7ee      	b.n	8032a66 <__gethex+0x28e>
 8032a88:	0803824e 	.word	0x0803824e
 8032a8c:	08038586 	.word	0x08038586
 8032a90:	08038820 	.word	0x08038820
 8032a94:	1e6f      	subs	r7, r5, #1
 8032a96:	f1b9 0f00 	cmp.w	r9, #0
 8032a9a:	d130      	bne.n	8032afe <__gethex+0x326>
 8032a9c:	b127      	cbz	r7, 8032aa8 <__gethex+0x2d0>
 8032a9e:	4639      	mov	r1, r7
 8032aa0:	4620      	mov	r0, r4
 8032aa2:	f7fe f99c 	bl	8030dde <__any_on>
 8032aa6:	4681      	mov	r9, r0
 8032aa8:	117a      	asrs	r2, r7, #5
 8032aaa:	2301      	movs	r3, #1
 8032aac:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8032ab0:	f007 071f 	and.w	r7, r7, #31
 8032ab4:	40bb      	lsls	r3, r7
 8032ab6:	4213      	tst	r3, r2
 8032ab8:	4629      	mov	r1, r5
 8032aba:	4620      	mov	r0, r4
 8032abc:	bf18      	it	ne
 8032abe:	f049 0902 	orrne.w	r9, r9, #2
 8032ac2:	f7ff fe21 	bl	8032708 <rshift>
 8032ac6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8032aca:	1b76      	subs	r6, r6, r5
 8032acc:	2502      	movs	r5, #2
 8032ace:	f1b9 0f00 	cmp.w	r9, #0
 8032ad2:	d047      	beq.n	8032b64 <__gethex+0x38c>
 8032ad4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8032ad8:	2b02      	cmp	r3, #2
 8032ada:	d015      	beq.n	8032b08 <__gethex+0x330>
 8032adc:	2b03      	cmp	r3, #3
 8032ade:	d017      	beq.n	8032b10 <__gethex+0x338>
 8032ae0:	2b01      	cmp	r3, #1
 8032ae2:	d109      	bne.n	8032af8 <__gethex+0x320>
 8032ae4:	f019 0f02 	tst.w	r9, #2
 8032ae8:	d006      	beq.n	8032af8 <__gethex+0x320>
 8032aea:	f8da 3000 	ldr.w	r3, [sl]
 8032aee:	ea49 0903 	orr.w	r9, r9, r3
 8032af2:	f019 0f01 	tst.w	r9, #1
 8032af6:	d10e      	bne.n	8032b16 <__gethex+0x33e>
 8032af8:	f045 0510 	orr.w	r5, r5, #16
 8032afc:	e032      	b.n	8032b64 <__gethex+0x38c>
 8032afe:	f04f 0901 	mov.w	r9, #1
 8032b02:	e7d1      	b.n	8032aa8 <__gethex+0x2d0>
 8032b04:	2501      	movs	r5, #1
 8032b06:	e7e2      	b.n	8032ace <__gethex+0x2f6>
 8032b08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8032b0a:	f1c3 0301 	rsb	r3, r3, #1
 8032b0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8032b10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8032b12:	2b00      	cmp	r3, #0
 8032b14:	d0f0      	beq.n	8032af8 <__gethex+0x320>
 8032b16:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8032b1a:	f104 0314 	add.w	r3, r4, #20
 8032b1e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8032b22:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8032b26:	f04f 0c00 	mov.w	ip, #0
 8032b2a:	4618      	mov	r0, r3
 8032b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8032b30:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8032b34:	d01b      	beq.n	8032b6e <__gethex+0x396>
 8032b36:	3201      	adds	r2, #1
 8032b38:	6002      	str	r2, [r0, #0]
 8032b3a:	2d02      	cmp	r5, #2
 8032b3c:	f104 0314 	add.w	r3, r4, #20
 8032b40:	d13c      	bne.n	8032bbc <__gethex+0x3e4>
 8032b42:	f8d8 2000 	ldr.w	r2, [r8]
 8032b46:	3a01      	subs	r2, #1
 8032b48:	42b2      	cmp	r2, r6
 8032b4a:	d109      	bne.n	8032b60 <__gethex+0x388>
 8032b4c:	1171      	asrs	r1, r6, #5
 8032b4e:	2201      	movs	r2, #1
 8032b50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8032b54:	f006 061f 	and.w	r6, r6, #31
 8032b58:	fa02 f606 	lsl.w	r6, r2, r6
 8032b5c:	421e      	tst	r6, r3
 8032b5e:	d13a      	bne.n	8032bd6 <__gethex+0x3fe>
 8032b60:	f045 0520 	orr.w	r5, r5, #32
 8032b64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8032b66:	601c      	str	r4, [r3, #0]
 8032b68:	9b02      	ldr	r3, [sp, #8]
 8032b6a:	601f      	str	r7, [r3, #0]
 8032b6c:	e6b0      	b.n	80328d0 <__gethex+0xf8>
 8032b6e:	4299      	cmp	r1, r3
 8032b70:	f843 cc04 	str.w	ip, [r3, #-4]
 8032b74:	d8d9      	bhi.n	8032b2a <__gethex+0x352>
 8032b76:	68a3      	ldr	r3, [r4, #8]
 8032b78:	459b      	cmp	fp, r3
 8032b7a:	db17      	blt.n	8032bac <__gethex+0x3d4>
 8032b7c:	6861      	ldr	r1, [r4, #4]
 8032b7e:	9801      	ldr	r0, [sp, #4]
 8032b80:	3101      	adds	r1, #1
 8032b82:	f7fd fce9 	bl	8030558 <_Balloc>
 8032b86:	4681      	mov	r9, r0
 8032b88:	b918      	cbnz	r0, 8032b92 <__gethex+0x3ba>
 8032b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8032bf4 <__gethex+0x41c>)
 8032b8c:	4602      	mov	r2, r0
 8032b8e:	2184      	movs	r1, #132	@ 0x84
 8032b90:	e6c5      	b.n	803291e <__gethex+0x146>
 8032b92:	6922      	ldr	r2, [r4, #16]
 8032b94:	3202      	adds	r2, #2
 8032b96:	f104 010c 	add.w	r1, r4, #12
 8032b9a:	0092      	lsls	r2, r2, #2
 8032b9c:	300c      	adds	r0, #12
 8032b9e:	f7f8 f9ab 	bl	802aef8 <memcpy>
 8032ba2:	4621      	mov	r1, r4
 8032ba4:	9801      	ldr	r0, [sp, #4]
 8032ba6:	f7fd fcfc 	bl	80305a2 <_Bfree>
 8032baa:	464c      	mov	r4, r9
 8032bac:	6923      	ldr	r3, [r4, #16]
 8032bae:	1c5a      	adds	r2, r3, #1
 8032bb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8032bb4:	6122      	str	r2, [r4, #16]
 8032bb6:	2201      	movs	r2, #1
 8032bb8:	615a      	str	r2, [r3, #20]
 8032bba:	e7be      	b.n	8032b3a <__gethex+0x362>
 8032bbc:	6922      	ldr	r2, [r4, #16]
 8032bbe:	455a      	cmp	r2, fp
 8032bc0:	dd0b      	ble.n	8032bda <__gethex+0x402>
 8032bc2:	2101      	movs	r1, #1
 8032bc4:	4620      	mov	r0, r4
 8032bc6:	f7ff fd9f 	bl	8032708 <rshift>
 8032bca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8032bce:	3701      	adds	r7, #1
 8032bd0:	42bb      	cmp	r3, r7
 8032bd2:	f6ff aee0 	blt.w	8032996 <__gethex+0x1be>
 8032bd6:	2501      	movs	r5, #1
 8032bd8:	e7c2      	b.n	8032b60 <__gethex+0x388>
 8032bda:	f016 061f 	ands.w	r6, r6, #31
 8032bde:	d0fa      	beq.n	8032bd6 <__gethex+0x3fe>
 8032be0:	4453      	add	r3, sl
 8032be2:	f1c6 0620 	rsb	r6, r6, #32
 8032be6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8032bea:	f7fd fd73 	bl	80306d4 <__hi0bits>
 8032bee:	42b0      	cmp	r0, r6
 8032bf0:	dbe7      	blt.n	8032bc2 <__gethex+0x3ea>
 8032bf2:	e7f0      	b.n	8032bd6 <__gethex+0x3fe>
 8032bf4:	08038586 	.word	0x08038586

08032bf8 <L_shift>:
 8032bf8:	f1c2 0208 	rsb	r2, r2, #8
 8032bfc:	0092      	lsls	r2, r2, #2
 8032bfe:	b570      	push	{r4, r5, r6, lr}
 8032c00:	f1c2 0620 	rsb	r6, r2, #32
 8032c04:	6843      	ldr	r3, [r0, #4]
 8032c06:	6804      	ldr	r4, [r0, #0]
 8032c08:	fa03 f506 	lsl.w	r5, r3, r6
 8032c0c:	432c      	orrs	r4, r5
 8032c0e:	40d3      	lsrs	r3, r2
 8032c10:	6004      	str	r4, [r0, #0]
 8032c12:	f840 3f04 	str.w	r3, [r0, #4]!
 8032c16:	4288      	cmp	r0, r1
 8032c18:	d3f4      	bcc.n	8032c04 <L_shift+0xc>
 8032c1a:	bd70      	pop	{r4, r5, r6, pc}

08032c1c <__match>:
 8032c1c:	b530      	push	{r4, r5, lr}
 8032c1e:	6803      	ldr	r3, [r0, #0]
 8032c20:	3301      	adds	r3, #1
 8032c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8032c26:	b914      	cbnz	r4, 8032c2e <__match+0x12>
 8032c28:	6003      	str	r3, [r0, #0]
 8032c2a:	2001      	movs	r0, #1
 8032c2c:	bd30      	pop	{r4, r5, pc}
 8032c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8032c32:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8032c36:	2d19      	cmp	r5, #25
 8032c38:	bf98      	it	ls
 8032c3a:	3220      	addls	r2, #32
 8032c3c:	42a2      	cmp	r2, r4
 8032c3e:	d0f0      	beq.n	8032c22 <__match+0x6>
 8032c40:	2000      	movs	r0, #0
 8032c42:	e7f3      	b.n	8032c2c <__match+0x10>

08032c44 <__hexnan>:
 8032c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032c48:	680b      	ldr	r3, [r1, #0]
 8032c4a:	6801      	ldr	r1, [r0, #0]
 8032c4c:	115e      	asrs	r6, r3, #5
 8032c4e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8032c52:	f013 031f 	ands.w	r3, r3, #31
 8032c56:	b087      	sub	sp, #28
 8032c58:	bf18      	it	ne
 8032c5a:	3604      	addne	r6, #4
 8032c5c:	2500      	movs	r5, #0
 8032c5e:	1f37      	subs	r7, r6, #4
 8032c60:	4682      	mov	sl, r0
 8032c62:	4690      	mov	r8, r2
 8032c64:	9301      	str	r3, [sp, #4]
 8032c66:	f846 5c04 	str.w	r5, [r6, #-4]
 8032c6a:	46b9      	mov	r9, r7
 8032c6c:	463c      	mov	r4, r7
 8032c6e:	9502      	str	r5, [sp, #8]
 8032c70:	46ab      	mov	fp, r5
 8032c72:	784a      	ldrb	r2, [r1, #1]
 8032c74:	1c4b      	adds	r3, r1, #1
 8032c76:	9303      	str	r3, [sp, #12]
 8032c78:	b342      	cbz	r2, 8032ccc <__hexnan+0x88>
 8032c7a:	4610      	mov	r0, r2
 8032c7c:	9105      	str	r1, [sp, #20]
 8032c7e:	9204      	str	r2, [sp, #16]
 8032c80:	f7ff fd94 	bl	80327ac <__hexdig_fun>
 8032c84:	2800      	cmp	r0, #0
 8032c86:	d151      	bne.n	8032d2c <__hexnan+0xe8>
 8032c88:	9a04      	ldr	r2, [sp, #16]
 8032c8a:	9905      	ldr	r1, [sp, #20]
 8032c8c:	2a20      	cmp	r2, #32
 8032c8e:	d818      	bhi.n	8032cc2 <__hexnan+0x7e>
 8032c90:	9b02      	ldr	r3, [sp, #8]
 8032c92:	459b      	cmp	fp, r3
 8032c94:	dd13      	ble.n	8032cbe <__hexnan+0x7a>
 8032c96:	454c      	cmp	r4, r9
 8032c98:	d206      	bcs.n	8032ca8 <__hexnan+0x64>
 8032c9a:	2d07      	cmp	r5, #7
 8032c9c:	dc04      	bgt.n	8032ca8 <__hexnan+0x64>
 8032c9e:	462a      	mov	r2, r5
 8032ca0:	4649      	mov	r1, r9
 8032ca2:	4620      	mov	r0, r4
 8032ca4:	f7ff ffa8 	bl	8032bf8 <L_shift>
 8032ca8:	4544      	cmp	r4, r8
 8032caa:	d952      	bls.n	8032d52 <__hexnan+0x10e>
 8032cac:	2300      	movs	r3, #0
 8032cae:	f1a4 0904 	sub.w	r9, r4, #4
 8032cb2:	f844 3c04 	str.w	r3, [r4, #-4]
 8032cb6:	f8cd b008 	str.w	fp, [sp, #8]
 8032cba:	464c      	mov	r4, r9
 8032cbc:	461d      	mov	r5, r3
 8032cbe:	9903      	ldr	r1, [sp, #12]
 8032cc0:	e7d7      	b.n	8032c72 <__hexnan+0x2e>
 8032cc2:	2a29      	cmp	r2, #41	@ 0x29
 8032cc4:	d157      	bne.n	8032d76 <__hexnan+0x132>
 8032cc6:	3102      	adds	r1, #2
 8032cc8:	f8ca 1000 	str.w	r1, [sl]
 8032ccc:	f1bb 0f00 	cmp.w	fp, #0
 8032cd0:	d051      	beq.n	8032d76 <__hexnan+0x132>
 8032cd2:	454c      	cmp	r4, r9
 8032cd4:	d206      	bcs.n	8032ce4 <__hexnan+0xa0>
 8032cd6:	2d07      	cmp	r5, #7
 8032cd8:	dc04      	bgt.n	8032ce4 <__hexnan+0xa0>
 8032cda:	462a      	mov	r2, r5
 8032cdc:	4649      	mov	r1, r9
 8032cde:	4620      	mov	r0, r4
 8032ce0:	f7ff ff8a 	bl	8032bf8 <L_shift>
 8032ce4:	4544      	cmp	r4, r8
 8032ce6:	d936      	bls.n	8032d56 <__hexnan+0x112>
 8032ce8:	f1a8 0204 	sub.w	r2, r8, #4
 8032cec:	4623      	mov	r3, r4
 8032cee:	f853 1b04 	ldr.w	r1, [r3], #4
 8032cf2:	f842 1f04 	str.w	r1, [r2, #4]!
 8032cf6:	429f      	cmp	r7, r3
 8032cf8:	d2f9      	bcs.n	8032cee <__hexnan+0xaa>
 8032cfa:	1b3b      	subs	r3, r7, r4
 8032cfc:	f023 0303 	bic.w	r3, r3, #3
 8032d00:	3304      	adds	r3, #4
 8032d02:	3401      	adds	r4, #1
 8032d04:	3e03      	subs	r6, #3
 8032d06:	42b4      	cmp	r4, r6
 8032d08:	bf88      	it	hi
 8032d0a:	2304      	movhi	r3, #4
 8032d0c:	4443      	add	r3, r8
 8032d0e:	2200      	movs	r2, #0
 8032d10:	f843 2b04 	str.w	r2, [r3], #4
 8032d14:	429f      	cmp	r7, r3
 8032d16:	d2fb      	bcs.n	8032d10 <__hexnan+0xcc>
 8032d18:	683b      	ldr	r3, [r7, #0]
 8032d1a:	b91b      	cbnz	r3, 8032d24 <__hexnan+0xe0>
 8032d1c:	4547      	cmp	r7, r8
 8032d1e:	d128      	bne.n	8032d72 <__hexnan+0x12e>
 8032d20:	2301      	movs	r3, #1
 8032d22:	603b      	str	r3, [r7, #0]
 8032d24:	2005      	movs	r0, #5
 8032d26:	b007      	add	sp, #28
 8032d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8032d2c:	3501      	adds	r5, #1
 8032d2e:	2d08      	cmp	r5, #8
 8032d30:	f10b 0b01 	add.w	fp, fp, #1
 8032d34:	dd06      	ble.n	8032d44 <__hexnan+0x100>
 8032d36:	4544      	cmp	r4, r8
 8032d38:	d9c1      	bls.n	8032cbe <__hexnan+0x7a>
 8032d3a:	2300      	movs	r3, #0
 8032d3c:	f844 3c04 	str.w	r3, [r4, #-4]
 8032d40:	2501      	movs	r5, #1
 8032d42:	3c04      	subs	r4, #4
 8032d44:	6822      	ldr	r2, [r4, #0]
 8032d46:	f000 000f 	and.w	r0, r0, #15
 8032d4a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8032d4e:	6020      	str	r0, [r4, #0]
 8032d50:	e7b5      	b.n	8032cbe <__hexnan+0x7a>
 8032d52:	2508      	movs	r5, #8
 8032d54:	e7b3      	b.n	8032cbe <__hexnan+0x7a>
 8032d56:	9b01      	ldr	r3, [sp, #4]
 8032d58:	2b00      	cmp	r3, #0
 8032d5a:	d0dd      	beq.n	8032d18 <__hexnan+0xd4>
 8032d5c:	f1c3 0320 	rsb	r3, r3, #32
 8032d60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8032d64:	40da      	lsrs	r2, r3
 8032d66:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8032d6a:	4013      	ands	r3, r2
 8032d6c:	f846 3c04 	str.w	r3, [r6, #-4]
 8032d70:	e7d2      	b.n	8032d18 <__hexnan+0xd4>
 8032d72:	3f04      	subs	r7, #4
 8032d74:	e7d0      	b.n	8032d18 <__hexnan+0xd4>
 8032d76:	2004      	movs	r0, #4
 8032d78:	e7d5      	b.n	8032d26 <__hexnan+0xe2>
	...

08032d7c <_init>:
 8032d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8032d7e:	bf00      	nop
 8032d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8032d82:	bc08      	pop	{r3}
 8032d84:	469e      	mov	lr, r3
 8032d86:	4770      	bx	lr

08032d88 <_fini>:
 8032d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8032d8a:	bf00      	nop
 8032d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8032d8e:	bc08      	pop	{r3}
 8032d90:	469e      	mov	lr, r3
 8032d92:	4770      	bx	lr
